//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_gc "bufio";_d "bytes";_c "errors";_fc "fmt";_a "github.com/unidoc/unipdf/v3/common";_cb "github.com/unidoc/unipdf/v3/core";_f "io";_fg "math";);

// PSParser is a basic Postscript parser.
type PSParser struct{_adea *_gc .Reader };func (_dgfa *PSParser )skipSpaces ()(int ,error ){_adfg :=0;for {_gbfb ,_dac :=_dgfa ._adea .Peek (1);if _dac !=nil {return 0,_dac ;};if _cb .IsWhiteSpace (_gbfb [0]){_dgfa ._adea .ReadByte ();_adfg ++;}else {break ;};};return _adfg ,nil ;};func (_bae *PSOperand )dup (_fbgb *PSStack )error {_egb ,_abe :=_fbgb .Pop ();if _abe !=nil {return _abe ;};_abe =_fbgb .Push (_egb );if _abe !=nil {return _abe ;};_abe =_fbgb .Push (_egb .Duplicate ());return _abe ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_fa *PSProgram ;};func (_fbe *PSOperand )ln (_bab *PSStack )error {_ecaa ,_cbgf :=_bab .PopNumberAsFloat64 ();if _cbgf !=nil {return _cbgf ;};_fbc :=_fg .Log (_ecaa );_cbgf =_bab .Push (MakeReal (_fbc ));return _cbgf ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_faea *PSStack )DebugString ()string {_bdge :="\u005b\u0020";for _ ,_ceb :=range *_faea {_bdge +=_ceb .DebugString ();_bdge +="\u0020";};_bdge +="\u005d";return _bdge ;};func (_dabb *PSOperand )ifelse (_eag *PSStack )error {_cga ,_afba :=_eag .Pop ();if _afba !=nil {return _afba ;};_eceg ,_afba :=_eag .Pop ();if _afba !=nil {return _afba ;};_gef ,_afba :=_eag .Pop ();if _afba !=nil {return _afba ;};_bbec ,_faa :=_cga .(*PSProgram );if !_faa {return ErrTypeCheck ;};_ege ,_faa :=_eceg .(*PSProgram );if !_faa {return ErrTypeCheck ;};_gebd ,_faa :=_gef .(*PSBoolean );if !_faa {return ErrTypeCheck ;};if _gebd .Val {_gbdd :=_ege .Exec (_eag );return _gbdd ;};_afba =_bbec .Exec (_eag );return _afba ;};func (_gg *PSOperand )String ()string {return string (*_gg )};func (_fada *PSOperand )mod (_cfad *PSStack )error {_caea ,_gdc :=_cfad .Pop ();if _gdc !=nil {return _gdc ;};_gaf ,_gdc :=_cfad .Pop ();if _gdc !=nil {return _gdc ;};_daec ,_bce :=_caea .(*PSInteger );if !_bce {return ErrTypeCheck ;};if _daec .Val ==0{return ErrUndefinedResult ;};_bgd ,_bce :=_gaf .(*PSInteger );if !_bce {return ErrTypeCheck ;};_bbd :=_bgd .Val %_daec .Val ;_gdc =_cfad .Push (MakeInteger (_bbd ));return _gdc ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_bceg *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_abeg ,_egea :=_bceg .Pop ();if _egea !=nil {return 0,_egea ;};if _aaae ,_dbc :=_abeg .(*PSReal );_dbc {return _aaae .Val ,nil ;}else if _dagg ,_bgdfb :=_abeg .(*PSInteger );_bgdfb {return float64 (_dagg .Val ),nil ;}else {return 0,ErrTypeCheck ;};};var ErrStackUnderflow =_c .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_cfcf *PSOperand )exp (_dgf *PSStack )error {_cafa ,_bdfc :=_dgf .PopNumberAsFloat64 ();if _bdfc !=nil {return _bdfc ;};_edfa ,_bdfc :=_dgf .PopNumberAsFloat64 ();if _bdfc !=nil {return _bdfc ;};if _fg .Abs (_cafa )< 1&&_edfa < 0{return ErrUndefinedResult ;};_dee :=_fg .Pow (_edfa ,_cafa );_bdfc =_dgf .Push (MakeReal (_dee ));return _bdfc ;};var ErrUnsupportedOperand =_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");var ErrUndefinedResult =_c .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _ab []float64 ;for _ ,_cbb :=range objects {if _cd ,_fge :=_cbb .(*PSInteger );_fge {_ab =append (_ab ,float64 (_cd .Val ));}else if _fga ,_ba :=_cbb .(*PSReal );_ba {_ab =append (_ab ,_fga .Val );}else {return nil ,ErrTypeCheck ;};};return _ab ,nil ;};func (_caf *PSOperand )cos (_cgfg *PSStack )error {_fcbf ,_ffa :=_cgfg .PopNumberAsFloat64 ();if _ffa !=nil {return _ffa ;};_bdd :=_fg .Cos (_fcbf *_fg .Pi /180.0);_ffa =_cgfg .Push (MakeReal (_bdd ));return _ffa ;};func (_abfa *PSOperand )gt (_bea *PSStack )error {_bfae ,_dff :=_bea .PopNumberAsFloat64 ();if _dff !=nil {return _dff ;};_ccgg ,_dff :=_bea .PopNumberAsFloat64 ();if _dff !=nil {return _dff ;};if _fg .Abs (_ccgg -_bfae )< _b {_fdd :=_bea .Push (MakeBool (false ));return _fdd ;}else if _ccgg > _bfae {_bdg :=_bea .Push (MakeBool (true ));return _bdg ;}else {_add :=_bea .Push (MakeBool (false ));return _add ;};};func (_eff *PSOperand )log (_ede *PSStack )error {_eea ,_aagc :=_ede .PopNumberAsFloat64 ();if _aagc !=nil {return _aagc ;};_eeb :=_fg .Log10 (_eea );_aagc =_ede .Push (MakeReal (_eeb ));return _aagc ;};func (_agd *PSReal )Duplicate ()PSObject {_fgg :=PSReal {};_fgg .Val =_agd .Val ;return &_fgg };func (_dca *PSOperand )round (_dgb *PSStack )error {_bbca ,_gbfc :=_dgb .Pop ();if _gbfc !=nil {return _gbfc ;};if _bdc ,_ebd :=_bbca .(*PSReal );_ebd {_gbfc =_dgb .Push (MakeReal (_fg .Floor (_bdc .Val +0.5)));}else if _gcf ,_ggb :=_bbca .(*PSInteger );_ggb {_gbfc =_dgb .Push (MakeInteger (_gcf .Val ));}else {return ErrTypeCheck ;};return _gbfc ;};func (_gce *PSOperand )or (_bcc *PSStack )error {_cgg ,_gdg :=_bcc .Pop ();if _gdg !=nil {return _gdg ;};_gbcd ,_gdg :=_bcc .Pop ();if _gdg !=nil {return _gdg ;};if _dfga ,_ccgb :=_cgg .(*PSBoolean );_ccgb {_eda ,_bfgb :=_gbcd .(*PSBoolean );if !_bfgb {return ErrTypeCheck ;};_gdg =_bcc .Push (MakeBool (_dfga .Val ||_eda .Val ));return _gdg ;};if _bdb ,_becg :=_cgg .(*PSInteger );_becg {_gecf ,_cgab :=_gbcd .(*PSInteger );if !_cgab {return ErrTypeCheck ;};_gdg =_bcc .Push (MakeInteger (_bdb .Val |_gecf .Val ));return _gdg ;};return ErrTypeCheck ;};func (_aab *PSOperand )ifCondition (_cfce *PSStack )error {_bbf ,_fdgf :=_cfce .Pop ();if _fdgf !=nil {return _fdgf ;};_agcg ,_fdgf :=_cfce .Pop ();if _fdgf !=nil {return _fdgf ;};_dfc ,_bcd :=_bbf .(*PSProgram );if !_bcd {return ErrTypeCheck ;};_aag ,_bcd :=_agcg .(*PSBoolean );if !_bcd {return ErrTypeCheck ;};if _aag .Val {_egc :=_dfc .Exec (_cfce );return _egc ;};return nil ;};func (_efe *PSParser )parseOperand ()(*PSOperand ,error ){var _bcbe []byte ;for {_gbba ,_fdf :=_efe ._adea .Peek (1);if _fdf !=nil {if _fdf ==_f .EOF {break ;};return nil ,_fdf ;};if _cb .IsDelimiter (_gbba [0]){break ;};if _cb .IsWhiteSpace (_gbba [0]){break ;};_cgce ,_ :=_efe ._adea .ReadByte ();_bcbe =append (_bcbe ,_cgce );};if len (_bcbe )==0{return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_bcbe )),nil ;};func (_edg *PSOperand )atan (_ade *PSStack )error {_aac ,_faf :=_ade .PopNumberAsFloat64 ();if _faf !=nil {return _faf ;};_bbg ,_faf :=_ade .PopNumberAsFloat64 ();if _faf !=nil {return _faf ;};if _aac ==0{var _fad error ;if _bbg < 0{_fad =_ade .Push (MakeReal (270));}else {_fad =_ade .Push (MakeReal (90));};return _fad ;};_bg :=_bbg /_aac ;_fbge :=_fg .Atan (_bg )*180/_fg .Pi ;_faf =_ade .Push (MakeReal (_fbge ));return _faf ;};func (_cfac *PSOperand )le (_gbbb *PSStack )error {_fegd ,_ffag :=_gbbb .PopNumberAsFloat64 ();if _ffag !=nil {return _ffag ;};_gdeg ,_ffag :=_gbbb .PopNumberAsFloat64 ();if _ffag !=nil {return _ffag ;};if _fg .Abs (_gdeg -_fegd )< _b {_ecd :=_gbbb .Push (MakeBool (true ));return _ecd ;}else if _gdeg < _fegd {_egcb :=_gbbb .Push (MakeBool (true ));return _egcb ;}else {_cdab :=_gbbb .Push (MakeBool (false ));return _cdab ;};};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_bbfb :=PSBoolean {};_bbfb .Val =val ;return &_bbfb };func (_dc *PSBoolean )DebugString ()string {return _fc .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_dc .Val );};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_bad *PSOperand )idiv (_aadb *PSStack )error {_feg ,_cee :=_aadb .Pop ();if _cee !=nil {return _cee ;};_gec ,_cee :=_aadb .Pop ();if _cee !=nil {return _cee ;};_dab ,_efb :=_feg .(*PSInteger );if !_efb {return ErrTypeCheck ;};if _dab .Val ==0{return ErrUndefinedResult ;};_gfa ,_efb :=_gec .(*PSInteger );if !_efb {return ErrTypeCheck ;};_gcda :=_gfa .Val /_dab .Val ;_cee =_aadb .Push (MakeInteger (_gcda ));return _cee ;};

// Parse parses the postscript and store as a program that can be executed.
func (_bbba *PSParser )Parse ()(*PSProgram ,error ){_bbba .skipSpaces ();_bfbb ,_cbbb :=_bbba ._adea .Peek (2);if _cbbb !=nil {return nil ,_cbbb ;};if _bfbb [0]!='{'{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_ffbc ,_cbbb :=_bbba .parseFunction ();if _cbbb !=nil &&_cbbb !=_f .EOF {return nil ,_cbbb ;};return _ffbc ,_cbbb ;};const _b =0.000001;func (_caa *PSOperand )cvi (_bee *PSStack )error {_gca ,_fdg :=_bee .Pop ();if _fdg !=nil {return _fdg ;};if _cbfd ,_adf :=_gca .(*PSReal );_adf {_eadf :=int (_cbfd .Val );_fdg =_bee .Push (MakeInteger (_eadf ));}else if _eba ,_ge :=_gca .(*PSInteger );_ge {_bafd :=_eba .Val ;_fdg =_bee .Push (MakeInteger (_bafd ));}else {return ErrTypeCheck ;};return _fdg ;};var ErrTypeCheck =_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_abfd *PSOperand )Duplicate ()PSObject {_bd :=*_abfd ;return &_bd };

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_afgc *PSStack )PopInteger ()(int ,error ){_bcf ,_dgbe :=_afgc .Pop ();if _dgbe !=nil {return 0,_dgbe ;};if _bdab ,_eeed :=_bcf .(*PSInteger );_eeed {return _bdab .Val ,nil ;};return 0,ErrTypeCheck ;};

// Empty empties the stack.
func (_bfeag *PSStack )Empty (){*_bfeag =[]PSObject {}};func (_bed *PSOperand )index (_abg *PSStack )error {_bfe ,_ace :=_abg .Pop ();if _ace !=nil {return _ace ;};_dge ,_ecaf :=_bfe .(*PSInteger );if !_ecaf {return ErrTypeCheck ;};if _dge .Val < 0{return ErrRangeCheck ;};if _dge .Val > len (*_abg )-1{return ErrStackUnderflow ;};_gff :=(*_abg )[len (*_abg )-1-_dge .Val ];_ace =_abg .Push (_gff .Duplicate ());return _ace ;};func (_afd *PSOperand )bitshift (_gag *PSStack )error {_bca ,_ggg :=_gag .PopInteger ();if _ggg !=nil {return _ggg ;};_dea ,_ggg :=_gag .PopInteger ();if _ggg !=nil {return _ggg ;};var _dde int ;if _bca >=0{_dde =_dea <<uint (_bca );}else {_dde =_dea >>uint (-_bca );};_ggg =_gag .Push (MakeInteger (_dde ));return _ggg ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_db *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ag :=range objects {_gb :=_db .Stack .Push (_ag );if _gb !=nil {return nil ,_gb ;};};_e :=_db ._fa .Exec (_db .Stack );if _e !=nil {_a .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_e );return nil ,_e ;};_abf :=[]PSObject (*_db .Stack );_db .Stack .Empty ();return _abf ,nil ;};

// Pop pops an object from the top of the stack.
func (_daba *PSStack )Pop ()(PSObject ,error ){if len (*_daba )< 1{return nil ,ErrStackUnderflow ;};_fged :=(*_daba )[len (*_daba )-1];*_daba =(*_daba )[0:len (*_daba )-1];return _fged ,nil ;};func (_bbb *PSOperand )exch (_cgdd *PSStack )error {_aad ,_ecef :=_cgdd .Pop ();if _ecef !=nil {return _ecef ;};_eac ,_ecef :=_cgdd .Pop ();if _ecef !=nil {return _ecef ;};_ecef =_cgdd .Push (_aad );if _ecef !=nil {return _ecef ;};_ecef =_cgdd .Push (_eac );return _ecef ;};func (_gcg *PSInteger )String ()string {return _fc .Sprintf ("\u0025\u0064",_gcg .Val )};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_bga :=PSReal {};_bga .Val =val ;return &_bga };func (_cba *PSOperand )ge (_dfg *PSStack )error {_efgb ,_bbgf :=_dfg .PopNumberAsFloat64 ();if _bbgf !=nil {return _bbgf ;};_defe ,_bbgf :=_dfg .PopNumberAsFloat64 ();if _bbgf !=nil {return _bbgf ;};if _fg .Abs (_defe -_efgb )< _b {_ce :=_dfg .Push (MakeBool (true ));return _ce ;}else if _defe > _efgb {_cfcd :=_dfg .Push (MakeBool (true ));return _cfcd ;}else {_bfb :=_dfg .Push (MakeBool (false ));return _bfb ;};};func (_degf *PSOperand )xor (_cea *PSStack )error {_fgf ,_ebee :=_cea .Pop ();if _ebee !=nil {return _ebee ;};_fbd ,_ebee :=_cea .Pop ();if _ebee !=nil {return _ebee ;};if _bde ,_fedd :=_fgf .(*PSBoolean );_fedd {_eefd ,_bagb :=_fbd .(*PSBoolean );if !_bagb {return ErrTypeCheck ;};_ebee =_cea .Push (MakeBool (_bde .Val !=_eefd .Val ));return _ebee ;};if _afbf ,_cccd :=_fgf .(*PSInteger );_cccd {_gaed ,_agbe :=_fbd .(*PSInteger );if !_agbe {return ErrTypeCheck ;};_ebee =_cea .Push (MakeInteger (_afbf .Val ^_gaed .Val ));return _ebee ;};return ErrTypeCheck ;};func (_adde *PSOperand )mul (_deg *PSStack )error {_efgbe ,_cge :=_deg .Pop ();if _cge !=nil {return _cge ;};_afbc ,_cge :=_deg .Pop ();if _cge !=nil {return _cge ;};_eacb ,_edfg :=_efgbe .(*PSReal );_gbc ,_adec :=_efgbe .(*PSInteger );if !_edfg &&!_adec {return ErrTypeCheck ;};_degg ,_addb :=_afbc .(*PSReal );_cgfa ,_adc :=_afbc .(*PSInteger );if !_addb &&!_adc {return ErrTypeCheck ;};if _adec &&_adc {_bbbe :=_gbc .Val *_cgfa .Val ;_dcf :=_deg .Push (MakeInteger (_bbbe ));return _dcf ;};var _cdabc float64 ;if _edfg {_cdabc =_eacb .Val ;}else {_cdabc =float64 (_gbc .Val );};if _addb {_cdabc *=_degg .Val ;}else {_cdabc *=float64 (_cgfa .Val );};_cge =_deg .Push (MakeReal (_cdabc ));return _cge ;};func (_bf *PSProgram )Duplicate ()PSObject {_fd :=&PSProgram {};for _ ,_fb :=range *_bf {_fd .Append (_fb .Duplicate ());};return _fd ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_afc *PSOperand )Exec (stack *PSStack )error {_dcg :=ErrUnsupportedOperand ;switch *_afc {case "\u0061\u0062\u0073":_dcg =_afc .abs (stack );case "\u0061\u0064\u0064":_dcg =_afc .add (stack );case "\u0061\u006e\u0064":_dcg =_afc .and (stack );case "\u0061\u0074\u0061\u006e":_dcg =_afc .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_dcg =_afc .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_dcg =_afc .ceiling (stack );case "\u0063\u006f\u0070\u0079":_dcg =_afc .copy (stack );case "\u0063\u006f\u0073":_dcg =_afc .cos (stack );case "\u0063\u0076\u0069":_dcg =_afc .cvi (stack );case "\u0063\u0076\u0072":_dcg =_afc .cvr (stack );case "\u0064\u0069\u0076":_dcg =_afc .div (stack );case "\u0064\u0075\u0070":_dcg =_afc .dup (stack );case "\u0065\u0071":_dcg =_afc .eq (stack );case "\u0065\u0078\u0063\u0068":_dcg =_afc .exch (stack );case "\u0065\u0078\u0070":_dcg =_afc .exp (stack );case "\u0066\u006c\u006fo\u0072":_dcg =_afc .floor (stack );case "\u0067\u0065":_dcg =_afc .ge (stack );case "\u0067\u0074":_dcg =_afc .gt (stack );case "\u0069\u0064\u0069\u0076":_dcg =_afc .idiv (stack );case "\u0069\u0066":_dcg =_afc .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_dcg =_afc .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_dcg =_afc .index (stack );case "\u006c\u0065":_dcg =_afc .le (stack );case "\u006c\u006f\u0067":_dcg =_afc .log (stack );case "\u006c\u006e":_dcg =_afc .ln (stack );case "\u006c\u0074":_dcg =_afc .lt (stack );case "\u006d\u006f\u0064":_dcg =_afc .mod (stack );case "\u006d\u0075\u006c":_dcg =_afc .mul (stack );case "\u006e\u0065":_dcg =_afc .ne (stack );case "\u006e\u0065\u0067":_dcg =_afc .neg (stack );case "\u006e\u006f\u0074":_dcg =_afc .not (stack );case "\u006f\u0072":_dcg =_afc .or (stack );case "\u0070\u006f\u0070":_dcg =_afc .pop (stack );case "\u0072\u006f\u0075n\u0064":_dcg =_afc .round (stack );case "\u0072\u006f\u006c\u006c":_dcg =_afc .roll (stack );case "\u0073\u0069\u006e":_dcg =_afc .sin (stack );case "\u0073\u0071\u0072\u0074":_dcg =_afc .sqrt (stack );case "\u0073\u0075\u0062":_dcg =_afc .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_dcg =_afc .truncate (stack );case "\u0078\u006f\u0072":_dcg =_afc .xor (stack );};return _dcg ;};func (_baf *PSOperand )and (_bbc *PSStack )error {_ca ,_cgf :=_bbc .Pop ();if _cgf !=nil {return _cgf ;};_edc ,_cgf :=_bbc .Pop ();if _cgf !=nil {return _cgf ;};if _fgc ,_ecc :=_ca .(*PSBoolean );_ecc {_afg ,_ece :=_edc .(*PSBoolean );if !_ece {return ErrTypeCheck ;};_cgf =_bbc .Push (MakeBool (_fgc .Val &&_afg .Val ));return _cgf ;};if _adg ,_fce :=_ca .(*PSInteger );_fce {_bfag ,_gcd :=_edc .(*PSInteger );if !_gcd {return ErrTypeCheck ;};_cgf =_bbc .Push (MakeInteger (_adg .Val &_bfag .Val ));return _cgf ;};return ErrTypeCheck ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_cbc :=&PSExecutor {};_cbc .Stack =NewPSStack ();_cbc ._fa =program ;return _cbc ;};func (_afac *PSOperand )not (_bec *PSStack )error {_bgc ,_aeff :=_bec .Pop ();if _aeff !=nil {return _aeff ;};if _ged ,_eec :=_bgc .(*PSBoolean );_eec {_aeff =_bec .Push (MakeBool (!_ged .Val ));return _aeff ;}else if _cdc ,_eecb :=_bgc .(*PSInteger );_eecb {_aeff =_bec .Push (MakeInteger (^_cdc .Val ));return _aeff ;}else {return ErrTypeCheck ;};};func (_ad *PSReal )DebugString ()string {return _fc .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_ad .Val );};

// Push pushes an object on top of the stack.
func (_cbaa *PSStack )Push (obj PSObject )error {if len (*_cbaa )> 100{return ErrStackOverflow ;};*_cbaa =append (*_cbaa ,obj );return nil ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_gaeb *PSParser )parseBool ()(*PSBoolean ,error ){_abb ,_cac :=_gaeb ._adea .Peek (4);if _cac !=nil {return MakeBool (false ),_cac ;};if (len (_abb )>=4)&&(string (_abb [:4])=="\u0074\u0072\u0075\u0065"){_gaeb ._adea .Discard (4);return MakeBool (true ),nil ;};_abb ,_cac =_gaeb ._adea .Peek (5);if _cac !=nil {return MakeBool (false ),_cac ;};if (len (_abb )>=5)&&(string (_abb [:5])=="\u0066\u0061\u006cs\u0065"){_gaeb ._adea .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_bb *PSProgram )String ()string {_cc :="\u007b\u0020";for _ ,_cg :=range *_bb {_cc +=_cg .String ();_cc +="\u0020";};_cc +="\u007d";return _cc ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_dcd :=PSParser {};_daeb :=_d .NewBuffer (content );_dcd ._adea =_gc .NewReader (_daeb );return &_dcd ;};func (_dg *PSOperand )ceiling (_ac *PSStack )error {_afa ,_bgf :=_ac .Pop ();if _bgf !=nil {return _bgf ;};if _cfg ,_dgc :=_afa .(*PSReal );_dgc {_bgf =_ac .Push (MakeReal (_fg .Ceil (_cfg .Val )));}else if _beg ,_fea :=_afa .(*PSInteger );_fea {_bgf =_ac .Push (MakeInteger (_beg .Val ));}else {_bgf =ErrTypeCheck ;};return _bgf ;};func (_cef *PSOperand )neg (_gdeb *PSStack )error {_dbd ,_gge :=_gdeb .Pop ();if _gge !=nil {return _gge ;};if _ded ,_ecf :=_dbd .(*PSReal );_ecf {_gge =_gdeb .Push (MakeReal (-_ded .Val ));return _gge ;}else if _ffg ,_aga :=_dbd .(*PSInteger );_aga {_gge =_gdeb .Push (MakeInteger (-_ffg .Val ));return _gge ;}else {return ErrTypeCheck ;};};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_efg *PSOperand )floor (_afdb *PSStack )error {_bda ,_gcab :=_afdb .Pop ();if _gcab !=nil {return _gcab ;};if _cbg ,_egbe :=_bda .(*PSReal );_egbe {_gcab =_afdb .Push (MakeReal (_fg .Floor (_cbg .Val )));}else if _acf ,_fba :=_bda .(*PSInteger );_fba {_gcab =_afdb .Push (MakeInteger (_acf .Val ));}else {return ErrTypeCheck ;};return _gcab ;};func (_cdaf *PSOperand )lt (_fgacc *PSStack )error {_fed ,_ddf :=_fgacc .PopNumberAsFloat64 ();if _ddf !=nil {return _ddf ;};_aabc ,_ddf :=_fgacc .PopNumberAsFloat64 ();if _ddf !=nil {return _ddf ;};if _fg .Abs (_aabc -_fed )< _b {_deab :=_fgacc .Push (MakeBool (false ));return _deab ;}else if _aabc < _fed {_agb :=_fgacc .Push (MakeBool (true ));return _agb ;}else {_ceef :=_fgacc .Push (MakeBool (false ));return _ceef ;};};

// Exec executes the program, typically leaving output values on the stack.
func (_cgc *PSProgram )Exec (stack *PSStack )error {for _ ,_cbf :=range *_cgc {var _cbcg error ;switch _af :=_cbf .(type ){case *PSInteger :_cgcc :=_af ;_cbcg =stack .Push (_cgcc );case *PSReal :_dae :=_af ;_cbcg =stack .Push (_dae );case *PSBoolean :_ea :=_af ;_cbcg =stack .Push (_ea );case *PSProgram :_deb :=_af ;_cbcg =stack .Push (_deb );case *PSOperand :_eb :=_af ;_cbcg =_eb .Exec (stack );default:return ErrTypeCheck ;};if _cbcg !=nil {return _cbcg ;};};return nil ;};func (_bbbee *PSOperand )roll (_edbg *PSStack )error {_faab ,_aca :=_edbg .Pop ();if _aca !=nil {return _aca ;};_dgbc ,_aca :=_edbg .Pop ();if _aca !=nil {return _aca ;};_dfe ,_eaa :=_faab .(*PSInteger );if !_eaa {return ErrTypeCheck ;};_fccc ,_eaa :=_dgbc .(*PSInteger );if !_eaa {return ErrTypeCheck ;};if _fccc .Val < 0{return ErrRangeCheck ;};if _fccc .Val ==0||_fccc .Val ==1{return nil ;};if _fccc .Val > len (*_edbg ){return ErrStackUnderflow ;};for _dbfc :=0;_dbfc < _dgg (_dfe .Val );_dbfc ++{var _fcab []PSObject ;_fcab =(*_edbg )[len (*_edbg )-(_fccc .Val ):len (*_edbg )];if _dfe .Val > 0{_ccb :=_fcab [len (_fcab )-1];_fcab =append ([]PSObject {_ccb },_fcab [0:len (_fcab )-1]...);}else {_babb :=_fcab [len (_fcab )-_fccc .Val ];_fcab =append (_fcab [1:],_babb );};_bgfa :=append ((*_edbg )[0:len (*_edbg )-_fccc .Val ],_fcab ...);_edbg =&_bgfa ;};return nil ;};func (_cgcce *PSOperand )eq (_abfc *PSStack )error {_bfg ,_ccg :=_abfc .Pop ();if _ccg !=nil {return _ccg ;};_deff ,_ccg :=_abfc .Pop ();if _ccg !=nil {return _ccg ;};_fae ,_fgcf :=_bfg .(*PSBoolean );_bcac ,_gae :=_deff .(*PSBoolean );if _fgcf ||_gae {var _gbd error ;if _fgcf &&_gae {_gbd =_abfc .Push (MakeBool (_fae .Val ==_bcac .Val ));}else {_gbd =_abfc .Push (MakeBool (false ));};return _gbd ;};var _bgfd float64 ;var _dfa float64 ;if _cbe ,_eee :=_bfg .(*PSInteger );_eee {_bgfd =float64 (_cbe .Val );}else if _dad ,_aaa :=_bfg .(*PSReal );_aaa {_bgfd =_dad .Val ;}else {return ErrTypeCheck ;};if _bbe ,_aef :=_deff .(*PSInteger );_aef {_dfa =float64 (_bbe .Val );}else if _gfd ,_gggf :=_deff .(*PSReal );_gggf {_dfa =_gfd .Val ;}else {return ErrTypeCheck ;};if _fg .Abs (_dfa -_bgfd )< _b {_ccg =_abfc .Push (MakeBool (true ));}else {_ccg =_abfc .Push (MakeBool (false ));};return _ccg ;};func (_geg *PSOperand )ne (_acg *PSStack )error {_cgfgc :=_geg .eq (_acg );if _cgfgc !=nil {return _cgfgc ;};_cgfgc =_geg .not (_acg );return _cgfgc ;};func (_bag *PSOperand )truncate (_dffd *PSStack )error {_deae ,_fgee :=_dffd .Pop ();if _fgee !=nil {return _fgee ;};if _cggc ,_fbed :=_deae .(*PSReal );_fbed {_beec :=int (_cggc .Val );_fgee =_dffd .Push (MakeReal (float64 (_beec )));}else if _ccce ,_egd :=_deae .(*PSInteger );_egd {_fgee =_dffd .Push (MakeInteger (_ccce .Val ));}else {return ErrTypeCheck ;};return _fgee ;};func (_ef *PSOperand )copy (_fgac *PSStack )error {_fca ,_gbb :=_fgac .PopInteger ();if _gbb !=nil {return _gbb ;};if _fca < 0{return ErrRangeCheck ;};if _fca > len (*_fgac ){return ErrRangeCheck ;};*_fgac =append (*_fgac ,(*_fgac )[len (*_fgac )-_fca :]...);return nil ;};func (_dd *PSReal )String ()string {return _fc .Sprintf ("\u0025\u002e\u0035\u0066",_dd .Val )};func (_cfgd *PSParser )parseFunction ()(*PSProgram ,error ){_acd ,_ :=_cfgd ._adea .ReadByte ();if _acd !='{'{return nil ,_c .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_ega :=NewPSProgram ();for {_cfgd .skipSpaces ();_bgdf ,_gecfd :=_cfgd ._adea .Peek (2);if _gecfd !=nil {if _gecfd ==_f .EOF {break ;};return nil ,_gecfd ;};_a .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_bgdf ));if _bgdf [0]=='}'{_a .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_cfgd ._adea .ReadByte ();break ;}else if _bgdf [0]=='{'{_a .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_egbb ,_dedf :=_cfgd .parseFunction ();if _dedf !=nil {return nil ,_dedf ;};_ega .Append (_egbb );}else if _cb .IsDecimalDigit (_bgdf [0])||(_bgdf [0]=='-'&&_cb .IsDecimalDigit (_bgdf [1])){_a .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_eeef ,_fggf :=_cfgd .parseNumber ();if _fggf !=nil {return nil ,_fggf ;};_ega .Append (_eeef );}else {_a .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_bgdf ,_ =_cfgd ._adea .Peek (5);_aecg :=string (_bgdf );_a .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_aecg );if (len (_aecg )> 4)&&(_aecg [:5]=="\u0066\u0061\u006cs\u0065"){_bbbf ,_gad :=_cfgd .parseBool ();if _gad !=nil {return nil ,_gad ;};_ega .Append (_bbbf );}else if (len (_aecg )> 3)&&(_aecg [:4]=="\u0074\u0072\u0075\u0065"){_aabf ,_gece :=_cfgd .parseBool ();if _gece !=nil {return nil ,_gece ;};_ega .Append (_aabf );}else {_ccca ,_dfeb :=_cfgd .parseOperand ();if _dfeb !=nil {return nil ,_dfeb ;};_ega .Append (_ccca );};};};return _ega ,nil ;};func (_gf *PSBoolean )Duplicate ()PSObject {_de :=PSBoolean {};_de .Val =_gf .Val ;return &_de };func (_fafa *PSOperand )cvr (_gab *PSStack )error {_gcgc ,_gde :=_gab .Pop ();if _gde !=nil {return _gde ;};if _ebe ,_eef :=_gcgc .(*PSReal );_eef {_gde =_gab .Push (MakeReal (_ebe .Val ));}else if _afb ,_eg :=_gcgc .(*PSInteger );_eg {_gde =_gab .Push (MakeReal (float64 (_afb .Val )));}else {return ErrTypeCheck ;};return _gde ;};func _dgg (_deea int )int {if _deea < 0{return -_deea ;};return _deea ;};func (_dbb *PSParser )parseNumber ()(PSObject ,error ){_agg ,_afbg :=_cb .ParseNumber (_dbb ._adea );if _afbg !=nil {return nil ,_afbg ;};switch _cad :=_agg .(type ){case *_cb .PdfObjectFloat :return MakeReal (float64 (*_cad )),nil ;case *_cb .PdfObjectInteger :return MakeInteger (int (*_cad )),nil ;};return nil ,_fc .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_agg );};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};

// Append appends an object to the PSProgram.
func (_gba *PSProgram )Append (obj PSObject ){*_gba =append (*_gba ,obj )};func (_bcb *PSOperand )sin (_dfb *PSStack )error {_afad ,_bddbb :=_dfb .PopNumberAsFloat64 ();if _bddbb !=nil {return _bddbb ;};_gaa :=_fg .Sin (_afad *_fg .Pi /180.0);_bddbb =_dfb .Push (MakeReal (_gaa ));return _bddbb ;};func (_gbcg *PSOperand )sub (_aec *PSStack )error {_cgb ,_deeg :=_aec .Pop ();if _deeg !=nil {return _deeg ;};_abc ,_deeg :=_aec .Pop ();if _deeg !=nil {return _deeg ;};_aeg ,_fegc :=_cgb .(*PSReal );_bgcf ,_fcf :=_cgb .(*PSInteger );if !_fegc &&!_fcf {return ErrTypeCheck ;};_faae ,_ebg :=_abc .(*PSReal );_afge ,_aae :=_abc .(*PSInteger );if !_ebg &&!_aae {return ErrTypeCheck ;};if _fcf &&_aae {_eefa :=_afge .Val -_bgcf .Val ;_gaec :=_aec .Push (MakeInteger (_eefa ));return _gaec ;};var _eab float64 =0;if _ebg {_eab =_faae .Val ;}else {_eab =float64 (_afge .Val );};if _fegc {_eab -=_aeg .Val ;}else {_eab -=float64 (_bgcf .Val );};_deeg =_aec .Push (MakeReal (_eab ));return _deeg ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_ee *PSBoolean )String ()string {return _fc .Sprintf ("\u0025\u0076",_ee .Val )};func (_cfa *PSOperand )abs (_ffb *PSStack )error {_fda ,_ffc :=_ffb .Pop ();if _ffc !=nil {return _ffc ;};if _dec ,_afcg :=_fda .(*PSReal );_afcg {_gbf :=_dec .Val ;if _gbf < 0{_ffc =_ffb .Push (MakeReal (-_gbf ));}else {_ffc =_ffb .Push (MakeReal (_gbf ));};}else if _dag ,_gd :=_fda .(*PSInteger );_gd {_bdf :=_dag .Val ;if _bdf < 0{_ffc =_ffb .Push (MakeInteger (-_bdf ));}else {_ffc =_ffb .Push (MakeInteger (_bdf ));};}else {return ErrTypeCheck ;};return _ffc ;};func (_begg *PSOperand )div (_ae *PSStack )error {_cdgd ,_bddb :=_ae .Pop ();if _bddb !=nil {return _bddb ;};_ccc ,_bddb :=_ae .Pop ();if _bddb !=nil {return _bddb ;};_edf ,_ggd :=_cdgd .(*PSReal );_geb ,_agc :=_cdgd .(*PSInteger );if !_ggd &&!_agc {return ErrTypeCheck ;};if _ggd &&_edf .Val ==0{return ErrUndefinedResult ;};if _agc &&_geb .Val ==0{return ErrUndefinedResult ;};_fdac ,_cfcb :=_ccc .(*PSReal );_bgb ,_cgd :=_ccc .(*PSInteger );if !_cfcb &&!_cgd {return ErrTypeCheck ;};var _cae float64 ;if _cfcb {_cae =_fdac .Val ;}else {_cae =float64 (_bgb .Val );};if _ggd {_cae /=_edf .Val ;}else {_cae /=float64 (_geb .Val );};_bddb =_ae .Push (MakeReal (_cae ));return _bddb ;};func (_edb *PSOperand )pop (_edge *PSStack )error {_ ,_bfc :=_edge .Pop ();if _bfc !=nil {return _bfc ;};return nil ;};func (_fcc *PSOperand )DebugString ()string {return _fc .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_fcc );};

// String returns a string representation of the stack.
func (_bge *PSStack )String ()string {_gfdg :="\u005b\u0020";for _ ,_fgb :=range *_bge {_gfdg +=_fgb .String ();_gfdg +="\u0020";};_gfdg +="\u005d";return _gfdg ;};func (_ebdg *PSOperand )sqrt (_beaf *PSStack )error {_gcdb ,_aaaf :=_beaf .PopNumberAsFloat64 ();if _aaaf !=nil {return _aaaf ;};if _gcdb < 0{return ErrRangeCheck ;};_aed :=_fg .Sqrt (_gcdb );_aaaf =_beaf .Push (MakeReal (_aed ));return _aaaf ;};func (_ec *PSInteger )DebugString ()string {return _fc .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ec .Val );};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_cafag :=PSOperand (val );return &_cafag };

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_gcef :=PSInteger {};_gcef .Val =val ;return &_gcef };func (_eed *PSOperand )add (_cfd *PSStack )error {_fcb ,_ead :=_cfd .Pop ();if _ead !=nil {return _ead ;};_def ,_ead :=_cfd .Pop ();if _ead !=nil {return _ead ;};_dcge ,_ed :=_fcb .(*PSReal );_bfa ,_cde :=_fcb .(*PSInteger );if !_ed &&!_cde {return ErrTypeCheck ;};_cfc ,_be :=_def .(*PSReal );_fbg ,_cbfg :=_def .(*PSInteger );if !_be &&!_cbfg {return ErrTypeCheck ;};if _cde &&_cbfg {_dcc :=_bfa .Val +_fbg .Val ;_bc :=_cfd .Push (MakeInteger (_dcc ));return _bc ;};var _df float64 ;if _ed {_df =_dcge .Val ;}else {_df =float64 (_bfa .Val );};if _be {_df +=_cfc .Val ;}else {_df +=float64 (_fbg .Val );};_ead =_cfd .Push (MakeReal (_df ));return _ead ;};var ErrRangeCheck =_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_aa *PSProgram )DebugString ()string {_eca :="\u007b\u0020";for _ ,_dbf :=range *_aa {_eca +=_dbf .DebugString ();_eca +="\u0020";};_eca +="\u007d";return _eca ;};var ErrStackOverflow =_c .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_ga *PSInteger )Duplicate ()PSObject {_da :=PSInteger {};_da .Val =_ga .Val ;return &_da };

// PSInteger represents an integer.
type PSInteger struct{Val int ;};