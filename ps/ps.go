//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_b "bufio";_gb "bytes";_g "errors";_bb "fmt";_af "github.com/unidoc/unipdf/v3/common";_ad "github.com/unidoc/unipdf/v3/core";_f "io";_c "math";);

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_ffc *PSInteger )DebugString ()string {return _bb .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ffc .Val );};func (_cbg *PSOperand )ge (_ebg *PSStack )error {_gcdc ,_geaa :=_ebg .PopNumberAsFloat64 ();if _geaa !=nil {return _geaa ;
};_fef ,_geaa :=_ebg .PopNumberAsFloat64 ();if _geaa !=nil {return _geaa ;};if _c .Abs (_fef -_gcdc )< _gg {_fdf :=_ebg .Push (MakeBool (true ));return _fdf ;}else if _fef > _gcdc {_feba :=_ebg .Push (MakeBool (true ));return _feba ;}else {_fba :=_ebg .Push (MakeBool (false ));
return _fba ;};};func (_bgg *PSOperand )round (_fbg *PSStack )error {_dgec ,_fbee :=_fbg .Pop ();if _fbee !=nil {return _fbee ;};if _gdc ,_dada :=_dgec .(*PSReal );_dada {_fbee =_fbg .Push (MakeReal (_c .Floor (_gdc .Val +0.5)));}else if _dgc ,_bacf :=_dgec .(*PSInteger );
_bacf {_fbee =_fbg .Push (MakeInteger (_dgc .Val ));}else {return ErrTypeCheck ;};return _fbee ;};func (_abaec *PSOperand )exch (_fgb *PSStack )error {_ggdg ,_efea :=_fgb .Pop ();if _efea !=nil {return _efea ;};_cada ,_efea :=_fgb .Pop ();if _efea !=nil {return _efea ;
};_efea =_fgb .Push (_ggdg );if _efea !=nil {return _efea ;};_efea =_fgb .Push (_cada );return _efea ;};

// String returns a string representation of the stack.
func (_eece *PSStack )String ()string {_fdc :="\u005b\u0020";for _ ,_abe :=range *_eece {_fdc +=_abe .String ();_fdc +="\u0020";};_fdc +="\u005d";return _fdc ;};var ErrStackUnderflow =_g .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");
func (_cebb *PSOperand )ifelse (_bdg *PSStack )error {_ggba ,_cge :=_bdg .Pop ();if _cge !=nil {return _cge ;};_dfdc ,_cge :=_bdg .Pop ();if _cge !=nil {return _cge ;};_ddf ,_cge :=_bdg .Pop ();if _cge !=nil {return _cge ;};_aebg ,_dacab :=_ggba .(*PSProgram );
if !_dacab {return ErrTypeCheck ;};_cgd ,_dacab :=_dfdc .(*PSProgram );if !_dacab {return ErrTypeCheck ;};_bee ,_dacab :=_ddf .(*PSBoolean );if !_dacab {return ErrTypeCheck ;};if _bee .Val {_abb :=_cgd .Exec (_bdg );return _abb ;};_cge =_aebg .Exec (_bdg );
return _cge ;};func (_gbfc *PSOperand )cos (_fag *PSStack )error {_deb ,_cgcg :=_fag .PopNumberAsFloat64 ();if _cgcg !=nil {return _cgcg ;};_cea :=_c .Cos (_deb *_c .Pi /180.0);_cgcg =_fag .Push (MakeReal (_cea ));return _cgcg ;};func (_cg *PSInteger )String ()string {return _bb .Sprintf ("\u0025\u0064",_cg .Val )};
func (_gcf *PSOperand )ifCondition (_caf *PSStack )error {_dff ,_gfbd :=_caf .Pop ();if _gfbd !=nil {return _gfbd ;};_dfg ,_gfbd :=_caf .Pop ();if _gfbd !=nil {return _gfbd ;};_aaa ,_ffcb :=_dff .(*PSProgram );if !_ffcb {return ErrTypeCheck ;};_cag ,_ffcb :=_dfg .(*PSBoolean );
if !_ffcb {return ErrTypeCheck ;};if _cag .Val {_ggbd :=_aaa .Exec (_caf );return _ggbd ;};return nil ;};var ErrUnsupportedOperand =_g .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_aff *PSOperand )floor (_baf *PSStack )error {_dccd ,_bcg :=_baf .Pop ();
if _bcg !=nil {return _bcg ;};if _deg ,_fed :=_dccd .(*PSReal );_fed {_bcg =_baf .Push (MakeReal (_c .Floor (_deg .Val )));}else if _fff ,_dfcd :=_dccd .(*PSInteger );_dfcd {_bcg =_baf .Push (MakeInteger (_fff .Val ));}else {return ErrTypeCheck ;};return _bcg ;
};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_bcgd *PSStack )PopInteger ()(int ,error ){_fdag ,_bfde :=_bcgd .Pop ();if _bfde !=nil {return 0,_bfde ;};if _aegb ,_faba :=_fdag .(*PSInteger );_faba {return _aegb .Val ,nil ;};return 0,ErrTypeCheck ;};func (_cgc *PSReal )Duplicate ()PSObject {_ce :=PSReal {};
_ce .Val =_cgc .Val ;return &_ce };func (_dfee *PSOperand )sqrt (_gbcc *PSStack )error {_aece ,_abab :=_gbcc .PopNumberAsFloat64 ();if _abab !=nil {return _abab ;};if _aece < 0{return ErrRangeCheck ;};_efeg :=_c .Sqrt (_aece );_abab =_gbcc .Push (MakeReal (_efeg ));
return _abab ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_degf :=PSOperand (val );return &_degf };func (_afb *PSProgram )Duplicate ()PSObject {_adf :=&PSProgram {};for _ ,_ec :=range *_afb {_adf .Append (_ec .Duplicate ());};return _adf ;};func (_dac *PSOperand )cvr (_feg *PSStack )error {_dcc ,_fad :=_feg .Pop ();
if _fad !=nil {return _fad ;};if _aba ,_cgb :=_dcc .(*PSReal );_cgb {_fad =_feg .Push (MakeReal (_aba .Val ));}else if _gea ,_gde :=_dcc .(*PSInteger );_gde {_fad =_feg .Push (MakeReal (float64 (_gea .Val )));}else {return ErrTypeCheck ;};return _fad ;
};func (_gf *PSOperand )abs (_gfa *PSStack )error {_fcf ,_bd :=_gfa .Pop ();if _bd !=nil {return _bd ;};if _gbf ,_de :=_fcf .(*PSReal );_de {_gdf :=_gbf .Val ;if _gdf < 0{_bd =_gfa .Push (MakeReal (-_gdf ));}else {_bd =_gfa .Push (MakeReal (_gdf ));};}else if _bdc ,_fda :=_fcf .(*PSInteger );
_fda {_dcf :=_bdc .Val ;if _dcf < 0{_bd =_gfa .Push (MakeInteger (-_dcf ));}else {_bd =_gfa .Push (MakeInteger (_dcf ));};}else {return ErrTypeCheck ;};return _bd ;};func (_ba *PSBoolean )Duplicate ()PSObject {_df :=PSBoolean {};_df .Val =_ba .Val ;return &_df };
func (_gbg *PSOperand )exp (_fec *PSStack )error {_agff ,_acba :=_fec .PopNumberAsFloat64 ();if _acba !=nil {return _acba ;};_dfbe ,_acba :=_fec .PopNumberAsFloat64 ();if _acba !=nil {return _acba ;};if _c .Abs (_agff )< 1&&_dfbe < 0{return ErrUndefinedResult ;
};_cac :=_c .Pow (_dfbe ,_agff );_acba =_fec .Push (MakeReal (_cac ));return _acba ;};func (_egfc *PSOperand )dup (_dcg *PSStack )error {_eaa ,_acff :=_dcg .Pop ();if _acff !=nil {return _acff ;};_acff =_dcg .Push (_eaa );if _acff !=nil {return _acff ;
};_acff =_dcg .Push (_eaa .Duplicate ());return _acff ;};func (_caa *PSProgram )String ()string {_dc :="\u007b\u0020";for _ ,_bg :=range *_caa {_dc +=_bg .String ();_dc +="\u0020";};_dc +="\u007d";return _dc ;};func (_eee *PSOperand )lt (_cga *PSStack )error {_agadg ,_cab :=_cga .PopNumberAsFloat64 ();
if _cab !=nil {return _cab ;};_aec ,_cab :=_cga .PopNumberAsFloat64 ();if _cab !=nil {return _cab ;};if _c .Abs (_aec -_agadg )< _gg {_afbge :=_cga .Push (MakeBool (false ));return _afbge ;}else if _aec < _agadg {_dfbb :=_cga .Push (MakeBool (true ));return _dfbb ;
}else {_egg :=_cga .Push (MakeBool (false ));return _egg ;};};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_beecf *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_eafd ,_edcf :=_beecf .Pop ();if _edcf !=nil {return 0,_edcf ;};if _baef ,_effa :=_eafd .(*PSReal );_effa {return _baef .Val ,nil ;}else if _cee ,_daef :=_eafd .(*PSInteger );_daef {return float64 (_cee .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_gcfe *PSParser )skipSpaces ()(int ,error ){_gcfee :=0;for {_cafg ,_gcfd :=_gcfe ._gdcf .Peek (1);if _gcfd !=nil {return 0,_gcfd ;};if _ad .IsWhiteSpace (_cafg [0]){_gcfe ._gdcf .ReadByte ();_gcfee ++;}else {break ;
};};return _gcfee ,nil ;};func _fbb (_ffg int )int {if _ffg < 0{return -_ffg ;};return _ffg ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_bcd *PSOperand )Exec (stack *PSStack )error {_cca :=ErrUnsupportedOperand ;switch *_bcd {case "\u0061\u0062\u0073":_cca =_bcd .abs (stack );case "\u0061\u0064\u0064":_cca =_bcd .add (stack );case "\u0061\u006e\u0064":_cca =_bcd .and (stack );case "\u0061\u0074\u0061\u006e":_cca =_bcd .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_cca =_bcd .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_cca =_bcd .ceiling (stack );case "\u0063\u006f\u0070\u0079":_cca =_bcd .copy (stack );case "\u0063\u006f\u0073":_cca =_bcd .cos (stack );
case "\u0063\u0076\u0069":_cca =_bcd .cvi (stack );case "\u0063\u0076\u0072":_cca =_bcd .cvr (stack );case "\u0064\u0069\u0076":_cca =_bcd .div (stack );case "\u0064\u0075\u0070":_cca =_bcd .dup (stack );case "\u0065\u0071":_cca =_bcd .eq (stack );case "\u0065\u0078\u0063\u0068":_cca =_bcd .exch (stack );
case "\u0065\u0078\u0070":_cca =_bcd .exp (stack );case "\u0066\u006c\u006fo\u0072":_cca =_bcd .floor (stack );case "\u0067\u0065":_cca =_bcd .ge (stack );case "\u0067\u0074":_cca =_bcd .gt (stack );case "\u0069\u0064\u0069\u0076":_cca =_bcd .idiv (stack );
case "\u0069\u0066":_cca =_bcd .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_cca =_bcd .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_cca =_bcd .index (stack );case "\u006c\u0065":_cca =_bcd .le (stack );case "\u006c\u006f\u0067":_cca =_bcd .log (stack );
case "\u006c\u006e":_cca =_bcd .ln (stack );case "\u006c\u0074":_cca =_bcd .lt (stack );case "\u006d\u006f\u0064":_cca =_bcd .mod (stack );case "\u006d\u0075\u006c":_cca =_bcd .mul (stack );case "\u006e\u0065":_cca =_bcd .ne (stack );case "\u006e\u0065\u0067":_cca =_bcd .neg (stack );
case "\u006e\u006f\u0074":_cca =_bcd .not (stack );case "\u006f\u0072":_cca =_bcd .or (stack );case "\u0070\u006f\u0070":_cca =_bcd .pop (stack );case "\u0072\u006f\u0075n\u0064":_cca =_bcd .round (stack );case "\u0072\u006f\u006c\u006c":_cca =_bcd .roll (stack );
case "\u0073\u0069\u006e":_cca =_bcd .sin (stack );case "\u0073\u0071\u0072\u0074":_cca =_bcd .sqrt (stack );case "\u0073\u0075\u0062":_cca =_bcd .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_cca =_bcd .truncate (stack );case "\u0078\u006f\u0072":_cca =_bcd .xor (stack );
};return _cca ;};func (_gbb *PSOperand )truncate (_gbfe *PSStack )error {_dbc ,_cec :=_gbfe .Pop ();if _cec !=nil {return _cec ;};if _ecge ,_ecf :=_dbc .(*PSReal );_ecf {_begg :=int (_ecge .Val );_cec =_gbfe .Push (MakeReal (float64 (_begg )));}else if _gbdf ,_bef :=_dbc .(*PSInteger );
_bef {_cec =_gbfe .Push (MakeInteger (_gbdf .Val ));}else {return ErrTypeCheck ;};return _cec ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_ece :=PSParser {};_gfgf :=_gb .NewBuffer (content );_ece ._gdcf =_b .NewReader (_gfgf );return &_ece ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_daefb :=PSInteger {};_daefb .Val =val ;return &_daefb };func (_cfc *PSReal )String ()string {return _bb .Sprintf ("\u0025\u002e\u0035\u0066",_cfc .Val )};func (_dfc *PSOperand )div (_eb *PSStack )error {_add ,_ggc :=_eb .Pop ();
if _ggc !=nil {return _ggc ;};_daca ,_ggc :=_eb .Pop ();if _ggc !=nil {return _ggc ;};_cd ,_gfaf :=_add .(*PSReal );_dfd ,_bgc :=_add .(*PSInteger );if !_gfaf &&!_bgc {return ErrTypeCheck ;};if _gfaf &&_cd .Val ==0{return ErrUndefinedResult ;};if _bgc &&_dfd .Val ==0{return ErrUndefinedResult ;
};_dec ,_bgb :=_daca .(*PSReal );_bcbb ,_abae :=_daca .(*PSInteger );if !_bgb &&!_abae {return ErrTypeCheck ;};var _cbd float64 ;if _bgb {_cbd =_dec .Val ;}else {_cbd =float64 (_bcbb .Val );};if _gfaf {_cbd /=_cd .Val ;}else {_cbd /=float64 (_dfd .Val );
};_ggc =_eb .Push (MakeReal (_cbd ));return _ggc ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_faff *PSStack )DebugString ()string {_gdeg :="\u005b\u0020";for _ ,_aaf :=range *_faff {_gdeg +=_aaf .DebugString ();_gdeg +="\u0020";};_gdeg +="\u005d";return _gdeg ;};func (_agef *PSOperand )copy (_afbg *PSStack )error {_ceb ,_bbdf :=_afbg .PopInteger ();
if _bbdf !=nil {return _bbdf ;};if _ceb < 0{return ErrRangeCheck ;};if _ceb > len (*_afbg ){return ErrRangeCheck ;};*_afbg =append (*_afbg ,(*_afbg )[len (*_afbg )-_ceb :]...);return nil ;};func (_afe *PSOperand )le (_daeb *PSStack )error {_abc ,_fge :=_daeb .PopNumberAsFloat64 ();
if _fge !=nil {return _fge ;};_dgdd ,_fge :=_daeb .PopNumberAsFloat64 ();if _fge !=nil {return _fge ;};if _c .Abs (_dgdd -_abc )< _gg {_aage :=_daeb .Push (MakeBool (true ));return _aage ;}else if _dgdd < _abc {_dab :=_daeb .Push (MakeBool (true ));return _dab ;
}else {_gefe :=_daeb .Push (MakeBool (false ));return _gefe ;};};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// Push pushes an object on top of the stack.
func (_bca *PSStack )Push (obj PSObject )error {if len (*_bca )> 100{return ErrStackOverflow ;};*_bca =append (*_bca ,obj );return nil ;};func (_fbc *PSOperand )ln (_bac *PSStack )error {_dba ,_fcdg :=_bac .PopNumberAsFloat64 ();if _fcdg !=nil {return _fcdg ;
};_ddd :=_c .Log (_dba );_fcdg =_bac .Push (MakeReal (_ddd ));return _fcdg ;};func (_gef *PSOperand )eq (_gbec *PSStack )error {_agad ,_adff :=_gbec .Pop ();if _adff !=nil {return _adff ;};_dcgf ,_adff :=_gbec .Pop ();if _adff !=nil {return _adff ;};_eba ,_fegb :=_agad .(*PSBoolean );
_ccaf ,_dfe :=_dcgf .(*PSBoolean );if _fegb ||_dfe {var _face error ;if _fegb &&_dfe {_face =_gbec .Push (MakeBool (_eba .Val ==_ccaf .Val ));}else {_face =_gbec .Push (MakeBool (false ));};return _face ;};var _ged float64 ;var _ggce float64 ;if _bgeg ,_fee :=_agad .(*PSInteger );
_fee {_ged =float64 (_bgeg .Val );}else if _db ,_be :=_agad .(*PSReal );_be {_ged =_db .Val ;}else {return ErrTypeCheck ;};if _cce ,_fgd :=_dcgf .(*PSInteger );_fgd {_ggce =float64 (_cce .Val );}else if _bdce ,_egfa :=_dcgf .(*PSReal );_egfa {_ggce =_bdce .Val ;
}else {return ErrTypeCheck ;};if _c .Abs (_ggce -_ged )< _gg {_adff =_gbec .Push (MakeBool (true ));}else {_adff =_gbec .Push (MakeBool (false ));};return _adff ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_e :=&PSExecutor {};_e .Stack =NewPSStack ();_e ._fa =program ;return _e ;};func (_bcf *PSOperand )neg (_ead *PSStack )error {_dbad ,_efg :=_ead .Pop ();if _efg !=nil {return _efg ;};if _bged ,_dfde :=_dbad .(*PSReal );
_dfde {_efg =_ead .Push (MakeReal (-_bged .Val ));return _efg ;}else if _bea ,_acdb :=_dbad .(*PSInteger );_acdb {_efg =_ead .Push (MakeInteger (-_bea .Val ));return _efg ;}else {return ErrTypeCheck ;};};func (_ggad *PSOperand )index (_beb *PSStack )error {_bab ,_cgdd :=_beb .Pop ();
if _cgdd !=nil {return _cgdd ;};_geac ,_def :=_bab .(*PSInteger );if !_def {return ErrTypeCheck ;};if _geac .Val < 0{return ErrRangeCheck ;};if _geac .Val > len (*_beb )-1{return ErrStackUnderflow ;};_bfb :=(*_beb )[len (*_beb )-1-_geac .Val ];_cgdd =_beb .Push (_bfb .Duplicate ());
return _cgdd ;};func (_ebf *PSOperand )log (_egb *PSStack )error {_bde ,_dge :=_egb .PopNumberAsFloat64 ();if _dge !=nil {return _dge ;};_bbf :=_c .Log10 (_bde );_dge =_egb .Push (MakeReal (_bbf ));return _dge ;};func (_gbc *PSOperand )atan (_acgb *PSStack )error {_aea ,_fe :=_acgb .PopNumberAsFloat64 ();
if _fe !=nil {return _fe ;};_gaa ,_fe :=_acgb .PopNumberAsFloat64 ();if _fe !=nil {return _fe ;};if _aea ==0{var _fg error ;if _gaa < 0{_fg =_acgb .Push (MakeReal (270));}else {_fg =_acgb .Push (MakeReal (90));};return _fg ;};_feb :=_gaa /_aea ;_gbe :=_c .Atan (_feb )*180/_c .Pi ;
_fe =_acgb .Push (MakeReal (_gbe ));return _fe ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_gfd :=PSBoolean {};_gfd .Val =val ;return &_gfd };

// PSParser is a basic Postscript parser.
type PSParser struct{_gdcf *_b .Reader };func (_ecd *PSOperand )idiv (_ccge *PSStack )error {_ed ,_dgd :=_ccge .Pop ();if _dgd !=nil {return _dgd ;};_acd ,_dgd :=_ccge .Pop ();if _dgd !=nil {return _dgd ;};_bgd ,_eeb :=_ed .(*PSInteger );if !_eeb {return ErrTypeCheck ;
};if _bgd .Val ==0{return ErrUndefinedResult ;};_aag ,_eeb :=_acd .(*PSInteger );if !_eeb {return ErrTypeCheck ;};_gbd :=_aag .Val /_bgd .Val ;_dgd =_ccge .Push (MakeInteger (_gbd ));return _dgd ;};func (_agb *PSOperand )not (_beg *PSStack )error {_fcc ,_dag :=_beg .Pop ();
if _dag !=nil {return _dag ;};if _dddb ,_fga :=_fcc .(*PSBoolean );_fga {_dag =_beg .Push (MakeBool (!_dddb .Val ));return _dag ;}else if _dad ,_baa :=_fcc .(*PSInteger );_baa {_dag =_beg .Push (MakeInteger (^_dad .Val ));return _dag ;}else {return ErrTypeCheck ;
};};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_dfcf :=PSReal {};_dfcf .Val =val ;return &_dfcf };

// Exec executes the program, typically leaving output values on the stack.
func (_ac *PSProgram )Exec (stack *PSStack )error {for _ ,_bgf :=range *_ac {var _cb error ;switch _ccd :=_bgf .(type ){case *PSInteger :_ga :=_ccd ;_cb =stack .Push (_ga );case *PSReal :_acg :=_ccd ;_cb =stack .Push (_acg );case *PSBoolean :_efd :=_ccd ;
_cb =stack .Push (_efd );case *PSProgram :_gc :=_ccd ;_cb =stack .Push (_gc );case *PSOperand :_fb :=_ccd ;_cb =_fb .Exec (stack );default:return ErrTypeCheck ;};if _cb !=nil {return _cb ;};};return nil ;};var ErrTypeCheck =_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");


// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_ebd *PSOperand )mod (_bebb *PSStack )error {_dbf ,_ada :=_bebb .Pop ();if _ada !=nil {return _ada ;};_efb ,_ada :=_bebb .Pop ();if _ada !=nil {return _ada ;};_cbf ,_adag :=_dbf .(*PSInteger );if !_adag {return ErrTypeCheck ;};
if _cbf .Val ==0{return ErrUndefinedResult ;};_egfe ,_adag :=_efb .(*PSInteger );if !_adag {return ErrTypeCheck ;};_bda :=_egfe .Val %_cbf .Val ;_ada =_bebb .Push (MakeInteger (_bda ));return _ada ;};func (_edd *PSOperand )or (_feff *PSStack )error {_ded ,_agadd :=_feff .Pop ();
if _agadd !=nil {return _agadd ;};_edc ,_agadd :=_feff .Pop ();if _agadd !=nil {return _agadd ;};if _dgab ,_ceac :=_ded .(*PSBoolean );_ceac {_decg ,_ggceb :=_edc .(*PSBoolean );if !_ggceb {return ErrTypeCheck ;};_agadd =_feff .Push (MakeBool (_dgab .Val ||_decg .Val ));
return _agadd ;};if _ggg ,_fffb :=_ded .(*PSInteger );_fffb {_fcdc ,_bdag :=_edc .(*PSInteger );if !_bdag {return ErrTypeCheck ;};_agadd =_feff .Push (MakeInteger (_ggg .Val |_fcdc .Val ));return _agadd ;};return ErrTypeCheck ;};func (_eg *PSReal )DebugString ()string {return _bb .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_eg .Val );
};func (_afbc *PSOperand )gt (_ade *PSStack )error {_aeg ,_gdef :=_ade .PopNumberAsFloat64 ();if _gdef !=nil {return _gdef ;};_aac ,_gdef :=_ade .PopNumberAsFloat64 ();if _gdef !=nil {return _gdef ;};if _c .Abs (_aac -_aeg )< _gg {_ace :=_ade .Push (MakeBool (false ));
return _ace ;}else if _aac > _aeg {_dd :=_ade .Push (MakeBool (true ));return _dd ;}else {_bdcb :=_ade .Push (MakeBool (false ));return _bdcb ;};};func (_ggd *PSProgram )DebugString ()string {_gd :="\u007b\u0020";for _ ,_ccg :=range *_ggd {_gd +=_ccg .DebugString ();
_gd +="\u0020";};_gd +="\u007d";return _gd ;};func (_fbaf *PSOperand )ne (_ebae *PSStack )error {_ega :=_fbaf .eq (_ebae );if _ega !=nil {return _ega ;};_ega =_fbaf .not (_ebae );return _ega ;};func (_cc *PSBoolean )DebugString ()string {return _bb .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_cc .Val );
};func (_beec *PSOperand )roll (_geb *PSStack )error {_adc ,_aagf :=_geb .Pop ();if _aagf !=nil {return _aagf ;};_gfg ,_aagf :=_geb .Pop ();if _aagf !=nil {return _aagf ;};_gce ,_ceg :=_adc .(*PSInteger );if !_ceg {return ErrTypeCheck ;};_ebe ,_ceg :=_gfg .(*PSInteger );
if !_ceg {return ErrTypeCheck ;};if _ebe .Val < 0{return ErrRangeCheck ;};if _ebe .Val ==0||_ebe .Val ==1{return nil ;};if _ebe .Val > len (*_geb ){return ErrStackUnderflow ;};for _afg :=0;_afg < _fbb (_gce .Val );_afg ++{var _cef []PSObject ;_cef =(*_geb )[len (*_geb )-(_ebe .Val ):len (*_geb )];
if _gce .Val > 0{_bgdc :=_cef [len (_cef )-1];_cef =append ([]PSObject {_bgdc },_cef [0:len (_cef )-1]...);}else {_bebd :=_cef [len (_cef )-_ebe .Val ];_cef =append (_cef [1:],_bebd );};_bce :=append ((*_geb )[0:len (*_geb )-_ebe .Val ],_cef ...);_geb =&_bce ;
};return nil ;};func (_eab *PSOperand )sub (_bcdb *PSStack )error {_eec ,_agd :=_bcdb .Pop ();if _agd !=nil {return _agd ;};_gcc ,_agd :=_bcdb .Pop ();if _agd !=nil {return _agd ;};_eed ,_geae :=_eec .(*PSReal );_faf ,_dcge :=_eec .(*PSInteger );if !_geae &&!_dcge {return ErrTypeCheck ;
};_dcgc ,_daec :=_gcc .(*PSReal );_aef ,_dcgfa :=_gcc .(*PSInteger );if !_daec &&!_dcgfa {return ErrTypeCheck ;};if _dcge &&_dcgfa {_ceff :=_aef .Val -_faf .Val ;_fecc :=_bcdb .Push (MakeInteger (_ceff ));return _fecc ;};var _fedf float64 =0;if _daec {_fedf =_dcgc .Val ;
}else {_fedf =float64 (_aef .Val );};if _geae {_fedf -=_eed .Val ;}else {_fedf -=float64 (_faf .Val );};_agd =_bcdb .Push (MakeReal (_fedf ));return _agd ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _ff []float64 ;for _ ,_ee :=range objects {if _fd ,_fc :=_ee .(*PSInteger );_fc {_ff =append (_ff ,float64 (_fd .Val ));}else if _d ,_ge :=_ee .(*PSReal );_ge {_ff =append (_ff ,_d .Val );
}else {return nil ,ErrTypeCheck ;};};return _ff ,nil ;};

// Parse parses the postscript and store as a program that can be executed.
func (_cbfa *PSParser )Parse ()(*PSProgram ,error ){_cbfa .skipSpaces ();_baac ,_addf :=_cbfa ._gdcf .Peek (2);if _addf !=nil {return nil ,_addf ;};if _baac [0]!='{'{return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_cbe ,_addf :=_cbfa .parseFunction ();if _addf !=nil &&_addf !=_f .EOF {return nil ,_addf ;};return _cbe ,_addf ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_ab *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_dg :=range objects {_cad :=_ab .Stack .Push (_dg );if _cad !=nil {return nil ,_cad ;};};_ag :=_ab ._fa .Exec (_ab .Stack );if _ag !=nil {_af .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ag );
return nil ,_ag ;};_cf :=[]PSObject (*_ab .Stack );_ab .Stack .Empty ();return _cf ,nil ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;var ErrRangeCheck =_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_bf *PSBoolean )String ()string {return _bb .Sprintf ("\u0025\u0076",_bf .Val )};func (_aad *PSParser )parseOperand ()(*PSOperand ,error ){var _eeeb []byte ;
for {_fdeb ,_fgdc :=_aad ._gdcf .Peek (1);if _fgdc !=nil {if _fgdc ==_f .EOF {break ;};return nil ,_fgdc ;};if _ad .IsDelimiter (_fdeb [0]){break ;};if _ad .IsWhiteSpace (_fdeb [0]){break ;};_eeeg ,_ :=_aad ._gdcf .ReadByte ();_eeeb =append (_eeeb ,_eeeg );
};if len (_eeeb )==0{return nil ,_g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_eeeb )),nil ;};var ErrUndefinedResult =_g .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");
func (_dgf *PSOperand )Duplicate ()PSObject {_bfe :=*_dgf ;return &_bfe };func (_aga *PSInteger )Duplicate ()PSObject {_gga :=PSInteger {};_gga .Val =_aga .Val ;return &_gga };

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_bff *PSOperand )add (_bcb *PSStack )error {_aa ,_agf :=_bcb .Pop ();if _agf !=nil {return _agf ;};_da ,_agf :=_bcb .Pop ();if _agf !=nil {return _agf ;};_fdg ,_bbc :=_aa .(*PSReal );_ae ,_fcg :=_aa .(*PSInteger );
if !_bbc &&!_fcg {return ErrTypeCheck ;};_bfd ,_efdb :=_da .(*PSReal );_ecg ,_gff :=_da .(*PSInteger );if !_efdb &&!_gff {return ErrTypeCheck ;};if _fcg &&_gff {_bae :=_ae .Val +_ecg .Val ;_acc :=_bcb .Push (MakeInteger (_bae ));return _acc ;};var _acb float64 ;
if _bbc {_acb =_fdg .Val ;}else {_acb =float64 (_ae .Val );};if _efdb {_acb +=_bfd .Val ;}else {_acb +=float64 (_ecg .Val );};_agf =_bcb .Push (MakeReal (_acb ));return _agf ;};func (_dege *PSOperand )sin (_fdeg *PSStack )error {_bcc ,_cgca :=_fdeg .PopNumberAsFloat64 ();
if _cgca !=nil {return _cgca ;};_adcg :=_c .Sin (_bcc *_c .Pi /180.0);_cgca =_fdeg .Push (MakeReal (_adcg ));return _cgca ;};func (_egd *PSOperand )xor (_gffg *PSStack )error {_gab ,_dfdg :=_gffg .Pop ();if _dfdg !=nil {return _dfdg ;};_cbda ,_dfdg :=_gffg .Pop ();
if _dfdg !=nil {return _dfdg ;};if _feeg ,_adb :=_gab .(*PSBoolean );_adb {_ebda ,_gcg :=_cbda .(*PSBoolean );if !_gcg {return ErrTypeCheck ;};_dfdg =_gffg .Push (MakeBool (_feeg .Val !=_ebda .Val ));return _dfdg ;};if _dabg ,_ecff :=_gab .(*PSInteger );
_ecff {_aeef ,_bfa :=_cbda .(*PSInteger );if !_bfa {return ErrTypeCheck ;};_dfdg =_gffg .Push (MakeInteger (_dabg .Val ^_aeef .Val ));return _dfdg ;};return ErrTypeCheck ;};func (_adg *PSOperand )pop (_eadd *PSStack )error {_ ,_cced :=_eadd .Pop ();if _cced !=nil {return _cced ;
};return nil ;};func (_bfc *PSOperand )bitshift (_fab *PSStack )error {_bgfd ,_fbe :=_fab .PopInteger ();if _fbe !=nil {return _fbe ;};_aeb ,_fbe :=_fab .PopInteger ();if _fbe !=nil {return _fbe ;};var _gaaf int ;if _bgfd >=0{_gaaf =_aeb <<uint (_bgfd );
}else {_gaaf =_aeb >>uint (-_bgfd );};_fbe =_fab .Push (MakeInteger (_gaaf ));return _fbe ;};func (_ddfe *PSParser )parseNumber ()(PSObject ,error ){_fgda ,_baae :=_ad .ParseNumber (_ddfe ._gdcf );if _baae !=nil {return nil ,_baae ;};switch _egc :=_fgda .(type ){case *_ad .PdfObjectFloat :return MakeReal (float64 (*_egc )),nil ;
case *_ad .PdfObjectInteger :return MakeInteger (int (*_egc )),nil ;};return nil ,_bb .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fgda );};

// Pop pops an object from the top of the stack.
func (_fbafc *PSStack )Pop ()(PSObject ,error ){if len (*_fbafc )< 1{return nil ,ErrStackUnderflow ;};_cbc :=(*_fbafc )[len (*_fbafc )-1];*_fbafc =(*_fbafc )[0:len (*_fbafc )-1];return _cbc ,nil ;};func (_aee *PSOperand )and (_efe *PSStack )error {_bad ,_efee :=_efe .Pop ();
if _efee !=nil {return _efee ;};_cff ,_efee :=_efe .Pop ();if _efee !=nil {return _efee ;};if _cgg ,_bdf :=_bad .(*PSBoolean );_bdf {_eff ,_dae :=_cff .(*PSBoolean );if !_dae {return ErrTypeCheck ;};_efee =_efe .Push (MakeBool (_cgg .Val &&_eff .Val ));
return _efee ;};if _ea ,_bge :=_bad .(*PSInteger );_bge {_gbfd ,_caad :=_cff .(*PSInteger );if !_caad {return ErrTypeCheck ;};_efee =_efe .Push (MakeInteger (_ea .Val &_gbfd .Val ));return _efee ;};return ErrTypeCheck ;};func (_egf *PSOperand )cvi (_fgg *PSStack )error {_agc ,_gdfg :=_fgg .Pop ();
if _gdfg !=nil {return _gdfg ;};if _ffa ,_daa :=_agc .(*PSReal );_daa {_ced :=int (_ffa .Val );_gdfg =_fgg .Push (MakeInteger (_ced ));}else if _fca ,_ggaf :=_agc .(*PSInteger );_ggaf {_agfg :=_fca .Val ;_gdfg =_fgg .Push (MakeInteger (_agfg ));}else {return ErrTypeCheck ;
};return _gdfg ;};

// Append appends an object to the PSProgram.
func (_ggf *PSProgram )Append (obj PSObject ){*_ggf =append (*_ggf ,obj )};func (_bdfg *PSOperand )ceiling (_acf *PSStack )error {_age ,_gcd :=_acf .Pop ();if _gcd !=nil {return _gcd ;};if _fcd ,_gfb :=_age .(*PSReal );_gfb {_gcd =_acf .Push (MakeReal (_c .Ceil (_fcd .Val )));
}else if _bbd ,_gdg :=_age .(*PSInteger );_gdg {_gcd =_acf .Push (MakeInteger (_bbd .Val ));}else {_gcd =ErrTypeCheck ;};return _gcd ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_fa *PSProgram ;};func (_ggbb *PSParser )parseBool ()(*PSBoolean ,error ){_abba ,_gee :=_ggbb ._gdcf .Peek (4);if _gee !=nil {return MakeBool (false ),_gee ;};if (len (_abba )>=4)&&(string (_abba [:4])=="\u0074\u0072\u0075\u0065"){_ggbb ._gdcf .Discard (4);
return MakeBool (true ),nil ;};_abba ,_gee =_ggbb ._gdcf .Peek (5);if _gee !=nil {return MakeBool (false ),_gee ;};if (len (_abba )>=5)&&(string (_abba [:5])=="\u0066\u0061\u006cs\u0065"){_ggbb ._gdcf .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_fce *PSOperand )String ()string {return string (*_fce )};var ErrStackOverflow =_g .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");

// Empty empties the stack.
func (_afc *PSStack )Empty (){*_afc =[]PSObject {}};func (_cda *PSParser )parseFunction ()(*PSProgram ,error ){_ccafe ,_ :=_cda ._gdcf .ReadByte ();if _ccafe !='{'{return nil ,_g .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_gbae :=NewPSProgram ();for {_cda .skipSpaces ();_gbeg ,_feec :=_cda ._gdcf .Peek (2);if _feec !=nil {if _feec ==_f .EOF {break ;};return nil ,_feec ;};_af .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_gbeg ));
if _gbeg [0]=='}'{_af .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_cda ._gdcf .ReadByte ();break ;}else if _gbeg [0]=='{'{_af .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_bbce ,_eea :=_cda .parseFunction ();
if _eea !=nil {return nil ,_eea ;};_gbae .Append (_bbce );}else if _ad .IsDecimalDigit (_gbeg [0])||(_gbeg [0]=='-'&&_ad .IsDecimalDigit (_gbeg [1])){_af .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_agada ,_dgb :=_cda .parseNumber ();if _dgb !=nil {return nil ,_dgb ;
};_gbae .Append (_agada );}else {_af .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_gbeg ,_ =_cda ._gdcf .Peek (5);_cgcd :=string (_gbeg );_af .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_cgcd );
if (len (_cgcd )> 4)&&(_cgcd [:5]=="\u0066\u0061\u006cs\u0065"){_egga ,_cfg :=_cda .parseBool ();if _cfg !=nil {return nil ,_cfg ;};_gbae .Append (_egga );}else if (len (_cgcd )> 3)&&(_cgcd [:4]=="\u0074\u0072\u0075\u0065"){_efcd ,_cfb :=_cda .parseBool ();
if _cfb !=nil {return nil ,_cfb ;};_gbae .Append (_efcd );}else {_ddc ,_faa :=_cda .parseOperand ();if _faa !=nil {return nil ,_faa ;};_gbae .Append (_ddc );};};};return _gbae ,nil ;};func (_fdd *PSOperand )mul (_gba *PSStack )error {_gfad ,_ebc :=_gba .Pop ();
if _ebc !=nil {return _ebc ;};_bacg ,_ebc :=_gba .Pop ();if _ebc !=nil {return _ebc ;};_bgbe ,_aae :=_gfad .(*PSReal );_afa ,_dga :=_gfad .(*PSInteger );if !_aae &&!_dga {return ErrTypeCheck ;};_afbd ,_fcge :=_bacg .(*PSReal );_bdfe ,_aed :=_bacg .(*PSInteger );
if !_fcge &&!_aed {return ErrTypeCheck ;};if _dga &&_aed {_fffg :=_afa .Val *_bdfe .Val ;_decb :=_gba .Push (MakeInteger (_fffg ));return _decb ;};var _fde float64 ;if _aae {_fde =_bgbe .Val ;}else {_fde =float64 (_afa .Val );};if _fcge {_fde *=_afbd .Val ;
}else {_fde *=float64 (_bdfe .Val );};_ebc =_gba .Push (MakeReal (_fde ));return _ebc ;};const _gg =0.000001;

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_ggb *PSOperand )DebugString ()string {return _bb .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_ggb );};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};