//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_dc "bufio";_a "bytes";_d "errors";_e "fmt";_b "github.com/unidoc/unipdf/v3/common";_bd "github.com/unidoc/unipdf/v3/core";_c "io";_cf "math";);

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_aceac :=PSParser {};_ffgc :=_a .NewBuffer (content );_aceac ._ecfb =_dc .NewReader (_ffgc );return &_aceac ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_fcbd :=PSBoolean {};_fcbd .Val =val ;return &_fcbd };

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_fab *PSOperand )index (_gdb *PSStack )error {_acef ,_efgg :=_gdb .Pop ();if _efgg !=nil {return _efgg ;};_ecce ,_ddc :=_acef .(*PSInteger );if !_ddc {return ErrTypeCheck ;};if _ecce .Val < 0{return ErrRangeCheck ;
};if _ecce .Val > len (*_gdb )-1{return ErrStackUnderflow ;};_def :=(*_gdb )[len (*_gdb )-1-_ecce .Val ];_efgg =_gdb .Push (_def .Duplicate ());return _efgg ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;var ErrStackOverflow =_d .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");

// Append appends an object to the PSProgram.
func (_aca *PSProgram )Append (obj PSObject ){*_aca =append (*_aca ,obj )};func (_dcc *PSOperand )xor (_bdee *PSStack )error {_bbab ,_cedc :=_bdee .Pop ();if _cedc !=nil {return _cedc ;};_ddba ,_cedc :=_bdee .Pop ();if _cedc !=nil {return _cedc ;};if _bae ,_acaf :=_bbab .(*PSBoolean );
_acaf {_ddcd ,_bgcd :=_ddba .(*PSBoolean );if !_bgcd {return ErrTypeCheck ;};_cedc =_bdee .Push (MakeBool (_bae .Val !=_ddcd .Val ));return _cedc ;};if _bddd ,_defef :=_bbab .(*PSInteger );_defef {_ebc ,_gbgc :=_ddba .(*PSInteger );if !_gbgc {return ErrTypeCheck ;
};_cedc =_bdee .Push (MakeInteger (_bddd .Val ^_ebc .Val ));return _cedc ;};return ErrTypeCheck ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_egg *PSOperand )pop (_fdd *PSStack )error {_ ,_cedb :=_fdd .Pop ();if _cedb !=nil {return _cedb ;};return nil ;};func (_adbc *PSOperand )sqrt (_fcf *PSStack )error {_ecee ,_eebg :=_fcf .PopNumberAsFloat64 ();
if _eebg !=nil {return _eebg ;};if _ecee < 0{return ErrRangeCheck ;};_bec :=_cf .Sqrt (_ecee );_eebg =_fcf .Push (MakeReal (_bec ));return _eebg ;};func (_abf *PSOperand )DebugString ()string {return _e .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_abf );
};func (_ebe *PSOperand )div (_fba *PSStack )error {_egd ,_fbca :=_fba .Pop ();if _fbca !=nil {return _fbca ;};_adc ,_fbca :=_fba .Pop ();if _fbca !=nil {return _fbca ;};_cgc ,_cec :=_egd .(*PSReal );_aeeg ,_ddd :=_egd .(*PSInteger );if !_cec &&!_ddd {return ErrTypeCheck ;
};if _cec &&_cgc .Val ==0{return ErrUndefinedResult ;};if _ddd &&_aeeg .Val ==0{return ErrUndefinedResult ;};_acg ,_bbae :=_adc .(*PSReal );_cfd ,_adda :=_adc .(*PSInteger );if !_bbae &&!_adda {return ErrTypeCheck ;};var _afc float64 ;if _bbae {_afc =_acg .Val ;
}else {_afc =float64 (_cfd .Val );};if _cec {_afc /=_cgc .Val ;}else {_afc /=float64 (_aeeg .Val );};_fbca =_fba .Push (MakeReal (_afc ));return _fbca ;};

// Parse parses the postscript and store as a program that can be executed.
func (_gcae *PSParser )Parse ()(*PSProgram ,error ){_gcae .skipSpaces ();_gac ,_eefec :=_gcae ._ecfb .Peek (2);if _eefec !=nil {return nil ,_eefec ;};if _gac [0]!='{'{return nil ,_d .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_acgg ,_eefec :=_gcae .parseFunction ();if _eefec !=nil &&_eefec !=_c .EOF {return nil ,_eefec ;};return _acgg ,_eefec ;};func (_agc *PSOperand )sub (_gdga *PSStack )error {_bfge ,_ccd :=_gdga .Pop ();if _ccd !=nil {return _ccd ;};_feb ,_ccd :=_gdga .Pop ();
if _ccd !=nil {return _ccd ;};_cfaf ,_dfe :=_bfge .(*PSReal );_affg ,_cfdg :=_bfge .(*PSInteger );if !_dfe &&!_cfdg {return ErrTypeCheck ;};_dce ,_ccbg :=_feb .(*PSReal );_dffe ,_eegb :=_feb .(*PSInteger );if !_ccbg &&!_eegb {return ErrTypeCheck ;};if _cfdg &&_eegb {_age :=_dffe .Val -_affg .Val ;
_gfc :=_gdga .Push (MakeInteger (_age ));return _gfc ;};var _ebdb float64 =0;if _ccbg {_ebdb =_dce .Val ;}else {_ebdb =float64 (_dffe .Val );};if _dfe {_ebdb -=_cfaf .Val ;}else {_ebdb -=float64 (_affg .Val );};_ccd =_gdga .Push (MakeReal (_ebdb ));return _ccd ;
};func (_ebae *PSOperand )roll (_faga *PSStack )error {_afaf ,_ebg :=_faga .Pop ();if _ebg !=nil {return _ebg ;};_bgdd ,_ebg :=_faga .Pop ();if _ebg !=nil {return _ebg ;};_dgg ,_fge :=_afaf .(*PSInteger );if !_fge {return ErrTypeCheck ;};_gbgb ,_fge :=_bgdd .(*PSInteger );
if !_fge {return ErrTypeCheck ;};if _gbgb .Val < 0{return ErrRangeCheck ;};if _gbgb .Val ==0||_gbgb .Val ==1{return nil ;};if _gbgb .Val > len (*_faga ){return ErrStackUnderflow ;};for _agg :=0;_agg < _gcd (_dgg .Val );_agg ++{var _bafg []PSObject ;_bafg =(*_faga )[len (*_faga )-(_gbgb .Val ):len (*_faga )];
if _dgg .Val > 0{_abbab :=_bafg [len (_bafg )-1];_bafg =append ([]PSObject {_abbab },_bafg [0:len (_bafg )-1]...);}else {_fbaa :=_bafg [len (_bafg )-_gbgb .Val ];_bafg =append (_bafg [1:],_fbaa );};_feg :=append ((*_faga )[0:len (*_faga )-_gbgb .Val ],_bafg ...);
_faga =&_feg ;};return nil ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_afa *PSOperand )eq (_dbd *PSStack )error {_gd ,_cecc :=_dbd .Pop ();if _cecc !=nil {return _cecc ;};_ega ,_cecc :=_dbd .Pop ();if _cecc !=nil {return _cecc ;};_egb ,_gec :=_gd .(*PSBoolean );_gbc ,_dff :=_ega .(*PSBoolean );
if _gec ||_dff {var _bfce error ;if _gec &&_dff {_bfce =_dbd .Push (MakeBool (_egb .Val ==_gbc .Val ));}else {_bfce =_dbd .Push (MakeBool (false ));};return _bfce ;};var _gf float64 ;var _cbb float64 ;if _cafg ,_gcbc :=_gd .(*PSInteger );_gcbc {_gf =float64 (_cafg .Val );
}else if _ebbf ,_gecf :=_gd .(*PSReal );_gecf {_gf =_ebbf .Val ;}else {return ErrTypeCheck ;};if _dge ,_eed :=_ega .(*PSInteger );_eed {_cbb =float64 (_dge .Val );}else if _fd ,_cc :=_ega .(*PSReal );_cc {_cbb =_fd .Val ;}else {return ErrTypeCheck ;};if _cf .Abs (_cbb -_gf )< _ba {_cecc =_dbd .Push (MakeBool (true ));
}else {_cecc =_dbd .Push (MakeBool (false ));};return _cecc ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_ff *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ae :=range objects {_aea :=_ff .Stack .Push (_ae );if _aea !=nil {return nil ,_aea ;};};_cfg :=_ff ._ee .Exec (_ff .Stack );if _cfg !=nil {_b .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cfg );
return nil ,_cfg ;};_dcg :=[]PSObject (*_ff .Stack );_ff .Stack .Empty ();return _dcg ,nil ;};func (_eaf *PSOperand )cvr (_fbc *PSStack )error {_fca ,_acab :=_fbc .Pop ();if _acab !=nil {return _acab ;};if _cgb ,_cdg :=_fca .(*PSReal );_cdg {_acab =_fbc .Push (MakeReal (_cgb .Val ));
}else if _afe ,_bba :=_fca .(*PSInteger );_bba {_acab =_fbc .Push (MakeReal (float64 (_afe .Val )));}else {return ErrTypeCheck ;};return _acab ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_ecfb *_dc .Reader };

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_f :=&PSExecutor {};_f .Stack =NewPSStack ();_f ._ee =program ;return _f ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_edce :=PSReal {};_edce .Val =val ;return &_edce };func (_aef *PSParser )parseFunction ()(*PSProgram ,error ){_ecbb ,_ :=_aef ._ecfb .ReadByte ();if _ecbb !='{'{return nil ,_d .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_ddbaf :=NewPSProgram ();for {_aef .skipSpaces ();_gfgd ,_fgg :=_aef ._ecfb .Peek (2);if _fgg !=nil {if _fgg ==_c .EOF {break ;};return nil ,_fgg ;};_b .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_gfgd ));
if _gfgd [0]=='}'{_b .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_aef ._ecfb .ReadByte ();break ;}else if _gfgd [0]=='{'{_b .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_ccf ,_ffb :=_aef .parseFunction ();
if _ffb !=nil {return nil ,_ffb ;};_ddbaf .Append (_ccf );}else if _bd .IsDecimalDigit (_gfgd [0])||(_gfgd [0]=='-'&&_bd .IsDecimalDigit (_gfgd [1])){_b .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_cbd ,_cfab :=_aef .parseNumber ();if _cfab !=nil {return nil ,_cfab ;
};_ddbaf .Append (_cbd );}else {_b .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_gfgd ,_ =_aef ._ecfb .Peek (5);_abde :=string (_gfgd );_b .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_abde );
if (len (_abde )> 4)&&(_abde [:5]=="\u0066\u0061\u006cs\u0065"){_dged ,_cca :=_aef .parseBool ();if _cca !=nil {return nil ,_cca ;};_ddbaf .Append (_dged );}else if (len (_abde )> 3)&&(_abde [:4]=="\u0074\u0072\u0075\u0065"){_cda ,_cgd :=_aef .parseBool ();
if _cgd !=nil {return nil ,_cgd ;};_ddbaf .Append (_cda );}else {_dffd ,_egf :=_aef .parseOperand ();if _egf !=nil {return nil ,_egf ;};_ddbaf .Append (_dffd );};};};return _ddbaf ,nil ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_ef *PSInteger )Duplicate ()PSObject {_gg :=PSInteger {};_gg .Val =_ef .Val ;return &_gg };

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_dfg *PSStack )DebugString ()string {_dae :="\u005b\u0020";for _ ,_ebbgd :=range *_dfg {_dae +=_ebbgd .DebugString ();_dae +="\u0020";};_dae +="\u005d";return _dae ;};func (_bad *PSOperand )ge (_gfg *PSStack )error {_dcb ,_egc :=_gfg .PopNumberAsFloat64 ();
if _egc !=nil {return _egc ;};_cea ,_egc :=_gfg .PopNumberAsFloat64 ();if _egc !=nil {return _egc ;};if _cf .Abs (_cea -_dcb )< _ba {_fcb :=_gfg .Push (MakeBool (true ));return _fcb ;}else if _cea > _dcb {_fdf :=_gfg .Push (MakeBool (true ));return _fdf ;
}else {_eea :=_gfg .Push (MakeBool (false ));return _eea ;};};func (_eda *PSOperand )or (_gce *PSStack )error {_caa ,_gadd :=_gce .Pop ();if _gadd !=nil {return _gadd ;};_cceb ,_gadd :=_gce .Pop ();if _gadd !=nil {return _gadd ;};if _ebea ,_effb :=_caa .(*PSBoolean );
_effb {_caaa ,_fbg :=_cceb .(*PSBoolean );if !_fbg {return ErrTypeCheck ;};_gadd =_gce .Push (MakeBool (_ebea .Val ||_caaa .Val ));return _gadd ;};if _bbce ,_dde :=_caa .(*PSInteger );_dde {_bfff ,_beg :=_cceb .(*PSInteger );if !_beg {return ErrTypeCheck ;
};_gadd =_gce .Push (MakeInteger (_bbce .Val |_bfff .Val ));return _gadd ;};return ErrTypeCheck ;};func (_gea *PSOperand )add (_dac *PSStack )error {_aab ,_eb :=_dac .Pop ();if _eb !=nil {return _eb ;};_aba ,_eb :=_dac .Pop ();if _eb !=nil {return _eb ;
};_db ,_eec :=_aab .(*PSReal );_geb ,_abb :=_aab .(*PSInteger );if !_eec &&!_abb {return ErrTypeCheck ;};_acbb ,_gcb :=_aba .(*PSReal );_ebb ,_gedf :=_aba .(*PSInteger );if !_gcb &&!_gedf {return ErrTypeCheck ;};if _abb &&_gedf {_aeg :=_geb .Val +_ebb .Val ;
_faf :=_dac .Push (MakeInteger (_aeg ));return _faf ;};var _afg float64 ;if _eec {_afg =_db .Val ;}else {_afg =float64 (_geb .Val );};if _gcb {_afg +=_acbb .Val ;}else {_afg +=float64 (_ebb .Val );};_eb =_dac .Push (MakeReal (_afg ));return _eb ;};func (_dg *PSBoolean )String ()string {return _e .Sprintf ("\u0025\u0076",_dg .Val )};


// Exec executes the program, typically leaving output values on the stack.
func (_eff *PSProgram )Exec (stack *PSStack )error {for _ ,_bab :=range *_eff {var _add error ;switch _fb :=_bab .(type ){case *PSInteger :_dcgc :=_fb ;_add =stack .Push (_dcgc );case *PSReal :_bfc :=_fb ;_add =stack .Push (_bfc );case *PSBoolean :_ced :=_fb ;
_add =stack .Push (_ced );case *PSProgram :_eeg :=_fb ;_add =stack .Push (_eeg );case *PSOperand :_dcga :=_fb ;_add =_dcga .Exec (stack );default:return ErrTypeCheck ;};if _add !=nil {return _add ;};};return nil ;};func (_abe *PSOperand )ceiling (_cee *PSStack )error {_babg ,_dbe :=_cee .Pop ();
if _dbe !=nil {return _dbe ;};if _dbb ,_dgf :=_babg .(*PSReal );_dgf {_dbe =_cee .Push (MakeReal (_cf .Ceil (_dbb .Val )));}else if _dbg ,_fgc :=_babg .(*PSInteger );_fgc {_dbe =_cee .Push (MakeInteger (_dbg .Val ));}else {_dbe =ErrTypeCheck ;};return _dbe ;
};func (_ecf *PSProgram )Duplicate ()PSObject {_edd :=&PSProgram {};for _ ,_dcf :=range *_ecf {_edd .Append (_dcf .Duplicate ());};return _edd ;};func (_bfe *PSOperand )ln (_geea *PSStack )error {_fdg ,_adba :=_geea .PopNumberAsFloat64 ();if _adba !=nil {return _adba ;
};_dbgf :=_cf .Log (_fdg );_adba =_geea .Push (MakeReal (_dbgf ));return _adba ;};func (_dag *PSOperand )exp (_aaf *PSStack )error {_bbaeb ,_bdd :=_aaf .PopNumberAsFloat64 ();if _bdd !=nil {return _bdd ;};_gad ,_bdd :=_aaf .PopNumberAsFloat64 ();if _bdd !=nil {return _bdd ;
};if _cf .Abs (_bbaeb )< 1&&_gad < 0{return ErrUndefinedResult ;};_gcg :=_cf .Pow (_gad ,_bbaeb );_bdd =_aaf .Push (MakeReal (_gcg ));return _bdd ;};func (_adg *PSParser )parseOperand ()(*PSOperand ,error ){var _acfc []byte ;for {_adec ,_ecd :=_adg ._ecfb .Peek (1);
if _ecd !=nil {if _ecd ==_c .EOF {break ;};return nil ,_ecd ;};if _bd .IsDelimiter (_adec [0]){break ;};if _bd .IsWhiteSpace (_adec [0]){break ;};_eae ,_ :=_adg ._ecfb .ReadByte ();_acfc =append (_acfc ,_eae );};if len (_acfc )==0{return nil ,_d .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_acfc )),nil ;};func (_bb *PSOperand )Duplicate ()PSObject {_gb :=*_bb ;return &_gb };func (_gdg *PSOperand )gt (_adf *PSStack )error {_aaed ,_ede :=_adf .PopNumberAsFloat64 ();if _ede !=nil {return _ede ;};_edda ,_ede :=_adf .PopNumberAsFloat64 ();
if _ede !=nil {return _ede ;};if _cf .Abs (_edda -_aaed )< _ba {_ccc :=_adf .Push (MakeBool (false ));return _ccc ;}else if _edda > _aaed {_cbc :=_adf .Push (MakeBool (true ));return _cbc ;}else {_ecb :=_adf .Push (MakeBool (false ));return _ecb ;};};func _gcd (_gdge int )int {if _gdge < 0{return -_gdge ;
};return _gdge ;};func (_ffdf *PSOperand )floor (_egde *PSStack )error {_aafg ,_bgg :=_egde .Pop ();if _bgg !=nil {return _bgg ;};if _efg ,_dadf :=_aafg .(*PSReal );_dadf {_bgg =_egde .Push (MakeReal (_cf .Floor (_efg .Val )));}else if _ebd ,_gaga :=_aafg .(*PSInteger );
_gaga {_bgg =_egde .Push (MakeInteger (_ebd .Val ));}else {return ErrTypeCheck ;};return _bgg ;};func (_dbed *PSOperand )ifelse (_gdf *PSStack )error {_ecfgf ,_fbad :=_gdf .Pop ();if _fbad !=nil {return _fbad ;};_gbcd ,_fbad :=_gdf .Pop ();if _fbad !=nil {return _fbad ;
};_eefe ,_fbad :=_gdf .Pop ();if _fbad !=nil {return _fbad ;};_bbc ,_cbe :=_ecfgf .(*PSProgram );if !_cbe {return ErrTypeCheck ;};_bada ,_cbe :=_gbcd .(*PSProgram );if !_cbe {return ErrTypeCheck ;};_aaae ,_cbe :=_eefe .(*PSBoolean );if !_cbe {return ErrTypeCheck ;
};if _aaae .Val {_dca :=_bada .Exec (_gdf );return _dca ;};_fbad =_bbc .Exec (_gdf );return _fbad ;};func (_gbf *PSOperand )idiv (_bag *PSStack )error {_aaaf ,_fad :=_bag .Pop ();if _fad !=nil {return _fad ;};_efga ,_fad :=_bag .Pop ();if _fad !=nil {return _fad ;
};_abba ,_ace :=_aaaf .(*PSInteger );if !_ace {return ErrTypeCheck ;};if _abba .Val ==0{return ErrUndefinedResult ;};_gbe ,_ace :=_efga .(*PSInteger );if !_ace {return ErrTypeCheck ;};_gga :=_gbe .Val /_abba .Val ;_fad =_bag .Push (MakeInteger (_gga ));
return _fad ;};var ErrStackUnderflow =_d .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_fcaa *PSOperand )lt (_bef *PSStack )error {_bgf ,_fff :=_bef .PopNumberAsFloat64 ();if _fff !=nil {return _fff ;};
_cdc ,_fff :=_bef .PopNumberAsFloat64 ();if _fff !=nil {return _fff ;};if _cf .Abs (_cdc -_bgf )< _ba {_fgce :=_bef .Push (MakeBool (false ));return _fgce ;}else if _cdc < _bgf {_bbcd :=_bef .Push (MakeBool (true ));return _bbcd ;}else {_cfda :=_bef .Push (MakeBool (false ));
return _cfda ;};};func (_cgg *PSOperand )log (_eddd *PSStack )error {_cfbb ,_fcg :=_eddd .PopNumberAsFloat64 ();if _fcg !=nil {return _fcg ;};_eaff :=_cf .Log10 (_cfbb );_fcg =_eddd .Push (MakeReal (_eaff ));return _fcg ;};func (_aaag *PSOperand )dup (_fcc *PSStack )error {_acf ,_ecc :=_fcc .Pop ();
if _ecc !=nil {return _ecc ;};_ecc =_fcc .Push (_acf );if _ecc !=nil {return _ecc ;};_ecc =_fcc .Push (_acf .Duplicate ());return _ecc ;};func (_cdba *PSOperand )cos (_gbg *PSStack )error {_ggb ,_gag :=_gbg .PopNumberAsFloat64 ();if _gag !=nil {return _gag ;
};_ade :=_cf .Cos (_ggb *_cf .Pi /180.0);_gag =_gbg .Push (MakeReal (_ade ));return _gag ;};func (_fae *PSReal )String ()string {return _e .Sprintf ("\u0025\u002e\u0035\u0066",_fae .Val )};func (_aabb *PSOperand )cvi (_efd *PSStack )error {_dcgf ,_efa :=_efd .Pop ();
if _efa !=nil {return _efa ;};if _fe ,_cac :=_dcgf .(*PSReal );_cac {_faed :=int (_fe .Val );_efa =_efd .Push (MakeInteger (_faed ));}else if _deb ,_fc :=_dcgf .(*PSInteger );_fc {_be :=_deb .Val ;_efa =_efd .Push (MakeInteger (_be ));}else {return ErrTypeCheck ;
};return _efa ;};func (_ed *PSReal )DebugString ()string {return _e .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_ed .Val );};func (_ddf *PSOperand )String ()string {return string (*_ddf )};func (_ce *PSInteger )String ()string {return _e .Sprintf ("\u0025\u0064",_ce .Val )};


// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_ee *PSProgram ;};func (_cdbbe *PSOperand )round (_dda *PSStack )error {_baf ,_bgd :=_dda .Pop ();if _bgd !=nil {return _bgd ;};if _bdg ,_ccg :=_baf .(*PSReal );_ccg {_bgd =_dda .Push (MakeReal (_cf .Floor (_bdg .Val +0.5)));
}else if _dbdf ,_aed :=_baf .(*PSInteger );_aed {_bgd =_dda .Push (MakeInteger (_dbdf .Val ));}else {return ErrTypeCheck ;};return _bgd ;};func (_gfb *PSOperand )ne (_fed *PSStack )error {_dee :=_gfb .eq (_fed );if _dee !=nil {return _dee ;};_dee =_gfb .not (_fed );
return _dee ;};func (_cdbb *PSOperand )bitshift (_dba *PSStack )error {_gcac ,_gcf :=_dba .PopInteger ();if _gcf !=nil {return _gcf ;};_ca ,_gcf :=_dba .PopInteger ();if _gcf !=nil {return _gcf ;};var _efc int ;if _gcac >=0{_efc =_ca <<uint (_gcac );}else {_efc =_ca >>uint (-_gcac );
};_gcf =_dba .Push (MakeInteger (_efc ));return _gcf ;};func (_ea *PSProgram )String ()string {_aag :="\u007b\u0020";for _ ,_bc :=range *_ea {_aag +=_bc .String ();_aag +="\u0020";};_aag +="\u007d";return _aag ;};func (_fgga *PSParser )parseBool ()(*PSBoolean ,error ){_gcge ,_baeb :=_fgga ._ecfb .Peek (4);
if _baeb !=nil {return MakeBool (false ),_baeb ;};if (len (_gcge )>=4)&&(string (_gcge [:4])=="\u0074\u0072\u0075\u0065"){_fgga ._ecfb .Discard (4);return MakeBool (true ),nil ;};_gcge ,_baeb =_fgga ._ecfb .Peek (5);if _baeb !=nil {return MakeBool (false ),_baeb ;
};if (len (_gcge )>=5)&&(string (_gcge [:5])=="\u0066\u0061\u006cs\u0065"){_fgga ._ecfb .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_d .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};var ErrTypeCheck =_d .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");

// PSReal represents a real number.
type PSReal struct{Val float64 ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _ec []float64 ;for _ ,_fa :=range objects {if _cfe ,_dd :=_fa .(*PSInteger );_dd {_ec =append (_ec ,float64 (_cfe .Val ));}else if _gc ,_fg :=_fa .(*PSReal );_fg {_ec =append (_ec ,_gc .Val );
}else {return nil ,ErrTypeCheck ;};};return _ec ,nil ;};func (_aabe *PSOperand )ifCondition (_gee *PSStack )error {_cfdc ,_ecfg :=_gee .Pop ();if _ecfg !=nil {return _ecfg ;};_edb ,_ecfg :=_gee .Pop ();if _ecfg !=nil {return _ecfg ;};_gfgc ,_aeb :=_cfdc .(*PSProgram );
if !_aeb {return ErrTypeCheck ;};_acfe ,_aeb :=_edb .(*PSBoolean );if !_aeb {return ErrTypeCheck ;};if _acfe .Val {_afad :=_gfgc .Exec (_gee );return _afad ;};return nil ;};func (_acea *PSOperand )mul (_dddg *PSStack )error {_deg ,_ded :=_dddg .Pop ();
if _ded !=nil {return _ded ;};_abge ,_ded :=_dddg .Pop ();if _ded !=nil {return _ded ;};_faea ,_cfac :=_deg .(*PSReal );_aga ,_abc :=_deg .(*PSInteger );if !_cfac &&!_abc {return ErrTypeCheck ;};_acge ,_cde :=_abge .(*PSReal );_fcce ,_bdc :=_abge .(*PSInteger );
if !_cde &&!_bdc {return ErrTypeCheck ;};if _abc &&_bdc {_dcae :=_aga .Val *_fcce .Val ;_dcbf :=_dddg .Push (MakeInteger (_dcae ));return _dcbf ;};var _ccb float64 ;if _cfac {_ccb =_faea .Val ;}else {_ccb =float64 (_aga .Val );};if _cde {_ccb *=_acge .Val ;
}else {_ccb *=float64 (_fcce .Val );};_ded =_dddg .Push (MakeReal (_ccb ));return _ded ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_ccbb *PSStack )PopInteger ()(int ,error ){_gcgc ,_bfee :=_ccbb .Pop ();if _bfee !=nil {return 0,_bfee ;};if _cbf ,_edf :=_gcgc .(*PSInteger );_edf {return _cbf .Val ,nil ;};return 0,ErrTypeCheck ;};func (_ag *PSOperand )le (_bgc *PSStack )error {_eaa ,_adb :=_bgc .PopNumberAsFloat64 ();
if _adb !=nil {return _adb ;};_bde ,_adb :=_bgc .PopNumberAsFloat64 ();if _adb !=nil {return _adb ;};if _cf .Abs (_bde -_eaa )< _ba {_bfg :=_bgc .Push (MakeBool (true ));return _bfg ;}else if _bde < _eaa {_efbb :=_bgc .Push (MakeBool (true ));return _efbb ;
}else {_ebbg :=_bgc .Push (MakeBool (false ));return _ebbg ;};};var ErrUnsupportedOperand =_d .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");

// Pop pops an object from the top of the stack.
func (_dcbb *PSStack )Pop ()(PSObject ,error ){if len (*_dcbb )< 1{return nil ,ErrStackUnderflow ;};_cccc :=(*_dcbb )[len (*_dcbb )-1];*_dcbb =(*_dcbb )[0:len (*_dcbb )-1];return _cccc ,nil ;};func (_acfec *PSOperand )not (_bga *PSStack )error {_ffg ,_gdbe :=_bga .Pop ();
if _gdbe !=nil {return _gdbe ;};if _afgd ,_addd :=_ffg .(*PSBoolean );_addd {_gdbe =_bga .Push (MakeBool (!_afgd .Val ));return _gdbe ;}else if _ece ,_fagf :=_ffg .(*PSInteger );_fagf {_gdbe =_bga .Push (MakeInteger (^_ece .Val ));return _gdbe ;}else {return ErrTypeCheck ;
};};const _ba =0.000001;

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_dfec :=PSOperand (val );return &_dfec };func (_faeg *PSOperand )truncate (_ffa *PSStack )error {_eedb ,_dcgfb :=_ffa .Pop ();if _dcgfb !=nil {return _dcgfb ;};if _defe ,_ceed :=_eedb .(*PSReal );_ceed {_bge :=int (_defe .Val );
_dcgfb =_ffa .Push (MakeReal (float64 (_bge )));}else if _ceccf ,_gedb :=_eedb .(*PSInteger );_gedb {_dcgfb =_ffa .Push (MakeInteger (_ceccf .Val ));}else {return ErrTypeCheck ;};return _dcgfb ;};func (_dad *PSOperand )copy (_bg *PSStack )error {_caf ,_bdf :=_bg .PopInteger ();
if _bdf !=nil {return _bdf ;};if _caf < 0{return ErrRangeCheck ;};if _caf > len (*_bg ){return ErrRangeCheck ;};*_bg =append (*_bg ,(*_bg )[len (*_bg )-_caf :]...);return nil ;};func (_ebde *PSOperand )neg (_cfde *PSStack )error {_bdea ,_fadf :=_cfde .Pop ();
if _fadf !=nil {return _fadf ;};if _ffdd ,_fgb :=_bdea .(*PSReal );_fgb {_fadf =_cfde .Push (MakeReal (-_ffdd .Val ));return _fadf ;}else if _fbb ,_cgca :=_bdea .(*PSInteger );_cgca {_fadf =_cfde .Push (MakeInteger (-_fbb .Val ));return _fadf ;}else {return ErrTypeCheck ;
};};func (_eegg *PSParser )skipSpaces ()(int ,error ){_cae :=0;for {_acd ,_aad :=_eegg ._ecfb .Peek (1);if _aad !=nil {return 0,_aad ;};if _bd .IsWhiteSpace (_acd [0]){_eegg ._ecfb .ReadByte ();_cae ++;}else {break ;};};return _cae ,nil ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_aceff *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_ecec ,_ddcg :=_aceff .Pop ();if _ddcg !=nil {return 0,_ddcg ;};if _aefg ,_egfc :=_ecec .(*PSReal );_egfc {return _aefg .Val ,nil ;}else if _febc ,_fbcg :=_ecec .(*PSInteger );_fbcg {return float64 (_febc .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_ad *PSBoolean )Duplicate ()PSObject {_cb :=PSBoolean {};_cb .Val =_ad .Val ;return &_cb };func (_ab *PSInteger )DebugString ()string {return _e .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ab .Val );};func (_dga *PSOperand )and (_eecf *PSStack )error {_ga ,_afd :=_eecf .Pop ();
if _afd !=nil {return _afd ;};_abg ,_afd :=_eecf .Pop ();if _afd !=nil {return _afd ;};if _cd ,_bda :=_ga .(*PSBoolean );_bda {_bff ,_aae :=_abg .(*PSBoolean );if !_aae {return ErrTypeCheck ;};_afd =_eecf .Push (MakeBool (_cd .Val &&_bff .Val ));return _afd ;
};if _gedd ,_cdb :=_ga .(*PSInteger );_cdb {_ffd ,_cba :=_abg .(*PSInteger );if !_cba {return ErrTypeCheck ;};_afd =_eecf .Push (MakeInteger (_gedd .Val &_ffd .Val ));return _afd ;};return ErrTypeCheck ;};var ErrRangeCheck =_d .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");
func (_af *PSOperand )abs (_ddg *PSStack )error {_bca ,_efe :=_ddg .Pop ();if _efe !=nil {return _efe ;};if _aaa ,_eg :=_bca .(*PSReal );_eg {_da :=_aaa .Val ;if _da < 0{_efe =_ddg .Push (MakeReal (-_da ));}else {_efe =_ddg .Push (MakeReal (_da ));};}else if _ddb ,_df :=_bca .(*PSInteger );
_df {_acb :=_ddb .Val ;if _acb < 0{_efe =_ddg .Push (MakeInteger (-_acb ));}else {_efe =_ddg .Push (MakeInteger (_acb ));};}else {return ErrTypeCheck ;};return _efe ;};var ErrUndefinedResult =_d .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");


// Empty empties the stack.
func (_ebgf *PSStack )Empty (){*_ebgf =[]PSObject {}};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// Push pushes an object on top of the stack.
func (_ggbb *PSStack )Push (obj PSObject )error {if len (*_ggbb )> 100{return ErrStackOverflow ;};*_ggbb =append (*_ggbb ,obj );return nil ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_fag *PSOperand )exch (_abd *PSStack )error {_cce ,_fga :=_abd .Pop ();if _fga !=nil {return _fga ;};_fbf ,_fga :=_abd .Pop ();if _fga !=nil {return _fga ;};_fga =_abd .Push (_cce );if _fga !=nil {return _fga ;};_fga =_abd .Push (_fbf );
return _fga ;};

// String returns a string representation of the stack.
func (_fafa *PSStack )String ()string {_ddbf :="\u005b\u0020";for _ ,_fffc :=range *_fafa {_ddbf +=_fffc .String ();_ddbf +="\u0020";};_ddbf +="\u005d";return _ddbf ;};func (_cab *PSOperand )sin (_dedc *PSStack )error {_cbbb ,_cbeg :=_dedc .PopNumberAsFloat64 ();
if _cbeg !=nil {return _cbeg ;};_gcad :=_cf .Sin (_cbbb *_cf .Pi /180.0);_cbeg =_dedc .Push (MakeReal (_gcad ));return _cbeg ;};func (_cfb *PSBoolean )DebugString ()string {return _e .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_cfb .Val );};func (_baa *PSReal )Duplicate ()PSObject {_ac :=PSReal {};
_ac .Val =_baa .Val ;return &_ac };func (_edc *PSParser )parseNumber ()(PSObject ,error ){_bcba ,_efaa :=_bd .ParseNumber (_edc ._ecfb );if _efaa !=nil {return nil ,_efaa ;};switch _gedbc :=_bcba .(type ){case *_bd .PdfObjectFloat :return MakeReal (float64 (*_gedbc )),nil ;
case *_bd .PdfObjectInteger :return MakeInteger (int (*_gedbc )),nil ;};return nil ,_e .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bcba );};func (_bcb *PSOperand )atan (_acbg *PSStack )error {_aff ,_efb :=_acbg .PopNumberAsFloat64 ();
if _efb !=nil {return _efb ;};_ddff ,_efb :=_acbg .PopNumberAsFloat64 ();if _efb !=nil {return _efb ;};if _aff ==0{var _gae error ;if _ddff < 0{_gae =_acbg .Push (MakeReal (270));}else {_gae =_acbg .Push (MakeReal (90));};return _gae ;};_cg :=_ddff /_aff ;
_ebf :=_cf .Atan (_cg )*180/_cf .Pi ;_efb =_acbg .Push (MakeReal (_ebf ));return _efb ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_dgde *PSOperand )Exec (stack *PSStack )error {_eef :=ErrUnsupportedOperand ;switch *_dgde {case "\u0061\u0062\u0073":_eef =_dgde .abs (stack );case "\u0061\u0064\u0064":_eef =_dgde .add (stack );case "\u0061\u006e\u0064":_eef =_dgde .and (stack );
case "\u0061\u0074\u0061\u006e":_eef =_dgde .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_eef =_dgde .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_eef =_dgde .ceiling (stack );case "\u0063\u006f\u0070\u0079":_eef =_dgde .copy (stack );
case "\u0063\u006f\u0073":_eef =_dgde .cos (stack );case "\u0063\u0076\u0069":_eef =_dgde .cvi (stack );case "\u0063\u0076\u0072":_eef =_dgde .cvr (stack );case "\u0064\u0069\u0076":_eef =_dgde .div (stack );case "\u0064\u0075\u0070":_eef =_dgde .dup (stack );
case "\u0065\u0071":_eef =_dgde .eq (stack );case "\u0065\u0078\u0063\u0068":_eef =_dgde .exch (stack );case "\u0065\u0078\u0070":_eef =_dgde .exp (stack );case "\u0066\u006c\u006fo\u0072":_eef =_dgde .floor (stack );case "\u0067\u0065":_eef =_dgde .ge (stack );
case "\u0067\u0074":_eef =_dgde .gt (stack );case "\u0069\u0064\u0069\u0076":_eef =_dgde .idiv (stack );case "\u0069\u0066":_eef =_dgde .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_eef =_dgde .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_eef =_dgde .index (stack );
case "\u006c\u0065":_eef =_dgde .le (stack );case "\u006c\u006f\u0067":_eef =_dgde .log (stack );case "\u006c\u006e":_eef =_dgde .ln (stack );case "\u006c\u0074":_eef =_dgde .lt (stack );case "\u006d\u006f\u0064":_eef =_dgde .mod (stack );case "\u006d\u0075\u006c":_eef =_dgde .mul (stack );
case "\u006e\u0065":_eef =_dgde .ne (stack );case "\u006e\u0065\u0067":_eef =_dgde .neg (stack );case "\u006e\u006f\u0074":_eef =_dgde .not (stack );case "\u006f\u0072":_eef =_dgde .or (stack );case "\u0070\u006f\u0070":_eef =_dgde .pop (stack );case "\u0072\u006f\u0075n\u0064":_eef =_dgde .round (stack );
case "\u0072\u006f\u006c\u006c":_eef =_dgde .roll (stack );case "\u0073\u0069\u006e":_eef =_dgde .sin (stack );case "\u0073\u0071\u0072\u0074":_eef =_dgde .sqrt (stack );case "\u0073\u0075\u0062":_eef =_dgde .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_eef =_dgde .truncate (stack );
case "\u0078\u006f\u0072":_eef =_dgde .xor (stack );};return _eef ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_gabf :=PSInteger {};_gabf .Val =val ;return &_gabf };

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_fgf *PSOperand )mod (_agd *PSStack )error {_bgga ,_dgb :=_agd .Pop ();if _dgb !=nil {return _dgb ;};_bea ,_dgb :=_agd .Pop ();if _dgb !=nil {return _dgb ;};_afdb ,_fec :=_bgga .(*PSInteger );if !_fec {return ErrTypeCheck ;
};if _afdb .Val ==0{return ErrUndefinedResult ;};_eba ,_fec :=_bea .(*PSInteger );if !_fec {return ErrTypeCheck ;};_cfa :=_eba .Val %_afdb .Val ;_dgb =_agd .Push (MakeInteger (_cfa ));return _dgb ;};func (_ged *PSProgram )DebugString ()string {_aa :="\u007b\u0020";
for _ ,_eeb :=range *_ged {_aa +=_eeb .DebugString ();_aa +="\u0020";};_aa +="\u007d";return _aa ;};