//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_d "bufio";_a "bytes";_e "errors";_dd "fmt";_ddf "github.com/unidoc/unipdf/v3/common";_ec "github.com/unidoc/unipdf/v3/core";_ea "io";_cb "math";);func (_ggec *PSOperand )neg (_eeed *PSStack )error {_gda ,_bgd :=_eeed .Pop ();if _bgd !=nil {return _bgd ;
};if _ggg ,_fedb :=_gda .(*PSReal );_fedb {_bgd =_eeed .Push (MakeReal (-_ggg .Val ));return _bgd ;}else if _fcfa ,_gbbg :=_gda .(*PSInteger );_gbbg {_bgd =_eeed .Push (MakeInteger (-_fcfa .Val ));return _bgd ;}else {return ErrTypeCheck ;};};func (_cab *PSProgram )Duplicate ()PSObject {_ac :=&PSProgram {};
for _ ,_cbc :=range *_cab {_ac .Append (_cbc .Duplicate ());};return _ac ;};var ErrUnsupportedOperand =_e .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_gg *PSBoolean )DebugString ()string {return _dd .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_gg .Val );};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ad :=&PSExecutor {};_ad .Stack =NewPSStack ();_ad ._f =program ;return _ad ;};func (_da *PSReal )String ()string {return _dd .Sprintf ("\u0025\u002e\u0035\u0066",_da .Val )};

// String returns a string representation of the stack.
func (_bad *PSStack )String ()string {_bged :="\u005b\u0020";for _ ,_agef :=range *_bad {_bged +=_agef .String ();_bged +="\u0020";};_bged +="\u005d";return _bged ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_dedg :=PSOperand (val );return &_dedg };func (_cde *PSBoolean )String ()string {return _dd .Sprintf ("\u0025\u0076",_cde .Val )};func (_cfd *PSBoolean )Duplicate ()PSObject {_bdc :=PSBoolean {};_bdc .Val =_cfd .Val ;
return &_bdc };func (_aed *PSOperand )floor (_gee *PSStack )error {_fabg ,_ddaf :=_gee .Pop ();if _ddaf !=nil {return _ddaf ;};if _cec ,_bfe :=_fabg .(*PSReal );_bfe {_ddaf =_gee .Push (MakeReal (_cb .Floor (_cec .Val )));}else if _ebde ,_cef :=_fabg .(*PSInteger );
_cef {_ddaf =_gee .Push (MakeInteger (_ebde .Val ));}else {return ErrTypeCheck ;};return _ddaf ;};func (_ff *PSOperand )add (_aa *PSStack )error {_af ,_cbf :=_aa .Pop ();if _cbf !=nil {return _cbf ;};_fab ,_cbf :=_aa .Pop ();if _cbf !=nil {return _cbf ;
};_gaa ,_gad :=_af .(*PSReal );_bcc ,_dg :=_af .(*PSInteger );if !_gad &&!_dg {return ErrTypeCheck ;};_caee ,_gbeb :=_fab .(*PSReal );_ab ,_ggb :=_fab .(*PSInteger );if !_gbeb &&!_ggb {return ErrTypeCheck ;};if _dg &&_ggb {_gbed :=_bcc .Val +_ab .Val ;
_bg :=_aa .Push (MakeInteger (_gbed ));return _bg ;};var _bge float64 ;if _gad {_bge =_gaa .Val ;}else {_bge =float64 (_bcc .Val );};if _gbeb {_bge +=_caee .Val ;}else {_bge +=float64 (_ab .Val );};_cbf =_aa .Push (MakeReal (_bge ));return _cbf ;};var ErrStackOverflow =_e .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");
func (_fa *PSInteger )String ()string {return _dd .Sprintf ("\u0025\u0064",_fa .Val )};func (_gbcc *PSOperand )dup (_afce *PSStack )error {_dcd ,_aag :=_afce .Pop ();if _aag !=nil {return _aag ;};_aag =_afce .Push (_dcd );if _aag !=nil {return _aag ;};
_aag =_afce .Push (_dcd .Duplicate ());return _aag ;};func (_aeb *PSOperand )Duplicate ()PSObject {_cfb :=*_aeb ;return &_cfb };func (_ecef *PSOperand )ge (_dgc *PSStack )error {_cgf ,_ffce :=_dgc .PopNumberAsFloat64 ();if _ffce !=nil {return _ffce ;};
_agg ,_ffce :=_dgc .PopNumberAsFloat64 ();if _ffce !=nil {return _ffce ;};if _cb .Abs (_agg -_cgf )< _g {_ccc :=_dgc .Push (MakeBool (true ));return _ccc ;}else if _agg > _cgf {_gdf :=_dgc .Push (MakeBool (true ));return _gdf ;}else {_aega :=_dgc .Push (MakeBool (false ));
return _aega ;};};var ErrStackUnderflow =_e .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_gafc *PSOperand )roll (_geb *PSStack )error {_bbc ,_ecgbg :=_geb .Pop ();if _ecgbg !=nil {return _ecgbg ;};_dbeg ,_ecgbg :=_geb .Pop ();
if _ecgbg !=nil {return _ecgbg ;};_abb ,_gbeg :=_bbc .(*PSInteger );if !_gbeg {return ErrTypeCheck ;};_fefa ,_gbeg :=_dbeg .(*PSInteger );if !_gbeg {return ErrTypeCheck ;};if _fefa .Val < 0{return ErrRangeCheck ;};if _fefa .Val ==0||_fefa .Val ==1{return nil ;
};if _fefa .Val > len (*_geb ){return ErrStackUnderflow ;};for _cfdg :=0;_cfdg < _gbf (_abb .Val );_cfdg ++{var _bbge []PSObject ;_bbge =(*_geb )[len (*_geb )-(_fefa .Val ):len (*_geb )];if _abb .Val > 0{_abea :=_bbge [len (_bbge )-1];_bbge =append ([]PSObject {_abea },_bbge [0:len (_bbge )-1]...);
}else {_cbcf :=_bbge [len (_bbge )-_fefa .Val ];_bbge =append (_bbge [1:],_cbcf );};_febb :=append ((*_geb )[0:len (*_geb )-_fefa .Val ],_bbge ...);_geb =&_febb ;};return nil ;};func (_adgf *PSParser )parseBool ()(*PSBoolean ,error ){_ffcd ,_abbc :=_adgf ._decc .Peek (4);
if _abbc !=nil {return MakeBool (false ),_abbc ;};if (len (_ffcd )>=4)&&(string (_ffcd [:4])=="\u0074\u0072\u0075\u0065"){_adgf ._decc .Discard (4);return MakeBool (true ),nil ;};_ffcd ,_abbc =_adgf ._decc .Peek (5);if _abbc !=nil {return MakeBool (false ),_abbc ;
};if (len (_ffcd )>=5)&&(string (_ffcd [:5])=="\u0066\u0061\u006cs\u0065"){_adgf ._decc .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_e .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_aee *PSOperand )ceiling (_faf *PSStack )error {_fbc ,_bbf :=_faf .Pop ();if _bbf !=nil {return _bbf ;};if _ef ,_fcf :=_fbc .(*PSReal );_fcf {_bbf =_faf .Push (MakeReal (_cb .Ceil (_ef .Val )));}else if _ecf ,_aeg :=_fbc .(*PSInteger );
_aeg {_bbf =_faf .Push (MakeInteger (_ecf .Val ));}else {_bbf =ErrTypeCheck ;};return _bbf ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_ccega :=PSReal {};_ccega .Val =val ;return &_ccega };

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_ddc *PSStack )DebugString ()string {_cecd :="\u005b\u0020";for _ ,_cgdb :=range *_ddc {_cecd +=_cgdb .DebugString ();_cecd +="\u0020";};_cecd +="\u005d";return _cecd ;};

// Push pushes an object on top of the stack.
func (_dfg *PSStack )Push (obj PSObject )error {if len (*_dfg )> 100{return ErrStackOverflow ;};*_dfg =append (*_dfg ,obj );return nil ;};func (_abg *PSOperand )idiv (_fefg *PSStack )error {_fadd ,_bfcf :=_fefg .Pop ();if _bfcf !=nil {return _bfcf ;};_bdcd ,_bfcf :=_fefg .Pop ();
if _bfcf !=nil {return _bfcf ;};_ddg ,_cea :=_fadd .(*PSInteger );if !_cea {return ErrTypeCheck ;};if _ddg .Val ==0{return ErrUndefinedResult ;};_bed ,_cea :=_bdcd .(*PSInteger );if !_cea {return ErrTypeCheck ;};_dfa :=_bed .Val /_ddg .Val ;_bfcf =_fefg .Push (MakeInteger (_dfa ));
return _bfcf ;};func (_ddfc *PSOperand )DebugString ()string {return _dd .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_ddfc );};func (_cbe *PSReal )Duplicate ()PSObject {_bd :=PSReal {};_bd .Val =_cbe .Val ;return &_bd };

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_acc :=PSInteger {};_acc .Val =val ;return &_acc };func (_bgg *PSOperand )mod (_aafg *PSStack )error {_bfea ,_baa :=_aafg .Pop ();if _baa !=nil {return _baa ;};_gbb ,_baa :=_aafg .Pop ();if _baa !=nil {return _baa ;
};_dffe ,_gea :=_bfea .(*PSInteger );if !_gea {return ErrTypeCheck ;};if _dffe .Val ==0{return ErrUndefinedResult ;};_bbdf ,_gea :=_gbb .(*PSInteger );if !_gea {return ErrTypeCheck ;};_gfed :=_bbdf .Val %_dffe .Val ;_baa =_aafg .Push (MakeInteger (_gfed ));
return _baa ;};func (_ccce *PSOperand )ifCondition (_dbe *PSStack )error {_fga ,_fece :=_dbe .Pop ();if _fece !=nil {return _fece ;};_ffb ,_fece :=_dbe .Pop ();if _fece !=nil {return _fece ;};_gcc ,_bgf :=_fga .(*PSProgram );if !_bgf {return ErrTypeCheck ;
};_cac ,_bgf :=_ffb .(*PSBoolean );if !_bgf {return ErrTypeCheck ;};if _cac .Val {_eee :=_gcc .Exec (_dbe );return _eee ;};return nil ;};const _g =0.000001;func (_eba *PSOperand )ifelse (_fddab *PSStack )error {_ccb ,_fecf :=_fddab .Pop ();if _fecf !=nil {return _fecf ;
};_fgf ,_fecf :=_fddab .Pop ();if _fecf !=nil {return _fecf ;};_degb ,_fecf :=_fddab .Pop ();if _fecf !=nil {return _fecf ;};_gaf ,_gfce :=_ccb .(*PSProgram );if !_gfce {return ErrTypeCheck ;};_cbfb ,_gfce :=_fgf .(*PSProgram );if !_gfce {return ErrTypeCheck ;
};_egb ,_gfce :=_degb .(*PSBoolean );if !_gfce {return ErrTypeCheck ;};if _egb .Val {_dbg :=_cbfb .Exec (_fddab );return _dbg ;};_fecf =_gaf .Exec (_fddab );return _fecf ;};func (_dadb *PSOperand )exch (_bfaf *PSStack )error {_bgcd ,_cgg :=_bfaf .Pop ();
if _cgg !=nil {return _cgg ;};_fadgb ,_cgg :=_bfaf .Pop ();if _cgg !=nil {return _cgg ;};_cgg =_bfaf .Push (_bgcd );if _cgg !=nil {return _cgg ;};_cgg =_bfaf .Push (_fadgb );return _cgg ;};func (_cbff *PSOperand )index (_bfd *PSStack )error {_aage ,_eda :=_bfd .Pop ();
if _eda !=nil {return _eda ;};_eaa ,_edb :=_aage .(*PSInteger );if !_edb {return ErrTypeCheck ;};if _eaa .Val < 0{return ErrRangeCheck ;};if _eaa .Val > len (*_bfd )-1{return ErrStackUnderflow ;};_gabg :=(*_bfd )[len (*_bfd )-1-_eaa .Val ];_eda =_bfd .Push (_gabg .Duplicate ());
return _eda ;};func (_gff *PSOperand )xor (_dafa *PSStack )error {_cgb ,_aabe :=_dafa .Pop ();if _aabe !=nil {return _aabe ;};_eca ,_aabe :=_dafa .Pop ();if _aabe !=nil {return _aabe ;};if _gebe ,_acf :=_cgb .(*PSBoolean );_acf {_fddb ,_ddb :=_eca .(*PSBoolean );
if !_ddb {return ErrTypeCheck ;};_aabe =_dafa .Push (MakeBool (_gebe .Val !=_fddb .Val ));return _aabe ;};if _gddg ,_cfgd :=_cgb .(*PSInteger );_cfgd {_bab ,_bdee :=_eca .(*PSInteger );if !_bdee {return ErrTypeCheck ;};_aabe =_dafa .Push (MakeInteger (_gddg .Val ^_bab .Val ));
return _aabe ;};return ErrTypeCheck ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_de *PSOperand )Exec (stack *PSStack )error {_cfbd :=ErrUnsupportedOperand ;switch *_de {case "\u0061\u0062\u0073":_cfbd =_de .abs (stack );case "\u0061\u0064\u0064":_cfbd =_de .add (stack );case "\u0061\u006e\u0064":_cfbd =_de .and (stack );case "\u0061\u0074\u0061\u006e":_cfbd =_de .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_cfbd =_de .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_cfbd =_de .ceiling (stack );case "\u0063\u006f\u0070\u0079":_cfbd =_de .copy (stack );case "\u0063\u006f\u0073":_cfbd =_de .cos (stack );
case "\u0063\u0076\u0069":_cfbd =_de .cvi (stack );case "\u0063\u0076\u0072":_cfbd =_de .cvr (stack );case "\u0064\u0069\u0076":_cfbd =_de .div (stack );case "\u0064\u0075\u0070":_cfbd =_de .dup (stack );case "\u0065\u0071":_cfbd =_de .eq (stack );case "\u0065\u0078\u0063\u0068":_cfbd =_de .exch (stack );
case "\u0065\u0078\u0070":_cfbd =_de .exp (stack );case "\u0066\u006c\u006fo\u0072":_cfbd =_de .floor (stack );case "\u0067\u0065":_cfbd =_de .ge (stack );case "\u0067\u0074":_cfbd =_de .gt (stack );case "\u0069\u0064\u0069\u0076":_cfbd =_de .idiv (stack );
case "\u0069\u0066":_cfbd =_de .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_cfbd =_de .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_cfbd =_de .index (stack );case "\u006c\u0065":_cfbd =_de .le (stack );case "\u006c\u006f\u0067":_cfbd =_de .log (stack );
case "\u006c\u006e":_cfbd =_de .ln (stack );case "\u006c\u0074":_cfbd =_de .lt (stack );case "\u006d\u006f\u0064":_cfbd =_de .mod (stack );case "\u006d\u0075\u006c":_cfbd =_de .mul (stack );case "\u006e\u0065":_cfbd =_de .ne (stack );case "\u006e\u0065\u0067":_cfbd =_de .neg (stack );
case "\u006e\u006f\u0074":_cfbd =_de .not (stack );case "\u006f\u0072":_cfbd =_de .or (stack );case "\u0070\u006f\u0070":_cfbd =_de .pop (stack );case "\u0072\u006f\u0075n\u0064":_cfbd =_de .round (stack );case "\u0072\u006f\u006c\u006c":_cfbd =_de .roll (stack );
case "\u0073\u0069\u006e":_cfbd =_de .sin (stack );case "\u0073\u0071\u0072\u0074":_cfbd =_de .sqrt (stack );case "\u0073\u0075\u0062":_cfbd =_de .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_cfbd =_de .truncate (stack );case "\u0078\u006f\u0072":_cfbd =_de .xor (stack );
};return _cfbd ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// Exec executes the program, typically leaving output values on the stack.
func (_fed *PSProgram )Exec (stack *PSStack )error {for _ ,_ccg :=range *_fed {var _ccgf error ;switch _bac :=_ccg .(type ){case *PSInteger :_ed :=_bac ;_ccgf =stack .Push (_ed );case *PSReal :_caef :=_bac ;_ccgf =stack .Push (_caef );case *PSBoolean :_cca :=_bac ;
_ccgf =stack .Push (_cca );case *PSProgram :_ce :=_bac ;_ccgf =stack .Push (_ce );case *PSOperand :_df :=_bac ;_ccgf =_df .Exec (stack );default:return ErrTypeCheck ;};if _ccgf !=nil {return _ccgf ;};};return nil ;};func (_cae *PSInteger )DebugString ()string {return _dd .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_cae .Val );
};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_bga *PSOperand )pop (_feab *PSStack )error {_ ,_eae :=_feab .Pop ();if _eae !=nil {return _eae ;};return nil ;};func (_aegd *PSOperand )not (_dbcg *PSStack )error {_fbg ,_age :=_dbcg .Pop ();if _age !=nil {return _age ;};if _eead ,_cgge :=_fbg .(*PSBoolean );
_cgge {_age =_dbcg .Push (MakeBool (!_eead .Val ));return _age ;}else if _gcb ,_bdfa :=_fbg .(*PSInteger );_bdfa {_age =_dbcg .Push (MakeInteger (^_gcb .Val ));return _age ;}else {return ErrTypeCheck ;};};func (_ge *PSProgram )String ()string {_dad :="\u007b\u0020";
for _ ,_gb :=range *_ge {_dad +=_gb .String ();_dad +="\u0020";};_dad +="\u007d";return _dad ;};

// Parse parses the postscript and store as a program that can be executed.
func (_gabb *PSParser )Parse ()(*PSProgram ,error ){_gabb .skipSpaces ();_ggef ,_cgdf :=_gabb ._decc .Peek (2);if _cgdf !=nil {return nil ,_cgdf ;};if _ggef [0]!='{'{return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_fgea ,_cgdf :=_gabb .parseFunction ();if _cgdf !=nil &&_cgdf !=_ea .EOF {return nil ,_cgdf ;};return _fgea ,_cgdf ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_dce *PSParser )parseOperand ()(*PSOperand ,error ){var _cbeed []byte ;for {_cbef ,_gagg :=_dce ._decc .Peek (1);if _gagg !=nil {if _gagg ==_ea .EOF {break ;};return nil ,_gagg ;};if _ec .IsDelimiter (_cbef [0]){break ;
};if _ec .IsWhiteSpace (_cbef [0]){break ;};_gfbd ,_ :=_dce ._decc .ReadByte ();_cbeed =append (_cbeed ,_gfbd );};if len (_cbeed )==0{return nil ,_e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_cbeed )),nil ;};func (_gafcd *PSOperand )sub (_fgb *PSStack )error {_bggd ,_eeeb :=_fgb .Pop ();if _eeeb !=nil {return _eeeb ;};_bbab ,_eeeb :=_fgb .Pop ();if _eeeb !=nil {return _eeeb ;};_bgcde ,_aabf :=_bggd .(*PSReal );
_cceg ,_febe :=_bggd .(*PSInteger );if !_aabf &&!_febe {return ErrTypeCheck ;};_egf ,_gbdb :=_bbab .(*PSReal );_agec ,_gec :=_bbab .(*PSInteger );if !_gbdb &&!_gec {return ErrTypeCheck ;};if _febe &&_gec {_dgde :=_agec .Val -_cceg .Val ;_aba :=_fgb .Push (MakeInteger (_dgde ));
return _aba ;};var _daf float64 =0;if _gbdb {_daf =_egf .Val ;}else {_daf =float64 (_agec .Val );};if _aabf {_daf -=_bgcde .Val ;}else {_daf -=float64 (_cceg .Val );};_eeeb =_fgb .Push (MakeReal (_daf ));return _eeeb ;};

// Append appends an object to the PSProgram.
func (_ecd *PSProgram )Append (obj PSObject ){*_ecd =append (*_ecd ,obj )};func (_dbea *PSOperand )sqrt (_gcd *PSStack )error {_deb ,_abd :=_gcd .PopNumberAsFloat64 ();if _abd !=nil {return _abd ;};if _deb < 0{return ErrRangeCheck ;};_abbg :=_cb .Sqrt (_deb );
_abd =_gcd .Push (MakeReal (_abbg ));return _abd ;};var ErrTypeCheck =_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_efb *PSOperand )cvr (_cda *PSStack )error {_bbd ,_cfbdf :=_cda .Pop ();if _cfbdf !=nil {return _cfbdf ;
};if _aac ,_bde :=_bbd .(*PSReal );_bde {_cfbdf =_cda .Push (MakeReal (_aac .Val ));}else if _bfa ,_gab :=_bbd .(*PSInteger );_gab {_cfbdf =_cda .Push (MakeReal (float64 (_bfa .Val )));}else {return ErrTypeCheck ;};return _cfbdf ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _cc []float64 ;for _ ,_db :=range objects {if _ecg ,_dda :=_db .(*PSInteger );_dda {_cc =append (_cc ,float64 (_ecg .Val ));}else if _dbc ,_ae :=_db .(*PSReal );_ae {_cc =append (_cc ,_dbc .Val );
}else {return nil ,ErrTypeCheck ;};};return _cc ,nil ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_aad *PSStack )PopInteger ()(int ,error ){_beb ,_abbe :=_aad .Pop ();if _abbe !=nil {return 0,_abbe ;};if _cfe ,_fcg :=_beb .(*PSInteger );_fcg {return _cfe .Val ,nil ;};return 0,ErrTypeCheck ;};func (_cfa *PSOperand )ne (_adg *PSStack )error {_dbeb :=_cfa .eq (_adg );
if _dbeb !=nil {return _dbeb ;};_dbeb =_cfa .not (_adg );return _dbeb ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_dabb *PSOperand )bitshift (_daa *PSStack )error {_bdae ,_dbd :=_daa .PopInteger ();if _dbd !=nil {return _dbd ;};_aab ,_dbd :=_daa .PopInteger ();if _dbd !=nil {return _dbd ;};var _bdb int ;if _bdae >=0{_bdb =_aab <<uint (_bdae );
}else {_bdb =_aab >>uint (-_bdae );};_dbd =_daa .Push (MakeInteger (_bdb ));return _dbd ;};var ErrUndefinedResult =_e .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_ggf *PSOperand )and (_fad *PSStack )error {_cfc ,_fef :=_fad .Pop ();
if _fef !=nil {return _fef ;};_gbc ,_fef :=_fad .Pop ();if _fef !=nil {return _fef ;};if _edf ,_fecb :=_cfc .(*PSBoolean );_fecb {_bag ,_ggfd :=_gbc .(*PSBoolean );if !_ggfd {return ErrTypeCheck ;};_fef =_fad .Push (MakeBool (_edf .Val &&_bag .Val ));return _fef ;
};if _faa ,_fg :=_cfc .(*PSInteger );_fg {_fc ,_bgc :=_gbc .(*PSInteger );if !_bgc {return ErrTypeCheck ;};_fef =_fad .Push (MakeInteger (_faa .Val &_fc .Val ));return _fef ;};return ErrTypeCheck ;};func (_aef *PSOperand )or (_eada *PSStack )error {_fdc ,_ccf :=_eada .Pop ();
if _ccf !=nil {return _ccf ;};_fbb ,_ccf :=_eada .Pop ();if _ccf !=nil {return _ccf ;};if _bdbd ,_dedc :=_fdc .(*PSBoolean );_dedc {_fgfd ,_gfg :=_fbb .(*PSBoolean );if !_gfg {return ErrTypeCheck ;};_ccf =_eada .Push (MakeBool (_bdbd .Val ||_fgfd .Val ));
return _ccf ;};if _fgg ,_agc :=_fdc .(*PSInteger );_agc {_bdab ,_cdfg :=_fbb .(*PSInteger );if !_cdfg {return ErrTypeCheck ;};_ccf =_eada .Push (MakeInteger (_fgg .Val |_bdab .Val ));return _ccf ;};return ErrTypeCheck ;};func (_acfd *PSParser )parseFunction ()(*PSProgram ,error ){_cge ,_ :=_acfd ._decc .ReadByte ();
if _cge !='{'{return nil ,_e .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_cee :=NewPSProgram ();for {_acfd .skipSpaces ();_adb ,_ggc :=_acfd ._decc .Peek (2);if _ggc !=nil {if _ggc ==_ea .EOF {break ;
};return nil ,_ggc ;};_ddf .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_adb ));if _adb [0]=='}'{_ddf .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_acfd ._decc .ReadByte ();
break ;}else if _adb [0]=='{'{_ddf .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_fafc ,_deaf :=_acfd .parseFunction ();if _deaf !=nil {return nil ,_deaf ;};_cee .Append (_fafc );}else if _ec .IsDecimalDigit (_adb [0])||(_adb [0]=='-'&&_ec .IsDecimalDigit (_adb [1])){_ddf .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_cgbf ,_bcea :=_acfd .parseNumber ();if _bcea !=nil {return nil ,_bcea ;};_cee .Append (_cgbf );}else {_ddf .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_adb ,_ =_acfd ._decc .Peek (5);_gegb :=string (_adb );
_ddf .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_gegb );if (len (_gegb )> 4)&&(_gegb [:5]=="\u0066\u0061\u006cs\u0065"){_ccda ,_fbcf :=_acfd .parseBool ();if _fbcf !=nil {return nil ,_fbcf ;};_cee .Append (_ccda );
}else if (len (_gegb )> 3)&&(_gegb [:4]=="\u0074\u0072\u0075\u0065"){_cgce ,_eab :=_acfd .parseBool ();if _eab !=nil {return nil ,_eab ;};_cee .Append (_cgce );}else {_cgbg ,_ecec :=_acfd .parseOperand ();if _ecec !=nil {return nil ,_ecec ;};_cee .Append (_cgbg );
};};};return _cee ,nil ;};func (_edbb *PSParser )parseNumber ()(PSObject ,error ){_gafcg ,_bfce :=_ec .ParseNumber (_edbb ._decc );if _bfce !=nil {return nil ,_bfce ;};switch _bdbec :=_gafcg .(type ){case *_ec .PdfObjectFloat :return MakeReal (float64 (*_bdbec )),nil ;
case *_ec .PdfObjectInteger :return MakeInteger (int (*_bdbec )),nil ;};return nil ,_dd .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_gafcg );};func (_bea *PSOperand )ln (_dea *PSStack )error {_def ,_defg :=_dea .PopNumberAsFloat64 ();
if _defg !=nil {return _defg ;};_fged :=_cb .Log (_def );_defg =_dea .Push (MakeReal (_fged ));return _defg ;};func (_cg *PSReal )DebugString ()string {return _dd .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_cg .Val );};func (_afc *PSOperand )copy (_bfc *PSStack )error {_dgd ,_faab :=_bfc .PopInteger ();
if _faab !=nil {return _faab ;};if _dgd < 0{return ErrRangeCheck ;};if _dgd > len (*_bfc ){return ErrRangeCheck ;};*_bfc =append (*_bfc ,(*_bfc )[len (*_bfc )-_dgd :]...);return nil ;};func (_egg *PSOperand )sin (_gdae *PSStack )error {_abf ,_fcff :=_gdae .PopNumberAsFloat64 ();
if _fcff !=nil {return _fcff ;};_bagf :=_cb .Sin (_abf *_cb .Pi /180.0);_fcff =_gdae .Push (MakeReal (_bagf ));return _fcff ;};func (_bbfd *PSOperand )le (_gdd *PSStack )error {_bce ,_ddab :=_gdd .PopNumberAsFloat64 ();if _ddab !=nil {return _ddab ;};_fafa ,_ddab :=_gdd .PopNumberAsFloat64 ();
if _ddab !=nil {return _ddab ;};if _cb .Abs (_fafa -_bce )< _g {_agd :=_gdd .Push (MakeBool (true ));return _agd ;}else if _fafa < _bce {_fda :=_gdd .Push (MakeBool (true ));return _fda ;}else {_acg :=_gdd .Push (MakeBool (false ));return _acg ;};};

// PSParser is a basic Postscript parser.
type PSParser struct{_decc *_d .Reader };

// Empty empties the stack.
func (_geeb *PSStack )Empty (){*_geeb =[]PSObject {}};func (_bec *PSOperand )lt (_bee *PSStack )error {_aeed ,_gag :=_bee .PopNumberAsFloat64 ();if _gag !=nil {return _gag ;};_fee ,_gag :=_bee .PopNumberAsFloat64 ();if _gag !=nil {return _gag ;};if _cb .Abs (_fee -_aeed )< _g {_cefa :=_bee .Push (MakeBool (false ));
return _cefa ;}else if _fee < _aeed {_dbce :=_bee .Push (MakeBool (true ));return _dbce ;}else {_gadf :=_bee .Push (MakeBool (false ));return _gadf ;};};func (_ccd *PSOperand )cvi (_geg *PSStack )error {_dgb ,_ecgb :=_geg .Pop ();if _ecgb !=nil {return _ecgb ;
};if _dgg ,_gge :=_dgb .(*PSReal );_gge {_bdcf :=int (_dgg .Val );_ecgb =_geg .Push (MakeInteger (_bdcf ));}else if _ee ,_dgf :=_dgb .(*PSInteger );_dgf {_fac :=_ee .Val ;_ecgb =_geg .Push (MakeInteger (_fac ));}else {return ErrTypeCheck ;};return _ecgb ;
};func (_fb *PSProgram )DebugString ()string {_be :="\u007b\u0020";for _ ,_gc :=range *_fb {_be +=_gc .DebugString ();_be +="\u0020";};_be +="\u007d";return _be ;};func (_abeb *PSOperand )exp (_dfca *PSStack )error {_bgcf ,_ebd :=_dfca .PopNumberAsFloat64 ();
if _ebd !=nil {return _ebd ;};_fdda ,_ebd :=_dfca .PopNumberAsFloat64 ();if _ebd !=nil {return _ebd ;};if _cb .Abs (_bgcf )< 1&&_fdda < 0{return ErrUndefinedResult ;};_dff :=_cb .Pow (_fdda ,_bgcf );_ebd =_dfca .Push (MakeReal (_dff ));return _ebd ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_cefg :=PSBoolean {};_cefg .Val =val ;return &_cefg };func (_dbgc *PSOperand )truncate (_cbee *PSStack )error {_bcdd ,_dcc :=_cbee .Pop ();if _dcc !=nil {return _dcc ;};if _cccf ,_aegc :=_bcdd .(*PSReal );_aegc {_gage :=int (_cccf .Val );
_dcc =_cbee .Push (MakeReal (float64 (_gage )));}else if _fbe ,_caec :=_bcdd .(*PSInteger );_caec {_dcc =_cbee .Push (MakeInteger (_fbe .Val ));}else {return ErrTypeCheck ;};return _dcc ;};var ErrRangeCheck =_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");
func (_gbe *PSOperand )String ()string {return string (*_gbe )};func (_afe *PSOperand )atan (_dfc *PSStack )error {_ecgf ,_ag :=_dfc .PopNumberAsFloat64 ();if _ag !=nil {return _ag ;};_eac ,_ag :=_dfc .PopNumberAsFloat64 ();if _ag !=nil {return _ag ;};
if _ecgf ==0{var _fd error ;if _eac < 0{_fd =_dfc .Push (MakeReal (270));}else {_fd =_dfc .Push (MakeReal (90));};return _fd ;};_bf :=_eac /_ecgf ;_aaf :=_cb .Atan (_bf )*180/_cb .Pi ;_ag =_dfc .Push (MakeReal (_aaf ));return _ag ;};func (_ede *PSOperand )abs (_fec *PSStack )error {_dab ,_cbb :=_fec .Pop ();
if _cbb !=nil {return _cbb ;};if _fea ,_ga :=_dab .(*PSReal );_ga {_gd :=_fea .Val ;if _gd < 0{_cbb =_fec .Push (MakeReal (-_gd ));}else {_cbb =_fec .Push (MakeReal (_gd ));};}else if _bc ,_ecc :=_dab .(*PSInteger );_ecc {_cdf :=_bc .Val ;if _cdf < 0{_cbb =_fec .Push (MakeInteger (-_cdf ));
}else {_cbb =_fec .Push (MakeInteger (_cdf ));};}else {return ErrTypeCheck ;};return _cbb ;};

// Pop pops an object from the top of the stack.
func (_dfb *PSStack )Pop ()(PSObject ,error ){if len (*_dfb )< 1{return nil ,ErrStackUnderflow ;};_gdfd :=(*_dfb )[len (*_dfb )-1];*_dfb =(*_dfb )[0:len (*_dfb )-1];return _gdfd ,nil ;};func (_bddb *PSOperand )round (_gfb *PSStack )error {_gagf ,_eef :=_gfb .Pop ();
if _eef !=nil {return _eef ;};if _ggeg ,_daac :=_gagf .(*PSReal );_daac {_eef =_gfb .Push (MakeReal (_cb .Floor (_ggeg .Val +0.5)));}else if _cgc ,_bbg :=_gagf .(*PSInteger );_bbg {_eef =_gfb .Push (MakeInteger (_cgc .Val ));}else {return ErrTypeCheck ;
};return _eef ;};func (_cdaa *PSOperand )gt (_bca *PSStack )error {_gcg ,_bdf :=_bca .PopNumberAsFloat64 ();if _bdf !=nil {return _bdf ;};_cfg ,_bdf :=_bca .PopNumberAsFloat64 ();if _bdf !=nil {return _bdf ;};if _cb .Abs (_cfg -_gcg )< _g {_bba :=_bca .Push (MakeBool (false ));
return _bba ;}else if _cfg > _gcg {_efbf :=_bca .Push (MakeBool (true ));return _efbf ;}else {_aagb :=_bca .Push (MakeBool (false ));return _aagb ;};};func _gbf (_gbcd int )int {if _gbcd < 0{return -_gbcd ;};return _gbcd ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_f *PSProgram ;};func (_bdbe *PSOperand )mul (_bbfdf *PSStack )error {_bdd ,_bbb :=_bbfdf .Pop ();if _bbb !=nil {return _bbb ;};_degc ,_bbb :=_bbfdf .Pop ();if _bbb !=nil {return _bbb ;};_cce ,_fgcc :=_bdd .(*PSReal );
_afg ,_dec :=_bdd .(*PSInteger );if !_fgcc &&!_dec {return ErrTypeCheck ;};_aabb ,_gdg :=_degc .(*PSReal );_beee ,_ggbf :=_degc .(*PSInteger );if !_gdg &&!_ggbf {return ErrTypeCheck ;};if _dec &&_ggbf {_bef :=_afg .Val *_beee .Val ;_eeb :=_bbfdf .Push (MakeInteger (_bef ));
return _eeb ;};var _gcf float64 ;if _fgcc {_gcf =_cce .Val ;}else {_gcf =float64 (_afg .Val );};if _gdg {_gcf *=_aabb .Val ;}else {_gcf *=float64 (_beee .Val );};_bbb =_bbfdf .Push (MakeReal (_gcf ));return _bbb ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_ega :=PSParser {};_ddff :=_a .NewBuffer (content );_ega ._decc =_d .NewReader (_ddff );return &_ega ;};func (_fadg *PSOperand )div (_dc *PSStack )error {_gadb ,_gce :=_dc .Pop ();if _gce !=nil {return _gce ;
};_ebg ,_gce :=_dc .Pop ();if _gce !=nil {return _gce ;};_degf ,_edd :=_gadb .(*PSReal );_cgd ,_eea :=_gadb .(*PSInteger );if !_edd &&!_eea {return ErrTypeCheck ;};if _edd &&_degf .Val ==0{return ErrUndefinedResult ;};if _eea &&_cgd .Val ==0{return ErrUndefinedResult ;
};_gegd ,_ffc :=_ebg .(*PSReal );_gbd ,_gbedd :=_ebg .(*PSInteger );if !_ffc &&!_gbedd {return ErrTypeCheck ;};var _dde float64 ;if _ffc {_dde =_gegd .Val ;}else {_dde =float64 (_gbd .Val );};if _edd {_dde /=_degf .Val ;}else {_dde /=float64 (_cgd .Val );
};_gce =_dc .Push (MakeReal (_dde ));return _gce ;};func (_fbd *PSOperand )log (_dac *PSStack )error {_bcd ,_ded :=_dac .PopNumberAsFloat64 ();if _ded !=nil {return _ded ;};_gfe :=_cb .Log10 (_bcd );_ded =_dac .Push (MakeReal (_gfe ));return _ded ;};func (_fdd *PSOperand )eq (_ead *PSStack )error {_cfbb ,_cdd :=_ead .Pop ();
if _cdd !=nil {return _cdd ;};_gae ,_cdd :=_ead .Pop ();if _cdd !=nil {return _cdd ;};_ece ,_efbg :=_cfbb .(*PSBoolean );_eec ,_fgd :=_gae .(*PSBoolean );if _efbg ||_fgd {var _gde error ;if _efbg &&_fgd {_gde =_ead .Push (MakeBool (_ece .Val ==_eec .Val ));
}else {_gde =_ead .Push (MakeBool (false ));};return _gde ;};var _adec float64 ;var _gfdd float64 ;if _bdaf ,_edc :=_cfbb .(*PSInteger );_edc {_adec =float64 (_bdaf .Val );}else if _gfc ,_fgc :=_cfbb .(*PSReal );_fgc {_adec =_gfc .Val ;}else {return ErrTypeCheck ;
};if _cbfg ,_fge :=_gae .(*PSInteger );_fge {_gfdd =float64 (_cbfg .Val );}else if _dfcf ,_fddg :=_gae .(*PSReal );_fddg {_gfdd =_dfcf .Val ;}else {return ErrTypeCheck ;};if _cb .Abs (_gfdd -_adec )< _g {_cdd =_ead .Push (MakeBool (true ));}else {_cdd =_ead .Push (MakeBool (false ));
};return _cdd ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_cd *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_fe :=range objects {_ca :=_cd .Stack .Push (_fe );if _ca !=nil {return nil ,_ca ;};};_cdc :=_cd ._f .Exec (_cd .Stack );if _cdc !=nil {_ddf .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cdc );
return nil ,_cdc ;};_adf :=[]PSObject (*_cd .Stack );_cd .Stack .Empty ();return _adf ,nil ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_decd *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_agb ,_cdec :=_decd .Pop ();if _cdec !=nil {return 0,_cdec ;};if _afd ,_bddd :=_agb .(*PSReal );_bddd {return _afd .Val ,nil ;}else if _afgb ,_bfcg :=_agb .(*PSInteger );_bfcg {return float64 (_afgb .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_efc *PSParser )skipSpaces ()(int ,error ){_aea :=0;for {_cbd ,_bcg :=_efc ._decc .Peek (1);if _bcg !=nil {return 0,_bcg ;};if _ec .IsWhiteSpace (_cbd [0]){_efc ._decc .ReadByte ();_aea ++;}else {break ;};};return _aea ,nil ;
};func (_dfd *PSOperand )cos (_gfd *PSStack )error {_abe ,_ade :=_gfd .PopNumberAsFloat64 ();if _ade !=nil {return _ade ;};_deg :=_cb .Cos (_abe *_cb .Pi /180.0);_ade =_gfd .Push (MakeReal (_deg ));return _ade ;};func (_bb *PSInteger )Duplicate ()PSObject {_eb :=PSInteger {};
_eb .Val =_bb .Val ;return &_eb };

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};