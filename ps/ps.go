//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_aa "bufio";_a "bytes";_e "errors";_ef "fmt";_eb "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/core";_c "io";_cd "math";);func (_dd *PSInteger )DebugString ()string {return _ef .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_dd .Val );
};

// Parse parses the postscript and store as a program that can be executed.
func (_dbfg *PSParser )Parse ()(*PSProgram ,error ){_dbfg .skipSpaces ();_bded ,_gag :=_dbfg ._bcd .Peek (2);if _gag !=nil {return nil ,_gag ;};if _bded [0]!='{'{return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_gcgd ,_gag :=_dbfg .parseFunction ();if _gag !=nil &&_gag !=_c .EOF {return nil ,_gag ;};return _gcgd ,_gag ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_fag :=PSReal {};_fag .Val =val ;return &_fag };func (_bbc *PSOperand )ifelse (_egdc *PSStack )error {_fge ,_bbbe :=_egdc .Pop ();if _bbbe !=nil {return _bbbe ;};_eac ,_bbbe :=_egdc .Pop ();if _bbbe !=nil {return _bbbe ;
};_dddf ,_bbbe :=_egdc .Pop ();if _bbbe !=nil {return _bbbe ;};_bcc ,_ega :=_fge .(*PSProgram );if !_ega {return ErrTypeCheck ;};_ccaa ,_ega :=_eac .(*PSProgram );if !_ega {return ErrTypeCheck ;};_aedg ,_ega :=_dddf .(*PSBoolean );if !_ega {return ErrTypeCheck ;
};if _aedg .Val {_cb :=_ccaa .Exec (_egdc );return _cb ;};_bbbe =_bcc .Exec (_egdc );return _bbbe ;};func (_effd *PSOperand )cvr (_aadf *PSStack )error {_ab ,_eec :=_aadf .Pop ();if _eec !=nil {return _eec ;};if _bgfc ,_ecd :=_ab .(*PSReal );_ecd {_eec =_aadf .Push (MakeReal (_bgfc .Val ));
}else if _bde ,_adge :=_ab .(*PSInteger );_adge {_eec =_aadf .Push (MakeReal (float64 (_bde .Val )));}else {return ErrTypeCheck ;};return _eec ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_bb *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_gf :=range objects {_gb :=_bb .Stack .Push (_gf );if _gb !=nil {return nil ,_gb ;};};_fg :=_bb ._g .Exec (_bb .Stack );if _fg !=nil {_eb .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fg );
return nil ,_fg ;};_cg :=[]PSObject (*_bb .Stack );_bb .Stack .Empty ();return _cg ,nil ;};var ErrUnsupportedOperand =_e .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_cc *PSReal )DebugString ()string {return _ef .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_cc .Val );
};func (_eedb *PSOperand )neg (_dfg *PSStack )error {_aec ,_eeee :=_dfg .Pop ();if _eeee !=nil {return _eeee ;};if _fdg ,_egc :=_aec .(*PSReal );_egc {_eeee =_dfg .Push (MakeReal (-_fdg .Val ));return _eeee ;}else if _eafc ,_dfba :=_aec .(*PSInteger );
_dfba {_eeee =_dfg .Push (MakeInteger (-_eafc .Val ));return _eeee ;}else {return ErrTypeCheck ;};};var ErrTypeCheck =_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");

// Append appends an object to the PSProgram.
func (_ae *PSProgram )Append (obj PSObject ){*_ae =append (*_ae ,obj )};func (_fabc *PSOperand )copy (_dbd *PSStack )error {_cec ,_fde :=_dbd .PopInteger ();if _fde !=nil {return _fde ;};if _cec < 0{return ErrRangeCheck ;};if _cec > len (*_dbd ){return ErrRangeCheck ;
};*_dbd =append (*_dbd ,(*_dbd )[len (*_dbd )-_cec :]...);return nil ;};func (_dae *PSOperand )div (_gfb *PSStack )error {_cdgd ,_gdd :=_gfb .Pop ();if _gdd !=nil {return _gdd ;};_cab ,_gdd :=_gfb .Pop ();if _gdd !=nil {return _gdd ;};_ff ,_cag :=_cdgd .(*PSReal );
_fdeb ,_ebc :=_cdgd .(*PSInteger );if !_cag &&!_ebc {return ErrTypeCheck ;};if _cag &&_ff .Val ==0{return ErrUndefinedResult ;};if _ebc &&_fdeb .Val ==0{return ErrUndefinedResult ;};_adfd ,_efbb :=_cab .(*PSReal );_cfb ,_caf :=_cab .(*PSInteger );if !_efbb &&!_caf {return ErrTypeCheck ;
};var _gbge float64 ;if _efbb {_gbge =_adfd .Val ;}else {_gbge =float64 (_cfb .Val );};if _cag {_gbge /=_ff .Val ;}else {_gbge /=float64 (_fdeb .Val );};_gdd =_gfb .Push (MakeReal (_gbge ));return _gdd ;};func (_bgb *PSBoolean )Duplicate ()PSObject {_ed :=PSBoolean {};
_ed .Val =_bgb .Val ;return &_ed };

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_g *PSProgram ;};

// Pop pops an object from the top of the stack.
func (_gfda *PSStack )Pop ()(PSObject ,error ){if len (*_gfda )< 1{return nil ,ErrStackUnderflow ;};_dfd :=(*_gfda )[len (*_gfda )-1];*_gfda =(*_gfda )[0:len (*_gfda )-1];return _dfd ,nil ;};func (_bgff *PSOperand )eq (_cca *PSStack )error {_eda ,_cga :=_cca .Pop ();
if _cga !=nil {return _cga ;};_ffc ,_cga :=_cca .Pop ();if _cga !=nil {return _cga ;};_dce ,_fbgg :=_eda .(*PSBoolean );_ceca ,_gfd :=_ffc .(*PSBoolean );if _fbgg ||_gfd {var _fgdb error ;if _fbgg &&_gfd {_fgdb =_cca .Push (MakeBool (_dce .Val ==_ceca .Val ));
}else {_fgdb =_cca .Push (MakeBool (false ));};return _fgdb ;};var _bga float64 ;var _aee float64 ;if _ffcc ,_acb :=_eda .(*PSInteger );_acb {_bga =float64 (_ffcc .Val );}else if _acg ,_badf :=_eda .(*PSReal );_badf {_bga =_acg .Val ;}else {return ErrTypeCheck ;
};if _fga ,_afaf :=_ffc .(*PSInteger );_afaf {_aee =float64 (_fga .Val );}else if _gfbd ,_ebaa :=_ffc .(*PSReal );_ebaa {_aee =_gfbd .Val ;}else {return ErrTypeCheck ;};if _cd .Abs (_aee -_bga )< _f {_cga =_cca .Push (MakeBool (true ));}else {_cga =_cca .Push (MakeBool (false ));
};return _cga ;};func (_ebcb *PSOperand )not (_bbca *PSStack )error {_faa ,_dcfe :=_bbca .Pop ();if _dcfe !=nil {return _dcfe ;};if _egb ,_fdc :=_faa .(*PSBoolean );_fdc {_dcfe =_bbca .Push (MakeBool (!_egb .Val ));return _dcfe ;}else if _egda ,_ceac :=_faa .(*PSInteger );
_ceac {_dcfe =_bbca .Push (MakeInteger (^_egda .Val ));return _dcfe ;}else {return ErrTypeCheck ;};};func (_befa *PSOperand )sub (_ace *PSStack )error {_feb ,_aff :=_ace .Pop ();if _aff !=nil {return _aff ;};_bab ,_aff :=_ace .Pop ();if _aff !=nil {return _aff ;
};_aebe ,_age :=_feb .(*PSReal );_gcg ,_effe :=_feb .(*PSInteger );if !_age &&!_effe {return ErrTypeCheck ;};_cda ,_cedfc :=_bab .(*PSReal );_bgg ,_eedda :=_bab .(*PSInteger );if !_cedfc &&!_eedda {return ErrTypeCheck ;};if _effe &&_eedda {_gca :=_bgg .Val -_gcg .Val ;
_ecfc :=_ace .Push (MakeInteger (_gca ));return _ecfc ;};var _gfc float64 =0;if _cedfc {_gfc =_cda .Val ;}else {_gfc =float64 (_bgg .Val );};if _age {_gfc -=_aebe .Val ;}else {_gfc -=float64 (_gcg .Val );};_aff =_ace .Push (MakeReal (_gfc ));return _aff ;
};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// Empty empties the stack.
func (_bffc *PSStack )Empty (){*_bffc =[]PSObject {}};func (_gdfe *PSParser )parseOperand ()(*PSOperand ,error ){var _fbd []byte ;for {_efafc ,_ege :=_gdfe ._bcd .Peek (1);if _ege !=nil {if _ege ==_c .EOF {break ;};return nil ,_ege ;};if _b .IsDelimiter (_efafc [0]){break ;
};if _b .IsWhiteSpace (_efafc [0]){break ;};_ddba ,_ :=_gdfe ._bcd .ReadByte ();_fbd =append (_fbd ,_ddba );};if len (_fbd )==0{return nil ,_e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_fbd )),nil ;};func (_eafb *PSOperand )sqrt (_cff *PSStack )error {_gbd ,_bef :=_cff .PopNumberAsFloat64 ();if _bef !=nil {return _bef ;};if _gbd < 0{return ErrRangeCheck ;};_ecbe :=_cd .Sqrt (_gbd );_bef =_cff .Push (MakeReal (_ecbe ));
return _bef ;};func (_bbe *PSOperand )abs (_bbed *PSStack )error {_dec ,_fab :=_bbed .Pop ();if _fab !=nil {return _fab ;};if _efcd ,_fc :=_dec .(*PSReal );_fc {_efde :=_efcd .Val ;if _efde < 0{_fab =_bbed .Push (MakeReal (-_efde ));}else {_fab =_bbed .Push (MakeReal (_efde ));
};}else if _dcf ,_efab :=_dec .(*PSInteger );_efab {_ee :=_dcf .Val ;if _ee < 0{_fab =_bbed .Push (MakeInteger (-_ee ));}else {_fab =_bbed .Push (MakeInteger (_ee ));};}else {return ErrTypeCheck ;};return _fab ;};func (_cegc *PSOperand )log (_daa *PSStack )error {_begc ,_cdb :=_daa .PopNumberAsFloat64 ();
if _cdb !=nil {return _cdb ;};_cee :=_cd .Log10 (_begc );_cdb =_daa .Push (MakeReal (_cee ));return _cdb ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_ga *PSOperand )floor (_gbaf *PSStack )error {_ddb ,_dbdb :=_gbaf .Pop ();if _dbdb !=nil {return _dbdb ;};if _faf ,_cedf :=_ddb .(*PSReal );_cedf {_dbdb =_gbaf .Push (MakeReal (_cd .Floor (_faf .Val )));}else if _bgbc ,_cgad :=_ddb .(*PSInteger );
_cgad {_dbdb =_gbaf .Push (MakeInteger (_bgbc .Val ));}else {return ErrTypeCheck ;};return _dbdb ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_dedc :=PSInteger {};_dedc .Val =val ;return &_dedc };

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ec :=&PSExecutor {};_ec .Stack =NewPSStack ();_ec ._g =program ;return _ec ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_acgc *PSParser )parseFunction ()(*PSProgram ,error ){_dgaf ,_ :=_acgc ._bcd .ReadByte ();if _dgaf !='{'{return nil ,_e .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_aede :=NewPSProgram ();
for {_acgc .skipSpaces ();_bcb ,_cfdg :=_acgc ._bcd .Peek (2);if _cfdg !=nil {if _cfdg ==_c .EOF {break ;};return nil ,_cfdg ;};_eb .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_bcb ));if _bcb [0]=='}'{_eb .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
_acgc ._bcd .ReadByte ();break ;}else if _bcb [0]=='{'{_eb .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_daf ,_ffa :=_acgc .parseFunction ();if _ffa !=nil {return nil ,_ffa ;};_aede .Append (_daf );}else if _b .IsDecimalDigit (_bcb [0])||(_bcb [0]=='-'&&_b .IsDecimalDigit (_bcb [1])){_eb .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_agf ,_acd :=_acgc .parseNumber ();if _acd !=nil {return nil ,_acd ;};_aede .Append (_agf );}else {_eb .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_bcb ,_ =_acgc ._bcd .Peek (5);_egdde :=string (_bcb );
_eb .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_egdde );if (len (_egdde )> 4)&&(_egdde [:5]=="\u0066\u0061\u006cs\u0065"){_bae ,_acgf :=_acgc .parseBool ();if _acgf !=nil {return nil ,_acgf ;};_aede .Append (_bae );
}else if (len (_egdde )> 3)&&(_egdde [:4]=="\u0074\u0072\u0075\u0065"){_gfe ,_eedg :=_acgc .parseBool ();if _eedg !=nil {return nil ,_eedg ;};_aede .Append (_gfe );}else {_faff ,_gdgf :=_acgc .parseOperand ();if _gdgf !=nil {return nil ,_gdgf ;};_aede .Append (_faff );
};};};return _aede ,nil ;};func (_bbd *PSOperand )cos (_ge *PSStack )error {_fad ,_be :=_ge .PopNumberAsFloat64 ();if _be !=nil {return _be ;};_dge :=_cd .Cos (_fad *_cd .Pi /180.0);_be =_ge .Push (MakeReal (_dge ));return _be ;};var ErrRangeCheck =_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");
const _f =0.000001;

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_agad :=PSBoolean {};_agad .Val =val ;return &_agad };func (_cddg *PSOperand )mul (_ecf *PSStack )error {_afb ,_eee :=_ecf .Pop ();if _eee !=nil {return _eee ;};_bgeg ,_eee :=_ecf .Pop ();if _eee !=nil {return _eee ;
};_fgg ,_aabd :=_afb .(*PSReal );_dfb ,_dgd :=_afb .(*PSInteger );if !_aabd &&!_dgd {return ErrTypeCheck ;};_edeb ,_dfa :=_bgeg .(*PSReal );_eafa ,_bca :=_bgeg .(*PSInteger );if !_dfa &&!_bca {return ErrTypeCheck ;};if _dgd &&_bca {_dcba :=_dfb .Val *_eafa .Val ;
_fbb :=_ecf .Push (MakeInteger (_dcba ));return _fbb ;};var _agdd float64 ;if _aabd {_agdd =_fgg .Val ;}else {_agdd =float64 (_dfb .Val );};if _dfa {_agdd *=_edeb .Val ;}else {_agdd *=float64 (_eafa .Val );};_eee =_ecf .Push (MakeReal (_agdd ));return _eee ;
};func (_bff *PSOperand )exch (_bac *PSStack )error {_geb ,_efcfc :=_bac .Pop ();if _efcfc !=nil {return _efcfc ;};_aca ,_efcfc :=_bac .Pop ();if _efcfc !=nil {return _efcfc ;};_efcfc =_bac .Push (_geb );if _efcfc !=nil {return _efcfc ;};_efcfc =_bac .Push (_aca );
return _efcfc ;};func (_dceg *PSOperand )idiv (_eea *PSStack )error {_ceg ,_afdd :=_eea .Pop ();if _afdd !=nil {return _afdd ;};_gdfb ,_afdd :=_eea .Pop ();if _afdd !=nil {return _afdd ;};_cfd ,_bdgc :=_ceg .(*PSInteger );if !_bdgc {return ErrTypeCheck ;
};if _cfd .Val ==0{return ErrUndefinedResult ;};_aeeb ,_bdgc :=_gdfb .(*PSInteger );if !_bdgc {return ErrTypeCheck ;};_eecc :=_aeeb .Val /_cfd .Val ;_afdd =_eea .Push (MakeInteger (_eecc ));return _afdd ;};var ErrStackUnderflow =_e .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");
func (_gbfg *PSOperand )ge (_edfd *PSStack )error {_ffb ,_eecb :=_edfd .PopNumberAsFloat64 ();if _eecb !=nil {return _eecb ;};_ada ,_eecb :=_edfd .PopNumberAsFloat64 ();if _eecb !=nil {return _eecb ;};if _cd .Abs (_ada -_ffb )< _f {_efcfe :=_edfd .Push (MakeBool (true ));
return _efcfe ;}else if _ada > _ffb {_fcff :=_edfd .Push (MakeBool (true ));return _fcff ;}else {_eddce :=_edfd .Push (MakeBool (false ));return _eddce ;};};func (_cae *PSProgram )Duplicate ()PSObject {_bfgf :=&PSProgram {};for _ ,_cf :=range *_cae {_bfgf .Append (_cf .Duplicate ());
};return _bfgf ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_ebg *PSOperand )Exec (stack *PSStack )error {_efc :=ErrUnsupportedOperand ;switch *_ebg {case "\u0061\u0062\u0073":_efc =_ebg .abs (stack );case "\u0061\u0064\u0064":_efc =_ebg .add (stack );case "\u0061\u006e\u0064":_efc =_ebg .and (stack );case "\u0061\u0074\u0061\u006e":_efc =_ebg .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_efc =_ebg .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_efc =_ebg .ceiling (stack );case "\u0063\u006f\u0070\u0079":_efc =_ebg .copy (stack );case "\u0063\u006f\u0073":_efc =_ebg .cos (stack );
case "\u0063\u0076\u0069":_efc =_ebg .cvi (stack );case "\u0063\u0076\u0072":_efc =_ebg .cvr (stack );case "\u0064\u0069\u0076":_efc =_ebg .div (stack );case "\u0064\u0075\u0070":_efc =_ebg .dup (stack );case "\u0065\u0071":_efc =_ebg .eq (stack );case "\u0065\u0078\u0063\u0068":_efc =_ebg .exch (stack );
case "\u0065\u0078\u0070":_efc =_ebg .exp (stack );case "\u0066\u006c\u006fo\u0072":_efc =_ebg .floor (stack );case "\u0067\u0065":_efc =_ebg .ge (stack );case "\u0067\u0074":_efc =_ebg .gt (stack );case "\u0069\u0064\u0069\u0076":_efc =_ebg .idiv (stack );
case "\u0069\u0066":_efc =_ebg .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_efc =_ebg .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_efc =_ebg .index (stack );case "\u006c\u0065":_efc =_ebg .le (stack );case "\u006c\u006f\u0067":_efc =_ebg .log (stack );
case "\u006c\u006e":_efc =_ebg .ln (stack );case "\u006c\u0074":_efc =_ebg .lt (stack );case "\u006d\u006f\u0064":_efc =_ebg .mod (stack );case "\u006d\u0075\u006c":_efc =_ebg .mul (stack );case "\u006e\u0065":_efc =_ebg .ne (stack );case "\u006e\u0065\u0067":_efc =_ebg .neg (stack );
case "\u006e\u006f\u0074":_efc =_ebg .not (stack );case "\u006f\u0072":_efc =_ebg .or (stack );case "\u0070\u006f\u0070":_efc =_ebg .pop (stack );case "\u0072\u006f\u0075n\u0064":_efc =_ebg .round (stack );case "\u0072\u006f\u006c\u006c":_efc =_ebg .roll (stack );
case "\u0073\u0069\u006e":_efc =_ebg .sin (stack );case "\u0073\u0071\u0072\u0074":_efc =_ebg .sqrt (stack );case "\u0073\u0075\u0062":_efc =_ebg .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_efc =_ebg .truncate (stack );case "\u0078\u006f\u0072":_efc =_ebg .xor (stack );
};return _efc ;};func (_aaf *PSOperand )add (_efcf *PSStack )error {_fae ,_gc :=_efcf .Pop ();if _gc !=nil {return _gc ;};_afe ,_gc :=_efcf .Pop ();if _gc !=nil {return _gc ;};_ede ,_ea :=_fae .(*PSReal );_effb ,_bad :=_fae .(*PSInteger );if !_ea &&!_bad {return ErrTypeCheck ;
};_fgd ,_gg :=_afe .(*PSReal );_bge ,_aab :=_afe .(*PSInteger );if !_gg &&!_aab {return ErrTypeCheck ;};if _bad &&_aab {_fd :=_effb .Val +_bge .Val ;_afeg :=_efcf .Push (MakeInteger (_fd ));return _afeg ;};var _ebb float64 ;if _ea {_ebb =_ede .Val ;}else {_ebb =float64 (_effb .Val );
};if _gg {_ebb +=_fgd .Val ;}else {_ebb +=float64 (_bge .Val );};_gc =_efcf .Push (MakeReal (_ebb ));return _gc ;};

// String returns a string representation of the stack.
func (_bbdd *PSStack )String ()string {_bbdbf :="\u005b\u0020";for _ ,_cddgd :=range *_bbdd {_bbdbf +=_cddgd .String ();_bbdbf +="\u0020";};_bbdbf +="\u005d";return _bbdbf ;};

// Push pushes an object on top of the stack.
func (_eefg *PSStack )Push (obj PSObject )error {if len (*_eefg )> 100{return ErrStackOverflow ;};*_eefg =append (*_eefg ,obj );return nil ;};func (_fdf *PSOperand )xor (_fda *PSStack )error {_gfbc ,_fega :=_fda .Pop ();if _fega !=nil {return _fega ;};
_fabg ,_fega :=_fda .Pop ();if _fega !=nil {return _fega ;};if _eeed ,_gbfe :=_gfbc .(*PSBoolean );_gbfe {_bbcc ,_dbae :=_fabg .(*PSBoolean );if !_dbae {return ErrTypeCheck ;};_fega =_fda .Push (MakeBool (_eeed .Val !=_bbcc .Val ));return _fega ;};if _ecc ,_cbc :=_gfbc .(*PSInteger );
_cbc {_aba ,_afbe :=_fabg .(*PSInteger );if !_afbe {return ErrTypeCheck ;};_fega =_fda .Push (MakeInteger (_ecc .Val ^_aba .Val ));return _fega ;};return ErrTypeCheck ;};func (_bg *PSReal )Duplicate ()PSObject {_ddg :=PSReal {};_ddg .Val =_bg .Val ;return &_ddg };
func (_fec *PSOperand )ln (_bbcf *PSStack )error {_dcb ,_fce :=_bbcf .PopNumberAsFloat64 ();if _fce !=nil {return _fce ;};_eedd :=_cd .Log (_dcb );_fce =_bbcf .Push (MakeReal (_eedd ));return _fce ;};func (_fbgd *PSOperand )or (_def *PSStack )error {_egdcg ,_bed :=_def .Pop ();
if _bed !=nil {return _bed ;};_feg ,_bed :=_def .Pop ();if _bed !=nil {return _bed ;};if _cfe ,_dgb :=_egdcg .(*PSBoolean );_dgb {_fbbc ,_fgc :=_feg .(*PSBoolean );if !_fgc {return ErrTypeCheck ;};_bed =_def .Push (MakeBool (_cfe .Val ||_fbbc .Val ));return _bed ;
};if _dbb ,_ggb :=_egdcg .(*PSInteger );_ggb {_dba ,_aaac :=_feg .(*PSInteger );if !_aaac {return ErrTypeCheck ;};_bed =_def .Push (MakeInteger (_dbb .Val |_dba .Val ));return _bed ;};return ErrTypeCheck ;};func (_cecad *PSParser )parseBool ()(*PSBoolean ,error ){_eca ,_afff :=_cecad ._bcd .Peek (4);
if _afff !=nil {return MakeBool (false ),_afff ;};if (len (_eca )>=4)&&(string (_eca [:4])=="\u0074\u0072\u0075\u0065"){_cecad ._bcd .Discard (4);return MakeBool (true ),nil ;};_eca ,_afff =_cecad ._bcd .Peek (5);if _afff !=nil {return MakeBool (false ),_afff ;
};if (len (_eca )>=5)&&(string (_eca [:5])=="\u0066\u0061\u006cs\u0065"){_cecad ._bcd .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_e .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_fe *PSInteger )String ()string {return _ef .Sprintf ("\u0025\u0064",_fe .Val )};func (_bgd *PSOperand )round (_fdcc *PSStack )error {_gdg ,_ecg :=_fdcc .Pop ();if _ecg !=nil {return _ecg ;};if _bbdb ,_ecba :=_gdg .(*PSReal );
_ecba {_ecg =_fdcc .Push (MakeReal (_cd .Floor (_bbdb .Val +0.5)));}else if _fba ,_gcf :=_gdg .(*PSInteger );_gcf {_ecg =_fdcc .Push (MakeInteger (_fba .Val ));}else {return ErrTypeCheck ;};return _ecg ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_cbe *PSStack )PopInteger ()(int ,error ){_aga ,_bcac :=_cbe .Pop ();if _bcac !=nil {return 0,_bcac ;};if _dag ,_gedg :=_aga .(*PSInteger );_gedg {return _dag .Val ,nil ;};return 0,ErrTypeCheck ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_ddce *PSParser )skipSpaces ()(int ,error ){_abd :=0;for {_bdbb ,_cabf :=_ddce ._bcd .Peek (1);if _cabf !=nil {return 0,_cabf ;};if _b .IsWhiteSpace (_bdbb [0]){_ddce ._bcd .ReadByte ();_abd ++;}else {break ;};};return _abd ,nil ;
};

// Exec executes the program, typically leaving output values on the stack.
func (_ba *PSProgram )Exec (stack *PSStack )error {for _ ,_efaf :=range *_ba {var _efd error ;switch _ag :=_efaf .(type ){case *PSInteger :_adf :=_ag ;_efd =stack .Push (_adf );case *PSReal :_da :=_ag ;_efd =stack .Push (_da );case *PSBoolean :_agd :=_ag ;
_efd =stack .Push (_agd );case *PSProgram :_de :=_ag ;_efd =stack .Push (_de );case *PSOperand :_cgd :=_ag ;_efd =_cgd .Exec (stack );default:return ErrTypeCheck ;};if _efd !=nil {return _efd ;};};return nil ;};var ErrUndefinedResult =_e .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");


// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_faea :=PSOperand (val );return &_faea };func (_ddf *PSOperand )Duplicate ()PSObject {_fgb :=*_ddf ;return &_fgb };var ErrStackOverflow =_e .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");
func (_aedd *PSOperand )atan (_eeg *PSStack )error {_edd ,_gbab :=_eeg .PopNumberAsFloat64 ();if _gbab !=nil {return _gbab ;};_aeb ,_gbab :=_eeg .PopNumberAsFloat64 ();if _gbab !=nil {return _gbab ;};if _edd ==0{var _gbb error ;if _aeb < 0{_gbb =_eeg .Push (MakeReal (270));
}else {_gbb =_eeg .Push (MakeReal (90));};return _gbb ;};_ce :=_aeb /_edd ;_afd :=_cd .Atan (_ce )*180/_cd .Pi ;_gbab =_eeg .Push (MakeReal (_afd ));return _gbab ;};func (_bc *PSProgram )DebugString ()string {_aed :="\u007b\u0020";for _ ,_ddga :=range *_bc {_aed +=_ddga .DebugString ();
_aed +="\u0020";};_aed +="\u007d";return _aed ;};func (_gbg *PSBoolean )String ()string {return _ef .Sprintf ("\u0025\u0076",_gbg .Val )};func (_bcf *PSOperand )index (_bacb *PSStack )error {_agbe ,_gaa :=_bacb .Pop ();if _gaa !=nil {return _gaa ;};_beg ,_ecbb :=_agbe .(*PSInteger );
if !_ecbb {return ErrTypeCheck ;};if _beg .Val < 0{return ErrRangeCheck ;};if _beg .Val > len (*_bacb )-1{return ErrStackUnderflow ;};_caec :=(*_bacb )[len (*_bacb )-1-_beg .Val ];_gaa =_bacb .Push (_caec .Duplicate ());return _gaa ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _aad []float64 ;for _ ,_bd :=range objects {if _ecb ,_bf :=_bd .(*PSInteger );_bf {_aad =append (_aad ,float64 (_ecb .Val ));}else if _efa ,_bfg :=_bd .(*PSReal );_bfg {_aad =append (_aad ,_efa .Val );
}else {return nil ,ErrTypeCheck ;};};return _aad ,nil ;};func (_abe *PSOperand )pop (_ceacb *PSStack )error {_ ,_ead :=_ceacb .Pop ();if _ead !=nil {return _ead ;};return nil ;};func (_af *PSProgram )String ()string {_ac :="\u007b\u0020";for _ ,_afa :=range *_af {_ac +=_afa .String ();
_ac +="\u0020";};_ac +="\u007d";return _ac ;};func _ccgc (_fcb int )int {if _fcb < 0{return -_fcb ;};return _fcb ;};func (_gba *PSOperand )DebugString ()string {return _ef .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_gba );};func (_eff *PSReal )String ()string {return _ef .Sprintf ("\u0025\u002e\u0035\u0066",_eff .Val )};
func (_gff *PSOperand )lt (_ebdc *PSStack )error {_gbgc ,_agdc :=_ebdc .PopNumberAsFloat64 ();if _agdc !=nil {return _agdc ;};_dcg ,_agdc :=_ebdc .PopNumberAsFloat64 ();if _agdc !=nil {return _agdc ;};if _cd .Abs (_dcg -_gbgc )< _f {_geg :=_ebdc .Push (MakeBool (false ));
return _geg ;}else if _dcg < _gbgc {_bacc :=_ebdc .Push (MakeBool (true ));return _bacc ;}else {_ddc :=_ebdc .Push (MakeBool (false ));return _ddc ;};};func (_df *PSOperand )mod (_agbeb *PSStack )error {_gfg ,_ccb :=_agbeb .Pop ();if _ccb !=nil {return _ccb ;
};_caa ,_ccb :=_agbeb .Pop ();if _ccb !=nil {return _ccb ;};_ebbc ,_eeb :=_gfg .(*PSInteger );if !_eeb {return ErrTypeCheck ;};if _ebbc .Val ==0{return ErrUndefinedResult ;};_bccb ,_eeb :=_caa .(*PSInteger );if !_eeb {return ErrTypeCheck ;};_fbfb :=_bccb .Val %_ebbc .Val ;
_ccb =_agbeb .Push (MakeInteger (_fbfb ));return _ccb ;};func (_adb *PSOperand )gt (_abg *PSStack )error {_gfba ,_ebd :=_abg .PopNumberAsFloat64 ();if _ebd !=nil {return _ebd ;};_bfe ,_ebd :=_abg .PopNumberAsFloat64 ();if _ebd !=nil {return _ebd ;};if _cd .Abs (_bfe -_gfba )< _f {_bffe :=_abg .Push (MakeBool (false ));
return _bffe ;}else if _bfe > _gfba {_ged :=_abg .Push (MakeBool (true ));return _ged ;}else {_aae :=_abg .Push (MakeBool (false ));return _aae ;};};func (_eaf *PSOperand )le (_efdf *PSStack )error {_gab ,_afeee :=_efdf .PopNumberAsFloat64 ();if _afeee !=nil {return _afeee ;
};_add ,_afeee :=_efdf .PopNumberAsFloat64 ();if _afeee !=nil {return _afeee ;};if _cd .Abs (_add -_gab )< _f {_gbc :=_efdf .Push (MakeBool (true ));return _gbc ;}else if _add < _gab {_afad :=_efdf .Push (MakeBool (true ));return _afad ;}else {_dbf :=_efdf .Push (MakeBool (false ));
return _dbf ;};};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_efb *PSOperand )String ()string {return string (*_efb )};func (_fgdg *PSOperand )roll (_dfad *PSStack )error {_eagg ,_cgg :=_dfad .Pop ();if _cgg !=nil {return _cgg ;};_dff ,_cgg :=_dfad .Pop ();if _cgg !=nil {return _cgg ;};_acgb ,_ddgaa :=_eagg .(*PSInteger );
if !_ddgaa {return ErrTypeCheck ;};_gaac ,_ddgaa :=_dff .(*PSInteger );if !_ddgaa {return ErrTypeCheck ;};if _gaac .Val < 0{return ErrRangeCheck ;};if _gaac .Val ==0||_gaac .Val ==1{return nil ;};if _gaac .Val > len (*_dfad ){return ErrStackUnderflow ;
};for _efcb :=0;_efcb < _ccgc (_acgb .Val );_efcb ++{var _cef []PSObject ;_cef =(*_dfad )[len (*_dfad )-(_gaac .Val ):len (*_dfad )];if _acgb .Val > 0{_ffcd :=_cef [len (_cef )-1];_cef =append ([]PSObject {_ffcd },_cef [0:len (_cef )-1]...);}else {_acba :=_cef [len (_cef )-_gaac .Val ];
_cef =append (_cef [1:],_acba );};_bade :=append ((*_dfad )[0:len (*_dfad )-_gaac .Val ],_cef ...);_dfad =&_bade ;};return nil ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_edcg :=PSParser {};_ecfcd :=_a .NewBuffer (content );_edcg ._bcd =_aa .NewReader (_ecfcd );return &_edcg ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_gfa *PSOperand )ifCondition (_bdc *PSStack )error {_bbg ,_bgac :=_bdc .Pop ();if _bgac !=nil {return _bgac ;};_fafa ,_bgac :=_bdc .Pop ();if _bgac !=nil {return _bgac ;};_fbe ,_gac :=_bbg .(*PSProgram );if !_gac {return ErrTypeCheck ;
};_bfb ,_gac :=_fafa .(*PSBoolean );if !_gac {return ErrTypeCheck ;};if _bfb .Val {_fdb :=_fbe .Exec (_bdc );return _fdb ;};return nil ;};func (_gd *PSOperand )and (_ded *PSStack )error {_db ,_eg :=_ded .Pop ();if _eg !=nil {return _eg ;};_dg ,_eg :=_ded .Pop ();
if _eg !=nil {return _eg ;};if _fb ,_gbf :=_db .(*PSBoolean );_gbf {_bdg ,_gdf :=_dg .(*PSBoolean );if !_gdf {return ErrTypeCheck ;};_eg =_ded .Push (MakeBool (_fb .Val &&_bdg .Val ));return _eg ;};if _eag ,_aaa :=_db .(*PSInteger );_aaa {_bce ,_caeb :=_dg .(*PSInteger );
if !_caeb {return ErrTypeCheck ;};_eg =_ded .Push (MakeInteger (_eag .Val &_bce .Val ));return _eg ;};return ErrTypeCheck ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_febf *PSStack )DebugString ()string {_cabg :="\u005b\u0020";for _ ,_gagf :=range *_febf {_cabg +=_gagf .DebugString ();_cabg +="\u0020";};_cabg +="\u005d";return _cabg ;};func (_ddfd *PSOperand )bitshift (_effbg *PSStack )error {_fbf ,_fbfd :=_effbg .PopInteger ();
if _fbfd !=nil {return _fbfd ;};_egd ,_fbfd :=_effbg .PopInteger ();if _fbfd !=nil {return _fbfd ;};var _cdd int ;if _fbf >=0{_cdd =_egd <<uint (_fbf );}else {_cdd =_egd >>uint (-_fbf );};_fbfd =_effbg .Push (MakeInteger (_cdd ));return _fbfd ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_ced *PSOperand )cvi (_bgf *PSStack )error {_egdd ,_efg :=_bgf .Pop ();if _efg !=nil {return _efg ;};if _ccg ,_ddd :=_egdd .(*PSReal );_ddd {_cdg :=int (_ccg .Val );_efg =_bgf .Push (MakeInteger (_cdg ));
}else if _edf ,_dga :=_egdd .(*PSInteger );_dga {_fbg :=_edf .Val ;_efg =_bgf .Push (MakeInteger (_fbg ));}else {return ErrTypeCheck ;};return _efg ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_bcd *_aa .Reader };func (_efaff *PSOperand )sin (_cba *PSStack )error {_deb ,_gbgb :=_cba .PopNumberAsFloat64 ();if _gbgb !=nil {return _gbgb ;};_gef :=_cd .Sin (_deb *_cd .Pi /180.0);_gbgb =_cba .Push (MakeReal (_gef ));return _gbgb ;
};func (_dbdc *PSOperand )truncate (_eafcb *PSStack )error {_afc ,_bdf :=_eafcb .Pop ();if _bdf !=nil {return _bdf ;};if _fee ,_ebgg :=_afc .(*PSReal );_ebgg {_afdc :=int (_fee .Val );_bdf =_eafcb .Push (MakeReal (float64 (_afdc )));}else if _fcef ,_ceb :=_afc .(*PSInteger );
_ceb {_bdf =_eafcb .Push (MakeInteger (_fcef .Val ));}else {return ErrTypeCheck ;};return _bdf ;};func (_egf *PSOperand )ceiling (_eef *PSStack )error {_cea ,_afee :=_eef .Pop ();if _afee !=nil {return _afee ;};if _cce ,_eba :=_cea .(*PSReal );_eba {_afee =_eef .Push (MakeReal (_cd .Ceil (_cce .Val )));
}else if _eddc ,_bfc :=_cea .(*PSInteger );_bfc {_afee =_eef .Push (MakeInteger (_eddc .Val ));}else {_afee =ErrTypeCheck ;};return _afee ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_bda *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_cfbc ,_fff :=_bda .Pop ();if _fff !=nil {return 0,_fff ;};if _efe ,_egg :=_cfbc .(*PSReal );_egg {return _efe .Val ,nil ;}else if _gcga ,_egaf :=_cfbc .(*PSInteger );_egaf {return float64 (_gcga .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_fcf *PSOperand )dup (_agb *PSStack )error {_edc ,_eed :=_agb .Pop ();if _eed !=nil {return _eed ;};_eed =_agb .Push (_edc );if _eed !=nil {return _eed ;};_eed =_agb .Push (_edc .Duplicate ());return _eed ;};func (_bfce *PSOperand )ne (_edebg *PSStack )error {_beb :=_bfce .eq (_edebg );
if _beb !=nil {return _beb ;};_beb =_bfce .not (_edebg );return _beb ;};func (_agbb *PSOperand )exp (_faeg *PSStack )error {_edaa ,_bgae :=_faeg .PopNumberAsFloat64 ();if _bgae !=nil {return _bgae ;};_ffd ,_bgae :=_faeg .PopNumberAsFloat64 ();if _bgae !=nil {return _bgae ;
};if _cd .Abs (_edaa )< 1&&_ffd < 0{return ErrUndefinedResult ;};_fgda :=_cd .Pow (_ffd ,_edaa );_bgae =_faeg .Push (MakeReal (_fgda ));return _bgae ;};func (_bdb *PSBoolean )DebugString ()string {return _ef .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_bdb .Val );
};func (_bbb *PSInteger )Duplicate ()PSObject {_adg :=PSInteger {};_adg .Val =_bbb .Val ;return &_adg };func (_cdfb *PSParser )parseNumber ()(PSObject ,error ){_ecdc ,_dbbd :=_b .ParseNumber (_cdfb ._bcd );if _dbbd !=nil {return nil ,_dbbd ;};switch _bee :=_ecdc .(type ){case *_b .PdfObjectFloat :return MakeReal (float64 (*_bee )),nil ;
case *_b .PdfObjectInteger :return MakeInteger (int (*_bee )),nil ;};return nil ,_ef .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_ecdc );};