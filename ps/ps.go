//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_dg "bufio";_ea "bytes";_b "errors";_c "fmt";_bb "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/core";_d "io";_be "math";);func (_ggaa *PSOperand )round (_dbgg *PSStack )error {_edde ,_ddfe :=_dbgg .Pop ();if _ddfe !=nil {return _ddfe ;};if _eebf ,_gcc :=_edde .(*PSReal );_gcc {_ddfe =_dbgg .Push (MakeReal (_be .Floor (_eebf .Val +0.5)));}else if _bgfa ,_bdggf :=_edde .(*PSInteger );_bdggf {_ddfe =_dbgg .Push (MakeInteger (_bgfa .Val ));}else {return ErrTypeCheck ;};return _ddfe ;};

// Push pushes an object on top of the stack.
func (_ecae *PSStack )Push (obj PSObject )error {if len (*_ecae )> 100{return ErrStackOverflow ;};*_ecae =append (*_ecae ,obj );return nil ;};func (_bfd *PSOperand )bitshift (_bgb *PSStack )error {_bac ,_bfgb :=_bgb .PopInteger ();if _bfgb !=nil {return _bfgb ;};_cbc ,_bfgb :=_bgb .PopInteger ();if _bfgb !=nil {return _bfgb ;};var _deg int ;if _bac >=0{_deg =_cbc <<uint (_bac );}else {_deg =_cbc >>uint (-_bac );};_bfgb =_bgb .Push (MakeInteger (_deg ));return _bfgb ;};func (_ggb *PSOperand )sin (_bcaf *PSStack )error {_cabc ,_ebb :=_bcaf .PopNumberAsFloat64 ();if _ebb !=nil {return _ebb ;};_dda :=_be .Sin (_cabc *_be .Pi /180.0);_ebb =_bcaf .Push (MakeReal (_dda ));return _ebb ;};func (_dbac *PSOperand )cos (_geb *PSStack )error {_gcf ,_gea :=_geb .PopNumberAsFloat64 ();if _gea !=nil {return _gea ;};_ccg :=_be .Cos (_gcf *_be .Pi /180.0);_gea =_geb .Push (MakeReal (_ccg ));return _gea ;};func (_eaaa *PSOperand )idiv (_ggff *PSStack )error {_bed ,_adfd :=_ggff .Pop ();if _adfd !=nil {return _adfd ;};_ecd ,_adfd :=_ggff .Pop ();if _adfd !=nil {return _adfd ;};_dgg ,_beea :=_bed .(*PSInteger );if !_beea {return ErrTypeCheck ;};if _dgg .Val ==0{return ErrUndefinedResult ;};_addb ,_beea :=_ecd .(*PSInteger );if !_beea {return ErrTypeCheck ;};_agca :=_addb .Val /_dgg .Val ;_adfd =_ggff .Push (MakeInteger (_agca ));return _adfd ;};func (_ccgg *PSOperand )ln (_fgea *PSStack )error {_aab ,_ddbg :=_fgea .PopNumberAsFloat64 ();if _ddbg !=nil {return _ddbg ;};_agcdee :=_be .Log (_aab );_ddbg =_fgea .Push (MakeReal (_agcdee ));return _ddbg ;};

// Exec executes the program, typically leaving output values on the stack.
func (_gb *PSProgram )Exec (stack *PSStack )error {for _ ,_dbc :=range *_gb {var _fef error ;switch _bbf :=_dbc .(type ){case *PSInteger :_cg :=_bbf ;_fef =stack .Push (_cg );case *PSReal :_af :=_bbf ;_fef =stack .Push (_af );case *PSBoolean :_cdb :=_bbf ;_fef =stack .Push (_cdb );case *PSProgram :_ae :=_bbf ;_fef =stack .Push (_ae );case *PSOperand :_cc :=_bbf ;_fef =_cc .Exec (stack );default:return ErrTypeCheck ;};if _fef !=nil {return _fef ;};};return nil ;};func (_cgd *PSOperand )Duplicate ()PSObject {_df :=*_cgd ;return &_df };

// Append appends an object to the PSProgram.
func (_fe *PSProgram )Append (obj PSObject ){*_fe =append (*_fe ,obj )};func (_da *PSInteger )Duplicate ()PSObject {_baa :=PSInteger {};_baa .Val =_da .Val ;return &_baa };func (_aae *PSOperand )DebugString ()string {return _c .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_aae );};func (_dcc *PSOperand )copy (_dfd *PSStack )error {_cdd ,_eff :=_dfd .PopInteger ();if _eff !=nil {return _eff ;};if _cdd < 0{return ErrRangeCheck ;};if _cdd > len (*_dfd ){return ErrRangeCheck ;};*_dfd =append (*_dfd ,(*_dfd )[len (*_dfd )-_cdd :]...);return nil ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_cee *PSOperand )Exec (stack *PSStack )error {_fa :=ErrUnsupportedOperand ;switch *_cee {case "\u0061\u0062\u0073":_fa =_cee .abs (stack );case "\u0061\u0064\u0064":_fa =_cee .add (stack );case "\u0061\u006e\u0064":_fa =_cee .and (stack );case "\u0061\u0074\u0061\u006e":_fa =_cee .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_fa =_cee .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_fa =_cee .ceiling (stack );case "\u0063\u006f\u0070\u0079":_fa =_cee .copy (stack );case "\u0063\u006f\u0073":_fa =_cee .cos (stack );case "\u0063\u0076\u0069":_fa =_cee .cvi (stack );case "\u0063\u0076\u0072":_fa =_cee .cvr (stack );case "\u0064\u0069\u0076":_fa =_cee .div (stack );case "\u0064\u0075\u0070":_fa =_cee .dup (stack );case "\u0065\u0071":_fa =_cee .eq (stack );case "\u0065\u0078\u0063\u0068":_fa =_cee .exch (stack );case "\u0065\u0078\u0070":_fa =_cee .exp (stack );case "\u0066\u006c\u006fo\u0072":_fa =_cee .floor (stack );case "\u0067\u0065":_fa =_cee .ge (stack );case "\u0067\u0074":_fa =_cee .gt (stack );case "\u0069\u0064\u0069\u0076":_fa =_cee .idiv (stack );case "\u0069\u0066":_fa =_cee .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_fa =_cee .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_fa =_cee .index (stack );case "\u006c\u0065":_fa =_cee .le (stack );case "\u006c\u006f\u0067":_fa =_cee .log (stack );case "\u006c\u006e":_fa =_cee .ln (stack );case "\u006c\u0074":_fa =_cee .lt (stack );case "\u006d\u006f\u0064":_fa =_cee .mod (stack );case "\u006d\u0075\u006c":_fa =_cee .mul (stack );case "\u006e\u0065":_fa =_cee .ne (stack );case "\u006e\u0065\u0067":_fa =_cee .neg (stack );case "\u006e\u006f\u0074":_fa =_cee .not (stack );case "\u006f\u0072":_fa =_cee .or (stack );case "\u0070\u006f\u0070":_fa =_cee .pop (stack );case "\u0072\u006f\u0075n\u0064":_fa =_cee .round (stack );case "\u0072\u006f\u006c\u006c":_fa =_cee .roll (stack );case "\u0073\u0069\u006e":_fa =_cee .sin (stack );case "\u0073\u0071\u0072\u0074":_fa =_cee .sqrt (stack );case "\u0073\u0075\u0062":_fa =_cee .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_fa =_cee .truncate (stack );case "\u0078\u006f\u0072":_fa =_cee .xor (stack );};return _fa ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_ab *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_eaa :=range objects {_fc :=_ab .Stack .Push (_eaa );if _fc !=nil {return nil ,_fc ;};};_bc :=_ab ._ce .Exec (_ab .Stack );if _bc !=nil {_bb .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bc );return nil ,_bc ;};_ee :=[]PSObject (*_ab .Stack );_ab .Stack .Empty ();return _ee ,nil ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_dfbf *PSOperand )xor (_eaff *PSStack )error {_cgee ,_gef :=_eaff .Pop ();if _gef !=nil {return _gef ;};_cbga ,_gef :=_eaff .Pop ();if _gef !=nil {return _gef ;};if _cbeb ,_fcfc :=_cgee .(*PSBoolean );_fcfc {_efcc ,_ddga :=_cbga .(*PSBoolean );if !_ddga {return ErrTypeCheck ;};_gef =_eaff .Push (MakeBool (_cbeb .Val !=_efcc .Val ));return _gef ;};if _cfee ,_cfgg :=_cgee .(*PSInteger );_cfgg {_dfce ,_cdga :=_cbga .(*PSInteger );if !_cdga {return ErrTypeCheck ;};_gef =_eaff .Push (MakeInteger (_cfee .Val ^_dfce .Val ));return _gef ;};return ErrTypeCheck ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_bgbg :=PSBoolean {};_bgbg .Val =val ;return &_bgbg };func (_cbfc *PSOperand )mul (_ffef *PSStack )error {_cggd ,_bce :=_ffef .Pop ();if _bce !=nil {return _bce ;};_cdbe ,_bce :=_ffef .Pop ();if _bce !=nil {return _bce ;};_acge ,_ecc :=_cggd .(*PSReal );_cegg ,_efce :=_cggd .(*PSInteger );if !_ecc &&!_efce {return ErrTypeCheck ;};_dag ,_abba :=_cdbe .(*PSReal );_aeb ,_dgba :=_cdbe .(*PSInteger );if !_abba &&!_dgba {return ErrTypeCheck ;};if _efce &&_dgba {_faa :=_cegg .Val *_aeb .Val ;_faf :=_ffef .Push (MakeInteger (_faa ));return _faf ;};var _dbcc float64 =0;if _ecc {_dbcc =_acge .Val ;}else {_dbcc =float64 (_cegg .Val );};if _abba {_dbcc *=_dag .Val ;}else {_dbcc *=float64 (_aeb .Val );};_bce =_ffef .Push (MakeReal (_dbcc ));return _bce ;};var ErrTypeCheck =_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_ff *PSOperand )eq (_ggaf *PSStack )error {_dab ,_aeg :=_ggaf .Pop ();if _aeg !=nil {return _aeg ;};_agcd ,_aeg :=_ggaf .Pop ();if _aeg !=nil {return _aeg ;};_ggf ,_dgc :=_dab .(*PSBoolean );_agd ,_agfa :=_agcd .(*PSBoolean );if _dgc ||_agfa {var _gcd error ;if _dgc &&_agfa {_gcd =_ggaf .Push (MakeBool (_ggf .Val ==_agd .Val ));}else {_gcd =_ggaf .Push (MakeBool (false ));};return _gcd ;};var _ebe float64 ;var _dfb float64 ;if _dbf ,_eaac :=_dab .(*PSInteger );_eaac {_ebe =float64 (_dbf .Val );}else if _edd ,_cbb :=_dab .(*PSReal );_cbb {_ebe =_edd .Val ;}else {return ErrTypeCheck ;};if _ecb ,_acg :=_agcd .(*PSInteger );_acg {_dfb =float64 (_ecb .Val );}else if _gac ,_add :=_agcd .(*PSReal );_add {_dfb =_gac .Val ;}else {return ErrTypeCheck ;};if _be .Abs (_dfb -_ebe )< _eaf {_aeg =_ggaf .Push (MakeBool (true ));}else {_aeg =_ggaf .Push (MakeBool (false ));};return _aeg ;};func (_cgfc *PSOperand )gt (_gfg *PSStack )error {_gbde ,_bca :=_gfg .PopNumberAsFloat64 ();if _bca !=nil {return _bca ;};_cge ,_bca :=_gfg .PopNumberAsFloat64 ();if _bca !=nil {return _bca ;};if _be .Abs (_cge -_gbde )< _eaf {_bfgd :=_gfg .Push (MakeBool (false ));return _bfgd ;}else if _cge > _gbde {_bgf :=_gfg .Push (MakeBool (true ));return _bgf ;}else {_aedg :=_gfg .Push (MakeBool (false ));return _aedg ;};};func (_cdgd *PSOperand )floor (_adf *PSStack )error {_cfbb ,_fgfa :=_adf .Pop ();if _fgfa !=nil {return _fgfa ;};if _beg ,_bba :=_cfbb .(*PSReal );_bba {_fgfa =_adf .Push (MakeReal (_be .Floor (_beg .Val )));}else if _dcg ,_agb :=_cfbb .(*PSInteger );_agb {_fgfa =_adf .Push (MakeInteger (_dcg .Val ));}else {return ErrTypeCheck ;};return _fgfa ;};var ErrStackOverflow =_b .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_bbd *PSBoolean )String ()string {return _c .Sprintf ("\u0025\u0076",_bbd .Val )};func (_fg *PSOperand )String ()string {return _c .Sprintf ("\u0025\u0073",*_fg )};func (_cdg *PSBoolean )DebugString ()string {return _c .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_cdg .Val );};

// PSParser is a basic Postscript parser.
type PSParser struct{_bddg *_dg .Reader };func (_bad *PSParser )parseNumber ()(PSObject ,error ){_fbdg ,_fbfg :=_a .ParseNumber (_bad ._bddg );if _fbfg !=nil {return nil ,_fbfg ;};switch _fffg :=_fbdg .(type ){case *_a .PdfObjectFloat :return MakeReal (float64 (*_fffg )),nil ;case *_a .PdfObjectInteger :return MakeInteger (int (*_fffg )),nil ;};return nil ,_c .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fbdg );};func (_deed *PSOperand )abs (_ca *PSStack )error {_gf ,_cec :=_ca .Pop ();if _cec !=nil {return _cec ;};if _bbb ,_ad :=_gf .(*PSReal );_ad {_afd :=_bbb .Val ;if _afd < 0{_cec =_ca .Push (MakeReal (-_afd ));}else {_cec =_ca .Push (MakeReal (_afd ));};}else if _ga ,_bd :=_gf .(*PSInteger );_bd {_bdg :=_ga .Val ;if _bdg < 0{_cec =_ca .Push (MakeInteger (-_bdg ));}else {_cec =_ca .Push (MakeInteger (_bdg ));};}else {return ErrTypeCheck ;};return _cec ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_ccd *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_fdgf ,_bbab :=_ccd .Pop ();if _bbab !=nil {return 0,_bbab ;};if _edff ,_aabf :=_fdgf .(*PSReal );_aabf {return _edff .Val ,nil ;}else if _dfaa ,_fdgb :=_fdgf .(*PSInteger );_fdgb {return float64 (_dfaa .Val ),nil ;}else {return 0,ErrTypeCheck ;};};

// Parse parses the postscript and store as a program that can be executed.
func (_ggc *PSParser )Parse ()(*PSProgram ,error ){_ggc .skipSpaces ();_fgac ,_bfe :=_ggc ._bddg .Peek (2);if _bfe !=nil {return nil ,_bfe ;};if _fgac [0]!='{'{return nil ,_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_geba ,_bfe :=_ggc .parseFunction ();if _bfe !=nil &&_bfe !=_d .EOF {return nil ,_bfe ;};return _geba ,_bfe ;};func (_eee *PSOperand )lt (_eeb *PSStack )error {_ffe ,_gdd :=_eeb .PopNumberAsFloat64 ();if _gdd !=nil {return _gdd ;};_eaba ,_gdd :=_eeb .PopNumberAsFloat64 ();if _gdd !=nil {return _gdd ;};if _be .Abs (_eaba -_ffe )< _eaf {_aaa :=_eeb .Push (MakeBool (false ));return _aaa ;}else if _eaba < _ffe {_ddg :=_eeb .Push (MakeBool (true ));return _ddg ;}else {_ffc :=_eeb .Push (MakeBool (false ));return _ffc ;};};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_cd :=&PSExecutor {};_cd .Stack =NewPSStack ();_cd ._ce =program ;return _cd ;};func (_aace *PSOperand )ne (_aag *PSStack )error {_beabf :=_aace .eq (_aag );if _beabf !=nil {return _beabf ;};_beabf =_aace .not (_aag );return _beabf ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_fgab *PSStack )PopInteger ()(int ,error ){_aged ,_dccg :=_fgab .Pop ();if _dccg !=nil {return 0,_dccg ;};if _aec ,_gecd :=_aged .(*PSInteger );_gecd {return _aec .Val ,nil ;};return 0,ErrTypeCheck ;};func (_cba *PSOperand )and (_bg *PSStack )error {_fdf ,_ecfe :=_bg .Pop ();if _ecfe !=nil {return _ecfe ;};_afe ,_ecfe :=_bg .Pop ();if _ecfe !=nil {return _ecfe ;};if _feg ,_adc :=_fdf .(*PSBoolean );_adc {_egea ,_fb :=_afe .(*PSBoolean );if !_fb {return ErrTypeCheck ;};_ecfe =_bg .Push (MakeBool (_feg .Val &&_egea .Val ));return _ecfe ;};if _bbbf ,_cgf :=_fdf .(*PSInteger );_cgf {_fbd ,_beab :=_afe .(*PSInteger );if !_beab {return ErrTypeCheck ;};_ecfe =_bg .Push (MakeInteger (_bbbf .Val &_fbd .Val ));return _ecfe ;};return ErrTypeCheck ;};func (_ag *PSInteger )DebugString ()string {return _c .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ag .Val );};

// Empty empties the stack.
func (_gfgc *PSStack )Empty (){*_gfgc =[]PSObject {}};func (_cbf *PSOperand )ifCondition (_cbbe *PSStack )error {_agee ,_dga :=_cbbe .Pop ();if _dga !=nil {return _dga ;};_egeb ,_dga :=_cbbe .Pop ();if _dga !=nil {return _dga ;};_ddd ,_gcg :=_agee .(*PSProgram );if !_gcg {return ErrTypeCheck ;};_eec ,_gcg :=_egeb .(*PSBoolean );if !_gcg {return ErrTypeCheck ;};if _eec .Val {_bcde :=_ddd .Exec (_cbbe );return _bcde ;};return nil ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_fefd :=PSInteger {};_fefd .Val =val ;return &_fefd };func (_fea *PSOperand )neg (_ade *PSStack )error {_gfa ,_cgfg :=_ade .Pop ();if _cgfg !=nil {return _cgfg ;};if _efg ,_bdd :=_gfa .(*PSReal );_bdd {_cgfg =_ade .Push (MakeReal (-_efg .Val ));return _cgfg ;}else if _gec ,_aebe :=_gfa .(*PSInteger );_aebe {_cgfg =_ade .Push (MakeInteger (-_gec .Val ));return _cgfg ;}else {return ErrTypeCheck ;};};func (_eae *PSReal )Duplicate ()PSObject {_eef :=PSReal {};_eef .Val =_eae .Val ;return &_eef };func (_cdggd *PSOperand )cvi (_abae *PSStack )error {_gd ,_bcd :=_abae .Pop ();if _bcd !=nil {return _bcd ;};if _fabg ,_abb :=_gd .(*PSReal );_abb {_ddf :=int (_fabg .Val );_bcd =_abae .Push (MakeInteger (_ddf ));}else if _bdgd ,_cbdc :=_gd .(*PSInteger );_cbdc {_gfd :=_bdgd .Val ;_bcd =_abae .Push (MakeInteger (_gfd ));}else {return ErrTypeCheck ;};return _bcd ;};var ErrUnsupportedOperand =_b .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_dc *PSOperand )add (_ge *PSStack )error {_fac ,_gbe :=_ge .Pop ();if _gbe !=nil {return _gbe ;};_egf ,_gbe :=_ge .Pop ();if _gbe !=nil {return _gbe ;};_dba ,_bbbg :=_fac .(*PSReal );_agf ,_bdf :=_fac .(*PSInteger );if !_bbbg &&!_bdf {return ErrTypeCheck ;};_cbd ,_gbd :=_egf .(*PSReal );_ecf ,_eb :=_egf .(*PSInteger );if !_gbd &&!_eb {return ErrTypeCheck ;};if _bdf &&_eb {_ef :=_agf .Val +_ecf .Val ;_bfg :=_ge .Push (MakeInteger (_ef ));return _bfg ;};var _ed float64 =0;if _bbbg {_ed =_dba .Val ;}else {_ed =float64 (_agf .Val );};if _gbd {_ed +=_cbd .Val ;}else {_ed +=float64 (_ecf .Val );};_gbe =_ge .Push (MakeReal (_ed ));return _gbe ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_ce *PSProgram ;};func (_fcf *PSOperand )le (_bbfb *PSStack )error {_fcb ,_fbbb :=_bbfb .PopNumberAsFloat64 ();if _fbbb !=nil {return _fbbb ;};_gfdg ,_fbbb :=_bbfb .PopNumberAsFloat64 ();if _fbbb !=nil {return _fbbb ;};if _be .Abs (_gfdg -_fcb )< _eaf {_eba :=_bbfb .Push (MakeBool (true ));return _eba ;}else if _gfdg < _fcb {_gdg :=_bbfb .Push (MakeBool (true ));return _gdg ;}else {_fdc :=_bbfb .Push (MakeBool (false ));return _fdc ;};};func (_ddb *PSOperand )cvr (_bbdf *PSStack )error {_fcg ,_gae :=_bbdf .Pop ();if _gae !=nil {return _gae ;};if _gdb ,_fcga :=_fcg .(*PSReal );_fcga {_gae =_bbdf .Push (MakeReal (_gdb .Val ));}else if _cfb ,_gda :=_fcg .(*PSInteger );_gda {_gae =_bbdf .Push (MakeReal (float64 (_cfb .Val )));}else {return ErrTypeCheck ;};return _gae ;};func (_bacaa *PSParser )parseBool ()(*PSBoolean ,error ){_aegb ,_ebfg :=_bacaa ._bddg .Peek (4);if _ebfg !=nil {return MakeBool (false ),_ebfg ;};if (len (_aegb )>=4)&&(string (_aegb [:4])=="\u0074\u0072\u0075\u0065"){_bacaa ._bddg .Discard (4);return MakeBool (true ),nil ;};_aegb ,_ebfg =_bacaa ._bddg .Peek (5);if _ebfg !=nil {return MakeBool (false ),_ebfg ;};if (len (_aegb )>=5)&&(string (_aegb [:5])=="\u0066\u0061\u006cs\u0065"){_bacaa ._bddg .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_b .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_cb *PSReal )DebugString ()string {return _c .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_cb .Val );};func (_dee *PSBoolean )Duplicate ()PSObject {_age :=PSBoolean {};_age .Val =_dee .Val ;return &_age };func (_ac *PSReal )String ()string {return _c .Sprintf ("\u0025\u002e\u0035\u0066",_ac .Val )};const _eaf =0.000001;func (_cf *PSProgram )String ()string {_cfe :="\u007b\u0020";for _ ,_dae :=range *_cf {_cfe +=_dae .String ();_cfe +="\u0020";};_cfe +="\u007d";return _cfe ;};func (_bef *PSOperand )exch (_ebf *PSStack )error {_gcfe ,_gcdb :=_ebf .Pop ();if _gcdb !=nil {return _gcdb ;};_efc ,_gcdb :=_ebf .Pop ();if _gcdb !=nil {return _gcdb ;};_gcdb =_ebf .Push (_gcfe );if _gcdb !=nil {return _gcdb ;};_gcdb =_ebf .Push (_efc );return _gcdb ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_geab *PSOperand )index (_ccb *PSStack )error {_bbef ,_cega :=_ccb .Pop ();if _cega !=nil {return _cega ;};_fbb ,_abc :=_bbef .(*PSInteger );if !_abc {return ErrTypeCheck ;};if _fbb .Val < 0{return ErrRangeCheck ;};if _fbb .Val > len (*_ccb )-1{return ErrStackUnderflow ;};_bbee :=(*_ccb )[len (*_ccb )-1-_fbb .Val ];_cega =_ccb .Push (_bbee .Duplicate ());return _cega ;};

// Pop pops an object from the top of the stack.
func (_dde *PSStack )Pop ()(PSObject ,error ){if len (*_dde )< 1{return nil ,ErrStackUnderflow ;};_gdde :=(*_dde )[len (*_dde )-1];*_dde =(*_dde )[0:len (*_dde )-1];return _gdde ,nil ;};func (_eg *PSInteger )String ()string {return _c .Sprintf ("\u0025\u0064",_eg .Val )};func (_feab *PSOperand )sub (_fde *PSStack )error {_cbde ,_ggag :=_fde .Pop ();if _ggag !=nil {return _ggag ;};_bga ,_ggag :=_fde .Pop ();if _ggag !=nil {return _ggag ;};_egc ,_cff :=_cbde .(*PSReal );_cca ,_fce :=_cbde .(*PSInteger );if !_cff &&!_fce {return ErrTypeCheck ;};_gcag ,_dggb :=_bga .(*PSReal );_baca ,_cdbg :=_bga .(*PSInteger );if !_dggb &&!_cdbg {return ErrTypeCheck ;};if _fce &&_cdbg {_acgb :=_baca .Val -_cca .Val ;_bgfag :=_fde .Push (MakeInteger (_acgb ));return _bgfag ;};var _gcb float64 =0;if _dggb {_gcb =_gcag .Val ;}else {_gcb =float64 (_baca .Val );};if _cff {_gcb -=_egc .Val ;}else {_gcb -=float64 (_cca .Val );};_ggag =_fde .Push (MakeReal (_gcb ));return _ggag ;};func (_cgg *PSOperand )log (_bge *PSStack )error {_affb ,_ddbb :=_bge .PopNumberAsFloat64 ();if _ddbb !=nil {return _ddbb ;};_daa :=_be .Log10 (_affb );_ddbb =_bge .Push (MakeReal (_daa ));return _ddbb ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_cfd *PSOperand )ge (_fag *PSStack )error {_ecg ,_cad :=_fag .PopNumberAsFloat64 ();if _cad !=nil {return _cad ;};_eabb ,_cad :=_fag .PopNumberAsFloat64 ();if _cad !=nil {return _cad ;};if _be .Abs (_eabb -_ecg )< _eaf {_ecgc :=_fag .Push (MakeBool (true ));return _ecgc ;}else if _eabb > _ecg {_fgd :=_fag .Push (MakeBool (true ));return _fgd ;}else {_eaab :=_fag .Push (MakeBool (false ));return _eaab ;};};func (_cda *PSOperand )truncate (_ddac *PSStack )error {_adfe ,_dac :=_ddac .Pop ();if _dac !=nil {return _dac ;};if _dbb ,_ddff :=_adfe .(*PSReal );_ddff {_gbc :=int (_dbb .Val );_dac =_ddac .Push (MakeReal (float64 (_gbc )));}else if _ebdf ,_edf :=_adfe .(*PSInteger );_edf {_dac =_ddac .Push (MakeInteger (_ebdf .Val ));}else {return ErrTypeCheck ;};return _dac ;};func (_ecgca *PSOperand )pop (_fdcg *PSStack )error {_ ,_ddgf :=_fdcg .Pop ();if _ddgf !=nil {return _ddgf ;};return nil ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_eaad *PSOperand )div (_cbe *PSStack )error {_fga ,_gca :=_cbe .Pop ();if _gca !=nil {return _gca ;};_bgg ,_gca :=_cbe .Pop ();if _gca !=nil {return _gca ;};_fgf ,_dfeb :=_fga .(*PSReal );_fge ,_gde :=_fga .(*PSInteger );if !_dfeb &&!_gde {return ErrTypeCheck ;};if _dfeb &&_fgf .Val ==0{return ErrUndefinedResult ;};if _gde &&_fge .Val ==0{return ErrUndefinedResult ;};_afg ,_eab :=_bgg .(*PSReal );_daf ,_acb :=_bgg .(*PSInteger );if !_eab &&!_acb {return ErrTypeCheck ;};var _adb float64 =0;if _eab {_adb =_afg .Val ;}else {_adb =float64 (_daf .Val );};if _dfeb {_adb /=_fgf .Val ;}else {_adb /=float64 (_fge .Val );};_gca =_cbe .Push (MakeReal (_adb ));return _gca ;};func (_eabd *PSOperand )sqrt (_cfde *PSStack )error {_cbg ,_gabc :=_cfde .PopNumberAsFloat64 ();if _gabc !=nil {return _gabc ;};if _cbg < 0{return ErrRangeCheck ;};_ggae :=_be .Sqrt (_cbg );_gabc =_cfde .Push (MakeReal (_ggae ));return _gabc ;};func (_adfda *PSOperand )ifelse (_aff *PSStack )error {_bfdf ,_dgab :=_aff .Pop ();if _dgab !=nil {return _dgab ;};_ebd ,_dgab :=_aff .Pop ();if _dgab !=nil {return _dgab ;};_cab ,_dgab :=_aff .Pop ();if _dgab !=nil {return _dgab ;};_fdg ,_aaca :=_bfdf .(*PSProgram );if !_aaca {return ErrTypeCheck ;};_bdgg ,_aaca :=_ebd .(*PSProgram );if !_aaca {return ErrTypeCheck ;};_dabg ,_aaca :=_cab .(*PSBoolean );if !_aaca {return ErrTypeCheck ;};if _dabg .Val {_bfdfb :=_bdgg .Exec (_aff );return _bfdfb ;};_dgab =_fdg .Exec (_aff );return _dgab ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_bdgb :=PSReal {};_bdgb .Val =val ;return &_bdgb };func (_ceg *PSOperand )atan (_bdga *PSStack )error {_dgb ,_aca :=_bdga .PopNumberAsFloat64 ();if _aca !=nil {return _aca ;};_dfe ,_aca :=_bdga .PopNumberAsFloat64 ();if _aca !=nil {return _aca ;};if _dgb ==0{var _gc error ;if _dfe < 0{_gc =_bdga .Push (MakeReal (270));}else {_gc =_bdga .Push (MakeReal (90));};return _gc ;};_egeg :=_dfe /_dgb ;_fab :=_be .Atan (_egeg )*180/_be .Pi ;_aca =_bdga .Push (MakeReal (_fab ));return _aca ;};func (_fff *PSOperand )roll (_dcf *PSStack )error {_dgd ,_bbae :=_dcf .Pop ();if _bbae !=nil {return _bbae ;};_accc ,_bbae :=_dcf .Pop ();if _bbae !=nil {return _bbae ;};_gacf ,_dabgc :=_dgd .(*PSInteger );if !_dabgc {return ErrTypeCheck ;};_fbfb ,_dabgc :=_accc .(*PSInteger );if !_dabgc {return ErrTypeCheck ;};if _fbfb .Val < 0{return ErrRangeCheck ;};if _fbfb .Val ==0||_fbfb .Val ==1{return nil ;};if _fbfb .Val > len (*_dcf ){return ErrStackUnderflow ;};for _fegc :=0;_fegc < _ggcb (_gacf .Val );_fegc ++{var _cdgf []PSObject ;_cdgf =(*_dcf )[len (*_dcf )-(_fbfb .Val ):len (*_dcf )];if _gacf .Val > 0{_cac :=_cdgf [len (_cdgf )-1];_cdgf =append ([]PSObject {_cac },_cdgf [0:len (_cdgf )-1]...);}else {_cde :=_cdgf [len (_cdgf )-_fbfb .Val ];_cdgf =append (_cdgf [1:],_cde );};_fbc :=append ((*_dcf )[0:len (*_dcf )-_fbfb .Val ],_cdgf ...);_dcf =&_fbc ;};return nil ;};func _ggcb (_baf int )int {if _baf < 0{return -_baf ;};return _baf ;};var ErrUndefinedResult =_b .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_fae *PSOperand )mod (_fabc *PSStack )error {_dfdc ,_gace :=_fabc .Pop ();if _gace !=nil {return _gace ;};_fgb ,_gace :=_fabc .Pop ();if _gace !=nil {return _gace ;};_bag ,_gab :=_dfdc .(*PSInteger );if !_gab {return ErrTypeCheck ;};if _bag .Val ==0{return ErrUndefinedResult ;};_bdc ,_gab :=_fgb .(*PSInteger );if !_gab {return ErrTypeCheck ;};_dbg :=_bdc .Val %_bag .Val ;_gace =_fabc .Push (MakeInteger (_dbg ));return _gace ;};func (_gabe *PSParser )skipSpaces ()(int ,error ){_bgd :=0;for {_gbef ,_dad :=_gabe ._bddg .Peek (1);if _dad !=nil {return 0,_dad ;};if _a .IsWhiteSpace (_gbef [0]){_gabe ._bddg .ReadByte ();_bgd ++;}else {break ;};};return _bgd ,nil ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_gce *PSOperand )exp (_gad *PSStack )error {_bcdf ,_aga :=_gad .PopNumberAsFloat64 ();if _aga !=nil {return _aga ;};_bee ,_aga :=_gad .PopNumberAsFloat64 ();if _aga !=nil {return _aga ;};if _be .Abs (_bcdf )< 1&&_bee < 0{return ErrUndefinedResult ;};_agcde :=_be .Pow (_bee ,_bcdf );_aga =_gad .Push (MakeReal (_agcde ));return _aga ;};func (_gfe *PSParser )parseFunction ()(*PSProgram ,error ){_fcfa ,_ :=_gfe ._bddg .ReadByte ();if _fcfa !='{'{return nil ,_b .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_aef :=NewPSProgram ();for {_gfe .skipSpaces ();_ecce ,_adeb :=_gfe ._bddg .Peek (2);if _adeb !=nil {if _adeb ==_d .EOF {break ;};return nil ,_adeb ;};_bb .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_ecce ));if _ecce [0]=='}'{_bb .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_gfe ._bddg .ReadByte ();break ;}else if _ecce [0]=='{'{_bb .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_gge ,_geg :=_gfe .parseFunction ();if _geg !=nil {return nil ,_geg ;};_aef .Append (_gge );}else if _a .IsDecimalDigit (_ecce [0])||(_ecce [0]=='-'&&_a .IsDecimalDigit (_ecce [1])){_bb .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_fggc ,_gcgf :=_gfe .parseNumber ();if _gcgf !=nil {return nil ,_gcgf ;};_aef .Append (_fggc );}else {_bb .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_ecce ,_ =_gfe ._bddg .Peek (5);_gddg :=string (_ecce );_bb .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_gddg );if (len (_gddg )> 4)&&(_gddg [:5]=="\u0066\u0061\u006cs\u0065"){_gag ,_fgfg :=_gfe .parseBool ();if _fgfg !=nil {return nil ,_fgfg ;};_aef .Append (_gag );}else if (len (_gddg )> 3)&&(_gddg [:4]=="\u0074\u0072\u0075\u0065"){_abcf ,_efb :=_gfe .parseBool ();if _efb !=nil {return nil ,_efb ;};_aef .Append (_abcf );}else {_ceef ,_dcd :=_gfe .parseOperand ();if _dcd !=nil {return nil ,_dcd ;};_aef .Append (_ceef );};};};return _aef ,nil ;};func (_aed *PSOperand )ceiling (_aac *PSStack )error {_dd ,_dfc :=_aac .Pop ();if _dfc !=nil {return _dfc ;};if _cgdf ,_egg :=_dd .(*PSReal );_egg {_dfc =_aac .Push (MakeReal (_be .Ceil (_cgdf .Val )));}else if _agc ,_dea :=_dd .(*PSInteger );_dea {_dfc =_aac .Push (MakeInteger (_agc .Val ));}else {_dfc =ErrTypeCheck ;};return _dfc ;};func (_dfa *PSOperand )or (_fgg *PSStack )error {_cgge ,_fcc :=_fgg .Pop ();if _fcc !=nil {return _fcc ;};_dcgf ,_fcc :=_fgg .Pop ();if _fcc !=nil {return _fcc ;};if _cef ,_gebf :=_cgge .(*PSBoolean );_gebf {_bff ,_dgf :=_dcgf .(*PSBoolean );if !_dgf {return ErrTypeCheck ;};_fcc =_fgg .Push (MakeBool (_cef .Val ||_bff .Val ));return _fcc ;};if _bage ,_aaba :=_cgge .(*PSInteger );_aaba {_dcge ,_fbf :=_dcgf .(*PSInteger );if !_fbf {return ErrTypeCheck ;};_fcc =_fgg .Push (MakeInteger (_bage .Val |_dcge .Val ));return _fcc ;};return ErrTypeCheck ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_fbg :=PSParser {};_fgfe :=_ea .NewBuffer (content );_fbg ._bddg =_dg .NewReader (_fgfe );return &_fbg ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_acae :=PSOperand (val );return &_acae };func (_g *PSProgram )DebugString ()string {_ded :="\u007b\u0020";for _ ,_gg :=range *_g {_ded +=_gg .DebugString ();_ded +="\u0020";};_ded +="\u007d";return _ded ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_ffa *PSStack )DebugString ()string {_cag :="\u005b\u0020";for _ ,_bcafb :=range *_ffa {_cag +=_bcafb .DebugString ();_cag +="\u0020";};_cag +="\u005d";return _cag ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _bbe []float64 ;for _ ,_de :=range objects {if _bea ,_db :=_de .(*PSInteger );_db {_bbe =append (_bbe ,float64 (_bea .Val ));}else if _aa ,_ba :=_de .(*PSReal );_ba {_bbe =append (_bbe ,_aa .Val );}else {return nil ,ErrTypeCheck ;};};return _bbe ,nil ;};func (_fdcb *PSOperand )not (_fade *PSStack )error {_cfg ,_gaced :=_fade .Pop ();if _gaced !=nil {return _gaced ;};if _eca ,_ecdg :=_cfg .(*PSBoolean );_ecdg {_gaced =_fade .Push (MakeBool (!_eca .Val ));return _gaced ;}else if _bec ,_adca :=_cfg .(*PSInteger );_adca {_gaced =_fade .Push (MakeInteger (^_bec .Val ));return _gaced ;}else {return ErrTypeCheck ;};};func (_fad *PSOperand )dup (_bbg *PSStack )error {_fca ,_acc :=_bbg .Pop ();if _acc !=nil {return _acc ;};_acc =_bbg .Push (_fca );if _acc !=nil {return _acc ;};_acc =_bbg .Push (_fca .Duplicate ());return _acc ;};var ErrRangeCheck =_b .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_cdgg *PSProgram )Duplicate ()PSObject {_bf :=&PSProgram {};for _ ,_ec :=range *_cdgg {_bf .Append (_ec .Duplicate ());};return _bf ;};var ErrStackUnderflow =_b .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");

// String returns a string representation of the stack.
func (_baga *PSStack )String ()string {_effc :="\u005b\u0020";for _ ,_fcaa :=range *_baga {_effc +=_fcaa .String ();_effc +="\u0020";};_effc +="\u005d";return _effc ;};func (_cbdb *PSParser )parseOperand ()(*PSOperand ,error ){var _gebg []byte ;for {_cdc ,_gcff :=_cbdb ._bddg .Peek (1);if _gcff !=nil {if _gcff ==_d .EOF {break ;};return nil ,_gcff ;};if _a .IsDelimiter (_cdc [0]){break ;};if _a .IsWhiteSpace (_cdc [0]){break ;};_gfc ,_ :=_cbdb ._bddg .ReadByte ();_gebg =append (_gebg ,_gfc );};if len (_gebg )==0{return nil ,_b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_gebg )),nil ;};