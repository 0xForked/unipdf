//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_c "bufio";_db "bytes";_eg "errors";_df "fmt";_dg "github.com/unidoc/unipdf/v3/common";_f "github.com/unidoc/unipdf/v3/core";_d "io";_ca "math";);func (_bfga *PSOperand )ifCondition (_ggg *PSStack )error {_dag ,_acdc :=_ggg .Pop ();if _acdc !=nil {return _acdc ;};_bag ,_acdc :=_ggg .Pop ();if _acdc !=nil {return _acdc ;};_ddcc ,_cdg :=_dag .(*PSProgram );if !_cdg {return ErrTypeCheck ;};_gbdd ,_cdg :=_bag .(*PSBoolean );if !_cdg {return ErrTypeCheck ;};if _gbdd .Val {_cgdb :=_ddcc .Exec (_ggg );return _cgdb ;};return nil ;};func (_bdgg *PSOperand )pop (_aaa *PSStack )error {_ ,_aea :=_aaa .Pop ();if _aea !=nil {return _aea ;};return nil ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_bagb :=PSReal {};_bagb .Val =val ;return &_bagb };func (_ef *PSProgram )String ()string {_bac :="\u007b\u0020";for _ ,_bc :=range *_ef {_bac +=_bc .String ();_bac +="\u0020";};_bac +="\u007d";return _bac ;};func (_dac *PSBoolean )String ()string {return _df .Sprintf ("\u0025\u0076",_dac .Val )};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_eab *PSStack )DebugString ()string {_gacf :="\u005b\u0020";for _ ,_egbg :=range *_eab {_gacf +=_egbg .DebugString ();_gacf +="\u0020";};_gacf +="\u005d";return _gacf ;};const _b =0.000001;

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_cab *PSOperand )bitshift (_aeb *PSStack )error {_bb ,_feg :=_aeb .PopInteger ();if _feg !=nil {return _feg ;};_gdc ,_feg :=_aeb .PopInteger ();if _feg !=nil {return _feg ;};var _ac int ;if _bb >=0{_ac =_gdc <<uint (_bb );}else {_ac =_gdc >>uint (-_bb );};_feg =_aeb .Push (MakeInteger (_ac ));return _feg ;};func (_gacc *PSOperand )sub (_cged *PSStack )error {_abg ,_gff :=_cged .Pop ();if _gff !=nil {return _gff ;};_gec ,_gff :=_cged .Pop ();if _gff !=nil {return _gff ;};_bbaf ,_adde :=_abg .(*PSReal );_dgeee ,_cae :=_abg .(*PSInteger );if !_adde &&!_cae {return ErrTypeCheck ;};_bfcg ,_dfec :=_gec .(*PSReal );_bcd ,_eeg :=_gec .(*PSInteger );if !_dfec &&!_eeg {return ErrTypeCheck ;};if _cae &&_eeg {_cdfg :=_bcd .Val -_dgeee .Val ;_gfbg :=_cged .Push (MakeInteger (_cdfg ));return _gfbg ;};var _gbfb float64 =0;if _dfec {_gbfb =_bfcg .Val ;}else {_gbfb =float64 (_bcd .Val );};if _adde {_gbfb -=_bbaf .Val ;}else {_gbfb -=float64 (_dgeee .Val );};_gff =_cged .Push (MakeReal (_gbfb ));return _gff ;};func (_ddd *PSInteger )Duplicate ()PSObject {_ged :=PSInteger {};_ged .Val =_ddd .Val ;return &_ged };func (_dgcb *PSParser )parseFunction ()(*PSProgram ,error ){_defc ,_ :=_dgcb ._dcaf .ReadByte ();if _defc !='{'{return nil ,_eg .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_bcc :=NewPSProgram ();for {_dgcb .skipSpaces ();_cbb ,_bea :=_dgcb ._dcaf .Peek (2);if _bea !=nil {if _bea ==_d .EOF {break ;};return nil ,_bea ;};_dg .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_cbb ));if _cbb [0]=='}'{_dg .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_dgcb ._dcaf .ReadByte ();break ;}else if _cbb [0]=='{'{_dg .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_febc ,_bbb :=_dgcb .parseFunction ();if _bbb !=nil {return nil ,_bbb ;};_bcc .Append (_febc );}else if _f .IsDecimalDigit (_cbb [0])||(_cbb [0]=='-'&&_f .IsDecimalDigit (_cbb [1])){_dg .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_bbfd ,_gbg :=_dgcb .parseNumber ();if _gbg !=nil {return nil ,_gbg ;};_bcc .Append (_bbfd );}else {_dg .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_cbb ,_ =_dgcb ._dcaf .Peek (5);_dffd :=string (_cbb );_dg .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_dffd );if (len (_dffd )> 4)&&(_dffd [:5]=="\u0066\u0061\u006cs\u0065"){_agcb ,_dfg :=_dgcb .parseBool ();if _dfg !=nil {return nil ,_dfg ;};_bcc .Append (_agcb );}else if (len (_dffd )> 3)&&(_dffd [:4]=="\u0074\u0072\u0075\u0065"){_dcad ,_cbc :=_dgcb .parseBool ();if _cbc !=nil {return nil ,_cbc ;};_bcc .Append (_dcad );}else {_cff ,_dda :=_dgcb .parseOperand ();if _dda !=nil {return nil ,_dda ;};_bcc .Append (_cff );};};};return _bcc ,nil ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_bg *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_fd :=range objects {_dd :=_bg .Stack .Push (_fd );if _dd !=nil {return nil ,_dd ;};};_gcb :=_bg ._g .Exec (_bg .Stack );if _gcb !=nil {_dg .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gcb );return nil ,_gcb ;};_ge :=[]PSObject (*_bg .Stack );_bg .Stack .Empty ();return _ge ,nil ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_dgc *PSOperand )Exec (stack *PSStack )error {_eb :=ErrUnsupportedOperand ;switch *_dgc {case "\u0061\u0062\u0073":_eb =_dgc .abs (stack );case "\u0061\u0064\u0064":_eb =_dgc .add (stack );case "\u0061\u006e\u0064":_eb =_dgc .and (stack );case "\u0061\u0074\u0061\u006e":_eb =_dgc .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_eb =_dgc .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_eb =_dgc .ceiling (stack );case "\u0063\u006f\u0070\u0079":_eb =_dgc .copy (stack );case "\u0063\u006f\u0073":_eb =_dgc .cos (stack );case "\u0063\u0076\u0069":_eb =_dgc .cvi (stack );case "\u0063\u0076\u0072":_eb =_dgc .cvr (stack );case "\u0064\u0069\u0076":_eb =_dgc .div (stack );case "\u0064\u0075\u0070":_eb =_dgc .dup (stack );case "\u0065\u0071":_eb =_dgc .eq (stack );case "\u0065\u0078\u0063\u0068":_eb =_dgc .exch (stack );case "\u0065\u0078\u0070":_eb =_dgc .exp (stack );case "\u0066\u006c\u006fo\u0072":_eb =_dgc .floor (stack );case "\u0067\u0065":_eb =_dgc .ge (stack );case "\u0067\u0074":_eb =_dgc .gt (stack );case "\u0069\u0064\u0069\u0076":_eb =_dgc .idiv (stack );case "\u0069\u0066":_eb =_dgc .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_eb =_dgc .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_eb =_dgc .index (stack );case "\u006c\u0065":_eb =_dgc .le (stack );case "\u006c\u006f\u0067":_eb =_dgc .log (stack );case "\u006c\u006e":_eb =_dgc .ln (stack );case "\u006c\u0074":_eb =_dgc .lt (stack );case "\u006d\u006f\u0064":_eb =_dgc .mod (stack );case "\u006d\u0075\u006c":_eb =_dgc .mul (stack );case "\u006e\u0065":_eb =_dgc .ne (stack );case "\u006e\u0065\u0067":_eb =_dgc .neg (stack );case "\u006e\u006f\u0074":_eb =_dgc .not (stack );case "\u006f\u0072":_eb =_dgc .or (stack );case "\u0070\u006f\u0070":_eb =_dgc .pop (stack );case "\u0072\u006f\u0075n\u0064":_eb =_dgc .round (stack );case "\u0072\u006f\u006c\u006c":_eb =_dgc .roll (stack );case "\u0073\u0069\u006e":_eb =_dgc .sin (stack );case "\u0073\u0071\u0072\u0074":_eb =_dgc .sqrt (stack );case "\u0073\u0075\u0062":_eb =_dgc .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_eb =_dgc .truncate (stack );case "\u0078\u006f\u0072":_eb =_dgc .xor (stack );};return _eb ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_dcaf *_c .Reader };func (_ffe *PSOperand )ifelse (_gcee *PSStack )error {_cce ,_geee :=_gcee .Pop ();if _geee !=nil {return _geee ;};_bff ,_geee :=_gcee .Pop ();if _geee !=nil {return _geee ;};_aca ,_geee :=_gcee .Pop ();if _geee !=nil {return _geee ;};_gfe ,_agc :=_cce .(*PSProgram );if !_agc {return ErrTypeCheck ;};_cbe ,_agc :=_bff .(*PSProgram );if !_agc {return ErrTypeCheck ;};_dfcd ,_agc :=_aca .(*PSBoolean );if !_agc {return ErrTypeCheck ;};if _dfcd .Val {_beb :=_cbe .Exec (_gcee );return _beb ;};_geee =_gfe .Exec (_gcee );return _geee ;};func (_dbda *PSOperand )round (_dgee *PSStack )error {_beea ,_ebcd :=_dgee .Pop ();if _ebcd !=nil {return _ebcd ;};if _dgga ,_cgg :=_beea .(*PSReal );_cgg {_ebcd =_dgee .Push (MakeReal (_ca .Floor (_dgga .Val +0.5)));}else if _aabc ,_dgeb :=_beea .(*PSInteger );_dgeb {_ebcd =_dgee .Push (MakeInteger (_aabc .Val ));}else {return ErrTypeCheck ;};return _ebcd ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_bde *PSParser )skipSpaces ()(int ,error ){_dcb :=0;for {_ccfa ,_efd :=_bde ._dcaf .Peek (1);if _efd !=nil {return 0,_efd ;};if _f .IsWhiteSpace (_ccfa [0]){_bde ._dcaf .ReadByte ();_dcb ++;}else {break ;};};return _dcb ,nil ;};

// Empty empties the stack.
func (_geg *PSStack )Empty (){*_geg =[]PSObject {}};func (_gbcg *PSOperand )sin (_bbfa *PSStack )error {_cbdb ,_bffc :=_bbfa .PopNumberAsFloat64 ();if _bffc !=nil {return _bffc ;};_bddg :=_ca .Sin (_cbdb *_ca .Pi /180.0);_bffc =_bbfa .Push (MakeReal (_bddg ));return _bffc ;};func (_af *PSProgram )DebugString ()string {_cf :="\u007b\u0020";for _ ,_bgb :=range *_af {_cf +=_bgb .DebugString ();_cf +="\u0020";};_cf +="\u007d";return _cf ;};func (_gceb *PSOperand )floor (_gae *PSStack )error {_gbeg ,_fea :=_gae .Pop ();if _fea !=nil {return _fea ;};if _dgcgb ,_gbfc :=_gbeg .(*PSReal );_gbfc {_fea =_gae .Push (MakeReal (_ca .Floor (_dgcgb .Val )));}else if _faa ,_fcfd :=_gbeg .(*PSInteger );_fcfd {_fea =_gae .Push (MakeInteger (_faa .Val ));}else {return ErrTypeCheck ;};return _fea ;};func (_ggce *PSOperand )copy (_cgac *PSStack )error {_bdd ,_aae :=_cgac .PopInteger ();if _aae !=nil {return _aae ;};if _bdd < 0{return ErrRangeCheck ;};if _bdd > len (*_cgac ){return ErrRangeCheck ;};*_cgac =append (*_cgac ,(*_cgac )[len (*_cgac )-_bdd :]...);return nil ;};func (_eaa *PSOperand )le (_fdca *PSStack )error {_aaf ,_ebf :=_fdca .PopNumberAsFloat64 ();if _ebf !=nil {return _ebf ;};_fbef ,_ebf :=_fdca .PopNumberAsFloat64 ();if _ebf !=nil {return _ebf ;};if _ca .Abs (_fbef -_aaf )< _b {_cdga :=_fdca .Push (MakeBool (true ));return _cdga ;}else if _fbef < _aaf {_cbed :=_fdca .Push (MakeBool (true ));return _cbed ;}else {_bede :=_fdca .Push (MakeBool (false ));return _bede ;};};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_eca :=PSBoolean {};_eca .Val =val ;return &_eca };

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};var ErrUndefinedResult =_eg .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_cge *PSOperand )lt (_gbbb *PSStack )error {_bfb ,_ffd :=_gbbb .PopNumberAsFloat64 ();if _ffd !=nil {return _ffd ;};_aee ,_ffd :=_gbbb .PopNumberAsFloat64 ();if _ffd !=nil {return _ffd ;};if _ca .Abs (_aee -_bfb )< _b {_cege :=_gbbb .Push (MakeBool (false ));return _cege ;}else if _aee < _bfb {_bdc :=_gbbb .Push (MakeBool (true ));return _bdc ;}else {_cgb :=_gbbb .Push (MakeBool (false ));return _cgb ;};};func (_aa *PSOperand )atan (_ege *PSStack )error {_cad ,_bed :=_ege .PopNumberAsFloat64 ();if _bed !=nil {return _bed ;};_ga ,_bed :=_ege .PopNumberAsFloat64 ();if _bed !=nil {return _bed ;};if _cad ==0{var _egf error ;if _ga < 0{_egf =_ege .Push (MakeReal (270));}else {_egf =_ege .Push (MakeReal (90));};return _egf ;};_dbd :=_ga /_cad ;_ae :=_ca .Atan (_dbd )*180/_ca .Pi ;_bed =_ege .Push (MakeReal (_ae ));return _bed ;};func (_afg *PSOperand )mul (_caba *PSStack )error {_aed ,_edd :=_caba .Pop ();if _edd !=nil {return _edd ;};_gfb ,_edd :=_caba .Pop ();if _edd !=nil {return _edd ;};_aac ,_abbc :=_aed .(*PSReal );_cbeg ,_bdf :=_aed .(*PSInteger );if !_abbc &&!_bdf {return ErrTypeCheck ;};_afe ,_cgda :=_gfb .(*PSReal );_bbcf ,_dadb :=_gfb .(*PSInteger );if !_cgda &&!_dadb {return ErrTypeCheck ;};if _bdf &&_dadb {_bffb :=_cbeg .Val *_bbcf .Val ;_dea :=_caba .Push (MakeInteger (_bffb ));return _dea ;};var _gbbbg float64 ;if _abbc {_gbbbg =_aac .Val ;}else {_gbbbg =float64 (_cbeg .Val );};if _cgda {_gbbbg *=_afe .Val ;}else {_gbbbg *=float64 (_bbcf .Val );};_edd =_caba .Push (MakeReal (_gbbbg ));return _edd ;};func (_ggd *PSOperand )sqrt (_age *PSStack )error {_agg ,_cbf :=_age .PopNumberAsFloat64 ();if _cbf !=nil {return _cbf ;};if _agg < 0{return ErrRangeCheck ;};_cceg :=_ca .Sqrt (_agg );_cbf =_age .Push (MakeReal (_cceg ));return _cbf ;};func (_ddg *PSOperand )ne (_fgge *PSStack )error {_fbda :=_ddg .eq (_fgge );if _fbda !=nil {return _fbda ;};_fbda =_ddg .not (_fgge );return _fbda ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_ddb *PSOperand )index (_cac *PSStack )error {_aba ,_fdba :=_cac .Pop ();if _fdba !=nil {return _fdba ;};_gac ,_fcg :=_aba .(*PSInteger );if !_fcg {return ErrTypeCheck ;};if _gac .Val < 0{return ErrRangeCheck ;};if _gac .Val > len (*_cac )-1{return ErrStackUnderflow ;};_dadd :=(*_cac )[len (*_cac )-1-_gac .Val ];_fdba =_cac .Push (_dadd .Duplicate ());return _fdba ;};func (_gfc *PSOperand )roll (_gbec *PSStack )error {_bdbd ,_cdb :=_gbec .Pop ();if _cdb !=nil {return _cdb ;};_caae ,_cdb :=_gbec .Pop ();if _cdb !=nil {return _cdb ;};_cdeg ,_dgeea :=_bdbd .(*PSInteger );if !_dgeea {return ErrTypeCheck ;};_bffe ,_dgeea :=_caae .(*PSInteger );if !_dgeea {return ErrTypeCheck ;};if _bffe .Val < 0{return ErrRangeCheck ;};if _bffe .Val ==0||_bffe .Val ==1{return nil ;};if _bffe .Val > len (*_gbec ){return ErrStackUnderflow ;};for _ceca :=0;_ceca < _ggbb (_cdeg .Val );_ceca ++{var _fcc []PSObject ;_fcc =(*_gbec )[len (*_gbec )-(_bffe .Val ):len (*_gbec )];if _cdeg .Val > 0{_fbfb :=_fcc [len (_fcc )-1];_fcc =append ([]PSObject {_fbfb },_fcc [0:len (_fcc )-1]...);}else {_bbd :=_fcc [len (_fcc )-_bffe .Val ];_fcc =append (_fcc [1:],_bbd );};_aef :=append ((*_gbec )[0:len (*_gbec )-_bffe .Val ],_fcc ...);_gbec =&_aef ;};return nil ;};func (_a *PSBoolean )Duplicate ()PSObject {_dgd :=PSBoolean {};_dgd .Val =_a .Val ;return &_dgd };func (_ecde *PSParser )parseBool ()(*PSBoolean ,error ){_efc ,_fccc :=_ecde ._dcaf .Peek (4);if _fccc !=nil {return MakeBool (false ),_fccc ;};if (len (_efc )>=4)&&(string (_efc [:4])=="\u0074\u0072\u0075\u0065"){_ecde ._dcaf .Discard (4);return MakeBool (true ),nil ;};_efc ,_fccc =_ecde ._dcaf .Peek (5);if _fccc !=nil {return MakeBool (false ),_fccc ;};if (len (_efc )>=5)&&(string (_efc [:5])=="\u0066\u0061\u006cs\u0065"){_ecde ._dcaf .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_eg .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_ffcd :=PSOperand (val );return &_ffcd };func (_bgea *PSParser )parseNumber ()(PSObject ,error ){_eff ,_fcd :=_f .ParseNumber (_bgea ._dcaf );if _fcd !=nil {return nil ,_fcd ;};switch _gdf :=_eff .(type ){case *_f .PdfObjectFloat :return MakeReal (float64 (*_gdf )),nil ;case *_f .PdfObjectInteger :return MakeInteger (int (*_gdf )),nil ;};return nil ,_df .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_eff );};func (_ebc *PSOperand )or (_baf *PSStack )error {_cegfb ,_egg :=_baf .Pop ();if _egg !=nil {return _egg ;};_affc ,_egg :=_baf .Pop ();if _egg !=nil {return _egg ;};if _ffdg ,_bbcfe :=_cegfb .(*PSBoolean );_bbcfe {_acf ,_afc :=_affc .(*PSBoolean );if !_afc {return ErrTypeCheck ;};_egg =_baf .Push (MakeBool (_ffdg .Val ||_acf .Val ));return _egg ;};if _agdd ,_ccd :=_cegfb .(*PSInteger );_ccd {_gcag ,_ada :=_affc .(*PSInteger );if !_ada {return ErrTypeCheck ;};_egg =_baf .Push (MakeInteger (_agdd .Val |_gcag .Val ));return _egg ;};return ErrTypeCheck ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_defbe *PSStack )PopInteger ()(int ,error ){_edb ,_eddbd :=_defbe .Pop ();if _eddbd !=nil {return 0,_eddbd ;};if _efbd ,_fgf :=_edb .(*PSInteger );_fgf {return _efbd .Val ,nil ;};return 0,ErrTypeCheck ;};func (_gb *PSOperand )DebugString ()string {return _df .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_gb );};func (_ec *PSInteger )String ()string {return _df .Sprintf ("\u0025\u0064",_ec .Val )};func (_fga *PSOperand )gt (_cgf *PSStack )error {_abeb ,_agbf :=_cgf .PopNumberAsFloat64 ();if _agbf !=nil {return _agbf ;};_dfb ,_agbf :=_cgf .PopNumberAsFloat64 ();if _agbf !=nil {return _agbf ;};if _ca .Abs (_dfb -_abeb )< _b {_gcac :=_cgf .Push (MakeBool (false ));return _gcac ;}else if _dfb > _abeb {_gee :=_cgf .Push (MakeBool (true ));return _gee ;}else {_acd :=_cgf .Push (MakeBool (false ));return _acd ;};};func (_fcf *PSOperand )div (_fdb *PSStack )error {_cfcf ,_bbg :=_fdb .Pop ();if _bbg !=nil {return _bbg ;};_fad ,_bbg :=_fdb .Pop ();if _bbg !=nil {return _bbg ;};_gf ,_fbf :=_cfcf .(*PSReal );_fbfe ,_ddfc :=_cfcf .(*PSInteger );if !_fbf &&!_ddfc {return ErrTypeCheck ;};if _fbf &&_gf .Val ==0{return ErrUndefinedResult ;};if _ddfc &&_fbfe .Val ==0{return ErrUndefinedResult ;};_gge ,_ggf :=_fad .(*PSReal );_bbf ,_agd :=_fad .(*PSInteger );if !_ggf &&!_agd {return ErrTypeCheck ;};var _bce float64 ;if _ggf {_bce =_gge .Val ;}else {_bce =float64 (_bbf .Val );};if _fbf {_bce /=_gf .Val ;}else {_bce /=float64 (_fbfe .Val );};_bbg =_fdb .Push (MakeReal (_bce ));return _bbg ;};func (_fgb *PSOperand )ln (_bbc *PSStack )error {_fcfc ,_cde :=_bbc .PopNumberAsFloat64 ();if _cde !=nil {return _cde ;};_egae :=_ca .Log (_fcfc );_cde =_bbc .Push (MakeReal (_egae ));return _cde ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_bbbg :=PSInteger {};_bbbg .Val =val ;return &_bbbg };func (_gdcg *PSOperand )dup (_cag *PSStack )error {_ccbg ,_dga :=_cag .Pop ();if _dga !=nil {return _dga ;};_dga =_cag .Push (_ccbg );if _dga !=nil {return _dga ;};_dga =_cag .Push (_ccbg .Duplicate ());return _dga ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_gbf *PSOperand )cvr (_bba *PSStack )error {_dgba ,_abe :=_bba .Pop ();if _abe !=nil {return _abe ;};if _egbb ,_cfb :=_dgba .(*PSReal );_cfb {_abe =_bba .Push (MakeReal (_egbb .Val ));}else if _dgg ,_egac :=_dgba .(*PSInteger );_egac {_abe =_bba .Push (MakeReal (float64 (_dgg .Val )));}else {return ErrTypeCheck ;};return _abe ;};func (_dff *PSOperand )eq (_bad *PSStack )error {_bedd ,_ddde :=_bad .Pop ();if _ddde !=nil {return _ddde ;};_ccc ,_ddde :=_bad .Pop ();if _ddde !=nil {return _ddde ;};_ea ,_gca :=_bedd .(*PSBoolean );_afb ,_ccf :=_ccc .(*PSBoolean );if _gca ||_ccf {var _gbfa error ;if _gca &&_ccf {_gbfa =_bad .Push (MakeBool (_ea .Val ==_afb .Val ));}else {_gbfa =_bad .Push (MakeBool (false ));};return _gbfa ;};var _cbd float64 ;var _abf float64 ;if _cagb ,_fddf :=_bedd .(*PSInteger );_fddf {_cbd =float64 (_cagb .Val );}else if _fde ,_dc :=_bedd .(*PSReal );_dc {_cbd =_fde .Val ;}else {return ErrTypeCheck ;};if _bbad ,_dcc :=_ccc .(*PSInteger );_dcc {_abf =float64 (_bbad .Val );}else if _fdbb ,_ggb :=_ccc .(*PSReal );_ggb {_abf =_fdbb .Val ;}else {return ErrTypeCheck ;};if _ca .Abs (_abf -_cbd )< _b {_ddde =_bad .Push (MakeBool (true ));}else {_ddde =_bad .Push (MakeBool (false ));};return _ddde ;};func (_ccb *PSProgram )Duplicate ()PSObject {_fdde :=&PSProgram {};for _ ,_cd :=range *_ccb {_fdde .Append (_cd .Duplicate ());};return _fdde ;};func (_ede *PSOperand )neg (_eda *PSStack )error {_bcea ,_beda :=_eda .Pop ();if _beda !=nil {return _beda ;};if _efgb ,_geddd :=_bcea .(*PSReal );_geddd {_beda =_eda .Push (MakeReal (-_efgb .Val ));return _beda ;}else if _bcf ,_fcfe :=_bcea .(*PSInteger );_fcfe {_beda =_eda .Push (MakeInteger (-_bcf .Val ));return _beda ;}else {return ErrTypeCheck ;};};var ErrRangeCheck =_eg .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_ecd *PSReal )Duplicate ()PSObject {_caf :=PSReal {};_caf .Val =_ecd .Val ;return &_caf };var ErrStackUnderflow =_eg .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_gce *PSOperand )String ()string {return string (*_gce )};func (_gd *PSBoolean )DebugString ()string {return _df .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_gd .Val );};

// Pop pops an object from the top of the stack.
func (_gfec *PSStack )Pop ()(PSObject ,error ){if len (*_gfec )< 1{return nil ,ErrStackUnderflow ;};_cecf :=(*_gfec )[len (*_gfec )-1];*_gfec =(*_gfec )[0:len (*_gfec )-1];return _cecf ,nil ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_gcbe *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_aaca ,_cbbd :=_gcbe .Pop ();if _cbbd !=nil {return 0,_cbbd ;};if _adf ,_cacd :=_aaca .(*PSReal );_cacd {return _adf .Val ,nil ;}else if _gcc ,_cagc :=_aaca .(*PSInteger );_cagc {return float64 (_gcc .Val ),nil ;}else {return 0,ErrTypeCheck ;};};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_g *PSProgram ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_ddce *PSOperand )exp (_ded *PSStack )error {_bbfb ,_bbadb :=_ded .PopNumberAsFloat64 ();if _bbadb !=nil {return _bbadb ;};_cdd ,_bbadb :=_ded .PopNumberAsFloat64 ();if _bbadb !=nil {return _bbadb ;};if _ca .Abs (_bbfb )< 1&&_cdd < 0{return ErrUndefinedResult ;};_abba :=_ca .Pow (_cdd ,_bbfb );_bbadb =_ded .Push (MakeReal (_abba ));return _bbadb ;};

// Parse parses the postscript and store as a program that can be executed.
func (_defd *PSParser )Parse ()(*PSProgram ,error ){_defd .skipSpaces ();_cefb ,_egge :=_defd ._dcaf .Peek (2);if _egge !=nil {return nil ,_egge ;};if _cefb [0]!='{'{return nil ,_eg .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_bec ,_egge :=_defd .parseFunction ();if _egge !=nil &&_egge !=_d .EOF {return nil ,_egge ;};return _bec ,_egge ;};func (_dfed *PSOperand )ge (_fgg *PSStack )error {_cfd ,_add :=_fgg .PopNumberAsFloat64 ();if _add !=nil {return _add ;};_dcd ,_add :=_fgg .PopNumberAsFloat64 ();if _add !=nil {return _add ;};if _ca .Abs (_dcd -_cfd )< _b {_cdf :=_fgg .Push (MakeBool (true ));return _cdf ;}else if _dcd > _cfd {_fdc :=_fgg .Push (MakeBool (true ));return _fdc ;}else {_bfg :=_fgg .Push (MakeBool (false ));return _bfg ;};};func (_fbac *PSOperand )not (_ead *PSStack )error {_ggbg ,_gcbg :=_ead .Pop ();if _gcbg !=nil {return _gcbg ;};if _addd ,_gbc :=_ggbg .(*PSBoolean );_gbc {_gcbg =_ead .Push (MakeBool (!_addd .Val ));return _gcbg ;}else if _aga ,_bffbb :=_ggbg .(*PSInteger );_bffbb {_gcbg =_ead .Push (MakeInteger (^_aga .Val ));return _gcbg ;}else {return ErrTypeCheck ;};};func (_eba *PSOperand )abs (_bae *PSStack )error {_ab ,_beg :=_bae .Pop ();if _beg !=nil {return _beg ;};if _eef ,_dge :=_ab .(*PSReal );_dge {_bcb :=_eef .Val ;if _bcb < 0{_beg =_bae .Push (MakeReal (-_bcb ));}else {_beg =_bae .Push (MakeReal (_bcb ));};}else if _ceb ,_ceg :=_ab .(*PSInteger );_ceg {_cec :=_ceb .Val ;if _cec < 0{_beg =_bae .Push (MakeInteger (-_cec ));}else {_beg =_bae .Push (MakeInteger (_cec ));};}else {return ErrTypeCheck ;};return _beg ;};func (_be *PSInteger )DebugString ()string {return _df .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_be .Val );};func (_dfea *PSOperand )exch (_ccg *PSStack )error {_dad ,_badb :=_ccg .Pop ();if _badb !=nil {return _badb ;};_bged ,_badb :=_ccg .Pop ();if _badb !=nil {return _badb ;};_badb =_ccg .Push (_dad );if _badb !=nil {return _badb ;};_badb =_ccg .Push (_bged );return _badb ;};func (_cfa *PSOperand )idiv (_bdg *PSStack )error {_ebe ,_bdgc :=_bdg .Pop ();if _bdgc !=nil {return _bdgc ;};_dcf ,_bdgc :=_bdg .Pop ();if _bdgc !=nil {return _bdgc ;};_cef ,_cabc :=_ebe .(*PSInteger );if !_cabc {return ErrTypeCheck ;};if _cef .Val ==0{return ErrUndefinedResult ;};_gbb ,_cabc :=_dcf .(*PSInteger );if !_cabc {return ErrTypeCheck ;};_fag :=_gbb .Val /_cef .Val ;_bdgc =_bdg .Push (MakeInteger (_fag ));return _bdgc ;};func (_bege *PSParser )parseOperand ()(*PSOperand ,error ){var _bcge []byte ;for {_dbcf ,_cbef :=_bege ._dcaf .Peek (1);if _cbef !=nil {if _cbef ==_d .EOF {break ;};return nil ,_cbef ;};if _f .IsDelimiter (_dbcf [0]){break ;};if _f .IsWhiteSpace (_dbcf [0]){break ;};_gag ,_ :=_bege ._dcaf .ReadByte ();_bcge =append (_bcge ,_gag );};if len (_bcge )==0{return nil ,_eg .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_bcge )),nil ;};func (_ccff *PSOperand )truncate (_bcg *PSStack )error {_acfc ,_ffc :=_bcg .Pop ();if _ffc !=nil {return _ffc ;};if _babb ,_fbefa :=_acfc .(*PSReal );_fbefa {_begd :=int (_babb .Val );_ffc =_bcg .Push (MakeReal (float64 (_begd )));}else if _fcgg ,_eaf :=_acfc .(*PSInteger );_eaf {_ffc =_bcg .Push (MakeInteger (_fcgg .Val ));}else {return ErrTypeCheck ;};return _ffc ;};

// Append appends an object to the PSProgram.
func (_fdd *PSProgram )Append (obj PSObject ){*_fdd =append (*_fdd ,obj )};

// Push pushes an object on top of the stack.
func (_aad *PSStack )Push (obj PSObject )error {if len (*_aad )> 100{return ErrStackOverflow ;};*_aad =append (*_aad ,obj );return nil ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};var ErrStackOverflow =_eg .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_cda *PSOperand )ceiling (_fec *PSStack )error {_gddg ,_ed :=_fec .Pop ();if _ed !=nil {return _ed ;};if _dgcg ,_dec :=_gddg .(*PSReal );_dec {_ed =_fec .Push (MakeReal (_ca .Ceil (_dgcg .Val )));}else if _efg ,_gbe :=_gddg .(*PSInteger );_gbe {_ed =_fec .Push (MakeInteger (_efg .Val ));}else {_ed =ErrTypeCheck ;};return _ed ;};func (_cfc *PSOperand )add (_ddf *PSStack )error {_fe ,_dfce :=_ddf .Pop ();if _dfce !=nil {return _dfce ;};_bfc ,_dfce :=_ddf .Pop ();if _dfce !=nil {return _dfce ;};_fba ,_fc :=_fe .(*PSReal );_bd ,_dfe :=_fe .(*PSInteger );if !_fc &&!_dfe {return ErrTypeCheck ;};_fbae ,_dbg :=_bfc .(*PSReal );_cgd ,_fbb :=_bfc .(*PSInteger );if !_dbg &&!_fbb {return ErrTypeCheck ;};if _dfe &&_fbb {_ag :=_bd .Val +_cgd .Val ;_egb :=_ddf .Push (MakeInteger (_ag ));return _egb ;};var _dgb float64 ;if _fc {_dgb =_fba .Val ;}else {_dgb =float64 (_bd .Val );};if _dbg {_dgb +=_fbae .Val ;}else {_dgb +=float64 (_cgd .Val );};_dfce =_ddf .Push (MakeReal (_dgb ));return _dfce ;};var ErrTypeCheck =_eg .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_dfc *PSReal )String ()string {return _df .Sprintf ("\u0025\u002e\u0035\u0066",_dfc .Val )};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ce :=&PSExecutor {};_ce .Stack =NewPSStack ();_ce ._g =program ;return _ce ;};func (_fgd *PSOperand )cvi (_fa *PSStack )error {_cegf ,_bgf :=_fa .Pop ();if _bgf !=nil {return _bgf ;};if _dfd ,_gbd :=_cegf .(*PSReal );_gbd {_fee :=int (_dfd .Val );_bgf =_fa .Push (MakeInteger (_fee ));}else if _gef ,_abb :=_cegf .(*PSInteger );_abb {_gea :=_gef .Val ;_bgf =_fa .Push (MakeInteger (_gea ));}else {return ErrTypeCheck ;};return _bgf ;};func (_cdag *PSOperand )xor (_eddb *PSStack )error {_bada ,_feb :=_eddb .Pop ();if _feb !=nil {return _feb ;};_gda ,_feb :=_eddb .Pop ();if _feb !=nil {return _feb ;};if _cfcc ,_defb :=_bada .(*PSBoolean );_defb {_bfd ,_gddgf :=_gda .(*PSBoolean );if !_gddgf {return ErrTypeCheck ;};_feb =_eddb .Push (MakeBool (_cfcc .Val !=_bfd .Val ));return _feb ;};if _dca ,_babd :=_bada .(*PSInteger );_babd {_fef ,_bfge :=_gda .(*PSInteger );if !_bfge {return ErrTypeCheck ;};_feb =_eddb .Push (MakeInteger (_dca .Val ^_fef .Val ));return _feb ;};return ErrTypeCheck ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_aafad :=PSParser {};_ceec :=_db .NewBuffer (content );_aafad ._dcaf =_c .NewReader (_ceec );return &_aafad ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _dgf []float64 ;for _ ,_ggc :=range objects {if _da ,_cc :=_ggc .(*PSInteger );_cc {_dgf =append (_dgf ,float64 (_da .Val ));}else if _fg ,_gc :=_ggc .(*PSReal );_gc {_dgf =append (_dgf ,_fg .Val );}else {return nil ,ErrTypeCheck ;};};return _dgf ,nil ;};

// String returns a string representation of the stack.
func (_dfcf *PSStack )String ()string {_ffa :="\u005b\u0020";for _ ,_cfcg :=range *_dfcf {_ffa +=_cfcg .String ();_ffa +="\u0020";};_ffa +="\u005d";return _ffa ;};var ErrUnsupportedOperand =_eg .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func _ggbb (_dffb int )int {if _dffb < 0{return -_dffb ;};return _dffb ;};func (_gcae *PSOperand )log (_cfde *PSStack )error {_gaf ,_aafa :=_cfde .PopNumberAsFloat64 ();if _aafa !=nil {return _aafa ;};_fbd :=_ca .Log10 (_gaf );_aafa =_cfde .Push (MakeReal (_fbd ));return _aafa ;};func (_ddc *PSReal )DebugString ()string {return _df .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_ddc .Val );};func (_de *PSOperand )Duplicate ()PSObject {_gga :=*_de ;return &_gga };

// Exec executes the program, typically leaving output values on the stack.
func (_ee *PSProgram )Exec (stack *PSStack )error {for _ ,_bf :=range *_ee {var _fb error ;switch _ced :=_bf .(type ){case *PSInteger :_bab :=_ced ;_fb =stack .Push (_bab );case *PSReal :_cb :=_ced ;_fb =stack .Push (_cb );case *PSBoolean :_efb :=_ced ;_fb =stack .Push (_efb );case *PSProgram :_fbe :=_ced ;_fb =stack .Push (_fbe );case *PSOperand :_cg :=_ced ;_fb =_cg .Exec (stack );default:return ErrTypeCheck ;};if _fb !=nil {return _fb ;};};return nil ;};func (_def *PSOperand )mod (_cagd *PSStack )error {_aab ,_caa :=_cagd .Pop ();if _caa !=nil {return _caa ;};_bdcg ,_caa :=_cagd .Pop ();if _caa !=nil {return _caa ;};_edf ,_faae :=_aab .(*PSInteger );if !_faae {return ErrTypeCheck ;};if _edf .Val ==0{return ErrUndefinedResult ;};_cee ,_faae :=_bdcg .(*PSInteger );if !_faae {return ErrTypeCheck ;};_aeea :=_cee .Val %_edf .Val ;_caa =_cagd .Push (MakeInteger (_aeea ));return _caa ;};func (_agb *PSOperand )cos (_aff *PSStack )error {_agbg ,_ega :=_aff .PopNumberAsFloat64 ();if _ega !=nil {return _ega ;};_bgc :=_ca .Cos (_agbg *_ca .Pi /180.0);_ega =_aff .Push (MakeReal (_bgc ));return _ega ;};func (_dbc *PSOperand )and (_bdb *PSStack )error {_gedd ,_bge :=_bdb .Pop ();if _bge !=nil {return _bge ;};_cecg ,_bge :=_bdb .Pop ();if _bge !=nil {return _bge ;};if _cga ,_dfeg :=_gedd .(*PSBoolean );_dfeg {_bfe ,_efe :=_cecg .(*PSBoolean );if !_efe {return ErrTypeCheck ;};_bge =_bdb .Push (MakeBool (_cga .Val &&_bfe .Val ));return _bge ;};if _ad ,_cbg :=_gedd .(*PSInteger );_cbg {_dba ,_gdd :=_cecg .(*PSInteger );if !_gdd {return ErrTypeCheck ;};_bge =_bdb .Push (MakeInteger (_ad .Val &_dba .Val ));return _bge ;};return ErrTypeCheck ;};