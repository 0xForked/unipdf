//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_e "bufio";_gb "bytes";_g "errors";_gf "fmt";_aa "github.com/unidoc/unipdf/v3/common";_db "github.com/unidoc/unipdf/v3/core";_b "io";_a "math";);func (_bgb *PSOperand )log (_efg *PSStack )error {_cdcb ,_febe :=_efg .PopNumberAsFloat64 ();
if _febe !=nil {return _febe ;};_aefa :=_a .Log10 (_cdcb );_febe =_efg .Push (MakeReal (_aefa ));return _febe ;};func (_cbb *PSOperand )cos (_bff *PSStack )error {_edc ,_eca :=_bff .PopNumberAsFloat64 ();if _eca !=nil {return _eca ;};_baa :=_a .Cos (_edc *_a .Pi /180.0);
_eca =_bff .Push (MakeReal (_baa ));return _eca ;};func (_bag *PSOperand )gt (_ega *PSStack )error {_fcd ,_gdeb :=_ega .PopNumberAsFloat64 ();if _gdeb !=nil {return _gdeb ;};_dec ,_gdeb :=_ega .PopNumberAsFloat64 ();if _gdeb !=nil {return _gdeb ;};if _a .Abs (_dec -_fcd )< _ea {_aef :=_ega .Push (MakeBool (false ));
return _aef ;}else if _dec > _fcd {_gga :=_ega .Push (MakeBool (true ));return _gga ;}else {_cdb :=_ega .Push (MakeBool (false ));return _cdb ;};};var ErrStackOverflow =_g .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");
func (_egf *PSOperand )le (_bggg *PSStack )error {_ced ,_aacc :=_bggg .PopNumberAsFloat64 ();if _aacc !=nil {return _aacc ;};_gbgf ,_aacc :=_bggg .PopNumberAsFloat64 ();if _aacc !=nil {return _aacc ;};if _a .Abs (_gbgf -_ced )< _ea {_eaac :=_bggg .Push (MakeBool (true ));
return _eaac ;}else if _gbgf < _ced {_bcbd :=_bggg .Push (MakeBool (true ));return _bcbd ;}else {_faab :=_bggg .Push (MakeBool (false ));return _faab ;};};var ErrTypeCheck =_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");
func (_ed *PSReal )DebugString ()string {return _gf .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_ed .Val );};var ErrRangeCheck =_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_eba *PSReal )String ()string {return _gf .Sprintf ("\u0025\u002e\u0035\u0066",_eba .Val )};


// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_f :=&PSExecutor {};_f .Stack =NewPSStack ();_f ._bg =program ;return _f ;};func (_edb *PSOperand )mod (_egeg *PSStack )error {_gcgd ,_ffgc :=_egeg .Pop ();if _ffgc !=nil {return _ffgc ;};_gaa ,_ffgc :=_egeg .Pop ();
if _ffgc !=nil {return _ffgc ;};_fefd ,_ccge :=_gcgd .(*PSInteger );if !_ccge {return ErrTypeCheck ;};if _fefd .Val ==0{return ErrUndefinedResult ;};_dga ,_ccge :=_gaa .(*PSInteger );if !_ccge {return ErrTypeCheck ;};_decb :=_dga .Val %_fefd .Val ;_ffgc =_egeg .Push (MakeInteger (_decb ));
return _ffgc ;};func (_dfc *PSOperand )sqrt (_bacc *PSStack )error {_ede ,_gafd :=_bacc .PopNumberAsFloat64 ();if _gafd !=nil {return _gafd ;};if _ede < 0{return ErrRangeCheck ;};_edce :=_a .Sqrt (_ede );_gafd =_bacc .Push (MakeReal (_edce ));return _gafd ;
};func (_gfg *PSOperand )ne (_eda *PSStack )error {_gcgf :=_gfg .eq (_eda );if _gcgf !=nil {return _gcgf ;};_gcgf =_gfg .not (_eda );return _gcgf ;};func (_geg *PSOperand )xor (_eegg *PSStack )error {_beed ,_dcf :=_eegg .Pop ();if _dcf !=nil {return _dcf ;
};_aeb ,_dcf :=_eegg .Pop ();if _dcf !=nil {return _dcf ;};if _bad ,_gdfa :=_beed .(*PSBoolean );_gdfa {_afgc ,_aggg :=_aeb .(*PSBoolean );if !_aggg {return ErrTypeCheck ;};_dcf =_eegg .Push (MakeBool (_bad .Val !=_afgc .Val ));return _dcf ;};if _efba ,_bdc :=_beed .(*PSInteger );
_bdc {_baf ,_abf :=_aeb .(*PSInteger );if !_abf {return ErrTypeCheck ;};_dcf =_eegg .Push (MakeInteger (_efba .Val ^_baf .Val ));return _dcf ;};return ErrTypeCheck ;};

// Append appends an object to the PSProgram.
func (_dae *PSProgram )Append (obj PSObject ){*_dae =append (*_dae ,obj )};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_bfc *PSStack )DebugString ()string {_gbd :="\u005b\u0020";for _ ,_aggb :=range *_bfc {_gbd +=_aggb .DebugString ();_gbd +="\u0020";};_gbd +="\u005d";return _gbd ;};func (_cef *PSOperand )mul (_dad *PSStack )error {_eabc ,_ecg :=_dad .Pop ();if _ecg !=nil {return _ecg ;
};_gef ,_ecg :=_dad .Pop ();if _ecg !=nil {return _ecg ;};_ddc ,_feff :=_eabc .(*PSReal );_gdgg ,_bffe :=_eabc .(*PSInteger );if !_feff &&!_bffe {return ErrTypeCheck ;};_cgcc ,_gbf :=_gef .(*PSReal );_cdcc ,_add :=_gef .(*PSInteger );if !_gbf &&!_add {return ErrTypeCheck ;
};if _bffe &&_add {_fddf :=_gdgg .Val *_cdcc .Val ;_gfa :=_dad .Push (MakeInteger (_fddf ));return _gfa ;};var _cae float64 ;if _feff {_cae =_ddc .Val ;}else {_cae =float64 (_gdgg .Val );};if _gbf {_cae *=_cgcc .Val ;}else {_cae *=float64 (_cdcc .Val );
};_ecg =_dad .Push (MakeReal (_cae ));return _ecg ;};func (_ggge *PSOperand )ifelse (_gggd *PSStack )error {_gbgd ,_daa :=_gggd .Pop ();if _daa !=nil {return _daa ;};_dgg ,_daa :=_gggd .Pop ();if _daa !=nil {return _daa ;};_bdf ,_daa :=_gggd .Pop ();if _daa !=nil {return _daa ;
};_dcc ,_ddg :=_gbgd .(*PSProgram );if !_ddg {return ErrTypeCheck ;};_ccc ,_ddg :=_dgg .(*PSProgram );if !_ddg {return ErrTypeCheck ;};_eebd ,_ddg :=_bdf .(*PSBoolean );if !_ddg {return ErrTypeCheck ;};if _eebd .Val {_faf :=_ccc .Exec (_gggd );return _faf ;
};_daa =_dcc .Exec (_gggd );return _daa ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_gbe *PSOperand )pop (_cda *PSStack )error {_ ,_dcag :=_cda .Pop ();if _dcag !=nil {return _dcag ;};return nil ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _gg []float64 ;for _ ,_aad :=range objects {if _bgf ,_be :=_aad .(*PSInteger );_be {_gg =append (_gg ,float64 (_bgf .Val ));}else if _gc ,_df :=_aad .(*PSReal );_df {_gg =append (_gg ,_gc .Val );
}else {return nil ,ErrTypeCheck ;};};return _gg ,nil ;};func (_aec *PSOperand )exch (_eeac *PSStack )error {_ceag ,_cbd :=_eeac .Pop ();if _cbd !=nil {return _cbd ;};_gaee ,_cbd :=_eeac .Pop ();if _cbd !=nil {return _cbd ;};_cbd =_eeac .Push (_ceag );if _cbd !=nil {return _cbd ;
};_cbd =_eeac .Push (_gaee );return _cbd ;};func (_def *PSOperand )lt (_fdf *PSStack )error {_fcf ,_bfda :=_fdf .PopNumberAsFloat64 ();if _bfda !=nil {return _bfda ;};_dgb ,_bfda :=_fdf .PopNumberAsFloat64 ();if _bfda !=nil {return _bfda ;};if _a .Abs (_dgb -_fcf )< _ea {_cgc :=_fdf .Push (MakeBool (false ));
return _cgc ;}else if _dgb < _fcf {_gdef :=_fdf .Push (MakeBool (true ));return _gdef ;}else {_ccae :=_fdf .Push (MakeBool (false ));return _ccae ;};};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_cbfc :=PSOperand (val );return &_cbfc };func (_beb *PSBoolean )DebugString ()string {return _gf .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_beb .Val );};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_fdce *PSOperand )ceiling (_ce *PSStack )error {_fdb ,_agb :=_ce .Pop ();if _agb !=nil {return _agb ;};if _adc ,_bab :=_fdb .(*PSReal );_bab {_agb =_ce .Push (MakeReal (_a .Ceil (_adc .Val )));}else if _deb ,_faa :=_fdb .(*PSInteger );
_faa {_agb =_ce .Push (MakeInteger (_deb .Val ));}else {_agb =ErrTypeCheck ;};return _agb ;};func (_de *PSInteger )Duplicate ()PSObject {_bga :=PSInteger {};_bga .Val =_de .Val ;return &_bga };

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_bgbb *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_ggdg ,_fbab :=_bgbb .Pop ();if _fbab !=nil {return 0,_fbab ;};if _adcb ,_gbgb :=_ggdg .(*PSReal );_gbgb {return _adcb .Val ,nil ;}else if _gfae ,_edgb :=_ggdg .(*PSInteger );_edgb {return float64 (_gfae .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_fgf *PSOperand )atan (_cdf *PSStack )error {_fa ,_bd :=_cdf .PopNumberAsFloat64 ();if _bd !=nil {return _bd ;};_aacf ,_bd :=_cdf .PopNumberAsFloat64 ();if _bd !=nil {return _bd ;};if _fa ==0{var _gec error ;if _aacf < 0{_gec =_cdf .Push (MakeReal (270));
}else {_gec =_cdf .Push (MakeReal (90));};return _gec ;};_cbf :=_aacf /_fa ;_fga :=_a .Atan (_cbf )*180/_a .Pi ;_bd =_cdf .Push (MakeReal (_fga ));return _bd ;};func (_fded *PSOperand )round (_fcde *PSStack )error {_gbfd ,_ggca :=_fcde .Pop ();if _ggca !=nil {return _ggca ;
};if _dff ,_efa :=_gbfd .(*PSReal );_efa {_ggca =_fcde .Push (MakeReal (_a .Floor (_dff .Val +0.5)));}else if _cgfd ,_adca :=_gbfd .(*PSInteger );_adca {_ggca =_fcde .Push (MakeInteger (_cgfd .Val ));}else {return ErrTypeCheck ;};return _ggca ;};const _ea =0.000001;
func (_dcb *PSParser )parseFunction ()(*PSProgram ,error ){_dacf ,_ :=_dcb ._ddfg .ReadByte ();if _dacf !='{'{return nil ,_g .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_gbb :=NewPSProgram ();for {_dcb .skipSpaces ();
_ecea ,_gfeb :=_dcb ._ddfg .Peek (2);if _gfeb !=nil {if _gfeb ==_b .EOF {break ;};return nil ,_gfeb ;};_aa .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_ecea ));if _ecea [0]=='}'{_aa .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
_dcb ._ddfg .ReadByte ();break ;}else if _ecea [0]=='{'{_aa .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_eeaa ,_agacc :=_dcb .parseFunction ();if _agacc !=nil {return nil ,_agacc ;};_gbb .Append (_eeaa );}else if _db .IsDecimalDigit (_ecea [0])||(_ecea [0]=='-'&&_db .IsDecimalDigit (_ecea [1])){_aa .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_dgaa ,_edde :=_dcb .parseNumber ();if _edde !=nil {return nil ,_edde ;};_gbb .Append (_dgaa );}else {_aa .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_ecea ,_ =_dcb ._ddfg .Peek (5);_gee :=string (_ecea );
_aa .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_gee );if (len (_gee )> 4)&&(_gee [:5]=="\u0066\u0061\u006cs\u0065"){_eegc ,_afcd :=_dcb .parseBool ();if _afcd !=nil {return nil ,_afcd ;};_gbb .Append (_eegc );}else if (len (_gee )> 3)&&(_gee [:4]=="\u0074\u0072\u0075\u0065"){_gbfb ,_fcef :=_dcb .parseBool ();
if _fcef !=nil {return nil ,_fcef ;};_gbb .Append (_gbfb );}else {_ccga ,_acbg :=_dcb .parseOperand ();if _acbg !=nil {return nil ,_acbg ;};_gbb .Append (_ccga );};};};return _gbb ,nil ;};var ErrStackUnderflow =_g .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");
func (_fadf *PSOperand )sub (_afe *PSStack )error {_bfg ,_bbde :=_afe .Pop ();if _bbde !=nil {return _bbde ;};_fge ,_bbde :=_afe .Pop ();if _bbde !=nil {return _bbde ;};_gcd ,_ebd :=_bfg .(*PSReal );_edg ,_edbg :=_bfg .(*PSInteger );if !_ebd &&!_edbg {return ErrTypeCheck ;
};_abb ,_bagd :=_fge .(*PSReal );_fcfd ,_ecdf :=_fge .(*PSInteger );if !_bagd &&!_ecdf {return ErrTypeCheck ;};if _edbg &&_ecdf {_cdbg :=_fcfd .Val -_edg .Val ;_adf :=_afe .Push (MakeInteger (_cdbg ));return _adf ;};var _edcd float64 =0;if _bagd {_edcd =_abb .Val ;
}else {_edcd =float64 (_fcfd .Val );};if _ebd {_edcd -=_gcd .Val ;}else {_edcd -=float64 (_edg .Val );};_bbde =_afe .Push (MakeReal (_edcd ));return _bbde ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_ddfg *_e .Reader };

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_dgfb *PSOperand )exp (_gaf *PSStack )error {_cde ,_bceg :=_gaf .PopNumberAsFloat64 ();if _bceg !=nil {return _bceg ;};_bac ,_bceg :=_gaf .PopNumberAsFloat64 ();if _bceg !=nil {return _bceg ;};if _a .Abs (_cde )< 1&&_bac < 0{return ErrUndefinedResult ;
};_aggc :=_a .Pow (_bac ,_cde );_bceg =_gaf .Push (MakeReal (_aggc ));return _bceg ;};func (_ae *PSBoolean )Duplicate ()PSObject {_gae :=PSBoolean {};_gae .Val =_ae .Val ;return &_gae };func (_gfda *PSParser )parseOperand ()(*PSOperand ,error ){var _aadgf []byte ;
for {_bebc ,_bedd :=_gfda ._ddfg .Peek (1);if _bedd !=nil {if _bedd ==_b .EOF {break ;};return nil ,_bedd ;};if _db .IsDelimiter (_bebc [0]){break ;};if _db .IsWhiteSpace (_bebc [0]){break ;};_debe ,_ :=_gfda ._ddfg .ReadByte ();_aadgf =append (_aadgf ,_debe );
};if len (_aadgf )==0{return nil ,_g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_aadgf )),nil ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_gcg *PSOperand )Exec (stack *PSStack )error {_aac :=ErrUnsupportedOperand ;switch *_gcg {case "\u0061\u0062\u0073":_aac =_gcg .abs (stack );case "\u0061\u0064\u0064":_aac =_gcg .add (stack );case "\u0061\u006e\u0064":_aac =_gcg .and (stack );case "\u0061\u0074\u0061\u006e":_aac =_gcg .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_aac =_gcg .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_aac =_gcg .ceiling (stack );case "\u0063\u006f\u0070\u0079":_aac =_gcg .copy (stack );case "\u0063\u006f\u0073":_aac =_gcg .cos (stack );
case "\u0063\u0076\u0069":_aac =_gcg .cvi (stack );case "\u0063\u0076\u0072":_aac =_gcg .cvr (stack );case "\u0064\u0069\u0076":_aac =_gcg .div (stack );case "\u0064\u0075\u0070":_aac =_gcg .dup (stack );case "\u0065\u0071":_aac =_gcg .eq (stack );case "\u0065\u0078\u0063\u0068":_aac =_gcg .exch (stack );
case "\u0065\u0078\u0070":_aac =_gcg .exp (stack );case "\u0066\u006c\u006fo\u0072":_aac =_gcg .floor (stack );case "\u0067\u0065":_aac =_gcg .ge (stack );case "\u0067\u0074":_aac =_gcg .gt (stack );case "\u0069\u0064\u0069\u0076":_aac =_gcg .idiv (stack );
case "\u0069\u0066":_aac =_gcg .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_aac =_gcg .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_aac =_gcg .index (stack );case "\u006c\u0065":_aac =_gcg .le (stack );case "\u006c\u006f\u0067":_aac =_gcg .log (stack );
case "\u006c\u006e":_aac =_gcg .ln (stack );case "\u006c\u0074":_aac =_gcg .lt (stack );case "\u006d\u006f\u0064":_aac =_gcg .mod (stack );case "\u006d\u0075\u006c":_aac =_gcg .mul (stack );case "\u006e\u0065":_aac =_gcg .ne (stack );case "\u006e\u0065\u0067":_aac =_gcg .neg (stack );
case "\u006e\u006f\u0074":_aac =_gcg .not (stack );case "\u006f\u0072":_aac =_gcg .or (stack );case "\u0070\u006f\u0070":_aac =_gcg .pop (stack );case "\u0072\u006f\u0075n\u0064":_aac =_gcg .round (stack );case "\u0072\u006f\u006c\u006c":_aac =_gcg .roll (stack );
case "\u0073\u0069\u006e":_aac =_gcg .sin (stack );case "\u0073\u0071\u0072\u0074":_aac =_gcg .sqrt (stack );case "\u0073\u0075\u0062":_aac =_gcg .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_aac =_gcg .truncate (stack );case "\u0078\u006f\u0072":_aac =_gcg .xor (stack );
};return _aac ;};func (_ee *PSBoolean )String ()string {return _gf .Sprintf ("\u0025\u0076",_ee .Val )};func (_aaab *PSOperand )or (_bebg *PSStack )error {_cbc ,_gfd :=_bebg .Pop ();if _gfd !=nil {return _gfd ;};_ddfe ,_gfd :=_bebg .Pop ();if _gfd !=nil {return _gfd ;
};if _dca ,_ddcb :=_cbc .(*PSBoolean );_ddcb {_caea ,_eddf :=_ddfe .(*PSBoolean );if !_eddf {return ErrTypeCheck ;};_gfd =_bebg .Push (MakeBool (_dca .Val ||_caea .Val ));return _gfd ;};if _aece ,_efbc :=_cbc .(*PSInteger );_efbc {_ade ,_gfgb :=_ddfe .(*PSInteger );
if !_gfgb {return ErrTypeCheck ;};_gfd =_bebg .Push (MakeInteger (_aece .Val |_ade .Val ));return _gfd ;};return ErrTypeCheck ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_gegg *PSStack )PopInteger ()(int ,error ){_acc ,_bagc :=_gegg .Pop ();if _bagc !=nil {return 0,_bagc ;};if _bgab ,_daeb :=_acc .(*PSInteger );_daeb {return _bgab .Val ,nil ;};return 0,ErrTypeCheck ;};func _adcac (_gcde int )int {if _gcde < 0{return -_gcde ;
};return _gcde ;};func (_bfdcg *PSParser )parseNumber ()(PSObject ,error ){_fcfe ,_efbg :=_db .ParseNumber (_bfdcg ._ddfg );if _efbg !=nil {return nil ,_efbg ;};switch _ebcb :=_fcfe .(type ){case *_db .PdfObjectFloat :return MakeReal (float64 (*_ebcb )),nil ;
case *_db .PdfObjectInteger :return MakeInteger (int (*_ebcb )),nil ;};return nil ,_gf .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fcfe );};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_bg *PSProgram ;};func (_ba *PSInteger )DebugString ()string {return _gf .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ba .Val );};func (_bcbg *PSOperand )neg (_bacf *PSStack )error {_ggbec ,_geb :=_bacf .Pop ();
if _geb !=nil {return _geb ;};if _gbcf ,_cdfb :=_ggbec .(*PSReal );_cdfb {_geb =_bacf .Push (MakeReal (-_gbcf .Val ));return _geb ;}else if _ecd ,_ecac :=_ggbec .(*PSInteger );_ecac {_geb =_bacf .Push (MakeInteger (-_ecd .Val ));return _geb ;}else {return ErrTypeCheck ;
};};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_gcgfd :=PSReal {};_gcgfd .Val =val ;return &_gcgfd };

// Exec executes the program, typically leaving output values on the stack.
func (_bc *PSProgram )Exec (stack *PSStack )error {for _ ,_ac :=range *_bc {var _ge error ;switch _fd :=_ac .(type ){case *PSInteger :_dbe :=_fd ;_ge =stack .Push (_dbe );case *PSReal :_eed :=_fd ;_ge =stack .Push (_eed );case *PSBoolean :_ff :=_fd ;_ge =stack .Push (_ff );
case *PSProgram :_gfb :=_fd ;_ge =stack .Push (_gfb );case *PSOperand :_agc :=_fd ;_ge =_agc .Exec (stack );default:return ErrTypeCheck ;};if _ge !=nil {return _ge ;};};return nil ;};func (_bccf *PSOperand )not (_deg *PSStack )error {_acbb ,_fcc :=_deg .Pop ();
if _fcc !=nil {return _fcc ;};if _bgfe ,_gcfa :=_acbb .(*PSBoolean );_gcfa {_fcc =_deg .Push (MakeBool (!_bgfe .Val ));return _fcc ;}else if _ffgdf ,_efe :=_acbb .(*PSInteger );_efe {_fcc =_deg .Push (MakeInteger (^_ffgdf .Val ));return _fcc ;}else {return ErrTypeCheck ;
};};func (_fb *PSInteger )String ()string {return _gf .Sprintf ("\u0025\u0064",_fb .Val )};func (_ddd *PSOperand )div (_ca *PSStack )error {_gcb ,_ebc :=_ca .Pop ();if _ebc !=nil {return _ebc ;};_fdg ,_ebc :=_ca .Pop ();if _ebc !=nil {return _ebc ;};_dac ,_gac :=_gcb .(*PSReal );
_ece ,_ecf :=_gcb .(*PSInteger );if !_gac &&!_ecf {return ErrTypeCheck ;};if _gac &&_dac .Val ==0{return ErrUndefinedResult ;};if _ecf &&_ece .Val ==0{return ErrUndefinedResult ;};_adb ,_eefe :=_fdg .(*PSReal );_egb ,_efd :=_fdg .(*PSInteger );if !_eefe &&!_efd {return ErrTypeCheck ;
};var _cdcd float64 ;if _eefe {_cdcd =_adb .Val ;}else {_cdcd =float64 (_egb .Val );};if _gac {_cdcd /=_dac .Val ;}else {_cdcd /=float64 (_ece .Val );};_ebc =_ca .Push (MakeReal (_cdcd ));return _ebc ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;var ErrUndefinedResult =_g .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");var ErrUnsupportedOperand =_g .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");


// Empty empties the stack.
func (_agce *PSStack )Empty (){*_agce =[]PSObject {}};

// Pop pops an object from the top of the stack.
func (_dgaf *PSStack )Pop ()(PSObject ,error ){if len (*_dgaf )< 1{return nil ,ErrStackUnderflow ;};_fab :=(*_dgaf )[len (*_dgaf )-1];*_dgaf =(*_dgaf )[0:len (*_dgaf )-1];return _fab ,nil ;};func (_fbg *PSOperand )copy (_feb *PSStack )error {_eg ,_bce :=_feb .PopInteger ();
if _bce !=nil {return _bce ;};if _eg < 0{return ErrRangeCheck ;};if _eg > len (*_feb ){return ErrRangeCheck ;};*_feb =append (*_feb ,(*_feb )[len (*_feb )-_eg :]...);return nil ;};func (_fba *PSOperand )DebugString ()string {return _gf .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_fba );
};func (_gcbc *PSOperand )index (_fff *PSStack )error {_ceage ,_bee :=_fff .Pop ();if _bee !=nil {return _bee ;};_ffd ,_egea :=_ceage .(*PSInteger );if !_egea {return ErrTypeCheck ;};if _ffd .Val < 0{return ErrRangeCheck ;};if _ffd .Val > len (*_fff )-1{return ErrStackUnderflow ;
};_ggbe :=(*_fff )[len (*_fff )-1-_ffd .Val ];_bee =_fff .Push (_ggbe .Duplicate ());return _bee ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_dgcb :=PSParser {};_cgfe :=_gb .NewBuffer (content );_dgcb ._ddfg =_e .NewReader (_cgfe );return &_dgcb ;};func (_da *PSReal )Duplicate ()PSObject {_ad :=PSReal {};_ad .Val =_da .Val ;return &_ad };

// String returns a string representation of the stack.
func (_ccf *PSStack )String ()string {_dadg :="\u005b\u0020";for _ ,_cfcb :=range *_ccf {_dadg +=_cfcb .String ();_dadg +="\u0020";};_dadg +="\u005d";return _dadg ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_bfd *PSOperand )and (_cg *PSStack )error {_cdd ,_dee :=_cg .Pop ();if _dee !=nil {return _dee ;};_dce ,_dee :=_cg .Pop ();if _dee !=nil {return _dee ;};if _dg ,_aaa :=_cdd .(*PSBoolean );_aaa {_ace ,_dbcb :=_dce .(*PSBoolean );
if !_dbcb {return ErrTypeCheck ;};_dee =_cg .Push (MakeBool (_dg .Val &&_ace .Val ));return _dee ;};if _dgf ,_gca :=_cdd .(*PSInteger );_gca {_fdd ,_dbef :=_dce .(*PSInteger );if !_dbef {return ErrTypeCheck ;};_dee =_cg .Push (MakeInteger (_dgf .Val &_fdd .Val ));
return _dee ;};return ErrTypeCheck ;};func (_dgbf *PSParser )skipSpaces ()(int ,error ){_fbed :=0;for {_dgbb ,_fae :=_dgbf ._ddfg .Peek (1);if _fae !=nil {return 0,_fae ;};if _db .IsWhiteSpace (_dgbb [0]){_dgbf ._ddfg .ReadByte ();_fbed ++;}else {break ;
};};return _fbed ,nil ;};func (_ccd *PSOperand )roll (_gba *PSStack )error {_gbfg ,_edca :=_gba .Pop ();if _edca !=nil {return _edca ;};_dgff ,_edca :=_gba .Pop ();if _edca !=nil {return _edca ;};_fcdf ,_agbf :=_gbfg .(*PSInteger );if !_agbf {return ErrTypeCheck ;
};_cbfg ,_agbf :=_dgff .(*PSInteger );if !_agbf {return ErrTypeCheck ;};if _cbfg .Val < 0{return ErrRangeCheck ;};if _cbfg .Val ==0||_cbfg .Val ==1{return nil ;};if _cbfg .Val > len (*_gba ){return ErrStackUnderflow ;};for _cfe :=0;_cfe < _adcac (_fcdf .Val );
_cfe ++{var _eee []PSObject ;_eee =(*_gba )[len (*_gba )-(_cbfg .Val ):len (*_gba )];if _fcdf .Val > 0{_gbaf :=_eee [len (_eee )-1];_eee =append ([]PSObject {_gbaf },_eee [0:len (_eee )-1]...);}else {_gdd :=_eee [len (_eee )-_cbfg .Val ];_eee =append (_eee [1:],_gdd );
};_addc :=append ((*_gba )[0:len (*_gba )-_cbfg .Val ],_eee ...);_gba =&_addc ;};return nil ;};func (_bb *PSProgram )DebugString ()string {_aadf :="\u007b\u0020";for _ ,_dbc :=range *_bb {_aadf +=_dbc .DebugString ();_aadf +="\u0020";};_aadf +="\u007d";
return _aadf ;};func (_ggde *PSOperand )sin (_ecda *PSStack )error {_bebgc ,_debc :=_ecda .PopNumberAsFloat64 ();if _debc !=nil {return _debc ;};_bfff :=_a .Sin (_bebgc *_a .Pi /180.0);_debc =_ecda .Push (MakeReal (_bfff ));return _debc ;};func (_aafb *PSParser )parseBool ()(*PSBoolean ,error ){_fadd ,_gda :=_aafb ._ddfg .Peek (4);
if _gda !=nil {return MakeBool (false ),_gda ;};if (len (_fadd )>=4)&&(string (_fadd [:4])=="\u0074\u0072\u0075\u0065"){_aafb ._ddfg .Discard (4);return MakeBool (true ),nil ;};_fadd ,_gda =_aafb ._ddfg .Peek (5);if _gda !=nil {return MakeBool (false ),_gda ;
};if (len (_fadd )>=5)&&(string (_fadd [:5])=="\u0066\u0061\u006cs\u0065"){_aafb ._ddfg .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_fe *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_eb :=range objects {_ga :=_fe .Stack .Push (_eb );if _ga !=nil {return nil ,_ga ;};};_ag :=_fe ._bg .Exec (_fe .Stack );if _ag !=nil {_aa .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ag );
return nil ,_ag ;};_c :=[]PSObject (*_fe .Stack );_fe .Stack .Empty ();return _c ,nil ;};func (_gaef *PSOperand )cvr (_ef *PSStack )error {_gde ,_ggdd :=_ef .Pop ();if _ggdd !=nil {return _ggdd ;};if _ddf ,_gfe :=_gde .(*PSReal );_gfe {_ggdd =_ef .Push (MakeReal (_ddf .Val ));
}else if _afa ,_eea :=_gde .(*PSInteger );_eea {_ggdd =_ef .Push (MakeReal (float64 (_afa .Val )));}else {return ErrTypeCheck ;};return _ggdd ;};func (_dea *PSOperand )cvi (_acb *PSStack )error {_cdc ,_eec :=_acb .Pop ();if _eec !=nil {return _eec ;};if _fac ,_afc :=_cdc .(*PSReal );
_afc {_bde :=int (_fac .Val );_eec =_acb .Push (MakeInteger (_bde ));}else if _gbc ,_dgc :=_cdc .(*PSInteger );_dgc {_ggc :=_gbc .Val ;_eec =_acb .Push (MakeInteger (_ggc ));}else {return ErrTypeCheck ;};return _eec ;};func (_ggd *PSOperand )add (_ffb *PSStack )error {_fde ,_cff :=_ffb .Pop ();
if _cff !=nil {return _cff ;};_aga ,_cff :=_ffb .Pop ();if _cff !=nil {return _cff ;};_gd ,_gbg :=_fde .(*PSReal );_agad ,_fbaf :=_fde .(*PSInteger );if !_gbg &&!_fbaf {return ErrTypeCheck ;};_aae ,_bf :=_aga .(*PSReal );_eab ,_af :=_aga .(*PSInteger );
if !_bf &&!_af {return ErrTypeCheck ;};if _fbaf &&_af {_dcg :=_agad .Val +_eab .Val ;_eedd :=_ffb .Push (MakeInteger (_dcg ));return _eedd ;};var _aadd float64 ;if _gbg {_aadd =_gd .Val ;}else {_aadd =float64 (_agad .Val );};if _bf {_aadd +=_aae .Val ;
}else {_aadd +=float64 (_eab .Val );};_cff =_ffb .Push (MakeReal (_aadd ));return _cff ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_gbdb :=PSInteger {};_gbdb .Val =val ;return &_gbdb };

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_bbgc :=PSBoolean {};_bbgc .Val =val ;return &_bbgc };func (_bcc *PSOperand )ln (_ddff *PSStack )error {_deeeg ,_edd :=_ddff .PopNumberAsFloat64 ();if _edd !=nil {return _edd ;};_dgdb :=_a .Log (_deeeg );_edd =_ddff .Push (MakeReal (_dgdb ));
return _edd ;};func (_cca *PSOperand )floor (_gad *PSStack )error {_aaea ,_gdf :=_gad .Pop ();if _gdf !=nil {return _gdf ;};if _afg ,_eaa :=_aaea .(*PSReal );_eaa {_gdf =_gad .Push (MakeReal (_a .Floor (_afg .Val )));}else if _ggg ,_bdea :=_aaea .(*PSInteger );
_bdea {_gdf =_gad .Push (MakeInteger (_ggg .Val ));}else {return ErrTypeCheck ;};return _gdf ;};func (_deee *PSOperand )idiv (_cgf *PSStack )error {_aadg ,_bfdc :=_cgf .Pop ();if _bfdc !=nil {return _bfdc ;};_cfc ,_bfdc :=_cgf .Pop ();if _bfdc !=nil {return _bfdc ;
};_abe ,_bggd :=_aadg .(*PSInteger );if !_bggd {return ErrTypeCheck ;};if _abe .Val ==0{return ErrUndefinedResult ;};_deda ,_bggd :=_cfc .(*PSInteger );if !_bggd {return ErrTypeCheck ;};_bbg :=_deda .Val /_abe .Val ;_bfdc =_cgf .Push (MakeInteger (_bbg ));
return _bfdc ;};func (_fg *PSProgram )Duplicate ()PSObject {_cb :=&PSProgram {};for _ ,_cd :=range *_fg {_cb .Append (_cd .Duplicate ());};return _cb ;};func (_bed *PSOperand )bitshift (_ffg *PSStack )error {_ec ,_dbd :=_ffg .PopInteger ();if _dbd !=nil {return _dbd ;
};_ccb ,_dbd :=_ffg .PopInteger ();if _dbd !=nil {return _dbd ;};var _cba int ;if _ec >=0{_cba =_ccb <<uint (_ec );}else {_cba =_ccb >>uint (-_ec );};_dbd =_ffg .Push (MakeInteger (_cba ));return _dbd ;};func (_eeb *PSOperand )eq (_bcbc *PSStack )error {_fee ,_fade :=_bcbc .Pop ();
if _fade !=nil {return _fade ;};_dbce ,_fade :=_bcbc .Pop ();if _fade !=nil {return _fade ;};_edf ,_ffgd :=_fee .(*PSBoolean );_ccg ,_fcec :=_dbce .(*PSBoolean );if _ffgd ||_fcec {var _eeff error ;if _ffgd &&_fcec {_eeff =_bcbc .Push (MakeBool (_edf .Val ==_ccg .Val ));
}else {_eeff =_bcbc .Push (MakeBool (false ));};return _eeff ;};var _gcc float64 ;var _bgd float64 ;if _efc ,_dgd :=_fee .(*PSInteger );_dgd {_gcc =float64 (_efc .Val );}else if _fed ,_bdg :=_fee .(*PSReal );_bdg {_gcc =_fed .Val ;}else {return ErrTypeCheck ;
};if _eeab ,_ged :=_dbce .(*PSInteger );_ged {_bgd =float64 (_eeab .Val );}else if _fedf ,_abc :=_dbce .(*PSReal );_abc {_bgd =_fedf .Val ;}else {return ErrTypeCheck ;};if _a .Abs (_bgd -_gcc )< _ea {_fade =_bcbc .Push (MakeBool (true ));}else {_fade =_bcbc .Push (MakeBool (false ));
};return _fade ;};func (_dd *PSOperand )abs (_fbe *PSStack )error {_dfe ,_bebb :=_fbe .Pop ();if _bebb !=nil {return _bebb ;};if _bgg ,_cf :=_dfe .(*PSReal );_cf {_bcb :=_bgg .Val ;if _bcb < 0{_bebb =_fbe .Push (MakeReal (-_bcb ));}else {_bebb =_fbe .Push (MakeReal (_bcb ));
};}else if _dc ,_aggd :=_dfe .(*PSInteger );_aggd {_cdg :=_dc .Val ;if _cdg < 0{_bebb =_fbe .Push (MakeInteger (-_cdg ));}else {_bebb =_fbe .Push (MakeInteger (_cdg ));};}else {return ErrTypeCheck ;};return _bebb ;};func (_eef *PSOperand )Duplicate ()PSObject {_fdc :=*_eef ;
return &_fdc };

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_gcf *PSOperand )ge (_cbda *PSStack )error {_ffbd ,_ebb :=_cbda .PopNumberAsFloat64 ();if _ebb !=nil {return _ebb ;};_cac ,_ebb :=_cbda .PopNumberAsFloat64 ();if _ebb !=nil {return _ebb ;};if _a .Abs (_cac -_ffbd )< _ea {_dbdf :=_cbda .Push (MakeBool (true ));
return _dbdf ;}else if _cac > _ffbd {_gdg :=_cbda .Push (MakeBool (true ));return _gdg ;}else {_ege :=_cbda .Push (MakeBool (false ));return _ege ;};};func (_fce *PSProgram )String ()string {_ded :="\u007b\u0020";for _ ,_eaf :=range *_fce {_ded +=_eaf .String ();
_ded +="\u0020";};_ded +="\u007d";return _ded ;};func (_cc *PSOperand )String ()string {return string (*_cc )};

// Parse parses the postscript and store as a program that can be executed.
func (_cgb *PSParser )Parse ()(*PSProgram ,error ){_cgb .skipSpaces ();_aaf ,_dag :=_cgb ._ddfg .Peek (2);if _dag !=nil {return nil ,_dag ;};if _aaf [0]!='{'{return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_dfa ,_dag :=_cgb .parseFunction ();if _dag !=nil &&_dag !=_b .EOF {return nil ,_dag ;};return _dfa ,_dag ;};

// Push pushes an object on top of the stack.
func (_agbg *PSStack )Push (obj PSObject )error {if len (*_agbg )> 100{return ErrStackOverflow ;};*_agbg =append (*_agbg ,obj );return nil ;};func (_cea *PSOperand )dup (_ebe *PSStack )error {_fad ,_efb :=_ebe .Pop ();if _efb !=nil {return _efb ;};_efb =_ebe .Push (_fad );
if _efb !=nil {return _efb ;};_efb =_ebe .Push (_fad .Duplicate ());return _efb ;};func (_acea *PSOperand )ifCondition (_fgfc *PSStack )error {_efcf ,_ggb :=_fgfc .Pop ();if _ggb !=nil {return _ggb ;};_aee ,_ggb :=_fgfc .Pop ();if _ggb !=nil {return _ggb ;
};_fef ,_egd :=_efcf .(*PSProgram );if !_egd {return ErrTypeCheck ;};_edfc ,_egd :=_aee .(*PSBoolean );if !_egd {return ErrTypeCheck ;};if _edfc .Val {_cfa :=_fef .Exec (_fgfc );return _cfa ;};return nil ;};func (_caf *PSOperand )truncate (_fdgg *PSStack )error {_efbf ,_decc :=_fdgg .Pop ();
if _decc !=nil {return _decc ;};if _agac ,_fdeb :=_efbf .(*PSReal );_fdeb {_abcf :=int (_agac .Val );_decc =_fdgg .Push (MakeReal (float64 (_abcf )));}else if _cedg ,_eeg :=_efbf .(*PSInteger );_eeg {_decc =_fdgg .Push (MakeInteger (_cedg .Val ));}else {return ErrTypeCheck ;
};return _decc ;};