//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_fc "bufio";_f "bytes";_c "errors";_b "fmt";_a "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/core";_cd "io";_e "math";);func (_acfe *PSOperand )copy (_gfc *PSStack )error {_gfe ,_efd :=_gfc .PopInteger ();if _efd !=nil {return _efd ;
};if _gfe < 0{return ErrRangeCheck ;};if _gfe > len (*_gfc ){return ErrRangeCheck ;};*_gfc =append (*_gfc ,(*_gfc )[len (*_gfc )-_gfe :]...);return nil ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ge :=&PSExecutor {};_ge .Stack =NewPSStack ();_ge ._cc =program ;return _ge ;};func (_ceg *PSOperand )ceiling (_ddg *PSStack )error {_fce ,_bbg :=_ddg .Pop ();if _bbg !=nil {return _bbg ;};if _dff ,_dbd :=_fce .(*PSReal );
_dbd {_bbg =_ddg .Push (MakeReal (_e .Ceil (_dff .Val )));}else if _faf ,_adcf :=_fce .(*PSInteger );_adcf {_bbg =_ddg .Push (MakeInteger (_faf .Val ));}else {_bbg =ErrTypeCheck ;};return _bbg ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_ggda *PSOperand )ge (_gdbb *PSStack )error {_cgag ,_fefb :=_gdbb .PopNumberAsFloat64 ();if _fefb !=nil {return _fefb ;};_eca ,_fefb :=_gdbb .PopNumberAsFloat64 ();if _fefb !=nil {return _fefb ;};if _e .Abs (_eca -_cgag )< _gf {_gfg :=_gdbb .Push (MakeBool (true ));
return _gfg ;}else if _eca > _cgag {_bfc :=_gdbb .Push (MakeBool (true ));return _bfc ;}else {_ffd :=_gdbb .Push (MakeBool (false ));return _ffd ;};};func (_ca *PSInteger )String ()string {return _b .Sprintf ("\u0025\u0064",_ca .Val )};func (_bg *PSReal )DebugString ()string {return _b .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_bg .Val );
};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_dcfa :=PSParser {};_eec :=_f .NewBuffer (content );_dcfa ._ced =_fc .NewReader (_eec );return &_dcfa ;};func _feg (_agaa int )int {if _agaa < 0{return -_agaa ;};return _agaa ;};func (_bag *PSOperand )div (_cefe *PSStack )error {_gcae ,_ea :=_cefe .Pop ();
if _ea !=nil {return _ea ;};_ebge ,_ea :=_cefe .Pop ();if _ea !=nil {return _ea ;};_edb ,_fgb :=_gcae .(*PSReal );_fdf ,_ggfc :=_gcae .(*PSInteger );if !_fgb &&!_ggfc {return ErrTypeCheck ;};if _fgb &&_edb .Val ==0{return ErrUndefinedResult ;};if _ggfc &&_fdf .Val ==0{return ErrUndefinedResult ;
};_fea ,_cad :=_ebge .(*PSReal );_eed ,_eda :=_ebge .(*PSInteger );if !_cad &&!_eda {return ErrTypeCheck ;};var _bec float64 ;if _cad {_bec =_fea .Val ;}else {_bec =float64 (_eed .Val );};if _fgb {_bec /=_edb .Val ;}else {_bec /=float64 (_fdf .Val );};
_ea =_cefe .Push (MakeReal (_bec ));return _ea ;};func (_ggb *PSOperand )atan (_ecg *PSStack )error {_adc ,_edf :=_ecg .PopNumberAsFloat64 ();if _edf !=nil {return _edf ;};_ba ,_edf :=_ecg .PopNumberAsFloat64 ();if _edf !=nil {return _edf ;};if _adc ==0{var _dag error ;
if _ba < 0{_dag =_ecg .Push (MakeReal (270));}else {_dag =_ecg .Push (MakeReal (90));};return _dag ;};_fbdg :=_ba /_adc ;_bfd :=_e .Atan (_fbdg )*180/_e .Pi ;_edf =_ecg .Push (MakeReal (_bfd ));return _edf ;};

// Append appends an object to the PSProgram.
func (_ec *PSProgram )Append (obj PSObject ){*_ec =append (*_ec ,obj )};

// String returns a string representation of the stack.
func (_abc *PSStack )String ()string {_bce :="\u005b\u0020";for _ ,_gefbb :=range *_abc {_bce +=_gefbb .String ();_bce +="\u0020";};_bce +="\u005d";return _bce ;};func (_ebe *PSOperand )ifCondition (_egbg *PSStack )error {_fbg ,_fefg :=_egbg .Pop ();if _fefg !=nil {return _fefg ;
};_edae ,_fefg :=_egbg .Pop ();if _fefg !=nil {return _fefg ;};_bae ,_fge :=_fbg .(*PSProgram );if !_fge {return ErrTypeCheck ;};_ceb ,_fge :=_edae .(*PSBoolean );if !_fge {return ErrTypeCheck ;};if _ceb .Val {_gaf :=_bae .Exec (_egbg );return _gaf ;};
return nil ;};var ErrRangeCheck =_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_cc *PSProgram ;};func (_ae *PSOperand )abs (_ab *PSStack )error {_ecb ,_fb :=_ab .Pop ();if _fb !=nil {return _fb ;};if _fgg ,_aec :=_ecb .(*PSReal );_aec {_db :=_fgg .Val ;if _db < 0{_fb =_ab .Push (MakeReal (-_db ));
}else {_fb =_ab .Push (MakeReal (_db ));};}else if _gdg ,_gca :=_ecb .(*PSInteger );_gca {_fcb :=_gdg .Val ;if _fcb < 0{_fb =_ab .Push (MakeInteger (-_fcb ));}else {_fb =_ab .Push (MakeInteger (_fcb ));};}else {return ErrTypeCheck ;};return _fb ;};func (_fcad *PSOperand )or (_cdbdg *PSStack )error {_eaaa ,_fged :=_cdbdg .Pop ();
if _fged !=nil {return _fged ;};_abg ,_fged :=_cdbdg .Pop ();if _fged !=nil {return _fged ;};if _faa ,_bddf :=_eaaa .(*PSBoolean );_bddf {_dgb ,_bgf :=_abg .(*PSBoolean );if !_bgf {return ErrTypeCheck ;};_fged =_cdbdg .Push (MakeBool (_faa .Val ||_dgb .Val ));
return _fged ;};if _aga ,_eaee :=_eaaa .(*PSInteger );_eaee {_agd ,_cefbb :=_abg .(*PSInteger );if !_cefbb {return ErrTypeCheck ;};_fged =_cdbdg .Push (MakeInteger (_aga .Val |_agd .Val ));return _fged ;};return ErrTypeCheck ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_ced *_fc .Reader };func (_ac *PSReal )Duplicate ()PSObject {_acf :=PSReal {};_acf .Val =_ac .Val ;return &_acf };var ErrStackUnderflow =_c .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_dec *PSProgram )Duplicate ()PSObject {_gag :=&PSProgram {};
for _ ,_fcg :=range *_dec {_gag .Append (_fcg .Duplicate ());};return _gag ;};func (_aee *PSOperand )pop (_gdff *PSStack )error {_ ,_cagg :=_gdff .Pop ();if _cagg !=nil {return _cagg ;};return nil ;};func (_bb *PSOperand )add (_bge *PSStack )error {_bgc ,_bc :=_bge .Pop ();
if _bc !=nil {return _bc ;};_dfd ,_bc :=_bge .Pop ();if _bc !=nil {return _bc ;};_fggb ,_acd :=_bgc .(*PSReal );_fbd ,_ebg :=_bgc .(*PSInteger );if !_acd &&!_ebg {return ErrTypeCheck ;};_dbb ,_bf :=_dfd .(*PSReal );_da ,_fcge :=_dfd .(*PSInteger );if !_bf &&!_fcge {return ErrTypeCheck ;
};if _ebg &&_fcge {_fcfe :=_fbd .Val +_da .Val ;_aba :=_bge .Push (MakeInteger (_fcfe ));return _aba ;};var _gfd float64 ;if _acd {_gfd =_fggb .Val ;}else {_gfd =float64 (_fbd .Val );};if _bf {_gfd +=_dbb .Val ;}else {_gfd +=float64 (_da .Val );};_bc =_bge .Push (MakeReal (_gfd ));
return _bc ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_dgfb :=PSOperand (val );return &_dgfb };

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_dfad :=PSBoolean {};_dfad .Val =val ;return &_dfad };

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_ecag *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_ffaa ,_gfbd :=_ecag .Pop ();if _gfbd !=nil {return 0,_gfbd ;};if _agbb ,_ebgd :=_ffaa .(*PSReal );_ebgd {return _agbb .Val ,nil ;}else if _edgc ,_cgbg :=_ffaa .(*PSInteger );_cgbg {return float64 (_edgc .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_gcac *PSOperand )cvi (_dfa *PSStack )error {_eff ,_fdg :=_dfa .Pop ();if _fdg !=nil {return _fdg ;};if _bcf ,_cdg :=_eff .(*PSReal );_cdg {_cgd :=int (_bcf .Val );_fdg =_dfa .Push (MakeInteger (_cgd ));}else if _eea ,_ggd :=_eff .(*PSInteger );
_ggd {_ff :=_eea .Val ;_fdg =_dfa .Push (MakeInteger (_ff ));}else {return ErrTypeCheck ;};return _fdg ;};var ErrStackOverflow =_c .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_cce *PSBoolean )Duplicate ()PSObject {_fcd :=PSBoolean {};
_fcd .Val =_cce .Val ;return &_fcd };func (_bbc *PSOperand )ifelse (_fede *PSStack )error {_ebgea ,_gec :=_fede .Pop ();if _gec !=nil {return _gec ;};_fcbd ,_gec :=_fede .Pop ();if _gec !=nil {return _gec ;};_cacf ,_gec :=_fede .Pop ();if _gec !=nil {return _gec ;
};_efab ,_gcad :=_ebgea .(*PSProgram );if !_gcad {return ErrTypeCheck ;};_eab ,_gcad :=_fcbd .(*PSProgram );if !_gcad {return ErrTypeCheck ;};_ecge ,_gcad :=_cacf .(*PSBoolean );if !_gcad {return ErrTypeCheck ;};if _ecge .Val {_fad :=_eab .Exec (_fede );
return _fad ;};_gec =_efab .Exec (_fede );return _gec ;};func (_degb *PSOperand )mul (_gece *PSStack )error {_gfa ,_dfff :=_gece .Pop ();if _dfff !=nil {return _dfff ;};_efb ,_dfff :=_gece .Pop ();if _dfff !=nil {return _dfff ;};_dbde ,_gecb :=_gfa .(*PSReal );
_cab ,_eac :=_gfa .(*PSInteger );if !_gecb &&!_eac {return ErrTypeCheck ;};_ddce ,_bcbc :=_efb .(*PSReal );_afe ,_adf :=_efb .(*PSInteger );if !_bcbc &&!_adf {return ErrTypeCheck ;};if _eac &&_adf {_gbcb :=_cab .Val *_afe .Val ;_daad :=_gece .Push (MakeInteger (_gbcb ));
return _daad ;};var _gbce float64 ;if _gecb {_gbce =_dbde .Val ;}else {_gbce =float64 (_cab .Val );};if _bcbc {_gbce *=_ddce .Val ;}else {_gbce *=float64 (_afe .Val );};_dfff =_gece .Push (MakeReal (_gbce ));return _dfff ;};func (_gfdc *PSOperand )le (_gagb *PSStack )error {_acfa ,_gea :=_gagb .PopNumberAsFloat64 ();
if _gea !=nil {return _gea ;};_ecad ,_gea :=_gagb .PopNumberAsFloat64 ();if _gea !=nil {return _gea ;};if _e .Abs (_ecad -_acfa )< _gf {_ddff :=_gagb .Push (MakeBool (true ));return _ddff ;}else if _ecad < _acfa {_fgbd :=_gagb .Push (MakeBool (true ));
return _fgbd ;}else {_edba :=_gagb .Push (MakeBool (false ));return _edba ;};};func (_afca *PSOperand )sqrt (_acfb *PSStack )error {_gdgd ,_dceea :=_acfb .PopNumberAsFloat64 ();if _dceea !=nil {return _dceea ;};if _gdgd < 0{return ErrRangeCheck ;};_dfcb :=_e .Sqrt (_gdgd );
_dceea =_acfb .Push (MakeReal (_dfcb ));return _dceea ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _gc []float64 ;for _ ,_fe :=range objects {if _dc ,_eg :=_fe .(*PSInteger );_eg {_gc =append (_gc ,float64 (_dc .Val ));}else if _ce ,_be :=_fe .(*PSReal );_be {_gc =append (_gc ,_ce .Val );
}else {return nil ,ErrTypeCheck ;};};return _gc ,nil ;};

// Empty empties the stack.
func (_gead *PSStack )Empty (){*_gead =[]PSObject {}};func (_edad *PSOperand )mod (_gac *PSStack )error {_decca ,_cdbd :=_gac .Pop ();if _cdbd !=nil {return _cdbd ;};_fdfc ,_cdbd :=_gac .Pop ();if _cdbd !=nil {return _cdbd ;};_edfa ,_fdc :=_decca .(*PSInteger );
if !_fdc {return ErrTypeCheck ;};if _edfa .Val ==0{return ErrUndefinedResult ;};_bccd ,_fdc :=_fdfc .(*PSInteger );if !_fdc {return ErrTypeCheck ;};_gge :=_bccd .Val %_edfa .Val ;_cdbd =_gac .Push (MakeInteger (_gge ));return _cdbd ;};func (_gba *PSOperand )exch (_gdgg *PSStack )error {_ddf ,_egc :=_gdgg .Pop ();
if _egc !=nil {return _egc ;};_fed ,_egc :=_gdgg .Pop ();if _egc !=nil {return _egc ;};_egc =_gdgg .Push (_ddf );if _egc !=nil {return _egc ;};_egc =_gdgg .Push (_fed );return _egc ;};func (_gad *PSOperand )idiv (_deg *PSStack )error {_eeg ,_def :=_deg .Pop ();
if _def !=nil {return _def ;};_gef ,_def :=_deg .Pop ();if _def !=nil {return _def ;};_feca ,_dfb :=_eeg .(*PSInteger );if !_dfb {return ErrTypeCheck ;};if _feca .Val ==0{return ErrUndefinedResult ;};_deb ,_dfb :=_gef .(*PSInteger );if !_dfb {return ErrTypeCheck ;
};_bdda :=_deb .Val /_feca .Val ;_def =_deg .Push (MakeInteger (_bdda ));return _def ;};func (_fab *PSOperand )DebugString ()string {return _b .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_fab );};var ErrTypeCheck =_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");
func (_afce *PSOperand )sub (_dabd *PSStack )error {_cdgg ,_dcf :=_dabd .Pop ();if _dcf !=nil {return _dcf ;};_gfec ,_dcf :=_dabd .Pop ();if _dcf !=nil {return _dcf ;};_cbc ,_aagg :=_cdgg .(*PSReal );_agae ,_efe :=_cdgg .(*PSInteger );if !_aagg &&!_efe {return ErrTypeCheck ;
};_dbf ,_bdde :=_gfec .(*PSReal );_cgc ,_dabg :=_gfec .(*PSInteger );if !_bdde &&!_dabg {return ErrTypeCheck ;};if _efe &&_dabg {_dccb :=_cgc .Val -_agae .Val ;_cgf :=_dabd .Push (MakeInteger (_dccb ));return _cgf ;};var _gbeg float64 =0;if _bdde {_gbeg =_dbf .Val ;
}else {_gbeg =float64 (_cgc .Val );};if _aagg {_gbeg -=_cbc .Val ;}else {_gbeg -=float64 (_agae .Val );};_dcf =_dabd .Push (MakeReal (_gbeg ));return _dcf ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_bd *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_gg :=range objects {_fec :=_bd .Stack .Push (_gg );if _fec !=nil {return nil ,_fec ;};};_fg :=_bd ._cc .Exec (_bd .Stack );if _fg !=nil {_a .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fg );
return nil ,_fg ;};_cb :=[]PSObject (*_bd .Stack );_bd .Stack .Empty ();return _cb ,nil ;};func (_gfbf *PSOperand )round (_aad *PSStack )error {_egae ,_ade :=_aad .Pop ();if _ade !=nil {return _ade ;};if _daf ,_bdb :=_egae .(*PSReal );_bdb {_ade =_aad .Push (MakeReal (_e .Floor (_daf .Val +0.5)));
}else if _bbe ,_aeb :=_egae .(*PSInteger );_aeb {_ade =_aad .Push (MakeInteger (_bbe .Val ));}else {return ErrTypeCheck ;};return _ade ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_aeab :=PSReal {};_aeab .Val =val ;return &_aeab };func (_ecbf *PSOperand )dup (_fcgf *PSStack )error {_egb ,_abe :=_fcgf .Pop ();if _abe !=nil {return _abe ;};_abe =_fcgf .Push (_egb );if _abe !=nil {return _abe ;};
_abe =_fcgf .Push (_egb .Duplicate ());return _abe ;};func (_ffa *PSOperand )lt (_cca *PSStack )error {_dgd ,_cag :=_cca .PopNumberAsFloat64 ();if _cag !=nil {return _cag ;};_gfce ,_cag :=_cca .PopNumberAsFloat64 ();if _cag !=nil {return _cag ;};if _e .Abs (_gfce -_dgd )< _gf {_eedd :=_cca .Push (MakeBool (false ));
return _eedd ;}else if _gfce < _dgd {_cdb :=_cca .Push (MakeBool (true ));return _cdb ;}else {_aca :=_cca .Push (MakeBool (false ));return _aca ;};};func (_aac *PSOperand )exp (_cdc *PSStack )error {_geg ,_fag :=_cdc .PopNumberAsFloat64 ();if _fag !=nil {return _fag ;
};_abf ,_fag :=_cdc .PopNumberAsFloat64 ();if _fag !=nil {return _fag ;};if _e .Abs (_geg )< 1&&_abf < 0{return ErrUndefinedResult ;};_ddcc :=_e .Pow (_abf ,_geg );_fag =_cdc .Push (MakeReal (_ddcc ));return _fag ;};func (_cbcc *PSParser )parseBool ()(*PSBoolean ,error ){_fcea ,_cgfa :=_cbcc ._ced .Peek (4);
if _cgfa !=nil {return MakeBool (false ),_cgfa ;};if (len (_fcea )>=4)&&(string (_fcea [:4])=="\u0074\u0072\u0075\u0065"){_cbcc ._ced .Discard (4);return MakeBool (true ),nil ;};_fcea ,_cgfa =_cbcc ._ced .Peek (5);if _cgfa !=nil {return MakeBool (false ),_cgfa ;
};if (len (_fcea )>=5)&&(string (_fcea [:5])=="\u0066\u0061\u006cs\u0065"){_cbcc ._ced .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_gdgc *PSOperand )index (_decc *PSStack )error {_bgb ,_agb :=_decc .Pop ();if _agb !=nil {return _agb ;};_fcdd ,_geb :=_bgb .(*PSInteger );if !_geb {return ErrTypeCheck ;};if _fcdd .Val < 0{return ErrRangeCheck ;};if _fcdd .Val > len (*_decc )-1{return ErrStackUnderflow ;
};_bcb :=(*_decc )[len (*_decc )-1-_fcdd .Val ];_agb =_decc .Push (_bcb .Duplicate ());return _agb ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_fcdb *PSOperand )Exec (stack *PSStack )error {_fgd :=ErrUnsupportedOperand ;switch *_fcdb {case "\u0061\u0062\u0073":_fgd =_fcdb .abs (stack );case "\u0061\u0064\u0064":_fgd =_fcdb .add (stack );case "\u0061\u006e\u0064":_fgd =_fcdb .and (stack );
case "\u0061\u0074\u0061\u006e":_fgd =_fcdb .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_fgd =_fcdb .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_fgd =_fcdb .ceiling (stack );case "\u0063\u006f\u0070\u0079":_fgd =_fcdb .copy (stack );
case "\u0063\u006f\u0073":_fgd =_fcdb .cos (stack );case "\u0063\u0076\u0069":_fgd =_fcdb .cvi (stack );case "\u0063\u0076\u0072":_fgd =_fcdb .cvr (stack );case "\u0064\u0069\u0076":_fgd =_fcdb .div (stack );case "\u0064\u0075\u0070":_fgd =_fcdb .dup (stack );
case "\u0065\u0071":_fgd =_fcdb .eq (stack );case "\u0065\u0078\u0063\u0068":_fgd =_fcdb .exch (stack );case "\u0065\u0078\u0070":_fgd =_fcdb .exp (stack );case "\u0066\u006c\u006fo\u0072":_fgd =_fcdb .floor (stack );case "\u0067\u0065":_fgd =_fcdb .ge (stack );
case "\u0067\u0074":_fgd =_fcdb .gt (stack );case "\u0069\u0064\u0069\u0076":_fgd =_fcdb .idiv (stack );case "\u0069\u0066":_fgd =_fcdb .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_fgd =_fcdb .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_fgd =_fcdb .index (stack );
case "\u006c\u0065":_fgd =_fcdb .le (stack );case "\u006c\u006f\u0067":_fgd =_fcdb .log (stack );case "\u006c\u006e":_fgd =_fcdb .ln (stack );case "\u006c\u0074":_fgd =_fcdb .lt (stack );case "\u006d\u006f\u0064":_fgd =_fcdb .mod (stack );case "\u006d\u0075\u006c":_fgd =_fcdb .mul (stack );
case "\u006e\u0065":_fgd =_fcdb .ne (stack );case "\u006e\u0065\u0067":_fgd =_fcdb .neg (stack );case "\u006e\u006f\u0074":_fgd =_fcdb .not (stack );case "\u006f\u0072":_fgd =_fcdb .or (stack );case "\u0070\u006f\u0070":_fgd =_fcdb .pop (stack );case "\u0072\u006f\u0075n\u0064":_fgd =_fcdb .round (stack );
case "\u0072\u006f\u006c\u006c":_fgd =_fcdb .roll (stack );case "\u0073\u0069\u006e":_fgd =_fcdb .sin (stack );case "\u0073\u0071\u0072\u0074":_fgd =_fcdb .sqrt (stack );case "\u0073\u0075\u0062":_fgd =_fcdb .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_fgd =_fcdb .truncate (stack );
case "\u0078\u006f\u0072":_fgd =_fcdb .xor (stack );};return _fgd ;};func (_de *PSInteger )Duplicate ()PSObject {_dce :=PSInteger {};_dce .Val =_de .Val ;return &_dce };func (_dcc *PSOperand )cos (_ggf *PSStack )error {_ege ,_ggff :=_ggf .PopNumberAsFloat64 ();
if _ggff !=nil {return _ggff ;};_cg :=_e .Cos (_ege *_e .Pi /180.0);_ggff =_ggf .Push (MakeReal (_cg ));return _ggff ;};func (_dbcgd *PSOperand )sin (_bbad *PSStack )error {_gff ,_gcg :=_bbad .PopNumberAsFloat64 ();if _gcg !=nil {return _gcg ;};_agf :=_e .Sin (_gff *_e .Pi /180.0);
_gcg =_bbad .Push (MakeReal (_agf ));return _gcg ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_ecgc *PSOperand )roll (_bcfd *PSStack )error {_acb ,_dage :=_bcfd .Pop ();if _dage !=nil {return _dage ;};_abaf ,_dage :=_bcfd .Pop ();if _dage !=nil {return _dage ;};_dea ,_aacd :=_acb .(*PSInteger );
if !_aacd {return ErrTypeCheck ;};_abb ,_aacd :=_abaf .(*PSInteger );if !_aacd {return ErrTypeCheck ;};if _abb .Val < 0{return ErrRangeCheck ;};if _abb .Val ==0||_abb .Val ==1{return nil ;};if _abb .Val > len (*_bcfd ){return ErrStackUnderflow ;};for _age :=0;
_age < _feg (_dea .Val );_age ++{var _gbee []PSObject ;_gbee =(*_bcfd )[len (*_bcfd )-(_abb .Val ):len (*_bcfd )];if _dea .Val > 0{_fade :=_gbee [len (_gbee )-1];_gbee =append ([]PSObject {_fade },_gbee [0:len (_gbee )-1]...);}else {_gbad :=_gbee [len (_gbee )-_abb .Val ];
_gbee =append (_gbee [1:],_gbad );};_fdfe :=append ((*_bcfd )[0:len (*_bcfd )-_abb .Val ],_gbee ...);_bcfd =&_fdfe ;};return nil ;};func (_af *PSOperand )String ()string {return string (*_af )};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_cbf :=PSInteger {};_cbf .Val =val ;return &_cbf };func (_bga *PSOperand )xor (_gbg *PSStack )error {_ggeg ,_dba :=_gbg .Pop ();if _dba !=nil {return _dba ;};_daadb ,_dba :=_gbg .Pop ();if _dba !=nil {return _dba ;
};if _cada ,_feag :=_ggeg .(*PSBoolean );_feag {_acbc ,_beg :=_daadb .(*PSBoolean );if !_beg {return ErrTypeCheck ;};_dba =_gbg .Push (MakeBool (_cada .Val !=_acbc .Val ));return _dba ;};if _ccg ,_efgg :=_ggeg .(*PSInteger );_efgg {_ecbe ,_abfa :=_daadb .(*PSInteger );
if !_abfa {return ErrTypeCheck ;};_dba =_gbg .Push (MakeInteger (_ccg .Val ^_ecbe .Val ));return _dba ;};return ErrTypeCheck ;};const _gf =0.000001;

// Push pushes an object on top of the stack.
func (_ebc *PSStack )Push (obj PSObject )error {if len (*_ebc )> 100{return ErrStackOverflow ;};*_ebc =append (*_ebc ,obj );return nil ;};func (_beae *PSParser )skipSpaces ()(int ,error ){_ded :=0;for {_dbe ,_ggg :=_beae ._ced .Peek (1);if _ggg !=nil {return 0,_ggg ;
};if _d .IsWhiteSpace (_dbe [0]){_beae ._ced .ReadByte ();_ded ++;}else {break ;};};return _ded ,nil ;};func (_fcf *PSBoolean )String ()string {return _b .Sprintf ("\u0025\u0076",_fcf .Val )};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_eag *PSOperand )truncate (_dcfe *PSStack )error {_efg ,_gfee :=_dcfe .Pop ();if _gfee !=nil {return _gfee ;};if _cced ,_dega :=_efg .(*PSReal );_dega {_fae :=int (_cced .Val );_gfee =_dcfe .Push (MakeReal (float64 (_fae )));
}else if _bgce ,_dfg :=_efg .(*PSInteger );_dfg {_gfee =_dcfe .Push (MakeInteger (_bgce .Val ));}else {return ErrTypeCheck ;};return _gfee ;};

// Pop pops an object from the top of the stack.
func (_gcb *PSStack )Pop ()(PSObject ,error ){if len (*_gcb )< 1{return nil ,ErrStackUnderflow ;};_cedd :=(*_gcb )[len (*_gcb )-1];*_gcb =(*_gcb )[0:len (*_gcb )-1];return _cedd ,nil ;};func (_egd *PSOperand )log (_fbff *PSStack )error {_agc ,_ccea :=_fbff .PopNumberAsFloat64 ();
if _ccea !=nil {return _ccea ;};_gdf :=_e .Log10 (_agc );_ccea =_fbff .Push (MakeReal (_gdf ));return _ccea ;};func (_aecd *PSParser )parseFunction ()(*PSProgram ,error ){_fbc ,_ :=_aecd ._ced .ReadByte ();if _fbc !='{'{return nil ,_c .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_dead :=NewPSProgram ();for {_aecd .skipSpaces ();_gafe ,_gdbg :=_aecd ._ced .Peek (2);if _gdbg !=nil {if _gdbg ==_cd .EOF {break ;};return nil ,_gdbg ;};_a .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_gafe ));
if _gafe [0]=='}'{_a .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_aecd ._ced .ReadByte ();break ;}else if _gafe [0]=='{'{_a .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_ebf ,_egbd :=_aecd .parseFunction ();
if _egbd !=nil {return nil ,_egbd ;};_dead .Append (_ebf );}else if _d .IsDecimalDigit (_gafe [0])||(_gafe [0]=='-'&&_d .IsDecimalDigit (_gafe [1])){_a .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_aff ,_dbcc :=_aecd .parseNumber ();if _dbcc !=nil {return nil ,_dbcc ;
};_dead .Append (_aff );}else {_a .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_gafe ,_ =_aecd ._ced .Peek (5);_cffd :=string (_gafe );_a .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_cffd );
if (len (_cffd )> 4)&&(_cffd [:5]=="\u0066\u0061\u006cs\u0065"){_cgb ,_afee :=_aecd .parseBool ();if _afee !=nil {return nil ,_afee ;};_dead .Append (_cgb );}else if (len (_cffd )> 3)&&(_cffd [:4]=="\u0074\u0072\u0075\u0065"){_adcg ,_baga :=_aecd .parseBool ();
if _baga !=nil {return nil ,_baga ;};_dead .Append (_adcg );}else {_feeb ,_ffc :=_aecd .parseOperand ();if _ffc !=nil {return nil ,_ffc ;};_dead .Append (_feeb );};};};return _dead ,nil ;};func (_cga *PSOperand )floor (_bfdb *PSStack )error {_dbbg ,_cgg :=_bfdb .Pop ();
if _cgg !=nil {return _cgg ;};if _ecbc ,_dcee :=_dbbg .(*PSReal );_dcee {_cgg =_bfdb .Push (MakeReal (_e .Floor (_ecbc .Val )));}else if _ceec ,_bcc :=_dbbg .(*PSInteger );_bcc {_cgg =_bfdb .Push (MakeInteger (_ceec .Val ));}else {return ErrTypeCheck ;
};return _cgg ;};func (_dfbg *PSOperand )not (_gega *PSStack )error {_cfc ,_ebd :=_gega .Pop ();if _ebd !=nil {return _ebd ;};if _fbgf ,_bcab :=_cfc .(*PSBoolean );_bcab {_ebd =_gega .Push (MakeBool (!_fbgf .Val ));return _ebd ;}else if _gefb ,_bcd :=_cfc .(*PSInteger );
_bcd {_ebd =_gega .Push (MakeInteger (^_gefb .Val ));return _ebd ;}else {return ErrTypeCheck ;};};func (_ged *PSOperand )ne (_dfe *PSStack )error {_gdgf :=_ged .eq (_dfe );if _gdgf !=nil {return _gdgf ;};_gdgf =_ged .not (_dfe );return _gdgf ;};func (_cfb *PSProgram )String ()string {_df :="\u007b\u0020";
for _ ,_ed :=range *_cfb {_df +=_ed .String ();_df +="\u0020";};_df +="\u007d";return _df ;};

// Parse parses the postscript and store as a program that can be executed.
func (_fcdc *PSParser )Parse ()(*PSProgram ,error ){_fcdc .skipSpaces ();_ccgg ,_bcdg :=_fcdc ._ced .Peek (2);if _bcdg !=nil {return nil ,_bcdg ;};if _ccgg [0]!='{'{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_cdbb ,_bcdg :=_fcdc .parseFunction ();if _bcdg !=nil &&_bcdg !=_cd .EOF {return nil ,_bcdg ;};return _cdbb ,_bcdg ;};func (_fbf *PSOperand )bitshift (_daa *PSStack )error {_acc ,_ecd :=_daa .PopInteger ();if _ecd !=nil {return _ecd ;};_bbf ,_ecd :=_daa .PopInteger ();
if _ecd !=nil {return _ecd ;};var _gdb int ;if _acc >=0{_gdb =_bbf <<uint (_acc );}else {_gdb =_bbf >>uint (-_acc );};_ecd =_daa .Push (MakeInteger (_gdb ));return _ecd ;};func (_eae *PSOperand )eq (_bff *PSStack )error {_ead ,_fga :=_bff .Pop ();if _fga !=nil {return _fga ;
};_gddd ,_fga :=_bff .Pop ();if _fga !=nil {return _fga ;};_dab ,_fgf :=_ead .(*PSBoolean );_aedd ,_dga :=_gddd .(*PSBoolean );if _fgf ||_dga {var _gbe error ;if _fgf &&_dga {_gbe =_bff .Push (MakeBool (_dab .Val ==_aedd .Val ));}else {_gbe =_bff .Push (MakeBool (false ));
};return _gbe ;};var _dbcg float64 ;var _eaa float64 ;if _efa ,_gbf :=_ead .(*PSInteger );_gbf {_dbcg =float64 (_efa .Val );}else if _ddca ,_cbg :=_ead .(*PSReal );_cbg {_dbcg =_ddca .Val ;}else {return ErrTypeCheck ;};if _aea ,_cfff :=_gddd .(*PSInteger );
_cfff {_eaa =float64 (_aea .Val );}else if _bca ,_ag :=_gddd .(*PSReal );_ag {_eaa =_bca .Val ;}else {return ErrTypeCheck ;};if _e .Abs (_eaa -_dbcg )< _gf {_fga =_bff .Push (MakeBool (true ));}else {_fga =_bff .Push (MakeBool (false ));};return _fga ;
};func (_gbb *PSOperand )and (_fd *PSStack )error {_bef ,_fgdg :=_fd .Pop ();if _fgdg !=nil {return _fgdg ;};_bdg ,_fgdg :=_fd .Pop ();if _fgdg !=nil {return _fgdg ;};if _ddd ,_dbc :=_bef .(*PSBoolean );_dbc {_ecf ,_fdd :=_bdg .(*PSBoolean );if !_fdd {return ErrTypeCheck ;
};_fgdg =_fd .Push (MakeBool (_ddd .Val &&_ecf .Val ));return _fgdg ;};if _bba ,_ef :=_bef .(*PSInteger );_ef {_bfe ,_gdd :=_bdg .(*PSInteger );if !_gdd {return ErrTypeCheck ;};_fgdg =_fd .Push (MakeInteger (_bba .Val &_bfe .Val ));return _fgdg ;};return ErrTypeCheck ;
};func (_abd *PSOperand )gt (_aag *PSStack )error {_fedg ,_gdga :=_aag .PopNumberAsFloat64 ();if _gdga !=nil {return _gdga ;};_gbd ,_gdga :=_aag .PopNumberAsFloat64 ();if _gdga !=nil {return _gdga ;};if _e .Abs (_gbd -_fedg )< _gf {_ega :=_aag .Push (MakeBool (false ));
return _ega ;}else if _gbd > _fedg {_afc :=_aag .Push (MakeBool (true ));return _afc ;}else {_becb :=_aag .Push (MakeBool (false ));return _becb ;};};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_fbb *PSStack )PopInteger ()(int ,error ){_egf ,_fbgfd :=_fbb .Pop ();if _fbgfd !=nil {return 0,_fbgfd ;};if _egee ,_agdf :=_egf .(*PSInteger );_agdf {return _egee .Val ,nil ;};return 0,ErrTypeCheck ;};func (_ggc *PSOperand )neg (_edaa *PSStack )error {_efc ,_bccg :=_edaa .Pop ();
if _bccg !=nil {return _bccg ;};if _bgcf ,_acdb :=_efc .(*PSReal );_acdb {_bccg =_edaa .Push (MakeReal (-_bgcf .Val ));return _bccg ;}else if _gacf ,_bbca :=_efc .(*PSInteger );_bbca {_bccg =_edaa .Push (MakeInteger (-_gacf .Val ));return _bccg ;}else {return ErrTypeCheck ;
};};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_dede *PSStack )DebugString ()string {_cccb :="\u005b\u0020";for _ ,_gdfg :=range *_dede {_cccb +=_gdfg .DebugString ();_cccb +="\u0020";};_cccb +="\u005d";return _cccb ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_fdff *PSParser )parseOperand ()(*PSOperand ,error ){var _gcgf []byte ;for {_edg ,_gdbc :=_fdff ._ced .Peek (1);if _gdbc !=nil {if _gdbc ==_cd .EOF {break ;};return nil ,_gdbc ;};if _d .IsDelimiter (_edg [0]){break ;
};if _d .IsWhiteSpace (_edg [0]){break ;};_dee ,_ :=_fdff ._ced .ReadByte ();_gcgf =append (_gcgf ,_dee );};if len (_gcgf )==0{return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_gcgf )),nil ;};func (_ad *PSReal )String ()string {return _b .Sprintf ("\u0025\u002e\u0035\u0066",_ad .Val )};

// Exec executes the program, typically leaving output values on the stack.
func (_fa *PSProgram )Exec (stack *PSStack )error {for _ ,_gb :=range *_fa {var _ecc error ;switch _cef :=_gb .(type ){case *PSInteger :_cac :=_cef ;_ecc =stack .Push (_cac );case *PSReal :_gdc :=_cef ;_ecc =stack .Push (_gdc );case *PSBoolean :_cee :=_cef ;
_ecc =stack .Push (_cee );case *PSProgram :_aa :=_cef ;_ecc =stack .Push (_aa );case *PSOperand :_cefb :=_cef ;_ecc =_cefb .Exec (stack );default:return ErrTypeCheck ;};if _ecc !=nil {return _ecc ;};};return nil ;};func (_ddc *PSOperand )Duplicate ()PSObject {_cff :=*_ddc ;
return &_cff };

// PSInteger represents an integer.
type PSInteger struct{Val int ;};var ErrUndefinedResult =_c .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_ee *PSProgram )DebugString ()string {_eb :="\u007b\u0020";
for _ ,_gfb :=range *_ee {_eb +=_gfb .DebugString ();_eb +="\u0020";};_eb +="\u007d";return _eb ;};var ErrUnsupportedOperand =_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_bdd *PSBoolean )DebugString ()string {return _b .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_bdd .Val );
};func (_fgc *PSParser )parseNumber ()(PSObject ,error ){_edbb ,_eaf :=_d .ParseNumber (_fgc ._ced );if _eaf !=nil {return nil ,_eaf ;};switch _bcaf :=_edbb .(type ){case *_d .PdfObjectFloat :return MakeReal (float64 (*_bcaf )),nil ;case *_d .PdfObjectInteger :return MakeInteger (int (*_bcaf )),nil ;
};return nil ,_b .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_edbb );};func (_ccc *PSOperand )cvr (_fee *PSStack )error {_dg ,_dgf :=_fee .Pop ();if _dgf !=nil {return _dgf ;
};if _fef ,_aed :=_dg .(*PSReal );_aed {_dgf =_fee .Push (MakeReal (_fef .Val ));}else if _dcg ,_ece :=_dg .(*PSInteger );_ece {_dgf =_fee .Push (MakeReal (float64 (_dcg .Val )));}else {return ErrTypeCheck ;};return _dgf ;};func (_ga *PSInteger )DebugString ()string {return _b .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ga .Val );
};func (_gbc *PSOperand )ln (_cec *PSStack )error {_afa ,_fecg :=_cec .PopNumberAsFloat64 ();if _fecg !=nil {return _fecg ;};_fcac :=_e .Log (_afa );_fecg =_cec .Push (MakeReal (_fcac ));return _fecg ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};