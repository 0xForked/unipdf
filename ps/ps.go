//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_de "bufio";_g "bytes";_f "errors";_ge "fmt";_ad "github.com/unidoc/unipdf/v3/common";_ab "github.com/unidoc/unipdf/v3/core";_d "io";_gd "math";);func (_bdaf *PSParser )parseBool ()(*PSBoolean ,error ){_ffdg ,_deef :=_bdaf ._bdef .Peek (4);if _deef !=nil {return MakeBool (false ),_deef ;};if (len (_ffdg )>=4)&&(string (_ffdg [:4])=="\u0074\u0072\u0075\u0065"){_bdaf ._bdef .Discard (4);return MakeBool (true ),nil ;};_ffdg ,_deef =_bdaf ._bdef .Peek (5);if _deef !=nil {return MakeBool (false ),_deef ;};if (len (_ffdg )>=5)&&(string (_ffdg [:5])=="\u0066\u0061\u006cs\u0065"){_bdaf ._bdef .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_f .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_gee *PSReal )String ()string {return _ge .Sprintf ("\u0025\u002e\u0035\u0066",_gee .Val )};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_fffd :=PSOperand (val );return &_fffd };func (_ee *PSProgram )DebugString ()string {_bf :="\u007b\u0020";for _ ,_bg :=range *_ee {_bf +=_bg .DebugString ();_bf +="\u0020";};_bf +="\u007d";return _bf ;};func (_dge *PSOperand )cvi (_gdaf *PSStack )error {_dde ,_bbc :=_gdaf .Pop ();if _bbc !=nil {return _bbc ;};if _edf ,_egf :=_dde .(*PSReal );_egf {_gcg :=int (_edf .Val );_bbc =_gdaf .Push (MakeInteger (_gcg ));}else if _bcg ,_cce :=_dde .(*PSInteger );_cce {_afcg :=_bcg .Val ;_bbc =_gdaf .Push (MakeInteger (_afcg ));}else {return ErrTypeCheck ;};return _bbc ;};var ErrUndefinedResult =_f .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_bgf *PSOperand )String ()string {return _ge .Sprintf ("\u0025\u0073",*_bgf )};func (_acee *PSOperand )sub (_defg *PSStack )error {_dbee ,_cccc :=_defg .Pop ();if _cccc !=nil {return _cccc ;};_dcb ,_cccc :=_defg .Pop ();if _cccc !=nil {return _cccc ;};_fcd ,_ggg :=_dbee .(*PSReal );_begf ,_cbf :=_dbee .(*PSInteger );if !_ggg &&!_cbf {return ErrTypeCheck ;};_bgc ,_cfg :=_dcb .(*PSReal );_agbd ,_gbdb :=_dcb .(*PSInteger );if !_cfg &&!_gbdb {return ErrTypeCheck ;};if _cbf &&_gbdb {_bbed :=_agbd .Val -_begf .Val ;_dab :=_defg .Push (MakeInteger (_bbed ));return _dab ;};var _ecef float64 =0;if _cfg {_ecef =_bgc .Val ;}else {_ecef =float64 (_agbd .Val );};if _ggg {_ecef -=_fcd .Val ;}else {_ecef -=float64 (_begf .Val );};_cccc =_defg .Push (MakeReal (_ecef ));return _cccc ;};func (_ddc *PSOperand )index (_aga *PSStack )error {_bcfd ,_geea :=_aga .Pop ();if _geea !=nil {return _geea ;};_def ,_degd :=_bcfd .(*PSInteger );if !_degd {return ErrTypeCheck ;};if _def .Val < 0{return ErrRangeCheck ;};if _def .Val > len (*_aga )-1{return ErrStackUnderflow ;};_efc :=(*_aga )[len (*_aga )-1-_def .Val ];_geea =_aga .Push (_efc .Duplicate ());return _geea ;};

// Append appends an object to the PSProgram.
func (_ec *PSProgram )Append (obj PSObject ){*_ec =append (*_ec ,obj )};func (_fae *PSReal )Duplicate ()PSObject {_gde :=PSReal {};_gde .Val =_fae .Val ;return &_gde };func (_bgfa *PSOperand )cvr (_egfb *PSStack )error {_bfc ,_dbb :=_egfb .Pop ();if _dbb !=nil {return _dbb ;};if _dggb ,_cg :=_bfc .(*PSReal );_cg {_dbb =_egfb .Push (MakeReal (_dggb .Val ));}else if _efa ,_geg :=_bfc .(*PSInteger );_geg {_dbb =_egfb .Push (MakeReal (float64 (_efa .Val )));}else {return ErrTypeCheck ;};return _dbb ;};func (_ae *PSReal )DebugString ()string {return _ge .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_ae .Val );};

// Empty empties the stack.
func (_ecg *PSStack )Empty (){*_ecg =[]PSObject {}};func (_gff *PSOperand )exp (_acd *PSStack )error {_fbdg ,_dfee :=_acd .PopNumberAsFloat64 ();if _dfee !=nil {return _dfee ;};_cgbc ,_dfee :=_acd .PopNumberAsFloat64 ();if _dfee !=nil {return _dfee ;};if _gd .Abs (_fbdg )< 1&&_cgbc < 0{return ErrUndefinedResult ;};_eca :=_gd .Pow (_cgbc ,_fbdg );_dfee =_acd .Push (MakeReal (_eca ));return _dfee ;};func (_ff *PSBoolean )String ()string {return _ge .Sprintf ("\u0025\u0076",_ff .Val )};func (_ada *PSOperand )add (_gdfa *PSStack )error {_fbf ,_eeb :=_gdfa .Pop ();if _eeb !=nil {return _eeb ;};_bcb ,_eeb :=_gdfa .Pop ();if _eeb !=nil {return _eeb ;};_af ,_dee :=_fbf .(*PSReal );_ca ,_afc :=_fbf .(*PSInteger );if !_dee &&!_afc {return ErrTypeCheck ;};_abae ,_ffca :=_bcb .(*PSReal );_daff ,_ace :=_bcb .(*PSInteger );if !_ffca &&!_ace {return ErrTypeCheck ;};if _afc &&_ace {_ag :=_ca .Val +_daff .Val ;_adb :=_gdfa .Push (MakeInteger (_ag ));return _adb ;};var _gc float64 =0;if _dee {_gc =_af .Val ;}else {_gc =float64 (_ca .Val );};if _ffca {_gc +=_abae .Val ;}else {_gc +=float64 (_daff .Val );};_eeb =_gdfa .Push (MakeReal (_gc ));return _eeb ;};func (_efd *PSInteger )Duplicate ()PSObject {_ga :=PSInteger {};_ga .Val =_efd .Val ;return &_ga };

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_cfd :=PSParser {};_efgc :=_g .NewBuffer (content );_cfd ._bdef =_de .NewReader (_efgc );return &_cfd ;};var ErrRangeCheck =_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_ccdd *PSOperand )mul (_ceb *PSStack )error {_bcbf ,_fbec :=_ceb .Pop ();if _fbec !=nil {return _fbec ;};_gdfc ,_fbec :=_ceb .Pop ();if _fbec !=nil {return _fbec ;};_cba ,_bag :=_bcbf .(*PSReal );_bfcd ,_gfc :=_bcbf .(*PSInteger );if !_bag &&!_gfc {return ErrTypeCheck ;};_beb ,_adgg :=_gdfc .(*PSReal );_bbac ,_cbaf :=_gdfc .(*PSInteger );if !_adgg &&!_cbaf {return ErrTypeCheck ;};if _gfc &&_cbaf {_gdbd :=_bfcd .Val *_bbac .Val ;_aca :=_ceb .Push (MakeInteger (_gdbd ));return _aca ;};var _efbg float64 =0;if _bag {_efbg =_cba .Val ;}else {_efbg =float64 (_bfcd .Val );};if _adgg {_efbg *=_beb .Val ;}else {_efbg *=float64 (_bbac .Val );};_fbec =_ceb .Push (MakeReal (_efbg ));return _fbec ;};func (_efad *PSOperand )neg (_gef *PSStack )error {_geb ,_bcfe :=_gef .Pop ();if _bcfe !=nil {return _bcfe ;};if _dbe ,_fbfa :=_geb .(*PSReal );_fbfa {_bcfe =_gef .Push (MakeReal (-_dbe .Val ));return _bcfe ;}else if _eedd ,_bdc :=_geb .(*PSInteger );_bdc {_bcfe =_gef .Push (MakeInteger (-_eedd .Val ));return _bcfe ;}else {return ErrTypeCheck ;};};func (_gbd *PSOperand )le (_fedc *PSStack )error {_adc ,_egfd :=_fedc .PopNumberAsFloat64 ();if _egfd !=nil {return _egfd ;};_afce ,_egfd :=_fedc .PopNumberAsFloat64 ();if _egfd !=nil {return _egfd ;};if _gd .Abs (_afce -_adc )< _fa {_add :=_fedc .Push (MakeBool (true ));return _add ;}else if _afce < _adc {_ffdc :=_fedc .Push (MakeBool (true ));return _ffdc ;}else {_ebb :=_fedc .Push (MakeBool (false ));return _ebb ;};};func (_cbd *PSOperand )exch (_agd *PSStack )error {_eag ,_beg :=_agd .Pop ();if _beg !=nil {return _beg ;};_bede ,_beg :=_agd .Pop ();if _beg !=nil {return _beg ;};_beg =_agd .Push (_eag );if _beg !=nil {return _beg ;};_beg =_agd .Push (_bede );return _beg ;};func (_eaf *PSOperand )pop (_bee *PSStack )error {_ ,_bcfc :=_bee .Pop ();if _bcfc !=nil {return _bcfc ;};return nil ;};func (_aag *PSOperand )mod (_caa *PSStack )error {_agfd ,_gcf :=_caa .Pop ();if _gcf !=nil {return _gcf ;};_abe ,_gcf :=_caa .Pop ();if _gcf !=nil {return _gcf ;};_daae ,_dccfg :=_agfd .(*PSInteger );if !_dccfg {return ErrTypeCheck ;};if _daae .Val ==0{return ErrUndefinedResult ;};_fedcc ,_dccfg :=_abe .(*PSInteger );if !_dccfg {return ErrTypeCheck ;};_dgeg :=_fedcc .Val %_daae .Val ;_gcf =_caa .Push (MakeInteger (_dgeg ));return _gcf ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_gca *PSOperand )or (_deda *PSStack )error {_gaa ,_ebgc :=_deda .Pop ();if _ebgc !=nil {return _ebgc ;};_dcd ,_ebgc :=_deda .Pop ();if _ebgc !=nil {return _ebgc ;};if _bcd ,_bacf :=_gaa .(*PSBoolean );_bacf {_agac ,_bbgf :=_dcd .(*PSBoolean );if !_bbgf {return ErrTypeCheck ;};_ebgc =_deda .Push (MakeBool (_bcd .Val ||_agac .Val ));return _ebgc ;};if _fgee ,_fcb :=_gaa .(*PSInteger );_fcb {_ffcd ,_aedf :=_dcd .(*PSInteger );if !_aedf {return ErrTypeCheck ;};_ebgc =_deda .Push (MakeInteger (_fgee .Val |_ffcd .Val ));return _ebgc ;};return ErrTypeCheck ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func _adcg (_bcc int )int {if _bcc < 0{return -_bcc ;};return _bcc ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_acf *PSStack )PopInteger ()(int ,error ){_dcdd ,_gcae :=_acf .Pop ();if _gcae !=nil {return 0,_gcae ;};if _ecb ,_cca :=_dcdd .(*PSInteger );_cca {return _ecb .Val ,nil ;};return 0,ErrTypeCheck ;};func (_aab *PSOperand )copy (_dbc *PSStack )error {_afb ,_ba :=_dbc .PopInteger ();if _ba !=nil {return _ba ;};if _afb < 0{return ErrRangeCheck ;};if _afb > len (*_dbc ){return ErrRangeCheck ;};*_dbc =append (*_dbc ,(*_dbc )[len (*_dbc )-_afb :]...);return nil ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_fcf :=PSBoolean {};_fcf .Val =val ;return &_fcf };var ErrTypeCheck =_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_faf *PSOperand )roll (_ced *PSStack )error {_aaae ,_debe :=_ced .Pop ();if _debe !=nil {return _debe ;};_bec ,_debe :=_ced .Pop ();if _debe !=nil {return _debe ;};_bad ,_dbd :=_aaae .(*PSInteger );if !_dbd {return ErrTypeCheck ;};_acb ,_dbd :=_bec .(*PSInteger );if !_dbd {return ErrTypeCheck ;};if _acb .Val < 0{return ErrRangeCheck ;};if _acb .Val ==0||_acb .Val ==1{return nil ;};if _acb .Val > len (*_ced ){return ErrStackUnderflow ;};for _fba :=0;_fba < _adcg (_bad .Val );_fba ++{var _cac []PSObject ;_cac =(*_ced )[len (*_ced )-(_acb .Val ):len (*_ced )];if _bad .Val > 0{_fca :=_cac [len (_cac )-1];_cac =append ([]PSObject {_fca },_cac [0:len (_cac )-1]...);}else {_agg :=_cac [len (_cac )-_acb .Val ];_cac =append (_cac [1:],_agg );};_bcbb :=append ((*_ced )[0:len (*_ced )-_acb .Val ],_cac ...);_ced =&_bcbb ;};return nil ;};func (_cebe *PSOperand )sqrt (_agbb *PSStack )error {_gdcc ,_dfb :=_agbb .PopNumberAsFloat64 ();if _dfb !=nil {return _dfb ;};if _gdcc < 0{return ErrRangeCheck ;};_ceeb :=_gd .Sqrt (_gdcc );_dfb =_agbb .Push (MakeReal (_ceeb ));return _dfb ;};func (_ecf *PSOperand )floor (_adg *PSStack )error {_cdc ,_eaef :=_adg .Pop ();if _eaef !=nil {return _eaef ;};if _baca ,_dgdd :=_cdc .(*PSReal );_dgdd {_eaef =_adg .Push (MakeReal (_gd .Floor (_baca .Val )));}else if _cgg ,_fc :=_cdc .(*PSInteger );_fc {_eaef =_adg .Push (MakeInteger (_cgg .Val ));}else {return ErrTypeCheck ;};return _eaef ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_cga *PSStack )DebugString ()string {_ggbbg :="\u005b\u0020";for _ ,_ccea :=range *_cga {_ggbbg +=_ccea .DebugString ();_ggbbg +="\u0020";};_ggbbg +="\u005d";return _ggbbg ;};const _fa =0.000001;func (_ecce *PSOperand )div (_eec *PSStack )error {_feb ,_bfa :=_eec .Pop ();if _bfa !=nil {return _bfa ;};_eba ,_bfa :=_eec .Pop ();if _bfa !=nil {return _bfa ;};_cgf ,_agb :=_feb .(*PSReal );_fgdg ,_fdeb :=_feb .(*PSInteger );if !_agb &&!_fdeb {return ErrTypeCheck ;};if _agb &&_cgf .Val ==0{return ErrUndefinedResult ;};if _fdeb &&_fgdg .Val ==0{return ErrUndefinedResult ;};_ffb ,_ccc :=_eba .(*PSReal );_bbf ,_aed :=_eba .(*PSInteger );if !_ccc &&!_aed {return ErrTypeCheck ;};var _bcga float64 =0;if _ccc {_bcga =_ffb .Val ;}else {_bcga =float64 (_bbf .Val );};if _agb {_bcga /=_cgf .Val ;}else {_bcga /=float64 (_fgdg .Val );};_bfa =_eec .Push (MakeReal (_bcga ));return _bfa ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_bdef *_de .Reader };

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_eebe *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_dad ,_gcaea :=_eebe .Pop ();if _gcaea !=nil {return 0,_gcaea ;};if _bfd ,_fecb :=_dad .(*PSReal );_fecb {return _bfd .Val ,nil ;}else if _gggb ,_dfc :=_dad .(*PSInteger );_dfc {return float64 (_gggb .Val ),nil ;}else {return 0,ErrTypeCheck ;};};func (_gg *PSInteger )DebugString ()string {return _ge .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_gg .Val );};func (_da *PSInteger )String ()string {return _ge .Sprintf ("\u0025\u0064",_da .Val )};func (_faeg *PSParser )skipSpaces ()(int ,error ){_eagb :=0;for {_ecfb ,_bade :=_faeg ._bdef .Peek (1);if _bade !=nil {return 0,_bade ;};if _ab .IsWhiteSpace (_ecfb [0]){_faeg ._bdef .ReadByte ();_eagb ++;}else {break ;};};return _eagb ,nil ;};func (_fga *PSOperand )ceiling (_dce *PSStack )error {_bed ,_bbdd :=_dce .Pop ();if _bbdd !=nil {return _bbdd ;};if _daa ,_cdf :=_bed .(*PSReal );_cdf {_bbdd =_dce .Push (MakeReal (_gd .Ceil (_daa .Val )));}else if _fad ,_aef :=_bed .(*PSInteger );_aef {_bbdd =_dce .Push (MakeInteger (_fad .Val ));}else {_bbdd =ErrTypeCheck ;};return _bbdd ;};func (_cbef *PSOperand )eq (_fge *PSStack )error {_feg ,_gdc :=_fge .Pop ();if _gdc !=nil {return _gdc ;};_aad ,_gdc :=_fge .Pop ();if _gdc !=nil {return _gdc ;};_fbdb ,_bd :=_feg .(*PSBoolean );_ece ,_fbe :=_aad .(*PSBoolean );if _bd ||_fbe {var _cbg error ;if _bd &&_fbe {_cbg =_fge .Push (MakeBool (_fbdb .Val ==_ece .Val ));}else {_cbg =_fge .Push (MakeBool (false ));};return _cbg ;};var _aee float64 ;var _dgaf float64 ;if _fbc ,_ddeg :=_feg .(*PSInteger );_ddeg {_aee =float64 (_fbc .Val );}else if _eecg ,_dcc :=_feg .(*PSReal );_dcc {_aee =_eecg .Val ;}else {return ErrTypeCheck ;};if _deg ,_bac :=_aad .(*PSInteger );_bac {_dgaf =float64 (_deg .Val );}else if _gdb ,_bba :=_aad .(*PSReal );_bba {_dgaf =_gdb .Val ;}else {return ErrTypeCheck ;};if _gd .Abs (_dgaf -_aee )< _fa {_gdc =_fge .Push (MakeBool (true ));}else {_gdc =_fge .Push (MakeBool (false ));};return _gdc ;};func (_eee *PSOperand )atan (_ed *PSStack )error {_cbeg ,_ded :=_ed .PopNumberAsFloat64 ();if _ded !=nil {return _ded ;};_cd ,_ded :=_ed .PopNumberAsFloat64 ();if _ded !=nil {return _ded ;};if _cbeg ==0{var _dgg error ;if _cd < 0{_dgg =_ed .Push (MakeReal (270));}else {_dgg =_ed .Push (MakeReal (90));};return _dgg ;};_cdg :=_cd /_cbeg ;_egg :=_gd .Atan (_cdg )*180/_gd .Pi ;_ded =_ed .Push (MakeReal (_egg ));return _ded ;};var ErrUnsupportedOperand =_f .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_fcad :=PSInteger {};_fcad .Val =val ;return &_fcad };

// Exec executes the program, typically leaving output values on the stack.
func (_ggf *PSProgram )Exec (stack *PSStack )error {for _ ,_geab :=range *_ggf {var _bb error ;switch _gae :=_geab .(type ){case *PSInteger :_cc :=_gae ;_bb =stack .Push (_cc );case *PSReal :_efb :=_gae ;_bb =stack .Push (_efb );case *PSBoolean :_cee :=_gae ;_bb =stack .Push (_cee );case *PSProgram :_eb :=_gae ;_bb =stack .Push (_eb );case *PSOperand :_ffc :=_gae ;_bb =_ffc .Exec (stack );default:return ErrTypeCheck ;};if _bb !=nil {return _bb ;};};return nil ;};func (_gda *PSProgram )String ()string {_dd :="\u007b\u0020";for _ ,_aa :=range *_gda {_dd +=_aa .String ();_dd +="\u0020";};_dd +="\u007d";return _dd ;};func (_fdebd *PSParser )parseNumber ()(PSObject ,error ){_bbda ,_gfcd :=_ab .ParseNumber (_fdebd ._bdef );if _gfcd !=nil {return nil ,_gfcd ;};switch _gecd :=_bbda .(type ){case *_ab .PdfObjectFloat :return MakeReal (float64 (*_gecd )),nil ;case *_ab .PdfObjectInteger :return MakeInteger (int (*_gecd )),nil ;};return nil ,_ge .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bbda );};var ErrStackOverflow =_f .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_aac *PSOperand )idiv (_aaa *PSStack )error {_dfd ,_gce :=_aaa .Pop ();if _gce !=nil {return _gce ;};_aafg ,_gce :=_aaa .Pop ();if _gce !=nil {return _gce ;};_ebg ,_cgge :=_dfd .(*PSInteger );if !_cgge {return ErrTypeCheck ;};if _ebg .Val ==0{return ErrUndefinedResult ;};_bda ,_cgge :=_aafg .(*PSInteger );if !_cgge {return ErrTypeCheck ;};_eeag :=_bda .Val /_ebg .Val ;_gce =_aaa .Push (MakeInteger (_eeag ));return _gce ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_be *PSOperand )DebugString ()string {return _ge .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_be );};func (_bcbd *PSOperand )ge (_dccf *PSStack )error {_aaf ,_fadc :=_dccf .PopNumberAsFloat64 ();if _fadc !=nil {return _fadc ;};_gec ,_fadc :=_dccf .PopNumberAsFloat64 ();if _fadc !=nil {return _fadc ;};if _gd .Abs (_gec -_aaf )< _fa {_bff :=_dccf .Push (MakeBool (true ));return _bff ;}else if _gec > _aaf {_abf :=_dccf .Push (MakeBool (true ));return _abf ;}else {_acdf :=_dccf .Push (MakeBool (false ));return _acdf ;};};func (_agf *PSOperand )gt (_bdf *PSStack )error {_dgf ,_cbb :=_bdf .PopNumberAsFloat64 ();if _cbb !=nil {return _cbb ;};_eff ,_cbb :=_bdf .PopNumberAsFloat64 ();if _cbb !=nil {return _cbb ;};if _gd .Abs (_eff -_dgf )< _fa {_bef :=_bdf .Push (MakeBool (false ));return _bef ;}else if _eff > _dgf {_fgb :=_bdf .Push (MakeBool (true ));return _fgb ;}else {_ffd :=_bdf .Push (MakeBool (false ));return _ffd ;};};func (_afg *PSOperand )ne (_ccga *PSStack )error {_aafe :=_afg .eq (_ccga );if _aafe !=nil {return _aafe ;};_aafe =_afg .not (_ccga );return _aafe ;};func (_cff *PSOperand )sin (_cgee *PSStack )error {_afcb ,_ebba :=_cgee .PopNumberAsFloat64 ();if _ebba !=nil {return _ebba ;};_efdc :=_gd .Sin (_afcb *_gd .Pi /180.0);_ebba =_cgee .Push (MakeReal (_efdc ));return _ebba ;};func (_ce *PSBoolean )Duplicate ()PSObject {_daf :=PSBoolean {};_daf .Val =_ce .Val ;return &_daf };

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_fe *PSProgram ;};

// Push pushes an object on top of the stack.
func (_begd *PSStack )Push (obj PSObject )error {if len (*_begd )> 100{return ErrStackOverflow ;};*_begd =append (*_begd ,obj );return nil ;};func (_gbf *PSOperand )xor (_dedc *PSStack )error {_dccfgg ,_dbff :=_dedc .Pop ();if _dbff !=nil {return _dbff ;};_debc ,_dbff :=_dedc .Pop ();if _dbff !=nil {return _dbff ;};if _cea ,_dgef :=_dccfgg .(*PSBoolean );_dgef {_dag ,_cbfe :=_debc .(*PSBoolean );if !_cbfe {return ErrTypeCheck ;};_dbff =_dedc .Push (MakeBool (_cea .Val !=_dag .Val ));return _dbff ;};if _ddae ,_bcdg :=_dccfgg .(*PSInteger );_bcdg {_geba ,_bfb :=_debc .(*PSInteger );if !_bfb {return ErrTypeCheck ;};_dbff =_dedc .Push (MakeInteger (_ddae .Val ^_geba .Val ));return _dbff ;};return ErrTypeCheck ;};

// Parse parses the postscript and store as a program that can be executed.
func (_bfce *PSParser )Parse ()(*PSProgram ,error ){_bfce .skipSpaces ();_bded ,_cfgg :=_bfce ._bdef .Peek (2);if _cfgg !=nil {return nil ,_cfgg ;};if _bded [0]!='{'{return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_dagf ,_cfgg :=_bfce .parseFunction ();if _cfgg !=nil &&_cfgg !=_d .EOF {return nil ,_cfgg ;};return _dagf ,_cfgg ;};func (_dcf *PSOperand )round (_fdbge *PSStack )error {_cbgd ,_cge :=_fdbge .Pop ();if _cge !=nil {return _cge ;};if _gfe ,_defb :=_cbgd .(*PSReal );_defb {_cge =_fdbge .Push (MakeReal (_gd .Floor (_gfe .Val +0.5)));}else if _cfcb ,_fee :=_cbgd .(*PSInteger );_fee {_cge =_fdbge .Push (MakeInteger (_cfcb .Val ));}else {return ErrTypeCheck ;};return _cge ;};func (_dceb *PSOperand )ifelse (_cfcf *PSStack )error {_gdee ,_dggf :=_cfcf .Pop ();if _dggf !=nil {return _dggf ;};_gedg ,_dggf :=_cfcf .Pop ();if _dggf !=nil {return _dggf ;};_gab ,_dggf :=_cfcf .Pop ();if _dggf !=nil {return _dggf ;};_gba ,_fdbf :=_gdee .(*PSProgram );if !_fdbf {return ErrTypeCheck ;};_gbc ,_fdbf :=_gedg .(*PSProgram );if !_fdbf {return ErrTypeCheck ;};_cde ,_fdbf :=_gab .(*PSBoolean );if !_fdbf {return ErrTypeCheck ;};if _cde .Val {_fec :=_gbc .Exec (_cfcf );return _fec ;};_dggf =_gba .Exec (_cfcf );return _dggf ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_ggb *PSOperand )Exec (stack *PSStack )error {_bc :=ErrUnsupportedOperand ;switch *_ggb {case "\u0061\u0062\u0073":_bc =_ggb .abs (stack );case "\u0061\u0064\u0064":_bc =_ggb .add (stack );case "\u0061\u006e\u0064":_bc =_ggb .and (stack );case "\u0061\u0074\u0061\u006e":_bc =_ggb .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_bc =_ggb .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_bc =_ggb .ceiling (stack );case "\u0063\u006f\u0070\u0079":_bc =_ggb .copy (stack );case "\u0063\u006f\u0073":_bc =_ggb .cos (stack );case "\u0063\u0076\u0069":_bc =_ggb .cvi (stack );case "\u0063\u0076\u0072":_bc =_ggb .cvr (stack );case "\u0064\u0069\u0076":_bc =_ggb .div (stack );case "\u0064\u0075\u0070":_bc =_ggb .dup (stack );case "\u0065\u0071":_bc =_ggb .eq (stack );case "\u0065\u0078\u0063\u0068":_bc =_ggb .exch (stack );case "\u0065\u0078\u0070":_bc =_ggb .exp (stack );case "\u0066\u006c\u006fo\u0072":_bc =_ggb .floor (stack );case "\u0067\u0065":_bc =_ggb .ge (stack );case "\u0067\u0074":_bc =_ggb .gt (stack );case "\u0069\u0064\u0069\u0076":_bc =_ggb .idiv (stack );case "\u0069\u0066":_bc =_ggb .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_bc =_ggb .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_bc =_ggb .index (stack );case "\u006c\u0065":_bc =_ggb .le (stack );case "\u006c\u006f\u0067":_bc =_ggb .log (stack );case "\u006c\u006e":_bc =_ggb .ln (stack );case "\u006c\u0074":_bc =_ggb .lt (stack );case "\u006d\u006f\u0064":_bc =_ggb .mod (stack );case "\u006d\u0075\u006c":_bc =_ggb .mul (stack );case "\u006e\u0065":_bc =_ggb .ne (stack );case "\u006e\u0065\u0067":_bc =_ggb .neg (stack );case "\u006e\u006f\u0074":_bc =_ggb .not (stack );case "\u006f\u0072":_bc =_ggb .or (stack );case "\u0070\u006f\u0070":_bc =_ggb .pop (stack );case "\u0072\u006f\u0075n\u0064":_bc =_ggb .round (stack );case "\u0072\u006f\u006c\u006c":_bc =_ggb .roll (stack );case "\u0073\u0069\u006e":_bc =_ggb .sin (stack );case "\u0073\u0071\u0072\u0074":_bc =_ggb .sqrt (stack );case "\u0073\u0075\u0062":_bc =_ggb .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_bc =_ggb .truncate (stack );case "\u0078\u006f\u0072":_bc =_ggb .xor (stack );};return _bc ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _c []float64 ;for _ ,_gdf :=range objects {if _gea ,_fg :=_gdf .(*PSInteger );_fg {_c =append (_c ,float64 (_gea .Val ));}else if _b ,_ea :=_gdf .(*PSReal );_ea {_c =append (_c ,_b .Val );}else {return nil ,ErrTypeCheck ;};};return _c ,nil ;};func (_gcgg *PSOperand )dup (_cgb *PSStack )error {_eea ,_dfe :=_cgb .Pop ();if _dfe !=nil {return _dfe ;};_dfe =_cgb .Push (_eea );if _dfe !=nil {return _dfe ;};_dfe =_cgb .Push (_eea .Duplicate ());return _dfe ;};func (_ddea *PSOperand )ln (_cdgf *PSStack )error {_fdbd ,_abd :=_cdgf .PopNumberAsFloat64 ();if _abd !=nil {return _abd ;};_eagf :=_gd .Log (_fdbd );_abd =_cdgf .Push (MakeReal (_eagf ));return _abd ;};func (_gdd *PSOperand )Duplicate ()PSObject {_ceg :=*_gdd ;return &_ceg };func (_ecc *PSOperand )and (_eg *PSStack )error {_age ,_ebe :=_eg .Pop ();if _ebe !=nil {return _ebe ;};_cbe ,_ebe :=_eg .Pop ();if _ebe !=nil {return _ebe ;};if _fea ,_efbb :=_age .(*PSBoolean );_efbb {_fed ,_eed :=_cbe .(*PSBoolean );if !_eed {return ErrTypeCheck ;};_ebe =_eg .Push (MakeBool (_fea .Val &&_fed .Val ));return _ebe ;};if _efg ,_dgd :=_age .(*PSInteger );_dgd {_gf ,_dea :=_cbe .(*PSInteger );if !_dea {return ErrTypeCheck ;};_ebe =_eg .Push (MakeInteger (_efg .Val &_gf .Val ));return _ebe ;};return ErrTypeCheck ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_dg *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_fb :=range objects {_ef :=_dg .Stack .Push (_fb );if _ef !=nil {return nil ,_ef ;};};_cb :=_dg ._fe .Exec (_dg .Stack );if _cb !=nil {_ad .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cb );return nil ,_cb ;};_db :=[]PSObject (*_dg .Stack );_dg .Stack .Empty ();return _db ,nil ;};func (_cef *PSOperand )cos (_fde *PSStack )error {_agea ,_cec :=_fde .PopNumberAsFloat64 ();if _cec !=nil {return _cec ;};_ggd :=_gd .Cos (_agea *_gd .Pi /180.0);_cec =_fde .Push (MakeReal (_ggd ));return _cec ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_ccg *PSOperand )lt (_daag *PSStack )error {_edag ,_dda :=_daag .PopNumberAsFloat64 ();if _dda !=nil {return _dda ;};_gbb ,_dda :=_daag .PopNumberAsFloat64 ();if _dda !=nil {return _dda ;};if _gd .Abs (_gbb -_edag )< _fa {_ggdc :=_daag .Push (MakeBool (false ));return _ggdc ;}else if _gbb < _edag {_ade :=_daag .Push (MakeBool (true ));return _ade ;}else {_cbba :=_daag .Push (MakeBool (false ));return _cbba ;};};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_egc :=PSReal {};_egc .Val =val ;return &_egc };func (_abg *PSBoolean )DebugString ()string {return _ge .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_abg .Val );};func (_bbd *PSOperand )abs (_fgd *PSStack )error {_aba ,_dga :=_fgd .Pop ();if _dga !=nil {return _dga ;};if _cf ,_bbg :=_aba .(*PSReal );_bbg {_fdb :=_cf .Val ;if _fdb < 0{_dga =_fgd .Push (MakeReal (-_fdb ));}else {_dga =_fgd .Push (MakeReal (_fdb ));};}else if _ggbb ,_fbd :=_aba .(*PSInteger );_fbd {_df :=_ggbb .Val ;if _df < 0{_dga =_fgd .Push (MakeInteger (-_df ));}else {_dga =_fgd .Push (MakeInteger (_df ));};}else {return ErrTypeCheck ;};return _dga ;};var ErrStackUnderflow =_f .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_febd *PSOperand )not (_adf *PSStack )error {_cdeg ,_defd :=_adf .Pop ();if _defd !=nil {return _defd ;};if _bae ,_dbcb :=_cdeg .(*PSBoolean );_dbcb {_defd =_adf .Push (MakeBool (!_bae .Val ));return _defd ;}else if _aeg ,_deb :=_cdeg .(*PSInteger );_deb {_defd =_adf .Push (MakeInteger (^_aeg .Val ));return _defd ;}else {return ErrTypeCheck ;};};func (_fdbg *PSOperand )log (_dgb *PSStack )error {_fece ,_fdc :=_dgb .PopNumberAsFloat64 ();if _fdc !=nil {return _fdc ;};_bde :=_gd .Log10 (_fece );_fdc =_dgb .Push (MakeReal (_bde ));return _fdc ;};func (_ccd *PSOperand )ifCondition (_edb *PSStack )error {_cbc ,_bfcb :=_edb .Pop ();if _bfcb !=nil {return _bfcb ;};_gad ,_bfcb :=_edb .Pop ();if _bfcb !=nil {return _bfcb ;};_ebee ,_fbb :=_cbc .(*PSProgram );if !_fbb {return ErrTypeCheck ;};_fef ,_fbb :=_gad .(*PSBoolean );if !_fbb {return ErrTypeCheck ;};if _fef .Val {_cfc :=_ebee .Exec (_edb );return _cfc ;};return nil ;};

// String returns a string representation of the stack.
func (_eef *PSStack )String ()string {_bfdd :="\u005b\u0020";for _ ,_bdcf :=range *_eef {_bfdd +=_bdcf .String ();_bfdd +="\u0020";};_bfdd +="\u005d";return _bfdd ;};func (_bcfdb *PSParser )parseFunction ()(*PSProgram ,error ){_efcd ,_ :=_bcfdb ._bdef .ReadByte ();if _efcd !='{'{return nil ,_f .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_ddd :=NewPSProgram ();for {_bcfdb .skipSpaces ();_dgc ,_dcg :=_bcfdb ._bdef .Peek (2);if _dcg !=nil {if _dcg ==_d .EOF {break ;};return nil ,_dcg ;};_ad .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_dgc ));if _dgc [0]=='}'{_ad .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_bcfdb ._bdef .ReadByte ();break ;}else if _dgc [0]=='{'{_ad .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_gdaa ,_bffc :=_bcfdb .parseFunction ();if _bffc !=nil {return nil ,_bffc ;};_ddd .Append (_gdaa );}else if _ab .IsDecimalDigit (_dgc [0])||(_dgc [0]=='-'&&_ab .IsDecimalDigit (_dgc [1])){_ad .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_geec ,_cggg :=_bcfdb .parseNumber ();if _cggg !=nil {return nil ,_cggg ;};_ddd .Append (_geec );}else {_ad .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_dgc ,_ =_bcfdb ._bdef .Peek (5);_gcge :=string (_dgc );_ad .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_gcge );if (len (_gcge )> 4)&&(_gcge [:5]=="\u0066\u0061\u006cs\u0065"){_dddf ,_fbg :=_bcfdb .parseBool ();if _fbg !=nil {return nil ,_fbg ;};_ddd .Append (_dddf );}else if (len (_gcge )> 3)&&(_gcge [:4]=="\u0074\u0072\u0075\u0065"){_cebef ,_aeeg :=_bcfdb .parseBool ();if _aeeg !=nil {return nil ,_aeeg ;};_ddd .Append (_cebef );}else {_dgde ,_efdb :=_bcfdb .parseOperand ();if _efdb !=nil {return nil ,_efdb ;};_ddd .Append (_dgde );};};};return _ddd ,nil ;};

// Pop pops an object from the top of the stack.
func (_efda *PSStack )Pop ()(PSObject ,error ){if len (*_efda )< 1{return nil ,ErrStackUnderflow ;};_bea :=(*_efda )[len (*_efda )-1];*_efda =(*_efda )[0:len (*_efda )-1];return _bea ,nil ;};func (_gaf *PSOperand )truncate (_dbef *PSStack )error {_ggfb ,_dff :=_dbef .Pop ();if _dff !=nil {return _dff ;};if _bdb ,_ecd :=_ggfb .(*PSReal );_ecd {_baa :=int (_bdb .Val );_dff =_dbef .Push (MakeReal (float64 (_baa )));}else if _baad ,_dgae :=_ggfb .(*PSInteger );_dgae {_dff =_dbef .Push (MakeInteger (_baad .Val ));}else {return ErrTypeCheck ;};return _dff ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ged :=&PSExecutor {};_ged .Stack =NewPSStack ();_ged ._fe =program ;return _ged ;};func (_bbe *PSOperand )bitshift (_bcf *PSStack )error {_dbf ,_eda :=_bcf .PopInteger ();if _eda !=nil {return _eda ;};_fff ,_eda :=_bcf .PopInteger ();if _eda !=nil {return _eda ;};var _dc int ;if _dbf >=0{_dc =_fff <<uint (_dbf );}else {_dc =_fff >>uint (-_dbf );};_eda =_bcf .Push (MakeInteger (_dc ));return _eda ;};func (_geef *PSProgram )Duplicate ()PSObject {_dafg :=&PSProgram {};for _ ,_dae :=range *_geef {_dafg .Append (_dae .Duplicate ());};return _dafg ;};func (_ffa *PSParser )parseOperand ()(*PSOperand ,error ){var _fcbb []byte ;for {_fag ,_bbef :=_ffa ._bdef .Peek (1);if _bbef !=nil {if _bbef ==_d .EOF {break ;};return nil ,_bbef ;};if _ab .IsDelimiter (_fag [0]){break ;};if _ab .IsWhiteSpace (_fag [0]){break ;};_feab ,_ :=_ffa ._bdef .ReadByte ();_fcbb =append (_fcbb ,_feab );};if len (_fcbb )==0{return nil ,_f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_fcbb )),nil ;};