//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_aa "bufio";_a "bytes";_e "errors";_ed "fmt";_ag "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/core";_bg "io";_f "math";);

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_agb *PSProgram ;};func (_ddg *PSOperand )add (_gbf *PSStack )error {_bag ,_cd :=_gbf .Pop ();if _cd !=nil {return _cd ;};_fc ,_cd :=_gbf .Pop ();if _cd !=nil {return _cd ;};_fdcd ,_bdfg :=_bag .(*PSReal );_bbe ,_gbb :=_bag .(*PSInteger );if !_bdfg &&!_gbb {return ErrTypeCheck ;};_gfb ,_cbc :=_fc .(*PSReal );_db ,_dbc :=_fc .(*PSInteger );if !_cbc &&!_dbc {return ErrTypeCheck ;};if _gbb &&_dbc {_eb :=_bbe .Val +_db .Val ;_dg :=_gbf .Push (MakeInteger (_eb ));return _dg ;};var _agd float64 =0;if _bdfg {_agd =_fdcd .Val ;}else {_agd =float64 (_bbe .Val );};if _cbc {_agd +=_gfb .Val ;}else {_agd +=float64 (_db .Val );};_cd =_gbf .Push (MakeReal (_agd ));return _cd ;};func (_fd *PSBoolean )DebugString ()string {return _ed .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_fd .Val );};func (_bdec *PSOperand )log (_ced *PSStack )error {_aaa ,_cedg :=_ced .PopNumberAsFloat64 ();if _cedg !=nil {return _cedg ;};_efa :=_f .Log10 (_aaa );_cedg =_ced .Push (MakeReal (_efa ));return _cedg ;};var ErrTypeCheck =_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_aee *PSOperand )round (_ffg *PSStack )error {_eedc ,_cbdd :=_ffg .Pop ();if _cbdd !=nil {return _cbdd ;};if _cgf ,_cddb :=_eedc .(*PSReal );_cddb {_cbdd =_ffg .Push (MakeReal (_f .Floor (_cgf .Val +0.5)));}else if _fefa ,_fgeg :=_eedc .(*PSInteger );_fgeg {_cbdd =_ffg .Push (MakeInteger (_fefa .Val ));}else {return ErrTypeCheck ;};return _cbdd ;};func (_cb *PSReal )DebugString ()string {return _ed .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_cb .Val );};const _c =0.000001;func (_eccf *PSParser )parseNumber ()(PSObject ,error ){_ffe ,_ffee :=_g .ParseNumber (_eccf ._abgbc );if _ffee !=nil {return nil ,_ffee ;};switch _edf :=_ffe .(type ){case *_g .PdfObjectFloat :return MakeReal (float64 (*_edf )),nil ;case *_g .PdfObjectInteger :return MakeInteger (int (*_edf )),nil ;};return nil ,_ed .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_ffe );};func (_ggd *PSOperand )ifCondition (_aff *PSStack )error {_bbg ,_cde :=_aff .Pop ();if _cde !=nil {return _cde ;};_acad ,_cde :=_aff .Pop ();if _cde !=nil {return _cde ;};_fed ,_feg :=_bbg .(*PSProgram );if !_feg {return ErrTypeCheck ;};_dfee ,_feg :=_acad .(*PSBoolean );if !_feg {return ErrTypeCheck ;};if _dfee .Val {_ddcb :=_fed .Exec (_aff );return _ddcb ;};return nil ;};func (_agc *PSOperand )exp (_ffc *PSStack )error {_aef ,_bce :=_ffc .PopNumberAsFloat64 ();if _bce !=nil {return _bce ;};_feab ,_bce :=_ffc .PopNumberAsFloat64 ();if _bce !=nil {return _bce ;};if _f .Abs (_aef )< 1&&_feab < 0{return ErrUndefinedResult ;};_beeb :=_f .Pow (_feab ,_aef );_bce =_ffc .Push (MakeReal (_beeb ));return _bce ;};var ErrUnsupportedOperand =_e .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_df *PSInteger )DebugString ()string {return _ed .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_df .Val );};func (_cea *PSOperand )floor (_afb *PSStack )error {_gg ,_cgd :=_afb .Pop ();if _cgd !=nil {return _cgd ;};if _cdd ,_abe :=_gg .(*PSReal );_abe {_cgd =_afb .Push (MakeReal (_f .Floor (_cdd .Val )));}else if _dgd ,_ece :=_gg .(*PSInteger );_ece {_cgd =_afb .Push (MakeInteger (_dgd .Val ));}else {return ErrTypeCheck ;};return _cgd ;};

// Empty empties the stack.
func (_efb *PSStack )Empty (){*_efb =[]PSObject {}};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_ccg :=PSInteger {};_ccg .Val =val ;return &_ccg };func (_eba *PSOperand )and (_dbg *PSStack )error {_ac ,_dcb :=_dbg .Pop ();if _dcb !=nil {return _dcb ;};_cbg ,_dcb :=_dbg .Pop ();if _dcb !=nil {return _dcb ;};if _adg ,_gcd :=_ac .(*PSBoolean );_gcd {_ebab ,_gcc :=_cbg .(*PSBoolean );if !_gcc {return ErrTypeCheck ;};_dcb =_dbg .Push (MakeBool (_adg .Val &&_ebab .Val ));return _dcb ;};if _dfaf ,_da :=_ac .(*PSInteger );_da {_dbf ,_gaf :=_cbg .(*PSInteger );if !_gaf {return ErrTypeCheck ;};_dcb =_dbg .Push (MakeInteger (_dfaf .Val &_dbf .Val ));return _dcb ;};return ErrTypeCheck ;};func (_dgdc *PSOperand )xor (_cebe *PSStack )error {_ecb ,_cacc :=_cebe .Pop ();if _cacc !=nil {return _cacc ;};_geab ,_cacc :=_cebe .Pop ();if _cacc !=nil {return _cacc ;};if _fdb ,_fcbe :=_ecb .(*PSBoolean );_fcbe {_gbad ,_gcca :=_geab .(*PSBoolean );if !_gcca {return ErrTypeCheck ;};_cacc =_cebe .Push (MakeBool (_fdb .Val !=_gbad .Val ));return _cacc ;};if _bbgc ,_bdfb :=_ecb .(*PSInteger );_bdfb {_agec ,_add :=_geab .(*PSInteger );if !_add {return ErrTypeCheck ;};_cacc =_cebe .Push (MakeInteger (_bbgc .Val ^_agec .Val ));return _cacc ;};return ErrTypeCheck ;};func (_debb *PSOperand )or (_fbe *PSStack )error {_bgf ,_abfc :=_fbe .Pop ();if _abfc !=nil {return _abfc ;};_adac ,_abfc :=_fbe .Pop ();if _abfc !=nil {return _abfc ;};if _gba ,_dgbg :=_bgf .(*PSBoolean );_dgbg {_beg ,_gef :=_adac .(*PSBoolean );if !_gef {return ErrTypeCheck ;};_abfc =_fbe .Push (MakeBool (_gba .Val ||_beg .Val ));return _abfc ;};if _cdbe ,_dfge :=_bgf .(*PSInteger );_dfge {_eaea ,_gea :=_adac .(*PSInteger );if !_gea {return ErrTypeCheck ;};_abfc =_fbe .Push (MakeInteger (_cdbe .Val |_eaea .Val ));return _abfc ;};return ErrTypeCheck ;};func (_ce *PSProgram )String ()string {_bda :="\u007b\u0020";for _ ,_cad :=range *_ce {_bda +=_cad .String ();_bda +="\u0020";};_bda +="\u007d";return _bda ;};func (_be *PSInteger )Duplicate ()PSObject {_ec :=PSInteger {};_ec .Val =_be .Val ;return &_ec };func (_ecce *PSOperand )sqrt (_abgg *PSStack )error {_dgc ,_cba :=_abgg .PopNumberAsFloat64 ();if _cba !=nil {return _cba ;};if _dgc < 0{return ErrRangeCheck ;};_ccdg :=_f .Sqrt (_dgc );_cba =_abgg .Push (MakeReal (_ccdg ));return _cba ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_cag :=PSReal {};_cag .Val =val ;return &_cag };func _aaffe (_aede int )int {if _aede < 0{return -_aede ;};return _aede ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_dga :=PSOperand (val );return &_dga };func (_gda *PSOperand )ge (_bgab *PSStack )error {_cdb ,_egb :=_bgab .PopNumberAsFloat64 ();if _egb !=nil {return _egb ;};_bdb ,_egb :=_bgab .PopNumberAsFloat64 ();if _egb !=nil {return _egb ;};if _f .Abs (_bdb -_cdb )< _c {_ggc :=_bgab .Push (MakeBool (true ));return _ggc ;}else if _bdb > _cdb {_aca :=_bgab .Push (MakeBool (true ));return _aca ;}else {_abgb :=_bgab .Push (MakeBool (false ));return _abgb ;};};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_dbgd *PSOperand )idiv (_gfce *PSStack )error {_aag ,_cdbc :=_gfce .Pop ();if _cdbc !=nil {return _cdbc ;};_dac ,_cdbc :=_gfce .Pop ();if _cdbc !=nil {return _cdbc ;};_ebe ,_gdf :=_aag .(*PSInteger );if !_gdf {return ErrTypeCheck ;};if _ebe .Val ==0{return ErrUndefinedResult ;};_aaff ,_gdf :=_dac .(*PSInteger );if !_gdf {return ErrTypeCheck ;};_afc :=_aaff .Val /_ebe .Val ;_cdbc =_gfce .Push (MakeInteger (_afc ));return _cdbc ;};func (_dbgda *PSOperand )le (_gfcc *PSStack )error {_dfec ,_gad :=_gfcc .PopNumberAsFloat64 ();if _gad !=nil {return _gad ;};_agde ,_gad :=_gfcc .PopNumberAsFloat64 ();if _gad !=nil {return _gad ;};if _f .Abs (_agde -_dfec )< _c {_bace :=_gfcc .Push (MakeBool (true ));return _bace ;}else if _agde < _dfec {_fbb :=_gfcc .Push (MakeBool (true ));return _fbb ;}else {_gegd :=_gfcc .Push (MakeBool (false ));return _gegd ;};};

// Exec executes the program, typically leaving output values on the stack.
func (_bdg *PSProgram )Exec (stack *PSStack )error {for _ ,_gfc :=range *_bdg {var _aac error ;switch _ede :=_gfc .(type ){case *PSInteger :_ba :=_ede ;_aac =stack .Push (_ba );case *PSReal :_gcfg :=_ede ;_aac =stack .Push (_gcfg );case *PSBoolean :_dfg :=_ede ;_aac =stack .Push (_dfg );case *PSProgram :_gbg :=_ede ;_aac =stack .Push (_gbg );case *PSOperand :_fdc :=_ede ;_aac =_fdc .Exec (stack );default:return ErrTypeCheck ;};if _aac !=nil {return _aac ;};};return nil ;};func (_bece *PSOperand )exch (_deb *PSStack )error {_bfd ,_cda :=_deb .Pop ();if _cda !=nil {return _cda ;};_dge ,_cda :=_deb .Pop ();if _cda !=nil {return _cda ;};_cda =_deb .Push (_bfd );if _cda !=nil {return _cda ;};_cda =_deb .Push (_dge );return _cda ;};func (_gee *PSOperand )neg (_fae *PSStack )error {_cbd ,_efaf :=_fae .Pop ();if _efaf !=nil {return _efaf ;};if _cee ,_abea :=_cbd .(*PSReal );_abea {_efaf =_fae .Push (MakeReal (-_cee .Val ));return _efaf ;}else if _egbe ,_gab :=_cbd .(*PSInteger );_gab {_efaf =_fae .Push (MakeInteger (-_egbe .Val ));return _efaf ;}else {return ErrTypeCheck ;};};func (_gfe *PSOperand )mul (_cedf *PSStack )error {_bff ,_beaf :=_cedf .Pop ();if _beaf !=nil {return _beaf ;};_bage ,_beaf :=_cedf .Pop ();if _beaf !=nil {return _beaf ;};_bdad ,_eca :=_bff .(*PSReal );_ebbc ,_eee :=_bff .(*PSInteger );if !_eca &&!_eee {return ErrTypeCheck ;};_eebd ,_fegd :=_bage .(*PSReal );_bdae ,_ceca :=_bage .(*PSInteger );if !_fegd &&!_ceca {return ErrTypeCheck ;};if _eee &&_ceca {_abag :=_ebbc .Val *_bdae .Val ;_gdg :=_cedf .Push (MakeInteger (_abag ));return _gdg ;};var _gfgd float64 =0;if _eca {_gfgd =_bdad .Val ;}else {_gfgd =float64 (_ebbc .Val );};if _fegd {_gfgd *=_eebd .Val ;}else {_gfgd *=float64 (_bdae .Val );};_beaf =_cedf .Push (MakeReal (_gfgd ));return _beaf ;};func (_agbaa *PSOperand )sin (_ceeb *PSStack )error {_eaee ,_adbg :=_ceeb .PopNumberAsFloat64 ();if _adbg !=nil {return _adbg ;};_caa :=_f .Sin (_eaee *_f .Pi /180.0);_adbg =_ceeb .Push (MakeReal (_caa ));return _adbg ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_cebf *PSStack )PopInteger ()(int ,error ){_bgdc ,_bcf :=_cebf .Pop ();if _bcf !=nil {return 0,_bcf ;};if _ddf ,_bbb :=_bgdc .(*PSInteger );_bbb {return _ddf .Val ,nil ;};return 0,ErrTypeCheck ;};func (_fab *PSOperand )bitshift (_abd *PSStack )error {_aeg ,_bgd :=_abd .PopInteger ();if _bgd !=nil {return _bgd ;};_bbeb ,_bgd :=_abd .PopInteger ();if _bgd !=nil {return _bgd ;};var _edb int ;if _aeg >=0{_edb =_bbeb <<uint (_aeg );}else {_edb =_bbeb >>uint (-_aeg );};_bgd =_abd .Push (MakeInteger (_edb ));return _bgd ;};func (_bdd *PSOperand )pop (_bcg *PSStack )error {_ ,_baf :=_bcg .Pop ();if _baf !=nil {return _baf ;};return nil ;};func (_eda *PSOperand )Duplicate ()PSObject {_fea :=*_eda ;return &_fea };

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_ae *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_gc :=range objects {_geg :=_ae .Stack .Push (_gc );if _geg !=nil {return nil ,_geg ;};};_bd :=_ae ._agb .Exec (_ae .Stack );if _bd !=nil {_ag .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bd );return nil ,_bd ;};_ca :=[]PSObject (*_ae .Stack );_ae .Stack .Empty ();return _ca ,nil ;};func (_gabc *PSParser )skipSpaces ()(int ,error ){_fgd :=0;for {_ecca ,_cdg :=_gabc ._abgbc .Peek (1);if _cdg !=nil {return 0,_cdg ;};if _g .IsWhiteSpace (_ecca [0]){_gabc ._abgbc .ReadByte ();_fgd ++;}else {break ;};};return _fgd ,nil ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_dce *PSOperand )Exec (stack *PSStack )error {_eg :=ErrUnsupportedOperand ;switch *_dce {case "\u0061\u0062\u0073":_eg =_dce .abs (stack );case "\u0061\u0064\u0064":_eg =_dce .add (stack );case "\u0061\u006e\u0064":_eg =_dce .and (stack );case "\u0061\u0074\u0061\u006e":_eg =_dce .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_eg =_dce .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_eg =_dce .ceiling (stack );case "\u0063\u006f\u0070\u0079":_eg =_dce .copy (stack );case "\u0063\u006f\u0073":_eg =_dce .cos (stack );case "\u0063\u0076\u0069":_eg =_dce .cvi (stack );case "\u0063\u0076\u0072":_eg =_dce .cvr (stack );case "\u0064\u0069\u0076":_eg =_dce .div (stack );case "\u0064\u0075\u0070":_eg =_dce .dup (stack );case "\u0065\u0071":_eg =_dce .eq (stack );case "\u0065\u0078\u0063\u0068":_eg =_dce .exch (stack );case "\u0065\u0078\u0070":_eg =_dce .exp (stack );case "\u0066\u006c\u006fo\u0072":_eg =_dce .floor (stack );case "\u0067\u0065":_eg =_dce .ge (stack );case "\u0067\u0074":_eg =_dce .gt (stack );case "\u0069\u0064\u0069\u0076":_eg =_dce .idiv (stack );case "\u0069\u0066":_eg =_dce .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_eg =_dce .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_eg =_dce .index (stack );case "\u006c\u0065":_eg =_dce .le (stack );case "\u006c\u006f\u0067":_eg =_dce .log (stack );case "\u006c\u006e":_eg =_dce .ln (stack );case "\u006c\u0074":_eg =_dce .lt (stack );case "\u006d\u006f\u0064":_eg =_dce .mod (stack );case "\u006d\u0075\u006c":_eg =_dce .mul (stack );case "\u006e\u0065":_eg =_dce .ne (stack );case "\u006e\u0065\u0067":_eg =_dce .neg (stack );case "\u006e\u006f\u0074":_eg =_dce .not (stack );case "\u006f\u0072":_eg =_dce .or (stack );case "\u0070\u006f\u0070":_eg =_dce .pop (stack );case "\u0072\u006f\u0075n\u0064":_eg =_dce .round (stack );case "\u0072\u006f\u006c\u006c":_eg =_dce .roll (stack );case "\u0073\u0069\u006e":_eg =_dce .sin (stack );case "\u0073\u0071\u0072\u0074":_eg =_dce .sqrt (stack );case "\u0073\u0075\u0062":_eg =_dce .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_eg =_dce .truncate (stack );case "\u0078\u006f\u0072":_eg =_dce .xor (stack );};return _eg ;};func (_gcf *PSBoolean )Duplicate ()PSObject {_ged :=PSBoolean {};_ged .Val =_gcf .Val ;return &_ged };func (_gfae *PSOperand )roll (_cbee *PSStack )error {_gae ,_ebba :=_cbee .Pop ();if _ebba !=nil {return _ebba ;};_cacff ,_ebba :=_cbee .Pop ();if _ebba !=nil {return _ebba ;};_egbb ,_cgde :=_gae .(*PSInteger );if !_cgde {return ErrTypeCheck ;};_cbf ,_cgde :=_cacff .(*PSInteger );if !_cgde {return ErrTypeCheck ;};if _cbf .Val < 0{return ErrRangeCheck ;};if _cbf .Val ==0||_cbf .Val ==1{return nil ;};if _cbf .Val > len (*_cbee ){return ErrStackUnderflow ;};for _bcd :=0;_bcd < _aaffe (_egbb .Val );_bcd ++{var _gaff []PSObject ;_gaff =(*_cbee )[len (*_cbee )-(_cbf .Val ):len (*_cbee )];if _egbb .Val > 0{_cbeg :=_gaff [len (_gaff )-1];_gaff =append ([]PSObject {_cbeg },_gaff [0:len (_gaff )-1]...);}else {_gdab :=_gaff [len (_gaff )-_cbf .Val ];_gaff =append (_gaff [1:],_gdab );};_gbbc :=append ((*_cbee )[0:len (*_cbee )-_cbf .Val ],_gaff ...);_cbee =&_gbbc ;};return nil ;};func (_fg *PSProgram )Duplicate ()PSObject {_adf :=&PSProgram {};for _ ,_adfe :=range *_fg {_adf .Append (_adfe .Duplicate ());};return _adf ;};func (_dfe *PSReal )String ()string {return _ed .Sprintf ("\u0025\u002e\u0035\u0066",_dfe .Val )};func (_aeb *PSInteger )String ()string {return _ed .Sprintf ("\u0025\u0064",_aeb .Val )};func (_afa *PSOperand )lt (_fge *PSStack )error {_eegf ,_eafe :=_fge .PopNumberAsFloat64 ();if _eafe !=nil {return _eafe ;};_cge ,_eafe :=_fge .PopNumberAsFloat64 ();if _eafe !=nil {return _eafe ;};if _f .Abs (_cge -_eegf )< _c {_bcce :=_fge .Push (MakeBool (false ));return _bcce ;}else if _cge < _eegf {_adfd :=_fge .Push (MakeBool (true ));return _adfd ;}else {_gde :=_fge .Push (MakeBool (false ));return _gde ;};};func (_adb *PSOperand )String ()string {return _ed .Sprintf ("\u0025\u0073",*_adb )};func (_ga *PSReal )Duplicate ()PSObject {_eed :=PSReal {};_eed .Val =_ga .Val ;return &_eed };

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_ccb :=PSParser {};_dfd :=_a .NewBuffer (content );_ccb ._abgbc =_aa .NewReader (_dfd );return &_ccb ;};func (_ccfc *PSOperand )truncate (_fff *PSStack )error {_bba ,_beb :=_fff .Pop ();if _beb !=nil {return _beb ;};if _eeae ,_dae :=_bba .(*PSReal );_dae {_agf :=int (_eeae .Val );_beb =_fff .Push (MakeReal (float64 (_agf )));}else if _cebc ,_cce :=_bba .(*PSInteger );_cce {_beb =_fff .Push (MakeInteger (_cebc .Val ));}else {return ErrTypeCheck ;};return _beb ;};func (_fce *PSOperand )div (_adfg *PSStack )error {_eeb ,_cca :=_adfg .Pop ();if _cca !=nil {return _cca ;};_bagf ,_cca :=_adfg .Pop ();if _cca !=nil {return _cca ;};_fda ,_fbg :=_eeb .(*PSReal );_dba ,_fde :=_eeb .(*PSInteger );if !_fbg &&!_fde {return ErrTypeCheck ;};if _fbg &&_fda .Val ==0{return ErrUndefinedResult ;};if _fde &&_dba .Val ==0{return ErrUndefinedResult ;};_ccce ,_ada :=_bagf .(*PSReal );_fbgc ,_fgg :=_bagf .(*PSInteger );if !_ada &&!_fgg {return ErrTypeCheck ;};var _ddce float64 =0;if _ada {_ddce =_ccce .Val ;}else {_ddce =float64 (_fbgc .Val );};if _fbg {_ddce /=_fda .Val ;}else {_ddce /=float64 (_dba .Val );};_cca =_adfg .Push (MakeReal (_ddce ));return _cca ;};func (_eea *PSOperand )ceiling (_af *PSStack )error {_bcc ,_fadd :=_af .Pop ();if _fadd !=nil {return _fadd ;};if _fcb ,_daa :=_bcc .(*PSReal );_daa {_fadd =_af .Push (MakeReal (_f .Ceil (_fcb .Val )));}else if _ffb ,_bec :=_bcc .(*PSInteger );_bec {_fadd =_af .Push (MakeInteger (_ffb .Val ));}else {_fadd =ErrTypeCheck ;};return _fadd ;};func (_eag *PSOperand )not (_beff *PSStack )error {_cdaa ,_adab :=_beff .Pop ();if _adab !=nil {return _adab ;};if _gdfe ,_eff :=_cdaa .(*PSBoolean );_eff {_adab =_beff .Push (MakeBool (!_gdfe .Val ));return _adab ;}else if _aceb ,_fcbg :=_cdaa .(*PSInteger );_fcbg {_adab =_beff .Push (MakeInteger (^_aceb .Val ));return _adab ;}else {return ErrTypeCheck ;};};func (_dcdf *PSOperand )ln (_cf *PSStack )error {_aba ,_cfd :=_cf .PopNumberAsFloat64 ();if _cfd !=nil {return _cfd ;};_eedb :=_f .Log (_aba );_cfd =_cf .Push (MakeReal (_eedb ));return _cfd ;};func (_ebg *PSParser )parseFunction ()(*PSProgram ,error ){_ggg ,_ :=_ebg ._abgbc .ReadByte ();if _ggg !='{'{return nil ,_e .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_adca :=NewPSProgram ();for {_ebg .skipSpaces ();_gcba ,_fbc :=_ebg ._abgbc .Peek (2);if _fbc !=nil {if _fbc ==_bg .EOF {break ;};return nil ,_fbc ;};_ag .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_gcba ));if _gcba [0]=='}'{_ag .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_ebg ._abgbc .ReadByte ();break ;}else if _gcba [0]=='{'{_ag .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_gaea ,_abgd :=_ebg .parseFunction ();if _abgd !=nil {return nil ,_abgd ;};_adca .Append (_gaea );}else if _g .IsDecimalDigit (_gcba [0])||(_gcba [0]=='-'&&_g .IsDecimalDigit (_gcba [1])){_ag .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_fbfd ,_adgd :=_ebg .parseNumber ();if _adgd !=nil {return nil ,_adgd ;};_adca .Append (_fbfd );}else {_ag .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_gcba ,_ =_ebg ._abgbc .Peek (5);_aafa :=string (_gcba );_ag .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_aafa );if (len (_aafa )> 4)&&(_aafa [:5]=="\u0066\u0061\u006cs\u0065"){_beae ,_dbb :=_ebg .parseBool ();if _dbb !=nil {return nil ,_dbb ;};_adca .Append (_beae );}else if (len (_aafa )> 3)&&(_aafa [:4]=="\u0074\u0072\u0075\u0065"){_dcbe ,_edbe :=_ebg .parseBool ();if _edbe !=nil {return nil ,_edbe ;};_adca .Append (_dcbe );}else {_ffad ,_ccdb :=_ebg .parseOperand ();if _ccdb !=nil {return nil ,_ccdb ;};_adca .Append (_ffad );};};};return _adca ,nil ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_abgbc *_aa .Reader };func (_bed *PSOperand )eq (_adfa *PSStack )error {_gca ,_gcde :=_adfa .Pop ();if _gcde !=nil {return _gcde ;};_cadb ,_gcde :=_adfa .Pop ();if _gcde !=nil {return _gcde ;};_fca ,_afe :=_gca .(*PSBoolean );_fbd ,_bae :=_cadb .(*PSBoolean );if _afe ||_bae {var _ffbd error ;if _afe &&_bae {_ffbd =_adfa .Push (MakeBool (_fca .Val ==_fbd .Val ));}else {_ffbd =_adfa .Push (MakeBool (false ));};return _ffbd ;};var _fdcc float64 ;var _ebb float64 ;if _cacda ,_dag :=_gca .(*PSInteger );_dag {_fdcc =float64 (_cacda .Val );}else if _fee ,_aege :=_gca .(*PSReal );_aege {_fdcc =_fee .Val ;}else {return ErrTypeCheck ;};if _fcf ,_edc :=_cadb .(*PSInteger );_edc {_ebb =float64 (_fcf .Val );}else if _ecc ,_dcbf :=_cadb .(*PSReal );_dcbf {_ebb =_ecc .Val ;}else {return ErrTypeCheck ;};if _f .Abs (_ebb -_fdcc )< _c {_gcde =_adfa .Push (MakeBool (true ));}else {_gcde =_adfa .Push (MakeBool (false ));};return _gcde ;};func (_gfd *PSOperand )dup (_age *PSStack )error {_cadc ,_eegg :=_age .Pop ();if _eegg !=nil {return _eegg ;};_eegg =_age .Push (_cadc );if _eegg !=nil {return _eegg ;};_eegg =_age .Push (_cadc .Duplicate ());return _eegg ;};func (_gegg *PSParser )parseBool ()(*PSBoolean ,error ){_bgg ,_fec :=_gegg ._abgbc .Peek (4);if _fec !=nil {return MakeBool (false ),_fec ;};if (len (_bgg )>=4)&&(string (_bgg [:4])=="\u0074\u0072\u0075\u0065"){_gegg ._abgbc .Discard (4);return MakeBool (true ),nil ;};_bgg ,_fec =_gegg ._abgbc .Peek (5);if _fec !=nil {return MakeBool (false ),_fec ;};if (len (_bgg )>=5)&&(string (_bgg [:5])=="\u0066\u0061\u006cs\u0065"){_gegg ._abgbc .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_e .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ee :=&PSExecutor {};_ee .Stack =NewPSStack ();_ee ._agb =program ;return _ee ;};func (_eaf *PSOperand )gt (_abed *PSStack )error {_bbc ,_ega :=_abed .PopNumberAsFloat64 ();if _ega !=nil {return _ega ;};_aad ,_ega :=_abed .PopNumberAsFloat64 ();if _ega !=nil {return _ega ;};if _f .Abs (_aad -_bbc )< _c {_ageb :=_abed .Push (MakeBool (false ));return _ageb ;}else if _aad > _bbc {_fbf :=_abed .Push (MakeBool (true ));return _fbf ;}else {_bbd :=_abed .Push (MakeBool (false ));return _bbd ;};};var ErrUndefinedResult =_e .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_ebgb *PSParser )parseOperand ()(*PSOperand ,error ){var _feb []byte ;for {_aacf ,_dbad :=_ebgb ._abgbc .Peek (1);if _dbad !=nil {if _dbad ==_bg .EOF {break ;};return nil ,_dbad ;};if _g .IsDelimiter (_aacf [0]){break ;};if _g .IsWhiteSpace (_aacf [0]){break ;};_gec ,_ :=_ebgb ._abgbc .ReadByte ();_feb =append (_feb ,_gec );};if len (_feb )==0{return nil ,_e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_feb )),nil ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_dadb *PSStack )DebugString ()string {_degg :="\u005b\u0020";for _ ,_dcf :=range *_dadb {_degg +=_dcf .DebugString ();_degg +="\u0020";};_degg +="\u005d";return _degg ;};func (_fe *PSBoolean )String ()string {return _ed .Sprintf ("\u0025\u0076",_fe .Val )};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_fgaa *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_affe ,_aebe :=_fgaa .Pop ();if _aebe !=nil {return 0,_aebe ;};if _ecd ,_gga :=_affe .(*PSReal );_gga {return _ecd .Val ,nil ;}else if _baea ,_deg :=_affe .(*PSInteger );_deg {return float64 (_baea .Val ),nil ;}else {return 0,ErrTypeCheck ;};};func (_gf *PSProgram )DebugString ()string {_bc :="\u007b\u0020";for _ ,_ef :=range *_gf {_bc +=_ef .DebugString ();_bc +="\u0020";};_bc +="\u007d";return _bc ;};func (_bee *PSOperand )cvi (_bca *PSStack )error {_bccb ,_dbga :=_bca .Pop ();if _dbga !=nil {return _dbga ;};if _ccc ,_bea :=_bccb .(*PSReal );_bea {_bef :=int (_ccc .Val );_dbga =_bca .Push (MakeInteger (_bef ));}else if _agdg ,_dec :=_bccb .(*PSInteger );_dec {_def :=_agdg .Val ;_dbga =_bca .Push (MakeInteger (_def ));}else {return ErrTypeCheck ;};return _dbga ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_fadf :=PSBoolean {};_fadf .Val =val ;return &_fadf };func (_gcg *PSOperand )cvr (_cbe *PSStack )error {_ddgc ,_dbgg :=_cbe .Pop ();if _dbgg !=nil {return _dbgg ;};if _fga ,_bde :=_ddgc .(*PSReal );_bde {_dbgg =_cbe .Push (MakeReal (_fga .Val ));}else if _dcd ,_aaf :=_ddgc .(*PSInteger );_aaf {_dbgg =_cbe .Push (MakeReal (float64 (_dcd .Val )));}else {return ErrTypeCheck ;};return _dbgg ;};func (_cg *PSOperand )copy (_ceb *PSStack )error {_dfc ,_cef :=_ceb .PopInteger ();if _cef !=nil {return _cef ;};if _dfc < 0{return ErrRangeCheck ;};if _dfc > len (*_ceb ){return ErrRangeCheck ;};*_ceb =append (*_ceb ,(*_ceb )[len (*_ceb )-_dfc :]...);return nil ;};

// String returns a string representation of the stack.
func (_gggc *PSStack )String ()string {_dad :="\u005b\u0020";for _ ,_ccfb :=range *_gggc {_dad +=_ccfb .String ();_dad +="\u0020";};_dad +="\u005d";return _dad ;};

// Push pushes an object on top of the stack.
func (_cgc *PSStack )Push (obj PSObject )error {if len (*_cgc )> 100{return ErrStackOverflow ;};*_cgc =append (*_cgc ,obj );return nil ;};

// Pop pops an object from the top of the stack.
func (_eedd *PSStack )Pop ()(PSObject ,error ){if len (*_eedd )< 1{return nil ,ErrStackUnderflow ;};_ggb :=(*_eedd )[len (*_eedd )-1];*_eedd =(*_eedd )[0:len (*_eedd )-1];return _ggb ,nil ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_fdg *PSOperand )mod (_ecg *PSStack )error {_fef ,_dgb :=_ecg .Pop ();if _dgb !=nil {return _dgb ;};_fbaf ,_dgb :=_ecg .Pop ();if _dgb !=nil {return _dgb ;};_aefg ,_agba :=_fef .(*PSInteger );if !_agba {return ErrTypeCheck ;};if _aefg .Val ==0{return ErrUndefinedResult ;};_cec ,_agba :=_fbaf .(*PSInteger );if !_agba {return ErrTypeCheck ;};_aed :=_cec .Val %_aefg .Val ;_dgb =_ecg .Push (MakeInteger (_aed ));return _dgb ;};

// Append appends an object to the PSProgram.
func (_dc *PSProgram )Append (obj PSObject ){*_dc =append (*_dc ,obj )};func (_de *PSOperand )DebugString ()string {return _ed .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_de );};func (_fba *PSOperand )index (_edg *PSStack )error {_gfa ,_bfe :=_edg .Pop ();if _bfe !=nil {return _bfe ;};_cbgd ,_eef :=_gfa .(*PSInteger );if !_eef {return ErrTypeCheck ;};if _cbgd .Val < 0{return ErrRangeCheck ;};if _cbgd .Val > len (*_edg )-1{return ErrStackUnderflow ;};_cacf :=(*_edg )[len (*_edg )-1-_cbgd .Val ];_bfe =_edg .Push (_cacf .Duplicate ());return _bfe ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// Parse parses the postscript and store as a program that can be executed.
func (_gdfa *PSParser )Parse ()(*PSProgram ,error ){_gdfa .skipSpaces ();_ccbc ,_gff :=_gdfa ._abgbc .Peek (2);if _gff !=nil {return nil ,_gff ;};if _ccbc [0]!='{'{return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_gcb ,_gff :=_gdfa .parseFunction ();if _gff !=nil &&_gff !=_bg .EOF {return nil ,_gff ;};return _gcb ,_gff ;};func (_ddc *PSOperand )abs (_fa *PSStack )error {_bac ,_gfg :=_fa .Pop ();if _gfg !=nil {return _gfg ;};if _abf ,_faf :=_bac .(*PSReal );_faf {_dfa :=_abf .Val ;if _dfa < 0{_gfg =_fa .Push (MakeReal (-_dfa ));}else {_gfg =_fa .Push (MakeReal (_dfa ));};}else if _fad ,_bb :=_bac .(*PSInteger );_bb {_ccd :=_fad .Val ;if _ccd < 0{_gfg =_fa .Push (MakeInteger (-_ccd ));}else {_gfg =_fa .Push (MakeInteger (_ccd ));};}else {return ErrTypeCheck ;};return _gfg ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_fdea *PSOperand )sub (_gag *PSStack )error {_bfba ,_fead :=_gag .Pop ();if _fead !=nil {return _fead ;};_dff ,_fead :=_gag .Pop ();if _fead !=nil {return _fead ;};_ebd ,_gfge :=_bfba .(*PSReal );_gdea ,_egd :=_bfba .(*PSInteger );if !_gfge &&!_egd {return ErrTypeCheck ;};_caf ,_cgb :=_dff .(*PSReal );_gcgb ,_bgag :=_dff .(*PSInteger );if !_cgb &&!_bgag {return ErrTypeCheck ;};if _egd &&_bgag {_ebbd :=_gcgb .Val -_gdea .Val ;_ebdg :=_gag .Push (MakeInteger (_ebbd ));return _ebdg ;};var _bfec float64 =0;if _cgb {_bfec =_caf .Val ;}else {_bfec =float64 (_gcgb .Val );};if _gfge {_bfec -=_ebd .Val ;}else {_bfec -=float64 (_gdea .Val );};_fead =_gag .Push (MakeReal (_bfec ));return _fead ;};func (_gcfd *PSOperand )ifelse (_ffa *PSStack )error {_fedd ,_cga :=_ffa .Pop ();if _cga !=nil {return _cga ;};_cgg ,_cga :=_ffa .Pop ();if _cga !=nil {return _cga ;};_ead ,_cga :=_ffa .Pop ();if _cga !=nil {return _cga ;};_bgae ,_bbdg :=_fedd .(*PSProgram );if !_bbdg {return ErrTypeCheck ;};_adc ,_bbdg :=_cgg .(*PSProgram );if !_bbdg {return ErrTypeCheck ;};_bgb ,_bbdg :=_ead .(*PSBoolean );if !_bbdg {return ErrTypeCheck ;};if _bgb .Val {_ddb :=_adc .Exec (_ffa );return _ddb ;};_cga =_bgae .Exec (_ffa );return _cga ;};func (_ff *PSOperand )atan (_bf *PSStack )error {_cac ,_acf :=_bf .PopNumberAsFloat64 ();if _acf !=nil {return _acf ;};_cacd ,_acf :=_bf .PopNumberAsFloat64 ();if _acf !=nil {return _acf ;};if _cac ==0{var _fb error ;if _cacd < 0{_fb =_bf .Push (MakeReal (270));}else {_fb =_bf .Push (MakeReal (90));};return _fb ;};_abg :=_cacd /_cac ;_ea :=_f .Atan (_abg )*180/_f .Pi ;_acf =_bf .Push (MakeReal (_ea ));return _acf ;};var ErrRangeCheck =_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _ge []float64 ;for _ ,_gb :=range objects {if _eeg ,_d :=_gb .(*PSInteger );_d {_ge =append (_ge ,float64 (_eeg .Val ));}else if _dd ,_ab :=_gb .(*PSReal );_ab {_ge =append (_ge ,_dd .Val );}else {return nil ,ErrTypeCheck ;};};return _ge ,nil ;};var ErrStackOverflow =_e .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_egc *PSOperand )cos (_ace *PSStack )error {_bfb ,_cefc :=_ace .PopNumberAsFloat64 ();if _cefc !=nil {return _cefc ;};_eae :=_f .Cos (_bfb *_f .Pi /180.0);_cefc =_ace .Push (MakeReal (_eae ));return _cefc ;};var ErrStackUnderflow =_e .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_edeg *PSOperand )ne (_aab *PSStack )error {_bcb :=_edeg .eq (_aab );if _bcb !=nil {return _bcb ;};_bcb =_edeg .not (_aab );return _bcb ;};