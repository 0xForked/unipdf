//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

//
// Package extractor is used for quickly extracting PDF content through a simple interface.
// Currently offers functionality for extracting textual content.
//
package extractor ;import (_da "bytes";_c "errors";_ff "fmt";_bda "github.com/unidoc/unipdf/v3/common";_fg "github.com/unidoc/unipdf/v3/common/license";_ea "github.com/unidoc/unipdf/v3/contentstream";_cf "github.com/unidoc/unipdf/v3/core";_ge "github.com/unidoc/unipdf/v3/internal/textencoding";_df "github.com/unidoc/unipdf/v3/internal/transform";_fd "github.com/unidoc/unipdf/v3/model";_gf "golang.org/x/text/unicode/norm";_bc "golang.org/x/xerrors";_f "image/color";_dg "io";_e "math";_bd "sort";_b "strings";_g "unicode";);

// String returns a string describing `ma`.
func (_adcb TextMarkArray )String ()string {_gdeg :=len (_adcb ._efd );if _gdeg ==0{return "\u0045\u004d\u0050T\u0059";};_gaef :=_adcb ._efd [0];_efc :=_adcb ._efd [_gdeg -1];return _ff .Sprintf ("\u007b\u0054\u0045\u0058\u0054\u004d\u0041\u0052K\u0041\u0052\u0052AY\u003a\u0020\u0025\u0064\u0020\u0065l\u0065\u006d\u0065\u006e\u0074\u0073\u000a\u0009\u0066\u0069\u0072\u0073\u0074\u003d\u0025s\u000a\u0009\u0020\u006c\u0061\u0073\u0074\u003d%\u0073\u007d",_gdeg ,_gaef ,_efc );};func _dda (_fgce *_ea .ContentStreamOperation )(float64 ,error ){if len (_fgce .Params )!=1{_agb :=_c .New ("\u0069n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0070\u0061r\u0061m\u0065t\u0065\u0072\u0020\u0063\u006f\u0075\u006et");_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0023\u0071\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020h\u0061\u0076\u0065\u0020\u0025\u0064\u0020i\u006e\u0070\u0075\u0074\u0020\u0070\u0061\u0072\u0061\u006d\u0073,\u0020\u0067\u006f\u0074\u0020\u0025\u0064\u0020\u0025\u002b\u0076",_fgce .Operand ,1,len (_fgce .Params ),_fgce .Params );return 0.0,_agb ;};return _cf .GetNumberAsFloat (_fgce .Params [0]);};func _beccf (_eccb ,_gcdd _fd .PdfRectangle )(_fd .PdfRectangle ,bool ){if !_cdee (_eccb ,_gcdd ){return _fd .PdfRectangle {},false ;};return _fd .PdfRectangle {Llx :_e .Max (_eccb .Llx ,_gcdd .Llx ),Urx :_e .Min (_eccb .Urx ,_gcdd .Urx ),Lly :_e .Max (_eccb .Lly ,_gcdd .Lly ),Ury :_e .Min (_eccb .Ury ,_gcdd .Ury )},true ;};func (_afcf *wordBag )firstReadingIndex (_cegg int )int {_cgg :=_afcf .firstWord (_cegg )._bgee ;_bfcc :=float64 (_cegg +1)*_decb ;_fcea :=_bfcc +_dgge *_cgg ;_bad :=_cegg ;for _ ,_bgb :=range _afcf .depthBand (_bfcc ,_fcea ){if _effg (_afcf .firstWord (_bgb ),_afcf .firstWord (_bad ))< 0{_bad =_bgb ;};};return _bad ;};func _gff (_dbc float64 )int {var _bgd int ;if _dbc >=0{_bgd =int (_dbc /_decb );}else {_bgd =int (_dbc /_decb )-1;};return _bgd ;};func (_cdgfc paraList )xNeighbours ()map[*textPara ][]int {_egeaf :=make ([]event ,2*len (_cdgfc ));for _dbfcg ,_ecae :=range _cdgfc {_egeaf [2*_dbfcg ]=event {_ecae .Llx ,true ,_dbfcg };_egeaf [2*_dbfcg +1]=event {_ecae .Urx ,false ,_dbfcg };};return _cdgfc .eventNeighbours (_egeaf );};func (_eca *imageExtractContext )extractContentStreamImages (_ba string ,_bb *_fd .PdfPageResources )error {_ead :=_ea .NewContentStreamParser (_ba );_bbb ,_dgcc :=_ead .Parse ();if _dgcc !=nil {return _dgcc ;};if _eca ._ec ==nil {_eca ._ec =map[*_cf .PdfObjectStream ]*cachedImage {};};if _eca ._ac ==nil {_eca ._ac =&ImageExtractOptions {};};_ag :=_ea .NewContentStreamProcessor (*_bbb );_ag .AddHandler (_ea .HandlerConditionEnumAllOperands ,"",func (_ee *_ea .ContentStreamOperation ,_acd _ea .GraphicsState ,_gb *_fd .PdfPageResources )error {return _eca .processOperand (_ee ,_acd ,_gb );});return _ag .Process (_bb );};

// String returns a description of `w`.
func (_bggc *textWord )String ()string {return _ff .Sprintf ("\u0025\u002e2\u0066\u0020\u0025\u0036\u002e\u0032\u0066\u0020\u0066\u006f\u006e\u0074\u0073\u0069\u007a\u0065\u003d\u0025\u002e\u0032\u0066\u0020\"%\u0073\u0022",_bggc ._abdb ,_bggc .PdfRectangle ,_bggc ._bgee ,_bggc ._daace );};

// RenderMode specifies the text rendering mode (Tmode), which determines whether showing text shall cause
// glyph outlines to be  stroked, filled, used as a clipping boundary, or some combination of the three.
// Stroking, filling, and clipping shall have the same effects for a text object as they do for a path object
// (see 8.5.3, "Path-Painting Operators" and 8.5.4, "Clipping Path Operators").
type RenderMode int ;func (_cfgc *textTable )growTable (){_aede :=func (_cccb paraList ){_cfgc ._dcfa ++;for _cffcf :=0;_cffcf < _cfgc ._bcbb ;_cffcf ++{_egfc :=_cccb [_cffcf ];_cfgc .put (_cffcf ,_cfgc ._dcfa -1,_egfc );};};_bega :=func (_efge paraList ){_cfgc ._bcbb ++;for _efcfd :=0;_efcfd < _cfgc ._dcfa ;_efcfd ++{_afac :=_efge [_efcfd ];_cfgc .put (_cfgc ._bcbb -1,_efcfd ,_afac );};};for {_cadbe :=false ;_abda :=_cfgc .getDown ();_edgfc :=_cfgc .getRight ();if _abda !=nil &&_edgfc !=nil {_gaca :=_abda [len (_abda )-1];if _gaca !=nil &&!_gaca ._gecc &&_gaca ==_edgfc [len (_edgfc )-1]{_aede (_abda );_bega (_edgfc );_cfgc .put (_cfgc ._bcbb -1,_cfgc ._dcfa -1,_gaca );_cadbe =true ;};};if !_cadbe &&_abda !=nil {_aede (_abda );_cadbe =true ;};if !_cadbe &&_edgfc !=nil {_bega (_edgfc );_cadbe =true ;};if !_cadbe {break ;};};};func (_ace *textObject )setTextLeading (_cga float64 ){if _ace ==nil ||_ace ._cebg ==nil {return ;};_ace ._cebg ._cfce =_cga ;};func (_eebc *textLine )bbox ()_fd .PdfRectangle {return _eebc .PdfRectangle };func (_agff *textObject )moveText (_bdbb ,_cdb float64 ){_agff .moveTo (_bdbb ,_cdb )};func (_cage paraList )reorder (_ddef []int ){_fda :=make (paraList ,len (_cage ));for _fbfg ,_abe :=range _ddef {_fda [_fbfg ]=_cage [_abe ];};copy (_cage ,_fda );};type paraList []*textPara ;func (_bgg *wordBag )minDepth ()float64 {return _bgg ._ffba -(_bgg .Ury -_bgg ._dag )};func (_afb *textObject )renderText (_ddd []byte )error {if _afb ._bbd {_bda .Log .Debug ("\u0072\u0065\u006e\u0064\u0065r\u0054\u0065\u0078\u0074\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u0066\u006f\u006e\u0074\u002e\u0020\u004e\u006f\u0074\u0020\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067\u002e");return nil ;};_adfc :=_afb .getCurrentFont ();_fbbc :=_adfc .BytesToCharcodes (_ddd );_abf ,_edgf ,_dcdaa :=_adfc .CharcodesToStrings (_fbbc );if _dcdaa > 0{_bda .Log .Debug ("\u0072\u0065nd\u0065\u0072\u0054e\u0078\u0074\u003a\u0020num\u0043ha\u0072\u0073\u003d\u0025\u0064\u0020\u006eum\u004d\u0069\u0073\u0073\u0065\u0073\u003d%\u0064",_edgf ,_dcdaa );};_afb ._cebg ._deb +=_edgf ;_afb ._cebg ._ggc +=_dcdaa ;_afg :=_afb ._cebg ;_bcg :=_afg ._gea ;_gecb :=_afg ._gfcg /100.0;_adbf ,_acdg :=_adfc .GetRuneMetrics (' ');if !_acdg {_adbf ,_acdg =_adfc .GetCharMetrics (32);};if !_acdg {_adbf ,_ =_fd .DefaultFont ().GetRuneMetrics (' ');};_gcaa :=_adbf .Wx *_dgg ;_bda .Log .Trace ("\u0073p\u0061\u0063e\u0057\u0069\u0064t\u0068\u003d\u0025\u002e\u0032\u0066\u0020t\u0065\u0078\u0074\u003d\u0025\u0071 \u0066\u006f\u006e\u0074\u003d\u0025\u0073\u0020\u0066\u006f\u006et\u0053\u0069\u007a\u0065\u003d\u0025\u002e\u0032\u0066",_gcaa ,_abf ,_adfc ,_bcg );_aac :=_df .NewMatrix (_bcg *_gecb ,0,0,_bcg ,0,_afg ._fbdf );if _abcf {_bda .Log .Info ("\u0072\u0065\u006e\u0064\u0065\u0072T\u0065\u0078\u0074\u003a\u0020\u0025\u0064\u0020\u0063\u006f\u0064\u0065\u0073=\u0025\u002b\u0076\u0020\u0074\u0065\u0078t\u0073\u003d\u0025\u0071",len (_fbbc ),_fbbc ,_abf );};_bda .Log .Trace ("\u0072\u0065\u006e\u0064\u0065\u0072T\u0065\u0078\u0074\u003a\u0020\u0025\u0064\u0020\u0063\u006f\u0064\u0065\u0073=\u0025\u002b\u0076\u0020\u0072\u0075\u006ee\u0073\u003d\u0025\u0071",len (_fbbc ),_fbbc ,len (_abf ));_fccf :=_afb .getFillColor ();_ccef :=_afb .getStrokeColor ();for _edb ,_gbdg :=range _abf {_afc :=[]rune (_gbdg );if len (_afc )==1&&_afc [0]=='\x00'{continue ;};_ccc :=_fbbc [_edb ];_abgd :=_afb ._caf .CTM .Mult (_afb ._gbg ).Mult (_aac );_ccg :=0.0;if len (_afc )==1&&_afc [0]==32{_ccg =_afg ._fbd ;};_egfb ,_gde :=_adfc .GetCharMetrics (_ccc );if !_gde {_bda .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u004e\u006f \u006d\u0065\u0074r\u0069\u0063\u0020\u0066\u006f\u0072\u0020\u0063\u006fde\u003d\u0025\u0064 \u0072\u003d0\u0078\u0025\u0030\u0034\u0078\u003d%\u002b\u0071 \u0025\u0073",_ccc ,_afc ,_afc ,_adfc );return _ff .Errorf ("\u006e\u006f\u0020\u0063\u0068\u0061\u0072\u0020\u006d\u0065\u0074\u0072\u0069\u0063\u0073:\u0020f\u006f\u006e\u0074\u003d\u0025\u0073\u0020\u0063\u006f\u0064\u0065\u003d\u0025\u0064",_adfc .String (),_ccc );};_cfbe :=_df .Point {X :_egfb .Wx *_dgg ,Y :_egfb .Wy *_dgg };_gbba :=_df .Point {X :(_cfbe .X *_bcg +_ccg )*_gecb };_ecca :=_df .Point {X :(_cfbe .X *_bcg +_afg ._fcc +_ccg )*_gecb };if _abcf {_bda .Log .Info ("\u0074\u0066\u0073\u003d\u0025\u002e\u0032\u0066\u0020\u0074\u0063\u003d\u0025\u002e\u0032f\u0020t\u0077\u003d\u0025\u002e\u0032\u0066\u0020\u0074\u0068\u003d\u0025\u002e\u0032\u0066",_bcg ,_afg ._fcc ,_afg ._fbd ,_gecb );_bda .Log .Info ("\u0064x\u002c\u0064\u0079\u003d%\u002e\u0033\u0066\u0020\u00740\u003d%\u002e2\u0066\u0020\u0074\u003d\u0025\u002e\u0032f",_cfbe ,_gbba ,_ecca );};_aggf :=_beeg (_gbba );_dbgb :=_beeg (_ecca );_bfc :=_afb ._caf .CTM .Mult (_afb ._gbg ).Mult (_aggf );if _abcf {_bda .Log .Info ("e\u006e\u0064\u003a\u000a\tC\u0054M\u003d\u0025\u0073\u000a\u0009 \u0074\u006d\u003d\u0025\u0073\u000a"+"\u0009\u0020t\u0064\u003d\u0025s\u0020\u0078\u006c\u0061\u0074\u003d\u0025\u0073\u000a"+"\u0009t\u0064\u0030\u003d\u0025\u0073\u000a\u0009\u0020\u2192\u0020\u0025s\u0020\u0078\u006c\u0061\u0074\u003d\u0025\u0073",_afb ._caf .CTM ,_afb ._gbg ,_dbgb ,_dbbb (_afb ._caf .CTM .Mult (_afb ._gbg ).Mult (_dbgb )),_aggf ,_bfc ,_dbbb (_bfc ));};_becd ,_feb :=_afb .newTextMark (_ge .ExpandLigatures (_afc ),_abgd ,_dbbb (_bfc ),_e .Abs (_gcaa *_abgd .ScalingFactorX ()),_adfc ,_afb ._cebg ._fcc ,_fccf ,_ccef );if !_feb {_bda .Log .Debug ("\u0054\u0065\u0078\u0074\u0020\u006d\u0061\u0072\u006b\u0020\u006f\u0075\u0074\u0073\u0069d\u0065 \u0070\u0061\u0067\u0065\u002e\u0020\u0053\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};if _adfc ==nil {_bda .Log .Debug ("\u0045R\u0052O\u0052\u003a\u0020\u004e\u006f\u0020\u0066\u006f\u006e\u0074\u002e");}else if _adfc .Encoder ()==nil {_bda .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020N\u006f\u0020\u0065\u006e\u0063\u006f\u0064\u0069\u006eg\u002e\u0020\u0066o\u006et\u003d\u0025\u0073",_adfc );}else {if _dgd ,_eddc :=_adfc .Encoder ().CharcodeToRune (_ccc );_eddc {_becd ._badf =string (_dgd );};};_bda .Log .Trace ("i\u003d\u0025\u0064\u0020\u0063\u006fd\u0065\u003d\u0025\u0064\u0020\u006d\u0061\u0072\u006b=\u0025\u0073\u0020t\u0072m\u003d\u0025\u0073",_edb ,_ccc ,_becd ,_abgd );_afb ._ded =append (_afb ._ded ,&_becd );_afb ._gbg .Concat (_dbgb );};return nil ;};

// ToTextMark returns the public view of `tm`.
func (_baca *textMark )ToTextMark ()TextMark {return TextMark {Text :_baca ._ebg ,Original :_baca ._badf ,BBox :_baca ._dgbc ,Font :_baca ._cffd ,FontSize :_baca ._egcd ,FillColor :_baca ._dcgd ,StrokeColor :_baca ._cgdc };};func (_cbaac *textTable )log (_beda string ){if !_gbbd {return ;};_bda .Log .Info ("~\u007e\u007e\u0020\u0025\u0073\u003a \u0025\u0064\u0020\u0078\u0020\u0025\u0064\u000a\u0020 \u0020\u0020\u0020 \u00256\u002e\u0032\u0066",_beda ,_cbaac ._bcbb ,_cbaac ._dcfa ,_cbaac .PdfRectangle );for _dbcd :=0;_dbcd < _cbaac ._dcfa ;_dbcd ++{for _egfbg :=0;_egfbg < _cbaac ._bcbb ;_egfbg ++{_gdfbc :=_cbaac .get (_egfbg ,_dbcd );_ff .Printf ("\u00254\u0064 \u0025\u0032\u0064\u003a\u0020%\u0036\u002e2\u0066\u0020\u0025\u0071\u000a",_egfbg ,_dbcd ,_gdfbc .PdfRectangle ,_dbaac (_gdfbc .text (),50));};};};func (_fcf *textObject )nextLine (){_fcf .moveTo (0,-_fcf ._cebg ._cfce )};func (_faef paraList )addNeighbours (){_gba :=_faef .yNeighbours ();for _ ,_cedg :=range _faef {var _ccff *textPara ;_gcbc :=false ;for _ ,_fffd :=range _gba [_cedg ]{_ggaa :=_faef [_fffd ];if _ggaa .Urx <=_cedg .Llx {if _ccff ==nil {_ccff =_ggaa ;}else {if _ggaa .Llx > _ccff .Llx {_ccff =_ggaa ;_gcbc =false ;}else if _ggaa .Llx ==_ccff .Llx {_gcbc =true ;};};};};if !_gcbc {_cedg ._bacd =_ccff ;};};for _ ,_abff :=range _faef {var _ceeb *textPara ;_bgeb :=false ;for _ ,_aeea :=range _gba [_abff ]{_cgde :=_faef [_aeea ];if _cgde .Llx >=_abff .Urx {if _ceeb ==nil {_ceeb =_cgde ;}else {if _cgde .Llx < _ceeb .Llx {_ceeb =_cgde ;_bgeb =false ;}else if _cgde .Llx ==_ceeb .Llx {_bgeb =true ;};};};};if !_bgeb {_abff ._ddeb =_ceeb ;};};_gba =_faef .xNeighbours ();for _ ,_debdb :=range _faef {var _fgbc *textPara ;_bacc :=false ;for _ ,_cfbag :=range _gba [_debdb ]{_eeabc :=_faef [_cfbag ];if _eeabc .Lly >=_debdb .Ury {if _fgbc ==nil {_fgbc =_eeabc ;}else {if _eeabc .Ury < _fgbc .Ury {_fgbc =_eeabc ;_bacc =false ;}else if _eeabc .Ury ==_fgbc .Ury {_bacc =true ;};};};};if !_bacc {_debdb ._cecb =_fgbc ;};};for _ ,_bdacg :=range _faef {var _geag *textPara ;_fadg :=false ;for _ ,_eedcg :=range _gba [_bdacg ]{_gabc :=_faef [_eedcg ];if _gabc .Ury <=_bdacg .Lly {if _geag ==nil {_geag =_gabc ;}else {if _gabc .Ury > _geag .Ury {_geag =_gabc ;_fadg =false ;}else if _gabc .Ury ==_geag .Ury {_fadg =true ;};};};};if !_fadg {_bdacg ._ebaf =_geag ;};};};

// String returns a description of `b`.
func (_acbg *wordBag )String ()string {var _baf []string ;for _ ,_fedd :=range _acbg .depthIndexes (){_gefe ,_ :=_acbg ._afec [_fedd ];for _ ,_ffdf :=range _gefe {_baf =append (_baf ,_ffdf ._daace );};};return _ff .Sprintf ("\u0025.\u0032\u0066\u0020\u0066\u006f\u006e\u0074\u0073\u0069\u007a\u0065=\u0025\u002e\u0032\u0066\u0020\u0025\u0064\u0020\u0025\u0071",_acbg .PdfRectangle ,_acbg ._dag ,len (_baf ),_baf );};func _abgba (_ebeg string )bool {for _ ,_dcdf :=range _ebeg {if !_g .IsSpace (_dcdf ){return false ;};};return true ;};func (_cada *PageText )computeViews (){var _bbc paraList ;_bceg :=len (_cada ._bge );for _gbfg :=0;_gbfg < 360&&_bceg > 0;_gbfg +=90{_eeeg :=make ([]*textMark ,0,len (_cada ._bge )-_bceg );for _ ,_fga :=range _cada ._bge {if _fga ._ggg ==_gbfg {_eeeg =append (_eeeg ,_fga );};};if len (_eeeg )> 0{_gce :=_egdf (_eeeg ,_cada ._fddg );_bbc =append (_bbc ,_gce ...);_bceg -=len (_eeeg );};};_agbc :=new (_da .Buffer );_bbc .writeText (_agbc );_cada ._agge =_agbc .String ();_cada ._ccdf =_bbc .toTextMarks ();_cada ._dde =_bbc .tables ();};func _fbbcc (_cbfe _fd .PdfRectangle ,_agef []*textLine )*textPara {return &textPara {PdfRectangle :_cbfe ,_cddb :_agef };};func _gedgd (_eafc []*textMark ,_baed _fd .PdfRectangle )*textWord {_ecbgc :=_eafc [0].PdfRectangle ;_aadaa :=_eafc [0]._egcd ;for _ ,_ccgaf :=range _eafc [1:]{_ecbgc =_fcgb (_ecbgc ,_ccgaf .PdfRectangle );if _ccgaf ._egcd > _aadaa {_aadaa =_ccgaf ._egcd ;};};return &textWord {PdfRectangle :_ecbgc ,_bbef :_eafc ,_abdb :_baed .Ury -_ecbgc .Lly ,_bgee :_aadaa };};func (_dcda *stateStack )size ()int {return len (*_dcda )};const _dgde =10;func (_bgff paraList )readBefore (_babd []int ,_dcga ,_ebc int )bool {_fcfd ,_gdge :=_bgff [_dcga ],_bgff [_ebc ];if _ggec (_fcfd ,_gdge )&&_fcfd .Lly > _gdge .Lly {return true ;};if !(_fcfd ._efga .Urx < _gdge ._efga .Llx ){return false ;};_gbfgb ,_gad :=_fcfd .Lly ,_gdge .Lly ;if _gbfgb > _gad {_gad ,_gbfgb =_gbfgb ,_gad ;};_bagd :=_e .Max (_fcfd ._efga .Llx ,_gdge ._efga .Llx );_cgfb :=_e .Min (_fcfd ._efga .Urx ,_gdge ._efga .Urx );_gcba :=_bgff .llyRange (_babd ,_gbfgb ,_gad );for _ ,_eedd :=range _gcba {if _eedd ==_dcga ||_eedd ==_ebc {continue ;};_cgbbd :=_bgff [_eedd ];if _cgbbd ._efga .Llx <=_cgfb &&_bagd <=_cgbbd ._efga .Urx {return false ;};};return true ;};

// Marks returns the TextMark collection for a page. It represents all the text on the page.
func (_edgc PageText )Marks ()*TextMarkArray {return &TextMarkArray {_efd :_edgc ._ccdf }};type textLine struct{_fd .PdfRectangle ;_abfe float64 ;_cda []*textWord ;_gged float64 ;};func (_cgad *wordBag )sort (){for _ ,_ageb :=range _cgad ._afec {_bd .Slice (_ageb ,func (_egdaa ,_eaab int )bool {return _effg (_ageb [_egdaa ],_ageb [_eaab ])< 0});};};func _cebd (_fafd *wordBag ,_aced *textWord ,_gbfe float64 )bool {return _fafd .Urx <=_aced .Llx &&_aced .Llx < _fafd .Urx +_gbfe ;};func (_dgfde *textLine )pullWord (_bcgd *wordBag ,_gdg *textWord ,_fdde int ){_dgfde .appendWord (_gdg );_bcgd .removeWord (_gdg ,_fdde );};func (_fgde paraList )log (_cfbg string ){if !_acda {return ;};_bda .Log .Info ("%\u0038\u0073\u003a\u0020\u0025\u0064 \u0070\u0061\u0072\u0061\u0073\u0020=\u003d\u003d\u003d\u003d\u003d\u003d\u002d-\u002d\u002d\u002d\u002d\u002d\u003d\u003d\u003d\u003d\u003d=\u003d",_cfbg ,len (_fgde ));for _fbagd ,_ccaf :=range _fgde {if _ccaf ==nil {continue ;};_dabb :=_ccaf .text ();_dcad :="\u0020\u0020";if _ccaf ._aada !=nil {_dcad =_ff .Sprintf ("\u005b%\u0064\u0078\u0025\u0064\u005d",_ccaf ._aada ._bcbb ,_ccaf ._aada ._dcfa );};_ff .Printf ("\u0025\u0034\u0064\u003a\u0020\u0025\u0036\u002e\u0032\u0066\u0020\u0025s\u0020\u0025\u0071\u000a",_fbagd ,_ccaf .PdfRectangle ,_dcad ,_dbaac (_dabb ,50));};};func _effg (_addf ,_dbce bounded )float64 {return _addf .bbox ().Llx -_dbce .bbox ().Llx };func (_gegf *textTable )bbox ()_fd .PdfRectangle {return _gegf .PdfRectangle };type textTable struct{_fd .PdfRectangle ;_bcbb ,_dcfa int ;_daedf map[uint64 ]*textPara ;};

// Tables returns the tables extracted from the page.
func (_eeee PageText )Tables ()[]TextTable {return _eeee ._dde };func _fbaa (_afaa *wordBag ,_fecbg int )*textLine {_agcdc :=_afaa .firstWord (_fecbg );_ebd :=textLine {PdfRectangle :_agcdc .PdfRectangle ,_gged :_agcdc ._bgee ,_abfe :_agcdc ._abdb };_ebd .pullWord (_afaa ,_agcdc ,_fecbg );return &_ebd ;};func (_ggf *textObject )setTextMatrix (_efa []float64 ){if len (_efa )!=6{_bda .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u006c\u0065\u006e\u0028\u0066\u0029\u0020\u0021\u003d\u0020\u0036\u0020\u0028\u0025\u0064\u0029",len (_efa ));return ;};_ecag ,_fff ,_aeed ,_gedg ,_bfed ,_dec :=_efa [0],_efa [1],_efa [2],_efa [3],_efa [4],_efa [5];_ggf ._gbg =_df .NewMatrix (_ecag ,_fff ,_aeed ,_gedg ,_bfed ,_dec );_ggf ._eag =_ggf ._gbg ;};const (RenderModeStroke RenderMode =1<<iota ;RenderModeFill ;RenderModeClip ;);func (_bgbb *textMark )inDiacriticArea (_dgbg *textMark )bool {_ccdba :=_bgbb .Llx -_dgbg .Llx ;_abcg :=_bgbb .Urx -_dgbg .Urx ;_gdac :=_bgbb .Lly -_dgbg .Lly ;return _e .Abs (_ccdba +_abcg )< _bgbb .Width ()*_abdg &&_e .Abs (_gdac )< _bgbb .Height ()*_abdg ;};func (_dbaa paraList )yNeighbours ()map[*textPara ][]int {_egdad :=make ([]event ,2*len (_dbaa ));for _edba ,_cgge :=range _dbaa {_egdad [2*_edba ]=event {_cgge .Lly ,true ,_edba };_egdad [2*_edba +1]=event {_cgge .Ury ,false ,_edba };};return _dbaa .eventNeighbours (_egdad );};

// String returns a string describing the current state of the textState stack.
func (_fcb *stateStack )String ()string {_ddc :=[]string {_ff .Sprintf ("\u002d\u002d\u002d\u002d f\u006f\u006e\u0074\u0020\u0073\u0074\u0061\u0063\u006b\u003a\u0020\u0025\u0064",len (*_fcb ))};for _dbb ,_eba :=range *_fcb {_fbad :="\u003c\u006e\u0069l\u003e";if _eba !=nil {_fbad =_eba .String ();};_ddc =append (_ddc ,_ff .Sprintf ("\u0009\u0025\u0032\u0064\u003a\u0020\u0025\u0073",_dbb ,_fbad ));};return _b .Join (_ddc ,"\u000a");};const (_caga =10;_decb =6;_ddgf =0.5;_gece =0.11;_bbfb =0.19;_ddfb =0.04;_aba =0.04;_dbef =1.0;_afea =0.04;_eeeeg =0.4;_debg =0.7;_bdaed =1.0;_dbcf =0.1;_dfcc =1.4;_gegd =0.46;_ada =0.02;_adcbed =0.2;_abdg =0.5;_dgdb =4;_dgge =4.0;_cec =6;);

// RangeOffset returns the TextMarks in `ma` that overlap text[start:end] in the extracted text.
// These are tm: `start` <= tm.Offset + len(tm.Text) && tm.Offset < `end` where
// `start` and `end` are offsets in the extracted text.
// NOTE: TextMarks can contain multiple characters. e.g. "ffi" for the ﬃ ligature so the first and
// last elements of the returned TextMarkArray may only partially overlap text[start:end].
func (_ege *TextMarkArray )RangeOffset (start ,end int )(*TextMarkArray ,error ){if _ege ==nil {return nil ,_c .New ("\u006da\u003d\u003d\u006e\u0069\u006c");};if end < start {return nil ,_ff .Errorf ("\u0065\u006e\u0064\u0020\u003c\u0020\u0073\u0074\u0061\u0072\u0074\u002e\u0020\u0052\u0061n\u0067\u0065\u004f\u0066\u0066\u0073\u0065\u0074\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064\u002e\u0020\u0073\u0074\u0061\u0072t=\u0025\u0064\u0020\u0065\u006e\u0064\u003d\u0025\u0064\u0020",start ,end );};_ecba :=len (_ege ._efd );if _ecba ==0{return _ege ,nil ;};if start < _ege ._efd [0].Offset {start =_ege ._efd [0].Offset ;};if end > _ege ._efd [_ecba -1].Offset +1{end =_ege ._efd [_ecba -1].Offset +1;};_eeeb :=_bd .Search (_ecba ,func (_gfgb int )bool {return _ege ._efd [_gfgb ].Offset +len (_ege ._efd [_gfgb ].Text )-1>=start });if !(0<=_eeeb &&_eeeb < _ecba ){_ced :=_ff .Errorf ("\u004f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073\u0074\u0061\u0072\u0074\u003d%\u0064\u0020\u0069\u0053\u0074\u0061\u0072\u0074\u003d\u0025\u0064\u0020\u006c\u0065\u006e\u003d\u0025\u0064\u000a\u0009\u0066\u0069\u0072\u0073\u0074\u003d\u0025\u0076\u000a\u0009 \u006c\u0061\u0073\u0074\u003d%\u0076",start ,_eeeb ,_ecba ,_ege ._efd [0],_ege ._efd [_ecba -1]);return nil ,_ced ;};_cea :=_bd .Search (_ecba ,func (_eaed int )bool {return _ege ._efd [_eaed ].Offset > end -1});if !(0<=_cea &&_cea < _ecba ){_dgb :=_ff .Errorf ("\u004f\u0075\u0074\u0020\u006f\u0066\u0020r\u0061\u006e\u0067e\u002e\u0020\u0065n\u0064\u003d%\u0064\u0020\u0069\u0045\u006e\u0064=\u0025d \u006c\u0065\u006e\u003d\u0025\u0064\u000a\u0009\u0066\u0069\u0072\u0073\u0074\u003d\u0025\u0076\u000a\u0009\u0020\u006c\u0061\u0073\u0074\u003d\u0025\u0076",end ,_cea ,_ecba ,_ege ._efd [0],_ege ._efd [_ecba -1]);return nil ,_dgb ;};if _cea <=_eeeb {return nil ,_ff .Errorf ("\u0069\u0045\u006e\u0064\u0020\u003c=\u0020\u0069\u0053\u0074\u0061\u0072\u0074\u003a\u0020\u0073\u0074\u0061\u0072\u0074\u003d\u0025\u0064\u0020\u0065\u006ed\u003d\u0025\u0064\u0020\u0069\u0053\u0074\u0061\u0072\u0074\u003d\u0025\u0064\u0020i\u0045n\u0064\u003d\u0025\u0064",start ,end ,_eeeb ,_cea );};return &TextMarkArray {_efd :_ege ._efd [_eeeb :_cea ]},nil ;};func _aacb (_efaa []TextMark ,_bgca *int )[]TextMark {_eebe :=_efaa [len (_efaa )-1];_fafe :=[]rune (_eebe .Text );if len (_fafe )==1{_efaa =_efaa [:len (_efaa )-1];_bfbd :=_efaa [len (_efaa )-1];*_bgca =_bfbd .Offset +len (_bfbd .Text );}else {_dacd :=_efdb (_eebe .Text );*_bgca +=len (_dacd )-len (_eebe .Text );_eebe .Text =_dacd ;};return _efaa ;};type bounded interface{bbox ()_fd .PdfRectangle };func (_eeegg paraList )topoOrder ()[]int {if _acda {_bda .Log .Info ("\u0074\u006f\u0070\u006f\u004f\u0072\u0064\u0065\u0072\u003a");};_ggce :=len (_eeegg );_dfac :=make ([]bool ,_ggce );_decc :=make ([]int ,0,_ggce );_efca :=_eeegg .llyOrdering ();var _egcf func (_fbde int );_egcf =func (_dbbe int ){_dfac [_dbbe ]=true ;for _bbfe :=0;_bbfe < _ggce ;_bbfe ++{if !_dfac [_bbfe ]{if _eeegg .readBefore (_efca ,_dbbe ,_bbfe ){_egcf (_bbfe );};};};_decc =append (_decc ,_dbbe );};for _cfe :=0;_cfe < _ggce ;_cfe ++{if !_dfac [_cfe ]{_egcf (_cfe );};};return _gbgf (_decc );};

// String returns a string describing `tm`.
func (_abbg TextMark )String ()string {_bacg :=_abbg .BBox ;var _dedc string ;if _abbg .Font !=nil {_dedc =_abbg .Font .String ();if len (_dedc )> 50{_dedc =_dedc [:50]+"\u002e\u002e\u002e";};};var _dgcb string ;if _abbg .Meta {_dgcb ="\u0020\u002a\u004d\u002a";};return _ff .Sprintf ("\u007b\u0054\u0065\u0078t\u004d\u0061\u0072\u006b\u003a\u0020\u0025\u0064\u0020%\u0071\u003d\u0025\u0030\u0032\u0078\u0020\u0028\u0025\u0036\u002e\u0032\u0066\u002c\u0020\u0025\u0036\u002e2\u0066\u0029\u0020\u0028\u00256\u002e\u0032\u0066\u002c\u0020\u0025\u0036\u002e\u0032\u0066\u0029\u0020\u0025\u0073\u0025\u0073\u007d",_abbg .Offset ,_abbg .Text ,[]rune (_abbg .Text ),_bacg .Llx ,_bacg .Lly ,_bacg .Urx ,_bacg .Ury ,_dedc ,_dgcb );};type textObject struct{_dbfa *Extractor ;_aaf *_fd .PdfPageResources ;_caf _ea .GraphicsState ;_cebg *textState ;_ddg *stateStack ;_gbg _df .Matrix ;_eag _df .Matrix ;_ded []*textMark ;_bbd bool ;};

// ExtractText processes and extracts all text data in content streams and returns as a string.
// It takes into account character encodings in the PDF file, which are decoded by
// CharcodeBytesToUnicode.
// Characters that can't be decoded are replaced with MissingCodeRune ('\ufffd' = �).
func (_caa *Extractor )ExtractText ()(string ,error ){_gec ,_ ,_ ,_gfde :=_caa .ExtractTextWithStats ();return _gec ,_gfde ;};func _bddg (_afde ,_eage bounded )float64 {return _fecc (_afde )-_fecc (_eage )};

// String returns a string describing `pt`.
func (_cabb PageText )String ()string {_fccfc :=_ff .Sprintf ("P\u0061\u0067\u0065\u0054ex\u0074:\u0020\u0025\u0064\u0020\u0065l\u0065\u006d\u0065\u006e\u0074\u0073",len (_cabb ._bge ));_ceg :=[]string {"\u002d"+_fccfc };for _ ,_fee :=range _cabb ._bge {_ceg =append (_ceg ,_fee .String ());};_ceg =append (_ceg ,"\u002b"+_fccfc );return _b .Join (_ceg ,"\u000a");};const TOL =1.0e-6;func (_ebea *wordBag )depthIndexes ()[]int {if len (_ebea ._afec )==0{return nil ;};_dea :=make ([]int ,len (_ebea ._afec ));_caeb :=0;for _cgba :=range _ebea ._afec {_dea [_caeb ]=_cgba ;_caeb ++;};_bd .Ints (_dea );return _dea ;};func (_aebg *wordBag )text ()string {_dce :=_aebg .allWords ();_deab :=make ([]string ,len (_dce ));for _daae ,_aefe :=range _dce {_deab [_daae ]=_aefe ._daace ;};return _b .Join (_deab ,"\u0020");};func _dabbc (_efdd []*textWord ,_fagb *textWord )[]*textWord {for _ebfa ,_gccb :=range _efdd {if _gccb ==_fagb {return _gbcd (_efdd ,_ebfa );};};_bda .Log .Error ("\u0072\u0065\u006d\u006f\u0076e\u0057\u006f\u0072\u0064\u003a\u0020\u0077\u006f\u0072\u0064\u0073\u0020\u0064o\u0065\u0073\u006e\u0027\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0077\u006f\u0072\u0064\u003d\u0025\u0073",_fagb );return nil ;};func (_eaa *textObject )reset (){_eaa ._gbg =_df .IdentityMatrix ();_eaa ._eag =_df .IdentityMatrix ();_eaa ._ded =nil ;};func (_efgd *textLine )text ()string {var _ccge []string ;for _ ,_fege :=range _efgd ._cda {if _fege ._cgcg {_ccge =append (_ccge ,"\u0020");};_ccge =append (_ccge ,_fege ._daace );};return _b .Join (_ccge ,"");};func (_gagg paraList )applyTables (_ggbf []*textTable )paraList {_bacgg :=map[*textPara ]struct{}{};var _dbcfb paraList ;for _ ,_eaaf :=range _ggbf {for _ ,_fdebc :=range _eaaf ._daedf {_bacgg [_fdebc ]=struct{}{};};_dbcfb =append (_dbcfb ,_eaaf .newTablePara ());};for _ ,_bbe :=range _gagg {if _ ,_afef :=_bacgg [_bbe ];!_afef {_dbcfb =append (_dbcfb ,_bbe );};};return _dbcfb ;};const _db =20;

// String returns a description of `p`.
func (_faecd *textPara )String ()string {_cdba :="";if _faecd ._aada !=nil {_cdba =_ff .Sprintf ("\u005b\u0025\u0064\u0078\u0025\u0064\u005d\u0020",_faecd ._aada ._bcbb ,_faecd ._aada ._dcfa );};return _ff .Sprintf ("\u0025\u0036\u002e\u0032f \u0025\u0073\u0025\u0064\u0020\u006c\u0069\u006e\u0065\u0073\u0020\u0025\u0071",_faecd .PdfRectangle ,_cdba ,len (_faecd ._cddb ),_dbaac (_faecd .text (),50));};func (_fced *textLine )endsInHyphen ()bool {_gabd :=_fced ._cda [len (_fced ._cda )-1];_ecdb :=[]rune (_gabd ._daace );if !_g .Is (_g .Hyphen ,_ecdb [len (_ecdb )-1]){return false ;};if _gabd ._cgcg &&_fgeb (_ecdb ){return true ;};return _fgeb ([]rune (_fced .text ()));};func (_gbc *textObject )showText (_ccee []byte )error {return _gbc .renderText (_ccee )};func (_aebe *textObject )setCharSpacing (_baaf float64 ){if _aebe ==nil {return ;};_aebe ._cebg ._fcc =_baaf ;if _abcf {_bda .Log .Info ("\u0073\u0065t\u0043\u0068\u0061\u0072\u0053\u0070\u0061\u0063\u0069\u006e\u0067\u003a\u0020\u0025\u002e\u0032\u0066\u0020\u0073\u0074\u0061\u0074e=\u0025\u0073",_baaf ,_aebe ._cebg .String ());};};func _fbbbf (_gaa []*textMark ,_dfeg _fd .PdfRectangle )[]*textWord {var _ddbd []*textWord ;var _bgcb *textWord ;_afbb :=func (){if _bgcb !=nil {_ceff :=_bgcb .computeText ();if !_abgba (_ceff ){_bgcb ._daace =_ceff ;_ddbd =append (_ddbd ,_bgcb );};_bgcb =nil ;};};for _ ,_cedd :=range _gaa {if _dbfc &&_bgcb !=nil &&len (_bgcb ._bbef )> 0{_afab :=_bgcb ._bbef [len (_bgcb ._bbef )-1];_dabd ,_bcgc :=_degg (_cedd ._ebg );_geba ,_acef :=_degg (_afab ._ebg );if _bcgc &&!_acef &&_afab .inDiacriticArea (_cedd ){_bgcb .addDiacritic (_dabd );continue ;};if _acef &&!_bcgc &&_cedd .inDiacriticArea (_afab ){_bgcb ._bbef =_bgcb ._bbef [:len (_bgcb ._bbef )-1];_bgcb .appendMark (_cedd ,_dfeg );_bgcb .addDiacritic (_geba );continue ;};};_bage :=_abgba (_cedd ._ebg );if _bage {_afbb ();continue ;};if _bgcb ==nil &&!_bage {_bgcb =_gedgd ([]*textMark {_cedd },_dfeg );continue ;};_ffag :=_bgcb ._bgee ;_ebfge :=_e .Abs (_bgcg (_dfeg ,_cedd )-_bgcb ._abdb )/_ffag ;_dccae :=_beec (_cedd ,_bgcb )/_ffag ;if _dccae >=_gece ||!(-_bbfb <=_dccae &&_ebfge <=_ddfb ){_afbb ();_bgcb =_gedgd ([]*textMark {_cedd },_dfeg );continue ;};_bgcb .appendMark (_cedd ,_dfeg );};_afbb ();return _ddbd ;};

// TextMarkArray is a collection of TextMarks.
type TextMarkArray struct{_efd []TextMark };func (_ebb *textObject )getFont (_eff string )(*_fd .PdfFont ,error ){if _ebb ._dbfa ._ef !=nil {_ebb ._dbfa ._gg ++;_bbbc ,_dbgc :=_ebb ._dbfa ._ef [_eff ];if _dbgc {_bbbc ._dfc =_ebb ._dbfa ._gg ;return _bbbc ._agbf ,nil ;};};_dgdf ,_ccf :=_ebb .getFontDirect (_eff );if _ccf !=nil {return nil ,_ccf ;};if _ebb ._dbfa ._ef !=nil {_fegf :=fontEntry {_dgdf ,_ebb ._dbfa ._gg };if len (_ebb ._dbfa ._ef )>=_dgde {var _afda []string ;for _fddc :=range _ebb ._dbfa ._ef {_afda =append (_afda ,_fddc );};_bd .Slice (_afda ,func (_daac ,_add int )bool {return _ebb ._dbfa ._ef [_afda [_daac ]]._dfc < _ebb ._dbfa ._ef [_afda [_add ]]._dfc ;});delete (_ebb ._dbfa ._ef ,_afda [0]);};_ebb ._dbfa ._ef [_eff ]=_fegf ;};return _dgdf ,nil ;};

// ExtractPageImages returns the image contents of the page extractor, including data
// and position, size information for each image.
// A set of options to control page image extraction can be passed in. The options
// parameter can be nil for the default options. By default, inline stencil masks
// are not extracted.
func (_de *Extractor )ExtractPageImages (options *ImageExtractOptions )(*PageImages ,error ){_bdc :=&imageExtractContext {_ac :options };_ae :=_bdc .extractContentStreamImages (_de ._cc ,_de ._gc );if _ae !=nil {return nil ,_ae ;};return &PageImages {Images :_bdc ._eac },nil ;};func _dbd (_acge ,_ccgg _fd .PdfRectangle )bool {return _ccgg .Llx <=_acge .Urx &&_acge .Llx <=_ccgg .Urx ;};func (_efced paraList )findTables ()[]*textTable {_efced .addNeighbours ();_bd .Slice (_efced ,func (_abbga ,_cdge int )bool {return _gacb (_efced [_abbga ],_efced [_cdge ])< 0});var _fegb []*textTable ;for _ ,_efeb :=range _efced {if _efeb ._gecc {continue ;};_fcac :=_efeb .isAtom ();if _fcac ==nil {continue ;};_fcac .growTable ();if _fcac ._bcbb *_fcac ._dcfa < _cec {continue ;};_fcac .markCells ();_fcac .log ("\u0067\u0072\u006fw\u006e");_fegb =append (_fegb ,_fcac );};return _fegb ;};func (_aaea paraList )writeText (_eeebe _dg .Writer ){for _gbcee ,_fbfb :=range _aaea {_fbfb .writeText (_eeebe );if _gbcee !=len (_aaea )-1{if _gbgg (_fbfb ,_aaea [_gbcee +1]){_eeebe .Write ([]byte ("\u0020"));}else {_eeebe .Write ([]byte ("\u000a"));_eeebe .Write ([]byte ("\u000a"));};};};_eeebe .Write ([]byte ("\u000a"));_eeebe .Write ([]byte ("\u000a"));};const _dgg =1.0/1000.0;

// ExtractPageText returns the text contents of `e` (an Extractor for a page) as a PageText.
// TODO(peterwilliams97): The stats complicate this function signature and aren't very useful.
//                        Replace with a function like Extract() (*PageText, error)
func (_beb *Extractor )ExtractPageText ()(*PageText ,int ,int ,error ){_fad ,_fdf ,_abg ,_adg :=_beb .extractPageText (_beb ._cc ,_beb ._gc ,_df .IdentityMatrix (),0);if _adg !=nil {return nil ,0,0,_adg ;};_fad .computeViews ();_adg =_effga (_fad );if _adg !=nil {return nil ,0,0,_adg ;};return _fad ,_fdf ,_abg ,nil ;};func (_bcda *wordBag )maxDepth ()float64 {return _bcda ._ffba -_bcda .Lly };func _egdf (_gfb []*textMark ,_bgf _fd .PdfRectangle )paraList {_bda .Log .Trace ("\u006d\u0061\u006b\u0065\u0054\u0065\u0078\u0074\u0050\u0061\u0067\u0065\u003a \u0025\u0064\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0073\u0020\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065=\u0025\u002e\u0032\u0066",len (_gfb ),_bgf );if len (_gfb )==0{return nil ;};_bbaea :=_fbbbf (_gfb ,_bgf );if len (_bbaea )==0{return nil ;};_aebf :=_fefd (_bbaea ,_bgf .Ury );_bgdc :=_edge (_aebf ,_bgf .Ury );_bgdc =_acec (_bgdc );_aecf :=make (paraList ,0,len (_bgdc ));for _ ,_cbae :=range _bgdc {_cdgf :=_cbae .arrangeText ();if _cdgf !=nil {_aecf =append (_aecf ,_cdgf );};};if len (_aecf )>=_cec {_aecf =_aecf .extractTables ();};_aecf .sortReadingOrder ();_aecf .log ("\u0073\u006f\u0072te\u0064\u0020\u0069\u006e\u0020\u0072\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u006f\u0072\u0064\u0065\u0072");return _aecf ;};func (_aagd paraList )toTextMarks ()[]TextMark {_gfgf :=0;var _edbb []TextMark ;for _cgbd ,_dffa :=range _aagd {_gbge :=_dffa .toTextMarks (&_gfgf );_edbb =append (_edbb ,_gbge ...);if _cgbd !=len (_aagd )-1{if _gbgg (_dffa ,_aagd [_cgbd +1]){_edbb =_cddg (_edbb ,&_gfgf ,"\u0020");}else {_edbb =_cddg (_edbb ,&_gfgf ,"\u000a");_edbb =_cddg (_edbb ,&_gfgf ,"\u000a");};};};_edbb =_cddg (_edbb ,&_gfgf ,"\u000a");_edbb =_cddg (_edbb ,&_gfgf ,"\u000a");return _edbb ;};

// PageText represents the layout of text on a device page.
type PageText struct{_bge []*textMark ;_agge string ;_ccdf []TextMark ;_dde []TextTable ;_fddg _fd .PdfRectangle ;};func (_ebga *textTable )getRight ()paraList {_gebb :=make (paraList ,_ebga ._dcfa );for _cefc :=0;_cefc < _ebga ._dcfa ;_cefc ++{_afed :=_ebga .get (_ebga ._bcbb -1,_cefc )._ddeb ;if _afed ==nil ||_afed ._gecc {return nil ;};_gebb [_cefc ]=_afed ;};for _dfdg :=0;_dfdg < _ebga ._dcfa -1;_dfdg ++{if _gebb [_dfdg ]._ebaf !=_gebb [_dfdg +1]{return nil ;};};return _gebb ;};

// Elements returns the TextMarks in `ma`.
func (_cgf *TextMarkArray )Elements ()[]TextMark {return _cgf ._efd };func (_cdbc *wordBag )empty (_dffg int )bool {_ ,_gaf :=_cdbc ._afec [_dffg ];return !_gaf };func (_gffg *textPara )writeText (_agbe _dg .Writer ){if _gffg ._aada ==nil {_gffg .writeCellText (_agbe );return ;};for _dgag :=0;_dgag < _gffg ._aada ._dcfa ;_dgag ++{for _fbbb :=0;_fbbb < _gffg ._aada ._bcbb ;_fbbb ++{_acdfc :=_gffg ._aada .get (_fbbb ,_dgag );if _acdfc ==nil {_agbe .Write ([]byte ("\u0009"));}else {_acdfc .writeCellText (_agbe );};_agbe .Write ([]byte ("\u0020"));};if _dgag < _gffg ._aada ._dcfa -1{_agbe .Write ([]byte ("\u000a"));};};};func (_dcaf *textTable )newTablePara ()*textPara {_gecba :=_dcaf .computeBbox ();return &textPara {PdfRectangle :_gecba ,_efga :_gecba ,_aada :_dcaf };};func (_abab *textTable )toTextTable ()TextTable {_ffe :=make ([][]TableCell ,_abab ._dcfa );for _gead :=0;_gead < _abab ._dcfa ;_gead ++{_ffe [_gead ]=make ([]TableCell ,_abab ._bcbb );for _fcab :=0;_fcab < _abab ._bcbb ;_fcab ++{_agee :=_abab .get (_fcab ,_gead );_ffe [_gead ][_fcab ].Text =_agee .text ();_gcag :=0;_ffe [_gead ][_fcab ].Marks ._efd =_agee .toTextMarks (&_gcag );};};return TextTable {W :_abab ._bcbb ,H :_abab ._dcfa ,Cells :_ffe };};func _acec (_fffb []*wordBag )[]*wordBag {if len (_fffb )<=1{return _fffb ;};if _eeda {_bda .Log .Info ("\u006d\u0065\u0072\u0067\u0065\u0057\u006f\u0072\u0064B\u0061\u0067\u0073\u003a");};_bd .Slice (_fffb ,func (_cdcdf ,_aec int )bool {_dbgg ,_fbge :=_fffb [_cdcdf ],_fffb [_aec ];_gaed :=_dbgg .Width ()*_dbgg .Height ();_fbe :=_fbge .Width ()*_fbge .Height ();if _gaed !=_fbe {return _gaed > _fbe ;};if _dbgg .Height ()!=_fbge .Height (){return _dbgg .Height ()> _fbge .Height ();};return _cdcdf < _aec ;});var _afba []*wordBag ;_geddf :=map[int ]struct{}{};for _edgg :=0;_edgg < len (_fffb );_edgg ++{if _ ,_dbgf :=_geddf [_edgg ];_dbgf {continue ;};_babe :=_fffb [_edgg ];for _adcbe :=_edgg +1;_adcbe < len (_fffb );_adcbe ++{if _ ,_aefa :=_geddf [_edgg ];_aefa {continue ;};_cgaa :=_fffb [_adcbe ];_afdb :=_babe .PdfRectangle ;_afdb .Llx -=_babe ._dag ;if _gdae (_afdb ,_cgaa .PdfRectangle ){_babe .absorb (_cgaa );_geddf [_adcbe ]=struct{}{};};};_afba =append (_afba ,_babe );};if len (_fffb )!=len (_afba )+len (_geddf ){_bda .Log .Error ("\u006d\u0065\u0072\u0067\u0065\u0057o\u0072\u0064\u0042\u0061\u0067\u0073\u003a\u0020\u0025\u0064\u002d\u003e\u0025d\u0020\u0061\u0062\u0073\u006f\u0072\u0062e\u0064\u003d\u0025\u0064",len (_fffb ),len (_afba ),len (_geddf ));};return _afba ;};func _eada (_bdae ,_addb _fd .PdfRectangle )bool {return _bdae .Lly <=_addb .Ury &&_addb .Lly <=_bdae .Ury ;};func _gacb (_dfgb ,_dcef bounded )float64 {_dcg :=_effg (_dfgb ,_dcef );if !_dcbf (_dcg ){return _dcg ;};return _bddg (_dfgb ,_dcef );};func (_aag *stateStack )top ()*textState {if _aag .empty (){return nil ;};return (*_aag )[_aag .size ()-1];};func (_abgb *wordBag )stratum (_cebb int )[]*textWord {_cdf :=_abgb ._afec [_cebb ];_afdg :=make ([]*textWord ,len (_cdf ));copy (_afdg ,_cdf );return _afdg ;};func (_cbbf paraList )llyOrdering ()[]int {_cfcb :=make ([]int ,len (_cbbf ));for _fdfa :=range _cbbf {_cfcb [_fdfa ]=_fdfa ;};_bd .SliceStable (_cfcb ,func (_bggb ,_egbd int )bool {_adfb ,_gdfc :=_cfcb [_bggb ],_cfcb [_egbd ];return _cbbf [_adfb ].Lly < _cbbf [_gdfc ].Lly ;});return _cfcb ;};func (_bbdc paraList )computeEBBoxes (){if _eeda {_bda .Log .Info ("\u0063o\u006dp\u0075\u0074\u0065\u0045\u0042\u0042\u006f\u0078\u0065\u0073\u003a");};for _ ,_ffa :=range _bbdc {_ffa ._efga =_ffa .PdfRectangle ;};_efcf :=_bbdc .yNeighbours ();for _bddb ,_debgb :=range _bbdc {_cbdf :=_debgb ._efga ;_eaef ,_edgd :=-1.0e9,+1.0e9;for _ ,_dfacb :=range _efcf [_debgb ]{_bbaee :=_bbdc [_dfacb ]._efga ;if _bbaee .Urx < _cbdf .Llx {_eaef =_e .Max (_eaef ,_bbaee .Urx );}else if _cbdf .Urx < _bbaee .Llx {_edgd =_e .Min (_edgd ,_bbaee .Llx );};};for _bdaf ,_dbca :=range _bbdc {_bcfd :=_dbca ._efga ;if _bddb ==_bdaf ||_bcfd .Ury > _cbdf .Lly {continue ;};if _eaef <=_bcfd .Llx &&_bcfd .Llx < _cbdf .Llx {_cbdf .Llx =_bcfd .Llx ;}else if _bcfd .Urx <=_edgd &&_cbdf .Urx < _bcfd .Urx {_cbdf .Urx =_bcfd .Urx ;};};if _eeda {_ff .Printf ("%\u0034\u0064\u003a\u0020%6\u002e2\u0066\u002d\u003e\u0025\u0036.\u0032\u0066\u0020\u0025\u0071\u000a",_bddb ,_debgb ._efga ,_cbdf ,_dbaac (_debgb .text (),50));};_debgb ._efga =_cbdf ;};if _ggfg {for _ ,_fcee :=range _bbdc {_fcee .PdfRectangle =_fcee ._efga ;};};};func (_ebcdb *textWord )toTextMarks (_gbbae *int )[]TextMark {var _ebff []TextMark ;for _ ,_cfge :=range _ebcdb ._bbef {_ebff =_bceb (_ebff ,_gbbae ,_cfge .ToTextMark ());};return _ebff ;};type textPara struct{_fd .PdfRectangle ;_efga _fd .PdfRectangle ;_cddb []*textLine ;_aada *textTable ;_gecc bool ;_bacd *textPara ;_ddeb *textPara ;_cecb *textPara ;_ebaf *textPara ;};func _gdae (_aadg ,_acde _fd .PdfRectangle )bool {return _aadg .Llx <=_acde .Llx &&_acde .Urx <=_aadg .Urx &&_aadg .Lly <=_acde .Lly &&_acde .Ury <=_aadg .Ury ;};func (_facea paraList )sortReadingOrder (){_bda .Log .Trace ("\u0073\u006fr\u0074\u0052\u0065\u0061\u0064i\u006e\u0067\u004f\u0072\u0064e\u0072\u003a\u0020\u0070\u0061\u0072\u0061\u0073\u003d\u0025\u0064\u0020\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u0078\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d",len (_facea ));if len (_facea )<=1{return ;};_facea .computeEBBoxes ();_bd .Slice (_facea ,func (_afgg ,_egdd int )bool {return _ecd (_facea [_afgg ],_facea [_egdd ])<=0});_cbbc :=_facea .topoOrder ();_facea .reorder (_cbbc );};

// String returns a description of `l`.
func (_bde *textLine )String ()string {return _ff .Sprintf ("\u0025\u002e2\u0066\u0020\u0025\u0036\u002e\u0032\u0066\u0020\u0066\u006f\u006e\u0074\u0073\u0069\u007a\u0065\u003d\u0025\u002e\u0032\u0066\u0020\"%\u0073\u0022",_bde ._abfe ,_bde .PdfRectangle ,_bde ._gged ,_bde .text ());};func (_cgfg *textWord )addDiacritic (_bfca string ){_ggef :=_cgfg ._bbef [len (_cgfg ._bbef )-1];_ggef ._ebg =_ggef ._ebg +_bfca ;_ggef ._ebg =_gf .NFKC .String (_ggef ._ebg );};

// Extractor stores and offers functionality for extracting content from PDF pages.
type Extractor struct{_cc string ;_gc *_fd .PdfPageResources ;_edd _fd .PdfRectangle ;_ef map[string ]fontEntry ;_fe map[string ]textResult ;_gg int64 ;_fef int ;};

// BBox returns the smallest axis-aligned rectangle that encloses all the TextMarks in `ma`.
func (_adga *TextMarkArray )BBox ()(_fd .PdfRectangle ,bool ){var _efb _fd .PdfRectangle ;_fgeg :=false ;for _ ,_bfcg :=range _adga ._efd {if _bfcg .Meta ||_abgba (_bfcg .Text ){continue ;};if _fgeg {_efb =_fcgb (_efb ,_bfcg .BBox );}else {_efb =_bfcg .BBox ;_fgeg =true ;};};return _efb ,_fgeg ;};type textState struct{_fcc float64 ;_fbd float64 ;_gfcg float64 ;_cfce float64 ;_gea float64 ;_feg RenderMode ;_fbdf float64 ;_bab *_fd .PdfFont ;_bacb _fd .PdfRectangle ;_deb int ;_ggc int ;};func (_cdcd *textObject )setFont (_ecf string ,_bed float64 )error {if _cdcd ==nil {return nil ;};_cdcd ._cebg ._gea =_bed ;_faf ,_fea :=_cdcd .getFont (_ecf );if _fea !=nil {return _fea ;};_cdcd ._cebg ._bab =_faf ;if _cdcd ._ddg .empty (){_cdcd ._ddg .push (_cdcd ._cebg );}else {_cdcd ._ddg .top ()._bab =_cdcd ._cebg ._bab ;};return nil ;};func (_bbca *textTable )get (_cegf ,_afbg int )*textPara {return _bbca ._daedf [_agaa (_cegf ,_afbg )]};

// Text returns the extracted page text.
func (_beca PageText )Text ()string {return _beca ._agge };func _dcbf (_bcbg float64 )bool {return _e .Abs (_bcbg )< TOL };var _edf =TextMark {Text :"\u005b\u0058\u005d",Original :"\u0020",Meta :true ,FillColor :_f .White ,StrokeColor :_f .White };func (_fag *textPara )isAtom ()*textTable {_adcg :=_fag ;_fdae :=_fag ._ddeb ;_eebf :=_fag ._ebaf ;if !(_fdae !=nil &&!_fdae ._gecc &&_eebf !=nil &&!_eebf ._gecc ){return nil ;};_dgaa :=_fdae ._ebaf ;if !(_dgaa !=nil &&!_dgaa ._gecc &&_dgaa ==_eebf ._ddeb ){return nil ;};if _fdae ._bacd !=_adcg ||_eebf ._cecb !=_adcg ||_dgaa ._bacd !=_eebf ||_dgaa ._cecb !=_fdae {return nil ;};return _fdb (_adcg ,_fdae ,_eebf ,_dgaa );};func _efdb (_faceg string )string {_fegd :=[]rune (_faceg );return string (_fegd [:len (_fegd )-1])};type cachedImage struct{_bf *_fd .Image ;_dgc _fd .PdfColorspace ;};func (_fgb *wordBag )arrangeText ()*textPara {_fgb .sort ();if _fggf {_fgb .removeDuplicates ();};var _abac []*textLine ;for _ ,_fedc :=range _fgb .depthIndexes (){for !_fgb .empty (_fedc ){_abfg :=_fgb .firstReadingIndex (_fedc );_edbd :=_fgb .firstWord (_abfg );_aca :=_fbaa (_fgb ,_abfg );_cgab :=_edbd ._bgee ;_gaga :=_edbd ._abdb -_ddgf *_cgab ;_cfeb :=_edbd ._abdb +_ddgf *_cgab ;_bfac :=_dfcc *_cgab ;_edec :=_gegd *_cgab ;_dfae :for {var _edfe *textWord ;_cagb :=0;for _ ,_edgfg :=range _fgb .depthBand (_gaga ,_cfeb ){_agfc :=_fgb .highestWord (_edgfg ,_gaga ,_cfeb );if _agfc ==nil {continue ;};_adefg :=_beec (_agfc ,_aca ._cda [len (_aca ._cda )-1]);if _adefg < -_edec {break _dfae ;};if _adefg > _bfac {continue ;};if _edfe !=nil &&_effg (_agfc ,_edfe )>=0{continue ;};_edfe =_agfc ;_cagb =_edgfg ;};if _edfe ==nil {break ;};_aca .pullWord (_fgb ,_edfe ,_cagb );};_aca .markWordBoundaries ();_abac =append (_abac ,_aca );};};if len (_abac )==0{return nil ;};_bd .Slice (_abac ,func (_cdeb ,_fgdc int )bool {return _ecd (_abac [_cdeb ],_abac [_fgdc ])< 0});_abef :=_fbbcc (_fgb .PdfRectangle ,_abac );if _fecb {_bda .Log .Info ("\u0061\u0072\u0072an\u0067\u0065\u0054\u0065\u0078\u0074\u0020\u0021\u0021\u0021\u0020\u0070\u0061\u0072\u0061\u003d\u0025\u0073",_abef .String ());if _acea {for _bcad ,_deda :=range _abef ._cddb {_ff .Printf ("\u0025\u0034\u0064\u003a\u0020\u0025\u0073\u000a",_bcad ,_deda .String ());if _aeff {for _aaa ,_fab :=range _deda ._cda {_ff .Printf ("\u0025\u0038\u0064\u003a\u0020\u0025\u0073\u000a",_aaa ,_fab .String ());for _dcae ,_dbfe :=range _fab ._bbef {_ff .Printf ("\u00251\u0032\u0064\u003a\u0020\u0025\u0073\n",_dcae ,_dbfe .String ());};};};};};};return _abef ;};func (_becc *wordBag )pullWord (_ddde *wordBag ,_bbde *textWord ,_befe int ){_becc .PdfRectangle =_fcgb (_becc .PdfRectangle ,_bbde .PdfRectangle );if _bbde ._bgee > _becc ._dag {_becc ._dag =_bbde ._bgee ;};_becc ._afec [_befe ]=append (_becc ._afec [_befe ],_bbde );_ddde .removeWord (_bbde ,_befe );};func (_beaa *wordBag )highestWord (_fdgd int ,_bced ,_afbf float64 )*textWord {for _ ,_cdgb :=range _beaa ._afec [_fdgd ]{if _bced <=_cdgb ._abdb &&_cdgb ._abdb <=_afbf {return _cdgb ;};};return nil ;};func _agaa (_acca ,_ccce int )uint64 {return uint64 (_acca )*0x1000000+uint64 (_ccce )};func _degg (_gacd string )(string ,bool ){_ccga :=[]rune (_gacd );if len (_ccga )!=1{return "",false ;};_bdbe ,_effe :=_eegf [_ccga [0]];return _bdbe ,_effe ;};func _fbdfd (_acee *Extractor ,_dae *_fd .PdfPageResources ,_dfbf _ea .GraphicsState ,_bba *textState ,_fdfd *stateStack )*textObject {return &textObject {_dbfa :_acee ,_aaf :_dae ,_caf :_dfbf ,_ddg :_fdfd ,_cebg :_bba ,_gbg :_df .IdentityMatrix (),_eag :_df .IdentityMatrix ()};};const (_eeda =false ;_abcf =false ;_acda =false ;_fecb =false ;_acea =_fecb &&false ;_aeff =_acea &&false ;_gbbd =false ;);func _fded (_cbef func (*wordBag ,*textWord ,float64 )bool ,_gab float64 )func (*wordBag ,*textWord )bool {return func (_feeb *wordBag ,_caed *textWord )bool {return _cbef (_feeb ,_caed ,_gab )};};type textResult struct{_adc PageText ;_gfg int ;_edg int ;};func _afcd (_fbae ,_fbec int )int {if _fbae < _fbec {return _fbae ;};return _fbec ;};

// TextMark represents extracted text on a page with information regarding both textual content,
// formatting (font and size) and positioning.
// It is the smallest unit of text on a PDF page, typically a single character.
//
// getBBox() in test_text.go shows how to compute bounding boxes of substrings of extracted text.
// The following code extracts the text on PDF page `page` into `text` then finds the bounding box
// `bbox` of substring `term` in `text`.
//
//     ex, _ := New(page)
//     // handle errors
//     pageText, _, _, err := ex.ExtractPageText()
//     // handle errors
//     text := pageText.Text()
//     textMarks := pageText.Marks()
//
//     	start := strings.Index(text, term)
//      end := start + len(term)
//      spanMarks, err := textMarks.RangeOffset(start, end)
//      // handle errors
//      bbox, ok := spanMarks.BBox()
//      // handle errors
type TextMark struct{

// Text is the extracted text.
Text string ;

// Original is the text in the PDF. It has not been decoded like `Text`.
Original string ;

// BBox is the bounding box of the text.
BBox _fd .PdfRectangle ;

// Font is the font the text was drawn with.
Font *_fd .PdfFont ;

// FontSize is the font size the text was drawn with.
FontSize float64 ;

// Offset is the offset of the start of TextMark.Text in the extracted text. If you do this
//   text, textMarks := pageText.Text(), pageText.Marks()
//   marks := textMarks.Elements()
// then marks[i].Offset is the offset of marks[i].Text in text.
Offset int ;

// Meta is set true for spaces and line breaks that we insert in the extracted text. We insert
// spaces (line breaks) when we see characters that are over a threshold horizontal (vertical)
//  distance  apart. See wordJoiner (lineJoiner) in PageText.computeViews().
Meta bool ;

// FillColor is the fill color of the text.
// The color is nil for spaces and line breaks (i.e. the Meta field is true).
FillColor _f .Color ;

// StrokeColor is the stroke color of the text.
// The color is nil for spaces and line breaks (i.e. the Meta field is true).
StrokeColor _f .Color ;};func (_ecda paraList )extractTables ()paraList {if _gbbd {_bda .Log .Debug ("\u0065\u0078\u0074r\u0061\u0063\u0074\u0054\u0061\u0062\u006c\u0065\u0073\u003d\u0025\u0064\u0020\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u0078\u003d\u003d\u003d\u003d=\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d",len (_ecda ));};if len (_ecda )< _cec {return _ecda ;};_bcccd :=_ecda .findTables ();if _gbbd {_bda .Log .Info ("c\u006f\u006d\u0062\u0069\u006e\u0065d\u0020\u0074\u0061\u0062\u006c\u0065s\u0020\u0025\u0064\u0020\u003d\u003d\u003d=\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d=\u003d",len (_bcccd ));for _caad ,_dada :=range _bcccd {_dada .log (_ff .Sprintf ("c\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u0020\u0025\u0064",_caad ));};};return _ecda .applyTables (_bcccd );};func _fcgb (_dfag ,_feaa _fd .PdfRectangle )_fd .PdfRectangle {return _fd .PdfRectangle {Llx :_e .Min (_dfag .Llx ,_feaa .Llx ),Lly :_e .Min (_dfag .Lly ,_feaa .Lly ),Urx :_e .Max (_dfag .Urx ,_feaa .Urx ),Ury :_e .Max (_dfag .Ury ,_feaa .Ury )};};func (_fed *stateStack )empty ()bool {return len (*_fed )==0};type wordBag struct{_fd .PdfRectangle ;_dag float64 ;_ffba float64 ;_afec map[int ][]*textWord ;};func (_bfgf *stateStack )push (_eeec *textState ){_gbf :=*_eeec ;*_bfgf =append (*_bfgf ,&_gbf )};func _dbbb (_eaff _df .Matrix )_df .Point {_cbaa ,_deg :=_eaff .Translation ();return _df .Point {X :_cbaa ,Y :_deg };};func (_cgcc *wordBag )removeWord (_defb *textWord ,_becg int ){_dgba :=_dabbc (_cgcc .stratum (_becg ),_defb );if len (_dgba )==0{delete (_cgcc ._afec ,_becg );}else {_cgcc ._afec [_becg ]=_dgba ;};};func _fecc (_eeab bounded )float64 {return -_eeab .bbox ().Lly };func (_eea *imageExtractContext )processOperand (_gfd *_ea .ContentStreamOperation ,_dc _ea .GraphicsState ,_be *_fd .PdfPageResources )error {if _gfd .Operand =="\u0042\u0049"&&len (_gfd .Params )==1{_geb ,_cca :=_gfd .Params [0].(*_ea .ContentStreamInlineImage );if !_cca {return nil ;};if _cg ,_dcd :=_cf .GetBoolVal (_geb .ImageMask );_dcd {if _cg &&!_eea ._ac .IncludeInlineStencilMasks {return nil ;};};return _eea .extractInlineImage (_geb ,_dc ,_be );}else if _gfd .Operand =="\u0044\u006f"&&len (_gfd .Params )==1{_cfc ,_bef :=_cf .GetName (_gfd .Params [0]);if !_bef {_bda .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0054\u0079\u0070\u0065");return _gd ;};_ ,_gebe :=_be .GetXObjectByName (*_cfc );switch _gebe {case _fd .XObjectTypeImage :return _eea .extractXObjectImage (_cfc ,_dc ,_be );case _fd .XObjectTypeForm :return _eea .extractFormImages (_cfc ,_dc ,_be );};};return nil ;};func (_ceea *textMark )bbox ()_fd .PdfRectangle {return _ceea .PdfRectangle };func (_cfgd *textTable )getDown ()paraList {_ece :=make (paraList ,_cfgd ._bcbb );for _eacd :=0;_eacd < _cfgd ._bcbb ;_eacd ++{_aegf :=_cfgd .get (_eacd ,_cfgd ._dcfa -1)._ebaf ;if _aegf ==nil ||_aegf ._gecc {return nil ;};_ece [_eacd ]=_aegf ;};for _beaae :=0;_beaae < _cfgd ._bcbb -1;_beaae ++{if _ece [_beaae ]._ddeb !=_ece [_beaae +1]{return nil ;};};return _ece ;};func (_fgd *textObject )setWordSpacing (_cbeg float64 ){if _fgd ==nil {return ;};_fgd ._cebg ._fbd =_cbeg ;};func (_gcda *wordBag )absorb (_fffc *wordBag ){for _ggfc ,_fgae :=range _fffc ._afec {for _ ,_gdfd :=range _fgae {_gcda .pullWord (_fffc ,_gdfd ,_ggfc );};};};

// String returns a description of `t`.
func (_dcdbf *textTable )String ()string {return _ff .Sprintf ("\u0025d\u0020\u0078\u0020\u0025\u0064",_dcdbf ._bcbb ,_dcdbf ._dcfa );};

// New returns an Extractor instance for extracting content from the input PDF page.
func New (page *_fd .PdfPage )(*Extractor ,error ){_a ,_aa :=page .GetAllContentStreams ();if _aa !=nil {return nil ,_aa ;};_cb ,_aa :=page .GetMediaBox ();if _aa !=nil {return nil ,_ff .Errorf ("\u0065\u0078\u0074r\u0061\u0063\u0074\u006fr\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u002e\u0020\u0025\u0076",_aa );};_cd :=&Extractor {_cc :_a ,_gc :page .Resources ,_edd :*_cb ,_ef :map[string ]fontEntry {},_fe :map[string ]textResult {}};return _cd ,nil ;};

// TableCell is a cell in a TextTable.
type TableCell struct{

// Text is the extracted text.
Text string ;

// Marks returns the TextMarks corresponding to the text in Text.
Marks TextMarkArray ;};func (_agcg *textLine )markWordBoundaries (){_fbfc :=_ada *_agcg ._gged ;for _adeb ,_gfcf :=range _agcg ._cda [1:]{if _beec (_gfcf ,_agcg ._cda [_adeb ])>=_fbfc {_gfcf ._cgcg =true ;};};};func (_bfcca *textTable )computeBbox ()_fd .PdfRectangle {_bgea :=_bfcca .get (0,0).PdfRectangle ;for _dabg :=1;_dabg < _bfcca ._bcbb ;_dabg ++{_bgea =_fcgb (_bgea ,_bfcca .get (_dabg ,0).PdfRectangle );};for _dece :=1;_dece < _bfcca ._dcfa ;_dece ++{for _geea :=0;_geea < _bfcca ._bcbb ;_geea ++{_bgea =_fcgb (_bgea ,_bfcca .get (_geea ,_dece ).PdfRectangle );};};return _bgea ;};func (_cfdf *textObject )getFillColor ()_f .Color {return _aegb (_cfdf ._caf .ColorspaceNonStroking ,_cfdf ._caf .ColorNonStroking );};func (_dbe *textObject )setHorizScaling (_fefb float64 ){if _dbe ==nil {return ;};_dbe ._cebg ._gfcg =_fefb ;};func _gbgf (_fcd []int )[]int {_fddea :=make ([]int ,len (_fcd ));for _gafa ,_aeef :=range _fcd {_fddea [len (_fcd )-1-_gafa ]=_aeef ;};return _fddea ;};func _fgeb (_debd []rune )bool {return len (_debd )>=_dgdb &&_g .Is (_g .Hyphen ,_debd [len (_debd )-1])&&!_g .IsSpace (_debd [len (_debd )-2]);};func (_ceeag *textPara )writeCellText (_dbad _dg .Writer ){for _fbefd ,_dfdba :=range _ceeag ._cddb {_bbda :=_dfdba .text ();_deaf :=_defe &&_dfdba .endsInHyphen ()&&_fbefd !=len (_ceeag ._cddb )-1;if _deaf {_bbda =_efdb (_bbda );};_dbad .Write ([]byte (_bbda ));if !(_deaf ||_fbefd ==len (_ceeag ._cddb )-1){_dbad .Write ([]byte (_efdbc (_dfdba ._abfe ,_ceeag ._cddb [_fbefd +1]._abfe )));};};};func (_ecc *imageExtractContext )extractInlineImage (_agd *_ea .ContentStreamInlineImage ,_ca _ea .GraphicsState ,_bae *_fd .PdfPageResources )error {_gcg ,_fdd :=_agd .ToImage (_bae );if _fdd !=nil {return _fdd ;};_ede ,_fdd :=_agd .GetColorSpace (_bae );if _fdd !=nil {return _fdd ;};if _ede ==nil {_ede =_fd .NewPdfColorspaceDeviceGray ();};_agf ,_fdd :=_ede .ImageToRGB (*_gcg );if _fdd !=nil {return _fdd ;};_af :=ImageMark {Image :&_agf ,Width :_ca .CTM .ScalingFactorX (),Height :_ca .CTM .ScalingFactorY (),Angle :_ca .CTM .Angle ()};_af .X ,_af .Y =_ca .CTM .Translation ();_ecc ._eac =append (_ecc ._eac ,_af );_ecc ._fa ++;return nil ;};func (_aabb *textPara )toCellTextMarks (_cgfe *int )[]TextMark {var _eaeg []TextMark ;for _ebfg ,_afdga :=range _aabb ._cddb {_deff :=_afdga .toTextMarks (_cgfe );_fbeff :=_defe &&_afdga .endsInHyphen ()&&_ebfg !=len (_aabb ._cddb )-1;if _fbeff {_deff =_aacb (_deff ,_cgfe );};_eaeg =append (_eaeg ,_deff ...);if !(_fbeff ||_ebfg ==len (_aabb ._cddb )-1){_eaeg =_cddg (_eaeg ,_cgfe ,_efdbc (_afdga ._abfe ,_aabb ._cddb [_ebfg +1]._abfe ));};};return _eaeg ;};

// NewFromContents creates a new extractor from contents and page resources.
func NewFromContents (contents string ,resources *_fd .PdfPageResources )(*Extractor ,error ){_gca :=&Extractor {_cc :contents ,_gc :resources ,_ef :map[string ]fontEntry {},_fe :map[string ]textResult {}};return _gca ,nil ;};func _edge (_fdeb *wordBag ,_ebf float64 )[]*wordBag {var _ebdg []*wordBag ;for _ ,_bffb :=range _fdeb .depthIndexes (){_ebdf :=false ;for !_fdeb .empty (_bffb ){_bcebf :=_fdeb .firstReadingIndex (_bffb );_gdga :=_fdeb .firstWord (_bcebf );_aecc :=_bbdg (_gdga ,_ebf );_fdeb .removeWord (_gdga ,_bcebf );if _acda {_bda .Log .Info ("w\u006f\u0072\u0064\u0073\u005b\u0030\u005d\u003d\u0025\u0073",_gdga .String ());};_feffd :=_bdaed *_aecc ._dag ;_dceg :=_eeeeg *_aecc ._dag ;_gced :=_dbef *_aecc ._dag ;for _bfa :=true ;_bfa ;_bfa =_ebdf {_ebdf =false ;if _acda {_bda .Log .Info ("\u0070\u0061\u0072\u0061\u0057\u006f\u0072\u0064\u0073\u0020\u0064\u0065\u0070\u0074\u0068\u0020\u0025\u002e2\u0066\u0020\u002d\u0020\u0025\u002e\u0032f\u0020\u006d\u0061\u0078\u0049\u006e\u0074\u0072\u0061\u0044\u0065p\u0074\u0068\u0047\u0061\u0070\u003d\u0025\u002e\u0032\u0066\u0020",_aecc .minDepth (),_aecc .maxDepth (),_gced );};if _fdeb .scanBand ("\u0076\u0065\u0072\u0074\u0069\u0063\u0061\u006c",_aecc ,_fded (_abbb ,0),_aecc .minDepth ()-_gced ,_aecc .maxDepth ()+_gced ,_afea ,false ,false )> 0{_ebdf =true ;};if _fdeb .scanBand ("\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c",_aecc ,_fded (_abbb ,_dceg ),_aecc .minDepth (),_aecc .maxDepth (),_debg ,false ,false )> 0{_ebdf =true ;};if _ebdf {continue ;};_fbef :=_fdeb .scanBand ("",_aecc ,_fded (_cebd ,_feffd ),_aecc .minDepth (),_aecc .maxDepth (),_dbcf ,true ,false );if _fbef > 0{_egde :=(_aecc .maxDepth ()-_aecc .minDepth ())/_aecc ._dag ;if (_fbef > 1&&float64 (_fbef )> 0.3*_egde )||_fbef <=10{if _fdeb .scanBand ("\u006f\u0074\u0068e\u0072",_aecc ,_fded (_cebd ,_feffd ),_aecc .minDepth (),_aecc .maxDepth (),_dbcf ,false ,true )> 0{_ebdf =true ;};};};};_ebdg =append (_ebdg ,_aecc );};};return _ebdg ;};

// ToText returns the page text as a single string.
// Deprecated: This function is deprecated and will be removed in a future major version. Please use
// Text() instead.
func (_aefg PageText )ToText ()string {return _aefg .Text ()};var _ed =false ;func _bceb (_acgd []TextMark ,_beege *int ,_adeg TextMark )[]TextMark {_adeg .Offset =*_beege ;_acgd =append (_acgd ,_adeg );*_beege +=len (_adeg .Text );return _acgd ;};

// Len returns the number of TextMarks in `ma`.
func (_egc *TextMarkArray )Len ()int {if _egc ==nil {return 0;};return len (_egc ._efd );};func _effga (_edc *PageText )error {_abae :=_fg .GetLicenseKey ();if _abae !=nil &&_abae .IsLicensed ()||_ed {return nil ;};_ff .Printf ("\u0055\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064\u0020c\u006f\u0070\u0079\u0020\u006f\u0066\u0020\u0055\u006e\u0069P\u0044\u0046\u000a");_ff .Println ("-\u0020\u0047\u0065\u0074\u0020\u0061\u0020\u0066\u0072e\u0065\u0020\u0074\u0072\u0069\u0061\u006c l\u0069\u0063\u0065\u006es\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070s:\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _c .New ("\u0075\u006e\u0069\u0070d\u0066\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020c\u006fd\u0065\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0064");};func (_bdf *imageExtractContext )extractFormImages (_dfb *_cf .PdfObjectName ,_eddf _ea .GraphicsState ,_cge *_fd .PdfPageResources )error {_agg ,_eb :=_cge .GetXObjectFormByName (*_dfb );if _eb !=nil {return _eb ;};if _agg ==nil {return nil ;};_eaf ,_eb :=_agg .GetContentStream ();if _eb !=nil {return _eb ;};_dcf :=_agg .Resources ;if _dcf ==nil {_dcf =_cge ;};_eb =_bdf .extractContentStreamImages (string (_eaf ),_dcf );if _eb !=nil {return _eb ;};_bdf ._eae ++;return nil ;};func (_eebfc *textTable )put (_fdgef ,_eedc int ,_faeb *textPara ){_eebfc ._daedf [_agaa (_fdgef ,_eedc )]=_faeb ;};func (_feac *textPara )toTextMarks (_bdda *int )[]TextMark {if _feac ._aada ==nil {return _feac .toCellTextMarks (_bdda );};var _cdfg []TextMark ;for _begc :=0;_begc < _feac ._aada ._dcfa ;_begc ++{for _dcbb :=0;_dcbb < _feac ._aada ._bcbb ;_dcbb ++{_gbcba :=_feac ._aada .get (_dcbb ,_begc );if _gbcba ==nil {_cdfg =_cddg (_cdfg ,_bdda ,"\u0009");}else {_ecbg :=_gbcba .toCellTextMarks (_bdda );_cdfg =append (_cdfg ,_ecbg ...);};_cdfg =_cddg (_cdfg ,_bdda ,"\u0020");};if _begc < _feac ._aada ._dcfa -1{_cdfg =_cddg (_cdfg ,_bdda ,"\u000a");};};return _cdfg ;};func _ecd (_acc ,_ebbfg bounded )float64 {_gge :=_bddg (_acc ,_ebbfg );if !_dcbf (_gge ){return _gge ;};return _effg (_acc ,_ebbfg );};func (_fdge *Extractor )extractPageText (_cce string ,_gdc *_fd .PdfPageResources ,_cae _df .Matrix ,_ga int )(*PageText ,int ,int ,error ){_bda .Log .Trace ("\u0065x\u0074\u0072\u0061\u0063t\u0050\u0061\u0067\u0065\u0054e\u0078t\u003a \u006c\u0065\u0076\u0065\u006c\u003d\u0025d",_ga );_faa :=&PageText {_fddg :_fdge ._edd };_afe :=_dba (_fdge ._edd );var _geg stateStack ;_cgd :=_fbdfd (_fdge ,_gdc ,_ea .GraphicsState {},&_afe ,&_geg );var _ccb bool ;if _ga > _db {_dbf :=_c .New ("\u0066\u006f\u0072\u006d s\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077");_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0065\u0078\u0074\u0072\u0061\u0063\u0074\u0050\u0061\u0067\u0065\u0054\u0065\u0078\u0074\u002e\u0020\u0072\u0065\u0063u\u0072\u0073\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u003d\u0025\u0064 \u0065r\u0072\u003d\u0025\u0076",_ga ,_dbf );return _faa ,_afe ._deb ,_afe ._ggc ,_dbf ;};_ecb :=_ea .NewContentStreamParser (_cce );_ged ,_gac :=_ecb .Parse ();if _gac !=nil {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020e\u0078\u0074\u0072a\u0063\u0074\u0050\u0061g\u0065\u0054\u0065\u0078\u0074\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_gac );return _faa ,_afe ._deb ,_afe ._ggc ,_gac ;};_agfb :=_ea .NewContentStreamProcessor (*_ged );_agfb .AddHandler (_ea .HandlerConditionEnumAllOperands ,"",func (_bca *_ea .ContentStreamOperation ,_dac _ea .GraphicsState ,_cbc *_fd .PdfPageResources )error {_dcb :=_bca .Operand ;if _abcf {_bda .Log .Info ("\u0026&\u0026\u0020\u006f\u0070\u003d\u0025s",_bca );};switch _dcb {case "\u0071":_geg .push (&_afe );case "\u0051":if !_geg .empty (){_afe =*_geg .top ();if len (_geg )>=2{_geg .pop ();};};case "\u0042\u0054":if _ccb {_bda .Log .Debug ("\u0042\u0054\u0020\u0063\u0061\u006c\u006c\u0065\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0069n\u0020\u0061\u0020\u0074\u0065\u0078\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");_faa ._bge =append (_faa ._bge ,_cgd ._ded ...);};_ccb =true ;_bac :=_dac ;_bac .CTM =_cae .Mult (_bac .CTM );_cgd =_fbdfd (_fdge ,_cbc ,_bac ,&_afe ,&_geg );case "\u0045\u0054":if !_ccb {_bda .Log .Debug ("\u0045\u0054\u0020ca\u006c\u006c\u0065\u0064\u0020\u006f\u0075\u0074\u0073i\u0064e\u0020o\u0066 \u0061\u0020\u0074\u0065\u0078\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_ccb =false ;_faa ._bge =append (_faa ._bge ,_cgd ._ded ...);_cgd .reset ();case "\u0054\u002a":_cgd .nextLine ();case "\u0054\u0064":if _fcg ,_bec :=_cgd .checkOp (_bca ,2,true );!_fcg {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bec );return _bec ;};_gfc ,_ega ,_dcfg :=_fdeg (_bca .Params );if _dcfg !=nil {return _dcfg ;};_cgd .moveText (_gfc ,_ega );case "\u0054\u0044":if _cdc ,_fb :=_cgd .checkOp (_bca ,2,true );!_cdc {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_fb );return _fb ;};_bebf ,_daa ,_aef :=_fdeg (_bca .Params );if _aef !=nil {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_aef );return _aef ;};_cgd .moveTextSetLeading (_bebf ,_daa );case "\u0054\u006a":if _ceb ,_fdfg :=_cgd .checkOp (_bca ,1,true );!_ceb {_bda .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0054\u006a\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d%\u0076",_bca ,_fdfg );return _fdfg ;};_cdg ,_age :=_cf .GetStringBytes (_bca .Params [0]);if !_age {_bda .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020T\u006a\u0020o\u0070\u003d\u0025\u0073\u0020\u0047\u0065\u0074S\u0074\u0072\u0069\u006e\u0067\u0042\u0079\u0074\u0065\u0073\u0020\u0066a\u0069\u006c\u0065\u0064",_bca );return _cf .ErrTypeError ;};return _cgd .showText (_cdg );case "\u0054\u004a":if _cab ,_aeg :=_cgd .checkOp (_bca ,1,true );!_cab {_bda .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u004a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_aeg );return _aeg ;};_cceg ,_aee :=_cf .GetArray (_bca .Params [0]);if !_aee {_bda .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0054\u004a\u0020\u006f\u0070\u003d\u0025s\u0020G\u0065t\u0041r\u0072\u0061\u0079\u0056\u0061\u006c\u0020\u0066\u0061\u0069\u006c\u0065\u0064",_bca );return _gac ;};return _cgd .showTextAdjusted (_cceg );case "\u0027":if _dcc ,_efg :=_cgd .checkOp (_bca ,1,true );!_dcc {_bda .Log .Debug ("\u0045R\u0052O\u0052\u003a\u0020\u0027\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_efg );return _efg ;};_fce ,_gdcc :=_cf .GetStringBytes (_bca .Params [0]);if !_gdcc {_bda .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020'\u0020\u006f\u0070\u003d%s \u0047et\u0053\u0074\u0072\u0069\u006e\u0067\u0042yt\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064",_bca );return _cf .ErrTypeError ;};_cgd .nextLine ();return _cgd .showText (_fce );case "\u0022":if _cba ,_aeb :=_cgd .checkOp (_bca ,3,true );!_cba {_bda .Log .Debug ("\u0045R\u0052O\u0052\u003a\u0020\u0022\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_aeb );return _aeb ;};_cbff ,_gbb ,_dccc :=_fdeg (_bca .Params [:2]);if _dccc !=nil {return _dccc ;};_bdcd ,_dd :=_cf .GetStringBytes (_bca .Params [2]);if !_dd {_bda .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020\"\u0020\u006f\u0070\u003d%s \u0047et\u0053\u0074\u0072\u0069\u006e\u0067\u0042yt\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064",_bca );return _cf .ErrTypeError ;};_cgd .setCharSpacing (_cbff );_cgd .setWordSpacing (_gbb );_cgd .nextLine ();return _cgd .showText (_bdcd );case "\u0054\u004c":_ffg ,_cac :=_dda (_bca );if _cac !=nil {_bda .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u004c\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_cac );return _cac ;};_cgd .setTextLeading (_ffg );case "\u0054\u0063":_dfbg ,_bfe :=_dda (_bca );if _bfe !=nil {_bda .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u0063\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bfe );return _bfe ;};_cgd .setCharSpacing (_dfbg );case "\u0054\u0066":if _aae ,_aed :=_cgd .checkOp (_bca ,2,true );!_aae {_bda .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u0066\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_aed );return _aed ;};_agc ,_fddd :=_cf .GetNameVal (_bca .Params [0]);if !_fddd {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0054\u0066\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0047\u0065\u0074\u004ea\u006d\u0065\u0056\u0061\u006c\u0020\u0066a\u0069\u006c\u0065\u0064",_bca );return _cf .ErrTypeError ;};_agcf ,_fae :=_cf .GetNumberAsFloat (_bca .Params [1]);if !_fddd {_bda .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0054\u0066\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0047\u0065\u0074\u0046\u006c\u006f\u0061\u0074\u0056\u0061\u006c\u0020\u0066\u0061\u0069\u006c\u0065d\u002e\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bca ,_fae );return _fae ;};_fae =_cgd .setFont (_agc ,_agcf );_cgd ._bbd =_bc .Is (_fae ,_cf .ErrNotSupported );if _fae !=nil &&!_cgd ._bbd {return _fae ;};case "\u0054\u006d":if _agcb ,_ccba :=_cgd .checkOp (_bca ,6,true );!_agcb {_bda .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u006d\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_ccba );return _ccba ;};_egb ,_aggc :=_cf .GetNumbersAsFloat (_bca .Params );if _aggc !=nil {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_aggc );return _aggc ;};_cgd .setTextMatrix (_egb );case "\u0054\u0072":if _cbca ,_fac :=_cgd .checkOp (_bca ,1,true );!_cbca {_bda .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u0072\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_fac );return _fac ;};_dacg ,_bff :=_cf .GetIntVal (_bca .Params [0]);if !_bff {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0054\u0072\u0020\u006f\u0070\u003d\u0025\u0073 \u0047e\u0074\u0049\u006e\u0074\u0056\u0061\u006c\u0020\u0066\u0061\u0069\u006c\u0065\u0064",_bca );return _cf .ErrTypeError ;};_cgd .setTextRenderMode (_dacg );case "\u0054\u0073":if _ffb ,_adge :=_cgd .checkOp (_bca ,1,true );!_ffb {_bda .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_adge );return _adge ;};_bdb ,_bdcb :=_cf .GetNumberAsFloat (_bca .Params [0]);if _bdcb !=nil {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bdcb );return _bdcb ;};_cgd .setTextRise (_bdb );case "\u0054\u0077":if _ddf ,_aegc :=_cgd .checkOp (_bca ,1,true );!_ddf {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_aegc );return _aegc ;};_adf ,_ccd :=_cf .GetNumberAsFloat (_bca .Params [0]);if _ccd !=nil {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_ccd );return _ccd ;};_cgd .setWordSpacing (_adf );case "\u0054\u007a":if _face ,_fbb :=_cgd .checkOp (_bca ,1,true );!_face {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_fbb );return _fbb ;};_dfd ,_gda :=_cf .GetNumberAsFloat (_bca .Params [0]);if _gda !=nil {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_gda );return _gda ;};_cgd .setHorizScaling (_dfd );case "\u0044\u006f":if len (_bca .Params )==0{_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0058\u004fbj\u0065c\u0074\u0020\u006e\u0061\u006d\u0065\u0020\u006f\u0070\u0065\u0072\u0061n\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u006f\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072.\u0020\u0047\u006f\u0074\u0020\u0025\u002b\u0076\u002e",_bca .Params );return _cf .ErrRangeError ;};_bgc ,_bcd :=_cf .GetName (_bca .Params [0]);if !_bcd {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0044\u006f\u0020\u006f\u0070e\u0072a\u0074\u006f\u0072\u0020\u0058\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u006e\u0061\u006d\u0065\u0020\u006fp\u0065\u0072\u0061\u006e\u0064\u003a\u0020\u0025\u002b\u0076\u002e",_bca .Params [0]);return _cf .ErrTypeError ;};_ ,_agcd :=_cbc .GetXObjectByName (*_bgc );if _agcd !=_fd .XObjectTypeForm {break ;};_eee ,_bcd :=_fdge ._fe [_bgc .String ()];if !_bcd {_fca ,_acg :=_cbc .GetXObjectFormByName (*_bgc );if _acg !=nil {_bda .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_acg );return _acg ;};_ade ,_acg :=_fca .GetContentStream ();if _acg !=nil {_bda .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_acg );return _acg ;};_afd :=_fca .Resources ;if _afd ==nil {_afd =_cbc ;};_dca ,_egf ,_fgf ,_acg :=_fdge .extractPageText (string (_ade ),_afd ,_cae .Mult (_dac .CTM ),_ga +1);if _acg !=nil {_bda .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_acg );return _acg ;};_eee =textResult {*_dca ,_egf ,_fgf };_fdge ._fe [_bgc .String ()]=_eee ;};_faa ._bge =append (_faa ._bge ,_eee ._adc ._bge ...);_afe ._deb +=_eee ._gfg ;_afe ._ggc +=_eee ._edg ;case "\u0072\u0067","\u0067","\u006b","\u0063\u0073","\u0073\u0063","\u0073\u0063\u006e":_cgd ._caf .ColorspaceNonStroking =_dac .ColorspaceNonStroking ;_cgd ._caf .ColorNonStroking =_dac .ColorNonStroking ;case "\u0052\u0047","\u0047","\u004b","\u0043\u0053","\u0053\u0043","\u0053\u0043\u004e":_cgd ._caf .ColorspaceStroking =_dac .ColorspaceStroking ;_cgd ._caf .ColorStroking =_dac .ColorStroking ;};return nil ;});_gac =_agfb .Process (_gdc );if _gac !=nil {_bda .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0050\u0072\u006f\u0063\u0065s\u0073i\u006eg\u003a\u0020\u0065\u0072\u0072\u003d\u0025v",_gac );};return _faa ,_afe ._deb ,_afe ._ggc ,_gac ;};func (_fbac *textObject )moveTo (_bdg ,_adbg float64 ){_fbac ._eag .Concat (_df .NewMatrix (1,0,0,1,_bdg ,_adbg ));_fbac ._gbg =_fbac ._eag ;};func _fefd (_def []*textWord ,_ccaa float64 )*wordBag {_fgg :=_bbdg (_def [0],_ccaa );for _ ,_daag :=range _def [1:]{_ggb :=_gff (_daag ._abdb );_fgg ._afec [_ggb ]=append (_fgg ._afec [_ggb ],_daag );};_fgg .sort ();return _fgg ;};func _gbgg (_ffc ,_egfd *textPara )bool {return _dcbf (_ffc .depth ()-_egfd .depth ())};func (_ffbe paraList )eventNeighbours (_adfg []event )map[*textPara ][]int {_bd .Slice (_adfg ,func (_agfa ,_bbeg int )bool {_gdda ,_dbcef :=_adfg [_agfa ],_adfg [_bbeg ];_ebde ,_bgdcd :=_gdda ._gdd ,_dbcef ._gdd ;if _ebde !=_bgdcd {return _ebde < _bgdcd ;};if _gdda ._afgge !=_dbcef ._afgge {return _gdda ._afgge ;};return _agfa < _bbeg ;});_aadc :=map[int ]map[int ]struct{}{};_becce :=map[int ]struct{}{};for _ ,_decd :=range _adfg {if _decd ._afgge {_aadc [_decd ._agea ]=map[int ]struct{}{};for _eace :=range _becce {if _eace !=_decd ._agea {_aadc [_decd ._agea ][_eace ]=struct{}{};_aadc [_eace ][_decd ._agea ]=struct{}{};};};_becce [_decd ._agea ]=struct{}{};}else {delete (_becce ,_decd ._agea );};};_cdfb :=map[*textPara ][]int {};for _egeg ,_afce :=range _aadc {_aeffe :=_ffbe [_egeg ];_aege :=make ([]int ,len (_afce ));_ddgg :=0;for _bddc :=range _afce {_aege [_ddgg ]=_bddc ;_ddgg ++;};_cdfb [_aeffe ]=_aege ;};return _cdfb ;};func (_becgf *wordBag )allWords ()[]*textWord {var _cafd []*textWord ;for _ ,_dfa :=range _becgf ._afec {_cafd =append (_cafd ,_dfa ...);};return _cafd ;};func _gbcd (_bcee []*textWord ,_egae int )[]*textWord {_dgga :=len (_bcee );copy (_bcee [_egae :],_bcee [_egae +1:]);return _bcee [:_dgga -1];};

// Append appends `mark` to the mark array.
func (_abb *TextMarkArray )Append (mark TextMark ){_abb ._efd =append (_abb ._efd ,mark )};func (_cfda *textPara )text ()string {_dbdg :=new (_da .Buffer );_cfda .writeText (_dbdg );return _dbdg .String ();};func (_aga *textObject )checkOp (_adb *_ea .ContentStreamOperation ,_fba int ,_dgfd bool )(_bfg bool ,_eadd error ){if _aga ==nil {var _eeb []_cf .PdfObject ;if _fba > 0{_eeb =_adb .Params ;if len (_eeb )> _fba {_eeb =_eeb [:_fba ];};};_bda .Log .Debug ("\u0025\u0023q \u006f\u0070\u0065r\u0061\u006e\u0064\u0020out\u0073id\u0065\u0020\u0074\u0065\u0078\u0074\u002e p\u0061\u0072\u0061\u006d\u0073\u003d\u0025+\u0076",_adb .Operand ,_eeb );};if _fba >=0{if len (_adb .Params )!=_fba {if _dgfd {_eadd =_c .New ("\u0069n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0070\u0061r\u0061m\u0065t\u0065\u0072\u0020\u0063\u006f\u0075\u006et");};_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0023\u0071\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020h\u0061\u0076\u0065\u0020\u0025\u0064\u0020i\u006e\u0070\u0075\u0074\u0020\u0070\u0061\u0072\u0061\u006d\u0073,\u0020\u0067\u006f\u0074\u0020\u0025\u0064\u0020\u0025\u002b\u0076",_adb .Operand ,_fba ,len (_adb .Params ),_adb .Params );return false ,_eadd ;};};return true ,nil ;};

// ImageExtractOptions contains options for controlling image extraction from
// PDF pages.
type ImageExtractOptions struct{IncludeInlineStencilMasks bool ;};func (_dcdd *textObject )moveTextSetLeading (_bcb ,_cff float64 ){_dcdd ._cebg ._cfce =-_cff ;_dcdd .moveTo (_bcb ,_cff );};const (_defe =true ;_fggf =true ;_dbfc =true ;_ggfg =false ;);func (_cfec *textWord )computeText ()string {_gefd :=make ([]string ,len (_cfec ._bbef ));for _eafe ,_cgbac :=range _cfec ._bbef {_gefd [_eafe ]=_cgbac ._ebg ;};return _b .Join (_gefd ,"");};type stateStack []*textState ;var (_gd =_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072"););var (_eegf =map[rune ]string {0x0060:"\u0300",0x02CB:"\u0300",0x0027:"\u0301",0x00B4:"\u0301",0x02B9:"\u0301",0x02CA:"\u0301",0x005E:"\u0302",0x02C6:"\u0302",0x007E:"\u0303",0x02DC:"\u0303",0x00AF:"\u0304",0x02C9:"\u0304",0x02D8:"\u0306",0x02D9:"\u0307",0x00A8:"\u0308",0x00B0:"\u030a",0x02DA:"\u030a",0x02BA:"\u030b",0x02DD:"\u030b",0x02C7:"\u030c",0x02C8:"\u030d",0x0022:"\u030e",0x02BB:"\u0312",0x02BC:"\u0313",0x0486:"\u0313",0x055A:"\u0313",0x02BD:"\u0314",0x0485:"\u0314",0x0559:"\u0314",0x02D4:"\u031d",0x02D5:"\u031e",0x02D6:"\u031f",0x02D7:"\u0320",0x02B2:"\u0321",0x00B8:"\u0327",0x02CC:"\u0329",0x02B7:"\u032b",0x02CD:"\u0331",0x005F:"\u0332",0x204E:"\u0359"};);

// String returns a description of `tm`.
func (_gdegb *textMark )String ()string {return _ff .Sprintf ("\u0025\u002e\u0032f \u0066\u006f\u006e\u0074\u0073\u0069\u007a\u0065\u003d\u0025\u002e\u0032\u0066\u0020\u0022\u0025\u0073\u0022",_gdegb .PdfRectangle ,_gdegb ._egcd ,_gdegb ._ebg );};func _bbdg (_efce *textWord ,_aacf float64 )*wordBag {_egda :=_gff (_efce ._abdb );_egef :=[]*textWord {_efce };_ddb :=wordBag {_afec :map[int ][]*textWord {_egda :_egef },PdfRectangle :_efce .PdfRectangle ,_dag :_efce ._bgee ,_ffba :_aacf };return &_ddb ;};type textMark struct{_fd .PdfRectangle ;_ggg int ;_ebg string ;_badf string ;_cffd *_fd .PdfFont ;_egcd float64 ;_dcdb float64 ;_egea _df .Matrix ;_abfb _df .Point ;_dgbc _fd .PdfRectangle ;_dcgd _f .Color ;_cgdc _f .Color ;};func _fdb (_agfg ,_eacad ,_bfd ,_caac *textPara )*textTable {_gaee :=&textTable {_bcbb :2,_dcfa :2,_daedf :map[uint64 ]*textPara {}};_gaee .put (0,0,_agfg );_gaee .put (1,0,_eacad );_gaee .put (0,1,_bfd );_gaee .put (1,1,_caac );return _gaee ;};func (_dbab *textObject )newTextMark (_cfg string ,_dgdd _df .Matrix ,_cgeg _df .Point ,_dfdc float64 ,_gdgd *_fd .PdfFont ,_gbda float64 ,_eaede ,_acdf _f .Color )(textMark ,bool ){_aabg :=_dgdd .Angle ();_eaca :=_cgec (_aabg ,_caga );var _bgcgf float64 ;if _eaca %180!=90{_bgcgf =_dgdd .ScalingFactorY ();}else {_bgcgf =_dgdd .ScalingFactorX ();};_daacc :=_dbbb (_dgdd );_ageg :=_fd .PdfRectangle {Llx :_daacc .X ,Lly :_daacc .Y ,Urx :_cgeg .X ,Ury :_cgeg .Y };switch _eaca %360{case 90:_ageg .Urx -=_bgcgf ;case 180:_ageg .Ury -=_bgcgf ;case 270:_ageg .Urx +=_bgcgf ;case 0:_ageg .Ury +=_bgcgf ;default:_eaca =0;_ageg .Ury +=_bgcgf ;};if _ageg .Llx > _ageg .Urx {_ageg .Llx ,_ageg .Urx =_ageg .Urx ,_ageg .Llx ;};if _ageg .Lly > _ageg .Ury {_ageg .Lly ,_ageg .Ury =_ageg .Ury ,_ageg .Lly ;};_adac ,_fdcb :=_beccf (_ageg ,_dbab ._dbfa ._edd );if !_fdcb {_bda .Log .Debug ("\u0054\u0065\u0078\u0074\u0020m\u0061\u0072\u006b\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0070a\u0067\u0065\u002e\u0020\u0062\u0062\u006f\u0078\u003d\u0025\u0067\u0020\u006d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u0067\u0020\u0074\u0065\u0078\u0074\u003d\u0025q",_ageg ,_dbab ._dbfa ._edd ,_cfg );};_ageg =_adac ;_fbdg :=_ageg ;_ggbb :=_dbab ._dbfa ._edd ;switch _eaca %360{case 90:_ggbb .Urx ,_ggbb .Ury =_ggbb .Ury ,_ggbb .Urx ;_fbdg =_fd .PdfRectangle {Llx :_ggbb .Urx -_ageg .Ury ,Urx :_ggbb .Urx -_ageg .Lly ,Lly :_ageg .Llx ,Ury :_ageg .Urx };case 180:_fbdg =_fd .PdfRectangle {Llx :_ggbb .Urx -_ageg .Llx ,Urx :_ggbb .Urx -_ageg .Urx ,Lly :_ggbb .Ury -_ageg .Lly ,Ury :_ggbb .Ury -_ageg .Ury };case 270:_ggbb .Urx ,_ggbb .Ury =_ggbb .Ury ,_ggbb .Urx ;_fbdg =_fd .PdfRectangle {Llx :_ageg .Ury ,Urx :_ageg .Lly ,Lly :_ggbb .Ury -_ageg .Llx ,Ury :_ggbb .Ury -_ageg .Urx };};if _fbdg .Llx > _fbdg .Urx {_fbdg .Llx ,_fbdg .Urx =_fbdg .Urx ,_fbdg .Llx ;};if _fbdg .Lly > _fbdg .Ury {_fbdg .Lly ,_fbdg .Ury =_fbdg .Ury ,_fbdg .Lly ;};_ddbf :=textMark {_ebg :_cfg ,PdfRectangle :_fbdg ,_dgbc :_ageg ,_cffd :_gdgd ,_egcd :_bgcgf ,_dcdb :_gbda ,_egea :_dgdd ,_abfb :_cgeg ,_ggg :_eaca ,_dcgd :_eaede ,_cgdc :_acdf };if _abcf {_bda .Log .Info ("n\u0065\u0077\u0054\u0065\u0078\u0074M\u0061\u0072\u006b\u003a\u0020\u0073t\u0061\u0072\u0074\u003d\u0025\u002e\u0032f\u0020\u0065\u006e\u0064\u003d\u0025\u002e\u0032\u0066\u0020%\u0073",_daacc ,_cgeg ,_ddbf .String ());};return _ddbf ,_fdcb ;};func (_dafe *textWord )appendMark (_effee *textMark ,_eafa _fd .PdfRectangle ){_dafe ._bbef =append (_dafe ._bbef ,_effee );_dafe .PdfRectangle =_fcgb (_dafe .PdfRectangle ,_effee .PdfRectangle );if _effee ._egcd > _dafe ._bgee {_dafe ._bgee =_effee ._egcd ;};_dafe ._abdb =_eafa .Ury -_dafe .PdfRectangle .Lly ;};func (_fec *textObject )showTextAdjusted (_eacg *_cf .PdfObjectArray )error {_cfb :=false ;for _ ,_beag :=range _eacg .Elements (){switch _beag .(type ){case *_cf .PdfObjectFloat ,*_cf .PdfObjectInteger :_gcd ,_eef :=_cf .GetNumberAsFloat (_beag );if _eef !=nil {_bda .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0073\u0068\u006f\u0077\u0054\u0065\u0078t\u0041\u0064\u006a\u0075\u0073\u0074\u0065\u0064\u002e\u0020\u0042\u0061\u0064\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0061\u006c\u0020a\u0072\u0067\u002e\u0020\u006f\u003d\u0025\u0073\u0020\u0061\u0072\u0067\u0073\u003d\u0025\u002b\u0076",_beag ,_eacg );return _eef ;};_dgf ,_baa :=-_gcd *0.001*_fec ._cebg ._gea ,0.0;if _cfb {_baa ,_dgf =_dgf ,_baa ;};_bag :=_beeg (_df .Point {X :_dgf ,Y :_baa });_fec ._gbg .Concat (_bag );case *_cf .PdfObjectString :_caeg ,_cad :=_cf .GetStringBytes (_beag );if !_cad {_bda .Log .Trace ("s\u0068\u006f\u0077\u0054\u0065\u0078\u0074\u0041\u0064j\u0075\u0073\u0074\u0065\u0064\u003a\u0020Ba\u0064\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u002e\u0020o=\u0025\u0073 \u0061\u0072\u0067\u0073\u003d\u0025\u002b\u0076",_beag ,_eacg );return _cf .ErrTypeError ;};_fec .renderText (_caeg );default:_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0073\u0068\u006f\u0077\u0054\u0065\u0078\u0074A\u0064\u006a\u0075\u0073\u0074\u0065\u0064\u002e\u0020\u0055\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0028%T\u0029\u0020\u0061\u0072\u0067\u0073\u003d\u0025\u002b\u0076",_beag ,_eacg );return _cf .ErrTypeError ;};};return nil ;};func (_eeba *wordBag )firstWord (_aab int )*textWord {return _eeba ._afec [_aab ][0]};func (_dfe *textTable )markCells (){for _bcce :=0;_bcce < _dfe ._dcfa ;_bcce ++{for _cdfc :=0;_cdfc < _dfe ._bcbb ;_cdfc ++{_fbc :=_dfe .get (_cdfc ,_bcce );_fbc ._gecc =true ;};};};

// ExtractTextWithStats works like ExtractText but returns the number of characters in the output
// (`numChars`) and the number of characters that were not decoded (`numMisses`).
func (_gee *Extractor )ExtractTextWithStats ()(_cgb string ,_bee int ,_ffd int ,_dbg error ){_cbe ,_bee ,_ffd ,_dbg :=_gee .ExtractPageText ();if _dbg !=nil {return "",_bee ,_ffd ,_dbg ;};return _cbe .Text (),_bee ,_ffd ,nil ;};

// PageImages represents extracted images on a PDF page with spatial information:
// display position and size.
type PageImages struct{Images []ImageMark ;};func _fdeg (_gaag []_cf .PdfObject )(_ebfe ,_geee float64 ,_ceca error ){if len (_gaag )!=2{return 0,0,_ff .Errorf ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0073\u003a \u0025\u0064",len (_gaag ));};_bbed ,_ceca :=_cf .GetNumbersAsFloat (_gaag );if _ceca !=nil {return 0,0,_ceca ;};return _bbed [0],_bbed [1],nil ;};type event struct{_gdd float64 ;_afgge bool ;_agea int ;};func (_fbba paraList )llyRange (_gfgg []int ,_agfe ,_fcad float64 )[]int {_bafc :=len (_fbba );if _fcad < _fbba [_gfgg [0]].Lly ||_agfe > _fbba [_gfgg [_bafc -1]].Lly {return nil ;};_feec :=_bd .Search (_bafc ,func (_eabg int )bool {return _fbba [_gfgg [_eabg ]].Lly >=_agfe });_gabb :=_bd .Search (_bafc ,func (_dbdd int )bool {return _fbba [_gfgg [_dbdd ]].Lly > _fcad });return _gfgg [_feec :_gabb ];};func (_bbf *textObject )setTextRise (_gfdf float64 ){if _bbf ==nil {return ;};_bbf ._cebg ._fbdf =_gfdf ;};func _beeg (_cbb _df .Point )_df .Matrix {return _df .TranslationMatrix (_cbb .X ,_cbb .Y )};func _bgcg (_ddee _fd .PdfRectangle ,_ddbb bounded )float64 {return _ddee .Ury -_ddbb .bbox ().Lly };type fontEntry struct{_agbf *_fd .PdfFont ;_dfc int64 ;};func (_dedf *textObject )getStrokeColor ()_f .Color {return _aegb (_dedf ._caf .ColorspaceStroking ,_dedf ._caf .ColorStroking );};func _abbb (_cef *wordBag ,_bcgf *textWord ,_egab float64 )bool {return _bcgf .Llx < _cef .Urx +_egab &&_cef .Llx -_egab < _bcgf .Urx ;};func (_eg *imageExtractContext )extractXObjectImage (_bce *_cf .PdfObjectName ,_gcab _ea .GraphicsState ,_fdg *_fd .PdfPageResources )error {_ab ,_ :=_fdg .GetXObjectByName (*_bce );if _ab ==nil {return nil ;};_ecg ,_fc :=_eg ._ec [_ab ];if !_fc {_cgc ,_fdc :=_fdg .GetXObjectImageByName (*_bce );if _fdc !=nil {return _fdc ;};if _cgc ==nil {return nil ;};_abd ,_fdc :=_cgc .ToImage ();if _fdc !=nil {return _fdc ;};_ecg =&cachedImage {_bf :_abd ,_dgc :_cgc .ColorSpace };_eg ._ec [_ab ]=_ecg ;};_cbf :=_ecg ._bf ;_bg :=_ecg ._dgc ;_gdf ,_bea :=_bg .ImageToRGB (*_cbf );if _bea !=nil {return _bea ;};_bda .Log .Debug ("@\u0044\u006f\u0020\u0043\u0054\u004d\u003a\u0020\u0025\u0073",_gcab .CTM .String ());_cfd :=ImageMark {Image :&_gdf ,Width :_gcab .CTM .ScalingFactorX (),Height :_gcab .CTM .ScalingFactorY (),Angle :_gcab .CTM .Angle ()};_cfd .X ,_cfd .Y =_gcab .CTM .Translation ();_eg ._eac =append (_eg ._eac ,_cfd );_eg ._ce ++;return nil ;};func (_bbaef *wordBag )getDepthIdx (_cee float64 )int {_cbdb :=_bbaef .depthIndexes ();_dff :=_gff (_cee );if _dff < _cbdb [0]{return _cbdb [0];};if _dff > _cbdb [len (_cbdb )-1]{return _cbdb [len (_cbdb )-1];};return _dff ;};type imageExtractContext struct{_eac []ImageMark ;_fa int ;_ce int ;_eae int ;_ec map[*_cf .PdfObjectStream ]*cachedImage ;_ac *ImageExtractOptions ;};func (_cgbbg *textWord )bbox ()_fd .PdfRectangle {return _cgbbg .PdfRectangle };

// ImageMark represents an image drawn on a page and its position in device coordinates.
// All coordinates are in device coordinates.
type ImageMark struct{Image *_fd .Image ;

// Dimensions of the image as displayed in the PDF.
Width float64 ;Height float64 ;

// Position of the image in PDF coordinates (lower left corner).
X float64 ;Y float64 ;

// Angle in degrees, if rotated.
Angle float64 ;};

// ApplyArea processes the page text only within the specified area `bbox`.
// Each time ApplyArea is called, it updates the result set in `pt`.
// Can be called multiple times in a row with different bounding boxes.
func (_bfb *PageText )ApplyArea (bbox _fd .PdfRectangle ){_daed :=make ([]*textMark ,0,len (_bfb ._bge ));for _ ,_cfbc :=range _bfb ._bge {if _cdee (_cfbc .bbox (),bbox ){_daed =append (_daed ,_cfbc );};};var _dbfg paraList ;_fbag :=len (_daed );for _fge :=0;_fge < 360&&_fbag > 0;_fge +=90{_gae :=make ([]*textMark ,0,len (_daed )-_fbag );for _ ,_bdd :=range _daed {if _bdd ._ggg ==_fge {_gae =append (_gae ,_bdd );};};if len (_gae )> 0{_bbae :=_egdf (_gae ,_bfb ._fddg );_dbfg =append (_dbfg ,_bbae ...);_fbag -=len (_gae );};};_afa :=new (_da .Buffer );_dbfg .writeText (_afa );_bfb ._agge =_afa .String ();_bfb ._ccdf =_dbfg .toTextMarks ();_bfb ._dde =_dbfg .tables ();};func (_gecbg *wordBag )scanBand (_dcca string ,_egff *wordBag ,_ecfb func (_cffc *wordBag ,_fgfe *textWord )bool ,_eadf ,_abc ,_beg float64 ,_cfca ,_gfgd bool )int {_ebbf :=_egff ._dag ;_gbcb :=_ddgf *_ebbf ;_dfdb :=0;_ccad ,_gdaf :=_eadf ,_abc ;var _cgbb []*textWord ;for _ ,_dab :=range _gecbg .depthBand (_eadf -_gbcb ,_abc +_gbcb ){for _ ,_gag :=range _gecbg ._afec [_dab ]{if !(_eadf -_gbcb <=_gag ._abdb &&_gag ._abdb <=_abc +_gbcb ){continue ;};if !_ecfb (_egff ,_gag ){continue ;};_cadg :=_e .Abs (_gag ._bgee -_ebbf )/_ebbf ;_gedd :=_gag ._bgee /_ebbf ;_agab :=_e .Min (_cadg ,_gedd );if _beg > 0{if _agab > _beg {continue ;};};if !_cfca {_egff .pullWord (_gecbg ,_gag ,_dab );};_cgbb =append (_cgbb ,_gag );_dfdb ++;if !_gfgd {if _gag ._abdb < _eadf {_eadf =_gag ._abdb ;};if _gag ._abdb > _abc {_abc =_gag ._abdb ;};};if _cfca {break ;};};};if _eeda {if len (_dcca )> 0{_bda .Log .Info ("\u0073\u0063\u0061\u006e\u0042\u0061\u006e\u0064\u003a\u0020\u0025\u0073\u0020\u005b\u0025\u002e\u0032f\u0020\u0025\u002e\u0032\u0066\u005d\u002d\u003e\u005b\u0025.\u0032\u0066\u0020\u0025\u002e\u0032\u0066\u005d\u0020\u0070\u0061\u0072\u0061\u003d\u0025\u002e\u0032\u0066 \u0066\u006f\u006e\u0074\u0073\u0069z\u0065\u003d%\u002e\u0032f\u0020%\u0071",_dcca ,_ccad ,_gdaf ,_eadf ,_abc ,_egff .PdfRectangle ,_egff ._dag ,_dbaac (_egff .text (),20));for _bccc ,_fbf :=range _cgbb {_ff .Printf ("\u0020\u0020\u0025\u0071",_fbf ._daace );if _bccc >=5{break ;};};if len (_cgbb )> 0{_ff .Println ();};};};return _dfdb ;};func _beac (_gga ,_dbbbg int )int {if _gga > _dbbbg {return _gga ;};return _dbbbg ;};func (_gcc *stateStack )pop ()*textState {if _gcc .empty (){return nil ;};_fbg :=*(*_gcc )[len (*_gcc )-1];*_gcc =(*_gcc )[:len (*_gcc )-1];return &_fbg ;};func (_cccd *wordBag )depthBand (_cbd ,_dfcb float64 )[]int {if len (_cccd ._afec )==0{return nil ;};return _cccd .depthRange (_cccd .getDepthIdx (_cbd ),_cccd .getDepthIdx (_dfcb ));};func (_fde *textObject )getFontDirect (_bbbf string )(*_fd .PdfFont ,error ){_becag ,_aea :=_fde .getFontDict (_bbbf );if _aea !=nil {return nil ,_aea ;};_eab ,_aea :=_fd .NewPdfFontFromPdfObject (_becag );if _aea !=nil {_bda .Log .Debug ("\u0067\u0065\u0074\u0046\u006f\u006e\u0074\u0044\u0069\u0072\u0065\u0063\u0074\u003a\u0020\u004e\u0065\u0077Pd\u0066F\u006f\u006e\u0074\u0046\u0072\u006f\u006d\u0050\u0064\u0066\u004f\u0062j\u0065\u0063\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d%\u0023\u0071\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bbbf ,_aea );};return _eab ,_aea ;};func (_bgcd *textPara )fontsize ()float64 {return _bgcd ._cddb [0]._gged };func (_aabd *textLine )toTextMarks (_bcaf *int )[]TextMark {var _gcb []TextMark ;for _ ,_edfc :=range _aabd ._cda {if _edfc ._cgcg {_gcb =_cddg (_gcb ,_bcaf ,"\u0020");};_efe :=_edfc .toTextMarks (_bcaf );_gcb =append (_gcb ,_efe ...);};return _gcb ;};

// TextTable represents a table.
// Cells are ordered top-to-bottom, left-to-right.
// Cells[y] is the (0-offset) y'th row in the table.
// Cells[y][x] is the (0-offset) x'th column in the table.
type TextTable struct{W ,H int ;Cells [][]TableCell ;};func (_faec *textLine )appendWord (_bbcd *textWord ){_faec ._cda =append (_faec ._cda ,_bbcd );_faec .PdfRectangle =_fcgb (_faec .PdfRectangle ,_bbcd .PdfRectangle );if _bbcd ._bgee > _faec ._gged {_faec ._gged =_bbcd ._bgee ;};if _bbcd ._abdb > _faec ._abfe {_faec ._abfe =_bbcd ._abdb ;};};func _dbaac (_fafa string ,_faab int )string {if len (_fafa )< _faab {return _fafa ;};return _fafa [:_faab ];};func (_abad paraList )tables ()[]TextTable {var _eedb []TextTable ;for _ ,_eeg :=range _abad {if _eeg ._aada !=nil {_eedb =append (_eedb ,_eeg ._aada .toTextTable ());};};return _eedb ;};func _cdee (_dad ,_agdf _fd .PdfRectangle )bool {return _dbd (_dad ,_agdf )&&_eada (_dad ,_agdf )};func _dba (_beba _fd .PdfRectangle )textState {return textState {_gfcg :100,_feg :RenderModeFill ,_bacb :_beba };};type textWord struct{_fd .PdfRectangle ;_abdb float64 ;_daace string ;_bbef []*textMark ;_bgee float64 ;_cgcg bool ;};

// String returns a description of `state`.
func (_dcdde *textState )String ()string {_gef :="\u005bN\u004f\u0054\u0020\u0053\u0045\u0054]";if _dcdde ._bab !=nil {_gef =_dcdde ._bab .BaseFont ();};return _ff .Sprintf ("\u0074\u0063\u003d\u0025\u002e\u0032\u0066\u0020\u0074\u0077\u003d\u0025\u002e\u0032\u0066 \u0074f\u0073\u003d\u0025\u002e\u0032\u0066\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0071",_dcdde ._fcc ,_dcdde ._fbd ,_dcdde ._gea ,_gef );};func _cgec (_gafc float64 ,_feff int )int {if _feff ==0{_feff =1;};_beccfc :=float64 (_feff );return int (_e .Round (_gafc /_beccfc )*_beccfc );};func (_gdfb *wordBag )depthRange (_aad ,_egec int )[]int {_cadb :=_gdfb .depthIndexes ();var _faea []int ;for _ ,_dfbe :=range _cadb {if _aad <=_dfbe &&_dfbe <=_egec {_faea =append (_faea ,_dfbe );};};return _faea ;};func (_acb *textObject )setTextRenderMode (_cfba int ){if _acb ==nil {return ;};_acb ._cebg ._feg =RenderMode (_cfba );};func _efdbc (_afgb ,_dfad float64 )string {_ccfa :=!_dcbf (_afgb -_dfad );if _ccfa {return "\u000a";};return "\u0020";};func (_fafb *textPara )bbox ()_fd .PdfRectangle {return _fafb .PdfRectangle };func _ggec (_ceef ,_caag *textPara )bool {return _dbd (_ceef ._efga ,_caag ._efga )};func (_degd *textPara )depth ()float64 {if len (_degd ._cddb )> 0{return _degd ._cddb [0]._abfe ;};return _degd ._aada .get (0,0).depth ();};func _aegb (_egfcd _fd .PdfColorspace ,_eddb _fd .PdfColor )_f .Color {if _egfcd ==nil ||_eddb ==nil {return _f .Black ;};_bebg ,_gcdg :=_egfcd .ColorToRGB (_eddb );if _gcdg !=nil {_bda .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006fu\u006c\u0064\u0020no\u0074\u0020\u0063\u006f\u006e\u0076e\u0072\u0074\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0025\u0076\u0020\u0028\u0025\u0076)\u0020\u0074\u006f\u0020\u0052\u0047\u0042\u003a \u0025\u0073",_eddb ,_egfcd ,_gcdg );return _f .Black ;};_ddad ,_ggda :=_bebg .(*_fd .PdfColorDeviceRGB );if !_ggda {_bda .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u006e\u0076\u0065\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020i\u006e\u0020\u0074\u0068\u0065\u0020\u0052\u0047\u0042\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0076",_bebg );return _f .Black ;};return _f .NRGBA {R :uint8 (_ddad .R ()*255),G :uint8 (_ddad .G ()*255),B :uint8 (_ddad .B ()*255),A :uint8 (255)};};func (_bafcf *textWord )absorb (_ggd *textWord ){_bafcf .PdfRectangle =_fcgb (_bafcf .PdfRectangle ,_ggd .PdfRectangle );_bafcf ._bbef =append (_bafcf ._bbef ,_ggd ._bbef ...);};func (_ebe *textObject )getFontDict (_cbffc string )(_dcbg _cf .PdfObject ,_dcce error ){_eaffe :=_ebe ._aaf ;if _eaffe ==nil {_bda .Log .Debug ("g\u0065\u0074\u0046\u006f\u006e\u0074D\u0069\u0063\u0074\u002e\u0020\u004eo\u0020\u0072\u0065\u0073\u006f\u0075\u0072c\u0065\u0073\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025#\u0071",_cbffc );return nil ,nil ;};_dcbg ,_dga :=_eaffe .GetFontByName (_cf .PdfObjectName (_cbffc ));if !_dga {_bda .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0067\u0065t\u0046\u006f\u006et\u0044\u0069\u0063\u0074\u003a\u0020\u0046\u006f\u006et \u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020\u006e\u0061m\u0065\u003d%\u0023\u0071",_cbffc );return nil ,_c .New ("f\u006f\u006e\u0074\u0020no\u0074 \u0069\u006e\u0020\u0072\u0065s\u006f\u0075\u0072\u0063\u0065\u0073");};return _dcbg ,nil ;};func (_ffgg *textObject )getCurrentFont ()*_fd .PdfFont {var _dege *_fd .PdfFont ;if !_ffgg ._ddg .empty (){_dege =_ffgg ._ddg .top ()._bab ;};if _dege ==nil {_bda .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u002e\u0020U\u0073\u0069\u006e\u0067\u0020d\u0065\u0066a\u0075\u006c\u0074\u002e");return _fd .DefaultFont ();};return _dege ;};func (_feaf *wordBag )removeDuplicates (){for _ ,_bdac :=range _feaf .depthIndexes (){if len (_feaf ._afec [_bdac ])==0{continue ;};_eefc :=_feaf ._afec [_bdac ][0];_gdgad :=_adcbed *_eefc ._bgee ;_bdfb :=_eefc ._abdb ;for _ ,_bbac :=range _feaf .depthBand (_bdfb ,_bdfb +_gdgad ){_fdedd :=map[*textWord ]struct{}{};_fgcf :=_feaf ._afec [_bbac ];for _ ,_bccg :=range _fgcf {if _bccg !=_eefc &&_bccg ._daace ==_eefc ._daace &&_e .Abs (_bccg .Llx -_eefc .Llx )< _gdgad &&_e .Abs (_bccg .Urx -_eefc .Urx )< _gdgad &&_e .Abs (_bccg .Lly -_eefc .Lly )< _gdgad &&_e .Abs (_bccg .Ury -_eefc .Ury )< _gdgad {_fdedd [_bccg ]=struct{}{};};};if len (_fdedd )> 0{_gdgag :=0;for _ ,_bgdf :=range _fgcf {if _ ,_dgac :=_fdedd [_bgdf ];!_dgac {_fgcf [_gdgag ]=_bgdf ;_gdgag ++;};};_feaf ._afec [_bbac ]=_fgcf [:len (_fgcf )-len (_fdedd )];if len (_feaf ._afec [_bbac ])==0{delete (_feaf ._afec ,_bbac );};};};};};func _beec (_daf ,_cdd bounded )float64 {return _daf .bbox ().Llx -_cdd .bbox ().Urx };func _cddg (_ffgf []TextMark ,_gcf *int ,_acgc string )[]TextMark {_cggc :=_edf ;_cggc .Text =_acgc ;return _bceb (_ffgf ,_gcf ,_cggc );};