//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_f "fmt";_b "github.com/unidoc/unipdf/v3/contentstream";_da "github.com/unidoc/unipdf/v3/core";_de "github.com/unidoc/unipdf/v3/internal/transform";_e "github.com/unidoc/unipdf/v3/model";_d "math";);

// AppendCurve appends the specified Bezier curve to the path.
func (_ac CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_ac .Curves =append (_ac .Curves ,curve );return _ac ;};

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_aea Rectangle )ToPdfRectangle ()*_e .PdfRectangle {return &_e .PdfRectangle {Llx :_aea .X ,Lly :_aea .Y ,Urx :_aea .X +_aea .Width ,Ury :_aea .Y +_aea .Height };};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_dage :=Vector {};_dage .Dx =dx ;_dage .Dy =dy ;return _dage };

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_dagf :=Vector {};_dagf .Dx =length *_d .Cos (theta );_dagf .Dy =length *_d .Sin (theta );return _dagf ;};

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_bd BoundingBox )ToPdfRectangle ()*_e .PdfRectangle {return &_e .PdfRectangle {Llx :_bd .X ,Lly :_bd .Y ,Urx :_bd .X +_bd .Width ,Ury :_bd .Y +_bd .Height };};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_ae Point )Rotate (theta float64 )Point {_ddb :=_de .NewPoint (_ae .X ,_ae .Y ).Rotate (theta );return NewPoint (_ddb .X ,_ddb .Y );};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor *_e .PdfColorDeviceRGB ;FillEnabled bool ;FillColor *_e .PdfColorDeviceRGB ;};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_agc Line )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_fg ,_bbc :=_agc .X1 ,_agc .X2 ;_acc ,_ecf :=_agc .Y1 ,_agc .Y2 ;_ecdb :=_ecf -_acc ;_ee :=_bbc -_fg ;_dag :=_d .Atan2 (_ecdb ,_ee );L :=_d .Sqrt (_d .Pow (_ee ,2.0)+_d .Pow (_ecdb ,2.0));_cabc :=_agc .LineWidth ;_bbcc :=_d .Pi ;_edc :=1.0;if _ee < 0{_edc *=-1.0;};if _ecdb < 0{_edc *=-1.0;};VsX :=_edc *(-_cabc /2*_d .Cos (_dag +_bbcc /2));VsY :=_edc *(-_cabc /2*_d .Sin (_dag +_bbcc /2)+_cabc *_d .Sin (_dag +_bbcc /2));V1X :=VsX +_cabc /2*_d .Cos (_dag +_bbcc /2);V1Y :=VsY +_cabc /2*_d .Sin (_dag +_bbcc /2);V2X :=VsX +_cabc /2*_d .Cos (_dag +_bbcc /2)+L *_d .Cos (_dag );V2Y :=VsY +_cabc /2*_d .Sin (_dag +_bbcc /2)+L *_d .Sin (_dag );V3X :=VsX +_cabc /2*_d .Cos (_dag +_bbcc /2)+L *_d .Cos (_dag )+_cabc *_d .Cos (_dag -_bbcc /2);V3Y :=VsY +_cabc /2*_d .Sin (_dag +_bbcc /2)+L *_d .Sin (_dag )+_cabc *_d .Sin (_dag -_bbcc /2);V4X :=VsX +_cabc /2*_d .Cos (_dag -_bbcc /2);V4Y :=VsY +_cabc /2*_d .Sin (_dag -_bbcc /2);_adfc :=NewPath ();_adfc =_adfc .AppendPoint (NewPoint (V1X ,V1Y ));_adfc =_adfc .AppendPoint (NewPoint (V2X ,V2Y ));_adfc =_adfc .AppendPoint (NewPoint (V3X ,V3Y ));_adfc =_adfc .AppendPoint (NewPoint (V4X ,V4Y ));_agce :=_agc .LineEndingStyle1 ;_gfc :=_agc .LineEndingStyle2 ;_bbb :=3*_cabc ;_cc :=3*_cabc ;_dga :=(_cc -_cabc )/2;if _gfc ==LineEndingStyleArrow {_aef :=_adfc .GetPointNumber (2);_bcc :=NewVectorPolar (_bbb ,_dag +_bbcc );_fdd :=_aef .AddVector (_bcc );_ega :=NewVectorPolar (_cc /2,_dag +_bbcc /2);_bga :=NewVectorPolar (_bbb ,_dag );_afg :=NewVectorPolar (_dga ,_dag +_bbcc /2);_bdf :=_fdd .AddVector (_afg );_afb :=_bga .Add (_ega .Flip ());_add :=_bdf .AddVector (_afb );_bf :=_ega .Scale (2).Flip ().Add (_afb .Flip ());_bba :=_add .AddVector (_bf );_aaf :=_fdd .AddVector (NewVectorPolar (_cabc ,_dag -_bbcc /2));_abc :=NewPath ();_abc =_abc .AppendPoint (_adfc .GetPointNumber (1));_abc =_abc .AppendPoint (_fdd );_abc =_abc .AppendPoint (_bdf );_abc =_abc .AppendPoint (_add );_abc =_abc .AppendPoint (_bba );_abc =_abc .AppendPoint (_aaf );_abc =_abc .AppendPoint (_adfc .GetPointNumber (4));_adfc =_abc ;};if _agce ==LineEndingStyleArrow {_fcd :=_adfc .GetPointNumber (1);_afef :=_adfc .GetPointNumber (_adfc .Length ());_geb :=NewVectorPolar (_cabc /2,_dag +_bbcc +_bbcc /2);_eeg :=_fcd .AddVector (_geb );_bcf :=NewVectorPolar (_bbb ,_dag ).Add (NewVectorPolar (_cc /2,_dag +_bbcc /2));_fca :=_eeg .AddVector (_bcf );_gd :=NewVectorPolar (_dga ,_dag -_bbcc /2);_baa :=_fca .AddVector (_gd );_ceb :=NewVectorPolar (_bbb ,_dag );_bcd :=_afef .AddVector (_ceb );_ggc :=NewVectorPolar (_dga ,_dag +_bbcc +_bbcc /2);_aec :=_bcd .AddVector (_ggc );_gfe :=_eeg ;_bbaf :=NewPath ();_bbaf =_bbaf .AppendPoint (_eeg );_bbaf =_bbaf .AppendPoint (_fca );_bbaf =_bbaf .AppendPoint (_baa );for _ ,_bggd :=range _adfc .Points [1:len (_adfc .Points )-1]{_bbaf =_bbaf .AppendPoint (_bggd );};_bbaf =_bbaf .AppendPoint (_bcd );_bbaf =_bbaf .AppendPoint (_aec );_bbaf =_bbaf .AppendPoint (_gfe );_adfc =_bbaf ;};_fda :=_b .NewContentCreator ();_fda .Add_q ().Add_rg (_agc .LineColor .R (),_agc .LineColor .G (),_agc .LineColor .B ());if len (gsName )> 1{_fda .Add_gs (_da .PdfObjectName (gsName ));};_adfc =_adfc .Offset (_agc .X1 ,_agc .Y1 );_afbe :=_adfc .GetBoundingBox ();DrawPathWithCreator (_adfc ,_fda );if _agc .LineStyle ==LineStyleDashed {_fda .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();}else {_fda .Add_f ().Add_Q ();};return _fda .Bytes (),_afbe .ToPdfRectangle (),nil ;};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_e .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_e .PdfColorDeviceRGB ;Opacity float64 ;};

// AddVector adds vector to a point.
func (_cac Point )AddVector (v Vector )Point {_cac .X +=v .Dx ;_cac .Y +=v .Dy ;return _cac };

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_b .ContentCreator ){for _cgb ,_aefd :=range path .Points {if _cgb ==0{creator .Add_m (_aefd .X ,_aefd .Y );}else {creator .Add_l (_aefd .X ,_aefd .Y );};};};func (_gf Point )String ()string {return _f .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_gf .X ,_gf .Y );};

// Copy returns a clone of the path.
func (_eab Path )Copy ()Path {_ce :=Path {};_ce .Points =[]Point {};for _ ,_ggb :=range _eab .Points {_ce .Points =append (_ce .Points ,_ggb );};return _ce ;};

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor *_e .PdfColorDeviceRGB ;LineWidth float64 ;};

// Copy returns a clone of the Bezier path.
func (_ef CubicBezierPath )Copy ()CubicBezierPath {_fb :=CubicBezierPath {};_fb .Curves =[]CubicBezierCurve {};for _ ,_cg :=range _ef .Curves {_fb .Curves =append (_fb .Curves ,_cg );};return _fb ;};

// Rotate rotates the vector by the specified angle.
func (_efb Vector )Rotate (phi float64 )Vector {_gga :=_efb .Magnitude ();_bgf :=_efb .GetPolarAngle ();return NewVectorPolar (_gga ,_bgf +phi );};

// Length returns the number of points in the path.
func (_eca Path )Length ()int {return len (_eca .Points )};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_adf Point )Add (dx ,dy float64 )Point {_adf .X +=dx ;_adf .Y +=dy ;return _adf };

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_cab Path )RemovePoint (number int )Path {if number < 1||number > len (_cab .Points ){return _cab ;};_dd :=number -1;_cab .Points =append (_cab .Points [:_dd ],_cab .Points [_dd +1:]...);return _cab ;};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_dda :=Vector {};_dda .Dx =b .X -a .X ;_dda .Dy =b .Y -a .Y ;return _dda ;};

// GetBounds returns the bounding box of the Bezier curve.
func (_g CubicBezierCurve )GetBounds ()_e .PdfRectangle {_bg :=_g .P0 .X ;_ba :=_g .P0 .X ;_be :=_g .P0 .Y ;_bb :=_g .P0 .Y ;for _a :=0.0;_a <=1.0;_a +=0.001{Rx :=_g .P0 .X *_d .Pow (1-_a ,3)+_g .P1 .X *3*_a *_d .Pow (1-_a ,2)+_g .P2 .X *3*_d .Pow (_a ,2)*(1-_a )+_g .P3 .X *_d .Pow (_a ,3);Ry :=_g .P0 .Y *_d .Pow (1-_a ,3)+_g .P1 .Y *3*_a *_d .Pow (1-_a ,2)+_g .P2 .Y *3*_d .Pow (_a ,2)*(1-_a )+_g .P3 .Y *_d .Pow (_a ,3);if Rx < _bg {_bg =Rx ;};if Rx > _ba {_ba =Rx ;};if Ry < _be {_be =Ry ;};if Ry > _bb {_bb =Ry ;};};_ad :=_e .PdfRectangle {};_ad .Llx =_bg ;_ad .Lly =_be ;_ad .Urx =_ba ;_ad .Ury =_bb ;return _ad ;};const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;);

// Magnitude returns the magnitude of the vector.
func (_ccgc Vector )Magnitude ()float64 {return _d .Sqrt (_d .Pow (_ccgc .Dx ,2.0)+_d .Pow (_ccgc .Dy ,2.0));};

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_aefg BasicLine )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_daef :=_aefg .LineWidth ;_fdbe :=NewPath ();_fdbe =_fdbe .AppendPoint (NewPoint (_aefg .X1 ,_aefg .Y1 ));_fdbe =_fdbe .AppendPoint (NewPoint (_aefg .X2 ,_aefg .Y2 ));_cf :=_b .NewContentCreator ();_ff :=_fdbe .GetBoundingBox ();DrawPathWithCreator (_fdbe ,_cf );if _aefg .LineStyle ==LineStyleDashed {_cf .Add_d ([]int64 {1,1},0);};_cf .Add_RG (_aefg .LineColor .R (),_aefg .LineColor .G (),_aefg .LineColor .B ()).Add_w (_daef ).Add_S ().Add_Q ();return _cf .Bytes (),_ff .ToPdfRectangle (),nil ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_e .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_e .PdfColorDeviceRGB ;Opacity float64 ;};

// AppendPoint adds the specified point to the path.
func (_bbf Path )AppendPoint (point Point )Path {_bbf .Points =append (_bbf .Points ,point );return _bbf };

// GetBoundingBox returns the bounding box of the Bezier path.
func (_dg CubicBezierPath )GetBoundingBox ()Rectangle {_ecd :=Rectangle {};_gg :=0.0;_ace :=0.0;_efg :=0.0;_efgf :=0.0;for _eaf ,_cdf :=range _dg .Curves {_ab :=_cdf .GetBounds ();if _eaf ==0{_gg =_ab .Llx ;_ace =_ab .Urx ;_efg =_ab .Lly ;_efgf =_ab .Ury ;continue ;};if _ab .Llx < _gg {_gg =_ab .Llx ;};if _ab .Urx > _ace {_ace =_ab .Urx ;};if _ab .Lly < _efg {_efg =_ab .Lly ;};if _ab .Ury > _efgf {_efgf =_ab .Ury ;};};_ecd .X =_gg ;_ecd .Y =_efg ;_ecd .Width =_ace -_gg ;_ecd .Height =_efgf -_efg ;return _ecd ;};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_cgd Circle )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_ag :=_cgd .Width /2;_fbc :=_cgd .Height /2;if _cgd .BorderEnabled {_ag -=_cgd .BorderWidth /2;_fbc -=_cgd .BorderWidth /2;};_ed :=0.551784;_gac :=_ag *_ed ;_fea :=_fbc *_ed ;_dae :=NewCubicBezierPath ();_dae =_dae .AppendCurve (NewCubicBezierCurve (-_ag ,0,-_ag ,_fea ,-_gac ,_fbc ,0,_fbc ));_dae =_dae .AppendCurve (NewCubicBezierCurve (0,_fbc ,_gac ,_fbc ,_ag ,_fea ,_ag ,0));_dae =_dae .AppendCurve (NewCubicBezierCurve (_ag ,0,_ag ,-_fea ,_gac ,-_fbc ,0,-_fbc ));_dae =_dae .AppendCurve (NewCubicBezierCurve (0,-_fbc ,-_gac ,-_fbc ,-_ag ,-_fea ,-_ag ,0));_dae =_dae .Offset (_ag ,_fbc );if _cgd .BorderEnabled {_dae =_dae .Offset (_cgd .BorderWidth /2,_cgd .BorderWidth /2);};if _cgd .X !=0||_cgd .Y !=0{_dae =_dae .Offset (_cgd .X ,_cgd .Y );};_fa :=_b .NewContentCreator ();_fa .Add_q ();if _cgd .FillEnabled {_fa .Add_rg (_cgd .FillColor .R (),_cgd .FillColor .G (),_cgd .FillColor .B ());};if _cgd .BorderEnabled {_fa .Add_RG (_cgd .BorderColor .R (),_cgd .BorderColor .G (),_cgd .BorderColor .B ());_fa .Add_w (_cgd .BorderWidth );};if len (gsName )> 1{_fa .Add_gs (_da .PdfObjectName (gsName ));};DrawBezierPathWithCreator (_dae ,_fa );_fa .Add_h ();if _cgd .FillEnabled &&_cgd .BorderEnabled {_fa .Add_B ();}else if _cgd .FillEnabled {_fa .Add_f ();}else if _cgd .BorderEnabled {_fa .Add_S ();};_fa .Add_Q ();_bgg :=_dae .GetBoundingBox ();if _cgd .BorderEnabled {_bgg .Height +=_cgd .BorderWidth ;_bgg .Width +=_cgd .BorderWidth ;_bgg .X -=_cgd .BorderWidth /2;_bgg .Y -=_cgd .BorderWidth /2;};return _fa .Bytes (),_bgg .ToPdfRectangle (),nil ;};

// FlipX flips the sign of the Dx component of the vector.
func (_cdd Vector )FlipX ()Vector {_cdd .Dx =-_cdd .Dx ;return _cdd };

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_beb PolyBezierCurve )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){if _beb .BorderColor ==nil {_beb .BorderColor =_e .NewPdfColorDeviceRGB (0,0,0);};_cee :=NewCubicBezierPath ();for _ ,_bgc :=range _beb .Curves {_cee =_cee .AppendCurve (_bgc );};_ggf :=_b .NewContentCreator ();_ggf .Add_q ();_beb .FillEnabled =_beb .FillEnabled &&_beb .FillColor !=nil ;if _beb .FillEnabled {_ggf .Add_rg (_beb .FillColor .R (),_beb .FillColor .G (),_beb .FillColor .B ());};_ggf .Add_RG (_beb .BorderColor .R (),_beb .BorderColor .G (),_beb .BorderColor .B ());_ggf .Add_w (_beb .BorderWidth );if len (gsName )> 1{_ggf .Add_gs (_da .PdfObjectName (gsName ));};for _ ,_afe :=range _cee .Curves {_ggf .Add_m (_afe .P0 .X ,_afe .P0 .Y );_ggf .Add_c (_afe .P1 .X ,_afe .P1 .Y ,_afe .P2 .X ,_afe .P2 .Y ,_afe .P3 .X ,_afe .P3 .Y );};if _beb .FillEnabled {_ggf .Add_h ();_ggf .Add_B ();}else {_ggf .Add_S ();};_ggf .Add_Q ();return _ggf .Bytes (),_cee .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_e .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// Add adds the specified vector to the current one and returns the result.
func (_caeg Vector )Add (other Vector )Vector {_caeg .Dx +=other .Dx ;_caeg .Dy +=other .Dy ;return _caeg ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_dc Vector )GetPolarAngle ()float64 {return _d .Atan2 (_dc .Dy ,_dc .Dx )};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_fd :=CubicBezierCurve {};_fd .P0 =NewPoint (x0 ,y0 );_fd .P1 =NewPoint (x1 ,y1 );_fd .P2 =NewPoint (x2 ,y2 );_fd .P3 =NewPoint (x3 ,y3 );return _fd ;};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_ece Polygon )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_dde :=_b .NewContentCreator ();_dde .Add_q ();_ece .FillEnabled =_ece .FillEnabled &&_ece .FillColor !=nil ;if _ece .FillEnabled {_dde .Add_rg (_ece .FillColor .R (),_ece .FillColor .G (),_ece .FillColor .B ());};_ece .BorderEnabled =_ece .BorderEnabled &&_ece .BorderColor !=nil ;if _ece .BorderEnabled {_dde .Add_RG (_ece .BorderColor .R (),_ece .BorderColor .G (),_ece .BorderColor .B ());_dde .Add_w (_ece .BorderWidth );};if len (gsName )> 1{_dde .Add_gs (_da .PdfObjectName (gsName ));};_cgf :=NewPath ();for _ ,_ede :=range _ece .Points {for _fc ,_bc :=range _ede {_cgf =_cgf .AppendPoint (_bc );if _fc ==0{_dde .Add_m (_bc .X ,_bc .Y );}else {_dde .Add_l (_bc .X ,_bc .Y );};};_dde .Add_h ();};if _ece .FillEnabled &&_ece .BorderEnabled {_dde .Add_B ();}else if _ece .FillEnabled {_dde .Add_f ();}else if _ece .BorderEnabled {_dde .Add_S ();};_dde .Add_Q ();return _dde .Bytes (),_cgf .GetBoundingBox ().ToPdfRectangle (),nil ;};

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_eb Path )GetPointNumber (number int )Point {if number < 1||number > len (_eb .Points ){return Point {};};return _eb .Points [number -1];};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_b .ContentCreator ){for _cga ,_fgd :=range bpath .Curves {if _cga ==0{creator .Add_m (_fgd .P0 .X ,_fgd .P0 .Y );};creator .Add_c (_fgd .P1 .X ,_fgd .P1 .Y ,_fgd .P2 .X ,_fgd .P2 .Y ,_fgd .P3 .X ,_fgd .P3 .Y );};};

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_ec CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_ec .P0 .X +=offX ;_ec .P1 .X +=offX ;_ec .P2 .X +=offX ;_ec .P3 .X +=offX ;_ec .P0 .Y +=offY ;_ec .P1 .Y +=offY ;_ec .P2 .Y +=offY ;_ec .P3 .Y +=offY ;return _ec ;};

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// Flip changes the sign of the vector: -vector.
func (_eee Vector )Flip ()Vector {_ccg :=_eee .Magnitude ();_gge :=_eee .GetPolarAngle ();_eee .Dx =_ccg *_d .Cos (_gge +_d .Pi );_eee .Dy =_ccg *_d .Sin (_gge +_d .Pi );return _eee ;};

// Scale scales the vector by the specified factor.
func (_gcb Vector )Scale (factor float64 )Vector {_dgd :=_gcb .Magnitude ();_cfa :=_gcb .GetPolarAngle ();_gcb .Dx =factor *_dgd *_d .Cos (_cfa );_gcb .Dy =factor *_dgd *_d .Sin (_cfa );return _gcb ;};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_e .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;);

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_geg Polyline )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){if _geg .LineColor ==nil {_geg .LineColor =_e .NewPdfColorDeviceRGB (0,0,0);};_gegg :=NewPath ();for _ ,_cae :=range _geg .Points {_gegg =_gegg .AppendPoint (_cae );};_cge :=_b .NewContentCreator ();_cge .Add_q ();_cge .Add_RG (_geg .LineColor .R (),_geg .LineColor .G (),_geg .LineColor .B ());_cge .Add_w (_geg .LineWidth );if len (gsName )> 1{_cge .Add_gs (_da .PdfObjectName (gsName ));};DrawPathWithCreator (_gegg ,_cge );_cge .Add_S ();_cge .Add_Q ();return _cge .Bytes (),_gegg .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor *_e .PdfColorDeviceRGB ;BorderEnabled bool ;BorderColor *_e .PdfColorDeviceRGB ;BorderWidth float64 ;};

// Offset shifts the Bezier path with the specified offsets.
func (_gc CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _cd ,_ca :=range _gc .Curves {_gc .Curves [_cd ]=_ca .AddOffsetXY (offX ,offY );};return _gc ;};

// Offset shifts the path with the specified offsets.
func (_af Path )Offset (offX ,offY float64 )Path {for _eg ,_ege :=range _af .Points {_af .Points [_eg ]=_ege .Add (offX ,offY );};return _af ;};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// GetBoundingBox returns the bounding box of the path.
func (_ga Path )GetBoundingBox ()BoundingBox {_fe :=BoundingBox {};_aa :=0.0;_bbd :=0.0;_eaba :=0.0;_abd :=0.0;for _gad ,_eaa :=range _ga .Points {if _gad ==0{_aa =_eaa .X ;_bbd =_eaa .X ;_eaba =_eaa .Y ;_abd =_eaa .Y ;continue ;};if _eaa .X < _aa {_aa =_eaa .X ;};if _eaa .X > _bbd {_bbd =_eaa .X ;};if _eaa .Y < _eaba {_eaba =_eaa .Y ;};if _eaa .Y > _abd {_abd =_eaa .Y ;};};_fe .X =_aa ;_fe .Y =_eaba ;_fe .Width =_bbd -_aa ;_fe .Height =_abd -_eaba ;return _fe ;};

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_egf Rectangle )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_gb :=NewPath ();_gb =_gb .AppendPoint (NewPoint (0,0));_gb =_gb .AppendPoint (NewPoint (0,_egf .Height ));_gb =_gb .AppendPoint (NewPoint (_egf .Width ,_egf .Height ));_gb =_gb .AppendPoint (NewPoint (_egf .Width ,0));_gb =_gb .AppendPoint (NewPoint (0,0));if _egf .X !=0||_egf .Y !=0{_gb =_gb .Offset (_egf .X ,_egf .Y );};_gce :=_b .NewContentCreator ();_gce .Add_q ();if _egf .FillEnabled {_gce .Add_rg (_egf .FillColor .R (),_egf .FillColor .G (),_egf .FillColor .B ());};if _egf .BorderEnabled {_gce .Add_RG (_egf .BorderColor .R (),_egf .BorderColor .G (),_egf .BorderColor .B ());_gce .Add_w (_egf .BorderWidth );};if len (gsName )> 1{_gce .Add_gs (_da .PdfObjectName (gsName ));};DrawPathWithCreator (_gb ,_gce );_gce .Add_h ();if _egf .FillEnabled &&_egf .BorderEnabled {_gce .Add_B ();}else if _egf .FillEnabled {_gce .Add_f ();}else if _egf .BorderEnabled {_gce .Add_S ();};_gce .Add_Q ();return _gce .Bytes (),_gb .GetBoundingBox ().ToPdfRectangle (),nil ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// FlipY flips the sign of the Dy component of the vector.
func (_ebeg Vector )FlipY ()Vector {_ebeg .Dy =-_ebeg .Dy ;return _ebeg };

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_def :=CubicBezierPath {};_def .Curves =[]CubicBezierCurve {};return _def ;};