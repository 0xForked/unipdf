//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_dg "fmt";_a "github.com/unidoc/unipdf/v3/contentstream";_b "github.com/unidoc/unipdf/v3/core";_f "github.com/unidoc/unipdf/v3/internal/transform";_gb "github.com/unidoc/unipdf/v3/model";_d "math";);

// Draw draws the composite curve polygon. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array
// and the bounding box of the polygon.
func (_bca CurvePolygon )Draw (gsName string )([]byte ,*_gb .PdfRectangle ,error ){_ecc :=_a .NewContentCreator ();_ecc .Add_q ();_bca .FillEnabled =_bca .FillEnabled &&_bca .FillColor !=nil ;if _bca .FillEnabled {_ecc .SetNonStrokingColor (_bca .FillColor );
};_bca .BorderEnabled =_bca .BorderEnabled &&_bca .BorderColor !=nil ;if _bca .BorderEnabled {_ecc .SetStrokingColor (_bca .BorderColor );_ecc .Add_w (_bca .BorderWidth );};if len (gsName )> 1{_ecc .Add_gs (_b .PdfObjectName (gsName ));};_cdg :=NewCubicBezierPath ();
for _ ,_aeg :=range _bca .Rings {for _cbb ,_cad :=range _aeg {if _cbb ==0{_ecc .Add_m (_cad .P0 .X ,_cad .P0 .Y );}else {_ecc .Add_l (_cad .P0 .X ,_cad .P0 .Y );};_ecc .Add_c (_cad .P1 .X ,_cad .P1 .Y ,_cad .P2 .X ,_cad .P2 .Y ,_cad .P3 .X ,_cad .P3 .Y );
_cdg =_cdg .AppendCurve (_cad );};_ecc .Add_h ();};if _bca .FillEnabled &&_bca .BorderEnabled {_ecc .Add_B ();}else if _bca .FillEnabled {_ecc .Add_f ();}else if _bca .BorderEnabled {_ecc .Add_S ();};_ecc .Add_Q ();return _ecc .Bytes (),_cdg .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// AppendCurve appends the specified Bezier curve to the path.
func (_cd CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_cd .Curves =append (_cd .Curves ,curve );return _cd ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_fa :=CubicBezierCurve {};_fa .P0 =NewPoint (x0 ,y0 );_fa .P1 =NewPoint (x1 ,y1 );_fa .P2 =NewPoint (x2 ,y2 );_fa .P3 =NewPoint (x3 ,y3 );return _fa ;};

// GetBoundingBox returns the bounding box of the path.
func (_dag Path )GetBoundingBox ()BoundingBox {_fb :=BoundingBox {};_eb :=0.0;_ag :=0.0;_cg :=0.0;_aea :=0.0;for _ca ,_ff :=range _dag .Points {if _ca ==0{_eb =_ff .X ;_ag =_ff .X ;_cg =_ff .Y ;_aea =_ff .Y ;continue ;};if _ff .X < _eb {_eb =_ff .X ;};
if _ff .X > _ag {_ag =_ff .X ;};if _ff .Y < _cg {_cg =_ff .Y ;};if _ff .Y > _aea {_aea =_ff .Y ;};};_fb .X =_eb ;_fb .Y =_cg ;_fb .Width =_ag -_eb ;_fb .Height =_aea -_cg ;return _fb ;};

// AddVector adds vector to a point.
func (_cb Point )AddVector (v Vector )Point {_cb .X +=v .Dx ;_cb .Y +=v .Dy ;return _cb };

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_ebf :=Vector {};_ebf .Dx =length *_d .Cos (theta );_ebf .Dy =length *_d .Sin (theta );return _ebf ;};

// Copy returns a clone of the Bezier path.
func (_gd CubicBezierPath )Copy ()CubicBezierPath {_cdd :=CubicBezierPath {};_cdd .Curves =append (_cdd .Curves ,_gd .Curves ...);return _cdd ;};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_acd Circle )Draw (gsName string )([]byte ,*_gb .PdfRectangle ,error ){_gfa :=_acd .Width /2;_agg :=_acd .Height /2;if _acd .BorderEnabled {_gfa -=_acd .BorderWidth /2;_agg -=_acd .BorderWidth /2;};_cf :=0.551784;_eba :=_gfa *_cf ;_dac :=_agg *_cf ;
_gc :=NewCubicBezierPath ();_gc =_gc .AppendCurve (NewCubicBezierCurve (-_gfa ,0,-_gfa ,_dac ,-_eba ,_agg ,0,_agg ));_gc =_gc .AppendCurve (NewCubicBezierCurve (0,_agg ,_eba ,_agg ,_gfa ,_dac ,_gfa ,0));_gc =_gc .AppendCurve (NewCubicBezierCurve (_gfa ,0,_gfa ,-_dac ,_eba ,-_agg ,0,-_agg ));
_gc =_gc .AppendCurve (NewCubicBezierCurve (0,-_agg ,-_eba ,-_agg ,-_gfa ,-_dac ,-_gfa ,0));_gc =_gc .Offset (_gfa ,_agg );if _acd .BorderEnabled {_gc =_gc .Offset (_acd .BorderWidth /2,_acd .BorderWidth /2);};if _acd .X !=0||_acd .Y !=0{_gc =_gc .Offset (_acd .X ,_acd .Y );
};_cc :=_a .NewContentCreator ();_cc .Add_q ();if _acd .FillEnabled {_cc .SetNonStrokingColor (_acd .FillColor );};if _acd .BorderEnabled {_cc .SetStrokingColor (_acd .BorderColor );_cc .Add_w (_acd .BorderWidth );};if len (gsName )> 1{_cc .Add_gs (_b .PdfObjectName (gsName ));
};DrawBezierPathWithCreator (_gc ,_cc );_cc .Add_h ();if _acd .FillEnabled &&_acd .BorderEnabled {_cc .Add_B ();}else if _acd .FillEnabled {_cc .Add_f ();}else if _acd .BorderEnabled {_cc .Add_S ();};_cc .Add_Q ();_ec :=_gc .GetBoundingBox ();if _acd .BorderEnabled {_ec .Height +=_acd .BorderWidth ;
_ec .Width +=_acd .BorderWidth ;_ec .X -=_acd .BorderWidth /2;_ec .Y -=_acd .BorderWidth /2;};return _cc .Bytes (),_ec .ToPdfRectangle (),nil ;};

// GetBounds returns the bounding box of the Bezier curve.
func (_db CubicBezierCurve )GetBounds ()_gb .PdfRectangle {_ad :=_db .P0 .X ;_c :=_db .P0 .X ;_ba :=_db .P0 .Y ;_e :=_db .P0 .Y ;for _dc :=0.0;_dc <=1.0;_dc +=0.001{Rx :=_db .P0 .X *_d .Pow (1-_dc ,3)+_db .P1 .X *3*_dc *_d .Pow (1-_dc ,2)+_db .P2 .X *3*_d .Pow (_dc ,2)*(1-_dc )+_db .P3 .X *_d .Pow (_dc ,3);
Ry :=_db .P0 .Y *_d .Pow (1-_dc ,3)+_db .P1 .Y *3*_dc *_d .Pow (1-_dc ,2)+_db .P2 .Y *3*_d .Pow (_dc ,2)*(1-_dc )+_db .P3 .Y *_d .Pow (_dc ,3);if Rx < _ad {_ad =Rx ;};if Rx > _c {_c =Rx ;};if Ry < _ba {_ba =Ry ;};if Ry > _e {_e =Ry ;};};_fc :=_gb .PdfRectangle {};
_fc .Llx =_ad ;_fc .Lly =_ba ;_fc .Urx =_c ;_fc .Ury =_e ;return _fc ;};

// Length returns the number of points in the path.
func (_dce Path )Length ()int {return len (_dce .Points )};

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_ed Polygon )Draw (gsName string )([]byte ,*_gb .PdfRectangle ,error ){_adf :=_a .NewContentCreator ();_adf .Add_q ();_ed .FillEnabled =_ed .FillEnabled &&_ed .FillColor !=nil ;if _ed .FillEnabled {_adf .SetNonStrokingColor (_ed .FillColor );};_ed .BorderEnabled =_ed .BorderEnabled &&_ed .BorderColor !=nil ;
if _ed .BorderEnabled {_adf .SetStrokingColor (_ed .BorderColor );_adf .Add_w (_ed .BorderWidth );};if len (gsName )> 1{_adf .Add_gs (_b .PdfObjectName (gsName ));};_fff :=NewPath ();for _ ,_ef :=range _ed .Points {for _gfg ,_bae :=range _ef {_fff =_fff .AppendPoint (_bae );
if _gfg ==0{_adf .Add_m (_bae .X ,_bae .Y );}else {_adf .Add_l (_bae .X ,_bae .Y );};};_adf .Add_h ();};if _ed .FillEnabled &&_ed .BorderEnabled {_adf .Add_B ();}else if _ed .FillEnabled {_adf .Add_f ();}else if _ed .BorderEnabled {_adf .Add_S ();};_adf .Add_Q ();
return _adf .Bytes (),_fff .GetBoundingBox ().ToPdfRectangle (),nil ;};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_a .ContentCreator ){for _deb ,_fbcb :=range path .Points {if _deb ==0{creator .Add_m (_fbcb .X ,_fbcb .Y );}else {creator .Add_l (_fbcb .X ,_fbcb .Y );};};};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _gb .PdfColor ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;DashArray []int64 ;DashPhase int64 ;};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;);

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_bbb Point )Add (dx ,dy float64 )Point {_bbb .X +=dx ;_bbb .Y +=dy ;return _bbb };

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_fba Rectangle )ToPdfRectangle ()*_gb .PdfRectangle {return &_gb .PdfRectangle {Llx :_fba .X ,Lly :_fba .Y ,Urx :_fba .X +_fba .Width ,Ury :_fba .Y +_fba .Height };};

// Add adds the specified vector to the current one and returns the result.
func (_aca Vector )Add (other Vector )Vector {_aca .Dx +=other .Dx ;_aca .Dy +=other .Dy ;return _aca };

// Magnitude returns the magnitude of the vector.
func (_bbgd Vector )Magnitude ()float64 {return _d .Sqrt (_d .Pow (_bbgd .Dx ,2.0)+_d .Pow (_bbgd .Dy ,2.0));};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_be Path )RemovePoint (number int )Path {if number < 1||number > len (_be .Points ){return _be ;};_dbe :=number -1;_be .Points =append (_be .Points [:_dbe ],_be .Points [_dbe +1:]...);return _be ;};

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor _gb .PdfColor ;BorderEnabled bool ;BorderColor _gb .PdfColor ;BorderWidth float64 ;};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _gb .PdfColor ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_eac Line )Draw (gsName string )([]byte ,*_gb .PdfRectangle ,error ){_dcea ,_eda :=_eac .X1 ,_eac .X2 ;_gbb ,_faf :=_eac .Y1 ,_eac .Y2 ;_cfb :=_faf -_gbb ;_fcc :=_eda -_dcea ;_fe :=_d .Atan2 (_cfb ,_fcc );L :=_d .Sqrt (_d .Pow (_fcc ,2.0)+_d .Pow (_cfb ,2.0));
_gae :=_eac .LineWidth ;_bg :=_d .Pi ;_ccd :=1.0;if _fcc < 0{_ccd *=-1.0;};if _cfb < 0{_ccd *=-1.0;};VsX :=_ccd *(-_gae /2*_d .Cos (_fe +_bg /2));VsY :=_ccd *(-_gae /2*_d .Sin (_fe +_bg /2)+_gae *_d .Sin (_fe +_bg /2));V1X :=VsX +_gae /2*_d .Cos (_fe +_bg /2);
V1Y :=VsY +_gae /2*_d .Sin (_fe +_bg /2);V2X :=VsX +_gae /2*_d .Cos (_fe +_bg /2)+L *_d .Cos (_fe );V2Y :=VsY +_gae /2*_d .Sin (_fe +_bg /2)+L *_d .Sin (_fe );V3X :=VsX +_gae /2*_d .Cos (_fe +_bg /2)+L *_d .Cos (_fe )+_gae *_d .Cos (_fe -_bg /2);V3Y :=VsY +_gae /2*_d .Sin (_fe +_bg /2)+L *_d .Sin (_fe )+_gae *_d .Sin (_fe -_bg /2);
V4X :=VsX +_gae /2*_d .Cos (_fe -_bg /2);V4Y :=VsY +_gae /2*_d .Sin (_fe -_bg /2);_bgd :=NewPath ();_bgd =_bgd .AppendPoint (NewPoint (V1X ,V1Y ));_bgd =_bgd .AppendPoint (NewPoint (V2X ,V2Y ));_bgd =_bgd .AppendPoint (NewPoint (V3X ,V3Y ));_bgd =_bgd .AppendPoint (NewPoint (V4X ,V4Y ));
_bfd :=_eac .LineEndingStyle1 ;_aga :=_eac .LineEndingStyle2 ;_gaf :=3*_gae ;_gce :=3*_gae ;_ccc :=(_gce -_gae )/2;if _aga ==LineEndingStyleArrow {_ffg :=_bgd .GetPointNumber (2);_eea :=NewVectorPolar (_gaf ,_fe +_bg );_bac :=_ffg .AddVector (_eea );_gba :=NewVectorPolar (_gce /2,_fe +_bg /2);
_ebd :=NewVectorPolar (_gaf ,_fe );_gbf :=NewVectorPolar (_ccc ,_fe +_bg /2);_ada :=_bac .AddVector (_gbf );_cab :=_ebd .Add (_gba .Flip ());_dbb :=_ada .AddVector (_cab );_begf :=_gba .Scale (2).Flip ().Add (_cab .Flip ());_cdfc :=_dbb .AddVector (_begf );
_ccg :=_bac .AddVector (NewVectorPolar (_gae ,_fe -_bg /2));_gca :=NewPath ();_gca =_gca .AppendPoint (_bgd .GetPointNumber (1));_gca =_gca .AppendPoint (_bac );_gca =_gca .AppendPoint (_ada );_gca =_gca .AppendPoint (_dbb );_gca =_gca .AppendPoint (_cdfc );
_gca =_gca .AppendPoint (_ccg );_gca =_gca .AppendPoint (_bgd .GetPointNumber (4));_bgd =_gca ;};if _bfd ==LineEndingStyleArrow {_bfc :=_bgd .GetPointNumber (1);_agb :=_bgd .GetPointNumber (_bgd .Length ());_gaef :=NewVectorPolar (_gae /2,_fe +_bg +_bg /2);
_gbg :=_bfc .AddVector (_gaef );_bgb :=NewVectorPolar (_gaf ,_fe ).Add (NewVectorPolar (_gce /2,_fe +_bg /2));_bbg :=_gbg .AddVector (_bgb );_bec :=NewVectorPolar (_ccc ,_fe -_bg /2);_dgg :=_bbg .AddVector (_bec );_ccb :=NewVectorPolar (_gaf ,_fe );_dfd :=_agb .AddVector (_ccb );
_eg :=NewVectorPolar (_ccc ,_fe +_bg +_bg /2);_fd :=_dfd .AddVector (_eg );_egc :=_gbg ;_feb :=NewPath ();_feb =_feb .AppendPoint (_gbg );_feb =_feb .AppendPoint (_bbg );_feb =_feb .AppendPoint (_dgg );for _ ,_cdgc :=range _bgd .Points [1:len (_bgd .Points )-1]{_feb =_feb .AppendPoint (_cdgc );
};_feb =_feb .AppendPoint (_dfd );_feb =_feb .AppendPoint (_fd );_feb =_feb .AppendPoint (_egc );_bgd =_feb ;};_dcba :=_a .NewContentCreator ();_dcba .Add_q ().SetNonStrokingColor (_eac .LineColor );if len (gsName )> 1{_dcba .Add_gs (_b .PdfObjectName (gsName ));
};_bgd =_bgd .Offset (_eac .X1 ,_eac .Y1 );_fbc :=_bgd .GetBoundingBox ();DrawPathWithCreator (_bgd ,_dcba );if _eac .LineStyle ==LineStyleDashed {_dcba .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();}else {_dcba .Add_f ().Add_Q ();};return _dcba .Bytes (),_fbc .ToPdfRectangle (),nil ;
};

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_deg BasicLine )Draw (gsName string )([]byte ,*_gb .PdfRectangle ,error ){_cgf :=NewPath ();_cgf =_cgf .AppendPoint (NewPoint (_deg .X1 ,_deg .Y1 ));_cgf =_cgf .AppendPoint (NewPoint (_deg .X2 ,_deg .Y2 ));_ffa :=_a .NewContentCreator ();_ffa .Add_q ().Add_w (_deg .LineWidth ).SetStrokingColor (_deg .LineColor );
if _deg .LineStyle ==LineStyleDashed {if _deg .DashArray ==nil {_deg .DashArray =[]int64 {1,1};};_ffa .Add_d (_deg .DashArray ,_deg .DashPhase );};if len (gsName )> 1{_ffa .Add_gs (_b .PdfObjectName (gsName ));};DrawPathWithCreator (_cgf ,_ffa );_ffa .Add_S ().Add_Q ();
return _ffa .Bytes (),_cgf .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor _gb .PdfColor ;LineWidth float64 ;};

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_ce Path )GetPointNumber (number int )Point {if number < 1||number > len (_ce .Points ){return Point {};};return _ce .Points [number -1];};

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// Offset shifts the path with the specified offsets.
func (_afa Path )Offset (offX ,offY float64 )Path {for _bf ,_ga :=range _afa .Points {_afa .Points [_bf ]=_ga .Add (offX ,offY );};return _afa ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_geb Vector )GetPolarAngle ()float64 {return _d .Atan2 (_geb .Dy ,_geb .Dx )};

// Flip changes the sign of the vector: -vector.
func (_cfba Vector )Flip ()Vector {_bbbc :=_cfba .Magnitude ();_fgf :=_cfba .GetPolarAngle ();_cfba .Dx =_bbbc *_d .Cos (_fgf +_d .Pi );_cfba .Dy =_bbbc *_d .Sin (_fgf +_d .Pi );return _cfba ;};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_gdc Point )Rotate (theta float64 )Point {_ea :=_f .NewPoint (_gdc .X ,_gdc .Y ).Rotate (theta );return NewPoint (_ea .X ,_ea .Y );};

// FlipY flips the sign of the Dy component of the vector.
func (_dge Vector )FlipY ()Vector {_dge .Dy =-_dge .Dy ;return _dge };

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_cea BoundingBox )ToPdfRectangle ()*_gb .PdfRectangle {return &_gb .PdfRectangle {Llx :_cea .X ,Lly :_cea .Y ,Urx :_cea .X +_cea .Width ,Ury :_cea .Y +_cea .Height };};func (_gac Point )String ()string {return _dg .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_gac .X ,_gac .Y );
};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_cca :=Vector {};_cca .Dx =b .X -a .X ;_cca .Dy =b .Y -a .Y ;return _cca ;};

// Offset shifts the Bezier path with the specified offsets.
func (_gbc CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _ee ,_bc :=range _gbc .Curves {_gbc .Curves [_ee ]=_bc .AddOffsetXY (offX ,offY );};return _gbc ;};

// CurvePolygon is a multi-point shape with rings containing curves that can be
// drawn to a PDF content stream.
type CurvePolygon struct{Rings [][]CubicBezierCurve ;FillEnabled bool ;FillColor _gb .PdfColor ;BorderEnabled bool ;BorderColor _gb .PdfColor ;BorderWidth float64 ;};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// AppendPoint adds the specified point to the path.
func (_da Path )AppendPoint (point Point )Path {_da .Points =append (_da .Points ,point );return _da };

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// Draw draws the rectangle. A graphics state can be specified for
// setting additional properties (e.g. opacity). Otherwise pass an empty string
// for the `gsName` parameter. The method returns the content stream as a byte
// array and the bounding box of the shape.
func (_beg Rectangle )Draw (gsName string )([]byte ,*_gb .PdfRectangle ,error ){_dceb :=_a .NewContentCreator ();_dceb .Add_q ();if _beg .FillEnabled {_dceb .SetNonStrokingColor (_beg .FillColor );};if _beg .BorderEnabled {_dceb .SetStrokingColor (_beg .BorderColor );
_dceb .Add_w (_beg .BorderWidth );};if len (gsName )> 1{_dceb .Add_gs (_b .PdfObjectName (gsName ));};var (_de ,_df =_beg .X ,_beg .Y ;_cce ,_cdfe =_beg .Width ,_beg .Height ;_aa =_d .Abs (_beg .BorderRadiusTopLeft );_afc =_d .Abs (_beg .BorderRadiusTopRight );
_cdga =_d .Abs (_beg .BorderRadiusBottomLeft );_bcg =_d .Abs (_beg .BorderRadiusBottomRight );_cde =0.4477;);_bbd :=Path {Points :[]Point {{X :_de +_cce -_bcg ,Y :_df },{X :_de +_cce ,Y :_df +_cdfe -_afc },{X :_de +_aa ,Y :_df +_cdfe },{X :_de ,Y :_df +_cdga }}};
_dea :=[][7]float64 {{_bcg ,_de +_cce -_bcg *_cde ,_df ,_de +_cce ,_df +_bcg *_cde ,_de +_cce ,_df +_bcg },{_afc ,_de +_cce ,_df +_cdfe -_afc *_cde ,_de +_cce -_afc *_cde ,_df +_cdfe ,_de +_cce -_afc ,_df +_cdfe },{_aa ,_de +_aa *_cde ,_df +_cdfe ,_de ,_df +_cdfe -_aa *_cde ,_de ,_df +_cdfe -_aa },{_cdga ,_de ,_df +_cdga *_cde ,_de +_cdga *_cde ,_df ,_de +_cdga ,_df }};
_dceb .Add_m (_de +_cdga ,_df );for _dba :=0;_dba < 4;_dba ++{_dgb :=_bbd .Points [_dba ];_dceb .Add_l (_dgb .X ,_dgb .Y );_cgd :=_dea [_dba ];if _baa :=_cgd [0];_baa !=0{_dceb .Add_c (_cgd [1],_cgd [2],_cgd [3],_cgd [4],_cgd [5],_cgd [6]);};};_dceb .Add_h ();
if _beg .FillEnabled &&_beg .BorderEnabled {_dceb .Add_B ();}else if _beg .FillEnabled {_dceb .Add_f ();}else if _beg .BorderEnabled {_dceb .Add_S ();};_dceb .Add_Q ();return _dceb .Bytes (),_bbd .GetBoundingBox ().ToPdfRectangle (),nil ;};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_af CubicBezierPath )GetBoundingBox ()Rectangle {_gf :=Rectangle {};_ac :=0.0;_aee :=0.0;_fae :=0.0;_baf :=0.0;for _cdf ,_dcb :=range _af .Curves {_ge :=_dcb .GetBounds ();if _cdf ==0{_ac =_ge .Llx ;_aee =_ge .Urx ;_fae =_ge .Lly ;_baf =_ge .Ury ;
continue ;};if _ge .Llx < _ac {_ac =_ge .Llx ;};if _ge .Urx > _aee {_aee =_ge .Urx ;};if _ge .Lly < _fae {_fae =_ge .Lly ;};if _ge .Ury > _baf {_baf =_ge .Ury ;};};_gf .X =_ac ;_gf .Y =_fae ;_gf .Width =_aee -_ac ;_gf .Height =_baf -_fae ;return _gf ;};


// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _gb .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _gb .PdfColor ;Opacity float64 ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// FlipX flips the sign of the Dx component of the vector.
func (_dagc Vector )FlipX ()Vector {_dagc .Dx =-_dagc .Dx ;return _dagc };

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_bb CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_bb .P0 .X +=offX ;_bb .P1 .X +=offX ;_bb .P2 .X +=offX ;_bb .P3 .X +=offX ;_bb .P0 .Y +=offY ;_bb .P1 .Y +=offY ;_bb .P2 .Y +=offY ;_bb .P3 .Y +=offY ;return _bb ;};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_fde :=Vector {};_fde .Dx =dx ;_fde .Dy =dy ;return _fde };

// Copy returns a clone of the path.
func (_fag Path )Copy ()Path {_aeef :=Path {};_aeef .Points =append (_aeef .Points ,_fag .Points ...);return _aeef ;};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{

// Position and size properties.
X float64 ;Y float64 ;Width float64 ;Height float64 ;

// Fill properties.
FillEnabled bool ;FillColor _gb .PdfColor ;

// Border properties.
BorderEnabled bool ;BorderColor _gb .PdfColor ;BorderWidth float64 ;BorderRadiusTopLeft float64 ;BorderRadiusTopRight float64 ;BorderRadiusBottomLeft float64 ;BorderRadiusBottomRight float64 ;

// Shape opacity (0-1 interval).
Opacity float64 ;};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor _gb .PdfColor ;FillEnabled bool ;FillColor _gb .PdfColor ;};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_dfdf Polyline )Draw (gsName string )([]byte ,*_gb .PdfRectangle ,error ){if _dfdf .LineColor ==nil {_dfdf .LineColor =_gb .NewPdfColorDeviceRGB (0,0,0);};_fab :=NewPath ();for _ ,_ab :=range _dfdf .Points {_fab =_fab .AppendPoint (_ab );};_fg :=_a .NewContentCreator ();
_fg .Add_q ().SetStrokingColor (_dfdf .LineColor ).Add_w (_dfdf .LineWidth );if len (gsName )> 1{_fg .Add_gs (_b .PdfObjectName (gsName ));};DrawPathWithCreator (_fab ,_fg );_fg .Add_S ();_fg .Add_Q ();return _fg .Bytes (),_fab .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_gbca PolyBezierCurve )Draw (gsName string )([]byte ,*_gb .PdfRectangle ,error ){if _gbca .BorderColor ==nil {_gbca .BorderColor =_gb .NewPdfColorDeviceRGB (0,0,0);};_cfe :=NewCubicBezierPath ();for _ ,_gfac :=range _gbca .Curves {_cfe =_cfe .AppendCurve (_gfac );
};_gg :=_a .NewContentCreator ();_gg .Add_q ();_gbca .FillEnabled =_gbca .FillEnabled &&_gbca .FillColor !=nil ;if _gbca .FillEnabled {_gg .SetNonStrokingColor (_gbca .FillColor );};_gg .SetStrokingColor (_gbca .BorderColor );_gg .Add_w (_gbca .BorderWidth );
if len (gsName )> 1{_gg .Add_gs (_b .PdfObjectName (gsName ));};for _dcbe ,_gga :=range _cfe .Curves {if _dcbe ==0{_gg .Add_m (_gga .P0 .X ,_gga .P0 .Y );}else {_gg .Add_l (_gga .P0 .X ,_gga .P0 .Y );};_gg .Add_c (_gga .P1 .X ,_gga .P1 .Y ,_gga .P2 .X ,_gga .P2 .Y ,_gga .P3 .X ,_gga .P3 .Y );
};if _gbca .FillEnabled {_gg .Add_h ();_gg .Add_B ();}else {_gg .Add_S ();};_gg .Add_Q ();return _gg .Bytes (),_cfe .GetBoundingBox ().ToPdfRectangle (),nil ;};

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_a .ContentCreator ){for _dgbf ,_egf :=range bpath .Curves {if _dgbf ==0{creator .Add_m (_egf .P0 .X ,_egf .P0 .Y );};creator .Add_c (_egf .P1 .X ,_egf .P1 .Y ,_egf .P2 .X ,_egf .P2 .Y ,_egf .P3 .X ,_egf .P3 .Y );
};};const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;);

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_ae :=CubicBezierPath {};_ae .Curves =[]CubicBezierCurve {};return _ae ;};

// Scale scales the vector by the specified factor.
func (_ece Vector )Scale (factor float64 )Vector {_bce :=_ece .Magnitude ();_ebe :=_ece .GetPolarAngle ();_ece .Dx =factor *_bce *_d .Cos (_ebe );_ece .Dy =factor *_bce *_d .Sin (_ebe );return _ece ;};

// Rotate rotates the vector by the specified angle.
func (_dfb Vector )Rotate (phi float64 )Vector {_geg :=_dfb .Magnitude ();_fgg :=_dfb .GetPolarAngle ();return NewVectorPolar (_geg ,_fgg +phi );};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};