//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_b "fmt";_gb "github.com/unidoc/unipdf/v3/contentstream";_ff "github.com/unidoc/unipdf/v3/core";_a "github.com/unidoc/unipdf/v3/internal/transform";_fd "github.com/unidoc/unipdf/v3/model";_f "math";);

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// CurvePolygon is a multi-point shape with rings containing curves that can be
// drawn to a PDF content stream.
type CurvePolygon struct{Rings [][]CubicBezierCurve ;FillEnabled bool ;FillColor _fd .PdfColor ;BorderEnabled bool ;BorderColor _fd .PdfColor ;BorderWidth float64 ;};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _fd .PdfColor ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// Copy returns a clone of the path.
func (_fbc Path )Copy ()Path {_bfc :=Path {};_bfc .Points =append (_bfc .Points ,_fbc .Points ...);return _bfc ;};

// Add adds the specified vector to the current one and returns the result.
func (_gdf Vector )Add (other Vector )Vector {_gdf .Dx +=other .Dx ;_gdf .Dy +=other .Dy ;return _gdf };

// AddVector adds vector to a point.
func (_cd Point )AddVector (v Vector )Point {_cd .X +=v .Dx ;_cd .Y +=v .Dy ;return _cd };func (_fdag Point )String ()string {return _b .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_fdag .X ,_fdag .Y );};

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor _fd .PdfColor ;BorderEnabled bool ;BorderColor _fd .PdfColor ;BorderWidth float64 ;};

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_be :=CubicBezierPath {};_be .Curves =[]CubicBezierCurve {};return _be ;};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_ae CubicBezierPath )GetBoundingBox ()Rectangle {_af :=Rectangle {};_fc :=0.0;_gee :=0.0;_bb :=0.0;_baa :=0.0;for _cg ,_cf :=range _ae .Curves {_fda :=_cf .GetBounds ();if _cg ==0{_fc =_fda .Llx ;_gee =_fda .Urx ;_bb =_fda .Lly ;_baa =_fda .Ury ;
continue ;};if _fda .Llx < _fc {_fc =_fda .Llx ;};if _fda .Urx > _gee {_gee =_fda .Urx ;};if _fda .Lly < _bb {_bb =_fda .Lly ;};if _fda .Ury > _baa {_baa =_fda .Ury ;};};_af .X =_fc ;_af .Y =_bb ;_af .Width =_gee -_fc ;_af .Height =_baa -_bb ;return _af ;
};

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_fcd Circle )Draw (gsName string )([]byte ,*_fd .PdfRectangle ,error ){_fbg :=_fcd .Width /2;_fdc :=_fcd .Height /2;if _fcd .BorderEnabled {_fbg -=_fcd .BorderWidth /2;_fdc -=_fcd .BorderWidth /2;};_cdc :=0.551784;_gd :=_fbg *_cdc ;_fa :=_fdc *_cdc ;
_bag :=NewCubicBezierPath ();_bag =_bag .AppendCurve (NewCubicBezierCurve (-_fbg ,0,-_fbg ,_fa ,-_gd ,_fdc ,0,_fdc ));_bag =_bag .AppendCurve (NewCubicBezierCurve (0,_fdc ,_gd ,_fdc ,_fbg ,_fa ,_fbg ,0));_bag =_bag .AppendCurve (NewCubicBezierCurve (_fbg ,0,_fbg ,-_fa ,_gd ,-_fdc ,0,-_fdc ));
_bag =_bag .AppendCurve (NewCubicBezierCurve (0,-_fdc ,-_gd ,-_fdc ,-_fbg ,-_fa ,-_fbg ,0));_bag =_bag .Offset (_fbg ,_fdc );if _fcd .BorderEnabled {_bag =_bag .Offset (_fcd .BorderWidth /2,_fcd .BorderWidth /2);};if _fcd .X !=0||_fcd .Y !=0{_bag =_bag .Offset (_fcd .X ,_fcd .Y );
};_ddea :=_gb .NewContentCreator ();_ddea .Add_q ();if _fcd .FillEnabled {_ddea .SetNonStrokingColor (_fcd .FillColor );};if _fcd .BorderEnabled {_ddea .SetStrokingColor (_fcd .BorderColor );_ddea .Add_w (_fcd .BorderWidth );};if len (gsName )> 1{_ddea .Add_gs (_ff .PdfObjectName (gsName ));
};DrawBezierPathWithCreator (_bag ,_ddea );_ddea .Add_h ();if _fcd .FillEnabled &&_fcd .BorderEnabled {_ddea .Add_B ();}else if _fcd .FillEnabled {_ddea .Add_f ();}else if _fcd .BorderEnabled {_ddea .Add_S ();};_ddea .Add_Q ();_cfg :=_bag .GetBoundingBox ();
if _fcd .BorderEnabled {_cfg .Height +=_fcd .BorderWidth ;_cfg .Width +=_fcd .BorderWidth ;_cfg .X -=_fcd .BorderWidth /2;_cfg .Y -=_fcd .BorderWidth /2;};return _ddea .Bytes (),_cfg .ToPdfRectangle (),nil ;};

// FlipY flips the sign of the Dy component of the vector.
func (_efd Vector )FlipY ()Vector {_efd .Dy =-_efd .Dy ;return _efd };

// Rotate rotates the vector by the specified angle.
func (_bdc Vector )Rotate (phi float64 )Vector {_ebc :=_bdc .Magnitude ();_dcg :=_bdc .GetPolarAngle ();return NewVectorPolar (_ebc ,_dcg +phi );};

// Draw draws the composite curve polygon. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array
// and the bounding box of the polygon.
func (_bce CurvePolygon )Draw (gsName string )([]byte ,*_fd .PdfRectangle ,error ){_aga :=_gb .NewContentCreator ();_aga .Add_q ();_bce .FillEnabled =_bce .FillEnabled &&_bce .FillColor !=nil ;if _bce .FillEnabled {_aga .SetNonStrokingColor (_bce .FillColor );
};_bce .BorderEnabled =_bce .BorderEnabled &&_bce .BorderColor !=nil ;if _bce .BorderEnabled {_aga .SetStrokingColor (_bce .BorderColor );_aga .Add_w (_bce .BorderWidth );};if len (gsName )> 1{_aga .Add_gs (_ff .PdfObjectName (gsName ));};_agd :=NewCubicBezierPath ();
for _ ,_agda :=range _bce .Rings {for _dga ,_ccf :=range _agda {if _dga ==0{_aga .Add_m (_ccf .P0 .X ,_ccf .P0 .Y );}else {_aga .Add_l (_ccf .P0 .X ,_ccf .P0 .Y );};_aga .Add_c (_ccf .P1 .X ,_ccf .P1 .Y ,_ccf .P2 .X ,_ccf .P2 .Y ,_ccf .P3 .X ,_ccf .P3 .Y );
_agd =_agd .AppendCurve (_ccf );};_aga .Add_h ();};if _bce .FillEnabled &&_bce .BorderEnabled {_aga .Add_B ();}else if _bce .FillEnabled {_aga .Add_f ();}else if _bce .BorderEnabled {_aga .Add_S ();};_aga .Add_Q ();return _aga .Bytes (),_agd .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor _fd .PdfColor ;FillEnabled bool ;FillColor _fd .PdfColor ;};

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_feba :=Vector {};_feba .Dx =length *_f .Cos (theta );_feba .Dy =length *_f .Sin (theta );return _feba ;};

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_gdg Rectangle )ToPdfRectangle ()*_fd .PdfRectangle {return &_fd .PdfRectangle {Llx :_gdg .X ,Lly :_gdg .Y ,Urx :_gdg .X +_gdg .Width ,Ury :_gdg .Y +_gdg .Height };};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_dg Point )Add (dx ,dy float64 )Point {_dg .X +=dx ;_dg .Y +=dy ;return _dg };

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor _fd .PdfColor ;LineWidth float64 ;};

// AppendCurve appends the specified Bezier curve to the path.
func (_ec CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_ec .Curves =append (_ec .Curves ,curve );return _ec ;};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_bbb Polyline )Draw (gsName string )([]byte ,*_fd .PdfRectangle ,error ){if _bbb .LineColor ==nil {_bbb .LineColor =_fd .NewPdfColorDeviceRGB (0,0,0);};_dee :=NewPath ();for _ ,_cge :=range _bbb .Points {_dee =_dee .AppendPoint (_cge );};_dc :=_gb .NewContentCreator ();
_dc .Add_q ().SetStrokingColor (_bbb .LineColor ).Add_w (_bbb .LineWidth );if len (gsName )> 1{_dc .Add_gs (_ff .PdfObjectName (gsName ));};DrawPathWithCreator (_dee ,_dc );_dc .Add_S ();_dc .Add_Q ();return _dc .Bytes (),_dee .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_gb .ContentCreator ){for _cac ,_gge :=range bpath .Curves {if _cac ==0{creator .Add_m (_gge .P0 .X ,_gge .P0 .Y );};creator .Add_c (_gge .P1 .X ,_gge .P1 .Y ,_gge .P2 .X ,_gge .P2 .Y ,_gge .P3 .X ,_gge .P3 .Y );
};};

// GetBounds returns the bounding box of the Bezier curve.
func (_aa CubicBezierCurve )GetBounds ()_fd .PdfRectangle {_e :=_aa .P0 .X ;_ag :=_aa .P0 .X ;_da :=_aa .P0 .Y ;_ba :=_aa .P0 .Y ;for _ge :=0.0;_ge <=1.0;_ge +=0.001{Rx :=_aa .P0 .X *_f .Pow (1-_ge ,3)+_aa .P1 .X *3*_ge *_f .Pow (1-_ge ,2)+_aa .P2 .X *3*_f .Pow (_ge ,2)*(1-_ge )+_aa .P3 .X *_f .Pow (_ge ,3);
Ry :=_aa .P0 .Y *_f .Pow (1-_ge ,3)+_aa .P1 .Y *3*_ge *_f .Pow (1-_ge ,2)+_aa .P2 .Y *3*_f .Pow (_ge ,2)*(1-_ge )+_aa .P3 .Y *_f .Pow (_ge ,3);if Rx < _e {_e =Rx ;};if Rx > _ag {_ag =Rx ;};if Ry < _da {_da =Ry ;};if Ry > _ba {_ba =Ry ;};};_bg :=_fd .PdfRectangle {};
_bg .Llx =_e ;_bg .Lly =_da ;_bg .Urx =_ag ;_bg .Ury =_ba ;return _bg ;};

// Copy returns a clone of the Bezier path.
func (_fb CubicBezierPath )Copy ()CubicBezierPath {_bf :=CubicBezierPath {};_bf .Curves =append (_bf .Curves ,_fb .Curves ...);return _bf ;};

// FlipX flips the sign of the Dx component of the vector.
func (_dcc Vector )FlipX ()Vector {_dcc .Dx =-_dcc .Dx ;return _dcc };

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_bgc Rectangle )Draw (gsName string )([]byte ,*_fd .PdfRectangle ,error ){_beb :=NewPath ();_beb =_beb .AppendPoint (NewPoint (0,0));_beb =_beb .AppendPoint (NewPoint (0,_bgc .Height ));_beb =_beb .AppendPoint (NewPoint (_bgc .Width ,_bgc .Height ));
_beb =_beb .AppendPoint (NewPoint (_bgc .Width ,0));_beb =_beb .AppendPoint (NewPoint (0,0));if _bgc .X !=0||_bgc .Y !=0{_beb =_beb .Offset (_bgc .X ,_bgc .Y );};_bfg :=_gb .NewContentCreator ();_bfg .Add_q ();if _bgc .FillEnabled {_bfg .SetNonStrokingColor (_bgc .FillColor );
};if _bgc .BorderEnabled {_bfg .SetStrokingColor (_bgc .BorderColor );_bfg .Add_w (_bgc .BorderWidth );};if len (gsName )> 1{_bfg .Add_gs (_ff .PdfObjectName (gsName ));};DrawPathWithCreator (_beb ,_bfg );_bfg .Add_h ();if _bgc .FillEnabled &&_bgc .BorderEnabled {_bfg .Add_B ();
}else if _bgc .FillEnabled {_bfg .Add_f ();}else if _bgc .BorderEnabled {_bfg .Add_S ();};_bfg .Add_Q ();return _bfg .Bytes (),_beb .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Offset shifts the path with the specified offsets.
func (_fbac Path )Offset (offX ,offY float64 )Path {for _ga ,_aab :=range _fbac .Points {_fbac .Points [_ga ]=_aab .Add (offX ,offY );};return _fbac ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _fd .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _fd .PdfColor ;Opacity float64 ;};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _fd .PdfColor ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// Flip changes the sign of the vector: -vector.
func (_cgd Vector )Flip ()Vector {_feg :=_cgd .Magnitude ();_gcd :=_cgd .GetPolarAngle ();_cgd .Dx =_feg *_f .Cos (_gcd +_f .Pi );_cgd .Dy =_feg *_f .Sin (_gcd +_f .Pi );return _cgd ;};

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_cff BasicLine )Draw (gsName string )([]byte ,*_fd .PdfRectangle ,error ){_abg :=_cff .LineWidth ;_gf :=NewPath ();_gf =_gf .AppendPoint (NewPoint (_cff .X1 ,_cff .Y1 ));_gf =_gf .AppendPoint (NewPoint (_cff .X2 ,_cff .Y2 ));_ddd :=_gb .NewContentCreator ();
_fag :=_gf .GetBoundingBox ();DrawPathWithCreator (_gf ,_ddd );if _cff .LineStyle ==LineStyleDashed {_ddd .Add_d ([]int64 {1,1},0);};_ddd .SetStrokingColor (_cff .LineColor ).Add_w (_abg ).Add_S ().Add_Q ();return _ddd .Bytes (),_fag .ToPdfRectangle (),nil ;
};

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_eaa BoundingBox )ToPdfRectangle ()*_fd .PdfRectangle {return &_fd .PdfRectangle {Llx :_eaa .X ,Lly :_eaa .Y ,Urx :_eaa .X +_eaa .Width ,Ury :_eaa .Y +_eaa .Height };};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// GetBoundingBox returns the bounding box of the path.
func (_cgg Path )GetBoundingBox ()BoundingBox {_fbb :=BoundingBox {};_db :=0.0;_dae :=0.0;_fbd :=0.0;_ab :=0.0;for _ea ,_dd :=range _cgg .Points {if _ea ==0{_db =_dd .X ;_dae =_dd .X ;_fbd =_dd .Y ;_ab =_dd .Y ;continue ;};if _dd .X < _db {_db =_dd .X ;
};if _dd .X > _dae {_dae =_dd .X ;};if _dd .Y < _fbd {_fbd =_dd .Y ;};if _dd .Y > _ab {_ab =_dd .Y ;};};_fbb .X =_db ;_fbb .Y =_fbd ;_fbb .Width =_dae -_db ;_fbb .Height =_ab -_fbd ;return _fbb ;};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// Magnitude returns the magnitude of the vector.
func (_egd Vector )Magnitude ()float64 {return _f .Sqrt (_f .Pow (_egd .Dx ,2.0)+_f .Pow (_egd .Dy ,2.0))};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_fba Path )RemovePoint (number int )Path {if number < 1||number > len (_fba .Points ){return _fba ;};_aeg :=number -1;_fba .Points =append (_fba .Points [:_aeg ],_fba .Points [_aeg +1:]...);return _fba ;};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_edc Line )Draw (gsName string )([]byte ,*_fd .PdfRectangle ,error ){_fdf ,_bcd :=_edc .X1 ,_edc .X2 ;_eaf ,_ef :=_edc .Y1 ,_edc .Y2 ;_cfe :=_ef -_eaf ;_fe :=_bcd -_fdf ;_dag :=_f .Atan2 (_cfe ,_fe );L :=_f .Sqrt (_f .Pow (_fe ,2.0)+_f .Pow (_cfe ,2.0));
_aaa :=_edc .LineWidth ;_efa :=_f .Pi ;_eg :=1.0;if _fe < 0{_eg *=-1.0;};if _cfe < 0{_eg *=-1.0;};VsX :=_eg *(-_aaa /2*_f .Cos (_dag +_efa /2));VsY :=_eg *(-_aaa /2*_f .Sin (_dag +_efa /2)+_aaa *_f .Sin (_dag +_efa /2));V1X :=VsX +_aaa /2*_f .Cos (_dag +_efa /2);
V1Y :=VsY +_aaa /2*_f .Sin (_dag +_efa /2);V2X :=VsX +_aaa /2*_f .Cos (_dag +_efa /2)+L *_f .Cos (_dag );V2Y :=VsY +_aaa /2*_f .Sin (_dag +_efa /2)+L *_f .Sin (_dag );V3X :=VsX +_aaa /2*_f .Cos (_dag +_efa /2)+L *_f .Cos (_dag )+_aaa *_f .Cos (_dag -_efa /2);
V3Y :=VsY +_aaa /2*_f .Sin (_dag +_efa /2)+L *_f .Sin (_dag )+_aaa *_f .Sin (_dag -_efa /2);V4X :=VsX +_aaa /2*_f .Cos (_dag -_efa /2);V4Y :=VsY +_aaa /2*_f .Sin (_dag -_efa /2);_ca :=NewPath ();_ca =_ca .AppendPoint (NewPoint (V1X ,V1Y ));_ca =_ca .AppendPoint (NewPoint (V2X ,V2Y ));
_ca =_ca .AppendPoint (NewPoint (V3X ,V3Y ));_ca =_ca .AppendPoint (NewPoint (V4X ,V4Y ));_aea :=_edc .LineEndingStyle1 ;_fff :=_edc .LineEndingStyle2 ;_bec :=3*_aaa ;_bd :=3*_aaa ;_afb :=(_bd -_aaa )/2;if _fff ==LineEndingStyleArrow {_eda :=_ca .GetPointNumber (2);
_eb :=NewVectorPolar (_bec ,_dag +_efa );_bef :=_eda .AddVector (_eb );_fge :=NewVectorPolar (_bd /2,_dag +_efa /2);_agf :=NewVectorPolar (_bec ,_dag );_cag :=NewVectorPolar (_afb ,_dag +_efa /2);_cbb :=_bef .AddVector (_cag );_cbd :=_agf .Add (_fge .Flip ());
_ffc :=_cbb .AddVector (_cbd );_bga :=_fge .Scale (2).Flip ().Add (_cbd .Flip ());_agdb :=_ffc .AddVector (_bga );_geb :=_bef .AddVector (NewVectorPolar (_aaa ,_dag -_efa /2));_cgc :=NewPath ();_cgc =_cgc .AppendPoint (_ca .GetPointNumber (1));_cgc =_cgc .AppendPoint (_bef );
_cgc =_cgc .AppendPoint (_cbb );_cgc =_cgc .AppendPoint (_ffc );_cgc =_cgc .AppendPoint (_agdb );_cgc =_cgc .AppendPoint (_geb );_cgc =_cgc .AppendPoint (_ca .GetPointNumber (4));_ca =_cgc ;};if _aea ==LineEndingStyleArrow {_edac :=_ca .GetPointNumber (1);
_bee :=_ca .GetPointNumber (_ca .Length ());_eca :=NewVectorPolar (_aaa /2,_dag +_efa +_efa /2);_aeb :=_edac .AddVector (_eca );_fgg :=NewVectorPolar (_bec ,_dag ).Add (NewVectorPolar (_bd /2,_dag +_efa /2));_eba :=_aeb .AddVector (_fgg );_agc :=NewVectorPolar (_afb ,_dag -_efa /2);
_df :=_eba .AddVector (_agc );_bed :=NewVectorPolar (_bec ,_dag );_de :=_bee .AddVector (_bed );_feb :=NewVectorPolar (_afb ,_dag +_efa +_efa /2);_bgcb :=_de .AddVector (_feb );_dbe :=_aeb ;_eeg :=NewPath ();_eeg =_eeg .AppendPoint (_aeb );_eeg =_eeg .AppendPoint (_eba );
_eeg =_eeg .AppendPoint (_df );for _ ,_bca :=range _ca .Points [1:len (_ca .Points )-1]{_eeg =_eeg .AppendPoint (_bca );};_eeg =_eeg .AppendPoint (_de );_eeg =_eeg .AppendPoint (_bgcb );_eeg =_eeg .AppendPoint (_dbe );_ca =_eeg ;};_bea :=_gb .NewContentCreator ();
_bea .Add_q ().SetNonStrokingColor (_edc .LineColor );if len (gsName )> 1{_bea .Add_gs (_ff .PdfObjectName (gsName ));};_ca =_ca .Offset (_edc .X1 ,_edc .Y1 );_abe :=_ca .GetBoundingBox ();DrawPathWithCreator (_ca ,_bea );if _edc .LineStyle ==LineStyleDashed {_bea .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();
}else {_bea .Add_f ().Add_Q ();};return _bea .Bytes (),_abe .ToPdfRectangle (),nil ;};

// Offset shifts the Bezier path with the specified offsets.
func (_bgf CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _cc ,_bc :=range _bgf .Curves {_bgf .Curves [_cc ]=_bc .AddOffsetXY (offX ,offY );};return _bgf ;};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_gbdc :=Vector {};_gbdc .Dx =dx ;_gbdc .Dy =dy ;return _gbdc };

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_d :=CubicBezierCurve {};_d .P0 =NewPoint (x0 ,y0 );_d .P1 =NewPoint (x1 ,y1 );_d .P2 =NewPoint (x2 ,y2 );_d .P3 =NewPoint (x3 ,y3 );return _d ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_dad Vector )GetPolarAngle ()float64 {return _f .Atan2 (_dad .Dy ,_dad .Dx )};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_eeaf :=Vector {};_eeaf .Dx =b .X -a .X ;_eeaf .Dy =b .Y -a .Y ;return _eeaf ;};

// Length returns the number of points in the path.
func (_gc Path )Length ()int {return len (_gc .Points )};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_dbc Polygon )Draw (gsName string )([]byte ,*_fd .PdfRectangle ,error ){_faf :=_gb .NewContentCreator ();_faf .Add_q ();_dbc .FillEnabled =_dbc .FillEnabled &&_dbc .FillColor !=nil ;if _dbc .FillEnabled {_faf .SetNonStrokingColor (_dbc .FillColor );
};_dbc .BorderEnabled =_dbc .BorderEnabled &&_dbc .BorderColor !=nil ;if _dbc .BorderEnabled {_faf .SetStrokingColor (_dbc .BorderColor );_faf .Add_w (_dbc .BorderWidth );};if len (gsName )> 1{_faf .Add_gs (_ff .PdfObjectName (gsName ));};_fg :=NewPath ();
for _ ,_fcc :=range _dbc .Points {for _ed ,_ecf :=range _fcc {_fg =_fg .AppendPoint (_ecf );if _ed ==0{_faf .Add_m (_ecf .X ,_ecf .Y );}else {_faf .Add_l (_ecf .X ,_ecf .Y );};};_faf .Add_h ();};if _dbc .FillEnabled &&_dbc .BorderEnabled {_faf .Add_B ();
}else if _dbc .FillEnabled {_faf .Add_f ();}else if _dbc .BorderEnabled {_faf .Add_S ();};_faf .Add_Q ();return _faf .Bytes (),_fg .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_ee PolyBezierCurve )Draw (gsName string )([]byte ,*_fd .PdfRectangle ,error ){if _ee .BorderColor ==nil {_ee .BorderColor =_fd .NewPdfColorDeviceRGB (0,0,0);};_gbe :=NewCubicBezierPath ();for _ ,_gg :=range _ee .Curves {_gbe =_gbe .AppendCurve (_gg );
};_eaae :=_gb .NewContentCreator ();_eaae .Add_q ();_ee .FillEnabled =_ee .FillEnabled &&_ee .FillColor !=nil ;if _ee .FillEnabled {_eaae .SetNonStrokingColor (_ee .FillColor );};_eaae .SetStrokingColor (_ee .BorderColor );_eaae .Add_w (_ee .BorderWidth );
if len (gsName )> 1{_eaae .Add_gs (_ff .PdfObjectName (gsName ));};for _daa ,_gae :=range _gbe .Curves {if _daa ==0{_eaae .Add_m (_gae .P0 .X ,_gae .P0 .Y );}else {_eaae .Add_l (_gae .P0 .X ,_gae .P0 .Y );};_eaae .Add_c (_gae .P1 .X ,_gae .P1 .Y ,_gae .P2 .X ,_gae .P2 .Y ,_gae .P3 .X ,_gae .P3 .Y );
};if _ee .FillEnabled {_eaae .Add_h ();_eaae .Add_B ();}else {_eaae .Add_S ();};_eaae .Add_Q ();return _eaae .Bytes (),_gbe .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_dde Point )Rotate (theta float64 )Point {_fbe :=_a .NewPoint (_dde .X ,_dde .Y ).Rotate (theta );return NewPoint (_fbe .X ,_fbe .Y );};const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;);const (LineEndingStyleNone LineEndingStyle =0;
LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;);

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_gbd Path )GetPointNumber (number int )Point {if number < 1||number > len (_gbd .Points ){return Point {};};return _gbd .Points [number -1];};

// Scale scales the vector by the specified factor.
func (_egf Vector )Scale (factor float64 )Vector {_cfff :=_egf .Magnitude ();_fbf :=_egf .GetPolarAngle ();_egf .Dx =factor *_cfff *_f .Cos (_fbf );_egf .Dy =factor *_cfff *_f .Sin (_fbf );return _egf ;};

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_c CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_c .P0 .X +=offX ;_c .P1 .X +=offX ;_c .P2 .X +=offX ;_c .P3 .X +=offX ;_c .P0 .Y +=offY ;_c .P1 .Y +=offY ;_c .P2 .Y +=offY ;_c .P3 .Y +=offY ;return _c ;};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_gb .ContentCreator ){for _cda ,_cage :=range path .Points {if _cda ==0{creator .Add_m (_cage .X ,_cage .Y );}else {creator .Add_l (_cage .X ,_cage .Y );};};};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _fd .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _fd .PdfColor ;Opacity float64 ;};

// AppendPoint adds the specified point to the path.
func (_cb Path )AppendPoint (point Point )Path {_cb .Points =append (_cb .Points ,point );return _cb };