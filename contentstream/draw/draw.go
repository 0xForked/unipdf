//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_db "fmt";_cf "github.com/unidoc/unipdf/v3/contentstream";_e "github.com/unidoc/unipdf/v3/core";_ec "github.com/unidoc/unipdf/v3/internal/transform";_c "github.com/unidoc/unipdf/v3/model";_d "math";);

// Add adds the specified vector to the current one and returns the result.
func (_dbdf Vector )Add (other Vector )Vector {_dbdf .Dx +=other .Dx ;_dbdf .Dy +=other .Dy ;return _dbdf ;};

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_gd :=CubicBezierPath {};_gd .Curves =[]CubicBezierCurve {};return _gd ;};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_aac Point )Add (dx ,dy float64 )Point {_aac .X +=dx ;_aac .Y +=dy ;return _aac };

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_dfb PolyBezierCurve )Draw (gsName string )([]byte ,*_c .PdfRectangle ,error ){if _dfb .BorderColor ==nil {_dfb .BorderColor =_c .NewPdfColorDeviceRGB (0,0,0);};_ff :=NewCubicBezierPath ();for _ ,_ba :=range _dfb .Curves {_ff =_ff .AppendCurve (_ba );
};_de :=_cf .NewContentCreator ();_de .Add_q ();_dfb .FillEnabled =_dfb .FillEnabled &&_dfb .FillColor !=nil ;if _dfb .FillEnabled {_de .SetNonStrokingColor (_dfb .FillColor );};_de .SetStrokingColor (_dfb .BorderColor );_de .Add_w (_dfb .BorderWidth );
if len (gsName )> 1{_de .Add_gs (_e .PdfObjectName (gsName ));};for _gcd ,_cfb :=range _ff .Curves {if _gcd ==0{_de .Add_m (_cfb .P0 .X ,_cfb .P0 .Y );}else {_de .Add_l (_cfb .P0 .X ,_cfb .P0 .Y );};_de .Add_c (_cfb .P1 .X ,_cfb .P1 .Y ,_cfb .P2 .X ,_cfb .P2 .Y ,_cfb .P3 .X ,_cfb .P3 .Y );
};if _dfb .FillEnabled {_de .Add_h ();_de .Add_B ();}else {_de .Add_S ();};_de .Add_Q ();return _de .Bytes (),_ff .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _c .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _c .PdfColor ;Opacity float64 ;};

// FlipY flips the sign of the Dy component of the vector.
func (_aacf Vector )FlipY ()Vector {_aacf .Dy =-_aacf .Dy ;return _aacf };

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_baf :=Vector {};_baf .Dx =dx ;_baf .Dy =dy ;return _baf };

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_cg Path )RemovePoint (number int )Path {if number < 1||number > len (_cg .Points ){return _cg ;};_fee :=number -1;_cg .Points =append (_cg .Points [:_fee ],_cg .Points [_fee +1:]...);return _cg ;};

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor _c .PdfColor ;LineWidth float64 ;};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_cd CubicBezierPath )GetBoundingBox ()Rectangle {_acd :=Rectangle {};_egg :=0.0;_ddc :=0.0;_fe :=0.0;_ce :=0.0;for _bgd ,_df :=range _cd .Curves {_eggd :=_df .GetBounds ();if _bgd ==0{_egg =_eggd .Llx ;_ddc =_eggd .Urx ;_fe =_eggd .Lly ;_ce =_eggd .Ury ;
continue ;};if _eggd .Llx < _egg {_egg =_eggd .Llx ;};if _eggd .Urx > _ddc {_ddc =_eggd .Urx ;};if _eggd .Lly < _fe {_fe =_eggd .Lly ;};if _eggd .Ury > _ce {_ce =_eggd .Ury ;};};_acd .X =_egg ;_acd .Y =_fe ;_acd .Width =_ddc -_egg ;_acd .Height =_ce -_fe ;
return _acd ;};

// GetBoundingBox returns the bounding box of the path.
func (_dcc Path )GetBoundingBox ()BoundingBox {_bd :=BoundingBox {};_eb :=0.0;_ad :=0.0;_af :=0.0;_ab :=0.0;for _cc ,_bdf :=range _dcc .Points {if _cc ==0{_eb =_bdf .X ;_ad =_bdf .X ;_af =_bdf .Y ;_ab =_bdf .Y ;continue ;};if _bdf .X < _eb {_eb =_bdf .X ;
};if _bdf .X > _ad {_ad =_bdf .X ;};if _bdf .Y < _af {_af =_bdf .Y ;};if _bdf .Y > _ab {_ab =_bdf .Y ;};};_bd .X =_eb ;_bd .Y =_af ;_bd .Width =_ad -_eb ;_bd .Height =_ab -_af ;return _bd ;};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_dbd :=Vector {};_dbd .Dx =b .X -a .X ;_dbd .Dy =b .Y -a .Y ;return _dbd ;};

// Copy returns a clone of the path.
func (_dda Path )Copy ()Path {_dfd :=Path {};_dfd .Points =append (_dfd .Points ,_dda .Points ...);return _dfd ;};

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_gdf Rectangle )Draw (gsName string )([]byte ,*_c .PdfRectangle ,error ){_efb :=NewPath ();_efb =_efb .AppendPoint (NewPoint (0,0));_efb =_efb .AppendPoint (NewPoint (0,_gdf .Height ));_efb =_efb .AppendPoint (NewPoint (_gdf .Width ,_gdf .Height ));
_efb =_efb .AppendPoint (NewPoint (_gdf .Width ,0));_efb =_efb .AppendPoint (NewPoint (0,0));if _gdf .X !=0||_gdf .Y !=0{_efb =_efb .Offset (_gdf .X ,_gdf .Y );};_efd :=_cf .NewContentCreator ();_efd .Add_q ();if _gdf .FillEnabled {_efd .SetNonStrokingColor (_gdf .FillColor );
};if _gdf .BorderEnabled {_efd .SetStrokingColor (_gdf .BorderColor );_efd .Add_w (_gdf .BorderWidth );};if len (gsName )> 1{_efd .Add_gs (_e .PdfObjectName (gsName ));};DrawPathWithCreator (_efb ,_efd );_efd .Add_h ();if _gdf .FillEnabled &&_gdf .BorderEnabled {_efd .Add_B ();
}else if _gdf .FillEnabled {_efd .Add_f ();}else if _gdf .BorderEnabled {_efd .Add_S ();};_efd .Add_Q ();return _efd .Bytes (),_efb .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Scale scales the vector by the specified factor.
func (_gbf Vector )Scale (factor float64 )Vector {_eec :=_gbf .Magnitude ();_cbee :=_gbf .GetPolarAngle ();_gbf .Dx =factor *_eec *_d .Cos (_cbee );_gbf .Dy =factor *_eec *_d .Sin (_cbee );return _gbf ;};

// CurvePolygon is a multi-point shape with rings containing curves that can be
// drawn to a PDF content stream.
type CurvePolygon struct{Rings [][]CubicBezierCurve ;FillEnabled bool ;FillColor _c .PdfColor ;BorderEnabled bool ;BorderColor _c .PdfColor ;BorderWidth float64 ;};

// Magnitude returns the magnitude of the vector.
func (_fdd Vector )Magnitude ()float64 {return _d .Sqrt (_d .Pow (_fdd .Dx ,2.0)+_d .Pow (_fdd .Dy ,2.0))};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _c .PdfColor ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_ca Line )Draw (gsName string )([]byte ,*_c .PdfRectangle ,error ){_dba ,_fa :=_ca .X1 ,_ca .X2 ;_ceg ,_fac :=_ca .Y1 ,_ca .Y2 ;_afa :=_fac -_ceg ;_ffg :=_fa -_dba ;_bac :=_d .Atan2 (_afa ,_ffg );L :=_d .Sqrt (_d .Pow (_ffg ,2.0)+_d .Pow (_afa ,2.0));
_ecd :=_ca .LineWidth ;_fad :=_d .Pi ;_ebg :=1.0;if _ffg < 0{_ebg *=-1.0;};if _afa < 0{_ebg *=-1.0;};VsX :=_ebg *(-_ecd /2*_d .Cos (_bac +_fad /2));VsY :=_ebg *(-_ecd /2*_d .Sin (_bac +_fad /2)+_ecd *_d .Sin (_bac +_fad /2));V1X :=VsX +_ecd /2*_d .Cos (_bac +_fad /2);
V1Y :=VsY +_ecd /2*_d .Sin (_bac +_fad /2);V2X :=VsX +_ecd /2*_d .Cos (_bac +_fad /2)+L *_d .Cos (_bac );V2Y :=VsY +_ecd /2*_d .Sin (_bac +_fad /2)+L *_d .Sin (_bac );V3X :=VsX +_ecd /2*_d .Cos (_bac +_fad /2)+L *_d .Cos (_bac )+_ecd *_d .Cos (_bac -_fad /2);
V3Y :=VsY +_ecd /2*_d .Sin (_bac +_fad /2)+L *_d .Sin (_bac )+_ecd *_d .Sin (_bac -_fad /2);V4X :=VsX +_ecd /2*_d .Cos (_bac -_fad /2);V4Y :=VsY +_ecd /2*_d .Sin (_bac -_fad /2);_cef :=NewPath ();_cef =_cef .AppendPoint (NewPoint (V1X ,V1Y ));_cef =_cef .AppendPoint (NewPoint (V2X ,V2Y ));
_cef =_cef .AppendPoint (NewPoint (V3X ,V3Y ));_cef =_cef .AppendPoint (NewPoint (V4X ,V4Y ));_aag :=_ca .LineEndingStyle1 ;_fd :=_ca .LineEndingStyle2 ;_aaa :=3*_ecd ;_agb :=3*_ecd ;_bgf :=(_agb -_ecd )/2;if _fd ==LineEndingStyleArrow {_bbd :=_cef .GetPointNumber (2);
_fbde :=NewVectorPolar (_aaa ,_bac +_fad );_fdb :=_bbd .AddVector (_fbde );_dcf :=NewVectorPolar (_agb /2,_bac +_fad /2);_ea :=NewVectorPolar (_aaa ,_bac );_gbg :=NewVectorPolar (_bgf ,_bac +_fad /2);_feb :=_fdb .AddVector (_gbg );_eggf :=_ea .Add (_dcf .Flip ());
_ccd :=_feb .AddVector (_eggf );_bec :=_dcf .Scale (2).Flip ().Add (_eggf .Flip ());_bgb :=_ccd .AddVector (_bec );_eae :=_fdb .AddVector (NewVectorPolar (_ecd ,_bac -_fad /2));_ebf :=NewPath ();_ebf =_ebf .AppendPoint (_cef .GetPointNumber (1));_ebf =_ebf .AppendPoint (_fdb );
_ebf =_ebf .AppendPoint (_feb );_ebf =_ebf .AppendPoint (_ccd );_ebf =_ebf .AppendPoint (_bgb );_ebf =_ebf .AppendPoint (_eae );_ebf =_ebf .AppendPoint (_cef .GetPointNumber (4));_cef =_ebf ;};if _aag ==LineEndingStyleArrow {_ada :=_cef .GetPointNumber (1);
_fg :=_cef .GetPointNumber (_cef .Length ());_cfca :=NewVectorPolar (_ecd /2,_bac +_fad +_fad /2);_dge :=_ada .AddVector (_cfca );_cbea :=NewVectorPolar (_aaa ,_bac ).Add (NewVectorPolar (_agb /2,_bac +_fad /2));_cec :=_dge .AddVector (_cbea );_fgb :=NewVectorPolar (_bgf ,_bac -_fad /2);
_fed :=_cec .AddVector (_fgb );_dfc :=NewVectorPolar (_aaa ,_bac );_bgg :=_fg .AddVector (_dfc );_geg :=NewVectorPolar (_bgf ,_bac +_fad +_fad /2);_cfe :=_bgg .AddVector (_geg );_bdb :=_dge ;_dfe :=NewPath ();_dfe =_dfe .AppendPoint (_dge );_dfe =_dfe .AppendPoint (_cec );
_dfe =_dfe .AppendPoint (_fed );for _ ,_daa :=range _cef .Points [1:len (_cef .Points )-1]{_dfe =_dfe .AppendPoint (_daa );};_dfe =_dfe .AppendPoint (_bgg );_dfe =_dfe .AppendPoint (_cfe );_dfe =_dfe .AppendPoint (_bdb );_cef =_dfe ;};_afg :=_cf .NewContentCreator ();
_afg .Add_q ().SetNonStrokingColor (_ca .LineColor );if len (gsName )> 1{_afg .Add_gs (_e .PdfObjectName (gsName ));};_cef =_cef .Offset (_ca .X1 ,_ca .Y1 );_aeb :=_cef .GetBoundingBox ();DrawPathWithCreator (_cef ,_afg );if _ca .LineStyle ==LineStyleDashed {_afg .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();
}else {_afg .Add_f ().Add_Q ();};return _afg .Bytes (),_aeb .ToPdfRectangle (),nil ;};

// GetBounds returns the bounding box of the Bezier curve.
func (_eg CubicBezierCurve )GetBounds ()_c .PdfRectangle {_f :=_eg .P0 .X ;_a :=_eg .P0 .X ;_dc :=_eg .P0 .Y ;_ac :=_eg .P0 .Y ;for _aa :=0.0;_aa <=1.0;_aa +=0.001{Rx :=_eg .P0 .X *_d .Pow (1-_aa ,3)+_eg .P1 .X *3*_aa *_d .Pow (1-_aa ,2)+_eg .P2 .X *3*_d .Pow (_aa ,2)*(1-_aa )+_eg .P3 .X *_d .Pow (_aa ,3);
Ry :=_eg .P0 .Y *_d .Pow (1-_aa ,3)+_eg .P1 .Y *3*_aa *_d .Pow (1-_aa ,2)+_eg .P2 .Y *3*_d .Pow (_aa ,2)*(1-_aa )+_eg .P3 .Y *_d .Pow (_aa ,3);if Rx < _f {_f =Rx ;};if Rx > _a {_a =Rx ;};if Ry < _dc {_dc =Ry ;};if Ry > _ac {_ac =Ry ;};};_g :=_c .PdfRectangle {};
_g .Llx =_f ;_g .Lly =_dc ;_g .Urx =_a ;_g .Ury =_ac ;return _g ;};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_age Polyline )Draw (gsName string )([]byte ,*_c .PdfRectangle ,error ){if _age .LineColor ==nil {_age .LineColor =_c .NewPdfColorDeviceRGB (0,0,0);};_bfa :=NewPath ();for _ ,_ffe :=range _age .Points {_bfa =_bfa .AppendPoint (_ffe );};_gg :=_cf .NewContentCreator ();
_gg .Add_q ().SetStrokingColor (_age .LineColor ).Add_w (_age .LineWidth );if len (gsName )> 1{_gg .Add_gs (_e .PdfObjectName (gsName ));};DrawPathWithCreator (_bfa ,_gg );_gg .Add_S ();_gg .Add_Q ();return _gg .Bytes (),_bfa .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _c .PdfColor ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor _c .PdfColor ;BorderEnabled bool ;BorderColor _c .PdfColor ;BorderWidth float64 ;};

// AppendPoint adds the specified point to the path.
func (_da Path )AppendPoint (point Point )Path {_da .Points =append (_da .Points ,point );return _da };func (_cdf Point )String ()string {return _db .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_cdf .X ,_cdf .Y );};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor _c .PdfColor ;FillEnabled bool ;FillColor _c .PdfColor ;};

// Rotate rotates the vector by the specified angle.
func (_dfbg Vector )Rotate (phi float64 )Vector {_faa :=_dfbg .Magnitude ();_dee :=_dfbg .GetPolarAngle ();return NewVectorPolar (_faa ,_dee +phi );};

// Offset shifts the path with the specified offsets.
func (_ee Path )Offset (offX ,offY float64 )Path {for _cbe ,_bf :=range _ee .Points {_ee .Points [_cbe ]=_bf .Add (offX ,offY );};return _ee ;};

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_dff :=Vector {};_dff .Dx =length *_d .Cos (theta );_dff .Dy =length *_d .Sin (theta );return _dff ;};

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_cf .ContentCreator ){for _dcae ,_bda :=range bpath .Curves {if _dcae ==0{creator .Add_m (_bda .P0 .X ,_bda .P0 .Y );};creator .Add_c (_bda .P1 .X ,_bda .P1 .Y ,_bda .P2 .X ,_bda .P2 .Y ,_bda .P3 .X ,_bda .P3 .Y );
};};

// FlipX flips the sign of the Dx component of the vector.
func (_adc Vector )FlipX ()Vector {_adc .Dx =-_adc .Dx ;return _adc };

// Draw draws the composite curve polygon. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array
// and the bounding box of the polygon.
func (_cee CurvePolygon )Draw (gsName string )([]byte ,*_c .PdfRectangle ,error ){_eda :=_cf .NewContentCreator ();_eda .Add_q ();_cee .FillEnabled =_cee .FillEnabled &&_cee .FillColor !=nil ;if _cee .FillEnabled {_eda .SetNonStrokingColor (_cee .FillColor );
};_cee .BorderEnabled =_cee .BorderEnabled &&_cee .BorderColor !=nil ;if _cee .BorderEnabled {_eda .SetStrokingColor (_cee .BorderColor );_eda .Add_w (_cee .BorderWidth );};if len (gsName )> 1{_eda .Add_gs (_e .PdfObjectName (gsName ));};_be :=NewCubicBezierPath ();
for _ ,_ef :=range _cee .Rings {for _dac ,_egb :=range _ef {if _dac ==0{_eda .Add_m (_egb .P0 .X ,_egb .P0 .Y );}else {_eda .Add_l (_egb .P0 .X ,_egb .P0 .Y );};_eda .Add_c (_egb .P1 .X ,_egb .P1 .Y ,_egb .P2 .X ,_egb .P2 .Y ,_egb .P3 .X ,_egb .P3 .Y );
_be =_be .AppendCurve (_egb );};_eda .Add_h ();};if _cee .FillEnabled &&_cee .BorderEnabled {_eda .Add_B ();}else if _cee .FillEnabled {_eda .Add_f ();}else if _cee .BorderEnabled {_eda .Add_S ();};_eda .Add_Q ();return _eda .Bytes (),_be .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_gbc Polygon )Draw (gsName string )([]byte ,*_c .PdfRectangle ,error ){_ade :=_cf .NewContentCreator ();_ade .Add_q ();_gbc .FillEnabled =_gbc .FillEnabled &&_gbc .FillColor !=nil ;if _gbc .FillEnabled {_ade .SetNonStrokingColor (_gbc .FillColor );
};_gbc .BorderEnabled =_gbc .BorderEnabled &&_gbc .BorderColor !=nil ;if _gbc .BorderEnabled {_ade .SetStrokingColor (_gbc .BorderColor );_ade .Add_w (_gbc .BorderWidth );};if len (gsName )> 1{_ade .Add_gs (_e .PdfObjectName (gsName ));};_cbb :=NewPath ();
for _ ,_fef :=range _gbc .Points {for _bbc ,_eea :=range _fef {_cbb =_cbb .AppendPoint (_eea );if _bbc ==0{_ade .Add_m (_eea .X ,_eea .Y );}else {_ade .Add_l (_eea .X ,_eea .Y );};};_ade .Add_h ();};if _gbc .FillEnabled &&_gbc .BorderEnabled {_ade .Add_B ();
}else if _gbc .FillEnabled {_ade .Add_f ();}else if _gbc .BorderEnabled {_ade .Add_S ();};_ade .Add_Q ();return _ade .Bytes (),_cbb .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Copy returns a clone of the Bezier path.
func (_ge CubicBezierPath )Copy ()CubicBezierPath {_ed :=CubicBezierPath {};_ed .Curves =append (_ed .Curves ,_ge .Curves ...);return _ed ;};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// Offset shifts the Bezier path with the specified offsets.
func (_ag CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _bg ,_dg :=range _ag .Curves {_ag .Curves [_bg ]=_dg .AddOffsetXY (offX ,offY );};return _ag ;};

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// Flip changes the sign of the vector: -vector.
func (_ede Vector )Flip ()Vector {_ege :=_ede .Magnitude ();_cfaf :=_ede .GetPolarAngle ();_ede .Dx =_ege *_d .Cos (_cfaf +_d .Pi );_ede .Dy =_ege *_d .Sin (_cfaf +_d .Pi );return _ede ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_ebc Point )Rotate (theta float64 )Point {_fbd :=_ec .NewPoint (_ebc .X ,_ebc .Y ).Rotate (theta );return NewPoint (_fbd .X ,_fbd .Y );};

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_fb BoundingBox )ToPdfRectangle ()*_c .PdfRectangle {return &_c .PdfRectangle {Llx :_fb .X ,Lly :_fb .Y ,Urx :_fb .X +_fb .Width ,Ury :_fb .Y +_fb .Height };};const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;);

// AppendCurve appends the specified Bezier curve to the path.
func (_ae CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_ae .Curves =append (_ae .Curves ,curve );return _ae ;};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_cfc :=CubicBezierCurve {};_cfc .P0 =NewPoint (x0 ,y0 );_cfc .P1 =NewPoint (x1 ,y1 );_cfc .P2 =NewPoint (x2 ,y2 );_cfc .P3 =NewPoint (x3 ,y3 );return _cfc ;};

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_dd CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_dd .P0 .X +=offX ;_dd .P1 .X +=offX ;_dd .P2 .X +=offX ;_dd .P3 .X +=offX ;_dd .P0 .Y +=offY ;_dd .P1 .Y +=offY ;_dd .P2 .Y +=offY ;_dd .P3 .Y +=offY ;return _dd ;};

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_afc Rectangle )ToPdfRectangle ()*_c .PdfRectangle {return &_c .PdfRectangle {Llx :_afc .X ,Lly :_afc .Y ,Urx :_afc .X +_afc .Width ,Ury :_afc .Y +_afc .Height };};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_feed Circle )Draw (gsName string )([]byte ,*_c .PdfRectangle ,error ){_bb :=_feed .Width /2;_gc :=_feed .Height /2;if _feed .BorderEnabled {_bb -=_feed .BorderWidth /2;_gc -=_feed .BorderWidth /2;};_gb :=0.551784;_cfd :=_bb *_gb ;_dca :=_gc *_gb ;
_bc :=NewCubicBezierPath ();_bc =_bc .AppendCurve (NewCubicBezierCurve (-_bb ,0,-_bb ,_dca ,-_cfd ,_gc ,0,_gc ));_bc =_bc .AppendCurve (NewCubicBezierCurve (0,_gc ,_cfd ,_gc ,_bb ,_dca ,_bb ,0));_bc =_bc .AppendCurve (NewCubicBezierCurve (_bb ,0,_bb ,-_dca ,_cfd ,-_gc ,0,-_gc ));
_bc =_bc .AppendCurve (NewCubicBezierCurve (0,-_gc ,-_cfd ,-_gc ,-_bb ,-_dca ,-_bb ,0));_bc =_bc .Offset (_bb ,_gc );if _feed .BorderEnabled {_bc =_bc .Offset (_feed .BorderWidth /2,_feed .BorderWidth /2);};if _feed .X !=0||_feed .Y !=0{_bc =_bc .Offset (_feed .X ,_feed .Y );
};_egf :=_cf .NewContentCreator ();_egf .Add_q ();if _feed .FillEnabled {_egf .SetNonStrokingColor (_feed .FillColor );};if _feed .BorderEnabled {_egf .SetStrokingColor (_feed .BorderColor );_egf .Add_w (_feed .BorderWidth );};if len (gsName )> 1{_egf .Add_gs (_e .PdfObjectName (gsName ));
};DrawBezierPathWithCreator (_bc ,_egf );_egf .Add_h ();if _feed .FillEnabled &&_feed .BorderEnabled {_egf .Add_B ();}else if _feed .FillEnabled {_egf .Add_f ();}else if _feed .BorderEnabled {_egf .Add_S ();};_egf .Add_Q ();_acc :=_bc .GetBoundingBox ();
if _feed .BorderEnabled {_acc .Height +=_feed .BorderWidth ;_acc .Width +=_feed .BorderWidth ;_acc .X -=_feed .BorderWidth /2;_acc .Y -=_feed .BorderWidth /2;};return _egf .Bytes (),_acc .ToPdfRectangle (),nil ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_aba Vector )GetPolarAngle ()float64 {return _d .Atan2 (_aba .Dy ,_aba .Dx )};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// AddVector adds vector to a point.
func (_abb Point )AddVector (v Vector )Point {_abb .X +=v .Dx ;_abb .Y +=v .Dy ;return _abb };

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _c .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _c .PdfColor ;Opacity float64 ;};

// Length returns the number of points in the path.
func (_cdg Path )Length ()int {return len (_cdg .Points )};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_cf .ContentCreator ){for _bgdg ,_cge :=range path .Points {if _bgdg ==0{creator .Add_m (_cge .X ,_cge .Y );}else {creator .Add_l (_cge .X ,_cge .Y );};};};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_cb Path )GetPointNumber (number int )Point {if number < 1||number > len (_cb .Points ){return Point {};};return _cb .Points [number -1];};const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;
);

// LineStyle refers to how the line will be created.
type LineStyle int ;

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_gf BasicLine )Draw (gsName string )([]byte ,*_c .PdfRectangle ,error ){_ebgd :=_gf .LineWidth ;_bbg :=NewPath ();_bbg =_bbg .AppendPoint (NewPoint (_gf .X1 ,_gf .Y1 ));_bbg =_bbg .AppendPoint (NewPoint (_gf .X2 ,_gf .Y2 ));_cfcb :=_cf .NewContentCreator ();
_edb :=_bbg .GetBoundingBox ();DrawPathWithCreator (_bbg ,_cfcb );if _gf .LineStyle ==LineStyleDashed {_cfcb .Add_d ([]int64 {1,1},0);};_cfcb .SetStrokingColor (_gf .LineColor ).Add_w (_ebgd ).Add_S ().Add_Q ();return _cfcb .Bytes (),_edb .ToPdfRectangle (),nil ;
};