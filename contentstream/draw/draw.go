//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_a "fmt";_df "github.com/unidoc/unipdf/v3/contentstream";_d "github.com/unidoc/unipdf/v3/core";_eg "github.com/unidoc/unipdf/v3/internal/transform";_ba "github.com/unidoc/unipdf/v3/model";_b "math";);

// AppendCurve appends the specified Bezier curve to the path.
func (_da CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_da .Curves =append (_da .Curves ,curve );return _da ;};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_df .ContentCreator ){for _fdg ,_ggdf :=range bpath .Curves {if _fdg ==0{creator .Add_m (_ggdf .P0 .X ,_ggdf .P0 .Y );};creator .Add_c (_ggdf .P1 .X ,_ggdf .P1 .Y ,_ggdf .P2 .X ,_ggdf .P2 .Y ,_ggdf .P3 .X ,_ggdf .P3 .Y );};};

// Copy returns a clone of the Bezier path.
func (_dg CubicBezierPath )Copy ()CubicBezierPath {_ad :=CubicBezierPath {};_ad .Curves =[]CubicBezierCurve {};for _ ,_ga :=range _dg .Curves {_ad .Curves =append (_ad .Curves ,_ga );};return _ad ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_c :=CubicBezierCurve {};_c .P0 =NewPoint (x0 ,y0 );_c .P1 =NewPoint (x1 ,y1 );_c .P2 =NewPoint (x2 ,y2 );_c .P3 =NewPoint (x3 ,y3 );return _c ;};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_ba .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_bgc Point )Add (dx ,dy float64 )Point {_bgc .X +=dx ;_bgc .Y +=dy ;return _bgc };

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// Add adds the specified vector to the current one and returns the result.
func (_cae Vector )Add (other Vector )Vector {_cae .Dx +=other .Dx ;_cae .Dy +=other .Dy ;return _cae };

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_bae Path )GetPointNumber (number int )Point {if number < 1||number > len (_bae .Points ){return Point {};};return _bae .Points [number -1];};

// Offset shifts the Bezier path with the specified offsets.
func (_dab CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _bg ,_ff :=range _dab .Curves {_dab .Curves [_bg ]=_ff .AddOffsetXY (offX ,offY );};return _dab ;};

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// Rotate rotates the vector by the specified angle.
func (_dag Vector )Rotate (phi float64 )Vector {_efd :=_dag .Magnitude ();_fad :=_dag .GetPolarAngle ();return NewVectorPolar (_efd ,_fad +phi );};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_eea Point )Rotate (theta float64 )Point {_be :=_eg .NewPoint (_eea .X ,_eea .Y ).Rotate (theta );return NewPoint (_be .X ,_be .Y );};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_egbb :=Vector {};_egbb .Dx =dx ;_egbb .Dy =dy ;return _egbb };

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_ba .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_ba .PdfColorDeviceRGB ;Opacity float64 ;};

// Scale scales the vector by the specified factor.
func (_eba Vector )Scale (factor float64 )Vector {_bcd :=_eba .Magnitude ();_bgbe :=_eba .GetPolarAngle ();_eba .Dx =factor *_bcd *_b .Cos (_bgbe );_eba .Dy =factor *_bcd *_b .Sin (_bgbe );return _eba ;};const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;);

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_bc Rectangle )Draw (gsName string )([]byte ,*_ba .PdfRectangle ,error ){_ea :=NewPath ();_ea =_ea .AppendPoint (NewPoint (0,0));_ea =_ea .AppendPoint (NewPoint (0,_bc .Height ));_ea =_ea .AppendPoint (NewPoint (_bc .Width ,_bc .Height ));_ea =_ea .AppendPoint (NewPoint (_bc .Width ,0));_ea =_ea .AppendPoint (NewPoint (0,0));if _bc .X !=0||_bc .Y !=0{_ea =_ea .Offset (_bc .X ,_bc .Y );};_bb :=_df .NewContentCreator ();_bb .Add_q ();if _bc .FillEnabled {_bb .Add_rg (_bc .FillColor .R (),_bc .FillColor .G (),_bc .FillColor .B ());};if _bc .BorderEnabled {_bb .Add_RG (_bc .BorderColor .R (),_bc .BorderColor .G (),_bc .BorderColor .B ());_bb .Add_w (_bc .BorderWidth );};if len (gsName )> 1{_bb .Add_gs (_d .PdfObjectName (gsName ));};DrawPathWithCreator (_ea ,_bb );_bb .Add_h ();if _bc .FillEnabled &&_bc .BorderEnabled {_bb .Add_B ();}else if _bc .FillEnabled {_bb .Add_f ();}else if _bc .BorderEnabled {_bb .Add_S ();};_bb .Add_Q ();_gdc :=_ea .GetBoundingBox ();_eae :=&_ba .PdfRectangle {};_eae .Llx =_gdc .X ;_eae .Lly =_gdc .Y ;_eae .Urx =_gdc .X +_gdc .Width ;_eae .Ury =_gdc .Y +_gdc .Height ;return _bb .Bytes (),_eae ,nil ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_ba .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_ba .PdfColorDeviceRGB ;Opacity float64 ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// FlipX flips the sign of the Dx component of the vector.
func (_abecc Vector )FlipX ()Vector {_abecc .Dx =-_abecc .Dx ;return _abecc };

// Flip changes the sign of the vector: -vector.
func (_gdb Vector )Flip ()Vector {_bd :=_gdb .Magnitude ();_fba :=_gdb .GetPolarAngle ();_gdb .Dx =_bd *_b .Cos (_fba +_b .Pi );_gdb .Dy =_bd *_b .Sin (_fba +_b .Pi );return _gdb ;};

// LineStyle refers to how the line will be created.
type LineStyle int ;const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;);

// GetBoundingBox returns the bounding box of the path.
func (_ag Path )GetBoundingBox ()BoundingBox {_aag :=BoundingBox {};_ef :=0.0;_acd :=0.0;_ee :=0.0;_gg :=0.0;for _ceg ,_gge :=range _ag .Points {if _ceg ==0{_ef =_gge .X ;_acd =_gge .X ;_ee =_gge .Y ;_gg =_gge .Y ;continue ;};if _gge .X < _ef {_ef =_gge .X ;};if _gge .X > _acd {_acd =_gge .X ;};if _gge .Y < _ee {_ee =_gge .Y ;};if _gge .Y > _gg {_gg =_gge .Y ;};};_aag .X =_ef ;_aag .Y =_ee ;_aag .Width =_acd -_ef ;_aag .Height =_gg -_ee ;return _aag ;};

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// Copy returns a clone of the path.
func (_fb Path )Copy ()Path {_dgc :=Path {};_dgc .Points =[]Point {};for _ ,_cd :=range _fb .Points {_dgc .Points =append (_dgc .Points ,_cd );};return _dgc ;};func (_ge Point )String ()string {return _a .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_ge .X ,_ge .Y );};

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_bcf :=Vector {};_bcf .Dx =length *_b .Cos (theta );_bcf .Dy =length *_b .Sin (theta );return _bcf ;};

// Offset shifts the path with the specified offsets.
func (_gd Path )Offset (offX ,offY float64 )Path {for _fdb ,_bab :=range _gd .Points {_gd .Points [_fdb ]=_bab .Add (offX ,offY );};return _gd ;};

// Length returns the number of points in the path.
func (_ac Path )Length ()int {return len (_ac .Points )};

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_cca BasicLine )Draw (gsName string )([]byte ,*_ba .PdfRectangle ,error ){_dabe :=_cca .LineWidth ;_ggd :=NewPath ();_ggd =_ggd .AppendPoint (NewPoint (_cca .X1 ,_cca .Y1 ));_ggd =_ggd .AppendPoint (NewPoint (_cca .X2 ,_cca .Y2 ));_cfg :=_df .NewContentCreator ();_ccg :=_ggd .GetBoundingBox ();DrawPathWithCreator (_ggd ,_cfg );if _cca .LineStyle ==LineStyleDashed {_cfg .Add_d ([]int64 {1,1},0);};_cfg .Add_RG (_cca .LineColor .R (),_cca .LineColor .G (),_cca .LineColor .B ()).Add_w (_dabe ).Add_S ().Add_Q ();_ecb :=&_ba .PdfRectangle {};_ecb .Llx =_ccg .X ;_ecb .Lly =_ccg .Y ;_ecb .Urx =_ccg .X +_ccg .Width ;_ecb .Ury =_ccg .Y +_ccg .Height ;return _cfg .Bytes (),_ecb ,nil ;};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_df .ContentCreator ){for _dba ,_ded :=range path .Points {if _dba ==0{creator .Add_m (_ded .X ,_ded .Y );}else {creator .Add_l (_ded .X ,_ded .Y );};};};

// FlipY flips the sign of the Dy component of the vector.
func (_dee Vector )FlipY ()Vector {_dee .Dy =-_dee .Dy ;return _dee };

// GetBounds returns the bounding box of the Bezier curve.
func (_dfb CubicBezierCurve )GetBounds ()_ba .PdfRectangle {_aa :=_dfb .P0 .X ;_ab :=_dfb .P0 .X ;_ca :=_dfb .P0 .Y ;_cb :=_dfb .P0 .Y ;for _f :=0.0;_f <=1.0;_f +=0.001{Rx :=_dfb .P0 .X *_b .Pow (1-_f ,3)+_dfb .P1 .X *3*_f *_b .Pow (1-_f ,2)+_dfb .P2 .X *3*_b .Pow (_f ,2)*(1-_f )+_dfb .P3 .X *_b .Pow (_f ,3);Ry :=_dfb .P0 .Y *_b .Pow (1-_f ,3)+_dfb .P1 .Y *3*_f *_b .Pow (1-_f ,2)+_dfb .P2 .Y *3*_b .Pow (_f ,2)*(1-_f )+_dfb .P3 .Y *_b .Pow (_f ,3);if Rx < _aa {_aa =Rx ;};if Rx > _ab {_ab =Rx ;};if Ry < _ca {_ca =Ry ;};if Ry > _cb {_cb =Ry ;};};_g :=_ba .PdfRectangle {};_g .Llx =_aa ;_g .Lly =_ca ;_g .Urx =_ab ;_g .Ury =_cb ;return _g ;};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// AddVector adds vector to a point.
func (_fca Point )AddVector (v Vector )Point {_fca .X +=v .Dx ;_fca .Y +=v .Dy ;return _fca };

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_aca Line )Draw (gsName string )([]byte ,*_ba .PdfRectangle ,error ){_fe ,_fcg :=_aca .X1 ,_aca .X2 ;_aeg ,_dd :=_aca .Y1 ,_aca .Y2 ;_cce :=_dd -_aeg ;_ccc :=_fcg -_fe ;_abg :=_b .Atan2 (_cce ,_ccc );L :=_b .Sqrt (_b .Pow (_ccc ,2.0)+_b .Pow (_cce ,2.0));_bbc :=_aca .LineWidth ;_fa :=_b .Pi ;_cdd :=1.0;if _ccc < 0{_cdd *=-1.0;};if _cce < 0{_cdd *=-1.0;};VsX :=_cdd *(-_bbc /2*_b .Cos (_abg +_fa /2));VsY :=_cdd *(-_bbc /2*_b .Sin (_abg +_fa /2)+_bbc *_b .Sin (_abg +_fa /2));V1X :=VsX +_bbc /2*_b .Cos (_abg +_fa /2);V1Y :=VsY +_bbc /2*_b .Sin (_abg +_fa /2);V2X :=VsX +_bbc /2*_b .Cos (_abg +_fa /2)+L *_b .Cos (_abg );V2Y :=VsY +_bbc /2*_b .Sin (_abg +_fa /2)+L *_b .Sin (_abg );V3X :=VsX +_bbc /2*_b .Cos (_abg +_fa /2)+L *_b .Cos (_abg )+_bbc *_b .Cos (_abg -_fa /2);V3Y :=VsY +_bbc /2*_b .Sin (_abg +_fa /2)+L *_b .Sin (_abg )+_bbc *_b .Sin (_abg -_fa /2);V4X :=VsX +_bbc /2*_b .Cos (_abg -_fa /2);V4Y :=VsY +_bbc /2*_b .Sin (_abg -_fa /2);_adf :=NewPath ();_adf =_adf .AppendPoint (NewPoint (V1X ,V1Y ));_adf =_adf .AppendPoint (NewPoint (V2X ,V2Y ));_adf =_adf .AppendPoint (NewPoint (V3X ,V3Y ));_adf =_adf .AppendPoint (NewPoint (V4X ,V4Y ));_cde :=_aca .LineEndingStyle1 ;_eca :=_aca .LineEndingStyle2 ;_abga :=3*_bbc ;_dgcf :=3*_bbc ;_edf :=(_dgcf -_bbc )/2;if _eca ==LineEndingStyleArrow {_eaf :=_adf .GetPointNumber (2);_efb :=NewVectorPolar (_abga ,_abg +_fa );_abe :=_eaf .AddVector (_efb );_cab :=NewVectorPolar (_dgcf /2,_abg +_fa /2);_bcc :=NewVectorPolar (_abga ,_abg );_dgg :=NewVectorPolar (_edf ,_abg +_fa /2);_gb :=_abe .AddVector (_dgg );_dcdc :=_bcc .Add (_cab .Flip ());_adb :=_gb .AddVector (_dcdc );_fbf :=_cab .Scale (2).Flip ().Add (_dcdc .Flip ());_abec :=_adb .AddVector (_fbf );_bba :=_abe .AddVector (NewVectorPolar (_bbc ,_abg -_fa /2));_acdd :=NewPath ();_acdd =_acdd .AppendPoint (_adf .GetPointNumber (1));_acdd =_acdd .AppendPoint (_abe );_acdd =_acdd .AppendPoint (_gb );_acdd =_acdd .AppendPoint (_adb );_acdd =_acdd .AppendPoint (_abec );_acdd =_acdd .AppendPoint (_bba );_acdd =_acdd .AppendPoint (_adf .GetPointNumber (4));_adf =_acdd ;};if _cde ==LineEndingStyleArrow {_bf :=_adf .GetPointNumber (1);_egb :=_adf .GetPointNumber (_adf .Length ());_dcc :=NewVectorPolar (_bbc /2,_abg +_fa +_fa /2);_gad :=_bf .AddVector (_dcc );_gc :=NewVectorPolar (_abga ,_abg ).Add (NewVectorPolar (_dgcf /2,_abg +_fa /2));_bgb :=_gad .AddVector (_gc );_cf :=NewVectorPolar (_edf ,_abg -_fa /2);_gde :=_bgb .AddVector (_cf );_cbb :=NewVectorPolar (_abga ,_abg );_ebg :=_egb .AddVector (_cbb );_gcd :=NewVectorPolar (_edf ,_abg +_fa +_fa /2);_cbf :=_ebg .AddVector (_gcd );_ddb :=_gad ;_aad :=NewPath ();_aad =_aad .AppendPoint (_gad );_aad =_aad .AppendPoint (_bgb );_aad =_aad .AppendPoint (_gde );for _ ,_cddd :=range _adf .Points [1:len (_adf .Points )-1]{_aad =_aad .AppendPoint (_cddd );};_aad =_aad .AppendPoint (_ebg );_aad =_aad .AppendPoint (_cbf );_aad =_aad .AppendPoint (_ddb );_adf =_aad ;};_ggg :=_df .NewContentCreator ();_ggg .Add_q ().Add_rg (_aca .LineColor .R (),_aca .LineColor .G (),_aca .LineColor .B ());if len (gsName )> 1{_ggg .Add_gs (_d .PdfObjectName (gsName ));};_adf =_adf .Offset (_aca .X1 ,_aca .Y1 );_fcgf :=_adf .GetBoundingBox ();DrawPathWithCreator (_adf ,_ggg );if _aca .LineStyle ==LineStyleDashed {_ggg .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();}else {_ggg .Add_f ().Add_Q ();};_fbc :=&_ba .PdfRectangle {};_fbc .Llx =_fcgf .X ;_fbc .Lly =_fcgf .Y ;_fbc .Urx =_fcgf .X +_fcgf .Width ;_fbc .Ury =_fcgf .Y +_fcgf .Height ;return _ggg .Bytes (),_fbc ,nil ;};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_ba .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_dc CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_dc .P0 .X +=offX ;_dc .P1 .X +=offX ;_dc .P2 .X +=offX ;_dc .P3 .X +=offX ;_dc .P0 .Y +=offY ;_dc .P1 .Y +=offY ;_dc .P2 .Y +=offY ;_dc .P3 .Y +=offY ;return _dc ;};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_de Circle )Draw (gsName string )([]byte ,*_ba .PdfRectangle ,error ){_geb :=_de .Width /2;_eee :=_de .Height /2;if _de .BorderEnabled {_geb -=_de .BorderWidth /2;_eee -=_de .BorderWidth /2;};_egg :=0.551784;_ed :=_geb *_egg ;_dcd :=_eee *_egg ;_fde :=NewCubicBezierPath ();_fde =_fde .AppendCurve (NewCubicBezierCurve (-_geb ,0,-_geb ,_dcd ,-_ed ,_eee ,0,_eee ));_fde =_fde .AppendCurve (NewCubicBezierCurve (0,_eee ,_ed ,_eee ,_geb ,_dcd ,_geb ,0));_fde =_fde .AppendCurve (NewCubicBezierCurve (_geb ,0,_geb ,-_dcd ,_ed ,-_eee ,0,-_eee ));_fde =_fde .AppendCurve (NewCubicBezierCurve (0,-_eee ,-_ed ,-_eee ,-_geb ,-_dcd ,-_geb ,0));_fde =_fde .Offset (_geb ,_eee );if _de .BorderEnabled {_fde =_fde .Offset (_de .BorderWidth /2,_de .BorderWidth /2);};if _de .X !=0||_de .Y !=0{_fde =_fde .Offset (_de .X ,_de .Y );};_gae :=_df .NewContentCreator ();_gae .Add_q ();if _de .FillEnabled {_gae .Add_rg (_de .FillColor .R (),_de .FillColor .G (),_de .FillColor .B ());};if _de .BorderEnabled {_gae .Add_RG (_de .BorderColor .R (),_de .BorderColor .G (),_de .BorderColor .B ());_gae .Add_w (_de .BorderWidth );};if len (gsName )> 1{_gae .Add_gs (_d .PdfObjectName (gsName ));};DrawBezierPathWithCreator (_fde ,_gae );_gae .Add_h ();if _de .FillEnabled &&_de .BorderEnabled {_gae .Add_B ();}else if _de .FillEnabled {_gae .Add_f ();}else if _de .BorderEnabled {_gae .Add_S ();};_gae .Add_Q ();_agb :=_fde .GetBoundingBox ();if _de .BorderEnabled {_agb .Height +=_de .BorderWidth ;_agb .Width +=_de .BorderWidth ;_agb .X -=_de .BorderWidth /2;_agb .Y -=_de .BorderWidth /2;};_cc :=&_ba .PdfRectangle {};_cc .Llx =_agb .X ;_cc .Lly =_agb .Y ;_cc .Urx =_agb .X +_agb .Width ;_cc .Ury =_agb .Y +_agb .Height ;return _gae .Bytes (),_cc ,nil ;};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_ece Path )RemovePoint (number int )Path {if number < 1||number > len (_ece .Points ){return _ece ;};_dbb :=number -1;_ece .Points =append (_ece .Points [:_dbb ],_ece .Points [_dbb +1:]...);return _ece ;};

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_ec :=CubicBezierPath {};_ec .Curves =[]CubicBezierCurve {};return _ec ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_add Vector )GetPolarAngle ()float64 {return _b .Atan2 (_add .Dy ,_add .Dx )};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_adg CubicBezierPath )GetBoundingBox ()Rectangle {_db :=Rectangle {};_ce :=0.0;_eb :=0.0;_dbf :=0.0;_ae :=0.0;for _dbe ,_aac :=range _adg .Curves {_fd :=_aac .GetBounds ();if _dbe ==0{_ce =_fd .Llx ;_eb =_fd .Urx ;_dbf =_fd .Lly ;_ae =_fd .Ury ;continue ;};if _fd .Llx < _ce {_ce =_fd .Llx ;};if _fd .Urx > _eb {_eb =_fd .Urx ;};if _fd .Lly < _dbf {_dbf =_fd .Lly ;};if _fd .Ury > _ae {_ae =_fd .Ury ;};};_db .X =_ce ;_db .Y =_dbf ;_db .Width =_eb -_ce ;_db .Height =_ae -_dbf ;return _db ;};

// Magnitude returns the magnitude of the vector.
func (_agc Vector )Magnitude ()float64 {return _b .Sqrt (_b .Pow (_agc .Dx ,2.0)+_b .Pow (_agc .Dy ,2.0))};

// AppendPoint adds the specified point to the path.
func (_gac Path )AppendPoint (point Point )Path {_gac .Points =append (_gac .Points ,point );return _gac };

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_fg :=Vector {};_fg .Dx =b .X -a .X ;_fg .Dy =b .Y -a .Y ;return _fg ;};