//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_bf "bufio";_a "bytes";_bg "encoding/hex";_f "errors";_bfb "fmt";_ffg "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/core";_ag "github.com/unidoc/unipdf/v3/internal/imageutil";_fg "github.com/unidoc/unipdf/v3/internal/transform";_ff "github.com/unidoc/unipdf/v3/model";_d "image/color";_gb "image/jpeg";_fe "io";_dg "math";_g "strconv";);func (_cbdg *ContentStreamProcessor )getInitialColor (_efd _ff .PdfColorspace )(_ff .PdfColor ,error ){switch _acf :=_efd .(type ){case *_ff .PdfColorspaceDeviceGray :return _ff .NewPdfColorDeviceGray (0.0),nil ;case *_ff .PdfColorspaceDeviceRGB :return _ff .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_ff .PdfColorspaceDeviceCMYK :return _ff .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_ff .PdfColorspaceCalGray :return _ff .NewPdfColorCalGray (0.0),nil ;case *_ff .PdfColorspaceCalRGB :return _ff .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_ff .PdfColorspaceLab :_geb :=0.0;_dddd :=0.0;_cfcag :=0.0;if _acf .Range [0]> 0{_geb =_acf .Range [0];};if _acf .Range [2]> 0{_dddd =_acf .Range [2];};return _ff .NewPdfColorLab (_geb ,_dddd ,_cfcag ),nil ;case *_ff .PdfColorspaceICCBased :if _acf .Alternate ==nil {_ffg .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_acf .N );if _acf .N ==1{_ffg .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _cbdg .getInitialColor (_ff .NewPdfColorspaceDeviceGray ());}else if _acf .N ==3{_ffg .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _cbdg .getInitialColor (_ff .NewPdfColorspaceDeviceRGB ());}else if _acf .N ==4{_ffg .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _cbdg .getInitialColor (_ff .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_f .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _cbdg .getInitialColor (_acf .Alternate );case *_ff .PdfColorspaceSpecialIndexed :if _acf .Base ==nil {return nil ,_f .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _cbdg .getInitialColor (_acf .Base );case *_ff .PdfColorspaceSpecialSeparation :if _acf .AlternateSpace ==nil {return nil ,_f .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _cbdg .getInitialColor (_acf .AlternateSpace );case *_ff .PdfColorspaceDeviceN :if _acf .AlternateSpace ==nil {return nil ,_f .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _cbdg .getInitialColor (_acf .AlternateSpace );case *_ff .PdfColorspaceSpecialPattern :return nil ,nil ;};_ffg .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_efd );return nil ,_f .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// AddOperand adds a specified operand.
func (_cfc *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_cfc ._fc =append (_cfc ._fc ,&op );return _cfc ;};var (ErrInvalidOperand =_f .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_ceb *ContentCreator )Add_W ()*ContentCreator {_gcd :=ContentStreamOperation {};_gcd .Operand ="\u0057";_ceb ._fc =append (_ceb ._fc ,&_gcd );return _ceb ;};func (_fcddg *ContentStreamParser )parseString ()(*_c .PdfObjectString ,error ){_fcddg ._fcdc .ReadByte ();var _efc []byte ;_ebed :=1;for {_ega ,_fdaa :=_fcddg ._fcdc .Peek (1);if _fdaa !=nil {return _c .MakeString (string (_efc )),_fdaa ;};if _ega [0]=='\\'{_fcddg ._fcdc .ReadByte ();_bdbe ,_adb :=_fcddg ._fcdc .ReadByte ();if _adb !=nil {return _c .MakeString (string (_efc )),_adb ;};if _c .IsOctalDigit (_bdbe ){_begd ,_bge :=_fcddg ._fcdc .Peek (2);if _bge !=nil {return _c .MakeString (string (_efc )),_bge ;};var _bage []byte ;_bage =append (_bage ,_bdbe );for _ ,_bfdd :=range _begd {if _c .IsOctalDigit (_bfdd ){_bage =append (_bage ,_bfdd );}else {break ;};};_fcddg ._fcdc .Discard (len (_bage )-1);_ffg .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_bage );_bdcb ,_bge :=_g .ParseUint (string (_bage ),8,32);if _bge !=nil {return _c .MakeString (string (_efc )),_bge ;};_efc =append (_efc ,byte (_bdcb ));continue ;};switch _bdbe {case 'n':_efc =append (_efc ,'\n');case 'r':_efc =append (_efc ,'\r');case 't':_efc =append (_efc ,'\t');case 'b':_efc =append (_efc ,'\b');case 'f':_efc =append (_efc ,'\f');case '(':_efc =append (_efc ,'(');case ')':_efc =append (_efc ,')');case '\\':_efc =append (_efc ,'\\');};continue ;}else if _ega [0]=='('{_ebed ++;}else if _ega [0]==')'{_ebed --;if _ebed ==0{_fcddg ._fcdc .ReadByte ();break ;};};_bff ,_ :=_fcddg ._fcdc .ReadByte ();_efc =append (_efc ,_bff );};return _c .MakeString (string (_efc )),nil ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bcf *ContentCreator )Add_quotes (textstr _c .PdfObjectString ,aw ,ac float64 )*ContentCreator {_ecc :=ContentStreamOperation {};_ecc .Operand ="\u0022";_ecc .Params =_bggg ([]float64 {aw ,ac });_ecc .Params =append (_ecc .Params ,_aaea ([]_c .PdfObjectString {textstr })...);_bcf ._fc =append (_bcf ._fc ,&_ecc );return _bcf ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _ff .PdfColorspace ;ColorspaceNonStroking _ff .PdfColorspace ;ColorStroking _ff .PdfColor ;ColorNonStroking _ff .PdfColor ;CTM _fg .Matrix ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fgad *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_agc :=ContentStreamOperation {};_agc .Operand ="\u004a";_agc .Params =_fcad ([]_c .PdfObjectName {_c .PdfObjectName (lineCapStyle )});_fgad ._fc =append (_fgad ._fc ,&_agc );return _fgad ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_dda *ContentCreator )Wrap (){_dda ._fc .WrapIfNeeded ()};

// Parse parses all commands in content stream, returning a list of operation data.
func (_cga *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_eefe :=ContentStreamOperations {};for {_dacbb :=ContentStreamOperation {};for {_aedg ,_bcfc ,_dacf :=_cga .parseObject ();if _dacf !=nil {if _dacf ==_fe .EOF {return &_eefe ,nil ;};return &_eefe ,_dacf ;};if _bcfc {_dacbb .Operand ,_ =_c .GetStringVal (_aedg );_eefe =append (_eefe ,&_dacbb );break ;}else {_dacbb .Params =append (_dacbb .Params ,_aedg );};};if _dacbb .Operand =="\u0042\u0049"{_eefd ,_fgg :=_cga .ParseInlineImage ();if _fgg !=nil {return &_eefe ,_fgg ;};_dacbb .Params =append (_dacbb .Params ,_eefd );};};};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_fa *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_fa )==0{return _fa ;};if _fa .isWrapped (){return _fa ;};*_fa =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_fa ...);_cfg :=0;for _ ,_bc :=range *_fa {if _bc .Operand =="\u0071"{_cfg ++;}else if _bc .Operand =="\u0051"{_cfg --;};};for _cfg > 0{*_fa =append (*_fa ,&ContentStreamOperation {Operand :"\u0051"});_cfg --;};return _fa ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_dde *ContentStreamOperation ,_gfbg GraphicsState ,_cec *_ff .PdfPageResources )error ;

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bbcg *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_dae :=ContentStreamOperation {};_dae .Operand ="\u0072\u0067";_dae .Params =_bggg ([]float64 {r ,g ,b });_bbcg ._fc =append (_bbcg ._fc ,&_dae );return _bbcg ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_dfg :=&ContentCreator {};_dfg ._fc =ContentStreamOperations {};return _dfg ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_fga *ContentStreamParser )ExtractText ()(string ,error ){_dee ,_daa :=_fga .Parse ();if _daa !=nil {return "",_daa ;};_fd :=false ;_dc ,_dac :=float64 (-1),float64 (-1);_ffb :="";for _ ,_bdb :=range *_dee {if _bdb .Operand =="\u0042\u0054"{_fd =true ;}else if _bdb .Operand =="\u0045\u0054"{_fd =false ;};if _bdb .Operand =="\u0054\u0064"||_bdb .Operand =="\u0054\u0044"||_bdb .Operand =="\u0054\u002a"{_ffb +="\u000a";};if _bdb .Operand =="\u0054\u006d"{if len (_bdb .Params )!=6{continue ;};_ca ,_dd :=_bdb .Params [4].(*_c .PdfObjectFloat );if !_dd {_ddd ,_db :=_bdb .Params [4].(*_c .PdfObjectInteger );if !_db {continue ;};_ca =_c .MakeFloat (float64 (*_ddd ));};_aea ,_dd :=_bdb .Params [5].(*_c .PdfObjectFloat );if !_dd {_bfa ,_bcc :=_bdb .Params [5].(*_c .PdfObjectInteger );if !_bcc {continue ;};_aea =_c .MakeFloat (float64 (*_bfa ));};if _dac ==-1{_dac =float64 (*_aea );}else if _dac > float64 (*_aea ){_ffb +="\u000a";_dc =float64 (*_ca );_dac =float64 (*_aea );continue ;};if _dc ==-1{_dc =float64 (*_ca );}else if _dc < float64 (*_ca ){_ffb +="\u0009";_dc =float64 (*_ca );};};if _fd &&_bdb .Operand =="\u0054\u004a"{if len (_bdb .Params )< 1{continue ;};_bca ,_ac :=_bdb .Params [0].(*_c .PdfObjectArray );if !_ac {return "",_bfb .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_bdb .Params [0]);};for _ ,_dacb :=range _bca .Elements (){switch _fdc :=_dacb .(type ){case *_c .PdfObjectString :_ffb +=_fdc .Str ();case *_c .PdfObjectFloat :if *_fdc < -100{_ffb +="\u0020";};case *_c .PdfObjectInteger :if *_fdc < -100{_ffb +="\u0020";};};};}else if _fd &&_bdb .Operand =="\u0054\u006a"{if len (_bdb .Params )< 1{continue ;};_ec ,_bgf :=_bdb .Params [0].(*_c .PdfObjectString );if !_bgf {return "",_bfb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_bdb .Params [0]);};_ffb +=_ec .Str ();};};return _ffb ,nil ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gea *ContentCreator )Add_Tr (render int64 )*ContentCreator {_dcg :=ContentStreamOperation {};_dcg .Operand ="\u0054\u0072";_dcg .Params =_ebacf ([]int64 {render });_gea ._fc =append (_gea ._fc ,&_dcg );return _gea ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_ecba *ContentCreator )Add_Tj (textstr _c .PdfObjectString )*ContentCreator {_gfa :=ContentStreamOperation {};_gfa .Operand ="\u0054\u006a";_gfa .Params =_aaea ([]_c .PdfObjectString {textstr });_ecba ._fc =append (_ecba ._fc ,&_gfa );return _ecba ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_beg *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_geg :=ContentStreamOperation {};_geg .Operand ="\u0077";_geg .Params =_bggg ([]float64 {lineWidth });_beg ._fc =append (_beg ._fc ,&_geg );return _beg ;};var _eef =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// WriteString outputs the object as it is to be written to file.
func (_ebf *ContentStreamInlineImage )WriteString ()string {var _fcef _a .Buffer ;_adag :="";if _ebf .BitsPerComponent !=nil {_adag +="\u002f\u0042\u0050C\u0020"+_ebf .BitsPerComponent .WriteString ()+"\u000a";};if _ebf .ColorSpace !=nil {_adag +="\u002f\u0043\u0053\u0020"+_ebf .ColorSpace .WriteString ()+"\u000a";};if _ebf .Decode !=nil {_adag +="\u002f\u0044\u0020"+_ebf .Decode .WriteString ()+"\u000a";};if _ebf .DecodeParms !=nil {_adag +="\u002f\u0044\u0050\u0020"+_ebf .DecodeParms .WriteString ()+"\u000a";};if _ebf .Filter !=nil {_adag +="\u002f\u0046\u0020"+_ebf .Filter .WriteString ()+"\u000a";};if _ebf .Height !=nil {_adag +="\u002f\u0048\u0020"+_ebf .Height .WriteString ()+"\u000a";};if _ebf .ImageMask !=nil {_adag +="\u002f\u0049\u004d\u0020"+_ebf .ImageMask .WriteString ()+"\u000a";};if _ebf .Intent !=nil {_adag +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_ebf .Intent .WriteString ()+"\u000a";};if _ebf .Interpolate !=nil {_adag +="\u002f\u0049\u0020"+_ebf .Interpolate .WriteString ()+"\u000a";};if _ebf .Width !=nil {_adag +="\u002f\u0057\u0020"+_ebf .Width .WriteString ()+"\u000a";};_fcef .WriteString (_adag );_fcef .WriteString ("\u0049\u0044\u0020");_fcef .Write (_ebf ._gdc );_fcef .WriteString ("\u000a\u0045\u0049\u000a");return _fcef .String ();};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ea *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_bbf :=ContentStreamOperation {};_bbf .Operand ="\u0053\u0043";_bbf .Params =_bggg (c );_ea ._fc =append (_ea ._fc ,&_bbf );return _ea ;};

// Scale applies x-y scaling to the transformation matrix.
func (_af *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _af .Add_cm (sx ,0,0,sy ,0,0);};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_afea *ContentCreator )Add_EMC ()*ContentCreator {_gbe :=ContentStreamOperation {};_gbe .Operand ="\u0045\u004d\u0043";_afea ._fc =append (_afea ._fc ,&_gbe );return _afea ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_agcb *ContentCreator )Add_quote (textstr _c .PdfObjectString )*ContentCreator {_fafe :=ContentStreamOperation {};_fafe .Operand ="\u0027";_fafe .Params =_aaea ([]_c .PdfObjectString {textstr });_agcb ._fc =append (_agcb ._fc ,&_fafe );return _agcb ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cbb *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_eba :=ContentStreamOperation {};_eba .Operand ="\u0054\u0063";_eba .Params =_bggg ([]float64 {charSpace });_cbb ._fc =append (_cbb ._fc ,&_eba );return _cbb ;};func _ggec (_cdd string )bool {_ ,_gadg :=_eef [_cdd ];return _gadg };

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_eca *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_cbgc :=ContentStreamOperation {};_cbgc .Operand ="\u0076";_cbgc .Params =_bggg ([]float64 {x2 ,y2 ,x3 ,y3 });_eca ._fc =append (_eca ._fc ,&_cbgc );return _eca ;};func (_ggg *ContentStreamParser )parseNumber ()(_c .PdfObject ,error ){return _c .ParseNumber (_ggg ._fcdc );};func (_egbd *ContentStreamProcessor )handleCommand_G (_ffe *ContentStreamOperation ,_ggd *_ff .PdfPageResources )error {_cefe :=_ff .NewPdfColorspaceDeviceGray ();if len (_ffe .Params )!=_cefe .GetNumComponents (){_ffg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ffg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ffe .Params ),_cefe );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fegf ,_ffba :=_cefe .ColorFromPdfObjects (_ffe .Params );if _ffba !=nil {return _ffba ;};_egbd ._ecbge .ColorspaceStroking =_cefe ;_egbd ._ecbge .ColorStroking =_fegf ;return nil ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ddg *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_ba :=ContentStreamOperation {};_ba .Operand ="\u004d";_ba .Params =_bggg ([]float64 {miterlimit });_ddg ._fc =append (_ddg ._fc ,&_ba );return _ddg ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gdg *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_dbf :=ContentStreamOperation {};_dbf .Operand ="\u0063\u006d";_dbf .Params =_bggg ([]float64 {a ,b ,c ,d ,e ,f });_gdg ._fc =append (_gdg ._fc ,&_dbf );return _gdg ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gedb *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_eg :=ContentStreamOperation {};_eg .Operand ="\u006a";_eg .Params =_fcad ([]_c .PdfObjectName {_c .PdfObjectName (lineJoinStyle )});_gedb ._fc =append (_gedb ._fc ,&_eg );return _gedb ;};func (_bcg *ContentStreamProcessor )handleCommand_cs (_abcc *ContentStreamOperation ,_cff *_ff .PdfPageResources )error {if len (_abcc .Params )< 1{_ffg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _f .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_abcc .Params )> 1{_ffg .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _f .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_fcdda ,_gfe :=_abcc .Params [0].(*_c .PdfObjectName );if !_gfe {_ffg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_gab ,_dfcd :=_bcg .getColorspace (string (*_fcdda ),_cff );if _dfcd !=nil {return _dfcd ;};_bcg ._ecbge .ColorspaceNonStroking =_gab ;_feg ,_dfcd :=_bcg .getInitialColor (_gab );if _dfcd !=nil {return _dfcd ;};_bcg ._ecbge .ColorNonStroking =_feg ;return nil ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eag *ContentCreator )Add_TL (leading float64 )*ContentCreator {_ecf :=ContentStreamOperation {};_ecf .Operand ="\u0054\u004c";_ecf .Params =_bggg ([]float64 {leading });_eag ._fc =append (_eag ._fc ,&_ecf );return _eag ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _c .PdfObject ;ColorSpace _c .PdfObject ;Decode _c .PdfObject ;DecodeParms _c .PdfObject ;Filter _c .PdfObject ;Height _c .PdfObject ;ImageMask _c .PdfObject ;Intent _c .PdfObject ;Interpolate _c .PdfObject ;Width _c .PdfObject ;_gdc []byte ;_gbc *_ag .ImageBase ;};

// GetColorSpace returns the colorspace of the inline image.
func (_bfda *ContentStreamInlineImage )GetColorSpace (resources *_ff .PdfPageResources )(_ff .PdfColorspace ,error ){if _bfda .ColorSpace ==nil {_ffg .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _ff .NewPdfColorspaceDeviceGray (),nil ;};if _gga ,_acb :=_bfda .ColorSpace .(*_c .PdfObjectArray );_acb {return _cbab (_gga );};_fbe ,_cfca :=_bfda .ColorSpace .(*_c .PdfObjectName );if !_cfca {_ffg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_bfda .ColorSpace ,_bfda .ColorSpace );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fbe =="\u0047"||*_fbe =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _ff .NewPdfColorspaceDeviceGray (),nil ;}else if *_fbe =="\u0052\u0047\u0042"||*_fbe =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _ff .NewPdfColorspaceDeviceRGB (),nil ;}else if *_fbe =="\u0043\u004d\u0059\u004b"||*_fbe =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _ff .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_fbe =="\u0049"||*_fbe =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_f .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_ffg .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_fbe );return nil ,_f .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_bgg ,_badb :=resources .GetColorspaceByName (*_fbe );if !_badb {_ffg .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_fbe );return nil ,_f .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _bgg ,nil ;};};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bccg *ContentCreator )Add_s ()*ContentCreator {_cba :=ContentStreamOperation {};_cba .Operand ="\u0073";_bccg ._fc =append (_bccg ._fc ,&_cba );return _bccg ;};func (_dgc *ContentStreamProcessor )handleCommand_SC (_gcdf *ContentStreamOperation ,_bbeb *_ff .PdfPageResources )error {_fec :=_dgc ._ecbge .ColorspaceStroking ;if len (_gcdf .Params )!=_fec .GetNumComponents (){_ffg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ffg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gcdf .Params ),_fec );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cgcbe ,_ggag :=_fec .ColorFromPdfObjects (_gcdf .Params );if _ggag !=nil {return _ggag ;};_dgc ._ecbge .ColorStroking =_cgcbe ;return nil ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_df *ContentStreamOperations )Bytes ()[]byte {var _bb _a .Buffer ;for _ ,_e :=range *_df {if _e ==nil {continue ;};if _e .Operand =="\u0042\u0049"{_bb .WriteString (_e .Operand +"\u000a");_bb .WriteString (_e .Params [0].WriteString ());}else {for _ ,_bd :=range _e .Params {_bb .WriteString (_bd .WriteString ());_bb .WriteString ("\u0020");};_bb .WriteString (_e .Operand +"\u000a");};};return _bb .Bytes ();};func (_cfcgd *ContentStreamProcessor )handleCommand_k (_bbcc *ContentStreamOperation ,_agab *_ff .PdfPageResources )error {_dffa :=_ff .NewPdfColorspaceDeviceCMYK ();if len (_bbcc .Params )!=_dffa .GetNumComponents (){_ffg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ffg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bbcc .Params ),_dffa );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fcc ,_cggf :=_dffa .ColorFromPdfObjects (_bbcc .Params );if _cggf !=nil {return _cggf ;};_cfcgd ._ecbge .ColorspaceNonStroking =_dffa ;_cfcgd ._ecbge .ColorNonStroking =_fcc ;return nil ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bbc *ContentCreator )Add_g (gray float64 )*ContentCreator {_baa :=ContentStreamOperation {};_baa .Operand ="\u0067";_baa .Params =_bggg ([]float64 {gray });_bbc ._fc =append (_bbc ._fc ,&_baa );return _bbc ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_faf *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _faf .Add_cm (1,0,0,1,tx ,ty );};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_cfaf *ContentCreator )Add_sh (name _c .PdfObjectName )*ContentCreator {_fbf :=ContentStreamOperation {};_fbf .Operand ="\u0073\u0068";_fbf .Params =_fcad ([]_c .PdfObjectName {name });_cfaf ._fc =append (_cfaf ._fc ,&_fbf );return _cfaf ;};func _gge (_bce *ContentStreamInlineImage )(_c .StreamEncoder ,error ){if _bce .Filter ==nil {return _c .NewRawEncoder (),nil ;};_ccg ,_gfb :=_bce .Filter .(*_c .PdfObjectName );if !_gfb {_fdb ,_efg :=_bce .Filter .(*_c .PdfObjectArray );if !_efg {return nil ,_bfb .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _fdb .Len ()==0{return _c .NewRawEncoder (),nil ;};if _fdb .Len ()!=1{_fbd ,_gac :=_dga (_bce );if _gac !=nil {_ffg .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_gac );return nil ,_gac ;};_ffg .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_fbd );return _fbd ,nil ;};_gee :=_fdb .Get (0);_ccg ,_efg =_gee .(*_c .PdfObjectName );if !_efg {return nil ,_bfb .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_ccg {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _c .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _c .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _dfe (_bce );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _ddgg (_bce ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _fceb (_bce ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _c .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _c .NewRunLengthEncoder (),nil ;default:_ffg .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_ccg );return nil ,_f .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dbce *ContentCreator )Add_f ()*ContentCreator {_efa :=ContentStreamOperation {};_efa .Operand ="\u0066";_dbce ._fc =append (_dbce ._fc ,&_efa );return _dbce ;};func (_aeae *ContentStreamProcessor )handleCommand_rg (_cecg *ContentStreamOperation ,_bgfe *_ff .PdfPageResources )error {_dafb :=_ff .NewPdfColorspaceDeviceRGB ();if len (_cecg .Params )!=_dafb .GetNumComponents (){_ffg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ffg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cecg .Params ),_dafb );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cgec ,_abf :=_dafb .ColorFromPdfObjects (_cecg .Params );if _abf !=nil {return _abf ;};_aeae ._ecbge .ColorspaceNonStroking =_dafb ;_aeae ._ecbge .ColorNonStroking =_cgec ;return nil ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bec *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_bcdd :=ContentStreamOperation {};_bcdd .Operand ="\u0053\u0043\u004e";_bcdd .Params =_bggg (c );_bec ._fc =append (_bec ._fc ,&_bcdd );return _bec ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_egg *ContentCreator )Add_ET ()*ContentCreator {_cfeff :=ContentStreamOperation {};_cfeff .Operand ="\u0045\u0054";_egg ._fc =append (_egg ._fc ,&_cfeff );return _egg ;};func (_fcea *ContentStreamInlineImage )String ()string {_eggg :=_bfb .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_fcea ._gdc ));if _fcea .BitsPerComponent !=nil {_eggg +="\u002d\u0020\u0042\u0050\u0043\u0020"+_fcea .BitsPerComponent .WriteString ()+"\u000a";};if _fcea .ColorSpace !=nil {_eggg +="\u002d\u0020\u0043S\u0020"+_fcea .ColorSpace .WriteString ()+"\u000a";};if _fcea .Decode !=nil {_eggg +="\u002d\u0020\u0044\u0020"+_fcea .Decode .WriteString ()+"\u000a";};if _fcea .DecodeParms !=nil {_eggg +="\u002d\u0020\u0044P\u0020"+_fcea .DecodeParms .WriteString ()+"\u000a";};if _fcea .Filter !=nil {_eggg +="\u002d\u0020\u0046\u0020"+_fcea .Filter .WriteString ()+"\u000a";};if _fcea .Height !=nil {_eggg +="\u002d\u0020\u0048\u0020"+_fcea .Height .WriteString ()+"\u000a";};if _fcea .ImageMask !=nil {_eggg +="\u002d\u0020\u0049M\u0020"+_fcea .ImageMask .WriteString ()+"\u000a";};if _fcea .Intent !=nil {_eggg +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_fcea .Intent .WriteString ()+"\u000a";};if _fcea .Interpolate !=nil {_eggg +="\u002d\u0020\u0049\u0020"+_fcea .Interpolate .WriteString ()+"\u000a";};if _fcea .Width !=nil {_eggg +="\u002d\u0020\u0057\u0020"+_fcea .Width .WriteString ()+"\u000a";};return _eggg ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_cea *ContentStreamInlineImage )IsMask ()(bool ,error ){if _cea .ImageMask !=nil {_effd ,_aeb :=_cea .ImageMask .(*_c .PdfObjectBool );if !_aeb {_ffg .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_f .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_effd ),nil ;};return false ,nil ;};func _adfe (_bgbf _ff .PdfColorspace )bool {_ ,_edcg :=_bgbf .(*_ff .PdfColorspaceSpecialPattern );return _edcg ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;func (_cfba *ContentStreamProcessor )handleCommand_K (_dgfa *ContentStreamOperation ,_aaa *_ff .PdfPageResources )error {_cca :=_ff .NewPdfColorspaceDeviceCMYK ();if len (_dgfa .Params )!=_cca .GetNumComponents (){_ffg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ffg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dgfa .Params ),_cca );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_abce ,_dfcde :=_cca .ColorFromPdfObjects (_dgfa .Params );if _dfcde !=nil {return _dfcde ;};_cfba ._ecbge .ColorspaceStroking =_cca ;_cfba ._ecbge .ColorStroking =_abce ;return nil ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fdd *ContentCreator )Add_f_starred ()*ContentCreator {_ab :=ContentStreamOperation {};_ab .Operand ="\u0066\u002a";_fdd ._fc =append (_fdd ._fc ,&_ab );return _fdd ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_egc *ContentCreator )Add_gs (dictName _c .PdfObjectName )*ContentCreator {_bbb :=ContentStreamOperation {};_bbb .Operand ="\u0067\u0073";_bbb .Params =_fcad ([]_c .PdfObjectName {dictName });_egc ._fc =append (_egc ._fc ,&_bbb );return _egc ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fac *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_abc :=ContentStreamOperation {};_abc .Operand ="\u004b";_abc .Params =_bggg ([]float64 {c ,m ,y ,k });_fac ._fc =append (_fac ._fc ,&_abc );return _fac ;};

// String returns `ops.Bytes()` as a string.
func (_de *ContentStreamOperations )String ()string {return string (_de .Bytes ())};func (_bcb *ContentStreamParser )skipSpaces ()(int ,error ){_dfabc :=0;for {_cce ,_gdee :=_bcb ._fcdc .Peek (1);if _gdee !=nil {return 0,_gdee ;};if _c .IsWhiteSpace (_cce [0]){_bcb ._fcdc .ReadByte ();_dfabc ++;}else {break ;};};return _dfabc ,nil ;};func (_aegd *ContentStreamProcessor )getColorspace (_efgb string ,_gdce *_ff .PdfPageResources )(_ff .PdfColorspace ,error ){switch _efgb {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _ff .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _ff .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _ff .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _ff .NewPdfColorspaceSpecialPattern (),nil ;};_cccb ,_cgcc :=_gdce .GetColorspaceByName (_c .PdfObjectName (_efgb ));if _cgcc {return _cccb ,nil ;};switch _efgb {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _ff .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _ff .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _ff .NewPdfColorspaceLab (),nil ;};_ffg .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_efgb );return nil ,_bfb .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_efgb );};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_age *ContentCreator )Add_TJ (vals ..._c .PdfObject )*ContentCreator {_gca :=ContentStreamOperation {};_gca .Operand ="\u0054\u004a";_gca .Params =[]_c .PdfObject {_c .MakeArray (vals ...)};_age ._fc =append (_age ._fc ,&_gca );return _age ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_fc ContentStreamOperations };

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_gbf *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_eeg :=ContentStreamOperation {};_eeg .Operand ="\u0054\u0064";_eeg .Params =_bggg ([]float64 {tx ,ty });_gbf ._fc =append (_gbf ._fc ,&_eeg );return _gbf ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_caa *ContentCreator )Add_BT ()*ContentCreator {_acc :=ContentStreamOperation {};_acc .Operand ="\u0042\u0054";_caa ._fc =append (_caa ._fc ,&_acc );return _caa ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bdf *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_gad :=ContentStreamOperation {};_gad .Operand ="\u0063";_gad .Params =_bggg ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_bdf ._fc =append (_bdf ._fc ,&_gad );return _bdf ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_agfb GraphicStateStack ;_edfa []*ContentStreamOperation ;_ecbge GraphicsState ;_bbd []handlerEntry ;_bgbc int ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bbe *ContentCreator )Add_S ()*ContentCreator {_ef :=ContentStreamOperation {};_ef .Operand ="\u0053";_bbe ._fc =append (_bbe ._fc ,&_ef );return _bbe ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ffbf *ContentCreator )Add_i (flatness float64 )*ContentCreator {_ga :=ContentStreamOperation {};_ga .Operand ="\u0069";_ga .Params =_bggg ([]float64 {flatness });_ffbf ._fc =append (_ffbf ._fc ,&_ga );return _ffbf ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_afe *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_cfa :=ContentStreamOperation {};_cfa .Operand ="\u0079";_cfa .Params =_bggg ([]float64 {x1 ,y1 ,x3 ,y3 });_afe ._fc =append (_afe ._fc ,&_cfa );return _afe ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fgc *ContentCreator )Add_B ()*ContentCreator {_cbf :=ContentStreamOperation {};_cbf .Operand ="\u0042";_fgc ._fc =append (_fgc ._fc ,&_cbf );return _fgc ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gf *ContentCreator )Add_cs (name _c .PdfObjectName )*ContentCreator {_fgcc :=ContentStreamOperation {};_fgcc .Operand ="\u0063\u0073";_fgcc .Params =_fcad ([]_c .PdfObjectName {name });_gf ._fc =append (_gf ._fc ,&_fgcc );return _gf ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;func (_ebb *ContentStreamProcessor )handleCommand_sc (_ecee *ContentStreamOperation ,_fdcc *_ff .PdfPageResources )error {_gfg :=_ebb ._ecbge .ColorspaceNonStroking ;if !_adfe (_gfg ){if len (_ecee .Params )!=_gfg .GetNumComponents (){_ffg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ffg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ecee .Params ),_gfg );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_fbg ,_gfeg :=_gfg .ColorFromPdfObjects (_ecee .Params );if _gfeg !=nil {return _gfeg ;};_ebb ._ecbge .ColorNonStroking =_fbg ;return nil ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_egcc *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_edfg :=ContentStreamInlineImage {};for {_egcc .skipSpaces ();_abg ,_fgafe ,_ebac :=_egcc .parseObject ();if _ebac !=nil {return nil ,_ebac ;};if !_fgafe {_eddf ,_ece :=_c .GetName (_abg );if !_ece {_ffg .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_abg );return nil ,_bfb .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_abg );};_daf ,_efaa ,_gbcc :=_egcc .parseObject ();if _gbcc !=nil {return nil ,_gbcc ;};if _efaa {return nil ,_bfb .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_eddf {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_edfg .BitsPerComponent =_daf ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_edfg .ColorSpace =_daf ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_edfg .Decode =_daf ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_edfg .DecodeParms =_daf ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_edfg .Filter =_daf ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_edfg .Height =_daf ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_edfg .ImageMask =_daf ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_edfg .Intent =_daf ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_edfg .Interpolate =_daf ;case "\u0057","\u0057\u0069\u0064t\u0068":_edfg .Width =_daf ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_ffg .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_eddf );default:return nil ,_bfb .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_eddf );};};if _fgafe {_afef ,_cdcf :=_abg .(*_c .PdfObjectString );if !_cdcf {return nil ,_bfb .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _afef .Str ()=="\u0045\u0049"{_ffg .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_edfg ,nil ;}else if _afef .Str ()=="\u0049\u0044"{_ffg .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_cade ,_acd :=_egcc ._fcdc .Peek (1);if _acd !=nil {return nil ,_acd ;};if _c .IsWhiteSpace (_cade [0]){_egcc ._fcdc .Discard (1);};_edfg ._gdc =[]byte {};_fbee :=0;var _cfbg []byte ;for {_befb ,_bdc :=_egcc ._fcdc .ReadByte ();if _bdc !=nil {_ffg .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_bdc ;};if _fbee ==0{if _c .IsWhiteSpace (_befb ){_cfbg =[]byte {};_cfbg =append (_cfbg ,_befb );_fbee =1;}else if _befb =='E'{_cfbg =append (_cfbg ,_befb );_fbee =2;}else {_edfg ._gdc =append (_edfg ._gdc ,_befb );};}else if _fbee ==1{_cfbg =append (_cfbg ,_befb );if _befb =='E'{_fbee =2;}else {_edfg ._gdc =append (_edfg ._gdc ,_cfbg ...);_cfbg =[]byte {};if _c .IsWhiteSpace (_befb ){_fbee =1;}else {_fbee =0;};};}else if _fbee ==2{_cfbg =append (_cfbg ,_befb );if _befb =='I'{_fbee =3;}else {_edfg ._gdc =append (_edfg ._gdc ,_cfbg ...);_cfbg =[]byte {};_fbee =0;};}else if _fbee ==3{_cfbg =append (_cfbg ,_befb );if _c .IsWhiteSpace (_befb ){_fca ,_dabc :=_egcc ._fcdc .Peek (20);if _dabc !=nil &&_dabc !=_fe .EOF {return nil ,_dabc ;};_ebe :=NewContentStreamParser (string (_fca ));_ced :=true ;for _agf :=0;_agf < 3;_agf ++{_bag ,_ddf ,_ffaf :=_ebe .parseObject ();if _ffaf !=nil {if _ffaf ==_fe .EOF {break ;};continue ;};if _ddf &&!_ggec (_bag .String ()){_ced =false ;break ;};};if _ced {if len (_edfg ._gdc )> 100{_ffg .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_edfg ._gdc ),_edfg ._gdc [:100]);}else {_ffg .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_edfg ._gdc ),_edfg ._gdc );};return &_edfg ,nil ;};};_edfg ._gdc =append (_edfg ._gdc ,_cfbg ...);_cfbg =[]byte {};_fbee =0;};};};};};};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cc *ContentCreator )Add_Tf (fontName _c .PdfObjectName ,fontSize float64 )*ContentCreator {_ee :=ContentStreamOperation {};_ee .Operand ="\u0054\u0066";_ee .Params =_fcad ([]_c .PdfObjectName {fontName });_ee .Params =append (_ee .Params ,_bggg ([]float64 {fontSize })...);_cc ._fc =append (_cc ._fc ,&_ee );return _cc ;};func (_ae *ContentStreamOperations )isWrapped ()bool {if len (*_ae )< 2{return false ;};_da :=0;for _ ,_cf :=range *_ae {if _cf .Operand =="\u0071"{_da ++;}else if _cf .Operand =="\u0051"{_da --;}else {if _da < 1{return false ;};};};return _da ==0;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_baeg :=ContentStreamProcessor {};_baeg ._agfb =GraphicStateStack {};_cggd :=GraphicsState {};_baeg ._ecbge =_cggd ;_baeg ._bbd =[]handlerEntry {};_baeg ._bgbc =0;_baeg ._edfa =ops ;return &_baeg ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_cac *ContentStreamProcessor )Process (resources *_ff .PdfPageResources )error {_cac ._ecbge .ColorspaceStroking =_ff .NewPdfColorspaceDeviceGray ();_cac ._ecbge .ColorspaceNonStroking =_ff .NewPdfColorspaceDeviceGray ();_cac ._ecbge .ColorStroking =_ff .NewPdfColorDeviceGray (0);_cac ._ecbge .ColorNonStroking =_ff .NewPdfColorDeviceGray (0);_cac ._ecbge .CTM =_fg .IdentityMatrix ();for _ ,_ade :=range _cac ._edfa {var _eefa error ;switch _ade .Operand {case "\u0071":_cac ._agfb .Push (_cac ._ecbge );case "\u0051":if len (_cac ._agfb )==0{_ffg .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_cac ._ecbge =_cac ._agfb .Pop ();case "\u0043\u0053":_eefa =_cac .handleCommand_CS (_ade ,resources );case "\u0063\u0073":_eefa =_cac .handleCommand_cs (_ade ,resources );case "\u0053\u0043":_eefa =_cac .handleCommand_SC (_ade ,resources );case "\u0053\u0043\u004e":_eefa =_cac .handleCommand_SCN (_ade ,resources );case "\u0073\u0063":_eefa =_cac .handleCommand_sc (_ade ,resources );case "\u0073\u0063\u006e":_eefa =_cac .handleCommand_scn (_ade ,resources );case "\u0047":_eefa =_cac .handleCommand_G (_ade ,resources );case "\u0067":_eefa =_cac .handleCommand_g (_ade ,resources );case "\u0052\u0047":_eefa =_cac .handleCommand_RG (_ade ,resources );case "\u0072\u0067":_eefa =_cac .handleCommand_rg (_ade ,resources );case "\u004b":_eefa =_cac .handleCommand_K (_ade ,resources );case "\u006b":_eefa =_cac .handleCommand_k (_ade ,resources );case "\u0063\u006d":_eefa =_cac .handleCommand_cm (_ade ,resources );};if _eefa !=nil {_ffg .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_ade .Operand ,_eefa );_ffg .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_ade .Operand );return _eefa ;};for _ ,_gcbd :=range _cac ._bbd {var _ccb error ;if _gcbd .Condition .All (){_ccb =_gcbd .Handler (_ade ,_cac ._ecbge ,resources );}else if _gcbd .Condition .Operand ()&&_ade .Operand ==_gcbd .Operand {_ccb =_gcbd .Handler (_ade ,_cac ._ecbge ,resources );};if _ccb !=nil {_ffg .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_ccb );return _ccb ;};};};return nil ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cae *ContentCreator )Add_q ()*ContentCreator {_dge :=ContentStreamOperation {};_dge .Operand ="\u0071";_cae ._fc =append (_cae ._fc ,&_dge );return _cae ;};func (_deg *ContentStreamInlineImage )toImageBase (_fcec *_ff .PdfPageResources )(*_ag .ImageBase ,error ){if _deg ._gbc !=nil {return _deg ._gbc ,nil ;};_fffg :=_ag .ImageBase {};if _deg .Height ==nil {return nil ,_f .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_fdbd ,_edf :=_deg .Height .(*_c .PdfObjectInteger );if !_edf {return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_fffg .Height =int (*_fdbd );if _deg .Width ==nil {return nil ,_f .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_gdeb ,_edf :=_deg .Width .(*_c .PdfObjectInteger );if !_edf {return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_fffg .Width =int (*_gdeb );_ffc ,_cgcb :=_deg .IsMask ();if _cgcb !=nil {return nil ,_cgcb ;};if _ffc {_fffg .BitsPerComponent =1;_fffg .ColorComponents =1;}else {if _deg .BitsPerComponent ==nil {_ffg .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_fffg .BitsPerComponent =8;}else {_eaeg ,_gff :=_deg .BitsPerComponent .(*_c .PdfObjectInteger );if !_gff {_ffg .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_deg .BitsPerComponent );return nil ,_f .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_fffg .BitsPerComponent =int (*_eaeg );};if _deg .ColorSpace !=nil {_acg ,_aeg :=_deg .GetColorSpace (_fcec );if _aeg !=nil {return nil ,_aeg ;};_fffg .ColorComponents =_acg .GetNumComponents ();}else {_ffg .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_fffg .ColorComponents =1;};};if _bfab ,_ffca :=_c .GetArray (_deg .Decode );_ffca {_fffg .Decode ,_cgcb =_bfab .ToFloat64Array ();if _cgcb !=nil {return nil ,_cgcb ;};};_deg ._gbc =&_fffg ;return _deg ._gbc ,nil ;};func (_aae *ContentStreamParser )parseDict ()(*_c .PdfObjectDictionary ,error ){_ffg .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_bfed :=_c .MakeDict ();_gbge ,_ :=_aae ._fcdc .ReadByte ();if _gbge !='<'{return nil ,_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_gbge ,_ =_aae ._fcdc .ReadByte ();if _gbge !='<'{return nil ,_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_aae .skipSpaces ();_cddb ,_gaee :=_aae ._fcdc .Peek (2);if _gaee !=nil {return nil ,_gaee ;};_ffg .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_cddb ),string (_cddb ));if (_cddb [0]=='>')&&(_cddb [1]=='>'){_ffg .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_aae ._fcdc .ReadByte ();_aae ._fcdc .ReadByte ();break ;};_ffg .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_gdda ,_gaee :=_aae .parseName ();_ffg .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_gdda );if _gaee !=nil {_ffg .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_gaee );return nil ,_gaee ;};if len (_gdda )> 4&&_gdda [len (_gdda )-4:]=="\u006e\u0075\u006c\u006c"{_dec :=_gdda [0:len (_gdda )-4];_ffg .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_gdda );_ffg .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_dec );_aae .skipSpaces ();_aga ,_ :=_aae ._fcdc .Peek (1);if _aga [0]=='/'{_bfed .Set (_dec ,_c .MakeNull ());continue ;};};_aae .skipSpaces ();_beed ,_ ,_gaee :=_aae .parseObject ();if _gaee !=nil {return nil ,_gaee ;};_bfed .Set (_gdda ,_beed );_ffg .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_gdda ,_beed .String ());};return _bfed ,nil ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_cabf *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_geeb :=handlerEntry {};_geeb .Condition =condition ;_geeb .Operand =operand ;_geeb .Handler =handler ;_cabf ._bbd =append (_cabf ._bbd ,_geeb );};func _cbab (_ebd _c .PdfObject )(_ff .PdfColorspace ,error ){_gffb ,_begg :=_ebd .(*_c .PdfObjectArray );if !_begg {_ffg .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_ebd );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _gffb .Len ()!=4{_ffg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_gffb .Len ());return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_eddgc ,_begg :=_gffb .Get (0).(*_c .PdfObjectName );if !_begg {_ffg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_gffb );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_eddgc !="\u0049"&&*_eddgc !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_ffg .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_eddgc );return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_eddgc ,_begg =_gffb .Get (1).(*_c .PdfObjectName );if !_begg {_ffg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_gffb );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_eddgc !="\u0047"&&*_eddgc !="\u0052\u0047\u0042"&&*_eddgc !="\u0043\u004d\u0059\u004b"&&*_eddgc !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_eddgc !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_eddgc !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_ffg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_eddgc );return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_ffdc :="";switch *_eddgc {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_ffdc ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_ffdc ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_ffdc ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_dfge :=_c .MakeArray (_c .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_c .MakeName (_ffdc ),_gffb .Get (2),_gffb .Get (3));return _ff .NewPdfColorspaceFromPdfObject (_dfge );};func (_cebb *ContentStreamParser )skipComments ()error {if _ ,_bee :=_cebb .skipSpaces ();_bee !=nil {return _bee ;};_fge :=true ;for {_eac ,_gae :=_cebb ._fcdc .Peek (1);if _gae !=nil {_ffg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gae .Error ());return _gae ;};if _fge &&_eac [0]!='%'{return nil ;};_fge =false ;if (_eac [0]!='\r')&&(_eac [0]!='\n'){_cebb ._fcdc .ReadByte ();}else {break ;};};return _cebb .skipComments ();};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cgb *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_egf :=ContentStreamOperation {};_egf .Operand ="\u0073\u0063\u006e";_egf .Params =_bggg (c );_cgb ._fc =append (_cgb ._fc ,&_egf );return _cgb ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_fcdc *_bf .Reader };

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_aad :=ContentStreamParser {};_gcge :=_a .NewBufferString (contentStr +"\u000a");_aad ._fcdc =_bf .NewReader (_gcge );return &_aad ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_cda *ContentCreator )Add_W_starred ()*ContentCreator {_abe :=ContentStreamOperation {};_abe .Operand ="\u0057\u002a";_cda ._fc =append (_cda ._fc ,&_abe );return _cda ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_c .PdfObject ;Operand string ;};func (_bgbd *ContentStreamProcessor )handleCommand_g (_gcgf *ContentStreamOperation ,_bagb *_ff .PdfPageResources )error {_dbeb :=_ff .NewPdfColorspaceDeviceGray ();if len (_gcgf .Params )!=_dbeb .GetNumComponents (){_ffg .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_ffg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gcgf .Params ),_dbeb );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gdbe ,_afgf :=_dbeb .ColorFromPdfObjects (_gcgf .Params );if _afgf !=nil {_ffg .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_dbeb ,_gcgf ,_afgf );return _afgf ;};_bgbd ._ecbge .ColorspaceNonStroking =_dbeb ;_bgbd ._ecbge .ColorNonStroking =_gdbe ;return nil ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_agg *ContentCreator )SetStrokingColor (color _ff .PdfColor )*ContentCreator {switch _bfe :=color .(type ){case *_ff .PdfColorDeviceGray :_agg .Add_G (_bfe .Val ());case *_ff .PdfColorDeviceRGB :_agg .Add_RG (_bfe .R (),_bfe .G (),_bfe .B ());case *_ff .PdfColorDeviceCMYK :_agg .Add_K (_bfe .C (),_bfe .M (),_bfe .Y (),_bfe .K ());default:_ffg .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_bfe );};return _agg ;};func _fceb (_ccd *ContentStreamInlineImage ,_bgc *_c .PdfObjectDictionary )(*_c .LZWEncoder ,error ){_dfab :=_c .NewLZWEncoder ();if _bgc ==nil {if _ccd .DecodeParms !=nil {_abd ,_ebce :=_c .GetDict (_ccd .DecodeParms );if !_ebce {_ffg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_ccd .DecodeParms );return nil ,_bfb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_bgc =_abd ;};};if _bgc ==nil {return _dfab ,nil ;};_deeb :=_bgc .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _deeb !=nil {_accf ,_fee :=_deeb .(*_c .PdfObjectInteger );if !_fee {_ffg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_deeb );return nil ,_bfb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_accf !=0&&*_accf !=1{return nil ,_bfb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_dfab .EarlyChange =int (*_accf );}else {_dfab .EarlyChange =1;};_deeb =_bgc .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _deeb !=nil {_ddc ,_afa :=_deeb .(*_c .PdfObjectInteger );if !_afa {_ffg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_deeb );return nil ,_bfb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_dfab .Predictor =int (*_ddc );};_deeb =_bgc .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _deeb !=nil {_edcd ,_gddf :=_deeb .(*_c .PdfObjectInteger );if !_gddf {_ffg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_bfb .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_dfab .BitsPerComponent =int (*_edcd );};if _dfab .Predictor > 1{_dfab .Columns =1;_deeb =_bgc .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _deeb !=nil {_fgcf ,_gdb :=_deeb .(*_c .PdfObjectInteger );if !_gdb {return nil ,_bfb .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_dfab .Columns =int (*_fgcf );};_dfab .Colors =1;_deeb =_bgc .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _deeb !=nil {_befe ,_cee :=_deeb .(*_c .PdfObjectInteger );if !_cee {return nil ,_bfb .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_dfab .Colors =int (*_befe );};};_ffg .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_bgc .String ());return _dfab ,nil ;};func _ebacf (_cdbe []int64 )[]_c .PdfObject {var _gbdb []_c .PdfObject ;for _ ,_bcac :=range _cdbe {_gbdb =append (_gbdb ,_c .MakeInteger (_bcac ));};return _gbdb ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cgf *ContentCreator )Add_B_starred ()*ContentCreator {_deb :=ContentStreamOperation {};_deb .Operand ="\u0042\u002a";_cgf ._fc =append (_cgf ._fc ,&_deb );return _cgf ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_edc *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_aa :=ContentStreamOperation {};_aa .Operand ="\u0072\u0065";_aa .Params =_bggg ([]float64 {x ,y ,width ,height });_edc ._fc =append (_edc ._fc ,&_aa );return _edc ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cad *ContentCreator )Add_ri (intent _c .PdfObjectName )*ContentCreator {_bef :=ContentStreamOperation {};_bef .Operand ="\u0072\u0069";_bef .Params =_fcad ([]_c .PdfObjectName {intent });_cad ._fc =append (_cad ._fc ,&_bef );return _cad ;};func (_ffgde *ContentStreamParser )parseOperand ()(*_c .PdfObjectString ,error ){var _cbe []byte ;for {_ggf ,_efb :=_ffgde ._fcdc .Peek (1);if _efb !=nil {return _c .MakeString (string (_cbe )),_efb ;};if _c .IsDelimiter (_ggf [0]){break ;};if _c .IsWhiteSpace (_ggf [0]){break ;};_beff ,_ :=_ffgde ._fcdc .ReadByte ();_cbe =append (_cbe ,_beff );};return _c .MakeString (string (_cbe )),nil ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;func (_bfdc *ContentStreamParser )parseHexString ()(*_c .PdfObjectString ,error ){_bfdc ._fcdc .ReadByte ();_gcb :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _dgg []byte ;for {_bfdc .skipSpaces ();_fab ,_fdfc :=_bfdc ._fcdc .Peek (1);if _fdfc !=nil {return _c .MakeString (""),_fdfc ;};if _fab [0]=='>'{_bfdc ._fcdc .ReadByte ();break ;};_agcg ,_ :=_bfdc ._fcdc .ReadByte ();if _a .IndexByte (_gcb ,_agcg )>=0{_dgg =append (_dgg ,_agcg );};};if len (_dgg )%2==1{_dgg =append (_dgg ,'0');};_cge ,_ :=_bg .DecodeString (string (_dgg ));return _c .MakeHexString (string (_cge )),nil ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_gc *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_dbc :=_dg .Cos (angle *_dg .Pi /180.0);_cg :=_dg .Sin (angle *_dg .Pi /180.0);_fafd :=-_dg .Sin (angle *_dg .Pi /180.0);_gcg :=_dg .Cos (angle *_dg .Pi /180.0);return _gc .Add_cm (_dbc ,_cg ,_fafd ,_gcg ,0,0);};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_aab *ContentCreator )Add_CS (name _c .PdfObjectName )*ContentCreator {_dbe :=ContentStreamOperation {};_dbe .Operand ="\u0043\u0053";_dbe .Params =_fcad ([]_c .PdfObjectName {name });_aab ._fc =append (_aab ._fc ,&_dbe );return _aab ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bdd *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_fdce :=ContentStreamOperation {};_fdce .Operand ="\u006b";_fdce .Params =_bggg ([]float64 {c ,m ,y ,k });_bdd ._fc =append (_bdd ._fc ,&_fdce );return _bdd ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_cdaa *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _cdaa .CTM .Transform (x ,y );};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_fgd *ContentCreator )SetNonStrokingColor (color _ff .PdfColor )*ContentCreator {switch _gg :=color .(type ){case *_ff .PdfColorDeviceGray :_fgd .Add_g (_gg .Val ());case *_ff .PdfColorDeviceRGB :_fgd .Add_rg (_gg .R (),_gg .G (),_gg .B ());case *_ff .PdfColorDeviceCMYK :_fgd .Add_k (_gg .C (),_gg .M (),_gg .Y (),_gg .K ());default:_ffg .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_gg );};return _fgd ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_fef HandlerConditionEnum )All ()bool {return _fef ==HandlerConditionEnumAllOperands };type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bcd *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_gbg :=ContentStreamOperation {};_gbg .Operand ="\u0064";_gbg .Params =[]_c .PdfObject {};_gbg .Params =append (_gbg .Params ,_c .MakeArrayFromIntegers64 (dashArray ));_gbg .Params =append (_gbg .Params ,_c .MakeInteger (dashPhase ));_bcd ._fc =append (_bcd ._fc ,&_gbg );return _bcd ;};func _dfe (_fdg *ContentStreamInlineImage )(*_c .DCTEncoder ,error ){_fcdd :=_c .NewDCTEncoder ();_cdc :=_a .NewReader (_fdg ._gdc );_bde ,_ead :=_gb .DecodeConfig (_cdc );if _ead !=nil {_ffg .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_ead );return nil ,_ead ;};switch _bde .ColorModel {case _d .RGBAModel :_fcdd .BitsPerComponent =8;_fcdd .ColorComponents =3;case _d .RGBA64Model :_fcdd .BitsPerComponent =16;_fcdd .ColorComponents =3;case _d .GrayModel :_fcdd .BitsPerComponent =8;_fcdd .ColorComponents =1;case _d .Gray16Model :_fcdd .BitsPerComponent =16;_fcdd .ColorComponents =1;case _d .CMYKModel :_fcdd .BitsPerComponent =8;_fcdd .ColorComponents =4;case _d .YCbCrModel :_fcdd .BitsPerComponent =8;_fcdd .ColorComponents =3;default:return nil ,_f .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_fcdd .Width =_bde .Width ;_fcdd .Height =_bde .Height ;_ffg .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_fcdd );return _fcdd ,nil ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_deee *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_fce :=ContentStreamOperation {};_fce .Operand ="\u0054\u0077";_fce .Params =_bggg ([]float64 {wordSpace });_deee ._fc =append (_deee ._fc ,&_fce );return _deee ;};

// Push pushes `gs` on the `gsStack`.
func (_cde *GraphicStateStack )Push (gs GraphicsState ){*_cde =append (*_cde ,gs )};func (_egaf *ContentStreamParser )parseArray ()(*_c .PdfObjectArray ,error ){_cdg :=_c .MakeArray ();_egaf ._fcdc .ReadByte ();for {_egaf .skipSpaces ();_cef ,_cebe :=_egaf ._fcdc .Peek (1);if _cebe !=nil {return _cdg ,_cebe ;};if _cef [0]==']'{_egaf ._fcdc .ReadByte ();break ;};_baf ,_ ,_cebe :=_egaf .parseObject ();if _cebe !=nil {return _cdg ,_cebe ;};_cdg .Append (_baf );};return _cdg ,nil ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _ff .Image ,encoder _c .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_c .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_agca :=ContentStreamInlineImage {};if img .ColorComponents ==1{_agca .ColorSpace =_c .MakeName ("\u0047");}else if img .ColorComponents ==3{_agca .ColorSpace =_c .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_agca .ColorSpace =_c .MakeName ("\u0043\u004d\u0059\u004b");}else {_ffg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_agca .BitsPerComponent =_c .MakeInteger (img .BitsPerComponent );_agca .Width =_c .MakeInteger (img .Width );_agca .Height =_c .MakeInteger (img .Height );_cgc ,_gde :=encoder .EncodeBytes (img .Data );if _gde !=nil {return nil ,_gde ;};_agca ._gdc =_cgc ;_dea :=encoder .GetFilterName ();if _dea !=_c .StreamEncodingFilterNameRaw {_agca .Filter =_c .MakeName (_dea );};return &_agca ,nil ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dfc *ContentCreator )Add_b_starred ()*ContentCreator {_dff :=ContentStreamOperation {};_dff .Operand ="\u0062\u002a";_dfc ._fc =append (_dfc ._fc ,&_dff );return _dfc ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dgfc *ContentCreator )Add_G (gray float64 )*ContentCreator {_efac :=ContentStreamOperation {};_efac .Operand ="\u0047";_efac .Params =_bggg ([]float64 {gray });_dgfc ._fc =append (_dgfc ._fc ,&_efac );return _dgfc ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cgg *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_dbd :=ContentStreamOperation {};_dbd .Operand ="\u0054\u0044";_dbd .Params =_bggg ([]float64 {tx ,ty });_cgg ._fc =append (_cgg ._fc ,&_dbd );return _cgg ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_edg *ContentCreator )Add_scn_pattern (name _c .PdfObjectName ,c ...float64 )*ContentCreator {_egcg :=ContentStreamOperation {};_egcg .Operand ="\u0073\u0063\u006e";_egcg .Params =_bggg (c );_egcg .Params =append (_egcg .Params ,_c .MakeName (string (name )));_edg ._fc =append (_edg ._fc ,&_egcg );return _edg ;};

// String is same as Bytes() except returns as a string for convenience.
func (_ged *ContentCreator )String ()string {return string (_ged ._fc .Bytes ())};func _ddgg (_efe *ContentStreamInlineImage ,_ccf *_c .PdfObjectDictionary )(*_c .FlateEncoder ,error ){_edd :=_c .NewFlateEncoder ();if _efe ._gbc !=nil {_edd .SetImage (_efe ._gbc );};if _ccf ==nil {_ccc :=_efe .DecodeParms ;if _ccc !=nil {_ace ,_ad :=_c .GetDict (_ccc );if !_ad {_ffg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_ccc );return nil ,_bfb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_ccf =_ace ;};};if _ccf ==nil {return _edd ,nil ;};_ffg .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_ccf .String ());_fag :=_ccf .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _fag ==nil {_ffg .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_cfae ,_fbfc :=_fag .(*_c .PdfObjectInteger );if !_fbfc {_ffg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_fag );return nil ,_bfb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_edd .Predictor =int (*_cfae );};_fag =_ccf .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _fag !=nil {_adg ,_ebc :=_fag .(*_c .PdfObjectInteger );if !_ebc {_ffg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_bfb .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_edd .BitsPerComponent =int (*_adg );};if _edd .Predictor > 1{_edd .Columns =1;_fag =_ccf .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _fag !=nil {_fdbe ,_fcd :=_fag .(*_c .PdfObjectInteger );if !_fcd {return nil ,_bfb .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_edd .Columns =int (*_fdbe );};_edd .Colors =1;_dddb :=_ccf .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dddb !=nil {_gdd ,_bda :=_dddb .(*_c .PdfObjectInteger );if !_bda {return nil ,_bfb .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_edd .Colors =int (*_gdd );};};return _edd ,nil ;};func (_eddg *ContentStreamProcessor )handleCommand_CS (_ggfc *ContentStreamOperation ,_aage *_ff .PdfPageResources )error {if len (_ggfc .Params )< 1{_ffg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _f .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_ggfc .Params )> 1{_ffg .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _f .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_cacb ,_gfd :=_ggfc .Params [0].(*_c .PdfObjectName );if !_gfd {_ffg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_faa ,_fdag :=_eddg .getColorspace (string (*_cacb ),_aage );if _fdag !=nil {return _fdag ;};_eddg ._ecbge .ColorspaceStroking =_faa ;_agbe ,_fdag :=_eddg .getInitialColor (_faa );if _fdag !=nil {return _fdag ;};_eddg ._ecbge .ColorStroking =_agbe ;return nil ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_agb *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_ce :=ContentStreamOperation {};_ce .Operand ="\u006c";_ce .Params =_bggg ([]float64 {x ,y });_agb ._fc =append (_agb ._fc ,&_ce );return _agb ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gaf *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_ffgf :=ContentStreamOperation {};_ffgf .Operand ="\u0054\u0073";_ffgf .Params =_bggg ([]float64 {rise });_gaf ._fc =append (_gaf ._fc ,&_ffgf );return _gaf ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cfgb *ContentCreator )Add_SCN_pattern (name _c .PdfObjectName ,c ...float64 )*ContentCreator {_bed :=ContentStreamOperation {};_bed .Operand ="\u0053\u0043\u004e";_bed .Params =_bggg (c );_bed .Params =append (_bed .Params ,_c .MakeName (string (name )));_cfgb ._fc =append (_cfgb ._fc ,&_bed );return _cfgb ;};func (_bcfcf *ContentStreamProcessor )handleCommand_scn (_dcfb *ContentStreamOperation ,_afbb *_ff .PdfPageResources )error {_cdaaf :=_bcfcf ._ecbge .ColorspaceNonStroking ;if !_adfe (_cdaaf ){if len (_dcfb .Params )!=_cdaaf .GetNumComponents (){_ffg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ffg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dcfb .Params ),_cdaaf );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_gebf ,_afg :=_cdaaf .ColorFromPdfObjects (_dcfb .Params );if _afg !=nil {_ffg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_dcfb .Params ,_cdaaf );return _afg ;};_bcfcf ._ecbge .ColorNonStroking =_gebf ;return nil ;};func (_gfag *ContentStreamParser )parseName ()(_c .PdfObjectName ,error ){_bba :="";_bedg :=false ;for {_eefc ,_gcdg :=_gfag ._fcdc .Peek (1);if _gcdg ==_fe .EOF {break ;};if _gcdg !=nil {return _c .PdfObjectName (_bba ),_gcdg ;};if !_bedg {if _eefc [0]=='/'{_bedg =true ;_gfag ._fcdc .ReadByte ();}else {_ffg .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_eefc ,_eefc );return _c .PdfObjectName (_bba ),_bfb .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_eefc [0]);};}else {if _c .IsWhiteSpace (_eefc [0]){break ;}else if (_eefc [0]=='/')||(_eefc [0]=='[')||(_eefc [0]=='(')||(_eefc [0]==']')||(_eefc [0]=='<')||(_eefc [0]=='>'){break ;}else if _eefc [0]=='#'{_ecbb ,_cfcg :=_gfag ._fcdc .Peek (3);if _cfcg !=nil {return _c .PdfObjectName (_bba ),_cfcg ;};_gfag ._fcdc .Discard (3);_adf ,_cfcg :=_bg .DecodeString (string (_ecbb [1:3]));if _cfcg !=nil {return _c .PdfObjectName (_bba ),_cfcg ;};_bba +=string (_adf );}else {_dca ,_ :=_gfag ._fcdc .ReadByte ();_bba +=string (_dca );};};};return _c .PdfObjectName (_bba ),nil ;};func _dga (_cfed *ContentStreamInlineImage )(*_c .MultiEncoder ,error ){_bfea :=_c .NewMultiEncoder ();var _gege *_c .PdfObjectDictionary ;var _eae []_c .PdfObject ;if _bfd :=_cfed .DecodeParms ;_bfd !=nil {_dag ,_ddab :=_bfd .(*_c .PdfObjectDictionary );if _ddab {_gege =_dag ;};_fbbg ,_aed :=_bfd .(*_c .PdfObjectArray );if _aed {for _ ,_fff :=range _fbbg .Elements (){if _fdf ,_fda :=_fff .(*_c .PdfObjectDictionary );_fda {_eae =append (_eae ,_fdf );}else {_eae =append (_eae ,nil );};};};};_fgaa :=_cfed .Filter ;if _fgaa ==nil {return nil ,_bfb .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_ebg ,_cfgd :=_fgaa .(*_c .PdfObjectArray );if !_cfgd {return nil ,_bfb .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _aba ,_fafa :=range _ebg .Elements (){_egfa ,_gcf :=_fafa .(*_c .PdfObjectName );if !_gcf {return nil ,_bfb .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _ada _c .PdfObject ;if _gege !=nil {_ada =_gege ;}else {if len (_eae )> 0{if _aba >=len (_eae ){return nil ,_bfb .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_ada =_eae [_aba ];};};var _gda *_c .PdfObjectDictionary ;if _bgb ,_eggf :=_ada .(*_c .PdfObjectDictionary );_eggf {_gda =_bgb ;};if *_egfa ==_c .StreamEncodingFilterNameFlate ||*_egfa =="\u0046\u006c"{_dagd ,_eadg :=_ddgg (_cfed ,_gda );if _eadg !=nil {return nil ,_eadg ;};_bfea .AddEncoder (_dagd );}else if *_egfa ==_c .StreamEncodingFilterNameLZW {_cfb ,_dab :=_fceb (_cfed ,_gda );if _dab !=nil {return nil ,_dab ;};_bfea .AddEncoder (_cfb );}else if *_egfa ==_c .StreamEncodingFilterNameASCIIHex {_bad :=_c .NewASCIIHexEncoder ();_bfea .AddEncoder (_bad );}else if *_egfa ==_c .StreamEncodingFilterNameASCII85 ||*_egfa =="\u0041\u0038\u0035"{_aec :=_c .NewASCII85Encoder ();_bfea .AddEncoder (_aec );}else {_ffg .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_egfa );return nil ,_bfb .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _bfea ,nil ;};func (_afb *ContentStreamParser )parseObject ()(_eda _c .PdfObject ,_aged bool ,_adgb error ){_afb .skipSpaces ();for {_dggd ,_ecbg :=_afb ._fcdc .Peek (2);if _ecbg !=nil {return nil ,false ,_ecbg ;};_ffg .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_dggd ));if _dggd [0]=='%'{_afb .skipComments ();continue ;}else if _dggd [0]=='/'{_ggeb ,_bdfa :=_afb .parseName ();_ffg .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_ggeb );return &_ggeb ,false ,_bdfa ;}else if _dggd [0]=='('{_ffg .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_debd ,_cfd :=_afb .parseString ();return _debd ,false ,_cfd ;}else if _dggd [0]=='<'&&_dggd [1]!='<'{_ffg .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_dcf ,_ddda :=_afb .parseHexString ();return _dcf ,false ,_ddda ;}else if _dggd [0]=='['{_ffg .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_gcc ,_dbfg :=_afb .parseArray ();return _gcc ,false ,_dbfg ;}else if _c .IsFloatDigit (_dggd [0])||(_dggd [0]=='-'&&_c .IsFloatDigit (_dggd [1])){_ffg .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_aaba ,_ceff :=_afb .parseNumber ();return _aaba ,false ,_ceff ;}else if _dggd [0]=='<'&&_dggd [1]=='<'{_fgge ,_bgbe :=_afb .parseDict ();return _fgge ,false ,_bgbe ;}else {_ffg .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_dggd ,_ =_afb ._fcdc .Peek (5);_aff :=string (_dggd );_ffg .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_aff );if (len (_aff )> 3)&&(_aff [:4]=="\u006e\u0075\u006c\u006c"){_dcad ,_egfc :=_afb .parseNull ();return &_dcad ,false ,_egfc ;}else if (len (_aff )> 4)&&(_aff [:5]=="\u0066\u0061\u006cs\u0065"){_dgad ,_dfag :=_afb .parseBool ();return &_dgad ,false ,_dfag ;}else if (len (_aff )> 3)&&(_aff [:4]=="\u0074\u0072\u0075\u0065"){_gdf ,_eaa :=_afb .parseBool ();return &_gdf ,false ,_eaa ;};_baac ,_egec :=_afb .parseOperand ();if _egec !=nil {return _baac ,false ,_egec ;};if len (_baac .String ())< 1{return _baac ,false ,ErrInvalidOperand ;};return _baac ,true ,nil ;};};};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bfaf *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_def :=ContentStreamOperation {};_def .Operand ="\u0052\u0047";_def .Params =_bggg ([]float64 {r ,g ,b });_bfaf ._fc =append (_bfaf ._fc ,&_def );return _bfaf ;};func (_aef *ContentStreamProcessor )handleCommand_SCN (_cbff *ContentStreamOperation ,_bafe *_ff .PdfPageResources )error {_ccff :=_aef ._ecbge .ColorspaceStroking ;if !_adfe (_ccff ){if len (_cbff .Params )!=_ccff .GetNumComponents (){_ffg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ffg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cbff .Params ),_ccff );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_ccgc ,_facb :=_ccff .ColorFromPdfObjects (_cbff .Params );if _facb !=nil {return _facb ;};_aef ._ecbge .ColorStroking =_ccgc ;return nil ;};func _fcad (_bgd []_c .PdfObjectName )[]_c .PdfObject {var _cdcfc []_c .PdfObject ;for _ ,_adff :=range _bgd {_cdcfc =append (_cdcfc ,_c .MakeName (string (_adff )));};return _cdcfc ;};func (_acce *ContentStreamParser )parseNull ()(_c .PdfObjectNull ,error ){_ ,_gce :=_acce ._fcdc .Discard (4);return _c .PdfObjectNull {},_gce ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_cbd *ContentCreator )Add_Do (name _c .PdfObjectName )*ContentCreator {_fgaf :=ContentStreamOperation {};_fgaf .Operand ="\u0044\u006f";_fgaf .Params =_fcad ([]_c .PdfObjectName {name });_cbd ._fc =append (_cbd ._fc ,&_fgaf );return _cbd ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_ge *ContentCreator )Bytes ()[]byte {return _ge ._fc .Bytes ()};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_agcf *ContentStreamInlineImage )ToImage (resources *_ff .PdfPageResources )(*_ff .Image ,error ){_gbd ,_caf :=_agcf .toImageBase (resources );if _caf !=nil {return nil ,_caf ;};_eadf ,_caf :=_gge (_agcf );if _caf !=nil {return nil ,_caf ;};_ffg .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_eadf ,_eadf );_ffg .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_agcf );_aag ,_caf :=_eadf .DecodeBytes (_agcf ._gdc );if _caf !=nil {return nil ,_caf ;};_eaga :=&_ff .Image {Width :int64 (_gbd .Width ),Height :int64 (_gbd .Height ),BitsPerComponent :int64 (_gbd .BitsPerComponent ),ColorComponents :_gbd .ColorComponents ,Data :_aag };if len (_gbd .Decode )> 0{for _cfcb :=0;_cfcb < len (_gbd .Decode );_cfcb ++{_gbd .Decode [_cfcb ]*=float64 ((int (1)<<uint (_gbd .BitsPerComponent ))-1);};_eaga .SetDecode (_gbd .Decode );};return _eaga ,nil ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_agd *GraphicStateStack )Pop ()GraphicsState {_eced :=(*_agd )[len (*_agd )-1];*_agd =(*_agd )[:len (*_agd )-1];return _eced ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_dgd *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_fbc :=ContentStreamOperation {};_fbc .Operand ="\u0054\u006d";_fbc .Params =_bggg ([]float64 {a ,b ,c ,d ,e ,f });_dgd ._fc =append (_dgd ._fc ,&_fbc );return _dgd ;};func _aaea (_cdef []_c .PdfObjectString )[]_c .PdfObject {var _fcf []_c .PdfObject ;for _ ,_acca :=range _cdef {_fcf =append (_fcf ,_c .MakeString (_acca .Str ()));};return _fcf ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cfef *ContentCreator )Add_Q ()*ContentCreator {_cd :=ContentStreamOperation {};_cd .Operand ="\u0051";_cfef ._fc =append (_cfef ._fc ,&_cd );return _cfef ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cbg *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_ed :=ContentStreamOperation {};_ed .Operand ="\u006d";_ed .Params =_bggg ([]float64 {x ,y });_cbg ._fc =append (_cbg ._fc ,&_ed );return _cbg ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_eb *ContentCreator )Add_n ()*ContentCreator {_bab :=ContentStreamOperation {};_bab .Operand ="\u006e";_eb ._fc =append (_eb ._fc ,&_bab );return _eb ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bfad *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_ege :=ContentStreamOperation {};_ege .Operand ="\u0054\u007a";_ege .Params =_bggg ([]float64 {scale });_bfad ._fc =append (_bfad ._fc ,&_ege );return _bfad ;};func _bggg (_eefb []float64 )[]_c .PdfObject {var _fdaf []_c .PdfObject ;for _ ,_gef :=range _eefb {_fdaf =append (_fdaf ,_c .MakeFloat (_gef ));};return _fdaf ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cab *ContentCreator )Add_Tstar ()*ContentCreator {_egb :=ContentStreamOperation {};_egb .Operand ="\u0054\u002a";_cab ._fc =append (_cab ._fc ,&_egb );return _cab ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_ddfc HandlerConditionEnum )Operand ()bool {return _ddfc ==HandlerConditionEnumOperand };func (_adfd *ContentStreamParser )parseBool ()(_c .PdfObjectBool ,error ){_aee ,_ffff :=_adfd ._fcdc .Peek (4);if _ffff !=nil {return _c .PdfObjectBool (false ),_ffff ;};if (len (_aee )>=4)&&(string (_aee [:4])=="\u0074\u0072\u0075\u0065"){_adfd ._fcdc .Discard (4);return _c .PdfObjectBool (true ),nil ;};_aee ,_ffff =_adfd ._fcdc .Peek (5);if _ffff !=nil {return _c .PdfObjectBool (false ),_ffff ;};if (len (_aee )>=5)&&(string (_aee [:5])=="\u0066\u0061\u006cs\u0065"){_adfd ._fcdc .Discard (5);return _c .PdfObjectBool (false ),nil ;};return _c .PdfObjectBool (false ),_f .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// Operations returns the list of operations.
func (_gd *ContentCreator )Operations ()*ContentStreamOperations {return &_gd ._fc };

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_eff *ContentCreator )Add_b ()*ContentCreator {_ffgd :=ContentStreamOperation {};_ffgd .Operand ="\u0062";_eff ._fc =append (_eff ._fc ,&_ffgd );return _eff ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ecb *ContentCreator )Add_h ()*ContentCreator {_ffa :=ContentStreamOperation {};_ffa .Operand ="\u0068";_ecb ._fc =append (_ecb ._fc ,&_ffa );return _ecb ;};func (_daea *ContentStreamProcessor )handleCommand_RG (_efed *ContentStreamOperation ,_faga *_ff .PdfPageResources )error {_gfegc :=_ff .NewPdfColorspaceDeviceRGB ();if len (_efed .Params )!=_gfegc .GetNumComponents (){_ffg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_ffg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_efed .Params ),_gfegc );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_geeg ,_egbb :=_gfegc .ColorFromPdfObjects (_efed .Params );if _egbb !=nil {return _egbb ;};_daea ._ecbge .ColorspaceStroking =_gfegc ;_daea ._ecbge .ColorStroking =_geeg ;return nil ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_bdbc *ContentCreator )Add_BMC (tag _c .PdfObjectName )*ContentCreator {_fbb :=ContentStreamOperation {};_fbb .Operand ="\u0042\u004d\u0043";_fbb .Params =_fcad ([]_c .PdfObjectName {tag });_bdbc ._fc =append (_bdbc ._fc ,&_fbb );return _bdbc ;};func (_cgfc *ContentStreamProcessor )handleCommand_cm (_cdad *ContentStreamOperation ,_egfab *_ff .PdfPageResources )error {if len (_cdad .Params )!=6{_ffg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_cdad .Params ));return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bdeg ,_ffd :=_c .GetNumbersAsFloat (_cdad .Params );if _ffd !=nil {return _ffd ;};_gfga :=_fg .NewMatrix (_bdeg [0],_bdeg [1],_bdeg [2],_bdeg [3],_bdeg [4],_bdeg [5]);_cgfc ._ecbge .CTM .Concat (_gfga );return nil ;};

// GetEncoder returns the encoder of the inline image.
func (_aggc *ContentStreamInlineImage )GetEncoder ()(_c .StreamEncoder ,error ){return _gge (_aggc )};