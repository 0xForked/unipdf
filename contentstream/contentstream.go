//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_d "bufio";_bf "bytes";_b "encoding/hex";_g "errors";_c "fmt";_da "github.com/unidoc/unipdf/v3/common";_cc "github.com/unidoc/unipdf/v3/core";_gd "github.com/unidoc/unipdf/v3/internal/imageutil";_af "github.com/unidoc/unipdf/v3/internal/transform";_fc "github.com/unidoc/unipdf/v3/model";_fa "image/color";_e "image/jpeg";_a "io";_bg "math";_gf "strconv";);

// Transform returns coordinates x, y transformed by the CTM.
func (_abdcc *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _abdcc .CTM .Transform (x ,y );};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fab *ContentCreator )Add_CS (name _cc .PdfObjectName )*ContentCreator {_eac :=ContentStreamOperation {};_eac .Operand ="\u0043\u0053";_eac .Params =_fbac ([]_cc .PdfObjectName {name });_fab ._gfd =append (_fab ._gfd ,&_eac );return _fab ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_ddb *ContentCreator )Wrap (){_ddb ._gfd .WrapIfNeeded ()};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_ece *ContentCreator )Add_BMC (tag _cc .PdfObjectName )*ContentCreator {_edg :=ContentStreamOperation {};_edg .Operand ="\u0042\u004d\u0043";_edg .Params =_fbac ([]_cc .PdfObjectName {tag });_ece ._gfd =append (_ece ._gfd ,&_edg );return _ece ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_gcg *ContentCreator )Add_sh (name _cc .PdfObjectName )*ContentCreator {_bbb :=ContentStreamOperation {};_bbb .Operand ="\u0073\u0068";_bbb .Params =_fbac ([]_cc .PdfObjectName {name });_gcg ._gfd =append (_gcg ._gfd ,&_bbb );return _gcg ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_bee *ContentCreator )SetNonStrokingColor (color _fc .PdfColor )*ContentCreator {switch _gcf :=color .(type ){case *_fc .PdfColorDeviceGray :_bee .Add_g (_gcf .Val ());case *_fc .PdfColorDeviceRGB :_bee .Add_rg (_gcf .R (),_gcf .G (),_gcf .B ());case *_fc .PdfColorDeviceCMYK :_bee .Add_k (_gcf .C (),_gcf .M (),_gcf .Y (),_gcf .K ());default:_da .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_gcf );};return _bee ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gdg *ContentCreator )Add_TL (leading float64 )*ContentCreator {_fea :=ContentStreamOperation {};_fea .Operand ="\u0054\u004c";_fea .Params =_baed ([]float64 {leading });_gdg ._gfd =append (_gdg ._gfd ,&_fea );return _gdg ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_deb *ContentCreator )Add_f ()*ContentCreator {_dgb :=ContentStreamOperation {};_dgb .Operand ="\u0066";_deb ._gfd =append (_deb ._gfd ,&_dgb );return _deb ;};

// WriteString outputs the object as it is to be written to file.
func (_cafd *ContentStreamInlineImage )WriteString ()string {var _cag _bf .Buffer ;_bbd :="";if _cafd .BitsPerComponent !=nil {_bbd +="\u002f\u0042\u0050C\u0020"+_cafd .BitsPerComponent .WriteString ()+"\u000a";};if _cafd .ColorSpace !=nil {_bbd +="\u002f\u0043\u0053\u0020"+_cafd .ColorSpace .WriteString ()+"\u000a";};if _cafd .Decode !=nil {_bbd +="\u002f\u0044\u0020"+_cafd .Decode .WriteString ()+"\u000a";};if _cafd .DecodeParms !=nil {_bbd +="\u002f\u0044\u0050\u0020"+_cafd .DecodeParms .WriteString ()+"\u000a";};if _cafd .Filter !=nil {_bbd +="\u002f\u0046\u0020"+_cafd .Filter .WriteString ()+"\u000a";};if _cafd .Height !=nil {_bbd +="\u002f\u0048\u0020"+_cafd .Height .WriteString ()+"\u000a";};if _cafd .ImageMask !=nil {_bbd +="\u002f\u0049\u004d\u0020"+_cafd .ImageMask .WriteString ()+"\u000a";};if _cafd .Intent !=nil {_bbd +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_cafd .Intent .WriteString ()+"\u000a";};if _cafd .Interpolate !=nil {_bbd +="\u002f\u0049\u0020"+_cafd .Interpolate .WriteString ()+"\u000a";};if _cafd .Width !=nil {_bbd +="\u002f\u0057\u0020"+_cafd .Width .WriteString ()+"\u000a";};_cag .WriteString (_bbd );_cag .WriteString ("\u0049\u0044\u0020");_cag .Write (_cafd ._gec );_cag .WriteString ("\u000a\u0045\u0049\u000a");return _cag .String ();};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gbb *ContentCreator )Add_B ()*ContentCreator {_baa :=ContentStreamOperation {};_baa .Operand ="\u0042";_gbb ._gfd =append (_gbb ._gfd ,&_baa );return _gbb ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_db *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_dec :=ContentStreamOperation {};_dec .Operand ="\u0077";_dec .Params =_baed ([]float64 {lineWidth });_db ._gfd =append (_db ._gfd ,&_dec );return _db ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_efd *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _efd .Add_cm (1,0,0,1,tx ,ty );};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _cc .PdfObject ;ColorSpace _cc .PdfObject ;Decode _cc .PdfObject ;DecodeParms _cc .PdfObject ;Filter _cc .PdfObject ;Height _cc .PdfObject ;ImageMask _cc .PdfObject ;Intent _cc .PdfObject ;Interpolate _cc .PdfObject ;Width _cc .PdfObject ;_gec []byte ;_ede *_gd .ImageBase ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_cda *ContentStreamInlineImage )IsMask ()(bool ,error ){if _cda .ImageMask !=nil {_fage ,_fac :=_cda .ImageMask .(*_cc .PdfObjectBool );if !_fac {_da .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_g .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_fage ),nil ;};return false ,nil ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dg *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_eff :=ContentStreamOperation {};_eff .Operand ="\u0072\u0065";_eff .Params =_baed ([]float64 {x ,y ,width ,height });_dg ._gfd =append (_dg ._gfd ,&_eff );return _dg ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_baafc HandlerConditionEnum )All ()bool {return _baafc ==HandlerConditionEnumAllOperands };

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ccd *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_ff :=ContentStreamOperation {};_ff .Operand ="\u0053\u0043";_ff .Params =_baed (c );_ccd ._gfd =append (_ccd ._gfd ,&_ff );return _ccd ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bdb *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_cafe :=ContentStreamOperation {};_cafe .Operand ="\u0054\u006d";_cafe .Params =_baed ([]float64 {a ,b ,c ,d ,e ,f });_bdb ._gfd =append (_bdb ._gfd ,&_cafe );return _bdb ;};func _cagd (_cdgf _cc .PdfObject )(_fc .PdfColorspace ,error ){_ffga ,_ggdbe :=_cdgf .(*_cc .PdfObjectArray );if !_ggdbe {_da .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_cdgf );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _ffga .Len ()!=4{_da .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_ffga .Len ());return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fcab ,_ggdbe :=_ffga .Get (0).(*_cc .PdfObjectName );if !_ggdbe {_da .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_ffga );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fcab !="\u0049"&&*_fcab !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_da .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_fcab );return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fcab ,_ggdbe =_ffga .Get (1).(*_cc .PdfObjectName );if !_ggdbe {_da .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_ffga );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fcab !="\u0047"&&*_fcab !="\u0052\u0047\u0042"&&*_fcab !="\u0043\u004d\u0059\u004b"&&*_fcab !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_fcab !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_fcab !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_da .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_fcab );return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_acca :="";switch *_fcab {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_acca ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_acca ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_acca ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_fgbe :=_cc .MakeArray (_cc .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_cc .MakeName (_acca ),_ffga .Get (2),_ffga .Get (3));return _fc .NewPdfColorspaceFromPdfObject (_fgbe );};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_aeg *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_gfb :=ContentStreamOperation {};_gfb .Operand ="\u0054\u0064";_gfb .Params =_baed ([]float64 {tx ,ty });_aeg ._gfd =append (_aeg ._gfd ,&_gfb );return _aeg ;};func _gege (_ffg string )bool {_ ,_fba :=_acf [_ffg ];return _fba };

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dab *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_abe :=ContentStreamOperation {};_abe .Operand ="\u0063";_abe .Params =_baed ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_dab ._gfd =append (_dab ._gfd ,&_abe );return _dab ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_gdgc *ContentCreator )Add_TJ (vals ..._cc .PdfObject )*ContentCreator {_aae :=ContentStreamOperation {};_aae .Operand ="\u0054\u004a";_aae .Params =[]_cc .PdfObject {_cc .MakeArray (vals ...)};_gdgc ._gfd =append (_gdgc ._gfd ,&_aae );return _gdgc ;};

// AddOperand adds a specified operand.
func (_eeb *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_eeb ._gfd =append (_eeb ._gfd ,&op );return _eeb ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gge *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_deg :=ContentStreamOperation {};_deg .Operand ="\u0076";_deg .Params =_baed ([]float64 {x2 ,y2 ,x3 ,y3 });_gge ._gfd =append (_gge ._gfd ,&_deg );return _gge ;};func (_ecee *ContentStreamParser )skipSpaces ()(int ,error ){_cge :=0;for {_aebb ,_ddgd :=_ecee ._gabe .Peek (1);if _ddgd !=nil {return 0,_ddgd ;};if _cc .IsWhiteSpace (_aebb [0]){_ecee ._gabe .ReadByte ();_cge ++;}else {break ;};};return _cge ,nil ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ed *ContentCreator )Add_b ()*ContentCreator {_afeb :=ContentStreamOperation {};_afeb .Operand ="\u0062";_ed ._gfd =append (_ed ._gfd ,&_afeb );return _ed ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_afe *ContentCreator )Add_ri (intent _cc .PdfObjectName )*ContentCreator {_dbc :=ContentStreamOperation {};_dbc .Operand ="\u0072\u0069";_dbc .Params =_fbac ([]_cc .PdfObjectName {intent });_afe ._gfd =append (_afe ._gfd ,&_dbc );return _afe ;};func (_age *ContentStreamParser )parseString ()(*_cc .PdfObjectString ,error ){_age ._gabe .ReadByte ();var _affa []byte ;_accg :=1;for {_afd ,_fbb :=_age ._gabe .Peek (1);if _fbb !=nil {return _cc .MakeString (string (_affa )),_fbb ;};if _afd [0]=='\\'{_age ._gabe .ReadByte ();_eea ,_egeg :=_age ._gabe .ReadByte ();if _egeg !=nil {return _cc .MakeString (string (_affa )),_egeg ;};if _cc .IsOctalDigit (_eea ){_aegb ,_gcge :=_age ._gabe .Peek (2);if _gcge !=nil {return _cc .MakeString (string (_affa )),_gcge ;};var _cef []byte ;_cef =append (_cef ,_eea );for _ ,_dccd :=range _aegb {if _cc .IsOctalDigit (_dccd ){_cef =append (_cef ,_dccd );}else {break ;};};_age ._gabe .Discard (len (_cef )-1);_da .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_cef );_gbbe ,_gcge :=_gf .ParseUint (string (_cef ),8,32);if _gcge !=nil {return _cc .MakeString (string (_affa )),_gcge ;};_affa =append (_affa ,byte (_gbbe ));continue ;};switch _eea {case 'n':_affa =append (_affa ,'\n');case 'r':_affa =append (_affa ,'\r');case 't':_affa =append (_affa ,'\t');case 'b':_affa =append (_affa ,'\b');case 'f':_affa =append (_affa ,'\f');case '(':_affa =append (_affa ,'(');case ')':_affa =append (_affa ,')');case '\\':_affa =append (_affa ,'\\');};continue ;}else if _afd [0]=='('{_accg ++;}else if _afd [0]==')'{_accg --;if _accg ==0{_age ._gabe .ReadByte ();break ;};};_bcd ,_ :=_age ._gabe .ReadByte ();_affa =append (_affa ,_bcd );};return _cc .MakeString (string (_affa )),nil ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_gabe *_d .Reader };

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bdf *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_ae :=ContentStreamOperation {};_ae .Operand ="\u004d";_ae .Params =_baed ([]float64 {miterlimit });_bdf ._gfd =append (_bdf ._gfd ,&_ae );return _bdf ;};func _eaae (_bba *ContentStreamInlineImage )(_cc .StreamEncoder ,error ){if _bba .Filter ==nil {return _cc .NewRawEncoder (),nil ;};_dac ,_fdg :=_bba .Filter .(*_cc .PdfObjectName );if !_fdg {_caa ,_eb :=_bba .Filter .(*_cc .PdfObjectArray );if !_eb {return nil ,_c .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _caa .Len ()==0{return _cc .NewRawEncoder (),nil ;};if _caa .Len ()!=1{_caaf ,_dccc :=_cddc (_bba );if _dccc !=nil {_da .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_dccc );return nil ,_dccc ;};_da .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_caaf );return _caaf ,nil ;};_cgg :=_caa .Get (0);_dac ,_eb =_cgg .(*_cc .PdfObjectName );if !_eb {return nil ,_c .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_dac {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _cc .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _cc .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _bcf (_bba );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _aadd (_bba ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _abf (_bba ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _cc .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _cc .NewRunLengthEncoder (),nil ;default:_da .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_dac );return nil ,_g .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_fcf *ContentCreator )Bytes ()[]byte {return _fcf ._gfd .Bytes ()};func _bgab (_edff []int64 )[]_cc .PdfObject {var _bgbg []_cc .PdfObject ;for _ ,_bbecf :=range _edff {_bgbg =append (_bgbg ,_cc .MakeInteger (_bbecf ));};return _bgbg ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_aabe *ContentStreamProcessor )Process (resources *_fc .PdfPageResources )error {_aabe ._agef .ColorspaceStroking =_fc .NewPdfColorspaceDeviceGray ();_aabe ._agef .ColorspaceNonStroking =_fc .NewPdfColorspaceDeviceGray ();_aabe ._agef .ColorStroking =_fc .NewPdfColorDeviceGray (0);_aabe ._agef .ColorNonStroking =_fc .NewPdfColorDeviceGray (0);_aabe ._agef .CTM =_af .IdentityMatrix ();for _ ,_gce :=range _aabe ._ffb {var _gbba error ;switch _gce .Operand {case "\u0071":_aabe ._gdga .Push (_aabe ._agef );case "\u0051":if len (_aabe ._gdga )==0{_da .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_aabe ._agef =_aabe ._gdga .Pop ();case "\u0043\u0053":_gbba =_aabe .handleCommand_CS (_gce ,resources );case "\u0063\u0073":_gbba =_aabe .handleCommand_cs (_gce ,resources );case "\u0053\u0043":_gbba =_aabe .handleCommand_SC (_gce ,resources );case "\u0053\u0043\u004e":_gbba =_aabe .handleCommand_SCN (_gce ,resources );case "\u0073\u0063":_gbba =_aabe .handleCommand_sc (_gce ,resources );case "\u0073\u0063\u006e":_gbba =_aabe .handleCommand_scn (_gce ,resources );case "\u0047":_gbba =_aabe .handleCommand_G (_gce ,resources );case "\u0067":_gbba =_aabe .handleCommand_g (_gce ,resources );case "\u0052\u0047":_gbba =_aabe .handleCommand_RG (_gce ,resources );case "\u0072\u0067":_gbba =_aabe .handleCommand_rg (_gce ,resources );case "\u004b":_gbba =_aabe .handleCommand_K (_gce ,resources );case "\u006b":_gbba =_aabe .handleCommand_k (_gce ,resources );case "\u0063\u006d":_gbba =_aabe .handleCommand_cm (_gce ,resources );};if _gbba !=nil {_da .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_gce .Operand ,_gbba );_da .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_gce .Operand );return _gbba ;};for _ ,_dadc :=range _aabe ._gfdd {var _aeaf error ;if _dadc .Condition .All (){_aeaf =_dadc .Handler (_gce ,_aabe ._agef ,resources );}else if _dadc .Condition .Operand ()&&_gce .Operand ==_dadc .Operand {_aeaf =_dadc .Handler (_gce ,_aabe ._agef ,resources );};if _aeaf !=nil {_da .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_aeaf );return _aeaf ;};};};return nil ;};func (_cfg *ContentStreamParser )parseArray ()(*_cc .PdfObjectArray ,error ){_bgbf :=_cc .MakeArray ();_cfg ._gabe .ReadByte ();for {_cfg .skipSpaces ();_dgf ,_cagf :=_cfg ._gabe .Peek (1);if _cagf !=nil {return _bgbf ,_cagf ;};if _dgf [0]==']'{_cfg ._gabe .ReadByte ();break ;};_afgc ,_ ,_cagf :=_cfg .parseObject ();if _cagf !=nil {return _bgbf ,_cagf ;};_bgbf .Append (_afgc );};return _bgbf ,nil ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;func _aadd (_cafg *ContentStreamInlineImage ,_dge *_cc .PdfObjectDictionary )(*_cc .FlateEncoder ,error ){_baag :=_cc .NewFlateEncoder ();if _cafg ._ede !=nil {_baag .SetImage (_cafg ._ede );};if _dge ==nil {_ead :=_cafg .DecodeParms ;if _ead !=nil {_caff ,_bgg :=_cc .GetDict (_ead );if !_bgg {_da .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_ead );return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_dge =_caff ;};};if _dge ==nil {return _baag ,nil ;};_da .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_dge .String ());_abbg :=_dge .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _abbg ==nil {_da .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_fadg ,_ddf :=_abbg .(*_cc .PdfObjectInteger );if !_ddf {_da .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_abbg );return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_baag .Predictor =int (*_fadg );};_abbg =_dge .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _abbg !=nil {_baae ,_dfd :=_abbg .(*_cc .PdfObjectInteger );if !_dfd {_da .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_c .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_baag .BitsPerComponent =int (*_baae );};if _baag .Predictor > 1{_baag .Columns =1;_abbg =_dge .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _abbg !=nil {_ccdb ,_gfg :=_abbg .(*_cc .PdfObjectInteger );if !_gfg {return nil ,_c .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_baag .Columns =int (*_ccdb );};_baag .Colors =1;_dede :=_dge .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dede !=nil {_accf ,_cgdd :=_dede .(*_cc .PdfObjectInteger );if !_cgdd {return nil ,_c .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_baag .Colors =int (*_accf );};};return _baag ,nil ;};var (ErrInvalidOperand =_g .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aec *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_ddd :=ContentStreamOperation {};_ddd .Operand ="\u006c";_ddd .Params =_baed ([]float64 {x ,y });_aec ._gfd =append (_aec ._gfd ,&_ddd );return _aec ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_dagg *ContentStreamOperation ,_bbfd GraphicsState ,_daeb *_fc .PdfPageResources )error ;func _bcdg (_bag _fc .PdfColorspace )bool {_ ,_cgga :=_bag .(*_fc .PdfColorspaceSpecialPattern );return _cgga ;};func (_ffd *ContentStreamParser )parseName ()(_cc .PdfObjectName ,error ){_ebf :="";_aebf :=false ;for {_cbc ,_fffb :=_ffd ._gabe .Peek (1);if _fffb ==_a .EOF {break ;};if _fffb !=nil {return _cc .PdfObjectName (_ebf ),_fffb ;};if !_aebf {if _cbc [0]=='/'{_aebf =true ;_ffd ._gabe .ReadByte ();}else {_da .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_cbc ,_cbc );return _cc .PdfObjectName (_ebf ),_c .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_cbc [0]);};}else {if _cc .IsWhiteSpace (_cbc [0]){break ;}else if (_cbc [0]=='/')||(_cbc [0]=='[')||(_cbc [0]=='(')||(_cbc [0]==']')||(_cbc [0]=='<')||(_cbc [0]=='>'){break ;}else if _cbc [0]=='#'{_agfa ,_ggd :=_ffd ._gabe .Peek (3);if _ggd !=nil {return _cc .PdfObjectName (_ebf ),_ggd ;};_ffd ._gabe .Discard (3);_dafc ,_ggd :=_b .DecodeString (string (_agfa [1:3]));if _ggd !=nil {return _cc .PdfObjectName (_ebf ),_ggd ;};_ebf +=string (_dafc );}else {_cbeb ,_ :=_ffd ._gabe .ReadByte ();_ebf +=string (_cbeb );};};};return _cc .PdfObjectName (_ebf ),nil ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cbf *ContentCreator )Add_scn_pattern (name _cc .PdfObjectName ,c ...float64 )*ContentCreator {_aff :=ContentStreamOperation {};_aff .Operand ="\u0073\u0063\u006e";_aff .Params =_baed (c );_aff .Params =append (_aff .Params ,_cc .MakeName (string (name )));_cbf ._gfd =append (_cbf ._gfd ,&_aff );return _cbf ;};var _acf =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ccdc *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_cd :=ContentStreamOperation {};_cd .Operand ="\u0054\u0063";_cd .Params =_baed ([]float64 {charSpace });_ccdc ._gfd =append (_ccdc ._gfd ,&_cd );return _ccdc ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dcc *ContentCreator )Add_Tf (fontName _cc .PdfObjectName ,fontSize float64 )*ContentCreator {_ec :=ContentStreamOperation {};_ec .Operand ="\u0054\u0066";_ec .Params =_fbac ([]_cc .PdfObjectName {fontName });_ec .Params =append (_ec .Params ,_baed ([]float64 {fontSize })...);_dcc ._gfd =append (_dcc ._gfd ,&_ec );return _dcc ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_ccda *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_bbca :=ContentStreamInlineImage {};for {_ccda .skipSpaces ();_bgf ,_bbec ,_gee :=_ccda .parseObject ();if _gee !=nil {return nil ,_gee ;};if !_bbec {_ecgb ,_bec :=_cc .GetName (_bgf );if !_bec {_da .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_bgf );return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_bgf );};_ecfe ,_aea ,_bade :=_ccda .parseObject ();if _bade !=nil {return nil ,_bade ;};if _aea {return nil ,_c .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_ecgb {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_bbca .BitsPerComponent =_ecfe ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_bbca .ColorSpace =_ecfe ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_bbca .Decode =_ecfe ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_bbca .DecodeParms =_ecfe ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_bbca .Filter =_ecfe ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_bbca .Height =_ecfe ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_bbca .ImageMask =_ecfe ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_bbca .Intent =_ecfe ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_bbca .Interpolate =_ecfe ;case "\u0057","\u0057\u0069\u0064t\u0068":_bbca .Width =_ecfe ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_da .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_ecgb );default:return nil ,_c .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_ecgb );};};if _bbec {_fef ,_abg :=_bgf .(*_cc .PdfObjectString );if !_abg {return nil ,_c .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _fef .Str ()=="\u0045\u0049"{_da .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_bbca ,nil ;}else if _fef .Str ()=="\u0049\u0044"{_da .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_ceb ,_cabf :=_ccda ._gabe .Peek (1);if _cabf !=nil {return nil ,_cabf ;};if _cc .IsWhiteSpace (_ceb [0]){_ccda ._gabe .Discard (1);};_bbca ._gec =[]byte {};_ggbc :=0;var _eaf []byte ;for {_bde ,_aeb :=_ccda ._gabe .ReadByte ();if _aeb !=nil {_da .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_aeb ;};if _ggbc ==0{if _cc .IsWhiteSpace (_bde ){_eaf =[]byte {};_eaf =append (_eaf ,_bde );_ggbc =1;}else if _bde =='E'{_eaf =append (_eaf ,_bde );_ggbc =2;}else {_bbca ._gec =append (_bbca ._gec ,_bde );};}else if _ggbc ==1{_eaf =append (_eaf ,_bde );if _bde =='E'{_ggbc =2;}else {_bbca ._gec =append (_bbca ._gec ,_eaf ...);_eaf =[]byte {};if _cc .IsWhiteSpace (_bde ){_ggbc =1;}else {_ggbc =0;};};}else if _ggbc ==2{_eaf =append (_eaf ,_bde );if _bde =='I'{_ggbc =3;}else {_bbca ._gec =append (_bbca ._gec ,_eaf ...);_eaf =[]byte {};_ggbc =0;};}else if _ggbc ==3{_eaf =append (_eaf ,_bde );if _cc .IsWhiteSpace (_bde ){_abce ,_cccfb :=_ccda ._gabe .Peek (20);if _cccfb !=nil &&_cccfb !=_a .EOF {return nil ,_cccfb ;};_ebc :=NewContentStreamParser (string (_abce ));_edc :=true ;for _fgg :=0;_fgg < 3;_fgg ++{_abd ,_fdb ,_dcgf :=_ebc .parseObject ();if _dcgf !=nil {if _dcgf ==_a .EOF {break ;};continue ;};if _fdb &&!_gege (_abd .String ()){_edc =false ;break ;};};if _edc {if len (_bbca ._gec )> 100{_da .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_bbca ._gec ),_bbca ._gec [:100]);}else {_da .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_bbca ._gec ),_bbca ._gec );};return &_bbca ,nil ;};};_bbca ._gec =append (_bbca ._gec ,_eaf ...);_eaf =[]byte {};_ggbc =0;};};};};};};func (_bdad *ContentStreamProcessor )handleCommand_g (_efg *ContentStreamOperation ,_dcae *_fc .PdfPageResources )error {_gcaf :=_fc .NewPdfColorspaceDeviceGray ();if len (_efg .Params )!=_gcaf .GetNumComponents (){_da .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_da .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_efg .Params ),_gcaf );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bgge ,_cgb :=_gcaf .ColorFromPdfObjects (_efg .Params );if _cgb !=nil {_da .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_gcaf ,_efg ,_cgb );return _cgb ;};_bdad ._agef .ColorspaceNonStroking =_gcaf ;_bdad ._agef .ColorNonStroking =_bgge ;return nil ;};func _cddc (_gaae *ContentStreamInlineImage )(*_cc .MultiEncoder ,error ){_gcbf :=_cc .NewMultiEncoder ();var _fceb *_cc .PdfObjectDictionary ;var _fcb []_cc .PdfObject ;if _ada :=_gaae .DecodeParms ;_ada !=nil {_gbbd ,_ddbba :=_ada .(*_cc .PdfObjectDictionary );if _ddbba {_fceb =_gbbd ;};_fff ,_daf :=_ada .(*_cc .PdfObjectArray );if _daf {for _ ,_cgad :=range _fff .Elements (){if _cdg ,_cbe :=_cgad .(*_cc .PdfObjectDictionary );_cbe {_fcb =append (_fcb ,_cdg );}else {_fcb =append (_fcb ,nil );};};};};_dcgc :=_gaae .Filter ;if _dcgc ==nil {return nil ,_c .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_beab ,_cdb :=_dcgc .(*_cc .PdfObjectArray );if !_cdb {return nil ,_c .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _gbde ,_agf :=range _beab .Elements (){_dacc ,_bfc :=_agf .(*_cc .PdfObjectName );if !_bfc {return nil ,_c .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _bbcd _cc .PdfObject ;if _fceb !=nil {_bbcd =_fceb ;}else {if len (_fcb )> 0{if _gbde >=len (_fcb ){return nil ,_c .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_bbcd =_fcb [_gbde ];};};var _cafc *_cc .PdfObjectDictionary ;if _fbda ,_dfe :=_bbcd .(*_cc .PdfObjectDictionary );_dfe {_cafc =_fbda ;};if *_dacc ==_cc .StreamEncodingFilterNameFlate ||*_dacc =="\u0046\u006c"{_dda ,_bcb :=_aadd (_gaae ,_cafc );if _bcb !=nil {return nil ,_bcb ;};_gcbf .AddEncoder (_dda );}else if *_dacc ==_cc .StreamEncodingFilterNameLZW {_gba ,_beeg :=_abf (_gaae ,_cafc );if _beeg !=nil {return nil ,_beeg ;};_gcbf .AddEncoder (_gba );}else if *_dacc ==_cc .StreamEncodingFilterNameASCIIHex {_ffeb :=_cc .NewASCIIHexEncoder ();_gcbf .AddEncoder (_ffeb );}else if *_dacc ==_cc .StreamEncodingFilterNameASCII85 ||*_dacc =="\u0041\u0038\u0035"{_egb :=_cc .NewASCII85Encoder ();_gcbf .AddEncoder (_egb );}else {_da .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_dacc );return nil ,_c .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _gcbf ,nil ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_eec *ContentCreator )Add_W_starred ()*ContentCreator {_fec :=ContentStreamOperation {};_fec .Operand ="\u0057\u002a";_eec ._gfd =append (_eec ._gfd ,&_fec );return _eec ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_ga *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_ga )==0{return _ga ;};if _ga .isWrapped (){return _ga ;};*_ga =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_ga ...);_ab :=0;for _ ,_be :=range *_ga {if _be .Operand =="\u0071"{_ab ++;}else if _be .Operand =="\u0051"{_ab --;};};for _ab > 0{*_ga =append (*_ga ,&ContentStreamOperation {Operand :"\u0051"});_ab --;};return _ga ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_dabf *ContentStreamInlineImage )ToImage (resources *_fc .PdfPageResources )(*_fc .Image ,error ){_bffa ,_bbe :=_dabf .toImageBase (resources );if _bbe !=nil {return nil ,_bbe ;};_adb ,_bbe :=_eaae (_dabf );if _bbe !=nil {return nil ,_bbe ;};_da .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_adb ,_adb );_da .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_dabf );_fdeb ,_bbe :=_adb .DecodeBytes (_dabf ._gec );if _bbe !=nil {return nil ,_bbe ;};_baafb :=&_fc .Image {Width :int64 (_bffa .Width ),Height :int64 (_bffa .Height ),BitsPerComponent :int64 (_bffa .BitsPerComponent ),ColorComponents :_bffa .ColorComponents ,Data :_fdeb };if len (_bffa .Decode )> 0{for _edef :=0;_edef < len (_bffa .Decode );_edef ++{_bffa .Decode [_edef ]*=float64 ((int (1)<<uint (_bffa .BitsPerComponent ))-1);};_baafb .SetDecode (_bffa .Decode );};return _baafb ,nil ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gff *ContentCreator )Add_f_starred ()*ContentCreator {_fb :=ContentStreamOperation {};_fb .Operand ="\u0066\u002a";_gff ._gfd =append (_gff ._gfd ,&_fb );return _gff ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fdea *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_fce :=ContentStreamOperation {};_fce .Operand ="\u006a";_fce .Params =_fbac ([]_cc .PdfObjectName {_cc .PdfObjectName (lineJoinStyle )});_fdea ._gfd =append (_fdea ._gfd ,&_fce );return _fdea ;};func (_gccb *ContentStreamInlineImage )String ()string {_fed :=_c .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_gccb ._gec ));if _gccb .BitsPerComponent !=nil {_fed +="\u002d\u0020\u0042\u0050\u0043\u0020"+_gccb .BitsPerComponent .WriteString ()+"\u000a";};if _gccb .ColorSpace !=nil {_fed +="\u002d\u0020\u0043S\u0020"+_gccb .ColorSpace .WriteString ()+"\u000a";};if _gccb .Decode !=nil {_fed +="\u002d\u0020\u0044\u0020"+_gccb .Decode .WriteString ()+"\u000a";};if _gccb .DecodeParms !=nil {_fed +="\u002d\u0020\u0044P\u0020"+_gccb .DecodeParms .WriteString ()+"\u000a";};if _gccb .Filter !=nil {_fed +="\u002d\u0020\u0046\u0020"+_gccb .Filter .WriteString ()+"\u000a";};if _gccb .Height !=nil {_fed +="\u002d\u0020\u0048\u0020"+_gccb .Height .WriteString ()+"\u000a";};if _gccb .ImageMask !=nil {_fed +="\u002d\u0020\u0049M\u0020"+_gccb .ImageMask .WriteString ()+"\u000a";};if _gccb .Intent !=nil {_fed +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_gccb .Intent .WriteString ()+"\u000a";};if _gccb .Interpolate !=nil {_fed +="\u002d\u0020\u0049\u0020"+_gccb .Interpolate .WriteString ()+"\u000a";};if _gccb .Width !=nil {_fed +="\u002d\u0020\u0057\u0020"+_gccb .Width .WriteString ()+"\u000a";};return _fed ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_cc .PdfObject ;Operand string ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aca *ContentCreator )Add_h ()*ContentCreator {_eaa :=ContentStreamOperation {};_eaa .Operand ="\u0068";_aca ._gfd =append (_aca ._gfd ,&_eaa );return _aca ;};func (_cfgg *ContentStreamProcessor )handleCommand_rg (_fdgg *ContentStreamOperation ,_adae *_fc .PdfPageResources )error {_gecf :=_fc .NewPdfColorspaceDeviceRGB ();if len (_fdgg .Params )!=_gecf .GetNumComponents (){_da .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_da .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fdgg .Params ),_gecf );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cdgb ,_dffb :=_gecf .ColorFromPdfObjects (_fdgg .Params );if _dffb !=nil {return _dffb ;};_cfgg ._agef .ColorspaceNonStroking =_gecf ;_cfgg ._agef .ColorNonStroking =_cdgb ;return nil ;};func (_faed *ContentStreamProcessor )getInitialColor (_bcdd _fc .PdfColorspace )(_fc .PdfColor ,error ){switch _faba :=_bcdd .(type ){case *_fc .PdfColorspaceDeviceGray :return _fc .NewPdfColorDeviceGray (0.0),nil ;case *_fc .PdfColorspaceDeviceRGB :return _fc .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_fc .PdfColorspaceDeviceCMYK :return _fc .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_fc .PdfColorspaceCalGray :return _fc .NewPdfColorCalGray (0.0),nil ;case *_fc .PdfColorspaceCalRGB :return _fc .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_fc .PdfColorspaceLab :_fdgc :=0.0;_fegc :=0.0;_fcde :=0.0;if _faba .Range [0]> 0{_fdgc =_faba .Range [0];};if _faba .Range [2]> 0{_fegc =_faba .Range [2];};return _fc .NewPdfColorLab (_fdgc ,_fegc ,_fcde ),nil ;case *_fc .PdfColorspaceICCBased :if _faba .Alternate ==nil {_da .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_faba .N );if _faba .N ==1{_da .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _faed .getInitialColor (_fc .NewPdfColorspaceDeviceGray ());}else if _faba .N ==3{_da .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _faed .getInitialColor (_fc .NewPdfColorspaceDeviceRGB ());}else if _faba .N ==4{_da .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _faed .getInitialColor (_fc .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_g .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _faed .getInitialColor (_faba .Alternate );case *_fc .PdfColorspaceSpecialIndexed :if _faba .Base ==nil {return nil ,_g .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _faed .getInitialColor (_faba .Base );case *_fc .PdfColorspaceSpecialSeparation :if _faba .AlternateSpace ==nil {return nil ,_g .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _faed .getInitialColor (_faba .AlternateSpace );case *_fc .PdfColorspaceDeviceN :if _faba .AlternateSpace ==nil {return nil ,_g .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _faed .getInitialColor (_faba .AlternateSpace );case *_fc .PdfColorspaceSpecialPattern :return nil ,nil ;};_da .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bcdd );return nil ,_g .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};func _abf (_bgeea *ContentStreamInlineImage ,_afcb *_cc .PdfObjectDictionary )(*_cc .LZWEncoder ,error ){_dgeg :=_cc .NewLZWEncoder ();if _afcb ==nil {if _bgeea .DecodeParms !=nil {_fbee ,_bad :=_cc .GetDict (_bgeea .DecodeParms );if !_bad {_da .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_bgeea .DecodeParms );return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_afcb =_fbee ;};};if _afcb ==nil {return _dgeg ,nil ;};_agg :=_afcb .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _agg !=nil {_feg ,_gbd :=_agg .(*_cc .PdfObjectInteger );if !_gbd {_da .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_agg );return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_feg !=0&&*_feg !=1{return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_dgeg .EarlyChange =int (*_feg );}else {_dgeg .EarlyChange =1;};_agg =_afcb .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _agg !=nil {_ffcc ,_faeb :=_agg .(*_cc .PdfObjectInteger );if !_faeb {_da .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_agg );return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_dgeg .Predictor =int (*_ffcc );};_agg =_afcb .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _agg !=nil {_eeg ,_beeb :=_agg .(*_cc .PdfObjectInteger );if !_beeb {_da .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_c .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_dgeg .BitsPerComponent =int (*_eeg );};if _dgeg .Predictor > 1{_dgeg .Columns =1;_agg =_afcb .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _agg !=nil {_bgd ,_affb :=_agg .(*_cc .PdfObjectInteger );if !_affb {return nil ,_c .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_dgeg .Columns =int (*_bgd );};_dgeg .Colors =1;_agg =_afcb .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _agg !=nil {_dcg ,_cdd :=_agg .(*_cc .PdfObjectInteger );if !_cdd {return nil ,_c .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_dgeg .Colors =int (*_dcg );};};_da .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_afcb .String ());return _dgeg ,nil ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_aecg HandlerConditionEnum )Operand ()bool {return _aecg ==HandlerConditionEnumOperand };

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;func _baed (_dagf []float64 )[]_cc .PdfObject {var _babd []_cc .PdfObject ;for _ ,_ggdb :=range _dagf {_babd =append (_babd ,_cc .MakeFloat (_ggdb ));};return _babd ;};func (_dfaa *ContentStreamParser )parseObject ()(_aaadb _cc .PdfObject ,_fagb bool ,_ddga error ){_dfaa .skipSpaces ();for {_fegf ,_dae :=_dfaa ._gabe .Peek (2);if _dae !=nil {return nil ,false ,_dae ;};_da .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_fegf ));if _fegf [0]=='%'{_dfaa .skipComments ();continue ;}else if _fegf [0]=='/'{_fbge ,_cgef :=_dfaa .parseName ();_da .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_fbge );return &_fbge ,false ,_cgef ;}else if _fegf [0]=='('{_da .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_bceb ,_bfb :=_dfaa .parseString ();return _bceb ,false ,_bfb ;}else if _fegf [0]=='<'&&_fegf [1]!='<'{_da .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_fgf ,_defa :=_dfaa .parseHexString ();return _fgf ,false ,_defa ;}else if _fegf [0]=='['{_da .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_dbea ,_eeaa :=_dfaa .parseArray ();return _dbea ,false ,_eeaa ;}else if _cc .IsFloatDigit (_fegf [0])||(_fegf [0]=='-'&&_cc .IsFloatDigit (_fegf [1])){_da .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_dcd ,_cea :=_dfaa .parseNumber ();return _dcd ,false ,_cea ;}else if _fegf [0]=='<'&&_fegf [1]=='<'{_cfd ,_abdc :=_dfaa .parseDict ();return _cfd ,false ,_abdc ;}else {_da .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_fegf ,_ =_dfaa ._gabe .Peek (5);_bcc :=string (_fegf );_da .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_bcc );if (len (_bcc )> 3)&&(_bcc [:4]=="\u006e\u0075\u006c\u006c"){_bdg ,_bac :=_dfaa .parseNull ();return &_bdg ,false ,_bac ;}else if (len (_bcc )> 4)&&(_bcc [:5]=="\u0066\u0061\u006cs\u0065"){_efde ,_ecb :=_dfaa .parseBool ();return &_efde ,false ,_ecb ;}else if (len (_bcc )> 3)&&(_bcc [:4]=="\u0074\u0072\u0075\u0065"){_eecd ,_egg :=_dfaa .parseBool ();return &_eecd ,false ,_egg ;};_abced ,_dcba :=_dfaa .parseOperand ();if _dcba !=nil {return _abced ,false ,_dcba ;};if len (_abced .String ())< 1{return _abced ,false ,ErrInvalidOperand ;};return _abced ,true ,nil ;};};};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gde *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_cfc :=ContentStreamOperation {};_cfc .Operand ="\u0054\u007a";_cfc .Params =_baed ([]float64 {scale });_gde ._gfd =append (_gde ._gfd ,&_cfc );return _gde ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fbea *ContentCreator )Add_Tstar ()*ContentCreator {_bbc :=ContentStreamOperation {};_bbc .Operand ="\u0054\u002a";_fbea ._gfd =append (_fbea ._gfd ,&_bbc );return _fbea ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_fag *ContentCreator )Add_quote (textstr _cc .PdfObjectString )*ContentCreator {_dbbe :=ContentStreamOperation {};_dbbe .Operand ="\u0027";_dbbe .Params =_eceec ([]_cc .PdfObjectString {textstr });_fag ._gfd =append (_fag ._gfd ,&_dbbe );return _fag ;};func (_facg *ContentStreamParser )parseOperand ()(*_cc .PdfObjectString ,error ){var _dbe []byte ;for {_gdbf ,_dgd :=_facg ._gabe .Peek (1);if _dgd !=nil {return _cc .MakeString (string (_dbe )),_dgd ;};if _cc .IsDelimiter (_gdbf [0]){break ;};if _cc .IsWhiteSpace (_gdbf [0]){break ;};_ccdf ,_ :=_facg ._gabe .ReadByte ();_dbe =append (_dbe ,_ccdf );};return _cc .MakeString (string (_dbe )),nil ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bbf *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_dbb :=ContentStreamOperation {};_dbb .Operand ="\u004b";_dbb .Params =_baed ([]float64 {c ,m ,y ,k });_bbf ._gfd =append (_bbf ._gfd ,&_dbb );return _bbf ;};

// GetEncoder returns the encoder of the inline image.
func (_eee *ContentStreamInlineImage )GetEncoder ()(_cc .StreamEncoder ,error ){return _eaae (_eee )};func (_dfdb *ContentStreamProcessor )getColorspace (_adec string ,_ddba *_fc .PdfPageResources )(_fc .PdfColorspace ,error ){switch _adec {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _fc .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _fc .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _fc .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _fc .NewPdfColorspaceSpecialPattern (),nil ;};_ged ,_cdag :=_ddba .GetColorspaceByName (_cc .PdfObjectName (_adec ));if _cdag {return _ged ,nil ;};switch _adec {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _fc .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _fc .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _fc .NewPdfColorspaceLab (),nil ;};_da .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_adec );return nil ,_c .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_adec );};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dfgg *ContentCreator )Add_s ()*ContentCreator {_cccd :=ContentStreamOperation {};_cccd .Operand ="\u0073";_dfgg ._gfd =append (_dfgg ._gfd ,&_cccd );return _dfgg ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_gded *ContentCreator )Add_quotes (textstr _cc .PdfObjectString ,aw ,ac float64 )*ContentCreator {_ddc :=ContentStreamOperation {};_ddc .Operand ="\u0022";_ddc .Params =_baed ([]float64 {aw ,ac });_ddc .Params =append (_ddc .Params ,_eceec ([]_cc .PdfObjectString {textstr })...);_gded ._gfd =append (_gded ._gfd ,&_ddc );return _gded ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fbe *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_aaad :=ContentStreamOperation {};_aaad .Operand ="\u0054\u0073";_aaad .Params =_baed ([]float64 {rise });_fbe ._gfd =append (_fbe ._gfd ,&_aaad );return _fbe ;};

// Operations returns the list of operations.
func (_bea *ContentCreator )Operations ()*ContentStreamOperations {return &_bea ._gfd };

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_bd *ContentStreamParser )ExtractText ()(string ,error ){_cca ,_fcg :=_bd .Parse ();if _fcg !=nil {return "",_fcg ;};_dc :=false ;_ded ,_cgd :=float64 (-1),float64 (-1);_fde :="";for _ ,_ea :=range *_cca {if _ea .Operand =="\u0042\u0054"{_dc =true ;}else if _ea .Operand =="\u0045\u0054"{_dc =false ;};if _ea .Operand =="\u0054\u0064"||_ea .Operand =="\u0054\u0044"||_ea .Operand =="\u0054\u002a"{_fde +="\u000a";};if _ea .Operand =="\u0054\u006d"{if len (_ea .Params )!=6{continue ;};_ef ,_ggc :=_ea .Params [4].(*_cc .PdfObjectFloat );if !_ggc {_dea ,_deaf :=_ea .Params [4].(*_cc .PdfObjectInteger );if !_deaf {continue ;};_ef =_cc .MakeFloat (float64 (*_dea ));};_cae ,_ggc :=_ea .Params [5].(*_cc .PdfObjectFloat );if !_ggc {_df ,_gc :=_ea .Params [5].(*_cc .PdfObjectInteger );if !_gc {continue ;};_cae =_cc .MakeFloat (float64 (*_df ));};if _cgd ==-1{_cgd =float64 (*_cae );}else if _cgd > float64 (*_cae ){_fde +="\u000a";_ded =float64 (*_ef );_cgd =float64 (*_cae );continue ;};if _ded ==-1{_ded =float64 (*_ef );}else if _ded < float64 (*_ef ){_fde +="\u0009";_ded =float64 (*_ef );};};if _dc &&_ea .Operand =="\u0054\u004a"{if len (_ea .Params )< 1{continue ;};_abc ,_dd :=_ea .Params [0].(*_cc .PdfObjectArray );if !_dd {return "",_c .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_ea .Params [0]);};for _ ,_fcd :=range _abc .Elements (){switch _abcc :=_fcd .(type ){case *_cc .PdfObjectString :_fde +=_abcc .Str ();case *_cc .PdfObjectFloat :if *_abcc < -100{_fde +="\u0020";};case *_cc .PdfObjectInteger :if *_abcc < -100{_fde +="\u0020";};};};}else if _dc &&_ea .Operand =="\u0054\u006a"{if len (_ea .Params )< 1{continue ;};_efb ,_ccb :=_ea .Params [0].(*_cc .PdfObjectString );if !_ccb {return "",_c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_ea .Params [0]);};_fde +=_efb .Str ();};};return _fde ,nil ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_adc *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_baaf :=ContentStreamOperation {};_baaf .Operand ="\u006b";_baaf .Params =_baed ([]float64 {c ,m ,y ,k });_adc ._gfd =append (_adc ._gfd ,&_baaf );return _adc ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_beec *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_feae :=ContentStreamOperations {};for {_dag :=ContentStreamOperation {};for {_bgb ,_efea ,_efbg :=_beec .parseObject ();if _efbg !=nil {if _efbg ==_a .EOF {return &_feae ,nil ;};return &_feae ,_efbg ;};if _efea {_dag .Operand ,_ =_cc .GetStringVal (_bgb );_feae =append (_feae ,&_dag );break ;}else {_dag .Params =append (_dag .Params ,_bgb );};};if _dag .Operand =="\u0042\u0049"{_gcgc ,_ggcg :=_beec .ParseInlineImage ();if _ggcg !=nil {return &_feae ,_ggcg ;};_dag .Params =append (_dag .Params ,_gcgc );};};};func _eceec (_fgd []_cc .PdfObjectString )[]_cc .PdfObject {var _dbad []_cc .PdfObject ;for _ ,_agfc :=range _fgd {_dbad =append (_dbad ,_cc .MakeString (_agfc .Str ()));};return _dbad ;};func (_bfe *ContentStreamInlineImage )toImageBase (_gab *_fc .PdfPageResources )(*_gd .ImageBase ,error ){if _bfe ._ede !=nil {return _bfe ._ede ,nil ;};_faa :=_gd .ImageBase {};if _bfe .Height ==nil {return nil ,_g .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_aef ,_caab :=_bfe .Height .(*_cc .PdfObjectInteger );if !_caab {return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_faa .Height =int (*_aef );if _bfe .Width ==nil {return nil ,_g .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_cgddc ,_caab :=_bfe .Width .(*_cc .PdfObjectInteger );if !_caab {return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_faa .Width =int (*_cgddc );_eecc ,_dfa :=_bfe .IsMask ();if _dfa !=nil {return nil ,_dfa ;};if _eecc {_faa .BitsPerComponent =1;_faa .ColorComponents =1;}else {if _bfe .BitsPerComponent ==nil {_da .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_faa .BitsPerComponent =8;}else {_dbcf ,_gga :=_bfe .BitsPerComponent .(*_cc .PdfObjectInteger );if !_gga {_da .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bfe .BitsPerComponent );return nil ,_g .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_faa .BitsPerComponent =int (*_dbcf );};if _bfe .ColorSpace !=nil {_cccf ,_ddg :=_bfe .GetColorSpace (_gab );if _ddg !=nil {return nil ,_ddg ;};_faa .ColorComponents =_cccf .GetNumComponents ();}else {_da .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_faa .ColorComponents =1;};};if _gbaf ,_dde :=_cc .GetArray (_bfe .Decode );_dde {_faa .Decode ,_dfa =_gbaf .ToFloat64Array ();if _dfa !=nil {return nil ,_dfa ;};};_bfe ._ede =&_faa ;return _bfe ._ede ,nil ;};func _bcf (_ecg *ContentStreamInlineImage )(*_cc .DCTEncoder ,error ){_caaa :=_cc .NewDCTEncoder ();_bfa :=_bf .NewReader (_ecg ._gec );_cdf ,_dcfc :=_e .DecodeConfig (_bfa );if _dcfc !=nil {_da .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_dcfc );return nil ,_dcfc ;};switch _cdf .ColorModel {case _fa .RGBAModel :_caaa .BitsPerComponent =8;_caaa .ColorComponents =3;case _fa .RGBA64Model :_caaa .BitsPerComponent =16;_caaa .ColorComponents =3;case _fa .GrayModel :_caaa .BitsPerComponent =8;_caaa .ColorComponents =1;case _fa .Gray16Model :_caaa .BitsPerComponent =16;_caaa .ColorComponents =1;case _fa .CMYKModel :_caaa .BitsPerComponent =8;_caaa .ColorComponents =4;case _fa .YCbCrModel :_caaa .BitsPerComponent =8;_caaa .ColorComponents =3;default:return nil ,_g .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_caaa .Width =_cdf .Width ;_caaa .Height =_cdf .Height ;_da .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_caaa );return _caaa ,nil ;};func (_beb *ContentStreamProcessor )handleCommand_G (_aafd *ContentStreamOperation ,_cfa *_fc .PdfPageResources )error {_ebfb :=_fc .NewPdfColorspaceDeviceGray ();if len (_aafd .Params )!=_ebfb .GetNumComponents (){_da .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_da .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aafd .Params ),_ebfb );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_geec ,_cdbb :=_ebfb .ColorFromPdfObjects (_aafd .Params );if _cdbb !=nil {return _cdbb ;};_beb ._agef .ColorspaceStroking =_ebfb ;_beb ._agef .ColorStroking =_geec ;return nil ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_aad *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_gb :=_bg .Cos (angle *_bg .Pi /180.0);_ba :=_bg .Sin (angle *_bg .Pi /180.0);_bc :=-_bg .Sin (angle *_bg .Pi /180.0);_ad :=_bg .Cos (angle *_bg .Pi /180.0);return _aad .Add_cm (_gb ,_ba ,_bc ,_ad ,0,0);};

// Scale applies x-y scaling to the transformation matrix.
func (_ce *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _ce .Add_cm (sx ,0,0,sy ,0,0);};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gef *ContentCreator )Add_b_starred ()*ContentCreator {_bgea :=ContentStreamOperation {};_bgea .Operand ="\u0062\u002a";_gef ._gfd =append (_gef ._gfd ,&_bgea );return _gef ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_ebd *GraphicStateStack )Pop ()GraphicsState {_eceg :=(*_ebd )[len (*_ebd )-1];*_ebd =(*_ebd )[:len (*_ebd )-1];return _eceg ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_ffa *ContentCreator )Add_BT ()*ContentCreator {_aee :=ContentStreamOperation {};_aee .Operand ="\u0042\u0054";_ffa ._gfd =append (_ffa ._gfd ,&_aee );return _ffa ;};func (_fagc *ContentStreamParser )parseDict ()(*_cc .PdfObjectDictionary ,error ){_da .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_ggg :=_cc .MakeDict ();_bce ,_ :=_fagc ._gabe .ReadByte ();if _bce !='<'{return nil ,_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_bce ,_ =_fagc ._gabe .ReadByte ();if _bce !='<'{return nil ,_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_fagc .skipSpaces ();_cff ,_dcb :=_fagc ._gabe .Peek (2);if _dcb !=nil {return nil ,_dcb ;};_da .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_cff ),string (_cff ));if (_cff [0]=='>')&&(_cff [1]=='>'){_da .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_fagc ._gabe .ReadByte ();_fagc ._gabe .ReadByte ();break ;};_da .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_aceg ,_dcb :=_fagc .parseName ();_da .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_aceg );if _dcb !=nil {_da .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_dcb );return nil ,_dcb ;};if len (_aceg )> 4&&_aceg [len (_aceg )-4:]=="\u006e\u0075\u006c\u006c"{_agc :=_aceg [0:len (_aceg )-4];_da .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_aceg );_da .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_agc );_fagc .skipSpaces ();_abgb ,_ :=_fagc ._gabe .Peek (1);if _abgb [0]=='/'{_ggg .Set (_agc ,_cc .MakeNull ());continue ;};};_fagc .skipSpaces ();_efbd ,_ ,_dcb :=_fagc .parseObject ();if _dcb !=nil {return nil ,_dcb ;};_ggg .Set (_aceg ,_efbd );_da .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_aceg ,_efbd .String ());};return _ggg ,nil ;};func (_ebe *ContentStreamProcessor )handleCommand_sc (_ccbb *ContentStreamOperation ,_gacd *_fc .PdfPageResources )error {_cfb :=_ebe ._agef .ColorspaceNonStroking ;if !_bcdg (_cfb ){if len (_ccbb .Params )!=_cfb .GetNumComponents (){_da .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_da .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ccbb .Params ),_cfb );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_gede ,_babf :=_cfb .ColorFromPdfObjects (_ccbb .Params );if _babf !=nil {return _babf ;};_ebe ._agef .ColorNonStroking =_gede ;return nil ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _fc .Image ,encoder _cc .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_cc .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_fee :=ContentStreamInlineImage {};if img .ColorComponents ==1{_fee .ColorSpace =_cc .MakeName ("\u0047");}else if img .ColorComponents ==3{_fee .ColorSpace =_cc .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_fee .ColorSpace =_cc .MakeName ("\u0043\u004d\u0059\u004b");}else {_da .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_fee .BitsPerComponent =_cc .MakeInteger (img .BitsPerComponent );_fee .Width =_cc .MakeInteger (img .Width );_fee .Height =_cc .MakeInteger (img .Height );_ecf ,_gcga :=encoder .EncodeBytes (img .Data );if _gcga !=nil {return nil ,_gcga ;};_fee ._gec =_ecf ;_efac :=encoder .GetFilterName ();if _efac !=_cc .StreamEncodingFilterNameRaw {_fee .Filter =_cc .MakeName (_efac );};return &_fee ,nil ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_fcc *ContentCreator )Add_Tj (textstr _cc .PdfObjectString )*ContentCreator {_bbbf :=ContentStreamOperation {};_bbbf .Operand ="\u0054\u006a";_bbbf .Params =_eceec ([]_cc .PdfObjectString {textstr });_fcc ._gfd =append (_fcc ._gfd ,&_bbbf );return _fcc ;};

// Push pushes `gs` on the `gsStack`.
func (_dabb *GraphicStateStack )Push (gs GraphicsState ){*_dabb =append (*_dabb ,gs )};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dbf *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_adf :=ContentStreamOperation {};_adf .Operand ="\u0079";_adf .Params =_baed ([]float64 {x1 ,y1 ,x3 ,y3 });_dbf ._gfd =append (_dbf ._gfd ,&_adf );return _dbf ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_geb *ContentCreator )Add_S ()*ContentCreator {_ag :=ContentStreamOperation {};_ag .Operand ="\u0053";_geb ._gfd =append (_geb ._gfd ,&_ag );return _geb ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_dad *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_ade :=ContentStreamOperation {};_ade .Operand ="\u0054\u0044";_ade .Params =_baed ([]float64 {tx ,ty });_dad ._gfd =append (_dad ._gfd ,&_ade );return _dad ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ccc *ContentCreator )Add_i (flatness float64 )*ContentCreator {_cga :=ContentStreamOperation {};_cga .Operand ="\u0069";_cga .Params =_baed ([]float64 {flatness });_ccc ._gfd =append (_ccc ._gfd ,&_cga );return _ccc ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_efdf *ContentCreator )SetStrokingColor (color _fc .PdfColor )*ContentCreator {switch _bgee :=color .(type ){case *_fc .PdfColorDeviceGray :_efdf .Add_G (_bgee .Val ());case *_fc .PdfColorDeviceRGB :_efdf .Add_RG (_bgee .R (),_bgee .G (),_bgee .B ());case *_fc .PdfColorDeviceCMYK :_efdf .Add_K (_bgee .C (),_bgee .M (),_bgee .Y (),_bgee .K ());default:_da .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_bgee );};return _efdf ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_gaa *ContentCreator )Add_Do (name _cc .PdfObjectName )*ContentCreator {_afc :=ContentStreamOperation {};_afc .Operand ="\u0044\u006f";_afc .Params =_fbac ([]_cc .PdfObjectName {name });_gaa ._gfd =append (_gaa ._gfd ,&_afc );return _gaa ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_gfd ContentStreamOperations };func (_ddbe *ContentStreamProcessor )handleCommand_cs (_gabg *ContentStreamOperation ,_fece *_fc .PdfPageResources )error {if len (_gabg .Params )< 1{_da .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _g .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_gabg .Params )> 1{_da .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _g .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_dff ,_efdfd :=_gabg .Params [0].(*_cc .PdfObjectName );if !_efdfd {_da .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_fgga ,_bdeg :=_ddbe .getColorspace (string (*_dff ),_fece );if _bdeg !=nil {return _bdeg ;};_ddbe ._agef .ColorspaceNonStroking =_fgga ;_eebc ,_bdeg :=_ddbe .getInitialColor (_fgga );if _bdeg !=nil {return _bdeg ;};_ddbe ._agef .ColorNonStroking =_eebc ;return nil ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_fbg *ContentCreator )Add_ET ()*ContentCreator {_ggb :=ContentStreamOperation {};_ggb .Operand ="\u0045\u0054";_fbg ._gfd =append (_fbg ._gfd ,&_ggb );return _fbg ;};func (_bfeb *ContentStreamParser )parseBool ()(_cc .PdfObjectBool ,error ){_cgf ,_faag :=_bfeb ._gabe .Peek (4);if _faag !=nil {return _cc .PdfObjectBool (false ),_faag ;};if (len (_cgf )>=4)&&(string (_cgf [:4])=="\u0074\u0072\u0075\u0065"){_bfeb ._gabe .Discard (4);return _cc .PdfObjectBool (true ),nil ;};_cgf ,_faag =_bfeb ._gabe .Peek (5);if _faag !=nil {return _cc .PdfObjectBool (false ),_faag ;};if (len (_cgf )>=5)&&(string (_cgf [:5])=="\u0066\u0061\u006cs\u0065"){_bfeb ._gabe .Discard (5);return _cc .PdfObjectBool (false ),nil ;};return _cc .PdfObjectBool (false ),_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// GetColorSpace returns the colorspace of the inline image.
func (_dba *ContentStreamInlineImage )GetColorSpace (resources *_fc .PdfPageResources )(_fc .PdfColorspace ,error ){if _dba .ColorSpace ==nil {_da .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _fc .NewPdfColorspaceDeviceGray (),nil ;};if _bda ,_fgb :=_dba .ColorSpace .(*_cc .PdfObjectArray );_fgb {return _cagd (_bda );};_dfb ,_agfd :=_dba .ColorSpace .(*_cc .PdfObjectName );if !_agfd {_da .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_dba .ColorSpace ,_dba .ColorSpace );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_dfb =="\u0047"||*_dfb =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _fc .NewPdfColorspaceDeviceGray (),nil ;}else if *_dfb =="\u0052\u0047\u0042"||*_dfb =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _fc .NewPdfColorspaceDeviceRGB (),nil ;}else if *_dfb =="\u0043\u004d\u0059\u004b"||*_dfb =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _fc .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_dfb =="\u0049"||*_dfb =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_g .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_da .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_dfb );return nil ,_g .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_ecc ,_efbe :=resources .GetColorspaceByName (*_dfb );if !_efbe {_da .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_dfb );return nil ,_g .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _ecc ,nil ;};};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bae *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_efc :=ContentStreamOperation {};_efc .Operand ="\u0073\u0063\u006e";_efc .Params =_baed (c );_bae ._gfd =append (_bae ._gfd ,&_efc );return _bae ;};func (_degf *ContentStreamProcessor )handleCommand_SCN (_cgfb *ContentStreamOperation ,_bab *_fc .PdfPageResources )error {_edd :=_degf ._agef .ColorspaceStroking ;if !_bcdg (_edd ){if len (_cgfb .Params )!=_edd .GetNumComponents (){_da .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_da .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cgfb .Params ),_edd );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_gdgcb ,_bga :=_edd .ColorFromPdfObjects (_cgfb .Params );if _bga !=nil {return _bga ;};_degf ._agef .ColorStroking =_gdgcb ;return nil ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_debc *ContentCreator )Add_g (gray float64 )*ContentCreator {_gcc :=ContentStreamOperation {};_gcc .Operand ="\u0067";_gcc .Params =_baed ([]float64 {gray });_debc ._gfd =append (_debc ._gfd ,&_gcc );return _debc ;};func (_ccddd *ContentStreamProcessor )handleCommand_SC (_daggb *ContentStreamOperation ,_beg *_fc .PdfPageResources )error {_aeaa :=_ccddd ._agef .ColorspaceStroking ;if len (_daggb .Params )!=_aeaa .GetNumComponents (){_da .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_da .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_daggb .Params ),_aeaa );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bbac ,_egc :=_aeaa .ColorFromPdfObjects (_daggb .Params );if _egc !=nil {return _egc ;};_ccddd ._agef .ColorStroking =_bbac ;return nil ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_geg *ContentCreator )Add_q ()*ContentCreator {_gcb :=ContentStreamOperation {};_gcb .Operand ="\u0071";_geg ._gfd =append (_geg ._gfd ,&_gcb );return _geg ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_def *ContentCreator )Add_SCN_pattern (name _cc .PdfObjectName ,c ...float64 )*ContentCreator {_fcfg :=ContentStreamOperation {};_fcfg .Operand ="\u0053\u0043\u004e";_fcfg .Params =_baed (c );_fcfg .Params =append (_fcfg .Params ,_cc .MakeName (string (name )));_def ._gfd =append (_def ._gfd ,&_fcfg );return _def ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gea *ContentCreator )Add_B_starred ()*ContentCreator {_cf :=ContentStreamOperation {};_cf .Operand ="\u0042\u002a";_gea ._gfd =append (_gea ._gfd ,&_cf );return _gea ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bef *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_cb :=ContentStreamOperation {};_cb .Operand ="\u0053\u0043\u004e";_cb .Params =_baed (c );_bef ._gfd =append (_bef ._gfd ,&_cb );return _bef ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_ffe *ContentCreator )Add_EMC ()*ContentCreator {_ffc :=ContentStreamOperation {};_ffc .Operand ="\u0045\u004d\u0043";_ffe ._gfd =append (_ffe ._gfd ,&_ffc );return _ffe ;};func (_feff *ContentStreamProcessor )handleCommand_k (_eaaa *ContentStreamOperation ,_ffba *_fc .PdfPageResources )error {_feea :=_fc .NewPdfColorspaceDeviceCMYK ();if len (_eaaa .Params )!=_feea .GetNumComponents (){_da .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_da .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_eaaa .Params ),_feea );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cba ,_becg :=_feea .ColorFromPdfObjects (_eaaa .Params );if _becg !=nil {return _becg ;};_feff ._agef .ColorspaceNonStroking =_feea ;_feff ._agef .ColorNonStroking =_cba ;return nil ;};func (_fgba *ContentStreamProcessor )handleCommand_scn (_bffag *ContentStreamOperation ,_dgbg *_fc .PdfPageResources )error {_bdc :=_fgba ._agef .ColorspaceNonStroking ;if !_bcdg (_bdc ){if len (_bffag .Params )!=_bdc .GetNumComponents (){_da .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_da .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bffag .Params ),_bdc );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_fede ,_cde :=_bdc .ColorFromPdfObjects (_bffag .Params );if _cde !=nil {_da .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_bffag .Params ,_bdc );return _cde ;};_fgba ._agef .ColorNonStroking =_fede ;return nil ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bb *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_ege :=ContentStreamOperation {};_ege .Operand ="\u0063\u006d";_ege .Params =_baed ([]float64 {a ,b ,c ,d ,e ,f });_bb ._gfd =append (_bb ._gfd ,&_ege );return _bb ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_de *ContentStreamOperations )Bytes ()[]byte {var _fd _bf .Buffer ;for _ ,_cg :=range *_de {if _cg ==nil {continue ;};if _cg .Operand =="\u0042\u0049"{_fd .WriteString (_cg .Operand +"\u000a");_fd .WriteString (_cg .Params [0].WriteString ());}else {for _ ,_aa :=range _cg .Params {_fd .WriteString (_aa .WriteString ());_fd .WriteString ("\u0020");};_fd .WriteString (_cg .Operand +"\u000a");};};return _fd .Bytes ();};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fg *ContentCreator )Add_n ()*ContentCreator {_dcf :=ContentStreamOperation {};_dcf .Operand ="\u006e";_fg ._gfd =append (_fg ._gfd ,&_dcf );return _fg ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_bfgb :=ContentStreamProcessor {};_bfgb ._gdga =GraphicStateStack {};_fefa :=GraphicsState {};_bfgb ._agef =_fefa ;_bfgb ._gfdd =[]handlerEntry {};_bfgb ._bfg =0;_bfgb ._ffb =ops ;return &_bfgb ;};

// String is same as Bytes() except returns as a string for convenience.
func (_dfg *ContentCreator )String ()string {return string (_dfg ._gfd .Bytes ())};func _fbac (_fca []_cc .PdfObjectName )[]_cc .PdfObject {var _bbee []_cc .PdfObject ;for _ ,_faef :=range _fca {_bbee =append (_bbee ,_cc .MakeName (string (_faef )));};return _bbee ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_gac :=&ContentCreator {};_gac ._gfd =ContentStreamOperations {};return _gac ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fe *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_efa :=ContentStreamOperation {};_efa .Operand ="\u0064";_efa .Params =[]_cc .PdfObject {};_efa .Params =append (_efa .Params ,_cc .MakeArrayFromIntegers64 (dashArray ));_efa .Params =append (_efa .Params ,_cc .MakeInteger (dashPhase ));_fe ._gfd =append (_fe ._gfd ,&_efa );return _fe ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_efe *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_aaa :=ContentStreamOperation {};_aaa .Operand ="\u006d";_aaa .Params =_baed ([]float64 {x ,y });_efe ._gfd =append (_efe ._gfd ,&_aaa );return _efe ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_affd *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_dfgb :=ContentStreamOperation {};_dfgb .Operand ="\u0052\u0047";_dfgb .Params =_baed ([]float64 {r ,g ,b });_affd ._gfd =append (_affd ._gfd ,&_dfgb );return _affd ;};func (_afg *ContentStreamOperations )isWrapped ()bool {if len (*_afg )< 2{return false ;};_ac :=0;for _ ,_gg :=range *_afg {if _gg .Operand =="\u0071"{_ac ++;}else if _gg .Operand =="\u0051"{_ac --;}else {if _ac < 1{return false ;};};};return _ac ==0;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_acc *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_efcc :=ContentStreamOperation {};_efcc .Operand ="\u0072\u0067";_efcc .Params =_baed ([]float64 {r ,g ,b });_acc ._gfd =append (_acc ._gfd ,&_efcc );return _acc ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fbd *ContentCreator )Add_Tr (render int64 )*ContentCreator {_egeb :=ContentStreamOperation {};_egeb .Operand ="\u0054\u0072";_egeb .Params =_bgab ([]int64 {render });_fbd ._gfd =append (_fbd ._gfd ,&_egeb );return _fbd ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gdf *ContentCreator )Add_gs (dictName _cc .PdfObjectName )*ContentCreator {_decd :=ContentStreamOperation {};_decd .Operand ="\u0067\u0073";_decd .Params =_fbac ([]_cc .PdfObjectName {dictName });_gdf ._gfd =append (_gdf ._gfd ,&_decd );return _gdf ;};func (_adef *ContentStreamParser )parseNumber ()(_cc .PdfObject ,error ){return _cc .ParseNumber (_adef ._gabe );};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_ccdd *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_cfgb :=handlerEntry {};_cfgb .Condition =condition ;_cfgb .Operand =operand ;_cfgb .Handler =handler ;_ccdd ._gfdd =append (_ccdd ._gfdd ,_cfgb );};func (_affaf *ContentStreamParser )parseNull ()(_cc .PdfObjectNull ,error ){_ ,_bdba :=_affaf ._gabe .Discard (4);return _cc .PdfObjectNull {},_bdba ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_edf *ContentCreator )Add_W ()*ContentCreator {_gcbd :=ContentStreamOperation {};_gcbd .Operand ="\u0057";_edf ._gfd =append (_edf ._gfd ,&_gcbd );return _edf ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_geag :=ContentStreamParser {};_decg :=_bf .NewBufferString (contentStr +"\u000a");_geag ._gabe =_d .NewReader (_decg );return &_geag ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ddbb *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_cab :=ContentStreamOperation {};_cab .Operand ="\u004a";_cab .Params =_fbac ([]_cc .PdfObjectName {_cc .PdfObjectName (lineCapStyle )});_ddbb ._gfd =append (_ddbb ._gfd ,&_cab );return _ddbb ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_gdga GraphicStateStack ;_ffb []*ContentStreamOperation ;_agef GraphicsState ;_gfdd []handlerEntry ;_bfg int ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gaf *ContentCreator )Add_Q ()*ContentCreator {_fae :=ContentStreamOperation {};_fae .Operand ="\u0051";_gaf ._gfd =append (_gaf ._gfd ,&_fae );return _gaf ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_afa *ContentCreator )Add_cs (name _cc .PdfObjectName )*ContentCreator {_fad :=ContentStreamOperation {};_fad .Operand ="\u0063\u0073";_fad .Params =_fbac ([]_cc .PdfObjectName {name });_afa ._gfd =append (_afa ._gfd ,&_fad );return _afa ;};func (_bcfd *ContentStreamProcessor )handleCommand_RG (_dcaf *ContentStreamOperation ,_efdef *_fc .PdfPageResources )error {_cccde :=_fc .NewPdfColorspaceDeviceRGB ();if len (_dcaf .Params )!=_cccde .GetNumComponents (){_da .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_da .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dcaf .Params ),_cccde );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dfc ,_gccd :=_cccde .ColorFromPdfObjects (_dcaf .Params );if _gccd !=nil {return _gccd ;};_bcfd ._agef .ColorspaceStroking =_cccde ;_bcfd ._agef .ColorStroking =_dfc ;return nil ;};func (_edb *ContentStreamProcessor )handleCommand_K (_fgc *ContentStreamOperation ,_fccd *_fc .PdfPageResources )error {_ccf :=_fc .NewPdfColorspaceDeviceCMYK ();if len (_fgc .Params )!=_ccf .GetNumComponents (){_da .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_da .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fgc .Params ),_ccf );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_egae ,_abbb :=_ccf .ColorFromPdfObjects (_fgc .Params );if _abbb !=nil {return _abbb ;};_edb ._agef .ColorspaceStroking =_ccf ;_edb ._agef .ColorStroking =_egae ;return nil ;};func (_adaa *ContentStreamParser )skipComments ()error {if _ ,_aada :=_adaa .skipSpaces ();_aada !=nil {return _aada ;};_ggf :=true ;for {_affg ,_bfac :=_adaa ._gabe .Peek (1);if _bfac !=nil {_da .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bfac .Error ());return _bfac ;};if _ggf &&_affg [0]!='%'{return nil ;};_ggf =false ;if (_affg [0]!='\r')&&(_affg [0]!='\n'){_adaa ._gabe .ReadByte ();}else {break ;};};return _adaa .skipComments ();};type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_aaf *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_ddde :=ContentStreamOperation {};_ddde .Operand ="\u0054\u0077";_ddde .Params =_baed ([]float64 {wordSpace });_aaf ._gfd =append (_aaf ._gfd ,&_ddde );return _aaf ;};func (_cgae *ContentStreamParser )parseHexString ()(*_cc .PdfObjectString ,error ){_cgae ._gabe .ReadByte ();_abcd :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _adff []byte ;for {_cgae .skipSpaces ();_dca ,_fbf :=_cgae ._gabe .Peek (1);if _fbf !=nil {return _cc .MakeString (""),_fbf ;};if _dca [0]=='>'{_cgae ._gabe .ReadByte ();break ;};_cdge ,_ :=_cgae ._gabe .ReadByte ();if _bf .IndexByte (_abcd ,_cdge )>=0{_adff =append (_adff ,_cdge );};};if len (_adff )%2==1{_adff =append (_adff ,'0');};_cgada ,_ :=_b .DecodeString (string (_adff ));return _cc .MakeHexString (string (_cgada )),nil ;};func (_edgf *ContentStreamProcessor )handleCommand_CS (_eegf *ContentStreamOperation ,_aga *_fc .PdfPageResources )error {if len (_eegf .Params )< 1{_da .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _g .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_eegf .Params )> 1{_da .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _g .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_fga ,_cbcf :=_eegf .Params [0].(*_cc .PdfObjectName );if !_cbcf {_da .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_cfe ,_agff :=_edgf .getColorspace (string (*_fga ),_aga );if _agff !=nil {return _agff ;};_edgf ._agef .ColorspaceStroking =_cfe ;_acfd ,_agff :=_edgf .getInitialColor (_cfe );if _agff !=nil {return _agff ;};_edgf ._agef .ColorStroking =_acfd ;return nil ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _fc .PdfColorspace ;ColorspaceNonStroking _fc .PdfColorspace ;ColorStroking _fc .PdfColor ;ColorNonStroking _fc .PdfColor ;CTM _af .Matrix ;};func (_gdfg *ContentStreamProcessor )handleCommand_cm (_ebfg *ContentStreamOperation ,_cee *_fc .PdfPageResources )error {if len (_ebfg .Params )!=6{_da .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_ebfg .Params ));return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_baab ,_ffcd :=_cc .GetNumbersAsFloat (_ebfg .Params );if _ffcd !=nil {return _ffcd ;};_gdfc :=_af .NewMatrix (_baab [0],_baab [1],_baab [2],_baab [3],_baab [4],_baab [5]);_gdfg ._agef .CTM .Concat (_gdfc );return nil ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bff *ContentCreator )Add_G (gray float64 )*ContentCreator {_caf :=ContentStreamOperation {};_caf .Operand ="\u0047";_caf .Params =_baed ([]float64 {gray });_bff ._gfd =append (_bff ._gfd ,&_caf );return _bff ;};

// String returns `ops.Bytes()` as a string.
func (_ca *ContentStreamOperations )String ()string {return string (_ca .Bytes ())};