//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_ec "bufio";_ef "bytes";_g "encoding/hex";_f "errors";_c "fmt";_d "github.com/unidoc/unipdf/v3/common";_fca "github.com/unidoc/unipdf/v3/core";_be "github.com/unidoc/unipdf/v3/internal/imageutil";_ca "github.com/unidoc/unipdf/v3/internal/transform";
_bc "github.com/unidoc/unipdf/v3/model";_ge "image/color";_fc "image/jpeg";_b "io";_fa "math";_a "strconv";);

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_ce :=&ContentCreator {};_ce ._cf =ContentStreamOperations {};return _ce ;};func (_ac *ContentStreamOperations )isWrapped ()bool {if len (*_ac )< 2{return false ;};_bd :=0;for _ ,_dc :=range *_ac {if _dc .Operand =="\u0071"{_bd ++;
}else if _dc .Operand =="\u0051"{_bd --;}else {if _bd < 1{return false ;};};};return _bd ==0;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fbad *ContentCreator )Add_SCN_pattern (name _fca .PdfObjectName ,c ...float64 )*ContentCreator {_fef :=ContentStreamOperation {};_fef .Operand ="\u0053\u0043\u004e";_fef .Params =_cba (c );_fef .Params =append (_fef .Params ,_fca .MakeName (string (name )));
_fbad ._cf =append (_fbad ._cf ,&_fef );return _fbad ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dbc *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_gdg :=ContentStreamOperation {};_gdg .Operand ="\u0054\u0063";_gdg .Params =_cba ([]float64 {charSpace });_dbc ._cf =append (_dbc ._cf ,&_gdg );return _dbc ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_abf *ContentCreator )Add_G (gray float64 )*ContentCreator {_bdf :=ContentStreamOperation {};_bdf .Operand ="\u0047";_bdf .Params =_cba ([]float64 {gray });_abf ._cf =append (_abf ._cf ,&_bdf );return _abf ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_cfb *ContentCreator )Add_sh (name _fca .PdfObjectName )*ContentCreator {_fgb :=ContentStreamOperation {};_fgb .Operand ="\u0073\u0068";_fgb .Params =_gdff ([]_fca .PdfObjectName {name });_cfb ._cf =append (_cfb ._cf ,&_fgb );return _cfb ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_fac *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_gba :=handlerEntry {};_gba .Condition =condition ;_gba .Operand =operand ;_gba .Handler =handler ;_fac ._gcga =append (_fac ._gcga ,_gba );
};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gcg *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_bbg :=ContentStreamOperation {};_bbg .Operand ="\u0072\u0065";_bbg .Params =_cba ([]float64 {x ,y ,width ,height });_gcg ._cf =append (_gcg ._cf ,&_bbg );return _gcg ;};
func (_dfbd *ContentStreamParser )parseBool ()(_fca .PdfObjectBool ,error ){_febd ,_gcef :=_dfbd ._egc .Peek (4);if _gcef !=nil {return _fca .PdfObjectBool (false ),_gcef ;};if (len (_febd )>=4)&&(string (_febd [:4])=="\u0074\u0072\u0075\u0065"){_dfbd ._egc .Discard (4);
return _fca .PdfObjectBool (true ),nil ;};_febd ,_gcef =_dfbd ._egc .Peek (5);if _gcef !=nil {return _fca .PdfObjectBool (false ),_gcef ;};if (len (_febd )>=5)&&(string (_febd [:5])=="\u0066\u0061\u006cs\u0065"){_dfbd ._egc .Discard (5);return _fca .PdfObjectBool (false ),nil ;
};return _fca .PdfObjectBool (false ),_f .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eega *ContentCreator )Add_g (gray float64 )*ContentCreator {_dfag :=ContentStreamOperation {};_dfag .Operand ="\u0067";_dfag .Params =_cba ([]float64 {gray });_eega ._cf =append (_eega ._cf ,&_dfag );return _eega ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bdeb *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_dga :=ContentStreamOperation {};_dga .Operand ="\u0054\u007a";_dga .Params =_cba ([]float64 {scale });_bdeb ._cf =append (_bdeb ._cf ,&_dga );return _bdeb ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_dde *ContentCreator )Add_W ()*ContentCreator {_gaag :=ContentStreamOperation {};_gaag .Operand ="\u0057";_dde ._cf =append (_dde ._cf ,&_gaag );return _dde ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_geff *ContentCreator )SetNonStrokingColor (color _bc .PdfColor )*ContentCreator {switch _cee :=color .(type ){case *_bc .PdfColorDeviceGray :_geff .Add_g (_cee .Val ());case *_bc .PdfColorDeviceRGB :_geff .Add_rg (_cee .R (),_cee .G (),_cee .B ());
case *_bc .PdfColorDeviceCMYK :_geff .Add_k (_cee .C (),_cee .M (),_cee .Y (),_cee .K ());default:_d .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_cee );
};return _geff ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fba *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_ccbf :=ContentStreamOperation {};_ccbf .Operand ="\u0063";_ccbf .Params =_cba ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_fba ._cf =append (_fba ._cf ,&_ccbf );return _fba ;
};func _bbgf (_fga *ContentStreamInlineImage )(_fca .StreamEncoder ,error ){if _fga .Filter ==nil {return _fca .NewRawEncoder (),nil ;};_dbce ,_dfb :=_fga .Filter .(*_fca .PdfObjectName );if !_dfb {_fgbd ,_dfee :=_fga .Filter .(*_fca .PdfObjectArray );
if !_dfee {return nil ,_c .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _fgbd .Len ()==0{return _fca .NewRawEncoder (),nil ;
};if _fgbd .Len ()!=1{_bbef ,_dbg :=_bfg (_fga );if _dbg !=nil {_d .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_dbg );
return nil ,_dbg ;};_d .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_bbef );return _bbef ,nil ;};_ffg :=_fgbd .Get (0);_dbce ,_dfee =_ffg .(*_fca .PdfObjectName );if !_dfee {return nil ,_c .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");
};};switch *_dbce {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _fca .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _fca .NewASCII85Encoder (),nil ;
case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _gaaec (_fga );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _dgbg (_fga ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _ffe (_fga ,nil );
case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _fca .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _fca .NewRunLengthEncoder (),nil ;
default:_d .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_dbce );
return nil ,_f .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dec *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_dea :=ContentStreamOperation {};_dea .Operand ="\u0072\u0067";_dea .Params =_cba ([]float64 {r ,g ,b });_dec ._cf =append (_dec ._cf ,&_dea );return _dec ;};func (_gcae *ContentStreamParser )parseObject ()(_ddef _fca .PdfObject ,_cgc bool ,_cad error ){_gcae .skipSpaces ();
for {_cabg ,_cfbc :=_gcae ._egc .Peek (2);if _cfbc !=nil {return nil ,false ,_cfbc ;};_d .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_cabg ));if _cabg [0]=='%'{_gcae .skipComments ();continue ;
}else if _cabg [0]=='/'{_gcec ,_cgb :=_gcae .parseName ();_d .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_gcec );return &_gcec ,false ,_cgb ;}else if _cabg [0]=='('{_d .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");
_gdeb ,_gbcg :=_gcae .parseString ();return _gdeb ,false ,_gbcg ;}else if _cabg [0]=='<'&&_cabg [1]!='<'{_d .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_cgg ,_fad :=_gcae .parseHexString ();return _cgg ,false ,_fad ;
}else if _cabg [0]=='['{_d .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_bdd ,_edf :=_gcae .parseArray ();return _bdd ,false ,_edf ;}else if _fca .IsFloatDigit (_cabg [0])||(_cabg [0]=='-'&&_fca .IsFloatDigit (_cabg [1])){_d .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_gddf ,_dbgg :=_gcae .parseNumber ();return _gddf ,false ,_dbgg ;}else if _cabg [0]=='<'&&_cabg [1]=='<'{_aege ,_gefd :=_gcae .parseDict ();return _aege ,false ,_gefd ;}else {_d .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");
_cabg ,_ =_gcae ._egc .Peek (5);_cadd :=string (_cabg );_d .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_cadd );if (len (_cadd )> 3)&&(_cadd [:4]=="\u006e\u0075\u006c\u006c"){_gdc ,_eda :=_gcae .parseNull ();
return &_gdc ,false ,_eda ;}else if (len (_cadd )> 4)&&(_cadd [:5]=="\u0066\u0061\u006cs\u0065"){_cef ,_bcg :=_gcae .parseBool ();return &_cef ,false ,_bcg ;}else if (len (_cadd )> 3)&&(_cadd [:4]=="\u0074\u0072\u0075\u0065"){_fced ,_fefg :=_gcae .parseBool ();
return &_fced ,false ,_fefg ;};_cecc ,_eged :=_gcae .parseOperand ();if _eged !=nil {return _cecc ,false ,_eged ;};if len (_cecc .String ())< 1{return _cecc ,false ,ErrInvalidOperand ;};return _cecc ,true ,nil ;};};};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_eab *ContentCreator )Add_EMC ()*ContentCreator {_fge :=ContentStreamOperation {};_fge .Operand ="\u0045\u004d\u0043";_eab ._cf =append (_eab ._cf ,&_fge );return _eab ;};func _gdff (_bcc []_fca .PdfObjectName )[]_fca .PdfObject {var _dcb []_fca .PdfObject ;
for _ ,_ggfca :=range _bcc {_dcb =append (_dcb ,_fca .MakeName (string (_ggfca )));};return _dcb ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_fag *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _fag .Add_cm (1,0,0,1,tx ,ty );};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gee *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_ddb :=ContentStreamOperation {};_ddb .Operand ="\u004a";_ddb .Params =_gdff ([]_fca .PdfObjectName {_fca .PdfObjectName (lineCapStyle )});_gee ._cf =append (_gee ._cf ,&_ddb );return _gee ;
};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fefe *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_bdff :=ContentStreamOperation {};_bdff .Operand ="\u0054\u0077";_bdff .Params =_cba ([]float64 {wordSpace });_fefe ._cf =append (_fefe ._cf ,&_bdff );return _fefe ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bef *ContentCreator )Add_Tstar ()*ContentCreator {_cgd :=ContentStreamOperation {};_cgd .Operand ="\u0054\u002a";_bef ._cf =append (_bef ._cf ,&_cgd );return _bef ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_egc *_ec .Reader };

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_efe *ContentStreamParser )ExtractText ()(string ,error ){_eeg ,_fdg :=_efe .Parse ();if _fdg !=nil {return "",_fdg ;};_eca :=false ;_gf ,_de :=float64 (-1),float64 (-1);_ga :="";for _ ,_cc :=range *_eeg {if _cc .Operand =="\u0042\u0054"{_eca =true ;
}else if _cc .Operand =="\u0045\u0054"{_eca =false ;};if _cc .Operand =="\u0054\u0064"||_cc .Operand =="\u0054\u0044"||_cc .Operand =="\u0054\u002a"{_ga +="\u000a";};if _cc .Operand =="\u0054\u006d"{if len (_cc .Params )!=6{continue ;};_db ,_add :=_cc .Params [4].(*_fca .PdfObjectFloat );
if !_add {_dfg ,_fda :=_cc .Params [4].(*_fca .PdfObjectInteger );if !_fda {continue ;};_db =_fca .MakeFloat (float64 (*_dfg ));};_dd ,_add :=_cc .Params [5].(*_fca .PdfObjectFloat );if !_add {_fff ,_ab :=_cc .Params [5].(*_fca .PdfObjectInteger );if !_ab {continue ;
};_dd =_fca .MakeFloat (float64 (*_fff ));};if _de ==-1{_de =float64 (*_dd );}else if _de > float64 (*_dd ){_ga +="\u000a";_gf =float64 (*_db );_de =float64 (*_dd );continue ;};if _gf ==-1{_gf =float64 (*_db );}else if _gf < float64 (*_db ){_ga +="\u0009";
_gf =float64 (*_db );};};if _eca &&_cc .Operand =="\u0054\u004a"{if len (_cc .Params )< 1{continue ;};_ba ,_bgg :=_cc .Params [0].(*_fca .PdfObjectArray );if !_bgg {return "",_c .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_cc .Params [0]);
};for _ ,_eee :=range _ba .Elements (){switch _ag :=_eee .(type ){case *_fca .PdfObjectString :_ga +=_ag .Str ();case *_fca .PdfObjectFloat :if *_ag < -100{_ga +="\u0020";};case *_fca .PdfObjectInteger :if *_ag < -100{_ga +="\u0020";};};};}else if _eca &&_cc .Operand =="\u0054\u006a"{if len (_cc .Params )< 1{continue ;
};_dee ,_eg :=_cc .Params [0].(*_fca .PdfObjectString );if !_eg {return "",_c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_cc .Params [0]);
};_ga +=_dee .Str ();};};return _ga ,nil ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bf *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_gca :=ContentStreamOperation {};_gca .Operand ="\u0077";_gca .Params =_cba ([]float64 {lineWidth });_bf ._cf =append (_bf ._cf ,&_gca );return _bf ;};

// GetColorSpace returns the colorspace of the inline image.
func (_dgg *ContentStreamInlineImage )GetColorSpace (resources *_bc .PdfPageResources )(_bc .PdfColorspace ,error ){if _dgg .ColorSpace ==nil {_d .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");
return _bc .NewPdfColorspaceDeviceGray (),nil ;};if _eggf ,_geb :=_dgg .ColorSpace .(*_fca .PdfObjectArray );_geb {return _bcgc (_eggf );};_dfab ,_efea :=_dgg .ColorSpace .(*_fca .PdfObjectName );if !_efea {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_dgg .ColorSpace ,_dgg .ColorSpace );
return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_dfab =="\u0047"||*_dfab =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _bc .NewPdfColorspaceDeviceGray (),nil ;
}else if *_dfab =="\u0052\u0047\u0042"||*_dfab =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _bc .NewPdfColorspaceDeviceRGB (),nil ;}else if *_dfab =="\u0043\u004d\u0059\u004b"||*_dfab =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _bc .NewPdfColorspaceDeviceCMYK (),nil ;
}else if *_dfab =="\u0049"||*_dfab =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_f .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_d .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_dfab );
return nil ,_f .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_efbe ,_cff :=resources .GetColorspaceByName (*_dfab );if !_cff {_d .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_dfab );
return nil ,_f .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _efbe ,nil ;};};func _ffe (_eaf *ContentStreamInlineImage ,_eeb *_fca .PdfObjectDictionary )(*_fca .LZWEncoder ,error ){_afe :=_fca .NewLZWEncoder ();
if _eeb ==nil {if _eaf .DecodeParms !=nil {_bfc ,_ebd :=_fca .GetDict (_eaf .DecodeParms );if !_ebd {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_eaf .DecodeParms );
return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_eeb =_bfc ;};};if _eeb ==nil {return _afe ,nil ;};_ada :=_eeb .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");
if _ada !=nil {_bdb ,_bea :=_ada .(*_fca .PdfObjectInteger );if !_bea {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_ada );
return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_bdb !=0&&*_bdb !=1{return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");
};_afe .EarlyChange =int (*_bdb );}else {_afe .EarlyChange =1;};_ada =_eeb .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _ada !=nil {_cac ,_dfef :=_ada .(*_fca .PdfObjectInteger );if !_dfef {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_ada );
return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_afe .Predictor =int (*_cac );};_ada =_eeb .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _ada !=nil {_fde ,_bfeg :=_ada .(*_fca .PdfObjectInteger );if !_bfeg {_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_c .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_afe .BitsPerComponent =int (*_fde );};if _afe .Predictor > 1{_afe .Columns =1;_ada =_eeb .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _ada !=nil {_beac ,_ggaa :=_ada .(*_fca .PdfObjectInteger );if !_ggaa {return nil ,_c .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_afe .Columns =int (*_beac );
};_afe .Colors =1;_ada =_eeb .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _ada !=nil {_bfb ,_cga :=_ada .(*_fca .PdfObjectInteger );if !_cga {return nil ,_c .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_afe .Colors =int (*_bfb );};};_d .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_eeb .String ());return _afe ,nil ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_cae *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_fefb :=ContentStreamInlineImage {};for {_cae .skipSpaces ();_ebb ,_aee ,_gdfa :=_cae .parseObject ();if _gdfa !=nil {return nil ,_gdfa ;};if !_aee {_ecg ,_dgaf :=_fca .GetName (_ebb );
if !_dgaf {_d .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_ebb );
return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_ebb );
};_cged ,_ggda ,_cdaa :=_cae .parseObject ();if _cdaa !=nil {return nil ,_cdaa ;};if _ggda {return nil ,_c .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};switch *_ecg {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_fefb .BitsPerComponent =_cged ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_fefb .ColorSpace =_cged ;
case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_fefb .Decode =_cged ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_fefb .DecodeParms =_cged ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_fefb .Filter =_cged ;
case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_fefb .Height =_cged ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_fefb .ImageMask =_cged ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_fefb .Intent =_cged ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_fefb .Interpolate =_cged ;
case "\u0057","\u0057\u0069\u0064t\u0068":_fefb .Width =_cged ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_d .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_ecg );
default:return nil ,_c .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_ecg );};};if _aee {_bce ,_gdda :=_ebb .(*_fca .PdfObjectString );
if !_gdda {return nil ,_c .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};if _bce .Str ()=="\u0045\u0049"{_d .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_fefb ,nil ;}else if _bce .Str ()=="\u0049\u0044"{_d .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");
_deb ,_cdb :=_cae ._egc .Peek (1);if _cdb !=nil {return nil ,_cdb ;};if _fca .IsWhiteSpace (_deb [0]){_cae ._egc .Discard (1);};_fefb ._gbd =[]byte {};_dfage :=0;var _eedg []byte ;for {_ageb ,_bggf :=_cae ._egc .ReadByte ();if _bggf !=nil {_d .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");
return nil ,_bggf ;};if _dfage ==0{if _fca .IsWhiteSpace (_ageb ){_eedg =[]byte {};_eedg =append (_eedg ,_ageb );_dfage =1;}else if _ageb =='E'{_eedg =append (_eedg ,_ageb );_dfage =2;}else {_fefb ._gbd =append (_fefb ._gbd ,_ageb );};}else if _dfage ==1{_eedg =append (_eedg ,_ageb );
if _ageb =='E'{_dfage =2;}else {_fefb ._gbd =append (_fefb ._gbd ,_eedg ...);_eedg =[]byte {};if _fca .IsWhiteSpace (_ageb ){_dfage =1;}else {_dfage =0;};};}else if _dfage ==2{_eedg =append (_eedg ,_ageb );if _ageb =='I'{_dfage =3;}else {_fefb ._gbd =append (_fefb ._gbd ,_eedg ...);
_eedg =[]byte {};_dfage =0;};}else if _dfage ==3{_eedg =append (_eedg ,_ageb );if _fca .IsWhiteSpace (_ageb ){_adf ,_fcbg :=_cae ._egc .Peek (20);if _fcbg !=nil &&_fcbg !=_b .EOF {return nil ,_fcbg ;};_fdaf :=NewContentStreamParser (string (_adf ));_aadb :=true ;
for _beab :=0;_beab < 3;_beab ++{_aafg ,_adg ,_bbfd :=_fdaf .parseObject ();if _bbfd !=nil {if _bbfd ==_b .EOF {break ;};continue ;};if _adg &&!_dcg (_aafg .String ()){_aadb =false ;break ;};};if _aadb {if len (_fefb ._gbd )> 100{_d .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_fefb ._gbd ),_fefb ._gbd [:100]);
}else {_d .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_fefb ._gbd ),_fefb ._gbd );};return &_fefb ,nil ;};};_fefb ._gbd =append (_fefb ._gbd ,_eedg ...);_eedg =[]byte {};
_dfage =0;};};};};};};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fcd *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_ddc :=ContentStreamOperation {};_ddc .Operand ="\u0053\u0043";_ddc .Params =_cba (c );_fcd ._cf =append (_fcd ._cf ,&_ddc );return _fcd ;};func (_fagbd *ContentStreamProcessor )handleCommand_k (_dgd *ContentStreamOperation ,_gefgd *_bc .PdfPageResources )error {_dfce :=_bc .NewPdfColorspaceDeviceCMYK ();
if len (_dgd .Params )!=_dfce .GetNumComponents (){_d .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_d .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dgd .Params ),_dfce );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_fbef ,_cfbg :=_dfce .ColorFromPdfObjects (_dgd .Params );if _cfbg !=nil {return _cfbg ;};_fagbd ._bge .ColorspaceNonStroking =_dfce ;_fagbd ._bge .ColorNonStroking =_fbef ;return nil ;};func _gaaec (_fabe *ContentStreamInlineImage )(*_fca .DCTEncoder ,error ){_bbdg :=_fca .NewDCTEncoder ();
_bgba :=_ef .NewReader (_fabe ._gbd );_aea ,_ccgd :=_fc .DecodeConfig (_bgba );if _ccgd !=nil {_d .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_ccgd );return nil ,_ccgd ;
};switch _aea .ColorModel {case _ge .RGBAModel :_bbdg .BitsPerComponent =8;_bbdg .ColorComponents =3;case _ge .RGBA64Model :_bbdg .BitsPerComponent =16;_bbdg .ColorComponents =3;case _ge .GrayModel :_bbdg .BitsPerComponent =8;_bbdg .ColorComponents =1;
case _ge .Gray16Model :_bbdg .BitsPerComponent =16;_bbdg .ColorComponents =1;case _ge .CMYKModel :_bbdg .BitsPerComponent =8;_bbdg .ColorComponents =4;case _ge .YCbCrModel :_bbdg .BitsPerComponent =8;_bbdg .ColorComponents =3;default:return nil ,_f .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");
};_bbdg .Width =_aea .Width ;_bbdg .Height =_aea .Height ;_d .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_bbdg );return _bbdg ,nil ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _bc .PdfColorspace ;ColorspaceNonStroking _bc .PdfColorspace ;ColorStroking _bc .PdfColor ;ColorNonStroking _bc .PdfColor ;CTM _ca .Matrix ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_fdb *ContentCreator )Add_BMC (tag _fca .PdfObjectName )*ContentCreator {_afc :=ContentStreamOperation {};_afc .Operand ="\u0042\u004d\u0043";_afc .Params =_gdff ([]_fca .PdfObjectName {tag });_fdb ._cf =append (_fdb ._cf ,&_afc );return _fdb ;};


// WriteString outputs the object as it is to be written to file.
func (_gff *ContentStreamInlineImage )WriteString ()string {var _fgf _ef .Buffer ;_afcd :="";if _gff .BitsPerComponent !=nil {_afcd +="\u002f\u0042\u0050C\u0020"+_gff .BitsPerComponent .WriteString ()+"\u000a";};if _gff .ColorSpace !=nil {_afcd +="\u002f\u0043\u0053\u0020"+_gff .ColorSpace .WriteString ()+"\u000a";
};if _gff .Decode !=nil {_afcd +="\u002f\u0044\u0020"+_gff .Decode .WriteString ()+"\u000a";};if _gff .DecodeParms !=nil {_afcd +="\u002f\u0044\u0050\u0020"+_gff .DecodeParms .WriteString ()+"\u000a";};if _gff .Filter !=nil {_afcd +="\u002f\u0046\u0020"+_gff .Filter .WriteString ()+"\u000a";
};if _gff .Height !=nil {_afcd +="\u002f\u0048\u0020"+_gff .Height .WriteString ()+"\u000a";};if _gff .ImageMask !=nil {_afcd +="\u002f\u0049\u004d\u0020"+_gff .ImageMask .WriteString ()+"\u000a";};if _gff .Intent !=nil {_afcd +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_gff .Intent .WriteString ()+"\u000a";
};if _gff .Interpolate !=nil {_afcd +="\u002f\u0049\u0020"+_gff .Interpolate .WriteString ()+"\u000a";};if _gff .Width !=nil {_afcd +="\u002f\u0057\u0020"+_gff .Width .WriteString ()+"\u000a";};_fgf .WriteString (_afcd );_fgf .WriteString ("\u0049\u0044\u0020");
_fgf .Write (_gff ._gbd );_fgf .WriteString ("\u000a\u0045\u0049\u000a");return _fgf .String ();};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_ggfe *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_gae :=ContentStreamOperation {};_gae .Operand ="\u0054\u0064";_gae .Params =_cba ([]float64 {tx ,ty });_ggfe ._cf =append (_ggfe ._cf ,&_gae );return _ggfe ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fab *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_ebf :=ContentStreamOperation {};_ebf .Operand ="\u006b";_ebf .Params =_cba ([]float64 {c ,m ,y ,k });_fab ._cf =append (_fab ._cf ,&_ebf );return _fab ;};func _baff (_cbgf []int64 )[]_fca .PdfObject {var _bgeg []_fca .PdfObject ;
for _ ,_aebd :=range _cbgf {_bgeg =append (_bgeg ,_fca .MakeInteger (_aebd ));};return _bgeg ;};func (_aeff *ContentStreamProcessor )handleCommand_K (_dbb *ContentStreamOperation ,_gaagc *_bc .PdfPageResources )error {_bcdc :=_bc .NewPdfColorspaceDeviceCMYK ();
if len (_dbb .Params )!=_bcdc .GetNumComponents (){_d .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_d .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dbb .Params ),_bcdc );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_aeef ,_gada :=_bcdc .ColorFromPdfObjects (_dbb .Params );if _gada !=nil {return _gada ;};_aeff ._bge .ColorspaceStroking =_bcdc ;_aeff ._bge .ColorStroking =_aeef ;return nil ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gdf *ContentCreator )Add_Tr (render int64 )*ContentCreator {_abe :=ContentStreamOperation {};_abe .Operand ="\u0054\u0072";_abe .Params =_baff ([]int64 {render });_gdf ._cf =append (_gdf ._cf ,&_abe );return _gdf ;};func (_efdga *ContentStreamProcessor )handleCommand_G (_befa *ContentStreamOperation ,_fea *_bc .PdfPageResources )error {_cecag :=_bc .NewPdfColorspaceDeviceGray ();
if len (_befa .Params )!=_cecag .GetNumComponents (){_d .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_d .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_befa .Params ),_cecag );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_acea ,_acbg :=_cecag .ColorFromPdfObjects (_befa .Params );if _acbg !=nil {return _acbg ;};_efdga ._bge .ColorspaceStroking =_cecag ;_efdga ._bge .ColorStroking =_acea ;return nil ;};func _dcg (_adee string )bool {_ ,_gbc :=_gceb [_adee ];return _gbc };
func (_bbca *ContentStreamParser )parseHexString ()(*_fca .PdfObjectString ,error ){_bbca ._egc .ReadByte ();_bac :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _fdec []byte ;
for {_bbca .skipSpaces ();_aggg ,_ccgf :=_bbca ._egc .Peek (1);if _ccgf !=nil {return _fca .MakeString (""),_ccgf ;};if _aggg [0]=='>'{_bbca ._egc .ReadByte ();break ;};_afbb ,_ :=_bbca ._egc .ReadByte ();if _ef .IndexByte (_bac ,_afbb )>=0{_fdec =append (_fdec ,_afbb );
};};if len (_fdec )%2==1{_fdec =append (_fdec ,'0');};_dae ,_ :=_g .DecodeString (string (_fdec ));return _fca .MakeHexString (string (_dae )),nil ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_adc *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_abd :=ContentStreamOperation {};_abd .Operand ="\u0054\u006d";_abd .Params =_cba ([]float64 {a ,b ,c ,d ,e ,f });_adc ._cf =append (_adc ._cf ,&_abd );return _adc ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ceca *ContentCreator )Add_Tf (fontName _fca .PdfObjectName ,fontSize float64 )*ContentCreator {_fcb :=ContentStreamOperation {};_fcb .Operand ="\u0054\u0066";_fcb .Params =_gdff ([]_fca .PdfObjectName {fontName });_fcb .Params =append (_fcb .Params ,_cba ([]float64 {fontSize })...);
_ceca ._cf =append (_ceca ._cf ,&_fcb );return _ceca ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eed *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_dbf :=ContentStreamOperation {};_dbf .Operand ="\u0064";_dbf .Params =[]_fca .PdfObject {};_dbf .Params =append (_dbf .Params ,_fca .MakeArrayFromIntegers64 (dashArray ));
_dbf .Params =append (_dbf .Params ,_fca .MakeInteger (dashPhase ));_eed ._cf =append (_eed ._cf ,&_dbf );return _eed ;};func (_fbaa *ContentStreamProcessor )handleCommand_cm (_fdda *ContentStreamOperation ,_ggdb *_bc .PdfPageResources )error {if len (_fdda .Params )!=6{_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_fdda .Params ));
return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bbga ,_ccgce :=_fca .GetNumbersAsFloat (_fdda .Params );if _ccgce !=nil {return _ccgce ;
};_gge :=_ca .NewMatrix (_bbga [0],_bbga [1],_bbga [2],_bbga [3],_bbga [4],_bbga [5]);_fbaa ._bge .CTM .Concat (_gge );return nil ;};

// String is same as Bytes() except returns as a string for convenience.
func (_gaa *ContentCreator )String ()string {return string (_gaa ._cf .Bytes ())};

// Operations returns the list of operations.
func (_ed *ContentCreator )Operations ()*ContentStreamOperations {return &_ed ._cf };

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_aegec HandlerConditionEnum )Operand ()bool {return _aegec ==HandlerConditionEnumOperand };type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};func (_dbgb *ContentStreamProcessor )handleCommand_sc (_deba *ContentStreamOperation ,_aae *_bc .PdfPageResources )error {_agf :=_dbgb ._bge .ColorspaceNonStroking ;
if !_edfe (_agf ){if len (_deba .Params )!=_agf .GetNumComponents (){_d .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_d .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_deba .Params ),_agf );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_fbcb ,_dgf :=_agf .ColorFromPdfObjects (_deba .Params );if _dgf !=nil {return _dgf ;};_dbgb ._bge .ColorNonStroking =_fbcb ;return nil ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dgb *ContentCreator )Add_B_starred ()*ContentCreator {_ea :=ContentStreamOperation {};_ea .Operand ="\u0042\u002a";_dgb ._cf =append (_dgb ._cf ,&_ea );return _dgb ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_abgg *ContentStreamProcessor )Process (resources *_bc .PdfPageResources )error {_abgg ._bge .ColorspaceStroking =_bc .NewPdfColorspaceDeviceGray ();_abgg ._bge .ColorspaceNonStroking =_bc .NewPdfColorspaceDeviceGray ();_abgg ._bge .ColorStroking =_bc .NewPdfColorDeviceGray (0);
_abgg ._bge .ColorNonStroking =_bc .NewPdfColorDeviceGray (0);_abgg ._bge .CTM =_ca .IdentityMatrix ();for _ ,_ddgc :=range _abgg ._efg {var _gbca error ;switch _ddgc .Operand {case "\u0071":_abgg ._bec .Push (_abgg ._bge );case "\u0051":if len (_abgg ._bec )==0{_d .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");
continue ;};_abgg ._bge =_abgg ._bec .Pop ();case "\u0043\u0053":_gbca =_abgg .handleCommand_CS (_ddgc ,resources );case "\u0063\u0073":_gbca =_abgg .handleCommand_cs (_ddgc ,resources );case "\u0053\u0043":_gbca =_abgg .handleCommand_SC (_ddgc ,resources );
case "\u0053\u0043\u004e":_gbca =_abgg .handleCommand_SCN (_ddgc ,resources );case "\u0073\u0063":_gbca =_abgg .handleCommand_sc (_ddgc ,resources );case "\u0073\u0063\u006e":_gbca =_abgg .handleCommand_scn (_ddgc ,resources );case "\u0047":_gbca =_abgg .handleCommand_G (_ddgc ,resources );
case "\u0067":_gbca =_abgg .handleCommand_g (_ddgc ,resources );case "\u0052\u0047":_gbca =_abgg .handleCommand_RG (_ddgc ,resources );case "\u0072\u0067":_gbca =_abgg .handleCommand_rg (_ddgc ,resources );case "\u004b":_gbca =_abgg .handleCommand_K (_ddgc ,resources );
case "\u006b":_gbca =_abgg .handleCommand_k (_ddgc ,resources );case "\u0063\u006d":_gbca =_abgg .handleCommand_cm (_ddgc ,resources );};if _gbca !=nil {_d .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_ddgc .Operand ,_gbca );
_d .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_ddgc .Operand );return _gbca ;};for _ ,_bcea :=range _abgg ._gcga {var _ecgf error ;if _bcea .Condition .All (){_ecgf =_bcea .Handler (_ddgc ,_abgg ._bge ,resources );
}else if _bcea .Condition .Operand ()&&_ddgc .Operand ==_bcea .Operand {_ecgf =_bcea .Handler (_ddgc ,_abgg ._bge ,resources );};if _ecgf !=nil {_d .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_ecgf );
return _ecgf ;};};};return nil ;};func _bfg (_cfa *ContentStreamInlineImage )(*_fca .MultiEncoder ,error ){_egg :=_fca .NewMultiEncoder ();var _dcd *_fca .PdfObjectDictionary ;var _caf []_fca .PdfObject ;if _bbf :=_cfa .DecodeParms ;_bbf !=nil {_ggdf ,_bcd :=_bbf .(*_fca .PdfObjectDictionary );
if _bcd {_dcd =_ggdf ;};_ccc ,_gfg :=_bbf .(*_fca .PdfObjectArray );if _gfg {for _ ,_fae :=range _ccc .Elements (){if _adb ,_effd :=_fae .(*_fca .PdfObjectDictionary );_effd {_caf =append (_caf ,_adb );}else {_caf =append (_caf ,nil );};};};};_cda :=_cfa .Filter ;
if _cda ==nil {return nil ,_c .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_fec ,_fbg :=_cda .(*_fca .PdfObjectArray );if !_fbg {return nil ,_c .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");
};for _feb ,_fdbb :=range _fec .Elements (){_aded ,_dded :=_fdbb .(*_fca .PdfObjectName );if !_dded {return nil ,_c .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");
};var _fdfa _fca .PdfObject ;if _dcd !=nil {_fdfa =_dcd ;}else {if len (_caf )> 0{if _feb >=len (_caf ){return nil ,_c .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");
};_fdfa =_caf [_feb ];};};var _eef *_fca .PdfObjectDictionary ;if _cbc ,_cgdf :=_fdfa .(*_fca .PdfObjectDictionary );_cgdf {_eef =_cbc ;};if *_aded ==_fca .StreamEncodingFilterNameFlate ||*_aded =="\u0046\u006c"{_bad ,_agb :=_dgbg (_cfa ,_eef );if _agb !=nil {return nil ,_agb ;
};_egg .AddEncoder (_bad );}else if *_aded ==_fca .StreamEncodingFilterNameLZW {_acc ,_efa :=_ffe (_cfa ,_eef );if _efa !=nil {return nil ,_efa ;};_egg .AddEncoder (_acc );}else if *_aded ==_fca .StreamEncodingFilterNameASCIIHex {_daff :=_fca .NewASCIIHexEncoder ();
_egg .AddEncoder (_daff );}else if *_aded ==_fca .StreamEncodingFilterNameASCII85 ||*_aded =="\u0041\u0038\u0035"{_geec :=_fca .NewASCII85Encoder ();_egg .AddEncoder (_geec );}else {_d .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_aded );
return nil ,_c .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _egg ,nil ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cag *ContentCreator )Add_b ()*ContentCreator {_fgd :=ContentStreamOperation {};_fgd .Operand ="\u0062";_cag ._cf =append (_cag ._cf ,&_fgd );return _cag ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gfd *ContentCreator )Add_s ()*ContentCreator {_bbc :=ContentStreamOperation {};_bbc .Operand ="\u0073";_gfd ._cf =append (_gfd ._cf ,&_bbc );return _gfd ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bgb *ContentCreator )Add_n ()*ContentCreator {_cfe :=ContentStreamOperation {};_cfe .Operand ="\u006e";_bgb ._cf =append (_bgb ._cf ,&_cfe );return _bgb ;};func (_aeg *ContentStreamParser )parseString ()(*_fca .PdfObjectString ,error ){_aeg ._egc .ReadByte ();
var _abg []byte ;_dbd :=1;for {_ceed ,_beg :=_aeg ._egc .Peek (1);if _beg !=nil {return _fca .MakeString (string (_abg )),_beg ;};if _ceed [0]=='\\'{_aeg ._egc .ReadByte ();_dca ,_ccca :=_aeg ._egc .ReadByte ();if _ccca !=nil {return _fca .MakeString (string (_abg )),_ccca ;
};if _fca .IsOctalDigit (_dca ){_bcf ,_efdg :=_aeg ._egc .Peek (2);if _efdg !=nil {return _fca .MakeString (string (_abg )),_efdg ;};var _fce []byte ;_fce =append (_fce ,_dca );for _ ,_afec :=range _bcf {if _fca .IsOctalDigit (_afec ){_fce =append (_fce ,_afec );
}else {break ;};};_aeg ._egc .Discard (len (_fce )-1);_d .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_fce );_aef ,_efdg :=_a .ParseUint (string (_fce ),8,32);if _efdg !=nil {return _fca .MakeString (string (_abg )),_efdg ;
};_abg =append (_abg ,byte (_aef ));continue ;};switch _dca {case 'n':_abg =append (_abg ,'\n');case 'r':_abg =append (_abg ,'\r');case 't':_abg =append (_abg ,'\t');case 'b':_abg =append (_abg ,'\b');case 'f':_abg =append (_abg ,'\f');case '(':_abg =append (_abg ,'(');
case ')':_abg =append (_abg ,')');case '\\':_abg =append (_abg ,'\\');};continue ;}else if _ceed [0]=='('{_dbd ++;}else if _ceed [0]==')'{_dbd --;if _dbd ==0{_aeg ._egc .ReadByte ();break ;};};_ecc ,_ :=_aeg ._egc .ReadByte ();_abg =append (_abg ,_ecc );
};return _fca .MakeString (string (_abg )),nil ;};func (_fbbf *ContentStreamParser )parseNull ()(_fca .PdfObjectNull ,error ){_ ,_ccgc :=_fbbf ._egc .Discard (4);return _fca .PdfObjectNull {},_ccgc ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eb *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_cea :=ContentStreamOperation {};_cea .Operand ="\u004d";_cea .Params =_cba ([]float64 {miterlimit });_eb ._cf =append (_eb ._cf ,&_cea );return _eb ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_fca .PdfObject ;Operand string ;};func (_cfab *ContentStreamProcessor )handleCommand_CS (_aac *ContentStreamOperation ,_agbc *_bc .PdfPageResources )error {if len (_aac .Params )< 1{_d .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _f .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_aac .Params )> 1{_d .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _f .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_gede ,_cgec :=_aac .Params [0].(*_fca .PdfObjectName );if !_cgec {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_eag ,_affe :=_cfab .getColorspace (string (*_gede ),_agbc );if _affe !=nil {return _affe ;};_cfab ._bge .ColorspaceStroking =_eag ;_ecab ,_affe :=_cfab .getInitialColor (_eag );
if _affe !=nil {return _affe ;};_cfab ._bge .ColorStroking =_ecab ;return nil ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_caa *ContentCreator )Add_TL (leading float64 )*ContentCreator {_edc :=ContentStreamOperation {};_edc .Operand ="\u0054\u004c";_edc .Params =_cba ([]float64 {leading });_caa ._cf =append (_caa ._cf ,&_edc );return _caa ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_bfff HandlerConditionEnum )All ()bool {return _bfff ==HandlerConditionEnumAllOperands };func _edfe (_feff _bc .PdfColorspace )bool {_ ,_ddgf :=_feff .(*_bc .PdfColorspaceSpecialPattern );return _ddgf ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_abeb *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _abeb .CTM .Transform (x ,y );};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_fd *ContentStreamOperations )Bytes ()[]byte {var _bg _ef .Buffer ;for _ ,_dfa :=range *_fd {if _dfa ==nil {continue ;};if _dfa .Operand =="\u0042\u0049"{_bg .WriteString (_dfa .Operand +"\u000a");_bg .WriteString (_dfa .Params [0].WriteString ());
}else {for _ ,_cd :=range _dfa .Params {_bg .WriteString (_cd .WriteString ());_bg .WriteString ("\u0020");};_bg .WriteString (_dfa .Operand +"\u000a");};};return _bg .Bytes ();};func (_eefg *ContentStreamParser )skipComments ()error {if _ ,_gebg :=_eefg .skipSpaces ();
_gebg !=nil {return _gebg ;};_dddc :=true ;for {_cab ,_gafb :=_eefg ._egc .Peek (1);if _gafb !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gafb .Error ());return _gafb ;};if _dddc &&_cab [0]!='%'{return nil ;};_dddc =false ;
if (_cab [0]!='\r')&&(_cab [0]!='\n'){_eefg ._egc .ReadByte ();}else {break ;};};return _eefg .skipComments ();};func _dgbg (_fdf *ContentStreamInlineImage ,_gcgb *_fca .PdfObjectDictionary )(*_fca .FlateEncoder ,error ){_afcg :=_fca .NewFlateEncoder ();
if _fdf ._ecbg !=nil {_afcg .SetImage (_fdf ._ecbg );};if _gcgb ==nil {_ccg :=_fdf .DecodeParms ;if _ccg !=nil {_baf ,_fbbb :=_fca .GetDict (_ccg );if !_fbbb {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_ccg );
return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_gcgb =_baf ;};};if _gcgb ==nil {return _afcg ,nil ;};_d .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_gcgb .String ());
_aad :=_gcgb .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _aad ==nil {_d .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");
}else {_bdc ,_eae :=_aad .(*_fca .PdfObjectInteger );if !_eae {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_aad );
return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_afcg .Predictor =int (*_bdc );};_aad =_gcgb .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _aad !=nil {_acf ,_ebg :=_aad .(*_fca .PdfObjectInteger );if !_ebg {_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_c .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_afcg .BitsPerComponent =int (*_acf );};if _afcg .Predictor > 1{_afcg .Columns =1;_aad =_gcgb .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _aad !=nil {_fege ,_cbf :=_aad .(*_fca .PdfObjectInteger );if !_cbf {return nil ,_c .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_afcg .Columns =int (*_fege );
};_afcg .Colors =1;_fbc :=_gcgb .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _fbc !=nil {_dbaf ,_degb :=_fbc .(*_fca .PdfObjectInteger );if !_degb {return nil ,_c .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_afcg .Colors =int (*_dbaf );};};return _afcg ,nil ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_gaae *ContentCreator )Add_Do (name _fca .PdfObjectName )*ContentCreator {_fe :=ContentStreamOperation {};_fe .Operand ="\u0044\u006f";_fe .Params =_gdff ([]_fca .PdfObjectName {name });_gaae ._cf =append (_gaae ._cf ,&_fe );return _gaae ;};func (_ddeb *ContentStreamInlineImage )String ()string {_cecb :=_c .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_ddeb ._gbd ));
if _ddeb .BitsPerComponent !=nil {_cecb +="\u002d\u0020\u0042\u0050\u0043\u0020"+_ddeb .BitsPerComponent .WriteString ()+"\u000a";};if _ddeb .ColorSpace !=nil {_cecb +="\u002d\u0020\u0043S\u0020"+_ddeb .ColorSpace .WriteString ()+"\u000a";};if _ddeb .Decode !=nil {_cecb +="\u002d\u0020\u0044\u0020"+_ddeb .Decode .WriteString ()+"\u000a";
};if _ddeb .DecodeParms !=nil {_cecb +="\u002d\u0020\u0044P\u0020"+_ddeb .DecodeParms .WriteString ()+"\u000a";};if _ddeb .Filter !=nil {_cecb +="\u002d\u0020\u0046\u0020"+_ddeb .Filter .WriteString ()+"\u000a";};if _ddeb .Height !=nil {_cecb +="\u002d\u0020\u0048\u0020"+_ddeb .Height .WriteString ()+"\u000a";
};if _ddeb .ImageMask !=nil {_cecb +="\u002d\u0020\u0049M\u0020"+_ddeb .ImageMask .WriteString ()+"\u000a";};if _ddeb .Intent !=nil {_cecb +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_ddeb .Intent .WriteString ()+"\u000a";};if _ddeb .Interpolate !=nil {_cecb +="\u002d\u0020\u0049\u0020"+_ddeb .Interpolate .WriteString ()+"\u000a";
};if _ddeb .Width !=nil {_cecb +="\u002d\u0020\u0057\u0020"+_ddeb .Width .WriteString ()+"\u000a";};return _cecb ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ede *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_eba :=ContentStreamOperation {};_eba .Operand ="\u006c";_eba .Params =_cba ([]float64 {x ,y });_ede ._cf =append (_ede ._cf ,&_eba );return _ede ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_bec GraphicStateStack ;_efg []*ContentStreamOperation ;_bge GraphicsState ;_gcga []handlerEntry ;_dfcg int ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_efd *ContentCreator )Add_B ()*ContentCreator {_gde :=ContentStreamOperation {};_gde .Operand ="\u0042";_efd ._cf =append (_efd ._cf ,&_gde );return _efd ;};func (_ebbd *ContentStreamParser )parseName ()(_fca .PdfObjectName ,error ){_ddg :="";_cbg :=false ;
for {_cdbc ,_ggb :=_ebbd ._egc .Peek (1);if _ggb ==_b .EOF {break ;};if _ggb !=nil {return _fca .PdfObjectName (_ddg ),_ggb ;};if !_cbg {if _cdbc [0]=='/'{_cbg =true ;_ebbd ._egc .ReadByte ();}else {_d .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_cdbc ,_cdbc );
return _fca .PdfObjectName (_ddg ),_c .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_cdbc [0]);};}else {if _fca .IsWhiteSpace (_cdbc [0]){break ;}else if (_cdbc [0]=='/')||(_cdbc [0]=='[')||(_cdbc [0]=='(')||(_cdbc [0]==']')||(_cdbc [0]=='<')||(_cdbc [0]=='>'){break ;
}else if _cdbc [0]=='#'{_aaad ,_gacg :=_ebbd ._egc .Peek (3);if _gacg !=nil {return _fca .PdfObjectName (_ddg ),_gacg ;};_ebbd ._egc .Discard (3);_eaa ,_gacg :=_g .DecodeString (string (_aaad [1:3]));if _gacg !=nil {return _fca .PdfObjectName (_ddg ),_gacg ;
};_ddg +=string (_eaa );}else {_addg ,_ :=_ebbd ._egc .ReadByte ();_ddg +=string (_addg );};};};return _fca .PdfObjectName (_ddg ),nil ;};

// Push pushes `gs` on the `gsStack`.
func (_eafg *GraphicStateStack )Push (gs GraphicsState ){*_eafg =append (*_eafg ,gs )};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_cf ContentStreamOperations };var (ErrInvalidOperand =_f .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););func (_cgcb *ContentStreamProcessor )handleCommand_SCN (_gggc *ContentStreamOperation ,_cdg *_bc .PdfPageResources )error {_ccab :=_cgcb ._bge .ColorspaceStroking ;
if !_edfe (_ccab ){if len (_gggc .Params )!=_ccab .GetNumComponents (){_d .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_d .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gggc .Params ),_ccab );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_afa ,_dfga :=_ccab .ColorFromPdfObjects (_gggc .Params );if _dfga !=nil {return _dfga ;};_cgcb ._bge .ColorStroking =_afa ;return nil ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_age *ContentCreator )Add_scn_pattern (name _fca .PdfObjectName ,c ...float64 )*ContentCreator {_acg :=ContentStreamOperation {};_acg .Operand ="\u0073\u0063\u006e";_acg .Params =_cba (c );_acg .Params =append (_acg .Params ,_fca .MakeName (string (name )));
_age ._cf =append (_age ._cf ,&_acg );return _age ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dba *ContentCreator )Add_cs (name _fca .PdfObjectName )*ContentCreator {_afb :=ContentStreamOperation {};_afb .Operand ="\u0063\u0073";_afb .Params =_gdff ([]_fca .PdfObjectName {name });_dba ._cf =append (_dba ._cf ,&_afb );return _dba ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_gbg :=ContentStreamParser {};_ebfc :=_ef .NewBufferString (contentStr +"\u000a");_gbg ._egc =_ec .NewReader (_ebfc );return &_gbg ;};func (_ddca *ContentStreamProcessor )handleCommand_scn (_cadg *ContentStreamOperation ,_cdea *_bc .PdfPageResources )error {_cccf :=_ddca ._bge .ColorspaceNonStroking ;
if !_edfe (_cccf ){if len (_cadg .Params )!=_cccf .GetNumComponents (){_d .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_d .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cadg .Params ),_cccf );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_gcf ,_egee :=_cccf .ColorFromPdfObjects (_cadg .Params );if _egee !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_cadg .Params ,_cccf );
return _egee ;};_ddca ._bge .ColorNonStroking =_gcf ;return nil ;};func (_bed *ContentStreamParser )skipSpaces ()(int ,error ){_ccdae :=0;for {_ceb ,_bee :=_bed ._egc .Peek (1);if _bee !=nil {return 0,_bee ;};if _fca .IsWhiteSpace (_ceb [0]){_bed ._egc .ReadByte ();
_ccdae ++;}else {break ;};};return _ccdae ,nil ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gc *ContentCreator )Add_Q ()*ContentCreator {_gg :=ContentStreamOperation {};_gg .Operand ="\u0051";_gc ._cf =append (_gc ._cf ,&_gg );return _gc ;};func (_agg *ContentStreamInlineImage )toImageBase (_abfc *_bc .PdfPageResources )(*_be .ImageBase ,error ){if _agg ._ecbg !=nil {return _agg ._ecbg ,nil ;
};_acb :=_be .ImageBase {};if _agg .Height ==nil {return nil ,_f .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_dbge ,_abdg :=_agg .Height .(*_fca .PdfObjectInteger );
if !_abdg {return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_acb .Height =int (*_dbge );if _agg .Width ==nil {return nil ,_f .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_fbcd ,_abdg :=_agg .Width .(*_fca .PdfObjectInteger );if !_abdg {return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_acb .Width =int (*_fbcd );_agcb ,_dggd :=_agg .IsMask ();if _dggd !=nil {return nil ,_dggd ;
};if _agcb {_acb .BitsPerComponent =1;_acb .ColorComponents =1;}else {if _agg .BitsPerComponent ==nil {_d .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");
_acb .BitsPerComponent =8;}else {_gddc ,_dbcg :=_agg .BitsPerComponent .(*_fca .PdfObjectInteger );if !_dbcg {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_agg .BitsPerComponent );
return nil ,_f .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_acb .BitsPerComponent =int (*_gddc );};if _agg .ColorSpace !=nil {_adce ,_fcf :=_agg .GetColorSpace (_abfc );if _fcf !=nil {return nil ,_fcf ;};_acb .ColorComponents =_adce .GetNumComponents ();
}else {_d .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
_acb .ColorComponents =1;};};if _egf ,_afee :=_fca .GetArray (_agg .Decode );_afee {_acb .Decode ,_dggd =_egf .ToFloat64Array ();if _dggd !=nil {return nil ,_dggd ;};};_agg ._ecbg =&_acb ;return _agg ._ecbg ,nil ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_da *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_gdd :=ContentStreamOperation {};_gdd .Operand ="\u0073\u0063\u006e";_gdd .Params =_cba (c );_da ._cf =append (_da ._cf ,&_gdd );return _da ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_ffab :=ContentStreamProcessor {};_ffab ._bec =GraphicStateStack {};_afce :=GraphicsState {};_ffab ._bge =_afce ;_ffab ._gcga =[]handlerEntry {};_ffab ._dfcg =0;_ffab ._efg =ops ;
return &_ffab ;};func _cba (_fcca []float64 )[]_fca .PdfObject {var _bffb []_fca .PdfObject ;for _ ,_efdd :=range _fcca {_bffb =append (_bffb ,_fca .MakeFloat (_efdd ));};return _bffb ;};func (_ecbe *ContentStreamParser )parseArray ()(*_fca .PdfObjectArray ,error ){_cabe :=_fca .MakeArray ();
_ecbe ._egc .ReadByte ();for {_ecbe .skipSpaces ();_ace ,_cfc :=_ecbe ._egc .Peek (1);if _cfc !=nil {return _cabe ,_cfc ;};if _ace [0]==']'{_ecbe ._egc .ReadByte ();break ;};_dggg ,_ ,_cfc :=_ecbe .parseObject ();if _cfc !=nil {return _cabe ,_cfc ;};_cabe .Append (_dggg );
};return _cabe ,nil ;};

// String returns `ops.Bytes()` as a string.
func (_fg *ContentStreamOperations )String ()string {return string (_fg .Bytes ())};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_daf *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_bdfd :=ContentStreamOperation {};_bdfd .Operand ="\u004b";_bdfd .Params =_cba ([]float64 {c ,m ,y ,k });_daf ._cf =append (_daf ._cf ,&_bdfd );return _daf ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bdg *ContentCreator )Add_Tj (textstr _fca .PdfObjectString )*ContentCreator {_gac :=ContentStreamOperation {};_gac .Operand ="\u0054\u006a";_gac .Params =_eabg ([]_fca .PdfObjectString {textstr });_bdg ._cf =append (_bdg ._cf ,&_gac );return _bdg ;
};func (_daee *ContentStreamProcessor )handleCommand_RG (_fagb *ContentStreamOperation ,_fbgc *_bc .PdfPageResources )error {_beca :=_bc .NewPdfColorspaceDeviceRGB ();if len (_fagb .Params )!=_beca .GetNumComponents (){_d .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");
_d .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fagb .Params ),_beca );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_bdag ,_daa :=_beca .ColorFromPdfObjects (_fagb .Params );if _daa !=nil {return _daa ;};_daee ._bge .ColorspaceStroking =_beca ;_daee ._bge .ColorStroking =_bdag ;return nil ;};

// Scale applies x-y scaling to the transformation matrix.
func (_faf *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _faf .Add_cm (sx ,0,0,sy ,0,0);};var _gceb =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};


// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_aff *ContentCreator )Add_b_starred ()*ContentCreator {_faae :=ContentStreamOperation {};_faae .Operand ="\u0062\u002a";_aff ._cf =append (_aff ._cf ,&_faae );return _aff ;};func (_cgaa *ContentStreamParser )parseOperand ()(*_fca .PdfObjectString ,error ){var _egd []byte ;
for {_adda ,_ced :=_cgaa ._egc .Peek (1);if _ced !=nil {return _fca .MakeString (string (_egd )),_ced ;};if _fca .IsDelimiter (_adda [0]){break ;};if _fca .IsWhiteSpace (_adda [0]){break ;};_gffb ,_ :=_cgaa ._egc .ReadByte ();_egd =append (_egd ,_gffb );
};return _fca .MakeString (string (_egd )),nil ;};func _bcgc (_bbdd _fca .PdfObject )(_bc .PdfColorspace ,error ){_ccac ,_decf :=_bbdd .(*_fca .PdfObjectArray );if !_decf {_d .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_bbdd );
return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _ccac .Len ()!=4{_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_ccac .Len ());
return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_faef ,_decf :=_ccac .Get (0).(*_fca .PdfObjectName );if !_decf {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_ccac );
return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_faef !="\u0049"&&*_faef !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_d .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_faef );
return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_faef ,_decf =_ccac .Get (1).(*_fca .PdfObjectName );if !_decf {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_ccac );
return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_faef !="\u0047"&&*_faef !="\u0052\u0047\u0042"&&*_faef !="\u0043\u004d\u0059\u004b"&&*_faef !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_faef !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_faef !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_faef );
return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_egeb :="";switch *_faef {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_egeb ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_egeb ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_egeb ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};_eaed :=_fca .MakeArray (_fca .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_fca .MakeName (_egeb ),_ccac .Get (2),_ccac .Get (3));return _bc .NewPdfColorspaceFromPdfObject (_eaed );};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_cge *ContentCreator )Add_TJ (vals ..._fca .PdfObject )*ContentCreator {_def :=ContentStreamOperation {};_def .Operand ="\u0054\u004a";_def .Params =[]_fca .PdfObject {_fca .MakeArray (vals ...)};_cge ._cf =append (_cge ._cf ,&_def );return _cge ;
};func (_aeb *ContentStreamProcessor )getInitialColor (_bcga _bc .PdfColorspace )(_bc .PdfColor ,error ){switch _eedd :=_bcga .(type ){case *_bc .PdfColorspaceDeviceGray :return _bc .NewPdfColorDeviceGray (0.0),nil ;case *_bc .PdfColorspaceDeviceRGB :return _bc .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;
case *_bc .PdfColorspaceDeviceCMYK :return _bc .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_bc .PdfColorspaceCalGray :return _bc .NewPdfColorCalGray (0.0),nil ;case *_bc .PdfColorspaceCalRGB :return _bc .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_bc .PdfColorspaceLab :_edfa :=0.0;
_bfd :=0.0;_ecag :=0.0;if _eedd .Range [0]> 0{_edfa =_eedd .Range [0];};if _eedd .Range [2]> 0{_bfd =_eedd .Range [2];};return _bc .NewPdfColorLab (_edfa ,_bfd ,_ecag ),nil ;case *_bc .PdfColorspaceICCBased :if _eedd .Alternate ==nil {_d .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_eedd .N );
if _eedd .N ==1{_d .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _aeb .getInitialColor (_bc .NewPdfColorspaceDeviceGray ());}else if _eedd .N ==3{_d .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");
return _aeb .getInitialColor (_bc .NewPdfColorspaceDeviceRGB ());}else if _eedd .N ==4{_d .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");
return _aeb .getInitialColor (_bc .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_f .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");
};};return _aeb .getInitialColor (_eedd .Alternate );case *_bc .PdfColorspaceSpecialIndexed :if _eedd .Base ==nil {return nil ,_f .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");
};return _aeb .getInitialColor (_eedd .Base );case *_bc .PdfColorspaceSpecialSeparation :if _eedd .AlternateSpace ==nil {return nil ,_f .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _aeb .getInitialColor (_eedd .AlternateSpace );case *_bc .PdfColorspaceDeviceN :if _eedd .AlternateSpace ==nil {return nil ,_f .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _aeb .getInitialColor (_eedd .AlternateSpace );case *_bc .PdfColorspaceSpecialPattern :return nil ,nil ;};_d .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bcga );
return nil ,_f .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gef *ContentCreator )Add_ri (intent _fca .PdfObjectName )*ContentCreator {_ddd :=ContentStreamOperation {};_ddd .Operand ="\u0072\u0069";_ddd .Params =_gdff ([]_fca .PdfObjectName {intent });_gef ._cf =append (_gef ._cf ,&_ddd );return _gef ;};func (_gag *ContentStreamParser )parseDict ()(*_fca .PdfObjectDictionary ,error ){_d .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");
_ebde :=_fca .MakeDict ();_cgdba ,_ :=_gag ._egc .ReadByte ();if _cgdba !='<'{return nil ,_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_cgdba ,_ =_gag ._egc .ReadByte ();if _cgdba !='<'{return nil ,_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
};for {_gag .skipSpaces ();_ecaf ,_fgdc :=_gag ._egc .Peek (2);if _fgdc !=nil {return nil ,_fgdc ;};_d .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_ecaf ),string (_ecaf ));if (_ecaf [0]=='>')&&(_ecaf [1]=='>'){_d .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
_gag ._egc .ReadByte ();_gag ._egc .ReadByte ();break ;};_d .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_edcd ,_fgdc :=_gag .parseName ();_d .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_edcd );
if _fgdc !=nil {_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_fgdc );return nil ,_fgdc ;};if len (_edcd )> 4&&_edcd [len (_edcd )-4:]=="\u006e\u0075\u006c\u006c"{_gad :=_edcd [0:len (_edcd )-4];
_d .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_edcd );_d .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_gad );
_gag .skipSpaces ();_gbe ,_ :=_gag ._egc .Peek (1);if _gbe [0]=='/'{_ebde .Set (_gad ,_fca .MakeNull ());continue ;};};_gag .skipSpaces ();_bgd ,_ ,_fgdc :=_gag .parseObject ();if _fgdc !=nil {return nil ,_fgdc ;};_ebde .Set (_edcd ,_bgd );_d .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_edcd ,_bgd .String ());
};return _ebde ,nil ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_dbac *ContentStreamInlineImage )IsMask ()(bool ,error ){if _dbac .ImageMask !=nil {_dgab ,_bdffg :=_dbac .ImageMask .(*_fca .PdfObjectBool );if !_bdffg {_d .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");
return false ,_f .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_dgab ),nil ;};return false ,nil ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ggg *ContentCreator )Add_S ()*ContentCreator {_afd :=ContentStreamOperation {};_afd .Operand ="\u0053";_ggg ._cf =append (_ggg ._cf ,&_afd );return _ggg ;};func _eabg (_gfgb []_fca .PdfObjectString )[]_fca .PdfObject {var _bgbae []_fca .PdfObject ;
for _ ,_cfda :=range _gfgb {_bgbae =append (_bgbae ,_fca .MakeString (_cfda .Str ()));};return _bgbae ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bfe *ContentCreator )Add_f ()*ContentCreator {_cca :=ContentStreamOperation {};_cca .Operand ="\u0066";_bfe ._cf =append (_bfe ._cf ,&_cca );return _bfe ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ccb *ContentCreator )Add_i (flatness float64 )*ContentCreator {_efb :=ContentStreamOperation {};_efb .Operand ="\u0069";_efb .Params =_cba ([]float64 {flatness });_ccb ._cf =append (_ccb ._cf ,&_efb );return _ccb ;};func (_bafb *ContentStreamProcessor )handleCommand_cs (_cbcb *ContentStreamOperation ,_dbcgc *_bc .PdfPageResources )error {if len (_cbcb .Params )< 1{_d .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _f .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_cbcb .Params )> 1{_d .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _f .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_fgaa ,_cde :=_cbcb .Params [0].(*_fca .PdfObjectName );if !_cde {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_bag ,_baef :=_bafb .getColorspace (string (*_fgaa ),_dbcgc );if _baef !=nil {return _baef ;};_bafb ._bge .ColorspaceNonStroking =_bag ;_gec ,_baef :=_bafb .getInitialColor (_bag );
if _baef !=nil {return _baef ;};_bafb ._bge .ColorNonStroking =_gec ;return nil ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_fdgd *ContentStreamInlineImage )ToImage (resources *_bc .PdfPageResources )(*_bc .Image ,error ){_ffb ,_gbf :=_fdgd .toImageBase (resources );if _gbf !=nil {return nil ,_gbf ;};_fafa ,_gbf :=_bbgf (_fdgd );if _gbf !=nil {return nil ,_gbf ;};_d .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_fafa ,_fafa );
_d .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_fdgd );_dbca ,_gbf :=_fafa .DecodeBytes (_fdgd ._gbd );if _gbf !=nil {return nil ,_gbf ;};_gafe :=&_bc .Image {Width :int64 (_ffb .Width ),Height :int64 (_ffb .Height ),BitsPerComponent :int64 (_ffb .BitsPerComponent ),ColorComponents :_ffb .ColorComponents ,Data :_dbca };
if len (_ffb .Decode )> 0{for _cfd :=0;_cfd < len (_ffb .Decode );_cfd ++{_ffb .Decode [_cfd ]*=float64 ((int (1)<<uint (_ffb .BitsPerComponent ))-1);};_gafe .SetDecode (_ffb .Decode );};return _gafe ,nil ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_feg *ContentCreator )Add_quotes (textstr _fca .PdfObjectString ,aw ,ac float64 )*ContentCreator {_fdge :=ContentStreamOperation {};_fdge .Operand ="\u0022";_fdge .Params =_cba ([]float64 {aw ,ac });_fdge .Params =append (_fdge .Params ,_eabg ([]_fca .PdfObjectString {textstr })...);
_feg ._cf =append (_feg ._cf ,&_fdge );return _feg ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_ccd *ContentCreator )Wrap (){_ccd ._cf .WrapIfNeeded ()};

// Parse parses all commands in content stream, returning a list of operation data.
func (_fdeg *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_eeec :=ContentStreamOperations {};for {_dfgd :=ContentStreamOperation {};for {_bff ,_ecd ,_ccf :=_fdeg .parseObject ();if _ccf !=nil {if _ccf ==_b .EOF {return &_eeec ,nil ;};
return &_eeec ,_ccf ;};if _ecd {_dfgd .Operand ,_ =_fca .GetStringVal (_bff );_eeec =append (_eeec ,&_dfgd );break ;}else {_dfgd .Params =append (_dfgd .Params ,_bff );};};if _dfgd .Operand =="\u0042\u0049"{_dbgef ,_fdd :=_fdeg .ParseInlineImage ();if _fdd !=nil {return &_eeec ,_fdd ;
};_dfgd .Params =append (_dfgd .Params ,_dbgef );};};};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_acgb *ContentCreator )Add_BT ()*ContentCreator {_bgc :=ContentStreamOperation {};_bgc .Operand ="\u0042\u0054";_acgb ._cf =append (_acgb ._cf ,&_bgc );return _acgb ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cg *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_bda :=ContentStreamOperation {};_bda .Operand ="\u0054\u0044";_bda .Params =_cba ([]float64 {tx ,ty });_cg ._cf =append (_cg ._cf ,&_bda );return _cg ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dgc *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_ade :=ContentStreamOperation {};_ade .Operand ="\u0053\u0043\u004e";_ade .Params =_cba (c );_dgc ._cf =append (_dgc ._cf ,&_ade );return _dgc ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _fca .PdfObject ;ColorSpace _fca .PdfObject ;Decode _fca .PdfObject ;DecodeParms _fca .PdfObject ;Filter _fca .PdfObject ;Height _fca .PdfObject ;ImageMask _fca .PdfObject ;Intent _fca .PdfObject ;Interpolate _fca .PdfObject ;
Width _fca .PdfObject ;_gbd []byte ;_ecbg *_be .ImageBase ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ggf *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_faa :=ContentStreamOperation {};_faa .Operand ="\u0079";_faa .Params =_cba ([]float64 {x1 ,y1 ,x3 ,y3 });_ggf ._cf =append (_ggf ._cf ,&_faa );return _ggf ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bbe *ContentCreator )Add_q ()*ContentCreator {_fbb :=ContentStreamOperation {};_fbb .Operand ="\u0071";_bbe ._cf =append (_bbe ._cf ,&_fbb );return _bbe ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ggd *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_cbd :=ContentStreamOperation {};_cbd .Operand ="\u0076";_cbd .Params =_cba ([]float64 {x2 ,y2 ,x3 ,y3 });_ggd ._cf =append (_ggd ._cf ,&_cbd );return _ggd ;};

// GetEncoder returns the encoder of the inline image.
func (_gebf *ContentStreamInlineImage )GetEncoder ()(_fca .StreamEncoder ,error ){return _bbgf (_gebf )};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aaa *ContentCreator )Add_h ()*ContentCreator {_gga :=ContentStreamOperation {};_gga .Operand ="\u0068";_aaa ._cf =append (_aaa ._cf ,&_gga );return _aaa ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_bga *ContentCreator )Bytes ()[]byte {return _bga ._cf .Bytes ()};func (_gbef *ContentStreamProcessor )handleCommand_g (_fcc *ContentStreamOperation ,_ggfc *_bc .PdfPageResources )error {_cfdd :=_bc .NewPdfColorspaceDeviceGray ();if len (_fcc .Params )!=_cfdd .GetNumComponents (){_d .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");
_d .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fcc .Params ),_cfdd );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_fbe ,_cafc :=_cfdd .ColorFromPdfObjects (_fcc .Params );if _cafc !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_cfdd ,_fcc ,_cafc );
return _cafc ;};_gbef ._bge .ColorspaceNonStroking =_cfdd ;_gbef ._bge .ColorNonStroking =_fbe ;return nil ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_bffg *GraphicStateStack )Pop ()GraphicsState {_acd :=(*_bffg )[len (*_bffg )-1];*_bffg =(*_bffg )[:len (*_bffg )-1];return _acd ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_deg *ContentCreator )Add_gs (dictName _fca .PdfObjectName )*ContentCreator {_af :=ContentStreamOperation {};_af .Operand ="\u0067\u0073";_af .Params =_gdff ([]_fca .PdfObjectName {dictName });_deg ._cf =append (_deg ._cf ,&_af );return _deg ;};func (_baa *ContentStreamParser )parseNumber ()(_fca .PdfObject ,error ){return _fca .ParseNumber (_baa ._egc );
};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cec *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_gaf :=ContentStreamOperation {};_gaf .Operand ="\u006d";_gaf .Params =_cba ([]float64 {x ,y });_cec ._cf =append (_cec ._cf ,&_gaf );return _cec ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_ff *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_ff )==0{return _ff ;};if _ff .isWrapped (){return _ff ;};*_ff =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_ff ...);_gd :=0;for _ ,_df :=range *_ff {if _df .Operand =="\u0071"{_gd ++;
}else if _df .Operand =="\u0051"{_gd --;};};for _gd > 0{*_ff =append (*_ff ,&ContentStreamOperation {Operand :"\u0051"});_gd --;};return _ff ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cb *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_eff :=ContentStreamOperation {};_eff .Operand ="\u006a";_eff .Params =_gdff ([]_fca .PdfObjectName {_fca .PdfObjectName (lineJoinStyle )});_cb ._cf =append (_cb ._cf ,&_eff );return _cb ;
};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dge *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_ded :=ContentStreamOperation {};_ded .Operand ="\u0063\u006d";_ded .Params =_cba ([]float64 {a ,b ,c ,d ,e ,f });_dge ._cf =append (_dge ._cf ,&_ded );return _dge ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_agc *ContentCreator )Add_ET ()*ContentCreator {_ecb :=ContentStreamOperation {};_ecb .Operand ="\u0045\u0054";_agc ._cf =append (_agc ._cf ,&_ecb );return _agc ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gb *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_aaf :=ContentStreamOperation {};_aaf .Operand ="\u0054\u0073";_aaf .Params =_cba ([]float64 {rise });_gb ._cf =append (_gb ._cf ,&_aaf );return _gb ;};func (_ebdf *ContentStreamProcessor )handleCommand_rg (_aaee *ContentStreamOperation ,_agd *_bc .PdfPageResources )error {_agba :=_bc .NewPdfColorspaceDeviceRGB ();
if len (_aaee .Params )!=_agba .GetNumComponents (){_d .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_d .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aaee .Params ),_agba );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_edg ,_bfca :=_agba .ColorFromPdfObjects (_aaee .Params );if _bfca !=nil {return _bfca ;};_ebdf ._bge .ColorspaceNonStroking =_agba ;_ebdf ._bge .ColorNonStroking =_edg ;return nil ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ccda *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_dfe :=ContentStreamOperation {};_dfe .Operand ="\u0052\u0047";_dfe .Params =_cba ([]float64 {r ,g ,b });_ccda ._cf =append (_ccda ._cf ,&_dfe );return _ccda ;};

// AddOperand adds a specified operand.
func (_dg *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_dg ._cf =append (_dg ._cf ,&op );return _dg ;};func (_ged *ContentStreamProcessor )getColorspace (_gfb string ,_gacd *_bc .PdfPageResources )(_bc .PdfColorspace ,error ){switch _gfb {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _bc .NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _bc .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _bc .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _bc .NewPdfColorspaceSpecialPattern (),nil ;
};_cbcd ,_adba :=_gacd .GetColorspaceByName (_fca .PdfObjectName (_gfb ));if _adba {return _cbcd ,nil ;};switch _gfb {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _bc .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _bc .NewPdfColorspaceCalRGB (),nil ;
case "\u004c\u0061\u0062":return _bc .NewPdfColorspaceLab (),nil ;};_d .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_gfb );
return nil ,_c .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_gfb );};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_eeeg *ContentCreator )Add_f_starred ()*ContentCreator {_dfc :=ContentStreamOperation {};_dfc .Operand ="\u0066\u002a";_eeeg ._cf =append (_eeeg ._cf ,&_dfc );return _eeeg ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_bae *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_ae :=_fa .Cos (angle *_fa .Pi /180.0);_aa :=_fa .Sin (angle *_fa .Pi /180.0);_ceg :=-_fa .Sin (angle *_fa .Pi /180.0);_ege :=_fa .Cos (angle *_fa .Pi /180.0);return _bae .Add_cm (_ae ,_aa ,_ceg ,_ege ,0,0);
};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_beff *ContentStreamOperation ,_ega GraphicsState ,_cebg *_bc .PdfPageResources )error ;

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_fbaf *ContentCreator )Add_quote (textstr _fca .PdfObjectString )*ContentCreator {_gefg :=ContentStreamOperation {};_gefg .Operand ="\u0027";_gefg .Params =_eabg ([]_fca .PdfObjectString {textstr });_fbaf ._cf =append (_fbaf ._cf ,&_gefg );return _fbaf ;
};func (_cfca *ContentStreamProcessor )handleCommand_SC (_bgce *ContentStreamOperation ,_abc *_bc .PdfPageResources )error {_gcd :=_cfca ._bge .ColorspaceStroking ;if len (_bgce .Params )!=_gcd .GetNumComponents (){_d .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_d .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bgce .Params ),_gcd );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_eaae ,_cgdc :=_gcd .ColorFromPdfObjects (_bgce .Params );if _cgdc !=nil {return _cgdc ;};_cfca ._bge .ColorStroking =_eaae ;return nil ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_gce *ContentCreator )Add_W_starred ()*ContentCreator {_bca :=ContentStreamOperation {};_bca .Operand ="\u0057\u002a";_gce ._cf =append (_gce ._cf ,&_bca );return _gce ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_gcc *ContentCreator )SetStrokingColor (color _bc .PdfColor )*ContentCreator {switch _gefa :=color .(type ){case *_bc .PdfColorDeviceGray :_gcc .Add_G (_gefa .Val ());case *_bc .PdfColorDeviceRGB :_gcc .Add_RG (_gefa .R (),_gefa .G (),_gefa .B ());
case *_bc .PdfColorDeviceCMYK :_gcc .Add_K (_gefa .C (),_gefa .M (),_gefa .Y (),_gefa .K ());default:_d .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_gefa );
};return _gcc ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _bc .Image ,encoder _fca .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_fca .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_ffd :=ContentStreamInlineImage {};if img .ColorComponents ==1{_ffd .ColorSpace =_fca .MakeName ("\u0047");
}else if img .ColorComponents ==3{_ffd .ColorSpace =_fca .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_ffd .ColorSpace =_fca .MakeName ("\u0043\u004d\u0059\u004b");}else {_d .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );
return nil ,_f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_ffd .BitsPerComponent =_fca .MakeInteger (img .BitsPerComponent );
_ffd .Width =_fca .MakeInteger (img .Width );_ffd .Height =_fca .MakeInteger (img .Height );_bded ,_efdb :=encoder .EncodeBytes (img .Data );if _efdb !=nil {return nil ,_efdb ;};_ffd ._gbd =_bded ;_bcac :=encoder .GetFilterName ();if _bcac !=_fca .StreamEncodingFilterNameRaw {_ffd .Filter =_fca .MakeName (_bcac );
};return &_ffd ,nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bbd *ContentCreator )Add_CS (name _fca .PdfObjectName )*ContentCreator {_cdd :=ContentStreamOperation {};_cdd .Operand ="\u0043\u0053";_cdd .Params =_gdff ([]_fca .PdfObjectName {name });_bbd ._cf =append (_bbd ._cf ,&_cdd );return _bbd ;};