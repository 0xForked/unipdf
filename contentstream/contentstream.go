//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_d "bufio";_gd "bytes";_bd "encoding/hex";_g "errors";_ce "fmt";_eeb "github.com/unidoc/unipdf/v3/common";_da "github.com/unidoc/unipdf/v3/core";_ae "github.com/unidoc/unipdf/v3/internal/imageutil";_bb "github.com/unidoc/unipdf/v3/internal/transform";_ee "github.com/unidoc/unipdf/v3/model";_e "image/color";_af "image/jpeg";_gb "io";_c "math";_b "strconv";);

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _da .PdfObject ;ColorSpace _da .PdfObject ;Decode _da .PdfObject ;DecodeParms _da .PdfObject ;Filter _da .PdfObject ;Height _da .PdfObject ;ImageMask _da .PdfObject ;Intent _da .PdfObject ;Interpolate _da .PdfObject ;Width _da .PdfObject ;_dcaa []byte ;_ded *_ae .ImageBase ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_dadg :=ContentStreamParser {};_gaf :=_gd .NewBufferString (contentStr +"\u000a");_dadg ._accg =_d .NewReader (_gaf );return &_dadg ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dfb *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_abf :=ContentStreamOperation {};_abf .Operand ="\u0073\u0063\u006e";_abf .Params =_bfa (c );_dfb ._ga =append (_dfb ._ga ,&_abf );return _dfb ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bde *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_gac :=ContentStreamOperation {};_gac .Operand ="\u0077";_gac .Params =_bfa ([]float64 {lineWidth });_bde ._ga =append (_bde ._ga ,&_gac );return _bde ;};func (_cb *ContentStreamOperations )isWrapped ()bool {if len (*_cb )< 2{return false ;};_f :=0;for _ ,_db :=range *_cb {if _db .Operand =="\u0071"{_f ++;}else if _db .Operand =="\u0051"{_f --;}else {if _f < 1{return false ;};};};return _f ==0;};

// Scale applies x-y scaling to the transformation matrix.
func (_gaa *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _gaa .Add_cm (sx ,0,0,sy ,0,0);};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bfg *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_ccb :=ContentStreamOperation {};_ccb .Operand ="\u0054\u007a";_ccb .Params =_bfa ([]float64 {scale });_bfg ._ga =append (_bfg ._ga ,&_ccb );return _bfg ;};func (_acg *ContentStreamProcessor )handleCommand_RG (_abaf *ContentStreamOperation ,_caf *_ee .PdfPageResources )error {_ccce :=_ee .NewPdfColorspaceDeviceRGB ();if len (_abaf .Params )!=_ccce .GetNumComponents (){_eeb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_eeb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_abaf .Params ),_ccce );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_adad ,_bebe :=_ccce .ColorFromPdfObjects (_abaf .Params );if _bebe !=nil {return _bebe ;};_acg ._eafa .ColorspaceStroking =_ccce ;_acg ._eafa .ColorStroking =_adad ;return nil ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_bgc :=ContentStreamProcessor {};_bgc ._bggd =GraphicStateStack {};_bcge :=GraphicsState {};_bgc ._eafa =_bcge ;_bgc ._dbce =[]handlerEntry {};_bgc ._deee =0;_bgc ._ddf =ops ;return &_bgc ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_fac HandlerConditionEnum )Operand ()bool {return _fac ==HandlerConditionEnumOperand };

// String returns `ops.Bytes()` as a string.
func (_gbd *ContentStreamOperations )String ()string {return string (_gbd .Bytes ())};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_ffb *ContentCreator )Add_sh (name _da .PdfObjectName )*ContentCreator {_eaa :=ContentStreamOperation {};_eaa .Operand ="\u0073\u0068";_eaa .Params =_begg ([]_da .PdfObjectName {name });_ffb ._ga =append (_ffb ._ga ,&_eaa );return _ffb ;};

// String is same as Bytes() except returns as a string for convenience.
func (_cg *ContentCreator )String ()string {return string (_cg ._ga .Bytes ())};func (_dffc *ContentStreamParser )skipSpaces ()(int ,error ){_cffe :=0;for {_gadg ,_bfee :=_dffc ._accg .Peek (1);if _bfee !=nil {return 0,_bfee ;};if _da .IsWhiteSpace (_gadg [0]){_dffc ._accg .ReadByte ();_cffe ++;}else {break ;};};return _cffe ,nil ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eaf *ContentCreator )Add_gs (dictName _da .PdfObjectName )*ContentCreator {_dfd :=ContentStreamOperation {};_dfd .Operand ="\u0067\u0073";_dfd .Params =_begg ([]_da .PdfObjectName {dictName });_eaf ._ga =append (_eaf ._ga ,&_dfd );return _eaf ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ceb *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_ced :=ContentStreamOperation {};_ced .Operand ="\u0054\u0063";_ced .Params =_bfa ([]float64 {charSpace });_ceb ._ga =append (_ceb ._ga ,&_ced );return _ceb ;};func (_cac *ContentStreamParser )parseString ()(*_da .PdfObjectString ,error ){_cac ._accg .ReadByte ();var _bfbf []byte ;_bfge :=1;for {_cffg ,_gagg :=_cac ._accg .Peek (1);if _gagg !=nil {return _da .MakeString (string (_bfbf )),_gagg ;};if _cffg [0]=='\\'{_cac ._accg .ReadByte ();_fcdf ,_cbc :=_cac ._accg .ReadByte ();if _cbc !=nil {return _da .MakeString (string (_bfbf )),_cbc ;};if _da .IsOctalDigit (_fcdf ){_fec ,_eabe :=_cac ._accg .Peek (2);if _eabe !=nil {return _da .MakeString (string (_bfbf )),_eabe ;};var _ggf []byte ;_ggf =append (_ggf ,_fcdf );for _ ,_bbfe :=range _fec {if _da .IsOctalDigit (_bbfe ){_ggf =append (_ggf ,_bbfe );}else {break ;};};_cac ._accg .Discard (len (_ggf )-1);_eeb .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_ggf );_gebd ,_eabe :=_b .ParseUint (string (_ggf ),8,32);if _eabe !=nil {return _da .MakeString (string (_bfbf )),_eabe ;};_bfbf =append (_bfbf ,byte (_gebd ));continue ;};switch _fcdf {case 'n':_bfbf =append (_bfbf ,'\n');case 'r':_bfbf =append (_bfbf ,'\r');case 't':_bfbf =append (_bfbf ,'\t');case 'b':_bfbf =append (_bfbf ,'\b');case 'f':_bfbf =append (_bfbf ,'\f');case '(':_bfbf =append (_bfbf ,'(');case ')':_bfbf =append (_bfbf ,')');case '\\':_bfbf =append (_bfbf ,'\\');};continue ;}else if _cffg [0]=='('{_bfge ++;}else if _cffg [0]==')'{_bfge --;if _bfge ==0{_cac ._accg .ReadByte ();break ;};};_adge ,_ :=_cac ._accg .ReadByte ();_bfbf =append (_bfbf ,_adge );};return _da .MakeString (string (_bfbf )),nil ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bead *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_bef :=ContentStreamOperation {};_bef .Operand ="\u0063";_bef .Params =_bfa ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_bead ._ga =append (_bead ._ga ,&_bef );return _bead ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dfe *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_bbe :=ContentStreamOperation {};_bbe .Operand ="\u0072\u0065";_bbe .Params =_bfa ([]float64 {x ,y ,width ,height });_dfe ._ga =append (_dfe ._ga ,&_bbe );return _dfe ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_afeg *ContentCreator )Add_TJ (vals ..._da .PdfObject )*ContentCreator {_ffe :=ContentStreamOperation {};_ffe .Operand ="\u0054\u004a";_ffe .Params =[]_da .PdfObject {_da .MakeArray (vals ...)};_afeg ._ga =append (_afeg ._ga ,&_ffe );return _afeg ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cdf *ContentCreator )Add_G (gray float64 )*ContentCreator {_aagb :=ContentStreamOperation {};_aagb .Operand ="\u0047";_aagb .Params =_bfa ([]float64 {gray });_cdf ._ga =append (_cdf ._ga ,&_aagb );return _cdf ;};func (_cdfe *ContentStreamProcessor )handleCommand_K (_gfdf *ContentStreamOperation ,_ddfc *_ee .PdfPageResources )error {_cfcd :=_ee .NewPdfColorspaceDeviceCMYK ();if len (_gfdf .Params )!=_cfcd .GetNumComponents (){_eeb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_eeb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gfdf .Params ),_cfcd );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cgb ,_fae :=_cfcd .ColorFromPdfObjects (_gfdf .Params );if _fae !=nil {return _fae ;};_cdfe ._eafa .ColorspaceStroking =_cfcd ;_cdfe ._eafa .ColorStroking =_cgb ;return nil ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_bdcd *ContentStreamInlineImage )ToImage (resources *_ee .PdfPageResources )(*_ee .Image ,error ){_afg ,_dcab :=_bdcd .toImageBase (resources );if _dcab !=nil {return nil ,_dcab ;};_cgdbc ,_dcab :=_gdc (_bdcd );if _dcab !=nil {return nil ,_dcab ;};_eeb .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_cgdbc ,_cgdbc );_eeb .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_bdcd );_gbed ,_dcab :=_cgdbc .DecodeBytes (_bdcd ._dcaa );if _dcab !=nil {return nil ,_dcab ;};_gcac :=&_ee .Image {Width :int64 (_afg .Width ),Height :int64 (_afg .Height ),BitsPerComponent :int64 (_afg .BitsPerComponent ),ColorComponents :_afg .ColorComponents ,Data :_gbed };if len (_afg .Decode )> 0{for _fde :=0;_fde < len (_afg .Decode );_fde ++{_afg .Decode [_fde ]*=float64 ((int (1)<<uint (_afg .BitsPerComponent ))-1);};_gcac .SetDecode (_afg .Decode );};return _gcac ,nil ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gdbf *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_ecb :=ContentStreamOperation {};_ecb .Operand ="\u0054\u0077";_ecb .Params =_bfa ([]float64 {wordSpace });_gdbf ._ga =append (_gdbf ._ga ,&_ecb );return _gdbf ;};func (_eee *ContentStreamParser )parseBool ()(_da .PdfObjectBool ,error ){_cfda ,_babe :=_eee ._accg .Peek (4);if _babe !=nil {return _da .PdfObjectBool (false ),_babe ;};if (len (_cfda )>=4)&&(string (_cfda [:4])=="\u0074\u0072\u0075\u0065"){_eee ._accg .Discard (4);return _da .PdfObjectBool (true ),nil ;};_cfda ,_babe =_eee ._accg .Peek (5);if _babe !=nil {return _da .PdfObjectBool (false ),_babe ;};if (len (_cfda )>=5)&&(string (_cfda [:5])=="\u0066\u0061\u006cs\u0065"){_eee ._accg .Discard (5);return _da .PdfObjectBool (false ),nil ;};return _da .PdfObjectBool (false ),_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_aabc *ContentStreamProcessor )handleCommand_scn (_agc *ContentStreamOperation ,_eace *_ee .PdfPageResources )error {_afbg :=_aabc ._eafa .ColorspaceNonStroking ;if !_gfaa (_afbg ){if len (_agc .Params )!=_afbg .GetNumComponents (){_eeb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_eeb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_agc .Params ),_afbg );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_gbbb ,_gcbe :=_afbg .ColorFromPdfObjects (_agc .Params );if _gcbe !=nil {_eeb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_agc .Params ,_afbg );return _gcbe ;};_aabc ._eafa .ColorNonStroking =_gbbb ;return nil ;};func (_egdf *ContentStreamProcessor )handleCommand_cs (_dfdf *ContentStreamOperation ,_ebbd *_ee .PdfPageResources )error {if len (_dfdf .Params )< 1{_eeb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _g .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_dfdf .Params )> 1{_eeb .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _g .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_caec ,_cagc :=_dfdf .Params [0].(*_da .PdfObjectName );if !_cagc {_eeb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_eddf ,_cfdc :=_egdf .getColorspace (string (*_caec ),_ebbd );if _cfdc !=nil {return _cfdc ;};_egdf ._eafa .ColorspaceNonStroking =_eddf ;_fgc ,_cfdc :=_egdf .getInitialColor (_eddf );if _cfdc !=nil {return _cfdc ;};_egdf ._eafa .ColorNonStroking =_fgc ;return nil ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eec *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_ad :=ContentStreamOperation {};_ad .Operand ="\u004a";_ad .Params =_begg ([]_da .PdfObjectName {_da .PdfObjectName (lineCapStyle )});_eec ._ga =append (_eec ._ga ,&_ad );return _eec ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _ee .Image ,encoder _da .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_da .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_cga :=ContentStreamInlineImage {};if img .ColorComponents ==1{_cga .ColorSpace =_da .MakeName ("\u0047");}else if img .ColorComponents ==3{_cga .ColorSpace =_da .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_cga .ColorSpace =_da .MakeName ("\u0043\u004d\u0059\u004b");}else {_eeb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_cga .BitsPerComponent =_da .MakeInteger (img .BitsPerComponent );_cga .Width =_da .MakeInteger (img .Width );_cga .Height =_da .MakeInteger (img .Height );_dgc ,_gea :=encoder .EncodeBytes (img .Data );if _gea !=nil {return nil ,_gea ;};_cga ._dcaa =_dgc ;_dddd :=encoder .GetFilterName ();if _dddd !=_da .StreamEncodingFilterNameRaw {_cga .Filter =_da .MakeName (_dddd );};return &_cga ,nil ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gda *ContentCreator )Add_B ()*ContentCreator {_gbac :=ContentStreamOperation {};_gbac .Operand ="\u0042";_gda ._ga =append (_gda ._ga ,&_gbac );return _gda ;};func (_fgf *ContentStreamProcessor )handleCommand_k (_abafe *ContentStreamOperation ,_aggd *_ee .PdfPageResources )error {_cdff :=_ee .NewPdfColorspaceDeviceCMYK ();if len (_abafe .Params )!=_cdff .GetNumComponents (){_eeb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_eeb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_abafe .Params ),_cdff );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_baeg ,_ggff :=_cdff .ColorFromPdfObjects (_abafe .Params );if _ggff !=nil {return _ggff ;};_fgf ._eafa .ColorspaceNonStroking =_cdff ;_fgf ._eafa .ColorNonStroking =_baeg ;return nil ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_feg *ContentCreator )Add_Tj (textstr _da .PdfObjectString )*ContentCreator {_cca :=ContentStreamOperation {};_cca .Operand ="\u0054\u006a";_cca .Params =_cagd ([]_da .PdfObjectString {textstr });_feg ._ga =append (_feg ._ga ,&_cca );return _feg ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cgd *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_ecc :=ContentStreamOperation {};_ecc .Operand ="\u006a";_ecc .Params =_begg ([]_da .PdfObjectName {_da .PdfObjectName (lineJoinStyle )});_cgd ._ga =append (_cgd ._ga ,&_ecc );return _cgd ;};func _cbaf (_edb *ContentStreamInlineImage )(*_da .MultiEncoder ,error ){_ged :=_da .NewMultiEncoder ();var _geb *_da .PdfObjectDictionary ;var _aba []_da .PdfObject ;if _gaag :=_edb .DecodeParms ;_gaag !=nil {_edef ,_bbfg :=_gaag .(*_da .PdfObjectDictionary );if _bbfg {_geb =_edef ;};_ggcc ,_dde :=_gaag .(*_da .PdfObjectArray );if _dde {for _ ,_gbc :=range _ggcc .Elements (){if _ceecg ,_cag :=_gbc .(*_da .PdfObjectDictionary );_cag {_aba =append (_aba ,_ceecg );}else {_aba =append (_aba ,nil );};};};};_gcc :=_edb .Filter ;if _gcc ==nil {return nil ,_ce .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_cbfg ,_faf :=_gcc .(*_da .PdfObjectArray );if !_faf {return nil ,_ce .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _bcb ,_dbf :=range _cbfg .Elements (){_egf ,_cbga :=_dbf .(*_da .PdfObjectName );if !_cbga {return nil ,_ce .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _fcff _da .PdfObject ;if _geb !=nil {_fcff =_geb ;}else {if len (_aba )> 0{if _bcb >=len (_aba ){return nil ,_ce .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_fcff =_aba [_bcb ];};};var _dbaf *_da .PdfObjectDictionary ;if _cbfb ,_ggaa :=_fcff .(*_da .PdfObjectDictionary );_ggaa {_dbaf =_cbfb ;};if *_egf ==_da .StreamEncodingFilterNameFlate ||*_egf =="\u0046\u006c"{_fag ,_affb :=_ceec (_edb ,_dbaf );if _affb !=nil {return nil ,_affb ;};_ged .AddEncoder (_fag );}else if *_egf ==_da .StreamEncodingFilterNameLZW {_beaa ,_fcc :=_dba (_edb ,_dbaf );if _fcc !=nil {return nil ,_fcc ;};_ged .AddEncoder (_beaa );}else if *_egf ==_da .StreamEncodingFilterNameASCIIHex {_cge :=_da .NewASCIIHexEncoder ();_ged .AddEncoder (_cge );}else if *_egf ==_da .StreamEncodingFilterNameASCII85 ||*_egf =="\u0041\u0038\u0035"{_aab :=_da .NewASCII85Encoder ();_ged .AddEncoder (_aab );}else {_eeb .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_egf );return nil ,_ce .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _ged ,nil ;};func (_bbg *ContentStreamParser )parseHexString ()(*_da .PdfObjectString ,error ){_bbg ._accg .ReadByte ();_abga :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _dbdc []byte ;for {_bbg .skipSpaces ();_egdc ,_deed :=_bbg ._accg .Peek (1);if _deed !=nil {return _da .MakeString (""),_deed ;};if _egdc [0]=='>'{_bbg ._accg .ReadByte ();break ;};_bccd ,_ :=_bbg ._accg .ReadByte ();if _gd .IndexByte (_abga ,_bccd )>=0{_dbdc =append (_dbdc ,_bccd );};};if len (_dbdc )%2==1{_dbdc =append (_dbdc ,'0');};_gee ,_ :=_bd .DecodeString (string (_dbdc ));return _da .MakeHexString (string (_gee )),nil ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_ebd *ContentCreator )Wrap (){_ebd ._ga .WrapIfNeeded ()};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fcgb *ContentCreator )Add_Tstar ()*ContentCreator {_cdb :=ContentStreamOperation {};_cdb .Operand ="\u0054\u002a";_fcgb ._ga =append (_fcgb ._ga ,&_cdb );return _fcgb ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bea *ContentCreator )Add_ri (intent _da .PdfObjectName )*ContentCreator {_cba :=ContentStreamOperation {};_cba .Operand ="\u0072\u0069";_cba .Params =_begg ([]_da .PdfObjectName {intent });_bea ._ga =append (_bea ._ga ,&_cba );return _bea ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_aff *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_abe :=ContentStreamOperation {};_abe .Operand ="\u0053\u0043\u004e";_abe .Params =_bfa (c );_aff ._ga =append (_aff ._ga ,&_abe );return _aff ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eac *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_cdad :=ContentStreamOperation {};_cdad .Operand ="\u0054\u0073";_cdad .Params =_bfa ([]float64 {rise });_eac ._ga =append (_eac ._ga ,&_cdad );return _eac ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ffa *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_bc :=ContentStreamOperation {};_bc .Operand ="\u006c";_bc .Params =_bfa ([]float64 {x ,y });_ffa ._ga =append (_ffa ._ga ,&_bc );return _ffa ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_egec *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_gae :=ContentStreamOperation {};_gae .Operand ="\u004b";_gae .Params =_bfa ([]float64 {c ,m ,y ,k });_egec ._ga =append (_egec ._ga ,&_gae );return _egec ;};func _ceec (_bad *ContentStreamInlineImage ,_ccd *_da .PdfObjectDictionary )(*_da .FlateEncoder ,error ){_eea :=_da .NewFlateEncoder ();if _bad ._ded !=nil {_eea .SetImage (_bad ._ded );};if _ccd ==nil {_eafd :=_bad .DecodeParms ;if _eafd !=nil {_gadd ,_egcd :=_da .GetDict (_eafd );if !_egcd {_eeb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_eafd );return nil ,_ce .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_ccd =_gadd ;};};if _ccd ==nil {return _eea ,nil ;};_eeb .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_ccd .String ());_gcab :=_ccd .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _gcab ==nil {_eeb .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_dab ,_fgd :=_gcab .(*_da .PdfObjectInteger );if !_fgd {_eeb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_gcab );return nil ,_ce .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_eea .Predictor =int (*_dab );};_gcab =_ccd .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _gcab !=nil {_gef ,_cfae :=_gcab .(*_da .PdfObjectInteger );if !_cfae {_eeb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_ce .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_eea .BitsPerComponent =int (*_gef );};if _eea .Predictor > 1{_eea .Columns =1;_gcab =_ccd .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _gcab !=nil {_bgg ,_acb :=_gcab .(*_da .PdfObjectInteger );if !_acb {return nil ,_ce .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_eea .Columns =int (*_bgg );};_eea .Colors =1;_cdcg :=_ccd .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _cdcg !=nil {_cccg ,_ede :=_cdcg .(*_da .PdfObjectInteger );if !_ede {return nil ,_ce .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_eea .Colors =int (*_cccg );};};return _eea ,nil ;};func (_ddfd *ContentStreamProcessor )handleCommand_CS (_dfge *ContentStreamOperation ,_bdeg *_ee .PdfPageResources )error {if len (_dfge .Params )< 1{_eeb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _g .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_dfge .Params )> 1{_eeb .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _g .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_bgbb ,_ebg :=_dfge .Params [0].(*_da .PdfObjectName );if !_ebg {_eeb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_bdb ,_gbcb :=_ddfd .getColorspace (string (*_bgbb ),_bdeg );if _gbcb !=nil {return _gbcb ;};_ddfd ._eafa .ColorspaceStroking =_bdb ;_cggb ,_gbcb :=_ddfd .getInitialColor (_bdb );if _gbcb !=nil {return _gbcb ;};_ddfd ._eafa .ColorStroking =_cggb ;return nil ;};func (_fbb *ContentStreamParser )skipComments ()error {if _ ,_beg :=_fbb .skipSpaces ();_beg !=nil {return _beg ;};_eecfd :=true ;for {_gebg ,_ddb :=_fbb ._accg .Peek (1);if _ddb !=nil {_eeb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_ddb .Error ());return _ddb ;};if _eecfd &&_gebg [0]!='%'{return nil ;};_eecfd =false ;if (_gebg [0]!='\r')&&(_gebg [0]!='\n'){_fbb ._accg .ReadByte ();}else {break ;};};return _fbb .skipComments ();};func _aebaa (_eed []int64 )[]_da .PdfObject {var _abaa []_da .PdfObject ;for _ ,_eabd :=range _eed {_abaa =append (_abaa ,_da .MakeInteger (_eabd ));};return _abaa ;};

// GetEncoder returns the encoder of the inline image.
func (_cea *ContentStreamInlineImage )GetEncoder ()(_da .StreamEncoder ,error ){return _gdc (_cea )};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gge *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_bga :=ContentStreamOperation {};_bga .Operand ="\u0076";_bga .Params =_bfa ([]float64 {x2 ,y2 ,x3 ,y3 });_gge ._ga =append (_gge ._ga ,&_bga );return _gge ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_edg *ContentCreator )Add_SCN_pattern (name _da .PdfObjectName ,c ...float64 )*ContentCreator {_gggg :=ContentStreamOperation {};_gggg .Operand ="\u0053\u0043\u004e";_gggg .Params =_bfa (c );_gggg .Params =append (_gggg .Params ,_da .MakeName (string (name )));_edg ._ga =append (_edg ._ga ,&_gggg );return _edg ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eeca *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_cbe :=ContentStreamOperation {};_cbe .Operand ="\u0072\u0067";_cbe .Params =_bfa ([]float64 {r ,g ,b });_eeca ._ga =append (_eeca ._ga ,&_cbe );return _eeca ;};func (_bdca *ContentStreamInlineImage )String ()string {_bba :=_ce .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_bdca ._dcaa ));if _bdca .BitsPerComponent !=nil {_bba +="\u002d\u0020\u0042\u0050\u0043\u0020"+_bdca .BitsPerComponent .WriteString ()+"\u000a";};if _bdca .ColorSpace !=nil {_bba +="\u002d\u0020\u0043S\u0020"+_bdca .ColorSpace .WriteString ()+"\u000a";};if _bdca .Decode !=nil {_bba +="\u002d\u0020\u0044\u0020"+_bdca .Decode .WriteString ()+"\u000a";};if _bdca .DecodeParms !=nil {_bba +="\u002d\u0020\u0044P\u0020"+_bdca .DecodeParms .WriteString ()+"\u000a";};if _bdca .Filter !=nil {_bba +="\u002d\u0020\u0046\u0020"+_bdca .Filter .WriteString ()+"\u000a";};if _bdca .Height !=nil {_bba +="\u002d\u0020\u0048\u0020"+_bdca .Height .WriteString ()+"\u000a";};if _bdca .ImageMask !=nil {_bba +="\u002d\u0020\u0049M\u0020"+_bdca .ImageMask .WriteString ()+"\u000a";};if _bdca .Intent !=nil {_bba +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_bdca .Intent .WriteString ()+"\u000a";};if _bdca .Interpolate !=nil {_bba +="\u002d\u0020\u0049\u0020"+_bdca .Interpolate .WriteString ()+"\u000a";};if _bdca .Width !=nil {_bba +="\u002d\u0020\u0057\u0020"+_bdca .Width .WriteString ()+"\u000a";};return _bba ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_dgg *ContentCreator )Add_BMC (tag _da .PdfObjectName )*ContentCreator {_bbeb :=ContentStreamOperation {};_bbeb .Operand ="\u0042\u004d\u0043";_bbeb .Params =_begg ([]_da .PdfObjectName {tag });_dgg ._ga =append (_dgg ._ga ,&_bbeb );return _dgg ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_fgef *GraphicStateStack )Pop ()GraphicsState {_cab :=(*_fgef )[len (*_fgef )-1];*_fgef =(*_fgef )[:len (*_fgef )-1];return _cab ;};func (_babb *ContentStreamProcessor )handleCommand_rg (_ecga *ContentStreamOperation ,_bgaf *_ee .PdfPageResources )error {_gecea :=_ee .NewPdfColorspaceDeviceRGB ();if len (_ecga .Params )!=_gecea .GetNumComponents (){_eeb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_eeb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ecga .Params ),_gecea );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dfed ,_gfc :=_gecea .ColorFromPdfObjects (_ecga .Params );if _gfc !=nil {return _gfc ;};_babb ._eafa .ColorspaceNonStroking =_gecea ;_babb ._eafa .ColorNonStroking =_dfed ;return nil ;};func (_aefe *ContentStreamProcessor )getColorspace (_cdbc string ,_ffgg *_ee .PdfPageResources )(_ee .PdfColorspace ,error ){switch _cdbc {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _ee .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _ee .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _ee .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _ee .NewPdfColorspaceSpecialPattern (),nil ;};_bgda ,_egca :=_ffgg .GetColorspaceByName (_da .PdfObjectName (_cdbc ));if _egca {return _bgda ,nil ;};switch _cdbc {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _ee .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _ee .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _ee .NewPdfColorspaceLab (),nil ;};_eeb .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_cdbc );return nil ,_ce .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_cdbc );};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_cae *ContentCreator )Add_EMC ()*ContentCreator {_efce :=ContentStreamOperation {};_efce .Operand ="\u0045\u004d\u0043";_cae ._ga =append (_cae ._ga ,&_efce );return _cae ;};func _gfaa (_fgdgg _ee .PdfColorspace )bool {_ ,_caaf :=_fgdgg .(*_ee .PdfColorspaceSpecialPattern );return _caaf ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_fgeg *ContentStreamOperation ,_gdd GraphicsState ,_agge *_ee .PdfPageResources )error ;

// Operations returns the list of operations.
func (_dee *ContentCreator )Operations ()*ContentStreamOperations {return &_dee ._ga };

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_fdd *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_cgg :=handlerEntry {};_cgg .Condition =condition ;_cgg .Operand =operand ;_cgg .Handler =handler ;_fdd ._dbce =append (_fdd ._dbce ,_cgg );};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ed *ContentCreator )Add_q ()*ContentCreator {_bff :=ContentStreamOperation {};_bff .Operand ="\u0071";_ed ._ga =append (_ed ._ga ,&_bff );return _ed ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cfc *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_fcb :=ContentStreamOperation {};_fcb .Operand ="\u006b";_fcb .Params =_bfa ([]float64 {c ,m ,y ,k });_cfc ._ga =append (_cfc ._ga ,&_fcb );return _cfc ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_acf *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_gag :=ContentStreamOperation {};_gag .Operand ="\u0063\u006d";_gag .Params =_bfa ([]float64 {a ,b ,c ,d ,e ,f });_acf ._ga =append (_acf ._ga ,&_gag );return _acf ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_ggc :=&ContentCreator {};_ggc ._ga =ContentStreamOperations {};return _ggc ;};func _dba (_dgf *ContentStreamInlineImage ,_cfg *_da .PdfObjectDictionary )(*_da .LZWEncoder ,error ){_gbe :=_da .NewLZWEncoder ();if _cfg ==nil {if _dgf .DecodeParms !=nil {_cdfd ,_afde :=_da .GetDict (_dgf .DecodeParms );if !_afde {_eeb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_dgf .DecodeParms );return nil ,_ce .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_cfg =_cdfd ;};};if _cfg ==nil {return _gbe ,nil ;};_eaad :=_cfg .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _eaad !=nil {_dfg ,_dca :=_eaad .(*_da .PdfObjectInteger );if !_dca {_eeb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_eaad );return nil ,_ce .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_dfg !=0&&*_dfg !=1{return nil ,_ce .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_gbe .EarlyChange =int (*_dfg );}else {_gbe .EarlyChange =1;};_eaad =_cfg .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _eaad !=nil {_fdc ,_gfa :=_eaad .(*_da .PdfObjectInteger );if !_gfa {_eeb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_eaad );return nil ,_ce .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_gbe .Predictor =int (*_fdc );};_eaad =_cfg .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _eaad !=nil {_deg ,_caa :=_eaad .(*_da .PdfObjectInteger );if !_caa {_eeb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_ce .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_gbe .BitsPerComponent =int (*_deg );};if _gbe .Predictor > 1{_gbe .Columns =1;_eaad =_cfg .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _eaad !=nil {_fcfg ,_aad :=_eaad .(*_da .PdfObjectInteger );if !_aad {return nil ,_ce .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_gbe .Columns =int (*_fcfg );};_gbe .Colors =1;_eaad =_cfg .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _eaad !=nil {_efceb ,_ead :=_eaad .(*_da .PdfObjectInteger );if !_ead {return nil ,_ce .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_gbe .Colors =int (*_efceb );};};_eeb .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_cfg .String ());return _gbe ,nil ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ddc *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_bg :=ContentStreamOperation {};_bg .Operand ="\u0064";_bg .Params =[]_da .PdfObject {};_bg .Params =append (_bg .Params ,_da .MakeArrayFromIntegers64 (dashArray ));_bg .Params =append (_bg .Params ,_da .MakeInteger (dashPhase ));_ddc ._ga =append (_ddc ._ga ,&_bg );return _ddc ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_aeb *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_fffd :=ContentStreamOperation {};_fffd .Operand ="\u0054\u006d";_fffd .Params =_bfa ([]float64 {a ,b ,c ,d ,e ,f });_aeb ._ga =append (_aeb ._ga ,&_fffd );return _aeb ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_efc *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_fcg :=ContentStreamOperation {};_fcg .Operand ="\u0079";_fcg .Params =_bfa ([]float64 {x1 ,y1 ,x3 ,y3 });_efc ._ga =append (_efc ._ga ,&_fcg );return _efc ;};func (_cfdg *ContentStreamParser )parseDict ()(*_da .PdfObjectDictionary ,error ){_eeb .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_gggd :=_da .MakeDict ();_bcga ,_ :=_cfdg ._accg .ReadByte ();if _bcga !='<'{return nil ,_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_bcga ,_ =_cfdg ._accg .ReadByte ();if _bcga !='<'{return nil ,_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_cfdg .skipSpaces ();_feac ,_gaee :=_cfdg ._accg .Peek (2);if _gaee !=nil {return nil ,_gaee ;};_eeb .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_feac ),string (_feac ));if (_feac [0]=='>')&&(_feac [1]=='>'){_eeb .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_cfdg ._accg .ReadByte ();_cfdg ._accg .ReadByte ();break ;};_eeb .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_eeg ,_gaee :=_cfdg .parseName ();_eeb .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_eeg );if _gaee !=nil {_eeb .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_gaee );return nil ,_gaee ;};if len (_eeg )> 4&&_eeg [len (_eeg )-4:]=="\u006e\u0075\u006c\u006c"{_faac :=_eeg [0:len (_eeg )-4];_eeb .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_eeg );_eeb .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_faac );_cfdg .skipSpaces ();_bbaa ,_ :=_cfdg ._accg .Peek (1);if _bbaa [0]=='/'{_gggd .Set (_faac ,_da .MakeNull ());continue ;};};_cfdg .skipSpaces ();_eca ,_ ,_gaee :=_cfdg .parseObject ();if _gaee !=nil {return nil ,_gaee ;};_gggd .Set (_eeg ,_eca );_eeb .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_eeg ,_eca .String ());};return _gggd ,nil ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_dbc *ContentCreator )SetStrokingColor (color _ee .PdfColor )*ContentCreator {switch _adg :=color .(type ){case *_ee .PdfColorDeviceGray :_dbc .Add_G (_adg .Val ());case *_ee .PdfColorDeviceRGB :_dbc .Add_RG (_adg .R (),_adg .G (),_adg .B ());case *_ee .PdfColorDeviceCMYK :_dbc .Add_K (_adg .C (),_adg .M (),_adg .Y (),_adg .K ());default:_eeb .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_adg );};return _dbc ;};func (_ecd *ContentStreamProcessor )handleCommand_G (_ccdf *ContentStreamOperation ,_bfc *_ee .PdfPageResources )error {_aaa :=_ee .NewPdfColorspaceDeviceGray ();if len (_ccdf .Params )!=_aaa .GetNumComponents (){_eeb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_eeb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ccdf .Params ),_aaa );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_agbe ,_fgda :=_aaa .ColorFromPdfObjects (_ccdf .Params );if _fgda !=nil {return _fgda ;};_ecd ._eafa .ColorspaceStroking =_aaa ;_ecd ._eafa .ColorStroking =_agbe ;return nil ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_cf *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_ab :=_c .Cos (angle *_c .Pi /180.0);_ddd :=_c .Sin (angle *_c .Pi /180.0);_gbf :=-_c .Sin (angle *_c .Pi /180.0);_cbg :=_c .Cos (angle *_c .Pi /180.0);return _cf .Add_cm (_ab ,_ddd ,_gbf ,_cbg ,0,0);};func _begg (_aca []_da .PdfObjectName )[]_da .PdfObject {var _fgdaf []_da .PdfObject ;for _ ,_dbbd :=range _aca {_fgdaf =append (_fgdaf ,_da .MakeName (string (_dbbd )));};return _fgdaf ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_da .PdfObject ;Operand string ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_bggd GraphicStateStack ;_ddf []*ContentStreamOperation ;_eafa GraphicsState ;_dbce []handlerEntry ;_deee int ;};func (_cde *ContentStreamParser )parseName ()(_da .PdfObjectName ,error ){_dfbf :="";_ace :=false ;for {_gbbg ,_ffbe :=_cde ._accg .Peek (1);if _ffbe ==_gb .EOF {break ;};if _ffbe !=nil {return _da .PdfObjectName (_dfbf ),_ffbe ;};if !_ace {if _gbbg [0]=='/'{_ace =true ;_cde ._accg .ReadByte ();}else {_eeb .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_gbbg ,_gbbg );return _da .PdfObjectName (_dfbf ),_ce .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_gbbg [0]);};}else {if _da .IsWhiteSpace (_gbbg [0]){break ;}else if (_gbbg [0]=='/')||(_gbbg [0]=='[')||(_gbbg [0]=='(')||(_gbbg [0]==']')||(_gbbg [0]=='<')||(_gbbg [0]=='>'){break ;}else if _gbbg [0]=='#'{_afb ,_bbb :=_cde ._accg .Peek (3);if _bbb !=nil {return _da .PdfObjectName (_dfbf ),_bbb ;};_cde ._accg .Discard (3);_bcc ,_bbb :=_bd .DecodeString (string (_afb [1:3]));if _bbb !=nil {return _da .PdfObjectName (_dfbf ),_bbb ;};_dfbf +=string (_bcc );}else {_caef ,_ :=_cde ._accg .ReadByte ();_dfbf +=string (_caef );};};};return _da .PdfObjectName (_dfbf ),nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fcfe *ContentCreator )Add_CS (name _da .PdfObjectName )*ContentCreator {_aga :=ContentStreamOperation {};_aga .Operand ="\u0043\u0053";_aga .Params =_begg ([]_da .PdfObjectName {name });_fcfe ._ga =append (_fcfe ._ga ,&_aga );return _fcfe ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ebf *ContentCreator )Add_scn_pattern (name _da .PdfObjectName ,c ...float64 )*ContentCreator {_cbgb :=ContentStreamOperation {};_cbgb .Operand ="\u0073\u0063\u006e";_cbgb .Params =_bfa (c );_cbgb .Params =append (_cbgb .Params ,_da .MakeName (string (name )));_ebf ._ga =append (_ebf ._ga ,&_cbgb );return _ebf ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_be *ContentStreamOperations )Bytes ()[]byte {var _fc _gd .Buffer ;for _ ,_gba :=range *_be {if _gba ==nil {continue ;};if _gba .Operand =="\u0042\u0049"{_fc .WriteString (_gba .Operand +"\u000a");_fc .WriteString (_gba .Params [0].WriteString ());}else {for _ ,_agd :=range _gba .Params {_fc .WriteString (_agd .WriteString ());_fc .WriteString ("\u0020");};_fc .WriteString (_gba .Operand +"\u000a");};};return _fc .Bytes ();};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cbf *ContentCreator )Add_Q ()*ContentCreator {_dag :=ContentStreamOperation {};_dag .Operand ="\u0051";_cbf ._ga =append (_cbf ._ga ,&_dag );return _cbf ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_ba *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_ba )==0{return _ba ;};if _ba .isWrapped (){return _ba ;};*_ba =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_ba ...);_ag :=0;for _ ,_ca :=range *_ba {if _ca .Operand =="\u0071"{_ag ++;}else if _ca .Operand =="\u0051"{_ag --;};};for _ag > 0{*_ba =append (*_ba ,&ContentStreamOperation {Operand :"\u0051"});_ag --;};return _ba ;};

// AddOperand adds a specified operand.
func (_ec *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_ec ._ga =append (_ec ._ga ,&op );return _ec ;};func (_egff *ContentStreamParser )parseArray ()(*_da .PdfObjectArray ,error ){_cdef :=_da .MakeArray ();_egff ._accg .ReadByte ();for {_egff .skipSpaces ();_gcadg ,_ceaa :=_egff ._accg .Peek (1);if _ceaa !=nil {return _cdef ,_ceaa ;};if _gcadg [0]==']'{_egff ._accg .ReadByte ();break ;};_gdgg ,_ ,_ceaa :=_egff .parseObject ();if _ceaa !=nil {return _cdef ,_ceaa ;};_cdef .Append (_gdgg );};return _cdef ,nil ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cege *ContentCreator )Add_n ()*ContentCreator {_bac :=ContentStreamOperation {};_bac .Operand ="\u006e";_cege ._ga =append (_cege ._ga ,&_bac );return _cege ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_cgaa *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_baa :=ContentStreamInlineImage {};for {_cgaa .skipSpaces ();_cgeg ,_agg ,_dbe :=_cgaa .parseObject ();if _dbe !=nil {return nil ,_dbe ;};if !_agg {_gccc ,_agaf :=_da .GetName (_cgeg );if !_agaf {_eeb .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_cgeg );return nil ,_ce .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_cgeg );};_efb ,_ffga ,_ggeg :=_cgaa .parseObject ();if _ggeg !=nil {return nil ,_ggeg ;};if _ffga {return nil ,_ce .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_gccc {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_baa .BitsPerComponent =_efb ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_baa .ColorSpace =_efb ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_baa .Decode =_efb ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_baa .DecodeParms =_efb ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_baa .Filter =_efb ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_baa .Height =_efb ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_baa .ImageMask =_efb ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_baa .Intent =_efb ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_baa .Interpolate =_efb ;case "\u0057","\u0057\u0069\u0064t\u0068":_baa .Width =_efb ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_eeb .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_gccc );default:return nil ,_ce .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_gccc );};};if _agg {_adbf ,_cdac :=_cgeg .(*_da .PdfObjectString );if !_cdac {return nil ,_ce .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _adbf .Str ()=="\u0045\u0049"{_eeb .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_baa ,nil ;}else if _adbf .Str ()=="\u0049\u0044"{_eeb .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_adgg ,_ffec :=_cgaa ._accg .Peek (1);if _ffec !=nil {return nil ,_ffec ;};if _da .IsWhiteSpace (_adgg [0]){_cgaa ._accg .Discard (1);};_baa ._dcaa =[]byte {};_edd :=0;var _ccac []byte ;for {_eecad ,_gbec :=_cgaa ._accg .ReadByte ();if _gbec !=nil {_eeb .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_gbec ;};if _edd ==0{if _da .IsWhiteSpace (_eecad ){_ccac =[]byte {};_ccac =append (_ccac ,_eecad );_edd =1;}else if _eecad =='E'{_ccac =append (_ccac ,_eecad );_edd =2;}else {_baa ._dcaa =append (_baa ._dcaa ,_eecad );};}else if _edd ==1{_ccac =append (_ccac ,_eecad );if _eecad =='E'{_edd =2;}else {_baa ._dcaa =append (_baa ._dcaa ,_ccac ...);_ccac =[]byte {};if _da .IsWhiteSpace (_eecad ){_edd =1;}else {_edd =0;};};}else if _edd ==2{_ccac =append (_ccac ,_eecad );if _eecad =='I'{_edd =3;}else {_baa ._dcaa =append (_baa ._dcaa ,_ccac ...);_ccac =[]byte {};_edd =0;};}else if _edd ==3{_ccac =append (_ccac ,_eecad );if _da .IsWhiteSpace (_eecad ){_bge ,_dabf :=_cgaa ._accg .Peek (20);if _dabf !=nil &&_dabf !=_gb .EOF {return nil ,_dabf ;};_cfdd :=NewContentStreamParser (string (_bge ));_afff :=true ;for _abg :=0;_abg < 3;_abg ++{_bgag ,_gcad ,_fge :=_cfdd .parseObject ();if _fge !=nil {if _fge ==_gb .EOF {break ;};continue ;};if _gcad &&!_bbc (_bgag .String ()){_afff =false ;break ;};};if _afff {if len (_baa ._dcaa )> 100{_eeb .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_baa ._dcaa ),_baa ._dcaa [:100]);}else {_eeb .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_baa ._dcaa ),_baa ._dcaa );};return &_baa ,nil ;};};_baa ._dcaa =append (_baa ._dcaa ,_ccac ...);_ccac =[]byte {};_edd =0;};};};};};};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_acff *ContentCreator )Add_W_starred ()*ContentCreator {_afd :=ContentStreamOperation {};_afd .Operand ="\u0057\u002a";_acff ._ga =append (_acff ._ga ,&_afd );return _acff ;};var _ceae =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_efa *ContentCreator )Add_Do (name _da .PdfObjectName )*ContentCreator {_aee :=ContentStreamOperation {};_aee .Operand ="\u0044\u006f";_aee .Params =_begg ([]_da .PdfObjectName {name });_efa ._ga =append (_efa ._ga ,&_aee );return _efa ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fe *ContentCreator )Add_b ()*ContentCreator {_cdc :=ContentStreamOperation {};_cdc .Operand ="\u0062";_fe ._ga =append (_fe ._ga ,&_cdc );return _fe ;};func (_fffa *ContentStreamParser )parseNull ()(_da .PdfObjectNull ,error ){_ ,_fgdg :=_fffa ._accg .Discard (4);return _da .PdfObjectNull {},_fgdg ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fff *ContentCreator )Add_B_starred ()*ContentCreator {_cgc :=ContentStreamOperation {};_cgc .Operand ="\u0042\u002a";_fff ._ga =append (_fff ._ga ,&_cgc );return _fff ;};func _bbc (_afga string )bool {_ ,_dea :=_ceae [_afga ];return _dea };

// WriteString outputs the object as it is to be written to file.
func (_bcg *ContentStreamInlineImage )WriteString ()string {var _gggf _gd .Buffer ;_gff :="";if _bcg .BitsPerComponent !=nil {_gff +="\u002f\u0042\u0050C\u0020"+_bcg .BitsPerComponent .WriteString ()+"\u000a";};if _bcg .ColorSpace !=nil {_gff +="\u002f\u0043\u0053\u0020"+_bcg .ColorSpace .WriteString ()+"\u000a";};if _bcg .Decode !=nil {_gff +="\u002f\u0044\u0020"+_bcg .Decode .WriteString ()+"\u000a";};if _bcg .DecodeParms !=nil {_gff +="\u002f\u0044\u0050\u0020"+_bcg .DecodeParms .WriteString ()+"\u000a";};if _bcg .Filter !=nil {_gff +="\u002f\u0046\u0020"+_bcg .Filter .WriteString ()+"\u000a";};if _bcg .Height !=nil {_gff +="\u002f\u0048\u0020"+_bcg .Height .WriteString ()+"\u000a";};if _bcg .ImageMask !=nil {_gff +="\u002f\u0049\u004d\u0020"+_bcg .ImageMask .WriteString ()+"\u000a";};if _bcg .Intent !=nil {_gff +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_bcg .Intent .WriteString ()+"\u000a";};if _bcg .Interpolate !=nil {_gff +="\u002f\u0049\u0020"+_bcg .Interpolate .WriteString ()+"\u000a";};if _bcg .Width !=nil {_gff +="\u002f\u0057\u0020"+_bcg .Width .WriteString ()+"\u000a";};_gggf .WriteString (_gff );_gggf .WriteString ("\u0049\u0044\u0020");_gggf .Write (_bcg ._dcaa );_gggf .WriteString ("\u000a\u0045\u0049\u000a");return _gggf .String ();};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bbfb *ContentCreator )Add_Tr (render int64 )*ContentCreator {_cef :=ContentStreamOperation {};_cef .Operand ="\u0054\u0072";_cef .Params =_aebaa ([]int64 {render });_bbfb ._ga =append (_bbfb ._ga ,&_cef );return _bbfb ;};func (_fad *ContentStreamProcessor )handleCommand_SC (_aace *ContentStreamOperation ,_ecce *_ee .PdfPageResources )error {_ada :=_fad ._eafa .ColorspaceStroking ;if len (_aace .Params )!=_ada .GetNumComponents (){_eeb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_eeb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aace .Params ),_ada );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_eba ,_cedd :=_ada .ColorFromPdfObjects (_aace .Params );if _cedd !=nil {return _cedd ;};_fad ._eafa .ColorStroking =_eba ;return nil ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);func (_edfc *ContentStreamParser )parseNumber ()(_da .PdfObject ,error ){return _da .ParseNumber (_edfc ._accg );};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cegeb *ContentCreator )Add_TL (leading float64 )*ContentCreator {_faa :=ContentStreamOperation {};_faa .Operand ="\u0054\u004c";_faa .Params =_bfa ([]float64 {leading });_cegeb ._ga =append (_cegeb ._ga ,&_faa );return _cegeb ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_cad *ContentCreator )Add_quote (textstr _da .PdfObjectString )*ContentCreator {_gec :=ContentStreamOperation {};_gec .Operand ="\u0027";_gec .Params =_cagd ([]_da .PdfObjectString {textstr });_cad ._ga =append (_cad ._ga ,&_gec );return _cad ;};func (_afffb *ContentStreamProcessor )handleCommand_sc (_cbcg *ContentStreamOperation ,_fbaa *_ee .PdfPageResources )error {_ffeb :=_afffb ._eafa .ColorspaceNonStroking ;if !_gfaa (_ffeb ){if len (_cbcg .Params )!=_ffeb .GetNumComponents (){_eeb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_eeb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cbcg .Params ),_ffeb );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_fged ,_daa :=_ffeb .ColorFromPdfObjects (_cbcg .Params );if _daa !=nil {return _daa ;};_afffb ._eafa .ColorNonStroking =_fged ;return nil ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_gedc HandlerConditionEnum )All ()bool {return _gedc ==HandlerConditionEnumAllOperands };func _aabcb (_bcgb _da .PdfObject )(_ee .PdfColorspace ,error ){_eegdb ,_fgba :=_bcgb .(*_da .PdfObjectArray );if !_fgba {_eeb .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_bcgb );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _eegdb .Len ()!=4{_eeb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_eegdb .Len ());return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_ffc ,_fgba :=_eegdb .Get (0).(*_da .PdfObjectName );if !_fgba {_eeb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_eegdb );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_ffc !="\u0049"&&*_ffc !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_eeb .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_ffc );return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_ffc ,_fgba =_eegdb .Get (1).(*_da .PdfObjectName );if !_fgba {_eeb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_eegdb );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_ffc !="\u0047"&&*_ffc !="\u0052\u0047\u0042"&&*_ffc !="\u0043\u004d\u0059\u004b"&&*_ffc !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_ffc !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_ffc !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_eeb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_ffc );return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_bfcd :="";switch *_ffc {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_bfcd ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_bfcd ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_bfcd ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_baae :=_da .MakeArray (_da .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_da .MakeName (_bfcd ),_eegdb .Get (2),_eegdb .Get (3));return _ee .NewPdfColorspaceFromPdfObject (_baae );};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_acc *ContentCreator )Add_g (gray float64 )*ContentCreator {_fcd :=ContentStreamOperation {};_fcd .Operand ="\u0067";_fcd .Params =_bfa ([]float64 {gray });_acc ._ga =append (_acc ._ga ,&_fcd );return _acc ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_agb *ContentStreamParser )ExtractText ()(string ,error ){_ff ,_ceg :=_agb .Parse ();if _ceg !=nil {return "",_ceg ;};_de :=false ;_df ,_ac :=float64 (-1),float64 (-1);_aa :="";for _ ,_gdg :=range *_ff {if _gdg .Operand =="\u0042\u0054"{_de =true ;}else if _gdg .Operand =="\u0045\u0054"{_de =false ;};if _gdg .Operand =="\u0054\u0064"||_gdg .Operand =="\u0054\u0044"||_gdg .Operand =="\u0054\u002a"{_aa +="\u000a";};if _gdg .Operand =="\u0054\u006d"{if len (_gdg .Params )!=6{continue ;};_bda ,_ea :=_gdg .Params [4].(*_da .PdfObjectFloat );if !_ea {_dc ,_bbf :=_gdg .Params [4].(*_da .PdfObjectInteger );if !_bbf {continue ;};_bda =_da .MakeFloat (float64 (*_dc ));};_aag ,_ea :=_gdg .Params [5].(*_da .PdfObjectFloat );if !_ea {_cee ,_cc :=_gdg .Params [5].(*_da .PdfObjectInteger );if !_cc {continue ;};_aag =_da .MakeFloat (float64 (*_cee ));};if _ac ==-1{_ac =float64 (*_aag );}else if _ac > float64 (*_aag ){_aa +="\u000a";_df =float64 (*_bda );_ac =float64 (*_aag );continue ;};if _df ==-1{_df =float64 (*_bda );}else if _df < float64 (*_bda ){_aa +="\u0009";_df =float64 (*_bda );};};if _de &&_gdg .Operand =="\u0054\u004a"{if len (_gdg .Params )< 1{continue ;};_ggb ,_bf :=_gdg .Params [0].(*_da .PdfObjectArray );if !_bf {return "",_ce .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_gdg .Params [0]);};for _ ,_fa :=range _ggb .Elements (){switch _dd :=_fa .(type ){case *_da .PdfObjectString :_aa +=_dd .Str ();case *_da .PdfObjectFloat :if *_dd < -100{_aa +="\u0020";};case *_da .PdfObjectInteger :if *_dd < -100{_aa +="\u0020";};};};}else if _de &&_gdg .Operand =="\u0054\u006a"{if len (_gdg .Params )< 1{continue ;};_cd ,_fcf :=_gdg .Params [0].(*_da .PdfObjectString );if !_fcf {return "",_ce .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_gdg .Params [0]);};_aa +=_cd .Str ();};};return _aa ,nil ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_accg *_d .Reader };var (ErrInvalidOperand =_g .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ccc *ContentCreator )Add_S ()*ContentCreator {_cbgc :=ContentStreamOperation {};_cbgc .Operand ="\u0053";_ccc ._ga =append (_ccc ._ga ,&_cbgc );return _ccc ;};

// GetColorSpace returns the colorspace of the inline image.
func (_eab *ContentStreamInlineImage )GetColorSpace (resources *_ee .PdfPageResources )(_ee .PdfColorspace ,error ){if _eab .ColorSpace ==nil {_eeb .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _ee .NewPdfColorspaceDeviceGray (),nil ;};if _edf ,_cfd :=_eab .ColorSpace .(*_da .PdfObjectArray );_cfd {return _aabcb (_edf );};_aeg ,_bgb :=_eab .ColorSpace .(*_da .PdfObjectName );if !_bgb {_eeb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_eab .ColorSpace ,_eab .ColorSpace );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_aeg =="\u0047"||*_aeg =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _ee .NewPdfColorspaceDeviceGray (),nil ;}else if *_aeg =="\u0052\u0047\u0042"||*_aeg =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _ee .NewPdfColorspaceDeviceRGB (),nil ;}else if *_aeg =="\u0043\u004d\u0059\u004b"||*_aeg =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _ee .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_aeg =="\u0049"||*_aeg =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_g .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_eeb .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_aeg );return nil ,_g .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_aeea ,_adb :=resources .GetColorspaceByName (*_aeg );if !_adb {_eeb .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_aeg );return nil ,_g .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _aeea ,nil ;};};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gad *ContentCreator )Add_Tf (fontName _da .PdfObjectName ,fontSize float64 )*ContentCreator {_gga :=ContentStreamOperation {};_gga .Operand ="\u0054\u0066";_gga .Params =_begg ([]_da .PdfObjectName {fontName });_gga .Params =append (_gga .Params ,_bfa ([]float64 {fontSize })...);_gad ._ga =append (_gad ._ga ,&_gga );return _gad ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ege *ContentCreator )Add_b_starred ()*ContentCreator {_ece :=ContentStreamOperation {};_ece .Operand ="\u0062\u002a";_ege ._ga =append (_ege ._ga ,&_ece );return _ege ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_aac *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_eecc :=ContentStreamOperation {};_eecc .Operand ="\u0054\u0044";_eecc .Params =_bfa ([]float64 {tx ,ty });_aac ._ga =append (_aac ._ga ,&_eecc );return _aac ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_bdc *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _bdc .Add_cm (1,0,0,1,tx ,ty );};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fd *ContentCreator )Add_f_starred ()*ContentCreator {_afe :=ContentStreamOperation {};_afe .Operand ="\u0066\u002a";_fd ._ga =append (_fd ._ga ,&_afe );return _fd ;};func (_baba *ContentStreamParser )parseOperand ()(*_da .PdfObjectString ,error ){var _dfa []byte ;for {_cgag ,_adf :=_baba ._accg .Peek (1);if _adf !=nil {return _da .MakeString (string (_dfa )),_adf ;};if _da .IsDelimiter (_cgag [0]){break ;};if _da .IsWhiteSpace (_cgag [0]){break ;};_efag ,_ :=_baba ._accg .ReadByte ();_dfa =append (_dfa ,_efag );};return _da .MakeString (string (_dfa )),nil ;};

// Push pushes `gs` on the `gsStack`.
func (_adde *GraphicStateStack )Push (gs GraphicsState ){*_adde =append (*_adde ,gs )};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_cbd *ContentCreator )Add_BT ()*ContentCreator {_dbd :=ContentStreamOperation {};_dbd .Operand ="\u0042\u0054";_cbd ._ga =append (_cbd ._ga ,&_dbd );return _cbd ;};func (_fgb *ContentStreamProcessor )handleCommand_g (_cbfc *ContentStreamOperation ,_fgac *_ee .PdfPageResources )error {_gbea :=_ee .NewPdfColorspaceDeviceGray ();if len (_cbfc .Params )!=_gbea .GetNumComponents (){_eeb .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_eeb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cbfc .Params ),_gbea );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dec ,_dedb :=_gbea .ColorFromPdfObjects (_cbfc .Params );if _dedb !=nil {_eeb .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_gbea ,_cbfc ,_dedb );return _dedb ;};_fgb ._eafa .ColorspaceNonStroking =_gbea ;_fgb ._eafa .ColorNonStroking =_dec ;return nil ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_ga ContentStreamOperations };

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gca *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_bfe :=ContentStreamOperation {};_bfe .Operand ="\u0053\u0043";_bfe .Params =_bfa (c );_gca ._ga =append (_gca ._ga ,&_bfe );return _gca ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dg *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_eg :=ContentStreamOperation {};_eg .Operand ="\u004d";_eg .Params =_bfa ([]float64 {miterlimit });_dg ._ga =append (_dg ._ga ,&_eg );return _dg ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_aeec *ContentStreamInlineImage )IsMask ()(bool ,error ){if _aeec .ImageMask !=nil {_gab ,_eecf :=_aeec .ImageMask .(*_da .PdfObjectBool );if !_eecf {_eeb .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_g .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_gab ),nil ;};return false ,nil ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_egb *ContentCreator )Add_i (flatness float64 )*ContentCreator {_ccg :=ContentStreamOperation {};_ccg .Operand ="\u0069";_ccg .Params =_bfa ([]float64 {flatness });_egb ._ga =append (_egb ._ga ,&_ccg );return _egb ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gdb *ContentCreator )Add_h ()*ContentCreator {_egc :=ContentStreamOperation {};_egc .Operand ="\u0068";_gdb ._ga =append (_gdb ._ga ,&_egc );return _gdb ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_deb *ContentCreator )Add_quotes (textstr _da .PdfObjectString ,aw ,ac float64 )*ContentCreator {_bffb :=ContentStreamOperation {};_bffb .Operand ="\u0022";_bffb .Params =_bfa ([]float64 {aw ,ac });_bffb .Params =append (_bffb .Params ,_cagd ([]_da .PdfObjectString {textstr })...);_deb ._ga =append (_deb ._ga ,&_bffb );return _deb ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ggg *ContentCreator )Add_s ()*ContentCreator {_cgdc :=ContentStreamOperation {};_cgdc .Operand ="\u0073";_ggg ._ga =append (_ggg ._ga ,&_cgdc );return _ggg ;};func _bae (_aeba *ContentStreamInlineImage )(*_da .DCTEncoder ,error ){_befe :=_da .NewDCTEncoder ();_gcb :=_gd .NewReader (_aeba ._dcaa );_dbg ,_dadf :=_af .DecodeConfig (_gcb );if _dadf !=nil {_eeb .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_dadf );return nil ,_dadf ;};switch _dbg .ColorModel {case _e .RGBAModel :_befe .BitsPerComponent =8;_befe .ColorComponents =3;case _e .RGBA64Model :_befe .BitsPerComponent =16;_befe .ColorComponents =3;case _e .GrayModel :_befe .BitsPerComponent =8;_befe .ColorComponents =1;case _e .Gray16Model :_befe .BitsPerComponent =16;_befe .ColorComponents =1;case _e .CMYKModel :_befe .BitsPerComponent =8;_befe .ColorComponents =4;case _e .YCbCrModel :_befe .BitsPerComponent =8;_befe .ColorComponents =3;default:return nil ,_g .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_befe .Width =_dbg .Width ;_befe .Height =_dbg .Height ;_eeb .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_befe );return _befe ,nil ;};func (_cegd *ContentStreamInlineImage )toImageBase (_gcf *_ee .PdfPageResources )(*_ae .ImageBase ,error ){if _cegd ._ded !=nil {return _cegd ._ded ,nil ;};_gece :=_ae .ImageBase {};if _cegd .Height ==nil {return nil ,_g .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_bebb ,_ffg :=_cegd .Height .(*_da .PdfObjectInteger );if !_ffg {return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_gece .Height =int (*_bebb );if _cegd .Width ==nil {return nil ,_g .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_acd ,_ffg :=_cegd .Width .(*_da .PdfObjectInteger );if !_ffg {return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_gece .Width =int (*_acd );_bab ,_egd :=_cegd .IsMask ();if _egd !=nil {return nil ,_egd ;};if _bab {_gece .BitsPerComponent =1;_gece .ColorComponents =1;}else {if _cegd .BitsPerComponent ==nil {_eeb .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_gece .BitsPerComponent =8;}else {_fagf ,_gbb :=_cegd .BitsPerComponent .(*_da .PdfObjectInteger );if !_gbb {_eeb .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cegd .BitsPerComponent );return nil ,_g .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_gece .BitsPerComponent =int (*_fagf );};if _cegd .ColorSpace !=nil {_befd ,_cff :=_cegd .GetColorSpace (_gcf );if _cff !=nil {return nil ,_cff ;};_gece .ColorComponents =_befd .GetNumComponents ();}else {_eeb .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_gece .ColorComponents =1;};};if _fga ,_ccgg :=_da .GetArray (_cegd .Decode );_ccgg {_gece .Decode ,_egd =_fga .ToFloat64Array ();if _egd !=nil {return nil ,_egd ;};};_cegd ._ded =&_gece ;return _cegd ._ded ,nil ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aef *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_bfb :=ContentStreamOperation {};_bfb .Operand ="\u006d";_bfb .Params =_bfa ([]float64 {x ,y });_aef ._ga =append (_aef ._ga ,&_bfb );return _aef ;};func _cagd (_fbf []_da .PdfObjectString )[]_da .PdfObject {var _ebe []_da .PdfObject ;for _ ,_befee :=range _fbf {_ebe =append (_ebe ,_da .MakeString (_befee .Str ()));};return _ebe ;};func (_deac *ContentStreamProcessor )handleCommand_cm (_ebdd *ContentStreamOperation ,_gcg *_ee .PdfPageResources )error {if len (_ebdd .Params )!=6{_eeb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_ebdd .Params ));return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_facd ,_bbd :=_da .GetNumbersAsFloat (_ebdd .Params );if _bbd !=nil {return _bbd ;};_eag :=_bb .NewMatrix (_facd [0],_facd [1],_facd [2],_facd [3],_facd [4],_facd [5]);_deac ._eafa .CTM .Concat (_eag );return nil ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dad *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_gf :=ContentStreamOperation {};_gf .Operand ="\u0052\u0047";_gf .Params =_bfa ([]float64 {r ,g ,b });_dad ._ga =append (_dad ._ga ,&_gf );return _dad ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_dcb *ContentCreator )SetNonStrokingColor (color _ee .PdfColor )*ContentCreator {switch _cgdb :=color .(type ){case *_ee .PdfColorDeviceGray :_dcb .Add_g (_cgdb .Val ());case *_ee .PdfColorDeviceRGB :_dcb .Add_rg (_cgdb .R (),_cgdb .G (),_cgdb .B ());case *_ee .PdfColorDeviceCMYK :_dcb .Add_k (_cgdb .C (),_cgdb .M (),_cgdb .Y (),_cgdb .K ());default:_eeb .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_cgdb );};return _dcb ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ccf *ContentCreator )Add_cs (name _da .PdfObjectName )*ContentCreator {_cfa :=ContentStreamOperation {};_cfa .Operand ="\u0063\u0073";_cfa .Params =_begg ([]_da .PdfObjectName {name });_ccf ._ga =append (_ccf ._ga ,&_cfa );return _ccf ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_dgce *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _dgce .CTM .Transform (x ,y );};

// Parse parses all commands in content stream, returning a list of operation data.
func (_gfd *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_gfab :=ContentStreamOperations {};for {_fda :=ContentStreamOperation {};for {_bgbc ,_bfed ,_gdbd :=_gfd .parseObject ();if _gdbd !=nil {if _gdbd ==_gb .EOF {return &_gfab ,nil ;};return &_gfab ,_gdbd ;};if _bfed {_fda .Operand ,_ =_da .GetStringVal (_bgbc );_gfab =append (_gfab ,&_fda );break ;}else {_fda .Params =append (_fda .Params ,_bgbc );};};if _fda .Operand =="\u0042\u0049"{_fea ,_dgd :=_gfd .ParseInlineImage ();if _dgd !=nil {return &_gfab ,_dgd ;};_fda .Params =append (_fda .Params ,_fea );};};};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cec *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_cbb :=ContentStreamOperation {};_cbb .Operand ="\u0054\u0064";_cbb .Params =_bfa ([]float64 {tx ,ty });_cec ._ga =append (_cec ._ga ,&_cbb );return _cec ;};func _bfa (_fafc []float64 )[]_da .PdfObject {var _eeaa []_da .PdfObject ;for _ ,_fef :=range _fafc {_eeaa =append (_eeaa ,_da .MakeFloat (_fef ));};return _eeaa ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_beb *ContentCreator )Add_W ()*ContentCreator {_dage :=ContentStreamOperation {};_dage .Operand ="\u0057";_beb ._ga =append (_beb ._ga ,&_dage );return _beb ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_efab *ContentCreator )Add_f ()*ContentCreator {_bdg :=ContentStreamOperation {};_bdg .Operand ="\u0066";_efab ._ga =append (_efab ._ga ,&_bdg );return _efab ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_fg *ContentCreator )Add_ET ()*ContentCreator {_ge :=ContentStreamOperation {};_ge .Operand ="\u0045\u0054";_fg ._ga =append (_fg ._ga ,&_ge );return _fg ;};func (_cce *ContentStreamProcessor )handleCommand_SCN (_cdd *ContentStreamOperation ,_babd *_ee .PdfPageResources )error {_aaba :=_cce ._eafa .ColorspaceStroking ;if !_gfaa (_aaba ){if len (_cdd .Params )!=_aaba .GetNumComponents (){_eeb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_eeb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cdd .Params ),_aaba );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_bdfd ,_agaa :=_aaba .ColorFromPdfObjects (_cdd .Params );if _agaa !=nil {return _agaa ;};_cce ._eafa .ColorStroking =_bdfd ;return nil ;};func _gdc (_fb *ContentStreamInlineImage )(_da .StreamEncoder ,error ){if _fb .Filter ==nil {return _da .NewRawEncoder (),nil ;};_fegf ,_aea :=_fb .Filter .(*_da .PdfObjectName );if !_aea {_ceeg ,_bgd :=_fb .Filter .(*_da .PdfObjectArray );if !_bgd {return nil ,_ce .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _ceeg .Len ()==0{return _da .NewRawEncoder (),nil ;};if _ceeg .Len ()!=1{_dade ,_daf :=_cbaf (_fb );if _daf !=nil {_eeb .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_daf );return nil ,_daf ;};_eeb .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_dade );return _dade ,nil ;};_dff :=_ceeg .Get (0);_fegf ,_bgd =_dff .(*_da .PdfObjectName );if !_bgd {return nil ,_ce .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_fegf {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _da .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _da .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _bae (_fb );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _ceec (_fb ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _dba (_fb ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _da .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _da .NewRunLengthEncoder (),nil ;default:_eeb .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_fegf );return nil ,_g .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};func (_cfaf *ContentStreamParser )parseObject ()(_cdg _da .PdfObject ,_cefd bool ,_gdag error ){_cfaf .skipSpaces ();for {_ggfb ,_bggb :=_cfaf ._accg .Peek (2);if _bggb !=nil {return nil ,false ,_bggb ;};_eeb .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_ggfb ));if _ggfb [0]=='%'{_cfaf .skipComments ();continue ;}else if _ggfb [0]=='/'{_gbg ,_bfbb :=_cfaf .parseName ();_eeb .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_gbg );return &_gbg ,false ,_bfbb ;}else if _ggfb [0]=='('{_eeb .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_feaa ,_ebb :=_cfaf .parseString ();return _feaa ,false ,_ebb ;}else if _ggfb [0]=='<'&&_ggfb [1]!='<'{_eeb .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_agbf ,_ffba :=_cfaf .parseHexString ();return _agbf ,false ,_ffba ;}else if _ggfb [0]=='['{_eeb .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_fbbb ,_cfe :=_cfaf .parseArray ();return _fbbb ,false ,_cfe ;}else if _da .IsFloatDigit (_ggfb [0])||(_ggfb [0]=='-'&&_da .IsFloatDigit (_ggfb [1])){_eeb .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_bdf ,_afbe :=_cfaf .parseNumber ();return _bdf ,false ,_afbe ;}else if _ggfb [0]=='<'&&_ggfb [1]=='<'{_eecd ,_add :=_cfaf .parseDict ();return _eecd ,false ,_add ;}else {_eeb .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_ggfb ,_ =_cfaf ._accg .Peek (5);_fce :=string (_ggfb );_eeb .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_fce );if (len (_fce )> 3)&&(_fce [:4]=="\u006e\u0075\u006c\u006c"){_ffbab ,_dcf :=_cfaf .parseNull ();return &_ffbab ,false ,_dcf ;}else if (len (_fce )> 4)&&(_fce [:5]=="\u0066\u0061\u006cs\u0065"){_aege ,_ecea :=_cfaf .parseBool ();return &_aege ,false ,_ecea ;}else if (len (_fce )> 3)&&(_fce [:4]=="\u0074\u0072\u0075\u0065"){_fcef ,_ecg :=_cfaf .parseBool ();return &_fcef ,false ,_ecg ;};_baeb ,_eadc :=_cfaf .parseOperand ();if _eadc !=nil {return _baeb ,false ,_eadc ;};if len (_baeb .String ())< 1{return _baeb ,false ,ErrInvalidOperand ;};return _baeb ,true ,nil ;};};};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_cda *ContentCreator )Bytes ()[]byte {return _cda ._ga .Bytes ()};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _ee .PdfColorspace ;ColorspaceNonStroking _ee .PdfColorspace ;ColorStroking _ee .PdfColor ;ColorNonStroking _ee .PdfColor ;CTM _bb .Matrix ;};func (_eegd *ContentStreamProcessor )getInitialColor (_dga _ee .PdfColorspace )(_ee .PdfColor ,error ){switch _fba :=_dga .(type ){case *_ee .PdfColorspaceDeviceGray :return _ee .NewPdfColorDeviceGray (0.0),nil ;case *_ee .PdfColorspaceDeviceRGB :return _ee .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_ee .PdfColorspaceDeviceCMYK :return _ee .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_ee .PdfColorspaceCalGray :return _ee .NewPdfColorCalGray (0.0),nil ;case *_ee .PdfColorspaceCalRGB :return _ee .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_ee .PdfColorspaceLab :_egg :=0.0;_cgagc :=0.0;_bdaf :=0.0;if _fba .Range [0]> 0{_egg =_fba .Range [0];};if _fba .Range [2]> 0{_cgagc =_fba .Range [2];};return _ee .NewPdfColorLab (_egg ,_cgagc ,_bdaf ),nil ;case *_ee .PdfColorspaceICCBased :if _fba .Alternate ==nil {_eeb .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_fba .N );if _fba .N ==1{_eeb .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _eegd .getInitialColor (_ee .NewPdfColorspaceDeviceGray ());}else if _fba .N ==3{_eeb .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _eegd .getInitialColor (_ee .NewPdfColorspaceDeviceRGB ());}else if _fba .N ==4{_eeb .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _eegd .getInitialColor (_ee .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_g .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _eegd .getInitialColor (_fba .Alternate );case *_ee .PdfColorspaceSpecialIndexed :if _fba .Base ==nil {return nil ,_g .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _eegd .getInitialColor (_fba .Base );case *_ee .PdfColorspaceSpecialSeparation :if _fba .AlternateSpace ==nil {return nil ,_g .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _eegd .getInitialColor (_fba .AlternateSpace );case *_ee .PdfColorspaceDeviceN :if _fba .AlternateSpace ==nil {return nil ,_g .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _eegd .getInitialColor (_fba .AlternateSpace );case *_ee .PdfColorspaceSpecialPattern :return nil ,nil ;};_eeb .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_dga );return nil ,_g .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_ddbc *ContentStreamProcessor )Process (resources *_ee .PdfPageResources )error {_ddbc ._eafa .ColorspaceStroking =_ee .NewPdfColorspaceDeviceGray ();_ddbc ._eafa .ColorspaceNonStroking =_ee .NewPdfColorspaceDeviceGray ();_ddbc ._eafa .ColorStroking =_ee .NewPdfColorDeviceGray (0);_ddbc ._eafa .ColorNonStroking =_ee .NewPdfColorDeviceGray (0);_ddbc ._eafa .CTM =_bb .IdentityMatrix ();for _ ,_bfbd :=range _ddbc ._ddf {var _cfdb error ;switch _bfbd .Operand {case "\u0071":_ddbc ._bggd .Push (_ddbc ._eafa );case "\u0051":if len (_ddbc ._bggd )==0{_eeb .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_ddbc ._eafa =_ddbc ._bggd .Pop ();case "\u0043\u0053":_cfdb =_ddbc .handleCommand_CS (_bfbd ,resources );case "\u0063\u0073":_cfdb =_ddbc .handleCommand_cs (_bfbd ,resources );case "\u0053\u0043":_cfdb =_ddbc .handleCommand_SC (_bfbd ,resources );case "\u0053\u0043\u004e":_cfdb =_ddbc .handleCommand_SCN (_bfbd ,resources );case "\u0073\u0063":_cfdb =_ddbc .handleCommand_sc (_bfbd ,resources );case "\u0073\u0063\u006e":_cfdb =_ddbc .handleCommand_scn (_bfbd ,resources );case "\u0047":_cfdb =_ddbc .handleCommand_G (_bfbd ,resources );case "\u0067":_cfdb =_ddbc .handleCommand_g (_bfbd ,resources );case "\u0052\u0047":_cfdb =_ddbc .handleCommand_RG (_bfbd ,resources );case "\u0072\u0067":_cfdb =_ddbc .handleCommand_rg (_bfbd ,resources );case "\u004b":_cfdb =_ddbc .handleCommand_K (_bfbd ,resources );case "\u006b":_cfdb =_ddbc .handleCommand_k (_bfbd ,resources );case "\u0063\u006d":_cfdb =_ddbc .handleCommand_cm (_bfbd ,resources );};if _cfdb !=nil {_eeb .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_bfbd .Operand ,_cfdb );_eeb .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_bfbd .Operand );return _cfdb ;};for _ ,_afdc :=range _ddbc ._dbce {var _caea error ;if _afdc .Condition .All (){_caea =_afdc .Handler (_bfbd ,_ddbc ._eafa ,resources );}else if _afdc .Condition .Operand ()&&_bfbd .Operand ==_afdc .Operand {_caea =_afdc .Handler (_bfbd ,_ddbc ._eafa ,resources );};if _caea !=nil {_eeb .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_caea );return _caea ;};};};return nil ;};