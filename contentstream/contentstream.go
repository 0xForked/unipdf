//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_gg "bufio";_fd "bytes";_gb "encoding/hex";_f "errors";_d "fmt";_cb "github.com/unidoc/unipdf/v3/common";_ad "github.com/unidoc/unipdf/v3/core";_add "github.com/unidoc/unipdf/v3/internal/imageutil";_gc "github.com/unidoc/unipdf/v3/internal/transform";
_fc "github.com/unidoc/unipdf/v3/model";_a "image/color";_ce "image/jpeg";_c "io";_cf "math";_g "strconv";);

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_fg *ContentStreamOperations )Bytes ()[]byte {var _fbc _fd .Buffer ;for _ ,_ca :=range *_fg {if _ca ==nil {continue ;};if _ca .Operand =="\u0042\u0049"{_fbc .WriteString (_ca .Operand +"\u000a");_fbc .WriteString (_ca .Params [0].WriteString ());
}else {for _ ,_fgd :=range _ca .Params {_fbc .WriteString (_fgd .WriteString ());_fbc .WriteString ("\u0020");};_fbc .WriteString (_ca .Operand +"\u000a");};};return _fbc .Bytes ();};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_egd *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_dad :=ContentStreamOperation {};_dad .Operand ="\u0072\u0065";_dad .Params =_ggbce ([]float64 {x ,y ,width ,height });_egd ._efa =append (_egd ._efa ,&_dad );return _egd ;
};func _gbcb (_ceg *ContentStreamInlineImage ,_bge *_ad .PdfObjectDictionary )(*_ad .FlateEncoder ,error ){_ccb :=_ad .NewFlateEncoder ();if _ceg ._geea !=nil {_ccb .SetImage (_ceg ._geea );};if _bge ==nil {_cbgc :=_ceg .DecodeParms ;if _cbgc !=nil {_cbec ,_aea :=_ad .GetDict (_cbgc );
if !_aea {_cb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_cbgc );return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");
};_bge =_cbec ;};};if _bge ==nil {return _ccb ,nil ;};_cb .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_bge .String ());_bcef :=_bge .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");
if _bcef ==nil {_cb .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");
}else {_eafea ,_effe :=_bcef .(*_ad .PdfObjectInteger );if !_effe {_cb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_bcef );
return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_ccb .Predictor =int (*_eafea );};_bcef =_bge .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _bcef !=nil {_aaefa ,_ebc :=_bcef .(*_ad .PdfObjectInteger );if !_ebc {_cb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_d .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_ccb .BitsPerComponent =int (*_aaefa );};if _ccb .Predictor > 1{_ccb .Columns =1;_bcef =_bge .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _bcef !=nil {_cfd ,_eda :=_bcef .(*_ad .PdfObjectInteger );if !_eda {return nil ,_d .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_ccb .Columns =int (*_cfd );
};_ccb .Colors =1;_gff :=_bge .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _gff !=nil {_ffd ,_cbgg :=_gff .(*_ad .PdfObjectInteger );if !_cbgg {return nil ,_d .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_ccb .Colors =int (*_ffd );};};return _ccb ,nil ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_adgg *ContentCreator )Add_f ()*ContentCreator {_bga :=ContentStreamOperation {};_bga .Operand ="\u0066";_adgg ._efa =append (_adgg ._efa ,&_bga );return _adgg ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bccc *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_eff :=ContentStreamOperation {};_eff .Operand ="\u0054\u0064";_eff .Params =_ggbce ([]float64 {tx ,ty });_bccc ._efa =append (_bccc ._efa ,&_eff );return _bccc ;};type handlerEntry struct{Condition HandlerConditionEnum ;
Operand string ;Handler HandlerFunc ;};func (_dfd *ContentStreamInlineImage )toImageBase (_fda *_fc .PdfPageResources )(*_add .ImageBase ,error ){if _dfd ._geea !=nil {return _dfd ._geea ,nil ;};_gfcd :=_add .ImageBase {};if _dfd .Height ==nil {return nil ,_f .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_dec ,_cbaa :=_dfd .Height .(*_ad .PdfObjectInteger );if !_cbaa {return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_gfcd .Height =int (*_dec );if _dfd .Width ==nil {return nil ,_f .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_eed ,_cbaa :=_dfd .Width .(*_ad .PdfObjectInteger );if !_cbaa {return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_gfcd .Width =int (*_eed );_acf ,_cag :=_dfd .IsMask ();if _cag !=nil {return nil ,_cag ;
};if _acf {_gfcd .BitsPerComponent =1;_gfcd .ColorComponents =1;}else {if _dfd .BitsPerComponent ==nil {_cb .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");
_gfcd .BitsPerComponent =8;}else {_gaf ,_bbf :=_dfd .BitsPerComponent .(*_ad .PdfObjectInteger );if !_bbf {_cb .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_dfd .BitsPerComponent );
return nil ,_f .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_gfcd .BitsPerComponent =int (*_gaf );};if _dfd .ColorSpace !=nil {_cgfg ,_cgc :=_dfd .GetColorSpace (_fda );if _cgc !=nil {return nil ,_cgc ;};_gfcd .ColorComponents =_cgfg .GetNumComponents ();
}else {_cb .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
_gfcd .ColorComponents =1;};};if _bgcb ,_gea :=_ad .GetArray (_dfd .Decode );_gea {_gfcd .Decode ,_cag =_bgcb .ToFloat64Array ();if _cag !=nil {return nil ,_cag ;};};_dfd ._geea =&_gfcd ;return _dfd ._geea ,nil ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_caee *ContentCreator )Add_n ()*ContentCreator {_ed :=ContentStreamOperation {};_ed .Operand ="\u006e";_caee ._efa =append (_caee ._efa ,&_ed );return _caee ;};func (_ddf *ContentStreamParser )parseArray ()(*_ad .PdfObjectArray ,error ){_bac :=_ad .MakeArray ();
_ddf ._dbbe .ReadByte ();for {_ddf .skipSpaces ();_eceg ,_bebg :=_ddf ._dbbe .Peek (1);if _bebg !=nil {return _bac ,_bebg ;};if _eceg [0]==']'{_ddf ._dbbe .ReadByte ();break ;};_aaefg ,_ ,_bebg :=_ddf .parseObject ();if _bebg !=nil {return _bac ,_bebg ;
};_bac .Append (_aaefg );};return _bac ,nil ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_afc *ContentCreator )Add_sh (name _ad .PdfObjectName )*ContentCreator {_dbcb :=ContentStreamOperation {};_dbcb .Operand ="\u0073\u0068";_dbcb .Params =_cbgce ([]_ad .PdfObjectName {name });_afc ._efa =append (_afc ._efa ,&_dbcb );return _afc ;};


// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_aag HandlerConditionEnum )All ()bool {return _aag ==HandlerConditionEnumAllOperands };

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fdb *ContentCreator )Add_g (gray float64 )*ContentCreator {_fgg :=ContentStreamOperation {};_fgg .Operand ="\u0067";_fgg .Params =_ggbce ([]float64 {gray });_fdb ._efa =append (_fdb ._efa ,&_fgg );return _fdb ;};func (_fafa *ContentStreamParser )parseNumber ()(_ad .PdfObject ,error ){return _ad .ParseNumber (_fafa ._dbbe );
};func (_gbgg *ContentStreamParser )parseName ()(_ad .PdfObjectName ,error ){_bccb :="";_bbbb :=false ;for {_agfa ,_aeab :=_gbgg ._dbbe .Peek (1);if _aeab ==_c .EOF {break ;};if _aeab !=nil {return _ad .PdfObjectName (_bccb ),_aeab ;};if !_bbbb {if _agfa [0]=='/'{_bbbb =true ;
_gbgg ._dbbe .ReadByte ();}else {_cb .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_agfa ,_agfa );return _ad .PdfObjectName (_bccb ),_d .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_agfa [0]);
};}else {if _ad .IsWhiteSpace (_agfa [0]){break ;}else if (_agfa [0]=='/')||(_agfa [0]=='[')||(_agfa [0]=='(')||(_agfa [0]==']')||(_agfa [0]=='<')||(_agfa [0]=='>'){break ;}else if _agfa [0]=='#'{_bceg ,_bae :=_gbgg ._dbbe .Peek (3);if _bae !=nil {return _ad .PdfObjectName (_bccb ),_bae ;
};_gbgg ._dbbe .Discard (3);_cgcb ,_bae :=_gb .DecodeString (string (_bceg [1:3]));if _bae !=nil {return _ad .PdfObjectName (_bccb ),_bae ;};_bccb +=string (_cgcb );}else {_gcea ,_ :=_gbgg ._dbbe .ReadByte ();_bccb +=string (_gcea );};};};return _ad .PdfObjectName (_bccb ),nil ;
};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_cdcd *ContentStreamInlineImage )ToImage (resources *_fc .PdfPageResources )(*_fc .Image ,error ){_gfe ,_gce :=_cdcd .toImageBase (resources );if _gce !=nil {return nil ,_gce ;};_geae ,_gce :=_cdc (_cdcd );if _gce !=nil {return nil ,_gce ;};_cb .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_geae ,_geae );
_cb .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_cdcd );_gbe ,_gce :=_geae .DecodeBytes (_cdcd ._dcbc );if _gce !=nil {return nil ,_gce ;};_bcba :=&_fc .Image {Width :int64 (_gfe .Width ),Height :int64 (_gfe .Height ),BitsPerComponent :int64 (_gfe .BitsPerComponent ),ColorComponents :_gfe .ColorComponents ,Data :_gbe };
if len (_gfe .Decode )> 0{for _dda :=0;_dda < len (_gfe .Decode );_dda ++{_gfe .Decode [_dda ]*=float64 ((int (1)<<uint (_gfe .BitsPerComponent ))-1);};_bcba .SetDecode (_gfe .Decode );};return _bcba ,nil ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_dd :=&ContentCreator {};_dd ._efa =ContentStreamOperations {};return _dd ;};func _bgb (_gac *ContentStreamInlineImage )(*_ad .MultiEncoder ,error ){_baf :=_ad .NewMultiEncoder ();var _deb *_ad .PdfObjectDictionary ;
var _dfg []_ad .PdfObject ;if _afag :=_gac .DecodeParms ;_afag !=nil {_adb ,_fdg :=_afag .(*_ad .PdfObjectDictionary );if _fdg {_deb =_adb ;};_aada ,_efde :=_afag .(*_ad .PdfObjectArray );if _efde {for _ ,_dcb :=range _aada .Elements (){if _dcde ,_bdc :=_dcb .(*_ad .PdfObjectDictionary );
_bdc {_dfg =append (_dfg ,_dcde );}else {_dfg =append (_dfg ,nil );};};};};_cfef :=_gac .Filter ;if _cfef ==nil {return nil ,_d .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_gdfg ,_aec :=_cfef .(*_ad .PdfObjectArray );
if !_aec {return nil ,_d .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _bgcg ,_fecd :=range _gdfg .Elements (){_abab ,_eea :=_fecd .(*_ad .PdfObjectName );
if !_eea {return nil ,_d .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _ade _ad .PdfObject ;
if _deb !=nil {_ade =_deb ;}else {if len (_dfg )> 0{if _bgcg >=len (_dfg ){return nil ,_d .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");
};_ade =_dfg [_bgcg ];};};var _gdc *_ad .PdfObjectDictionary ;if _bbd ,_aef :=_ade .(*_ad .PdfObjectDictionary );_aef {_gdc =_bbd ;};if *_abab ==_ad .StreamEncodingFilterNameFlate ||*_abab =="\u0046\u006c"{_dgc ,_gfc :=_gbcb (_gac ,_gdc );if _gfc !=nil {return nil ,_gfc ;
};_baf .AddEncoder (_dgc );}else if *_abab ==_ad .StreamEncodingFilterNameLZW {_abag ,_fdd :=_edg (_gac ,_gdc );if _fdd !=nil {return nil ,_fdd ;};_baf .AddEncoder (_abag );}else if *_abab ==_ad .StreamEncodingFilterNameASCIIHex {_fgf :=_ad .NewASCIIHexEncoder ();
_baf .AddEncoder (_fgf );}else if *_abab ==_ad .StreamEncodingFilterNameASCII85 ||*_abab =="\u0041\u0038\u0035"{_gbcf :=_ad .NewASCII85Encoder ();_baf .AddEncoder (_gbcf );}else {_cb .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_abab );
return nil ,_d .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _baf ,nil ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_acga *ContentCreator )Add_q ()*ContentCreator {_cad :=ContentStreamOperation {};_cad .Operand ="\u0071";_acga ._efa =append (_acga ._efa ,&_cad );return _acga ;};func _edba (_fccb []int64 )[]_ad .PdfObject {var _cfcf []_ad .PdfObject ;for _ ,_cfa :=range _fccb {_cfcf =append (_cfcf ,_ad .MakeInteger (_cfa ));
};return _cfcf ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bbc *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_eaf :=ContentStreamOperation {};_eaf .Operand ="\u0064";_eaf .Params =[]_ad .PdfObject {};_eaf .Params =append (_eaf .Params ,_ad .MakeArrayFromIntegers64 (dashArray ));
_eaf .Params =append (_eaf .Params ,_ad .MakeInteger (dashPhase ));_bbc ._efa =append (_bbc ._efa ,&_eaf );return _bbc ;};func (_bfgf *ContentStreamProcessor )handleCommand_SCN (_edde *ContentStreamOperation ,_fbe *_fc .PdfPageResources )error {_bea :=_bfgf ._aca .ColorspaceStroking ;
if !_geaa (_bea ){if len (_edde .Params )!=_bea .GetNumComponents (){_cb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_cb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_edde .Params ),_bea );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_cbbe ,_dggb :=_bea .ColorFromPdfObjects (_edde .Params );if _dggb !=nil {return _dggb ;};_bfgf ._aca .ColorStroking =_cbbe ;return nil ;};func (_ccbdc *ContentStreamParser )parseObject ()(_fddd _ad .PdfObject ,_cdfg bool ,_afb error ){_ccbdc .skipSpaces ();
for {_dfa ,_eadd :=_ccbdc ._dbbe .Peek (2);if _eadd !=nil {return nil ,false ,_eadd ;};_cb .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_dfa ));if _dfa [0]=='%'{_ccbdc .skipComments ();continue ;
}else if _dfa [0]=='/'{_cab ,_fdae :=_ccbdc .parseName ();_cb .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_cab );return &_cab ,false ,_fdae ;}else if _dfa [0]=='('{_cb .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");
_gcca ,_aeaf :=_ccbdc .parseString ();return _gcca ,false ,_aeaf ;}else if _dfa [0]=='<'&&_dfa [1]!='<'{_cb .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_abdb ,_ccce :=_ccbdc .parseHexString ();return _abdb ,false ,_ccce ;
}else if _dfa [0]=='['{_cb .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_fgbe ,_cgd :=_ccbdc .parseArray ();return _fgbe ,false ,_cgd ;}else if _ad .IsFloatDigit (_dfa [0])||(_dfa [0]=='-'&&_ad .IsFloatDigit (_dfa [1])){_cb .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_dbed ,_bcg :=_ccbdc .parseNumber ();return _dbed ,false ,_bcg ;}else if _dfa [0]=='<'&&_dfa [1]=='<'{_dfbc ,_bbg :=_ccbdc .parseDict ();return _dfbc ,false ,_bbg ;}else {_cb .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");
_dfa ,_ =_ccbdc ._dbbe .Peek (5);_bdba :=string (_dfa );_cb .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_bdba );if (len (_bdba )> 3)&&(_bdba [:4]=="\u006e\u0075\u006c\u006c"){_cbcb ,_dcdb :=_ccbdc .parseNull ();
return &_cbcb ,false ,_dcdb ;}else if (len (_bdba )> 4)&&(_bdba [:5]=="\u0066\u0061\u006cs\u0065"){_dff ,_becg :=_ccbdc .parseBool ();return &_dff ,false ,_becg ;}else if (len (_bdba )> 3)&&(_bdba [:4]=="\u0074\u0072\u0075\u0065"){_agg ,_cgg :=_ccbdc .parseBool ();
return &_agg ,false ,_cgg ;};_gagc ,_egeg :=_ccbdc .parseOperand ();if _egeg !=nil {return _gagc ,false ,_egeg ;};if len (_gagc .String ())< 1{return _gagc ,false ,ErrInvalidOperand ;};return _gagc ,true ,nil ;};};};

// GetEncoder returns the encoder of the inline image.
func (_ddc *ContentStreamInlineImage )GetEncoder ()(_ad .StreamEncoder ,error ){return _cdc (_ddc )};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_cde *ContentCreator )Add_BT ()*ContentCreator {_affg :=ContentStreamOperation {};_affg .Operand ="\u0042\u0054";_cde ._efa =append (_cde ._efa ,&_affg );return _cde ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bgac *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_ecgb :=ContentStreamOperation {};_ecgb .Operand ="\u0054\u0077";_ecgb .Params =_ggbce ([]float64 {wordSpace });_bgac ._efa =append (_bgac ._efa ,&_ecgb );return _bgac ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_caae *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_gccc :=ContentStreamInlineImage {};for {_caae .skipSpaces ();_fade ,_gbbd ,_eafed :=_caae .parseObject ();if _eafed !=nil {return nil ,_eafed ;};if !_gbbd {_bfg ,_beb :=_ad .GetName (_fade );
if !_beb {_cb .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_fade );
return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_fade );
};_bba ,_faf ,_dgfd :=_caae .parseObject ();if _dgfd !=nil {return nil ,_dgfd ;};if _faf {return nil ,_d .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};switch *_bfg {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_gccc .BitsPerComponent =_bba ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_gccc .ColorSpace =_bba ;
case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_gccc .Decode =_bba ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_gccc .DecodeParms =_bba ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_gccc .Filter =_bba ;
case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_gccc .Height =_bba ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_gccc .ImageMask =_bba ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_gccc .Intent =_bba ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_gccc .Interpolate =_bba ;
case "\u0057","\u0057\u0069\u0064t\u0068":_gccc .Width =_bba ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_cb .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_bfg );
default:return nil ,_d .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_bfg );};};if _gbbd {_bbfa ,_efab :=_fade .(*_ad .PdfObjectString );
if !_efab {return nil ,_d .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};if _bbfa .Str ()=="\u0045\u0049"{_cb .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_gccc ,nil ;}else if _bbfa .Str ()=="\u0049\u0044"{_cb .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");
_feeg ,_bbe :=_caae ._dbbe .Peek (1);if _bbe !=nil {return nil ,_bbe ;};if _ad .IsWhiteSpace (_feeg [0]){_caae ._dbbe .Discard (1);};_gccc ._dcbc =[]byte {};_bgca :=0;var _dgcd []byte ;for {_ffdd ,_gca :=_caae ._dbbe .ReadByte ();if _gca !=nil {_cb .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");
return nil ,_gca ;};if _bgca ==0{if _ad .IsWhiteSpace (_ffdd ){_dgcd =[]byte {};_dgcd =append (_dgcd ,_ffdd );_bgca =1;}else if _ffdd =='E'{_dgcd =append (_dgcd ,_ffdd );_bgca =2;}else {_gccc ._dcbc =append (_gccc ._dcbc ,_ffdd );};}else if _bgca ==1{_dgcd =append (_dgcd ,_ffdd );
if _ffdd =='E'{_bgca =2;}else {_gccc ._dcbc =append (_gccc ._dcbc ,_dgcd ...);_dgcd =[]byte {};if _ad .IsWhiteSpace (_ffdd ){_bgca =1;}else {_bgca =0;};};}else if _bgca ==2{_dgcd =append (_dgcd ,_ffdd );if _ffdd =='I'{_bgca =3;}else {_gccc ._dcbc =append (_gccc ._dcbc ,_dgcd ...);
_dgcd =[]byte {};_bgca =0;};}else if _bgca ==3{_dgcd =append (_dgcd ,_ffdd );if _ad .IsWhiteSpace (_ffdd ){_bfbb ,_cge :=_caae ._dbbe .Peek (20);if _cge !=nil &&_cge !=_c .EOF {return nil ,_cge ;};_gdfb :=NewContentStreamParser (string (_bfbb ));_gadc :=true ;
for _ccd :=0;_ccd < 3;_ccd ++{_ccc ,_gcf ,_dfdf :=_gdfb .parseObject ();if _dfdf !=nil {if _dfdf ==_c .EOF {break ;};continue ;};if _gcf &&!_dgfdg (_ccc .String ()){_gadc =false ;break ;};};if _gadc {if len (_gccc ._dcbc )> 100{_cb .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_gccc ._dcbc ),_gccc ._dcbc [:100]);
}else {_cb .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_gccc ._dcbc ),_gccc ._dcbc );};return &_gccc ,nil ;};};_gccc ._dcbc =append (_gccc ._dcbc ,_dgcd ...);
_dgcd =[]byte {};_bgca =0;};};};};};};func (_dagg *ContentStreamProcessor )handleCommand_CS (_gdg *ContentStreamOperation ,_dffg *_fc .PdfPageResources )error {if len (_gdg .Params )< 1{_cb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _f .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_gdg .Params )> 1{_cb .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _f .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_edad ,_bcccf :=_gdg .Params [0].(*_ad .PdfObjectName );if !_bcccf {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_agfe ,_cdeb :=_dagg .getColorspace (string (*_edad ),_dffg );if _cdeb !=nil {return _cdeb ;};_dagg ._aca .ColorspaceStroking =_agfe ;_dgdf ,_cdeb :=_dagg .getInitialColor (_agfe );
if _cdeb !=nil {return _cdeb ;};_dagg ._aca .ColorStroking =_dgdf ;return nil ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gag *ContentCreator )Add_scn_pattern (name _ad .PdfObjectName ,c ...float64 )*ContentCreator {_cbg :=ContentStreamOperation {};_cbg .Operand ="\u0073\u0063\u006e";_cbg .Params =_ggbce (c );_cbg .Params =append (_cbg .Params ,_ad .MakeName (string (name )));
_gag ._efa =append (_gag ._efa ,&_cbg );return _gag ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_eafe *ContentCreator )SetNonStrokingColor (color _fc .PdfColor )*ContentCreator {switch _gec :=color .(type ){case *_fc .PdfColorDeviceGray :_eafe .Add_g (_gec .Val ());case *_fc .PdfColorDeviceRGB :_eafe .Add_rg (_gec .R (),_gec .G (),_gec .B ());
case *_fc .PdfColorDeviceCMYK :_eafe .Add_k (_gec .C (),_gec .M (),_gec .Y (),_gec .K ());default:_cb .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_gec );
};return _eafe ;};

// String is same as Bytes() except returns as a string for convenience.
func (_aaec *ContentCreator )String ()string {return string (_aaec ._efa .Bytes ())};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cc *ContentCreator )Add_Q ()*ContentCreator {_bdb :=ContentStreamOperation {};_bdb .Operand ="\u0051";_cc ._efa =append (_cc ._efa ,&_bdb );return _cc ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_dbf *ContentStreamInlineImage )IsMask ()(bool ,error ){if _dbf .ImageMask !=nil {_ccbd ,_cfea :=_dbf .ImageMask .(*_ad .PdfObjectBool );if !_cfea {_cb .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");
return false ,_f .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_ccbd ),nil ;};return false ,nil ;};func (_efdf *ContentStreamProcessor )handleCommand_scn (_agaf *ContentStreamOperation ,_bcdd *_fc .PdfPageResources )error {_ddfe :=_efdf ._aca .ColorspaceNonStroking ;
if !_geaa (_ddfe ){if len (_agaf .Params )!=_ddfe .GetNumComponents (){_cb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_cb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_agaf .Params ),_ddfe );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_fbeg ,_cda :=_ddfe .ColorFromPdfObjects (_agaf .Params );if _cda !=nil {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_agaf .Params ,_ddfe );
return _cda ;};_efdf ._aca .ColorNonStroking =_fbeg ;return nil ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_de *ContentCreator )Add_W ()*ContentCreator {_fdc :=ContentStreamOperation {};_fdc .Operand ="\u0057";_de ._efa =append (_de ._efa ,&_fdc );return _de ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dbbb *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_be :=ContentStreamOperation {};_be .Operand ="\u0072\u0067";_be .Params =_ggbce ([]float64 {r ,g ,b });_dbbb ._efa =append (_dbbb ._efa ,&_be );return _dbbb ;};func _cdc (_edd *ContentStreamInlineImage )(_ad .StreamEncoder ,error ){if _edd .Filter ==nil {return _ad .NewRawEncoder (),nil ;
};_ddgd ,_age :=_edd .Filter .(*_ad .PdfObjectName );if !_age {_gbd ,_afdf :=_edd .Filter .(*_ad .PdfObjectArray );if !_afdf {return nil ,_d .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _gbd .Len ()==0{return _ad .NewRawEncoder (),nil ;};if _gbd .Len ()!=1{_cgb ,_ddec :=_bgb (_edd );if _ddec !=nil {_cb .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_ddec );
return nil ,_ddec ;};_cb .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_cgb );return _cgb ,nil ;};_fdcg :=_gbd .Get (0);_ddgd ,_afdf =_fdcg .(*_ad .PdfObjectName );if !_afdf {return nil ,_d .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");
};};switch *_ddgd {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _ad .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _ad .NewASCII85Encoder (),nil ;
case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _dbe (_edd );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _gbcb (_edd ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _edg (_edd ,nil );
case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _ad .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _ad .NewRunLengthEncoder (),nil ;
default:_cb .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_ddgd );
return nil ,_f .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_ff *ContentCreator )Wrap (){_ff ._efa .WrapIfNeeded ()};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dbb *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_agc :=ContentStreamOperation {};_agc .Operand ="\u0079";_agc .Params =_ggbce ([]float64 {x1 ,y1 ,x3 ,y3 });_dbb ._efa =append (_dbb ._efa ,&_agc );return _dbb ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_dbfe *ContentStreamOperation ,_dadc GraphicsState ,_eafg *_fc .PdfPageResources )error ;

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gdf *ContentCreator )Add_B ()*ContentCreator {_cec :=ContentStreamOperation {};_cec .Operand ="\u0042";_gdf ._efa =append (_gdf ._efa ,&_cec );return _gdf ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_dbca *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _dbca .CTM .Transform (x ,y );};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ab *ContentCreator )Add_G (gray float64 )*ContentCreator {_cfb :=ContentStreamOperation {};_cfb .Operand ="\u0047";_cfb .Params =_ggbce ([]float64 {gray });_ab ._efa =append (_ab ._efa ,&_cfb );return _ab ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bgc *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_gagf :=ContentStreamOperation {};_gagf .Operand ="\u0054\u0044";_gagf .Params =_ggbce ([]float64 {tx ,ty });_bgc ._efa =append (_bgc ._efa ,&_gagf );return _bgc ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fcg *ContentCreator )Add_gs (dictName _ad .PdfObjectName )*ContentCreator {_egeb :=ContentStreamOperation {};_egeb .Operand ="\u0067\u0073";_egeb .Params =_cbgce ([]_ad .PdfObjectName {dictName });_fcg ._efa =append (_fcg ._efa ,&_egeb );return _fcg ;
};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_dca *ContentCreator )Add_ET ()*ContentCreator {_cgfe :=ContentStreamOperation {};_cgfe .Operand ="\u0045\u0054";_dca ._efa =append (_dca ._efa ,&_cgfe );return _dca ;};func (_dcgfd *ContentStreamProcessor )handleCommand_k (_aaac *ContentStreamOperation ,_ggbc *_fc .PdfPageResources )error {_cagd :=_fc .NewPdfColorspaceDeviceCMYK ();
if len (_aaac .Params )!=_cagd .GetNumComponents (){_cb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_cb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aaac .Params ),_cagd );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dbfd ,_babbe :=_cagd .ColorFromPdfObjects (_aaac .Params );if _babbe !=nil {return _babbe ;};_dcgfd ._aca .ColorspaceNonStroking =_cagd ;_dcgfd ._aca .ColorNonStroking =_dbfd ;return nil ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_efd *ContentCreator )Add_Tj (textstr _ad .PdfObjectString )*ContentCreator {_gcc :=ContentStreamOperation {};_gcc .Operand ="\u0054\u006a";_gcc .Params =_gfea ([]_ad .PdfObjectString {textstr });_efd ._efa =append (_efd ._efa ,&_gcc );return _efd ;
};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_fec *ContentCreator )Add_quotes (textstr _ad .PdfObjectString ,aw ,ac float64 )*ContentCreator {_dcd :=ContentStreamOperation {};_dcd .Operand ="\u0022";_dcd .Params =_ggbce ([]float64 {aw ,ac });_dcd .Params =append (_dcd .Params ,_gfea ([]_ad .PdfObjectString {textstr })...);
_fec ._efa =append (_fec ._efa ,&_dcd );return _fec ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fge *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_gef :=ContentStreamOperation {};_gef .Operand ="\u0054\u0063";_gef .Params =_ggbce ([]float64 {charSpace });_fge ._efa =append (_fge ._efa ,&_gef );return _fge ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cee *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_aba :=ContentStreamOperation {};_aba .Operand ="\u0054\u007a";_aba .Params =_ggbce ([]float64 {scale });_cee ._efa =append (_cee ._efa ,&_aba );return _cee ;};func (_gga *ContentStreamParser )parseOperand ()(*_ad .PdfObjectString ,error ){var _fage []byte ;
for {_bfff ,_ffeb :=_gga ._dbbe .Peek (1);if _ffeb !=nil {return _ad .MakeString (string (_fage )),_ffeb ;};if _ad .IsDelimiter (_bfff [0]){break ;};if _ad .IsWhiteSpace (_bfff [0]){break ;};_bec ,_ :=_gga ._dbbe .ReadByte ();_fage =append (_fage ,_bec );
};return _ad .MakeString (string (_fage )),nil ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_fbf *ContentCreator )SetStrokingColor (color _fc .PdfColor )*ContentCreator {switch _edb :=color .(type ){case *_fc .PdfColorDeviceGray :_fbf .Add_G (_edb .Val ());case *_fc .PdfColorDeviceRGB :_fbf .Add_RG (_edb .R (),_edb .G (),_edb .B ());case *_fc .PdfColorDeviceCMYK :_fbf .Add_K (_edb .C (),_edb .M (),_edb .Y (),_edb .K ());
default:_cb .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_edb );
};return _fbf ;};var _dgfb =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};
func (_eebg *ContentStreamProcessor )handleCommand_cm (_eac *ContentStreamOperation ,_aefa *_fc .PdfPageResources )error {if len (_eac .Params )!=6{_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_eac .Params ));
return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cdgg ,_gefg :=_ad .GetNumbersAsFloat (_eac .Params );if _gefg !=nil {return _gefg ;
};_acee :=_gc .NewMatrix (_cdgg [0],_cdgg [1],_cdgg [2],_cdgg [3],_cdgg [4],_cdgg [5]);_eebg ._aca .CTM .Concat (_acee );return nil ;};func _dgfdg (_bcbd string )bool {_ ,_fbb :=_dgfb [_bcbd ];return _fbb };

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_ad .PdfObject ;Operand string ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_caa *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_fcc :=ContentStreamOperation {};_fcc .Operand ="\u0063\u006d";_fcc .Params =_ggbce ([]float64 {a ,b ,c ,d ,e ,f });_caa ._efa =append (_caa ._efa ,&_fcc );return _caa ;};

// GetColorSpace returns the colorspace of the inline image.
func (_ebe *ContentStreamInlineImage )GetColorSpace (resources *_fc .PdfPageResources )(_fc .PdfColorspace ,error ){if _ebe .ColorSpace ==nil {_cb .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");
return _fc .NewPdfColorspaceDeviceGray (),nil ;};if _dcg ,_eccg :=_ebe .ColorSpace .(*_ad .PdfObjectArray );_eccg {return _cffd (_dcg );};_adc ,_eab :=_ebe .ColorSpace .(*_ad .PdfObjectName );if !_eab {_cb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_ebe .ColorSpace ,_ebe .ColorSpace );
return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_adc =="\u0047"||*_adc =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _fc .NewPdfColorspaceDeviceGray (),nil ;
}else if *_adc =="\u0052\u0047\u0042"||*_adc =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _fc .NewPdfColorspaceDeviceRGB (),nil ;}else if *_adc =="\u0043\u004d\u0059\u004b"||*_adc =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _fc .NewPdfColorspaceDeviceCMYK (),nil ;
}else if *_adc =="\u0049"||*_adc =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_f .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_cb .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_adc );
return nil ,_f .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_ffb ,_bgacb :=resources .GetColorspaceByName (*_adc );if !_bgacb {_cb .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_adc );
return nil ,_f .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _ffb ,nil ;};};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bfe *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_fad :=ContentStreamOperation {};_fad .Operand ="\u0053\u0043\u004e";_fad .Params =_ggbce (c );_bfe ._efa =append (_bfe ._efa ,&_fad );return _bfe ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_egec :=ContentStreamParser {};_ece :=_fd .NewBufferString (contentStr +"\u000a");_egec ._dbbe =_gg .NewReader (_ece );return &_egec ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cbe *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_gad :=ContentStreamOperation {};_gad .Operand ="\u0054\u0073";_gad .Params =_ggbce ([]float64 {rise });_cbe ._efa =append (_cbe ._efa ,&_gad );return _cbe ;};func (_acb *ContentStreamProcessor )handleCommand_cs (_ecd *ContentStreamOperation ,_bfgd *_fc .PdfPageResources )error {if len (_ecd .Params )< 1{_cb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _f .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_ecd .Params )> 1{_cb .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _f .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_dab ,_dbd :=_ecd .Params [0].(*_ad .PdfObjectName );if !_dbd {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_cea ,_fcde :=_acb .getColorspace (string (*_dab ),_bfgd );if _fcde !=nil {return _fcde ;};_acb ._aca .ColorspaceNonStroking =_cea ;_cgbd ,_fcde :=_acb .getInitialColor (_cea );
if _fcde !=nil {return _fcde ;};_acb ._aca .ColorNonStroking =_cgbd ;return nil ;};func (_cdf *ContentStreamParser )parseDict ()(*_ad .PdfObjectDictionary ,error ){_cb .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");
_gceg :=_ad .MakeDict ();_cfbe ,_ :=_cdf ._dbbe .ReadByte ();if _cfbe !='<'{return nil ,_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_cfbe ,_ =_cdf ._dbbe .ReadByte ();if _cfbe !='<'{return nil ,_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
};for {_cdf .skipSpaces ();_bee ,_bcf :=_cdf ._dbbe .Peek (2);if _bcf !=nil {return nil ,_bcf ;};_cb .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_bee ),string (_bee ));if (_bee [0]=='>')&&(_bee [1]=='>'){_cb .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
_cdf ._dbbe .ReadByte ();_cdf ._dbbe .ReadByte ();break ;};_cb .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_ddgfd ,_bcf :=_cdf .parseName ();_cb .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_ddgfd );
if _bcf !=nil {_cb .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_bcf );return nil ,_bcf ;};if len (_ddgfd )> 4&&_ddgfd [len (_ddgfd )-4:]=="\u006e\u0075\u006c\u006c"{_gba :=_ddgfd [0:len (_ddgfd )-4];
_cb .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_ddgfd );_cb .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_gba );
_cdf .skipSpaces ();_abd ,_ :=_cdf ._dbbe .Peek (1);if _abd [0]=='/'{_gceg .Set (_gba ,_ad .MakeNull ());continue ;};};_cdf .skipSpaces ();_dede ,_ ,_bcf :=_cdf .parseObject ();if _bcf !=nil {return nil ,_bcf ;};_gceg .Set (_ddgfd ,_dede );_cb .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_ddgfd ,_dede .String ());
};return _gceg ,nil ;};func (_aaa *ContentStreamParser )parseHexString ()(*_ad .PdfObjectString ,error ){_aaa ._dbbe .ReadByte ();_dcgf :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
var _fcaf []byte ;for {_aaa .skipSpaces ();_bafe ,_ebca :=_aaa ._dbbe .Peek (1);if _ebca !=nil {return _ad .MakeString (""),_ebca ;};if _bafe [0]=='>'{_aaa ._dbbe .ReadByte ();break ;};_bcbe ,_ :=_aaa ._dbbe .ReadByte ();if _fd .IndexByte (_dcgf ,_bcbe )>=0{_fcaf =append (_fcaf ,_bcbe );
};};if len (_fcaf )%2==1{_fcaf =append (_fcaf ,'0');};_deda ,_ :=_gb .DecodeString (string (_fcaf ));return _ad .MakeHexString (string (_deda )),nil ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_fag *ContentCreator )Add_TJ (vals ..._ad .PdfObject )*ContentCreator {_ccf :=ContentStreamOperation {};_ccf .Operand ="\u0054\u004a";_ccf .Params =[]_ad .PdfObject {_ad .MakeArray (vals ...)};_fag ._efa =append (_fag ._efa ,&_ccf );return _fag ;
};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_dfe *ContentStreamProcessor )Process (resources *_fc .PdfPageResources )error {_dfe ._aca .ColorspaceStroking =_fc .NewPdfColorspaceDeviceGray ();_dfe ._aca .ColorspaceNonStroking =_fc .NewPdfColorspaceDeviceGray ();_dfe ._aca .ColorStroking =_fc .NewPdfColorDeviceGray (0);
_dfe ._aca .ColorNonStroking =_fc .NewPdfColorDeviceGray (0);_dfe ._aca .CTM =_gc .IdentityMatrix ();for _ ,_cce :=range _dfe ._febe {var _baff error ;switch _cce .Operand {case "\u0071":_dfe ._eaee .Push (_dfe ._aca );case "\u0051":if len (_dfe ._eaee )==0{_cb .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");
continue ;};_dfe ._aca =_dfe ._eaee .Pop ();case "\u0043\u0053":_baff =_dfe .handleCommand_CS (_cce ,resources );case "\u0063\u0073":_baff =_dfe .handleCommand_cs (_cce ,resources );case "\u0053\u0043":_baff =_dfe .handleCommand_SC (_cce ,resources );case "\u0053\u0043\u004e":_baff =_dfe .handleCommand_SCN (_cce ,resources );
case "\u0073\u0063":_baff =_dfe .handleCommand_sc (_cce ,resources );case "\u0073\u0063\u006e":_baff =_dfe .handleCommand_scn (_cce ,resources );case "\u0047":_baff =_dfe .handleCommand_G (_cce ,resources );case "\u0067":_baff =_dfe .handleCommand_g (_cce ,resources );
case "\u0052\u0047":_baff =_dfe .handleCommand_RG (_cce ,resources );case "\u0072\u0067":_baff =_dfe .handleCommand_rg (_cce ,resources );case "\u004b":_baff =_dfe .handleCommand_K (_cce ,resources );case "\u006b":_baff =_dfe .handleCommand_k (_cce ,resources );
case "\u0063\u006d":_baff =_dfe .handleCommand_cm (_cce ,resources );};if _baff !=nil {_cb .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_cce .Operand ,_baff );
_cb .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_cce .Operand );return _baff ;};for _ ,_gabd :=range _dfe ._gadf {var _beg error ;if _gabd .Condition .All (){_beg =_gabd .Handler (_cce ,_dfe ._aca ,resources );}else if _gabd .Condition .Operand ()&&_cce .Operand ==_gabd .Operand {_beg =_gabd .Handler (_cce ,_dfe ._aca ,resources );
};if _beg !=nil {_cb .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_beg );return _beg ;};};};return nil ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cff *ContentCreator )Add_S ()*ContentCreator {_cgf :=ContentStreamOperation {};_cgf .Operand ="\u0053";_cff ._efa =append (_cff ._efa ,&_cgf );return _cff ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_acg *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_acg )==0{return _acg ;};if _acg .isWrapped (){return _acg ;};*_acg =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_acg ...);_bb :=0;for _ ,_gf :=range *_acg {if _gf .Operand =="\u0071"{_bb ++;
}else if _gf .Operand =="\u0051"{_bb --;};};for _bb > 0{*_acg =append (*_acg ,&ContentStreamOperation {Operand :"\u0051"});_bb --;};return _acg ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_gefe *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_bdgc :=ContentStreamOperations {};for {_bfa :=ContentStreamOperation {};for {_gccb ,_efc ,_aeg :=_gefe .parseObject ();if _aeg !=nil {if _aeg ==_c .EOF {return &_bdgc ,nil ;};
return &_bdgc ,_aeg ;};if _efc {_bfa .Operand ,_ =_ad .GetStringVal (_gccb );_bdgc =append (_bdgc ,&_bfa );break ;}else {_bfa .Params =append (_bfa .Params ,_gccb );};};if _bfa .Operand =="\u0042\u0049"{_agf ,_efbb :=_gefe .ParseInlineImage ();if _efbb !=nil {return &_bdgc ,_efbb ;
};_bfa .Params =append (_bfa .Params ,_agf );};};};

// AddOperand adds a specified operand.
func (_feg *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_feg ._efa =append (_feg ._efa ,&op );return _feg ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bfb *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_ffe :=ContentStreamOperation {};_ffe .Operand ="\u0073\u0063\u006e";_ffe .Params =_ggbce (c );_bfb ._efa =append (_bfb ._efa ,&_ffe );return _bfb ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dcc *ContentCreator )Add_B_starred ()*ContentCreator {_bfd :=ContentStreamOperation {};_bfd .Operand ="\u0042\u002a";_dcc ._efa =append (_dcc ._efa ,&_bfd );return _dcc ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bef *ContentCreator )Add_quote (textstr _ad .PdfObjectString )*ContentCreator {_bccg :=ContentStreamOperation {};_bccg .Operand ="\u0027";_bccg .Params =_gfea ([]_ad .PdfObjectString {textstr });_bef ._efa =append (_bef ._efa ,&_bccg );return _bef ;
};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cae *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_fa :=ContentStreamOperation {};_fa .Operand ="\u004d";_fa .Params =_ggbce ([]float64 {miterlimit });_cae ._efa =append (_cae ._efa ,&_fa );return _cae ;};

// WriteString outputs the object as it is to be written to file.
func (_dagf *ContentStreamInlineImage )WriteString ()string {var _ccfe _fd .Buffer ;_bcb :="";if _dagf .BitsPerComponent !=nil {_bcb +="\u002f\u0042\u0050C\u0020"+_dagf .BitsPerComponent .WriteString ()+"\u000a";};if _dagf .ColorSpace !=nil {_bcb +="\u002f\u0043\u0053\u0020"+_dagf .ColorSpace .WriteString ()+"\u000a";
};if _dagf .Decode !=nil {_bcb +="\u002f\u0044\u0020"+_dagf .Decode .WriteString ()+"\u000a";};if _dagf .DecodeParms !=nil {_bcb +="\u002f\u0044\u0050\u0020"+_dagf .DecodeParms .WriteString ()+"\u000a";};if _dagf .Filter !=nil {_bcb +="\u002f\u0046\u0020"+_dagf .Filter .WriteString ()+"\u000a";
};if _dagf .Height !=nil {_bcb +="\u002f\u0048\u0020"+_dagf .Height .WriteString ()+"\u000a";};if _dagf .ImageMask !=nil {_bcb +="\u002f\u0049\u004d\u0020"+_dagf .ImageMask .WriteString ()+"\u000a";};if _dagf .Intent !=nil {_bcb +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_dagf .Intent .WriteString ()+"\u000a";
};if _dagf .Interpolate !=nil {_bcb +="\u002f\u0049\u0020"+_dagf .Interpolate .WriteString ()+"\u000a";};if _dagf .Width !=nil {_bcb +="\u002f\u0057\u0020"+_dagf .Width .WriteString ()+"\u000a";};_ccfe .WriteString (_bcb );_ccfe .WriteString ("\u0049\u0044\u0020");
_ccfe .Write (_dagf ._dcbc );_ccfe .WriteString ("\u000a\u0045\u0049\u000a");return _ccfe .String ();};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dbc *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_bfc :=ContentStreamOperation {};_bfc .Operand ="\u0076";_bfc .Params =_ggbce ([]float64 {x2 ,y2 ,x3 ,y3 });_dbc ._efa =append (_dbc ._efa ,&_bfc );return _dbc ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_daa HandlerConditionEnum )Operand ()bool {return _daa ==HandlerConditionEnumOperand };

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cd *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_cfe :=ContentStreamOperation {};_cfe .Operand ="\u006a";_cfe .Params =_cbgce ([]_ad .PdfObjectName {_ad .PdfObjectName (lineJoinStyle )});_cd ._efa =append (_cd ._efa ,&_cfe );return _cd ;
};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_ae *ContentCreator )Add_EMC ()*ContentCreator {_fgaf :=ContentStreamOperation {};_fgaf .Operand ="\u0045\u004d\u0043";_ae ._efa =append (_ae ._efa ,&_fgaf );return _ae ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _fc .PdfColorspace ;ColorspaceNonStroking _fc .PdfColorspace ;ColorStroking _fc .PdfColor ;ColorNonStroking _fc .PdfColor ;CTM _gc .Matrix ;};func (_eec *ContentStreamParser )parseString ()(*_ad .PdfObjectString ,error ){_eec ._dbbe .ReadByte ();
var _bged []byte ;_ddgf :=1;for {_aee ,_dcge :=_eec ._dbbe .Peek (1);if _dcge !=nil {return _ad .MakeString (string (_bged )),_dcge ;};if _aee [0]=='\\'{_eec ._dbbe .ReadByte ();_ega ,_efda :=_eec ._dbbe .ReadByte ();if _efda !=nil {return _ad .MakeString (string (_bged )),_efda ;
};if _ad .IsOctalDigit (_ega ){_fcf ,_ebb :=_eec ._dbbe .Peek (2);if _ebb !=nil {return _ad .MakeString (string (_bged )),_ebb ;};var _ddda []byte ;_ddda =append (_ddda ,_ega );for _ ,_cgcc :=range _fcf {if _ad .IsOctalDigit (_cgcc ){_ddda =append (_ddda ,_cgcc );
}else {break ;};};_eec ._dbbe .Discard (len (_ddda )-1);_cb .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_ddda );_fef ,_ebb :=_g .ParseUint (string (_ddda ),8,32);if _ebb !=nil {return _ad .MakeString (string (_bged )),_ebb ;
};_bged =append (_bged ,byte (_fef ));continue ;};switch _ega {case 'n':_bged =append (_bged ,'\n');case 'r':_bged =append (_bged ,'\r');case 't':_bged =append (_bged ,'\t');case 'b':_bged =append (_bged ,'\b');case 'f':_bged =append (_bged ,'\f');case '(':_bged =append (_bged ,'(');
case ')':_bged =append (_bged ,')');case '\\':_bged =append (_bged ,'\\');};continue ;}else if _aee [0]=='('{_ddgf ++;}else if _aee [0]==')'{_ddgf --;if _ddgf ==0{_eec ._dbbe .ReadByte ();break ;};};_eae ,_ :=_eec ._dbbe .ReadByte ();_bged =append (_bged ,_eae );
};return _ad .MakeString (string (_bged )),nil ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gcg *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_bce :=ContentStreamOperation {};_bce .Operand ="\u004a";_bce .Params =_cbgce ([]_ad .PdfObjectName {_ad .PdfObjectName (lineCapStyle )});_gcg ._efa =append (_gcg ._efa ,&_bce );return _gcg ;
};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bcea *ContentCreator )Add_cs (name _ad .PdfObjectName )*ContentCreator {_fga :=ContentStreamOperation {};_fga .Operand ="\u0063\u0073";_fga .Params =_cbgce ([]_ad .PdfObjectName {name });_bcea ._efa =append (_bcea ._efa ,&_fga );return _bcea ;};


// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ggc *ContentCreator )Add_Tr (render int64 )*ContentCreator {_cdd :=ContentStreamOperation {};_cdd .Operand ="\u0054\u0072";_cdd .Params =_edba ([]int64 {render });_ggc ._efa =append (_ggc ._efa ,&_cdd );return _ggc ;};func (_egde *ContentStreamProcessor )getInitialColor (_bbbe _fc .PdfColorspace )(_fc .PdfColor ,error ){switch _eebb :=_bbbe .(type ){case *_fc .PdfColorspaceDeviceGray :return _fc .NewPdfColorDeviceGray (0.0),nil ;
case *_fc .PdfColorspaceDeviceRGB :return _fc .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_fc .PdfColorspaceDeviceCMYK :return _fc .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_fc .PdfColorspaceCalGray :return _fc .NewPdfColorCalGray (0.0),nil ;
case *_fc .PdfColorspaceCalRGB :return _fc .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_fc .PdfColorspaceLab :_eccf :=0.0;_decc :=0.0;_becd :=0.0;if _eebb .Range [0]> 0{_eccf =_eebb .Range [0];};if _eebb .Range [2]> 0{_decc =_eebb .Range [2];};return _fc .NewPdfColorLab (_eccf ,_decc ,_becd ),nil ;
case *_fc .PdfColorspaceICCBased :if _eebb .Alternate ==nil {_cb .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_eebb .N );
if _eebb .N ==1{_cb .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _egde .getInitialColor (_fc .NewPdfColorspaceDeviceGray ());}else if _eebb .N ==3{_cb .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");
return _egde .getInitialColor (_fc .NewPdfColorspaceDeviceRGB ());}else if _eebb .N ==4{_cb .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");
return _egde .getInitialColor (_fc .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_f .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");
};};return _egde .getInitialColor (_eebb .Alternate );case *_fc .PdfColorspaceSpecialIndexed :if _eebb .Base ==nil {return nil ,_f .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");
};return _egde .getInitialColor (_eebb .Base );case *_fc .PdfColorspaceSpecialSeparation :if _eebb .AlternateSpace ==nil {return nil ,_f .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _egde .getInitialColor (_eebb .AlternateSpace );case *_fc .PdfColorspaceDeviceN :if _eebb .AlternateSpace ==nil {return nil ,_f .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _egde .getInitialColor (_eebb .AlternateSpace );case *_fc .PdfColorspaceSpecialPattern :return nil ,nil ;};_cb .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bbbe );
return nil ,_f .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_dbbe *_gg .Reader };func (_eeaf *ContentStreamParser )parseNull ()(_ad .PdfObjectNull ,error ){_ ,_eaff :=_eeaf ._dbbe .Discard (4);return _ad .PdfObjectNull {},_eaff ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fac *ContentCreator )Add_Tstar ()*ContentCreator {_ged :=ContentStreamOperation {};_ged .Operand ="\u0054\u002a";_fac ._efa =append (_fac ._efa ,&_ged );return _fac ;};func _geaa (_ggb _fc .PdfColorspace )bool {_ ,_agfd :=_ggb .(*_fc .PdfColorspaceSpecialPattern );
return _agfd ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_ddg *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_bda :=_cf .Cos (angle *_cf .Pi /180.0);_aff :=_cf .Sin (angle *_cf .Pi /180.0);_gcb :=-_cf .Sin (angle *_cf .Pi /180.0);_dg :=_cf .Cos (angle *_cf .Pi /180.0);return _ddg .Add_cm (_bda ,_aff ,_gcb ,_dg ,0,0);
};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_aad *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_cg :=ContentStreamOperation {};_cg .Operand ="\u0077";_cg .Params =_ggbce ([]float64 {lineWidth });_aad ._efa =append (_aad ._efa ,&_cg );return _aad ;};func (_bfdf *ContentStreamParser )skipSpaces ()(int ,error ){_fagd :=0;
for {_effg ,_bfcc :=_bfdf ._dbbe .Peek (1);if _bfcc !=nil {return 0,_bfcc ;};if _ad .IsWhiteSpace (_effg [0]){_bfdf ._dbbe .ReadByte ();_fagd ++;}else {break ;};};return _fagd ,nil ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ga *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_gd :=ContentStreamOperation {};_gd .Operand ="\u006d";_gd .Params =_ggbce ([]float64 {x ,y });_ga ._efa =append (_ga ._efa ,&_gd );return _ga ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_ba *ContentStreamParser )ExtractText ()(string ,error ){_adg ,_ec :=_ba .Parse ();if _ec !=nil {return "",_ec ;};_aa :=false ;_gbc ,_aae :=float64 (-1),float64 (-1);_ea :="";for _ ,_eg :=range *_adg {if _eg .Operand =="\u0042\u0054"{_aa =true ;}else if _eg .Operand =="\u0045\u0054"{_aa =false ;
};if _eg .Operand =="\u0054\u0064"||_eg .Operand =="\u0054\u0044"||_eg .Operand =="\u0054\u002a"{_ea +="\u000a";};if _eg .Operand =="\u0054\u006d"{if len (_eg .Params )!=6{continue ;};_dc ,_af :=_eg .Params [4].(*_ad .PdfObjectFloat );if !_af {_bd ,_ege :=_eg .Params [4].(*_ad .PdfObjectInteger );
if !_ege {continue ;};_dc =_ad .MakeFloat (float64 (*_bd ));};_ge ,_af :=_eg .Params [5].(*_ad .PdfObjectFloat );if !_af {_bag ,_ef :=_eg .Params [5].(*_ad .PdfObjectInteger );if !_ef {continue ;};_ge =_ad .MakeFloat (float64 (*_bag ));};if _aae ==-1{_aae =float64 (*_ge );
}else if _aae > float64 (*_ge ){_ea +="\u000a";_gbc =float64 (*_dc );_aae =float64 (*_ge );continue ;};if _gbc ==-1{_gbc =float64 (*_dc );}else if _gbc < float64 (*_dc ){_ea +="\u0009";_gbc =float64 (*_dc );};};if _aa &&_eg .Operand =="\u0054\u004a"{if len (_eg .Params )< 1{continue ;
};_da ,_eag :=_eg .Params [0].(*_ad .PdfObjectArray );if !_eag {return "",_d .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_eg .Params [0]);
};for _ ,_efb :=range _da .Elements (){switch _ace :=_efb .(type ){case *_ad .PdfObjectString :_ea +=_ace .Str ();case *_ad .PdfObjectFloat :if *_ace < -100{_ea +="\u0020";};case *_ad .PdfObjectInteger :if *_ace < -100{_ea +="\u0020";};};};}else if _aa &&_eg .Operand =="\u0054\u006a"{if len (_eg .Params )< 1{continue ;
};_bg ,_cba :=_eg .Params [0].(*_ad .PdfObjectString );if !_cba {return "",_d .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_eg .Params [0]);
};_ea +=_bg .Str ();};};return _ea ,nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ead *ContentCreator )Add_CS (name _ad .PdfObjectName )*ContentCreator {_feb :=ContentStreamOperation {};_feb .Operand ="\u0043\u0053";_feb .Params =_cbgce ([]_ad .PdfObjectName {name });_ead ._efa =append (_ead ._efa ,&_feb );return _ead ;};func (_cdb *ContentStreamProcessor )handleCommand_SC (_aab *ContentStreamOperation ,_def *_fc .PdfPageResources )error {_bcec :=_cdb ._aca .ColorspaceStroking ;
if len (_aab .Params )!=_bcec .GetNumComponents (){_cb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_cb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aab .Params ),_bcec );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_gbce ,_dgg :=_bcec .ColorFromPdfObjects (_aab .Params );if _dgg !=nil {return _dgg ;};_cdb ._aca .ColorStroking =_gbce ;return nil ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_ag *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _ag .Add_cm (1,0,0,1,tx ,ty );};func _gfea (_ceb []_ad .PdfObjectString )[]_ad .PdfObject {var _egb []_ad .PdfObject ;for _ ,_aed :=range _ceb {_egb =append (_egb ,_ad .MakeString (_aed .Str ()));
};return _egb ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_edc *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_cgff :=ContentStreamOperation {};_cgff .Operand ="\u004b";_cgff .Params =_ggbce ([]float64 {c ,m ,y ,k });_edc ._efa =append (_edc ._efa ,&_cgff );return _edc ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fcd *ContentCreator )Add_s ()*ContentCreator {_cbad :=ContentStreamOperation {};_cbad .Operand ="\u0073";_fcd ._efa =append (_fcd ._efa ,&_cbad );return _fcd ;};

// Push pushes `gs` on the `gsStack`.
func (_geee *GraphicStateStack )Push (gs GraphicsState ){*_geee =append (*_geee ,gs )};func _ggbce (_gcdb []float64 )[]_ad .PdfObject {var _dfbd []_ad .PdfObject ;for _ ,_beaee :=range _gcdb {_dfbd =append (_dfbd ,_ad .MakeFloat (_beaee ));};return _dfbd ;
};func _edg (_gbg *ContentStreamInlineImage ,_fbd *_ad .PdfObjectDictionary )(*_ad .LZWEncoder ,error ){_gdfe :=_ad .NewLZWEncoder ();if _fbd ==nil {if _gbg .DecodeParms !=nil {_eeb ,_bca :=_ad .GetDict (_gbg .DecodeParms );if !_bca {_cb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_gbg .DecodeParms );
return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_fbd =_eeb ;};};if _fbd ==nil {return _gdfe ,nil ;};_dgf :=_fbd .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");
if _dgf !=nil {_edbc ,_efdb :=_dgf .(*_ad .PdfObjectInteger );if !_efdb {_cb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_dgf );
return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_edbc !=0&&*_edbc !=1{return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");
};_gdfe .EarlyChange =int (*_edbc );}else {_gdfe .EarlyChange =1;};_dgf =_fbd .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _dgf !=nil {_faca ,_cbadg :=_dgf .(*_ad .PdfObjectInteger );if !_cbadg {_cb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_dgf );
return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_gdfe .Predictor =int (*_faca );};_dgf =_fbd .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _dgf !=nil {_fgb ,_ded :=_dgf .(*_ad .PdfObjectInteger );if !_ded {_cb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_d .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_gdfe .BitsPerComponent =int (*_fgb );};if _gdfe .Predictor > 1{_gdfe .Columns =1;_dgf =_fbd .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _dgf !=nil {_ddd ,_gae :=_dgf .(*_ad .PdfObjectInteger );if !_gae {return nil ,_d .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_gdfe .Columns =int (*_ddd );
};_gdfe .Colors =1;_dgf =_fbd .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dgf !=nil {_gee ,_eeg :=_dgf .(*_ad .PdfObjectInteger );if !_eeg {return nil ,_d .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_gdfe .Colors =int (*_gee );};};_cb .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_fbd .String ());return _gdfe ,nil ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ceff *ContentCreator )Add_i (flatness float64 )*ContentCreator {_aaef :=ContentStreamOperation {};_aaef .Operand ="\u0069";_aaef .Params =_ggbce ([]float64 {flatness });_ceff ._efa =append (_ceff ._efa ,&_aaef );return _ceff ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_bdg *ContentCreator )Add_Do (name _ad .PdfObjectName )*ContentCreator {_gcd :=ContentStreamOperation {};_gcd .Operand ="\u0044\u006f";_gcd .Params =_cbgce ([]_ad .PdfObjectName {name });_bdg ._efa =append (_bdg ._efa ,&_gcd );return _bdg ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _fc .Image ,encoder _ad .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_ad .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_gab :=ContentStreamInlineImage {};if img .ColorComponents ==1{_gab .ColorSpace =_ad .MakeName ("\u0047");
}else if img .ColorComponents ==3{_gab .ColorSpace =_ad .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_gab .ColorSpace =_ad .MakeName ("\u0043\u004d\u0059\u004b");}else {_cb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );
return nil ,_f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_gab .BitsPerComponent =_ad .MakeInteger (img .BitsPerComponent );
_gab .Width =_ad .MakeInteger (img .Width );_gab .Height =_ad .MakeInteger (img .Height );_fae ,_dag :=encoder .EncodeBytes (img .Data );if _dag !=nil {return nil ,_dag ;};_gab ._dcbc =_fae ;_bafg :=encoder .GetFilterName ();if _bafg !=_ad .StreamEncodingFilterNameRaw {_gab .Filter =_ad .MakeName (_bafg );
};return &_gab ,nil ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ee *ContentCreator )Add_b_starred ()*ContentCreator {_dge :=ContentStreamOperation {};_dge .Operand ="\u0062\u002a";_ee ._efa =append (_ee ._efa ,&_dge );return _ee ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bab *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_dde :=ContentStreamOperation {};_dde .Operand ="\u006b";_dde .Params =_ggbce ([]float64 {c ,m ,y ,k });_bab ._efa =append (_bab ._efa ,&_dde );return _bab ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_aga *ContentCreator )Add_TL (leading float64 )*ContentCreator {_cadb :=ContentStreamOperation {};_cadb .Operand ="\u0054\u004c";_cadb .Params =_ggbce ([]float64 {leading });_aga ._efa =append (_aga ._efa ,&_cadb );return _aga ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bff *ContentCreator )Add_SCN_pattern (name _ad .PdfObjectName ,c ...float64 )*ContentCreator {_ede :=ContentStreamOperation {};_ede .Operand ="\u0053\u0043\u004e";_ede .Params =_ggbce (c );_ede .Params =append (_ede .Params ,_ad .MakeName (string (name )));
_bff ._efa =append (_bff ._efa ,&_ede );return _bff ;};func (_dbde *ContentStreamProcessor )handleCommand_G (_ffda *ContentStreamOperation ,_ecf *_fc .PdfPageResources )error {_gbcg :=_fc .NewPdfColorspaceDeviceGray ();if len (_ffda .Params )!=_gbcg .GetNumComponents (){_cb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_cb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ffda .Params ),_gbcg );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_fddc ,_ebd :=_gbcg .ColorFromPdfObjects (_ffda .Params );if _ebd !=nil {return _ebd ;};_dbde ._aca .ColorspaceStroking =_gbcg ;_dbde ._aca .ColorStroking =_fddc ;return nil ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_bgg *ContentCreator )Bytes ()[]byte {return _bgg ._efa .Bytes ()};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_ggg *GraphicStateStack )Pop ()GraphicsState {_aaee :=(*_ggg )[len (*_ggg )-1];*_ggg =(*_ggg )[:len (*_ggg )-1];return _aaee ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bdgg *ContentCreator )Add_Tf (fontName _ad .PdfObjectName ,fontSize float64 )*ContentCreator {_eef :=ContentStreamOperation {};_eef .Operand ="\u0054\u0066";_eef .Params =_cbgce ([]_ad .PdfObjectName {fontName });_eef .Params =append (_eef .Params ,_ggbce ([]float64 {fontSize })...);
_bdgg ._efa =append (_bdgg ._efa ,&_eef );return _bdgg ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_ebbf :=ContentStreamProcessor {};_ebbf ._eaee =GraphicStateStack {};_ccbc :=GraphicsState {};_ebbf ._aca =_ccbc ;_ebbf ._gadf =[]handlerEntry {};_ebbf ._acec =0;_ebbf ._febe =ops ;
return &_ebbf ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cdg *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_cbbf :=ContentStreamOperation {};_cbbf .Operand ="\u0053\u0043";_cbbf .Params =_ggbce (c );_cdg ._efa =append (_cdg ._efa ,&_cbbf );return _cdg ;};func _cffd (_aecf _ad .PdfObject )(_fc .PdfColorspace ,error ){_ceef ,_fbg :=_aecf .(*_ad .PdfObjectArray );
if !_fbg {_cb .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_aecf );
return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _ceef .Len ()!=4{_cb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_ceef .Len ());
return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fgbc ,_fbg :=_ceef .Get (0).(*_ad .PdfObjectName );if !_fbg {_cb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_ceef );
return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fgbc !="\u0049"&&*_fgbc !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_cb .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_fgbc );
return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fgbc ,_fbg =_ceef .Get (1).(*_ad .PdfObjectName );if !_fbg {_cb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_ceef );
return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fgbc !="\u0047"&&*_fgbc !="\u0052\u0047\u0042"&&*_fgbc !="\u0043\u004d\u0059\u004b"&&*_fgbc !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_fgbc !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_fgbc !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_cb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_fgbc );
return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_cgfd :="";switch *_fgbc {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_cgfd ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_cgfd ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_cgfd ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};_baeb :=_ad .MakeArray (_ad .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_ad .MakeName (_cgfd ),_ceef .Get (2),_ceef .Get (3));return _fc .NewPdfColorspaceFromPdfObject (_baeb );};var (ErrInvalidOperand =_f .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
);

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_efa ContentStreamOperations };func (_bf *ContentStreamOperations )isWrapped ()bool {if len (*_bf )< 2{return false ;};_bc :=0;for _ ,_ac :=range *_bf {if _ac .Operand =="\u0071"{_bc ++;}else if _ac .Operand =="\u0051"{_bc --;
}else {if _bc < 1{return false ;};};};return _bc ==0;};func (_dcab *ContentStreamProcessor )getColorspace (_acfc string ,_ggac *_fc .PdfPageResources )(_fc .PdfColorspace ,error ){switch _acfc {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _fc .NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _fc .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _fc .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _fc .NewPdfColorspaceSpecialPattern (),nil ;
};_bgaa ,_ebg :=_ggac .GetColorspaceByName (_ad .PdfObjectName (_acfc ));if _ebg {return _bgaa ,nil ;};switch _acfc {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _fc .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _fc .NewPdfColorspaceCalRGB (),nil ;
case "\u004c\u0061\u0062":return _fc .NewPdfColorspaceLab (),nil ;};_cb .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_acfc );
return nil ,_d .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_acfc );};func _dbe (_dbec *ContentStreamInlineImage )(*_ad .DCTEncoder ,error ){_efe :=_ad .NewDCTEncoder ();
_fca :=_fd .NewReader (_dbec ._dcbc );_agea ,_ecc :=_ce .DecodeConfig (_fca );if _ecc !=nil {_cb .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_ecc );return nil ,_ecc ;
};switch _agea .ColorModel {case _a .RGBAModel :_efe .BitsPerComponent =8;_efe .ColorComponents =3;case _a .RGBA64Model :_efe .BitsPerComponent =16;_efe .ColorComponents =3;case _a .GrayModel :_efe .BitsPerComponent =8;_efe .ColorComponents =1;case _a .Gray16Model :_efe .BitsPerComponent =16;
_efe .ColorComponents =1;case _a .CMYKModel :_efe .BitsPerComponent =8;_efe .ColorComponents =4;case _a .YCbCrModel :_efe .BitsPerComponent =8;_efe .ColorComponents =3;default:return nil ,_f .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");
};_efe .Width =_agea .Width ;_efe .Height =_agea .Height ;_cb .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_efe );return _efe ,nil ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_eaee GraphicStateStack ;_febe []*ContentStreamOperation ;_aca GraphicsState ;_gadf []handlerEntry ;_acec int ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ffg *ContentCreator )Add_f_starred ()*ContentCreator {_acge :=ContentStreamOperation {};_acge .Operand ="\u0066\u002a";_ffg ._efa =append (_ffg ._efa ,&_acge );return _ffg ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aaeg *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_cca :=ContentStreamOperation {};_cca .Operand ="\u006c";_cca .Params =_ggbce ([]float64 {x ,y });_aaeg ._efa =append (_aaeg ._efa ,&_cca );return _aaeg ;};func (_bbb *ContentStreamInlineImage )String ()string {_edce :=_d .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_bbb ._dcbc ));
if _bbb .BitsPerComponent !=nil {_edce +="\u002d\u0020\u0042\u0050\u0043\u0020"+_bbb .BitsPerComponent .WriteString ()+"\u000a";};if _bbb .ColorSpace !=nil {_edce +="\u002d\u0020\u0043S\u0020"+_bbb .ColorSpace .WriteString ()+"\u000a";};if _bbb .Decode !=nil {_edce +="\u002d\u0020\u0044\u0020"+_bbb .Decode .WriteString ()+"\u000a";
};if _bbb .DecodeParms !=nil {_edce +="\u002d\u0020\u0044P\u0020"+_bbb .DecodeParms .WriteString ()+"\u000a";};if _bbb .Filter !=nil {_edce +="\u002d\u0020\u0046\u0020"+_bbb .Filter .WriteString ()+"\u000a";};if _bbb .Height !=nil {_edce +="\u002d\u0020\u0048\u0020"+_bbb .Height .WriteString ()+"\u000a";
};if _bbb .ImageMask !=nil {_edce +="\u002d\u0020\u0049M\u0020"+_bbb .ImageMask .WriteString ()+"\u000a";};if _bbb .Intent !=nil {_edce +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_bbb .Intent .WriteString ()+"\u000a";};if _bbb .Interpolate !=nil {_edce +="\u002d\u0020\u0049\u0020"+_bbb .Interpolate .WriteString ()+"\u000a";
};if _bbb .Width !=nil {_edce +="\u002d\u0020\u0057\u0020"+_bbb .Width .WriteString ()+"\u000a";};return _edce ;};func (_aaf *ContentStreamProcessor )handleCommand_sc (_bebe *ContentStreamOperation ,_faff *_fc .PdfPageResources )error {_bfab :=_aaf ._aca .ColorspaceNonStroking ;
if !_geaa (_bfab ){if len (_bebe .Params )!=_bfab .GetNumComponents (){_cb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_cb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bebe .Params ),_bfab );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_bgd ,_gge :=_bfab .ColorFromPdfObjects (_bebe .Params );if _gge !=nil {return _gge ;};_aaf ._aca .ColorNonStroking =_bgd ;return nil ;};

// String returns `ops.Bytes()` as a string.
func (_cfg *ContentStreamOperations )String ()string {return string (_cfg .Bytes ())};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _ad .PdfObject ;ColorSpace _ad .PdfObject ;Decode _ad .PdfObject ;DecodeParms _ad .PdfObject ;Filter _ad .PdfObject ;Height _ad .PdfObject ;ImageMask _ad .PdfObject ;Intent _ad .PdfObject ;Interpolate _ad .PdfObject ;
Width _ad .PdfObject ;_dcbc []byte ;_geea *_add .ImageBase ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_afa *ContentCreator )Add_h ()*ContentCreator {_cbb :=ContentStreamOperation {};_cbb .Operand ="\u0068";_afa ._efa =append (_afa ._efa ,&_cbb );return _afa ;};func (_effc *ContentStreamProcessor )handleCommand_RG (_cbd *ContentStreamOperation ,_beae *_fc .PdfPageResources )error {_gbdb :=_fc .NewPdfColorspaceDeviceRGB ();
if len (_cbd .Params )!=_gbdb .GetNumComponents (){_cb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");
_cb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cbd .Params ),_gbdb );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_fce ,_cceg :=_gbdb .ColorFromPdfObjects (_cbd .Params );if _cceg !=nil {return _cceg ;};_effc ._aca .ColorspaceStroking =_gbdb ;_effc ._aca .ColorStroking =_fce ;return nil ;};func _cbgce (_dee []_ad .PdfObjectName )[]_ad .PdfObject {var _gaed []_ad .PdfObject ;
for _ ,_bfdg :=range _dee {_gaed =append (_gaed ,_ad .MakeName (string (_bfdg )));};return _gaed ;};

// Scale applies x-y scaling to the transformation matrix.
func (_fee *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _fee .Add_cm (sx ,0,0,sy ,0,0);};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_dcf *ContentCreator )Add_BMC (tag _ad .PdfObjectName )*ContentCreator {_eb :=ContentStreamOperation {};_eb .Operand ="\u0042\u004d\u0043";_eb .Params =_cbgce ([]_ad .PdfObjectName {tag });_dcf ._efa =append (_dcf ._efa ,&_eb );return _dcf ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_fefc *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_agcg :=handlerEntry {};_agcg .Condition =condition ;_agcg .Operand =operand ;_agcg .Handler =handler ;_fefc ._gadf =append (_fefc ._gadf ,_agcg );
};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_df *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_bccd :=ContentStreamOperation {};_bccd .Operand ="\u0063";_bccd .Params =_ggbce ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_df ._efa =append (_df ._efa ,&_bccd );return _df ;
};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cef *ContentCreator )Add_ri (intent _ad .PdfObjectName )*ContentCreator {_bcc :=ContentStreamOperation {};_bcc .Operand ="\u0072\u0069";_bcc .Params =_cbgce ([]_ad .PdfObjectName {intent });_cef ._efa =append (_cef ._efa ,&_bcc );return _cef ;};


// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dccb *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_aac :=ContentStreamOperation {};_aac .Operand ="\u0052\u0047";_aac .Params =_ggbce ([]float64 {r ,g ,b });_dccb ._efa =append (_dccb ._efa ,&_aac );return _dccb ;};func (_cddad *ContentStreamProcessor )handleCommand_K (_faa *ContentStreamOperation ,_abdc *_fc .PdfPageResources )error {_egf :=_fc .NewPdfColorspaceDeviceCMYK ();
if len (_faa .Params )!=_egf .GetNumComponents (){_cb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_cb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_faa .Params ),_egf );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_bbfd ,_gccae :=_egf .ColorFromPdfObjects (_faa .Params );if _gccae !=nil {return _gccae ;};_cddad ._aca .ColorspaceStroking =_egf ;_cddad ._aca .ColorStroking =_bbfd ;return nil ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dba *ContentCreator )Add_b ()*ContentCreator {_gbb :=ContentStreamOperation {};_gbb .Operand ="\u0062";_dba ._efa =append (_dba ._efa ,&_gbb );return _dba ;};func (_dddb *ContentStreamParser )parseBool ()(_ad .PdfObjectBool ,error ){_cfbc ,_dfb :=_dddb ._dbbe .Peek (4);
if _dfb !=nil {return _ad .PdfObjectBool (false ),_dfb ;};if (len (_cfbc )>=4)&&(string (_cfbc [:4])=="\u0074\u0072\u0075\u0065"){_dddb ._dbbe .Discard (4);return _ad .PdfObjectBool (true ),nil ;};_cfbc ,_dfb =_dddb ._dbbe .Peek (5);if _dfb !=nil {return _ad .PdfObjectBool (false ),_dfb ;
};if (len (_cfbc )>=5)&&(string (_cfbc [:5])=="\u0066\u0061\u006cs\u0065"){_dddb ._dbbe .Discard (5);return _ad .PdfObjectBool (false ),nil ;};return _ad .PdfObjectBool (false ),_f .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_bffc *ContentStreamProcessor )handleCommand_g (_dddd *ContentStreamOperation ,_aafb *_fc .PdfPageResources )error {_babb :=_fc .NewPdfColorspaceDeviceGray ();if len (_dddd .Params )!=_babb .GetNumComponents (){_cb .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");
_cb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dddd .Params ),_babb );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_cbba ,_ccef :=_babb .ColorFromPdfObjects (_dddd .Params );if _ccef !=nil {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_babb ,_dddd ,_ccef );
return _ccef ;};_bffc ._aca .ColorspaceNonStroking =_babb ;_bffc ._aca .ColorNonStroking =_cbba ;return nil ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_ecb *ContentCreator )Add_W_starred ()*ContentCreator {_afd :=ContentStreamOperation {};_afd .Operand ="\u0057\u002a";_ecb ._efa =append (_ecb ._efa ,&_afd );return _ecb ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_ddb *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_edf :=ContentStreamOperation {};_edf .Operand ="\u0054\u006d";_edf .Params =_ggbce ([]float64 {a ,b ,c ,d ,e ,f });_ddb ._efa =append (_ddb ._efa ,&_edf );return _ddb ;};func (_ecec *ContentStreamProcessor )handleCommand_rg (_edgf *ContentStreamOperation ,_dac *_fc .PdfPageResources )error {_cbdg :=_fc .NewPdfColorspaceDeviceRGB ();
if len (_edgf .Params )!=_cbdg .GetNumComponents (){_cb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_cb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_edgf .Params ),_cbdg );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dffd ,_efae :=_cbdg .ColorFromPdfObjects (_edgf .Params );if _efae !=nil {return _efae ;};_ecec ._aca .ColorspaceNonStroking =_cbdg ;_ecec ._aca .ColorNonStroking =_dffd ;return nil ;};

// Operations returns the list of operations.
func (_cbc *ContentCreator )Operations ()*ContentStreamOperations {return &_cbc ._efa };func (_cdcda *ContentStreamParser )skipComments ()error {if _ ,_ebcc :=_cdcda .skipSpaces ();_ebcc !=nil {return _ebcc ;};_cfeaa :=true ;for {_ggf ,_cfdb :=_cdcda ._dbbe .Peek (1);
if _cfdb !=nil {_cb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cfdb .Error ());return _cfdb ;};if _cfeaa &&_ggf [0]!='%'{return nil ;};_cfeaa =false ;if (_ggf [0]!='\r')&&(_ggf [0]!='\n'){_cdcda ._dbbe .ReadByte ();}else {break ;};
};return _cdcda .skipComments ();};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);