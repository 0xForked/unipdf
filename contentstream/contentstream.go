//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_ed "bufio";_bb "bytes";_c "encoding/hex";_b "errors";_ae "fmt";_eg "github.com/unidoc/unipdf/v3/common";_ba "github.com/unidoc/unipdf/v3/core";_g "github.com/unidoc/unipdf/v3/internal/imageutil";_agd "github.com/unidoc/unipdf/v3/internal/transform";
_f "github.com/unidoc/unipdf/v3/model";_bf "image/color";_ag "image/jpeg";_cc "io";_ab "math";_a "strconv";);

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_accb *ContentCreator )Add_B ()*ContentCreator {_eabd :=ContentStreamOperation {};_eabd .Operand ="\u0042";_accb ._eaf =append (_accb ._eaf ,&_eabd );return _accb ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eab *ContentCreator )Add_q ()*ContentCreator {_fgd :=ContentStreamOperation {};_fgd .Operand ="\u0071";_eab ._eaf =append (_eab ._eaf ,&_fgd );return _eab ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_aff *ContentCreator )Add_b ()*ContentCreator {_dg :=ContentStreamOperation {};_dg .Operand ="\u0062";_aff ._eaf =append (_aff ._eaf ,&_dg );return _aff ;};func (_bcfc *ContentStreamProcessor )handleCommand_SCN (_ceea *ContentStreamOperation ,_abdf *_f .PdfPageResources )error {_dfdc :=_bcfc ._cecb .ColorspaceStroking ;
if !_dabc (_dfdc ){if len (_ceea .Params )!=_dfdc .GetNumComponents (){_eg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ceea .Params ),_dfdc );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_aee ,_bgdb :=_dfdc .ColorFromPdfObjects (_ceea .Params );if _bgdb !=nil {return _bgdb ;};_bcfc ._cecb .ColorStroking =_aee ;return nil ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cdbf *ContentCreator )Add_G (gray float64 )*ContentCreator {_fgdfd :=ContentStreamOperation {};_fgdfd .Operand ="\u0047";_fgdfd .Params =_acf ([]float64 {gray });_cdbf ._eaf =append (_cdbf ._eaf ,&_fgdfd );return _cdbf ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_dce *ContentStreamProcessor )Process (resources *_f .PdfPageResources )error {_dce ._cecb .ColorspaceStroking =_f .NewPdfColorspaceDeviceGray ();_dce ._cecb .ColorspaceNonStroking =_f .NewPdfColorspaceDeviceGray ();_dce ._cecb .ColorStroking =_f .NewPdfColorDeviceGray (0);
_dce ._cecb .ColorNonStroking =_f .NewPdfColorDeviceGray (0);_dce ._cecb .CTM =_agd .IdentityMatrix ();for _ ,_dafea :=range _dce ._fcfb {var _ddfb error ;switch _dafea .Operand {case "\u0071":_dce ._ccfd .Push (_dce ._cecb );case "\u0051":if len (_dce ._ccfd )==0{_eg .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");
continue ;};_dce ._cecb =_dce ._ccfd .Pop ();case "\u0043\u0053":_ddfb =_dce .handleCommand_CS (_dafea ,resources );case "\u0063\u0073":_ddfb =_dce .handleCommand_cs (_dafea ,resources );case "\u0053\u0043":_ddfb =_dce .handleCommand_SC (_dafea ,resources );
case "\u0053\u0043\u004e":_ddfb =_dce .handleCommand_SCN (_dafea ,resources );case "\u0073\u0063":_ddfb =_dce .handleCommand_sc (_dafea ,resources );case "\u0073\u0063\u006e":_ddfb =_dce .handleCommand_scn (_dafea ,resources );case "\u0047":_ddfb =_dce .handleCommand_G (_dafea ,resources );
case "\u0067":_ddfb =_dce .handleCommand_g (_dafea ,resources );case "\u0052\u0047":_ddfb =_dce .handleCommand_RG (_dafea ,resources );case "\u0072\u0067":_ddfb =_dce .handleCommand_rg (_dafea ,resources );case "\u004b":_ddfb =_dce .handleCommand_K (_dafea ,resources );
case "\u006b":_ddfb =_dce .handleCommand_k (_dafea ,resources );case "\u0063\u006d":_ddfb =_dce .handleCommand_cm (_dafea ,resources );};if _ddfb !=nil {_eg .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_dafea .Operand ,_ddfb );
_eg .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_dafea .Operand );return _ddfb ;};for _ ,_eff :=range _dce ._bgfc {var _deb error ;if _eff .Condition .All (){_deb =_eff .Handler (_dafea ,_dce ._cecb ,resources );}else if _eff .Condition .Operand ()&&_dafea .Operand ==_eff .Operand {_deb =_eff .Handler (_dafea ,_dce ._cecb ,resources );
};if _deb !=nil {_eg .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_deb );return _deb ;};};};return nil ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_ddfa HandlerConditionEnum )Operand ()bool {return _ddfa ==HandlerConditionEnumOperand };

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cd *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_cg :=ContentStreamOperation {};_cg .Operand ="\u0077";_cg .Params =_acf ([]float64 {lineWidth });_cd ._eaf =append (_cd ._eaf ,&_cg );return _cd ;};

// GetColorSpace returns the colorspace of the inline image.
func (_cfgf *ContentStreamInlineImage )GetColorSpace (resources *_f .PdfPageResources )(_f .PdfColorspace ,error ){if _cfgf .ColorSpace ==nil {_eg .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");
return _f .NewPdfColorspaceDeviceGray (),nil ;};if _gdbb ,_daff :=_cfgf .ColorSpace .(*_ba .PdfObjectArray );_daff {return _ggeda (_gdbb );};_abdb ,_gab :=_cfgf .ColorSpace .(*_ba .PdfObjectName );if !_gab {_eg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_cfgf .ColorSpace ,_cfgf .ColorSpace );
return nil ,_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_abdb =="\u0047"||*_abdb =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _f .NewPdfColorspaceDeviceGray (),nil ;
}else if *_abdb =="\u0052\u0047\u0042"||*_abdb =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _f .NewPdfColorspaceDeviceRGB (),nil ;}else if *_abdb =="\u0043\u004d\u0059\u004b"||*_abdb =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _f .NewPdfColorspaceDeviceCMYK (),nil ;
}else if *_abdb =="\u0049"||*_abdb =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_b .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_eg .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_abdb );
return nil ,_b .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_ccdb ,_cecd :=resources .GetColorspaceByName (*_abdb );if !_cecd {_eg .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_abdb );
return nil ,_b .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _ccdb ,nil ;};};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cdb *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_bfe :=ContentStreamOperation {};_bfe .Operand ="\u006a";_bfe .Params =_cfcg ([]_ba .PdfObjectName {_ba .PdfObjectName (lineJoinStyle )});_cdb ._eaf =append (_cdb ._eaf ,&_bfe );
return _cdb ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cec *ContentCreator )Add_CS (name _ba .PdfObjectName )*ContentCreator {_bce :=ContentStreamOperation {};_bce .Operand ="\u0043\u0053";_bce .Params =_cfcg ([]_ba .PdfObjectName {name });_cec ._eaf =append (_cec ._eaf ,&_bce );return _cec ;};func _fec (_cgae *ContentStreamInlineImage ,_ece *_ba .PdfObjectDictionary )(*_ba .LZWEncoder ,error ){_agb :=_ba .NewLZWEncoder ();
if _ece ==nil {if _cgae .DecodeParms !=nil {_cbcc ,_cbaa :=_ba .GetDict (_cgae .DecodeParms );if !_cbaa {_eg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_cgae .DecodeParms );
return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_ece =_cbcc ;};};if _ece ==nil {return _agb ,nil ;};_bgaf :=_ece .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");
if _bgaf !=nil {_deg ,_ageb :=_bgaf .(*_ba .PdfObjectInteger );if !_ageb {_eg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_bgaf );
return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_deg !=0&&*_deg !=1{return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");
};_agb .EarlyChange =int (*_deg );}else {_agb .EarlyChange =1;};_bgaf =_ece .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _bgaf !=nil {_bba ,_dfa :=_bgaf .(*_ba .PdfObjectInteger );if !_dfa {_eg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_bgaf );
return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_agb .Predictor =int (*_bba );};_bgaf =_ece .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _bgaf !=nil {_aca ,_edga :=_bgaf .(*_ba .PdfObjectInteger );if !_edga {_eg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_ae .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_agb .BitsPerComponent =int (*_aca );};if _agb .Predictor > 1{_agb .Columns =1;_bgaf =_ece .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _bgaf !=nil {_bcbc ,_dga :=_bgaf .(*_ba .PdfObjectInteger );if !_dga {return nil ,_ae .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_agb .Columns =int (*_bcbc );
};_agb .Colors =1;_bgaf =_ece .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _bgaf !=nil {_edeg ,_dac :=_bgaf .(*_ba .PdfObjectInteger );if !_dac {return nil ,_ae .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_agb .Colors =int (*_edeg );};};_eg .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_ece .String ());return _agb ,nil ;};func (_afgc *ContentStreamProcessor )handleCommand_sc (_bfdd *ContentStreamOperation ,_edd *_f .PdfPageResources )error {_bcfb :=_afgc ._cecb .ColorspaceNonStroking ;
if !_dabc (_bcfb ){if len (_bfdd .Params )!=_bcfb .GetNumComponents (){_eg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bfdd .Params ),_bcfb );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_aeeb ,_acaf :=_bcfb .ColorFromPdfObjects (_bfdd .Params );if _acaf !=nil {return _acaf ;};_afgc ._cecb .ColorNonStroking =_aeeb ;return nil ;};func (_bfea *ContentStreamParser )parseName ()(_ba .PdfObjectName ,error ){_fbee :="";_fff :=false ;for {_eegg ,_bgff :=_bfea ._agdga .Peek (1);
if _bgff ==_cc .EOF {break ;};if _bgff !=nil {return _ba .PdfObjectName (_fbee ),_bgff ;};if !_fff {if _eegg [0]=='/'{_fff =true ;_bfea ._agdga .ReadByte ();}else {_eg .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_eegg ,_eegg );
return _ba .PdfObjectName (_fbee ),_ae .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_eegg [0]);};}else {if _ba .IsWhiteSpace (_eegg [0]){break ;}else if (_eegg [0]=='/')||(_eegg [0]=='[')||(_eegg [0]=='(')||(_eegg [0]==']')||(_eegg [0]=='<')||(_eegg [0]=='>'){break ;
}else if _eegg [0]=='#'{_abec ,_cdd :=_bfea ._agdga .Peek (3);if _cdd !=nil {return _ba .PdfObjectName (_fbee ),_cdd ;};_bfea ._agdga .Discard (3);_gfge ,_cdd :=_c .DecodeString (string (_abec [1:3]));if _cdd !=nil {return _ba .PdfObjectName (_fbee ),_cdd ;
};_fbee +=string (_gfge );}else {_agcf ,_ :=_bfea ._agdga .ReadByte ();_fbee +=string (_agcf );};};};return _ba .PdfObjectName (_fbee ),nil ;};func _bgee (_cagf string )bool {_ ,_ffg :=_bff [_cagf ];return _ffg };

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_fa *ContentCreator )Wrap (){_fa ._eaf .WrapIfNeeded ()};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_acg *ContentCreator )Add_W_starred ()*ContentCreator {_gdb :=ContentStreamOperation {};_gdb .Operand ="\u0057\u002a";_acg ._eaf =append (_acg ._eaf ,&_gdb );return _acg ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ga *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_da :=ContentStreamOperation {};_da .Operand ="\u0076";_da .Params =_acf ([]float64 {x2 ,y2 ,x3 ,y3 });_ga ._eaf =append (_ga ._eaf ,&_da );return _ga ;};func (_dbgc *ContentStreamParser )skipSpaces ()(int ,error ){_eccf :=0;
for {_aaa ,_ded :=_dbgc ._agdga .Peek (1);if _ded !=nil {return 0,_ded ;};if _ba .IsWhiteSpace (_aaa [0]){_dbgc ._agdga .ReadByte ();_eccf ++;}else {break ;};};return _eccf ,nil ;};var (ErrInvalidOperand =_b .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
);

// RotateDeg applies a rotation to the transformation matrix.
func (_ceg *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_db :=_ab .Cos (angle *_ab .Pi /180.0);_bfb :=_ab .Sin (angle *_ab .Pi /180.0);_bgd :=-_ab .Sin (angle *_ab .Pi /180.0);_fdb :=_ab .Cos (angle *_ab .Pi /180.0);return _ceg .Add_cm (_db ,_bfb ,_bgd ,_fdb ,0,0);
};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_ccfd GraphicStateStack ;_fcfb []*ContentStreamOperation ;_cecb GraphicsState ;_bgfc []handlerEntry ;_eage int ;};func (_ffag *ContentStreamProcessor )handleCommand_cs (_fade *ContentStreamOperation ,_fggc *_f .PdfPageResources )error {if len (_fade .Params )< 1{_eg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _b .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_fade .Params )> 1{_eg .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _b .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_eda ,_ebfg :=_fade .Params [0].(*_ba .PdfObjectName );if !_ebfg {_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_bbf ,_ddde :=_ffag .getColorspace (string (*_eda ),_fggc );if _ddde !=nil {return _ddde ;};_ffag ._cecb .ColorspaceNonStroking =_bbf ;_bddd ,_ddde :=_ffag .getInitialColor (_bbf );
if _ddde !=nil {return _ddde ;};_ffag ._cecb .ColorNonStroking =_bddd ;return nil ;};func (_bfgd *ContentStreamParser )parseNull ()(_ba .PdfObjectNull ,error ){_ ,_fcd :=_bfgd ._agdga .Discard (4);return _ba .PdfObjectNull {},_fcd ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cgc *ContentCreator )Add_scn_pattern (name _ba .PdfObjectName ,c ...float64 )*ContentCreator {_cfa :=ContentStreamOperation {};_cfa .Operand ="\u0073\u0063\u006e";_cfa .Params =_acf (c );_cfa .Params =append (_cfa .Params ,_ba .MakeName (string (name )));
_cgc ._eaf =append (_cgc ._eaf ,&_cfa );return _cgc ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dbf *ContentCreator )Add_Tf (fontName _ba .PdfObjectName ,fontSize float64 )*ContentCreator {_geb :=ContentStreamOperation {};_geb .Operand ="\u0054\u0066";_geb .Params =_cfcg ([]_ba .PdfObjectName {fontName });_geb .Params =append (_geb .Params ,_acf ([]float64 {fontSize })...);
_dbf ._eaf =append (_dbf ._eaf ,&_geb );return _dbf ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_bgab *GraphicStateStack )Pop ()GraphicsState {_fgb :=(*_bgab )[len (*_bgab )-1];*_bgab =(*_bgab )[:len (*_bgab )-1];return _fgb ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_bcc *ContentCreator )Add_EMC ()*ContentCreator {_babb :=ContentStreamOperation {};_babb .Operand ="\u0045\u004d\u0043";_bcc ._eaf =append (_bcc ._eaf ,&_babb );return _bcc ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_edee *ContentStreamInlineImage )IsMask ()(bool ,error ){if _edee .ImageMask !=nil {_ddd ,_cdc :=_edee .ImageMask .(*_ba .PdfObjectBool );if !_cdc {_eg .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");
return false ,_b .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_ddd ),nil ;};return false ,nil ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ebe *ContentCreator )Add_Q ()*ContentCreator {_gcc :=ContentStreamOperation {};_gcc .Operand ="\u0051";_ebe ._eaf =append (_ebe ._eaf ,&_gcc );return _ebe ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dfg *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_dfe :=ContentStreamOperation {};_dfe .Operand ="\u0053\u0043\u004e";_dfe .Params =_acf (c );_dfg ._eaf =append (_dfg ._eaf ,&_dfe );return _dfg ;};func _daa (_aga *ContentStreamInlineImage ,_ebc *_ba .PdfObjectDictionary )(*_ba .FlateEncoder ,error ){_fce :=_ba .NewFlateEncoder ();
if _aga ._ebd !=nil {_fce .SetImage (_aga ._ebd );};if _ebc ==nil {_add :=_aga .DecodeParms ;if _add !=nil {_ggeef ,_aaeg :=_ba .GetDict (_add );if !_aaeg {_eg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_add );
return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_ebc =_ggeef ;};};if _ebc ==nil {return _fce ,nil ;};_eg .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_ebc .String ());
_edg :=_ebc .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _edg ==nil {_eg .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");
}else {_gbf ,_gce :=_edg .(*_ba .PdfObjectInteger );if !_gce {_eg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_edg );
return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_fce .Predictor =int (*_gbf );};_edg =_ebc .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _edg !=nil {_cffb ,_egda :=_edg .(*_ba .PdfObjectInteger );if !_egda {_eg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_ae .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_fce .BitsPerComponent =int (*_cffb );};if _fce .Predictor > 1{_fce .Columns =1;_edg =_ebc .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _edg !=nil {_ged ,_geaf :=_edg .(*_ba .PdfObjectInteger );if !_geaf {return nil ,_ae .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_fce .Columns =int (*_ged );
};_fce .Colors =1;_dae :=_ebc .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dae !=nil {_gdf ,_gccb :=_dae .(*_ba .PdfObjectInteger );if !_gccb {return nil ,_ae .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_fce .Colors =int (*_gdf );};};return _fce ,nil ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_eaf ContentStreamOperations };

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ceb *ContentCreator )Add_g (gray float64 )*ContentCreator {_cfg :=ContentStreamOperation {};_cfg .Operand ="\u0067";_cfg .Params =_acf ([]float64 {gray });_ceb ._eaf =append (_ceb ._eaf ,&_cfg );return _ceb ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_eaec *ContentStreamInlineImage )ToImage (resources *_f .PdfPageResources )(*_f .Image ,error ){_caa ,_adg :=_eaec .toImageBase (resources );if _adg !=nil {return nil ,_adg ;};_cedg ,_adg :=_cbc (_eaec );if _adg !=nil {return nil ,_adg ;};_ffaa ,_gfe :=_ba .GetDict (_eaec .DecodeParms );
if _gfe {_cedg .UpdateParams (_ffaa );};_eg .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_cedg ,_cedg );_eg .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_eaec );
_bfeda ,_adg :=_cedg .DecodeBytes (_eaec ._eae );if _adg !=nil {return nil ,_adg ;};_fcg :=&_f .Image {Width :int64 (_caa .Width ),Height :int64 (_caa .Height ),BitsPerComponent :int64 (_caa .BitsPerComponent ),ColorComponents :_caa .ColorComponents ,Data :_bfeda };
if len (_caa .Decode )> 0{for _agae :=0;_agae < len (_caa .Decode );_agae ++{_caa .Decode [_agae ]*=float64 ((int (1)<<uint (_caa .BitsPerComponent ))-1);};_fcg .SetDecode (_caa .Decode );};return _fcg ,nil ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_gbc *ContentCreator )SetNonStrokingColor (color _f .PdfColor )*ContentCreator {switch _eea :=color .(type ){case *_f .PdfColorDeviceGray :_gbc .Add_g (_eea .Val ());case *_f .PdfColorDeviceRGB :_gbc .Add_rg (_eea .R (),_eea .G (),_eea .B ());case *_f .PdfColorDeviceCMYK :_gbc .Add_k (_eea .C (),_eea .M (),_eea .Y (),_eea .K ());
default:_eg .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_eea );
};return _gbc ;};func (_cab *ContentStreamInlineImage )toImageBase (_aafb *_f .PdfPageResources )(*_g .ImageBase ,error ){if _cab ._ebd !=nil {return _cab ._ebd ,nil ;};_gdfg :=_g .ImageBase {};if _cab .Height ==nil {return nil ,_b .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_fbd ,_efde :=_cab .Height .(*_ba .PdfObjectInteger );if !_efde {return nil ,_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_gdfg .Height =int (*_fbd );if _cab .Width ==nil {return nil ,_b .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_gbd ,_efde :=_cab .Width .(*_ba .PdfObjectInteger );if !_efde {return nil ,_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_gdfg .Width =int (*_gbd );_abdbc ,_dgg :=_cab .IsMask ();if _dgg !=nil {return nil ,_dgg ;
};if _abdbc {_gdfg .BitsPerComponent =1;_gdfg .ColorComponents =1;}else {if _cab .BitsPerComponent ==nil {_eg .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");
_gdfg .BitsPerComponent =8;}else {_ffa ,_fgg :=_cab .BitsPerComponent .(*_ba .PdfObjectInteger );if !_fgg {_eg .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cab .BitsPerComponent );
return nil ,_b .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_gdfg .BitsPerComponent =int (*_ffa );};if _cab .ColorSpace !=nil {_cag ,_bdc :=_cab .GetColorSpace (_aafb );if _bdc !=nil {return nil ,_bdc ;};_gdfg .ColorComponents =_cag .GetNumComponents ();
}else {_eg .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
_gdfg .ColorComponents =1;};};if _abg ,_geba :=_ba .GetArray (_cab .Decode );_geba {_gdfg .Decode ,_dgg =_abg .ToFloat64Array ();if _dgg !=nil {return nil ,_dgg ;};};_cab ._ebd =&_gdfg ;return _cab ._ebd ,nil ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bfbf *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_gfg :=ContentStreamOperation {};_gfg .Operand ="\u0064";_gfg .Params =[]_ba .PdfObject {};_gfg .Params =append (_gfg .Params ,_ba .MakeArrayFromIntegers64 (dashArray ));
_gfg .Params =append (_gfg .Params ,_ba .MakeInteger (dashPhase ));_bfbf ._eaf =append (_bfbf ._eaf ,&_gfg );return _bfbf ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ggba *ContentCreator )Add_f_starred ()*ContentCreator {_geg :=ContentStreamOperation {};_geg .Operand ="\u0066\u002a";_ggba ._eaf =append (_ggba ._eaf ,&_geg );return _ggba ;};func (_dedf *ContentStreamProcessor )handleCommand_K (_aaba *ContentStreamOperation ,_daag *_f .PdfPageResources )error {_cdaa :=_f .NewPdfColorspaceDeviceCMYK ();
if len (_aaba .Params )!=_cdaa .GetNumComponents (){_eg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aaba .Params ),_cdaa );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_effe ,_fcga :=_cdaa .ColorFromPdfObjects (_aaba .Params );if _fcga !=nil {return _fcga ;};_dedf ._cecb .ColorspaceStroking =_cdaa ;_dedf ._cecb .ColorStroking =_effe ;return nil ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_faf *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_ggd :=ContentStreamOperation {};_ggd .Operand ="\u004b";_ggd .Params =_acf ([]float64 {c ,m ,y ,k });_faf ._eaf =append (_faf ._eaf ,&_ggd );return _faf ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ecb *ContentCreator )Add_f ()*ContentCreator {_ced :=ContentStreamOperation {};_ced .Operand ="\u0066";_ecb ._eaf =append (_ecb ._eaf ,&_ced );return _ecb ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ad *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_cba :=ContentStreamOperation {};_cba .Operand ="\u0052\u0047";_cba .Params =_acf ([]float64 {r ,g ,b });_ad ._eaf =append (_ad ._eaf ,&_cba );return _ad ;};func (_fafc *ContentStreamParser )parseDict ()(*_ba .PdfObjectDictionary ,error ){_eg .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");
_dabb :=_ba .MakeDict ();_cgbg ,_ :=_fafc ._agdga .ReadByte ();if _cgbg !='<'{return nil ,_b .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_cgbg ,_ =_fafc ._agdga .ReadByte ();if _cgbg !='<'{return nil ,_b .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
};for {_fafc .skipSpaces ();_bfff ,_gaeg :=_fafc ._agdga .Peek (2);if _gaeg !=nil {return nil ,_gaeg ;};_eg .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_bfff ),string (_bfff ));
if (_bfff [0]=='>')&&(_bfff [1]=='>'){_eg .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_fafc ._agdga .ReadByte ();_fafc ._agdga .ReadByte ();break ;};_eg .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");
_degg ,_gaeg :=_fafc .parseName ();_eg .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_degg );if _gaeg !=nil {_eg .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_gaeg );
return nil ,_gaeg ;};if len (_degg )> 4&&_degg [len (_degg )-4:]=="\u006e\u0075\u006c\u006c"{_ccaf :=_degg [0:len (_degg )-4];_eg .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_degg );
_eg .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_ccaf );_fafc .skipSpaces ();_efbe ,_ :=_fafc ._agdga .Peek (1);if _efbe [0]=='/'{_dabb .Set (_ccaf ,_ba .MakeNull ());continue ;
};};_fafc .skipSpaces ();_cbec ,_ ,_gaeg :=_fafc .parseObject ();if _gaeg !=nil {return nil ,_gaeg ;};_dabb .Set (_degg ,_cbec );_eg .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_degg ,_cbec .String ());
};return _dabb ,nil ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_egaa *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_fcgb :=handlerEntry {};_fcgb .Condition =condition ;_fcgb .Operand =operand ;_fcgb .Handler =handler ;_egaa ._bgfc =append (_egaa ._bgfc ,_fcgb );
};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_efd *ContentCreator )SetStrokingColor (color _f .PdfColor )*ContentCreator {switch _afb :=color .(type ){case *_f .PdfColorDeviceGray :_efd .Add_G (_afb .Val ());case *_f .PdfColorDeviceRGB :_efd .Add_RG (_afb .R (),_afb .G (),_afb .B ());case *_f .PdfColorDeviceCMYK :_efd .Add_K (_afb .C (),_afb .M (),_afb .Y (),_afb .K ());
default:_eg .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_afb );
};return _efd ;};var _bff =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};
func (_dabca *ContentStreamProcessor )handleCommand_scn (_ccab *ContentStreamOperation ,_cedd *_f .PdfPageResources )error {_fece :=_dabca ._cecb .ColorspaceNonStroking ;if !_dabc (_fece ){if len (_ccab .Params )!=_fece .GetNumComponents (){_eg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ccab .Params ),_fece );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_faff ,_gcga :=_fece .ColorFromPdfObjects (_ccab .Params );if _gcga !=nil {_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_ccab .Params ,_fece );
return _gcga ;};_dabca ._cecb .ColorNonStroking =_faff ;return nil ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bcb *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_ge :=ContentStreamOperation {};_ge .Operand ="\u0072\u0065";_ge .Params =_acf ([]float64 {x ,y ,width ,height });_bcb ._eaf =append (_bcb ._eaf ,&_ge );return _bcb ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bfed *ContentCreator )Add_Tr (render int64 )*ContentCreator {_adb :=ContentStreamOperation {};_adb .Operand ="\u0054\u0072";_adb .Params =_baff ([]int64 {render });_bfed ._eaf =append (_bfed ._eaf ,&_adb );return _bfed ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bd *ContentCreator )Add_B_starred ()*ContentCreator {_ggee :=ContentStreamOperation {};_ggee .Operand ="\u0042\u002a";_bd ._eaf =append (_bd ._eaf ,&_ggee );return _bd ;};func _baff (_daea []int64 )[]_ba .PdfObject {var _dcc []_ba .PdfObject ;for _ ,_aeba :=range _daea {_dcc =append (_dcc ,_ba .MakeInteger (_aeba ));
};return _dcc ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_bec *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _bec .CTM .Transform (x ,y );};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_aaf *ContentCreator )Add_sh (name _ba .PdfObjectName )*ContentCreator {_efc :=ContentStreamOperation {};_efc .Operand ="\u0073\u0068";_efc .Params =_cfcg ([]_ba .PdfObjectName {name });_aaf ._eaf =append (_aaf ._eaf ,&_efc );return _aaf ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_eaa *ContentCreator )Add_quotes (textstr _ba .PdfObjectString ,aw ,ac float64 )*ContentCreator {_abd :=ContentStreamOperation {};_abd .Operand ="\u0022";_abd .Params =_acf ([]float64 {aw ,ac });_abd .Params =append (_abd .Params ,_adef ([]_ba .PdfObjectString {textstr })...);
_eaa ._eaf =append (_eaa ._eaf ,&_abd );return _eaa ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_ff *ContentStreamParser )ExtractText ()(string ,error ){_gf ,_dcg :=_ff .Parse ();if _dcg !=nil {return "",_dcg ;};_cee :=false ;_gb ,_gca :=float64 (-1),float64 (-1);_ca :="";for _ ,_bc :=range *_gf {if _bc .Operand =="\u0042\u0054"{_cee =true ;
}else if _bc .Operand =="\u0045\u0054"{_cee =false ;};if _bc .Operand =="\u0054\u0064"||_bc .Operand =="\u0054\u0044"||_bc .Operand =="\u0054\u002a"{_ca +="\u000a";};if _bc .Operand =="\u0054\u006d"{if len (_bc .Params )!=6{continue ;};_gd ,_gfa :=_bc .Params [4].(*_ba .PdfObjectFloat );
if !_gfa {_gbe ,_af :=_bc .Params [4].(*_ba .PdfObjectInteger );if !_af {continue ;};_gd =_ba .MakeFloat (float64 (*_gbe ));};_cf ,_gfa :=_bc .Params [5].(*_ba .PdfObjectFloat );if !_gfa {_cff ,_fba :=_bc .Params [5].(*_ba .PdfObjectInteger );if !_fba {continue ;
};_cf =_ba .MakeFloat (float64 (*_cff ));};if _gca ==-1{_gca =float64 (*_cf );}else if _gca > float64 (*_cf ){_ca +="\u000a";_gb =float64 (*_gd );_gca =float64 (*_cf );continue ;};if _gb ==-1{_gb =float64 (*_gd );}else if _gb < float64 (*_gd ){_ca +="\u0009";
_gb =float64 (*_gd );};};if _cee &&_bc .Operand =="\u0054\u004a"{if len (_bc .Params )< 1{continue ;};_ggf ,_efa :=_bc .Params [0].(*_ba .PdfObjectArray );if !_efa {return "",_ae .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_bc .Params [0]);
};for _ ,_eeg :=range _ggf .Elements (){switch _fd :=_eeg .(type ){case *_ba .PdfObjectString :_ca +=_fd .Str ();case *_ba .PdfObjectFloat :if *_fd < -100{_ca +="\u0020";};case *_ba .PdfObjectInteger :if *_fd < -100{_ca +="\u0020";};};};}else if _cee &&_bc .Operand =="\u0054\u006a"{if len (_bc .Params )< 1{continue ;
};_eb ,_egg :=_bc .Params [0].(*_ba .PdfObjectString );if !_egg {return "",_ae .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_bc .Params [0]);
};_ca +=_eb .Str ();};};return _ca ,nil ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_agdg *ContentCreator )Add_SCN_pattern (name _ba .PdfObjectName ,c ...float64 )*ContentCreator {_bfg :=ContentStreamOperation {};_bfg .Operand ="\u0053\u0043\u004e";_bfg .Params =_acf (c );_bfg .Params =append (_bfg .Params ,_ba .MakeName (string (name )));
_agdg ._eaf =append (_agdg ._eaf ,&_bfg );return _agdg ;};func _afg (_aed *ContentStreamInlineImage )(*_ba .MultiEncoder ,error ){_bbda :=_ba .NewMultiEncoder ();var _bcf *_ba .PdfObjectDictionary ;var _gfdg []_ba .PdfObject ;if _ffb :=_aed .DecodeParms ;
_ffb !=nil {_bbdb ,_gged :=_ffb .(*_ba .PdfObjectDictionary );if _gged {_bcf =_bbdb ;};_ccae ,_egdc :=_ffb .(*_ba .PdfObjectArray );if _egdc {for _ ,_dfd :=range _ccae .Elements (){if _dgb ,_aab :=_dfd .(*_ba .PdfObjectDictionary );_aab {_gfdg =append (_gfdg ,_dgb );
}else {_gfdg =append (_gfdg ,nil );};};};};_gafb :=_aed .Filter ;if _gafb ==nil {return nil ,_ae .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_fbe ,_dbg :=_gafb .(*_ba .PdfObjectArray );if !_dbg {return nil ,_ae .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");
};for _fab ,_ccfe :=range _fbe .Elements (){_dca ,_dfdb :=_ccfe .(*_ba .PdfObjectName );if !_dfdb {return nil ,_ae .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");
};var _afgb _ba .PdfObject ;if _bcf !=nil {_afgb =_bcf ;}else {if len (_gfdg )> 0{if _fab >=len (_gfdg ){return nil ,_ae .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");
};_afgb =_gfdg [_fab ];};};var _gcf *_ba .PdfObjectDictionary ;if _ggc ,_aad :=_afgb .(*_ba .PdfObjectDictionary );_aad {_gcf =_ggc ;};if *_dca ==_ba .StreamEncodingFilterNameFlate ||*_dca =="\u0046\u006c"{_egf ,_efdf :=_daa (_aed ,_gcf );if _efdf !=nil {return nil ,_efdf ;
};_bbda .AddEncoder (_egf );}else if *_dca ==_ba .StreamEncodingFilterNameLZW {_ecec ,_aade :=_fec (_aed ,_gcf );if _aade !=nil {return nil ,_aade ;};_bbda .AddEncoder (_ecec );}else if *_dca ==_ba .StreamEncodingFilterNameASCIIHex {_bged :=_ba .NewASCIIHexEncoder ();
_bbda .AddEncoder (_bged );}else if *_dca ==_ba .StreamEncodingFilterNameASCII85 ||*_dca =="\u0041\u0038\u0035"{_bdab :=_ba .NewASCII85Encoder ();_bbda .AddEncoder (_bdab );}else {_eg .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_dca );
return nil ,_ae .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _bbda ,nil ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _ba .PdfObject ;ColorSpace _ba .PdfObject ;Decode _ba .PdfObject ;DecodeParms _ba .PdfObject ;Filter _ba .PdfObject ;Height _ba .PdfObject ;ImageMask _ba .PdfObject ;Intent _ba .PdfObject ;Interpolate _ba .PdfObject ;
Width _ba .PdfObject ;_eae []byte ;_ebd *_g .ImageBase ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_agdga *_ed .Reader };func (_bag *ContentStreamOperations )isWrapped ()bool {if len (*_bag )< 2{return false ;};_d :=0;for _ ,_ec :=range *_bag {if _ec .Operand =="\u0071"{_d ++;}else if _ec .Operand =="\u0051"{_d --;}else {if _d < 1{return false ;
};};};return _d ==0;};func (_fad *ContentStreamInlineImage )String ()string {_bdef :=_ae .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_fad ._eae ));if _fad .BitsPerComponent !=nil {_bdef +="\u002d\u0020\u0042\u0050\u0043\u0020"+_fad .BitsPerComponent .WriteString ()+"\u000a";
};if _fad .ColorSpace !=nil {_bdef +="\u002d\u0020\u0043S\u0020"+_fad .ColorSpace .WriteString ()+"\u000a";};if _fad .Decode !=nil {_bdef +="\u002d\u0020\u0044\u0020"+_fad .Decode .WriteString ()+"\u000a";};if _fad .DecodeParms !=nil {_bdef +="\u002d\u0020\u0044P\u0020"+_fad .DecodeParms .WriteString ()+"\u000a";
};if _fad .Filter !=nil {_bdef +="\u002d\u0020\u0046\u0020"+_fad .Filter .WriteString ()+"\u000a";};if _fad .Height !=nil {_bdef +="\u002d\u0020\u0048\u0020"+_fad .Height .WriteString ()+"\u000a";};if _fad .ImageMask !=nil {_bdef +="\u002d\u0020\u0049M\u0020"+_fad .ImageMask .WriteString ()+"\u000a";
};if _fad .Intent !=nil {_bdef +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_fad .Intent .WriteString ()+"\u000a";};if _fad .Interpolate !=nil {_bdef +="\u002d\u0020\u0049\u0020"+_fad .Interpolate .WriteString ()+"\u000a";};if _fad .Width !=nil {_bdef +="\u002d\u0020\u0057\u0020"+_fad .Width .WriteString ()+"\u000a";
};return _bdef ;};func (_cfae *ContentStreamProcessor )handleCommand_CS (_dgf *ContentStreamOperation ,_bfege *_f .PdfPageResources )error {if len (_dgf .Params )< 1{_eg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _b .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_dgf .Params )> 1{_eg .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _b .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_bfbe ,_fac :=_dgf .Params [0].(*_ba .PdfObjectName );if !_fac {_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_abc ,_bfag :=_cfae .getColorspace (string (*_bfbe ),_bfege );if _bfag !=nil {return _bfag ;};_cfae ._cecb .ColorspaceStroking =_abc ;_ebcb ,_bfag :=_cfae .getInitialColor (_abc );
if _bfag !=nil {return _bfag ;};_cfae ._cecb .ColorStroking =_ebcb ;return nil ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gfd *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_fcb :=ContentStreamOperation {};_fcb .Operand ="\u004d";_fcb .Params =_acf ([]float64 {miterlimit });_gfd ._eaf =append (_gfd ._eaf ,&_fcb );return _gfd ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_adf *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_gaf :=ContentStreamOperation {};_gaf .Operand ="\u0054\u0077";_gaf .Params =_acf ([]float64 {wordSpace });_adf ._eaf =append (_adf ._eaf ,&_gaf );return _adf ;};func _ggeda (_egcfb _ba .PdfObject )(_f .PdfColorspace ,error ){_gdd ,_bbbf :=_egcfb .(*_ba .PdfObjectArray );
if !_bbbf {_eg .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_egcfb );
return nil ,_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _gdd .Len ()!=4{_eg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_gdd .Len ());
return nil ,_b .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_bfad ,_bbbf :=_gdd .Get (0).(*_ba .PdfObjectName );if !_bbbf {_eg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_gdd );
return nil ,_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_bfad !="\u0049"&&*_bfad !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_eg .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_bfad );
return nil ,_b .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_bfad ,_bbbf =_gdd .Get (1).(*_ba .PdfObjectName );if !_bbbf {_eg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_gdd );
return nil ,_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_bfad !="\u0047"&&*_bfad !="\u0052\u0047\u0042"&&*_bfad !="\u0043\u004d\u0059\u004b"&&*_bfad !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_bfad !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_bfad !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_eg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_bfad );
return nil ,_b .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fabe :="";switch *_bfad {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_fabe ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_fabe ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_fabe ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};_cfde :=_ba .MakeArray (_ba .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_ba .MakeName (_fabe ),_gdd .Get (2),_gdd .Get (3));return _f .NewPdfColorspaceFromPdfObject (_cfde );};func (_ccbe *ContentStreamProcessor )handleCommand_rg (_egcf *ContentStreamOperation ,_faae *_f .PdfPageResources )error {_ccff :=_f .NewPdfColorspaceDeviceRGB ();
if len (_egcf .Params )!=_ccff .GetNumComponents (){_eg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_egcf .Params ),_ccff );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_gbca ,_eeb :=_ccff .ColorFromPdfObjects (_egcf .Params );if _eeb !=nil {return _eeb ;};_ccbe ._cecb .ColorspaceNonStroking =_ccff ;_ccbe ._cecb .ColorNonStroking =_gbca ;return nil ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ggb *ContentCreator )Add_gs (dictName _ba .PdfObjectName )*ContentCreator {_fcf :=ContentStreamOperation {};_fcf .Operand ="\u0067\u0073";_fcf .Params =_cfcg ([]_ba .PdfObjectName {dictName });_ggb ._eaf =append (_ggb ._eaf ,&_fcf );return _ggb ;
};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_ba .PdfObject ;Operand string ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fc *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_eef :=ContentStreamOperation {};_eef .Operand ="\u0063\u006d";_eef .Params =_acf ([]float64 {a ,b ,c ,d ,e ,f });_fc ._eaf =append (_fc ._eaf ,&_eef );return _fc ;};func (_gadg *ContentStreamParser )parseString ()(*_ba .PdfObjectString ,error ){_gadg ._agdga .ReadByte ();
var _cgg []byte ;_bdfe :=1;for {_ada ,_dbfa :=_gadg ._agdga .Peek (1);if _dbfa !=nil {return _ba .MakeString (string (_cgg )),_dbfa ;};if _ada [0]=='\\'{_gadg ._agdga .ReadByte ();_fee ,_afdf :=_gadg ._agdga .ReadByte ();if _afdf !=nil {return _ba .MakeString (string (_cgg )),_afdf ;
};if _ba .IsOctalDigit (_fee ){_dad ,_dfdd :=_gadg ._agdga .Peek (2);if _dfdd !=nil {return _ba .MakeString (string (_cgg )),_dfdd ;};var _dgdb []byte ;_dgdb =append (_dgdb ,_fee );for _ ,_cgag :=range _dad {if _ba .IsOctalDigit (_cgag ){_dgdb =append (_dgdb ,_cgag );
}else {break ;};};_gadg ._agdga .Discard (len (_dgdb )-1);_eg .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_dgdb );_gege ,_dfdd :=_a .ParseUint (string (_dgdb ),8,32);if _dfdd !=nil {return _ba .MakeString (string (_cgg )),_dfdd ;
};_cgg =append (_cgg ,byte (_gege ));continue ;};switch _fee {case 'n':_cgg =append (_cgg ,'\n');case 'r':_cgg =append (_cgg ,'\r');case 't':_cgg =append (_cgg ,'\t');case 'b':_cgg =append (_cgg ,'\b');case 'f':_cgg =append (_cgg ,'\f');case '(':_cgg =append (_cgg ,'(');
case ')':_cgg =append (_cgg ,')');case '\\':_cgg =append (_cgg ,'\\');};continue ;}else if _ada [0]=='('{_bdfe ++;}else if _ada [0]==')'{_bdfe --;if _bdfe ==0{_gadg ._agdga .ReadByte ();break ;};};_afe ,_ :=_gadg ._agdga .ReadByte ();_cgg =append (_cgg ,_afe );
};return _ba .MakeString (string (_cgg )),nil ;};func (_fde *ContentStreamProcessor )handleCommand_g (_cfc *ContentStreamOperation ,_ecad *_f .PdfPageResources )error {_caf :=_f .NewPdfColorspaceDeviceGray ();if len (_cfc .Params )!=_caf .GetNumComponents (){_eg .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");
_eg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cfc .Params ),_caf );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_cda ,_bed :=_caf .ColorFromPdfObjects (_cfc .Params );if _bed !=nil {_eg .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_caf ,_cfc ,_bed );
return _bed ;};_fde ._cecb .ColorspaceNonStroking =_caf ;_fde ._cecb .ColorNonStroking =_cda ;return nil ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_dd *ContentCreator )Bytes ()[]byte {return _dd ._eaf .Bytes ()};

// GetEncoder returns the encoder of the inline image.
func (_gbg *ContentStreamInlineImage )GetEncoder ()(_ba .StreamEncoder ,error ){return _cbc (_gbg )};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_efg *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_dcgd :=ContentStreamOperation {};_dcgd .Operand ="\u0054\u0063";_dcgd .Params =_acf ([]float64 {charSpace });_efg ._eaf =append (_efg ._eaf ,&_dcgd );return _efg ;};func _fbg (_fbc *ContentStreamInlineImage )(*_ba .DCTEncoder ,error ){_ggdd :=_ba .NewDCTEncoder ();
_cgd :=_bb .NewReader (_fbc ._eae );_fagf ,_aecc :=_ag .DecodeConfig (_cgd );if _aecc !=nil {_eg .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_aecc );return nil ,_aecc ;
};switch _fagf .ColorModel {case _bf .RGBAModel :_ggdd .BitsPerComponent =8;_ggdd .ColorComponents =3;case _bf .RGBA64Model :_ggdd .BitsPerComponent =16;_ggdd .ColorComponents =3;case _bf .GrayModel :_ggdd .BitsPerComponent =8;_ggdd .ColorComponents =1;
case _bf .Gray16Model :_ggdd .BitsPerComponent =16;_ggdd .ColorComponents =1;case _bf .CMYKModel :_ggdd .BitsPerComponent =8;_ggdd .ColorComponents =4;case _bf .YCbCrModel :_ggdd .BitsPerComponent =8;_ggdd .ColorComponents =3;default:return nil ,_b .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");
};_ggdd .Width =_fagf .Width ;_ggdd .Height =_fagf .Height ;_eg .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_ggdd );return _ggdd ,nil ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_eaca *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_aec :=ContentStreamOperation {};_aec .Operand ="\u0054\u0044";_aec .Params =_acf ([]float64 {tx ,ty });_eaca ._eaf =append (_eaca ._eaf ,&_aec );return _eaca ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _f .PdfColorspace ;ColorspaceNonStroking _f .PdfColorspace ;ColorStroking _f .PdfColor ;ColorNonStroking _f .PdfColor ;CTM _agd .Matrix ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_agge *ContentCreator )Add_quote (textstr _ba .PdfObjectString )*ContentCreator {_abb :=ContentStreamOperation {};_abb .Operand ="\u0027";_abb .Params =_adef ([]_ba .PdfObjectString {textstr });_agge ._eaf =append (_agge ._eaf ,&_abb );return _agge ;
};func (_gef *ContentStreamParser )parseBool ()(_ba .PdfObjectBool ,error ){_ebcf ,_febe :=_gef ._agdga .Peek (4);if _febe !=nil {return _ba .PdfObjectBool (false ),_febe ;};if (len (_ebcf )>=4)&&(string (_ebcf [:4])=="\u0074\u0072\u0075\u0065"){_gef ._agdga .Discard (4);
return _ba .PdfObjectBool (true ),nil ;};_ebcf ,_febe =_gef ._agdga .Peek (5);if _febe !=nil {return _ba .PdfObjectBool (false ),_febe ;};if (len (_ebcf )>=5)&&(string (_ebcf [:5])=="\u0066\u0061\u006cs\u0065"){_gef ._agdga .Discard (5);return _ba .PdfObjectBool (false ),nil ;
};return _ba .PdfObjectBool (false ),_b .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cca *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_dgd :=ContentStreamOperation {};_dgd .Operand ="\u0054\u006d";_dgd .Params =_acf ([]float64 {a ,b ,c ,d ,e ,f });_cca ._eaf =append (_cca ._eaf ,&_dgd );return _cca ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_gge *ContentCreator )Add_Do (name _ba .PdfObjectName )*ContentCreator {_bbe :=ContentStreamOperation {};_bbe .Operand ="\u0044\u006f";_bbe .Params =_cfcg ([]_ba .PdfObjectName {name });_gge ._eaf =append (_gge ._eaf ,&_bbe );return _gge ;};

// AddOperand adds a specified operand.
func (_ede *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_ede ._eaf =append (_ede ._eaf ,&op );return _ede ;};func _acf (_aeb []float64 )[]_ba .PdfObject {var _abee []_ba .PdfObject ;for _ ,_bcfe :=range _aeb {_abee =append (_abee ,_ba .MakeFloat (_bcfe ));
};return _abee ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_gg *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_gg )==0{return _gg ;};if _gg .isWrapped (){return _gg ;};*_gg =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_gg ...);_ee :=0;for _ ,_bbc :=range *_gg {if _bbc .Operand =="\u0071"{_ee ++;
}else if _bbc .Operand =="\u0051"{_ee --;};};for _ee > 0{*_gg =append (*_gg ,&ContentStreamOperation {Operand :"\u0051"});_ee --;};return _gg ;};func (_efdc *ContentStreamParser )parseOperand ()(*_ba .PdfObjectString ,error ){var _dfaa []byte ;for {_faa ,_cggf :=_efdc ._agdga .Peek (1);
if _cggf !=nil {return _ba .MakeString (string (_dfaa )),_cggf ;};if _ba .IsDelimiter (_faa [0]){break ;};if _ba .IsWhiteSpace (_faa [0]){break ;};_cbccf ,_ :=_efdc ._agdga .ReadByte ();_dfaa =append (_dfaa ,_cbccf );};return _ba .MakeString (string (_dfaa )),nil ;
};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_df *ContentCreator )Add_i (flatness float64 )*ContentCreator {_bbd :=ContentStreamOperation {};_bbd .Operand ="\u0069";_bbd .Params =_acf ([]float64 {flatness });_df ._eaf =append (_df ._eaf ,&_bbd );return _df ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Parse parses all commands in content stream, returning a list of operation data.
func (_cbg *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_efb :=ContentStreamOperations {};for {_ceda :=ContentStreamOperation {};for {_ega ,_bdf ,_ade :=_cbg .parseObject ();if _ade !=nil {if _ade ==_cc .EOF {return &_efb ,nil ;};return &_efb ,_ade ;
};if _bdf {_ceda .Operand ,_ =_ba .GetStringVal (_ega );_efb =append (_efb ,&_ceda );break ;}else {_ceda .Params =append (_ceda .Params ,_ega );};};if _ceda .Operand =="\u0042\u0049"{_bgaa ,_gffb :=_cbg .ParseInlineImage ();if _gffb !=nil {return &_efb ,_gffb ;
};_ceda .Params =append (_ceda .Params ,_bgaa );};};};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_abe *ContentCreator )Add_s ()*ContentCreator {_gda :=ContentStreamOperation {};_gda .Operand ="\u0073";_abe ._eaf =append (_abe ._eaf ,&_gda );return _abe ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gea *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_bde :=ContentStreamOperation {};_bde .Operand ="\u0054\u0073";_bde .Params =_acf ([]float64 {rise });_gea ._eaf =append (_gea ._eaf ,&_bde );return _gea ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cfdc *ContentCreator )Add_TL (leading float64 )*ContentCreator {_bda :=ContentStreamOperation {};_bda .Operand ="\u0054\u004c";_bda .Params =_acf ([]float64 {leading });_cfdc ._eaf =append (_cfdc ._eaf ,&_bda );return _cfdc ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;
HandlerConditionEnumAllOperands ;);

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bab *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_gfgd :=ContentStreamOperation {};_gfgd .Operand ="\u006c";_gfgd .Params =_acf ([]float64 {x ,y });_bab ._eaf =append (_bab ._eaf ,&_gfgd );return _bab ;};

// WriteString outputs the object as it is to be written to file.
func (_ffd *ContentStreamInlineImage )WriteString ()string {var _daf _bb .Buffer ;_fdfe :="";if _ffd .BitsPerComponent !=nil {_fdfe +="\u002f\u0042\u0050C\u0020"+_ffd .BitsPerComponent .WriteString ()+"\u000a";};if _ffd .ColorSpace !=nil {_fdfe +="\u002f\u0043\u0053\u0020"+_ffd .ColorSpace .WriteString ()+"\u000a";
};if _ffd .Decode !=nil {_fdfe +="\u002f\u0044\u0020"+_ffd .Decode .WriteString ()+"\u000a";};if _ffd .DecodeParms !=nil {_fdfe +="\u002f\u0044\u0050\u0020"+_ffd .DecodeParms .WriteString ()+"\u000a";};if _ffd .Filter !=nil {_fdfe +="\u002f\u0046\u0020"+_ffd .Filter .WriteString ()+"\u000a";
};if _ffd .Height !=nil {_fdfe +="\u002f\u0048\u0020"+_ffd .Height .WriteString ()+"\u000a";};if _ffd .ImageMask !=nil {_fdfe +="\u002f\u0049\u004d\u0020"+_ffd .ImageMask .WriteString ()+"\u000a";};if _ffd .Intent !=nil {_fdfe +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_ffd .Intent .WriteString ()+"\u000a";
};if _ffd .Interpolate !=nil {_fdfe +="\u002f\u0049\u0020"+_ffd .Interpolate .WriteString ()+"\u000a";};if _ffd .Width !=nil {_fdfe +="\u002f\u0057\u0020"+_ffd .Width .WriteString ()+"\u000a";};_daf .WriteString (_fdfe );_daf .WriteString ("\u0049\u0044\u0020");
_daf .Write (_ffd ._eae );_daf .WriteString ("\u000a\u0045\u0049\u000a");return _daf .String ();};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dfb *ContentCreator )Add_n ()*ContentCreator {_bgc :=ContentStreamOperation {};_bgc .Operand ="\u006e";_dfb ._eaf =append (_dfb ._eaf ,&_bgc );return _dfb ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_aged *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_eabc :=ContentStreamOperation {};_eabc .Operand ="\u0054\u0064";_eabc .Params =_acf ([]float64 {tx ,ty });_aged ._eaf =append (_aged ._eaf ,&_eabc );return _aged ;};

// Push pushes `gs` on the `gsStack`.
func (_gcd *GraphicStateStack )Push (gs GraphicsState ){*_gcd =append (*_gcd ,gs )};func (_aaac *ContentStreamProcessor )handleCommand_cm (_dgdbd *ContentStreamOperation ,_dbgca *_f .PdfPageResources )error {if len (_dgdbd .Params )!=6{_eg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_dgdbd .Params ));
return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fegeb ,_abge :=_ba .GetNumbersAsFloat (_dgdbd .Params );if _abge !=nil {return _abge ;
};_cbb :=_agd .NewMatrix (_fegeb [0],_fegeb [1],_fegeb [2],_fegeb [3],_fegeb [4],_fegeb [5]);_aaac ._cecb .CTM .Concat (_cbb );return nil ;};func (_fcc *ContentStreamParser )skipComments ()error {if _ ,_gafa :=_fcc .skipSpaces ();_gafa !=nil {return _gafa ;
};_cea :=true ;for {_gcfg ,_bcba :=_fcc ._agdga .Peek (1);if _bcba !=nil {_eg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bcba .Error ());return _bcba ;};if _cea &&_gcfg [0]!='%'{return nil ;};_cea =false ;if (_gcfg [0]!='\r')&&(_gcfg [0]!='\n'){_fcc ._agdga .ReadByte ();
}else {break ;};};return _fcc .skipComments ();};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bfeg *ContentCreator )Add_Tj (textstr _ba .PdfObjectString )*ContentCreator {_aafc :=ContentStreamOperation {};_aafc .Operand ="\u0054\u006a";_aafc .Params =_adef ([]_ba .PdfObjectString {textstr });_bfeg ._eaf =append (_bfeg ._eaf ,&_aafc );return _bfeg ;
};func (_fga *ContentStreamParser )parseObject ()(_bdcg _ba .PdfObject ,_bfd bool ,_ecd error ){_fga .skipSpaces ();for {_bgeb ,_ccad :=_fga ._agdga .Peek (2);if _ccad !=nil {return nil ,false ,_ccad ;};_eg .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_bgeb ));
if _bgeb [0]=='%'{_fga .skipComments ();continue ;}else if _bgeb [0]=='/'{_ggfc ,_fcba :=_fga .parseName ();_eg .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_ggfc );return &_ggfc ,false ,_fcba ;}else if _bgeb [0]=='('{_eg .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");
_efbc ,_cfgg :=_fga .parseString ();return _efbc ,false ,_cfgg ;}else if _bgeb [0]=='<'&&_bgeb [1]!='<'{_eg .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_acce ,_afc :=_fga .parseHexString ();return _acce ,false ,_afc ;
}else if _bgeb [0]=='['{_eg .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_ecbg ,_eca :=_fga .parseArray ();return _ecbg ,false ,_eca ;}else if _ba .IsFloatDigit (_bgeb [0])||(_bgeb [0]=='-'&&_ba .IsFloatDigit (_bgeb [1]))||(_bgeb [0]=='+'&&_ba .IsFloatDigit (_bgeb [1])){_eg .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_cfb ,_egcb :=_fga .parseNumber ();return _cfb ,false ,_egcb ;}else if _bgeb [0]=='<'&&_bgeb [1]=='<'{_egfa ,_dbb :=_fga .parseDict ();return _egfa ,false ,_dbb ;}else {_eg .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");
_bgeb ,_ =_fga ._agdga .Peek (5);_dbd :=string (_bgeb );_eg .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_dbd );if (len (_dbd )> 3)&&(_dbd [:4]=="\u006e\u0075\u006c\u006c"){_ccb ,_fege :=_fga .parseNull ();
return &_ccb ,false ,_fege ;}else if (len (_dbd )> 4)&&(_dbd [:5]=="\u0066\u0061\u006cs\u0065"){_bege ,_gbba :=_fga .parseBool ();return &_bege ,false ,_gbba ;}else if (len (_dbd )> 3)&&(_dbd [:4]=="\u0074\u0072\u0075\u0065"){_fbfb ,_adacf :=_fga .parseBool ();
return &_fbfb ,false ,_adacf ;};_efga ,_edc :=_fga .parseOperand ();if _edc !=nil {return _efga ,false ,_edc ;};if len (_efga .String ())< 1{return _efga ,false ,ErrInvalidOperand ;};return _efga ,true ,nil ;};};};

// Translate applies a simple x-y translation to the transformation matrix.
func (_be *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _be .Add_cm (1,0,0,1,tx ,ty );};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cfd *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_agc :=ContentStreamOperation {};_agc .Operand ="\u0054\u007a";_agc .Params =_acf ([]float64 {scale });_cfd ._eaf =append (_cfd ._eaf ,&_agc );return _cfd ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_fb *ContentStreamOperations )Bytes ()[]byte {var _gc _bb .Buffer ;for _ ,_ce :=range *_fb {if _ce ==nil {continue ;};if _ce .Operand =="\u0042\u0049"{_gc .WriteString (_ce .Operand +"\u000a");_gc .WriteString (_ce .Params [0].WriteString ());}else {for _ ,_fg :=range _ce .Params {_gc .WriteString (_fg .WriteString ());
_gc .WriteString ("\u0020");};_gc .WriteString (_ce .Operand +"\u000a");};};return _gc .Bytes ();};

// Scale applies x-y scaling to the transformation matrix.
func (_fag *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _fag .Add_cm (sx ,0,0,sy ,0,0);};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_afd *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_gcg :=ContentStreamOperation {};_gcg .Operand ="\u0073\u0063\u006e";_gcg .Params =_acf (c );_afd ._eaf =append (_afd ._eaf ,&_gcg );return _afd ;};

// String is same as Bytes() except returns as a string for convenience.
func (_gcb *ContentCreator )String ()string {return string (_gcb ._eaf .Bytes ())};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_bbb *ContentStreamOperation ,_dff GraphicsState ,_gefg *_f .PdfPageResources )error ;

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_gfgc *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_gebg :=ContentStreamInlineImage {};for {_gfgc .skipSpaces ();_gcge ,_gbece ,_dafc :=_gfgc .parseObject ();if _dafc !=nil {return nil ,_dafc ;};if !_gbece {_beg ,_aeg :=_ba .GetName (_gcge );
if !_aeg {_eg .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_gcge );
return nil ,_ae .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_gcge );
};_egdg ,_ddf ,_cac :=_gfgc .parseObject ();if _cac !=nil {return nil ,_cac ;};if _ddf {return nil ,_ae .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};
switch *_beg {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_gebg .BitsPerComponent =_egdg ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_gebg .ColorSpace =_egdg ;
case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_gebg .Decode =_egdg ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_gebg .DecodeParms =_egdg ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_gebg .Filter =_egdg ;
case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_gebg .Height =_egdg ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_gebg .ImageMask =_egdg ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_gebg .Intent =_egdg ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_gebg .Interpolate =_egdg ;
case "\u0057","\u0057\u0069\u0064t\u0068":_gebg .Width =_egdg ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_eg .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_beg );
default:return nil ,_ae .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_beg );};};if _gbece {_febc ,_bdg :=_gcge .(*_ba .PdfObjectString );
if !_bdg {return nil ,_ae .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};if _febc .Str ()=="\u0045\u0049"{_eg .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_gebg ,nil ;}else if _febc .Str ()=="\u0049\u0044"{_eg .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");
_abfd ,_edb :=_gfgc ._agdga .Peek (1);if _edb !=nil {return nil ,_edb ;};if _ba .IsWhiteSpace (_abfd [0]){_gfgc ._agdga .Discard (1);};_gebg ._eae =[]byte {};_fbf :=0;var _gbff []byte ;for {_cgb ,_eeaf :=_gfgc ._agdga .ReadByte ();if _eeaf !=nil {_eg .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");
return nil ,_eeaf ;};if _fbf ==0{if _ba .IsWhiteSpace (_cgb ){_gbff =[]byte {};_gbff =append (_gbff ,_cgb );_fbf =1;}else if _cgb =='E'{_gbff =append (_gbff ,_cgb );_fbf =2;}else {_gebg ._eae =append (_gebg ._eae ,_cgb );};}else if _fbf ==1{_gbff =append (_gbff ,_cgb );
if _cgb =='E'{_fbf =2;}else {_gebg ._eae =append (_gebg ._eae ,_gbff ...);_gbff =[]byte {};if _ba .IsWhiteSpace (_cgb ){_fbf =1;}else {_fbf =0;};};}else if _fbf ==2{_gbff =append (_gbff ,_cgb );if _cgb =='I'{_fbf =3;}else {_gebg ._eae =append (_gebg ._eae ,_gbff ...);
_gbff =[]byte {};_fbf =0;};}else if _fbf ==3{_gbff =append (_gbff ,_cgb );if _ba .IsWhiteSpace (_cgb ){_acaa ,_agbe :=_gfgc ._agdga .Peek (20);if _agbe !=nil &&_agbe !=_cc .EOF {return nil ,_agbe ;};_egc :=NewContentStreamParser (string (_acaa ));_ccfb :=true ;
for _bdde :=0;_bdde < 3;_bdde ++{_geca ,_eafg ,_bef :=_egc .parseObject ();if _bef !=nil {if _bef ==_cc .EOF {break ;};_ccfb =false ;continue ;};if _eafg &&!_bgee (_geca .String ()){_ccfb =false ;break ;};};if _ccfb {if len (_gebg ._eae )> 100{_eg .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_gebg ._eae ),_gebg ._eae [:100]);
}else {_eg .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_gebg ._eae ),_gebg ._eae );};return &_gebg ,nil ;};};_gebg ._eae =append (_gebg ._eae ,_gbff ...);_gbff =[]byte {};
_fbf =0;};};};};};};func _cfcg (_eggd []_ba .PdfObjectName )[]_ba .PdfObject {var _bgb []_ba .PdfObject ;for _ ,_cbed :=range _eggd {_bgb =append (_bgb ,_ba .MakeName (string (_cbed )));};return _bgb ;};func (_ebeg *ContentStreamParser )parseHexString ()(*_ba .PdfObjectString ,error ){_ebeg ._agdga .ReadByte ();
_gdg :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _ege []byte ;for {_ebeg .skipSpaces ();_dgae ,_cbe :=_ebeg ._agdga .Peek (1);if _cbe !=nil {return _ba .MakeString (""),_cbe ;
};if _dgae [0]=='>'{_ebeg ._agdga .ReadByte ();break ;};_dafe ,_ :=_ebeg ._agdga .ReadByte ();if _bb .IndexByte (_gdg ,_dafe )>=0{_ege =append (_ege ,_dafe );};};if len (_ege )%2==1{_ege =append (_ege ,'0');};_aafg ,_ :=_c .DecodeString (string (_ege ));
return _ba .MakeHexString (string (_aafg )),nil ;};func _adef (_cafe []_ba .PdfObjectString )[]_ba .PdfObject {var _dge []_ba .PdfObject ;for _ ,_edgd :=range _cafe {_dge =append (_dge ,_ba .MakeString (_edgd .Str ()));};return _dge ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eac *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_gec :=ContentStreamOperation {};_gec .Operand ="\u0072\u0067";_gec .Params =_acf ([]float64 {r ,g ,b });_eac ._eaf =append (_eac ._eaf ,&_gec );return _eac ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_acd *ContentCreator )Add_S ()*ContentCreator {_gad :=ContentStreamOperation {};_gad .Operand ="\u0053";_acd ._eaf =append (_acd ._eaf ,&_gad );return _acd ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_gfcg :=ContentStreamProcessor {};_gfcg ._ccfd =GraphicStateStack {};_bfeb :=GraphicsState {};_gfcg ._cecb =_bfeb ;_gfcg ._bgfc =[]handlerEntry {};_gfcg ._eage =0;_gfcg ._fcfb =ops ;
return &_gfcg ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_aae *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_fe :=ContentStreamOperation {};_fe .Operand ="\u0053\u0043";_fe .Params =_acf (c );_aae ._eaf =append (_aae ._eaf ,&_fe );return _aae ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cb *ContentCreator )Add_h ()*ContentCreator {_dde :=ContentStreamOperation {};_dde .Operand ="\u0068";_cb ._eaf =append (_cb ._eaf ,&_dde );return _cb ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bac *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_ac :=ContentStreamOperation {};_ac .Operand ="\u004a";_ac .Params =_cfcg ([]_ba .PdfObjectName {_ba .PdfObjectName (lineCapStyle )});_bac ._eaf =append (_bac ._eaf ,&_ac );return _bac ;
};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dba *ContentCreator )Add_cs (name _ba .PdfObjectName )*ContentCreator {_gff :=ContentStreamOperation {};_gff .Operand ="\u0063\u0073";_gff .Params =_cfcg ([]_ba .PdfObjectName {name });_dba ._eaf =append (_dba ._eaf ,&_gff );return _dba ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_eag *ContentCreator )Add_W ()*ContentCreator {_fgdf :=ContentStreamOperation {};_fgdf .Operand ="\u0057";_eag ._eaf =append (_eag ._eaf ,&_fgdf );return _eag ;};func (_eaba *ContentStreamProcessor )getColorspace (_bfde string ,_ecda *_f .PdfPageResources )(_f .PdfColorspace ,error ){switch _bfde {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _f .NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _f .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _f .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _f .NewPdfColorspaceSpecialPattern (),nil ;
};_cfgga ,_ecf :=_ecda .GetColorspaceByName (_ba .PdfObjectName (_bfde ));if _ecf {return _cfgga ,nil ;};switch _bfde {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _f .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _f .NewPdfColorspaceCalRGB (),nil ;
case "\u004c\u0061\u0062":return _f .NewPdfColorspaceLab (),nil ;};_eg .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_bfde );
return nil ,_ae .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_bfde );};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_abf *ContentCreator )Add_ri (intent _ba .PdfObjectName )*ContentCreator {_ccd :=ContentStreamOperation {};_ccd .Operand ="\u0072\u0069";_ccd .Params =_cfcg ([]_ba .PdfObjectName {intent });_abf ._eaf =append (_abf ._eaf ,&_ccd );return _abf ;};type handlerEntry struct{Condition HandlerConditionEnum ;
Operand string ;Handler HandlerFunc ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gae *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_bee :=ContentStreamOperation {};_bee .Operand ="\u0079";_bee .Params =_acf ([]float64 {x1 ,y1 ,x3 ,y3 });_gae ._eaf =append (_gae ._eaf ,&_bee );return _gae ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_aba HandlerConditionEnum )All ()bool {return _aba ==HandlerConditionEnumAllOperands };func (_bcbe *ContentStreamProcessor )getInitialColor (_eegb _f .PdfColorspace )(_f .PdfColor ,error ){switch _beb :=_eegb .(type ){case *_f .PdfColorspaceDeviceGray :return _f .NewPdfColorDeviceGray (0.0),nil ;
case *_f .PdfColorspaceDeviceRGB :return _f .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_f .PdfColorspaceDeviceCMYK :return _f .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_f .PdfColorspaceCalGray :return _f .NewPdfColorCalGray (0.0),nil ;case *_f .PdfColorspaceCalRGB :return _f .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;
case *_f .PdfColorspaceLab :_bebg :=0.0;_ccc :=0.0;_ebee :=0.0;if _beb .Range [0]> 0{_bebg =_beb .Range [0];};if _beb .Range [2]> 0{_ccc =_beb .Range [2];};return _f .NewPdfColorLab (_bebg ,_ccc ,_ebee ),nil ;case *_f .PdfColorspaceICCBased :if _beb .Alternate ==nil {_eg .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_beb .N );
if _beb .N ==1{_eg .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _bcbe .getInitialColor (_f .NewPdfColorspaceDeviceGray ());}else if _beb .N ==3{_eg .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");
return _bcbe .getInitialColor (_f .NewPdfColorspaceDeviceRGB ());}else if _beb .N ==4{_eg .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");
return _bcbe .getInitialColor (_f .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_b .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");
};};return _bcbe .getInitialColor (_beb .Alternate );case *_f .PdfColorspaceSpecialIndexed :if _beb .Base ==nil {return nil ,_b .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");
};return _bcbe .getInitialColor (_beb .Base );case *_f .PdfColorspaceSpecialSeparation :if _beb .AlternateSpace ==nil {return nil ,_b .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _bcbe .getInitialColor (_beb .AlternateSpace );case *_f .PdfColorspaceDeviceN :if _beb .AlternateSpace ==nil {return nil ,_b .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _bcbe .getInitialColor (_beb .AlternateSpace );case *_f .PdfColorspaceSpecialPattern :return nil ,nil ;};_eg .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_eegb );
return nil ,_b .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _f .Image ,encoder _ba .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_ba .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_aadc :=ContentStreamInlineImage {};if img .ColorComponents ==1{_aadc .ColorSpace =_ba .MakeName ("\u0047");
}else if img .ColorComponents ==3{_aadc .ColorSpace =_ba .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_aadc .ColorSpace =_ba .MakeName ("\u0043\u004d\u0059\u004b");}else {_eg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );
return nil ,_b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_aadc .BitsPerComponent =_ba .MakeInteger (img .BitsPerComponent );
_aadc .Width =_ba .MakeInteger (img .Width );_aadc .Height =_ba .MakeInteger (img .Height );_eggf ,_dcgg :=encoder .EncodeBytes (img .Data );if _dcgg !=nil {return nil ,_dcgg ;};_aadc ._eae =_eggf ;_gbfd :=encoder .GetFilterName ();if _gbfd !=_ba .StreamEncodingFilterNameRaw {_aadc .Filter =_ba .MakeName (_gbfd );
};return &_aadc ,nil ;};func (_bgcb *ContentStreamParser )parseNumber ()(_ba .PdfObject ,error ){return _ba .ParseNumber (_bgcb ._agdga );};func (_afag *ContentStreamProcessor )handleCommand_k (_cbd *ContentStreamOperation ,_ggfcc *_f .PdfPageResources )error {_bgec :=_f .NewPdfColorspaceDeviceCMYK ();
if len (_cbd .Params )!=_bgec .GetNumComponents (){_eg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cbd .Params ),_bgec );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dcbb ,_beef :=_bgec .ColorFromPdfObjects (_cbd .Params );if _beef !=nil {return _beef ;};_afag ._cecb .ColorspaceNonStroking =_bgec ;_afag ._cecb .ColorNonStroking =_dcbb ;return nil ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bdd *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_efag :=ContentStreamOperation {};_efag .Operand ="\u006b";_efag .Params =_acf ([]float64 {c ,m ,y ,k });_bdd ._eaf =append (_bdd ._eaf ,&_efag );return _bdd ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gbec *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_egd :=ContentStreamOperation {};_egd .Operand ="\u0063";_egd .Params =_acf ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_gbec ._eaf =append (_gbec ._eaf ,&_egd );return _gbec ;
};func (_fffa *ContentStreamProcessor )handleCommand_RG (_gbfa *ContentStreamOperation ,_cfbe *_f .PdfPageResources )error {_bdfeg :=_f .NewPdfColorspaceDeviceRGB ();if len (_gbfa .Params )!=_bdfeg .GetNumComponents (){_eg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");
_eg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gbfa .Params ),_bdfeg );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_gfed ,_cdab :=_bdfeg .ColorFromPdfObjects (_gbfa .Params );if _cdab !=nil {return _cdab ;};_fffa ._cecb .ColorspaceStroking =_bdfeg ;_fffa ._cecb .ColorStroking =_gfed ;return nil ;};func _cbc (_acgd *ContentStreamInlineImage )(_ba .StreamEncoder ,error ){if _acgd .Filter ==nil {return _ba .NewRawEncoder (),nil ;
};_fdf ,_de :=_acgd .Filter .(*_ba .PdfObjectName );if !_de {_dbfd ,_dabe :=_acgd .Filter .(*_ba .PdfObjectArray );if !_dabe {return nil ,_ae .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _dbfd .Len ()==0{return _ba .NewRawEncoder (),nil ;};if _dbfd .Len ()!=1{_gfcb ,_bfbd :=_afg (_acgd );if _bfbd !=nil {_eg .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_bfbd );
return nil ,_bfbd ;};_eg .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_gfcb );return _gfcb ,nil ;};_feb :=_dbfd .Get (0);_fdf ,_dabe =_feb .(*_ba .PdfObjectName );if !_dabe {return nil ,_ae .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");
};};switch *_fdf {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _ba .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _ba .NewASCII85Encoder (),nil ;
case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _fbg (_acgd );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _daa (_acgd ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _fec (_acgd ,nil );
case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _ba .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _ba .NewRunLengthEncoder (),nil ;
default:_eg .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_fdf );
return nil ,_b .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_bgf :=ContentStreamParser {};_ebb :=_bb .NewBufferString (contentStr +"\u000a");_bgf ._agdga =_ed .NewReader (_ebb );return &_bgf ;};

// Operations returns the list of operations.
func (_aa *ContentCreator )Operations ()*ContentStreamOperations {return &_aa ._eaf };

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dab *ContentCreator )Add_b_starred ()*ContentCreator {_gac :=ContentStreamOperation {};_gac .Operand ="\u0062\u002a";_dab ._eaf =append (_dab ._eaf ,&_gac );return _dab ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_acc *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_age :=ContentStreamOperation {};_age .Operand ="\u006d";_age .Params =_acf ([]float64 {x ,y });_acc ._eaf =append (_acc ._eaf ,&_age );return _acc ;};func (_eddf *ContentStreamProcessor )handleCommand_G (_ddb *ContentStreamOperation ,_gceb *_f .PdfPageResources )error {_efgf :=_f .NewPdfColorspaceDeviceGray ();
if len (_ddb .Params )!=_efgf .GetNumComponents (){_eg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ddb .Params ),_efgf );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dcb ,_ebg :=_efgf .ColorFromPdfObjects (_ddb .Params );if _ebg !=nil {return _ebg ;};_eddf ._cecb .ColorspaceStroking =_efgf ;_eddf ._cecb .ColorStroking =_dcb ;return nil ;};func (_bdga *ContentStreamProcessor )handleCommand_SC (_dabeg *ContentStreamOperation ,_bddg *_f .PdfPageResources )error {_afa :=_bdga ._cecb .ColorspaceStroking ;
if len (_dabeg .Params )!=_afa .GetNumComponents (){_eg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dabeg .Params ),_afa );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dbe ,_egdaa :=_afa .ColorFromPdfObjects (_dabeg .Params );if _egdaa !=nil {return _egdaa ;};_bdga ._cecb .ColorStroking =_dbe ;return nil ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_ebf *ContentCreator )Add_ET ()*ContentCreator {_cga :=ContentStreamOperation {};_cga .Operand ="\u0045\u0054";_ebf ._eaf =append (_ebf ._eaf ,&_cga );return _ebf ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_ecc *ContentCreator )Add_TJ (vals ..._ba .PdfObject )*ContentCreator {_ccf :=ContentStreamOperation {};_ccf .Operand ="\u0054\u004a";_ccf .Params =[]_ba .PdfObject {_ba .MakeArray (vals ...)};_ecc ._eaf =append (_ecc ._eaf ,&_ccf );return _ecc ;
};

// String returns `ops.Bytes()` as a string.
func (_bbg *ContentStreamOperations )String ()string {return string (_bbg .Bytes ())};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_ebfe *ContentCreator )Add_Tstar ()*ContentCreator {_aac :=ContentStreamOperation {};_aac .Operand ="\u0054\u002a";_ebfe ._eaf =append (_ebfe ._eaf ,&_aac );return _ebfe ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_bfa :=&ContentCreator {};_bfa ._eaf =ContentStreamOperations {};return _bfa ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_gfc *ContentCreator )Add_BT ()*ContentCreator {_bge :=ContentStreamOperation {};_bge .Operand ="\u0042\u0054";_gfc ._eaf =append (_gfc ._eaf ,&_bge );return _gfc ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_dbaf *ContentCreator )Add_BMC (tag _ba .PdfObjectName )*ContentCreator {_bga :=ContentStreamOperation {};_bga .Operand ="\u0042\u004d\u0043";_bga .Params =_cfcg ([]_ba .PdfObjectName {tag });_dbaf ._eaf =append (_dbaf ._eaf ,&_bga );return _dbaf ;
};func _dabc (_cce _f .PdfColorspace )bool {_ ,_efgb :=_cce .(*_f .PdfColorspaceSpecialPattern );return _efgb ;};func (_aea *ContentStreamParser )parseArray ()(*_ba .PdfObjectArray ,error ){_feg :=_ba .MakeArray ();_aea ._agdga .ReadByte ();for {_aea .skipSpaces ();
_dda ,_babbc :=_aea ._agdga .Peek (1);if _babbc !=nil {return _feg ,_babbc ;};if _dda [0]==']'{_aea ._agdga .ReadByte ();break ;};_dgc ,_ ,_babbc :=_aea .parseObject ();if _babbc !=nil {return _feg ,_babbc ;};_feg .Append (_dgc );};return _feg ,nil ;};
