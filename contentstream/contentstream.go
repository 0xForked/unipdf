//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_d "bufio";_ad "bytes";_a "encoding/hex";_f "errors";_b "fmt";_dg "github.com/unidoc/unipdf/v3/common";_ee "github.com/unidoc/unipdf/v3/core";_fd "github.com/unidoc/unipdf/v3/internal/imageutil";_eg "github.com/unidoc/unipdf/v3/internal/transform";_fb "github.com/unidoc/unipdf/v3/model";_dc "image/color";_ab "image/jpeg";_g "io";_e "math";_cf "strconv";);

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_fdg *ContentCreator )Wrap (){_fdg ._fa .WrapIfNeeded ()};func _abde (_aace []_ee .PdfObjectString )[]_ee .PdfObject {var _bcg []_ee .PdfObject ;for _ ,_faba :=range _aace {_bcg =append (_bcg ,_ee .MakeString (_faba .Str ()));};return _bcg ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_fg *ContentStreamParser )ExtractText ()(string ,error ){_aeg ,_eee :=_fg .Parse ();if _eee !=nil {return "",_eee ;};_dd :=false ;_dca ,_da :=float64 (-1),float64 (-1);_gg :="";for _ ,_ff :=range *_aeg {if _ff .Operand =="\u0042\u0054"{_dd =true ;}else if _ff .Operand =="\u0045\u0054"{_dd =false ;};if _ff .Operand =="\u0054\u0064"||_ff .Operand =="\u0054\u0044"||_ff .Operand =="\u0054\u002a"{_gg +="\u000a";};if _ff .Operand =="\u0054\u006d"{if len (_ff .Params )!=6{continue ;};_ag ,_fc :=_ff .Params [4].(*_ee .PdfObjectFloat );if !_fc {_ga ,_ed :=_ff .Params [4].(*_ee .PdfObjectInteger );if !_ed {continue ;};_ag =_ee .MakeFloat (float64 (*_ga ));};_cc ,_fc :=_ff .Params [5].(*_ee .PdfObjectFloat );if !_fc {_df ,_cb :=_ff .Params [5].(*_ee .PdfObjectInteger );if !_cb {continue ;};_cc =_ee .MakeFloat (float64 (*_df ));};if _da ==-1{_da =float64 (*_cc );}else if _da > float64 (*_cc ){_gg +="\u000a";_dca =float64 (*_ag );_da =float64 (*_cc );continue ;};if _dca ==-1{_dca =float64 (*_ag );}else if _dca < float64 (*_ag ){_gg +="\u0009";_dca =float64 (*_ag );};};if _dd &&_ff .Operand =="\u0054\u004a"{if len (_ff .Params )< 1{continue ;};_ddd ,_aeb :=_ff .Params [0].(*_ee .PdfObjectArray );if !_aeb {return "",_b .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_ff .Params [0]);};for _ ,_ce :=range _ddd .Elements (){switch _dda :=_ce .(type ){case *_ee .PdfObjectString :_gg +=_dda .Str ();case *_ee .PdfObjectFloat :if *_dda < -100{_gg +="\u0020";};case *_ee .PdfObjectInteger :if *_dda < -100{_gg +="\u0020";};};};}else if _dd &&_ff .Operand =="\u0054\u006a"{if len (_ff .Params )< 1{continue ;};_bc ,_ffe :=_ff .Params [0].(*_ee .PdfObjectString );if !_ffe {return "",_b .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_ff .Params [0]);};_gg +=_bc .Str ();};};return _gg ,nil ;};func _fada (_bcbe []int64 )[]_ee .PdfObject {var _bdd []_ee .PdfObject ;for _ ,_fbfd :=range _bcbe {_bdd =append (_bdd ,_ee .MakeInteger (_fbfd ));};return _bdd ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bdf *ContentCreator )Add_g (gray float64 )*ContentCreator {_ebf :=ContentStreamOperation {};_ebf .Operand ="\u0067";_ebf .Params =_gce ([]float64 {gray });_bdf ._fa =append (_bdf ._fa ,&_ebf );return _bdf ;};func (_aaad *ContentStreamParser )parseString ()(*_ee .PdfObjectString ,error ){_aaad ._dcd .ReadByte ();var _eeeg []byte ;_cdda :=1;for {_ebcg ,_dba :=_aaad ._dcd .Peek (1);if _dba !=nil {return _ee .MakeString (string (_eeeg )),_dba ;};if _ebcg [0]=='\\'{_aaad ._dcd .ReadByte ();_ebfc ,_caf :=_aaad ._dcd .ReadByte ();if _caf !=nil {return _ee .MakeString (string (_eeeg )),_caf ;};if _ee .IsOctalDigit (_ebfc ){_bde ,_deg :=_aaad ._dcd .Peek (2);if _deg !=nil {return _ee .MakeString (string (_eeeg )),_deg ;};var _facb []byte ;_facb =append (_facb ,_ebfc );for _ ,_gfdd :=range _bde {if _ee .IsOctalDigit (_gfdd ){_facb =append (_facb ,_gfdd );}else {break ;};};_aaad ._dcd .Discard (len (_facb )-1);_dg .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_facb );_fef ,_deg :=_cf .ParseUint (string (_facb ),8,32);if _deg !=nil {return _ee .MakeString (string (_eeeg )),_deg ;};_eeeg =append (_eeeg ,byte (_fef ));continue ;};switch _ebfc {case 'n':_eeeg =append (_eeeg ,'\n');case 'r':_eeeg =append (_eeeg ,'\r');case 't':_eeeg =append (_eeeg ,'\t');case 'b':_eeeg =append (_eeeg ,'\b');case 'f':_eeeg =append (_eeeg ,'\f');case '(':_eeeg =append (_eeeg ,'(');case ')':_eeeg =append (_eeeg ,')');case '\\':_eeeg =append (_eeeg ,'\\');};continue ;}else if _ebcg [0]=='('{_cdda ++;}else if _ebcg [0]==')'{_cdda --;if _cdda ==0{_aaad ._dcd .ReadByte ();break ;};};_gefc ,_ :=_aaad ._dcd .ReadByte ();_eeeg =append (_eeeg ,_gefc );};return _ee .MakeString (string (_eeeg )),nil ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_geb *ContentCreator )Add_f ()*ContentCreator {_ccdf :=ContentStreamOperation {};_ccdf .Operand ="\u0066";_geb ._fa =append (_geb ._fa ,&_ccdf );return _geb ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eaa *ContentCreator )Add_Tr (render int64 )*ContentCreator {_ede :=ContentStreamOperation {};_ede .Operand ="\u0054\u0072";_ede .Params =_fada ([]int64 {render });_eaa ._fa =append (_eaa ._fa ,&_ede );return _eaa ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_ee .PdfObject ;Operand string ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Scale applies x-y scaling to the transformation matrix.
func (_dgb *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _dgb .Add_cm (sx ,0,0,sy ,0,0);};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_efg *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_gaa :=ContentStreamOperation {};_gaa .Operand ="\u0054\u0077";_gaa .Params =_gce ([]float64 {wordSpace });_efg ._fa =append (_efg ._fa ,&_gaa );return _efg ;};func (_fbga *ContentStreamProcessor )handleCommand_rg (_ffae *ContentStreamOperation ,_eedd *_fb .PdfPageResources )error {_gbbc :=_fb .NewPdfColorspaceDeviceRGB ();if len (_ffae .Params )!=_gbbc .GetNumComponents (){_dg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ffae .Params ),_gbbc );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_addb ,_bbfg :=_gbbc .ColorFromPdfObjects (_ffae .Params );if _bbfg !=nil {return _bbfg ;};_fbga ._acae .ColorspaceNonStroking =_gbbc ;_fbga ._acae .ColorNonStroking =_addb ;return nil ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ceg *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_dbe :=ContentStreamOperation {};_dbe .Operand ="\u0053\u0043\u004e";_dbe .Params =_gce (c );_ceg ._fa =append (_ceg ._fa ,&_dbe );return _ceg ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_fbf HandlerConditionEnum )All ()bool {return _fbf ==HandlerConditionEnumAllOperands };

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_bcdg *ContentCreator )Add_BT ()*ContentCreator {_dbg :=ContentStreamOperation {};_dbg .Operand ="\u0042\u0054";_bcdg ._fa =append (_bcdg ._fa ,&_dbg );return _bcdg ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_aebb *ContentCreator )Add_sh (name _ee .PdfObjectName )*ContentCreator {_dbf :=ContentStreamOperation {};_dbf .Operand ="\u0073\u0068";_dbf .Params =_fdbb ([]_ee .PdfObjectName {name });_aebb ._fa =append (_aebb ._fa ,&_dbf );return _aebb ;};var _cgf =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// Transform returns coordinates x, y transformed by the CTM.
func (_bgc *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _bgc .CTM .Transform (x ,y );};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ge *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_ggg :=ContentStreamOperation {};_ggg .Operand ="\u0063\u006d";_ggg .Params =_gce ([]float64 {a ,b ,c ,d ,e ,f });_ge ._fa =append (_ge ._fa ,&_ggg );return _ge ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_eac *ContentCreator )Add_W ()*ContentCreator {_fee :=ContentStreamOperation {};_fee .Operand ="\u0057";_eac ._fa =append (_eac ._fa ,&_fee );return _eac ;};func (_abb *ContentStreamParser )parseName ()(_ee .PdfObjectName ,error ){_bdg :="";_cbef :=false ;for {_addg ,_afda :=_abb ._dcd .Peek (1);if _afda ==_g .EOF {break ;};if _afda !=nil {return _ee .PdfObjectName (_bdg ),_afda ;};if !_cbef {if _addg [0]=='/'{_cbef =true ;_abb ._dcd .ReadByte ();}else {_dg .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_addg ,_addg );return _ee .PdfObjectName (_bdg ),_b .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_addg [0]);};}else {if _ee .IsWhiteSpace (_addg [0]){break ;}else if (_addg [0]=='/')||(_addg [0]=='[')||(_addg [0]=='(')||(_addg [0]==']')||(_addg [0]=='<')||(_addg [0]=='>'){break ;}else if _addg [0]=='#'{_ddgb ,_gdaa :=_abb ._dcd .Peek (3);if _gdaa !=nil {return _ee .PdfObjectName (_bdg ),_gdaa ;};_abb ._dcd .Discard (3);_bbba ,_gdaa :=_a .DecodeString (string (_ddgb [1:3]));if _gdaa !=nil {return _ee .PdfObjectName (_bdg ),_gdaa ;};_bdg +=string (_bbba );}else {_bge ,_ :=_abb ._dcd .ReadByte ();_bdg +=string (_bge );};};};return _ee .PdfObjectName (_bdg ),nil ;};func (_fec *ContentStreamParser )parseNull ()(_ee .PdfObjectNull ,error ){_ ,_aag :=_fec ._dcd .Discard (4);return _ee .PdfObjectNull {},_aag ;};func (_gc *ContentStreamOperations )isWrapped ()bool {if len (*_gc )< 2{return false ;};_ade :=0;for _ ,_eec :=range *_gc {if _eec .Operand =="\u0071"{_ade ++;}else if _eec .Operand =="\u0051"{_ade --;}else {if _ade < 1{return false ;};};};return _ade ==0;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gb *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_be :=ContentStreamOperation {};_be .Operand ="\u0054\u0073";_be .Params =_gce ([]float64 {rise });_gb ._fa =append (_gb ._fa ,&_be );return _gb ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fgc *ContentCreator )Add_gs (dictName _ee .PdfObjectName )*ContentCreator {_eef :=ContentStreamOperation {};_eef .Operand ="\u0067\u0073";_eef .Params =_fdbb ([]_ee .PdfObjectName {dictName });_fgc ._fa =append (_fgc ._fa ,&_eef );return _fgc ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_dac *ContentCreator )Add_W_starred ()*ContentCreator {_cddb :=ContentStreamOperation {};_cddb .Operand ="\u0057\u002a";_dac ._fa =append (_dac ._fa ,&_cddb );return _dac ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fgd *ContentCreator )Add_S ()*ContentCreator {_gf :=ContentStreamOperation {};_gf .Operand ="\u0053";_fgd ._fa =append (_fgd ._fa ,&_gf );return _fgd ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_gga *ContentCreator )Add_quotes (textstr _ee .PdfObjectString ,aw ,ac float64 )*ContentCreator {_egcde :=ContentStreamOperation {};_egcde .Operand ="\u0022";_egcde .Params =_gce ([]float64 {aw ,ac });_egcde .Params =append (_egcde .Params ,_abde ([]_ee .PdfObjectString {textstr })...);_gga ._fa =append (_gga ._fa ,&_egcde );return _gga ;};func _gce (_efba []float64 )[]_ee .PdfObject {var _ecfc []_ee .PdfObject ;for _ ,_fccg :=range _efba {_ecfc =append (_ecfc ,_ee .MakeFloat (_fccg ));};return _ecfc ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_abc *ContentStreamOperations )Bytes ()[]byte {var _de _ad .Buffer ;for _ ,_fbb :=range *_abc {if _fbb ==nil {continue ;};if _fbb .Operand =="\u0042\u0049"{_de .WriteString (_fbb .Operand +"\u000a");_de .WriteString (_fbb .Params [0].WriteString ());}else {for _ ,_ba :=range _fbb .Params {_de .WriteString (_ba .WriteString ());_de .WriteString ("\u0020");};_de .WriteString (_fbb .Operand +"\u000a");};};return _de .Bytes ();};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bad *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_ddff :=ContentStreamOperation {};_ddff .Operand ="\u0079";_ddff .Params =_gce ([]float64 {x1 ,y1 ,x3 ,y3 });_bad ._fa =append (_bad ._fa ,&_ddff );return _bad ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_aebg *GraphicStateStack )Pop ()GraphicsState {_dedf :=(*_aebg )[len (*_aebg )-1];*_aebg =(*_aebg )[:len (*_aebg )-1];return _dedf ;};

// Operations returns the list of operations.
func (_bg *ContentCreator )Operations ()*ContentStreamOperations {return &_bg ._fa };func (_cfbd *ContentStreamParser )parseDict ()(*_ee .PdfObjectDictionary ,error ){_dg .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_fbgf :=_ee .MakeDict ();_eefb ,_ :=_cfbd ._dcd .ReadByte ();if _eefb !='<'{return nil ,_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_eefb ,_ =_cfbd ._dcd .ReadByte ();if _eefb !='<'{return nil ,_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_cfbd .skipSpaces ();_gbg ,_cccg :=_cfbd ._dcd .Peek (2);if _cccg !=nil {return nil ,_cccg ;};_dg .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_gbg ),string (_gbg ));if (_gbg [0]=='>')&&(_gbg [1]=='>'){_dg .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_cfbd ._dcd .ReadByte ();_cfbd ._dcd .ReadByte ();break ;};_dg .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_cbd ,_cccg :=_cfbd .parseName ();_dg .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_cbd );if _cccg !=nil {_dg .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_cccg );return nil ,_cccg ;};if len (_cbd )> 4&&_cbd [len (_cbd )-4:]=="\u006e\u0075\u006c\u006c"{_gbab :=_cbd [0:len (_cbd )-4];_dg .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_cbd );_dg .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_gbab );_cfbd .skipSpaces ();_accb ,_ :=_cfbd ._dcd .Peek (1);if _accb [0]=='/'{_fbgf .Set (_gbab ,_ee .MakeNull ());continue ;};};_cfbd .skipSpaces ();_ccfb ,_ ,_cccg :=_cfbd .parseObject ();if _cccg !=nil {return nil ,_cccg ;};_fbgf .Set (_cbd ,_ccfb );_dg .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_cbd ,_ccfb .String ());};return _fbgf ,nil ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_afd *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_gdbe :=ContentStreamOperation {};_gdbe .Operand ="\u0072\u0067";_gdbe .Params =_gce ([]float64 {r ,g ,b });_afd ._fa =append (_afd ._fa ,&_gdbe );return _afd ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_afe *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_gdf :=ContentStreamOperation {};_gdf .Operand ="\u006d";_gdf .Params =_gce ([]float64 {x ,y });_afe ._fa =append (_afe ._fa ,&_gdf );return _afe ;};func (_dae *ContentStreamProcessor )getColorspace (_dgbc string ,_bgdf *_fb .PdfPageResources )(_fb .PdfColorspace ,error ){switch _dgbc {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _fb .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _fb .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _fb .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _fb .NewPdfColorspaceSpecialPattern (),nil ;};_daeg ,_gbf :=_bgdf .GetColorspaceByName (_ee .PdfObjectName (_dgbc ));if _gbf {return _daeg ,nil ;};switch _dgbc {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _fb .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _fb .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _fb .NewPdfColorspaceLab (),nil ;};_dg .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_dgbc );return nil ,_b .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_dgbc );};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_aga *ContentCreator )Add_G (gray float64 )*ContentCreator {_fae :=ContentStreamOperation {};_fae .Operand ="\u0047";_fae .Params =_gce ([]float64 {gray });_aga ._fa =append (_aga ._fa ,&_fae );return _aga ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_bb *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_bb )==0{return _bb ;};if _bb .isWrapped (){return _bb ;};*_bb =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_bb ...);_dgf :=0;for _ ,_ege :=range *_bb {if _ege .Operand =="\u0071"{_dgf ++;}else if _ege .Operand =="\u0051"{_dgf --;};};for _dgf > 0{*_bb =append (*_bb ,&ContentStreamOperation {Operand :"\u0051"});_dgf --;};return _bb ;};func (_ecdb *ContentStreamInlineImage )toImageBase (_dcgd *_fb .PdfPageResources )(*_fd .ImageBase ,error ){if _ecdb ._faa !=nil {return _ecdb ._faa ,nil ;};_cff :=_fd .ImageBase {};if _ecdb .Height ==nil {return nil ,_f .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_dfgbd ,_agae :=_ecdb .Height .(*_ee .PdfObjectInteger );if !_agae {return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_cff .Height =int (*_dfgbd );if _ecdb .Width ==nil {return nil ,_f .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_eba ,_agae :=_ecdb .Width .(*_ee .PdfObjectInteger );if !_agae {return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_cff .Width =int (*_eba );_bda ,_acec :=_ecdb .IsMask ();if _acec !=nil {return nil ,_acec ;};if _bda {_cff .BitsPerComponent =1;_cff .ColorComponents =1;}else {if _ecdb .BitsPerComponent ==nil {_dg .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_cff .BitsPerComponent =8;}else {_bdfc ,_accc :=_ecdb .BitsPerComponent .(*_ee .PdfObjectInteger );if !_accc {_dg .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_ecdb .BitsPerComponent );return nil ,_f .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_cff .BitsPerComponent =int (*_bdfc );};if _ecdb .ColorSpace !=nil {_aca ,_bee :=_ecdb .GetColorSpace (_dcgd );if _bee !=nil {return nil ,_bee ;};_cff .ColorComponents =_aca .GetNumComponents ();}else {_dg .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_cff .ColorComponents =1;};};if _gfaa ,_bgfb :=_ee .GetArray (_ecdb .Decode );_bgfb {_cff .Decode ,_acec =_gfaa .ToFloat64Array ();if _acec !=nil {return nil ,_acec ;};};_ecdb ._faa =&_cff ;return _ecdb ._faa ,nil ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ggf *ContentCreator )Add_cs (name _ee .PdfObjectName )*ContentCreator {_gcg :=ContentStreamOperation {};_gcg .Operand ="\u0063\u0073";_gcg .Params =_fdbb ([]_ee .PdfObjectName {name });_ggf ._fa =append (_ggf ._fa ,&_gcg );return _ggf ;};func (_eggd *ContentStreamProcessor )getInitialColor (_ddef _fb .PdfColorspace )(_fb .PdfColor ,error ){switch _dgda :=_ddef .(type ){case *_fb .PdfColorspaceDeviceGray :return _fb .NewPdfColorDeviceGray (0.0),nil ;case *_fb .PdfColorspaceDeviceRGB :return _fb .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_fb .PdfColorspaceDeviceCMYK :return _fb .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_fb .PdfColorspaceCalGray :return _fb .NewPdfColorCalGray (0.0),nil ;case *_fb .PdfColorspaceCalRGB :return _fb .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_fb .PdfColorspaceLab :_fad :=0.0;_abed :=0.0;_daed :=0.0;if _dgda .Range [0]> 0{_fad =_dgda .Range [0];};if _dgda .Range [2]> 0{_abed =_dgda .Range [2];};return _fb .NewPdfColorLab (_fad ,_abed ,_daed ),nil ;case *_fb .PdfColorspaceICCBased :if _dgda .Alternate ==nil {_dg .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_dgda .N );if _dgda .N ==1{_dg .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _eggd .getInitialColor (_fb .NewPdfColorspaceDeviceGray ());}else if _dgda .N ==3{_dg .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _eggd .getInitialColor (_fb .NewPdfColorspaceDeviceRGB ());}else if _dgda .N ==4{_dg .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _eggd .getInitialColor (_fb .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_f .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _eggd .getInitialColor (_dgda .Alternate );case *_fb .PdfColorspaceSpecialIndexed :if _dgda .Base ==nil {return nil ,_f .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _eggd .getInitialColor (_dgda .Base );case *_fb .PdfColorspaceSpecialSeparation :if _dgda .AlternateSpace ==nil {return nil ,_f .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _eggd .getInitialColor (_dgda .AlternateSpace );case *_fb .PdfColorspaceDeviceN :if _dgda .AlternateSpace ==nil {return nil ,_f .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _eggd .getInitialColor (_dgda .AlternateSpace );case *_fb .PdfColorspaceSpecialPattern :return nil ,nil ;};_dg .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_ddef );return nil ,_f .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};func (_acce *ContentStreamProcessor )handleCommand_SCN (_gaag *ContentStreamOperation ,_fab *_fb .PdfPageResources )error {_dfdg :=_acce ._acae .ColorspaceStroking ;if !_eae (_dfdg ){if len (_gaag .Params )!=_dfdg .GetNumComponents (){_dg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gaag .Params ),_dfdg );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_faee ,_adbe :=_dfdg .ColorFromPdfObjects (_gaag .Params );if _adbe !=nil {return _adbe ;};_acce ._acae .ColorStroking =_faee ;return nil ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_edb *ContentCreator )Add_ET ()*ContentCreator {_bbeg :=ContentStreamOperation {};_bbeg .Operand ="\u0045\u0054";_edb ._fa =append (_edb ._fa ,&_bbeg );return _edb ;};func (_acd *ContentStreamProcessor )handleCommand_g (_eecg *ContentStreamOperation ,_edcdf *_fb .PdfPageResources )error {_eca :=_fb .NewPdfColorspaceDeviceGray ();if len (_eecg .Params )!=_eca .GetNumComponents (){_dg .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_dg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_eecg .Params ),_eca );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_efcd ,_gcff :=_eca .ColorFromPdfObjects (_eecg .Params );if _gcff !=nil {_dg .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_eca ,_eecg ,_gcff );return _gcff ;};_acd ._acae .ColorspaceNonStroking =_eca ;_acd ._acae .ColorNonStroking =_efcd ;return nil ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_adea *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_gfbf :=handlerEntry {};_gfbf .Condition =condition ;_gfbf .Operand =operand ;_gfbf .Handler =handler ;_adea ._afgc =append (_adea ._afgc ,_gfbf );};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eaf *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_cca :=ContentStreamOperation {};_cca .Operand ="\u006a";_cca .Params =_fdbb ([]_ee .PdfObjectName {_ee .PdfObjectName (lineJoinStyle )});_eaf ._fa =append (_eaf ._fa ,&_cca );return _eaf ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cdg *ContentCreator )Add_Q ()*ContentCreator {_ec :=ContentStreamOperation {};_ec .Operand ="\u0051";_cdg ._fa =append (_cdg ._fa ,&_ec );return _cdg ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_aedc *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_abd :=ContentStreamInlineImage {};for {_aedc .skipSpaces ();_dec ,_cded ,_fba :=_aedc .parseObject ();if _fba !=nil {return nil ,_fba ;};if !_cded {_ceb ,_bga :=_ee .GetName (_dec );if !_bga {_dg .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_dec );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_dec );};_cbcb ,_bdb ,_cbe :=_aedc .parseObject ();if _cbe !=nil {return nil ,_cbe ;};if _bdb {return nil ,_b .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_ceb {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_abd .BitsPerComponent =_cbcb ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_abd .ColorSpace =_cbcb ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_abd .Decode =_cbcb ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_abd .DecodeParms =_cbcb ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_abd .Filter =_cbcb ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_abd .Height =_cbcb ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_abd .ImageMask =_cbcb ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_abd .Intent =_cbcb ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_abd .Interpolate =_cbcb ;case "\u0057","\u0057\u0069\u0064t\u0068":_abd .Width =_cbcb ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_dg .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_ceb );default:return nil ,_b .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_ceb );};};if _cded {_eccf ,_eebfb :=_dec .(*_ee .PdfObjectString );if !_eebfb {return nil ,_b .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _eccf .Str ()=="\u0045\u0049"{_dg .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_abd ,nil ;}else if _eccf .Str ()=="\u0049\u0044"{_dg .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_ccf ,_ddgc :=_aedc ._dcd .Peek (1);if _ddgc !=nil {return nil ,_ddgc ;};if _ee .IsWhiteSpace (_ccf [0]){_aedc ._dcd .Discard (1);};_abd ._bbce =[]byte {};_gef :=0;var _acgb []byte ;for {_dabd ,_feg :=_aedc ._dcd .ReadByte ();if _feg !=nil {_dg .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_feg ;};if _gef ==0{if _ee .IsWhiteSpace (_dabd ){_acgb =[]byte {};_acgb =append (_acgb ,_dabd );_gef =1;}else if _dabd =='E'{_acgb =append (_acgb ,_dabd );_gef =2;}else {_abd ._bbce =append (_abd ._bbce ,_dabd );};}else if _gef ==1{_acgb =append (_acgb ,_dabd );if _dabd =='E'{_gef =2;}else {_abd ._bbce =append (_abd ._bbce ,_acgb ...);_acgb =[]byte {};if _ee .IsWhiteSpace (_dabd ){_gef =1;}else {_gef =0;};};}else if _gef ==2{_acgb =append (_acgb ,_dabd );if _dabd =='I'{_gef =3;}else {_abd ._bbce =append (_abd ._bbce ,_acgb ...);_acgb =[]byte {};_gef =0;};}else if _gef ==3{_acgb =append (_acgb ,_dabd );if _ee .IsWhiteSpace (_dabd ){_fcgd ,_gee :=_aedc ._dcd .Peek (20);if _gee !=nil &&_gee !=_g .EOF {return nil ,_gee ;};_agb :=NewContentStreamParser (string (_fcgd ));_gcge :=true ;for _cffe :=0;_cffe < 3;_cffe ++{_bbb ,_ffgg ,_fge :=_agb .parseObject ();if _fge !=nil {if _fge ==_g .EOF {break ;};continue ;};if _ffgg &&!_dfbe (_bbb .String ()){_gcge =false ;break ;};};if _gcge {if len (_abd ._bbce )> 100{_dg .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_abd ._bbce ),_abd ._bbce [:100]);}else {_dg .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_abd ._bbce ),_abd ._bbce );};return &_abd ,nil ;};};_abd ._bbce =append (_abd ._bbce ,_acgb ...);_acgb =[]byte {};_gef =0;};};};};};};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_dfgb *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_gaab :=ContentStreamOperation {};_gaab .Operand ="\u0054\u006d";_gaab .Params =_gce ([]float64 {a ,b ,c ,d ,e ,f });_dfgb ._fa =append (_dfgb ._fa ,&_gaab );return _dfgb ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_aee *ContentCreator )Add_B ()*ContentCreator {_gecb :=ContentStreamOperation {};_gecb .Operand ="\u0042";_aee ._fa =append (_aee ._fa ,&_gecb );return _aee ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_ffc *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _ffc .Add_cm (1,0,0,1,tx ,ty );};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_gcd *ContentCreator )Add_BMC (tag _ee .PdfObjectName )*ContentCreator {_acee :=ContentStreamOperation {};_acee .Operand ="\u0042\u004d\u0043";_acee .Params =_fdbb ([]_ee .PdfObjectName {tag });_gcd ._fa =append (_gcd ._fa ,&_acee );return _gcd ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _fb .Image ,encoder _ee .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_ee .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_ecf :=ContentStreamInlineImage {};if img .ColorComponents ==1{_ecf .ColorSpace =_ee .MakeName ("\u0047");}else if img .ColorComponents ==3{_ecf .ColorSpace =_ee .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_ecf .ColorSpace =_ee .MakeName ("\u0043\u004d\u0059\u004b");}else {_dg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_ecf .BitsPerComponent =_ee .MakeInteger (img .BitsPerComponent );_ecf .Width =_ee .MakeInteger (img .Width );_ecf .Height =_ee .MakeInteger (img .Height );_agc ,_acf :=encoder .EncodeBytes (img .Data );if _acf !=nil {return nil ,_acf ;};_ecf ._bbce =_agc ;_efb :=encoder .GetFilterName ();if _efb !=_ee .StreamEncodingFilterNameRaw {_ecf .Filter =_ee .MakeName (_efb );};return &_ecf ,nil ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bbg *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_gdb :=ContentStreamOperation {};_gdb .Operand ="\u0076";_gdb .Params =_gce ([]float64 {x2 ,y2 ,x3 ,y3 });_bbg ._fa =append (_bbg ._fa ,&_gdb );return _bbg ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_gad *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_ddg :=_e .Cos (angle *_e .Pi /180.0);_aebd :=_e .Sin (angle *_e .Pi /180.0);_dee :=-_e .Sin (angle *_e .Pi /180.0);_gd :=_e .Cos (angle *_e .Pi /180.0);return _gad .Add_cm (_ddg ,_aebd ,_dee ,_gd ,0,0);};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_gcbg :=ContentStreamParser {};_acea :=_ad .NewBufferString (contentStr +"\u000a");_gcbg ._dcd =_d .NewReader (_acea );return &_gcbg ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bcf *ContentCreator )Add_B_starred ()*ContentCreator {_eab :=ContentStreamOperation {};_eab .Operand ="\u0042\u002a";_bcf ._fa =append (_bcf ._fa ,&_eab );return _bcf ;};func _faf (_aed *ContentStreamInlineImage )(*_ee .MultiEncoder ,error ){_fccd :=_ee .NewMultiEncoder ();var _eed *_ee .PdfObjectDictionary ;var _eag []_ee .PdfObject ;if _ecde :=_aed .DecodeParms ;_ecde !=nil {_bcb ,_aef :=_ecde .(*_ee .PdfObjectDictionary );if _aef {_eed =_bcb ;};_agaa ,_eeca :=_ecde .(*_ee .PdfObjectArray );if _eeca {for _ ,_ecc :=range _agaa .Elements (){if _dag ,_gfd :=_ecc .(*_ee .PdfObjectDictionary );_gfd {_eag =append (_eag ,_dag );}else {_eag =append (_eag ,nil );};};};};_gbe :=_aed .Filter ;if _gbe ==nil {return nil ,_b .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_bbca ,_dacc :=_gbe .(*_ee .PdfObjectArray );if !_dacc {return nil ,_b .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _daa ,_ffa :=range _bbca .Elements (){_eggf ,_egcg :=_ffa .(*_ee .PdfObjectName );if !_egcg {return nil ,_b .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _daaf _ee .PdfObject ;if _eed !=nil {_daaf =_eed ;}else {if len (_eag )> 0{if _daa >=len (_eag ){return nil ,_b .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_daaf =_eag [_daa ];};};var _aad *_ee .PdfObjectDictionary ;if _daae ,_ddeg :=_daaf .(*_ee .PdfObjectDictionary );_ddeg {_aad =_daae ;};if *_eggf ==_ee .StreamEncodingFilterNameFlate ||*_eggf =="\u0046\u006c"{_cdgf ,_fca :=_gda (_aed ,_aad );if _fca !=nil {return nil ,_fca ;};_fccd .AddEncoder (_cdgf );}else if *_eggf ==_ee .StreamEncodingFilterNameLZW {_bec ,_cabb :=_ccdfc (_aed ,_aad );if _cabb !=nil {return nil ,_cabb ;};_fccd .AddEncoder (_bec );}else if *_eggf ==_ee .StreamEncodingFilterNameASCIIHex {_ada :=_ee .NewASCIIHexEncoder ();_fccd .AddEncoder (_ada );}else if *_eggf ==_ee .StreamEncodingFilterNameASCII85 ||*_eggf =="\u0041\u0038\u0035"{_afb :=_ee .NewASCII85Encoder ();_fccd .AddEncoder (_afb );}else {_dg .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_eggf );return nil ,_b .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _fccd ,nil ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ggc *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_fdgd :=ContentStreamOperation {};_fdgd .Operand ="\u006b";_fdgd .Params =_gce ([]float64 {c ,m ,y ,k });_ggc ._fa =append (_ggc ._fa ,&_fdgd );return _ggc ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cfe *ContentCreator )Add_s ()*ContentCreator {_adb :=ContentStreamOperation {};_adb .Operand ="\u0073";_cfe ._fa =append (_cfe ._fa ,&_adb );return _cfe ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bdc *ContentCreator )Add_Tj (textstr _ee .PdfObjectString )*ContentCreator {_dff :=ContentStreamOperation {};_dff .Operand ="\u0054\u006a";_dff .Params =_abde ([]_ee .PdfObjectString {textstr });_bdc ._fa =append (_bdc ._fa ,&_dff );return _bdc ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ecb *ContentCreator )Add_ri (intent _ee .PdfObjectName )*ContentCreator {_bbf :=ContentStreamOperation {};_bbf .Operand ="\u0072\u0069";_bbf .Params =_fdbb ([]_ee .PdfObjectName {intent });_ecb ._fa =append (_ecb ._fa ,&_bbf );return _ecb ;};func (_fcb *ContentStreamProcessor )handleCommand_scn (_abf *ContentStreamOperation ,_beeb *_fb .PdfPageResources )error {_cdf :=_fcb ._acae .ColorspaceNonStroking ;if !_eae (_cdf ){if len (_abf .Params )!=_cdf .GetNumComponents (){_dg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_abf .Params ),_cdf );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_aagc ,_ebe :=_cdf .ColorFromPdfObjects (_abf .Params );if _ebe !=nil {_dg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_abf .Params ,_cdf );return _ebe ;};_fcb ._acae .ColorNonStroking =_aagc ;return nil ;};func _gda (_acc *ContentStreamInlineImage ,_cda *_ee .PdfObjectDictionary )(*_ee .FlateEncoder ,error ){_gbb :=_ee .NewFlateEncoder ();if _acc ._faa !=nil {_gbb .SetImage (_acc ._faa );};if _cda ==nil {_eacf :=_acc .DecodeParms ;if _eacf !=nil {_ccdc ,_eddd :=_ee .GetDict (_eacf );if !_eddd {_dg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_eacf );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_cda =_ccdc ;};};if _cda ==nil {return _gbb ,nil ;};_dg .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_cda .String ());_eacfd :=_cda .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _eacfd ==nil {_dg .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_dga ,_afee :=_eacfd .(*_ee .PdfObjectInteger );if !_afee {_dg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_eacfd );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_gbb .Predictor =int (*_dga );};_eacfd =_cda .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _eacfd !=nil {_aec ,_dfb :=_eacfd .(*_ee .PdfObjectInteger );if !_dfb {_dg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_b .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_gbb .BitsPerComponent =int (*_aec );};if _gbb .Predictor > 1{_gbb .Columns =1;_eacfd =_cda .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _eacfd !=nil {_cg ,_ceae :=_eacfd .(*_ee .PdfObjectInteger );if !_ceae {return nil ,_b .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_gbb .Columns =int (*_cg );};_gbb .Colors =1;_fda :=_cda .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _fda !=nil {_ggfc ,_abcd :=_fda .(*_ee .PdfObjectInteger );if !_abcd {return nil ,_b .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_gbb .Colors =int (*_ggfc );};};return _gbb ,nil ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dedd *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_gcf :=ContentStreamOperation {};_gcf .Operand ="\u006c";_gcf .Params =_gce ([]float64 {x ,y });_dedd ._fa =append (_dedd ._fa ,&_gcf );return _dedd ;};type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_cfcg *ContentStreamProcessor )Process (resources *_fb .PdfPageResources )error {_cfcg ._acae .ColorspaceStroking =_fb .NewPdfColorspaceDeviceGray ();_cfcg ._acae .ColorspaceNonStroking =_fb .NewPdfColorspaceDeviceGray ();_cfcg ._acae .ColorStroking =_fb .NewPdfColorDeviceGray (0);_cfcg ._acae .ColorNonStroking =_fb .NewPdfColorDeviceGray (0);_cfcg ._acae .CTM =_eg .IdentityMatrix ();for _ ,_becf :=range _cfcg ._bff {var _cac error ;switch _becf .Operand {case "\u0071":_cfcg ._daff .Push (_cfcg ._acae );case "\u0051":if len (_cfcg ._daff )==0{_dg .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_cfcg ._acae =_cfcg ._daff .Pop ();case "\u0043\u0053":_cac =_cfcg .handleCommand_CS (_becf ,resources );case "\u0063\u0073":_cac =_cfcg .handleCommand_cs (_becf ,resources );case "\u0053\u0043":_cac =_cfcg .handleCommand_SC (_becf ,resources );case "\u0053\u0043\u004e":_cac =_cfcg .handleCommand_SCN (_becf ,resources );case "\u0073\u0063":_cac =_cfcg .handleCommand_sc (_becf ,resources );case "\u0073\u0063\u006e":_cac =_cfcg .handleCommand_scn (_becf ,resources );case "\u0047":_cac =_cfcg .handleCommand_G (_becf ,resources );case "\u0067":_cac =_cfcg .handleCommand_g (_becf ,resources );case "\u0052\u0047":_cac =_cfcg .handleCommand_RG (_becf ,resources );case "\u0072\u0067":_cac =_cfcg .handleCommand_rg (_becf ,resources );case "\u004b":_cac =_cfcg .handleCommand_K (_becf ,resources );case "\u006b":_cac =_cfcg .handleCommand_k (_becf ,resources );case "\u0063\u006d":_cac =_cfcg .handleCommand_cm (_becf ,resources );};if _cac !=nil {_dg .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_becf .Operand ,_cac );_dg .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_becf .Operand );return _cac ;};for _ ,_ecdbd :=range _cfcg ._afgc {var _efd error ;if _ecdbd .Condition .All (){_efd =_ecdbd .Handler (_becf ,_cfcg ._acae ,resources );}else if _ecdbd .Condition .Operand ()&&_becf .Operand ==_ecdbd .Operand {_efd =_ecdbd .Handler (_becf ,_cfcg ._acae ,resources );};if _efd !=nil {_dg .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_efd );return _efd ;};};};return nil ;};func _eae (_bfe _fb .PdfColorspace )bool {_ ,_aceag :=_bfe .(*_fb .PdfColorspaceSpecialPattern );return _aceag ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dde *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_ddac :=ContentStreamOperation {};_ddac .Operand ="\u0054\u0063";_ddac .Params =_gce ([]float64 {charSpace });_dde ._fa =append (_dde ._fa ,&_ddac );return _dde ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bf *ContentCreator )Add_n ()*ContentCreator {_ged :=ContentStreamOperation {};_ged .Operand ="\u006e";_bf ._fa =append (_bf ._fa ,&_ged );return _bf ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_dab *ContentCreator )Bytes ()[]byte {return _dab ._fa .Bytes ()};func (_acccf *ContentStreamParser )skipSpaces ()(int ,error ){_aceaf :=0;for {_deb ,_bcff :=_acccf ._dcd .Peek (1);if _bcff !=nil {return 0,_bcff ;};if _ee .IsWhiteSpace (_deb [0]){_acccf ._dcd .ReadByte ();_aceaf ++;}else {break ;};};return _aceaf ,nil ;};func (_eecad *ContentStreamInlineImage )String ()string {_gcba :=_b .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_eecad ._bbce ));if _eecad .BitsPerComponent !=nil {_gcba +="\u002d\u0020\u0042\u0050\u0043\u0020"+_eecad .BitsPerComponent .WriteString ()+"\u000a";};if _eecad .ColorSpace !=nil {_gcba +="\u002d\u0020\u0043S\u0020"+_eecad .ColorSpace .WriteString ()+"\u000a";};if _eecad .Decode !=nil {_gcba +="\u002d\u0020\u0044\u0020"+_eecad .Decode .WriteString ()+"\u000a";};if _eecad .DecodeParms !=nil {_gcba +="\u002d\u0020\u0044P\u0020"+_eecad .DecodeParms .WriteString ()+"\u000a";};if _eecad .Filter !=nil {_gcba +="\u002d\u0020\u0046\u0020"+_eecad .Filter .WriteString ()+"\u000a";};if _eecad .Height !=nil {_gcba +="\u002d\u0020\u0048\u0020"+_eecad .Height .WriteString ()+"\u000a";};if _eecad .ImageMask !=nil {_gcba +="\u002d\u0020\u0049M\u0020"+_eecad .ImageMask .WriteString ()+"\u000a";};if _eecad .Intent !=nil {_gcba +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_eecad .Intent .WriteString ()+"\u000a";};if _eecad .Interpolate !=nil {_gcba +="\u002d\u0020\u0049\u0020"+_eecad .Interpolate .WriteString ()+"\u000a";};if _eecad .Width !=nil {_gcba +="\u002d\u0020\u0057\u0020"+_eecad .Width .WriteString ()+"\u000a";};return _gcba ;};func (_bag *ContentStreamProcessor )handleCommand_G (_ggfbb *ContentStreamOperation ,_fcd *_fb .PdfPageResources )error {_gedb :=_fb .NewPdfColorspaceDeviceGray ();if len (_ggfbb .Params )!=_gedb .GetNumComponents (){_dg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ggfbb .Params ),_gedb );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_deddc ,_beb :=_gedb .ColorFromPdfObjects (_ggfbb .Params );if _beb !=nil {return _beb ;};_bag ._acae .ColorspaceStroking =_gedb ;_bag ._acae .ColorStroking =_deddc ;return nil ;};

// WriteString outputs the object as it is to be written to file.
func (_bbcd *ContentStreamInlineImage )WriteString ()string {var _adeba _ad .Buffer ;_gae :="";if _bbcd .BitsPerComponent !=nil {_gae +="\u002f\u0042\u0050C\u0020"+_bbcd .BitsPerComponent .WriteString ()+"\u000a";};if _bbcd .ColorSpace !=nil {_gae +="\u002f\u0043\u0053\u0020"+_bbcd .ColorSpace .WriteString ()+"\u000a";};if _bbcd .Decode !=nil {_gae +="\u002f\u0044\u0020"+_bbcd .Decode .WriteString ()+"\u000a";};if _bbcd .DecodeParms !=nil {_gae +="\u002f\u0044\u0050\u0020"+_bbcd .DecodeParms .WriteString ()+"\u000a";};if _bbcd .Filter !=nil {_gae +="\u002f\u0046\u0020"+_bbcd .Filter .WriteString ()+"\u000a";};if _bbcd .Height !=nil {_gae +="\u002f\u0048\u0020"+_bbcd .Height .WriteString ()+"\u000a";};if _bbcd .ImageMask !=nil {_gae +="\u002f\u0049\u004d\u0020"+_bbcd .ImageMask .WriteString ()+"\u000a";};if _bbcd .Intent !=nil {_gae +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_bbcd .Intent .WriteString ()+"\u000a";};if _bbcd .Interpolate !=nil {_gae +="\u002f\u0049\u0020"+_bbcd .Interpolate .WriteString ()+"\u000a";};if _bbcd .Width !=nil {_gae +="\u002f\u0057\u0020"+_bbcd .Width .WriteString ()+"\u000a";};_adeba .WriteString (_gae );_adeba .WriteString ("\u0049\u0044\u0020");_adeba .Write (_bbcd ._bbce );_adeba .WriteString ("\u000a\u0045\u0049\u000a");return _adeba .String ();};

// GetColorSpace returns the colorspace of the inline image.
func (_aaea *ContentStreamInlineImage )GetColorSpace (resources *_fb .PdfPageResources )(_fb .PdfColorspace ,error ){if _aaea .ColorSpace ==nil {_dg .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _fb .NewPdfColorspaceDeviceGray (),nil ;};if _cggd ,_aab :=_aaea .ColorSpace .(*_ee .PdfObjectArray );_aab {return _afecg (_cggd );};_ecdc ,_bgf :=_aaea .ColorSpace .(*_ee .PdfObjectName );if !_bgf {_dg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_aaea .ColorSpace ,_aaea .ColorSpace );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_ecdc =="\u0047"||*_ecdc =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _fb .NewPdfColorspaceDeviceGray (),nil ;}else if *_ecdc =="\u0052\u0047\u0042"||*_ecdc =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _fb .NewPdfColorspaceDeviceRGB (),nil ;}else if *_ecdc =="\u0043\u004d\u0059\u004b"||*_ecdc =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _fb .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_ecdc =="\u0049"||*_ecdc =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_f .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_dg .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_ecdc );return nil ,_f .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_gfb ,_acb :=resources .GetColorspaceByName (*_ecdc );if !_acb {_dg .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_ecdc );return nil ,_f .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _gfb ,nil ;};};var (ErrInvalidOperand =_f .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cdd *ContentCreator )Add_h ()*ContentCreator {_edd :=ContentStreamOperation {};_edd .Operand ="\u0068";_cdd ._fa =append (_cdd ._fa ,&_edd );return _cdd ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_dcg *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_fcc :=ContentStreamOperation {};_fcc .Operand ="\u0054\u0064";_fcc .Params =_gce ([]float64 {tx ,ty });_dcg ._fa =append (_dcg ._fa ,&_fcc );return _dcg ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bbc *ContentCreator )Add_Tstar ()*ContentCreator {_eeg :=ContentStreamOperation {};_eeg .Operand ="\u0054\u002a";_bbc ._fa =append (_bbc ._fa ,&_eeg );return _bbc ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_dcd *_d .Reader };

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_adc :=ContentStreamProcessor {};_adc ._daff =GraphicStateStack {};_dbd :=GraphicsState {};_adc ._acae =_dbd ;_adc ._afgc =[]handlerEntry {};_adc ._edcd =0;_adc ._bff =ops ;return &_adc ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_af *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_ddf :=ContentStreamOperation {};_ddf .Operand ="\u004a";_ddf .Params =_fdbb ([]_ee .PdfObjectName {_ee .PdfObjectName (lineCapStyle )});_af ._fa =append (_af ._fa ,&_ddf );return _af ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dcf *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_cde :=ContentStreamOperation {};_cde .Operand ="\u0052\u0047";_cde .Params =_gce ([]float64 {r ,g ,b });_dcf ._fa =append (_dcf ._fa ,&_cde );return _dcf ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_add *ContentCreator )Add_i (flatness float64 )*ContentCreator {_ffg :=ContentStreamOperation {};_ffg .Operand ="\u0069";_ffg .Params =_gce ([]float64 {flatness });_add ._fa =append (_add ._fa ,&_ffg );return _add ;};func (_afbd *ContentStreamParser )parseBool ()(_ee .PdfObjectBool ,error ){_bdfb ,_fag :=_afbd ._dcd .Peek (4);if _fag !=nil {return _ee .PdfObjectBool (false ),_fag ;};if (len (_bdfb )>=4)&&(string (_bdfb [:4])=="\u0074\u0072\u0075\u0065"){_afbd ._dcd .Discard (4);return _ee .PdfObjectBool (true ),nil ;};_bdfb ,_fag =_afbd ._dcd .Peek (5);if _fag !=nil {return _ee .PdfObjectBool (false ),_fag ;};if (len (_bdfb )>=5)&&(string (_bdfb [:5])=="\u0066\u0061\u006cs\u0065"){_afbd ._dcd .Discard (5);return _ee .PdfObjectBool (false ),nil ;};return _ee .PdfObjectBool (false ),_f .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_ac :=&ContentCreator {};_ac ._fa =ContentStreamOperations {};return _ac ;};

// AddOperand adds a specified operand.
func (_aa *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_aa ._fa =append (_aa ._fa ,&op );return _aa ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_agd *ContentCreator )Add_f_starred ()*ContentCreator {_eeb :=ContentStreamOperation {};_eeb .Operand ="\u0066\u002a";_agd ._fa =append (_agd ._fa ,&_eeb );return _agd ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_eeff *ContentCreator )Add_TJ (vals ..._ee .PdfObject )*ContentCreator {_cea :=ContentStreamOperation {};_cea .Operand ="\u0054\u004a";_cea .Params =[]_ee .PdfObject {_ee .MakeArray (vals ...)};_eeff ._fa =append (_eeff ._fa ,&_cea );return _eeff ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fff *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_baa :=ContentStreamOperation {};_baa .Operand ="\u0054\u007a";_baa .Params =_gce ([]float64 {scale });_fff ._fa =append (_fff ._fa ,&_baa );return _fff ;};

// GetEncoder returns the encoder of the inline image.
func (_bce *ContentStreamInlineImage )GetEncoder ()(_ee .StreamEncoder ,error ){return _aega (_bce )};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_afg *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_gaf :=ContentStreamOperation {};_gaf .Operand ="\u0053\u0043";_gaf .Params =_gce (c );_afg ._fa =append (_afg ._fa ,&_gaf );return _afg ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gec *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_dcaf :=ContentStreamOperation {};_dcaf .Operand ="\u0072\u0065";_dcaf .Params =_gce ([]float64 {x ,y ,width ,height });_gec ._fa =append (_gec ._fa ,&_dcaf );return _gec ;};

// Push pushes `gs` on the `gsStack`.
func (_fgf *GraphicStateStack )Push (gs GraphicsState ){*_fgf =append (*_fgf ,gs )};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_ffea *ContentStreamOperation ,_cfab GraphicsState ,_aebc *_fb .PdfPageResources )error ;

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ccd *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_bd :=ContentStreamOperation {};_bd .Operand ="\u0077";_bd .Params =_gce ([]float64 {lineWidth });_ccd ._fa =append (_ccd ._fa ,&_bd );return _ccd ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_abe *ContentCreator )Add_quote (textstr _ee .PdfObjectString )*ContentCreator {_dcb :=ContentStreamOperation {};_dcb .Operand ="\u0027";_dcb .Params =_abde ([]_ee .PdfObjectString {textstr });_abe ._fa =append (_abe ._fa ,&_dcb );return _abe ;};func (_dgd *ContentStreamParser )skipComments ()error {if _ ,_deba :=_dgd .skipSpaces ();_deba !=nil {return _deba ;};_affc :=true ;for {_ebb ,_bdag :=_dgd ._dcd .Peek (1);if _bdag !=nil {_dg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bdag .Error ());return _bdag ;};if _affc &&_ebb [0]!='%'{return nil ;};_affc =false ;if (_ebb [0]!='\r')&&(_ebb [0]!='\n'){_dgd ._dcd .ReadByte ();}else {break ;};};return _dgd .skipComments ();};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_ece *ContentCreator )Add_EMC ()*ContentCreator {_gbd :=ContentStreamOperation {};_gbd .Operand ="\u0045\u004d\u0043";_ece ._fa =append (_ece ._fa ,&_gbd );return _ece ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_edgf HandlerConditionEnum )Operand ()bool {return _edgf ==HandlerConditionEnumOperand };

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_bbe *ContentCreator )Add_Do (name _ee .PdfObjectName )*ContentCreator {_fe :=ContentStreamOperation {};_fe .Operand ="\u0044\u006f";_fe .Params =_fdbb ([]_ee .PdfObjectName {name });_bbe ._fa =append (_bbe ._fa ,&_fe );return _bbe ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ef *ContentCreator )Add_SCN_pattern (name _ee .PdfObjectName ,c ...float64 )*ContentCreator {_fdb :=ContentStreamOperation {};_fdb .Operand ="\u0053\u0043\u004e";_fdb .Params =_gce (c );_fdb .Params =append (_fdb .Params ,_ee .MakeName (string (name )));_ef ._fa =append (_ef ._fa ,&_fdb );return _ef ;};func (_gaec *ContentStreamProcessor )handleCommand_cs (_aaee *ContentStreamOperation ,_gcbgc *_fb .PdfPageResources )error {if len (_aaee .Params )< 1{_dg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _f .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_aaee .Params )> 1{_dg .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _f .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_afec ,_ggff :=_aaee .Params [0].(*_ee .PdfObjectName );if !_ggff {_dg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_ddb ,_eda :=_gaec .getColorspace (string (*_afec ),_gcbgc );if _eda !=nil {return _eda ;};_gaec ._acae .ColorspaceNonStroking =_ddb ;_gfcc ,_eda :=_gaec .getInitialColor (_ddb );if _eda !=nil {return _eda ;};_gaec ._acae .ColorNonStroking =_gfcc ;return nil ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_acad *ContentStreamInlineImage )ToImage (resources *_fb .PdfPageResources )(*_fb .Image ,error ){_efge ,_ega :=_acad .toImageBase (resources );if _ega !=nil {return nil ,_ega ;};_eefc ,_ega :=_aega (_acad );if _ega !=nil {return nil ,_ega ;};_dg .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_eefc ,_eefc );_dg .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_acad );_eecf ,_ega :=_eefc .DecodeBytes (_acad ._bbce );if _ega !=nil {return nil ,_ega ;};_bbcc :=&_fb .Image {Width :int64 (_efge .Width ),Height :int64 (_efge .Height ),BitsPerComponent :int64 (_efge .BitsPerComponent ),ColorComponents :_efge .ColorComponents ,Data :_eecf };if len (_efge .Decode )> 0{for _dace :=0;_dace < len (_efge .Decode );_dace ++{_efge .Decode [_dace ]*=float64 ((int (1)<<uint (_efge .BitsPerComponent ))-1);};_bbcc .SetDecode (_efge .Decode );};return _bbcc ,nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_afa *ContentCreator )Add_CS (name _ee .PdfObjectName )*ContentCreator {_acg :=ContentStreamOperation {};_acg .Operand ="\u0043\u0053";_acg .Params =_fdbb ([]_ee .PdfObjectName {name });_afa ._fa =append (_afa ._fa ,&_acg );return _afa ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_daff GraphicStateStack ;_bff []*ContentStreamOperation ;_acae GraphicsState ;_afgc []handlerEntry ;_edcd int ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_addf *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_fdc :=ContentStreamOperation {};_fdc .Operand ="\u004b";_fdc .Params =_gce ([]float64 {c ,m ,y ,k });_addf ._fa =append (_addf ._fa ,&_fdc );return _addf ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ca *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_gcb :=ContentStreamOperation {};_gcb .Operand ="\u0063";_gcb .Params =_gce ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_ca ._fa =append (_ca ._fa ,&_gcb );return _ca ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fde *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_ded :=ContentStreamOperation {};_ded .Operand ="\u0064";_ded .Params =[]_ee .PdfObject {};_ded .Params =append (_ded .Params ,_ee .MakeArrayFromIntegers64 (dashArray ));_ded .Params =append (_ded .Params ,_ee .MakeInteger (dashPhase ));_fde ._fa =append (_fde ._fa ,&_ded );return _fde ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fgg *ContentCreator )Add_Tf (fontName _ee .PdfObjectName ,fontSize float64 )*ContentCreator {_cfb :=ContentStreamOperation {};_cfb .Operand ="\u0054\u0066";_cfb .Params =_fdbb ([]_ee .PdfObjectName {fontName });_cfb .Params =append (_cfb .Params ,_gce ([]float64 {fontSize })...);_fgg ._fa =append (_fgg ._fa ,&_cfb );return _fgg ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_fa ContentStreamOperations };func (_dbdb *ContentStreamProcessor )handleCommand_sc (_feca *ContentStreamOperation ,_abeg *_fb .PdfPageResources )error {_dbfb :=_dbdb ._acae .ColorspaceNonStroking ;if !_eae (_dbfb ){if len (_feca .Params )!=_dbfb .GetNumComponents (){_dg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_feca .Params ),_dbfb );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_agfc ,_bcdf :=_dbfb .ColorFromPdfObjects (_feca .Params );if _bcdf !=nil {return _bcdf ;};_dbdb ._acae .ColorNonStroking =_agfc ;return nil ;};func _aega (_aac *ContentStreamInlineImage )(_ee .StreamEncoder ,error ){if _aac .Filter ==nil {return _ee .NewRawEncoder (),nil ;};_def ,_fffg :=_aac .Filter .(*_ee .PdfObjectName );if !_fffg {_adeb ,_fed :=_aac .Filter .(*_ee .PdfObjectArray );if !_fed {return nil ,_b .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _adeb .Len ()==0{return _ee .NewRawEncoder (),nil ;};if _adeb .Len ()!=1{_cbg ,_dfeb :=_faf (_aac );if _dfeb !=nil {_dg .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_dfeb );return nil ,_dfeb ;};_dg .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_cbg );return _cbg ,nil ;};_ecg :=_adeb .Get (0);_def ,_fed =_ecg .(*_ee .PdfObjectName );if !_fed {return nil ,_b .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_def {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _ee .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _ee .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _aff (_aac );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _gda (_aac ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _ccdfc (_aac ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _ee .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _ee .NewRunLengthEncoder (),nil ;default:_dg .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_def );return nil ,_f .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};func (_cfac *ContentStreamProcessor )handleCommand_CS (_eaaf *ContentStreamOperation ,_dgbd *_fb .PdfPageResources )error {if len (_eaaf .Params )< 1{_dg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _f .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_eaaf .Params )> 1{_dg .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _f .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_fefb ,_eggb :=_eaaf .Params [0].(*_ee .PdfObjectName );if !_eggb {_dg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_fffc ,_cag :=_cfac .getColorspace (string (*_fefb ),_dgbd );if _cag !=nil {return _cag ;};_cfac ._acae .ColorspaceStroking =_fffc ;_bbdc ,_cag :=_cfac .getInitialColor (_fffc );if _cag !=nil {return _cag ;};_cfac ._acae .ColorStroking =_bbdc ;return nil ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gac *ContentCreator )Add_q ()*ContentCreator {_fac :=ContentStreamOperation {};_fac .Operand ="\u0071";_gac ._fa =append (_gac ._fa ,&_fac );return _gac ;};func (_fbd *ContentStreamProcessor )handleCommand_RG (_bgec *ContentStreamOperation ,_gagf *_fb .PdfPageResources )error {_dbaf :=_fb .NewPdfColorspaceDeviceRGB ();if len (_bgec .Params )!=_dbaf .GetNumComponents (){_dg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_dg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bgec .Params ),_dbaf );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cfec ,_gab :=_dbaf .ColorFromPdfObjects (_bgec .Params );if _gab !=nil {return _gab ;};_fbd ._acae .ColorspaceStroking =_dbaf ;_fbd ._acae .ColorStroking =_cfec ;return nil ;};func (_badg *ContentStreamProcessor )handleCommand_SC (_efgf *ContentStreamOperation ,_fgfd *_fb .PdfPageResources )error {_aegc :=_badg ._acae .ColorspaceStroking ;if len (_efgf .Params )!=_aegc .GetNumComponents (){_dg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_efgf .Params ),_aegc );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dgfb ,_ebab :=_aegc .ColorFromPdfObjects (_efgf .Params );if _ebab !=nil {return _ebab ;};_badg ._acae .ColorStroking =_dgfb ;return nil ;};func _ccdfc (_dfd *ContentStreamInlineImage ,_cfc *_ee .PdfObjectDictionary )(*_ee .LZWEncoder ,error ){_cegc :=_ee .NewLZWEncoder ();if _cfc ==nil {if _dfd .DecodeParms !=nil {_cgg ,_cab :=_ee .GetDict (_dfd .DecodeParms );if !_cab {_dg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_dfd .DecodeParms );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_cfc =_cgg ;};};if _cfc ==nil {return _cegc ,nil ;};_dbc :=_cfc .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _dbc !=nil {_bgd ,_cbf :=_dbc .(*_ee .PdfObjectInteger );if !_cbf {_dg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_dbc );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_bgd !=0&&*_bgd !=1{return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_cegc .EarlyChange =int (*_bgd );}else {_cegc .EarlyChange =1;};_dbc =_cfc .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _dbc !=nil {_aaa ,_gcbd :=_dbc .(*_ee .PdfObjectInteger );if !_gcbd {_dg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_dbc );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_cegc .Predictor =int (*_aaa );};_dbc =_cfc .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _dbc !=nil {_acgd ,_bgdd :=_dbc .(*_ee .PdfObjectInteger );if !_bgdd {_dg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_b .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_cegc .BitsPerComponent =int (*_acgd );};if _cegc .Predictor > 1{_cegc .Columns =1;_dbc =_cfc .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _dbc !=nil {_fbg ,_ccag :=_dbc .(*_ee .PdfObjectInteger );if !_ccag {return nil ,_b .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_cegc .Columns =int (*_fbg );};_cegc .Colors =1;_dbc =_cfc .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dbc !=nil {_gag ,_eegd :=_dbc .(*_ee .PdfObjectInteger );if !_eegd {return nil ,_b .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_cegc .Colors =int (*_gag );};};_dg .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_cfc .String ());return _cegc ,nil ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_gfa *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_ecd :=ContentStreamOperation {};_ecd .Operand ="\u0054\u0044";_ecd .Params =_gce ([]float64 {tx ,ty });_gfa ._fa =append (_gfa ._fa ,&_ecd );return _gfa ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_egcd *ContentCreator )Add_scn_pattern (name _ee .PdfObjectName ,c ...float64 )*ContentCreator {_ace :=ContentStreamOperation {};_ace .Operand ="\u0073\u0063\u006e";_ace .Params =_gce (c );_ace .Params =append (_ace .Params ,_ee .MakeName (string (name )));_egcd ._fa =append (_egcd ._fa ,&_ace );return _egcd ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _fb .PdfColorspace ;ColorspaceNonStroking _fb .PdfColorspace ;ColorStroking _fb .PdfColor ;ColorNonStroking _fb .PdfColor ;CTM _eg .Matrix ;};func _afecg (_eea _ee .PdfObject )(_fb .PdfColorspace ,error ){_dcbgc ,_cdb :=_eea .(*_ee .PdfObjectArray );if !_cdb {_dg .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_eea );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _dcbgc .Len ()!=4{_dg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_dcbgc .Len ());return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fddb ,_cdb :=_dcbgc .Get (0).(*_ee .PdfObjectName );if !_cdb {_dg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_dcbgc );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fddb !="\u0049"&&*_fddb !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_dg .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_fddb );return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fddb ,_cdb =_dcbgc .Get (1).(*_ee .PdfObjectName );if !_cdb {_dg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_dcbgc );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fddb !="\u0047"&&*_fddb !="\u0052\u0047\u0042"&&*_fddb !="\u0043\u004d\u0059\u004b"&&*_fddb !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_fddb !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_fddb !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_dg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_fddb );return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_aegb :="";switch *_fddb {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_aegb ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_aegb ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_aegb ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_cbgc :=_ee .MakeArray (_ee .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_ee .MakeName (_aegb ),_dcbgc .Get (2),_dcbgc .Get (3));return _fb .NewPdfColorspaceFromPdfObject (_cbgc );};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_afed *ContentCreator )Add_TL (leading float64 )*ContentCreator {_agac :=ContentStreamOperation {};_agac .Operand ="\u0054\u004c";_agac .Params =_gce ([]float64 {leading });_afed ._fa =append (_afed ._fa ,&_agac );return _afed ;};func (_dcde *ContentStreamParser )parseNumber ()(_ee .PdfObject ,error ){return _ee .ParseNumber (_dcde ._dcd );};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dfe *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_egd :=ContentStreamOperation {};_egd .Operand ="\u004d";_egd .Params =_gce ([]float64 {miterlimit });_dfe ._fa =append (_dfe ._fa ,&_egd );return _dfe ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_bed *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_dddf :=ContentStreamOperations {};for {_gba :=ContentStreamOperation {};for {_efbb ,_afgd ,_dafd :=_bed .parseObject ();if _dafd !=nil {if _dafd ==_g .EOF {return &_dddf ,nil ;};return &_dddf ,_dafd ;};if _afgd {_gba .Operand ,_ =_ee .GetStringVal (_efbb );_dddf =append (_dddf ,&_gba );break ;}else {_gba .Params =append (_gba .Params ,_efbb );};};if _gba .Operand =="\u0042\u0049"{_dcbg ,_eaad :=_bed .ParseInlineImage ();if _eaad !=nil {return &_dddf ,_eaad ;};_gba .Params =append (_gba .Params ,_dcbg );};};};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bbd *ContentCreator )Add_b_starred ()*ContentCreator {_ccb :=ContentStreamOperation {};_ccb .Operand ="\u0062\u002a";_bbd ._fa =append (_bbd ._fa ,&_ccb );return _bbd ;};

// String is same as Bytes() except returns as a string for convenience.
func (_ffb *ContentCreator )String ()string {return string (_ffb ._fa .Bytes ())};func (_ecab *ContentStreamProcessor )handleCommand_k (_eceg *ContentStreamOperation ,_aabe *_fb .PdfPageResources )error {_gedc :=_fb .NewPdfColorspaceDeviceCMYK ();if len (_eceg .Params )!=_gedc .GetNumComponents (){_dg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_eceg .Params ),_gedc );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cgfe ,_afc :=_gedc .ColorFromPdfObjects (_eceg .Params );if _afc !=nil {return _afc ;};_ecab ._acae .ColorspaceNonStroking =_gedc ;_ecab ._acae .ColorNonStroking =_cgfe ;return nil ;};func (_gcdc *ContentStreamParser )parseOperand ()(*_ee .PdfObjectString ,error ){var _abbg []byte ;for {_ffge ,_ggga :=_gcdc ._dcd .Peek (1);if _ggga !=nil {return _ee .MakeString (string (_abbg )),_ggga ;};if _ee .IsDelimiter (_ffge [0]){break ;};if _ee .IsWhiteSpace (_ffge [0]){break ;};_dad ,_ :=_gcdc ._dcd .ReadByte ();_abbg =append (_abbg ,_dad );};return _ee .MakeString (string (_abbg )),nil ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_agf *ContentStreamInlineImage )IsMask ()(bool ,error ){if _agf .ImageMask !=nil {_dcgb ,_eebf :=_agf .ImageMask .(*_ee .PdfObjectBool );if !_eebf {_dg .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_f .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_dcgb ),nil ;};return false ,nil ;};func (_fea *ContentStreamProcessor )handleCommand_cm (_abee *ContentStreamOperation ,_gfg *_fb .PdfPageResources )error {if len (_abee .Params )!=6{_dg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_abee .Params ));return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_ddfff ,_gcc :=_ee .GetNumbersAsFloat (_abee .Params );if _gcc !=nil {return _gcc ;};_cge :=_eg .NewMatrix (_ddfff [0],_ddfff [1],_ddfff [2],_ddfff [3],_ddfff [4],_ddfff [5]);_fea ._acae .CTM .Concat (_cge );return nil ;};func (_dedde *ContentStreamParser )parseObject ()(_cgga _ee .PdfObject ,_ddc bool ,_fdae error ){_dedde .skipSpaces ();for {_bfbb ,_efbc :=_dedde ._dcd .Peek (2);if _efbc !=nil {return nil ,false ,_efbc ;};_dg .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_bfbb ));if _bfbb [0]=='%'{_dedde .skipComments ();continue ;}else if _bfbb [0]=='/'{_aadf ,_gfed :=_dedde .parseName ();_dg .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_aadf );return &_aadf ,false ,_gfed ;}else if _bfbb [0]=='('{_dg .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_fbea ,_fede :=_dedde .parseString ();return _fbea ,false ,_fede ;}else if _bfbb [0]=='<'&&_bfbb [1]!='<'{_dg .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_ggd ,_ebac :=_dedde .parseHexString ();return _ggd ,false ,_ebac ;}else if _bfbb [0]=='['{_dg .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_cad ,_gcbgd :=_dedde .parseArray ();return _cad ,false ,_gcbgd ;}else if _ee .IsFloatDigit (_bfbb [0])||(_bfbb [0]=='-'&&_ee .IsFloatDigit (_bfbb [1])){_dg .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_abg ,_efc :=_dedde .parseNumber ();return _abg ,false ,_efc ;}else if _bfbb [0]=='<'&&_bfbb [1]=='<'{_bfa ,_gfc :=_dedde .parseDict ();return _bfa ,false ,_gfc ;}else {_dg .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_bfbb ,_ =_dedde ._dcd .Peek (5);_ead :=string (_bfbb );_dg .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_ead );if (len (_ead )> 3)&&(_ead [:4]=="\u006e\u0075\u006c\u006c"){_ecee ,_dgg :=_dedde .parseNull ();return &_ecee ,false ,_dgg ;}else if (len (_ead )> 4)&&(_ead [:5]=="\u0066\u0061\u006cs\u0065"){_acac ,_fgdd :=_dedde .parseBool ();return &_acac ,false ,_fgdd ;}else if (len (_ead )> 3)&&(_ead [:4]=="\u0074\u0072\u0075\u0065"){_cgfa ,_eege :=_dedde .parseBool ();return &_cgfa ,false ,_eege ;};_bab ,_ggcd :=_dedde .parseOperand ();if _ggcd !=nil {return _bab ,false ,_ggcd ;};if len (_bab .String ())< 1{return _bab ,false ,ErrInvalidOperand ;};return _bab ,true ,nil ;};};};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_dfg *ContentCreator )SetStrokingColor (color _fb .PdfColor )*ContentCreator {switch _aae :=color .(type ){case *_fb .PdfColorDeviceGray :_dfg .Add_G (_aae .Val ());case *_fb .PdfColorDeviceRGB :_dfg .Add_RG (_aae .R (),_aae .G (),_aae .B ());case *_fb .PdfColorDeviceCMYK :_dfg .Add_K (_aae .C (),_aae .M (),_aae .Y (),_aae .K ());default:_dg .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_aae );};return _dfg ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);func (_adab *ContentStreamParser )parseHexString ()(*_ee .PdfObjectString ,error ){_adab ._dcd .ReadByte ();_accd :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _bba []byte ;for {_adab .skipSpaces ();_gea ,_ggfb :=_adab ._dcd .Peek (1);if _ggfb !=nil {return _ee .MakeString (""),_ggfb ;};if _gea [0]=='>'{_adab ._dcd .ReadByte ();break ;};_fggf ,_ :=_adab ._dcd .ReadByte ();if _ad .IndexByte (_accd ,_fggf )>=0{_bba =append (_bba ,_fggf );};};if len (_bba )%2==1{_bba =append (_bba ,'0');};_beca ,_ :=_a .DecodeString (string (_bba ));return _ee .MakeHexString (string (_beca )),nil ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ebc *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_dea :=ContentStreamOperation {};_dea .Operand ="\u0073\u0063\u006e";_dea .Params =_gce (c );_ebc ._fa =append (_ebc ._fa ,&_dea );return _ebc ;};func (_beg *ContentStreamProcessor )handleCommand_K (_ecdd *ContentStreamOperation ,_daee *_fb .PdfPageResources )error {_fdd :=_fb .NewPdfColorspaceDeviceCMYK ();if len (_ecdd .Params )!=_fdd .GetNumComponents (){_dg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ecdd .Params ),_fdd );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bded ,_aaeg :=_fdd .ColorFromPdfObjects (_ecdd .Params );if _aaeg !=nil {return _aaeg ;};_beg ._acae .ColorspaceStroking =_fdd ;_beg ._acae .ColorStroking =_bded ;return nil ;};func (_afbg *ContentStreamParser )parseArray ()(*_ee .PdfObjectArray ,error ){_gbdc :=_ee .MakeArray ();_afbg ._dcd .ReadByte ();for {_afbg .skipSpaces ();_geg ,_addc :=_afbg ._dcd .Peek (1);if _addc !=nil {return _gbdc ,_addc ;};if _geg [0]==']'{_afbg ._dcd .ReadByte ();break ;};_dafa ,_ ,_addc :=_afbg .parseObject ();if _addc !=nil {return _gbdc ,_addc ;};_gbdc .Append (_dafa );};return _gbdc ,nil ;};func _dfbe (_dfbg string )bool {_ ,_dcc :=_cgf [_dfbg ];return _dcc };func _fdbb (_bae []_ee .PdfObjectName )[]_ee .PdfObject {var _dgfa []_ee .PdfObject ;for _ ,_gecbd :=range _bae {_dgfa =append (_dgfa ,_ee .MakeName (string (_gecbd )));};return _dgfa ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_daf *ContentCreator )SetNonStrokingColor (color _fb .PdfColor )*ContentCreator {switch _bcd :=color .(type ){case *_fb .PdfColorDeviceGray :_daf .Add_g (_bcd .Val ());case *_fb .PdfColorDeviceRGB :_daf .Add_rg (_bcd .R (),_bcd .G (),_bcd .B ());case *_fb .PdfColorDeviceCMYK :_daf .Add_k (_bcd .C (),_bcd .M (),_bcd .Y (),_bcd .K ());default:_dg .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_bcd );};return _daf ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_egc *ContentCreator )Add_b ()*ContentCreator {_fcg :=ContentStreamOperation {};_fcg .Operand ="\u0062";_egc ._fa =append (_egc ._fa ,&_fcg );return _egc ;};func _aff (_ebfd *ContentStreamInlineImage )(*_ee .DCTEncoder ,error ){_edg :=_ee .NewDCTEncoder ();_gdfe :=_ad .NewReader (_ebfd ._bbce );_bfb ,_cbc :=_ab .DecodeConfig (_gdfe );if _cbc !=nil {_dg .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_cbc );return nil ,_cbc ;};switch _bfb .ColorModel {case _dc .RGBAModel :_edg .BitsPerComponent =8;_edg .ColorComponents =3;case _dc .RGBA64Model :_edg .BitsPerComponent =16;_edg .ColorComponents =3;case _dc .GrayModel :_edg .BitsPerComponent =8;_edg .ColorComponents =1;case _dc .Gray16Model :_edg .BitsPerComponent =16;_edg .ColorComponents =1;case _dc .CMYKModel :_edg .BitsPerComponent =8;_edg .ColorComponents =4;case _dc .YCbCrModel :_edg .BitsPerComponent =8;_edg .ColorComponents =3;default:return nil ,_f .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_edg .Width =_bfb .Width ;_edg .Height =_bfb .Height ;_dg .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_edg );return _edg ,nil ;};

// String returns `ops.Bytes()` as a string.
func (_ae *ContentStreamOperations )String ()string {return string (_ae .Bytes ())};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _ee .PdfObject ;ColorSpace _ee .PdfObject ;Decode _ee .PdfObject ;DecodeParms _ee .PdfObject ;Filter _ee .PdfObject ;Height _ee .PdfObject ;ImageMask _ee .PdfObject ;Intent _ee .PdfObject ;Interpolate _ee .PdfObject ;Width _ee .PdfObject ;_bbce []byte ;_faa *_fd .ImageBase ;};