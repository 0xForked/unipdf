//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_f "bufio";_ga "bytes";_d "encoding/hex";_g "errors";_dd "fmt";_cg "github.com/unidoc/unipdf/v3/common";_db "github.com/unidoc/unipdf/v3/core";_fc "github.com/unidoc/unipdf/v3/internal/imageutil";_ec "github.com/unidoc/unipdf/v3/internal/transform";_ef "github.com/unidoc/unipdf/v3/model";_cd "image/color";_ge "image/jpeg";_e "io";_de "math";_a "strconv";);

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dge *ContentCreator )Add_ri (intent _db .PdfObjectName )*ContentCreator {_da :=ContentStreamOperation {};_da .Operand ="\u0072\u0069";_da .Params =_adda ([]_db .PdfObjectName {intent });_dge ._ecd =append (_dge ._ecd ,&_da );return _dge ;};

// AddOperand adds a specified operand.
func (_gga *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_gga ._ecd =append (_gga ._ecd ,&op );return _gga ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ddfa *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_dga :=ContentStreamOperation {};_dga .Operand ="\u0072\u0067";_dga .Params =_gbfc ([]float64 {r ,g ,b });_ddfa ._ecd =append (_ddfa ._ecd ,&_dga );return _ddfa ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_bg *ContentStreamParser )ExtractText ()(string ,error ){_aee ,_fcd :=_bg .Parse ();if _fcd !=nil {return "",_fcd ;};_deb :=false ;_gd ,_dbe :=float64 (-1),float64 (-1);_fce :="";for _ ,_fg :=range *_aee {if _fg .Operand =="\u0042\u0054"{_deb =true ;}else if _fg .Operand =="\u0045\u0054"{_deb =false ;};if _fg .Operand =="\u0054\u0064"||_fg .Operand =="\u0054\u0044"||_fg .Operand =="\u0054\u002a"{_fce +="\u000a";};if _fg .Operand =="\u0054\u006d"{if len (_fg .Params )!=6{continue ;};_cdf ,_fdb :=_fg .Params [4].(*_db .PdfObjectFloat );if !_fdb {_dc ,_fcc :=_fg .Params [4].(*_db .PdfObjectInteger );if !_fcc {continue ;};_cdf =_db .MakeFloat (float64 (*_dc ));};_eeb ,_fdb :=_fg .Params [5].(*_db .PdfObjectFloat );if !_fdb {_ea ,_bc :=_fg .Params [5].(*_db .PdfObjectInteger );if !_bc {continue ;};_eeb =_db .MakeFloat (float64 (*_ea ));};if _dbe ==-1{_dbe =float64 (*_eeb );}else if _dbe > float64 (*_eeb ){_fce +="\u000a";_gd =float64 (*_cdf );_dbe =float64 (*_eeb );continue ;};if _gd ==-1{_gd =float64 (*_cdf );}else if _gd < float64 (*_cdf ){_fce +="\u0009";_gd =float64 (*_cdf );};};if _deb &&_fg .Operand =="\u0054\u004a"{if len (_fg .Params )< 1{continue ;};_aec ,_fcb :=_fg .Params [0].(*_db .PdfObjectArray );if !_fcb {return "",_dd .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_fg .Params [0]);};for _ ,_aag :=range _aec .Elements (){switch _ad :=_aag .(type ){case *_db .PdfObjectString :_fce +=_ad .Str ();case *_db .PdfObjectFloat :if *_ad < -100{_fce +="\u0020";};case *_db .PdfObjectInteger :if *_ad < -100{_fce +="\u0020";};};};}else if _deb &&_fg .Operand =="\u0054\u006a"{if len (_fg .Params )< 1{continue ;};_fe ,_ff :=_fg .Params [0].(*_db .PdfObjectString );if !_ff {return "",_dd .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_fg .Params [0]);};_fce +=_fe .Str ();};};return _fce ,nil ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_fef *ContentCreator )Add_Tj (textstr _db .PdfObjectString )*ContentCreator {_cee :=ContentStreamOperation {};_cee .Operand ="\u0054\u006a";_cee .Params =_fbc ([]_db .PdfObjectString {textstr });_fef ._ecd =append (_fef ._ecd ,&_cee );return _fef ;};

// GetColorSpace returns the colorspace of the inline image.
func (_bbecd *ContentStreamInlineImage )GetColorSpace (resources *_ef .PdfPageResources )(_ef .PdfColorspace ,error ){if _bbecd .ColorSpace ==nil {_cg .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _ef .NewPdfColorspaceDeviceGray (),nil ;};if _dfe ,_cade :=_bbecd .ColorSpace .(*_db .PdfObjectArray );_cade {return _bce (_dfe );};_aad ,_gag :=_bbecd .ColorSpace .(*_db .PdfObjectName );if !_gag {_cg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_bbecd .ColorSpace ,_bbecd .ColorSpace );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_aad =="\u0047"||*_aad =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _ef .NewPdfColorspaceDeviceGray (),nil ;}else if *_aad =="\u0052\u0047\u0042"||*_aad =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _ef .NewPdfColorspaceDeviceRGB (),nil ;}else if *_aad =="\u0043\u004d\u0059\u004b"||*_aad =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _ef .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_aad =="\u0049"||*_aad =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_g .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_cg .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_aad );return nil ,_g .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_eda ,_egb :=resources .GetColorspaceByName (*_aad );if !_egb {_cg .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_aad );return nil ,_g .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _eda ,nil ;};};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_efd *ContentCreator )Add_quote (textstr _db .PdfObjectString )*ContentCreator {_dege :=ContentStreamOperation {};_dege .Operand ="\u0027";_dege .Params =_fbc ([]_db .PdfObjectString {textstr });_efd ._ecd =append (_efd ._ecd ,&_dege );return _efd ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dcf *ContentCreator )Add_G (gray float64 )*ContentCreator {_bf :=ContentStreamOperation {};_bf .Operand ="\u0047";_bf .Params =_gbfc ([]float64 {gray });_dcf ._ecd =append (_dcf ._ecd ,&_bf );return _dcf ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_def *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_age :=ContentStreamOperation {};_age .Operand ="\u0054\u0073";_age .Params =_gbfc ([]float64 {rise });_def ._ecd =append (_def ._ecd ,&_age );return _def ;};func (_bef *ContentStreamProcessor )handleCommand_RG (_cff *ContentStreamOperation ,_cadeg *_ef .PdfPageResources )error {_fdge :=_ef .NewPdfColorspaceDeviceRGB ();if len (_cff .Params )!=_fdge .GetNumComponents (){_cg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_cg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cff .Params ),_fdge );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_aagd ,_fgfa :=_fdge .ColorFromPdfObjects (_cff .Params );if _fgfa !=nil {return _fgfa ;};_bef ._bfec .ColorspaceStroking =_fdge ;_bef ._bfec .ColorStroking =_aagd ;return nil ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bab *ContentCreator )Add_quotes (textstr _db .PdfObjectString ,aw ,ac float64 )*ContentCreator {_ead :=ContentStreamOperation {};_ead .Operand ="\u0022";_ead .Params =_gbfc ([]float64 {aw ,ac });_ead .Params =append (_ead .Params ,_fbc ([]_db .PdfObjectString {textstr })...);_bab ._ecd =append (_bab ._ecd ,&_ead );return _bab ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bae *ContentCreator )Add_Q ()*ContentCreator {_bcb :=ContentStreamOperation {};_bcb .Operand ="\u0051";_bae ._ecd =append (_bae ._ecd ,&_bcb );return _bae ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bd *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_dag :=ContentStreamOperation {};_dag .Operand ="\u0053\u0043";_dag .Params =_gbfc (c );_bd ._ecd =append (_bd ._ecd ,&_dag );return _bd ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dfdg *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_dbg :=ContentStreamOperation {};_dbg .Operand ="\u0073\u0063\u006e";_dbg .Params =_gbfc (c );_dfdg ._ecd =append (_dfdg ._ecd ,&_dbg );return _dfdg ;};func (_degg *ContentStreamProcessor )handleCommand_k (_fgab *ContentStreamOperation ,_cfdc *_ef .PdfPageResources )error {_bafc :=_ef .NewPdfColorspaceDeviceCMYK ();if len (_fgab .Params )!=_bafc .GetNumComponents (){_cg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_cg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fgab .Params ),_bafc );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_baee ,_fbee :=_bafc .ColorFromPdfObjects (_fgab .Params );if _fbee !=nil {return _fbee ;};_degg ._bfec .ColorspaceNonStroking =_bafc ;_degg ._bfec .ColorNonStroking =_baee ;return nil ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _ef .PdfColorspace ;ColorspaceNonStroking _ef .PdfColorspace ;ColorStroking _ef .PdfColor ;ColorNonStroking _ef .PdfColor ;CTM _ec .Matrix ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fbg *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_fecg :=ContentStreamOperation {};_fecg .Operand ="\u0077";_fecg .Params =_gbfc ([]float64 {lineWidth });_fbg ._ecd =append (_fbg ._ecd ,&_fecg );return _fbg ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_ed *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_af :=_de .Cos (angle *_de .Pi /180.0);_ged :=_de .Sin (angle *_de .Pi /180.0);_ggd :=-_de .Sin (angle *_de .Pi /180.0);_ccd :=_de .Cos (angle *_de .Pi /180.0);return _ed .Add_cm (_af ,_ged ,_ggd ,_ccd ,0,0);};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bcfg *ContentCreator )Add_f ()*ContentCreator {_acd :=ContentStreamOperation {};_acd .Operand ="\u0066";_bcfg ._ecd =append (_bcfg ._ecd ,&_acd );return _bcfg ;};func (_cf *ContentStreamOperations )isWrapped ()bool {if len (*_cf )< 2{return false ;};_dg :=0;for _ ,_df :=range *_cf {if _df .Operand =="\u0071"{_dg ++;}else if _df .Operand =="\u0051"{_dg --;}else {if _dg < 1{return false ;};};};return _dg ==0;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_ggg *ContentCreator )Add_Do (name _db .PdfObjectName )*ContentCreator {_fcg :=ContentStreamOperation {};_fcg .Operand ="\u0044\u006f";_fcg .Params =_adda ([]_db .PdfObjectName {name });_ggg ._ecd =append (_ggg ._ecd ,&_fcg );return _ggg ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_cad *ContentCreator )Add_W ()*ContentCreator {_gdeg :=ContentStreamOperation {};_gdeg .Operand ="\u0057";_cad ._ecd =append (_cad ._ecd ,&_gdeg );return _cad ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_ebb *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_gbb :=ContentStreamOperation {};_gbb .Operand ="\u0054\u006d";_gbb .Params =_gbfc ([]float64 {a ,b ,c ,d ,e ,f });_ebb ._ecd =append (_ebb ._ecd ,&_gbb );return _ebb ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ag *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_dbb :=ContentStreamOperation {};_dbb .Operand ="\u004a";_dbb .Params =_adda ([]_db .PdfObjectName {_db .PdfObjectName (lineCapStyle )});_ag ._ecd =append (_ag ._ecd ,&_dbb );return _ag ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bgc *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_ege :=ContentStreamOperation {};_ege .Operand ="\u006b";_ege .Params =_gbfc ([]float64 {c ,m ,y ,k });_bgc ._ecd =append (_bgc ._ecd ,&_ege );return _bgc ;};func (_dad *ContentStreamParser )parseDict ()(*_db .PdfObjectDictionary ,error ){_cg .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_dbad :=_db .MakeDict ();_ece ,_ :=_dad ._eae .ReadByte ();if _ece !='<'{return nil ,_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_ece ,_ =_dad ._eae .ReadByte ();if _ece !='<'{return nil ,_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_dad .skipSpaces ();_afca ,_adg :=_dad ._eae .Peek (2);if _adg !=nil {return nil ,_adg ;};_cg .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_afca ),string (_afca ));if (_afca [0]=='>')&&(_afca [1]=='>'){_cg .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_dad ._eae .ReadByte ();_dad ._eae .ReadByte ();break ;};_cg .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_bgca ,_adg :=_dad .parseName ();_cg .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_bgca );if _adg !=nil {_cg .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_adg );return nil ,_adg ;};if len (_bgca )> 4&&_bgca [len (_bgca )-4:]=="\u006e\u0075\u006c\u006c"{_fgb :=_bgca [0:len (_bgca )-4];_cg .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_bgca );_cg .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_fgb );_dad .skipSpaces ();_ecaef ,_ :=_dad ._eae .Peek (1);if _ecaef [0]=='/'{_dbad .Set (_fgb ,_db .MakeNull ());continue ;};};_dad .skipSpaces ();_bad ,_ ,_adg :=_dad .parseObject ();if _adg !=nil {return nil ,_adg ;};_dbad .Set (_bgca ,_bad );_cg .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_bgca ,_bad .String ());};return _dbad ,nil ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bb *ContentCreator )Add_f_starred ()*ContentCreator {_add :=ContentStreamOperation {};_add .Operand ="\u0066\u002a";_bb ._ecd =append (_bb ._ecd ,&_add );return _bb ;};func (_adcf *ContentStreamParser )skipSpaces ()(int ,error ){_caf :=0;for {_cgaa ,_gcg :=_adcf ._eae .Peek (1);if _gcg !=nil {return 0,_gcg ;};if _db .IsWhiteSpace (_cgaa [0]){_adcf ._eae .ReadByte ();_caf ++;}else {break ;};};return _caf ,nil ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_dfea *ContentStreamProcessor )Process (resources *_ef .PdfPageResources )error {_dfea ._bfec .ColorspaceStroking =_ef .NewPdfColorspaceDeviceGray ();_dfea ._bfec .ColorspaceNonStroking =_ef .NewPdfColorspaceDeviceGray ();_dfea ._bfec .ColorStroking =_ef .NewPdfColorDeviceGray (0);_dfea ._bfec .ColorNonStroking =_ef .NewPdfColorDeviceGray (0);_dfea ._bfec .CTM =_ec .IdentityMatrix ();for _ ,_bdeeg :=range _dfea ._faaa {var _efdfg error ;switch _bdeeg .Operand {case "\u0071":_dfea ._aada .Push (_dfea ._bfec );case "\u0051":if len (_dfea ._aada )==0{_cg .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_dfea ._bfec =_dfea ._aada .Pop ();case "\u0043\u0053":_efdfg =_dfea .handleCommand_CS (_bdeeg ,resources );case "\u0063\u0073":_efdfg =_dfea .handleCommand_cs (_bdeeg ,resources );case "\u0053\u0043":_efdfg =_dfea .handleCommand_SC (_bdeeg ,resources );case "\u0053\u0043\u004e":_efdfg =_dfea .handleCommand_SCN (_bdeeg ,resources );case "\u0073\u0063":_efdfg =_dfea .handleCommand_sc (_bdeeg ,resources );case "\u0073\u0063\u006e":_efdfg =_dfea .handleCommand_scn (_bdeeg ,resources );case "\u0047":_efdfg =_dfea .handleCommand_G (_bdeeg ,resources );case "\u0067":_efdfg =_dfea .handleCommand_g (_bdeeg ,resources );case "\u0052\u0047":_efdfg =_dfea .handleCommand_RG (_bdeeg ,resources );case "\u0072\u0067":_efdfg =_dfea .handleCommand_rg (_bdeeg ,resources );case "\u004b":_efdfg =_dfea .handleCommand_K (_bdeeg ,resources );case "\u006b":_efdfg =_dfea .handleCommand_k (_bdeeg ,resources );case "\u0063\u006d":_efdfg =_dfea .handleCommand_cm (_bdeeg ,resources );};if _efdfg !=nil {_cg .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_bdeeg .Operand ,_efdfg );_cg .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_bdeeg .Operand );return _efdfg ;};for _ ,_gedbc :=range _dfea ._gedb {var _bbdc error ;if _gedbc .Condition .All (){_bbdc =_gedbc .Handler (_bdeeg ,_dfea ._bfec ,resources );}else if _gedbc .Condition .Operand ()&&_bdeeg .Operand ==_gedbc .Operand {_bbdc =_gedbc .Handler (_bdeeg ,_dfea ._bfec ,resources );};if _bbdc !=nil {_cg .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_bbdc );return _bbdc ;};};};return nil ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_ecd ContentStreamOperations };

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_db .PdfObject ;Operand string ;};func _fbc (_gcbda []_db .PdfObjectString )[]_db .PdfObject {var _fbbg []_db .PdfObject ;for _ ,_fgea :=range _gcbda {_fbbg =append (_fbbg ,_db .MakeString (_fgea .Str ()));};return _fbbg ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_faa *ContentCreator )Add_EMC ()*ContentCreator {_dfdc :=ContentStreamOperation {};_dfdc .Operand ="\u0045\u004d\u0043";_faa ._ecd =append (_faa ._ecd ,&_dfdc );return _faa ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bgf *ContentCreator )Add_Tf (fontName _db .PdfObjectName ,fontSize float64 )*ContentCreator {_gda :=ContentStreamOperation {};_gda .Operand ="\u0054\u0066";_gda .Params =_adda ([]_db .PdfObjectName {fontName });_gda .Params =append (_gda .Params ,_gbfc ([]float64 {fontSize })...);_bgf ._ecd =append (_bgf ._ecd ,&_gda );return _bgf ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gc *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_ade :=ContentStreamOperation {};_ade .Operand ="\u006a";_ade .Params =_adda ([]_db .PdfObjectName {_db .PdfObjectName (lineJoinStyle )});_gc ._ecd =append (_gc ._ecd ,&_ade );return _gc ;};func (_ccdd *ContentStreamParser )parseArray ()(*_db .PdfObjectArray ,error ){_bbbe :=_db .MakeArray ();_ccdd ._eae .ReadByte ();for {_ccdd .skipSpaces ();_fecdg ,_dfed :=_ccdd ._eae .Peek (1);if _dfed !=nil {return _bbbe ,_dfed ;};if _fecdg [0]==']'{_ccdd ._eae .ReadByte ();break ;};_caa ,_ ,_dfed :=_ccdd .parseObject ();if _dfed !=nil {return _bbbe ,_dfed ;};_bbbe .Append (_caa );};return _bbbe ,nil ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_fb :=&ContentCreator {};_fb ._ecd =ContentStreamOperations {};return _fb ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_ecgc *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _ecgc .CTM .Transform (x ,y );};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gdc *ContentCreator )Add_B ()*ContentCreator {_afg :=ContentStreamOperation {};_afg .Operand ="\u0042";_gdc ._ecd =append (_gdc ._ecd ,&_afg );return _gdc ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_bbd *GraphicStateStack )Pop ()GraphicsState {_dbd :=(*_bbd )[len (*_bbd )-1];*_bbd =(*_bbd )[:len (*_bbd )-1];return _dbd ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_gbc HandlerConditionEnum )Operand ()bool {return _gbc ==HandlerConditionEnumOperand };

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_eg *ContentCreator )Bytes ()[]byte {return _eg ._ecd .Bytes ()};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _db .PdfObject ;ColorSpace _db .PdfObject ;Decode _db .PdfObject ;DecodeParms _db .PdfObject ;Filter _db .PdfObject ;Height _db .PdfObject ;ImageMask _db .PdfObject ;Intent _db .PdfObject ;Interpolate _db .PdfObject ;Width _db .PdfObject ;_fegc []byte ;_ecf *_fc .ImageBase ;};func (_fcfd *ContentStreamProcessor )handleCommand_scn (_fdga *ContentStreamOperation ,_bfef *_ef .PdfPageResources )error {_adcb :=_fcfd ._bfec .ColorspaceNonStroking ;if !_eggf (_adcb ){if len (_fdga .Params )!=_adcb .GetNumComponents (){_cg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_cg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fdga .Params ),_adcb );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_cfb ,_acbb :=_adcb .ColorFromPdfObjects (_fdga .Params );if _acbb !=nil {_cg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_fdga .Params ,_adcb );return _acbb ;};_fcfd ._bfec .ColorNonStroking =_cfb ;return nil ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gbgb *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_acf :=ContentStreamOperation {};_acf .Operand ="\u0053\u0043\u004e";_acf .Params =_gbfc (c );_gbgb ._ecd =append (_gbgb ._ecd ,&_acf );return _gbgb ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bgb *ContentCreator )Add_h ()*ContentCreator {_ab :=ContentStreamOperation {};_ab .Operand ="\u0068";_bgb ._ecd =append (_bgb ._ecd ,&_ab );return _bgb ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gbg *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_fea :=ContentStreamOperation {};_fea .Operand ="\u0063";_fea .Params =_gbfc ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_gbg ._ecd =append (_gbg ._ecd ,&_fea );return _gbg ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cfg *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_eec :=ContentStreamOperation {};_eec .Operand ="\u0054\u0077";_eec .Params =_gbfc ([]float64 {wordSpace });_cfg ._ecd =append (_cfg ._ecd ,&_eec );return _cfg ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_gg *ContentStreamOperations )Bytes ()[]byte {var _gb _ga .Buffer ;for _ ,_ac :=range *_gg {if _ac ==nil {continue ;};if _ac .Operand =="\u0042\u0049"{_gb .WriteString (_ac .Operand +"\u000a");_gb .WriteString (_ac .Params [0].WriteString ());}else {for _ ,_gae :=range _ac .Params {_gb .WriteString (_gae .WriteString ());_gb .WriteString ("\u0020");};_gb .WriteString (_ac .Operand +"\u000a");};};return _gb .Bytes ();};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cb *ContentCreator )Add_q ()*ContentCreator {_feg :=ContentStreamOperation {};_feg .Operand ="\u0071";_cb ._ecd =append (_cb ._ecd ,&_feg );return _cb ;};func _ecdb (_fcfc []int64 )[]_db .PdfObject {var _aadb []_db .PdfObject ;for _ ,_edee :=range _fcfc {_aadb =append (_aadb ,_db .MakeInteger (_edee ));};return _aadb ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dgd *ContentCreator )Add_s ()*ContentCreator {_ce :=ContentStreamOperation {};_ce .Operand ="\u0073";_dgd ._ecd =append (_dgd ._ecd ,&_ce );return _dgd ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cba *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_cfc :=ContentStreamOperation {};_cfc .Operand ="\u006d";_cfc .Params =_gbfc ([]float64 {x ,y });_cba ._ecd =append (_cba ._ecd ,&_cfc );return _cba ;};type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_acc *ContentCreator )Add_i (flatness float64 )*ContentCreator {_dcg :=ContentStreamOperation {};_dcg .Operand ="\u0069";_dcg .Params =_gbfc ([]float64 {flatness });_acc ._ecd =append (_acc ._ecd ,&_dcg );return _acc ;};func (_addd *ContentStreamProcessor )getColorspace (_ebae string ,_ega *_ef .PdfPageResources )(_ef .PdfColorspace ,error ){switch _ebae {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _ef .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _ef .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _ef .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _ef .NewPdfColorspaceSpecialPattern (),nil ;};_ccdb ,_edba :=_ega .GetColorspaceByName (_db .PdfObjectName (_ebae ));if _edba {return _ccdb ,nil ;};switch _ebae {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _ef .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _ef .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _ef .NewPdfColorspaceLab (),nil ;};_cg .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_ebae );return nil ,_dd .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_ebae );};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dbbg *ContentCreator )Add_b_starred ()*ContentCreator {_dba :=ContentStreamOperation {};_dba .Operand ="\u0062\u002a";_dbbg ._ecd =append (_dbbg ._ecd ,&_dba );return _dbbg ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_egda *ContentCreator )Add_n ()*ContentCreator {_fa :=ContentStreamOperation {};_fa .Operand ="\u006e";_egda ._ecd =append (_egda ._ecd ,&_fa );return _egda ;};

// GetEncoder returns the encoder of the inline image.
func (_fdf *ContentStreamInlineImage )GetEncoder ()(_db .StreamEncoder ,error ){return _gdcd (_fdf )};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_fab *ContentCreator )Add_BMC (tag _db .PdfObjectName )*ContentCreator {_cfad :=ContentStreamOperation {};_cfad .Operand ="\u0042\u004d\u0043";_cfad .Params =_adda ([]_db .PdfObjectName {tag });_fab ._ecd =append (_fab ._ecd ,&_cfad );return _fab ;};

// Operations returns the list of operations.
func (_eb *ContentCreator )Operations ()*ContentStreamOperations {return &_eb ._ecd };

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_bdg *ContentCreator )Add_sh (name _db .PdfObjectName )*ContentCreator {_ggag :=ContentStreamOperation {};_ggag .Operand ="\u0073\u0068";_ggag .Params =_adda ([]_db .PdfObjectName {name });_bdg ._ecd =append (_bdg ._ecd ,&_ggag );return _bdg ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ca *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_cbe :=ContentStreamOperation {};_cbe .Operand ="\u0072\u0065";_cbe .Params =_gbfc ([]float64 {x ,y ,width ,height });_ca ._ecd =append (_ca ._ecd ,&_cbe );return _ca ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_adeb *ContentCreator )Add_S ()*ContentCreator {_cbag :=ContentStreamOperation {};_cbag .Operand ="\u0053";_adeb ._ecd =append (_adeb ._ecd ,&_cbag );return _adeb ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dggd *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_fcdd :=ContentStreamOperation {};_fcdd .Operand ="\u004b";_fcdd .Params =_gbfc ([]float64 {c ,m ,y ,k });_dggd ._ecd =append (_dggd ._ecd ,&_fcdd );return _dggd ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_eaf *ContentCreator )Add_BT ()*ContentCreator {_dgb :=ContentStreamOperation {};_dgb .Operand ="\u0042\u0054";_eaf ._ecd =append (_eaf ._ecd ,&_dgb );return _eaf ;};func (_dbcb *ContentStreamProcessor )handleCommand_CS (_bada *ContentStreamOperation ,_dfdcc *_ef .PdfPageResources )error {if len (_bada .Params )< 1{_cg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _g .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_bada .Params )> 1{_cg .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _g .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_gdee ,_degd :=_bada .Params [0].(*_db .PdfObjectName );if !_degd {_cg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_fgaa ,_bbce :=_dbcb .getColorspace (string (*_gdee ),_dfdcc );if _bbce !=nil {return _bbce ;};_dbcb ._bfec .ColorspaceStroking =_fgaa ;_egcd ,_bbce :=_dbcb .getInitialColor (_fgaa );if _bbce !=nil {return _bbce ;};_dbcb ._bfec .ColorStroking =_egcd ;return nil ;};func (_debg *ContentStreamInlineImage )toImageBase (_fffe *_ef .PdfPageResources )(*_fc .ImageBase ,error ){if _debg ._ecf !=nil {return _debg ._ecf ,nil ;};_aeec :=_fc .ImageBase {};if _debg .Height ==nil {return nil ,_g .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_ebd ,_baec :=_debg .Height .(*_db .PdfObjectInteger );if !_baec {return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_aeec .Height =int (*_ebd );if _debg .Width ==nil {return nil ,_g .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_efg ,_baec :=_debg .Width .(*_db .PdfObjectInteger );if !_baec {return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_aeec .Width =int (*_efg );_afe ,_gcd :=_debg .IsMask ();if _gcd !=nil {return nil ,_gcd ;};if _afe {_aeec .BitsPerComponent =1;_aeec .ColorComponents =1;}else {if _debg .BitsPerComponent ==nil {_cg .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_aeec .BitsPerComponent =8;}else {_cag ,_gfa :=_debg .BitsPerComponent .(*_db .PdfObjectInteger );if !_gfa {_cg .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_debg .BitsPerComponent );return nil ,_g .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_aeec .BitsPerComponent =int (*_cag );};if _debg .ColorSpace !=nil {_daf ,_gaa :=_debg .GetColorSpace (_fffe );if _gaa !=nil {return nil ,_gaa ;};_aeec .ColorComponents =_daf .GetNumComponents ();}else {_cg .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_aeec .ColorComponents =1;};};if _bcfd ,_dca :=_db .GetArray (_debg .Decode );_dca {_aeec .Decode ,_gcd =_bcfd .ToFloat64Array ();if _gcd !=nil {return nil ,_gcd ;};};_debg ._ecf =&_aeec ;return _debg ._ecf ,nil ;};

// Scale applies x-y scaling to the transformation matrix.
func (_gde *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _gde .Add_cm (sx ,0,0,sy ,0,0);};var _gdbb =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// Translate applies a simple x-y translation to the transformation matrix.
func (_fec *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _fec .Add_cm (1,0,0,1,tx ,ty );};func _adda (_cge []_db .PdfObjectName )[]_db .PdfObject {var _cefa []_db .PdfObject ;for _ ,_ddde :=range _cge {_cefa =append (_cefa ,_db .MakeName (string (_ddde )));};return _cefa ;};func (_fdd *ContentStreamProcessor )handleCommand_SC (_bbbd *ContentStreamOperation ,_gaaa *_ef .PdfPageResources )error {_gfc :=_fdd ._bfec .ColorspaceStroking ;if len (_bbbd .Params )!=_gfc .GetNumComponents (){_cg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_cg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bbbd .Params ),_gfc );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dbgd ,_egdd :=_gfc .ColorFromPdfObjects (_bbbd .Params );if _egdd !=nil {return _egdd ;};_fdd ._bfec .ColorStroking =_dbgd ;return nil ;};func (_ffg *ContentStreamParser )skipComments ()error {if _ ,_gdegc :=_ffg .skipSpaces ();_gdegc !=nil {return _gdegc ;};_ebaf :=true ;for {_egf ,_eabe :=_ffg ._eae .Peek (1);if _eabe !=nil {_cg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_eabe .Error ());return _eabe ;};if _ebaf &&_egf [0]!='%'{return nil ;};_ebaf =false ;if (_egf [0]!='\r')&&(_egf [0]!='\n'){_ffg ._eae .ReadByte ();}else {break ;};};return _ffg .skipComments ();};

// WriteString outputs the object as it is to be written to file.
func (_bbec *ContentStreamInlineImage )WriteString ()string {var _gea _ga .Buffer ;_gggd :="";if _bbec .BitsPerComponent !=nil {_gggd +="\u002f\u0042\u0050C\u0020"+_bbec .BitsPerComponent .WriteString ()+"\u000a";};if _bbec .ColorSpace !=nil {_gggd +="\u002f\u0043\u0053\u0020"+_bbec .ColorSpace .WriteString ()+"\u000a";};if _bbec .Decode !=nil {_gggd +="\u002f\u0044\u0020"+_bbec .Decode .WriteString ()+"\u000a";};if _bbec .DecodeParms !=nil {_gggd +="\u002f\u0044\u0050\u0020"+_bbec .DecodeParms .WriteString ()+"\u000a";};if _bbec .Filter !=nil {_gggd +="\u002f\u0046\u0020"+_bbec .Filter .WriteString ()+"\u000a";};if _bbec .Height !=nil {_gggd +="\u002f\u0048\u0020"+_bbec .Height .WriteString ()+"\u000a";};if _bbec .ImageMask !=nil {_gggd +="\u002f\u0049\u004d\u0020"+_bbec .ImageMask .WriteString ()+"\u000a";};if _bbec .Intent !=nil {_gggd +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_bbec .Intent .WriteString ()+"\u000a";};if _bbec .Interpolate !=nil {_gggd +="\u002f\u0049\u0020"+_bbec .Interpolate .WriteString ()+"\u000a";};if _bbec .Width !=nil {_gggd +="\u002f\u0057\u0020"+_bbec .Width .WriteString ()+"\u000a";};_gea .WriteString (_gggd );_gea .WriteString ("\u0049\u0044\u0020");_gea .Write (_bbec ._fegc );_gea .WriteString ("\u000a\u0045\u0049\u000a");return _gea .String ();};func (_gedde *ContentStreamProcessor )handleCommand_sc (_dgcd *ContentStreamOperation ,_fbb *_ef .PdfPageResources )error {_eccgg :=_gedde ._bfec .ColorspaceNonStroking ;if !_eggf (_eccgg ){if len (_dgcd .Params )!=_eccgg .GetNumComponents (){_cg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_cg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dgcd .Params ),_eccgg );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_ebdb ,_babc :=_eccgg .ColorFromPdfObjects (_dgcd .Params );if _babc !=nil {return _babc ;};_gedde ._bfec .ColorNonStroking =_ebdb ;return nil ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_geb *ContentStreamOperation ,_ddfb GraphicsState ,_gcdc *_ef .PdfPageResources )error ;func _eggf (_cefg _ef .PdfColorspace )bool {_ ,_gcf :=_cefg .(*_ef .PdfColorspaceSpecialPattern );return _gcf ;};func (_gcfd *ContentStreamProcessor )handleCommand_g (_ced *ContentStreamOperation ,_faac *_ef .PdfPageResources )error {_bfff :=_ef .NewPdfColorspaceDeviceGray ();if len (_ced .Params )!=_bfff .GetNumComponents (){_cg .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_cg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ced .Params ),_bfff );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dbgg ,_ceb :=_bfff .ColorFromPdfObjects (_ced .Params );if _ceb !=nil {_cg .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bfff ,_ced ,_ceb );return _ceb ;};_gcfd ._bfec .ColorspaceNonStroking =_bfff ;_gcfd ._bfec .ColorNonStroking =_dbgg ;return nil ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_baef *ContentCreator )Add_Tstar ()*ContentCreator {_cga :=ContentStreamOperation {};_cga .Operand ="\u0054\u002a";_baef ._ecd =append (_baef ._ecd ,&_cga );return _baef ;};func _gbfc (_gfb []float64 )[]_db .PdfObject {var _dae []_db .PdfObject ;for _ ,_gbab :=range _gfb {_dae =append (_dae ,_db .MakeFloat (_gbab ));};return _dae ;};func (_beb *ContentStreamParser )parseName ()(_db .PdfObjectName ,error ){_eag :="";_bbf :=false ;for {_cada ,_gcdf :=_beb ._eae .Peek (1);if _gcdf ==_e .EOF {break ;};if _gcdf !=nil {return _db .PdfObjectName (_eag ),_gcdf ;};if !_bbf {if _cada [0]=='/'{_bbf =true ;_beb ._eae .ReadByte ();}else {_cg .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_cada ,_cada );return _db .PdfObjectName (_eag ),_dd .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_cada [0]);};}else {if _db .IsWhiteSpace (_cada [0]){break ;}else if (_cada [0]=='/')||(_cada [0]=='[')||(_cada [0]=='(')||(_cada [0]==']')||(_cada [0]=='<')||(_cada [0]=='>'){break ;}else if _cada [0]=='#'{_dbge ,_dfdga :=_beb ._eae .Peek (3);if _dfdga !=nil {return _db .PdfObjectName (_eag ),_dfdga ;};_beb ._eae .Discard (3);_fcdg ,_dfdga :=_d .DecodeString (string (_dbge [1:3]));if _dfdga !=nil {return _db .PdfObjectName (_eag ),_dfdga ;};_eag +=string (_fcdg );}else {_acfa ,_ :=_beb ._eae .ReadByte ();_eag +=string (_acfa );};};};return _db .PdfObjectName (_eag ),nil ;};func (_aca *ContentStreamProcessor )handleCommand_rg (_gbbf *ContentStreamOperation ,_bfag *_ef .PdfPageResources )error {_gbcb :=_ef .NewPdfColorspaceDeviceRGB ();if len (_gbbf .Params )!=_gbcb .GetNumComponents (){_cg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_cg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gbbf .Params ),_gbcb );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fgbb ,_gfdc :=_gbcb .ColorFromPdfObjects (_gbbf .Params );if _gfdc !=nil {return _gfdc ;};_aca ._bfec .ColorspaceNonStroking =_gbcb ;_aca ._bfec .ColorNonStroking =_fgbb ;return nil ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bag *ContentCreator )Add_g (gray float64 )*ContentCreator {_bcg :=ContentStreamOperation {};_bcg .Operand ="\u0067";_bcg .Params =_gbfc ([]float64 {gray });_bag ._ecd =append (_bag ._ecd ,&_bcg );return _bag ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dac *ContentCreator )Add_cs (name _db .PdfObjectName )*ContentCreator {_agg :=ContentStreamOperation {};_agg .Operand ="\u0063\u0073";_agg .Params =_adda ([]_db .PdfObjectName {name });_dac ._ecd =append (_dac ._ecd ,&_agg );return _dac ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bec *ContentCreator )Add_TJ (vals ..._db .PdfObject )*ContentCreator {_fee :=ContentStreamOperation {};_fee .Operand ="\u0054\u004a";_fee .Params =[]_db .PdfObject {_db .MakeArray (vals ...)};_bec ._ecd =append (_bec ._ecd ,&_fee );return _bec ;};func (_cgcb *ContentStreamParser )parseBool ()(_db .PdfObjectBool ,error ){_efdd ,_ede :=_cgcb ._eae .Peek (4);if _ede !=nil {return _db .PdfObjectBool (false ),_ede ;};if (len (_efdd )>=4)&&(string (_efdd [:4])=="\u0074\u0072\u0075\u0065"){_cgcb ._eae .Discard (4);return _db .PdfObjectBool (true ),nil ;};_efdd ,_ede =_cgcb ._eae .Peek (5);if _ede !=nil {return _db .PdfObjectBool (false ),_ede ;};if (len (_efdd )>=5)&&(string (_efdd [:5])=="\u0066\u0061\u006cs\u0065"){_cgcb ._eae .Discard (5);return _db .PdfObjectBool (false ),nil ;};return _db .PdfObjectBool (false ),_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_eccg *ContentStreamParser )parseNumber ()(_db .PdfObject ,error ){return _db .ParseNumber (_eccg ._eae );};func (_abea *ContentStreamParser )parseString ()(*_db .PdfObjectString ,error ){_abea ._eae .ReadByte ();var _baa []byte ;_edaf :=1;for {_bda ,_ecce :=_abea ._eae .Peek (1);if _ecce !=nil {return _db .MakeString (string (_baa )),_ecce ;};if _bda [0]=='\\'{_abea ._eae .ReadByte ();_ebbd ,_fecb :=_abea ._eae .ReadByte ();if _fecb !=nil {return _db .MakeString (string (_baa )),_fecb ;};if _db .IsOctalDigit (_ebbd ){_cca ,_bagf :=_abea ._eae .Peek (2);if _bagf !=nil {return _db .MakeString (string (_baa )),_bagf ;};var _dbeb []byte ;_dbeb =append (_dbeb ,_ebbd );for _ ,_ebg :=range _cca {if _db .IsOctalDigit (_ebg ){_dbeb =append (_dbeb ,_ebg );}else {break ;};};_abea ._eae .Discard (len (_dbeb )-1);_cg .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_dbeb );_ecac ,_bagf :=_a .ParseUint (string (_dbeb ),8,32);if _bagf !=nil {return _db .MakeString (string (_baa )),_bagf ;};_baa =append (_baa ,byte (_ecac ));continue ;};switch _ebbd {case 'n':_baa =append (_baa ,'\n');case 'r':_baa =append (_baa ,'\r');case 't':_baa =append (_baa ,'\t');case 'b':_baa =append (_baa ,'\b');case 'f':_baa =append (_baa ,'\f');case '(':_baa =append (_baa ,'(');case ')':_baa =append (_baa ,')');case '\\':_baa =append (_baa ,'\\');};continue ;}else if _bda [0]=='('{_edaf ++;}else if _bda [0]==')'{_edaf --;if _edaf ==0{_abea ._eae .ReadByte ();break ;};};_fbag ,_ :=_abea ._eae .ReadByte ();_baa =append (_baa ,_fbag );};return _db .MakeString (string (_baa )),nil ;};

// Push pushes `gs` on the `gsStack`.
func (_gcbd *GraphicStateStack )Push (gs GraphicsState ){*_gcbd =append (*_gcbd ,gs )};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dfd *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_aff :=ContentStreamOperation {};_aff .Operand ="\u0076";_aff .Params =_gbfc ([]float64 {x2 ,y2 ,x3 ,y3 });_dfd ._ecd =append (_dfd ._ecd ,&_aff );return _dfd ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_acb *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_eebc :=ContentStreamOperation {};_eebc .Operand ="\u0079";_eebc .Params =_gbfc ([]float64 {x1 ,y1 ,x3 ,y3 });_acb ._ecd =append (_acb ._ecd ,&_eebc );return _acb ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bgd *ContentCreator )Add_gs (dictName _db .PdfObjectName )*ContentCreator {_cdg :=ContentStreamOperation {};_cdg .Operand ="\u0067\u0073";_cdg .Params =_adda ([]_db .PdfObjectName {dictName });_bgd ._ecd =append (_bgd ._ecd ,&_cdg );return _bgd ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_gf *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_gf )==0{return _gf ;};if _gf .isWrapped (){return _gf ;};*_gf =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_gf ...);_fd :=0;for _ ,_cc :=range *_gf {if _cc .Operand =="\u0071"{_fd ++;}else if _cc .Operand =="\u0051"{_fd --;};};for _fd > 0{*_gf =append (*_gf ,&ContentStreamOperation {Operand :"\u0051"});_fd --;};return _gf ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fecd *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_acg :=ContentStreamOperation {};_acg .Operand ="\u0054\u007a";_acg .Params =_gbfc ([]float64 {scale });_fecd ._ecd =append (_fecd ._ecd ,&_acg );return _fecd ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_aada GraphicStateStack ;_faaa []*ContentStreamOperation ;_bfec GraphicsState ;_gedb []handlerEntry ;_cbc int ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_eae *_f .Reader };

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_gdaa :=ContentStreamProcessor {};_gdaa ._aada =GraphicStateStack {};_gee :=GraphicsState {};_gdaa ._bfec =_gee ;_gdaa ._gedb =[]handlerEntry {};_gdaa ._cbc =0;_gdaa ._faaa =ops ;return &_gdaa ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_edb *ContentCreator )Add_B_starred ()*ContentCreator {_dbc :=ContentStreamOperation {};_dbc .Operand ="\u0042\u002a";_edb ._ecd =append (_edb ._ecd ,&_dbc );return _edb ;};

// String is same as Bytes() except returns as a string for convenience.
func (_dfa *ContentCreator )String ()string {return string (_dfa ._ecd .Bytes ())};

// Parse parses all commands in content stream, returning a list of operation data.
func (_ddcg *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_fac :=ContentStreamOperations {};for {_fgd :=ContentStreamOperation {};for {_afgb ,_aded ,_bca :=_ddcg .parseObject ();if _bca !=nil {if _bca ==_e .EOF {return &_fac ,nil ;};return &_fac ,_bca ;};if _aded {_fgd .Operand ,_ =_db .GetStringVal (_afgb );_fac =append (_fac ,&_fgd );break ;}else {_fgd .Params =append (_fgd .Params ,_afgb );};};if _fgd .Operand =="\u0042\u0049"{_bfe ,_fagd :=_ddcg .ParseInlineImage ();if _fagd !=nil {return &_fac ,_fagd ;};_fgd .Params =append (_fgd .Params ,_bfe );};};};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_ecc *ContentCreator )SetStrokingColor (color _ef .PdfColor )*ContentCreator {switch _ace :=color .(type ){case *_ef .PdfColorDeviceGray :_ecc .Add_G (_ace .Val ());case *_ef .PdfColorDeviceRGB :_ecc .Add_RG (_ace .R (),_ace .G (),_ace .B ());case *_ef .PdfColorDeviceCMYK :_ecc .Add_K (_ace .C (),_ace .M (),_ace .Y (),_ace .K ());default:_cg .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_ace );};return _ecc ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eab *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_egd :=ContentStreamOperation {};_egd .Operand ="\u004d";_egd .Params =_gbfc ([]float64 {miterlimit });_eab ._ecd =append (_eab ._ecd ,&_egd );return _eab ;};func (_egbg *ContentStreamParser )parseHexString ()(*_db .PdfObjectString ,error ){_egbg ._eae .ReadByte ();_afb :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _dcfe []byte ;for {_egbg .skipSpaces ();_dee ,_dfag :=_egbg ._eae .Peek (1);if _dfag !=nil {return _db .MakeString (""),_dfag ;};if _dee [0]=='>'{_egbg ._eae .ReadByte ();break ;};_dcdb ,_ :=_egbg ._eae .ReadByte ();if _ga .IndexByte (_afb ,_dcdb )>=0{_dcfe =append (_dcfe ,_dcdb );};};if len (_dcfe )%2==1{_dcfe =append (_dcfe ,'0');};_faca ,_ :=_d .DecodeString (string (_dcfe ));return _db .MakeHexString (string (_faca )),nil ;};func _bce (_bcd _db .PdfObject )(_ef .PdfColorspace ,error ){_eecbf ,_ccca :=_bcd .(*_db .PdfObjectArray );if !_ccca {_cg .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_bcd );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _eecbf .Len ()!=4{_cg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_eecbf .Len ());return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_geab ,_ccca :=_eecbf .Get (0).(*_db .PdfObjectName );if !_ccca {_cg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_eecbf );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_geab !="\u0049"&&*_geab !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_cg .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_geab );return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_geab ,_ccca =_eecbf .Get (1).(*_db .PdfObjectName );if !_ccca {_cg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_eecbf );return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_geab !="\u0047"&&*_geab !="\u0052\u0047\u0042"&&*_geab !="\u0043\u004d\u0059\u004b"&&*_geab !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_geab !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_geab !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_cg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_geab );return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_cdgd :="";switch *_geab {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_cdgd ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_cdgd ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_cdgd ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_gdbc :=_db .MakeArray (_db .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_db .MakeName (_cdgd ),_eecbf .Get (2),_eecbf .Get (3));return _ef .NewPdfColorspaceFromPdfObject (_gdbc );};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_baf *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_efb :=ContentStreamOperation {};_efb .Operand ="\u0063\u006d";_efb .Params =_gbfc ([]float64 {a ,b ,c ,d ,e ,f });_baf ._ecd =append (_baf ._ecd ,&_efb );return _baf ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_aac *ContentCreator )SetNonStrokingColor (color _ef .PdfColor )*ContentCreator {switch _gac :=color .(type ){case *_ef .PdfColorDeviceGray :_aac .Add_g (_gac .Val ());case *_ef .PdfColorDeviceRGB :_aac .Add_rg (_gac .R (),_gac .G (),_gac .B ());case *_ef .PdfColorDeviceCMYK :_aac .Add_k (_gac .C (),_gac .M (),_gac .Y (),_gac .K ());default:_cg .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_gac );};return _aac ;};func _cce (_egde string )bool {_ ,_bbc :=_gdbb [_egde ];return _bbc };

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eaa *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_cfa :=ContentStreamOperation {};_cfa .Operand ="\u0052\u0047";_cfa .Params =_gbfc ([]float64 {r ,g ,b });_eaa ._ecd =append (_eaa ._ecd ,&_cfa );return _eaa ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_abe *ContentCreator )Add_W_starred ()*ContentCreator {_fag :=ContentStreamOperation {};_fag .Operand ="\u0057\u002a";_abe ._ecd =append (_abe ._ecd ,&_fag );return _abe ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_dfdcf HandlerConditionEnum )All ()bool {return _dfdcf ==HandlerConditionEnumAllOperands };func (_cbfb *ContentStreamParser )parseNull ()(_db .PdfObjectNull ,error ){_ ,_dgef :=_cbfb ._eae .Discard (4);return _db .PdfObjectNull {},_dgef ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dcc *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_aeg :=ContentStreamOperation {};_aeg .Operand ="\u0064";_aeg .Params =[]_db .PdfObject {};_aeg .Params =append (_aeg .Params ,_db .MakeArrayFromIntegers64 (dashArray ));_aeg .Params =append (_aeg .Params ,_db .MakeInteger (dashPhase ));_dcc ._ecd =append (_dcc ._ecd ,&_aeg );return _dcc ;};func _bbe (_bgg *ContentStreamInlineImage ,_dab *_db .PdfObjectDictionary )(*_db .FlateEncoder ,error ){_ccc :=_db .NewFlateEncoder ();if _bgg ._ecf !=nil {_ccc .SetImage (_bgg ._ecf );};if _dab ==nil {_bdee :=_bgg .DecodeParms ;if _bdee !=nil {_bdd ,_dfdcg :=_db .GetDict (_bdee );if !_dfdcg {_cg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_bdee );return nil ,_dd .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_dab =_bdd ;};};if _dab ==nil {return _ccc ,nil ;};_cg .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_dab .String ());_ddd :=_dab .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _ddd ==nil {_cg .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_bge ,_adc :=_ddd .(*_db .PdfObjectInteger );if !_adc {_cg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_ddd );return nil ,_dd .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_ccc .Predictor =int (*_bge );};_ddd =_dab .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _ddd !=nil {_ecb ,_bba :=_ddd .(*_db .PdfObjectInteger );if !_bba {_cg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_dd .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_ccc .BitsPerComponent =int (*_ecb );};if _ccc .Predictor > 1{_ccc .Columns =1;_ddd =_dab .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _ddd !=nil {_bdb ,_fda :=_ddd .(*_db .PdfObjectInteger );if !_fda {return nil ,_dd .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_ccc .Columns =int (*_bdb );};_ccc .Colors =1;_gef :=_dab .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _gef !=nil {_ebc ,_gedd :=_gef .(*_db .PdfObjectInteger );if !_gedd {return nil ,_dd .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_ccc .Colors =int (*_ebc );};};return _ccc ,nil ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bcfa *ContentCreator )Add_Tr (render int64 )*ContentCreator {_egg :=ContentStreamOperation {};_egg .Operand ="\u0054\u0072";_egg .Params =_ecdb ([]int64 {render });_bcfa ._ecd =append (_bcfa ._ecd ,&_egg );return _bcfa ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_deg *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_cfcf :=ContentStreamOperation {};_cfcf .Operand ="\u006c";_cfcf .Params =_gbfc ([]float64 {x ,y });_deg ._ecd =append (_deg ._ecd ,&_cfcf );return _deg ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fccb *ContentCreator )Add_SCN_pattern (name _db .PdfObjectName ,c ...float64 )*ContentCreator {_dccb :=ContentStreamOperation {};_dccb .Operand ="\u0053\u0043\u004e";_dccb .Params =_gbfc (c );_dccb .Params =append (_dccb .Params ,_db .MakeName (string (name )));_fccb ._ecd =append (_fccb ._ecd ,&_dccb );return _fccb ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cbg *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_dcd :=ContentStreamOperation {};_dcd .Operand ="\u0054\u0044";_dcd .Params =_gbfc ([]float64 {tx ,ty });_cbg ._ecd =append (_cbg ._ecd ,&_dcd );return _cbg ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_cdd *ContentCreator )Add_ET ()*ContentCreator {_cef :=ContentStreamOperation {};_cef .Operand ="\u0045\u0054";_cdd ._ecd =append (_cdd ._ecd ,&_cef );return _cdd ;};func _dgc (_cdfc *ContentStreamInlineImage ,_gca *_db .PdfObjectDictionary )(*_db .LZWEncoder ,error ){_bcfge :=_db .NewLZWEncoder ();if _gca ==nil {if _cdfc .DecodeParms !=nil {_cbf ,_bgbd :=_db .GetDict (_cdfc .DecodeParms );if !_bgbd {_cg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_cdfc .DecodeParms );return nil ,_dd .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_gca =_cbf ;};};if _gca ==nil {return _bcfge ,nil ;};_aeb :=_gca .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _aeb !=nil {_bcbe ,_abg :=_aeb .(*_db .PdfObjectInteger );if !_abg {_cg .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_aeb );return nil ,_dd .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_bcbe !=0&&*_bcbe !=1{return nil ,_dd .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_bcfge .EarlyChange =int (*_bcbe );}else {_bcfge .EarlyChange =1;};_aeb =_gca .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _aeb !=nil {_fge ,_bff :=_aeb .(*_db .PdfObjectInteger );if !_bff {_cg .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_aeb );return nil ,_dd .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_bcfge .Predictor =int (*_fge );};_aeb =_gca .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _aeb !=nil {_ecg ,_affb :=_aeb .(*_db .PdfObjectInteger );if !_affb {_cg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_dd .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_bcfge .BitsPerComponent =int (*_ecg );};if _bcfge .Predictor > 1{_bcfge .Columns =1;_aeb =_gca .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _aeb !=nil {_gdb ,_dfc :=_aeb .(*_db .PdfObjectInteger );if !_dfc {return nil ,_dd .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_bcfge .Columns =int (*_gdb );};_bcfge .Colors =1;_aeb =_gca .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _aeb !=nil {_eebb ,_afc :=_aeb .(*_db .PdfObjectInteger );if !_afc {return nil ,_dd .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_bcfge .Colors =int (*_eebb );};};_cg .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_gca .String ());return _bcfge ,nil ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_be *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_efe :=ContentStreamOperation {};_efe .Operand ="\u0054\u0063";_efe .Params =_gbfc ([]float64 {charSpace });_be ._ecd =append (_be ._ecd ,&_efe );return _be ;};func (_fcge *ContentStreamProcessor )handleCommand_K (_cdb *ContentStreamOperation ,_cab *_ef .PdfPageResources )error {_eged :=_ef .NewPdfColorspaceDeviceCMYK ();if len (_cdb .Params )!=_eged .GetNumComponents (){_cg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_cg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cdb .Params ),_eged );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_aeab ,_edaa :=_eged .ColorFromPdfObjects (_cdb .Params );if _edaa !=nil {return _edaa ;};_fcge ._bfec .ColorspaceStroking =_eged ;_fcge ._bfec .ColorStroking =_aeab ;return nil ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_gbf *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_eef :=ContentStreamOperation {};_eef .Operand ="\u0054\u0064";_eef .Params =_gbfc ([]float64 {tx ,ty });_gbf ._ecd =append (_gbf ._ecd ,&_eef );return _gbf ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ggb *ContentCreator )Add_scn_pattern (name _db .PdfObjectName ,c ...float64 )*ContentCreator {_fed :=ContentStreamOperation {};_fed .Operand ="\u0073\u0063\u006e";_fed .Params =_gbfc (c );_fed .Params =append (_fed .Params ,_db .MakeName (string (name )));_ggb ._ecd =append (_ggb ._ecd ,&_fed );return _ggb ;};func (_cdce *ContentStreamProcessor )handleCommand_cm (_gge *ContentStreamOperation ,_geef *_ef .PdfPageResources )error {if len (_gge .Params )!=6{_cg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_gge .Params ));return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_eee ,_bgcac :=_db .GetNumbersAsFloat (_gge .Params );if _bgcac !=nil {return _bgcac ;};_cebd :=_ec .NewMatrix (_eee [0],_eee [1],_eee [2],_eee [3],_eee [4],_eee [5]);_cdce ._bfec .CTM .Concat (_cebd );return nil ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eff *ContentCreator )Add_TL (leading float64 )*ContentCreator {_bde :=ContentStreamOperation {};_bde .Operand ="\u0054\u004c";_bde .Params =_gbfc ([]float64 {leading });_eff ._ecd =append (_eff ._ecd ,&_bde );return _eff ;};func _bece (_aab *ContentStreamInlineImage )(*_db .DCTEncoder ,error ){_dfg :=_db .NewDCTEncoder ();_cgg :=_ga .NewReader (_aab ._fegc );_dgbb ,_bdbc :=_ge .DecodeConfig (_cgg );if _bdbc !=nil {_cg .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_bdbc );return nil ,_bdbc ;};switch _dgbb .ColorModel {case _cd .RGBAModel :_dfg .BitsPerComponent =8;_dfg .ColorComponents =3;case _cd .RGBA64Model :_dfg .BitsPerComponent =16;_dfg .ColorComponents =3;case _cd .GrayModel :_dfg .BitsPerComponent =8;_dfg .ColorComponents =1;case _cd .Gray16Model :_dfg .BitsPerComponent =16;_dfg .ColorComponents =1;case _cd .CMYKModel :_dfg .BitsPerComponent =8;_dfg .ColorComponents =4;case _cd .YCbCrModel :_dfg .BitsPerComponent =8;_dfg .ColorComponents =3;default:return nil ,_g .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_dfg .Width =_dgbb .Width ;_dfg .Height =_dgbb .Height ;_cg .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_dfg );return _dfg ,nil ;};var (ErrInvalidOperand =_g .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););func (_effb *ContentStreamProcessor )handleCommand_cs (_dbbb *ContentStreamOperation ,_agf *_ef .PdfPageResources )error {if len (_dbbb .Params )< 1{_cg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _g .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_dbbb .Params )> 1{_cg .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _g .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_dfge ,_fbd :=_dbbb .Params [0].(*_db .PdfObjectName );if !_fbd {_cg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_bdgg ,_gbgbb :=_effb .getColorspace (string (*_dfge ),_agf );if _gbgbb !=nil {return _gbgbb ;};_effb ._bfec .ColorspaceNonStroking =_bdgg ;_bcaf ,_gbgbb :=_effb .getInitialColor (_bdgg );if _gbgbb !=nil {return _gbgbb ;};_effb ._bfec .ColorNonStroking =_bcaf ;return nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ddc *ContentCreator )Add_CS (name _db .PdfObjectName )*ContentCreator {_dgg :=ContentStreamOperation {};_dgg .Operand ="\u0043\u0053";_dgg .Params =_adda ([]_db .PdfObjectName {name });_ddc ._ecd =append (_ddc ._ecd ,&_dgg );return _ddc ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_bgfdd *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_dea :=handlerEntry {};_dea .Condition =condition ;_dea .Operand =operand ;_dea .Handler =handler ;_bgfdd ._gedb =append (_bgfdd ._gedb ,_dea );};func _gdcd (_bed *ContentStreamInlineImage )(_db .StreamEncoder ,error ){if _bed .Filter ==nil {return _db .NewRawEncoder (),nil ;};_bgfg ,_eca :=_bed .Filter .(*_db .PdfObjectName );if !_eca {_eeba ,_dbf :=_bed .Filter .(*_db .PdfObjectArray );if !_dbf {return nil ,_dd .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _eeba .Len ()==0{return _db .NewRawEncoder (),nil ;};if _eeba .Len ()!=1{_aed ,_dcde :=_eccf (_bed );if _dcde !=nil {_cg .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_dcde );return nil ,_dcde ;};_cg .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_aed );return _aed ,nil ;};_dcdc :=_eeba .Get (0);_bgfg ,_dbf =_dcdc .(*_db .PdfObjectName );if !_dbf {return nil ,_dd .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_bgfg {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _db .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _db .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _bece (_bed );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _bbe (_bed ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _dgc (_bed ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _db .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _db .NewRunLengthEncoder (),nil ;default:_cg .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_bgfg );return nil ,_g .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};func (_bggcc *ContentStreamProcessor )getInitialColor (_aef _ef .PdfColorspace )(_ef .PdfColor ,error ){switch _aea :=_aef .(type ){case *_ef .PdfColorspaceDeviceGray :return _ef .NewPdfColorDeviceGray (0.0),nil ;case *_ef .PdfColorspaceDeviceRGB :return _ef .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_ef .PdfColorspaceDeviceCMYK :return _ef .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_ef .PdfColorspaceCalGray :return _ef .NewPdfColorCalGray (0.0),nil ;case *_ef .PdfColorspaceCalRGB :return _ef .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_ef .PdfColorspaceLab :_fcba :=0.0;_fgdb :=0.0;_ggbg :=0.0;if _aea .Range [0]> 0{_fcba =_aea .Range [0];};if _aea .Range [2]> 0{_fgdb =_aea .Range [2];};return _ef .NewPdfColorLab (_fcba ,_fgdb ,_ggbg ),nil ;case *_ef .PdfColorspaceICCBased :if _aea .Alternate ==nil {_cg .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_aea .N );if _aea .N ==1{_cg .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _bggcc .getInitialColor (_ef .NewPdfColorspaceDeviceGray ());}else if _aea .N ==3{_cg .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _bggcc .getInitialColor (_ef .NewPdfColorspaceDeviceRGB ());}else if _aea .N ==4{_cg .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _bggcc .getInitialColor (_ef .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_g .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _bggcc .getInitialColor (_aea .Alternate );case *_ef .PdfColorspaceSpecialIndexed :if _aea .Base ==nil {return nil ,_g .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _bggcc .getInitialColor (_aea .Base );case *_ef .PdfColorspaceSpecialSeparation :if _aea .AlternateSpace ==nil {return nil ,_g .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _bggcc .getInitialColor (_aea .AlternateSpace );case *_ef .PdfColorspaceDeviceN :if _aea .AlternateSpace ==nil {return nil ,_g .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _bggcc .getInitialColor (_aea .AlternateSpace );case *_ef .PdfColorspaceSpecialPattern :return nil ,nil ;};_cg .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_aef );return nil ,_g .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_fdc *ContentStreamInlineImage )ToImage (resources *_ef .PdfPageResources )(*_ef .Image ,error ){_fca ,_eba :=_fdc .toImageBase (resources );if _eba !=nil {return nil ,_eba ;};_eed ,_eba :=_gdcd (_fdc );if _eba !=nil {return nil ,_eba ;};_cg .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_eed ,_eed );_cg .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_fdc );_ecae ,_eba :=_eed .DecodeBytes (_fdc ._fegc );if _eba !=nil {return nil ,_eba ;};_ccdc :=&_ef .Image {Width :int64 (_fca .Width ),Height :int64 (_fca .Height ),BitsPerComponent :int64 (_fca .BitsPerComponent ),ColorComponents :_fca .ColorComponents ,Data :_ecae };if len (_fca .Decode )> 0{for _bbb :=0;_bbb < len (_fca .Decode );_bbb ++{_fca .Decode [_bbb ]*=float64 ((int (1)<<uint (_fca .BitsPerComponent ))-1);};_ccdc .SetDecode (_fca .Decode );};return _ccdc ,nil ;};func (_efga *ContentStreamProcessor )handleCommand_G (_baeg *ContentStreamOperation ,_ebbc *_ef .PdfPageResources )error {_afaa :=_ef .NewPdfColorspaceDeviceGray ();if len (_baeg .Params )!=_afaa .GetNumComponents (){_cg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_cg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_baeg .Params ),_afaa );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_ebdd ,_faf :=_afaa .ColorFromPdfObjects (_baeg .Params );if _faf !=nil {return _faf ;};_efga ._bfec .ColorspaceStroking =_afaa ;_efga ._bfec .ColorStroking =_ebdd ;return nil ;};func _eccf (_fbgb *ContentStreamInlineImage )(*_db .MultiEncoder ,error ){_gbba :=_db .NewMultiEncoder ();var _ddb *_db .PdfObjectDictionary ;var _fff []_db .PdfObject ;if _bfg :=_fbgb .DecodeParms ;_bfg !=nil {_ddbd ,_fgeg :=_bfg .(*_db .PdfObjectDictionary );if _fgeg {_ddb =_ddbd ;};_abb ,_efbc :=_bfg .(*_db .PdfObjectArray );if _efbc {for _ ,_degeg :=range _abb .Elements (){if _gcaf ,_aedb :=_degeg .(*_db .PdfObjectDictionary );_aedb {_fff =append (_fff ,_gcaf );}else {_fff =append (_fff ,nil );};};};};_ddfd :=_fbgb .Filter ;if _ddfd ==nil {return nil ,_dd .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_ffa ,_ffb :=_ddfd .(*_db .PdfObjectArray );if !_ffb {return nil ,_dd .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _egc ,_bggc :=range _ffa .Elements (){_fcf ,_bbg :=_bggc .(*_db .PdfObjectName );if !_bbg {return nil ,_dd .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _dbba _db .PdfObject ;if _ddb !=nil {_dbba =_ddb ;}else {if len (_fff )> 0{if _egc >=len (_fff ){return nil ,_dd .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_dbba =_fff [_egc ];};};var _beda *_db .PdfObjectDictionary ;if _bea ,_fgf :=_dbba .(*_db .PdfObjectDictionary );_fgf {_beda =_bea ;};if *_fcf ==_db .StreamEncodingFilterNameFlate ||*_fcf =="\u0046\u006c"{_dda ,_fbe :=_bbe (_fbgb ,_beda );if _fbe !=nil {return nil ,_fbe ;};_gbba .AddEncoder (_dda );}else if *_fcf ==_db .StreamEncodingFilterNameLZW {_ceg ,_efbg :=_dgc (_fbgb ,_beda );if _efbg !=nil {return nil ,_efbg ;};_gbba .AddEncoder (_ceg );}else if *_fcf ==_db .StreamEncodingFilterNameASCIIHex {_dfcf :=_db .NewASCIIHexEncoder ();_gbba .AddEncoder (_dfcf );}else if *_fcf ==_db .StreamEncodingFilterNameASCII85 ||*_fcf =="\u0041\u0038\u0035"{_cdga :=_db .NewASCII85Encoder ();_gbba .AddEncoder (_cdga );}else {_cg .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_fcf );return nil ,_dd .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _gbba ,nil ;};func (_bcgf *ContentStreamParser )parseOperand ()(*_db .PdfObjectString ,error ){var _agb []byte ;for {_dfaa ,_fcec :=_bcgf ._eae .Peek (1);if _fcec !=nil {return _db .MakeString (string (_agb )),_fcec ;};if _db .IsDelimiter (_dfaa [0]){break ;};if _db .IsWhiteSpace (_dfaa [0]){break ;};_ccee ,_ :=_bcgf ._eae .ReadByte ();_agb =append (_agb ,_ccee );};return _db .MakeString (string (_agb )),nil ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _ef .Image ,encoder _db .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_db .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_cbfd :=ContentStreamInlineImage {};if img .ColorComponents ==1{_cbfd .ColorSpace =_db .MakeName ("\u0047");}else if img .ColorComponents ==3{_cbfd .ColorSpace =_db .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_cbfd .ColorSpace =_db .MakeName ("\u0043\u004d\u0059\u004b");}else {_cg .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_cbfd .BitsPerComponent =_db .MakeInteger (img .BitsPerComponent );_cbfd .Width =_db .MakeInteger (img .Width );_cbfd .Height =_db .MakeInteger (img .Height );_gfd ,_efdf :=encoder .EncodeBytes (img .Data );if _efdf !=nil {return nil ,_efdf ;};_cbfd ._fegc =_gfd ;_effe :=encoder .GetFilterName ();if _effe !=_db .StreamEncodingFilterNameRaw {_cbfd .Filter =_db .MakeName (_effe );};return &_cbfd ,nil ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fba *ContentCreator )Add_b ()*ContentCreator {_dce :=ContentStreamOperation {};_dce .Operand ="\u0062";_fba ._ecd =append (_fba ._ecd ,&_dce );return _fba ;};

// String returns `ops.Bytes()` as a string.
func (_ba *ContentStreamOperations )String ()string {return string (_ba .Bytes ())};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_aecb *ContentCreator )Wrap (){_aecb ._ecd .WrapIfNeeded ()};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_ccf *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_gba :=ContentStreamInlineImage {};for {_ccf .skipSpaces ();_acgb ,_fdbc ,_ffbb :=_ccf .parseObject ();if _ffbb !=nil {return nil ,_ffbb ;};if !_fdbc {_gbaf ,_eedd :=_db .GetName (_acgb );if !_eedd {_cg .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_acgb );return nil ,_dd .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_acgb );};_bgfd ,_bfa ,_gfe :=_ccf .parseObject ();if _gfe !=nil {return nil ,_gfe ;};if _bfa {return nil ,_dd .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_gbaf {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_gba .BitsPerComponent =_bgfd ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_gba .ColorSpace =_bgfd ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_gba .Decode =_bgfd ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_gba .DecodeParms =_bgfd ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_gba .Filter =_bgfd ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_gba .Height =_bgfd ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_gba .ImageMask =_bgfd ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_gba .Intent =_bgfd ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_gba .Interpolate =_bgfd ;case "\u0057","\u0057\u0069\u0064t\u0068":_gba .Width =_bgfd ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_cg .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_gbaf );default:return nil ,_dd .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_gbaf );};};if _fdbc {_eeff ,_bbgf :=_acgb .(*_db .PdfObjectString );if !_bbgf {return nil ,_dd .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _eeff .Str ()=="\u0045\u0049"{_cg .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_gba ,nil ;}else if _eeff .Str ()=="\u0049\u0044"{_cg .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_gefg ,_babb :=_ccf ._eae .Peek (1);if _babb !=nil {return nil ,_babb ;};if _db .IsWhiteSpace (_gefg [0]){_ccf ._eae .Discard (1);};_gba ._fegc =[]byte {};_dbbe :=0;var _bgee []byte ;for {_cgf ,_ccb :=_ccf ._eae .ReadByte ();if _ccb !=nil {_cg .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_ccb ;};if _dbbe ==0{if _db .IsWhiteSpace (_cgf ){_bgee =[]byte {};_bgee =append (_bgee ,_cgf );_dbbe =1;}else if _cgf =='E'{_bgee =append (_bgee ,_cgf );_dbbe =2;}else {_gba ._fegc =append (_gba ._fegc ,_cgf );};}else if _dbbe ==1{_bgee =append (_bgee ,_cgf );if _cgf =='E'{_dbbe =2;}else {_gba ._fegc =append (_gba ._fegc ,_bgee ...);_bgee =[]byte {};if _db .IsWhiteSpace (_cgf ){_dbbe =1;}else {_dbbe =0;};};}else if _dbbe ==2{_bgee =append (_bgee ,_cgf );if _cgf =='I'{_dbbe =3;}else {_gba ._fegc =append (_gba ._fegc ,_bgee ...);_bgee =[]byte {};_dbbe =0;};}else if _dbbe ==3{_bgee =append (_bgee ,_cgf );if _db .IsWhiteSpace (_cgf ){_ebdg ,_fbgd :=_ccf ._eae .Peek (20);if _fbgd !=nil &&_fbgd !=_e .EOF {return nil ,_fbgd ;};_defa :=NewContentStreamParser (string (_ebdg ));_eadf :=true ;for _dfcfe :=0;_dfcfe < 3;_dfcfe ++{_gcb ,_ddg ,_efa :=_defa .parseObject ();if _efa !=nil {if _efa ==_e .EOF {break ;};continue ;};if _ddg &&!_cce (_gcb .String ()){_eadf =false ;break ;};};if _eadf {if len (_gba ._fegc )> 100{_cg .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_gba ._fegc ),_gba ._fegc [:100]);}else {_cg .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_gba ._fegc ),_gba ._fegc );};return &_gba ,nil ;};};_gba ._fegc =append (_gba ._fegc ,_bgee ...);_bgee =[]byte {};_dbbe =0;};};};};};};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_gedc :=ContentStreamParser {};_affbg :=_ga .NewBufferString (contentStr +"\u000a");_gedc ._eae =_f .NewReader (_affbg );return &_gedc ;};func (_cde *ContentStreamParser )parseObject ()(_fdg _db .PdfObject ,_bga bool ,_fabe error ){_cde .skipSpaces ();for {_dfb ,_fgdc :=_cde ._eae .Peek (2);if _fgdc !=nil {return nil ,false ,_fgdc ;};_cg .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_dfb ));if _dfb [0]=='%'{_cde .skipComments ();continue ;}else if _dfb [0]=='/'{_gaab ,_agbc :=_cde .parseName ();_cg .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_gaab );return &_gaab ,false ,_agbc ;}else if _dfb [0]=='('{_cg .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_fdfb ,_eaab :=_cde .parseString ();return _fdfb ,false ,_eaab ;}else if _dfb [0]=='<'&&_dfb [1]!='<'{_cg .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_fgg ,_dfcc :=_cde .parseHexString ();return _fgg ,false ,_dfcc ;}else if _dfb [0]=='['{_cg .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_gdaf ,_ebf :=_cde .parseArray ();return _gdaf ,false ,_ebf ;}else if _db .IsFloatDigit (_dfb [0])||(_dfb [0]=='-'&&_db .IsFloatDigit (_dfb [1])){_cg .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_ecfg ,_cfd :=_cde .parseNumber ();return _ecfg ,false ,_cfd ;}else if _dfb [0]=='<'&&_dfb [1]=='<'{_dade ,_bgdg :=_cde .parseDict ();return _dade ,false ,_bgdg ;}else {_cg .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_dfb ,_ =_cde ._eae .Peek (5);_gcda :=string (_dfb );_cg .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_gcda );if (len (_gcda )> 3)&&(_gcda [:4]=="\u006e\u0075\u006c\u006c"){_becef ,_aae :=_cde .parseNull ();return &_becef ,false ,_aae ;}else if (len (_gcda )> 4)&&(_gcda [:5]=="\u0066\u0061\u006cs\u0065"){_dbbeb ,_gbe :=_cde .parseBool ();return &_dbbeb ,false ,_gbe ;}else if (len (_gcda )> 3)&&(_gcda [:4]=="\u0074\u0072\u0075\u0065"){_dgf ,_gfad :=_cde .parseBool ();return &_dgf ,false ,_gfad ;};_edg ,_degf :=_cde .parseOperand ();if _degf !=nil {return _edg ,false ,_degf ;};if len (_edg .String ())< 1{return _edg ,false ,ErrInvalidOperand ;};return _edg ,true ,nil ;};};};func (_fad *ContentStreamInlineImage )String ()string {_cdc :=_dd .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_fad ._fegc ));if _fad .BitsPerComponent !=nil {_cdc +="\u002d\u0020\u0042\u0050\u0043\u0020"+_fad .BitsPerComponent .WriteString ()+"\u000a";};if _fad .ColorSpace !=nil {_cdc +="\u002d\u0020\u0043S\u0020"+_fad .ColorSpace .WriteString ()+"\u000a";};if _fad .Decode !=nil {_cdc +="\u002d\u0020\u0044\u0020"+_fad .Decode .WriteString ()+"\u000a";};if _fad .DecodeParms !=nil {_cdc +="\u002d\u0020\u0044P\u0020"+_fad .DecodeParms .WriteString ()+"\u000a";};if _fad .Filter !=nil {_cdc +="\u002d\u0020\u0046\u0020"+_fad .Filter .WriteString ()+"\u000a";};if _fad .Height !=nil {_cdc +="\u002d\u0020\u0048\u0020"+_fad .Height .WriteString ()+"\u000a";};if _fad .ImageMask !=nil {_cdc +="\u002d\u0020\u0049M\u0020"+_fad .ImageMask .WriteString ()+"\u000a";};if _fad .Intent !=nil {_cdc +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_fad .Intent .WriteString ()+"\u000a";};if _fad .Interpolate !=nil {_cdc +="\u002d\u0020\u0049\u0020"+_fad .Interpolate .WriteString ()+"\u000a";};if _fad .Width !=nil {_cdc +="\u002d\u0020\u0057\u0020"+_fad .Width .WriteString ()+"\u000a";};return _cdc ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_edbg *ContentStreamInlineImage )IsMask ()(bool ,error ){if _edbg .ImageMask !=nil {_dgbbg ,_fga :=_edbg .ImageMask .(*_db .PdfObjectBool );if !_fga {_cg .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_g .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_dgbbg ),nil ;};return false ,nil ;};func (_dabd *ContentStreamProcessor )handleCommand_SCN (_cdgag *ContentStreamOperation ,_fbdg *_ef .PdfPageResources )error {_fdae :=_dabd ._bfec .ColorspaceStroking ;if !_eggf (_fdae ){if len (_cdgag .Params )!=_fdae .GetNumComponents (){_cg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_cg .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cdgag .Params ),_fdae );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_bbcb ,_deac :=_fdae .ColorFromPdfObjects (_cdgag .Params );if _deac !=nil {return _deac ;};_dabd ._bfec .ColorStroking =_bbcb ;return nil ;};