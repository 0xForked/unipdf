//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_a "errors";_eb "github.com/golang/freetype/truetype";_c "github.com/unidoc/unipdf/v3/core";_fbe "github.com/unidoc/unipdf/v3/internal/textencoding";_ab "github.com/unidoc/unipdf/v3/internal/transform";_g "github.com/unidoc/unipdf/v3/model";
_e "golang.org/x/image/font";_fb "image";_d "image/color";);func NewTextState ()TextState {return TextState {Th :100,Tm :_ab .IdentityMatrix (),Tlm :_ab .IdentityMatrix ()};};func (_dffc *TextState )ProcTf (font *TextFont ){_dffc .Tf =font };type LineCap int ;
func (_ged *TextState )Translate (tx ,ty float64 ){_ged .Tm =_ged .Tm .Mult (_ab .TranslationMatrix (tx ,ty ));};func NewTextFont (font *_g .PdfFont ,size float64 )(*TextFont ,error ){_dgg :=font .FontDescriptor ();if _dgg ==nil {return nil ,_a .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_acab ,_ddg :=_c .GetStream (_dgg .FontFile2 );if !_ddg {return nil ,_a .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_gf ,_bg :=_c .DecodeStream (_acab );
if _bg !=nil {return nil ,_bg ;};_afb ,_bg :=_eb .Parse (_gf );if _bg !=nil {return nil ,_bg ;};return &TextFont {Font :font ,Size :size ,_aac :_afb },nil ;};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);type FillRule int ;const (LineJoinRound LineJoin =iota ;
LineJoinBevel ;);func (_fd *TextFont )BytesToCharcodes (data []byte )[]_fbe .CharCode {if _fd ._ggg !=nil {return _fd ._ggg .BytesToCharcodes (data );};return _fd .Font .BytesToCharcodes (data );};type TextRenderingMode int ;func (_dda *TextState )ProcTd (tx ,ty float64 ){_dda .Tlm .Concat (_ab .TranslationMatrix (tx ,ty ));
_dda .Tm =_dda .Tlm .Clone ();};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _ab .Matrix ;Tlm _ab .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};type LineJoin int ;func (_db *TextFont )WithSize (size float64 ,originalFont *_g .PdfFont )*TextFont {return &TextFont {Font :_db .Font ,Size :size ,_aac :_db ._aac ,_ggg :originalFont };
};func (_adg *TextState )ProcQ (data []byte ,ctx Context ){_adg .ProcTStar ();_adg .ProcTj (data ,ctx )};type TextFont struct{Font *_g .PdfFont ;Size float64 ;_aac *_eb .Font ;_ggg *_g .PdfFont ;};func (_gb *TextState )ProcTStar (){_gb .ProcTd (0,-_gb .Tl )};
func (_gda *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _cfab ,_df :=_gda .Font .GetRuneMetrics (r );_df &&_cfab .Wx !=0{return _cfab .Wx ,_cfab .Wy ,_df ;};if _gda ._ggg ==nil {return 0,0,false ;};_aad ,_agd :=_gda ._ggg .GetRuneMetrics (r );
return _aad .Wx ,_aad .Wy ,_agd &&_aad .Wx !=0;};func (_bae *TextState )Reset (){_bae .Tm =_ab .IdentityMatrix ();_bae .Tlm =_ab .IdentityMatrix ()};func (_aab *TextFont )NewFace (size float64 )_e .Face {return _eb .NewFace (_aab ._aac ,&_eb .Options {Size :size });
};func (_fdc *TextFont )GetCharMetrics (code _fbe .CharCode )(float64 ,float64 ,bool ){if _cg ,_dcd :=_fdc .Font .GetCharMetrics (code );_dcd &&_cg .Wx !=0{return _cg .Wx ,_cg .Wy ,_dcd ;};if _fdc ._ggg ==nil {return 0,0,false ;};_abb ,_bca :=_fdc ._ggg .GetCharMetrics (code );
return _abb .Wx ,_abb .Wy ,_bca &&_abb .Wx !=0;};type Pattern interface{ColorAt (_ed ,_fc int )_d .Color ;};type Gradient interface{Pattern ;AddColorStop (_ce float64 ,_dg _d .Color );};type Context interface{Push ();Pop ();Matrix ()_ab .Matrix ;SetMatrix (_ge _ab .Matrix );
Translate (_ec ,_da float64 );Scale (_dc ,_dac float64 );Rotate (_b float64 );MoveTo (_gd ,_bb float64 );LineTo (_dd ,_gg float64 );CubicTo (_cc ,_de ,_bc ,_ebd ,_fa ,_ba float64 );QuadraticTo (_bd ,_cf ,_fbd ,_ea float64 );NewSubPath ();ClosePath ();ClearPath ();
Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_fg float64 );SetLineCap (_ad LineCap );SetLineJoin (_bce LineJoin );SetDash (_ae ...float64 );SetDashOffset (_fbg float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_fab ,_ccg ,_ac ,_bcg float64 );
SetFillRGBA (_cee ,_dacf ,_gc ,_fcb float64 );SetFillStyle (_cb Pattern );SetFillRule (_eg FillRule );SetStrokeRGBA (_af ,_ca ,_adc ,_aca float64 );SetStrokeStyle (_fcg Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_ef string ,_ade _e .Face ,_eda ,_ff float64 );
MeasureString (_ag string ,_ccd _e .Face )(_aa ,_fe float64 );DrawRectangle (_ebb ,_cfa ,_fcc ,_ffd float64 );DrawImage (_deb _fb .Image ,_acg ,_dce int );DrawImageAnchored (_acac _fb .Image ,_ga ,_deg int ,_gee ,_aga float64 );Height ()int ;Width ()int ;
};func (_dag *TextState )ProcTD (tx ,ty float64 ){_dag .Tl =-ty ;_dag .ProcTd (tx ,ty )};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;
TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);func (_ccc *TextState )ProcTj (data []byte ,ctx Context ){_fgg :=_ccc .Tf .Size ;_bf :=_ccc .Th /100.0;_bgb :=_ccc .GlobalScale ;_abf :=_ab .NewMatrix (_fgg *_bf ,0,0,_fgg ,0,_ccc .Ts );
_fde :=ctx .Matrix ();_def :=_fde .Clone ().Mult (_ccc .Tm .Clone ().Mult (_abf )).ScalingFactorY ();_bfg :=_ccc .Tf .NewFace (_def );_fae :=_ccc .Tf .BytesToCharcodes (data );_bag :=_ccc .Tf .CharcodesToUnicode (_fae );for _dbb ,_bff :=range _bag {if _bff =='\x00'{continue ;
};_bdf :=_fde .Clone ().Mult (_ccc .Tm .Clone ().Mult (_abf ));_dcf :=_bdf .ScalingFactorY ();_bdf =_bdf .Scale (1/_dcf ,-1/_dcf );if _ccc .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_bdf );ctx .DrawString (string (_bff ),_bfg ,0,0);ctx .SetMatrix (_fde );
};_fca :=0.0;if _bff ==' '{_fca =_ccc .Tw ;};_bba ,_ ,_egd :=_ccc .Tf .GetRuneMetrics (_bff );if !_egd &&_dbb < len (_fae ){_bba ,_ ,_egd =_ccc .Tf .GetCharMetrics (_fae [_dbb ]);};if _egd {_bba =_bba *0.001*_fgg ;}else {_bba ,_ =ctx .MeasureString (string (_bff ),_bfg );
_bba =_bba /_bgb ;};_dff :=(_bba +_ccc .Tc +_fca )*_bf ;_ccc .Tm =_ccc .Tm .Mult (_ab .TranslationMatrix (_dff ,0));};};func (_cfe *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_cfe .Tm =_ab .NewMatrix (a ,b ,c ,d ,e ,f );_cfe .Tlm =_cfe .Tm .Clone ();
};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_eca ,_ffa :=_g .NewPdfFontFromTTFFile (filePath );if _ffa !=nil {return nil ,_ffa ;};return NewTextFont (_eca ,size );};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;
);func (_agab *TextFont )CharcodesToUnicode (charcodes []_fbe .CharCode )[]rune {if _agab ._ggg !=nil {return _agab ._ggg .CharcodesToUnicode (charcodes );};return _agab .Font .CharcodesToUnicode (charcodes );};func (_bcgd *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_bcgd .Tw =aw ;
_bcgd .Tc =ac ;_bcgd .ProcQ (data ,ctx );};