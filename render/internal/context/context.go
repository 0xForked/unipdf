//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_f "errors";_gf "github.com/golang/freetype/truetype";_ca "github.com/unidoc/unipdf/v3/core";_fd "github.com/unidoc/unipdf/v3/internal/textencoding";_g "github.com/unidoc/unipdf/v3/internal/transform";_c "github.com/unidoc/unipdf/v3/model";_fc "golang.org/x/image/font";_d "image";_a "image/color";);func (_ac *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _bfaa ,_efb :=_ac .Font .GetRuneMetrics (r );_efb &&_bfaa .Wx !=0{return _bfaa .Wx ,_bfaa .Wy ,_efb ;};if _ac ._ge ==nil {return 0,0,false ;};_df ,_gee :=_ac ._ge .GetRuneMetrics (r );return _df .Wx ,_df .Wy ,_gee &&_df .Wx !=0;};type LineJoin int ;const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_afca *TextFont )WithSize (size float64 ,originalFont *_c .PdfFont )*TextFont {return &TextFont {Font :_afca .Font ,Size :size ,_afc :_afca ._afc ,_ge :originalFont };};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_gbg *TextState )ProcTd (tx ,ty float64 ){_gbg .Tlm .Concat (_g .TranslationMatrix (tx ,-ty ));_gbg .Tm =_gbg .Tlm .Clone ();};func (_bdb *TextState )ProcTj (data []byte ,ctx Context ){_cff :=_bdb .Tf .Size ;_cea :=_bdb .Th /100.0;_dbfg :=_bdb .GlobalScale ;_abd :=_g .NewMatrix (_cff *_cea ,0,0,_cff ,0,_bdb .Ts );_ddfd :=ctx .Matrix ();_dfe :=_ddfd .Clone ().Mult (_bdb .Tm .Clone ().Mult (_abd )).ScalingFactorY ();_cba :=_bdb .Tf .NewFace (_dfe );_fdb :=_bdb .Tf .CharcodesToUnicode (_bdb .Tf .BytesToCharcodes (data ));for _ ,_afd :=range _fdb {if _afd =='\x00'{continue ;};_fb :=_bdb .Tm .Clone ();_bdb .Tm .Concat (_abd );_aea ,_cbaa :=_bdb .Tm .Transform (0,0);ctx .Scale (1/_dbfg ,-1/_dbfg );ctx .DrawString (string (_afd ),_cba ,_aea *_dbfg ,_cbaa *_dbfg );ctx .Scale (_dbfg ,-_dbfg );_ad :=0.0;if _afd ==' '{_ad =_bdb .Tw ;};var _gaea float64 ;if _eda ,_ ,_bag :=_bdb .Tf .GetRuneMetrics (_afd );_bag {_gaea =_eda *0.001*_dfe /_dbfg ;}else {_gaea ,_ =ctx .MeasureString (string (_afd ),_cba );};_bga :=(_gaea +_bdb .Tc +_ad )*_cea ;_bdb .Tm =_g .TranslationMatrix (_bga ,0).Mult (_fb );};};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _g .Matrix ;Tlm _g .Matrix ;GlobalScale float64 ;};type Gradient interface{Pattern ;AddColorStop (_ef float64 ,_ae _a .Color );};type Pattern interface{ColorAt (_ab ,_b int )_a .Color ;};type Context interface{Push ();Pop ();Matrix ()_g .Matrix ;SetMatrix (_ea _g .Matrix );Translate (_eb ,_db float64 );Scale (_cb ,_abb float64 );Rotate (_fg float64 );MoveTo (_gb ,_ce float64 );LineTo (_fa ,_bd float64 );CubicTo (_ed ,_bc ,_ec ,_dd ,_bb ,_cc float64 );QuadraticTo (_fae ,_gg ,_fad ,_fde float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_ccg float64 );SetLineCap (_ee LineCap );SetLineJoin (_dg LineJoin );SetDash (_de ...float64 );SetDashOffset (_ba float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_fdd ,_aed ,_fac ,_eac float64 );SetFillRGBA (_gfe ,_bba ,_ddf ,_af float64 );SetFillStyle (_bbb Pattern );SetFillRule (_da FillRule );SetStrokeRGBA (_dbb ,_bg ,_cbg ,_gd float64 );SetStrokeStyle (_ecg Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_eeb string ,_fgb _fc .Face ,_abe ,_dbe float64 );MeasureString (_gfb string ,_bbd _fc .Face )(_eef ,_dbf float64 );DrawRectangle (_eee ,_bcg ,_cd ,_fcc float64 );DrawImage (_eefd _d .Image ,_bca ,_ga int );DrawImageAnchored (_gbe _d .Image ,_cag ,_ddb int ,_aef ,_efg float64 );Height ()int ;Width ()int ;};func (_cfc *TextState )ProcQ (data []byte ,ctx Context ){_cfc .ProcTStar ();_cfc .ProcTj (data ,ctx )};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_bf ,_facb :=_c .NewPdfFontFromTTFFile (filePath );if _facb !=nil {return nil ,_facb ;};return NewTextFont (_bf ,size );};func (_dbg *TextFont )GetCharMetrics (code _fd .CharCode )(float64 ,float64 ,bool ){if _cf ,_aa :=_dbg .Font .GetCharMetrics (code );_aa &&_cf .Wx !=0{return _cf .Wx ,_cf .Wy ,_aa ;};if _dbg ._ge ==nil {return 0,0,false ;};_fga ,_gae :=_dbg ._ge .GetCharMetrics (code );return _fga .Wx ,_fga .Wy ,_gae &&_fga .Wx !=0;};func (_fgd *TextFont )CharcodesToUnicode (charcodes []_fd .CharCode )[]rune {if _fgd ._ge !=nil {return _fgd ._ge .CharcodesToUnicode (charcodes );};return _fgd .Font .CharcodesToUnicode (charcodes );};func (_age *TextState )ProcTD (tx ,ty float64 ){_age .Tl =-ty ;_age .ProcTd (tx ,ty )};func (_ag *TextFont )NewFace (size float64 )_fc .Face {return _gf .NewFace (_ag ._afc ,&_gf .Options {Size :size });};func (_bfa *TextFont )BytesToCharcodes (data []byte )[]_fd .CharCode {if _bfa ._ge !=nil {return _bfa ._ge .BytesToCharcodes (data );};return _bfa .Font .BytesToCharcodes (data );};func (_gfg *TextState )ProcTf (font *TextFont ){_gfg .Tf =font };func (_cbc *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_cbc .Tw =aw ;_cbc .Tc =ac ;_cbc .ProcQ (data ,ctx );};type TextFont struct{Font *_c .PdfFont ;Size float64 ;_afc *_gf .Font ;_ge *_c .PdfFont ;};func (_bbg *TextState )Translate (tx ,ty float64 ){_bbg .Tm =_g .TranslationMatrix (tx ,ty ).Mult (_bbg .Tm );};func (_gdd *TextState )ProcTStar (){_gdd .ProcTd (0,-_gdd .Tl )};func (_acf *TextState )Reset (){_acf .Tm =_g .IdentityMatrix ();_acf .Tlm =_g .IdentityMatrix ()};type FillRule int ;func NewTextState ()*TextState {return &TextState {Th :100,Tm :_g .IdentityMatrix (),Tlm :_g .IdentityMatrix ()};};func (_eg *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_eg .Tm =_g .NewMatrix (a ,b ,c ,d ,e ,-f );_eg .Tlm =_eg .Tm .Clone ();};type LineCap int ;const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func NewTextFont (font *_c .PdfFont ,size float64 )(*TextFont ,error ){_abf :=font .FontDescriptor ();if _abf ==nil {return nil ,_f .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_gc ,_gfd :=_ca .GetStream (_abf .FontFile2 );if !_gfd {return nil ,_f .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_dea ,_ece :=_ca .DecodeStream (_gc );if _ece !=nil {return nil ,_ece ;};_ceg ,_ece :=_gf .Parse (_dea );if _ece !=nil {return nil ,_ece ;};return &TextFont {Font :font ,Size :size ,_afc :_ceg },nil ;};