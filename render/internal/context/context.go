//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_e "errors";_ba "github.com/golang/freetype/truetype";_af "github.com/unidoc/unipdf/v3/core";_df "github.com/unidoc/unipdf/v3/internal/textencoding";_dd "github.com/unidoc/unipdf/v3/internal/transform";_eg "github.com/unidoc/unipdf/v3/model";
_b "golang.org/x/image/font";_d "image";_a "image/color";);type TextRenderingMode int ;type LineCap int ;const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;
TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);func (_cbg *TextFont )GetCharMetrics (code _df .CharCode )(float64 ,float64 ,bool ){if _dgg ,_ccb :=_cbg .Font .GetCharMetrics (code );_ccb &&_dgg .Wx !=0{return _dgg .Wx ,_dgg .Wy ,_ccb ;
};if _cbg ._bed ==nil {return 0,0,false ;};_gdg ,_fgdb :=_cbg ._bed .GetCharMetrics (code );return _gdg .Wx ,_gdg .Wy ,_fgdb &&_gdg .Wx !=0;};type TextFont struct{Font *_eg .PdfFont ;Size float64 ;_aaa *_ba .Font ;_bed *_eg .PdfFont ;};type Pattern interface{ColorAt (_db ,_dg int )_a .Color ;
};func (_fbd *TextState )Translate (tx ,ty float64 ){_fbd .Tm =_dd .TranslationMatrix (tx ,ty ).Mult (_fbd .Tm );};func (_bbg *TextState )ProcTd (tx ,ty float64 ){_bbg .Tlm .Concat (_dd .TranslationMatrix (tx ,-ty ));_bbg .Tm =_bbg .Tlm .Clone ();};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_gee ,_gae :=_eg .NewPdfFontFromTTFFile (filePath );
if _gae !=nil {return nil ,_gae ;};return NewTextFont (_gee ,size );};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_abe *TextFont )CharcodesToUnicode (charcodes []_df .CharCode )[]rune {if _abe ._bed !=nil {return _abe ._bed .CharcodesToUnicode (charcodes );
};return _abe .Font .CharcodesToUnicode (charcodes );};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_cdd *TextState )ProcQ (data []byte ,ctx Context ){_cdd .ProcTStar ();_cdd .ProcTj (data ,ctx )};const (LineJoinRound LineJoin =iota ;
LineJoinBevel ;);func (_bff *TextState )ProcTD (tx ,ty float64 ){_bff .Tl =-ty ;_bff .ProcTd (tx ,ty )};func (_ede *TextState )Reset (){_ede .Tm =_dd .IdentityMatrix ();_ede .Tlm =_dd .IdentityMatrix ()};type FillRule int ;func (_dcf *TextFont )NewFace (size float64 )_b .Face {return _ba .NewFace (_dcf ._aaa ,&_ba .Options {Size :size });
};func (_fa *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _afg ,_dcb :=_fa .Font .GetRuneMetrics (r );_dcb &&_afg .Wx !=0{return _afg .Wx ,_afg .Wy ,_dcb ;};if _fa ._bed ==nil {return 0,0,false ;};_bd ,_bcc :=_fa ._bed .GetRuneMetrics (r );
return _bd .Wx ,_bd .Wy ,_bcc &&_bd .Wx !=0;};func NewTextFont (font *_eg .PdfFont ,size float64 )(*TextFont ,error ){_fgd :=font .FontDescriptor ();if _fgd ==nil {return nil ,_e .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_efga ,_aac :=_af .GetStream (_fgd .FontFile2 );if !_aac {return nil ,_e .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_eag ,_bf :=_af .DecodeStream (_efga );
if _bf !=nil {return nil ,_bf ;};_egdc ,_bf :=_ba .Parse (_eag );if _bf !=nil {return nil ,_bf ;};return &TextFont {Font :font ,Size :size ,_aaa :_egdc },nil ;};func (_eab *TextState )ProcTf (font *TextFont ){_eab .Tf =font };func (_fe *TextFont )WithSize (size float64 ,originalFont *_eg .PdfFont )*TextFont {return &TextFont {Font :_fe .Font ,Size :size ,_aaa :_fe ._aaa ,_bed :originalFont };
};type LineJoin int ;type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _dd .Matrix ;Tlm _dd .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};func (_ecg *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_ecg .Tw =aw ;
_ecg .Tc =ac ;_ecg .ProcQ (data ,ctx );};func NewTextState ()TextState {return TextState {Th :100,Tm :_dd .IdentityMatrix (),Tlm :_dd .IdentityMatrix ()};};type Context interface{Push ();Pop ();Matrix ()_dd .Matrix ;SetMatrix (_ea _dd .Matrix );Translate (_ec ,_g float64 );
Scale (_f ,_dfg float64 );Rotate (_ef float64 );MoveTo (_de ,_cd float64 );LineTo (_cb ,_aa float64 );CubicTo (_bc ,_bac ,_ag ,_dc ,_dcc ,_dbe float64 );QuadraticTo (_be ,_efg ,_ae ,_ce float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();
ResetClip ();LineWidth ()float64 ;SetLineWidth (_ac float64 );SetLineCap (_ga LineCap );SetLineJoin (_ebg LineJoin );SetDash (_ge ...float64 );SetDashOffset (_dbc float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_eaf ,_dgf ,_cc ,_egb float64 );
SetFillRGBA (_afb ,_cdf ,_deg ,_gaa float64 );SetFillStyle (_ad Pattern );SetFillRule (_ceg FillRule );SetStrokeRGBA (_dfb ,_gc ,_efa ,_ff float64 );SetStrokeStyle (_adb Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;
DrawString (_bcg string ,_bce _b .Face ,_egd ,_gf float64 );MeasureString (_eaa string ,_ccc _b .Face )(_dgfg ,_aga float64 );DrawRectangle (_bb ,_bg ,_gac ,_dfa float64 );DrawImage (_ee _d .Image ,_ged ,_ffc int );DrawImageAnchored (_bbf _d .Image ,_ed ,_gd int ,_fg ,_dfae float64 );
Height ()int ;Width ()int ;};func (_ab *TextFont )BytesToCharcodes (data []byte )[]_df .CharCode {if _ab ._bed !=nil {return _ab ._bed .BytesToCharcodes (data );};return _ab .Font .BytesToCharcodes (data );};func (_da *TextState )ProcTStar (){_da .ProcTd (0,-_da .Tl )};
func (_gcf *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_gcf .Tm =_dd .NewMatrix (a ,b ,c ,d ,e ,-f );_gcf .Tlm =_gcf .Tm .Clone ();};func (_ffcg *TextState )ProcTj (data []byte ,ctx Context ){_fae :=_ffcg .Tf .Size ;_cde :=_ffcg .Th /100.0;_cf :=_ffcg .GlobalScale ;
_ebge :=_dd .NewMatrix (_fae *_cde ,0,0,_fae ,0,_ffcg .Ts );_bfg :=ctx .Matrix ();_fc :=_bfg .Clone ().Mult (_ffcg .Tm .Clone ().Mult (_ebge )).ScalingFactorY ();_fd :=_ffcg .Tf .NewFace (_fc );_fb :=_ffcg .Tf .CharcodesToUnicode (_ffcg .Tf .BytesToCharcodes (data ));
for _ ,_ccg :=range _fb {if _ccg =='\x00'{continue ;};_abea :=_ffcg .Tm .Clone ();_ffcg .Tm .Concat (_ebge );if _ffcg .Tr !=TextRenderingModeInvisible {_abc ,_bedf :=_ffcg .Tm .Transform (0,0);ctx .Scale (1/_cf ,-1/_cf );ctx .DrawString (string (_ccg ),_fd ,_abc *_cf ,_bedf *_cf );
ctx .Scale (_cf ,-_cf );};_ega :=0.0;if _ccg ==' '{_ega =_ffcg .Tw ;};var _gg float64 ;if _gag ,_ ,_cbf :=_ffcg .Tf .GetRuneMetrics (_ccg );_cbf {_gg =_gag *0.001*_fc /_cf ;}else {_gg ,_ =ctx .MeasureString (string (_ccg ),_fd );};_dfc :=(_gg +_ffcg .Tc +_ega )*_cde ;
_ffcg .Tm =_dd .TranslationMatrix (_dfc ,0).Mult (_abea );};};type Gradient interface{Pattern ;AddColorStop (_ca float64 ,_eb _a .Color );};