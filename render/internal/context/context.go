//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_a "errors";_fd "github.com/unidoc/freetype/truetype";_c "github.com/unidoc/unipdf/v3/core";_df "github.com/unidoc/unipdf/v3/internal/textencoding";_b "github.com/unidoc/unipdf/v3/internal/transform";_ea "github.com/unidoc/unipdf/v3/model";
_f "golang.org/x/image/font";_d "image";_e "image/color";);type Pattern interface{ColorAt (_bg ,_ga int )_e .Color ;};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);type TextFont struct{Font *_ea .PdfFont ;Size float64 ;_fdd *_fd .Font ;_de *_ea .PdfFont ;
};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_da *TextState )ProcTj (data []byte ,ctx Context ){_edg :=_da .Tf .Size ;_dfaf :=_da .Th /100.0;_bgg :=_da .GlobalScale ;_dcf :=_b .NewMatrix (_edg *_dfaf ,0,0,_edg ,0,_da .Ts );_eee :=ctx .Matrix ();
_cgf :=_eee .Clone ().Mult (_da .Tm .Clone ().Mult (_dcf )).ScalingFactorY ();_agg :=_da .Tf .NewFace (_cgf );_efa :=_da .Tf .BytesToCharcodes (data );for _ ,_ede :=range _efa {_edd ,_gec :=_da .Tf .CharcodeToRunes (_ede );_ccf :=string (_gec );if _ccf =="\u0000"{continue ;
};_dbe :=_eee .Clone ().Mult (_da .Tm .Clone ().Mult (_dcf ));_acg :=_dbe .ScalingFactorY ();_dbe =_dbe .Scale (1/_acg ,-1/_acg );if _da .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_dbe );ctx .DrawString (_ccf ,_agg ,0,0);ctx .SetMatrix (_eee );};
_ggg :=0.0;if _ccf =="\u0020"{_ggg =_da .Tw ;};_be ,_ ,_fegd :=_da .Tf .GetCharMetrics (_edd );if _fegd {_be =_be *0.001*_edg ;}else {_be ,_ =ctx .MeasureString (_ccf ,_agg );_be =_be /_bgg ;};_caf :=(_be +_da .Tc +_ggg )*_dfaf ;_da .Tm =_da .Tm .Mult (_b .TranslationMatrix (_caf ,0));
};};type TextRenderingMode int ;type Gradient interface{Pattern ;AddColorStop (_ac float64 ,_fc _e .Color );};func (_eafa *TextState )ProcTStar (){_eafa .ProcTd (0,-_eafa .Tl )};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;
TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);func (_gee *TextState )Reset (){_gee .Tm =_b .IdentityMatrix ();_gee .Tlm =_b .IdentityMatrix ()};
type LineJoin int ;func (_fcb *TextState )ProcTd (tx ,ty float64 ){_fcb .Tlm .Concat (_b .TranslationMatrix (tx ,ty ));_fcb .Tm =_fcb .Tlm .Clone ();};func (_gdf *TextState )ProcTD (tx ,ty float64 ){_gdf .Tl =-ty ;_gdf .ProcTd (tx ,ty )};func (_fedb *TextFont )WithSize (size float64 ,originalFont *_ea .PdfFont )*TextFont {return &TextFont {Font :_fedb .Font ,Size :size ,_fdd :_fedb ._fdd ,_de :originalFont };
};type FillRule int ;func (_ec *TextFont )NewFace (size float64 )_f .Face {return _fd .NewFace (_ec ._fdd ,&_fd .Options {Size :size });};type LineCap int ;func (_dbg *TextFont )CharcodeToRunes (charcode _df .CharCode )(_df .CharCode ,[]rune ){_gd :=[]_df .CharCode {charcode };
if _dbg ._de ==nil ||_dbg ._de ==_dbg .Font {if _dbg .Font .IsSimple ()&&_dbg ._fdd !=nil {if _fcg :=_dbg ._fdd .Index (rune (charcode ));_fcg > 0{return charcode ,[]rune {rune (charcode )};};};return charcode ,_dbg .Font .CharcodesToUnicode (_gd );};_ca :=_dbg ._de .CharcodesToUnicode (_gd );
_fbd ,_ :=_dbg .Font .RunesToCharcodeBytes (_ca );_cca :=_dbg .Font .BytesToCharcodes (_fbd );_cbf :=charcode ;if len (_cca )> 0&&_cca [0]!=0{_cbf =_cca [0];};return _cbf ,_ca ;};func (_gea *TextState )ProcTf (font *TextFont ){_gea .Tf =font };func NewTextState ()TextState {return TextState {Th :100,Tm :_b .IdentityMatrix (),Tlm :_b .IdentityMatrix ()};
};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_fcc ,_cdf :=_ea .NewPdfFontFromTTFFile (filePath );if _cdf !=nil {return nil ,_cdf ;};return NewTextFont (_fcc ,size );};func NewTextFont (font *_ea .PdfFont ,size float64 )(*TextFont ,error ){_gc :=font .FontDescriptor ();
if _gc ==nil {return nil ,_a .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_feg ,_dcaa :=_c .GetStream (_gc .FontFile2 );if !_dcaa {return nil ,_a .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_effg ,_cg :=_c .DecodeStream (_feg );if _cg !=nil {return nil ,_cg ;};_bff ,_cg :=_fd .Parse (_effg );if _cg !=nil {return nil ,_cg ;};return &TextFont {Font :font ,Size :size ,_fdd :_bff },nil ;};func (_edb *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_edb .Tm =_b .NewMatrix (a ,b ,c ,d ,e ,f );
_edb .Tlm =_edb .Tm .Clone ();};type Context interface{Push ();Pop ();Matrix ()_b .Matrix ;SetMatrix (_dc _b .Matrix );Translate (_db ,_dbb float64 );Scale (_gg ,_dff float64 );Rotate (_bb float64 );MoveTo (_eb ,_cc float64 );LineTo (_ee ,_bf float64 );
CubicTo (_cb ,_eba ,_dfa ,_bbb ,_fce ,_ff float64 );QuadraticTo (_ad ,_ef ,_fg ,_fe float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_dca float64 );SetLineCap (_efe LineCap );SetLineJoin (_bc LineJoin );
SetDash (_dfg ...float64 );SetDashOffset (_ed float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_fgf ,_ge ,_ace ,_fa float64 );SetFillRGBA (_fge ,_eff ,_bga ,_add float64 );SetFillStyle (_cce Pattern );SetFillRule (_bfd FillRule );
SetStrokeRGBA (_ebc ,_fceg ,_ba ,_bbf float64 );SetStrokeStyle (_ffe Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_gef string ,_fec _f .Face ,_fde ,_gf float64 );MeasureString (_cbe string ,_bbg _f .Face )(_ffeb ,_adb float64 );
DrawRectangle (_fb ,_baa ,_fdb ,_dcd float64 );DrawImage (_aa _d .Image ,_dd ,_bd int );DrawImageAnchored (_fed _d .Image ,_bcg ,_ab int ,_cd ,_ag float64 );Height ()int ;Width ()int ;};func (_ce *TextState )Translate (tx ,ty float64 ){_ce .Tm =_ce .Tm .Mult (_b .TranslationMatrix (tx ,ty ))};
const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _b .Matrix ;Tlm _b .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};func (_bbbc *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_bbbc .Tw =aw ;
_bbbc .Tc =ac ;_bbbc .ProcQ (data ,ctx );};func (_gfe *TextState )ProcQ (data []byte ,ctx Context ){_gfe .ProcTStar ();_gfe .ProcTj (data ,ctx )};func (_af *TextFont )GetCharMetrics (code _df .CharCode )(float64 ,float64 ,bool ){if _fdg ,_dg :=_af .Font .GetCharMetrics (code );
_dg &&_fdg .Wx !=0{return _fdg .Wx ,_fdg .Wy ,_dg ;};if _af ._de ==nil {return 0,0,false ;};_bdg ,_eaf :=_af ._de .GetCharMetrics (code );return _bdg .Wx ,_bdg .Wy ,_eaf &&_bdg .Wx !=0;};func (_bbe *TextFont )BytesToCharcodes (data []byte )[]_df .CharCode {if _bbe ._de !=nil {return _bbe ._de .BytesToCharcodes (data );
};return _bbe .Font .BytesToCharcodes (data );};