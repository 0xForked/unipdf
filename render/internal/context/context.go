//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_a "errors";_gg "github.com/unidoc/freetype/truetype";_bf "github.com/unidoc/unipdf/v3/core";_e "github.com/unidoc/unipdf/v3/internal/textencoding";_b "github.com/unidoc/unipdf/v3/internal/transform";_ac "github.com/unidoc/unipdf/v3/model";
_fa "golang.org/x/image/font";_f "image";_g "image/color";);func (_aa *TextFont )GetCharMetrics (code _e .CharCode )(float64 ,float64 ,bool ){if _ff ,_ecbe :=_aa .Font .GetCharMetrics (code );_ecbe &&_ff .Wx !=0{return _ff .Wx ,_ff .Wy ,_ecbe ;};if _aa ._fb ==nil {return 0,0,false ;
};_acd ,_abd :=_aa ._fb .GetCharMetrics (code );return _acd .Wx ,_acd .Wy ,_abd &&_acd .Wx !=0;};func NewTextState ()TextState {return TextState {Th :100,Tm :_b .IdentityMatrix (),Tlm :_b .IdentityMatrix ()};};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_cc ,_gbb :=_ac .NewPdfFontFromTTFFile (filePath );
if _gbb !=nil {return nil ,_gbb ;};return NewTextFont (_cc ,size );};func (_afaf *TextFont )CharcodeToRunes (charcode _e .CharCode )(_e .CharCode ,[]rune ){_afg :=[]_e .CharCode {charcode };if _afaf ._fb ==nil ||_afaf ._fb ==_afaf .Font {if _afaf .Font .IsSimple ()&&_afaf ._gec !=nil {if _ecc :=_afaf ._gec .Index (rune (charcode ));
_ecc > 0{return charcode ,[]rune {rune (charcode )};};};return charcode ,_afaf .Font .CharcodesToUnicode (_afg );};_ecb :=_afaf ._fb .CharcodesToUnicode (_afg );_dcde ,_ :=_afaf .Font .RunesToCharcodeBytes (_ecb );_dg :=_afaf .Font .BytesToCharcodes (_dcde );
_ecea :=charcode ;if len (_dg )> 0&&_dg [0]!=0{_ecea =_dg [0];};return _ecea ,_ecb ;};type LineCap int ;const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_aac *TextState )ProcTf (font *TextFont ){_aac .Tf =font };func (_gfad *TextState )Reset (){_gfad .Tm =_b .IdentityMatrix ();
_gfad .Tlm =_b .IdentityMatrix ()};func (_dcfd *TextState )ProcTj (data []byte ,ctx Context ){_bbgc :=_dcfd .Tf .Size ;_fe :=_dcfd .Th /100.0;_gebd :=_dcfd .GlobalScale ;_dd :=_b .NewMatrix (_bbgc *_fe ,0,0,_bbgc ,0,_dcfd .Ts );_abb :=ctx .Matrix ();_efeb :=_abb .Clone ().Mult (_dcfd .Tm .Clone ().Mult (_dd )).ScalingFactorY ();
_gcgd :=_dcfd .Tf .NewFace (_efeb );_ccc :=_dcfd .Tf .BytesToCharcodes (data );for _ ,_bfcb :=range _ccc {_gfa ,_dfe :=_dcfd .Tf .CharcodeToRunes (_bfcb );_fbg :=string (_dfe );if _fbg =="\u0000"{continue ;};_dge :=_abb .Clone ().Mult (_dcfd .Tm .Clone ().Mult (_dd ));
_ggd :=_dge .ScalingFactorY ();_dge =_dge .Scale (1/_ggd ,-1/_ggd );if _dcfd .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_dge );ctx .DrawString (_fbg ,_gcgd ,0,0);ctx .SetMatrix (_abb );};_ecbg :=0.0;if _fbg =="\u0020"{_ecbg =_dcfd .Tw ;};_ddg ,_ ,_egd :=_dcfd .Tf .GetCharMetrics (_gfa );
if _egd {_ddg =_ddg *0.001*_bbgc ;}else {_ddg ,_ =ctx .MeasureString (_fbg ,_gcgd );_ddg =_ddg /_gebd ;};_abda :=(_ddg +_dcfd .Tc +_ecbg )*_fe ;_dcfd .Tm =_dcfd .Tm .Mult (_b .TranslationMatrix (_abda ,0));};};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;
);type Pattern interface{ColorAt (_gc ,_gd int )_g .Color ;};type LineJoin int ;const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_dfg *TextState )Translate (tx ,ty float64 ){_dfg .Tm =_dfg .Tm .Mult (_b .TranslationMatrix (tx ,ty ));
};type FillRule int ;func (_bcba *TextState )ProcTStar (){_bcba .ProcTd (0,-_bcba .Tl )};type TextRenderingMode int ;type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _b .Matrix ;Tlm _b .Matrix ;Tr TextRenderingMode ;
GlobalScale float64 ;};func (_fdb *TextState )ProcTd (tx ,ty float64 ){_fdb .Tlm .Concat (_b .TranslationMatrix (tx ,ty ));_fdb .Tm =_fdb .Tlm .Clone ();};type Gradient interface{Pattern ;AddColorStop (_ad float64 ,_bfc _g .Color );};func (_ead *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_ead .Tm =_b .NewMatrix (a ,b ,c ,d ,e ,f );
_ead .Tlm =_ead .Tm .Clone ();};func (_ecbf *TextState )ProcQ (data []byte ,ctx Context ){_ecbf .ProcTStar ();_ecbf .ProcTj (data ,ctx )};func (_aba *TextFont )BytesToCharcodes (data []byte )[]_e .CharCode {if _aba ._fb !=nil {return _aba ._fb .BytesToCharcodes (data );
};return _aba .Font .BytesToCharcodes (data );};func (_afa *TextFont )WithSize (size float64 ,originalFont *_ac .PdfFont )*TextFont {return &TextFont {Font :_afa .Font ,Size :size ,_gec :_afa ._gec ,_fb :originalFont };};func (_cbd *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_cbd .Tw =aw ;
_cbd .Tc =ac ;_cbd .ProcQ (data ,ctx );};func NewTextFont (font *_ac .PdfFont ,size float64 )(*TextFont ,error ){_ece :=font .FontDescriptor ();if _ece ==nil {return nil ,_a .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_aedb ,_dea :=_bf .GetStream (_ece .FontFile2 );if !_dea {return nil ,_a .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_cd ,_cda :=_bf .DecodeStream (_aedb );
if _cda !=nil {return nil ,_cda ;};_cdf ,_cda :=_gg .Parse (_cd );if _cda !=nil {return nil ,_cda ;};return &TextFont {Font :font ,Size :size ,_gec :_cdf },nil ;};type TextFont struct{Font *_ac .PdfFont ;Size float64 ;_gec *_gg .Font ;_fb *_ac .PdfFont ;
};func (_ceb *TextFont )NewFace (size float64 )_fa .Face {return _gg .NewFace (_ceb ._gec ,&_gg .Options {Size :size });};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;
TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);func (_cae *TextState )ProcTD (tx ,ty float64 ){_cae .Tl =-ty ;_cae .ProcTd (tx ,ty )};type Context interface{Push ();Pop ();Matrix ()_b .Matrix ;
SetMatrix (_af _b .Matrix );Translate (_c ,_gce float64 );Scale (_fc ,_bb float64 );Rotate (_ea float64 );MoveTo (_ef ,_bbf float64 );LineTo (_gcg ,_bg float64 );CubicTo (_dc ,_ag ,_ba ,_fcc ,_gde ,_be float64 );QuadraticTo (_ae ,_ab ,_bbg ,_gcc float64 );
NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_bd float64 );SetLineCap (_ec LineCap );SetLineJoin (_eb LineJoin );SetDash (_bda ...float64 );SetDashOffset (_bc float64 );Fill ();FillPreserve ();
Stroke ();StrokePreserve ();SetRGBA (_aed ,_ge ,_ed ,_bcb float64 );SetFillRGBA (_ce ,_cb ,_de ,_bcg float64 );SetFillStyle (_deg Pattern );SetFillRule (_gdd FillRule );SetStrokeRGBA (_geb ,_fac ,_dce ,_deb float64 );SetStrokeStyle (_bef Pattern );FillPattern ()Pattern ;
StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_bdac string ,_cbg _fa .Face ,_dcf ,_cf float64 );MeasureString (_adg string ,_cbe _fa .Face )(_cbb ,_bgd float64 );DrawRectangle (_efe ,_fd ,_fce ,_gf float64 );DrawImage (_ace _f .Image ,_bcgc ,_ca int );
DrawImageAnchored (_dec _f .Image ,_gb ,_dcd int ,_df ,_bcf float64 );Height ()int ;Width ()int ;};