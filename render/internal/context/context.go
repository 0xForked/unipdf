//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_g "errors";_fc "github.com/golang/freetype/truetype";_cg "github.com/unidoc/unipdf/v3/core";_f "github.com/unidoc/unipdf/v3/internal/textencoding";_aa "github.com/unidoc/unipdf/v3/internal/transform";_gfb "github.com/unidoc/unipdf/v3/model";
_b "golang.org/x/image/font";_gf "image";_a "image/color";);func NewTextFont (font *_gfb .PdfFont ,size float64 )(*TextFont ,error ){_fa :=font .FontDescriptor ();if _fa ==nil {return nil ,_g .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_de ,_ede :=_cg .GetStream (_fa .FontFile2 );if !_ede {return nil ,_g .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_fba ,_ebb :=_cg .DecodeStream (_de );
if _ebb !=nil {return nil ,_ebb ;};_egd ,_ebb :=_fc .Parse (_fba );if _ebb !=nil {return nil ,_ebb ;};return &TextFont {Font :font ,Size :size ,_ecae :_egd },nil ;};func (_ddd *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _ddb ,_fed :=_ddd .Font .GetRuneMetrics (r );
_fed &&_ddb .Wx !=0{return _ddb .Wx ,_ddb .Wy ,_fed ;};if _ddd ._fe ==nil {return 0,0,false ;};_ecd ,_gfc :=_ddd ._fe .GetRuneMetrics (r );return _ecd .Wx ,_ecd .Wy ,_gfc &&_ecd .Wx !=0;};func (_gdb *TextState )Reset (){_gdb .Tm =_aa .IdentityMatrix ();
_gdb .Tlm =_aa .IdentityMatrix ()};func (_ggac *TextFont )BytesToCharcodes (data []byte )[]_f .CharCode {if _ggac ._fe !=nil {return _ggac ._fe .BytesToCharcodes (data );};return _ggac .Font .BytesToCharcodes (data );};const (LineJoinRound LineJoin =iota ;
LineJoinBevel ;);type Pattern interface{ColorAt (_bc ,_cb int )_a .Color ;};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;
TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);func (_bde *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_bde .Tm =_aa .NewMatrix (a ,b ,c ,d ,e ,f );_bde .Tlm =_bde .Tm .Clone ();};func (_age *TextFont )GetCharMetrics (code _f .CharCode )(float64 ,float64 ,bool ){if _bbg ,_cdf :=_age .Font .GetCharMetrics (code );
_cdf &&_bbg .Wx !=0{return _bbg .Wx ,_bbg .Wy ,_cdf ;};if _age ._fe ==nil {return 0,0,false ;};_ab ,_egf :=_age ._fe .GetCharMetrics (code );return _ab .Wx ,_ab .Wy ,_egf &&_ab .Wx !=0;};type TextFont struct{Font *_gfb .PdfFont ;Size float64 ;_ecae *_fc .Font ;
_fe *_gfb .PdfFont ;};func (_gde *TextFont )CharcodesToUnicode (charcodes []_f .CharCode )[]rune {if _gde ._fe !=nil {return _gde ._fe .CharcodesToUnicode (charcodes );};return _gde .Font .CharcodesToUnicode (charcodes );};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_ccc ,_bdd :=_gfb .NewPdfFontFromTTFFile (filePath );
if _bdd !=nil {return nil ,_bdd ;};return NewTextFont (_ccc ,size );};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_bea *TextState )ProcTf (font *TextFont ){_bea .Tf =font };const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;
);func (_bfdd *TextState )ProcQ (data []byte ,ctx Context ){_bfdd .ProcTStar ();_bfdd .ProcTj (data ,ctx )};type Context interface{Push ();Pop ();Matrix ()_aa .Matrix ;SetMatrix (_gfbd _aa .Matrix );Translate (_ca ,_bf float64 );Scale (_gd ,_gb float64 );
Rotate (_fg float64 );MoveTo (_ag ,_ff float64 );LineTo (_cgf ,_e float64 );CubicTo (_gdg ,_cc ,_d ,_gbb ,_fcb ,_dd float64 );QuadraticTo (_ba ,_gg ,_ce ,_cd float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;
SetLineWidth (_cad float64 );SetLineCap (_ea LineCap );SetLineJoin (_df LineJoin );SetDash (_dc ...float64 );SetDashOffset (_eg float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_ee ,_ccf ,_ccg ,_ggb float64 );SetFillRGBA (_ef ,_ed ,_ad ,_egg float64 );
SetFillStyle (_dfg Pattern );SetFillRule (_eff FillRule );SetStrokeRGBA (_ada ,_gfa ,_ddc ,_gc float64 );SetStrokeStyle (_bg Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_bag string ,_eb _b .Face ,_af ,_bb float64 );
MeasureString (_fbc string ,_bcf _b .Face )(_egga ,_gga float64 );DrawRectangle (_fbcg ,_db ,_bd ,_dfe float64 );DrawImage (_agc _gf .Image ,_dbf ,_ec int );DrawImageAnchored (_fgc _gf .Image ,_eca ,_ga int ,_bfd ,_aaa float64 );Height ()int ;Width ()int ;
};func (_fcf *TextFont )WithSize (size float64 ,originalFont *_gfb .PdfFont )*TextFont {return &TextFont {Font :_fcf .Font ,Size :size ,_ecae :_fcf ._ecae ,_fe :originalFont };};type TextRenderingMode int ;func NewTextState ()TextState {return TextState {Th :100,Tm :_aa .IdentityMatrix (),Tlm :_aa .IdentityMatrix ()};
};func (_gcf *TextState )ProcTD (tx ,ty float64 ){_gcf .Tl =-ty ;_gcf .ProcTd (tx ,ty )};func (_dfd *TextFont )NewFace (size float64 )_b .Face {return _fc .NewFace (_dfd ._ecae ,&_fc .Options {Size :size });};func (_fbe *TextState )ProcTd (tx ,ty float64 ){_fbe .Tlm .Concat (_aa .TranslationMatrix (tx ,ty ));
_fbe .Tm =_fbe .Tlm .Clone ();};type FillRule int ;func (_be *TextState )ProcTStar (){_be .ProcTd (0,-_be .Tl )};type LineJoin int ;type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _aa .Matrix ;Tlm _aa .Matrix ;
Tr TextRenderingMode ;GlobalScale float64 ;};type LineCap int ;type Gradient interface{Pattern ;AddColorStop (_cf float64 ,_fb _a .Color );};func (_dcb *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_dcb .Tw =aw ;_dcb .Tc =ac ;_dcb .ProcQ (data ,ctx );
};func (_ac *TextState )Translate (tx ,ty float64 ){_ac .Tm =_ac .Tm .Mult (_aa .TranslationMatrix (tx ,ty ))};func (_cbg *TextState )ProcTj (data []byte ,ctx Context ){_ecf :=_cbg .Tf .Size ;_efa :=_cbg .Th /100.0;_agg :=_cbg .GlobalScale ;_eeb :=_aa .NewMatrix (_ecf *_efa ,0,0,_ecf ,0,_cbg .Ts );
_ffe :=ctx .Matrix ();_ae :=_ffe .Clone ().Mult (_cbg .Tm .Clone ().Mult (_eeb )).ScalingFactorY ();_ebd :=_cbg .Tf .NewFace (_ae );_afc :=_cbg .Tf .BytesToCharcodes (data );_da :=_cbg .Tf .CharcodesToUnicode (_afc );for _edf ,_fbec :=range _da {if _fbec =='\x00'{continue ;
};_baf :=_ffe .Clone ().Mult (_cbg .Tm .Clone ().Mult (_eeb ));_eef :=_baf .ScalingFactorY ();_baf =_baf .Scale (1/_eef ,-1/_eef );if _cbg .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_baf );ctx .DrawString (string (_fbec ),_ebd ,0,0);ctx .SetMatrix (_ffe );
};_fgb :=0.0;if _fbec ==' '{_fgb =_cbg .Tw ;};_bbgc ,_ ,_ggg :=_cbg .Tf .GetRuneMetrics (_fbec );if !_ggg &&_edf < len (_afc ){_bbgc ,_ ,_ggg =_cbg .Tf .GetCharMetrics (_afc [_edf ]);};if _ggg {_bbgc =_bbgc *0.001*_ecf ;}else {_bbgc ,_ =ctx .MeasureString (string (_fbec ),_ebd );
_bbgc =_bbgc /_agg ;};_add :=(_bbgc +_cbg .Tc +_fgb )*_efa ;_cbg .Tm =_cbg .Tm .Mult (_aa .TranslationMatrix (_add ,0));};};