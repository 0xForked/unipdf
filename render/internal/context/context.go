//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_dc "errors";_ab "github.com/golang/freetype/truetype";_c "github.com/unidoc/unipdf/v3/core";_ee "github.com/unidoc/unipdf/v3/internal/textencoding";_e "github.com/unidoc/unipdf/v3/internal/transform";_f "github.com/unidoc/unipdf/v3/model";
_df "golang.org/x/image/font";_af "image";_d "image/color";);func (_daf *TextState )ProcTf (font *TextFont ){_daf .Tf =font };func (_gcb *TextFont )CharcodesToUnicode (charcodes []_ee .CharCode )[]rune {if _gcb ._dge !=nil {return _gcb ._dge .CharcodesToUnicode (charcodes );
};return _gcb .Font .CharcodesToUnicode (charcodes );};func (_cbd *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_cbd .Tm =_e .NewMatrix (a ,b ,c ,d ,e ,-f );_cbd .Tlm =_cbd .Tm .Clone ();};type Pattern interface{ColorAt (_ef ,_cd int )_d .Color ;};func (_ce *TextState )Translate (tx ,ty float64 ){_ce .Tm =_e .TranslationMatrix (tx ,ty ).Mult (_ce .Tm )};
type TextRenderingMode int ;type LineCap int ;type Context interface{Push ();Pop ();Matrix ()_e .Matrix ;SetMatrix (_fg _e .Matrix );Translate (_efb ,_gb float64 );Scale (_eb ,_abg float64 );Rotate (_cf float64 );MoveTo (_fe ,_eed float64 );LineTo (_aff ,_ca float64 );
CubicTo (_bf ,_aa ,_cde ,_dcd ,_dd ,_da float64 );QuadraticTo (_gd ,_fc ,_ac ,_cfd float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_ga float64 );SetLineCap (_ff LineCap );SetLineJoin (_abe LineJoin );
SetDash (_dg ...float64 );SetDashOffset (_ge float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_cg ,_ba ,_cdd ,_geg float64 );SetFillRGBA (_eg ,_bd ,_gab ,_ed float64 );SetFillStyle (_fa Pattern );SetFillRule (_fee FillRule );SetStrokeRGBA (_afb ,_gdd ,_faa ,_cab float64 );
SetStrokeStyle (_acf Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_acb string ,_cgc _df .Face ,_faac ,_dcg float64 );MeasureString (_gc string ,_fad _df .Face )(_ag ,_ede float64 );DrawRectangle (_egg ,_fca ,_acbe ,_fd float64 );
DrawImage (_be _af .Image ,_dga ,_ae int );DrawImageAnchored (_fb _af .Image ,_fdc ,_eeb int ,_aba ,_gf float64 );Height ()int ;Width ()int ;};type Gradient interface{Pattern ;AddColorStop (_g float64 ,_b _d .Color );};func NewTextState ()TextState {return TextState {Th :100,Tm :_e .IdentityMatrix (),Tlm :_e .IdentityMatrix ()};
};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_gdf ,_abgb :=_f .NewPdfFontFromTTFFile (filePath );if _abgb !=nil {return nil ,_abgb ;};return NewTextFont (_gdf ,size );};func (_gbb *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_gbb .Tw =aw ;
_gbb .Tc =ac ;_gbb .ProcQ (data ,ctx );};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;
TextRenderingModeClip ;);func (_bfg *TextFont )GetCharMetrics (code _ee .CharCode )(float64 ,float64 ,bool ){if _gac ,_gaa :=_bfg .Font .GetCharMetrics (code );_gaa &&_gac .Wx !=0{return _gac .Wx ,_gac .Wy ,_gaa ;};if _bfg ._dge ==nil {return 0,0,false ;
};_ea ,_eda :=_bfg ._dge .GetCharMetrics (code );return _ea .Wx ,_ea .Wy ,_eda &&_ea .Wx !=0;};func (_faacf *TextState )ProcTD (tx ,ty float64 ){_faacf .Tl =-ty ;_faacf .ProcTd (tx ,ty )};func (_gfd *TextState )Reset (){_gfd .Tm =_e .IdentityMatrix ();
_gfd .Tlm =_e .IdentityMatrix ()};type TextFont struct{Font *_f .PdfFont ;Size float64 ;_cda *_ab .Font ;_dge *_f .PdfFont ;};func (_gce *TextState )ProcTStar (){_gce .ProcTd (0,-_gce .Tl )};type FillRule int ;const (LineCapRound LineCap =iota ;LineCapButt ;
LineCapSquare ;);type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _e .Matrix ;Tlm _e .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};func (_bab *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _bb ,_cfa :=_bab .Font .GetRuneMetrics (r );
_cfa &&_bb .Wx !=0{return _bb .Wx ,_bb .Wy ,_cfa ;};if _bab ._dge ==nil {return 0,0,false ;};_bfc ,_dgf :=_bab ._dge .GetRuneMetrics (r );return _bfc .Wx ,_bfc .Wy ,_dgf &&_bfc .Wx !=0;};func (_db *TextState )ProcTd (tx ,ty float64 ){_db .Tlm .Concat (_e .TranslationMatrix (tx ,-ty ));
_db .Tm =_db .Tlm .Clone ();};func (_agd *TextState )ProcTj (data []byte ,ctx Context ){_ec :=_agd .Tf .Size ;_gcbb :=_agd .Th /100.0;_cgf :=_agd .GlobalScale ;_gec :=_e .NewMatrix (_ec *_gcbb ,0,0,_ec ,0,_agd .Ts );_gbe :=ctx .Matrix ();_cfad :=_gbe .Clone ().Mult (_agd .Tm .Clone ().Mult (_gec )).ScalingFactorY ();
_bdf :=_agd .Tf .NewFace (_cfad );_cgb :=_agd .Tf .CharcodesToUnicode (_agd .Tf .BytesToCharcodes (data ));for _ ,_ece :=range _cgb {if _ece =='\x00'{continue ;};_gdfd :=_agd .Tm .Clone ();_agd .Tm .Concat (_gec );if _agd .Tr !=TextRenderingModeInvisible {_ecb ,_ecc :=_agd .Tm .Transform (0,0);
ctx .Scale (1/_cgf ,-1/_cgf );ctx .DrawString (string (_ece ),_bdf ,_ecb *_cgf ,_ecc *_cgf );ctx .Scale (_cgf ,-_cgf );};_ded :=0.0;if _ece ==' '{_ded =_agd .Tw ;};var _gaf float64 ;if _gbg ,_ ,_fcc :=_agd .Tf .GetRuneMetrics (_ece );_fcc {_gaf =_gbg *0.001*_cfad /_cgf ;
}else {_gaf ,_ =ctx .MeasureString (string (_ece ),_bdf );};_ffg :=(_gaf +_agd .Tc +_ded )*_gcbb ;_agd .Tm =_e .TranslationMatrix (_ffg ,0).Mult (_gdfd );};};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);const (LineJoinRound LineJoin =iota ;
LineJoinBevel ;);func (_gabe *TextFont )WithSize (size float64 ,originalFont *_f .PdfFont )*TextFont {return &TextFont {Font :_gabe .Font ,Size :size ,_cda :_gabe ._cda ,_dge :originalFont };};func NewTextFont (font *_f .PdfFont ,size float64 )(*TextFont ,error ){_ffb :=font .FontDescriptor ();
if _ffb ==nil {return nil ,_dc .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_de ,_cb :=_c .GetStream (_ffb .FontFile2 );if !_cb {return nil ,_dc .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_eeda ,_gbc :=_c .DecodeStream (_de );if _gbc !=nil {return nil ,_gbc ;};_fab ,_gbc :=_ab .Parse (_eeda );if _gbc !=nil {return nil ,_gbc ;};return &TextFont {Font :font ,Size :size ,_cda :_fab },nil ;};func (_eec *TextState )ProcQ (data []byte ,ctx Context ){_eec .ProcTStar ();
_eec .ProcTj (data ,ctx )};func (_gde *TextFont )BytesToCharcodes (data []byte )[]_ee .CharCode {if _gde ._dge !=nil {return _gde ._dge .BytesToCharcodes (data );};return _gde .Font .BytesToCharcodes (data );};func (_daa *TextFont )NewFace (size float64 )_df .Face {return _ab .NewFace (_daa ._cda ,&_ab .Options {Size :size });
};type LineJoin int ;