//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_g "errors";_cba "github.com/unidoc/freetype/truetype";_bc "github.com/unidoc/unipdf/v3/core";_e "github.com/unidoc/unipdf/v3/internal/textencoding";_gb "github.com/unidoc/unipdf/v3/internal/transform";_ca "github.com/unidoc/unipdf/v3/model";
_cb "golang.org/x/image/font";_a "image";_c "image/color";);func NewTextFont (font *_ca .PdfFont ,size float64 )(*TextFont ,error ){_dcd :=font .FontDescriptor ();if _dcd ==nil {return nil ,_g .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_ddcc ,_ffg :=_bc .GetStream (_dcd .FontFile2 );if !_ffg {return nil ,_g .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_dge ,_bfc :=_bc .DecodeStream (_ddcc );
if _bfc !=nil {return nil ,_bfc ;};_ffc ,_bfc :=_cba .Parse (_dge );if _bfc !=nil {return nil ,_bfc ;};return &TextFont {Font :font ,Size :size ,_fbc :_ffc },nil ;};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);const (LineCapRound LineCap =iota ;
LineCapButt ;LineCapSquare ;);func NewTextState ()TextState {return TextState {Th :100,Tm :_gb .IdentityMatrix (),Tlm :_gb .IdentityMatrix ()};};type LineCap int ;func (_bdd *TextFont )NewFace (size float64 )_cb .Face {return _cba .NewFace (_bdd ._fbc ,&_cba .Options {Size :size });
};func (_afe *TextState )ProcTD (tx ,ty float64 ){_afe .Tl =-ty ;_afe .ProcTd (tx ,ty )};type TextFont struct{Font *_ca .PdfFont ;Size float64 ;_fbc *_cba .Font ;_feb *_ca .PdfFont ;};func (_gaad *TextState )ProcTd (tx ,ty float64 ){_gaad .Tlm .Concat (_gb .TranslationMatrix (tx ,ty ));
_gaad .Tm =_gaad .Tlm .Clone ();};func (_gda *TextFont )WithSize (size float64 ,originalFont *_ca .PdfFont )*TextFont {return &TextFont {Font :_gda .Font ,Size :size ,_fbc :_gda ._fbc ,_feb :originalFont };};type FillRule int ;func (_bgaa *TextState )Reset (){_bgaa .Tm =_gb .IdentityMatrix ();
_bgaa .Tlm =_gb .IdentityMatrix ()};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _gb .Matrix ;Tlm _gb .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};func (_cde *TextFont )BytesToCharcodes (data []byte )[]_e .CharCode {if _cde ._feb !=nil {return _cde ._feb .BytesToCharcodes (data );
};return _cde .Font .BytesToCharcodes (data );};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);type LineJoin int ;func (_eca *TextState )ProcTj (data []byte ,ctx Context ){_ccba :=_eca .Tf .Size ;_aad :=_eca .Th /100.0;_fgf :=_eca .GlobalScale ;
_ef :=_gb .NewMatrix (_ccba *_aad ,0,0,_ccba ,0,_eca .Ts );_cbfa :=ctx .Matrix ();_agg :=_cbfa .Clone ().Mult (_eca .Tm .Clone ().Mult (_ef )).ScalingFactorY ();_df :=_eca .Tf .NewFace (_agg );_dde :=_eca .Tf .BytesToCharcodes (data );for _ ,_gbd :=range _dde {_baf ,_ab :=_eca .Tf .CharcodeToRunes (_gbd );
_bga :=string (_ab );if _bga =="\u0000"{continue ;};_aee :=_cbfa .Clone ().Mult (_eca .Tm .Clone ().Mult (_ef ));_ddcf :=_aee .ScalingFactorY ();_aee =_aee .Scale (1/_ddcf ,-1/_ddcf );if _eca .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_aee );ctx .DrawString (_bga ,_df ,0,0);
ctx .SetMatrix (_cbfa );};_ccf :=0.0;if _bga =="\u0020"{_ccf =_eca .Tw ;};_gfa ,_ ,_aba :=_eca .Tf .GetCharMetrics (_baf );if _aba {_gfa =_gfa *0.001*_ccba ;}else {_gfa ,_ =ctx .MeasureString (_bga ,_df );_gfa =_gfa /_fgf ;};_gbba :=(_gfa +_eca .Tc +_ccf )*_aad ;
_eca .Tm =_eca .Tm .Mult (_gb .TranslationMatrix (_gbba ,0));};};type TextRenderingMode int ;func (_bbb *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_bbb .Tw =aw ;_bbb .Tc =ac ;_bbb .ProcQ (data ,ctx );};func (_gfd *TextFont )CharcodeToRunes (charcode _e .CharCode )(_e .CharCode ,[]rune ){_fac :=[]_e .CharCode {charcode };
if _gfd ._feb ==nil ||_gfd ._feb ==_gfd .Font {if _gfd .Font .IsSimple ()&&_gfd ._fbc !=nil {if _ac :=_gfd ._fbc .Index (rune (charcode ));_ac > 0{return charcode ,[]rune {rune (charcode )};};};return charcode ,_gfd .Font .CharcodesToUnicode (_fac );};
_edd :=_gfd ._feb .CharcodesToUnicode (_fac );_dda ,_ :=_gfd .Font .RunesToCharcodeBytes (_edd );_bad :=_gfd .Font .BytesToCharcodes (_dda );_cbf :=charcode ;if len (_bad )> 0&&_bad [0]!=0{_cbf =_bad [0];};return _cbf ,_edd ;};func (_bcc *TextState )ProcQ (data []byte ,ctx Context ){_bcc .ProcTStar ();
_bcc .ProcTj (data ,ctx )};func (_egd *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_egd .Tm =_gb .NewMatrix (a ,b ,c ,d ,e ,f );_egd .Tlm =_egd .Tm .Clone ();};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;
TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_eeb ,_bd :=_ca .NewPdfFontFromTTFFile (filePath );
if _bd !=nil {return nil ,_bd ;};return NewTextFont (_eeb ,size );};func (_fc *TextFont )GetCharMetrics (code _e .CharCode )(float64 ,float64 ,bool ){if _aed ,_eeg :=_fc .Font .GetCharMetrics (code );_eeg &&_aed .Wx !=0{return _aed .Wx ,_aed .Wy ,_eeg ;
};if _fc ._feb ==nil {return 0,0,false ;};_cgf ,_bfg :=_fc ._feb .GetCharMetrics (code );return _cgf .Wx ,_cgf .Wy ,_bfg &&_cgf .Wx !=0;};type Context interface{Push ();Pop ();Matrix ()_gb .Matrix ;SetMatrix (_ad _gb .Matrix );Translate (_adc ,_ge float64 );
Scale (_cd ,_gbe float64 );Rotate (_aa float64 );MoveTo (_gea ,_bf float64 );LineTo (_cc ,_ba float64 );CubicTo (_gba ,_gg ,_cdd ,_f ,_fb ,_bac float64 );QuadraticTo (_aac ,_ae ,_gf ,_cad float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();
ResetClip ();LineWidth ()float64 ;SetLineWidth (_fa float64 );SetLineCap (_ggg LineCap );SetLineJoin (_dc LineJoin );SetDash (_bcb ...float64 );SetDashOffset (_faa float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_gga ,_ga ,_af ,_dg float64 );
SetFillRGBA (_ff ,_gd ,_bg ,_cdb float64 );SetFillStyle (_cg Pattern );SetFillRule (_afd FillRule );SetStrokeRGBA (_cbd ,_cbdb ,_dgb ,_fg float64 );SetStrokeStyle (_fe Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_de string ,_gc _cb .Face ,_ec ,_gfc float64 );
MeasureString (_ed string ,_dgf _cb .Face )(_dcc ,_deg float64 );DrawRectangle (_dcf ,_dgbc ,_aaa ,_ag float64 );DrawImage (_db _a .Image ,_gbb ,_ce int );DrawImageAnchored (_gaa _a .Image ,_ee ,_ccb int ,_dgfg ,_fbg float64 );Height ()int ;Width ()int ;
};func (_ccd *TextState )ProcTf (font *TextFont ){_ccd .Tf =font };func (_gff *TextState )Translate (tx ,ty float64 ){_gff .Tm =_gff .Tm .Mult (_gb .TranslationMatrix (tx ,ty ));};type Gradient interface{Pattern ;AddColorStop (_eg float64 ,_ddc _c .Color );
};func (_cadd *TextState )ProcTStar (){_cadd .ProcTd (0,-_cadd .Tl )};type Pattern interface{ColorAt (_d ,_dd int )_c .Color ;};