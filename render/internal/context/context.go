//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_g "errors";_bag "github.com/golang/freetype/truetype";_ba "github.com/unidoc/unipdf/v3/core";_f "github.com/unidoc/unipdf/v3/internal/textencoding";_e "github.com/unidoc/unipdf/v3/internal/transform";_fc "github.com/unidoc/unipdf/v3/model";
_db "golang.org/x/image/font";_gc "image";_b "image/color";);type LineCap int ;type Pattern interface{ColorAt (_fa ,_eb int )_b .Color ;};type Context interface{Push ();Pop ();Matrix ()_e .Matrix ;SetMatrix (_ce _e .Matrix );Translate (_bg ,_gb float64 );
Scale (_ad ,_dd float64 );Rotate (_baa float64 );MoveTo (_dbe ,_gd float64 );LineTo (_bd ,_ac float64 );CubicTo (_df ,_ae ,_gdg ,_gg ,_ag ,_dbd float64 );QuadraticTo (_be ,_gcb ,_eg ,_dfd float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();
ResetClip ();LineWidth ()float64 ;SetLineWidth (_fg float64 );SetLineCap (_gf LineCap );SetLineJoin (_de LineJoin );SetDash (_fb ...float64 );SetDashOffset (_gcbf float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_dfc ,_gbc ,_bed ,_aeg float64 );
SetFillRGBA (_ge ,_aa ,_gcbd ,_ggg float64 );SetFillStyle (_ec Pattern );SetFillRule (_aca FillRule );SetStrokeRGBA (_dc ,_gef ,_cc ,_da float64 );SetStrokeStyle (_dac Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_ca string ,_acg _db .Face ,_fac ,_fcg float64 );
MeasureString (_bea string ,_fd _db .Face )(_ef ,_bdb float64 );DrawRectangle (_adf ,_bf ,_fdg ,_fdge float64 );DrawImage (_ded _gc .Image ,_gec ,_deb int );DrawImageAnchored (_ff _gc .Image ,_eca ,_bdbe int ,_bdc ,_ddd float64 );Height ()int ;Width ()int ;
};func (_fba *TextState )ProcQ (data []byte ,ctx Context ){_fba .ProcTStar ();_fba .ProcTj (data ,ctx )};func (_ecg *TextState )Translate (tx ,ty float64 ){_ecg .Tm =_ecg .Tm .Mult (_e .TranslationMatrix (tx ,ty ));};func NewTextFont (font *_fc .PdfFont ,size float64 )(*TextFont ,error ){_ed :=font .FontDescriptor ();
if _ed ==nil {return nil ,_g .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_ggd ,_geff :=_ba .GetStream (_ed .FontFile2 );if !_geff {return nil ,_g .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_cef ,_dbb :=_ba .DecodeStream (_ggd );if _dbb !=nil {return nil ,_dbb ;};_ddb ,_dbb :=_bag .Parse (_cef );if _dbb !=nil {return nil ,_dbb ;};return &TextFont {Font :font ,Size :size ,_cd :_ddb },nil ;};type TextFont struct{Font *_fc .PdfFont ;Size float64 ;
_cd *_bag .Font ;_gca *_fc .PdfFont ;};func (_efb *TextFont )NewFace (size float64 )_db .Face {return _bag .NewFace (_efb ._cd ,&_bag .Options {Size :size });};func (_beaf *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _aeb ,_cdc :=_beaf .Font .GetRuneMetrics (r );
_cdc &&_aeb .Wx !=0{return _aeb .Wx ,_aeb .Wy ,_cdc ;};if _beaf ._gca ==nil {return 0,0,false ;};_bdd ,_baaf :=_beaf ._gca .GetRuneMetrics (r );return _bdd .Wx ,_bdd .Wy ,_baaf &&_bdd .Wx !=0;};func (_cb *TextState )ProcTStar (){_cb .ProcTd (0,-_cb .Tl )};
type TextRenderingMode int ;func (_aga *TextFont )WithSize (size float64 ,originalFont *_fc .PdfFont )*TextFont {return &TextFont {Font :_aga .Font ,Size :size ,_cd :_aga ._cd ,_gca :originalFont };};func (_dddc *TextState )ProcTf (font *TextFont ){_dddc .Tf =font };
type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _e .Matrix ;Tlm _e .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};func NewTextState ()TextState {return TextState {Th :100,Tm :_e .IdentityMatrix (),Tlm :_e .IdentityMatrix ()};
};func (_ecd *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_ecd .Tw =aw ;_ecd .Tc =ac ;_ecd .ProcQ (data ,ctx );};type Gradient interface{Pattern ;AddColorStop (_a float64 ,_c _b .Color );};func (_dbg *TextState )ProcTd (tx ,ty float64 ){_dbg .Tlm .Concat (_e .TranslationMatrix (tx ,ty ));
_dbg .Tm =_dbg .Tlm .Clone ();};type LineJoin int ;func (_gdb *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_gdb .Tm =_e .NewMatrix (a ,b ,c ,d ,e ,f );_gdb .Tlm =_gdb .Tm .Clone ();};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_ccb ,_fdc :=_fc .NewPdfFontFromTTFFile (filePath );
if _fdc !=nil {return nil ,_fdc ;};return NewTextFont (_ccb ,size );};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_edd *TextFont )CharcodesToUnicode (charcodes []_f .CharCode )[]rune {if _edd ._gca !=nil {return _edd ._gca .CharcodesToUnicode (charcodes );
};return _edd .Font .CharcodesToUnicode (charcodes );};func (_ddf *TextFont )GetCharMetrics (code _f .CharCode )(float64 ,float64 ,bool ){if _ee ,_aac :=_ddf .Font .GetCharMetrics (code );_aac &&_ee .Wx !=0{return _ee .Wx ,_ee .Wy ,_aac ;};if _ddf ._gca ==nil {return 0,0,false ;
};_gecf ,_eef :=_ddf ._gca .GetCharMetrics (code );return _gecf .Wx ,_gecf .Wy ,_eef &&_gecf .Wx !=0;};func (_af *TextState )ProcTj (data []byte ,ctx Context ){_fca :=_af .Tf .Size ;_bc :=_af .Th /100.0;_dbde :=_af .GlobalScale ;_aed :=_e .NewMatrix (_fca *_bc ,0,0,_fca ,0,_af .Ts );
_dbdc :=ctx .Matrix ();_cec :=_dbdc .Clone ().Mult (_af .Tm .Clone ().Mult (_aed )).ScalingFactorY ();_gfg :=_af .Tf .NewFace (_cec );_fcge :=_af .Tf .BytesToCharcodes (data );_ece :=_af .Tf .CharcodesToUnicode (_fcge );for _gecd ,_afd :=range _ece {if _afd =='\x00'{continue ;
};_dbge :=_dbdc .Clone ().Mult (_af .Tm .Clone ().Mult (_aed ));_afc :=_dbge .ScalingFactorY ();_dbge =_dbge .Scale (1/_afc ,-1/_afc );if _af .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_dbge );ctx .DrawString (string (_afd ),_gfg ,0,0);ctx .SetMatrix (_dbdc );
};_dce :=0.0;if _afd ==' '{_dce =_af .Tw ;};_efe ,_ ,_afcg :=_af .Tf .GetRuneMetrics (_afd );if !_afcg &&_gecd < len (_fcge ){_efe ,_ ,_afcg =_af .Tf .GetCharMetrics (_fcge [_gecd ]);};if _afcg {_efe =_efe *0.001*_fca ;}else {_efe ,_ =ctx .MeasureString (string (_afd ),_gfg );
_efe =_efe /_dbde ;};_gfe :=(_efe +_af .Tc +_dce )*_bc ;_af .Tm =_af .Tm .Mult (_e .TranslationMatrix (_gfe ,0));};};func (_geg *TextState )Reset (){_geg .Tm =_e .IdentityMatrix ();_geg .Tlm =_e .IdentityMatrix ()};func (_aaf *TextState )ProcTD (tx ,ty float64 ){_aaf .Tl =-ty ;
_aaf .ProcTd (tx ,ty )};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;
);type FillRule int ;func (_dg *TextFont )BytesToCharcodes (data []byte )[]_f .CharCode {if _dg ._gca !=nil {return _dg ._gca .BytesToCharcodes (data );};return _dg .Font .BytesToCharcodes (data );};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);
