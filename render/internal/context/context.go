//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_gf "errors";_db "github.com/golang/freetype/truetype";_cg "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/internal/textencoding";_da "github.com/unidoc/unipdf/v3/internal/transform";_a "github.com/unidoc/unipdf/v3/model";
_c "golang.org/x/image/font";_d "image";_g "image/color";);func (_dabb *TextFont )CharcodesToUnicode (charcodes []_b .CharCode )[]rune {if _dabb ._fcc !=nil {return _dabb ._fcc .CharcodesToUnicode (charcodes );};return _dabb .Font .CharcodesToUnicode (charcodes );
};func (_ecd *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _edg ,_gg :=_ecd .Font .GetRuneMetrics (r );_gg &&_edg .Wx !=0{return _edg .Wx ,_edg .Wy ,_gg ;};if _ecd ._fcc ==nil {return 0,0,false ;};_bdd ,_cgb :=_ecd ._fcc .GetRuneMetrics (r );
return _bdd .Wx ,_bdd .Wy ,_cgb &&_bdd .Wx !=0;};type LineJoin int ;type FillRule int ;func (_de *TextFont )BytesToCharcodes (data []byte )[]_b .CharCode {if _de ._fcc !=nil {return _de ._fcc .BytesToCharcodes (data );};return _de .Font .BytesToCharcodes (data );
};type TextRenderingMode int ;func NewTextFont (font *_a .PdfFont ,size float64 )(*TextFont ,error ){_ebg :=font .FontDescriptor ();if _ebg ==nil {return nil ,_gf .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_gb ,_ba :=_cg .GetStream (_ebg .FontFile2 );if !_ba {return nil ,_gf .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_aaa ,_fg :=_cg .DecodeStream (_gb );
if _fg !=nil {return nil ,_fg ;};_abaa ,_fg :=_db .Parse (_aaa );if _fg !=nil {return nil ,_fg ;};return &TextFont {Font :font ,Size :size ,_gfac :_abaa },nil ;};func (_dbb *TextFont )GetCharMetrics (code _b .CharCode )(float64 ,float64 ,bool ){if _baf ,_ede :=_dbb .Font .GetCharMetrics (code );
_ede &&_baf .Wx !=0{return _baf .Wx ,_baf .Wy ,_ede ;};if _dbb ._fcc ==nil {return 0,0,false ;};_dcg ,_ded :=_dbb ._fcc .GetCharMetrics (code );return _dcg .Wx ,_dcg .Wy ,_ded &&_dcg .Wx !=0;};func (_ef *TextState )ProcTStar (){_ef .ProcTd (0,-_ef .Tl )};
const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);type Gradient interface{Pattern ;AddColorStop (_egf float64 ,_dbg _g .Color );};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;
TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_dbgb *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_dbgb .Tw =aw ;
_dbgb .Tc =ac ;_dbgb .ProcQ (data ,ctx );};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _da .Matrix ;Tlm _da .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};type LineCap int ;func (_ce *TextFont )WithSize (size float64 ,originalFont *_a .PdfFont )*TextFont {return &TextFont {Font :_ce .Font ,Size :size ,_gfac :_ce ._gfac ,_fcc :originalFont };
};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_ge ,_fgd :=_a .NewPdfFontFromTTFFile (filePath );if _fgd !=nil {return nil ,_fgd ;};return NewTextFont (_ge ,size );};func (_afe *TextState )ProcTd (tx ,ty float64 ){_afe .Tlm .Concat (_da .TranslationMatrix (tx ,ty ));
_afe .Tm =_afe .Tlm .Clone ();};func (_dbf *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_dbf .Tm =_da .NewMatrix (a ,b ,c ,d ,e ,f );_dbf .Tlm =_dbf .Tm .Clone ();};func (_dcgf *TextState )Reset (){_dcgf .Tm =_da .IdentityMatrix ();_dcgf .Tlm =_da .IdentityMatrix ()};
func (_eee *TextState )ProcTD (tx ,ty float64 ){_eee .Tl =-ty ;_eee .ProcTd (tx ,ty )};func (_dee *TextState )Translate (tx ,ty float64 ){_dee .Tm =_dee .Tm .Mult (_da .TranslationMatrix (tx ,ty ));};type Pattern interface{ColorAt (_dag ,_eg int )_g .Color ;
};func (_ead *TextState )ProcQ (data []byte ,ctx Context ){_ead .ProcTStar ();_ead .ProcTj (data ,ctx )};func NewTextState ()TextState {return TextState {Th :100,Tm :_da .IdentityMatrix (),Tlm :_da .IdentityMatrix ()};};type Context interface{Push ();Pop ();
Matrix ()_da .Matrix ;SetMatrix (_bd _da .Matrix );Translate (_bc ,_cgg float64 );Scale (_f ,_fb float64 );Rotate (_dc float64 );MoveTo (_egc ,_dba float64 );LineTo (_ca ,_gfe float64 );CubicTo (_ga ,_aa ,_cf ,_bg ,_ec ,_gfa float64 );QuadraticTo (_bb ,_bde ,_fc ,_gaa float64 );
NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_bf float64 );SetLineCap (_ac LineCap );SetLineJoin (_acg LineJoin );SetDash (_ff ...float64 );SetDashOffset (_cb float64 );Fill ();FillPreserve ();
Stroke ();StrokePreserve ();SetRGBA (_bgd ,_bcc ,_dbgd ,_ab float64 );SetFillRGBA (_ffd ,_bgb ,_bcd ,_ee float64 );SetFillStyle (_ed Pattern );SetFillRule (_fff FillRule );SetStrokeRGBA (_gfea ,_bdf ,_bga ,_gd float64 );SetStrokeStyle (_ea Pattern );FillPattern ()Pattern ;
StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_fd string ,_fa _c .Face ,_fbe ,_egb float64 );MeasureString (_ag string ,_aba _c .Face )(_be ,_dab float64 );DrawRectangle (_df ,_dd ,_bbe ,_cgc float64 );DrawImage (_fdc _d .Image ,_dbgc ,_ecc int );
DrawImageAnchored (_cbc _d .Image ,_fde ,_dfg int ,_af ,_eb float64 );Height ()int ;Width ()int ;};func (_egd *TextFont )NewFace (size float64 )_c .Face {return _db .NewFace (_egd ._gfac ,&_db .Options {Size :size });};const (FillRuleWinding FillRule =iota ;
FillRuleEvenOdd ;);func (_dbc *TextState )ProcTj (data []byte ,ctx Context ){_fga :=_dbc .Tf .Size ;_gfeb :=_dbc .Th /100.0;_cga :=_dbc .GlobalScale ;_aaae :=_da .NewMatrix (_fga *_gfeb ,0,0,_fga ,0,_dbc .Ts );_eab :=ctx .Matrix ();_gea :=_eab .Clone ().Mult (_dbc .Tm .Clone ().Mult (_aaae )).ScalingFactorY ();
_eba :=_dbc .Tf .NewFace (_gea );_ad :=_dbc .Tf .BytesToCharcodes (data );_gbf :=_dbc .Tf .CharcodesToUnicode (_ad );for _agc ,_eda :=range _gbf {if _eda =='\x00'{continue ;};_gc :=_eab .Clone ().Mult (_dbc .Tm .Clone ().Mult (_aaae ));_dea :=_gc .ScalingFactorY ();
_gc =_gc .Scale (1/_dea ,-1/_dea );if _dbc .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_gc );ctx .DrawString (string (_eda ),_eba ,0,0);ctx .SetMatrix (_eab );};_agf :=0.0;if _eda ==' '{_agf =_dbc .Tw ;};_eca ,_ ,_ebf :=_dbc .Tf .GetRuneMetrics (_eda );
if !_ebf &&_agc < len (_ad ){_eca ,_ ,_ebf =_dbc .Tf .GetCharMetrics (_ad [_agc ]);};if _ebf {_eca =_eca *0.001*_fga ;}else {_eca ,_ =ctx .MeasureString (string (_eda ),_eba );_eca =_eca /_cga ;};_bafc :=(_eca +_dbc .Tc +_agf )*_gfeb ;_dbc .Tm =_dbc .Tm .Mult (_da .TranslationMatrix (_bafc ,0));
};};func (_dfgg *TextState )ProcTf (font *TextFont ){_dfgg .Tf =font };type TextFont struct{Font *_a .PdfFont ;Size float64 ;_gfac *_db .Font ;_fcc *_a .PdfFont ;};