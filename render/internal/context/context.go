//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_c "errors";_cc "github.com/golang/freetype/truetype";_e "github.com/unidoc/unipdf/v3/core";_g "github.com/unidoc/unipdf/v3/internal/textencoding";_ca "github.com/unidoc/unipdf/v3/internal/transform";_fd "github.com/unidoc/unipdf/v3/model";_ba "golang.org/x/image/font";_cb "image";_b "image/color";);type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _ca .Matrix ;Tlm _ca .Matrix ;};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);type LineJoin int ;const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_acec ,_eeg :=_fd .NewPdfFontFromTTFFile (filePath );if _eeg !=nil {return nil ,_eeg ;};return NewTextFont (_acec ,size );};type Gradient interface{Pattern ;AddColorStop (_ab float64 ,_ff _b .Color );};func (_gad *TextState )Reset (){_gad .Tm =_ca .IdentityMatrix ();_gad .Tlm =_ca .IdentityMatrix ()};func (_be *TextState )ProcTd (tx ,ty float64 ){_be .Tlm .Concat (_ca .TranslationMatrix (tx ,-ty ));_be .Tm =_be .Tlm .Clone ();};func NewTextFont (font *_fd .PdfFont ,size float64 )(*TextFont ,error ){_bdb :=font .FontDescriptor ();if _bdb ==nil {return nil ,_c .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_dbfd ,_eba :=_e .GetStream (_bdb .FontFile2 );if !_eba {return nil ,_c .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_gcg ,_ggf :=_e .DecodeStream (_dbfd );if _ggf !=nil {return nil ,_ggf ;};_ge ,_ggf :=_cc .Parse (_gcg );if _ggf !=nil {return nil ,_ggf ;};if size <=1{size =10;};return &TextFont {Font :font ,Face :_cc .NewFace (_ge ,&_cc .Options {Size :size }),Size :size ,_fb :_ge },nil ;};func (_ecb *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _def ,_bc :=_ecb .Font .GetRuneMetrics (r );_bc &&_def .Wx !=0{return _def .Wx ,_def .Wy ,_bc ;};if _ecb ._dbf ==nil {return 0,0,false ;};_aced ,_agc :=_ecb ._dbf .GetRuneMetrics (r );return _aced .Wx ,_aced .Wy ,_agc &&_aced .Wx !=0;};type Context interface{Push ();Pop ();Matrix ()_ca .Matrix ;SetMatrix (_gd _ca .Matrix );Translate (_dc ,_dd float64 );Scale (_ee ,_gc float64 );Rotate (_gf float64 );MoveTo (_ffc ,_bg float64 );LineTo (_ag ,_fa float64 );CubicTo (_de ,_ef ,_dea ,_eeb ,_dcb ,_ffg float64 );QuadraticTo (_fe ,_cab ,_eb ,_cbc float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_gde float64 );SetLineCap (_eea LineCap );SetLineJoin (_fg LineJoin );SetDash (_ebg ...float64 );SetDashOffset (_bf float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_gb ,_dcd ,_db ,_bgg float64 );SetFillRGBA (_ce ,_gbd ,_cae ,_gg float64 );SetFillStyle (_dbg Pattern );SetFillRule (_ccc FillRule );SetStrokeRGBA (_cabd ,_cbg ,_fdd ,_age float64 );SetStrokeStyle (_dca Pattern );TextState ()*TextState ;DrawString (_ac string ,_dcg ,_bgb float64 );MeasureString (_bfb string )(_ace ,_dce float64 );DrawRectangle (_bd ,_cg ,_ec ,_df float64 );DrawImage (_feg _cb .Image ,_cgf ,_ffb int );DrawImageAnchored (_acg _cb .Image ,_bdg ,_bdgc int ,_cd ,_acga float64 );Height ()int ;Width ()int ;};type LineCap int ;func (_caea *TextFont )BytesToCharcodes (data []byte )[]_g .CharCode {if _caea ._dbf !=nil {return _caea ._dbf .BytesToCharcodes (data );};return _caea .Font .BytesToCharcodes (data );};func (_ggc *TextState )ProcTj (data []byte ,ctx Context ){_fae :=_ggc .Tf .Size ;_bad :=_ggc .Th /100.0;_acb :=_ca .NewMatrix (_fae *_bad ,0,0,_fae ,0,_ggc .Ts );_cbgb :=_ggc .Tf .CharcodesToUnicode (_ggc .Tf .BytesToCharcodes (data ));for _ ,_defd :=range _cbgb {if _defd =='\x00'{continue ;};_af :=_ggc .Tm .Clone ();_ggc .Tm .Concat (_acb );_ggcd ,_fee :=_ggc .Tm .Transform (0,0);ctx .Scale (1,-1);ctx .DrawString (string (_defd ),_ggcd ,_fee );ctx .Scale (1,-1);_bb :=0.0;if _defd ==' '{_bb =_ggc .Tw ;};var _acf float64 ;if _fgf ,_ ,_fab :=_ggc .Tf .GetRuneMetrics (_defd );_fab {_acf =_fgf *0.001*_fae ;}else {_acf ,_ =ctx .MeasureString (string (_defd ));};_cabf :=(_acf +_ggc .Tc +_bb )*_bad ;_ggc .Tm =_ca .TranslationMatrix (_cabf ,0).Mult (_af );};};func (_eg *TextFont )CharcodesToUnicode (charcodes []_g .CharCode )[]rune {if _eg ._dbf !=nil {return _eg ._dbf .CharcodesToUnicode (charcodes );};return _eg .Font .CharcodesToUnicode (charcodes );};type FillRule int ;const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);type TextFont struct{Font *_fd .PdfFont ;Face _ba .Face ;Size float64 ;_fb *_cc .Font ;_dbf *_fd .PdfFont ;};func (_fgd *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_fgd .Tw =aw ;_fgd .Tc =ac ;_fgd .ProcQ (data ,ctx );};func (_ea *TextState )Translate (tx ,ty float64 ){_ea .Tm =_ca .TranslationMatrix (tx ,ty ).Mult (_ea .Tm )};func (_gbg *TextFont )WithSize (size float64 ,originalFont *_fd .PdfFont )*TextFont {if size <=1{size =10;};return &TextFont {Font :_gbg .Font ,Face :_cc .NewFace (_gbg ._fb ,&_cc .Options {Size :size }),Size :size ,_fb :_gbg ._fb ,_dbf :originalFont };};func NewTextState ()*TextState {return &TextState {Th :100,Tm :_ca .IdentityMatrix (),Tlm :_ca .IdentityMatrix ()};};func (_ddg *TextState )ProcTStar (){_ddg .ProcTd (0,-_ddg .Tl )};func (_ad *TextFont )GetCharMetrics (code _g .CharCode )(float64 ,float64 ,bool ){if _ga ,_bdc :=_ad .Font .GetCharMetrics (code );_bdc &&_ga .Wx !=0{return _ga .Wx ,_ga .Wy ,_bdc ;};if _ad ._dbf ==nil {return 0,0,false ;};_gaa ,_dda :=_ad ._dbf .GetCharMetrics (code );return _gaa .Wx ,_gaa .Wy ,_dda &&_gaa .Wx !=0;};func (_gfg *TextState )ProcTf (font *TextFont ){_gfg .Tf =font };func (_gfc *TextState )ProcQ (data []byte ,ctx Context ){_gfc .ProcTStar ();_gfc .ProcTj (data ,ctx )};type Pattern interface{ColorAt (_d ,_a int )_b .Color ;};func (_bfc *TextState )ProcTD (tx ,ty float64 ){_bfc .Tl =-ty ;_bfc .ProcTd (tx ,ty )};func (_eff *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_eff .Tm =_ca .NewMatrix (a ,b ,c ,d ,e ,-f );_eff .Tlm =_eff .Tm .Clone ();};