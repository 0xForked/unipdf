//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_b "errors";_g "github.com/golang/freetype/truetype";_eb "github.com/unidoc/unipdf/v3/core";_f "github.com/unidoc/unipdf/v3/internal/textencoding";_ded "github.com/unidoc/unipdf/v3/internal/transform";_db "github.com/unidoc/unipdf/v3/model";_dg "golang.org/x/image/font";_de "image";_e "image/color";);const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);type LineCap int ;func (_ebd *TextState )ProcTD (tx ,ty float64 ){_ebd .Tl =-ty ;_ebd .ProcTd (tx ,ty )};func (_ed *TextFont )WithSize (size float64 ,originalFont *_db .PdfFont )*TextFont {if size <=1{size =10;};return &TextFont {Font :_ed .Font ,Face :_g .NewFace (_ed ._cf ,&_g .Options {Size :size }),Size :size ,_cf :_ed ._cf ,_ga :originalFont };};func (_fgc *TextFont )GetCharMetrics (code _f .CharCode )(float64 ,float64 ,bool ){if _be ,_adc :=_fgc .Font .GetCharMetrics (code );_adc &&_be .Wx !=0{return _be .Wx ,_be .Wy ,_adc ;};if _fgc ._ga ==nil {return 0,0,false ;};_fag ,_aac :=_fgc ._ga .GetCharMetrics (code );return _fag .Wx ,_fag .Wy ,_aac &&_fag .Wx !=0;};type Pattern interface{ColorAt (_gg ,_a int )_e .Color ;};func (_fbg *TextState )ProcQ (data []byte ,ctx Context ){_fbg .ProcTStar ();_fbg .ProcTj (data ,ctx )};type Gradient interface{Pattern ;AddColorStop (_ae float64 ,_ff _e .Color );};type Context interface{Push ();Pop ();Matrix ()_ded .Matrix ;SetMatrix (_eg _ded .Matrix );Translate (_dd ,_c float64 );Scale (_ag ,_ebc float64 );Rotate (_fb float64 );MoveTo (_dgd ,_da float64 );LineTo (_dc ,_df float64 );CubicTo (_dedd ,_af ,_aa ,_fba ,_gd ,_egd float64 );QuadraticTo (_aaf ,_dea ,_dde ,_bf float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_cd float64 );SetLineCap (_gge LineCap );SetLineJoin (_dbb LineJoin );SetDash (_ee ...float64 );SetDashOffset (_ef float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_gf ,_cg ,_dgg ,_ac float64 );SetFillRGBA (_dgdg ,_dag ,_acd ,_gff float64 );SetFillStyle (_aff Pattern );SetFillRule (_dgdf FillRule );SetStrokeRGBA (_ggea ,_cgd ,_ge ,_bg float64 );SetStrokeStyle (_gdb Pattern );TextState ()*TextState ;DrawString (_bc string ,_gee ,_ec float64 );MeasureString (_aef string )(_ad ,_bcf float64 );DrawRectangle (_gdg ,_gc ,_fbd ,_gdgb float64 );DrawImage (_geb _de .Image ,_fg ,_fd int );DrawImageAnchored (_dee _de .Image ,_ggc ,_deb int ,_gef ,_gdd float64 );Height ()int ;Width ()int ;};func (_faf *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_faf .Tw =aw ;_faf .Tc =ac ;_faf .ProcQ (data ,ctx );};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_age ,_bd :=_db .NewPdfFontFromTTFFile (filePath );if _bd !=nil {return nil ,_bd ;};return NewTextFont (_age ,size );};func (_fdd *TextFont )BytesToCharcodes (data []byte )[]_f .CharCode {if _fdd ._ga !=nil {return _fdd ._ga .BytesToCharcodes (data );};return _fdd .Font .BytesToCharcodes (data );};func (_fda *TextState )ProcTd (tx ,ty float64 ){_fda .Tlm .Concat (_ded .TranslationMatrix (tx ,-ty ));_fda .Tm =_fda .Tlm .Clone ();};func (_ggb *TextFont )CharcodesToUnicode (charcodes []_f .CharCode )[]rune {if _ggb ._ga !=nil {return _ggb ._ga .CharcodesToUnicode (charcodes );};return _ggb .Font .CharcodesToUnicode (charcodes );};func (_gaf *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _fge ,_bdc :=_gaf .Font .GetRuneMetrics (r );_bdc &&_fge .Wx !=0{return _fge .Wx ,_fge .Wy ,_bdc ;};if _gaf ._ga ==nil {return 0,0,false ;};_fgcc ,_dac :=_gaf ._ga .GetRuneMetrics (r );return _fgcc .Wx ,_fgcc .Wy ,_dac &&_fgcc .Wx !=0;};func NewTextFont (font *_db .PdfFont ,size float64 )(*TextFont ,error ){_ffd :=font .FontDescriptor ();if _ffd ==nil {return nil ,_b .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_aeb ,_fa :=_eb .GetStream (_ffd .FontFile2 );if !_fa {return nil ,_b .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_cc ,_fc :=_eb .DecodeStream (_aeb );if _fc !=nil {return nil ,_fc ;};_gebf ,_fc :=_g .Parse (_cc );if _fc !=nil {return nil ,_fc ;};if size <=1{size =10;};return &TextFont {Font :font ,Face :_g .NewFace (_gebf ,&_g .Options {Size :size }),Size :size ,_cf :_gebf },nil ;};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_eff *TextState )ProcTStar (){_eff .ProcTd (0,-_eff .Tl )};type FillRule int ;const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_ca *TextState )ProcTj (data []byte ,ctx Context ){_effc :=_ca .Tf .Size ;_aebf :=_ca .Th /100.0;_cdf :=_ded .NewMatrix (_effc *_aebf ,0,0,_effc ,0,_ca .Ts );_dga :=_ca .Tf .CharcodesToUnicode (_ca .Tf .BytesToCharcodes (data ));for _ ,_fdb :=range _dga {if _fdb =='\x00'{continue ;};_ddb :=_ca .Tm .Clone ();_ca .Tm .Concat (_cdf );_ece ,_gdc :=_ca .Tm .Transform (0,0);ctx .Scale (1,-1);ctx .DrawString (string (_fdb ),_ece ,_gdc );ctx .Scale (1,-1);_dba :=0.0;if _fdb ==' '{_dba =_ca .Tw ;};var _gb float64 ;if _bcfa ,_ ,_gab :=_ca .Tf .GetRuneMetrics (_fdb );_gab {_gb =_bcfa *0.001*_effc ;}else {_gb ,_ =ctx .MeasureString (string (_fdb ));};_eeg :=(_gb +_ca .Tc +_dba )*_aebf ;_ca .Tm =_ded .TranslationMatrix (_eeg ,0).Mult (_ddb );};};func NewTextState ()*TextState {return &TextState {Th :100,Tm :_ded .IdentityMatrix (),Tlm :_ded .IdentityMatrix ()};};func (_fbe *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_fbe .Tm =_ded .NewMatrix (a ,b ,c ,d ,e ,-f );_fbe .Tlm =_fbe .Tm .Clone ();};type LineJoin int ;func (_fbab *TextState )Reset (){_fbab .Tm =_ded .IdentityMatrix ();_fbab .Tlm =_ded .IdentityMatrix ()};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _ded .Matrix ;Tlm _ded .Matrix ;};func (_dda *TextState )ProcTf (font *TextFont ){_dda .Tf =font };func (_beg *TextState )Translate (tx ,ty float64 ){_beg .Tm =_ded .TranslationMatrix (tx ,ty ).Mult (_beg .Tm );};type TextFont struct{Font *_db .PdfFont ;Face _dg .Face ;Size float64 ;_cf *_g .Font ;_ga *_db .PdfFont ;};