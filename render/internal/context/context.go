//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_a "errors";_f "github.com/unidoc/freetype/truetype";_c "github.com/unidoc/unipdf/v3/core";_bf "github.com/unidoc/unipdf/v3/internal/textencoding";_b "github.com/unidoc/unipdf/v3/internal/transform";_d "github.com/unidoc/unipdf/v3/model";
_ef "golang.org/x/image/font";_ae "image";_e "image/color";);type Gradient interface{Pattern ;AddColorStop (_af float64 ,_bb _e .Color );};type FillRule int ;const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;
TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);type TextRenderingMode int ;func (_eec *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_eec .Tm =_b .NewMatrix (a ,b ,c ,d ,e ,f );
_eec .Tlm =_eec .Tm .Clone ();};func (_aca *TextFont )CharcodeToRunes (charcode _bf .CharCode )(_bf .CharCode ,[]rune ){_gfb :=[]_bf .CharCode {charcode };if _aca ._bacb ==nil ||_aca ._bacb ==_aca .Font {if _aca .Font .IsSimple ()&&_aca ._agae !=nil {if _adc :=_aca ._agae .Index (rune (charcode ));
_adc > 0{return charcode ,[]rune {rune (charcode )};};};return charcode ,_aca .Font .CharcodesToUnicode (_gfb );};_ebe :=_aca ._bacb .CharcodesToUnicode (_gfb );_gfa ,_ :=_aca .Font .RunesToCharcodeBytes (_ebe );_gfbe :=_aca .Font .BytesToCharcodes (_gfa );
_ebf :=charcode ;if len (_gfbe )> 0&&_gfbe [0]!=0{_ebf =_gfbe [0];};return _ebf ,_ebe ;};type LineCap int ;func (_fcb *TextState )ProcTD (tx ,ty float64 ){_fcb .Tl =-ty ;_fcb .ProcTd (tx ,ty )};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_fca *TextFont )WithSize (size float64 ,originalFont *_d .PdfFont )*TextFont {return &TextFont {Font :_fca .Font ,Size :size ,_agae :_fca ._agae ,_bacb :originalFont };
};type Pattern interface{ColorAt (_ce ,_cc int )_e .Color ;};func (_adcd *TextState )ProcTd (tx ,ty float64 ){_adcd .Tlm .Concat (_b .TranslationMatrix (tx ,ty ));_adcd .Tm =_adcd .Tlm .Clone ();};func (_afg *TextFont )BytesToCharcodes (data []byte )[]_bf .CharCode {if _afg ._bacb !=nil {return _afg ._bacb .BytesToCharcodes (data );
};return _afg .Font .BytesToCharcodes (data );};type Context interface{Push ();Pop ();Matrix ()_b .Matrix ;SetMatrix (_gd _b .Matrix );Translate (_dc ,_fa float64 );Scale (_dd ,_ac float64 );Rotate (_ag float64 );MoveTo (_fe ,_feg float64 );LineTo (_dcf ,_dce float64 );
CubicTo (_agg ,_aeg ,_bg ,_gc ,_ccd ,_cg float64 );QuadraticTo (_df ,_cca ,_ccab ,_fb float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_gca float64 );SetLineCap (_acf LineCap );SetLineJoin (_gf LineJoin );
SetDash (_afc ...float64 );SetDashOffset (_ad float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_cce ,_be ,_fg ,_ee float64 );SetFillRGBA (_ba ,_faa ,_ec ,_gg float64 );SetFillStyle (_dcg Pattern );SetFillRule (_beb FillRule );SetStrokeRGBA (_eg ,_eb ,_ga ,_fc float64 );
SetStrokeStyle (_efc Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_ccdb string ,_bc _ef .Face ,_ccc ,_gdb float64 );MeasureString (_dff string ,_bbb _ef .Face )(_ea ,_cd float64 );DrawRectangle (_aga ,_ccg ,_ff ,_ed float64 );
DrawImage (_aa _ae .Image ,_ab ,_bac int );DrawImageAnchored (_ffd _ae .Image ,_edb ,_bee int ,_gfg ,_bebf float64 );Height ()int ;Width ()int ;};func (_edf *TextState )ProcTStar (){_edf .ProcTd (0,-_edf .Tl )};func (_eag *TextState )ProcTj (data []byte ,ctx Context ){_cf :=_eag .Tf .Size ;
_eed :=_eag .Th /100.0;_cdg :=_eag .GlobalScale ;_gga :=_b .NewMatrix (_cf *_eed ,0,0,_cf ,0,_eag .Ts );_gagg :=ctx .Matrix ();_fbf :=_gagg .Clone ().Mult (_eag .Tm .Clone ().Mult (_gga )).ScalingFactorY ();_aab :=_eag .Tf .NewFace (_fbf );_efd :=_eag .Tf .BytesToCharcodes (data );
for _ ,_bga :=range _efd {_bgc ,_dae :=_eag .Tf .CharcodeToRunes (_bga );_aba :=string (_dae );if _aba =="\u0000"{continue ;};_fbfa :=_gagg .Clone ().Mult (_eag .Tm .Clone ().Mult (_gga ));_cbd :=_fbfa .ScalingFactorY ();_fbfa =_fbfa .Scale (1/_cbd ,-1/_cbd );
if _eag .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_fbfa );ctx .DrawString (_aba ,_aab ,0,0);ctx .SetMatrix (_gagg );};_cbg :=0.0;if _aba =="\u0020"{_cbg =_eag .Tw ;};_eda ,_ ,_fd :=_eag .Tf .GetCharMetrics (_bgc );if _fd {_eda =_eda *0.001*_cf ;
}else {_eda ,_ =ctx .MeasureString (_aba ,_aab );_eda =_eda /_cdg ;};_cdd :=(_eda +_eag .Tc +_cbg )*_eed ;_eag .Tm =_eag .Tm .Mult (_b .TranslationMatrix (_cdd ,0));};};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_faf *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_faf .Tw =aw ;
_faf .Tc =ac ;_faf .ProcQ (data ,ctx );};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _b .Matrix ;Tlm _b .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};type TextFont struct{Font *_d .PdfFont ;
Size float64 ;_agae *_f .Font ;_bacb *_d .PdfFont ;};func NewTextFont (font *_d .PdfFont ,size float64 )(*TextFont ,error ){_cb :=font .FontDescriptor ();if _cb ==nil {return nil ,_a .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_aed ,_da :=_c .GetStream (_cb .FontFile2 );if !_da {return nil ,_a .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_bbc ,_ega :=_c .DecodeStream (_aed );
if _ega !=nil {return nil ,_ega ;};_gag ,_ega :=_f .Parse (_bbc );if _ega !=nil {return nil ,_ega ;};return &TextFont {Font :font ,Size :size ,_agae :_gag },nil ;};func (_efa *TextState )Reset (){_efa .Tm =_b .IdentityMatrix ();_efa .Tlm =_b .IdentityMatrix ()};
func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_fac ,_ca :=_d .NewPdfFontFromTTFFile (filePath );if _ca !=nil {return nil ,_ca ;};return NewTextFont (_fac ,size );};func (_bbd *TextState )Translate (tx ,ty float64 ){_bbd .Tm =_bbd .Tm .Mult (_b .TranslationMatrix (tx ,ty ));
};func (_dag *TextState )ProcQ (data []byte ,ctx Context ){_dag .ProcTStar ();_dag .ProcTj (data ,ctx )};func NewTextState ()TextState {return TextState {Th :100,Tm :_b .IdentityMatrix (),Tlm :_b .IdentityMatrix ()};};func (_dg *TextFont )GetCharMetrics (code _bf .CharCode )(float64 ,float64 ,bool ){if _agge ,_gac :=_dg .Font .GetCharMetrics (code );
_gac &&_agge .Wx !=0{return _agge .Wx ,_agge .Wy ,_gac ;};if _dg ._bacb ==nil {return 0,0,false ;};_aedb ,_faad :=_dg ._bacb .GetCharMetrics (code );return _aedb .Wx ,_aedb .Wy ,_faad &&_aedb .Wx !=0;};func (_cba *TextFont )NewFace (size float64 )_ef .Face {return _f .NewFace (_cba ._agae ,&_f .Options {Size :size });
};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);type LineJoin int ;func (_cddd *TextState )ProcTf (font *TextFont ){_cddd .Tf =font };