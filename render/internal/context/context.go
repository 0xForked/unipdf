//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_e "errors";_cf "github.com/golang/freetype/truetype";_aa "github.com/unidoc/unipdf/v3/core";_d "github.com/unidoc/unipdf/v3/internal/textencoding";_ca "github.com/unidoc/unipdf/v3/internal/transform";_eb "github.com/unidoc/unipdf/v3/model";
_g "golang.org/x/image/font";_c "image";_b "image/color";);const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_eaf *TextState )ProcTD (tx ,ty float64 ){_eaf .Tl =-ty ;_eaf .ProcTd (tx ,ty )};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;
Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _ca .Matrix ;Tlm _ca .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};type Pattern interface{ColorAt (_ge ,_f int )_b .Color ;};func (_fga *TextState )ProcTd (tx ,ty float64 ){_fga .Tlm .Concat (_ca .TranslationMatrix (tx ,ty ));
_fga .Tm =_fga .Tlm .Clone ();};func (_bg *TextFont )NewFace (size float64 )_g .Face {return _cf .NewFace (_bg ._dac ,&_cf .Options {Size :size });};func (_aba *TextState )ProcTStar (){_aba .ProcTd (0,-_aba .Tl )};type TextFont struct{Font *_eb .PdfFont ;
Size float64 ;_dac *_cf .Font ;_edb *_eb .PdfFont ;};func (_dgd *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _cgc ,_ab :=_dgd .Font .GetRuneMetrics (r );_ab &&_cgc .Wx !=0{return _cgc .Wx ,_cgc .Wy ,_ab ;};if _dgd ._edb ==nil {return 0,0,false ;
};_dfca ,_dbb :=_dgd ._edb .GetRuneMetrics (r );return _dfca .Wx ,_dfca .Wy ,_dbb &&_dfca .Wx !=0;};type Context interface{Push ();Pop ();Matrix ()_ca .Matrix ;SetMatrix (_gga _ca .Matrix );Translate (_ggd ,_cb float64 );Scale (_eba ,_dd float64 );Rotate (_fb float64 );
MoveTo (_dg ,_ba float64 );LineTo (_df ,_eg float64 );CubicTo (_ac ,_ece ,_ad ,_gb ,_fg ,_bf float64 );QuadraticTo (_dfg ,_fe ,_da ,_bc float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_ea float64 );
SetLineCap (_cc LineCap );SetLineJoin (_ccg LineJoin );SetDash (_dfa ...float64 );SetDashOffset (_bfb float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_cg ,_ege ,_eab ,_fee float64 );SetFillRGBA (_gef ,_ed ,_fbe ,_fa float64 );SetFillStyle (_ccgb Pattern );
SetFillRule (_cd FillRule );SetStrokeRGBA (_aag ,_bag ,_cgb ,_db float64 );SetStrokeStyle (_ddb Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_acb string ,_ff _g .Face ,_aad ,_ccgc float64 );MeasureString (_ga string ,_ccd _g .Face )(_cae ,_fd float64 );
DrawRectangle (_gbd ,_af ,_dbe ,_eac float64 );DrawImage (_cdb _c .Image ,_dc ,_dfc int );DrawImageAnchored (_ged _c .Image ,_fed ,_gc int ,_fc ,_bce float64 );Height ()int ;Width ()int ;};type FillRule int ;func (_de *TextFont )BytesToCharcodes (data []byte )[]_d .CharCode {if _de ._edb !=nil {return _de ._edb .BytesToCharcodes (data );
};return _de .Font .BytesToCharcodes (data );};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;
TextRenderingModeClip ;);type TextRenderingMode int ;func (_fgf *TextState )ProcTj (data []byte ,ctx Context ){_dfgc :=_fgf .Tf .Size ;_gbc :=_fgf .Th /100.0;_ebg :=_fgf .GlobalScale ;_edd :=_ca .NewMatrix (_dfgc *_gbc ,0,0,_dfgc ,0,_fgf .Ts );_acf :=ctx .Matrix ();
_gedc :=_acf .Clone ().Mult (_fgf .Tm .Clone ().Mult (_edd )).ScalingFactorY ();_ef :=_fgf .Tf .NewFace (_gedc );_gec :=_fgf .Tf .BytesToCharcodes (data );_agf :=_fgf .Tf .CharcodesToUnicode (_gec );for _fef ,_cbe :=range _agf {if _cbe =='\x00'{continue ;
};_caa :=_acf .Clone ().Mult (_fgf .Tm .Clone ().Mult (_edd ));_fcc :=_caa .ScalingFactorY ();_caa =_caa .Scale (1/_fcc ,-1/_fcc );if _fgf .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_caa );ctx .DrawString (string (_cbe ),_ef ,0,0);ctx .SetMatrix (_acf );
};_cba :=0.0;if _cbe ==' '{_cba =_fgf .Tw ;};_dag ,_ ,_gce :=_fgf .Tf .GetRuneMetrics (_cbe );if !_gce &&_fef < len (_gec ){_dag ,_ ,_gce =_fgf .Tf .GetCharMetrics (_gec [_fef ]);};if _gce {_dag =_dag *0.001*_dfgc ;}else {_dag ,_ =ctx .MeasureString (string (_cbe ),_ef );
_dag =_dag /_ebg ;};_cac :=(_dag +_fgf .Tc +_cba )*_gbc ;_fgf .Tm =_fgf .Tm .Mult (_ca .TranslationMatrix (_cac ,0));};};func (_fedg *TextState )ProcTf (font *TextFont ){_fedg .Tf =font };func NewTextFont (font *_eb .PdfFont ,size float64 )(*TextFont ,error ){_bd :=font .FontDescriptor ();
if _bd ==nil {return nil ,_e .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_ag ,_fbb :=_aa .GetStream (_bd .FontFile2 );if !_fbb {return nil ,_e .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_dcf ,_dce :=_aa .DecodeStream (_ag );if _dce !=nil {return nil ,_dce ;};_cgf ,_dce :=_cf .Parse (_dcf );if _dce !=nil {return nil ,_dce ;};return &TextFont {Font :font ,Size :size ,_dac :_cgf },nil ;};func (_fde *TextFont )GetCharMetrics (code _d .CharCode )(float64 ,float64 ,bool ){if _fbc ,_egb :=_fde .Font .GetCharMetrics (code );
_egb &&_fbc .Wx !=0{return _fbc .Wx ,_fbc .Wy ,_egb ;};if _fde ._edb ==nil {return 0,0,false ;};_bca ,_ebc :=_fde ._edb .GetCharMetrics (code );return _bca .Wx ,_bca .Wy ,_ebc &&_bca .Wx !=0;};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_bcg *TextState )Translate (tx ,ty float64 ){_bcg .Tm =_bcg .Tm .Mult (_ca .TranslationMatrix (tx ,ty ));
};func NewTextState ()TextState {return TextState {Th :100,Tm :_ca .IdentityMatrix (),Tlm :_ca .IdentityMatrix ()};};func (_cdf *TextState )ProcQ (data []byte ,ctx Context ){_cdf .ProcTStar ();_cdf .ProcTj (data ,ctx )};func (_bgc *TextFont )CharcodesToUnicode (charcodes []_d .CharCode )[]rune {if _bgc ._edb !=nil {return _bgc ._edb .CharcodesToUnicode (charcodes );
};return _bgc .Font .CharcodesToUnicode (charcodes );};type Gradient interface{Pattern ;AddColorStop (_ec float64 ,_gg _b .Color );};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_ggg ,_fbg :=_eb .NewPdfFontFromTTFFile (filePath );
if _fbg !=nil {return nil ,_fbg ;};return NewTextFont (_ggg ,size );};type LineCap int ;type LineJoin int ;func (_gad *TextFont )WithSize (size float64 ,originalFont *_eb .PdfFont )*TextFont {return &TextFont {Font :_gad .Font ,Size :size ,_dac :_gad ._dac ,_edb :originalFont };
};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_fda *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_fda .Tw =aw ;_fda .Tc =ac ;_fda .ProcQ (data ,ctx );};func (_dga *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_dga .Tm =_ca .NewMatrix (a ,b ,c ,d ,e ,f );
_dga .Tlm =_dga .Tm .Clone ();};func (_bff *TextState )Reset (){_bff .Tm =_ca .IdentityMatrix ();_bff .Tlm =_ca .IdentityMatrix ()};