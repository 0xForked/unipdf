//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_f "errors";_gb "github.com/unidoc/freetype/truetype";_ga "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/internal/textencoding";_ce "github.com/unidoc/unipdf/v3/internal/transform";_bb "github.com/unidoc/unipdf/v3/model";
_fe "golang.org/x/image/font";_fd "image";_c "image/color";);type Gradient interface{Pattern ;AddColorStop (_bg float64 ,_bc _c .Color );};func (_gdd *TextFont )WithSize (size float64 ,originalFont *_bb .PdfFont )*TextFont {return &TextFont {Font :_gdd .Font ,Size :size ,_aef :_gdd ._aef ,_aag :originalFont };
};func (_af *TextFont )NewFace (size float64 )_fe .Face {return _gb .NewFace (_af ._aef ,&_gb .Options {Size :size });};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func NewTextFont (font *_bb .PdfFont ,size float64 )(*TextFont ,error ){_efa :=font .FontDescriptor ();
if _efa ==nil {return nil ,_f .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_agf ,_gda :=_ga .GetStream (_efa .FontFile2 );if !_gda {return nil ,_f .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_aae ,_gge :=_ga .DecodeStream (_agf );if _gge !=nil {return nil ,_gge ;};_fb ,_gge :=_gb .Parse (_aae );if _gge !=nil {return nil ,_gge ;};return &TextFont {Font :font ,Size :size ,_aef :_fb },nil ;};func (_afe *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_afe .Tm =_ce .NewMatrix (a ,b ,c ,d ,e ,f );
_afe .Tlm =_afe .Tm .Clone ();};func (_gace *TextState )ProcTf (font *TextFont ){_gace .Tf =font };type TextRenderingMode int ;const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;
TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);type FillRule int ;const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_gad *TextState )Reset (){_gad .Tm =_ce .IdentityMatrix ();
_gad .Tlm =_ce .IdentityMatrix ()};type Context interface{Push ();Pop ();Matrix ()_ce .Matrix ;SetMatrix (_a _ce .Matrix );Translate (_fed ,_ff float64 );Scale (_e ,_ceg float64 );Rotate (_ag float64 );MoveTo (_ad ,_ac float64 );LineTo (_ed ,_cg float64 );
CubicTo (_bbf ,_gg ,_ba ,_bf ,_bab ,_ffg float64 );QuadraticTo (_bcd ,_ee ,_babd ,_d float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_edg float64 );SetLineCap (_bba LineCap );SetLineJoin (_eg LineJoin );
SetDash (_db ...float64 );SetDashOffset (_cf float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_gbd ,_fea ,_gac ,_be float64 );SetFillRGBA (_eb ,_cb ,_cga ,_gc float64 );SetFillStyle (_de Pattern );SetFillRule (_dg FillRule );SetStrokeRGBA (_ef ,_agd ,_ede ,_cbd float64 );
SetStrokeStyle (_ab Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_deb string ,_da _fe .Face ,_aa ,_baa float64 );MeasureString (_eec string ,_dc _fe .Face )(_ae ,_eed float64 );DrawRectangle (_fedf ,_gbf ,_fec ,_ade float64 );
DrawImage (_dca _fd .Image ,_efb ,_ffd int );DrawImageAnchored (_gd _fd .Image ,_feg ,_ebf int ,_cba ,_adg float64 );Height ()int ;Width ()int ;};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_babg ,_age :=_bb .NewPdfFontFromTTFFile (filePath );
if _age !=nil {return nil ,_age ;};return NewTextFont (_babg ,size );};func (_beg *TextFont )GetCharMetrics (code _b .CharCode )(float64 ,float64 ,bool ){if _gef ,_bfe :=_beg .Font .GetCharMetrics (code );_bfe &&_gef .Wx !=0{return _gef .Wx ,_gef .Wy ,_bfe ;
};if _beg ._aag ==nil {return 0,0,false ;};_aec ,_ged :=_beg ._aag .GetCharMetrics (code );return _aec .Wx ,_aec .Wy ,_ged &&_aec .Wx !=0;};type Pattern interface{ColorAt (_ca ,_ge int )_c .Color ;};func (_eba *TextState )ProcTStar (){_eba .ProcTd (0,-_eba .Tl )};
func (_cgf *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_cgf .Tw =aw ;_cgf .Tc =ac ;_cgf .ProcQ (data ,ctx );};func (_ea *TextFont )BytesToCharcodes (data []byte )[]_b .CharCode {if _ea ._aag !=nil {return _ea ._aag .BytesToCharcodes (data );
};return _ea .Font .BytesToCharcodes (data );};func (_cee *TextState )Translate (tx ,ty float64 ){_cee .Tm =_cee .Tm .Mult (_ce .TranslationMatrix (tx ,ty ));};func (_gefe *TextState )ProcTD (tx ,ty float64 ){_gefe .Tl =-ty ;_gefe .ProcTd (tx ,ty )};type TextFont struct{Font *_bb .PdfFont ;
Size float64 ;_aef *_gb .Font ;_aag *_bb .PdfFont ;};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);type LineJoin int ;func (_eee *TextState )ProcQ (data []byte ,ctx Context ){_eee .ProcTStar ();_eee .ProcTj (data ,ctx )};func (_egf *TextState )ProcTd (tx ,ty float64 ){_egf .Tlm .Concat (_ce .TranslationMatrix (tx ,ty ));
_egf .Tm =_egf .Tlm .Clone ();};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _ce .Matrix ;Tlm _ce .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};func NewTextState ()TextState {return TextState {Th :100,Tm :_ce .IdentityMatrix (),Tlm :_ce .IdentityMatrix ()};
};func (_dac *TextFont )CharcodeToRunes (charcode _b .CharCode )(_b .CharCode ,[]rune ){_aga :=[]_b .CharCode {charcode };if _dac ._aag ==nil ||_dac ._aag ==_dac .Font {if _dac .Font .IsSimple ()&&_dac ._aef !=nil {if _dbb :=_dac ._aef .Index (rune (charcode ));
_dbb > 0{return charcode ,[]rune {rune (charcode )};};};return charcode ,_dac .Font .CharcodesToUnicode (_aga );};_fee :=_dac ._aag .CharcodesToUnicode (_aga );_efad ,_ :=_dac .Font .RunesToCharcodeBytes (_fee );_gdde :=_dac .Font .BytesToCharcodes (_efad );
_cc :=charcode ;if len (_gdde )> 0&&_gdde [0]!=0{_cc =_gdde [0];};return _cc ,_fee ;};func (_egg *TextState )ProcTj (data []byte ,ctx Context ){_df :=_egg .Tf .Size ;_abc :=_egg .Th /100.0;_afeb :=_egg .GlobalScale ;_bff :=_ce .NewMatrix (_df *_abc ,0,0,_df ,0,_egg .Ts );
_fda :=ctx .Matrix ();_acc :=_fda .Clone ().Mult (_egg .Tm .Clone ().Mult (_bff )).ScalingFactorY ();_ffe :=_egg .Tf .NewFace (_acc );_ebg :=_egg .Tf .BytesToCharcodes (data );for _ ,_eea :=range _ebg {_bfg ,_ead :=_egg .Tf .CharcodeToRunes (_eea );_geb :=string (_ead );
if _geb =="\u0000"{continue ;};_cgd :=_fda .Clone ().Mult (_egg .Tm .Clone ().Mult (_bff ));_bac :=_cgd .ScalingFactorY ();_cgd =_cgd .Scale (1/_bac ,-1/_bac );if _egg .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_cgd );ctx .DrawString (_geb ,_ffe ,0,0);
ctx .SetMatrix (_fda );};_cca :=0.0;if _geb =="\u0020"{_cca =_egg .Tw ;};_bbfe ,_ ,_gbg :=_egg .Tf .GetCharMetrics (_bfg );if _gbg {_bbfe =_bbfe *0.001*_df ;}else {_bbfe ,_ =ctx .MeasureString (_geb ,_ffe );_bbfe =_bbfe /_afeb ;};_afa :=(_bbfe +_egg .Tc +_cca )*_abc ;
_egg .Tm =_egg .Tm .Mult (_ce .TranslationMatrix (_afa ,0));};};type LineCap int ;