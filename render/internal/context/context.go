//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_b "errors";_cab "github.com/unidoc/freetype/truetype";_caa "github.com/unidoc/unipdf/v3/core";_ce "github.com/unidoc/unipdf/v3/internal/textencoding";_ca "github.com/unidoc/unipdf/v3/internal/transform";_ed "github.com/unidoc/unipdf/v3/model";
_e "golang.org/x/image/font";_c "image";_ff "image/color";);type Gradient interface{Pattern ;AddColorStop (_g float64 ,_ec _ff .Color );};type FillRule int ;type TextRenderingMode int ;func NewTextFont (font *_ed .PdfFont ,size float64 )(*TextFont ,error ){_fc :=font .FontDescriptor ();
if _fc ==nil {return nil ,_b .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_ebad ,_dbf :=_caa .GetStream (_fc .FontFile2 );if !_dbf {return nil ,_b .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_da ,_agb :=_caa .DecodeStream (_ebad );if _agb !=nil {return nil ,_agb ;};_bdb ,_agb :=_cab .Parse (_da );if _agb !=nil {return nil ,_agb ;};return &TextFont {Font :font ,Size :size ,_deg :_bdb },nil ;};func (_fbf *TextFont )WithSize (size float64 ,originalFont *_ed .PdfFont )*TextFont {return &TextFont {Font :_fbf .Font ,Size :size ,_deg :_fbf ._deg ,_fabc :originalFont };
};func (_geef *TextFont )CharcodeToRunes (charcode _ce .CharCode )(_ce .CharCode ,[]rune ){_ddb :=[]_ce .CharCode {charcode };if _geef ._fabc ==nil ||_geef ._fabc ==_geef .Font {if _geef .Font .IsSimple ()&&_geef ._deg !=nil {if _dge :=_geef ._deg .Index (rune (charcode ));
_dge > 0{return charcode ,[]rune {rune (charcode )};};};return charcode ,_geef .Font .CharcodesToUnicode (_ddb );};_adc :=_geef ._fabc .CharcodesToUnicode (_ddb );_fea ,_ :=_geef .Font .RunesToCharcodeBytes (_adc );_cfa :=_geef .Font .BytesToCharcodes (_fea );
_bge :=charcode ;if len (_cfa )> 0&&_cfa [0]!=0{_bge =_cfa [0];};return _bge ,_adc ;};func (_abd *TextFont )BytesToCharcodes (data []byte )[]_ce .CharCode {if _abd ._fabc !=nil {return _abd ._fabc .BytesToCharcodes (data );};return _abd .Font .BytesToCharcodes (data );
};func NewTextState ()TextState {return TextState {Th :100,Tm :_ca .IdentityMatrix (),Tlm :_ca .IdentityMatrix ()};};func (_ga *TextState )ProcTd (tx ,ty float64 ){_ga .Tlm .Concat (_ca .TranslationMatrix (tx ,ty ));_ga .Tm =_ga .Tlm .Clone ();};const (LineCapRound LineCap =iota ;
LineCapButt ;LineCapSquare ;);type Pattern interface{ColorAt (_d ,_bc int )_ff .Color ;};func (_ebadg *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_ebadg .Tm =_ca .NewMatrix (a ,b ,c ,d ,e ,f );_ebadg .Tlm =_ebadg .Tm .Clone ();};const (FillRuleWinding FillRule =iota ;
FillRuleEvenOdd ;);func (_fgd *TextState )Reset (){_fgd .Tm =_ca .IdentityMatrix ();_fgd .Tlm =_ca .IdentityMatrix ()};func (_bda *TextState )ProcQ (data []byte ,ctx Context ){_bda .ProcTStar ();_bda .ProcTj (data ,ctx )};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_ad ,_dad :=_ed .NewPdfFontFromTTFFile (filePath );
if _dad !=nil {return nil ,_dad ;};return NewTextFont (_ad ,size );};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _ca .Matrix ;Tlm _ca .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};const (LineJoinRound LineJoin =iota ;
LineJoinBevel ;);func (_bab *TextState )ProcTStar (){_bab .ProcTd (0,-_bab .Tl )};func (_dgb *TextFont )NewFace (size float64 )_e .Face {return _cab .NewFace (_dgb ._deg ,&_cab .Options {Size :size });};func (_bcg *TextState )Translate (tx ,ty float64 ){_bcg .Tm =_bcg .Tm .Mult (_ca .TranslationMatrix (tx ,ty ));
};type LineJoin int ;func (_eaf *TextState )ProcTj (data []byte ,ctx Context ){_bee :=_eaf .Tf .Size ;_bbg :=_eaf .Th /100.0;_edd :=_eaf .GlobalScale ;_dfa :=_ca .NewMatrix (_bee *_bbg ,0,0,_bee ,0,_eaf .Ts );_acf :=ctx .Matrix ();_cea :=_acf .Clone ().Mult (_eaf .Tm .Clone ().Mult (_dfa )).ScalingFactorY ();
_dee :=_eaf .Tf .NewFace (_cea );_gae :=_eaf .Tf .BytesToCharcodes (data );for _ ,_ae :=range _gae {_gc ,_adb :=_eaf .Tf .CharcodeToRunes (_ae );_edg :=string (_adb );if _edg =="\u0000"{continue ;};_gbd :=_acf .Clone ().Mult (_eaf .Tm .Clone ().Mult (_dfa ));
_ced :=_gbd .ScalingFactorY ();_gbd =_gbd .Scale (1/_ced ,-1/_ced );if _eaf .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_gbd );ctx .DrawString (_edg ,_dee ,0,0);ctx .SetMatrix (_acf );};_afcg :=0.0;if _edg =="\u0020"{_afcg =_eaf .Tw ;};_bcf ,_ ,_cfe :=_eaf .Tf .GetCharMetrics (_gc );
if _cfe {_bcf =_bcf *0.001*_bee ;}else {_bcf ,_ =ctx .MeasureString (_edg ,_dee );_bcf =_bcf /_edd ;};_ee :=(_bcf +_eaf .Tc +_afcg )*_bbg ;_eaf .Tm =_eaf .Tm .Mult (_ca .TranslationMatrix (_ee ,0));};};type TextFont struct{Font *_ed .PdfFont ;Size float64 ;
_deg *_cab .Font ;_fabc *_ed .PdfFont ;};func (_fdf *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_fdf .Tw =aw ;_fdf .Tc =ac ;_fdf .ProcQ (data ,ctx );};type Context interface{Push ();Pop ();Matrix ()_ca .Matrix ;SetMatrix (_fb _ca .Matrix );
Translate (_fa ,_cb float64 );Scale (_gd ,_eg float64 );Rotate (_gdg float64 );MoveTo (_a ,_db float64 );LineTo (_eb ,_de float64 );CubicTo (_fab ,_be ,_ceg ,_aa ,_ef ,_cef float64 );QuadraticTo (_df ,_dd ,_ba ,_cbc float64 );NewSubPath ();ClosePath ();
ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_bae float64 );SetLineCap (_ge LineCap );SetLineJoin (_beb LineJoin );SetDash (_baf ...float64 );SetDashOffset (_fe float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();
SetRGBA (_fg ,_bg ,_cee ,_eba float64 );SetFillRGBA (_ddf ,_dbe ,_gf ,_dg float64 );SetFillStyle (_fd Pattern );SetFillRule (_af FillRule );SetStrokeRGBA (_dc ,_gb ,_ac ,_dfc float64 );SetStrokeStyle (_bd Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;
TextState ()*TextState ;DrawString (_fef string ,_ag _e .Face ,_dea ,_eff float64 );MeasureString (_gee string ,_cbcd _e .Face )(_ab ,_cae float64 );DrawRectangle (_ddfa ,_dde ,_gbf ,_afc float64 );DrawImage (_egc _c .Image ,_aff ,_gda int );DrawImageAnchored (_fee _c .Image ,_eca ,_bb int ,_cf ,_ea float64 );
Height ()int ;Width ()int ;};func (_fde *TextFont )GetCharMetrics (code _ce .CharCode )(float64 ,float64 ,bool ){if _cc ,_aad :=_fde .Font .GetCharMetrics (code );_aad &&_cc .Wx !=0{return _cc .Wx ,_cc .Wy ,_aad ;};if _fde ._fabc ==nil {return 0,0,false ;
};_agf ,_aca :=_fde ._fabc .GetCharMetrics (code );return _agf .Wx ,_agf .Wy ,_aca &&_agf .Wx !=0;};func (_acc *TextState )ProcTf (font *TextFont ){_acc .Tf =font };type LineCap int ;func (_affa *TextState )ProcTD (tx ,ty float64 ){_affa .Tl =-ty ;_affa .ProcTd (tx ,ty )};
const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);