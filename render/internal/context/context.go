//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_fg "errors";_fe "github.com/unidoc/freetype/truetype";_b "github.com/unidoc/unipdf/v3/core";_fd "github.com/unidoc/unipdf/v3/internal/textencoding";_cb "github.com/unidoc/unipdf/v3/internal/transform";_g "github.com/unidoc/unipdf/v3/model";
_cc "golang.org/x/image/font";_d "image";_c "image/color";);type Gradient interface{Pattern ;AddColorStop (_ff float64 ,_df _c .Color );};type Context interface{Push ();Pop ();Matrix ()_cb .Matrix ;SetMatrix (_cbe _cb .Matrix );Translate (_bc ,_ec float64 );
Scale (_ga ,_ef float64 );Rotate (_fa float64 );MoveTo (_bg ,_cg float64 );LineTo (_db ,_ed float64 );CubicTo (_bgd ,_gc ,_da ,_dfb ,_gf ,_ccg float64 );QuadraticTo (_cga ,_ca ,_gfg ,_ba float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();
ResetClip ();LineWidth ()float64 ;SetLineWidth (_be float64 );SetLineCap (_ce LineCap );SetLineJoin (_gd LineJoin );SetDash (_ad ...float64 );SetDashOffset (_bec float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_gdc ,_fed ,_efd ,_feb float64 );
SetFillRGBA (_cf ,_ab ,_cce ,_edf float64 );SetFillStyle (_dfbg Pattern );SetFillRule (_cec FillRule );SetStrokeRGBA (_gb ,_dc ,_dd ,_ac float64 );SetStrokeStyle (_abc Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_cd string ,_ecf _cc .Face ,_fb ,_gbd float64 );
MeasureString (_bcb string ,_gbf _cc .Face )(_bb ,_de float64 );DrawRectangle (_ge ,_fbb ,_bcbd ,_acd float64 );DrawImage (_bgc _d .Image ,_fea ,_fc int );DrawImageAnchored (_eg _d .Image ,_eb ,_fba int ,_gab ,_dg float64 );Height ()int ;Width ()int ;};
func (_efg *TextState )ProcTd (tx ,ty float64 ){_efg .Tlm .Concat (_cb .TranslationMatrix (tx ,ty ));_efg .Tm =_efg .Tlm .Clone ();};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _cb .Matrix ;Tlm _cb .Matrix ;
Tr TextRenderingMode ;GlobalScale float64 ;};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_bca ,_gg :=_g .NewPdfFontFromTTFFile (filePath );if _gg !=nil {return nil ,_gg ;};return NewTextFont (_bca ,size );};type LineCap int ;
type LineJoin int ;func (_gbe *TextFont )NewFace (size float64 )_cc .Face {return _fe .NewFace (_gbe ._gce ,&_fe .Options {Size :size });};type TextFont struct{Font *_g .PdfFont ;Size float64 ;_gce *_fe .Font ;_dbd *_g .PdfFont ;};func (_fbd *TextState )Translate (tx ,ty float64 ){_fbd .Tm =_fbd .Tm .Mult (_cb .TranslationMatrix (tx ,ty ));
};func (_gad *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_gad .Tm =_cb .NewMatrix (a ,b ,c ,d ,e ,f );_gad .Tlm =_gad .Tm .Clone ();};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_dff *TextState )Reset (){_dff .Tm =_cb .IdentityMatrix ();
_dff .Tlm =_cb .IdentityMatrix ()};func (_cbeg *TextFont )CharcodeToRunes (charcode _fd .CharCode )(_fd .CharCode ,[]rune ){_cfc :=[]_fd .CharCode {charcode };if _cbeg ._dbd ==nil ||_cbeg ._dbd ==_cbeg .Font {if _cbeg .Font .IsSimple ()&&_cbeg ._gce !=nil {if _geb :=_cbeg ._gce .Index (rune (charcode ));
_geb > 0{return charcode ,[]rune {rune (charcode )};};};return charcode ,_cbeg .Font .CharcodesToUnicode (_cfc );};_ged :=_cbeg ._dbd .CharcodesToUnicode (_cfc );_dfc ,_ :=_cbeg .Font .RunesToCharcodeBytes (_ged );_dbb :=_cbeg .Font .BytesToCharcodes (_dfc );
_dcb :=charcode ;if len (_dbb )> 0&&_dbb [0]!=0{_dcb =_dbb [0];};return _dcb ,_ged ;};func (_fda *TextFont )GetCharMetrics (code _fd .CharCode )(float64 ,float64 ,bool ){if _ace ,_aae :=_fda .Font .GetCharMetrics (code );_aae &&_ace .Wx !=0{return _ace .Wx ,_ace .Wy ,_aae ;
};if _fda ._dbd ==nil {return 0,0,false ;};_gbff ,_fce :=_fda ._dbd .GetCharMetrics (code );return _gbff .Wx ,_gbff .Wy ,_fce &&_gbff .Wx !=0;};func (_ffe *TextFont )BytesToCharcodes (data []byte )[]_fd .CharCode {if _ffe ._dbd !=nil {return _ffe ._dbd .BytesToCharcodes (data );
};return _ffe .Font .BytesToCharcodes (data );};func (_cbg *TextState )ProcTf (font *TextFont ){_cbg .Tf =font };const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;
TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);type TextRenderingMode int ;func NewTextFont (font *_g .PdfFont ,size float64 )(*TextFont ,error ){_bcd :=font .FontDescriptor ();if _bcd ==nil {return nil ,_fg .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_aa ,_ffc :=_b .GetStream (_bcd .FontFile2 );if !_ffc {return nil ,_fg .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_ffd ,_def :=_b .DecodeStream (_aa );
if _def !=nil {return nil ,_def ;};_gcc ,_def :=_fe .Parse (_ffd );if _def !=nil {return nil ,_def ;};return &TextFont {Font :font ,Size :size ,_gce :_gcc },nil ;};func (_eec *TextState )ProcQ (data []byte ,ctx Context ){_eec .ProcTStar ();_eec .ProcTj (data ,ctx )};
func (_bf *TextState )ProcTD (tx ,ty float64 ){_bf .Tl =-ty ;_bf .ProcTd (tx ,ty )};func (_baag *TextState )ProcTStar (){_baag .ProcTd (0,-_baag .Tl )};type Pattern interface{ColorAt (_a ,_e int )_c .Color ;};type FillRule int ;func NewTextState ()TextState {return TextState {Th :100,Tm :_cb .IdentityMatrix (),Tlm :_cb .IdentityMatrix ()};
};func (_gbed *TextState )ProcTj (data []byte ,ctx Context ){_gdd :=_gbed .Tf .Size ;_cgf :=_gbed .Th /100.0;_faa :=_gbed .GlobalScale ;_abe :=_cb .NewMatrix (_gdd *_cgf ,0,0,_gdd ,0,_gbed .Ts );_adf :=ctx .Matrix ();_fca :=_adf .Clone ().Mult (_gbed .Tm .Clone ().Mult (_abe )).ScalingFactorY ();
_ag :=_gbed .Tf .NewFace (_fca );_dab :=_gbed .Tf .BytesToCharcodes (data );for _ ,_fad :=range _dab {_dcf ,_feg :=_gbed .Tf .CharcodeToRunes (_fad );_af :=string (_feg );if _af =="\u0000"{continue ;};_ccc :=_adf .Clone ().Mult (_gbed .Tm .Clone ().Mult (_abe ));
_faaa :=_ccc .ScalingFactorY ();_ccc =_ccc .Scale (1/_faaa ,-1/_faaa );if _gbed .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_ccc );ctx .DrawString (_af ,_ag ,0,0);ctx .SetMatrix (_adf );};_dfcf :=0.0;if _af =="\u0020"{_dfcf =_gbed .Tw ;};_ecd ,_ ,_ece :=_gbed .Tf .GetCharMetrics (_dcf );
if _ece {_ecd =_ecd *0.001*_gdd ;}else {_ecd ,_ =ctx .MeasureString (_af ,_ag );_ecd =_ecd /_faa ;};_gfgb :=(_ecd +_gbed .Tc +_dfcf )*_cgf ;_gbed .Tm =_gbed .Tm .Mult (_cb .TranslationMatrix (_gfgb ,0));};};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;
);func (_baa *TextFont )WithSize (size float64 ,originalFont *_g .PdfFont )*TextFont {return &TextFont {Font :_baa .Font ,Size :size ,_gce :_baa ._gce ,_dbd :originalFont };};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_bee *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_bee .Tw =aw ;
_bee .Tc =ac ;_bee .ProcQ (data ,ctx );};