//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_c "errors";_g "github.com/golang/freetype/truetype";_ba "github.com/unidoc/unipdf/v3/core";_aa "github.com/unidoc/unipdf/v3/internal/textencoding";_a "github.com/unidoc/unipdf/v3/internal/transform";_f "github.com/unidoc/unipdf/v3/model";_be "golang.org/x/image/font";_cc "image";_e "image/color";);func (_ecb *TextFont )CharcodesToUnicode (charcodes []_aa .CharCode )[]rune {if _ecb ._cgag !=nil {return _ecb ._cgag .CharcodesToUnicode (charcodes );};return _ecb .Font .CharcodesToUnicode (charcodes );};type Pattern interface{ColorAt (_ccc ,_gc int )_e .Color ;};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_fe ,_ead :=_f .NewPdfFontFromTTFFile (filePath );if _ead !=nil {return nil ,_ead ;};return NewTextFont (_fe ,size );};func (_ecf *TextFont )GetCharMetrics (code _aa .CharCode )(float64 ,float64 ,bool ){if _ebc ,_fb :=_ecf .Font .GetCharMetrics (code );_fb &&_ebc .Wx !=0{return _ebc .Wx ,_ebc .Wy ,_fb ;};if _ecf ._cgag ==nil {return 0,0,false ;};_feb ,_fbd :=_ecf ._cgag .GetCharMetrics (code );return _feb .Wx ,_feb .Wy ,_fbd &&_feb .Wx !=0;};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);type FillRule int ;func (_fbe *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_fbe .Tw =aw ;_fbe .Tc =ac ;_fbe .ProcQ (data ,ctx );};func (_cba *TextState )ProcTj (data []byte ,ctx Context ){_fec :=_cba .Tf .Size ;_egd :=_cba .Th /100.0;_dbde :=_a .NewMatrix (_fec *_egd ,0,0,_fec ,0,_cba .Ts );_gef :=_cba .Tf .CharcodesToUnicode (_cba .Tf .BytesToCharcodes (data ));for _ ,_adg :=range _gef {if _adg =='\x00'{continue ;};_edf :=_cba .Tm .Clone ();_cba .Tm .Concat (_dbde );_gae ,_ebba :=_cba .Tm .Transform (0,0);ctx .Scale (1,-1);ctx .DrawString (string (_adg ),_gae ,_ebba );ctx .Scale (1,-1);_df :=0.0;if _adg ==' '{_df =_cba .Tw ;};var _bdd float64 ;if _caf ,_ ,_gaf :=_cba .Tf .GetRuneMetrics (_adg );_gaf {_bdd =_caf *0.001*_fec ;}else {_bdd ,_ =ctx .MeasureString (string (_adg ));};_gf :=(_bdd +_cba .Tc +_df )*_egd ;_cba .Tm =_a .TranslationMatrix (_gf ,0).Mult (_edf );};};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_eaa *TextFont )WithSize (size float64 ,originalFont *_f .PdfFont )*TextFont {if size <=1{size =10;};return &TextFont {Font :_eaa .Font ,Face :_g .NewFace (_eaa ._ca ,&_g .Options {Size :size }),Size :size ,_ca :_eaa ._ca ,_cgag :originalFont };};func (_ddf *TextState )ProcTStar (){_ddf .ProcTd (0,-_ddf .Tl )};func (_cag *TextState )ProcTd (tx ,ty float64 ){_cag .Tlm .Concat (_a .TranslationMatrix (tx ,-ty ));_cag .Tm =_cag .Tlm .Clone ();};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _a .Matrix ;Tlm _a .Matrix ;};func (_bagg *TextState )Reset (){_bagg .Tm =_a .IdentityMatrix ();_bagg .Tlm =_a .IdentityMatrix ()};func (_gdd *TextFont )BytesToCharcodes (data []byte )[]_aa .CharCode {if _gdd ._cgag !=nil {return _gdd ._cgag .BytesToCharcodes (data );};return _gdd .Font .BytesToCharcodes (data );};func NewTextFont (font *_f .PdfFont ,size float64 )(*TextFont ,error ){_cgf :=font .FontDescriptor ();if _cgf ==nil {return nil ,_c .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_dbd ,_fcf :=_ba .GetStream (_cgf .FontFile2 );if !_fcf {return nil ,_c .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_bc ,_aaa :=_ba .DecodeStream (_dbd );if _aaa !=nil {return nil ,_aaa ;};_geb ,_aaa :=_g .Parse (_bc );if _aaa !=nil {return nil ,_aaa ;};if size <=1{size =10;};return &TextFont {Font :font ,Face :_g .NewFace (_geb ,&_g .Options {Size :size }),Size :size ,_ca :_geb },nil ;};func (_cgfg *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_cgfg .Tm =_a .NewMatrix (a ,b ,c ,d ,e ,-f );_cgfg .Tlm =_cgfg .Tm .Clone ();};type LineJoin int ;func (_cbd *TextState )ProcTD (tx ,ty float64 ){_cbd .Tl =-ty ;_cbd .ProcTd (tx ,ty )};type TextFont struct{Font *_f .PdfFont ;Face _be .Face ;Size float64 ;_ca *_g .Font ;_cgag *_f .PdfFont ;};type Gradient interface{Pattern ;AddColorStop (_ee float64 ,_fg _e .Color );};type Context interface{Push ();Pop ();Matrix ()_a .Matrix ;SetMatrix (_d _a .Matrix );Translate (_gb ,_fa float64 );Scale (_cf ,_cb float64 );Rotate (_cfb float64 );MoveTo (_gg ,_ga float64 );LineTo (_cg ,_ef float64 );CubicTo (_ac ,_bf ,_gaa ,_bac ,_gab ,_dg float64 );QuadraticTo (_ad ,_de ,_dge ,_acd float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_dc float64 );SetLineCap (_acg LineCap );SetLineJoin (_ab LineJoin );SetDash (_ge ...float64 );SetDashOffset (_gcc float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_fd ,_db ,_fgf ,_cd float64 );SetFillRGBA (_cdf ,_ace ,_ce ,_ec float64 );SetFillStyle (_bg Pattern );SetFillRule (_bec FillRule );SetStrokeRGBA (_ff ,_eb ,_fac ,_ed float64 );SetStrokeStyle (_bb Pattern );TextState ()*TextState ;DrawString (_cga string ,_ea ,_dd float64 );MeasureString (_eg string )(_da ,_fc float64 );DrawRectangle (_cge ,_eea ,_gd ,_ebg float64 );DrawImage (_bd _cc .Image ,_dcf ,_ebb int );DrawImageAnchored (_efg _cc .Image ,_cged ,_bde int ,_bag ,_aba float64 );Height ()int ;Width ()int ;};func (_gbf *TextState )ProcTf (font *TextFont ){_gbf .Tf =font };func (_cea *TextState )Translate (tx ,ty float64 ){_cea .Tm =_a .TranslationMatrix (tx ,ty ).Mult (_cea .Tm );};type LineCap int ;func NewTextState ()*TextState {return &TextState {Th :100,Tm :_a .IdentityMatrix (),Tlm :_a .IdentityMatrix ()};};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_gabc *TextState )ProcQ (data []byte ,ctx Context ){_gabc .ProcTStar ();_gabc .ProcTj (data ,ctx )};func (_bea *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _gaae ,_bdc :=_bea .Font .GetRuneMetrics (r );_bdc &&_gaae .Wx !=0{return _gaae .Wx ,_gaae .Wy ,_bdc ;};if _bea ._cgag ==nil {return 0,0,false ;};_ffb ,_dgb :=_bea ._cgag .GetRuneMetrics (r );return _ffb .Wx ,_ffb .Wy ,_dgb &&_ffb .Wx !=0;};