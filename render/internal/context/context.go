//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_g "errors";_a "github.com/golang/freetype/truetype";_cc "github.com/unidoc/unipdf/v3/core";_fbe "github.com/unidoc/unipdf/v3/internal/textencoding";_fb "github.com/unidoc/unipdf/v3/internal/transform";_ga "github.com/unidoc/unipdf/v3/model";_e "golang.org/x/image/font";_f "image";_c "image/color";);type Gradient interface{Pattern ;AddColorStop (_gc float64 ,_ca _c .Color );};func (_cb *TextState )ProcTD (tx ,ty float64 ){_cb .Tl =-ty ;_cb .ProcTd (tx ,ty )};func (_eee *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_eee .Tm =_fb .NewMatrix (a ,b ,c ,d ,e ,-f );_eee .Tlm =_eee .Tm .Clone ();};func (_ce *TextState )ProcQ (data []byte ,ctx Context ){_ce .ProcTStar ();_ce .ProcTj (data ,ctx )};func (_ega *TextState )ProcTf (font *TextFont ){_ega .Tf =font };func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_bgb ,_gde :=_ga .NewPdfFontFromTTFFile (filePath );if _gde !=nil {return nil ,_gde ;};return NewTextFont (_bgb ,size );};func (_fga *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_fga .Tw =aw ;_fga .Tc =ac ;_fga .ProcQ (data ,ctx );};func (_bgbd *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _ec ,_fca :=_bgbd .Font .GetRuneMetrics (r );_fca &&_ec .Wx !=0{return _ec .Wx ,_ec .Wy ,_fca ;};if _bgbd ._be ==nil {return 0,0,false ;};_deb ,_ffe :=_bgbd ._be .GetRuneMetrics (r );return _deb .Wx ,_deb .Wy ,_ffe &&_deb .Wx !=0;};func (_dcb *TextState )Translate (tx ,ty float64 ){_dcb .Tm =_fb .TranslationMatrix (tx ,ty ).Mult (_dcb .Tm );};func NewTextFont (font *_ga .PdfFont ,size float64 )(*TextFont ,error ){_fge :=font .FontDescriptor ();if _fge ==nil {return nil ,_g .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_cd ,_dacf :=_cc .GetStream (_fge .FontFile2 );if !_dacf {return nil ,_g .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_eae ,_acfda :=_cc .DecodeStream (_cd );if _acfda !=nil {return nil ,_acfda ;};_gec ,_acfda :=_a .Parse (_eae );if _acfda !=nil {return nil ,_acfda ;};if size <=1{size =10;};return &TextFont {Font :font ,Face :_a .NewFace (_gec ,&_a .Options {Size :size }),Size :size ,_fdb :_gec },nil ;};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_ccb *TextState )ProcTd (tx ,ty float64 ){_ccb .Tlm .Concat (_fb .TranslationMatrix (tx ,-ty ));_ccb .Tm =_ccb .Tlm .Clone ();};func (_baf *TextFont )BytesToCharcodes (data []byte )[]_fbe .CharCode {if _baf ._be !=nil {return _baf ._be .BytesToCharcodes (data );};return _baf .Font .BytesToCharcodes (data );};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _fb .Matrix ;Tlm _fb .Matrix ;};type LineJoin int ;func (_dec *TextFont )GetCharMetrics (code _fbe .CharCode )(float64 ,float64 ,bool ){if _bdfe ,_fba :=_dec .Font .GetCharMetrics (code );_fba &&_bdfe .Wx !=0{return _bdfe .Wx ,_bdfe .Wy ,_fba ;};if _dec ._be ==nil {return 0,0,false ;};_dfa ,_bga :=_dec ._be .GetCharMetrics (code );return _dfa .Wx ,_dfa .Wy ,_bga &&_dfa .Wx !=0;};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_geg *TextState )Reset (){_geg .Tm =_fb .IdentityMatrix ();_geg .Tlm =_fb .IdentityMatrix ()};func (_db *TextState )ProcTj (data []byte ,ctx Context ){_aagf :=_db .Tf .Size ;_dc :=_db .Th /100.0;_dad :=_fb .NewMatrix (_aagf *_dc ,0,0,_aagf ,0,_db .Ts );_gge :=_db .Tf .CharcodesToUnicode (_db .Tf .BytesToCharcodes (data ));for _ ,_gga :=range _gge {if _gga =='\x00'{continue ;};_bfa :=_db .Tm .Clone ();_db .Tm .Concat (_dad );_acfdc ,_gab :=_db .Tm .Transform (0,0);ctx .Scale (1,-1);ctx .DrawString (string (_gga ),_acfdc ,_gab );ctx .Scale (1,-1);_cba :=0.0;if _gga ==' '{_cba =_db .Tw ;};var _ef float64 ;if _gb ,_ ,_aea :=_db .Tf .GetRuneMetrics (_gga );_aea {_ef =_gb *0.001*_aagf ;}else {_ef ,_ =ctx .MeasureString (string (_gga ));};_dgcc :=(_ef +_db .Tc +_cba )*_dc ;_db .Tm =_fb .TranslationMatrix (_dgcc ,0).Mult (_bfa );};};func NewTextState ()*TextState {return &TextState {Th :100,Tm :_fb .IdentityMatrix (),Tlm :_fb .IdentityMatrix ()};};type TextFont struct{Font *_ga .PdfFont ;Face _e .Face ;Size float64 ;_fdb *_a .Font ;_be *_ga .PdfFont ;};type Pattern interface{ColorAt (_bd ,_fc int )_c .Color ;};type LineCap int ;type FillRule int ;func (_cad *TextFont )WithSize (size float64 ,originalFont *_ga .PdfFont )*TextFont {if size <=1{size =10;};return &TextFont {Font :_cad .Font ,Face :_a .NewFace (_cad ._fdb ,&_a .Options {Size :size }),Size :size ,_fdb :_cad ._fdb ,_be :originalFont };};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_bfc *TextState )ProcTStar (){_bfc .ProcTd (0,-_bfc .Tl )};func (_fdf *TextFont )CharcodesToUnicode (charcodes []_fbe .CharCode )[]rune {if _fdf ._be !=nil {return _fdf ._be .CharcodesToUnicode (charcodes );};return _fdf .Font .CharcodesToUnicode (charcodes );};type Context interface{Push ();Pop ();Matrix ()_fb .Matrix ;SetMatrix (_ea _fb .Matrix );Translate (_fbb ,_ac float64 );Scale (_ee ,_af float64 );Rotate (_ff float64 );MoveTo (_bdf ,_fa float64 );LineTo (_d ,_aa float64 );CubicTo (_gd ,_de ,_eea ,_fcd ,_ge ,_cca float64 );QuadraticTo (_da ,_eeb ,_ed ,_gg float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_eg float64 );SetLineCap (_ab LineCap );SetLineJoin (_fbd LineJoin );SetDash (_dd ...float64 );SetDashOffset (_cf float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_fg ,_gda ,_bg ,_dac float64 );SetFillRGBA (_fcf ,_gdg ,_fff ,_eda float64 );SetFillStyle (_acf Pattern );SetFillRule (_fgd FillRule );SetStrokeRGBA (_dg ,_def ,_ba ,_bf float64 );SetStrokeStyle (_df Pattern );TextState ()*TextState ;DrawString (_dgc string ,_bb ,_bfe float64 );MeasureString (_acfd string )(_edg ,_gdaa float64 );DrawRectangle (_ege ,_eac ,_fe ,_ag float64 );DrawImage (_fd _f .Image ,_ae ,_egd int );DrawImageAnchored (_fbbc _f .Image ,_ggf ,_aag int ,_faa ,_cg float64 );Height ()int ;Width ()int ;};