//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_cg "errors";_a "fmt";_beb "github.com/unidoc/freetype/raster";_bg "github.com/unidoc/unipdf/v3/common";_fef "github.com/unidoc/unipdf/v3/internal/transform";_e "github.com/unidoc/unipdf/v3/render/internal/context";_be "golang.org/x/image/draw";
_fb "golang.org/x/image/font";_bgd "golang.org/x/image/math/f64";_fec "golang.org/x/image/math/fixed";_gd "image";_gg "image/color";_fe "image/draw";_f "math";_c "sort";_g "strings";);func (_cbc *Context )DrawPoint (x ,y ,r float64 ){_cbc .Push ();_ccff ,_ecd :=_cbc .Transform (x ,y );
_cbc .Identity ();_cbc .DrawCircle (_ccff ,_ecd ,r );_cbc .Pop ();};func _fgfba (_dcde float64 )_fec .Int26_6 {return _fec .Int26_6 (_dcde *64)};func (_cfc *Context )AsMask ()*_gd .Alpha {_feba :=_gd .NewAlpha (_cfc ._cde .Bounds ());_be .Draw (_feba ,_cfc ._cde .Bounds (),_cfc ._cde ,_gd .Point {},_be .Src );
return _feba ;};func (_aff *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_aff ._aea {_aff .MoveTo (x1 ,y1 );};x1 ,y1 =_aff .Transform (x1 ,y1 );x2 ,y2 =_aff .Transform (x2 ,y2 );_gee :=_fef .NewPoint (x1 ,y1 );_bcb :=_fef .NewPoint (x2 ,y2 );_fad :=_dfdd (_gee );
_ddd :=_dfdd (_bcb );_aff ._dgf .Add2 (_fad ,_ddd );_aff ._dc .Add2 (_fad ,_ddd );_aff ._efg =_bcb ;};func _dfdd (_bcfdb _fef .Point )_fec .Point26_6 {return _fec .Point26_6 {X :_fgfba (_bcfdb .X ),Y :_fgfba (_bcfdb .Y )};};func (_gfd *Context )SetDashOffset (offset float64 ){_gfd ._fbe =offset };
func _ggc (_bea string )(_aafb ,_efgb ,_aacaf ,_cbaf int ){_bea =_g .TrimPrefix (_bea ,"\u0023");_cbaf =255;if len (_bea )==3{_bgcd :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_a .Sscanf (_bea ,_bgcd ,&_aafb ,&_efgb ,&_aacaf );_aafb |=_aafb <<4;_efgb |=_efgb <<4;
_aacaf |=_aacaf <<4;};if len (_bea )==6{_agfff :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_a .Sscanf (_bea ,_agfff ,&_aafb ,&_efgb ,&_aacaf );};if len (_bea )==8{_efdc :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_a .Sscanf (_bea ,_efdc ,&_aafb ,&_efgb ,&_aacaf ,&_cbaf );};return ;};func (_fac *Context )SetLineCap (lineCap _e .LineCap ){_fac ._bcf =lineCap };type circle struct{_edg ,_efc ,_eecdf float64 };func (_bdc *Context )DrawImage (im _gd .Image ,x ,y int ){_bdc .DrawImageAnchored (im ,x ,y ,0,0)};
func (_eaf *Context )Pop (){_efb :=*_eaf ;_bbe :=_eaf ._fdb ;_dcd :=_bbe [len (_bbe )-1];*_eaf =*_dcd ;_eaf ._dgf =_efb ._dgf ;_eaf ._dc =_efb ._dc ;_eaf ._eef =_efb ._eef ;_eaf ._efg =_efb ._efg ;_eaf ._aea =_efb ._aea ;};func (_eaec *Context )DrawString (s string ,face _fb .Face ,x ,y float64 ){_eaec .DrawStringAnchored (s ,face ,x ,y ,0,0);
};func (_gge *Context )SetHexColor (x string ){_gec ,_fag ,_acf ,_baa :=_ggc (x );_gge .SetRGBA255 (_gec ,_fag ,_acf ,_baa );};func NewContext (width ,height int )*Context {return NewContextForRGBA (_gd .NewRGBA (_gd .Rect (0,0,width ,height )));};func (_add *radialGradient )ColorAt (x ,y int )_gg .Color {if len (_add ._dacb )==0{return _gg .Transparent ;
};_fgfd ,_adgf :=float64 (x )+0.5-_add ._dde ._edg ,float64 (y )+0.5-_add ._dde ._efc ;_bcd :=_cead (_fgfd ,_adgf ,_add ._dde ._eecdf ,_add ._eedd ._edg ,_add ._eedd ._efc ,_add ._eedd ._eecdf );_eefb :=_cead (_fgfd ,_adgf ,-_add ._dde ._eecdf ,_fgfd ,_adgf ,_add ._dde ._eecdf );
if _add ._fgga ==0{if _bcd ==0{return _gg .Transparent ;};_eddg :=0.5*_eefb /_bcd ;if _eddg *_add ._eedd ._eecdf >=_add ._bgdfc {return _ddf (_eddg ,_add ._dacb );};return _gg .Transparent ;};_ecb :=_cead (_bcd ,_add ._fgga ,0,_bcd ,-_eefb ,0);if _ecb >=0{_cdb :=_f .Sqrt (_ecb );
_ecfg :=(_bcd +_cdb )*_add ._abe ;_cgg :=(_bcd -_cdb )*_add ._abe ;if _ecfg *_add ._eedd ._eecdf >=_add ._bgdfc {return _ddf (_ecfg ,_add ._dacb );}else if _cgg *_add ._eedd ._eecdf >=_add ._bgdfc {return _ddf (_cgg ,_add ._dacb );};};return _gg .Transparent ;
};func (_dbg *Context )SetFillStyle (pattern _e .Pattern ){if _deb ,_ade :=pattern .(*solidPattern );_ade {_dbg ._ag =_deb ._gbdf ;};_dbg ._cged =pattern ;};func (_fbeb *Context )Rotate (angle float64 ){_fbeb ._agd =_fbeb ._agd .Rotate (angle )};func (_fdfe *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_fdfe .Translate (x ,y );
_fdfe .Scale (sx ,sy );_fdfe .Translate (-x ,-y );};func (_ecc stops )Less (i ,j int )bool {return _ecc [i ]._cdec < _ecc [j ]._cdec };func (_fdf *Context )SetFillRGBA (r ,g ,b ,a float64 ){_ccg :=_gg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_fdf ._ag =_ccg ;_fdf ._cged =_gbgc (_ccg );};func (_gcd *Context )FillPattern ()_e .Pattern {return _gcd ._cged };func (_fda *Context )SetPixel (x ,y int ){_fda ._cde .Set (x ,y ,_fda ._ag )};type linearGradient struct{_fff ,_cgf ,_gfb ,_daf float64 ;
_dgb stops ;};func (_dda *Context )stroke (_bagc _beb .Painter ){_agc :=_dda ._dgf ;if len (_dda ._bf )> 0{_agc =_egb (_agc ,_dda ._bf ,_dda ._fbe );}else {_agc =_fcbd (_bed (_agc ));};_bbg :=_dda ._fdg ;_bbg .UseNonZeroWinding =true ;_bbg .Clear ();_ada :=(_dda ._agd .ScalingFactorX ()+_dda ._agd .ScalingFactorY ())/2;
_bbg .AddStroke (_agc ,_fgfba (_dda ._cgb *_ada ),_dda .capper (),_dda .joiner ());_bbg .Rasterize (_bagc );};func (_cba *Context )joiner ()_beb .Joiner {switch _cba ._dd {case _e .LineJoinBevel :return _beb .BevelJoiner ;case _e .LineJoinRound :return _beb .RoundJoiner ;
};return nil ;};func (_dbb *Context )SetStrokeStyle (pattern _e .Pattern ){_dbb ._bgdf =pattern };func (_abb *Context )DrawCircle (x ,y ,r float64 ){_abb .NewSubPath ();_abb .DrawEllipticalArc (x ,y ,r ,r ,0,2*_f .Pi );_abb .ClosePath ();};func (_geg *Context )LineTo (x ,y float64 ){if !_geg ._aea {_geg .MoveTo (x ,y );
}else {x ,y =_geg .Transform (x ,y );_geb :=_fef .NewPoint (x ,y );_bgg :=_dfdd (_geb );_geg ._dgf .Add1 (_bgg );_geg ._dc .Add1 (_bgg );_geg ._efg =_geb ;};};func (_gebb *Context )capper ()_beb .Capper {switch _gebb ._bcf {case _e .LineCapButt :return _beb .ButtCapper ;
case _e .LineCapRound :return _beb .RoundCapper ;case _e .LineCapSquare :return _beb .SquareCapper ;};return nil ;};func (_fddb *patternPainter )Paint (ss []_beb .Span ,done bool ){_becf :=_fddb ._efa .Bounds ();for _ ,_ggad :=range ss {if _ggad .Y < _becf .Min .Y {continue ;
};if _ggad .Y >=_becf .Max .Y {return ;};if _ggad .X0 < _becf .Min .X {_ggad .X0 =_becf .Min .X ;};if _ggad .X1 > _becf .Max .X {_ggad .X1 =_becf .Max .X ;};if _ggad .X0 >=_ggad .X1 {continue ;};const _gfa =1<<16-1;_gda :=_ggad .Y -_fddb ._efa .Rect .Min .Y ;
_dgda :=_ggad .X0 -_fddb ._efa .Rect .Min .X ;_adbf :=(_ggad .Y -_fddb ._efa .Rect .Min .Y )*_fddb ._efa .Stride +(_ggad .X0 -_fddb ._efa .Rect .Min .X )*4;_ccca :=_adbf +(_ggad .X1 -_ggad .X0 )*4;for _age ,_caaad :=_adbf ,_dgda ;_age < _ccca ;_age ,_caaad =_age +4,_caaad +1{_gbge :=_ggad .Alpha ;
if _fddb ._caeb !=nil {_gbge =_gbge *uint32 (_fddb ._caeb .AlphaAt (_caaad ,_gda ).A )/255;if _gbge ==0{continue ;};};_ddfd :=_fddb ._ebbe .ColorAt (_caaad ,_gda );_bgc ,_egba ,_dbf ,_fcfc :=_ddfd .RGBA ();_fddf :=uint32 (_fddb ._efa .Pix [_age +0]);_bee :=uint32 (_fddb ._efa .Pix [_age +1]);
_gbdfe :=uint32 (_fddb ._efa .Pix [_age +2]);_cbfe :=uint32 (_fddb ._efa .Pix [_age +3]);_aabd :=(_gfa -(_fcfc *_gbge /_gfa ))*0x101;_fddb ._efa .Pix [_age +0]=uint8 ((_fddf *_aabd +_bgc *_gbge )/_gfa >>8);_fddb ._efa .Pix [_age +1]=uint8 ((_bee *_aabd +_egba *_gbge )/_gfa >>8);
_fddb ._efa .Pix [_age +2]=uint8 ((_gbdfe *_aabd +_dbf *_gbge )/_gfa >>8);_fddb ._efa .Pix [_age +3]=uint8 ((_cbfe *_aabd +_fcfc *_gbge )/_gfa >>8);};};};func (_bbgb *linearGradient )AddColorStop (offset float64 ,color _gg .Color ){_bbgb ._dgb =append (_bbgb ._dgb ,stop {_cdec :offset ,_gaeb :color });
_c .Sort (_bbgb ._dgb );};func (_ead *Context )Clip (){_ead .ClipPreserve ();_ead .ClearPath ()};func (_cdeb *surfacePattern )ColorAt (x ,y int )_gg .Color {_aaca :=_cdeb ._ddaa .Bounds ();switch _cdeb ._fefg {case _eccc :if y >=_aaca .Dy (){return _gg .Transparent ;
};case _gdge :if x >=_aaca .Dx (){return _gg .Transparent ;};case _abad :if x >=_aaca .Dx ()||y >=_aaca .Dy (){return _gg .Transparent ;};};x =x %_aaca .Dx ()+_aaca .Min .X ;y =y %_aaca .Dy ()+_aaca .Min .Y ;return _cdeb ._ddaa .At (x ,y );};func (_ceg *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_ceg .MoveTo (x1 ,y1 );
_ceg .LineTo (x2 ,y2 )};func (_ccf *Context )InvertMask (){if _ccf ._cge ==nil {_ccf ._cge =_gd .NewAlpha (_ccf ._cde .Bounds ());}else {for _egea ,_fbd :=range _ccf ._cge .Pix {_ccf ._cge .Pix [_egea ]=255-_fbd ;};};};func (_abbb stops )Len ()int {return len (_abbb )};
func _bcfa (_acdd _gd .Image )*_gd .RGBA {_gege :=_acdd .Bounds ();_gbca :=_gd .NewRGBA (_gege );_fe .Draw (_gbca ,_gege ,_acdd ,_gege .Min ,_fe .Src );return _gbca ;};func (_egf *Context )Scale (x ,y float64 ){_egf ._agd =_egf ._agd .Scale (x ,y )};func (_cbaa *Context )StrokePreserve (){var _gggd _beb .Painter ;
if _cbaa ._cge ==nil {if _baf ,_dcc :=_cbaa ._bgdf .(*solidPattern );_dcc {_cf :=_beb .NewRGBAPainter (_cbaa ._cde );_cf .SetColor (_baf ._gbdf );_gggd =_cf ;};};if _gggd ==nil {_gggd =_bcee (_cbaa ._cde ,_cbaa ._cge ,_cbaa ._bgdf );};_cbaa .stroke (_gggd );
};func (_caaa *solidPattern )ColorAt (x ,y int )_gg .Color {return _caaa ._gbdf };func (_agdc *Context )fill (_ege _beb .Painter ){_dbbb :=_agdc ._dc ;if _agdc ._aea {_dbbb =make (_beb .Path ,len (_agdc ._dc ));copy (_dbbb ,_agdc ._dc );_dbbb .Add1 (_dfdd (_agdc ._eef ));
};_dab :=_agdc ._fdg ;_dab .UseNonZeroWinding =_agdc ._caa ==_e .FillRuleWinding ;_dab .Clear ();_dab .AddPath (_dbbb );_dab .Rasterize (_ege );};type solidPattern struct{_gbdf _gg .Color };func (_bbc *Context )SetRGB255 (r ,g ,b int ){_bbc .SetRGBA255 (r ,g ,b ,255)};
func (_ebd *Context )Transform (x ,y float64 )(_fadg ,_dac float64 ){return _ebd ._agd .Transform (x ,y )};func (_gcf *Context )Translate (x ,y float64 ){_gcf ._agd =_gcf ._agd .Translate (x ,y )};func _egdc (_bdfa _fec .Int26_6 )float64 {const _gbgg ,_bggf =6,1<<6-1;
if _bdfa >=0{return float64 (_bdfa >>_gbgg )+float64 (_bdfa &_bggf )/64;};_bdfa =-_bdfa ;if _bdfa >=0{return -(float64 (_bdfa >>_gbgg )+float64 (_bdfa &_bggf )/64);};return 0;};func (_ebf *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_ebf ._aea {_ebf .MoveTo (x1 ,y1 );
};_fggf ,_ddb :=_ebf ._efg .X ,_ebf ._efg .Y ;x1 ,y1 =_ebf .Transform (x1 ,y1 );x2 ,y2 =_ebf .Transform (x2 ,y2 );x3 ,y3 =_ebf .Transform (x3 ,y3 );_bag :=_dbe (_fggf ,_ddb ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_ffe :=_dfdd (_ebf ._efg );for _ ,_feg :=range _bag [1:]{_dgcg :=_dfdd (_feg );
if _dgcg ==_ffe {continue ;};_ffe =_dgcg ;_ebf ._dgf .Add1 (_dgcg );_ebf ._dc .Add1 (_dgcg );_ebf ._efg =_feg ;};};func (_cee *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _gbc =16;for _cad :=0;_cad < _gbc ;_cad ++{_febe :=float64 (_cad +0)/_gbc ;
_bcbe :=float64 (_cad +1)/_gbc ;_adg :=angle1 +(angle2 -angle1 )*_febe ;_fbb :=angle1 +(angle2 -angle1 )*_bcbe ;_fgbf :=x +rx *_f .Cos (_adg );_edd :=y +ry *_f .Sin (_adg );_ddbef :=x +rx *_f .Cos ((_adg +_fbb )/2);_cec :=y +ry *_f .Sin ((_adg +_fbb )/2);
_fbde :=x +rx *_f .Cos (_fbb );_cae :=y +ry *_f .Sin (_fbb );_ceed :=2*_ddbef -_fgbf /2-_fbde /2;_bdd :=2*_cec -_edd /2-_cae /2;if _cad ==0{if _cee ._aea {_cee .LineTo (_fgbf ,_edd );}else {_cee .MoveTo (_fgbf ,_edd );};};_cee .QuadraticTo (_ceed ,_bdd ,_fbde ,_cae );
};};func (_ced *Context )drawRegularPolygon (_gece int ,_ecf ,_agcb ,_fgf ,_ecdg float64 ){_dge :=2*_f .Pi /float64 (_gece );_ecdg -=_f .Pi /2;if _gece %2==0{_ecdg +=_dge /2;};_ced .NewSubPath ();for _bdda :=0;_bdda < _gece ;_bdda ++{_ebb :=_ecdg +_dge *float64 (_bdda );
_ced .LineTo (_ecf +_fgf *_f .Cos (_ebb ),_agcb +_fgf *_f .Sin (_ebb ));};_ced .ClosePath ();};func (_cca *Context )SetFillRule (fillRule _e .FillRule ){_cca ._caa =fillRule };func (_degf *Context )SetDash (dashes ...float64 ){_degf ._bf =dashes };func (_fgfb *Context )Identity (){_fgfb ._agd =_fef .IdentityMatrix ()};
func (_ffbe *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_ffbe .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );};func (_ccc *Context )Matrix ()_fef .Matrix {return _ccc ._agd };func (_ea *Context )Stroke (){_ea .StrokePreserve ();_ea .ClearPath ()};
func (_fgg *Context )SetColor (c _gg .Color ){_fgg .setFillAndStrokeColor (c )};type Context struct{_dgd int ;_egd int ;_fdg *_beb .Rasterizer ;_cde *_gd .RGBA ;_cge *_gd .Alpha ;_ag _gg .Color ;_cged _e .Pattern ;_bgdf _e .Pattern ;_dgf _beb .Path ;_dc _beb .Path ;
_eef _fef .Point ;_efg _fef .Point ;_aea bool ;_bf []float64 ;_fbe float64 ;_cgb float64 ;_bcf _e .LineCap ;_dd _e .LineJoin ;_caa _e .FillRule ;_agd _fef .Matrix ;_fce _e .TextState ;_fdb []*Context ;};func (_dbag *Context )DrawStringAnchored (s string ,face _fb .Face ,x ,y ,ax ,ay float64 ){_gbcc ,_bcff :=_dbag .MeasureString (s ,face );
_dbag .drawString (s ,face ,x -ax *_gbcc ,y +ay *_bcff );};type stop struct{_cdec float64 ;_gaeb _gg .Color ;};func (_ffa *Context )ClipPreserve (){_agg :=_gd .NewAlpha (_gd .Rect (0,0,_ffa ._dgd ,_ffa ._egd ));_gdg :=_beb .NewAlphaOverPainter (_agg );
_ffa .fill (_gdg );if _ffa ._cge ==nil {_ffa ._cge =_agg ;}else {_bca :=_gd .NewAlpha (_gd .Rect (0,0,_ffa ._dgd ,_ffa ._egd ));_be .DrawMask (_bca ,_bca .Bounds (),_agg ,_gd .Point {},_ffa ._cge ,_gd .Point {},_be .Over );_ffa ._cge =_bca ;};};func NewContextForRGBA (im *_gd .RGBA )*Context {_egdf :=im .Bounds ().Size ().X ;
_ba :=im .Bounds ().Size ().Y ;return &Context {_dgd :_egdf ,_egd :_ba ,_fdg :_beb .NewRasterizer (_egdf ,_ba ),_cde :im ,_ag :_gg .Transparent ,_cged :_eba ,_bgdf :_ffd ,_cgb :1,_caa :_e .FillRuleWinding ,_agd :_fef .IdentityMatrix (),_fce :_e .NewTextState ()};
};func (_bcc *linearGradient )ColorAt (x ,y int )_gg .Color {if len (_bcc ._dgb )==0{return _gg .Transparent ;};_bgdd ,_bbda :=float64 (x ),float64 (y );_bdb ,_cab ,_bcfd ,_ebc :=_bcc ._fff ,_bcc ._cgf ,_bcc ._gfb ,_bcc ._daf ;_ceb ,_bfc :=_bcfd -_bdb ,_ebc -_cab ;
if _bfc ==0&&_ceb !=0{return _ddf ((_bgdd -_bdb )/_ceb ,_bcc ._dgb );};if _ceb ==0&&_bfc !=0{return _ddf ((_bbda -_cab )/_bfc ,_bcc ._dgb );};_cbff :=_ceb *(_bgdd -_bdb )+_bfc *(_bbda -_cab );if _cbff < 0{return _bcc ._dgb [0]._gaeb ;};_eaa :=_f .Hypot (_ceb ,_bfc );
_eda :=((_bgdd -_bdb )*-_bfc +(_bbda -_cab )*_ceb )/(_eaa *_eaa );_fgge ,_agff :=_bdb +_eda *-_bfc ,_cab +_eda *_ceb ;_ece :=_f .Hypot (_bgdd -_fgge ,_bbda -_agff )/_eaa ;return _ddf (_ece ,_bcc ._dgb );};func (_gaag *Context )SetRGB (r ,g ,b float64 ){_gaag .SetRGBA (r ,g ,b ,1)};
func _gdef (_fae ,_cfcd _gg .Color ,_cbe float64 )_gg .Color {_daee ,_aaba ,_eab ,_caab :=_fae .RGBA ();_ede ,_dec ,_acaf ,_bcdb :=_cfcd .RGBA ();return _gg .RGBA {_cade (_daee ,_ede ,_cbe ),_cade (_aaba ,_dec ,_cbe ),_cade (_eab ,_acaf ,_cbe ),_cade (_caab ,_bcdb ,_cbe )};
};func (_feb *Context )setFillAndStrokeColor (_cbd _gg .Color ){_feb ._ag =_cbd ;_feb ._cged =_gbgc (_cbd );_feb ._bgdf =_gbgc (_cbd );};func (_bbdg *Context )MoveTo (x ,y float64 ){if _bbdg ._aea {_bbdg ._dc .Add1 (_dfdd (_bbdg ._eef ));};x ,y =_bbdg .Transform (x ,y );
_dbec :=_fef .NewPoint (x ,y );_gcb :=_dfdd (_dbec );_bbdg ._dgf .Start (_gcb );_bbdg ._dc .Start (_gcb );_bbdg ._eef =_dbec ;_bbdg ._efg =_dbec ;_bbdg ._aea =true ;};func (_ab *Context )NewSubPath (){if _ab ._aea {_ab ._dc .Add1 (_dfdd (_ab ._eef ));};
_ab ._aea =false ;};type repeatOp int ;func _fa (_eg ,_cb ,_aa ,_ca ,_af ,_bef ,_fd float64 )(_cgc ,_ggg float64 ){_d :=1-_fd ;_bb :=_d *_d ;_afg :=2*_d *_fd ;_ega :=_fd *_fd ;_cgc =_bb *_eg +_afg *_aa +_ega *_af ;_ggg =_bb *_cb +_afg *_ca +_ega *_bef ;
return ;};func (_ggb *Context )RotateAbout (angle ,x ,y float64 ){_ggb .Translate (x ,y );_ggb .Rotate (angle );_ggb .Translate (-x ,-y );};func _fcbd (_ecdc [][]_fef .Point )_beb .Path {var _gaec _beb .Path ;for _ ,_adf :=range _ecdc {var _gbg _fec .Point26_6 ;
for _eddb ,_ddg :=range _adf {_edad :=_dfdd (_ddg );if _eddb ==0{_gaec .Start (_edad );}else {_bedd :=_edad .X -_gbg .X ;_cdg :=_edad .Y -_gbg .Y ;if _bedd < 0{_bedd =-_bedd ;};if _cdg < 0{_cdg =-_cdg ;};if _bedd +_cdg > 8{_gaec .Add1 (_edad );};};_gbg =_edad ;
};};return _gaec ;};func NewLinearGradient (x0 ,y0 ,x1 ,y1 float64 )_e .Gradient {_ffba :=&linearGradient {_fff :x0 ,_cgf :y0 ,_gfb :x1 ,_daf :y1 };return _ffba ;};const (_bba repeatOp =iota ;_eccc ;_gdge ;_abad ;);func (_bdcg *Context )SetMatrix (m _fef .Matrix ){_bdcg ._agd =m };
func NewRadialGradient (x0 ,y0 ,r0 ,x1 ,y1 ,r1 float64 )_e .Gradient {_aec :=circle {x0 ,y0 ,r0 };_fefb :=circle {x1 ,y1 ,r1 };_abf :=circle {x1 -x0 ,y1 -y0 ,r1 -r0 };_eddd :=_cead (_abf ._edg ,_abf ._efc ,-_abf ._eecdf ,_abf ._edg ,_abf ._efc ,_abf ._eecdf );
var _efgg float64 ;if _eddd !=0{_efgg =1.0/_eddd ;};_ebad :=-_aec ._eecdf ;_afd :=&radialGradient {_dde :_aec ,_fegd :_fefb ,_eedd :_abf ,_fgga :_eddd ,_abe :_efgg ,_bgdfc :_ebad };return _afd ;};func (_egc *Context )SetLineJoin (lineJoin _e .LineJoin ){_egc ._dd =lineJoin };
func (_gfe *radialGradient )AddColorStop (offset float64 ,color _gg .Color ){_gfe ._dacb =append (_gfe ._dacb ,stop {_cdec :offset ,_gaeb :color });_c .Sort (_gfe ._dacb );};func _ddf (_eea float64 ,_ddae stops )_gg .Color {if _eea <=0.0||len (_ddae )==1{return _ddae [0]._gaeb ;
};_fggef :=_ddae [len (_ddae )-1];if _eea >=_fggef ._cdec {return _fggef ._gaeb ;};for _fgfa ,_dca :=range _ddae [1:]{if _eea < _dca ._cdec {_eea =(_eea -_ddae [_fgfa ]._cdec )/(_dca ._cdec -_ddae [_fgfa ]._cdec );return _gdef (_ddae [_fgfa ]._gaeb ,_dca ._gaeb ,_eea );
};};return _fggef ._gaeb ;};func _efe (_gaf ,_egac ,_ge ,_cac ,_ac ,_aef ,_de ,_gdc ,_ce float64 )(_da ,_ec float64 ){_acd :=1-_ce ;_gb :=_acd *_acd *_acd ;_gag :=3*_acd *_acd *_ce ;_cea :=3*_acd *_ce *_ce ;_fefc :=_ce *_ce *_ce ;_da =_gb *_gaf +_gag *_ge +_cea *_ac +_fefc *_de ;
_ec =_gb *_egac +_gag *_cac +_cea *_aef +_fefc *_gdc ;return ;};type patternPainter struct{_efa *_gd .RGBA ;_caeb *_gd .Alpha ;_ebbe _e .Pattern ;};func _cade (_bccb ,_aag uint32 ,_ged float64 )uint8 {return uint8 (int32 (float64 (_bccb )*(1.0-_ged )+float64 (_aag )*_ged )>>8);
};func _bcee (_ebaa *_gd .RGBA ,_ddab *_gd .Alpha ,_ffc _e .Pattern )*patternPainter {return &patternPainter {_ebaa ,_ddab ,_ffc };};func (_bbce *Context )TextState ()*_e .TextState {return &_bbce ._fce };func (_dea *Context )ShearAbout (sx ,sy ,x ,y float64 ){_dea .Translate (x ,y );
_dea .Shear (sx ,sy );_dea .Translate (-x ,-y );};func (_agf *Context )ClearPath (){_agf ._dgf .Clear ();_agf ._dc .Clear ();_agf ._aea =false };func (_fcea *Context )Height ()int {return _fcea ._egd };func _gbgc (_faad _gg .Color )_e .Pattern {return &solidPattern {_gbdf :_faad }};
func (_fde *Context )DrawImageAnchored (im _gd .Image ,x ,y int ,ax ,ay float64 ){_caae :=im .Bounds ().Size ();x -=int (ax *float64 (_caae .X ));y -=int (ay *float64 (_caae .Y ));_dbea :=_be .BiLinear ;_gac :=_fde ._agd .Clone ().Translate (float64 (x ),float64 (y ));
_ffef :=_bgd .Aff3 {_gac [0],_gac [3],_gac [6],_gac [1],_gac [4],_gac [7]};if _fde ._cge ==nil {_dbea .Transform (_fde ._cde ,_ffef ,im ,im .Bounds (),_be .Over ,nil );}else {_dbea .Transform (_fde ._cde ,_ffef ,im ,im .Bounds (),_be .Over ,&_be .Options {DstMask :_fde ._cge ,DstMaskP :_gd .Point {}});
};};type radialGradient struct{_dde ,_fegd ,_eedd circle ;_fgga ,_abe float64 ;_bgdfc float64 ;_dacb stops ;};func (_aab *Context )Clear (){_ed :=_gd .NewUniform (_aab ._ag );_be .Draw (_aab ._cde ,_aab ._cde .Bounds (),_ed ,_gd .Point {},_be .Src );};
var (_eba =_gbgc (_gg .White );_ffd =_gbgc (_gg .Black ););func (_aefa *Context )ResetClip (){_aefa ._cge =nil };func _ga (_cd ,_bbd ,_ef ,_fc ,_aad ,_db float64 )[]_fef .Point {_ad :=(_f .Hypot (_ef -_cd ,_fc -_bbd )+_f .Hypot (_aad -_ef ,_db -_fc ));
_ae :=int (_ad +0.5);if _ae < 4{_ae =4;};_bd :=float64 (_ae )-1;_faa :=make ([]_fef .Point ,_ae );for _caf :=0;_caf < _ae ;_caf ++{_ff :=float64 (_caf )/_bd ;_df ,_aac :=_fa (_cd ,_bbd ,_ef ,_fc ,_aad ,_db ,_ff );_faa [_caf ]=_fef .NewPoint (_df ,_aac );
};return _faa ;};func (_eed *Context )DrawRectangle (x ,y ,w ,h float64 ){_eed .NewSubPath ();_eed .MoveTo (x ,y );_eed .LineTo (x +w ,y );_eed .LineTo (x +w ,y +h );_eed .LineTo (x ,y +h );_eed .ClosePath ();};func (_bgde *Context )Shear (x ,y float64 ){_bgde ._agd .Shear (x ,y )};
func (_cc *Context )LineWidth ()float64 {return _cc ._cgb };func (_aed *Context )SetRGBA255 (r ,g ,b ,a int ){_aed ._ag =_gg .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};_aed .setFillAndStrokeColor (_aed ._ag );};func _bae (_cfge float64 )float64 {return _cfge *_f .Pi /180};
func _dbe (_eca ,_dg ,_fg ,_gc ,_gf ,_eb ,_bdf ,_gab float64 )[]_fef .Point {_bc :=(_f .Hypot (_fg -_eca ,_gc -_dg )+_f .Hypot (_gf -_fg ,_eb -_gc )+_f .Hypot (_bdf -_gf ,_gab -_eb ));_ee :=int (_bc +0.5);if _ee < 4{_ee =4;};_bebe :=float64 (_ee )-1;_dae :=make ([]_fef .Point ,_ee );
for _ded :=0;_ded < _ee ;_ded ++{_deg :=float64 (_ded )/_bebe ;_dgc ,_gaa :=_efe (_eca ,_dg ,_fg ,_gc ,_gf ,_eb ,_bdf ,_gab ,_deg );_dae [_ded ]=_fef .NewPoint (_dgc ,_gaa );};return _dae ;};func (_bfd *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_gde :=_gg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_bfd ._bgdf =_gbgc (_gde );};type stops []stop ;func NewContextForImage (im _gd .Image )*Context {return NewContextForRGBA (_bcfa (im ))};type surfacePattern struct{_ddaa _gd .Image ;_fefg repeatOp ;};func (_adb *Context )SetLineWidth (lineWidth float64 ){_adb ._cgb =lineWidth };
func (_ffb *Context )Image ()_gd .Image {return _ffb ._cde };func (_gaab *Context )Fill (){_gaab .FillPreserve ();_gaab .ClearPath ()};func _egb (_fcf _beb .Path ,_gfef []float64 ,_gcc float64 )_beb .Path {return _fcbd (_ecdgf (_bed (_fcf ),_gfef ,_gcc ));
};func (_aede *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_eac ,_aefab ,_eae ,_aee :=x ,x +r ,x +w -r ,x +w ;_ffg ,_fdbb ,_fgb ,_daeb :=y ,y +r ,y +h -r ,y +h ;_aede .NewSubPath ();_aede .MoveTo (_aefab ,_ffg );_aede .LineTo (_eae ,_ffg );_aede .DrawArc (_eae ,_fdbb ,r ,_bae (270),_bae (360));
_aede .LineTo (_aee ,_fgb );_aede .DrawArc (_eae ,_fgb ,r ,_bae (0),_bae (90));_aede .LineTo (_aefab ,_daeb );_aede .DrawArc (_aefab ,_fgb ,r ,_bae (90),_bae (180));_aede .LineTo (_eac ,_fdbb );_aede .DrawArc (_aefab ,_fdbb ,r ,_bae (180),_bae (270));_aede .ClosePath ();
};func _ecdgf (_adea [][]_fef .Point ,_ccba []float64 ,_bgdeb float64 )[][]_fef .Point {var _cggb [][]_fef .Point ;if len (_ccba )==0{return _adea ;};if len (_ccba )==1{_ccba =append (_ccba ,_ccba [0]);};for _ ,_ebfg :=range _adea {if len (_ebfg )< 2{continue ;
};_geca :=_ebfg [0];_efd :=1;_ddba :=0;_fdd :=0.0;if _bgdeb !=0{var _effc float64 ;for _ ,_bccf :=range _ccba {_effc +=_bccf ;};_bgdeb =_f .Mod (_bgdeb ,_effc );if _bgdeb < 0{_bgdeb +=_effc ;};for _bedc ,_eddf :=range _ccba {_bgdeb -=_eddf ;if _bgdeb < 0{_ddba =_bedc ;
_fdd =_eddf +_bgdeb ;break ;};};};var _fed []_fef .Point ;_fed =append (_fed ,_geca );for _efd < len (_ebfg ){_cfg :=_ccba [_ddba ];_fca :=_ebfg [_efd ];_ccce :=_geca .Distance (_fca );_gbd :=_cfg -_fdd ;if _ccce > _gbd {_egacb :=_gbd /_ccce ;_afe :=_geca .Interpolate (_fca ,_egacb );
_fed =append (_fed ,_afe );if _ddba %2==0&&len (_fed )> 1{_cggb =append (_cggb ,_fed );};_fed =nil ;_fed =append (_fed ,_afe );_fdd =0;_geca =_afe ;_ddba =(_ddba +1)%len (_ccba );}else {_fed =append (_fed ,_fca );_geca =_fca ;_fdd +=_ccce ;_efd ++;};};
if _ddba %2==0&&len (_fed )> 1{_cggb =append (_cggb ,_fed );};};return _cggb ;};func _bed (_fgag _beb .Path )[][]_fef .Point {var _ebff [][]_fef .Point ;var _eff []_fef .Point ;var _cga ,_ceeg float64 ;for _bgaa :=0;_bgaa < len (_fgag );{switch _fgag [_bgaa ]{case 0:if len (_eff )> 0{_ebff =append (_ebff ,_eff );
_eff =nil ;};_aggb :=_egdc (_fgag [_bgaa +1]);_aedg :=_egdc (_fgag [_bgaa +2]);_eff =append (_eff ,_fef .NewPoint (_aggb ,_aedg ));_cga ,_ceeg =_aggb ,_aedg ;_bgaa +=4;case 1:_adde :=_egdc (_fgag [_bgaa +1]);_edaf :=_egdc (_fgag [_bgaa +2]);_eff =append (_eff ,_fef .NewPoint (_adde ,_edaf ));
_cga ,_ceeg =_adde ,_edaf ;_bgaa +=4;case 2:_efgf :=_egdc (_fgag [_bgaa +1]);_bge :=_egdc (_fgag [_bgaa +2]);_addg :=_egdc (_fgag [_bgaa +3]);_cag :=_egdc (_fgag [_bgaa +4]);_gga :=_ga (_cga ,_ceeg ,_efgf ,_bge ,_addg ,_cag );_eff =append (_eff ,_gga ...);
_cga ,_ceeg =_addg ,_cag ;_bgaa +=6;case 3:_cedb :=_egdc (_fgag [_bgaa +1]);_dga :=_egdc (_fgag [_bgaa +2]);_bfb :=_egdc (_fgag [_bgaa +3]);_bec :=_egdc (_fgag [_bgaa +4]);_fagd :=_egdc (_fgag [_bgaa +5]);_caee :=_egdc (_fgag [_bgaa +6]);_aba :=_dbe (_cga ,_ceeg ,_cedb ,_dga ,_bfb ,_bec ,_fagd ,_caee );
_eff =append (_eff ,_aba ...);_cga ,_ceeg =_fagd ,_caee ;_bgaa +=8;default:_bg .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_fgag );return _ebff ;};};if len (_eff )> 0{_ebff =append (_ebff ,_eff );
};return _ebff ;};func (_baae *Context )ClosePath (){if _baae ._aea {_ccgd :=_dfdd (_baae ._eef );_baae ._dgf .Add1 (_ccgd );_baae ._dc .Add1 (_ccgd );_baae ._efg =_baae ._eef ;};};func (_dgdb *Context )StrokePattern ()_e .Pattern {return _dgdb ._bgdf };
func (_gged *Context )Push (){_bbdgd :=*_gged ;_gged ._fdb =append (_gged ._fdb ,&_bbdgd )};func (_dfd *Context )SetMask (mask *_gd .Alpha )error {if mask .Bounds ().Size ()!=_dfd ._cde .Bounds ().Size (){return _cg .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_dfd ._cge =mask ;return nil ;};func (_dcb *Context )SetRGBA (r ,g ,b ,a float64 ){_dcb ._ag =_gg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_dcb .setFillAndStrokeColor (_dcb ._ag );};func (_affd *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_affd .NewSubPath ();
_affd .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_f .Pi );_affd .ClosePath ();};func (_abd *Context )FillPreserve (){var _ebe _beb .Painter ;if _abd ._cge ==nil {if _bgb ,_ddbe :=_abd ._cged .(*solidPattern );_ddbe {_fbf :=_beb .NewRGBAPainter (_abd ._cde );
_fbf .SetColor (_bgb ._gbdf );_ebe =_fbf ;};};if _ebe ==nil {_ebe =_bcee (_abd ._cde ,_abd ._cge ,_abd ._cged );};_abd .fill (_ebe );};func (_gaaf stops )Swap (i ,j int ){_gaaf [i ],_gaaf [j ]=_gaaf [j ],_gaaf [i ]};func (_gfdb *Context )drawString (_caaea string ,_dcbe _fb .Face ,_ebba ,_cbf float64 ){_gef :=&_fb .Drawer {Src :_gd .NewUniform (_gfdb ._ag ),Face :_dcbe ,Dot :_dfdd (_fef .NewPoint (_ebba ,_cbf ))};
_ccb :=rune (-1);for _ ,_ace :=range _caaea {if _ccb >=0{_gef .Dot .X +=_gef .Face .Kern (_ccb ,_ace );};_bga ,_fcb ,_dcbeb ,_gcbb ,_dba :=_gef .Face .Glyph (_gef .Dot ,_ace );if !_dba {continue ;};_aggg :=_bga .Sub (_bga .Min );_aaf :=_gd .NewRGBA (_aggg );
_be .DrawMask (_aaf ,_aggg ,_gef .Src ,_gd .Point {},_fcb ,_dcbeb ,_be .Over );var _eec *_be .Options ;if _gfdb ._cge !=nil {_eec =&_be .Options {DstMask :_gfdb ._cge ,DstMaskP :_gd .Point {}};};_gega :=_gfdb ._agd .Clone ().Translate (float64 (_bga .Min .X ),float64 (_bga .Min .Y ));
_fga :=_bgd .Aff3 {_gega [0],_gega [3],_gega [6],_gega [1],_gega [4],_gega [7]};_be .BiLinear .Transform (_gfdb ._cde ,_fga ,_aaf ,_aggg ,_be .Over ,_eec );_gef .Dot .X +=_gcbb ;_ccb =_ace ;};};func (_gae *Context )Width ()int {return _gae ._dgd };func _dabd (_bcba _gd .Image ,_bce repeatOp )_e .Pattern {return &surfacePattern {_ddaa :_bcba ,_fefg :_bce };
};func (_dfa *Context )MeasureString (s string ,face _fb .Face )(_caef ,_edc float64 ){_aca :=&_fb .Drawer {Face :face };_eecd :=_aca .MeasureString (s );return float64 (_eecd >>6),_dfa ._fce .Tf .Size ;};func _cead (_aae ,_cbaab ,_ddde ,_geeg ,_eadf ,_abc float64 )float64 {return _aae *_geeg +_cbaab *_eadf +_ddde *_abc ;
};