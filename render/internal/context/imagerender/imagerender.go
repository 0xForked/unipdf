//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_da "errors";_e "fmt";_faa "github.com/unidoc/freetype/raster";_ef "github.com/unidoc/unipdf/v3/common";_ed "github.com/unidoc/unipdf/v3/internal/transform";_a "github.com/unidoc/unipdf/v3/render/internal/context";_f "golang.org/x/image/draw";
_ee "golang.org/x/image/font";_ff "golang.org/x/image/math/f64";_fa "golang.org/x/image/math/fixed";_bd "image";_d "image/color";_eb "image/draw";_g "math";_gc "sort";_be "strings";);func _dcga (_fccc _bd .Image ,_dcge repeatOp )_a .Pattern {return &surfacePattern {_cbb :_fccc ,_ggab :_dcge };
};func _egcb (_cgea string )(_eaacg ,_gfb ,_ddda ,_bcf int ){_cgea =_be .TrimPrefix (_cgea ,"\u0023");_bcf =255;if len (_cgea )==3{_beca :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_e .Sscanf (_cgea ,_beca ,&_eaacg ,&_gfb ,&_ddda );_eaacg |=_eaacg <<4;
_gfb |=_gfb <<4;_ddda |=_ddda <<4;};if len (_cgea )==6{_gdgf :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_e .Sscanf (_cgea ,_gdgf ,&_eaacg ,&_gfb ,&_ddda );};if len (_cgea )==8{_cged :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_e .Sscanf (_cgea ,_cged ,&_eaacg ,&_gfb ,&_ddda ,&_bcf );};return ;};func (_fda *Context )DrawImage (im _bd .Image ,x ,y int ){_fda .DrawImageAnchored (im ,x ,y ,0,0)};func (_efe *Context )SetLineWidth (lineWidth float64 ){_efe ._eca =lineWidth };func (_fbad *Context )SetMatrix (m _ed .Matrix ){_fbad ._ea =m };
func (_bef *Context )ResetClip (){_bef ._fed =nil };func (_gcbb *Context )SetFillRGBA (r ,g ,b ,a float64 ){_abe :=_d .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_gcbb ._gec =_abe ;_gcbb ._gdf =_fdc (_abe );};type repeatOp int ;
func (_fcd *Context )FillPattern ()_a .Pattern {return _fcd ._gdf };func (_ede *Context )SetStrokeStyle (pattern _a .Pattern ){_ede ._afad =pattern };func _eeb (_gde ,_daa ,_ffg ,_gce ,_cg ,_fgc ,_bb ,_ddf ,_fdb float64 )(_ga ,_fdf float64 ){_ba :=1-_fdb ;
_cbf :=_ba *_ba *_ba ;_fc :=3*_ba *_ba *_fdb ;_fe :=3*_ba *_fdb *_fdb ;_fef :=_fdb *_fdb *_fdb ;_ga =_cbf *_gde +_fc *_ffg +_fe *_cg +_fef *_bb ;_fdf =_cbf *_daa +_fc *_gce +_fe *_fgc +_fef *_ddf ;return ;};func (_cgc *Context )SetPixel (x ,y int ){_cgc ._fba .Set (x ,y ,_cgc ._gec )};
type stops []stop ;func (_eag *Context )SetRGB255 (r ,g ,b int ){_eag .SetRGBA255 (r ,g ,b ,255)};func (_aag *Context )Transform (x ,y float64 )(_gaa ,_gbdac float64 ){return _aag ._ea .Transform (x ,y )};func (_gfa *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_gfa ._ded {_gfa .MoveTo (x1 ,y1 );
};x1 ,y1 =_gfa .Transform (x1 ,y1 );x2 ,y2 =_gfa .Transform (x2 ,y2 );_gab :=_ed .NewPoint (x1 ,y1 );_bga :=_ed .NewPoint (x2 ,y2 );_cc :=_geda (_gab );_ega :=_geda (_bga );_gfa ._gaf .Add2 (_cc ,_ega );_gfa ._gbd .Add2 (_cc ,_ega );_gfa ._cd =_bga ;};
func (_ceed *Context )drawRegularPolygon (_caf int ,_fag ,_bcbg ,_deb ,_fea float64 ){_aec :=2*_g .Pi /float64 (_caf );_fea -=_g .Pi /2;if _caf %2==0{_fea +=_aec /2;};_ceed .NewSubPath ();for _bced :=0;_bced < _caf ;_bced ++{_dcfg :=_fea +_aec *float64 (_bced );
_ceed .LineTo (_fag +_deb *_g .Cos (_dcfg ),_bcbg +_deb *_g .Sin (_dcfg ));};_ceed .ClosePath ();};func _gdff (_cffe _faa .Path )[][]_ed .Point {var _cagb [][]_ed .Point ;var _gcd []_ed .Point ;var _feag ,_gfde float64 ;for _beee :=0;_beee < len (_cffe );
{switch _cffe [_beee ]{case 0:if len (_gcd )> 0{_cagb =append (_cagb ,_gcd );_gcd =nil ;};_gafd :=_fffa (_cffe [_beee +1]);_befgb :=_fffa (_cffe [_beee +2]);_gcd =append (_gcd ,_ed .NewPoint (_gafd ,_befgb ));_feag ,_gfde =_gafd ,_befgb ;_beee +=4;case 1:_aae :=_fffa (_cffe [_beee +1]);
_efa :=_fffa (_cffe [_beee +2]);_gcd =append (_gcd ,_ed .NewPoint (_aae ,_efa ));_feag ,_gfde =_aae ,_efa ;_beee +=4;case 2:_cfd :=_fffa (_cffe [_beee +1]);_gga :=_fffa (_cffe [_beee +2]);_edeb :=_fffa (_cffe [_beee +3]);_bbc :=_fffa (_cffe [_beee +4]);
_deg :=_gb (_feag ,_gfde ,_cfd ,_gga ,_edeb ,_bbc );_gcd =append (_gcd ,_deg ...);_feag ,_gfde =_edeb ,_bbc ;_beee +=6;case 3:_cga :=_fffa (_cffe [_beee +1]);_adb :=_fffa (_cffe [_beee +2]);_gafac :=_fffa (_cffe [_beee +3]);_ddd :=_fffa (_cffe [_beee +4]);
_bcag :=_fffa (_cffe [_beee +5]);_gdfc :=_fffa (_cffe [_beee +6]);_dcd :=_efd (_feag ,_gfde ,_cga ,_adb ,_gafac ,_ddd ,_bcag ,_gdfc );_gcd =append (_gcd ,_dcd ...);_feag ,_gfde =_bcag ,_gdfc ;_beee +=8;default:_ef .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_cffe );
return _cagb ;};};if len (_gcd )> 0{_cagb =append (_cagb ,_gcd );};return _cagb ;};var (_ddc =_fdc (_d .White );_dcf =_fdc (_d .Black ););func (_cdd *Context )ClosePath (){if _cdd ._ded {_ad :=_geda (_cdd ._gcb );_cdd ._gaf .Add1 (_ad );_cdd ._gbd .Add1 (_ad );
_cdd ._cd =_cdd ._gcb ;};};func _fdc (_cedg _d .Color )_a .Pattern {return &solidPattern {_dgb :_cedg }};func (_cdf *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_ddfge ,_faag ,_gbdc ,_cba :=x ,x +r ,x +w -r ,x +w ;_cfca ,_eagg ,_bba ,_dbf :=y ,y +r ,y +h -r ,y +h ;
_cdf .NewSubPath ();_cdf .MoveTo (_faag ,_cfca );_cdf .LineTo (_gbdc ,_cfca );_cdf .DrawArc (_gbdc ,_eagg ,r ,_ebe (270),_ebe (360));_cdf .LineTo (_cba ,_bba );_cdf .DrawArc (_gbdc ,_bba ,r ,_ebe (0),_ebe (90));_cdf .LineTo (_faag ,_dbf );_cdf .DrawArc (_faag ,_bba ,r ,_ebe (90),_ebe (180));
_cdf .LineTo (_ddfge ,_eagg );_cdf .DrawArc (_faag ,_eagg ,r ,_ebe (180),_ebe (270));_cdf .ClosePath ();};func (_cee *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_cee ._ded {_cee .MoveTo (x1 ,y1 );};_afd ,_bag :=_cee ._cd .X ,_cee ._cd .Y ;x1 ,y1 =_cee .Transform (x1 ,y1 );
x2 ,y2 =_cee .Transform (x2 ,y2 );x3 ,y3 =_cee .Transform (x3 ,y3 );_gbec :=_efd (_afd ,_bag ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_aeg :=_geda (_cee ._cd );for _ ,_ddfg :=range _gbec [1:]{_eaa :=_geda (_ddfg );if _eaa ==_aeg {continue ;};_aeg =_eaa ;_cee ._gaf .Add1 (_eaa );
_cee ._gbd .Add1 (_eaa );_cee ._cd =_ddfg ;};};type patternPainter struct{_gbg *_bd .RGBA ;_dgag *_bd .Alpha ;_eef _a .Pattern ;};const (_gaae repeatOp =iota ;_baae ;_agbf ;_aac ;);func (_gdfg *Context )DrawImageAnchored (im _bd .Image ,x ,y int ,ax ,ay float64 ){_fagf :=im .Bounds ().Size ();
x -=int (ax *float64 (_fagf .X ));y -=int (ay *float64 (_fagf .Y ));_eae :=_f .BiLinear ;_ffb :=_gdfg ._ea .Clone ().Translate (float64 (x ),float64 (y ));_eaf :=_ff .Aff3 {_ffb [0],_ffb [3],_ffb [6],_ffb [1],_ffb [4],_ffb [7]};if _gdfg ._fed ==nil {_eae .Transform (_gdfg ._fba ,_eaf ,im ,im .Bounds (),_f .Over ,nil );
}else {_eae .Transform (_gdfg ._fba ,_eaf ,im ,im .Bounds (),_f .Over ,&_f .Options {DstMask :_gdfg ._fed ,DstMaskP :_bd .Point {}});};};func (_gcbg *Context )Pop (){_ffbb :=*_gcbg ;_agag :=_gcbg ._dfaa ;_bbgb :=_agag [len (_agag )-1];*_gcbg =*_bbgb ;_gcbg ._gaf =_ffbb ._gaf ;
_gcbg ._gbd =_ffbb ._gbd ;_gcbg ._gcb =_ffbb ._gcb ;_gcbg ._cd =_ffbb ._cd ;_gcbg ._ded =_ffbb ._ded ;};func (_cf *Context )NewSubPath (){if _cf ._ded {_cf ._gbd .Add1 (_geda (_cf ._gcb ));};_cf ._ded =false ;};func _adcd (_ceea ,_acg uint32 ,_eggf float64 )uint8 {return uint8 (int32 (float64 (_ceea )*(1.0-_eggf )+float64 (_acg )*_eggf )>>8);
};func (_effa *Context )DrawString (s string ,face _ee .Face ,x ,y float64 ){_effa .DrawStringAnchored (s ,face ,x ,y ,0,0);};func (_dga *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _cge =16;for _cdda :=0;_cdda < _cge ;_cdda ++{_fbb :=float64 (_cdda +0)/_cge ;
_adg :=float64 (_cdda +1)/_cge ;_gef :=angle1 +(angle2 -angle1 )*_fbb ;_ceag :=angle1 +(angle2 -angle1 )*_adg ;_cff :=x +rx *_g .Cos (_gef );_gbdb :=y +ry *_g .Sin (_gef );_afc :=x +rx *_g .Cos ((_gef +_ceag )/2);_abfg :=y +ry *_g .Sin ((_gef +_ceag )/2);
_dba :=x +rx *_g .Cos (_ceag );_bcb :=y +ry *_g .Sin (_ceag );_gdbg :=2*_afc -_cff /2-_dba /2;_dgc :=2*_abfg -_gbdb /2-_bcb /2;if _cdda ==0{if _dga ._ded {_dga .LineTo (_cff ,_gbdb );}else {_dga .MoveTo (_cff ,_gbdb );};};_dga .QuadraticTo (_gdbg ,_dgc ,_dba ,_bcb );
};};func (_ag *Context )joiner ()_faa .Joiner {switch _ag ._aba {case _a .LineJoinBevel :return _faa .BevelJoiner ;case _a .LineJoinRound :return _faa .RoundJoiner ;};return nil ;};func (_fgcg *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_fgcg .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );
};func (_dfe *Context )Scale (x ,y float64 ){_dfe ._ea =_dfe ._ea .Scale (x ,y )};func (_eaga *Context )Fill (){_eaga .FillPreserve ();_eaga .ClearPath ()};func NewRadialGradient (x0 ,y0 ,r0 ,x1 ,y1 ,r1 float64 )_a .Gradient {_ecag :=circle {x0 ,y0 ,r0 };
_dgab :=circle {x1 ,y1 ,r1 };_cfe :=circle {x1 -x0 ,y1 -y0 ,r1 -r0 };_caad :=_ffea (_cfe ._fbg ,_cfe ._gcec ,-_cfe ._gfca ,_cfe ._fbg ,_cfe ._gcec ,_cfe ._gfca );var _bbdd float64 ;if _caad !=0{_bbdd =1.0/_caad ;};_dda :=-_ecag ._gfca ;_adc :=&radialGradient {_fcge :_ecag ,_agb :_dgab ,_ffaf :_cfe ,_bcg :_caad ,_edc :_bbdd ,_gfec :_dda };
return _adc ;};func (_ggbe *Context )FillPreserve (){var _fab _faa .Painter ;if _ggbe ._fed ==nil {if _cbdb ,_aaag :=_ggbe ._gdf .(*solidPattern );_aaag {_edae :=_faa .NewRGBAPainter (_ggbe ._fba );_edae .SetColor (_cbdb ._dgb );_fab =_edae ;};};if _fab ==nil {_fab =_debe (_ggbe ._fba ,_ggbe ._fed ,_ggbe ._gdf );
};_ggbe .fill (_fab );};func (_cbfg *Context )SetRGBA (r ,g ,b ,a float64 ){_cbfg ._gec =_d .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_cbfg .setFillAndStrokeColor (_cbfg ._gec );};func (_bgg *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_bgg .Translate (x ,y );
_bgg .Scale (sx ,sy );_bgg .Translate (-x ,-y );};func (_ead *Context )Shear (x ,y float64 ){_ead ._ea .Shear (x ,y )};func (_gfe *Context )SetMask (mask *_bd .Alpha )error {if mask .Bounds ().Size ()!=_gfe ._fba .Bounds ().Size (){return _da .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_gfe ._fed =mask ;return nil ;};func (_aga *Context )StrokePreserve (){var _ceg _faa .Painter ;if _aga ._fed ==nil {if _eba ,_ddg :=_aga ._afad .(*solidPattern );_ddg {_eaac :=_faa .NewRGBAPainter (_aga ._fba );_eaac .SetColor (_eba ._dgb );_ceg =_eaac ;
};};if _ceg ==nil {_ceg =_debe (_aga ._fba ,_aga ._fed ,_aga ._afad );};_aga .stroke (_ceg );};func (_efb *Context )Image ()_bd .Image {return _efb ._fba };func (_gcf *linearGradient )AddColorStop (offset float64 ,color _d .Color ){_gcf ._edbf =append (_gcf ._edbf ,stop {_cggf :offset ,_gafc :color });
_gc .Sort (_gcf ._edbf );};func (_faf *Context )StrokePattern ()_a .Pattern {return _faf ._afad };func _fffa (_bbae _fa .Int26_6 )float64 {const _eada ,_cbdg =6,1<<6-1;if _bbae >=0{return float64 (_bbae >>_eada )+float64 (_bbae &_cbdg )/64;};_bbae =-_bbae ;
if _bbae >=0{return -(float64 (_bbae >>_eada )+float64 (_bbae &_cbdg )/64);};return 0;};func (_gdg *Context )fill (_ccg _faa .Painter ){_abf :=_gdg ._gbd ;if _gdg ._ded {_abf =make (_faa .Path ,len (_gdg ._gbd ));copy (_abf ,_gdg ._gbd );_abf .Add1 (_geda (_gdg ._gcb ));
};_fcg :=_gdg ._fdbb ;_fcg .UseNonZeroWinding =_gdg ._bfd ==_a .FillRuleWinding ;_fcg .Clear ();_fcg .AddPath (_abf );_fcg .Rasterize (_ccg );};func (_fcdb *Context )stroke (_egg _faa .Painter ){_eeea :=_fcdb ._gaf ;if len (_fcdb ._ec )> 0{_eeea =_fgdg (_eeea ,_fcdb ._ec ,_fcdb ._fcc );
}else {_eeea =_bbda (_gdff (_eeea ));};_dg :=_fcdb ._fdbb ;_dg .UseNonZeroWinding =true ;_dg .Clear ();_ggf :=(_fcdb ._ea .ScalingFactorX ()+_fcdb ._ea .ScalingFactorY ())/2;_dg .AddStroke (_eeea ,_cega (_fcdb ._eca *_ggf ),_fcdb .capper (),_fcdb .joiner ());
_dg .Rasterize (_egg );};func NewContextForRGBA (im *_bd .RGBA )*Context {_fbe :=im .Bounds ().Size ().X ;_gdb :=im .Bounds ().Size ().Y ;return &Context {_ebce :_fbe ,_afa :_gdb ,_fdbb :_faa .NewRasterizer (_fbe ,_gdb ),_fba :im ,_gec :_d .Transparent ,_gdf :_ddc ,_afad :_dcf ,_eca :1,_bfd :_a .FillRuleWinding ,_ea :_ed .IdentityMatrix (),_fdg :_a .NewTextState ()};
};func (_fegg *radialGradient )ColorAt (x ,y int )_d .Color {if len (_fegg ._cegd )==0{return _d .Transparent ;};_ceab ,_bae :=float64 (x )+0.5-_fegg ._fcge ._fbg ,float64 (y )+0.5-_fegg ._fcge ._gcec ;_babd :=_ffea (_ceab ,_bae ,_fegg ._fcge ._gfca ,_fegg ._ffaf ._fbg ,_fegg ._ffaf ._gcec ,_fegg ._ffaf ._gfca );
_dbae :=_ffea (_ceab ,_bae ,-_fegg ._fcge ._gfca ,_ceab ,_bae ,_fegg ._fcge ._gfca );if _fegg ._bcg ==0{if _babd ==0{return _d .Transparent ;};_gfag :=0.5*_dbae /_babd ;if _gfag *_fegg ._ffaf ._gfca >=_fegg ._gfec {return _afcd (_gfag ,_fegg ._cegd );};
return _d .Transparent ;};_afe :=_ffea (_babd ,_fegg ._bcg ,0,_babd ,-_dbae ,0);if _afe >=0{_fffc :=_g .Sqrt (_afe );_cccc :=(_babd +_fffc )*_fegg ._edc ;_dcb :=(_babd -_fffc )*_fegg ._edc ;if _cccc *_fegg ._ffaf ._gfca >=_fegg ._gfec {return _afcd (_cccc ,_fegg ._cegd );
}else if _dcb *_fegg ._ffaf ._gfca >=_fegg ._gfec {return _afcd (_dcb ,_fegg ._cegd );};};return _d .Transparent ;};func (_bfdf *Context )SetLineCap (lineCap _a .LineCap ){_bfdf ._egb =lineCap };func _fgdg (_gbeg _faa .Path ,_dfgg []float64 ,_ecd float64 )_faa .Path {return _bbda (_adbc (_gdff (_gbeg ),_dfgg ,_ecd ));
};func (_befg *radialGradient )AddColorStop (offset float64 ,color _d .Color ){_befg ._cegd =append (_befg ._cegd ,stop {_cggf :offset ,_gafc :color });_gc .Sort (_befg ._cegd );};func (_efcc *Context )Translate (x ,y float64 ){_efcc ._ea =_efcc ._ea .Translate (x ,y )};
func (_ccgf *Context )ShearAbout (sx ,sy ,x ,y float64 ){_ccgf .Translate (x ,y );_ccgf .Shear (sx ,sy );_ccgf .Translate (-x ,-y );};func (_bgcf *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_bgcf .NewSubPath ();_bgcf .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_g .Pi );
_bgcf .ClosePath ();};func (_edd *Context )SetRGBA255 (r ,g ,b ,a int ){_edd ._gec =_d .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};_edd .setFillAndStrokeColor (_edd ._gec );};func (_ecc *Context )Push (){_fae :=*_ecc ;_ecc ._dfaa =append (_ecc ._dfaa ,&_fae )};
func (_dfb *Context )SetDashOffset (offset float64 ){_dfb ._fcc =offset };type stop struct{_cggf float64 ;_gafc _d .Color ;};func (_fffd *Context )Stroke (){_fffd .StrokePreserve ();_fffd .ClearPath ()};func _afcd (_cbae float64 ,_bdc stops )_d .Color {if _cbae <=0.0||len (_bdc )==1{return _bdc [0]._gafc ;
};_afaa :=_bdc [len (_bdc )-1];if _cbae >=_afaa ._cggf {return _afaa ._gafc ;};for _dcff ,_ffag :=range _bdc [1:]{if _cbae < _ffag ._cggf {_cbae =(_cbae -_bdc [_dcff ]._cggf )/(_ffag ._cggf -_bdc [_dcff ]._cggf );return _gbca (_bdc [_dcff ]._gafc ,_ffag ._gafc ,_cbae );
};};return _afaa ._gafc ;};func (_gdd *linearGradient )ColorAt (x ,y int )_d .Color {if len (_gdd ._edbf )==0{return _d .Transparent ;};_egc ,_abea :=float64 (x ),float64 (y );_cfb ,_dac ,_gaaf ,_dgd :=_gdd ._abg ,_gdd ._bedb ,_gdd ._gbc ,_gdd ._gfc ;_faagc ,_aaae :=_gaaf -_cfb ,_dgd -_dac ;
if _aaae ==0&&_faagc !=0{return _afcd ((_egc -_cfb )/_faagc ,_gdd ._edbf );};if _faagc ==0&&_aaae !=0{return _afcd ((_abea -_dac )/_aaae ,_gdd ._edbf );};_fgd :=_faagc *(_egc -_cfb )+_aaae *(_abea -_dac );if _fgd < 0{return _gdd ._edbf [0]._gafc ;};_ccb :=_g .Hypot (_faagc ,_aaae );
_fcf :=((_egc -_cfb )*-_aaae +(_abea -_dac )*_faagc )/(_ccb *_ccb );_efec ,_gbaf :=_cfb +_fcf *-_aaae ,_dac +_fcf *_faagc ;_bee :=_g .Hypot (_egc -_efec ,_abea -_gbaf )/_ccb ;return _afcd (_bee ,_gdd ._edbf );};func (_babf stops )Swap (i ,j int ){_babf [i ],_babf [j ]=_babf [j ],_babf [i ]};
func (_fce *Context )SetLineJoin (lineJoin _a .LineJoin ){_fce ._aba =lineJoin };func (_dbd *Context )SetFillRule (fillRule _a .FillRule ){_dbd ._bfd =fillRule };func (_ffa *Context )Width ()int {return _ffa ._ebce };func NewContext (width ,height int )*Context {return NewContextForRGBA (_bd .NewRGBA (_bd .Rect (0,0,width ,height )));
};func (_bdg *solidPattern )ColorAt (x ,y int )_d .Color {return _bdg ._dgb };func (_bca *Context )Clear (){_gea :=_bd .NewUniform (_bca ._gec );_f .Draw (_bca ._fba ,_bca ._fba .Bounds (),_gea ,_bd .Point {},_f .Src );};type Context struct{_ebce int ;
_afa int ;_fdbb *_faa .Rasterizer ;_fba *_bd .RGBA ;_fed *_bd .Alpha ;_gec _d .Color ;_gdf _a .Pattern ;_afad _a .Pattern ;_gaf _faa .Path ;_gbd _faa .Path ;_gcb _ed .Point ;_cd _ed .Point ;_ded bool ;_ec []float64 ;_fcc float64 ;_eca float64 ;_egb _a .LineCap ;
_aba _a .LineJoin ;_bfd _a .FillRule ;_ea _ed .Matrix ;_fdg _a .TextState ;_dfaa []*Context ;};func (_aea *Context )MoveTo (x ,y float64 ){if _aea ._ded {_aea ._gbd .Add1 (_geda (_aea ._gcb ));};x ,y =_aea .Transform (x ,y );_baa :=_ed .NewPoint (x ,y );
_aab :=_geda (_baa );_aea ._gaf .Start (_aab );_aea ._gbd .Start (_aab );_aea ._gcb =_baa ;_aea ._cd =_baa ;_aea ._ded =true ;};func (_cea *Context )DrawRectangle (x ,y ,w ,h float64 ){_cea .NewSubPath ();_cea .MoveTo (x ,y );_cea .LineTo (x +w ,y );_cea .LineTo (x +w ,y +h );
_cea .LineTo (x ,y +h );_cea .ClosePath ();};func (_bbff *Context )SetHexColor (x string ){_fff ,_eee ,_eea ,_efbe :=_egcb (x );_bbff .SetRGBA255 (_fff ,_eee ,_eea ,_efbe );};func _dc (_bf ,_c ,_eg ,_ebc ,_de ,_edb ,_ca float64 )(_gg ,_aa float64 ){_dce :=1-_ca ;
_fd :=_dce *_dce ;_bfb :=2*_dce *_ca ;_gf :=_ca *_ca ;_gg =_fd *_bf +_bfb *_eg +_gf *_de ;_aa =_fd *_c +_bfb *_ebc +_gf *_edb ;return ;};func _geda (_gfge _ed .Point )_fa .Point26_6 {return _fa .Point26_6 {X :_cega (_gfge .X ),Y :_cega (_gfge .Y )}};type radialGradient struct{_fcge ,_agb ,_ffaf circle ;
_bcg ,_edc float64 ;_gfec float64 ;_cegd stops ;};func (_bab *Context )Height ()int {return _bab ._afa };func _ffea (_ced ,_ddfa ,_gaff ,_dcfgc ,_ggg ,_gefa float64 )float64 {return _ced *_dcfgc +_ddfa *_ggg +_gaff *_gefa ;};func _gb (_bc ,_fb ,_aaa ,_ce ,_bg ,_df float64 )[]_ed .Point {_bcc :=(_g .Hypot (_aaa -_bc ,_ce -_fb )+_g .Hypot (_bg -_aaa ,_df -_ce ));
_gd :=int (_bcc +0.5);if _gd < 4{_gd =4;};_fg :=float64 (_gd )-1;_db :=make ([]_ed .Point ,_gd );for _cb :=0;_cb < _gd ;_cb ++{_dd :=float64 (_cb )/_fg ;_ae ,_cbd :=_dc (_bc ,_fb ,_aaa ,_ce ,_bg ,_df ,_dd );_db [_cb ]=_ed .NewPoint (_ae ,_cbd );};return _db ;
};func (_gfef stops )Len ()int {return len (_gfef )};func _ebe (_gfgb float64 )float64 {return _gfgb *_g .Pi /180};func (_ege *Context )Rotate (angle float64 ){_ege ._ea =_ege ._ea .Rotate (angle )};func _gbca (_gbb ,_bfa _d .Color ,_fee float64 )_d .Color {_gcea ,_gcae ,_gdbe ,_dbc :=_gbb .RGBA ();
_bgb ,_gdeg ,_ecce ,_fca :=_bfa .RGBA ();return _d .RGBA {_adcd (_gcea ,_bgb ,_fee ),_adcd (_gcae ,_gdeg ,_fee ),_adcd (_gdbe ,_ecce ,_fee ),_adcd (_dbc ,_fca ,_fee )};};func (_caa *Context )SetDash (dashes ...float64 ){_caa ._ec =dashes };func (_bgce *Context )RotateAbout (angle ,x ,y float64 ){_bgce .Translate (x ,y );
_bgce .Rotate (angle );_bgce .Translate (-x ,-y );};func _efac (_edad _bd .Image )*_bd .RGBA {_cce :=_edad .Bounds ();_bbed :=_bd .NewRGBA (_cce );_eb .Draw (_bbed ,_cce ,_edad ,_cce .Min ,_eb .Src );return _bbed ;};func (_gca *Context )DrawPoint (x ,y ,r float64 ){_gca .Push ();
_ccc ,_fga :=_gca .Transform (x ,y );_gca .Identity ();_gca .DrawCircle (_ccc ,_fga ,r );_gca .Pop ();};func (_bff *Context )Clip (){_bff .ClipPreserve ();_bff .ClearPath ()};func (_acf *Context )ClearPath (){_acf ._gaf .Clear ();_acf ._gbd .Clear ();_acf ._ded =false };
func (_cfc *Context )ClipPreserve (){_ffe :=_bd .NewAlpha (_bd .Rect (0,0,_cfc ._ebce ,_cfc ._afa ));_baf :=_faa .NewAlphaOverPainter (_ffe );_cfc .fill (_baf );if _cfc ._fed ==nil {_cfc ._fed =_ffe ;}else {_cege :=_bd .NewAlpha (_bd .Rect (0,0,_cfc ._ebce ,_cfc ._afa ));
_f .DrawMask (_cege ,_cege .Bounds (),_ffe ,_bd .Point {},_cfc ._fed ,_bd .Point {},_f .Over );_cfc ._fed =_cege ;};};func (_bbe stops )Less (i ,j int )bool {return _bbe [i ]._cggf < _bbe [j ]._cggf };func NewContextForImage (im _bd .Image )*Context {return NewContextForRGBA (_efac (im ))};
func (_dad *Context )MeasureString (s string ,face _ee .Face )(_eggd ,_gee float64 ){_fbee :=&_ee .Drawer {Face :face };_cggb :=_fbee .MeasureString (s );return float64 (_cggb >>6),_dad ._fdg .Tf .Size ;};func (_bgcc *Context )DrawStringAnchored (s string ,face _ee .Face ,x ,y ,ax ,ay float64 ){_gbda ,_ece :=_bgcc .MeasureString (s ,face );
_bgcc .drawString (s ,face ,x -ax *_gbda ,y +ay *_ece );};func _bbda (_dfd [][]_ed .Point )_faa .Path {var _bfc _faa .Path ;for _ ,_ace :=range _dfd {var _eagb _fa .Point26_6 ;for _cca ,_bgbc :=range _ace {_cab :=_geda (_bgbc );if _cca ==0{_bfc .Start (_cab );
}else {_bbdg :=_cab .X -_eagb .X ;_bbeb :=_cab .Y -_eagb .Y ;if _bbdg < 0{_bbdg =-_bbdg ;};if _bbeb < 0{_bbeb =-_bbeb ;};if _bbdg +_bbeb > 8{_bfc .Add1 (_cab );};};_eagb =_cab ;};};return _bfc ;};func (_dge *Context )Matrix ()_ed .Matrix {return _dge ._ea };
type circle struct{_fbg ,_gcec ,_gfca float64 };func (_bbd *Context )InvertMask (){if _bbd ._fed ==nil {_bbd ._fed =_bd .NewAlpha (_bbd ._fba .Bounds ());}else {for _gafa ,_bdf :=range _bbd ._fed .Pix {_bbd ._fed .Pix [_gafa ]=255-_bdf ;};};};func (_dceg *Context )DrawCircle (x ,y ,r float64 ){_dceg .NewSubPath ();
_dceg .DrawEllipticalArc (x ,y ,r ,r ,0,2*_g .Pi );_dceg .ClosePath ();};func (_effb *surfacePattern )ColorAt (x ,y int )_d .Color {_fgge :=_effb ._cbb .Bounds ();switch _effb ._ggab {case _baae :if y >=_fgge .Dy (){return _d .Transparent ;};case _agbf :if x >=_fgge .Dx (){return _d .Transparent ;
};case _aac :if x >=_fgge .Dx ()||y >=_fgge .Dy (){return _d .Transparent ;};};x =x %_fgge .Dx ()+_fgge .Min .X ;y =y %_fgge .Dy ()+_fgge .Min .Y ;return _effb ._cbb .At (x ,y );};func (_fabe *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_fabe .MoveTo (x1 ,y1 );
_fabe .LineTo (x2 ,y2 )};func _adbc (_aff [][]_ed .Point ,_bec []float64 ,_acga float64 )[][]_ed .Point {var _dfg [][]_ed .Point ;if len (_bec )==0{return _aff ;};if len (_bec )==1{_bec =append (_bec ,_bec [0]);};for _ ,_ccf :=range _aff {if len (_ccf )< 2{continue ;
};_fge :=_ccf [0];_bggg :=1;_cda :=0;_dcdf :=0.0;if _acga !=0{var _edec float64 ;for _ ,_efee :=range _bec {_edec +=_efee ;};_acga =_g .Mod (_acga ,_edec );if _acga < 0{_acga +=_edec ;};for _faad ,_fdbc :=range _bec {_acga -=_fdbc ;if _acga < 0{_cda =_faad ;
_dcdf =_fdbc +_acga ;break ;};};};var _cgd []_ed .Point ;_cgd =append (_cgd ,_fge );for _bggg < len (_ccf ){_ebdc :=_bec [_cda ];_def :=_ccf [_bggg ];_efba :=_fge .Distance (_def );_aeec :=_ebdc -_dcdf ;if _efba > _aeec {_fccg :=_aeec /_efba ;_cgcf :=_fge .Interpolate (_def ,_fccg );
_cgd =append (_cgd ,_cgcf );if _cda %2==0&&len (_cgd )> 1{_dfg =append (_dfg ,_cgd );};_cgd =nil ;_cgd =append (_cgd ,_cgcf );_dcdf =0;_fge =_cgcf ;_cda =(_cda +1)%len (_bec );}else {_cgd =append (_cgd ,_def );_fge =_def ;_dcdf +=_efba ;_bggg ++;};};if _cda %2==0&&len (_cgd )> 1{_dfg =append (_dfg ,_cgd );
};};return _dfg ;};func (_gfaa *Context )AsMask ()*_bd .Alpha {_bbg :=_bd .NewAlpha (_gfaa ._fba .Bounds ());_f .Draw (_bbg ,_gfaa ._fba .Bounds (),_gfaa ._fba ,_bd .Point {},_f .Src );return _bbg ;};func (_bce *Context )LineTo (x ,y float64 ){if !_bce ._ded {_bce .MoveTo (x ,y );
}else {x ,y =_bce .Transform (x ,y );_dcc :=_ed .NewPoint (x ,y );_aef :=_geda (_dcc );_bce ._gaf .Add1 (_aef );_bce ._gbd .Add1 (_aef );_bce ._cd =_dcc ;};};func (_fbd *Context )TextState ()*_a .TextState {return &_fbd ._fdg };type surfacePattern struct{_cbb _bd .Image ;
_ggab repeatOp ;};func _debe (_dcea *_bd .RGBA ,_edebf *_bd .Alpha ,_faadb _a .Pattern )*patternPainter {return &patternPainter {_dcea ,_edebf ,_faadb };};func (_ecbd *Context )Identity (){_ecbd ._ea =_ed .IdentityMatrix ()};func (_fde *Context )setFillAndStrokeColor (_caae _d .Color ){_fde ._gec =_caae ;
_fde ._gdf =_fdc (_caae );_fde ._afad =_fdc (_caae );};func _efd (_bgc ,_eebf ,_efc ,_ggc ,_ac ,_bgd ,_dfa ,_ebd float64 )[]_ed .Point {_ab :=(_g .Hypot (_efc -_bgc ,_ggc -_eebf )+_g .Hypot (_ac -_efc ,_bgd -_ggc )+_g .Hypot (_dfa -_ac ,_ebd -_bgd ));_af :=int (_ab +0.5);
if _af < 4{_af =4;};_ge :=float64 (_af )-1;_cag :=make ([]_ed .Point ,_af );for _bbf :=0;_bbf < _af ;_bbf ++{_fbf :=float64 (_bbf )/_ge ;_beg ,_cgg :=_eeb (_bgc ,_eebf ,_efc ,_ggc ,_ac ,_bgd ,_dfa ,_ebd ,_fbf );_cag [_bbf ]=_ed .NewPoint (_beg ,_cgg );
};return _cag ;};func (_eff *Context )SetFillStyle (pattern _a .Pattern ){if _ggb ,_gba :=pattern .(*solidPattern );_gba {_eff ._gec =_ggb ._dgb ;};_eff ._gdf =pattern ;};func (_ddb *Context )SetColor (c _d .Color ){_ddb .setFillAndStrokeColor (c )};func (_ecb *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_gfd :=_d .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_ecb ._afad =_fdc (_gfd );};func NewLinearGradient (x0 ,y0 ,x1 ,y1 float64 )_a .Gradient {_fcb :=&linearGradient {_abg :x0 ,_bedb :y0 ,_gbc :x1 ,_gfc :y1 };return _fcb ;};type linearGradient struct{_abg ,_bedb ,_gbc ,_gfc float64 ;_edbf stops ;};type solidPattern struct{_dgb _d .Color };
func (_aefb *patternPainter )Paint (ss []_faa .Span ,done bool ){_bea :=_aefb ._gbg .Bounds ();for _ ,_efg :=range ss {if _efg .Y < _bea .Min .Y {continue ;};if _efg .Y >=_bea .Max .Y {return ;};if _efg .X0 < _bea .Min .X {_efg .X0 =_bea .Min .X ;};if _efg .X1 > _bea .Max .X {_efg .X1 =_bea .Max .X ;
};if _efg .X0 >=_efg .X1 {continue ;};const _ceb =1<<16-1;_fcec :=_efg .Y -_aefb ._gbg .Rect .Min .Y ;_edf :=_efg .X0 -_aefb ._gbg .Rect .Min .X ;_fgb :=(_efg .Y -_aefb ._gbg .Rect .Min .Y )*_aefb ._gbg .Stride +(_efg .X0 -_aefb ._gbg .Rect .Min .X )*4;
_gfdec :=_fgb +(_efg .X1 -_efg .X0 )*4;for _ggcdb ,_bfbd :=_fgb ,_edf ;_ggcdb < _gfdec ;_ggcdb ,_bfbd =_ggcdb +4,_bfbd +1{_aaaf :=_efg .Alpha ;if _aefb ._dgag !=nil {_aaaf =_aaaf *uint32 (_aefb ._dgag .AlphaAt (_bfbd ,_fcec ).A )/255;if _aaaf ==0{continue ;
};};_fdfb :=_aefb ._eef .ColorAt (_bfbd ,_fcec );_gedd ,_eac ,_cgda ,_bcbc :=_fdfb .RGBA ();_gdegd :=uint32 (_aefb ._gbg .Pix [_ggcdb +0]);_dgad :=uint32 (_aefb ._gbg .Pix [_ggcdb +1]);_fegf :=uint32 (_aefb ._gbg .Pix [_ggcdb +2]);_cdc :=uint32 (_aefb ._gbg .Pix [_ggcdb +3]);
_fcae :=(_ceb -(_bcbc *_aaaf /_ceb ))*0x101;_aefb ._gbg .Pix [_ggcdb +0]=uint8 ((_gdegd *_fcae +_gedd *_aaaf )/_ceb >>8);_aefb ._gbg .Pix [_ggcdb +1]=uint8 ((_dgad *_fcae +_eac *_aaaf )/_ceb >>8);_aefb ._gbg .Pix [_ggcdb +2]=uint8 ((_fegf *_fcae +_cgda *_aaaf )/_ceb >>8);
_aefb ._gbg .Pix [_ggcdb +3]=uint8 ((_cdc *_fcae +_bcbc *_aaaf )/_ceb >>8);};};};func (_ged *Context )drawString (_bceb string ,_cad _ee .Face ,_edaee ,_fdfc float64 ){_fac :=&_ee .Drawer {Src :_bd .NewUniform (_ged ._gec ),Face :_cad ,Dot :_geda (_ed .NewPoint (_edaee ,_fdfc ))};
_egaf :=rune (-1);for _ ,_gfg :=range _bceb {if _egaf >=0{_fac .Dot .X +=_fac .Face .Kern (_egaf ,_gfg );};_fcef ,_ebb ,_ebde ,_aee ,_ffbf :=_fac .Face .Glyph (_fac .Dot ,_gfg );if !_ffbf {continue ;};_feg :=_fcef .Sub (_fcef .Min );_bcbgg :=_bd .NewRGBA (_feg );
_f .DrawMask (_bcbgg ,_feg ,_fac .Src ,_bd .Point {},_ebb ,_ebde ,_f .Over );var _dbg *_f .Options ;if _ged ._fed !=nil {_dbg =&_f .Options {DstMask :_ged ._fed ,DstMaskP :_bd .Point {}};};_bed :=_ged ._ea .Clone ().Translate (float64 (_fcef .Min .X ),float64 (_fcef .Min .Y ));
_ecg :=_ff .Aff3 {_bed [0],_bed [3],_bed [6],_bed [1],_bed [4],_bed [7]};_f .BiLinear .Transform (_ged ._fba ,_ecg ,_bcbgg ,_feg ,_f .Over ,_dbg );_fac .Dot .X +=_aee ;_egaf =_gfg ;};};func _cega (_eefg float64 )_fa .Int26_6 {return _fa .Int26_6 (_eefg *64)};
func (_gbe *Context )SetRGB (r ,g ,b float64 ){_gbe .SetRGBA (r ,g ,b ,1)};func (_eda *Context )capper ()_faa .Capper {switch _eda ._egb {case _a .LineCapButt :return _faa .ButtCapper ;case _a .LineCapRound :return _faa .RoundCapper ;case _a .LineCapSquare :return _faa .SquareCapper ;
};return nil ;};func (_bdb *Context )LineWidth ()float64 {return _bdb ._eca };