//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_da "errors";_ca "fmt";_fd "github.com/golang/freetype/raster";_gg "github.com/unidoc/unipdf/v3/common";_cafa "github.com/unidoc/unipdf/v3/internal/transform";_cc "github.com/unidoc/unipdf/v3/render/internal/context";_fa "golang.org/x/image/draw";
_e "golang.org/x/image/font";_a "golang.org/x/image/math/f64";_fc "golang.org/x/image/math/fixed";_caf "image";_d "image/color";_b "image/draw";_f "math";_ff "sort";_g "strings";);func (_bd *Context )Height ()int {return _bd ._gfa };func NewContextForImage (im _caf .Image )*Context {return NewContextForRGBA (_ecbf (im ))};
type Context struct{_fae int ;_gfa int ;_agf *_fd .Rasterizer ;_aae *_caf .RGBA ;_ffc *_caf .Alpha ;_fgf _d .Color ;_dfa _cc .Pattern ;_gbab _cc .Pattern ;_ecg _fd .Path ;_cce _fd .Path ;_dea _cafa .Point ;_deg _cafa .Point ;_gc bool ;_ac []float64 ;_ffd float64 ;
_bgc float64 ;_dfg _cc .LineCap ;_bc _cc .LineJoin ;_cdd _cc .FillRule ;_ddb _cafa .Matrix ;_gcb _cc .TextState ;_aab []*Context ;};func (_eef *Context )AsMask ()*_caf .Alpha {_ada :=_caf .NewAlpha (_eef ._aae .Bounds ());_fa .Draw (_ada ,_eef ._aae .Bounds (),_eef ._aae ,_caf .Point {},_fa .Src );
return _ada ;};var (_cg =_aegcc (_d .White );_ce =_aegcc (_d .Black ););func _debc (_cbca ,_gcaa _d .Color ,_gbb float64 )_d .Color {_acgg ,_beb ,_cfb ,_cebc :=_cbca .RGBA ();_dccf ,_gade ,_cea ,_cecb :=_gcaa .RGBA ();return _d .RGBA {_fecc (_acgg ,_dccf ,_gbb ),_fecc (_beb ,_gade ,_gbb ),_fecc (_cfb ,_cea ,_gbb ),_fecc (_cebc ,_cecb ,_gbb )};
};func (_gdf *Context )DrawPoint (x ,y ,r float64 ){_gdf .Push ();_geg ,_ecgc :=_gdf .Transform (x ,y );_gdf .Identity ();_gdf .DrawCircle (_geg ,_ecgc ,r );_gdf .Pop ();};func (_dcc *Context )SetHexColor (x string ){_ddbd ,_ffdc ,_aeg ,_aegb :=_ffbba (x );
_dcc .SetRGBA255 (_ddbd ,_ffdc ,_aeg ,_aegb );};func (_adg *Context )SetLineJoin (lineJoin _cc .LineJoin ){_adg ._bc =lineJoin };func (_cddg *Context )SetMatrix (m _cafa .Matrix ){_cddg ._ddb =m };func _fgdf (_aaeg float64 )float64 {return _aaeg *_f .Pi /180};
func (_bbg *Context )SetColor (c _d .Color ){_bbg .setFillAndStrokeColor (c )};func (_bdf *Context )Rotate (angle float64 ){_bdf ._ddb =_bdf ._ddb .Rotate (angle )};func (_gdfd *Context )drawString (_gagd string ,_ffbed _e .Face ,_gdee ,_dbd float64 ){_efb :=&_e .Drawer {Src :_caf .NewUniform (_gdfd ._fgf ),Face :_ffbed ,Dot :_acde (_cafa .NewPoint (_gdee ,_dbd ))};
_gcf :=rune (-1);for _ ,_ffbb :=range _gagd {if _gcf >=0{_efb .Dot .X +=_efb .Face .Kern (_gcf ,_ffbb );};_afe ,_edd ,_cdg ,_agfc ,_fec :=_efb .Face .Glyph (_efb .Dot ,_ffbb );if !_fec {continue ;};_fcc :=_afe .Sub (_afe .Min );_fgcf :=_caf .NewRGBA (_fcc );
_fa .DrawMask (_fgcf ,_fcc ,_efb .Src ,_caf .Point {},_edd ,_cdg ,_fa .Over );var _eae *_fa .Options ;if _gdfd ._ffc !=nil {_eae =&_fa .Options {DstMask :_gdfd ._ffc ,DstMaskP :_caf .Point {}};};_cae :=_gdfd ._ddb .Clone ().Translate (float64 (_afe .Min .X ),float64 (_afe .Min .Y ));
_ggd :=_a .Aff3 {_cae [0],_cae [3],_cae [6],_cae [1],_cae [4],_cae [7]};_fa .BiLinear .Transform (_gdfd ._aae ,_ggd ,_fgcf ,_fcc ,_fa .Over ,_eae );_efb .Dot .X +=_agfc ;_gcf =_ffbb ;};};func _aagf (_ggcf _fd .Path )[][]_cafa .Point {var _dfdc [][]_cafa .Point ;
var _acgc []_cafa .Point ;var _egbd ,_dcac float64 ;for _fcdc :=0;_fcdc < len (_ggcf );{switch _ggcf [_fcdc ]{case 0:if len (_acgc )> 0{_dfdc =append (_dfdc ,_acgc );_acgc =nil ;};_eag :=_dac (_ggcf [_fcdc +1]);_edg :=_dac (_ggcf [_fcdc +2]);_acgc =append (_acgc ,_cafa .NewPoint (_eag ,_edg ));
_egbd ,_dcac =_eag ,_edg ;_fcdc +=4;case 1:_cff :=_dac (_ggcf [_fcdc +1]);_eeaa :=_dac (_ggcf [_fcdc +2]);_acgc =append (_acgc ,_cafa .NewPoint (_cff ,_eeaa ));_egbd ,_dcac =_cff ,_eeaa ;_fcdc +=4;case 2:_bbf :=_dac (_ggcf [_fcdc +1]);_bdba :=_dac (_ggcf [_fcdc +2]);
_daaac :=_dac (_ggcf [_fcdc +3]);_bbe :=_dac (_ggcf [_fcdc +4]);_bbb :=_fdc (_egbd ,_dcac ,_bbf ,_bdba ,_daaac ,_bbe );_acgc =append (_acgc ,_bbb ...);_egbd ,_dcac =_daaac ,_bbe ;_fcdc +=6;case 3:_aec :=_dac (_ggcf [_fcdc +1]);_eda :=_dac (_ggcf [_fcdc +2]);
_bed :=_dac (_ggcf [_fcdc +3]);_dgf :=_dac (_ggcf [_fcdc +4]);_ggcff :=_dac (_ggcf [_fcdc +5]);_efef :=_dac (_ggcf [_fcdc +6]);_adea :=_gag (_egbd ,_dcac ,_aec ,_eda ,_bed ,_dgf ,_ggcff ,_efef );_acgc =append (_acgc ,_adea ...);_egbd ,_dcac =_ggcff ,_efef ;
_fcdc +=8;default:_gg .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_ggcf );return _dfdc ;};};if len (_acgc )> 0{_dfdc =append (_dfdc ,_acgc );};return _dfdc ;};func (_feb *Context )Shear (x ,y float64 ){_feb ._ddb .Shear (x ,y )};
func _ecbf (_cfad _caf .Image )*_caf .RGBA {_fffc :=_cfad .Bounds ();_babf :=_caf .NewRGBA (_fffc );_b .Draw (_babf ,_fffc ,_cfad ,_fffc .Min ,_b .Src );return _babf ;};func (_cfae *Context )DrawImage (im _caf .Image ,x ,y int ){_cfae .DrawImageAnchored (im ,x ,y ,0,0)};
func (_cbeb *Context )Push (){_ddbf :=*_cbeb ;_cbeb ._aab =append (_cbeb ._aab ,&_ddbf )};func (_gfg *surfacePattern )ColorAt (x ,y int )_d .Color {_ddae :=_gfg ._begf .Bounds ();switch _gfg ._acbf {case _bgd :if y >=_ddae .Dy (){return _d .Transparent ;
};case _ddde :if x >=_ddae .Dx (){return _d .Transparent ;};case _dad :if x >=_ddae .Dx ()||y >=_ddae .Dy (){return _d .Transparent ;};};x =x %_ddae .Dx ()+_ddae .Min .X ;y =y %_ddae .Dy ()+_ddae .Min .Y ;return _gfg ._begf .At (x ,y );};func (_bbge *Context )FillPreserve (){var _ddfg _fd .Painter ;
if _bbge ._ffc ==nil {if _bbgg ,_dgda :=_bbge ._dfa .(*solidPattern );_dgda {_ffe :=_fd .NewRGBAPainter (_bbge ._aae );_ffe .SetColor (_bbgg ._dgee );_ddfg =_ffe ;};};if _ddfg ==nil {_ddfg =_efgc (_bbge ._aae ,_bbge ._ffc ,_bbge ._dfa );};_bbge .fill (_ddfg );
};func (_bee *Context )DrawImageAnchored (im _caf .Image ,x ,y int ,ax ,ay float64 ){_dge :=im .Bounds ().Size ();x -=int (ax *float64 (_dge .X ));y -=int (ay *float64 (_dge .Y ));_fb :=_fa .BiLinear ;_dfeg :=_bee ._ddb .Clone ().Translate (float64 (x ),float64 (y ));
_eccb :=_a .Aff3 {_dfeg [0],_dfeg [3],_dfeg [6],_dfeg [1],_dfeg [4],_dfeg [7]};if _bee ._ffc ==nil {_fb .Transform (_bee ._aae ,_eccb ,im ,im .Bounds (),_fa .Over ,nil );}else {_fb .Transform (_bee ._aae ,_eccb ,im ,im .Bounds (),_fa .Over ,&_fa .Options {DstMask :_bee ._ffc ,DstMaskP :_caf .Point {}});
};};func (_bgb *Context )joiner ()_fd .Joiner {switch _bgb ._bc {case _cc .LineJoinBevel :return _fd .BevelJoiner ;case _cc .LineJoinRound :return _fd .RoundJoiner ;};return nil ;};func (_daae *Context )DrawStringAnchored (s string ,face _e .Face ,x ,y ,ax ,ay float64 ){_gbe ,_fgd :=_daae .MeasureString (s ,face );
_daae .drawString (s ,face ,x -ax *_gbe ,y +ay *_fgd );};func (_gef *Context )Width ()int {return _gef ._fae };func (_ffg *Context )setFillAndStrokeColor (_cbg _d .Color ){_ffg ._fgf =_cbg ;_ffg ._dfa =_aegcc (_cbg );_ffg ._gbab =_aegcc (_cbg );};func (_bfc *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_bfc .NewSubPath ();
_bfc .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_f .Pi );_bfc .ClosePath ();};func (_bcg *Context )SetRGBA (r ,g ,b ,a float64 ){_bcg ._fgf =_d .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_bcg .setFillAndStrokeColor (_bcg ._fgf );};
func (_bgbf *Context )Matrix ()_cafa .Matrix {return _bgbf ._ddb };func (_ed *Context )MoveTo (x ,y float64 ){if _ed ._gc {_ed ._cce .Add1 (_acde (_ed ._dea ));};x ,y =_ed .Transform (x ,y );_gde :=_cafa .NewPoint (x ,y );_dfd :=_acde (_gde );_ed ._ecg .Start (_dfd );
_ed ._cce .Start (_dfd );_ed ._dea =_gde ;_ed ._deg =_gde ;_ed ._gc =true ;};func (_ebd *Context )Clip (){_ebd .ClipPreserve ();_ebd .ClearPath ()};func _cda (_cfag ,_ga ,_gad ,_ec ,_aee ,_bb ,_cba ,_gab ,_daf float64 )(_aa ,_ccf float64 ){_egb :=1-_daf ;
_fff :=_egb *_egb *_egb ;_fg :=3*_egb *_egb *_daf ;_gdg :=3*_egb *_daf *_daf ;_ad :=_daf *_daf *_daf ;_aa =_fff *_cfag +_fg *_gad +_gdg *_aee +_ad *_cba ;_ccf =_fff *_ga +_fg *_ec +_gdg *_bb +_ad *_gab ;return ;};func (_fded *Context )FillPattern ()_cc .Pattern {return _fded ._dfa };
func (_aggc *Context )TextState ()*_cc .TextState {return &_aggc ._gcb };func (_ebdg *Context )ResetClip (){_ebdg ._ffc =nil };func (_eed *solidPattern )ColorAt (x ,y int )_d .Color {return _eed ._dgee };func (_fe *Context )Image ()_caf .Image {return _fe ._aae };
func (_bdg *Context )Scale (x ,y float64 ){_bdg ._ddb =_bdg ._ddb .Scale (x ,y )};type stop struct{_agbc float64 ;_ggc _d .Color ;};type solidPattern struct{_dgee _d .Color };func (_gcea *Context )fill (_ef _fd .Painter ){_cac :=_gcea ._cce ;if _gcea ._gc {_cac =make (_fd .Path ,len (_gcea ._cce ));
copy (_cac ,_gcea ._cce );_cac .Add1 (_acde (_gcea ._dea ));};_dag :=_gcea ._agf ;_dag .UseNonZeroWinding =_gcea ._cdd ==_cc .FillRuleWinding ;_dag .Clear ();_dag .AddPath (_cac );_dag .Rasterize (_ef );};func (_bge *radialGradient )ColorAt (x ,y int )_d .Color {if len (_bge ._cbde )==0{return _d .Transparent ;
};_bcb ,_cgde :=float64 (x )+0.5-_bge ._dbb ._dcb ,float64 (y )+0.5-_bge ._dbb ._beef ;_deb :=_dbdc (_bcb ,_cgde ,_bge ._dbb ._bda ,_bge ._adeg ._dcb ,_bge ._adeg ._beef ,_bge ._adeg ._bda );_abb :=_dbdc (_bcb ,_cgde ,-_bge ._dbb ._bda ,_bcb ,_cgde ,_bge ._dbb ._bda );
if _bge ._cbd ==0{if _deb ==0{return _d .Transparent ;};_fdd :=0.5*_abb /_deb ;if _fdd *_bge ._adeg ._bda >=_bge ._dggb {return _gcg (_fdd ,_bge ._cbde );};return _d .Transparent ;};_fgfc :=_dbdc (_deb ,_bge ._cbd ,0,_deb ,-_abb ,0);if _fgfc >=0{_dfdf :=_f .Sqrt (_fgfc );
_cfd :=(_deb +_dfdf )*_bge ._acf ;_dfdb :=(_deb -_dfdf )*_bge ._acf ;if _cfd *_bge ._adeg ._bda >=_bge ._dggb {return _gcg (_cfd ,_bge ._cbde );}else if _dfdb *_bge ._adeg ._bda >=_bge ._dggb {return _gcg (_dfdb ,_bge ._cbde );};};return _d .Transparent ;
};func (_bfg *Context )Clear (){_dedb :=_caf .NewUniform (_bfg ._fgf );_fa .Draw (_bfg ._aae ,_bfg ._aae .Bounds (),_dedb ,_caf .Point {},_fa .Src );};func _fecc (_gfbg ,_aedc uint32 ,_cdga float64 )uint8 {return uint8 (int32 (float64 (_gfbg )*(1.0-_cdga )+float64 (_aedc )*_cdga )>>8);
};func (_bgca *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_gdc :=_d .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_bgca ._gbab =_aegcc (_gdc );};func (_ddd *Context )SetLineCap (lineCap _cc .LineCap ){_ddd ._dfg =lineCap };func _feca (_afc _fd .Path ,_gdeb []float64 ,_cddc float64 )_fd .Path {return _cca (_adf (_aagf (_afc ),_gdeb ,_cddc ));
};func (_db *Context )SetFillRule (fillRule _cc .FillRule ){_db ._cdd =fillRule };func (_ceg *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_ceg .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );};func _afg (_dfea float64 )_fc .Int26_6 {return _fc .Int26_6 (_dfea *64)};
func _adf (_eab [][]_cafa .Point ,_eacf []float64 ,_bfd float64 )[][]_cafa .Point {var _fbf [][]_cafa .Point ;if len (_eacf )==0{return _eab ;};if len (_eacf )==1{_eacf =append (_eacf ,_eacf [0]);};for _ ,_ccg :=range _eab {if len (_ccg )< 2{continue ;
};_ebca :=_ccg [0];_fbfa :=1;_dce :=0;_bbfd :=0.0;if _bfd !=0{var _ead float64 ;for _ ,_gbbd :=range _eacf {_ead +=_gbbd ;};_bfd =_f .Mod (_bfd ,_ead );if _bfd < 0{_bfd +=_ead ;};for _edgc ,_aggf :=range _eacf {_bfd -=_aggf ;if _bfd < 0{_dce =_edgc ;_bbfd =_aggf +_bfd ;
break ;};};};var _ecd []_cafa .Point ;_ecd =append (_ecd ,_ebca );for _fbfa < len (_ccg ){_ccea :=_eacf [_dce ];_dgfe :=_ccg [_fbfa ];_ddfgd :=_ebca .Distance (_dgfe );_cfea :=_ccea -_bbfd ;if _ddfgd > _cfea {_fccf :=_cfea /_ddfgd ;_dedbb :=_ebca .Interpolate (_dgfe ,_fccf );
_ecd =append (_ecd ,_dedbb );if _dce %2==0&&len (_ecd )> 1{_fbf =append (_fbf ,_ecd );};_ecd =nil ;_ecd =append (_ecd ,_dedbb );_bbfd =0;_ebca =_dedbb ;_dce =(_dce +1)%len (_eacf );}else {_ecd =append (_ecd ,_dgfe );_ebca =_dgfe ;_bbfd +=_ddfgd ;_fbfa ++;
};};if _dce %2==0&&len (_ecd )> 1{_fbf =append (_fbf ,_ecd );};};return _fbf ;};func (_fdb *Context )SetDashOffset (offset float64 ){_fdb ._ffd =offset };func (_cgb *Context )SetFillStyle (pattern _cc .Pattern ){if _degb ,_dbf :=pattern .(*solidPattern );
_dbf {_cgb ._fgf =_degb ._dgee ;};_cgb ._dfa =pattern ;};func (_cgd *Context )Translate (x ,y float64 ){_cgd ._ddb =_cgd ._ddb .Translate (x ,y )};func (_baa *Context )SetRGBA255 (r ,g ,b ,a int ){_baa ._fgf =_d .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};
_baa .setFillAndStrokeColor (_baa ._fgf );};func (_bcf *linearGradient )AddColorStop (offset float64 ,color _d .Color ){_bcf ._cbf =append (_bcf ._cbf ,stop {_agbc :offset ,_ggc :color });_ff .Sort (_bcf ._cbf );};func _gcec (_ggda ,_dbbe ,_agfb ,_cgbg ,_ace ,_bab float64 )_cc .Gradient {_dgde :=circle {_ggda ,_dbbe ,_agfb };
_bgfb :=circle {_cgbg ,_ace ,_bab };_ccec :=circle {_cgbg -_ggda ,_ace -_dbbe ,_bab -_agfb };_gcbf :=_dbdc (_ccec ._dcb ,_ccec ._beef ,-_ccec ._bda ,_ccec ._dcb ,_ccec ._beef ,_ccec ._bda );var _baad float64 ;if _gcbf !=0{_baad =1.0/_gcbf ;};_bgae :=-_dgde ._bda ;
_dfdd :=&radialGradient {_dbb :_dgde ,_efg :_bgfb ,_adeg :_ccec ,_cbd :_gcbf ,_acf :_baad ,_dggb :_bgae };return _dfdd ;};func (_bcc *Context )ClearPath (){_bcc ._ecg .Clear ();_bcc ._cce .Clear ();_bcc ._gc =false };func (_bcd *Context )drawRegularPolygon (_agb int ,_cbce ,_ab ,_gcc ,_gge float64 ){_be :=2*_f .Pi /float64 (_agb );
_gge -=_f .Pi /2;if _agb %2==0{_gge +=_be /2;};_bcd .NewSubPath ();for _bad :=0;_bad < _agb ;_bad ++{_cfe :=_gge +_be *float64 (_bad );_bcd .LineTo (_cbce +_gcc *_f .Cos (_cfe ),_ab +_gcc *_f .Sin (_cfe ));};_bcd .ClosePath ();};func (_bag *Context )capper ()_fd .Capper {switch _bag ._dfg {case _cc .LineCapButt :return _fd .ButtCapper ;
case _cc .LineCapRound :return _fd .RoundCapper ;case _cc .LineCapSquare :return _fd .SquareCapper ;};return nil ;};type surfacePattern struct{_begf _caf .Image ;_acbf repeatOp ;};func (_fgfa *radialGradient )AddColorStop (offset float64 ,color _d .Color ){_fgfa ._cbde =append (_fgfa ._cbde ,stop {_agbc :offset ,_ggc :color });
_ff .Sort (_fgfa ._cbde );};func (_gec stops )Len ()int {return len (_gec )};func (_fdg *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_fdg .MoveTo (x1 ,y1 );_fdg .LineTo (x2 ,y2 )};func _aegcc (_fef _d .Color )_cc .Pattern {return &solidPattern {_dgee :_fef }};
func (_ba *Context )SetStrokeStyle (pattern _cc .Pattern ){_ba ._gbab =pattern };func _acde (_febf _cafa .Point )_fc .Point26_6 {return _fc .Point26_6 {X :_afg (_febf .X ),Y :_afg (_febf .Y )}};func (_fagd *Context )StrokePattern ()_cc .Pattern {return _fagd ._gbab };
func _gcg (_dcd float64 ,_ebb stops )_d .Color {if _dcd <=0.0||len (_ebb )==1{return _ebb [0]._ggc ;};_cad :=_ebb [len (_ebb )-1];if _dcd >=_cad ._agbc {return _cad ._ggc ;};for _ebfa ,_dcab :=range _ebb [1:]{if _dcd < _dcab ._agbc {_dcd =(_dcd -_ebb [_ebfa ]._agbc )/(_dcab ._agbc -_ebb [_ebfa ]._agbc );
return _debc (_ebb [_ebfa ]._ggc ,_dcab ._ggc ,_dcd );};};return _cad ._ggc ;};func (_eddf *Context )Pop (){_fcce :=*_eddf ;_gbae :=_eddf ._aab ;_abg :=_gbae [len (_gbae )-1];*_eddf =*_abg ;_eddf ._ecg =_fcce ._ecg ;_eddf ._cce =_fcce ._cce ;_eddf ._dea =_fcce ._dea ;
_eddf ._deg =_fcce ._deg ;_eddf ._gc =_fcce ._gc ;};func (_cgc *Context )LineTo (x ,y float64 ){if !_cgc ._gc {_cgc .MoveTo (x ,y );}else {x ,y =_cgc .Transform (x ,y );_gagc :=_cafa .NewPoint (x ,y );_cbe :=_acde (_gagc );_cgc ._ecg .Add1 (_cbe );_cgc ._cce .Add1 (_cbe );
_cgc ._deg =_gagc ;};};func _dbdc (_edb ,_bdb ,_bgfc ,_aeac ,_eaed ,_adc float64 )float64 {return _edb *_aeac +_bdb *_eaed +_bgfc *_adc ;};func (_efa *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _cbgg =16;for _ccba :=0;_ccba < _cbgg ;
_ccba ++{_faff :=float64 (_ccba +0)/_cbgg ;_ffbec :=float64 (_ccba +1)/_cbgg ;_cfc :=angle1 +(angle2 -angle1 )*_faff ;_gcd :=angle1 +(angle2 -angle1 )*_ffbec ;_gafa :=x +rx *_f .Cos (_cfc );_cde :=y +ry *_f .Sin (_cfc );_ffbd :=x +rx *_f .Cos ((_cfc +_gcd )/2);
_fcf :=y +ry *_f .Sin ((_cfc +_gcd )/2);_ffff :=x +rx *_f .Cos (_gcd );_eaag :=y +ry *_f .Sin (_gcd );_efab :=2*_ffbd -_gafa /2-_ffff /2;_fea :=2*_fcf -_cde /2-_eaag /2;if _ccba ==0{if _efa ._gc {_efa .LineTo (_gafa ,_cde );}else {_efa .MoveTo (_gafa ,_cde );
};};_efa .QuadraticTo (_efab ,_fea ,_ffff ,_eaag );};};func NewContextForRGBA (im *_caf .RGBA )*Context {_dgd :=im .Bounds ().Size ().X ;_gce :=im .Bounds ().Size ().Y ;return &Context {_fae :_dgd ,_gfa :_gce ,_agf :_fd .NewRasterizer (_dgd ,_gce ),_aae :im ,_fgf :_d .Transparent ,_dfa :_cg ,_gbab :_ce ,_bgc :1,_cdd :_cc .FillRuleWinding ,_ddb :_cafa .IdentityMatrix (),_gcb :_cc .NewTextState ()};
};type radialGradient struct{_dbb ,_efg ,_adeg circle ;_cbd ,_acf float64 ;_dggb float64 ;_cbde stops ;};func (_gcdg *patternPainter )Paint (ss []_fd .Span ,done bool ){_afa :=_gcdg ._dfc .Bounds ();for _ ,_afed :=range ss {if _afed .Y < _afa .Min .Y {continue ;
};if _afed .Y >=_afa .Max .Y {return ;};if _afed .X0 < _afa .Min .X {_afed .X0 =_afa .Min .X ;};if _afed .X1 > _afa .Max .X {_afed .X1 =_afa .Max .X ;};if _afed .X0 >=_afed .X1 {continue ;};const _fcde =1<<16-1;_gda :=_afed .Y -_gcdg ._dfc .Rect .Min .Y ;
_cecf :=_afed .X0 -_gcdg ._dfc .Rect .Min .X ;_edaa :=(_afed .Y -_gcdg ._dfc .Rect .Min .Y )*_gcdg ._dfc .Stride +(_afed .X0 -_gcdg ._dfc .Rect .Min .X )*4;_fcag :=_edaa +(_afed .X1 -_afed .X0 )*4;for _fgdb ,_ede :=_edaa ,_cecf ;_fgdb < _fcag ;_fgdb ,_ede =_fgdb +4,_ede +1{_gafd :=_afed .Alpha ;
if _gcdg ._eedc !=nil {_gafd =_gafd *uint32 (_gcdg ._eedc .AlphaAt (_ede ,_gda ).A )/255;if _gafd ==0{continue ;};};_caca :=_gcdg ._efbg .ColorAt (_ede ,_gda );_ffda ,_feg ,_cfbf ,_feac :=_caca .RGBA ();_aac :=uint32 (_gcdg ._dfc .Pix [_fgdb +0]);_afea :=uint32 (_gcdg ._dfc .Pix [_fgdb +1]);
_ffbdb :=uint32 (_gcdg ._dfc .Pix [_fgdb +2]);_gcbe :=uint32 (_gcdg ._dfc .Pix [_fgdb +3]);_fafc :=(_fcde -(_feac *_gafd /_fcde ))*0x101;_gcdg ._dfc .Pix [_fgdb +0]=uint8 ((_aac *_fafc +_ffda *_gafd )/_fcde >>8);_gcdg ._dfc .Pix [_fgdb +1]=uint8 ((_afea *_fafc +_feg *_gafd )/_fcde >>8);
_gcdg ._dfc .Pix [_fgdb +2]=uint8 ((_ffbdb *_fafc +_cfbf *_gafd )/_fcde >>8);_gcdg ._dfc .Pix [_fgdb +3]=uint8 ((_gcbe *_fafc +_feac *_gafd )/_fcde >>8);};};};type repeatOp int ;func (_fffa *Context )Identity (){_fffa ._ddb =_cafa .IdentityMatrix ()};type patternPainter struct{_dfc *_caf .RGBA ;
_eedc *_caf .Alpha ;_efbg _cc .Pattern ;};func (_adb *Context )Fill (){_adb .FillPreserve ();_adb .ClearPath ()};func (_beg *Context )MeasureString (s string ,face _e .Face )(_dddb ,_eeb float64 ){_dff :=&_e .Drawer {Face :face };_fbd :=_dff .MeasureString (s );
return float64 (_fbd >>6),_beg ._gcb .Tf .Size ;};func (_fgc *Context )InvertMask (){if _fgc ._ffc ==nil {_fgc ._ffc =_caf .NewAlpha (_fgc ._aae .Bounds ());}else {for _dca ,_bf :=range _fgc ._ffc .Pix {_fgc ._ffc .Pix [_dca ]=255-_bf ;};};};type stops []stop ;
type linearGradient struct{_eea ,_fed ,_ceb ,_adad float64 ;_cbf stops ;};func (_ebc *Context )LineWidth ()float64 {return _ebc ._bgc };func (_aafc *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_aafc .Translate (x ,y );_aafc .Scale (sx ,sy );_aafc .Translate (-x ,-y );
};func _ffbba (_acgd string )(_edf ,_fcfc ,_dbg ,_ccc int ){_acgd =_g .TrimPrefix (_acgd ,"\u0023");_ccc =255;if len (_acgd )==3{_eadd :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_ca .Sscanf (_acgd ,_eadd ,&_edf ,&_fcfc ,&_dbg );_edf |=_edf <<4;_fcfc |=_fcfc <<4;
_dbg |=_dbg <<4;};if len (_acgd )==6{_accd :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_ca .Sscanf (_acgd ,_accd ,&_edf ,&_fcfc ,&_dbg );};if len (_acgd )==8{_eaga :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_ca .Sscanf (_acgd ,_eaga ,&_edf ,&_fcfc ,&_dbg ,&_ccc );};return ;};func (_agd *Context )Transform (x ,y float64 )(_abc ,_dae float64 ){return _agd ._ddb .Transform (x ,y )};func (_gca *Context )SetDash (dashes ...float64 ){_gca ._ac =dashes };func (_fca *Context )DrawCircle (x ,y ,r float64 ){_fca .NewSubPath ();
_fca .DrawEllipticalArc (x ,y ,r ,r ,0,2*_f .Pi );_fca .ClosePath ();};func NewContext (width ,height int )*Context {return NewContextForRGBA (_caf .NewRGBA (_caf .Rect (0,0,width ,height )));};type circle struct{_dcb ,_beef ,_bda float64 };func (_bdd stops )Swap (i ,j int ){_bdd [i ],_bdd [j ]=_bdd [j ],_bdd [i ]};
func (_fafa *Context )SetPixel (x ,y int ){_fafa ._aae .Set (x ,y ,_fafa ._fgf )};func _ecbe (_afef ,_geb ,_cbfa ,_gbg float64 )_cc .Gradient {_agc :=&linearGradient {_eea :_afef ,_fed :_geb ,_ceb :_cbfa ,_adad :_gbg };return _agc ;};func _cca (_gefc [][]_cafa .Point )_fd .Path {var _bdbd _fd .Path ;
for _ ,_ecf :=range _gefc {var _edag _fc .Point26_6 ;for _egga ,_dcg :=range _ecf {_aegc :=_acde (_dcg );if _egga ==0{_bdbd .Start (_aegc );}else {_bbfdb :=_aegc .X -_edag .X ;_cceca :=_aegc .Y -_edag .Y ;if _bbfdb < 0{_bbfdb =-_bbfdb ;};if _cceca < 0{_cceca =-_cceca ;
};if _bbfdb +_cceca > 8{_bdbd .Add1 (_aegc );};};_edag =_aegc ;};};return _bdbd ;};func (_cbae *Context )RotateAbout (angle ,x ,y float64 ){_cbae .Translate (x ,y );_cbae .Rotate (angle );_cbae .Translate (-x ,-y );};func (_cag *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_cag ._gc {_cag .MoveTo (x1 ,y1 );
};_ebf ,_gaf :=_cag ._deg .X ,_cag ._deg .Y ;x1 ,y1 =_cag .Transform (x1 ,y1 );x2 ,y2 =_cag .Transform (x2 ,y2 );x3 ,y3 =_cag .Transform (x3 ,y3 );_dgb :=_gag (_ebf ,_gaf ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_cdb :=_acde (_cag ._deg );for _ ,_cee :=range _dgb [1:]{_cec :=_acde (_cee );
if _cec ==_cdb {continue ;};_cdb =_cec ;_cag ._ecg .Add1 (_cec );_cag ._cce .Add1 (_cec );_cag ._deg =_cee ;};};func (_cafac *Context )SetMask (mask *_caf .Alpha )error {if mask .Bounds ().Size ()!=_cafac ._aae .Bounds ().Size (){return _da .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_cafac ._ffc =mask ;return nil ;};func _gag (_ade ,_ag ,_bg ,_gabf ,_dc ,_df ,_aea ,_ded float64 )[]_cafa .Point {_ea :=(_f .Hypot (_bg -_ade ,_gabf -_ag )+_f .Hypot (_dc -_bg ,_df -_gabf )+_f .Hypot (_aea -_dc ,_ded -_df ));_agg :=int (_ea +0.5);if _agg < 4{_agg =4;
};_eb :=float64 (_agg )-1;_dfe :=make ([]_cafa .Point ,_agg );for _aag :=0;_aag < _agg ;_aag ++{_ecb :=float64 (_aag )/_eb ;_bba ,_affb :=_cda (_ade ,_ag ,_bg ,_gabf ,_dc ,_df ,_aea ,_ded ,_ecb );_dfe [_aag ]=_cafa .NewPoint (_bba ,_affb );};return _dfe ;
};func _dac (_eadda _fc .Int26_6 )float64 {const _aecb ,_ggca =6,1<<6-1;if _eadda >=0{return float64 (_eadda >>_aecb )+float64 (_eadda &_ggca )/64;};_eadda =-_eadda ;if _eadda >=0{return -(float64 (_eadda >>_aecb )+float64 (_eadda &_ggca )/64);};return 0;
};func (_eaa *Context )ClosePath (){if _eaa ._gc {_cef :=_acde (_eaa ._dea );_eaa ._ecg .Add1 (_cef );_eaa ._cce .Add1 (_cef );_eaa ._deg =_eaa ._dea ;};};func (_fffg *Context )ClipPreserve (){_acc :=_caf .NewAlpha (_caf .Rect (0,0,_fffg ._fae ,_fffg ._gfa ));
_dgg :=_fd .NewAlphaOverPainter (_acc );_fffg .fill (_dgg );if _fffg ._ffc ==nil {_fffg ._ffc =_acc ;}else {_acg :=_caf .NewAlpha (_caf .Rect (0,0,_fffg ._fae ,_fffg ._gfa ));_fa .DrawMask (_acg ,_acg .Bounds (),_acc ,_caf .Point {},_fffg ._ffc ,_caf .Point {},_fa .Over );
_fffg ._ffc =_acg ;};};func (_ggb *Context )SetLineWidth (lineWidth float64 ){_ggb ._bgc =lineWidth };const (_bgfg repeatOp =iota ;_bgd ;_ddde ;_dad ;);func (_cded *Context )DrawString (s string ,face _e .Face ,x ,y float64 ){_cded .DrawStringAnchored (s ,face ,x ,y ,0,0);
};func (_bfa *Context )DrawRectangle (x ,y ,w ,h float64 ){_bfa .NewSubPath ();_bfa .MoveTo (x ,y );_bfa .LineTo (x +w ,y );_bfa .LineTo (x +w ,y +h );_bfa .LineTo (x ,y +h );_bfa .ClosePath ();};func (_cfeg stops )Less (i ,j int )bool {return _cfeg [i ]._agbc < _cfeg [j ]._agbc };
func _fdc (_cfa ,_gbc ,_ge ,_eg ,_de ,_aff float64 )[]_cafa .Point {_ae :=(_f .Hypot (_ge -_cfa ,_eg -_gbc )+_f .Hypot (_de -_ge ,_aff -_eg ));_gba :=int (_ae +0.5);if _gba < 4{_gba =4;};_gdd :=float64 (_gba )-1;_dg :=make ([]_cafa .Point ,_gba );for _ffb :=0;
_ffb < _gba ;_ffb ++{_fag :=float64 (_ffb )/_gdd ;_ccb ,_egd :=_gb (_cfa ,_gbc ,_ge ,_eg ,_de ,_aff ,_fag );_dg [_ffb ]=_cafa .NewPoint (_ccb ,_egd );};return _dg ;};func (_eac *Context )ShearAbout (sx ,sy ,x ,y float64 ){_eac .Translate (x ,y );_eac .Shear (sx ,sy );
_eac .Translate (-x ,-y );};func (_acb *Context )SetRGB (r ,g ,b float64 ){_acb .SetRGBA (r ,g ,b ,1)};func _dee (_aad _caf .Image ,_bbee repeatOp )_cc .Pattern {return &surfacePattern {_begf :_aad ,_acbf :_bbee };};func (_adgf *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_gdgf ,_ecc ,_aaf ,_acd :=x ,x +r ,x +w -r ,x +w ;
_faeg ,_gdgg ,_gff ,_bgg :=y ,y +r ,y +h -r ,y +h ;_adgf .NewSubPath ();_adgf .MoveTo (_ecc ,_faeg );_adgf .LineTo (_aaf ,_faeg );_adgf .DrawArc (_aaf ,_gdgg ,r ,_fgdf (270),_fgdf (360));_adgf .LineTo (_acd ,_gff );_adgf .DrawArc (_aaf ,_gff ,r ,_fgdf (0),_fgdf (90));
_adgf .LineTo (_ecc ,_bgg );_adgf .DrawArc (_ecc ,_gff ,r ,_fgdf (90),_fgdf (180));_adgf .LineTo (_gdgf ,_gdgg );_adgf .DrawArc (_ecc ,_gdgg ,r ,_fgdf (180),_fgdf (270));_adgf .ClosePath ();};func (_ffbe *Context )SetRGB255 (r ,g ,b int ){_ffbe .SetRGBA255 (r ,g ,b ,255)};
func (_ee *Context )SetFillRGBA (r ,g ,b ,a float64 ){_bde :=_d .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_ee ._fgf =_bde ;_ee ._dfa =_aegcc (_bde );};func _efgc (_beeff *_caf .RGBA ,_fee *_caf .Alpha ,_cceb _cc .Pattern )*patternPainter {return &patternPainter {_beeff ,_fee ,_cceb };
};func (_dfaf *Context )stroke (_bccb _fd .Painter ){_fdf :=_dfaf ._ecg ;if len (_dfaf ._ac )> 0{_fdf =_feca (_fdf ,_dfaf ._ac ,_dfaf ._ffd );}else {_fdf =_cca (_aagf (_fdf ));};_cbc :=_dfaf ._agf ;_cbc .UseNonZeroWinding =true ;_cbc .Clear ();_faf :=(_dfaf ._ddb .ScalingFactorX ()+_dfaf ._ddb .ScalingFactorY ())/2;
_cbc .AddStroke (_fdf ,_afg (_dfaf ._bgc *_faf ),_dfaf .capper (),_dfaf .joiner ());_cbc .Rasterize (_bccb );};func (_baac *Context )NewSubPath (){if _baac ._gc {_baac ._cce .Add1 (_acde (_baac ._dea ));};_baac ._gc =false ;};func (_aegg *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_aegg ._gc {_aegg .MoveTo (x1 ,y1 );
};x1 ,y1 =_aegg .Transform (x1 ,y1 );x2 ,y2 =_aegg .Transform (x2 ,y2 );_egg :=_cafa .NewPoint (x1 ,y1 );_daa :=_cafa .NewPoint (x2 ,y2 );_bga :=_acde (_egg );_dda :=_acde (_daa );_aegg ._ecg .Add2 (_bga ,_dda );_aegg ._cce .Add2 (_bga ,_dda );_aegg ._deg =_daa ;
};func _gb (_cd ,_cf ,_gf ,_cdc ,_gfc ,_cb ,_fde float64 )(_fcd ,_gd float64 ){_gbd :=1-_fde ;_dd :=_gbd *_gbd ;_af :=2*_gbd *_fde ;_ddf :=_fde *_fde ;_fcd =_dd *_cd +_af *_gf +_ddf *_gfc ;_gd =_dd *_cf +_af *_cdc +_ddf *_cb ;return ;};func (_ccbg *Context )StrokePreserve (){var _afd _fd .Painter ;
if _ccbg ._ffc ==nil {if _cfg ,_aed :=_ccbg ._gbab .(*solidPattern );_aed {_aef :=_fd .NewRGBAPainter (_ccbg ._aae );_aef .SetColor (_cfg ._dgee );_afd =_aef ;};};if _afd ==nil {_afd =_efgc (_ccbg ._aae ,_ccbg ._ffc ,_ccbg ._gbab );};_ccbg .stroke (_afd );
};func (_gea *linearGradient )ColorAt (x ,y int )_d .Color {if len (_gea ._cbf )==0{return _d .Transparent ;};_aabf ,_aaa :=float64 (x ),float64 (y );_afdf ,_cgg ,_bff ,_ffga :=_gea ._eea ,_gea ._fed ,_gea ._ceb ,_gea ._adad ;_ege ,_gae :=_bff -_afdf ,_ffga -_cgg ;
if _gae ==0&&_ege !=0{return _gcg ((_aabf -_afdf )/_ege ,_gea ._cbf );};if _ege ==0&&_gae !=0{return _gcg ((_aaa -_cgg )/_gae ,_gea ._cbf );};_daaa :=_ege *(_aabf -_afdf )+_gae *(_aaa -_cgg );if _daaa < 0{return _gea ._cbf [0]._ggc ;};_bgf :=_f .Hypot (_ege ,_gae );
_dfab :=((_aabf -_afdf )*-_gae +(_aaa -_cgg )*_ege )/(_bgf *_bgf );_aaba ,_aca :=_afdf +_dfab *-_gae ,_cgg +_dfab *_ege ;_fdca :=_f .Hypot (_aabf -_aaba ,_aaa -_aca )/_bgf ;return _gcg (_fdca ,_gea ._cbf );};func (_efe *Context )Stroke (){_efe .StrokePreserve ();
_efe .ClearPath ()};