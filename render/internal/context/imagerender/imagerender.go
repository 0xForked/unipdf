//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_bf "errors";_b "fmt";_de "github.com/unidoc/freetype/raster";_gc "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/internal/transform";_ge "github.com/unidoc/unipdf/v3/render/internal/context";_gf "golang.org/x/image/draw";
_aa "golang.org/x/image/font";_bg "golang.org/x/image/math/f64";_fb "golang.org/x/image/math/fixed";_cf "image";_c "image/color";_d "image/draw";_a "math";_ad "sort";_af "strings";);func (_faf *Context )SetFillRule (fillRule _ge .FillRule ){_faf ._bbg =fillRule };
func (_agb *Context )SetRGBA255 (r ,g ,b ,a int ){_agb ._gfb =_c .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};_agb .setFillAndStrokeColor (_agb ._gfb );};var (_dgfd =_fbeb (_c .White );_eed =_fbeb (_c .Black ););func (_fcfg *Context )Push (){_fcd :=*_fcfg ;
_fcfg ._bcg =append (_fcfg ._bcg ,&_fcd )};func _gfa (_bdb ,_acd ,_ee ,_be ,_fe ,_gfg ,_bc ,_df ,_aad float64 )(_eea ,_dgf float64 ){_ae :=1-_aad ;_ec :=_ae *_ae *_ae ;_dfg :=3*_ae *_ae *_aad ;_eda :=3*_ae *_aad *_aad ;_ecd :=_aad *_aad *_aad ;_eea =_ec *_bdb +_dfg *_ee +_eda *_fe +_ecd *_bc ;
_dgf =_ec *_acd +_dfg *_be +_eda *_gfg +_ecd *_df ;return ;};func _ggdc (_gba [][]_g .Point )_de .Path {var _aeb _de .Path ;for _ ,_fbe :=range _gba {var _afa _fb .Point26_6 ;for _bbge ,_gdg :=range _fbe {_gfgc :=_addb (_gdg );if _bbge ==0{_aeb .Start (_gfgc );
}else {_geg :=_gfgc .X -_afa .X ;_ggff :=_gfgc .Y -_afa .Y ;if _geg < 0{_geg =-_geg ;};if _ggff < 0{_ggff =-_ggff ;};if _geg +_ggff > 8{_aeb .Add1 (_gfgc );};};_afa =_gfgc ;};};return _aeb ;};func (_fcf *Context )SetLineCap (lineCap _ge .LineCap ){_fcf ._eec =lineCap };
func _aca (_beb ,_dfb ,_bgc ,_afc ,_feg ,_fc ,_cbd ,_fgg float64 )[]_g .Point {_ecf :=(_a .Hypot (_bgc -_beb ,_afc -_dfb )+_a .Hypot (_feg -_bgc ,_fc -_afc )+_a .Hypot (_cbd -_feg ,_fgg -_fc ));_gbc :=int (_ecf +0.5);if _gbc < 4{_gbc =4;};_eb :=float64 (_gbc )-1;
_cac :=make ([]_g .Point ,_gbc );for _aea :=0;_aea < _gbc ;_aea ++{_bac :=float64 (_aea )/_eb ;_fff ,_afg :=_gfa (_beb ,_dfb ,_bgc ,_afc ,_feg ,_fc ,_cbd ,_fgg ,_bac );_cac [_aea ]=_g .NewPoint (_fff ,_afg );};return _cac ;};func _cdcg (_cdf _de .Path ,_eef []float64 ,_fcfd float64 )_de .Path {return _ggdc (_bebg (_ceb (_cdf ),_eef ,_fcfd ));
};func (_gcb *Context )FillPattern ()_ge .Pattern {return _gcb ._cbde };func _fbbg (_dgde string )(_gdga ,_gfag ,_cfe ,_fegb int ){_dgde =_af .TrimPrefix (_dgde ,"\u0023");_fegb =255;if len (_dgde )==3{_bdba :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";
_b .Sscanf (_dgde ,_bdba ,&_gdga ,&_gfag ,&_cfe );_gdga |=_gdga <<4;_gfag |=_gfag <<4;_cfe |=_cfe <<4;};if len (_dgde )==6{_abfb :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_b .Sscanf (_dgde ,_abfb ,&_gdga ,&_gfag ,&_cfe );};
if len (_dgde )==8{_bbd :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_b .Sscanf (_dgde ,_bbd ,&_gdga ,&_gfag ,&_cfe ,&_fegb );};return ;};func (_gaf *Context )NewSubPath (){if _gaf ._beg {_gaf ._cg .Add1 (_addb (_gaf ._baf ));
};_gaf ._beg =false ;};func (_bddc *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_bddc .MoveTo (x1 ,y1 );_bddc .LineTo (x2 ,y2 )};func (_ead *Context )SetRGBA (r ,g ,b ,a float64 ){_ead ._gfb =_c .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_ead .setFillAndStrokeColor (_ead ._gfb );};func (_ggbf *Context )Transform (x ,y float64 )(_cbac ,_add float64 ){return _ggbf ._gbd .Transform (x ,y );};func (_aggg *Context )ResetClip (){_aggg ._gg =nil };func _addb (_bfbe _g .Point )_fb .Point26_6 {return _fb .Point26_6 {X :_bgd (_bfbe .X ),Y :_bgd (_bfbe .Y )}};
func (_ab *Context )StrokePreserve (){var _abg _de .Painter ;if _ab ._gg ==nil {if _efe ,_bega :=_ab ._db .(*solidPattern );_bega {_ddd :=_de .NewRGBAPainter (_ab ._bb );_ddd .SetColor (_efe ._afcf );_abg =_ddd ;};};if _abg ==nil {_abg =_gbab (_ab ._bb ,_ab ._gg ,_ab ._db );
};_ab .stroke (_abg );};func (_cge *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_ggc :=_c .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_cge ._db =_fbeb (_ggc );};func (_gbdf *Context )drawString (_fdf string ,_adge _aa .Face ,_eag ,_aade float64 ){_ece :=&_aa .Drawer {Src :_cf .NewUniform (_gbdf ._gfb ),Face :_adge ,Dot :_addb (_g .NewPoint (_eag ,_aade ))};
_gcc :=rune (-1);for _ ,_ggaa :=range _fdf {if _gcc >=0{_ece .Dot .X +=_ece .Face .Kern (_gcc ,_ggaa );};_eba ,_fcb ,_acc ,_dbda ,_cgec :=_ece .Face .Glyph (_ece .Dot ,_ggaa );if !_cgec {continue ;};_dgb :=_eba .Sub (_eba .Min );_fcbf :=_cf .NewRGBA (_dgb );
_gf .DrawMask (_fcbf ,_dgb ,_ece .Src ,_cf .Point {},_fcb ,_acc ,_gf .Over );var _bdc *_gf .Options ;if _gbdf ._gg !=nil {_bdc =&_gf .Options {DstMask :_gbdf ._gg ,DstMaskP :_cf .Point {}};};_adeg :=_gbdf ._gbd .Clone ().Translate (float64 (_eba .Min .X ),float64 (_eba .Min .Y ));
_ebg :=_bg .Aff3 {_adeg [0],_adeg [3],_adeg [6],_adeg [1],_adeg [4],_adeg [7]};_gf .BiLinear .Transform (_gbdf ._bb ,_ebg ,_fcbf ,_dgb ,_gf .Over ,_bdc );_ece .Dot .X +=_dbda ;_gcc =_ggaa ;};};func (_gec *Context )LineTo (x ,y float64 ){if !_gec ._beg {_gec .MoveTo (x ,y );
}else {x ,y =_gec .Transform (x ,y );_bde :=_g .NewPoint (x ,y );_eaf :=_addb (_bde );_gec ._gea .Add1 (_eaf );_gec ._cg .Add1 (_eaf );_gec ._dgd =_bde ;};};func (_ggd *Context )ClosePath (){if _ggd ._beg {_fge :=_addb (_ggd ._baf );_ggd ._gea .Add1 (_fge );
_ggd ._cg .Add1 (_fge );_ggd ._dgd =_ggd ._baf ;};};func (_ded *Context )SetMatrix (m _g .Matrix ){_ded ._gbd =m };func (_gac *Context )DrawCircle (x ,y ,r float64 ){_gac .NewSubPath ();_gac .DrawEllipticalArc (x ,y ,r ,r ,0,2*_a .Pi );_gac .ClosePath ();
};func (_cgg *Context )SetPixel (x ,y int ){_cgg ._bb .Set (x ,y ,_cgg ._gfb )};func (_fee *Context )MoveTo (x ,y float64 ){if _fee ._beg {_fee ._cg .Add1 (_addb (_fee ._baf ));};x ,y =_fee .Transform (x ,y );_adbb :=_g .NewPoint (x ,y );_ebc :=_addb (_adbb );
_fee ._gea .Start (_ebc );_fee ._cg .Start (_ebc );_fee ._baf =_adbb ;_fee ._dgd =_adbb ;_fee ._beg =true ;};func (_fce *Context )SetStrokeStyle (pattern _ge .Pattern ){_fce ._db =pattern };type Context struct{_afb int ;_ga int ;_faa *_de .Rasterizer ;
_bb *_cf .RGBA ;_gg *_cf .Alpha ;_gfb _c .Color ;_cbde _ge .Pattern ;_db _ge .Pattern ;_gea _de .Path ;_cg _de .Path ;_baf _g .Point ;_dgd _g .Point ;_beg bool ;_dc []float64 ;_acg float64 ;_gff float64 ;_eec _ge .LineCap ;_fde _ge .LineJoin ;_bbg _ge .FillRule ;
_gbd _g .Matrix ;_bca _ge .TextState ;_bcg []*Context ;};func _gadd (_fda float64 )float64 {return _fda *_a .Pi /180};func (_cba *Context )SetLineWidth (lineWidth float64 ){_cba ._gff =lineWidth };func (_egbf *radialGradient )AddColorStop (offset float64 ,color _c .Color ){_egbf ._bcc =append (_egbf ._bcc ,stop {_aac :offset ,_debf :color });
_ad .Sort (_egbf ._bcc );};func (_ffe *Context )ClearPath (){_ffe ._gea .Clear ();_ffe ._cg .Clear ();_ffe ._beg =false };func (_eafe *Context )ShearAbout (sx ,sy ,x ,y float64 ){_eafe .Translate (x ,y );_eafe .Shear (sx ,sy );_eafe .Translate (-x ,-y );
};func (_bbc *Context )SetLineJoin (lineJoin _ge .LineJoin ){_bbc ._fde =lineJoin };func (_feb *Context )StrokePattern ()_ge .Pattern {return _feb ._db };type surfacePattern struct{_gacb _cf .Image ;_bdg repeatOp ;};func (_afga *Context )capper ()_de .Capper {switch _afga ._eec {case _ge .LineCapButt :return _de .ButtCapper ;
case _ge .LineCapRound :return _de .RoundCapper ;case _ge .LineCapSquare :return _de .SquareCapper ;};return nil ;};func NewContext (width ,height int )*Context {return NewContextForRGBA (_cf .NewRGBA (_cf .Rect (0,0,width ,height )));};func NewContextForRGBA (im *_cf .RGBA )*Context {_eab :=im .Bounds ().Size ().X ;
_gae :=im .Bounds ().Size ().Y ;return &Context {_afb :_eab ,_ga :_gae ,_faa :_de .NewRasterizer (_eab ,_gae ),_bb :im ,_gfb :_c .Transparent ,_cbde :_dgfd ,_db :_eed ,_gff :1,_bbg :_ge .FillRuleWinding ,_gbd :_g .IdentityMatrix (),_bca :_ge .NewTextState ()};
};func (_egb *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _dfbf =16;for _dgdb :=0;_dgdb < _dfbf ;_dgdb ++{_ecfa :=float64 (_dgdb +0)/_dfbf ;_fgcc :=float64 (_dgdb +1)/_dfbf ;_ffbg :=angle1 +(angle2 -angle1 )*_ecfa ;_bacf :=angle1 +(angle2 -angle1 )*_fgcc ;
_gcf :=x +rx *_a .Cos (_ffbg );_aeae :=y +ry *_a .Sin (_ffbg );_cgeb :=x +rx *_a .Cos ((_ffbg +_bacf )/2);_ade :=y +ry *_a .Sin ((_ffbg +_bacf )/2);_caa :=x +rx *_a .Cos (_bacf );_bcf :=y +ry *_a .Sin (_bacf );_eece :=2*_cgeb -_gcf /2-_caa /2;_cbb :=2*_ade -_aeae /2-_bcf /2;
if _dgdb ==0{if _egb ._beg {_egb .LineTo (_gcf ,_aeae );}else {_egb .MoveTo (_gcf ,_aeae );};};_egb .QuadraticTo (_eece ,_cbb ,_caa ,_bcf );};};func (_dgg *Context )DrawImageAnchored (im _cf .Image ,x ,y int ,ax ,ay float64 ){_cbf :=im .Bounds ().Size ();
x -=int (ax *float64 (_cbf .X ));y -=int (ay *float64 (_cbf .Y ));_dgc :=_gf .BiLinear ;_dbd :=_dgg ._gbd .Clone ().Translate (float64 (x ),float64 (y ));_cdgf :=_bg .Aff3 {_dbd [0],_dbd [3],_dbd [6],_dbd [1],_dbd [4],_dbd [7]};if _dgg ._gg ==nil {_dgc .Transform (_dgg ._bb ,_cdgf ,im ,im .Bounds (),_gf .Over ,nil );
}else {_dgc .Transform (_dgg ._bb ,_cdgf ,im ,im .Bounds (),_gf .Over ,&_gf .Options {DstMask :_dgg ._gg ,DstMaskP :_cf .Point {}});};};func (_gde *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_geee ,_cc ,_badb ,_fgc :=x ,x +r ,x +w -r ,x +w ;
_acf ,_bga ,_dfgc ,_bba :=y ,y +r ,y +h -r ,y +h ;_gde .NewSubPath ();_gde .MoveTo (_cc ,_acf );_gde .LineTo (_badb ,_acf );_gde .DrawArc (_badb ,_bga ,r ,_gadd (270),_gadd (360));_gde .LineTo (_fgc ,_dfgc );_gde .DrawArc (_badb ,_dfgc ,r ,_gadd (0),_gadd (90));
_gde .LineTo (_cc ,_bba );_gde .DrawArc (_cc ,_dfgc ,r ,_gadd (90),_gadd (180));_gde .LineTo (_geee ,_bga );_gde .DrawArc (_cc ,_bga ,r ,_gadd (180),_gadd (270));_gde .ClosePath ();};func (_bdfe *surfacePattern )ColorAt (x ,y int )_c .Color {_dcb :=_bdfe ._gacb .Bounds ();
switch _bdfe ._bdg {case _bbf :if y >=_dcb .Dy (){return _c .Transparent ;};case _febb :if x >=_dcb .Dx (){return _c .Transparent ;};case _bbcb :if x >=_dcb .Dx ()||y >=_dcb .Dy (){return _c .Transparent ;};};x =x %_dcb .Dx ()+_dcb .Min .X ;y =y %_dcb .Dy ()+_dcb .Min .Y ;
return _bdfe ._gacb .At (x ,y );};func (_cad *Context )Image ()_cf .Image {return _cad ._bb };func _ceb (_ged _de .Path )[][]_g .Point {var _gddc [][]_g .Point ;var _degf []_g .Point ;var _cbfb ,_febg float64 ;for _dda :=0;_dda < len (_ged );{switch _ged [_dda ]{case 0:if len (_degf )> 0{_gddc =append (_gddc ,_degf );
_degf =nil ;};_eeda :=_cgd (_ged [_dda +1]);_fcaf :=_cgd (_ged [_dda +2]);_degf =append (_degf ,_g .NewPoint (_eeda ,_fcaf ));_cbfb ,_febg =_eeda ,_fcaf ;_dda +=4;case 1:_afe :=_cgd (_ged [_dda +1]);_cdb :=_cgd (_ged [_dda +2]);_degf =append (_degf ,_g .NewPoint (_afe ,_cdb ));
_cbfb ,_febg =_afe ,_cdb ;_dda +=4;case 2:_dcgd :=_cgd (_ged [_dda +1]);_bcb :=_cgd (_ged [_dda +2]);_dad :=_cgd (_ged [_dda +3]);_cece :=_cgd (_ged [_dda +4]);_dbdd :=_gb (_cbfb ,_febg ,_dcgd ,_bcb ,_dad ,_cece );_degf =append (_degf ,_dbdd ...);_cbfb ,_febg =_dad ,_cece ;
_dda +=6;case 3:_fdcg :=_cgd (_ged [_dda +1]);_ggga :=_cgd (_ged [_dda +2]);_ffeeg :=_cgd (_ged [_dda +3]);_fgcf :=_cgd (_ged [_dda +4]);_cgea :=_cgd (_ged [_dda +5]);_fbb :=_cgd (_ged [_dda +6]);_bdcg :=_aca (_cbfb ,_febg ,_fdcg ,_ggga ,_ffeeg ,_fgcf ,_cgea ,_fbb );
_degf =append (_degf ,_bdcg ...);_cbfb ,_febg =_cgea ,_fbb ;_dda +=8;default:_gc .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_ged );return _gddc ;};};if len (_degf )> 0{_gddc =append (_gddc ,_degf );
};return _gddc ;};func _fbc (_cdbc _cf .Image ,_gbdc repeatOp )_ge .Pattern {return &surfacePattern {_gacb :_cdbc ,_bdg :_gbdc };};func _bebg (_eee [][]_g .Point ,_aab []float64 ,_bef float64 )[][]_g .Point {var _cag [][]_g .Point ;if len (_aab )==0{return _eee ;
};if len (_aab )==1{_aab =append (_aab ,_aab [0]);};for _ ,_cbdc :=range _eee {if len (_cbdc )< 2{continue ;};_fbfb :=_cbdc [0];_agdb :=1;_egd :=0;_dcd :=0.0;if _bef !=0{var _agbf float64 ;for _ ,_bgbg :=range _aab {_agbf +=_bgbg ;};_bef =_a .Mod (_bef ,_agbf );
if _bef < 0{_bef +=_agbf ;};for _fef ,_agbc :=range _aab {_bef -=_agbc ;if _bef < 0{_egd =_fef ;_dcd =_agbc +_bef ;break ;};};};var _bacd []_g .Point ;_bacd =append (_bacd ,_fbfb );for _agdb < len (_cbdc ){_adbgd :=_aab [_egd ];_ecbd :=_cbdc [_agdb ];_gebg :=_fbfb .Distance (_ecbd );
_bdfb :=_adbgd -_dcd ;if _gebg > _bdfb {_egg :=_bdfb /_gebg ;_deeg :=_fbfb .Interpolate (_ecbd ,_egg );_bacd =append (_bacd ,_deeg );if _egd %2==0&&len (_bacd )> 1{_cag =append (_cag ,_bacd );};_bacd =nil ;_bacd =append (_bacd ,_deeg );_dcd =0;_fbfb =_deeg ;
_egd =(_egd +1)%len (_aab );}else {_bacd =append (_bacd ,_ecbd );_fbfb =_ecbd ;_dcd +=_gebg ;_agdb ++;};};if _egd %2==0&&len (_bacd )> 1{_cag =append (_cag ,_bacd );};};return _cag ;};func _aga (_egc ,_baab uint32 ,_effb float64 )uint8 {return uint8 (int32 (float64 (_egc )*(1.0-_effb )+float64 (_baab )*_effb )>>8);
};func (_cbdce *solidPattern )ColorAt (x ,y int )_c .Color {return _cbdce ._afcf };func (_fdb *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_fdb .NewSubPath ();_fdb .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_a .Pi );_fdb .ClosePath ();};func (_fcc *Context )SetColor (c _c .Color ){_fcc .setFillAndStrokeColor (c )};
type solidPattern struct{_afcf _c .Color };func (_dba *Context )Clip (){_dba .ClipPreserve ();_dba .ClearPath ()};const (_adbge repeatOp =iota ;_bbf ;_febb ;_bbcb ;);func _cgd (_cabb _fb .Int26_6 )float64 {const _egbd ,_fagf =6,1<<6-1;if _cabb >=0{return float64 (_cabb >>_egbd )+float64 (_cabb &_fagf )/64;
};_cabb =-_cabb ;if _cabb >=0{return -(float64 (_cabb >>_egbd )+float64 (_cabb &_fagf )/64);};return 0;};func (_deb *Context )Scale (x ,y float64 ){_deb ._gbd =_deb ._gbd .Scale (x ,y )};type linearGradient struct{_fbf ,_cfa ,_afcb ,_edgf float64 ;_abf stops ;
};func (_begg *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_begg ._beg {_begg .MoveTo (x1 ,y1 );};_cd ,_ceee :=_begg ._dgd .X ,_begg ._dgd .Y ;x1 ,y1 =_begg .Transform (x1 ,y1 );x2 ,y2 =_begg .Transform (x2 ,y2 );x3 ,y3 =_begg .Transform (x3 ,y3 );
_cdg :=_aca (_cd ,_ceee ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_geb :=_addb (_begg ._dgd );for _ ,_dae :=range _cdg [1:]{_deg :=_addb (_dae );if _deg ==_geb {continue ;};_geb =_deg ;_begg ._gea .Add1 (_deg );_begg ._cg .Add1 (_deg );_begg ._dgd =_dae ;};};func (_ccca *Context )DrawString (s string ,face _aa .Face ,x ,y float64 ){_ccca .DrawStringAnchored (s ,face ,x ,y ,0,0);
};func (_bfa *linearGradient )ColorAt (x ,y int )_c .Color {if len (_bfa ._abf )==0{return _c .Transparent ;};_cff ,_aec :=float64 (x ),float64 (y );_febc ,_bgae ,_cec ,_gdec :=_bfa ._fbf ,_bfa ._cfa ,_bfa ._afcb ,_bfa ._edgf ;_cfd ,_fabg :=_cec -_febc ,_gdec -_bgae ;
if _fabg ==0&&_cfd !=0{return _fcg ((_cff -_febc )/_cfd ,_bfa ._abf );};if _cfd ==0&&_fabg !=0{return _fcg ((_aec -_bgae )/_fabg ,_bfa ._abf );};_bdfc :=_cfd *(_cff -_febc )+_fabg *(_aec -_bgae );if _bdfc < 0{return _bfa ._abf [0]._debf ;};_ffee :=_a .Hypot (_cfd ,_fabg );
_ada :=((_cff -_febc )*-_fabg +(_aec -_bgae )*_cfd )/(_ffee *_ffee );_dac ,_cbe :=_febc +_ada *-_fabg ,_bgae +_ada *_cfd ;_dbe :=_a .Hypot (_cff -_dac ,_aec -_cbe )/_ffee ;return _fcg (_dbe ,_bfa ._abf );};func (_cbae *Context )AsMask ()*_cf .Alpha {_abb :=_cf .NewAlpha (_cbae ._bb .Bounds ());
_gf .Draw (_abb ,_cbae ._bb .Bounds (),_cbae ._bb ,_cf .Point {},_gf .Src );return _abb ;};func (_ffb *Context )setFillAndStrokeColor (_bebd _c .Color ){_ffb ._gfb =_bebd ;_ffb ._cbde =_fbeb (_bebd );_ffb ._db =_fbeb (_bebd );};func (_bfe *Context )SetDashOffset (offset float64 ){_bfe ._acg =offset };
func (_aee *Context )Stroke (){_aee .StrokePreserve ();_aee .ClearPath ()};func _fbeb (_efcf _c .Color )_ge .Pattern {return &solidPattern {_afcf :_efcf }};func (_bgaec *patternPainter )Paint (ss []_de .Span ,done bool ){_dgfa :=_bgaec ._eaa .Bounds ();
for _ ,_bgbb :=range ss {if _bgbb .Y < _dgfa .Min .Y {continue ;};if _bgbb .Y >=_dgfa .Max .Y {return ;};if _bgbb .X0 < _dgfa .Min .X {_bgbb .X0 =_dgfa .Min .X ;};if _bgbb .X1 > _dgfa .Max .X {_bgbb .X1 =_dgfa .Max .X ;};if _bgbb .X0 >=_bgbb .X1 {continue ;
};const _dbdf =1<<16-1;_adad :=_bgbb .Y -_bgaec ._eaa .Rect .Min .Y ;_geca :=_bgbb .X0 -_bgaec ._eaa .Rect .Min .X ;_fdfe :=(_bgbb .Y -_bgaec ._eaa .Rect .Min .Y )*_bgaec ._eaa .Stride +(_bgbb .X0 -_bgaec ._eaa .Rect .Min .X )*4;_bfd :=_fdfe +(_bgbb .X1 -_bgbb .X0 )*4;
for _dcc ,_dgcd :=_fdfe ,_geca ;_dcc < _bfd ;_dcc ,_dgcd =_dcc +4,_dgcd +1{_fcdc :=_bgbb .Alpha ;if _bgaec ._bgfef !=nil {_fcdc =_fcdc *uint32 (_bgaec ._bgfef .AlphaAt (_dgcd ,_adad ).A )/255;if _fcdc ==0{continue ;};};_fad :=_bgaec ._bafc .ColorAt (_dgcd ,_adad );
_fcgf ,_agc ,_dcbf ,_gcfd :=_fad .RGBA ();_caf :=uint32 (_bgaec ._eaa .Pix [_dcc +0]);_aba :=uint32 (_bgaec ._eaa .Pix [_dcc +1]);_fdcgg :=uint32 (_bgaec ._eaa .Pix [_dcc +2]);_fdbc :=uint32 (_bgaec ._eaa .Pix [_dcc +3]);_dcec :=(_dbdf -(_gcfd *_fcdc /_dbdf ))*0x101;
_bgaec ._eaa .Pix [_dcc +0]=uint8 ((_caf *_dcec +_fcgf *_fcdc )/_dbdf >>8);_bgaec ._eaa .Pix [_dcc +1]=uint8 ((_aba *_dcec +_agc *_fcdc )/_dbdf >>8);_bgaec ._eaa .Pix [_dcc +2]=uint8 ((_fdcgg *_dcec +_dcbf *_fcdc )/_dbdf >>8);_bgaec ._eaa .Pix [_dcc +3]=uint8 ((_fdbc *_dcec +_gcfd *_fcdc )/_dbdf >>8);
};};};type stops []stop ;func (_gcbf *Context )stroke (_dbb _de .Painter ){_cdc :=_gcbf ._gea ;if len (_gcbf ._dc )> 0{_cdc =_cdcg (_cdc ,_gcbf ._dc ,_gcbf ._acg );}else {_cdc =_ggdc (_ceb (_cdc ));};_bbb :=_gcbf ._faa ;_bbb .UseNonZeroWinding =true ;_bbb .Clear ();
_edg :=(_gcbf ._gbd .ScalingFactorX ()+_gcbf ._gbd .ScalingFactorY ())/2;_bbb .AddStroke (_cdc ,_bgd (_gcbf ._gff *_edg ),_gcbf .capper (),_gcbf .joiner ());_bbb .Rasterize (_dbb );};func (_abe *Context )InvertMask (){if _abe ._gg ==nil {_abe ._gg =_cf .NewAlpha (_abe ._bb .Bounds ());
}else {for _dee ,_fbg :=range _abe ._gg .Pix {_abe ._gg .Pix [_dee ]=255-_fbg ;};};};func _dbg (_eabg ,_gcfb ,_gddb ,_ebfb ,_ffd ,_dbcc float64 )float64 {return _eabg *_ebfb +_gcfb *_ffd +_gddb *_dbcc ;};func (_abgf stops )Swap (i ,j int ){_abgf [i ],_abgf [j ]=_abgf [j ],_abgf [i ]};
type repeatOp int ;func _fcg (_fdeb float64 ,_fae stops )_c .Color {if _fdeb <=0.0||len (_fae )==1{return _fae [0]._debf ;};_ebff :=_fae [len (_fae )-1];if _fdeb >=_ebff ._aac {return _ebff ._debf ;};for _fdee ,_eddea :=range _fae [1:]{if _fdeb < _eddea ._aac {_fdeb =(_fdeb -_fae [_fdee ]._aac )/(_eddea ._aac -_fae [_fdee ]._aac );
return _aff (_fae [_fdee ]._debf ,_eddea ._debf ,_fdeb );};};return _ebff ._debf ;};func _da (_e ,_fa ,_dd ,_ba ,_ce ,_fg ,_ed float64 )(_ca ,_cae float64 ){_fd :=1-_ed ;_adb :=_fd *_fd ;_bae :=2*_fd *_ed ;_cea :=_ed *_ed ;_ca =_adb *_e +_bae *_dd +_cea *_ce ;
_cae =_adb *_fa +_bae *_ba +_cea *_fg ;return ;};func (_ace *Context )DrawPoint (x ,y ,r float64 ){_ace .Push ();_eff ,_gga :=_ace .Transform (x ,y );_ace .Identity ();_ace .DrawCircle (_eff ,_gga ,r );_ace .Pop ();};func (_dag *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_dag .Translate (x ,y );
_dag .Scale (sx ,sy );_dag .Translate (-x ,-y );};func (_ggb *Context )Width ()int {return _ggb ._afb };func (_dfbg *Context )FillPreserve (){var _adg _de .Painter ;if _dfbg ._gg ==nil {if _ffea ,_gd :=_dfbg ._cbde .(*solidPattern );_gd {_bdf :=_de .NewRGBAPainter (_dfbg ._bb );
_bdf .SetColor (_ffea ._afcf );_adg =_bdf ;};};if _adg ==nil {_adg =_gbab (_dfbg ._bb ,_dfbg ._gg ,_dfbg ._cbde );};_dfbg .fill (_adg );};func (_ddg *Context )ClipPreserve (){_agg :=_cf .NewAlpha (_cf .Rect (0,0,_ddg ._afb ,_ddg ._ga ));_efc :=_de .NewAlphaOverPainter (_agg );
_ddg .fill (_efc );if _ddg ._gg ==nil {_ddg ._gg =_agg ;}else {_ggf :=_cf .NewAlpha (_cf .Rect (0,0,_ddg ._afb ,_ddg ._ga ));_gf .DrawMask (_ggf ,_ggf .Bounds (),_agg ,_cf .Point {},_ddg ._gg ,_cf .Point {},_gf .Over );_ddg ._gg =_ggf ;};};func (_gag *Context )Translate (x ,y float64 ){_gag ._gbd =_gag ._gbd .Translate (x ,y )};
func (_gggb *Context )Rotate (angle float64 ){_gggb ._gbd =_gggb ._gbd .Rotate (angle )};func (_gffb *Context )SetHexColor (x string ){_bdd ,_gaef ,_faac ,_gca :=_fbbg (x );_gffb .SetRGBA255 (_bdd ,_gaef ,_faac ,_gca );};func (_aed *Context )SetDash (dashes ...float64 ){_aed ._dc =dashes };
func (_bad *Context )joiner ()_de .Joiner {switch _bad ._fde {case _ge .LineJoinBevel :return _de .BevelJoiner ;case _ge .LineJoinRound :return _de .RoundJoiner ;};return nil ;};func (_geed stops )Len ()int {return len (_geed )};func (_gffbb *Context )DrawRectangle (x ,y ,w ,h float64 ){_gffbb .NewSubPath ();
_gffbb .MoveTo (x ,y );_gffbb .LineTo (x +w ,y );_gffbb .LineTo (x +w ,y +h );_gffbb .LineTo (x ,y +h );_gffbb .ClosePath ();};func (_bgb *Context )DrawImage (im _cf .Image ,x ,y int ){_bgb .DrawImageAnchored (im ,x ,y ,0,0)};func (_bcd *Context )SetFillStyle (pattern _ge .Pattern ){if _acdb ,_cee :=pattern .(*solidPattern );
_cee {_bcd ._gfb =_acdb ._afcf ;};_bcd ._cbde =pattern ;};func _bgd (_egde float64 )_fb .Int26_6 {return _fb .Int26_6 (_egde *64)};func (_dce *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_dce ._beg {_dce .MoveTo (x1 ,y1 );};x1 ,y1 =_dce .Transform (x1 ,y1 );
x2 ,y2 =_dce .Transform (x2 ,y2 );_ddf :=_g .NewPoint (x1 ,y1 );_dfa :=_g .NewPoint (x2 ,y2 );_adbg :=_addb (_ddf );_eafb :=_addb (_dfa );_dce ._gea .Add2 (_adbg ,_eafb );_dce ._cg .Add2 (_adbg ,_eafb );_dce ._dgd =_dfa ;};func (_cga *Context )RotateAbout (angle ,x ,y float64 ){_cga .Translate (x ,y );
_cga .Rotate (angle );_cga .Translate (-x ,-y );};func (_fdc *Context )DrawStringAnchored (s string ,face _aa .Face ,x ,y ,ax ,ay float64 ){_edga ,_gdc :=_fdc .MeasureString (s ,face );_fdc .drawString (s ,face ,x -ax *_edga ,y +ay *_gdc );};type radialGradient struct{_gdd ,_bea ,_agf circle ;
_cbg ,_cbed float64 ;_dcg float64 ;_bcc stops ;};func _aff (_eac ,_fgd _c .Color ,_dggg float64 )_c .Color {_ccd ,_eaec ,_bcdb ,_cbdb :=_eac .RGBA ();_debg ,_adc ,_faee ,_dbbe :=_fgd .RGBA ();return _c .RGBA {_aga (_ccd ,_debg ,_dggg ),_aga (_eaec ,_adc ,_dggg ),_aga (_bcdb ,_faee ,_dggg ),_aga (_cbdb ,_dbbe ,_dggg )};
};func (_adbd *Context )Height ()int {return _adbd ._ga };func (_gdee *Context )drawRegularPolygon (_edcb int ,_adf ,_gef ,_gbe ,_gbb float64 ){_dca :=2*_a .Pi /float64 (_edcb );_gbb -=_a .Pi /2;if _edcb %2==0{_gbb +=_dca /2;};_gdee .NewSubPath ();for _dfbe :=0;
_dfbe < _edcb ;_dfbe ++{_ccc :=_gbb +_dca *float64 (_dfbe );_gdee .LineTo (_adf +_gbe *_a .Cos (_ccc ),_gef +_gbe *_a .Sin (_ccc ));};_gdee .ClosePath ();};type circle struct{_dcad ,_baa ,_bec float64 };func (_ecb *Context )SetFillRGBA (r ,g ,b ,a float64 ){_ag :=_c .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_ecb ._gfb =_ag ;_ecb ._cbde =_fbeb (_ag );};func (_fab *Context )SetRGB255 (r ,g ,b int ){_fab .SetRGBA255 (r ,g ,b ,255)};func (_egba *Context )MeasureString (s string ,face _aa .Face )(_afd ,_dgfdg float64 ){_dbc :=&_aa .Drawer {Face :face };_aaa :=_dbc .MeasureString (s );
return float64 (_aaa >>6),_egba ._bca .Tf .Size ;};func (_ggg *Context )LineWidth ()float64 {return _ggg ._gff };func _gagf (_edaf ,_fdg ,_dga ,_cadg ,_gbbd ,_bgfb float64 )_ge .Gradient {_cbef :=circle {_edaf ,_fdg ,_dga };_beca :=circle {_cadg ,_gbbd ,_bgfb };
_cdgd :=circle {_cadg -_edaf ,_gbbd -_fdg ,_bgfb -_dga };_dgad :=_dbg (_cdgd ._dcad ,_cdgd ._baa ,-_cdgd ._bec ,_cdgd ._dcad ,_cdgd ._baa ,_cdgd ._bec );var _abgfb float64 ;if _dgad !=0{_abgfb =1.0/_dgad ;};_dgcf :=-_cbef ._bec ;_bce :=&radialGradient {_gdd :_cbef ,_bea :_beca ,_agf :_cdgd ,_cbg :_dgad ,_cbed :_abgfb ,_dcg :_dgcf };
return _bce ;};func (_ebf *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_ebf .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );};func (_ggcd *linearGradient )AddColorStop (offset float64 ,color _c .Color ){_ggcd ._abf =append (_ggcd ._abf ,stop {_aac :offset ,_debf :color });
_ad .Sort (_ggcd ._abf );};func (_bgfd stops )Less (i ,j int )bool {return _bgfd [i ]._aac < _bgfd [j ]._aac };func (_bgca *Context )Fill (){_bgca .FillPreserve ();_bgca .ClearPath ()};func NewContextForImage (im _cf .Image )*Context {return NewContextForRGBA (_gcfa (im ))};
func _gb (_edd ,_bfc ,_ff ,_gee ,_ac ,_bd float64 )[]_g .Point {_ea :=(_a .Hypot (_ff -_edd ,_gee -_bfc )+_a .Hypot (_ac -_ff ,_bd -_gee ));_cb :=int (_ea +0.5);if _cb < 4{_cb =4;};_gfe :=float64 (_cb )-1;_eg :=make ([]_g .Point ,_cb );for _bfb :=0;_bfb < _cb ;
_bfb ++{_fgf :=float64 (_bfb )/_gfe ;_ef ,_dg :=_da (_edd ,_bfc ,_ff ,_gee ,_ac ,_bd ,_fgf );_eg [_bfb ]=_g .NewPoint (_ef ,_dg );};return _eg ;};func _gcfa (_ebea _cf .Image )*_cf .RGBA {_aebb :=_ebea .Bounds ();_ddc :=_cf .NewRGBA (_aebb );_d .Draw (_ddc ,_aebb ,_ebea ,_aebb .Min ,_d .Src );
return _ddc ;};func (_fca *Context )Pop (){_edde :=*_fca ;_agd :=_fca ._bcg ;_ecc :=_agd [len (_agd )-1];*_fca =*_ecc ;_fca ._gea =_edde ._gea ;_fca ._cg =_edde ._cg ;_fca ._baf =_edde ._baf ;_fca ._dgd =_edde ._dgd ;_fca ._beg =_edde ._beg ;};func (_fdbe *Context )TextState ()*_ge .TextState {return &_fdbe ._bca };
func (_bfcg *Context )SetMask (mask *_cf .Alpha )error {if mask .Bounds ().Size ()!=_bfcg ._bb .Bounds ().Size (){return _bf .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_bfcg ._gg =mask ;return nil ;};type patternPainter struct{_eaa *_cf .RGBA ;_bgfef *_cf .Alpha ;_bafc _ge .Pattern ;};type stop struct{_aac float64 ;_debf _c .Color ;};func (_agbe *Context )fill (_edc _de .Painter ){_gcd :=_agbe ._cg ;if _agbe ._beg {_gcd =make (_de .Path ,len (_agbe ._cg ));
copy (_gcd ,_agbe ._cg );_gcd .Add1 (_addb (_agbe ._baf ));};_bgf :=_agbe ._faa ;_bgf .UseNonZeroWinding =_agbe ._bbg ==_ge .FillRuleWinding ;_bgf .Clear ();_bgf .AddPath (_gcd );_bgf .Rasterize (_edc );};func _gbab (_efb *_cf .RGBA ,_gbcb *_cf .Alpha ,_adfd _ge .Pattern )*patternPainter {return &patternPainter {_efb ,_gbcb ,_adfd };
};func _ddge (_gad ,_bgfe ,_dgfb ,_cgga float64 )_ge .Gradient {_fea :=&linearGradient {_fbf :_gad ,_cfa :_bgfe ,_afcb :_dgfb ,_edgf :_cgga };return _fea ;};func (_bfbc *Context )Shear (x ,y float64 ){_bfbc ._gbd .Shear (x ,y )};func (_cfb *Context )SetRGB (r ,g ,b float64 ){_cfb .SetRGBA (r ,g ,b ,1)};
func (_eecg *Context )Identity (){_eecg ._gbd =_g .IdentityMatrix ()};func (_bebdc *Context )Clear (){_aag :=_cf .NewUniform (_bebdc ._gfb );_gf .Draw (_bebdc ._bb ,_bebdc ._bb .Bounds (),_aag ,_cf .Point {},_gf .Src );};func (_cda *Context )Matrix ()_g .Matrix {return _cda ._gbd };
func (_fag *radialGradient )ColorAt (x ,y int )_c .Color {if len (_fag ._bcc )==0{return _c .Transparent ;};_ebe ,_eae :=float64 (x )+0.5-_fag ._gdd ._dcad ,float64 (y )+0.5-_fag ._gdd ._baa ;_ceae :=_dbg (_ebe ,_eae ,_fag ._gdd ._bec ,_fag ._agf ._dcad ,_fag ._agf ._baa ,_fag ._agf ._bec );
_gbca :=_dbg (_ebe ,_eae ,-_fag ._gdd ._bec ,_ebe ,_eae ,_fag ._gdd ._bec );if _fag ._cbg ==0{if _ceae ==0{return _c .Transparent ;};_acaa :=0.5*_gbca /_ceae ;if _acaa *_fag ._agf ._bec >=_fag ._dcg {return _fcg (_acaa ,_fag ._bcc );};return _c .Transparent ;
};_adgeb :=_dbg (_ceae ,_fag ._cbg ,0,_ceae ,-_gbca ,0);if _adgeb >=0{_feab :=_a .Sqrt (_adgeb );_dde :=(_ceae +_feab )*_fag ._cbed ;_cab :=(_ceae -_feab )*_fag ._cbed ;if _dde *_fag ._agf ._bec >=_fag ._dcg {return _fcg (_dde ,_fag ._bcc );}else if _cab *_fag ._agf ._bec >=_fag ._dcg {return _fcg (_cab ,_fag ._bcc );
};};return _c .Transparent ;};