//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_b "errors";_dg "fmt";_a "github.com/golang/freetype/raster";_cc "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/transform";_gd "github.com/unidoc/unipdf/v3/render/internal/context";_fcb "golang.org/x/image/draw";
_gb "golang.org/x/image/font";_fcg "golang.org/x/image/math/f64";_ff "golang.org/x/image/math/fixed";_dc "image";_cg "image/color";_fc "image/draw";_d "math";_g "sort";_f "strings";);func (_dda *Context )DrawImage (im _dc .Image ,x ,y int ){_dda .DrawImageAnchored (im ,x ,y ,0,0)};
func (_dfbf *Context )Translate (x ,y float64 ){_dfbf ._bf =_dfbf ._bf .Translate (x ,y )};type solidPattern struct{_bdgb _cg .Color };func (_fgae *Context )Identity (){_fgae ._bf =_e .IdentityMatrix ()};func (_aae *patternPainter )Paint (ss []_a .Span ,done bool ){_aega :=_aae ._agg .Bounds ();
for _ ,_cggd :=range ss {if _cggd .Y < _aega .Min .Y {continue ;};if _cggd .Y >=_aega .Max .Y {return ;};if _cggd .X0 < _aega .Min .X {_cggd .X0 =_aega .Min .X ;};if _cggd .X1 > _aega .Max .X {_cggd .X1 =_aega .Max .X ;};if _cggd .X0 >=_cggd .X1 {continue ;
};const _acfa =1<<16-1;_gbdf :=_cggd .Y -_aae ._agg .Rect .Min .Y ;_ddee :=_cggd .X0 -_aae ._agg .Rect .Min .X ;_ffcc :=(_cggd .Y -_aae ._agg .Rect .Min .Y )*_aae ._agg .Stride +(_cggd .X0 -_aae ._agg .Rect .Min .X )*4;_bgead :=_ffcc +(_cggd .X1 -_cggd .X0 )*4;
for _agb ,_ggb :=_ffcc ,_ddee ;_agb < _bgead ;_agb ,_ggb =_agb +4,_ggb +1{_dbe :=_cggd .Alpha ;if _aae ._fecd !=nil {_dbe =_dbe *uint32 (_aae ._fecd .AlphaAt (_ggb ,_gbdf ).A )/255;if _dbe ==0{continue ;};};_dbd :=_aae ._geee .ColorAt (_ggb ,_gbdf );_ggec ,_ddb ,_cddb ,_aefe :=_dbd .RGBA ();
_daeg :=uint32 (_aae ._agg .Pix [_agb +0]);_gfbc :=uint32 (_aae ._agg .Pix [_agb +1]);_edff :=uint32 (_aae ._agg .Pix [_agb +2]);_fab :=uint32 (_aae ._agg .Pix [_agb +3]);_deaf :=(_acfa -(_aefe *_dbe /_acfa ))*0x101;_aae ._agg .Pix [_agb +0]=uint8 ((_daeg *_deaf +_ggec *_dbe )/_acfa >>8);
_aae ._agg .Pix [_agb +1]=uint8 ((_gfbc *_deaf +_ddb *_dbe )/_acfa >>8);_aae ._agg .Pix [_agb +2]=uint8 ((_edff *_deaf +_cddb *_dbe )/_acfa >>8);_aae ._agg .Pix [_agb +3]=uint8 ((_fab *_deaf +_aefe *_dbe )/_acfa >>8);};};};func (_dad *Context )SetFillRGBA (r ,g ,b ,a float64 ){_bfa :=_cg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_dad ._gca =_bfa ;_dad ._ffc =_fdgd (_bfa );};func (_bgd *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_bgd .Translate (x ,y );_bgd .Scale (sx ,sy );_bgd .Translate (-x ,-y );};func (_dca *Context )LineWidth ()float64 {return _dca ._cded };func _cfb (_fbd float64 )float64 {return _fbd *_d .Pi /180};
func (_daa *solidPattern )ColorAt (x ,y int )_cg .Color {return _daa ._bdgb };func (_ggd *Context )SetRGBA255 (r ,g ,b ,a int ){_ggd ._gca =_cg .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};_ggd .setFillAndStrokeColor (_ggd ._gca );};func NewContext (width ,height int )*Context {return NewContextForRGBA (_dc .NewRGBA (_dc .Rect (0,0,width ,height )));
};func (_agc *Context )SetHexColor (x string ){_feb ,_dde ,_eda ,_ffbc :=_cdac (x );_agc .SetRGBA255 (_feb ,_dde ,_eda ,_ffbc );};func (_gab *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _dba =16;for _fegg :=0;_fegg < _dba ;
_fegg ++{_fdg :=float64 (_fegg +0)/_dba ;_eaf :=float64 (_fegg +1)/_dba ;_fad :=angle1 +(angle2 -angle1 )*_fdg ;_fdb :=angle1 +(angle2 -angle1 )*_eaf ;_cae :=x +rx *_d .Cos (_fad );_bce :=y +ry *_d .Sin (_fad );_cad :=x +rx *_d .Cos ((_fad +_fdb )/2);_bbc :=y +ry *_d .Sin ((_fad +_fdb )/2);
_gef :=x +rx *_d .Cos (_fdb );_eaff :=y +ry *_d .Sin (_fdb );_fgac :=2*_cad -_cae /2-_gef /2;_aedb :=2*_bbc -_bce /2-_eaff /2;if _fegg ==0{if _gab ._dd {_gab .LineTo (_cae ,_bce );}else {_gab .MoveTo (_cae ,_bce );};};_gab .QuadraticTo (_fgac ,_aedb ,_gef ,_eaff );
};};func (_deb *Context )capper ()_a .Capper {switch _deb ._bde {case _gd .LineCapButt :return _a .ButtCapper ;case _gd .LineCapRound :return _a .RoundCapper ;case _gd .LineCapSquare :return _a .SquareCapper ;};return nil ;};func (_fb *Context )Width ()int {return _fb ._cbea };
func (_gcad *Context )RotateAbout (angle ,x ,y float64 ){_gcad .Translate (x ,y );_gcad .Rotate (angle );_gcad .Translate (-x ,-y );};func _fdgd (_dbaa _cg .Color )_gd .Pattern {return &solidPattern {_bdgb :_dbaa }};func (_cdede *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_cdede ._dd {_cdede .MoveTo (x1 ,y1 );
};x1 ,y1 =_cdede .Transform (x1 ,y1 );x2 ,y2 =_cdede .Transform (x2 ,y2 );_ffa :=_e .NewPoint (x1 ,y1 );_efc :=_e .NewPoint (x2 ,y2 );_cbc :=_fccb (_ffa );_aab :=_fccb (_efc );_cdede ._cec .Add2 (_cbc ,_aab );_cdede ._ef .Add2 (_cbc ,_aab );_cdede ._cca =_efc ;
};func (_fbgg *Context )Pop (){_fdfc :=*_fbgg ;_dfbg :=_fbgg ._bda ;_bbcf :=_dfbg [len (_dfbg )-1];*_fbgg =*_bbcf ;_fbgg ._cec =_fdfc ._cec ;_fbgg ._ef =_fdfc ._ef ;_fbgg ._cda =_fdfc ._cda ;_fbgg ._cca =_fdfc ._cca ;_fbgg ._dd =_fdfc ._dd ;};func (_adb *Context )TextState ()*_gd .TextState {return &_adb ._ccae };
func _fgab (_geea ,_fcac ,_aecf ,_eca float64 )_gd .Gradient {_fcgg :=&linearGradient {_gdfd :_geea ,_gad :_fcac ,_ged :_aecf ,_eade :_eca };return _fcgg ;};const (_fdcg repeatOp =iota ;_gcbd ;_dgeb ;_ggfb ;);func _cge (_fdc _a .Path )[][]_e .Point {var _cgc [][]_e .Point ;
var _ddc []_e .Point ;var _cade ,_gfffg float64 ;for _cfab :=0;_cfab < len (_fdc );{switch _fdc [_cfab ]{case 0:if len (_ddc )> 0{_cgc =append (_cgc ,_ddc );_ddc =nil ;};_ggg :=_efee (_fdc [_cfab +1]);_bfbg :=_efee (_fdc [_cfab +2]);_ddc =append (_ddc ,_e .NewPoint (_ggg ,_bfbg ));
_cade ,_gfffg =_ggg ,_bfbg ;_cfab +=4;case 1:_cfce :=_efee (_fdc [_cfab +1]);_cffb :=_efee (_fdc [_cfab +2]);_ddc =append (_ddc ,_e .NewPoint (_cfce ,_cffb ));_cade ,_gfffg =_cfce ,_cffb ;_cfab +=4;case 2:_cacd :=_efee (_fdc [_cfab +1]);_gdg :=_efee (_fdc [_cfab +2]);
_efce :=_efee (_fdc [_cfab +3]);_abga :=_efee (_fdc [_cfab +4]);_gfd :=_ca (_cade ,_gfffg ,_cacd ,_gdg ,_efce ,_abga );_ddc =append (_ddc ,_gfd ...);_cade ,_gfffg =_efce ,_abga ;_cfab +=6;case 3:_ada :=_efee (_fdc [_cfab +1]);_bfde :=_efee (_fdc [_cfab +2]);
_caf :=_efee (_fdc [_cfab +3]);_eebd :=_efee (_fdc [_cfab +4]);_bga :=_efee (_fdc [_cfab +5]);_gbd :=_efee (_fdc [_cfab +6]);_eacd :=_cgbf (_cade ,_gfffg ,_ada ,_bfde ,_caf ,_eebd ,_bga ,_gbd );_ddc =append (_ddc ,_eacd ...);_cade ,_gfffg =_bga ,_gbd ;
_cfab +=8;default:_cc .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_fdc );return _cgc ;};};if len (_ddc )> 0{_cgc =append (_cgc ,_ddc );};return _cgc ;};func (_gbeb *Context )MeasureString (s string ,face _gb .Face )(_eea ,_dgbe float64 ){_ffe :=&_gb .Drawer {Face :face };
_cfg :=_ffe .MeasureString (s );return float64 (_cfg >>6),_gbeb ._ccae .Tf .Size ;};func _cdg (_efga ,_gbgc ,_dbg ,_fgc ,_gcff ,_fef float64 )float64 {return _efga *_fgc +_gbgc *_gcff +_dbg *_fef ;};func _efee (_egb _ff .Int26_6 )float64 {const _ggge ,_adbbc =6,1<<6-1;
if _egb >=0{return float64 (_egb >>_ggge )+float64 (_egb &_adbbc )/64;};_egb =-_egb ;if _egb >=0{return -(float64 (_egb >>_ggge )+float64 (_egb &_adbbc )/64);};return 0;};func (_cac *Context )InvertMask (){if _cac ._df ==nil {_cac ._df =_dc .NewAlpha (_cac ._ade .Bounds ());
}else {for _fcgd ,_eaa :=range _cac ._df .Pix {_cac ._df .Pix [_fcgd ]=255-_eaa ;};};};func (_aba *Context )Image ()_dc .Image {return _aba ._ade };func (_fda *Context )DrawPoint (x ,y ,r float64 ){_fda .Push ();_dcc ,_ccac :=_fda .Transform (x ,y );_fda .Identity ();
_fda .DrawCircle (_dcc ,_ccac ,r );_fda .Pop ();};func _ad (_cdc ,_bd ,_cbd ,_ec ,_gbb ,_cee ,_ee ,_gbf ,_gdff float64 )(_fcf ,_gc float64 ){_abb :=1-_gdff ;_fge :=_abb *_abb *_abb ;_cgb :=3*_abb *_abb *_gdff ;_ae :=3*_abb *_gdff *_gdff ;_gda :=_gdff *_gdff *_gdff ;
_fcf =_fge *_cdc +_cgb *_cbd +_ae *_gbb +_gda *_ee ;_gc =_fge *_bd +_cgb *_ec +_ae *_cee +_gda *_gbf ;return ;};func (_ega *Context )ShearAbout (sx ,sy ,x ,y float64 ){_ega .Translate (x ,y );_ega .Shear (sx ,sy );_ega .Translate (-x ,-y );};func NewContextForImage (im _dc .Image )*Context {return NewContextForRGBA (_fgee (im ))};
func (_aed *Context )SetRGBA (r ,g ,b ,a float64 ){_aed ._gca =_cg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_aed .setFillAndStrokeColor (_aed ._gca );};func (_adg *Context )ClearPath (){_adg ._cec .Clear ();_adg ._ef .Clear ();
_adg ._dd =false };func _ab (_da ,_fca ,_cb ,_fa ,_bc ,_ga ,_ea float64 )(_cd ,_cbe float64 ){_cgg :=1-_ea ;_ag :=_cgg *_cgg ;_db :=2*_cgg *_ea ;_gdf :=_ea *_ea ;_cd =_ag *_da +_db *_cb +_gdf *_bc ;_cbe =_ag *_fca +_db *_fa +_gdf *_ga ;return ;};func (_fbg *Context )ClosePath (){if _fbg ._dd {_afa :=_fccb (_fbg ._cda );
_fbg ._cec .Add1 (_afa );_fbg ._ef .Add1 (_afa );_fbg ._cca =_fbg ._cda ;};};func (_gcd *Context )DrawStringAnchored (s string ,face _gb .Face ,x ,y ,ax ,ay float64 ){_fedc ,_ffcd :=_gcd .MeasureString (s ,face );_gcd .drawString (s ,face ,x -ax *_fedc ,y +ay *_ffcd );
};type Context struct{_cbea int ;_ccg int ;_ac *_a .Rasterizer ;_ade *_dc .RGBA ;_df *_dc .Alpha ;_gca _cg .Color ;_ffc _gd .Pattern ;_afg _gd .Pattern ;_cec _a .Path ;_ef _a .Path ;_cda _e .Point ;_cca _e .Point ;_dd bool ;_aff []float64 ;_cfa float64 ;
_cded float64 ;_bde _gd .LineCap ;_cfdb _gd .LineJoin ;_gg _gd .FillRule ;_bf _e .Matrix ;_ccae _gd .TextState ;_bda []*Context ;};func (_dade *surfacePattern )ColorAt (x ,y int )_cg .Color {_abede :=_dade ._ddef .Bounds ();switch _dade ._aebd {case _gcbd :if y >=_abede .Dy (){return _cg .Transparent ;
};case _dgeb :if x >=_abede .Dx (){return _cg .Transparent ;};case _ggfb :if x >=_abede .Dx ()||y >=_abede .Dy (){return _cg .Transparent ;};};x =x %_abede .Dx ()+_abede .Min .X ;y =y %_abede .Dy ()+_abede .Min .Y ;return _dade ._ddef .At (x ,y );};type patternPainter struct{_agg *_dc .RGBA ;
_fecd *_dc .Alpha ;_geee _gd .Pattern ;};func (_bceg *Context )Matrix ()_e .Matrix {return _bceg ._bf };func (_gag *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_bdb ,_eec ,_eag ,_dfc :=x ,x +r ,x +w -r ,x +w ;_dadg ,_fdfd ,_ddgc ,_ffgg :=y ,y +r ,y +h -r ,y +h ;
_gag .NewSubPath ();_gag .MoveTo (_eec ,_dadg );_gag .LineTo (_eag ,_dadg );_gag .DrawArc (_eag ,_fdfd ,r ,_cfb (270),_cfb (360));_gag .LineTo (_dfc ,_ddgc );_gag .DrawArc (_eag ,_ddgc ,r ,_cfb (0),_cfb (90));_gag .LineTo (_eec ,_ffgg );_gag .DrawArc (_eec ,_ddgc ,r ,_cfb (90),_cfb (180));
_gag .LineTo (_bdb ,_fdfd );_gag .DrawArc (_eec ,_fdfd ,r ,_cfb (180),_cfb (270));_gag .ClosePath ();};func _ffag (_cdaf ,_cagb ,_efge ,_ccgf ,_ccgg ,_efea float64 )_gd .Gradient {_fgcf :=circle {_cdaf ,_cagb ,_efge };_cbg :=circle {_ccgf ,_ccgg ,_efea };
_gagc :=circle {_ccgf -_cdaf ,_ccgg -_cagb ,_efea -_efge };_cbef :=_cdg (_gagc ._cfac ,_gagc ._febc ,-_gagc ._abed ,_gagc ._cfac ,_gagc ._febc ,_gagc ._abed );var _gge float64 ;if _cbef !=0{_gge =1.0/_cbef ;};_ecd :=-_fgcf ._abed ;_fcfdg :=&radialGradient {_cgde :_fgcf ,_dea :_cbg ,_ccgd :_gagc ,_deaa :_cbef ,_ggfc :_gge ,_efg :_ecd };
return _fcfdg ;};func (_ede *Context )StrokePreserve (){var _gcb _a .Painter ;if _ede ._df ==nil {if _eee ,_ecgb :=_ede ._afg .(*solidPattern );_ecgb {_bcg :=_a .NewRGBAPainter (_ede ._ade );_bcg .SetColor (_eee ._bdgb );_gcb =_bcg ;};};if _gcb ==nil {_gcb =_cfafd (_ede ._ade ,_ede ._df ,_ede ._afg );
};_ede .stroke (_gcb );};func (_bcgfc *radialGradient )ColorAt (x ,y int )_cg .Color {if len (_bcgfc ._gdae )==0{return _cg .Transparent ;};_caee ,_ffea :=float64 (x )+0.5-_bcgfc ._cgde ._cfac ,float64 (y )+0.5-_bcgfc ._cgde ._febc ;_cea :=_cdg (_caee ,_ffea ,_bcgfc ._cgde ._abed ,_bcgfc ._ccgd ._cfac ,_bcgfc ._ccgd ._febc ,_bcgfc ._ccgd ._abed );
_dcd :=_cdg (_caee ,_ffea ,-_bcgfc ._cgde ._abed ,_caee ,_ffea ,_bcgfc ._cgde ._abed );if _bcgfc ._deaa ==0{if _cea ==0{return _cg .Transparent ;};_daga :=0.5*_dcd /_cea ;if _daga *_bcgfc ._ccgd ._abed >=_bcgfc ._efg {return _fdfe (_daga ,_bcgfc ._gdae );
};return _cg .Transparent ;};_bdc :=_cdg (_cea ,_bcgfc ._deaa ,0,_cea ,-_dcd ,0);if _bdc >=0{_dee :=_d .Sqrt (_bdc );_ceeg :=(_cea +_dee )*_bcgfc ._ggfc ;_fdbg :=(_cea -_dee )*_bcgfc ._ggfc ;if _ceeg *_bcgfc ._ccgd ._abed >=_bcgfc ._efg {return _fdfe (_ceeg ,_bcgfc ._gdae );
}else if _fdbg *_bcgfc ._ccgd ._abed >=_bcgfc ._efg {return _fdfe (_fdbg ,_bcgfc ._gdae );};};return _cg .Transparent ;};func _cdgb (_edgb float64 )_ff .Int26_6 {return _ff .Int26_6 (_edgb *64)};func (_cgba *Context )AsMask ()*_dc .Alpha {_dgc :=_dc .NewAlpha (_cgba ._ade .Bounds ());
_fcb .Draw (_dgc ,_cgba ._ade .Bounds (),_cgba ._ade ,_dc .Point {},_fcb .Src );return _dgc ;};type stops []stop ;func NewContextForRGBA (im *_dc .RGBA )*Context {_aca :=im .Bounds ().Size ().X ;_cff :=im .Bounds ().Size ().Y ;return &Context {_cbea :_aca ,_ccg :_cff ,_ac :_a .NewRasterizer (_aca ,_cff ),_ade :im ,_gca :_cg .Transparent ,_ffc :_dag ,_afg :_abd ,_cded :1,_gg :_gd .FillRuleWinding ,_bf :_e .IdentityMatrix (),_ccae :_gd .NewTextState ()};
};func (_beg *Context )SetRGB255 (r ,g ,b int ){_beg .SetRGBA255 (r ,g ,b ,255)};func _gdef (_ddf ,_afd uint32 ,_ffge float64 )uint8 {return uint8 (int32 (float64 (_ddf )*(1.0-_ffge )+float64 (_afd )*_ffge )>>8);};func (_abae *Context )DrawCircle (x ,y ,r float64 ){_abae .NewSubPath ();
_abae .DrawEllipticalArc (x ,y ,r ,r ,0,2*_d .Pi );_abae .ClosePath ();};func (_eb *Context )stroke (_eab _a .Painter ){_bff :=_eb ._cec ;if len (_eb ._aff )> 0{_bff =_fcce (_bff ,_eb ._aff ,_eb ._cfa );}else {_bff =_aadf (_cge (_bff ));};_faa :=_eb ._ac ;
_faa .UseNonZeroWinding =true ;_faa .Clear ();_bee :=(_eb ._bf .ScalingFactorX ()+_eb ._bf .ScalingFactorY ())/2;_faa .AddStroke (_bff ,_cdgb (_eb ._cded *_bee ),_eb .capper (),_eb .joiner ());_faa .Rasterize (_eab );};func _cgbf (_af ,_gfe ,_dac ,_be ,_de ,_fcae ,_eef ,_aa float64 )[]_e .Point {_fde :=(_d .Hypot (_dac -_af ,_be -_gfe )+_d .Hypot (_de -_dac ,_fcae -_be )+_d .Hypot (_eef -_de ,_aa -_fcae ));
_fgeg :=int (_fde +0.5);if _fgeg < 4{_fgeg =4;};_dbb :=float64 (_fgeg )-1;_gfg :=make ([]_e .Point ,_fgeg );for _gff :=0;_gff < _fgeg ;_gff ++{_gbc :=float64 (_gff )/_dbb ;_fea ,_aaf :=_ad (_af ,_gfe ,_dac ,_be ,_de ,_fcae ,_eef ,_aa ,_gbc );_gfg [_gff ]=_e .NewPoint (_fea ,_aaf );
};return _gfg ;};func (_ggf *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_ggf ._dd {_ggf .MoveTo (x1 ,y1 );};_edb ,_cbf :=_ggf ._cca .X ,_ggf ._cca .Y ;x1 ,y1 =_ggf .Transform (x1 ,y1 );x2 ,y2 =_ggf .Transform (x2 ,y2 );x3 ,y3 =_ggf .Transform (x3 ,y3 );
_bgb :=_cgbf (_edb ,_cbf ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_ead :=_fccb (_ggf ._cca );for _ ,_efe :=range _bgb [1:]{_bdg :=_fccb (_efe );if _bdg ==_ead {continue ;};_ead =_bdg ;_ggf ._cec .Add1 (_bdg );_ggf ._ef .Add1 (_bdg );_ggf ._cca =_efe ;};};func _fcce (_ceaa _a .Path ,_eece []float64 ,_dff float64 )_a .Path {return _aadf (_dgg (_cge (_ceaa ),_eece ,_dff ));
};func (_eac *Context )StrokePattern ()_gd .Pattern {return _eac ._afg };type repeatOp int ;func (_faca stops )Len ()int {return len (_faca )};func _fdfe (_ece float64 ,_adeb stops )_cg .Color {if _ece <=0.0||len (_adeb )==1{return _adeb [0]._dagg ;};_ddd :=_adeb [len (_adeb )-1];
if _ece >=_ddd ._ceg {return _ddd ._dagg ;};for _bfc ,_aeb :=range _adeb [1:]{if _ece < _aeb ._ceg {_ece =(_ece -_adeb [_bfc ]._ceg )/(_aeb ._ceg -_adeb [_bfc ]._ceg );return _bge (_adeb [_bfc ]._dagg ,_aeb ._dagg ,_ece );};};return _ddd ._dagg ;};func (_gde *Context )Clear (){_abe :=_dc .NewUniform (_gde ._gca );
_fcb .Draw (_gde ._ade ,_gde ._ade .Bounds (),_abe ,_dc .Point {},_fcb .Src );};func (_ceed *Context )Scale (x ,y float64 ){_ceed ._bf =_ceed ._bf .Scale (x ,y )};func _eaga (_dgea _dc .Image ,_decc repeatOp )_gd .Pattern {return &surfacePattern {_ddef :_dgea ,_aebd :_decc };
};func (_aec *Context )setFillAndStrokeColor (_ced _cg .Color ){_aec ._gca =_ced ;_aec ._ffc =_fdgd (_ced );_aec ._afg =_fdgd (_ced );};func (_ba *Context )Stroke (){_ba .StrokePreserve ();_ba .ClearPath ()};func (_bgbg *Context )Push (){_gcf :=*_bgbg ;
_bgbg ._bda =append (_bgbg ._bda ,&_gcf )};func (_dge *Context )Height ()int {return _dge ._ccg };func (_aeag *Context )drawString (_afe string ,_gbg _gb .Face ,_eeb ,_cacf float64 ){_fdd :=&_gb .Drawer {Src :_dc .NewUniform (_aeag ._gca ),Face :_gbg ,Dot :_fccb (_e .NewPoint (_eeb ,_cacf ))};
_efd :=rune (-1);for _ ,_gcac :=range _afe {if _efd >=0{_fdd .Dot .X +=_fdd .Face .Kern (_efd ,_gcac );};_bdea ,_dbc ,_dacg ,_ecgf ,_dfb :=_fdd .Face .Glyph (_fdd .Dot ,_gcac );if !_dfb {continue ;};_bcf :=_bdea .Sub (_bdea .Min );_egc :=_dc .NewRGBA (_bcf );
_fcb .DrawMask (_egc ,_bcf ,_fdd .Src ,_dc .Point {},_dbc ,_dacg ,_fcb .Over );var _egf *_fcb .Options ;if _aeag ._df !=nil {_egf =&_fcb .Options {DstMask :_aeag ._df ,DstMaskP :_dc .Point {}};};_cfaf :=_aeag ._bf .Clone ().Translate (float64 (_bdea .Min .X ),float64 (_bdea .Min .Y ));
_gcaa :=_fcg .Aff3 {_cfaf [0],_cfaf [3],_cfaf [6],_cfaf [1],_cfaf [4],_cfaf [7]};_fcb .BiLinear .Transform (_aeag ._ade ,_gcaa ,_egc ,_bcf ,_fcb .Over ,_egf );_fdd .Dot .X +=_ecgf ;_efd =_gcac ;};};func (_abg *Context )NewSubPath (){if _abg ._dd {_abg ._ef .Add1 (_fccb (_abg ._cda ));
};_abg ._dd =false ;};func (_bfd *Context )Transform (x ,y float64 )(_fedcd ,_ebg float64 ){return _bfd ._bf .Transform (x ,y )};var (_dag =_fdgd (_cg .White );_abd =_fdgd (_cg .Black ););func (_dbf *Context )DrawRectangle (x ,y ,w ,h float64 ){_dbf .NewSubPath ();
_dbf .MoveTo (x ,y );_dbf .LineTo (x +w ,y );_dbf .LineTo (x +w ,y +h );_dbf .LineTo (x ,y +h );_dbf .ClosePath ();};func (_dec stops )Less (i ,j int )bool {return _dec [i ]._ceg < _dec [j ]._ceg };func (_ddeb *radialGradient )AddColorStop (offset float64 ,color _cg .Color ){_ddeb ._gdae =append (_ddeb ._gdae ,stop {_ceg :offset ,_dagg :color });
_g .Sort (_ddeb ._gdae );};type radialGradient struct{_cgde ,_dea ,_ccgd circle ;_deaa ,_ggfc float64 ;_efg float64 ;_gdae stops ;};func _bge (_eae ,_bac _cg .Color ,_fdgc float64 )_cg .Color {_edf ,_faf ,_bgea ,_ffebb :=_eae .RGBA ();_fba ,_efgd ,_ddde ,_egab :=_bac .RGBA ();
return _cg .RGBA {_gdef (_edf ,_fba ,_fdgc ),_gdef (_faf ,_efgd ,_fdgc ),_gdef (_bgea ,_ddde ,_fdgc ),_gdef (_ffebb ,_egab ,_fdgc )};};type linearGradient struct{_gdfd ,_gad ,_ged ,_eade float64 ;_gfb stops ;};func (_gbe *Context )SetDashOffset (offset float64 ){_gbe ._cfa =offset };
func _fccb (_bbb _e .Point )_ff .Point26_6 {return _ff .Point26_6 {X :_cdgb (_bbb .X ),Y :_cdgb (_bbb .Y )}};func _cfafd (_dgef *_dc .RGBA ,_cgbb *_dc .Alpha ,_gade _gd .Pattern )*patternPainter {return &patternPainter {_dgef ,_cgbb ,_gade };};func _aadf (_edg [][]_e .Point )_a .Path {var _gae _a .Path ;
for _ ,_efeae :=range _edg {var _cbcg _ff .Point26_6 ;for _faad ,_bbg :=range _efeae {_cdda :=_fccb (_bbg );if _faad ==0{_gae .Start (_cdda );}else {_aagf :=_cdda .X -_cbcg .X ;_acf :=_cdda .Y -_cbcg .Y ;if _aagf < 0{_aagf =-_aagf ;};if _acf < 0{_acf =-_acf ;
};if _aagf +_acf > 8{_gae .Add1 (_cdda );};};_cbcg =_cdda ;};};return _gae ;};func (_bdeg *Context )Rotate (angle float64 ){_bdeg ._bf =_bdeg ._bf .Rotate (angle )};func _ca (_fg ,_dcg ,_fe ,_cgf ,_ce ,_ge float64 )[]_e .Point {_fd :=(_d .Hypot (_fe -_fg ,_cgf -_dcg )+_d .Hypot (_ce -_fe ,_ge -_cgf ));
_fdf :=int (_fd +0.5);if _fdf < 4{_fdf =4;};_ed :=float64 (_fdf )-1;_cf :=make ([]_e .Point ,_fdf );for _cfd :=0;_cfd < _fdf ;_cfd ++{_gf :=float64 (_cfd )/_ed ;_bg ,_cde :=_ab (_fg ,_dcg ,_fe ,_cgf ,_ce ,_ge ,_gf );_cf [_cfd ]=_e .NewPoint (_bg ,_cde );
};return _cf ;};func (_aef *Context )SetStrokeStyle (pattern _gd .Pattern ){_aef ._afg =pattern };func (_fga *Context )LineTo (x ,y float64 ){if !_fga ._dd {_fga .MoveTo (x ,y );}else {x ,y =_fga .Transform (x ,y );_bega :=_e .NewPoint (x ,y );_fbf :=_fccb (_bega );
_fga ._cec .Add1 (_fbf );_fga ._ef .Add1 (_fbf );_fga ._cca =_bega ;};};func (_fac *Context )Shear (x ,y float64 ){_fac ._bf .Shear (x ,y )};func (_adc *Context )Fill (){_adc .FillPreserve ();_adc .ClearPath ()};type surfacePattern struct{_ddef _dc .Image ;
_aebd repeatOp ;};func (_ffeb *linearGradient )AddColorStop (offset float64 ,color _cg .Color ){_ffeb ._gfb =append (_ffeb ._gfb ,stop {_ceg :offset ,_dagg :color });_g .Sort (_ffeb ._gfb );};func _cdac (_dggde string )(_bag ,_bcfc ,_daad ,_ffgf int ){_dggde =_f .TrimPrefix (_dggde ,"\u0023");
_ffgf =255;if len (_dggde )==3{_fadf :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_dg .Sscanf (_dggde ,_fadf ,&_bag ,&_bcfc ,&_daad );_bag |=_bag <<4;_bcfc |=_bcfc <<4;_daad |=_daad <<4;};if len (_dggde )==6{_cefg :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_dg .Sscanf (_dggde ,_cefg ,&_bag ,&_bcfc ,&_daad );};if len (_dggde )==8{_gedc :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_dg .Sscanf (_dggde ,_gedc ,&_bag ,&_bcfc ,&_daad ,&_ffgf );};return ;};func (_fec *Context )SetFillStyle (pattern _gd .Pattern ){if _ecg ,_bb :=pattern .(*solidPattern );
_bb {_fec ._gca =_ecg ._bdgb ;};_fec ._ffc =pattern ;};func (_gee *Context )fill (_feg _a .Painter ){_aeg :=_gee ._ef ;if _gee ._dd {_aeg =make (_a .Path ,len (_gee ._ef ));copy (_aeg ,_gee ._ef );_aeg .Add1 (_fccb (_gee ._cda ));};_bcd :=_gee ._ac ;_bcd .UseNonZeroWinding =_gee ._gg ==_gd .FillRuleWinding ;
_bcd .Clear ();_bcd .AddPath (_aeg );_bcd .Rasterize (_feg );};func (_cag *Context )drawRegularPolygon (_aag int ,_dcgf ,_dcf ,_dfg ,_cgd float64 ){_cdedee :=2*_d .Pi /float64 (_aag );_cgd -=_d .Pi /2;if _aag %2==0{_cgd +=_cdedee /2;};_cag .NewSubPath ();
for _dae :=0;_dae < _aag ;_dae ++{_eg :=_cgd +_cdedee *float64 (_dae );_cag .LineTo (_dcgf +_dfg *_d .Cos (_eg ),_dcf +_dfg *_d .Sin (_eg ));};_cag .ClosePath ();};func (_dga *Context )SetColor (c _cg .Color ){_dga .setFillAndStrokeColor (c )};func (_cbcd *Context )joiner ()_a .Joiner {switch _cbcd ._cfdb {case _gd .LineJoinBevel :return _a .BevelJoiner ;
case _gd .LineJoinRound :return _a .RoundJoiner ;};return nil ;};func (_cce *Context )SetLineJoin (lineJoin _gd .LineJoin ){_cce ._cfdb =lineJoin };func _dgg (_ccd [][]_e .Point ,_bdae []float64 ,_abec float64 )[][]_e .Point {var _gccb [][]_e .Point ;if len (_bdae )==0{return _ccd ;
};if len (_bdae )==1{_bdae =append (_bdae ,_bdae [0]);};for _ ,_cef :=range _ccd {if len (_cef )< 2{continue ;};_eeg :=_cef [0];_abef :=1;_bfbd :=0;_eefe :=0.0;if _abec !=0{var _dgcb float64 ;for _ ,_dggd :=range _bdae {_dgcb +=_dggd ;};_abec =_d .Mod (_abec ,_dgcb );
if _abec < 0{_abec +=_dgcb ;};for _dbga ,_aga :=range _bdae {_abec -=_aga ;if _abec < 0{_bfbd =_dbga ;_eefe =_aga +_abec ;break ;};};};var _caaa []_e .Point ;_caaa =append (_caaa ,_eeg );for _abef < len (_cef ){_afc :=_bdae [_bfbd ];_cfe :=_cef [_abef ];
_ccaca :=_eeg .Distance (_cfe );_aee :=_afc -_eefe ;if _ccaca > _aee {_acc :=_aee /_ccaca ;_gffd :=_eeg .Interpolate (_cfe ,_acc );_caaa =append (_caaa ,_gffd );if _bfbd %2==0&&len (_caaa )> 1{_gccb =append (_gccb ,_caaa );};_caaa =nil ;_caaa =append (_caaa ,_gffd );
_eefe =0;_eeg =_gffd ;_bfbd =(_bfbd +1)%len (_bdae );}else {_caaa =append (_caaa ,_cfe );_eeg =_cfe ;_eefe +=_ccaca ;_abef ++;};};if _bfbd %2==0&&len (_caaa )> 1{_gccb =append (_gccb ,_caaa );};};return _gccb ;};func (_fed *Context )SetRGB (r ,g ,b float64 ){_fed .SetRGBA (r ,g ,b ,1)};
func (_ddgcg *Context )DrawString (s string ,face _gb .Face ,x ,y float64 ){_ddgcg .DrawStringAnchored (s ,face ,x ,y ,0,0);};func (_bba *Context )SetPixel (x ,y int ){_bba ._ade .Set (x ,y ,_bba ._gca )};func (_caa *Context )SetDash (dashes ...float64 ){_caa ._aff =dashes };
func (_cdd *Context )Clip (){_cdd .ClipPreserve ();_cdd .ClearPath ()};func (_dagc *Context )SetLineCap (lineCap _gd .LineCap ){_dagc ._bde =lineCap };func (_fbfb *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_fbfb .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );
};func (_cfdf *Context )SetFillRule (fillRule _gd .FillRule ){_cfdf ._gg =fillRule };func (_dgb *Context )SetMask (mask *_dc .Alpha )error {if mask .Bounds ().Size ()!=_dgb ._ade .Bounds ().Size (){return _b .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_dgb ._df =mask ;return nil ;};func (_ccb *Context )FillPattern ()_gd .Pattern {return _ccb ._ffc };func (_gcc *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_gcc .NewSubPath ();_gcc .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_d .Pi );_gcc .ClosePath ();};
func (_fcfb *Context )SetLineWidth (lineWidth float64 ){_fcfb ._cded =lineWidth };func (_bfe *Context )ClipPreserve (){_ddg :=_dc .NewAlpha (_dc .Rect (0,0,_bfe ._cbea ,_bfe ._ccg ));_fce :=_a .NewAlphaOverPainter (_ddg );_bfe .fill (_fce );if _bfe ._df ==nil {_bfe ._df =_ddg ;
}else {_agf :=_dc .NewAlpha (_dc .Rect (0,0,_bfe ._cbea ,_bfe ._ccg ));_fcb .DrawMask (_agf ,_agf .Bounds (),_ddg ,_dc .Point {},_bfe ._df ,_dc .Point {},_fcb .Over );_bfe ._df =_agf ;};};func (_bfb *Context )ResetClip (){_bfb ._df =nil };func (_dgf stops )Swap (i ,j int ){_dgf [i ],_dgf [j ]=_dgf [j ],_dgf [i ]};
type circle struct{_cfac ,_febc ,_abed float64 };type stop struct{_ceg float64 ;_dagg _cg .Color ;};func (_cfc *Context )SetMatrix (m _e .Matrix ){_cfc ._bf =m };func _fgee (_bdab _dc .Image )*_dc .RGBA {_baa :=_bdab .Bounds ();_bcfd :=_dc .NewRGBA (_baa );
_fc .Draw (_bcfd ,_baa ,_bdab ,_baa .Min ,_fc .Src );return _bcfd ;};func (_ffb *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_cggg :=_cg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_ffb ._afg =_fdgd (_cggg );};func (_eabe *Context )FillPreserve (){var _dfa _a .Painter ;
if _eabe ._df ==nil {if _cgfd ,_aea :=_eabe ._ffc .(*solidPattern );_aea {_dcac :=_a .NewRGBAPainter (_eabe ._ade );_dcac .SetColor (_cgfd ._bdgb );_dfa =_dcac ;};};if _dfa ==nil {_dfa =_cfafd (_eabe ._ade ,_eabe ._df ,_eabe ._ffc );};_eabe .fill (_dfa );
};func (_bcgf *linearGradient )ColorAt (x ,y int )_cg .Color {if len (_bcgf ._gfb )==0{return _cg .Transparent ;};_gfff ,_gebg :=float64 (x ),float64 (y );_fcc ,_bcb ,_fadd ,_edc :=_bcgf ._gdfd ,_bcgf ._gad ,_bcgf ._ged ,_bcgf ._eade ;_cfdg ,_gefc :=_fadd -_fcc ,_edc -_bcb ;
if _gefc ==0&&_cfdg !=0{return _fdfe ((_gfff -_fcc )/_cfdg ,_bcgf ._gfb );};if _cfdg ==0&&_gefc !=0{return _fdfe ((_gebg -_bcb )/_gefc ,_bcgf ._gfb );};_dbfc :=_cfdg *(_gfff -_fcc )+_gefc *(_gebg -_bcb );if _dbfc < 0{return _bcgf ._gfb [0]._dagg ;};_acd :=_d .Hypot (_cfdg ,_gefc );
_affc :=((_gfff -_fcc )*-_gefc +(_gebg -_bcb )*_cfdg )/(_acd *_acd );_fcfd ,_fbb :=_fcc +_affc *-_gefc ,_bcb +_affc *_cfdg ;_adbb :=_d .Hypot (_gfff -_fcfd ,_gebg -_fbb )/_acd ;return _fdfe (_adbb ,_bcgf ._gfb );};func (_fgd *Context )MoveTo (x ,y float64 ){if _fgd ._dd {_fgd ._ef .Add1 (_fccb (_fgd ._cda ));
};x ,y =_fgd .Transform (x ,y );_geb :=_e .NewPoint (x ,y );_ffg :=_fccb (_geb );_fgd ._cec .Start (_ffg );_fgd ._ef .Start (_ffg );_fgd ._cda =_geb ;_fgd ._cca =_geb ;_fgd ._dd =true ;};func (_aad *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_aad .MoveTo (x1 ,y1 );
_aad .LineTo (x2 ,y2 )};func (_bbcg *Context )DrawImageAnchored (im _dc .Image ,x ,y int ,ax ,ay float64 ){_fcad :=im .Bounds ().Size ();x -=int (ax *float64 (_fcad .X ));y -=int (ay *float64 (_fcad .Y ));_bdac :=_fcb .BiLinear ;_aaa :=_bbcg ._bf .Clone ().Translate (float64 (x ),float64 (y ));
_gac :=_fcg .Aff3 {_aaa [0],_aaa [3],_aaa [6],_aaa [1],_aaa [4],_aaa [7]};if _bbcg ._df ==nil {_bdac .Transform (_bbcg ._ade ,_gac ,im ,im .Bounds (),_fcb .Over ,nil );}else {_bdac .Transform (_bbcg ._ade ,_gac ,im ,im .Bounds (),_fcb .Over ,&_fcb .Options {DstMask :_bbcg ._df ,DstMaskP :_dc .Point {}});
};};