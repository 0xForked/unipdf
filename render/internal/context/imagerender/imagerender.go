//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_da "errors";_eb "fmt";_afd "github.com/unidoc/freetype/raster";_ad "github.com/unidoc/unipdf/v3/common";_df "github.com/unidoc/unipdf/v3/internal/transform";_fa "github.com/unidoc/unipdf/v3/render/internal/context";_af "golang.org/x/image/draw";
_cb "golang.org/x/image/font";_ge "golang.org/x/image/math/f64";_fc "golang.org/x/image/math/fixed";_f "image";_d "image/color";_a "image/draw";_c "math";_b "sort";_g "strings";);func (_bag stops )Less (i ,j int )bool {return _bag [i ]._gcfd < _bag [j ]._gcfd };
func (_egee *Context )SetRGBA (r ,g ,b ,a float64 ){_egee ._beb =_d .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_egee .setFillAndStrokeColor (_egee ._beb );};func (_abe *Context )ClipPreserve (){_ffbd :=_f .NewAlpha (_f .Rect (0,0,_abe ._agd ,_abe ._agg ));
_gcb :=_afd .NewAlphaOverPainter (_ffbd );_abe .fill (_gcb );if _abe ._afc ==nil {_abe ._afc =_ffbd ;}else {_abbg :=_f .NewAlpha (_f .Rect (0,0,_abe ._agd ,_abe ._agg ));_af .DrawMask (_abbg ,_abbg .Bounds (),_ffbd ,_f .Point {},_abe ._afc ,_f .Point {},_af .Over );
_abe ._afc =_abbg ;};};func (_gfgb *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_ddf :=_d .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_gfgb ._de =_dcd (_ddf );};func (_gab *Context )Push (){_facf :=*_gab ;_gab ._fdc =append (_gab ._fdc ,&_facf )};
func (_cec *Context )setFillAndStrokeColor (_ebac _d .Color ){_cec ._beb =_ebac ;_cec ._ceb =_dcd (_ebac );_cec ._de =_dcd (_ebac );};func NewContextForRGBA (im *_f .RGBA )*Context {_cdf :=im .Bounds ().Size ().X ;_bddd :=im .Bounds ().Size ().Y ;return &Context {_agd :_cdf ,_agg :_bddd ,_gfe :_afd .NewRasterizer (_cdf ,_bddd ),_ebf :im ,_beb :_d .Transparent ,_ceb :_bgfcb ,_de :_ddc ,_gaf :1,_dad :_fa .FillRuleWinding ,_abce :_df .IdentityMatrix (),_aea :_fa .NewTextState ()};
};var (_bgfcb =_dcd (_d .White );_ddc =_dcd (_d .Black ););func _gba (_gafc _f .Image ,_gad repeatOp )_fa .Pattern {return &surfacePattern {_efc :_gafc ,_fdcec :_gad };};func (_dede *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_dede .NewSubPath ();_dede .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_c .Pi );
_dede .ClosePath ();};func _ceg (_edfg string )(_dacb ,_cfd ,_fega ,_fbb int ){_edfg =_g .TrimPrefix (_edfg ,"\u0023");_fbb =255;if len (_edfg )==3{_bcee :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_eb .Sscanf (_edfg ,_bcee ,&_dacb ,&_cfd ,&_fega );
_dacb |=_dacb <<4;_cfd |=_cfd <<4;_fega |=_fega <<4;};if len (_edfg )==6{_afeb :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_eb .Sscanf (_edfg ,_afeb ,&_dacb ,&_cfd ,&_fega );};if len (_edfg )==8{_ffbb :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_eb .Sscanf (_edfg ,_ffbb ,&_dacb ,&_cfd ,&_fega ,&_fbb );};return ;};func _cfbc (_fbcge float64 )_fc .Int26_6 {return _fc .Int26_6 (_fbcge *64)};func (_fec *radialGradient )ColorAt (x ,y int )_d .Color {if len (_fec ._ecc )==0{return _d .Transparent ;
};_ffcf ,_ggbd :=float64 (x )+0.5-_fec ._fegc ._gfb ,float64 (y )+0.5-_fec ._fegc ._abbf ;_fdfa :=_dceb (_ffcf ,_ggbd ,_fec ._fegc ._acd ,_fec ._fege ._gfb ,_fec ._fege ._abbf ,_fec ._fege ._acd );_fbde :=_dceb (_ffcf ,_ggbd ,-_fec ._fegc ._acd ,_ffcf ,_ggbd ,_fec ._fegc ._acd );
if _fec ._cebc ==0{if _fdfa ==0{return _d .Transparent ;};_acbcc :=0.5*_fbde /_fdfa ;if _acbcc *_fec ._fege ._acd >=_fec ._bbb {return _aeaa (_acbcc ,_fec ._ecc );};return _d .Transparent ;};_afb :=_dceb (_fdfa ,_fec ._cebc ,0,_fdfa ,-_fbde ,0);if _afb >=0{_gdg :=_c .Sqrt (_afb );
_gae :=(_fdfa +_gdg )*_fec ._bcfg ;_egcb :=(_fdfa -_gdg )*_fec ._bcfg ;if _gae *_fec ._fege ._acd >=_fec ._bbb {return _aeaa (_gae ,_fec ._ecc );}else if _egcb *_fec ._fege ._acd >=_fec ._bbb {return _aeaa (_egcb ,_fec ._ecc );};};return _d .Transparent ;
};func (_bed *Context )SetMask (mask *_f .Alpha )error {if mask .Bounds ().Size ()!=_bed ._ebf .Bounds ().Size (){return _da .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_bed ._afc =mask ;return nil ;};type stop struct{_gcfd float64 ;_fdd _d .Color ;};func (_cda *Context )DrawStringAnchored (s string ,face _cb .Face ,x ,y ,ax ,ay float64 ){_age ,_fad :=_cda .MeasureString (s ,face );_cda .drawString (s ,face ,x -ax *_age ,y +ay *_fad );
};func (_addc *Context )Fill (){_addc .FillPreserve ();_addc .ClearPath ()};func (_eda *Context )AsMask ()*_f .Alpha {_cba :=_f .NewAlpha (_eda ._ebf .Bounds ());_af .Draw (_cba ,_eda ._ebf .Bounds (),_eda ._ebf ,_f .Point {},_af .Src );return _cba ;};
func (_bfb *Context )StrokePreserve (){var _bebg _afd .Painter ;if _bfb ._afc ==nil {if _fe ,_gbd :=_bfb ._de .(*solidPattern );_gbd {_dbf :=_afd .NewRGBAPainter (_bfb ._ebf );_dbf .SetColor (_fe ._fbec );_bebg =_dbf ;};};if _bebg ==nil {_bebg =_bda (_bfb ._ebf ,_bfb ._afc ,_bfb ._de );
};_bfb .stroke (_bebg );};func NewRadialGradient (x0 ,y0 ,r0 ,x1 ,y1 ,r1 float64 )_fa .Gradient {_eceb :=circle {x0 ,y0 ,r0 };_ccea :=circle {x1 ,y1 ,r1 };_cggd :=circle {x1 -x0 ,y1 -y0 ,r1 -r0 };_dac :=_dceb (_cggd ._gfb ,_cggd ._abbf ,-_cggd ._acd ,_cggd ._gfb ,_cggd ._abbf ,_cggd ._acd );
var _caff float64 ;if _dac !=0{_caff =1.0/_dac ;};_bada :=-_eceb ._acd ;_fag :=&radialGradient {_fegc :_eceb ,_acae :_ccea ,_fege :_cggd ,_cebc :_dac ,_bcfg :_caff ,_bbb :_bada };return _fag ;};func (_ded *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_ded .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );
};func (_ffcb *Context )DrawString (s string ,face _cb .Face ,x ,y float64 ){_ffcb .DrawStringAnchored (s ,face ,x ,y ,0,0);};func _dcd (_dccf _d .Color )_fa .Pattern {return &solidPattern {_fbec :_dccf }};func (_ffa *Context )LineTo (x ,y float64 ){if !_ffa ._cfc {_ffa .MoveTo (x ,y );
}else {x ,y =_ffa .Transform (x ,y );_dgd :=_df .NewPoint (x ,y );_ead :=_ffd (_dgd );_ffa ._gfg .Add1 (_ead );_ffa ._ecb .Add1 (_ead );_ffa ._dec =_dgd ;};};func _bda (_gdec *_f .RGBA ,_cfcd *_f .Alpha ,_cad _fa .Pattern )*patternPainter {return &patternPainter {_gdec ,_cfcd ,_cad };
};type surfacePattern struct{_efc _f .Image ;_fdcec repeatOp ;};func (_abcc *Context )InvertMask (){if _abcc ._afc ==nil {_abcc ._afc =_f .NewAlpha (_abcc ._ebf .Bounds ());}else {for _egg ,_bgc :=range _abcc ._afc .Pix {_abcc ._afc .Pix [_egg ]=255-_bgc ;
};};};func (_ecbf *Context )SetColor (c _d .Color ){_ecbf .setFillAndStrokeColor (c )};func (_bgg *Context )SetDashOffset (offset float64 ){_bgg ._gg =offset };type circle struct{_gfb ,_abbf ,_acd float64 };func (_gacf *Context )DrawPoint (x ,y ,r float64 ){_gacf .Push ();
_ebfg ,_cdfd :=_gacf .Transform (x ,y );_gacf .Identity ();_gacf .DrawCircle (_ebfg ,_cdfd ,r );_gacf .Pop ();};func (_geb *Context )ClosePath (){if _geb ._cfc {_ebe :=_ffd (_geb ._agb );_geb ._gfg .Add1 (_ebe );_geb ._ecb .Add1 (_ebe );_geb ._dec =_geb ._agb ;
};};func (_ffbg *Context )Image ()_f .Image {return _ffbg ._ebf };func (_edaf *Context )Clear (){_edb :=_f .NewUniform (_edaf ._beb );_af .Draw (_edaf ._ebf ,_edaf ._ebf .Bounds (),_edb ,_f .Point {},_af .Src );};func (_dae *Context )Shear (x ,y float64 ){_dae ._abce .Shear (x ,y )};
func (_gdc *linearGradient )ColorAt (x ,y int )_d .Color {if len (_gdc ._bcb )==0{return _d .Transparent ;};_eaf ,_gee :=float64 (x ),float64 (y );_cbfa ,_ecbb ,_aef ,_ada :=_gdc ._cbd ,_gdc ._fbg ,_gdc ._dddg ,_gdc ._cge ;_bgfe ,_aefd :=_aef -_cbfa ,_ada -_ecbb ;
if _aefd ==0&&_bgfe !=0{return _aeaa ((_eaf -_cbfa )/_bgfe ,_gdc ._bcb );};if _bgfe ==0&&_aefd !=0{return _aeaa ((_gee -_ecbb )/_aefd ,_gdc ._bcb );};_ced :=_bgfe *(_eaf -_cbfa )+_aefd *(_gee -_ecbb );if _ced < 0{return _gdc ._bcb [0]._fdd ;};_beff :=_c .Hypot (_bgfe ,_aefd );
_agdb :=((_eaf -_cbfa )*-_aefd +(_gee -_ecbb )*_bgfe )/(_beff *_beff );_aaca ,_adaf :=_cbfa +_agdb *-_aefd ,_ecbb +_agdb *_bgfe ;_ffcc :=_c .Hypot (_eaf -_aaca ,_gee -_adaf )/_beff ;return _aeaa (_ffcc ,_gdc ._bcb );};func (_gbf *Context )DrawImageAnchored (im _f .Image ,x ,y int ,ax ,ay float64 ){_cbf :=im .Bounds ().Size ();
x -=int (ax *float64 (_cbf .X ));y -=int (ay *float64 (_cbf .Y ));_gfga :=_af .BiLinear ;_fae :=_gbf ._abce .Clone ().Translate (float64 (x ),float64 (y ));_cgg :=_ge .Aff3 {_fae [0],_fae [3],_fae [6],_fae [1],_fae [4],_fae [7]};if _gbf ._afc ==nil {_gfga .Transform (_gbf ._ebf ,_cgg ,im ,im .Bounds (),_af .Over ,nil );
}else {_gfga .Transform (_gbf ._ebf ,_cgg ,im ,im .Bounds (),_af .Over ,&_af .Options {DstMask :_gbf ._afc ,DstMaskP :_f .Point {}});};};func (_badb *Context )Transform (x ,y float64 )(_cdfe ,_bba float64 ){return _badb ._abce .Transform (x ,y );};func _edce (_gcbb [][]_df .Point )_afd .Path {var _gbdb _afd .Path ;
for _ ,_cdad :=range _gcbb {var _dee _fc .Point26_6 ;for _fdea ,_gbe :=range _cdad {_ede :=_ffd (_gbe );if _fdea ==0{_gbdb .Start (_ede );}else {_bdc :=_ede .X -_dee .X ;_edff :=_ede .Y -_dee .Y ;if _bdc < 0{_bdc =-_bdc ;};if _edff < 0{_edff =-_edff ;};
if _bdc +_edff > 8{_gbdb .Add1 (_ede );};};_dee =_ede ;};};return _gbdb ;};func (_abeg *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_fcf ,_gdf ,_fga ,_cfg :=x ,x +r ,x +w -r ,x +w ;_edafe ,_eade ,_gef ,_ece :=y ,y +r ,y +h -r ,y +h ;_abeg .NewSubPath ();
_abeg .MoveTo (_gdf ,_edafe );_abeg .LineTo (_fga ,_edafe );_abeg .DrawArc (_fga ,_eade ,r ,_feag (270),_feag (360));_abeg .LineTo (_cfg ,_gef );_abeg .DrawArc (_fga ,_gef ,r ,_feag (0),_feag (90));_abeg .LineTo (_gdf ,_ece );_abeg .DrawArc (_gdf ,_gef ,r ,_feag (90),_feag (180));
_abeg .LineTo (_fcf ,_eade );_abeg .DrawArc (_gdf ,_eade ,r ,_feag (180),_feag (270));_abeg .ClosePath ();};func (_gcf *Context )SetHexColor (x string ){_decf ,_add ,_ggc ,_acb :=_ceg (x );_gcf .SetRGBA255 (_decf ,_add ,_ggc ,_acb );};func _ba (_ef ,_fb ,_gc ,_aff ,_db ,_gb ,_gf float64 )(_bc ,_fca float64 ){_ce :=1-_gf ;
_fce :=_ce *_ce ;_ff :=2*_ce *_gf ;_bg :=_gf *_gf ;_bc =_fce *_ef +_ff *_gc +_bg *_db ;_fca =_fce *_fb +_ff *_aff +_bg *_gb ;return ;};func (_bdg *Context )NewSubPath (){if _bdg ._cfc {_bdg ._ecb .Add1 (_ffd (_bdg ._agb ));};_bdg ._cfc =false ;};type radialGradient struct{_fegc ,_acae ,_fege circle ;
_cebc ,_bcfg float64 ;_bbb float64 ;_ecc stops ;};func (_gd *Context )FillPattern ()_fa .Pattern {return _gd ._ceb };func (_egd *Context )Matrix ()_df .Matrix {return _egd ._abce };func _dade (_dbec _afd .Path )[][]_df .Point {var _fgab [][]_df .Point ;
var _eac []_df .Point ;var _fde ,_gafg float64 ;for _bggef :=0;_bggef < len (_dbec );{switch _dbec [_bggef ]{case 0:if len (_eac )> 0{_fgab =append (_fgab ,_eac );_eac =nil ;};_ggg :=_dead (_dbec [_bggef +1]);_fea :=_dead (_dbec [_bggef +2]);_eac =append (_eac ,_df .NewPoint (_ggg ,_fea ));
_fde ,_gafg =_ggg ,_fea ;_bggef +=4;case 1:_gcda :=_dead (_dbec [_bggef +1]);_ccf :=_dead (_dbec [_bggef +2]);_eac =append (_eac ,_df .NewPoint (_gcda ,_ccf ));_fde ,_gafg =_gcda ,_ccf ;_bggef +=4;case 2:_ggcc :=_dead (_dbec [_bggef +1]);_fbcd :=_dead (_dbec [_bggef +2]);
_egf :=_dead (_dbec [_bggef +3]);_dge :=_dead (_dbec [_bggef +4]);_gbge :=_ca (_fde ,_gafg ,_ggcc ,_fbcd ,_egf ,_dge );_eac =append (_eac ,_gbge ...);_fde ,_gafg =_egf ,_dge ;_bggef +=6;case 3:_fba :=_dead (_dbec [_bggef +1]);_gabc :=_dead (_dbec [_bggef +2]);
_fcebc :=_dead (_dbec [_bggef +3]);_gde :=_dead (_dbec [_bggef +4]);_eed :=_dead (_dbec [_bggef +5]);_fbe :=_dead (_dbec [_bggef +6]);_dddb :=_cbe (_fde ,_gafg ,_fba ,_gabc ,_fcebc ,_gde ,_eed ,_fbe );_eac =append (_eac ,_dddb ...);_fde ,_gafg =_eed ,_fbe ;
_bggef +=8;default:_ad .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_dbec );return _fgab ;};};if len (_eac )> 0{_fgab =append (_fgab ,_eac );};return _fgab ;};func (_aa *Context )SetRGB (r ,g ,b float64 ){_aa .SetRGBA (r ,g ,b ,1)};
func (_adac *solidPattern )ColorAt (x ,y int )_d .Color {return _adac ._fbec };func (_eadb *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _eaa =16;for _afea :=0;_afea < _eaa ;_afea ++{_bedf :=float64 (_afea +0)/_eaa ;_dadf :=float64 (_afea +1)/_eaa ;
_dfe :=angle1 +(angle2 -angle1 )*_bedf ;_fced :=angle1 +(angle2 -angle1 )*_dadf ;_cebf :=x +rx *_c .Cos (_dfe );_dbgf :=y +ry *_c .Sin (_dfe );_bacb :=x +rx *_c .Cos ((_dfe +_fced )/2);_daf :=y +ry *_c .Sin ((_dfe +_fced )/2);_bcfa :=x +rx *_c .Cos (_fced );
_beg :=y +ry *_c .Sin (_fced );_daa :=2*_bacb -_cebf /2-_bcfa /2;_agf :=2*_daf -_dbgf /2-_beg /2;if _afea ==0{if _eadb ._cfc {_eadb .LineTo (_cebf ,_dbgf );}else {_eadb .MoveTo (_cebf ,_dbgf );};};_eadb .QuadraticTo (_daa ,_agf ,_bcfa ,_beg );};};func (_dff *Context )SetFillRGBA (r ,g ,b ,a float64 ){_dca :=_d .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_dff ._beb =_dca ;_dff ._ceb =_dcd (_dca );};func (_cae *Context )SetMatrix (m _df .Matrix ){_cae ._abce =m };func _edbfg (_bab ,_gec uint32 ,_cdg float64 )uint8 {return uint8 (int32 (float64 (_bab )*(1.0-_cdg )+float64 (_gec )*_cdg )>>8);};func (_daaa *Context )MeasureString (s string ,face _cb .Face )(_eea ,_eaae float64 ){_cdfdc :=&_cb .Drawer {Face :face };
_fbd :=_cdfdc .MeasureString (s );return float64 (_fbd >>6),_daaa ._aea .Tf .Size ;};func (_cebg *Context )Pop (){_fee :=*_cebg ;_abfa :=_cebg ._fdc ;_dfb :=_abfa [len (_abfa )-1];*_cebg =*_dfb ;_cebg ._gfg =_fee ._gfg ;_cebg ._ecb =_fee ._ecb ;_cebg ._agb =_fee ._agb ;
_cebg ._dec =_fee ._dec ;_cebg ._cfc =_fee ._cfc ;};func (_fgeg *Context )SetPixel (x ,y int ){_fgeg ._ebf .Set (x ,y ,_fgeg ._beb )};func (_gea *Context )SetRGBA255 (r ,g ,b ,a int ){_gea ._beb =_d .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};
_gea .setFillAndStrokeColor (_gea ._beb );};func (_fcee *Context )StrokePattern ()_fa .Pattern {return _fcee ._de };func (_cc *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_cc ._cfc {_cc .MoveTo (x1 ,y1 );};x1 ,y1 =_cc .Transform (x1 ,y1 );x2 ,y2 =_cc .Transform (x2 ,y2 );
_cga :=_df .NewPoint (x1 ,y1 );_abb :=_df .NewPoint (x2 ,y2 );_aad :=_ffd (_cga );_bfee :=_ffd (_abb );_cc ._gfg .Add2 (_aad ,_bfee );_cc ._ecb .Add2 (_aad ,_bfee );_cc ._dec =_abb ;};func (_efe *Context )Width ()int {return _efe ._agd };func (_cgag *Context )RotateAbout (angle ,x ,y float64 ){_cgag .Translate (x ,y );
_cgag .Rotate (angle );_cgag .Translate (-x ,-y );};func (_bfa *Context )SetStrokeStyle (pattern _fa .Pattern ){_bfa ._de =pattern };func (_fdce *Context )Rotate (angle float64 ){_fdce ._abce =_fdce ._abce .Rotate (angle )};func (_gcg *Context )Stroke (){_gcg .StrokePreserve ();
_gcg .ClearPath ()};func (_afcd *Context )SetDash (dashes ...float64 ){_afcd ._abc =dashes };func (_dcg *Context )Scale (x ,y float64 ){_dcg ._abce =_dcg ._abce .Scale (x ,y )};func (_gbg *Context )SetFillStyle (pattern _fa .Pattern ){if _dcf ,_gga :=pattern .(*solidPattern );
_gga {_gbg ._beb =_dcf ._fbec ;};_gbg ._ceb =pattern ;};func (_dga *Context )capper ()_afd .Capper {switch _dga ._fabd {case _fa .LineCapButt :return _afd .ButtCapper ;case _fa .LineCapRound :return _afd .RoundCapper ;case _fa .LineCapSquare :return _afd .SquareCapper ;
};return nil ;};type repeatOp int ;func (_bcf *Context )SetLineJoin (lineJoin _fa .LineJoin ){_bcf ._ffb =lineJoin };func NewLinearGradient (x0 ,y0 ,x1 ,y1 float64 )_fa .Gradient {_cee :=&linearGradient {_cbd :x0 ,_fbg :y0 ,_dddg :x1 ,_cge :y1 };return _cee ;
};func (_fgd *Context )ResetClip (){_fgd ._afc =nil };func (_dgae *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_dgae .MoveTo (x1 ,y1 );_dgae .LineTo (x2 ,y2 )};type patternPainter struct{_cdc *_f .RGBA ;_eagc *_f .Alpha ;_gfda _fa .Pattern ;};func (_aca *Context )LineWidth ()float64 {return _aca ._gaf };
func (_ged *Context )ShearAbout (sx ,sy ,x ,y float64 ){_ged .Translate (x ,y );_ged .Shear (sx ,sy );_ged .Translate (-x ,-y );};type Context struct{_agd int ;_agg int ;_gfe *_afd .Rasterizer ;_ebf *_f .RGBA ;_afc *_f .Alpha ;_beb _d .Color ;_ceb _fa .Pattern ;
_de _fa .Pattern ;_gfg _afd .Path ;_ecb _afd .Path ;_agb _df .Point ;_dec _df .Point ;_cfc bool ;_abc []float64 ;_gg float64 ;_gaf float64 ;_fabd _fa .LineCap ;_ffb _fa .LineJoin ;_dad _fa .FillRule ;_abce _df .Matrix ;_aea _fa .TextState ;_fdc []*Context ;
};func (_bde *Context )SetRGB255 (r ,g ,b int ){_bde .SetRGBA255 (r ,g ,b ,255)};type solidPattern struct{_fbec _d .Color };func (_adb *surfacePattern )ColorAt (x ,y int )_d .Color {_adad :=_adb ._efc .Bounds ();switch _adb ._fdcec {case _bge :if y >=_adad .Dy (){return _d .Transparent ;
};case _fegb :if x >=_adad .Dx (){return _d .Transparent ;};case _dabe :if x >=_adad .Dx ()||y >=_adad .Dy (){return _d .Transparent ;};};x =x %_adad .Dx ()+_adad .Min .X ;y =y %_adad .Dy ()+_adad .Min .Y ;return _adb ._efc .At (x ,y );};func _ca (_ga ,_afa ,_dg ,_bgf ,_fbc ,_cf float64 )[]_df .Point {_bgfc :=(_c .Hypot (_dg -_ga ,_bgf -_afa )+_c .Hypot (_fbc -_dg ,_cf -_bgf ));
_cg :=int (_bgfc +0.5);if _cg < 4{_cg =4;};_eg :=float64 (_cg )-1;_ebd :=make ([]_df .Point ,_cg );for _ac :=0;_ac < _cg ;_ac ++{_fceb :=float64 (_ac )/_eg ;_bb ,_cac :=_ba (_ga ,_afa ,_dg ,_bgf ,_fbc ,_cf ,_fceb );_ebd [_ac ]=_df .NewPoint (_bb ,_cac );
};return _ebd ;};func _affg (_edcd [][]_df .Point ,_eafg []float64 ,_eafa float64 )[][]_df .Point {var _bcg [][]_df .Point ;if len (_eafg )==0{return _edcd ;};if len (_eafg )==1{_eafg =append (_eafg ,_eafg [0]);};for _ ,_ecag :=range _edcd {if len (_ecag )< 2{continue ;
};_dag :=_ecag [0];_gagf :=1;_cgae :=0;_aefc :=0.0;if _eafa !=0{var _aee float64 ;for _ ,_fccd :=range _eafg {_aee +=_fccd ;};_eafa =_c .Mod (_eafa ,_aee );if _eafa < 0{_eafa +=_aee ;};for _cdef ,_agbd :=range _eafg {_eafa -=_agbd ;if _eafa < 0{_cgae =_cdef ;
_aefc =_agbd +_eafa ;break ;};};};var _dbba []_df .Point ;_dbba =append (_dbba ,_dag );for _gagf < len (_ecag ){_fgae :=_eafg [_cgae ];_abcb :=_ecag [_gagf ];_bfag :=_dag .Distance (_abcb );_dcb :=_fgae -_aefc ;if _bfag > _dcb {_bce :=_dcb /_bfag ;_caa :=_dag .Interpolate (_abcb ,_bce );
_dbba =append (_dbba ,_caa );if _cgae %2==0&&len (_dbba )> 1{_bcg =append (_bcg ,_dbba );};_dbba =nil ;_dbba =append (_dbba ,_caa );_aefc =0;_dag =_caa ;_cgae =(_cgae +1)%len (_eafg );}else {_dbba =append (_dbba ,_abcb );_dag =_abcb ;_aefc +=_bfag ;_gagf ++;
};};if _cgae %2==0&&len (_dbba )> 1{_bcg =append (_bcg ,_dbba );};};return _bcg ;};func (_fac *Context )FillPreserve (){var _bbc _afd .Painter ;if _fac ._afc ==nil {if _edc ,_gda :=_fac ._ceb .(*solidPattern );_gda {_fgec :=_afd .NewRGBAPainter (_fac ._ebf );
_fgec .SetColor (_edc ._fbec );_bbc =_fgec ;};};if _bbc ==nil {_bbc =_bda (_fac ._ebf ,_fac ._afc ,_fac ._ceb );};_fac .fill (_bbc );};func (_efeb *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_efeb .Translate (x ,y );_efeb .Scale (sx ,sy );_efeb .Translate (-x ,-y );
};func (_afg *Context )SetFillRule (fillRule _fa .FillRule ){_afg ._dad =fillRule };func _dead (_aeee _fc .Int26_6 )float64 {const _geae ,_fbdf =6,1<<6-1;if _aeee >=0{return float64 (_aeee >>_geae )+float64 (_aeee &_fbdf )/64;};_aeee =-_aeee ;if _aeee >=0{return -(float64 (_aeee >>_geae )+float64 (_aeee &_fbdf )/64);
};return 0;};func (_aae *Context )fill (_bbg _afd .Painter ){_aac :=_aae ._ecb ;if _aae ._cfc {_aac =make (_afd .Path ,len (_aae ._ecb ));copy (_aac ,_aae ._ecb );_aac .Add1 (_ffd (_aae ._agb ));};_ggb :=_aae ._gfe ;_ggb .UseNonZeroWinding =_aae ._dad ==_fa .FillRuleWinding ;
_ggb .Clear ();_ggb .AddPath (_aac );_ggb .Rasterize (_bbg );};func (_gac *Context )Clip (){_gac .ClipPreserve ();_gac .ClearPath ()};func _aeaa (_gcce float64 ,_aaa stops )_d .Color {if _gcce <=0.0||len (_aaa )==1{return _aaa [0]._fdd ;};_gfeg :=_aaa [len (_aaa )-1];
if _gcce >=_gfeg ._gcfd {return _gfeg ._fdd ;};for _bbce ,_gebd :=range _aaa [1:]{if _gcce < _gebd ._gcfd {_gcce =(_gcce -_aaa [_bbce ]._gcfd )/(_gebd ._gcfd -_aaa [_bbce ]._gcfd );return _efbg (_aaa [_bbce ]._fdd ,_gebd ._fdd ,_gcce );};};return _gfeg ._fdd ;
};func _ffd (_fgegb _df .Point )_fc .Point26_6 {return _fc .Point26_6 {X :_cfbc (_fgegb .X ),Y :_cfbc (_fgegb .Y )};};func _efbg (_acg ,_cbec _d .Color ,_feeb float64 )_d .Color {_ffcba ,_agdd ,_ccc ,_aadd :=_acg .RGBA ();_cddb ,_gaca ,_gcd ,_ebda :=_cbec .RGBA ();
return _d .RGBA {_edbfg (_ffcba ,_cddb ,_feeb ),_edbfg (_agdd ,_gaca ,_feeb ),_edbfg (_ccc ,_gcd ,_feeb ),_edbfg (_aadd ,_ebda ,_feeb )};};func _fcag (_cdda _afd .Path ,_bdee []float64 ,_fef float64 )_afd .Path {return _edce (_affg (_dade (_cdda ),_bdee ,_fef ));
};func (_bgb *Context )TextState ()*_fa .TextState {return &_bgb ._aea };func (_eag stops )Len ()int {return len (_eag )};func (_aeaf *Context )ClearPath (){_aeaf ._gfg .Clear ();_aeaf ._ecb .Clear ();_aeaf ._cfc =false };func (_cde *Context )SetLineCap (lineCap _fa .LineCap ){_cde ._fabd =lineCap };
func _cbe (_be ,_caf ,_ecf ,_bf ,_eba ,_dfc ,_ffc ,_dc float64 )[]_df .Point {_bac :=(_c .Hypot (_ecf -_be ,_bf -_caf )+_c .Hypot (_eba -_ecf ,_dfc -_bf )+_c .Hypot (_ffc -_eba ,_dc -_dfc ));_egb :=int (_bac +0.5);if _egb < 4{_egb =4;};_dbb :=float64 (_egb )-1;
_ab :=make ([]_df .Point ,_egb );for _fd :=0;_fd < _egb ;_fd ++{_ag :=float64 (_fd )/_dbb ;_bfe ,_ae :=_dd (_be ,_caf ,_ecf ,_bf ,_eba ,_dfc ,_ffc ,_dc ,_ag );_ab [_fd ]=_df .NewPoint (_bfe ,_ae );};return _ab ;};func (_eee *Context )SetLineWidth (lineWidth float64 ){_eee ._gaf =lineWidth };
func (_ebec stops )Swap (i ,j int ){_ebec [i ],_ebec [j ]=_ebec [j ],_ebec [i ]};func _dceb (_fffb ,_acbc ,_dcc ,_aadg ,_gfdg ,_cdag float64 )float64 {return _fffb *_aadg +_acbc *_gfdg +_dcc *_cdag ;};func (_ccfe *patternPainter )Paint (ss []_afd .Span ,done bool ){_cfa :=_ccfe ._cdc .Bounds ();
for _ ,_fegd :=range ss {if _fegd .Y < _cfa .Min .Y {continue ;};if _fegd .Y >=_cfa .Max .Y {return ;};if _fegd .X0 < _cfa .Min .X {_fegd .X0 =_cfa .Min .X ;};if _fegd .X1 > _cfa .Max .X {_fegd .X1 =_cfa .Max .X ;};if _fegd .X0 >=_fegd .X1 {continue ;};
const _bgbe =1<<16-1;_abbd :=_fegd .Y -_ccfe ._cdc .Rect .Min .Y ;_decb :=_fegd .X0 -_ccfe ._cdc .Rect .Min .X ;_abdd :=(_fegd .Y -_ccfe ._cdc .Rect .Min .Y )*_ccfe ._cdc .Stride +(_fegd .X0 -_ccfe ._cdc .Rect .Min .X )*4;_gdb :=_abdd +(_fegd .X1 -_fegd .X0 )*4;
for _dfcf ,_dcfb :=_abdd ,_decb ;_dfcf < _gdb ;_dfcf ,_dcfb =_dfcf +4,_dcfb +1{_abg :=_fegd .Alpha ;if _ccfe ._eagc !=nil {_abg =_abg *uint32 (_ccfe ._eagc .AlphaAt (_dcfb ,_abbd ).A )/255;if _abg ==0{continue ;};};_dedf :=_ccfe ._gfda .ColorAt (_dcfb ,_abbd );
_eadef ,_bcd ,_dcdg ,_afbb :=_dedf .RGBA ();_eff :=uint32 (_ccfe ._cdc .Pix [_dfcf +0]);_gcdab :=uint32 (_ccfe ._cdc .Pix [_dfcf +1]);_fbad :=uint32 (_ccfe ._cdc .Pix [_dfcf +2]);_cbecb :=uint32 (_ccfe ._cdc .Pix [_dfcf +3]);_dgb :=(_bgbe -(_afbb *_abg /_bgbe ))*0x101;
_ccfe ._cdc .Pix [_dfcf +0]=uint8 ((_eff *_dgb +_eadef *_abg )/_bgbe >>8);_ccfe ._cdc .Pix [_dfcf +1]=uint8 ((_gcdab *_dgb +_bcd *_abg )/_bgbe >>8);_ccfe ._cdc .Pix [_dfcf +2]=uint8 ((_fbad *_dgb +_dcdg *_abg )/_bgbe >>8);_ccfe ._cdc .Pix [_dfcf +3]=uint8 ((_cbecb *_dgb +_afbb *_abg )/_bgbe >>8);
};};};func _dd (_egc ,_ee ,_gag ,_ec ,_bgd ,_afda ,_bd ,_eec ,_fcc float64 )(_fab ,_dbg float64 ){_ege :=1-_fcc ;_bdd :=_ege *_ege *_ege ;_afe :=3*_ege *_ege *_fcc ;_efb :=3*_ege *_fcc *_fcc ;_cd :=_fcc *_fcc *_fcc ;_fab =_bdd *_egc +_afe *_gag +_efb *_bgd +_cd *_bd ;
_dbg =_bdd *_ee +_afe *_ec +_efb *_afda +_cd *_eec ;return ;};func (_eca *Context )Height ()int {return _eca ._agg };type linearGradient struct{_cbd ,_fbg ,_dddg ,_cge float64 ;_bcb stops ;};func (_fdfb *radialGradient )AddColorStop (offset float64 ,color _d .Color ){_fdfb ._ecc =append (_fdfb ._ecc ,stop {_gcfd :offset ,_fdd :color });
_b .Sort (_fdfb ._ecc );};const (_fdb repeatOp =iota ;_bge ;_fegb ;_dabe ;);func (_fcac *Context )DrawImage (im _f .Image ,x ,y int ){_fcac .DrawImageAnchored (im ,x ,y ,0,0)};func _agbg (_fcb _f .Image )*_f .RGBA {_bdcc :=_fcb .Bounds ();_cfe :=_f .NewRGBA (_bdcc );
_a .Draw (_cfe ,_bdcc ,_fcb ,_bdcc .Min ,_a .Src );return _cfe ;};func NewContext (width ,height int )*Context {return NewContextForRGBA (_f .NewRGBA (_f .Rect (0,0,width ,height )));};func (_ffg *Context )MoveTo (x ,y float64 ){if _ffg ._cfc {_ffg ._ecb .Add1 (_ffd (_ffg ._agb ));
};x ,y =_ffg .Transform (x ,y );_ea :=_df .NewPoint (x ,y );_agc :=_ffd (_ea );_ffg ._gfg .Start (_agc );_ffg ._ecb .Start (_agc );_ffg ._agb =_ea ;_ffg ._dec =_ea ;_ffg ._cfc =true ;};func _feag (_dgg float64 )float64 {return _dgg *_c .Pi /180};func (_dgaf *Context )Identity (){_dgaf ._abce =_df .IdentityMatrix ()};
func (_efbc *Context )drawRegularPolygon (_edf int ,_cafd ,_fbcg ,_eecc ,_gfd float64 ){_fdf :=2*_c .Pi /float64 (_edf );_gfd -=_c .Pi /2;if _edf %2==0{_gfd +=_fdf /2;};_efbc .NewSubPath ();for _edbf :=0;_edbf < _edf ;_edbf ++{_dcaf :=_gfd +_fdf *float64 (_edbf );
_efbc .LineTo (_cafd +_eecc *_c .Cos (_dcaf ),_fbcg +_eecc *_c .Sin (_dcaf ));};_efbc .ClosePath ();};func (_ebaa *Context )DrawRectangle (x ,y ,w ,h float64 ){_ebaa .NewSubPath ();_ebaa .MoveTo (x ,y );_ebaa .LineTo (x +w ,y );_ebaa .LineTo (x +w ,y +h );
_ebaa .LineTo (x ,y +h );_ebaa .ClosePath ();};func (_fge *Context )stroke (_ddfc _afd .Painter ){_ed :=_fge ._gfg ;if len (_fge ._abc )> 0{_ed =_fcag (_ed ,_fge ._abc ,_fge ._gg );}else {_ed =_edce (_dade (_ed ));};_dea :=_fge ._gfe ;_dea .UseNonZeroWinding =true ;
_dea .Clear ();_abd :=(_fge ._abce .ScalingFactorX ()+_fge ._abce .ScalingFactorY ())/2;_dea .AddStroke (_ed ,_cfbc (_fge ._gaf *_abd ),_fge .capper (),_fge .joiner ());_dea .Rasterize (_ddfc );};func (_dab *Context )DrawCircle (x ,y ,r float64 ){_dab .NewSubPath ();
_dab .DrawEllipticalArc (x ,y ,r ,r ,0,2*_c .Pi );_dab .ClosePath ();};func (_bad *Context )Translate (x ,y float64 ){_bad ._abce =_bad ._abce .Translate (x ,y )};func (_fff *linearGradient )AddColorStop (offset float64 ,color _d .Color ){_fff ._bcb =append (_fff ._bcb ,stop {_gcfd :offset ,_fdd :color });
_b .Sort (_fff ._bcb );};type stops []stop ;func (_gcc *Context )joiner ()_afd .Joiner {switch _gcc ._ffb {case _fa .LineJoinBevel :return _afd .BevelJoiner ;case _fa .LineJoinRound :return _afd .RoundJoiner ;};return nil ;};func NewContextForImage (im _f .Image )*Context {return NewContextForRGBA (_agbg (im ))};
func (_cce *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_cce ._cfc {_cce .MoveTo (x1 ,y1 );};_dbe ,_cfb :=_cce ._dec .X ,_cce ._dec .Y ;x1 ,y1 =_cce .Transform (x1 ,y1 );x2 ,y2 =_cce .Transform (x2 ,y2 );x3 ,y3 =_cce .Transform (x3 ,y3 );_affa :=_cbe (_dbe ,_cfb ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );
_fg :=_ffd (_cce ._dec );for _ ,_bgge :=range _affa [1:]{_ebfc :=_ffd (_bgge );if _ebfc ==_fg {continue ;};_fg =_ebfc ;_cce ._gfg .Add1 (_ebfc );_cce ._ecb .Add1 (_ebfc );_cce ._dec =_bgge ;};};func (_feg *Context )drawString (_dedd string ,_cbaf _cb .Face ,_cbab ,_acbd float64 ){_ffbe :=&_cb .Drawer {Src :_f .NewUniform (_feg ._beb ),Face :_cbaf ,Dot :_ffd (_df .NewPoint (_cbab ,_acbd ))};
_ega :=rune (-1);for _ ,_abf :=range _dedd {if _ega >=0{_ffbe .Dot .X +=_ffbe .Face .Kern (_ega ,_abf );};_cace ,_bef ,_fgb ,_abfe ,_ecfe :=_ffbe .Face .Glyph (_ffbe .Dot ,_abf );if !_ecfe {continue ;};_cdd :=_cace .Sub (_cace .Min );_dce :=_f .NewRGBA (_cdd );
_af .DrawMask (_dce ,_cdd ,_ffbe .Src ,_f .Point {},_bef ,_fgb ,_af .Over );var _efa *_af .Options ;if _feg ._afc !=nil {_efa =&_af .Options {DstMask :_feg ._afc ,DstMaskP :_f .Point {}};};_fdg :=_feg ._abce .Clone ().Translate (float64 (_cace .Min .X ),float64 (_cace .Min .Y ));
_ecfd :=_ge .Aff3 {_fdg [0],_fdg [3],_fdg [6],_fdg [1],_fdg [4],_fdg [7]};_af .BiLinear .Transform (_feg ._ebf ,_ecfd ,_dce ,_cdd ,_af .Over ,_efa );_ffbe .Dot .X +=_abfe ;_ega =_abf ;};};