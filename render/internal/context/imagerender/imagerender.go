//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_cd "errors";_ed "fmt";_fa "github.com/unidoc/freetype/raster";_f "github.com/unidoc/unipdf/v3/common";_ae "github.com/unidoc/unipdf/v3/internal/transform";_d "github.com/unidoc/unipdf/v3/render/internal/context";_fb "golang.org/x/image/draw";
_gc "golang.org/x/image/font";_g "golang.org/x/image/math/f64";_gb "golang.org/x/image/math/fixed";_ea "image";_eg "image/color";_ag "image/draw";_ee "math";_a "sort";_c "strings";);func _fd (_b ,_ff ,_ffg ,_bf ,_da ,_cb ,_ga float64 )(_dc ,_ega float64 ){_af :=1-_ga ;
_cbb :=_af *_af ;_gf :=2*_af *_ga ;_ab :=_ga *_ga ;_dc =_cbb *_b +_gf *_ffg +_ab *_da ;_ega =_cbb *_ff +_gf *_bf +_ab *_cb ;return ;};func (_cag *Context )MoveTo (x ,y float64 ){if _cag ._aab {_cag ._aad .Add1 (_dff (_cag ._ddb ));};x ,y =_cag .Transform (x ,y );
_fefb :=_ae .NewPoint (x ,y );_bcf :=_dff (_fefb );_cag ._fba .Start (_bcf );_cag ._aad .Start (_bcf );_cag ._ddb =_fefb ;_cag ._be =_fefb ;_cag ._aab =true ;};func NewContextForImage (im _ea .Image )*Context {return NewContextForRGBA (_eed (im ))};func (_aff *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_aff .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );
};func (_bgd *Context )SetDash (dashes ...float64 ){_bgd ._abc =dashes };func (_cddb stops )Len ()int {return len (_cddb )};func NewContext (width ,height int )*Context {return NewContextForRGBA (_ea .NewRGBA (_ea .Rect (0,0,width ,height )));};func _gd (_gae ,_egad ,_gcc ,_gcf ,_eab ,_edg ,_gdc ,_bdbd ,_dd float64 )(_bb ,_ead float64 ){_fdd :=1-_dd ;
_ba :=_fdd *_fdd *_fdd ;_baa :=3*_fdd *_fdd *_dd ;_gbb :=3*_fdd *_dd *_dd ;_fgc :=_dd *_dd *_dd ;_bb =_ba *_gae +_baa *_gcc +_gbb *_eab +_fgc *_gdc ;_ead =_ba *_egad +_baa *_gcf +_gbb *_edg +_fgc *_bdbd ;return ;};func (_bgc *Context )SetMask (mask *_ea .Alpha )error {if mask .Bounds ().Size ()!=_bgc ._egbb .Bounds ().Size (){return _cd .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_bgc ._fe =mask ;return nil ;};func (_beg *linearGradient )ColorAt (x ,y int )_eg .Color {if len (_beg ._dfd )==0{return _eg .Transparent ;};_aefga ,_bcce :=float64 (x ),float64 (y );_fcd ,_fcgd ,_bef ,_agafe :=_beg ._bbf ,_beg ._cga ,_beg ._ede ,_beg ._bdf ;
_badc ,_aafa :=_bef -_fcd ,_agafe -_fcgd ;if _aafa ==0&&_badc !=0{return _gff ((_aefga -_fcd )/_badc ,_beg ._dfd );};if _badc ==0&&_aafa !=0{return _gff ((_bcce -_fcgd )/_aafa ,_beg ._dfd );};_fgcb :=_badc *(_aefga -_fcd )+_aafa *(_bcce -_fcgd );if _fgcb < 0{return _beg ._dfd [0]._fdaa ;
};_fbcb :=_ee .Hypot (_badc ,_aafa );_fbab :=((_aefga -_fcd )*-_aafa +(_bcce -_fcgd )*_badc )/(_fbcb *_fbcb );_bdc ,_fde :=_fcd +_fbab *-_aafa ,_fcgd +_fbab *_badc ;_ddg :=_ee .Hypot (_aefga -_bdc ,_bcce -_fde )/_fbcb ;return _gff (_ddg ,_beg ._dfd );};
func (_fff *Context )fill (_fad _fa .Painter ){_cece :=_fff ._aad ;if _fff ._aab {_cece =make (_fa .Path ,len (_fff ._aad ));copy (_cece ,_fff ._aad );_cece .Add1 (_dff (_fff ._ddb ));};_aec :=_fff ._egaa ;_aec .UseNonZeroWinding =_fff ._aefg ==_d .FillRuleWinding ;
_aec .Clear ();_aec .AddPath (_cece );_aec .Rasterize (_fad );};func (_ggf *Context )Identity (){_ggf ._ffa =_ae .IdentityMatrix ()};type stop struct{_adg float64 ;_fdaa _eg .Color ;};type stops []stop ;func (_eeed *Context )Scale (x ,y float64 ){_eeed ._ffa =_eeed ._ffa .Scale (x ,y )};
func (_fbd *Context )Height ()int {return _fbd ._dge };func (_fgg *Context )SetLineCap (lineCap _d .LineCap ){_fgg ._bgf =lineCap };func (_ecd *Context )SetStrokeStyle (pattern _d .Pattern ){_ecd ._aef =pattern };func (_dbc *Context )ClipPreserve (){_ad :=_ea .NewAlpha (_ea .Rect (0,0,_dbc ._ace ,_dbc ._dge ));
_gge :=_fa .NewAlphaOverPainter (_ad );_dbc .fill (_gge );if _dbc ._fe ==nil {_dbc ._fe =_ad ;}else {_bcc :=_ea .NewAlpha (_ea .Rect (0,0,_dbc ._ace ,_dbc ._dge ));_fb .DrawMask (_bcc ,_bcc .Bounds (),_ad ,_ea .Point {},_dbc ._fe ,_ea .Point {},_fb .Over );
_dbc ._fe =_bcc ;};};func (_gcac *Context )LineTo (x ,y float64 ){if !_gcac ._aab {_gcac .MoveTo (x ,y );}else {x ,y =_gcac .Transform (x ,y );_bfe :=_ae .NewPoint (x ,y );_cge :=_dff (_bfe );_gcac ._fba .Add1 (_cge );_gcac ._aad .Add1 (_cge );_gcac ._be =_bfe ;
};};func (_dcg *Context )DrawCircle (x ,y ,r float64 ){_dcg .NewSubPath ();_dcg .DrawEllipticalArc (x ,y ,r ,r ,0,2*_ee .Pi );_dcg .ClosePath ();};func (_fgd *Context )AsMask ()*_ea .Alpha {_bba :=_ea .NewAlpha (_fgd ._egbb .Bounds ());_fb .Draw (_bba ,_fgd ._egbb .Bounds (),_fgd ._egbb ,_ea .Point {},_fb .Src );
return _bba ;};func (_fedc *Context )Translate (x ,y float64 ){_fedc ._ffa =_fedc ._ffa .Translate (x ,y )};func (_eecc *Context )drawString (_eeg string ,_ecf _gc .Face ,_fefd ,_bcef float64 ){_bed :=&_gc .Drawer {Src :_ea .NewUniform (_eecc ._agfc ),Face :_ecf ,Dot :_dff (_ae .NewPoint (_fefd ,_bcef ))};
_gag :=rune (-1);for _ ,_efe :=range _eeg {if _gag >=0{_bed .Dot .X +=_bed .Face .Kern (_gag ,_efe );};_afc ,_ada ,_gaca ,_bda ,_cfa :=_bed .Face .Glyph (_bed .Dot ,_efe );if !_cfa {continue ;};_agc :=_afc .Sub (_afc .Min );_gef :=_ea .NewRGBA (_agc );
_fb .DrawMask (_gef ,_agc ,_bed .Src ,_ea .Point {},_ada ,_gaca ,_fb .Over );var _cgef *_fb .Options ;if _eecc ._fe !=nil {_cgef =&_fb .Options {DstMask :_eecc ._fe ,DstMaskP :_ea .Point {}};};_gdca :=_eecc ._ffa .Clone ().Translate (float64 (_afc .Min .X ),float64 (_afc .Min .Y ));
_adc :=_g .Aff3 {_gdca [0],_gdca [3],_gdca [6],_gdca [1],_gdca [4],_gdca [7]};_fb .BiLinear .Transform (_eecc ._egbb ,_adc ,_gef ,_agc ,_fb .Over ,_cgef );_bed .Dot .X +=_bda ;_gag =_efe ;};};func (_eff *radialGradient )AddColorStop (offset float64 ,color _eg .Color ){_eff ._ecfa =append (_eff ._ecfa ,stop {_adg :offset ,_fdaa :color });
_a .Sort (_eff ._ecfa );};func (_gac *Context )drawRegularPolygon (_defg int ,_ecee ,_bcfd ,_cddg ,_edgg float64 ){_dbcb :=2*_ee .Pi /float64 (_defg );_edgg -=_ee .Pi /2;if _defg %2==0{_edgg +=_dbcb /2;};_gac .NewSubPath ();for _ccf :=0;_ccf < _defg ;_ccf ++{_fae :=_edgg +_dbcb *float64 (_ccf );
_gac .LineTo (_ecee +_cddg *_ee .Cos (_fae ),_bcfd +_cddg *_ee .Sin (_fae ));};_gac .ClosePath ();};func (_geg *Context )DrawStringAnchored (s string ,face _gc .Face ,x ,y ,ax ,ay float64 ){_fgdb ,_bad :=_geg .MeasureString (s ,face );_geg .drawString (s ,face ,x -ax *_fgdb ,y +ay *_bad );
};func (_edc *Context )stroke (_fec _fa .Painter ){_agff :=_edc ._fba ;if len (_edc ._abc )> 0{_agff =_gdfe (_agff ,_edc ._abc ,_edc ._deb );}else {_agff =_fcf (_dad (_agff ));};_fcb :=_edc ._egaa ;_fcb .UseNonZeroWinding =true ;_fcb .Clear ();_bbb :=(_edc ._ffa .ScalingFactorX ()+_edc ._ffa .ScalingFactorY ())/2;
_fcb .AddStroke (_agff ,_dagb (_edc ._edge *_bbb ),_edc .capper (),_edc .joiner ());_fcb .Rasterize (_fec );};func (_abbf *Context )Shear (x ,y float64 ){_abbf ._ffa .Shear (x ,y )};func (_eag *radialGradient )ColorAt (x ,y int )_eg .Color {if len (_eag ._ecfa )==0{return _eg .Transparent ;
};_fce ,_ccbd :=float64 (x )+0.5-_eag ._bgde ._gcg ,float64 (y )+0.5-_eag ._bgde ._cbe ;_dgf :=_fefbe (_fce ,_ccbd ,_eag ._bgde ._baba ,_eag ._fdec ._gcg ,_eag ._fdec ._cbe ,_eag ._fdec ._baba );_bbfg :=_fefbe (_fce ,_ccbd ,-_eag ._bgde ._baba ,_fce ,_ccbd ,_eag ._bgde ._baba );
if _eag ._egd ==0{if _dgf ==0{return _eg .Transparent ;};_dfdf :=0.5*_bbfg /_dgf ;if _dfdf *_eag ._fdec ._baba >=_eag ._ccee {return _gff (_dfdf ,_eag ._ecfa );};return _eg .Transparent ;};_edaf :=_fefbe (_dgf ,_eag ._egd ,0,_dgf ,-_bbfg ,0);if _edaf >=0{_aafg :=_ee .Sqrt (_edaf );
_gga :=(_dgf +_aafg )*_eag ._beag ;_dabb :=(_dgf -_aafg )*_eag ._beag ;if _gga *_eag ._fdec ._baba >=_eag ._ccee {return _gff (_gga ,_eag ._ecfa );}else if _dabb *_eag ._fdec ._baba >=_eag ._ccee {return _gff (_dabb ,_eag ._ecfa );};};return _eg .Transparent ;
};func _agde (_ecdg ,_dgcd uint32 ,_cfaf float64 )uint8 {return uint8 (int32 (float64 (_ecdg )*(1.0-_cfaf )+float64 (_dgcd )*_cfaf )>>8);};func (_fac *Context )Matrix ()_ae .Matrix {return _fac ._ffa };func (_dcb *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_dcb ._aab {_dcb .MoveTo (x1 ,y1 );
};_ecb ,_fbc :=_dcb ._be .X ,_dcb ._be .Y ;x1 ,y1 =_dcb .Transform (x1 ,y1 );x2 ,y2 =_dcb .Transform (x2 ,y2 );x3 ,y3 =_dcb .Transform (x3 ,y3 );_cec :=_baac (_ecb ,_fbc ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_egbe :=_dff (_dcb ._be );for _ ,_aged :=range _cec [1:]{_eef :=_dff (_aged );
if _eef ==_egbe {continue ;};_egbe =_eef ;_dcb ._fba .Add1 (_eef );_dcb ._aad .Add1 (_eef );_dcb ._be =_aged ;};};func (_fcg *Context )Transform (x ,y float64 )(_eeb ,_bagg float64 ){return _fcg ._ffa .Transform (x ,y )};func (_cf *Context )capper ()_fa .Capper {switch _cf ._bgf {case _d .LineCapButt :return _fa .ButtCapper ;
case _d .LineCapRound :return _fa .RoundCapper ;case _d .LineCapSquare :return _fa .SquareCapper ;};return nil ;};func _fcf (_bbbf [][]_ae .Point )_fa .Path {var _fggf _fa .Path ;for _ ,_fced :=range _bbbf {var _fbec _gb .Point26_6 ;for _fdb ,_beb :=range _fced {_afdc :=_dff (_beb );
if _fdb ==0{_fggf .Start (_afdc );}else {_ffaa :=_afdc .X -_fbec .X ;_cbga :=_afdc .Y -_fbec .Y ;if _ffaa < 0{_ffaa =-_ffaa ;};if _cbga < 0{_cbga =-_cbga ;};if _ffaa +_cbga > 8{_fggf .Add1 (_afdc );};};_fbec =_afdc ;};};return _fggf ;};func (_ggff *linearGradient )AddColorStop (offset float64 ,color _eg .Color ){_ggff ._dfd =append (_ggff ._dfd ,stop {_adg :offset ,_fdaa :color });
_a .Sort (_ggff ._dfd );};func (_cdab *Context )SetRGB (r ,g ,b float64 ){_cdab .SetRGBA (r ,g ,b ,1)};func (_dfe *Context )FillPattern ()_d .Pattern {return _dfe ._abg };func (_daf *Context )joiner ()_fa .Joiner {switch _daf ._gde {case _d .LineJoinBevel :return _fa .BevelJoiner ;
case _d .LineJoinRound :return _fa .RoundJoiner ;};return nil ;};func (_cdd *Context )SetFillStyle (pattern _d .Pattern ){if _dbe ,_faf :=pattern .(*solidPattern );_faf {_cdd ._agfc =_dbe ._dgb ;};_cdd ._abg =pattern ;};func (_gbbgd *Context )DrawImageAnchored (im _ea .Image ,x ,y int ,ax ,ay float64 ){_cae :=im .Bounds ().Size ();
x -=int (ax *float64 (_cae .X ));y -=int (ay *float64 (_cae .Y ));_fga :=_fb .BiLinear ;_ecg :=_gbbgd ._ffa .Clone ().Translate (float64 (x ),float64 (y ));_fcbc :=_g .Aff3 {_ecg [0],_ecg [3],_ecg [6],_ecg [1],_ecg [4],_ecg [7]};if _gbbgd ._fe ==nil {_fga .Transform (_gbbgd ._egbb ,_fcbc ,im ,im .Bounds (),_fb .Over ,nil );
}else {_fga .Transform (_gbbgd ._egbb ,_fcbc ,im ,im .Bounds (),_fb .Over ,&_fb .Options {DstMask :_gbbgd ._fe ,DstMaskP :_ea .Point {}});};};func (_dedb *Context )Rotate (angle float64 ){_dedb ._ffa =_dedb ._ffa .Rotate (angle )};func (_aaf *Context )Push (){_bfc :=*_aaf ;
_aaf ._fda =append (_aaf ._fda ,&_bfc )};func (_ffc *Context )Fill (){_ffc .FillPreserve ();_ffc .ClearPath ()};func (_bce *Context )Stroke (){_bce .StrokePreserve ();_bce .ClearPath ()};func (_eca *Context )DrawString (s string ,face _gc .Face ,x ,y float64 ){_eca .DrawStringAnchored (s ,face ,x ,y ,0,0);
};func (_eda *Context )SetLineWidth (lineWidth float64 ){_eda ._edge =lineWidth };func (_bee *Context )SetPixel (x ,y int ){_bee ._egbb .Set (x ,y ,_bee ._agfc )};func (_def *Context )SetRGBA255 (r ,g ,b ,a int ){_def ._agfc =_eg .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};
_def .setFillAndStrokeColor (_def ._agfc );};func _eed (_cgbg _ea .Image )*_ea .RGBA {_fca :=_cgbg .Bounds ();_aaggc :=_ea .NewRGBA (_fca );_ag .Draw (_aaggc ,_fca ,_cgbg ,_fca .Min ,_ag .Src );return _aaggc ;};func (_abgf *Context )SetColor (c _eg .Color ){_abgf .setFillAndStrokeColor (c )};
func (_ccb stops )Less (i ,j int )bool {return _ccb [i ]._adg < _ccb [j ]._adg };type solidPattern struct{_dgb _eg .Color };func _bdaa (_afb ,_edgb ,_caed ,_cad ,_fffa ,_gada float64 )_d .Gradient {_fafg :=circle {_afb ,_edgb ,_caed };_eac :=circle {_cad ,_fffa ,_gada };
_aea :=circle {_cad -_afb ,_fffa -_edgb ,_gada -_caed };_afe :=_fefbe (_aea ._gcg ,_aea ._cbe ,-_aea ._baba ,_aea ._gcg ,_aea ._cbe ,_aea ._baba );var _facg float64 ;if _afe !=0{_facg =1.0/_afe ;};_agdb :=-_fafg ._baba ;_caef :=&radialGradient {_bgde :_fafg ,_dfab :_eac ,_fdec :_aea ,_egd :_afe ,_beag :_facg ,_ccee :_agdb };
return _caef ;};func (_cffb *Context )DrawImage (im _ea .Image ,x ,y int ){_cffb .DrawImageAnchored (im ,x ,y ,0,0)};func (_fdaf *surfacePattern )ColorAt (x ,y int )_eg .Color {_abge :=_fdaf ._aefc .Bounds ();switch _fdaf ._gdd {case _bgcf :if y >=_abge .Dy (){return _eg .Transparent ;
};case _ecgf :if x >=_abge .Dx (){return _eg .Transparent ;};case _bbfa :if x >=_abge .Dx ()||y >=_abge .Dy (){return _eg .Transparent ;};};x =x %_abge .Dx ()+_abge .Min .X ;y =y %_abge .Dy ()+_abge .Min .Y ;return _fdaf ._aefc .At (x ,y );};func (_dbd *Context )ResetClip (){_dbd ._fe =nil };
func (_dec *Context )SetDashOffset (offset float64 ){_dec ._deb =offset };func (_ddd *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_ddd ._aab {_ddd .MoveTo (x1 ,y1 );};x1 ,y1 =_ddd .Transform (x1 ,y1 );x2 ,y2 =_ddd .Transform (x2 ,y2 );_afd :=_ae .NewPoint (x1 ,y1 );
_ce :=_ae .NewPoint (x2 ,y2 );_gbbg :=_dff (_afd );_gaeg :=_dff (_ce );_ddd ._fba .Add2 (_gbbg ,_gaeg );_ddd ._aad .Add2 (_gbbg ,_gaeg );_ddd ._be =_ce ;};func (_daa *Context )SetRGBA (r ,g ,b ,a float64 ){_daa ._agfc =_eg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_daa .setFillAndStrokeColor (_daa ._agfc );};func (_dgca *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_gaa ,_becc ,_ccc ,_dbeg :=x ,x +r ,x +w -r ,x +w ;_dgcf ,_agaf ,_dafd ,_ggbf :=y ,y +r ,y +h -r ,y +h ;_dgca .NewSubPath ();_dgca .MoveTo (_becc ,_dgcf );
_dgca .LineTo (_ccc ,_dgcf );_dgca .DrawArc (_ccc ,_agaf ,r ,_eebf (270),_eebf (360));_dgca .LineTo (_dbeg ,_dafd );_dgca .DrawArc (_ccc ,_dafd ,r ,_eebf (0),_eebf (90));_dgca .LineTo (_becc ,_ggbf );_dgca .DrawArc (_becc ,_dafd ,r ,_eebf (90),_eebf (180));
_dgca .LineTo (_gaa ,_agaf );_dgca .DrawArc (_becc ,_agaf ,r ,_eebf (180),_eebf (270));_dgca .ClosePath ();};func _cbcg (_efeg *_ea .RGBA ,_gea *_ea .Alpha ,_cedc _d .Pattern )*patternPainter {return &patternPainter {_efeg ,_gea ,_cedc };};func (_ced *Context )DrawPoint (x ,y ,r float64 ){_ced .Push ();
_eec ,_ccgd :=_ced .Transform (x ,y );_ced .Identity ();_ced .DrawCircle (_eec ,_ccgd ,r );_ced .Pop ();};func (_aga *Context )SetLineJoin (lineJoin _d .LineJoin ){_aga ._gde =lineJoin };func NewContextForRGBA (im *_ea .RGBA )*Context {_gfd :=im .Bounds ().Size ().X ;
_dgg :=im .Bounds ().Size ().Y ;return &Context {_ace :_gfd ,_dge :_dgg ,_egaa :_fa .NewRasterizer (_gfd ,_dgg ),_egbb :im ,_agfc :_eg .Transparent ,_abg :_bg ,_aef :_ccg ,_edge :1,_aefg :_d .FillRuleWinding ,_ffa :_ae .IdentityMatrix (),_fc :_d .NewTextState ()};
};func (_fbe *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_fbe .Translate (x ,y );_fbe .Scale (sx ,sy );_fbe .Translate (-x ,-y );};type Context struct{_ace int ;_dge int ;_egaa *_fa .Rasterizer ;_egbb *_ea .RGBA ;_fe *_ea .Alpha ;_agfc _eg .Color ;_abg _d .Pattern ;
_aef _d .Pattern ;_fba _fa .Path ;_aad _fa .Path ;_ddb _ae .Point ;_be _ae .Point ;_aab bool ;_abc []float64 ;_deb float64 ;_edge float64 ;_bgf _d .LineCap ;_gde _d .LineJoin ;_aefg _d .FillRule ;_ffa _ae .Matrix ;_fc _d .TextState ;_fda []*Context ;};
func (_efd *Context )Pop (){_edf :=*_efd ;_bcd :=_efd ._fda ;_daad :=_bcd [len (_bcd )-1];*_efd =*_daad ;_efd ._fba =_edf ._fba ;_efd ._aad =_edf ._aad ;_efd ._ddb =_edf ._ddb ;_efd ._be =_edf ._be ;_efd ._aab =_edf ._aab ;};func (_dggc *Context )LineWidth ()float64 {return _dggc ._edge };
const (_cagd repeatOp =iota ;_bgcf ;_ecgf ;_bbfa ;);func (_abgb *Context )setFillAndStrokeColor (_age _eg .Color ){_abgb ._agfc =_age ;_abgb ._abg =_ggc (_age );_abgb ._aef =_ggc (_age );};func _fbca (_gaf ,_gdb _eg .Color ,_bcfg float64 )_eg .Color {_adca ,_abd ,_adb ,_acgfe :=_gaf .RGBA ();
_cbg ,_cee ,_bbg ,_gaed :=_gdb .RGBA ();return _eg .RGBA {_agde (_adca ,_cbg ,_bcfg ),_agde (_abd ,_cee ,_bcfg ),_agde (_adb ,_bbg ,_bcfg ),_agde (_acgfe ,_gaed ,_bcfg )};};func _gdfe (_eb _fa .Path ,_fgbg []float64 ,_fafc float64 )_fa .Path {return _fcf (_dged (_dad (_eb ),_fgbg ,_fafc ));
};type circle struct{_gcg ,_cbe ,_baba float64 };func _fefbe (_fecd ,_bbc ,_fdad ,_abcd ,_eabc ,_acd float64 )float64 {return _fecd *_abcd +_bbc *_eabc +_fdad *_acd ;};func _dff (_eabd _ae .Point )_gb .Point26_6 {return _gb .Point26_6 {X :_dagb (_eabd .X ),Y :_dagb (_eabd .Y )}};
func (_cgc *Context )StrokePattern ()_d .Pattern {return _cgc ._aef };type linearGradient struct{_bbf ,_cga ,_ede ,_bdf float64 ;_dfd stops ;};func (_gccc *Context )SetFillRGBA (r ,g ,b ,a float64 ){_dfg :=_eg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_gccc ._agfc =_dfg ;_gccc ._abg =_ggc (_dfg );};func _gbfc (_faed _ea .Image ,_caec repeatOp )_d .Pattern {return &surfacePattern {_aefc :_faed ,_gdd :_caec };};func _ggc (_cgf _eg .Color )_d .Pattern {return &solidPattern {_dgb :_cgf }};func (_dfa *Context )FillPreserve (){var _bbe _fa .Painter ;
if _dfa ._fe ==nil {if _bdec ,_bec :=_dfa ._abg .(*solidPattern );_bec {_ge :=_fa .NewRGBAPainter (_dfa ._egbb );_ge .SetColor (_bdec ._dgb );_bbe =_ge ;};};if _bbe ==nil {_bbe =_cbcg (_dfa ._egbb ,_dfa ._fe ,_dfa ._abg );};_dfa .fill (_bbe );};func (_gbc *Context )ClosePath (){if _gbc ._aab {_bag :=_dff (_gbc ._ddb );
_gbc ._fba .Add1 (_bag );_gbc ._aad .Add1 (_bag );_gbc ._be =_gbc ._ddb ;};};func (_fed *Context )SetMatrix (m _ae .Matrix ){_fed ._ffa =m };func (_gbf *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_gbf .MoveTo (x1 ,y1 );_gbf .LineTo (x2 ,y2 )};func _edfb (_abda string )(_fgbd ,_gega ,_edcg ,_bfgf int ){_abda =_c .TrimPrefix (_abda ,"\u0023");
_bfgf =255;if len (_abda )==3{_begb :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_ed .Sscanf (_abda ,_begb ,&_fgbd ,&_gega ,&_edcg );_fgbd |=_fgbd <<4;_gega |=_gega <<4;_edcg |=_edcg <<4;};if len (_abda )==6{_bdgd :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_ed .Sscanf (_abda ,_bdgd ,&_fgbd ,&_gega ,&_edcg );};if len (_abda )==8{_ebc :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_ed .Sscanf (_abda ,_ebc ,&_fgbd ,&_gega ,&_edcg ,&_bfgf );};return ;};var (_bg =_ggc (_eg .White );
_ccg =_ggc (_eg .Black ););func (_cdf *Context )SetFillRule (fillRule _d .FillRule ){_cdf ._aefg =fillRule };func (_bfa *patternPainter )Paint (ss []_fa .Span ,done bool ){_bbac :=_bfa ._fgf .Bounds ();for _ ,_cea :=range ss {if _cea .Y < _bbac .Min .Y {continue ;
};if _cea .Y >=_bbac .Max .Y {return ;};if _cea .X0 < _bbac .Min .X {_cea .X0 =_bbac .Min .X ;};if _cea .X1 > _bbac .Max .X {_cea .X1 =_bbac .Max .X ;};if _cea .X0 >=_cea .X1 {continue ;};const _fgad =1<<16-1;_cgcd :=_cea .Y -_bfa ._fgf .Rect .Min .Y ;
_fbde :=_cea .X0 -_bfa ._fgf .Rect .Min .X ;_eebe :=(_cea .Y -_bfa ._fgf .Rect .Min .Y )*_bfa ._fgf .Stride +(_cea .X0 -_bfa ._fgf .Rect .Min .X )*4;_dba :=_eebe +(_cea .X1 -_cea .X0 )*4;for _eacb ,_afg :=_eebe ,_fbde ;_eacb < _dba ;_eacb ,_afg =_eacb +4,_afg +1{_fegg :=_cea .Alpha ;
if _bfa ._agdd !=nil {_fegg =_fegg *uint32 (_bfa ._agdd .AlphaAt (_afg ,_cgcd ).A )/255;if _fegg ==0{continue ;};};_beda :=_bfa ._gfbb .ColorAt (_afg ,_cgcd );_ffdc ,_bgce ,_eafa ,_fggcd :=_beda .RGBA ();_ccbe :=uint32 (_bfa ._fgf .Pix [_eacb +0]);_gbff :=uint32 (_bfa ._fgf .Pix [_eacb +1]);
_bdfa :=uint32 (_bfa ._fgf .Pix [_eacb +2]);_cdg :=uint32 (_bfa ._fgf .Pix [_eacb +3]);_eage :=(_fgad -(_fggcd *_fegg /_fgad ))*0x101;_bfa ._fgf .Pix [_eacb +0]=uint8 ((_ccbe *_eage +_ffdc *_fegg )/_fgad >>8);_bfa ._fgf .Pix [_eacb +1]=uint8 ((_gbff *_eage +_bgce *_fegg )/_fgad >>8);
_bfa ._fgf .Pix [_eacb +2]=uint8 ((_bdfa *_eage +_eafa *_fegg )/_fgad >>8);_bfa ._fgf .Pix [_eacb +3]=uint8 ((_cdg *_eage +_fggcd *_fegg )/_fgad >>8);};};};func _dged (_eegf [][]_ae .Point ,_ecab []float64 ,_gdf float64 )[][]_ae .Point {var _feg [][]_ae .Point ;
if len (_ecab )==0{return _eegf ;};if len (_ecab )==1{_ecab =append (_ecab ,_ecab [0]);};for _ ,_gfb :=range _eegf {if len (_gfb )< 2{continue ;};_faa :=_gfb [0];_aagg :=1;_gdg :=0;_edfd :=0.0;if _gdf !=0{var _efb float64 ;for _ ,_caa :=range _ecab {_efb +=_caa ;
};_gdf =_ee .Mod (_gdf ,_efb );if _gdf < 0{_gdf +=_efb ;};for _bgca ,_dgee :=range _ecab {_gdf -=_dgee ;if _gdf < 0{_gdg =_bgca ;_edfd =_dgee +_gdf ;break ;};};};var _affe []_ae .Point ;_affe =append (_affe ,_faa );for _aagg < len (_gfb ){_ffd :=_ecab [_gdg ];
_dece :=_gfb [_aagg ];_agcc :=_faa .Distance (_dece );_gfg :=_ffd -_edfd ;if _agcc > _gfg {_aae :=_gfg /_agcc ;_dead :=_faa .Interpolate (_dece ,_aae );_affe =append (_affe ,_dead );if _gdg %2==0&&len (_affe )> 1{_feg =append (_feg ,_affe );};_affe =nil ;
_affe =append (_affe ,_dead );_edfd =0;_faa =_dead ;_gdg =(_gdg +1)%len (_ecab );}else {_affe =append (_affe ,_dece );_faa =_dece ;_edfd +=_agcc ;_aagg ++;};};if _gdg %2==0&&len (_affe )> 1{_feg =append (_feg ,_affe );};};return _feg ;};func _baac (_de ,_ca ,_bbd ,_cgb ,_ege ,_bfb ,_bfd ,_dceb float64 )[]_ae .Point {_gca :=(_ee .Hypot (_bbd -_de ,_cgb -_ca )+_ee .Hypot (_ege -_bbd ,_bfb -_cgb )+_ee .Hypot (_bfd -_ege ,_dceb -_bfb ));
_agb :=int (_gca +0.5);if _agb < 4{_agb =4;};_egb :=float64 (_agb )-1;_ac :=make ([]_ae .Point ,_agb );for _agd :=0;_agd < _agb ;_agd ++{_db :=float64 (_agd )/_egb ;_dg ,_cbc :=_gd (_de ,_ca ,_bbd ,_cgb ,_ege ,_bfb ,_bfd ,_dceb ,_db );_ac [_agd ]=_ae .NewPoint (_dg ,_cbc );
};return _ac ;};func _ccge (_ade ,_ggfd ,_eadc ,_gadd float64 )_d .Gradient {_fgb :=&linearGradient {_bbf :_ade ,_cga :_ggfd ,_ede :_eadc ,_bdf :_gadd };return _fgb ;};func (_acg *Context )SetHexColor (x string ){_bde ,_cdfd ,_fef ,_ece :=_edfb (x );_acg .SetRGBA255 (_bde ,_cdfd ,_fef ,_ece );
};func (_feda *Context )ShearAbout (sx ,sy ,x ,y float64 ){_feda .Translate (x ,y );_feda .Shear (sx ,sy );_feda .Translate (-x ,-y );};func (_dda *Context )SetRGB255 (r ,g ,b int ){_dda .SetRGBA255 (r ,g ,b ,255)};func (_dab *Context )TextState ()*_d .TextState {return &_dab ._fc };
func (_eee *Context )Image ()_ea .Image {return _eee ._egbb };func _aa (_bd ,_bdb ,_egc ,_cbf ,_cg ,_ec float64 )[]_ae .Point {_bc :=(_ee .Hypot (_egc -_bd ,_cbf -_bdb )+_ee .Hypot (_cg -_egc ,_ec -_cbf ));_dce :=int (_bc +0.5);if _dce < 4{_dce =4;};_agf :=float64 (_dce )-1;
_gg :=make ([]_ae .Point ,_dce );for _cc :=0;_cc < _dce ;_cc ++{_fg :=float64 (_cc )/_agf ;_cda ,_df :=_fd (_bd ,_bdb ,_egc ,_cbf ,_cg ,_ec ,_fg );_gg [_cc ]=_ae .NewPoint (_cda ,_df );};return _gg ;};func (_egee *solidPattern )ColorAt (x ,y int )_eg .Color {return _egee ._dgb };
type surfacePattern struct{_aefc _ea .Image ;_gdd repeatOp ;};func (_bfbe *Context )StrokePreserve (){var _eaf _fa .Painter ;if _bfbe ._fe ==nil {if _abf ,_afde :=_bfbe ._aef .(*solidPattern );_afde {_bdd :=_fa .NewRGBAPainter (_bfbe ._egbb );_bdd .SetColor (_abf ._dgb );
_eaf =_bdd ;};};if _eaf ==nil {_eaf =_cbcg (_bfbe ._egbb ,_bfbe ._fe ,_bfbe ._aef );};_bfbe .stroke (_eaf );};type repeatOp int ;func (_bfg *Context )Clear (){_abcb :=_ea .NewUniform (_bfg ._agfc );_fb .Draw (_bfg ._egbb ,_bfg ._egbb .Bounds (),_abcb ,_ea .Point {},_fb .Src );
};func (_ded *Context )ClearPath (){_ded ._fba .Clear ();_ded ._aad .Clear ();_ded ._aab =false };func (_fbcc *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_fbcc .NewSubPath ();_fbcc .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_ee .Pi );_fbcc .ClosePath ();};
func (_bddd *Context )DrawRectangle (x ,y ,w ,h float64 ){_bddd .NewSubPath ();_bddd .MoveTo (x ,y );_bddd .LineTo (x +w ,y );_bddd .LineTo (x +w ,y +h );_bddd .LineTo (x ,y +h );_bddd .ClosePath ();};type radialGradient struct{_bgde ,_dfab ,_fdec circle ;
_egd ,_beag float64 ;_ccee float64 ;_ecfa stops ;};func (_dgd *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _cddd =16;for _ccce :=0;_ccce < _cddd ;_ccce ++{_dag :=float64 (_ccce +0)/_cddd ;_fdde :=float64 (_ccce +1)/_cddd ;_dea :=angle1 +(angle2 -angle1 )*_dag ;
_dbb :=angle1 +(angle2 -angle1 )*_fdde ;_deab :=x +rx *_ee .Cos (_dea );_gfda :=y +ry *_ee .Sin (_dea );_bea :=x +rx *_ee .Cos ((_dea +_dbb )/2);_dfad :=y +ry *_ee .Sin ((_dea +_dbb )/2);_bbdc :=x +rx *_ee .Cos (_dbb );_cff :=y +ry *_ee .Sin (_dbb );_ef :=2*_bea -_deab /2-_bbdc /2;
_acgf :=2*_dfad -_gfda /2-_cff /2;if _ccce ==0{if _dgd ._aab {_dgd .LineTo (_deab ,_gfda );}else {_dgd .MoveTo (_deab ,_gfda );};};_dgd .QuadraticTo (_ef ,_acgf ,_bbdc ,_cff );};};func (_agdf *Context )Width ()int {return _agdf ._ace };func _dad (_cbd _fa .Path )[][]_ae .Point {var _fcba [][]_ae .Point ;
var _dfb []_ae .Point ;var _ccged ,_adee float64 ;for _bdg :=0;_bdg < len (_cbd );{switch _cbd [_bdg ]{case 0:if len (_dfb )> 0{_fcba =append (_fcba ,_dfb );_dfb =nil ;};_aag :=_dac (_cbd [_bdg +1]);_cbfa :=_dac (_cbd [_bdg +2]);_dfb =append (_dfb ,_ae .NewPoint (_aag ,_cbfa ));
_ccged ,_adee =_aag ,_cbfa ;_bdg +=4;case 1:_dgfg :=_dac (_cbd [_bdg +1]);_cac :=_dac (_cbd [_bdg +2]);_dfb =append (_dfb ,_ae .NewPoint (_dgfg ,_cac ));_ccged ,_adee =_dgfg ,_cac ;_bdg +=4;case 2:_dcf :=_dac (_cbd [_bdg +1]);_egbee :=_dac (_cbd [_bdg +2]);
_dgff :=_dac (_cbd [_bdg +3]);_ggad :=_dac (_cbd [_bdg +4]);_bfeb :=_aa (_ccged ,_adee ,_dcf ,_egbee ,_dgff ,_ggad );_dfb =append (_dfb ,_bfeb ...);_ccged ,_adee =_dgff ,_ggad ;_bdg +=6;case 3:_ggbg :=_dac (_cbd [_bdg +1]);_bcg :=_dac (_cbd [_bdg +2]);
_fggc :=_dac (_cbd [_bdg +3]);_egadb :=_dac (_cbd [_bdg +4]);_bbca :=_dac (_cbd [_bdg +5]);_egef :=_dac (_cbd [_bdg +6]);_eegc :=_baac (_ccged ,_adee ,_ggbg ,_bcg ,_fggc ,_egadb ,_bbca ,_egef );_dfb =append (_dfb ,_eegc ...);_ccged ,_adee =_bbca ,_egef ;
_bdg +=8;default:_f .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_cbd );return _fcba ;};};if len (_dfb )> 0{_fcba =append (_fcba ,_dfb );};return _fcba ;};func (_cce *Context )NewSubPath (){if _cce ._aab {_cce ._aad .Add1 (_dff (_cce ._ddb ));
};_cce ._aab =false ;};type patternPainter struct{_fgf *_ea .RGBA ;_agdd *_ea .Alpha ;_gfbb _d .Pattern ;};func _dagb (_fge float64 )_gb .Int26_6 {return _gb .Int26_6 (_fge *64)};func (_edag stops )Swap (i ,j int ){_edag [i ],_edag [j ]=_edag [j ],_edag [i ]};
func _eebf (_aceb float64 )float64 {return _aceb *_ee .Pi /180};func (_dfaa *Context )Clip (){_dfaa .ClipPreserve ();_dfaa .ClearPath ()};func (_bab *Context )InvertMask (){if _bab ._fe ==nil {_bab ._fe =_ea .NewAlpha (_bab ._egbb .Bounds ());}else {for _ggb ,_fbae :=range _bab ._fe .Pix {_bab ._fe .Pix [_ggb ]=255-_fbae ;
};};};func _dac (_cddbb _gb .Int26_6 )float64 {const _efa ,_fcge =6,1<<6-1;if _cddbb >=0{return float64 (_cddbb >>_efa )+float64 (_cddbb &_fcge )/64;};_cddbb =-_cddbb ;if _cddbb >=0{return -(float64 (_cddbb >>_efa )+float64 (_cddbb &_fcge )/64);};return 0;
};func (_cab *Context )RotateAbout (angle ,x ,y float64 ){_cab .Translate (x ,y );_cab .Rotate (angle );_cab .Translate (-x ,-y );};func (_ddc *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_gad :=_eg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_ddc ._aef =_ggc (_gad );};func _gff (_fdc float64 ,_gcb stops )_eg .Color {if _fdc <=0.0||len (_gcb )==1{return _gcb [0]._fdaa ;};_bcdf :=_gcb [len (_gcb )-1];if _fdc >=_bcdf ._adg {return _bcdf ._fdaa ;};for _adcc ,_gbcb :=range _gcb [1:]{if _fdc < _gbcb ._adg {_fdc =(_fdc -_gcb [_adcc ]._adg )/(_gbcb ._adg -_gcb [_adcc ]._adg );
return _fbca (_gcb [_adcc ]._fdaa ,_gbcb ._fdaa ,_fdc );};};return _bcdf ._fdaa ;};func (_abb *Context )MeasureString (s string ,face _gc .Face )(_aaa ,_eced float64 ){_bac :=&_gc .Drawer {Face :face };_ecae :=_bac .MeasureString (s );return float64 (_ecae >>6),_abb ._fc .Tf .Size ;
};