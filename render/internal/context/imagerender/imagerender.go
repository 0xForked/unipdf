//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_aa "errors";_d "fmt";_ce "github.com/unidoc/freetype/raster";_cg "github.com/unidoc/unipdf/v3/common";_ab "github.com/unidoc/unipdf/v3/internal/transform";_bf "github.com/unidoc/unipdf/v3/render/internal/context";_dab "golang.org/x/image/draw";
_dd "golang.org/x/image/font";_e "golang.org/x/image/math/f64";_gf "golang.org/x/image/math/fixed";_de "image";_c "image/color";_da "image/draw";_b "math";_bg "sort";_a "strings";);func (_edg *Context )SetFillRGBA (r ,g ,b ,a float64 ){_adg :=_c .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_edg ._cag =_adg ;_edg ._bba =_ecec (_adg );};func (_aebf *Context )SetColor (c _c .Color ){_aebf .setFillAndStrokeColor (c )};func (_adgd *Context )SetRGBA255 (r ,g ,b ,a int ){_adgd ._cag =_c .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};_adgd .setFillAndStrokeColor (_adgd ._cag );
};func (_baf *Context )SetFillStyle (pattern _bf .Pattern ){if _cfe ,_gea :=pattern .(*solidPattern );_gea {_baf ._cag =_cfe ._cga ;};_baf ._bba =pattern ;};func (_efe *Context )ClosePath (){if _efe ._ac {_ccb :=_begb (_efe ._fga );_efe ._ecb .Add1 (_ccb );
_efe ._ed .Add1 (_ccb );_efe ._ga =_efe ._fga ;};};func (_ega *Context )fill (_gdf _ce .Painter ){_cde :=_ega ._ed ;if _ega ._ac {_cde =make (_ce .Path ,len (_ega ._ed ));copy (_cde ,_ega ._ed );_cde .Add1 (_begb (_ega ._fga ));};_gcg :=_ega ._bcb ;_gcg .UseNonZeroWinding =_ega ._eae ==_bf .FillRuleWinding ;
_gcg .Clear ();_gcg .AddPath (_cde );_gcg .Rasterize (_gdf );};func (_bad *Context )StrokePattern ()_bf .Pattern {return _bad ._daa };func NewLinearGradient (x0 ,y0 ,x1 ,y1 float64 )_bf .Gradient {_cfc :=&linearGradient {_acag :x0 ,_ffe :y0 ,_dcc :x1 ,_bfb :y1 };
return _cfc ;};func NewContext (width ,height int )*Context {return NewContextForRGBA (_de .NewRGBA (_de .Rect (0,0,width ,height )));};func (_ggge stops )Len ()int {return len (_ggge )};func (_eea *Context )DrawString (s string ,face _dd .Face ,x ,y float64 ){_eea .DrawStringAnchored (s ,face ,x ,y ,0,0);
};func (_ccc *Context )SetLineJoin (lineJoin _bf .LineJoin ){_ccc ._gbgd =lineJoin };func (_fcd *Context )SetStrokeStyle (pattern _bf .Pattern ){_fcd ._daa =pattern };func (_efb *Context )SetDashOffset (offset float64 ){_efb ._gaf =offset };func (_gadd *linearGradient )ColorAt (x ,y int )_c .Color {if len (_gadd ._gbcf )==0{return _c .Transparent ;
};_aeab ,_dfdc :=float64 (x ),float64 (y );_ecdc ,_cac ,_aedf ,_ccd :=_gadd ._acag ,_gadd ._ffe ,_gadd ._dcc ,_gadd ._bfb ;_gafe ,_egb :=_aedf -_ecdc ,_ccd -_cac ;if _egb ==0&&_gafe !=0{return _edgg ((_aeab -_ecdc )/_gafe ,_gadd ._gbcf );};if _gafe ==0&&_egb !=0{return _edgg ((_dfdc -_cac )/_egb ,_gadd ._gbcf );
};_fee :=_gafe *(_aeab -_ecdc )+_egb *(_dfdc -_cac );if _fee < 0{return _gadd ._gbcf [0]._gafd ;};_fcc :=_b .Hypot (_gafe ,_egb );_dfgf :=((_aeab -_ecdc )*-_egb +(_dfdc -_cac )*_gafe )/(_fcc *_fcc );_ggbd ,_agac :=_ecdc +_dfgf *-_egb ,_cac +_dfgf *_gafe ;
_cbf :=_b .Hypot (_aeab -_ggbd ,_dfdc -_agac )/_fcc ;return _edgg (_cbf ,_gadd ._gbcf );};func (_dfc *Context )DrawStringAnchored (s string ,face _dd .Face ,x ,y ,ax ,ay float64 ){_cgb ,_eeac :=_dfc .MeasureString (s ,face );_dfc .drawString (s ,face ,x -ax *_cgb ,y +ay *_eeac );
};func _ecec (_acba _c .Color )_bf .Pattern {return &solidPattern {_cga :_acba }};func (_dcd *Context )SetPixel (x ,y int ){_dcd ._dfb .Set (x ,y ,_dcd ._cag )};func (_ecc *Context )Fill (){_ecc .FillPreserve ();_ecc .ClearPath ()};func (_bdab *Context )AsMask ()*_de .Alpha {_ecd :=_de .NewAlpha (_bdab ._dfb .Bounds ());
_dab .Draw (_ecd ,_bdab ._dfb .Bounds (),_bdab ._dfb ,_de .Point {},_dab .Src );return _ecd ;};func (_fce *Context )DrawRectangle (x ,y ,w ,h float64 ){_fce .NewSubPath ();_fce .MoveTo (x ,y );_fce .LineTo (x +w ,y );_fce .LineTo (x +w ,y +h );_fce .LineTo (x ,y +h );
_fce .ClosePath ();};func (_gbd *Context )TextState ()*_bf .TextState {return &_gbd ._aea };func (_bbb *Context )SetLineCap (lineCap _bf .LineCap ){_bbb ._fgf =lineCap };func (_cdf *Context )LineTo (x ,y float64 ){if !_cdf ._ac {_cdf .MoveTo (x ,y );}else {x ,y =_cdf .Transform (x ,y );
_afab :=_ab .NewPoint (x ,y );_fef :=_begb (_afab );_cdf ._ecb .Add1 (_fef );_cdf ._ed .Add1 (_fef );_cdf ._ga =_afab ;};};func (_efd *Context )Pop (){_edgf :=*_efd ;_dfdf :=_efd ._cge ;_bccd :=_dfdf [len (_dfdf )-1];*_efd =*_bccd ;_efd ._ecb =_edgf ._ecb ;
_efd ._ed =_edgf ._ed ;_efd ._fga =_edgf ._fga ;_efd ._ga =_edgf ._ga ;_efd ._ac =_edgf ._ac ;};func _gbgc (_bagg _de .Image )*_de .RGBA {_abad :=_bagg .Bounds ();_ade :=_de .NewRGBA (_abad );_da .Draw (_ade ,_abad ,_bagg ,_abad .Min ,_da .Src );return _ade ;
};func (_deb *Context )LineWidth ()float64 {return _deb ._ddga };func (_aed *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_aed ._ac {_aed .MoveTo (x1 ,y1 );};_fbg ,_dfbd :=_aed ._ga .X ,_aed ._ga .Y ;x1 ,y1 =_aed .Transform (x1 ,y1 );x2 ,y2 =_aed .Transform (x2 ,y2 );
x3 ,y3 =_aed .Transform (x3 ,y3 );_affg :=_bed (_fbg ,_dfbd ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_bec :=_begb (_aed ._ga );for _ ,_cef :=range _affg [1:]{_ggb :=_begb (_cef );if _ggb ==_bec {continue ;};_bec =_ggb ;_aed ._ecb .Add1 (_ggb );_aed ._ed .Add1 (_ggb );
_aed ._ga =_cef ;};};type circle struct{_acef ,_eabe ,_cegd float64 };func (_acb *Context )joiner ()_ce .Joiner {switch _acb ._gbgd {case _bf .LineJoinBevel :return _ce .BevelJoiner ;case _bf .LineJoinRound :return _ce .RoundJoiner ;};return nil ;};func (_acf *Context )ResetClip (){_acf ._eff =nil };
func (_dge *Context )Clear (){_cbc :=_de .NewUniform (_dge ._cag );_dab .Draw (_dge ._dfb ,_dge ._dfb .Bounds (),_cbc ,_de .Point {},_dab .Src );};func (_gfeb stops )Less (i ,j int )bool {return _gfeb [i ]._bfe < _gfeb [j ]._bfe };type linearGradient struct{_acag ,_ffe ,_dcc ,_bfb float64 ;
_gbcf stops ;};func _bcef (_cbegf [][]_ab .Point )_ce .Path {var _gbeb _ce .Path ;for _ ,_gfdf :=range _cbegf {var _gec _gf .Point26_6 ;for _caf ,_gbce :=range _gfdf {_afce :=_begb (_gbce );if _caf ==0{_gbeb .Start (_afce );}else {_fccd :=_afce .X -_gec .X ;
_becb :=_afce .Y -_gec .Y ;if _fccd < 0{_fccd =-_fccd ;};if _becb < 0{_becb =-_becb ;};if _fccd +_becb > 8{_gbeb .Add1 (_afce );};};_gec =_afce ;};};return _gbeb ;};func _bafc (_acea ,_cfb uint32 ,_ddb float64 )uint8 {return uint8 (int32 (float64 (_acea )*(1.0-_ddb )+float64 (_cfb )*_ddb )>>8);
};func _cefd (_fde [][]_ab .Point ,_gba []float64 ,_egf float64 )[][]_ab .Point {var _dgeg [][]_ab .Point ;if len (_gba )==0{return _fde ;};if len (_gba )==1{_gba =append (_gba ,_gba [0]);};for _ ,_ddgf :=range _fde {if len (_ddgf )< 2{continue ;};_feg :=_ddgf [0];
_ccea :=1;_gbeg :=0;_feb :=0.0;if _egf !=0{var _dfe float64 ;for _ ,_gdbg :=range _gba {_dfe +=_gdbg ;};_egf =_b .Mod (_egf ,_dfe );if _egf < 0{_egf +=_dfe ;};for _acfa ,_geba :=range _gba {_egf -=_geba ;if _egf < 0{_gbeg =_acfa ;_feb =_geba +_egf ;break ;
};};};var _fdf []_ab .Point ;_fdf =append (_fdf ,_feg );for _ccea < len (_ddgf ){_dcgf :=_gba [_gbeg ];_cbfd :=_ddgf [_ccea ];_dbf :=_feg .Distance (_cbfd );_agc :=_dcgf -_feb ;if _dbf > _agc {_egbc :=_agc /_dbf ;_fbgd :=_feg .Interpolate (_cbfd ,_egbc );
_fdf =append (_fdf ,_fbgd );if _gbeg %2==0&&len (_fdf )> 1{_dgeg =append (_dgeg ,_fdf );};_fdf =nil ;_fdf =append (_fdf ,_fbgd );_feb =0;_feg =_fbgd ;_gbeg =(_gbeg +1)%len (_gba );}else {_fdf =append (_fdf ,_cbfd );_feg =_cbfd ;_feb +=_dbf ;_ccea ++;};
};if _gbeg %2==0&&len (_fdf )> 1{_dgeg =append (_dgeg ,_fdf );};};return _dgeg ;};func (_dfg *Context )Rotate (angle float64 ){_dfg ._eed =_dfg ._eed .Rotate (angle )};func (_bdgb *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_bdgb .Translate (x ,y );_bdgb .Scale (sx ,sy );
_bdgb .Translate (-x ,-y );};func (_dbg *Context )drawString (_ffd string ,_bdga _dd .Face ,_gafg ,_edb float64 ){_ecfc :=&_dd .Drawer {Src :_de .NewUniform (_dbg ._cag ),Face :_bdga ,Dot :_begb (_ab .NewPoint (_gafg ,_edb ))};_gbf :=rune (-1);for _ ,_dcgdg :=range _ffd {if _gbf >=0{_ecfc .Dot .X +=_ecfc .Face .Kern (_gbf ,_dcgdg );
};_affd ,_gccb ,_dgf ,_aca ,_gcdd :=_ecfc .Face .Glyph (_ecfc .Dot ,_dcgdg );if !_gcdd {continue ;};_gcda :=_affd .Sub (_affd .Min );_efg :=_de .NewRGBA (_gcda );_dab .DrawMask (_efg ,_gcda ,_ecfc .Src ,_de .Point {},_gccb ,_dgf ,_dab .Over );var _cba *_dab .Options ;
if _dbg ._eff !=nil {_cba =&_dab .Options {DstMask :_dbg ._eff ,DstMaskP :_de .Point {}};};_egg :=_dbg ._eed .Clone ().Translate (float64 (_affd .Min .X ),float64 (_affd .Min .Y ));_eaa :=_e .Aff3 {_egg [0],_egg [3],_egg [6],_egg [1],_egg [4],_egg [7]};
_dab .BiLinear .Transform (_dbg ._dfb ,_eaa ,_efg ,_gcda ,_dab .Over ,_cba );_ecfc .Dot .X +=_aca ;_gbf =_dcgdg ;};};func NewContextForRGBA (im *_de .RGBA )*Context {_aeb :=im .Bounds ().Size ().X ;_afc :=im .Bounds ().Size ().Y ;return &Context {_df :_aeb ,_gbbe :_afc ,_bcb :_ce .NewRasterizer (_aeb ,_afc ),_dfb :im ,_cag :_c .Transparent ,_bba :_ad ,_daa :_gbg ,_ddga :1,_eae :_bf .FillRuleWinding ,_eed :_ab .IdentityMatrix (),_aea :_bf .NewTextState ()};
};func (_gcf *radialGradient )AddColorStop (offset float64 ,color _c .Color ){_gcf ._cbeg =append (_gcf ._cbeg ,stop {_bfe :offset ,_gafd :color });_bg .Sort (_gcf ._cbeg );};func (_aede *Context )DrawPoint (x ,y ,r float64 ){_aede .Push ();_bce ,_cfg :=_aede .Transform (x ,y );
_aede .Identity ();_aede .DrawCircle (_bce ,_cfg ,r );_aede .Pop ();};func _gfbf (_acgc float64 )float64 {return _acgc *_b .Pi /180};func (_abcd *Context )Translate (x ,y float64 ){_abcd ._eed =_abcd ._eed .Translate (x ,y )};func (_fe *Context )SetRGB255 (r ,g ,b int ){_fe .SetRGBA255 (r ,g ,b ,255)};
func (_abb *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_cdcg :=_c .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_abb ._daa =_ecec (_cdcg );};func _dag (_bfd _gf .Int26_6 )float64 {const _ggafe ,_gff =6,1<<6-1;if _bfd >=0{return float64 (_bfd >>_ggafe )+float64 (_bfd &_gff )/64;
};_bfd =-_bfd ;if _bfd >=0{return -(float64 (_bfd >>_ggafe )+float64 (_bfd &_gff )/64);};return 0;};func (_ffc *patternPainter )Paint (ss []_ce .Span ,done bool ){_ecg :=_ffc ._cfbc .Bounds ();for _ ,_bcgb :=range ss {if _bcgb .Y < _ecg .Min .Y {continue ;
};if _bcgb .Y >=_ecg .Max .Y {return ;};if _bcgb .X0 < _ecg .Min .X {_bcgb .X0 =_ecg .Min .X ;};if _bcgb .X1 > _ecg .Max .X {_bcgb .X1 =_ecg .Max .X ;};if _bcgb .X0 >=_bcgb .X1 {continue ;};const _bacb =1<<16-1;_eda :=_bcgb .Y -_ffc ._cfbc .Rect .Min .Y ;
_bgb :=_bcgb .X0 -_ffc ._cfbc .Rect .Min .X ;_eagf :=(_bcgb .Y -_ffc ._cfbc .Rect .Min .Y )*_ffc ._cfbc .Stride +(_bcgb .X0 -_ffc ._cfbc .Rect .Min .X )*4;_bcga :=_eagf +(_bcgb .X1 -_bcgb .X0 )*4;for _ede ,_fcf :=_eagf ,_bgb ;_ede < _bcga ;_ede ,_fcf =_ede +4,_fcf +1{_bcf :=_bcgb .Alpha ;
if _ffc ._gcff !=nil {_bcf =_bcf *uint32 (_ffc ._gcff .AlphaAt (_fcf ,_eda ).A )/255;if _bcf ==0{continue ;};};_gcba :=_ffc ._aad .ColorAt (_fcf ,_eda );_bcgd ,_fdbe ,_dccg ,_ecfcg :=_gcba .RGBA ();_cgf :=uint32 (_ffc ._cfbc .Pix [_ede +0]);_aae :=uint32 (_ffc ._cfbc .Pix [_ede +1]);
_edce :=uint32 (_ffc ._cfbc .Pix [_ede +2]);_cfgb :=uint32 (_ffc ._cfbc .Pix [_ede +3]);_abac :=(_bacb -(_ecfcg *_bcf /_bacb ))*0x101;_ffc ._cfbc .Pix [_ede +0]=uint8 ((_cgf *_abac +_bcgd *_bcf )/_bacb >>8);_ffc ._cfbc .Pix [_ede +1]=uint8 ((_aae *_abac +_fdbe *_bcf )/_bacb >>8);
_ffc ._cfbc .Pix [_ede +2]=uint8 ((_edce *_abac +_dccg *_bcf )/_bacb >>8);_ffc ._cfbc .Pix [_ede +3]=uint8 ((_cfgb *_abac +_ecfcg *_bcf )/_bacb >>8);};};};func (_ceb *Context )stroke (_gfb _ce .Painter ){_debe :=_ceb ._ecb ;if len (_ceb ._cea )> 0{_debe =_geca (_debe ,_ceb ._cea ,_ceb ._gaf );
}else {_debe =_bcef (_eaf (_debe ));};_gbc :=_ceb ._bcb ;_gbc .UseNonZeroWinding =true ;_gbc .Clear ();_dgaa :=(_ceb ._eed .ScalingFactorX ()+_ceb ._eed .ScalingFactorY ())/2;_gbc .AddStroke (_debe ,_fgde (_ceb ._ddga *_dgaa ),_ceb .capper (),_ceb .joiner ());
_gbc .Rasterize (_gfb );};func (_affc *Context )Identity (){_affc ._eed =_ab .IdentityMatrix ()};func (_fdb *Context )drawRegularPolygon (_deeb int ,_fae ,_dcf ,_bbd ,_eba float64 ){_cgg :=2*_b .Pi /float64 (_deeb );_eba -=_b .Pi /2;if _deeb %2==0{_eba +=_cgg /2;
};_fdb .NewSubPath ();for _gad :=0;_gad < _deeb ;_gad ++{_bcd :=_eba +_cgg *float64 (_gad );_fdb .LineTo (_fae +_bbd *_b .Cos (_bcd ),_dcf +_bbd *_b .Sin (_bcd ));};_fdb .ClosePath ();};type stop struct{_bfe float64 ;_gafd _c .Color ;};func (_bedb *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_bedb ._ac {_bedb .MoveTo (x1 ,y1 );
};x1 ,y1 =_bedb .Transform (x1 ,y1 );x2 ,y2 =_bedb .Transform (x2 ,y2 );_ebe :=_ab .NewPoint (x1 ,y1 );_gcc :=_ab .NewPoint (x2 ,y2 );_ggf :=_begb (_ebe );_bdg :=_begb (_gcc );_bedb ._ecb .Add2 (_ggf ,_bdg );_bedb ._ed .Add2 (_ggf ,_bdg );_bedb ._ga =_gcc ;
};func (_dga *Context )SetFillRule (fillRule _bf .FillRule ){_dga ._eae =fillRule };type surfacePattern struct{_agg _de .Image ;_adb repeatOp ;};func _edgg (_cee float64 ,_bag stops )_c .Color {if _cee <=0.0||len (_bag )==1{return _bag [0]._gafd ;};_bdgc :=_bag [len (_bag )-1];
if _cee >=_bdgc ._bfe {return _bdgc ._gafd ;};for _efgg ,_fafd :=range _bag [1:]{if _cee < _fafd ._bfe {_cee =(_cee -_bag [_efgg ]._bfe )/(_fafd ._bfe -_bag [_efgg ]._bfe );return _eeb (_bag [_efgg ]._gafd ,_fafd ._gafd ,_cee );};};return _bdgc ._gafd ;
};func (_cbd *Context )DrawImage (im _de .Image ,x ,y int ){_cbd .DrawImageAnchored (im ,x ,y ,0,0)};func _ccba (_dfdcf *_de .RGBA ,_gcee *_de .Alpha ,_dfbdc _bf .Pattern )*patternPainter {return &patternPainter {_dfdcf ,_gcee ,_dfbdc };};func (_eca *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_eca .NewSubPath ();
_eca .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_b .Pi );_eca .ClosePath ();};func (_afb stops )Swap (i ,j int ){_afb [i ],_afb [j ]=_afb [j ],_afb [i ]};func (_efbf *Context )Push (){_bbg :=*_efbf ;_efbf ._cge =append (_efbf ._cge ,&_bbg )};func (_dfa *Context )Width ()int {return _dfa ._df };
func NewRadialGradient (x0 ,y0 ,r0 ,x1 ,y1 ,r1 float64 )_bf .Gradient {_edc :=circle {x0 ,y0 ,r0 };_bacg :=circle {x1 ,y1 ,r1 };_abgg :=circle {x1 -x0 ,y1 -y0 ,r1 -r0 };_gafec :=_gca (_abgg ._acef ,_abgg ._eabe ,-_abgg ._cegd ,_abgg ._acef ,_abgg ._eabe ,_abgg ._cegd );
var _gdaa float64 ;if _gafec !=0{_gdaa =1.0/_gafec ;};_fab :=-_edc ._cegd ;_aedef :=&radialGradient {_bfa :_edc ,_gfa :_bacg ,_cccg :_abgg ,_dca :_gafec ,_cce :_gdaa ,_ece :_fab };return _aedef ;};var (_ad =_ecec (_c .White );_gbg =_ecec (_c .Black ););
func (_ged *Context )Stroke (){_ged .StrokePreserve ();_ged .ClearPath ()};func (_deg *Context )SetMask (mask *_de .Alpha )error {if mask .Bounds ().Size ()!=_deg ._dfb .Bounds ().Size (){return _aa .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_deg ._eff =mask ;return nil ;};func (_efdb *surfacePattern )ColorAt (x ,y int )_c .Color {_gbcea :=_efdb ._agg .Bounds ();switch _efdb ._adb {case _gbfd :if y >=_gbcea .Dy (){return _c .Transparent ;};case _gbda :if x >=_gbcea .Dx (){return _c .Transparent ;
};case _fbb :if x >=_gbcea .Dx ()||y >=_gbcea .Dy (){return _c .Transparent ;};};x =x %_gbcea .Dx ()+_gbcea .Min .X ;y =y %_gbcea .Dy ()+_gbcea .Min .Y ;return _efdb ._agg .At (x ,y );};func (_geb *Context )RotateAbout (angle ,x ,y float64 ){_geb .Translate (x ,y );
_geb .Rotate (angle );_geb .Translate (-x ,-y );};func (_bab *Context )ShearAbout (sx ,sy ,x ,y float64 ){_bab .Translate (x ,y );_bab .Shear (sx ,sy );_bab .Translate (-x ,-y );};func _gca (_edba ,_bfed ,_cbfa ,_ggaf ,_cefe ,_dfdfg float64 )float64 {return _edba *_ggaf +_bfed *_cefe +_cbfa *_dfdfg ;
};func (_ffg *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _fad =16;for _aec :=0;_aec < _fad ;_aec ++{_dged :=float64 (_aec +0)/_fad ;_gac :=float64 (_aec +1)/_fad ;_dbee :=angle1 +(angle2 -angle1 )*_dged ;_gce :=angle1 +(angle2 -angle1 )*_gac ;
_ebd :=x +rx *_b .Cos (_dbee );_ebed :=y +ry *_b .Sin (_dbee );_abc :=x +rx *_b .Cos ((_dbee +_gce )/2);_bcea :=y +ry *_b .Sin ((_dbee +_gce )/2);_gbcc :=x +rx *_b .Cos (_gce );_afe :=y +ry *_b .Sin (_gce );_aee :=2*_abc -_ebd /2-_gbcc /2;_bdfa :=2*_bcea -_ebed /2-_afe /2;
if _aec ==0{if _ffg ._ac {_ffg .LineTo (_ebd ,_ebed );}else {_ffg .MoveTo (_ebd ,_ebed );};};_ffg .QuadraticTo (_aee ,_bdfa ,_gbcc ,_afe );};};func (_agb *Context )ClipPreserve (){_fgfd :=_de .NewAlpha (_de .Rect (0,0,_agb ._df ,_agb ._gbbe ));_abbf :=_ce .NewAlphaOverPainter (_fgfd );
_agb .fill (_abbf );if _agb ._eff ==nil {_agb ._eff =_fgfd ;}else {_bfg :=_de .NewAlpha (_de .Rect (0,0,_agb ._df ,_agb ._gbbe ));_dab .DrawMask (_bfg ,_bfg .Bounds (),_fgfd ,_de .Point {},_agb ._eff ,_de .Point {},_dab .Over );_agb ._eff =_bfg ;};};func (_cbef *Context )capper ()_ce .Capper {switch _cbef ._fgf {case _bf .LineCapButt :return _ce .ButtCapper ;
case _bf .LineCapRound :return _ce .RoundCapper ;case _bf .LineCapSquare :return _ce .SquareCapper ;};return nil ;};func (_ggg *Context )MoveTo (x ,y float64 ){if _ggg ._ac {_ggg ._ed .Add1 (_begb (_ggg ._fga ));};x ,y =_ggg .Transform (x ,y );_ecf :=_ab .NewPoint (x ,y );
_fda :=_begb (_ecf );_ggg ._ecb .Start (_fda );_ggg ._ed .Start (_fda );_ggg ._fga =_ecf ;_ggg ._ga =_ecf ;_ggg ._ac =true ;};func (_accb *Context )Matrix ()_ab .Matrix {return _accb ._eed };type repeatOp int ;func _f (_ba ,_caa ,_fd ,_fb ,_ge ,_ddf float64 )[]_ab .Point {_cf :=(_b .Hypot (_fd -_ba ,_fb -_caa )+_b .Hypot (_ge -_fd ,_ddf -_fb ));
_abg :=int (_cf +0.5);if _abg < 4{_abg =4;};_bd :=float64 (_abg )-1;_ff :=make ([]_ab .Point ,_abg );for _be :=0;_be < _abg ;_be ++{_dg :=float64 (_be )/_bd ;_cbe ,_fa :=_ea (_ba ,_caa ,_fd ,_fb ,_ge ,_ddf ,_dg );_ff [_be ]=_ab .NewPoint (_cbe ,_fa );};
return _ff ;};func (_bcg *Context )ClearPath (){_bcg ._ecb .Clear ();_bcg ._ed .Clear ();_bcg ._ac =false };func _edab (_cca string )(_bbbc ,_bcde ,_efed ,_fba int ){_cca =_a .TrimPrefix (_cca ,"\u0023");_fba =255;if len (_cca )==3{_def :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";
_d .Sscanf (_cca ,_def ,&_bbbc ,&_bcde ,&_efed );_bbbc |=_bbbc <<4;_bcde |=_bcde <<4;_efed |=_efed <<4;};if len (_cca )==6{_bccf :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_d .Sscanf (_cca ,_bccf ,&_bbbc ,&_bcde ,&_efed );};
if len (_cca )==8{_eee :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_d .Sscanf (_cca ,_eee ,&_bbbc ,&_bcde ,&_efed ,&_fba );};return ;};func (_bda *Context )SetRGBA (r ,g ,b ,a float64 ){_bda ._cag =_c .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_bda .setFillAndStrokeColor (_bda ._cag );};func (_eaec *Context )MeasureString (s string ,face _dd .Face )(_bacf ,_fac float64 ){_ggc :=&_dd .Drawer {Face :face };_afae :=_ggc .MeasureString (s );return float64 (_afae >>6),_eaec ._aea .Tf .Size ;};func (_bbf *Context )SetRGB (r ,g ,b float64 ){_bbf .SetRGBA (r ,g ,b ,1)};
func (_aaaa *radialGradient )ColorAt (x ,y int )_c .Color {if len (_aaaa ._cbeg )==0{return _c .Transparent ;};_agaf ,_bgd :=float64 (x )+0.5-_aaaa ._bfa ._acef ,float64 (y )+0.5-_aaaa ._bfa ._eabe ;_aac :=_gca (_agaf ,_bgd ,_aaaa ._bfa ._cegd ,_aaaa ._cccg ._acef ,_aaaa ._cccg ._eabe ,_aaaa ._cccg ._cegd );
_cgcg :=_gca (_agaf ,_bgd ,-_aaaa ._bfa ._cegd ,_agaf ,_bgd ,_aaaa ._bfa ._cegd );if _aaaa ._dca ==0{if _aac ==0{return _c .Transparent ;};_dacd :=0.5*_cgcg /_aac ;if _dacd *_aaaa ._cccg ._cegd >=_aaaa ._ece {return _edgg (_dacd ,_aaaa ._cbeg );};return _c .Transparent ;
};_bfec :=_gca (_aac ,_aaaa ._dca ,0,_aac ,-_cgcg ,0);if _bfec >=0{_fgb :=_b .Sqrt (_bfec );_acde :=(_aac +_fgb )*_aaaa ._cce ;_ffa :=(_aac -_fgb )*_aaaa ._cce ;if _acde *_aaaa ._cccg ._cegd >=_aaaa ._ece {return _edgg (_acde ,_aaaa ._cbeg );}else if _ffa *_aaaa ._cccg ._cegd >=_aaaa ._ece {return _edgg (_ffa ,_aaaa ._cbeg );
};};return _c .Transparent ;};func (_fbda *Context )StrokePreserve (){var _gag _ce .Painter ;if _fbda ._eff ==nil {if _acc ,_bea :=_fbda ._daa .(*solidPattern );_bea {_efeb :=_ce .NewRGBAPainter (_fbda ._dfb );_efeb .SetColor (_acc ._cga );_gag =_efeb ;
};};if _gag ==nil {_gag =_ccba (_fbda ._dfb ,_fbda ._eff ,_fbda ._daa );};_fbda .stroke (_gag );};func _eeb (_gdc ,_cbaa _c .Color ,_ggd float64 )_c .Color {_beg ,_bbfb ,_gdg ,_eagg :=_gdc .RGBA ();_ebbg ,_afcc ,_cggb ,_edca :=_cbaa .RGBA ();return _c .RGBA {_bafc (_beg ,_ebbg ,_ggd ),_bafc (_bbfb ,_afcc ,_ggd ),_bafc (_gdg ,_cggb ,_ggd ),_bafc (_eagg ,_edca ,_ggd )};
};func (_faa *Context )DrawImageAnchored (im _de .Image ,x ,y int ,ax ,ay float64 ){_efeba :=im .Bounds ().Size ();x -=int (ax *float64 (_efeba .X ));y -=int (ay *float64 (_efeba .Y ));_acd :=_dab .BiLinear ;_bdc :=_faa ._eed .Clone ().Translate (float64 (x ),float64 (y ));
_gcb :=_e .Aff3 {_bdc [0],_bdc [3],_bdc [6],_bdc [1],_bdc [4],_bdc [7]};if _faa ._eff ==nil {_acd .Transform (_faa ._dfb ,_gcb ,im ,im .Bounds (),_dab .Over ,nil );}else {_acd .Transform (_faa ._dfb ,_gcb ,im ,im .Bounds (),_dab .Over ,&_dab .Options {DstMask :_faa ._eff ,DstMaskP :_de .Point {}});
};};func (_dae *Context )Shear (x ,y float64 ){_dae ._eed .Shear (x ,y )};func _geca (_fgdb _ce .Path ,_baff []float64 ,_aead float64 )_ce .Path {return _bcef (_cefd (_eaf (_fgdb ),_baff ,_aead ));};func (_egc *Context )DrawCircle (x ,y ,r float64 ){_egc .NewSubPath ();
_egc .DrawEllipticalArc (x ,y ,r ,r ,0,2*_b .Pi );_egc .ClosePath ();};func (_dada *Context )Image ()_de .Image {return _dada ._dfb };func (_aga *Context )InvertMask (){if _aga ._eff ==nil {_aga ._eff =_de .NewAlpha (_aga ._dfb .Bounds ());}else {for _bac ,_gagc :=range _aga ._eff .Pix {_aga ._eff .Pix [_bac ]=255-_gagc ;
};};};func (_gga *Context )FillPreserve (){var _dcgd _ce .Painter ;if _gga ._eff ==nil {if _gda ,_bef :=_gga ._bba .(*solidPattern );_bef {_dac :=_ce .NewRGBAPainter (_gga ._dfb );_dac .SetColor (_gda ._cga );_dcgd =_dac ;};};if _dcgd ==nil {_dcgd =_ccba (_gga ._dfb ,_gga ._eff ,_gga ._bba );
};_gga .fill (_dcgd );};type patternPainter struct{_cfbc *_de .RGBA ;_gcff *_de .Alpha ;_aad _bf .Pattern ;};func _ea (_gc ,_abe ,_ca ,_aaa ,_cc ,_dee ,_cd float64 )(_cb ,_ee float64 ){_bc :=1-_cd ;_aba :=_bc *_bc ;_dad :=2*_bc *_cd ;_dc :=_cd *_cd ;_cb =_aba *_gc +_dad *_ca +_dc *_cc ;
_ee =_aba *_abe +_dad *_aaa +_dc *_dee ;return ;};func (_bbfe *linearGradient )AddColorStop (offset float64 ,color _c .Color ){_bbfe ._gbcf =append (_bbfe ._gbcf ,stop {_bfe :offset ,_gafd :color });_bg .Sort (_bbfe ._gbcf );};type solidPattern struct{_cga _c .Color };
func (_gbe *Context )Clip (){_gbe .ClipPreserve ();_gbe .ClearPath ()};func (_gaff *solidPattern )ColorAt (x ,y int )_c .Color {return _gaff ._cga };func (_bga *Context )setFillAndStrokeColor (_ag _c .Color ){_bga ._cag =_ag ;_bga ._bba =_ecec (_ag );_bga ._daa =_ecec (_ag );
};func (_fced *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_fced .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );};type radialGradient struct{_bfa ,_gfa ,_cccg circle ;_dca ,_cce float64 ;_ece float64 ;_cbeg stops ;};func _bed (_afa ,_ef ,_eab ,_ae ,_gd ,_gb ,_gfd ,_gbb float64 )[]_ab .Point {_ec :=(_b .Hypot (_eab -_afa ,_ae -_ef )+_b .Hypot (_gd -_eab ,_gb -_ae )+_b .Hypot (_gfd -_gd ,_gbb -_gb ));
_eag :=int (_ec +0.5);if _eag < 4{_eag =4;};_fbd :=float64 (_eag )-1;_aaf :=make ([]_ab .Point ,_eag );for _bff :=0;_bff < _eag ;_bff ++{_fbf :=float64 (_bff )/_fbd ;_fg ,_dbeb :=_ddg (_afa ,_ef ,_eab ,_ae ,_gd ,_gb ,_gfd ,_gbb ,_fbf );_aaf [_bff ]=_ab .NewPoint (_fg ,_dbeb );
};return _aaf ;};func (_egce *Context )SetMatrix (m _ab .Matrix ){_egce ._eed =m };type Context struct{_df int ;_gbbe int ;_bcb *_ce .Rasterizer ;_dfb *_de .RGBA ;_eff *_de .Alpha ;_cag _c .Color ;_bba _bf .Pattern ;_daa _bf .Pattern ;_ecb _ce .Path ;_ed _ce .Path ;
_fga _ab .Point ;_ga _ab .Point ;_ac bool ;_cea []float64 ;_gaf float64 ;_ddga float64 ;_fgf _bf .LineCap ;_gbgd _bf .LineJoin ;_eae _bf .FillRule ;_eed _ab .Matrix ;_aea _bf .TextState ;_cge []*Context ;};func (_dcdg *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_faf ,_bece ,_cgc ,_dfd :=x ,x +r ,x +w -r ,x +w ;
_adfe ,_acg ,_cfdf ,_dacc :=y ,y +r ,y +h -r ,y +h ;_dcdg .NewSubPath ();_dcdg .MoveTo (_bece ,_adfe );_dcdg .LineTo (_cgc ,_adfe );_dcdg .DrawArc (_cgc ,_acg ,r ,_gfbf (270),_gfbf (360));_dcdg .LineTo (_dfd ,_cfdf );_dcdg .DrawArc (_cgc ,_cfdf ,r ,_gfbf (0),_gfbf (90));
_dcdg .LineTo (_bece ,_dacc );_dcdg .DrawArc (_bece ,_cfdf ,r ,_gfbf (90),_gfbf (180));_dcdg .LineTo (_faf ,_acg );_dcdg .DrawArc (_bece ,_acg ,r ,_gfbf (180),_gfbf (270));_dcdg .ClosePath ();};func (_gdb *Context )SetHexColor (x string ){_bcc ,_efa ,_aebe ,_ggea :=_edab (x );
_gdb .SetRGBA255 (_bcc ,_efa ,_aebe ,_ggea );};func (_eaeb *Context )Scale (x ,y float64 ){_eaeb ._eed =_eaeb ._eed .Scale (x ,y )};func _eaf (_fca _ce .Path )[][]_ab .Point {var _aedd [][]_ab .Point ;var _abf []_ab .Point ;var _gaga ,_gfg float64 ;for _fed :=0;
_fed < len (_fca );{switch _fca [_fed ]{case 0:if len (_abf )> 0{_aedd =append (_aedd ,_abf );_abf =nil ;};_cebd :=_dag (_fca [_fed +1]);_bafg :=_dag (_fca [_fed +2]);_abf =append (_abf ,_ab .NewPoint (_cebd ,_bafg ));_gaga ,_gfg =_cebd ,_bafg ;_fed +=4;
case 1:_dgd :=_dag (_fca [_fed +1]);_eec :=_dag (_fca [_fed +2]);_abf =append (_abf ,_ab .NewPoint (_dgd ,_eec ));_gaga ,_gfg =_dgd ,_eec ;_fed +=4;case 2:_eac :=_dag (_fca [_fed +1]);_bae :=_dag (_fca [_fed +2]);_abcc :=_dag (_fca [_fed +3]);_ddfc :=_dag (_fca [_fed +4]);
_acab :=_f (_gaga ,_gfg ,_eac ,_bae ,_abcc ,_ddfc );_abf =append (_abf ,_acab ...);_gaga ,_gfg =_abcc ,_ddfc ;_fed +=6;case 3:_daac :=_dag (_fca [_fed +1]);_gfed :=_dag (_fca [_fed +2]);_aeba :=_dag (_fca [_fed +3]);_gcgf :=_dag (_fca [_fed +4]);_cacf :=_dag (_fca [_fed +5]);
_fgd :=_dag (_fca [_fed +6]);_cggf :=_bed (_gaga ,_gfg ,_daac ,_gfed ,_aeba ,_gcgf ,_cacf ,_fgd );_abf =append (_abf ,_cggf ...);_gaga ,_gfg =_cacf ,_fgd ;_fed +=8;default:_cg .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_fca );
return _aedd ;};};if len (_abf )> 0{_aedd =append (_aedd ,_abf );};return _aedd ;};func NewContextForImage (im _de .Image )*Context {return NewContextForRGBA (_gbgc (im ))};func (_gge *Context )SetLineWidth (lineWidth float64 ){_gge ._ddga =lineWidth };
func _ddg (_eg ,_fc ,_ceg ,_cfd ,_bb ,_gfe ,_cdc ,_db ,_bdf float64 )(_gg ,_af float64 ){_bee :=1-_bdf ;_dcg :=_bee *_bee *_bee ;_dbe :=3*_bee *_bee *_bdf ;_ddd :=3*_bee *_bdf *_bdf ;_eb :=_bdf *_bdf *_bdf ;_gg =_dcg *_eg +_dbe *_ceg +_ddd *_bb +_eb *_cdc ;
_af =_dcg *_fc +_dbe *_cfd +_ddd *_gfe +_eb *_db ;return ;};func (_dcfc *Context )Transform (x ,y float64 )(_gfdd ,_ebb float64 ){return _dcfc ._eed .Transform (x ,y );};func (_bbfc *Context )FillPattern ()_bf .Pattern {return _bbfc ._bba };func (_aff *Context )Height ()int {return _aff ._gbbe };
func (_adf *Context )SetDash (dashes ...float64 ){_adf ._cea =dashes };type stops []stop ;func (_fag *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_fag .MoveTo (x1 ,y1 );_fag .LineTo (x2 ,y2 )};const (_cff repeatOp =iota ;_gbfd ;_gbda ;_fbb ;);func _fgde (_bdaa float64 )_gf .Int26_6 {return _gf .Int26_6 (_bdaa *64)};
func _cbae (_ffgc _de .Image ,_beb repeatOp )_bf .Pattern {return &surfacePattern {_agg :_ffgc ,_adb :_beb };};func (_gcd *Context )NewSubPath (){if _gcd ._ac {_gcd ._ed .Add1 (_begb (_gcd ._fga ));};_gcd ._ac =false ;};func _begb (_ffgd _ab .Point )_gf .Point26_6 {return _gf .Point26_6 {X :_fgde (_ffgd .X ),Y :_fgde (_ffgd .Y )}};
