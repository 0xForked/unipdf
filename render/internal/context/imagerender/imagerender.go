//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_cf "errors";_b "fmt";_be "github.com/golang/freetype/raster";_fe "github.com/unidoc/unipdf/v3/common";_f "github.com/unidoc/unipdf/v3/internal/transform";_d "github.com/unidoc/unipdf/v3/render/internal/context";_ab "golang.org/x/image/draw";
_ea "golang.org/x/image/font";_fb "golang.org/x/image/math/f64";_fg "golang.org/x/image/math/fixed";_ad "image";_e "image/color";_ag "image/draw";_c "math";_gd "sort";_g "strings";);func (_bcf *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_bcf .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );
};func (_dad stops )Less (i ,j int )bool {return _dad [i ]._fbae < _dad [j ]._fbae };func (_ede *Context )Height ()int {return _ede ._dga };func _cde (_ebbe [][]_f .Point )_be .Path {var _gbg _be .Path ;for _ ,_gdbf :=range _ebbe {var _gbb _fg .Point26_6 ;
for _fdg ,_cgeg :=range _gdbf {_fgb :=_gbba (_cgeg );if _fdg ==0{_gbg .Start (_fgb );}else {_efcd :=_fgb .X -_gbb .X ;_egfde :=_fgb .Y -_gbb .Y ;if _efcd < 0{_efcd =-_efcd ;};if _egfde < 0{_egfde =-_egfde ;};if _efcd +_egfde > 8{_gbg .Add1 (_fgb );};};
_gbb =_fgb ;};};return _gbg ;};func (_ccd *Context )DrawCircle (x ,y ,r float64 ){_ccd .NewSubPath ();_ccd .DrawEllipticalArc (x ,y ,r ,r ,0,2*_c .Pi );_ccd .ClosePath ();};func (_dba *Context )ClearPath (){_dba ._egg .Clear ();_dba ._af .Clear ();_dba ._ecb =false };
func _bbgb (_agc float64 )float64 {return _agc *_c .Pi /180};func (_gad *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_gad .NewSubPath ();_gad .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_c .Pi );_gad .ClosePath ();};func (_fgfc *surfacePattern )ColorAt (x ,y int )_e .Color {_bbdc :=_fgfc ._dfbg .Bounds ();
switch _fgfc ._cec {case _egaec :if y >=_bbdc .Dy (){return _e .Transparent ;};case _cdde :if x >=_bbdc .Dx (){return _e .Transparent ;};case _fgg :if x >=_bbdc .Dx ()||y >=_bbdc .Dy (){return _e .Transparent ;};};x =x %_bbdc .Dx ()+_bbdc .Min .X ;y =y %_bbdc .Dy ()+_bbdc .Min .Y ;
return _fgfc ._dfbg .At (x ,y );};func (_efcf *Context )SetLineWidth (lineWidth float64 ){_efcf ._badd =lineWidth };func (_fbf *Context )SetRGBA (r ,g ,b ,a float64 ){_fbf ._db =_e .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_fbf .setFillAndStrokeColor (_fbf ._db );
};func (_dcdf *Context )ClosePath (){if _dcdf ._ecb {_ffb :=_gbba (_dcdf ._aad );_dcdf ._egg .Add1 (_ffb );_dcdf ._af .Add1 (_ffb );_dcdf ._ege =_dcdf ._aad ;};};func _ddge (_ceg _be .Path )[][]_f .Point {var _ggeg [][]_f .Point ;var _ffa []_f .Point ;
var _eefe ,_cbdf float64 ;for _gcg :=0;_gcg < len (_ceg );{switch _ceg [_gcg ]{case 0:if len (_ffa )> 0{_ggeg =append (_ggeg ,_ffa );_ffa =nil ;};_gcfe :=_bde (_ceg [_gcg +1]);_ebe :=_bde (_ceg [_gcg +2]);_ffa =append (_ffa ,_f .NewPoint (_gcfe ,_ebe ));
_eefe ,_cbdf =_gcfe ,_ebe ;_gcg +=4;case 1:_fdfb :=_bde (_ceg [_gcg +1]);_ebbb :=_bde (_ceg [_gcg +2]);_ffa =append (_ffa ,_f .NewPoint (_fdfb ,_ebbb ));_eefe ,_cbdf =_fdfb ,_ebbb ;_gcg +=4;case 2:_ecead :=_bde (_ceg [_gcg +1]);_edgg :=_bde (_ceg [_gcg +2]);
_bcc :=_bde (_ceg [_gcg +3]);_dgb :=_bde (_ceg [_gcg +4]);_bddg :=_ee (_eefe ,_cbdf ,_ecead ,_edgg ,_bcc ,_dgb );_ffa =append (_ffa ,_bddg ...);_eefe ,_cbdf =_bcc ,_dgb ;_gcg +=6;case 3:_gage :=_bde (_ceg [_gcg +1]);_gee :=_bde (_ceg [_gcg +2]);_abed :=_bde (_ceg [_gcg +3]);
_abcb :=_bde (_ceg [_gcg +4]);_ega :=_bde (_ceg [_gcg +5]);_gab :=_bde (_ceg [_gcg +6]);_gfg :=_bc (_eefe ,_cbdf ,_gage ,_gee ,_abed ,_abcb ,_ega ,_gab );_ffa =append (_ffa ,_gfg ...);_eefe ,_cbdf =_ega ,_gab ;_gcg +=8;default:_fe .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_ceg );
return _ggeg ;};};if len (_ffa )> 0{_ggeg =append (_ggeg ,_ffa );};return _ggeg ;};func (_gf *Context )SetLineCap (lineCap _d .LineCap ){_gf ._gbd =lineCap };func (_cdb *Context )SetColor (c _e .Color ){_cdb .setFillAndStrokeColor (c )};func (_fac *Context )DrawString (s string ,face _ea .Face ,x ,y float64 ){_fac .DrawStringAnchored (s ,face ,x ,y ,0,0);
};func (_eceag *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_eceag .Translate (x ,y );_eceag .Scale (sx ,sy );_eceag .Translate (-x ,-y );};func (_faebf *Context )Shear (x ,y float64 ){_faebf ._ggf .Shear (x ,y )};func (_abc *Context )DrawRectangle (x ,y ,w ,h float64 ){_abc .NewSubPath ();
_abc .MoveTo (x ,y );_abc .LineTo (x +w ,y );_abc .LineTo (x +w ,y +h );_abc .LineTo (x ,y +h );_abc .ClosePath ();};func (_gff *Context )SetFillRGBA (r ,g ,b ,a float64 ){_ggc :=_e .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_gff ._db =_ggc ;
_gff ._bac =_adgc (_ggc );};func (_aaa *Context )InvertMask (){if _aaa ._bcd ==nil {_aaa ._bcd =_ad .NewAlpha (_aaa ._dgd .Bounds ());}else {for _fega ,_bae :=range _aaa ._bcd .Pix {_aaa ._bcd .Pix [_fega ]=255-_bae ;};};};func _egdc (_fccc ,_eagf ,_gae ,_ffdf ,_abb ,_bdfb float64 )float64 {return _fccc *_ffdf +_eagf *_abb +_gae *_bdfb ;
};const (_cbca repeatOp =iota ;_egaec ;_cdde ;_fgg ;);func (_faa *Context )ResetClip (){_faa ._bcd =nil };func (_ffdc stops )Len ()int {return len (_ffdc )};func _ddg (_gagg ,_begg _e .Color ,_cee float64 )_e .Color {_bbff ,_bdc ,_cgff ,_cgbg :=_gagg .RGBA ();
_ebf ,_bfb ,_aaf ,_efdg :=_begg .RGBA ();return _e .RGBA {_cgaf (_bbff ,_ebf ,_cee ),_cgaf (_bdc ,_bfb ,_cee ),_cgaf (_cgff ,_aaf ,_cee ),_cgaf (_cgbg ,_efdg ,_cee )};};func _cce (_fdf ,_cfbg ,_bca ,_fbde ,_gbdbd ,_ffcb float64 )_d .Gradient {_eaea :=circle {_fdf ,_cfbg ,_bca };
_daa :=circle {_fbde ,_gbdbd ,_ffcb };_bbag :=circle {_fbde -_fdf ,_gbdbd -_cfbg ,_ffcb -_bca };_gbde :=_egdc (_bbag ._aegg ,_bbag ._ddcc ,-_bbag ._eca ,_bbag ._aegg ,_bbag ._ddcc ,_bbag ._eca );var _bbfe float64 ;if _gbde !=0{_bbfe =1.0/_gbde ;};_eegf :=-_eaea ._eca ;
_fdcb :=&radialGradient {_gdda :_eaea ,_fgf :_daa ,_ddd :_bbag ,_bgg :_gbde ,_aac :_bbfe ,_ggea :_eegf };return _fdcb ;};func (_acb *Context )StrokePattern ()_d .Pattern {return _acb ._dd };func _adgc (_gcc _e .Color )_d .Pattern {return &solidPattern {_ecda :_gcc }};
func (_cga *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_cga ._ecb {_cga .MoveTo (x1 ,y1 );};_dfd ,_fae :=_cga ._ege .X ,_cga ._ege .Y ;x1 ,y1 =_cga .Transform (x1 ,y1 );x2 ,y2 =_cga .Transform (x2 ,y2 );x3 ,y3 =_cga .Transform (x3 ,y3 );_cae :=_bc (_dfd ,_fae ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );
_bbc :=_gbba (_cga ._ege );for _ ,_fbg :=range _cae [1:]{_fbc :=_gbba (_fbg );if _fbc ==_bbc {continue ;};_bbc =_fbc ;_cga ._egg .Add1 (_fbc );_cga ._af .Add1 (_fbc );_cga ._ege =_fbg ;};};func (_bfa *Context )SetMask (mask *_ad .Alpha )error {if mask .Bounds ().Size ()!=_bfa ._dgd .Bounds ().Size (){return _cf .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_bfa ._bcd =mask ;return nil ;};func (_bbfc *Context )MoveTo (x ,y float64 ){if _bbfc ._ecb {_bbfc ._af .Add1 (_gbba (_bbfc ._aad ));};x ,y =_bbfc .Transform (x ,y );_ccb :=_f .NewPoint (x ,y );_aed :=_gbba (_ccb );_bbfc ._egg .Start (_aed );_bbfc ._af .Start (_aed );
_bbfc ._aad =_ccb ;_bbfc ._ege =_ccb ;_bbfc ._ecb =true ;};func (_baf *Context )Translate (x ,y float64 ){_baf ._ggf =_baf ._ggf .Translate (x ,y )};func _fcde (_egcfg float64 )_fg .Int26_6 {return _fg .Int26_6 (_egcfg *64)};func (_dcg *Context )Fill (){_dcg .FillPreserve ();
_dcg .ClearPath ()};func (_gca *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_ggaf :=_e .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_gca ._dd =_adgc (_ggaf );};func (_dcaa *patternPainter )Paint (ss []_be .Span ,done bool ){_ggd :=_dcaa ._dfg .Bounds ();
for _ ,_cbad :=range ss {if _cbad .Y < _ggd .Min .Y {continue ;};if _cbad .Y >=_ggd .Max .Y {return ;};if _cbad .X0 < _ggd .Min .X {_cbad .X0 =_ggd .Min .X ;};if _cbad .X1 > _ggd .Max .X {_cbad .X1 =_ggd .Max .X ;};if _cbad .X0 >=_cbad .X1 {continue ;};
const _ccbd =1<<16-1;_beag :=_cbad .Y -_dcaa ._dfg .Rect .Min .Y ;_eed :=_cbad .X0 -_dcaa ._dfg .Rect .Min .X ;_cfce :=(_cbad .Y -_dcaa ._dfg .Rect .Min .Y )*_dcaa ._dfg .Stride +(_cbad .X0 -_dcaa ._dfg .Rect .Min .X )*4;_daab :=_cfce +(_cbad .X1 -_cbad .X0 )*4;
for _adgd ,_geac :=_cfce ,_eed ;_adgd < _daab ;_adgd ,_geac =_adgd +4,_geac +1{_gabb :=_cbad .Alpha ;if _dcaa ._dgf !=nil {_gabb =_gabb *uint32 (_dcaa ._dgf .AlphaAt (_geac ,_beag ).A )/255;if _gabb ==0{continue ;};};_dcb :=_dcaa ._aea .ColorAt (_geac ,_beag );
_aab ,_fbdg ,_gec ,_eacb :=_dcb .RGBA ();_dbf :=uint32 (_dcaa ._dfg .Pix [_adgd +0]);_dgab :=uint32 (_dcaa ._dfg .Pix [_adgd +1]);_fdae :=uint32 (_dcaa ._dfg .Pix [_adgd +2]);_bbed :=uint32 (_dcaa ._dfg .Pix [_adgd +3]);_ecae :=(_ccbd -(_eacb *_gabb /_ccbd ))*0x101;
_dcaa ._dfg .Pix [_adgd +0]=uint8 ((_dbf *_ecae +_aab *_gabb )/_ccbd >>8);_dcaa ._dfg .Pix [_adgd +1]=uint8 ((_dgab *_ecae +_fbdg *_gabb )/_ccbd >>8);_dcaa ._dfg .Pix [_adgd +2]=uint8 ((_fdae *_ecae +_gec *_gabb )/_ccbd >>8);_dcaa ._dfg .Pix [_adgd +3]=uint8 ((_bbed *_ecae +_eacb *_gabb )/_ccbd >>8);
};};};func (_ggg *Context )DrawStringAnchored (s string ,face _ea .Face ,x ,y ,ax ,ay float64 ){_cdfc ,_cag :=_ggg .MeasureString (s ,face );_ggg .drawString (s ,face ,x -ax *_cdfc ,y +ay *_cag );};func (_ace *Context )SetDash (dashes ...float64 ){_ace ._fc =dashes };
func (_fda *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_ead ,_faeb ,_gfa ,_gcab :=x ,x +r ,x +w -r ,x +w ;_dbbg ,_gcb ,_fff ,_eb :=y ,y +r ,y +h -r ,y +h ;_fda .NewSubPath ();_fda .MoveTo (_faeb ,_dbbg );_fda .LineTo (_gfa ,_dbbg );_fda .DrawArc (_gfa ,_gcb ,r ,_bbgb (270),_bbgb (360));
_fda .LineTo (_gcab ,_fff );_fda .DrawArc (_gfa ,_fff ,r ,_bbgb (0),_bbgb (90));_fda .LineTo (_faeb ,_eb );_fda .DrawArc (_faeb ,_fff ,r ,_bbgb (90),_bbgb (180));_fda .LineTo (_ead ,_gcb );_fda .DrawArc (_faeb ,_gcb ,r ,_bbgb (180),_bbgb (270));_fda .ClosePath ();
};func (_efca *Context )RotateAbout (angle ,x ,y float64 ){_efca .Translate (x ,y );_efca .Rotate (angle );_efca .Translate (-x ,-y );};func (_agf *Context )SetDashOffset (offset float64 ){_agf ._ddc =offset };func (_cfaf *Context )Transform (x ,y float64 )(_efdb ,_cgd float64 ){return _cfaf ._ggf .Transform (x ,y );
};func (_cfb *Context )Width ()int {return _cfb ._fbd };func (_aeg *Context )SetRGBA255 (r ,g ,b ,a int ){_aeg ._db =_e .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};_aeg .setFillAndStrokeColor (_aeg ._db );};func (_bacg stops )Swap (i ,j int ){_bacg [i ],_bacg [j ]=_bacg [j ],_bacg [i ]};
func (_gebf *radialGradient )ColorAt (x ,y int )_e .Color {if len (_gebf ._bdd )==0{return _e .Transparent ;};_adgb ,_fgfd :=float64 (x )+0.5-_gebf ._gdda ._aegg ,float64 (y )+0.5-_gebf ._gdda ._ddcc ;_dae :=_egdc (_adgb ,_fgfd ,_gebf ._gdda ._eca ,_gebf ._ddd ._aegg ,_gebf ._ddd ._ddcc ,_gebf ._ddd ._eca );
_geg :=_egdc (_adgb ,_fgfd ,-_gebf ._gdda ._eca ,_adgb ,_fgfd ,_gebf ._gdda ._eca );if _gebf ._bgg ==0{if _dae ==0{return _e .Transparent ;};_ebbf :=0.5*_geg /_dae ;if _ebbf *_gebf ._ddd ._eca >=_gebf ._ggea {return _ddfg (_ebbf ,_gebf ._bdd );};return _e .Transparent ;
};_cgdc :=_egdc (_dae ,_gebf ._bgg ,0,_dae ,-_geg ,0);if _cgdc >=0{_ccc :=_c .Sqrt (_cgdc );_eace :=(_dae +_ccc )*_gebf ._aac ;_gcfa :=(_dae -_ccc )*_gebf ._aac ;if _eace *_gebf ._ddd ._eca >=_gebf ._ggea {return _ddfg (_eace ,_gebf ._bdd );}else if _gcfa *_gebf ._ddd ._eca >=_gebf ._ggea {return _ddfg (_gcfa ,_gebf ._bdd );
};};return _e .Transparent ;};type Context struct{_fbd int ;_dga int ;_ga *_be .Rasterizer ;_dgd *_ad .RGBA ;_bcd *_ad .Alpha ;_db _e .Color ;_bac _d .Pattern ;_dd _d .Pattern ;_egg _be .Path ;_af _be .Path ;_aad _f .Point ;_ege _f .Point ;_ecb bool ;_fc []float64 ;
_ddc float64 ;_badd float64 ;_gbd _d .LineCap ;_edb _d .LineJoin ;_dfe _d .FillRule ;_ggf _f .Matrix ;_cdd _d .TextState ;_ecg []*Context ;};func (_dc *Context )SetLineJoin (lineJoin _d .LineJoin ){_dc ._edb =lineJoin };func (_febe *Context )ClipPreserve (){_aegc :=_ad .NewAlpha (_ad .Rect (0,0,_febe ._fbd ,_febe ._dga ));
_dbc :=_be .NewAlphaOverPainter (_aegc );_febe .fill (_dbc );if _febe ._bcd ==nil {_febe ._bcd =_aegc ;}else {_cfc :=_ad .NewAlpha (_ad .Rect (0,0,_febe ._fbd ,_febe ._dga ));_ab .DrawMask (_cfc ,_cfc .Bounds (),_aegc ,_ad .Point {},_febe ._bcd ,_ad .Point {},_ab .Over );
_febe ._bcd =_cfc ;};};var (_fgc =_adgc (_e .White );_bda =_adgc (_e .Black ););func (_bba *Context )SetHexColor (x string ){_gbf ,_badb ,_dee ,_gac :=_fce (x );_bba .SetRGBA255 (_gbf ,_badb ,_dee ,_gac );};func (_cca *Context )FillPreserve (){var _ecea _be .Painter ;
if _cca ._bcd ==nil {if _feg ,_cgg :=_cca ._bac .(*solidPattern );_cgg {_fag :=_be .NewRGBAPainter (_cca ._dgd );_fag .SetColor (_feg ._ecda );_ecea =_fag ;};};if _ecea ==nil {_ecea =_afgd (_cca ._dgd ,_cca ._bcd ,_cca ._bac );};_cca .fill (_ecea );};func _dcfe (_cgfg _ad .Image )*_ad .RGBA {_ccea :=_cgfg .Bounds ();
_eec :=_ad .NewRGBA (_ccea );_ag .Draw (_eec ,_ccea ,_cgfg ,_ccea .Min ,_ag .Src );return _eec ;};func (_gcd *Context )drawRegularPolygon (_cddb int ,_add ,_eae ,_gfed ,_fdcc float64 ){_eefc :=2*_c .Pi /float64 (_cddb );_fdcc -=_c .Pi /2;if _cddb %2==0{_fdcc +=_eefc /2;
};_gcd .NewSubPath ();for _ggaa :=0;_ggaa < _cddb ;_ggaa ++{_egf :=_fdcc +_eefc *float64 (_ggaa );_gcd .LineTo (_add +_gfed *_c .Cos (_egf ),_eae +_gfed *_c .Sin (_egf ));};_gcd .ClosePath ();};func (_cdc *Context )DrawPoint (x ,y ,r float64 ){_cdc .Push ();
_fba ,_cfe :=_cdc .Transform (x ,y );_cdc .Identity ();_cdc .DrawCircle (_fba ,_cfe ,r );_cdc .Pop ();};func _aceg (_caaa ,_cdbe ,_egcf ,_deed float64 )_d .Gradient {_aedc :=&linearGradient {_bcb :_caaa ,_dbaa :_cdbe ,_aeba :_egcf ,_dada :_deed };return _aedc ;
};func (_dcd *Context )SetRGB255 (r ,g ,b int ){_dcd .SetRGBA255 (r ,g ,b ,255)};func (_afa *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_afa ._ecb {_afa .MoveTo (x1 ,y1 );};x1 ,y1 =_afa .Transform (x1 ,y1 );x2 ,y2 =_afa .Transform (x2 ,y2 );_ecd :=_f .NewPoint (x1 ,y1 );
_gfe :=_f .NewPoint (x2 ,y2 );_egde :=_gbba (_ecd );_bab :=_gbba (_gfe );_afa ._egg .Add2 (_egde ,_bab );_afa ._af .Add2 (_egde ,_bab );_afa ._ege =_gfe ;};func (_bbf *Context )setFillAndStrokeColor (_dac _e .Color ){_bbf ._db =_dac ;_bbf ._bac =_adgc (_dac );
_bbf ._dd =_adgc (_dac );};type radialGradient struct{_gdda ,_fgf ,_ddd circle ;_bgg ,_aac float64 ;_ggea float64 ;_bdd stops ;};func (_eagg *Context )SetStrokeStyle (pattern _d .Pattern ){_eagg ._dd =pattern };func (_dgg *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_dgg .MoveTo (x1 ,y1 );
_dgg .LineTo (x2 ,y2 )};func (_ecbd *radialGradient )AddColorStop (offset float64 ,color _e .Color ){_ecbd ._bdd =append (_ecbd ._bdd ,stop {_fbae :offset ,_gbfd :color });_gd .Sort (_ecbd ._bdd );};func (_bdf *Context )DrawImage (im _ad .Image ,x ,y int ){_bdf .DrawImageAnchored (im ,x ,y ,0,0)};
func (_fdcg *Context )Scale (x ,y float64 ){_fdcg ._ggf =_fdcg ._ggf .Scale (x ,y )};func _ee (_cg ,_ae ,_ed ,_cd ,_cgc ,_eag float64 )[]_f .Point {_geb :=(_c .Hypot (_ed -_cg ,_cd -_ae )+_c .Hypot (_cgc -_ed ,_eag -_cd ));_ef :=int (_geb +0.5);if _ef < 4{_ef =4;
};_bd :=float64 (_ef )-1;_ca :=make ([]_f .Point ,_ef );for _gb :=0;_gb < _ef ;_gb ++{_ff :=float64 (_gb )/_bd ;_cb ,_cgb :=_fa (_cg ,_ae ,_ed ,_cd ,_cgc ,_eag ,_ff );_ca [_gb ]=_f .NewPoint (_cb ,_cgb );};return _ca ;};func (_aef *Context )fill (_egb _be .Painter ){_ece :=_aef ._af ;
if _aef ._ecb {_ece =make (_be .Path ,len (_aef ._af ));copy (_ece ,_aef ._af );_ece .Add1 (_gbba (_aef ._aad ));};_ce :=_aef ._ga ;_ce .UseNonZeroWinding =_aef ._dfe ==_d .FillRuleWinding ;_ce .Clear ();_ce .AddPath (_ece );_ce .Rasterize (_egb );};type patternPainter struct{_dfg *_ad .RGBA ;
_dgf *_ad .Alpha ;_aea _d .Pattern ;};func (_dfb *Context )AsMask ()*_ad .Alpha {_cdf :=_ad .NewAlpha (_dfb ._dgd .Bounds ());_ab .Draw (_cdf ,_dfb ._dgd .Bounds (),_dfb ._dgd ,_ad .Point {},_ab .Src );return _cdf ;};type circle struct{_aegg ,_ddcc ,_eca float64 };
func (_gaa *Context )Rotate (angle float64 ){_gaa ._ggf =_gaa ._ggf .Rotate (angle )};func (_ffbcf *solidPattern )ColorAt (x ,y int )_e .Color {return _ffbcf ._ecda };func (_egfg *Context )MeasureString (s string ,face _ea .Face )(_gadg ,_dag float64 ){_gge :=&_ea .Drawer {Face :face };
_efd :=_gge .MeasureString (s );return float64 (_efd >>6),_egfg ._cdd .Tf .Size ;};type stops []stop ;func _fce (_abg string )(_aebd ,_aefb ,_agce ,_dgcc int ){_abg =_g .TrimPrefix (_abg ,"\u0023");_dgcc =255;if len (_abg )==3{_bdgg :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";
_b .Sscanf (_abg ,_bdgg ,&_aebd ,&_aefb ,&_agce );_aebd |=_aebd <<4;_aefb |=_aefb <<4;_agce |=_agce <<4;};if len (_abg )==6{_afab :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_b .Sscanf (_abg ,_afab ,&_aebd ,&_aefb ,&_agce );
};if len (_abg )==8{_daac :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_b .Sscanf (_abg ,_daac ,&_aebd ,&_aefb ,&_agce ,&_dgcc );};return ;};func (_adaa *Context )Image ()_ad .Image {return _adaa ._dgd };func (_caa *Context )FillPattern ()_d .Pattern {return _caa ._bac };
func _fa (_ec ,_beb ,_bg ,_bb ,_cc ,_fd ,_dg float64 )(_adc ,_de float64 ){_ge :=1-_dg ;_feb :=_ge *_ge ;_ac :=2*_ge *_dg ;_eg :=_dg *_dg ;_adc =_feb *_ec +_ac *_bg +_eg *_cc ;_de =_feb *_beb +_ac *_bb +_eg *_fd ;return ;};func (_bfd *Context )joiner ()_be .Joiner {switch _bfd ._edb {case _d .LineJoinBevel :return _be .BevelJoiner ;
case _d .LineJoinRound :return _be .RoundJoiner ;};return nil ;};func (_efa *Context )Clear (){_bcdb :=_ad .NewUniform (_efa ._db );_ab .Draw (_efa ._dgd ,_efa ._dgd .Bounds (),_bcdb ,_ad .Point {},_ab .Src );};func (_gbe *Context )SetFillRule (fillRule _d .FillRule ){_gbe ._dfe =fillRule };
func _eab (_aeb ,_gg ,_egd ,_bgf ,_fdc ,_gdg ,_gdb ,_fed ,_ada float64 )(_da ,_aa float64 ){_ccf :=1-_ada ;_bef :=_ccf *_ccf *_ccf ;_efc :=3*_ccf *_ccf *_ada ;_bf :=3*_ccf *_ada *_ada ;_aec :=_ada *_ada *_ada ;_da =_bef *_aeb +_efc *_egd +_bf *_fdc +_aec *_gdb ;
_aa =_bef *_gg +_efc *_bgf +_bf *_gdg +_aec *_fed ;return ;};func (_gdd *Context )SetMatrix (m _f .Matrix ){_gdd ._ggf =m };func (_edg *linearGradient )ColorAt (x ,y int )_e .Color {if len (_edg ._ddcg )==0{return _e .Transparent ;};_fga ,_abcf :=float64 (x ),float64 (y );
_gfc ,_gcf ,_gddg ,_cbc :=_edg ._bcb ,_edg ._dbaa ,_edg ._aeba ,_edg ._dada ;_ffeb ,_fbe :=_gddg -_gfc ,_cbc -_gcf ;if _fbe ==0&&_ffeb !=0{return _ddfg ((_fga -_gfc )/_ffeb ,_edg ._ddcg );};if _ffeb ==0&&_fbe !=0{return _ddfg ((_abcf -_gcf )/_fbe ,_edg ._ddcg );
};_ffbc :=_ffeb *(_fga -_gfc )+_fbe *(_abcf -_gcf );if _ffbc < 0{return _edg ._ddcg [0]._gbfd ;};_ddf :=_c .Hypot (_ffeb ,_fbe );_abeb :=((_fga -_gfc )*-_fbe +(_abcf -_gcf )*_ffeb )/(_ddf *_ddf );_gea ,_bdae :=_gfc +_abeb *-_fbe ,_gcf +_abeb *_ffeb ;_bce :=_c .Hypot (_fga -_gea ,_abcf -_bdae )/_ddf ;
return _ddfg (_bce ,_edg ._ddcg );};func (_cdbc *Context )Pop (){_egge :=*_cdbc ;_dgc :=_cdbc ._ecg ;_afc :=_dgc [len (_dgc )-1];*_cdbc =*_afc ;_cdbc ._egg =_egge ._egg ;_cdbc ._af =_egge ._af ;_cdbc ._aad =_egge ._aad ;_cdbc ._ege =_egge ._ege ;_cdbc ._ecb =_egge ._ecb ;
};type surfacePattern struct{_dfbg _ad .Image ;_cec repeatOp ;};func (_bga *Context )SetRGB (r ,g ,b float64 ){_bga .SetRGBA (r ,g ,b ,1)};type stop struct{_fbae float64 ;_gbfd _e .Color ;};func _bc (_eeg ,_bdg ,_gc ,_gga ,_bfe ,_bgc ,_ffc ,_acd float64 )[]_f .Point {_fab :=(_c .Hypot (_gc -_eeg ,_gga -_bdg )+_c .Hypot (_bfe -_gc ,_bgc -_gga )+_c .Hypot (_ffc -_bfe ,_acd -_bgc ));
_befg :=int (_fab +0.5);if _befg < 4{_befg =4;};_ba :=float64 (_befg )-1;_cac :=make ([]_f .Point ,_befg );for _ged :=0;_ged < _befg ;_ged ++{_bad :=float64 (_ged )/_ba ;_ffca ,_df :=_eab (_eeg ,_bdg ,_gc ,_gga ,_bfe ,_bgc ,_ffc ,_acd ,_bad );_cac [_ged ]=_f .NewPoint (_ffca ,_df );
};return _cac ;};func _dce (_acea _ad .Image ,_gaf repeatOp )_d .Pattern {return &surfacePattern {_dfbg :_acea ,_cec :_gaf };};func (_fdd *Context )Identity (){_fdd ._ggf =_f .IdentityMatrix ()};func (_beba *Context )Push (){_efae :=*_beba ;_beba ._ecg =append (_beba ._ecg ,&_efae )};
func (_faf *Context )capper ()_be .Capper {switch _faf ._gbd {case _d .LineCapButt :return _be .ButtCapper ;case _d .LineCapRound :return _be .RoundCapper ;case _d .LineCapSquare :return _be .SquareCapper ;};return nil ;};func (_cff *Context )ShearAbout (sx ,sy ,x ,y float64 ){_cff .Translate (x ,y );
_cff .Shear (sx ,sy );_cff .Translate (-x ,-y );};func NewContextForImage (im _ad .Image )*Context {return NewContextForRGBA (_dcfe (im ))};func _gbba (_edc _f .Point )_fg .Point26_6 {return _fg .Point26_6 {X :_fcde (_edc .X ),Y :_fcde (_edc .Y )}};func _fcb (_fgdg [][]_f .Point ,_dffe []float64 ,_daca float64 )[][]_f .Point {var _bbgd [][]_f .Point ;
if len (_dffe )==0{return _fgdg ;};if len (_dffe )==1{_dffe =append (_dffe ,_dffe [0]);};for _ ,_eadg :=range _fgdg {if len (_eadg )< 2{continue ;};_cccg :=_eadg [0];_deb :=1;_cbee :=0;_facc :=0.0;if _daca !=0{var _bgcf float64 ;for _ ,_ecgd :=range _dffe {_bgcf +=_ecgd ;
};_daca =_c .Mod (_daca ,_bgcf );if _daca < 0{_daca +=_bgcf ;};for _acegb ,_egfd :=range _dffe {_daca -=_egfd ;if _daca < 0{_cbee =_acegb ;_facc =_egfd +_daca ;break ;};};};var _def []_f .Point ;_def =append (_def ,_cccg );for _deb < len (_eadg ){_dfa :=_dffe [_cbee ];
_ddcd :=_eadg [_deb ];_edga :=_cccg .Distance (_ddcd );_fdda :=_dfa -_facc ;if _edga > _fdda {_dbbb :=_fdda /_edga ;_egae :=_cccg .Interpolate (_ddcd ,_dbbb );_def =append (_def ,_egae );if _cbee %2==0&&len (_def )> 1{_bbgd =append (_bbgd ,_def );};_def =nil ;
_def =append (_def ,_egae );_facc =0;_cccg =_egae ;_cbee =(_cbee +1)%len (_dffe );}else {_def =append (_def ,_ddcd );_cccg =_ddcd ;_facc +=_edga ;_deb ++;};};if _cbee %2==0&&len (_def )> 1{_bbgd =append (_bbgd ,_def );};};return _bbgd ;};func _gbbd (_gde _be .Path ,_dffa []float64 ,_cddf float64 )_be .Path {return _cde (_fcb (_ddge (_gde ),_dffa ,_cddf ));
};func (_fcd *Context )Clip (){_fcd .ClipPreserve ();_fcd .ClearPath ()};type linearGradient struct{_bcb ,_dbaa ,_aeba ,_dada float64 ;_ddcg stops ;};func _ddfg (_fea float64 ,_ecf stops )_e .Color {if _fea <=0.0||len (_ecf )==1{return _ecf [0]._gbfd ;
};_cfdf :=_ecf [len (_ecf )-1];if _fea >=_cfdf ._fbae {return _cfdf ._gbfd ;};for _aca ,_abd :=range _ecf [1:]{if _fea < _abd ._fbae {_fea =(_fea -_ecf [_aca ]._fbae )/(_abd ._fbae -_ecf [_aca ]._fbae );return _ddg (_ecf [_aca ]._gbfd ,_abd ._gbfd ,_fea );
};};return _cfdf ._gbfd ;};type solidPattern struct{_ecda _e .Color };func (_eef *Context )NewSubPath (){if _eef ._ecb {_eef ._af .Add1 (_gbba (_eef ._aad ));};_eef ._ecb =false ;};func _afgd (_cagd *_ad .RGBA ,_gcae *_ad .Alpha ,_adag _d .Pattern )*patternPainter {return &patternPainter {_cagd ,_gcae ,_adag };
};func NewContext (width ,height int )*Context {return NewContextForRGBA (_ad .NewRGBA (_ad .Rect (0,0,width ,height )));};func _bde (_cdg _fg .Int26_6 )float64 {const _gead ,_dddd =6,1<<6-1;if _cdg >=0{return float64 (_cdg >>_gead )+float64 (_cdg &_dddd )/64;
};_cdg =-_cdg ;if _cdg >=0{return -(float64 (_cdg >>_gead )+float64 (_cdg &_dddd )/64);};return 0;};func (_gce *Context )SetFillStyle (pattern _d .Pattern ){if _eeb ,_adac :=pattern .(*solidPattern );_adac {_gce ._db =_eeb ._ecda ;};_gce ._bac =pattern ;
};func (_egc *Context )drawString (_gdge string ,_dedd _ea .Face ,_bcdbd ,_bbe float64 ){_egce :=&_ea .Drawer {Src :_ad .NewUniform (_egc ._db ),Face :_dedd ,Dot :_gbba (_f .NewPoint (_bcdbd ,_bbe ))};_cbac :=rune (-1);for _ ,_bbd :=range _gdge {if _cbac >=0{_egce .Dot .X +=_egce .Face .Kern (_cbac ,_bbd );
};_eda ,_cdfg ,_baa ,_ade ,_afg :=_egce .Face .Glyph (_egce .Dot ,_bbd );if !_afg {continue ;};_cfd :=_eda .Sub (_eda .Min );_ffd :=_ad .NewRGBA (_cfd );_ab .DrawMask (_ffd ,_cfd ,_egce .Src ,_ad .Point {},_cdfg ,_baa ,_ab .Over );var _baab *_ab .Options ;
if _egc ._bcd !=nil {_baab =&_ab .Options {DstMask :_egc ._bcd ,DstMaskP :_ad .Point {}};};_fcc :=_egc ._ggf .Clone ().Translate (float64 (_eda .Min .X ),float64 (_eda .Min .Y ));_egbf :=_fb .Aff3 {_fcc [0],_fcc [3],_fcc [6],_fcc [1],_fcc [4],_fcc [7]};
_ab .BiLinear .Transform (_egc ._dgd ,_egbf ,_ffd ,_cfd ,_ab .Over ,_baab );_egce .Dot .X +=_ade ;_cbac =_bbd ;};};type repeatOp int ;func (_cbb *Context )DrawImageAnchored (im _ad .Image ,x ,y int ,ax ,ay float64 ){_fgd :=im .Bounds ().Size ();x -=int (ax *float64 (_fgd .X ));
y -=int (ay *float64 (_fgd .Y ));_dcf :=_ab .BiLinear ;_abe :=_cbb ._ggf .Clone ().Translate (float64 (x ),float64 (y ));_cgf :=_fb .Aff3 {_abe [0],_abe [3],_abe [6],_abe [1],_abe [4],_abe [7]};if _cbb ._bcd ==nil {_dcf .Transform (_cbb ._dgd ,_cgf ,im ,im .Bounds (),_ab .Over ,nil );
}else {_dcf .Transform (_cbb ._dgd ,_cgf ,im ,im .Bounds (),_ab .Over ,&_ab .Options {DstMask :_cbb ._bcd ,DstMaskP :_ad .Point {}});};};func (_cfbf *linearGradient )AddColorStop (offset float64 ,color _e .Color ){_cfbf ._ddcg =append (_cfbf ._ddcg ,stop {_fbae :offset ,_gbfd :color });
_gd .Sort (_cfbf ._ddcg );};func (_cea *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _cbd =16;for _bbce :=0;_bbce < _cbd ;_bbce ++{_gbee :=float64 (_bbce +0)/_cbd ;_egga :=float64 (_bbce +1)/_cbd ;_cbaf :=angle1 +(angle2 -angle1 )*_gbee ;
_gfac :=angle1 +(angle2 -angle1 )*_egga ;_aae :=x +rx *_c .Cos (_cbaf );_fafg :=y +ry *_c .Sin (_cbaf );_cge :=x +rx *_c .Cos ((_cbaf +_gfac )/2);_aff :=y +ry *_c .Sin ((_cbaf +_gfac )/2);_ebb :=x +rx *_c .Cos (_gfac );_bea :=y +ry *_c .Sin (_gfac );_dca :=2*_cge -_aae /2-_ebb /2;
_bbb :=2*_aff -_fafg /2-_bea /2;if _bbce ==0{if _cea ._ecb {_cea .LineTo (_aae ,_fafg );}else {_cea .MoveTo (_aae ,_fafg );};};_cea .QuadraticTo (_dca ,_bbb ,_ebb ,_bea );};};func (_bbdb *Context )Matrix ()_f .Matrix {return _bbdb ._ggf };func (_gbdb *Context )LineTo (x ,y float64 ){if !_gbdb ._ecb {_gbdb .MoveTo (x ,y );
}else {x ,y =_gbdb .Transform (x ,y );_efcg :=_f .NewPoint (x ,y );_gag :=_gbba (_efcg );_gbdb ._egg .Add1 (_gag );_gbdb ._af .Add1 (_gag );_gbdb ._ege =_efcg ;};};func NewContextForRGBA (im *_ad .RGBA )*Context {_cfa :=im .Bounds ().Size ().X ;_acc :=im .Bounds ().Size ().Y ;
return &Context {_fbd :_cfa ,_dga :_acc ,_ga :_be .NewRasterizer (_cfa ,_acc ),_dgd :im ,_db :_e .Transparent ,_bac :_fgc ,_dd :_bda ,_badd :1,_dfe :_d .FillRuleWinding ,_ggf :_f .IdentityMatrix (),_cdd :_d .NewTextState ()};};func (_dbb *Context )StrokePreserve (){var _adg _be .Painter ;
if _dbb ._bcd ==nil {if _badbf ,_cba :=_dbb ._dd .(*solidPattern );_cba {_cbe :=_be .NewRGBAPainter (_dbb ._dgd );_cbe .SetColor (_badbf ._ecda );_adg =_cbe ;};};if _adg ==nil {_adg =_afgd (_dbb ._dgd ,_dbb ._bcd ,_dbb ._dd );};_dbb .stroke (_adg );};func (_eac *Context )SetPixel (x ,y int ){_eac ._dgd .Set (x ,y ,_eac ._db )};
func (_ffe *Context )Stroke (){_ffe .StrokePreserve ();_ffe .ClearPath ()};func _cgaf (_aebb ,_cgea uint32 ,_gacb float64 )uint8 {return uint8 (int32 (float64 (_aebb )*(1.0-_gacb )+float64 (_cgea )*_gacb )>>8);};func (_agb *Context )LineWidth ()float64 {return _agb ._badd };
func (_beg *Context )TextState ()*_d .TextState {return &_beg ._cdd };func (_bbg *Context )stroke (_dff _be .Painter ){_ecc :=_bbg ._egg ;if len (_bbg ._fc )> 0{_ecc =_gbbd (_ecc ,_bbg ._fc ,_bbg ._ddc );}else {_ecc =_cde (_ddge (_ecc ));};_ffbb :=_bbg ._ga ;
_ffbb .UseNonZeroWinding =true ;_ffbb .Clear ();_ded :=(_bbg ._ggf .ScalingFactorX ()+_bbg ._ggf .ScalingFactorY ())/2;_ffbb .AddStroke (_ecc ,_fcde (_bbg ._badd *_ded ),_bbg .capper (),_bbg .joiner ());_ffbb .Rasterize (_dff );};