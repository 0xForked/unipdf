//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sampling ;import (_f "github.com/unidoc/unipdf/v3/internal/bitwise";_ag "github.com/unidoc/unipdf/v3/internal/imageutil";_b "io";);type SampleWriter interface{WriteSample (_aff uint32 )error ;WriteSamples (_gc []uint32 )error ;};type Writer struct{_gg _ag .ImageBase ;
_deba *_f .Writer ;_ad ,_gec int ;_bb bool ;};func ResampleBytes (data []byte ,bitsPerSample int )[]uint32 {var _cg []uint32 ;_ab :=bitsPerSample ;var _cd uint32 ;var _e byte ;_ba :=0;_bf :=0;_ef :=0;for _ef < len (data ){if _ba > 0{_bcc :=_ba ;if _ab < _bcc {_bcc =_ab ;
};_cd =(_cd <<uint (_bcc ))|uint32 (_e >>uint (8-_bcc ));_ba -=_bcc ;if _ba > 0{_e =_e <<uint (_bcc );}else {_e =0;};_ab -=_bcc ;if _ab ==0{_cg =append (_cg ,_cd );_ab =bitsPerSample ;_cd =0;_bf ++;};}else {_fa :=data [_ef ];_ef ++;_cb :=8;if _ab < _cb {_cb =_ab ;
};_ba =8-_cb ;_cd =(_cd <<uint (_cb ))|uint32 (_fa >>uint (_ba ));if _cb < 8{_e =_fa <<uint (_cb );};_ab -=_cb ;if _ab ==0{_cg =append (_cg ,_cd );_ab =bitsPerSample ;_cd =0;_bf ++;};};};for _ba >=bitsPerSample {_af :=_ba ;if _ab < _af {_af =_ab ;};_cd =(_cd <<uint (_af ))|uint32 (_e >>uint (8-_af ));
_ba -=_af ;if _ba > 0{_e =_e <<uint (_af );}else {_e =0;};_ab -=_af ;if _ab ==0{_cg =append (_cg ,_cd );_ab =bitsPerSample ;_cd =0;_bf ++;};};return _cg ;};func ResampleUint32 (data []uint32 ,bitsPerInputSample int ,bitsPerOutputSample int )[]uint32 {var _cgb []uint32 ;
_be :=bitsPerOutputSample ;var _cgbd uint32 ;var _fd uint32 ;_bec :=0;_bcb :=0;_dee :=0;for _dee < len (data ){if _bec > 0{_da :=_bec ;if _be < _da {_da =_be ;};_cgbd =(_cgbd <<uint (_da ))|(_fd >>uint (bitsPerInputSample -_da ));_bec -=_da ;if _bec > 0{_fd =_fd <<uint (_da );
}else {_fd =0;};_be -=_da ;if _be ==0{_cgb =append (_cgb ,_cgbd );_be =bitsPerOutputSample ;_cgbd =0;_bcb ++;};}else {_afb :=data [_dee ];_dee ++;_cbg :=bitsPerInputSample ;if _be < _cbg {_cbg =_be ;};_bec =bitsPerInputSample -_cbg ;_cgbd =(_cgbd <<uint (_cbg ))|(_afb >>uint (_bec ));
if _cbg < bitsPerInputSample {_fd =_afb <<uint (_cbg );};_be -=_cbg ;if _be ==0{_cgb =append (_cgb ,_cgbd );_be =bitsPerOutputSample ;_cgbd =0;_bcb ++;};};};for _bec >=bitsPerOutputSample {_gd :=_bec ;if _be < _gd {_gd =_be ;};_cgbd =(_cgbd <<uint (_gd ))|(_fd >>uint (bitsPerInputSample -_gd ));
_bec -=_gd ;if _bec > 0{_fd =_fd <<uint (_gd );}else {_fd =0;};_be -=_gd ;if _be ==0{_cgb =append (_cgb ,_cgbd );_be =bitsPerOutputSample ;_cgbd =0;_bcb ++;};};if _be > 0&&_be < bitsPerOutputSample {_cgbd <<=uint (_be );_cgb =append (_cgb ,_cgbd );};return _cgb ;
};func (_aee *Writer )WriteSample (sample uint32 )error {if _ ,_cgc :=_aee ._deba .WriteBits (uint64 (sample ),_aee ._gg .BitsPerComponent );_cgc !=nil {return _cgc ;};_aee ._gec --;if _aee ._gec ==0{_aee ._gec =_aee ._gg .ColorComponents ;_aee ._ad ++;
};if _aee ._ad ==_aee ._gg .Width {if _aee ._bb {_aee ._deba .FinishByte ();};_aee ._ad =0;};return nil ;};type SampleReader interface{ReadSample ()(uint32 ,error );ReadSamples (_fb []uint32 )error ;};func (_bc *Reader )ReadSamples (samples []uint32 )(_ge error ){for _deb :=0;
_deb < len (samples );_deb ++{samples [_deb ],_ge =_bc .ReadSample ();if _ge !=nil {return _ge ;};};return nil ;};func NewReader (img _ag .ImageBase )*Reader {return &Reader {_ae :_f .NewReader (img .Data ),_c :img ,_fe :img .ColorComponents ,_ca :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };
};type Reader struct{_c _ag .ImageBase ;_ae *_f .Reader ;_d ,_dc ,_fe int ;_ca bool ;};func (_de *Reader )ReadSample ()(uint32 ,error ){if _de ._dc ==_de ._c .Height {return 0,_b .EOF ;};_bg ,_g :=_de ._ae .ReadBits (byte (_de ._c .BitsPerComponent ));
if _g !=nil {return 0,_g ;};_de ._fe --;if _de ._fe ==0{_de ._fe =_de ._c .ColorComponents ;_de ._d ++;};if _de ._d ==_de ._c .Width {if _de ._ca {_de ._ae .ConsumeRemainingBits ();};_de ._d =0;_de ._dc ++;};return uint32 (_bg ),nil ;};func NewWriter (img _ag .ImageBase )*Writer {return &Writer {_deba :_f .NewWriterMSB (img .Data ),_gg :img ,_gec :img .ColorComponents ,_bb :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };
};func (_bbd *Writer )WriteSamples (samples []uint32 )error {for _agc :=0;_agc < len (samples );_agc ++{if _baa :=_bbd .WriteSample (samples [_agc ]);_baa !=nil {return _baa ;};};return nil ;};