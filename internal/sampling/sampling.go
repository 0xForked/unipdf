//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sampling ;import (_b "github.com/unidoc/unipdf/v3/internal/bitwise";_f "github.com/unidoc/unipdf/v3/internal/imageutil";_d "io";);type Reader struct{_e _f .ImageBase ;_de *_b .Reader ;_fe ,_g ,_a int ;_fg bool ;};type SampleWriter interface{WriteSample (_fcc uint32 )error ;
WriteSamples (_ccg []uint32 )error ;};type Writer struct{_db _f .ImageBase ;_dbb *_b .Writer ;_bfb ,_dfg int ;_fb bool ;};type SampleReader interface{ReadSample ()(uint32 ,error );ReadSamples (_da []uint32 )error ;};func ResampleUint32 (data []uint32 ,bitsPerInputSample int ,bitsPerOutputSample int )[]uint32 {var _fc []uint32 ;
_df :=bitsPerOutputSample ;var _ea uint32 ;var _cc uint32 ;_ed :=0;_beg :=0;_fd :=0;for _fd < len (data ){if _ed > 0{_bc :=_ed ;if _df < _bc {_bc =_df ;};_ea =(_ea <<uint (_bc ))|(_cc >>uint (bitsPerInputSample -_bc ));_ed -=_bc ;if _ed > 0{_cc =_cc <<uint (_bc );
}else {_cc =0;};_df -=_bc ;if _df ==0{_fc =append (_fc ,_ea );_df =bitsPerOutputSample ;_ea =0;_beg ++;};}else {_cg :=data [_fd ];_fd ++;_gb :=bitsPerInputSample ;if _df < _gb {_gb =_df ;};_ed =bitsPerInputSample -_gb ;_ea =(_ea <<uint (_gb ))|(_cg >>uint (_ed ));
if _gb < bitsPerInputSample {_cc =_cg <<uint (_gb );};_df -=_gb ;if _df ==0{_fc =append (_fc ,_ea );_df =bitsPerOutputSample ;_ea =0;_beg ++;};};};for _ed >=bitsPerOutputSample {_fff :=_ed ;if _df < _fff {_fff =_df ;};_ea =(_ea <<uint (_fff ))|(_cc >>uint (bitsPerInputSample -_fff ));
_ed -=_fff ;if _ed > 0{_cc =_cc <<uint (_fff );}else {_cc =0;};_df -=_fff ;if _df ==0{_fc =append (_fc ,_ea );_df =bitsPerOutputSample ;_ea =0;_beg ++;};};if _df > 0&&_df < bitsPerOutputSample {_ea <<=uint (_df );_fc =append (_fc ,_ea );};return _fc ;};
func NewReader (img _f .ImageBase )*Reader {return &Reader {_de :_b .NewReader (img .Data ),_e :img ,_a :img .ColorComponents ,_fg :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };};func ResampleBytes (data []byte ,bitsPerSample int )[]uint32 {var _ad []uint32 ;
_bf :=bitsPerSample ;var _dd uint32 ;var _aa byte ;_gg :=0;_ggf :=0;_dab :=0;for _dab < len (data ){if _gg > 0{_gga :=_gg ;if _bf < _gga {_gga =_bf ;};_dd =(_dd <<uint (_gga ))|uint32 (_aa >>uint (8-_gga ));_gg -=_gga ;if _gg > 0{_aa =_aa <<uint (_gga );
}else {_aa =0;};_bf -=_gga ;if _bf ==0{_ad =append (_ad ,_dd );_bf =bitsPerSample ;_dd =0;_ggf ++;};}else {_ga :=data [_dab ];_dab ++;_ec :=8;if _bf < _ec {_ec =_bf ;};_gg =8-_ec ;_dd =(_dd <<uint (_ec ))|uint32 (_ga >>uint (_gg ));if _ec < 8{_aa =_ga <<uint (_ec );
};_bf -=_ec ;if _bf ==0{_ad =append (_ad ,_dd );_bf =bitsPerSample ;_dd =0;_ggf ++;};};};for _gg >=bitsPerSample {_ba :=_gg ;if _bf < _ba {_ba =_bf ;};_dd =(_dd <<uint (_ba ))|uint32 (_aa >>uint (8-_ba ));_gg -=_ba ;if _gg > 0{_aa =_aa <<uint (_ba );}else {_aa =0;
};_bf -=_ba ;if _bf ==0{_ad =append (_ad ,_dd );_bf =bitsPerSample ;_dd =0;_ggf ++;};};return _ad ;};func (_cd *Reader )ReadSamples (samples []uint32 )(_ee error ){for _ff :=0;_ff < len (samples );_ff ++{samples [_ff ],_ee =_cd .ReadSample ();if _ee !=nil {return _ee ;
};};return nil ;};func NewWriter (img _f .ImageBase )*Writer {return &Writer {_dbb :_b .NewWriterMSB (img .Data ),_db :img ,_dfg :img .ColorComponents ,_fb :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };};func (_edf *Writer )WriteSamples (samples []uint32 )error {for _ffg :=0;
_ffg < len (samples );_ffg ++{if _dc :=_edf .WriteSample (samples [_ffg ]);_dc !=nil {return _dc ;};};return nil ;};func (_bb *Reader )ReadSample ()(uint32 ,error ){if _bb ._g ==_bb ._e .Height {return 0,_d .EOF ;};_be ,_feg :=_bb ._de .ReadBits (byte (_bb ._e .BitsPerComponent ));
if _feg !=nil {return 0,_feg ;};_bb ._a --;if _bb ._a ==0{_bb ._a =_bb ._e .ColorComponents ;_bb ._fe ++;};if _bb ._fe ==_bb ._e .Width {if _bb ._fg {_bb ._de .ConsumeRemainingBits ();};_bb ._fe =0;_bb ._g ++;};return uint32 (_be ),nil ;};func (_fcf *Writer )WriteSample (sample uint32 )error {if _ ,_ggg :=_fcf ._dbb .WriteBits (uint64 (sample ),_fcf ._db .BitsPerComponent );
_ggg !=nil {return _ggg ;};_fcf ._dfg --;if _fcf ._dfg ==0{_fcf ._dfg =_fcf ._db .ColorComponents ;_fcf ._bfb ++;};if _fcf ._bfb ==_fcf ._db .Width {if _fcf ._fb {_fcf ._dbb .FinishByte ();};_fcf ._bfb =0;};return nil ;};