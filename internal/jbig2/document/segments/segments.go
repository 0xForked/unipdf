//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package segments ;import (_b "encoding/binary";_gg "errors";_g "fmt";_cb "github.com/unidoc/unipdf/v3/common";_ga "github.com/unidoc/unipdf/v3/internal/bitwise";_bg "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_ea "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_be "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/arithmetic";_ee "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/huffman";_fb "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/mmr";_ce "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/arithmetic";
_ag "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_fc "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_a "golang.org/x/xerrors";_f "image";_c "io";_d "math";_fa "strings";_fe "time";);func (_bcec *GenericRefinementRegion )updateOverride ()error {if _bcec .GrAtX ==nil ||_bcec .GrAtY ==nil {return _gg .New ("\u0041\u0054\u0020\u0070\u0069\u0078\u0065\u006c\u0073\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");
};if len (_bcec .GrAtX )!=len (_bcec .GrAtY ){return _gg .New ("A\u0054\u0020\u0070\u0069xe\u006c \u0069\u006e\u0063\u006f\u006es\u0069\u0073\u0074\u0065\u006e\u0074");};_bcec ._aab =make ([]bool ,len (_bcec .GrAtX ));switch _bcec .TemplateID {case 0:if _bcec .GrAtX [0]!=-1&&_bcec .GrAtY [0]!=-1{_bcec ._aab [0]=true ;
_bcec ._aa =true ;};if _bcec .GrAtX [1]!=-1&&_bcec .GrAtY [1]!=-1{_bcec ._aab [1]=true ;_bcec ._aa =true ;};case 1:_bcec ._aa =false ;};return nil ;};func (_gbce *PatternDictionary )Init (h *Header ,r _ga .StreamReader )error {_gbce ._baa =r ;return _gbce .parseHeader ();
};type Segmenter interface{Init (_dadgd *Header ,_abac _ga .StreamReader )error ;};type SegmentEncoder interface{Encode (_egba _ga .BinaryWriter )(_eagc int ,_caef error );};func (_cd *GenericRefinementRegion )decodeTypicalPredictedLine (_fee ,_aabf ,_bbg ,_fg ,_ec ,_dcf int )error {_fea :=_fee -int (_cd .ReferenceDY );
_bdd :=_cd .ReferenceBitmap .GetByteIndex (0,_fea );_ffb :=_cd .RegionBitmap .GetByteIndex (0,_fee );var _fae error ;switch _cd .TemplateID {case 0:_fae =_cd .decodeTypicalPredictedLineTemplate0 (_fee ,_aabf ,_bbg ,_fg ,_ec ,_dcf ,_ffb ,_fea ,_bdd );case 1:_fae =_cd .decodeTypicalPredictedLineTemplate1 (_fee ,_aabf ,_bbg ,_fg ,_ec ,_dcf ,_ffb ,_fea ,_bdd );
};return _fae ;};func (_gagbe *TextRegion )Init (header *Header ,r _ga .StreamReader )error {_gagbe .Header =header ;_gagbe ._bcffg =r ;_gagbe .RegionInfo =NewRegionSegment (_gagbe ._bcffg );return _gagbe .parseHeader ();};func (_gffb *GenericRegion )String ()string {_dfdb :=&_fa .Builder {};
_dfdb .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_dfdb .WriteString (_gffb .RegionSegment .String ()+"\u000a");_dfdb .WriteString (_g .Sprintf ("\u0009\u002d\u0020Us\u0065\u0045\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_gffb .UseExtTemplates ));
_dfdb .WriteString (_g .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0044\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_gffb .IsTPGDon ));_dfdb .WriteString (_g .Sprintf ("\u0009-\u0020G\u0042\u0054\u0065\u006d\u0070l\u0061\u0074e\u003a\u0020\u0025\u0064\u000a",_gffb .GBTemplate ));
_dfdb .WriteString (_g .Sprintf ("\t\u002d \u0049\u0073\u004d\u004d\u0052\u0045\u006e\u0063o\u0064\u0065\u0064\u003a %\u0076\u000a",_gffb .IsMMREncoded ));_dfdb .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_gffb .GBAtX ));
_dfdb .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_gffb .GBAtY ));_dfdb .WriteString (_g .Sprintf ("\t\u002d \u0047\u0042\u0041\u0074\u004f\u0076\u0065\u0072r\u0069\u0064\u0065\u003a %\u0076\u000a",_gffb .GBAtOverride ));
return _dfdb .String ();};func (_daeb *Header )readSegmentPageAssociation (_bfece Documenter ,_fgc _ga .StreamReader ,_ccbe uint64 ,_gbca ...int )(_ceee error ){const _gfda ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074P\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061t\u0069\u006f\u006e";
if !_daeb .PageAssociationFieldSize {_cgcb ,_bbeb :=_fgc .ReadBits (8);if _bbeb !=nil {return _ag .Wrap (_bbeb ,_gfda ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_daeb .PageAssociation =int (_cgcb &0xFF);}else {_fgec ,_bfdf :=_fgc .ReadBits (32);
if _bfdf !=nil {return _ag .Wrap (_bfdf ,_gfda ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_daeb .PageAssociation =int (_fgec &_d .MaxInt32 );};if _ccbe ==0{return nil ;};if _daeb .PageAssociation !=0{_afcg ,_bfgb :=_bfece .GetPage (_daeb .PageAssociation );
if _bfgb !=nil {return _ag .Wrap (_bfgb ,_gfda ,"\u0061s\u0073\u006f\u0063\u0069a\u0074\u0065\u0064\u0020\u0070a\u0067e\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006ed");};var _baef int ;for _ecab :=uint64 (0);_ecab < _ccbe ;_ecab ++{_baef =_gbca [_ecab ];
_daeb .RTSegments [_ecab ],_bfgb =_afcg .GetSegment (_baef );if _bfgb !=nil {var _bace error ;_daeb .RTSegments [_ecab ],_bace =_bfece .GetGlobalSegment (_baef );if _bace !=nil {return _ag .Wrapf (_bfgb ,_gfda ,"\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020s\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064\u0020\u0061\u0074\u0020pa\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0072\u0020\u0069\u006e\u0020\u0067\u006c\u006f\u0062\u0061\u006c\u0073",_daeb .PageAssociation );
};};};return nil ;};for _bgbf :=uint64 (0);_bgbf < _ccbe ;_bgbf ++{_daeb .RTSegments [_bgbf ],_ceee =_bfece .GetGlobalSegment (_gbca [_bgbf ]);if _ceee !=nil {return _ag .Wrapf (_ceee ,_gfda ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u003a\u0020\u0027\u0025d\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064",_gbca [_bgbf ]);
};};return nil ;};func (_eaag *SymbolDictionary )encodeSymbols (_ddgad _ga .BinaryWriter )(_dgae int ,_agcc error ){const _dbgd ="\u0065\u006e\u0063o\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c";_acgb :=_ce .New ();_acgb .Init ();_fbcc ,_agcc :=_eaag ._gfa .SelectByIndexes (_eaag ._cagg );
if _agcc !=nil {return 0,_ag .Wrap (_agcc ,_dbgd ,"\u0069n\u0069\u0074\u0069\u0061\u006c");};_defa :=map[*_ea .Bitmap ]int {};for _edg ,_eaffb :=range _fbcc .Values {_defa [_eaffb ]=_edg ;};_fbcc .SortByHeight ();var _cdfa ,_gbfb int ;_gaega ,_agcc :=_fbcc .GroupByHeight ();
if _agcc !=nil {return 0,_ag .Wrap (_agcc ,_dbgd ,"");};for _ ,_bgff :=range _gaega .Values {_efa :=_bgff .Values [0].Height ;_fddb :=_efa -_cdfa ;if _agcc =_acgb .EncodeInteger (_ce .IADH ,_fddb );_agcc !=nil {return 0,_ag .Wrapf (_agcc ,_dbgd ,"\u0049\u0041\u0044\u0048\u0020\u0066\u006f\u0072\u0020\u0064\u0068\u003a \u0027\u0025\u0064\u0027",_fddb );
};_cdfa =_efa ;_ecd ,_gggb :=_bgff .GroupByWidth ();if _gggb !=nil {return 0,_ag .Wrapf (_gggb ,_dbgd ,"\u0068\u0065\u0069g\u0068\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_efa );};var _edfb int ;for _ ,_cfgc :=range _ecd .Values {for _ ,_acff :=range _cfgc .Values {_dcfe :=_acff .Width ;
_egce :=_dcfe -_edfb ;if _gggb =_acgb .EncodeInteger (_ce .IADW ,_egce );_gggb !=nil {return 0,_ag .Wrapf (_gggb ,_dbgd ,"\u0049\u0041\u0044\u0057\u0020\u0066\u006f\u0072\u0020\u0064\u0077\u003a \u0027\u0025\u0064\u0027",_egce );};_edfb +=_egce ;if _gggb =_acgb .EncodeBitmap (_acff ,false );
_gggb !=nil {return 0,_ag .Wrapf (_gggb ,_dbgd ,"H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u0020W\u0069\u0064\u0074\u0068: \u0025\u0064",_efa ,_dcfe );};_efdg :=_defa [_acff ];_eaag ._afa [_efdg ]=_gbfb ;_gbfb ++;};};if _gggb =_acgb .EncodeOOB (_ce .IADW );
_gggb !=nil {return 0,_ag .Wrap (_gggb ,_dbgd ,"\u0049\u0041\u0044\u0057");};};if _agcc =_acgb .EncodeInteger (_ce .IAEX ,0);_agcc !=nil {return 0,_ag .Wrap (_agcc ,_dbgd ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};if _agcc =_acgb .EncodeInteger (_ce .IAEX ,len (_eaag ._cagg ));_agcc !=nil {return 0,_ag .Wrap (_agcc ,_dbgd ,"\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0073\u0079m\u0062\u006f\u006c\u0073");};_acgb .Final ();_dfbf ,_agcc :=_acgb .WriteTo (_ddgad );
if _agcc !=nil {return 0,_ag .Wrap (_agcc ,_dbgd ,"\u0077\u0072i\u0074\u0069\u006e\u0067 \u0065\u006ec\u006f\u0064\u0065\u0072\u0020\u0063\u006f\u006et\u0065\u0078\u0074\u0020\u0074\u006f\u0020\u0027\u0077\u0027\u0020\u0077r\u0069\u0074\u0065\u0072");};
return int (_dfbf ),nil ;};func (_edea *HalftoneRegion )renderPattern (_dbeg [][]int )(_cgbf error ){var _bffb ,_afba int ;for _cfca :=0;_cfca < int (_edea .HGridHeight );_cfca ++{for _bdba :=0;_bdba < int (_edea .HGridWidth );_bdba ++{_bffb =_edea .computeX (_cfca ,_bdba );
_afba =_edea .computeY (_cfca ,_bdba );_fdab :=_edea .Patterns [_dbeg [_cfca ][_bdba ]];if _cgbf =_ea .Blit (_fdab ,_edea .HalftoneRegionBitmap ,_bffb +int (_edea .HGridX ),_afba +int (_edea .HGridY ),_edea .CombinationOperator );_cgbf !=nil {return _cgbf ;
};};};return nil ;};type HalftoneRegion struct{_eeca _ga .StreamReader ;_bdag *Header ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;HDefaultPixel int8 ;CombinationOperator _ea .CombinationOperator ;
HSkipEnabled bool ;HTemplate byte ;IsMMREncoded bool ;HGridWidth uint32 ;HGridHeight uint32 ;HGridX int32 ;HGridY int32 ;HRegionX uint16 ;HRegionY uint16 ;HalftoneRegionBitmap *_ea .Bitmap ;Patterns []*_ea .Bitmap ;};func _aae (_aaf _ga .StreamReader ,_bgc *Header )*GenericRefinementRegion {return &GenericRefinementRegion {_bc :_aaf ,RegionInfo :NewRegionSegment (_aaf ),_cbb :_bgc ,_dd :&template0 {},_bbf :&template1 {}};
};type template0 struct{};func (_abdd *PageInformationSegment )Size ()int {return 19};func (_fgdaa *PatternDictionary )GetDictionary ()([]*_ea .Bitmap ,error ){if _fgdaa .Patterns !=nil {return _fgdaa .Patterns ,nil ;};if !_fgdaa .IsMMREncoded {_fgdaa .setGbAtPixels ();
};_debf :=NewGenericRegion (_fgdaa ._baa );_debf .setParametersMMR (_fgdaa .IsMMREncoded ,_fgdaa .DataOffset ,_fgdaa .DataLength ,uint32 (_fgdaa .HdpHeight ),(_fgdaa .GrayMax +1)*uint32 (_fgdaa .HdpWidth ),_fgdaa .HDTemplate ,false ,false ,_fgdaa .GBAtX ,_fgdaa .GBAtY );
_dcaf ,_cgbc :=_debf .GetRegionBitmap ();if _cgbc !=nil {return nil ,_cgbc ;};if _cgbc =_fgdaa .extractPatterns (_dcaf );_cgbc !=nil {return nil ,_cgbc ;};return _fgdaa .Patterns ,nil ;};func (_ffbdd *GenericRegion )decodeSLTP ()(int ,error ){switch _ffbdd .GBTemplate {case 0:_ffbdd ._cee .SetIndex (0x9B25);
case 1:_ffbdd ._cee .SetIndex (0x795);case 2:_ffbdd ._cee .SetIndex (0xE5);case 3:_ffbdd ._cee .SetIndex (0x195);};return _ffbdd ._ddbg .DecodeBit (_ffbdd ._cee );};func (_ffbbd *SymbolDictionary )checkInput ()error {if _ffbbd .SdHuffDecodeHeightSelection ==2{_cb .Log .Debug ("\u0053\u0079\u006d\u0062\u006fl\u0020\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u0053e\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0070\u0065r\u006d\u0069\u0074\u0074\u0065\u0064",_ffbbd .SdHuffDecodeHeightSelection );
};if _ffbbd .SdHuffDecodeWidthSelection ==2{_cb .Log .Debug ("\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0057\u0069\u0064t\u0068\u0020\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061l\u0075\u0065\u0020\u006e\u006f\u0074 \u0070\u0065r\u006d\u0069t\u0074e\u0064",_ffbbd .SdHuffDecodeWidthSelection );
};if _ffbbd .IsHuffmanEncoded {if _ffbbd .SdTemplate !=0{_cb .Log .Debug ("\u0053\u0044T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e \u0030\u0029",_ffbbd .SdTemplate );
};if !_ffbbd .UseRefinementAggregation {if !_ffbbd .UseRefinementAggregation {if _ffbbd ._cfda {_cb .Log .Debug ("\u0049\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074ex\u0074\u0052\u0065\u0074\u0061\u0069n\u0065\u0064\u0020\u003d\u0020\u0074\u0072\u0075\u0065\u0020\u0028\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0066\u0061\u006cs\u0065\u0029");
_ffbbd ._cfda =false ;};if _ffbbd ._gbga {_cb .Log .Debug ("\u0069s\u0043\u006fd\u0069\u006e\u0067\u0043o\u006e\u0074\u0065x\u0074\u0055\u0073\u0065\u0064\u0020\u003d\u0020\u0074ru\u0065\u0020\u0028s\u0068\u006fu\u006c\u0064\u0020\u0062\u0065\u0020f\u0061\u006cs\u0065\u0029");
_ffbbd ._gbga =false ;};};};}else {if _ffbbd .SdHuffBMSizeSelection !=0{_cb .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066B\u004d\u0053\u0069\u007a\u0065\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_ffbbd .SdHuffBMSizeSelection =0;};if _ffbbd .SdHuffDecodeWidthSelection !=0{_cb .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068\u0053\u0065\u006c\u0065\u0063\u0074\u0069o\u006e\u0020\u0073\u0068\u006fu\u006c\u0064 \u0062\u0065\u0020\u0030");
_ffbbd .SdHuffDecodeWidthSelection =0;};if _ffbbd .SdHuffDecodeHeightSelection !=0{_cb .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0048e\u0069\u0067\u0068\u0074\u0053\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_ffbbd .SdHuffDecodeHeightSelection =0;};};if !_ffbbd .UseRefinementAggregation {if _ffbbd .SdrTemplate !=0{_cb .Log .Debug ("\u0053\u0044\u0052\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u003d\u0020\u0025\u0064\u0020\u0028s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_ffbbd .SdrTemplate );
_ffbbd .SdrTemplate =0;};};if !_ffbbd .IsHuffmanEncoded ||!_ffbbd .UseRefinementAggregation {if _ffbbd .SdHuffAggInstanceSelection {_cb .Log .Debug ("\u0053d\u0048\u0075f\u0066\u0041\u0067g\u0049\u006e\u0073\u0074\u0061\u006e\u0063e\u0053\u0065\u006c\u0065\u0063\u0074i\u006f\u006e\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_ffbbd .SdHuffAggInstanceSelection );
};};return nil ;};func (_fcdf *PageInformationSegment )Encode (w _ga .BinaryWriter )(_dgab int ,_adgg error ){const _beef ="\u0050\u0061g\u0065\u0049\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u002e\u0045\u006eco\u0064\u0065";
_eff :=make ([]byte ,4);_b .BigEndian .PutUint32 (_eff ,uint32 (_fcdf .PageBMWidth ));_dgab ,_adgg =w .Write (_eff );if _adgg !=nil {return _dgab ,_ag .Wrap (_adgg ,_beef ,"\u0077\u0069\u0064t\u0068");};_b .BigEndian .PutUint32 (_eff ,uint32 (_fcdf .PageBMHeight ));
var _gbea int ;_gbea ,_adgg =w .Write (_eff );if _adgg !=nil {return _gbea +_dgab ,_ag .Wrap (_adgg ,_beef ,"\u0068\u0065\u0069\u0067\u0068\u0074");};_dgab +=_gbea ;_b .BigEndian .PutUint32 (_eff ,uint32 (_fcdf .ResolutionX ));_gbea ,_adgg =w .Write (_eff );
if _adgg !=nil {return _gbea +_dgab ,_ag .Wrap (_adgg ,_beef ,"\u0078\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");};_dgab +=_gbea ;_b .BigEndian .PutUint32 (_eff ,uint32 (_fcdf .ResolutionY ));if _gbea ,_adgg =w .Write (_eff );_adgg !=nil {return _gbea +_dgab ,_ag .Wrap (_adgg ,_beef ,"\u0079\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");
};_dgab +=_gbea ;if _adgg =_fcdf .encodeFlags (w );_adgg !=nil {return _dgab ,_ag .Wrap (_adgg ,_beef ,"");};_dgab ++;if _gbea ,_adgg =_fcdf .encodeStripingInformation (w );_adgg !=nil {return _dgab ,_ag .Wrap (_adgg ,_beef ,"");};_dgab +=_gbea ;return _dgab ,nil ;
};func (_deca *GenericRegion )getPixel (_gee ,_edee int )int8 {if _gee < 0||_gee >=_deca .Bitmap .Width {return 0;};if _edee < 0||_edee >=_deca .Bitmap .Height {return 0;};if _deca .Bitmap .GetPixel (_gee ,_edee ){return 1;};return 0;};func (_gebf *TextRegion )decodeDfs ()(int64 ,error ){if _gebf .IsHuffmanEncoded {if _gebf .SbHuffFS ==3{if _gebf ._cfcf ==nil {var _gabe error ;
_gebf ._cfcf ,_gabe =_gebf .getUserTable (0);if _gabe !=nil {return 0,_gabe ;};};return _gebf ._cfcf .Decode (_gebf ._bcffg );};_ddeg ,_dafff :=_ee .GetStandardTable (6+int (_gebf .SbHuffFS ));if _dafff !=nil {return 0,_dafff ;};return _ddeg .Decode (_gebf ._bcffg );
};_cgfe ,_bafbf :=_gebf ._fagf .DecodeInt (_gebf ._gaed );if _bafbf !=nil {return 0,_bafbf ;};return int64 (_cgfe ),nil ;};var _ SegmentEncoder =&GenericRegion {};func (_edda *Header )subInputReader ()(_ga .StreamReader ,error ){return _ga .NewSubstreamReader (_edda .Reader ,_edda .SegmentDataStartOffset ,_edda .SegmentDataLength );
};type EndOfStripe struct{_bb _ga .StreamReader ;_agg int ;};type GenericRefinementRegion struct{_dd templater ;_bbf templater ;_bc _ga .StreamReader ;_cbb *Header ;RegionInfo *RegionSegment ;IsTPGROn bool ;TemplateID int8 ;Template templater ;GrAtX []int8 ;
GrAtY []int8 ;RegionBitmap *_ea .Bitmap ;ReferenceBitmap *_ea .Bitmap ;ReferenceDX int32 ;ReferenceDY int32 ;_ae *_be .Decoder ;_eea *_be .DecoderStats ;_aa bool ;_aab []bool ;};func (_eabgc *TableSegment )parseHeader ()error {var (_gacg int ;_cedac uint64 ;
_dfcbc error ;);_gacg ,_dfcbc =_eabgc ._dcbf .ReadBit ();if _dfcbc !=nil {return _dfcbc ;};if _gacg ==1{return _g .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0061\u0062\u006c\u0065 \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0064e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u002e\u0020\u0042\u002e\u0032\u002e1\u0020\u0043\u006f\u0064\u0065\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0066\u006c\u0061\u0067\u0073\u003a\u0020\u0042\u0069\u0074\u0020\u0037\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u007a\u0065\u0072\u006f\u002e\u0020\u0057a\u0073\u003a \u0025\u0064",_gacg );
};if _cedac ,_dfcbc =_eabgc ._dcbf .ReadBits (3);_dfcbc !=nil {return _dfcbc ;};_eabgc ._bcgaa =(int32 (_cedac )+1)&0xf;if _cedac ,_dfcbc =_eabgc ._dcbf .ReadBits (3);_dfcbc !=nil {return _dfcbc ;};_eabgc ._aeaa =(int32 (_cedac )+1)&0xf;if _cedac ,_dfcbc =_eabgc ._dcbf .ReadBits (32);
_dfcbc !=nil {return _dfcbc ;};_eabgc ._eebg =int32 (_cedac &_d .MaxInt32 );if _cedac ,_dfcbc =_eabgc ._dcbf .ReadBits (32);_dfcbc !=nil {return _dfcbc ;};_eabgc ._fgdfe =int32 (_cedac &_d .MaxInt32 );return nil ;};func (_dded *HalftoneRegion )checkInput ()error {if _dded .IsMMREncoded {if _dded .HTemplate !=0{_cb .Log .Debug ("\u0048\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030",_dded .HTemplate );
};if _dded .HSkipEnabled {_cb .Log .Debug ("\u0048\u0053\u006b\u0069\u0070\u0045\u006e\u0061\u0062\u006c\u0065\u0064\u0020\u0030\u0020\u0025\u0076\u0020(\u0073\u0068\u006f\u0075\u006c\u0064\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u0029",_dded .HSkipEnabled );
};};return nil ;};func (_dggf *PageInformationSegment )readWidthAndHeight ()error {_fgeg ,_fcfe :=_dggf ._dcbcd .ReadBits (32);if _fcfe !=nil {return _fcfe ;};_dggf .PageBMWidth =int (_fgeg &_d .MaxInt32 );_fgeg ,_fcfe =_dggf ._dcbcd .ReadBits (32);if _fcfe !=nil {return _fcfe ;
};_dggf .PageBMHeight =int (_fgeg &_d .MaxInt32 );return nil ;};type SymbolDictionary struct{_dbbb _ga .StreamReader ;SdrTemplate int8 ;SdTemplate int8 ;_cfda bool ;_gbga bool ;SdHuffAggInstanceSelection bool ;SdHuffBMSizeSelection int8 ;SdHuffDecodeWidthSelection int8 ;
SdHuffDecodeHeightSelection int8 ;UseRefinementAggregation bool ;IsHuffmanEncoded bool ;SdATX []int8 ;SdATY []int8 ;SdrATX []int8 ;SdrATY []int8 ;NumberOfExportedSymbols uint32 ;NumberOfNewSymbols uint32 ;Header *Header ;_accd uint32 ;_cfae []*_ea .Bitmap ;
_eedab uint32 ;_fbbe []*_ea .Bitmap ;_cea _ee .Tabler ;_bdebd _ee .Tabler ;_fbec _ee .Tabler ;_dfaa _ee .Tabler ;_gfdab []*_ea .Bitmap ;_edfda []*_ea .Bitmap ;_fbbed *_be .Decoder ;_fbbc *TextRegion ;_bgd *GenericRegion ;_dbcb *GenericRefinementRegion ;
_baaf *_be .DecoderStats ;_aeff *_be .DecoderStats ;_gcab *_be .DecoderStats ;_gddg *_be .DecoderStats ;_cffc *_be .DecoderStats ;_ggdf *_be .DecoderStats ;_fafe *_be .DecoderStats ;_cbda *_be .DecoderStats ;_agd *_be .DecoderStats ;_dbcg int8 ;_gfa *_ea .Bitmaps ;
_cagg []int ;_afa map[int ]int ;_gebd bool ;};func (_egee *TextRegion )setCodingStatistics ()error {if _egee ._ebef ==nil {_egee ._ebef =_be .NewStats (512,1);};if _egee ._gaed ==nil {_egee ._gaed =_be .NewStats (512,1);};if _egee ._bged ==nil {_egee ._bged =_be .NewStats (512,1);
};if _egee ._dcccc ==nil {_egee ._dcccc =_be .NewStats (512,1);};if _egee ._dgca ==nil {_egee ._dgca =_be .NewStats (512,1);};if _egee ._beeg ==nil {_egee ._beeg =_be .NewStats (512,1);};if _egee ._degb ==nil {_egee ._degb =_be .NewStats (512,1);};if _egee ._ebf ==nil {_egee ._ebf =_be .NewStats (1<<uint (_egee ._gbfbg ),1);
};if _egee ._gaa ==nil {_egee ._gaa =_be .NewStats (512,1);};if _egee ._ccabe ==nil {_egee ._ccabe =_be .NewStats (512,1);};if _egee ._fagf ==nil {var _bacba error ;_egee ._fagf ,_bacba =_be .New (_egee ._bcffg );if _bacba !=nil {return _bacba ;};};return nil ;
};func (_gcae *SymbolDictionary )setAtPixels ()error {if _gcae .IsHuffmanEncoded {return nil ;};_gaec :=1;if _gcae .SdTemplate ==0{_gaec =4;};if _gdg :=_gcae .readAtPixels (_gaec );_gdg !=nil {return _gdg ;};return nil ;};func (_ecgb *PageInformationSegment )CombinationOperatorOverrideAllowed ()bool {return _ecgb ._egcd };
func (_bcgfa *TextRegion )readRegionFlags ()error {var (_bceb int ;_bbdc uint64 ;_bcfd error ;);_bceb ,_bcfd =_bcgfa ._bcffg .ReadBit ();if _bcfd !=nil {return _bcfd ;};_bcgfa .SbrTemplate =int8 (_bceb );_bbdc ,_bcfd =_bcgfa ._bcffg .ReadBits (5);if _bcfd !=nil {return _bcfd ;
};_bcgfa .SbDsOffset =int8 (_bbdc );if _bcgfa .SbDsOffset > 0x0f{_bcgfa .SbDsOffset -=0x20;};_bceb ,_bcfd =_bcgfa ._bcffg .ReadBit ();if _bcfd !=nil {return _bcfd ;};_bcgfa .DefaultPixel =int8 (_bceb );_bbdc ,_bcfd =_bcgfa ._bcffg .ReadBits (2);if _bcfd !=nil {return _bcfd ;
};_bcgfa .CombinationOperator =_ea .CombinationOperator (int (_bbdc )&0x3);_bceb ,_bcfd =_bcgfa ._bcffg .ReadBit ();if _bcfd !=nil {return _bcfd ;};_bcgfa .IsTransposed =int8 (_bceb );_bbdc ,_bcfd =_bcgfa ._bcffg .ReadBits (2);if _bcfd !=nil {return _bcfd ;
};_bcgfa .ReferenceCorner =int16 (_bbdc )&0x3;_bbdc ,_bcfd =_bcgfa ._bcffg .ReadBits (2);if _bcfd !=nil {return _bcfd ;};_bcgfa .LogSBStrips =int16 (_bbdc )&0x3;_bcgfa .SbStrips =1<<uint (_bcgfa .LogSBStrips );_bceb ,_bcfd =_bcgfa ._bcffg .ReadBit ();if _bcfd !=nil {return _bcfd ;
};if _bceb ==1{_bcgfa .UseRefinement =true ;};_bceb ,_bcfd =_bcgfa ._bcffg .ReadBit ();if _bcfd !=nil {return _bcfd ;};if _bceb ==1{_bcgfa .IsHuffmanEncoded =true ;};return nil ;};func (_eecf *RegionSegment )parseHeader ()error {const _aecg ="p\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072";
_cb .Log .Trace ("\u005b\u0052\u0045\u0047I\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002dH\u0045A\u0044\u0045\u0052\u005d\u0020\u0042\u0065g\u0069\u006e");defer func (){_cb .Log .Trace ("\u005b\u0052\u0045G\u0049\u004f\u004e\u005d[\u0050\u0041\u0052\u0053\u0045\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_gced ,_afca :=_eecf ._fbfd .ReadBits (32);if _afca !=nil {return _ag .Wrap (_afca ,_aecg ,"\u0077\u0069\u0064t\u0068");};_eecf .BitmapWidth =uint32 (_gced &_d .MaxUint32 );_gced ,_afca =_eecf ._fbfd .ReadBits (32);if _afca !=nil {return _ag .Wrap (_afca ,_aecg ,"\u0068\u0065\u0069\u0067\u0068\u0074");
};_eecf .BitmapHeight =uint32 (_gced &_d .MaxUint32 );_gced ,_afca =_eecf ._fbfd .ReadBits (32);if _afca !=nil {return _ag .Wrap (_afca ,_aecg ,"\u0078\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_eecf .XLocation =uint32 (_gced &_d .MaxUint32 );
_gced ,_afca =_eecf ._fbfd .ReadBits (32);if _afca !=nil {return _ag .Wrap (_afca ,_aecg ,"\u0079\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_eecf .YLocation =uint32 (_gced &_d .MaxUint32 );if _ ,_afca =_eecf ._fbfd .ReadBits (5);_afca !=nil {return _ag .Wrap (_afca ,_aecg ,"\u0064i\u0072\u0079\u0020\u0072\u0065\u0061d");
};if _afca =_eecf .readCombinationOperator ();_afca !=nil {return _ag .Wrap (_afca ,_aecg ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};return nil ;};const (TSymbolDictionary Type =0;TIntermediateTextRegion Type =4;
TImmediateTextRegion Type =6;TImmediateLosslessTextRegion Type =7;TPatternDictionary Type =16;TIntermediateHalftoneRegion Type =20;TImmediateHalftoneRegion Type =22;TImmediateLosslessHalftoneRegion Type =23;TIntermediateGenericRegion Type =36;TImmediateGenericRegion Type =38;
TImmediateLosslessGenericRegion Type =39;TIntermediateGenericRefinementRegion Type =40;TImmediateGenericRefinementRegion Type =42;TImmediateLosslessGenericRefinementRegion Type =43;TPageInformation Type =48;TEndOfPage Type =49;TEndOfStrip Type =50;TEndOfFile Type =51;
TProfiles Type =52;TTables Type =53;TExtension Type =62;TBitmap Type =70;);func (_bccf *HalftoneRegion )computeSegmentDataStructure ()error {_bccf .DataOffset =_bccf ._eeca .StreamPosition ();_bccf .DataHeaderLength =_bccf .DataOffset -_bccf .DataHeaderOffset ;
_bccf .DataLength =int64 (_bccf ._eeca .Length ())-_bccf .DataHeaderLength ;return nil ;};func (_dae *GenericRefinementRegion )decodeTypicalPredictedLineTemplate1 (_fba ,_fce ,_gfb ,_ccc ,_cgg ,_cccc ,_fab ,_gdd ,_cgga int )(_ffbg error ){var (_gfc ,_fd int ;
_fdb ,_eda int ;_dgg ,_dfa int ;_eegc byte ;);if _fba > 0{_eegc ,_ffbg =_dae .RegionBitmap .GetByte (_fab -_gfb );if _ffbg !=nil {return ;};_fdb =int (_eegc );};if _gdd > 0&&_gdd <=_dae .ReferenceBitmap .Height {_eegc ,_ffbg =_dae .ReferenceBitmap .GetByte (_cgga -_ccc +_cccc );
if _ffbg !=nil {return ;};_eda =int (_eegc )<<2;};if _gdd >=0&&_gdd < _dae .ReferenceBitmap .Height {_eegc ,_ffbg =_dae .ReferenceBitmap .GetByte (_cgga +_cccc );if _ffbg !=nil {return ;};_dgg =int (_eegc );};if _gdd > -2&&_gdd < _dae .ReferenceBitmap .Height -1{_eegc ,_ffbg =_dae .ReferenceBitmap .GetByte (_cgga +_ccc +_cccc );
if _ffbg !=nil {return ;};_dfa =int (_eegc );};_gfc =((_fdb >>5)&0x6)|((_dfa >>2)&0x30)|(_dgg &0xc0)|(_eda &0x200);_fd =((_dfa >>2)&0x70)|(_dgg &0xc0)|(_eda &0x700);var _gda int ;for _edag :=0;_edag < _cgg ;_edag =_gda {var (_add int ;_cdf int ;);_gda =_edag +8;
if _add =_fce -_edag ;_add > 8{_add =8;};_aeb :=_gda < _fce ;_bbfb :=_gda < _dae .ReferenceBitmap .Width ;_bgb :=_cccc +1;if _fba > 0{_eegc =0;if _aeb {_eegc ,_ffbg =_dae .RegionBitmap .GetByte (_fab -_gfb +1);if _ffbg !=nil {return ;};};_fdb =(_fdb <<8)|int (_eegc );
};if _gdd > 0&&_gdd <=_dae .ReferenceBitmap .Height {var _adb int ;if _bbfb {_eegc ,_ffbg =_dae .ReferenceBitmap .GetByte (_cgga -_ccc +_bgb );if _ffbg !=nil {return ;};_adb =int (_eegc )<<2;};_eda =(_eda <<8)|_adb ;};if _gdd >=0&&_gdd < _dae .ReferenceBitmap .Height {_eegc =0;
if _bbfb {_eegc ,_ffbg =_dae .ReferenceBitmap .GetByte (_cgga +_bgb );if _ffbg !=nil {return ;};};_dgg =(_dgg <<8)|int (_eegc );};if _gdd > -2&&_gdd < (_dae .ReferenceBitmap .Height -1){_eegc =0;if _bbfb {_eegc ,_ffbg =_dae .ReferenceBitmap .GetByte (_cgga +_ccc +_bgb );
if _ffbg !=nil {return ;};};_dfa =(_dfa <<8)|int (_eegc );};for _gedb :=0;_gedb < _add ;_gedb ++{var _bfe int ;_abf :=(_fd >>4)&0x1ff;switch _abf {case 0x1ff:_bfe =1;case 0x00:_bfe =0;default:_dae ._eea .SetIndex (int32 (_gfc ));_bfe ,_ffbg =_dae ._ae .DecodeBit (_dae ._eea );
if _ffbg !=nil {return ;};};_eeb :=uint (7-_gedb );_cdf |=_bfe <<_eeb ;_gfc =((_gfc &0x0d6)<<1)|_bfe |(_fdb >>_eeb +5)&0x002|((_dfa >>_eeb +2)&0x010)|((_dgg >>_eeb )&0x040)|((_eda >>_eeb )&0x200);_fd =((_fd &0xdb)<<1)|((_dfa >>_eeb +2)&0x010)|((_dgg >>_eeb )&0x080)|((_eda >>_eeb )&0x400);
};_ffbg =_dae .RegionBitmap .SetByte (_fab ,byte (_cdf ));if _ffbg !=nil {return ;};_fab ++;_cgga ++;};return nil ;};func (_acg *HalftoneRegion )combineGrayscalePlanes (_acbd []*_ea .Bitmap ,_ggfg int )error {_aead :=0;for _bgbe :=0;_bgbe < _acbd [_ggfg ].Height ;
_bgbe ++{for _bfec :=0;_bfec < _acbd [_ggfg ].Width ;_bfec +=8{_gbgg ,_adgc :=_acbd [_ggfg +1].GetByte (_aead );if _adgc !=nil {return _adgc ;};_eced ,_adgc :=_acbd [_ggfg ].GetByte (_aead );if _adgc !=nil {return _adgc ;};_adgc =_acbd [_ggfg ].SetByte (_aead ,_ea .CombineBytes (_eced ,_gbgg ,_ea .CmbOpXor ));
if _adgc !=nil {return _adgc ;};_aead ++;};};return nil ;};func (_deag *TextRegion )encodeSymbols (_feef _ga .BinaryWriter )(_fcgc int ,_bccfc error ){const _cggf ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";_bccdf :=make ([]byte ,4);
_b .BigEndian .PutUint32 (_bccdf ,_deag .NumberOfSymbols );if _fcgc ,_bccfc =_feef .Write (_bccdf );_bccfc !=nil {return _fcgc ,_ag .Wrap (_bccfc ,_cggf ,"\u004e\u0075\u006dbe\u0072\u004f\u0066\u0053\u0079\u006d\u0062\u006f\u006c\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073");
};_adag ,_bccfc :=_ea .NewClassedPoints (_deag ._cbcfg ,_deag ._cdef );if _bccfc !=nil {return 0,_ag .Wrap (_bccfc ,_cggf ,"");};var _edgd ,_bbce int ;_gbaff :=_ce .New ();_gbaff .Init ();if _bccfc =_gbaff .EncodeInteger (_ce .IADT ,0);_bccfc !=nil {return _fcgc ,_ag .Wrap (_bccfc ,_cggf ,"\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0044\u0054");
};_gfab ,_bccfc :=_adag .GroupByY ();if _bccfc !=nil {return 0,_ag .Wrap (_bccfc ,_cggf ,"");};for _ ,_ddf :=range _gfab {_feeeb :=int (_ddf .YAtIndex (0));_agaa :=_feeeb -_edgd ;if _bccfc =_gbaff .EncodeInteger (_ce .IADT ,_agaa );_bccfc !=nil {return _fcgc ,_ag .Wrap (_bccfc ,_cggf ,"");
};var _cedd int ;for _agecg ,_babb :=range _ddf .IntSlice {switch _agecg {case 0:_eacee :=int (_ddf .XAtIndex (_agecg ))-_bbce ;if _bccfc =_gbaff .EncodeInteger (_ce .IAFS ,_eacee );_bccfc !=nil {return _fcgc ,_ag .Wrap (_bccfc ,_cggf ,"");};_bbce +=_eacee ;
_cedd =_bbce ;default:_cbde :=int (_ddf .XAtIndex (_agecg ))-_cedd ;if _bccfc =_gbaff .EncodeInteger (_ce .IADS ,_cbde );_bccfc !=nil {return _fcgc ,_ag .Wrap (_bccfc ,_cggf ,"");};_cedd +=_cbde ;};_cgfa ,_gaded :=_deag ._cgbg .Get (_babb );if _gaded !=nil {return _fcgc ,_ag .Wrap (_gaded ,_cggf ,"");
};_dfgg ,_babbg :=_deag ._dgef [_cgfa ];if !_babbg {_dfgg ,_babbg =_deag ._fegf [_cgfa ];if !_babbg {return _fcgc ,_ag .Errorf (_cggf ,"\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027\u0025d\u0027\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064 \u0069\u006e\u0020\u0067\u006cob\u0061\u006c\u0020\u0061\u006e\u0064\u0020\u006c\u006f\u0063\u0061\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020\u006d\u0061\u0070",_cgfa );
};};if _gaded =_gbaff .EncodeIAID (_deag ._bfaa ,_dfgg );_gaded !=nil {return _fcgc ,_ag .Wrap (_gaded ,_cggf ,"");};};if _bccfc =_gbaff .EncodeOOB (_ce .IADS );_bccfc !=nil {return _fcgc ,_ag .Wrap (_bccfc ,_cggf ,"");};};_gbaff .Final ();_edfg ,_bccfc :=_gbaff .WriteTo (_feef );
if _bccfc !=nil {return _fcgc ,_ag .Wrap (_bccfc ,_cggf ,"");};_fcgc +=int (_edfg );return _fcgc ,nil ;};func (_edcb *TextRegion )encodeFlags (_fgaa _ga .BinaryWriter )(_bece int ,_bdcac error ){const _dggfe ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _bdcac =_fgaa .WriteBit (int (_edcb .SbrTemplate ));_bdcac !=nil {return _bece ,_ag .Wrap (_bdcac ,_dggfe ,"s\u0062\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _ ,_bdcac =_fgaa .WriteBits (uint64 (_edcb .SbDsOffset ),5);_bdcac !=nil {return _bece ,_ag .Wrap (_bdcac ,_dggfe ,"\u0073\u0062\u0044\u0073\u004f\u0066\u0066\u0073\u0065\u0074");
};if _bdcac =_fgaa .WriteBit (int (_edcb .DefaultPixel ));_bdcac !=nil {return _bece ,_ag .Wrap (_bdcac ,_dggfe ,"\u0044\u0065\u0066a\u0075\u006c\u0074\u0050\u0069\u0078\u0065\u006c");};if _ ,_bdcac =_fgaa .WriteBits (uint64 (_edcb .CombinationOperator ),2);
_bdcac !=nil {return _bece ,_ag .Wrap (_bdcac ,_dggfe ,"\u0043\u006f\u006d\u0062in\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};if _bdcac =_fgaa .WriteBit (int (_edcb .IsTransposed ));_bdcac !=nil {return _bece ,_ag .Wrap (_bdcac ,_dggfe ,"\u0069\u0073\u0020\u0074\u0072\u0061\u006e\u0073\u0070\u006f\u0073\u0065\u0064");
};if _ ,_bdcac =_fgaa .WriteBits (uint64 (_edcb .ReferenceCorner ),2);_bdcac !=nil {return _bece ,_ag .Wrap (_bdcac ,_dggfe ,"\u0072\u0065f\u0065\u0072\u0065n\u0063\u0065\u0020\u0063\u006f\u0072\u006e\u0065\u0072");};if _ ,_bdcac =_fgaa .WriteBits (uint64 (_edcb .LogSBStrips ),2);
_bdcac !=nil {return _bece ,_ag .Wrap (_bdcac ,_dggfe ,"L\u006f\u0067\u0053\u0042\u0053\u0074\u0072\u0069\u0070\u0073");};var _afde int ;if _edcb .UseRefinement {_afde =1;};if _bdcac =_fgaa .WriteBit (_afde );_bdcac !=nil {return _bece ,_ag .Wrap (_bdcac ,_dggfe ,"\u0075\u0073\u0065\u0020\u0072\u0065\u0066\u0069\u006ee\u006d\u0065\u006e\u0074");
};_afde =0;if _edcb .IsHuffmanEncoded {_afde =1;};if _bdcac =_fgaa .WriteBit (_afde );_bdcac !=nil {return _bece ,_ag .Wrap (_bdcac ,_dggfe ,"u\u0073\u0065\u0020\u0068\u0075\u0066\u0066\u006d\u0061\u006e");};_bece =2;return _bece ,nil ;};func (_fbd *GenericRefinementRegion )getGrReference ()(*_ea .Bitmap ,error ){segments :=_fbd ._cbb .RTSegments ;
if len (segments )==0{return nil ,_gg .New ("\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0065\u0078is\u0074\u0073");};_dca ,_dg :=segments [0].GetSegmentData ();
if _dg !=nil {return nil ,_dg ;};_ff ,_gc :=_dca .(Regioner );if !_gc {return nil ,_g .Errorf ("\u0072\u0065\u0066\u0065\u0072r\u0065\u0064\u0020\u0074\u006f\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_dca );
};return _ff .GetRegionBitmap ();};func (_cecfg *HalftoneRegion )shiftAndFill (_bbdg int )int {_bbdg >>=8;if _bbdg < 0{_fbcd :=int (_d .Log (float64 (_ddcg (_bbdg )))/_d .Log (2));_cab :=31-_fbcd ;for _bfa :=1;_bfa < _cab ;_bfa ++{_bbdg |=1<<uint (31-_bfa );
};};return _bbdg ;};func (_cdfd *TextRegion )getUserTable (_agbfe int )(_ee .Tabler ,error ){const _gfga ="\u0067\u0065\u0074U\u0073\u0065\u0072\u0054\u0061\u0062\u006c\u0065";var _babc int ;for _ ,_cgfac :=range _cdfd .Header .RTSegments {if _cgfac .Type ==53{if _babc ==_agbfe {_bgfb ,_adeaf :=_cgfac .GetSegmentData ();
if _adeaf !=nil {return nil ,_adeaf ;};_gebbe ,_fedd :=_bgfb .(*TableSegment );if !_fedd {_cb .Log .Debug (_g .Sprintf ("\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079p\u0065\u00205\u0033\u0020\u002d\u0020\u0061\u006ed\u0020in\u0064\u0065\u0078\u003a\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_cgfac .SegmentNumber ));
return nil ,_ag .Error (_gfga ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079\u0070e\u0020\u0035\u0033\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u002a\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};return _ee .NewEncodedTable (_gebbe );};_babc ++;};};return nil ,nil ;};func (_gdgd *SymbolDictionary )setInSyms ()error {if _gdgd .Header .RTSegments !=nil {return _gdgd .retrieveImportSymbols ();};_gdgd ._cfae =make ([]*_ea .Bitmap ,0);return nil ;
};func (_dfbg *Header )writeSegmentPageAssociation (_bed _ga .BinaryWriter )(_addc int ,_bdeab error ){const _cde ="w\u0072\u0069\u0074\u0065\u0053\u0065g\u006d\u0065\u006e\u0074\u0050\u0061\u0067\u0065\u0041s\u0073\u006f\u0063i\u0061t\u0069\u006f\u006e";
if _dfbg .pageSize ()!=4{if _bdeab =_bed .WriteByte (byte (_dfbg .PageAssociation ));_bdeab !=nil {return 0,_ag .Wrap (_bdeab ,_cde ,"\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0021\u003d\u0020\u0034");};return 1,nil ;};_dbd :=make ([]byte ,4);
_b .BigEndian .PutUint32 (_dbd ,uint32 (_dfbg .PageAssociation ));if _addc ,_bdeab =_bed .Write (_dbd );_bdeab !=nil {return 0,_ag .Wrap (_bdeab ,_cde ,"\u0034 \u0062y\u0074\u0065\u0020\u0070\u0061g\u0065\u0020n\u0075\u006d\u0062\u0065\u0072");};return _addc ,nil ;
};func (_fcaa *PatternDictionary )readTemplate ()error {_ebga ,_bdfe :=_fcaa ._baa .ReadBits (2);if _bdfe !=nil {return _bdfe ;};_fcaa .HDTemplate =byte (_ebga );return nil ;};func (_bcgf *SymbolDictionary )setExportedSymbols (_bafbd []int ){for _ggbef :=uint32 (0);
_ggbef < _bcgf ._accd +_bcgf .NumberOfNewSymbols ;_ggbef ++{if _bafbd [_ggbef ]==1{var _cba *_ea .Bitmap ;if _ggbef < _bcgf ._accd {_cba =_bcgf ._cfae [_ggbef ];}else {_cba =_bcgf ._fbbe [_ggbef -_bcgf ._accd ];};_cb .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u002d\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u0020\u0041\u0064\u0064 E\u0078\u0070\u006fr\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027%\u0073\u0027",_cba );
_bcgf ._gfdab =append (_bcgf ._gfdab ,_cba );};};};func (_agba *TableSegment )HtHigh ()int32 {return _agba ._fgdfe };func (_fad *template0 )form (_dea ,_fda ,_bcd ,_eead ,_acb int16 )int16 {return (_dea <<10)|(_fda <<7)|(_bcd <<4)|(_eead <<1)|_acb ;};func (_geb *template1 )form (_gec ,_cgf ,_dbe ,_faee ,_cgb int16 )int16 {return ((_gec &0x02)<<8)|(_cgf <<6)|((_dbe &0x03)<<4)|(_faee <<1)|_cgb ;
};func (_ead *HalftoneRegion )GetPatterns ()([]*_ea .Bitmap ,error ){var (_fdd []*_ea .Bitmap ;_gfe error ;);for _ ,_gfcf :=range _ead ._bdag .RTSegments {var _deab Segmenter ;_deab ,_gfe =_gfcf .GetSegmentData ();if _gfe !=nil {_cb .Log .Debug ("\u0047e\u0074\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061 \u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025v",_gfe );
return nil ,_gfe ;};_bdbb ,_deb :=_deab .(*PatternDictionary );if !_deb {_gfe =_g .Errorf ("\u0072e\u006c\u0061t\u0065\u0064\u0020\u0073e\u0067\u006d\u0065n\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0070at\u0074\u0065\u0072n\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u003a \u0025\u0054",_deab );
return nil ,_gfe ;};var _ffca []*_ea .Bitmap ;_ffca ,_gfe =_bdbb .GetDictionary ();if _gfe !=nil {_cb .Log .Debug ("\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gfe );
return nil ,_gfe ;};_fdd =append (_fdd ,_ffca ...);};return _fdd ,nil ;};func (_bd *EndOfStripe )parseHeader (_cg *Header ,_dc _ga .StreamReader )error {_de ,_ggd :=_bd ._bb .ReadBits (32);if _ggd !=nil {return _ggd ;};_bd ._agg =int (_de &_d .MaxInt32 );
return nil ;};func (_cbc *EndOfStripe )LineNumber ()int {return _cbc ._agg };func (_gdcc *GenericRegion )decodeTemplate2 (_feba ,_cecc ,_cafb int ,_bfdg ,_ede int )(_age error ){const _gafg ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0032";
var (_ebbg ,_ageg int ;_gebbc ,_aca int ;_dcbb byte ;_bafb ,_dgc int ;);if _feba >=1{_dcbb ,_age =_gdcc .Bitmap .GetByte (_ede );if _age !=nil {return _ag .Wrap (_age ,_gafg ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0031");
};_gebbc =int (_dcbb );};if _feba >=2{_dcbb ,_age =_gdcc .Bitmap .GetByte (_ede -_gdcc .Bitmap .RowStride );if _age !=nil {return _ag .Wrap (_age ,_gafg ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0032");};_aca =int (_dcbb )<<4;
};_ebbg =(_gebbc >>3&0x7c)|(_aca >>3&0x380);for _eaff :=0;_eaff < _cafb ;_eaff =_bafb {var (_eag byte ;_agf int ;);_bafb =_eaff +8;if _aged :=_cecc -_eaff ;_aged > 8{_agf =8;}else {_agf =_aged ;};if _feba > 0{_gebbc <<=8;if _bafb < _cecc {_dcbb ,_age =_gdcc .Bitmap .GetByte (_ede +1);
if _age !=nil {return _ag .Wrap (_age ,_gafg ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0030");};_gebbc |=int (_dcbb );};};if _feba > 1{_aca <<=8;if _bafb < _cecc {_dcbb ,_age =_gdcc .Bitmap .GetByte (_ede -_gdcc .Bitmap .RowStride +1);
if _age !=nil {return _ag .Wrap (_age ,_gafg ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0031");};_aca |=int (_dcbb )<<4;};};for _ccb :=0;_ccb < _agf ;_ccb ++{_befe :=uint (10-_ccb );if _gdcc ._fbag {_ageg =_gdcc .overrideAtTemplate2 (_ebbg ,_eaff +_ccb ,_feba ,int (_eag ),_ccb );
_gdcc ._cee .SetIndex (int32 (_ageg ));}else {_gdcc ._cee .SetIndex (int32 (_ebbg ));};_dgc ,_age =_gdcc ._ddbg .DecodeBit (_gdcc ._cee );if _age !=nil {return _ag .Wrap (_age ,_gafg ,"");};_eag |=byte (_dgc <<uint (7-_ccb ));_ebbg =((_ebbg &0x1bd)<<1)|_dgc |((_gebbc >>_befe )&0x4)|((_aca >>_befe )&0x80);
};if _bab :=_gdcc .Bitmap .SetByte (_bfdg ,_eag );_bab !=nil {return _ag .Wrap (_bab ,_gafg ,"");};_bfdg ++;_ede ++;};return nil ;};func (_dcge *PatternDictionary )parseHeader ()error {_cb .Log .Trace ("\u005b\u0050\u0041\u0054\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054I\u004f\u004e\u0041\u0052\u0059\u005d[\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d\u0020b\u0065\u0067\u0069\u006e");
defer func (){_cb .Log .Trace ("\u005b\u0050\u0041T\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u005b\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_ ,_fgbd :=_dcge ._baa .ReadBits (5);if _fgbd !=nil {return _fgbd ;};if _fgbd =_dcge .readTemplate ();_fgbd !=nil {return _fgbd ;};if _fgbd =_dcge .readIsMMREncoded ();_fgbd !=nil {return _fgbd ;};if _fgbd =_dcge .readPatternWidthAndHeight ();_fgbd !=nil {return _fgbd ;
};if _fgbd =_dcge .readGrayMax ();_fgbd !=nil {return _fgbd ;};if _fgbd =_dcge .computeSegmentDataStructure ();_fgbd !=nil {return _fgbd ;};return _dcge .checkInput ();};func (_gbbbg *TextRegion )decodeRdw ()(int64 ,error ){const _bbebb ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064w";
if _gbbbg .IsHuffmanEncoded {if _gbbbg .SbHuffRDWidth ==3{if _gbbbg ._cbfdd ==nil {var (_agbd int ;_fbca error ;);if _gbbbg .SbHuffFS ==3{_agbd ++;};if _gbbbg .SbHuffDS ==3{_agbd ++;};if _gbbbg .SbHuffDT ==3{_agbd ++;};_gbbbg ._cbfdd ,_fbca =_gbbbg .getUserTable (_agbd );
if _fbca !=nil {return 0,_ag .Wrap (_fbca ,_bbebb ,"");};};return _gbbbg ._cbfdd .Decode (_gbbbg ._bcffg );};_ccef ,_fffd :=_ee .GetStandardTable (14+int (_gbbbg .SbHuffRDWidth ));if _fffd !=nil {return 0,_ag .Wrap (_fffd ,_bbebb ,"");};return _ccef .Decode (_gbbbg ._bcffg );
};_ebda ,_dgfac :=_gbbbg ._fagf .DecodeInt (_gbbbg ._beeg );if _dgfac !=nil {return 0,_ag .Wrap (_dgfac ,_bbebb ,"");};return int64 (_ebda ),nil ;};func (_daeda *PatternDictionary )readPatternWidthAndHeight ()error {_ebcg ,_ffbgc :=_daeda ._baa .ReadByte ();
if _ffbgc !=nil {return _ffbgc ;};_daeda .HdpWidth =_ebcg ;_ebcg ,_ffbgc =_daeda ._baa .ReadByte ();if _ffbgc !=nil {return _ffbgc ;};_daeda .HdpHeight =_ebcg ;return nil ;};func (_fgdfd *GenericRegion )decodeTemplate1 (_dacd ,_eaa ,_cef int ,_efc ,_aaaa int )(_cafd error ){const _cae ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0031";
var (_cceb ,_bgcf int ;_gbgb ,_faf int ;_dcbg byte ;_defd ,_gagb int ;);if _dacd >=1{_dcbg ,_cafd =_fgdfd .Bitmap .GetByte (_aaaa );if _cafd !=nil {return _ag .Wrap (_cafd ,_cae ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_gbgb =int (_dcbg );};if _dacd >=2{_dcbg ,_cafd =_fgdfd .Bitmap .GetByte (_aaaa -_fgdfd .Bitmap .RowStride );
if _cafd !=nil {return _ag .Wrap (_cafd ,_cae ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_faf =int (_dcbg )<<5;};_cceb =((_gbgb >>1)&0x1f8)|((_faf >>1)&0x1e00);for _edbc :=0;_edbc < _cef ;_edbc =_defd {var (_acbc byte ;_dgbd int ;);_defd =_edbc +8;
if _feee :=_eaa -_edbc ;_feee > 8{_dgbd =8;}else {_dgbd =_feee ;};if _dacd > 0{_gbgb <<=8;if _defd < _eaa {_dcbg ,_cafd =_fgdfd .Bitmap .GetByte (_aaaa +1);if _cafd !=nil {return _ag .Wrap (_cafd ,_cae ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");
};_gbgb |=int (_dcbg );};};if _dacd > 1{_faf <<=8;if _defd < _eaa {_dcbg ,_cafd =_fgdfd .Bitmap .GetByte (_aaaa -_fgdfd .Bitmap .RowStride +1);if _cafd !=nil {return _ag .Wrap (_cafd ,_cae ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_faf |=int (_dcbg )<<5;
};};for _bcede :=0;_bcede < _dgbd ;_bcede ++{if _fgdfd ._fbag {_bgcf =_fgdfd .overrideAtTemplate1 (_cceb ,_edbc +_bcede ,_dacd ,int (_acbc ),_bcede );_fgdfd ._cee .SetIndex (int32 (_bgcf ));}else {_fgdfd ._cee .SetIndex (int32 (_cceb ));};_gagb ,_cafd =_fgdfd ._ddbg .DecodeBit (_fgdfd ._cee );
if _cafd !=nil {return _ag .Wrap (_cafd ,_cae ,"");};_acbc |=byte (_gagb )<<uint (7-_bcede );_fffb :=uint (8-_bcede );_cceb =((_cceb &0xefb)<<1)|_gagb |((_gbgb >>_fffb )&0x8)|((_faf >>_fffb )&0x200);};if _efg :=_fgdfd .Bitmap .SetByte (_efc ,_acbc );_efg !=nil {return _ag .Wrap (_efg ,_cae ,"");
};_efc ++;_aaaa ++;};return nil ;};func (_afdb *TextRegion )setContexts (_efbc *_be .DecoderStats ,_bcbe *_be .DecoderStats ,_fbdge *_be .DecoderStats ,_eccf *_be .DecoderStats ,_egcc *_be .DecoderStats ,_agae *_be .DecoderStats ,_gagd *_be .DecoderStats ,_cfff *_be .DecoderStats ,_ecbc *_be .DecoderStats ,_bcccca *_be .DecoderStats ){_afdb ._ebef =_bcbe ;
_afdb ._gaed =_fbdge ;_afdb ._bged =_eccf ;_afdb ._dcccc =_egcc ;_afdb ._beeg =_gagd ;_afdb ._degb =_cfff ;_afdb ._ebf =_agae ;_afdb ._gaa =_ecbc ;_afdb ._ccabe =_bcccca ;_afdb ._acae =_efbc ;};func (_cagef *Header )readNumberOfReferredToSegments (_gdac _ga .StreamReader )(uint64 ,error ){const _caa ="\u0072\u0065\u0061\u0064\u004e\u0075\u006d\u0062\u0065\u0072O\u0066\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
_ddca ,_fgde :=_gdac .ReadBits (3);if _fgde !=nil {return 0,_ag .Wrap (_fgde ,_caa ,"\u0063\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0072\u0074\u0073");};_ddca &=0xf;var _gede []byte ;if _ddca <=4{_gede =make ([]byte ,5);for _dgge :=0;_dgge <=4;_dgge ++{_aagf ,_dbg :=_gdac .ReadBit ();
if _dbg !=nil {return 0,_ag .Wrap (_dbg ,_caa ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_gede [_dgge ]=byte (_aagf );};}else {_ddca ,_fgde =_gdac .ReadBits (29);if _fgde !=nil {return 0,_fgde ;};_ddca &=_d .MaxInt32 ;_gbba :=(_ddca +8)>>3;
_gbba <<=3;_gede =make ([]byte ,_gbba );var _gea uint64 ;for _gea =0;_gea < _gbba ;_gea ++{_ddea ,_eba :=_gdac .ReadBit ();if _eba !=nil {return 0,_ag .Wrap (_eba ,_caa ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_gede [_gea ]=byte (_ddea );
};};return _ddca ,nil ;};func (_debc *PatternDictionary )checkInput ()error {if _debc .HdpHeight < 1||_debc .HdpWidth < 1{return _gg .New ("in\u0076\u0061l\u0069\u0064\u0020\u0048\u0065\u0061\u0064\u0065\u0072 \u0056\u0061\u006c\u0075\u0065\u003a\u0020\u0057\u0069\u0064\u0074\u0068\u002f\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020g\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020z\u0065\u0072o");
};if _debc .IsMMREncoded {if _debc .HDTemplate !=0{_cb .Log .Debug ("\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0020\u0048\u0044\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030");
};};return nil ;};func (_bcef *HalftoneRegion )Init (hd *Header ,r _ga .StreamReader )error {_bcef ._eeca =r ;_bcef ._bdag =hd ;_bcef .RegionSegment =NewRegionSegment (r );return _bcef .parseHeader ();};func (_bddf *TextRegion )computeSymbolCodeLength ()error {if _bddf .IsHuffmanEncoded {return _bddf .symbolIDCodeLengths ();
};_bddf ._gbfbg =int8 (_d .Ceil (_d .Log (float64 (_bddf .NumberOfSymbols ))/_d .Log (2)));return nil ;};func (_gbgag *TextRegion )decodeStripT ()(_edac int64 ,_bgbd error ){if _gbgag .IsHuffmanEncoded {if _gbgag .SbHuffDT ==3{if _gbgag ._ffeb ==nil {var _cgcd int ;
if _gbgag .SbHuffFS ==3{_cgcd ++;};if _gbgag .SbHuffDS ==3{_cgcd ++;};_gbgag ._ffeb ,_bgbd =_gbgag .getUserTable (_cgcd );if _bgbd !=nil {return 0,_bgbd ;};};_edac ,_bgbd =_gbgag ._ffeb .Decode (_gbgag ._bcffg );if _bgbd !=nil {return 0,_bgbd ;};}else {var _eccb _ee .Tabler ;
_eccb ,_bgbd =_ee .GetStandardTable (11+int (_gbgag .SbHuffDT ));if _bgbd !=nil {return 0,_bgbd ;};_edac ,_bgbd =_eccb .Decode (_gbgag ._bcffg );if _bgbd !=nil {return 0,_bgbd ;};};}else {var _cdbd int32 ;_cdbd ,_bgbd =_gbgag ._fagf .DecodeInt (_gbgag ._ebef );
if _bgbd !=nil {return 0,_bgbd ;};_edac =int64 (_cdbd );};_edac *=int64 (-_gbgag .SbStrips );return _edac ,nil ;};func (_ada *SymbolDictionary )setRetainedCodingContexts (_egbg *SymbolDictionary ){_ada ._fbbed =_egbg ._fbbed ;_ada .IsHuffmanEncoded =_egbg .IsHuffmanEncoded ;
_ada .UseRefinementAggregation =_egbg .UseRefinementAggregation ;_ada .SdTemplate =_egbg .SdTemplate ;_ada .SdrTemplate =_egbg .SdrTemplate ;_ada .SdATX =_egbg .SdATX ;_ada .SdATY =_egbg .SdATY ;_ada .SdrATX =_egbg .SdrATX ;_ada .SdrATY =_egbg .SdrATY ;
_ada ._baaf =_egbg ._baaf ;};func (_bag *TextRegion )decodeID ()(int64 ,error ){if _bag .IsHuffmanEncoded {if _bag ._fgg ==nil {_gaece ,_fgbf :=_bag ._bcffg .ReadBits (byte (_bag ._gbfbg ));return int64 (_gaece ),_fgbf ;};return _bag ._fgg .Decode (_bag ._bcffg );
};return _bag ._fagf .DecodeIAID (uint64 (_bag ._gbfbg ),_bag ._ebf );};func (_gcba *SymbolDictionary )decodeAggregate (_abff ,_fadd uint32 )error {var (_fcabc int64 ;_ebd error ;);if _gcba .IsHuffmanEncoded {_fcabc ,_ebd =_gcba .huffDecodeRefAggNInst ();
if _ebd !=nil {return _ebd ;};}else {_bgec ,_aegbc :=_gcba ._fbbed .DecodeInt (_gcba ._gddg );if _aegbc !=nil {return _aegbc ;};_fcabc =int64 (_bgec );};if _fcabc > 1{return _gcba .decodeThroughTextRegion (_abff ,_fadd ,uint32 (_fcabc ));}else if _fcabc ==1{return _gcba .decodeRefinedSymbol (_abff ,_fadd );
};return nil ;};func (_dgcc *TextRegion )decodeSymbolInstances ()error {_dceeb ,_accdc :=_dgcc .decodeStripT ();if _accdc !=nil {return _accdc ;};var (_accc int64 ;_eeef uint32 ;);for _eeef < _dgcc .NumberOfSymbolInstances {_cecb ,_fdce :=_dgcc .decodeDT ();
if _fdce !=nil {return _fdce ;};_dceeb +=_cecb ;var _bcfb int64 ;_gffc :=true ;_dgcc ._acedf =0;for {if _gffc {_bcfb ,_fdce =_dgcc .decodeDfs ();if _fdce !=nil {return _fdce ;};_accc +=_bcfb ;_dgcc ._acedf =_accc ;_gffc =false ;}else {_acfeb ,_afag :=_dgcc .decodeIds ();
if _a .Is (_afag ,_fc .ErrOOB ){break ;};if _afag !=nil {return _afag ;};if _eeef >=_dgcc .NumberOfSymbolInstances {break ;};_dgcc ._acedf +=_acfeb +int64 (_dgcc .SbDsOffset );};_egfe ,_bffcb :=_dgcc .decodeCurrentT ();if _bffcb !=nil {return _bffcb ;};
_fcc :=_dceeb +_egfe ;_becf ,_bffcb :=_dgcc .decodeID ();if _bffcb !=nil {return _bffcb ;};_fcec ,_bffcb :=_dgcc .decodeRI ();if _bffcb !=nil {return _bffcb ;};_fbef ,_bffcb :=_dgcc .decodeIb (_fcec ,_becf );if _bffcb !=nil {return _bffcb ;};if _bffcb =_dgcc .blit (_fbef ,_fcc );
_bffcb !=nil {return _bffcb ;};_eeef ++;};};return nil ;};const (ORandom OrganizationType =iota ;OSequential ;);func (_ffg *PageInformationSegment )parseHeader ()(_cadc error ){_cb .Log .Trace ("\u005b\u0050\u0061\u0067\u0065I\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067m\u0065\u006e\u0074\u005d\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u002e\u002e");
defer func (){var _ffbb ="[\u0050\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072m\u0061\u0074\u0069\u006f\u006e\u0053\u0065gm\u0065\u006e\u0074\u005d \u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065ad\u0065\u0072 \u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064";
if _cadc !=nil {_ffbb +="\u0020\u0077\u0069t\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u0020"+_cadc .Error ();}else {_ffbb +="\u0020\u0073\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079";};_cb .Log .Trace (_ffbb );}();if _cadc =_ffg .readWidthAndHeight ();
_cadc !=nil {return _cadc ;};if _cadc =_ffg .readResolution ();_cadc !=nil {return _cadc ;};_ ,_cadc =_ffg ._dcbcd .ReadBit ();if _cadc !=nil {return _cadc ;};if _cadc =_ffg .readCombinationOperatorOverrideAllowed ();_cadc !=nil {return _cadc ;};if _cadc =_ffg .readRequiresAuxiliaryBuffer ();
_cadc !=nil {return _cadc ;};if _cadc =_ffg .readCombinationOperator ();_cadc !=nil {return _cadc ;};if _cadc =_ffg .readDefaultPixelValue ();_cadc !=nil {return _cadc ;};if _cadc =_ffg .readContainsRefinement ();_cadc !=nil {return _cadc ;};if _cadc =_ffg .readIsLossless ();
_cadc !=nil {return _cadc ;};if _cadc =_ffg .readIsStriped ();_cadc !=nil {return _cadc ;};if _cadc =_ffg .readMaxStripeSize ();_cadc !=nil {return _cadc ;};if _cadc =_ffg .checkInput ();_cadc !=nil {return _cadc ;};_cb .Log .Trace ("\u0025\u0073",_ffg );
return nil ;};type Type int ;func (_bgee *TextRegion )GetRegionInfo ()*RegionSegment {return _bgee .RegionInfo };type OrganizationType uint8 ;func (_efff *PatternDictionary )extractPatterns (_bafa *_ea .Bitmap )error {var _acgc int ;_gedaa :=make ([]*_ea .Bitmap ,_efff .GrayMax +1);
for _acgc <=int (_efff .GrayMax ){_fgea :=int (_efff .HdpWidth )*_acgc ;_daed :=_f .Rect (_fgea ,0,_fgea +int (_efff .HdpWidth ),int (_efff .HdpHeight ));_dcac ,_agee :=_ea .Extract (_daed ,_bafa );if _agee !=nil {return _agee ;};_gedaa [_acgc ]=_dcac ;
_acgc ++;};_efff .Patterns =_gedaa ;return nil ;};func (_eafea *TableSegment )Init (h *Header ,r _ga .StreamReader )error {_eafea ._dcbf =r ;return _eafea .parseHeader ();};func (_feeae *SymbolDictionary )retrieveImportSymbols ()error {for _ ,_gefb :=range _feeae .Header .RTSegments {if _gefb .Type ==0{_acfa ,_eccdgc :=_gefb .GetSegmentData ();
if _eccdgc !=nil {return _eccdgc ;};_gadcc ,_bfeg :=_acfa .(*SymbolDictionary );if !_bfeg {return _g .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0044\u0061\u0074a\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u003a\u0020%\u0054",_acfa );
};_dfba ,_eccdgc :=_gadcc .GetDictionary ();if _eccdgc !=nil {return _g .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064 \u0073\u0065\u0067m\u0065\u006e\u0074 \u0077\u0069t\u0068\u0020\u0069\u006e\u0064\u0065x\u003a %\u0064\u0020\u0067\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0073",_gefb .SegmentNumber ,_eccdgc .Error ());
};_feeae ._cfae =append (_feeae ._cfae ,_dfba ...);_feeae ._accd +=_gadcc .NumberOfExportedSymbols ;};};return nil ;};func (_eccdg *SymbolDictionary )decodeHeightClassCollectiveBitmap (_bffg int64 ,_gcfe ,_fced uint32 )(*_ea .Bitmap ,error ){if _bffg ==0{_faaa :=_ea .New (int (_fced ),int (_gcfe ));
var (_edae byte ;_febc error ;);for _cffd :=0;_cffd < len (_faaa .Data );_cffd ++{_edae ,_febc =_eccdg ._dbbb .ReadByte ();if _febc !=nil {return nil ,_febc ;};if _febc =_faaa .SetByte (_cffd ,_edae );_febc !=nil {return nil ,_febc ;};};return _faaa ,nil ;
};if _eccdg ._bgd ==nil {_eccdg ._bgd =NewGenericRegion (_eccdg ._dbbb );};_eccdg ._bgd .setParameters (true ,_eccdg ._dbbb .StreamPosition (),_bffg ,_gcfe ,_fced );_bdab ,_gacd :=_eccdg ._bgd .GetRegionBitmap ();if _gacd !=nil {return nil ,_gacd ;};return _bdab ,nil ;
};func (_afge *SymbolDictionary )decodeRefinedSymbol (_bcgc ,_agb uint32 )error {var (_bfc int ;_gacce ,_eaad int32 ;);if _afge .IsHuffmanEncoded {_cgcbf ,_fged :=_afge ._dbbb .ReadBits (byte (_afge ._dbcg ));if _fged !=nil {return _fged ;};_bfc =int (_cgcbf );
_bfag ,_fged :=_ee .GetStandardTable (15);if _fged !=nil {return _fged ;};_aebf ,_fged :=_bfag .Decode (_afge ._dbbb );if _fged !=nil {return _fged ;};_gacce =int32 (_aebf );_aebf ,_fged =_bfag .Decode (_afge ._dbbb );if _fged !=nil {return _fged ;};_eaad =int32 (_aebf );
_bfag ,_fged =_ee .GetStandardTable (1);if _fged !=nil {return _fged ;};if _ ,_fged =_bfag .Decode (_afge ._dbbb );_fged !=nil {return _fged ;};_afge ._dbbb .Align ();}else {_gcde ,_fgbc :=_afge ._fbbed .DecodeIAID (uint64 (_afge ._dbcg ),_afge ._agd );
if _fgbc !=nil {return _fgbc ;};_bfc =int (_gcde );_gacce ,_fgbc =_afge ._fbbed .DecodeInt (_afge ._ggdf );if _fgbc !=nil {return _fgbc ;};_eaad ,_fgbc =_afge ._fbbed .DecodeInt (_afge ._fafe );if _fgbc !=nil {return _fgbc ;};};if _daad :=_afge .setSymbolsArray ();
_daad !=nil {return _daad ;};_defb :=_afge ._edfda [_bfc ];if _dcbge :=_afge .decodeNewSymbols (_bcgc ,_agb ,_defb ,_gacce ,_eaad );_dcbge !=nil {return _dcbge ;};if _afge .IsHuffmanEncoded {_afge ._dbbb .Align ();};return nil ;};type Documenter interface{GetPage (int )(Pager ,error );
GetGlobalSegment (int )(*Header ,error );};var (_gca Segmenter ;_abee =map[Type ]func ()Segmenter {TSymbolDictionary :func ()Segmenter {return &SymbolDictionary {}},TIntermediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateLosslessTextRegion :func ()Segmenter {return &TextRegion {}},TPatternDictionary :func ()Segmenter {return &PatternDictionary {}},TIntermediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateLosslessHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TIntermediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateLosslessGenericRegion :func ()Segmenter {return &GenericRegion {}},TIntermediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateLosslessGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TPageInformation :func ()Segmenter {return &PageInformationSegment {}},TEndOfPage :func ()Segmenter {return _gca },TEndOfStrip :func ()Segmenter {return &EndOfStripe {}},TEndOfFile :func ()Segmenter {return _gca },TProfiles :func ()Segmenter {return _gca },TTables :func ()Segmenter {return &TableSegment {}},TExtension :func ()Segmenter {return _gca },TBitmap :func ()Segmenter {return _gca }};
);func (_abbf *SymbolDictionary )addSymbol (_aagfa Regioner )error {_edaf ,_cbgad :=_aagfa .GetRegionBitmap ();if _cbgad !=nil {return _cbgad ;};_abbf ._fbbe [_abbf ._eedab ]=_edaf ;_abbf ._edfda =append (_abbf ._edfda ,_edaf );_cb .Log .Trace ("\u005b\u0053YM\u0042\u004f\u004c \u0044\u0049\u0043\u0054ION\u0041RY\u005d\u0020\u0041\u0064\u0064\u0065\u0064 s\u0079\u006d\u0062\u006f\u006c\u003a\u0020%\u0073",_edaf );
return nil ;};func (_fcdb *Header )pageSize ()uint {if _fcdb .PageAssociation <=255{return 1;};return 4;};func (_cfg *Header )CleanSegmentData (){if _cfg .SegmentData !=nil {_cfg .SegmentData =nil ;};};func (_bdagd *TextRegion )setParameters (_aebb *_be .Decoder ,_becfe ,_beag bool ,_cfdc ,_ddeaf uint32 ,_efgc uint32 ,_cacca int8 ,_ecabc uint32 ,_facc int8 ,_cebc _ea .CombinationOperator ,_cdgg int8 ,_geac int16 ,_gefgd ,_fdabg ,_bddfe ,_agfc ,_fadea ,_edad ,_fgcgc ,_eaceb ,_ecbb ,_gaaa int8 ,_acfddd ,_feeba []int8 ,_fcbge []*_ea .Bitmap ,_edde int8 ){_bdagd ._fagf =_aebb ;
_bdagd .IsHuffmanEncoded =_becfe ;_bdagd .UseRefinement =_beag ;_bdagd .RegionInfo .BitmapWidth =_cfdc ;_bdagd .RegionInfo .BitmapHeight =_ddeaf ;_bdagd .NumberOfSymbolInstances =_efgc ;_bdagd .SbStrips =_cacca ;_bdagd .NumberOfSymbols =_ecabc ;_bdagd .DefaultPixel =_facc ;
_bdagd .CombinationOperator =_cebc ;_bdagd .IsTransposed =_cdgg ;_bdagd .ReferenceCorner =_geac ;_bdagd .SbDsOffset =_gefgd ;_bdagd .SbHuffFS =_fdabg ;_bdagd .SbHuffDS =_bddfe ;_bdagd .SbHuffDT =_agfc ;_bdagd .SbHuffRDWidth =_fadea ;_bdagd .SbHuffRDHeight =_edad ;
_bdagd .SbHuffRSize =_ecbb ;_bdagd .SbHuffRDX =_fgcgc ;_bdagd .SbHuffRDY =_eaceb ;_bdagd .SbrTemplate =_gaaa ;_bdagd .SbrATX =_acfddd ;_bdagd .SbrATY =_feeba ;_bdagd .Symbols =_fcbge ;_bdagd ._gbfbg =_edde ;};func (_ggbeb *SymbolDictionary )readAtPixels (_bffea int )error {_ggbeb .SdATX =make ([]int8 ,_bffea );
_ggbeb .SdATY =make ([]int8 ,_bffea );var (_bbfa byte ;_agceg error ;);for _gceb :=0;_gceb < _bffea ;_gceb ++{_bbfa ,_agceg =_ggbeb ._dbbb .ReadByte ();if _agceg !=nil {return _agceg ;};_ggbeb .SdATX [_gceb ]=int8 (_bbfa );_bbfa ,_agceg =_ggbeb ._dbbb .ReadByte ();
if _agceg !=nil {return _agceg ;};_ggbeb .SdATY [_gceb ]=int8 (_bbfa );};return nil ;};func (_abdc *SymbolDictionary )readRefinementAtPixels (_gbae int )error {_abdc .SdrATX =make ([]int8 ,_gbae );_abdc .SdrATY =make ([]int8 ,_gbae );var (_befc byte ;_bcggd error ;
);for _egcdb :=0;_egcdb < _gbae ;_egcdb ++{_befc ,_bcggd =_abdc ._dbbb .ReadByte ();if _bcggd !=nil {return _bcggd ;};_abdc .SdrATX [_egcdb ]=int8 (_befc );_befc ,_bcggd =_abdc ._dbbb .ReadByte ();if _bcggd !=nil {return _bcggd ;};_abdc .SdrATY [_egcdb ]=int8 (_befc );
};return nil ;};func (_beg *GenericRegion )setParametersMMR (_bffe bool ,_bbgb ,_fde int64 ,_dceg ,_afd uint32 ,_eae byte ,_febd ,_afc bool ,_efd ,_efcc []int8 ){_beg .DataOffset =_bbgb ;_beg .DataLength =_fde ;_beg .RegionSegment =&RegionSegment {};_beg .RegionSegment .BitmapHeight =_dceg ;
_beg .RegionSegment .BitmapWidth =_afd ;_beg .GBTemplate =_eae ;_beg .IsMMREncoded =_bffe ;_beg .IsTPGDon =_febd ;_beg .GBAtX =_efd ;_beg .GBAtY =_efcc ;};func (_gcd *HalftoneRegion )computeX (_dga ,_gade int )int {return _gcd .shiftAndFill (int (_gcd .HGridX )+_dga *int (_gcd .HRegionY )+_gade *int (_gcd .HRegionX ));
};func (_ecb *RegionSegment )readCombinationOperator ()error {_ebgf ,_agec :=_ecb ._fbfd .ReadBits (3);if _agec !=nil {return _agec ;};_ecb .CombinaionOperator =_ea .CombinationOperator (_ebgf &0xF);return nil ;};func (_bfbc *SymbolDictionary )Init (h *Header ,r _ga .StreamReader )error {_bfbc .Header =h ;
_bfbc ._dbbb =r ;return _bfbc .parseHeader ();};func (_cddbg *Header )writeSegmentNumber (_gbd _ga .BinaryWriter )(_feacg int ,_ebg error ){_ccdb :=make ([]byte ,4);_b .BigEndian .PutUint32 (_ccdb ,_cddbg .SegmentNumber );if _feacg ,_ebg =_gbd .Write (_ccdb );
_ebg !=nil {return 0,_ag .Wrap (_ebg ,"\u0048e\u0061\u0064\u0065\u0072.\u0077\u0072\u0069\u0074\u0065S\u0065g\u006de\u006e\u0074\u004e\u0075\u006d\u0062\u0065r","");};return _feacg ,nil ;};func (_adea *TableSegment )HtPS ()int32 {return _adea ._aeaa };
func (_cbba *TextRegion )decodeRdx ()(int64 ,error ){const _ecfa ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064x";if _cbba .IsHuffmanEncoded {if _cbba .SbHuffRDX ==3{if _cbba ._fcfd ==nil {var (_fgdc int ;_eggd error ;);if _cbba .SbHuffFS ==3{_fgdc ++;};
if _cbba .SbHuffDS ==3{_fgdc ++;};if _cbba .SbHuffDT ==3{_fgdc ++;};if _cbba .SbHuffRDWidth ==3{_fgdc ++;};if _cbba .SbHuffRDHeight ==3{_fgdc ++;};_cbba ._fcfd ,_eggd =_cbba .getUserTable (_fgdc );if _eggd !=nil {return 0,_ag .Wrap (_eggd ,_ecfa ,"");};
};return _cbba ._fcfd .Decode (_cbba ._bcffg );};_ccdge ,_ded :=_ee .GetStandardTable (14+int (_cbba .SbHuffRDX ));if _ded !=nil {return 0,_ag .Wrap (_ded ,_ecfa ,"");};return _ccdge .Decode (_cbba ._bcffg );};_bbdaa ,_dfced :=_cbba ._fagf .DecodeInt (_cbba ._gaa );
if _dfced !=nil {return 0,_ag .Wrap (_dfced ,_ecfa ,"");};return int64 (_bbdaa ),nil ;};func (_aaef *Header )readSegmentNumber (_abc _ga .StreamReader )error {const _bcbg ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";
_fefd :=make ([]byte ,4);_ ,_dbcd :=_abc .Read (_fefd );if _dbcd !=nil {return _ag .Wrap (_dbcd ,_bcbg ,"");};_aaef .SegmentNumber =_b .BigEndian .Uint32 (_fefd );return nil ;};func (_ca *GenericRefinementRegion )decodeSLTP ()(int ,error ){_ca .Template .setIndex (_ca ._eea );
return _ca ._ae .DecodeBit (_ca ._eea );};func (_dda *TextRegion )decodeDT ()(_fecf int64 ,_eeeg error ){if _dda .IsHuffmanEncoded {if _dda .SbHuffDT ==3{_fecf ,_eeeg =_dda ._ffeb .Decode (_dda ._bcffg );if _eeeg !=nil {return 0,_eeeg ;};}else {var _aff _ee .Tabler ;
_aff ,_eeeg =_ee .GetStandardTable (11+int (_dda .SbHuffDT ));if _eeeg !=nil {return 0,_eeeg ;};_fecf ,_eeeg =_aff .Decode (_dda ._bcffg );if _eeeg !=nil {return 0,_eeeg ;};};}else {var _fcfea int32 ;_fcfea ,_eeeg =_dda ._fagf .DecodeInt (_dda ._ebef );
if _eeeg !=nil {return ;};_fecf =int64 (_fcfea );};_fecf *=int64 (_dda .SbStrips );return _fecf ,nil ;};func (_bga *SymbolDictionary )decodeHeightClassDeltaHeightWithHuffman ()(int64 ,error ){switch _bga .SdHuffDecodeHeightSelection {case 0:_cagd ,_cgda :=_ee .GetStandardTable (4);
if _cgda !=nil {return 0,_cgda ;};return _cagd .Decode (_bga ._dbbb );case 1:_gbbbb ,_eacc :=_ee .GetStandardTable (5);if _eacc !=nil {return 0,_eacc ;};return _gbbbb .Decode (_bga ._dbbb );case 3:if _bga ._cea ==nil {_dafcc ,_eabg :=_ee .GetStandardTable (0);
if _eabg !=nil {return 0,_eabg ;};_bga ._cea =_dafcc ;};return _bga ._cea .Decode (_bga ._dbbb );};return 0,nil ;};func (_beff *GenericRefinementRegion )setParameters (_dfge *_be .DecoderStats ,_af *_be .Decoder ,_cec int8 ,_gfd ,_egae uint32 ,_bebb *_ea .Bitmap ,_fef ,_feb int32 ,_cacc bool ,_eege []int8 ,_cgea []int8 ){_cb .Log .Trace ("\u005b\u0047\u0045NE\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052E\u0047I\u004fN\u005d \u0073\u0065\u0074\u0050\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");
if _dfge !=nil {_beff ._eea =_dfge ;};if _af !=nil {_beff ._ae =_af ;};_beff .TemplateID =_cec ;_beff .RegionInfo .BitmapWidth =_gfd ;_beff .RegionInfo .BitmapHeight =_egae ;_beff .ReferenceBitmap =_bebb ;_beff .ReferenceDX =_fef ;_beff .ReferenceDY =_feb ;
_beff .IsTPGROn =_cacc ;_beff .GrAtX =_eege ;_beff .GrAtY =_cgea ;_beff .RegionBitmap =nil ;_cb .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073 f\u0069\u006ei\u0073\u0068\u0065\u0064\u002e\u0020\u0025\u0073",_beff );
};func (_bgf *GenericRegion )parseHeader ()(_fec error ){_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052I\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0050\u0061\u0072s\u0069\u006e\u0067\u0048\u0065\u0061\u0064e\u0072\u002e\u002e\u002e");
defer func (){if _fec !=nil {_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e]\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065r\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0077\u0069th\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u0025\u0076",_fec );
}else {_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049C\u002d\u0052\u0045G\u0049\u004f\u004e]\u0020\u0050a\u0072\u0073\u0069\u006e\u0067\u0048e\u0061de\u0072\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0053\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079\u002e\u002e\u002e");
};}();var (_bda int ;_aga uint64 ;);if _fec =_bgf .RegionSegment .parseHeader ();_fec !=nil {return _fec ;};if _ ,_fec =_bgf ._daag .ReadBits (3);_fec !=nil {return _fec ;};_bda ,_fec =_bgf ._daag .ReadBit ();if _fec !=nil {return _fec ;};if _bda ==1{_bgf .UseExtTemplates =true ;
};_bda ,_fec =_bgf ._daag .ReadBit ();if _fec !=nil {return _fec ;};if _bda ==1{_bgf .IsTPGDon =true ;};_aga ,_fec =_bgf ._daag .ReadBits (2);if _fec !=nil {return _fec ;};_bgf .GBTemplate =byte (_aga &0xf);_bda ,_fec =_bgf ._daag .ReadBit ();if _fec !=nil {return _fec ;
};if _bda ==1{_bgf .IsMMREncoded =true ;};if !_bgf .IsMMREncoded {_ceec :=1;if _bgf .GBTemplate ==0{_ceec =4;if _bgf .UseExtTemplates {_ceec =12;};};if _fec =_bgf .readGBAtPixels (_ceec );_fec !=nil {return _fec ;};};if _fec =_bgf .computeSegmentDataStructure ();
_fec !=nil {return _fec ;};_cb .Log .Trace ("\u0025\u0073",_bgf );return nil ;};func (_dada *HalftoneRegion )GetRegionBitmap ()(*_ea .Bitmap ,error ){if _dada .HalftoneRegionBitmap !=nil {return _dada .HalftoneRegionBitmap ,nil ;};var _fegc error ;_dada .HalftoneRegionBitmap =_ea .New (int (_dada .RegionSegment .BitmapWidth ),int (_dada .RegionSegment .BitmapHeight ));
if _dada .Patterns ==nil ||len (_dada .Patterns )==0{_dada .Patterns ,_fegc =_dada .GetPatterns ();if _fegc !=nil {return nil ,_fegc ;};};if _dada .HDefaultPixel ==1{_dada .HalftoneRegionBitmap .SetDefaultPixel ();};_ccec :=_d .Ceil (_d .Log (float64 (len (_dada .Patterns )))/_d .Log (2));
_daagf :=int (_ccec );var _eeda [][]int ;_eeda ,_fegc =_dada .grayScaleDecoding (_daagf );if _fegc !=nil {return nil ,_fegc ;};if _fegc =_dada .renderPattern (_eeda );_fegc !=nil {return nil ,_fegc ;};return _dada .HalftoneRegionBitmap ,nil ;};func (_dccge *TextRegion )decodeRdy ()(int64 ,error ){const _gdebb ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064y";
if _dccge .IsHuffmanEncoded {if _dccge .SbHuffRDY ==3{if _dccge ._bdac ==nil {var (_fdgd int ;_ffeef error ;);if _dccge .SbHuffFS ==3{_fdgd ++;};if _dccge .SbHuffDS ==3{_fdgd ++;};if _dccge .SbHuffDT ==3{_fdgd ++;};if _dccge .SbHuffRDWidth ==3{_fdgd ++;
};if _dccge .SbHuffRDHeight ==3{_fdgd ++;};if _dccge .SbHuffRDX ==3{_fdgd ++;};_dccge ._bdac ,_ffeef =_dccge .getUserTable (_fdgd );if _ffeef !=nil {return 0,_ag .Wrap (_ffeef ,_gdebb ,"");};};return _dccge ._bdac .Decode (_dccge ._bcffg );};_bcbcba ,_affa :=_ee .GetStandardTable (14+int (_dccge .SbHuffRDY ));
if _affa !=nil {return 0,_affa ;};return _bcbcba .Decode (_dccge ._bcffg );};_aacdd ,_fffc :=_dccge ._fagf .DecodeInt (_dccge ._ccabe );if _fffc !=nil {return 0,_ag .Wrap (_fffc ,_gdebb ,"");};return int64 (_aacdd ),nil ;};func (_babd *TextRegion )createRegionBitmap ()error {_babd .RegionBitmap =_ea .New (int (_babd .RegionInfo .BitmapWidth ),int (_babd .RegionInfo .BitmapHeight ));
if _babd .DefaultPixel !=0{_babd .RegionBitmap .SetDefaultPixel ();};return nil ;};func (_fcgb *GenericRegion )overrideAtTemplate3 (_fecec ,_bbfd ,_aeab ,_gfdf ,_gege int )int {_fecec &=0x3EF;if _fcgb .GBAtY [0]==0&&_fcgb .GBAtX [0]>=-int8 (_gege ){_fecec |=(_gfdf >>uint (7-(int8 (_gege )+_fcgb .GBAtX [0]))&0x1)<<4;
}else {_fecec |=int (_fcgb .getPixel (_bbfd +int (_fcgb .GBAtX [0]),_aeab +int (_fcgb .GBAtY [0])))<<4;};return _fecec ;};func (_fdafg *SymbolDictionary )huffDecodeRefAggNInst ()(int64 ,error ){if !_fdafg .SdHuffAggInstanceSelection {_bfbca ,_bbbf :=_ee .GetStandardTable (1);
if _bbbf !=nil {return 0,_bbbf ;};return _bfbca .Decode (_fdafg ._dbbb );};if _fdafg ._dfaa ==nil {var (_aacc int ;_gdaec error ;);if _fdafg .SdHuffDecodeHeightSelection ==3{_aacc ++;};if _fdafg .SdHuffDecodeWidthSelection ==3{_aacc ++;};if _fdafg .SdHuffBMSizeSelection ==3{_aacc ++;
};_fdafg ._dfaa ,_gdaec =_fdafg .getUserTable (_aacc );if _gdaec !=nil {return 0,_gdaec ;};};return _fdafg ._dfaa .Decode (_fdafg ._dbbb );};var _ SegmentEncoder =&RegionSegment {};func (_afgd *PageInformationSegment )Init (h *Header ,r _ga .StreamReader )(_cbga error ){_afgd ._dcbcd =r ;
if _cbga =_afgd .parseHeader ();_cbga !=nil {return _ag .Wrap (_cbga ,"P\u0061\u0067\u0065\u0049\u006e\u0066o\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065g\u006d\u0065\u006et\u002eI\u006e\u0069\u0074","");};return nil ;};func (_aggbc *PageInformationSegment )readRequiresAuxiliaryBuffer ()error {_cgfd ,_fffe :=_aggbc ._dcbcd .ReadBit ();
if _fffe !=nil {return _fffe ;};if _cgfd ==1{_aggbc ._afcge =true ;};return nil ;};func (_faec *PatternDictionary )setGbAtPixels (){if _faec .HDTemplate ==0{_faec .GBAtX =make ([]int8 ,4);_faec .GBAtY =make ([]int8 ,4);_faec .GBAtX [0]=-int8 (_faec .HdpWidth );
_faec .GBAtY [0]=0;_faec .GBAtX [1]=-3;_faec .GBAtY [1]=-1;_faec .GBAtX [2]=2;_faec .GBAtY [2]=-2;_faec .GBAtX [3]=-2;_faec .GBAtY [3]=-2;}else {_faec .GBAtX =[]int8 {-int8 (_faec .HdpWidth )};_faec .GBAtY =[]int8 {0};};};type GenericRegion struct{_daag _ga .StreamReader ;
DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;UseExtTemplates bool ;IsTPGDon bool ;GBTemplate byte ;IsMMREncoded bool ;UseMMR bool ;GBAtX []int8 ;GBAtY []int8 ;GBAtOverride []bool ;_fbag bool ;
Bitmap *_ea .Bitmap ;_ddbg *_be .Decoder ;_cee *_be .DecoderStats ;_cda *_fb .Decoder ;};func (_abgf *GenericRegion )computeSegmentDataStructure ()error {_abgf .DataOffset =_abgf ._daag .StreamPosition ();_abgf .DataHeaderLength =_abgf .DataOffset -_abgf .DataHeaderOffset ;
_abgf .DataLength =int64 (_abgf ._daag .Length ())-_abgf .DataHeaderLength ;return nil ;};func (_bege *PatternDictionary )readIsMMREncoded ()error {_bgfa ,_fgbe :=_bege ._baa .ReadBit ();if _fgbe !=nil {return _fgbe ;};if _bgfa !=0{_bege .IsMMREncoded =true ;
};return nil ;};func (_ecfc *PatternDictionary )computeSegmentDataStructure ()error {_ecfc .DataOffset =_ecfc ._baa .StreamPosition ();_ecfc .DataHeaderLength =_ecfc .DataOffset -_ecfc .DataHeaderOffset ;_ecfc .DataLength =int64 (_ecfc ._baa .Length ())-_ecfc .DataHeaderLength ;
return nil ;};type Regioner interface{GetRegionBitmap ()(*_ea .Bitmap ,error );GetRegionInfo ()*RegionSegment ;};func (_eg *GenericRefinementRegion )decodeOptimized (_bef ,_eee ,_ega ,_gf ,_fff ,_ab ,_bac int )error {var (_caf error ;_cgd int ;_eef int ;
);_cbf :=_bef -int (_eg .ReferenceDY );if _cbcf :=int (-_eg .ReferenceDX );_cbcf > 0{_cgd =_cbcf ;};_egc :=_eg .ReferenceBitmap .GetByteIndex (_cgd ,_cbf );if _eg .ReferenceDX > 0{_eef =int (_eg .ReferenceDX );};_abg :=_eg .RegionBitmap .GetByteIndex (_eef ,_bef );
switch _eg .TemplateID {case 0:_caf =_eg .decodeTemplate (_bef ,_eee ,_ega ,_gf ,_fff ,_ab ,_bac ,_abg ,_cbf ,_egc ,_eg ._dd );case 1:_caf =_eg .decodeTemplate (_bef ,_eee ,_ega ,_gf ,_fff ,_ab ,_bac ,_abg ,_cbf ,_egc ,_eg ._bbf );};return _caf ;};type EncodeInitializer interface{InitEncode ();
};func (_gagg *GenericRefinementRegion )decodeTemplate (_dfb ,_dde ,_bfd ,_bcee ,_cge ,_cbfa ,_gga ,_ggdc ,_aabc ,_feg int ,_beb templater )(_ace error ){var (_gdaf ,_aaab ,_acf ,_bde ,_egb int16 ;_egag ,_def ,_ffef ,_dfd int ;_cfe byte ;);if _aabc >=1&&(_aabc -1)< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg -_bcee );
if _ace !=nil {return ;};_egag =int (_cfe );};if _aabc >=0&&(_aabc )< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg );if _ace !=nil {return ;};_def =int (_cfe );};if _aabc >=-1&&(_aabc +1)< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg +_bcee );
if _ace !=nil {return ;};_ffef =int (_cfe );};_feg ++;if _dfb >=1{_cfe ,_ace =_gagg .RegionBitmap .GetByte (_ggdc -_bfd );if _ace !=nil {return ;};_dfd =int (_cfe );};_ggdc ++;_bcfe :=_gagg .ReferenceDX %8;_fcb :=6+_bcfe ;_fcbd :=_feg %_bcee ;if _fcb >=0{if _fcb < 8{_gdaf =int16 (_egag >>uint (_fcb ))&0x07;
};if _fcb < 8{_aaab =int16 (_def >>uint (_fcb ))&0x07;};if _fcb < 8{_acf =int16 (_ffef >>uint (_fcb ))&0x07;};if _fcb ==6&&_fcbd > 1{if _aabc >=1&&(_aabc -1)< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg -_bcee -2);
if _ace !=nil {return _ace ;};_gdaf |=int16 (_cfe <<2)&0x04;};if _aabc >=0&&_aabc < _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg -2);if _ace !=nil {return _ace ;};_aaab |=int16 (_cfe <<2)&0x04;};if _aabc >=-1&&_aabc +1< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg +_bcee -2);
if _ace !=nil {return _ace ;};_acf |=int16 (_cfe <<2)&0x04;};};if _fcb ==0{_egag =0;_def =0;_ffef =0;if _fcbd < _bcee -1{if _aabc >=1&&_aabc -1< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg -_bcee );if _ace !=nil {return _ace ;
};_egag =int (_cfe );};if _aabc >=0&&_aabc < _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg );if _ace !=nil {return _ace ;};_def =int (_cfe );};if _aabc >=-1&&_aabc +1< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg +_bcee );
if _ace !=nil {return _ace ;};_ffef =int (_cfe );};};_feg ++;};}else {_gdaf =int16 (_egag <<1)&0x07;_aaab =int16 (_def <<1)&0x07;_acf =int16 (_ffef <<1)&0x07;_egag =0;_def =0;_ffef =0;if _fcbd < _bcee -1{if _aabc >=1&&_aabc -1< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg -_bcee );
if _ace !=nil {return _ace ;};_egag =int (_cfe );};if _aabc >=0&&_aabc < _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg );if _ace !=nil {return _ace ;};_def =int (_cfe );};if _aabc >=-1&&_aabc +1< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg +_bcee );
if _ace !=nil {return _ace ;};_ffef =int (_cfe );};_feg ++;};_gdaf |=int16 ((_egag >>7)&0x07);_aaab |=int16 ((_def >>7)&0x07);_acf |=int16 ((_ffef >>7)&0x07);};_bde =int16 (_dfd >>6);_egb =0;_agc :=(2-_bcfe )%8;_egag <<=uint (_agc );_def <<=uint (_agc );
_ffef <<=uint (_agc );_dfd <<=2;var _dac int ;for _aee :=0;_aee < _dde ;_aee ++{_eac :=_aee &0x07;_ddb :=_beb .form (_gdaf ,_aaab ,_acf ,_bde ,_egb );if _gagg ._aa {_cfe ,_ace =_gagg .RegionBitmap .GetByte (_gagg .RegionBitmap .GetByteIndex (_aee ,_dfb ));
if _ace !=nil {return _ace ;};_gagg ._eea .SetIndex (int32 (_gagg .overrideAtTemplate0 (int (_ddb ),_aee ,_dfb ,int (_cfe ),_eac )));}else {_gagg ._eea .SetIndex (int32 (_ddb ));};_dac ,_ace =_gagg ._ae .DecodeBit (_gagg ._eea );if _ace !=nil {return _ace ;
};if _ace =_gagg .RegionBitmap .SetPixel (_aee ,_dfb ,byte (_dac ));_ace !=nil {return _ace ;};_gdaf =((_gdaf <<1)|0x01&int16 (_egag >>7))&0x07;_aaab =((_aaab <<1)|0x01&int16 (_def >>7))&0x07;_acf =((_acf <<1)|0x01&int16 (_ffef >>7))&0x07;_bde =((_bde <<1)|0x01&int16 (_dfd >>7))&0x07;
_egb =int16 (_dac );if (_aee -int (_gagg .ReferenceDX ))%8==5{_egag =0;_def =0;_ffef =0;if ((_aee -int (_gagg .ReferenceDX ))/8)+1< _gagg .ReferenceBitmap .RowStride {if _aabc >=1&&(_aabc -1)< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg -_bcee );
if _ace !=nil {return _ace ;};_egag =int (_cfe );};if _aabc >=0&&_aabc < _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg );if _ace !=nil {return _ace ;};_def =int (_cfe );};if _aabc >=-1&&(_aabc +1)< _gagg .ReferenceBitmap .Height {_cfe ,_ace =_gagg .ReferenceBitmap .GetByte (_feg +_bcee );
if _ace !=nil {return _ace ;};_ffef =int (_cfe );};};_feg ++;}else {_egag <<=1;_def <<=1;_ffef <<=1;};if _eac ==5&&_dfb >=1{if ((_aee >>3)+1)>=_gagg .RegionBitmap .RowStride {_dfd =0;}else {_cfe ,_ace =_gagg .RegionBitmap .GetByte (_ggdc -_bfd );if _ace !=nil {return _ace ;
};_dfd =int (_cfe );};_ggdc ++;}else {_dfd <<=1;};};return nil ;};func (_cgffc *TextRegion )decodeSymInRefSize ()(int64 ,error ){const _acag ="\u0064e\u0063o\u0064\u0065\u0053\u0079\u006dI\u006e\u0052e\u0066\u0053\u0069\u007a\u0065";if _cgffc .SbHuffRSize ==0{_dbdf ,_dfeg :=_ee .GetStandardTable (1);
if _dfeg !=nil {return 0,_ag .Wrap (_dfeg ,_acag ,"");};return _dbdf .Decode (_cgffc ._bcffg );};if _cgffc ._aacd ==nil {var (_efge int ;_bgaea error ;);if _cgffc .SbHuffFS ==3{_efge ++;};if _cgffc .SbHuffDS ==3{_efge ++;};if _cgffc .SbHuffDT ==3{_efge ++;
};if _cgffc .SbHuffRDWidth ==3{_efge ++;};if _cgffc .SbHuffRDHeight ==3{_efge ++;};if _cgffc .SbHuffRDX ==3{_efge ++;};if _cgffc .SbHuffRDY ==3{_efge ++;};_cgffc ._aacd ,_bgaea =_cgffc .getUserTable (_efge );if _bgaea !=nil {return 0,_ag .Wrap (_bgaea ,_acag ,"");
};};_bdad ,_begf :=_cgffc ._aacd .Decode (_cgffc ._bcffg );if _begf !=nil {return 0,_ag .Wrap (_begf ,_acag ,"");};return _bdad ,nil ;};func (_dcc *GenericRefinementRegion )Init (header *Header ,r _ga .StreamReader )error {_dcc ._cbb =header ;_dcc ._bc =r ;
_dcc .RegionInfo =NewRegionSegment (r );return _dcc .parseHeader ();};type templater interface{form (_gab ,_baf ,_gad ,_gba ,_bdb int16 )int16 ;setIndex (_aec *_be .DecoderStats );};func (_gbfc *SymbolDictionary )encodeFlags (_gefe _ga .BinaryWriter )(_cggb int ,_ffcd error ){const _bcag ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _ffcd =_gefe .SkipBits (3);_ffcd !=nil {return 0,_ag .Wrap (_ffcd ,_bcag ,"\u0065\u006d\u0070\u0074\u0079\u0020\u0062\u0069\u0074\u0073");};var _acfe int ;if _gbfc .SdrTemplate > 0{_acfe =1;};if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"s\u0064\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};_acfe =0;if _gbfc .SdTemplate > 1{_acfe =1;};if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_acfe =0;if _gbfc .SdTemplate ==1||_gbfc .SdTemplate ==3{_acfe =1;
};if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_acfe =0;if _gbfc ._cfda {_acfe =1;};if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"\u0063\u006f\u0064in\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0065\u0064");
};_acfe =0;if _gbfc ._gbga {_acfe =1;};if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"\u0063\u006f\u0064\u0069ng\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0075\u0073\u0065\u0064");};_acfe =0;if _gbfc .SdHuffAggInstanceSelection {_acfe =1;
};if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"\u0073\u0064\u0048\u0075\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074");};_acfe =int (_gbfc .SdHuffBMSizeSelection );if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"\u0073\u0064\u0048u\u0066\u0066\u0042\u006d\u0053\u0069\u007a\u0065");
};_acfe =0;if _gbfc .SdHuffDecodeWidthSelection > 1{_acfe =1;};if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_acfe =0;switch _gbfc .SdHuffDecodeWidthSelection {case 1,3:_acfe =1;
};if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_acfe =0;if _gbfc .SdHuffDecodeHeightSelection > 1{_acfe =1;};if _ffcd =_gefe .WriteBit (_acfe );
_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_acfe =0;switch _gbfc .SdHuffDecodeHeightSelection {case 1,3:_acfe =1;};if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");
};_acfe =0;if _gbfc .UseRefinementAggregation {_acfe =1;};if _ffcd =_gefe .WriteBit (_acfe );_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"\u0073\u0064\u0052\u0065\u0066\u0041\u0067\u0067");};_acfe =0;if _gbfc .IsHuffmanEncoded {_acfe =1;};if _ffcd =_gefe .WriteBit (_acfe );
_ffcd !=nil {return _cggb ,_ag .Wrap (_ffcd ,_bcag ,"\u0073\u0064\u0048\u0075\u0066\u0066");};return 2,nil ;};func (_abfc *GenericRegion )readGBAtPixels (_gdae int )error {const _ddc ="\u0072\u0065\u0061\u0064\u0047\u0042\u0041\u0074\u0050i\u0078\u0065\u006c\u0073";
_abfc .GBAtX =make ([]int8 ,_gdae );_abfc .GBAtY =make ([]int8 ,_gdae );for _ffcb :=0;_ffcb < _gdae ;_ffcb ++{_gecd ,_daff :=_abfc ._daag .ReadByte ();if _daff !=nil {return _ag .Wrapf (_daff ,_ddc ,"\u0058\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_ffcb );
};_abfc .GBAtX [_ffcb ]=int8 (_gecd );_gecd ,_daff =_abfc ._daag .ReadByte ();if _daff !=nil {return _ag .Wrapf (_daff ,_ddc ,"\u0059\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_ffcb );};_abfc .GBAtY [_ffcb ]=int8 (_gecd );};return nil ;
};func (_fdcf *SymbolDictionary )encodeATFlags (_gdaa _ga .BinaryWriter )(_egg int ,_acgf error ){const _cbfb ="\u0065\u006e\u0063\u006f\u0064\u0065\u0041\u0054\u0046\u006c\u0061\u0067\u0073";if _fdcf .IsHuffmanEncoded ||_fdcf .SdTemplate !=0{return 0,nil ;
};_cbfd :=4;if _fdcf .SdTemplate !=0{_cbfd =1;};for _bacg :=0;_bacg < _cbfd ;_bacg ++{if _acgf =_gdaa .WriteByte (byte (_fdcf .SdATX [_bacg ]));_acgf !=nil {return _egg ,_ag .Wrapf (_acgf ,_cbfb ,"\u0053d\u0041\u0054\u0058\u005b\u0025\u0064]",_bacg );};
_egg ++;if _acgf =_gdaa .WriteByte (byte (_fdcf .SdATY [_bacg ]));_acgf !=nil {return _egg ,_ag .Wrapf (_acgf ,_cbfb ,"\u0053d\u0041\u0054\u0059\u005b\u0025\u0064]",_bacg );};_egg ++;};return _egg ,nil ;};func (_gfca *GenericRegion )GetRegionBitmap ()(_bea *_ea .Bitmap ,_dcg error ){if _gfca .Bitmap !=nil {return _gfca .Bitmap ,nil ;
};if _gfca .IsMMREncoded {if _gfca ._cda ==nil {_gfca ._cda ,_dcg =_fb .New (_gfca ._daag ,int (_gfca .RegionSegment .BitmapWidth ),int (_gfca .RegionSegment .BitmapHeight ),_gfca .DataOffset ,_gfca .DataLength );if _dcg !=nil {return nil ,_dcg ;};};_gfca .Bitmap ,_dcg =_gfca ._cda .UncompressMMR ();
return _gfca .Bitmap ,_dcg ;};if _dcg =_gfca .updateOverrideFlags ();_dcg !=nil {return nil ,_dcg ;};var _cged int ;if _gfca ._ddbg ==nil {_gfca ._ddbg ,_dcg =_be .New (_gfca ._daag );if _dcg !=nil {return nil ,_dcg ;};};if _gfca ._cee ==nil {_gfca ._cee =_be .NewStats (65536,1);
};_gfca .Bitmap =_ea .New (int (_gfca .RegionSegment .BitmapWidth ),int (_gfca .RegionSegment .BitmapHeight ));_eca :=int (uint32 (_gfca .Bitmap .Width +7)&(^uint32 (7)));for _aafd :=0;_aafd < _gfca .Bitmap .Height ;_aafd ++{if _gfca .IsTPGDon {var _dgeg int ;
_dgeg ,_dcg =_gfca .decodeSLTP ();if _dcg !=nil {return nil ,_dcg ;};_cged ^=_dgeg ;};if _cged ==1{if _aafd > 0{if _dcg =_gfca .copyLineAbove (_aafd );_dcg !=nil {return nil ,_dcg ;};};}else {if _dcg =_gfca .decodeLine (_aafd ,_gfca .Bitmap .Width ,_eca );
_dcg !=nil {return nil ,_dcg ;};};};return _gfca .Bitmap ,nil ;};func (_cfdga *SymbolDictionary )encodeRefinementATFlags (_bdgd _ga .BinaryWriter )(_bgcfg int ,_cbgc error ){const _cffa ="\u0065\u006e\u0063od\u0065\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if !_cfdga .UseRefinementAggregation ||_cfdga .SdrTemplate !=0{return 0,nil ;};for _gbbg :=0;_gbbg < 2;_gbbg ++{if _cbgc =_bdgd .WriteByte (byte (_cfdga .SdrATX [_gbbg ]));_cbgc !=nil {return _bgcfg ,_ag .Wrapf (_cbgc ,_cffa ,"\u0053\u0064\u0072\u0041\u0054\u0058\u005b\u0025\u0064\u005d",_gbbg );
};_bgcfg ++;if _cbgc =_bdgd .WriteByte (byte (_cfdga .SdrATY [_gbbg ]));_cbgc !=nil {return _bgcfg ,_ag .Wrapf (_cbgc ,_cffa ,"\u0053\u0064\u0072\u0041\u0054\u0059\u005b\u0025\u0064\u005d",_gbbg );};_bgcfg ++;};return _bgcfg ,nil ;};func (_cfce *TableSegment )HtOOB ()int32 {return _cfce ._gefd };
func (_faed *GenericRegion )Size ()int {return _faed .RegionSegment .Size ()+1+2*len (_faed .GBAtX )};func (_ggb *template0 )setIndex (_gbbc *_be .DecoderStats ){_gbbc .SetIndex (0x100)};func (_aebg *SymbolDictionary )parseHeader ()(_edbf error ){_cb .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _edbf !=nil {_cb .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u0020\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u005b\u0050\u0041\u0052SE\u002d\u0048\u0045A\u0044\u0045R\u005d\u0020\u0066\u0061\u0069\u006ce\u0064\u002e \u0025\u0076",_edbf );
}else {_cb .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _edbf =_aebg .readRegionFlags ();_edbf !=nil {return _edbf ;};if _edbf =_aebg .setAtPixels ();_edbf !=nil {return _edbf ;};if _edbf =_aebg .setRefinementAtPixels ();_edbf !=nil {return _edbf ;};if _edbf =_aebg .readNumberOfExportedSymbols ();_edbf !=nil {return _edbf ;
};if _edbf =_aebg .readNumberOfNewSymbols ();_edbf !=nil {return _edbf ;};if _edbf =_aebg .setInSyms ();_edbf !=nil {return _edbf ;};if _aebg ._gbga {_edbfg :=_aebg .Header .RTSegments ;for _afcb :=len (_edbfg )-1;_afcb >=0;_afcb --{if _edbfg [_afcb ].Type ==0{_bbbc ,_bgdg :=_edbfg [_afcb ].SegmentData .(*SymbolDictionary );
if !_bgdg {_edbf =_g .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074:\u0020\u0025\u0076\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020S\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006fna\u0072\u0079\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_edbfg [_afcb ]);
return _edbf ;};if _bbbc ._gbga {_aebg .setRetainedCodingContexts (_bbbc );};break ;};};};if _edbf =_aebg .checkInput ();_edbf !=nil {return _edbf ;};return nil ;};func (_cabg *SymbolDictionary )getToExportFlags ()([]int ,error ){var (_fag int ;_gegb int32 ;
_bfdc error ;_baced =int32 (_cabg ._accd +_cabg .NumberOfNewSymbols );_beffc =make ([]int ,_baced ););for _aeag :=int32 (0);_aeag < _baced ;_aeag +=_gegb {if _cabg .IsHuffmanEncoded {_gbcc ,_aedf :=_ee .GetStandardTable (1);if _aedf !=nil {return nil ,_aedf ;
};_abeb ,_aedf :=_gbcc .Decode (_cabg ._dbbb );if _aedf !=nil {return nil ,_aedf ;};_gegb =int32 (_abeb );}else {_gegb ,_bfdc =_cabg ._fbbed .DecodeInt (_cabg ._cffc );if _bfdc !=nil {return nil ,_bfdc ;};};if _gegb !=0{for _gcfd :=_aeag ;_gcfd < _aeag +_gegb ;
_gcfd ++{_beffc [_gcfd ]=_fag ;};};if _fag ==0{_fag =1;}else {_fag =0;};};return _beffc ,nil ;};func (_dgb *GenericRegion )decodeTemplate0b (_aecd ,_bfb ,_adg int ,_gcf ,_ccd int )(_gaggc error ){const _dfdfa ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0062";
var (_adba ,_gae int ;_ffd ,_feed int ;_fgf byte ;_ebb int ;);if _aecd >=1{_fgf ,_gaggc =_dgb .Bitmap .GetByte (_ccd );if _gaggc !=nil {return _ag .Wrap (_gaggc ,_dfdfa ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_ffd =int (_fgf );};if _aecd >=2{_fgf ,_gaggc =_dgb .Bitmap .GetByte (_ccd -_dgb .Bitmap .RowStride );
if _gaggc !=nil {return _ag .Wrap (_gaggc ,_dfdfa ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_feed =int (_fgf )<<6;};_adba =(_ffd &0xf0)|(_feed &0x3800);for _daae :=0;_daae < _adg ;_daae =_ebb {var (_aag byte ;_edb int ;);_ebb =_daae +8;if _cdae :=_bfb -_daae ;
_cdae > 8{_edb =8;}else {_edb =_cdae ;};if _aecd > 0{_ffd <<=8;if _ebb < _bfb {_fgf ,_gaggc =_dgb .Bitmap .GetByte (_ccd +1);if _gaggc !=nil {return _ag .Wrap (_gaggc ,_dfdfa ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_ffd |=int (_fgf );};};
if _aecd > 1{_feed <<=8;if _ebb < _bfb {_fgf ,_gaggc =_dgb .Bitmap .GetByte (_ccd -_dgb .Bitmap .RowStride +1);if _gaggc !=nil {return _ag .Wrap (_gaggc ,_dfdfa ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_feed |=int (_fgf )<<6;};};for _fcdaa :=0;
_fcdaa < _edb ;_fcdaa ++{_cad :=uint (7-_fcdaa );if _dgb ._fbag {_gae =_dgb .overrideAtTemplate0b (_adba ,_daae +_fcdaa ,_aecd ,int (_aag ),_fcdaa ,int (_cad ));_dgb ._cee .SetIndex (int32 (_gae ));}else {_dgb ._cee .SetIndex (int32 (_adba ));};var _adbc int ;
_adbc ,_gaggc =_dgb ._ddbg .DecodeBit (_dgb ._cee );if _gaggc !=nil {return _ag .Wrap (_gaggc ,_dfdfa ,"");};_aag |=byte (_adbc <<_cad );_adba =((_adba &0x7bf7)<<1)|_adbc |((_ffd >>_cad )&0x10)|((_feed >>_cad )&0x800);};if _gdb :=_dgb .Bitmap .SetByte (_gcf ,_aag );
_gdb !=nil {return _ag .Wrap (_gdb ,_dfdfa ,"");};_gcf ++;_ccd ++;};return nil ;};var _ templater =&template0 {};func (_eeff *GenericRefinementRegion )parseHeader ()(_gbc error ){_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072s\u0069\u006e\u0067\u0020\u0048e\u0061\u0064e\u0072\u002e\u002e\u002e");
_fcg :=_fe .Now ();defer func (){if _gbc ==nil {_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045G\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020h\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0069\u006e\u0069\u0073\u0068id\u0020\u0069\u006e\u003a\u0020\u0025\u0064\u0020\u006e\u0073",_fe .Since (_fcg ).Nanoseconds ());
}else {_cb .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0073",_gbc );
};}();if _gbc =_eeff .RegionInfo .parseHeader ();_gbc !=nil {return _gbc ;};_ ,_gbc =_eeff ._bc .ReadBits (6);if _gbc !=nil {return _gbc ;};_eeff .IsTPGROn ,_gbc =_eeff ._bc .ReadBool ();if _gbc !=nil {return _gbc ;};var _bbe int ;_bbe ,_gbc =_eeff ._bc .ReadBit ();
if _gbc !=nil {return _gbc ;};_eeff .TemplateID =int8 (_bbe );switch _eeff .TemplateID {case 0:_eeff .Template =_eeff ._dd ;if _gbc =_eeff .readAtPixels ();_gbc !=nil {return ;};case 1:_eeff .Template =_eeff ._bbf ;};return nil ;};func (_bcga *PageInformationSegment )readDefaultPixelValue ()error {_adf ,_fdaf :=_bcga ._dcbcd .ReadBit ();
if _fdaf !=nil {return _fdaf ;};_bcga .DefaultPixelValue =uint8 (_adf &0xf);return nil ;};func (_ebcc *SymbolDictionary )setRefinementAtPixels ()error {if !_ebcc .UseRefinementAggregation ||_ebcc .SdrTemplate !=0{return nil ;};if _abeaa :=_ebcc .readRefinementAtPixels (2);
_abeaa !=nil {return _abeaa ;};return nil ;};func (_ecea *Header )readSegmentDataLength (_acfdd _ga .StreamReader )(_aad error ){_ecea .SegmentDataLength ,_aad =_acfdd .ReadBits (32);if _aad !=nil {return _aad ;};_ecea .SegmentDataLength &=_d .MaxInt32 ;
return nil ;};func (_gbe *GenericRegion )decodeTemplate3 (_aacg ,_bcb ,_ggaf int ,_eed ,_gfbf int )(_bff error ){const _abgb ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0033";var (_dff ,_cagc int ;_dgba int ;_ffed byte ;
_bbef ,_dadg int ;);if _aacg >=1{_ffed ,_bff =_gbe .Bitmap .GetByte (_gfbf );if _bff !=nil {return _ag .Wrap (_bff ,_abgb ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_dgba =int (_ffed );};_dff =(_dgba >>1)&0x70;for _ced :=0;_ced < _ggaf ;_ced =_bbef {var (_ccdf byte ;
_ecf int ;);_bbef =_ced +8;if _cacb :=_bcb -_ced ;_cacb > 8{_ecf =8;}else {_ecf =_cacb ;};if _aacg >=1{_dgba <<=8;if _bbef < _bcb {_ffed ,_bff =_gbe .Bitmap .GetByte (_gfbf +1);if _bff !=nil {return _ag .Wrap (_bff ,_abgb ,"\u0069\u006e\u006e\u0065\u0072\u0020\u002d\u0020\u006c\u0069\u006e\u0065 \u003e\u003d\u0020\u0031");
};_dgba |=int (_ffed );};};for _gcc :=0;_gcc < _ecf ;_gcc ++{if _gbe ._fbag {_cagc =_gbe .overrideAtTemplate3 (_dff ,_ced +_gcc ,_aacg ,int (_ccdf ),_gcc );_gbe ._cee .SetIndex (int32 (_cagc ));}else {_gbe ._cee .SetIndex (int32 (_dff ));};_dadg ,_bff =_gbe ._ddbg .DecodeBit (_gbe ._cee );
if _bff !=nil {return _ag .Wrap (_bff ,_abgb ,"");};_ccdf |=byte (_dadg )<<byte (7-_gcc );_dff =((_dff &0x1f7)<<1)|_dadg |((_dgba >>uint (8-_gcc ))&0x010);};if _fcbg :=_gbe .Bitmap .SetByte (_eed ,_ccdf );_fcbg !=nil {return _ag .Wrap (_fcbg ,_abgb ,"");
};_eed ++;_gfbf ++;};return nil ;};func (_egaf *TextRegion )readAmountOfSymbolInstances ()error {_gaecf ,_gadb :=_egaf ._bcffg .ReadBits (32);if _gadb !=nil {return _gadb ;};_egaf .NumberOfSymbolInstances =uint32 (_gaecf &_d .MaxUint32 );_gbgd :=_egaf .RegionInfo .BitmapWidth *_egaf .RegionInfo .BitmapHeight ;
if _gbgd < _egaf .NumberOfSymbolInstances {_cb .Log .Debug ("\u004c\u0069\u006d\u0069t\u0069\u006e\u0067\u0020t\u0068\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020d\u0065\u0063\u006f\u0064e\u0064\u0020\u0073\u0079m\u0062\u006f\u006c\u0020\u0069n\u0073\u0074\u0061\u006e\u0063\u0065\u0073 \u0074\u006f\u0020\u006f\u006ee\u0020\u0070\u0065\u0072\u0020\u0070\u0069\u0078\u0065l\u0020\u0028\u0020\u0025\u0064\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064\u0020\u006f\u0066\u0020\u0025\u0064\u0029",_gbgd ,_egaf .NumberOfSymbolInstances );
_egaf .NumberOfSymbolInstances =_gbgd ;};return nil ;};func (_gd *EndOfStripe )Init (h *Header ,r _ga .StreamReader )error {_gd ._bb =r ;return _gd .parseHeader (h ,r );};func (_edbg *Header )String ()string {_ecgg :=&_fa .Builder {};_ecgg .WriteString ("\u000a[\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045A\u0044\u0045\u0052\u005d\u000a");
_ecgg .WriteString (_g .Sprintf ("\t\u002d\u0020\u0053\u0065gm\u0065n\u0074\u004e\u0075\u006d\u0062e\u0072\u003a\u0020\u0025\u0076\u000a",_edbg .SegmentNumber ));_ecgg .WriteString (_g .Sprintf ("\u0009\u002d\u0020T\u0079\u0070\u0065\u003a\u0020\u0025\u0076\u000a",_edbg .Type ));
_ecgg .WriteString (_g .Sprintf ("\u0009-\u0020R\u0065\u0074\u0061\u0069\u006eF\u006c\u0061g\u003a\u0020\u0025\u0076\u000a",_edbg .RetainFlag ));_ecgg .WriteString (_g .Sprintf ("\u0009\u002d\u0020Pa\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_edbg .PageAssociation ));
_ecgg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0050\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074i\u006fn\u0046\u0069\u0065\u006c\u0064\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_edbg .PageAssociationFieldSize ));
_ecgg .WriteString ("\u0009-\u0020R\u0054\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u0053\u003a\u000a");for _ ,_dcee :=range _edbg .RTSNumbers {_ecgg .WriteString (_g .Sprintf ("\u0009\t\u002d\u0020\u0025\u0064\u000a",_dcee ));};_ecgg .WriteString (_g .Sprintf ("\t\u002d \u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0065n\u0067\u0074\u0068\u003a %\u0076\u000a",_edbg .HeaderLength ));
_ecgg .WriteString (_g .Sprintf ("\u0009-\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061L\u0065n\u0067\u0074\u0068\u003a\u0020\u0025\u0076\n",_edbg .SegmentDataLength ));_ecgg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074D\u0061\u0074\u0061\u0053\u0074\u0061\u0072t\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0076\u000a",_edbg .SegmentDataStartOffset ));
return _ecgg .String ();};func (_bcf *GenericRefinementRegion )decodeTypicalPredictedLineTemplate0 (_aed ,_cac ,_bcff ,_gbb ,_aaa ,_db ,_bbgc ,_cbg ,_ceb int )error {var (_ef ,_da ,_ed ,_eeg ,_aeg ,_ad int ;_acc byte ;_fbc error ;);if _aed > 0{_acc ,_fbc =_bcf .RegionBitmap .GetByte (_bbgc -_bcff );
if _fbc !=nil {return _fbc ;};_ed =int (_acc );};if _cbg > 0&&_cbg <=_bcf .ReferenceBitmap .Height {_acc ,_fbc =_bcf .ReferenceBitmap .GetByte (_ceb -_gbb +_db );if _fbc !=nil {return _fbc ;};_eeg =int (_acc )<<4;};if _cbg >=0&&_cbg < _bcf .ReferenceBitmap .Height {_acc ,_fbc =_bcf .ReferenceBitmap .GetByte (_ceb +_db );
if _fbc !=nil {return _fbc ;};_aeg =int (_acc )<<1;};if _cbg > -2&&_cbg < _bcf .ReferenceBitmap .Height -1{_acc ,_fbc =_bcf .ReferenceBitmap .GetByte (_ceb +_gbb +_db );if _fbc !=nil {return _fbc ;};_ad =int (_acc );};_ef =((_ed >>5)&0x6)|((_ad >>2)&0x30)|(_aeg &0x180)|(_eeg &0xc00);
var _ffe int ;for _df :=0;_df < _aaa ;_df =_ffe {var _cdd int ;_ffe =_df +8;var _ge int ;if _ge =_cac -_df ;_ge > 8{_ge =8;};_cc :=_ffe < _cac ;_cf :=_ffe < _bcf .ReferenceBitmap .Width ;_dfg :=_db +1;if _aed > 0{_acc =0;if _cc {_acc ,_fbc =_bcf .RegionBitmap .GetByte (_bbgc -_bcff +1);
if _fbc !=nil {return _fbc ;};};_ed =(_ed <<8)|int (_acc );};if _cbg > 0&&_cbg <=_bcf .ReferenceBitmap .Height {var _daa int ;if _cf {_acc ,_fbc =_bcf .ReferenceBitmap .GetByte (_ceb -_gbb +_dfg );if _fbc !=nil {return _fbc ;};_daa =int (_acc )<<4;};_eeg =(_eeg <<8)|_daa ;
};if _cbg >=0&&_cbg < _bcf .ReferenceBitmap .Height {var _gef int ;if _cf {_acc ,_fbc =_bcf .ReferenceBitmap .GetByte (_ceb +_dfg );if _fbc !=nil {return _fbc ;};_gef =int (_acc )<<1;};_aeg =(_aeg <<8)|_gef ;};if _cbg > -2&&_cbg < (_bcf .ReferenceBitmap .Height -1){_acc =0;
if _cf {_acc ,_fbc =_bcf .ReferenceBitmap .GetByte (_ceb +_gbb +_dfg );if _fbc !=nil {return _fbc ;};};_ad =(_ad <<8)|int (_acc );};for _dbb :=0;_dbb < _ge ;_dbb ++{var _gag int ;_ggf :=false ;_dfc :=(_ef >>4)&0x1ff;if _dfc ==0x1ff{_ggf =true ;_gag =1;
}else if _dfc ==0x00{_ggf =true ;};if !_ggf {if _bcf ._aa {_da =_bcf .overrideAtTemplate0 (_ef ,_df +_dbb ,_aed ,_cdd ,_dbb );_bcf ._eea .SetIndex (int32 (_da ));}else {_bcf ._eea .SetIndex (int32 (_ef ));};_gag ,_fbc =_bcf ._ae .DecodeBit (_bcf ._eea );
if _fbc !=nil {return _fbc ;};};_ged :=uint (7-_dbb );_cdd |=_gag <<_ged ;_ef =((_ef &0xdb6)<<1)|_gag |(_ed >>_ged +5)&0x002|((_ad >>_ged +2)&0x010)|((_aeg >>_ged )&0x080)|((_eeg >>_ged )&0x400);};_fbc =_bcf .RegionBitmap .SetByte (_bbgc ,byte (_cdd ));
if _fbc !=nil {return _fbc ;};_bbgc ++;_ceb ++;};return nil ;};func (_fgbec *SymbolDictionary )decodeNewSymbols (_dgff ,_feea uint32 ,_agbf *_ea .Bitmap ,_gbbb ,_aabda int32 )error {if _fgbec ._dbcb ==nil {_fgbec ._dbcb =_aae (_fgbec ._dbbb ,nil );if _fgbec ._fbbed ==nil {var _aefc error ;
_fgbec ._fbbed ,_aefc =_be .New (_fgbec ._dbbb );if _aefc !=nil {return _aefc ;};};if _fgbec ._baaf ==nil {_fgbec ._baaf =_be .NewStats (65536,1);};};_fgbec ._dbcb .setParameters (_fgbec ._baaf ,_fgbec ._fbbed ,_fgbec .SdrTemplate ,_dgff ,_feea ,_agbf ,_gbbb ,_aabda ,false ,_fgbec .SdrATX ,_fgbec .SdrATY );
return _fgbec .addSymbol (_fgbec ._dbcb );};func (_beffb *TextRegion )GetRegionBitmap ()(*_ea .Bitmap ,error ){if _beffb .RegionBitmap !=nil {return _beffb .RegionBitmap ,nil ;};if !_beffb .IsHuffmanEncoded {if _agfe :=_beffb .setCodingStatistics ();_agfe !=nil {return nil ,_agfe ;
};};if _eefc :=_beffb .createRegionBitmap ();_eefc !=nil {return nil ,_eefc ;};if _gfae :=_beffb .decodeSymbolInstances ();_gfae !=nil {return nil ,_gfae ;};return _beffb .RegionBitmap ,nil ;};func (_acfd *GenericRegion )setParametersWithAt (_bee bool ,_edeb byte ,_gbec ,_cfb bool ,_fcbdb ,_aabfc []int8 ,_cfdg ,_fgdd uint32 ,_bdeb *_be .DecoderStats ,_geda *_be .Decoder ){_acfd .IsMMREncoded =_bee ;
_acfd .GBTemplate =_edeb ;_acfd .IsTPGDon =_gbec ;_acfd .GBAtX =_fcbdb ;_acfd .GBAtY =_aabfc ;_acfd .RegionSegment .BitmapHeight =_fgdd ;_acfd .RegionSegment .BitmapWidth =_cfdg ;_acfd ._cda =nil ;_acfd .Bitmap =nil ;if _bdeb !=nil {_acfd ._cee =_bdeb ;
};if _geda !=nil {_acfd ._ddbg =_geda ;};_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049O\u004e\u005d\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0053\u0044\u0041t\u003a\u0020\u0025\u0073",_acfd );
};func (_dbbe *SymbolDictionary )decodeHeightClassDeltaHeight ()(int64 ,error ){if _dbbe .IsHuffmanEncoded {return _dbbe .decodeHeightClassDeltaHeightWithHuffman ();};_abce ,_acd :=_dbbe ._fbbed .DecodeInt (_dbbe ._aeff );if _acd !=nil {return 0,_acd ;
};return int64 (_abce ),nil ;};func (_fcbc *SymbolDictionary )getSymbol (_feace int )(*_ea .Bitmap ,error ){const _acec ="\u0067e\u0074\u0053\u0079\u006d\u0062\u006fl";_fcab ,_ggafc :=_fcbc ._gfa .GetBitmap (_fcbc ._cagg [_feace ]);if _ggafc !=nil {return nil ,_ag .Wrap (_ggafc ,_acec ,"\u0063\u0061n\u0027\u0074\u0020g\u0065\u0074\u0020\u0073\u0079\u006d\u0062\u006f\u006c");
};return _fcab ,nil ;};func (_gde *SymbolDictionary )InitEncode (symbols *_ea .Bitmaps ,symbolList []int ,symbolMap map[int ]int ,unborderSymbols bool )error {const _bddb ="S\u0079\u006d\u0062\u006f\u006c\u0044i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002eI\u006e\u0069\u0074E\u006ec\u006f\u0064\u0065";
_gde .SdATX =[]int8 {3,-3,2,-2};_gde .SdATY =[]int8 {-1,-1,-2,-2};_gde ._gfa =symbols ;_gde ._cagg =make ([]int ,len (symbolList ));copy (_gde ._cagg ,symbolList );if len (_gde ._cagg )!=_gde ._gfa .Size (){return _ag .Error (_bddb ,"s\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0061\u006e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u004ci\u0073\u0074\u0020\u006f\u0066\u0020\u0064\u0069\u0066\u0066er\u0065\u006e\u0074 \u0073i\u007a\u0065");
};_gde .NumberOfNewSymbols =uint32 (symbols .Size ());_gde .NumberOfExportedSymbols =uint32 (symbols .Size ());_gde ._afa =symbolMap ;_gde ._gebd =unborderSymbols ;return nil ;};func (_abcg *SymbolDictionary )getSbSymCodeLen ()int8 {_dgfa :=int8 (_d .Ceil (_d .Log (float64 (_abcg ._accd +_abcg .NumberOfNewSymbols ))/_d .Log (2)));
if _abcg .IsHuffmanEncoded &&_dgfa < 1{return 1;};return _dgfa ;};func (_bfac *SymbolDictionary )GetDictionary ()([]*_ea .Bitmap ,error ){_cb .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c-\u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){_cb .Log .Trace ("\u005b\u0053\u0059M\u0042\u004f\u004c\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
_cb .Log .Trace ("\u005b\u0053Y\u004d\u0042\u004f\u004c\u002dD\u0049\u0043\u0054\u0049\u004fN\u0041\u0052\u0059\u005d\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0020\u000a\u0045\u0078\u003a\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u000a\u006e\u0065\u0077\u003a\u0027\u0025\u0073\u0027",_bfac ._gfdab ,_bfac ._fbbe );
}();if _bfac ._gfdab ==nil {var _bcbcb error ;if _bfac .UseRefinementAggregation {_bfac ._dbcg =_bfac .getSbSymCodeLen ();};if !_bfac .IsHuffmanEncoded {if _bcbcb =_bfac .setCodingStatistics ();_bcbcb !=nil {return nil ,_bcbcb ;};};_bfac ._fbbe =make ([]*_ea .Bitmap ,_bfac .NumberOfNewSymbols );
var _gcgc []int ;if _bfac .IsHuffmanEncoded &&!_bfac .UseRefinementAggregation {_gcgc =make ([]int ,_bfac .NumberOfNewSymbols );};if _bcbcb =_bfac .setSymbolsArray ();_bcbcb !=nil {return nil ,_bcbcb ;};var _bffc ,_becb int64 ;_bfac ._eedab =0;for _bfac ._eedab < _bfac .NumberOfNewSymbols {_becb ,_bcbcb =_bfac .decodeHeightClassDeltaHeight ();
if _bcbcb !=nil {return nil ,_bcbcb ;};_bffc +=_becb ;var _facf ,_gbcd uint32 ;_bfaf :=int64 (_bfac ._eedab );for {var _fcba int64 ;_fcba ,_bcbcb =_bfac .decodeDifferenceWidth ();if _a .Is (_bcbcb ,_fc .ErrOOB ){break ;};if _bcbcb !=nil {return nil ,_bcbcb ;
};if _bfac ._eedab >=_bfac .NumberOfNewSymbols {break ;};_facf +=uint32 (_fcba );_gbcd +=_facf ;if !_bfac .IsHuffmanEncoded ||_bfac .UseRefinementAggregation {if !_bfac .UseRefinementAggregation {_bcbcb =_bfac .decodeDirectlyThroughGenericRegion (_facf ,uint32 (_bffc ));
if _bcbcb !=nil {return nil ,_bcbcb ;};}else {_bcbcb =_bfac .decodeAggregate (_facf ,uint32 (_bffc ));if _bcbcb !=nil {return nil ,_bcbcb ;};};}else if _bfac .IsHuffmanEncoded &&!_bfac .UseRefinementAggregation {_gcgc [_bfac ._eedab ]=int (_facf );};_bfac ._eedab ++;
};if _bfac .IsHuffmanEncoded &&!_bfac .UseRefinementAggregation {var _dcdd int64 ;if _bfac .SdHuffBMSizeSelection ==0{var _cgbfe _ee .Tabler ;_cgbfe ,_bcbcb =_ee .GetStandardTable (1);if _bcbcb !=nil {return nil ,_bcbcb ;};_dcdd ,_bcbcb =_cgbfe .Decode (_bfac ._dbbb );
if _bcbcb !=nil {return nil ,_bcbcb ;};}else {_dcdd ,_bcbcb =_bfac .huffDecodeBmSize ();if _bcbcb !=nil {return nil ,_bcbcb ;};};_bfac ._dbbb .Align ();var _dbed *_ea .Bitmap ;_dbed ,_bcbcb =_bfac .decodeHeightClassCollectiveBitmap (_dcdd ,uint32 (_bffc ),_gbcd );
if _bcbcb !=nil {return nil ,_bcbcb ;};_bcbcb =_bfac .decodeHeightClassBitmap (_dbed ,_bfaf ,int (_bffc ),_gcgc );if _bcbcb !=nil {return nil ,_bcbcb ;};};};_ggbe ,_bcbcb :=_bfac .getToExportFlags ();if _bcbcb !=nil {return nil ,_bcbcb ;};_bfac .setExportedSymbols (_ggbe );
};return _bfac ._gfdab ,nil ;};func (_cff *PageInformationSegment )CombinationOperator ()_ea .CombinationOperator {return _cff ._eaba };func (_gaee *TextRegion )String ()string {_fabed :=&_fa .Builder {};_fabed .WriteString ("\u000a[\u0054E\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u000a");
_fabed .WriteString (_gaee .RegionInfo .String ()+"\u000a");_fabed .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053br\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0025\u0076\u000a",_gaee .SbrTemplate ));_fabed .WriteString (_g .Sprintf ("\u0009-\u0020S\u0062\u0044\u0073\u004f\u0066f\u0073\u0065t\u003a\u0020\u0025\u0076\u000a",_gaee .SbDsOffset ));
_fabed .WriteString (_g .Sprintf ("\t\u002d \u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0050i\u0078\u0065\u006c\u003a %\u0076\u000a",_gaee .DefaultPixel ));_fabed .WriteString (_g .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0076\u000a",_gaee .CombinationOperator ));
_fabed .WriteString (_g .Sprintf ("\t\u002d \u0049\u0073\u0054\u0072\u0061\u006e\u0073\u0070o\u0073\u0065\u0064\u003a %\u0076\u000a",_gaee .IsTransposed ));_fabed .WriteString (_g .Sprintf ("\u0009\u002d\u0020Re\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0043\u006f\u0072\u006e\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_gaee .ReferenceCorner ));
_fabed .WriteString (_g .Sprintf ("\t\u002d\u0020\u0055\u0073eR\u0065f\u0069\u006e\u0065\u006d\u0065n\u0074\u003a\u0020\u0025\u0076\u000a",_gaee .UseRefinement ));_fabed .WriteString (_g .Sprintf ("\u0009-\u0020\u0049\u0073\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045n\u0063\u006f\u0064\u0065\u0064\u003a\u0020\u0025\u0076\u000a",_gaee .IsHuffmanEncoded ));
if _gaee .IsHuffmanEncoded {_fabed .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_gaee .SbHuffRSize ));_fabed .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0059:\u0020\u0025\u0076\u000a",_gaee .SbHuffRDY ));
_fabed .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0058:\u0020\u0025\u0076\u000a",_gaee .SbHuffRDX ));_fabed .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069\u0067\u0068\u0074\u003a\u0020\u0025v\u000a",_gaee .SbHuffRDHeight ));
_fabed .WriteString (_g .Sprintf ("\t\u002d\u0020\u0053\u0062Hu\u0066f\u0052\u0044\u0057\u0069\u0064t\u0068\u003a\u0020\u0025\u0076\u000a",_gaee .SbHuffRDWidth ));_fabed .WriteString (_g .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0054\u003a\u0020\u0025\u0076\u000a",_gaee .SbHuffDT ));
_fabed .WriteString (_g .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0053\u003a\u0020\u0025\u0076\u000a",_gaee .SbHuffDS ));_fabed .WriteString (_g .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0046\u0053\u003a\u0020\u0025\u0076\u000a",_gaee .SbHuffFS ));
};_fabed .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_gaee .SbrATX ));_fabed .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0059:\u0020\u0025\u0076\u000a",_gaee .SbrATY ));
_fabed .WriteString (_g .Sprintf ("\u0009\u002d\u0020N\u0075\u006d\u0062\u0065r\u004f\u0066\u0053\u0079\u006d\u0062\u006fl\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_gaee .NumberOfSymbolInstances ));_fabed .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_gaee .SbrATX ));
return _fabed .String ();};func (_fddbf *TextRegion )decodeIb (_cabb ,_cdce int64 )(*_ea .Bitmap ,error ){const _fagb ="\u0064\u0065\u0063\u006f\u0064\u0065\u0049\u0062";var (_gbgc error ;_geaff *_ea .Bitmap ;);if _cabb ==0{if int (_cdce )> len (_fddbf .Symbols )-1{return nil ,_ag .Error (_fagb ,"\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0049\u0042\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0020\u0069\u006e\u0064\u0065x\u0020\u006f\u0075\u0074\u0020o\u0066\u0020r\u0061\u006e\u0067\u0065");
};return _fddbf .Symbols [int (_cdce )],nil ;};var _bdbab ,_feae ,_aagfee ,_fggb int64 ;_bdbab ,_gbgc =_fddbf .decodeRdw ();if _gbgc !=nil {return nil ,_ag .Wrap (_gbgc ,_fagb ,"");};_feae ,_gbgc =_fddbf .decodeRdh ();if _gbgc !=nil {return nil ,_ag .Wrap (_gbgc ,_fagb ,"");
};_aagfee ,_gbgc =_fddbf .decodeRdx ();if _gbgc !=nil {return nil ,_ag .Wrap (_gbgc ,_fagb ,"");};_fggb ,_gbgc =_fddbf .decodeRdy ();if _gbgc !=nil {return nil ,_ag .Wrap (_gbgc ,_fagb ,"");};if _fddbf .IsHuffmanEncoded {if _ ,_gbgc =_fddbf .decodeSymInRefSize ();
_gbgc !=nil {return nil ,_ag .Wrap (_gbgc ,_fagb ,"");};_fddbf ._bcffg .Align ();};_eaed :=_fddbf .Symbols [_cdce ];_bccg :=uint32 (_eaed .Width );_dceb :=uint32 (_eaed .Height );_edfaa :=int32 (uint32 (_bdbab )>>1)+int32 (_aagfee );_cedc :=int32 (uint32 (_feae )>>1)+int32 (_fggb );
if _fddbf ._fdeg ==nil {_fddbf ._fdeg =_aae (_fddbf ._bcffg ,nil );};_fddbf ._fdeg .setParameters (_fddbf ._acae ,_fddbf ._fagf ,_fddbf .SbrTemplate ,_bccg +uint32 (_bdbab ),_dceb +uint32 (_feae ),_eaed ,_edfaa ,_cedc ,false ,_fddbf .SbrATX ,_fddbf .SbrATY );
_geaff ,_gbgc =_fddbf ._fdeg .GetRegionBitmap ();if _gbgc !=nil {return nil ,_ag .Wrap (_gbgc ,_fagb ,"\u0067\u0072\u0066");};if _fddbf .IsHuffmanEncoded {_fddbf ._bcffg .Align ();};return _geaff ,nil ;};func (_afbe *PageInformationSegment )readCombinationOperatorOverrideAllowed ()error {_fdea ,_eaffa :=_afbe ._dcbcd .ReadBit ();
if _eaffa !=nil {return _eaffa ;};if _fdea ==1{_afbe ._egcd =true ;};return nil ;};func (_daee *GenericRefinementRegion )String ()string {_gegd :=&_fa .Builder {};_gegd .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");
_gegd .WriteString (_daee .RegionInfo .String ()+"\u000a");_gegd .WriteString (_g .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0052\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_daee .IsTPGROn ));_gegd .WriteString (_g .Sprintf ("\u0009-\u0020T\u0065\u006d\u0070\u006c\u0061t\u0065\u0049D\u003a\u0020\u0025\u0076\u000a",_daee .TemplateID ));
_gegd .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_daee .GrAtX ));_gegd .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_daee .GrAtY ));
_gegd .WriteString (_g .Sprintf ("\u0009-\u0020R\u0065\u0066\u0065\u0072\u0065n\u0063\u0065D\u0058\u0020\u0025\u0076\u000a",_daee .ReferenceDX ));_gegd .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0052ef\u0065\u0072\u0065\u006e\u0063\u0044\u0065\u0059\u003a\u0020\u0025\u0076\u000a",_daee .ReferenceDY ));
return _gegd .String ();};func _gebbcf (_agdc _ga .StreamReader ,_eafc *Header )*TextRegion {_agdd :=&TextRegion {_bcffg :_agdc ,Header :_eafc ,RegionInfo :NewRegionSegment (_agdc )};return _agdd ;};func (_cgff *RegionSegment )Encode (w _ga .BinaryWriter )(_gedc int ,_ccab error ){const _gacc ="R\u0065g\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065n\u0074\u002e\u0045\u006eco\u0064\u0065";
_deba :=make ([]byte ,4);_b .BigEndian .PutUint32 (_deba ,_cgff .BitmapWidth );_gedc ,_ccab =w .Write (_deba );if _ccab !=nil {return 0,_ag .Wrap (_ccab ,_gacc ,"\u0057\u0069\u0064t\u0068");};_b .BigEndian .PutUint32 (_deba ,_cgff .BitmapHeight );var _fgce int ;
_fgce ,_ccab =w .Write (_deba );if _ccab !=nil {return 0,_ag .Wrap (_ccab ,_gacc ,"\u0048\u0065\u0069\u0067\u0068\u0074");};_gedc +=_fgce ;_b .BigEndian .PutUint32 (_deba ,_cgff .XLocation );_fgce ,_ccab =w .Write (_deba );if _ccab !=nil {return 0,_ag .Wrap (_ccab ,_gacc ,"\u0058L\u006f\u0063\u0061\u0074\u0069\u006fn");
};_gedc +=_fgce ;_b .BigEndian .PutUint32 (_deba ,_cgff .YLocation );_fgce ,_ccab =w .Write (_deba );if _ccab !=nil {return 0,_ag .Wrap (_ccab ,_gacc ,"\u0059L\u006f\u0063\u0061\u0074\u0069\u006fn");};_gedc +=_fgce ;if _ccab =w .WriteByte (byte (_cgff .CombinaionOperator )&0x07);
_ccab !=nil {return 0,_ag .Wrap (_ccab ,_gacc ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};_gedc ++;return _gedc ,nil ;};func (_aggbb *SymbolDictionary )decodeDifferenceWidth ()(int64 ,error ){if _aggbb .IsHuffmanEncoded {switch _aggbb .SdHuffDecodeWidthSelection {case 0:_dafg ,_gcaf :=_ee .GetStandardTable (2);
if _gcaf !=nil {return 0,_gcaf ;};return _dafg .Decode (_aggbb ._dbbb );case 1:_agga ,_ffga :=_ee .GetStandardTable (3);if _ffga !=nil {return 0,_ffga ;};return _agga .Decode (_aggbb ._dbbb );case 3:if _aggbb ._bdebd ==nil {var _bdaf int ;if _aggbb .SdHuffDecodeHeightSelection ==3{_bdaf ++;
};_bfage ,_cegd :=_aggbb .getUserTable (_bdaf );if _cegd !=nil {return 0,_cegd ;};_aggbb ._bdebd =_bfage ;};return _aggbb ._bdebd .Decode (_aggbb ._dbbb );};}else {_bcgg ,_ggdg :=_aggbb ._fbbed .DecodeInt (_aggbb ._gcab );if _ggdg !=nil {return 0,_ggdg ;
};return int64 (_bcgg ),nil ;};return 0,nil ;};func (_ggbg *GenericRegion )overrideAtTemplate0a (_fbb ,_aeec ,_daf ,_cafg ,_geef ,_ggg int )int {if _ggbg .GBAtOverride [0]{_fbb &=0xFFEF;if _ggbg .GBAtY [0]==0&&_ggbg .GBAtX [0]>=-int8 (_geef ){_fbb |=(_cafg >>uint (int8 (_ggg )-_ggbg .GBAtX [0]&0x1))<<4;
}else {_fbb |=int (_ggbg .getPixel (_aeec +int (_ggbg .GBAtX [0]),_daf +int (_ggbg .GBAtY [0])))<<4;};};if _ggbg .GBAtOverride [1]{_fbb &=0xFBFF;if _ggbg .GBAtY [1]==0&&_ggbg .GBAtX [1]>=-int8 (_geef ){_fbb |=(_cafg >>uint (int8 (_ggg )-_ggbg .GBAtX [1]&0x1))<<10;
}else {_fbb |=int (_ggbg .getPixel (_aeec +int (_ggbg .GBAtX [1]),_daf +int (_ggbg .GBAtY [1])))<<10;};};if _ggbg .GBAtOverride [2]{_fbb &=0xF7FF;if _ggbg .GBAtY [2]==0&&_ggbg .GBAtX [2]>=-int8 (_geef ){_fbb |=(_cafg >>uint (int8 (_ggg )-_ggbg .GBAtX [2]&0x1))<<11;
}else {_fbb |=int (_ggbg .getPixel (_aeec +int (_ggbg .GBAtX [2]),_daf +int (_ggbg .GBAtY [2])))<<11;};};if _ggbg .GBAtOverride [3]{_fbb &=0x7FFF;if _ggbg .GBAtY [3]==0&&_ggbg .GBAtX [3]>=-int8 (_geef ){_fbb |=(_cafg >>uint (int8 (_ggg )-_ggbg .GBAtX [3]&0x1))<<15;
}else {_fbb |=int (_ggbg .getPixel (_aeec +int (_ggbg .GBAtX [3]),_daf +int (_ggbg .GBAtY [3])))<<15;};};return _fbb ;};func (_dgbde *SymbolDictionary )String ()string {_fdafc :=&_fa .Builder {};_fdafc .WriteString ("\n\u005b\u0053\u0059\u004dBO\u004c-\u0044\u0049\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u000a");
_fdafc .WriteString (_g .Sprintf ("\u0009-\u0020S\u0064\u0072\u0054\u0065\u006dp\u006c\u0061t\u0065\u0020\u0025\u0076\u000a",_dgbde .SdrTemplate ));_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0025\u0076\u000a",_dgbde .SdTemplate ));
_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006eg\u0043\u006f\u006e\u0074\u0065\u0078\u0074R\u0065\u0074\u0061\u0069\u006e\u0065\u0064\u0020\u0025\u0076\u000a",_dgbde ._cfda ));_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074\u0065\u0078\u0074\u0055\u0073\u0065\u0064 \u0025\u0076\u000a",_dgbde ._gbga ));
_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_dgbde .SdHuffAggInstanceSelection ));
_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053d\u0048\u0075\u0066\u0066\u0042\u004d\u0053\u0069\u007a\u0065S\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020%\u0076\u000a",_dgbde .SdHuffBMSizeSelection ));_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_dgbde .SdHuffDecodeWidthSelection ));
_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020Sd\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064e\u0048e\u0069g\u0068t\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_dgbde .SdHuffDecodeHeightSelection ));_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020U\u0073\u0065\u0052\u0065f\u0069\u006e\u0065\u006d\u0065\u006e\u0074A\u0067\u0067\u0072\u0065\u0067\u0061\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_dgbde .UseRefinementAggregation ));
_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020is\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0065\u0064\u0020\u0025\u0076\u000a",_dgbde .IsHuffmanEncoded ));_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_dgbde .SdATX ));
_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_dgbde .SdATY ));_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_dgbde .SdrATX ));
_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_dgbde .SdrATY ));_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u004e\u0075\u006d\u0062\u0065\u0072\u004ff\u0045\u0078\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_dgbde .NumberOfExportedSymbols ));
_fdafc .WriteString (_g .Sprintf ("\u0009-\u0020\u004e\u0075\u006db\u0065\u0072\u004f\u0066\u004ee\u0077S\u0079m\u0062\u006f\u006c\u0073\u0020\u0025\u0076\n",_dgbde .NumberOfNewSymbols ));_fdafc .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u004ff\u0049\u006d\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_dgbde ._accd ));
_fdafc .WriteString (_g .Sprintf ("\u0009\u002d \u006e\u0075\u006d\u0062\u0065\u0072\u004f\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0064\u0053\u0079\u006d\u0062\u006f\u006c\u0073 %\u0076\u000a",_dgbde ._eedab ));return _fdafc .String ();};func (_acgd *Header )writeReferredToSegments (_edfa _ga .BinaryWriter )(_edbd int ,_gcg error ){const _bbb ="\u0077\u0072\u0069te\u0052\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
var (_eeeb uint16 ;_dcbbe uint32 ;);_ebe :=_acgd .referenceSize ();_ffeg :=1;_cbgf :=make ([]byte ,_ebe );for _ ,_adbf :=range _acgd .RTSNumbers {switch _ebe {case 4:_dcbbe =uint32 (_adbf );_b .BigEndian .PutUint32 (_cbgf ,_dcbbe );_ffeg ,_gcg =_edfa .Write (_cbgf );
if _gcg !=nil {return 0,_ag .Wrap (_gcg ,_bbb ,"u\u0069\u006e\u0074\u0033\u0032\u0020\u0073\u0069\u007a\u0065");};case 2:_eeeb =uint16 (_adbf );_b .BigEndian .PutUint16 (_cbgf ,_eeeb );_ffeg ,_gcg =_edfa .Write (_cbgf );if _gcg !=nil {return 0,_ag .Wrap (_gcg ,_bbb ,"\u0075\u0069\u006e\u0074\u0031\u0036");
};default:if _gcg =_edfa .WriteByte (byte (_adbf ));_gcg !=nil {return 0,_ag .Wrap (_gcg ,_bbb ,"\u0075\u0069\u006et\u0038");};};_edbd +=_ffeg ;};return _edbd ,nil ;};func (_aba *GenericRefinementRegion )readAtPixels ()error {_aba .GrAtX =make ([]int8 ,2);
_aba .GrAtY =make ([]int8 ,2);_ggab ,_fac :=_aba ._bc .ReadByte ();if _fac !=nil {return _fac ;};_aba .GrAtX [0]=int8 (_ggab );_ggab ,_fac =_aba ._bc .ReadByte ();if _fac !=nil {return _fac ;};_aba .GrAtY [0]=int8 (_ggab );_ggab ,_fac =_aba ._bc .ReadByte ();
if _fac !=nil {return _fac ;};_aba .GrAtX [1]=int8 (_ggab );_ggab ,_fac =_aba ._bc .ReadByte ();if _fac !=nil {return _fac ;};_aba .GrAtY [1]=int8 (_ggab );return nil ;};func (_egaa *TextRegion )Encode (w _ga .BinaryWriter )(_dfcef int ,_ggbea error ){const _dee ="\u0054\u0065\u0078\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u002e\u0045n\u0063\u006f\u0064\u0065";
if _dfcef ,_ggbea =_egaa .RegionInfo .Encode (w );_ggbea !=nil {return _dfcef ,_ag .Wrap (_ggbea ,_dee ,"");};var _cgbgg int ;if _cgbgg ,_ggbea =_egaa .encodeFlags (w );_ggbea !=nil {return _dfcef ,_ag .Wrap (_ggbea ,_dee ,"");};_dfcef +=_cgbgg ;if _cgbgg ,_ggbea =_egaa .encodeSymbols (w );
_ggbea !=nil {return _dfcef ,_ag .Wrap (_ggbea ,_dee ,"");};_dfcef +=_cgbgg ;return _dfcef ,nil ;};func (_daegg *Header )readHeaderLength (_edc _ga .StreamReader ,_bec int64 ){_daegg .HeaderLength =_edc .StreamPosition ()-_bec ;};func (_cdff *Header )readHeaderFlags ()error {const _gaeg ="\u0072e\u0061d\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006c\u0061\u0067\u0073";
_fceg ,_fbee :=_cdff .Reader .ReadBit ();if _fbee !=nil {return _ag .Wrap (_fbee ,_gaeg ,"r\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067");};if _fceg !=0{_cdff .RetainFlag =true ;};_fceg ,_fbee =_cdff .Reader .ReadBit ();if _fbee !=nil {return _ag .Wrap (_fbee ,_gaeg ,"\u0070\u0061g\u0065\u0020\u0061s\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e");
};if _fceg !=0{_cdff .PageAssociationFieldSize =true ;};_cdab ,_fbee :=_cdff .Reader .ReadBits (6);if _fbee !=nil {return _ag .Wrap (_fbee ,_gaeg ,"\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065");};_cdff .Type =Type (int (_cdab ));
return nil ;};var _ _ee .BasicTabler =&TableSegment {};func (_bf *GenericRefinementRegion )GetRegionBitmap ()(*_ea .Bitmap ,error ){var _gb error ;_cb .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _gb !=nil {_cb .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0047\u0065\u0074R\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006dap\u0020\u0066a\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_gb );
}else {_cb .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _bf .RegionBitmap !=nil {return _bf .RegionBitmap ,nil ;};_gbg :=0;if _bf .ReferenceBitmap ==nil {_bf .ReferenceBitmap ,_gb =_bf .getGrReference ();if _gb !=nil {return nil ,_gb ;};};if _bf ._ae ==nil {_bf ._ae ,_gb =_be .New (_bf ._bc );if _gb !=nil {return nil ,_gb ;
};};if _bf ._eea ==nil {_bf ._eea =_be .NewStats (8192,1);};_bf .RegionBitmap =_ea .New (int (_bf .RegionInfo .BitmapWidth ),int (_bf .RegionInfo .BitmapHeight ));if _bf .TemplateID ==0{if _gb =_bf .updateOverride ();_gb !=nil {return nil ,_gb ;};};_fcd :=(_bf .RegionBitmap .Width +7)&-8;
var _gaf int ;if _bf .IsTPGROn {_gaf =int (-_bf .ReferenceDY )*_bf .ReferenceBitmap .RowStride ;};_ddg :=_gaf +1;for _ba :=0;_ba < _bf .RegionBitmap .Height ;_ba ++{if _bf .IsTPGROn {_eaf ,_bce :=_bf .decodeSLTP ();if _bce !=nil {return nil ,_bce ;};_gbg ^=_eaf ;
};if _gbg ==0{_gb =_bf .decodeOptimized (_ba ,_bf .RegionBitmap .Width ,_bf .RegionBitmap .RowStride ,_bf .ReferenceBitmap .RowStride ,_fcd ,_gaf ,_ddg );if _gb !=nil {return nil ,_gb ;};}else {_gb =_bf .decodeTypicalPredictedLine (_ba ,_bf .RegionBitmap .Width ,_bf .RegionBitmap .RowStride ,_bf .ReferenceBitmap .RowStride ,_fcd ,_gaf );
if _gb !=nil {return nil ,_gb ;};};};return _bf .RegionBitmap ,nil ;};func (_cdc *GenericRegion )overrideAtTemplate0b (_abbgc ,_fdf ,_feac ,_aabd ,_ecfg ,_cage int )int {if _cdc .GBAtOverride [0]{_abbgc &=0xFFFD;if _cdc .GBAtY [0]==0&&_cdc .GBAtX [0]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [0]&0x1))<<1;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [0]),_feac +int (_cdc .GBAtY [0])))<<1;};};if _cdc .GBAtOverride [1]{_abbgc &=0xDFFF;if _cdc .GBAtY [1]==0&&_cdc .GBAtX [1]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [1]&0x1))<<13;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [1]),_feac +int (_cdc .GBAtY [1])))<<13;};};if _cdc .GBAtOverride [2]{_abbgc &=0xFDFF;if _cdc .GBAtY [2]==0&&_cdc .GBAtX [2]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [2]&0x1))<<9;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [2]),_feac +int (_cdc .GBAtY [2])))<<9;};};if _cdc .GBAtOverride [3]{_abbgc &=0xBFFF;if _cdc .GBAtY [3]==0&&_cdc .GBAtX [3]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [3]&0x1))<<14;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [3]),_feac +int (_cdc .GBAtY [3])))<<14;};};if _cdc .GBAtOverride [4]{_abbgc &=0xEFFF;if _cdc .GBAtY [4]==0&&_cdc .GBAtX [4]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [4]&0x1))<<12;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [4]),_feac +int (_cdc .GBAtY [4])))<<12;};};if _cdc .GBAtOverride [5]{_abbgc &=0xFFDF;if _cdc .GBAtY [5]==0&&_cdc .GBAtX [5]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [5]&0x1))<<5;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [5]),_feac +int (_cdc .GBAtY [5])))<<5;};};if _cdc .GBAtOverride [6]{_abbgc &=0xFFFB;if _cdc .GBAtY [6]==0&&_cdc .GBAtX [6]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [6]&0x1))<<2;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [6]),_feac +int (_cdc .GBAtY [6])))<<2;};};if _cdc .GBAtOverride [7]{_abbgc &=0xFFF7;if _cdc .GBAtY [7]==0&&_cdc .GBAtX [7]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [7]&0x1))<<3;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [7]),_feac +int (_cdc .GBAtY [7])))<<3;};};if _cdc .GBAtOverride [8]{_abbgc &=0xF7FF;if _cdc .GBAtY [8]==0&&_cdc .GBAtX [8]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [8]&0x1))<<11;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [8]),_feac +int (_cdc .GBAtY [8])))<<11;};};if _cdc .GBAtOverride [9]{_abbgc &=0xFFEF;if _cdc .GBAtY [9]==0&&_cdc .GBAtX [9]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [9]&0x1))<<4;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [9]),_feac +int (_cdc .GBAtY [9])))<<4;};};if _cdc .GBAtOverride [10]{_abbgc &=0x7FFF;if _cdc .GBAtY [10]==0&&_cdc .GBAtX [10]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [10]&0x1))<<15;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [10]),_feac +int (_cdc .GBAtY [10])))<<15;};};if _cdc .GBAtOverride [11]{_abbgc &=0xFDFF;if _cdc .GBAtY [11]==0&&_cdc .GBAtX [11]>=-int8 (_ecfg ){_abbgc |=(_aabd >>uint (int8 (_cage )-_cdc .GBAtX [11]&0x1))<<10;
}else {_abbgc |=int (_cdc .getPixel (_fdf +int (_cdc .GBAtX [11]),_feac +int (_cdc .GBAtY [11])))<<10;};};return _abbgc ;};func (_geea *TextRegion )checkInput ()error {const _caac ="\u0063\u0068\u0065\u0063\u006b\u0049\u006e\u0070\u0075\u0074";if !_geea .UseRefinement {if _geea .SbrTemplate !=0{_cb .Log .Debug ("\u0053\u0062\u0072Te\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");
_geea .SbrTemplate =0;};};if _geea .SbHuffFS ==2||_geea .SbHuffRDWidth ==2||_geea .SbHuffRDHeight ==2||_geea .SbHuffRDX ==2||_geea .SbHuffRDY ==2{return _ag .Error (_caac ,"h\u0075\u0066\u0066\u006d\u0061\u006e \u0066\u006c\u0061\u0067\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064");
};if !_geea .UseRefinement {if _geea .SbHuffRSize !=0{_cb .Log .Debug ("\u0053\u0062\u0048uf\u0066\u0052\u0053\u0069\u007a\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_geea .SbHuffRSize =0;};if _geea .SbHuffRDY !=0{_cb .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044Y\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");
_geea .SbHuffRDY =0;};if _geea .SbHuffRDX !=0{_cb .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044X\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");_geea .SbHuffRDX =0;};if _geea .SbHuffRDWidth !=0{_cb .Log .Debug ("\u0053b\u0048\u0075\u0066\u0066R\u0044\u0057\u0069\u0064\u0074h\u0020s\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u00200");
_geea .SbHuffRDWidth =0;};if _geea .SbHuffRDHeight !=0{_cb .Log .Debug ("\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069g\u0068\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020b\u0065\u0020\u0030");_geea .SbHuffRDHeight =0;};};return nil ;
};func (_fcga *PageInformationSegment )encodeStripingInformation (_cccd _ga .BinaryWriter )(_fgcd int ,_bacec error ){const _bcbc ="\u0065n\u0063\u006f\u0064\u0065S\u0074\u0072\u0069\u0070\u0069n\u0067I\u006ef\u006f\u0072\u006d\u0061\u0074\u0069\u006fn";
if !_fcga .IsStripe {if _fgcd ,_bacec =_cccd .Write ([]byte {0x00,0x00});_bacec !=nil {return 0,_ag .Wrap (_bacec ,_bcbc ,"n\u006f\u0020\u0073\u0074\u0072\u0069\u0070\u0069\u006e\u0067");};return _fgcd ,nil ;};_befb :=make ([]byte ,2);_b .BigEndian .PutUint16 (_befb ,_fcga .MaxStripeSize |1<<15);
if _fgcd ,_bacec =_cccd .Write (_befb );_bacec !=nil {return 0,_ag .Wrapf (_bacec ,_bcbc ,"\u0073\u0074\u0072i\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0064",_fcga .MaxStripeSize );};return _fgcd ,nil ;};func (_aceg *SymbolDictionary )setCodingStatistics ()error {if _aceg ._cbda ==nil {_aceg ._cbda =_be .NewStats (512,1);
};if _aceg ._aeff ==nil {_aceg ._aeff =_be .NewStats (512,1);};if _aceg ._gcab ==nil {_aceg ._gcab =_be .NewStats (512,1);};if _aceg ._gddg ==nil {_aceg ._gddg =_be .NewStats (512,1);};if _aceg ._cffc ==nil {_aceg ._cffc =_be .NewStats (512,1);};if _aceg .UseRefinementAggregation &&_aceg ._agd ==nil {_aceg ._agd =_be .NewStats (1<<uint (_aceg ._dbcg ),1);
_aceg ._ggdf =_be .NewStats (512,1);_aceg ._fafe =_be .NewStats (512,1);};if _aceg ._baaf ==nil {_aceg ._baaf =_be .NewStats (65536,1);};if _aceg ._fbbed ==nil {var _befca error ;_aceg ._fbbed ,_befca =_be .New (_aceg ._dbbb );if _befca !=nil {return _befca ;
};};return nil ;};func (_ade *HalftoneRegion )grayScaleDecoding (_cbcd int )([][]int ,error ){var (_efe []int8 ;_fgfg []int8 ;);if !_ade .IsMMREncoded {_efe =make ([]int8 ,4);_fgfg =make ([]int8 ,4);if _ade .HTemplate <=1{_efe [0]=3;}else if _ade .HTemplate >=2{_efe [0]=2;
};_fgfg [0]=-1;_efe [1]=-3;_fgfg [1]=-1;_efe [2]=2;_fgfg [2]=-2;_efe [3]=-2;_fgfg [3]=-2;};_bdea :=make ([]*_ea .Bitmap ,_cbcd );_gbece :=NewGenericRegion (_ade ._eeca );_gbece .setParametersMMR (_ade .IsMMREncoded ,_ade .DataOffset ,_ade .DataLength ,_ade .HGridHeight ,_ade .HGridWidth ,_ade .HTemplate ,false ,_ade .HSkipEnabled ,_efe ,_fgfg );
_cfc :=_cbcd -1;var _cca error ;_bdea [_cfc ],_cca =_gbece .GetRegionBitmap ();if _cca !=nil {return nil ,_cca ;};for _cfc > 0{_cfc --;_gbece .Bitmap =nil ;_bdea [_cfc ],_cca =_gbece .GetRegionBitmap ();if _cca !=nil {return nil ,_cca ;};if _cca =_ade .combineGrayscalePlanes (_bdea ,_cfc );
_cca !=nil {return nil ,_cca ;};};return _ade .computeGrayScalePlanes (_bdea ,_cbcd );};func (_abd *GenericRegion )InitEncode (bm *_ea .Bitmap ,xLoc ,yLoc ,template int ,duplicateLineRemoval bool )error {const _ggc ="\u0047e\u006e\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069\u006f\u006e.\u0049\u006e\u0069\u0074\u0045\u006e\u0063\u006f\u0064\u0065";
if bm ==nil {return _ag .Error (_ggc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if xLoc < 0||yLoc < 0{return _ag .Error (_ggc ,"\u0078\u0020\u0061\u006e\u0064\u0020\u0079\u0020\u006c\u006f\u0063\u0061\u0074i\u006f\u006e\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074h\u0061\u006e\u0020\u0030");
};_abd .Bitmap =bm ;_abd .GBTemplate =byte (template );switch _abd .GBTemplate {case 0:_abd .GBAtX =[]int8 {3,-3,2,-2};_abd .GBAtY =[]int8 {-1,-1,-2,-2};case 1:_abd .GBAtX =[]int8 {3};_abd .GBAtY =[]int8 {-1};case 2,3:_abd .GBAtX =[]int8 {2};_abd .GBAtY =[]int8 {-1};
default:return _ag .Errorf (_ggc ,"\u0070\u0072o\u0076\u0069\u0064\u0065\u0064 \u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u002c\u0032\u002c\u0033\u007d",template );
};_abd .RegionSegment =&RegionSegment {BitmapHeight :uint32 (bm .Height ),BitmapWidth :uint32 (bm .Width ),XLocation :uint32 (xLoc ),YLocation :uint32 (yLoc )};_abd .IsTPGDon =duplicateLineRemoval ;return nil ;};func (_ffa *Header )writeFlags (_aaad _ga .BinaryWriter )(_abfb error ){const _gefg ="\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065F\u006c\u0061\u0067\u0073";
_abda :=byte (_ffa .Type );if _abfb =_aaad .WriteByte (_abda );_abfb !=nil {return _ag .Wrap (_abfb ,_gefg ,"\u0077\u0072\u0069ti\u006e\u0067\u0020\u0073\u0065\u0067\u006d\u0065\u006et\u0020t\u0079p\u0065 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};if !_ffa .RetainFlag &&!_ffa .PageAssociationFieldSize {return nil ;};if _abfb =_aaad .SkipBits (-8);_abfb !=nil {return _ag .Wrap (_abfb ,_gefg ,"\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0061\u0063\u006b\u0020\u0074\u0068\u0065\u0020\u0062\u0069\u0074\u0073\u0020\u0066\u0061il\u0065\u0064");
};var _dfcc int ;if _ffa .RetainFlag {_dfcc =1;};if _abfb =_aaad .WriteBit (_dfcc );_abfb !=nil {return _ag .Wrap (_abfb ,_gefg ,"\u0072\u0065\u0074\u0061in\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067\u0073");};_dfcc =0;if _ffa .PageAssociationFieldSize {_dfcc =1;
};if _abfb =_aaad .WriteBit (_dfcc );_abfb !=nil {return _ag .Wrap (_abfb ,_gefg ,"p\u0061\u0067\u0065\u0020as\u0073o\u0063\u0069\u0061\u0074\u0069o\u006e\u0020\u0066\u006c\u0061\u0067");};_aaad .FinishByte ();return nil ;};func (_gceg *TextRegion )decodeRI ()(int64 ,error ){if !_gceg .UseRefinement {return 0,nil ;
};if _gceg .IsHuffmanEncoded {_eace ,_dfeb :=_gceg ._bcffg .ReadBit ();return int64 (_eace ),_dfeb ;};_ggcea ,_cfaed :=_gceg ._fagf .DecodeInt (_gceg ._dgca );return int64 (_ggcea ),_cfaed ;};func (_bdae *TableSegment )HtRS ()int32 {return _bdae ._bcgaa };
func (_ffac *TextRegion )readUseRefinement ()error {if !_ffac .UseRefinement ||_ffac .SbrTemplate !=0{return nil ;};var (_bbgad byte ;_aeed error ;);_ffac .SbrATX =make ([]int8 ,2);_ffac .SbrATY =make ([]int8 ,2);_bbgad ,_aeed =_ffac ._bcffg .ReadByte ();
if _aeed !=nil {return _aeed ;};_ffac .SbrATX [0]=int8 (_bbgad );_bbgad ,_aeed =_ffac ._bcffg .ReadByte ();if _aeed !=nil {return _aeed ;};_ffac .SbrATY [0]=int8 (_bbgad );_bbgad ,_aeed =_ffac ._bcffg .ReadByte ();if _aeed !=nil {return _aeed ;};_ffac .SbrATX [1]=int8 (_bbgad );
_bbgad ,_aeed =_ffac ._bcffg .ReadByte ();if _aeed !=nil {return _aeed ;};_ffac .SbrATY [1]=int8 (_bbgad );return nil ;};func (_ccea *PageInformationSegment )readIsStriped ()error {_edfd ,_bcge :=_ccea ._dcbcd .ReadBit ();if _bcge !=nil {return _bcge ;
};if _edfd ==1{_ccea .IsStripe =true ;};return nil ;};func (_dced *Header )parse (_bdbe Documenter ,_gcbga _ga .StreamReader ,_bcecc int64 ,_dbbg OrganizationType )(_dgfe error ){const _dfgb ="\u0070\u0061\u0072s\u0065";_cb .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u005b\u0050A\u0052\u0053\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");
defer func (){if _dgfe !=nil {_cb .Log .Trace ("\u005b\u0053\u0045GM\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045R\u005d[\u0050A\u0052S\u0045\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_dgfe );}else {_cb .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052]\u005bP\u0041\u0052\u0053\u0045\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
};}();_ ,_dgfe =_gcbga .Seek (_bcecc ,_c .SeekStart );if _dgfe !=nil {return _ag .Wrap (_dgfe ,_dfgb ,"\u0073\u0065\u0065\u006b\u0020\u0073\u0074\u0061\u0072\u0074");};if _dgfe =_dced .readSegmentNumber (_gcbga );_dgfe !=nil {return _ag .Wrap (_dgfe ,_dfgb ,"");
};if _dgfe =_dced .readHeaderFlags ();_dgfe !=nil {return _ag .Wrap (_dgfe ,_dfgb ,"");};var _ceba uint64 ;_ceba ,_dgfe =_dced .readNumberOfReferredToSegments (_gcbga );if _dgfe !=nil {return _ag .Wrap (_dgfe ,_dfgb ,"");};_dced .RTSNumbers ,_dgfe =_dced .readReferredToSegmentNumbers (_gcbga ,int (_ceba ));
if _dgfe !=nil {return _ag .Wrap (_dgfe ,_dfgb ,"");};_dgfe =_dced .readSegmentPageAssociation (_bdbe ,_gcbga ,_ceba ,_dced .RTSNumbers ...);if _dgfe !=nil {return _ag .Wrap (_dgfe ,_dfgb ,"");};if _dced .Type !=TEndOfFile {if _dgfe =_dced .readSegmentDataLength (_gcbga );
_dgfe !=nil {return _ag .Wrap (_dgfe ,_dfgb ,"");};};_dced .readDataStartOffset (_gcbga ,_dbbg );_dced .readHeaderLength (_gcbga ,_bcecc );_cb .Log .Trace ("\u0025\u0073",_dced );return nil ;};func (_agce *HalftoneRegion )GetRegionInfo ()*RegionSegment {return _agce .RegionSegment };
func (_eegcf *SymbolDictionary )decodeHeightClassBitmap (_adbd *_ea .Bitmap ,_gcea int64 ,_dcgc int ,_adfc []int )error {for _eafee :=_gcea ;_eafee < int64 (_eegcf ._eedab );_eafee ++{var _ddcae int ;for _agab :=_gcea ;_agab <=_eafee -1;_agab ++{_ddcae +=_adfc [_agab ];
};_gdeb :=_f .Rect (_ddcae ,0,_ddcae +_adfc [_eafee ],_dcgc );_dcfg ,_gbaf :=_ea .Extract (_gdeb ,_adbd );if _gbaf !=nil {return _gbaf ;};_eegcf ._fbbe [_eafee ]=_dcfg ;_eegcf ._edfda =append (_eegcf ._edfda ,_dcfg );};return nil ;};func (_dbge *PageInformationSegment )readResolution ()error {_fefe ,_fabee :=_dbge ._dcbcd .ReadBits (32);
if _fabee !=nil {return _fabee ;};_dbge .ResolutionX =int (_fefe &_d .MaxInt32 );_fefe ,_fabee =_dbge ._dcbcd .ReadBits (32);if _fabee !=nil {return _fabee ;};_dbge .ResolutionY =int (_fefe &_d .MaxInt32 );return nil ;};func (_fcfa *TextRegion )decodeRdh ()(int64 ,error ){const _abga ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064h";
if _fcfa .IsHuffmanEncoded {if _fcfa .SbHuffRDHeight ==3{if _fcfa ._eabe ==nil {var (_fcgd int ;_bcgfc error ;);if _fcfa .SbHuffFS ==3{_fcgd ++;};if _fcfa .SbHuffDS ==3{_fcgd ++;};if _fcfa .SbHuffDT ==3{_fcgd ++;};if _fcfa .SbHuffRDWidth ==3{_fcgd ++;};
_fcfa ._eabe ,_bcgfc =_fcfa .getUserTable (_fcgd );if _bcgfc !=nil {return 0,_ag .Wrap (_bcgfc ,_abga ,"");};};return _fcfa ._eabe .Decode (_fcfa ._bcffg );};_eded ,_cbbe :=_ee .GetStandardTable (14+int (_fcfa .SbHuffRDHeight ));if _cbbe !=nil {return 0,_ag .Wrap (_cbbe ,_abga ,"");
};return _eded .Decode (_fcfa ._bcffg );};_feeb ,_cddd :=_fcfa ._fagf .DecodeInt (_fcfa ._degb );if _cddd !=nil {return 0,_ag .Wrap (_cddd ,_abga ,"");};return int64 (_feeb ),nil ;};func (_degc *Header )referenceSize ()uint {switch {case _degc .SegmentNumber <=255:return 1;
case _degc .SegmentNumber <=65535:return 2;default:return 4;};};type TextRegion struct{_bcffg _ga .StreamReader ;RegionInfo *RegionSegment ;SbrTemplate int8 ;SbDsOffset int8 ;DefaultPixel int8 ;CombinationOperator _ea .CombinationOperator ;IsTransposed int8 ;
ReferenceCorner int16 ;LogSBStrips int16 ;UseRefinement bool ;IsHuffmanEncoded bool ;SbHuffRSize int8 ;SbHuffRDY int8 ;SbHuffRDX int8 ;SbHuffRDHeight int8 ;SbHuffRDWidth int8 ;SbHuffDT int8 ;SbHuffDS int8 ;SbHuffFS int8 ;SbrATX []int8 ;SbrATY []int8 ;NumberOfSymbolInstances uint32 ;
_acedf int64 ;SbStrips int8 ;NumberOfSymbols uint32 ;RegionBitmap *_ea .Bitmap ;Symbols []*_ea .Bitmap ;_fagf *_be .Decoder ;_fdeg *GenericRefinementRegion ;_ebef *_be .DecoderStats ;_gaed *_be .DecoderStats ;_bged *_be .DecoderStats ;_dcccc *_be .DecoderStats ;
_dgca *_be .DecoderStats ;_beeg *_be .DecoderStats ;_degb *_be .DecoderStats ;_ebf *_be .DecoderStats ;_gaa *_be .DecoderStats ;_ccabe *_be .DecoderStats ;_acae *_be .DecoderStats ;_gbfbg int8 ;_fgg *_ee .FixedSizeTable ;Header *Header ;_cfcf _ee .Tabler ;
_gcfde _ee .Tabler ;_ffeb _ee .Tabler ;_cbfdd _ee .Tabler ;_eabe _ee .Tabler ;_fcfd _ee .Tabler ;_bdac _ee .Tabler ;_aacd _ee .Tabler ;_dgef ,_fegf map[int ]int ;_cdef []int ;_cbcfg *_ea .Points ;_egdf *_ea .Bitmaps ;_cgbg *_bg .IntSlice ;_acgg ,_bfaa int ;
_cfba *_ea .Boxes ;};type PageInformationSegment struct{_dcbcd _ga .StreamReader ;PageBMHeight int ;PageBMWidth int ;ResolutionX int ;ResolutionY int ;_egcd bool ;_eaba _ea .CombinationOperator ;_afcge bool ;DefaultPixelValue uint8 ;_fgb bool ;IsLossless bool ;
IsStripe bool ;MaxStripeSize uint16 ;};func (_gcfed *TableSegment )StreamReader ()_ga .StreamReader {return _gcfed ._dcbf };func (_bbda *SymbolDictionary )readNumberOfNewSymbols ()error {_gdea ,_begd :=_bbda ._dbbb .ReadBits (32);if _begd !=nil {return _begd ;
};_bbda .NumberOfNewSymbols =uint32 (_gdea &_d .MaxUint32 );return nil ;};type Header struct{SegmentNumber uint32 ;Type Type ;RetainFlag bool ;PageAssociation int ;PageAssociationFieldSize bool ;RTSegments []*Header ;HeaderLength int64 ;SegmentDataLength uint64 ;
SegmentDataStartOffset uint64 ;Reader _ga .StreamReader ;SegmentData Segmenter ;RTSNumbers []int ;RetainBits []uint8 ;};func (_fadde *TextRegion )parseHeader ()error {var _bgfg error ;_cb .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069n\u0073\u002e\u002e\u002e");
defer func (){if _bgfg !=nil {_cb .Log .Trace ("\u005b\u0054\u0045\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044E\u0052\u005d\u0020\u0066\u0061i\u006c\u0065d\u002e\u0020\u0025\u0076",_bgfg );
}else {_cb .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069s\u0068\u0065\u0064\u002e");};}();if _bgfg =_fadde .RegionInfo .parseHeader ();
_bgfg !=nil {return _bgfg ;};if _bgfg =_fadde .readRegionFlags ();_bgfg !=nil {return _bgfg ;};if _fadde .IsHuffmanEncoded {if _bgfg =_fadde .readHuffmanFlags ();_bgfg !=nil {return _bgfg ;};};if _bgfg =_fadde .readUseRefinement ();_bgfg !=nil {return _bgfg ;
};if _bgfg =_fadde .readAmountOfSymbolInstances ();_bgfg !=nil {return _bgfg ;};if _bgfg =_fadde .getSymbols ();_bgfg !=nil {return _bgfg ;};if _bgfg =_fadde .computeSymbolCodeLength ();_bgfg !=nil {return _bgfg ;};if _bgfg =_fadde .checkInput ();_bgfg !=nil {return _bgfg ;
};_cb .Log .Trace ("\u0025\u0073",_fadde .String ());return nil ;};func (_eebd *SymbolDictionary )encodeNumSyms (_aadc _ga .BinaryWriter )(_aaefd int ,_ggcbf error ){const _feec ="\u0065\u006e\u0063\u006f\u0064\u0065\u004e\u0075\u006d\u0053\u0079\u006d\u0073";
_baag :=make ([]byte ,4);_b .BigEndian .PutUint32 (_baag ,_eebd .NumberOfExportedSymbols );if _aaefd ,_ggcbf =_aadc .Write (_baag );_ggcbf !=nil {return _aaefd ,_ag .Wrap (_ggcbf ,_feec ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};_b .BigEndian .PutUint32 (_baag ,_eebd .NumberOfNewSymbols );_cdbb ,_ggcbf :=_aadc .Write (_baag );if _ggcbf !=nil {return _aaefd ,_ag .Wrap (_ggcbf ,_feec ,"n\u0065\u0077\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};return _aaefd +_cdbb ,nil ;
};func NewHeader (d Documenter ,r _ga .StreamReader ,offset int64 ,organizationType OrganizationType )(*Header ,error ){_gfg :=&Header {Reader :r };if _gfcff :=_gfg .parse (d ,r ,offset ,organizationType );_gfcff !=nil {return nil ,_ag .Wrap (_gfcff ,"\u004ee\u0077\u0048\u0065\u0061\u0064\u0065r","");
};return _gfg ,nil ;};func (_gebb *template1 )setIndex (_aeae *_be .DecoderStats ){_aeae .SetIndex (0x080)};func (_gfcfe *TextRegion )getSymbols ()error {if _gfcfe .Header .RTSegments !=nil {return _gfcfe .initSymbols ();};return nil ;};func _ddcg (_cecf int )int {if _cecf ==0{return 0;
};_cecf |=_cecf >>1;_cecf |=_cecf >>2;_cecf |=_cecf >>4;_cecf |=_cecf >>8;_cecf |=_cecf >>16;return (_cecf +1)>>1;};func (_cgba *HalftoneRegion )parseHeader ()error {if _fbe :=_cgba .RegionSegment .parseHeader ();_fbe !=nil {return _fbe ;};_abde ,_ggcb :=_cgba ._eeca .ReadBit ();
if _ggcb !=nil {return _ggcb ;};_cgba .HDefaultPixel =int8 (_abde );_bgef ,_ggcb :=_cgba ._eeca .ReadBits (3);if _ggcb !=nil {return _ggcb ;};_cgba .CombinationOperator =_ea .CombinationOperator (_bgef &0xf);_abde ,_ggcb =_cgba ._eeca .ReadBit ();if _ggcb !=nil {return _ggcb ;
};if _abde ==1{_cgba .HSkipEnabled =true ;};_bgef ,_ggcb =_cgba ._eeca .ReadBits (2);if _ggcb !=nil {return _ggcb ;};_cgba .HTemplate =byte (_bgef &0xf);_abde ,_ggcb =_cgba ._eeca .ReadBit ();if _ggcb !=nil {return _ggcb ;};if _abde ==1{_cgba .IsMMREncoded =true ;
};_bgef ,_ggcb =_cgba ._eeca .ReadBits (32);if _ggcb !=nil {return _ggcb ;};_cgba .HGridWidth =uint32 (_bgef &_d .MaxUint32 );_bgef ,_ggcb =_cgba ._eeca .ReadBits (32);if _ggcb !=nil {return _ggcb ;};_cgba .HGridHeight =uint32 (_bgef &_d .MaxUint32 );_bgef ,_ggcb =_cgba ._eeca .ReadBits (32);
if _ggcb !=nil {return _ggcb ;};_cgba .HGridX =int32 (_bgef &_d .MaxInt32 );_bgef ,_ggcb =_cgba ._eeca .ReadBits (32);if _ggcb !=nil {return _ggcb ;};_cgba .HGridY =int32 (_bgef &_d .MaxInt32 );_bgef ,_ggcb =_cgba ._eeca .ReadBits (16);if _ggcb !=nil {return _ggcb ;
};_cgba .HRegionX =uint16 (_bgef &_d .MaxUint16 );_bgef ,_ggcb =_cgba ._eeca .ReadBits (16);if _ggcb !=nil {return _ggcb ;};_cgba .HRegionY =uint16 (_bgef &_d .MaxUint16 );if _ggcb =_cgba .computeSegmentDataStructure ();_ggcb !=nil {return _ggcb ;};return _cgba .checkInput ();
};type template1 struct{};func (_egeg *PageInformationSegment )readMaxStripeSize ()error {_abbd ,_egd :=_egeg ._dcbcd .ReadBits (15);if _egd !=nil {return _egd ;};_egeg .MaxStripeSize =uint16 (_abbd &_d .MaxUint16 );return nil ;};func (_abgc *GenericRegion )updateOverrideFlags ()error {const _faa ="\u0075\u0070\u0064\u0061te\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _abgc .GBAtX ==nil ||_abgc .GBAtY ==nil {return nil ;};if len (_abgc .GBAtX )!=len (_abgc .GBAtY ){return _ag .Errorf (_faa ,"i\u006eco\u0073i\u0073t\u0065\u006e\u0074\u0020\u0041T\u0020\u0070\u0069x\u0065\u006c\u002e\u0020\u0041m\u006f\u0075\u006et\u0020\u006f\u0066\u0020\u0027\u0078\u0027\u0020\u0070\u0069\u0078e\u006c\u0073\u003a %d\u002c\u0020\u0041\u006d\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0027\u0079\u0027\u0020\u0070\u0069\u0078e\u006cs\u003a\u0020\u0025\u0064",len (_abgc .GBAtX ),len (_abgc .GBAtY ));
};_abgc .GBAtOverride =make ([]bool ,len (_abgc .GBAtX ));switch _abgc .GBTemplate {case 0:if !_abgc .UseExtTemplates {if _abgc .GBAtX [0]!=3||_abgc .GBAtY [0]!=-1{_abgc .setOverrideFlag (0);};if _abgc .GBAtX [1]!=-3||_abgc .GBAtY [1]!=-1{_abgc .setOverrideFlag (1);
};if _abgc .GBAtX [2]!=2||_abgc .GBAtY [2]!=-2{_abgc .setOverrideFlag (2);};if _abgc .GBAtX [3]!=-2||_abgc .GBAtY [3]!=-2{_abgc .setOverrideFlag (3);};}else {if _abgc .GBAtX [0]!=-2||_abgc .GBAtY [0]!=0{_abgc .setOverrideFlag (0);};if _abgc .GBAtX [1]!=0||_abgc .GBAtY [1]!=-2{_abgc .setOverrideFlag (1);
};if _abgc .GBAtX [2]!=-2||_abgc .GBAtY [2]!=-1{_abgc .setOverrideFlag (2);};if _abgc .GBAtX [3]!=-1||_abgc .GBAtY [3]!=-2{_abgc .setOverrideFlag (3);};if _abgc .GBAtX [4]!=1||_abgc .GBAtY [4]!=-2{_abgc .setOverrideFlag (4);};if _abgc .GBAtX [5]!=2||_abgc .GBAtY [5]!=-1{_abgc .setOverrideFlag (5);
};if _abgc .GBAtX [6]!=-3||_abgc .GBAtY [6]!=0{_abgc .setOverrideFlag (6);};if _abgc .GBAtX [7]!=-4||_abgc .GBAtY [7]!=0{_abgc .setOverrideFlag (7);};if _abgc .GBAtX [8]!=2||_abgc .GBAtY [8]!=-2{_abgc .setOverrideFlag (8);};if _abgc .GBAtX [9]!=3||_abgc .GBAtY [9]!=-1{_abgc .setOverrideFlag (9);
};if _abgc .GBAtX [10]!=-2||_abgc .GBAtY [10]!=-2{_abgc .setOverrideFlag (10);};if _abgc .GBAtX [11]!=-3||_abgc .GBAtY [11]!=-1{_abgc .setOverrideFlag (11);};};case 1:if _abgc .GBAtX [0]!=3||_abgc .GBAtY [0]!=-1{_abgc .setOverrideFlag (0);};case 2:if _abgc .GBAtX [0]!=2||_abgc .GBAtY [0]!=-1{_abgc .setOverrideFlag (0);
};case 3:if _abgc .GBAtX [0]!=2||_abgc .GBAtY [0]!=-1{_abgc .setOverrideFlag (0);};};return nil ;};func (_eaffg *SymbolDictionary )readNumberOfExportedSymbols ()error {_dfed ,_cdbbb :=_eaffg ._dbbb .ReadBits (32);if _cdbbb !=nil {return _cdbbb ;};_eaffg .NumberOfExportedSymbols =uint32 (_dfed &_d .MaxUint32 );
return nil ;};func (_acaff *TextRegion )InitEncode (globalSymbolsMap ,localSymbolsMap map[int ]int ,comps []int ,inLL *_ea .Points ,symbols *_ea .Bitmaps ,classIDs *_bg .IntSlice ,boxes *_ea .Boxes ,width ,height ,symBits int ){_acaff .RegionInfo =&RegionSegment {BitmapWidth :uint32 (width ),BitmapHeight :uint32 (height )};
_acaff ._dgef =globalSymbolsMap ;_acaff ._fegf =localSymbolsMap ;_acaff ._cdef =comps ;_acaff ._cbcfg =inLL ;_acaff ._egdf =symbols ;_acaff ._cgbg =classIDs ;_acaff ._cfba =boxes ;_acaff ._bfaa =symBits ;};func (_aabfa *PageInformationSegment )checkInput ()error {if _aabfa .PageBMHeight ==_d .MaxInt32 {if !_aabfa .IsStripe {_cb .Log .Debug ("P\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0053\u0065\u0067me\u006e\u0074\u002e\u0049s\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0073\u0068ou\u006c\u0064 \u0062\u0065\u0020\u0074\u0072\u0075\u0065\u002e");
};};return nil ;};func (_dfe *PatternDictionary )readGrayMax ()error {_addf ,_ffdb :=_dfe ._baa .ReadBits (32);if _ffdb !=nil {return _ffdb ;};_dfe .GrayMax =uint32 (_addf &_d .MaxUint32 );return nil ;};func (_dggfg *TextRegion )readHuffmanFlags ()error {var (_eefcd int ;
_ceedb uint64 ;_ebbf error ;);_ ,_ebbf =_dggfg ._bcffg .ReadBit ();if _ebbf !=nil {return _ebbf ;};_eefcd ,_ebbf =_dggfg ._bcffg .ReadBit ();if _ebbf !=nil {return _ebbf ;};_dggfg .SbHuffRSize =int8 (_eefcd );_ceedb ,_ebbf =_dggfg ._bcffg .ReadBits (2);
if _ebbf !=nil {return _ebbf ;};_dggfg .SbHuffRDY =int8 (_ceedb )&0xf;_ceedb ,_ebbf =_dggfg ._bcffg .ReadBits (2);if _ebbf !=nil {return _ebbf ;};_dggfg .SbHuffRDX =int8 (_ceedb )&0xf;_ceedb ,_ebbf =_dggfg ._bcffg .ReadBits (2);if _ebbf !=nil {return _ebbf ;
};_dggfg .SbHuffRDHeight =int8 (_ceedb )&0xf;_ceedb ,_ebbf =_dggfg ._bcffg .ReadBits (2);if _ebbf !=nil {return _ebbf ;};_dggfg .SbHuffRDWidth =int8 (_ceedb )&0xf;_ceedb ,_ebbf =_dggfg ._bcffg .ReadBits (2);if _ebbf !=nil {return _ebbf ;};_dggfg .SbHuffDT =int8 (_ceedb )&0xf;
_ceedb ,_ebbf =_dggfg ._bcffg .ReadBits (2);if _ebbf !=nil {return _ebbf ;};_dggfg .SbHuffDS =int8 (_ceedb )&0xf;_ceedb ,_ebbf =_dggfg ._bcffg .ReadBits (2);if _ebbf !=nil {return _ebbf ;};_dggfg .SbHuffFS =int8 (_ceedb )&0xf;return nil ;};func NewGenericRegion (r _ga .StreamReader )*GenericRegion {return &GenericRegion {RegionSegment :NewRegionSegment (r ),_daag :r };
};func (_fcad *GenericRegion )setParameters (_ggce bool ,_fecd ,_ggbf int64 ,_gbf ,_gdbb uint32 ){_fcad .IsMMREncoded =_ggce ;_fcad .DataOffset =_fecd ;_fcad .DataLength =_ggbf ;_fcad .RegionSegment .BitmapHeight =_gbf ;_fcad .RegionSegment .BitmapWidth =_gdbb ;
_fcad ._cda =nil ;_fcad .Bitmap =nil ;};func (_edd *GenericRegion )copyLineAbove (_eab int )error {_dbec :=_eab *_edd .Bitmap .RowStride ;_cfd :=_dbec -_edd .Bitmap .RowStride ;for _eec :=0;_eec < _edd .Bitmap .RowStride ;_eec ++{_ggac ,_efb :=_edd .Bitmap .GetByte (_cfd );
if _efb !=nil {return _efb ;};_cfd ++;if _efb =_edd .Bitmap .SetByte (_dbec ,_ggac );_efb !=nil {return _efb ;};_dbec ++;};return nil ;};func (_gcfa *TextRegion )symbolIDCodeLengths ()error {var (_dfbba []*_ee .Code ;_fega uint64 ;_bcbb _ee .Tabler ;_abca error ;
);for _baagd :=0;_baagd < 35;_baagd ++{_fega ,_abca =_gcfa ._bcffg .ReadBits (4);if _abca !=nil {return _abca ;};_ddae :=int (_fega &0xf);if _ddae > 0{_dfbba =append (_dfbba ,_ee .NewCode (int32 (_ddae ),0,int32 (_baagd ),false ));};};_bcbb ,_abca =_ee .NewFixedSizeTable (_dfbba );
if _abca !=nil {return _abca ;};var (_gagdg int64 ;_deda uint32 ;_efeb []*_ee .Code ;_edaef int64 ;);for _deda < _gcfa .NumberOfSymbols {_edaef ,_abca =_bcbb .Decode (_gcfa ._bcffg );if _abca !=nil {return _abca ;};if _edaef < 32{if _edaef > 0{_efeb =append (_efeb ,_ee .NewCode (int32 (_edaef ),0,int32 (_deda ),false ));
};_gagdg =_edaef ;_deda ++;}else {var _bagg ,_bafg int64 ;switch _edaef {case 32:_fega ,_abca =_gcfa ._bcffg .ReadBits (2);if _abca !=nil {return _abca ;};_bagg =3+int64 (_fega );if _deda > 0{_bafg =_gagdg ;};case 33:_fega ,_abca =_gcfa ._bcffg .ReadBits (3);
if _abca !=nil {return _abca ;};_bagg =3+int64 (_fega );case 34:_fega ,_abca =_gcfa ._bcffg .ReadBits (7);if _abca !=nil {return _abca ;};_bagg =11+int64 (_fega );};for _acagg :=0;_acagg < int (_bagg );_acagg ++{if _bafg > 0{_efeb =append (_efeb ,_ee .NewCode (int32 (_bafg ),0,int32 (_deda ),false ));
};_deda ++;};};};_gcfa ._bcffg .Align ();_gcfa ._fgg ,_abca =_ee .NewFixedSizeTable (_efeb );return _abca ;};func (_aced *SymbolDictionary )readRegionFlags ()error {var (_fbea uint64 ;_bad int ;);_ ,_agcg :=_aced ._dbbb .ReadBits (3);if _agcg !=nil {return _agcg ;
};_bad ,_agcg =_aced ._dbbb .ReadBit ();if _agcg !=nil {return _agcg ;};_aced .SdrTemplate =int8 (_bad );_fbea ,_agcg =_aced ._dbbb .ReadBits (2);if _agcg !=nil {return _agcg ;};_aced .SdTemplate =int8 (_fbea &0xf);_bad ,_agcg =_aced ._dbbb .ReadBit ();
if _agcg !=nil {return _agcg ;};if _bad ==1{_aced ._cfda =true ;};_bad ,_agcg =_aced ._dbbb .ReadBit ();if _agcg !=nil {return _agcg ;};if _bad ==1{_aced ._gbga =true ;};_bad ,_agcg =_aced ._dbbb .ReadBit ();if _agcg !=nil {return _agcg ;};if _bad ==1{_aced .SdHuffAggInstanceSelection =true ;
};_bad ,_agcg =_aced ._dbbb .ReadBit ();if _agcg !=nil {return _agcg ;};_aced .SdHuffBMSizeSelection =int8 (_bad );_fbea ,_agcg =_aced ._dbbb .ReadBits (2);if _agcg !=nil {return _agcg ;};_aced .SdHuffDecodeWidthSelection =int8 (_fbea &0xf);_fbea ,_agcg =_aced ._dbbb .ReadBits (2);
if _agcg !=nil {return _agcg ;};_aced .SdHuffDecodeHeightSelection =int8 (_fbea &0xf);_bad ,_agcg =_aced ._dbbb .ReadBit ();if _agcg !=nil {return _agcg ;};if _bad ==1{_aced .UseRefinementAggregation =true ;};_bad ,_agcg =_aced ._dbbb .ReadBit ();if _agcg !=nil {return _agcg ;
};if _bad ==1{_aced .IsHuffmanEncoded =true ;};return nil ;};func (_ac *GenericRefinementRegion )GetRegionInfo ()*RegionSegment {return _ac .RegionInfo };func (_bca *PageInformationSegment )readIsLossless ()error {_aagfe ,_bbgac :=_bca ._dcbcd .ReadBit ();
if _bbgac !=nil {return _bbgac ;};if _aagfe ==1{_bca .IsLossless =true ;};return nil ;};func (_bae *GenericRefinementRegion )getPixel (_bacf *_ea .Bitmap ,_dge ,_fgd int )int {if _dge < 0||_dge >=_bacf .Width {return 0;};if _fgd < 0||_fgd >=_bacf .Height {return 0;
};if _bacf .GetPixel (_dge ,_fgd ){return 1;};return 0;};func (_acad *SymbolDictionary )decodeDirectlyThroughGenericRegion (_bdege ,_cbdd uint32 )error {if _acad ._bgd ==nil {_acad ._bgd =NewGenericRegion (_acad ._dbbb );};_acad ._bgd .setParametersWithAt (false ,byte (_acad .SdTemplate ),false ,false ,_acad .SdATX ,_acad .SdATY ,_bdege ,_cbdd ,_acad ._baaf ,_acad ._fbbed );
return _acad .addSymbol (_acad ._bgd );};type TableSegment struct{_dcbf _ga .StreamReader ;_gefd int32 ;_aeaa int32 ;_bcgaa int32 ;_eebg int32 ;_fgdfe int32 ;};func NewRegionSegment (r _ga .StreamReader )*RegionSegment {return &RegionSegment {_fbfd :r }};
func (_edegf *Header )GetSegmentData ()(Segmenter ,error ){var _bgg Segmenter ;if _edegf .SegmentData !=nil {_bgg =_edegf .SegmentData ;};if _bgg ==nil {_acfdc ,_ceda :=_abee [_edegf .Type ];if !_ceda {return nil ,_g .Errorf ("\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u002f\u0020\u0025\u0064\u0020\u0063\u0072e\u0061t\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e\u0020",_edegf .Type ,_edegf .Type );
};_bgg =_acfdc ();_cb .Log .Trace ("\u005b\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u0074\u0020\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0030\u0034\u0058",_edegf .SegmentNumber ,_edegf .SegmentDataStartOffset );
_egbb ,_cecg :=_edegf .subInputReader ();if _cecg !=nil {return nil ,_cecg ;};if _ecae :=_bgg .Init (_edegf ,_egbb );_ecae !=nil {_cb .Log .Debug ("\u0049\u006e\u0069\u0074 \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076 \u0066o\u0072\u0020\u0074\u0079\u0070\u0065\u003a \u0025\u0054",_ecae ,_bgg );
return nil ,_ecae ;};_edegf .SegmentData =_bgg ;};return _bgg ,nil ;};func (_bbc *SymbolDictionary )huffDecodeBmSize ()(int64 ,error ){if _bbc ._fbec ==nil {var (_ddd int ;_fgfe error ;);if _bbc .SdHuffDecodeHeightSelection ==3{_ddd ++;};if _bbc .SdHuffDecodeWidthSelection ==3{_ddd ++;
};_bbc ._fbec ,_fgfe =_bbc .getUserTable (_ddd );if _fgfe !=nil {return 0,_fgfe ;};};return _bbc ._fbec .Decode (_bbc ._dbbb );};func (_edfe *TextRegion )decodeCurrentT ()(int64 ,error ){if _edfe .SbStrips !=1{if _edfe .IsHuffmanEncoded {_dbbdd ,_bdca :=_edfe ._bcffg .ReadBits (byte (_edfe .LogSBStrips ));
return int64 (_dbbdd ),_bdca ;};_ffee ,_eebe :=_edfe ._fagf .DecodeInt (_edfe ._dcccc );if _eebe !=nil {return 0,_eebe ;};return int64 (_ffee ),nil ;};return 0,nil ;};func (_fdc *Header )readDataStartOffset (_geaf _ga .StreamReader ,_fbdg OrganizationType ){if _fbdg ==OSequential {_fdc .SegmentDataStartOffset =uint64 (_geaf .StreamPosition ());
};};func (_fegg *PageInformationSegment )encodeFlags (_eeaf _ga .BinaryWriter )(_aggb error ){const _cfa ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _aggb =_eeaf .SkipBits (1);_aggb !=nil {return _ag .Wrap (_aggb ,_cfa ,"\u0072\u0065\u0073e\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074");
};var _dbdd int ;if _fegg .CombinationOperatorOverrideAllowed (){_dbdd =1;};if _aggb =_eeaf .WriteBit (_dbdd );_aggb !=nil {return _ag .Wrap (_aggb ,_cfa ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u006f\u0076\u0065\u0072\u0072\u0069\u0064\u0064\u0065\u006e");
};_dbdd =0;if _fegg ._afcge {_dbdd =1;};if _aggb =_eeaf .WriteBit (_dbdd );_aggb !=nil {return _ag .Wrap (_aggb ,_cfa ,"\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0075\u0078i\u006ci\u0061r\u0079\u0020\u0062\u0075\u0066\u0066\u0065r");};if _aggb =_eeaf .WriteBit ((int (_fegg ._eaba )>>1)&0x01);
_aggb !=nil {return _ag .Wrap (_aggb ,_cfa ,"\u0063\u006f\u006d\u0062\u0069\u006e\u0061\u0074\u0069\u006fn\u0020\u006f\u0070\u0065\u0072\u0061\u0074o\u0072\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0062\u0069\u0074");};if _aggb =_eeaf .WriteBit (int (_fegg ._eaba )&0x01);
_aggb !=nil {return _ag .Wrap (_aggb ,_cfa ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0062\u0069\u0074");};_dbdd =int (_fegg .DefaultPixelValue );
if _aggb =_eeaf .WriteBit (_dbdd );_aggb !=nil {return _ag .Wrap (_aggb ,_cfa ,"\u0064e\u0066\u0061\u0075\u006c\u0074\u0020\u0070\u0061\u0067\u0065\u0020p\u0069\u0078\u0065\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};_dbdd =0;if _fegg ._fgb {_dbdd =1;
};if _aggb =_eeaf .WriteBit (_dbdd );_aggb !=nil {return _ag .Wrap (_aggb ,_cfa ,"\u0063\u006f\u006e\u0074ai\u006e\u0073\u0020\u0072\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074");};_dbdd =0;if _fegg .IsLossless {_dbdd =1;};if _aggb =_eeaf .WriteBit (_dbdd );
_aggb !=nil {return _ag .Wrap (_aggb ,_cfa ,"p\u0061\u0067\u0065\u0020\u0069\u0073 \u0065\u0076\u0065\u006e\u0074\u0075\u0061\u006c\u006cy\u0020\u006c\u006fs\u0073l\u0065\u0073\u0073");};return nil ;};var _ templater =&template1 {};func (_aagb *RegionSegment )String ()string {_bacfd :=&_fa .Builder {};
_bacfd .WriteString ("\u0009[\u0052E\u0047\u0049\u004f\u004e\u0020S\u0045\u0047M\u0045\u004e\u0054\u005d\u000a");_bacfd .WriteString (_g .Sprintf ("\t\u0009\u002d\u0020\u0042\u0069\u0074m\u0061\u0070\u0020\u0028\u0077\u0069d\u0074\u0068\u002c\u0020\u0068\u0065\u0069g\u0068\u0074\u0029\u0020\u005b\u0025\u0064\u0078\u0025\u0064]\u000a",_aagb .BitmapWidth ,_aagb .BitmapHeight ));
_bacfd .WriteString (_g .Sprintf ("\u0009\u0009\u002d\u0020L\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0028\u0078,\u0079)\u003a\u0020\u005b\u0025\u0064\u002c\u0025d\u005d\u000a",_aagb .XLocation ,_aagb .YLocation ));_bacfd .WriteString (_g .Sprintf ("\t\u0009\u002d\u0020\u0043\u006f\u006db\u0069\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0073",_aagb .CombinaionOperator ));
return _bacfd .String ();};type RegionSegment struct{_fbfd _ga .StreamReader ;BitmapWidth uint32 ;BitmapHeight uint32 ;XLocation uint32 ;YLocation uint32 ;CombinaionOperator _ea .CombinationOperator ;};func (_gggd *PageInformationSegment )String ()string {_gcgd :=&_fa .Builder {};
_gcgd .WriteString ("\u000a\u005b\u0050\u0041G\u0045\u002d\u0049\u004e\u0046\u004f\u0052\u004d\u0041\u0054I\u004fN\u002d\u0053\u0045\u0047\u004d\u0045\u004eT\u005d\u000a");_gcgd .WriteString (_g .Sprintf ("\u0009\u002d \u0042\u004d\u0048e\u0069\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u000a",_gggd .PageBMHeight ));
_gcgd .WriteString (_g .Sprintf ("\u0009-\u0020B\u004d\u0057\u0069\u0064\u0074\u0068\u003a\u0020\u0025\u0064\u000a",_gggd .PageBMWidth ));_gcgd .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0058\u003a\u0020\u0025\u0064\u000a",_gggd .ResolutionX ));
_gcgd .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0059\u003a\u0020\u0025\u0064\u000a",_gggd .ResolutionY ));_gcgd .WriteString (_g .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0073\u000a",_gggd ._eaba ));
_gcgd .WriteString (_g .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006eO\u0070\u0065\u0072\u0061\u0074\u006f\u0072O\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025v\u000a",_gggd ._egcd ));_gcgd .WriteString (_g .Sprintf ("\u0009-\u0020I\u0073\u004c\u006f\u0073\u0073l\u0065\u0073s\u003a\u0020\u0025\u0076\u000a",_gggd .IsLossless ));
_gcgd .WriteString (_g .Sprintf ("\u0009\u002d\u0020R\u0065\u0071\u0075\u0069r\u0065\u0073\u0041\u0075\u0078\u0069\u006ci\u0061\u0072\u0079\u0042\u0075\u0066\u0066\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_gggd ._afcge ));_gcgd .WriteString (_g .Sprintf ("\u0009\u002d\u0020M\u0069\u0067\u0068\u0074C\u006f\u006e\u0074\u0061\u0069\u006e\u0052e\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0076\u000a",_gggd ._fgb ));
_gcgd .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0049\u0073\u0053\u0074\u0072\u0069\u0070\u0065\u0064:\u0020\u0025\u0076\u000a",_gggd .IsStripe ));_gcgd .WriteString (_g .Sprintf ("\t\u002d\u0020\u004d\u0061xS\u0074r\u0069\u0070\u0065\u0053\u0069z\u0065\u003a\u0020\u0025\u0076\u000a",_gggd .MaxStripeSize ));
return _gcgd .String ();};func (_deg *GenericRegion )decodeTemplate0a (_fcea ,_cce ,_cdg int ,_geba ,_dce int )(_cgc error ){const _dad ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0061";var (_bced ,_dfdf int ;_ecc ,_feaa int ;
_ddga byte ;_gdc int ;);if _fcea >=1{_ddga ,_cgc =_deg .Bitmap .GetByte (_dce );if _cgc !=nil {return _ag .Wrap (_cgc ,_dad ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_ecc =int (_ddga );};if _fcea >=2{_ddga ,_cgc =_deg .Bitmap .GetByte (_dce -_deg .Bitmap .RowStride );
if _cgc !=nil {return _ag .Wrap (_cgc ,_dad ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_feaa =int (_ddga )<<6;};_bced =(_ecc &0xf0)|(_feaa &0x3800);for _cacg :=0;_cacg < _cdg ;_cacg =_gdc {var (_gge byte ;_ece int ;);_gdc =_cacg +8;if _ecca :=_cce -_cacg ;
_ecca > 8{_ece =8;}else {_ece =_ecca ;};if _fcea > 0{_ecc <<=8;if _gdc < _cce {_ddga ,_cgc =_deg .Bitmap .GetByte (_dce +1);if _cgc !=nil {return _ag .Wrap (_cgc ,_dad ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_ecc |=int (_ddga );};};if _fcea > 1{_eb :=_dce -_deg .Bitmap .RowStride +1;
_feaa <<=8;if _gdc < _cce {_ddga ,_cgc =_deg .Bitmap .GetByte (_eb );if _cgc !=nil {return _ag .Wrap (_cgc ,_dad ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_feaa |=int (_ddga )<<6;}else {_feaa |=0;};};for _bdf :=0;_bdf < _ece ;_bdf ++{_cgcg :=uint (7-_bdf );
if _deg ._fbag {_dfdf =_deg .overrideAtTemplate0a (_bced ,_cacg +_bdf ,_fcea ,int (_gge ),_bdf ,int (_cgcg ));_deg ._cee .SetIndex (int32 (_dfdf ));}else {_deg ._cee .SetIndex (int32 (_bced ));};var _gcb int ;_gcb ,_cgc =_deg ._ddbg .DecodeBit (_deg ._cee );
if _cgc !=nil {return _ag .Wrap (_cgc ,_dad ,"");};_gge |=byte (_gcb )<<_cgcg ;_bced =((_bced &0x7bf7)<<1)|_gcb |((_ecc >>_cgcg )&0x10)|((_feaa >>_cgcg )&0x800);};if _fece :=_deg .Bitmap .SetByte (_geba ,_gge );_fece !=nil {return _ag .Wrap (_fece ,_dad ,"");
};_geba ++;_dce ++;};return nil ;};func (_gaga *HalftoneRegion )computeGrayScalePlanes (_edeg []*_ea .Bitmap ,_dgd int )([][]int ,error ){_bccc :=make ([][]int ,_gaga .HGridHeight );for _gbed :=0;_gbed < len (_bccc );_gbed ++{_bccc [_gbed ]=make ([]int ,_gaga .HGridWidth );
};for _aeef :=0;_aeef < int (_gaga .HGridHeight );_aeef ++{for _fcf :=0;_fcf < int (_gaga .HGridWidth );_fcf +=8{var _ecfd int ;if _aaed :=int (_gaga .HGridWidth )-_fcf ;_aaed > 8{_ecfd =8;}else {_ecfd =_aaed ;};_acaf :=_edeg [0].GetByteIndex (_fcf ,_aeef );
for _gcbg :=0;_gcbg < _ecfd ;_gcbg ++{_dccg :=_gcbg +_fcf ;_bccc [_aeef ][_dccg ]=0;for _ege :=0;_ege < _dgd ;_ege ++{_eegb ,_bge :=_edeg [_ege ].GetByte (_acaf );if _bge !=nil {return nil ,_bge ;};_eaeb :=_eegb >>uint (7-_dccg &7);_eaebc :=_eaeb &1;_fgfb :=1<<uint (_ege );
_dadb :=int (_eaebc )*_fgfb ;_bccc [_aeef ][_dccg ]+=_dadb ;};};};};return _bccc ,nil ;};func (_faca *Header )writeSegmentDataLength (_bcg _ga .BinaryWriter )(_gbcf int ,_gdccb error ){_cbd :=make ([]byte ,4);_b .BigEndian .PutUint32 (_cbd ,uint32 (_faca .SegmentDataLength ));
if _gbcf ,_gdccb =_bcg .Write (_cbd );_gdccb !=nil {return 0,_ag .Wrap (_gdccb ,"\u0048\u0065a\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u004c\u0065ng\u0074\u0068","");};return _gbcf ,nil ;
};func (_eecc *SymbolDictionary )Encode (w _ga .BinaryWriter )(_bcccc int ,_bdg error ){const _ffde ="\u0053\u0079\u006dbo\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0045\u006e\u0063\u006f\u0064\u0065";if _eecc ==nil {return 0,_ag .Error (_ffde ,"\u0073\u0079m\u0062\u006f\u006c\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066in\u0065\u0064");
};if _bcccc ,_bdg =_eecc .encodeFlags (w );_bdg !=nil {return _bcccc ,_ag .Wrap (_bdg ,_ffde ,"");};_bdbec ,_bdg :=_eecc .encodeATFlags (w );if _bdg !=nil {return _bcccc ,_ag .Wrap (_bdg ,_ffde ,"");};_bcccc +=_bdbec ;if _bdbec ,_bdg =_eecc .encodeRefinementATFlags (w );
_bdg !=nil {return _bcccc ,_ag .Wrap (_bdg ,_ffde ,"");};_bcccc +=_bdbec ;if _bdbec ,_bdg =_eecc .encodeNumSyms (w );_bdg !=nil {return _bcccc ,_ag .Wrap (_bdg ,_ffde ,"");};_bcccc +=_bdbec ;if _bdbec ,_bdg =_eecc .encodeSymbols (w );_bdg !=nil {return _bcccc ,_ag .Wrap (_bdg ,_ffde ,"");
};_bcccc +=_bdbec ;return _bcccc ,nil ;};func (_bacb *TextRegion )initSymbols ()error {const _bgeed ="i\u006e\u0069\u0074\u0053\u0079\u006d\u0062\u006f\u006c\u0073";for _ ,_cgedg :=range _bacb .Header .RTSegments {if _cgedg ==nil {return _ag .Error (_bgeed ,"\u006e\u0069\u006c\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020pr\u006f\u0076\u0069\u0064\u0065\u0064 \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0074\u0065\u0078\u0074\u0020\u0072\u0065g\u0069\u006f\u006e\u0020\u0053\u0079\u006d\u0062o\u006c\u0073");
};if _cgedg .Type ==0{_gecb ,_baee :=_cgedg .GetSegmentData ();if _baee !=nil {return _ag .Wrap (_baee ,_bgeed ,"");};_beea ,_fbbd :=_gecb .(*SymbolDictionary );if !_fbbd {return _ag .Error (_bgeed ,"\u0072e\u0066\u0065r\u0072\u0065\u0064 \u0054\u006f\u0020\u0053\u0065\u0067\u006de\u006e\u0074\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_beea ._agd =_bacb ._ebf ;_cgbcc ,_baee :=_beea .GetDictionary ();if _baee !=nil {return _ag .Wrap (_baee ,_bgeed ,"");};_bacb .Symbols =append (_bacb .Symbols ,_cgbcc ...);};};_bacb .NumberOfSymbols =uint32 (len (_bacb .Symbols ));return nil ;};func (_efcf *TextRegion )decodeIds ()(int64 ,error ){const _dega ="\u0064e\u0063\u006f\u0064\u0065\u0049\u0064s";
if _efcf .IsHuffmanEncoded {if _efcf .SbHuffDS ==3{if _efcf ._gcfde ==nil {_bgae :=0;if _efcf .SbHuffFS ==3{_bgae ++;};var _dadf error ;_efcf ._gcfde ,_dadf =_efcf .getUserTable (_bgae );if _dadf !=nil {return 0,_ag .Wrap (_dadf ,_dega ,"");};};return _efcf ._gcfde .Decode (_efcf ._bcffg );
};_afgf ,_addg :=_ee .GetStandardTable (8+int (_efcf .SbHuffDS ));if _addg !=nil {return 0,_ag .Wrap (_addg ,_dega ,"");};return _afgf .Decode (_efcf ._bcffg );};_dddd ,_aeaaa :=_efcf ._fagf .DecodeInt (_efcf ._bged );if _aeaaa !=nil {return 0,_ag .Wrap (_aeaaa ,_dega ,"\u0063\u0078\u0049\u0041\u0044\u0053");
};return int64 (_dddd ),nil ;};func (_egf *GenericRegion )overrideAtTemplate1 (_aeaf ,_egfg ,_fgda ,_cbbd ,_eccd int )int {_aeaf &=0x1FF7;if _egf .GBAtY [0]==0&&_egf .GBAtX [0]>=-int8 (_eccd ){_aeaf |=(_cbbd >>uint (7-(int8 (_eccd )+_egf .GBAtX [0]))&0x1)<<3;
}else {_aeaf |=int (_egf .getPixel (_egfg +int (_egf .GBAtX [0]),_fgda +int (_egf .GBAtY [0])))<<3;};return _aeaf ;};func (_dccf *SymbolDictionary )decodeThroughTextRegion (_ecgc ,_agda ,_bgbg uint32 )error {if _dccf ._fbbc ==nil {_dccf ._fbbc =_gebbcf (_dccf ._dbbb ,nil );
_dccf ._fbbc .setContexts (_dccf ._baaf ,_be .NewStats (512,1),_be .NewStats (512,1),_be .NewStats (512,1),_be .NewStats (512,1),_dccf ._agd ,_be .NewStats (512,1),_be .NewStats (512,1),_be .NewStats (512,1),_be .NewStats (512,1));};if _ggec :=_dccf .setSymbolsArray ();
_ggec !=nil {return _ggec ;};_dccf ._fbbc .setParameters (_dccf ._fbbed ,_dccf .IsHuffmanEncoded ,true ,_ecgc ,_agda ,_bgbg ,1,_dccf ._accd +_dccf ._eedab ,0,0,0,1,0,0,0,0,0,0,0,0,0,_dccf .SdrTemplate ,_dccf .SdrATX ,_dccf .SdrATY ,_dccf ._edfda ,_dccf ._dbcg );
return _dccf .addSymbol (_dccf ._fbbc );};func (_dab *GenericRegion )decodeLine (_aef ,_bbd ,_dec int )error {const _fgdf ="\u0064\u0065\u0063\u006f\u0064\u0065\u004c\u0069\u006e\u0065";_bdc :=_dab .Bitmap .GetByteIndex (0,_aef );_cfeg :=_bdc -_dab .Bitmap .RowStride ;
switch _dab .GBTemplate {case 0:if !_dab .UseExtTemplates {return _dab .decodeTemplate0a (_aef ,_bbd ,_dec ,_bdc ,_cfeg );};return _dab .decodeTemplate0b (_aef ,_bbd ,_dec ,_bdc ,_cfeg );case 1:return _dab .decodeTemplate1 (_aef ,_bbd ,_dec ,_bdc ,_cfeg );
case 2:return _dab .decodeTemplate2 (_aef ,_bbd ,_dec ,_bdc ,_cfeg );case 3:return _dab .decodeTemplate3 (_aef ,_bbd ,_dec ,_bdc ,_cfeg );};return _ag .Errorf (_fgdf ,"\u0069\u006e\u0076a\u006c\u0069\u0064\u0020G\u0042\u0054\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u003a\u0020\u0025\u0064",_dab .GBTemplate );
};func (_fga *TableSegment )HtLow ()int32 {return _fga ._eebg };func (_afb *GenericRegion )writeGBAtPixels (_dfce _ga .BinaryWriter )(_ebc int ,_dbc error ){const _cddbf ="\u0077r\u0069t\u0065\u0047\u0042\u0041\u0074\u0050\u0069\u0078\u0065\u006c\u0073";
if _afb .UseMMR {return 0,nil ;};_dfcb :=1;if _afb .GBTemplate ==0{_dfcb =4;}else if _afb .UseExtTemplates {_dfcb =12;};if len (_afb .GBAtX )!=_dfcb {return 0,_ag .Errorf (_cddbf ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0058\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};if len (_afb .GBAtY )!=_dfcb {return 0,_ag .Errorf (_cddbf ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0059\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};for _gac :=0;_gac < _dfcb ;_gac ++{if _dbc =_dfce .WriteByte (byte (_afb .GBAtX [_gac ]));_dbc !=nil {return _ebc ,_ag .Wrap (_dbc ,_cddbf ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0058");};_ebc ++;if _dbc =_dfce .WriteByte (byte (_afb .GBAtY [_gac ]));
_dbc !=nil {return _ebc ,_ag .Wrap (_dbc ,_cddbf ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0059");};_ebc ++;};return _ebc ,nil ;};func (_bbgd *PageInformationSegment )readContainsRefinement ()error {_abea ,_aeaee :=_bbgd ._dcbcd .ReadBit ();
if _aeaee !=nil {return _aeaee ;};if _abea ==1{_bbgd ._fgb =true ;};return nil ;};func (_fgbb *SymbolDictionary )getUserTable (_bcfc int )(_ee .Tabler ,error ){var _dfcf int ;for _ ,_efag :=range _fgbb .Header .RTSegments {if _efag .Type ==53{if _dfcf ==_bcfc {_gadc ,_egbaa :=_efag .GetSegmentData ();
if _egbaa !=nil {return nil ,_egbaa ;};_fed :=_gadc .(_ee .BasicTabler );return _ee .NewEncodedTable (_fed );};_dfcf ++;};};return nil ,nil ;};func (_fdee Type )String ()string {switch _fdee {case TSymbolDictionary :return "\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079";
case TIntermediateTextRegion :return "\u0049n\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020T\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateTextRegion :return "I\u006d\u006d\u0065\u0064ia\u0074e\u0020\u0054\u0065\u0078\u0074 \u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateLosslessTextRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020L\u006f\u0073\u0073\u006c\u0065\u0073\u0073 \u0054\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TPatternDictionary :return "\u0050a\u0074t\u0065\u0072\u006e\u0020\u0044i\u0063\u0074i\u006f\u006e\u0061\u0072\u0079";
case TIntermediateHalftoneRegion :return "\u0049\u006e\u0074\u0065r\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0048\u0061l\u0066t\u006f\u006e\u0065\u0020\u0052\u0065\u0067i\u006f\u006e";case TImmediateHalftoneRegion :return "\u0049m\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u0048\u0061l\u0066t\u006fn\u0065\u0020\u0052\u0065\u0067\u0069\u006fn";
case TImmediateLosslessHalftoneRegion :return "\u0049\u006d\u006ded\u0069\u0061\u0074\u0065\u0020\u004c\u006f\u0073\u0073l\u0065s\u0073 \u0048a\u006c\u0066\u0074\u006f\u006e\u0065\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TIntermediateGenericRegion :return "I\u006e\u0074\u0065\u0072\u006d\u0065d\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020R\u0065g\u0069\u006f\u006e";
case TImmediateGenericRegion :return "\u0049m\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006ee\u0072\u0069\u0063\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateLosslessGenericRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u004c\u006f\u0073\u0073\u006c\u0065\u0073\u0073\u0020\u0047e\u006e\u0065\u0072\u0069\u0063\u0020\u0052e\u0067\u0069\u006f\u006e";
case TIntermediateGenericRefinementRegion :return "\u0049\u006e\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0020\u0052\u0065\u0066i\u006e\u0065\u006d\u0065\u006et\u0020\u0052e\u0067\u0069\u006f\u006e";
case TImmediateGenericRefinementRegion :return "I\u006d\u006d\u0065\u0064\u0069\u0061t\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020\u0052\u0065\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0067\u0069o\u006e";case TImmediateLosslessGenericRefinementRegion :return "\u0049m\u006d\u0065d\u0069\u0061\u0074\u0065 \u004c\u006f\u0073s\u006c\u0065\u0073\u0073\u0020\u0047\u0065\u006e\u0065ri\u0063\u0020\u0052e\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020R\u0065\u0067i\u006f\u006e";
case TPageInformation :return "\u0050\u0061g\u0065\u0020\u0049n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e";case TEndOfPage :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0050\u0061\u0067\u0065";case TEndOfStrip :return "\u0045\u006e\u0064 \u004f\u0066\u0020\u0053\u0074\u0072\u0069\u0070";
case TEndOfFile :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0046\u0069\u006c\u0065";case TProfiles :return "\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0073";case TTables :return "\u0054\u0061\u0062\u006c\u0065\u0073";case TExtension :return "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn";
case TBitmap :return "\u0042\u0069\u0074\u006d\u0061\u0070";};return "I\u006ev\u0061\u006c\u0069\u0064\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0020Ki\u006e\u0064";};func (_fge *Header )readReferredToSegmentNumbers (_bcecd _ga .StreamReader ,_gedec int )([]int ,error ){const _dafc ="\u0072\u0065\u0061\u0064R\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053e\u0067m\u0065\u006e\u0074\u004e\u0075\u006d\u0062e\u0072\u0073";
_fabe :=make ([]int ,_gedec );if _gedec > 0{_fge .RTSegments =make ([]*Header ,_gedec );var (_edegb uint64 ;_bfg error ;);for _aegf :=0;_aegf < _gedec ;_aegf ++{_edegb ,_bfg =_bcecd .ReadBits (byte (_fge .referenceSize ())<<3);if _bfg !=nil {return nil ,_ag .Wrapf (_bfg ,_dafc ,"\u0027\u0025\u0064\u0027 \u0072\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0020\u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u0075\u006db\u0065\u0072",_aegf );
};_fabe [_aegf ]=int (_edegb &_d .MaxInt32 );};};return _fabe ,nil ;};func (_aac *GenericRefinementRegion )overrideAtTemplate0 (_fcda ,_aea ,_dccc ,_abb ,_fbf int )int {if _aac ._aab [0]{_fcda &=0xfff7;if _aac .GrAtY [0]==0&&int (_aac .GrAtX [0])>=-_fbf {_fcda |=(_abb >>uint (7-(_fbf +int (_aac .GrAtX [0])))&0x1)<<3;
}else {_fcda |=_aac .getPixel (_aac .RegionBitmap ,_aea +int (_aac .GrAtX [0]),_dccc +int (_aac .GrAtY [0]))<<3;};};if _aac ._aab [1]{_fcda &=0xefff;if _aac .GrAtY [1]==0&&int (_aac .GrAtX [1])>=-_fbf {_fcda |=(_abb >>uint (7-(_fbf +int (_aac .GrAtX [1])))&0x1)<<12;
}else {_fcda |=_aac .getPixel (_aac .ReferenceBitmap ,_aea +int (_aac .GrAtX [1]),_dccc +int (_aac .GrAtY [1]));};};return _fcda ;};func (_ggfa *HalftoneRegion )computeY (_bfeb ,_dcd int )int {return _ggfa .shiftAndFill (int (_ggfa .HGridY )+_bfeb *int (_ggfa .HRegionX )-_dcd *int (_ggfa .HRegionY ));
};func (_dcb *GenericRegion )Encode (w _ga .BinaryWriter )(_gce int ,_gff error ){const _fca ="G\u0065n\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069o\u006e\u002e\u0045\u006eco\u0064\u0065";if _dcb .Bitmap ==nil {return 0,_ag .Error (_fca ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");
};_cag ,_gff :=_dcb .RegionSegment .Encode (w );if _gff !=nil {return 0,_ag .Wrap (_gff ,_fca ,"\u0052\u0065\u0067\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_gce +=_cag ;if _gff =w .SkipBits (4);_gff !=nil {return _gce ,_ag .Wrap (_gff ,_fca ,"\u0073k\u0069p\u0020\u0072\u0065\u0073\u0065r\u0076\u0065d\u0020\u0062\u0069\u0074\u0073");
};var _gfcc int ;if _dcb .IsTPGDon {_gfcc =1;};if _gff =w .WriteBit (_gfcc );_gff !=nil {return _gce ,_ag .Wrap (_gff ,_fca ,"\u0074\u0070\u0067\u0064\u006f\u006e");};_gfcc =0;if _gff =w .WriteBit (int (_dcb .GBTemplate >>1)&0x01);_gff !=nil {return _gce ,_ag .Wrap (_gff ,_fca ,"f\u0069r\u0073\u0074\u0020\u0067\u0062\u0074\u0065\u006dp\u006c\u0061\u0074\u0065 b\u0069\u0074");
};if _gff =w .WriteBit (int (_dcb .GBTemplate )&0x01);_gff !=nil {return _gce ,_ag .Wrap (_gff ,_fca ,"s\u0065\u0063\u006f\u006ed \u0067b\u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u0062\u0069\u0074");};if _dcb .UseMMR {_gfcc =1;};if _gff =w .WriteBit (_gfcc );
_gff !=nil {return _gce ,_ag .Wrap (_gff ,_fca ,"u\u0073\u0065\u0020\u004d\u004d\u0052\u0020\u0062\u0069\u0074");};_gce ++;if _cag ,_gff =_dcb .writeGBAtPixels (w );_gff !=nil {return _gce ,_ag .Wrap (_gff ,_fca ,"");};_gce +=_cag ;_eafe :=_ce .New ();
if _gff =_eafe .EncodeBitmap (_dcb .Bitmap ,_dcb .IsTPGDon );_gff !=nil {return _gce ,_ag .Wrap (_gff ,_fca ,"");};_eafe .Final ();var _ecg int64 ;if _ecg ,_gff =_eafe .WriteTo (w );_gff !=nil {return _gce ,_ag .Wrap (_gff ,_fca ,"");};_gce +=int (_ecg );
return _gce ,nil ;};type PatternDictionary struct{_baa _ga .StreamReader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;GBAtX []int8 ;GBAtY []int8 ;IsMMREncoded bool ;HDTemplate byte ;HdpWidth byte ;HdpHeight byte ;
Patterns []*_ea .Bitmap ;GrayMax uint32 ;};func (_ffbd *GenericRegion )GetRegionInfo ()*RegionSegment {return _ffbd .RegionSegment };func (_efffc *TextRegion )blit (_bfcg *_ea .Bitmap ,_baeb int64 )error {if _efffc .IsTransposed ==0&&(_efffc .ReferenceCorner ==2||_efffc .ReferenceCorner ==3){_efffc ._acedf +=int64 (_bfcg .Width -1);
}else if _efffc .IsTransposed ==1&&(_efffc .ReferenceCorner ==0||_efffc .ReferenceCorner ==2){_efffc ._acedf +=int64 (_bfcg .Height -1);};_bccfa :=_efffc ._acedf ;if _efffc .IsTransposed ==1{_bccfa ,_baeb =_baeb ,_bccfa ;};switch _efffc .ReferenceCorner {case 0:_baeb -=int64 (_bfcg .Height -1);
case 2:_baeb -=int64 (_bfcg .Height -1);_bccfa -=int64 (_bfcg .Width -1);case 3:_bccfa -=int64 (_bfcg .Width -1);};_bgcg :=_ea .Blit (_bfcg ,_efffc .RegionBitmap ,int (_bccfa ),int (_baeb ),_efffc .CombinationOperator );if _bgcg !=nil {return _bgcg ;};
if _efffc .IsTransposed ==0&&(_efffc .ReferenceCorner ==0||_efffc .ReferenceCorner ==1){_efffc ._acedf +=int64 (_bfcg .Width -1);};if _efffc .IsTransposed ==1&&(_efffc .ReferenceCorner ==1||_efffc .ReferenceCorner ==3){_efffc ._acedf +=int64 (_bfcg .Height -1);
};return nil ;};func (_ebcd *PageInformationSegment )readCombinationOperator ()error {_bfae ,_ffefd :=_ebcd ._dcbcd .ReadBits (2);if _ffefd !=nil {return _ffefd ;};_ebcd ._eaba =_ea .CombinationOperator (int (_bfae ));return nil ;};func (_ceeda *SymbolDictionary )setSymbolsArray ()error {if _ceeda ._cfae ==nil {if _baefg :=_ceeda .retrieveImportSymbols ();
_baefg !=nil {return _baefg ;};};if _ceeda ._edfda ==nil {_ceeda ._edfda =append (_ceeda ._edfda ,_ceeda ._cfae ...);};return nil ;};type Pager interface{GetSegment (int )(*Header ,error );GetBitmap ()(*_ea .Bitmap ,error );};func (_abbg *GenericRegion )Init (h *Header ,r _ga .StreamReader )error {_abbg .RegionSegment =NewRegionSegment (r );
_abbg ._daag =r ;return _abbg .parseHeader ();};func (_fgdg *Header )writeReferredToCount (_cefe _ga .BinaryWriter )(_fgcc int ,_aegb error ){const _feab ="w\u0072i\u0074\u0065\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0043ou\u006e\u0074";
_fgdg .RTSNumbers =make ([]int ,len (_fgdg .RTSegments ));for _egcg ,_fffg :=range _fgdg .RTSegments {_fgdg .RTSNumbers [_egcg ]=int (_fffg .SegmentNumber );};if len (_fgdg .RTSNumbers )<=4{var _fafg byte ;if len (_fgdg .RetainBits )>=1{_fafg =_fgdg .RetainBits [0];
};_fafg |=byte (len (_fgdg .RTSNumbers ))<<5;if _aegb =_cefe .WriteByte (_fafg );_aegb !=nil {return 0,_ag .Wrap (_aegb ,_feab ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return 1,nil ;};_edf :=uint32 (len (_fgdg .RTSNumbers ));
_dfaf :=make ([]byte ,4+_bg .Ceil (len (_fgdg .RTSNumbers )+1,8));_edf |=0x7<<29;_b .BigEndian .PutUint32 (_dfaf ,_edf );copy (_dfaf [1:],_fgdg .RetainBits );_fgcc ,_aegb =_cefe .Write (_dfaf );if _aegb !=nil {return 0,_ag .Wrap (_aegb ,_feab ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};return _fgcc ,nil ;};func (_fade *RegionSegment )Size ()int {return 17};func (_afg *Header )Encode (w _ga .BinaryWriter )(_dbbd int ,_bbga error ){const _fcag ="\u0048\u0065\u0061d\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065";var _cdb _ga .BinaryWriter ;
_cb .Log .Trace ("\u005b\u0053\u0045G\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045\u0052\u005d[\u0045\u004e\u0043\u004f\u0044\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _bbga !=nil {_cb .Log .Trace ("[\u0053\u0045\u0047\u004d\u0045\u004eT\u002d\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0045\u004e\u0043\u004f\u0044E\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020%\u0076",_bbga );
}else {_cb .Log .Trace ("\u005b\u0053\u0045\u0047ME\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0025\u0076",_afg );_cb .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045N\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u005b\u0045\u004e\u0043O\u0044\u0045\u005d\u0020\u0046\u0069\u006ei\u0073\u0068\u0065\u0064");
};}();w .FinishByte ();if _afg .SegmentData !=nil {_bgga ,_cbcb :=_afg .SegmentData .(SegmentEncoder );if !_cbcb {return 0,_ag .Errorf (_fcag ,"\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0064\u006f\u0065s\u006e\u0027\u0074\u0020\u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074 \u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0045\u006e\u0063\u006f\u0064er\u0020\u0069\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065",_afg .SegmentData );
};_cdb =_ga .BufferedMSB ();_dbbd ,_bbga =_bgga .Encode (_cdb );if _bbga !=nil {return 0,_ag .Wrap (_bbga ,_fcag ,"");};_afg .SegmentDataLength =uint64 (_dbbd );};if _afg .pageSize ()==4{_afg .PageAssociationFieldSize =true ;};var _ceed int ;_ceed ,_bbga =_afg .writeSegmentNumber (w );
if _bbga !=nil {return 0,_ag .Wrap (_bbga ,_fcag ,"");};_dbbd +=_ceed ;if _bbga =_afg .writeFlags (w );_bbga !=nil {return _dbbd ,_ag .Wrap (_bbga ,_fcag ,"");};_dbbd ++;_ceed ,_bbga =_afg .writeReferredToCount (w );if _bbga !=nil {return 0,_ag .Wrap (_bbga ,_fcag ,"");
};_dbbd +=_ceed ;_ceed ,_bbga =_afg .writeReferredToSegments (w );if _bbga !=nil {return 0,_ag .Wrap (_bbga ,_fcag ,"");};_dbbd +=_ceed ;_ceed ,_bbga =_afg .writeSegmentPageAssociation (w );if _bbga !=nil {return 0,_ag .Wrap (_bbga ,_fcag ,"");};_dbbd +=_ceed ;
_ceed ,_bbga =_afg .writeSegmentDataLength (w );if _bbga !=nil {return 0,_ag .Wrap (_bbga ,_fcag ,"");};_dbbd +=_ceed ;_afg .HeaderLength =int64 (_dbbd )-int64 (_afg .SegmentDataLength );if _cdb !=nil {if _ ,_bbga =w .Write (_cdb .Data ());_bbga !=nil {return _dbbd ,_ag .Wrap (_bbga ,_fcag ,"\u0077r\u0069t\u0065\u0020\u0073\u0065\u0067m\u0065\u006et\u0020\u0064\u0061\u0074\u0061");
};};return _dbbd ,nil ;};func (_abe *GenericRegion )overrideAtTemplate2 (_ccdg ,_faede ,_ffc ,_cddb ,_bdeg int )int {_ccdg &=0x3FB;if _abe .GBAtY [0]==0&&_abe .GBAtX [0]>=-int8 (_bdeg ){_ccdg |=(_cddb >>uint (7-(int8 (_bdeg )+_abe .GBAtX [0]))&0x1)<<2;
}else {_ccdg |=int (_abe .getPixel (_faede +int (_abe .GBAtX [0]),_ffc +int (_abe .GBAtY [0])))<<2;};return _ccdg ;};func (_fbac *GenericRegion )setOverrideFlag (_dcbc int ){_fbac .GBAtOverride [_dcbc ]=true ;_fbac ._fbag =true ;};var (_ Regioner =&TextRegion {};
_ Segmenter =&TextRegion {};);