//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package segments ;import (_d "encoding/binary";_a "errors";_ff "fmt";_cb "github.com/unidoc/unipdf/v3/common";_ad "github.com/unidoc/unipdf/v3/internal/bitwise";_ca "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_eb "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_cg "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/arithmetic";_ed "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/huffman";_be "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/mmr";_gc "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/arithmetic";
_dd "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_bg "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_fa "golang.org/x/xerrors";_b "image";_g "io";_e "math";_f "strings";_ef "time";);func (_dfg *Header )Encode (w _ad .BinaryWriter )(_gfef int ,_aegf error ){const _cbed ="\u0048\u0065\u0061d\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065";
var _becb _ad .BinaryWriter ;_cb .Log .Trace ("\u005b\u0053\u0045G\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045\u0052\u005d[\u0045\u004e\u0043\u004f\u0044\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _aegf !=nil {_cb .Log .Trace ("[\u0053\u0045\u0047\u004d\u0045\u004eT\u002d\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0045\u004e\u0043\u004f\u0044E\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020%\u0076",_aegf );
}else {_cb .Log .Trace ("\u005b\u0053\u0045\u0047ME\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0025\u0076",_dfg );_cb .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045N\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u005b\u0045\u004e\u0043O\u0044\u0045\u005d\u0020\u0046\u0069\u006ei\u0073\u0068\u0065\u0064");
};}();w .FinishByte ();if _dfg .SegmentData !=nil {_bddf ,_fbbf :=_dfg .SegmentData .(SegmentEncoder );if !_fbbf {return 0,_dd .Errorf (_cbed ,"\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0064\u006f\u0065s\u006e\u0027\u0074\u0020\u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074 \u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0045\u006e\u0063\u006f\u0064er\u0020\u0069\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065",_dfg .SegmentData );
};_becb =_ad .BufferedMSB ();_gfef ,_aegf =_bddf .Encode (_becb );if _aegf !=nil {return 0,_dd .Wrap (_aegf ,_cbed ,"");};_dfg .SegmentDataLength =uint64 (_gfef );};if _dfg .pageSize ()==4{_dfg .PageAssociationFieldSize =true ;};var _gdab int ;_gdab ,_aegf =_dfg .writeSegmentNumber (w );
if _aegf !=nil {return 0,_dd .Wrap (_aegf ,_cbed ,"");};_gfef +=_gdab ;if _aegf =_dfg .writeFlags (w );_aegf !=nil {return _gfef ,_dd .Wrap (_aegf ,_cbed ,"");};_gfef ++;_gdab ,_aegf =_dfg .writeReferredToCount (w );if _aegf !=nil {return 0,_dd .Wrap (_aegf ,_cbed ,"");
};_gfef +=_gdab ;_gdab ,_aegf =_dfg .writeReferredToSegments (w );if _aegf !=nil {return 0,_dd .Wrap (_aegf ,_cbed ,"");};_gfef +=_gdab ;_gdab ,_aegf =_dfg .writeSegmentPageAssociation (w );if _aegf !=nil {return 0,_dd .Wrap (_aegf ,_cbed ,"");};_gfef +=_gdab ;
_gdab ,_aegf =_dfg .writeSegmentDataLength (w );if _aegf !=nil {return 0,_dd .Wrap (_aegf ,_cbed ,"");};_gfef +=_gdab ;_dfg .HeaderLength =int64 (_gfef )-int64 (_dfg .SegmentDataLength );if _becb !=nil {if _ ,_aegf =w .Write (_becb .Data ());_aegf !=nil {return _gfef ,_dd .Wrap (_aegf ,_cbed ,"\u0077r\u0069t\u0065\u0020\u0073\u0065\u0067m\u0065\u006et\u0020\u0064\u0061\u0074\u0061");
};};return _gfef ,nil ;};func (_dcaf *SymbolDictionary )getSbSymCodeLen ()int8 {_gagg :=int8 (_e .Ceil (_e .Log (float64 (_dcaf ._dgbd +_dcaf .NumberOfNewSymbols ))/_e .Log (2)));if _dcaf .IsHuffmanEncoded &&_gagg < 1{return 1;};return _gagg ;};func (_ecaceg *Header )readHeaderLength (_cdac _ad .StreamReader ,_efeg int64 ){_ecaceg .HeaderLength =_cdac .StreamPosition ()-_efeg ;
};func (_afee *PageInformationSegment )checkInput ()error {if _afee .PageBMHeight ==_e .MaxInt32 {if !_afee .IsStripe {_cb .Log .Debug ("P\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0053\u0065\u0067me\u006e\u0074\u002e\u0049s\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0073\u0068ou\u006c\u0064 \u0062\u0065\u0020\u0074\u0072\u0075\u0065\u002e");
};};return nil ;};func (_bdda *SymbolDictionary )readNumberOfExportedSymbols ()error {_gdef ,_fdga :=_bdda ._ecgb .ReadBits (32);if _fdga !=nil {return _fdga ;};_bdda .NumberOfExportedSymbols =uint32 (_gdef &_e .MaxUint32 );return nil ;};func (_dcg *HalftoneRegion )Init (hd *Header ,r _ad .StreamReader )error {_dcg ._defba =r ;
_dcg ._aeff =hd ;_dcg .RegionSegment =NewRegionSegment (r );return _dcg .parseHeader ();};func (_bfcb *template0 )form (_cbb ,_bcab ,_aafe ,_bgab ,_ecc int16 )int16 {return (_cbb <<10)|(_bcab <<7)|(_aafe <<4)|(_bgab <<1)|_ecc ;};const (ORandom OrganizationType =iota ;
OSequential ;);func (_defd *RegionSegment )Size ()int {return 17};func (_cagf *SymbolDictionary )getToExportFlags ()([]int ,error ){var (_fbef int ;_adca int32 ;_caaed error ;_gdgfg =int32 (_cagf ._dgbd +_cagf .NumberOfNewSymbols );_fgeg =make ([]int ,_gdgfg );
);for _dfeg :=int32 (0);_dfeg < _gdgfg ;_dfeg +=_adca {if _cagf .IsHuffmanEncoded {_dfag ,_gffbf :=_ed .GetStandardTable (1);if _gffbf !=nil {return nil ,_gffbf ;};_bagbb ,_gffbf :=_dfag .Decode (_cagf ._ecgb );if _gffbf !=nil {return nil ,_gffbf ;};_adca =int32 (_bagbb );
}else {_adca ,_caaed =_cagf ._abef .DecodeInt (_cagf ._ebfe );if _caaed !=nil {return nil ,_caaed ;};};if _adca !=0{for _eefg :=_dfeg ;_eefg < _dfeg +_adca ;_eefg ++{_fgeg [_eefg ]=_fbef ;};};if _fbef ==0{_fbef =1;}else {_fbef =0;};};return _fgeg ,nil ;
};func (_cbedf *Header )readDataStartOffset (_cfe _ad .StreamReader ,_bdgb OrganizationType ){if _bdgb ==OSequential {_cbedf .SegmentDataStartOffset =uint64 (_cfe .StreamPosition ());};};func (_feb *Header )parse (_fcbe Documenter ,_gged _ad .StreamReader ,_efdb int64 ,_fdb OrganizationType )(_effaa error ){const _faf ="\u0070\u0061\u0072s\u0065";
_cb .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u005b\u0050A\u0052\u0053\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _effaa !=nil {_cb .Log .Trace ("\u005b\u0053\u0045GM\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045R\u005d[\u0050A\u0052S\u0045\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_effaa );
}else {_cb .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052]\u005bP\u0041\u0052\u0053\u0045\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");};}();_ ,_effaa =_gged .Seek (_efdb ,_g .SeekStart );
if _effaa !=nil {return _dd .Wrap (_effaa ,_faf ,"\u0073\u0065\u0065\u006b\u0020\u0073\u0074\u0061\u0072\u0074");};if _effaa =_feb .readSegmentNumber (_gged );_effaa !=nil {return _dd .Wrap (_effaa ,_faf ,"");};if _effaa =_feb .readHeaderFlags ();_effaa !=nil {return _dd .Wrap (_effaa ,_faf ,"");
};var _dgda uint64 ;_dgda ,_effaa =_feb .readNumberOfReferredToSegments (_gged );if _effaa !=nil {return _dd .Wrap (_effaa ,_faf ,"");};_feb .RTSNumbers ,_effaa =_feb .readReferredToSegmentNumbers (_gged ,int (_dgda ));if _effaa !=nil {return _dd .Wrap (_effaa ,_faf ,"");
};_effaa =_feb .readSegmentPageAssociation (_fcbe ,_gged ,_dgda ,_feb .RTSNumbers ...);if _effaa !=nil {return _dd .Wrap (_effaa ,_faf ,"");};if _feb .Type !=TEndOfFile {if _effaa =_feb .readSegmentDataLength (_gged );_effaa !=nil {return _dd .Wrap (_effaa ,_faf ,"");
};};_feb .readDataStartOffset (_gged ,_fdb );_feb .readHeaderLength (_gged ,_efdb );_cb .Log .Trace ("\u0025\u0073",_feb );return nil ;};func (_cbeb *GenericRegion )setParametersMMR (_acfb bool ,_cceg ,_ffcg int64 ,_abc ,_deaec uint32 ,_gda byte ,_eeg ,_ebda bool ,_ecdg ,_gddc []int8 ){_cbeb .DataOffset =_cceg ;
_cbeb .DataLength =_ffcg ;_cbeb .RegionSegment =&RegionSegment {};_cbeb .RegionSegment .BitmapHeight =_abc ;_cbeb .RegionSegment .BitmapWidth =_deaec ;_cbeb .GBTemplate =_gda ;_cbeb .IsMMREncoded =_acfb ;_cbeb .IsTPGDon =_eeg ;_cbeb .GBAtX =_ecdg ;_cbeb .GBAtY =_gddc ;
};func (_bef *HalftoneRegion )grayScaleDecoding (_adcd int )([][]int ,error ){var (_acbf []int8 ;_afgd []int8 ;);if !_bef .IsMMREncoded {_acbf =make ([]int8 ,4);_afgd =make ([]int8 ,4);if _bef .HTemplate <=1{_acbf [0]=3;}else if _bef .HTemplate >=2{_acbf [0]=2;
};_afgd [0]=-1;_acbf [1]=-3;_afgd [1]=-1;_acbf [2]=2;_afgd [2]=-2;_acbf [3]=-2;_afgd [3]=-2;};_gggc :=make ([]*_eb .Bitmap ,_adcd );_abd :=NewGenericRegion (_bef ._defba );_abd .setParametersMMR (_bef .IsMMREncoded ,_bef .DataOffset ,_bef .DataLength ,_bef .HGridHeight ,_bef .HGridWidth ,_bef .HTemplate ,false ,_bef .HSkipEnabled ,_acbf ,_afgd );
_bagb :=_adcd -1;var _dgfc error ;_gggc [_bagb ],_dgfc =_abd .GetRegionBitmap ();if _dgfc !=nil {return nil ,_dgfc ;};for _bagb > 0{_bagb --;_abd .Bitmap =nil ;_gggc [_bagb ],_dgfc =_abd .GetRegionBitmap ();if _dgfc !=nil {return nil ,_dgfc ;};if _dgfc =_bef .combineGrayscalePlanes (_gggc ,_bagb );
_dgfc !=nil {return nil ,_dgfc ;};};return _bef .computeGrayScalePlanes (_gggc ,_adcd );};func (_cea *GenericRegion )decodeSLTP ()(int ,error ){switch _cea .GBTemplate {case 0:_cea ._cedf .SetIndex (0x9B25);case 1:_cea ._cedf .SetIndex (0x795);case 2:_cea ._cedf .SetIndex (0xE5);
case 3:_cea ._cedf .SetIndex (0x195);};return _cea ._afcg .DecodeBit (_cea ._cedf );};func (_dddb *TableSegment )Init (h *Header ,r _ad .StreamReader )error {_dddb ._acabe =r ;return _dddb .parseHeader ();};func (_gfbf *GenericRegion )overrideAtTemplate0b (_bfa ,_fdda ,_cabc ,_cadbf ,_gbac ,_cfaf int )int {if _gfbf .GBAtOverride [0]{_bfa &=0xFFFD;
if _gfbf .GBAtY [0]==0&&_gfbf .GBAtX [0]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [0]&0x1))<<1;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [0]),_cabc +int (_gfbf .GBAtY [0])))<<1;};};if _gfbf .GBAtOverride [1]{_bfa &=0xDFFF;
if _gfbf .GBAtY [1]==0&&_gfbf .GBAtX [1]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [1]&0x1))<<13;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [1]),_cabc +int (_gfbf .GBAtY [1])))<<13;};};if _gfbf .GBAtOverride [2]{_bfa &=0xFDFF;
if _gfbf .GBAtY [2]==0&&_gfbf .GBAtX [2]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [2]&0x1))<<9;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [2]),_cabc +int (_gfbf .GBAtY [2])))<<9;};};if _gfbf .GBAtOverride [3]{_bfa &=0xBFFF;
if _gfbf .GBAtY [3]==0&&_gfbf .GBAtX [3]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [3]&0x1))<<14;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [3]),_cabc +int (_gfbf .GBAtY [3])))<<14;};};if _gfbf .GBAtOverride [4]{_bfa &=0xEFFF;
if _gfbf .GBAtY [4]==0&&_gfbf .GBAtX [4]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [4]&0x1))<<12;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [4]),_cabc +int (_gfbf .GBAtY [4])))<<12;};};if _gfbf .GBAtOverride [5]{_bfa &=0xFFDF;
if _gfbf .GBAtY [5]==0&&_gfbf .GBAtX [5]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [5]&0x1))<<5;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [5]),_cabc +int (_gfbf .GBAtY [5])))<<5;};};if _gfbf .GBAtOverride [6]{_bfa &=0xFFFB;
if _gfbf .GBAtY [6]==0&&_gfbf .GBAtX [6]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [6]&0x1))<<2;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [6]),_cabc +int (_gfbf .GBAtY [6])))<<2;};};if _gfbf .GBAtOverride [7]{_bfa &=0xFFF7;
if _gfbf .GBAtY [7]==0&&_gfbf .GBAtX [7]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [7]&0x1))<<3;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [7]),_cabc +int (_gfbf .GBAtY [7])))<<3;};};if _gfbf .GBAtOverride [8]{_bfa &=0xF7FF;
if _gfbf .GBAtY [8]==0&&_gfbf .GBAtX [8]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [8]&0x1))<<11;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [8]),_cabc +int (_gfbf .GBAtY [8])))<<11;};};if _gfbf .GBAtOverride [9]{_bfa &=0xFFEF;
if _gfbf .GBAtY [9]==0&&_gfbf .GBAtX [9]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [9]&0x1))<<4;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [9]),_cabc +int (_gfbf .GBAtY [9])))<<4;};};if _gfbf .GBAtOverride [10]{_bfa &=0x7FFF;
if _gfbf .GBAtY [10]==0&&_gfbf .GBAtX [10]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [10]&0x1))<<15;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [10]),_cabc +int (_gfbf .GBAtY [10])))<<15;};};if _gfbf .GBAtOverride [11]{_bfa &=0xFDFF;
if _gfbf .GBAtY [11]==0&&_gfbf .GBAtX [11]>=-int8 (_gbac ){_bfa |=(_cadbf >>uint (int8 (_cfaf )-_gfbf .GBAtX [11]&0x1))<<10;}else {_bfa |=int (_gfbf .getPixel (_fdda +int (_gfbf .GBAtX [11]),_cabc +int (_gfbf .GBAtY [11])))<<10;};};return _bfa ;};func (_fdad *SymbolDictionary )decodeHeightClassDeltaHeightWithHuffman ()(int64 ,error ){switch _fdad .SdHuffDecodeHeightSelection {case 0:_edb ,_ggdda :=_ed .GetStandardTable (4);
if _ggdda !=nil {return 0,_ggdda ;};return _edb .Decode (_fdad ._ecgb );case 1:_acaa ,_fdge :=_ed .GetStandardTable (5);if _fdge !=nil {return 0,_fdge ;};return _acaa .Decode (_fdad ._ecgb );case 3:if _fdad ._aeeg ==nil {_cdfed ,_ffee :=_ed .GetStandardTable (0);
if _ffee !=nil {return 0,_ffee ;};_fdad ._aeeg =_cdfed ;};return _fdad ._aeeg .Decode (_fdad ._ecgb );};return 0,nil ;};func (_gfde *SymbolDictionary )readRegionFlags ()error {var (_edbg uint64 ;_efgbf int ;);_ ,_abb :=_gfde ._ecgb .ReadBits (3);if _abb !=nil {return _abb ;
};_efgbf ,_abb =_gfde ._ecgb .ReadBit ();if _abb !=nil {return _abb ;};_gfde .SdrTemplate =int8 (_efgbf );_edbg ,_abb =_gfde ._ecgb .ReadBits (2);if _abb !=nil {return _abb ;};_gfde .SdTemplate =int8 (_edbg &0xf);_efgbf ,_abb =_gfde ._ecgb .ReadBit ();
if _abb !=nil {return _abb ;};if _efgbf ==1{_gfde ._efac =true ;};_efgbf ,_abb =_gfde ._ecgb .ReadBit ();if _abb !=nil {return _abb ;};if _efgbf ==1{_gfde ._faaa =true ;};_efgbf ,_abb =_gfde ._ecgb .ReadBit ();if _abb !=nil {return _abb ;};if _efgbf ==1{_gfde .SdHuffAggInstanceSelection =true ;
};_efgbf ,_abb =_gfde ._ecgb .ReadBit ();if _abb !=nil {return _abb ;};_gfde .SdHuffBMSizeSelection =int8 (_efgbf );_edbg ,_abb =_gfde ._ecgb .ReadBits (2);if _abb !=nil {return _abb ;};_gfde .SdHuffDecodeWidthSelection =int8 (_edbg &0xf);_edbg ,_abb =_gfde ._ecgb .ReadBits (2);
if _abb !=nil {return _abb ;};_gfde .SdHuffDecodeHeightSelection =int8 (_edbg &0xf);_efgbf ,_abb =_gfde ._ecgb .ReadBit ();if _abb !=nil {return _abb ;};if _efgbf ==1{_gfde .UseRefinementAggregation =true ;};_efgbf ,_abb =_gfde ._ecgb .ReadBit ();if _abb !=nil {return _abb ;
};if _efgbf ==1{_gfde .IsHuffmanEncoded =true ;};return nil ;};type EncodeInitializer interface{InitEncode ();};func (_cdgg *PageInformationSegment )String ()string {_dgaa :=&_f .Builder {};_dgaa .WriteString ("\u000a\u005b\u0050\u0041G\u0045\u002d\u0049\u004e\u0046\u004f\u0052\u004d\u0041\u0054I\u004fN\u002d\u0053\u0045\u0047\u004d\u0045\u004eT\u005d\u000a");
_dgaa .WriteString (_ff .Sprintf ("\u0009\u002d \u0042\u004d\u0048e\u0069\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u000a",_cdgg .PageBMHeight ));_dgaa .WriteString (_ff .Sprintf ("\u0009-\u0020B\u004d\u0057\u0069\u0064\u0074\u0068\u003a\u0020\u0025\u0064\u000a",_cdgg .PageBMWidth ));
_dgaa .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0058\u003a\u0020\u0025\u0064\u000a",_cdgg .ResolutionX ));_dgaa .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0059\u003a\u0020\u0025\u0064\u000a",_cdgg .ResolutionY ));
_dgaa .WriteString (_ff .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0073\u000a",_cdgg ._ddb ));_dgaa .WriteString (_ff .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006eO\u0070\u0065\u0072\u0061\u0074\u006f\u0072O\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025v\u000a",_cdgg ._aefbf ));
_dgaa .WriteString (_ff .Sprintf ("\u0009-\u0020I\u0073\u004c\u006f\u0073\u0073l\u0065\u0073s\u003a\u0020\u0025\u0076\u000a",_cdgg .IsLossless ));_dgaa .WriteString (_ff .Sprintf ("\u0009\u002d\u0020R\u0065\u0071\u0075\u0069r\u0065\u0073\u0041\u0075\u0078\u0069\u006ci\u0061\u0072\u0079\u0042\u0075\u0066\u0066\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_cdgg ._dfbe ));
_dgaa .WriteString (_ff .Sprintf ("\u0009\u002d\u0020M\u0069\u0067\u0068\u0074C\u006f\u006e\u0074\u0061\u0069\u006e\u0052e\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0076\u000a",_cdgg ._fbff ));_dgaa .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0049\u0073\u0053\u0074\u0072\u0069\u0070\u0065\u0064:\u0020\u0025\u0076\u000a",_cdgg .IsStripe ));
_dgaa .WriteString (_ff .Sprintf ("\t\u002d\u0020\u004d\u0061xS\u0074r\u0069\u0070\u0065\u0053\u0069z\u0065\u003a\u0020\u0025\u0076\u000a",_cdgg .MaxStripeSize ));return _dgaa .String ();};func (_cddd *HalftoneRegion )renderPattern (_baef [][]int )(_gddb error ){var _ecag ,_bcbg int ;
for _daef :=0;_daef < int (_cddd .HGridHeight );_daef ++{for _fge :=0;_fge < int (_cddd .HGridWidth );_fge ++{_ecag =_cddd .computeX (_daef ,_fge );_bcbg =_cddd .computeY (_daef ,_fge );_cgb :=_cddd .Patterns [_baef [_daef ][_fge ]];if _gddb =_eb .Blit (_cgb ,_cddd .HalftoneRegionBitmap ,_ecag +int (_cddd .HGridX ),_bcbg +int (_cddd .HGridY ),_cddd .CombinationOperator );
_gddb !=nil {return _gddb ;};};};return nil ;};type Segmenter interface{Init (_adeb *Header ,_eged _ad .StreamReader )error ;};var _ templater =&template0 {};func _acc (_accg _ad .StreamReader ,_ddag *Header )*GenericRefinementRegion {return &GenericRefinementRegion {_eg :_accg ,RegionInfo :NewRegionSegment (_accg ),_de :_ddag ,_fd :&template0 {},_ga :&template1 {}};
};func (_cgee *PatternDictionary )readPatternWidthAndHeight ()error {_debe ,_aacc :=_cgee ._deda .ReadByte ();if _aacc !=nil {return _aacc ;};_cgee .HdpWidth =_debe ;_debe ,_aacc =_cgee ._deda .ReadByte ();if _aacc !=nil {return _aacc ;};_cgee .HdpHeight =_debe ;
return nil ;};func (_fgbb *GenericRegion )decodeTemplate2 (_ccc ,_gbba ,_efgc int ,_fce ,_bdadg int )(_acbd error ){const _ebab ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0032";var (_cff ,_dae int ;_beae ,_aeac int ;_eccd byte ;
_fbb ,_beaf int ;);if _ccc >=1{_eccd ,_acbd =_fgbb .Bitmap .GetByte (_bdadg );if _acbd !=nil {return _dd .Wrap (_acbd ,_ebab ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0031");};_beae =int (_eccd );};if _ccc >=2{_eccd ,_acbd =_fgbb .Bitmap .GetByte (_bdadg -_fgbb .Bitmap .RowStride );
if _acbd !=nil {return _dd .Wrap (_acbd ,_ebab ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0032");};_aeac =int (_eccd )<<4;};_cff =(_beae >>3&0x7c)|(_aeac >>3&0x380);for _cdfe :=0;_cdfe < _efgc ;_cdfe =_fbb {var (_gab byte ;
_bba int ;);_fbb =_cdfe +8;if _bcb :=_gbba -_cdfe ;_bcb > 8{_bba =8;}else {_bba =_bcb ;};if _ccc > 0{_beae <<=8;if _fbb < _gbba {_eccd ,_acbd =_fgbb .Bitmap .GetByte (_bdadg +1);if _acbd !=nil {return _dd .Wrap (_acbd ,_ebab ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0030");
};_beae |=int (_eccd );};};if _ccc > 1{_aeac <<=8;if _fbb < _gbba {_eccd ,_acbd =_fgbb .Bitmap .GetByte (_bdadg -_fgbb .Bitmap .RowStride +1);if _acbd !=nil {return _dd .Wrap (_acbd ,_ebab ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0031");
};_aeac |=int (_eccd )<<4;};};for _cgag :=0;_cgag < _bba ;_cgag ++{_ceee :=uint (10-_cgag );if _fgbb ._edcf {_dae =_fgbb .overrideAtTemplate2 (_cff ,_cdfe +_cgag ,_ccc ,int (_gab ),_cgag );_fgbb ._cedf .SetIndex (int32 (_dae ));}else {_fgbb ._cedf .SetIndex (int32 (_cff ));
};_beaf ,_acbd =_fgbb ._afcg .DecodeBit (_fgbb ._cedf );if _acbd !=nil {return _dd .Wrap (_acbd ,_ebab ,"");};_gab |=byte (_beaf <<uint (7-_cgag ));_cff =((_cff &0x1bd)<<1)|_beaf |((_beae >>_ceee )&0x4)|((_aeac >>_ceee )&0x80);};if _ggb :=_fgbb .Bitmap .SetByte (_fce ,_gab );
_ggb !=nil {return _dd .Wrap (_ggb ,_ebab ,"");};_fce ++;_bdadg ++;};return nil ;};func (_dcgb *PageInformationSegment )parseHeader ()(_cceb error ){_cb .Log .Trace ("\u005b\u0050\u0061\u0067\u0065I\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067m\u0065\u006e\u0074\u005d\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u002e\u002e");
defer func (){var _ddca ="[\u0050\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072m\u0061\u0074\u0069\u006f\u006e\u0053\u0065gm\u0065\u006e\u0074\u005d \u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065ad\u0065\u0072 \u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064";
if _cceb !=nil {_ddca +="\u0020\u0077\u0069t\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u0020"+_cceb .Error ();}else {_ddca +="\u0020\u0073\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079";};_cb .Log .Trace (_ddca );}();if _cceb =_dcgb .readWidthAndHeight ();
_cceb !=nil {return _cceb ;};if _cceb =_dcgb .readResolution ();_cceb !=nil {return _cceb ;};_ ,_cceb =_dcgb ._fga .ReadBit ();if _cceb !=nil {return _cceb ;};if _cceb =_dcgb .readCombinationOperatorOverrideAllowed ();_cceb !=nil {return _cceb ;};if _cceb =_dcgb .readRequiresAuxiliaryBuffer ();
_cceb !=nil {return _cceb ;};if _cceb =_dcgb .readCombinationOperator ();_cceb !=nil {return _cceb ;};if _cceb =_dcgb .readDefaultPixelValue ();_cceb !=nil {return _cceb ;};if _cceb =_dcgb .readContainsRefinement ();_cceb !=nil {return _cceb ;};if _cceb =_dcgb .readIsLossless ();
_cceb !=nil {return _cceb ;};if _cceb =_dcgb .readIsStriped ();_cceb !=nil {return _cceb ;};if _cceb =_dcgb .readMaxStripeSize ();_cceb !=nil {return _cceb ;};if _cceb =_dcgb .checkInput ();_cceb !=nil {return _cceb ;};_cb .Log .Trace ("\u0025\u0073",_dcgb );
return nil ;};type templater interface{form (_aedf ,_dee ,_dgdc ,_ffe ,_edc int16 )int16 ;setIndex (_eddc *_cg .DecoderStats );};func (_fcga *TextRegion )decodeSymbolInstances ()error {_aebaa ,_bfegd :=_fcga .decodeStripT ();if _bfegd !=nil {return _bfegd ;
};var (_bccff int64 ;_fcfa uint32 ;);for _fcfa < _fcga .NumberOfSymbolInstances {_ffa ,_fbgb :=_fcga .decodeDT ();if _fbgb !=nil {return _fbgb ;};_aebaa +=_ffa ;var _acge int64 ;_gecf :=true ;_fcga ._ggbc =0;for {if _gecf {_acge ,_fbgb =_fcga .decodeDfs ();
if _fbgb !=nil {return _fbgb ;};_bccff +=_acge ;_fcga ._ggbc =_bccff ;_gecf =false ;}else {_deaeg ,_gaeg :=_fcga .decodeIds ();if _fa .Is (_gaeg ,_bg .ErrOOB ){break ;};if _gaeg !=nil {return _gaeg ;};if _fcfa >=_fcga .NumberOfSymbolInstances {break ;};
_fcga ._ggbc +=_deaeg +int64 (_fcga .SbDsOffset );};_bbf ,_gcfd :=_fcga .decodeCurrentT ();if _gcfd !=nil {return _gcfd ;};_dgeb :=_aebaa +_bbf ;_cacbf ,_gcfd :=_fcga .decodeID ();if _gcfd !=nil {return _gcfd ;};_ebbb ,_gcfd :=_fcga .decodeRI ();if _gcfd !=nil {return _gcfd ;
};_ffaf ,_gcfd :=_fcga .decodeIb (_ebbb ,_cacbf );if _gcfd !=nil {return _gcfd ;};if _gcfd =_fcga .blit (_ffaf ,_dgeb );_gcfd !=nil {return _gcfd ;};_fcfa ++;};};return nil ;};type Type int ;func (_dca *PatternDictionary )setGbAtPixels (){if _dca .HDTemplate ==0{_dca .GBAtX =make ([]int8 ,4);
_dca .GBAtY =make ([]int8 ,4);_dca .GBAtX [0]=-int8 (_dca .HdpWidth );_dca .GBAtY [0]=0;_dca .GBAtX [1]=-3;_dca .GBAtY [1]=-1;_dca .GBAtX [2]=2;_dca .GBAtY [2]=-2;_dca .GBAtX [3]=-2;_dca .GBAtY [3]=-2;}else {_dca .GBAtX =[]int8 {-int8 (_dca .HdpWidth )};
_dca .GBAtY =[]int8 {0};};};func (_edba *TextRegion )setCodingStatistics ()error {if _edba ._aeba ==nil {_edba ._aeba =_cg .NewStats (512,1);};if _edba ._afag ==nil {_edba ._afag =_cg .NewStats (512,1);};if _edba ._cdfcb ==nil {_edba ._cdfcb =_cg .NewStats (512,1);
};if _edba ._cbcd ==nil {_edba ._cbcd =_cg .NewStats (512,1);};if _edba ._aagc ==nil {_edba ._aagc =_cg .NewStats (512,1);};if _edba ._afgf ==nil {_edba ._afgf =_cg .NewStats (512,1);};if _edba ._ddcf ==nil {_edba ._ddcf =_cg .NewStats (512,1);};if _edba ._dbed ==nil {_edba ._dbed =_cg .NewStats (1<<uint (_edba ._afdda ),1);
};if _edba ._bgaa ==nil {_edba ._bgaa =_cg .NewStats (512,1);};if _edba ._cdbd ==nil {_edba ._cdbd =_cg .NewStats (512,1);};if _edba ._ccde ==nil {var _bbbd error ;_edba ._ccde ,_bbbd =_cg .New (_edba ._gbdb );if _bbbd !=nil {return _bbbd ;};};return nil ;
};func (_gdag *PageInformationSegment )readIsStriped ()error {_aggcg ,_cegb :=_gdag ._fga .ReadBit ();if _cegb !=nil {return _cegb ;};if _aggcg ==1{_gdag .IsStripe =true ;};return nil ;};func (_beb *GenericRefinementRegion )getGrReference ()(*_eb .Bitmap ,error ){segments :=_beb ._de .RTSegments ;
if len (segments )==0{return nil ,_a .New ("\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0065\u0078is\u0074\u0073");};_gg ,_cba :=segments [0].GetSegmentData ();if _cba !=nil {return nil ,_cba ;
};_bgb ,_gd :=_gg .(Regioner );if !_gd {return nil ,_ff .Errorf ("\u0072\u0065\u0066\u0065\u0072r\u0065\u0064\u0020\u0074\u006f\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_gg );
};return _bgb .GetRegionBitmap ();};func (_ffdf *GenericRegion )writeGBAtPixels (_dffcf _ad .BinaryWriter )(_fcgc int ,_ggfe error ){const _gfbfd ="\u0077r\u0069t\u0065\u0047\u0042\u0041\u0074\u0050\u0069\u0078\u0065\u006c\u0073";if _ffdf .UseMMR {return 0,nil ;
};_gaee :=1;if _ffdf .GBTemplate ==0{_gaee =4;}else if _ffdf .UseExtTemplates {_gaee =12;};if len (_ffdf .GBAtX )!=_gaee {return 0,_dd .Errorf (_gfbfd ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0058\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};if len (_ffdf .GBAtY )!=_gaee {return 0,_dd .Errorf (_gfbfd ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0059\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};for _afdd :=0;_afdd < _gaee ;_afdd ++{if _ggfe =_dffcf .WriteByte (byte (_ffdf .GBAtX [_afdd ]));_ggfe !=nil {return _fcgc ,_dd .Wrap (_ggfe ,_gfbfd ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0058");};_fcgc ++;if _ggfe =_dffcf .WriteByte (byte (_ffdf .GBAtY [_afdd ]));
_ggfe !=nil {return _fcgc ,_dd .Wrap (_ggfe ,_gfbfd ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0059");};_fcgc ++;};return _fcgc ,nil ;};func (_eaaa *SymbolDictionary )setSymbolsArray ()error {if _eaaa ._fced ==nil {if _ebccb :=_eaaa .retrieveImportSymbols ();
_ebccb !=nil {return _ebccb ;};};if _eaaa ._afdb ==nil {_eaaa ._afdb =append (_eaaa ._afdb ,_eaaa ._fced ...);};return nil ;};func (_cbcc *PageInformationSegment )readCombinationOperatorOverrideAllowed ()error {_acfa ,_cfage :=_cbcc ._fga .ReadBit ();if _cfage !=nil {return _cfage ;
};if _acfa ==1{_cbcc ._aefbf =true ;};return nil ;};func (_gega *SymbolDictionary )getUserTable (_abdb int )(_ed .Tabler ,error ){var _fddd int ;for _ ,_abda :=range _gega .Header .RTSegments {if _abda .Type ==53{if _fddd ==_abdb {_fegg ,_ggec :=_abda .GetSegmentData ();
if _ggec !=nil {return nil ,_ggec ;};_cged :=_fegg .(_ed .BasicTabler );return _ed .NewEncodedTable (_cged );};_fddd ++;};};return nil ,nil ;};func (_agcf *Header )pageSize ()uint {if _agcf .PageAssociation <=255{return 1;};return 4;};func (_gbcad *TextRegion )initSymbols ()error {const _ccfgg ="i\u006e\u0069\u0074\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
for _ ,_bbcb :=range _gbcad .Header .RTSegments {if _bbcb ==nil {return _dd .Error (_ccfgg ,"\u006e\u0069\u006c\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020pr\u006f\u0076\u0069\u0064\u0065\u0064 \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0074\u0065\u0078\u0074\u0020\u0072\u0065g\u0069\u006f\u006e\u0020\u0053\u0079\u006d\u0062o\u006c\u0073");
};if _bbcb .Type ==0{_aecc ,_feff :=_bbcb .GetSegmentData ();if _feff !=nil {return _dd .Wrap (_feff ,_ccfgg ,"");};_cfcc ,_eaddd :=_aecc .(*SymbolDictionary );if !_eaddd {return _dd .Error (_ccfgg ,"\u0072e\u0066\u0065r\u0072\u0065\u0064 \u0054\u006f\u0020\u0053\u0065\u0067\u006de\u006e\u0074\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_cfcc ._gfbe =_gbcad ._dbed ;_ffad ,_feff :=_cfcc .GetDictionary ();if _feff !=nil {return _dd .Wrap (_feff ,_ccfgg ,"");};_gbcad .Symbols =append (_gbcad .Symbols ,_ffad ...);};};_gbcad .NumberOfSymbols =uint32 (len (_gbcad .Symbols ));return nil ;};
func (_eggc *RegionSegment )readCombinationOperator ()error {_cdb ,_aafcd :=_eggc ._aaaf .ReadBits (3);if _aafcd !=nil {return _aafcd ;};_eggc .CombinaionOperator =_eb .CombinationOperator (_cdb &0xF);return nil ;};type Pager interface{GetSegment (int )(*Header ,error );
GetBitmap ()(*_eb .Bitmap ,error );};func (_bfdb *TextRegion )decodeSymInRefSize ()(int64 ,error ){const _aaae ="\u0064e\u0063o\u0064\u0065\u0053\u0079\u006dI\u006e\u0052e\u0066\u0053\u0069\u007a\u0065";if _bfdb .SbHuffRSize ==0{_adfg ,_fcdge :=_ed .GetStandardTable (1);
if _fcdge !=nil {return 0,_dd .Wrap (_fcdge ,_aaae ,"");};return _adfg .Decode (_bfdb ._gbdb );};if _bfdb ._aeee ==nil {var (_gcb int ;_abcg error ;);if _bfdb .SbHuffFS ==3{_gcb ++;};if _bfdb .SbHuffDS ==3{_gcb ++;};if _bfdb .SbHuffDT ==3{_gcb ++;};if _bfdb .SbHuffRDWidth ==3{_gcb ++;
};if _bfdb .SbHuffRDHeight ==3{_gcb ++;};if _bfdb .SbHuffRDX ==3{_gcb ++;};if _bfdb .SbHuffRDY ==3{_gcb ++;};_bfdb ._aeee ,_abcg =_bfdb .getUserTable (_gcb );if _abcg !=nil {return 0,_dd .Wrap (_abcg ,_aaae ,"");};};_geaf ,_aafdc :=_bfdb ._aeee .Decode (_bfdb ._gbdb );
if _aafdc !=nil {return 0,_dd .Wrap (_aafdc ,_aaae ,"");};return _geaf ,nil ;};func (_befg *TextRegion )getSymbols ()error {if _befg .Header .RTSegments !=nil {return _befg .initSymbols ();};return nil ;};func _edeb (_abac int )int {if _abac ==0{return 0;
};_abac |=_abac >>1;_abac |=_abac >>2;_abac |=_abac >>4;_abac |=_abac >>8;_abac |=_abac >>16;return (_abac +1)>>1;};func (_bbc *Header )writeSegmentNumber (_dgfe _ad .BinaryWriter )(_dabe int ,_gbbf error ){_efbf :=make ([]byte ,4);_d .BigEndian .PutUint32 (_efbf ,_bbc .SegmentNumber );
if _dabe ,_gbbf =_dgfe .Write (_efbf );_gbbf !=nil {return 0,_dd .Wrap (_gbbf ,"\u0048e\u0061\u0064\u0065\u0072.\u0077\u0072\u0069\u0074\u0065S\u0065g\u006de\u006e\u0074\u004e\u0075\u006d\u0062\u0065r","");};return _dabe ,nil ;};func (_degb *PatternDictionary )extractPatterns (_eed *_eb .Bitmap )error {var _cdcca int ;
_acde :=make ([]*_eb .Bitmap ,_degb .GrayMax +1);for _cdcca <=int (_degb .GrayMax ){_dec :=int (_degb .HdpWidth )*_cdcca ;_ffbd :=_b .Rect (_dec ,0,_dec +int (_degb .HdpWidth ),int (_degb .HdpHeight ));_edfd ,_cgfe :=_eb .Extract (_ffbd ,_eed );if _cgfe !=nil {return _cgfe ;
};_acde [_cdcca ]=_edfd ;_cdcca ++;};_degb .Patterns =_acde ;return nil ;};func (_bcdd *PatternDictionary )readTemplate ()error {_bcf ,_edcab :=_bcdd ._deda .ReadBits (2);if _edcab !=nil {return _edcab ;};_bcdd .HDTemplate =byte (_bcf );return nil ;};func (_ebgf *TextRegion )checkInput ()error {const _cega ="\u0063\u0068\u0065\u0063\u006b\u0049\u006e\u0070\u0075\u0074";
if !_ebgf .UseRefinement {if _ebgf .SbrTemplate !=0{_cb .Log .Debug ("\u0053\u0062\u0072Te\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_ebgf .SbrTemplate =0;};};if _ebgf .SbHuffFS ==2||_ebgf .SbHuffRDWidth ==2||_ebgf .SbHuffRDHeight ==2||_ebgf .SbHuffRDX ==2||_ebgf .SbHuffRDY ==2{return _dd .Error (_cega ,"h\u0075\u0066\u0066\u006d\u0061\u006e \u0066\u006c\u0061\u0067\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064");
};if !_ebgf .UseRefinement {if _ebgf .SbHuffRSize !=0{_cb .Log .Debug ("\u0053\u0062\u0048uf\u0066\u0052\u0053\u0069\u007a\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_ebgf .SbHuffRSize =0;};if _ebgf .SbHuffRDY !=0{_cb .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044Y\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");
_ebgf .SbHuffRDY =0;};if _ebgf .SbHuffRDX !=0{_cb .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044X\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");_ebgf .SbHuffRDX =0;};if _ebgf .SbHuffRDWidth !=0{_cb .Log .Debug ("\u0053b\u0048\u0075\u0066\u0066R\u0044\u0057\u0069\u0064\u0074h\u0020s\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u00200");
_ebgf .SbHuffRDWidth =0;};if _ebgf .SbHuffRDHeight !=0{_cb .Log .Debug ("\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069g\u0068\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020b\u0065\u0020\u0030");_ebgf .SbHuffRDHeight =0;};};return nil ;
};func (_gaead *PageInformationSegment )encodeStripingInformation (_cefb _ad .BinaryWriter )(_eacf int ,_beg error ){const _deeb ="\u0065n\u0063\u006f\u0064\u0065S\u0074\u0072\u0069\u0070\u0069n\u0067I\u006ef\u006f\u0072\u006d\u0061\u0074\u0069\u006fn";
if !_gaead .IsStripe {if _eacf ,_beg =_cefb .Write ([]byte {0x00,0x00});_beg !=nil {return 0,_dd .Wrap (_beg ,_deeb ,"n\u006f\u0020\u0073\u0074\u0072\u0069\u0070\u0069\u006e\u0067");};return _eacf ,nil ;};_gcad :=make ([]byte ,2);_d .BigEndian .PutUint16 (_gcad ,_gaead .MaxStripeSize |1<<15);
if _eacf ,_beg =_cefb .Write (_gcad );_beg !=nil {return 0,_dd .Wrapf (_beg ,_deeb ,"\u0073\u0074\u0072i\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0064",_gaead .MaxStripeSize );};return _eacf ,nil ;};func (_aecg *PageInformationSegment )readRequiresAuxiliaryBuffer ()error {_fbca ,_gbca :=_aecg ._fga .ReadBit ();
if _gbca !=nil {return _gbca ;};if _fbca ==1{_aecg ._dfbe =true ;};return nil ;};func (_ddac *HalftoneRegion )checkInput ()error {if _ddac .IsMMREncoded {if _ddac .HTemplate !=0{_cb .Log .Debug ("\u0048\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030",_ddac .HTemplate );
};if _ddac .HSkipEnabled {_cb .Log .Debug ("\u0048\u0053\u006b\u0069\u0070\u0045\u006e\u0061\u0062\u006c\u0065\u0064\u0020\u0030\u0020\u0025\u0076\u0020(\u0073\u0068\u006f\u0075\u006c\u0064\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u0029",_ddac .HSkipEnabled );
};};return nil ;};func (_dfce *SymbolDictionary )retrieveImportSymbols ()error {for _ ,_fbab :=range _dfce .Header .RTSegments {if _fbab .Type ==0{_bcbgc ,_dgfb :=_fbab .GetSegmentData ();if _dgfb !=nil {return _dgfb ;};_gede ,_aegg :=_bcbgc .(*SymbolDictionary );
if !_aegg {return _ff .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0044\u0061\u0074a\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u003a\u0020%\u0054",_bcbgc );
};_ddeg ,_dgfb :=_gede .GetDictionary ();if _dgfb !=nil {return _ff .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064 \u0073\u0065\u0067m\u0065\u006e\u0074 \u0077\u0069t\u0068\u0020\u0069\u006e\u0064\u0065x\u003a %\u0064\u0020\u0067\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0073",_fbab .SegmentNumber ,_dgfb .Error ());
};_dfce ._fced =append (_dfce ._fced ,_ddeg ...);_dfce ._dgbd +=_gede .NumberOfExportedSymbols ;};};return nil ;};func (_ggg *GenericRefinementRegion )String ()string {_bdf :=&_f .Builder {};_bdf .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");
_bdf .WriteString (_ggg .RegionInfo .String ()+"\u000a");_bdf .WriteString (_ff .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0052\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_ggg .IsTPGROn ));_bdf .WriteString (_ff .Sprintf ("\u0009-\u0020T\u0065\u006d\u0070\u006c\u0061t\u0065\u0049D\u003a\u0020\u0025\u0076\u000a",_ggg .TemplateID ));
_bdf .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_ggg .GrAtX ));_bdf .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_ggg .GrAtY ));
_bdf .WriteString (_ff .Sprintf ("\u0009-\u0020R\u0065\u0066\u0065\u0072\u0065n\u0063\u0065D\u0058\u0020\u0025\u0076\u000a",_ggg .ReferenceDX ));_bdf .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0052ef\u0065\u0072\u0065\u006e\u0063\u0044\u0065\u0059\u003a\u0020\u0025\u0076\u000a",_ggg .ReferenceDY ));
return _bdf .String ();};func (_bbad *PatternDictionary )readIsMMREncoded ()error {_gbcd ,_aac :=_bbad ._deda .ReadBit ();if _aac !=nil {return _aac ;};if _gbcd !=0{_bbad .IsMMREncoded =true ;};return nil ;};type template1 struct{};func (_cd *EndOfStripe )LineNumber ()int {return _cd ._cab };
type HalftoneRegion struct{_defba _ad .StreamReader ;_aeff *Header ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;HDefaultPixel int8 ;CombinationOperator _eb .CombinationOperator ;HSkipEnabled bool ;
HTemplate byte ;IsMMREncoded bool ;HGridWidth uint32 ;HGridHeight uint32 ;HGridX int32 ;HGridY int32 ;HRegionX uint16 ;HRegionY uint16 ;HalftoneRegionBitmap *_eb .Bitmap ;Patterns []*_eb .Bitmap ;};func (_cbga *HalftoneRegion )combineGrayscalePlanes (_eacg []*_eb .Bitmap ,_gffb int )error {_bag :=0;
for _bgc :=0;_bgc < _eacg [_gffb ].Height ;_bgc ++{for _baga :=0;_baga < _eacg [_gffb ].Width ;_baga +=8{_feg ,_bgaf :=_eacg [_gffb +1].GetByte (_bag );if _bgaf !=nil {return _bgaf ;};_eeac ,_bgaf :=_eacg [_gffb ].GetByte (_bag );if _bgaf !=nil {return _bgaf ;
};_bgaf =_eacg [_gffb ].SetByte (_bag ,_eb .CombineBytes (_eeac ,_feg ,_eb .CmbOpXor ));if _bgaf !=nil {return _bgaf ;};_bag ++;};};return nil ;};func (_cfge *SymbolDictionary )huffDecodeRefAggNInst ()(int64 ,error ){if !_cfge .SdHuffAggInstanceSelection {_fff ,_dgca :=_ed .GetStandardTable (1);
if _dgca !=nil {return 0,_dgca ;};return _fff .Decode (_cfge ._ecgb );};if _cfge ._gfeda ==nil {var (_dffb int ;_afbc error ;);if _cfge .SdHuffDecodeHeightSelection ==3{_dffb ++;};if _cfge .SdHuffDecodeWidthSelection ==3{_dffb ++;};if _cfge .SdHuffBMSizeSelection ==3{_dffb ++;
};_cfge ._gfeda ,_afbc =_cfge .getUserTable (_dffb );if _afbc !=nil {return 0,_afbc ;};};return _cfge ._gfeda .Decode (_cfge ._ecgb );};func (_gabd *TextRegion )setParameters (_cfagf *_cg .Decoder ,_gfgb ,_ggcb bool ,_gace ,_dedb uint32 ,_baaa uint32 ,_dcef int8 ,_gbbcc uint32 ,_bfg int8 ,_bbbb _eb .CombinationOperator ,_ebdgg int8 ,_fdfgg int16 ,_fdceb ,_bgaba ,_faec ,_gfac ,_bgbfg ,_bcae ,_fdag ,_cabf ,_afce ,_afgdb int8 ,_gbgdf ,_edbgc []int8 ,_gfgc []*_eb .Bitmap ,_gddcd int8 ){_gabd ._ccde =_cfagf ;
_gabd .IsHuffmanEncoded =_gfgb ;_gabd .UseRefinement =_ggcb ;_gabd .RegionInfo .BitmapWidth =_gace ;_gabd .RegionInfo .BitmapHeight =_dedb ;_gabd .NumberOfSymbolInstances =_baaa ;_gabd .SbStrips =_dcef ;_gabd .NumberOfSymbols =_gbbcc ;_gabd .DefaultPixel =_bfg ;
_gabd .CombinationOperator =_bbbb ;_gabd .IsTransposed =_ebdgg ;_gabd .ReferenceCorner =_fdfgg ;_gabd .SbDsOffset =_fdceb ;_gabd .SbHuffFS =_bgaba ;_gabd .SbHuffDS =_faec ;_gabd .SbHuffDT =_gfac ;_gabd .SbHuffRDWidth =_bgbfg ;_gabd .SbHuffRDHeight =_bcae ;
_gabd .SbHuffRSize =_afce ;_gabd .SbHuffRDX =_fdag ;_gabd .SbHuffRDY =_cabf ;_gabd .SbrTemplate =_afgdb ;_gabd .SbrATX =_gbgdf ;_gabd .SbrATY =_edbgc ;_gabd .Symbols =_gfgc ;_gabd ._afdda =_gddcd ;};func (_gdeg *SymbolDictionary )setRetainedCodingContexts (_begf *SymbolDictionary ){_gdeg ._abef =_begf ._abef ;
_gdeg .IsHuffmanEncoded =_begf .IsHuffmanEncoded ;_gdeg .UseRefinementAggregation =_begf .UseRefinementAggregation ;_gdeg .SdTemplate =_begf .SdTemplate ;_gdeg .SdrTemplate =_begf .SdrTemplate ;_gdeg .SdATX =_begf .SdATX ;_gdeg .SdATY =_begf .SdATY ;_gdeg .SdrATX =_begf .SdrATX ;
_gdeg .SdrATY =_begf .SdrATY ;_gdeg ._cccc =_begf ._cccc ;};func (_babef *Header )referenceSize ()uint {switch {case _babef .SegmentNumber <=255:return 1;case _babef .SegmentNumber <=65535:return 2;default:return 4;};};func (_cegf *PageInformationSegment )readResolution ()error {_bffb ,_gdabc :=_cegf ._fga .ReadBits (32);
if _gdabc !=nil {return _gdabc ;};_cegf .ResolutionX =int (_bffb &_e .MaxInt32 );_bffb ,_gdabc =_cegf ._fga .ReadBits (32);if _gdabc !=nil {return _gdabc ;};_cegf .ResolutionY =int (_bffb &_e .MaxInt32 );return nil ;};func (_cfdbd *TextRegion )encodeSymbols (_dgfa _ad .BinaryWriter )(_efge int ,_baae error ){const _facdb ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
_bfdc :=make ([]byte ,4);_d .BigEndian .PutUint32 (_bfdc ,_cfdbd .NumberOfSymbols );if _efge ,_baae =_dgfa .Write (_bfdc );_baae !=nil {return _efge ,_dd .Wrap (_baae ,_facdb ,"\u004e\u0075\u006dbe\u0072\u004f\u0066\u0053\u0079\u006d\u0062\u006f\u006c\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073");
};_bcfc ,_baae :=_eb .NewClassedPoints (_cfdbd ._ggbd ,_cfdbd ._fggf );if _baae !=nil {return 0,_dd .Wrap (_baae ,_facdb ,"");};var _febd ,_gebe int ;_adbb :=_gc .New ();_adbb .Init ();if _baae =_adbb .EncodeInteger (_gc .IADT ,0);_baae !=nil {return _efge ,_dd .Wrap (_baae ,_facdb ,"\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0044\u0054");
};_cgbb ,_baae :=_bcfc .GroupByY ();if _baae !=nil {return 0,_dd .Wrap (_baae ,_facdb ,"");};for _ ,_fbdc :=range _cgbb {_bcgf :=int (_fbdc .YAtIndex (0));_fbdbe :=_bcgf -_febd ;if _baae =_adbb .EncodeInteger (_gc .IADT ,_fbdbe );_baae !=nil {return _efge ,_dd .Wrap (_baae ,_facdb ,"");
};var _defde int ;for _aafdcg ,_gbfb :=range _fbdc .IntSlice {switch _aafdcg {case 0:_dbgf :=int (_fbdc .XAtIndex (_aafdcg ))-_gebe ;if _baae =_adbb .EncodeInteger (_gc .IAFS ,_dbgf );_baae !=nil {return _efge ,_dd .Wrap (_baae ,_facdb ,"");};_gebe +=_dbgf ;
_defde =_gebe ;default:_efbg :=int (_fbdc .XAtIndex (_aafdcg ))-_defde ;if _baae =_adbb .EncodeInteger (_gc .IADS ,_efbg );_baae !=nil {return _efge ,_dd .Wrap (_baae ,_facdb ,"");};_defde +=_efbg ;};_gdbfg ,_fddef :=_cfdbd ._dfbg .Get (_gbfb );if _fddef !=nil {return _efge ,_dd .Wrap (_fddef ,_facdb ,"");
};_acfc ,_dbad :=_cfdbd ._fcdc [_gdbfg ];if !_dbad {_acfc ,_dbad =_cfdbd ._baca [_gdbfg ];if !_dbad {return _efge ,_dd .Errorf (_facdb ,"\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027\u0025d\u0027\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064 \u0069\u006e\u0020\u0067\u006cob\u0061\u006c\u0020\u0061\u006e\u0064\u0020\u006c\u006f\u0063\u0061\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020\u006d\u0061\u0070",_gdbfg );
};};if _fddef =_adbb .EncodeIAID (_cfdbd ._bafa ,_acfc );_fddef !=nil {return _efge ,_dd .Wrap (_fddef ,_facdb ,"");};};if _baae =_adbb .EncodeOOB (_gc .IADS );_baae !=nil {return _efge ,_dd .Wrap (_baae ,_facdb ,"");};};_adbb .Final ();_ddgg ,_baae :=_adbb .WriteTo (_dgfa );
if _baae !=nil {return _efge ,_dd .Wrap (_baae ,_facdb ,"");};_efge +=int (_ddgg );return _efge ,nil ;};func (_bdab *GenericRegion )GetRegionInfo ()*RegionSegment {return _bdab .RegionSegment };func (_gcd *HalftoneRegion )GetRegionInfo ()*RegionSegment {return _gcd .RegionSegment };
func (_daea *PageInformationSegment )Encode (w _ad .BinaryWriter )(_fgab int ,_faac error ){const _ffcb ="\u0050\u0061g\u0065\u0049\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u002e\u0045\u006eco\u0064\u0065";
_aafba :=make ([]byte ,4);_d .BigEndian .PutUint32 (_aafba ,uint32 (_daea .PageBMWidth ));_fgab ,_faac =w .Write (_aafba );if _faac !=nil {return _fgab ,_dd .Wrap (_faac ,_ffcb ,"\u0077\u0069\u0064t\u0068");};_d .BigEndian .PutUint32 (_aafba ,uint32 (_daea .PageBMHeight ));
var _agf int ;_agf ,_faac =w .Write (_aafba );if _faac !=nil {return _agf +_fgab ,_dd .Wrap (_faac ,_ffcb ,"\u0068\u0065\u0069\u0067\u0068\u0074");};_fgab +=_agf ;_d .BigEndian .PutUint32 (_aafba ,uint32 (_daea .ResolutionX ));_agf ,_faac =w .Write (_aafba );
if _faac !=nil {return _agf +_fgab ,_dd .Wrap (_faac ,_ffcb ,"\u0078\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");};_fgab +=_agf ;_d .BigEndian .PutUint32 (_aafba ,uint32 (_daea .ResolutionY ));if _agf ,_faac =w .Write (_aafba );_faac !=nil {return _agf +_fgab ,_dd .Wrap (_faac ,_ffcb ,"\u0079\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");
};_fgab +=_agf ;if _faac =_daea .encodeFlags (w );_faac !=nil {return _fgab ,_dd .Wrap (_faac ,_ffcb ,"");};_fgab ++;if _agf ,_faac =_daea .encodeStripingInformation (w );_faac !=nil {return _fgab ,_dd .Wrap (_faac ,_ffcb ,"");};_fgab +=_agf ;return _fgab ,nil ;
};var _ templater =&template1 {};func (_gcgb *GenericRegion )getPixel (_faa ,_gba int )int8 {if _faa < 0||_faa >=_gcgb .Bitmap .Width {return 0;};if _gba < 0||_gba >=_gcgb .Bitmap .Height {return 0;};if _gcgb .Bitmap .GetPixel (_faa ,_gba ){return 1;};
return 0;};func (_bbab *SymbolDictionary )GetDictionary ()([]*_eb .Bitmap ,error ){_cb .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c-\u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){_cb .Log .Trace ("\u005b\u0053\u0059M\u0042\u004f\u004c\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
_cb .Log .Trace ("\u005b\u0053Y\u004d\u0042\u004f\u004c\u002dD\u0049\u0043\u0054\u0049\u004fN\u0041\u0052\u0059\u005d\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0020\u000a\u0045\u0078\u003a\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u000a\u006e\u0065\u0077\u003a\u0027\u0025\u0073\u0027",_bbab ._caaea ,_bbab ._gde );
}();if _bbab ._caaea ==nil {var _eecg error ;if _bbab .UseRefinementAggregation {_bbab ._gbbc =_bbab .getSbSymCodeLen ();};if !_bbab .IsHuffmanEncoded {if _eecg =_bbab .setCodingStatistics ();_eecg !=nil {return nil ,_eecg ;};};_bbab ._gde =make ([]*_eb .Bitmap ,_bbab .NumberOfNewSymbols );
var _aca []int ;if _bbab .IsHuffmanEncoded &&!_bbab .UseRefinementAggregation {_aca =make ([]int ,_bbab .NumberOfNewSymbols );};if _eecg =_bbab .setSymbolsArray ();_eecg !=nil {return nil ,_eecg ;};var _gdgf ,_fdde int64 ;_bbab ._cdgb =0;for _bbab ._cdgb < _bbab .NumberOfNewSymbols {_fdde ,_eecg =_bbab .decodeHeightClassDeltaHeight ();
if _eecg !=nil {return nil ,_eecg ;};_gdgf +=_fdde ;var _gfda ,_afef uint32 ;_cbfg :=int64 (_bbab ._cdgb );for {var _caf int64 ;_caf ,_eecg =_bbab .decodeDifferenceWidth ();if _fa .Is (_eecg ,_bg .ErrOOB ){break ;};if _eecg !=nil {return nil ,_eecg ;};
if _bbab ._cdgb >=_bbab .NumberOfNewSymbols {break ;};_gfda +=uint32 (_caf );_afef +=_gfda ;if !_bbab .IsHuffmanEncoded ||_bbab .UseRefinementAggregation {if !_bbab .UseRefinementAggregation {_eecg =_bbab .decodeDirectlyThroughGenericRegion (_gfda ,uint32 (_gdgf ));
if _eecg !=nil {return nil ,_eecg ;};}else {_eecg =_bbab .decodeAggregate (_gfda ,uint32 (_gdgf ));if _eecg !=nil {return nil ,_eecg ;};};}else if _bbab .IsHuffmanEncoded &&!_bbab .UseRefinementAggregation {_aca [_bbab ._cdgb ]=int (_gfda );};_bbab ._cdgb ++;
};if _bbab .IsHuffmanEncoded &&!_bbab .UseRefinementAggregation {var _aeda int64 ;if _bbab .SdHuffBMSizeSelection ==0{var _dgc _ed .Tabler ;_dgc ,_eecg =_ed .GetStandardTable (1);if _eecg !=nil {return nil ,_eecg ;};_aeda ,_eecg =_dgc .Decode (_bbab ._ecgb );
if _eecg !=nil {return nil ,_eecg ;};}else {_aeda ,_eecg =_bbab .huffDecodeBmSize ();if _eecg !=nil {return nil ,_eecg ;};};_bbab ._ecgb .Align ();var _fdgf *_eb .Bitmap ;_fdgf ,_eecg =_bbab .decodeHeightClassCollectiveBitmap (_aeda ,uint32 (_gdgf ),_afef );
if _eecg !=nil {return nil ,_eecg ;};_eecg =_bbab .decodeHeightClassBitmap (_fdgf ,_cbfg ,int (_gdgf ),_aca );if _eecg !=nil {return nil ,_eecg ;};};};_beege ,_eecg :=_bbab .getToExportFlags ();if _eecg !=nil {return nil ,_eecg ;};_bbab .setExportedSymbols (_beege );
};return _bbab ._caaea ,nil ;};func (_accgb *HalftoneRegion )computeGrayScalePlanes (_bfeb []*_eb .Bitmap ,_fcgg int )([][]int ,error ){_dadd :=make ([][]int ,_accgb .HGridHeight );for _acd :=0;_acd < len (_dadd );_acd ++{_dadd [_acd ]=make ([]int ,_accgb .HGridWidth );
};for _ded :=0;_ded < int (_accgb .HGridHeight );_ded ++{for _ebca :=0;_ebca < int (_accgb .HGridWidth );_ebca +=8{var _fcee int ;if _gdcb :=int (_accgb .HGridWidth )-_ebca ;_gdcb > 8{_fcee =8;}else {_fcee =_gdcb ;};_aebg :=_bfeb [0].GetByteIndex (_ebca ,_ded );
for _cdfg :=0;_cdfg < _fcee ;_cdfg ++{_agcg :=_cdfg +_ebca ;_dadd [_ded ][_agcg ]=0;for _gacb :=0;_gacb < _fcgg ;_gacb ++{_dgg ,_cbca :=_bfeb [_gacb ].GetByte (_aebg );if _cbca !=nil {return nil ,_cbca ;};_daeb :=_dgg >>uint (7-_agcg &7);_cdcg :=_daeb &1;
_dbc :=1<<uint (_gacb );_cccd :=int (_cdcg )*_dbc ;_dadd [_ded ][_agcg ]+=_cccd ;};};};};return _dadd ,nil ;};func (_agfa *SymbolDictionary )decodeHeightClassDeltaHeight ()(int64 ,error ){if _agfa .IsHuffmanEncoded {return _agfa .decodeHeightClassDeltaHeightWithHuffman ();
};_dafb ,_beab :=_agfa ._abef .DecodeInt (_agfa ._ffeb );if _beab !=nil {return 0,_beab ;};return int64 (_dafb ),nil ;};func (_cfcbe *PageInformationSegment )readCombinationOperator ()error {_edca ,_bbcf :=_cfcbe ._fga .ReadBits (2);if _bbcf !=nil {return _bbcf ;
};_cfcbe ._ddb =_eb .CombinationOperator (int (_edca ));return nil ;};func (_cbabc *TextRegion )decodeRdw ()(int64 ,error ){const _ffbed ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064w";if _cbabc .IsHuffmanEncoded {if _cbabc .SbHuffRDWidth ==3{if _cbabc ._dfbc ==nil {var (_gebc int ;
_fdf error ;);if _cbabc .SbHuffFS ==3{_gebc ++;};if _cbabc .SbHuffDS ==3{_gebc ++;};if _cbabc .SbHuffDT ==3{_gebc ++;};_cbabc ._dfbc ,_fdf =_cbabc .getUserTable (_gebc );if _fdf !=nil {return 0,_dd .Wrap (_fdf ,_ffbed ,"");};};return _cbabc ._dfbc .Decode (_cbabc ._gbdb );
};_abag ,_deacc :=_ed .GetStandardTable (14+int (_cbabc .SbHuffRDWidth ));if _deacc !=nil {return 0,_dd .Wrap (_deacc ,_ffbed ,"");};return _abag .Decode (_cbabc ._gbdb );};_bbg ,_bdgbe :=_cbabc ._ccde .DecodeInt (_cbabc ._afgf );if _bdgbe !=nil {return 0,_dd .Wrap (_bdgbe ,_ffbed ,"");
};return int64 (_bbg ),nil ;};func (_becf *Header )readNumberOfReferredToSegments (_agbe _ad .StreamReader )(uint64 ,error ){const _gaf ="\u0072\u0065\u0061\u0064\u004e\u0075\u006d\u0062\u0065\u0072O\u0066\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
_agd ,_eagb :=_agbe .ReadBits (3);if _eagb !=nil {return 0,_dd .Wrap (_eagb ,_gaf ,"\u0063\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0072\u0074\u0073");};_agd &=0xf;var _debb []byte ;if _agd <=4{_debb =make ([]byte ,5);for _afa :=0;_afa <=4;_afa ++{_dfb ,_cgge :=_agbe .ReadBit ();
if _cgge !=nil {return 0,_dd .Wrap (_cgge ,_gaf ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_debb [_afa ]=byte (_dfb );};}else {_agd ,_eagb =_agbe .ReadBits (29);if _eagb !=nil {return 0,_eagb ;};_agd &=_e .MaxInt32 ;_dffa :=(_agd +8)>>3;
_dffa <<=3;_debb =make ([]byte ,_dffa );var _ccaf uint64 ;for _ccaf =0;_ccaf < _dffa ;_ccaf ++{_eeb ,_dfcg :=_agbe .ReadBit ();if _dfcg !=nil {return 0,_dd .Wrap (_dfcg ,_gaf ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_debb [_ccaf ]=byte (_eeb );
};};return _agd ,nil ;};func (_cbab *GenericRegion )Encode (w _ad .BinaryWriter )(_cee int ,_adb error ){const _gbg ="G\u0065n\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069o\u006e\u002e\u0045\u006eco\u0064\u0065";if _cbab .Bitmap ==nil {return 0,_dd .Error (_gbg ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");
};_cebf ,_adb :=_cbab .RegionSegment .Encode (w );if _adb !=nil {return 0,_dd .Wrap (_adb ,_gbg ,"\u0052\u0065\u0067\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_cee +=_cebf ;if _adb =w .SkipBits (4);_adb !=nil {return _cee ,_dd .Wrap (_adb ,_gbg ,"\u0073k\u0069p\u0020\u0072\u0065\u0073\u0065r\u0076\u0065d\u0020\u0062\u0069\u0074\u0073");
};var _ffg int ;if _cbab .IsTPGDon {_ffg =1;};if _adb =w .WriteBit (_ffg );_adb !=nil {return _cee ,_dd .Wrap (_adb ,_gbg ,"\u0074\u0070\u0067\u0064\u006f\u006e");};_ffg =0;if _adb =w .WriteBit (int (_cbab .GBTemplate >>1)&0x01);_adb !=nil {return _cee ,_dd .Wrap (_adb ,_gbg ,"f\u0069r\u0073\u0074\u0020\u0067\u0062\u0074\u0065\u006dp\u006c\u0061\u0074\u0065 b\u0069\u0074");
};if _adb =w .WriteBit (int (_cbab .GBTemplate )&0x01);_adb !=nil {return _cee ,_dd .Wrap (_adb ,_gbg ,"s\u0065\u0063\u006f\u006ed \u0067b\u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u0062\u0069\u0074");};if _cbab .UseMMR {_ffg =1;};if _adb =w .WriteBit (_ffg );
_adb !=nil {return _cee ,_dd .Wrap (_adb ,_gbg ,"u\u0073\u0065\u0020\u004d\u004d\u0052\u0020\u0062\u0069\u0074");};_cee ++;if _cebf ,_adb =_cbab .writeGBAtPixels (w );_adb !=nil {return _cee ,_dd .Wrap (_adb ,_gbg ,"");};_cee +=_cebf ;_abad :=_gc .New ();
if _adb =_abad .EncodeBitmap (_cbab .Bitmap ,_cbab .IsTPGDon );_adb !=nil {return _cee ,_dd .Wrap (_adb ,_gbg ,"");};_abad .Final ();var _ebd int64 ;if _ebd ,_adb =_abad .WriteTo (w );_adb !=nil {return _cee ,_dd .Wrap (_adb ,_gbg ,"");};_cee +=int (_ebd );
return _cee ,nil ;};func (_gcge *SymbolDictionary )setCodingStatistics ()error {if _gcge ._efec ==nil {_gcge ._efec =_cg .NewStats (512,1);};if _gcge ._ffeb ==nil {_gcge ._ffeb =_cg .NewStats (512,1);};if _gcge ._dbfb ==nil {_gcge ._dbfb =_cg .NewStats (512,1);
};if _gcge ._deefa ==nil {_gcge ._deefa =_cg .NewStats (512,1);};if _gcge ._ebfe ==nil {_gcge ._ebfe =_cg .NewStats (512,1);};if _gcge .UseRefinementAggregation &&_gcge ._gfbe ==nil {_gcge ._gfbe =_cg .NewStats (1<<uint (_gcge ._gbbc ),1);_gcge ._gccb =_cg .NewStats (512,1);
_gcge ._edee =_cg .NewStats (512,1);};if _gcge ._cccc ==nil {_gcge ._cccc =_cg .NewStats (65536,1);};if _gcge ._abef ==nil {var _abab error ;_gcge ._abef ,_abab =_cg .New (_gcge ._ecgb );if _abab !=nil {return _abab ;};};return nil ;};func (_begg *RegionSegment )parseHeader ()error {const _dfga ="p\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072";
_cb .Log .Trace ("\u005b\u0052\u0045\u0047I\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002dH\u0045A\u0044\u0045\u0052\u005d\u0020\u0042\u0065g\u0069\u006e");defer func (){_cb .Log .Trace ("\u005b\u0052\u0045G\u0049\u004f\u004e\u005d[\u0050\u0041\u0052\u0053\u0045\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_ecaf ,_gbgc :=_begg ._aaaf .ReadBits (32);if _gbgc !=nil {return _dd .Wrap (_gbgc ,_dfga ,"\u0077\u0069\u0064t\u0068");};_begg .BitmapWidth =uint32 (_ecaf &_e .MaxUint32 );_ecaf ,_gbgc =_begg ._aaaf .ReadBits (32);if _gbgc !=nil {return _dd .Wrap (_gbgc ,_dfga ,"\u0068\u0065\u0069\u0067\u0068\u0074");
};_begg .BitmapHeight =uint32 (_ecaf &_e .MaxUint32 );_ecaf ,_gbgc =_begg ._aaaf .ReadBits (32);if _gbgc !=nil {return _dd .Wrap (_gbgc ,_dfga ,"\u0078\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_begg .XLocation =uint32 (_ecaf &_e .MaxUint32 );
_ecaf ,_gbgc =_begg ._aaaf .ReadBits (32);if _gbgc !=nil {return _dd .Wrap (_gbgc ,_dfga ,"\u0079\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_begg .YLocation =uint32 (_ecaf &_e .MaxUint32 );if _ ,_gbgc =_begg ._aaaf .ReadBits (5);_gbgc !=nil {return _dd .Wrap (_gbgc ,_dfga ,"\u0064i\u0072\u0079\u0020\u0072\u0065\u0061d");
};if _gbgc =_begg .readCombinationOperator ();_gbgc !=nil {return _dd .Wrap (_gbgc ,_dfga ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};return nil ;};func (_aaag *SymbolDictionary )decodeHeightClassBitmap (_ceaac *_eb .Bitmap ,_defea int64 ,_bffa int ,_gbfdf []int )error {for _fegd :=_defea ;
_fegd < int64 (_aaag ._cdgb );_fegd ++{var _fdgb int ;for _cbdf :=_defea ;_cbdf <=_fegd -1;_cbdf ++{_fdgb +=_gbfdf [_cbdf ];};_dabf :=_b .Rect (_fdgb ,0,_fdgb +_gbfdf [_fegd ],_bffa );_fbdf ,_dagce :=_eb .Extract (_dabf ,_ceaac );if _dagce !=nil {return _dagce ;
};_aaag ._gde [_fegd ]=_fbdf ;_aaag ._afdb =append (_aaag ._afdb ,_fbdf );};return nil ;};func (_gbgg *SymbolDictionary )parseHeader ()(_bffaf error ){_cb .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _bffaf !=nil {_cb .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u0020\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u005b\u0050\u0041\u0052SE\u002d\u0048\u0045A\u0044\u0045R\u005d\u0020\u0066\u0061\u0069\u006ce\u0064\u002e \u0025\u0076",_bffaf );
}else {_cb .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _bffaf =_gbgg .readRegionFlags ();_bffaf !=nil {return _bffaf ;};if _bffaf =_gbgg .setAtPixels ();_bffaf !=nil {return _bffaf ;};if _bffaf =_gbgg .setRefinementAtPixels ();_bffaf !=nil {return _bffaf ;};if _bffaf =_gbgg .readNumberOfExportedSymbols ();
_bffaf !=nil {return _bffaf ;};if _bffaf =_gbgg .readNumberOfNewSymbols ();_bffaf !=nil {return _bffaf ;};if _bffaf =_gbgg .setInSyms ();_bffaf !=nil {return _bffaf ;};if _gbgg ._faaa {_afbd :=_gbgg .Header .RTSegments ;for _gdfg :=len (_afbd )-1;_gdfg >=0;
_gdfg --{if _afbd [_gdfg ].Type ==0{_fegb ,_efgb :=_afbd [_gdfg ].SegmentData .(*SymbolDictionary );if !_efgb {_bffaf =_ff .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074:\u0020\u0025\u0076\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020S\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006fna\u0072\u0079\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_afbd [_gdfg ]);
return _bffaf ;};if _fegb ._faaa {_gbgg .setRetainedCodingContexts (_fegb );};break ;};};};if _bffaf =_gbgg .checkInput ();_bffaf !=nil {return _bffaf ;};return nil ;};type EndOfStripe struct{_cc _ad .StreamReader ;_cab int ;};func (_cffgc *TextRegion )setContexts (_fgce *_cg .DecoderStats ,_dbff *_cg .DecoderStats ,_baagd *_cg .DecoderStats ,_ddde *_cg .DecoderStats ,_beedc *_cg .DecoderStats ,_agca *_cg .DecoderStats ,_bfafc *_cg .DecoderStats ,_edaf *_cg .DecoderStats ,_age *_cg .DecoderStats ,_ddae *_cg .DecoderStats ){_cffgc ._aeba =_dbff ;
_cffgc ._afag =_baagd ;_cffgc ._cdfcb =_ddde ;_cffgc ._cbcd =_beedc ;_cffgc ._afgf =_bfafc ;_cffgc ._ddcf =_edaf ;_cffgc ._dbed =_agca ;_cffgc ._bgaa =_age ;_cffgc ._cdbd =_ddae ;_cffgc ._aagcc =_fgce ;};func (_dcdb *GenericRegion )InitEncode (bm *_eb .Bitmap ,xLoc ,yLoc ,template int ,duplicateLineRemoval bool )error {const _fbdb ="\u0047e\u006e\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069\u006f\u006e.\u0049\u006e\u0069\u0074\u0045\u006e\u0063\u006f\u0064\u0065";
if bm ==nil {return _dd .Error (_fbdb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if xLoc < 0||yLoc < 0{return _dd .Error (_fbdb ,"\u0078\u0020\u0061\u006e\u0064\u0020\u0079\u0020\u006c\u006f\u0063\u0061\u0074i\u006f\u006e\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074h\u0061\u006e\u0020\u0030");
};_dcdb .Bitmap =bm ;_dcdb .GBTemplate =byte (template );switch _dcdb .GBTemplate {case 0:_dcdb .GBAtX =[]int8 {3,-3,2,-2};_dcdb .GBAtY =[]int8 {-1,-1,-2,-2};case 1:_dcdb .GBAtX =[]int8 {3};_dcdb .GBAtY =[]int8 {-1};case 2,3:_dcdb .GBAtX =[]int8 {2};_dcdb .GBAtY =[]int8 {-1};
default:return _dd .Errorf (_fbdb ,"\u0070\u0072o\u0076\u0069\u0064\u0065\u0064 \u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u002c\u0032\u002c\u0033\u007d",template );
};_dcdb .RegionSegment =&RegionSegment {BitmapHeight :uint32 (bm .Height ),BitmapWidth :uint32 (bm .Width ),XLocation :uint32 (xLoc ),YLocation :uint32 (yLoc )};_dcdb .IsTPGDon =duplicateLineRemoval ;return nil ;};func (_cbc *GenericRefinementRegion )decodeSLTP ()(int ,error ){_cbc .Template .setIndex (_cbc ._ada );
return _cbc ._ecd .DecodeBit (_cbc ._ada );};func (_fae *GenericRefinementRegion )decodeTemplate (_ccg ,_aba ,_fbc ,_aaff ,_fba ,_bb ,_dge ,_dfc ,_cfg ,_cfac int ,_fcc templater )(_dgec error ){var (_afg ,_fbg ,_daa ,_fda ,_dbf int16 ;_bea ,_cfgb ,_feaa ,_fdc int ;
_baa byte ;);if _cfg >=1&&(_cfg -1)< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac -_aaff );if _dgec !=nil {return ;};_bea =int (_baa );};if _cfg >=0&&(_cfg )< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac );
if _dgec !=nil {return ;};_cfgb =int (_baa );};if _cfg >=-1&&(_cfg +1)< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac +_aaff );if _dgec !=nil {return ;};_feaa =int (_baa );};_cfac ++;if _ccg >=1{_baa ,_dgec =_fae .RegionBitmap .GetByte (_dfc -_fbc );
if _dgec !=nil {return ;};_fdc =int (_baa );};_dfc ++;_eaa :=_fae .ReferenceDX %8;_ecdf :=6+_eaa ;_dad :=_cfac %_aaff ;if _ecdf >=0{if _ecdf < 8{_afg =int16 (_bea >>uint (_ecdf ))&0x07;};if _ecdf < 8{_fbg =int16 (_cfgb >>uint (_ecdf ))&0x07;};if _ecdf < 8{_daa =int16 (_feaa >>uint (_ecdf ))&0x07;
};if _ecdf ==6&&_dad > 1{if _cfg >=1&&(_cfg -1)< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac -_aaff -2);if _dgec !=nil {return _dgec ;};_afg |=int16 (_baa <<2)&0x04;};if _cfg >=0&&_cfg < _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac -2);
if _dgec !=nil {return _dgec ;};_fbg |=int16 (_baa <<2)&0x04;};if _cfg >=-1&&_cfg +1< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac +_aaff -2);if _dgec !=nil {return _dgec ;};_daa |=int16 (_baa <<2)&0x04;};};if _ecdf ==0{_bea =0;
_cfgb =0;_feaa =0;if _dad < _aaff -1{if _cfg >=1&&_cfg -1< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac -_aaff );if _dgec !=nil {return _dgec ;};_bea =int (_baa );};if _cfg >=0&&_cfg < _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac );
if _dgec !=nil {return _dgec ;};_cfgb =int (_baa );};if _cfg >=-1&&_cfg +1< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac +_aaff );if _dgec !=nil {return _dgec ;};_feaa =int (_baa );};};_cfac ++;};}else {_afg =int16 (_bea <<1)&0x07;
_fbg =int16 (_cfgb <<1)&0x07;_daa =int16 (_feaa <<1)&0x07;_bea =0;_cfgb =0;_feaa =0;if _dad < _aaff -1{if _cfg >=1&&_cfg -1< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac -_aaff );if _dgec !=nil {return _dgec ;};_bea =int (_baa );
};if _cfg >=0&&_cfg < _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac );if _dgec !=nil {return _dgec ;};_cfgb =int (_baa );};if _cfg >=-1&&_cfg +1< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac +_aaff );
if _dgec !=nil {return _dgec ;};_feaa =int (_baa );};_cfac ++;};_afg |=int16 ((_bea >>7)&0x07);_fbg |=int16 ((_cfgb >>7)&0x07);_daa |=int16 ((_feaa >>7)&0x07);};_fda =int16 (_fdc >>6);_dbf =0;_fcf :=(2-_eaa )%8;_bea <<=uint (_fcf );_cfgb <<=uint (_fcf );
_feaa <<=uint (_fcf );_fdc <<=2;var _ee int ;for _fgb :=0;_fgb < _aba ;_fgb ++{_gcf :=_fgb &0x07;_bfcg :=_fcc .form (_afg ,_fbg ,_daa ,_fda ,_dbf );if _fae ._def {_baa ,_dgec =_fae .RegionBitmap .GetByte (_fae .RegionBitmap .GetByteIndex (_fgb ,_ccg ));
if _dgec !=nil {return _dgec ;};_fae ._ada .SetIndex (int32 (_fae .overrideAtTemplate0 (int (_bfcg ),_fgb ,_ccg ,int (_baa ),_gcf )));}else {_fae ._ada .SetIndex (int32 (_bfcg ));};_ee ,_dgec =_fae ._ecd .DecodeBit (_fae ._ada );if _dgec !=nil {return _dgec ;
};if _dgec =_fae .RegionBitmap .SetPixel (_fgb ,_ccg ,byte (_ee ));_dgec !=nil {return _dgec ;};_afg =((_afg <<1)|0x01&int16 (_bea >>7))&0x07;_fbg =((_fbg <<1)|0x01&int16 (_cfgb >>7))&0x07;_daa =((_daa <<1)|0x01&int16 (_feaa >>7))&0x07;_fda =((_fda <<1)|0x01&int16 (_fdc >>7))&0x07;
_dbf =int16 (_ee );if (_fgb -int (_fae .ReferenceDX ))%8==5{_bea =0;_cfgb =0;_feaa =0;if ((_fgb -int (_fae .ReferenceDX ))/8)+1< _fae .ReferenceBitmap .RowStride {if _cfg >=1&&(_cfg -1)< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac -_aaff );
if _dgec !=nil {return _dgec ;};_bea =int (_baa );};if _cfg >=0&&_cfg < _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac );if _dgec !=nil {return _dgec ;};_cfgb =int (_baa );};if _cfg >=-1&&(_cfg +1)< _fae .ReferenceBitmap .Height {_baa ,_dgec =_fae .ReferenceBitmap .GetByte (_cfac +_aaff );
if _dgec !=nil {return _dgec ;};_feaa =int (_baa );};};_cfac ++;}else {_bea <<=1;_cfgb <<=1;_feaa <<=1;};if _gcf ==5&&_ccg >=1{if ((_fgb >>3)+1)>=_fae .RegionBitmap .RowStride {_fdc =0;}else {_baa ,_dgec =_fae .RegionBitmap .GetByte (_dfc -_fbc );if _dgec !=nil {return _dgec ;
};_fdc =int (_baa );};_dfc ++;}else {_fdc <<=1;};};return nil ;};func (_afdg *Header )readSegmentNumber (_ffdd _ad .StreamReader )error {const _cgddd ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";_ggge :=make ([]byte ,4);
_ ,_fbce :=_ffdd .Read (_ggge );if _fbce !=nil {return _dd .Wrap (_fbce ,_cgddd ,"");};_afdg .SegmentNumber =_d .BigEndian .Uint32 (_ggge );return nil ;};func (_cbbd *Header )writeReferredToSegments (_aafb _ad .BinaryWriter )(_bdada int ,_feac error ){const _bgg ="\u0077\u0072\u0069te\u0052\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
var (_eda uint16 ;_aaa uint32 ;);_gfed :=_cbbd .referenceSize ();_agcgg :=1;_agdc :=make ([]byte ,_gfed );for _ ,_egbd :=range _cbbd .RTSNumbers {switch _gfed {case 4:_aaa =uint32 (_egbd );_d .BigEndian .PutUint32 (_agdc ,_aaa );_agcgg ,_feac =_aafb .Write (_agdc );
if _feac !=nil {return 0,_dd .Wrap (_feac ,_bgg ,"u\u0069\u006e\u0074\u0033\u0032\u0020\u0073\u0069\u007a\u0065");};case 2:_eda =uint16 (_egbd );_d .BigEndian .PutUint16 (_agdc ,_eda );_agcgg ,_feac =_aafb .Write (_agdc );if _feac !=nil {return 0,_dd .Wrap (_feac ,_bgg ,"\u0075\u0069\u006e\u0074\u0031\u0036");
};default:if _feac =_aafb .WriteByte (byte (_egbd ));_feac !=nil {return 0,_dd .Wrap (_feac ,_bgg ,"\u0075\u0069\u006et\u0038");};};_bdada +=_agcgg ;};return _bdada ,nil ;};func (_dbg *PageInformationSegment )readMaxStripeSize ()error {_cbd ,_bbe :=_dbg ._fga .ReadBits (15);
if _bbe !=nil {return _bbe ;};_dbg .MaxStripeSize =uint16 (_cbd &_e .MaxUint16 );return nil ;};func (_aaffb *GenericRegion )setOverrideFlag (_eag int ){_aaffb .GBAtOverride [_eag ]=true ;_aaffb ._edcf =true ;};var (_gcea Segmenter ;_ece =map[Type ]func ()Segmenter {TSymbolDictionary :func ()Segmenter {return &SymbolDictionary {}},TIntermediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateLosslessTextRegion :func ()Segmenter {return &TextRegion {}},TPatternDictionary :func ()Segmenter {return &PatternDictionary {}},TIntermediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateLosslessHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TIntermediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateLosslessGenericRegion :func ()Segmenter {return &GenericRegion {}},TIntermediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateLosslessGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TPageInformation :func ()Segmenter {return &PageInformationSegment {}},TEndOfPage :func ()Segmenter {return _gcea },TEndOfStrip :func ()Segmenter {return &EndOfStripe {}},TEndOfFile :func ()Segmenter {return _gcea },TProfiles :func ()Segmenter {return _gcea },TTables :func ()Segmenter {return &TableSegment {}},TExtension :func ()Segmenter {return _gcea },TBitmap :func ()Segmenter {return _gcea }};
);func (_gfa *HalftoneRegion )GetRegionBitmap ()(*_eb .Bitmap ,error ){if _gfa .HalftoneRegionBitmap !=nil {return _gfa .HalftoneRegionBitmap ,nil ;};var _ccee error ;_gfa .HalftoneRegionBitmap =_eb .New (int (_gfa .RegionSegment .BitmapWidth ),int (_gfa .RegionSegment .BitmapHeight ));
if _gfa .Patterns ==nil ||len (_gfa .Patterns )==0{_gfa .Patterns ,_ccee =_gfa .GetPatterns ();if _ccee !=nil {return nil ,_ccee ;};};if _gfa .HDefaultPixel ==1{_gfa .HalftoneRegionBitmap .SetDefaultPixel ();};_bfe :=_e .Ceil (_e .Log (float64 (len (_gfa .Patterns )))/_e .Log (2));
_dfdgg :=int (_bfe );var _aad [][]int ;_aad ,_ccee =_gfa .grayScaleDecoding (_dfdgg );if _ccee !=nil {return nil ,_ccee ;};if _ccee =_gfa .renderPattern (_aad );_ccee !=nil {return nil ,_ccee ;};return _gfa .HalftoneRegionBitmap ,nil ;};func (_gbb *GenericRegion )String ()string {_bgf :=&_f .Builder {};
_bgf .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_bgf .WriteString (_gbb .RegionSegment .String ()+"\u000a");_bgf .WriteString (_ff .Sprintf ("\u0009\u002d\u0020Us\u0065\u0045\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_gbb .UseExtTemplates ));
_bgf .WriteString (_ff .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0044\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_gbb .IsTPGDon ));_bgf .WriteString (_ff .Sprintf ("\u0009-\u0020G\u0042\u0054\u0065\u006d\u0070l\u0061\u0074e\u003a\u0020\u0025\u0064\u000a",_gbb .GBTemplate ));
_bgf .WriteString (_ff .Sprintf ("\t\u002d \u0049\u0073\u004d\u004d\u0052\u0045\u006e\u0063o\u0064\u0065\u0064\u003a %\u0076\u000a",_gbb .IsMMREncoded ));_bgf .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_gbb .GBAtX ));
_bgf .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_gbb .GBAtY ));_bgf .WriteString (_ff .Sprintf ("\t\u002d \u0047\u0042\u0041\u0074\u004f\u0076\u0065\u0072r\u0069\u0064\u0065\u003a %\u0076\u000a",_gbb .GBAtOverride ));
return _bgf .String ();};func (_fbdg *TextRegion )decodeID ()(int64 ,error ){if _fbdg .IsHuffmanEncoded {if _fbdg ._acgd ==nil {_ddda ,_gefe :=_fbdg ._gbdb .ReadBits (byte (_fbdg ._afdda ));return int64 (_ddda ),_gefe ;};return _fbdg ._acgd .Decode (_fbdg ._gbdb );
};return _fbdg ._ccde .DecodeIAID (uint64 (_fbdg ._afdda ),_fbdg ._dbed );};const (TSymbolDictionary Type =0;TIntermediateTextRegion Type =4;TImmediateTextRegion Type =6;TImmediateLosslessTextRegion Type =7;TPatternDictionary Type =16;TIntermediateHalftoneRegion Type =20;
TImmediateHalftoneRegion Type =22;TImmediateLosslessHalftoneRegion Type =23;TIntermediateGenericRegion Type =36;TImmediateGenericRegion Type =38;TImmediateLosslessGenericRegion Type =39;TIntermediateGenericRefinementRegion Type =40;TImmediateGenericRefinementRegion Type =42;
TImmediateLosslessGenericRefinementRegion Type =43;TPageInformation Type =48;TEndOfPage Type =49;TEndOfStrip Type =50;TEndOfFile Type =51;TProfiles Type =52;TTables Type =53;TExtension Type =62;TBitmap Type =70;);func (_bgba *GenericRegion )decodeTemplate0b (_gfd ,_bae ,_bdbb int ,_ecac ,_gfcf int )(_cbfd error ){const _egag ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0062";
var (_ddec ,_ddagb int ;_ecace ,_gbf int ;_ebc byte ;_bccf int ;);if _gfd >=1{_ebc ,_cbfd =_bgba .Bitmap .GetByte (_gfcf );if _cbfd !=nil {return _dd .Wrap (_cbfd ,_egag ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_ecace =int (_ebc );};if _gfd >=2{_ebc ,_cbfd =_bgba .Bitmap .GetByte (_gfcf -_bgba .Bitmap .RowStride );
if _cbfd !=nil {return _dd .Wrap (_cbfd ,_egag ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_gbf =int (_ebc )<<6;};_ddec =(_ecace &0xf0)|(_gbf &0x3800);for _bdaa :=0;_bdaa < _bdbb ;_bdaa =_bccf {var (_cgac byte ;_dafd int ;);_bccf =_bdaa +8;if _efg :=_bae -_bdaa ;
_efg > 8{_dafd =8;}else {_dafd =_efg ;};if _gfd > 0{_ecace <<=8;if _bccf < _bae {_ebc ,_cbfd =_bgba .Bitmap .GetByte (_gfcf +1);if _cbfd !=nil {return _dd .Wrap (_cbfd ,_egag ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_ecace |=int (_ebc );};
};if _gfd > 1{_gbf <<=8;if _bccf < _bae {_ebc ,_cbfd =_bgba .Bitmap .GetByte (_gfcf -_bgba .Bitmap .RowStride +1);if _cbfd !=nil {return _dd .Wrap (_cbfd ,_egag ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_gbf |=int (_ebc )<<6;};};for _ebe :=0;
_ebe < _dafd ;_ebe ++{_becd :=uint (7-_ebe );if _bgba ._edcf {_ddagb =_bgba .overrideAtTemplate0b (_ddec ,_bdaa +_ebe ,_gfd ,int (_cgac ),_ebe ,int (_becd ));_bgba ._cedf .SetIndex (int32 (_ddagb ));}else {_bgba ._cedf .SetIndex (int32 (_ddec ));};var _effa int ;
_effa ,_cbfd =_bgba ._afcg .DecodeBit (_bgba ._cedf );if _cbfd !=nil {return _dd .Wrap (_cbfd ,_egag ,"");};_cgac |=byte (_effa <<_becd );_ddec =((_ddec &0x7bf7)<<1)|_effa |((_ecace >>_becd )&0x10)|((_gbf >>_becd )&0x800);};if _dade :=_bgba .Bitmap .SetByte (_ecac ,_cgac );
_dade !=nil {return _dd .Wrap (_dade ,_egag ,"");};_ecac ++;_gfcf ++;};return nil ;};func (_cgg *GenericRefinementRegion )decodeOptimized (_af ,_ebg ,_bcc ,_baf ,_bfb ,_afd ,_bd int )error {var (_egb error ;_fe int ;_ega int ;);_ac :=_af -int (_cgg .ReferenceDY );
if _dgd :=int (-_cgg .ReferenceDX );_dgd > 0{_fe =_dgd ;};_fed :=_cgg .ReferenceBitmap .GetByteIndex (_fe ,_ac );if _cgg .ReferenceDX > 0{_ega =int (_cgg .ReferenceDX );};_cdf :=_cgg .RegionBitmap .GetByteIndex (_ega ,_af );switch _cgg .TemplateID {case 0:_egb =_cgg .decodeTemplate (_af ,_ebg ,_bcc ,_baf ,_bfb ,_afd ,_bd ,_cdf ,_ac ,_fed ,_cgg ._fd );
case 1:_egb =_cgg .decodeTemplate (_af ,_ebg ,_bcc ,_baf ,_bfb ,_afd ,_bd ,_cdf ,_ac ,_fed ,_cgg ._ga );};return _egb ;};func (_gbfe *SymbolDictionary )setRefinementAtPixels ()error {if !_gbfe .UseRefinementAggregation ||_gbfe .SdrTemplate !=0{return nil ;
};if _cdccg :=_gbfe .readRefinementAtPixels (2);_cdccg !=nil {return _cdccg ;};return nil ;};func (_ffb *GenericRefinementRegion )decodeTypicalPredictedLineTemplate1 (_aaf ,_ceb ,_efc ,_efaa ,_fc ,_cag ,_bab ,_eca ,_bda int )(_bgd error ){var (_bce ,_bdb int ;
_fca ,_cadb int ;_daf ,_ffd int ;_cacc byte ;);if _aaf > 0{_cacc ,_bgd =_ffb .RegionBitmap .GetByte (_bab -_efc );if _bgd !=nil {return ;};_fca =int (_cacc );};if _eca > 0&&_eca <=_ffb .ReferenceBitmap .Height {_cacc ,_bgd =_ffb .ReferenceBitmap .GetByte (_bda -_efaa +_cag );
if _bgd !=nil {return ;};_cadb =int (_cacc )<<2;};if _eca >=0&&_eca < _ffb .ReferenceBitmap .Height {_cacc ,_bgd =_ffb .ReferenceBitmap .GetByte (_bda +_cag );if _bgd !=nil {return ;};_daf =int (_cacc );};if _eca > -2&&_eca < _ffb .ReferenceBitmap .Height -1{_cacc ,_bgd =_ffb .ReferenceBitmap .GetByte (_bda +_efaa +_cag );
if _bgd !=nil {return ;};_ffd =int (_cacc );};_bce =((_fca >>5)&0x6)|((_ffd >>2)&0x30)|(_daf &0xc0)|(_cadb &0x200);_bdb =((_ffd >>2)&0x70)|(_daf &0xc0)|(_cadb &0x700);var _bed int ;for _cfc :=0;_cfc < _fc ;_cfc =_bed {var (_aef int ;_ecg int ;);_bed =_cfc +8;
if _aef =_ceb -_cfc ;_aef > 8{_aef =8;};_gcg :=_bed < _ceb ;_aeg :=_bed < _ffb .ReferenceBitmap .Width ;_bfc :=_cag +1;if _aaf > 0{_cacc =0;if _gcg {_cacc ,_bgd =_ffb .RegionBitmap .GetByte (_bab -_efc +1);if _bgd !=nil {return ;};};_fca =(_fca <<8)|int (_cacc );
};if _eca > 0&&_eca <=_ffb .ReferenceBitmap .Height {var _fb int ;if _aeg {_cacc ,_bgd =_ffb .ReferenceBitmap .GetByte (_bda -_efaa +_bfc );if _bgd !=nil {return ;};_fb =int (_cacc )<<2;};_cadb =(_cadb <<8)|_fb ;};if _eca >=0&&_eca < _ffb .ReferenceBitmap .Height {_cacc =0;
if _aeg {_cacc ,_bgd =_ffb .ReferenceBitmap .GetByte (_bda +_bfc );if _bgd !=nil {return ;};};_daf =(_daf <<8)|int (_cacc );};if _eca > -2&&_eca < (_ffb .ReferenceBitmap .Height -1){_cacc =0;if _aeg {_cacc ,_bgd =_ffb .ReferenceBitmap .GetByte (_bda +_efaa +_bfc );
if _bgd !=nil {return ;};};_ffd =(_ffd <<8)|int (_cacc );};for _ccf :=0;_ccf < _aef ;_ccf ++{var _cabb int ;_bcdc :=(_bdb >>4)&0x1ff;switch _bcdc {case 0x1ff:_cabb =1;case 0x00:_cabb =0;default:_ffb ._ada .SetIndex (int32 (_bce ));_cabb ,_bgd =_ffb ._ecd .DecodeBit (_ffb ._ada );
if _bgd !=nil {return ;};};_egaf :=uint (7-_ccf );_ecg |=_cabb <<_egaf ;_bce =((_bce &0x0d6)<<1)|_cabb |(_fca >>_egaf +5)&0x002|((_ffd >>_egaf +2)&0x010)|((_daf >>_egaf )&0x040)|((_cadb >>_egaf )&0x200);_bdb =((_bdb &0xdb)<<1)|((_ffd >>_egaf +2)&0x010)|((_daf >>_egaf )&0x080)|((_cadb >>_egaf )&0x400);
};_bgd =_ffb .RegionBitmap .SetByte (_bab ,byte (_ecg ));if _bgd !=nil {return ;};_bab ++;_bda ++;};return nil ;};func (_bgdc *HalftoneRegion )computeX (_adec ,_gacg int )int {return _bgdc .shiftAndFill (int (_bgdc .HGridX )+_adec *int (_bgdc .HRegionY )+_gacg *int (_bgdc .HRegionX ));
};type OrganizationType uint8 ;func (_dga *Header )subInputReader ()(_ad .StreamReader ,error ){return _ad .NewSubstreamReader (_dga .Reader ,_dga .SegmentDataStartOffset ,_dga .SegmentDataLength );};func (_facf *SymbolDictionary )readRefinementAtPixels (_dadf int )error {_facf .SdrATX =make ([]int8 ,_dadf );
_facf .SdrATY =make ([]int8 ,_dadf );var (_adcg byte ;_gacbb error ;);for _edce :=0;_edce < _dadf ;_edce ++{_adcg ,_gacbb =_facf ._ecgb .ReadByte ();if _gacbb !=nil {return _gacbb ;};_facf .SdrATX [_edce ]=int8 (_adcg );_adcg ,_gacbb =_facf ._ecgb .ReadByte ();
if _gacbb !=nil {return _gacbb ;};_facf .SdrATY [_edce ]=int8 (_adcg );};return nil ;};func (_ffgc *GenericRegion )setParametersWithAt (_afcgc bool ,_cfag byte ,_aafd ,_ebec bool ,_efaf ,_ggf []int8 ,_cdgc ,_fad uint32 ,_gcc *_cg .DecoderStats ,_fef *_cg .Decoder ){_ffgc .IsMMREncoded =_afcgc ;
_ffgc .GBTemplate =_cfag ;_ffgc .IsTPGDon =_aafd ;_ffgc .GBAtX =_efaf ;_ffgc .GBAtY =_ggf ;_ffgc .RegionSegment .BitmapHeight =_fad ;_ffgc .RegionSegment .BitmapWidth =_cdgc ;_ffgc ._gce =nil ;_ffgc .Bitmap =nil ;if _gcc !=nil {_ffgc ._cedf =_gcc ;};if _fef !=nil {_ffgc ._afcg =_fef ;
};_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049O\u004e\u005d\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0053\u0044\u0041t\u003a\u0020\u0025\u0073",_ffgc );};func (_aaeg *SymbolDictionary )Encode (w _ad .BinaryWriter )(_dfgf int ,_dbag error ){const _fdbb ="\u0053\u0079\u006dbo\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
if _aaeg ==nil {return 0,_dd .Error (_fdbb ,"\u0073\u0079m\u0062\u006f\u006c\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066in\u0065\u0064");};if _dfgf ,_dbag =_aaeg .encodeFlags (w );_dbag !=nil {return _dfgf ,_dd .Wrap (_dbag ,_fdbb ,"");
};_ffdb ,_dbag :=_aaeg .encodeATFlags (w );if _dbag !=nil {return _dfgf ,_dd .Wrap (_dbag ,_fdbb ,"");};_dfgf +=_ffdb ;if _ffdb ,_dbag =_aaeg .encodeRefinementATFlags (w );_dbag !=nil {return _dfgf ,_dd .Wrap (_dbag ,_fdbb ,"");};_dfgf +=_ffdb ;if _ffdb ,_dbag =_aaeg .encodeNumSyms (w );
_dbag !=nil {return _dfgf ,_dd .Wrap (_dbag ,_fdbb ,"");};_dfgf +=_ffdb ;if _ffdb ,_dbag =_aaeg .encodeSymbols (w );_dbag !=nil {return _dfgf ,_dd .Wrap (_dbag ,_fdbb ,"");};_dfgf +=_ffdb ;return _dfgf ,nil ;};func (_acag *SymbolDictionary )decodeDifferenceWidth ()(int64 ,error ){if _acag .IsHuffmanEncoded {switch _acag .SdHuffDecodeWidthSelection {case 0:_afcgg ,_gddd :=_ed .GetStandardTable (2);
if _gddd !=nil {return 0,_gddd ;};return _afcgg .Decode (_acag ._ecgb );case 1:_cggee ,_acgc :=_ed .GetStandardTable (3);if _acgc !=nil {return 0,_acgc ;};return _cggee .Decode (_acag ._ecgb );case 3:if _acag ._adbe ==nil {var _ccgcc int ;if _acag .SdHuffDecodeHeightSelection ==3{_ccgcc ++;
};_ccfb ,_gcfeg :=_acag .getUserTable (_ccgcc );if _gcfeg !=nil {return 0,_gcfeg ;};_acag ._adbe =_ccfb ;};return _acag ._adbe .Decode (_acag ._ecgb );};}else {_cffc ,_cebb :=_acag ._abef .DecodeInt (_acag ._dbfb );if _cebb !=nil {return 0,_cebb ;};return int64 (_cffc ),nil ;
};return 0,nil ;};func (_dcec *SymbolDictionary )InitEncode (symbols *_eb .Bitmaps ,symbolList []int ,symbolMap map[int ]int ,unborderSymbols bool )error {const _cefd ="S\u0079\u006d\u0062\u006f\u006c\u0044i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002eI\u006e\u0069\u0074E\u006ec\u006f\u0064\u0065";
_dcec .SdATX =[]int8 {3,-3,2,-2};_dcec .SdATY =[]int8 {-1,-1,-2,-2};_dcec ._abaf =symbols ;_dcec ._deaf =make ([]int ,len (symbolList ));copy (_dcec ._deaf ,symbolList );if len (_dcec ._deaf )!=_dcec ._abaf .Size (){return _dd .Error (_cefd ,"s\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0061\u006e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u004ci\u0073\u0074\u0020\u006f\u0066\u0020\u0064\u0069\u0066\u0066er\u0065\u006e\u0074 \u0073i\u007a\u0065");
};_dcec .NumberOfNewSymbols =uint32 (symbols .Size ());_dcec .NumberOfExportedSymbols =uint32 (symbols .Size ());_dcec ._cfdf =symbolMap ;_dcec ._bebc =unborderSymbols ;return nil ;};func (_adg *GenericRegion )copyLineAbove (_aagb int )error {_ceef :=_aagb *_adg .Bitmap .RowStride ;
_ffbe :=_ceef -_adg .Bitmap .RowStride ;for _ebf :=0;_ebf < _adg .Bitmap .RowStride ;_ebf ++{_ffc ,_defb :=_adg .Bitmap .GetByte (_ffbe );if _defb !=nil {return _defb ;};_ffbe ++;if _defb =_adg .Bitmap .SetByte (_ceef ,_ffc );_defb !=nil {return _defb ;
};_ceef ++;};return nil ;};var _ _ed .BasicTabler =&TableSegment {};func (_bddd *TableSegment )HtLow ()int32 {return _bddd ._edgf };type Regioner interface{GetRegionBitmap ()(*_eb .Bitmap ,error );GetRegionInfo ()*RegionSegment ;};func (_bccc *SymbolDictionary )setInSyms ()error {if _bccc .Header .RTSegments !=nil {return _bccc .retrieveImportSymbols ();
};_bccc ._fced =make ([]*_eb .Bitmap ,0);return nil ;};func (_gdbf *SymbolDictionary )decodeAggregate (_dgad ,_cdfc uint32 )error {var (_dgga int64 ;_edebc error ;);if _gdbf .IsHuffmanEncoded {_dgga ,_edebc =_gdbf .huffDecodeRefAggNInst ();if _edebc !=nil {return _edebc ;
};}else {_fcag ,_aacd :=_gdbf ._abef .DecodeInt (_gdbf ._deefa );if _aacd !=nil {return _aacd ;};_dgga =int64 (_fcag );};if _dgga > 1{return _gdbf .decodeThroughTextRegion (_dgad ,_cdfc ,uint32 (_dgga ));}else if _dgga ==1{return _gdbf .decodeRefinedSymbol (_dgad ,_cdfc );
};return nil ;};func (_bdacb *PatternDictionary )readGrayMax ()error {_eefe ,_deac :=_bdacb ._deda .ReadBits (32);if _deac !=nil {return _deac ;};_bdacb .GrayMax =uint32 (_eefe &_e .MaxUint32 );return nil ;};func (_ddbe *SymbolDictionary )setExportedSymbols (_bccg []int ){for _fcdd :=uint32 (0);
_fcdd < _ddbe ._dgbd +_ddbe .NumberOfNewSymbols ;_fcdd ++{if _bccg [_fcdd ]==1{var _edga *_eb .Bitmap ;if _fcdd < _ddbe ._dgbd {_edga =_ddbe ._fced [_fcdd ];}else {_edga =_ddbe ._gde [_fcdd -_ddbe ._dgbd ];};_cb .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u002d\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u0020\u0041\u0064\u0064 E\u0078\u0070\u006fr\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027%\u0073\u0027",_edga );
_ddbe ._caaea =append (_ddbe ._caaea ,_edga );};};};func (_fdbf *TableSegment )HtRS ()int32 {return _fdbf ._egfd };var (_ Regioner =&TextRegion {};_ Segmenter =&TextRegion {};);func (_adf *GenericRegion )GetRegionBitmap ()(_aafc *_eb .Bitmap ,_dcc error ){if _adf .Bitmap !=nil {return _adf .Bitmap ,nil ;
};if _adf .IsMMREncoded {if _adf ._gce ==nil {_adf ._gce ,_dcc =_be .New (_adf ._gff ,int (_adf .RegionSegment .BitmapWidth ),int (_adf .RegionSegment .BitmapHeight ),_adf .DataOffset ,_adf .DataLength );if _dcc !=nil {return nil ,_dcc ;};};_adf .Bitmap ,_dcc =_adf ._gce .UncompressMMR ();
return _adf .Bitmap ,_dcc ;};if _dcc =_adf .updateOverrideFlags ();_dcc !=nil {return nil ,_dcc ;};var _gga int ;if _adf ._afcg ==nil {_adf ._afcg ,_dcc =_cg .New (_adf ._gff );if _dcc !=nil {return nil ,_dcc ;};};if _adf ._cedf ==nil {_adf ._cedf =_cg .NewStats (65536,1);
};_adf .Bitmap =_eb .New (int (_adf .RegionSegment .BitmapWidth ),int (_adf .RegionSegment .BitmapHeight ));_cedff :=int (uint32 (_adf .Bitmap .Width +7)&(^uint32 (7)));for _abe :=0;_abe < _adf .Bitmap .Height ;_abe ++{if _adf .IsTPGDon {var _agc int ;
_agc ,_dcc =_adf .decodeSLTP ();if _dcc !=nil {return nil ,_dcc ;};_gga ^=_agc ;};if _gga ==1{if _abe > 0{if _dcc =_adf .copyLineAbove (_abe );_dcc !=nil {return nil ,_dcc ;};};}else {if _dcc =_adf .decodeLine (_abe ,_adf .Bitmap .Width ,_cedff );_dcc !=nil {return nil ,_dcc ;
};};};return _adf .Bitmap ,nil ;};func (_babb *Header )GetSegmentData ()(Segmenter ,error ){var _eeae Segmenter ;if _babb .SegmentData !=nil {_eeae =_babb .SegmentData ;};if _eeae ==nil {_ebag ,_bdd :=_ece [_babb .Type ];if !_bdd {return nil ,_ff .Errorf ("\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u002f\u0020\u0025\u0064\u0020\u0063\u0072e\u0061t\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e\u0020",_babb .Type ,_babb .Type );
};_eeae =_ebag ();_cb .Log .Trace ("\u005b\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u0074\u0020\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0030\u0034\u0058",_babb .SegmentNumber ,_babb .SegmentDataStartOffset );
_bcbb ,_cbebd :=_babb .subInputReader ();if _cbebd !=nil {return nil ,_cbebd ;};if _edg :=_eeae .Init (_babb ,_bcbb );_edg !=nil {_cb .Log .Debug ("\u0049\u006e\u0069\u0074 \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076 \u0066o\u0072\u0020\u0074\u0079\u0070\u0065\u003a \u0025\u0054",_edg ,_eeae );
return nil ,_edg ;};_babb .SegmentData =_eeae ;};return _eeae ,nil ;};func (_cbge *GenericRegion )readGBAtPixels (_dbb int )error {const _ffgg ="\u0072\u0065\u0061\u0064\u0047\u0042\u0041\u0074\u0050i\u0078\u0065\u006c\u0073";_cbge .GBAtX =make ([]int8 ,_dbb );
_cbge .GBAtY =make ([]int8 ,_dbb );for _egbb :=0;_egbb < _dbb ;_egbb ++{_fbe ,_bgdg :=_cbge ._gff .ReadByte ();if _bgdg !=nil {return _dd .Wrapf (_bgdg ,_ffgg ,"\u0058\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_egbb );};_cbge .GBAtX [_egbb ]=int8 (_fbe );
_fbe ,_bgdg =_cbge ._gff .ReadByte ();if _bgdg !=nil {return _dd .Wrapf (_bgdg ,_ffgg ,"\u0059\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_egbb );};_cbge .GBAtY [_egbb ]=int8 (_fbe );};return nil ;};func (_cacga *SymbolDictionary )encodeFlags (_fbad _ad .BinaryWriter )(_cgc int ,_cdbc error ){const _fgea ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _cdbc =_fbad .SkipBits (3);_cdbc !=nil {return 0,_dd .Wrap (_cdbc ,_fgea ,"\u0065\u006d\u0070\u0074\u0079\u0020\u0062\u0069\u0074\u0073");};var _dabc int ;if _cacga .SdrTemplate > 0{_dabc =1;};if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"s\u0064\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};_dabc =0;if _cacga .SdTemplate > 1{_dabc =1;};if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_dabc =0;if _cacga .SdTemplate ==1||_cacga .SdTemplate ==3{_dabc =1;
};if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_dabc =0;if _cacga ._efac {_dabc =1;};if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"\u0063\u006f\u0064in\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0065\u0064");
};_dabc =0;if _cacga ._faaa {_dabc =1;};if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"\u0063\u006f\u0064\u0069ng\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0075\u0073\u0065\u0064");};_dabc =0;if _cacga .SdHuffAggInstanceSelection {_dabc =1;
};if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"\u0073\u0064\u0048\u0075\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074");};_dabc =int (_cacga .SdHuffBMSizeSelection );if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"\u0073\u0064\u0048u\u0066\u0066\u0042\u006d\u0053\u0069\u007a\u0065");
};_dabc =0;if _cacga .SdHuffDecodeWidthSelection > 1{_dabc =1;};if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_dabc =0;switch _cacga .SdHuffDecodeWidthSelection {case 1,3:_dabc =1;
};if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_dabc =0;if _cacga .SdHuffDecodeHeightSelection > 1{_dabc =1;};if _cdbc =_fbad .WriteBit (_dabc );
_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_dabc =0;switch _cacga .SdHuffDecodeHeightSelection {case 1,3:_dabc =1;};if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");
};_dabc =0;if _cacga .UseRefinementAggregation {_dabc =1;};if _cdbc =_fbad .WriteBit (_dabc );_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"\u0073\u0064\u0052\u0065\u0066\u0041\u0067\u0067");};_dabc =0;if _cacga .IsHuffmanEncoded {_dabc =1;};if _cdbc =_fbad .WriteBit (_dabc );
_cdbc !=nil {return _cgc ,_dd .Wrap (_cdbc ,_fgea ,"\u0073\u0064\u0048\u0075\u0066\u0066");};return 2,nil ;};type GenericRefinementRegion struct{_fd templater ;_ga templater ;_eg _ad .StreamReader ;_de *Header ;RegionInfo *RegionSegment ;IsTPGROn bool ;
TemplateID int8 ;Template templater ;GrAtX []int8 ;GrAtY []int8 ;RegionBitmap *_eb .Bitmap ;ReferenceBitmap *_eb .Bitmap ;ReferenceDX int32 ;ReferenceDY int32 ;_ecd *_cg .Decoder ;_ada *_cg .DecoderStats ;_def bool ;_bc []bool ;};func (_adga *TableSegment )HtPS ()int32 {return _adga ._accc };
func (_dccc *TextRegion )decodeStripT ()(_gfba int64 ,_efag error ){if _dccc .IsHuffmanEncoded {if _dccc .SbHuffDT ==3{if _dccc ._ecgbg ==nil {var _cbde int ;if _dccc .SbHuffFS ==3{_cbde ++;};if _dccc .SbHuffDS ==3{_cbde ++;};_dccc ._ecgbg ,_efag =_dccc .getUserTable (_cbde );
if _efag !=nil {return 0,_efag ;};};_gfba ,_efag =_dccc ._ecgbg .Decode (_dccc ._gbdb );if _efag !=nil {return 0,_efag ;};}else {var _ggce _ed .Tabler ;_ggce ,_efag =_ed .GetStandardTable (11+int (_dccc .SbHuffDT ));if _efag !=nil {return 0,_efag ;};_gfba ,_efag =_ggce .Decode (_dccc ._gbdb );
if _efag !=nil {return 0,_efag ;};};}else {var _gggb int32 ;_gggb ,_efag =_dccc ._ccde .DecodeInt (_dccc ._aeba );if _efag !=nil {return 0,_efag ;};_gfba =int64 (_gggb );};_gfba *=int64 (-_dccc .SbStrips );return _gfba ,nil ;};type TextRegion struct{_gbdb _ad .StreamReader ;
RegionInfo *RegionSegment ;SbrTemplate int8 ;SbDsOffset int8 ;DefaultPixel int8 ;CombinationOperator _eb .CombinationOperator ;IsTransposed int8 ;ReferenceCorner int16 ;LogSBStrips int16 ;UseRefinement bool ;IsHuffmanEncoded bool ;SbHuffRSize int8 ;SbHuffRDY int8 ;
SbHuffRDX int8 ;SbHuffRDHeight int8 ;SbHuffRDWidth int8 ;SbHuffDT int8 ;SbHuffDS int8 ;SbHuffFS int8 ;SbrATX []int8 ;SbrATY []int8 ;NumberOfSymbolInstances uint32 ;_ggbc int64 ;SbStrips int8 ;NumberOfSymbols uint32 ;RegionBitmap *_eb .Bitmap ;Symbols []*_eb .Bitmap ;
_ccde *_cg .Decoder ;_egedb *GenericRefinementRegion ;_aeba *_cg .DecoderStats ;_afag *_cg .DecoderStats ;_cdfcb *_cg .DecoderStats ;_cbcd *_cg .DecoderStats ;_aagc *_cg .DecoderStats ;_afgf *_cg .DecoderStats ;_ddcf *_cg .DecoderStats ;_dbed *_cg .DecoderStats ;
_bgaa *_cg .DecoderStats ;_cdbd *_cg .DecoderStats ;_aagcc *_cg .DecoderStats ;_afdda int8 ;_acgd *_ed .FixedSizeTable ;Header *Header ;_fcdgc _ed .Tabler ;_fbfb _ed .Tabler ;_ecgbg _ed .Tabler ;_dfbc _ed .Tabler ;_acff _ed .Tabler ;_bafb _ed .Tabler ;
_gbe _ed .Tabler ;_aeee _ed .Tabler ;_fcdc ,_baca map[int ]int ;_fggf []int ;_ggbd *_eb .Points ;_fdcc *_eb .Bitmaps ;_dfbg *_ca .IntSlice ;_cfgd ,_bafa int ;_gbda *_eb .Boxes ;};func (_dbfg *PageInformationSegment )readIsLossless ()error {_dgbf ,_gcga :=_dbfg ._fga .ReadBit ();
if _gcga !=nil {return _gcga ;};if _dgbf ==1{_dbfg .IsLossless =true ;};return nil ;};func (_agfdb *SymbolDictionary )decodeNewSymbols (_acab ,_cdcgg uint32 ,_aecd *_eb .Bitmap ,_babde ,_gfge int32 )error {if _agfdb ._gafd ==nil {_agfdb ._gafd =_acc (_agfdb ._ecgb ,nil );
if _agfdb ._abef ==nil {var _bcdg error ;_agfdb ._abef ,_bcdg =_cg .New (_agfdb ._ecgb );if _bcdg !=nil {return _bcdg ;};};if _agfdb ._cccc ==nil {_agfdb ._cccc =_cg .NewStats (65536,1);};};_agfdb ._gafd .setParameters (_agfdb ._cccc ,_agfdb ._abef ,_agfdb .SdrTemplate ,_acab ,_cdcgg ,_aecd ,_babde ,_gfge ,false ,_agfdb .SdrATX ,_agfdb .SdrATY );
return _agfdb .addSymbol (_agfdb ._gafd );};func (_bgbe *Header )readReferredToSegmentNumbers (_bcbe _ad .StreamReader ,_abcb int )([]int ,error ){const _aae ="\u0072\u0065\u0061\u0064R\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053e\u0067m\u0065\u006e\u0074\u004e\u0075\u006d\u0062e\u0072\u0073";
_caa :=make ([]int ,_abcb );if _abcb > 0{_bgbe .RTSegments =make ([]*Header ,_abcb );var (_fegf uint64 ;_acdc error ;);for _cfgfb :=0;_cfgfb < _abcb ;_cfgfb ++{_fegf ,_acdc =_bcbe .ReadBits (byte (_bgbe .referenceSize ())<<3);if _acdc !=nil {return nil ,_dd .Wrapf (_acdc ,_aae ,"\u0027\u0025\u0064\u0027 \u0072\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0020\u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u0075\u006db\u0065\u0072",_cfgfb );
};_caa [_cfgfb ]=int (_fegf &_e .MaxInt32 );};};return _caa ,nil ;};func (_ecce *Header )writeFlags (_bcba _ad .BinaryWriter )(_cfbe error ){const _fgeb ="\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065F\u006c\u0061\u0067\u0073";
_bge :=byte (_ecce .Type );if _cfbe =_bcba .WriteByte (_bge );_cfbe !=nil {return _dd .Wrap (_cfbe ,_fgeb ,"\u0077\u0072\u0069ti\u006e\u0067\u0020\u0073\u0065\u0067\u006d\u0065\u006et\u0020t\u0079p\u0065 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};if !_ecce .RetainFlag &&!_ecce .PageAssociationFieldSize {return nil ;};if _cfbe =_bcba .SkipBits (-8);_cfbe !=nil {return _dd .Wrap (_cfbe ,_fgeb ,"\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0061\u0063\u006b\u0020\u0074\u0068\u0065\u0020\u0062\u0069\u0074\u0073\u0020\u0066\u0061il\u0065\u0064");
};var _gaeec int ;if _ecce .RetainFlag {_gaeec =1;};if _cfbe =_bcba .WriteBit (_gaeec );_cfbe !=nil {return _dd .Wrap (_cfbe ,_fgeb ,"\u0072\u0065\u0074\u0061in\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067\u0073");};_gaeec =0;
if _ecce .PageAssociationFieldSize {_gaeec =1;};if _cfbe =_bcba .WriteBit (_gaeec );_cfbe !=nil {return _dd .Wrap (_cfbe ,_fgeb ,"p\u0061\u0067\u0065\u0020as\u0073o\u0063\u0069\u0061\u0074\u0069o\u006e\u0020\u0066\u006c\u0061\u0067");};_bcba .FinishByte ();
return nil ;};func (_fade *TextRegion )Init (header *Header ,r _ad .StreamReader )error {_fade .Header =header ;_fade ._gbdb =r ;_fade .RegionInfo =NewRegionSegment (_fade ._gbdb );return _fade .parseHeader ();};func (_caeg *TextRegion )parseHeader ()error {var _fee error ;
_cb .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069n\u0073\u002e\u002e\u002e");defer func (){if _fee !=nil {_cb .Log .Trace ("\u005b\u0054\u0045\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044E\u0052\u005d\u0020\u0066\u0061i\u006c\u0065d\u002e\u0020\u0025\u0076",_fee );
}else {_cb .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069s\u0068\u0065\u0064\u002e");};}();if _fee =_caeg .RegionInfo .parseHeader ();
_fee !=nil {return _fee ;};if _fee =_caeg .readRegionFlags ();_fee !=nil {return _fee ;};if _caeg .IsHuffmanEncoded {if _fee =_caeg .readHuffmanFlags ();_fee !=nil {return _fee ;};};if _fee =_caeg .readUseRefinement ();_fee !=nil {return _fee ;};if _fee =_caeg .readAmountOfSymbolInstances ();
_fee !=nil {return _fee ;};if _fee =_caeg .getSymbols ();_fee !=nil {return _fee ;};if _fee =_caeg .computeSymbolCodeLength ();_fee !=nil {return _fee ;};if _fee =_caeg .checkInput ();_fee !=nil {return _fee ;};_cb .Log .Trace ("\u0025\u0073",_caeg .String ());
return nil ;};func (_ddc *EndOfStripe )Init (h *Header ,r _ad .StreamReader )error {_ddc ._cc =r ;return _ddc .parseHeader (h ,r );};func (_gb *GenericRefinementRegion )readAtPixels ()error {_gb .GrAtX =make ([]int8 ,2);_gb .GrAtY =make ([]int8 ,2);_fbd ,_dfaa :=_gb ._eg .ReadByte ();
if _dfaa !=nil {return _dfaa ;};_gb .GrAtX [0]=int8 (_fbd );_fbd ,_dfaa =_gb ._eg .ReadByte ();if _dfaa !=nil {return _dfaa ;};_gb .GrAtY [0]=int8 (_fbd );_fbd ,_dfaa =_gb ._eg .ReadByte ();if _dfaa !=nil {return _dfaa ;};_gb .GrAtX [1]=int8 (_fbd );_fbd ,_dfaa =_gb ._eg .ReadByte ();
if _dfaa !=nil {return _dfaa ;};_gb .GrAtY [1]=int8 (_fbd );return nil ;};func (_fcb *GenericRegion )overrideAtTemplate1 (_gef ,_cggad ,_ccfa ,_eccdg ,_cffg int )int {_gef &=0x1FF7;if _fcb .GBAtY [0]==0&&_fcb .GBAtX [0]>=-int8 (_cffg ){_gef |=(_eccdg >>uint (7-(int8 (_cffg )+_fcb .GBAtX [0]))&0x1)<<3;
}else {_gef |=int (_fcb .getPixel (_cggad +int (_fcb .GBAtX [0]),_ccfa +int (_fcb .GBAtY [0])))<<3;};return _gef ;};func (_abg *SymbolDictionary )encodeATFlags (_faad _ad .BinaryWriter )(_ead int ,_ggaf error ){const _aedd ="\u0065\u006e\u0063\u006f\u0064\u0065\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if _abg .IsHuffmanEncoded ||_abg .SdTemplate !=0{return 0,nil ;};_beba :=4;if _abg .SdTemplate !=0{_beba =1;};for _bfabg :=0;_bfabg < _beba ;_bfabg ++{if _ggaf =_faad .WriteByte (byte (_abg .SdATX [_bfabg ]));_ggaf !=nil {return _ead ,_dd .Wrapf (_ggaf ,_aedd ,"\u0053d\u0041\u0054\u0058\u005b\u0025\u0064]",_bfabg );
};_ead ++;if _ggaf =_faad .WriteByte (byte (_abg .SdATY [_bfabg ]));_ggaf !=nil {return _ead ,_dd .Wrapf (_ggaf ,_aedd ,"\u0053d\u0041\u0054\u0059\u005b\u0025\u0064]",_bfabg );};_ead ++;};return _ead ,nil ;};var _ SegmentEncoder =&RegionSegment {};func (_adag *GenericRegion )setParameters (_fcea bool ,_eac ,_aeeb int64 ,_ccaa ,_gfe uint32 ){_adag .IsMMREncoded =_fcea ;
_adag .DataOffset =_eac ;_adag .DataLength =_aeeb ;_adag .RegionSegment .BitmapHeight =_ccaa ;_adag .RegionSegment .BitmapWidth =_gfe ;_adag ._gce =nil ;_adag .Bitmap =nil ;};func (_dc *GenericRefinementRegion )GetRegionBitmap ()(*_eb .Bitmap ,error ){var _ab error ;
_cb .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _ab !=nil {_cb .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0047\u0065\u0074R\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006dap\u0020\u0066a\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ab );
}else {_cb .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _dc .RegionBitmap !=nil {return _dc .RegionBitmap ,nil ;};_ba :=0;if _dc .ReferenceBitmap ==nil {_dc .ReferenceBitmap ,_ab =_dc .getGrReference ();if _ab !=nil {return nil ,_ab ;};};if _dc ._ecd ==nil {_dc ._ecd ,_ab =_cg .New (_dc ._eg );if _ab !=nil {return nil ,_ab ;
};};if _dc ._ada ==nil {_dc ._ada =_cg .NewStats (8192,1);};_dc .RegionBitmap =_eb .New (int (_dc .RegionInfo .BitmapWidth ),int (_dc .RegionInfo .BitmapHeight ));if _dc .TemplateID ==0{if _ab =_dc .updateOverride ();_ab !=nil {return nil ,_ab ;};};_cbg :=(_dc .RegionBitmap .Width +7)&-8;
var _da int ;if _dc .IsTPGROn {_da =int (-_dc .ReferenceDY )*_dc .ReferenceBitmap .RowStride ;};_dea :=_da +1;for _ea :=0;_ea < _dc .RegionBitmap .Height ;_ea ++{if _dc .IsTPGROn {_cdd ,_bf :=_dc .decodeSLTP ();if _bf !=nil {return nil ,_bf ;};_ba ^=_cdd ;
};if _ba ==0{_ab =_dc .decodeOptimized (_ea ,_dc .RegionBitmap .Width ,_dc .RegionBitmap .RowStride ,_dc .ReferenceBitmap .RowStride ,_cbg ,_da ,_dea );if _ab !=nil {return nil ,_ab ;};}else {_ab =_dc .decodeTypicalPredictedLine (_ea ,_dc .RegionBitmap .Width ,_dc .RegionBitmap .RowStride ,_dc .ReferenceBitmap .RowStride ,_cbg ,_da );
if _ab !=nil {return nil ,_ab ;};};};return _dc .RegionBitmap ,nil ;};func (_gbge *TextRegion )getUserTable (_fgda int )(_ed .Tabler ,error ){const _bdfg ="\u0067\u0065\u0074U\u0073\u0065\u0072\u0054\u0061\u0062\u006c\u0065";var _eege int ;for _ ,_dgbe :=range _gbge .Header .RTSegments {if _dgbe .Type ==53{if _eege ==_fgda {_cdaca ,_dgdb :=_dgbe .GetSegmentData ();
if _dgdb !=nil {return nil ,_dgdb ;};_gfcc ,_agdce :=_cdaca .(*TableSegment );if !_agdce {_cb .Log .Debug (_ff .Sprintf ("\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079p\u0065\u00205\u0033\u0020\u002d\u0020\u0061\u006ed\u0020in\u0064\u0065\u0078\u003a\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_dgbe .SegmentNumber ));
return nil ,_dd .Error (_bdfg ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079\u0070e\u0020\u0035\u0033\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u002a\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};return _ed .NewEncodedTable (_gfcc );};_eege ++;};};return nil ,nil ;};func (_cfcd *SymbolDictionary )encodeNumSyms (_dbge _ad .BinaryWriter )(_ged int ,_badd error ){const _gfedb ="\u0065\u006e\u0063\u006f\u0064\u0065\u004e\u0075\u006d\u0053\u0079\u006d\u0073";
_eedf :=make ([]byte ,4);_d .BigEndian .PutUint32 (_eedf ,_cfcd .NumberOfExportedSymbols );if _ged ,_badd =_dbge .Write (_eedf );_badd !=nil {return _ged ,_dd .Wrap (_badd ,_gfedb ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};_d .BigEndian .PutUint32 (_eedf ,_cfcd .NumberOfNewSymbols );_abfb ,_badd :=_dbge .Write (_eedf );if _badd !=nil {return _ged ,_dd .Wrap (_badd ,_gfedb ,"n\u0065\u0077\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};return _ged +_abfb ,nil ;};func (_gfcg *template1 )form (_cef ,_dde ,_aea ,_ccdd ,_eff int16 )int16 {return ((_cef &0x02)<<8)|(_dde <<6)|((_aea &0x03)<<4)|(_ccdd <<1)|_eff ;
};func (_ced *GenericRefinementRegion )getPixel (_fedc *_eb .Bitmap ,_fbf ,_dfa int )int {if _fbf < 0||_fbf >=_fedc .Width {return 0;};if _dfa < 0||_dfa >=_fedc .Height {return 0;};if _fedc .GetPixel (_fbf ,_dfa ){return 1;};return 0;};func (_ccgc *SymbolDictionary )checkInput ()error {if _ccgc .SdHuffDecodeHeightSelection ==2{_cb .Log .Debug ("\u0053\u0079\u006d\u0062\u006fl\u0020\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u0053e\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0070\u0065r\u006d\u0069\u0074\u0074\u0065\u0064",_ccgc .SdHuffDecodeHeightSelection );
};if _ccgc .SdHuffDecodeWidthSelection ==2{_cb .Log .Debug ("\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0057\u0069\u0064t\u0068\u0020\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061l\u0075\u0065\u0020\u006e\u006f\u0074 \u0070\u0065r\u006d\u0069t\u0074e\u0064",_ccgc .SdHuffDecodeWidthSelection );
};if _ccgc .IsHuffmanEncoded {if _ccgc .SdTemplate !=0{_cb .Log .Debug ("\u0053\u0044T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e \u0030\u0029",_ccgc .SdTemplate );
};if !_ccgc .UseRefinementAggregation {if !_ccgc .UseRefinementAggregation {if _ccgc ._efac {_cb .Log .Debug ("\u0049\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074ex\u0074\u0052\u0065\u0074\u0061\u0069n\u0065\u0064\u0020\u003d\u0020\u0074\u0072\u0075\u0065\u0020\u0028\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0066\u0061\u006cs\u0065\u0029");
_ccgc ._efac =false ;};if _ccgc ._faaa {_cb .Log .Debug ("\u0069s\u0043\u006fd\u0069\u006e\u0067\u0043o\u006e\u0074\u0065x\u0074\u0055\u0073\u0065\u0064\u0020\u003d\u0020\u0074ru\u0065\u0020\u0028s\u0068\u006fu\u006c\u0064\u0020\u0062\u0065\u0020f\u0061\u006cs\u0065\u0029");
_ccgc ._faaa =false ;};};};}else {if _ccgc .SdHuffBMSizeSelection !=0{_cb .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066B\u004d\u0053\u0069\u007a\u0065\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_ccgc .SdHuffBMSizeSelection =0;};if _ccgc .SdHuffDecodeWidthSelection !=0{_cb .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068\u0053\u0065\u006c\u0065\u0063\u0074\u0069o\u006e\u0020\u0073\u0068\u006fu\u006c\u0064 \u0062\u0065\u0020\u0030");
_ccgc .SdHuffDecodeWidthSelection =0;};if _ccgc .SdHuffDecodeHeightSelection !=0{_cb .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0048e\u0069\u0067\u0068\u0074\u0053\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_ccgc .SdHuffDecodeHeightSelection =0;};};if !_ccgc .UseRefinementAggregation {if _ccgc .SdrTemplate !=0{_cb .Log .Debug ("\u0053\u0044\u0052\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u003d\u0020\u0025\u0064\u0020\u0028s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_ccgc .SdrTemplate );
_ccgc .SdrTemplate =0;};};if !_ccgc .IsHuffmanEncoded ||!_ccgc .UseRefinementAggregation {if _ccgc .SdHuffAggInstanceSelection {_cb .Log .Debug ("\u0053d\u0048\u0075f\u0066\u0041\u0067g\u0049\u006e\u0073\u0074\u0061\u006e\u0063e\u0053\u0065\u006c\u0065\u0063\u0074i\u006f\u006e\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_ccgc .SdHuffAggInstanceSelection );
};};return nil ;};func (_bcgb *TextRegion )decodeIds ()(int64 ,error ){const _cgaea ="\u0064e\u0063\u006f\u0064\u0065\u0049\u0064s";if _bcgb .IsHuffmanEncoded {if _bcgb .SbHuffDS ==3{if _bcgb ._fbfb ==nil {_gcfb :=0;if _bcgb .SbHuffFS ==3{_gcfb ++;};var _fgff error ;
_bcgb ._fbfb ,_fgff =_bcgb .getUserTable (_gcfb );if _fgff !=nil {return 0,_dd .Wrap (_fgff ,_cgaea ,"");};};return _bcgb ._fbfb .Decode (_bcgb ._gbdb );};_fddf ,_gebb :=_ed .GetStandardTable (8+int (_bcgb .SbHuffDS ));if _gebb !=nil {return 0,_dd .Wrap (_gebb ,_cgaea ,"");
};return _fddf .Decode (_bcgb ._gbdb );};_dcbg ,_ddbd :=_bcgb ._ccde .DecodeInt (_bcgb ._cdfcb );if _ddbd !=nil {return 0,_dd .Wrap (_ddbd ,_cgaea ,"\u0063\u0078\u0049\u0041\u0044\u0053");};return int64 (_dcbg ),nil ;};func (_dgbb *TextRegion )String ()string {_fcgd :=&_f .Builder {};
_fcgd .WriteString ("\u000a[\u0054E\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u000a");_fcgd .WriteString (_dgbb .RegionInfo .String ()+"\u000a");_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053br\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0025\u0076\u000a",_dgbb .SbrTemplate ));
_fcgd .WriteString (_ff .Sprintf ("\u0009-\u0020S\u0062\u0044\u0073\u004f\u0066f\u0073\u0065t\u003a\u0020\u0025\u0076\u000a",_dgbb .SbDsOffset ));_fcgd .WriteString (_ff .Sprintf ("\t\u002d \u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0050i\u0078\u0065\u006c\u003a %\u0076\u000a",_dgbb .DefaultPixel ));
_fcgd .WriteString (_ff .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0076\u000a",_dgbb .CombinationOperator ));_fcgd .WriteString (_ff .Sprintf ("\t\u002d \u0049\u0073\u0054\u0072\u0061\u006e\u0073\u0070o\u0073\u0065\u0064\u003a %\u0076\u000a",_dgbb .IsTransposed ));
_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d\u0020Re\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0043\u006f\u0072\u006e\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_dgbb .ReferenceCorner ));_fcgd .WriteString (_ff .Sprintf ("\t\u002d\u0020\u0055\u0073eR\u0065f\u0069\u006e\u0065\u006d\u0065n\u0074\u003a\u0020\u0025\u0076\u000a",_dgbb .UseRefinement ));
_fcgd .WriteString (_ff .Sprintf ("\u0009-\u0020\u0049\u0073\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045n\u0063\u006f\u0064\u0065\u0064\u003a\u0020\u0025\u0076\u000a",_dgbb .IsHuffmanEncoded ));if _dgbb .IsHuffmanEncoded {_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_dgbb .SbHuffRSize ));
_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0059:\u0020\u0025\u0076\u000a",_dgbb .SbHuffRDY ));_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0058:\u0020\u0025\u0076\u000a",_dgbb .SbHuffRDX ));
_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069\u0067\u0068\u0074\u003a\u0020\u0025v\u000a",_dgbb .SbHuffRDHeight ));_fcgd .WriteString (_ff .Sprintf ("\t\u002d\u0020\u0053\u0062Hu\u0066f\u0052\u0044\u0057\u0069\u0064t\u0068\u003a\u0020\u0025\u0076\u000a",_dgbb .SbHuffRDWidth ));
_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0054\u003a\u0020\u0025\u0076\u000a",_dgbb .SbHuffDT ));_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0053\u003a\u0020\u0025\u0076\u000a",_dgbb .SbHuffDS ));
_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0046\u0053\u003a\u0020\u0025\u0076\u000a",_dgbb .SbHuffFS ));};_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_dgbb .SbrATX ));
_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0059:\u0020\u0025\u0076\u000a",_dgbb .SbrATY ));_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d\u0020N\u0075\u006d\u0062\u0065r\u004f\u0066\u0053\u0079\u006d\u0062\u006fl\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_dgbb .NumberOfSymbolInstances ));
_fcgd .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_dgbb .SbrATX ));return _fcgd .String ();};func (_cbfgb *TextRegion )readAmountOfSymbolInstances ()error {_aece ,_eedc :=_cbfgb ._gbdb .ReadBits (32);
if _eedc !=nil {return _eedc ;};_cbfgb .NumberOfSymbolInstances =uint32 (_aece &_e .MaxUint32 );_ggfec :=_cbfgb .RegionInfo .BitmapWidth *_cbfgb .RegionInfo .BitmapHeight ;if _ggfec < _cbfgb .NumberOfSymbolInstances {_cb .Log .Debug ("\u004c\u0069\u006d\u0069t\u0069\u006e\u0067\u0020t\u0068\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020d\u0065\u0063\u006f\u0064e\u0064\u0020\u0073\u0079m\u0062\u006f\u006c\u0020\u0069n\u0073\u0074\u0061\u006e\u0063\u0065\u0073 \u0074\u006f\u0020\u006f\u006ee\u0020\u0070\u0065\u0072\u0020\u0070\u0069\u0078\u0065l\u0020\u0028\u0020\u0025\u0064\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064\u0020\u006f\u0066\u0020\u0025\u0064\u0029",_ggfec ,_cbfgb .NumberOfSymbolInstances );
_cbfgb .NumberOfSymbolInstances =_ggfec ;};return nil ;};func (_ecb *HalftoneRegion )shiftAndFill (_abada int )int {_abada >>=8;if _abada < 0{_fdce :=int (_e .Log (float64 (_edeb (_abada )))/_e .Log (2));_cge :=31-_fdce ;for _fadf :=1;_fadf < _cge ;_fadf ++{_abada |=1<<uint (31-_fadf );
};};return _abada ;};func (_egac *GenericRefinementRegion )updateOverride ()error {if _egac .GrAtX ==nil ||_egac .GrAtY ==nil {return _a .New ("\u0041\u0054\u0020\u0070\u0069\u0078\u0065\u006c\u0073\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");};if len (_egac .GrAtX )!=len (_egac .GrAtY ){return _a .New ("A\u0054\u0020\u0070\u0069xe\u006c \u0069\u006e\u0063\u006f\u006es\u0069\u0073\u0074\u0065\u006e\u0074");
};_egac ._bc =make ([]bool ,len (_egac .GrAtX ));switch _egac .TemplateID {case 0:if _egac .GrAtX [0]!=-1&&_egac .GrAtY [0]!=-1{_egac ._bc [0]=true ;_egac ._def =true ;};if _egac .GrAtX [1]!=-1&&_egac .GrAtY [1]!=-1{_egac ._bc [1]=true ;_egac ._def =true ;
};case 1:_egac ._def =false ;};return nil ;};func (_ffba *SymbolDictionary )encodeSymbols (_gfgg _ad .BinaryWriter )(_eddb int ,_eae error ){const _deab ="\u0065\u006e\u0063o\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c";_eadd :=_gc .New ();_eadd .Init ();
_bged ,_eae :=_ffba ._abaf .SelectByIndexes (_ffba ._deaf );if _eae !=nil {return 0,_dd .Wrap (_eae ,_deab ,"\u0069n\u0069\u0074\u0069\u0061\u006c");};_eccf :=map[*_eb .Bitmap ]int {};for _bbdg ,_cgfc :=range _bged .Values {_eccf [_cgfc ]=_bbdg ;};_bged .SortByHeight ();
var _gcce ,_gacfg int ;_fageg ,_eae :=_bged .GroupByHeight ();if _eae !=nil {return 0,_dd .Wrap (_eae ,_deab ,"");};for _ ,_dcdc :=range _fageg .Values {_cgfge :=_dcdc .Values [0].Height ;_cggfa :=_cgfge -_gcce ;if _eae =_eadd .EncodeInteger (_gc .IADH ,_cggfa );
_eae !=nil {return 0,_dd .Wrapf (_eae ,_deab ,"\u0049\u0041\u0044\u0048\u0020\u0066\u006f\u0072\u0020\u0064\u0068\u003a \u0027\u0025\u0064\u0027",_cggfa );};_gcce =_cgfge ;_ggfb ,_fedf :=_dcdc .GroupByWidth ();if _fedf !=nil {return 0,_dd .Wrapf (_fedf ,_deab ,"\u0068\u0065\u0069g\u0068\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_cgfge );
};var _afad int ;for _ ,_gbfd :=range _ggfb .Values {for _ ,_dbecg :=range _gbfd .Values {_gded :=_dbecg .Width ;_gcgf :=_gded -_afad ;if _fedf =_eadd .EncodeInteger (_gc .IADW ,_gcgf );_fedf !=nil {return 0,_dd .Wrapf (_fedf ,_deab ,"\u0049\u0041\u0044\u0057\u0020\u0066\u006f\u0072\u0020\u0064\u0077\u003a \u0027\u0025\u0064\u0027",_gcgf );
};_afad +=_gcgf ;if _fedf =_eadd .EncodeBitmap (_dbecg ,false );_fedf !=nil {return 0,_dd .Wrapf (_fedf ,_deab ,"H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u0020W\u0069\u0064\u0074\u0068: \u0025\u0064",_cgfge ,_gded );};_ffef :=_eccf [_dbecg ];
_ffba ._cfdf [_ffef ]=_gacfg ;_gacfg ++;};};if _fedf =_eadd .EncodeOOB (_gc .IADW );_fedf !=nil {return 0,_dd .Wrap (_fedf ,_deab ,"\u0049\u0041\u0044\u0057");};};if _eae =_eadd .EncodeInteger (_gc .IAEX ,0);_eae !=nil {return 0,_dd .Wrap (_eae ,_deab ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};if _eae =_eadd .EncodeInteger (_gc .IAEX ,len (_ffba ._deaf ));_eae !=nil {return 0,_dd .Wrap (_eae ,_deab ,"\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0073\u0079m\u0062\u006f\u006c\u0073");};_eadd .Final ();_ebed ,_eae :=_eadd .WriteTo (_gfgg );
if _eae !=nil {return 0,_dd .Wrap (_eae ,_deab ,"\u0077\u0072i\u0074\u0069\u006e\u0067 \u0065\u006ec\u006f\u0064\u0065\u0072\u0020\u0063\u006f\u006et\u0065\u0078\u0074\u0020\u0074\u006f\u0020\u0027\u0077\u0027\u0020\u0077r\u0069\u0074\u0065\u0072");};return int (_ebed ),nil ;
};func (_ag *EndOfStripe )parseHeader (_ec *Header ,_ge _ad .StreamReader )error {_dg ,_agg :=_ag ._cc .ReadBits (32);if _agg !=nil {return _agg ;};_ag ._cab =int (_dg &_e .MaxInt32 );return nil ;};func (_ccfd *GenericRegion )parseHeader ()(_cdg error ){_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052I\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0050\u0061\u0072s\u0069\u006e\u0067\u0048\u0065\u0061\u0064e\u0072\u002e\u002e\u002e");
defer func (){if _cdg !=nil {_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e]\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065r\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0077\u0069th\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u0025\u0076",_cdg );
}else {_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049C\u002d\u0052\u0045G\u0049\u004f\u004e]\u0020\u0050a\u0072\u0073\u0069\u006e\u0067\u0048e\u0061de\u0072\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0053\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079\u002e\u002e\u002e");
};}();var (_cga int ;_agbb uint64 ;);if _cdg =_ccfd .RegionSegment .parseHeader ();_cdg !=nil {return _cdg ;};if _ ,_cdg =_ccfd ._gff .ReadBits (3);_cdg !=nil {return _cdg ;};_cga ,_cdg =_ccfd ._gff .ReadBit ();if _cdg !=nil {return _cdg ;};if _cga ==1{_ccfd .UseExtTemplates =true ;
};_cga ,_cdg =_ccfd ._gff .ReadBit ();if _cdg !=nil {return _cdg ;};if _cga ==1{_ccfd .IsTPGDon =true ;};_agbb ,_cdg =_ccfd ._gff .ReadBits (2);if _cdg !=nil {return _cdg ;};_ccfd .GBTemplate =byte (_agbb &0xf);_cga ,_cdg =_ccfd ._gff .ReadBit ();if _cdg !=nil {return _cdg ;
};if _cga ==1{_ccfd .IsMMREncoded =true ;};if !_ccfd .IsMMREncoded {_ade :=1;if _ccfd .GBTemplate ==0{_ade =4;if _ccfd .UseExtTemplates {_ade =12;};};if _cdg =_ccfd .readGBAtPixels (_ade );_cdg !=nil {return _cdg ;};};if _cdg =_ccfd .computeSegmentDataStructure ();
_cdg !=nil {return _cdg ;};_cb .Log .Trace ("\u0025\u0073",_ccfd );return nil ;};func (_afba *TextRegion )computeSymbolCodeLength ()error {if _afba .IsHuffmanEncoded {return _afba .symbolIDCodeLengths ();};_afba ._afdda =int8 (_e .Ceil (_e .Log (float64 (_afba .NumberOfSymbols ))/_e .Log (2)));
return nil ;};func (_ggc *TextRegion )blit (_edddb *_eb .Bitmap ,_fgf int64 )error {if _ggc .IsTransposed ==0&&(_ggc .ReferenceCorner ==2||_ggc .ReferenceCorner ==3){_ggc ._ggbc +=int64 (_edddb .Width -1);}else if _ggc .IsTransposed ==1&&(_ggc .ReferenceCorner ==0||_ggc .ReferenceCorner ==2){_ggc ._ggbc +=int64 (_edddb .Height -1);
};_dbcf :=_ggc ._ggbc ;if _ggc .IsTransposed ==1{_dbcf ,_fgf =_fgf ,_dbcf ;};switch _ggc .ReferenceCorner {case 0:_fgf -=int64 (_edddb .Height -1);case 2:_fgf -=int64 (_edddb .Height -1);_dbcf -=int64 (_edddb .Width -1);case 3:_dbcf -=int64 (_edddb .Width -1);
};_fgcgg :=_eb .Blit (_edddb ,_ggc .RegionBitmap ,int (_dbcf ),int (_fgf ),_ggc .CombinationOperator );if _fgcgg !=nil {return _fgcgg ;};if _ggc .IsTransposed ==0&&(_ggc .ReferenceCorner ==0||_ggc .ReferenceCorner ==1){_ggc ._ggbc +=int64 (_edddb .Width -1);
};if _ggc .IsTransposed ==1&&(_ggc .ReferenceCorner ==1||_ggc .ReferenceCorner ==3){_ggc ._ggbc +=int64 (_edddb .Height -1);};return nil ;};func (_cbe *GenericRegion )decodeLine (_dba ,_baba ,_fabc int )error {const _gcab ="\u0064\u0065\u0063\u006f\u0064\u0065\u004c\u0069\u006e\u0065";
_fcg :=_cbe .Bitmap .GetByteIndex (0,_dba );_gdbe :=_fcg -_cbe .Bitmap .RowStride ;switch _cbe .GBTemplate {case 0:if !_cbe .UseExtTemplates {return _cbe .decodeTemplate0a (_dba ,_baba ,_fabc ,_fcg ,_gdbe );};return _cbe .decodeTemplate0b (_dba ,_baba ,_fabc ,_fcg ,_gdbe );
case 1:return _cbe .decodeTemplate1 (_dba ,_baba ,_fabc ,_fcg ,_gdbe );case 2:return _cbe .decodeTemplate2 (_dba ,_baba ,_fabc ,_fcg ,_gdbe );case 3:return _cbe .decodeTemplate3 (_dba ,_baba ,_fabc ,_fcg ,_gdbe );};return _dd .Errorf (_gcab ,"\u0069\u006e\u0076a\u006c\u0069\u0064\u0020G\u0042\u0054\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u003a\u0020\u0025\u0064",_cbe .GBTemplate );
};func (_bcabg *SymbolDictionary )encodeRefinementATFlags (_egd _ad .BinaryWriter )(_cggb int ,_cagb error ){const _baaga ="\u0065\u006e\u0063od\u0065\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if !_bcabg .UseRefinementAggregation ||_bcabg .SdrTemplate !=0{return 0,nil ;};for _fgac :=0;_fgac < 2;_fgac ++{if _cagb =_egd .WriteByte (byte (_bcabg .SdrATX [_fgac ]));_cagb !=nil {return _cggb ,_dd .Wrapf (_cagb ,_baaga ,"\u0053\u0064\u0072\u0041\u0054\u0058\u005b\u0025\u0064\u005d",_fgac );
};_cggb ++;if _cagb =_egd .WriteByte (byte (_bcabg .SdrATY [_fgac ]));_cagb !=nil {return _cggb ,_dd .Wrapf (_cagb ,_baaga ,"\u0053\u0064\u0072\u0041\u0054\u0059\u005b\u0025\u0064\u005d",_fgac );};_cggb ++;};return _cggb ,nil ;};func (_cgfg *GenericRegion )overrideAtTemplate0a (_beag ,_gad ,_edfe ,_eddg ,_cfgf ,_aedfe int )int {if _cgfg .GBAtOverride [0]{_beag &=0xFFEF;
if _cgfg .GBAtY [0]==0&&_cgfg .GBAtX [0]>=-int8 (_cfgf ){_beag |=(_eddg >>uint (int8 (_aedfe )-_cgfg .GBAtX [0]&0x1))<<4;}else {_beag |=int (_cgfg .getPixel (_gad +int (_cgfg .GBAtX [0]),_edfe +int (_cgfg .GBAtY [0])))<<4;};};if _cgfg .GBAtOverride [1]{_beag &=0xFBFF;
if _cgfg .GBAtY [1]==0&&_cgfg .GBAtX [1]>=-int8 (_cfgf ){_beag |=(_eddg >>uint (int8 (_aedfe )-_cgfg .GBAtX [1]&0x1))<<10;}else {_beag |=int (_cgfg .getPixel (_gad +int (_cgfg .GBAtX [1]),_edfe +int (_cgfg .GBAtY [1])))<<10;};};if _cgfg .GBAtOverride [2]{_beag &=0xF7FF;
if _cgfg .GBAtY [2]==0&&_cgfg .GBAtX [2]>=-int8 (_cfgf ){_beag |=(_eddg >>uint (int8 (_aedfe )-_cgfg .GBAtX [2]&0x1))<<11;}else {_beag |=int (_cgfg .getPixel (_gad +int (_cgfg .GBAtX [2]),_edfe +int (_cgfg .GBAtY [2])))<<11;};};if _cgfg .GBAtOverride [3]{_beag &=0x7FFF;
if _cgfg .GBAtY [3]==0&&_cgfg .GBAtX [3]>=-int8 (_cfgf ){_beag |=(_eddg >>uint (int8 (_aedfe )-_cgfg .GBAtX [3]&0x1))<<15;}else {_beag |=int (_cgfg .getPixel (_gad +int (_cgfg .GBAtX [3]),_edfe +int (_cgfg .GBAtY [3])))<<15;};};return _beag ;};func (_abca *SymbolDictionary )getSymbol (_bfag int )(*_eb .Bitmap ,error ){const _afcdd ="\u0067e\u0074\u0053\u0079\u006d\u0062\u006fl";
_aabe ,_beed :=_abca ._abaf .GetBitmap (_abca ._deaf [_bfag ]);if _beed !=nil {return nil ,_dd .Wrap (_beed ,_afcdd ,"\u0063\u0061n\u0027\u0074\u0020g\u0065\u0074\u0020\u0073\u0079\u006d\u0062\u006f\u006c");};return _aabe ,nil ;};func (_febg *Header )readSegmentDataLength (_bee _ad .StreamReader )(_dagc error ){_febg .SegmentDataLength ,_dagc =_bee .ReadBits (32);
if _dagc !=nil {return _dagc ;};_febg .SegmentDataLength &=_e .MaxInt32 ;return nil ;};func (_eea *GenericRefinementRegion )setParameters (_eaf *_cg .DecoderStats ,_cdc *_cg .Decoder ,_gfb int8 ,_gaea ,_fgc uint32 ,_gec *_eb .Bitmap ,_geb ,_gge int32 ,_fac bool ,_bbd []int8 ,_fab []int8 ){_cb .Log .Trace ("\u005b\u0047\u0045NE\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052E\u0047I\u004fN\u005d \u0073\u0065\u0074\u0050\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");
if _eaf !=nil {_eea ._ada =_eaf ;};if _cdc !=nil {_eea ._ecd =_cdc ;};_eea .TemplateID =_gfb ;_eea .RegionInfo .BitmapWidth =_gaea ;_eea .RegionInfo .BitmapHeight =_fgc ;_eea .ReferenceBitmap =_gec ;_eea .ReferenceDX =_geb ;_eea .ReferenceDY =_gge ;_eea .IsTPGROn =_fac ;
_eea .GrAtX =_bbd ;_eea .GrAtY =_fab ;_eea .RegionBitmap =nil ;_cb .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073 f\u0069\u006ei\u0073\u0068\u0065\u0064\u002e\u0020\u0025\u0073",_eea );
};type GenericRegion struct{_gff _ad .StreamReader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;UseExtTemplates bool ;IsTPGDon bool ;GBTemplate byte ;IsMMREncoded bool ;UseMMR bool ;
GBAtX []int8 ;GBAtY []int8 ;GBAtOverride []bool ;_edcf bool ;Bitmap *_eb .Bitmap ;_afcg *_cg .Decoder ;_cedf *_cg .DecoderStats ;_gce *_be .Decoder ;};var _ SegmentEncoder =&GenericRegion {};func (_caaeb *SymbolDictionary )setAtPixels ()error {if _caaeb .IsHuffmanEncoded {return nil ;
};_egdc :=1;if _caaeb .SdTemplate ==0{_egdc =4;};if _cfbf :=_caaeb .readAtPixels (_egdc );_cfbf !=nil {return _cfbf ;};return nil ;};func (_egg *Header )readSegmentPageAssociation (_gfcfe Documenter ,_cffe _ad .StreamReader ,_gaeb uint64 ,_deee ...int )(_cdfgg error ){const _cacb ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074P\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061t\u0069\u006f\u006e";
if !_egg .PageAssociationFieldSize {_caae ,_afac :=_cffe .ReadBits (8);if _afac !=nil {return _dd .Wrap (_afac ,_cacb ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_egg .PageAssociation =int (_caae &0xFF);}else {_bead ,_ccbca :=_cffe .ReadBits (32);
if _ccbca !=nil {return _dd .Wrap (_ccbca ,_cacb ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_egg .PageAssociation =int (_bead &_e .MaxInt32 );};if _gaeb ==0{return nil ;};if _egg .PageAssociation !=0{_babe ,_dce :=_gfcfe .GetPage (_egg .PageAssociation );
if _dce !=nil {return _dd .Wrap (_dce ,_cacb ,"\u0061s\u0073\u006f\u0063\u0069a\u0074\u0065\u0064\u0020\u0070a\u0067e\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006ed");};var _fegfd int ;for _eabd :=uint64 (0);_eabd < _gaeb ;_eabd ++{_fegfd =_deee [_eabd ];
_egg .RTSegments [_eabd ],_dce =_babe .GetSegment (_fegfd );if _dce !=nil {var _cbgd error ;_egg .RTSegments [_eabd ],_cbgd =_gfcfe .GetGlobalSegment (_fegfd );if _cbgd !=nil {return _dd .Wrapf (_dce ,_cacb ,"\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020s\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064\u0020\u0061\u0074\u0020pa\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0072\u0020\u0069\u006e\u0020\u0067\u006c\u006f\u0062\u0061\u006c\u0073",_egg .PageAssociation );
};};};return nil ;};for _ffge :=uint64 (0);_ffge < _gaeb ;_ffge ++{_egg .RTSegments [_ffge ],_cdfgg =_gfcfe .GetGlobalSegment (_deee [_ffge ]);if _cdfgg !=nil {return _dd .Wrapf (_cdfgg ,_cacb ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u003a\u0020\u0027\u0025d\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064",_deee [_ffge ]);
};};return nil ;};type TableSegment struct{_acabe _ad .StreamReader ;_fede int32 ;_accc int32 ;_egfd int32 ;_edgf int32 ;_gaec int32 ;};func (_eab *template1 )setIndex (_aegd *_cg .DecoderStats ){_aegd .SetIndex (0x080)};func (_fbfc *PageInformationSegment )Size ()int {return 19};
type SymbolDictionary struct{_ecgb _ad .StreamReader ;SdrTemplate int8 ;SdTemplate int8 ;_efac bool ;_faaa bool ;SdHuffAggInstanceSelection bool ;SdHuffBMSizeSelection int8 ;SdHuffDecodeWidthSelection int8 ;SdHuffDecodeHeightSelection int8 ;UseRefinementAggregation bool ;
IsHuffmanEncoded bool ;SdATX []int8 ;SdATY []int8 ;SdrATX []int8 ;SdrATY []int8 ;NumberOfExportedSymbols uint32 ;NumberOfNewSymbols uint32 ;Header *Header ;_dgbd uint32 ;_fced []*_eb .Bitmap ;_cdgb uint32 ;_gde []*_eb .Bitmap ;_aeeg _ed .Tabler ;_adbe _ed .Tabler ;
_eafb _ed .Tabler ;_gfeda _ed .Tabler ;_caaea []*_eb .Bitmap ;_afdb []*_eb .Bitmap ;_abef *_cg .Decoder ;_adce *TextRegion ;_gcag *GenericRegion ;_gafd *GenericRefinementRegion ;_cccc *_cg .DecoderStats ;_ffeb *_cg .DecoderStats ;_dbfb *_cg .DecoderStats ;
_deefa *_cg .DecoderStats ;_ebfe *_cg .DecoderStats ;_gccb *_cg .DecoderStats ;_edee *_cg .DecoderStats ;_efec *_cg .DecoderStats ;_gfbe *_cg .DecoderStats ;_gbbc int8 ;_abaf *_eb .Bitmaps ;_deaf []int ;_cfdf map[int ]int ;_bebc bool ;};func (_gdfc *PatternDictionary )parseHeader ()error {_cb .Log .Trace ("\u005b\u0050\u0041\u0054\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054I\u004f\u004e\u0041\u0052\u0059\u005d[\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d\u0020b\u0065\u0067\u0069\u006e");
defer func (){_cb .Log .Trace ("\u005b\u0050\u0041T\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u005b\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_ ,_gbgaf :=_gdfc ._deda .ReadBits (5);if _gbgaf !=nil {return _gbgaf ;};if _gbgaf =_gdfc .readTemplate ();_gbgaf !=nil {return _gbgaf ;};if _gbgaf =_gdfc .readIsMMREncoded ();_gbgaf !=nil {return _gbgaf ;};if _gbgaf =_gdfc .readPatternWidthAndHeight ();
_gbgaf !=nil {return _gbgaf ;};if _gbgaf =_gdfc .readGrayMax ();_gbgaf !=nil {return _gbgaf ;};if _gbgaf =_gdfc .computeSegmentDataStructure ();_gbgaf !=nil {return _gbgaf ;};return _gdfc .checkInput ();};func (_afc *GenericRefinementRegion )overrideAtTemplate0 (_agbf ,_bdad ,_ggd ,_ccd ,_aed int )int {if _afc ._bc [0]{_agbf &=0xfff7;
if _afc .GrAtY [0]==0&&int (_afc .GrAtX [0])>=-_aed {_agbf |=(_ccd >>uint (7-(_aed +int (_afc .GrAtX [0])))&0x1)<<3;}else {_agbf |=_afc .getPixel (_afc .RegionBitmap ,_bdad +int (_afc .GrAtX [0]),_ggd +int (_afc .GrAtY [0]))<<3;};};if _afc ._bc [1]{_agbf &=0xefff;
if _afc .GrAtY [1]==0&&int (_afc .GrAtX [1])>=-_aed {_agbf |=(_ccd >>uint (7-(_aed +int (_afc .GrAtX [1])))&0x1)<<12;}else {_agbf |=_afc .getPixel (_afc .ReferenceBitmap ,_bdad +int (_afc .GrAtX [1]),_ggd +int (_afc .GrAtY [1]));};};return _agbf ;};type Documenter interface{GetPage (int )(Pager ,error );
GetGlobalSegment (int )(*Header ,error );};func (_affc *SymbolDictionary )addSymbol (_dacd Regioner )error {_bcbaf ,_ddf :=_dacd .GetRegionBitmap ();if _ddf !=nil {return _ddf ;};_affc ._gde [_affc ._cdgb ]=_bcbaf ;_affc ._afdb =append (_affc ._afdb ,_bcbaf );
_cb .Log .Trace ("\u005b\u0053YM\u0042\u004f\u004c \u0044\u0049\u0043\u0054ION\u0041RY\u005d\u0020\u0041\u0064\u0064\u0065\u0064 s\u0079\u006d\u0062\u006f\u006c\u003a\u0020%\u0073",_bcbaf );return nil ;};func (_fcef *RegionSegment )String ()string {_bfab :=&_f .Builder {};
_bfab .WriteString ("\u0009[\u0052E\u0047\u0049\u004f\u004e\u0020S\u0045\u0047M\u0045\u004e\u0054\u005d\u000a");_bfab .WriteString (_ff .Sprintf ("\t\u0009\u002d\u0020\u0042\u0069\u0074m\u0061\u0070\u0020\u0028\u0077\u0069d\u0074\u0068\u002c\u0020\u0068\u0065\u0069g\u0068\u0074\u0029\u0020\u005b\u0025\u0064\u0078\u0025\u0064]\u000a",_fcef .BitmapWidth ,_fcef .BitmapHeight ));
_bfab .WriteString (_ff .Sprintf ("\u0009\u0009\u002d\u0020L\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0028\u0078,\u0079)\u003a\u0020\u005b\u0025\u0064\u002c\u0025d\u005d\u000a",_fcef .XLocation ,_fcef .YLocation ));_bfab .WriteString (_ff .Sprintf ("\t\u0009\u002d\u0020\u0043\u006f\u006db\u0069\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0073",_fcef .CombinaionOperator ));
return _bfab .String ();};func (_eggg *TextRegion )InitEncode (globalSymbolsMap ,localSymbolsMap map[int ]int ,comps []int ,inLL *_eb .Points ,symbols *_eb .Bitmaps ,classIDs *_ca .IntSlice ,boxes *_eb .Boxes ,width ,height ,symBits int ){_eggg .RegionInfo =&RegionSegment {BitmapWidth :uint32 (width ),BitmapHeight :uint32 (height )};
_eggg ._fcdc =globalSymbolsMap ;_eggg ._baca =localSymbolsMap ;_eggg ._fggf =comps ;_eggg ._ggbd =inLL ;_eggg ._fdcc =symbols ;_eggg ._dfbg =classIDs ;_eggg ._gbda =boxes ;_eggg ._bafa =symBits ;};func (_fbdfb *TextRegion )decodeRdh ()(int64 ,error ){const _abade ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064h";
if _fbdfb .IsHuffmanEncoded {if _fbdfb .SbHuffRDHeight ==3{if _fbdfb ._acff ==nil {var (_decg int ;_fccb error ;);if _fbdfb .SbHuffFS ==3{_decg ++;};if _fbdfb .SbHuffDS ==3{_decg ++;};if _fbdfb .SbHuffDT ==3{_decg ++;};if _fbdfb .SbHuffRDWidth ==3{_decg ++;
};_fbdfb ._acff ,_fccb =_fbdfb .getUserTable (_decg );if _fccb !=nil {return 0,_dd .Wrap (_fccb ,_abade ,"");};};return _fbdfb ._acff .Decode (_fbdfb ._gbdb );};_afbg ,_bbdb :=_ed .GetStandardTable (14+int (_fbdfb .SbHuffRDHeight ));if _bbdb !=nil {return 0,_dd .Wrap (_bbdb ,_abade ,"");
};return _afbg .Decode (_fbdfb ._gbdb );};_fdfg ,_fggg :=_fbdfb ._ccde .DecodeInt (_fbdfb ._ddcf );if _fggg !=nil {return 0,_dd .Wrap (_fggg ,_abade ,"");};return int64 (_fdfg ),nil ;};type RegionSegment struct{_aaaf _ad .StreamReader ;BitmapWidth uint32 ;
BitmapHeight uint32 ;XLocation uint32 ;YLocation uint32 ;CombinaionOperator _eb .CombinationOperator ;};func (_gbad *GenericRegion )updateOverrideFlags ()error {const _defc ="\u0075\u0070\u0064\u0061te\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _gbad .GBAtX ==nil ||_gbad .GBAtY ==nil {return nil ;};if len (_gbad .GBAtX )!=len (_gbad .GBAtY ){return _dd .Errorf (_defc ,"i\u006eco\u0073i\u0073t\u0065\u006e\u0074\u0020\u0041T\u0020\u0070\u0069x\u0065\u006c\u002e\u0020\u0041m\u006f\u0075\u006et\u0020\u006f\u0066\u0020\u0027\u0078\u0027\u0020\u0070\u0069\u0078e\u006c\u0073\u003a %d\u002c\u0020\u0041\u006d\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0027\u0079\u0027\u0020\u0070\u0069\u0078e\u006cs\u003a\u0020\u0025\u0064",len (_gbad .GBAtX ),len (_gbad .GBAtY ));
};_gbad .GBAtOverride =make ([]bool ,len (_gbad .GBAtX ));switch _gbad .GBTemplate {case 0:if !_gbad .UseExtTemplates {if _gbad .GBAtX [0]!=3||_gbad .GBAtY [0]!=-1{_gbad .setOverrideFlag (0);};if _gbad .GBAtX [1]!=-3||_gbad .GBAtY [1]!=-1{_gbad .setOverrideFlag (1);
};if _gbad .GBAtX [2]!=2||_gbad .GBAtY [2]!=-2{_gbad .setOverrideFlag (2);};if _gbad .GBAtX [3]!=-2||_gbad .GBAtY [3]!=-2{_gbad .setOverrideFlag (3);};}else {if _gbad .GBAtX [0]!=-2||_gbad .GBAtY [0]!=0{_gbad .setOverrideFlag (0);};if _gbad .GBAtX [1]!=0||_gbad .GBAtY [1]!=-2{_gbad .setOverrideFlag (1);
};if _gbad .GBAtX [2]!=-2||_gbad .GBAtY [2]!=-1{_gbad .setOverrideFlag (2);};if _gbad .GBAtX [3]!=-1||_gbad .GBAtY [3]!=-2{_gbad .setOverrideFlag (3);};if _gbad .GBAtX [4]!=1||_gbad .GBAtY [4]!=-2{_gbad .setOverrideFlag (4);};if _gbad .GBAtX [5]!=2||_gbad .GBAtY [5]!=-1{_gbad .setOverrideFlag (5);
};if _gbad .GBAtX [6]!=-3||_gbad .GBAtY [6]!=0{_gbad .setOverrideFlag (6);};if _gbad .GBAtX [7]!=-4||_gbad .GBAtY [7]!=0{_gbad .setOverrideFlag (7);};if _gbad .GBAtX [8]!=2||_gbad .GBAtY [8]!=-2{_gbad .setOverrideFlag (8);};if _gbad .GBAtX [9]!=3||_gbad .GBAtY [9]!=-1{_gbad .setOverrideFlag (9);
};if _gbad .GBAtX [10]!=-2||_gbad .GBAtY [10]!=-2{_gbad .setOverrideFlag (10);};if _gbad .GBAtX [11]!=-3||_gbad .GBAtY [11]!=-1{_gbad .setOverrideFlag (11);};};case 1:if _gbad .GBAtX [0]!=3||_gbad .GBAtY [0]!=-1{_gbad .setOverrideFlag (0);};case 2:if _gbad .GBAtX [0]!=2||_gbad .GBAtY [0]!=-1{_gbad .setOverrideFlag (0);
};case 3:if _gbad .GBAtX [0]!=2||_gbad .GBAtY [0]!=-1{_gbad .setOverrideFlag (0);};};return nil ;};func (_dgbce *SymbolDictionary )decodeRefinedSymbol (_ecdb ,_gagd uint32 )error {var (_edaa int ;_ebb ,_fggd int32 ;);if _dgbce .IsHuffmanEncoded {_babd ,_acad :=_dgbce ._ecgb .ReadBits (byte (_dgbce ._gbbc ));
if _acad !=nil {return _acad ;};_edaa =int (_babd );_eadde ,_acad :=_ed .GetStandardTable (15);if _acad !=nil {return _acad ;};_ccbg ,_acad :=_eadde .Decode (_dgbce ._ecgb );if _acad !=nil {return _acad ;};_ebb =int32 (_ccbg );_ccbg ,_acad =_eadde .Decode (_dgbce ._ecgb );
if _acad !=nil {return _acad ;};_fggd =int32 (_ccbg );_eadde ,_acad =_ed .GetStandardTable (1);if _acad !=nil {return _acad ;};if _ ,_acad =_eadde .Decode (_dgbce ._ecgb );_acad !=nil {return _acad ;};_dgbce ._ecgb .Align ();}else {_egf ,_dfgc :=_dgbce ._abef .DecodeIAID (uint64 (_dgbce ._gbbc ),_dgbce ._gfbe );
if _dfgc !=nil {return _dfgc ;};_edaa =int (_egf );_ebb ,_dfgc =_dgbce ._abef .DecodeInt (_dgbce ._gccb );if _dfgc !=nil {return _dfgc ;};_fggd ,_dfgc =_dgbce ._abef .DecodeInt (_dgbce ._edee );if _dfgc !=nil {return _dfgc ;};};if _aedb :=_dgbce .setSymbolsArray ();
_aedb !=nil {return _aedb ;};_gafa :=_dgbce ._afdb [_edaa ];if _ecbe :=_dgbce .decodeNewSymbols (_ecdb ,_gagd ,_gafa ,_ebb ,_fggd );_ecbe !=nil {return _ecbe ;};if _dgbce .IsHuffmanEncoded {_dgbce ._ecgb .Align ();};return nil ;};func (_aggfb *PageInformationSegment )readWidthAndHeight ()error {_fde ,_efef :=_aggfb ._fga .ReadBits (32);
if _efef !=nil {return _efef ;};_aggfb .PageBMWidth =int (_fde &_e .MaxInt32 );_fde ,_efef =_aggfb ._fga .ReadBits (32);if _efef !=nil {return _efef ;};_aggfb .PageBMHeight =int (_fde &_e .MaxInt32 );return nil ;};type Header struct{SegmentNumber uint32 ;
Type Type ;RetainFlag bool ;PageAssociation int ;PageAssociationFieldSize bool ;RTSegments []*Header ;HeaderLength int64 ;SegmentDataLength uint64 ;SegmentDataStartOffset uint64 ;Reader _ad .StreamReader ;SegmentData Segmenter ;RTSNumbers []int ;RetainBits []uint8 ;
};func (_dbfa *TextRegion )readRegionFlags ()error {var (_dcde int ;_cgacb uint64 ;_adee error ;);_dcde ,_adee =_dbfa ._gbdb .ReadBit ();if _adee !=nil {return _adee ;};_dbfa .SbrTemplate =int8 (_dcde );_cgacb ,_adee =_dbfa ._gbdb .ReadBits (5);if _adee !=nil {return _adee ;
};_dbfa .SbDsOffset =int8 (_cgacb );if _dbfa .SbDsOffset > 0x0f{_dbfa .SbDsOffset -=0x20;};_dcde ,_adee =_dbfa ._gbdb .ReadBit ();if _adee !=nil {return _adee ;};_dbfa .DefaultPixel =int8 (_dcde );_cgacb ,_adee =_dbfa ._gbdb .ReadBits (2);if _adee !=nil {return _adee ;
};_dbfa .CombinationOperator =_eb .CombinationOperator (int (_cgacb )&0x3);_dcde ,_adee =_dbfa ._gbdb .ReadBit ();if _adee !=nil {return _adee ;};_dbfa .IsTransposed =int8 (_dcde );_cgacb ,_adee =_dbfa ._gbdb .ReadBits (2);if _adee !=nil {return _adee ;
};_dbfa .ReferenceCorner =int16 (_cgacb )&0x3;_cgacb ,_adee =_dbfa ._gbdb .ReadBits (2);if _adee !=nil {return _adee ;};_dbfa .LogSBStrips =int16 (_cgacb )&0x3;_dbfa .SbStrips =1<<uint (_dbfa .LogSBStrips );_dcde ,_adee =_dbfa ._gbdb .ReadBit ();if _adee !=nil {return _adee ;
};if _dcde ==1{_dbfa .UseRefinement =true ;};_dcde ,_adee =_dbfa ._gbdb .ReadBit ();if _adee !=nil {return _adee ;};if _dcde ==1{_dbfa .IsHuffmanEncoded =true ;};return nil ;};func (_cadd *TableSegment )HtOOB ()int32 {return _cadd ._fede };type PatternDictionary struct{_deda _ad .StreamReader ;
DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;GBAtX []int8 ;GBAtY []int8 ;IsMMREncoded bool ;HDTemplate byte ;HdpWidth byte ;HdpHeight byte ;Patterns []*_eb .Bitmap ;GrayMax uint32 ;};func (_abeg *Header )writeSegmentDataLength (_bcca _ad .BinaryWriter )(_agdb int ,_abed error ){_efca :=make ([]byte ,4);
_d .BigEndian .PutUint32 (_efca ,uint32 (_abeg .SegmentDataLength ));if _agdb ,_abed =_bcca .Write (_efca );_abed !=nil {return 0,_dd .Wrap (_abed ,"\u0048\u0065a\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u004c\u0065ng\u0074\u0068","");
};return _agdb ,nil ;};func (_dgbc *PatternDictionary )computeSegmentDataStructure ()error {_dgbc .DataOffset =_dgbc ._deda .StreamPosition ();_dgbc .DataHeaderLength =_dgbc .DataOffset -_dgbc .DataHeaderOffset ;_dgbc .DataLength =int64 (_dgbc ._deda .Length ())-_dgbc .DataHeaderLength ;
return nil ;};func (_cgd *GenericRefinementRegion )parseHeader ()(_gca error ){_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072s\u0069\u006e\u0067\u0020\u0048e\u0061\u0064e\u0072\u002e\u002e\u002e");
_cddg :=_ef .Now ();defer func (){if _gca ==nil {_cb .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045G\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020h\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0069\u006e\u0069\u0073\u0068id\u0020\u0069\u006e\u003a\u0020\u0025\u0064\u0020\u006e\u0073",_ef .Since (_cddg ).Nanoseconds ());
}else {_cb .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0073",_gca );
};}();if _gca =_cgd .RegionInfo .parseHeader ();_gca !=nil {return _gca ;};_ ,_gca =_cgd ._eg .ReadBits (6);if _gca !=nil {return _gca ;};_cgd .IsTPGROn ,_gca =_cgd ._eg .ReadBool ();if _gca !=nil {return _gca ;};var _adc int ;_adc ,_gca =_cgd ._eg .ReadBit ();
if _gca !=nil {return _gca ;};_cgd .TemplateID =int8 (_adc );switch _cgd .TemplateID {case 0:_cgd .Template =_cgd ._fd ;if _gca =_cgd .readAtPixels ();_gca !=nil {return ;};case 1:_cgd .Template =_cgd ._ga ;};return nil ;};func (_acee *TextRegion )readUseRefinement ()error {if !_acee .UseRefinement ||_acee .SbrTemplate !=0{return nil ;
};var (_gaab byte ;_bbga error ;);_acee .SbrATX =make ([]int8 ,2);_acee .SbrATY =make ([]int8 ,2);_gaab ,_bbga =_acee ._gbdb .ReadByte ();if _bbga !=nil {return _bbga ;};_acee .SbrATX [0]=int8 (_gaab );_gaab ,_bbga =_acee ._gbdb .ReadByte ();if _bbga !=nil {return _bbga ;
};_acee .SbrATY [0]=int8 (_gaab );_gaab ,_bbga =_acee ._gbdb .ReadByte ();if _bbga !=nil {return _bbga ;};_acee .SbrATX [1]=int8 (_gaab );_gaab ,_bbga =_acee ._gbdb .ReadByte ();if _bbga !=nil {return _bbga ;};_acee .SbrATY [1]=int8 (_gaab );return nil ;
};func (_efab *TextRegion )Encode (w _ad .BinaryWriter )(_gfgd int ,_bfeg error ){const _dcag ="\u0054\u0065\u0078\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u002e\u0045n\u0063\u006f\u0064\u0065";if _gfgd ,_bfeg =_efab .RegionInfo .Encode (w );_bfeg !=nil {return _gfgd ,_dd .Wrap (_bfeg ,_dcag ,"");
};var _aefg int ;if _aefg ,_bfeg =_efab .encodeFlags (w );_bfeg !=nil {return _gfgd ,_dd .Wrap (_bfeg ,_dcag ,"");};_gfgd +=_aefg ;if _aefg ,_bfeg =_efab .encodeSymbols (w );_bfeg !=nil {return _gfgd ,_dd .Wrap (_bfeg ,_dcag ,"");};_gfgd +=_aefg ;return _gfgd ,nil ;
};func (_ecaa Type )String ()string {switch _ecaa {case TSymbolDictionary :return "\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079";case TIntermediateTextRegion :return "\u0049n\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020T\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateTextRegion :return "I\u006d\u006d\u0065\u0064ia\u0074e\u0020\u0054\u0065\u0078\u0074 \u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateLosslessTextRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020L\u006f\u0073\u0073\u006c\u0065\u0073\u0073 \u0054\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TPatternDictionary :return "\u0050a\u0074t\u0065\u0072\u006e\u0020\u0044i\u0063\u0074i\u006f\u006e\u0061\u0072\u0079";case TIntermediateHalftoneRegion :return "\u0049\u006e\u0074\u0065r\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0048\u0061l\u0066t\u006f\u006e\u0065\u0020\u0052\u0065\u0067i\u006f\u006e";
case TImmediateHalftoneRegion :return "\u0049m\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u0048\u0061l\u0066t\u006fn\u0065\u0020\u0052\u0065\u0067\u0069\u006fn";case TImmediateLosslessHalftoneRegion :return "\u0049\u006d\u006ded\u0069\u0061\u0074\u0065\u0020\u004c\u006f\u0073\u0073l\u0065s\u0073 \u0048a\u006c\u0066\u0074\u006f\u006e\u0065\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TIntermediateGenericRegion :return "I\u006e\u0074\u0065\u0072\u006d\u0065d\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020R\u0065g\u0069\u006f\u006e";case TImmediateGenericRegion :return "\u0049m\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006ee\u0072\u0069\u0063\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateLosslessGenericRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u004c\u006f\u0073\u0073\u006c\u0065\u0073\u0073\u0020\u0047e\u006e\u0065\u0072\u0069\u0063\u0020\u0052e\u0067\u0069\u006f\u006e";case TIntermediateGenericRefinementRegion :return "\u0049\u006e\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0020\u0052\u0065\u0066i\u006e\u0065\u006d\u0065\u006et\u0020\u0052e\u0067\u0069\u006f\u006e";
case TImmediateGenericRefinementRegion :return "I\u006d\u006d\u0065\u0064\u0069\u0061t\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020\u0052\u0065\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0067\u0069o\u006e";case TImmediateLosslessGenericRefinementRegion :return "\u0049m\u006d\u0065d\u0069\u0061\u0074\u0065 \u004c\u006f\u0073s\u006c\u0065\u0073\u0073\u0020\u0047\u0065\u006e\u0065ri\u0063\u0020\u0052e\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020R\u0065\u0067i\u006f\u006e";
case TPageInformation :return "\u0050\u0061g\u0065\u0020\u0049n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e";case TEndOfPage :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0050\u0061\u0067\u0065";case TEndOfStrip :return "\u0045\u006e\u0064 \u004f\u0066\u0020\u0053\u0074\u0072\u0069\u0070";
case TEndOfFile :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0046\u0069\u006c\u0065";case TProfiles :return "\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0073";case TTables :return "\u0054\u0061\u0062\u006c\u0065\u0073";case TExtension :return "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn";
case TBitmap :return "\u0042\u0069\u0074\u006d\u0061\u0070";};return "I\u006ev\u0061\u006c\u0069\u0064\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0020Ki\u006e\u0064";};func (_adbg *HalftoneRegion )GetPatterns ()([]*_eb .Bitmap ,error ){var (_cgdd []*_eb .Bitmap ;
_aefb error ;);for _ ,_acg :=range _adbg ._aeff .RTSegments {var _adfe Segmenter ;_adfe ,_aefb =_acg .GetSegmentData ();if _aefb !=nil {_cb .Log .Debug ("\u0047e\u0074\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061 \u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025v",_aefb );
return nil ,_aefb ;};_efb ,_fbec :=_adfe .(*PatternDictionary );if !_fbec {_aefb =_ff .Errorf ("\u0072e\u006c\u0061t\u0065\u0064\u0020\u0073e\u0067\u006d\u0065n\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0070at\u0074\u0065\u0072n\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u003a \u0025\u0054",_adfe );
return nil ,_aefb ;};var _gfg []*_eb .Bitmap ;_gfg ,_aefb =_efb .GetDictionary ();if _aefb !=nil {_cb .Log .Debug ("\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_aefb );
return nil ,_aefb ;};_cgdd =append (_cgdd ,_gfg ...);};return _cgdd ,nil ;};func (_bfac *Header )writeReferredToCount (_dfe _ad .BinaryWriter )(_dbfe int ,_gacbe error ){const _dgb ="w\u0072i\u0074\u0065\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0043ou\u006e\u0074";
_bfac .RTSNumbers =make ([]int ,len (_bfac .RTSegments ));for _fcd ,_cebe :=range _bfac .RTSegments {_bfac .RTSNumbers [_fcd ]=int (_cebe .SegmentNumber );};if len (_bfac .RTSNumbers )<=4{var _gcfe byte ;if len (_bfac .RetainBits )>=1{_gcfe =_bfac .RetainBits [0];
};_gcfe |=byte (len (_bfac .RTSNumbers ))<<5;if _gacbe =_dfe .WriteByte (_gcfe );_gacbe !=nil {return 0,_dd .Wrap (_gacbe ,_dgb ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return 1,nil ;};_bgcc :=uint32 (len (_bfac .RTSNumbers ));
_ebac :=make ([]byte ,4+_ca .Ceil (len (_bfac .RTSNumbers )+1,8));_bgcc |=0x7<<29;_d .BigEndian .PutUint32 (_ebac ,_bgcc );copy (_ebac [1:],_bfac .RetainBits );_dbfe ,_gacbe =_dfe .Write (_ebac );if _gacbe !=nil {return 0,_dd .Wrap (_gacbe ,_dgb ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};return _dbfe ,nil ;};func (_eddcb *TextRegion )decodeDfs ()(int64 ,error ){if _eddcb .IsHuffmanEncoded {if _eddcb .SbHuffFS ==3{if _eddcb ._fcdgc ==nil {var _acdg error ;_eddcb ._fcdgc ,_acdg =_eddcb .getUserTable (0);if _acdg !=nil {return 0,_acdg ;
};};return _eddcb ._fcdgc .Decode (_eddcb ._gbdb );};_fcfab ,_aeaf :=_ed .GetStandardTable (6+int (_eddcb .SbHuffFS ));if _aeaf !=nil {return 0,_aeaf ;};return _fcfab .Decode (_eddcb ._gbdb );};_ddcc ,_dada :=_eddcb ._ccde .DecodeInt (_eddcb ._afag );if _dada !=nil {return 0,_dada ;
};return int64 (_ddcc ),nil ;};func (_bgeg *TableSegment )HtHigh ()int32 {return _bgeg ._gaec };func (_dfdd *TableSegment )StreamReader ()_ad .StreamReader {return _dfdd ._acabe };func (_faged *TextRegion )decodeDT ()(_bdgbd int64 ,_ecea error ){if _faged .IsHuffmanEncoded {if _faged .SbHuffDT ==3{_bdgbd ,_ecea =_faged ._ecgbg .Decode (_faged ._gbdb );
if _ecea !=nil {return 0,_ecea ;};}else {var _edgc _ed .Tabler ;_edgc ,_ecea =_ed .GetStandardTable (11+int (_faged .SbHuffDT ));if _ecea !=nil {return 0,_ecea ;};_bdgbd ,_ecea =_edgc .Decode (_faged ._gbdb );if _ecea !=nil {return 0,_ecea ;};};}else {var _deefaa int32 ;
_deefaa ,_ecea =_faged ._ccde .DecodeInt (_faged ._aeba );if _ecea !=nil {return ;};_bdgbd =int64 (_deefaa );};_bdgbd *=int64 (_faged .SbStrips );return _bdgbd ,nil ;};func (_fcfd *Header )writeSegmentPageAssociation (_bcg _ad .BinaryWriter )(_deaa int ,_efcg error ){const _ccfe ="w\u0072\u0069\u0074\u0065\u0053\u0065g\u006d\u0065\u006e\u0074\u0050\u0061\u0067\u0065\u0041s\u0073\u006f\u0063i\u0061t\u0069\u006f\u006e";
if _fcfd .pageSize ()!=4{if _efcg =_bcg .WriteByte (byte (_fcfd .PageAssociation ));_efcg !=nil {return 0,_dd .Wrap (_efcg ,_ccfe ,"\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0021\u003d\u0020\u0034");};return 1,nil ;};_eeeg :=make ([]byte ,4);
_d .BigEndian .PutUint32 (_eeeg ,uint32 (_fcfd .PageAssociation ));if _deaa ,_efcg =_bcg .Write (_eeeg );_efcg !=nil {return 0,_dd .Wrap (_efcg ,_ccfe ,"\u0034 \u0062y\u0074\u0065\u0020\u0070\u0061g\u0065\u0020n\u0075\u006d\u0062\u0065\u0072");};return _deaa ,nil ;
};func NewRegionSegment (r _ad .StreamReader )*RegionSegment {return &RegionSegment {_aaaf :r }};func (_aafdg *TextRegion )decodeCurrentT ()(int64 ,error ){if _aafdg .SbStrips !=1{if _aafdg .IsHuffmanEncoded {_acgf ,_agag :=_aafdg ._gbdb .ReadBits (byte (_aafdg .LogSBStrips ));
return int64 (_acgf ),_agag ;};_fcedg ,_fbde :=_aafdg ._ccde .DecodeInt (_aafdg ._cbcd );if _fbde !=nil {return 0,_fbde ;};return int64 (_fcedg ),nil ;};return 0,nil ;};func (_cgdb *SymbolDictionary )readNumberOfNewSymbols ()error {_dacf ,_dbgd :=_cgdb ._ecgb .ReadBits (32);
if _dbgd !=nil {return _dbgd ;};_cgdb .NumberOfNewSymbols =uint32 (_dacf &_e .MaxUint32 );return nil ;};func (_cae *GenericRegion )decodeTemplate0a (_deg ,_ede ,_eec int ,_dffc ,_ebdg int )(_efad error ){const _cgae ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0061";
var (_bebb ,_deb int ;_ecfd ,_ggde int ;_eba byte ;_efd int ;);if _deg >=1{_eba ,_efad =_cae .Bitmap .GetByte (_ebdg );if _efad !=nil {return _dd .Wrap (_efad ,_cgae ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_ecfd =int (_eba );};if _deg >=2{_eba ,_efad =_cae .Bitmap .GetByte (_ebdg -_cae .Bitmap .RowStride );
if _efad !=nil {return _dd .Wrap (_efad ,_cgae ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_ggde =int (_eba )<<6;};_bebb =(_ecfd &0xf0)|(_ggde &0x3800);for _baff :=0;_baff < _eec ;_baff =_efd {var (_bec byte ;_add int ;);_efd =_baff +8;if _gfca :=_ede -_baff ;
_gfca > 8{_add =8;}else {_add =_gfca ;};if _deg > 0{_ecfd <<=8;if _efd < _ede {_eba ,_efad =_cae .Bitmap .GetByte (_ebdg +1);if _efad !=nil {return _dd .Wrap (_efad ,_cgae ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_ecfd |=int (_eba );};};if _deg > 1{_dace :=_ebdg -_cae .Bitmap .RowStride +1;
_ggde <<=8;if _efd < _ede {_eba ,_efad =_cae .Bitmap .GetByte (_dace );if _efad !=nil {return _dd .Wrap (_efad ,_cgae ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_ggde |=int (_eba )<<6;}else {_ggde |=0;};};for _eee :=0;_eee < _add ;_eee ++{_gggg :=uint (7-_eee );
if _cae ._edcf {_deb =_cae .overrideAtTemplate0a (_bebb ,_baff +_eee ,_deg ,int (_bec ),_eee ,int (_gggg ));_cae ._cedf .SetIndex (int32 (_deb ));}else {_cae ._cedf .SetIndex (int32 (_bebb ));};var _fage int ;_fage ,_efad =_cae ._afcg .DecodeBit (_cae ._cedf );
if _efad !=nil {return _dd .Wrap (_efad ,_cgae ,"");};_bec |=byte (_fage )<<_gggg ;_bebb =((_bebb &0x7bf7)<<1)|_fage |((_ecfd >>_gggg )&0x10)|((_ggde >>_gggg )&0x800);};if _dead :=_cae .Bitmap .SetByte (_dffc ,_bec );_dead !=nil {return _dd .Wrap (_dead ,_cgae ,"");
};_dffc ++;_ebdg ++;};return nil ;};func (_ecba *Header )CleanSegmentData (){if _ecba .SegmentData !=nil {_ecba .SegmentData =nil ;};};func (_bebbc *GenericRegion )overrideAtTemplate2 (_bcee ,_cfb ,_dfdg ,_gdfb ,_aggb int )int {_bcee &=0x3FB;if _bebbc .GBAtY [0]==0&&_bebbc .GBAtX [0]>=-int8 (_aggb ){_bcee |=(_gdfb >>uint (7-(int8 (_aggb )+_bebbc .GBAtX [0]))&0x1)<<2;
}else {_bcee |=int (_bebbc .getPixel (_cfb +int (_bebbc .GBAtX [0]),_dfdg +int (_bebbc .GBAtY [0])))<<2;};return _bcee ;};func (_cdcc *GenericRegion )computeSegmentDataStructure ()error {_cdcc .DataOffset =_cdcc ._gff .StreamPosition ();_cdcc .DataHeaderLength =_cdcc .DataOffset -_cdcc .DataHeaderOffset ;
_cdcc .DataLength =int64 (_cdcc ._gff .Length ())-_cdcc .DataHeaderLength ;return nil ;};func (_bdeg *GenericRegion )Init (h *Header ,r _ad .StreamReader )error {_bdeg .RegionSegment =NewRegionSegment (r );_bdeg ._gff =r ;return _bdeg .parseHeader ();};
func (_bgbeg *TextRegion )createRegionBitmap ()error {_bgbeg .RegionBitmap =_eb .New (int (_bgbeg .RegionInfo .BitmapWidth ),int (_bgbeg .RegionInfo .BitmapHeight ));if _bgbeg .DefaultPixel !=0{_bgbeg .RegionBitmap .SetDefaultPixel ();};return nil ;};func (_gfdd *GenericRegion )decodeTemplate3 (_ccb ,_dfcb ,_caca int ,_bacd ,_ccbc int )(_cbfa error ){const _acf ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0033";
var (_gac ,_ggdd int ;_gdbd int ;_aff byte ;_gfdc ,_bdeb int ;);if _ccb >=1{_aff ,_cbfa =_gfdd .Bitmap .GetByte (_ccbc );if _cbfa !=nil {return _dd .Wrap (_cbfa ,_acf ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_gdbd =int (_aff );};_gac =(_gdbd >>1)&0x70;
for _gdf :=0;_gdf < _caca ;_gdf =_gfdc {var (_eafd byte ;_ebcc int ;);_gfdc =_gdf +8;if _cfd :=_dfcb -_gdf ;_cfd > 8{_ebcc =8;}else {_ebcc =_cfd ;};if _ccb >=1{_gdbd <<=8;if _gfdc < _dfcb {_aff ,_cbfa =_gfdd .Bitmap .GetByte (_ccbc +1);if _cbfa !=nil {return _dd .Wrap (_cbfa ,_acf ,"\u0069\u006e\u006e\u0065\u0072\u0020\u002d\u0020\u006c\u0069\u006e\u0065 \u003e\u003d\u0020\u0031");
};_gdbd |=int (_aff );};};for _cca :=0;_cca < _ebcc ;_cca ++{if _gfdd ._edcf {_ggdd =_gfdd .overrideAtTemplate3 (_gac ,_gdf +_cca ,_ccb ,int (_eafd ),_cca );_gfdd ._cedf .SetIndex (int32 (_ggdd ));}else {_gfdd ._cedf .SetIndex (int32 (_gac ));};_bdeb ,_cbfa =_gfdd ._afcg .DecodeBit (_gfdd ._cedf );
if _cbfa !=nil {return _dd .Wrap (_cbfa ,_acf ,"");};_eafd |=byte (_bdeb )<<byte (7-_cca );_gac =((_gac &0x1f7)<<1)|_bdeb |((_gdbd >>uint (8-_cca ))&0x010);};if _gggd :=_gfdd .Bitmap .SetByte (_bacd ,_eafd );_gggd !=nil {return _dd .Wrap (_gggd ,_acf ,"");
};_bacd ++;_ccbc ++;};return nil ;};func (_daee *TextRegion )decodeIb (_ccaad ,_gdga int64 )(*_eb .Bitmap ,error ){const _feaf ="\u0064\u0065\u0063\u006f\u0064\u0065\u0049\u0062";var (_cfef error ;_effb *_eb .Bitmap ;);if _ccaad ==0{if int (_gdga )> len (_daee .Symbols )-1{return nil ,_dd .Error (_feaf ,"\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0049\u0042\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0020\u0069\u006e\u0064\u0065x\u0020\u006f\u0075\u0074\u0020o\u0066\u0020r\u0061\u006e\u0067\u0065");
};return _daee .Symbols [int (_gdga )],nil ;};var _afbf ,_cbea ,_gggf ,_ecgbdf int64 ;_afbf ,_cfef =_daee .decodeRdw ();if _cfef !=nil {return nil ,_dd .Wrap (_cfef ,_feaf ,"");};_cbea ,_cfef =_daee .decodeRdh ();if _cfef !=nil {return nil ,_dd .Wrap (_cfef ,_feaf ,"");
};_gggf ,_cfef =_daee .decodeRdx ();if _cfef !=nil {return nil ,_dd .Wrap (_cfef ,_feaf ,"");};_ecgbdf ,_cfef =_daee .decodeRdy ();if _cfef !=nil {return nil ,_dd .Wrap (_cfef ,_feaf ,"");};if _daee .IsHuffmanEncoded {if _ ,_cfef =_daee .decodeSymInRefSize ();
_cfef !=nil {return nil ,_dd .Wrap (_cfef ,_feaf ,"");};_daee ._gbdb .Align ();};_edad :=_daee .Symbols [_gdga ];_acgcc :=uint32 (_edad .Width );_agad :=uint32 (_edad .Height );_aefe :=int32 (uint32 (_afbf )>>1)+int32 (_gggf );_ggbe :=int32 (uint32 (_cbea )>>1)+int32 (_ecgbdf );
if _daee ._egedb ==nil {_daee ._egedb =_acc (_daee ._gbdb ,nil );};_daee ._egedb .setParameters (_daee ._aagcc ,_daee ._ccde ,_daee .SbrTemplate ,_acgcc +uint32 (_afbf ),_agad +uint32 (_cbea ),_edad ,_aefe ,_ggbe ,false ,_daee .SbrATX ,_daee .SbrATY );
_effb ,_cfef =_daee ._egedb .GetRegionBitmap ();if _cfef !=nil {return nil ,_dd .Wrap (_cfef ,_feaf ,"\u0067\u0072\u0066");};if _daee .IsHuffmanEncoded {_daee ._gbdb .Align ();};return _effb ,nil ;};func (_cbgb *PageInformationSegment )Init (h *Header ,r _ad .StreamReader )(_aec error ){_cbgb ._fga =r ;
if _aec =_cbgb .parseHeader ();_aec !=nil {return _dd .Wrap (_aec ,"P\u0061\u0067\u0065\u0049\u006e\u0066o\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065g\u006d\u0065\u006et\u002eI\u006e\u0069\u0074","");};return nil ;};func (_dbe *GenericRegion )Size ()int {return _dbe .RegionSegment .Size ()+1+2*len (_dbe .GBAtX )};
func (_agaf *TextRegion )decodeRdx ()(int64 ,error ){const _dabcf ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064x";if _agaf .IsHuffmanEncoded {if _agaf .SbHuffRDX ==3{if _agaf ._bafb ==nil {var (_eeff int ;_ebga error ;);if _agaf .SbHuffFS ==3{_eeff ++;
};if _agaf .SbHuffDS ==3{_eeff ++;};if _agaf .SbHuffDT ==3{_eeff ++;};if _agaf .SbHuffRDWidth ==3{_eeff ++;};if _agaf .SbHuffRDHeight ==3{_eeff ++;};_agaf ._bafb ,_ebga =_agaf .getUserTable (_eeff );if _ebga !=nil {return 0,_dd .Wrap (_ebga ,_dabcf ,"");
};};return _agaf ._bafb .Decode (_agaf ._gbdb );};_dacg ,_ccege :=_ed .GetStandardTable (14+int (_agaf .SbHuffRDX ));if _ccege !=nil {return 0,_dd .Wrap (_ccege ,_dabcf ,"");};return _dacg .Decode (_agaf ._gbdb );};_bgge ,_edea :=_agaf ._ccde .DecodeInt (_agaf ._bgaa );
if _edea !=nil {return 0,_dd .Wrap (_edea ,_dabcf ,"");};return int64 (_bgge ),nil ;};func (_aag *template0 )setIndex (_gdb *_cg .DecoderStats ){_gdb .SetIndex (0x100)};func (_agfd *RegionSegment )Encode (w _ad .BinaryWriter )(_edcg int ,_agcc error ){const _ccgg ="R\u0065g\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065n\u0074\u002e\u0045\u006eco\u0064\u0065";
_bgde :=make ([]byte ,4);_d .BigEndian .PutUint32 (_bgde ,_agfd .BitmapWidth );_edcg ,_agcc =w .Write (_bgde );if _agcc !=nil {return 0,_dd .Wrap (_agcc ,_ccgg ,"\u0057\u0069\u0064t\u0068");};_d .BigEndian .PutUint32 (_bgde ,_agfd .BitmapHeight );var _fgcg int ;
_fgcg ,_agcc =w .Write (_bgde );if _agcc !=nil {return 0,_dd .Wrap (_agcc ,_ccgg ,"\u0048\u0065\u0069\u0067\u0068\u0074");};_edcg +=_fgcg ;_d .BigEndian .PutUint32 (_bgde ,_agfd .XLocation );_fgcg ,_agcc =w .Write (_bgde );if _agcc !=nil {return 0,_dd .Wrap (_agcc ,_ccgg ,"\u0058L\u006f\u0063\u0061\u0074\u0069\u006fn");
};_edcg +=_fgcg ;_d .BigEndian .PutUint32 (_bgde ,_agfd .YLocation );_fgcg ,_agcc =w .Write (_bgde );if _agcc !=nil {return 0,_dd .Wrap (_agcc ,_ccgg ,"\u0059L\u006f\u0063\u0061\u0074\u0069\u006fn");};_edcg +=_fgcg ;if _agcc =w .WriteByte (byte (_agfd .CombinaionOperator )&0x07);
_agcc !=nil {return 0,_dd .Wrap (_agcc ,_ccgg ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};_edcg ++;return _edcg ,nil ;};func (_agb *GenericRefinementRegion )GetRegionInfo ()*RegionSegment {return _agb .RegionInfo };
type SegmentEncoder interface{Encode (_gbga _ad .BinaryWriter )(_deef int ,_dgdf error );};func (_dgab *SymbolDictionary )decodeThroughTextRegion (_cfdb ,_bdfa ,_effd uint32 )error {if _dgab ._adce ==nil {_dgab ._adce =_cfba (_dgab ._ecgb ,nil );_dgab ._adce .setContexts (_dgab ._cccc ,_cg .NewStats (512,1),_cg .NewStats (512,1),_cg .NewStats (512,1),_cg .NewStats (512,1),_dgab ._gfbe ,_cg .NewStats (512,1),_cg .NewStats (512,1),_cg .NewStats (512,1),_cg .NewStats (512,1));
};if _bfd :=_dgab .setSymbolsArray ();_bfd !=nil {return _bfd ;};_dgab ._adce .setParameters (_dgab ._abef ,_dgab .IsHuffmanEncoded ,true ,_cfdb ,_bdfa ,_effd ,1,_dgab ._dgbd +_dgab ._cdgb ,0,0,0,1,0,0,0,0,0,0,0,0,0,_dgab .SdrTemplate ,_dgab .SdrATX ,_dgab .SdrATY ,_dgab ._afdb ,_dgab ._gbbc );
return _dgab .addSymbol (_dgab ._adce );};func (_ecgbd *SymbolDictionary )Init (h *Header ,r _ad .StreamReader )error {_ecgbd .Header =h ;_ecgbd ._ecgb =r ;return _ecgbd .parseHeader ();};func (_ce *GenericRefinementRegion )decodeTypicalPredictedLineTemplate0 (_bca ,_cgga ,_bde ,_bac ,_gdc ,_db ,_dda ,_cfa ,_fg int )error {var (_edf ,_fag ,_dff ,_cda ,_dab ,_aa int ;
_ecf byte ;_deae error ;);if _bca > 0{_ecf ,_deae =_ce .RegionBitmap .GetByte (_dda -_bde );if _deae !=nil {return _deae ;};_dff =int (_ecf );};if _cfa > 0&&_cfa <=_ce .ReferenceBitmap .Height {_ecf ,_deae =_ce .ReferenceBitmap .GetByte (_fg -_bac +_db );
if _deae !=nil {return _deae ;};_cda =int (_ecf )<<4;};if _cfa >=0&&_cfa < _ce .ReferenceBitmap .Height {_ecf ,_deae =_ce .ReferenceBitmap .GetByte (_fg +_db );if _deae !=nil {return _deae ;};_dab =int (_ecf )<<1;};if _cfa > -2&&_cfa < _ce .ReferenceBitmap .Height -1{_ecf ,_deae =_ce .ReferenceBitmap .GetByte (_fg +_bac +_db );
if _deae !=nil {return _deae ;};_aa =int (_ecf );};_edf =((_dff >>5)&0x6)|((_aa >>2)&0x30)|(_dab &0x180)|(_cda &0xc00);var _fgg int ;for _fagg :=0;_fagg < _gdc ;_fagg =_fgg {var _dcd int ;_fgg =_fagg +8;var _cbf int ;if _cbf =_cgga -_fagg ;_cbf > 8{_cbf =8;
};_gfc :=_fgg < _cgga ;_dag :=_fgg < _ce .ReferenceBitmap .Width ;_gaef :=_db +1;if _bca > 0{_ecf =0;if _gfc {_ecf ,_deae =_ce .RegionBitmap .GetByte (_dda -_bde +1);if _deae !=nil {return _deae ;};};_dff =(_dff <<8)|int (_ecf );};if _cfa > 0&&_cfa <=_ce .ReferenceBitmap .Height {var _cac int ;
if _dag {_ecf ,_deae =_ce .ReferenceBitmap .GetByte (_fg -_bac +_gaef );if _deae !=nil {return _deae ;};_cac =int (_ecf )<<4;};_cda =(_cda <<8)|_cac ;};if _cfa >=0&&_cfa < _ce .ReferenceBitmap .Height {var _bga int ;if _dag {_ecf ,_deae =_ce .ReferenceBitmap .GetByte (_fg +_gaef );
if _deae !=nil {return _deae ;};_bga =int (_ecf )<<1;};_dab =(_dab <<8)|_bga ;};if _cfa > -2&&_cfa < (_ce .ReferenceBitmap .Height -1){_ecf =0;if _dag {_ecf ,_deae =_ce .ReferenceBitmap .GetByte (_fg +_bac +_gaef );if _deae !=nil {return _deae ;};};_aa =(_aa <<8)|int (_ecf );
};for _cgf :=0;_cgf < _cbf ;_cgf ++{var _bad int ;_fgd :=false ;_dac :=(_edf >>4)&0x1ff;if _dac ==0x1ff{_fgd =true ;_bad =1;}else if _dac ==0x00{_fgd =true ;};if !_fgd {if _ce ._def {_fag =_ce .overrideAtTemplate0 (_edf ,_fagg +_cgf ,_bca ,_dcd ,_cgf );
_ce ._ada .SetIndex (int32 (_fag ));}else {_ce ._ada .SetIndex (int32 (_edf ));};_bad ,_deae =_ce ._ecd .DecodeBit (_ce ._ada );if _deae !=nil {return _deae ;};};_edd :=uint (7-_cgf );_dcd |=_bad <<_edd ;_edf =((_edf &0xdb6)<<1)|_bad |(_dff >>_edd +5)&0x002|((_aa >>_edd +2)&0x010)|((_dab >>_edd )&0x080)|((_cda >>_edd )&0x400);
};_deae =_ce .RegionBitmap .SetByte (_dda ,byte (_dcd ));if _deae !=nil {return _deae ;};_dda ++;_fg ++;};return nil ;};func (_caec *SymbolDictionary )readAtPixels (_cggd int )error {_caec .SdATX =make ([]int8 ,_cggd );_caec .SdATY =make ([]int8 ,_cggd );
var (_fcec byte ;_fefb error ;);for _cefc :=0;_cefc < _cggd ;_cefc ++{_fcec ,_fefb =_caec ._ecgb .ReadByte ();if _fefb !=nil {return _fefb ;};_caec .SdATX [_cefc ]=int8 (_fcec );_fcec ,_fefb =_caec ._ecgb .ReadByte ();if _fefb !=nil {return _fefb ;};_caec .SdATY [_cefc ]=int8 (_fcec );
};return nil ;};func (_bedd *TextRegion )decodeRdy ()(int64 ,error ){const _bgca ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064y";if _bedd .IsHuffmanEncoded {if _bedd .SbHuffRDY ==3{if _bedd ._gbe ==nil {var (_fabe int ;_dfae error ;);if _bedd .SbHuffFS ==3{_fabe ++;
};if _bedd .SbHuffDS ==3{_fabe ++;};if _bedd .SbHuffDT ==3{_fabe ++;};if _bedd .SbHuffRDWidth ==3{_fabe ++;};if _bedd .SbHuffRDHeight ==3{_fabe ++;};if _bedd .SbHuffRDX ==3{_fabe ++;};_bedd ._gbe ,_dfae =_bedd .getUserTable (_fabe );if _dfae !=nil {return 0,_dd .Wrap (_dfae ,_bgca ,"");
};};return _bedd ._gbe .Decode (_bedd ._gbdb );};_afccd ,_ddccf :=_ed .GetStandardTable (14+int (_bedd .SbHuffRDY ));if _ddccf !=nil {return 0,_ddccf ;};return _afccd .Decode (_bedd ._gbdb );};_aaffc ,_edcd :=_bedd ._ccde .DecodeInt (_bedd ._cdbd );if _edcd !=nil {return 0,_dd .Wrap (_edcd ,_bgca ,"");
};return int64 (_aaffc ),nil ;};func NewGenericRegion (r _ad .StreamReader )*GenericRegion {return &GenericRegion {RegionSegment :NewRegionSegment (r ),_gff :r };};func (_dbaa *GenericRegion )overrideAtTemplate3 (_cfcb ,_dgf ,_defe ,_dbd ,_gdd int )int {_cfcb &=0x3EF;
if _dbaa .GBAtY [0]==0&&_dbaa .GBAtX [0]>=-int8 (_gdd ){_cfcb |=(_dbd >>uint (7-(int8 (_gdd )+_dbaa .GBAtX [0]))&0x1)<<4;}else {_cfcb |=int (_dbaa .getPixel (_dgf +int (_dbaa .GBAtX [0]),_defe +int (_dbaa .GBAtY [0])))<<4;};return _cfcb ;};func (_bfaf *PatternDictionary )GetDictionary ()([]*_eb .Bitmap ,error ){if _bfaf .Patterns !=nil {return _bfaf .Patterns ,nil ;
};if !_bfaf .IsMMREncoded {_bfaf .setGbAtPixels ();};_aab :=NewGenericRegion (_bfaf ._deda );_aab .setParametersMMR (_bfaf .IsMMREncoded ,_bfaf .DataOffset ,_bfaf .DataLength ,uint32 (_bfaf .HdpHeight ),(_bfaf .GrayMax +1)*uint32 (_bfaf .HdpWidth ),_bfaf .HDTemplate ,false ,false ,_bfaf .GBAtX ,_bfaf .GBAtY );
_eaab ,_cgaf :=_aab .GetRegionBitmap ();if _cgaf !=nil {return nil ,_cgaf ;};if _cgaf =_bfaf .extractPatterns (_eaab );_cgaf !=nil {return nil ,_cgaf ;};return _bfaf .Patterns ,nil ;};func (_bafc *PageInformationSegment )CombinationOperatorOverrideAllowed ()bool {return _bafc ._aefbf };
func (_ggba *PatternDictionary )checkInput ()error {if _ggba .HdpHeight < 1||_ggba .HdpWidth < 1{return _a .New ("in\u0076\u0061l\u0069\u0064\u0020\u0048\u0065\u0061\u0064\u0065\u0072 \u0056\u0061\u006c\u0075\u0065\u003a\u0020\u0057\u0069\u0064\u0074\u0068\u002f\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020g\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020z\u0065\u0072o");
};if _ggba .IsMMREncoded {if _ggba .HDTemplate !=0{_cb .Log .Debug ("\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0020\u0048\u0044\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030");
};};return nil ;};func (_bcaa *GenericRegion )decodeTemplate1 (_fdd ,_effg ,_dcb int ,_bdac ,_abaa int )(_cggf error ){const _aee ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0031";var (_gbbe ,_cacg int ;_gbc ,_ceg int ;
_dfd byte ;_bcea ,_gbgb int ;);if _fdd >=1{_dfd ,_cggf =_bcaa .Bitmap .GetByte (_abaa );if _cggf !=nil {return _dd .Wrap (_cggf ,_aee ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_gbc =int (_dfd );};if _fdd >=2{_dfd ,_cggf =_bcaa .Bitmap .GetByte (_abaa -_bcaa .Bitmap .RowStride );
if _cggf !=nil {return _dd .Wrap (_cggf ,_aee ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_ceg =int (_dfd )<<5;};_gbbe =((_gbc >>1)&0x1f8)|((_ceg >>1)&0x1e00);for _bcdf :=0;_bcdf < _dcb ;_bcdf =_bcea {var (_efdc byte ;_abeb int ;);_bcea =_bcdf +8;
if _fbag :=_effg -_bcdf ;_fbag > 8{_abeb =8;}else {_abeb =_fbag ;};if _fdd > 0{_gbc <<=8;if _bcea < _effg {_dfd ,_cggf =_bcaa .Bitmap .GetByte (_abaa +1);if _cggf !=nil {return _dd .Wrap (_cggf ,_aee ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");
};_gbc |=int (_dfd );};};if _fdd > 1{_ceg <<=8;if _bcea < _effg {_dfd ,_cggf =_bcaa .Bitmap .GetByte (_abaa -_bcaa .Bitmap .RowStride +1);if _cggf !=nil {return _dd .Wrap (_cggf ,_aee ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_ceg |=int (_dfd )<<5;
};};for _cbaa :=0;_cbaa < _abeb ;_cbaa ++{if _bcaa ._edcf {_cacg =_bcaa .overrideAtTemplate1 (_gbbe ,_bcdf +_cbaa ,_fdd ,int (_efdc ),_cbaa );_bcaa ._cedf .SetIndex (int32 (_cacg ));}else {_bcaa ._cedf .SetIndex (int32 (_gbbe ));};_gbgb ,_cggf =_bcaa ._afcg .DecodeBit (_bcaa ._cedf );
if _cggf !=nil {return _dd .Wrap (_cggf ,_aee ,"");};_efdc |=byte (_gbgb )<<uint (7-_cbaa );_cce :=uint (8-_cbaa );_gbbe =((_gbbe &0xefb)<<1)|_gbgb |((_gbc >>_cce )&0x8)|((_ceg >>_cce )&0x200);};if _bdg :=_bcaa .Bitmap .SetByte (_bdac ,_efdc );_bdg !=nil {return _dd .Wrap (_bdg ,_aee ,"");
};_bdac ++;_abaa ++;};return nil ;};func (_efe *HalftoneRegion )computeSegmentDataStructure ()error {_efe .DataOffset =_efe ._defba .StreamPosition ();_efe .DataHeaderLength =_efe .DataOffset -_efe .DataHeaderOffset ;_efe .DataLength =int64 (_efe ._defba .Length ())-_efe .DataHeaderLength ;
return nil ;};func (_baag *Header )String ()string {_geg :=&_f .Builder {};_geg .WriteString ("\u000a[\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045A\u0044\u0045\u0052\u005d\u000a");_geg .WriteString (_ff .Sprintf ("\t\u002d\u0020\u0053\u0065gm\u0065n\u0074\u004e\u0075\u006d\u0062e\u0072\u003a\u0020\u0025\u0076\u000a",_baag .SegmentNumber ));
_geg .WriteString (_ff .Sprintf ("\u0009\u002d\u0020T\u0079\u0070\u0065\u003a\u0020\u0025\u0076\u000a",_baag .Type ));_geg .WriteString (_ff .Sprintf ("\u0009-\u0020R\u0065\u0074\u0061\u0069\u006eF\u006c\u0061g\u003a\u0020\u0025\u0076\u000a",_baag .RetainFlag ));
_geg .WriteString (_ff .Sprintf ("\u0009\u002d\u0020Pa\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_baag .PageAssociation ));_geg .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0050\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074i\u006fn\u0046\u0069\u0065\u006c\u0064\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_baag .PageAssociationFieldSize ));
_geg .WriteString ("\u0009-\u0020R\u0054\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u0053\u003a\u000a");for _ ,_bacb :=range _baag .RTSNumbers {_geg .WriteString (_ff .Sprintf ("\u0009\t\u002d\u0020\u0025\u0064\u000a",_bacb ));};_geg .WriteString (_ff .Sprintf ("\t\u002d \u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0065n\u0067\u0074\u0068\u003a %\u0076\u000a",_baag .HeaderLength ));
_geg .WriteString (_ff .Sprintf ("\u0009-\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061L\u0065n\u0067\u0074\u0068\u003a\u0020\u0025\u0076\n",_baag .SegmentDataLength ));_geg .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074D\u0061\u0074\u0061\u0053\u0074\u0061\u0072t\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0076\u000a",_baag .SegmentDataStartOffset ));
return _geg .String ();};func (_ace *PageInformationSegment )readContainsRefinement ()error {_cgaa ,_debc :=_ace ._fga .ReadBit ();if _debc !=nil {return _debc ;};if _cgaa ==1{_ace ._fbff =true ;};return nil ;};func (_bdgg *TextRegion )decodeRI ()(int64 ,error ){if !_bdgg .UseRefinement {return 0,nil ;
};if _bdgg .IsHuffmanEncoded {_bfabb ,_ebae :=_bdgg ._gbdb .ReadBit ();return int64 (_bfabb ),_ebae ;};_adfb ,_bbfb :=_bdgg ._ccde .DecodeInt (_bdgg ._aagc );return int64 (_adfb ),_bbfb ;};func _cfba (_ababc _ad .StreamReader ,_dfbga *Header )*TextRegion {_ecge :=&TextRegion {_gbdb :_ababc ,Header :_dfbga ,RegionInfo :NewRegionSegment (_ababc )};
return _ecge ;};func (_cbgg *SymbolDictionary )String ()string {_gag :=&_f .Builder {};_gag .WriteString ("\n\u005b\u0053\u0059\u004dBO\u004c-\u0044\u0049\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u000a");_gag .WriteString (_ff .Sprintf ("\u0009-\u0020S\u0064\u0072\u0054\u0065\u006dp\u006c\u0061t\u0065\u0020\u0025\u0076\u000a",_cbgg .SdrTemplate ));
_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0025\u0076\u000a",_cbgg .SdTemplate ));_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006eg\u0043\u006f\u006e\u0074\u0065\u0078\u0074R\u0065\u0074\u0061\u0069\u006e\u0065\u0064\u0020\u0025\u0076\u000a",_cbgg ._efac ));
_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074\u0065\u0078\u0074\u0055\u0073\u0065\u0064 \u0025\u0076\u000a",_cbgg ._faaa ));_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_cbgg .SdHuffAggInstanceSelection ));
_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053d\u0048\u0075\u0066\u0066\u0042\u004d\u0053\u0069\u007a\u0065S\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020%\u0076\u000a",_cbgg .SdHuffBMSizeSelection ));_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_cbgg .SdHuffDecodeWidthSelection ));
_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020Sd\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064e\u0048e\u0069g\u0068t\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_cbgg .SdHuffDecodeHeightSelection ));_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020U\u0073\u0065\u0052\u0065f\u0069\u006e\u0065\u006d\u0065\u006e\u0074A\u0067\u0067\u0072\u0065\u0067\u0061\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_cbgg .UseRefinementAggregation ));
_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020is\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0065\u0064\u0020\u0025\u0076\u000a",_cbgg .IsHuffmanEncoded ));_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_cbgg .SdATX ));
_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_cbgg .SdATY ));_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_cbgg .SdrATX ));_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_cbgg .SdrATY ));
_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u004e\u0075\u006d\u0062\u0065\u0072\u004ff\u0045\u0078\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_cbgg .NumberOfExportedSymbols ));_gag .WriteString (_ff .Sprintf ("\u0009-\u0020\u004e\u0075\u006db\u0065\u0072\u004f\u0066\u004ee\u0077S\u0079m\u0062\u006f\u006c\u0073\u0020\u0025\u0076\n",_cbgg .NumberOfNewSymbols ));
_gag .WriteString (_ff .Sprintf ("\u0009\u002d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u004ff\u0049\u006d\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_cbgg ._dgbd ));_gag .WriteString (_ff .Sprintf ("\u0009\u002d \u006e\u0075\u006d\u0062\u0065\u0072\u004f\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0064\u0053\u0079\u006d\u0062\u006f\u006c\u0073 %\u0076\u000a",_cbgg ._cdgb ));
return _gag .String ();};func (_bgcg *TableSegment )parseHeader ()error {var (_cafb int ;_cffb uint64 ;_gbgd error ;);_cafb ,_gbgd =_bgcg ._acabe .ReadBit ();if _gbgd !=nil {return _gbgd ;};if _cafb ==1{return _ff .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0061\u0062\u006c\u0065 \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0064e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u002e\u0020\u0042\u002e\u0032\u002e1\u0020\u0043\u006f\u0064\u0065\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0066\u006c\u0061\u0067\u0073\u003a\u0020\u0042\u0069\u0074\u0020\u0037\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u007a\u0065\u0072\u006f\u002e\u0020\u0057a\u0073\u003a \u0025\u0064",_cafb );
};if _cffb ,_gbgd =_bgcg ._acabe .ReadBits (3);_gbgd !=nil {return _gbgd ;};_bgcg ._egfd =(int32 (_cffb )+1)&0xf;if _cffb ,_gbgd =_bgcg ._acabe .ReadBits (3);_gbgd !=nil {return _gbgd ;};_bgcg ._accc =(int32 (_cffb )+1)&0xf;if _cffb ,_gbgd =_bgcg ._acabe .ReadBits (32);
_gbgd !=nil {return _gbgd ;};_bgcg ._edgf =int32 (_cffb &_e .MaxInt32 );if _cffb ,_gbgd =_bgcg ._acabe .ReadBits (32);_gbgd !=nil {return _gbgd ;};_bgcg ._gaec =int32 (_cffb &_e .MaxInt32 );return nil ;};func (_bdc *PatternDictionary )Init (h *Header ,r _ad .StreamReader )error {_bdc ._deda =r ;
return _bdc .parseHeader ();};func (_cad *GenericRefinementRegion )Init (header *Header ,r _ad .StreamReader )error {_cad ._de =header ;_cad ._eg =r ;_cad .RegionInfo =NewRegionSegment (r );return _cad .parseHeader ();};func NewHeader (d Documenter ,r _ad .StreamReader ,offset int64 ,organizationType OrganizationType )(*Header ,error ){_ege :=&Header {Reader :r };
if _bff :=_ege .parse (d ,r ,offset ,organizationType );_bff !=nil {return nil ,_dd .Wrap (_bff ,"\u004ee\u0077\u0048\u0065\u0061\u0064\u0065r","");};return _ege ,nil ;};func (_bgdga *Header )readHeaderFlags ()error {const _aggf ="\u0072e\u0061d\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006c\u0061\u0067\u0073";
_bbde ,_gee :=_bgdga .Reader .ReadBit ();if _gee !=nil {return _dd .Wrap (_gee ,_aggf ,"r\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067");};if _bbde !=0{_bgdga .RetainFlag =true ;};_bbde ,_gee =_bgdga .Reader .ReadBit ();if _gee !=nil {return _dd .Wrap (_gee ,_aggf ,"\u0070\u0061g\u0065\u0020\u0061s\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e");
};if _bbde !=0{_bgdga .PageAssociationFieldSize =true ;};_gaa ,_gee :=_bgdga .Reader .ReadBits (6);if _gee !=nil {return _dd .Wrap (_gee ,_aggf ,"\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065");};_bgdga .Type =Type (int (_gaa ));return nil ;
};func (_efed *PageInformationSegment )encodeFlags (_eef _ad .BinaryWriter )(_fcdg error ){const _beeg ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _fcdg =_eef .SkipBits (1);_fcdg !=nil {return _dd .Wrap (_fcdg ,_beeg ,"\u0072\u0065\u0073e\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074");
};var _befe int ;if _efed .CombinationOperatorOverrideAllowed (){_befe =1;};if _fcdg =_eef .WriteBit (_befe );_fcdg !=nil {return _dd .Wrap (_fcdg ,_beeg ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u006f\u0076\u0065\u0072\u0072\u0069\u0064\u0064\u0065\u006e");
};_befe =0;if _efed ._dfbe {_befe =1;};if _fcdg =_eef .WriteBit (_befe );_fcdg !=nil {return _dd .Wrap (_fcdg ,_beeg ,"\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0075\u0078i\u006ci\u0061r\u0079\u0020\u0062\u0075\u0066\u0066\u0065r");};if _fcdg =_eef .WriteBit ((int (_efed ._ddb )>>1)&0x01);
_fcdg !=nil {return _dd .Wrap (_fcdg ,_beeg ,"\u0063\u006f\u006d\u0062\u0069\u006e\u0061\u0074\u0069\u006fn\u0020\u006f\u0070\u0065\u0072\u0061\u0074o\u0072\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0062\u0069\u0074");};if _fcdg =_eef .WriteBit (int (_efed ._ddb )&0x01);
_fcdg !=nil {return _dd .Wrap (_fcdg ,_beeg ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0062\u0069\u0074");};_befe =int (_efed .DefaultPixelValue );
if _fcdg =_eef .WriteBit (_befe );_fcdg !=nil {return _dd .Wrap (_fcdg ,_beeg ,"\u0064e\u0066\u0061\u0075\u006c\u0074\u0020\u0070\u0061\u0067\u0065\u0020p\u0069\u0078\u0065\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};_befe =0;if _efed ._fbff {_befe =1;
};if _fcdg =_eef .WriteBit (_befe );_fcdg !=nil {return _dd .Wrap (_fcdg ,_beeg ,"\u0063\u006f\u006e\u0074ai\u006e\u0073\u0020\u0072\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074");};_befe =0;if _efed .IsLossless {_befe =1;};if _fcdg =_eef .WriteBit (_befe );
_fcdg !=nil {return _dd .Wrap (_fcdg ,_beeg ,"p\u0061\u0067\u0065\u0020\u0069\u0073 \u0065\u0076\u0065\u006e\u0074\u0075\u0061\u006c\u006cy\u0020\u006c\u006fs\u0073l\u0065\u0073\u0073");};return nil ;};func (_acbfd *SymbolDictionary )decodeDirectlyThroughGenericRegion (_cgcc ,_ddg uint32 )error {if _acbfd ._gcag ==nil {_acbfd ._gcag =NewGenericRegion (_acbfd ._ecgb );
};_acbfd ._gcag .setParametersWithAt (false ,byte (_acbfd .SdTemplate ),false ,false ,_acbfd .SdATX ,_acbfd .SdATY ,_cgcc ,_ddg ,_acbfd ._cccc ,_acbfd ._abef );return _acbfd .addSymbol (_acbfd ._gcag );};func (_acbe *PageInformationSegment )CombinationOperator ()_eb .CombinationOperator {return _acbe ._ddb };
func (_abf *HalftoneRegion )parseHeader ()error {if _facd :=_abf .RegionSegment .parseHeader ();_facd !=nil {return _facd ;};_gced ,_bbb :=_abf ._defba .ReadBit ();if _bbb !=nil {return _bbb ;};_abf .HDefaultPixel =int8 (_gced );_ebdaf ,_bbb :=_abf ._defba .ReadBits (3);
if _bbb !=nil {return _bbb ;};_abf .CombinationOperator =_eb .CombinationOperator (_ebdaf &0xf);_gced ,_bbb =_abf ._defba .ReadBit ();if _bbb !=nil {return _bbb ;};if _gced ==1{_abf .HSkipEnabled =true ;};_ebdaf ,_bbb =_abf ._defba .ReadBits (2);if _bbb !=nil {return _bbb ;
};_abf .HTemplate =byte (_ebdaf &0xf);_gced ,_bbb =_abf ._defba .ReadBit ();if _bbb !=nil {return _bbb ;};if _gced ==1{_abf .IsMMREncoded =true ;};_ebdaf ,_bbb =_abf ._defba .ReadBits (32);if _bbb !=nil {return _bbb ;};_abf .HGridWidth =uint32 (_ebdaf &_e .MaxUint32 );
_ebdaf ,_bbb =_abf ._defba .ReadBits (32);if _bbb !=nil {return _bbb ;};_abf .HGridHeight =uint32 (_ebdaf &_e .MaxUint32 );_ebdaf ,_bbb =_abf ._defba .ReadBits (32);if _bbb !=nil {return _bbb ;};_abf .HGridX =int32 (_ebdaf &_e .MaxInt32 );_ebdaf ,_bbb =_abf ._defba .ReadBits (32);
if _bbb !=nil {return _bbb ;};_abf .HGridY =int32 (_ebdaf &_e .MaxInt32 );_ebdaf ,_bbb =_abf ._defba .ReadBits (16);if _bbb !=nil {return _bbb ;};_abf .HRegionX =uint16 (_ebdaf &_e .MaxUint16 );_ebdaf ,_bbb =_abf ._defba .ReadBits (16);if _bbb !=nil {return _bbb ;
};_abf .HRegionY =uint16 (_ebdaf &_e .MaxUint16 );if _bbb =_abf .computeSegmentDataStructure ();_bbb !=nil {return _bbb ;};return _abf .checkInput ();};func (_aabc *TextRegion )symbolIDCodeLengths ()error {var (_gecg []*_ed .Code ;_gdgb uint64 ;_adaa _ed .Tabler ;
_dfddc error ;);for _afaf :=0;_afaf < 35;_afaf ++{_gdgb ,_dfddc =_aabc ._gbdb .ReadBits (4);if _dfddc !=nil {return _dfddc ;};_aead :=int (_gdgb &0xf);if _aead > 0{_gecg =append (_gecg ,_ed .NewCode (int32 (_aead ),0,int32 (_afaf ),false ));};};_adaa ,_dfddc =_ed .NewFixedSizeTable (_gecg );
if _dfddc !=nil {return _dfddc ;};var (_ebeb int64 ;_abagb uint32 ;_fefff []*_ed .Code ;_bbfbg int64 ;);for _abagb < _aabc .NumberOfSymbols {_bbfbg ,_dfddc =_adaa .Decode (_aabc ._gbdb );if _dfddc !=nil {return _dfddc ;};if _bbfbg < 32{if _bbfbg > 0{_fefff =append (_fefff ,_ed .NewCode (int32 (_bbfbg ),0,int32 (_abagb ),false ));
};_ebeb =_bbfbg ;_abagb ++;}else {var _baddg ,_dcbb int64 ;switch _bbfbg {case 32:_gdgb ,_dfddc =_aabc ._gbdb .ReadBits (2);if _dfddc !=nil {return _dfddc ;};_baddg =3+int64 (_gdgb );if _abagb > 0{_dcbb =_ebeb ;};case 33:_gdgb ,_dfddc =_aabc ._gbdb .ReadBits (3);
if _dfddc !=nil {return _dfddc ;};_baddg =3+int64 (_gdgb );case 34:_gdgb ,_dfddc =_aabc ._gbdb .ReadBits (7);if _dfddc !=nil {return _dfddc ;};_baddg =11+int64 (_gdgb );};for _caeca :=0;_caeca < int (_baddg );_caeca ++{if _dcbb > 0{_fefff =append (_fefff ,_ed .NewCode (int32 (_dcbb ),0,int32 (_abagb ),false ));
};_abagb ++;};};};_aabc ._gbdb .Align ();_aabc ._acgd ,_dfddc =_ed .NewFixedSizeTable (_fefff );return _dfddc ;};func (_gacf *HalftoneRegion )computeY (_ddd ,_gbd int )int {return _gacf .shiftAndFill (int (_gacf .HGridY )+_ddd *int (_gacf .HRegionX )-_gbd *int (_gacf .HRegionY ));
};type PageInformationSegment struct{_fga _ad .StreamReader ;PageBMHeight int ;PageBMWidth int ;ResolutionX int ;ResolutionY int ;_aefbf bool ;_ddb _eb .CombinationOperator ;_dfbe bool ;DefaultPixelValue uint8 ;_fbff bool ;IsLossless bool ;IsStripe bool ;
MaxStripeSize uint16 ;};func (_gfdae *TextRegion )GetRegionInfo ()*RegionSegment {return _gfdae .RegionInfo };func (_dddf *TextRegion )encodeFlags (_ddace _ad .BinaryWriter )(_cfea int ,_bdgbg error ){const _ddbeg ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _bdgbg =_ddace .WriteBit (int (_dddf .SbrTemplate ));_bdgbg !=nil {return _cfea ,_dd .Wrap (_bdgbg ,_ddbeg ,"s\u0062\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _ ,_bdgbg =_ddace .WriteBits (uint64 (_dddf .SbDsOffset ),5);_bdgbg !=nil {return _cfea ,_dd .Wrap (_bdgbg ,_ddbeg ,"\u0073\u0062\u0044\u0073\u004f\u0066\u0066\u0073\u0065\u0074");
};if _bdgbg =_ddace .WriteBit (int (_dddf .DefaultPixel ));_bdgbg !=nil {return _cfea ,_dd .Wrap (_bdgbg ,_ddbeg ,"\u0044\u0065\u0066a\u0075\u006c\u0074\u0050\u0069\u0078\u0065\u006c");};if _ ,_bdgbg =_ddace .WriteBits (uint64 (_dddf .CombinationOperator ),2);
_bdgbg !=nil {return _cfea ,_dd .Wrap (_bdgbg ,_ddbeg ,"\u0043\u006f\u006d\u0062in\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};if _bdgbg =_ddace .WriteBit (int (_dddf .IsTransposed ));_bdgbg !=nil {return _cfea ,_dd .Wrap (_bdgbg ,_ddbeg ,"\u0069\u0073\u0020\u0074\u0072\u0061\u006e\u0073\u0070\u006f\u0073\u0065\u0064");
};if _ ,_bdgbg =_ddace .WriteBits (uint64 (_dddf .ReferenceCorner ),2);_bdgbg !=nil {return _cfea ,_dd .Wrap (_bdgbg ,_ddbeg ,"\u0072\u0065f\u0065\u0072\u0065n\u0063\u0065\u0020\u0063\u006f\u0072\u006e\u0065\u0072");};if _ ,_bdgbg =_ddace .WriteBits (uint64 (_dddf .LogSBStrips ),2);
_bdgbg !=nil {return _cfea ,_dd .Wrap (_bdgbg ,_ddbeg ,"L\u006f\u0067\u0053\u0042\u0053\u0074\u0072\u0069\u0070\u0073");};var _cec int ;if _dddf .UseRefinement {_cec =1;};if _bdgbg =_ddace .WriteBit (_cec );_bdgbg !=nil {return _cfea ,_dd .Wrap (_bdgbg ,_ddbeg ,"\u0075\u0073\u0065\u0020\u0072\u0065\u0066\u0069\u006ee\u006d\u0065\u006e\u0074");
};_cec =0;if _dddf .IsHuffmanEncoded {_cec =1;};if _bdgbg =_ddace .WriteBit (_cec );_bdgbg !=nil {return _cfea ,_dd .Wrap (_bdgbg ,_ddbeg ,"u\u0073\u0065\u0020\u0068\u0075\u0066\u0066\u006d\u0061\u006e");};_cfea =2;return _cfea ,nil ;};type template0 struct{};
func (_defec *TextRegion )GetRegionBitmap ()(*_eb .Bitmap ,error ){if _defec .RegionBitmap !=nil {return _defec .RegionBitmap ,nil ;};if !_defec .IsHuffmanEncoded {if _babc :=_defec .setCodingStatistics ();_babc !=nil {return nil ,_babc ;};};if _cbedfa :=_defec .createRegionBitmap ();
_cbedfa !=nil {return nil ,_cbedfa ;};if _dggb :=_defec .decodeSymbolInstances ();_dggb !=nil {return nil ,_dggb ;};return _defec .RegionBitmap ,nil ;};func (_daec *PageInformationSegment )readDefaultPixelValue ()error {_cde ,_bcbd :=_daec ._fga .ReadBit ();
if _bcbd !=nil {return _bcbd ;};_daec .DefaultPixelValue =uint8 (_cde &0xf);return nil ;};func (_cede *TextRegion )readHuffmanFlags ()error {var (_bgac int ;_bgfe uint64 ;_gacc error ;);_ ,_gacc =_cede ._gbdb .ReadBit ();if _gacc !=nil {return _gacc ;};
_bgac ,_gacc =_cede ._gbdb .ReadBit ();if _gacc !=nil {return _gacc ;};_cede .SbHuffRSize =int8 (_bgac );_bgfe ,_gacc =_cede ._gbdb .ReadBits (2);if _gacc !=nil {return _gacc ;};_cede .SbHuffRDY =int8 (_bgfe )&0xf;_bgfe ,_gacc =_cede ._gbdb .ReadBits (2);
if _gacc !=nil {return _gacc ;};_cede .SbHuffRDX =int8 (_bgfe )&0xf;_bgfe ,_gacc =_cede ._gbdb .ReadBits (2);if _gacc !=nil {return _gacc ;};_cede .SbHuffRDHeight =int8 (_bgfe )&0xf;_bgfe ,_gacc =_cede ._gbdb .ReadBits (2);if _gacc !=nil {return _gacc ;
};_cede .SbHuffRDWidth =int8 (_bgfe )&0xf;_bgfe ,_gacc =_cede ._gbdb .ReadBits (2);if _gacc !=nil {return _gacc ;};_cede .SbHuffDT =int8 (_bgfe )&0xf;_bgfe ,_gacc =_cede ._gbdb .ReadBits (2);if _gacc !=nil {return _gacc ;};_cede .SbHuffDS =int8 (_bgfe )&0xf;
_bgfe ,_gacc =_cede ._gbdb .ReadBits (2);if _gacc !=nil {return _gacc ;};_cede .SbHuffFS =int8 (_bgfe )&0xf;return nil ;};func (_gea *GenericRefinementRegion )decodeTypicalPredictedLine (_acb ,_fea ,_efa ,_gae ,_bcd ,_aggc int )error {_gf :=_acb -int (_gea .ReferenceDY );
_df :=_gea .ReferenceBitmap .GetByteIndex (0,_gf );_ae :=_gea .RegionBitmap .GetByteIndex (0,_acb );var _egc error ;switch _gea .TemplateID {case 0:_egc =_gea .decodeTypicalPredictedLineTemplate0 (_acb ,_fea ,_efa ,_gae ,_bcd ,_aggc ,_ae ,_gf ,_df );case 1:_egc =_gea .decodeTypicalPredictedLineTemplate1 (_acb ,_fea ,_efa ,_gae ,_bcd ,_aggc ,_ae ,_gf ,_df );
};return _egc ;};func (_faab *SymbolDictionary )huffDecodeBmSize ()(int64 ,error ){if _faab ._eafb ==nil {var (_eegf int ;_ccfde error ;);if _faab .SdHuffDecodeHeightSelection ==3{_eegf ++;};if _faab .SdHuffDecodeWidthSelection ==3{_eegf ++;};_faab ._eafb ,_ccfde =_faab .getUserTable (_eegf );
if _ccfde !=nil {return 0,_ccfde ;};};return _faab ._eafb .Decode (_faab ._ecgb );};func (_ddbc *SymbolDictionary )decodeHeightClassCollectiveBitmap (_aga int64 ,_ddcaf ,_befd uint32 )(*_eb .Bitmap ,error ){if _aga ==0{_bgcd :=_eb .New (int (_befd ),int (_ddcaf ));
var (_daaa byte ;_fgcd error ;);for _afcc :=0;_afcc < len (_bgcd .Data );_afcc ++{_daaa ,_fgcd =_ddbc ._ecgb .ReadByte ();if _fgcd !=nil {return nil ,_fgcd ;};if _fgcd =_bgcd .SetByte (_afcc ,_daaa );_fgcd !=nil {return nil ,_fgcd ;};};return _bgcd ,nil ;
};if _ddbc ._gcag ==nil {_ddbc ._gcag =NewGenericRegion (_ddbc ._ecgb );};_ddbc ._gcag .setParameters (true ,_ddbc ._ecgb .StreamPosition (),_aga ,_ddcaf ,_befd );_ddee ,_daba :=_ddbc ._gcag .GetRegionBitmap ();if _daba !=nil {return nil ,_daba ;};return _ddee ,nil ;
};