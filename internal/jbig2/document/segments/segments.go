//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package segments ;import (_d "encoding/binary";_e "errors";_f "fmt";_df "github.com/unidoc/unipdf/v3/common";_de "github.com/unidoc/unipdf/v3/internal/bitwise";_ae "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_be "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_cde "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/arithmetic";_fa "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/huffman";_dee "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/mmr";_bb "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/arithmetic";
_bf "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_bc "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_g "golang.org/x/xerrors";_cd "image";_b "io";_a "math";_cb "strings";_bg "time";);func (_dbb *GenericRefinementRegion )getGrReference ()(*_be .Bitmap ,error ){segments :=_dbb ._eg .RTSegments ;
if len (segments )==0{return nil ,_e .New ("\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0065\u0078is\u0074\u0073");};_gdc ,_ff :=segments [0].GetSegmentData ();if _ff !=nil {return nil ,_ff ;
};_dfb ,_dfd :=_gdc .(Regioner );if !_dfd {return nil ,_f .Errorf ("\u0072\u0065\u0066\u0065\u0072r\u0065\u0064\u0020\u0074\u006f\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_gdc );
};return _dfb .GetRegionBitmap ();};func (_gbde *TextRegion )setParameters (_fdca *_cde .Decoder ,_cgeg ,_dacf bool ,_gefef ,_dced uint32 ,_eecg uint32 ,_daab int8 ,_eabaa uint32 ,_cgee int8 ,_bbacf _be .CombinationOperator ,_gafd int8 ,_aadg int16 ,_dccg ,_fbcf ,_fdda ,_ecab ,_eaedf ,_feae ,_cfcgc ,_gfgac ,_ffda ,_aaff int8 ,_cgfa ,_adde []int8 ,_cfcaf []*_be .Bitmap ,_gbcc int8 ){_gbde ._gggg =_fdca ;
_gbde .IsHuffmanEncoded =_cgeg ;_gbde .UseRefinement =_dacf ;_gbde .RegionInfo .BitmapWidth =_gefef ;_gbde .RegionInfo .BitmapHeight =_dced ;_gbde .NumberOfSymbolInstances =_eecg ;_gbde .SbStrips =_daab ;_gbde .NumberOfSymbols =_eabaa ;_gbde .DefaultPixel =_cgee ;
_gbde .CombinationOperator =_bbacf ;_gbde .IsTransposed =_gafd ;_gbde .ReferenceCorner =_aadg ;_gbde .SbDsOffset =_dccg ;_gbde .SbHuffFS =_fbcf ;_gbde .SbHuffDS =_fdda ;_gbde .SbHuffDT =_ecab ;_gbde .SbHuffRDWidth =_eaedf ;_gbde .SbHuffRDHeight =_feae ;
_gbde .SbHuffRSize =_ffda ;_gbde .SbHuffRDX =_cfcgc ;_gbde .SbHuffRDY =_gfgac ;_gbde .SbrTemplate =_aaff ;_gbde .SbrATX =_cgfa ;_gbde .SbrATY =_adde ;_gbde .Symbols =_cfcaf ;_gbde ._gade =_gbcc ;};func (_gede *HalftoneRegion )GetRegionBitmap ()(*_be .Bitmap ,error ){if _gede .HalftoneRegionBitmap !=nil {return _gede .HalftoneRegionBitmap ,nil ;
};var _bfba error ;_gede .HalftoneRegionBitmap =_be .New (int (_gede .RegionSegment .BitmapWidth ),int (_gede .RegionSegment .BitmapHeight ));if _gede .Patterns ==nil ||len (_gede .Patterns )==0{_gede .Patterns ,_bfba =_gede .GetPatterns ();if _bfba !=nil {return nil ,_bfba ;
};};if _gede .HDefaultPixel ==1{_gede .HalftoneRegionBitmap .SetDefaultPixel ();};_agde :=_a .Ceil (_a .Log (float64 (len (_gede .Patterns )))/_a .Log (2));_egfb :=int (_agde );var _dggc [][]int ;_dggc ,_bfba =_gede .grayScaleDecoding (_egfb );if _bfba !=nil {return nil ,_bfba ;
};if _bfba =_gede .renderPattern (_dggc );_bfba !=nil {return nil ,_bfba ;};return _gede .HalftoneRegionBitmap ,nil ;};func (_aded *HalftoneRegion )computeY (_eefb ,_fada int )int {return _aded .shiftAndFill (int (_aded .HGridY )+_eefb *int (_aded .HRegionX )-_fada *int (_aded .HRegionY ));
};func (_dgab *TextRegion )decodeRI ()(int64 ,error ){if !_dgab .UseRefinement {return 0,nil ;};if _dgab .IsHuffmanEncoded {_bcada ,_ebgag :=_dgab ._fdge .ReadBit ();return int64 (_bcada ),_ebgag ;};_egbag ,_aecg :=_dgab ._gggg .DecodeInt (_dgab ._gedee );
return int64 (_egbag ),_aecg ;};func (_ge *EndOfStripe )parseHeader (_cc *Header ,_ebg _de .StreamReader )error {_bd ,_da :=_ge ._eb .ReadBits (32);if _da !=nil {return _da ;};_ge ._ed =int (_bd &_a .MaxInt32 );return nil ;};func (_deeb *HalftoneRegion )computeGrayScalePlanes (_gfbf []*_be .Bitmap ,_fff int )([][]int ,error ){_adag :=make ([][]int ,_deeb .HGridHeight );
for _cdgd :=0;_cdgd < len (_adag );_cdgd ++{_adag [_cdgd ]=make ([]int ,_deeb .HGridWidth );};for _bfgg :=0;_bfgg < int (_deeb .HGridHeight );_bfgg ++{for _bbcf :=0;_bbcf < int (_deeb .HGridWidth );_bbcf +=8{var _caa int ;if _ffge :=int (_deeb .HGridWidth )-_bbcf ;
_ffge > 8{_caa =8;}else {_caa =_ffge ;};_edd :=_gfbf [0].GetByteIndex (_bbcf ,_bfgg );for _dgba :=0;_dgba < _caa ;_dgba ++{_eba :=_dgba +_bbcf ;_adag [_bfgg ][_eba ]=0;for _fbcg :=0;_fbcg < _fff ;_fbcg ++{_ggba ,_facd :=_gfbf [_fbcg ].GetByte (_edd );if _facd !=nil {return nil ,_facd ;
};_cdbf :=_ggba >>uint (7-_eba &7);_efddc :=_cdbf &1;_feedg :=1<<uint (_fbcg );_bfbg :=int (_efddc )*_feedg ;_adag [_bfgg ][_eba ]+=_bfbg ;};};};};return _adag ,nil ;};type HalftoneRegion struct{_ffga _de .StreamReader ;_adg *Header ;DataHeaderOffset int64 ;
DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;HDefaultPixel int8 ;CombinationOperator _be .CombinationOperator ;HSkipEnabled bool ;HTemplate byte ;IsMMREncoded bool ;HGridWidth uint32 ;HGridHeight uint32 ;HGridX int32 ;
HGridY int32 ;HRegionX uint16 ;HRegionY uint16 ;HalftoneRegionBitmap *_be .Bitmap ;Patterns []*_be .Bitmap ;};func (_dgfe *HalftoneRegion )parseHeader ()error {if _ecd :=_dgfe .RegionSegment .parseHeader ();_ecd !=nil {return _ecd ;};_dbde ,_ebbb :=_dgfe ._ffga .ReadBit ();
if _ebbb !=nil {return _ebbb ;};_dgfe .HDefaultPixel =int8 (_dbde );_egdc ,_ebbb :=_dgfe ._ffga .ReadBits (3);if _ebbb !=nil {return _ebbb ;};_dgfe .CombinationOperator =_be .CombinationOperator (_egdc &0xf);_dbde ,_ebbb =_dgfe ._ffga .ReadBit ();if _ebbb !=nil {return _ebbb ;
};if _dbde ==1{_dgfe .HSkipEnabled =true ;};_egdc ,_ebbb =_dgfe ._ffga .ReadBits (2);if _ebbb !=nil {return _ebbb ;};_dgfe .HTemplate =byte (_egdc &0xf);_dbde ,_ebbb =_dgfe ._ffga .ReadBit ();if _ebbb !=nil {return _ebbb ;};if _dbde ==1{_dgfe .IsMMREncoded =true ;
};_egdc ,_ebbb =_dgfe ._ffga .ReadBits (32);if _ebbb !=nil {return _ebbb ;};_dgfe .HGridWidth =uint32 (_egdc &_a .MaxUint32 );_egdc ,_ebbb =_dgfe ._ffga .ReadBits (32);if _ebbb !=nil {return _ebbb ;};_dgfe .HGridHeight =uint32 (_egdc &_a .MaxUint32 );_egdc ,_ebbb =_dgfe ._ffga .ReadBits (32);
if _ebbb !=nil {return _ebbb ;};_dgfe .HGridX =int32 (_egdc &_a .MaxInt32 );_egdc ,_ebbb =_dgfe ._ffga .ReadBits (32);if _ebbb !=nil {return _ebbb ;};_dgfe .HGridY =int32 (_egdc &_a .MaxInt32 );_egdc ,_ebbb =_dgfe ._ffga .ReadBits (16);if _ebbb !=nil {return _ebbb ;
};_dgfe .HRegionX =uint16 (_egdc &_a .MaxUint16 );_egdc ,_ebbb =_dgfe ._ffga .ReadBits (16);if _ebbb !=nil {return _ebbb ;};_dgfe .HRegionY =uint16 (_egdc &_a .MaxUint16 );if _ebbb =_dgfe .computeSegmentDataStructure ();_ebbb !=nil {return _ebbb ;};return _dgfe .checkInput ();
};func (_fbfc *GenericRegion )String ()string {_ccc :=&_cb .Builder {};_ccc .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_ccc .WriteString (_fbfc .RegionSegment .String ()+"\u000a");_ccc .WriteString (_f .Sprintf ("\u0009\u002d\u0020Us\u0065\u0045\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_fbfc .UseExtTemplates ));
_ccc .WriteString (_f .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0044\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_fbfc .IsTPGDon ));_ccc .WriteString (_f .Sprintf ("\u0009-\u0020G\u0042\u0054\u0065\u006d\u0070l\u0061\u0074e\u003a\u0020\u0025\u0064\u000a",_fbfc .GBTemplate ));
_ccc .WriteString (_f .Sprintf ("\t\u002d \u0049\u0073\u004d\u004d\u0052\u0045\u006e\u0063o\u0064\u0065\u0064\u003a %\u0076\u000a",_fbfc .IsMMREncoded ));_ccc .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_fbfc .GBAtX ));
_ccc .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_fbfc .GBAtY ));_ccc .WriteString (_f .Sprintf ("\t\u002d \u0047\u0042\u0041\u0074\u004f\u0076\u0065\u0072r\u0069\u0064\u0065\u003a %\u0076\u000a",_fbfc .GBAtOverride ));
return _ccc .String ();};type PatternDictionary struct{_fecd _de .StreamReader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;GBAtX []int8 ;GBAtY []int8 ;IsMMREncoded bool ;HDTemplate byte ;HdpWidth byte ;HdpHeight byte ;
Patterns []*_be .Bitmap ;GrayMax uint32 ;};var _ templater =&template0 {};func (_deedc *TextRegion )decodeRdw ()(int64 ,error ){const _fbgd ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064w";if _deedc .IsHuffmanEncoded {if _deedc .SbHuffRDWidth ==3{if _deedc ._agge ==nil {var (_gbeef int ;
_bfefb error ;);if _deedc .SbHuffFS ==3{_gbeef ++;};if _deedc .SbHuffDS ==3{_gbeef ++;};if _deedc .SbHuffDT ==3{_gbeef ++;};_deedc ._agge ,_bfefb =_deedc .getUserTable (_gbeef );if _bfefb !=nil {return 0,_bf .Wrap (_bfefb ,_fbgd ,"");};};return _deedc ._agge .Decode (_deedc ._fdge );
};_egeea ,_bdeb :=_fa .GetStandardTable (14+int (_deedc .SbHuffRDWidth ));if _bdeb !=nil {return 0,_bf .Wrap (_bdeb ,_fbgd ,"");};return _egeea .Decode (_deedc ._fdge );};_fadfa ,_gefe :=_deedc ._gggg .DecodeInt (_deedc ._fcde );if _gefe !=nil {return 0,_bf .Wrap (_gefe ,_fbgd ,"");
};return int64 (_fadfa ),nil ;};func (_faed *GenericRegion )Size ()int {return _faed .RegionSegment .Size ()+1+2*len (_faed .GBAtX )};func (_caff *PatternDictionary )readTemplate ()error {_ffdb ,_efgf :=_caff ._fecd .ReadBits (2);if _efgf !=nil {return _efgf ;
};_caff .HDTemplate =byte (_ffdb );return nil ;};func (_eaef *TextRegion )decodeIds ()(int64 ,error ){const _affa ="\u0064e\u0063\u006f\u0064\u0065\u0049\u0064s";if _eaef .IsHuffmanEncoded {if _eaef .SbHuffDS ==3{if _eaef ._fbfce ==nil {_abaab :=0;if _eaef .SbHuffFS ==3{_abaab ++;
};var _ggfg error ;_eaef ._fbfce ,_ggfg =_eaef .getUserTable (_abaab );if _ggfg !=nil {return 0,_bf .Wrap (_ggfg ,_affa ,"");};};return _eaef ._fbfce .Decode (_eaef ._fdge );};_bfgb ,_gbdc :=_fa .GetStandardTable (8+int (_eaef .SbHuffDS ));if _gbdc !=nil {return 0,_bf .Wrap (_gbdc ,_affa ,"");
};return _bfgb .Decode (_eaef ._fdge );};_ffddc ,_fbge :=_eaef ._gggg .DecodeInt (_eaef ._gfeb );if _fbge !=nil {return 0,_bf .Wrap (_fbge ,_affa ,"\u0063\u0078\u0049\u0041\u0044\u0053");};return int64 (_ffddc ),nil ;};func (_abdcf *Header )String ()string {_bdgf :=&_cb .Builder {};
_bdgf .WriteString ("\u000a[\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045A\u0044\u0045\u0052\u005d\u000a");_bdgf .WriteString (_f .Sprintf ("\t\u002d\u0020\u0053\u0065gm\u0065n\u0074\u004e\u0075\u006d\u0062e\u0072\u003a\u0020\u0025\u0076\u000a",_abdcf .SegmentNumber ));
_bdgf .WriteString (_f .Sprintf ("\u0009\u002d\u0020T\u0079\u0070\u0065\u003a\u0020\u0025\u0076\u000a",_abdcf .Type ));_bdgf .WriteString (_f .Sprintf ("\u0009-\u0020R\u0065\u0074\u0061\u0069\u006eF\u006c\u0061g\u003a\u0020\u0025\u0076\u000a",_abdcf .RetainFlag ));
_bdgf .WriteString (_f .Sprintf ("\u0009\u002d\u0020Pa\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_abdcf .PageAssociation ));_bdgf .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0050\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074i\u006fn\u0046\u0069\u0065\u006c\u0064\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_abdcf .PageAssociationFieldSize ));
_bdgf .WriteString ("\u0009-\u0020R\u0054\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u0053\u003a\u000a");for _ ,_gacc :=range _abdcf .RTSNumbers {_bdgf .WriteString (_f .Sprintf ("\u0009\t\u002d\u0020\u0025\u0064\u000a",_gacc ));};_bdgf .WriteString (_f .Sprintf ("\t\u002d \u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0065n\u0067\u0074\u0068\u003a %\u0076\u000a",_abdcf .HeaderLength ));
_bdgf .WriteString (_f .Sprintf ("\u0009-\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061L\u0065n\u0067\u0074\u0068\u003a\u0020\u0025\u0076\n",_abdcf .SegmentDataLength ));_bdgf .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074D\u0061\u0074\u0061\u0053\u0074\u0061\u0072t\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0076\u000a",_abdcf .SegmentDataStartOffset ));
return _bdgf .String ();};func (_abf *GenericRegion )copyLineAbove (_bad int )error {_fgb :=_bad *_abf .Bitmap .RowStride ;_bgc :=_fgb -_abf .Bitmap .RowStride ;for _bdac :=0;_bdac < _abf .Bitmap .RowStride ;_bdac ++{_gdcg ,_dcf :=_abf .Bitmap .GetByte (_bgc );
if _dcf !=nil {return _dcf ;};_bgc ++;if _dcf =_abf .Bitmap .SetByte (_fgb ,_gdcg );_dcf !=nil {return _dcf ;};_fgb ++;};return nil ;};var _ templater =&template1 {};func (_bdf *GenericRegion )decodeSLTP ()(int ,error ){switch _bdf .GBTemplate {case 0:_bdf ._efdd .SetIndex (0x9B25);
case 1:_bdf ._efdd .SetIndex (0x795);case 2:_bdf ._efdd .SetIndex (0xE5);case 3:_bdf ._efdd .SetIndex (0x195);};return _bdf ._cfb .DecodeBit (_bdf ._efdd );};func (_bcbd *TableSegment )HtPS ()int32 {return _bcbd ._bceb };func (_ccfc *Header )writeReferredToSegments (_degf _de .BinaryWriter )(_cfcg int ,_adgg error ){const _bbab ="\u0077\u0072\u0069te\u0052\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
var (_gfgg uint16 ;_ddc uint32 ;);_dbfb :=_ccfc .referenceSize ();_ebba :=1;_cfga :=make ([]byte ,_dbfb );for _ ,_fccf :=range _ccfc .RTSNumbers {switch _dbfb {case 4:_ddc =uint32 (_fccf );_d .BigEndian .PutUint32 (_cfga ,_ddc );_ebba ,_adgg =_degf .Write (_cfga );
if _adgg !=nil {return 0,_bf .Wrap (_adgg ,_bbab ,"u\u0069\u006e\u0074\u0033\u0032\u0020\u0073\u0069\u007a\u0065");};case 2:_gfgg =uint16 (_fccf );_d .BigEndian .PutUint16 (_cfga ,_gfgg );_ebba ,_adgg =_degf .Write (_cfga );if _adgg !=nil {return 0,_bf .Wrap (_adgg ,_bbab ,"\u0075\u0069\u006e\u0074\u0031\u0036");
};default:if _adgg =_degf .WriteByte (byte (_fccf ));_adgg !=nil {return 0,_bf .Wrap (_adgg ,_bbab ,"\u0075\u0069\u006et\u0038");};};_cfcg +=_ebba ;};return _cfcg ,nil ;};func (_aacf *TextRegion )readUseRefinement ()error {if !_aacf .UseRefinement ||_aacf .SbrTemplate !=0{return nil ;
};var (_baaf byte ;_fdaa error ;);_aacf .SbrATX =make ([]int8 ,2);_aacf .SbrATY =make ([]int8 ,2);_baaf ,_fdaa =_aacf ._fdge .ReadByte ();if _fdaa !=nil {return _fdaa ;};_aacf .SbrATX [0]=int8 (_baaf );_baaf ,_fdaa =_aacf ._fdge .ReadByte ();if _fdaa !=nil {return _fdaa ;
};_aacf .SbrATY [0]=int8 (_baaf );_baaf ,_fdaa =_aacf ._fdge .ReadByte ();if _fdaa !=nil {return _fdaa ;};_aacf .SbrATX [1]=int8 (_baaf );_baaf ,_fdaa =_aacf ._fdge .ReadByte ();if _fdaa !=nil {return _fdaa ;};_aacf .SbrATY [1]=int8 (_baaf );return nil ;
};func (_dgca *template1 )setIndex (_deed *_cde .DecoderStats ){_deed .SetIndex (0x080)};func (_egcb *SymbolDictionary )checkInput ()error {if _egcb .SdHuffDecodeHeightSelection ==2{_df .Log .Debug ("\u0053\u0079\u006d\u0062\u006fl\u0020\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u0053e\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0070\u0065r\u006d\u0069\u0074\u0074\u0065\u0064",_egcb .SdHuffDecodeHeightSelection );
};if _egcb .SdHuffDecodeWidthSelection ==2{_df .Log .Debug ("\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0057\u0069\u0064t\u0068\u0020\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061l\u0075\u0065\u0020\u006e\u006f\u0074 \u0070\u0065r\u006d\u0069t\u0074e\u0064",_egcb .SdHuffDecodeWidthSelection );
};if _egcb .IsHuffmanEncoded {if _egcb .SdTemplate !=0{_df .Log .Debug ("\u0053\u0044T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e \u0030\u0029",_egcb .SdTemplate );
};if !_egcb .UseRefinementAggregation {if !_egcb .UseRefinementAggregation {if _egcb ._cgbee {_df .Log .Debug ("\u0049\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074ex\u0074\u0052\u0065\u0074\u0061\u0069n\u0065\u0064\u0020\u003d\u0020\u0074\u0072\u0075\u0065\u0020\u0028\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0066\u0061\u006cs\u0065\u0029");
_egcb ._cgbee =false ;};if _egcb ._afg {_df .Log .Debug ("\u0069s\u0043\u006fd\u0069\u006e\u0067\u0043o\u006e\u0074\u0065x\u0074\u0055\u0073\u0065\u0064\u0020\u003d\u0020\u0074ru\u0065\u0020\u0028s\u0068\u006fu\u006c\u0064\u0020\u0062\u0065\u0020f\u0061\u006cs\u0065\u0029");
_egcb ._afg =false ;};};};}else {if _egcb .SdHuffBMSizeSelection !=0{_df .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066B\u004d\u0053\u0069\u007a\u0065\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_egcb .SdHuffBMSizeSelection =0;};if _egcb .SdHuffDecodeWidthSelection !=0{_df .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068\u0053\u0065\u006c\u0065\u0063\u0074\u0069o\u006e\u0020\u0073\u0068\u006fu\u006c\u0064 \u0062\u0065\u0020\u0030");
_egcb .SdHuffDecodeWidthSelection =0;};if _egcb .SdHuffDecodeHeightSelection !=0{_df .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0048e\u0069\u0067\u0068\u0074\u0053\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_egcb .SdHuffDecodeHeightSelection =0;};};if !_egcb .UseRefinementAggregation {if _egcb .SdrTemplate !=0{_df .Log .Debug ("\u0053\u0044\u0052\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u003d\u0020\u0025\u0064\u0020\u0028s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_egcb .SdrTemplate );
_egcb .SdrTemplate =0;};};if !_egcb .IsHuffmanEncoded ||!_egcb .UseRefinementAggregation {if _egcb .SdHuffAggInstanceSelection {_df .Log .Debug ("\u0053d\u0048\u0075f\u0066\u0041\u0067g\u0049\u006e\u0073\u0074\u0061\u006e\u0063e\u0053\u0065\u006c\u0065\u0063\u0074i\u006f\u006e\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_egcb .SdHuffAggInstanceSelection );
};};return nil ;};func (_accd *HalftoneRegion )checkInput ()error {if _accd .IsMMREncoded {if _accd .HTemplate !=0{_df .Log .Debug ("\u0048\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030",_accd .HTemplate );
};if _accd .HSkipEnabled {_df .Log .Debug ("\u0048\u0053\u006b\u0069\u0070\u0045\u006e\u0061\u0062\u006c\u0065\u0064\u0020\u0030\u0020\u0025\u0076\u0020(\u0073\u0068\u006f\u0075\u006c\u0064\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u0029",_accd .HSkipEnabled );
};};return nil ;};func (_fbdf *Header )readNumberOfReferredToSegments (_fbfe _de .StreamReader )(uint64 ,error ){const _dcdg ="\u0072\u0065\u0061\u0064\u004e\u0075\u006d\u0062\u0065\u0072O\u0066\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
_bdgfa ,_fdbf :=_fbfe .ReadBits (3);if _fdbf !=nil {return 0,_bf .Wrap (_fdbf ,_dcdg ,"\u0063\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0072\u0074\u0073");};_bdgfa &=0xf;var _dcdf []byte ;if _bdgfa <=4{_dcdf =make ([]byte ,5);for _cade :=0;_cade <=4;
_cade ++{_cebg ,_bbgd :=_fbfe .ReadBit ();if _bbgd !=nil {return 0,_bf .Wrap (_bbgd ,_dcdg ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_dcdf [_cade ]=byte (_cebg );};}else {_bdgfa ,_fdbf =_fbfe .ReadBits (29);if _fdbf !=nil {return 0,_fdbf ;
};_bdgfa &=_a .MaxInt32 ;_gdef :=(_bdgfa +8)>>3;_gdef <<=3;_dcdf =make ([]byte ,_gdef );var _bdadf uint64 ;for _bdadf =0;_bdadf < _gdef ;_bdadf ++{_aad ,_dba :=_fbfe .ReadBit ();if _dba !=nil {return 0,_bf .Wrap (_dba ,_dcdg ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};_dcdf [_bdadf ]=byte (_aad );};};return _bdgfa ,nil ;};func (_beff *GenericRegion )overrideAtTemplate0a (_ddg ,_debe ,_addd ,_gcga ,_gbd ,_ggg int )int {if _beff .GBAtOverride [0]{_ddg &=0xFFEF;if _beff .GBAtY [0]==0&&_beff .GBAtX [0]>=-int8 (_gbd ){_ddg |=(_gcga >>uint (int8 (_ggg )-_beff .GBAtX [0]&0x1))<<4;
}else {_ddg |=int (_beff .getPixel (_debe +int (_beff .GBAtX [0]),_addd +int (_beff .GBAtY [0])))<<4;};};if _beff .GBAtOverride [1]{_ddg &=0xFBFF;if _beff .GBAtY [1]==0&&_beff .GBAtX [1]>=-int8 (_gbd ){_ddg |=(_gcga >>uint (int8 (_ggg )-_beff .GBAtX [1]&0x1))<<10;
}else {_ddg |=int (_beff .getPixel (_debe +int (_beff .GBAtX [1]),_addd +int (_beff .GBAtY [1])))<<10;};};if _beff .GBAtOverride [2]{_ddg &=0xF7FF;if _beff .GBAtY [2]==0&&_beff .GBAtX [2]>=-int8 (_gbd ){_ddg |=(_gcga >>uint (int8 (_ggg )-_beff .GBAtX [2]&0x1))<<11;
}else {_ddg |=int (_beff .getPixel (_debe +int (_beff .GBAtX [2]),_addd +int (_beff .GBAtY [2])))<<11;};};if _beff .GBAtOverride [3]{_ddg &=0x7FFF;if _beff .GBAtY [3]==0&&_beff .GBAtX [3]>=-int8 (_gbd ){_ddg |=(_gcga >>uint (int8 (_ggg )-_beff .GBAtX [3]&0x1))<<15;
}else {_ddg |=int (_beff .getPixel (_debe +int (_beff .GBAtX [3]),_addd +int (_beff .GBAtY [3])))<<15;};};return _ddg ;};func (_gdf *GenericRefinementRegion )decodeTemplate (_eab ,_dff ,_babg ,_cfdg ,_eea ,_fed ,_dbd ,_ccb ,_cad ,_aed int ,_gee templater )(_gfa error ){var (_gdfc ,_eaf ,_deea ,_fbc ,_fadc int16 ;
_aab ,_ege ,_efg ,_cffg int ;_gde byte ;);if _cad >=1&&(_cad -1)< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed -_cfdg );if _gfa !=nil {return ;};_aab =int (_gde );};if _cad >=0&&(_cad )< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed );
if _gfa !=nil {return ;};_ege =int (_gde );};if _cad >=-1&&(_cad +1)< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed +_cfdg );if _gfa !=nil {return ;};_efg =int (_gde );};_aed ++;if _eab >=1{_gde ,_gfa =_gdf .RegionBitmap .GetByte (_ccb -_babg );
if _gfa !=nil {return ;};_cffg =int (_gde );};_ccb ++;_fbf :=_gdf .ReferenceDX %8;_dbbg :=6+_fbf ;_gecf :=_aed %_cfdg ;if _dbbg >=0{if _dbbg < 8{_gdfc =int16 (_aab >>uint (_dbbg ))&0x07;};if _dbbg < 8{_eaf =int16 (_ege >>uint (_dbbg ))&0x07;};if _dbbg < 8{_deea =int16 (_efg >>uint (_dbbg ))&0x07;
};if _dbbg ==6&&_gecf > 1{if _cad >=1&&(_cad -1)< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed -_cfdg -2);if _gfa !=nil {return _gfa ;};_gdfc |=int16 (_gde <<2)&0x04;};if _cad >=0&&_cad < _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed -2);
if _gfa !=nil {return _gfa ;};_eaf |=int16 (_gde <<2)&0x04;};if _cad >=-1&&_cad +1< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed +_cfdg -2);if _gfa !=nil {return _gfa ;};_deea |=int16 (_gde <<2)&0x04;};};if _dbbg ==0{_aab =0;
_ege =0;_efg =0;if _gecf < _cfdg -1{if _cad >=1&&_cad -1< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed -_cfdg );if _gfa !=nil {return _gfa ;};_aab =int (_gde );};if _cad >=0&&_cad < _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed );
if _gfa !=nil {return _gfa ;};_ege =int (_gde );};if _cad >=-1&&_cad +1< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed +_cfdg );if _gfa !=nil {return _gfa ;};_efg =int (_gde );};};_aed ++;};}else {_gdfc =int16 (_aab <<1)&0x07;
_eaf =int16 (_ege <<1)&0x07;_deea =int16 (_efg <<1)&0x07;_aab =0;_ege =0;_efg =0;if _gecf < _cfdg -1{if _cad >=1&&_cad -1< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed -_cfdg );if _gfa !=nil {return _gfa ;};_aab =int (_gde );
};if _cad >=0&&_cad < _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed );if _gfa !=nil {return _gfa ;};_ege =int (_gde );};if _cad >=-1&&_cad +1< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed +_cfdg );
if _gfa !=nil {return _gfa ;};_efg =int (_gde );};_aed ++;};_gdfc |=int16 ((_aab >>7)&0x07);_eaf |=int16 ((_ege >>7)&0x07);_deea |=int16 ((_efg >>7)&0x07);};_fbc =int16 (_cffg >>6);_fadc =0;_ceg :=(2-_fbf )%8;_aab <<=uint (_ceg );_ege <<=uint (_ceg );_efg <<=uint (_ceg );
_cffg <<=2;var _bcd int ;for _ab :=0;_ab < _dff ;_ab ++{_acd :=_ab &0x07;_ecf :=_gee .form (_gdfc ,_eaf ,_deea ,_fbc ,_fadc );if _gdf ._bef {_gde ,_gfa =_gdf .RegionBitmap .GetByte (_gdf .RegionBitmap .GetByteIndex (_ab ,_eab ));if _gfa !=nil {return _gfa ;
};_gdf ._bga .SetIndex (int32 (_gdf .overrideAtTemplate0 (int (_ecf ),_ab ,_eab ,int (_gde ),_acd )));}else {_gdf ._bga .SetIndex (int32 (_ecf ));};_bcd ,_gfa =_gdf ._gd .DecodeBit (_gdf ._bga );if _gfa !=nil {return _gfa ;};if _gfa =_gdf .RegionBitmap .SetPixel (_ab ,_eab ,byte (_bcd ));
_gfa !=nil {return _gfa ;};_gdfc =((_gdfc <<1)|0x01&int16 (_aab >>7))&0x07;_eaf =((_eaf <<1)|0x01&int16 (_ege >>7))&0x07;_deea =((_deea <<1)|0x01&int16 (_efg >>7))&0x07;_fbc =((_fbc <<1)|0x01&int16 (_cffg >>7))&0x07;_fadc =int16 (_bcd );if (_ab -int (_gdf .ReferenceDX ))%8==5{_aab =0;
_ege =0;_efg =0;if ((_ab -int (_gdf .ReferenceDX ))/8)+1< _gdf .ReferenceBitmap .RowStride {if _cad >=1&&(_cad -1)< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed -_cfdg );if _gfa !=nil {return _gfa ;};_aab =int (_gde );
};if _cad >=0&&_cad < _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed );if _gfa !=nil {return _gfa ;};_ege =int (_gde );};if _cad >=-1&&(_cad +1)< _gdf .ReferenceBitmap .Height {_gde ,_gfa =_gdf .ReferenceBitmap .GetByte (_aed +_cfdg );
if _gfa !=nil {return _gfa ;};_efg =int (_gde );};};_aed ++;}else {_aab <<=1;_ege <<=1;_efg <<=1;};if _acd ==5&&_eab >=1{if ((_ab >>3)+1)>=_gdf .RegionBitmap .RowStride {_cffg =0;}else {_gde ,_gfa =_gdf .RegionBitmap .GetByte (_ccb -_babg );if _gfa !=nil {return _gfa ;
};_cffg =int (_gde );};_ccb ++;}else {_cffg <<=1;};};return nil ;};func (_abc *GenericRegion )computeSegmentDataStructure ()error {_abc .DataOffset =_abc ._gdd .StreamPosition ();_abc .DataHeaderLength =_abc .DataOffset -_abc .DataHeaderOffset ;_abc .DataLength =int64 (_abc ._gdd .Length ())-_abc .DataHeaderLength ;
return nil ;};func (_fef *GenericRegion )Encode (w _de .BinaryWriter )(_add int ,_edbg error ){const _fbd ="G\u0065n\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069o\u006e\u002e\u0045\u006eco\u0064\u0065";if _fef .Bitmap ==nil {return 0,_bf .Error (_fbd ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");
};_bcg ,_edbg :=_fef .RegionSegment .Encode (w );if _edbg !=nil {return 0,_bf .Wrap (_edbg ,_fbd ,"\u0052\u0065\u0067\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_add +=_bcg ;if _edbg =w .SkipBits (4);_edbg !=nil {return _add ,_bf .Wrap (_edbg ,_fbd ,"\u0073k\u0069p\u0020\u0072\u0065\u0073\u0065r\u0076\u0065d\u0020\u0062\u0069\u0074\u0073");
};var _cec int ;if _fef .IsTPGDon {_cec =1;};if _edbg =w .WriteBit (_cec );_edbg !=nil {return _add ,_bf .Wrap (_edbg ,_fbd ,"\u0074\u0070\u0067\u0064\u006f\u006e");};_cec =0;if _edbg =w .WriteBit (int (_fef .GBTemplate >>1)&0x01);_edbg !=nil {return _add ,_bf .Wrap (_edbg ,_fbd ,"f\u0069r\u0073\u0074\u0020\u0067\u0062\u0074\u0065\u006dp\u006c\u0061\u0074\u0065 b\u0069\u0074");
};if _edbg =w .WriteBit (int (_fef .GBTemplate )&0x01);_edbg !=nil {return _add ,_bf .Wrap (_edbg ,_fbd ,"s\u0065\u0063\u006f\u006ed \u0067b\u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u0062\u0069\u0074");};if _fef .UseMMR {_cec =1;};if _edbg =w .WriteBit (_cec );
_edbg !=nil {return _add ,_bf .Wrap (_edbg ,_fbd ,"u\u0073\u0065\u0020\u004d\u004d\u0052\u0020\u0062\u0069\u0074");};_add ++;if _bcg ,_edbg =_fef .writeGBAtPixels (w );_edbg !=nil {return _add ,_bf .Wrap (_edbg ,_fbd ,"");};_add +=_bcg ;_fba :=_bb .New ();
if _edbg =_fba .EncodeBitmap (_fef .Bitmap ,_fef .IsTPGDon );_edbg !=nil {return _add ,_bf .Wrap (_edbg ,_fbd ,"");};_fba .Final ();var _aaa int64 ;if _aaa ,_edbg =_fba .WriteTo (w );_edbg !=nil {return _add ,_bf .Wrap (_edbg ,_fbd ,"");};_add +=int (_aaa );
return _add ,nil ;};func (_afbc *PageInformationSegment )readCombinationOperator ()error {_fec ,_daf :=_afbc ._dcg .ReadBits (2);if _daf !=nil {return _daf ;};_afbc ._aaf =_be .CombinationOperator (int (_fec ));return nil ;};func (_fagc *SymbolDictionary )readNumberOfNewSymbols ()error {_aeac ,_dcefc :=_fagc ._ggbd .ReadBits (32);
if _dcefc !=nil {return _dcefc ;};_fagc .NumberOfNewSymbols =uint32 (_aeac &_a .MaxUint32 );return nil ;};func (_adfe *PatternDictionary )setGbAtPixels (){if _adfe .HDTemplate ==0{_adfe .GBAtX =make ([]int8 ,4);_adfe .GBAtY =make ([]int8 ,4);_adfe .GBAtX [0]=-int8 (_adfe .HdpWidth );
_adfe .GBAtY [0]=0;_adfe .GBAtX [1]=-3;_adfe .GBAtY [1]=-1;_adfe .GBAtX [2]=2;_adfe .GBAtY [2]=-2;_adfe .GBAtX [3]=-2;_adfe .GBAtY [3]=-2;}else {_adfe .GBAtX =[]int8 {-int8 (_adfe .HdpWidth )};_adfe .GBAtY =[]int8 {0};};};func (_efef *PageInformationSegment )CombinationOperator ()_be .CombinationOperator {return _efef ._aaf };
func (_fdg *GenericRegion )setOverrideFlag (_bee int ){_fdg .GBAtOverride [_bee ]=true ;_fdg ._gbf =true ;};func (_dcc *HalftoneRegion )Init (hd *Header ,r _de .StreamReader )error {_dcc ._ffga =r ;_dcc ._adg =hd ;_dcc .RegionSegment =NewRegionSegment (r );
return _dcc .parseHeader ();};func (_eec *HalftoneRegion )renderPattern (_efe [][]int )(_cege error ){var _cgbg ,_bcca int ;for _ddga :=0;_ddga < int (_eec .HGridHeight );_ddga ++{for _cegc :=0;_cegc < int (_eec .HGridWidth );_cegc ++{_cgbg =_eec .computeX (_ddga ,_cegc );
_bcca =_eec .computeY (_ddga ,_cegc );_fce :=_eec .Patterns [_efe [_ddga ][_cegc ]];if _cege =_be .Blit (_fce ,_eec .HalftoneRegionBitmap ,_cgbg +int (_eec .HGridX ),_bcca +int (_eec .HGridY ),_eec .CombinationOperator );_cege !=nil {return _cege ;};};
};return nil ;};func (_dcdgg *SymbolDictionary )String ()string {_aedd :=&_cb .Builder {};_aedd .WriteString ("\n\u005b\u0053\u0059\u004dBO\u004c-\u0044\u0049\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u000a");_aedd .WriteString (_f .Sprintf ("\u0009-\u0020S\u0064\u0072\u0054\u0065\u006dp\u006c\u0061t\u0065\u0020\u0025\u0076\u000a",_dcdgg .SdrTemplate ));
_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0025\u0076\u000a",_dcdgg .SdTemplate ));_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006eg\u0043\u006f\u006e\u0074\u0065\u0078\u0074R\u0065\u0074\u0061\u0069\u006e\u0065\u0064\u0020\u0025\u0076\u000a",_dcdgg ._cgbee ));
_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074\u0065\u0078\u0074\u0055\u0073\u0065\u0064 \u0025\u0076\u000a",_dcdgg ._afg ));_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_dcdgg .SdHuffAggInstanceSelection ));
_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053d\u0048\u0075\u0066\u0066\u0042\u004d\u0053\u0069\u007a\u0065S\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020%\u0076\u000a",_dcdgg .SdHuffBMSizeSelection ));_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_dcdgg .SdHuffDecodeWidthSelection ));
_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020Sd\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064e\u0048e\u0069g\u0068t\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_dcdgg .SdHuffDecodeHeightSelection ));_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020U\u0073\u0065\u0052\u0065f\u0069\u006e\u0065\u006d\u0065\u006e\u0074A\u0067\u0067\u0072\u0065\u0067\u0061\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_dcdgg .UseRefinementAggregation ));
_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020is\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0065\u0064\u0020\u0025\u0076\u000a",_dcdgg .IsHuffmanEncoded ));_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_dcdgg .SdATX ));
_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_dcdgg .SdATY ));_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_dcdgg .SdrATX ));
_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_dcdgg .SdrATY ));_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u004e\u0075\u006d\u0062\u0065\u0072\u004ff\u0045\u0078\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_dcdgg .NumberOfExportedSymbols ));
_aedd .WriteString (_f .Sprintf ("\u0009-\u0020\u004e\u0075\u006db\u0065\u0072\u004f\u0066\u004ee\u0077S\u0079m\u0062\u006f\u006c\u0073\u0020\u0025\u0076\n",_dcdgg .NumberOfNewSymbols ));_aedd .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u004ff\u0049\u006d\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_dcdgg ._eegb ));
_aedd .WriteString (_f .Sprintf ("\u0009\u002d \u006e\u0075\u006d\u0062\u0065\u0072\u004f\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0064\u0053\u0079\u006d\u0062\u006f\u006c\u0073 %\u0076\u000a",_dcdgg ._ddbg ));return _aedd .String ();};type TextRegion struct{_fdge _de .StreamReader ;
RegionInfo *RegionSegment ;SbrTemplate int8 ;SbDsOffset int8 ;DefaultPixel int8 ;CombinationOperator _be .CombinationOperator ;IsTransposed int8 ;ReferenceCorner int16 ;LogSBStrips int16 ;UseRefinement bool ;IsHuffmanEncoded bool ;SbHuffRSize int8 ;SbHuffRDY int8 ;
SbHuffRDX int8 ;SbHuffRDHeight int8 ;SbHuffRDWidth int8 ;SbHuffDT int8 ;SbHuffDS int8 ;SbHuffFS int8 ;SbrATX []int8 ;SbrATY []int8 ;NumberOfSymbolInstances uint32 ;_bddf int64 ;SbStrips int8 ;NumberOfSymbols uint32 ;RegionBitmap *_be .Bitmap ;Symbols []*_be .Bitmap ;
_gggg *_cde .Decoder ;_eabc *GenericRefinementRegion ;_babc *_cde .DecoderStats ;_faeb *_cde .DecoderStats ;_gfeb *_cde .DecoderStats ;_dcefcc *_cde .DecoderStats ;_gedee *_cde .DecoderStats ;_fcde *_cde .DecoderStats ;_dbbc *_cde .DecoderStats ;_ebec *_cde .DecoderStats ;
_agef *_cde .DecoderStats ;_bed *_cde .DecoderStats ;_ggac *_cde .DecoderStats ;_gade int8 ;_edgc *_fa .FixedSizeTable ;Header *Header ;_aadd _fa .Tabler ;_fbfce _fa .Tabler ;_cdbb _fa .Tabler ;_agge _fa .Tabler ;_eefd _fa .Tabler ;_ebdd _fa .Tabler ;_gcgd _fa .Tabler ;
_fecb _fa .Tabler ;_cebfb ,_bgdd map[int ]int ;_deabf []int ;_gggb *_be .Points ;_gge *_be .Bitmaps ;_cbdb *_ae .IntSlice ;_ddde ,_aebd int ;_deda *_be .Boxes ;};type Segmenter interface{Init (_decca *Header ,_bdc _de .StreamReader )error ;};var (_cfdb Segmenter ;
_daaa =map[Type ]func ()Segmenter {TSymbolDictionary :func ()Segmenter {return &SymbolDictionary {}},TIntermediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateLosslessTextRegion :func ()Segmenter {return &TextRegion {}},TPatternDictionary :func ()Segmenter {return &PatternDictionary {}},TIntermediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateLosslessHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TIntermediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateLosslessGenericRegion :func ()Segmenter {return &GenericRegion {}},TIntermediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateLosslessGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TPageInformation :func ()Segmenter {return &PageInformationSegment {}},TEndOfPage :func ()Segmenter {return _cfdb },TEndOfStrip :func ()Segmenter {return &EndOfStripe {}},TEndOfFile :func ()Segmenter {return _cfdb },TProfiles :func ()Segmenter {return _cfdb },TTables :func ()Segmenter {return &TableSegment {}},TExtension :func ()Segmenter {return _cfdb },TBitmap :func ()Segmenter {return _cfdb }};
);func (_cdaae *PageInformationSegment )readWidthAndHeight ()error {_dbbd ,_fadf :=_cdaae ._dcg .ReadBits (32);if _fadf !=nil {return _fadf ;};_cdaae .PageBMWidth =int (_dbbd &_a .MaxInt32 );_dbbd ,_fadf =_cdaae ._dcg .ReadBits (32);if _fadf !=nil {return _fadf ;
};_cdaae .PageBMHeight =int (_dbbd &_a .MaxInt32 );return nil ;};func (_egff *GenericRegion )setParametersMMR (_feb bool ,_fdfd ,_cgcdf int64 ,_dbeb ,_ddgd uint32 ,_ggb byte ,_dce ,_dabeb bool ,_ccbc ,_cbcbf []int8 ){_egff .DataOffset =_fdfd ;_egff .DataLength =_cgcdf ;
_egff .RegionSegment =&RegionSegment {};_egff .RegionSegment .BitmapHeight =_dbeb ;_egff .RegionSegment .BitmapWidth =_ddgd ;_egff .GBTemplate =_ggb ;_egff .IsMMREncoded =_feb ;_egff .IsTPGDon =_dce ;_egff .GBAtX =_ccbc ;_egff .GBAtY =_cbcbf ;};func (_gcef *SymbolDictionary )decodeHeightClassCollectiveBitmap (_fffa int64 ,_ebdf ,_cbfc uint32 )(*_be .Bitmap ,error ){if _fffa ==0{_cggb :=_be .New (int (_cbfc ),int (_ebdf ));
var (_cfbg byte ;_bfef error ;);for _egcf :=0;_egcf < len (_cggb .Data );_egcf ++{_cfbg ,_bfef =_gcef ._ggbd .ReadByte ();if _bfef !=nil {return nil ,_bfef ;};if _bfef =_cggb .SetByte (_egcf ,_cfbg );_bfef !=nil {return nil ,_bfef ;};};return _cggb ,nil ;
};if _gcef ._dcad ==nil {_gcef ._dcad =NewGenericRegion (_gcef ._ggbd );};_gcef ._dcad .setParameters (true ,_gcef ._ggbd .StreamPosition (),_fffa ,_ebdf ,_cbfc );_gdfcc ,_ddaf :=_gcef ._dcad .GetRegionBitmap ();if _ddaf !=nil {return nil ,_ddaf ;};return _gdfcc ,nil ;
};func (_fagd *TextRegion )createRegionBitmap ()error {_fagd .RegionBitmap =_be .New (int (_fagd .RegionInfo .BitmapWidth ),int (_fagd .RegionInfo .BitmapHeight ));if _fagd .DefaultPixel !=0{_fagd .RegionBitmap .SetDefaultPixel ();};return nil ;};func (_aegg *Header )writeReferredToCount (_cfca _de .BinaryWriter )(_efdg int ,_eaed error ){const _cfcc ="w\u0072i\u0074\u0065\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0043ou\u006e\u0074";
_aegg .RTSNumbers =make ([]int ,len (_aegg .RTSegments ));for _fgf ,_agdc :=range _aegg .RTSegments {_aegg .RTSNumbers [_fgf ]=int (_agdc .SegmentNumber );};if len (_aegg .RTSNumbers )<=4{var _ffd byte ;if len (_aegg .RetainBits )>=1{_ffd =_aegg .RetainBits [0];
};_ffd |=byte (len (_aegg .RTSNumbers ))<<5;if _eaed =_cfca .WriteByte (_ffd );_eaed !=nil {return 0,_bf .Wrap (_eaed ,_cfcc ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return 1,nil ;};_eeef :=uint32 (len (_aegg .RTSNumbers ));
_aagd :=make ([]byte ,4+_ae .Ceil (len (_aegg .RTSNumbers )+1,8));_eeef |=0x7<<29;_d .BigEndian .PutUint32 (_aagd ,_eeef );copy (_aagd [1:],_aegg .RetainBits );_efdg ,_eaed =_cfca .Write (_aagd );if _eaed !=nil {return 0,_bf .Wrap (_eaed ,_cfcc ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};return _efdg ,nil ;};func (_cbc *GenericRefinementRegion )decodeTypicalPredictedLine (_ea ,_baff ,_ag ,_deab ,_cgg ,_dg int )error {_ffc :=_ea -int (_cbc .ReferenceDY );_bcc :=_cbc .ReferenceBitmap .GetByteIndex (0,_ffc );_gc :=_cbc .RegionBitmap .GetByteIndex (0,_ea );
var _egb error ;switch _cbc .TemplateID {case 0:_egb =_cbc .decodeTypicalPredictedLineTemplate0 (_ea ,_baff ,_ag ,_deab ,_cgg ,_dg ,_gc ,_ffc ,_bcc );case 1:_egb =_cbc .decodeTypicalPredictedLineTemplate1 (_ea ,_baff ,_ag ,_deab ,_cgg ,_dg ,_gc ,_ffc ,_bcc );
};return _egb ;};const (ORandom OrganizationType =iota ;OSequential ;);func (_badb *RegionSegment )String ()string {_cdgeb :=&_cb .Builder {};_cdgeb .WriteString ("\u0009[\u0052E\u0047\u0049\u004f\u004e\u0020S\u0045\u0047M\u0045\u004e\u0054\u005d\u000a");
_cdgeb .WriteString (_f .Sprintf ("\t\u0009\u002d\u0020\u0042\u0069\u0074m\u0061\u0070\u0020\u0028\u0077\u0069d\u0074\u0068\u002c\u0020\u0068\u0065\u0069g\u0068\u0074\u0029\u0020\u005b\u0025\u0064\u0078\u0025\u0064]\u000a",_badb .BitmapWidth ,_badb .BitmapHeight ));
_cdgeb .WriteString (_f .Sprintf ("\u0009\u0009\u002d\u0020L\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0028\u0078,\u0079)\u003a\u0020\u005b\u0025\u0064\u002c\u0025d\u005d\u000a",_badb .XLocation ,_badb .YLocation ));_cdgeb .WriteString (_f .Sprintf ("\t\u0009\u002d\u0020\u0043\u006f\u006db\u0069\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0073",_badb .CombinaionOperator ));
return _cdgeb .String ();};func (_cgda *GenericRegion )Init (h *Header ,r _de .StreamReader )error {_cgda .RegionSegment =NewRegionSegment (r );_cgda ._gdd =r ;return _cgda .parseHeader ();};func (_gbcg *template0 )setIndex (_ebcf *_cde .DecoderStats ){_ebcf .SetIndex (0x100)};
func (_bbgb *TextRegion )checkInput ()error {const _fcecg ="\u0063\u0068\u0065\u0063\u006b\u0049\u006e\u0070\u0075\u0074";if !_bbgb .UseRefinement {if _bbgb .SbrTemplate !=0{_df .Log .Debug ("\u0053\u0062\u0072Te\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");
_bbgb .SbrTemplate =0;};};if _bbgb .SbHuffFS ==2||_bbgb .SbHuffRDWidth ==2||_bbgb .SbHuffRDHeight ==2||_bbgb .SbHuffRDX ==2||_bbgb .SbHuffRDY ==2{return _bf .Error (_fcecg ,"h\u0075\u0066\u0066\u006d\u0061\u006e \u0066\u006c\u0061\u0067\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064");
};if !_bbgb .UseRefinement {if _bbgb .SbHuffRSize !=0{_df .Log .Debug ("\u0053\u0062\u0048uf\u0066\u0052\u0053\u0069\u007a\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_bbgb .SbHuffRSize =0;};if _bbgb .SbHuffRDY !=0{_df .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044Y\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");
_bbgb .SbHuffRDY =0;};if _bbgb .SbHuffRDX !=0{_df .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044X\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");_bbgb .SbHuffRDX =0;};if _bbgb .SbHuffRDWidth !=0{_df .Log .Debug ("\u0053b\u0048\u0075\u0066\u0066R\u0044\u0057\u0069\u0064\u0074h\u0020s\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u00200");
_bbgb .SbHuffRDWidth =0;};if _bbgb .SbHuffRDHeight !=0{_df .Log .Debug ("\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069g\u0068\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020b\u0065\u0020\u0030");_bbgb .SbHuffRDHeight =0;};};return nil ;
};func (_dgbb *SymbolDictionary )setAtPixels ()error {if _dgbb .IsHuffmanEncoded {return nil ;};_fdfa :=1;if _dgbb .SdTemplate ==0{_fdfa =4;};if _gfdd :=_dgbb .readAtPixels (_fdfa );_gfdd !=nil {return _gfdd ;};return nil ;};func (_ecfb *GenericRegion )parseHeader ()(_gfd error ){_df .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052I\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0050\u0061\u0072s\u0069\u006e\u0067\u0048\u0065\u0061\u0064e\u0072\u002e\u002e\u002e");
defer func (){if _gfd !=nil {_df .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e]\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065r\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0077\u0069th\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u0025\u0076",_gfd );
}else {_df .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049C\u002d\u0052\u0045G\u0049\u004f\u004e]\u0020\u0050a\u0072\u0073\u0069\u006e\u0067\u0048e\u0061de\u0072\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0053\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079\u002e\u002e\u002e");
};}();var (_ffe int ;_cgb uint64 ;);if _gfd =_ecfb .RegionSegment .parseHeader ();_gfd !=nil {return _gfd ;};if _ ,_gfd =_ecfb ._gdd .ReadBits (3);_gfd !=nil {return _gfd ;};_ffe ,_gfd =_ecfb ._gdd .ReadBit ();if _gfd !=nil {return _gfd ;};if _ffe ==1{_ecfb .UseExtTemplates =true ;
};_ffe ,_gfd =_ecfb ._gdd .ReadBit ();if _gfd !=nil {return _gfd ;};if _ffe ==1{_ecfb .IsTPGDon =true ;};_cgb ,_gfd =_ecfb ._gdd .ReadBits (2);if _gfd !=nil {return _gfd ;};_ecfb .GBTemplate =byte (_cgb &0xf);_ffe ,_gfd =_ecfb ._gdd .ReadBit ();if _gfd !=nil {return _gfd ;
};if _ffe ==1{_ecfb .IsMMREncoded =true ;};if !_ecfb .IsMMREncoded {_dgf :=1;if _ecfb .GBTemplate ==0{_dgf =4;if _ecfb .UseExtTemplates {_dgf =12;};};if _gfd =_ecfb .readGBAtPixels (_dgf );_gfd !=nil {return _gfd ;};};if _gfd =_ecfb .computeSegmentDataStructure ();
_gfd !=nil {return _gfd ;};_df .Log .Trace ("\u0025\u0073",_ecfb );return nil ;};func (_agc *GenericRegion )readGBAtPixels (_ged int )error {const _aabc ="\u0072\u0065\u0061\u0064\u0047\u0042\u0041\u0074\u0050i\u0078\u0065\u006c\u0073";_agc .GBAtX =make ([]int8 ,_ged );
_agc .GBAtY =make ([]int8 ,_ged );for _dae :=0;_dae < _ged ;_dae ++{_dfe ,_dbeg :=_agc ._gdd .ReadByte ();if _dbeg !=nil {return _bf .Wrapf (_dbeg ,_aabc ,"\u0058\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_dae );};_agc .GBAtX [_dae ]=int8 (_dfe );
_dfe ,_dbeg =_agc ._gdd .ReadByte ();if _dbeg !=nil {return _bf .Wrapf (_dbeg ,_aabc ,"\u0059\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_dae );};_agc .GBAtY [_dae ]=int8 (_dfe );};return nil ;};func (_efaed *RegionSegment )Encode (w _de .BinaryWriter )(_dcef int ,_fddbd error ){const _beea ="R\u0065g\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065n\u0074\u002e\u0045\u006eco\u0064\u0065";
_dcdgb :=make ([]byte ,4);_d .BigEndian .PutUint32 (_dcdgb ,_efaed .BitmapWidth );_dcef ,_fddbd =w .Write (_dcdgb );if _fddbd !=nil {return 0,_bf .Wrap (_fddbd ,_beea ,"\u0057\u0069\u0064t\u0068");};_d .BigEndian .PutUint32 (_dcdgb ,_efaed .BitmapHeight );
var _fdae int ;_fdae ,_fddbd =w .Write (_dcdgb );if _fddbd !=nil {return 0,_bf .Wrap (_fddbd ,_beea ,"\u0048\u0065\u0069\u0067\u0068\u0074");};_dcef +=_fdae ;_d .BigEndian .PutUint32 (_dcdgb ,_efaed .XLocation );_fdae ,_fddbd =w .Write (_dcdgb );if _fddbd !=nil {return 0,_bf .Wrap (_fddbd ,_beea ,"\u0058L\u006f\u0063\u0061\u0074\u0069\u006fn");
};_dcef +=_fdae ;_d .BigEndian .PutUint32 (_dcdgb ,_efaed .YLocation );_fdae ,_fddbd =w .Write (_dcdgb );if _fddbd !=nil {return 0,_bf .Wrap (_fddbd ,_beea ,"\u0059L\u006f\u0063\u0061\u0074\u0069\u006fn");};_dcef +=_fdae ;if _fddbd =w .WriteByte (byte (_efaed .CombinaionOperator )&0x07);
_fddbd !=nil {return 0,_bf .Wrap (_fddbd ,_beea ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};_dcef ++;return _dcef ,nil ;};func (_efd *GenericRefinementRegion )setParameters (_fda *_cde .DecoderStats ,_gbb *_cde .Decoder ,_gebg int8 ,_ffcg ,_aba uint32 ,_afe *_be .Bitmap ,_beb ,_gbc int32 ,_adfg bool ,_eeab []int8 ,_dda []int8 ){_df .Log .Trace ("\u005b\u0047\u0045NE\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052E\u0047I\u004fN\u005d \u0073\u0065\u0074\u0050\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");
if _fda !=nil {_efd ._bga =_fda ;};if _gbb !=nil {_efd ._gd =_gbb ;};_efd .TemplateID =_gebg ;_efd .RegionInfo .BitmapWidth =_ffcg ;_efd .RegionInfo .BitmapHeight =_aba ;_efd .ReferenceBitmap =_afe ;_efd .ReferenceDX =_beb ;_efd .ReferenceDY =_gbc ;_efd .IsTPGROn =_adfg ;
_efd .GrAtX =_eeab ;_efd .GrAtY =_dda ;_efd .RegionBitmap =nil ;_df .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073 f\u0069\u006ei\u0073\u0068\u0065\u0064\u002e\u0020\u0025\u0073",_efd );
};func (_cfd *GenericRefinementRegion )decodeSLTP ()(int ,error ){_cfd .Template .setIndex (_cfd ._bga );return _cfd ._gd .DecodeBit (_cfd ._bga );};func (_fagf *PageInformationSegment )CombinationOperatorOverrideAllowed ()bool {return _fagf ._ecdg };func (_cbcb *GenericRefinementRegion )parseHeader ()(_cce error ){_df .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072s\u0069\u006e\u0067\u0020\u0048e\u0061\u0064e\u0072\u002e\u002e\u002e");
_bcb :=_bg .Now ();defer func (){if _cce ==nil {_df .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045G\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020h\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0069\u006e\u0069\u0073\u0068id\u0020\u0069\u006e\u003a\u0020\u0025\u0064\u0020\u006e\u0073",_bg .Since (_bcb ).Nanoseconds ());
}else {_df .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0073",_cce );
};}();if _cce =_cbcb .RegionInfo .parseHeader ();_cce !=nil {return _cce ;};_ ,_cce =_cbcb ._bgg .ReadBits (6);if _cce !=nil {return _cce ;};_cbcb .IsTPGROn ,_cce =_cbcb ._bgg .ReadBool ();if _cce !=nil {return _cce ;};var _dde int ;_dde ,_cce =_cbcb ._bgg .ReadBit ();
if _cce !=nil {return _cce ;};_cbcb .TemplateID =int8 (_dde );switch _cbcb .TemplateID {case 0:_cbcb .Template =_cbcb ._ee ;if _cce =_cbcb .readAtPixels ();_cce !=nil {return ;};case 1:_cbcb .Template =_cbcb ._cg ;};return nil ;};func (_aeca *TextRegion )decodeCurrentT ()(int64 ,error ){if _aeca .SbStrips !=1{if _aeca .IsHuffmanEncoded {_agea ,_efdb :=_aeca ._fdge .ReadBits (byte (_aeca .LogSBStrips ));
return int64 (_agea ),_efdb ;};_dbdeg ,_bcaga :=_aeca ._gggg .DecodeInt (_aeca ._dcefcc );if _bcaga !=nil {return 0,_bcaga ;};return int64 (_dbdeg ),nil ;};return 0,nil ;};func (_gcacb *SymbolDictionary )parseHeader ()(_afac error ){_df .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _afac !=nil {_df .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u0020\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u005b\u0050\u0041\u0052SE\u002d\u0048\u0045A\u0044\u0045R\u005d\u0020\u0066\u0061\u0069\u006ce\u0064\u002e \u0025\u0076",_afac );
}else {_df .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _afac =_gcacb .readRegionFlags ();_afac !=nil {return _afac ;};if _afac =_gcacb .setAtPixels ();_afac !=nil {return _afac ;};if _afac =_gcacb .setRefinementAtPixels ();_afac !=nil {return _afac ;};if _afac =_gcacb .readNumberOfExportedSymbols ();
_afac !=nil {return _afac ;};if _afac =_gcacb .readNumberOfNewSymbols ();_afac !=nil {return _afac ;};if _afac =_gcacb .setInSyms ();_afac !=nil {return _afac ;};if _gcacb ._afg {_gaae :=_gcacb .Header .RTSegments ;for _bdd :=len (_gaae )-1;_bdd >=0;_bdd --{if _gaae [_bdd ].Type ==0{_fdbd ,_fgca :=_gaae [_bdd ].SegmentData .(*SymbolDictionary );
if !_fgca {_afac =_f .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074:\u0020\u0025\u0076\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020S\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006fna\u0072\u0079\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_gaae [_bdd ]);
return _afac ;};if _fdbd ._afg {_gcacb .setRetainedCodingContexts (_fdbd );};break ;};};};if _afac =_gcacb .checkInput ();_afac !=nil {return _afac ;};return nil ;};func (_fdb *GenericRefinementRegion )readAtPixels ()error {_fdb .GrAtX =make ([]int8 ,2);
_fdb .GrAtY =make ([]int8 ,2);_dgc ,_gaf :=_fdb ._bgg .ReadByte ();if _gaf !=nil {return _gaf ;};_fdb .GrAtX [0]=int8 (_dgc );_dgc ,_gaf =_fdb ._bgg .ReadByte ();if _gaf !=nil {return _gaf ;};_fdb .GrAtY [0]=int8 (_dgc );_dgc ,_gaf =_fdb ._bgg .ReadByte ();
if _gaf !=nil {return _gaf ;};_fdb .GrAtX [1]=int8 (_dgc );_dgc ,_gaf =_fdb ._bgg .ReadByte ();if _gaf !=nil {return _gaf ;};_fdb .GrAtY [1]=int8 (_dgc );return nil ;};type OrganizationType uint8 ;func (_ccbe *SymbolDictionary )getSbSymCodeLen ()int8 {_bebc :=int8 (_a .Ceil (_a .Log (float64 (_ccbe ._eegb +_ccbe .NumberOfNewSymbols ))/_a .Log (2)));
if _ccbe .IsHuffmanEncoded &&_bebc < 1{return 1;};return _bebc ;};func (_aeb *HalftoneRegion )shiftAndFill (_ggc int )int {_ggc >>=8;if _ggc < 0{_aee :=int (_a .Log (float64 (_gdcb (_ggc )))/_a .Log (2));_cga :=31-_aee ;for _aegc :=1;_aegc < _cga ;_aegc ++{_ggc |=1<<uint (31-_aegc );
};};return _ggc ;};func (_gaa *SymbolDictionary )getUserTable (_gfbg int )(_fa .Tabler ,error ){var _gdefb int ;for _ ,_aceda :=range _gaa .Header .RTSegments {if _aceda .Type ==53{if _gdefb ==_gfbg {_cfea ,_cfcf :=_aceda .GetSegmentData ();if _cfcf !=nil {return nil ,_cfcf ;
};_gccg :=_cfea .(_fa .BasicTabler );return _fa .NewEncodedTable (_gccg );};_gdefb ++;};};return nil ,nil ;};func (_dbab *TextRegion )GetRegionBitmap ()(*_be .Bitmap ,error ){if _dbab .RegionBitmap !=nil {return _dbab .RegionBitmap ,nil ;};if !_dbab .IsHuffmanEncoded {if _ecfc :=_dbab .setCodingStatistics ();
_ecfc !=nil {return nil ,_ecfc ;};};if _gbaf :=_dbab .createRegionBitmap ();_gbaf !=nil {return nil ,_gbaf ;};if _beab :=_dbab .decodeSymbolInstances ();_beab !=nil {return nil ,_beab ;};return _dbab .RegionBitmap ,nil ;};func (_acf *HalftoneRegion )computeX (_ceef ,_gfdb int )int {return _acf .shiftAndFill (int (_acf .HGridX )+_ceef *int (_acf .HRegionY )+_gfdb *int (_acf .HRegionX ));
};func (_dedcd *SymbolDictionary )decodeDifferenceWidth ()(int64 ,error ){if _dedcd .IsHuffmanEncoded {switch _dedcd .SdHuffDecodeWidthSelection {case 0:_feee ,_bcce :=_fa .GetStandardTable (2);if _bcce !=nil {return 0,_bcce ;};return _feee .Decode (_dedcd ._ggbd );
case 1:_cdee ,_fafg :=_fa .GetStandardTable (3);if _fafg !=nil {return 0,_fafg ;};return _cdee .Decode (_dedcd ._ggbd );case 3:if _dedcd ._dcdae ==nil {var _gbcff int ;if _dedcd .SdHuffDecodeHeightSelection ==3{_gbcff ++;};_cgff ,_dgdf :=_dedcd .getUserTable (_gbcff );
if _dgdf !=nil {return 0,_dgdf ;};_dedcd ._dcdae =_cgff ;};return _dedcd ._dcdae .Decode (_dedcd ._ggbd );};}else {_eceeg ,_egce :=_dedcd ._aceg .DecodeInt (_dedcd ._fcfe );if _egce !=nil {return 0,_egce ;};return int64 (_eceeg ),nil ;};return 0,nil ;};
func (_ddeg *TextRegion )decodeDfs ()(int64 ,error ){if _ddeg .IsHuffmanEncoded {if _ddeg .SbHuffFS ==3{if _ddeg ._aadd ==nil {var _abda error ;_ddeg ._aadd ,_abda =_ddeg .getUserTable (0);if _abda !=nil {return 0,_abda ;};};return _ddeg ._aadd .Decode (_ddeg ._fdge );
};_fdgd ,_accda :=_fa .GetStandardTable (6+int (_ddeg .SbHuffFS ));if _accda !=nil {return 0,_accda ;};return _fdgd .Decode (_ddeg ._fdge );};_bece ,_gadc :=_ddeg ._gggg .DecodeInt (_ddeg ._faeb );if _gadc !=nil {return 0,_gadc ;};return int64 (_bece ),nil ;
};func NewGenericRegion (r _de .StreamReader )*GenericRegion {return &GenericRegion {RegionSegment :NewRegionSegment (r ),_gdd :r };};func (_feffe *TextRegion )setCodingStatistics ()error {if _feffe ._babc ==nil {_feffe ._babc =_cde .NewStats (512,1);};
if _feffe ._faeb ==nil {_feffe ._faeb =_cde .NewStats (512,1);};if _feffe ._gfeb ==nil {_feffe ._gfeb =_cde .NewStats (512,1);};if _feffe ._dcefcc ==nil {_feffe ._dcefcc =_cde .NewStats (512,1);};if _feffe ._gedee ==nil {_feffe ._gedee =_cde .NewStats (512,1);
};if _feffe ._fcde ==nil {_feffe ._fcde =_cde .NewStats (512,1);};if _feffe ._dbbc ==nil {_feffe ._dbbc =_cde .NewStats (512,1);};if _feffe ._ebec ==nil {_feffe ._ebec =_cde .NewStats (1<<uint (_feffe ._gade ),1);};if _feffe ._agef ==nil {_feffe ._agef =_cde .NewStats (512,1);
};if _feffe ._bed ==nil {_feffe ._bed =_cde .NewStats (512,1);};if _feffe ._gggg ==nil {var _abdf error ;_feffe ._gggg ,_abdf =_cde .New (_feffe ._fdge );if _abdf !=nil {return _abdf ;};};return nil ;};func (_ccaf *Header )parse (_dfgc Documenter ,_gbbe _de .StreamReader ,_adgb int64 ,_ecfa OrganizationType )(_gegc error ){const _eced ="\u0070\u0061\u0072s\u0065";
_df .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u005b\u0050A\u0052\u0053\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _gegc !=nil {_df .Log .Trace ("\u005b\u0053\u0045GM\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045R\u005d[\u0050A\u0052S\u0045\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_gegc );
}else {_df .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052]\u005bP\u0041\u0052\u0053\u0045\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");};}();_ ,_gegc =_gbbe .Seek (_adgb ,_b .SeekStart );
if _gegc !=nil {return _bf .Wrap (_gegc ,_eced ,"\u0073\u0065\u0065\u006b\u0020\u0073\u0074\u0061\u0072\u0074");};if _gegc =_ccaf .readSegmentNumber (_gbbe );_gegc !=nil {return _bf .Wrap (_gegc ,_eced ,"");};if _gegc =_ccaf .readHeaderFlags ();_gegc !=nil {return _bf .Wrap (_gegc ,_eced ,"");
};var _gggf uint64 ;_gggf ,_gegc =_ccaf .readNumberOfReferredToSegments (_gbbe );if _gegc !=nil {return _bf .Wrap (_gegc ,_eced ,"");};_ccaf .RTSNumbers ,_gegc =_ccaf .readReferredToSegmentNumbers (_gbbe ,int (_gggf ));if _gegc !=nil {return _bf .Wrap (_gegc ,_eced ,"");
};_gegc =_ccaf .readSegmentPageAssociation (_dfgc ,_gbbe ,_gggf ,_ccaf .RTSNumbers ...);if _gegc !=nil {return _bf .Wrap (_gegc ,_eced ,"");};if _ccaf .Type !=TEndOfFile {if _gegc =_ccaf .readSegmentDataLength (_gbbe );_gegc !=nil {return _bf .Wrap (_gegc ,_eced ,"");
};};_ccaf .readDataStartOffset (_gbbe ,_ecfa );_ccaf .readHeaderLength (_gbbe ,_adgb );_df .Log .Trace ("\u0025\u0073",_ccaf );return nil ;};func (_efab *TableSegment )HtLow ()int32 {return _efab ._egad };func (_eee *GenericRegion )getPixel (_abcg ,_cebf int )int8 {if _abcg < 0||_abcg >=_eee .Bitmap .Width {return 0;
};if _cebf < 0||_cebf >=_eee .Bitmap .Height {return 0;};if _eee .Bitmap .GetPixel (_abcg ,_cebf ){return 1;};return 0;};func (_efdf *SymbolDictionary )decodeHeightClassDeltaHeightWithHuffman ()(int64 ,error ){switch _efdf .SdHuffDecodeHeightSelection {case 0:_fdab ,_eabe :=_fa .GetStandardTable (4);
if _eabe !=nil {return 0,_eabe ;};return _fdab .Decode (_efdf ._ggbd );case 1:_aedg ,_fgec :=_fa .GetStandardTable (5);if _fgec !=nil {return 0,_fgec ;};return _aedg .Decode (_efdf ._ggbd );case 3:if _efdf ._efeb ==nil {_cccab ,_ecfbdg :=_fa .GetStandardTable (0);
if _ecfbdg !=nil {return 0,_ecfbdg ;};_efdf ._efeb =_cccab ;};return _efdf ._efeb .Decode (_efdf ._ggbd );};return 0,nil ;};func (_gfgf *Header )subInputReader ()(_de .StreamReader ,error ){return _de .NewSubstreamReader (_gfgf .Reader ,_gfgf .SegmentDataStartOffset ,_gfgf .SegmentDataLength );
};func (_adab *GenericRegion )setParametersWithAt (_efdc bool ,_bdea byte ,_gcb ,_daea bool ,_deaf ,_cbe []int8 ,_fbeg ,_bcgb uint32 ,_acgc *_cde .DecoderStats ,_dbgf *_cde .Decoder ){_adab .IsMMREncoded =_efdc ;_adab .GBTemplate =_bdea ;_adab .IsTPGDon =_gcb ;
_adab .GBAtX =_deaf ;_adab .GBAtY =_cbe ;_adab .RegionSegment .BitmapHeight =_bcgb ;_adab .RegionSegment .BitmapWidth =_fbeg ;_adab ._efa =nil ;_adab .Bitmap =nil ;if _acgc !=nil {_adab ._efdd =_acgc ;};if _dbgf !=nil {_adab ._cfb =_dbgf ;};_df .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049O\u004e\u005d\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0053\u0044\u0041t\u003a\u0020\u0025\u0073",_adab );
};func (_gdda *TextRegion )readRegionFlags ()error {var (_fdfaf int ;_efag uint64 ;_gaee error ;);_fdfaf ,_gaee =_gdda ._fdge .ReadBit ();if _gaee !=nil {return _gaee ;};_gdda .SbrTemplate =int8 (_fdfaf );_efag ,_gaee =_gdda ._fdge .ReadBits (5);if _gaee !=nil {return _gaee ;
};_gdda .SbDsOffset =int8 (_efag );if _gdda .SbDsOffset > 0x0f{_gdda .SbDsOffset -=0x20;};_fdfaf ,_gaee =_gdda ._fdge .ReadBit ();if _gaee !=nil {return _gaee ;};_gdda .DefaultPixel =int8 (_fdfaf );_efag ,_gaee =_gdda ._fdge .ReadBits (2);if _gaee !=nil {return _gaee ;
};_gdda .CombinationOperator =_be .CombinationOperator (int (_efag )&0x3);_fdfaf ,_gaee =_gdda ._fdge .ReadBit ();if _gaee !=nil {return _gaee ;};_gdda .IsTransposed =int8 (_fdfaf );_efag ,_gaee =_gdda ._fdge .ReadBits (2);if _gaee !=nil {return _gaee ;
};_gdda .ReferenceCorner =int16 (_efag )&0x3;_efag ,_gaee =_gdda ._fdge .ReadBits (2);if _gaee !=nil {return _gaee ;};_gdda .LogSBStrips =int16 (_efag )&0x3;_gdda .SbStrips =1<<uint (_gdda .LogSBStrips );_fdfaf ,_gaee =_gdda ._fdge .ReadBit ();if _gaee !=nil {return _gaee ;
};if _fdfaf ==1{_gdda .UseRefinement =true ;};_fdfaf ,_gaee =_gdda ._fdge .ReadBit ();if _gaee !=nil {return _gaee ;};if _fdfaf ==1{_gdda .IsHuffmanEncoded =true ;};return nil ;};type Regioner interface{GetRegionBitmap ()(*_be .Bitmap ,error );GetRegionInfo ()*RegionSegment ;
};func (_dbgfe *PatternDictionary )readPatternWidthAndHeight ()error {_abbb ,_aced :=_dbgfe ._fecd .ReadByte ();if _aced !=nil {return _aced ;};_dbgfe .HdpWidth =_abbb ;_abbb ,_aced =_dbgfe ._fecd .ReadByte ();if _aced !=nil {return _aced ;};_dbgfe .HdpHeight =_abbb ;
return nil ;};func (_eeaf *PageInformationSegment )parseHeader ()(_eeg error ){_df .Log .Trace ("\u005b\u0050\u0061\u0067\u0065I\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067m\u0065\u006e\u0074\u005d\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u002e\u002e");
defer func (){var _bceg ="[\u0050\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072m\u0061\u0074\u0069\u006f\u006e\u0053\u0065gm\u0065\u006e\u0074\u005d \u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065ad\u0065\u0072 \u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064";
if _eeg !=nil {_bceg +="\u0020\u0077\u0069t\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u0020"+_eeg .Error ();}else {_bceg +="\u0020\u0073\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079";};_df .Log .Trace (_bceg );}();if _eeg =_eeaf .readWidthAndHeight ();
_eeg !=nil {return _eeg ;};if _eeg =_eeaf .readResolution ();_eeg !=nil {return _eeg ;};_ ,_eeg =_eeaf ._dcg .ReadBit ();if _eeg !=nil {return _eeg ;};if _eeg =_eeaf .readCombinationOperatorOverrideAllowed ();_eeg !=nil {return _eeg ;};if _eeg =_eeaf .readRequiresAuxiliaryBuffer ();
_eeg !=nil {return _eeg ;};if _eeg =_eeaf .readCombinationOperator ();_eeg !=nil {return _eeg ;};if _eeg =_eeaf .readDefaultPixelValue ();_eeg !=nil {return _eeg ;};if _eeg =_eeaf .readContainsRefinement ();_eeg !=nil {return _eeg ;};if _eeg =_eeaf .readIsLossless ();
_eeg !=nil {return _eeg ;};if _eeg =_eeaf .readIsStriped ();_eeg !=nil {return _eeg ;};if _eeg =_eeaf .readMaxStripeSize ();_eeg !=nil {return _eeg ;};if _eeg =_eeaf .checkInput ();_eeg !=nil {return _eeg ;};_df .Log .Trace ("\u0025\u0073",_eeaf );return nil ;
};func (_fggbg *SymbolDictionary )encodeFlags (_befg _de .BinaryWriter )(_egge int ,_ecfag error ){const _fafb ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _ecfag =_befg .SkipBits (3);_ecfag !=nil {return 0,_bf .Wrap (_ecfag ,_fafb ,"\u0065\u006d\u0070\u0074\u0079\u0020\u0062\u0069\u0074\u0073");
};var _addf int ;if _fggbg .SdrTemplate > 0{_addf =1;};if _ecfag =_befg .WriteBit (_addf );_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"s\u0064\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_addf =0;if _fggbg .SdTemplate > 1{_addf =1;
};if _ecfag =_befg .WriteBit (_addf );_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_addf =0;if _fggbg .SdTemplate ==1||_fggbg .SdTemplate ==3{_addf =1;};if _ecfag =_befg .WriteBit (_addf );
_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_addf =0;if _fggbg ._cgbee {_addf =1;};if _ecfag =_befg .WriteBit (_addf );_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"\u0063\u006f\u0064in\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0065\u0064");
};_addf =0;if _fggbg ._afg {_addf =1;};if _ecfag =_befg .WriteBit (_addf );_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"\u0063\u006f\u0064\u0069ng\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0075\u0073\u0065\u0064");};_addf =0;if _fggbg .SdHuffAggInstanceSelection {_addf =1;
};if _ecfag =_befg .WriteBit (_addf );_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"\u0073\u0064\u0048\u0075\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074");};_addf =int (_fggbg .SdHuffBMSizeSelection );if _ecfag =_befg .WriteBit (_addf );
_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"\u0073\u0064\u0048u\u0066\u0066\u0042\u006d\u0053\u0069\u007a\u0065");};_addf =0;if _fggbg .SdHuffDecodeWidthSelection > 1{_addf =1;};if _ecfag =_befg .WriteBit (_addf );_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");
};_addf =0;switch _fggbg .SdHuffDecodeWidthSelection {case 1,3:_addf =1;};if _ecfag =_befg .WriteBit (_addf );_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_addf =0;if _fggbg .SdHuffDecodeHeightSelection > 1{_addf =1;
};if _ecfag =_befg .WriteBit (_addf );_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_addf =0;switch _fggbg .SdHuffDecodeHeightSelection {case 1,3:_addf =1;};if _ecfag =_befg .WriteBit (_addf );
_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_addf =0;if _fggbg .UseRefinementAggregation {_addf =1;};if _ecfag =_befg .WriteBit (_addf );_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"\u0073\u0064\u0052\u0065\u0066\u0041\u0067\u0067");
};_addf =0;if _fggbg .IsHuffmanEncoded {_addf =1;};if _ecfag =_befg .WriteBit (_addf );_ecfag !=nil {return _egge ,_bf .Wrap (_ecfag ,_fafb ,"\u0073\u0064\u0048\u0075\u0066\u0066");};return 2,nil ;};func (_bdfab *GenericRegion )overrideAtTemplate0b (_bfa ,_ebbc ,_bebf ,_ddee ,_fdf ,_fac int )int {if _bdfab .GBAtOverride [0]{_bfa &=0xFFFD;
if _bdfab .GBAtY [0]==0&&_bdfab .GBAtX [0]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [0]&0x1))<<1;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [0]),_bebf +int (_bdfab .GBAtY [0])))<<1;};};if _bdfab .GBAtOverride [1]{_bfa &=0xDFFF;
if _bdfab .GBAtY [1]==0&&_bdfab .GBAtX [1]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [1]&0x1))<<13;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [1]),_bebf +int (_bdfab .GBAtY [1])))<<13;};};if _bdfab .GBAtOverride [2]{_bfa &=0xFDFF;
if _bdfab .GBAtY [2]==0&&_bdfab .GBAtX [2]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [2]&0x1))<<9;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [2]),_bebf +int (_bdfab .GBAtY [2])))<<9;};};if _bdfab .GBAtOverride [3]{_bfa &=0xBFFF;
if _bdfab .GBAtY [3]==0&&_bdfab .GBAtX [3]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [3]&0x1))<<14;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [3]),_bebf +int (_bdfab .GBAtY [3])))<<14;};};if _bdfab .GBAtOverride [4]{_bfa &=0xEFFF;
if _bdfab .GBAtY [4]==0&&_bdfab .GBAtX [4]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [4]&0x1))<<12;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [4]),_bebf +int (_bdfab .GBAtY [4])))<<12;};};if _bdfab .GBAtOverride [5]{_bfa &=0xFFDF;
if _bdfab .GBAtY [5]==0&&_bdfab .GBAtX [5]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [5]&0x1))<<5;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [5]),_bebf +int (_bdfab .GBAtY [5])))<<5;};};if _bdfab .GBAtOverride [6]{_bfa &=0xFFFB;
if _bdfab .GBAtY [6]==0&&_bdfab .GBAtX [6]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [6]&0x1))<<2;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [6]),_bebf +int (_bdfab .GBAtY [6])))<<2;};};if _bdfab .GBAtOverride [7]{_bfa &=0xFFF7;
if _bdfab .GBAtY [7]==0&&_bdfab .GBAtX [7]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [7]&0x1))<<3;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [7]),_bebf +int (_bdfab .GBAtY [7])))<<3;};};if _bdfab .GBAtOverride [8]{_bfa &=0xF7FF;
if _bdfab .GBAtY [8]==0&&_bdfab .GBAtX [8]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [8]&0x1))<<11;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [8]),_bebf +int (_bdfab .GBAtY [8])))<<11;};};if _bdfab .GBAtOverride [9]{_bfa &=0xFFEF;
if _bdfab .GBAtY [9]==0&&_bdfab .GBAtX [9]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [9]&0x1))<<4;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [9]),_bebf +int (_bdfab .GBAtY [9])))<<4;};};if _bdfab .GBAtOverride [10]{_bfa &=0x7FFF;
if _bdfab .GBAtY [10]==0&&_bdfab .GBAtX [10]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [10]&0x1))<<15;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [10]),_bebf +int (_bdfab .GBAtY [10])))<<15;};};if _bdfab .GBAtOverride [11]{_bfa &=0xFDFF;
if _bdfab .GBAtY [11]==0&&_bdfab .GBAtX [11]>=-int8 (_fdf ){_bfa |=(_ddee >>uint (int8 (_fac )-_bdfab .GBAtX [11]&0x1))<<10;}else {_bfa |=int (_bdfab .getPixel (_ebbc +int (_bdfab .GBAtX [11]),_bebf +int (_bdfab .GBAtY [11])))<<10;};};return _bfa ;};func (_cac *GenericRegion )decodeTemplate0b (_agd ,_fee ,_fbaa int ,_egf ,_eag int )(_bggg error ){const _cae ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0062";
var (_dbe ,_bgd int ;_aeg ,_acg int ;_bdad byte ;_bdfb int ;);if _agd >=1{_bdad ,_bggg =_cac .Bitmap .GetByte (_eag );if _bggg !=nil {return _bf .Wrap (_bggg ,_cae ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_aeg =int (_bdad );};if _agd >=2{_bdad ,_bggg =_cac .Bitmap .GetByte (_eag -_cac .Bitmap .RowStride );
if _bggg !=nil {return _bf .Wrap (_bggg ,_cae ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_acg =int (_bdad )<<6;};_dbe =(_aeg &0xf0)|(_acg &0x3800);for _feed :=0;_feed < _fbaa ;_feed =_bdfb {var (_bdg byte ;_ffbd int ;);_bdfb =_feed +8;if _aag :=_fee -_feed ;
_aag > 8{_ffbd =8;}else {_ffbd =_aag ;};if _agd > 0{_aeg <<=8;if _bdfb < _fee {_bdad ,_bggg =_cac .Bitmap .GetByte (_eag +1);if _bggg !=nil {return _bf .Wrap (_bggg ,_cae ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_aeg |=int (_bdad );};};if _agd > 1{_acg <<=8;
if _bdfb < _fee {_bdad ,_bggg =_cac .Bitmap .GetByte (_eag -_cac .Bitmap .RowStride +1);if _bggg !=nil {return _bf .Wrap (_bggg ,_cae ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_acg |=int (_bdad )<<6;};};for _ddb :=0;_ddb < _ffbd ;_ddb ++{_cbg :=uint (7-_ddb );
if _cac ._gbf {_bgd =_cac .overrideAtTemplate0b (_dbe ,_feed +_ddb ,_agd ,int (_bdg ),_ddb ,int (_cbg ));_cac ._efdd .SetIndex (int32 (_bgd ));}else {_cac ._efdd .SetIndex (int32 (_dbe ));};var _eefab int ;_eefab ,_bggg =_cac ._cfb .DecodeBit (_cac ._efdd );
if _bggg !=nil {return _bf .Wrap (_bggg ,_cae ,"");};_bdg |=byte (_eefab <<_cbg );_dbe =((_dbe &0x7bf7)<<1)|_eefab |((_aeg >>_cbg )&0x10)|((_acg >>_cbg )&0x800);};if _gebf :=_cac .Bitmap .SetByte (_egf ,_bdg );_gebf !=nil {return _bf .Wrap (_gebf ,_cae ,"");
};_egf ++;_eag ++;};return nil ;};func (_febg *PageInformationSegment )encodeFlags (_eede _de .BinaryWriter )(_dbded error ){const _gebga ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _dbded =_eede .SkipBits (1);_dbded !=nil {return _bf .Wrap (_dbded ,_gebga ,"\u0072\u0065\u0073e\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074");
};var _fcedb int ;if _febg .CombinationOperatorOverrideAllowed (){_fcedb =1;};if _dbded =_eede .WriteBit (_fcedb );_dbded !=nil {return _bf .Wrap (_dbded ,_gebga ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u006f\u0076\u0065\u0072\u0072\u0069\u0064\u0064\u0065\u006e");
};_fcedb =0;if _febg ._dfde {_fcedb =1;};if _dbded =_eede .WriteBit (_fcedb );_dbded !=nil {return _bf .Wrap (_dbded ,_gebga ,"\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0075\u0078i\u006ci\u0061r\u0079\u0020\u0062\u0075\u0066\u0066\u0065r");};
if _dbded =_eede .WriteBit ((int (_febg ._aaf )>>1)&0x01);_dbded !=nil {return _bf .Wrap (_dbded ,_gebga ,"\u0063\u006f\u006d\u0062\u0069\u006e\u0061\u0074\u0069\u006fn\u0020\u006f\u0070\u0065\u0072\u0061\u0074o\u0072\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0062\u0069\u0074");
};if _dbded =_eede .WriteBit (int (_febg ._aaf )&0x01);_dbded !=nil {return _bf .Wrap (_dbded ,_gebga ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0062\u0069\u0074");
};_fcedb =int (_febg .DefaultPixelValue );if _dbded =_eede .WriteBit (_fcedb );_dbded !=nil {return _bf .Wrap (_dbded ,_gebga ,"\u0064e\u0066\u0061\u0075\u006c\u0074\u0020\u0070\u0061\u0067\u0065\u0020p\u0069\u0078\u0065\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};_fcedb =0;if _febg ._cdaf {_fcedb =1;};if _dbded =_eede .WriteBit (_fcedb );_dbded !=nil {return _bf .Wrap (_dbded ,_gebga ,"\u0063\u006f\u006e\u0074ai\u006e\u0073\u0020\u0072\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074");};_fcedb =0;if _febg .IsLossless {_fcedb =1;
};if _dbded =_eede .WriteBit (_fcedb );_dbded !=nil {return _bf .Wrap (_dbded ,_gebga ,"p\u0061\u0067\u0065\u0020\u0069\u0073 \u0065\u0076\u0065\u006e\u0074\u0075\u0061\u006c\u006cy\u0020\u006c\u006fs\u0073l\u0065\u0073\u0073");};return nil ;};func (_bdga *SymbolDictionary )setExportedSymbols (_eeebe []int ){for _eggb :=uint32 (0);
_eggb < _bdga ._eegb +_bdga .NumberOfNewSymbols ;_eggb ++{if _eeebe [_eggb ]==1{var _gedf *_be .Bitmap ;if _eggb < _bdga ._eegb {_gedf =_bdga ._abff [_eggb ];}else {_gedf =_bdga ._cfdgd [_eggb -_bdga ._eegb ];};_df .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u002d\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u0020\u0041\u0064\u0064 E\u0078\u0070\u006fr\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027%\u0073\u0027",_gedf );
_bdga ._dagg =append (_bdga ._dagg ,_gedf );};};};func _dbce (_dege _de .StreamReader ,_eeaeb *Header )*TextRegion {_bcgea :=&TextRegion {_fdge :_dege ,Header :_eeaeb ,RegionInfo :NewRegionSegment (_dege )};return _bcgea ;};func (_cfag *TableSegment )Init (h *Header ,r _de .StreamReader )error {_cfag ._fccb =r ;
return _cfag .parseHeader ();};func (_cafb *PatternDictionary )Init (h *Header ,r _de .StreamReader )error {_cafb ._fecd =r ;return _cafb .parseHeader ();};func (_ded *PageInformationSegment )encodeStripingInformation (_efbd _de .BinaryWriter )(_ccdb int ,_acbd error ){const _bbac ="\u0065n\u0063\u006f\u0064\u0065S\u0074\u0072\u0069\u0070\u0069n\u0067I\u006ef\u006f\u0072\u006d\u0061\u0074\u0069\u006fn";
if !_ded .IsStripe {if _ccdb ,_acbd =_efbd .Write ([]byte {0x00,0x00});_acbd !=nil {return 0,_bf .Wrap (_acbd ,_bbac ,"n\u006f\u0020\u0073\u0074\u0072\u0069\u0070\u0069\u006e\u0067");};return _ccdb ,nil ;};_gbca :=make ([]byte ,2);_d .BigEndian .PutUint16 (_gbca ,_ded .MaxStripeSize |1<<15);
if _ccdb ,_acbd =_efbd .Write (_gbca );_acbd !=nil {return 0,_bf .Wrapf (_acbd ,_bbac ,"\u0073\u0074\u0072i\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0064",_ded .MaxStripeSize );};return _ccdb ,nil ;};func (_fddbe *TextRegion )readHuffmanFlags ()error {var (_eedeg int ;
_efbb uint64 ;_adbg error ;);_ ,_adbg =_fddbe ._fdge .ReadBit ();if _adbg !=nil {return _adbg ;};_eedeg ,_adbg =_fddbe ._fdge .ReadBit ();if _adbg !=nil {return _adbg ;};_fddbe .SbHuffRSize =int8 (_eedeg );_efbb ,_adbg =_fddbe ._fdge .ReadBits (2);if _adbg !=nil {return _adbg ;
};_fddbe .SbHuffRDY =int8 (_efbb )&0xf;_efbb ,_adbg =_fddbe ._fdge .ReadBits (2);if _adbg !=nil {return _adbg ;};_fddbe .SbHuffRDX =int8 (_efbb )&0xf;_efbb ,_adbg =_fddbe ._fdge .ReadBits (2);if _adbg !=nil {return _adbg ;};_fddbe .SbHuffRDHeight =int8 (_efbb )&0xf;
_efbb ,_adbg =_fddbe ._fdge .ReadBits (2);if _adbg !=nil {return _adbg ;};_fddbe .SbHuffRDWidth =int8 (_efbb )&0xf;_efbb ,_adbg =_fddbe ._fdge .ReadBits (2);if _adbg !=nil {return _adbg ;};_fddbe .SbHuffDT =int8 (_efbb )&0xf;_efbb ,_adbg =_fddbe ._fdge .ReadBits (2);
if _adbg !=nil {return _adbg ;};_fddbe .SbHuffDS =int8 (_efbb )&0xf;_efbb ,_adbg =_fddbe ._fdge .ReadBits (2);if _adbg !=nil {return _adbg ;};_fddbe .SbHuffFS =int8 (_efbb )&0xf;return nil ;};func (_edcde *SymbolDictionary )decodeRefinedSymbol (_bcgd ,_aeaa uint32 )error {var (_agdfg int ;
_edcc ,_bcbb int32 ;);if _edcde .IsHuffmanEncoded {_cag ,_efcb :=_edcde ._ggbd .ReadBits (byte (_edcde ._efdge ));if _efcb !=nil {return _efcb ;};_agdfg =int (_cag );_ccca ,_efcb :=_fa .GetStandardTable (15);if _efcb !=nil {return _efcb ;};_bbe ,_efcb :=_ccca .Decode (_edcde ._ggbd );
if _efcb !=nil {return _efcb ;};_edcc =int32 (_bbe );_bbe ,_efcb =_ccca .Decode (_edcde ._ggbd );if _efcb !=nil {return _efcb ;};_bcbb =int32 (_bbe );_ccca ,_efcb =_fa .GetStandardTable (1);if _efcb !=nil {return _efcb ;};if _ ,_efcb =_ccca .Decode (_edcde ._ggbd );
_efcb !=nil {return _efcb ;};_edcde ._ggbd .Align ();}else {_cadcf ,_gdaa :=_edcde ._aceg .DecodeIAID (uint64 (_edcde ._efdge ),_edcde ._fbgc );if _gdaa !=nil {return _gdaa ;};_agdfg =int (_cadcf );_edcc ,_gdaa =_edcde ._aceg .DecodeInt (_edcde ._cafa );
if _gdaa !=nil {return _gdaa ;};_bcbb ,_gdaa =_edcde ._aceg .DecodeInt (_edcde ._dbed );if _gdaa !=nil {return _gdaa ;};};if _dbdd :=_edcde .setSymbolsArray ();_dbdd !=nil {return _dbdd ;};_feff :=_edcde ._becd [_agdfg ];if _acdcd :=_edcde .decodeNewSymbols (_bcgd ,_aeaa ,_feff ,_edcc ,_bcbb );
_acdcd !=nil {return _acdcd ;};if _edcde .IsHuffmanEncoded {_edcde ._ggbd .Align ();};return nil ;};func (_gbg *HalftoneRegion )computeSegmentDataStructure ()error {_gbg .DataOffset =_gbg ._ffga .StreamPosition ();_gbg .DataHeaderLength =_gbg .DataOffset -_gbg .DataHeaderOffset ;
_gbg .DataLength =int64 (_gbg ._ffga .Length ())-_gbg .DataHeaderLength ;return nil ;};func (_daeg *RegionSegment )parseHeader ()error {const _fcdc ="p\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072";_df .Log .Trace ("\u005b\u0052\u0045\u0047I\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002dH\u0045A\u0044\u0045\u0052\u005d\u0020\u0042\u0065g\u0069\u006e");
defer func (){_df .Log .Trace ("\u005b\u0052\u0045G\u0049\u004f\u004e\u005d[\u0050\u0041\u0052\u0053\u0045\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");}();_aeaea ,_affd :=_daeg ._ebf .ReadBits (32);
if _affd !=nil {return _bf .Wrap (_affd ,_fcdc ,"\u0077\u0069\u0064t\u0068");};_daeg .BitmapWidth =uint32 (_aeaea &_a .MaxUint32 );_aeaea ,_affd =_daeg ._ebf .ReadBits (32);if _affd !=nil {return _bf .Wrap (_affd ,_fcdc ,"\u0068\u0065\u0069\u0067\u0068\u0074");
};_daeg .BitmapHeight =uint32 (_aeaea &_a .MaxUint32 );_aeaea ,_affd =_daeg ._ebf .ReadBits (32);if _affd !=nil {return _bf .Wrap (_affd ,_fcdc ,"\u0078\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_daeg .XLocation =uint32 (_aeaea &_a .MaxUint32 );
_aeaea ,_affd =_daeg ._ebf .ReadBits (32);if _affd !=nil {return _bf .Wrap (_affd ,_fcdc ,"\u0079\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_daeg .YLocation =uint32 (_aeaea &_a .MaxUint32 );if _ ,_affd =_daeg ._ebf .ReadBits (5);_affd !=nil {return _bf .Wrap (_affd ,_fcdc ,"\u0064i\u0072\u0079\u0020\u0072\u0065\u0061d");
};if _affd =_daeg .readCombinationOperator ();_affd !=nil {return _bf .Wrap (_affd ,_fcdc ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};return nil ;};func (_geee *SymbolDictionary )encodeATFlags (_gbee _de .BinaryWriter )(_ccdg int ,_cdfe error ){const _adggb ="\u0065\u006e\u0063\u006f\u0064\u0065\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if _geee .IsHuffmanEncoded ||_geee .SdTemplate !=0{return 0,nil ;};_adeb :=4;if _geee .SdTemplate !=0{_adeb =1;};for _dbca :=0;_dbca < _adeb ;_dbca ++{if _cdfe =_gbee .WriteByte (byte (_geee .SdATX [_dbca ]));_cdfe !=nil {return _ccdg ,_bf .Wrapf (_cdfe ,_adggb ,"\u0053d\u0041\u0054\u0058\u005b\u0025\u0064]",_dbca );
};_ccdg ++;if _cdfe =_gbee .WriteByte (byte (_geee .SdATY [_dbca ]));_cdfe !=nil {return _ccdg ,_bf .Wrapf (_cdfe ,_adggb ,"\u0053d\u0041\u0054\u0059\u005b\u0025\u0064]",_dbca );};_ccdg ++;};return _ccdg ,nil ;};func (_ffdf *TextRegion )GetRegionInfo ()*RegionSegment {return _ffdf .RegionInfo };
func (_gbafc *TextRegion )decodeID ()(int64 ,error ){if _gbafc .IsHuffmanEncoded {if _gbafc ._edgc ==nil {_eeca ,_ffaa :=_gbafc ._fdge .ReadBits (byte (_gbafc ._gade ));return int64 (_eeca ),_ffaa ;};return _gbafc ._edgc .Decode (_gbafc ._fdge );};return _gbafc ._gggg .DecodeIAID (uint64 (_gbafc ._gade ),_gbafc ._ebec );
};func (_dgd *GenericRegion )decodeTemplate3 (_dfc ,_dbcd ,_ecaa int ,_acgd ,_fab int )(_agbf error ){const _ccdd ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0033";var (_gdca ,_fcac int ;_fbfg int ;_cgcd byte ;_cfcbg ,_ecfbe int ;
);if _dfc >=1{_cgcd ,_agbf =_dgd .Bitmap .GetByte (_fab );if _agbf !=nil {return _bf .Wrap (_agbf ,_ccdd ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_fbfg =int (_cgcd );};_gdca =(_fbfg >>1)&0x70;for _dcfb :=0;_dcfb < _ecaa ;_dcfb =_cfcbg {var (_bde byte ;
_gda int ;);_cfcbg =_dcfb +8;if _aec :=_dbcd -_dcfb ;_aec > 8{_gda =8;}else {_gda =_aec ;};if _dfc >=1{_fbfg <<=8;if _cfcbg < _dbcd {_cgcd ,_agbf =_dgd .Bitmap .GetByte (_fab +1);if _agbf !=nil {return _bf .Wrap (_agbf ,_ccdd ,"\u0069\u006e\u006e\u0065\u0072\u0020\u002d\u0020\u006c\u0069\u006e\u0065 \u003e\u003d\u0020\u0031");
};_fbfg |=int (_cgcd );};};for _dgb :=0;_dgb < _gda ;_dgb ++{if _dgd ._gbf {_fcac =_dgd .overrideAtTemplate3 (_gdca ,_dcfb +_dgb ,_dfc ,int (_bde ),_dgb );_dgd ._efdd .SetIndex (int32 (_fcac ));}else {_dgd ._efdd .SetIndex (int32 (_gdca ));};_ecfbe ,_agbf =_dgd ._cfb .DecodeBit (_dgd ._efdd );
if _agbf !=nil {return _bf .Wrap (_agbf ,_ccdd ,"");};_bde |=byte (_ecfbe )<<byte (7-_dgb );_gdca =((_gdca &0x1f7)<<1)|_ecfbe |((_fbfg >>uint (8-_dgb ))&0x010);};if _eae :=_dgd .Bitmap .SetByte (_acgd ,_bde );_eae !=nil {return _bf .Wrap (_eae ,_ccdd ,"");
};_acgd ++;_fab ++;};return nil ;};func (_fcf *PageInformationSegment )readCombinationOperatorOverrideAllowed ()error {_aeae ,_edgg :=_fcf ._dcg .ReadBit ();if _edgg !=nil {return _edgg ;};if _aeae ==1{_fcf ._ecdg =true ;};return nil ;};func (_fgea *PageInformationSegment )readRequiresAuxiliaryBuffer ()error {_feg ,_agac :=_fgea ._dcg .ReadBit ();
if _agac !=nil {return _agac ;};if _feg ==1{_fgea ._dfde =true ;};return nil ;};type EncodeInitializer interface{InitEncode ();};func (_adeg *SymbolDictionary )encodeSymbols (_ebdg _de .BinaryWriter )(_geec int ,_effa error ){const _egfba ="\u0065\u006e\u0063o\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c";
_afag :=_bb .New ();_afag .Init ();_dfcc ,_effa :=_adeg ._gdfe .SelectByIndexes (_adeg ._bfce );if _effa !=nil {return 0,_bf .Wrap (_effa ,_egfba ,"\u0069n\u0069\u0074\u0069\u0061\u006c");};_ced :=map[*_be .Bitmap ]int {};for _bebe ,_bcad :=range _dfcc .Values {_ced [_bcad ]=_bebe ;
};_dfcc .SortByHeight ();var _gafa ,_cbgd int ;_gbcgc ,_effa :=_dfcc .GroupByHeight ();if _effa !=nil {return 0,_bf .Wrap (_effa ,_egfba ,"");};for _ ,_gcge :=range _gbcgc .Values {_ceaa :=_gcge .Values [0].Height ;_gdgd :=_ceaa -_gafa ;if _effa =_afag .EncodeInteger (_bb .IADH ,_gdgd );
_effa !=nil {return 0,_bf .Wrapf (_effa ,_egfba ,"\u0049\u0041\u0044\u0048\u0020\u0066\u006f\u0072\u0020\u0064\u0068\u003a \u0027\u0025\u0064\u0027",_gdgd );};_gafa =_ceaa ;_bagg ,_fcaf :=_gcge .GroupByWidth ();if _fcaf !=nil {return 0,_bf .Wrapf (_fcaf ,_egfba ,"\u0068\u0065\u0069g\u0068\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_ceaa );
};var _aebc int ;for _ ,_caae :=range _bagg .Values {for _ ,_fcafe :=range _caae .Values {_bdfd :=_fcafe .Width ;_ageg :=_bdfd -_aebc ;if _fcaf =_afag .EncodeInteger (_bb .IADW ,_ageg );_fcaf !=nil {return 0,_bf .Wrapf (_fcaf ,_egfba ,"\u0049\u0041\u0044\u0057\u0020\u0066\u006f\u0072\u0020\u0064\u0077\u003a \u0027\u0025\u0064\u0027",_ageg );
};_aebc +=_ageg ;if _fcaf =_afag .EncodeBitmap (_fcafe ,false );_fcaf !=nil {return 0,_bf .Wrapf (_fcaf ,_egfba ,"H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u0020W\u0069\u0064\u0074\u0068: \u0025\u0064",_ceaa ,_bdfd );};_egfdd :=_ced [_fcafe ];
_adeg ._gfbe [_egfdd ]=_cbgd ;_cbgd ++;};};if _fcaf =_afag .EncodeOOB (_bb .IADW );_fcaf !=nil {return 0,_bf .Wrap (_fcaf ,_egfba ,"\u0049\u0041\u0044\u0057");};};if _effa =_afag .EncodeInteger (_bb .IAEX ,0);_effa !=nil {return 0,_bf .Wrap (_effa ,_egfba ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};if _effa =_afag .EncodeInteger (_bb .IAEX ,len (_adeg ._bfce ));_effa !=nil {return 0,_bf .Wrap (_effa ,_egfba ,"\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0073\u0079m\u0062\u006f\u006c\u0073");};_afag .Final ();_ddbfg ,_effa :=_afag .WriteTo (_ebdg );
if _effa !=nil {return 0,_bf .Wrap (_effa ,_egfba ,"\u0077\u0072i\u0074\u0069\u006e\u0067 \u0065\u006ec\u006f\u0064\u0065\u0072\u0020\u0063\u006f\u006et\u0065\u0078\u0074\u0020\u0074\u006f\u0020\u0027\u0077\u0027\u0020\u0077r\u0069\u0074\u0065\u0072");
};return int (_ddbfg ),nil ;};func (_egag *TableSegment )HtRS ()int32 {return _egag ._aeaag };type PageInformationSegment struct{_dcg _de .StreamReader ;PageBMHeight int ;PageBMWidth int ;ResolutionX int ;ResolutionY int ;_ecdg bool ;_aaf _be .CombinationOperator ;
_dfde bool ;DefaultPixelValue uint8 ;_cdaf bool ;IsLossless bool ;IsStripe bool ;MaxStripeSize uint16 ;};func (_efdga *PageInformationSegment )readContainsRefinement ()error {_ecee ,_afab :=_efdga ._dcg .ReadBit ();if _afab !=nil {return _afab ;};if _ecee ==1{_efdga ._cdaf =true ;
};return nil ;};func (_efcd *Header )Encode (w _de .BinaryWriter )(_dbf int ,_cfaa error ){const _cdgee ="\u0048\u0065\u0061d\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065";var _cbdg _de .BinaryWriter ;_df .Log .Trace ("\u005b\u0053\u0045G\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045\u0052\u005d[\u0045\u004e\u0043\u004f\u0044\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");
defer func (){if _cfaa !=nil {_df .Log .Trace ("[\u0053\u0045\u0047\u004d\u0045\u004eT\u002d\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0045\u004e\u0043\u004f\u0044E\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020%\u0076",_cfaa );}else {_df .Log .Trace ("\u005b\u0053\u0045\u0047ME\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0025\u0076",_efcd );
_df .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045N\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u005b\u0045\u004e\u0043O\u0044\u0045\u005d\u0020\u0046\u0069\u006ei\u0073\u0068\u0065\u0064");};}();w .FinishByte ();if _efcd .SegmentData !=nil {_dca ,_gcfd :=_efcd .SegmentData .(SegmentEncoder );
if !_gcfd {return 0,_bf .Errorf (_cdgee ,"\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0064\u006f\u0065s\u006e\u0027\u0074\u0020\u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074 \u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0045\u006e\u0063\u006f\u0064er\u0020\u0069\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065",_efcd .SegmentData );
};_cbdg =_de .BufferedMSB ();_dbf ,_cfaa =_dca .Encode (_cbdg );if _cfaa !=nil {return 0,_bf .Wrap (_cfaa ,_cdgee ,"");};_efcd .SegmentDataLength =uint64 (_dbf );};if _efcd .pageSize ()==4{_efcd .PageAssociationFieldSize =true ;};var _ccfg int ;_ccfg ,_cfaa =_efcd .writeSegmentNumber (w );
if _cfaa !=nil {return 0,_bf .Wrap (_cfaa ,_cdgee ,"");};_dbf +=_ccfg ;if _cfaa =_efcd .writeFlags (w );_cfaa !=nil {return _dbf ,_bf .Wrap (_cfaa ,_cdgee ,"");};_dbf ++;_ccfg ,_cfaa =_efcd .writeReferredToCount (w );if _cfaa !=nil {return 0,_bf .Wrap (_cfaa ,_cdgee ,"");
};_dbf +=_ccfg ;_ccfg ,_cfaa =_efcd .writeReferredToSegments (w );if _cfaa !=nil {return 0,_bf .Wrap (_cfaa ,_cdgee ,"");};_dbf +=_ccfg ;_ccfg ,_cfaa =_efcd .writeSegmentPageAssociation (w );if _cfaa !=nil {return 0,_bf .Wrap (_cfaa ,_cdgee ,"");};_dbf +=_ccfg ;
_ccfg ,_cfaa =_efcd .writeSegmentDataLength (w );if _cfaa !=nil {return 0,_bf .Wrap (_cfaa ,_cdgee ,"");};_dbf +=_ccfg ;_efcd .HeaderLength =int64 (_dbf )-int64 (_efcd .SegmentDataLength );if _cbdg !=nil {if _ ,_cfaa =w .Write (_cbdg .Data ());_cfaa !=nil {return _dbf ,_bf .Wrap (_cfaa ,_cdgee ,"\u0077r\u0069t\u0065\u0020\u0073\u0065\u0067m\u0065\u006et\u0020\u0064\u0061\u0074\u0061");
};};return _dbf ,nil ;};const (TSymbolDictionary Type =0;TIntermediateTextRegion Type =4;TImmediateTextRegion Type =6;TImmediateLosslessTextRegion Type =7;TPatternDictionary Type =16;TIntermediateHalftoneRegion Type =20;TImmediateHalftoneRegion Type =22;
TImmediateLosslessHalftoneRegion Type =23;TIntermediateGenericRegion Type =36;TImmediateGenericRegion Type =38;TImmediateLosslessGenericRegion Type =39;TIntermediateGenericRefinementRegion Type =40;TImmediateGenericRefinementRegion Type =42;TImmediateLosslessGenericRefinementRegion Type =43;
TPageInformation Type =48;TEndOfPage Type =49;TEndOfStrip Type =50;TEndOfFile Type =51;TProfiles Type =52;TTables Type =53;TExtension Type =62;TBitmap Type =70;);func (_beac *SymbolDictionary )decodeDirectlyThroughGenericRegion (_dad ,_bcde uint32 )error {if _beac ._dcad ==nil {_beac ._dcad =NewGenericRegion (_beac ._ggbd );
};_beac ._dcad .setParametersWithAt (false ,byte (_beac .SdTemplate ),false ,false ,_beac .SdATX ,_beac .SdATY ,_dad ,_bcde ,_beac ._fgaf ,_beac ._aceg );return _beac .addSymbol (_beac ._dcad );};func (_abec *TextRegion )getSymbols ()error {if _abec .Header .RTSegments !=nil {return _abec .initSymbols ();
};return nil ;};func (_babf *SymbolDictionary )getSymbol (_eggf int )(*_be .Bitmap ,error ){const _egdf ="\u0067e\u0074\u0053\u0079\u006d\u0062\u006fl";_ddbe ,_cabc :=_babf ._gdfe .GetBitmap (_babf ._bfce [_eggf ]);if _cabc !=nil {return nil ,_bf .Wrap (_cabc ,_egdf ,"\u0063\u0061n\u0027\u0074\u0020g\u0065\u0074\u0020\u0073\u0079\u006d\u0062\u006f\u006c");
};return _ddbe ,nil ;};func (_acfb *Header )readSegmentDataLength (_daee _de .StreamReader )(_gef error ){_acfb .SegmentDataLength ,_gef =_daee .ReadBits (32);if _gef !=nil {return _gef ;};_acfb .SegmentDataLength &=_a .MaxInt32 ;return nil ;};func (_ggcg *SymbolDictionary )decodeNewSymbols (_ecg ,_acee uint32 ,_eccd *_be .Bitmap ,_gabf ,_fgdb int32 )error {if _ggcg ._fbfa ==nil {_ggcg ._fbfa =_ebcb (_ggcg ._ggbd ,nil );
if _ggcg ._aceg ==nil {var _agfg error ;_ggcg ._aceg ,_agfg =_cde .New (_ggcg ._ggbd );if _agfg !=nil {return _agfg ;};};if _ggcg ._fgaf ==nil {_ggcg ._fgaf =_cde .NewStats (65536,1);};};_ggcg ._fbfa .setParameters (_ggcg ._fgaf ,_ggcg ._aceg ,_ggcg .SdrTemplate ,_ecg ,_acee ,_eccd ,_gabf ,_fgdb ,false ,_ggcg .SdrATX ,_ggcg .SdrATY );
return _ggcg .addSymbol (_ggcg ._fbfa );};func (_cbf *SymbolDictionary )encodeRefinementATFlags (_fgc _de .BinaryWriter )(_abfb int ,_ebeb error ){const _abdcfg ="\u0065\u006e\u0063od\u0065\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if !_cbf .UseRefinementAggregation ||_cbf .SdrTemplate !=0{return 0,nil ;};for _bbcd :=0;_bbcd < 2;_bbcd ++{if _ebeb =_fgc .WriteByte (byte (_cbf .SdrATX [_bbcd ]));_ebeb !=nil {return _abfb ,_bf .Wrapf (_ebeb ,_abdcfg ,"\u0053\u0064\u0072\u0041\u0054\u0058\u005b\u0025\u0064\u005d",_bbcd );
};_abfb ++;if _ebeb =_fgc .WriteByte (byte (_cbf .SdrATY [_bbcd ]));_ebeb !=nil {return _abfb ,_bf .Wrapf (_ebeb ,_abdcfg ,"\u0053\u0064\u0072\u0041\u0054\u0059\u005b\u0025\u0064\u005d",_bbcd );};_abfb ++;};return _abfb ,nil ;};var (_ Regioner =&TextRegion {};
_ Segmenter =&TextRegion {};);var _ SegmentEncoder =&GenericRegion {};func (_bfcdf *TextRegion )decodeStripT ()(_bgfa int64 ,_acdb error ){if _bfcdf .IsHuffmanEncoded {if _bfcdf .SbHuffDT ==3{if _bfcdf ._cdbb ==nil {var _caffe int ;if _bfcdf .SbHuffFS ==3{_caffe ++;
};if _bfcdf .SbHuffDS ==3{_caffe ++;};_bfcdf ._cdbb ,_acdb =_bfcdf .getUserTable (_caffe );if _acdb !=nil {return 0,_acdb ;};};_bgfa ,_acdb =_bfcdf ._cdbb .Decode (_bfcdf ._fdge );if _acdb !=nil {return 0,_acdb ;};}else {var _bfbe _fa .Tabler ;_bfbe ,_acdb =_fa .GetStandardTable (11+int (_bfcdf .SbHuffDT ));
if _acdb !=nil {return 0,_acdb ;};_bgfa ,_acdb =_bfbe .Decode (_bfcdf ._fdge );if _acdb !=nil {return 0,_acdb ;};};}else {var _gfbeb int32 ;_gfbeb ,_acdb =_bfcdf ._gggg .DecodeInt (_bfcdf ._babc );if _acdb !=nil {return 0,_acdb ;};_bgfa =int64 (_gfbeb );
};_bgfa *=int64 (-_bfcdf .SbStrips );return _bgfa ,nil ;};func (_gdeg *TextRegion )decodeRdh ()(int64 ,error ){const _fdcg ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064h";if _gdeg .IsHuffmanEncoded {if _gdeg .SbHuffRDHeight ==3{if _gdeg ._eefd ==nil {var (_dffg int ;
_bcfg error ;);if _gdeg .SbHuffFS ==3{_dffg ++;};if _gdeg .SbHuffDS ==3{_dffg ++;};if _gdeg .SbHuffDT ==3{_dffg ++;};if _gdeg .SbHuffRDWidth ==3{_dffg ++;};_gdeg ._eefd ,_bcfg =_gdeg .getUserTable (_dffg );if _bcfg !=nil {return 0,_bf .Wrap (_bcfg ,_fdcg ,"");
};};return _gdeg ._eefd .Decode (_gdeg ._fdge );};_dgbd ,_feca :=_fa .GetStandardTable (14+int (_gdeg .SbHuffRDHeight ));if _feca !=nil {return 0,_bf .Wrap (_feca ,_fdcg ,"");};return _dgbd .Decode (_gdeg ._fdge );};_edef ,_afda :=_gdeg ._gggg .DecodeInt (_gdeg ._dbbc );
if _afda !=nil {return 0,_bf .Wrap (_afda ,_fdcg ,"");};return int64 (_edef ),nil ;};func (_fcbd *SymbolDictionary )setRetainedCodingContexts (_edce *SymbolDictionary ){_fcbd ._aceg =_edce ._aceg ;_fcbd .IsHuffmanEncoded =_edce .IsHuffmanEncoded ;_fcbd .UseRefinementAggregation =_edce .UseRefinementAggregation ;
_fcbd .SdTemplate =_edce .SdTemplate ;_fcbd .SdrTemplate =_edce .SdrTemplate ;_fcbd .SdATX =_edce .SdATX ;_fcbd .SdATY =_edce .SdATY ;_fcbd .SdrATX =_edce .SdrATX ;_fcbd .SdrATY =_edce .SdrATY ;_fcbd ._fgaf =_edce ._fgaf ;};func (_db *EndOfStripe )LineNumber ()int {return _db ._ed };
func (_dcfd *PatternDictionary )GetDictionary ()([]*_be .Bitmap ,error ){if _dcfd .Patterns !=nil {return _dcfd .Patterns ,nil ;};if !_dcfd .IsMMREncoded {_dcfd .setGbAtPixels ();};_cfba :=NewGenericRegion (_dcfd ._fecd );_cfba .setParametersMMR (_dcfd .IsMMREncoded ,_dcfd .DataOffset ,_dcfd .DataLength ,uint32 (_dcfd .HdpHeight ),(_dcfd .GrayMax +1)*uint32 (_dcfd .HdpWidth ),_dcfd .HDTemplate ,false ,false ,_dcfd .GBAtX ,_dcfd .GBAtY );
_bdfba ,_fbed :=_cfba .GetRegionBitmap ();if _fbed !=nil {return nil ,_fbed ;};if _fbed =_dcfd .extractPatterns (_bdfba );_fbed !=nil {return nil ,_fbed ;};return _dcfd .Patterns ,nil ;};func (_dfdb *Header )pageSize ()uint {if _dfdb .PageAssociation <=255{return 1;
};return 4;};func (_dgbg *GenericRegion )overrideAtTemplate2 (_cdge ,_cace ,_eeea ,_dgg ,_dabe int )int {_cdge &=0x3FB;if _dgbg .GBAtY [0]==0&&_dgbg .GBAtX [0]>=-int8 (_dabe ){_cdge |=(_dgg >>uint (7-(int8 (_dabe )+_dgbg .GBAtX [0]))&0x1)<<2;}else {_cdge |=int (_dgbg .getPixel (_cace +int (_dgbg .GBAtX [0]),_eeea +int (_dgbg .GBAtY [0])))<<2;
};return _cdge ;};func (_bda *GenericRegion )InitEncode (bm *_be .Bitmap ,xLoc ,yLoc ,template int ,duplicateLineRemoval bool )error {const _fgg ="\u0047e\u006e\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069\u006f\u006e.\u0049\u006e\u0069\u0074\u0045\u006e\u0063\u006f\u0064\u0065";
if bm ==nil {return _bf .Error (_fgg ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if xLoc < 0||yLoc < 0{return _bf .Error (_fgg ,"\u0078\u0020\u0061\u006e\u0064\u0020\u0079\u0020\u006c\u006f\u0063\u0061\u0074i\u006f\u006e\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074h\u0061\u006e\u0020\u0030");
};_bda .Bitmap =bm ;_bda .GBTemplate =byte (template );switch _bda .GBTemplate {case 0:_bda .GBAtX =[]int8 {3,-3,2,-2};_bda .GBAtY =[]int8 {-1,-1,-2,-2};case 1:_bda .GBAtX =[]int8 {3};_bda .GBAtY =[]int8 {-1};case 2,3:_bda .GBAtX =[]int8 {2};_bda .GBAtY =[]int8 {-1};
default:return _bf .Errorf (_fgg ,"\u0070\u0072o\u0076\u0069\u0064\u0065\u0064 \u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u002c\u0032\u002c\u0033\u007d",template );
};_bda .RegionSegment =&RegionSegment {BitmapHeight :uint32 (bm .Height ),BitmapWidth :uint32 (bm .Width ),XLocation :uint32 (xLoc ),YLocation :uint32 (yLoc )};_bda .IsTPGDon =duplicateLineRemoval ;return nil ;};func (_cgge *SymbolDictionary )retrieveImportSymbols ()error {for _ ,_aeef :=range _cgge .Header .RTSegments {if _aeef .Type ==0{_fdee ,_fggbc :=_aeef .GetSegmentData ();
if _fggbc !=nil {return _fggbc ;};_dgee ,_afcg :=_fdee .(*SymbolDictionary );if !_afcg {return _f .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0044\u0061\u0074a\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u003a\u0020%\u0054",_fdee );
};_fcfa ,_fggbc :=_dgee .GetDictionary ();if _fggbc !=nil {return _f .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064 \u0073\u0065\u0067m\u0065\u006e\u0074 \u0077\u0069t\u0068\u0020\u0069\u006e\u0064\u0065x\u003a %\u0064\u0020\u0067\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0073",_aeef .SegmentNumber ,_fggbc .Error ());
};_cgge ._abff =append (_cgge ._abff ,_fcfa ...);_cgge ._eegb +=_dgee .NumberOfExportedSymbols ;};};return nil ;};func (_ggd *GenericRegion )GetRegionInfo ()*RegionSegment {return _ggd .RegionSegment };type EndOfStripe struct{_eb _de .StreamReader ;_ed int ;
};func (_cbfe *SymbolDictionary )setInSyms ()error {if _cbfe .Header .RTSegments !=nil {return _cbfe .retrieveImportSymbols ();};_cbfe ._abff =make ([]*_be .Bitmap ,0);return nil ;};func (_eabd *GenericRefinementRegion )overrideAtTemplate0 (_eff ,_cda ,_fag ,_faf ,_bca int )int {if _eabd ._cgf [0]{_eff &=0xfff7;
if _eabd .GrAtY [0]==0&&int (_eabd .GrAtX [0])>=-_bca {_eff |=(_faf >>uint (7-(_bca +int (_eabd .GrAtX [0])))&0x1)<<3;}else {_eff |=_eabd .getPixel (_eabd .RegionBitmap ,_cda +int (_eabd .GrAtX [0]),_fag +int (_eabd .GrAtY [0]))<<3;};};if _eabd ._cgf [1]{_eff &=0xefff;
if _eabd .GrAtY [1]==0&&int (_eabd .GrAtX [1])>=-_bca {_eff |=(_faf >>uint (7-(_bca +int (_eabd .GrAtX [1])))&0x1)<<12;}else {_eff |=_eabd .getPixel (_eabd .ReferenceBitmap ,_cda +int (_eabd .GrAtX [1]),_fag +int (_eabd .GrAtY [1]));};};return _eff ;};
func (_aadf *TextRegion )readAmountOfSymbolInstances ()error {_bdgb ,_efage :=_aadf ._fdge .ReadBits (32);if _efage !=nil {return _efage ;};_aadf .NumberOfSymbolInstances =uint32 (_bdgb &_a .MaxUint32 );_gagg :=_aadf .RegionInfo .BitmapWidth *_aadf .RegionInfo .BitmapHeight ;
if _gagg < _aadf .NumberOfSymbolInstances {_df .Log .Debug ("\u004c\u0069\u006d\u0069t\u0069\u006e\u0067\u0020t\u0068\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020d\u0065\u0063\u006f\u0064e\u0064\u0020\u0073\u0079m\u0062\u006f\u006c\u0020\u0069n\u0073\u0074\u0061\u006e\u0063\u0065\u0073 \u0074\u006f\u0020\u006f\u006ee\u0020\u0070\u0065\u0072\u0020\u0070\u0069\u0078\u0065l\u0020\u0028\u0020\u0025\u0064\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064\u0020\u006f\u0066\u0020\u0025\u0064\u0029",_gagg ,_aadf .NumberOfSymbolInstances );
_aadf .NumberOfSymbolInstances =_gagg ;};return nil ;};func (_cegf *PatternDictionary )readIsMMREncoded ()error {_ddbb ,_fabc :=_cegf ._fecd .ReadBit ();if _fabc !=nil {return _fabc ;};if _ddbb !=0{_cegf .IsMMREncoded =true ;};return nil ;};func NewRegionSegment (r _de .StreamReader )*RegionSegment {return &RegionSegment {_ebf :r }};
func (_dgbgf *SymbolDictionary )readRefinementAtPixels (_efcg int )error {_dgbgf .SdrATX =make ([]int8 ,_efcg );_dgbgf .SdrATY =make ([]int8 ,_efcg );var (_cadeb byte ;_bbf error ;);for _cece :=0;_cece < _efcg ;_cece ++{_cadeb ,_bbf =_dgbgf ._ggbd .ReadByte ();
if _bbf !=nil {return _bbf ;};_dgbgf .SdrATX [_cece ]=int8 (_cadeb );_cadeb ,_bbf =_dgbgf ._ggbd .ReadByte ();if _bbf !=nil {return _bbf ;};_dgbgf .SdrATY [_cece ]=int8 (_cadeb );};return nil ;};func (_bfc *GenericRegion )decodeTemplate0a (_abdc ,_effg ,_bge int ,_ebbd ,_fafa int )(_fdd error ){const _ebbg ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0061";
var (_daba ,_ebgb int ;_cfe ,_bggf int ;_dcd byte ;_cbb int ;);if _abdc >=1{_dcd ,_fdd =_bfc .Bitmap .GetByte (_fafa );if _fdd !=nil {return _bf .Wrap (_fdd ,_ebbg ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_cfe =int (_dcd );};if _abdc >=2{_dcd ,_fdd =_bfc .Bitmap .GetByte (_fafa -_bfc .Bitmap .RowStride );
if _fdd !=nil {return _bf .Wrap (_fdd ,_ebbg ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_bggf =int (_dcd )<<6;};_daba =(_cfe &0xf0)|(_bggf &0x3800);for _fddb :=0;_fddb < _bge ;_fddb =_cbb {var (_afa byte ;_bfe int ;);_cbb =_fddb +8;if _ffgd :=_effg -_fddb ;
_ffgd > 8{_bfe =8;}else {_bfe =_ffgd ;};if _abdc > 0{_cfe <<=8;if _cbb < _effg {_dcd ,_fdd =_bfc .Bitmap .GetByte (_fafa +1);if _fdd !=nil {return _bf .Wrap (_fdd ,_ebbg ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_cfe |=int (_dcd );};};if _abdc > 1{_efce :=_fafa -_bfc .Bitmap .RowStride +1;
_bggf <<=8;if _cbb < _effg {_dcd ,_fdd =_bfc .Bitmap .GetByte (_efce );if _fdd !=nil {return _bf .Wrap (_fdd ,_ebbg ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_bggf |=int (_dcd )<<6;}else {_bggf |=0;};};for _gae :=0;_gae < _bfe ;_gae ++{_eda :=uint (7-_gae );
if _bfc ._gbf {_ebgb =_bfc .overrideAtTemplate0a (_daba ,_fddb +_gae ,_abdc ,int (_afa ),_gae ,int (_eda ));_bfc ._efdd .SetIndex (int32 (_ebgb ));}else {_bfc ._efdd .SetIndex (int32 (_daba ));};var _bba int ;_bba ,_fdd =_bfc ._cfb .DecodeBit (_bfc ._efdd );
if _fdd !=nil {return _bf .Wrap (_fdd ,_ebbg ,"");};_afa |=byte (_bba )<<_eda ;_daba =((_daba &0x7bf7)<<1)|_bba |((_cfe >>_eda )&0x10)|((_bggf >>_eda )&0x800);};if _ffbb :=_bfc .Bitmap .SetByte (_ebbd ,_afa );_ffbb !=nil {return _bf .Wrap (_ffbb ,_ebbg ,"");
};_ebbd ++;_fafa ++;};return nil ;};func (_fbg *PageInformationSegment )Size ()int {return 19};func (_egee *SymbolDictionary )decodeHeightClassBitmap (_bded *_be .Bitmap ,_aafg int64 ,_bbcc int ,_acbag []int )error {for _fdga :=_aafg ;_fdga < int64 (_egee ._ddbg );
_fdga ++{var _ddag int ;for _gcd :=_aafg ;_gcd <=_fdga -1;_gcd ++{_ddag +=_acbag [_gcd ];};_bcgbf :=_cd .Rect (_ddag ,0,_ddag +_acbag [_fdga ],_bbcc );_begg ,_adad :=_be .Extract (_bcgbf ,_bded );if _adad !=nil {return _adad ;};_egee ._cfdgd [_fdga ]=_begg ;
_egee ._becd =append (_egee ._becd ,_begg );};return nil ;};func (_gfbd *SymbolDictionary )Encode (w _de .BinaryWriter )(_bcfd int ,_gcgb error ){const _cgce ="\u0053\u0079\u006dbo\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
if _gfbd ==nil {return 0,_bf .Error (_cgce ,"\u0073\u0079m\u0062\u006f\u006c\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066in\u0065\u0064");};if _bcfd ,_gcgb =_gfbd .encodeFlags (w );_gcgb !=nil {return _bcfd ,_bf .Wrap (_gcgb ,_cgce ,"");
};_bfec ,_gcgb :=_gfbd .encodeATFlags (w );if _gcgb !=nil {return _bcfd ,_bf .Wrap (_gcgb ,_cgce ,"");};_bcfd +=_bfec ;if _bfec ,_gcgb =_gfbd .encodeRefinementATFlags (w );_gcgb !=nil {return _bcfd ,_bf .Wrap (_gcgb ,_cgce ,"");};_bcfd +=_bfec ;if _bfec ,_gcgb =_gfbd .encodeNumSyms (w );
_gcgb !=nil {return _bcfd ,_bf .Wrap (_gcgb ,_cgce ,"");};_bcfd +=_bfec ;if _bfec ,_gcgb =_gfbd .encodeSymbols (w );_gcgb !=nil {return _bcfd ,_bf .Wrap (_gcgb ,_cgce ,"");};_bcfd +=_bfec ;return _bcfd ,nil ;};func (_feeg *SymbolDictionary )huffDecodeBmSize ()(int64 ,error ){if _feeg ._efgc ==nil {var (_bbcg int ;
_babec error ;);if _feeg .SdHuffDecodeHeightSelection ==3{_bbcg ++;};if _feeg .SdHuffDecodeWidthSelection ==3{_bbcg ++;};_feeg ._efgc ,_babec =_feeg .getUserTable (_bbcg );if _babec !=nil {return 0,_babec ;};};return _feeg ._efgc .Decode (_feeg ._ggbd );
};func (_gdb *SymbolDictionary )setRefinementAtPixels ()error {if !_gdb .UseRefinementAggregation ||_gdb .SdrTemplate !=0{return nil ;};if _agga :=_gdb .readRefinementAtPixels (2);_agga !=nil {return _agga ;};return nil ;};func (_gffe *SymbolDictionary )huffDecodeRefAggNInst ()(int64 ,error ){if !_gffe .SdHuffAggInstanceSelection {_cffc ,_fcca :=_fa .GetStandardTable (1);
if _fcca !=nil {return 0,_fcca ;};return _cffc .Decode (_gffe ._ggbd );};if _gffe ._cbag ==nil {var (_faaf int ;_abag error ;);if _gffe .SdHuffDecodeHeightSelection ==3{_faaf ++;};if _gffe .SdHuffDecodeWidthSelection ==3{_faaf ++;};if _gffe .SdHuffBMSizeSelection ==3{_faaf ++;
};_gffe ._cbag ,_abag =_gffe .getUserTable (_faaf );if _abag !=nil {return 0,_abag ;};};return _gffe ._cbag .Decode (_gffe ._ggbd );};func (_ddbd *Header )CleanSegmentData (){if _ddbd .SegmentData !=nil {_ddbd .SegmentData =nil ;};};var _ SegmentEncoder =&RegionSegment {};
func (_abbd *SymbolDictionary )readAtPixels (_gbgeb int )error {_abbd .SdATX =make ([]int8 ,_gbgeb );_abbd .SdATY =make ([]int8 ,_gbgeb );var (_agcd byte ;_cdbfd error ;);for _bdaa :=0;_bdaa < _gbgeb ;_bdaa ++{_agcd ,_cdbfd =_abbd ._ggbd .ReadByte ();if _cdbfd !=nil {return _cdbfd ;
};_abbd .SdATX [_bdaa ]=int8 (_agcd );_agcd ,_cdbfd =_abbd ._ggbd .ReadByte ();if _cdbfd !=nil {return _cdbfd ;};_abbd .SdATY [_bdaa ]=int8 (_agcd );};return nil ;};func (_gedeb *TextRegion )decodeRdx ()(int64 ,error ){const _egda ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064x";
if _gedeb .IsHuffmanEncoded {if _gedeb .SbHuffRDX ==3{if _gedeb ._ebdd ==nil {var (_bgggb int ;_abaf error ;);if _gedeb .SbHuffFS ==3{_bgggb ++;};if _gedeb .SbHuffDS ==3{_bgggb ++;};if _gedeb .SbHuffDT ==3{_bgggb ++;};if _gedeb .SbHuffRDWidth ==3{_bgggb ++;
};if _gedeb .SbHuffRDHeight ==3{_bgggb ++;};_gedeb ._ebdd ,_abaf =_gedeb .getUserTable (_bgggb );if _abaf !=nil {return 0,_bf .Wrap (_abaf ,_egda ,"");};};return _gedeb ._ebdd .Decode (_gedeb ._fdge );};_fabd ,_ddce :=_fa .GetStandardTable (14+int (_gedeb .SbHuffRDX ));
if _ddce !=nil {return 0,_bf .Wrap (_ddce ,_egda ,"");};return _fabd .Decode (_gedeb ._fdge );};_gfef ,_fbag :=_gedeb ._gggg .DecodeInt (_gedeb ._agef );if _fbag !=nil {return 0,_bf .Wrap (_fbag ,_egda ,"");};return int64 (_gfef ),nil ;};func (_cba *GenericRefinementRegion )decodeTypicalPredictedLineTemplate1 (_ffcb ,_edf ,_adf ,_ceb ,_ebe ,_eac ,_eaa ,_cee ,_ca int )(_debb error ){var (_gcf ,_egba int ;
_cgd ,_gb int ;_ffb ,_dge int ;_gadg byte ;);if _ffcb > 0{_gadg ,_debb =_cba .RegionBitmap .GetByte (_eaa -_adf );if _debb !=nil {return ;};_cgd =int (_gadg );};if _cee > 0&&_cee <=_cba .ReferenceBitmap .Height {_gadg ,_debb =_cba .ReferenceBitmap .GetByte (_ca -_ceb +_eac );
if _debb !=nil {return ;};_gb =int (_gadg )<<2;};if _cee >=0&&_cee < _cba .ReferenceBitmap .Height {_gadg ,_debb =_cba .ReferenceBitmap .GetByte (_ca +_eac );if _debb !=nil {return ;};_ffb =int (_gadg );};if _cee > -2&&_cee < _cba .ReferenceBitmap .Height -1{_gadg ,_debb =_cba .ReferenceBitmap .GetByte (_ca +_ceb +_eac );
if _debb !=nil {return ;};_dge =int (_gadg );};_gcf =((_cgd >>5)&0x6)|((_dge >>2)&0x30)|(_ffb &0xc0)|(_gb &0x200);_egba =((_dge >>2)&0x70)|(_ffb &0xc0)|(_gb &0x700);var _dfbc int ;for _eaae :=0;_eaae < _ebe ;_eaae =_dfbc {var (_dd int ;_gadb int ;);_dfbc =_eaae +8;
if _dd =_edf -_eaae ;_dd > 8{_dd =8;};_edg :=_dfbc < _edf ;_gfg :=_dfbc < _cba .ReferenceBitmap .Width ;_bfg :=_eac +1;if _ffcb > 0{_gadg =0;if _edg {_gadg ,_debb =_cba .RegionBitmap .GetByte (_eaa -_adf +1);if _debb !=nil {return ;};};_cgd =(_cgd <<8)|int (_gadg );
};if _cee > 0&&_cee <=_cba .ReferenceBitmap .Height {var _ada int ;if _gfg {_gadg ,_debb =_cba .ReferenceBitmap .GetByte (_ca -_ceb +_bfg );if _debb !=nil {return ;};_ada =int (_gadg )<<2;};_gb =(_gb <<8)|_ada ;};if _cee >=0&&_cee < _cba .ReferenceBitmap .Height {_gadg =0;
if _gfg {_gadg ,_debb =_cba .ReferenceBitmap .GetByte (_ca +_bfg );if _debb !=nil {return ;};};_ffb =(_ffb <<8)|int (_gadg );};if _cee > -2&&_cee < (_cba .ReferenceBitmap .Height -1){_gadg =0;if _gfg {_gadg ,_debb =_cba .ReferenceBitmap .GetByte (_ca +_ceb +_bfg );
if _debb !=nil {return ;};};_dge =(_dge <<8)|int (_gadg );};for _cfa :=0;_cfa < _dd ;_cfa ++{var _eedd int ;_afb :=(_egba >>4)&0x1ff;switch _afb {case 0x1ff:_eedd =1;case 0x00:_eedd =0;default:_cba ._bga .SetIndex (int32 (_gcf ));_eedd ,_debb =_cba ._gd .DecodeBit (_cba ._bga );
if _debb !=nil {return ;};};_def :=uint (7-_cfa );_gadb |=_eedd <<_def ;_gcf =((_gcf &0x0d6)<<1)|_eedd |(_cgd >>_def +5)&0x002|((_dge >>_def +2)&0x010)|((_ffb >>_def )&0x040)|((_gb >>_def )&0x200);_egba =((_egba &0xdb)<<1)|((_dge >>_def +2)&0x010)|((_ffb >>_def )&0x080)|((_gb >>_def )&0x400);
};_debb =_cba .RegionBitmap .SetByte (_eaa ,byte (_gadb ));if _debb !=nil {return ;};_eaa ++;_ca ++;};return nil ;};func (_dbfe *TextRegion )decodeSymbolInstances ()error {_geeg ,_fgcg :=_dbfe .decodeStripT ();if _fgcg !=nil {return _fgcg ;};var (_fadfc int64 ;
_adbe uint32 ;);for _adbe < _dbfe .NumberOfSymbolInstances {_dbac ,_gebge :=_dbfe .decodeDT ();if _gebge !=nil {return _gebge ;};_geeg +=_dbac ;var _gcag int64 ;_fcdg :=true ;_dbfe ._bddf =0;for {if _fcdg {_gcag ,_gebge =_dbfe .decodeDfs ();if _gebge !=nil {return _gebge ;
};_fadfc +=_gcag ;_dbfe ._bddf =_fadfc ;_fcdg =false ;}else {_fcba ,_dedad :=_dbfe .decodeIds ();if _g .Is (_dedad ,_bc .ErrOOB ){break ;};if _dedad !=nil {return _dedad ;};if _adbe >=_dbfe .NumberOfSymbolInstances {break ;};_dbfe ._bddf +=_fcba +int64 (_dbfe .SbDsOffset );
};_aede ,_bfad :=_dbfe .decodeCurrentT ();if _bfad !=nil {return _bfad ;};_dgac :=_geeg +_aede ;_acef ,_bfad :=_dbfe .decodeID ();if _bfad !=nil {return _bfad ;};_fdaea ,_bfad :=_dbfe .decodeRI ();if _bfad !=nil {return _bfad ;};_ccbeb ,_bfad :=_dbfe .decodeIb (_fdaea ,_acef );
if _bfad !=nil {return _bfad ;};if _bfad =_dbfe .blit (_ccbeb ,_dgac );_bfad !=nil {return _bfad ;};_adbe ++;};};return nil ;};func (_gabb *PageInformationSegment )Init (h *Header ,r _de .StreamReader )(_edbd error ){_gabb ._dcg =r ;if _edbd =_gabb .parseHeader ();
_edbd !=nil {return _bf .Wrap (_edbd ,"P\u0061\u0067\u0065\u0049\u006e\u0066o\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065g\u006d\u0065\u006et\u002eI\u006e\u0069\u0074","");};return nil ;};func (_ffdd *SymbolDictionary )decodeThroughTextRegion (_cadc ,_ggga ,_dabd uint32 )error {if _ffdd ._acba ==nil {_ffdd ._acba =_dbce (_ffdd ._ggbd ,nil );
_ffdd ._acba .setContexts (_ffdd ._fgaf ,_cde .NewStats (512,1),_cde .NewStats (512,1),_cde .NewStats (512,1),_cde .NewStats (512,1),_ffdd ._fbgc ,_cde .NewStats (512,1),_cde .NewStats (512,1),_cde .NewStats (512,1),_cde .NewStats (512,1));};if _becb :=_ffdd .setSymbolsArray ();
_becb !=nil {return _becb ;};_ffdd ._acba .setParameters (_ffdd ._aceg ,_ffdd .IsHuffmanEncoded ,true ,_cadc ,_ggga ,_dabd ,1,_ffdd ._eegb +_ffdd ._ddbg ,0,0,0,1,0,0,0,0,0,0,0,0,0,_ffdd .SdrTemplate ,_ffdd .SdrATX ,_ffdd .SdrATY ,_ffdd ._becd ,_ffdd ._efdge );
return _ffdd .addSymbol (_ffdd ._acba );};func (_aafb *PageInformationSegment )readMaxStripeSize ()error {_gcac ,_ecda :=_aafb ._dcg .ReadBits (15);if _ecda !=nil {return _ecda ;};_aafb .MaxStripeSize =uint16 (_gcac &_a .MaxUint16 );return nil ;};func (_bdaf *SymbolDictionary )getToExportFlags ()([]int ,error ){var (_ecad int ;
_cagg int32 ;_fcaec error ;_adaf =int32 (_bdaf ._eegb +_bdaf .NumberOfNewSymbols );_efde =make ([]int ,_adaf ););for _bcdg :=int32 (0);_bcdg < _adaf ;_bcdg +=_cagg {if _bdaf .IsHuffmanEncoded {_gba ,_eafb :=_fa .GetStandardTable (1);if _eafb !=nil {return nil ,_eafb ;
};_beeaf ,_eafb :=_gba .Decode (_bdaf ._ggbd );if _eafb !=nil {return nil ,_eafb ;};_cagg =int32 (_beeaf );}else {_cagg ,_fcaec =_bdaf ._aceg .DecodeInt (_bdaf ._ebga );if _fcaec !=nil {return nil ,_fcaec ;};};if _cagg !=0{for _fgfd :=_bcdg ;_fgfd < _bcdg +_cagg ;
_fgfd ++{_efde [_fgfd ]=_ecad ;};};if _ecad ==0{_ecad =1;}else {_ecad =0;};};return _efde ,nil ;};func (_deccd *TableSegment )parseHeader ()error {var (_bdfac int ;_abac uint64 ;_gada error ;);_bdfac ,_gada =_deccd ._fccb .ReadBit ();if _gada !=nil {return _gada ;
};if _bdfac ==1{return _f .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0061\u0062\u006c\u0065 \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0064e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u002e\u0020\u0042\u002e\u0032\u002e1\u0020\u0043\u006f\u0064\u0065\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0066\u006c\u0061\u0067\u0073\u003a\u0020\u0042\u0069\u0074\u0020\u0037\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u007a\u0065\u0072\u006f\u002e\u0020\u0057a\u0073\u003a \u0025\u0064",_bdfac );
};if _abac ,_gada =_deccd ._fccb .ReadBits (3);_gada !=nil {return _gada ;};_deccd ._aeaag =(int32 (_abac )+1)&0xf;if _abac ,_gada =_deccd ._fccb .ReadBits (3);_gada !=nil {return _gada ;};_deccd ._bceb =(int32 (_abac )+1)&0xf;if _abac ,_gada =_deccd ._fccb .ReadBits (32);
_gada !=nil {return _gada ;};_deccd ._egad =int32 (_abac &_a .MaxInt32 );if _abac ,_gada =_deccd ._fccb .ReadBits (32);_gada !=nil {return _gada ;};_deccd ._gaba =int32 (_abac &_a .MaxInt32 );return nil ;};func (_fga *GenericRegion )decodeLine (_bcag ,_ebgd ,_abd int )error {const _eefa ="\u0064\u0065\u0063\u006f\u0064\u0065\u004c\u0069\u006e\u0065";
_dbc :=_fga .Bitmap .GetByteIndex (0,_bcag );_bbg :=_dbc -_fga .Bitmap .RowStride ;switch _fga .GBTemplate {case 0:if !_fga .UseExtTemplates {return _fga .decodeTemplate0a (_bcag ,_ebgd ,_abd ,_dbc ,_bbg );};return _fga .decodeTemplate0b (_bcag ,_ebgd ,_abd ,_dbc ,_bbg );
case 1:return _fga .decodeTemplate1 (_bcag ,_ebgd ,_abd ,_dbc ,_bbg );case 2:return _fga .decodeTemplate2 (_bcag ,_ebgd ,_abd ,_dbc ,_bbg );case 3:return _fga .decodeTemplate3 (_bcag ,_ebgd ,_abd ,_dbc ,_bbg );};return _bf .Errorf (_eefa ,"\u0069\u006e\u0076a\u006c\u0069\u0064\u0020G\u0042\u0054\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u003a\u0020\u0025\u0064",_fga .GBTemplate );
};func (_fggc *Header )writeFlags (_eeeb _de .BinaryWriter )(_cebd error ){const _bfcfd ="\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065F\u006c\u0061\u0067\u0073";_fcc :=byte (_fggc .Type );if _cebd =_eeeb .WriteByte (_fcc );_cebd !=nil {return _bf .Wrap (_cebd ,_bfcfd ,"\u0077\u0072\u0069ti\u006e\u0067\u0020\u0073\u0065\u0067\u006d\u0065\u006et\u0020t\u0079p\u0065 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};if !_fggc .RetainFlag &&!_fggc .PageAssociationFieldSize {return nil ;};if _cebd =_eeeb .SkipBits (-8);_cebd !=nil {return _bf .Wrap (_cebd ,_bfcfd ,"\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0061\u0063\u006b\u0020\u0074\u0068\u0065\u0020\u0062\u0069\u0074\u0073\u0020\u0066\u0061il\u0065\u0064");
};var _gdcae int ;if _fggc .RetainFlag {_gdcae =1;};if _cebd =_eeeb .WriteBit (_gdcae );_cebd !=nil {return _bf .Wrap (_cebd ,_bfcfd ,"\u0072\u0065\u0074\u0061in\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067\u0073");};_gdcae =0;
if _fggc .PageAssociationFieldSize {_gdcae =1;};if _cebd =_eeeb .WriteBit (_gdcae );_cebd !=nil {return _bf .Wrap (_cebd ,_bfcfd ,"p\u0061\u0067\u0065\u0020as\u0073o\u0063\u0069\u0061\u0074\u0069o\u006e\u0020\u0066\u006c\u0061\u0067");};_eeeb .FinishByte ();
return nil ;};type templater interface{form (_faa ,_gfb ,_ddad ,_gfga ,_gafc int16 )int16 ;setIndex (_dab *_cde .DecoderStats );};func (_dgcb *GenericRegion )overrideAtTemplate3 (_efb ,_fge ,_cdef ,_egbe ,_bdfbb int )int {_efb &=0x3EF;if _dgcb .GBAtY [0]==0&&_dgcb .GBAtX [0]>=-int8 (_bdfbb ){_efb |=(_egbe >>uint (7-(int8 (_bdfbb )+_dgcb .GBAtX [0]))&0x1)<<4;
}else {_efb |=int (_dgcb .getPixel (_fge +int (_dgcb .GBAtX [0]),_cdef +int (_dgcb .GBAtY [0])))<<4;};return _efb ;};func (_feec *SymbolDictionary )GetDictionary ()([]*_be .Bitmap ,error ){_df .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c-\u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){_df .Log .Trace ("\u005b\u0053\u0059M\u0042\u004f\u004c\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
_df .Log .Trace ("\u005b\u0053Y\u004d\u0042\u004f\u004c\u002dD\u0049\u0043\u0054\u0049\u004fN\u0041\u0052\u0059\u005d\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0020\u000a\u0045\u0078\u003a\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u000a\u006e\u0065\u0077\u003a\u0027\u0025\u0073\u0027",_feec ._dagg ,_feec ._cfdgd );
}();if _feec ._dagg ==nil {var _acegg error ;if _feec .UseRefinementAggregation {_feec ._efdge =_feec .getSbSymCodeLen ();};if !_feec .IsHuffmanEncoded {if _acegg =_feec .setCodingStatistics ();_acegg !=nil {return nil ,_acegg ;};};_feec ._cfdgd =make ([]*_be .Bitmap ,_feec .NumberOfNewSymbols );
var _abdce []int ;if _feec .IsHuffmanEncoded &&!_feec .UseRefinementAggregation {_abdce =make ([]int ,_feec .NumberOfNewSymbols );};if _acegg =_feec .setSymbolsArray ();_acegg !=nil {return nil ,_acegg ;};var _abaaa ,_acab int64 ;_feec ._ddbg =0;for _feec ._ddbg < _feec .NumberOfNewSymbols {_acab ,_acegg =_feec .decodeHeightClassDeltaHeight ();
if _acegg !=nil {return nil ,_acegg ;};_abaaa +=_acab ;var _dfca ,_caea uint32 ;_ebcd :=int64 (_feec ._ddbg );for {var _fbgcc int64 ;_fbgcc ,_acegg =_feec .decodeDifferenceWidth ();if _g .Is (_acegg ,_bc .ErrOOB ){break ;};if _acegg !=nil {return nil ,_acegg ;
};if _feec ._ddbg >=_feec .NumberOfNewSymbols {break ;};_dfca +=uint32 (_fbgcc );_caea +=_dfca ;if !_feec .IsHuffmanEncoded ||_feec .UseRefinementAggregation {if !_feec .UseRefinementAggregation {_acegg =_feec .decodeDirectlyThroughGenericRegion (_dfca ,uint32 (_abaaa ));
if _acegg !=nil {return nil ,_acegg ;};}else {_acegg =_feec .decodeAggregate (_dfca ,uint32 (_abaaa ));if _acegg !=nil {return nil ,_acegg ;};};}else if _feec .IsHuffmanEncoded &&!_feec .UseRefinementAggregation {_abdce [_feec ._ddbg ]=int (_dfca );};_feec ._ddbg ++;
};if _feec .IsHuffmanEncoded &&!_feec .UseRefinementAggregation {var _gfadb int64 ;if _feec .SdHuffBMSizeSelection ==0{var _gacb _fa .Tabler ;_gacb ,_acegg =_fa .GetStandardTable (1);if _acegg !=nil {return nil ,_acegg ;};_gfadb ,_acegg =_gacb .Decode (_feec ._ggbd );
if _acegg !=nil {return nil ,_acegg ;};}else {_gfadb ,_acegg =_feec .huffDecodeBmSize ();if _acegg !=nil {return nil ,_acegg ;};};_feec ._ggbd .Align ();var _acdg *_be .Bitmap ;_acdg ,_acegg =_feec .decodeHeightClassCollectiveBitmap (_gfadb ,uint32 (_abaaa ),_caea );
if _acegg !=nil {return nil ,_acegg ;};_acegg =_feec .decodeHeightClassBitmap (_acdg ,_ebcd ,int (_abaaa ),_abdce );if _acegg !=nil {return nil ,_acegg ;};};};_cegdb ,_acegg :=_feec .getToExportFlags ();if _acegg !=nil {return nil ,_acegg ;};_feec .setExportedSymbols (_cegdb );
};return _feec ._dagg ,nil ;};func (_agba *TextRegion )getUserTable (_dggf int )(_fa .Tabler ,error ){const _fgfg ="\u0067\u0065\u0074U\u0073\u0065\u0072\u0054\u0061\u0062\u006c\u0065";var _fdbb int ;for _ ,_edda :=range _agba .Header .RTSegments {if _edda .Type ==53{if _fdbb ==_dggf {_bdeac ,_dfbf :=_edda .GetSegmentData ();
if _dfbf !=nil {return nil ,_dfbf ;};_cbcc ,_edea :=_bdeac .(*TableSegment );if !_edea {_df .Log .Debug (_f .Sprintf ("\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079p\u0065\u00205\u0033\u0020\u002d\u0020\u0061\u006ed\u0020in\u0064\u0065\u0078\u003a\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_edda .SegmentNumber ));
return nil ,_bf .Error (_fgfg ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079\u0070e\u0020\u0035\u0033\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u002a\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};return _fa .NewEncodedTable (_cbcc );};_fdbb ++;};};return nil ,nil ;};func (_abaa *Header )readHeaderFlags ()error {const _gbcf ="\u0072e\u0061d\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006c\u0061\u0067\u0073";_abeb ,_ecdc :=_abaa .Reader .ReadBit ();
if _ecdc !=nil {return _bf .Wrap (_ecdc ,_gbcf ,"r\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067");};if _abeb !=0{_abaa .RetainFlag =true ;};_abeb ,_ecdc =_abaa .Reader .ReadBit ();if _ecdc !=nil {return _bf .Wrap (_ecdc ,_gbcf ,"\u0070\u0061g\u0065\u0020\u0061s\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e");
};if _abeb !=0{_abaa .PageAssociationFieldSize =true ;};_aece ,_ecdc :=_abaa .Reader .ReadBits (6);if _ecdc !=nil {return _bf .Wrap (_ecdc ,_gbcf ,"\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065");};_abaa .Type =Type (int (_aece ));
return nil ;};func (_egaef *SymbolDictionary )readNumberOfExportedSymbols ()error {_cfcaa ,_afgc :=_egaef ._ggbd .ReadBits (32);if _afgc !=nil {return _afgc ;};_egaef .NumberOfExportedSymbols =uint32 (_cfcaa &_a .MaxUint32 );return nil ;};type Type int ;
func (_bgad *RegionSegment )readCombinationOperator ()error {_dgcd ,_cdd :=_bgad ._ebf .ReadBits (3);if _cdd !=nil {return _cdd ;};_bgad .CombinaionOperator =_be .CombinationOperator (_dgcd &0xF);return nil ;};func (_effb *Header )referenceSize ()uint {switch {case _effb .SegmentNumber <=255:return 1;
case _effb .SegmentNumber <=65535:return 2;default:return 4;};};func (_agff *TextRegion )decodeDT ()(_gefd int64 ,_fefe error ){if _agff .IsHuffmanEncoded {if _agff .SbHuffDT ==3{_gefd ,_fefe =_agff ._cdbb .Decode (_agff ._fdge );if _fefe !=nil {return 0,_fefe ;
};}else {var _fccfg _fa .Tabler ;_fccfg ,_fefe =_fa .GetStandardTable (11+int (_agff .SbHuffDT ));if _fefe !=nil {return 0,_fefe ;};_gefd ,_fefe =_fccfg .Decode (_agff ._fdge );if _fefe !=nil {return 0,_fefe ;};};}else {var _dffd int32 ;_dffd ,_fefe =_agff ._gggg .DecodeInt (_agff ._babc );
if _fefe !=nil {return ;};_gefd =int64 (_dffd );};_gefd *=int64 (_agff .SbStrips );return _gefd ,nil ;};func (_cfae *TextRegion )computeSymbolCodeLength ()error {if _cfae .IsHuffmanEncoded {return _cfae .symbolIDCodeLengths ();};_cfae ._gade =int8 (_a .Ceil (_a .Log (float64 (_cfae .NumberOfSymbols ))/_a .Log (2)));
return nil ;};func (_ebaf *SymbolDictionary )decodeHeightClassDeltaHeight ()(int64 ,error ){if _ebaf .IsHuffmanEncoded {return _ebaf .decodeHeightClassDeltaHeightWithHuffman ();};_eabb ,_gccc :=_ebaf ._aceg .DecodeInt (_ebaf ._egbaf );if _gccc !=nil {return 0,_gccc ;
};return int64 (_eabb ),nil ;};func (_gec *GenericRefinementRegion )Init (header *Header ,r _de .StreamReader )error {_gec ._eg =header ;_gec ._bgg =r ;_gec .RegionInfo =NewRegionSegment (r );return _gec .parseHeader ();};type GenericRefinementRegion struct{_ee templater ;
_cg templater ;_bgg _de .StreamReader ;_eg *Header ;RegionInfo *RegionSegment ;IsTPGROn bool ;TemplateID int8 ;Template templater ;GrAtX []int8 ;GrAtY []int8 ;RegionBitmap *_be .Bitmap ;ReferenceBitmap *_be .Bitmap ;ReferenceDX int32 ;ReferenceDY int32 ;
_gd *_cde .Decoder ;_bga *_cde .DecoderStats ;_bef bool ;_cgf []bool ;};func (_cbcf *HalftoneRegion )GetRegionInfo ()*RegionSegment {return _cbcf .RegionSegment };type template1 struct{};func (_dea *GenericRefinementRegion )GetRegionBitmap ()(*_be .Bitmap ,error ){var _cgfg error ;
_df .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _cgfg !=nil {_df .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0047\u0065\u0074R\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006dap\u0020\u0066a\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_cgfg );
}else {_df .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _dea .RegionBitmap !=nil {return _dea .RegionBitmap ,nil ;};_fd :=0;if _dea .ReferenceBitmap ==nil {_dea .ReferenceBitmap ,_cgfg =_dea .getGrReference ();if _cgfg !=nil {return nil ,_cgfg ;};};if _dea ._gd ==nil {_dea ._gd ,_cgfg =_cde .New (_dea ._bgg );
if _cgfg !=nil {return nil ,_cgfg ;};};if _dea ._bga ==nil {_dea ._bga =_cde .NewStats (8192,1);};_dea .RegionBitmap =_be .New (int (_dea .RegionInfo .BitmapWidth ),int (_dea .RegionInfo .BitmapHeight ));if _dea .TemplateID ==0{if _cgfg =_dea .updateOverride ();
_cgfg !=nil {return nil ,_cgfg ;};};_gg :=(_dea .RegionBitmap .Width +7)&-8;var _fc int ;if _dea .IsTPGROn {_fc =int (-_dea .ReferenceDY )*_dea .ReferenceBitmap .RowStride ;};_cf :=_fc +1;for _geg :=0;_geg < _dea .RegionBitmap .Height ;_geg ++{if _dea .IsTPGROn {_fdc ,_ga :=_dea .decodeSLTP ();
if _ga !=nil {return nil ,_ga ;};_fd ^=_fdc ;};if _fd ==0{_cgfg =_dea .decodeOptimized (_geg ,_dea .RegionBitmap .Width ,_dea .RegionBitmap .RowStride ,_dea .ReferenceBitmap .RowStride ,_gg ,_fc ,_cf );if _cgfg !=nil {return nil ,_cgfg ;};}else {_cgfg =_dea .decodeTypicalPredictedLine (_geg ,_dea .RegionBitmap .Width ,_dea .RegionBitmap .RowStride ,_dea .ReferenceBitmap .RowStride ,_gg ,_fc );
if _cgfg !=nil {return nil ,_cgfg ;};};};return _dea .RegionBitmap ,nil ;};func (_dgdd *SymbolDictionary )readRegionFlags ()error {var (_edbgc uint64 ;_cbac int ;);_ ,_egae :=_dgdd ._ggbd .ReadBits (3);if _egae !=nil {return _egae ;};_cbac ,_egae =_dgdd ._ggbd .ReadBit ();
if _egae !=nil {return _egae ;};_dgdd .SdrTemplate =int8 (_cbac );_edbgc ,_egae =_dgdd ._ggbd .ReadBits (2);if _egae !=nil {return _egae ;};_dgdd .SdTemplate =int8 (_edbgc &0xf);_cbac ,_egae =_dgdd ._ggbd .ReadBit ();if _egae !=nil {return _egae ;};if _cbac ==1{_dgdd ._cgbee =true ;
};_cbac ,_egae =_dgdd ._ggbd .ReadBit ();if _egae !=nil {return _egae ;};if _cbac ==1{_dgdd ._afg =true ;};_cbac ,_egae =_dgdd ._ggbd .ReadBit ();if _egae !=nil {return _egae ;};if _cbac ==1{_dgdd .SdHuffAggInstanceSelection =true ;};_cbac ,_egae =_dgdd ._ggbd .ReadBit ();
if _egae !=nil {return _egae ;};_dgdd .SdHuffBMSizeSelection =int8 (_cbac );_edbgc ,_egae =_dgdd ._ggbd .ReadBits (2);if _egae !=nil {return _egae ;};_dgdd .SdHuffDecodeWidthSelection =int8 (_edbgc &0xf);_edbgc ,_egae =_dgdd ._ggbd .ReadBits (2);if _egae !=nil {return _egae ;
};_dgdd .SdHuffDecodeHeightSelection =int8 (_edbgc &0xf);_cbac ,_egae =_dgdd ._ggbd .ReadBit ();if _egae !=nil {return _egae ;};if _cbac ==1{_dgdd .UseRefinementAggregation =true ;};_cbac ,_egae =_dgdd ._ggbd .ReadBit ();if _egae !=nil {return _egae ;};
if _cbac ==1{_dgdd .IsHuffmanEncoded =true ;};return nil ;};type template0 struct{};func _ebcb (_dag _de .StreamReader ,_dbg *Header )*GenericRefinementRegion {return &GenericRefinementRegion {_bgg :_dag ,RegionInfo :NewRegionSegment (_dag ),_eg :_dbg ,_ee :&template0 {},_cg :&template1 {}};
};func (_cge *PatternDictionary )extractPatterns (_gdge *_be .Bitmap )error {var _eagef int ;_egfd :=make ([]*_be .Bitmap ,_cge .GrayMax +1);for _eagef <=int (_cge .GrayMax ){_cfcca :=int (_cge .HdpWidth )*_eagef ;_degd :=_cd .Rect (_cfcca ,0,_cfcca +int (_cge .HdpWidth ),int (_cge .HdpHeight ));
_fbgg ,_dfag :=_be .Extract (_degd ,_gdge );if _dfag !=nil {return _dfag ;};_egfd [_eagef ]=_fbgg ;_eagef ++;};_cge .Patterns =_egfd ;return nil ;};type Header struct{SegmentNumber uint32 ;Type Type ;RetainFlag bool ;PageAssociation int ;PageAssociationFieldSize bool ;
RTSegments []*Header ;HeaderLength int64 ;SegmentDataLength uint64 ;SegmentDataStartOffset uint64 ;Reader _de .StreamReader ;SegmentData Segmenter ;RTSNumbers []int ;RetainBits []uint8 ;};func (_daaf *TextRegion )blit (_bcbdg *_be .Bitmap ,_egde int64 )error {if _daaf .IsTransposed ==0&&(_daaf .ReferenceCorner ==2||_daaf .ReferenceCorner ==3){_daaf ._bddf +=int64 (_bcbdg .Width -1);
}else if _daaf .IsTransposed ==1&&(_daaf .ReferenceCorner ==0||_daaf .ReferenceCorner ==2){_daaf ._bddf +=int64 (_bcbdg .Height -1);};_bbfc :=_daaf ._bddf ;if _daaf .IsTransposed ==1{_bbfc ,_egde =_egde ,_bbfc ;};switch _daaf .ReferenceCorner {case 0:_egde -=int64 (_bcbdg .Height -1);
case 2:_egde -=int64 (_bcbdg .Height -1);_bbfc -=int64 (_bcbdg .Width -1);case 3:_bbfc -=int64 (_bcbdg .Width -1);};_egbb :=_be .Blit (_bcbdg ,_daaf .RegionBitmap ,int (_bbfc ),int (_egde ),_daaf .CombinationOperator );if _egbb !=nil {return _egbb ;};if _daaf .IsTransposed ==0&&(_daaf .ReferenceCorner ==0||_daaf .ReferenceCorner ==1){_daaf ._bddf +=int64 (_bcbdg .Width -1);
};if _daaf .IsTransposed ==1&&(_daaf .ReferenceCorner ==1||_daaf .ReferenceCorner ==3){_daaf ._bddf +=int64 (_bcbdg .Height -1);};return nil ;};func (_aacd *Header )GetSegmentData ()(Segmenter ,error ){var _aacc Segmenter ;if _aacd .SegmentData !=nil {_aacc =_aacd .SegmentData ;
};if _aacc ==nil {_fbbc ,_ccf :=_daaa [_aacd .Type ];if !_ccf {return nil ,_f .Errorf ("\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u002f\u0020\u0025\u0064\u0020\u0063\u0072e\u0061t\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e\u0020",_aacd .Type ,_aacd .Type );
};_aacc =_fbbc ();_df .Log .Trace ("\u005b\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u0074\u0020\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0030\u0034\u0058",_aacd .SegmentNumber ,_aacd .SegmentDataStartOffset );
_edac ,_ecec :=_aacd .subInputReader ();if _ecec !=nil {return nil ,_ecec ;};if _edc :=_aacc .Init (_aacd ,_edac );_edc !=nil {_df .Log .Debug ("\u0049\u006e\u0069\u0074 \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076 \u0066o\u0072\u0020\u0074\u0079\u0070\u0065\u003a \u0025\u0054",_edc ,_aacc );
return nil ,_edc ;};_aacd .SegmentData =_aacc ;};return _aacc ,nil ;};func (_gfff *SymbolDictionary )Init (h *Header ,r _de .StreamReader )error {_gfff .Header =h ;_gfff ._ggbd =r ;return _gfff .parseHeader ();};func (_dcag *Header )writeSegmentNumber (_eeed _de .BinaryWriter )(_fggb int ,_ccg error ){_dgfec :=make ([]byte ,4);
_d .BigEndian .PutUint32 (_dgfec ,_dcag .SegmentNumber );if _fggb ,_ccg =_eeed .Write (_dgfec );_ccg !=nil {return 0,_bf .Wrap (_ccg ,"\u0048e\u0061\u0064\u0065\u0072.\u0077\u0072\u0069\u0074\u0065S\u0065g\u006de\u006e\u0074\u004e\u0075\u006d\u0062\u0065r","");
};return _fggb ,nil ;};func (_dfed *TextRegion )parseHeader ()error {var _gabfd error ;_df .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069n\u0073\u002e\u002e\u002e");
defer func (){if _gabfd !=nil {_df .Log .Trace ("\u005b\u0054\u0045\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044E\u0052\u005d\u0020\u0066\u0061i\u006c\u0065d\u002e\u0020\u0025\u0076",_gabfd );
}else {_df .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069s\u0068\u0065\u0064\u002e");};}();if _gabfd =_dfed .RegionInfo .parseHeader ();
_gabfd !=nil {return _gabfd ;};if _gabfd =_dfed .readRegionFlags ();_gabfd !=nil {return _gabfd ;};if _dfed .IsHuffmanEncoded {if _gabfd =_dfed .readHuffmanFlags ();_gabfd !=nil {return _gabfd ;};};if _gabfd =_dfed .readUseRefinement ();_gabfd !=nil {return _gabfd ;
};if _gabfd =_dfed .readAmountOfSymbolInstances ();_gabfd !=nil {return _gabfd ;};if _gabfd =_dfed .getSymbols ();_gabfd !=nil {return _gabfd ;};if _gabfd =_dfed .computeSymbolCodeLength ();_gabfd !=nil {return _gabfd ;};if _gabfd =_dfed .checkInput ();
_gabfd !=nil {return _gabfd ;};_df .Log .Trace ("\u0025\u0073",_dfed .String ());return nil ;};func (_bfeb *SymbolDictionary )InitEncode (symbols *_be .Bitmaps ,symbolList []int ,symbolMap map[int ]int ,unborderSymbols bool )error {const _ggag ="S\u0079\u006d\u0062\u006f\u006c\u0044i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002eI\u006e\u0069\u0074E\u006ec\u006f\u0064\u0065";
_bfeb .SdATX =[]int8 {3,-3,2,-2};_bfeb .SdATY =[]int8 {-1,-1,-2,-2};_bfeb ._gdfe =symbols ;_bfeb ._bfce =make ([]int ,len (symbolList ));copy (_bfeb ._bfce ,symbolList );if len (_bfeb ._bfce )!=_bfeb ._gdfe .Size (){return _bf .Error (_ggag ,"s\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0061\u006e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u004ci\u0073\u0074\u0020\u006f\u0066\u0020\u0064\u0069\u0066\u0066er\u0065\u006e\u0074 \u0073i\u007a\u0065");
};_bfeb .NumberOfNewSymbols =uint32 (symbols .Size ());_bfeb .NumberOfExportedSymbols =uint32 (symbols .Size ());_bfeb ._gfbe =symbolMap ;_bfeb ._acdc =unborderSymbols ;return nil ;};type SymbolDictionary struct{_ggbd _de .StreamReader ;SdrTemplate int8 ;
SdTemplate int8 ;_cgbee bool ;_afg bool ;SdHuffAggInstanceSelection bool ;SdHuffBMSizeSelection int8 ;SdHuffDecodeWidthSelection int8 ;SdHuffDecodeHeightSelection int8 ;UseRefinementAggregation bool ;IsHuffmanEncoded bool ;SdATX []int8 ;SdATY []int8 ;SdrATX []int8 ;
SdrATY []int8 ;NumberOfExportedSymbols uint32 ;NumberOfNewSymbols uint32 ;Header *Header ;_eegb uint32 ;_abff []*_be .Bitmap ;_ddbg uint32 ;_cfdgd []*_be .Bitmap ;_efeb _fa .Tabler ;_dcdae _fa .Tabler ;_efgc _fa .Tabler ;_cbag _fa .Tabler ;_dagg []*_be .Bitmap ;
_becd []*_be .Bitmap ;_aceg *_cde .Decoder ;_acba *TextRegion ;_dcad *GenericRegion ;_fbfa *GenericRefinementRegion ;_fgaf *_cde .DecoderStats ;_egbaf *_cde .DecoderStats ;_fcfe *_cde .DecoderStats ;_cdce *_cde .DecoderStats ;_ebga *_cde .DecoderStats ;
_cafa *_cde .DecoderStats ;_dbed *_cde .DecoderStats ;_egeb *_cde .DecoderStats ;_fbgc *_cde .DecoderStats ;_efdge int8 ;_gdfe *_be .Bitmaps ;_bfce []int ;_gfbe map[int ]int ;_acdc bool ;};func NewHeader (d Documenter ,r _de .StreamReader ,offset int64 ,organizationType OrganizationType )(*Header ,error ){_agca :=&Header {Reader :r };
if _afdb :=_agca .parse (d ,r ,offset ,organizationType );_afdb !=nil {return nil ,_bf .Wrap (_afdb ,"\u004ee\u0077\u0048\u0065\u0061\u0064\u0065r","");};return _agca ,nil ;};func (_addg *GenericRegion )decodeTemplate2 (_bae ,_ebeg ,_ecb int ,_cca ,_ccec int )(_bea error ){const _ddf ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0032";
var (_caf ,_cgc int ;_gce ,_cdc int ;_gcc byte ;_decf ,_abfe int ;);if _bae >=1{_gcc ,_bea =_addg .Bitmap .GetByte (_ccec );if _bea !=nil {return _bf .Wrap (_bea ,_ddf ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0031");
};_gce =int (_gcc );};if _bae >=2{_gcc ,_bea =_addg .Bitmap .GetByte (_ccec -_addg .Bitmap .RowStride );if _bea !=nil {return _bf .Wrap (_bea ,_ddf ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0032");};_cdc =int (_gcc )<<4;
};_caf =(_gce >>3&0x7c)|(_cdc >>3&0x380);for _fca :=0;_fca < _ecb ;_fca =_decf {var (_gff byte ;_afc int ;);_decf =_fca +8;if _cgdg :=_ebeg -_fca ;_cgdg > 8{_afc =8;}else {_afc =_cgdg ;};if _bae > 0{_gce <<=8;if _decf < _ebeg {_gcc ,_bea =_addg .Bitmap .GetByte (_ccec +1);
if _bea !=nil {return _bf .Wrap (_bea ,_ddf ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0030");};_gce |=int (_gcc );};};if _bae > 1{_cdc <<=8;if _decf < _ebeg {_gcc ,_bea =_addg .Bitmap .GetByte (_ccec -_addg .Bitmap .RowStride +1);
if _bea !=nil {return _bf .Wrap (_bea ,_ddf ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0031");};_cdc |=int (_gcc )<<4;};};for _bbgc :=0;_bbgc < _afc ;_bbgc ++{_gcg :=uint (10-_bbgc );if _addg ._gbf {_cgc =_addg .overrideAtTemplate2 (_caf ,_fca +_bbgc ,_bae ,int (_gff ),_bbgc );
_addg ._efdd .SetIndex (int32 (_cgc ));}else {_addg ._efdd .SetIndex (int32 (_caf ));};_abfe ,_bea =_addg ._cfb .DecodeBit (_addg ._efdd );if _bea !=nil {return _bf .Wrap (_bea ,_ddf ,"");};_gff |=byte (_abfe <<uint (7-_bbgc ));_caf =((_caf &0x1bd)<<1)|_abfe |((_gce >>_gcg )&0x4)|((_cdc >>_gcg )&0x80);
};if _bcaf :=_addg .Bitmap .SetByte (_cca ,_gff );_bcaf !=nil {return _bf .Wrap (_bcaf ,_ddf ,"");};_cca ++;_ccec ++;};return nil ;};func (_cdcd *Header )readHeaderLength (_bfgf _de .StreamReader ,_ecfd int64 ){_cdcd .HeaderLength =_bfgf .StreamPosition ()-_ecfd ;
};func (_aff *GenericRegion )setParameters (_ecfbd bool ,_adb ,_ega int64 ,_gfad ,_efca uint32 ){_aff .IsMMREncoded =_ecfbd ;_aff .DataOffset =_adb ;_aff .DataLength =_ega ;_aff .RegionSegment .BitmapHeight =_gfad ;_aff .RegionSegment .BitmapWidth =_efca ;
_aff ._efa =nil ;_aff .Bitmap =nil ;};func (_acb *Header )readSegmentPageAssociation (_cceg Documenter ,_ddge _de .StreamReader ,_daac uint64 ,_dage ...int )(_abcc error ){const _ecc ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074P\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061t\u0069\u006f\u006e";
if !_acb .PageAssociationFieldSize {_adbc ,_fbbd :=_ddge .ReadBits (8);if _fbbd !=nil {return _bf .Wrap (_fbbd ,_ecc ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_acb .PageAssociation =int (_adbc &0xFF);}else {_agg ,_gdec :=_ddge .ReadBits (32);
if _gdec !=nil {return _bf .Wrap (_gdec ,_ecc ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_acb .PageAssociation =int (_agg &_a .MaxInt32 );};if _daac ==0{return nil ;};if _acb .PageAssociation !=0{_agbbb ,_cgcf :=_cceg .GetPage (_acb .PageAssociation );
if _cgcf !=nil {return _bf .Wrap (_cgcf ,_ecc ,"\u0061s\u0073\u006f\u0063\u0069a\u0074\u0065\u0064\u0020\u0070a\u0067e\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006ed");};var _gaef int ;for _bfgcb :=uint64 (0);_bfgcb < _daac ;_bfgcb ++{_gaef =_dage [_bfgcb ];
_acb .RTSegments [_bfgcb ],_cgcf =_agbbb .GetSegment (_gaef );if _cgcf !=nil {var _cegg error ;_acb .RTSegments [_bfgcb ],_cegg =_cceg .GetGlobalSegment (_gaef );if _cegg !=nil {return _bf .Wrapf (_cgcf ,_ecc ,"\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020s\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064\u0020\u0061\u0074\u0020pa\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0072\u0020\u0069\u006e\u0020\u0067\u006c\u006f\u0062\u0061\u006c\u0073",_acb .PageAssociation );
};};};return nil ;};for _aged :=uint64 (0);_aged < _daac ;_aged ++{_acb .RTSegments [_aged ],_abcc =_cceg .GetGlobalSegment (_dage [_aged ]);if _abcc !=nil {return _bf .Wrapf (_abcc ,_ecc ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u003a\u0020\u0027\u0025d\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064",_dage [_aged ]);
};};return nil ;};func (_fggf *TextRegion )encodeFlags (_edcb _de .BinaryWriter )(_cgbd int ,_ffbe error ){const _agdfa ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _ffbe =_edcb .WriteBit (int (_fggf .SbrTemplate ));_ffbe !=nil {return _cgbd ,_bf .Wrap (_ffbe ,_agdfa ,"s\u0062\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};if _ ,_ffbe =_edcb .WriteBits (uint64 (_fggf .SbDsOffset ),5);_ffbe !=nil {return _cgbd ,_bf .Wrap (_ffbe ,_agdfa ,"\u0073\u0062\u0044\u0073\u004f\u0066\u0066\u0073\u0065\u0074");};if _ffbe =_edcb .WriteBit (int (_fggf .DefaultPixel ));_ffbe !=nil {return _cgbd ,_bf .Wrap (_ffbe ,_agdfa ,"\u0044\u0065\u0066a\u0075\u006c\u0074\u0050\u0069\u0078\u0065\u006c");
};if _ ,_ffbe =_edcb .WriteBits (uint64 (_fggf .CombinationOperator ),2);_ffbe !=nil {return _cgbd ,_bf .Wrap (_ffbe ,_agdfa ,"\u0043\u006f\u006d\u0062in\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};if _ffbe =_edcb .WriteBit (int (_fggf .IsTransposed ));
_ffbe !=nil {return _cgbd ,_bf .Wrap (_ffbe ,_agdfa ,"\u0069\u0073\u0020\u0074\u0072\u0061\u006e\u0073\u0070\u006f\u0073\u0065\u0064");};if _ ,_ffbe =_edcb .WriteBits (uint64 (_fggf .ReferenceCorner ),2);_ffbe !=nil {return _cgbd ,_bf .Wrap (_ffbe ,_agdfa ,"\u0072\u0065f\u0065\u0072\u0065n\u0063\u0065\u0020\u0063\u006f\u0072\u006e\u0065\u0072");
};if _ ,_ffbe =_edcb .WriteBits (uint64 (_fggf .LogSBStrips ),2);_ffbe !=nil {return _cgbd ,_bf .Wrap (_ffbe ,_agdfa ,"L\u006f\u0067\u0053\u0042\u0053\u0074\u0072\u0069\u0070\u0073");};var _bdb int ;if _fggf .UseRefinement {_bdb =1;};if _ffbe =_edcb .WriteBit (_bdb );
_ffbe !=nil {return _cgbd ,_bf .Wrap (_ffbe ,_agdfa ,"\u0075\u0073\u0065\u0020\u0072\u0065\u0066\u0069\u006ee\u006d\u0065\u006e\u0074");};_bdb =0;if _fggf .IsHuffmanEncoded {_bdb =1;};if _ffbe =_edcb .WriteBit (_bdb );_ffbe !=nil {return _cgbd ,_bf .Wrap (_ffbe ,_agdfa ,"u\u0073\u0065\u0020\u0068\u0075\u0066\u0066\u006d\u0061\u006e");
};_cgbd =2;return _cgbd ,nil ;};func (_cbcg *GenericRegion )overrideAtTemplate1 (_ccbd ,_cdf ,_bbc ,_begc ,_fde int )int {_ccbd &=0x1FF7;if _cbcg .GBAtY [0]==0&&_cbcg .GBAtX [0]>=-int8 (_fde ){_ccbd |=(_begc >>uint (7-(int8 (_fde )+_cbcg .GBAtX [0]))&0x1)<<3;
}else {_ccbd |=int (_cbcg .getPixel (_cdf +int (_cbcg .GBAtX [0]),_bbc +int (_cbcg .GBAtY [0])))<<3;};return _ccbd ;};func (_cbee Type )String ()string {switch _cbee {case TSymbolDictionary :return "\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079";
case TIntermediateTextRegion :return "\u0049n\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020T\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateTextRegion :return "I\u006d\u006d\u0065\u0064ia\u0074e\u0020\u0054\u0065\u0078\u0074 \u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateLosslessTextRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020L\u006f\u0073\u0073\u006c\u0065\u0073\u0073 \u0054\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TPatternDictionary :return "\u0050a\u0074t\u0065\u0072\u006e\u0020\u0044i\u0063\u0074i\u006f\u006e\u0061\u0072\u0079";
case TIntermediateHalftoneRegion :return "\u0049\u006e\u0074\u0065r\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0048\u0061l\u0066t\u006f\u006e\u0065\u0020\u0052\u0065\u0067i\u006f\u006e";case TImmediateHalftoneRegion :return "\u0049m\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u0048\u0061l\u0066t\u006fn\u0065\u0020\u0052\u0065\u0067\u0069\u006fn";
case TImmediateLosslessHalftoneRegion :return "\u0049\u006d\u006ded\u0069\u0061\u0074\u0065\u0020\u004c\u006f\u0073\u0073l\u0065s\u0073 \u0048a\u006c\u0066\u0074\u006f\u006e\u0065\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TIntermediateGenericRegion :return "I\u006e\u0074\u0065\u0072\u006d\u0065d\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020R\u0065g\u0069\u006f\u006e";
case TImmediateGenericRegion :return "\u0049m\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006ee\u0072\u0069\u0063\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateLosslessGenericRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u004c\u006f\u0073\u0073\u006c\u0065\u0073\u0073\u0020\u0047e\u006e\u0065\u0072\u0069\u0063\u0020\u0052e\u0067\u0069\u006f\u006e";
case TIntermediateGenericRefinementRegion :return "\u0049\u006e\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0020\u0052\u0065\u0066i\u006e\u0065\u006d\u0065\u006et\u0020\u0052e\u0067\u0069\u006f\u006e";
case TImmediateGenericRefinementRegion :return "I\u006d\u006d\u0065\u0064\u0069\u0061t\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020\u0052\u0065\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0067\u0069o\u006e";case TImmediateLosslessGenericRefinementRegion :return "\u0049m\u006d\u0065d\u0069\u0061\u0074\u0065 \u004c\u006f\u0073s\u006c\u0065\u0073\u0073\u0020\u0047\u0065\u006e\u0065ri\u0063\u0020\u0052e\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020R\u0065\u0067i\u006f\u006e";
case TPageInformation :return "\u0050\u0061g\u0065\u0020\u0049n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e";case TEndOfPage :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0050\u0061\u0067\u0065";case TEndOfStrip :return "\u0045\u006e\u0064 \u004f\u0066\u0020\u0053\u0074\u0072\u0069\u0070";
case TEndOfFile :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0046\u0069\u006c\u0065";case TProfiles :return "\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0073";case TTables :return "\u0054\u0061\u0062\u006c\u0065\u0073";case TExtension :return "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn";
case TBitmap :return "\u0042\u0069\u0074\u006d\u0061\u0070";};return "I\u006ev\u0061\u006c\u0069\u0064\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0020Ki\u006e\u0064";};func (_cdgg *PatternDictionary )parseHeader ()error {_df .Log .Trace ("\u005b\u0050\u0041\u0054\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054I\u004f\u004e\u0041\u0052\u0059\u005d[\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d\u0020b\u0065\u0067\u0069\u006e");
defer func (){_df .Log .Trace ("\u005b\u0050\u0041T\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u005b\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_ ,_cfec :=_cdgg ._fecd .ReadBits (5);if _cfec !=nil {return _cfec ;};if _cfec =_cdgg .readTemplate ();_cfec !=nil {return _cfec ;};if _cfec =_cdgg .readIsMMREncoded ();_cfec !=nil {return _cfec ;};if _cfec =_cdgg .readPatternWidthAndHeight ();_cfec !=nil {return _cfec ;
};if _cfec =_cdgg .readGrayMax ();_cfec !=nil {return _cfec ;};if _cfec =_cdgg .computeSegmentDataStructure ();_cfec !=nil {return _cfec ;};return _cdgg .checkInput ();};func (_cgdd *template0 )form (_gab ,_ebb ,_aea ,_fg ,_daad int16 )int16 {return (_gab <<10)|(_ebb <<7)|(_aea <<4)|(_fg <<1)|_daad ;
};func (_gdg *PageInformationSegment )readDefaultPixelValue ()error {_ccag ,_efae :=_gdg ._dcg .ReadBit ();if _efae !=nil {return _efae ;};_gdg .DefaultPixelValue =uint8 (_ccag &0xf);return nil ;};func (_bdafd *TextRegion )symbolIDCodeLengths ()error {var (_abee []*_fa .Code ;
_cbfb uint64 ;_cecf _fa .Tabler ;_gddg error ;);for _aggec :=0;_aggec < 35;_aggec ++{_cbfb ,_gddg =_bdafd ._fdge .ReadBits (4);if _gddg !=nil {return _gddg ;};_cbce :=int (_cbfb &0xf);if _cbce > 0{_abee =append (_abee ,_fa .NewCode (int32 (_cbce ),0,int32 (_aggec ),false ));
};};_cecf ,_gddg =_fa .NewFixedSizeTable (_abee );if _gddg !=nil {return _gddg ;};var (_dfdc int64 ;_dceb uint32 ;_gcdf []*_fa .Code ;_afgb int64 ;);for _dceb < _bdafd .NumberOfSymbols {_afgb ,_gddg =_cecf .Decode (_bdafd ._fdge );if _gddg !=nil {return _gddg ;
};if _afgb < 32{if _afgb > 0{_gcdf =append (_gcdf ,_fa .NewCode (int32 (_afgb ),0,int32 (_dceb ),false ));};_dfdc =_afgb ;_dceb ++;}else {var _edbe ,_gcfdf int64 ;switch _afgb {case 32:_cbfb ,_gddg =_bdafd ._fdge .ReadBits (2);if _gddg !=nil {return _gddg ;
};_edbe =3+int64 (_cbfb );if _dceb > 0{_gcfdf =_dfdc ;};case 33:_cbfb ,_gddg =_bdafd ._fdge .ReadBits (3);if _gddg !=nil {return _gddg ;};_edbe =3+int64 (_cbfb );case 34:_cbfb ,_gddg =_bdafd ._fdge .ReadBits (7);if _gddg !=nil {return _gddg ;};_edbe =11+int64 (_cbfb );
};for _ccga :=0;_ccga < int (_edbe );_ccga ++{if _gcfdf > 0{_gcdf =append (_gcdf ,_fa .NewCode (int32 (_gcfdf ),0,int32 (_dceb ),false ));};_dceb ++;};};};_bdafd ._fdge .Align ();_bdafd ._edgc ,_gddg =_fa .NewFixedSizeTable (_gcdf );return _gddg ;};func (_cdfeg *TextRegion )Encode (w _de .BinaryWriter )(_bcfe int ,_ebgg error ){const _cceca ="\u0054\u0065\u0078\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u002e\u0045n\u0063\u006f\u0064\u0065";
if _bcfe ,_ebgg =_cdfeg .RegionInfo .Encode (w );_ebgg !=nil {return _bcfe ,_bf .Wrap (_ebgg ,_cceca ,"");};var _ddadc int ;if _ddadc ,_ebgg =_cdfeg .encodeFlags (w );_ebgg !=nil {return _bcfe ,_bf .Wrap (_ebgg ,_cceca ,"");};_bcfe +=_ddadc ;if _ddadc ,_ebgg =_cdfeg .encodeSymbols (w );
_ebgg !=nil {return _bcfe ,_bf .Wrap (_ebgg ,_cceca ,"");};_bcfe +=_ddadc ;return _bcfe ,nil ;};func (_ad *GenericRefinementRegion )GetRegionInfo ()*RegionSegment {return _ad .RegionInfo };func (_dbcb *TextRegion )encodeSymbols (_gebd _de .BinaryWriter )(_ffgb int ,_cggc error ){const _baac ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
_gedebb :=make ([]byte ,4);_d .BigEndian .PutUint32 (_gedebb ,_dbcb .NumberOfSymbols );if _ffgb ,_cggc =_gebd .Write (_gedebb );_cggc !=nil {return _ffgb ,_bf .Wrap (_cggc ,_baac ,"\u004e\u0075\u006dbe\u0072\u004f\u0066\u0053\u0079\u006d\u0062\u006f\u006c\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073");
};_edcce ,_cggc :=_be .NewClassedPoints (_dbcb ._gggb ,_dbcb ._deabf );if _cggc !=nil {return 0,_bf .Wrap (_cggc ,_baac ,"");};var _gdfeb ,_dffe int ;_ffddb :=_bb .New ();_ffddb .Init ();if _cggc =_ffddb .EncodeInteger (_bb .IADT ,0);_cggc !=nil {return _ffgb ,_bf .Wrap (_cggc ,_baac ,"\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0044\u0054");
};_fbae ,_cggc :=_edcce .GroupByY ();if _cggc !=nil {return 0,_bf .Wrap (_cggc ,_baac ,"");};for _ ,_bdeg :=range _fbae {_gegf :=int (_bdeg .YAtIndex (0));_bbbf :=_gegf -_gdfeb ;if _cggc =_ffddb .EncodeInteger (_bb .IADT ,_bbbf );_cggc !=nil {return _ffgb ,_bf .Wrap (_cggc ,_baac ,"");
};var _fadd int ;for _ebfd ,_fgae :=range _bdeg .IntSlice {switch _ebfd {case 0:_bgcb :=int (_bdeg .XAtIndex (_ebfd ))-_dffe ;if _cggc =_ffddb .EncodeInteger (_bb .IAFS ,_bgcb );_cggc !=nil {return _ffgb ,_bf .Wrap (_cggc ,_baac ,"");};_dffe +=_bgcb ;_fadd =_dffe ;
default:_bbfe :=int (_bdeg .XAtIndex (_ebfd ))-_fadd ;if _cggc =_ffddb .EncodeInteger (_bb .IADS ,_bbfe );_cggc !=nil {return _ffgb ,_bf .Wrap (_cggc ,_baac ,"");};_fadd +=_bbfe ;};_caag ,_dddb :=_dbcb ._cbdb .Get (_fgae );if _dddb !=nil {return _ffgb ,_bf .Wrap (_dddb ,_baac ,"");
};_cdae ,_dccd :=_dbcb ._cebfb [_caag ];if !_dccd {_cdae ,_dccd =_dbcb ._bgdd [_caag ];if !_dccd {return _ffgb ,_bf .Errorf (_baac ,"\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027\u0025d\u0027\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064 \u0069\u006e\u0020\u0067\u006cob\u0061\u006c\u0020\u0061\u006e\u0064\u0020\u006c\u006f\u0063\u0061\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020\u006d\u0061\u0070",_caag );
};};if _dddb =_ffddb .EncodeIAID (_dbcb ._aebd ,_cdae );_dddb !=nil {return _ffgb ,_bf .Wrap (_dddb ,_baac ,"");};};if _cggc =_ffddb .EncodeOOB (_bb .IADS );_cggc !=nil {return _ffgb ,_bf .Wrap (_cggc ,_baac ,"");};};_ffddb .Final ();_agfd ,_cggc :=_ffddb .WriteTo (_gebd );
if _cggc !=nil {return _ffgb ,_bf .Wrap (_cggc ,_baac ,"");};_ffgb +=int (_agfd );return _ffgb ,nil ;};func (_faef *TableSegment )HtHigh ()int32 {return _faef ._gaba };func (_cdag *TextRegion )String ()string {_ebgc :=&_cb .Builder {};_ebgc .WriteString ("\u000a[\u0054E\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u000a");
_ebgc .WriteString (_cdag .RegionInfo .String ()+"\u000a");_ebgc .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053br\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0025\u0076\u000a",_cdag .SbrTemplate ));_ebgc .WriteString (_f .Sprintf ("\u0009-\u0020S\u0062\u0044\u0073\u004f\u0066f\u0073\u0065t\u003a\u0020\u0025\u0076\u000a",_cdag .SbDsOffset ));
_ebgc .WriteString (_f .Sprintf ("\t\u002d \u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0050i\u0078\u0065\u006c\u003a %\u0076\u000a",_cdag .DefaultPixel ));_ebgc .WriteString (_f .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0076\u000a",_cdag .CombinationOperator ));
_ebgc .WriteString (_f .Sprintf ("\t\u002d \u0049\u0073\u0054\u0072\u0061\u006e\u0073\u0070o\u0073\u0065\u0064\u003a %\u0076\u000a",_cdag .IsTransposed ));_ebgc .WriteString (_f .Sprintf ("\u0009\u002d\u0020Re\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0043\u006f\u0072\u006e\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_cdag .ReferenceCorner ));
_ebgc .WriteString (_f .Sprintf ("\t\u002d\u0020\u0055\u0073eR\u0065f\u0069\u006e\u0065\u006d\u0065n\u0074\u003a\u0020\u0025\u0076\u000a",_cdag .UseRefinement ));_ebgc .WriteString (_f .Sprintf ("\u0009-\u0020\u0049\u0073\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045n\u0063\u006f\u0064\u0065\u0064\u003a\u0020\u0025\u0076\u000a",_cdag .IsHuffmanEncoded ));
if _cdag .IsHuffmanEncoded {_ebgc .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_cdag .SbHuffRSize ));_ebgc .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0059:\u0020\u0025\u0076\u000a",_cdag .SbHuffRDY ));
_ebgc .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0058:\u0020\u0025\u0076\u000a",_cdag .SbHuffRDX ));_ebgc .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069\u0067\u0068\u0074\u003a\u0020\u0025v\u000a",_cdag .SbHuffRDHeight ));
_ebgc .WriteString (_f .Sprintf ("\t\u002d\u0020\u0053\u0062Hu\u0066f\u0052\u0044\u0057\u0069\u0064t\u0068\u003a\u0020\u0025\u0076\u000a",_cdag .SbHuffRDWidth ));_ebgc .WriteString (_f .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0054\u003a\u0020\u0025\u0076\u000a",_cdag .SbHuffDT ));
_ebgc .WriteString (_f .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0053\u003a\u0020\u0025\u0076\u000a",_cdag .SbHuffDS ));_ebgc .WriteString (_f .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0046\u0053\u003a\u0020\u0025\u0076\u000a",_cdag .SbHuffFS ));
};_ebgc .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_cdag .SbrATX ));_ebgc .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0059:\u0020\u0025\u0076\u000a",_cdag .SbrATY ));
_ebgc .WriteString (_f .Sprintf ("\u0009\u002d\u0020N\u0075\u006d\u0062\u0065r\u004f\u0066\u0053\u0079\u006d\u0062\u006fl\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_cdag .NumberOfSymbolInstances ));_ebgc .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_cdag .SbrATX ));
return _ebgc .String ();};var _ _fa .BasicTabler =&TableSegment {};func (_dcfg *SymbolDictionary )decodeAggregate (_dfffg ,_ccfd uint32 )error {var (_dcb int64 ;_bfcd error ;);if _dcfg .IsHuffmanEncoded {_dcb ,_bfcd =_dcfg .huffDecodeRefAggNInst ();if _bfcd !=nil {return _bfcd ;
};}else {_dfgb ,_cgag :=_dcfg ._aceg .DecodeInt (_dcfg ._cdce );if _cgag !=nil {return _cgag ;};_dcb =int64 (_dfgb );};if _dcb > 1{return _dcfg .decodeThroughTextRegion (_dfffg ,_ccfd ,uint32 (_dcb ));}else if _dcb ==1{return _dcfg .decodeRefinedSymbol (_dfffg ,_ccfd );
};return nil ;};type SegmentEncoder interface{Encode (_adgc _de .BinaryWriter )(_dac int ,_ebd error );};func (_ggda *TextRegion )Init (header *Header ,r _de .StreamReader )error {_ggda .Header =header ;_ggda ._fdge =r ;_ggda .RegionInfo =NewRegionSegment (_ggda ._fdge );
return _ggda .parseHeader ();};func (_ggcf *PatternDictionary )checkInput ()error {if _ggcf .HdpHeight < 1||_ggcf .HdpWidth < 1{return _e .New ("in\u0076\u0061l\u0069\u0064\u0020\u0048\u0065\u0061\u0064\u0065\u0072 \u0056\u0061\u006c\u0075\u0065\u003a\u0020\u0057\u0069\u0064\u0074\u0068\u002f\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020g\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020z\u0065\u0072o");
};if _ggcf .IsMMREncoded {if _ggcf .HDTemplate !=0{_df .Log .Debug ("\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0020\u0048\u0044\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030");
};};return nil ;};func (_fbb *GenericRegion )GetRegionBitmap ()(_egd *_be .Bitmap ,_gga error ){if _fbb .Bitmap !=nil {return _fbb .Bitmap ,nil ;};if _fbb .IsMMREncoded {if _fbb ._efa ==nil {_fbb ._efa ,_gga =_dee .New (_fbb ._gdd ,int (_fbb .RegionSegment .BitmapWidth ),int (_fbb .RegionSegment .BitmapHeight ),_fbb .DataOffset ,_fbb .DataLength );
if _gga !=nil {return nil ,_gga ;};};_fbb .Bitmap ,_gga =_fbb ._efa .UncompressMMR ();return _fbb .Bitmap ,_gga ;};if _gga =_fbb .updateOverrideFlags ();_gga !=nil {return nil ,_gga ;};var _efga int ;if _fbb ._cfb ==nil {_fbb ._cfb ,_gga =_cde .New (_fbb ._gdd );
if _gga !=nil {return nil ,_gga ;};};if _fbb ._efdd ==nil {_fbb ._efdd =_cde .NewStats (65536,1);};_fbb .Bitmap =_be .New (int (_fbb .RegionSegment .BitmapWidth ),int (_fbb .RegionSegment .BitmapHeight ));_ede :=int (uint32 (_fbb .Bitmap .Width +7)&(^uint32 (7)));
for _cdg :=0;_cdg < _fbb .Bitmap .Height ;_cdg ++{if _fbb .IsTPGDon {var _cfcb int ;_cfcb ,_gga =_fbb .decodeSLTP ();if _gga !=nil {return nil ,_gga ;};_efga ^=_cfcb ;};if _efga ==1{if _cdg > 0{if _gga =_fbb .copyLineAbove (_cdg );_gga !=nil {return nil ,_gga ;
};};}else {if _gga =_fbb .decodeLine (_cdg ,_fbb .Bitmap .Width ,_ede );_gga !=nil {return nil ,_gga ;};};};return _fbb .Bitmap ,nil ;};func (_ce *EndOfStripe )Init (h *Header ,r _de .StreamReader )error {_ce ._eb =r ;return _ce .parseHeader (h ,r );};
func (_ddgc *GenericRegion )writeGBAtPixels (_geda _de .BinaryWriter )(_fbegb int ,_afcb error ){const _aga ="\u0077r\u0069t\u0065\u0047\u0042\u0041\u0074\u0050\u0069\u0078\u0065\u006c\u0073";if _ddgc .UseMMR {return 0,nil ;};_gffd :=1;if _ddgc .GBTemplate ==0{_gffd =4;
}else if _ddgc .UseExtTemplates {_gffd =12;};if len (_ddgc .GBAtX )!=_gffd {return 0,_bf .Errorf (_aga ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0058\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};if len (_ddgc .GBAtY )!=_gffd {return 0,_bf .Errorf (_aga ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0059\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};for _cgdb :=0;_cgdb < _gffd ;_cgdb ++{if _afcb =_geda .WriteByte (byte (_ddgc .GBAtX [_cgdb ]));_afcb !=nil {return _fbegb ,_bf .Wrap (_afcb ,_aga ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0058");};_fbegb ++;if _afcb =_geda .WriteByte (byte (_ddgc .GBAtY [_cgdb ]));
_afcb !=nil {return _fbegb ,_bf .Wrap (_afcb ,_aga ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0059");};_fbegb ++;};return _fbegb ,nil ;};type Pager interface{GetSegment (int )(*Header ,error );GetBitmap ()(*_be .Bitmap ,error );};func (_cfc *GenericRefinementRegion )String ()string {_agbb :=&_cb .Builder {};
_agbb .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_agbb .WriteString (_cfc .RegionInfo .String ()+"\u000a");_agbb .WriteString (_f .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0052\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_cfc .IsTPGROn ));
_agbb .WriteString (_f .Sprintf ("\u0009-\u0020T\u0065\u006d\u0070\u006c\u0061t\u0065\u0049D\u003a\u0020\u0025\u0076\u000a",_cfc .TemplateID ));_agbb .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_cfc .GrAtX ));
_agbb .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_cfc .GrAtY ));_agbb .WriteString (_f .Sprintf ("\u0009-\u0020R\u0065\u0066\u0065\u0072\u0065n\u0063\u0065D\u0058\u0020\u0025\u0076\u000a",_cfc .ReferenceDX ));
_agbb .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0052ef\u0065\u0072\u0065\u006e\u0063\u0044\u0065\u0059\u003a\u0020\u0025\u0076\u000a",_cfc .ReferenceDY ));return _agbb .String ();};func (_eaeb *TextRegion )decodeSymInRefSize ()(int64 ,error ){const _edec ="\u0064e\u0063o\u0064\u0065\u0053\u0079\u006dI\u006e\u0052e\u0066\u0053\u0069\u007a\u0065";
if _eaeb .SbHuffRSize ==0{_acde ,_ddcf :=_fa .GetStandardTable (1);if _ddcf !=nil {return 0,_bf .Wrap (_ddcf ,_edec ,"");};return _acde .Decode (_eaeb ._fdge );};if _eaeb ._fecb ==nil {var (_dbdc int ;_facb error ;);if _eaeb .SbHuffFS ==3{_dbdc ++;};if _eaeb .SbHuffDS ==3{_dbdc ++;
};if _eaeb .SbHuffDT ==3{_dbdc ++;};if _eaeb .SbHuffRDWidth ==3{_dbdc ++;};if _eaeb .SbHuffRDHeight ==3{_dbdc ++;};if _eaeb .SbHuffRDX ==3{_dbdc ++;};if _eaeb .SbHuffRDY ==3{_dbdc ++;};_eaeb ._fecb ,_facb =_eaeb .getUserTable (_dbdc );if _facb !=nil {return 0,_bf .Wrap (_facb ,_edec ,"");
};};_dgbad ,_eaba :=_eaeb ._fecb .Decode (_eaeb ._fdge );if _eaba !=nil {return 0,_bf .Wrap (_eaba ,_edec ,"");};return _dgbad ,nil ;};func (_gfc *PageInformationSegment )readResolution ()error {_fefc ,_bccb :=_gfc ._dcg .ReadBits (32);if _bccb !=nil {return _bccb ;
};_gfc .ResolutionX =int (_fefc &_a .MaxInt32 );_fefc ,_bccb =_gfc ._dcg .ReadBits (32);if _bccb !=nil {return _bccb ;};_gfc .ResolutionY =int (_fefc &_a .MaxInt32 );return nil ;};func (_bcdb *SymbolDictionary )setSymbolsArray ()error {if _bcdb ._abff ==nil {if _adfd :=_bcdb .retrieveImportSymbols ();
_adfd !=nil {return _adfd ;};};if _bcdb ._becd ==nil {_bcdb ._becd =append (_bcdb ._becd ,_bcdb ._abff ...);};return nil ;};func (_bcac *TextRegion )decodeRdy ()(int64 ,error ){const _fabb ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064y";if _bcac .IsHuffmanEncoded {if _bcac .SbHuffRDY ==3{if _bcac ._gcgd ==nil {var (_edca int ;
_ecbg error ;);if _bcac .SbHuffFS ==3{_edca ++;};if _bcac .SbHuffDS ==3{_edca ++;};if _bcac .SbHuffDT ==3{_edca ++;};if _bcac .SbHuffRDWidth ==3{_edca ++;};if _bcac .SbHuffRDHeight ==3{_edca ++;};if _bcac .SbHuffRDX ==3{_edca ++;};_bcac ._gcgd ,_ecbg =_bcac .getUserTable (_edca );
if _ecbg !=nil {return 0,_bf .Wrap (_ecbg ,_fabb ,"");};};return _bcac ._gcgd .Decode (_bcac ._fdge );};_ceec ,_cdfbg :=_fa .GetStandardTable (14+int (_bcac .SbHuffRDY ));if _cdfbg !=nil {return 0,_cdfbg ;};return _ceec .Decode (_bcac ._fdge );};_cbace ,_bebfc :=_bcac ._gggg .DecodeInt (_bcac ._bed );
if _bebfc !=nil {return 0,_bf .Wrap (_bebfc ,_fabb ,"");};return int64 (_cbace ),nil ;};func (_acaa *TextRegion )InitEncode (globalSymbolsMap ,localSymbolsMap map[int ]int ,comps []int ,inLL *_be .Points ,symbols *_be .Bitmaps ,classIDs *_ae .IntSlice ,boxes *_be .Boxes ,width ,height ,symBits int ){_acaa .RegionInfo =&RegionSegment {BitmapWidth :uint32 (width ),BitmapHeight :uint32 (height )};
_acaa ._cebfb =globalSymbolsMap ;_acaa ._bgdd =localSymbolsMap ;_acaa ._deabf =comps ;_acaa ._gggb =inLL ;_acaa ._gge =symbols ;_acaa ._cbdb =classIDs ;_acaa ._deda =boxes ;_acaa ._aebd =symBits ;};func (_cbdc *SymbolDictionary )encodeNumSyms (_dfcb _de .BinaryWriter )(_dedc int ,_fedc error ){const _ebbag ="\u0065\u006e\u0063\u006f\u0064\u0065\u004e\u0075\u006d\u0053\u0079\u006d\u0073";
_ddbf :=make ([]byte ,4);_d .BigEndian .PutUint32 (_ddbf ,_cbdc .NumberOfExportedSymbols );if _dedc ,_fedc =_dfcb .Write (_ddbf );_fedc !=nil {return _dedc ,_bf .Wrap (_fedc ,_ebbag ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};_d .BigEndian .PutUint32 (_ddbf ,_cbdc .NumberOfNewSymbols );_dfff ,_fedc :=_dfcb .Write (_ddbf );if _fedc !=nil {return _dedc ,_bf .Wrap (_fedc ,_ebbag ,"n\u0065\u0077\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};return _dedc +_dfff ,nil ;};func (_fafc *TableSegment )HtOOB ()int32 {return _fafc ._geddg };
func (_dcaf *PageInformationSegment )checkInput ()error {if _dcaf .PageBMHeight ==_a .MaxInt32 {if !_dcaf .IsStripe {_df .Log .Debug ("P\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0053\u0065\u0067me\u006e\u0074\u002e\u0049s\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0073\u0068ou\u006c\u0064 \u0062\u0065\u0020\u0074\u0072\u0075\u0065\u002e");
};};return nil ;};func (_fced *Header )writeSegmentPageAssociation (_decc _de .BinaryWriter )(_bdaca int ,_gfdbd error ){const _gfaf ="w\u0072\u0069\u0074\u0065\u0053\u0065g\u006d\u0065\u006e\u0074\u0050\u0061\u0067\u0065\u0041s\u0073\u006f\u0063i\u0061t\u0069\u006f\u006e";
if _fced .pageSize ()!=4{if _gfdbd =_decc .WriteByte (byte (_fced .PageAssociation ));_gfdbd !=nil {return 0,_bf .Wrap (_gfdbd ,_gfaf ,"\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0021\u003d\u0020\u0034");};return 1,nil ;};_babe :=make ([]byte ,4);
_d .BigEndian .PutUint32 (_babe ,uint32 (_fced .PageAssociation ));if _bdaca ,_gfdbd =_decc .Write (_babe );_gfdbd !=nil {return 0,_bf .Wrap (_gfdbd ,_gfaf ,"\u0034 \u0062y\u0074\u0065\u0020\u0070\u0061g\u0065\u0020n\u0075\u006d\u0062\u0065\u0072");};return _bdaca ,nil ;
};func (_ba *GenericRefinementRegion )decodeOptimized (_adc ,_cgfe ,_daa ,_ccd ,_deb ,_ef ,_ac int )error {var (_fae error ;_aa int ;_cdea int ;);_baf :=_adc -int (_ba .ReferenceDY );if _af :=int (-_ba .ReferenceDX );_af > 0{_aa =_af ;};_bfb :=_ba .ReferenceBitmap .GetByteIndex (_aa ,_baf );
if _ba .ReferenceDX > 0{_cdea =int (_ba .ReferenceDX );};_cfg :=_ba .RegionBitmap .GetByteIndex (_cdea ,_adc );switch _ba .TemplateID {case 0:_fae =_ba .decodeTemplate (_adc ,_cgfe ,_daa ,_ccd ,_deb ,_ef ,_ac ,_cfg ,_baf ,_bfb ,_ba ._ee );case 1:_fae =_ba .decodeTemplate (_adc ,_cgfe ,_daa ,_ccd ,_deb ,_ef ,_ac ,_cfg ,_baf ,_bfb ,_ba ._cg );
};return _fae ;};func _gdcb (_deae int )int {if _deae ==0{return 0;};_deae |=_deae >>1;_deae |=_deae >>2;_deae |=_deae >>4;_deae |=_deae >>8;_deae |=_deae >>16;return (_deae +1)>>1;};type RegionSegment struct{_ebf _de .StreamReader ;BitmapWidth uint32 ;
BitmapHeight uint32 ;XLocation uint32 ;YLocation uint32 ;CombinaionOperator _be .CombinationOperator ;};func (_bgee *Header )readDataStartOffset (_abfc _de .StreamReader ,_fdfc OrganizationType ){if _fdfc ==OSequential {_bgee .SegmentDataStartOffset =uint64 (_abfc .StreamPosition ());
};};func (_fgff *TextRegion )decodeIb (_eacc ,_faec int64 )(*_be .Bitmap ,error ){const _bddd ="\u0064\u0065\u0063\u006f\u0064\u0065\u0049\u0062";var (_gadbf error ;_cbfef *_be .Bitmap ;);if _eacc ==0{if int (_faec )> len (_fgff .Symbols )-1{return nil ,_bf .Error (_bddd ,"\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0049\u0042\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0020\u0069\u006e\u0064\u0065x\u0020\u006f\u0075\u0074\u0020o\u0066\u0020r\u0061\u006e\u0067\u0065");
};return _fgff .Symbols [int (_faec )],nil ;};var _dgdc ,_ecga ,_ggdf ,_cdde int64 ;_dgdc ,_gadbf =_fgff .decodeRdw ();if _gadbf !=nil {return nil ,_bf .Wrap (_gadbf ,_bddd ,"");};_ecga ,_gadbf =_fgff .decodeRdh ();if _gadbf !=nil {return nil ,_bf .Wrap (_gadbf ,_bddd ,"");
};_ggdf ,_gadbf =_fgff .decodeRdx ();if _gadbf !=nil {return nil ,_bf .Wrap (_gadbf ,_bddd ,"");};_cdde ,_gadbf =_fgff .decodeRdy ();if _gadbf !=nil {return nil ,_bf .Wrap (_gadbf ,_bddd ,"");};if _fgff .IsHuffmanEncoded {if _ ,_gadbf =_fgff .decodeSymInRefSize ();
_gadbf !=nil {return nil ,_bf .Wrap (_gadbf ,_bddd ,"");};_fgff ._fdge .Align ();};_dafd :=_fgff .Symbols [_faec ];_eaaf :=uint32 (_dafd .Width );_agfa :=uint32 (_dafd .Height );_fcbac :=int32 (uint32 (_dgdc )>>1)+int32 (_ggdf );_ecfe :=int32 (uint32 (_ecga )>>1)+int32 (_cdde );
if _fgff ._eabc ==nil {_fgff ._eabc =_ebcb (_fgff ._fdge ,nil );};_fgff ._eabc .setParameters (_fgff ._ggac ,_fgff ._gggg ,_fgff .SbrTemplate ,_eaaf +uint32 (_dgdc ),_agfa +uint32 (_ecga ),_dafd ,_fcbac ,_ecfe ,false ,_fgff .SbrATX ,_fgff .SbrATY );_cbfef ,_gadbf =_fgff ._eabc .GetRegionBitmap ();
if _gadbf !=nil {return nil ,_bf .Wrap (_gadbf ,_bddd ,"\u0067\u0072\u0066");};if _fgff .IsHuffmanEncoded {_fgff ._fdge .Align ();};return _cbfef ,nil ;};func (_dcbd *TextRegion )setContexts (_gcfe *_cde .DecoderStats ,_dffa *_cde .DecoderStats ,_gdfeg *_cde .DecoderStats ,_ebgcb *_cde .DecoderStats ,_acag *_cde .DecoderStats ,_cbdf *_cde .DecoderStats ,_daga *_cde .DecoderStats ,_dcfbf *_cde .DecoderStats ,_dgfa *_cde .DecoderStats ,_ddcg *_cde .DecoderStats ){_dcbd ._babc =_dffa ;
_dcbd ._faeb =_gdfeg ;_dcbd ._gfeb =_ebgcb ;_dcbd ._dcefcc =_acag ;_dcbd ._fcde =_daga ;_dcbd ._dbbc =_dcfbf ;_dcbd ._ebec =_cbdf ;_dcbd ._agef =_dgfa ;_dcbd ._bed =_ddcg ;_dcbd ._ggac =_gcfe ;};func (_efaa *TableSegment )StreamReader ()_de .StreamReader {return _efaa ._fccb };
func (_ecbe *PageInformationSegment )String ()string {_fcb :=&_cb .Builder {};_fcb .WriteString ("\u000a\u005b\u0050\u0041G\u0045\u002d\u0049\u004e\u0046\u004f\u0052\u004d\u0041\u0054I\u004fN\u002d\u0053\u0045\u0047\u004d\u0045\u004eT\u005d\u000a");_fcb .WriteString (_f .Sprintf ("\u0009\u002d \u0042\u004d\u0048e\u0069\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u000a",_ecbe .PageBMHeight ));
_fcb .WriteString (_f .Sprintf ("\u0009-\u0020B\u004d\u0057\u0069\u0064\u0074\u0068\u003a\u0020\u0025\u0064\u000a",_ecbe .PageBMWidth ));_fcb .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0058\u003a\u0020\u0025\u0064\u000a",_ecbe .ResolutionX ));
_fcb .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0059\u003a\u0020\u0025\u0064\u000a",_ecbe .ResolutionY ));_fcb .WriteString (_f .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0073\u000a",_ecbe ._aaf ));
_fcb .WriteString (_f .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006eO\u0070\u0065\u0072\u0061\u0074\u006f\u0072O\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025v\u000a",_ecbe ._ecdg ));_fcb .WriteString (_f .Sprintf ("\u0009-\u0020I\u0073\u004c\u006f\u0073\u0073l\u0065\u0073s\u003a\u0020\u0025\u0076\u000a",_ecbe .IsLossless ));
_fcb .WriteString (_f .Sprintf ("\u0009\u002d\u0020R\u0065\u0071\u0075\u0069r\u0065\u0073\u0041\u0075\u0078\u0069\u006ci\u0061\u0072\u0079\u0042\u0075\u0066\u0066\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_ecbe ._dfde ));_fcb .WriteString (_f .Sprintf ("\u0009\u002d\u0020M\u0069\u0067\u0068\u0074C\u006f\u006e\u0074\u0061\u0069\u006e\u0052e\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0076\u000a",_ecbe ._cdaf ));
_fcb .WriteString (_f .Sprintf ("\u0009\u002d\u0020\u0049\u0073\u0053\u0074\u0072\u0069\u0070\u0065\u0064:\u0020\u0025\u0076\u000a",_ecbe .IsStripe ));_fcb .WriteString (_f .Sprintf ("\t\u002d\u0020\u004d\u0061xS\u0074r\u0069\u0070\u0065\u0053\u0069z\u0065\u003a\u0020\u0025\u0076\u000a",_ecbe .MaxStripeSize ));
return _fcb .String ();};func (_ec *GenericRefinementRegion )decodeTypicalPredictedLineTemplate0 (_afd ,_adcd ,_ffg ,_cbd ,_bab ,_gca ,_bfbd ,_gf ,_cbde int )error {var (_dfa ,_bfd ,_geb ,_dc ,_gad ,_beg int ;_fad byte ;_cea error ;);if _afd > 0{_fad ,_cea =_ec .RegionBitmap .GetByte (_bfbd -_ffg );
if _cea !=nil {return _cea ;};_geb =int (_fad );};if _gf > 0&&_gf <=_ec .ReferenceBitmap .Height {_fad ,_cea =_ec .ReferenceBitmap .GetByte (_cbde -_cbd +_gca );if _cea !=nil {return _cea ;};_dc =int (_fad )<<4;};if _gf >=0&&_gf < _ec .ReferenceBitmap .Height {_fad ,_cea =_ec .ReferenceBitmap .GetByte (_cbde +_gca );
if _cea !=nil {return _cea ;};_gad =int (_fad )<<1;};if _gf > -2&&_gf < _ec .ReferenceBitmap .Height -1{_fad ,_cea =_ec .ReferenceBitmap .GetByte (_cbde +_cbd +_gca );if _cea !=nil {return _cea ;};_beg =int (_fad );};_dfa =((_geb >>5)&0x6)|((_beg >>2)&0x30)|(_gad &0x180)|(_dc &0xc00);
var _aae int ;for _bbb :=0;_bbb < _bab ;_bbb =_aae {var _aca int ;_aae =_bbb +8;var _efc int ;if _efc =_adcd -_bbb ;_efc > 8{_efc =8;};_ece :=_aae < _adcd ;_fb :=_aae < _ec .ReferenceBitmap .Width ;_cff :=_gca +1;if _afd > 0{_fad =0;if _ece {_fad ,_cea =_ec .RegionBitmap .GetByte (_bfbd -_ffg +1);
if _cea !=nil {return _cea ;};};_geb =(_geb <<8)|int (_fad );};if _gf > 0&&_gf <=_ec .ReferenceBitmap .Height {var _fe int ;if _fb {_fad ,_cea =_ec .ReferenceBitmap .GetByte (_cbde -_cbd +_cff );if _cea !=nil {return _cea ;};_fe =int (_fad )<<4;};_dc =(_dc <<8)|_fe ;
};if _gf >=0&&_gf < _ec .ReferenceBitmap .Height {var _ebc int ;if _fb {_fad ,_cea =_ec .ReferenceBitmap .GetByte (_cbde +_cff );if _cea !=nil {return _cea ;};_ebc =int (_fad )<<1;};_gad =(_gad <<8)|_ebc ;};if _gf > -2&&_gf < (_ec .ReferenceBitmap .Height -1){_fad =0;
if _fb {_fad ,_cea =_ec .ReferenceBitmap .GetByte (_cbde +_cbd +_cff );if _cea !=nil {return _cea ;};};_beg =(_beg <<8)|int (_fad );};for _cfgc :=0;_cfgc < _efc ;_cfgc ++{var _agb int ;_bbbd :=false ;_aac :=(_dfa >>4)&0x1ff;if _aac ==0x1ff{_bbbd =true ;
_agb =1;}else if _aac ==0x00{_bbbd =true ;};if !_bbbd {if _ec ._bef {_bfd =_ec .overrideAtTemplate0 (_dfa ,_bbb +_cfgc ,_afd ,_aca ,_cfgc );_ec ._bga .SetIndex (int32 (_bfd ));}else {_ec ._bga .SetIndex (int32 (_dfa ));};_agb ,_cea =_ec ._gd .DecodeBit (_ec ._bga );
if _cea !=nil {return _cea ;};};_eef :=uint (7-_cfgc );_aca |=_agb <<_eef ;_dfa =((_dfa &0xdb6)<<1)|_agb |(_geb >>_eef +5)&0x002|((_beg >>_eef +2)&0x010)|((_gad >>_eef )&0x080)|((_dc >>_eef )&0x400);};_cea =_ec .RegionBitmap .SetByte (_bfbd ,byte (_aca ));
if _cea !=nil {return _cea ;};_bfbd ++;_cbde ++;};return nil ;};func (_befc *GenericRefinementRegion )getPixel (_bfgc *_be .Bitmap ,_gdcd ,_cded int )int {if _gdcd < 0||_gdcd >=_bfgc .Width {return 0;};if _cded < 0||_cded >=_bfgc .Height {return 0;};if _bfgc .GetPixel (_gdcd ,_cded ){return 1;
};return 0;};func (_aaccb *PatternDictionary )readGrayMax ()error {_becc ,_eafg :=_aaccb ._fecd .ReadBits (32);if _eafg !=nil {return _eafg ;};_aaccb .GrayMax =uint32 (_becc &_a .MaxUint32 );return nil ;};func (_ffcc *PatternDictionary )computeSegmentDataStructure ()error {_ffcc .DataOffset =_ffcc ._fecd .StreamPosition ();
_ffcc .DataHeaderLength =_ffcc .DataOffset -_ffcc .DataHeaderOffset ;_ffcc .DataLength =int64 (_ffcc ._fecd .Length ())-_ffcc .DataHeaderLength ;return nil ;};func (_cadea *PageInformationSegment )Encode (w _de .BinaryWriter )(_adef int ,_fcd error ){const _cabf ="\u0050\u0061g\u0065\u0049\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u002e\u0045\u006eco\u0064\u0065";
_caeg :=make ([]byte ,4);_d .BigEndian .PutUint32 (_caeg ,uint32 (_cadea .PageBMWidth ));_adef ,_fcd =w .Write (_caeg );if _fcd !=nil {return _adef ,_bf .Wrap (_fcd ,_cabf ,"\u0077\u0069\u0064t\u0068");};_d .BigEndian .PutUint32 (_caeg ,uint32 (_cadea .PageBMHeight ));
var _fgbf int ;_fgbf ,_fcd =w .Write (_caeg );if _fcd !=nil {return _fgbf +_adef ,_bf .Wrap (_fcd ,_cabf ,"\u0068\u0065\u0069\u0067\u0068\u0074");};_adef +=_fgbf ;_d .BigEndian .PutUint32 (_caeg ,uint32 (_cadea .ResolutionX ));_fgbf ,_fcd =w .Write (_caeg );
if _fcd !=nil {return _fgbf +_adef ,_bf .Wrap (_fcd ,_cabf ,"\u0078\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");};_adef +=_fgbf ;_d .BigEndian .PutUint32 (_caeg ,uint32 (_cadea .ResolutionY ));if _fgbf ,_fcd =w .Write (_caeg );_fcd !=nil {return _fgbf +_adef ,_bf .Wrap (_fcd ,_cabf ,"\u0079\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");
};_adef +=_fgbf ;if _fcd =_cadea .encodeFlags (w );_fcd !=nil {return _adef ,_bf .Wrap (_fcd ,_cabf ,"");};_adef ++;if _fgbf ,_fcd =_cadea .encodeStripingInformation (w );_fcd !=nil {return _adef ,_bf .Wrap (_fcd ,_cabf ,"");};_adef +=_fgbf ;return _adef ,nil ;
};type Documenter interface{GetPage (int )(Pager ,error );GetGlobalSegment (int )(*Header ,error );};func (_ccce *HalftoneRegion )grayScaleDecoding (_fdea int )([][]int ,error ){var (_dfcf []int8 ;_gbgb []int8 ;);if !_ccce .IsMMREncoded {_dfcf =make ([]int8 ,4);
_gbgb =make ([]int8 ,4);if _ccce .HTemplate <=1{_dfcf [0]=3;}else if _ccce .HTemplate >=2{_dfcf [0]=2;};_gbgb [0]=-1;_dfcf [1]=-3;_gbgb [1]=-1;_dfcf [2]=2;_gbgb [2]=-2;_dfcf [3]=-2;_gbgb [3]=-2;};_gaff :=make ([]*_be .Bitmap ,_fdea );_ggf :=NewGenericRegion (_ccce ._ffga );
_ggf .setParametersMMR (_ccce .IsMMREncoded ,_ccce .DataOffset ,_ccce .DataLength ,_ccce .HGridHeight ,_ccce .HGridWidth ,_ccce .HTemplate ,false ,_ccce .HSkipEnabled ,_dfcf ,_gbgb );_dgef :=_fdea -1;var _aaag error ;_gaff [_dgef ],_aaag =_ggf .GetRegionBitmap ();
if _aaag !=nil {return nil ,_aaag ;};for _dgef > 0{_dgef --;_ggf .Bitmap =nil ;_gaff [_dgef ],_aaag =_ggf .GetRegionBitmap ();if _aaag !=nil {return nil ,_aaag ;};if _aaag =_ccce .combineGrayscalePlanes (_gaff ,_dgef );_aaag !=nil {return nil ,_aaag ;};
};return _ccce .computeGrayScalePlanes (_gaff ,_fdea );};func (_fdfg *Header )readSegmentNumber (_gedd _de .StreamReader )error {const _bgb ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";_cfaf :=make ([]byte ,4);
_ ,_cebb :=_gedd .Read (_cfaf );if _cebb !=nil {return _bf .Wrap (_cebb ,_bgb ,"");};_fdfg .SegmentNumber =_d .BigEndian .Uint32 (_cfaf );return nil ;};func (_gdce *TextRegion )initSymbols ()error {const _fedg ="i\u006e\u0069\u0074\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
for _ ,_badc :=range _gdce .Header .RTSegments {if _badc ==nil {return _bf .Error (_fedg ,"\u006e\u0069\u006c\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020pr\u006f\u0076\u0069\u0064\u0065\u0064 \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0074\u0065\u0078\u0074\u0020\u0072\u0065g\u0069\u006f\u006e\u0020\u0053\u0079\u006d\u0062o\u006c\u0073");
};if _badc .Type ==0{_decg ,_aaba :=_badc .GetSegmentData ();if _aaba !=nil {return _bf .Wrap (_aaba ,_fedg ,"");};_cbed ,_bdgc :=_decg .(*SymbolDictionary );if !_bdgc {return _bf .Error (_fedg ,"\u0072e\u0066\u0065r\u0072\u0065\u0064 \u0054\u006f\u0020\u0053\u0065\u0067\u006de\u006e\u0074\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_cbed ._fbgc =_gdce ._ebec ;_fceca ,_aaba :=_cbed .GetDictionary ();if _aaba !=nil {return _bf .Wrap (_aaba ,_fedg ,"");};_gdce .Symbols =append (_gdce .Symbols ,_fceca ...);};};_gdce .NumberOfSymbols =uint32 (len (_gdce .Symbols ));return nil ;};func (_bgff *GenericRegion )updateOverrideFlags ()error {const _fcae ="\u0075\u0070\u0064\u0061te\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _bgff .GBAtX ==nil ||_bgff .GBAtY ==nil {return nil ;};if len (_bgff .GBAtX )!=len (_bgff .GBAtY ){return _bf .Errorf (_fcae ,"i\u006eco\u0073i\u0073t\u0065\u006e\u0074\u0020\u0041T\u0020\u0070\u0069x\u0065\u006c\u002e\u0020\u0041m\u006f\u0075\u006et\u0020\u006f\u0066\u0020\u0027\u0078\u0027\u0020\u0070\u0069\u0078e\u006c\u0073\u003a %d\u002c\u0020\u0041\u006d\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0027\u0079\u0027\u0020\u0070\u0069\u0078e\u006cs\u003a\u0020\u0025\u0064",len (_bgff .GBAtX ),len (_bgff .GBAtY ));
};_bgff .GBAtOverride =make ([]bool ,len (_bgff .GBAtX ));switch _bgff .GBTemplate {case 0:if !_bgff .UseExtTemplates {if _bgff .GBAtX [0]!=3||_bgff .GBAtY [0]!=-1{_bgff .setOverrideFlag (0);};if _bgff .GBAtX [1]!=-3||_bgff .GBAtY [1]!=-1{_bgff .setOverrideFlag (1);
};if _bgff .GBAtX [2]!=2||_bgff .GBAtY [2]!=-2{_bgff .setOverrideFlag (2);};if _bgff .GBAtX [3]!=-2||_bgff .GBAtY [3]!=-2{_bgff .setOverrideFlag (3);};}else {if _bgff .GBAtX [0]!=-2||_bgff .GBAtY [0]!=0{_bgff .setOverrideFlag (0);};if _bgff .GBAtX [1]!=0||_bgff .GBAtY [1]!=-2{_bgff .setOverrideFlag (1);
};if _bgff .GBAtX [2]!=-2||_bgff .GBAtY [2]!=-1{_bgff .setOverrideFlag (2);};if _bgff .GBAtX [3]!=-1||_bgff .GBAtY [3]!=-2{_bgff .setOverrideFlag (3);};if _bgff .GBAtX [4]!=1||_bgff .GBAtY [4]!=-2{_bgff .setOverrideFlag (4);};if _bgff .GBAtX [5]!=2||_bgff .GBAtY [5]!=-1{_bgff .setOverrideFlag (5);
};if _bgff .GBAtX [6]!=-3||_bgff .GBAtY [6]!=0{_bgff .setOverrideFlag (6);};if _bgff .GBAtX [7]!=-4||_bgff .GBAtY [7]!=0{_bgff .setOverrideFlag (7);};if _bgff .GBAtX [8]!=2||_bgff .GBAtY [8]!=-2{_bgff .setOverrideFlag (8);};if _bgff .GBAtX [9]!=3||_bgff .GBAtY [9]!=-1{_bgff .setOverrideFlag (9);
};if _bgff .GBAtX [10]!=-2||_bgff .GBAtY [10]!=-2{_bgff .setOverrideFlag (10);};if _bgff .GBAtX [11]!=-3||_bgff .GBAtY [11]!=-1{_bgff .setOverrideFlag (11);};};case 1:if _bgff .GBAtX [0]!=3||_bgff .GBAtY [0]!=-1{_bgff .setOverrideFlag (0);};case 2:if _bgff .GBAtX [0]!=2||_bgff .GBAtY [0]!=-1{_bgff .setOverrideFlag (0);
};case 3:if _bgff .GBAtX [0]!=2||_bgff .GBAtY [0]!=-1{_bgff .setOverrideFlag (0);};};return nil ;};func (_dfg *GenericRefinementRegion )updateOverride ()error {if _dfg .GrAtX ==nil ||_dfg .GrAtY ==nil {return _e .New ("\u0041\u0054\u0020\u0070\u0069\u0078\u0065\u006c\u0073\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");
};if len (_dfg .GrAtX )!=len (_dfg .GrAtY ){return _e .New ("A\u0054\u0020\u0070\u0069xe\u006c \u0069\u006e\u0063\u006f\u006es\u0069\u0073\u0074\u0065\u006e\u0074");};_dfg ._cgf =make ([]bool ,len (_dfg .GrAtX ));switch _dfg .TemplateID {case 0:if _dfg .GrAtX [0]!=-1&&_dfg .GrAtY [0]!=-1{_dfg ._cgf [0]=true ;
_dfg ._bef =true ;};if _dfg .GrAtX [1]!=-1&&_dfg .GrAtY [1]!=-1{_dfg ._cgf [1]=true ;_dfg ._bef =true ;};case 1:_dfg ._bef =false ;};return nil ;};func (_eage *PageInformationSegment )readIsLossless ()error {_ddadf ,_edfc :=_eage ._dcg .ReadBit ();if _edfc !=nil {return _edfc ;
};if _ddadf ==1{_eage .IsLossless =true ;};return nil ;};func (_dbdef *SymbolDictionary )addSymbol (_fefa Regioner )error {_ebbf ,_dga :=_fefa .GetRegionBitmap ();if _dga !=nil {return _dga ;};_dbdef ._cfdgd [_dbdef ._ddbg ]=_ebbf ;_dbdef ._becd =append (_dbdef ._becd ,_ebbf );
_df .Log .Trace ("\u005b\u0053YM\u0042\u004f\u004c \u0044\u0049\u0043\u0054ION\u0041RY\u005d\u0020\u0041\u0064\u0064\u0065\u0064 s\u0079\u006d\u0062\u006f\u006c\u003a\u0020%\u0073",_ebbf );return nil ;};func (_dcbf *SymbolDictionary )setCodingStatistics ()error {if _dcbf ._egeb ==nil {_dcbf ._egeb =_cde .NewStats (512,1);
};if _dcbf ._egbaf ==nil {_dcbf ._egbaf =_cde .NewStats (512,1);};if _dcbf ._fcfe ==nil {_dcbf ._fcfe =_cde .NewStats (512,1);};if _dcbf ._cdce ==nil {_dcbf ._cdce =_cde .NewStats (512,1);};if _dcbf ._ebga ==nil {_dcbf ._ebga =_cde .NewStats (512,1);};
if _dcbf .UseRefinementAggregation &&_dcbf ._fbgc ==nil {_dcbf ._fbgc =_cde .NewStats (1<<uint (_dcbf ._efdge ),1);_dcbf ._cafa =_cde .NewStats (512,1);_dcbf ._dbed =_cde .NewStats (512,1);};if _dcbf ._fgaf ==nil {_dcbf ._fgaf =_cde .NewStats (65536,1);
};if _dcbf ._aceg ==nil {var _gcacd error ;_dcbf ._aceg ,_gcacd =_cde .New (_dcbf ._ggbd );if _gcacd !=nil {return _gcacd ;};};return nil ;};func (_cgbe *Header )readReferredToSegmentNumbers (_bfde _de .StreamReader ,_fgd int )([]int ,error ){const _fcec ="\u0072\u0065\u0061\u0064R\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053e\u0067m\u0065\u006e\u0074\u004e\u0075\u006d\u0062e\u0072\u0073";
_bcf :=make ([]int ,_fgd );if _fgd > 0{_cgbe .RTSegments =make ([]*Header ,_fgd );var (_gbge uint64 ;_dfgf error ;);for _bfcf :=0;_bfcf < _fgd ;_bfcf ++{_gbge ,_dfgf =_bfde .ReadBits (byte (_cgbe .referenceSize ())<<3);if _dfgf !=nil {return nil ,_bf .Wrapf (_dfgf ,_fcec ,"\u0027\u0025\u0064\u0027 \u0072\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0020\u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u0075\u006db\u0065\u0072",_bfcf );
};_bcf [_bfcf ]=int (_gbge &_a .MaxInt32 );};};return _bcf ,nil ;};func (_bag *HalftoneRegion )combineGrayscalePlanes (_afdc []*_be .Bitmap ,_efgb int )error {_gbe :=0;for _gac :=0;_gac < _afdc [_efgb ].Height ;_gac ++{for _abbc :=0;_abbc < _afdc [_efgb ].Width ;
_abbc +=8{_dfge ,_fdeb :=_afdc [_efgb +1].GetByte (_gbe );if _fdeb !=nil {return _fdeb ;};_eagc ,_fdeb :=_afdc [_efgb ].GetByte (_gbe );if _fdeb !=nil {return _fdeb ;};_fdeb =_afdc [_efgb ].SetByte (_gbe ,_be .CombineBytes (_eagc ,_dfge ,_be .CmbOpXor ));
if _fdeb !=nil {return _fdeb ;};_gbe ++;};};return nil ;};type TableSegment struct{_fccb _de .StreamReader ;_geddg int32 ;_bceb int32 ;_aeaag int32 ;_egad int32 ;_gaba int32 ;};func (_cdgf *RegionSegment )Size ()int {return 17};func (_ace *HalftoneRegion )GetPatterns ()([]*_be .Bitmap ,error ){var (_agf []*_be .Bitmap ;
_cdaa error ;);for _ ,_eeae :=range _ace ._adg .RTSegments {var _afcc Segmenter ;_afcc ,_cdaa =_eeae .GetSegmentData ();if _cdaa !=nil {_df .Log .Debug ("\u0047e\u0074\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061 \u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025v",_cdaa );
return nil ,_cdaa ;};_cdfb ,_dbge :=_afcc .(*PatternDictionary );if !_dbge {_cdaa =_f .Errorf ("\u0072e\u006c\u0061t\u0065\u0064\u0020\u0073e\u0067\u006d\u0065n\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0070at\u0074\u0065\u0072n\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u003a \u0025\u0054",_afcc );
return nil ,_cdaa ;};var _fbaf []*_be .Bitmap ;_fbaf ,_cdaa =_cdfb .GetDictionary ();if _cdaa !=nil {_df .Log .Debug ("\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cdaa );
return nil ,_cdaa ;};_agf =append (_agf ,_fbaf ...);};return _agf ,nil ;};func (_ffa *Header )writeSegmentDataLength (_gbbed _de .BinaryWriter )(_edcd int ,_fdfgg error ){_bbag :=make ([]byte ,4);_d .BigEndian .PutUint32 (_bbag ,uint32 (_ffa .SegmentDataLength ));
if _edcd ,_fdfgg =_gbbed .Write (_bbag );_fdfgg !=nil {return 0,_bf .Wrap (_fdfgg ,"\u0048\u0065a\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u004c\u0065ng\u0074\u0068","");};return _edcd ,nil ;
};type GenericRegion struct{_gdd _de .StreamReader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;UseExtTemplates bool ;IsTPGDon bool ;GBTemplate byte ;IsMMREncoded bool ;UseMMR bool ;
GBAtX []int8 ;GBAtY []int8 ;GBAtOverride []bool ;_gbf bool ;Bitmap *_be .Bitmap ;_cfb *_cde .Decoder ;_efdd *_cde .DecoderStats ;_efa *_dee .Decoder ;};func (_dbba *GenericRegion )decodeTemplate1 (_geea ,_cab ,_gfe int ,_dec ,_abdb int )(_eca error ){const _ffbc ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0031";
var (_agdf ,_ebbdf int ;_bfcb ,_age int ;_bce byte ;_bfcc ,_bdfa int ;);if _geea >=1{_bce ,_eca =_dbba .Bitmap .GetByte (_abdb );if _eca !=nil {return _bf .Wrap (_eca ,_ffbc ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_bfcb =int (_bce );};if _geea >=2{_bce ,_eca =_dbba .Bitmap .GetByte (_abdb -_dbba .Bitmap .RowStride );
if _eca !=nil {return _bf .Wrap (_eca ,_ffbc ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_age =int (_bce )<<5;};_agdf =((_bfcb >>1)&0x1f8)|((_age >>1)&0x1e00);for _bgf :=0;_bgf < _gfe ;_bgf =_bfcc {var (_ggae byte ;_egg int ;);_bfcc =_bgf +8;if _abe :=_cab -_bgf ;
_abe > 8{_egg =8;}else {_egg =_abe ;};if _geea > 0{_bfcb <<=8;if _bfcc < _cab {_bce ,_eca =_dbba .Bitmap .GetByte (_abdb +1);if _eca !=nil {return _bf .Wrap (_eca ,_ffbc ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_bfcb |=int (_bce );};};if _geea > 1{_age <<=8;
if _bfcc < _cab {_bce ,_eca =_dbba .Bitmap .GetByte (_abdb -_dbba .Bitmap .RowStride +1);if _eca !=nil {return _bf .Wrap (_eca ,_ffbc ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_age |=int (_bce )<<5;};};for _fbe :=0;_fbe < _egg ;_fbe ++{if _dbba ._gbf {_ebbdf =_dbba .overrideAtTemplate1 (_agdf ,_bgf +_fbe ,_geea ,int (_ggae ),_fbe );
_dbba ._efdd .SetIndex (int32 (_ebbdf ));}else {_dbba ._efdd .SetIndex (int32 (_agdf ));};_bdfa ,_eca =_dbba ._cfb .DecodeBit (_dbba ._efdd );if _eca !=nil {return _bf .Wrap (_eca ,_ffbc ,"");};_ggae |=byte (_bdfa )<<uint (7-_fbe );_bgef :=uint (8-_fbe );
_agdf =((_agdf &0xefb)<<1)|_bdfa |((_bfcb >>_bgef )&0x8)|((_age >>_bgef )&0x200);};if _cdab :=_dbba .Bitmap .SetByte (_dec ,_ggae );_cdab !=nil {return _bf .Wrap (_cdab ,_ffbc ,"");};_dec ++;_abdb ++;};return nil ;};func (_edb *template1 )form (_bccd ,_bec ,_fea ,_ddae ,_acc int16 )int16 {return ((_bccd &0x02)<<8)|(_bec <<6)|((_fea &0x03)<<4)|(_ddae <<1)|_acc ;
};func (_fbbdg *PageInformationSegment )readIsStriped ()error {_ecde ,_dbdf :=_fbbdg ._dcg .ReadBit ();if _dbdf !=nil {return _dbdf ;};if _ecde ==1{_fbbdg .IsStripe =true ;};return nil ;};