//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package segments ;import (_eg "encoding/binary";_ea "errors";_bg "fmt";_ed "github.com/unidoc/unipdf/v3/common";_ca "github.com/unidoc/unipdf/v3/internal/bitwise";_bd "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_cab "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_a "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/arithmetic";_ab "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/huffman";_f "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/mmr";_dd "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/arithmetic";
_dg "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_cae "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_bgg "golang.org/x/xerrors";_d "image";_da "io";_c "math";_b "strings";_cf "time";);func (_eacf *TextRegion )Encode (w _ca .BinaryWriter )(_gdeb int ,_cfbac error ){const _gcef ="\u0054\u0065\u0078\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u002e\u0045n\u0063\u006f\u0064\u0065";
if _gdeb ,_cfbac =_eacf .RegionInfo .Encode (w );_cfbac !=nil {return _gdeb ,_dg .Wrap (_cfbac ,_gcef ,"");};var _egbe int ;if _egbe ,_cfbac =_eacf .encodeFlags (w );_cfbac !=nil {return _gdeb ,_dg .Wrap (_cfbac ,_gcef ,"");};_gdeb +=_egbe ;if _egbe ,_cfbac =_eacf .encodeSymbols (w );
_cfbac !=nil {return _gdeb ,_dg .Wrap (_cfbac ,_gcef ,"");};_gdeb +=_egbe ;return _gdeb ,nil ;};type TableSegment struct{_bgca _ca .StreamReader ;_ecea int32 ;_bggf int32 ;_efbf int32 ;_abcf int32 ;_eaea int32 ;};type PatternDictionary struct{_fdbfa _ca .StreamReader ;
DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;GBAtX []int8 ;GBAtY []int8 ;IsMMREncoded bool ;HDTemplate byte ;HdpWidth byte ;HdpHeight byte ;Patterns []*_cab .Bitmap ;GrayMax uint32 ;};const (TSymbolDictionary Type =0;
TIntermediateTextRegion Type =4;TImmediateTextRegion Type =6;TImmediateLosslessTextRegion Type =7;TPatternDictionary Type =16;TIntermediateHalftoneRegion Type =20;TImmediateHalftoneRegion Type =22;TImmediateLosslessHalftoneRegion Type =23;TIntermediateGenericRegion Type =36;
TImmediateGenericRegion Type =38;TImmediateLosslessGenericRegion Type =39;TIntermediateGenericRefinementRegion Type =40;TImmediateGenericRefinementRegion Type =42;TImmediateLosslessGenericRefinementRegion Type =43;TPageInformation Type =48;TEndOfPage Type =49;
TEndOfStrip Type =50;TEndOfFile Type =51;TProfiles Type =52;TTables Type =53;TExtension Type =62;TBitmap Type =70;);func (_eedf *SymbolDictionary )getToExportFlags ()([]int ,error ){var (_daace int ;_gbfe int32 ;_bddda error ;_dbee =int32 (_eedf ._cgeg +_eedf .NumberOfNewSymbols );
_gbdg =make ([]int ,_dbee ););for _cdbg :=int32 (0);_cdbg < _dbee ;_cdbg +=_gbfe {if _eedf .IsHuffmanEncoded {_gfba ,_efaf :=_ab .GetStandardTable (1);if _efaf !=nil {return nil ,_efaf ;};_bcaa ,_efaf :=_gfba .Decode (_eedf ._defe );if _efaf !=nil {return nil ,_efaf ;
};_gbfe =int32 (_bcaa );}else {_gbfe ,_bddda =_eedf ._ggbg .DecodeInt (_eedf ._afdg );if _bddda !=nil {return nil ,_bddda ;};};if _gbfe !=0{for _ebaa :=_cdbg ;_ebaa < _cdbg +_gbfe ;_ebaa ++{_gbdg [_ebaa ]=_daace ;};};if _daace ==0{_daace =1;}else {_daace =0;
};};return _gbdg ,nil ;};func (_bdeeg *PageInformationSegment )parseHeader ()(_aebg error ){_ed .Log .Trace ("\u005b\u0050\u0061\u0067\u0065I\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067m\u0065\u006e\u0074\u005d\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u002e\u002e");
defer func (){var _eegge ="[\u0050\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072m\u0061\u0074\u0069\u006f\u006e\u0053\u0065gm\u0065\u006e\u0074\u005d \u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065ad\u0065\u0072 \u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064";
if _aebg !=nil {_eegge +="\u0020\u0077\u0069t\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u0020"+_aebg .Error ();}else {_eegge +="\u0020\u0073\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079";};_ed .Log .Trace (_eegge );}();if _aebg =_bdeeg .readWidthAndHeight ();
_aebg !=nil {return _aebg ;};if _aebg =_bdeeg .readResolution ();_aebg !=nil {return _aebg ;};_ ,_aebg =_bdeeg ._gcgb .ReadBit ();if _aebg !=nil {return _aebg ;};if _aebg =_bdeeg .readCombinationOperatorOverrideAllowed ();_aebg !=nil {return _aebg ;};if _aebg =_bdeeg .readRequiresAuxiliaryBuffer ();
_aebg !=nil {return _aebg ;};if _aebg =_bdeeg .readCombinationOperator ();_aebg !=nil {return _aebg ;};if _aebg =_bdeeg .readDefaultPixelValue ();_aebg !=nil {return _aebg ;};if _aebg =_bdeeg .readContainsRefinement ();_aebg !=nil {return _aebg ;};if _aebg =_bdeeg .readIsLossless ();
_aebg !=nil {return _aebg ;};if _aebg =_bdeeg .readIsStriped ();_aebg !=nil {return _aebg ;};if _aebg =_bdeeg .readMaxStripeSize ();_aebg !=nil {return _aebg ;};if _aebg =_bdeeg .checkInput ();_aebg !=nil {return _aebg ;};_ed .Log .Trace ("\u0025\u0073",_bdeeg );
return nil ;};type templater interface{form (_fde ,_dfba ,_ggc ,_fae ,_bdd int16 )int16 ;setIndex (_ced *_a .DecoderStats );};func (_fade *TextRegion )Init (header *Header ,r _ca .StreamReader )error {_fade .Header =header ;_fade ._abfe =r ;_fade .RegionInfo =NewRegionSegment (_fade ._abfe );
return _fade .parseHeader ();};func (_ecab *GenericRefinementRegion )String ()string {_dgd :=&_b .Builder {};_dgd .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_dgd .WriteString (_ecab .RegionInfo .String ()+"\u000a");
_dgd .WriteString (_bg .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0052\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_ecab .IsTPGROn ));_dgd .WriteString (_bg .Sprintf ("\u0009-\u0020T\u0065\u006d\u0070\u006c\u0061t\u0065\u0049D\u003a\u0020\u0025\u0076\u000a",_ecab .TemplateID ));
_dgd .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_ecab .GrAtX ));_dgd .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_ecab .GrAtY ));
_dgd .WriteString (_bg .Sprintf ("\u0009-\u0020R\u0065\u0066\u0065\u0072\u0065n\u0063\u0065D\u0058\u0020\u0025\u0076\u000a",_ecab .ReferenceDX ));_dgd .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0052ef\u0065\u0072\u0065\u006e\u0063\u0044\u0065\u0059\u003a\u0020\u0025\u0076\u000a",_ecab .ReferenceDY ));
return _dgd .String ();};func (_fcc *GenericRefinementRegion )updateOverride ()error {if _fcc .GrAtX ==nil ||_fcc .GrAtY ==nil {return _ea .New ("\u0041\u0054\u0020\u0070\u0069\u0078\u0065\u006c\u0073\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");};if len (_fcc .GrAtX )!=len (_fcc .GrAtY ){return _ea .New ("A\u0054\u0020\u0070\u0069xe\u006c \u0069\u006e\u0063\u006f\u006es\u0069\u0073\u0074\u0065\u006e\u0074");
};_fcc ._ee =make ([]bool ,len (_fcc .GrAtX ));switch _fcc .TemplateID {case 0:if _fcc .GrAtX [0]!=-1&&_fcc .GrAtY [0]!=-1{_fcc ._ee [0]=true ;_fcc ._gd =true ;};if _fcc .GrAtX [1]!=-1&&_fcc .GrAtY [1]!=-1{_fcc ._ee [1]=true ;_fcc ._gd =true ;};case 1:_fcc ._gd =false ;
};return nil ;};func (_ddafd *SymbolDictionary )decodeHeightClassDeltaHeightWithHuffman ()(int64 ,error ){switch _ddafd .SdHuffDecodeHeightSelection {case 0:_cbbb ,_gbe :=_ab .GetStandardTable (4);if _gbe !=nil {return 0,_gbe ;};return _cbbb .Decode (_ddafd ._defe );
case 1:_cagd ,_bdac :=_ab .GetStandardTable (5);if _bdac !=nil {return 0,_bdac ;};return _cagd .Decode (_ddafd ._defe );case 3:if _ddafd ._gcea ==nil {_cfef ,_aga :=_ab .GetStandardTable (0);if _aga !=nil {return 0,_aga ;};_ddafd ._gcea =_cfef ;};return _ddafd ._gcea .Decode (_ddafd ._defe );
};return 0,nil ;};func (_eege *GenericRegion )decodeTemplate3 (_fda ,_efde ,_fgg int ,_cafd ,_fee int )(_aag error ){const _bbba ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0033";var (_ffc ,_cfa int ;_dcbd int ;_afbg byte ;
_dgc ,_baad int ;);if _fda >=1{_afbg ,_aag =_eege .Bitmap .GetByte (_fee );if _aag !=nil {return _dg .Wrap (_aag ,_bbba ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_dcbd =int (_afbg );};_ffc =(_dcbd >>1)&0x70;for _fffeg :=0;_fffeg < _fgg ;_fffeg =_dgc {var (_cded byte ;
_gdde int ;);_dgc =_fffeg +8;if _dbdg :=_efde -_fffeg ;_dbdg > 8{_gdde =8;}else {_gdde =_dbdg ;};if _fda >=1{_dcbd <<=8;if _dgc < _efde {_afbg ,_aag =_eege .Bitmap .GetByte (_fee +1);if _aag !=nil {return _dg .Wrap (_aag ,_bbba ,"\u0069\u006e\u006e\u0065\u0072\u0020\u002d\u0020\u006c\u0069\u006e\u0065 \u003e\u003d\u0020\u0031");
};_dcbd |=int (_afbg );};};for _aabec :=0;_aabec < _gdde ;_aabec ++{if _eege ._cad {_cfa =_eege .overrideAtTemplate3 (_ffc ,_fffeg +_aabec ,_fda ,int (_cded ),_aabec );_eege ._cebb .SetIndex (int32 (_cfa ));}else {_eege ._cebb .SetIndex (int32 (_ffc ));
};_baad ,_aag =_eege ._ace .DecodeBit (_eege ._cebb );if _aag !=nil {return _dg .Wrap (_aag ,_bbba ,"");};_cded |=byte (_baad )<<byte (7-_aabec );_ffc =((_ffc &0x1f7)<<1)|_baad |((_dcbd >>uint (8-_aabec ))&0x010);};if _ead :=_eege .Bitmap .SetByte (_cafd ,_cded );
_ead !=nil {return _dg .Wrap (_ead ,_bbba ,"");};_cafd ++;_fee ++;};return nil ;};func (_faea *HalftoneRegion )shiftAndFill (_cgac int )int {_cgac >>=8;if _cgac < 0{_ffcc :=int (_c .Log (float64 (_egad (_cgac )))/_c .Log (2));_adc :=31-_ffcc ;for _gage :=1;
_gage < _adc ;_gage ++{_cgac |=1<<uint (31-_gage );};};return _cgac ;};func (_fecb *Header )writeSegmentPageAssociation (_cabg _ca .BinaryWriter )(_deee int ,_acfg error ){const _gddb ="w\u0072\u0069\u0074\u0065\u0053\u0065g\u006d\u0065\u006e\u0074\u0050\u0061\u0067\u0065\u0041s\u0073\u006f\u0063i\u0061t\u0069\u006f\u006e";
if _fecb .pageSize ()!=4{if _acfg =_cabg .WriteByte (byte (_fecb .PageAssociation ));_acfg !=nil {return 0,_dg .Wrap (_acfg ,_gddb ,"\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0021\u003d\u0020\u0034");};return 1,nil ;};_aded :=make ([]byte ,4);
_eg .BigEndian .PutUint32 (_aded ,uint32 (_fecb .PageAssociation ));if _deee ,_acfg =_cabg .Write (_aded );_acfg !=nil {return 0,_dg .Wrap (_acfg ,_gddb ,"\u0034 \u0062y\u0074\u0065\u0020\u0070\u0061g\u0065\u0020n\u0075\u006d\u0062\u0065\u0072");};return _deee ,nil ;
};func (_egbd *GenericRefinementRegion )Init (header *Header ,r _ca .StreamReader )error {_egbd ._egb =header ;_egbd ._de =r ;_egbd .RegionInfo =NewRegionSegment (r );return _egbd .parseHeader ();};func (_bfaed *RegionSegment )readCombinationOperator ()error {_add ,_gccc :=_bfaed ._cgga .ReadBits (3);
if _gccc !=nil {return _gccc ;};_bfaed .CombinaionOperator =_cab .CombinationOperator (_add &0xF);return nil ;};func NewHeader (d Documenter ,r _ca .StreamReader ,offset int64 ,organizationType OrganizationType )(*Header ,error ){_ebed :=&Header {Reader :r };
if _cfba :=_ebed .parse (d ,r ,offset ,organizationType );_cfba !=nil {return nil ,_dg .Wrap (_cfba ,"\u004ee\u0077\u0048\u0065\u0061\u0064\u0065r","");};return _ebed ,nil ;};func (_fgda *TextRegion )decodeDT ()(_fadg int64 ,_ceae error ){if _fgda .IsHuffmanEncoded {if _fgda .SbHuffDT ==3{_fadg ,_ceae =_fgda ._ccda .Decode (_fgda ._abfe );
if _ceae !=nil {return 0,_ceae ;};}else {var _gcgbd _ab .Tabler ;_gcgbd ,_ceae =_ab .GetStandardTable (11+int (_fgda .SbHuffDT ));if _ceae !=nil {return 0,_ceae ;};_fadg ,_ceae =_gcgbd .Decode (_fgda ._abfe );if _ceae !=nil {return 0,_ceae ;};};}else {var _ffgg int32 ;
_ffgg ,_ceae =_fgda ._aaf .DecodeInt (_fgda ._bacd );if _ceae !=nil {return ;};_fadg =int64 (_ffgg );};_fadg *=int64 (_fgda .SbStrips );return _fadg ,nil ;};func (_beae *GenericRefinementRegion )decodeTemplate (_cec ,_cbg ,_gbgf ,_fa ,_gad ,_dbf ,_aeb ,_eba ,_gcce ,_afac int ,_cac templater )(_eda error ){var (_gcg ,_deb ,_gadb ,_fgc ,_ceb int16 ;
_gbba ,_debf ,_acbg ,_gga int ;_cgb byte ;);if _gcce >=1&&(_gcce -1)< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac -_fa );if _eda !=nil {return ;};_gbba =int (_cgb );};if _gcce >=0&&(_gcce )< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac );
if _eda !=nil {return ;};_debf =int (_cgb );};if _gcce >=-1&&(_gcce +1)< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac +_fa );if _eda !=nil {return ;};_acbg =int (_cgb );};_afac ++;if _cec >=1{_cgb ,_eda =_beae .RegionBitmap .GetByte (_eba -_gbgf );
if _eda !=nil {return ;};_gga =int (_cgb );};_eba ++;_age :=_beae .ReferenceDX %8;_fad :=6+_age ;_bcd :=_afac %_fa ;if _fad >=0{if _fad < 8{_gcg =int16 (_gbba >>uint (_fad ))&0x07;};if _fad < 8{_deb =int16 (_debf >>uint (_fad ))&0x07;};if _fad < 8{_gadb =int16 (_acbg >>uint (_fad ))&0x07;
};if _fad ==6&&_bcd > 1{if _gcce >=1&&(_gcce -1)< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac -_fa -2);if _eda !=nil {return _eda ;};_gcg |=int16 (_cgb <<2)&0x04;};if _gcce >=0&&_gcce < _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac -2);
if _eda !=nil {return _eda ;};_deb |=int16 (_cgb <<2)&0x04;};if _gcce >=-1&&_gcce +1< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac +_fa -2);if _eda !=nil {return _eda ;};_gadb |=int16 (_cgb <<2)&0x04;};};if _fad ==0{_gbba =0;
_debf =0;_acbg =0;if _bcd < _fa -1{if _gcce >=1&&_gcce -1< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac -_fa );if _eda !=nil {return _eda ;};_gbba =int (_cgb );};if _gcce >=0&&_gcce < _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac );
if _eda !=nil {return _eda ;};_debf =int (_cgb );};if _gcce >=-1&&_gcce +1< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac +_fa );if _eda !=nil {return _eda ;};_acbg =int (_cgb );};};_afac ++;};}else {_gcg =int16 (_gbba <<1)&0x07;
_deb =int16 (_debf <<1)&0x07;_gadb =int16 (_acbg <<1)&0x07;_gbba =0;_debf =0;_acbg =0;if _bcd < _fa -1{if _gcce >=1&&_gcce -1< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac -_fa );if _eda !=nil {return _eda ;};_gbba =int (_cgb );
};if _gcce >=0&&_gcce < _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac );if _eda !=nil {return _eda ;};_debf =int (_cgb );};if _gcce >=-1&&_gcce +1< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac +_fa );
if _eda !=nil {return _eda ;};_acbg =int (_cgb );};_afac ++;};_gcg |=int16 ((_gbba >>7)&0x07);_deb |=int16 ((_debf >>7)&0x07);_gadb |=int16 ((_acbg >>7)&0x07);};_fgc =int16 (_gga >>6);_ceb =0;_affg :=(2-_age )%8;_gbba <<=uint (_affg );_debf <<=uint (_affg );
_acbg <<=uint (_affg );_gga <<=2;var _fba int ;for _cff :=0;_cff < _cbg ;_cff ++{_bee :=_cff &0x07;_aeac :=_cac .form (_gcg ,_deb ,_gadb ,_fgc ,_ceb );if _beae ._gd {_cgb ,_eda =_beae .RegionBitmap .GetByte (_beae .RegionBitmap .GetByteIndex (_cff ,_cec ));
if _eda !=nil {return _eda ;};_beae ._g .SetIndex (int32 (_beae .overrideAtTemplate0 (int (_aeac ),_cff ,_cec ,int (_cgb ),_bee )));}else {_beae ._g .SetIndex (int32 (_aeac ));};_fba ,_eda =_beae ._ac .DecodeBit (_beae ._g );if _eda !=nil {return _eda ;
};if _eda =_beae .RegionBitmap .SetPixel (_cff ,_cec ,byte (_fba ));_eda !=nil {return _eda ;};_gcg =((_gcg <<1)|0x01&int16 (_gbba >>7))&0x07;_deb =((_deb <<1)|0x01&int16 (_debf >>7))&0x07;_gadb =((_gadb <<1)|0x01&int16 (_acbg >>7))&0x07;_fgc =((_fgc <<1)|0x01&int16 (_gga >>7))&0x07;
_ceb =int16 (_fba );if (_cff -int (_beae .ReferenceDX ))%8==5{_gbba =0;_debf =0;_acbg =0;if ((_cff -int (_beae .ReferenceDX ))/8)+1< _beae .ReferenceBitmap .RowStride {if _gcce >=1&&(_gcce -1)< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac -_fa );
if _eda !=nil {return _eda ;};_gbba =int (_cgb );};if _gcce >=0&&_gcce < _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac );if _eda !=nil {return _eda ;};_debf =int (_cgb );};if _gcce >=-1&&(_gcce +1)< _beae .ReferenceBitmap .Height {_cgb ,_eda =_beae .ReferenceBitmap .GetByte (_afac +_fa );
if _eda !=nil {return _eda ;};_acbg =int (_cgb );};};_afac ++;}else {_gbba <<=1;_debf <<=1;_acbg <<=1;};if _bee ==5&&_cec >=1{if ((_cff >>3)+1)>=_beae .RegionBitmap .RowStride {_gga =0;}else {_cgb ,_eda =_beae .RegionBitmap .GetByte (_eba -_gbgf );if _eda !=nil {return _eda ;
};_gga =int (_cgb );};_eba ++;}else {_gga <<=1;};};return nil ;};type Documenter interface{GetPage (int )(Pager ,error );GetGlobalSegment (int )(*Header ,error );};func (_cggcc *SymbolDictionary )readRegionFlags ()error {var (_cbec uint64 ;_cegd int ;);
_ ,_gbgb :=_cggcc ._defe .ReadBits (3);if _gbgb !=nil {return _gbgb ;};_cegd ,_gbgb =_cggcc ._defe .ReadBit ();if _gbgb !=nil {return _gbgb ;};_cggcc .SdrTemplate =int8 (_cegd );_cbec ,_gbgb =_cggcc ._defe .ReadBits (2);if _gbgb !=nil {return _gbgb ;};
_cggcc .SdTemplate =int8 (_cbec &0xf);_cegd ,_gbgb =_cggcc ._defe .ReadBit ();if _gbgb !=nil {return _gbgb ;};if _cegd ==1{_cggcc ._deeeg =true ;};_cegd ,_gbgb =_cggcc ._defe .ReadBit ();if _gbgb !=nil {return _gbgb ;};if _cegd ==1{_cggcc ._gacbf =true ;
};_cegd ,_gbgb =_cggcc ._defe .ReadBit ();if _gbgb !=nil {return _gbgb ;};if _cegd ==1{_cggcc .SdHuffAggInstanceSelection =true ;};_cegd ,_gbgb =_cggcc ._defe .ReadBit ();if _gbgb !=nil {return _gbgb ;};_cggcc .SdHuffBMSizeSelection =int8 (_cegd );_cbec ,_gbgb =_cggcc ._defe .ReadBits (2);
if _gbgb !=nil {return _gbgb ;};_cggcc .SdHuffDecodeWidthSelection =int8 (_cbec &0xf);_cbec ,_gbgb =_cggcc ._defe .ReadBits (2);if _gbgb !=nil {return _gbgb ;};_cggcc .SdHuffDecodeHeightSelection =int8 (_cbec &0xf);_cegd ,_gbgb =_cggcc ._defe .ReadBit ();
if _gbgb !=nil {return _gbgb ;};if _cegd ==1{_cggcc .UseRefinementAggregation =true ;};_cegd ,_gbgb =_cggcc ._defe .ReadBit ();if _gbgb !=nil {return _gbgb ;};if _cegd ==1{_cggcc .IsHuffmanEncoded =true ;};return nil ;};func (_eafg *GenericRefinementRegion )decodeTypicalPredictedLine (_bfg ,_bega ,_ec ,_bde ,_ccf ,_edb int )error {_fg :=_bfg -int (_eafg .ReferenceDY );
_dbd :=_eafg .ReferenceBitmap .GetByteIndex (0,_fg );_gbg :=_eafg .RegionBitmap .GetByteIndex (0,_bfg );var _ae error ;switch _eafg .TemplateID {case 0:_ae =_eafg .decodeTypicalPredictedLineTemplate0 (_bfg ,_bega ,_ec ,_bde ,_ccf ,_edb ,_gbg ,_fg ,_dbd );
case 1:_ae =_eafg .decodeTypicalPredictedLineTemplate1 (_bfg ,_bega ,_ec ,_bde ,_ccf ,_edb ,_gbg ,_fg ,_dbd );};return _ae ;};func (_bdc *GenericRegion )overrideAtTemplate3 (_gccg ,_cfbfc ,_gabe ,_ggae ,_cee int )int {_gccg &=0x3EF;if _bdc .GBAtY [0]==0&&_bdc .GBAtX [0]>=-int8 (_cee ){_gccg |=(_ggae >>uint (7-(int8 (_cee )+_bdc .GBAtX [0]))&0x1)<<4;
}else {_gccg |=int (_bdc .getPixel (_cfbfc +int (_bdc .GBAtX [0]),_gabe +int (_bdc .GBAtY [0])))<<4;};return _gccg ;};type RegionSegment struct{_cgga _ca .StreamReader ;BitmapWidth uint32 ;BitmapHeight uint32 ;XLocation uint32 ;YLocation uint32 ;CombinaionOperator _cab .CombinationOperator ;
};func (_agee *GenericRefinementRegion )readAtPixels ()error {_agee .GrAtX =make ([]int8 ,2);_agee .GrAtY =make ([]int8 ,2);_fgca ,_fab :=_agee ._de .ReadByte ();if _fab !=nil {return _fab ;};_agee .GrAtX [0]=int8 (_fgca );_fgca ,_fab =_agee ._de .ReadByte ();
if _fab !=nil {return _fab ;};_agee .GrAtY [0]=int8 (_fgca );_fgca ,_fab =_agee ._de .ReadByte ();if _fab !=nil {return _fab ;};_agee .GrAtX [1]=int8 (_fgca );_fgca ,_fab =_agee ._de .ReadByte ();if _fab !=nil {return _fab ;};_agee .GrAtY [1]=int8 (_fgca );
return nil ;};func (_ccb *GenericRegion )setParametersWithAt (_bce bool ,_fcaf byte ,_aef ,_cge bool ,_gdf ,_dgdc []int8 ,_gcd ,_deg uint32 ,_aggb *_a .DecoderStats ,_edc *_a .Decoder ){_ccb .IsMMREncoded =_bce ;_ccb .GBTemplate =_fcaf ;_ccb .IsTPGDon =_aef ;
_ccb .GBAtX =_gdf ;_ccb .GBAtY =_dgdc ;_ccb .RegionSegment .BitmapHeight =_deg ;_ccb .RegionSegment .BitmapWidth =_gcd ;_ccb ._beec =nil ;_ccb .Bitmap =nil ;if _aggb !=nil {_ccb ._cebb =_aggb ;};if _edc !=nil {_ccb ._ace =_edc ;};_ed .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049O\u004e\u005d\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0053\u0044\u0041t\u003a\u0020\u0025\u0073",_ccb );
};func (_gae *HalftoneRegion )Init (hd *Header ,r _ca .StreamReader )error {_gae ._ggeb =r ;_gae ._feed =hd ;_gae .RegionSegment =NewRegionSegment (r );return _gae .parseHeader ();};func (_cegbc *TextRegion )setContexts (_gdedb *_a .DecoderStats ,_efdf *_a .DecoderStats ,_aeca *_a .DecoderStats ,_ccbaf *_a .DecoderStats ,_ffgc *_a .DecoderStats ,_dfca *_a .DecoderStats ,_ffff *_a .DecoderStats ,_cbgc *_a .DecoderStats ,_adgbf *_a .DecoderStats ,_bece *_a .DecoderStats ){_cegbc ._bacd =_efdf ;
_cegbc ._adad =_aeca ;_cegbc ._ecaba =_ccbaf ;_cegbc ._dbcf =_ffgc ;_cegbc ._ccgad =_ffff ;_cegbc ._gafbb =_cbgc ;_cegbc ._agffe =_dfca ;_cegbc ._gdcb =_adgbf ;_cegbc ._cbgg =_bece ;_cegbc ._ebgb =_gdedb ;};func (_adga *SymbolDictionary )huffDecodeBmSize ()(int64 ,error ){if _adga ._feec ==nil {var (_bcdg int ;
_edbf error ;);if _adga .SdHuffDecodeHeightSelection ==3{_bcdg ++;};if _adga .SdHuffDecodeWidthSelection ==3{_bcdg ++;};_adga ._feec ,_edbf =_adga .getUserTable (_bcdg );if _edbf !=nil {return 0,_edbf ;};};return _adga ._feec .Decode (_adga ._defe );};
func (_dfff *Header )writeFlags (_ddg _ca .BinaryWriter )(_ggag error ){const _aacc ="\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065F\u006c\u0061\u0067\u0073";_cefc :=byte (_dfff .Type );if _ggag =_ddg .WriteByte (_cefc );_ggag !=nil {return _dg .Wrap (_ggag ,_aacc ,"\u0077\u0072\u0069ti\u006e\u0067\u0020\u0073\u0065\u0067\u006d\u0065\u006et\u0020t\u0079p\u0065 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};if !_dfff .RetainFlag &&!_dfff .PageAssociationFieldSize {return nil ;};if _ggag =_ddg .SkipBits (-8);_ggag !=nil {return _dg .Wrap (_ggag ,_aacc ,"\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0061\u0063\u006b\u0020\u0074\u0068\u0065\u0020\u0062\u0069\u0074\u0073\u0020\u0066\u0061il\u0065\u0064");
};var _gbfb int ;if _dfff .RetainFlag {_gbfb =1;};if _ggag =_ddg .WriteBit (_gbfb );_ggag !=nil {return _dg .Wrap (_ggag ,_aacc ,"\u0072\u0065\u0074\u0061in\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067\u0073");};_gbfb =0;if _dfff .PageAssociationFieldSize {_gbfb =1;
};if _ggag =_ddg .WriteBit (_gbfb );_ggag !=nil {return _dg .Wrap (_ggag ,_aacc ,"p\u0061\u0067\u0065\u0020as\u0073o\u0063\u0069\u0061\u0074\u0069o\u006e\u0020\u0066\u006c\u0061\u0067");};_ddg .FinishByte ();return nil ;};func (_gcbb *PatternDictionary )Init (h *Header ,r _ca .StreamReader )error {_gcbb ._fdbfa =r ;
return _gcbb .parseHeader ();};func (_cggb *SymbolDictionary )getSymbol (_gddfa int )(*_cab .Bitmap ,error ){const _abfd ="\u0067e\u0074\u0053\u0079\u006d\u0062\u006fl";_cbca ,_accd :=_cggb ._gdac .GetBitmap (_cggb ._dbcc [_gddfa ]);if _accd !=nil {return nil ,_dg .Wrap (_accd ,_abfd ,"\u0063\u0061n\u0027\u0074\u0020g\u0065\u0074\u0020\u0073\u0079\u006d\u0062\u006f\u006c");
};return _cbca ,nil ;};func (_ccg *GenericRegion )decodeTemplate2 (_ggb ,_geg ,_egab int ,_dfbab ,_acgcb int )(_dee error ){const _cedg ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0032";var (_gba ,_aaa int ;_afb ,_bfbga int ;
_fedf byte ;_dgb ,_dce int ;);if _ggb >=1{_fedf ,_dee =_ccg .Bitmap .GetByte (_acgcb );if _dee !=nil {return _dg .Wrap (_dee ,_cedg ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0031");};_afb =int (_fedf );};if _ggb >=2{_fedf ,_dee =_ccg .Bitmap .GetByte (_acgcb -_ccg .Bitmap .RowStride );
if _dee !=nil {return _dg .Wrap (_dee ,_cedg ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0032");};_bfbga =int (_fedf )<<4;};_gba =(_afb >>3&0x7c)|(_bfbga >>3&0x380);for _cgcb :=0;_cgcb < _egab ;_cgcb =_dgb {var (_agbf byte ;
_fbad int ;);_dgb =_cgcb +8;if _dcee :=_geg -_cgcb ;_dcee > 8{_fbad =8;}else {_fbad =_dcee ;};if _ggb > 0{_afb <<=8;if _dgb < _geg {_fedf ,_dee =_ccg .Bitmap .GetByte (_acgcb +1);if _dee !=nil {return _dg .Wrap (_dee ,_cedg ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0030");
};_afb |=int (_fedf );};};if _ggb > 1{_bfbga <<=8;if _dgb < _geg {_fedf ,_dee =_ccg .Bitmap .GetByte (_acgcb -_ccg .Bitmap .RowStride +1);if _dee !=nil {return _dg .Wrap (_dee ,_cedg ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0031");
};_bfbga |=int (_fedf )<<4;};};for _gbgd :=0;_gbgd < _fbad ;_gbgd ++{_dcb :=uint (10-_gbgd );if _ccg ._cad {_aaa =_ccg .overrideAtTemplate2 (_gba ,_cgcb +_gbgd ,_ggb ,int (_agbf ),_gbgd );_ccg ._cebb .SetIndex (int32 (_aaa ));}else {_ccg ._cebb .SetIndex (int32 (_gba ));
};_dce ,_dee =_ccg ._ace .DecodeBit (_ccg ._cebb );if _dee !=nil {return _dg .Wrap (_dee ,_cedg ,"");};_agbf |=byte (_dce <<uint (7-_gbgd ));_gba =((_gba &0x1bd)<<1)|_dce |((_afb >>_dcb )&0x4)|((_bfbga >>_dcb )&0x80);};if _bdba :=_ccg .Bitmap .SetByte (_dfbab ,_agbf );
_bdba !=nil {return _dg .Wrap (_bdba ,_cedg ,"");};_dfbab ++;_acgcb ++;};return nil ;};func (_dbacc *TableSegment )HtLow ()int32 {return _dbacc ._abcf };type Regioner interface{GetRegionBitmap ()(*_cab .Bitmap ,error );GetRegionInfo ()*RegionSegment ;};
func (_bff *TableSegment )parseHeader ()error {var (_dage int ;_bcfd uint64 ;_cefb error ;);_dage ,_cefb =_bff ._bgca .ReadBit ();if _cefb !=nil {return _cefb ;};if _dage ==1{return _bg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0061\u0062\u006c\u0065 \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0064e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u002e\u0020\u0042\u002e\u0032\u002e1\u0020\u0043\u006f\u0064\u0065\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0066\u006c\u0061\u0067\u0073\u003a\u0020\u0042\u0069\u0074\u0020\u0037\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u007a\u0065\u0072\u006f\u002e\u0020\u0057a\u0073\u003a \u0025\u0064",_dage );
};if _bcfd ,_cefb =_bff ._bgca .ReadBits (3);_cefb !=nil {return _cefb ;};_bff ._efbf =(int32 (_bcfd )+1)&0xf;if _bcfd ,_cefb =_bff ._bgca .ReadBits (3);_cefb !=nil {return _cefb ;};_bff ._bggf =(int32 (_bcfd )+1)&0xf;if _bcfd ,_cefb =_bff ._bgca .ReadBits (32);
_cefb !=nil {return _cefb ;};_bff ._abcf =int32 (_bcfd &_c .MaxInt32 );if _bcfd ,_cefb =_bff ._bgca .ReadBits (32);_cefb !=nil {return _cefb ;};_bff ._eaea =int32 (_bcfd &_c .MaxInt32 );return nil ;};func (_caae *SymbolDictionary )getSbSymCodeLen ()int8 {_egeb :=int8 (_c .Ceil (_c .Log (float64 (_caae ._cgeg +_caae .NumberOfNewSymbols ))/_c .Log (2)));
if _caae .IsHuffmanEncoded &&_egeb < 1{return 1;};return _egeb ;};func (_fdbcd *SymbolDictionary )setCodingStatistics ()error {if _fdbcd ._gefg ==nil {_fdbcd ._gefg =_a .NewStats (512,1);};if _fdbcd ._acfd ==nil {_fdbcd ._acfd =_a .NewStats (512,1);};if _fdbcd ._gegb ==nil {_fdbcd ._gegb =_a .NewStats (512,1);
};if _fdbcd ._ggdaf ==nil {_fdbcd ._ggdaf =_a .NewStats (512,1);};if _fdbcd ._afdg ==nil {_fdbcd ._afdg =_a .NewStats (512,1);};if _fdbcd .UseRefinementAggregation &&_fdbcd ._eafd ==nil {_fdbcd ._eafd =_a .NewStats (1<<uint (_fdbcd ._cccf ),1);_fdbcd ._acgb =_a .NewStats (512,1);
_fdbcd ._cbde =_a .NewStats (512,1);};if _fdbcd ._abbe ==nil {_fdbcd ._abbe =_a .NewStats (65536,1);};if _fdbcd ._ggbg ==nil {var _cgegd error ;_fdbcd ._ggbg ,_cgegd =_a .New (_fdbcd ._defe );if _cgegd !=nil {return _cgegd ;};};return nil ;};func (_fdb *GenericRegion )decodeTemplate0b (_bcb ,_fdge ,_efa int ,_ddbf ,_dgdf int )(_bcff error ){const _dfc ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0062";
var (_gged ,_ded int ;_afd ,_eeg int ;_edad byte ;_dc int ;);if _bcb >=1{_edad ,_bcff =_fdb .Bitmap .GetByte (_dgdf );if _bcff !=nil {return _dg .Wrap (_bcff ,_dfc ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_afd =int (_edad );};if _bcb >=2{_edad ,_bcff =_fdb .Bitmap .GetByte (_dgdf -_fdb .Bitmap .RowStride );
if _bcff !=nil {return _dg .Wrap (_bcff ,_dfc ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_eeg =int (_edad )<<6;};_gged =(_afd &0xf0)|(_eeg &0x3800);for _cafe :=0;_cafe < _efa ;_cafe =_dc {var (_bef byte ;_ceag int ;);_dc =_cafe +8;if _fca :=_fdge -_cafe ;
_fca > 8{_ceag =8;}else {_ceag =_fca ;};if _bcb > 0{_afd <<=8;if _dc < _fdge {_edad ,_bcff =_fdb .Bitmap .GetByte (_dgdf +1);if _bcff !=nil {return _dg .Wrap (_bcff ,_dfc ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_afd |=int (_edad );};};if _bcb > 1{_eeg <<=8;
if _dc < _fdge {_edad ,_bcff =_fdb .Bitmap .GetByte (_dgdf -_fdb .Bitmap .RowStride +1);if _bcff !=nil {return _dg .Wrap (_bcff ,_dfc ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_eeg |=int (_edad )<<6;};};for _agg :=0;_agg < _ceag ;_agg ++{_daa :=uint (7-_agg );
if _fdb ._cad {_ded =_fdb .overrideAtTemplate0b (_gged ,_cafe +_agg ,_bcb ,int (_bef ),_agg ,int (_daa ));_fdb ._cebb .SetIndex (int32 (_ded ));}else {_fdb ._cebb .SetIndex (int32 (_gged ));};var _efc int ;_efc ,_bcff =_fdb ._ace .DecodeBit (_fdb ._cebb );
if _bcff !=nil {return _dg .Wrap (_bcff ,_dfc ,"");};_bef |=byte (_efc <<_daa );_gged =((_gged &0x7bf7)<<1)|_efc |((_afd >>_daa )&0x10)|((_eeg >>_daa )&0x800);};if _ggab :=_fdb .Bitmap .SetByte (_ddbf ,_bef );_ggab !=nil {return _dg .Wrap (_ggab ,_dfc ,"");
};_ddbf ++;_dgdf ++;};return nil ;};func (_ggba *HalftoneRegion )parseHeader ()error {if _faaf :=_ggba .RegionSegment .parseHeader ();_faaf !=nil {return _faaf ;};_dedge ,_gfgg :=_ggba ._ggeb .ReadBit ();if _gfgg !=nil {return _gfgg ;};_ggba .HDefaultPixel =int8 (_dedge );
_edbdb ,_gfgg :=_ggba ._ggeb .ReadBits (3);if _gfgg !=nil {return _gfgg ;};_ggba .CombinationOperator =_cab .CombinationOperator (_edbdb &0xf);_dedge ,_gfgg =_ggba ._ggeb .ReadBit ();if _gfgg !=nil {return _gfgg ;};if _dedge ==1{_ggba .HSkipEnabled =true ;
};_edbdb ,_gfgg =_ggba ._ggeb .ReadBits (2);if _gfgg !=nil {return _gfgg ;};_ggba .HTemplate =byte (_edbdb &0xf);_dedge ,_gfgg =_ggba ._ggeb .ReadBit ();if _gfgg !=nil {return _gfgg ;};if _dedge ==1{_ggba .IsMMREncoded =true ;};_edbdb ,_gfgg =_ggba ._ggeb .ReadBits (32);
if _gfgg !=nil {return _gfgg ;};_ggba .HGridWidth =uint32 (_edbdb &_c .MaxUint32 );_edbdb ,_gfgg =_ggba ._ggeb .ReadBits (32);if _gfgg !=nil {return _gfgg ;};_ggba .HGridHeight =uint32 (_edbdb &_c .MaxUint32 );_edbdb ,_gfgg =_ggba ._ggeb .ReadBits (32);
if _gfgg !=nil {return _gfgg ;};_ggba .HGridX =int32 (_edbdb &_c .MaxInt32 );_edbdb ,_gfgg =_ggba ._ggeb .ReadBits (32);if _gfgg !=nil {return _gfgg ;};_ggba .HGridY =int32 (_edbdb &_c .MaxInt32 );_edbdb ,_gfgg =_ggba ._ggeb .ReadBits (16);if _gfgg !=nil {return _gfgg ;
};_ggba .HRegionX =uint16 (_edbdb &_c .MaxUint16 );_edbdb ,_gfgg =_ggba ._ggeb .ReadBits (16);if _gfgg !=nil {return _gfgg ;};_ggba .HRegionY =uint16 (_edbdb &_c .MaxUint16 );if _gfgg =_ggba .computeSegmentDataStructure ();_gfgg !=nil {return _gfgg ;};
return _ggba .checkInput ();};func (_fdfd *GenericRegion )overrideAtTemplate1 (_aagf ,_bgf ,_bfc ,_cfbf ,_fdbc int )int {_aagf &=0x1FF7;if _fdfd .GBAtY [0]==0&&_fdfd .GBAtX [0]>=-int8 (_fdbc ){_aagf |=(_cfbf >>uint (7-(int8 (_fdbc )+_fdfd .GBAtX [0]))&0x1)<<3;
}else {_aagf |=int (_fdfd .getPixel (_bgf +int (_fdfd .GBAtX [0]),_bfc +int (_fdfd .GBAtY [0])))<<3;};return _aagf ;};func (_baac *TextRegion )decodeRdy ()(int64 ,error ){const _bdeb ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064y";if _baac .IsHuffmanEncoded {if _baac .SbHuffRDY ==3{if _baac ._aae ==nil {var (_dfbfc int ;
_dbae error ;);if _baac .SbHuffFS ==3{_dfbfc ++;};if _baac .SbHuffDS ==3{_dfbfc ++;};if _baac .SbHuffDT ==3{_dfbfc ++;};if _baac .SbHuffRDWidth ==3{_dfbfc ++;};if _baac .SbHuffRDHeight ==3{_dfbfc ++;};if _baac .SbHuffRDX ==3{_dfbfc ++;};_baac ._aae ,_dbae =_baac .getUserTable (_dfbfc );
if _dbae !=nil {return 0,_dg .Wrap (_dbae ,_bdeb ,"");};};return _baac ._aae .Decode (_baac ._abfe );};_begbc ,_ecfa :=_ab .GetStandardTable (14+int (_baac .SbHuffRDY ));if _ecfa !=nil {return 0,_ecfa ;};return _begbc .Decode (_baac ._abfe );};_gbfed ,_cebc :=_baac ._aaf .DecodeInt (_baac ._cbgg );
if _cebc !=nil {return 0,_dg .Wrap (_cebc ,_bdeb ,"");};return int64 (_gbfed ),nil ;};func (_bgfg *PageInformationSegment )readMaxStripeSize ()error {_fdgd ,_dfd :=_bgfg ._gcgb .ReadBits (15);if _dfd !=nil {return _dfd ;};_bgfg .MaxStripeSize =uint16 (_fdgd &_c .MaxUint16 );
return nil ;};func (_gfa *GenericRegion )decodeSLTP ()(int ,error ){switch _gfa .GBTemplate {case 0:_gfa ._cebb .SetIndex (0x9B25);case 1:_gfa ._cebb .SetIndex (0x795);case 2:_gfa ._cebb .SetIndex (0xE5);case 3:_gfa ._cebb .SetIndex (0x195);};return _gfa ._ace .DecodeBit (_gfa ._cebb );
};func (_cgfg *PatternDictionary )parseHeader ()error {_ed .Log .Trace ("\u005b\u0050\u0041\u0054\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054I\u004f\u004e\u0041\u0052\u0059\u005d[\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d\u0020b\u0065\u0067\u0069\u006e");
defer func (){_ed .Log .Trace ("\u005b\u0050\u0041T\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u005b\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_ ,_ggdf :=_cgfg ._fdbfa .ReadBits (5);if _ggdf !=nil {return _ggdf ;};if _ggdf =_cgfg .readTemplate ();_ggdf !=nil {return _ggdf ;};if _ggdf =_cgfg .readIsMMREncoded ();_ggdf !=nil {return _ggdf ;};if _ggdf =_cgfg .readPatternWidthAndHeight ();_ggdf !=nil {return _ggdf ;
};if _ggdf =_cgfg .readGrayMax ();_ggdf !=nil {return _ggdf ;};if _ggdf =_cgfg .computeSegmentDataStructure ();_ggdf !=nil {return _ggdf ;};return _cgfg .checkInput ();};func (_cdb *Header )readSegmentNumber (_bebg _ca .StreamReader )error {const _fag ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";
_fbf :=make ([]byte ,4);_ ,_gfdbg :=_bebg .Read (_fbf );if _gfdbg !=nil {return _dg .Wrap (_gfdbg ,_fag ,"");};_cdb .SegmentNumber =_eg .BigEndian .Uint32 (_fbf );return nil ;};func (_dbda *PatternDictionary )readGrayMax ()error {_adgg ,_ggdb :=_dbda ._fdbfa .ReadBits (32);
if _ggdb !=nil {return _ggdb ;};_dbda .GrayMax =uint32 (_adgg &_c .MaxUint32 );return nil ;};func (_cbba *SymbolDictionary )readAtPixels (_ecacc int )error {_cbba .SdATX =make ([]int8 ,_ecacc );_cbba .SdATY =make ([]int8 ,_ecacc );var (_bacb byte ;_effbd error ;
);for _bfge :=0;_bfge < _ecacc ;_bfge ++{_bacb ,_effbd =_cbba ._defe .ReadByte ();if _effbd !=nil {return _effbd ;};_cbba .SdATX [_bfge ]=int8 (_bacb );_bacb ,_effbd =_cbba ._defe .ReadByte ();if _effbd !=nil {return _effbd ;};_cbba .SdATY [_bfge ]=int8 (_bacb );
};return nil ;};func (_gfee *PageInformationSegment )readResolution ()error {_edbce ,_eab :=_gfee ._gcgb .ReadBits (32);if _eab !=nil {return _eab ;};_gfee .ResolutionX =int (_edbce &_c .MaxInt32 );_edbce ,_eab =_gfee ._gcgb .ReadBits (32);if _eab !=nil {return _eab ;
};_gfee .ResolutionY =int (_edbce &_c .MaxInt32 );return nil ;};func (_eabe *TextRegion )decodeIds ()(int64 ,error ){const _dgee ="\u0064e\u0063\u006f\u0064\u0065\u0049\u0064s";if _eabe .IsHuffmanEncoded {if _eabe .SbHuffDS ==3{if _eabe ._fcfc ==nil {_eaab :=0;
if _eabe .SbHuffFS ==3{_eaab ++;};var _eagf error ;_eabe ._fcfc ,_eagf =_eabe .getUserTable (_eaab );if _eagf !=nil {return 0,_dg .Wrap (_eagf ,_dgee ,"");};};return _eabe ._fcfc .Decode (_eabe ._abfe );};_afeff ,_fccac :=_ab .GetStandardTable (8+int (_eabe .SbHuffDS ));
if _fccac !=nil {return 0,_dg .Wrap (_fccac ,_dgee ,"");};return _afeff .Decode (_eabe ._abfe );};_dcdda ,_cbce :=_eabe ._aaf .DecodeInt (_eabe ._ecaba );if _cbce !=nil {return 0,_dg .Wrap (_cbce ,_dgee ,"\u0063\u0078\u0049\u0041\u0044\u0053");};return int64 (_dcdda ),nil ;
};func (_dbb *GenericRefinementRegion )GetRegionBitmap ()(*_cab .Bitmap ,error ){var _bdg error ;_ed .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _bdg !=nil {_ed .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0047\u0065\u0074R\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006dap\u0020\u0066a\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_bdg );
}else {_ed .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _dbb .RegionBitmap !=nil {return _dbb .RegionBitmap ,nil ;};_gg :=0;if _dbb .ReferenceBitmap ==nil {_dbb .ReferenceBitmap ,_bdg =_dbb .getGrReference ();if _bdg !=nil {return nil ,_bdg ;};};if _dbb ._ac ==nil {_dbb ._ac ,_bdg =_a .New (_dbb ._de );
if _bdg !=nil {return nil ,_bdg ;};};if _dbb ._g ==nil {_dbb ._g =_a .NewStats (8192,1);};_dbb .RegionBitmap =_cab .New (int (_dbb .RegionInfo .BitmapWidth ),int (_dbb .RegionInfo .BitmapHeight ));if _dbb .TemplateID ==0{if _bdg =_dbb .updateOverride ();
_bdg !=nil {return nil ,_bdg ;};};_ef :=(_dbb .RegionBitmap .Width +7)&-8;var _eb int ;if _dbb .IsTPGROn {_eb =int (-_dbb .ReferenceDY )*_dbb .ReferenceBitmap .RowStride ;};_bc :=_eb +1;for _gb :=0;_gb < _dbb .RegionBitmap .Height ;_gb ++{if _dbb .IsTPGROn {_ggd ,_ga :=_dbb .decodeSLTP ();
if _ga !=nil {return nil ,_ga ;};_gg ^=_ggd ;};if _gg ==0{_bdg =_dbb .decodeOptimized (_gb ,_dbb .RegionBitmap .Width ,_dbb .RegionBitmap .RowStride ,_dbb .ReferenceBitmap .RowStride ,_ef ,_eb ,_bc );if _bdg !=nil {return nil ,_bdg ;};}else {_bdg =_dbb .decodeTypicalPredictedLine (_gb ,_dbb .RegionBitmap .Width ,_dbb .RegionBitmap .RowStride ,_dbb .ReferenceBitmap .RowStride ,_ef ,_eb );
if _bdg !=nil {return nil ,_bdg ;};};};return _dbb .RegionBitmap ,nil ;};func (_efdc *GenericRegion )GetRegionInfo ()*RegionSegment {return _efdc .RegionSegment };func (_agff *SymbolDictionary )decodeNewSymbols (_fceb ,_gaca uint32 ,_geb *_cab .Bitmap ,_ffdfa ,_ccbd int32 )error {if _agff ._bgef ==nil {_agff ._bgef =_fbb (_agff ._defe ,nil );
if _agff ._ggbg ==nil {var _ggge error ;_agff ._ggbg ,_ggge =_a .New (_agff ._defe );if _ggge !=nil {return _ggge ;};};if _agff ._abbe ==nil {_agff ._abbe =_a .NewStats (65536,1);};};_agff ._bgef .setParameters (_agff ._abbe ,_agff ._ggbg ,_agff .SdrTemplate ,_fceb ,_gaca ,_geb ,_ffdfa ,_ccbd ,false ,_agff .SdrATX ,_agff .SdrATY );
return _agff .addSymbol (_agff ._bgef );};func (_bgfd *TextRegion )setParameters (_bgbd *_a .Decoder ,_cafg ,_edbcbb bool ,_abcd ,_dacd uint32 ,_cbbd uint32 ,_ddcg int8 ,_acdcf uint32 ,_dfffd int8 ,_gaad _cab .CombinationOperator ,_dgbg int8 ,_gfed int16 ,_bgga ,_gbcd ,_gbeb ,_egfc ,_eaedc ,_cfce ,_ecacg ,_eadff ,_fdabd ,_deac int8 ,_fccae ,_baadd []int8 ,_aeba []*_cab .Bitmap ,_ecaf int8 ){_bgfd ._aaf =_bgbd ;
_bgfd .IsHuffmanEncoded =_cafg ;_bgfd .UseRefinement =_edbcbb ;_bgfd .RegionInfo .BitmapWidth =_abcd ;_bgfd .RegionInfo .BitmapHeight =_dacd ;_bgfd .NumberOfSymbolInstances =_cbbd ;_bgfd .SbStrips =_ddcg ;_bgfd .NumberOfSymbols =_acdcf ;_bgfd .DefaultPixel =_dfffd ;
_bgfd .CombinationOperator =_gaad ;_bgfd .IsTransposed =_dgbg ;_bgfd .ReferenceCorner =_gfed ;_bgfd .SbDsOffset =_bgga ;_bgfd .SbHuffFS =_gbcd ;_bgfd .SbHuffDS =_gbeb ;_bgfd .SbHuffDT =_egfc ;_bgfd .SbHuffRDWidth =_eaedc ;_bgfd .SbHuffRDHeight =_cfce ;
_bgfd .SbHuffRSize =_fdabd ;_bgfd .SbHuffRDX =_ecacg ;_bgfd .SbHuffRDY =_eadff ;_bgfd .SbrTemplate =_deac ;_bgfd .SbrATX =_fccae ;_bgfd .SbrATY =_baadd ;_bgfd .Symbols =_aeba ;_bgfd ._cdfff =_ecaf ;};const (ORandom OrganizationType =iota ;OSequential ;
);func (_fddd *SymbolDictionary )decodeDifferenceWidth ()(int64 ,error ){if _fddd .IsHuffmanEncoded {switch _fddd .SdHuffDecodeWidthSelection {case 0:_dgedg ,_gfef :=_ab .GetStandardTable (2);if _gfef !=nil {return 0,_gfef ;};return _dgedg .Decode (_fddd ._defe );
case 1:_bdca ,_daag :=_ab .GetStandardTable (3);if _daag !=nil {return 0,_daag ;};return _bdca .Decode (_fddd ._defe );case 3:if _fddd ._bgbf ==nil {var _caee int ;if _fddd .SdHuffDecodeHeightSelection ==3{_caee ++;};_dedgef ,_egf :=_fddd .getUserTable (_caee );
if _egf !=nil {return 0,_egf ;};_fddd ._bgbf =_dedgef ;};return _fddd ._bgbf .Decode (_fddd ._defe );};}else {_fdgc ,_efad :=_fddd ._ggbg .DecodeInt (_fddd ._gegb );if _efad !=nil {return 0,_efad ;};return int64 (_fdgc ),nil ;};return 0,nil ;};func (_bagfg *GenericRegion )GetRegionBitmap ()(_ebf *_cab .Bitmap ,_fgd error ){if _bagfg .Bitmap !=nil {return _bagfg .Bitmap ,nil ;
};if _bagfg .IsMMREncoded {if _bagfg ._beec ==nil {_bagfg ._beec ,_fgd =_f .New (_bagfg ._cfb ,int (_bagfg .RegionSegment .BitmapWidth ),int (_bagfg .RegionSegment .BitmapHeight ),_bagfg .DataOffset ,_bagfg .DataLength );if _fgd !=nil {return nil ,_fgd ;
};};_bagfg .Bitmap ,_fgd =_bagfg ._beec .UncompressMMR ();return _bagfg .Bitmap ,_fgd ;};if _fgd =_bagfg .updateOverrideFlags ();_fgd !=nil {return nil ,_fgd ;};var _bdb int ;if _bagfg ._ace ==nil {_bagfg ._ace ,_fgd =_a .New (_bagfg ._cfb );if _fgd !=nil {return nil ,_fgd ;
};};if _bagfg ._cebb ==nil {_bagfg ._cebb =_a .NewStats (65536,1);};_bagfg .Bitmap =_cab .New (int (_bagfg .RegionSegment .BitmapWidth ),int (_bagfg .RegionSegment .BitmapHeight ));_gbf :=int (uint32 (_bagfg .Bitmap .Width +7)&(^uint32 (7)));for _bgd :=0;
_bgd < _bagfg .Bitmap .Height ;_bgd ++{if _bagfg .IsTPGDon {var _cea int ;_cea ,_fgd =_bagfg .decodeSLTP ();if _fgd !=nil {return nil ,_fgd ;};_bdb ^=_cea ;};if _bdb ==1{if _bgd > 0{if _fgd =_bagfg .copyLineAbove (_bgd );_fgd !=nil {return nil ,_fgd ;};
};}else {if _fgd =_bagfg .decodeLine (_bgd ,_bagfg .Bitmap .Width ,_gbf );_fgd !=nil {return nil ,_fgd ;};};};return _bagfg .Bitmap ,nil ;};func (_gcbfe *TableSegment )Init (h *Header ,r _ca .StreamReader )error {_gcbfe ._bgca =r ;return _gcbfe .parseHeader ();
};func (_cbdf *PatternDictionary )setGbAtPixels (){if _cbdf .HDTemplate ==0{_cbdf .GBAtX =make ([]int8 ,4);_cbdf .GBAtY =make ([]int8 ,4);_cbdf .GBAtX [0]=-int8 (_cbdf .HdpWidth );_cbdf .GBAtY [0]=0;_cbdf .GBAtX [1]=-3;_cbdf .GBAtY [1]=-1;_cbdf .GBAtX [2]=2;
_cbdf .GBAtY [2]=-2;_cbdf .GBAtX [3]=-2;_cbdf .GBAtY [3]=-2;}else {_cbdf .GBAtX =[]int8 {-int8 (_cbdf .HdpWidth )};_cbdf .GBAtY =[]int8 {0};};};func (_eedb *SymbolDictionary )setExportedSymbols (_afed []int ){for _caaf :=uint32 (0);_caaf < _eedb ._cgeg +_eedb .NumberOfNewSymbols ;
_caaf ++{if _afed [_caaf ]==1{var _bcc *_cab .Bitmap ;if _caaf < _eedb ._cgeg {_bcc =_eedb ._gbae [_caaf ];}else {_bcc =_eedb ._bfbgg [_caaf -_eedb ._cgeg ];};_ed .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u002d\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u0020\u0041\u0064\u0064 E\u0078\u0070\u006fr\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027%\u0073\u0027",_bcc );
_eedb ._adgfe =append (_eedb ._adgfe ,_bcc );};};};func (_dbdbf *PageInformationSegment )Encode (w _ca .BinaryWriter )(_egee int ,_fcec error ){const _bge ="\u0050\u0061g\u0065\u0049\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u002e\u0045\u006eco\u0064\u0065";
_ggdd :=make ([]byte ,4);_eg .BigEndian .PutUint32 (_ggdd ,uint32 (_dbdbf .PageBMWidth ));_egee ,_fcec =w .Write (_ggdd );if _fcec !=nil {return _egee ,_dg .Wrap (_fcec ,_bge ,"\u0077\u0069\u0064t\u0068");};_eg .BigEndian .PutUint32 (_ggdd ,uint32 (_dbdbf .PageBMHeight ));
var _abgd int ;_abgd ,_fcec =w .Write (_ggdd );if _fcec !=nil {return _abgd +_egee ,_dg .Wrap (_fcec ,_bge ,"\u0068\u0065\u0069\u0067\u0068\u0074");};_egee +=_abgd ;_eg .BigEndian .PutUint32 (_ggdd ,uint32 (_dbdbf .ResolutionX ));_abgd ,_fcec =w .Write (_ggdd );
if _fcec !=nil {return _abgd +_egee ,_dg .Wrap (_fcec ,_bge ,"\u0078\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");};_egee +=_abgd ;_eg .BigEndian .PutUint32 (_ggdd ,uint32 (_dbdbf .ResolutionY ));if _abgd ,_fcec =w .Write (_ggdd );_fcec !=nil {return _abgd +_egee ,_dg .Wrap (_fcec ,_bge ,"\u0079\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");
};_egee +=_abgd ;if _fcec =_dbdbf .encodeFlags (w );_fcec !=nil {return _egee ,_dg .Wrap (_fcec ,_bge ,"");};_egee ++;if _abgd ,_fcec =_dbdbf .encodeStripingInformation (w );_fcec !=nil {return _egee ,_dg .Wrap (_fcec ,_bge ,"");};_egee +=_abgd ;return _egee ,nil ;
};func (_acbga *TextRegion )decodeDfs ()(int64 ,error ){if _acbga .IsHuffmanEncoded {if _acbga .SbHuffFS ==3{if _acbga ._efdgc ==nil {var _gdab error ;_acbga ._efdgc ,_gdab =_acbga .getUserTable (0);if _gdab !=nil {return 0,_gdab ;};};return _acbga ._efdgc .Decode (_acbga ._abfe );
};_afefe ,_fbba :=_ab .GetStandardTable (6+int (_acbga .SbHuffFS ));if _fbba !=nil {return 0,_fbba ;};return _afefe .Decode (_acbga ._abfe );};_cegc ,_aacea :=_acbga ._aaf .DecodeInt (_acbga ._adad );if _aacea !=nil {return 0,_aacea ;};return int64 (_cegc ),nil ;
};func (_ccdc *SymbolDictionary )encodeFlags (_aeae _ca .BinaryWriter )(_ddd int ,_cefe error ){const _gefgd ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _cefe =_aeae .SkipBits (3);_cefe !=nil {return 0,_dg .Wrap (_cefe ,_gefgd ,"\u0065\u006d\u0070\u0074\u0079\u0020\u0062\u0069\u0074\u0073");
};var _fbaf int ;if _ccdc .SdrTemplate > 0{_fbaf =1;};if _cefe =_aeae .WriteBit (_fbaf );_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"s\u0064\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_fbaf =0;if _ccdc .SdTemplate > 1{_fbaf =1;};
if _cefe =_aeae .WriteBit (_fbaf );_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_fbaf =0;if _ccdc .SdTemplate ==1||_ccdc .SdTemplate ==3{_fbaf =1;};if _cefe =_aeae .WriteBit (_fbaf );
_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_fbaf =0;if _ccdc ._deeeg {_fbaf =1;};if _cefe =_aeae .WriteBit (_fbaf );_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"\u0063\u006f\u0064in\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0065\u0064");
};_fbaf =0;if _ccdc ._gacbf {_fbaf =1;};if _cefe =_aeae .WriteBit (_fbaf );_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"\u0063\u006f\u0064\u0069ng\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0075\u0073\u0065\u0064");};_fbaf =0;if _ccdc .SdHuffAggInstanceSelection {_fbaf =1;
};if _cefe =_aeae .WriteBit (_fbaf );_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"\u0073\u0064\u0048\u0075\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074");};_fbaf =int (_ccdc .SdHuffBMSizeSelection );if _cefe =_aeae .WriteBit (_fbaf );_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"\u0073\u0064\u0048u\u0066\u0066\u0042\u006d\u0053\u0069\u007a\u0065");
};_fbaf =0;if _ccdc .SdHuffDecodeWidthSelection > 1{_fbaf =1;};if _cefe =_aeae .WriteBit (_fbaf );_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_fbaf =0;switch _ccdc .SdHuffDecodeWidthSelection {case 1,3:_fbaf =1;
};if _cefe =_aeae .WriteBit (_fbaf );_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_fbaf =0;if _ccdc .SdHuffDecodeHeightSelection > 1{_fbaf =1;};if _cefe =_aeae .WriteBit (_fbaf );
_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_fbaf =0;switch _ccdc .SdHuffDecodeHeightSelection {case 1,3:_fbaf =1;};if _cefe =_aeae .WriteBit (_fbaf );_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");
};_fbaf =0;if _ccdc .UseRefinementAggregation {_fbaf =1;};if _cefe =_aeae .WriteBit (_fbaf );_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"\u0073\u0064\u0052\u0065\u0066\u0041\u0067\u0067");};_fbaf =0;if _ccdc .IsHuffmanEncoded {_fbaf =1;};if _cefe =_aeae .WriteBit (_fbaf );
_cefe !=nil {return _ddd ,_dg .Wrap (_cefe ,_gefgd ,"\u0073\u0064\u0048\u0075\u0066\u0066");};return 2,nil ;};type GenericRegion struct{_cfb _ca .StreamReader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;
UseExtTemplates bool ;IsTPGDon bool ;GBTemplate byte ;IsMMREncoded bool ;UseMMR bool ;GBAtX []int8 ;GBAtY []int8 ;GBAtOverride []bool ;_cad bool ;Bitmap *_cab .Bitmap ;_ace *_a .Decoder ;_cebb *_a .DecoderStats ;_beec *_f .Decoder ;};func (_dgdfcc *SymbolDictionary )retrieveImportSymbols ()error {for _ ,_dgfc :=range _dgdfcc .Header .RTSegments {if _dgfc .Type ==0{_eeec ,_edcc :=_dgfc .GetSegmentData ();
if _edcc !=nil {return _edcc ;};_ddca ,_ebddd :=_eeec .(*SymbolDictionary );if !_ebddd {return _bg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0044\u0061\u0074a\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u003a\u0020%\u0054",_eeec );
};_bgdb ,_edcc :=_ddca .GetDictionary ();if _edcc !=nil {return _bg .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064 \u0073\u0065\u0067m\u0065\u006e\u0074 \u0077\u0069t\u0068\u0020\u0069\u006e\u0064\u0065x\u003a %\u0064\u0020\u0067\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0073",_dgfc .SegmentNumber ,_edcc .Error ());
};_dgdfcc ._gbae =append (_dgdfcc ._gbae ,_bgdb ...);_dgdfcc ._cgeg +=_ddca .NumberOfExportedSymbols ;};};return nil ;};func (_abfg *RegionSegment )Size ()int {return 17};func NewGenericRegion (r _ca .StreamReader )*GenericRegion {return &GenericRegion {RegionSegment :NewRegionSegment (r ),_cfb :r };
};func (_feac *SymbolDictionary )setAtPixels ()error {if _feac .IsHuffmanEncoded {return nil ;};_dceeb :=1;if _feac .SdTemplate ==0{_dceeb =4;};if _babe :=_feac .readAtPixels (_dceeb );_babe !=nil {return _babe ;};return nil ;};func (_gegdf *TextRegion )decodeIb (_dddg ,_deef int64 )(*_cab .Bitmap ,error ){const _gdgf ="\u0064\u0065\u0063\u006f\u0064\u0065\u0049\u0062";
var (_dedga error ;_adaf *_cab .Bitmap ;);if _dddg ==0{if int (_deef )> len (_gegdf .Symbols )-1{return nil ,_dg .Error (_gdgf ,"\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0049\u0042\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0020\u0069\u006e\u0064\u0065x\u0020\u006f\u0075\u0074\u0020o\u0066\u0020r\u0061\u006e\u0067\u0065");
};return _gegdf .Symbols [int (_deef )],nil ;};var _acggg ,_abga ,_bfabe ,_adbgc int64 ;_acggg ,_dedga =_gegdf .decodeRdw ();if _dedga !=nil {return nil ,_dg .Wrap (_dedga ,_gdgf ,"");};_abga ,_dedga =_gegdf .decodeRdh ();if _dedga !=nil {return nil ,_dg .Wrap (_dedga ,_gdgf ,"");
};_bfabe ,_dedga =_gegdf .decodeRdx ();if _dedga !=nil {return nil ,_dg .Wrap (_dedga ,_gdgf ,"");};_adbgc ,_dedga =_gegdf .decodeRdy ();if _dedga !=nil {return nil ,_dg .Wrap (_dedga ,_gdgf ,"");};if _gegdf .IsHuffmanEncoded {if _ ,_dedga =_gegdf .decodeSymInRefSize ();
_dedga !=nil {return nil ,_dg .Wrap (_dedga ,_gdgf ,"");};_gegdf ._abfe .Align ();};_agfd :=_gegdf .Symbols [_deef ];_bcbc :=uint32 (_agfd .Width );_fdadd :=uint32 (_agfd .Height );_bgfa :=int32 (uint32 (_acggg )>>1)+int32 (_bfabe );_aabfg :=int32 (uint32 (_abga )>>1)+int32 (_adbgc );
if _gegdf ._eeeea ==nil {_gegdf ._eeeea =_fbb (_gegdf ._abfe ,nil );};_gegdf ._eeeea .setParameters (_gegdf ._ebgb ,_gegdf ._aaf ,_gegdf .SbrTemplate ,_bcbc +uint32 (_acggg ),_fdadd +uint32 (_abga ),_agfd ,_bgfa ,_aabfg ,false ,_gegdf .SbrATX ,_gegdf .SbrATY );
_adaf ,_dedga =_gegdf ._eeeea .GetRegionBitmap ();if _dedga !=nil {return nil ,_dg .Wrap (_dedga ,_gdgf ,"\u0067\u0072\u0066");};if _gegdf .IsHuffmanEncoded {_gegdf ._abfe .Align ();};return _adaf ,nil ;};type EndOfStripe struct{_be _ca .StreamReader ;
_cd int ;};func (_feb *PatternDictionary )GetDictionary ()([]*_cab .Bitmap ,error ){if _feb .Patterns !=nil {return _feb .Patterns ,nil ;};if !_feb .IsMMREncoded {_feb .setGbAtPixels ();};_fgce :=NewGenericRegion (_feb ._fdbfa );_fgce .setParametersMMR (_feb .IsMMREncoded ,_feb .DataOffset ,_feb .DataLength ,uint32 (_feb .HdpHeight ),(_feb .GrayMax +1)*uint32 (_feb .HdpWidth ),_feb .HDTemplate ,false ,false ,_feb .GBAtX ,_feb .GBAtY );
_eaaf ,_ffdb :=_fgce .GetRegionBitmap ();if _ffdb !=nil {return nil ,_ffdb ;};if _ffdb =_feb .extractPatterns (_eaaf );_ffdb !=nil {return nil ,_ffdb ;};return _feb .Patterns ,nil ;};func (_bdf *GenericRegion )computeSegmentDataStructure ()error {_bdf .DataOffset =_bdf ._cfb .StreamPosition ();
_bdf .DataHeaderLength =_bdf .DataOffset -_bdf .DataHeaderOffset ;_bdf .DataLength =int64 (_bdf ._cfb .Length ())-_bdf .DataHeaderLength ;return nil ;};func (_abc *GenericRefinementRegion )decodeTypicalPredictedLineTemplate1 (_cfc ,_aeg ,_bfgf ,_gea ,_gbb ,_edd ,_bfa ,_gac ,_aabe int )(_gabf error ){var (_gddg ,_gabfa int ;
_afa ,_bbb int ;_fge ,_agc int ;_gecc byte ;);if _cfc > 0{_gecc ,_gabf =_abc .RegionBitmap .GetByte (_bfa -_bfgf );if _gabf !=nil {return ;};_afa =int (_gecc );};if _gac > 0&&_gac <=_abc .ReferenceBitmap .Height {_gecc ,_gabf =_abc .ReferenceBitmap .GetByte (_aabe -_gea +_edd );
if _gabf !=nil {return ;};_bbb =int (_gecc )<<2;};if _gac >=0&&_gac < _abc .ReferenceBitmap .Height {_gecc ,_gabf =_abc .ReferenceBitmap .GetByte (_aabe +_edd );if _gabf !=nil {return ;};_fge =int (_gecc );};if _gac > -2&&_gac < _abc .ReferenceBitmap .Height -1{_gecc ,_gabf =_abc .ReferenceBitmap .GetByte (_aabe +_gea +_edd );
if _gabf !=nil {return ;};_agc =int (_gecc );};_gddg =((_afa >>5)&0x6)|((_agc >>2)&0x30)|(_fge &0xc0)|(_bbb &0x200);_gabfa =((_agc >>2)&0x70)|(_fge &0xc0)|(_bbb &0x700);var _gef int ;for _cbf :=0;_cbf < _gbb ;_cbf =_gef {var (_fcba int ;_gag int ;);_gef =_cbf +8;
if _fcba =_aeg -_cbf ;_fcba > 8{_fcba =8;};_cbb :=_gef < _aeg ;_fbe :=_gef < _abc .ReferenceBitmap .Width ;_cde :=_edd +1;if _cfc > 0{_gecc =0;if _cbb {_gecc ,_gabf =_abc .RegionBitmap .GetByte (_bfa -_bfgf +1);if _gabf !=nil {return ;};};_afa =(_afa <<8)|int (_gecc );
};if _gac > 0&&_gac <=_abc .ReferenceBitmap .Height {var _cgc int ;if _fbe {_gecc ,_gabf =_abc .ReferenceBitmap .GetByte (_aabe -_gea +_cde );if _gabf !=nil {return ;};_cgc =int (_gecc )<<2;};_bbb =(_bbb <<8)|_cgc ;};if _gac >=0&&_gac < _abc .ReferenceBitmap .Height {_gecc =0;
if _fbe {_gecc ,_gabf =_abc .ReferenceBitmap .GetByte (_aabe +_cde );if _gabf !=nil {return ;};};_fge =(_fge <<8)|int (_gecc );};if _gac > -2&&_gac < (_abc .ReferenceBitmap .Height -1){_gecc =0;if _fbe {_gecc ,_gabf =_abc .ReferenceBitmap .GetByte (_aabe +_gea +_cde );
if _gabf !=nil {return ;};};_agc =(_agc <<8)|int (_gecc );};for _fed :=0;_fed < _fcba ;_fed ++{var _aede int ;_cgg :=(_gabfa >>4)&0x1ff;switch _cgg {case 0x1ff:_aede =1;case 0x00:_aede =0;default:_abc ._g .SetIndex (int32 (_gddg ));_aede ,_gabf =_abc ._ac .DecodeBit (_abc ._g );
if _gabf !=nil {return ;};};_cfg :=uint (7-_fed );_gag |=_aede <<_cfg ;_gddg =((_gddg &0x0d6)<<1)|_aede |(_afa >>_cfg +5)&0x002|((_agc >>_cfg +2)&0x010)|((_fge >>_cfg )&0x040)|((_bbb >>_cfg )&0x200);_gabfa =((_gabfa &0xdb)<<1)|((_agc >>_cfg +2)&0x010)|((_fge >>_cfg )&0x080)|((_bbb >>_cfg )&0x400);
};_gabf =_abc .RegionBitmap .SetByte (_bfa ,byte (_gag ));if _gabf !=nil {return ;};_bfa ++;_aabe ++;};return nil ;};var (_bca Segmenter ;_eeeg =map[Type ]func ()Segmenter {TSymbolDictionary :func ()Segmenter {return &SymbolDictionary {}},TIntermediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateLosslessTextRegion :func ()Segmenter {return &TextRegion {}},TPatternDictionary :func ()Segmenter {return &PatternDictionary {}},TIntermediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateLosslessHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TIntermediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateLosslessGenericRegion :func ()Segmenter {return &GenericRegion {}},TIntermediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateLosslessGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TPageInformation :func ()Segmenter {return &PageInformationSegment {}},TEndOfPage :func ()Segmenter {return _bca },TEndOfStrip :func ()Segmenter {return &EndOfStripe {}},TEndOfFile :func ()Segmenter {return _bca },TProfiles :func ()Segmenter {return _bca },TTables :func ()Segmenter {return &TableSegment {}},TExtension :func ()Segmenter {return _bca },TBitmap :func ()Segmenter {return _bca }};
);func (_cfdg *GenericRegion )overrideAtTemplate2 (_cggc ,_eada ,_egd ,_fcca ,_cfe int )int {_cggc &=0x3FB;if _cfdg .GBAtY [0]==0&&_cfdg .GBAtX [0]>=-int8 (_cfe ){_cggc |=(_fcca >>uint (7-(int8 (_cfe )+_cfdg .GBAtX [0]))&0x1)<<2;}else {_cggc |=int (_cfdg .getPixel (_eada +int (_cfdg .GBAtX [0]),_egd +int (_cfdg .GBAtY [0])))<<2;
};return _cggc ;};func (_cbaef Type )String ()string {switch _cbaef {case TSymbolDictionary :return "\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079";case TIntermediateTextRegion :return "\u0049n\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020T\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateTextRegion :return "I\u006d\u006d\u0065\u0064ia\u0074e\u0020\u0054\u0065\u0078\u0074 \u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateLosslessTextRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020L\u006f\u0073\u0073\u006c\u0065\u0073\u0073 \u0054\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TPatternDictionary :return "\u0050a\u0074t\u0065\u0072\u006e\u0020\u0044i\u0063\u0074i\u006f\u006e\u0061\u0072\u0079";case TIntermediateHalftoneRegion :return "\u0049\u006e\u0074\u0065r\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0048\u0061l\u0066t\u006f\u006e\u0065\u0020\u0052\u0065\u0067i\u006f\u006e";
case TImmediateHalftoneRegion :return "\u0049m\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u0048\u0061l\u0066t\u006fn\u0065\u0020\u0052\u0065\u0067\u0069\u006fn";case TImmediateLosslessHalftoneRegion :return "\u0049\u006d\u006ded\u0069\u0061\u0074\u0065\u0020\u004c\u006f\u0073\u0073l\u0065s\u0073 \u0048a\u006c\u0066\u0074\u006f\u006e\u0065\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TIntermediateGenericRegion :return "I\u006e\u0074\u0065\u0072\u006d\u0065d\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020R\u0065g\u0069\u006f\u006e";case TImmediateGenericRegion :return "\u0049m\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006ee\u0072\u0069\u0063\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateLosslessGenericRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u004c\u006f\u0073\u0073\u006c\u0065\u0073\u0073\u0020\u0047e\u006e\u0065\u0072\u0069\u0063\u0020\u0052e\u0067\u0069\u006f\u006e";case TIntermediateGenericRefinementRegion :return "\u0049\u006e\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0020\u0052\u0065\u0066i\u006e\u0065\u006d\u0065\u006et\u0020\u0052e\u0067\u0069\u006f\u006e";
case TImmediateGenericRefinementRegion :return "I\u006d\u006d\u0065\u0064\u0069\u0061t\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020\u0052\u0065\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0067\u0069o\u006e";case TImmediateLosslessGenericRefinementRegion :return "\u0049m\u006d\u0065d\u0069\u0061\u0074\u0065 \u004c\u006f\u0073s\u006c\u0065\u0073\u0073\u0020\u0047\u0065\u006e\u0065ri\u0063\u0020\u0052e\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020R\u0065\u0067i\u006f\u006e";
case TPageInformation :return "\u0050\u0061g\u0065\u0020\u0049n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e";case TEndOfPage :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0050\u0061\u0067\u0065";case TEndOfStrip :return "\u0045\u006e\u0064 \u004f\u0066\u0020\u0053\u0074\u0072\u0069\u0070";
case TEndOfFile :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0046\u0069\u006c\u0065";case TProfiles :return "\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0073";case TTables :return "\u0054\u0061\u0062\u006c\u0065\u0073";case TExtension :return "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn";
case TBitmap :return "\u0042\u0069\u0074\u006d\u0061\u0070";};return "I\u006ev\u0061\u006c\u0069\u0064\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0020Ki\u006e\u0064";};func (_edef *Header )writeReferredToSegments (_deaaf _ca .BinaryWriter )(_ccc int ,_dbac error ){const _gced ="\u0077\u0072\u0069te\u0052\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
var (_gaab uint16 ;_bdee uint32 ;);_bdbee :=_edef .referenceSize ();_acdc :=1;_dgbc :=make ([]byte ,_bdbee );for _ ,_adgf :=range _edef .RTSNumbers {switch _bdbee {case 4:_bdee =uint32 (_adgf );_eg .BigEndian .PutUint32 (_dgbc ,_bdee );_acdc ,_dbac =_deaaf .Write (_dgbc );
if _dbac !=nil {return 0,_dg .Wrap (_dbac ,_gced ,"u\u0069\u006e\u0074\u0033\u0032\u0020\u0073\u0069\u007a\u0065");};case 2:_gaab =uint16 (_adgf );_eg .BigEndian .PutUint16 (_dgbc ,_gaab );_acdc ,_dbac =_deaaf .Write (_dgbc );if _dbac !=nil {return 0,_dg .Wrap (_dbac ,_gced ,"\u0075\u0069\u006e\u0074\u0031\u0036");
};default:if _dbac =_deaaf .WriteByte (byte (_adgf ));_dbac !=nil {return 0,_dg .Wrap (_dbac ,_gced ,"\u0075\u0069\u006et\u0038");};};_ccc +=_acdc ;};return _ccc ,nil ;};func (_afbd *TextRegion )decodeSymInRefSize ()(int64 ,error ){const _bbdc ="\u0064e\u0063o\u0064\u0065\u0053\u0079\u006dI\u006e\u0052e\u0066\u0053\u0069\u007a\u0065";
if _afbd .SbHuffRSize ==0{_ebfag ,_caea :=_ab .GetStandardTable (1);if _caea !=nil {return 0,_dg .Wrap (_caea ,_bbdc ,"");};return _ebfag .Decode (_afbd ._abfe );};if _afbd ._bcaaa ==nil {var (_cgaf int ;_bdfgc error ;);if _afbd .SbHuffFS ==3{_cgaf ++;
};if _afbd .SbHuffDS ==3{_cgaf ++;};if _afbd .SbHuffDT ==3{_cgaf ++;};if _afbd .SbHuffRDWidth ==3{_cgaf ++;};if _afbd .SbHuffRDHeight ==3{_cgaf ++;};if _afbd .SbHuffRDX ==3{_cgaf ++;};if _afbd .SbHuffRDY ==3{_cgaf ++;};_afbd ._bcaaa ,_bdfgc =_afbd .getUserTable (_cgaf );
if _bdfgc !=nil {return 0,_dg .Wrap (_bdfgc ,_bbdc ,"");};};_eafab ,_ddbb :=_afbd ._bcaaa .Decode (_afbd ._abfe );if _ddbb !=nil {return 0,_dg .Wrap (_ddbb ,_bbdc ,"");};return _eafab ,nil ;};func (_eegg *Header )Encode (w _ca .BinaryWriter )(_bgdc int ,_ccgf error ){const _fgfb ="\u0048\u0065\u0061d\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065";
var _afbe _ca .BinaryWriter ;_ed .Log .Trace ("\u005b\u0053\u0045G\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045\u0052\u005d[\u0045\u004e\u0043\u004f\u0044\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _ccgf !=nil {_ed .Log .Trace ("[\u0053\u0045\u0047\u004d\u0045\u004eT\u002d\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0045\u004e\u0043\u004f\u0044E\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020%\u0076",_ccgf );
}else {_ed .Log .Trace ("\u005b\u0053\u0045\u0047ME\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0025\u0076",_eegg );_ed .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045N\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u005b\u0045\u004e\u0043O\u0044\u0045\u005d\u0020\u0046\u0069\u006ei\u0073\u0068\u0065\u0064");
};}();w .FinishByte ();if _eegg .SegmentData !=nil {_gbdb ,_acc :=_eegg .SegmentData .(SegmentEncoder );if !_acc {return 0,_dg .Errorf (_fgfb ,"\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0064\u006f\u0065s\u006e\u0027\u0074\u0020\u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074 \u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0045\u006e\u0063\u006f\u0064er\u0020\u0069\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065",_eegg .SegmentData );
};_afbe =_ca .BufferedMSB ();_bgdc ,_ccgf =_gbdb .Encode (_afbe );if _ccgf !=nil {return 0,_dg .Wrap (_ccgf ,_fgfb ,"");};_eegg .SegmentDataLength =uint64 (_bgdc );};if _eegg .pageSize ()==4{_eegg .PageAssociationFieldSize =true ;};var _gcga int ;_gcga ,_ccgf =_eegg .writeSegmentNumber (w );
if _ccgf !=nil {return 0,_dg .Wrap (_ccgf ,_fgfb ,"");};_bgdc +=_gcga ;if _ccgf =_eegg .writeFlags (w );_ccgf !=nil {return _bgdc ,_dg .Wrap (_ccgf ,_fgfb ,"");};_bgdc ++;_gcga ,_ccgf =_eegg .writeReferredToCount (w );if _ccgf !=nil {return 0,_dg .Wrap (_ccgf ,_fgfb ,"");
};_bgdc +=_gcga ;_gcga ,_ccgf =_eegg .writeReferredToSegments (w );if _ccgf !=nil {return 0,_dg .Wrap (_ccgf ,_fgfb ,"");};_bgdc +=_gcga ;_gcga ,_ccgf =_eegg .writeSegmentPageAssociation (w );if _ccgf !=nil {return 0,_dg .Wrap (_ccgf ,_fgfb ,"");};_bgdc +=_gcga ;
_gcga ,_ccgf =_eegg .writeSegmentDataLength (w );if _ccgf !=nil {return 0,_dg .Wrap (_ccgf ,_fgfb ,"");};_bgdc +=_gcga ;_eegg .HeaderLength =int64 (_bgdc )-int64 (_eegg .SegmentDataLength );if _afbe !=nil {if _ ,_ccgf =w .Write (_afbe .Data ());_ccgf !=nil {return _bgdc ,_dg .Wrap (_ccgf ,_fgfb ,"\u0077r\u0069t\u0065\u0020\u0073\u0065\u0067m\u0065\u006et\u0020\u0064\u0061\u0074\u0061");
};};return _bgdc ,nil ;};func (_dgbf *HalftoneRegion )computeX (_efgf ,_ggdgb int )int {return _dgbf .shiftAndFill (int (_dgbf .HGridX )+_efgf *int (_dgbf .HRegionY )+_ggdgb *int (_dgbf .HRegionX ));};func (_fga *PageInformationSegment )String ()string {_cbaefd :=&_b .Builder {};
_cbaefd .WriteString ("\u000a\u005b\u0050\u0041G\u0045\u002d\u0049\u004e\u0046\u004f\u0052\u004d\u0041\u0054I\u004fN\u002d\u0053\u0045\u0047\u004d\u0045\u004eT\u005d\u000a");_cbaefd .WriteString (_bg .Sprintf ("\u0009\u002d \u0042\u004d\u0048e\u0069\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u000a",_fga .PageBMHeight ));
_cbaefd .WriteString (_bg .Sprintf ("\u0009-\u0020B\u004d\u0057\u0069\u0064\u0074\u0068\u003a\u0020\u0025\u0064\u000a",_fga .PageBMWidth ));_cbaefd .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0058\u003a\u0020\u0025\u0064\u000a",_fga .ResolutionX ));
_cbaefd .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0059\u003a\u0020\u0025\u0064\u000a",_fga .ResolutionY ));_cbaefd .WriteString (_bg .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0073\u000a",_fga ._aacgd ));
_cbaefd .WriteString (_bg .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006eO\u0070\u0065\u0072\u0061\u0074\u006f\u0072O\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025v\u000a",_fga ._edfg ));_cbaefd .WriteString (_bg .Sprintf ("\u0009-\u0020I\u0073\u004c\u006f\u0073\u0073l\u0065\u0073s\u003a\u0020\u0025\u0076\u000a",_fga .IsLossless ));
_cbaefd .WriteString (_bg .Sprintf ("\u0009\u002d\u0020R\u0065\u0071\u0075\u0069r\u0065\u0073\u0041\u0075\u0078\u0069\u006ci\u0061\u0072\u0079\u0042\u0075\u0066\u0066\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_fga ._daed ));_cbaefd .WriteString (_bg .Sprintf ("\u0009\u002d\u0020M\u0069\u0067\u0068\u0074C\u006f\u006e\u0074\u0061\u0069\u006e\u0052e\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0076\u000a",_fga ._abbc ));
_cbaefd .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0049\u0073\u0053\u0074\u0072\u0069\u0070\u0065\u0064:\u0020\u0025\u0076\u000a",_fga .IsStripe ));_cbaefd .WriteString (_bg .Sprintf ("\t\u002d\u0020\u004d\u0061xS\u0074r\u0069\u0070\u0065\u0053\u0069z\u0065\u003a\u0020\u0025\u0076\u000a",_fga .MaxStripeSize ));
return _cbaefd .String ();};func (_deade *SymbolDictionary )encodeRefinementATFlags (_ggee _ca .BinaryWriter )(_cgcc int ,_cdff error ){const _gegdc ="\u0065\u006e\u0063od\u0065\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if !_deade .UseRefinementAggregation ||_deade .SdrTemplate !=0{return 0,nil ;};for _bdfa :=0;_bdfa < 2;_bdfa ++{if _cdff =_ggee .WriteByte (byte (_deade .SdrATX [_bdfa ]));_cdff !=nil {return _cgcc ,_dg .Wrapf (_cdff ,_gegdc ,"\u0053\u0064\u0072\u0041\u0054\u0058\u005b\u0025\u0064\u005d",_bdfa );
};_cgcc ++;if _cdff =_ggee .WriteByte (byte (_deade .SdrATY [_bdfa ]));_cdff !=nil {return _cgcc ,_dg .Wrapf (_cdff ,_gegdc ,"\u0053\u0064\u0072\u0041\u0054\u0059\u005b\u0025\u0064\u005d",_bdfa );};_cgcc ++;};return _cgcc ,nil ;};func (_afef *TextRegion )GetRegionBitmap ()(*_cab .Bitmap ,error ){if _afef .RegionBitmap !=nil {return _afef .RegionBitmap ,nil ;
};if !_afef .IsHuffmanEncoded {if _fecbb :=_afef .setCodingStatistics ();_fecbb !=nil {return nil ,_fecbb ;};};if _fedcc :=_afef .createRegionBitmap ();_fedcc !=nil {return nil ,_fedcc ;};if _ccdb :=_afef .decodeSymbolInstances ();_ccdb !=nil {return nil ,_ccdb ;
};return _afef .RegionBitmap ,nil ;};var (_ Regioner =&TextRegion {};_ Segmenter =&TextRegion {};);func (_eafgb *SymbolDictionary )encodeATFlags (_adbc _ca .BinaryWriter )(_baae int ,_cegbd error ){const _abcee ="\u0065\u006e\u0063\u006f\u0064\u0065\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if _eafgb .IsHuffmanEncoded ||_eafgb .SdTemplate !=0{return 0,nil ;};_gafb :=4;if _eafgb .SdTemplate !=0{_gafb =1;};for _bged :=0;_bged < _gafb ;_bged ++{if _cegbd =_adbc .WriteByte (byte (_eafgb .SdATX [_bged ]));_cegbd !=nil {return _baae ,_dg .Wrapf (_cegbd ,_abcee ,"\u0053d\u0041\u0054\u0058\u005b\u0025\u0064]",_bged );
};_baae ++;if _cegbd =_adbc .WriteByte (byte (_eafgb .SdATY [_bged ]));_cegbd !=nil {return _baae ,_dg .Wrapf (_cegbd ,_abcee ,"\u0053d\u0041\u0054\u0059\u005b\u0025\u0064]",_bged );};_baae ++;};return _baae ,nil ;};var _ templater =&template1 {};func (_ddbe *GenericRegion )writeGBAtPixels (_agbg _ca .BinaryWriter )(_cgab int ,_gceg error ){const _fffd ="\u0077r\u0069t\u0065\u0047\u0042\u0041\u0074\u0050\u0069\u0078\u0065\u006c\u0073";
if _ddbe .UseMMR {return 0,nil ;};_gda :=1;if _ddbe .GBTemplate ==0{_gda =4;}else if _ddbe .UseExtTemplates {_gda =12;};if len (_ddbe .GBAtX )!=_gda {return 0,_dg .Errorf (_fffd ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0058\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};if len (_ddbe .GBAtY )!=_gda {return 0,_dg .Errorf (_fffd ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0059\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};for _adbg :=0;_adbg < _gda ;_adbg ++{if _gceg =_agbg .WriteByte (byte (_ddbe .GBAtX [_adbg ]));_gceg !=nil {return _cgab ,_dg .Wrap (_gceg ,_fffd ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0058");};_cgab ++;if _gceg =_agbg .WriteByte (byte (_ddbe .GBAtY [_adbg ]));
_gceg !=nil {return _cgab ,_dg .Wrap (_gceg ,_fffd ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0059");};_cgab ++;};return _cgab ,nil ;};func (_bbge *PageInformationSegment )readCombinationOperatorOverrideAllowed ()error {_ffac ,_cfgf :=_bbge ._gcgb .ReadBit ();
if _cfgf !=nil {return _cfgf ;};if _ffac ==1{_bbge ._edfg =true ;};return nil ;};func (_fgcc *RegionSegment )Encode (w _ca .BinaryWriter )(_bbde int ,_cfae error ){const _fffg ="R\u0065g\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065n\u0074\u002e\u0045\u006eco\u0064\u0065";
_bbbad :=make ([]byte ,4);_eg .BigEndian .PutUint32 (_bbbad ,_fgcc .BitmapWidth );_bbde ,_cfae =w .Write (_bbbad );if _cfae !=nil {return 0,_dg .Wrap (_cfae ,_fffg ,"\u0057\u0069\u0064t\u0068");};_eg .BigEndian .PutUint32 (_bbbad ,_fgcc .BitmapHeight );
var _acce int ;_acce ,_cfae =w .Write (_bbbad );if _cfae !=nil {return 0,_dg .Wrap (_cfae ,_fffg ,"\u0048\u0065\u0069\u0067\u0068\u0074");};_bbde +=_acce ;_eg .BigEndian .PutUint32 (_bbbad ,_fgcc .XLocation );_acce ,_cfae =w .Write (_bbbad );if _cfae !=nil {return 0,_dg .Wrap (_cfae ,_fffg ,"\u0058L\u006f\u0063\u0061\u0074\u0069\u006fn");
};_bbde +=_acce ;_eg .BigEndian .PutUint32 (_bbbad ,_fgcc .YLocation );_acce ,_cfae =w .Write (_bbbad );if _cfae !=nil {return 0,_dg .Wrap (_cfae ,_fffg ,"\u0059L\u006f\u0063\u0061\u0074\u0069\u006fn");};_bbde +=_acce ;if _cfae =w .WriteByte (byte (_fgcc .CombinaionOperator )&0x07);
_cfae !=nil {return 0,_dg .Wrap (_cfae ,_fffg ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};_bbde ++;return _bbde ,nil ;};func (_bf *GenericRefinementRegion )decodeSLTP ()(int ,error ){_bf .Template .setIndex (_bf ._g );
return _bf ._ac .DecodeBit (_bf ._g );};func (_cbac *SymbolDictionary )setRefinementAtPixels ()error {if !_cbac .UseRefinementAggregation ||_cbac .SdrTemplate !=0{return nil ;};if _ggaf :=_cbac .readRefinementAtPixels (2);_ggaf !=nil {return _ggaf ;};return nil ;
};func (_abca *TextRegion )symbolIDCodeLengths ()error {var (_feee []*_ab .Code ;_cadfd uint64 ;_bbdbe _ab .Tabler ;_bcddg error ;);for _bdbb :=0;_bdbb < 35;_bdbb ++{_cadfd ,_bcddg =_abca ._abfe .ReadBits (4);if _bcddg !=nil {return _bcddg ;};_cffged :=int (_cadfd &0xf);
if _cffged > 0{_feee =append (_feee ,_ab .NewCode (int32 (_cffged ),0,int32 (_bdbb ),false ));};};_bbdbe ,_bcddg =_ab .NewFixedSizeTable (_feee );if _bcddg !=nil {return _bcddg ;};var (_egcc int64 ;_cgbd uint32 ;_gdebd []*_ab .Code ;_abgc int64 ;);for _cgbd < _abca .NumberOfSymbols {_abgc ,_bcddg =_bbdbe .Decode (_abca ._abfe );
if _bcddg !=nil {return _bcddg ;};if _abgc < 32{if _abgc > 0{_gdebd =append (_gdebd ,_ab .NewCode (int32 (_abgc ),0,int32 (_cgbd ),false ));};_egcc =_abgc ;_cgbd ++;}else {var _eddfb ,_eeae int64 ;switch _abgc {case 32:_cadfd ,_bcddg =_abca ._abfe .ReadBits (2);
if _bcddg !=nil {return _bcddg ;};_eddfb =3+int64 (_cadfd );if _cgbd > 0{_eeae =_egcc ;};case 33:_cadfd ,_bcddg =_abca ._abfe .ReadBits (3);if _bcddg !=nil {return _bcddg ;};_eddfb =3+int64 (_cadfd );case 34:_cadfd ,_bcddg =_abca ._abfe .ReadBits (7);if _bcddg !=nil {return _bcddg ;
};_eddfb =11+int64 (_cadfd );};for _ffce :=0;_ffce < int (_eddfb );_ffce ++{if _eeae > 0{_gdebd =append (_gdebd ,_ab .NewCode (int32 (_eeae ),0,int32 (_cgbd ),false ));};_cgbd ++;};};};_abca ._abfe .Align ();_abca ._eegd ,_bcddg =_ab .NewFixedSizeTable (_gdebd );
return _bcddg ;};func (_eceg *PageInformationSegment )readIsStriped ()error {_gedc ,_ecc :=_eceg ._gcgb .ReadBit ();if _ecc !=nil {return _ecc ;};if _gedc ==1{_eceg .IsStripe =true ;};return nil ;};func (_afcc *TextRegion )setCodingStatistics ()error {if _afcc ._bacd ==nil {_afcc ._bacd =_a .NewStats (512,1);
};if _afcc ._adad ==nil {_afcc ._adad =_a .NewStats (512,1);};if _afcc ._ecaba ==nil {_afcc ._ecaba =_a .NewStats (512,1);};if _afcc ._dbcf ==nil {_afcc ._dbcf =_a .NewStats (512,1);};if _afcc ._eadf ==nil {_afcc ._eadf =_a .NewStats (512,1);};if _afcc ._ccgad ==nil {_afcc ._ccgad =_a .NewStats (512,1);
};if _afcc ._gafbb ==nil {_afcc ._gafbb =_a .NewStats (512,1);};if _afcc ._agffe ==nil {_afcc ._agffe =_a .NewStats (1<<uint (_afcc ._cdfff ),1);};if _afcc ._gdcb ==nil {_afcc ._gdcb =_a .NewStats (512,1);};if _afcc ._cbgg ==nil {_afcc ._cbgg =_a .NewStats (512,1);
};if _afcc ._aaf ==nil {var _gecb error ;_afcc ._aaf ,_gecb =_a .New (_afcc ._abfe );if _gecb !=nil {return _gecb ;};};return nil ;};func (_gdcd *Header )readReferredToSegmentNumbers (_bdcd _ca .StreamReader ,_edab int )([]int ,error ){const _ceagg ="\u0072\u0065\u0061\u0064R\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053e\u0067m\u0065\u006e\u0074\u004e\u0075\u006d\u0062e\u0072\u0073";
_bfae :=make ([]int ,_edab );if _edab > 0{_gdcd .RTSegments =make ([]*Header ,_edab );var (_edfe uint64 ;_gceb error ;);for _abe :=0;_abe < _edab ;_abe ++{_edfe ,_gceb =_bdcd .ReadBits (byte (_gdcd .referenceSize ())<<3);if _gceb !=nil {return nil ,_dg .Wrapf (_gceb ,_ceagg ,"\u0027\u0025\u0064\u0027 \u0072\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0020\u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u0075\u006db\u0065\u0072",_abe );
};_bfae [_abe ]=int (_edfe &_c .MaxInt32 );};};return _bfae ,nil ;};func (_gdbc *GenericRegion )getPixel (_egc ,_ggadc int )int8 {if _egc < 0||_egc >=_gdbc .Bitmap .Width {return 0;};if _ggadc < 0||_ggadc >=_gdbc .Bitmap .Height {return 0;};if _gdbc .Bitmap .GetPixel (_egc ,_ggadc ){return 1;
};return 0;};type Header struct{SegmentNumber uint32 ;Type Type ;RetainFlag bool ;PageAssociation int ;PageAssociationFieldSize bool ;RTSegments []*Header ;HeaderLength int64 ;SegmentDataLength uint64 ;SegmentDataStartOffset uint64 ;Reader _ca .StreamReader ;
SegmentData Segmenter ;RTSNumbers []int ;RetainBits []uint8 ;};func (_deaa *HalftoneRegion )GetPatterns ()([]*_cab .Bitmap ,error ){var (_ebfa []*_cab .Bitmap ;_eaeg error ;);for _ ,_afacb :=range _deaa ._feed .RTSegments {var _ebc Segmenter ;_ebc ,_eaeg =_afacb .GetSegmentData ();
if _eaeg !=nil {_ed .Log .Debug ("\u0047e\u0074\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061 \u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025v",_eaeg );return nil ,_eaeg ;};_fbdg ,_ffa :=_ebc .(*PatternDictionary );if !_ffa {_eaeg =_bg .Errorf ("\u0072e\u006c\u0061t\u0065\u0064\u0020\u0073e\u0067\u006d\u0065n\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0070at\u0074\u0065\u0072n\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u003a \u0025\u0054",_ebc );
return nil ,_eaeg ;};var _aaaa []*_cab .Bitmap ;_aaaa ,_eaeg =_fbdg .GetDictionary ();if _eaeg !=nil {_ed .Log .Debug ("\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_eaeg );
return nil ,_eaeg ;};_ebfa =append (_ebfa ,_aaaa ...);};return _ebfa ,nil ;};func _egad (_gfdb int )int {if _gfdb ==0{return 0;};_gfdb |=_gfdb >>1;_gfdb |=_gfdb >>2;_gfdb |=_gfdb >>4;_gfdb |=_gfdb >>8;_gfdb |=_gfdb >>16;return (_gfdb +1)>>1;};type EncodeInitializer interface{InitEncode ();
};type GenericRefinementRegion struct{_dad templater ;_fd templater ;_de _ca .StreamReader ;_egb *Header ;RegionInfo *RegionSegment ;IsTPGROn bool ;TemplateID int8 ;Template templater ;GrAtX []int8 ;GrAtY []int8 ;RegionBitmap *_cab .Bitmap ;ReferenceBitmap *_cab .Bitmap ;
ReferenceDX int32 ;ReferenceDY int32 ;_ac *_a .Decoder ;_g *_a .DecoderStats ;_gd bool ;_ee []bool ;};func (_cadf *GenericRegion )overrideAtTemplate0a (_cbdg ,_eade ,_ggg ,_bdea ,_ebg ,_cffg int )int {if _cadf .GBAtOverride [0]{_cbdg &=0xFFEF;if _cadf .GBAtY [0]==0&&_cadf .GBAtX [0]>=-int8 (_ebg ){_cbdg |=(_bdea >>uint (int8 (_cffg )-_cadf .GBAtX [0]&0x1))<<4;
}else {_cbdg |=int (_cadf .getPixel (_eade +int (_cadf .GBAtX [0]),_ggg +int (_cadf .GBAtY [0])))<<4;};};if _cadf .GBAtOverride [1]{_cbdg &=0xFBFF;if _cadf .GBAtY [1]==0&&_cadf .GBAtX [1]>=-int8 (_ebg ){_cbdg |=(_bdea >>uint (int8 (_cffg )-_cadf .GBAtX [1]&0x1))<<10;
}else {_cbdg |=int (_cadf .getPixel (_eade +int (_cadf .GBAtX [1]),_ggg +int (_cadf .GBAtY [1])))<<10;};};if _cadf .GBAtOverride [2]{_cbdg &=0xF7FF;if _cadf .GBAtY [2]==0&&_cadf .GBAtX [2]>=-int8 (_ebg ){_cbdg |=(_bdea >>uint (int8 (_cffg )-_cadf .GBAtX [2]&0x1))<<11;
}else {_cbdg |=int (_cadf .getPixel (_eade +int (_cadf .GBAtX [2]),_ggg +int (_cadf .GBAtY [2])))<<11;};};if _cadf .GBAtOverride [3]{_cbdg &=0x7FFF;if _cadf .GBAtY [3]==0&&_cadf .GBAtX [3]>=-int8 (_ebg ){_cbdg |=(_bdea >>uint (int8 (_cffg )-_cadf .GBAtX [3]&0x1))<<15;
}else {_cbdg |=int (_cadf .getPixel (_eade +int (_cadf .GBAtX [3]),_ggg +int (_cadf .GBAtY [3])))<<15;};};return _cbdg ;};func (_cbga *TextRegion )readRegionFlags ()error {var (_bdeec int ;_fdfaf uint64 ;_gdga error ;);_bdeec ,_gdga =_cbga ._abfe .ReadBit ();
if _gdga !=nil {return _gdga ;};_cbga .SbrTemplate =int8 (_bdeec );_fdfaf ,_gdga =_cbga ._abfe .ReadBits (5);if _gdga !=nil {return _gdga ;};_cbga .SbDsOffset =int8 (_fdfaf );if _cbga .SbDsOffset > 0x0f{_cbga .SbDsOffset -=0x20;};_bdeec ,_gdga =_cbga ._abfe .ReadBit ();
if _gdga !=nil {return _gdga ;};_cbga .DefaultPixel =int8 (_bdeec );_fdfaf ,_gdga =_cbga ._abfe .ReadBits (2);if _gdga !=nil {return _gdga ;};_cbga .CombinationOperator =_cab .CombinationOperator (int (_fdfaf )&0x3);_bdeec ,_gdga =_cbga ._abfe .ReadBit ();
if _gdga !=nil {return _gdga ;};_cbga .IsTransposed =int8 (_bdeec );_fdfaf ,_gdga =_cbga ._abfe .ReadBits (2);if _gdga !=nil {return _gdga ;};_cbga .ReferenceCorner =int16 (_fdfaf )&0x3;_fdfaf ,_gdga =_cbga ._abfe .ReadBits (2);if _gdga !=nil {return _gdga ;
};_cbga .LogSBStrips =int16 (_fdfaf )&0x3;_cbga .SbStrips =1<<uint (_cbga .LogSBStrips );_bdeec ,_gdga =_cbga ._abfe .ReadBit ();if _gdga !=nil {return _gdga ;};if _bdeec ==1{_cbga .UseRefinement =true ;};_bdeec ,_gdga =_cbga ._abfe .ReadBit ();if _gdga !=nil {return _gdga ;
};if _bdeec ==1{_cbga .IsHuffmanEncoded =true ;};return nil ;};func (_aaae *Header )readHeaderFlags ()error {const _gdded ="\u0072e\u0061d\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006c\u0061\u0067\u0073";_fcdd ,_beed :=_aaae .Reader .ReadBit ();if _beed !=nil {return _dg .Wrap (_beed ,_gdded ,"r\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067");
};if _fcdd !=0{_aaae .RetainFlag =true ;};_fcdd ,_beed =_aaae .Reader .ReadBit ();if _beed !=nil {return _dg .Wrap (_beed ,_gdded ,"\u0070\u0061g\u0065\u0020\u0061s\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e");};if _fcdd !=0{_aaae .PageAssociationFieldSize =true ;
};_fec ,_beed :=_aaae .Reader .ReadBits (6);if _beed !=nil {return _dg .Wrap (_beed ,_gdded ,"\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065");};_aaae .Type =Type (int (_fec ));return nil ;};func (_acbf *PatternDictionary )checkInput ()error {if _acbf .HdpHeight < 1||_acbf .HdpWidth < 1{return _ea .New ("in\u0076\u0061l\u0069\u0064\u0020\u0048\u0065\u0061\u0064\u0065\u0072 \u0056\u0061\u006c\u0075\u0065\u003a\u0020\u0057\u0069\u0064\u0074\u0068\u002f\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020g\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020z\u0065\u0072o");
};if _acbf .IsMMREncoded {if _acbf .HDTemplate !=0{_ed .Log .Debug ("\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0020\u0048\u0044\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030");
};};return nil ;};func (_edbcb *SymbolDictionary )Encode (w _ca .BinaryWriter )(_fcg int ,_cbc error ){const _gbfbb ="\u0053\u0079\u006dbo\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0045\u006e\u0063\u006f\u0064\u0065";if _edbcb ==nil {return 0,_dg .Error (_gbfbb ,"\u0073\u0079m\u0062\u006f\u006c\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066in\u0065\u0064");
};if _fcg ,_cbc =_edbcb .encodeFlags (w );_cbc !=nil {return _fcg ,_dg .Wrap (_cbc ,_gbfbb ,"");};_bbfg ,_cbc :=_edbcb .encodeATFlags (w );if _cbc !=nil {return _fcg ,_dg .Wrap (_cbc ,_gbfbb ,"");};_fcg +=_bbfg ;if _bbfg ,_cbc =_edbcb .encodeRefinementATFlags (w );
_cbc !=nil {return _fcg ,_dg .Wrap (_cbc ,_gbfbb ,"");};_fcg +=_bbfg ;if _bbfg ,_cbc =_edbcb .encodeNumSyms (w );_cbc !=nil {return _fcg ,_dg .Wrap (_cbc ,_gbfbb ,"");};_fcg +=_bbfg ;if _bbfg ,_cbc =_edbcb .encodeSymbols (w );_cbc !=nil {return _fcg ,_dg .Wrap (_cbc ,_gbfbb ,"");
};_fcg +=_bbfg ;return _fcg ,nil ;};func (_bfff *TextRegion )createRegionBitmap ()error {_bfff .RegionBitmap =_cab .New (int (_bfff .RegionInfo .BitmapWidth ),int (_bfff .RegionInfo .BitmapHeight ));if _bfff .DefaultPixel !=0{_bfff .RegionBitmap .SetDefaultPixel ();
};return nil ;};func (_fafea *SymbolDictionary )decodeHeightClassBitmap (_fgff *_cab .Bitmap ,_fafce int64 ,_eagd int ,_deae []int )error {for _bcef :=_fafce ;_bcef < int64 (_fafea ._edage );_bcef ++{var _cfgd int ;for _agd :=_fafce ;_agd <=_bcef -1;_agd ++{_cfgd +=_deae [_agd ];
};_dadg :=_d .Rect (_cfgd ,0,_cfgd +_deae [_bcef ],_eagd );_ecac ,_fcaff :=_cab .Extract (_dadg ,_fgff );if _fcaff !=nil {return _fcaff ;};_fafea ._bfbgg [_bcef ]=_ecac ;_fafea ._ecec =append (_fafea ._ecec ,_ecac );};return nil ;};func (_cadc *Header )parse (_eaed Documenter ,_debe _ca .StreamReader ,_gdba int64 ,_gcdc OrganizationType )(_cbaa error ){const _daaa ="\u0070\u0061\u0072s\u0065";
_ed .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u005b\u0050A\u0052\u0053\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _cbaa !=nil {_ed .Log .Trace ("\u005b\u0053\u0045GM\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045R\u005d[\u0050A\u0052S\u0045\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_cbaa );
}else {_ed .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052]\u005bP\u0041\u0052\u0053\u0045\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");};}();_ ,_cbaa =_debe .Seek (_gdba ,_da .SeekStart );
if _cbaa !=nil {return _dg .Wrap (_cbaa ,_daaa ,"\u0073\u0065\u0065\u006b\u0020\u0073\u0074\u0061\u0072\u0074");};if _cbaa =_cadc .readSegmentNumber (_debe );_cbaa !=nil {return _dg .Wrap (_cbaa ,_daaa ,"");};if _cbaa =_cadc .readHeaderFlags ();_cbaa !=nil {return _dg .Wrap (_cbaa ,_daaa ,"");
};var _acf uint64 ;_acf ,_cbaa =_cadc .readNumberOfReferredToSegments (_debe );if _cbaa !=nil {return _dg .Wrap (_cbaa ,_daaa ,"");};_cadc .RTSNumbers ,_cbaa =_cadc .readReferredToSegmentNumbers (_debe ,int (_acf ));if _cbaa !=nil {return _dg .Wrap (_cbaa ,_daaa ,"");
};_cbaa =_cadc .readSegmentPageAssociation (_eaed ,_debe ,_acf ,_cadc .RTSNumbers ...);if _cbaa !=nil {return _dg .Wrap (_cbaa ,_daaa ,"");};if _cadc .Type !=TEndOfFile {if _cbaa =_cadc .readSegmentDataLength (_debe );_cbaa !=nil {return _dg .Wrap (_cbaa ,_daaa ,"");
};};_cadc .readDataStartOffset (_debe ,_gcdc );_cadc .readHeaderLength (_debe ,_gdba );_ed .Log .Trace ("\u0025\u0073",_cadc );return nil ;};func (_agdg *TextRegion )String ()string {_cfbe :=&_b .Builder {};_cfbe .WriteString ("\u000a[\u0054E\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u000a");
_cfbe .WriteString (_agdg .RegionInfo .String ()+"\u000a");_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053br\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0025\u0076\u000a",_agdg .SbrTemplate ));_cfbe .WriteString (_bg .Sprintf ("\u0009-\u0020S\u0062\u0044\u0073\u004f\u0066f\u0073\u0065t\u003a\u0020\u0025\u0076\u000a",_agdg .SbDsOffset ));
_cfbe .WriteString (_bg .Sprintf ("\t\u002d \u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0050i\u0078\u0065\u006c\u003a %\u0076\u000a",_agdg .DefaultPixel ));_cfbe .WriteString (_bg .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0076\u000a",_agdg .CombinationOperator ));
_cfbe .WriteString (_bg .Sprintf ("\t\u002d \u0049\u0073\u0054\u0072\u0061\u006e\u0073\u0070o\u0073\u0065\u0064\u003a %\u0076\u000a",_agdg .IsTransposed ));_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d\u0020Re\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0043\u006f\u0072\u006e\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_agdg .ReferenceCorner ));
_cfbe .WriteString (_bg .Sprintf ("\t\u002d\u0020\u0055\u0073eR\u0065f\u0069\u006e\u0065\u006d\u0065n\u0074\u003a\u0020\u0025\u0076\u000a",_agdg .UseRefinement ));_cfbe .WriteString (_bg .Sprintf ("\u0009-\u0020\u0049\u0073\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045n\u0063\u006f\u0064\u0065\u0064\u003a\u0020\u0025\u0076\u000a",_agdg .IsHuffmanEncoded ));
if _agdg .IsHuffmanEncoded {_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_agdg .SbHuffRSize ));_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0059:\u0020\u0025\u0076\u000a",_agdg .SbHuffRDY ));
_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0058:\u0020\u0025\u0076\u000a",_agdg .SbHuffRDX ));_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069\u0067\u0068\u0074\u003a\u0020\u0025v\u000a",_agdg .SbHuffRDHeight ));
_cfbe .WriteString (_bg .Sprintf ("\t\u002d\u0020\u0053\u0062Hu\u0066f\u0052\u0044\u0057\u0069\u0064t\u0068\u003a\u0020\u0025\u0076\u000a",_agdg .SbHuffRDWidth ));_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0054\u003a\u0020\u0025\u0076\u000a",_agdg .SbHuffDT ));
_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0053\u003a\u0020\u0025\u0076\u000a",_agdg .SbHuffDS ));_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0046\u0053\u003a\u0020\u0025\u0076\u000a",_agdg .SbHuffFS ));
};_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_agdg .SbrATX ));_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0059:\u0020\u0025\u0076\u000a",_agdg .SbrATY ));
_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d\u0020N\u0075\u006d\u0062\u0065r\u004f\u0066\u0053\u0079\u006d\u0062\u006fl\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_agdg .NumberOfSymbolInstances ));_cfbe .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_agdg .SbrATX ));
return _cfbe .String ();};func (_fccg *TextRegion )readUseRefinement ()error {if !_fccg .UseRefinement ||_fccg .SbrTemplate !=0{return nil ;};var (_gcbd byte ;_cbdef error ;);_fccg .SbrATX =make ([]int8 ,2);_fccg .SbrATY =make ([]int8 ,2);_gcbd ,_cbdef =_fccg ._abfe .ReadByte ();
if _cbdef !=nil {return _cbdef ;};_fccg .SbrATX [0]=int8 (_gcbd );_gcbd ,_cbdef =_fccg ._abfe .ReadByte ();if _cbdef !=nil {return _cbdef ;};_fccg .SbrATY [0]=int8 (_gcbd );_gcbd ,_cbdef =_fccg ._abfe .ReadByte ();if _cbdef !=nil {return _cbdef ;};_fccg .SbrATX [1]=int8 (_gcbd );
_gcbd ,_cbdef =_fccg ._abfe .ReadByte ();if _cbdef !=nil {return _cbdef ;};_fccg .SbrATY [1]=int8 (_gcbd );return nil ;};func (_fadf *HalftoneRegion )computeGrayScalePlanes (_ebe []*_cab .Bitmap ,_ddaf int )([][]int ,error ){_bbe :=make ([][]int ,_fadf .HGridHeight );
for _cgae :=0;_cgae < len (_bbe );_cgae ++{_bbe [_cgae ]=make ([]int ,_fadf .HGridWidth );};for _gefe :=0;_gefe < int (_fadf .HGridHeight );_gefe ++{for _cfdb :=0;_cfdb < int (_fadf .HGridWidth );_cfdb +=8{var _bbec int ;if _egbce :=int (_fadf .HGridWidth )-_cfdb ;
_egbce > 8{_bbec =8;}else {_bbec =_egbce ;};_caa :=_ebe [0].GetByteIndex (_cfdb ,_gefe );for _faab :=0;_faab < _bbec ;_faab ++{_afae :=_faab +_cfdb ;_bbe [_gefe ][_afae ]=0;for _cffge :=0;_cffge < _ddaf ;_cffge ++{_eaee ,_cca :=_ebe [_cffge ].GetByte (_caa );
if _cca !=nil {return nil ,_cca ;};_gabg :=_eaee >>uint (7-_afae &7);_cece :=_gabg &1;_aaag :=1<<uint (_cffge );_fgea :=int (_cece )*_aaag ;_bbe [_gefe ][_afae ]+=_fgea ;};};};};return _bbe ,nil ;};func (_baa *GenericRegion )decodeTemplate1 (_gecd ,_gfd ,_ggdg int ,_abf ,_gade int )(_feg error ){const _aabf ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0031";
var (_ade ,_bebe int ;_egbcf ,_fac int ;_cfbc byte ;_ege ,_gecf int ;);if _gecd >=1{_cfbc ,_feg =_baa .Bitmap .GetByte (_gade );if _feg !=nil {return _dg .Wrap (_feg ,_aabf ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_egbcf =int (_cfbc );};if _gecd >=2{_cfbc ,_feg =_baa .Bitmap .GetByte (_gade -_baa .Bitmap .RowStride );
if _feg !=nil {return _dg .Wrap (_feg ,_aabf ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_fac =int (_cfbc )<<5;};_ade =((_egbcf >>1)&0x1f8)|((_fac >>1)&0x1e00);for _dbgg :=0;_dbgg < _ggdg ;_dbgg =_ege {var (_agcd byte ;_eaag int ;);_ege =_dbgg +8;
if _gedb :=_gfd -_dbgg ;_gedb > 8{_eaag =8;}else {_eaag =_gedb ;};if _gecd > 0{_egbcf <<=8;if _ege < _gfd {_cfbc ,_feg =_baa .Bitmap .GetByte (_gade +1);if _feg !=nil {return _dg .Wrap (_feg ,_aabf ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};
_egbcf |=int (_cfbc );};};if _gecd > 1{_fac <<=8;if _ege < _gfd {_cfbc ,_feg =_baa .Bitmap .GetByte (_gade -_baa .Bitmap .RowStride +1);if _feg !=nil {return _dg .Wrap (_feg ,_aabf ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_fac |=int (_cfbc )<<5;
};};for _cfbb :=0;_cfbb < _eaag ;_cfbb ++{if _baa ._cad {_bebe =_baa .overrideAtTemplate1 (_ade ,_dbgg +_cfbb ,_gecd ,int (_agcd ),_cfbb );_baa ._cebb .SetIndex (int32 (_bebe ));}else {_baa ._cebb .SetIndex (int32 (_ade ));};_gecf ,_feg =_baa ._ace .DecodeBit (_baa ._cebb );
if _feg !=nil {return _dg .Wrap (_feg ,_aabf ,"");};_agcd |=byte (_gecf )<<uint (7-_cfbb );_eacg :=uint (8-_cfbb );_ade =((_ade &0xefb)<<1)|_gecf |((_egbcf >>_eacg )&0x8)|((_fac >>_eacg )&0x200);};if _fafc :=_baa .Bitmap .SetByte (_abf ,_agcd );_fafc !=nil {return _dg .Wrap (_fafc ,_aabf ,"");
};_abf ++;_gade ++;};return nil ;};func (_ebedg *TextRegion )parseHeader ()error {var _ebab error ;_ed .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069n\u0073\u002e\u002e\u002e");
defer func (){if _ebab !=nil {_ed .Log .Trace ("\u005b\u0054\u0045\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044E\u0052\u005d\u0020\u0066\u0061i\u006c\u0065d\u002e\u0020\u0025\u0076",_ebab );
}else {_ed .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069s\u0068\u0065\u0064\u002e");};}();if _ebab =_ebedg .RegionInfo .parseHeader ();
_ebab !=nil {return _ebab ;};if _ebab =_ebedg .readRegionFlags ();_ebab !=nil {return _ebab ;};if _ebedg .IsHuffmanEncoded {if _ebab =_ebedg .readHuffmanFlags ();_ebab !=nil {return _ebab ;};};if _ebab =_ebedg .readUseRefinement ();_ebab !=nil {return _ebab ;
};if _ebab =_ebedg .readAmountOfSymbolInstances ();_ebab !=nil {return _ebab ;};if _ebab =_ebedg .getSymbols ();_ebab !=nil {return _ebab ;};if _ebab =_ebedg .computeSymbolCodeLength ();_ebab !=nil {return _ebab ;};if _ebab =_ebedg .checkInput ();_ebab !=nil {return _ebab ;
};_ed .Log .Trace ("\u0025\u0073",_ebedg .String ());return nil ;};func (_bceba *PageInformationSegment )readWidthAndHeight ()error {_gefd ,_cbaec :=_bceba ._gcgb .ReadBits (32);if _cbaec !=nil {return _cbaec ;};_bceba .PageBMWidth =int (_gefd &_c .MaxInt32 );
_gefd ,_cbaec =_bceba ._gcgb .ReadBits (32);if _cbaec !=nil {return _cbaec ;};_bceba .PageBMHeight =int (_gefd &_c .MaxInt32 );return nil ;};func (_bbf *HalftoneRegion )GetRegionInfo ()*RegionSegment {return _bbf .RegionSegment };func (_dcaa *TextRegion )GetRegionInfo ()*RegionSegment {return _dcaa .RegionInfo };
func (_dffa *PatternDictionary )extractPatterns (_eafa *_cab .Bitmap )error {var _eddf int ;_gdae :=make ([]*_cab .Bitmap ,_dffa .GrayMax +1);for _eddf <=int (_dffa .GrayMax ){_adf :=int (_dffa .HdpWidth )*_eddf ;_dbggfd :=_d .Rect (_adf ,0,_adf +int (_dffa .HdpWidth ),int (_dffa .HdpHeight ));
_gbda ,_fgad :=_cab .Extract (_dbggfd ,_eafa );if _fgad !=nil {return _fgad ;};_gdae [_eddf ]=_gbda ;_eddf ++;};_dffa .Patterns =_gdae ;return nil ;};func (_ddf *template1 )setIndex (_fdg *_a .DecoderStats ){_fdg .SetIndex (0x080)};func (_ecf *TextRegion )decodeStripT ()(_bgeda int64 ,_afge error ){if _ecf .IsHuffmanEncoded {if _ecf .SbHuffDT ==3{if _ecf ._ccda ==nil {var _baaba int ;
if _ecf .SbHuffFS ==3{_baaba ++;};if _ecf .SbHuffDS ==3{_baaba ++;};_ecf ._ccda ,_afge =_ecf .getUserTable (_baaba );if _afge !=nil {return 0,_afge ;};};_bgeda ,_afge =_ecf ._ccda .Decode (_ecf ._abfe );if _afge !=nil {return 0,_afge ;};}else {var _caag _ab .Tabler ;
_caag ,_afge =_ab .GetStandardTable (11+int (_ecf .SbHuffDT ));if _afge !=nil {return 0,_afge ;};_bgeda ,_afge =_caag .Decode (_ecf ._abfe );if _afge !=nil {return 0,_afge ;};};}else {var _agbgc int32 ;_agbgc ,_afge =_ecf ._aaf .DecodeInt (_ecf ._bacd );
if _afge !=nil {return 0,_afge ;};_bgeda =int64 (_agbgc );};_bgeda *=int64 (-_ecf .SbStrips );return _bgeda ,nil ;};func (_ecdb *TextRegion )InitEncode (globalSymbolsMap ,localSymbolsMap map[int ]int ,comps []int ,inLL *_cab .Points ,symbols *_cab .Bitmaps ,classIDs *_bd .IntSlice ,boxes *_cab .Boxes ,width ,height ,symBits int ){_ecdb .RegionInfo =&RegionSegment {BitmapWidth :uint32 (width ),BitmapHeight :uint32 (height )};
_ecdb ._gadd =globalSymbolsMap ;_ecdb ._bcbgd =localSymbolsMap ;_ecdb ._cbea =comps ;_ecdb ._eegf =inLL ;_ecdb ._egaf =symbols ;_ecdb ._bcefe =classIDs ;_ecdb ._egaff =boxes ;_ecdb ._decc =symBits ;};var _ templater =&template0 {};func (_gbc *TableSegment )HtOOB ()int32 {return _gbc ._ecea };
func (_gdd *GenericRefinementRegion )GetRegionInfo ()*RegionSegment {return _gdd .RegionInfo };type OrganizationType uint8 ;func (_dfde *SymbolDictionary )readRefinementAtPixels (_aegb int )error {_dfde .SdrATX =make ([]int8 ,_aegb );_dfde .SdrATY =make ([]int8 ,_aegb );
var (_fgcb byte ;_afgge error ;);for _fefa :=0;_fefa < _aegb ;_fefa ++{_fgcb ,_afgge =_dfde ._defe .ReadByte ();if _afgge !=nil {return _afgge ;};_dfde .SdrATX [_fefa ]=int8 (_fgcb );_fgcb ,_afgge =_dfde ._defe .ReadByte ();if _afgge !=nil {return _afgge ;
};_dfde .SdrATY [_fefa ]=int8 (_fgcb );};return nil ;};func (_dfa *GenericRegion )parseHeader ()(_afgd error ){_ed .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052I\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0050\u0061\u0072s\u0069\u006e\u0067\u0048\u0065\u0061\u0064e\u0072\u002e\u002e\u002e");
defer func (){if _afgd !=nil {_ed .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e]\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065r\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0077\u0069th\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u0025\u0076",_afgd );
}else {_ed .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049C\u002d\u0052\u0045G\u0049\u004f\u004e]\u0020\u0050a\u0072\u0073\u0069\u006e\u0067\u0048e\u0061de\u0072\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0053\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079\u002e\u002e\u002e");
};}();var (_dbec int ;_eaeb uint64 ;);if _afgd =_dfa .RegionSegment .parseHeader ();_afgd !=nil {return _afgd ;};if _ ,_afgd =_dfa ._cfb .ReadBits (3);_afgd !=nil {return _afgd ;};_dbec ,_afgd =_dfa ._cfb .ReadBit ();if _afgd !=nil {return _afgd ;};if _dbec ==1{_dfa .UseExtTemplates =true ;
};_dbec ,_afgd =_dfa ._cfb .ReadBit ();if _afgd !=nil {return _afgd ;};if _dbec ==1{_dfa .IsTPGDon =true ;};_eaeb ,_afgd =_dfa ._cfb .ReadBits (2);if _afgd !=nil {return _afgd ;};_dfa .GBTemplate =byte (_eaeb &0xf);_dbec ,_afgd =_dfa ._cfb .ReadBit ();
if _afgd !=nil {return _afgd ;};if _dbec ==1{_dfa .IsMMREncoded =true ;};if !_dfa .IsMMREncoded {_efge :=1;if _dfa .GBTemplate ==0{_efge =4;if _dfa .UseExtTemplates {_efge =12;};};if _afgd =_dfa .readGBAtPixels (_efge );_afgd !=nil {return _afgd ;};};if _afgd =_dfa .computeSegmentDataStructure ();
_afgd !=nil {return _afgd ;};_ed .Log .Trace ("\u0025\u0073",_dfa );return nil ;};func (_cbe *PageInformationSegment )encodeStripingInformation (_gdbb _ca .BinaryWriter )(_eag int ,_afc error ){const _cfda ="\u0065n\u0063\u006f\u0064\u0065S\u0074\u0072\u0069\u0070\u0069n\u0067I\u006ef\u006f\u0072\u006d\u0061\u0074\u0069\u006fn";
if !_cbe .IsStripe {if _eag ,_afc =_gdbb .Write ([]byte {0x00,0x00});_afc !=nil {return 0,_dg .Wrap (_afc ,_cfda ,"n\u006f\u0020\u0073\u0074\u0072\u0069\u0070\u0069\u006e\u0067");};return _eag ,nil ;};_bcffg :=make ([]byte ,2);_eg .BigEndian .PutUint16 (_bcffg ,_cbe .MaxStripeSize |1<<15);
if _eag ,_afc =_gdbb .Write (_bcffg );_afc !=nil {return 0,_dg .Wrapf (_afc ,_cfda ,"\u0073\u0074\u0072i\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0064",_cbe .MaxStripeSize );};return _eag ,nil ;};func (_aeeg *template0 )setIndex (_eae *_a .DecoderStats ){_eae .SetIndex (0x100)};
func (_gcedd *TextRegion )decodeID ()(int64 ,error ){if _gcedd .IsHuffmanEncoded {if _gcedd ._eegd ==nil {_bfec ,_eaafd :=_gcedd ._abfe .ReadBits (byte (_gcedd ._cdfff ));return int64 (_bfec ),_eaafd ;};return _gcedd ._eegd .Decode (_gcedd ._abfe );};return _gcedd ._aaf .DecodeIAID (uint64 (_gcedd ._cdfff ),_gcedd ._agffe );
};func (_dagc *SymbolDictionary )decodeAggregate (_fgde ,_bfad uint32 )error {var (_fega int64 ;_gabb error ;);if _dagc .IsHuffmanEncoded {_fega ,_gabb =_dagc .huffDecodeRefAggNInst ();if _gabb !=nil {return _gabb ;};}else {_gada ,_acff :=_dagc ._ggbg .DecodeInt (_dagc ._ggdaf );
if _acff !=nil {return _acff ;};_fega =int64 (_gada );};if _fega > 1{return _dagc .decodeThroughTextRegion (_fgde ,_bfad ,uint32 (_fega ));}else if _fega ==1{return _dagc .decodeRefinedSymbol (_fgde ,_bfad );};return nil ;};func (_ccga *PatternDictionary )readPatternWidthAndHeight ()error {_bbd ,_aebf :=_ccga ._fdbfa .ReadByte ();
if _aebf !=nil {return _aebf ;};_ccga .HdpWidth =_bbd ;_bbd ,_aebf =_ccga ._fdbfa .ReadByte ();if _aebf !=nil {return _aebf ;};_ccga .HdpHeight =_bbd ;return nil ;};func (_bdbe *Header )writeReferredToCount (_bbg _ca .BinaryWriter )(_bddb int ,_edbdf error ){const _cda ="w\u0072i\u0074\u0065\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0043ou\u006e\u0074";
_bdbe .RTSNumbers =make ([]int ,len (_bdbe .RTSegments ));for _aeag ,_dbggf :=range _bdbe .RTSegments {_bdbe .RTSNumbers [_aeag ]=int (_dbggf .SegmentNumber );};if len (_bdbe .RTSNumbers )<=4{var _fdad byte ;if len (_bdbe .RetainBits )>=1{_fdad =_bdbe .RetainBits [0];
};_fdad |=byte (len (_bdbe .RTSNumbers ))<<5;if _edbdf =_bbg .WriteByte (_fdad );_edbdf !=nil {return 0,_dg .Wrap (_edbdf ,_cda ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return 1,nil ;};_ccbe :=uint32 (len (_bdbe .RTSNumbers ));
_debc :=make ([]byte ,4+_bd .Ceil (len (_bdbe .RTSNumbers )+1,8));_ccbe |=0x7<<29;_eg .BigEndian .PutUint32 (_debc ,_ccbe );copy (_debc [1:],_bdbe .RetainBits );_bddb ,_edbdf =_bbg .Write (_debc );if _edbdf !=nil {return 0,_dg .Wrap (_edbdf ,_cda ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};return _bddb ,nil ;};func (_cdg *GenericRegion )setParametersMMR (_dgbb bool ,_cbdc ,_def int64 ,_ebfb ,_cag uint32 ,_gegd byte ,_bbbe ,_fbd bool ,_dcd ,_eced []int8 ){_cdg .DataOffset =_cbdc ;_cdg .DataLength =_def ;_cdg .RegionSegment =&RegionSegment {};
_cdg .RegionSegment .BitmapHeight =_ebfb ;_cdg .RegionSegment .BitmapWidth =_cag ;_cdg .GBTemplate =_gegd ;_cdg .IsMMREncoded =_dgbb ;_cdg .IsTPGDon =_bbbe ;_cdg .GBAtX =_dcd ;_cdg .GBAtY =_eced ;};func (_abecd *TextRegion )readAmountOfSymbolInstances ()error {_ceeb ,_dabg :=_abecd ._abfe .ReadBits (32);
if _dabg !=nil {return _dabg ;};_abecd .NumberOfSymbolInstances =uint32 (_ceeb &_c .MaxUint32 );_gcdf :=_abecd .RegionInfo .BitmapWidth *_abecd .RegionInfo .BitmapHeight ;if _gcdf < _abecd .NumberOfSymbolInstances {_ed .Log .Debug ("\u004c\u0069\u006d\u0069t\u0069\u006e\u0067\u0020t\u0068\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020d\u0065\u0063\u006f\u0064e\u0064\u0020\u0073\u0079m\u0062\u006f\u006c\u0020\u0069n\u0073\u0074\u0061\u006e\u0063\u0065\u0073 \u0074\u006f\u0020\u006f\u006ee\u0020\u0070\u0065\u0072\u0020\u0070\u0069\u0078\u0065l\u0020\u0028\u0020\u0025\u0064\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064\u0020\u006f\u0066\u0020\u0025\u0064\u0029",_gcdf ,_abecd .NumberOfSymbolInstances );
_abecd .NumberOfSymbolInstances =_gcdf ;};return nil ;};func (_ececf *TextRegion )checkInput ()error {const _gfc ="\u0063\u0068\u0065\u0063\u006b\u0049\u006e\u0070\u0075\u0074";if !_ececf .UseRefinement {if _ececf .SbrTemplate !=0{_ed .Log .Debug ("\u0053\u0062\u0072Te\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");
_ececf .SbrTemplate =0;};};if _ececf .SbHuffFS ==2||_ececf .SbHuffRDWidth ==2||_ececf .SbHuffRDHeight ==2||_ececf .SbHuffRDX ==2||_ececf .SbHuffRDY ==2{return _dg .Error (_gfc ,"h\u0075\u0066\u0066\u006d\u0061\u006e \u0066\u006c\u0061\u0067\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064");
};if !_ececf .UseRefinement {if _ececf .SbHuffRSize !=0{_ed .Log .Debug ("\u0053\u0062\u0048uf\u0066\u0052\u0053\u0069\u007a\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_ececf .SbHuffRSize =0;};if _ececf .SbHuffRDY !=0{_ed .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044Y\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");
_ececf .SbHuffRDY =0;};if _ececf .SbHuffRDX !=0{_ed .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044X\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");_ececf .SbHuffRDX =0;};if _ececf .SbHuffRDWidth !=0{_ed .Log .Debug ("\u0053b\u0048\u0075\u0066\u0066R\u0044\u0057\u0069\u0064\u0074h\u0020s\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u00200");
_ececf .SbHuffRDWidth =0;};if _ececf .SbHuffRDHeight !=0{_ed .Log .Debug ("\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069g\u0068\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020b\u0065\u0020\u0030");_ececf .SbHuffRDHeight =0;};
};return nil ;};func (_dedb *SymbolDictionary )decodeHeightClassDeltaHeight ()(int64 ,error ){if _dedb .IsHuffmanEncoded {return _dedb .decodeHeightClassDeltaHeightWithHuffman ();};_cdd ,_gabc :=_dedb ._ggbg .DecodeInt (_dedb ._acfd );if _gabc !=nil {return 0,_gabc ;
};return int64 (_cdd ),nil ;};func (_af *EndOfStripe )Init (h *Header ,r _ca .StreamReader )error {_af ._be =r ;return _af .parseHeader (h ,r );};func (_aabd *SymbolDictionary )checkInput ()error {if _aabd .SdHuffDecodeHeightSelection ==2{_ed .Log .Debug ("\u0053\u0079\u006d\u0062\u006fl\u0020\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u0053e\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0070\u0065r\u006d\u0069\u0074\u0074\u0065\u0064",_aabd .SdHuffDecodeHeightSelection );
};if _aabd .SdHuffDecodeWidthSelection ==2{_ed .Log .Debug ("\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0057\u0069\u0064t\u0068\u0020\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061l\u0075\u0065\u0020\u006e\u006f\u0074 \u0070\u0065r\u006d\u0069t\u0074e\u0064",_aabd .SdHuffDecodeWidthSelection );
};if _aabd .IsHuffmanEncoded {if _aabd .SdTemplate !=0{_ed .Log .Debug ("\u0053\u0044T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e \u0030\u0029",_aabd .SdTemplate );
};if !_aabd .UseRefinementAggregation {if !_aabd .UseRefinementAggregation {if _aabd ._deeeg {_ed .Log .Debug ("\u0049\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074ex\u0074\u0052\u0065\u0074\u0061\u0069n\u0065\u0064\u0020\u003d\u0020\u0074\u0072\u0075\u0065\u0020\u0028\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0066\u0061\u006cs\u0065\u0029");
_aabd ._deeeg =false ;};if _aabd ._gacbf {_ed .Log .Debug ("\u0069s\u0043\u006fd\u0069\u006e\u0067\u0043o\u006e\u0074\u0065x\u0074\u0055\u0073\u0065\u0064\u0020\u003d\u0020\u0074ru\u0065\u0020\u0028s\u0068\u006fu\u006c\u0064\u0020\u0062\u0065\u0020f\u0061\u006cs\u0065\u0029");
_aabd ._gacbf =false ;};};};}else {if _aabd .SdHuffBMSizeSelection !=0{_ed .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066B\u004d\u0053\u0069\u007a\u0065\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_aabd .SdHuffBMSizeSelection =0;};if _aabd .SdHuffDecodeWidthSelection !=0{_ed .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068\u0053\u0065\u006c\u0065\u0063\u0074\u0069o\u006e\u0020\u0073\u0068\u006fu\u006c\u0064 \u0062\u0065\u0020\u0030");
_aabd .SdHuffDecodeWidthSelection =0;};if _aabd .SdHuffDecodeHeightSelection !=0{_ed .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0048e\u0069\u0067\u0068\u0074\u0053\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_aabd .SdHuffDecodeHeightSelection =0;};};if !_aabd .UseRefinementAggregation {if _aabd .SdrTemplate !=0{_ed .Log .Debug ("\u0053\u0044\u0052\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u003d\u0020\u0025\u0064\u0020\u0028s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_aabd .SdrTemplate );
_aabd .SdrTemplate =0;};};if !_aabd .IsHuffmanEncoded ||!_aabd .UseRefinementAggregation {if _aabd .SdHuffAggInstanceSelection {_ed .Log .Debug ("\u0053d\u0048\u0075f\u0066\u0041\u0067g\u0049\u006e\u0073\u0074\u0061\u006e\u0063e\u0053\u0065\u006c\u0065\u0063\u0074i\u006f\u006e\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_aabd .SdHuffAggInstanceSelection );
};};return nil ;};func (_dabb *TextRegion )computeSymbolCodeLength ()error {if _dabb .IsHuffmanEncoded {return _dabb .symbolIDCodeLengths ();};_dabb ._cdfff =int8 (_c .Ceil (_c .Log (float64 (_dabb .NumberOfSymbols ))/_c .Log (2)));return nil ;};func (_dfe *HalftoneRegion )computeSegmentDataStructure ()error {_dfe .DataOffset =_dfe ._ggeb .StreamPosition ();
_dfe .DataHeaderLength =_dfe .DataOffset -_dfe .DataHeaderOffset ;_dfe .DataLength =int64 (_dfe ._ggeb .Length ())-_dfe .DataHeaderLength ;return nil ;};func (_gcbg *PageInformationSegment )Size ()int {return 19};func (_afe *GenericRefinementRegion )getGrReference ()(*_cab .Bitmap ,error ){segments :=_afe ._egb .RTSegments ;
if len (segments )==0{return nil ,_ea .New ("\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0065\u0078is\u0074\u0073");};_eaf ,_ede :=segments [0].GetSegmentData ();
if _ede !=nil {return nil ,_ede ;};_ba ,_eac :=_eaf .(Regioner );if !_eac {return nil ,_bg .Errorf ("\u0072\u0065\u0066\u0065\u0072r\u0065\u0064\u0020\u0074\u006f\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_eaf );
};return _ba .GetRegionBitmap ();};func (_dbacb *RegionSegment )parseHeader ()error {const _febb ="p\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072";_ed .Log .Trace ("\u005b\u0052\u0045\u0047I\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002dH\u0045A\u0044\u0045\u0052\u005d\u0020\u0042\u0065g\u0069\u006e");
defer func (){_ed .Log .Trace ("\u005b\u0052\u0045G\u0049\u004f\u004e\u005d[\u0050\u0041\u0052\u0053\u0045\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");}();_acde ,_bdgc :=_dbacb ._cgga .ReadBits (32);
if _bdgc !=nil {return _dg .Wrap (_bdgc ,_febb ,"\u0077\u0069\u0064t\u0068");};_dbacb .BitmapWidth =uint32 (_acde &_c .MaxUint32 );_acde ,_bdgc =_dbacb ._cgga .ReadBits (32);if _bdgc !=nil {return _dg .Wrap (_bdgc ,_febb ,"\u0068\u0065\u0069\u0067\u0068\u0074");
};_dbacb .BitmapHeight =uint32 (_acde &_c .MaxUint32 );_acde ,_bdgc =_dbacb ._cgga .ReadBits (32);if _bdgc !=nil {return _dg .Wrap (_bdgc ,_febb ,"\u0078\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_dbacb .XLocation =uint32 (_acde &_c .MaxUint32 );
_acde ,_bdgc =_dbacb ._cgga .ReadBits (32);if _bdgc !=nil {return _dg .Wrap (_bdgc ,_febb ,"\u0079\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_dbacb .YLocation =uint32 (_acde &_c .MaxUint32 );if _ ,_bdgc =_dbacb ._cgga .ReadBits (5);_bdgc !=nil {return _dg .Wrap (_bdgc ,_febb ,"\u0064i\u0072\u0079\u0020\u0072\u0065\u0061d");
};if _bdgc =_dbacb .readCombinationOperator ();_bdgc !=nil {return _dg .Wrap (_bdgc ,_febb ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};return nil ;};func (_fc *GenericRefinementRegion )decodeOptimized (_fb ,_beb ,_bae ,_bag ,_eaa ,_beg ,_cc int )error {var (_gc error ;
_cce int ;_ce int ;);_fe :=_fb -int (_fc .ReferenceDY );if _dfb :=int (-_fc .ReferenceDX );_dfb > 0{_cce =_dfb ;};_aab :=_fc .ReferenceBitmap .GetByteIndex (_cce ,_fe );if _fc .ReferenceDX > 0{_ce =int (_fc .ReferenceDX );};_dag :=_fc .RegionBitmap .GetByteIndex (_ce ,_fb );
switch _fc .TemplateID {case 0:_gc =_fc .decodeTemplate (_fb ,_beb ,_bae ,_bag ,_eaa ,_beg ,_cc ,_dag ,_fe ,_aab ,_fc ._dad );case 1:_gc =_fc .decodeTemplate (_fb ,_beb ,_bae ,_bag ,_eaa ,_beg ,_cc ,_dag ,_fe ,_aab ,_fc ._fd );};return _gc ;};func (_ffdf *HalftoneRegion )checkInput ()error {if _ffdf .IsMMREncoded {if _ffdf .HTemplate !=0{_ed .Log .Debug ("\u0048\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030",_ffdf .HTemplate );
};if _ffdf .HSkipEnabled {_ed .Log .Debug ("\u0048\u0053\u006b\u0069\u0070\u0045\u006e\u0061\u0062\u006c\u0065\u0064\u0020\u0030\u0020\u0025\u0076\u0020(\u0073\u0068\u006f\u0075\u006c\u0064\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u0029",_ffdf .HSkipEnabled );
};};return nil ;};func (_baab *SymbolDictionary )setInSyms ()error {if _baab .Header .RTSegments !=nil {return _baab .retrieveImportSymbols ();};_baab ._gbae =make ([]*_cab .Bitmap ,0);return nil ;};func (_ccae *HalftoneRegion )renderPattern (_gfe [][]int )(_cgd error ){var _gcda ,_aeaa int ;
for _gfae :=0;_gfae < int (_ccae .HGridHeight );_gfae ++{for _fbda :=0;_fbda < int (_ccae .HGridWidth );_fbda ++{_gcda =_ccae .computeX (_gfae ,_fbda );_aeaa =_ccae .computeY (_gfae ,_fbda );_cgfd :=_ccae .Patterns [_gfe [_gfae ][_fbda ]];if _cgd =_cab .Blit (_cgfd ,_ccae .HalftoneRegionBitmap ,_gcda +int (_ccae .HGridX ),_aeaa +int (_ccae .HGridY ),_ccae .CombinationOperator );
_cgd !=nil {return _cgd ;};};};return nil ;};func (_ecd *SymbolDictionary )encodeSymbols (_bfcd _ca .BinaryWriter )(_effa int ,_fcae error ){const _geeg ="\u0065\u006e\u0063o\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c";_adbd :=_dd .New ();_adbd .Init ();
_eafb ,_fcae :=_ecd ._gdac .SelectByIndexes (_ecd ._dbcc );if _fcae !=nil {return 0,_dg .Wrap (_fcae ,_geeg ,"\u0069n\u0069\u0074\u0069\u0061\u006c");};_bddd :=map[*_cab .Bitmap ]int {};for _abbf ,_fcce :=range _eafb .Values {_bddd [_fcce ]=_abbf ;};_eafb .SortByHeight ();
var _bedf ,_becga int ;_eega ,_fcae :=_eafb .GroupByHeight ();if _fcae !=nil {return 0,_dg .Wrap (_fcae ,_geeg ,"");};for _ ,_gdge :=range _eega .Values {_bcdf :=_gdge .Values [0].Height ;_cfeb :=_bcdf -_bedf ;if _fcae =_adbd .EncodeInteger (_dd .IADH ,_cfeb );
_fcae !=nil {return 0,_dg .Wrapf (_fcae ,_geeg ,"\u0049\u0041\u0044\u0048\u0020\u0066\u006f\u0072\u0020\u0064\u0068\u003a \u0027\u0025\u0064\u0027",_cfeb );};_bedf =_bcdf ;_bfcb ,_dbcd :=_gdge .GroupByWidth ();if _dbcd !=nil {return 0,_dg .Wrapf (_dbcd ,_geeg ,"\u0068\u0065\u0069g\u0068\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_bcdf );
};var _ffab int ;for _ ,_cfebe :=range _bfcb .Values {for _ ,_aebc :=range _cfebe .Values {_agcf :=_aebc .Width ;_gddf :=_agcf -_ffab ;if _dbcd =_adbd .EncodeInteger (_dd .IADW ,_gddf );_dbcd !=nil {return 0,_dg .Wrapf (_dbcd ,_geeg ,"\u0049\u0041\u0044\u0057\u0020\u0066\u006f\u0072\u0020\u0064\u0077\u003a \u0027\u0025\u0064\u0027",_gddf );
};_ffab +=_gddf ;if _dbcd =_adbd .EncodeBitmap (_aebc ,false );_dbcd !=nil {return 0,_dg .Wrapf (_dbcd ,_geeg ,"H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u0020W\u0069\u0064\u0074\u0068: \u0025\u0064",_bcdf ,_agcf );};_ebdg :=_bddd [_aebc ];_ecd ._caeda [_ebdg ]=_becga ;
_becga ++;};};if _dbcd =_adbd .EncodeOOB (_dd .IADW );_dbcd !=nil {return 0,_dg .Wrap (_dbcd ,_geeg ,"\u0049\u0041\u0044\u0057");};};if _fcae =_adbd .EncodeInteger (_dd .IAEX ,0);_fcae !=nil {return 0,_dg .Wrap (_fcae ,_geeg ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};if _fcae =_adbd .EncodeInteger (_dd .IAEX ,len (_ecd ._dbcc ));_fcae !=nil {return 0,_dg .Wrap (_fcae ,_geeg ,"\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0073\u0079m\u0062\u006f\u006c\u0073");};_adbd .Final ();_gcbf ,_fcae :=_adbd .WriteTo (_bfcd );
if _fcae !=nil {return 0,_dg .Wrap (_fcae ,_geeg ,"\u0077\u0072i\u0074\u0069\u006e\u0067 \u0065\u006ec\u006f\u0064\u0065\u0072\u0020\u0063\u006f\u006et\u0065\u0078\u0074\u0020\u0074\u006f\u0020\u0027\u0077\u0027\u0020\u0077r\u0069\u0074\u0065\u0072");};
return int (_gcbf ),nil ;};func (_abbcc *TableSegment )StreamReader ()_ca .StreamReader {return _abbcc ._bgca };type Segmenter interface{Init (_dcea *Header ,_adagb _ca .StreamReader )error ;};func (_agcg *GenericRefinementRegion )getPixel (_cegb *_cab .Bitmap ,_bebf ,_aba int )int {if _bebf < 0||_bebf >=_cegb .Width {return 0;
};if _aba < 0||_aba >=_cegb .Height {return 0;};if _cegb .GetPixel (_bebf ,_aba ){return 1;};return 0;};func (_effb *GenericRegion )decodeTemplate0a (_cecc ,_gce ,_dge int ,_aceg ,_acef int )(_bcda error ){const _adb ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0061";
var (_aca ,_cadb int ;_fea ,_bfgc int ;_agb byte ;_cdcb int ;);if _cecc >=1{_agb ,_bcda =_effb .Bitmap .GetByte (_acef );if _bcda !=nil {return _dg .Wrap (_bcda ,_adb ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_fea =int (_agb );};if _cecc >=2{_agb ,_bcda =_effb .Bitmap .GetByte (_acef -_effb .Bitmap .RowStride );
if _bcda !=nil {return _dg .Wrap (_bcda ,_adb ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_bfgc =int (_agb )<<6;};_aca =(_fea &0xf0)|(_bfgc &0x3800);for _cacb :=0;_cacb < _dge ;_cacb =_cdcb {var (_gaga byte ;_edbd int ;);_cdcb =_cacb +8;if _caed :=_gce -_cacb ;
_caed > 8{_edbd =8;}else {_edbd =_caed ;};if _cecc > 0{_fea <<=8;if _cdcb < _gce {_agb ,_bcda =_effb .Bitmap .GetByte (_acef +1);if _bcda !=nil {return _dg .Wrap (_bcda ,_adb ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_fea |=int (_agb );};};
if _cecc > 1{_aabg :=_acef -_effb .Bitmap .RowStride +1;_bfgc <<=8;if _cdcb < _gce {_agb ,_bcda =_effb .Bitmap .GetByte (_aabg );if _bcda !=nil {return _dg .Wrap (_bcda ,_adb ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_bfgc |=int (_agb )<<6;
}else {_bfgc |=0;};};for _dbfb :=0;_dbfb < _edbd ;_dbfb ++{_bdfg :=uint (7-_dbfb );if _effb ._cad {_cadb =_effb .overrideAtTemplate0a (_aca ,_cacb +_dbfb ,_cecc ,int (_gaga ),_dbfb ,int (_bdfg ));_effb ._cebb .SetIndex (int32 (_cadb ));}else {_effb ._cebb .SetIndex (int32 (_aca ));
};var _ega int ;_ega ,_bcda =_effb ._ace .DecodeBit (_effb ._cebb );if _bcda !=nil {return _dg .Wrap (_bcda ,_adb ,"");};_gaga |=byte (_ega )<<_bdfg ;_aca =((_aca &0x7bf7)<<1)|_ega |((_fea >>_bdfg )&0x10)|((_bfgc >>_bdfg )&0x800);};if _deba :=_effb .Bitmap .SetByte (_aceg ,_gaga );
_deba !=nil {return _dg .Wrap (_deba ,_adb ,"");};_aceg ++;_acef ++;};return nil ;};func (_ffgf *Header )readSegmentDataLength (_dgff _ca .StreamReader )(_fbfa error ){_ffgf .SegmentDataLength ,_fbfa =_dgff .ReadBits (32);if _fbfa !=nil {return _fbfa ;
};_ffgf .SegmentDataLength &=_c .MaxInt32 ;return nil ;};func (_acd *HalftoneRegion )combineGrayscalePlanes (_gcb []*_cab .Bitmap ,_edf int )error {_ebgf :=0;for _dda :=0;_dda < _gcb [_edf ].Height ;_dda ++{for _dega :=0;_dega < _gcb [_edf ].Width ;_dega +=8{_acga ,_fgcf :=_gcb [_edf +1].GetByte (_ebgf );
if _fgcf !=nil {return _fgcf ;};_aace ,_fgcf :=_gcb [_edf ].GetByte (_ebgf );if _fgcf !=nil {return _fgcf ;};_fgcf =_gcb [_edf ].SetByte (_ebgf ,_cab .CombineBytes (_aace ,_acga ,_cab .CmbOpXor ));if _fgcf !=nil {return _fgcf ;};_ebgf ++;};};return nil ;
};func (_gagc *GenericRegion )InitEncode (bm *_cab .Bitmap ,xLoc ,yLoc ,template int ,duplicateLineRemoval bool )error {const _ggad ="\u0047e\u006e\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069\u006f\u006e.\u0049\u006e\u0069\u0074\u0045\u006e\u0063\u006f\u0064\u0065";
if bm ==nil {return _dg .Error (_ggad ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if xLoc < 0||yLoc < 0{return _dg .Error (_ggad ,"\u0078\u0020\u0061\u006e\u0064\u0020\u0079\u0020\u006c\u006f\u0063\u0061\u0074i\u006f\u006e\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074h\u0061\u006e\u0020\u0030");
};_gagc .Bitmap =bm ;_gagc .GBTemplate =byte (template );switch _gagc .GBTemplate {case 0:_gagc .GBAtX =[]int8 {3,-3,2,-2};_gagc .GBAtY =[]int8 {-1,-1,-2,-2};case 1:_gagc .GBAtX =[]int8 {3};_gagc .GBAtY =[]int8 {-1};case 2,3:_gagc .GBAtX =[]int8 {2};_gagc .GBAtY =[]int8 {-1};
default:return _dg .Errorf (_ggad ,"\u0070\u0072o\u0076\u0069\u0064\u0065\u0064 \u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u002c\u0032\u002c\u0033\u007d",template );
};_gagc .RegionSegment =&RegionSegment {BitmapHeight :uint32 (bm .Height ),BitmapWidth :uint32 (bm .Width ),XLocation :uint32 (xLoc ),YLocation :uint32 (yLoc )};_gagc .IsTPGDon =duplicateLineRemoval ;return nil ;};func (_eafaa *PatternDictionary )readIsMMREncoded ()error {_bga ,_efdg :=_eafaa ._fdbfa .ReadBit ();
if _efdg !=nil {return _efdg ;};if _bga !=0{_eafaa .IsMMREncoded =true ;};return nil ;};func (_ffd *GenericRegion )decodeLine (_bfd ,_beda ,_cedd int )error {const _acbc ="\u0064\u0065\u0063\u006f\u0064\u0065\u004c\u0069\u006e\u0065";_gfb :=_ffd .Bitmap .GetByteIndex (0,_bfd );
_fffe :=_gfb -_ffd .Bitmap .RowStride ;switch _ffd .GBTemplate {case 0:if !_ffd .UseExtTemplates {return _ffd .decodeTemplate0a (_bfd ,_beda ,_cedd ,_gfb ,_fffe );};return _ffd .decodeTemplate0b (_bfd ,_beda ,_cedd ,_gfb ,_fffe );case 1:return _ffd .decodeTemplate1 (_bfd ,_beda ,_cedd ,_gfb ,_fffe );
case 2:return _ffd .decodeTemplate2 (_bfd ,_beda ,_cedd ,_gfb ,_fffe );case 3:return _ffd .decodeTemplate3 (_bfd ,_beda ,_cedd ,_gfb ,_fffe );};return _dg .Errorf (_acbc ,"\u0069\u006e\u0076a\u006c\u0069\u0064\u0020G\u0042\u0054\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u003a\u0020\u0025\u0064",_ffd .GBTemplate );
};func (_feca *TableSegment )HtRS ()int32 {return _feca ._efbf };func (_begb *PageInformationSegment )readContainsRefinement ()error {_ggca ,_eeege :=_begb ._gcgb .ReadBit ();if _eeege !=nil {return _eeege ;};if _ggca ==1{_begb ._abbc =true ;};return nil ;
};func (_dcg *SymbolDictionary )readNumberOfExportedSymbols ()error {_gfbe ,_bgbe :=_dcg ._defe .ReadBits (32);if _bgbe !=nil {return _bgbe ;};_dcg .NumberOfExportedSymbols =uint32 (_gfbe &_c .MaxUint32 );return nil ;};func NewRegionSegment (r _ca .StreamReader )*RegionSegment {return &RegionSegment {_cgga :r }};
func (_dbdf *TextRegion )getSymbols ()error {if _dbdf .Header .RTSegments !=nil {return _dbdf .initSymbols ();};return nil ;};func (_bggb *Header )String ()string {_fdbf :=&_b .Builder {};_fdbf .WriteString ("\u000a[\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045A\u0044\u0045\u0052\u005d\u000a");
_fdbf .WriteString (_bg .Sprintf ("\t\u002d\u0020\u0053\u0065gm\u0065n\u0074\u004e\u0075\u006d\u0062e\u0072\u003a\u0020\u0025\u0076\u000a",_bggb .SegmentNumber ));_fdbf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020T\u0079\u0070\u0065\u003a\u0020\u0025\u0076\u000a",_bggb .Type ));
_fdbf .WriteString (_bg .Sprintf ("\u0009-\u0020R\u0065\u0074\u0061\u0069\u006eF\u006c\u0061g\u003a\u0020\u0025\u0076\u000a",_bggb .RetainFlag ));_fdbf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020Pa\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_bggb .PageAssociation ));
_fdbf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0050\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074i\u006fn\u0046\u0069\u0065\u006c\u0064\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_bggb .PageAssociationFieldSize ));
_fdbf .WriteString ("\u0009-\u0020R\u0054\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u0053\u003a\u000a");for _ ,_fccd :=range _bggb .RTSNumbers {_fdbf .WriteString (_bg .Sprintf ("\u0009\t\u002d\u0020\u0025\u0064\u000a",_fccd ));};_fdbf .WriteString (_bg .Sprintf ("\t\u002d \u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0065n\u0067\u0074\u0068\u003a %\u0076\u000a",_bggb .HeaderLength ));
_fdbf .WriteString (_bg .Sprintf ("\u0009-\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061L\u0065n\u0067\u0074\u0068\u003a\u0020\u0025\u0076\n",_bggb .SegmentDataLength ));_fdbf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074D\u0061\u0074\u0061\u0053\u0074\u0061\u0072t\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0076\u000a",_bggb .SegmentDataStartOffset ));
return _fdbf .String ();};func (_ebfc *SymbolDictionary )String ()string {_fabf :=&_b .Builder {};_fabf .WriteString ("\n\u005b\u0053\u0059\u004dBO\u004c-\u0044\u0049\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u000a");_fabf .WriteString (_bg .Sprintf ("\u0009-\u0020S\u0064\u0072\u0054\u0065\u006dp\u006c\u0061t\u0065\u0020\u0025\u0076\u000a",_ebfc .SdrTemplate ));
_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0025\u0076\u000a",_ebfc .SdTemplate ));_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006eg\u0043\u006f\u006e\u0074\u0065\u0078\u0074R\u0065\u0074\u0061\u0069\u006e\u0065\u0064\u0020\u0025\u0076\u000a",_ebfc ._deeeg ));
_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074\u0065\u0078\u0074\u0055\u0073\u0065\u0064 \u0025\u0076\u000a",_ebfc ._gacbf ));_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_ebfc .SdHuffAggInstanceSelection ));
_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053d\u0048\u0075\u0066\u0066\u0042\u004d\u0053\u0069\u007a\u0065S\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020%\u0076\u000a",_ebfc .SdHuffBMSizeSelection ));_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_ebfc .SdHuffDecodeWidthSelection ));
_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020Sd\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064e\u0048e\u0069g\u0068t\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_ebfc .SdHuffDecodeHeightSelection ));_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020U\u0073\u0065\u0052\u0065f\u0069\u006e\u0065\u006d\u0065\u006e\u0074A\u0067\u0067\u0072\u0065\u0067\u0061\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_ebfc .UseRefinementAggregation ));
_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020is\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0065\u0064\u0020\u0025\u0076\u000a",_ebfc .IsHuffmanEncoded ));_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_ebfc .SdATX ));
_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_ebfc .SdATY ));_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_ebfc .SdrATX ));
_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_ebfc .SdrATY ));_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u004e\u0075\u006d\u0062\u0065\u0072\u004ff\u0045\u0078\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_ebfc .NumberOfExportedSymbols ));
_fabf .WriteString (_bg .Sprintf ("\u0009-\u0020\u004e\u0075\u006db\u0065\u0072\u004f\u0066\u004ee\u0077S\u0079m\u0062\u006f\u006c\u0073\u0020\u0025\u0076\n",_ebfc .NumberOfNewSymbols ));_fabf .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u004ff\u0049\u006d\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_ebfc ._cgeg ));
_fabf .WriteString (_bg .Sprintf ("\u0009\u002d \u006e\u0075\u006d\u0062\u0065\u0072\u004f\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0064\u0053\u0079\u006d\u0062\u006f\u006c\u0073 %\u0076\u000a",_ebfc ._edage ));return _fabf .String ();};func (_egea *PageInformationSegment )readRequiresAuxiliaryBuffer ()error {_fagg ,_aegd :=_egea ._gcgb .ReadBit ();
if _aegd !=nil {return _aegd ;};if _fagg ==1{_egea ._daed =true ;};return nil ;};func (_abed *TextRegion )decodeRdw ()(int64 ,error ){const _eccdf ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064w";if _abed .IsHuffmanEncoded {if _abed .SbHuffRDWidth ==3{if _abed ._gdag ==nil {var (_agcgf int ;
_cbed error ;);if _abed .SbHuffFS ==3{_agcgf ++;};if _abed .SbHuffDS ==3{_agcgf ++;};if _abed .SbHuffDT ==3{_agcgf ++;};_abed ._gdag ,_cbed =_abed .getUserTable (_agcgf );if _cbed !=nil {return 0,_dg .Wrap (_cbed ,_eccdf ,"");};};return _abed ._gdag .Decode (_abed ._abfe );
};_cbef ,_gccaa :=_ab .GetStandardTable (14+int (_abed .SbHuffRDWidth ));if _gccaa !=nil {return 0,_dg .Wrap (_gccaa ,_eccdf ,"");};return _cbef .Decode (_abed ._abfe );};_eecf ,_fccfb :=_abed ._aaf .DecodeInt (_abed ._ccgad );if _fccfb !=nil {return 0,_dg .Wrap (_fccfb ,_eccdf ,"");
};return int64 (_eecf ),nil ;};type template1 struct{};func (_bggg *SymbolDictionary )decodeThroughTextRegion (_dac ,_cada ,_ecde uint32 )error {if _bggg ._daea ==nil {_bggg ._daea =_bbda (_bggg ._defe ,nil );_bggg ._daea .setContexts (_bggg ._abbe ,_a .NewStats (512,1),_a .NewStats (512,1),_a .NewStats (512,1),_a .NewStats (512,1),_bggg ._eafd ,_a .NewStats (512,1),_a .NewStats (512,1),_a .NewStats (512,1),_a .NewStats (512,1));
};if _abag :=_bggg .setSymbolsArray ();_abag !=nil {return _abag ;};_bggg ._daea .setParameters (_bggg ._ggbg ,_bggg .IsHuffmanEncoded ,true ,_dac ,_cada ,_ecde ,1,_bggg ._cgeg +_bggg ._edage ,0,0,0,1,0,0,0,0,0,0,0,0,0,_bggg .SdrTemplate ,_bggg .SdrATX ,_bggg .SdrATY ,_bggg ._ecec ,_bggg ._cccf );
return _bggg .addSymbol (_bggg ._daea );};func (_ffg *HalftoneRegion )GetRegionBitmap ()(*_cab .Bitmap ,error ){if _ffg .HalftoneRegionBitmap !=nil {return _ffg .HalftoneRegionBitmap ,nil ;};var _acaf error ;_ffg .HalftoneRegionBitmap =_cab .New (int (_ffg .RegionSegment .BitmapWidth ),int (_ffg .RegionSegment .BitmapHeight ));
if _ffg .Patterns ==nil ||len (_ffg .Patterns )==0{_ffg .Patterns ,_acaf =_ffg .GetPatterns ();if _acaf !=nil {return nil ,_acaf ;};};if _ffg .HDefaultPixel ==1{_ffg .HalftoneRegionBitmap .SetDefaultPixel ();};_ebad :=_c .Ceil (_c .Log (float64 (len (_ffg .Patterns )))/_c .Log (2));
_fdd :=int (_ebad );var _edg [][]int ;_edg ,_acaf =_ffg .grayScaleDecoding (_fdd );if _acaf !=nil {return nil ,_acaf ;};if _acaf =_ffg .renderPattern (_edg );_acaf !=nil {return nil ,_acaf ;};return _ffg .HalftoneRegionBitmap ,nil ;};var _ SegmentEncoder =&RegionSegment {};
func (_eafgd *PageInformationSegment )readCombinationOperator ()error {_cacg ,_fffb :=_eafgd ._gcgb .ReadBits (2);if _fffb !=nil {return _fffb ;};_eafgd ._aacgd =_cab .CombinationOperator (int (_cacg ));return nil ;};func (_fbea *Header )writeSegmentNumber (_dbfdb _ca .BinaryWriter )(_efcd int ,_gdbd error ){_aage :=make ([]byte ,4);
_eg .BigEndian .PutUint32 (_aage ,_fbea .SegmentNumber );if _efcd ,_gdbd =_dbfdb .Write (_aage );_gdbd !=nil {return 0,_dg .Wrap (_gdbd ,"\u0048e\u0061\u0064\u0065\u0072.\u0077\u0072\u0069\u0074\u0065S\u0065g\u006de\u006e\u0074\u004e\u0075\u006d\u0062\u0065r","");
};return _efcd ,nil ;};func (_gacb *HalftoneRegion )grayScaleDecoding (_bebc int )([][]int ,error ){var (_ecb []int8 ;_dedg []int8 ;);if !_gacb .IsMMREncoded {_ecb =make ([]int8 ,4);_dedg =make ([]int8 ,4);if _gacb .HTemplate <=1{_ecb [0]=3;}else if _gacb .HTemplate >=2{_ecb [0]=2;
};_dedg [0]=-1;_ecb [1]=-3;_dedg [1]=-1;_ecb [2]=2;_dedg [2]=-2;_ecb [3]=-2;_dedg [3]=-2;};_fdab :=make ([]*_cab .Bitmap ,_bebc );_gbdf :=NewGenericRegion (_gacb ._ggeb );_gbdf .setParametersMMR (_gacb .IsMMREncoded ,_gacb .DataOffset ,_gacb .DataLength ,_gacb .HGridHeight ,_gacb .HGridWidth ,_gacb .HTemplate ,false ,_gacb .HSkipEnabled ,_ecb ,_dedg );
_cgf :=_bebc -1;var _dab error ;_fdab [_cgf ],_dab =_gbdf .GetRegionBitmap ();if _dab !=nil {return nil ,_dab ;};for _cgf > 0{_cgf --;_gbdf .Bitmap =nil ;_fdab [_cgf ],_dab =_gbdf .GetRegionBitmap ();if _dab !=nil {return nil ,_dab ;};if _dab =_gacb .combineGrayscalePlanes (_fdab ,_cgf );
_dab !=nil {return nil ,_dab ;};};return _gacb .computeGrayScalePlanes (_fdab ,_bebc );};func (_ada *GenericRegion )Encode (w _ca .BinaryWriter )(_bgb int ,_egbc error ){const _fcd ="G\u0065n\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069o\u006e\u002e\u0045\u006eco\u0064\u0065";
if _ada .Bitmap ==nil {return 0,_dg .Error (_fcd ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};_dfbf ,_egbc :=_ada .RegionSegment .Encode (w );if _egbc !=nil {return 0,_dg .Wrap (_egbc ,_fcd ,"\u0052\u0065\u0067\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_bgb +=_dfbf ;if _egbc =w .SkipBits (4);_egbc !=nil {return _bgb ,_dg .Wrap (_egbc ,_fcd ,"\u0073k\u0069p\u0020\u0072\u0065\u0073\u0065r\u0076\u0065d\u0020\u0062\u0069\u0074\u0073");};var _dbc int ;if _ada .IsTPGDon {_dbc =1;};if _egbc =w .WriteBit (_dbc );
_egbc !=nil {return _bgb ,_dg .Wrap (_egbc ,_fcd ,"\u0074\u0070\u0067\u0064\u006f\u006e");};_dbc =0;if _egbc =w .WriteBit (int (_ada .GBTemplate >>1)&0x01);_egbc !=nil {return _bgb ,_dg .Wrap (_egbc ,_fcd ,"f\u0069r\u0073\u0074\u0020\u0067\u0062\u0074\u0065\u006dp\u006c\u0061\u0074\u0065 b\u0069\u0074");
};if _egbc =w .WriteBit (int (_ada .GBTemplate )&0x01);_egbc !=nil {return _bgb ,_dg .Wrap (_egbc ,_fcd ,"s\u0065\u0063\u006f\u006ed \u0067b\u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u0062\u0069\u0074");};if _ada .UseMMR {_dbc =1;};if _egbc =w .WriteBit (_dbc );
_egbc !=nil {return _bgb ,_dg .Wrap (_egbc ,_fcd ,"u\u0073\u0065\u0020\u004d\u004d\u0052\u0020\u0062\u0069\u0074");};_bgb ++;if _dfbf ,_egbc =_ada .writeGBAtPixels (w );_egbc !=nil {return _bgb ,_dg .Wrap (_egbc ,_fcd ,"");};_bgb +=_dfbf ;_gdb :=_dd .New ();
if _egbc =_gdb .EncodeBitmap (_ada .Bitmap ,_ada .IsTPGDon );_egbc !=nil {return _bgb ,_dg .Wrap (_egbc ,_fcd ,"");};_gdb .Final ();var _caba int64 ;if _caba ,_egbc =_gdb .WriteTo (w );_egbc !=nil {return _bgb ,_dg .Wrap (_egbc ,_fcd ,"");};_bgb +=int (_caba );
return _bgb ,nil ;};func (_afec *SymbolDictionary )huffDecodeRefAggNInst ()(int64 ,error ){if !_afec .SdHuffAggInstanceSelection {_dcdc ,_fcga :=_ab .GetStandardTable (1);if _fcga !=nil {return 0,_fcga ;};return _dcdc .Decode (_afec ._defe );};if _afec ._dbdga ==nil {var (_dddb int ;
_afbf error ;);if _afec .SdHuffDecodeHeightSelection ==3{_dddb ++;};if _afec .SdHuffDecodeWidthSelection ==3{_dddb ++;};if _afec .SdHuffBMSizeSelection ==3{_dddb ++;};_afec ._dbdga ,_afbf =_afec .getUserTable (_dddb );if _afbf !=nil {return 0,_afbf ;};
};return _afec ._dbdga .Decode (_afec ._defe );};func _bbda (_daagf _ca .StreamReader ,_fgcd *Header )*TextRegion {_cecd :=&TextRegion {_abfe :_daagf ,Header :_fgcd ,RegionInfo :NewRegionSegment (_daagf )};return _cecd ;};func (_edfd *SymbolDictionary )setRetainedCodingContexts (_bcdd *SymbolDictionary ){_edfd ._ggbg =_bcdd ._ggbg ;
_edfd .IsHuffmanEncoded =_bcdd .IsHuffmanEncoded ;_edfd .UseRefinementAggregation =_bcdd .UseRefinementAggregation ;_edfd .SdTemplate =_bcdd .SdTemplate ;_edfd .SdrTemplate =_bcdd .SdrTemplate ;_edfd .SdATX =_bcdd .SdATX ;_edfd .SdATY =_bcdd .SdATY ;_edfd .SdrATX =_bcdd .SdrATX ;
_edfd .SdrATY =_bcdd .SdrATY ;_edfd ._abbe =_bcdd ._abbe ;};func (_dddca *TextRegion )initSymbols ()error {const _dfdd ="i\u006e\u0069\u0074\u0053\u0079\u006d\u0062\u006f\u006c\u0073";for _ ,_debbg :=range _dddca .Header .RTSegments {if _debbg ==nil {return _dg .Error (_dfdd ,"\u006e\u0069\u006c\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020pr\u006f\u0076\u0069\u0064\u0065\u0064 \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0074\u0065\u0078\u0074\u0020\u0072\u0065g\u0069\u006f\u006e\u0020\u0053\u0079\u006d\u0062o\u006c\u0073");
};if _debbg .Type ==0{_cadd ,_bagg :=_debbg .GetSegmentData ();if _bagg !=nil {return _dg .Wrap (_bagg ,_dfdd ,"");};_gafc ,_gefdf :=_cadd .(*SymbolDictionary );if !_gefdf {return _dg .Error (_dfdd ,"\u0072e\u0066\u0065r\u0072\u0065\u0064 \u0054\u006f\u0020\u0053\u0065\u0067\u006de\u006e\u0074\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_gafc ._eafd =_dddca ._agffe ;_abbg ,_bagg :=_gafc .GetDictionary ();if _bagg !=nil {return _dg .Wrap (_bagg ,_dfdd ,"");};_dddca .Symbols =append (_dddca .Symbols ,_abbg ...);};};_dddca .NumberOfSymbols =uint32 (len (_dddca .Symbols ));return nil ;};
func (_fagd *SymbolDictionary )Init (h *Header ,r _ca .StreamReader )error {_fagd .Header =h ;_fagd ._defe =r ;return _fagd .parseHeader ();};type SymbolDictionary struct{_defe _ca .StreamReader ;SdrTemplate int8 ;SdTemplate int8 ;_deeeg bool ;_gacbf bool ;
SdHuffAggInstanceSelection bool ;SdHuffBMSizeSelection int8 ;SdHuffDecodeWidthSelection int8 ;SdHuffDecodeHeightSelection int8 ;UseRefinementAggregation bool ;IsHuffmanEncoded bool ;SdATX []int8 ;SdATY []int8 ;SdrATX []int8 ;SdrATY []int8 ;NumberOfExportedSymbols uint32 ;
NumberOfNewSymbols uint32 ;Header *Header ;_cgeg uint32 ;_gbae []*_cab .Bitmap ;_edage uint32 ;_bfbgg []*_cab .Bitmap ;_gcea _ab .Tabler ;_bgbf _ab .Tabler ;_feec _ab .Tabler ;_dbdga _ab .Tabler ;_adgfe []*_cab .Bitmap ;_ecec []*_cab .Bitmap ;_ggbg *_a .Decoder ;
_daea *TextRegion ;_bbabc *GenericRegion ;_bgef *GenericRefinementRegion ;_abbe *_a .DecoderStats ;_acfd *_a .DecoderStats ;_gegb *_a .DecoderStats ;_ggdaf *_a .DecoderStats ;_afdg *_a .DecoderStats ;_acgb *_a .DecoderStats ;_cbde *_a .DecoderStats ;_gefg *_a .DecoderStats ;
_eafd *_a .DecoderStats ;_cccf int8 ;_gdac *_cab .Bitmaps ;_dbcc []int ;_caeda map[int ]int ;_cced bool ;};func (_edag *PageInformationSegment )Init (h *Header ,r _ca .StreamReader )(_dgfa error ){_edag ._gcgb =r ;if _dgfa =_edag .parseHeader ();_dgfa !=nil {return _dg .Wrap (_dgfa ,"P\u0061\u0067\u0065\u0049\u006e\u0066o\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065g\u006d\u0065\u006et\u002eI\u006e\u0069\u0074","");
};return nil ;};func (_ffge *TextRegion )getUserTable (_fbfb int )(_ab .Tabler ,error ){const _ebdf ="\u0067\u0065\u0074U\u0073\u0065\u0072\u0054\u0061\u0062\u006c\u0065";var _bbgc int ;for _ ,_gdcba :=range _ffge .Header .RTSegments {if _gdcba .Type ==53{if _bbgc ==_fbfb {_ffcb ,_edac :=_gdcba .GetSegmentData ();
if _edac !=nil {return nil ,_edac ;};_bbbg ,_decce :=_ffcb .(*TableSegment );if !_decce {_ed .Log .Debug (_bg .Sprintf ("\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079p\u0065\u00205\u0033\u0020\u002d\u0020\u0061\u006ed\u0020in\u0064\u0065\u0078\u003a\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_gdcba .SegmentNumber ));
return nil ,_dg .Error (_ebdf ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079\u0070e\u0020\u0035\u0033\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u002a\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};return _ab .NewEncodedTable (_bbbg );};_bbgc ++;};};return nil ,nil ;};func (_cbcc *SymbolDictionary )getUserTable (_ddce int )(_ab .Tabler ,error ){var _gdee int ;for _ ,_fbg :=range _cbcc .Header .RTSegments {if _fbg .Type ==53{if _gdee ==_ddce {_dedf ,_ddfd :=_fbg .GetSegmentData ();
if _ddfd !=nil {return nil ,_ddfd ;};_dgdd :=_dedf .(_ab .BasicTabler );return _ab .NewEncodedTable (_dgdd );};_gdee ++;};};return nil ,nil ;};func (_faf *GenericRegion )Init (h *Header ,r _ca .StreamReader )error {_faf .RegionSegment =NewRegionSegment (r );
_faf ._cfb =r ;return _faf .parseHeader ();};func (_fbcc *Header )pageSize ()uint {if _fbcc .PageAssociation <=255{return 1;};return 4;};func (_dfad *TextRegion )decodeRI ()(int64 ,error ){if !_dfad .UseRefinement {return 0,nil ;};if _dfad .IsHuffmanEncoded {_baag ,_cadfa :=_dfad ._abfe .ReadBit ();
return int64 (_baag ),_cadfa ;};_dgag ,_ddcb :=_dfad ._aaf .DecodeInt (_dfad ._eadf );return int64 (_dgag ),_ddcb ;};func (_cbda *TableSegment )HtPS ()int32 {return _cbda ._bggf };type SegmentEncoder interface{Encode (_adbe _ca .BinaryWriter )(_gdg int ,_gcca error );
};func (_aagfa *SymbolDictionary )decodeDirectlyThroughGenericRegion (_gfdg ,_dfed uint32 )error {if _aagfa ._bbabc ==nil {_aagfa ._bbabc =NewGenericRegion (_aagfa ._defe );};_aagfa ._bbabc .setParametersWithAt (false ,byte (_aagfa .SdTemplate ),false ,false ,_aagfa .SdATX ,_aagfa .SdATY ,_gfdg ,_dfed ,_aagfa ._abbe ,_aagfa ._ggbg );
return _aagfa .addSymbol (_aagfa ._bbabc );};func (_bege *PageInformationSegment )readDefaultPixelValue ()error {_baead ,_eaedd :=_bege ._gcgb .ReadBit ();if _eaedd !=nil {return _eaedd ;};_bege .DefaultPixelValue =uint8 (_baead &0xf);return nil ;};func (_gca *GenericRegion )Size ()int {return _gca .RegionSegment .Size ()+1+2*len (_gca .GBAtX )};
func (_debb *PageInformationSegment )encodeFlags (_eed _ca .BinaryWriter )(_abbba error ){const _afacg ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _abbba =_eed .SkipBits (1);_abbba !=nil {return _dg .Wrap (_abbba ,_afacg ,"\u0072\u0065\u0073e\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074");
};var _edba int ;if _debb .CombinationOperatorOverrideAllowed (){_edba =1;};if _abbba =_eed .WriteBit (_edba );_abbba !=nil {return _dg .Wrap (_abbba ,_afacg ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u006f\u0076\u0065\u0072\u0072\u0069\u0064\u0064\u0065\u006e");
};_edba =0;if _debb ._daed {_edba =1;};if _abbba =_eed .WriteBit (_edba );_abbba !=nil {return _dg .Wrap (_abbba ,_afacg ,"\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0075\u0078i\u006ci\u0061r\u0079\u0020\u0062\u0075\u0066\u0066\u0065r");};if _abbba =_eed .WriteBit ((int (_debb ._aacgd )>>1)&0x01);
_abbba !=nil {return _dg .Wrap (_abbba ,_afacg ,"\u0063\u006f\u006d\u0062\u0069\u006e\u0061\u0074\u0069\u006fn\u0020\u006f\u0070\u0065\u0072\u0061\u0074o\u0072\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0062\u0069\u0074");};if _abbba =_eed .WriteBit (int (_debb ._aacgd )&0x01);
_abbba !=nil {return _dg .Wrap (_abbba ,_afacg ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0062\u0069\u0074");};_edba =int (_debb .DefaultPixelValue );
if _abbba =_eed .WriteBit (_edba );_abbba !=nil {return _dg .Wrap (_abbba ,_afacg ,"\u0064e\u0066\u0061\u0075\u006c\u0074\u0020\u0070\u0061\u0067\u0065\u0020p\u0069\u0078\u0065\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};_edba =0;if _debb ._abbc {_edba =1;
};if _abbba =_eed .WriteBit (_edba );_abbba !=nil {return _dg .Wrap (_abbba ,_afacg ,"\u0063\u006f\u006e\u0074ai\u006e\u0073\u0020\u0072\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074");};_edba =0;if _debb .IsLossless {_edba =1;};if _abbba =_eed .WriteBit (_edba );
_abbba !=nil {return _dg .Wrap (_abbba ,_afacg ,"p\u0061\u0067\u0065\u0020\u0069\u0073 \u0065\u0076\u0065\u006e\u0074\u0075\u0061\u006c\u006cy\u0020\u006c\u006fs\u0073l\u0065\u0073\u0073");};return nil ;};func (_dba *Header )readNumberOfReferredToSegments (_adag _ca .StreamReader )(uint64 ,error ){const _dfg ="\u0072\u0065\u0061\u0064\u004e\u0075\u006d\u0062\u0065\u0072O\u0066\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
_afacf ,_dged :=_adag .ReadBits (3);if _dged !=nil {return 0,_dg .Wrap (_dged ,_dfg ,"\u0063\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0072\u0074\u0073");};_afacf &=0xf;var _aceb []byte ;if _afacf <=4{_aceb =make ([]byte ,5);for _dgca :=0;_dgca <=4;_dgca ++{_bbab ,_dbdb :=_adag .ReadBit ();
if _dbdb !=nil {return 0,_dg .Wrap (_dbdb ,_dfg ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_aceb [_dgca ]=byte (_bbab );};}else {_afacf ,_dged =_adag .ReadBits (29);if _dged !=nil {return 0,_dged ;};_afacf &=_c .MaxInt32 ;
_face :=(_afacf +8)>>3;_face <<=3;_aceb =make ([]byte ,_face );var _gbdd uint64 ;for _gbdd =0;_gbdd < _face ;_gbdd ++{_cefg ,_bceb :=_adag .ReadBit ();if _bceb !=nil {return 0,_dg .Wrap (_bceb ,_dfg ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};_aceb [_gbdd ]=byte (_cefg );};};return _afacf ,nil ;};func (_bad *GenericRegion )overrideAtTemplate0b (_fgb ,_fbc ,_gdc ,_gafg ,_fbbe ,_fgf int )int {if _bad .GBAtOverride [0]{_fgb &=0xFFFD;if _bad .GBAtY [0]==0&&_bad .GBAtX [0]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [0]&0x1))<<1;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [0]),_gdc +int (_bad .GBAtY [0])))<<1;};};if _bad .GBAtOverride [1]{_fgb &=0xDFFF;if _bad .GBAtY [1]==0&&_bad .GBAtX [1]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [1]&0x1))<<13;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [1]),_gdc +int (_bad .GBAtY [1])))<<13;};};if _bad .GBAtOverride [2]{_fgb &=0xFDFF;if _bad .GBAtY [2]==0&&_bad .GBAtX [2]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [2]&0x1))<<9;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [2]),_gdc +int (_bad .GBAtY [2])))<<9;};};if _bad .GBAtOverride [3]{_fgb &=0xBFFF;if _bad .GBAtY [3]==0&&_bad .GBAtX [3]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [3]&0x1))<<14;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [3]),_gdc +int (_bad .GBAtY [3])))<<14;};};if _bad .GBAtOverride [4]{_fgb &=0xEFFF;if _bad .GBAtY [4]==0&&_bad .GBAtX [4]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [4]&0x1))<<12;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [4]),_gdc +int (_bad .GBAtY [4])))<<12;};};if _bad .GBAtOverride [5]{_fgb &=0xFFDF;if _bad .GBAtY [5]==0&&_bad .GBAtX [5]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [5]&0x1))<<5;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [5]),_gdc +int (_bad .GBAtY [5])))<<5;};};if _bad .GBAtOverride [6]{_fgb &=0xFFFB;if _bad .GBAtY [6]==0&&_bad .GBAtX [6]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [6]&0x1))<<2;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [6]),_gdc +int (_bad .GBAtY [6])))<<2;};};if _bad .GBAtOverride [7]{_fgb &=0xFFF7;if _bad .GBAtY [7]==0&&_bad .GBAtX [7]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [7]&0x1))<<3;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [7]),_gdc +int (_bad .GBAtY [7])))<<3;};};if _bad .GBAtOverride [8]{_fgb &=0xF7FF;if _bad .GBAtY [8]==0&&_bad .GBAtX [8]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [8]&0x1))<<11;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [8]),_gdc +int (_bad .GBAtY [8])))<<11;};};if _bad .GBAtOverride [9]{_fgb &=0xFFEF;if _bad .GBAtY [9]==0&&_bad .GBAtX [9]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [9]&0x1))<<4;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [9]),_gdc +int (_bad .GBAtY [9])))<<4;};};if _bad .GBAtOverride [10]{_fgb &=0x7FFF;if _bad .GBAtY [10]==0&&_bad .GBAtX [10]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [10]&0x1))<<15;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [10]),_gdc +int (_bad .GBAtY [10])))<<15;};};if _bad .GBAtOverride [11]{_fgb &=0xFDFF;if _bad .GBAtY [11]==0&&_bad .GBAtX [11]>=-int8 (_fbbe ){_fgb |=(_gafg >>uint (int8 (_fgf )-_bad .GBAtX [11]&0x1))<<10;
}else {_fgb |=int (_bad .getPixel (_fbc +int (_bad .GBAtX [11]),_gdc +int (_bad .GBAtY [11])))<<10;};};return _fgb ;};func (_cdf *PageInformationSegment )CombinationOperatorOverrideAllowed ()bool {return _cdf ._edfg };func (_afgg *Header )writeSegmentDataLength (_eea _ca .BinaryWriter )(_bdab int ,_bede error ){_efae :=make ([]byte ,4);
_eg .BigEndian .PutUint32 (_efae ,uint32 (_afgg .SegmentDataLength ));if _bdab ,_bede =_eea .Write (_efae );_bede !=nil {return 0,_dg .Wrap (_bede ,"\u0048\u0065a\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u004c\u0065ng\u0074\u0068","");
};return _bdab ,nil ;};type HalftoneRegion struct{_ggeb _ca .StreamReader ;_feed *Header ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;HDefaultPixel int8 ;CombinationOperator _cab .CombinationOperator ;
HSkipEnabled bool ;HTemplate byte ;IsMMREncoded bool ;HGridWidth uint32 ;HGridHeight uint32 ;HGridX int32 ;HGridY int32 ;HRegionX uint16 ;HRegionY uint16 ;HalftoneRegionBitmap *_cab .Bitmap ;Patterns []*_cab .Bitmap ;};func (_dgced *TextRegion )readHuffmanFlags ()error {var (_dedd int ;
_bdfc uint64 ;_eaca error ;);_ ,_eaca =_dgced ._abfe .ReadBit ();if _eaca !=nil {return _eaca ;};_dedd ,_eaca =_dgced ._abfe .ReadBit ();if _eaca !=nil {return _eaca ;};_dgced .SbHuffRSize =int8 (_dedd );_bdfc ,_eaca =_dgced ._abfe .ReadBits (2);if _eaca !=nil {return _eaca ;
};_dgced .SbHuffRDY =int8 (_bdfc )&0xf;_bdfc ,_eaca =_dgced ._abfe .ReadBits (2);if _eaca !=nil {return _eaca ;};_dgced .SbHuffRDX =int8 (_bdfc )&0xf;_bdfc ,_eaca =_dgced ._abfe .ReadBits (2);if _eaca !=nil {return _eaca ;};_dgced .SbHuffRDHeight =int8 (_bdfc )&0xf;
_bdfc ,_eaca =_dgced ._abfe .ReadBits (2);if _eaca !=nil {return _eaca ;};_dgced .SbHuffRDWidth =int8 (_bdfc )&0xf;_bdfc ,_eaca =_dgced ._abfe .ReadBits (2);if _eaca !=nil {return _eaca ;};_dgced .SbHuffDT =int8 (_bdfc )&0xf;_bdfc ,_eaca =_dgced ._abfe .ReadBits (2);
if _eaca !=nil {return _eaca ;};_dgced .SbHuffDS =int8 (_bdfc )&0xf;_bdfc ,_eaca =_dgced ._abfe .ReadBits (2);if _eaca !=nil {return _eaca ;};_dgced .SbHuffFS =int8 (_bdfc )&0xf;return nil ;};func (_acg *GenericRegion )copyLineAbove (_adg int )error {_gbfa :=_adg *_acg .Bitmap .RowStride ;
_bfe :=_gbfa -_acg .Bitmap .RowStride ;for _acgc :=0;_acgc < _acg .Bitmap .RowStride ;_acgc ++{_bda ,_fdfc :=_acg .Bitmap .GetByte (_bfe );if _fdfc !=nil {return _fdfc ;};_bfe ++;if _fdfc =_acg .Bitmap .SetByte (_gbfa ,_bda );_fdfc !=nil {return _fdfc ;
};_gbfa ++;};return nil ;};func (_ffgd *TextRegion )decodeRdx ()(int64 ,error ){const _fcdf ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064x";if _ffgd .IsHuffmanEncoded {if _ffgd .SbHuffRDX ==3{if _ffgd ._eaaff ==nil {var (_defef int ;_ccee error ;);if _ffgd .SbHuffFS ==3{_defef ++;
};if _ffgd .SbHuffDS ==3{_defef ++;};if _ffgd .SbHuffDT ==3{_defef ++;};if _ffgd .SbHuffRDWidth ==3{_defef ++;};if _ffgd .SbHuffRDHeight ==3{_defef ++;};_ffgd ._eaaff ,_ccee =_ffgd .getUserTable (_defef );if _ccee !=nil {return 0,_dg .Wrap (_ccee ,_fcdf ,"");
};};return _ffgd ._eaaff .Decode (_ffgd ._abfe );};_fecf ,_egebd :=_ab .GetStandardTable (14+int (_ffgd .SbHuffRDX ));if _egebd !=nil {return 0,_dg .Wrap (_egebd ,_fcdf ,"");};return _fecf .Decode (_ffgd ._abfe );};_afaea ,_afba :=_ffgd ._aaf .DecodeInt (_ffgd ._gdcb );
if _afba !=nil {return 0,_dg .Wrap (_afba ,_fcdf ,"");};return int64 (_afaea ),nil ;};func (_ebfd *RegionSegment )String ()string {_geae :=&_b .Builder {};_geae .WriteString ("\u0009[\u0052E\u0047\u0049\u004f\u004e\u0020S\u0045\u0047M\u0045\u004e\u0054\u005d\u000a");
_geae .WriteString (_bg .Sprintf ("\t\u0009\u002d\u0020\u0042\u0069\u0074m\u0061\u0070\u0020\u0028\u0077\u0069d\u0074\u0068\u002c\u0020\u0068\u0065\u0069g\u0068\u0074\u0029\u0020\u005b\u0025\u0064\u0078\u0025\u0064]\u000a",_ebfd .BitmapWidth ,_ebfd .BitmapHeight ));
_geae .WriteString (_bg .Sprintf ("\u0009\u0009\u002d\u0020L\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0028\u0078,\u0079)\u003a\u0020\u005b\u0025\u0064\u002c\u0025d\u005d\u000a",_ebfd .XLocation ,_ebfd .YLocation ));_geae .WriteString (_bg .Sprintf ("\t\u0009\u002d\u0020\u0043\u006f\u006db\u0069\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0073",_ebfd .CombinaionOperator ));
return _geae .String ();};func (_gfea *SymbolDictionary )InitEncode (symbols *_cab .Bitmaps ,symbolList []int ,symbolMap map[int ]int ,unborderSymbols bool )error {const _agcb ="S\u0079\u006d\u0062\u006f\u006c\u0044i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002eI\u006e\u0069\u0074E\u006ec\u006f\u0064\u0065";
_gfea .SdATX =[]int8 {3,-3,2,-2};_gfea .SdATY =[]int8 {-1,-1,-2,-2};_gfea ._gdac =symbols ;_gfea ._dbcc =make ([]int ,len (symbolList ));copy (_gfea ._dbcc ,symbolList );if len (_gfea ._dbcc )!=_gfea ._gdac .Size (){return _dg .Error (_agcb ,"s\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0061\u006e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u004ci\u0073\u0074\u0020\u006f\u0066\u0020\u0064\u0069\u0066\u0066er\u0065\u006e\u0074 \u0073i\u007a\u0065");
};_gfea .NumberOfNewSymbols =uint32 (symbols .Size ());_gfea .NumberOfExportedSymbols =uint32 (symbols .Size ());_gfea ._caeda =symbolMap ;_gfea ._cced =unborderSymbols ;return nil ;};func (_gded *SymbolDictionary )decodeRefinedSymbol (_cgfga ,_dddc uint32 )error {var (_dfae int ;
_efcb ,_gfgf int32 ;);if _gded .IsHuffmanEncoded {_geac ,_abbce :=_gded ._defe .ReadBits (byte (_gded ._cccf ));if _abbce !=nil {return _abbce ;};_dfae =int (_geac );_dcde ,_abbce :=_ab .GetStandardTable (15);if _abbce !=nil {return _abbce ;};_agcfa ,_abbce :=_dcde .Decode (_gded ._defe );
if _abbce !=nil {return _abbce ;};_efcb =int32 (_agcfa );_agcfa ,_abbce =_dcde .Decode (_gded ._defe );if _abbce !=nil {return _abbce ;};_gfgf =int32 (_agcfa );_dcde ,_abbce =_ab .GetStandardTable (1);if _abbce !=nil {return _abbce ;};if _ ,_abbce =_dcde .Decode (_gded ._defe );
_abbce !=nil {return _abbce ;};_gded ._defe .Align ();}else {_aabgg ,_dgce :=_gded ._ggbg .DecodeIAID (uint64 (_gded ._cccf ),_gded ._eafd );if _dgce !=nil {return _dgce ;};_dfae =int (_aabgg );_efcb ,_dgce =_gded ._ggbg .DecodeInt (_gded ._acgb );if _dgce !=nil {return _dgce ;
};_gfgf ,_dgce =_gded ._ggbg .DecodeInt (_gded ._cbde );if _dgce !=nil {return _dgce ;};};if _eccf :=_gded .setSymbolsArray ();_eccf !=nil {return _eccf ;};_aeace :=_gded ._ecec [_dfae ];if _eec :=_gded .decodeNewSymbols (_cgfga ,_dddc ,_aeace ,_efcb ,_gfgf );
_eec !=nil {return _eec ;};if _gded .IsHuffmanEncoded {_gded ._defe .Align ();};return nil ;};func (_ddgf *PageInformationSegment )CombinationOperator ()_cab .CombinationOperator {return _ddgf ._aacgd ;};func (_aaac *Header )CleanSegmentData (){if _aaac .SegmentData !=nil {_aaac .SegmentData =nil ;
};};func (_dcce *SymbolDictionary )addSymbol (_cfge Regioner )error {_adcg ,_bdcc :=_cfge .GetRegionBitmap ();if _bdcc !=nil {return _bdcc ;};_dcce ._bfbgg [_dcce ._edage ]=_adcg ;_dcce ._ecec =append (_dcce ._ecec ,_adcg );_ed .Log .Trace ("\u005b\u0053YM\u0042\u004f\u004c \u0044\u0049\u0043\u0054ION\u0041RY\u005d\u0020\u0041\u0064\u0064\u0065\u0064 s\u0079\u006d\u0062\u006f\u006c\u003a\u0020%\u0073",_adcg );
return nil ;};type PageInformationSegment struct{_gcgb _ca .StreamReader ;PageBMHeight int ;PageBMWidth int ;ResolutionX int ;ResolutionY int ;_edfg bool ;_aacgd _cab .CombinationOperator ;_daed bool ;DefaultPixelValue uint8 ;_abbc bool ;IsLossless bool ;
IsStripe bool ;MaxStripeSize uint16 ;};func (_aebbc *PatternDictionary )readTemplate ()error {_cecf ,_bgcc :=_aebbc ._fdbfa .ReadBits (2);if _bgcc !=nil {return _bgcc ;};_aebbc .HDTemplate =byte (_cecf );return nil ;};func (_dcdd *Header )subInputReader ()(_ca .StreamReader ,error ){return _ca .NewSubstreamReader (_dcdd .Reader ,_dcdd .SegmentDataStartOffset ,_dcdd .SegmentDataLength );
};func (_cfad *SymbolDictionary )setSymbolsArray ()error {if _cfad ._gbae ==nil {if _dfbae :=_cfad .retrieveImportSymbols ();_dfbae !=nil {return _dfbae ;};};if _cfad ._ecec ==nil {_cfad ._ecec =append (_cfad ._ecec ,_cfad ._gbae ...);};return nil ;};func (_dbg *GenericRefinementRegion )parseHeader ()(_fce error ){_ed .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072s\u0069\u006e\u0067\u0020\u0048e\u0061\u0064e\u0072\u002e\u002e\u002e");
_aac :=_cf .Now ();defer func (){if _fce ==nil {_ed .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045G\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020h\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0069\u006e\u0069\u0073\u0068id\u0020\u0069\u006e\u003a\u0020\u0025\u0064\u0020\u006e\u0073",_cf .Since (_aac ).Nanoseconds ());
}else {_ed .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0073",_fce );
};}();if _fce =_dbg .RegionInfo .parseHeader ();_fce !=nil {return _fce ;};_ ,_fce =_dbg ._de .ReadBits (6);if _fce !=nil {return _fce ;};_dbg .IsTPGROn ,_fce =_dbg ._de .ReadBool ();if _fce !=nil {return _fce ;};var _gee int ;_gee ,_fce =_dbg ._de .ReadBit ();
if _fce !=nil {return _fce ;};_dbg .TemplateID =int8 (_gee );switch _dbg .TemplateID {case 0:_dbg .Template =_dbg ._dad ;if _fce =_dbg .readAtPixels ();_fce !=nil {return ;};case 1:_dbg .Template =_dbg ._fd ;};return nil ;};func (_ebb *SymbolDictionary )readNumberOfNewSymbols ()error {_dfbfg ,_gcac :=_ebb ._defe .ReadBits (32);
if _gcac !=nil {return _gcac ;};_ebb .NumberOfNewSymbols =uint32 (_dfbfg &_c .MaxUint32 );return nil ;};func (_dbba *TextRegion )decodeSymbolInstances ()error {_gfce ,_cgge :=_dbba .decodeStripT ();if _cgge !=nil {return _cgge ;};var (_fbccg int64 ;_eceb uint32 ;
);for _eceb < _dbba .NumberOfSymbolInstances {_acege ,_gbdc :=_dbba .decodeDT ();if _gbdc !=nil {return _gbdc ;};_gfce +=_acege ;var _badf int64 ;_bfaeb :=true ;_dbba ._caeec =0;for {if _bfaeb {_badf ,_gbdc =_dbba .decodeDfs ();if _gbdc !=nil {return _gbdc ;
};_fbccg +=_badf ;_dbba ._caeec =_fbccg ;_bfaeb =false ;}else {_eccd ,_gddd :=_dbba .decodeIds ();if _bgg .Is (_gddd ,_cae .ErrOOB ){break ;};if _gddd !=nil {return _gddd ;};if _eceb >=_dbba .NumberOfSymbolInstances {break ;};_dbba ._caeec +=_eccd +int64 (_dbba .SbDsOffset );
};_aegdf ,_fdfa :=_dbba .decodeCurrentT ();if _fdfa !=nil {return _fdfa ;};_fffee :=_gfce +_aegdf ;_bgfb ,_fdfa :=_dbba .decodeID ();if _fdfa !=nil {return _fdfa ;};_aebd ,_fdfa :=_dbba .decodeRI ();if _fdfa !=nil {return _fdfa ;};_bdbd ,_fdfa :=_dbba .decodeIb (_aebd ,_bgfb );
if _fdfa !=nil {return _fdfa ;};if _fdfa =_dbba .blit (_bdbd ,_fffee );_fdfa !=nil {return _fdfa ;};_eceb ++;};};return nil ;};func (_ccac *TextRegion )decodeCurrentT ()(int64 ,error ){if _ccac .SbStrips !=1{if _ccac .IsHuffmanEncoded {_dagec ,_daged :=_ccac ._abfe .ReadBits (byte (_ccac .LogSBStrips ));
return int64 (_dagec ),_daged ;};_eecb ,_eeacg :=_ccac ._aaf .DecodeInt (_ccac ._dbcf );if _eeacg !=nil {return 0,_eeacg ;};return int64 (_eecb ),nil ;};return 0,nil ;};func (_bcdaa *PatternDictionary )computeSegmentDataStructure ()error {_bcdaa .DataOffset =_bcdaa ._fdbfa .StreamPosition ();
_bcdaa .DataHeaderLength =_bcdaa .DataOffset -_bcdaa .DataHeaderOffset ;_bcdaa .DataLength =int64 (_bcdaa ._fdbfa .Length ())-_bcdaa .DataHeaderLength ;return nil ;};func (_db *EndOfStripe )parseHeader (_cfd *Header ,_bb _ca .StreamReader )error {_aa ,_cb :=_db ._be .ReadBits (32);
if _cb !=nil {return _cb ;};_db ._cd =int (_aa &_c .MaxInt32 );return nil ;};func (_dccd *TextRegion )encodeFlags (_cede _ca .BinaryWriter )(_aaea int ,_caef error ){const _cfgb ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _caef =_cede .WriteBit (int (_dccd .SbrTemplate ));
_caef !=nil {return _aaea ,_dg .Wrap (_caef ,_cfgb ,"s\u0062\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _ ,_caef =_cede .WriteBits (uint64 (_dccd .SbDsOffset ),5);_caef !=nil {return _aaea ,_dg .Wrap (_caef ,_cfgb ,"\u0073\u0062\u0044\u0073\u004f\u0066\u0066\u0073\u0065\u0074");
};if _caef =_cede .WriteBit (int (_dccd .DefaultPixel ));_caef !=nil {return _aaea ,_dg .Wrap (_caef ,_cfgb ,"\u0044\u0065\u0066a\u0075\u006c\u0074\u0050\u0069\u0078\u0065\u006c");};if _ ,_caef =_cede .WriteBits (uint64 (_dccd .CombinationOperator ),2);
_caef !=nil {return _aaea ,_dg .Wrap (_caef ,_cfgb ,"\u0043\u006f\u006d\u0062in\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};if _caef =_cede .WriteBit (int (_dccd .IsTransposed ));_caef !=nil {return _aaea ,_dg .Wrap (_caef ,_cfgb ,"\u0069\u0073\u0020\u0074\u0072\u0061\u006e\u0073\u0070\u006f\u0073\u0065\u0064");
};if _ ,_caef =_cede .WriteBits (uint64 (_dccd .ReferenceCorner ),2);_caef !=nil {return _aaea ,_dg .Wrap (_caef ,_cfgb ,"\u0072\u0065f\u0065\u0072\u0065n\u0063\u0065\u0020\u0063\u006f\u0072\u006e\u0065\u0072");};if _ ,_caef =_cede .WriteBits (uint64 (_dccd .LogSBStrips ),2);
_caef !=nil {return _aaea ,_dg .Wrap (_caef ,_cfgb ,"L\u006f\u0067\u0053\u0042\u0053\u0074\u0072\u0069\u0070\u0073");};var _gabd int ;if _dccd .UseRefinement {_gabd =1;};if _caef =_cede .WriteBit (_gabd );_caef !=nil {return _aaea ,_dg .Wrap (_caef ,_cfgb ,"\u0075\u0073\u0065\u0020\u0072\u0065\u0066\u0069\u006ee\u006d\u0065\u006e\u0074");
};_gabd =0;if _dccd .IsHuffmanEncoded {_gabd =1;};if _caef =_cede .WriteBit (_gabd );_caef !=nil {return _aaea ,_dg .Wrap (_caef ,_cfgb ,"u\u0073\u0065\u0020\u0068\u0075\u0066\u0066\u006d\u0061\u006e");};_aaea =2;return _aaea ,nil ;};func (_fef *PageInformationSegment )readIsLossless ()error {_aaca ,_efb :=_fef ._gcgb .ReadBit ();
if _efb !=nil {return _efb ;};if _aaca ==1{_fef .IsLossless =true ;};return nil ;};func (_bead *SymbolDictionary )decodeHeightClassCollectiveBitmap (_ddcf int64 ,_eeeb ,_fggg uint32 )(*_cab .Bitmap ,error ){if _ddcf ==0{_daac :=_cab .New (int (_fggg ),int (_eeeb ));
var (_cgca byte ;_gecde error ;);for _bfag :=0;_bfag < len (_daac .Data );_bfag ++{_cgca ,_gecde =_bead ._defe .ReadByte ();if _gecde !=nil {return nil ,_gecde ;};if _gecde =_daac .SetByte (_bfag ,_cgca );_gecde !=nil {return nil ,_gecde ;};};return _daac ,nil ;
};if _bead ._bbabc ==nil {_bead ._bbabc =NewGenericRegion (_bead ._defe );};_bead ._bbabc .setParameters (true ,_bead ._defe .StreamPosition (),_ddcf ,_eeeb ,_fggg );_edga ,_bfee :=_bead ._bbabc .GetRegionBitmap ();if _bfee !=nil {return nil ,_bfee ;};
return _edga ,nil ;};func (_fgdc *Header )readDataStartOffset (_bac _ca .StreamReader ,_dgdfc OrganizationType ){if _dgdfc ==OSequential {_fgdc .SegmentDataStartOffset =uint64 (_bac .StreamPosition ());};};var _ SegmentEncoder =&GenericRegion {};func (_gf *template1 )form (_ffb ,_feda ,_dbe ,_abbb ,_cggd int16 )int16 {return ((_ffb &0x02)<<8)|(_feda <<6)|((_dbe &0x03)<<4)|(_abbb <<1)|_cggd ;
};func (_ggf *GenericRefinementRegion )decodeTypicalPredictedLineTemplate0 (_aea ,_ceg ,_dae ,_gaa ,_dagb ,_ccfg ,_cg ,_fff ,_bba int )error {var (_gab ,_aed ,_bfb ,_aff ,_ge ,_gcc int ;_ag byte ;_ggda error ;);if _aea > 0{_ag ,_ggda =_ggf .RegionBitmap .GetByte (_cg -_dae );
if _ggda !=nil {return _ggda ;};_bfb =int (_ag );};if _fff > 0&&_fff <=_ggf .ReferenceBitmap .Height {_ag ,_ggda =_ggf .ReferenceBitmap .GetByte (_bba -_gaa +_ccfg );if _ggda !=nil {return _ggda ;};_aff =int (_ag )<<4;};if _fff >=0&&_fff < _ggf .ReferenceBitmap .Height {_ag ,_ggda =_ggf .ReferenceBitmap .GetByte (_bba +_ccfg );
if _ggda !=nil {return _ggda ;};_ge =int (_ag )<<1;};if _fff > -2&&_fff < _ggf .ReferenceBitmap .Height -1{_ag ,_ggda =_ggf .ReferenceBitmap .GetByte (_bba +_gaa +_ccfg );if _ggda !=nil {return _ggda ;};_gcc =int (_ag );};_gab =((_bfb >>5)&0x6)|((_gcc >>2)&0x30)|(_ge &0x180)|(_aff &0xc00);
var _fcb int ;for _acb :=0;_acb < _dagb ;_acb =_fcb {var _eff int ;_fcb =_acb +8;var _eaad int ;if _eaad =_ceg -_acb ;_eaad > 8{_eaad =8;};_efg :=_fcb < _ceg ;_bea :=_fcb < _ggf .ReferenceBitmap .Width ;_dff :=_ccfg +1;if _aea > 0{_ag =0;if _efg {_ag ,_ggda =_ggf .RegionBitmap .GetByte (_cg -_dae +1);
if _ggda !=nil {return _ggda ;};};_bfb =(_bfb <<8)|int (_ag );};if _fff > 0&&_fff <=_ggf .ReferenceBitmap .Height {var _dgf int ;if _bea {_ag ,_ggda =_ggf .ReferenceBitmap .GetByte (_bba -_gaa +_dff );if _ggda !=nil {return _ggda ;};_dgf =int (_ag )<<4;
};_aff =(_aff <<8)|_dgf ;};if _fff >=0&&_fff < _ggf .ReferenceBitmap .Height {var _daf int ;if _bea {_ag ,_ggda =_ggf .ReferenceBitmap .GetByte (_bba +_dff );if _ggda !=nil {return _ggda ;};_daf =int (_ag )<<1;};_ge =(_ge <<8)|_daf ;};if _fff > -2&&_fff < (_ggf .ReferenceBitmap .Height -1){_ag =0;
if _bea {_ag ,_ggda =_ggf .ReferenceBitmap .GetByte (_bba +_gaa +_dff );if _ggda !=nil {return _ggda ;};};_gcc =(_gcc <<8)|int (_ag );};for _gddc :=0;_gddc < _eaad ;_gddc ++{var _cba int ;_afg :=false ;_gec :=(_gab >>4)&0x1ff;if _gec ==0x1ff{_afg =true ;
_cba =1;}else if _gec ==0x00{_afg =true ;};if !_afg {if _ggf ._gd {_aed =_ggf .overrideAtTemplate0 (_gab ,_acb +_gddc ,_aea ,_eff ,_gddc );_ggf ._g .SetIndex (int32 (_aed ));}else {_ggf ._g .SetIndex (int32 (_gab ));};_cba ,_ggda =_ggf ._ac .DecodeBit (_ggf ._g );
if _ggda !=nil {return _ggda ;};};_affd :=uint (7-_gddc );_eff |=_cba <<_affd ;_gab =((_gab &0xdb6)<<1)|_cba |(_bfb >>_affd +5)&0x002|((_gcc >>_affd +2)&0x010)|((_ge >>_affd )&0x080)|((_aff >>_affd )&0x400);};_ggda =_ggf .RegionBitmap .SetByte (_cg ,byte (_eff ));
if _ggda !=nil {return _ggda ;};_cg ++;_bba ++;};return nil ;};func (_eegfd *TextRegion )encodeSymbols (_fage _ca .BinaryWriter )(_gegdd int ,_eeaa error ){const _aeda ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";_acggd :=make ([]byte ,4);
_eg .BigEndian .PutUint32 (_acggd ,_eegfd .NumberOfSymbols );if _gegdd ,_eeaa =_fage .Write (_acggd );_eeaa !=nil {return _gegdd ,_dg .Wrap (_eeaa ,_aeda ,"\u004e\u0075\u006dbe\u0072\u004f\u0066\u0053\u0079\u006d\u0062\u006f\u006c\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073");
};_gfggg ,_eeaa :=_cab .NewClassedPoints (_eegfd ._eegf ,_eegfd ._cbea );if _eeaa !=nil {return 0,_dg .Wrap (_eeaa ,_aeda ,"");};var _geccg ,_egbg int ;_bggc :=_dd .New ();_bggc .Init ();if _eeaa =_bggc .EncodeInteger (_dd .IADT ,0);_eeaa !=nil {return _gegdd ,_dg .Wrap (_eeaa ,_aeda ,"\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0044\u0054");
};_dafg ,_eeaa :=_gfggg .GroupByY ();if _eeaa !=nil {return 0,_dg .Wrap (_eeaa ,_aeda ,"");};for _ ,_gggc :=range _dafg {_bbdcc :=int (_gggc .YAtIndex (0));_dgda :=_bbdcc -_geccg ;if _eeaa =_bggc .EncodeInteger (_dd .IADT ,_dgda );_eeaa !=nil {return _gegdd ,_dg .Wrap (_eeaa ,_aeda ,"");
};var _fecd int ;for _febbe ,_bdeee :=range _gggc .IntSlice {switch _febbe {case 0:_edbe :=int (_gggc .XAtIndex (_febbe ))-_egbg ;if _eeaa =_bggc .EncodeInteger (_dd .IAFS ,_edbe );_eeaa !=nil {return _gegdd ,_dg .Wrap (_eeaa ,_aeda ,"");};_egbg +=_edbe ;
_fecd =_egbg ;default:_bdge :=int (_gggc .XAtIndex (_febbe ))-_fecd ;if _eeaa =_bggc .EncodeInteger (_dd .IADS ,_bdge );_eeaa !=nil {return _gegdd ,_dg .Wrap (_eeaa ,_aeda ,"");};_fecd +=_bdge ;};_aaccb ,_bfgd :=_eegfd ._bcefe .Get (_bdeee );if _bfgd !=nil {return _gegdd ,_dg .Wrap (_bfgd ,_aeda ,"");
};_gfbb ,_cedb :=_eegfd ._gadd [_aaccb ];if !_cedb {_gfbb ,_cedb =_eegfd ._bcbgd [_aaccb ];if !_cedb {return _gegdd ,_dg .Errorf (_aeda ,"\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027\u0025d\u0027\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064 \u0069\u006e\u0020\u0067\u006cob\u0061\u006c\u0020\u0061\u006e\u0064\u0020\u006c\u006f\u0063\u0061\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020\u006d\u0061\u0070",_aaccb );
};};if _bfgd =_bggc .EncodeIAID (_eegfd ._decc ,_gfbb );_bfgd !=nil {return _gegdd ,_dg .Wrap (_bfgd ,_aeda ,"");};};if _eeaa =_bggc .EncodeOOB (_dd .IADS );_eeaa !=nil {return _gegdd ,_dg .Wrap (_eeaa ,_aeda ,"");};};_bggc .Final ();_bbaf ,_eeaa :=_bggc .WriteTo (_fage );
if _eeaa !=nil {return _gegdd ,_dg .Wrap (_eeaa ,_aeda ,"");};_gegdd +=int (_bbaf );return _gegdd ,nil ;};func (_cbae *GenericRegion )readGBAtPixels (_dcc int )error {const _gfg ="\u0072\u0065\u0061\u0064\u0047\u0042\u0041\u0074\u0050i\u0078\u0065\u006c\u0073";
_cbae .GBAtX =make ([]int8 ,_dcc );_cbae .GBAtY =make ([]int8 ,_dcc );for _dgg :=0;_dgg < _dcc ;_dgg ++{_dca ,_afdf :=_cbae ._cfb .ReadByte ();if _afdf !=nil {return _dg .Wrapf (_afdf ,_gfg ,"\u0058\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_dgg );
};_cbae .GBAtX [_dgg ]=int8 (_dca );_dca ,_afdf =_cbae ._cfb .ReadByte ();if _afdf !=nil {return _dg .Wrapf (_afdf ,_gfg ,"\u0059\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_dgg );};_cbae .GBAtY [_dgg ]=int8 (_dca );};return nil ;};func (_cfcg *GenericRefinementRegion )overrideAtTemplate0 (_caf ,_cbd ,_acbb ,_bcf ,_dea int )int {if _cfcg ._ee [0]{_caf &=0xfff7;
if _cfcg .GrAtY [0]==0&&int (_cfcg .GrAtX [0])>=-_dea {_caf |=(_bcf >>uint (7-(_dea +int (_cfcg .GrAtX [0])))&0x1)<<3;}else {_caf |=_cfcg .getPixel (_cfcg .RegionBitmap ,_cbd +int (_cfcg .GrAtX [0]),_acbb +int (_cfcg .GrAtY [0]))<<3;};};if _cfcg ._ee [1]{_caf &=0xefff;
if _cfcg .GrAtY [1]==0&&int (_cfcg .GrAtX [1])>=-_dea {_caf |=(_bcf >>uint (7-(_dea +int (_cfcg .GrAtX [1])))&0x1)<<12;}else {_caf |=_cfcg .getPixel (_cfcg .ReferenceBitmap ,_cbd +int (_cfcg .GrAtX [1]),_acbb +int (_cfcg .GrAtY [1]));};};return _caf ;};
func (_becg *GenericRegion )updateOverrideFlags ()error {const _gde ="\u0075\u0070\u0064\u0061te\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _becg .GBAtX ==nil ||_becg .GBAtY ==nil {return nil ;};if len (_becg .GBAtX )!=len (_becg .GBAtY ){return _dg .Errorf (_gde ,"i\u006eco\u0073i\u0073t\u0065\u006e\u0074\u0020\u0041T\u0020\u0070\u0069x\u0065\u006c\u002e\u0020\u0041m\u006f\u0075\u006et\u0020\u006f\u0066\u0020\u0027\u0078\u0027\u0020\u0070\u0069\u0078e\u006c\u0073\u003a %d\u002c\u0020\u0041\u006d\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0027\u0079\u0027\u0020\u0070\u0069\u0078e\u006cs\u003a\u0020\u0025\u0064",len (_becg .GBAtX ),len (_becg .GBAtY ));
};_becg .GBAtOverride =make ([]bool ,len (_becg .GBAtX ));switch _becg .GBTemplate {case 0:if !_becg .UseExtTemplates {if _becg .GBAtX [0]!=3||_becg .GBAtY [0]!=-1{_becg .setOverrideFlag (0);};if _becg .GBAtX [1]!=-3||_becg .GBAtY [1]!=-1{_becg .setOverrideFlag (1);
};if _becg .GBAtX [2]!=2||_becg .GBAtY [2]!=-2{_becg .setOverrideFlag (2);};if _becg .GBAtX [3]!=-2||_becg .GBAtY [3]!=-2{_becg .setOverrideFlag (3);};}else {if _becg .GBAtX [0]!=-2||_becg .GBAtY [0]!=0{_becg .setOverrideFlag (0);};if _becg .GBAtX [1]!=0||_becg .GBAtY [1]!=-2{_becg .setOverrideFlag (1);
};if _becg .GBAtX [2]!=-2||_becg .GBAtY [2]!=-1{_becg .setOverrideFlag (2);};if _becg .GBAtX [3]!=-1||_becg .GBAtY [3]!=-2{_becg .setOverrideFlag (3);};if _becg .GBAtX [4]!=1||_becg .GBAtY [4]!=-2{_becg .setOverrideFlag (4);};if _becg .GBAtX [5]!=2||_becg .GBAtY [5]!=-1{_becg .setOverrideFlag (5);
};if _becg .GBAtX [6]!=-3||_becg .GBAtY [6]!=0{_becg .setOverrideFlag (6);};if _becg .GBAtX [7]!=-4||_becg .GBAtY [7]!=0{_becg .setOverrideFlag (7);};if _becg .GBAtX [8]!=2||_becg .GBAtY [8]!=-2{_becg .setOverrideFlag (8);};if _becg .GBAtX [9]!=3||_becg .GBAtY [9]!=-1{_becg .setOverrideFlag (9);
};if _becg .GBAtX [10]!=-2||_becg .GBAtY [10]!=-2{_becg .setOverrideFlag (10);};if _becg .GBAtX [11]!=-3||_becg .GBAtY [11]!=-1{_becg .setOverrideFlag (11);};};case 1:if _becg .GBAtX [0]!=3||_becg .GBAtY [0]!=-1{_becg .setOverrideFlag (0);};case 2:if _becg .GBAtX [0]!=2||_becg .GBAtY [0]!=-1{_becg .setOverrideFlag (0);
};case 3:if _becg .GBAtX [0]!=2||_becg .GBAtY [0]!=-1{_becg .setOverrideFlag (0);};};return nil ;};func (_eee *Header )GetSegmentData ()(Segmenter ,error ){var _bfcf Segmenter ;if _eee .SegmentData !=nil {_bfcf =_eee .SegmentData ;};if _bfcf ==nil {_aebb ,_fgec :=_eeeg [_eee .Type ];
if !_fgec {return nil ,_bg .Errorf ("\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u002f\u0020\u0025\u0064\u0020\u0063\u0072e\u0061t\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e\u0020",_eee .Type ,_eee .Type );};_bfcf =_aebb ();
_ed .Log .Trace ("\u005b\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u0074\u0020\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0030\u0034\u0058",_eee .SegmentNumber ,_eee .SegmentDataStartOffset );
_ggfd ,_cdge :=_eee .subInputReader ();if _cdge !=nil {return nil ,_cdge ;};if _gafa :=_bfcf .Init (_eee ,_ggfd );_gafa !=nil {_ed .Log .Debug ("\u0049\u006e\u0069\u0074 \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076 \u0066o\u0072\u0020\u0074\u0079\u0070\u0065\u003a \u0025\u0054",_gafa ,_bfcf );
return nil ,_gafa ;};_eee .SegmentData =_bfcf ;};return _bfcf ,nil ;};func (_eeag *SymbolDictionary )GetDictionary ()([]*_cab .Bitmap ,error ){_ed .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c-\u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){_ed .Log .Trace ("\u005b\u0053\u0059M\u0042\u004f\u004c\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
_ed .Log .Trace ("\u005b\u0053Y\u004d\u0042\u004f\u004c\u002dD\u0049\u0043\u0054\u0049\u004fN\u0041\u0052\u0059\u005d\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0020\u000a\u0045\u0078\u003a\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u000a\u006e\u0065\u0077\u003a\u0027\u0025\u0073\u0027",_eeag ._adgfe ,_eeag ._bfbgg );
}();if _eeag ._adgfe ==nil {var _fceg error ;if _eeag .UseRefinementAggregation {_eeag ._cccf =_eeag .getSbSymCodeLen ();};if !_eeag .IsHuffmanEncoded {if _fceg =_eeag .setCodingStatistics ();_fceg !=nil {return nil ,_fceg ;};};_eeag ._bfbgg =make ([]*_cab .Bitmap ,_eeag .NumberOfNewSymbols );
var _fafb []int ;if _eeag .IsHuffmanEncoded &&!_eeag .UseRefinementAggregation {_fafb =make ([]int ,_eeag .NumberOfNewSymbols );};if _fceg =_eeag .setSymbolsArray ();_fceg !=nil {return nil ,_fceg ;};var _ecg ,_dgcg int64 ;_eeag ._edage =0;for _eeag ._edage < _eeag .NumberOfNewSymbols {_dgcg ,_fceg =_eeag .decodeHeightClassDeltaHeight ();
if _fceg !=nil {return nil ,_fceg ;};_ecg +=_dgcg ;var _cbfb ,_dga uint32 ;_bfab :=int64 (_eeag ._edage );for {var _ggfc int64 ;_ggfc ,_fceg =_eeag .decodeDifferenceWidth ();if _bgg .Is (_fceg ,_cae .ErrOOB ){break ;};if _fceg !=nil {return nil ,_fceg ;
};if _eeag ._edage >=_eeag .NumberOfNewSymbols {break ;};_cbfb +=uint32 (_ggfc );_dga +=_cbfb ;if !_eeag .IsHuffmanEncoded ||_eeag .UseRefinementAggregation {if !_eeag .UseRefinementAggregation {_fceg =_eeag .decodeDirectlyThroughGenericRegion (_cbfb ,uint32 (_ecg ));
if _fceg !=nil {return nil ,_fceg ;};}else {_fceg =_eeag .decodeAggregate (_cbfb ,uint32 (_ecg ));if _fceg !=nil {return nil ,_fceg ;};};}else if _eeag .IsHuffmanEncoded &&!_eeag .UseRefinementAggregation {_fafb [_eeag ._edage ]=int (_cbfb );};_eeag ._edage ++;
};if _eeag .IsHuffmanEncoded &&!_eeag .UseRefinementAggregation {var _gece int64 ;if _eeag .SdHuffBMSizeSelection ==0{var _agf _ab .Tabler ;_agf ,_fceg =_ab .GetStandardTable (1);if _fceg !=nil {return nil ,_fceg ;};_gece ,_fceg =_agf .Decode (_eeag ._defe );
if _fceg !=nil {return nil ,_fceg ;};}else {_gece ,_fceg =_eeag .huffDecodeBmSize ();if _fceg !=nil {return nil ,_fceg ;};};_eeag ._defe .Align ();var _geff *_cab .Bitmap ;_geff ,_fceg =_eeag .decodeHeightClassCollectiveBitmap (_gece ,uint32 (_ecg ),_dga );
if _fceg !=nil {return nil ,_fceg ;};_fceg =_eeag .decodeHeightClassBitmap (_geff ,_bfab ,int (_ecg ),_fafb );if _fceg !=nil {return nil ,_fceg ;};};};_bdda ,_fceg :=_eeag .getToExportFlags ();if _fceg !=nil {return nil ,_fceg ;};_eeag .setExportedSymbols (_bdda );
};return _eeag ._adgfe ,nil ;};func (_gefb *SymbolDictionary )parseHeader ()(_eeee error ){_ed .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _eeee !=nil {_ed .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u0020\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u005b\u0050\u0041\u0052SE\u002d\u0048\u0045A\u0044\u0045R\u005d\u0020\u0066\u0061\u0069\u006ce\u0064\u002e \u0025\u0076",_eeee );
}else {_ed .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _eeee =_gefb .readRegionFlags ();_eeee !=nil {return _eeee ;};if _eeee =_gefb .setAtPixels ();_eeee !=nil {return _eeee ;};if _eeee =_gefb .setRefinementAtPixels ();_eeee !=nil {return _eeee ;};if _eeee =_gefb .readNumberOfExportedSymbols ();_eeee !=nil {return _eeee ;
};if _eeee =_gefb .readNumberOfNewSymbols ();_eeee !=nil {return _eeee ;};if _eeee =_gefb .setInSyms ();_eeee !=nil {return _eeee ;};if _gefb ._gacbf {_dagf :=_gefb .Header .RTSegments ;for _adfc :=len (_dagf )-1;_adfc >=0;_adfc --{if _dagf [_adfc ].Type ==0{_ebdd ,_fefc :=_dagf [_adfc ].SegmentData .(*SymbolDictionary );
if !_fefc {_eeee =_bg .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074:\u0020\u0025\u0076\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020S\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006fna\u0072\u0079\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_dagf [_adfc ]);
return _eeee ;};if _ebdd ._gacbf {_gefb .setRetainedCodingContexts (_ebdd );};break ;};};};if _eeee =_gefb .checkInput ();_eeee !=nil {return _eeee ;};return nil ;};func (_ff *EndOfStripe )LineNumber ()int {return _ff ._cd };func (_edbc *GenericRegion )String ()string {_aacg :=&_b .Builder {};
_aacg .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_aacg .WriteString (_edbc .RegionSegment .String ()+"\u000a");_aacg .WriteString (_bg .Sprintf ("\u0009\u002d\u0020Us\u0065\u0045\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_edbc .UseExtTemplates ));
_aacg .WriteString (_bg .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0044\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_edbc .IsTPGDon ));_aacg .WriteString (_bg .Sprintf ("\u0009-\u0020G\u0042\u0054\u0065\u006d\u0070l\u0061\u0074e\u003a\u0020\u0025\u0064\u000a",_edbc .GBTemplate ));
_aacg .WriteString (_bg .Sprintf ("\t\u002d \u0049\u0073\u004d\u004d\u0052\u0045\u006e\u0063o\u0064\u0065\u0064\u003a %\u0076\u000a",_edbc .IsMMREncoded ));_aacg .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_edbc .GBAtX ));
_aacg .WriteString (_bg .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_edbc .GBAtY ));_aacg .WriteString (_bg .Sprintf ("\t\u002d \u0047\u0042\u0041\u0074\u004f\u0076\u0065\u0072r\u0069\u0064\u0065\u003a %\u0076\u000a",_edbc .GBAtOverride ));
return _aacg .String ();};func (_bagf *template0 )form (_aee ,_fdf ,_bec ,_cga ,_ddb int16 )int16 {return (_aee <<10)|(_fdf <<7)|(_bec <<4)|(_cga <<1)|_ddb ;};func (_fbadd *GenericRegion )setParameters (_ece bool ,_fgbg ,_aec int64 ,_dbbg ,_ecag uint32 ){_fbadd .IsMMREncoded =_ece ;
_fbadd .DataOffset =_fgbg ;_fbadd .DataLength =_aec ;_fbadd .RegionSegment .BitmapHeight =_dbbg ;_fbadd .RegionSegment .BitmapWidth =_ecag ;_fbadd ._beec =nil ;_fbadd .Bitmap =nil ;};func (_ccfd *GenericRegion )setOverrideFlag (_abg int ){_ccfd .GBAtOverride [_abg ]=true ;
_ccfd ._cad =true ;};func (_adgb *HalftoneRegion )computeY (_fccf ,_agcc int )int {return _adgb .shiftAndFill (int (_adgb .HGridY )+_fccf *int (_adgb .HRegionX )-_agcc *int (_adgb .HRegionY ));};func (_efd *GenericRefinementRegion )setParameters (_cdc *_a .DecoderStats ,_eca *_a .Decoder ,_afga int8 ,_gaf ,_baea uint32 ,_dead *_cab .Bitmap ,_gafe ,_gbd int32 ,_gge bool ,_abce []int8 ,_ddc []int8 ){_ed .Log .Trace ("\u005b\u0047\u0045NE\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052E\u0047I\u004fN\u005d \u0073\u0065\u0074\u0050\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");
if _cdc !=nil {_efd ._g =_cdc ;};if _eca !=nil {_efd ._ac =_eca ;};_efd .TemplateID =_afga ;_efd .RegionInfo .BitmapWidth =_gaf ;_efd .RegionInfo .BitmapHeight =_baea ;_efd .ReferenceBitmap =_dead ;_efd .ReferenceDX =_gafe ;_efd .ReferenceDY =_gbd ;_efd .IsTPGROn =_gge ;
_efd .GrAtX =_abce ;_efd .GrAtY =_ddc ;_efd .RegionBitmap =nil ;_ed .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073 f\u0069\u006ei\u0073\u0068\u0065\u0064\u002e\u0020\u0025\u0073",_efd );
};func _fbb (_bfbg _ca .StreamReader ,_bed *Header )*GenericRefinementRegion {return &GenericRefinementRegion {_de :_bfbg ,RegionInfo :NewRegionSegment (_bfbg ),_egb :_bed ,_dad :&template0 {},_fd :&template1 {}};};type template0 struct{};func (_bcbg *TableSegment )HtHigh ()int32 {return _bcbg ._eaea };
type TextRegion struct{_abfe _ca .StreamReader ;RegionInfo *RegionSegment ;SbrTemplate int8 ;SbDsOffset int8 ;DefaultPixel int8 ;CombinationOperator _cab .CombinationOperator ;IsTransposed int8 ;ReferenceCorner int16 ;LogSBStrips int16 ;UseRefinement bool ;
IsHuffmanEncoded bool ;SbHuffRSize int8 ;SbHuffRDY int8 ;SbHuffRDX int8 ;SbHuffRDHeight int8 ;SbHuffRDWidth int8 ;SbHuffDT int8 ;SbHuffDS int8 ;SbHuffFS int8 ;SbrATX []int8 ;SbrATY []int8 ;NumberOfSymbolInstances uint32 ;_caeec int64 ;SbStrips int8 ;NumberOfSymbols uint32 ;
RegionBitmap *_cab .Bitmap ;Symbols []*_cab .Bitmap ;_aaf *_a .Decoder ;_eeeea *GenericRefinementRegion ;_bacd *_a .DecoderStats ;_adad *_a .DecoderStats ;_ecaba *_a .DecoderStats ;_dbcf *_a .DecoderStats ;_eadf *_a .DecoderStats ;_ccgad *_a .DecoderStats ;
_gafbb *_a .DecoderStats ;_agffe *_a .DecoderStats ;_gdcb *_a .DecoderStats ;_cbgg *_a .DecoderStats ;_ebgb *_a .DecoderStats ;_cdfff int8 ;_eegd *_ab .FixedSizeTable ;Header *Header ;_efdgc _ab .Tabler ;_fcfc _ab .Tabler ;_ccda _ab .Tabler ;_gdag _ab .Tabler ;
_agdc _ab .Tabler ;_eaaff _ab .Tabler ;_aae _ab .Tabler ;_bcaaa _ab .Tabler ;_gadd ,_bcbgd map[int ]int ;_cbea []int ;_eegf *_cab .Points ;_egaf *_cab .Bitmaps ;_bcefe *_bd .IntSlice ;_cbfg ,_decc int ;_egaff *_cab .Boxes ;};type Pager interface{GetSegment (int )(*Header ,error );
GetBitmap ()(*_cab .Bitmap ,error );};func (_cgbc *Header )readHeaderLength (_faeg _ca .StreamReader ,_dbff int64 ){_cgbc .HeaderLength =_faeg .StreamPosition ()-_dbff ;};func (_dbfg *Header )readSegmentPageAssociation (_bgc Documenter ,_abeg _ca .StreamReader ,_fafcd uint64 ,_fedc ...int )(_ddcc error ){const _dec ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074P\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061t\u0069\u006f\u006e";
if !_dbfg .PageAssociationFieldSize {_dbfd ,_egg :=_abeg .ReadBits (8);if _egg !=nil {return _dg .Wrap (_egg ,_dec ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_dbfg .PageAssociation =int (_dbfd &0xFF);}else {_acgg ,_baf :=_abeg .ReadBits (32);
if _baf !=nil {return _dg .Wrap (_baf ,_dec ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_dbfg .PageAssociation =int (_acgg &_c .MaxInt32 );};if _fafcd ==0{return nil ;};if _dbfg .PageAssociation !=0{_beaa ,_ebeb :=_bgc .GetPage (_dbfg .PageAssociation );
if _ebeb !=nil {return _dg .Wrap (_ebeb ,_dec ,"\u0061s\u0073\u006f\u0063\u0069a\u0074\u0065\u0064\u0020\u0070a\u0067e\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006ed");};var _ccba int ;for _agca :=uint64 (0);_agca < _fafcd ;_agca ++{_ccba =_fedc [_agca ];
_dbfg .RTSegments [_agca ],_ebeb =_beaa .GetSegment (_ccba );if _ebeb !=nil {var _eaagb error ;_dbfg .RTSegments [_agca ],_eaagb =_bgc .GetGlobalSegment (_ccba );if _eaagb !=nil {return _dg .Wrapf (_ebeb ,_dec ,"\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020s\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064\u0020\u0061\u0074\u0020pa\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0072\u0020\u0069\u006e\u0020\u0067\u006c\u006f\u0062\u0061\u006c\u0073",_dbfg .PageAssociation );
};};};return nil ;};for _gagd :=uint64 (0);_gagd < _fafcd ;_gagd ++{_dbfg .RTSegments [_gagd ],_ddcc =_bgc .GetGlobalSegment (_fedc [_gagd ]);if _ddcc !=nil {return _dg .Wrapf (_ddcc ,_dec ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u003a\u0020\u0027\u0025d\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064",_fedc [_gagd ]);
};};return nil ;};func (_ddaff *PageInformationSegment )checkInput ()error {if _ddaff .PageBMHeight ==_c .MaxInt32 {if !_ddaff .IsStripe {_ed .Log .Debug ("P\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0053\u0065\u0067me\u006e\u0074\u002e\u0049s\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0073\u0068ou\u006c\u0064 \u0062\u0065\u0020\u0074\u0072\u0075\u0065\u002e");
};};return nil ;};func (_dafb *Header )referenceSize ()uint {switch {case _dafb .SegmentNumber <=255:return 1;case _dafb .SegmentNumber <=65535:return 2;default:return 4;};};type Type int ;func (_cdeb *TextRegion )blit (_dadc *_cab .Bitmap ,_gaec int64 )error {if _cdeb .IsTransposed ==0&&(_cdeb .ReferenceCorner ==2||_cdeb .ReferenceCorner ==3){_cdeb ._caeec +=int64 (_dadc .Width -1);
}else if _cdeb .IsTransposed ==1&&(_cdeb .ReferenceCorner ==0||_cdeb .ReferenceCorner ==2){_cdeb ._caeec +=int64 (_dadc .Height -1);};_dcf :=_cdeb ._caeec ;if _cdeb .IsTransposed ==1{_dcf ,_gaec =_gaec ,_dcf ;};switch _cdeb .ReferenceCorner {case 0:_gaec -=int64 (_dadc .Height -1);
case 2:_gaec -=int64 (_dadc .Height -1);_dcf -=int64 (_dadc .Width -1);case 3:_dcf -=int64 (_dadc .Width -1);};_baga :=_cab .Blit (_dadc ,_cdeb .RegionBitmap ,int (_dcf ),int (_gaec ),_cdeb .CombinationOperator );if _baga !=nil {return _baga ;};if _cdeb .IsTransposed ==0&&(_cdeb .ReferenceCorner ==0||_cdeb .ReferenceCorner ==1){_cdeb ._caeec +=int64 (_dadc .Width -1);
};if _cdeb .IsTransposed ==1&&(_cdeb .ReferenceCorner ==1||_cdeb .ReferenceCorner ==3){_cdeb ._caeec +=int64 (_dadc .Height -1);};return nil ;};func (_gefa *SymbolDictionary )encodeNumSyms (_fgba _ca .BinaryWriter )(_decf int ,_fafe error ){const _bgfe ="\u0065\u006e\u0063\u006f\u0064\u0065\u004e\u0075\u006d\u0053\u0079\u006d\u0073";
_eeac :=make ([]byte ,4);_eg .BigEndian .PutUint32 (_eeac ,_gefa .NumberOfExportedSymbols );if _decf ,_fafe =_fgba .Write (_eeac );_fafe !=nil {return _decf ,_dg .Wrap (_fafe ,_bgfe ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};_eg .BigEndian .PutUint32 (_eeac ,_gefa .NumberOfNewSymbols );_abec ,_fafe :=_fgba .Write (_eeac );if _fafe !=nil {return _decf ,_dg .Wrap (_fafe ,_bgfe ,"n\u0065\u0077\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};return _decf +_abec ,nil ;};var _ _ab .BasicTabler =&TableSegment {};
func (_bbdb *TextRegion )decodeRdh ()(int64 ,error ){const _dagcb ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064h";if _bbdb .IsHuffmanEncoded {if _bbdb .SbHuffRDHeight ==3{if _bbdb ._agdc ==nil {var (_fdea int ;_ggged error ;);if _bbdb .SbHuffFS ==3{_fdea ++;
};if _bbdb .SbHuffDS ==3{_fdea ++;};if _bbdb .SbHuffDT ==3{_fdea ++;};if _bbdb .SbHuffRDWidth ==3{_fdea ++;};_bbdb ._agdc ,_ggged =_bbdb .getUserTable (_fdea );if _ggged !=nil {return 0,_dg .Wrap (_ggged ,_dagcb ,"");};};return _bbdb ._agdc .Decode (_bbdb ._abfe );
};_fcbf ,_bgab :=_ab .GetStandardTable (14+int (_bbdb .SbHuffRDHeight ));if _bgab !=nil {return 0,_dg .Wrap (_bgab ,_dagcb ,"");};return _fcbf .Decode (_bbdb ._abfe );};_afff ,_dbdba :=_bbdb ._aaf .DecodeInt (_bbdb ._gafbb );if _dbdba !=nil {return 0,_dg .Wrap (_dbdba ,_dagcb ,"");
};return int64 (_afff ),nil ;};