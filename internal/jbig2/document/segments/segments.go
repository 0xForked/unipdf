//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package segments ;import (_eg "encoding/binary";_egb "errors";_be "fmt";_gg "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_eeg "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_fad "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_a "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/arithmetic";_ga "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/huffman";_cc "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/mmr";_fc "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/arithmetic";
_ff "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_g "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_fa "golang.org/x/xerrors";_ef "image";_ee "io";_e "math";_b "strings";_f "time";);func (_aff *GenericRegion )parseHeader ()(_aef error ){_gg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052I\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0050\u0061\u0072s\u0069\u006e\u0067\u0048\u0065\u0061\u0064e\u0072\u002e\u002e\u002e");
defer func (){if _aef !=nil {_gg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e]\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065r\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0077\u0069th\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u0025\u0076",_aef );
}else {_gg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049C\u002d\u0052\u0045G\u0049\u004f\u004e]\u0020\u0050a\u0072\u0073\u0069\u006e\u0067\u0048e\u0061de\u0072\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0053\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079\u002e\u002e\u002e");
};}();var (_caae int ;_dcd uint64 ;);if _aef =_aff .RegionSegment .parseHeader ();_aef !=nil {return _aef ;};if _ ,_aef =_aff ._ccgb .ReadBits (3);_aef !=nil {return _aef ;};_caae ,_aef =_aff ._ccgb .ReadBit ();if _aef !=nil {return _aef ;};if _caae ==1{_aff .UseExtTemplates =true ;
};_caae ,_aef =_aff ._ccgb .ReadBit ();if _aef !=nil {return _aef ;};if _caae ==1{_aff .IsTPGDon =true ;};_dcd ,_aef =_aff ._ccgb .ReadBits (2);if _aef !=nil {return _aef ;};_aff .GBTemplate =byte (_dcd &0xf);_caae ,_aef =_aff ._ccgb .ReadBit ();if _aef !=nil {return _aef ;
};if _caae ==1{_aff .IsMMREncoded =true ;};if !_aff .IsMMREncoded {_bffe :=1;if _aff .GBTemplate ==0{_bffe =4;if _aff .UseExtTemplates {_bffe =12;};};if _aef =_aff .readGBAtPixels (_bffe );_aef !=nil {return _aef ;};};if _aef =_aff .computeSegmentDataStructure ();
_aef !=nil {return _aef ;};_gg .Log .Trace ("\u0025\u0073",_aff );return nil ;};func (_bdab *SymbolDictionary )retrieveImportSymbols ()error {for _ ,_adfd :=range _bdab .Header .RTSegments {if _adfd .Type ==0{_babcb ,_dcdc :=_adfd .GetSegmentData ();if _dcdc !=nil {return _dcdc ;
};_agcd ,_dgcb :=_babcb .(*SymbolDictionary );if !_dgcb {return _be .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0044\u0061\u0074a\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u003a\u0020%\u0054",_babcb );
};_ebe ,_dcdc :=_agcd .GetDictionary ();if _dcdc !=nil {return _be .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064 \u0073\u0065\u0067m\u0065\u006e\u0074 \u0077\u0069t\u0068\u0020\u0069\u006e\u0064\u0065x\u003a %\u0064\u0020\u0067\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0073",_adfd .SegmentNumber ,_dcdc .Error ());
};_bdab ._ebdcf =append (_bdab ._ebdcf ,_ebe ...);_bdab ._aaca +=_agcd .NumberOfExportedSymbols ;};};return nil ;};func (_egff *RegionSegment )readCombinationOperator ()error {_dcfaf ,_bcae :=_egff ._daggc .ReadBits (3);if _bcae !=nil {return _bcae ;};
_egff .CombinaionOperator =_fad .CombinationOperator (_dcfaf &0xF);return nil ;};func (_bd *GenericRefinementRegion )decodeTypicalPredictedLine (_gga ,_gb ,_eef ,_fcd ,_fce ,_bdb int )error {_dg :=_gga -int (_bd .ReferenceDY );_edb :=_bd .ReferenceBitmap .GetByteIndex (0,_dg );
_bae :=_bd .RegionBitmap .GetByteIndex (0,_gga );var _dad error ;switch _bd .TemplateID {case 0:_dad =_bd .decodeTypicalPredictedLineTemplate0 (_gga ,_gb ,_eef ,_fcd ,_fce ,_bdb ,_bae ,_dg ,_edb );case 1:_dad =_bd .decodeTypicalPredictedLineTemplate1 (_gga ,_gb ,_eef ,_fcd ,_fce ,_bdb ,_bae ,_dg ,_edb );
};return _dad ;};func (_acgd *PageInformationSegment )parseHeader ()(_gega error ){_gg .Log .Trace ("\u005b\u0050\u0061\u0067\u0065I\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067m\u0065\u006e\u0074\u005d\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u002e\u002e");
defer func (){var _agbb ="[\u0050\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072m\u0061\u0074\u0069\u006f\u006e\u0053\u0065gm\u0065\u006e\u0074\u005d \u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065ad\u0065\u0072 \u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064";
if _gega !=nil {_agbb +="\u0020\u0077\u0069t\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u0020"+_gega .Error ();}else {_agbb +="\u0020\u0073\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079";};_gg .Log .Trace (_agbb );}();if _gega =_acgd .readWidthAndHeight ();
_gega !=nil {return _gega ;};if _gega =_acgd .readResolution ();_gega !=nil {return _gega ;};_ ,_gega =_acgd ._dbd .ReadBit ();if _gega !=nil {return _gega ;};if _gega =_acgd .readCombinationOperatorOverrideAllowed ();_gega !=nil {return _gega ;};if _gega =_acgd .readRequiresAuxiliaryBuffer ();
_gega !=nil {return _gega ;};if _gega =_acgd .readCombinationOperator ();_gega !=nil {return _gega ;};if _gega =_acgd .readDefaultPixelValue ();_gega !=nil {return _gega ;};if _gega =_acgd .readContainsRefinement ();_gega !=nil {return _gega ;};if _gega =_acgd .readIsLossless ();
_gega !=nil {return _gega ;};if _gega =_acgd .readIsStriped ();_gega !=nil {return _gega ;};if _gega =_acgd .readMaxStripeSize ();_gega !=nil {return _gega ;};if _gega =_acgd .checkInput ();_gega !=nil {return _gega ;};_gg .Log .Trace ("\u0025\u0073",_acgd );
return nil ;};func (_aeca *TextRegion )setParameters (_bdd *_a .Decoder ,_eafe ,_dbga bool ,_bcba ,_fdggf uint32 ,_dbdc uint32 ,_fgade int8 ,_dfgba uint32 ,_bedd int8 ,_fcbe _fad .CombinationOperator ,_cada int8 ,_dcffd int16 ,_dbfac ,_cbadc ,_bebe ,_gaef ,_geegf ,_geebe ,_fcgb ,_acabf ,_fedcf ,_fbed int8 ,_geef ,_edac []int8 ,_eaa []*_fad .Bitmap ,_gade int8 ){_aeca ._fgeb =_bdd ;
_aeca .IsHuffmanEncoded =_eafe ;_aeca .UseRefinement =_dbga ;_aeca .RegionInfo .BitmapWidth =_bcba ;_aeca .RegionInfo .BitmapHeight =_fdggf ;_aeca .NumberOfSymbolInstances =_dbdc ;_aeca .SbStrips =_fgade ;_aeca .NumberOfSymbols =_dfgba ;_aeca .DefaultPixel =_bedd ;
_aeca .CombinationOperator =_fcbe ;_aeca .IsTransposed =_cada ;_aeca .ReferenceCorner =_dcffd ;_aeca .SbDsOffset =_dbfac ;_aeca .SbHuffFS =_cbadc ;_aeca .SbHuffDS =_bebe ;_aeca .SbHuffDT =_gaef ;_aeca .SbHuffRDWidth =_geegf ;_aeca .SbHuffRDHeight =_geebe ;
_aeca .SbHuffRSize =_fedcf ;_aeca .SbHuffRDX =_fcgb ;_aeca .SbHuffRDY =_acabf ;_aeca .SbrTemplate =_fbed ;_aeca .SbrATX =_geef ;_aeca .SbrATY =_edac ;_aeca .Symbols =_eaa ;_aeca ._bdcf =_gade ;};type template1 struct{};func (_edfa Type )String ()string {switch _edfa {case TSymbolDictionary :return "\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079";
case TIntermediateTextRegion :return "\u0049n\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020T\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateTextRegion :return "I\u006d\u006d\u0065\u0064ia\u0074e\u0020\u0054\u0065\u0078\u0074 \u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateLosslessTextRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020L\u006f\u0073\u0073\u006c\u0065\u0073\u0073 \u0054\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TPatternDictionary :return "\u0050a\u0074t\u0065\u0072\u006e\u0020\u0044i\u0063\u0074i\u006f\u006e\u0061\u0072\u0079";
case TIntermediateHalftoneRegion :return "\u0049\u006e\u0074\u0065r\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0048\u0061l\u0066t\u006f\u006e\u0065\u0020\u0052\u0065\u0067i\u006f\u006e";case TImmediateHalftoneRegion :return "\u0049m\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u0048\u0061l\u0066t\u006fn\u0065\u0020\u0052\u0065\u0067\u0069\u006fn";
case TImmediateLosslessHalftoneRegion :return "\u0049\u006d\u006ded\u0069\u0061\u0074\u0065\u0020\u004c\u006f\u0073\u0073l\u0065s\u0073 \u0048a\u006c\u0066\u0074\u006f\u006e\u0065\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TIntermediateGenericRegion :return "I\u006e\u0074\u0065\u0072\u006d\u0065d\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020R\u0065g\u0069\u006f\u006e";
case TImmediateGenericRegion :return "\u0049m\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006ee\u0072\u0069\u0063\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateLosslessGenericRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u004c\u006f\u0073\u0073\u006c\u0065\u0073\u0073\u0020\u0047e\u006e\u0065\u0072\u0069\u0063\u0020\u0052e\u0067\u0069\u006f\u006e";
case TIntermediateGenericRefinementRegion :return "\u0049\u006e\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0020\u0052\u0065\u0066i\u006e\u0065\u006d\u0065\u006et\u0020\u0052e\u0067\u0069\u006f\u006e";
case TImmediateGenericRefinementRegion :return "I\u006d\u006d\u0065\u0064\u0069\u0061t\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020\u0052\u0065\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0067\u0069o\u006e";case TImmediateLosslessGenericRefinementRegion :return "\u0049m\u006d\u0065d\u0069\u0061\u0074\u0065 \u004c\u006f\u0073s\u006c\u0065\u0073\u0073\u0020\u0047\u0065\u006e\u0065ri\u0063\u0020\u0052e\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020R\u0065\u0067i\u006f\u006e";
case TPageInformation :return "\u0050\u0061g\u0065\u0020\u0049n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e";case TEndOfPage :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0050\u0061\u0067\u0065";case TEndOfStrip :return "\u0045\u006e\u0064 \u004f\u0066\u0020\u0053\u0074\u0072\u0069\u0070";
case TEndOfFile :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0046\u0069\u006c\u0065";case TProfiles :return "\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0073";case TTables :return "\u0054\u0061\u0062\u006c\u0065\u0073";case TExtension :return "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn";
case TBitmap :return "\u0042\u0069\u0074\u006d\u0061\u0070";};return "I\u006ev\u0061\u006c\u0069\u0064\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0020Ki\u006e\u0064";};func (_gegd *PatternDictionary )readPatternWidthAndHeight ()error {_bcce ,_ggbc :=_gegd ._eddg .ReadByte ();
if _ggbc !=nil {return _ggbc ;};_gegd .HdpWidth =_bcce ;_bcce ,_ggbc =_gegd ._eddg .ReadByte ();if _ggbc !=nil {return _ggbc ;};_gegd .HdpHeight =_bcce ;return nil ;};type template0 struct{};func (_acae *TableSegment )parseHeader ()error {var (_cbed int ;
_gedb uint64 ;_aaeee error ;);_cbed ,_aaeee =_acae ._bgdb .ReadBit ();if _aaeee !=nil {return _aaeee ;};if _cbed ==1{return _be .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0061\u0062\u006c\u0065 \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0064e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u002e\u0020\u0042\u002e\u0032\u002e1\u0020\u0043\u006f\u0064\u0065\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0066\u006c\u0061\u0067\u0073\u003a\u0020\u0042\u0069\u0074\u0020\u0037\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u007a\u0065\u0072\u006f\u002e\u0020\u0057a\u0073\u003a \u0025\u0064",_cbed );
};if _gedb ,_aaeee =_acae ._bgdb .ReadBits (3);_aaeee !=nil {return _aaeee ;};_acae ._ecfa =(int32 (_gedb )+1)&0xf;if _gedb ,_aaeee =_acae ._bgdb .ReadBits (3);_aaeee !=nil {return _aaeee ;};_acae ._ddfa =(int32 (_gedb )+1)&0xf;if _gedb ,_aaeee =_acae ._bgdb .ReadBits (32);
_aaeee !=nil {return _aaeee ;};_acae ._cgbf =int32 (_gedb &_e .MaxInt32 );if _gedb ,_aaeee =_acae ._bgdb .ReadBits (32);_aaeee !=nil {return _aaeee ;};_acae ._ggeg =int32 (_gedb &_e .MaxInt32 );return nil ;};func (_eedg *HalftoneRegion )GetRegionBitmap ()(*_fad .Bitmap ,error ){if _eedg .HalftoneRegionBitmap !=nil {return _eedg .HalftoneRegionBitmap ,nil ;
};var _gaaa error ;_eedg .HalftoneRegionBitmap =_fad .New (int (_eedg .RegionSegment .BitmapWidth ),int (_eedg .RegionSegment .BitmapHeight ));if _eedg .Patterns ==nil ||len (_eedg .Patterns )==0{_eedg .Patterns ,_gaaa =_eedg .GetPatterns ();if _gaaa !=nil {return nil ,_gaaa ;
};};if _eedg .HDefaultPixel ==1{_eedg .HalftoneRegionBitmap .SetDefaultPixel ();};_aabdg :=_e .Ceil (_e .Log (float64 (len (_eedg .Patterns )))/_e .Log (2));_afff :=int (_aabdg );var _fgdcg [][]int ;_fgdcg ,_gaaa =_eedg .grayScaleDecoding (_afff );if _gaaa !=nil {return nil ,_gaaa ;
};if _gaaa =_eedg .renderPattern (_fgdcg );_gaaa !=nil {return nil ,_gaaa ;};return _eedg .HalftoneRegionBitmap ,nil ;};func (_geg *Header )writeReferredToCount (_becb _c .BinaryWriter )(_cga int ,_edcd error ){const _gaee ="w\u0072i\u0074\u0065\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0043ou\u006e\u0074";
_geg .RTSNumbers =make ([]int ,len (_geg .RTSegments ));for _cbbd ,_acf :=range _geg .RTSegments {_geg .RTSNumbers [_cbbd ]=int (_acf .SegmentNumber );};if len (_geg .RTSNumbers )<=4{var _gdd byte ;if len (_geg .RetainBits )>=1{_gdd =_geg .RetainBits [0];
};_gdd |=byte (len (_geg .RTSNumbers ))<<5;if _edcd =_becb .WriteByte (_gdd );_edcd !=nil {return 0,_ff .Wrap (_edcd ,_gaee ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return 1,nil ;};_aedf :=uint32 (len (_geg .RTSNumbers ));
_daf :=make ([]byte ,4+_eeg .Ceil (len (_geg .RTSNumbers )+1,8));_aedf |=0x7<<29;_eg .BigEndian .PutUint32 (_daf ,_aedf );copy (_daf [1:],_geg .RetainBits );_cga ,_edcd =_becb .Write (_daf );if _edcd !=nil {return 0,_ff .Wrap (_edcd ,_gaee ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};return _cga ,nil ;};func (_ebgb *GenericRegion )GetRegionInfo ()*RegionSegment {return _ebgb .RegionSegment };func (_faag *TextRegion )GetRegionInfo ()*RegionSegment {return _faag .RegionInfo };func (_gbgc *PatternDictionary )readTemplate ()error {_bfdaa ,_cbeaf :=_gbgc ._eddg .ReadBits (2);
if _cbeaf !=nil {return _cbeaf ;};_gbgc .HDTemplate =byte (_bfdaa );return nil ;};func (_dadg *GenericRefinementRegion )setParameters (_bcb *_a .DecoderStats ,_acdb *_a .Decoder ,_ceg int8 ,_cdd ,_fbf uint32 ,_gda *_fad .Bitmap ,_dfea ,_cdad int32 ,_bbcg bool ,_bbb []int8 ,_cce []int8 ){_gg .Log .Trace ("\u005b\u0047\u0045NE\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052E\u0047I\u004fN\u005d \u0073\u0065\u0074\u0050\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");
if _bcb !=nil {_dadg ._agg =_bcb ;};if _acdb !=nil {_dadg ._ccg =_acdb ;};_dadg .TemplateID =_ceg ;_dadg .RegionInfo .BitmapWidth =_cdd ;_dadg .RegionInfo .BitmapHeight =_fbf ;_dadg .ReferenceBitmap =_gda ;_dadg .ReferenceDX =_dfea ;_dadg .ReferenceDY =_cdad ;
_dadg .IsTPGROn =_bbcg ;_dadg .GrAtX =_bbb ;_dadg .GrAtY =_cce ;_dadg .RegionBitmap =nil ;_gg .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073 f\u0069\u006ei\u0073\u0068\u0065\u0064\u002e\u0020\u0025\u0073",_dadg );
};func (_edag *GenericRefinementRegion )readAtPixels ()error {_edag .GrAtX =make ([]int8 ,2);_edag .GrAtY =make ([]int8 ,2);_dff ,_baa :=_edag ._egf .ReadByte ();if _baa !=nil {return _baa ;};_edag .GrAtX [0]=int8 (_dff );_dff ,_baa =_edag ._egf .ReadByte ();
if _baa !=nil {return _baa ;};_edag .GrAtY [0]=int8 (_dff );_dff ,_baa =_edag ._egf .ReadByte ();if _baa !=nil {return _baa ;};_edag .GrAtX [1]=int8 (_dff );_dff ,_baa =_edag ._egf .ReadByte ();if _baa !=nil {return _baa ;};_edag .GrAtY [1]=int8 (_dff );
return nil ;};func (_cadg *SymbolDictionary )getSbSymCodeLen ()int8 {_fffeg :=int8 (_e .Ceil (_e .Log (float64 (_cadg ._aaca +_cadg .NumberOfNewSymbols ))/_e .Log (2)));if _cadg .IsHuffmanEncoded &&_fffeg < 1{return 1;};return _fffeg ;};func (_gaaee *SymbolDictionary )encodeSymbols (_accf _c .BinaryWriter )(_abdc int ,_egba error ){const _adgb ="\u0065\u006e\u0063o\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c";
_dabb :=_fc .New ();_dabb .Init ();_dacb ,_egba :=_gaaee ._dacge .SelectByIndexes (_gaaee ._afcg );if _egba !=nil {return 0,_ff .Wrap (_egba ,_adgb ,"\u0069n\u0069\u0074\u0069\u0061\u006c");};_bfdbd :=map[*_fad .Bitmap ]int {};for _geac ,_dgae :=range _dacb .Values {_bfdbd [_dgae ]=_geac ;
};_dacb .SortByHeight ();var _cdgb ,_gffg int ;_fbad ,_egba :=_dacb .GroupByHeight ();if _egba !=nil {return 0,_ff .Wrap (_egba ,_adgb ,"");};for _ ,_adfg :=range _fbad .Values {_gacc :=_adfg .Values [0].Height ;_ggbf :=_gacc -_cdgb ;if _egba =_dabb .EncodeInteger (_fc .IADH ,_ggbf );
_egba !=nil {return 0,_ff .Wrapf (_egba ,_adgb ,"\u0049\u0041\u0044\u0048\u0020\u0066\u006f\u0072\u0020\u0064\u0068\u003a \u0027\u0025\u0064\u0027",_ggbf );};_cdgb =_gacc ;_dfee ,_gfbeg :=_adfg .GroupByWidth ();if _gfbeg !=nil {return 0,_ff .Wrapf (_gfbeg ,_adgb ,"\u0068\u0065\u0069g\u0068\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_gacc );
};var _aaacd int ;for _ ,_eaed :=range _dfee .Values {for _ ,_agdf :=range _eaed .Values {_egcd :=_agdf .Width ;_aagff :=_egcd -_aaacd ;if _gfbeg =_dabb .EncodeInteger (_fc .IADW ,_aagff );_gfbeg !=nil {return 0,_ff .Wrapf (_gfbeg ,_adgb ,"\u0049\u0041\u0044\u0057\u0020\u0066\u006f\u0072\u0020\u0064\u0077\u003a \u0027\u0025\u0064\u0027",_aagff );
};_aaacd +=_aagff ;if _gfbeg =_dabb .EncodeBitmap (_agdf ,false );_gfbeg !=nil {return 0,_ff .Wrapf (_gfbeg ,_adgb ,"H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u0020W\u0069\u0064\u0074\u0068: \u0025\u0064",_gacc ,_egcd );};_adbd :=_bfdbd [_agdf ];
_gaaee ._ceea [_adbd ]=_gffg ;_gffg ++;};};if _gfbeg =_dabb .EncodeOOB (_fc .IADW );_gfbeg !=nil {return 0,_ff .Wrap (_gfbeg ,_adgb ,"\u0049\u0041\u0044\u0057");};};if _egba =_dabb .EncodeInteger (_fc .IAEX ,0);_egba !=nil {return 0,_ff .Wrap (_egba ,_adgb ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};if _egba =_dabb .EncodeInteger (_fc .IAEX ,len (_gaaee ._afcg ));_egba !=nil {return 0,_ff .Wrap (_egba ,_adgb ,"\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0073\u0079m\u0062\u006f\u006c\u0073");};_dabb .Final ();_adcbd ,_egba :=_dabb .WriteTo (_accf );
if _egba !=nil {return 0,_ff .Wrap (_egba ,_adgb ,"\u0077\u0072i\u0074\u0069\u006e\u0067 \u0065\u006ec\u006f\u0064\u0065\u0072\u0020\u0063\u006f\u006et\u0065\u0078\u0074\u0020\u0074\u006f\u0020\u0027\u0077\u0027\u0020\u0077r\u0069\u0074\u0065\u0072");};
return int (_adcbd ),nil ;};func (_aec *GenericRegion )Init (h *Header ,r _c .StreamReader )error {_aec .RegionSegment =NewRegionSegment (r );_aec ._ccgb =r ;return _aec .parseHeader ();};func (_gefd *GenericRegion )decodeTemplate0b (_eed ,_eag ,_ggdb int ,_bgge ,_abg int )(_eege error ){const _deed ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0062";
var (_bggd ,_cbea int ;_bec ,_gefe int ;_dge byte ;_bcd int ;);if _eed >=1{_dge ,_eege =_gefd .Bitmap .GetByte (_abg );if _eege !=nil {return _ff .Wrap (_eege ,_deed ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_bec =int (_dge );};if _eed >=2{_dge ,_eege =_gefd .Bitmap .GetByte (_abg -_gefd .Bitmap .RowStride );
if _eege !=nil {return _ff .Wrap (_eege ,_deed ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_gefe =int (_dge )<<6;};_bggd =(_bec &0xf0)|(_gefe &0x3800);for _efcc :=0;_efcc < _ggdb ;_efcc =_bcd {var (_aad byte ;_edbc int ;);_bcd =_efcc +8;if _eccf :=_eag -_efcc ;
_eccf > 8{_edbc =8;}else {_edbc =_eccf ;};if _eed > 0{_bec <<=8;if _bcd < _eag {_dge ,_eege =_gefd .Bitmap .GetByte (_abg +1);if _eege !=nil {return _ff .Wrap (_eege ,_deed ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_bec |=int (_dge );};};if _eed > 1{_gefe <<=8;
if _bcd < _eag {_dge ,_eege =_gefd .Bitmap .GetByte (_abg -_gefd .Bitmap .RowStride +1);if _eege !=nil {return _ff .Wrap (_eege ,_deed ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_gefe |=int (_dge )<<6;};};for _ffac :=0;_ffac < _edbc ;_ffac ++{_eadg :=uint (7-_ffac );
if _gefd ._gef {_cbea =_gefd .overrideAtTemplate0b (_bggd ,_efcc +_ffac ,_eed ,int (_aad ),_ffac ,int (_eadg ));_gefd ._bgca .SetIndex (int32 (_cbea ));}else {_gefd ._bgca .SetIndex (int32 (_bggd ));};var _gabff int ;_gabff ,_eege =_gefd ._efae .DecodeBit (_gefd ._bgca );
if _eege !=nil {return _ff .Wrap (_eege ,_deed ,"");};_aad |=byte (_gabff <<_eadg );_bggd =((_bggd &0x7bf7)<<1)|_gabff |((_bec >>_eadg )&0x10)|((_gefe >>_eadg )&0x800);};if _cdc :=_gefd .Bitmap .SetByte (_bgge ,_aad );_cdc !=nil {return _ff .Wrap (_cdc ,_deed ,"");
};_bgge ++;_abg ++;};return nil ;};const (ORandom OrganizationType =iota ;OSequential ;);func (_agdg *RegionSegment )Size ()int {return 17};func (_ddd *GenericRegion )overrideAtTemplate0b (_ebgg ,_dcg ,_bgf ,_acg ,_aefa ,_ecdf int )int {if _ddd .GBAtOverride [0]{_ebgg &=0xFFFD;
if _ddd .GBAtY [0]==0&&_ddd .GBAtX [0]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [0]&0x1))<<1;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [0]),_bgf +int (_ddd .GBAtY [0])))<<1;};};if _ddd .GBAtOverride [1]{_ebgg &=0xDFFF;
if _ddd .GBAtY [1]==0&&_ddd .GBAtX [1]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [1]&0x1))<<13;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [1]),_bgf +int (_ddd .GBAtY [1])))<<13;};};if _ddd .GBAtOverride [2]{_ebgg &=0xFDFF;
if _ddd .GBAtY [2]==0&&_ddd .GBAtX [2]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [2]&0x1))<<9;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [2]),_bgf +int (_ddd .GBAtY [2])))<<9;};};if _ddd .GBAtOverride [3]{_ebgg &=0xBFFF;
if _ddd .GBAtY [3]==0&&_ddd .GBAtX [3]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [3]&0x1))<<14;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [3]),_bgf +int (_ddd .GBAtY [3])))<<14;};};if _ddd .GBAtOverride [4]{_ebgg &=0xEFFF;
if _ddd .GBAtY [4]==0&&_ddd .GBAtX [4]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [4]&0x1))<<12;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [4]),_bgf +int (_ddd .GBAtY [4])))<<12;};};if _ddd .GBAtOverride [5]{_ebgg &=0xFFDF;
if _ddd .GBAtY [5]==0&&_ddd .GBAtX [5]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [5]&0x1))<<5;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [5]),_bgf +int (_ddd .GBAtY [5])))<<5;};};if _ddd .GBAtOverride [6]{_ebgg &=0xFFFB;
if _ddd .GBAtY [6]==0&&_ddd .GBAtX [6]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [6]&0x1))<<2;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [6]),_bgf +int (_ddd .GBAtY [6])))<<2;};};if _ddd .GBAtOverride [7]{_ebgg &=0xFFF7;
if _ddd .GBAtY [7]==0&&_ddd .GBAtX [7]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [7]&0x1))<<3;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [7]),_bgf +int (_ddd .GBAtY [7])))<<3;};};if _ddd .GBAtOverride [8]{_ebgg &=0xF7FF;
if _ddd .GBAtY [8]==0&&_ddd .GBAtX [8]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [8]&0x1))<<11;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [8]),_bgf +int (_ddd .GBAtY [8])))<<11;};};if _ddd .GBAtOverride [9]{_ebgg &=0xFFEF;
if _ddd .GBAtY [9]==0&&_ddd .GBAtX [9]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [9]&0x1))<<4;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [9]),_bgf +int (_ddd .GBAtY [9])))<<4;};};if _ddd .GBAtOverride [10]{_ebgg &=0x7FFF;
if _ddd .GBAtY [10]==0&&_ddd .GBAtX [10]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [10]&0x1))<<15;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [10]),_bgf +int (_ddd .GBAtY [10])))<<15;};};if _ddd .GBAtOverride [11]{_ebgg &=0xFDFF;
if _ddd .GBAtY [11]==0&&_ddd .GBAtX [11]>=-int8 (_aefa ){_ebgg |=(_acg >>uint (int8 (_ecdf )-_ddd .GBAtX [11]&0x1))<<10;}else {_ebgg |=int (_ddd .getPixel (_dcg +int (_ddd .GBAtX [11]),_bgf +int (_ddd .GBAtY [11])))<<10;};};return _ebgg ;};func (_gbgd *GenericRegion )overrideAtTemplate0a (_beefb ,_ggec ,_abf ,_cbad ,_gff ,_gcac int )int {if _gbgd .GBAtOverride [0]{_beefb &=0xFFEF;
if _gbgd .GBAtY [0]==0&&_gbgd .GBAtX [0]>=-int8 (_gff ){_beefb |=(_cbad >>uint (int8 (_gcac )-_gbgd .GBAtX [0]&0x1))<<4;}else {_beefb |=int (_gbgd .getPixel (_ggec +int (_gbgd .GBAtX [0]),_abf +int (_gbgd .GBAtY [0])))<<4;};};if _gbgd .GBAtOverride [1]{_beefb &=0xFBFF;
if _gbgd .GBAtY [1]==0&&_gbgd .GBAtX [1]>=-int8 (_gff ){_beefb |=(_cbad >>uint (int8 (_gcac )-_gbgd .GBAtX [1]&0x1))<<10;}else {_beefb |=int (_gbgd .getPixel (_ggec +int (_gbgd .GBAtX [1]),_abf +int (_gbgd .GBAtY [1])))<<10;};};if _gbgd .GBAtOverride [2]{_beefb &=0xF7FF;
if _gbgd .GBAtY [2]==0&&_gbgd .GBAtX [2]>=-int8 (_gff ){_beefb |=(_cbad >>uint (int8 (_gcac )-_gbgd .GBAtX [2]&0x1))<<11;}else {_beefb |=int (_gbgd .getPixel (_ggec +int (_gbgd .GBAtX [2]),_abf +int (_gbgd .GBAtY [2])))<<11;};};if _gbgd .GBAtOverride [3]{_beefb &=0x7FFF;
if _gbgd .GBAtY [3]==0&&_gbgd .GBAtX [3]>=-int8 (_gff ){_beefb |=(_cbad >>uint (int8 (_gcac )-_gbgd .GBAtX [3]&0x1))<<15;}else {_beefb |=int (_gbgd .getPixel (_ggec +int (_gbgd .GBAtX [3]),_abf +int (_gbgd .GBAtY [3])))<<15;};};return _beefb ;};func (_cacc *Header )readReferredToSegmentNumbers (_gdac _c .StreamReader ,_geba int )([]int ,error ){const _aggf ="\u0072\u0065\u0061\u0064R\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053e\u0067m\u0065\u006e\u0074\u004e\u0075\u006d\u0062e\u0072\u0073";
_ade :=make ([]int ,_geba );if _geba > 0{_cacc .RTSegments =make ([]*Header ,_geba );var (_fdaaa uint64 ;_aafa error ;);for _adbac :=0;_adbac < _geba ;_adbac ++{_fdaaa ,_aafa =_gdac .ReadBits (byte (_cacc .referenceSize ())<<3);if _aafa !=nil {return nil ,_ff .Wrapf (_aafa ,_aggf ,"\u0027\u0025\u0064\u0027 \u0072\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0020\u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u0075\u006db\u0065\u0072",_adbac );
};_ade [_adbac ]=int (_fdaaa &_e .MaxInt32 );};};return _ade ,nil ;};func (_bggb *Header )readHeaderLength (_dfb _c .StreamReader ,_egbd int64 ){_bggb .HeaderLength =_dfb .StreamPosition ()-_egbd ;};func (_fb *GenericRefinementRegion )decodeTypicalPredictedLineTemplate1 (_fcgc ,_fda ,_gcc ,_ce ,_bcg ,_bac ,_fg ,_ecca ,_ebd int )(_aab error ){var (_aaa ,_gbb int ;
_gbfe ,_ffd int ;_acd ,_dfe int ;_dcc byte ;);if _fcgc > 0{_dcc ,_aab =_fb .RegionBitmap .GetByte (_fg -_gcc );if _aab !=nil {return ;};_gbfe =int (_dcc );};if _ecca > 0&&_ecca <=_fb .ReferenceBitmap .Height {_dcc ,_aab =_fb .ReferenceBitmap .GetByte (_ebd -_ce +_bac );
if _aab !=nil {return ;};_ffd =int (_dcc )<<2;};if _ecca >=0&&_ecca < _fb .ReferenceBitmap .Height {_dcc ,_aab =_fb .ReferenceBitmap .GetByte (_ebd +_bac );if _aab !=nil {return ;};_acd =int (_dcc );};if _ecca > -2&&_ecca < _fb .ReferenceBitmap .Height -1{_dcc ,_aab =_fb .ReferenceBitmap .GetByte (_ebd +_ce +_bac );
if _aab !=nil {return ;};_dfe =int (_dcc );};_aaa =((_gbfe >>5)&0x6)|((_dfe >>2)&0x30)|(_acd &0xc0)|(_ffd &0x200);_gbb =((_dfe >>2)&0x70)|(_acd &0xc0)|(_ffd &0x700);var _fac int ;for _fff :=0;_fff < _bcg ;_fff =_fac {var (_fade int ;_cdf int ;);_fac =_fff +8;
if _fade =_fda -_fff ;_fade > 8{_fade =8;};_fgc :=_fac < _fda ;_cca :=_fac < _fb .ReferenceBitmap .Width ;_cae :=_bac +1;if _fcgc > 0{_dcc =0;if _fgc {_dcc ,_aab =_fb .RegionBitmap .GetByte (_fg -_gcc +1);if _aab !=nil {return ;};};_gbfe =(_gbfe <<8)|int (_dcc );
};if _ecca > 0&&_ecca <=_fb .ReferenceBitmap .Height {var _ggc int ;if _cca {_dcc ,_aab =_fb .ReferenceBitmap .GetByte (_ebd -_ce +_cae );if _aab !=nil {return ;};_ggc =int (_dcc )<<2;};_ffd =(_ffd <<8)|_ggc ;};if _ecca >=0&&_ecca < _fb .ReferenceBitmap .Height {_dcc =0;
if _cca {_dcc ,_aab =_fb .ReferenceBitmap .GetByte (_ebd +_cae );if _aab !=nil {return ;};};_acd =(_acd <<8)|int (_dcc );};if _ecca > -2&&_ecca < (_fb .ReferenceBitmap .Height -1){_dcc =0;if _cca {_dcc ,_aab =_fb .ReferenceBitmap .GetByte (_ebd +_ce +_cae );
if _aab !=nil {return ;};};_dfe =(_dfe <<8)|int (_dcc );};for _ccgdd :=0;_ccgdd < _fade ;_ccgdd ++{var _dbf int ;_gd :=(_gbb >>4)&0x1ff;switch _gd {case 0x1ff:_dbf =1;case 0x00:_dbf =0;default:_fb ._agg .SetIndex (int32 (_aaa ));_dbf ,_aab =_fb ._ccg .DecodeBit (_fb ._agg );
if _aab !=nil {return ;};};_ede :=uint (7-_ccgdd );_cdf |=_dbf <<_ede ;_aaa =((_aaa &0x0d6)<<1)|_dbf |(_gbfe >>_ede +5)&0x002|((_dfe >>_ede +2)&0x010)|((_acd >>_ede )&0x040)|((_ffd >>_ede )&0x200);_gbb =((_gbb &0xdb)<<1)|((_dfe >>_ede +2)&0x010)|((_acd >>_ede )&0x080)|((_ffd >>_ede )&0x400);
};_aab =_fb .RegionBitmap .SetByte (_fg ,byte (_cdf ));if _aab !=nil {return ;};_fg ++;_ebd ++;};return nil ;};func (_dbfb *TextRegion )decodeRdx ()(int64 ,error ){const _baff ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064x";if _dbfb .IsHuffmanEncoded {if _dbfb .SbHuffRDX ==3{if _dbfb ._gfddd ==nil {var (_cggb int ;
_abge error ;);if _dbfb .SbHuffFS ==3{_cggb ++;};if _dbfb .SbHuffDS ==3{_cggb ++;};if _dbfb .SbHuffDT ==3{_cggb ++;};if _dbfb .SbHuffRDWidth ==3{_cggb ++;};if _dbfb .SbHuffRDHeight ==3{_cggb ++;};_dbfb ._gfddd ,_abge =_dbfb .getUserTable (_cggb );if _abge !=nil {return 0,_ff .Wrap (_abge ,_baff ,"");
};};return _dbfb ._gfddd .Decode (_dbfb ._afae );};_dddb ,_efdfc :=_ga .GetStandardTable (14+int (_dbfb .SbHuffRDX ));if _efdfc !=nil {return 0,_ff .Wrap (_efdfc ,_baff ,"");};return _dddb .Decode (_dbfb ._afae );};_geea ,_abeg :=_dbfb ._fgeb .DecodeInt (_dbfb ._gdeea );
if _abeg !=nil {return 0,_ff .Wrap (_abeg ,_baff ,"");};return int64 (_geea ),nil ;};func NewGenericRegion (r _c .StreamReader )*GenericRegion {return &GenericRegion {RegionSegment :NewRegionSegment (r ),_ccgb :r };};func (_ffae *TableSegment )HtHigh ()int32 {return _ffae ._ggeg };
func (_ffgb *PageInformationSegment )encodeFlags (_fdc _c .BinaryWriter )(_dcaa error ){const _ffaf ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _dcaa =_fdc .SkipBits (1);_dcaa !=nil {return _ff .Wrap (_dcaa ,_ffaf ,"\u0072\u0065\u0073e\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074");
};var _ecda int ;if _ffgb .CombinationOperatorOverrideAllowed (){_ecda =1;};if _dcaa =_fdc .WriteBit (_ecda );_dcaa !=nil {return _ff .Wrap (_dcaa ,_ffaf ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u006f\u0076\u0065\u0072\u0072\u0069\u0064\u0064\u0065\u006e");
};_ecda =0;if _ffgb ._eedge {_ecda =1;};if _dcaa =_fdc .WriteBit (_ecda );_dcaa !=nil {return _ff .Wrap (_dcaa ,_ffaf ,"\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0075\u0078i\u006ci\u0061r\u0079\u0020\u0062\u0075\u0066\u0066\u0065r");};if _dcaa =_fdc .WriteBit ((int (_ffgb ._cgc )>>1)&0x01);
_dcaa !=nil {return _ff .Wrap (_dcaa ,_ffaf ,"\u0063\u006f\u006d\u0062\u0069\u006e\u0061\u0074\u0069\u006fn\u0020\u006f\u0070\u0065\u0072\u0061\u0074o\u0072\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0062\u0069\u0074");};if _dcaa =_fdc .WriteBit (int (_ffgb ._cgc )&0x01);
_dcaa !=nil {return _ff .Wrap (_dcaa ,_ffaf ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0062\u0069\u0074");};_ecda =int (_ffgb .DefaultPixelValue );
if _dcaa =_fdc .WriteBit (_ecda );_dcaa !=nil {return _ff .Wrap (_dcaa ,_ffaf ,"\u0064e\u0066\u0061\u0075\u006c\u0074\u0020\u0070\u0061\u0067\u0065\u0020p\u0069\u0078\u0065\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};_ecda =0;if _ffgb ._dbba {_ecda =1;
};if _dcaa =_fdc .WriteBit (_ecda );_dcaa !=nil {return _ff .Wrap (_dcaa ,_ffaf ,"\u0063\u006f\u006e\u0074ai\u006e\u0073\u0020\u0072\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074");};_ecda =0;if _ffgb .IsLossless {_ecda =1;};if _dcaa =_fdc .WriteBit (_ecda );
_dcaa !=nil {return _ff .Wrap (_dcaa ,_ffaf ,"p\u0061\u0067\u0065\u0020\u0069\u0073 \u0065\u0076\u0065\u006e\u0074\u0075\u0061\u006c\u006cy\u0020\u006c\u006fs\u0073l\u0065\u0073\u0073");};return nil ;};type Pager interface{GetSegment (int )(*Header ,error );
GetBitmap ()(*_fad .Bitmap ,error );};func (_geeg *TextRegion )parseHeader ()error {var _dgga error ;_gg .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069n\u0073\u002e\u002e\u002e");
defer func (){if _dgga !=nil {_gg .Log .Trace ("\u005b\u0054\u0045\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044E\u0052\u005d\u0020\u0066\u0061i\u006c\u0065d\u002e\u0020\u0025\u0076",_dgga );
}else {_gg .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069s\u0068\u0065\u0064\u002e");};}();if _dgga =_geeg .RegionInfo .parseHeader ();
_dgga !=nil {return _dgga ;};if _dgga =_geeg .readRegionFlags ();_dgga !=nil {return _dgga ;};if _geeg .IsHuffmanEncoded {if _dgga =_geeg .readHuffmanFlags ();_dgga !=nil {return _dgga ;};};if _dgga =_geeg .readUseRefinement ();_dgga !=nil {return _dgga ;
};if _dgga =_geeg .readAmountOfSymbolInstances ();_dgga !=nil {return _dgga ;};if _dgga =_geeg .getSymbols ();_dgga !=nil {return _dgga ;};if _dgga =_geeg .computeSymbolCodeLength ();_dgga !=nil {return _dgga ;};if _dgga =_geeg .checkInput ();_dgga !=nil {return _dgga ;
};_gg .Log .Trace ("\u0025\u0073",_geeg .String ());return nil ;};func (_cab *GenericRegion )Encode (w _c .BinaryWriter )(_bbg int ,_dfg error ){const _dga ="G\u0065n\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069o\u006e\u002e\u0045\u006eco\u0064\u0065";
if _cab .Bitmap ==nil {return 0,_ff .Error (_dga ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};_cee ,_dfg :=_cab .RegionSegment .Encode (w );if _dfg !=nil {return 0,_ff .Wrap (_dfg ,_dga ,"\u0052\u0065\u0067\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_bbg +=_cee ;if _dfg =w .SkipBits (4);_dfg !=nil {return _bbg ,_ff .Wrap (_dfg ,_dga ,"\u0073k\u0069p\u0020\u0072\u0065\u0073\u0065r\u0076\u0065d\u0020\u0062\u0069\u0074\u0073");};var _aee int ;if _cab .IsTPGDon {_aee =1;};if _dfg =w .WriteBit (_aee );
_dfg !=nil {return _bbg ,_ff .Wrap (_dfg ,_dga ,"\u0074\u0070\u0067\u0064\u006f\u006e");};_aee =0;if _dfg =w .WriteBit (int (_cab .GBTemplate >>1)&0x01);_dfg !=nil {return _bbg ,_ff .Wrap (_dfg ,_dga ,"f\u0069r\u0073\u0074\u0020\u0067\u0062\u0074\u0065\u006dp\u006c\u0061\u0074\u0065 b\u0069\u0074");
};if _dfg =w .WriteBit (int (_cab .GBTemplate )&0x01);_dfg !=nil {return _bbg ,_ff .Wrap (_dfg ,_dga ,"s\u0065\u0063\u006f\u006ed \u0067b\u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u0062\u0069\u0074");};if _cab .UseMMR {_aee =1;};if _dfg =w .WriteBit (_aee );
_dfg !=nil {return _bbg ,_ff .Wrap (_dfg ,_dga ,"u\u0073\u0065\u0020\u004d\u004d\u0052\u0020\u0062\u0069\u0074");};_bbg ++;if _cee ,_dfg =_cab .writeGBAtPixels (w );_dfg !=nil {return _bbg ,_ff .Wrap (_dfg ,_dga ,"");};_bbg +=_cee ;_dgd :=_fc .New ();if _dfg =_dgd .EncodeBitmap (_cab .Bitmap ,_cab .IsTPGDon );
_dfg !=nil {return _bbg ,_ff .Wrap (_dfg ,_dga ,"");};_dgd .Final ();var _gge int64 ;if _gge ,_dfg =_dgd .WriteTo (w );_dfg !=nil {return _bbg ,_ff .Wrap (_dfg ,_dga ,"");};_bbg +=int (_gge );return _bbg ,nil ;};func (_bgeb *template1 )form (_dfc ,_bbbb ,_efe ,_fdde ,_fdbb int16 )int16 {return ((_dfc &0x02)<<8)|(_bbbb <<6)|((_efe &0x03)<<4)|(_fdde <<1)|_fdbb ;
};func (_ddced *TextRegion )GetRegionBitmap ()(*_fad .Bitmap ,error ){if _ddced .RegionBitmap !=nil {return _ddced .RegionBitmap ,nil ;};if !_ddced .IsHuffmanEncoded {if _cagdg :=_ddced .setCodingStatistics ();_cagdg !=nil {return nil ,_cagdg ;};};if _befda :=_ddced .createRegionBitmap ();
_befda !=nil {return nil ,_befda ;};if _dbed :=_ddced .decodeSymbolInstances ();_dbed !=nil {return nil ,_dbed ;};return _ddced .RegionBitmap ,nil ;};type EncodeInitializer interface{InitEncode ();};func (_ceedf *SymbolDictionary )readNumberOfExportedSymbols ()error {_dfga ,_fedc :=_ceedf ._gfdb .ReadBits (32);
if _fedc !=nil {return _fedc ;};_ceedf .NumberOfExportedSymbols =uint32 (_dfga &_e .MaxUint32 );return nil ;};func (_efbg *PageInformationSegment )readIsStriped ()error {_fdag ,_efgb :=_efbg ._dbd .ReadBit ();if _efgb !=nil {return _efgb ;};if _fdag ==1{_efbg .IsStripe =true ;
};return nil ;};func (_bbdd *SymbolDictionary )checkInput ()error {if _bbdd .SdHuffDecodeHeightSelection ==2{_gg .Log .Debug ("\u0053\u0079\u006d\u0062\u006fl\u0020\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u0053e\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0070\u0065r\u006d\u0069\u0074\u0074\u0065\u0064",_bbdd .SdHuffDecodeHeightSelection );
};if _bbdd .SdHuffDecodeWidthSelection ==2{_gg .Log .Debug ("\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0057\u0069\u0064t\u0068\u0020\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061l\u0075\u0065\u0020\u006e\u006f\u0074 \u0070\u0065r\u006d\u0069t\u0074e\u0064",_bbdd .SdHuffDecodeWidthSelection );
};if _bbdd .IsHuffmanEncoded {if _bbdd .SdTemplate !=0{_gg .Log .Debug ("\u0053\u0044T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e \u0030\u0029",_bbdd .SdTemplate );
};if !_bbdd .UseRefinementAggregation {if !_bbdd .UseRefinementAggregation {if _bbdd ._fgda {_gg .Log .Debug ("\u0049\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074ex\u0074\u0052\u0065\u0074\u0061\u0069n\u0065\u0064\u0020\u003d\u0020\u0074\u0072\u0075\u0065\u0020\u0028\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0066\u0061\u006cs\u0065\u0029");
_bbdd ._fgda =false ;};if _bbdd ._eeeb {_gg .Log .Debug ("\u0069s\u0043\u006fd\u0069\u006e\u0067\u0043o\u006e\u0074\u0065x\u0074\u0055\u0073\u0065\u0064\u0020\u003d\u0020\u0074ru\u0065\u0020\u0028s\u0068\u006fu\u006c\u0064\u0020\u0062\u0065\u0020f\u0061\u006cs\u0065\u0029");
_bbdd ._eeeb =false ;};};};}else {if _bbdd .SdHuffBMSizeSelection !=0{_gg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066B\u004d\u0053\u0069\u007a\u0065\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_bbdd .SdHuffBMSizeSelection =0;};if _bbdd .SdHuffDecodeWidthSelection !=0{_gg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068\u0053\u0065\u006c\u0065\u0063\u0074\u0069o\u006e\u0020\u0073\u0068\u006fu\u006c\u0064 \u0062\u0065\u0020\u0030");
_bbdd .SdHuffDecodeWidthSelection =0;};if _bbdd .SdHuffDecodeHeightSelection !=0{_gg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0048e\u0069\u0067\u0068\u0074\u0053\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_bbdd .SdHuffDecodeHeightSelection =0;};};if !_bbdd .UseRefinementAggregation {if _bbdd .SdrTemplate !=0{_gg .Log .Debug ("\u0053\u0044\u0052\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u003d\u0020\u0025\u0064\u0020\u0028s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_bbdd .SdrTemplate );
_bbdd .SdrTemplate =0;};};if !_bbdd .IsHuffmanEncoded ||!_bbdd .UseRefinementAggregation {if _bbdd .SdHuffAggInstanceSelection {_gg .Log .Debug ("\u0053d\u0048\u0075f\u0066\u0041\u0067g\u0049\u006e\u0073\u0074\u0061\u006e\u0063e\u0053\u0065\u006c\u0065\u0063\u0074i\u006f\u006e\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_bbdd .SdHuffAggInstanceSelection );
};};return nil ;};func (_db *EndOfStripe )Init (h *Header ,r _c .StreamReader )error {_db ._gc =r ;return _db .parseHeader (h ,r );};func (_eggc *PatternDictionary )parseHeader ()error {_gg .Log .Trace ("\u005b\u0050\u0041\u0054\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054I\u004f\u004e\u0041\u0052\u0059\u005d[\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d\u0020b\u0065\u0067\u0069\u006e");
defer func (){_gg .Log .Trace ("\u005b\u0050\u0041T\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u005b\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_ ,_egbe :=_eggc ._eddg .ReadBits (5);if _egbe !=nil {return _egbe ;};if _egbe =_eggc .readTemplate ();_egbe !=nil {return _egbe ;};if _egbe =_eggc .readIsMMREncoded ();_egbe !=nil {return _egbe ;};if _egbe =_eggc .readPatternWidthAndHeight ();_egbe !=nil {return _egbe ;
};if _egbe =_eggc .readGrayMax ();_egbe !=nil {return _egbe ;};if _egbe =_eggc .computeSegmentDataStructure ();_egbe !=nil {return _egbe ;};return _eggc .checkInput ();};func (_gbg *GenericRegion )computeSegmentDataStructure ()error {_gbg .DataOffset =_gbg ._ccgb .StreamPosition ();
_gbg .DataHeaderLength =_gbg .DataOffset -_gbg .DataHeaderOffset ;_gbg .DataLength =int64 (_gbg ._ccgb .Length ())-_gbg .DataHeaderLength ;return nil ;};type templater interface{form (_agcb ,_effe ,_bff ,_eec ,_bgg int16 )int16 ;setIndex (_fca *_a .DecoderStats );
};func (_gfda *Header )writeSegmentPageAssociation (_egaf _c .BinaryWriter )(_gdgcc int ,_edbf error ){const _fggc ="w\u0072\u0069\u0074\u0065\u0053\u0065g\u006d\u0065\u006e\u0074\u0050\u0061\u0067\u0065\u0041s\u0073\u006f\u0063i\u0061t\u0069\u006f\u006e";
if _gfda .pageSize ()!=4{if _edbf =_egaf .WriteByte (byte (_gfda .PageAssociation ));_edbf !=nil {return 0,_ff .Wrap (_edbf ,_fggc ,"\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0021\u003d\u0020\u0034");};return 1,nil ;};_fdae :=make ([]byte ,4);
_eg .BigEndian .PutUint32 (_fdae ,uint32 (_gfda .PageAssociation ));if _gdgcc ,_edbf =_egaf .Write (_fdae );_edbf !=nil {return 0,_ff .Wrap (_edbf ,_fggc ,"\u0034 \u0062y\u0074\u0065\u0020\u0070\u0061g\u0065\u0020n\u0075\u006d\u0062\u0065\u0072");};return _gdgcc ,nil ;
};func (_geag *HalftoneRegion )Init (hd *Header ,r _c .StreamReader )error {_geag ._efbb =r ;_geag ._effc =hd ;_geag .RegionSegment =NewRegionSegment (r );return _geag .parseHeader ();};func (_dedb *PatternDictionary )GetDictionary ()([]*_fad .Bitmap ,error ){if _dedb .Patterns !=nil {return _dedb .Patterns ,nil ;
};if !_dedb .IsMMREncoded {_dedb .setGbAtPixels ();};_eabg :=NewGenericRegion (_dedb ._eddg );_eabg .setParametersMMR (_dedb .IsMMREncoded ,_dedb .DataOffset ,_dedb .DataLength ,uint32 (_dedb .HdpHeight ),(_dedb .GrayMax +1)*uint32 (_dedb .HdpWidth ),_dedb .HDTemplate ,false ,false ,_dedb .GBAtX ,_dedb .GBAtY );
_efeed ,_cbgb :=_eabg .GetRegionBitmap ();if _cbgb !=nil {return nil ,_cbgb ;};if _cbgb =_dedb .extractPatterns (_efeed );_cbgb !=nil {return nil ,_cbgb ;};return _dedb .Patterns ,nil ;};func (_ecg *GenericRefinementRegion )GetRegionInfo ()*RegionSegment {return _ecg .RegionInfo };
func (_fefc *TableSegment )HtPS ()int32 {return _fefc ._ddfa };func (_caff *GenericRegion )overrideAtTemplate1 (_abfe ,_dbe ,_bfae ,_bgac ,_cbg int )int {_abfe &=0x1FF7;if _caff .GBAtY [0]==0&&_caff .GBAtX [0]>=-int8 (_cbg ){_abfe |=(_bgac >>uint (7-(int8 (_cbg )+_caff .GBAtX [0]))&0x1)<<3;
}else {_abfe |=int (_caff .getPixel (_dbe +int (_caff .GBAtX [0]),_bfae +int (_caff .GBAtY [0])))<<3;};return _abfe ;};func (_fgb *template0 )form (_geb ,_agaga ,_egga ,_bbe ,_dgg int16 )int16 {return (_geb <<10)|(_agaga <<7)|(_egga <<4)|(_bbe <<1)|_dgg ;
};func (_cgg *PatternDictionary )Init (h *Header ,r _c .StreamReader )error {_cgg ._eddg =r ;return _cgg .parseHeader ();};func (_bfd *GenericRegion )decodeSLTP ()(int ,error ){switch _bfd .GBTemplate {case 0:_bfd ._bgca .SetIndex (0x9B25);case 1:_bfd ._bgca .SetIndex (0x795);
case 2:_bfd ._bgca .SetIndex (0xE5);case 3:_bfd ._bgca .SetIndex (0x195);};return _bfd ._efae .DecodeBit (_bfd ._bgca );};type RegionSegment struct{_daggc _c .StreamReader ;BitmapWidth uint32 ;BitmapHeight uint32 ;XLocation uint32 ;YLocation uint32 ;CombinaionOperator _fad .CombinationOperator ;
};type Regioner interface{GetRegionBitmap ()(*_fad .Bitmap ,error );GetRegionInfo ()*RegionSegment ;};func _cec (_cbefa _c .StreamReader ,_gffga *Header )*TextRegion {_bbada :=&TextRegion {_afae :_cbefa ,Header :_gffga ,RegionInfo :NewRegionSegment (_cbefa )};
return _bbada ;};func (_cfad *GenericRegion )updateOverrideFlags ()error {const _bba ="\u0075\u0070\u0064\u0061te\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _cfad .GBAtX ==nil ||_cfad .GBAtY ==nil {return nil ;};if len (_cfad .GBAtX )!=len (_cfad .GBAtY ){return _ff .Errorf (_bba ,"i\u006eco\u0073i\u0073t\u0065\u006e\u0074\u0020\u0041T\u0020\u0070\u0069x\u0065\u006c\u002e\u0020\u0041m\u006f\u0075\u006et\u0020\u006f\u0066\u0020\u0027\u0078\u0027\u0020\u0070\u0069\u0078e\u006c\u0073\u003a %d\u002c\u0020\u0041\u006d\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0027\u0079\u0027\u0020\u0070\u0069\u0078e\u006cs\u003a\u0020\u0025\u0064",len (_cfad .GBAtX ),len (_cfad .GBAtY ));
};_cfad .GBAtOverride =make ([]bool ,len (_cfad .GBAtX ));switch _cfad .GBTemplate {case 0:if !_cfad .UseExtTemplates {if _cfad .GBAtX [0]!=3||_cfad .GBAtY [0]!=-1{_cfad .setOverrideFlag (0);};if _cfad .GBAtX [1]!=-3||_cfad .GBAtY [1]!=-1{_cfad .setOverrideFlag (1);
};if _cfad .GBAtX [2]!=2||_cfad .GBAtY [2]!=-2{_cfad .setOverrideFlag (2);};if _cfad .GBAtX [3]!=-2||_cfad .GBAtY [3]!=-2{_cfad .setOverrideFlag (3);};}else {if _cfad .GBAtX [0]!=-2||_cfad .GBAtY [0]!=0{_cfad .setOverrideFlag (0);};if _cfad .GBAtX [1]!=0||_cfad .GBAtY [1]!=-2{_cfad .setOverrideFlag (1);
};if _cfad .GBAtX [2]!=-2||_cfad .GBAtY [2]!=-1{_cfad .setOverrideFlag (2);};if _cfad .GBAtX [3]!=-1||_cfad .GBAtY [3]!=-2{_cfad .setOverrideFlag (3);};if _cfad .GBAtX [4]!=1||_cfad .GBAtY [4]!=-2{_cfad .setOverrideFlag (4);};if _cfad .GBAtX [5]!=2||_cfad .GBAtY [5]!=-1{_cfad .setOverrideFlag (5);
};if _cfad .GBAtX [6]!=-3||_cfad .GBAtY [6]!=0{_cfad .setOverrideFlag (6);};if _cfad .GBAtX [7]!=-4||_cfad .GBAtY [7]!=0{_cfad .setOverrideFlag (7);};if _cfad .GBAtX [8]!=2||_cfad .GBAtY [8]!=-2{_cfad .setOverrideFlag (8);};if _cfad .GBAtX [9]!=3||_cfad .GBAtY [9]!=-1{_cfad .setOverrideFlag (9);
};if _cfad .GBAtX [10]!=-2||_cfad .GBAtY [10]!=-2{_cfad .setOverrideFlag (10);};if _cfad .GBAtX [11]!=-3||_cfad .GBAtY [11]!=-1{_cfad .setOverrideFlag (11);};};case 1:if _cfad .GBAtX [0]!=3||_cfad .GBAtY [0]!=-1{_cfad .setOverrideFlag (0);};case 2:if _cfad .GBAtX [0]!=2||_cfad .GBAtY [0]!=-1{_cfad .setOverrideFlag (0);
};case 3:if _cfad .GBAtX [0]!=2||_cfad .GBAtY [0]!=-1{_cfad .setOverrideFlag (0);};};return nil ;};func (_adae *HalftoneRegion )computeGrayScalePlanes (_gbba []*_fad .Bitmap ,_feb int )([][]int ,error ){_gbac :=make ([][]int ,_adae .HGridHeight );for _fab :=0;
_fab < len (_gbac );_fab ++{_gbac [_fab ]=make ([]int ,_adae .HGridWidth );};for _egge :=0;_egge < int (_adae .HGridHeight );_egge ++{for _aggg :=0;_aggg < int (_adae .HGridWidth );_aggg +=8{var _cdbg int ;if _ggcc :=int (_adae .HGridWidth )-_aggg ;_ggcc > 8{_cdbg =8;
}else {_cdbg =_ggcc ;};_dcff :=_gbba [0].GetByteIndex (_aggg ,_egge );for _ceac :=0;_ceac < _cdbg ;_ceac ++{_egfga :=_ceac +_aggg ;_gbac [_egge ][_egfga ]=0;for _dcfa :=0;_dcfa < _feb ;_dcfa ++{_gdc ,_aed :=_gbba [_dcfa ].GetByte (_dcff );if _aed !=nil {return nil ,_aed ;
};_ffda :=_gdc >>uint (7-_egfga &7);_ddda :=_ffda &1;_cbc :=1<<uint (_dcfa );_fdaa :=int (_ddda )*_cbc ;_gbac [_egge ][_egfga ]+=_fdaa ;};};};};return _gbac ,nil ;};type EndOfStripe struct{_gc _c .StreamReader ;_ab int ;};func (_cgfg *TextRegion )getSymbols ()error {if _cgfg .Header .RTSegments !=nil {return _cgfg .initSymbols ();
};return nil ;};func (_fbd *GenericRegion )readGBAtPixels (_dde int )error {const _edd ="\u0072\u0065\u0061\u0064\u0047\u0042\u0041\u0074\u0050i\u0078\u0065\u006c\u0073";_fbd .GBAtX =make ([]int8 ,_dde );_fbd .GBAtY =make ([]int8 ,_dde );for _ceee :=0;
_ceee < _dde ;_ceee ++{_dagg ,_bag :=_fbd ._ccgb .ReadByte ();if _bag !=nil {return _ff .Wrapf (_bag ,_edd ,"\u0058\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_ceee );};_fbd .GBAtX [_ceee ]=int8 (_dagg );_dagg ,_bag =_fbd ._ccgb .ReadByte ();
if _bag !=nil {return _ff .Wrapf (_bag ,_edd ,"\u0059\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_ceee );};_fbd .GBAtY [_ceee ]=int8 (_dagg );};return nil ;};func (_edge *GenericRegion )GetRegionBitmap ()(_fgbc *_fad .Bitmap ,_gbd error ){if _edge .Bitmap !=nil {return _edge .Bitmap ,nil ;
};if _edge .IsMMREncoded {if _edge ._bce ==nil {_edge ._bce ,_gbd =_cc .New (_edge ._ccgb ,int (_edge .RegionSegment .BitmapWidth ),int (_edge .RegionSegment .BitmapHeight ),_edge .DataOffset ,_edge .DataLength );if _gbd !=nil {return nil ,_gbd ;};};_edge .Bitmap ,_gbd =_edge ._bce .UncompressMMR ();
return _edge .Bitmap ,_gbd ;};if _gbd =_edge .updateOverrideFlags ();_gbd !=nil {return nil ,_gbd ;};var _gdg int ;if _edge ._efae ==nil {_edge ._efae ,_gbd =_a .New (_edge ._ccgb );if _gbd !=nil {return nil ,_gbd ;};};if _edge ._bgca ==nil {_edge ._bgca =_a .NewStats (65536,1);
};_edge .Bitmap =_fad .New (int (_edge .RegionSegment .BitmapWidth ),int (_edge .RegionSegment .BitmapHeight ));_gcca :=int (uint32 (_edge .Bitmap .Width +7)&(^uint32 (7)));for _efdc :=0;_efdc < _edge .Bitmap .Height ;_efdc ++{if _edge .IsTPGDon {var _fbc int ;
_fbc ,_gbd =_edge .decodeSLTP ();if _gbd !=nil {return nil ,_gbd ;};_gdg ^=_fbc ;};if _gdg ==1{if _efdc > 0{if _gbd =_edge .copyLineAbove (_efdc );_gbd !=nil {return nil ,_gbd ;};};}else {if _gbd =_edge .decodeLine (_efdc ,_edge .Bitmap .Width ,_gcca );
_gbd !=nil {return nil ,_gbd ;};};};return _edge .Bitmap ,nil ;};func (_efa *EndOfStripe )parseHeader (_fe *Header ,_cb _c .StreamReader )error {_cbf ,_ggd :=_efa ._gc .ReadBits (32);if _ggd !=nil {return _ggd ;};_efa ._ab =int (_cbf &_e .MaxInt32 );return nil ;
};func (_gaed *PageInformationSegment )readCombinationOperator ()error {_becdb ,_fecd :=_gaed ._dbd .ReadBits (2);if _fecd !=nil {return _fecd ;};_gaed ._cgc =_fad .CombinationOperator (int (_becdb ));return nil ;};func (_acea *SymbolDictionary )huffDecodeBmSize ()(int64 ,error ){if _acea ._acgg ==nil {var (_dfdd int ;
_gaffg error ;);if _acea .SdHuffDecodeHeightSelection ==3{_dfdd ++;};if _acea .SdHuffDecodeWidthSelection ==3{_dfdd ++;};_acea ._acgg ,_gaffg =_acea .getUserTable (_dfdd );if _gaffg !=nil {return 0,_gaffg ;};};return _acea ._acgg .Decode (_acea ._gfdb );
};func (_egcee *Header )writeSegmentNumber (_gce _c .BinaryWriter )(_ceed int ,_egfgg error ){_aeag :=make ([]byte ,4);_eg .BigEndian .PutUint32 (_aeag ,_egcee .SegmentNumber );if _ceed ,_egfgg =_gce .Write (_aeag );_egfgg !=nil {return 0,_ff .Wrap (_egfgg ,"\u0048e\u0061\u0064\u0065\u0072.\u0077\u0072\u0069\u0074\u0065S\u0065g\u006de\u006e\u0074\u004e\u0075\u006d\u0062\u0065r","");
};return _ceed ,nil ;};func (_fcfb *TableSegment )HtRS ()int32 {return _fcfb ._ecfa };func (_adec *SymbolDictionary )readRegionFlags ()error {var (_bgeba uint64 ;_acdbb int ;);_ ,_gfaf :=_adec ._gfdb .ReadBits (3);if _gfaf !=nil {return _gfaf ;};_acdbb ,_gfaf =_adec ._gfdb .ReadBit ();
if _gfaf !=nil {return _gfaf ;};_adec .SdrTemplate =int8 (_acdbb );_bgeba ,_gfaf =_adec ._gfdb .ReadBits (2);if _gfaf !=nil {return _gfaf ;};_adec .SdTemplate =int8 (_bgeba &0xf);_acdbb ,_gfaf =_adec ._gfdb .ReadBit ();if _gfaf !=nil {return _gfaf ;};if _acdbb ==1{_adec ._fgda =true ;
};_acdbb ,_gfaf =_adec ._gfdb .ReadBit ();if _gfaf !=nil {return _gfaf ;};if _acdbb ==1{_adec ._eeeb =true ;};_acdbb ,_gfaf =_adec ._gfdb .ReadBit ();if _gfaf !=nil {return _gfaf ;};if _acdbb ==1{_adec .SdHuffAggInstanceSelection =true ;};_acdbb ,_gfaf =_adec ._gfdb .ReadBit ();
if _gfaf !=nil {return _gfaf ;};_adec .SdHuffBMSizeSelection =int8 (_acdbb );_bgeba ,_gfaf =_adec ._gfdb .ReadBits (2);if _gfaf !=nil {return _gfaf ;};_adec .SdHuffDecodeWidthSelection =int8 (_bgeba &0xf);_bgeba ,_gfaf =_adec ._gfdb .ReadBits (2);if _gfaf !=nil {return _gfaf ;
};_adec .SdHuffDecodeHeightSelection =int8 (_bgeba &0xf);_acdbb ,_gfaf =_adec ._gfdb .ReadBit ();if _gfaf !=nil {return _gfaf ;};if _acdbb ==1{_adec .UseRefinementAggregation =true ;};_acdbb ,_gfaf =_adec ._gfdb .ReadBit ();if _gfaf !=nil {return _gfaf ;
};if _acdbb ==1{_adec .IsHuffmanEncoded =true ;};return nil ;};func (_eeed *SymbolDictionary )setRefinementAtPixels ()error {if !_eeed .UseRefinementAggregation ||_eeed .SdrTemplate !=0{return nil ;};if _dffa :=_eeed .readRefinementAtPixels (2);_dffa !=nil {return _dffa ;
};return nil ;};func (_cbfcg *TableSegment )StreamReader ()_c .StreamReader {return _cbfcg ._bgdb };func (_ecga *PageInformationSegment )Init (h *Header ,r _c .StreamReader )(_fgaf error ){_ecga ._dbd =r ;if _fgaf =_ecga .parseHeader ();_fgaf !=nil {return _ff .Wrap (_fgaf ,"P\u0061\u0067\u0065\u0049\u006e\u0066o\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065g\u006d\u0065\u006et\u002eI\u006e\u0069\u0074","");
};return nil ;};func (_acab *SymbolDictionary )readRefinementAtPixels (_fbfb int )error {_acab .SdrATX =make ([]int8 ,_fbfb );_acab .SdrATY =make ([]int8 ,_fbfb );var (_edbe byte ;_bdee error ;);for _fadb :=0;_fadb < _fbfb ;_fadb ++{_edbe ,_bdee =_acab ._gfdb .ReadByte ();
if _bdee !=nil {return _bdee ;};_acab .SdrATX [_fadb ]=int8 (_edbe );_edbe ,_bdee =_acab ._gfdb .ReadByte ();if _bdee !=nil {return _bdee ;};_acab .SdrATY [_fadb ]=int8 (_edbe );};return nil ;};func (_dba *TextRegion )readHuffmanFlags ()error {var (_afac int ;
_cgcc uint64 ;_cbd error ;);_ ,_cbd =_dba ._afae .ReadBit ();if _cbd !=nil {return _cbd ;};_afac ,_cbd =_dba ._afae .ReadBit ();if _cbd !=nil {return _cbd ;};_dba .SbHuffRSize =int8 (_afac );_cgcc ,_cbd =_dba ._afae .ReadBits (2);if _cbd !=nil {return _cbd ;
};_dba .SbHuffRDY =int8 (_cgcc )&0xf;_cgcc ,_cbd =_dba ._afae .ReadBits (2);if _cbd !=nil {return _cbd ;};_dba .SbHuffRDX =int8 (_cgcc )&0xf;_cgcc ,_cbd =_dba ._afae .ReadBits (2);if _cbd !=nil {return _cbd ;};_dba .SbHuffRDHeight =int8 (_cgcc )&0xf;_cgcc ,_cbd =_dba ._afae .ReadBits (2);
if _cbd !=nil {return _cbd ;};_dba .SbHuffRDWidth =int8 (_cgcc )&0xf;_cgcc ,_cbd =_dba ._afae .ReadBits (2);if _cbd !=nil {return _cbd ;};_dba .SbHuffDT =int8 (_cgcc )&0xf;_cgcc ,_cbd =_dba ._afae .ReadBits (2);if _cbd !=nil {return _cbd ;};_dba .SbHuffDS =int8 (_cgcc )&0xf;
_cgcc ,_cbd =_dba ._afae .ReadBits (2);if _cbd !=nil {return _cbd ;};_dba .SbHuffFS =int8 (_cgcc )&0xf;return nil ;};type TextRegion struct{_afae _c .StreamReader ;RegionInfo *RegionSegment ;SbrTemplate int8 ;SbDsOffset int8 ;DefaultPixel int8 ;CombinationOperator _fad .CombinationOperator ;
IsTransposed int8 ;ReferenceCorner int16 ;LogSBStrips int16 ;UseRefinement bool ;IsHuffmanEncoded bool ;SbHuffRSize int8 ;SbHuffRDY int8 ;SbHuffRDX int8 ;SbHuffRDHeight int8 ;SbHuffRDWidth int8 ;SbHuffDT int8 ;SbHuffDS int8 ;SbHuffFS int8 ;SbrATX []int8 ;
SbrATY []int8 ;NumberOfSymbolInstances uint32 ;_ebde int64 ;SbStrips int8 ;NumberOfSymbols uint32 ;RegionBitmap *_fad .Bitmap ;Symbols []*_fad .Bitmap ;_fgeb *_a .Decoder ;_ddec *GenericRefinementRegion ;_bcgb *_a .DecoderStats ;_feeba *_a .DecoderStats ;
_fcdg *_a .DecoderStats ;_dgac *_a .DecoderStats ;_cgba *_a .DecoderStats ;_bbce *_a .DecoderStats ;_efdf *_a .DecoderStats ;_caga *_a .DecoderStats ;_gdeea *_a .DecoderStats ;_fafg *_a .DecoderStats ;_bfbf *_a .DecoderStats ;_bdcf int8 ;_bdag *_ga .FixedSizeTable ;
Header *Header ;_dega _ga .Tabler ;_gefeg _ga .Tabler ;_cffc _ga .Tabler ;_daeg _ga .Tabler ;_cgad _ga .Tabler ;_gfddd _ga .Tabler ;_eebbc _ga .Tabler ;_cadc _ga .Tabler ;_fcaab ,_bdae map[int ]int ;_ffage []int ;_dbdfd *_fad .Points ;_aeaf *_fad .Bitmaps ;
_gagd *_eeg .IntSlice ;_febf ,_bdcd int ;_gaeb *_fad .Boxes ;};type GenericRegion struct{_ccgb _c .StreamReader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;UseExtTemplates bool ;IsTPGDon bool ;
GBTemplate byte ;IsMMREncoded bool ;UseMMR bool ;GBAtX []int8 ;GBAtY []int8 ;GBAtOverride []bool ;_gef bool ;Bitmap *_fad .Bitmap ;_efae *_a .Decoder ;_bgca *_a .DecoderStats ;_bce *_cc .Decoder ;};func (_dcab *Header )readHeaderFlags ()error {const _cfbd ="\u0072e\u0061d\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006c\u0061\u0067\u0073";
_gfca ,_dggg :=_dcab .Reader .ReadBit ();if _dggg !=nil {return _ff .Wrap (_dggg ,_cfbd ,"r\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067");};if _gfca !=0{_dcab .RetainFlag =true ;};_gfca ,_dggg =_dcab .Reader .ReadBit ();if _dggg !=nil {return _ff .Wrap (_dggg ,_cfbd ,"\u0070\u0061g\u0065\u0020\u0061s\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e");
};if _gfca !=0{_dcab .PageAssociationFieldSize =true ;};_eaee ,_dggg :=_dcab .Reader .ReadBits (6);if _dggg !=nil {return _ff .Wrap (_dggg ,_cfbd ,"\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065");};_dcab .Type =Type (int (_eaee ));
return nil ;};type HalftoneRegion struct{_efbb _c .StreamReader ;_effc *Header ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;HDefaultPixel int8 ;CombinationOperator _fad .CombinationOperator ;
HSkipEnabled bool ;HTemplate byte ;IsMMREncoded bool ;HGridWidth uint32 ;HGridHeight uint32 ;HGridX int32 ;HGridY int32 ;HRegionX uint16 ;HRegionY uint16 ;HalftoneRegionBitmap *_fad .Bitmap ;Patterns []*_fad .Bitmap ;};func (_dbbc *TextRegion )decodeIds ()(int64 ,error ){const _bbfed ="\u0064e\u0063\u006f\u0064\u0065\u0049\u0064s";
if _dbbc .IsHuffmanEncoded {if _dbbc .SbHuffDS ==3{if _dbbc ._gefeg ==nil {_eebgd :=0;if _dbbc .SbHuffFS ==3{_eebgd ++;};var _fcfg error ;_dbbc ._gefeg ,_fcfg =_dbbc .getUserTable (_eebgd );if _fcfg !=nil {return 0,_ff .Wrap (_fcfg ,_bbfed ,"");};};return _dbbc ._gefeg .Decode (_dbbc ._afae );
};_ccce ,_ceaa :=_ga .GetStandardTable (8+int (_dbbc .SbHuffDS ));if _ceaa !=nil {return 0,_ff .Wrap (_ceaa ,_bbfed ,"");};return _ccce .Decode (_dbbc ._afae );};_fedg ,_ebce :=_dbbc ._fgeb .DecodeInt (_dbbc ._fcdg );if _ebce !=nil {return 0,_ff .Wrap (_ebce ,_bbfed ,"\u0063\u0078\u0049\u0041\u0044\u0053");
};return int64 (_fedg ),nil ;};func (_fdcg *TextRegion )decodeRdw ()(int64 ,error ){const _fgfa ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064w";if _fdcg .IsHuffmanEncoded {if _fdcg .SbHuffRDWidth ==3{if _fdcg ._daeg ==nil {var (_geeb int ;_cafa error ;
);if _fdcg .SbHuffFS ==3{_geeb ++;};if _fdcg .SbHuffDS ==3{_geeb ++;};if _fdcg .SbHuffDT ==3{_geeb ++;};_fdcg ._daeg ,_cafa =_fdcg .getUserTable (_geeb );if _cafa !=nil {return 0,_ff .Wrap (_cafa ,_fgfa ,"");};};return _fdcg ._daeg .Decode (_fdcg ._afae );
};_bbdgf ,_gfgb :=_ga .GetStandardTable (14+int (_fdcg .SbHuffRDWidth ));if _gfgb !=nil {return 0,_ff .Wrap (_gfgb ,_fgfa ,"");};return _bbdgf .Decode (_fdcg ._afae );};_gege ,_eabf :=_fdcg ._fgeb .DecodeInt (_fdcg ._bbce );if _eabf !=nil {return 0,_ff .Wrap (_eabf ,_fgfa ,"");
};return int64 (_gege ),nil ;};func (_gggg *GenericRegion )setParameters (_fegc bool ,_dfgd ,_cdfc int64 ,_dagb ,_gdaa uint32 ){_gggg .IsMMREncoded =_fegc ;_gggg .DataOffset =_dfgd ;_gggg .DataLength =_cdfc ;_gggg .RegionSegment .BitmapHeight =_dagb ;_gggg .RegionSegment .BitmapWidth =_gdaa ;
_gggg ._bce =nil ;_gggg .Bitmap =nil ;};func (_deaa *SymbolDictionary )setSymbolsArray ()error {if _deaa ._ebdcf ==nil {if _ceeb :=_deaa .retrieveImportSymbols ();_ceeb !=nil {return _ceeb ;};};if _deaa ._gfa ==nil {_deaa ._gfa =append (_deaa ._gfa ,_deaa ._ebdcf ...);
};return nil ;};func (_eaege *TextRegion )setCodingStatistics ()error {if _eaege ._bcgb ==nil {_eaege ._bcgb =_a .NewStats (512,1);};if _eaege ._feeba ==nil {_eaege ._feeba =_a .NewStats (512,1);};if _eaege ._fcdg ==nil {_eaege ._fcdg =_a .NewStats (512,1);
};if _eaege ._dgac ==nil {_eaege ._dgac =_a .NewStats (512,1);};if _eaege ._cgba ==nil {_eaege ._cgba =_a .NewStats (512,1);};if _eaege ._bbce ==nil {_eaege ._bbce =_a .NewStats (512,1);};if _eaege ._efdf ==nil {_eaege ._efdf =_a .NewStats (512,1);};if _eaege ._caga ==nil {_eaege ._caga =_a .NewStats (1<<uint (_eaege ._bdcf ),1);
};if _eaege ._gdeea ==nil {_eaege ._gdeea =_a .NewStats (512,1);};if _eaege ._fafg ==nil {_eaege ._fafg =_a .NewStats (512,1);};if _eaege ._fgeb ==nil {var _fbge error ;_eaege ._fgeb ,_fbge =_a .New (_eaege ._afae );if _fbge !=nil {return _fbge ;};};return nil ;
};func (_fee *SymbolDictionary )InitEncode (symbols *_fad .Bitmaps ,symbolList []int ,symbolMap map[int ]int ,unborderSymbols bool )error {const _bbfb ="S\u0079\u006d\u0062\u006f\u006c\u0044i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002eI\u006e\u0069\u0074E\u006ec\u006f\u0064\u0065";
_fee .SdATX =[]int8 {3,-3,2,-2};_fee .SdATY =[]int8 {-1,-1,-2,-2};_fee ._dacge =symbols ;_fee ._afcg =make ([]int ,len (symbolList ));copy (_fee ._afcg ,symbolList );if len (_fee ._afcg )!=_fee ._dacge .Size (){return _ff .Error (_bbfb ,"s\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0061\u006e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u004ci\u0073\u0074\u0020\u006f\u0066\u0020\u0064\u0069\u0066\u0066er\u0065\u006e\u0074 \u0073i\u007a\u0065");
};_fee .NumberOfNewSymbols =uint32 (symbols .Size ());_fee .NumberOfExportedSymbols =uint32 (symbols .Size ());_fee ._ceea =symbolMap ;_fee ._dbfc =unborderSymbols ;return nil ;};func (_fede *TextRegion )String ()string {_dadb :=&_b .Builder {};_dadb .WriteString ("\u000a[\u0054E\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u000a");
_dadb .WriteString (_fede .RegionInfo .String ()+"\u000a");_dadb .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053br\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0025\u0076\u000a",_fede .SbrTemplate ));_dadb .WriteString (_be .Sprintf ("\u0009-\u0020S\u0062\u0044\u0073\u004f\u0066f\u0073\u0065t\u003a\u0020\u0025\u0076\u000a",_fede .SbDsOffset ));
_dadb .WriteString (_be .Sprintf ("\t\u002d \u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0050i\u0078\u0065\u006c\u003a %\u0076\u000a",_fede .DefaultPixel ));_dadb .WriteString (_be .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0076\u000a",_fede .CombinationOperator ));
_dadb .WriteString (_be .Sprintf ("\t\u002d \u0049\u0073\u0054\u0072\u0061\u006e\u0073\u0070o\u0073\u0065\u0064\u003a %\u0076\u000a",_fede .IsTransposed ));_dadb .WriteString (_be .Sprintf ("\u0009\u002d\u0020Re\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0043\u006f\u0072\u006e\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_fede .ReferenceCorner ));
_dadb .WriteString (_be .Sprintf ("\t\u002d\u0020\u0055\u0073eR\u0065f\u0069\u006e\u0065\u006d\u0065n\u0074\u003a\u0020\u0025\u0076\u000a",_fede .UseRefinement ));_dadb .WriteString (_be .Sprintf ("\u0009-\u0020\u0049\u0073\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045n\u0063\u006f\u0064\u0065\u0064\u003a\u0020\u0025\u0076\u000a",_fede .IsHuffmanEncoded ));
if _fede .IsHuffmanEncoded {_dadb .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_fede .SbHuffRSize ));_dadb .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0059:\u0020\u0025\u0076\u000a",_fede .SbHuffRDY ));
_dadb .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0058:\u0020\u0025\u0076\u000a",_fede .SbHuffRDX ));_dadb .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069\u0067\u0068\u0074\u003a\u0020\u0025v\u000a",_fede .SbHuffRDHeight ));
_dadb .WriteString (_be .Sprintf ("\t\u002d\u0020\u0053\u0062Hu\u0066f\u0052\u0044\u0057\u0069\u0064t\u0068\u003a\u0020\u0025\u0076\u000a",_fede .SbHuffRDWidth ));_dadb .WriteString (_be .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0054\u003a\u0020\u0025\u0076\u000a",_fede .SbHuffDT ));
_dadb .WriteString (_be .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0053\u003a\u0020\u0025\u0076\u000a",_fede .SbHuffDS ));_dadb .WriteString (_be .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0046\u0053\u003a\u0020\u0025\u0076\u000a",_fede .SbHuffFS ));
};_dadb .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_fede .SbrATX ));_dadb .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0059:\u0020\u0025\u0076\u000a",_fede .SbrATY ));
_dadb .WriteString (_be .Sprintf ("\u0009\u002d\u0020N\u0075\u006d\u0062\u0065r\u004f\u0066\u0053\u0079\u006d\u0062\u006fl\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_fede .NumberOfSymbolInstances ));_dadb .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_fede .SbrATX ));
return _dadb .String ();};func (_ffgf *Header )Encode (w _c .BinaryWriter )(_becd int ,_gedc error ){const _bfdbb ="\u0048\u0065\u0061d\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065";var _ffdc _c .BinaryWriter ;_gg .Log .Trace ("\u005b\u0053\u0045G\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045\u0052\u005d[\u0045\u004e\u0043\u004f\u0044\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");
defer func (){if _gedc !=nil {_gg .Log .Trace ("[\u0053\u0045\u0047\u004d\u0045\u004eT\u002d\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0045\u004e\u0043\u004f\u0044E\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020%\u0076",_gedc );}else {_gg .Log .Trace ("\u005b\u0053\u0045\u0047ME\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0025\u0076",_ffgf );
_gg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045N\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u005b\u0045\u004e\u0043O\u0044\u0045\u005d\u0020\u0046\u0069\u006ei\u0073\u0068\u0065\u0064");};}();w .FinishByte ();if _ffgf .SegmentData !=nil {_bbda ,_gfbe :=_ffgf .SegmentData .(SegmentEncoder );
if !_gfbe {return 0,_ff .Errorf (_bfdbb ,"\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0064\u006f\u0065s\u006e\u0027\u0074\u0020\u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074 \u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0045\u006e\u0063\u006f\u0064er\u0020\u0069\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065",_ffgf .SegmentData );
};_ffdc =_c .BufferedMSB ();_becd ,_gedc =_bbda .Encode (_ffdc );if _gedc !=nil {return 0,_ff .Wrap (_gedc ,_bfdbb ,"");};_ffgf .SegmentDataLength =uint64 (_becd );};if _ffgf .pageSize ()==4{_ffgf .PageAssociationFieldSize =true ;};var _ccgdb int ;_ccgdb ,_gedc =_ffgf .writeSegmentNumber (w );
if _gedc !=nil {return 0,_ff .Wrap (_gedc ,_bfdbb ,"");};_becd +=_ccgdb ;if _gedc =_ffgf .writeFlags (w );_gedc !=nil {return _becd ,_ff .Wrap (_gedc ,_bfdbb ,"");};_becd ++;_ccgdb ,_gedc =_ffgf .writeReferredToCount (w );if _gedc !=nil {return 0,_ff .Wrap (_gedc ,_bfdbb ,"");
};_becd +=_ccgdb ;_ccgdb ,_gedc =_ffgf .writeReferredToSegments (w );if _gedc !=nil {return 0,_ff .Wrap (_gedc ,_bfdbb ,"");};_becd +=_ccgdb ;_ccgdb ,_gedc =_ffgf .writeSegmentPageAssociation (w );if _gedc !=nil {return 0,_ff .Wrap (_gedc ,_bfdbb ,"");
};_becd +=_ccgdb ;_ccgdb ,_gedc =_ffgf .writeSegmentDataLength (w );if _gedc !=nil {return 0,_ff .Wrap (_gedc ,_bfdbb ,"");};_becd +=_ccgdb ;_ffgf .HeaderLength =int64 (_becd )-int64 (_ffgf .SegmentDataLength );if _ffdc !=nil {if _ ,_gedc =w .Write (_ffdc .Data ());
_gedc !=nil {return _becd ,_ff .Wrap (_gedc ,_bfdbb ,"\u0077r\u0069t\u0065\u0020\u0073\u0065\u0067m\u0065\u006et\u0020\u0064\u0061\u0074\u0061");};};return _becd ,nil ;};func (_ffbac *SymbolDictionary )setAtPixels ()error {if _ffbac .IsHuffmanEncoded {return nil ;
};_ebfe :=1;if _ffbac .SdTemplate ==0{_ebfe =4;};if _caabf :=_ffbac .readAtPixels (_ebfe );_caabf !=nil {return _caabf ;};return nil ;};func (_abcc *TableSegment )HtLow ()int32 {return _abcc ._cgbf };func (_adcb *Header )pageSize ()uint {if _adcb .PageAssociation <=255{return 1;
};return 4;};func (_bcdfe *SymbolDictionary )String ()string {_gedd :=&_b .Builder {};_gedd .WriteString ("\n\u005b\u0053\u0059\u004dBO\u004c-\u0044\u0049\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u000a");_gedd .WriteString (_be .Sprintf ("\u0009-\u0020S\u0064\u0072\u0054\u0065\u006dp\u006c\u0061t\u0065\u0020\u0025\u0076\u000a",_bcdfe .SdrTemplate ));
_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0025\u0076\u000a",_bcdfe .SdTemplate ));_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006eg\u0043\u006f\u006e\u0074\u0065\u0078\u0074R\u0065\u0074\u0061\u0069\u006e\u0065\u0064\u0020\u0025\u0076\u000a",_bcdfe ._fgda ));
_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074\u0065\u0078\u0074\u0055\u0073\u0065\u0064 \u0025\u0076\u000a",_bcdfe ._eeeb ));_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_bcdfe .SdHuffAggInstanceSelection ));
_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053d\u0048\u0075\u0066\u0066\u0042\u004d\u0053\u0069\u007a\u0065S\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020%\u0076\u000a",_bcdfe .SdHuffBMSizeSelection ));_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_bcdfe .SdHuffDecodeWidthSelection ));
_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020Sd\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064e\u0048e\u0069g\u0068t\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_bcdfe .SdHuffDecodeHeightSelection ));_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020U\u0073\u0065\u0052\u0065f\u0069\u006e\u0065\u006d\u0065\u006e\u0074A\u0067\u0067\u0072\u0065\u0067\u0061\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_bcdfe .UseRefinementAggregation ));
_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020is\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0065\u0064\u0020\u0025\u0076\u000a",_bcdfe .IsHuffmanEncoded ));_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_bcdfe .SdATX ));
_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_bcdfe .SdATY ));_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_bcdfe .SdrATX ));
_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_bcdfe .SdrATY ));_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u004e\u0075\u006d\u0062\u0065\u0072\u004ff\u0045\u0078\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_bcdfe .NumberOfExportedSymbols ));
_gedd .WriteString (_be .Sprintf ("\u0009-\u0020\u004e\u0075\u006db\u0065\u0072\u004f\u0066\u004ee\u0077S\u0079m\u0062\u006f\u006c\u0073\u0020\u0025\u0076\n",_bcdfe .NumberOfNewSymbols ));_gedd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u004ff\u0049\u006d\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_bcdfe ._aaca ));
_gedd .WriteString (_be .Sprintf ("\u0009\u002d \u006e\u0075\u006d\u0062\u0065\u0072\u004f\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0064\u0053\u0079\u006d\u0062\u006f\u006c\u0073 %\u0076\u000a",_bcdfe ._cdgg ));return _gedd .String ();};type TableSegment struct{_bgdb _c .StreamReader ;
_bbea int32 ;_ddfa int32 ;_ecfa int32 ;_cgbf int32 ;_ggeg int32 ;};func (_dgfc *PatternDictionary )checkInput ()error {if _dgfc .HdpHeight < 1||_dgfc .HdpWidth < 1{return _egb .New ("in\u0076\u0061l\u0069\u0064\u0020\u0048\u0065\u0061\u0064\u0065\u0072 \u0056\u0061\u006c\u0075\u0065\u003a\u0020\u0057\u0069\u0064\u0074\u0068\u002f\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020g\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020z\u0065\u0072o");
};if _dgfc .IsMMREncoded {if _dgfc .HDTemplate !=0{_gg .Log .Debug ("\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0020\u0048\u0044\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030");
};};return nil ;};func (_gaag *Header )CleanSegmentData (){if _gaag .SegmentData !=nil {_gaag .SegmentData =nil ;};};func (_cdb *GenericRegion )decodeTemplate3 (_gcdg ,_bcf ,_ecde int ,_fcaff ,_gafd int )(_ebb error ){const _eeeg ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0033";
var (_cfc ,_bdba int ;_dbc int ;_afd byte ;_dgee ,_agbd int ;);if _gcdg >=1{_afd ,_ebb =_cdb .Bitmap .GetByte (_gafd );if _ebb !=nil {return _ff .Wrap (_ebb ,_eeeg ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_dbc =int (_afd );};_cfc =(_dbc >>1)&0x70;
for _dcdd :=0;_dcdd < _ecde ;_dcdd =_dgee {var (_ggg byte ;_cadb int ;);_dgee =_dcdd +8;if _ffba :=_bcf -_dcdd ;_ffba > 8{_cadb =8;}else {_cadb =_ffba ;};if _gcdg >=1{_dbc <<=8;if _dgee < _bcf {_afd ,_ebb =_cdb .Bitmap .GetByte (_gafd +1);if _ebb !=nil {return _ff .Wrap (_ebb ,_eeeg ,"\u0069\u006e\u006e\u0065\u0072\u0020\u002d\u0020\u006c\u0069\u006e\u0065 \u003e\u003d\u0020\u0031");
};_dbc |=int (_afd );};};for _afb :=0;_afb < _cadb ;_afb ++{if _cdb ._gef {_bdba =_cdb .overrideAtTemplate3 (_cfc ,_dcdd +_afb ,_gcdg ,int (_ggg ),_afb );_cdb ._bgca .SetIndex (int32 (_bdba ));}else {_cdb ._bgca .SetIndex (int32 (_cfc ));};_agbd ,_ebb =_cdb ._efae .DecodeBit (_cdb ._bgca );
if _ebb !=nil {return _ff .Wrap (_ebb ,_eeeg ,"");};_ggg |=byte (_agbd )<<byte (7-_afb );_cfc =((_cfc &0x1f7)<<1)|_agbd |((_dbc >>uint (8-_afb ))&0x010);};if _dace :=_cdb .Bitmap .SetByte (_fcaff ,_ggg );_dace !=nil {return _ff .Wrap (_dace ,_eeeg ,"");
};_fcaff ++;_gafd ++;};return nil ;};func (_dacg *PageInformationSegment )CombinationOperator ()_fad .CombinationOperator {return _dacg ._cgc ;};func (_bebce *PageInformationSegment )readWidthAndHeight ()error {_ccad ,_eeega :=_bebce ._dbd .ReadBits (32);
if _eeega !=nil {return _eeega ;};_bebce .PageBMWidth =int (_ccad &_e .MaxInt32 );_ccad ,_eeega =_bebce ._dbd .ReadBits (32);if _eeega !=nil {return _eeega ;};_bebce .PageBMHeight =int (_ccad &_e .MaxInt32 );return nil ;};func (_effd *PageInformationSegment )readContainsRefinement ()error {_abec ,_dgdc :=_effd ._dbd .ReadBit ();
if _dgdc !=nil {return _dgdc ;};if _abec ==1{_effd ._dbba =true ;};return nil ;};func (_bfea *Header )writeReferredToSegments (_dbb _c .BinaryWriter )(_cbcf int ,_cgag error ){const _gdcb ="\u0077\u0072\u0069te\u0052\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
var (_abd uint16 ;_fgce uint32 ;);_afcc :=_bfea .referenceSize ();_ffag :=1;_bdgb :=make ([]byte ,_afcc );for _ ,_baaf :=range _bfea .RTSNumbers {switch _afcc {case 4:_fgce =uint32 (_baaf );_eg .BigEndian .PutUint32 (_bdgb ,_fgce );_ffag ,_cgag =_dbb .Write (_bdgb );
if _cgag !=nil {return 0,_ff .Wrap (_cgag ,_gdcb ,"u\u0069\u006e\u0074\u0033\u0032\u0020\u0073\u0069\u007a\u0065");};case 2:_abd =uint16 (_baaf );_eg .BigEndian .PutUint16 (_bdgb ,_abd );_ffag ,_cgag =_dbb .Write (_bdgb );if _cgag !=nil {return 0,_ff .Wrap (_cgag ,_gdcb ,"\u0075\u0069\u006e\u0074\u0031\u0036");
};default:if _cgag =_dbb .WriteByte (byte (_baaf ));_cgag !=nil {return 0,_ff .Wrap (_cgag ,_gdcb ,"\u0075\u0069\u006et\u0038");};};_cbcf +=_ffag ;};return _cbcf ,nil ;};func (_fbg *GenericRefinementRegion )overrideAtTemplate0 (_ead ,_fcef ,_fec ,_ffc ,_fgd int )int {if _fbg ._da [0]{_ead &=0xfff7;
if _fbg .GrAtY [0]==0&&int (_fbg .GrAtX [0])>=-_fgd {_ead |=(_ffc >>uint (7-(_fgd +int (_fbg .GrAtX [0])))&0x1)<<3;}else {_ead |=_fbg .getPixel (_fbg .RegionBitmap ,_fcef +int (_fbg .GrAtX [0]),_fec +int (_fbg .GrAtY [0]))<<3;};};if _fbg ._da [1]{_ead &=0xefff;
if _fbg .GrAtY [1]==0&&int (_fbg .GrAtX [1])>=-_fgd {_ead |=(_ffc >>uint (7-(_fgd +int (_fbg .GrAtX [1])))&0x1)<<12;}else {_ead |=_fbg .getPixel (_fbg .ReferenceBitmap ,_fcef +int (_fbg .GrAtX [1]),_fec +int (_fbg .GrAtY [1]));};};return _ead ;};func NewRegionSegment (r _c .StreamReader )*RegionSegment {return &RegionSegment {_daggc :r }};
func (_eee *template0 )setIndex (_bcgg *_a .DecoderStats ){_bcgg .SetIndex (0x100)};func (_dffe *SymbolDictionary )encodeNumSyms (_dedc _c .BinaryWriter )(_dbdf int ,_fdfce error ){const _gcad ="\u0065\u006e\u0063\u006f\u0064\u0065\u004e\u0075\u006d\u0053\u0079\u006d\u0073";
_afce :=make ([]byte ,4);_eg .BigEndian .PutUint32 (_afce ,_dffe .NumberOfExportedSymbols );if _dbdf ,_fdfce =_dedc .Write (_afce );_fdfce !=nil {return _dbdf ,_ff .Wrap (_fdfce ,_gcad ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};_eg .BigEndian .PutUint32 (_afce ,_dffe .NumberOfNewSymbols );_dbca ,_fdfce :=_dedc .Write (_afce );if _fdfce !=nil {return _dbdf ,_ff .Wrap (_fdfce ,_gcad ,"n\u0065\u0077\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};return _dbdf +_dbca ,nil ;
};func (_bbd *GenericRegion )setParametersWithAt (_gea bool ,_ddca byte ,_fbce ,_cgb bool ,_befd ,_eagc []int8 ,_bbgg ,_cfab uint32 ,_fga *_a .DecoderStats ,_beec *_a .Decoder ){_bbd .IsMMREncoded =_gea ;_bbd .GBTemplate =_ddca ;_bbd .IsTPGDon =_fbce ;
_bbd .GBAtX =_befd ;_bbd .GBAtY =_eagc ;_bbd .RegionSegment .BitmapHeight =_cfab ;_bbd .RegionSegment .BitmapWidth =_bbgg ;_bbd ._bce =nil ;_bbd .Bitmap =nil ;if _fga !=nil {_bbd ._bgca =_fga ;};if _beec !=nil {_bbd ._efae =_beec ;};_gg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049O\u004e\u005d\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0053\u0044\u0041t\u003a\u0020\u0025\u0073",_bbd );
};func (_ecbe *SymbolDictionary )decodeHeightClassBitmap (_eebgg *_fad .Bitmap ,_aaeb int64 ,_adfc int ,_aeec []int )error {for _fcbb :=_aaeb ;_fcbb < int64 (_ecbe ._cdgg );_fcbb ++{var _geacc int ;for _edbcf :=_aaeb ;_edbcf <=_fcbb -1;_edbcf ++{_geacc +=_aeec [_edbcf ];
};_fcaa :=_ef .Rect (_geacc ,0,_geacc +_aeec [_fcbb ],_adfc );_acfa ,_fbbe :=_fad .Extract (_fcaa ,_eebgg );if _fbbe !=nil {return _fbbe ;};_ecbe ._bcde [_fcbb ]=_acfa ;_ecbe ._gfa =append (_ecbe ._gfa ,_acfa );};return nil ;};func (_bfeae *TableSegment )HtOOB ()int32 {return _bfeae ._bbea };
func (_aagd *PageInformationSegment )readIsLossless ()error {_bfda ,_dbff :=_aagd ._dbd .ReadBit ();if _dbff !=nil {return _dbff ;};if _bfda ==1{_aagd .IsLossless =true ;};return nil ;};func (_becc *TextRegion )decodeDfs ()(int64 ,error ){if _becc .IsHuffmanEncoded {if _becc .SbHuffFS ==3{if _becc ._dega ==nil {var _fbgg error ;
_becc ._dega ,_fbgg =_becc .getUserTable (0);if _fbgg !=nil {return 0,_fbgg ;};};return _becc ._dega .Decode (_becc ._afae );};_ebcad ,_dcabg :=_ga .GetStandardTable (6+int (_becc .SbHuffFS ));if _dcabg !=nil {return 0,_dcabg ;};return _ebcad .Decode (_becc ._afae );
};_acee ,_aecd :=_becc ._fgeb .DecodeInt (_becc ._feeba );if _aecd !=nil {return 0,_aecd ;};return int64 (_acee ),nil ;};type OrganizationType uint8 ;func (_egce *HalftoneRegion )computeY (_gbaa ,_gdgc int )int {return _egce .shiftAndFill (int (_egce .HGridY )+_gbaa *int (_egce .HRegionX )-_gdgc *int (_egce .HRegionY ));
};func (_abdg *SymbolDictionary )parseHeader ()(_cdde error ){_gg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _cdde !=nil {_gg .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u0020\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u005b\u0050\u0041\u0052SE\u002d\u0048\u0045A\u0044\u0045R\u005d\u0020\u0066\u0061\u0069\u006ce\u0064\u002e \u0025\u0076",_cdde );
}else {_gg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _cdde =_abdg .readRegionFlags ();_cdde !=nil {return _cdde ;};if _cdde =_abdg .setAtPixels ();_cdde !=nil {return _cdde ;};if _cdde =_abdg .setRefinementAtPixels ();_cdde !=nil {return _cdde ;};if _cdde =_abdg .readNumberOfExportedSymbols ();_cdde !=nil {return _cdde ;
};if _cdde =_abdg .readNumberOfNewSymbols ();_cdde !=nil {return _cdde ;};if _cdde =_abdg .setInSyms ();_cdde !=nil {return _cdde ;};if _abdg ._eeeb {_baeg :=_abdg .Header .RTSegments ;for _degd :=len (_baeg )-1;_degd >=0;_degd --{if _baeg [_degd ].Type ==0{_fcfa ,_eeab :=_baeg [_degd ].SegmentData .(*SymbolDictionary );
if !_eeab {_cdde =_be .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074:\u0020\u0025\u0076\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020S\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006fna\u0072\u0079\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_baeg [_degd ]);
return _cdde ;};if _fcfa ._eeeb {_abdg .setRetainedCodingContexts (_fcfa );};break ;};};};if _cdde =_abdg .checkInput ();_cdde !=nil {return _cdde ;};return nil ;};func (_ac *GenericRefinementRegion )decodeOptimized (_dc ,_bb ,_bed ,_cbe ,_cg ,_df ,_abea int )error {var (_edg error ;
_agag int ;_ega int ;);_de :=_dc -int (_ac .ReferenceDY );if _bef :=int (-_ac .ReferenceDX );_bef > 0{_agag =_bef ;};_caa :=_ac .ReferenceBitmap .GetByteIndex (_agag ,_de );if _ac .ReferenceDX > 0{_ega =int (_ac .ReferenceDX );};_dcf :=_ac .RegionBitmap .GetByteIndex (_ega ,_dc );
switch _ac .TemplateID {case 0:_edg =_ac .decodeTemplate (_dc ,_bb ,_bed ,_cbe ,_cg ,_df ,_abea ,_dcf ,_de ,_caa ,_ac ._fd );case 1:_edg =_ac .decodeTemplate (_dc ,_bb ,_bed ,_cbe ,_cg ,_df ,_abea ,_dcf ,_de ,_caa ,_ac ._aga );};return _edg ;};func (_daca *PatternDictionary )computeSegmentDataStructure ()error {_daca .DataOffset =_daca ._eddg .StreamPosition ();
_daca .DataHeaderLength =_daca .DataOffset -_daca .DataHeaderOffset ;_daca .DataLength =int64 (_daca ._eddg .Length ())-_daca .DataHeaderLength ;return nil ;};func (_bcfd *SymbolDictionary )decodeHeightClassDeltaHeight ()(int64 ,error ){if _bcfd .IsHuffmanEncoded {return _bcfd .decodeHeightClassDeltaHeightWithHuffman ();
};_feac ,_dgca :=_bcfd ._dafa .DecodeInt (_bcfd ._aebfc );if _dgca !=nil {return 0,_dgca ;};return int64 (_feac ),nil ;};func (_fgdc *GenericRegion )decodeTemplate1 (_gaa ,_afe ,_gcce int ,_agb ,_affe int )(_gcf error ){const _fgga ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0031";
var (_ffdg ,_efge int ;_ggaa ,_ggda int ;_eea byte ;_efb ,_gbfg int ;);if _gaa >=1{_eea ,_gcf =_fgdc .Bitmap .GetByte (_affe );if _gcf !=nil {return _ff .Wrap (_gcf ,_fgga ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_ggaa =int (_eea );};if _gaa >=2{_eea ,_gcf =_fgdc .Bitmap .GetByte (_affe -_fgdc .Bitmap .RowStride );
if _gcf !=nil {return _ff .Wrap (_gcf ,_fgga ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_ggda =int (_eea )<<5;};_ffdg =((_ggaa >>1)&0x1f8)|((_ggda >>1)&0x1e00);for _efcf :=0;_efcf < _gcce ;_efcf =_efb {var (_egag byte ;_edbcc int ;);_efb =_efcf +8;
if _deaf :=_afe -_efcf ;_deaf > 8{_edbcc =8;}else {_edbcc =_deaf ;};if _gaa > 0{_ggaa <<=8;if _efb < _afe {_eea ,_gcf =_fgdc .Bitmap .GetByte (_affe +1);if _gcf !=nil {return _ff .Wrap (_gcf ,_fgga ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};
_ggaa |=int (_eea );};};if _gaa > 1{_ggda <<=8;if _efb < _afe {_eea ,_gcf =_fgdc .Bitmap .GetByte (_affe -_fgdc .Bitmap .RowStride +1);if _gcf !=nil {return _ff .Wrap (_gcf ,_fgga ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_ggda |=int (_eea )<<5;
};};for _dfgb :=0;_dfgb < _edbcc ;_dfgb ++{if _fgdc ._gef {_efge =_fgdc .overrideAtTemplate1 (_ffdg ,_efcf +_dfgb ,_gaa ,int (_egag ),_dfgb );_fgdc ._bgca .SetIndex (int32 (_efge ));}else {_fgdc ._bgca .SetIndex (int32 (_ffdg ));};_gbfg ,_gcf =_fgdc ._efae .DecodeBit (_fgdc ._bgca );
if _gcf !=nil {return _ff .Wrap (_gcf ,_fgga ,"");};_egag |=byte (_gbfg )<<uint (7-_dfgb );_acc :=uint (8-_dfgb );_ffdg =((_ffdg &0xefb)<<1)|_gbfg |((_ggaa >>_acc )&0x8)|((_ggda >>_acc )&0x200);};if _beef :=_fgdc .Bitmap .SetByte (_agb ,_egag );_beef !=nil {return _ff .Wrap (_beef ,_fgga ,"");
};_agb ++;_affe ++;};return nil ;};func (_cbae *TextRegion )setContexts (_cbadg *_a .DecoderStats ,_cgea *_a .DecoderStats ,_beeag *_a .DecoderStats ,_cbcfaa *_a .DecoderStats ,_fdcca *_a .DecoderStats ,_ebbd *_a .DecoderStats ,_eafbd *_a .DecoderStats ,_fbfae *_a .DecoderStats ,_cefe *_a .DecoderStats ,_aeafd *_a .DecoderStats ){_cbae ._bcgb =_cgea ;
_cbae ._feeba =_beeag ;_cbae ._fcdg =_cbcfaa ;_cbae ._dgac =_fdcca ;_cbae ._bbce =_eafbd ;_cbae ._efdf =_fbfae ;_cbae ._caga =_ebbd ;_cbae ._gdeea =_cefe ;_cbae ._fafg =_aeafd ;_cbae ._bfbf =_cbadg ;};func (_ag *EndOfStripe )LineNumber ()int {return _ag ._ab };
func (_bebc *PageInformationSegment )readDefaultPixelValue ()error {_gged ,_cgf :=_bebc ._dbd .ReadBit ();if _cgf !=nil {return _cgf ;};_bebc .DefaultPixelValue =uint8 (_gged &0xf);return nil ;};func (_bedg *Header )String ()string {_ggb :=&_b .Builder {};
_ggb .WriteString ("\u000a[\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045A\u0044\u0045\u0052\u005d\u000a");_ggb .WriteString (_be .Sprintf ("\t\u002d\u0020\u0053\u0065gm\u0065n\u0074\u004e\u0075\u006d\u0062e\u0072\u003a\u0020\u0025\u0076\u000a",_bedg .SegmentNumber ));
_ggb .WriteString (_be .Sprintf ("\u0009\u002d\u0020T\u0079\u0070\u0065\u003a\u0020\u0025\u0076\u000a",_bedg .Type ));_ggb .WriteString (_be .Sprintf ("\u0009-\u0020R\u0065\u0074\u0061\u0069\u006eF\u006c\u0061g\u003a\u0020\u0025\u0076\u000a",_bedg .RetainFlag ));
_ggb .WriteString (_be .Sprintf ("\u0009\u002d\u0020Pa\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_bedg .PageAssociation ));_ggb .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0050\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074i\u006fn\u0046\u0069\u0065\u006c\u0064\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_bedg .PageAssociationFieldSize ));
_ggb .WriteString ("\u0009-\u0020R\u0054\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u0053\u003a\u000a");for _ ,_fdaaf :=range _bedg .RTSNumbers {_ggb .WriteString (_be .Sprintf ("\u0009\t\u002d\u0020\u0025\u0064\u000a",_fdaaf ));};_ggb .WriteString (_be .Sprintf ("\t\u002d \u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0065n\u0067\u0074\u0068\u003a %\u0076\u000a",_bedg .HeaderLength ));
_ggb .WriteString (_be .Sprintf ("\u0009-\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061L\u0065n\u0067\u0074\u0068\u003a\u0020\u0025\u0076\n",_bedg .SegmentDataLength ));_ggb .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074D\u0061\u0074\u0061\u0053\u0074\u0061\u0072t\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0076\u000a",_bedg .SegmentDataStartOffset ));
return _ggb .String ();};func (_dbef *SymbolDictionary )getSymbol (_dffef int )(*_fad .Bitmap ,error ){const _daec ="\u0067e\u0074\u0053\u0079\u006d\u0062\u006fl";_ebgf ,_gage :=_dbef ._dacge .GetBitmap (_dbef ._afcg [_dffef ]);if _gage !=nil {return nil ,_ff .Wrap (_gage ,_daec ,"\u0063\u0061n\u0027\u0074\u0020g\u0065\u0074\u0020\u0073\u0079\u006d\u0062\u006f\u006c");
};return _ebgf ,nil ;};func (_dfae *PatternDictionary )readIsMMREncoded ()error {_bcfa ,_fadga :=_dfae ._eddg .ReadBit ();if _fadga !=nil {return _fadga ;};if _bcfa !=0{_dfae .IsMMREncoded =true ;};return nil ;};func (_gaae *PageInformationSegment )encodeStripingInformation (_abce _c .BinaryWriter )(_ddbf int ,_gdge error ){const _efdd ="\u0065n\u0063\u006f\u0064\u0065S\u0074\u0072\u0069\u0070\u0069n\u0067I\u006ef\u006f\u0072\u006d\u0061\u0074\u0069\u006fn";
if !_gaae .IsStripe {if _ddbf ,_gdge =_abce .Write ([]byte {0x00,0x00});_gdge !=nil {return 0,_ff .Wrap (_gdge ,_efdd ,"n\u006f\u0020\u0073\u0074\u0072\u0069\u0070\u0069\u006e\u0067");};return _ddbf ,nil ;};_efgc :=make ([]byte ,2);_eg .BigEndian .PutUint16 (_efgc ,_gaae .MaxStripeSize |1<<15);
if _ddbf ,_gdge =_abce .Write (_efgc );_gdge !=nil {return 0,_ff .Wrapf (_gdge ,_efdd ,"\u0073\u0074\u0072i\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0064",_gaae .MaxStripeSize );};return _ddbf ,nil ;};func (_dagc *SymbolDictionary )setExportedSymbols (_afg []int ){for _edeg :=uint32 (0);
_edeg < _dagc ._aaca +_dagc .NumberOfNewSymbols ;_edeg ++{if _afg [_edeg ]==1{var _gceg *_fad .Bitmap ;if _edeg < _dagc ._aaca {_gceg =_dagc ._ebdcf [_edeg ];}else {_gceg =_dagc ._bcde [_edeg -_dagc ._aaca ];};_gg .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u002d\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u0020\u0041\u0064\u0064 E\u0078\u0070\u006fr\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027%\u0073\u0027",_gceg );
_dagc ._fcbd =append (_dagc ._fcbd ,_gceg );};};};func (_cbeg *SymbolDictionary )encodeRefinementATFlags (_acac _c .BinaryWriter )(_eacg int ,_dbbe error ){const _ceeee ="\u0065\u006e\u0063od\u0065\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if !_cbeg .UseRefinementAggregation ||_cbeg .SdrTemplate !=0{return 0,nil ;};for _acce :=0;_acce < 2;_acce ++{if _dbbe =_acac .WriteByte (byte (_cbeg .SdrATX [_acce ]));_dbbe !=nil {return _eacg ,_ff .Wrapf (_dbbe ,_ceeee ,"\u0053\u0064\u0072\u0041\u0054\u0058\u005b\u0025\u0064\u005d",_acce );
};_eacg ++;if _dbbe =_acac .WriteByte (byte (_cbeg .SdrATY [_acce ]));_dbbe !=nil {return _eacg ,_ff .Wrapf (_dbbe ,_ceeee ,"\u0053\u0064\u0072\u0041\u0054\u0059\u005b\u0025\u0064\u005d",_acce );};_eacg ++;};return _eacg ,nil ;};func (_bbag *TextRegion )Encode (w _c .BinaryWriter )(_ecgaa int ,_cfgfb error ){const _eacc ="\u0054\u0065\u0078\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u002e\u0045n\u0063\u006f\u0064\u0065";
if _ecgaa ,_cfgfb =_bbag .RegionInfo .Encode (w );_cfgfb !=nil {return _ecgaa ,_ff .Wrap (_cfgfb ,_eacc ,"");};var _gbe int ;if _gbe ,_cfgfb =_bbag .encodeFlags (w );_cfgfb !=nil {return _ecgaa ,_ff .Wrap (_cfgfb ,_eacc ,"");};_ecgaa +=_gbe ;if _gbe ,_cfgfb =_bbag .encodeSymbols (w );
_cfgfb !=nil {return _ecgaa ,_ff .Wrap (_cfgfb ,_eacc ,"");};_ecgaa +=_gbe ;return _ecgaa ,nil ;};func (_ceba *TextRegion )InitEncode (globalSymbolsMap ,localSymbolsMap map[int ]int ,comps []int ,inLL *_fad .Points ,symbols *_fad .Bitmaps ,classIDs *_eeg .IntSlice ,boxes *_fad .Boxes ,width ,height ,symBits int ){_ceba .RegionInfo =&RegionSegment {BitmapWidth :uint32 (width ),BitmapHeight :uint32 (height )};
_ceba ._fcaab =globalSymbolsMap ;_ceba ._bdae =localSymbolsMap ;_ceba ._ffage =comps ;_ceba ._dbdfd =inLL ;_ceba ._aeaf =symbols ;_ceba ._gagd =classIDs ;_ceba ._gaeb =boxes ;_ceba ._bdcd =symBits ;};func (_bcdd *PatternDictionary )extractPatterns (_bdeg *_fad .Bitmap )error {var _abca int ;
_bged :=make ([]*_fad .Bitmap ,_bcdd .GrayMax +1);for _abca <=int (_bcdd .GrayMax ){_gddf :=int (_bcdd .HdpWidth )*_abca ;_dbbg :=_ef .Rect (_gddf ,0,_gddf +int (_bcdd .HdpWidth ),int (_bcdd .HdpHeight ));_beea ,_cagd :=_fad .Extract (_dbbg ,_bdeg );if _cagd !=nil {return _cagd ;
};_bged [_abca ]=_beea ;_abca ++;};_bcdd .Patterns =_bged ;return nil ;};type Documenter interface{GetPage (int )(Pager ,error );GetGlobalSegment (int )(*Header ,error );};func (_ded *HalftoneRegion )checkInput ()error {if _ded .IsMMREncoded {if _ded .HTemplate !=0{_gg .Log .Debug ("\u0048\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030",_ded .HTemplate );
};if _ded .HSkipEnabled {_gg .Log .Debug ("\u0048\u0053\u006b\u0069\u0070\u0045\u006e\u0061\u0062\u006c\u0065\u0064\u0020\u0030\u0020\u0025\u0076\u0020(\u0073\u0068\u006f\u0075\u006c\u0064\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u0029",_ded .HSkipEnabled );
};};return nil ;};func (_acfc *SymbolDictionary )decodeDirectlyThroughGenericRegion (_ggba ,_ffgd uint32 )error {if _acfc ._dabe ==nil {_acfc ._dabe =NewGenericRegion (_acfc ._gfdb );};_acfc ._dabe .setParametersWithAt (false ,byte (_acfc .SdTemplate ),false ,false ,_acfc .SdATX ,_acfc .SdATY ,_ggba ,_ffgd ,_acfc ._dce ,_acfc ._dafa );
return _acfc .addSymbol (_acfc ._dabe );};func (_deeb *GenericRegion )Size ()int {return _deeb .RegionSegment .Size ()+1+2*len (_deeb .GBAtX )};func (_bgef *TableSegment )Init (h *Header ,r _c .StreamReader )error {_bgef ._bgdb =r ;return _bgef .parseHeader ();
};type PageInformationSegment struct{_dbd _c .StreamReader ;PageBMHeight int ;PageBMWidth int ;ResolutionX int ;ResolutionY int ;_bfde bool ;_cgc _fad .CombinationOperator ;_eedge bool ;DefaultPixelValue uint8 ;_dbba bool ;IsLossless bool ;IsStripe bool ;
MaxStripeSize uint16 ;};func (_gdee *PageInformationSegment )CombinationOperatorOverrideAllowed ()bool {return _gdee ._bfde };func (_efee *Header )readSegmentPageAssociation (_ddbg Documenter ,_ebdce _c .StreamReader ,_gdeb uint64 ,_cff ...int )(_afda error ){const _dggc ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074P\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061t\u0069\u006f\u006e";
if !_efee .PageAssociationFieldSize {_ceacf ,_ebba :=_ebdce .ReadBits (8);if _ebba !=nil {return _ff .Wrap (_ebba ,_dggc ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_efee .PageAssociation =int (_ceacf &0xFF);}else {_ggbg ,_aeeb :=_ebdce .ReadBits (32);
if _aeeb !=nil {return _ff .Wrap (_aeeb ,_dggc ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_efee .PageAssociation =int (_ggbg &_e .MaxInt32 );};if _gdeb ==0{return nil ;};if _efee .PageAssociation !=0{_gffd ,_bebg :=_ddbg .GetPage (_efee .PageAssociation );
if _bebg !=nil {return _ff .Wrap (_bebg ,_dggc ,"\u0061s\u0073\u006f\u0063\u0069a\u0074\u0065\u0064\u0020\u0070a\u0067e\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006ed");};var _aaee int ;for _gcdd :=uint64 (0);_gcdd < _gdeb ;_gcdd ++{_aaee =_cff [_gcdd ];
_efee .RTSegments [_gcdd ],_bebg =_gffd .GetSegment (_aaee );if _bebg !=nil {var _cdcc error ;_efee .RTSegments [_gcdd ],_cdcc =_ddbg .GetGlobalSegment (_aaee );if _cdcc !=nil {return _ff .Wrapf (_bebg ,_dggc ,"\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020s\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064\u0020\u0061\u0074\u0020pa\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0072\u0020\u0069\u006e\u0020\u0067\u006c\u006f\u0062\u0061\u006c\u0073",_efee .PageAssociation );
};};};return nil ;};for _fbcb :=uint64 (0);_fbcb < _gdeb ;_fbcb ++{_efee .RTSegments [_fbcb ],_afda =_ddbg .GetGlobalSegment (_cff [_fbcb ]);if _afda !=nil {return _ff .Wrapf (_afda ,_dggc ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u003a\u0020\u0027\u0025d\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064",_cff [_fbcb ]);
};};return nil ;};func (_decc *TextRegion )readAmountOfSymbolInstances ()error {_bbba ,_aeedb :=_decc ._afae .ReadBits (32);if _aeedb !=nil {return _aeedb ;};_decc .NumberOfSymbolInstances =uint32 (_bbba &_e .MaxUint32 );_cbef :=_decc .RegionInfo .BitmapWidth *_decc .RegionInfo .BitmapHeight ;
if _cbef < _decc .NumberOfSymbolInstances {_gg .Log .Debug ("\u004c\u0069\u006d\u0069t\u0069\u006e\u0067\u0020t\u0068\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020d\u0065\u0063\u006f\u0064e\u0064\u0020\u0073\u0079m\u0062\u006f\u006c\u0020\u0069n\u0073\u0074\u0061\u006e\u0063\u0065\u0073 \u0074\u006f\u0020\u006f\u006ee\u0020\u0070\u0065\u0072\u0020\u0070\u0069\u0078\u0065l\u0020\u0028\u0020\u0025\u0064\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064\u0020\u006f\u0066\u0020\u0025\u0064\u0029",_cbef ,_decc .NumberOfSymbolInstances );
_decc .NumberOfSymbolInstances =_cbef ;};return nil ;};func (_fbe *SymbolDictionary )GetDictionary ()([]*_fad .Bitmap ,error ){_gg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c-\u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){_gg .Log .Trace ("\u005b\u0053\u0059M\u0042\u004f\u004c\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
_gg .Log .Trace ("\u005b\u0053Y\u004d\u0042\u004f\u004c\u002dD\u0049\u0043\u0054\u0049\u004fN\u0041\u0052\u0059\u005d\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0020\u000a\u0045\u0078\u003a\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u000a\u006e\u0065\u0077\u003a\u0027\u0025\u0073\u0027",_fbe ._fcbd ,_fbe ._bcde );
}();if _fbe ._fcbd ==nil {var _acb error ;if _fbe .UseRefinementAggregation {_fbe ._fdge =_fbe .getSbSymCodeLen ();};if !_fbe .IsHuffmanEncoded {if _acb =_fbe .setCodingStatistics ();_acb !=nil {return nil ,_acb ;};};_fbe ._bcde =make ([]*_fad .Bitmap ,_fbe .NumberOfNewSymbols );
var _eedb []int ;if _fbe .IsHuffmanEncoded &&!_fbe .UseRefinementAggregation {_eedb =make ([]int ,_fbe .NumberOfNewSymbols );};if _acb =_fbe .setSymbolsArray ();_acb !=nil {return nil ,_acb ;};var _dfd ,_bgd int64 ;_fbe ._cdgg =0;for _fbe ._cdgg < _fbe .NumberOfNewSymbols {_bgd ,_acb =_fbe .decodeHeightClassDeltaHeight ();
if _acb !=nil {return nil ,_acb ;};_dfd +=_bgd ;var _cgeg ,_affd uint32 ;_acad :=int64 (_fbe ._cdgg );for {var _bgebf int64 ;_bgebf ,_acb =_fbe .decodeDifferenceWidth ();if _fa .Is (_acb ,_g .ErrOOB ){break ;};if _acb !=nil {return nil ,_acb ;};if _fbe ._cdgg >=_fbe .NumberOfNewSymbols {break ;
};_cgeg +=uint32 (_bgebf );_affd +=_cgeg ;if !_fbe .IsHuffmanEncoded ||_fbe .UseRefinementAggregation {if !_fbe .UseRefinementAggregation {_acb =_fbe .decodeDirectlyThroughGenericRegion (_cgeg ,uint32 (_dfd ));if _acb !=nil {return nil ,_acb ;};}else {_acb =_fbe .decodeAggregate (_cgeg ,uint32 (_dfd ));
if _acb !=nil {return nil ,_acb ;};};}else if _fbe .IsHuffmanEncoded &&!_fbe .UseRefinementAggregation {_eedb [_fbe ._cdgg ]=int (_cgeg );};_fbe ._cdgg ++;};if _fbe .IsHuffmanEncoded &&!_fbe .UseRefinementAggregation {var _eafd int64 ;if _fbe .SdHuffBMSizeSelection ==0{var _eede _ga .Tabler ;
_eede ,_acb =_ga .GetStandardTable (1);if _acb !=nil {return nil ,_acb ;};_eafd ,_acb =_eede .Decode (_fbe ._gfdb );if _acb !=nil {return nil ,_acb ;};}else {_eafd ,_acb =_fbe .huffDecodeBmSize ();if _acb !=nil {return nil ,_acb ;};};_fbe ._gfdb .Align ();
var _debg *_fad .Bitmap ;_debg ,_acb =_fbe .decodeHeightClassCollectiveBitmap (_eafd ,uint32 (_dfd ),_affd );if _acb !=nil {return nil ,_acb ;};_acb =_fbe .decodeHeightClassBitmap (_debg ,_acad ,int (_dfd ),_eedb );if _acb !=nil {return nil ,_acb ;};};
};_ddea ,_acb :=_fbe .getToExportFlags ();if _acb !=nil {return nil ,_acb ;};_fbe .setExportedSymbols (_ddea );};return _fbe ._fcbd ,nil ;};func (_fbb *RegionSegment )Encode (w _c .BinaryWriter )(_fdcc int ,_ggcf error ){const _gacf ="R\u0065g\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065n\u0074\u002e\u0045\u006eco\u0064\u0065";
_ffbd :=make ([]byte ,4);_eg .BigEndian .PutUint32 (_ffbd ,_fbb .BitmapWidth );_fdcc ,_ggcf =w .Write (_ffbd );if _ggcf !=nil {return 0,_ff .Wrap (_ggcf ,_gacf ,"\u0057\u0069\u0064t\u0068");};_eg .BigEndian .PutUint32 (_ffbd ,_fbb .BitmapHeight );var _fef int ;
_fef ,_ggcf =w .Write (_ffbd );if _ggcf !=nil {return 0,_ff .Wrap (_ggcf ,_gacf ,"\u0048\u0065\u0069\u0067\u0068\u0074");};_fdcc +=_fef ;_eg .BigEndian .PutUint32 (_ffbd ,_fbb .XLocation );_fef ,_ggcf =w .Write (_ffbd );if _ggcf !=nil {return 0,_ff .Wrap (_ggcf ,_gacf ,"\u0058L\u006f\u0063\u0061\u0074\u0069\u006fn");
};_fdcc +=_fef ;_eg .BigEndian .PutUint32 (_ffbd ,_fbb .YLocation );_fef ,_ggcf =w .Write (_ffbd );if _ggcf !=nil {return 0,_ff .Wrap (_ggcf ,_gacf ,"\u0059L\u006f\u0063\u0061\u0074\u0069\u006fn");};_fdcc +=_fef ;if _ggcf =w .WriteByte (byte (_fbb .CombinaionOperator )&0x07);
_ggcf !=nil {return 0,_ff .Wrap (_ggcf ,_gacf ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};_fdcc ++;return _fdcc ,nil ;};func (_gccf *SymbolDictionary )decodeAggregate (_ecce ,_fedb uint32 )error {var (_bdfe int64 ;
_accb error ;);if _gccf .IsHuffmanEncoded {_bdfe ,_accb =_gccf .huffDecodeRefAggNInst ();if _accb !=nil {return _accb ;};}else {_daaa ,_dgfe :=_gccf ._dafa .DecodeInt (_gccf ._dceb );if _dgfe !=nil {return _dgfe ;};_bdfe =int64 (_daaa );};if _bdfe > 1{return _gccf .decodeThroughTextRegion (_ecce ,_fedb ,uint32 (_bdfe ));
}else if _bdfe ==1{return _gccf .decodeRefinedSymbol (_ecce ,_fedb );};return nil ;};func (_edfe *PageInformationSegment )checkInput ()error {if _edfe .PageBMHeight ==_e .MaxInt32 {if !_edfe .IsStripe {_gg .Log .Debug ("P\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0053\u0065\u0067me\u006e\u0074\u002e\u0049s\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0073\u0068ou\u006c\u0064 \u0062\u0065\u0020\u0074\u0072\u0075\u0065\u002e");
};};return nil ;};func (_eafb *HalftoneRegion )grayScaleDecoding (_bde int )([][]int ,error ){var (_adgc []int8 ;_gagc []int8 ;);if !_eafb .IsMMREncoded {_adgc =make ([]int8 ,4);_gagc =make ([]int8 ,4);if _eafb .HTemplate <=1{_adgc [0]=3;}else if _eafb .HTemplate >=2{_adgc [0]=2;
};_gagc [0]=-1;_adgc [1]=-3;_gagc [1]=-1;_adgc [2]=2;_gagc [2]=-2;_adgc [3]=-2;_gagc [3]=-2;};_gde :=make ([]*_fad .Bitmap ,_bde );_dgc :=NewGenericRegion (_eafb ._efbb );_dgc .setParametersMMR (_eafb .IsMMREncoded ,_eafb .DataOffset ,_eafb .DataLength ,_eafb .HGridHeight ,_eafb .HGridWidth ,_eafb .HTemplate ,false ,_eafb .HSkipEnabled ,_adgc ,_gagc );
_gfdd :=_bde -1;var _gbge error ;_gde [_gfdd ],_gbge =_dgc .GetRegionBitmap ();if _gbge !=nil {return nil ,_gbge ;};for _gfdd > 0{_gfdd --;_dgc .Bitmap =nil ;_gde [_gfdd ],_gbge =_dgc .GetRegionBitmap ();if _gbge !=nil {return nil ,_gbge ;};if _gbge =_eafb .combineGrayscalePlanes (_gde ,_gfdd );
_gbge !=nil {return nil ,_gbge ;};};return _eafb .computeGrayScalePlanes (_gde ,_bde );};func (_dccc *TextRegion )decodeStripT ()(_daea int64 ,_fgf error ){if _dccc .IsHuffmanEncoded {if _dccc .SbHuffDT ==3{if _dccc ._cffc ==nil {var _dfec int ;if _dccc .SbHuffFS ==3{_dfec ++;
};if _dccc .SbHuffDS ==3{_dfec ++;};_dccc ._cffc ,_fgf =_dccc .getUserTable (_dfec );if _fgf !=nil {return 0,_fgf ;};};_daea ,_fgf =_dccc ._cffc .Decode (_dccc ._afae );if _fgf !=nil {return 0,_fgf ;};}else {var _bagec _ga .Tabler ;_bagec ,_fgf =_ga .GetStandardTable (11+int (_dccc .SbHuffDT ));
if _fgf !=nil {return 0,_fgf ;};_daea ,_fgf =_bagec .Decode (_dccc ._afae );if _fgf !=nil {return 0,_fgf ;};};}else {var _gcgf int32 ;_gcgf ,_fgf =_dccc ._fgeb .DecodeInt (_dccc ._bcgb );if _fgf !=nil {return 0,_fgf ;};_daea =int64 (_gcgf );};_daea *=int64 (-_dccc .SbStrips );
return _daea ,nil ;};func (_caad *SymbolDictionary )setCodingStatistics ()error {if _caad ._efea ==nil {_caad ._efea =_a .NewStats (512,1);};if _caad ._aebfc ==nil {_caad ._aebfc =_a .NewStats (512,1);};if _caad ._cbcb ==nil {_caad ._cbcb =_a .NewStats (512,1);
};if _caad ._dceb ==nil {_caad ._dceb =_a .NewStats (512,1);};if _caad ._dgbc ==nil {_caad ._dgbc =_a .NewStats (512,1);};if _caad .UseRefinementAggregation &&_caad ._cbgd ==nil {_caad ._cbgd =_a .NewStats (1<<uint (_caad ._fdge ),1);_caad ._fffeb =_a .NewStats (512,1);
_caad ._abaac =_a .NewStats (512,1);};if _caad ._dce ==nil {_caad ._dce =_a .NewStats (65536,1);};if _caad ._dafa ==nil {var _bfgb error ;_caad ._dafa ,_bfgb =_a .New (_caad ._gfdb );if _bfgb !=nil {return _bfgb ;};};return nil ;};func (_bccb *SymbolDictionary )Init (h *Header ,r _c .StreamReader )error {_bccb .Header =h ;
_bccb ._gfdb =r ;return _bccb .parseHeader ();};func (_gbcb *TextRegion )computeSymbolCodeLength ()error {if _gbcb .IsHuffmanEncoded {return _gbcb .symbolIDCodeLengths ();};_gbcb ._bdcf =int8 (_e .Ceil (_e .Log (float64 (_gbcb .NumberOfSymbols ))/_e .Log (2)));
return nil ;};var _ SegmentEncoder =&RegionSegment {};func (_dgf *PageInformationSegment )readCombinationOperatorOverrideAllowed ()error {_fbcdg ,_abaa :=_dgf ._dbd .ReadBit ();if _abaa !=nil {return _abaa ;};if _fbcdg ==1{_dgf ._bfde =true ;};return nil ;
};func (_abc *HalftoneRegion )shiftAndFill (_cegf int )int {_cegf >>=8;if _cegf < 0{_gfba :=int (_e .Log (float64 (_ecf (_cegf )))/_e .Log (2));_cfaa :=31-_gfba ;for _aegd :=1;_aegd < _cfaa ;_aegd ++{_cegf |=1<<uint (31-_aegd );};};return _cegf ;};func (_dcac *SymbolDictionary )huffDecodeRefAggNInst ()(int64 ,error ){if !_dcac .SdHuffAggInstanceSelection {_fcf ,_bggea :=_ga .GetStandardTable (1);
if _bggea !=nil {return 0,_bggea ;};return _fcf .Decode (_dcac ._gfdb );};if _dcac ._eddb ==nil {var (_becbf int ;_aacc error ;);if _dcac .SdHuffDecodeHeightSelection ==3{_becbf ++;};if _dcac .SdHuffDecodeWidthSelection ==3{_becbf ++;};if _dcac .SdHuffBMSizeSelection ==3{_becbf ++;
};_dcac ._eddb ,_aacc =_dcac .getUserTable (_becbf );if _aacc !=nil {return 0,_aacc ;};};return _dcac ._eddb .Decode (_dcac ._gfdb );};func (_fggcb *TextRegion )decodeCurrentT ()(int64 ,error ){if _fggcb .SbStrips !=1{if _fggcb .IsHuffmanEncoded {_dcfc ,_eegd :=_fggcb ._afae .ReadBits (byte (_fggcb .LogSBStrips ));
return int64 (_dcfc ),_eegd ;};_aaed ,_ecag :=_fggcb ._fgeb .DecodeInt (_fggcb ._dgac );if _ecag !=nil {return 0,_ecag ;};return int64 (_aaed ),nil ;};return 0,nil ;};func (_bfga *TextRegion )blit (_eadgg *_fad .Bitmap ,_bfca int64 )error {if _bfga .IsTransposed ==0&&(_bfga .ReferenceCorner ==2||_bfga .ReferenceCorner ==3){_bfga ._ebde +=int64 (_eadgg .Width -1);
}else if _bfga .IsTransposed ==1&&(_bfga .ReferenceCorner ==0||_bfga .ReferenceCorner ==2){_bfga ._ebde +=int64 (_eadgg .Height -1);};_fgad :=_bfga ._ebde ;if _bfga .IsTransposed ==1{_fgad ,_bfca =_bfca ,_fgad ;};switch _bfga .ReferenceCorner {case 0:_bfca -=int64 (_eadgg .Height -1);
case 2:_bfca -=int64 (_eadgg .Height -1);_fgad -=int64 (_eadgg .Width -1);case 3:_fgad -=int64 (_eadgg .Width -1);};_bbge :=_fad .Blit (_eadgg ,_bfga .RegionBitmap ,int (_fgad ),int (_bfca ),_bfga .CombinationOperator );if _bbge !=nil {return _bbge ;};
if _bfga .IsTransposed ==0&&(_bfga .ReferenceCorner ==0||_bfga .ReferenceCorner ==1){_bfga ._ebde +=int64 (_eadgg .Width -1);};if _bfga .IsTransposed ==1&&(_bfga .ReferenceCorner ==1||_bfga .ReferenceCorner ==3){_bfga ._ebde +=int64 (_eadgg .Height -1);
};return nil ;};type PatternDictionary struct{_eddg _c .StreamReader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;GBAtX []int8 ;GBAtY []int8 ;IsMMREncoded bool ;HDTemplate byte ;HdpWidth byte ;HdpHeight byte ;Patterns []*_fad .Bitmap ;
GrayMax uint32 ;};func (_bdc *GenericRegion )decodeTemplate0a (_agdb ,_eeea ,_dea int ,_fadf ,_bfaa int )(_agdd error ){const _add ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0061";var (_dgb ,_ddf int ;_ebc ,_gaf int ;
_aeb byte ;_fbcd int ;);if _agdb >=1{_aeb ,_agdd =_bdc .Bitmap .GetByte (_bfaa );if _agdd !=nil {return _ff .Wrap (_agdd ,_add ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_ebc =int (_aeb );};if _agdb >=2{_aeb ,_agdd =_bdc .Bitmap .GetByte (_bfaa -_bdc .Bitmap .RowStride );
if _agdd !=nil {return _ff .Wrap (_agdd ,_add ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_gaf =int (_aeb )<<6;};_dgb =(_ebc &0xf0)|(_gaf &0x3800);for _ged :=0;_ged < _dea ;_ged =_fbcd {var (_cfgf byte ;_fddf int ;);_fbcd =_ged +8;if _deac :=_eeea -_ged ;
_deac > 8{_fddf =8;}else {_fddf =_deac ;};if _agdb > 0{_ebc <<=8;if _fbcd < _eeea {_aeb ,_agdd =_bdc .Bitmap .GetByte (_bfaa +1);if _agdd !=nil {return _ff .Wrap (_agdd ,_add ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_ebc |=int (_aeb );};};
if _agdb > 1{_cdg :=_bfaa -_bdc .Bitmap .RowStride +1;_gaf <<=8;if _fbcd < _eeea {_aeb ,_agdd =_bdc .Bitmap .GetByte (_cdg );if _agdd !=nil {return _ff .Wrap (_agdd ,_add ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_gaf |=int (_aeb )<<6;}else {_gaf |=0;
};};for _bcbb :=0;_bcbb < _fddf ;_bcbb ++{_agaf :=uint (7-_bcbb );if _bdc ._gef {_ddf =_bdc .overrideAtTemplate0a (_dgb ,_ged +_bcbb ,_agdb ,int (_cfgf ),_bcbb ,int (_agaf ));_bdc ._bgca .SetIndex (int32 (_ddf ));}else {_bdc ._bgca .SetIndex (int32 (_dgb ));
};var _adc int ;_adc ,_agdd =_bdc ._efae .DecodeBit (_bdc ._bgca );if _agdd !=nil {return _ff .Wrap (_agdd ,_add ,"");};_cfgf |=byte (_adc )<<_agaf ;_dgb =((_dgb &0x7bf7)<<1)|_adc |((_ebc >>_agaf )&0x10)|((_gaf >>_agaf )&0x800);};if _gfb :=_bdc .Bitmap .SetByte (_fadf ,_cfgf );
_gfb !=nil {return _ff .Wrap (_gfb ,_add ,"");};_fadf ++;_bfaa ++;};return nil ;};func (_fcaf *GenericRegion )copyLineAbove (_fea int )error {_efc :=_fea *_fcaf .Bitmap .RowStride ;_cad :=_efc -_fcaf .Bitmap .RowStride ;for _edbg :=0;_edbg < _fcaf .Bitmap .RowStride ;
_edbg ++{_ffgc ,_adf :=_fcaf .Bitmap .GetByte (_cad );if _adf !=nil {return _adf ;};_cad ++;if _adf =_fcaf .Bitmap .SetByte (_efc ,_ffgc );_adf !=nil {return _adf ;};_efc ++;};return nil ;};func (_bbac *TextRegion )readRegionFlags ()error {var (_gabg int ;
_fcec uint64 ;_gddg error ;);_gabg ,_gddg =_bbac ._afae .ReadBit ();if _gddg !=nil {return _gddg ;};_bbac .SbrTemplate =int8 (_gabg );_fcec ,_gddg =_bbac ._afae .ReadBits (5);if _gddg !=nil {return _gddg ;};_bbac .SbDsOffset =int8 (_fcec );if _bbac .SbDsOffset > 0x0f{_bbac .SbDsOffset -=0x20;
};_gabg ,_gddg =_bbac ._afae .ReadBit ();if _gddg !=nil {return _gddg ;};_bbac .DefaultPixel =int8 (_gabg );_fcec ,_gddg =_bbac ._afae .ReadBits (2);if _gddg !=nil {return _gddg ;};_bbac .CombinationOperator =_fad .CombinationOperator (int (_fcec )&0x3);
_gabg ,_gddg =_bbac ._afae .ReadBit ();if _gddg !=nil {return _gddg ;};_bbac .IsTransposed =int8 (_gabg );_fcec ,_gddg =_bbac ._afae .ReadBits (2);if _gddg !=nil {return _gddg ;};_bbac .ReferenceCorner =int16 (_fcec )&0x3;_fcec ,_gddg =_bbac ._afae .ReadBits (2);
if _gddg !=nil {return _gddg ;};_bbac .LogSBStrips =int16 (_fcec )&0x3;_bbac .SbStrips =1<<uint (_bbac .LogSBStrips );_gabg ,_gddg =_bbac ._afae .ReadBit ();if _gddg !=nil {return _gddg ;};if _gabg ==1{_bbac .UseRefinement =true ;};_gabg ,_gddg =_bbac ._afae .ReadBit ();
if _gddg !=nil {return _gddg ;};if _gabg ==1{_bbac .IsHuffmanEncoded =true ;};return nil ;};var _ templater =&template1 {};type SymbolDictionary struct{_gfdb _c .StreamReader ;SdrTemplate int8 ;SdTemplate int8 ;_fgda bool ;_eeeb bool ;SdHuffAggInstanceSelection bool ;
SdHuffBMSizeSelection int8 ;SdHuffDecodeWidthSelection int8 ;SdHuffDecodeHeightSelection int8 ;UseRefinementAggregation bool ;IsHuffmanEncoded bool ;SdATX []int8 ;SdATY []int8 ;SdrATX []int8 ;SdrATY []int8 ;NumberOfExportedSymbols uint32 ;NumberOfNewSymbols uint32 ;
Header *Header ;_aaca uint32 ;_ebdcf []*_fad .Bitmap ;_cdgg uint32 ;_bcde []*_fad .Bitmap ;_cacab _ga .Tabler ;_dfag _ga .Tabler ;_acgg _ga .Tabler ;_eddb _ga .Tabler ;_fcbd []*_fad .Bitmap ;_gfa []*_fad .Bitmap ;_dafa *_a .Decoder ;_gacg *TextRegion ;
_dabe *GenericRegion ;_fdfa *GenericRefinementRegion ;_dce *_a .DecoderStats ;_aebfc *_a .DecoderStats ;_cbcb *_a .DecoderStats ;_dceb *_a .DecoderStats ;_dgbc *_a .DecoderStats ;_fffeb *_a .DecoderStats ;_abaac *_a .DecoderStats ;_efea *_a .DecoderStats ;
_cbgd *_a .DecoderStats ;_fdge int8 ;_dacge *_fad .Bitmaps ;_afcg []int ;_ceea map[int ]int ;_dbfc bool ;};func (_bdbe *PatternDictionary )setGbAtPixels (){if _bdbe .HDTemplate ==0{_bdbe .GBAtX =make ([]int8 ,4);_bdbe .GBAtY =make ([]int8 ,4);_bdbe .GBAtX [0]=-int8 (_bdbe .HdpWidth );
_bdbe .GBAtY [0]=0;_bdbe .GBAtX [1]=-3;_bdbe .GBAtY [1]=-1;_bdbe .GBAtX [2]=2;_bdbe .GBAtY [2]=-2;_bdbe .GBAtX [3]=-2;_bdbe .GBAtY [3]=-2;}else {_bdbe .GBAtX =[]int8 {-int8 (_bdbe .HdpWidth )};_bdbe .GBAtY =[]int8 {0};};};func (_fgae *TextRegion )getUserTable (_dgfg int )(_ga .Tabler ,error ){const _fcbg ="\u0067\u0065\u0074U\u0073\u0065\u0072\u0054\u0061\u0062\u006c\u0065";
var _fgdb int ;for _ ,_aaaf :=range _fgae .Header .RTSegments {if _aaaf .Type ==53{if _fgdb ==_dgfg {_dgdca ,_geff :=_aaaf .GetSegmentData ();if _geff !=nil {return nil ,_geff ;};_ccbd ,_faae :=_dgdca .(*TableSegment );if !_faae {_gg .Log .Debug (_be .Sprintf ("\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079p\u0065\u00205\u0033\u0020\u002d\u0020\u0061\u006ed\u0020in\u0064\u0065\u0078\u003a\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_aaaf .SegmentNumber ));
return nil ,_ff .Error (_fcbg ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079\u0070e\u0020\u0035\u0033\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u002a\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};return _ga .NewEncodedTable (_ccbd );};_fgdb ++;};};return nil ,nil ;};func (_aece *Header )readSegmentDataLength (_abba _c .StreamReader )(_ccgg error ){_aece .SegmentDataLength ,_ccgg =_abba .ReadBits (32);if _ccgg !=nil {return _ccgg ;};_aece .SegmentDataLength &=_e .MaxInt32 ;
return nil ;};type GenericRefinementRegion struct{_fd templater ;_aga templater ;_egf _c .StreamReader ;_eb *Header ;RegionInfo *RegionSegment ;IsTPGROn bool ;TemplateID int8 ;Template templater ;GrAtX []int8 ;GrAtY []int8 ;RegionBitmap *_fad .Bitmap ;
ReferenceBitmap *_fad .Bitmap ;ReferenceDX int32 ;ReferenceDY int32 ;_ccg *_a .Decoder ;_agg *_a .DecoderStats ;_abe bool ;_da []bool ;};func (_ebf *GenericRegion )InitEncode (bm *_fad .Bitmap ,xLoc ,yLoc ,template int ,duplicateLineRemoval bool )error {const _gec ="\u0047e\u006e\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069\u006f\u006e.\u0049\u006e\u0069\u0074\u0045\u006e\u0063\u006f\u0064\u0065";
if bm ==nil {return _ff .Error (_gec ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if xLoc < 0||yLoc < 0{return _ff .Error (_gec ,"\u0078\u0020\u0061\u006e\u0064\u0020\u0079\u0020\u006c\u006f\u0063\u0061\u0074i\u006f\u006e\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074h\u0061\u006e\u0020\u0030");
};_ebf .Bitmap =bm ;_ebf .GBTemplate =byte (template );switch _ebf .GBTemplate {case 0:_ebf .GBAtX =[]int8 {3,-3,2,-2};_ebf .GBAtY =[]int8 {-1,-1,-2,-2};case 1:_ebf .GBAtX =[]int8 {3};_ebf .GBAtY =[]int8 {-1};case 2,3:_ebf .GBAtX =[]int8 {2};_ebf .GBAtY =[]int8 {-1};
default:return _ff .Errorf (_gec ,"\u0070\u0072o\u0076\u0069\u0064\u0065\u0064 \u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u002c\u0032\u002c\u0033\u007d",template );
};_ebf .RegionSegment =&RegionSegment {BitmapHeight :uint32 (bm .Height ),BitmapWidth :uint32 (bm .Width ),XLocation :uint32 (xLoc ),YLocation :uint32 (yLoc )};_ebf .IsTPGDon =duplicateLineRemoval ;return nil ;};func (_edff *HalftoneRegion )combineGrayscalePlanes (_gdgb []*_fad .Bitmap ,_fge int )error {_fdgg :=0;
for _aebf :=0;_aebf < _gdgb [_fge ].Height ;_aebf ++{for _gfd :=0;_gfd < _gdgb [_fge ].Width ;_gfd +=8{_deedd ,_ddce :=_gdgb [_fge +1].GetByte (_fdgg );if _ddce !=nil {return _ddce ;};_debe ,_ddce :=_gdgb [_fge ].GetByte (_fdgg );if _ddce !=nil {return _ddce ;
};_ddce =_gdgb [_fge ].SetByte (_fdgg ,_fad .CombineBytes (_debe ,_deedd ,_fad .CmbOpXor ));if _ddce !=nil {return _ddce ;};_fdgg ++;};};return nil ;};func (_dfcg *Header )subInputReader ()(_c .StreamReader ,error ){return _c .NewSubstreamReader (_dfcg .Reader ,_dfcg .SegmentDataStartOffset ,_dfcg .SegmentDataLength );
};const (TSymbolDictionary Type =0;TIntermediateTextRegion Type =4;TImmediateTextRegion Type =6;TImmediateLosslessTextRegion Type =7;TPatternDictionary Type =16;TIntermediateHalftoneRegion Type =20;TImmediateHalftoneRegion Type =22;TImmediateLosslessHalftoneRegion Type =23;
TIntermediateGenericRegion Type =36;TImmediateGenericRegion Type =38;TImmediateLosslessGenericRegion Type =39;TIntermediateGenericRefinementRegion Type =40;TImmediateGenericRefinementRegion Type =42;TImmediateLosslessGenericRefinementRegion Type =43;TPageInformation Type =48;
TEndOfPage Type =49;TEndOfStrip Type =50;TEndOfFile Type =51;TProfiles Type =52;TTables Type =53;TExtension Type =62;TBitmap Type =70;);func (_beeab *SymbolDictionary )decodeDifferenceWidth ()(int64 ,error ){if _beeab .IsHuffmanEncoded {switch _beeab .SdHuffDecodeWidthSelection {case 0:_gffc ,_bgff :=_ga .GetStandardTable (2);
if _bgff !=nil {return 0,_bgff ;};return _gffc .Decode (_beeab ._gfdb );case 1:_bgdf ,_caeaf :=_ga .GetStandardTable (3);if _caeaf !=nil {return 0,_caeaf ;};return _bgdf .Decode (_beeab ._gfdb );case 3:if _beeab ._dfag ==nil {var _bbgc int ;if _beeab .SdHuffDecodeHeightSelection ==3{_bbgc ++;
};_efcff ,_ecbb :=_beeab .getUserTable (_bbgc );if _ecbb !=nil {return 0,_ecbb ;};_beeab ._dfag =_efcff ;};return _beeab ._dfag .Decode (_beeab ._gfdb );};}else {_accfa ,_ggfad :=_beeab ._dafa .DecodeInt (_beeab ._cbcb );if _ggfad !=nil {return 0,_ggfad ;
};return int64 (_accfa ),nil ;};return 0,nil ;};var (_ Regioner =&TextRegion {};_ Segmenter =&TextRegion {};);func (_faa *GenericRefinementRegion )decodeTypicalPredictedLineTemplate0 (_ecc ,_gbf ,_bg ,_bge ,_cba ,_gba ,_ad ,_ebg ,_gab int )error {var (_efd ,_agc ,_gbfc ,_ddc ,_cf ,_fdf int ;
_cfg byte ;_adb error ;);if _ecc > 0{_cfg ,_adb =_faa .RegionBitmap .GetByte (_ad -_bg );if _adb !=nil {return _adb ;};_gbfc =int (_cfg );};if _ebg > 0&&_ebg <=_faa .ReferenceBitmap .Height {_cfg ,_adb =_faa .ReferenceBitmap .GetByte (_gab -_bge +_gba );
if _adb !=nil {return _adb ;};_ddc =int (_cfg )<<4;};if _ebg >=0&&_ebg < _faa .ReferenceBitmap .Height {_cfg ,_adb =_faa .ReferenceBitmap .GetByte (_gab +_gba );if _adb !=nil {return _adb ;};_cf =int (_cfg )<<1;};if _ebg > -2&&_ebg < _faa .ReferenceBitmap .Height -1{_cfg ,_adb =_faa .ReferenceBitmap .GetByte (_gab +_bge +_gba );
if _adb !=nil {return _adb ;};_fdf =int (_cfg );};_efd =((_gbfc >>5)&0x6)|((_fdf >>2)&0x30)|(_cf &0x180)|(_ddc &0xc00);var _ege int ;for _bbc :=0;_bbc < _cba ;_bbc =_ege {var _abb int ;_ege =_bbc +8;var _bf int ;if _bf =_gbf -_bbc ;_bf > 8{_bf =8;};_egfg :=_ege < _gbf ;
_ffb :=_ege < _faa .ReferenceBitmap .Width ;_ccgd :=_gba +1;if _ecc > 0{_cfg =0;if _egfg {_cfg ,_adb =_faa .RegionBitmap .GetByte (_ad -_bg +1);if _adb !=nil {return _adb ;};};_gbfc =(_gbfc <<8)|int (_cfg );};if _ebg > 0&&_ebg <=_faa .ReferenceBitmap .Height {var _fdfc int ;
if _ffb {_cfg ,_adb =_faa .ReferenceBitmap .GetByte (_gab -_bge +_ccgd );if _adb !=nil {return _adb ;};_fdfc =int (_cfg )<<4;};_ddc =(_ddc <<8)|_fdfc ;};if _ebg >=0&&_ebg < _faa .ReferenceBitmap .Height {var _egg int ;if _ffb {_cfg ,_adb =_faa .ReferenceBitmap .GetByte (_gab +_ccgd );
if _adb !=nil {return _adb ;};_egg =int (_cfg )<<1;};_cf =(_cf <<8)|_egg ;};if _ebg > -2&&_ebg < (_faa .ReferenceBitmap .Height -1){_cfg =0;if _ffb {_cfg ,_adb =_faa .ReferenceBitmap .GetByte (_gab +_bge +_ccgd );if _adb !=nil {return _adb ;};};_fdf =(_fdf <<8)|int (_cfg );
};for _gf :=0;_gf < _bf ;_gf ++{var _fcg int ;_feg :=false ;_agd :=(_efd >>4)&0x1ff;if _agd ==0x1ff{_feg =true ;_fcg =1;}else if _agd ==0x00{_feg =true ;};if !_feg {if _faa ._abe {_agc =_faa .overrideAtTemplate0 (_efd ,_bbc +_gf ,_ecc ,_abb ,_gf );_faa ._agg .SetIndex (int32 (_agc ));
}else {_faa ._agg .SetIndex (int32 (_efd ));};_fcg ,_adb =_faa ._ccg .DecodeBit (_faa ._agg );if _adb !=nil {return _adb ;};};_gae :=uint (7-_gf );_abb |=_fcg <<_gae ;_efd =((_efd &0xdb6)<<1)|_fcg |(_gbfc >>_gae +5)&0x002|((_fdf >>_gae +2)&0x010)|((_cf >>_gae )&0x080)|((_ddc >>_gae )&0x400);
};_adb =_faa .RegionBitmap .SetByte (_ad ,byte (_abb ));if _adb !=nil {return _adb ;};_ad ++;_gab ++;};return nil ;};func (_eeeag *SymbolDictionary )decodeNewSymbols (_feeb ,_dcfe uint32 ,_ececc *_fad .Bitmap ,_gegb ,_edfd int32 )error {if _eeeag ._fdfa ==nil {_eeeag ._fdfa =_gcdba (_eeeag ._gfdb ,nil );
if _eeeag ._dafa ==nil {var _dbfe error ;_eeeag ._dafa ,_dbfe =_a .New (_eeeag ._gfdb );if _dbfe !=nil {return _dbfe ;};};if _eeeag ._dce ==nil {_eeeag ._dce =_a .NewStats (65536,1);};};_eeeag ._fdfa .setParameters (_eeeag ._dce ,_eeeag ._dafa ,_eeeag .SdrTemplate ,_feeb ,_dcfe ,_ececc ,_gegb ,_edfd ,false ,_eeeag .SdrATX ,_eeeag .SdrATY );
return _eeeag .addSymbol (_eeeag ._fdfa );};func (_beae *SymbolDictionary )encodeFlags (_cccd _c .BinaryWriter )(_daed int ,_cefd error ){const _bfc ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _cefd =_cccd .SkipBits (3);_cefd !=nil {return 0,_ff .Wrap (_cefd ,_bfc ,"\u0065\u006d\u0070\u0074\u0079\u0020\u0062\u0069\u0074\u0073");
};var _dgbd int ;if _beae .SdrTemplate > 0{_dgbd =1;};if _cefd =_cccd .WriteBit (_dgbd );_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"s\u0064\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_dgbd =0;if _beae .SdTemplate > 1{_dgbd =1;};
if _cefd =_cccd .WriteBit (_dgbd );_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_dgbd =0;if _beae .SdTemplate ==1||_beae .SdTemplate ==3{_dgbd =1;};if _cefd =_cccd .WriteBit (_dgbd );
_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_dgbd =0;if _beae ._fgda {_dgbd =1;};if _cefd =_cccd .WriteBit (_dgbd );_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"\u0063\u006f\u0064in\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0065\u0064");
};_dgbd =0;if _beae ._eeeb {_dgbd =1;};if _cefd =_cccd .WriteBit (_dgbd );_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"\u0063\u006f\u0064\u0069ng\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0075\u0073\u0065\u0064");};_dgbd =0;if _beae .SdHuffAggInstanceSelection {_dgbd =1;
};if _cefd =_cccd .WriteBit (_dgbd );_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"\u0073\u0064\u0048\u0075\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074");};_dgbd =int (_beae .SdHuffBMSizeSelection );if _cefd =_cccd .WriteBit (_dgbd );_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"\u0073\u0064\u0048u\u0066\u0066\u0042\u006d\u0053\u0069\u007a\u0065");
};_dgbd =0;if _beae .SdHuffDecodeWidthSelection > 1{_dgbd =1;};if _cefd =_cccd .WriteBit (_dgbd );_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_dgbd =0;switch _beae .SdHuffDecodeWidthSelection {case 1,3:_dgbd =1;
};if _cefd =_cccd .WriteBit (_dgbd );_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_dgbd =0;if _beae .SdHuffDecodeHeightSelection > 1{_dgbd =1;};if _cefd =_cccd .WriteBit (_dgbd );
_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_dgbd =0;switch _beae .SdHuffDecodeHeightSelection {case 1,3:_dgbd =1;};if _cefd =_cccd .WriteBit (_dgbd );_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");
};_dgbd =0;if _beae .UseRefinementAggregation {_dgbd =1;};if _cefd =_cccd .WriteBit (_dgbd );_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"\u0073\u0064\u0052\u0065\u0066\u0041\u0067\u0067");};_dgbd =0;if _beae .IsHuffmanEncoded {_dgbd =1;};if _cefd =_cccd .WriteBit (_dgbd );
_cefd !=nil {return _daed ,_ff .Wrap (_cefd ,_bfc ,"\u0073\u0064\u0048\u0075\u0066\u0066");};return 2,nil ;};func (_ebdb *PageInformationSegment )Encode (w _c .BinaryWriter )(_ddgf int ,_eagg error ){const _edcf ="\u0050\u0061g\u0065\u0049\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u002e\u0045\u006eco\u0064\u0065";
_gad :=make ([]byte ,4);_eg .BigEndian .PutUint32 (_gad ,uint32 (_ebdb .PageBMWidth ));_ddgf ,_eagg =w .Write (_gad );if _eagg !=nil {return _ddgf ,_ff .Wrap (_eagg ,_edcf ,"\u0077\u0069\u0064t\u0068");};_eg .BigEndian .PutUint32 (_gad ,uint32 (_ebdb .PageBMHeight ));
var _aedb int ;_aedb ,_eagg =w .Write (_gad );if _eagg !=nil {return _aedb +_ddgf ,_ff .Wrap (_eagg ,_edcf ,"\u0068\u0065\u0069\u0067\u0068\u0074");};_ddgf +=_aedb ;_eg .BigEndian .PutUint32 (_gad ,uint32 (_ebdb .ResolutionX ));_aedb ,_eagg =w .Write (_gad );
if _eagg !=nil {return _aedb +_ddgf ,_ff .Wrap (_eagg ,_edcf ,"\u0078\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");};_ddgf +=_aedb ;_eg .BigEndian .PutUint32 (_gad ,uint32 (_ebdb .ResolutionY ));if _aedb ,_eagg =w .Write (_gad );_eagg !=nil {return _aedb +_ddgf ,_ff .Wrap (_eagg ,_edcf ,"\u0079\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");
};_ddgf +=_aedb ;if _eagg =_ebdb .encodeFlags (w );_eagg !=nil {return _ddgf ,_ff .Wrap (_eagg ,_edcf ,"");};_ddgf ++;if _aedb ,_eagg =_ebdb .encodeStripingInformation (w );_eagg !=nil {return _ddgf ,_ff .Wrap (_eagg ,_edcf ,"");};_ddgf +=_aedb ;return _ddgf ,nil ;
};func (_dbfa *SymbolDictionary )decodeRefinedSymbol (_ebbf ,_bcaa uint32 )error {var (_fdfb int ;_gacfg ,_bgfg int32 ;);if _dbfa .IsHuffmanEncoded {_bgaf ,_afa :=_dbfa ._gfdb .ReadBits (byte (_dbfa ._fdge ));if _afa !=nil {return _afa ;};_fdfb =int (_bgaf );
_ddbbg ,_afa :=_ga .GetStandardTable (15);if _afa !=nil {return _afa ;};_gdga ,_afa :=_ddbbg .Decode (_dbfa ._gfdb );if _afa !=nil {return _afa ;};_gacfg =int32 (_gdga );_gdga ,_afa =_ddbbg .Decode (_dbfa ._gfdb );if _afa !=nil {return _afa ;};_bgfg =int32 (_gdga );
_ddbbg ,_afa =_ga .GetStandardTable (1);if _afa !=nil {return _afa ;};if _ ,_afa =_ddbbg .Decode (_dbfa ._gfdb );_afa !=nil {return _afa ;};_dbfa ._gfdb .Align ();}else {_ebdf ,_cggf :=_dbfa ._dafa .DecodeIAID (uint64 (_dbfa ._fdge ),_dbfa ._cbgd );if _cggf !=nil {return _cggf ;
};_fdfb =int (_ebdf );_gacfg ,_cggf =_dbfa ._dafa .DecodeInt (_dbfa ._fffeb );if _cggf !=nil {return _cggf ;};_bgfg ,_cggf =_dbfa ._dafa .DecodeInt (_dbfa ._abaac );if _cggf !=nil {return _cggf ;};};if _abdf :=_dbfa .setSymbolsArray ();_abdf !=nil {return _abdf ;
};_egagd :=_dbfa ._gfa [_fdfb ];if _ecdac :=_dbfa .decodeNewSymbols (_ebbf ,_bcaa ,_egagd ,_gacfg ,_bgfg );_ecdac !=nil {return _ecdac ;};if _dbfa .IsHuffmanEncoded {_dbfa ._gfdb .Align ();};return nil ;};func (_ecec *GenericRegion )overrideAtTemplate3 (_edagg ,_bfg ,_fdff ,_fcad ,_gcba int )int {_edagg &=0x3EF;
if _ecec .GBAtY [0]==0&&_ecec .GBAtX [0]>=-int8 (_gcba ){_edagg |=(_fcad >>uint (7-(int8 (_gcba )+_ecec .GBAtX [0]))&0x1)<<4;}else {_edagg |=int (_ecec .getPixel (_bfg +int (_ecec .GBAtX [0]),_fdff +int (_ecec .GBAtY [0])))<<4;};return _edagg ;};func (_gcdb *GenericRefinementRegion )String ()string {_aabd :=&_b .Builder {};
_aabd .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_aabd .WriteString (_gcdb .RegionInfo .String ()+"\u000a");_aabd .WriteString (_be .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0052\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_gcdb .IsTPGROn ));
_aabd .WriteString (_be .Sprintf ("\u0009-\u0020T\u0065\u006d\u0070\u006c\u0061t\u0065\u0049D\u003a\u0020\u0025\u0076\u000a",_gcdb .TemplateID ));_aabd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_gcdb .GrAtX ));
_aabd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_gcdb .GrAtY ));_aabd .WriteString (_be .Sprintf ("\u0009-\u0020R\u0065\u0066\u0065\u0072\u0065n\u0063\u0065D\u0058\u0020\u0025\u0076\u000a",_gcdb .ReferenceDX ));
_aabd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0052ef\u0065\u0072\u0065\u006e\u0063\u0044\u0065\u0059\u003a\u0020\u0025\u0076\u000a",_gcdb .ReferenceDY ));return _aabd .String ();};func (_ceb *Header )parse (_bccd Documenter ,_bdg _c .StreamReader ,_ffec int64 ,_bcca OrganizationType )(_gcbf error ){const _cag ="\u0070\u0061\u0072s\u0065";
_gg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u005b\u0050A\u0052\u0053\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _gcbf !=nil {_gg .Log .Trace ("\u005b\u0053\u0045GM\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045R\u005d[\u0050A\u0052S\u0045\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_gcbf );
}else {_gg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052]\u005bP\u0041\u0052\u0053\u0045\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");};}();_ ,_gcbf =_bdg .Seek (_ffec ,_ee .SeekStart );
if _gcbf !=nil {return _ff .Wrap (_gcbf ,_cag ,"\u0073\u0065\u0065\u006b\u0020\u0073\u0074\u0061\u0072\u0074");};if _gcbf =_ceb .readSegmentNumber (_bdg );_gcbf !=nil {return _ff .Wrap (_gcbf ,_cag ,"");};if _gcbf =_ceb .readHeaderFlags ();_gcbf !=nil {return _ff .Wrap (_gcbf ,_cag ,"");
};var _eebg uint64 ;_eebg ,_gcbf =_ceb .readNumberOfReferredToSegments (_bdg );if _gcbf !=nil {return _ff .Wrap (_gcbf ,_cag ,"");};_ceb .RTSNumbers ,_gcbf =_ceb .readReferredToSegmentNumbers (_bdg ,int (_eebg ));if _gcbf !=nil {return _ff .Wrap (_gcbf ,_cag ,"");
};_gcbf =_ceb .readSegmentPageAssociation (_bccd ,_bdg ,_eebg ,_ceb .RTSNumbers ...);if _gcbf !=nil {return _ff .Wrap (_gcbf ,_cag ,"");};if _ceb .Type !=TEndOfFile {if _gcbf =_ceb .readSegmentDataLength (_bdg );_gcbf !=nil {return _ff .Wrap (_gcbf ,_cag ,"");
};};_ceb .readDataStartOffset (_bdg ,_bcca );_ceb .readHeaderLength (_bdg ,_ffec );_gg .Log .Trace ("\u0025\u0073",_ceb );return nil ;};func (_fced *Header )writeFlags (_gdbfa _c .BinaryWriter )(_fgef error ){const _efec ="\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065F\u006c\u0061\u0067\u0073";
_ddbb :=byte (_fced .Type );if _fgef =_gdbfa .WriteByte (_ddbb );_fgef !=nil {return _ff .Wrap (_fgef ,_efec ,"\u0077\u0072\u0069ti\u006e\u0067\u0020\u0073\u0065\u0067\u006d\u0065\u006et\u0020t\u0079p\u0065 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};if !_fced .RetainFlag &&!_fced .PageAssociationFieldSize {return nil ;};if _fgef =_gdbfa .SkipBits (-8);_fgef !=nil {return _ff .Wrap (_fgef ,_efec ,"\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0061\u0063\u006b\u0020\u0074\u0068\u0065\u0020\u0062\u0069\u0074\u0073\u0020\u0066\u0061il\u0065\u0064");
};var _bcag int ;if _fced .RetainFlag {_bcag =1;};if _fgef =_gdbfa .WriteBit (_bcag );_fgef !=nil {return _ff .Wrap (_fgef ,_efec ,"\u0072\u0065\u0074\u0061in\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067\u0073");};_bcag =0;if _fced .PageAssociationFieldSize {_bcag =1;
};if _fgef =_gdbfa .WriteBit (_bcag );_fgef !=nil {return _ff .Wrap (_fgef ,_efec ,"p\u0061\u0067\u0065\u0020as\u0073o\u0063\u0069\u0061\u0074\u0069o\u006e\u0020\u0066\u006c\u0061\u0067");};_gdbfa .FinishByte ();return nil ;};func (_fgde *GenericRegion )decodeTemplate2 (_ccf ,_eaf ,_cde int ,_aac ,_bbga int )(_deg error ){const _bga ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0032";
var (_adg ,_dfed int ;_ddcg ,_gdbg int ;_bfdg byte ;_ece ,_dfaa int ;);if _ccf >=1{_bfdg ,_deg =_fgde .Bitmap .GetByte (_bbga );if _deg !=nil {return _ff .Wrap (_deg ,_bga ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0031");
};_ddcg =int (_bfdg );};if _ccf >=2{_bfdg ,_deg =_fgde .Bitmap .GetByte (_bbga -_fgde .Bitmap .RowStride );if _deg !=nil {return _ff .Wrap (_deg ,_bga ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0032");};_gdbg =int (_bfdg )<<4;
};_adg =(_ddcg >>3&0x7c)|(_gdbg >>3&0x380);for _cge :=0;_cge < _cde ;_cge =_ece {var (_ggfa byte ;_fdab int ;);_ece =_cge +8;if _caf :=_eaf -_cge ;_caf > 8{_fdab =8;}else {_fdab =_caf ;};if _ccf > 0{_ddcg <<=8;if _ece < _eaf {_bfdg ,_deg =_fgde .Bitmap .GetByte (_bbga +1);
if _deg !=nil {return _ff .Wrap (_deg ,_bga ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0030");};_ddcg |=int (_bfdg );};};if _ccf > 1{_gdbg <<=8;if _ece < _eaf {_bfdg ,_deg =_fgde .Bitmap .GetByte (_bbga -_fgde .Bitmap .RowStride +1);
if _deg !=nil {return _ff .Wrap (_deg ,_bga ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0031");};_gdbg |=int (_bfdg )<<4;};};for _dac :=0;_dac < _fdab ;_dac ++{_bfe :=uint (10-_dac );if _fgde ._gef {_dfed =_fgde .overrideAtTemplate2 (_adg ,_cge +_dac ,_ccf ,int (_ggfa ),_dac );
_fgde ._bgca .SetIndex (int32 (_dfed ));}else {_fgde ._bgca .SetIndex (int32 (_adg ));};_dfaa ,_deg =_fgde ._efae .DecodeBit (_fgde ._bgca );if _deg !=nil {return _ff .Wrap (_deg ,_bga ,"");};_ggfa |=byte (_dfaa <<uint (7-_dac ));_adg =((_adg &0x1bd)<<1)|_dfaa |((_ddcg >>_bfe )&0x4)|((_gdbg >>_bfe )&0x80);
};if _ffaa :=_fgde .Bitmap .SetByte (_aac ,_ggfa );_ffaa !=nil {return _ff .Wrap (_ffaa ,_bga ,"");};_aac ++;_bbga ++;};return nil ;};func (_gece *TextRegion )decodeRdh ()(int64 ,error ){const _cdfb ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064h";if _gece .IsHuffmanEncoded {if _gece .SbHuffRDHeight ==3{if _gece ._cgad ==nil {var (_aaag int ;
_bfag error ;);if _gece .SbHuffFS ==3{_aaag ++;};if _gece .SbHuffDS ==3{_aaag ++;};if _gece .SbHuffDT ==3{_aaag ++;};if _gece .SbHuffRDWidth ==3{_aaag ++;};_gece ._cgad ,_bfag =_gece .getUserTable (_aaag );if _bfag !=nil {return 0,_ff .Wrap (_bfag ,_cdfb ,"");
};};return _gece ._cgad .Decode (_gece ._afae );};_aegg ,_egfgb :=_ga .GetStandardTable (14+int (_gece .SbHuffRDHeight ));if _egfgb !=nil {return 0,_ff .Wrap (_egfgb ,_cdfb ,"");};return _aegg .Decode (_gece ._afae );};_aggga ,_dcacg :=_gece ._fgeb .DecodeInt (_gece ._efdf );
if _dcacg !=nil {return 0,_ff .Wrap (_dcacg ,_cdfb ,"");};return int64 (_aggga ),nil ;};func (_ddff *SymbolDictionary )decodeHeightClassCollectiveBitmap (_aeed int64 ,_ffaga ,_caccb uint32 )(*_fad .Bitmap ,error ){if _aeed ==0{_cdafc :=_fad .New (int (_caccb ),int (_ffaga ));
var (_ebca byte ;_bdcb error ;);for _bbfe :=0;_bbfe < len (_cdafc .Data );_bbfe ++{_ebca ,_bdcb =_ddff ._gfdb .ReadByte ();if _bdcb !=nil {return nil ,_bdcb ;};if _bdcb =_cdafc .SetByte (_bbfe ,_ebca );_bdcb !=nil {return nil ,_bdcb ;};};return _cdafc ,nil ;
};if _ddff ._dabe ==nil {_ddff ._dabe =NewGenericRegion (_ddff ._gfdb );};_ddff ._dabe .setParameters (true ,_ddff ._gfdb .StreamPosition (),_aeed ,_ffaga ,_caccb );_abac ,_fbee :=_ddff ._dabe .GetRegionBitmap ();if _fbee !=nil {return nil ,_fbee ;};return _abac ,nil ;
};func (_fada *SymbolDictionary )setRetainedCodingContexts (_affeb *SymbolDictionary ){_fada ._dafa =_affeb ._dafa ;_fada .IsHuffmanEncoded =_affeb .IsHuffmanEncoded ;_fada .UseRefinementAggregation =_affeb .UseRefinementAggregation ;_fada .SdTemplate =_affeb .SdTemplate ;
_fada .SdrTemplate =_affeb .SdrTemplate ;_fada .SdATX =_affeb .SdATX ;_fada .SdATY =_affeb .SdATY ;_fada .SdrATX =_affeb .SdrATX ;_fada .SdrATY =_affeb .SdrATY ;_fada ._dce =_affeb ._dce ;};func (_baf *GenericRefinementRegion )parseHeader ()(_edgc error ){_gg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072s\u0069\u006e\u0067\u0020\u0048e\u0061\u0064e\u0072\u002e\u002e\u002e");
_fgg :=_f .Now ();defer func (){if _edgc ==nil {_gg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045G\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020h\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0069\u006e\u0069\u0073\u0068id\u0020\u0069\u006e\u003a\u0020\u0025\u0064\u0020\u006e\u0073",_f .Since (_fgg ).Nanoseconds ());
}else {_gg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0073",_edgc );
};}();if _edgc =_baf .RegionInfo .parseHeader ();_edgc !=nil {return _edgc ;};_ ,_edgc =_baf ._egf .ReadBits (6);if _edgc !=nil {return _edgc ;};_baf .IsTPGROn ,_edgc =_baf ._egf .ReadBool ();if _edgc !=nil {return _edgc ;};var _dda int ;_dda ,_edgc =_baf ._egf .ReadBit ();
if _edgc !=nil {return _edgc ;};_baf .TemplateID =int8 (_dda );switch _baf .TemplateID {case 0:_baf .Template =_baf ._fd ;if _edgc =_baf .readAtPixels ();_edgc !=nil {return ;};case 1:_baf .Template =_baf ._aga ;};return nil ;};type SegmentEncoder interface{Encode (_acge _c .BinaryWriter )(_dgce int ,_egaa error );
};func (_babc *SymbolDictionary )decodeThroughTextRegion (_gfbb ,_eggeg ,_beab uint32 )error {if _babc ._gacg ==nil {_babc ._gacg =_cec (_babc ._gfdb ,nil );_babc ._gacg .setContexts (_babc ._dce ,_a .NewStats (512,1),_a .NewStats (512,1),_a .NewStats (512,1),_a .NewStats (512,1),_babc ._cbgd ,_a .NewStats (512,1),_a .NewStats (512,1),_a .NewStats (512,1),_a .NewStats (512,1));
};if _gcg :=_babc .setSymbolsArray ();_gcg !=nil {return _gcg ;};_babc ._gacg .setParameters (_babc ._dafa ,_babc .IsHuffmanEncoded ,true ,_gfbb ,_eggeg ,_beab ,1,_babc ._aaca +_babc ._cdgg ,0,0,0,1,0,0,0,0,0,0,0,0,0,_babc .SdrTemplate ,_babc .SdrATX ,_babc .SdrATY ,_babc ._gfa ,_babc ._fdge );
return _babc .addSymbol (_babc ._gacg );};func (_bc *GenericRefinementRegion )getGrReference ()(*_fad .Bitmap ,error ){segments :=_bc ._eb .RTSegments ;if len (segments )==0{return nil ,_egb .New ("\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0065\u0078is\u0074\u0073");
};_ge ,_ba :=segments [0].GetSegmentData ();if _ba !=nil {return nil ,_ba ;};_fdd ,_dd :=_ge .(Regioner );if !_dd {return nil ,_be .Errorf ("\u0072\u0065\u0066\u0065\u0072r\u0065\u0064\u0020\u0074\u006f\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_ge );
};return _fdd .GetRegionBitmap ();};func (_caab *SymbolDictionary )encodeATFlags (_cfcc _c .BinaryWriter )(_cbab int ,_eca error ){const _dcea ="\u0065\u006e\u0063\u006f\u0064\u0065\u0041\u0054\u0046\u006c\u0061\u0067\u0073";if _caab .IsHuffmanEncoded ||_caab .SdTemplate !=0{return 0,nil ;
};_gaff :=4;if _caab .SdTemplate !=0{_gaff =1;};for _ffbf :=0;_ffbf < _gaff ;_ffbf ++{if _eca =_cfcc .WriteByte (byte (_caab .SdATX [_ffbf ]));_eca !=nil {return _cbab ,_ff .Wrapf (_eca ,_dcea ,"\u0053d\u0041\u0054\u0058\u005b\u0025\u0064]",_ffbf );};_cbab ++;
if _eca =_cfcc .WriteByte (byte (_caab .SdATY [_ffbf ]));_eca !=nil {return _cbab ,_ff .Wrapf (_eca ,_dcea ,"\u0053d\u0041\u0054\u0059\u005b\u0025\u0064]",_ffbf );};_cbab ++;};return _cbab ,nil ;};func (_fdg *HalftoneRegion )GetPatterns ()([]*_fad .Bitmap ,error ){var (_ddb []*_fad .Bitmap ;
_ada error ;);for _ ,_dca :=range _fdg ._effc .RTSegments {var _befe Segmenter ;_befe ,_ada =_dca .GetSegmentData ();if _ada !=nil {_gg .Log .Debug ("\u0047e\u0074\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061 \u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025v",_ada );
return nil ,_ada ;};_eacd ,_edef :=_befe .(*PatternDictionary );if !_edef {_ada =_be .Errorf ("\u0072e\u006c\u0061t\u0065\u0064\u0020\u0073e\u0067\u006d\u0065n\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0070at\u0074\u0065\u0072n\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u003a \u0025\u0054",_befe );
return nil ,_ada ;};var _bca []*_fad .Bitmap ;_bca ,_ada =_eacd .GetDictionary ();if _ada !=nil {_gg .Log .Debug ("\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ada );
return nil ,_ada ;};_ddb =append (_ddb ,_bca ...);};return _ddb ,nil ;};func (_edage *HalftoneRegion )computeX (_bcc ,_fed int )int {return _edage .shiftAndFill (int (_edage .HGridX )+_bcc *int (_edage .HRegionY )+_fed *int (_edage .HRegionX ));};func (_cegff *TextRegion )checkInput ()error {const _ceef ="\u0063\u0068\u0065\u0063\u006b\u0049\u006e\u0070\u0075\u0074";
if !_cegff .UseRefinement {if _cegff .SbrTemplate !=0{_gg .Log .Debug ("\u0053\u0062\u0072Te\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_cegff .SbrTemplate =0;};};if _cegff .SbHuffFS ==2||_cegff .SbHuffRDWidth ==2||_cegff .SbHuffRDHeight ==2||_cegff .SbHuffRDX ==2||_cegff .SbHuffRDY ==2{return _ff .Error (_ceef ,"h\u0075\u0066\u0066\u006d\u0061\u006e \u0066\u006c\u0061\u0067\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064");
};if !_cegff .UseRefinement {if _cegff .SbHuffRSize !=0{_gg .Log .Debug ("\u0053\u0062\u0048uf\u0066\u0052\u0053\u0069\u007a\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_cegff .SbHuffRSize =0;};if _cegff .SbHuffRDY !=0{_gg .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044Y\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");
_cegff .SbHuffRDY =0;};if _cegff .SbHuffRDX !=0{_gg .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044X\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");_cegff .SbHuffRDX =0;};if _cegff .SbHuffRDWidth !=0{_gg .Log .Debug ("\u0053b\u0048\u0075\u0066\u0066R\u0044\u0057\u0069\u0064\u0074h\u0020s\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u00200");
_cegff .SbHuffRDWidth =0;};if _cegff .SbHuffRDHeight !=0{_gg .Log .Debug ("\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069g\u0068\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020b\u0065\u0020\u0030");_cegff .SbHuffRDHeight =0;};
};return nil ;};func (_cbff *GenericRefinementRegion )decodeTemplate (_ggf ,_cgd ,_gac ,_cda ,_efg ,_beg ,_cfa ,_gabf ,_gbc ,_gcb int ,_cfe templater )(_eff error ){var (_bfa ,_cfb ,_deb ,_eda ,_eac int16 ;_dfa ,_bee ,_egeb ,_gbfd int ;_debc byte ;);if _gbc >=1&&(_gbc -1)< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb -_cda );
if _eff !=nil {return ;};_dfa =int (_debc );};if _gbc >=0&&(_gbc )< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb );if _eff !=nil {return ;};_bee =int (_debc );};if _gbc >=-1&&(_gbc +1)< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb +_cda );
if _eff !=nil {return ;};_egeb =int (_debc );};_gcb ++;if _ggf >=1{_debc ,_eff =_cbff .RegionBitmap .GetByte (_gabf -_gac );if _eff !=nil {return ;};_gbfd =int (_debc );};_gabf ++;_gcd :=_cbff .ReferenceDX %8;_gdb :=6+_gcd ;_cbfc :=_gcb %_cda ;if _gdb >=0{if _gdb < 8{_bfa =int16 (_dfa >>uint (_gdb ))&0x07;
};if _gdb < 8{_cfb =int16 (_bee >>uint (_gdb ))&0x07;};if _gdb < 8{_deb =int16 (_egeb >>uint (_gdb ))&0x07;};if _gdb ==6&&_cbfc > 1{if _gbc >=1&&(_gbc -1)< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb -_cda -2);if _eff !=nil {return _eff ;
};_bfa |=int16 (_debc <<2)&0x04;};if _gbc >=0&&_gbc < _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb -2);if _eff !=nil {return _eff ;};_cfb |=int16 (_debc <<2)&0x04;};if _gbc >=-1&&_gbc +1< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb +_cda -2);
if _eff !=nil {return _eff ;};_deb |=int16 (_debc <<2)&0x04;};};if _gdb ==0{_dfa =0;_bee =0;_egeb =0;if _cbfc < _cda -1{if _gbc >=1&&_gbc -1< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb -_cda );if _eff !=nil {return _eff ;
};_dfa =int (_debc );};if _gbc >=0&&_gbc < _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb );if _eff !=nil {return _eff ;};_bee =int (_debc );};if _gbc >=-1&&_gbc +1< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb +_cda );
if _eff !=nil {return _eff ;};_egeb =int (_debc );};};_gcb ++;};}else {_bfa =int16 (_dfa <<1)&0x07;_cfb =int16 (_bee <<1)&0x07;_deb =int16 (_egeb <<1)&0x07;_dfa =0;_bee =0;_egeb =0;if _cbfc < _cda -1{if _gbc >=1&&_gbc -1< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb -_cda );
if _eff !=nil {return _eff ;};_dfa =int (_debc );};if _gbc >=0&&_gbc < _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb );if _eff !=nil {return _eff ;};_bee =int (_debc );};if _gbc >=-1&&_gbc +1< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb +_cda );
if _eff !=nil {return _eff ;};_egeb =int (_debc );};_gcb ++;};_bfa |=int16 ((_dfa >>7)&0x07);_cfb |=int16 ((_bee >>7)&0x07);_deb |=int16 ((_egeb >>7)&0x07);};_eda =int16 (_gbfd >>6);_eac =0;_cdaf :=(2-_gcd )%8;_dfa <<=uint (_cdaf );_bee <<=uint (_cdaf );
_egeb <<=uint (_cdaf );_gbfd <<=2;var _fdb int ;for _beee :=0;_beee < _cgd ;_beee ++{_dag :=_beee &0x07;_gag :=_cfe .form (_bfa ,_cfb ,_deb ,_eda ,_eac );if _cbff ._abe {_debc ,_eff =_cbff .RegionBitmap .GetByte (_cbff .RegionBitmap .GetByteIndex (_beee ,_ggf ));
if _eff !=nil {return _eff ;};_cbff ._agg .SetIndex (int32 (_cbff .overrideAtTemplate0 (int (_gag ),_beee ,_ggf ,int (_debc ),_dag )));}else {_cbff ._agg .SetIndex (int32 (_gag ));};_fdb ,_eff =_cbff ._ccg .DecodeBit (_cbff ._agg );if _eff !=nil {return _eff ;
};if _eff =_cbff .RegionBitmap .SetPixel (_beee ,_ggf ,byte (_fdb ));_eff !=nil {return _eff ;};_bfa =((_bfa <<1)|0x01&int16 (_dfa >>7))&0x07;_cfb =((_cfb <<1)|0x01&int16 (_bee >>7))&0x07;_deb =((_deb <<1)|0x01&int16 (_egeb >>7))&0x07;_eda =((_eda <<1)|0x01&int16 (_gbfd >>7))&0x07;
_eac =int16 (_fdb );if (_beee -int (_cbff .ReferenceDX ))%8==5{_dfa =0;_bee =0;_egeb =0;if ((_beee -int (_cbff .ReferenceDX ))/8)+1< _cbff .ReferenceBitmap .RowStride {if _gbc >=1&&(_gbc -1)< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb -_cda );
if _eff !=nil {return _eff ;};_dfa =int (_debc );};if _gbc >=0&&_gbc < _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb );if _eff !=nil {return _eff ;};_bee =int (_debc );};if _gbc >=-1&&(_gbc +1)< _cbff .ReferenceBitmap .Height {_debc ,_eff =_cbff .ReferenceBitmap .GetByte (_gcb +_cda );
if _eff !=nil {return _eff ;};_egeb =int (_debc );};};_gcb ++;}else {_dfa <<=1;_bee <<=1;_egeb <<=1;};if _dag ==5&&_ggf >=1{if ((_beee >>3)+1)>=_cbff .RegionBitmap .RowStride {_gbfd =0;}else {_debc ,_eff =_cbff .RegionBitmap .GetByte (_gabf -_gac );if _eff !=nil {return _eff ;
};_gbfd =int (_debc );};_gabf ++;}else {_gbfd <<=1;};};return nil ;};func (_cef *PageInformationSegment )readResolution ()error {_cbead ,_ffagd :=_cef ._dbd .ReadBits (32);if _ffagd !=nil {return _ffagd ;};_cef .ResolutionX =int (_cbead &_e .MaxInt32 );
_cbead ,_ffagd =_cef ._dbd .ReadBits (32);if _ffagd !=nil {return _ffagd ;};_cef .ResolutionY =int (_cbead &_e .MaxInt32 );return nil ;};func (_dcbb *TextRegion )encodeFlags (_cdbac _c .BinaryWriter )(_cgcb int ,_dade error ){const _gdaac ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _dade =_cdbac .WriteBit (int (_dcbb .SbrTemplate ));_dade !=nil {return _cgcb ,_ff .Wrap (_dade ,_gdaac ,"s\u0062\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _ ,_dade =_cdbac .WriteBits (uint64 (_dcbb .SbDsOffset ),5);_dade !=nil {return _cgcb ,_ff .Wrap (_dade ,_gdaac ,"\u0073\u0062\u0044\u0073\u004f\u0066\u0066\u0073\u0065\u0074");
};if _dade =_cdbac .WriteBit (int (_dcbb .DefaultPixel ));_dade !=nil {return _cgcb ,_ff .Wrap (_dade ,_gdaac ,"\u0044\u0065\u0066a\u0075\u006c\u0074\u0050\u0069\u0078\u0065\u006c");};if _ ,_dade =_cdbac .WriteBits (uint64 (_dcbb .CombinationOperator ),2);
_dade !=nil {return _cgcb ,_ff .Wrap (_dade ,_gdaac ,"\u0043\u006f\u006d\u0062in\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};if _dade =_cdbac .WriteBit (int (_dcbb .IsTransposed ));_dade !=nil {return _cgcb ,_ff .Wrap (_dade ,_gdaac ,"\u0069\u0073\u0020\u0074\u0072\u0061\u006e\u0073\u0070\u006f\u0073\u0065\u0064");
};if _ ,_dade =_cdbac .WriteBits (uint64 (_dcbb .ReferenceCorner ),2);_dade !=nil {return _cgcb ,_ff .Wrap (_dade ,_gdaac ,"\u0072\u0065f\u0065\u0072\u0065n\u0063\u0065\u0020\u0063\u006f\u0072\u006e\u0065\u0072");};if _ ,_dade =_cdbac .WriteBits (uint64 (_dcbb .LogSBStrips ),2);
_dade !=nil {return _cgcb ,_ff .Wrap (_dade ,_gdaac ,"L\u006f\u0067\u0053\u0042\u0053\u0074\u0072\u0069\u0070\u0073");};var _gegf int ;if _dcbb .UseRefinement {_gegf =1;};if _dade =_cdbac .WriteBit (_gegf );_dade !=nil {return _cgcb ,_ff .Wrap (_dade ,_gdaac ,"\u0075\u0073\u0065\u0020\u0072\u0065\u0066\u0069\u006ee\u006d\u0065\u006e\u0074");
};_gegf =0;if _dcbb .IsHuffmanEncoded {_gegf =1;};if _dade =_cdbac .WriteBit (_gegf );_dade !=nil {return _cgcb ,_ff .Wrap (_dade ,_gdaac ,"u\u0073\u0065\u0020\u0068\u0075\u0066\u0066\u006d\u0061\u006e");};_cgcb =2;return _cgcb ,nil ;};func (_eebb *HalftoneRegion )parseHeader ()error {if _fcb :=_eebb .RegionSegment .parseHeader ();
_fcb !=nil {return _fcb ;};_dae ,_aeg :=_eebb ._efbb .ReadBit ();if _aeg !=nil {return _aeg ;};_eebb .HDefaultPixel =int8 (_dae );_aae ,_aeg :=_eebb ._efbb .ReadBits (3);if _aeg !=nil {return _aeg ;};_eebb .CombinationOperator =_fad .CombinationOperator (_aae &0xf);
_dae ,_aeg =_eebb ._efbb .ReadBit ();if _aeg !=nil {return _aeg ;};if _dae ==1{_eebb .HSkipEnabled =true ;};_aae ,_aeg =_eebb ._efbb .ReadBits (2);if _aeg !=nil {return _aeg ;};_eebb .HTemplate =byte (_aae &0xf);_dae ,_aeg =_eebb ._efbb .ReadBit ();if _aeg !=nil {return _aeg ;
};if _dae ==1{_eebb .IsMMREncoded =true ;};_aae ,_aeg =_eebb ._efbb .ReadBits (32);if _aeg !=nil {return _aeg ;};_eebb .HGridWidth =uint32 (_aae &_e .MaxUint32 );_aae ,_aeg =_eebb ._efbb .ReadBits (32);if _aeg !=nil {return _aeg ;};_eebb .HGridHeight =uint32 (_aae &_e .MaxUint32 );
_aae ,_aeg =_eebb ._efbb .ReadBits (32);if _aeg !=nil {return _aeg ;};_eebb .HGridX =int32 (_aae &_e .MaxInt32 );_aae ,_aeg =_eebb ._efbb .ReadBits (32);if _aeg !=nil {return _aeg ;};_eebb .HGridY =int32 (_aae &_e .MaxInt32 );_aae ,_aeg =_eebb ._efbb .ReadBits (16);
if _aeg !=nil {return _aeg ;};_eebb .HRegionX =uint16 (_aae &_e .MaxUint16 );_aae ,_aeg =_eebb ._efbb .ReadBits (16);if _aeg !=nil {return _aeg ;};_eebb .HRegionY =uint16 (_aae &_e .MaxUint16 );if _aeg =_eebb .computeSegmentDataStructure ();_aeg !=nil {return _aeg ;
};return _eebb .checkInput ();};func (_gbcab *GenericRegion )setParametersMMR (_fegg bool ,_cega ,_aeee int64 ,_aagf ,_ebdc uint32 ,_gdbf byte ,_cea ,_fgbd bool ,_cac ,_egae []int8 ){_gbcab .DataOffset =_cega ;_gbcab .DataLength =_aeee ;_gbcab .RegionSegment =&RegionSegment {};
_gbcab .RegionSegment .BitmapHeight =_aagf ;_gbcab .RegionSegment .BitmapWidth =_ebdc ;_gbcab .GBTemplate =_gdbf ;_gbcab .IsMMREncoded =_fegg ;_gbcab .IsTPGDon =_cea ;_gbcab .GBAtX =_cac ;_gbcab .GBAtY =_egae ;};func (_caee *GenericRefinementRegion )getPixel (_egbc *_fad .Bitmap ,_fgcg ,_dee int )int {if _fgcg < 0||_fgcg >=_egbc .Width {return 0;
};if _dee < 0||_dee >=_egbc .Height {return 0;};if _egbc .GetPixel (_fgcg ,_dee ){return 1;};return 0;};func (_ec *GenericRefinementRegion )Init (header *Header ,r _c .StreamReader )error {_ec ._eb =header ;_ec ._egf =r ;_ec .RegionInfo =NewRegionSegment (r );
return _ec .parseHeader ();};func (_bab *Header )writeSegmentDataLength (_fcbf _c .BinaryWriter )(_ace int ,_fgbe error ){_fege :=make ([]byte ,4);_eg .BigEndian .PutUint32 (_fege ,uint32 (_bab .SegmentDataLength ));if _ace ,_fgbe =_fcbf .Write (_fege );
_fgbe !=nil {return 0,_ff .Wrap (_fgbe ,"\u0048\u0065a\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u004c\u0065ng\u0074\u0068","");};return _ace ,nil ;};func (_bdf *HalftoneRegion )renderPattern (_dcb [][]int )(_baaa error ){var _fdbbf ,_cfeb int ;
for _cdab :=0;_cdab < int (_bdf .HGridHeight );_cdab ++{for _ffcb :=0;_ffcb < int (_bdf .HGridWidth );_ffcb ++{_fdbbf =_bdf .computeX (_cdab ,_ffcb );_cfeb =_bdf .computeY (_cdab ,_ffcb );_fgbb :=_bdf .Patterns [_dcb [_cdab ][_ffcb ]];if _baaa =_fad .Blit (_fgbb ,_bdf .HalftoneRegionBitmap ,_fdbbf +int (_bdf .HGridX ),_cfeb +int (_bdf .HGridY ),_bdf .CombinationOperator );
_baaa !=nil {return _baaa ;};};};return nil ;};func (_fgbdf *TextRegion )decodeIb (_gee ,_fggd int64 )(*_fad .Bitmap ,error ){const _cggd ="\u0064\u0065\u0063\u006f\u0064\u0065\u0049\u0062";var (_agaa error ;_fdac *_fad .Bitmap ;);if _gee ==0{if int (_fggd )> len (_fgbdf .Symbols )-1{return nil ,_ff .Error (_cggd ,"\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0049\u0042\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0020\u0069\u006e\u0064\u0065x\u0020\u006f\u0075\u0074\u0020o\u0066\u0020r\u0061\u006e\u0067\u0065");
};return _fgbdf .Symbols [int (_fggd )],nil ;};var _begbc ,_eade ,_cace ,_ebdfb int64 ;_begbc ,_agaa =_fgbdf .decodeRdw ();if _agaa !=nil {return nil ,_ff .Wrap (_agaa ,_cggd ,"");};_eade ,_agaa =_fgbdf .decodeRdh ();if _agaa !=nil {return nil ,_ff .Wrap (_agaa ,_cggd ,"");
};_cace ,_agaa =_fgbdf .decodeRdx ();if _agaa !=nil {return nil ,_ff .Wrap (_agaa ,_cggd ,"");};_ebdfb ,_agaa =_fgbdf .decodeRdy ();if _agaa !=nil {return nil ,_ff .Wrap (_agaa ,_cggd ,"");};if _fgbdf .IsHuffmanEncoded {if _ ,_agaa =_fgbdf .decodeSymInRefSize ();
_agaa !=nil {return nil ,_ff .Wrap (_agaa ,_cggd ,"");};_fgbdf ._afae .Align ();};_dbg :=_fgbdf .Symbols [_fggd ];_abda :=uint32 (_dbg .Width );_bbef :=uint32 (_dbg .Height );_dfff :=int32 (uint32 (_begbc )>>1)+int32 (_cace );_cgbd :=int32 (uint32 (_eade )>>1)+int32 (_ebdfb );
if _fgbdf ._ddec ==nil {_fgbdf ._ddec =_gcdba (_fgbdf ._afae ,nil );};_fgbdf ._ddec .setParameters (_fgbdf ._bfbf ,_fgbdf ._fgeb ,_fgbdf .SbrTemplate ,_abda +uint32 (_begbc ),_bbef +uint32 (_eade ),_dbg ,_dfff ,_cgbd ,false ,_fgbdf .SbrATX ,_fgbdf .SbrATY );
_fdac ,_agaa =_fgbdf ._ddec .GetRegionBitmap ();if _agaa !=nil {return nil ,_ff .Wrap (_agaa ,_cggd ,"\u0067\u0072\u0066");};if _fgbdf .IsHuffmanEncoded {_fgbdf ._afae .Align ();};return _fdac ,nil ;};var _ SegmentEncoder =&GenericRegion {};type Header struct{SegmentNumber uint32 ;
Type Type ;RetainFlag bool ;PageAssociation int ;PageAssociationFieldSize bool ;RTSegments []*Header ;HeaderLength int64 ;SegmentDataLength uint64 ;SegmentDataStartOffset uint64 ;Reader _c .StreamReader ;SegmentData Segmenter ;RTSNumbers []int ;RetainBits []uint8 ;
};func _gcdba (_eeb _c .StreamReader ,_fcdf *Header )*GenericRefinementRegion {return &GenericRefinementRegion {_egf :_eeb ,RegionInfo :NewRegionSegment (_eeb ),_eb :_fcdf ,_fd :&template0 {},_aga :&template1 {}};};func (_befa *TextRegion )symbolIDCodeLengths ()error {var (_dffae []*_ga .Code ;
_bdge uint64 ;_gdaaf _ga .Tabler ;_eecc error ;);for _aegf :=0;_aegf < 35;_aegf ++{_bdge ,_eecc =_befa ._afae .ReadBits (4);if _eecc !=nil {return _eecc ;};_dbbcd :=int (_bdge &0xf);if _dbbcd > 0{_dffae =append (_dffae ,_ga .NewCode (int32 (_dbbcd ),0,int32 (_aegf ),false ));
};};_gdaaf ,_eecc =_ga .NewFixedSizeTable (_dffae );if _eecc !=nil {return _eecc ;};var (_afdac int64 ;_dbcd uint32 ;_dbfbe []*_ga .Code ;_egbab int64 ;);for _dbcd < _befa .NumberOfSymbols {_egbab ,_eecc =_gdaaf .Decode (_befa ._afae );if _eecc !=nil {return _eecc ;
};if _egbab < 32{if _egbab > 0{_dbfbe =append (_dbfbe ,_ga .NewCode (int32 (_egbab ),0,int32 (_dbcd ),false ));};_afdac =_egbab ;_dbcd ++;}else {var _bffef ,_addf int64 ;switch _egbab {case 32:_bdge ,_eecc =_befa ._afae .ReadBits (2);if _eecc !=nil {return _eecc ;
};_bffef =3+int64 (_bdge );if _dbcd > 0{_addf =_afdac ;};case 33:_bdge ,_eecc =_befa ._afae .ReadBits (3);if _eecc !=nil {return _eecc ;};_bffef =3+int64 (_bdge );case 34:_bdge ,_eecc =_befa ._afae .ReadBits (7);if _eecc !=nil {return _eecc ;};_bffef =11+int64 (_bdge );
};for _fcfc :=0;_fcfc < int (_bffef );_fcfc ++{if _addf > 0{_dbfbe =append (_dbfbe ,_ga .NewCode (int32 (_addf ),0,int32 (_dbcd ),false ));};_dbcd ++;};};};_befa ._afae .Align ();_befa ._bdag ,_eecc =_ga .NewFixedSizeTable (_dbfbe );return _eecc ;};func (_ffgcf *GenericRegion )getPixel (_aebd ,_eeec int )int8 {if _aebd < 0||_aebd >=_ffgcf .Bitmap .Width {return 0;
};if _eeec < 0||_eeec >=_ffgcf .Bitmap .Height {return 0;};if _ffgcf .Bitmap .GetPixel (_aebd ,_eeec ){return 1;};return 0;};var (_bbaa Segmenter ;_bfgc =map[Type ]func ()Segmenter {TSymbolDictionary :func ()Segmenter {return &SymbolDictionary {}},TIntermediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateLosslessTextRegion :func ()Segmenter {return &TextRegion {}},TPatternDictionary :func ()Segmenter {return &PatternDictionary {}},TIntermediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateLosslessHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TIntermediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateLosslessGenericRegion :func ()Segmenter {return &GenericRegion {}},TIntermediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateLosslessGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TPageInformation :func ()Segmenter {return &PageInformationSegment {}},TEndOfPage :func ()Segmenter {return _bbaa },TEndOfStrip :func ()Segmenter {return &EndOfStripe {}},TEndOfFile :func ()Segmenter {return _bbaa },TProfiles :func ()Segmenter {return _bbaa },TTables :func ()Segmenter {return &TableSegment {}},TExtension :func ()Segmenter {return _bbaa },TBitmap :func ()Segmenter {return _bbaa }};
);func (_adfa *SymbolDictionary )getUserTable (_effec int )(_ga .Tabler ,error ){var _efaga int ;for _ ,_bgad :=range _adfa .Header .RTSegments {if _bgad .Type ==53{if _efaga ==_effec {_bage ,_beac :=_bgad .GetSegmentData ();if _beac !=nil {return nil ,_beac ;
};_gffde :=_bage .(_ga .BasicTabler );return _ga .NewEncodedTable (_gffde );};_efaga ++;};};return nil ,nil ;};func (_ecb *Header )readDataStartOffset (_fbfee _c .StreamReader ,_egd OrganizationType ){if _egd ==OSequential {_ecb .SegmentDataStartOffset =uint64 (_fbfee .StreamPosition ());
};};func (_beb *GenericRegion )overrideAtTemplate2 (_bcdf ,_ecdfg ,_cddb ,_cfcg ,_aag int )int {_bcdf &=0x3FB;if _beb .GBAtY [0]==0&&_beb .GBAtX [0]>=-int8 (_aag ){_bcdf |=(_cfcg >>uint (7-(int8 (_aag )+_beb .GBAtX [0]))&0x1)<<2;}else {_bcdf |=int (_beb .getPixel (_ecdfg +int (_beb .GBAtX [0]),_cddb +int (_beb .GBAtY [0])))<<2;
};return _bcdf ;};func (_begb *TextRegion )decodeSymbolInstances ()error {_afcd ,_fbca :=_begb .decodeStripT ();if _fbca !=nil {return _fbca ;};var (_gcfd int64 ;_cced uint32 ;);for _cced < _begb .NumberOfSymbolInstances {_aefe ,_effcd :=_begb .decodeDT ();
if _effcd !=nil {return _effcd ;};_afcd +=_aefe ;var _gbfge int64 ;_caeed :=true ;_begb ._ebde =0;for {if _caeed {_gbfge ,_effcd =_begb .decodeDfs ();if _effcd !=nil {return _effcd ;};_gcfd +=_gbfge ;_begb ._ebde =_gcfd ;_caeed =false ;}else {_ccd ,_fafgb :=_begb .decodeIds ();
if _fa .Is (_fafgb ,_g .ErrOOB ){break ;};if _fafgb !=nil {return _fafgb ;};if _cced >=_begb .NumberOfSymbolInstances {break ;};_begb ._ebde +=_ccd +int64 (_begb .SbDsOffset );};_dfbe ,_cgeb :=_begb .decodeCurrentT ();if _cgeb !=nil {return _cgeb ;};_bcdfd :=_afcd +_dfbe ;
_cccg ,_cgeb :=_begb .decodeID ();if _cgeb !=nil {return _cgeb ;};_fdffc ,_cgeb :=_begb .decodeRI ();if _cgeb !=nil {return _cgeb ;};_bcgd ,_cgeb :=_begb .decodeIb (_fdffc ,_cccg );if _cgeb !=nil {return _cgeb ;};if _cgeb =_begb .blit (_bcgd ,_bcdfd );
_cgeb !=nil {return _cgeb ;};_cced ++;};};return nil ;};func (_gcda *PageInformationSegment )String ()string {_dbdd :=&_b .Builder {};_dbdd .WriteString ("\u000a\u005b\u0050\u0041G\u0045\u002d\u0049\u004e\u0046\u004f\u0052\u004d\u0041\u0054I\u004fN\u002d\u0053\u0045\u0047\u004d\u0045\u004eT\u005d\u000a");
_dbdd .WriteString (_be .Sprintf ("\u0009\u002d \u0042\u004d\u0048e\u0069\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u000a",_gcda .PageBMHeight ));_dbdd .WriteString (_be .Sprintf ("\u0009-\u0020B\u004d\u0057\u0069\u0064\u0074\u0068\u003a\u0020\u0025\u0064\u000a",_gcda .PageBMWidth ));
_dbdd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0058\u003a\u0020\u0025\u0064\u000a",_gcda .ResolutionX ));_dbdd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0059\u003a\u0020\u0025\u0064\u000a",_gcda .ResolutionY ));
_dbdd .WriteString (_be .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0073\u000a",_gcda ._cgc ));_dbdd .WriteString (_be .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006eO\u0070\u0065\u0072\u0061\u0074\u006f\u0072O\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025v\u000a",_gcda ._bfde ));
_dbdd .WriteString (_be .Sprintf ("\u0009-\u0020I\u0073\u004c\u006f\u0073\u0073l\u0065\u0073s\u003a\u0020\u0025\u0076\u000a",_gcda .IsLossless ));_dbdd .WriteString (_be .Sprintf ("\u0009\u002d\u0020R\u0065\u0071\u0075\u0069r\u0065\u0073\u0041\u0075\u0078\u0069\u006ci\u0061\u0072\u0079\u0042\u0075\u0066\u0066\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_gcda ._eedge ));
_dbdd .WriteString (_be .Sprintf ("\u0009\u002d\u0020M\u0069\u0067\u0068\u0074C\u006f\u006e\u0074\u0061\u0069\u006e\u0052e\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0076\u000a",_gcda ._dbba ));_dbdd .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0049\u0073\u0053\u0074\u0072\u0069\u0070\u0065\u0064:\u0020\u0025\u0076\u000a",_gcda .IsStripe ));
_dbdd .WriteString (_be .Sprintf ("\t\u002d\u0020\u004d\u0061xS\u0074r\u0069\u0070\u0065\u0053\u0069z\u0065\u003a\u0020\u0025\u0076\u000a",_gcda .MaxStripeSize ));return _dbdd .String ();};func (_gca *GenericRefinementRegion )decodeSLTP ()(int ,error ){_gca .Template .setIndex (_gca ._agg );
return _gca ._ccg .DecodeBit (_gca ._agg );};func (_cbcg *SymbolDictionary )readNumberOfNewSymbols ()error {_efada ,_agf :=_cbcg ._gfdb .ReadBits (32);if _agf !=nil {return _agf ;};_cbcg .NumberOfNewSymbols =uint32 (_efada &_e .MaxUint32 );return nil ;
};func (_cdba *GenericRegion )writeGBAtPixels (_bbad _c .BinaryWriter )(_edf int ,_bcdfc error ){const _ddaf ="\u0077r\u0069t\u0065\u0047\u0042\u0041\u0074\u0050\u0069\u0078\u0065\u006c\u0073";if _cdba .UseMMR {return 0,nil ;};_adba :=1;if _cdba .GBTemplate ==0{_adba =4;
}else if _cdba .UseExtTemplates {_adba =12;};if len (_cdba .GBAtX )!=_adba {return 0,_ff .Errorf (_ddaf ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0058\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};if len (_cdba .GBAtY )!=_adba {return 0,_ff .Errorf (_ddaf ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0059\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};for _agae :=0;_agae < _adba ;_agae ++{if _bcdfc =_bbad .WriteByte (byte (_cdba .GBAtX [_agae ]));_bcdfc !=nil {return _edf ,_ff .Wrap (_bcdfc ,_ddaf ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0058");};_edf ++;if _bcdfc =_bbad .WriteByte (byte (_cdba .GBAtY [_agae ]));
_bcdfc !=nil {return _edf ,_ff .Wrap (_bcdfc ,_ddaf ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0059");};_edf ++;};return _edf ,nil ;};func (_bfgg *PageInformationSegment )readMaxStripeSize ()error {_eebga ,_ddde :=_bfgg ._dbd .ReadBits (15);
if _ddde !=nil {return _ddde ;};_bfgg .MaxStripeSize =uint16 (_eebga &_e .MaxUint16 );return nil ;};func (_fgcd *TextRegion )encodeSymbols (_dfad _c .BinaryWriter )(_gdae int ,_ffcg error ){const _dbcaf ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
_agggg :=make ([]byte ,4);_eg .BigEndian .PutUint32 (_agggg ,_fgcd .NumberOfSymbols );if _gdae ,_ffcg =_dfad .Write (_agggg );_ffcg !=nil {return _gdae ,_ff .Wrap (_ffcg ,_dbcaf ,"\u004e\u0075\u006dbe\u0072\u004f\u0066\u0053\u0079\u006d\u0062\u006f\u006c\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073");
};_gfgg ,_ffcg :=_fad .NewClassedPoints (_fgcd ._dbdfd ,_fgcd ._ffage );if _ffcg !=nil {return 0,_ff .Wrap (_ffcg ,_dbcaf ,"");};var _agdfc ,_aaedb int ;_bdgbc :=_fc .New ();_bdgbc .Init ();if _ffcg =_bdgbc .EncodeInteger (_fc .IADT ,0);_ffcg !=nil {return _gdae ,_ff .Wrap (_ffcg ,_dbcaf ,"\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0044\u0054");
};_edged ,_ffcg :=_gfgg .GroupByY ();if _ffcg !=nil {return 0,_ff .Wrap (_ffcg ,_dbcaf ,"");};for _ ,_aceb :=range _edged {_eegc :=int (_aceb .YAtIndex (0));_bded :=_eegc -_agdfc ;if _ffcg =_bdgbc .EncodeInteger (_fc .IADT ,_bded );_ffcg !=nil {return _gdae ,_ff .Wrap (_ffcg ,_dbcaf ,"");
};var _cfeba int ;for _becdbf ,_efbe :=range _aceb .IntSlice {switch _becdbf {case 0:_gegde :=int (_aceb .XAtIndex (_becdbf ))-_aaedb ;if _ffcg =_bdgbc .EncodeInteger (_fc .IAFS ,_gegde );_ffcg !=nil {return _gdae ,_ff .Wrap (_ffcg ,_dbcaf ,"");};_aaedb +=_gegde ;
_cfeba =_aaedb ;default:_eeaba :=int (_aceb .XAtIndex (_becdbf ))-_cfeba ;if _ffcg =_bdgbc .EncodeInteger (_fc .IADS ,_eeaba );_ffcg !=nil {return _gdae ,_ff .Wrap (_ffcg ,_dbcaf ,"");};_cfeba +=_eeaba ;};_bebd ,_abee :=_fgcd ._gagd .Get (_efbe );if _abee !=nil {return _gdae ,_ff .Wrap (_abee ,_dbcaf ,"");
};_dfffa ,_ffece :=_fgcd ._fcaab [_bebd ];if !_ffece {_dfffa ,_ffece =_fgcd ._bdae [_bebd ];if !_ffece {return _gdae ,_ff .Errorf (_dbcaf ,"\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027\u0025d\u0027\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064 \u0069\u006e\u0020\u0067\u006cob\u0061\u006c\u0020\u0061\u006e\u0064\u0020\u006c\u006f\u0063\u0061\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020\u006d\u0061\u0070",_bebd );
};};if _abee =_bdgbc .EncodeIAID (_fgcd ._bdcd ,_dfffa );_abee !=nil {return _gdae ,_ff .Wrap (_abee ,_dbcaf ,"");};};if _ffcg =_bdgbc .EncodeOOB (_fc .IADS );_ffcg !=nil {return _gdae ,_ff .Wrap (_ffcg ,_dbcaf ,"");};};_bdgbc .Final ();_cgadg ,_ffcg :=_bdgbc .WriteTo (_dfad );
if _ffcg !=nil {return _gdae ,_ff .Wrap (_ffcg ,_dbcaf ,"");};_gdae +=int (_cgadg );return _gdae ,nil ;};func (_gacb *SymbolDictionary )setInSyms ()error {if _gacb .Header .RTSegments !=nil {return _gacb .retrieveImportSymbols ();};_gacb ._ebdcf =make ([]*_fad .Bitmap ,0);
return nil ;};func (_adbaf *TextRegion )decodeID ()(int64 ,error ){if _adbaf .IsHuffmanEncoded {if _adbaf ._bdag ==nil {_aabb ,_gcbfd :=_adbaf ._afae .ReadBits (byte (_adbaf ._bdcf ));return int64 (_aabb ),_gcbfd ;};return _adbaf ._bdag .Decode (_adbaf ._afae );
};return _adbaf ._fgeb .DecodeIAID (uint64 (_adbaf ._bdcf ),_adbaf ._caga );};var _ _ga .BasicTabler =&TableSegment {};func (_afed *Header )readNumberOfReferredToSegments (_efbbg _c .StreamReader )(uint64 ,error ){const _gcae ="\u0072\u0065\u0061\u0064\u004e\u0075\u006d\u0062\u0065\u0072O\u0066\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
_bda ,_fegge :=_efbbg .ReadBits (3);if _fegge !=nil {return 0,_ff .Wrap (_fegge ,_gcae ,"\u0063\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0072\u0074\u0073");};_bda &=0xf;var _aba []byte ;if _bda <=4{_aba =make ([]byte ,5);for _efag :=0;_efag <=4;_efag ++{_fggb ,_afffe :=_efbbg .ReadBit ();
if _afffe !=nil {return 0,_ff .Wrap (_afffe ,_gcae ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_aba [_efag ]=byte (_fggb );};}else {_bda ,_fegge =_efbbg .ReadBits (29);if _fegge !=nil {return 0,_fegge ;};_bda &=_e .MaxInt32 ;
_ccae :=(_bda +8)>>3;_ccae <<=3;_aba =make ([]byte ,_ccae );var _bbf uint64 ;for _bbf =0;_bbf < _ccae ;_bbf ++{_dec ,_ecgb :=_efbbg .ReadBit ();if _ecgb !=nil {return 0,_ff .Wrap (_ecgb ,_gcae ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};_aba [_bbf ]=byte (_dec );};};return _bda ,nil ;};func (_edcc *TextRegion )Init (header *Header ,r _c .StreamReader )error {_edcc .Header =header ;_edcc ._afae =r ;_edcc .RegionInfo =NewRegionSegment (_edcc ._afae );return _edcc .parseHeader ();};func (_dggb *TextRegion )decodeDT ()(_daedg int64 ,_ccaf error ){if _dggb .IsHuffmanEncoded {if _dggb .SbHuffDT ==3{_daedg ,_ccaf =_dggb ._cffc .Decode (_dggb ._afae );
if _ccaf !=nil {return 0,_ccaf ;};}else {var _ggfd _ga .Tabler ;_ggfd ,_ccaf =_ga .GetStandardTable (11+int (_dggb .SbHuffDT ));if _ccaf !=nil {return 0,_ccaf ;};_daedg ,_ccaf =_ggfd .Decode (_dggb ._afae );if _ccaf !=nil {return 0,_ccaf ;};};}else {var _aegdf int32 ;
_aegdf ,_ccaf =_dggb ._fgeb .DecodeInt (_dggb ._bcgb );if _ccaf !=nil {return ;};_daedg =int64 (_aegdf );};_daedg *=int64 (_dggb .SbStrips );return _daedg ,nil ;};func (_fba *GenericRefinementRegion )updateOverride ()error {if _fba .GrAtX ==nil ||_fba .GrAtY ==nil {return _egb .New ("\u0041\u0054\u0020\u0070\u0069\u0078\u0065\u006c\u0073\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");
};if len (_fba .GrAtX )!=len (_fba .GrAtY ){return _egb .New ("A\u0054\u0020\u0070\u0069xe\u006c \u0069\u006e\u0063\u006f\u006es\u0069\u0073\u0074\u0065\u006e\u0074");};_fba ._da =make ([]bool ,len (_fba .GrAtX ));switch _fba .TemplateID {case 0:if _fba .GrAtX [0]!=-1&&_fba .GrAtY [0]!=-1{_fba ._da [0]=true ;
_fba ._abe =true ;};if _fba .GrAtX [1]!=-1&&_fba .GrAtY [1]!=-1{_fba ._da [1]=true ;_fba ._abe =true ;};case 1:_fba ._abe =false ;};return nil ;};func (_cfbf *HalftoneRegion )computeSegmentDataStructure ()error {_cfbf .DataOffset =_cfbf ._efbb .StreamPosition ();
_cfbf .DataHeaderLength =_cfbf .DataOffset -_cfbf .DataHeaderOffset ;_cfbf .DataLength =int64 (_cfbf ._efbb .Length ())-_cfbf .DataHeaderLength ;return nil ;};var _ templater =&template0 {};func (_aegc *TextRegion )initSymbols ()error {const _bdac ="i\u006e\u0069\u0074\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
for _ ,_efda :=range _aegc .Header .RTSegments {if _efda ==nil {return _ff .Error (_bdac ,"\u006e\u0069\u006c\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020pr\u006f\u0076\u0069\u0064\u0065\u0064 \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0074\u0065\u0078\u0074\u0020\u0072\u0065g\u0069\u006f\u006e\u0020\u0053\u0079\u006d\u0062o\u006c\u0073");
};if _efda .Type ==0{_gbad ,_eaeg :=_efda .GetSegmentData ();if _eaeg !=nil {return _ff .Wrap (_eaeg ,_bdac ,"");};_ggff ,_eadf :=_gbad .(*SymbolDictionary );if !_eadf {return _ff .Error (_bdac ,"\u0072e\u0066\u0065r\u0072\u0065\u0064 \u0054\u006f\u0020\u0053\u0065\u0067\u006de\u006e\u0074\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_ggff ._cbgd =_aegc ._caga ;_bccea ,_eaeg :=_ggff .GetDictionary ();if _eaeg !=nil {return _ff .Wrap (_eaeg ,_bdac ,"");};_aegc .Symbols =append (_aegc .Symbols ,_bccea ...);};};_aegc .NumberOfSymbols =uint32 (len (_aegc .Symbols ));return nil ;};func (_eeaa *PatternDictionary )readGrayMax ()error {_dgbb ,_fbcc :=_eeaa ._eddg .ReadBits (32);
if _fbcc !=nil {return _fbcc ;};_eeaa .GrayMax =uint32 (_dgbb &_e .MaxUint32 );return nil ;};func (_effcb *SymbolDictionary )addSymbol (_cfd Regioner )error {_dgbdc ,_bbdg :=_cfd .GetRegionBitmap ();if _bbdg !=nil {return _bbdg ;};_effcb ._bcde [_effcb ._cdgg ]=_dgbdc ;
_effcb ._gfa =append (_effcb ._gfa ,_dgbdc );_gg .Log .Trace ("\u005b\u0053YM\u0042\u004f\u004c \u0044\u0049\u0043\u0054ION\u0041RY\u005d\u0020\u0041\u0064\u0064\u0065\u0064 s\u0079\u006d\u0062\u006f\u006c\u003a\u0020%\u0073",_dgbdc );return nil ;};func (_aea *GenericRegion )setOverrideFlag (_bfgd int ){_aea .GBAtOverride [_bfgd ]=true ;
_aea ._gef =true ;};func (_bgc *template1 )setIndex (_fbfe *_a .DecoderStats ){_fbfe .SetIndex (0x080)};func (_cdade *GenericRegion )String ()string {_debcc :=&_b .Builder {};_debcc .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");
_debcc .WriteString (_cdade .RegionSegment .String ()+"\u000a");_debcc .WriteString (_be .Sprintf ("\u0009\u002d\u0020Us\u0065\u0045\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_cdade .UseExtTemplates ));
_debcc .WriteString (_be .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0044\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_cdade .IsTPGDon ));_debcc .WriteString (_be .Sprintf ("\u0009-\u0020G\u0042\u0054\u0065\u006d\u0070l\u0061\u0074e\u003a\u0020\u0025\u0064\u000a",_cdade .GBTemplate ));
_debcc .WriteString (_be .Sprintf ("\t\u002d \u0049\u0073\u004d\u004d\u0052\u0045\u006e\u0063o\u0064\u0065\u0064\u003a %\u0076\u000a",_cdade .IsMMREncoded ));_debcc .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_cdade .GBAtX ));
_debcc .WriteString (_be .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_cdade .GBAtY ));_debcc .WriteString (_be .Sprintf ("\t\u002d \u0047\u0042\u0041\u0074\u004f\u0076\u0065\u0072r\u0069\u0064\u0065\u003a %\u0076\u000a",_cdade .GBAtOverride ));
return _debcc .String ();};func (_gecd *RegionSegment )String ()string {_adag :=&_b .Builder {};_adag .WriteString ("\u0009[\u0052E\u0047\u0049\u004f\u004e\u0020S\u0045\u0047M\u0045\u004e\u0054\u005d\u000a");_adag .WriteString (_be .Sprintf ("\t\u0009\u002d\u0020\u0042\u0069\u0074m\u0061\u0070\u0020\u0028\u0077\u0069d\u0074\u0068\u002c\u0020\u0068\u0065\u0069g\u0068\u0074\u0029\u0020\u005b\u0025\u0064\u0078\u0025\u0064]\u000a",_gecd .BitmapWidth ,_gecd .BitmapHeight ));
_adag .WriteString (_be .Sprintf ("\u0009\u0009\u002d\u0020L\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0028\u0078,\u0079)\u003a\u0020\u005b\u0025\u0064\u002c\u0025d\u005d\u000a",_gecd .XLocation ,_gecd .YLocation ));_adag .WriteString (_be .Sprintf ("\t\u0009\u002d\u0020\u0043\u006f\u006db\u0069\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0073",_gecd .CombinaionOperator ));
return _adag .String ();};func (_bfcg *TextRegion )decodeSymInRefSize ()(int64 ,error ){const _bbgf ="\u0064e\u0063o\u0064\u0065\u0053\u0079\u006dI\u006e\u0052e\u0066\u0053\u0069\u007a\u0065";if _bfcg .SbHuffRSize ==0{_adea ,_cbgc :=_ga .GetStandardTable (1);
if _cbgc !=nil {return 0,_ff .Wrap (_cbgc ,_bbgf ,"");};return _adea .Decode (_bfcg ._afae );};if _bfcg ._cadc ==nil {var (_dfaad int ;_cddd error ;);if _bfcg .SbHuffFS ==3{_dfaad ++;};if _bfcg .SbHuffDS ==3{_dfaad ++;};if _bfcg .SbHuffDT ==3{_dfaad ++;
};if _bfcg .SbHuffRDWidth ==3{_dfaad ++;};if _bfcg .SbHuffRDHeight ==3{_dfaad ++;};if _bfcg .SbHuffRDX ==3{_dfaad ++;};if _bfcg .SbHuffRDY ==3{_dfaad ++;};_bfcg ._cadc ,_cddd =_bfcg .getUserTable (_dfaad );if _cddd !=nil {return 0,_ff .Wrap (_cddd ,_bbgf ,"");
};};_bbcd ,_gecg :=_bfcg ._cadc .Decode (_bfcg ._afae );if _gecg !=nil {return 0,_ff .Wrap (_gecg ,_bbgf ,"");};return _bbcd ,nil ;};func NewHeader (d Documenter ,r _c .StreamReader ,offset int64 ,organizationType OrganizationType )(*Header ,error ){_edbgg :=&Header {Reader :r };
if _egaea :=_edbgg .parse (d ,r ,offset ,organizationType );_egaea !=nil {return nil ,_ff .Wrap (_egaea ,"\u004ee\u0077\u0048\u0065\u0061\u0064\u0065r","");};return _edbgg ,nil ;};func (_bcad *TextRegion )decodeRI ()(int64 ,error ){if !_bcad .UseRefinement {return 0,nil ;
};if _bcad .IsHuffmanEncoded {_dggf ,_dfda :=_bcad ._afae .ReadBit ();return int64 (_dggf ),_dfda ;};_gbbg ,_cfdc :=_bcad ._fgeb .DecodeInt (_bcad ._cgba );return int64 (_gbbg ),_cfdc ;};func (_bfdb *Header )GetSegmentData ()(Segmenter ,error ){var _ffgca Segmenter ;
if _bfdb .SegmentData !=nil {_ffgca =_bfdb .SegmentData ;};if _ffgca ==nil {_abcd ,_gfc :=_bfgc [_bfdb .Type ];if !_gfc {return nil ,_be .Errorf ("\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u002f\u0020\u0025\u0064\u0020\u0063\u0072e\u0061t\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e\u0020",_bfdb .Type ,_bfdb .Type );
};_ffgca =_abcd ();_gg .Log .Trace ("\u005b\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u0074\u0020\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0030\u0034\u0058",_bfdb .SegmentNumber ,_bfdb .SegmentDataStartOffset );
_afc ,_cbb :=_bfdb .subInputReader ();if _cbb !=nil {return nil ,_cbb ;};if _daa :=_ffgca .Init (_bfdb ,_afc );_daa !=nil {_gg .Log .Debug ("\u0049\u006e\u0069\u0074 \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076 \u0066o\u0072\u0020\u0074\u0079\u0070\u0065\u003a \u0025\u0054",_daa ,_ffgca );
return nil ,_daa ;};_bfdb .SegmentData =_ffgca ;};return _ffgca ,nil ;};func _ecf (_fadg int )int {if _fadg ==0{return 0;};_fadg |=_fadg >>1;_fadg |=_fadg >>2;_fadg |=_fadg >>4;_fadg |=_fadg >>8;_fadg |=_fadg >>16;return (_fadg +1)>>1;};func (_fffe *Header )readSegmentNumber (_ecdd _c .StreamReader )error {const _ddg ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";
_bgee :=make ([]byte ,4);_ ,_bea :=_ecdd .Read (_bgee );if _bea !=nil {return _ff .Wrap (_bea ,_ddg ,"");};_fffe .SegmentNumber =_eg .BigEndian .Uint32 (_bgee );return nil ;};func (_eafbb *SymbolDictionary )getToExportFlags ()([]int ,error ){var (_ecfc int ;
_ecae int32 ;_eece error ;_ggeb =int32 (_eafbb ._aaca +_eafbb .NumberOfNewSymbols );_bcea =make ([]int ,_ggeb ););for _gedf :=int32 (0);_gedf < _ggeb ;_gedf +=_ecae {if _eafbb .IsHuffmanEncoded {_dddc ,_acfb :=_ga .GetStandardTable (1);if _acfb !=nil {return nil ,_acfb ;
};_gdad ,_acfb :=_dddc .Decode (_eafbb ._gfdb );if _acfb !=nil {return nil ,_acfb ;};_ecae =int32 (_gdad );}else {_ecae ,_eece =_eafbb ._dafa .DecodeInt (_eafbb ._dgbc );if _eece !=nil {return nil ,_eece ;};};if _ecae !=0{for _gbbc :=_gedf ;_gbbc < _gedf +_ecae ;
_gbbc ++{_bcea [_gbbc ]=_ecfc ;};};if _ecfc ==0{_ecfc =1;}else {_ecfc =0;};};return _bcea ,nil ;};func (_begc *SymbolDictionary )Encode (w _c .BinaryWriter )(_gfe int ,_bcaeb error ){const _ced ="\u0053\u0079\u006dbo\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
if _begc ==nil {return 0,_ff .Error (_ced ,"\u0073\u0079m\u0062\u006f\u006c\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066in\u0065\u0064");};if _gfe ,_bcaeb =_begc .encodeFlags (w );_bcaeb !=nil {return _gfe ,_ff .Wrap (_bcaeb ,_ced ,"");
};_caea ,_bcaeb :=_begc .encodeATFlags (w );if _bcaeb !=nil {return _gfe ,_ff .Wrap (_bcaeb ,_ced ,"");};_gfe +=_caea ;if _caea ,_bcaeb =_begc .encodeRefinementATFlags (w );_bcaeb !=nil {return _gfe ,_ff .Wrap (_bcaeb ,_ced ,"");};_gfe +=_caea ;if _caea ,_bcaeb =_begc .encodeNumSyms (w );
_bcaeb !=nil {return _gfe ,_ff .Wrap (_bcaeb ,_ced ,"");};_gfe +=_caea ;if _caea ,_bcaeb =_begc .encodeSymbols (w );_bcaeb !=nil {return _gfe ,_ff .Wrap (_bcaeb ,_ced ,"");};_gfe +=_caea ;return _gfe ,nil ;};func (_eacgb *SymbolDictionary )readAtPixels (_gfag int )error {_eacgb .SdATX =make ([]int8 ,_gfag );
_eacgb .SdATY =make ([]int8 ,_gfag );var (_eeece byte ;_bcfb error ;);for _abdcc :=0;_abdcc < _gfag ;_abdcc ++{_eeece ,_bcfb =_eacgb ._gfdb .ReadByte ();if _bcfb !=nil {return _bcfb ;};_eacgb .SdATX [_abdcc ]=int8 (_eeece );_eeece ,_bcfb =_eacgb ._gfdb .ReadByte ();
if _bcfb !=nil {return _bcfb ;};_eacgb .SdATY [_abdcc ]=int8 (_eeece );};return nil ;};func (_dab *Header )referenceSize ()uint {switch {case _dab .SegmentNumber <=255:return 1;case _dab .SegmentNumber <=65535:return 2;default:return 4;};};func (_eafc *TextRegion )createRegionBitmap ()error {_eafc .RegionBitmap =_fad .New (int (_eafc .RegionInfo .BitmapWidth ),int (_eafc .RegionInfo .BitmapHeight ));
if _eafc .DefaultPixel !=0{_eafc .RegionBitmap .SetDefaultPixel ();};return nil ;};func (_efad *PageInformationSegment )readRequiresAuxiliaryBuffer ()error {_dgdf ,_aaac :=_efad ._dbd .ReadBit ();if _aaac !=nil {return _aaac ;};if _dgdf ==1{_efad ._eedge =true ;
};return nil ;};func (_eecg *TextRegion )readUseRefinement ()error {if !_eecg .UseRefinement ||_eecg .SbrTemplate !=0{return nil ;};var (_ebff byte ;_fbgd error ;);_eecg .SbrATX =make ([]int8 ,2);_eecg .SbrATY =make ([]int8 ,2);_ebff ,_fbgd =_eecg ._afae .ReadByte ();
if _fbgd !=nil {return _fbgd ;};_eecg .SbrATX [0]=int8 (_ebff );_ebff ,_fbgd =_eecg ._afae .ReadByte ();if _fbgd !=nil {return _fbgd ;};_eecg .SbrATY [0]=int8 (_ebff );_ebff ,_fbgd =_eecg ._afae .ReadByte ();if _fbgd !=nil {return _fbgd ;};_eecg .SbrATX [1]=int8 (_ebff );
_ebff ,_fbgd =_eecg ._afae .ReadByte ();if _fbgd !=nil {return _fbgd ;};_eecg .SbrATY [1]=int8 (_ebff );return nil ;};type Segmenter interface{Init (_efagd *Header ,_eab _c .StreamReader )error ;};func (_ed *GenericRefinementRegion )GetRegionBitmap ()(*_fad .Bitmap ,error ){var _faf error ;
_gg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _faf !=nil {_gg .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0047\u0065\u0074R\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006dap\u0020\u0066a\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_faf );
}else {_gg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _ed .RegionBitmap !=nil {return _ed .RegionBitmap ,nil ;};_ffe :=0;if _ed .ReferenceBitmap ==nil {_ed .ReferenceBitmap ,_faf =_ed .getGrReference ();if _faf !=nil {return nil ,_faf ;};};if _ed ._ccg ==nil {_ed ._ccg ,_faf =_a .New (_ed ._egf );
if _faf !=nil {return nil ,_faf ;};};if _ed ._agg ==nil {_ed ._agg =_a .NewStats (8192,1);};_ed .RegionBitmap =_fad .New (int (_ed .RegionInfo .BitmapWidth ),int (_ed .RegionInfo .BitmapHeight ));if _ed .TemplateID ==0{if _faf =_ed .updateOverride ();_faf !=nil {return nil ,_faf ;
};};_aa :=(_ed .RegionBitmap .Width +7)&-8;var _af int ;if _ed .IsTPGROn {_af =int (-_ed .ReferenceDY )*_ed .ReferenceBitmap .RowStride ;};_aaf :=_af +1;for _ae :=0;_ae < _ed .RegionBitmap .Height ;_ae ++{if _ed .IsTPGROn {_cd ,_ca :=_ed .decodeSLTP ();
if _ca !=nil {return nil ,_ca ;};_ffe ^=_cd ;};if _ffe ==0{_faf =_ed .decodeOptimized (_ae ,_ed .RegionBitmap .Width ,_ed .RegionBitmap .RowStride ,_ed .ReferenceBitmap .RowStride ,_aa ,_af ,_aaf );if _faf !=nil {return nil ,_faf ;};}else {_faf =_ed .decodeTypicalPredictedLine (_ae ,_ed .RegionBitmap .Width ,_ed .RegionBitmap .RowStride ,_ed .ReferenceBitmap .RowStride ,_aa ,_af );
if _faf !=nil {return nil ,_faf ;};};};return _ed .RegionBitmap ,nil ;};func (_egc *GenericRegion )decodeLine (_gbca ,_eae ,_efeb int )error {const _fbfa ="\u0064\u0065\u0063\u006f\u0064\u0065\u004c\u0069\u006e\u0065";_bfb :=_egc .Bitmap .GetByteIndex (0,_gbca );
_caaea :=_bfb -_egc .Bitmap .RowStride ;switch _egc .GBTemplate {case 0:if !_egc .UseExtTemplates {return _egc .decodeTemplate0a (_gbca ,_eae ,_efeb ,_bfb ,_caaea );};return _egc .decodeTemplate0b (_gbca ,_eae ,_efeb ,_bfb ,_caaea );case 1:return _egc .decodeTemplate1 (_gbca ,_eae ,_efeb ,_bfb ,_caaea );
case 2:return _egc .decodeTemplate2 (_gbca ,_eae ,_efeb ,_bfb ,_caaea );case 3:return _egc .decodeTemplate3 (_gbca ,_eae ,_efeb ,_bfb ,_caaea );};return _ff .Errorf (_fbfa ,"\u0069\u006e\u0076a\u006c\u0069\u0064\u0020G\u0042\u0054\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u003a\u0020\u0025\u0064",_egc .GBTemplate );
};func (_dafd *SymbolDictionary )decodeHeightClassDeltaHeightWithHuffman ()(int64 ,error ){switch _dafd .SdHuffDecodeHeightSelection {case 0:_cbcfa ,_cccdc :=_ga .GetStandardTable (4);if _cccdc !=nil {return 0,_cccdc ;};return _cbcfa .Decode (_dafd ._gfdb );
case 1:_gafc ,_dgcg :=_ga .GetStandardTable (5);if _dgcg !=nil {return 0,_dgcg ;};return _gafc .Decode (_dafd ._gfdb );case 3:if _dafd ._cacab ==nil {_agde ,_egcc :=_ga .GetStandardTable (0);if _egcc !=nil {return 0,_egcc ;};_dafd ._cacab =_agde ;};return _dafd ._cacab .Decode (_dafd ._gfdb );
};return 0,nil ;};func (_ggdab *RegionSegment )parseHeader ()error {const _ffef ="p\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072";_gg .Log .Trace ("\u005b\u0052\u0045\u0047I\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002dH\u0045A\u0044\u0045\u0052\u005d\u0020\u0042\u0065g\u0069\u006e");
defer func (){_gg .Log .Trace ("\u005b\u0052\u0045G\u0049\u004f\u004e\u005d[\u0050\u0041\u0052\u0053\u0045\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");}();_gecc ,_dgda :=_ggdab ._daggc .ReadBits (32);
if _dgda !=nil {return _ff .Wrap (_dgda ,_ffef ,"\u0077\u0069\u0064t\u0068");};_ggdab .BitmapWidth =uint32 (_gecc &_e .MaxUint32 );_gecc ,_dgda =_ggdab ._daggc .ReadBits (32);if _dgda !=nil {return _ff .Wrap (_dgda ,_ffef ,"\u0068\u0065\u0069\u0067\u0068\u0074");
};_ggdab .BitmapHeight =uint32 (_gecc &_e .MaxUint32 );_gecc ,_dgda =_ggdab ._daggc .ReadBits (32);if _dgda !=nil {return _ff .Wrap (_dgda ,_ffef ,"\u0078\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_ggdab .XLocation =uint32 (_gecc &_e .MaxUint32 );
_gecc ,_dgda =_ggdab ._daggc .ReadBits (32);if _dgda !=nil {return _ff .Wrap (_dgda ,_ffef ,"\u0079\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_ggdab .YLocation =uint32 (_gecc &_e .MaxUint32 );if _ ,_dgda =_ggdab ._daggc .ReadBits (5);_dgda !=nil {return _ff .Wrap (_dgda ,_ffef ,"\u0064i\u0072\u0079\u0020\u0072\u0065\u0061d");
};if _dgda =_ggdab .readCombinationOperator ();_dgda !=nil {return _ff .Wrap (_dgda ,_ffef ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};return nil ;};type Type int ;func (_aaab *TextRegion )decodeRdy ()(int64 ,error ){const _fffc ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064y";
if _aaab .IsHuffmanEncoded {if _aaab .SbHuffRDY ==3{if _aaab ._eebbc ==nil {var (_ebfb int ;_ggga error ;);if _aaab .SbHuffFS ==3{_ebfb ++;};if _aaab .SbHuffDS ==3{_ebfb ++;};if _aaab .SbHuffDT ==3{_ebfb ++;};if _aaab .SbHuffRDWidth ==3{_ebfb ++;};if _aaab .SbHuffRDHeight ==3{_ebfb ++;
};if _aaab .SbHuffRDX ==3{_ebfb ++;};_aaab ._eebbc ,_ggga =_aaab .getUserTable (_ebfb );if _ggga !=nil {return 0,_ff .Wrap (_ggga ,_fffc ,"");};};return _aaab ._eebbc .Decode (_aaab ._afae );};_dabd ,_ccca :=_ga .GetStandardTable (14+int (_aaab .SbHuffRDY ));
if _ccca !=nil {return 0,_ccca ;};return _dabd .Decode (_aaab ._afae );};_bece ,_dafe :=_aaab ._fgeb .DecodeInt (_aaab ._fafg );if _dafe !=nil {return 0,_ff .Wrap (_dafe ,_fffc ,"");};return int64 (_bece ),nil ;};func (_caaee *HalftoneRegion )GetRegionInfo ()*RegionSegment {return _caaee .RegionSegment };
func (_beba *PageInformationSegment )Size ()int {return 19};