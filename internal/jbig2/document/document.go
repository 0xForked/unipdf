//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package document ;import (_g "encoding/binary";_a "fmt";_ag "github.com/unidoc/unipdf/v3/common";_ab "github.com/unidoc/unipdf/v3/internal/bitwise";_fg "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_fc "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_e "github.com/unidoc/unipdf/v3/internal/jbig2/document/segments";_be "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/classer";_cf "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "io";_c "math";_cd "runtime/debug";);func (_ad *Document )produceClassifiedPages ()(_adb error ){const _bac ="\u0070\u0072\u006f\u0064uc\u0065\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0050\u0061\u0067e\u0073";
if _ad .Classer ==nil {return nil ;};var (_ec *Page ;_dd bool ;_gca *_e .Header ;);for _gbe :=1;_gbe <=int (_ad .NumberOfPages );_gbe ++{if _ec ,_dd =_ad .Pages [_gbe ];!_dd {return _cf .Errorf (_bac ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_gbe );
};if _ec .EncodingMethod ==GenericEM {continue ;};if _gca ==nil {if _gca ,_adb =_ad .GlobalSegments .GetSymbolDictionary ();_adb !=nil {return _cf .Wrap (_adb ,_bac ,"");};};if _adb =_ad .produceClassifiedPage (_ec ,_gca );_adb !=nil {return _cf .Wrapf (_adb ,_bac ,"\u0070\u0061\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_gbe );
};};return nil ;};func (_eggg *Document )parseFileHeader ()error {const _bge ="\u0070a\u0072s\u0065\u0046\u0069\u006c\u0065\u0048\u0065\u0061\u0064\u0065\u0072";_ ,_dgd :=_eggg .InputStream .Seek (8,_f .SeekStart );if _dgd !=nil {return _cf .Wrap (_dgd ,_bge ,"\u0069\u0064");
};_ ,_dgd =_eggg .InputStream .ReadBits (5);if _dgd !=nil {return _cf .Wrap (_dgd ,_bge ,"\u0072\u0065\u0073\u0065\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074\u0073");};_ccg ,_dgd :=_eggg .InputStream .ReadBit ();if _dgd !=nil {return _cf .Wrap (_dgd ,_bge ,"\u0065x\u0074e\u006e\u0064\u0065\u0064\u0020t\u0065\u006dp\u006c\u0061\u0074\u0065\u0073");
};if _ccg ==1{_eggg .GBUseExtTemplate =true ;};_ccg ,_dgd =_eggg .InputStream .ReadBit ();if _dgd !=nil {return _cf .Wrap (_dgd ,_bge ,"\u0075\u006e\u006b\u006eow\u006e\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _ccg !=1{_eggg .NumberOfPagesUnknown =false ;
};_ccg ,_dgd =_eggg .InputStream .ReadBit ();if _dgd !=nil {return _cf .Wrap (_dgd ,_bge ,"\u006f\u0072\u0067\u0061\u006e\u0069\u007a\u0061\u0074\u0069\u006f\u006e \u0074\u0079\u0070\u0065");};_eggg .OrganizationType =_e .OrganizationType (_ccg );if !_eggg .NumberOfPagesUnknown {_eggg .NumberOfPages ,_dgd =_eggg .InputStream .ReadUint32 ();
if _dgd !=nil {return _cf .Wrap (_dgd ,_bge ,"\u006eu\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0067\u0065\u0073");};_eggg ._aa =13;};return nil ;};func (_badc *Page )createStripedPage (_cce *_e .PageInformationSegment )error {const _bgggd ="\u0063\u0072\u0065\u0061\u0074\u0065\u0053\u0074\u0072\u0069\u0070\u0065d\u0050\u0061\u0067\u0065";
_eeg ,_cgd :=_badc .collectPageStripes ();if _cgd !=nil {return _cf .Wrap (_cgd ,_bgggd ,"");};var _gbbf int ;for _ ,_ffb :=range _eeg {if _cacc ,_dea :=_ffb .(*_e .EndOfStripe );_dea {_gbbf =_cacc .LineNumber ()+1;}else {_ggb :=_ffb .(_e .Regioner );_dda :=_ggb .GetRegionInfo ();
_cgge :=_badc .getCombinationOperator (_cce ,_dda .CombinaionOperator );_cdf ,_gacf :=_ggb .GetRegionBitmap ();if _gacf !=nil {return _cf .Wrap (_gacf ,_bgggd ,"");};_gacf =_fc .Blit (_cdf ,_badc .Bitmap ,int (_dda .XLocation ),_gbbf ,_cgge );if _gacf !=nil {return _cf .Wrap (_gacf ,_bgggd ,"");
};};};return nil ;};type Page struct{Segments []*_e .Header ;PageNumber int ;Bitmap *_fc .Bitmap ;FinalHeight int ;FinalWidth int ;ResolutionX int ;ResolutionY int ;IsLossless bool ;Document *Document ;FirstSegmentNumber int ;EncodingMethod EncodingMethod ;
BlackIsOne bool ;};func (_de *Document )AddGenericPage (bm *_fc .Bitmap ,duplicateLineRemoval bool )(_eag error ){const _gd ="\u0044\u006f\u0063um\u0065\u006e\u0074\u002e\u0041\u0064\u0064\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0050\u0061\u0067\u0065";
if !_de .FullHeaders &&_de .NumberOfPages !=0{return _cf .Error (_gd ,"\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0070\u0061\u0067\u0065\u002e\u0020\u0046\u0069\u006c\u0065\u004d\u006f\u0064\u0065\u0020\u0064\u0069\u0073\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0064\u0064i\u006e\u0067\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u006f\u006e\u0065\u0020\u0070\u0061g\u0065");
};_aga :=&Page {Segments :[]*_e .Header {},Bitmap :bm ,Document :_de ,FinalHeight :bm .Height ,FinalWidth :bm .Width ,IsLossless :true ,BlackIsOne :bm .Color ==_fc .Chocolate };_aga .PageNumber =int (_de .nextPageNumber ());_de .Pages [_aga .PageNumber ]=_aga ;
bm .InverseData ();_aga .AddPageInformationSegment ();if _eag =_aga .AddGenericRegion (bm ,0,0,0,_e .TImmediateGenericRegion ,duplicateLineRemoval );_eag !=nil {return _cf .Wrap (_eag ,_gd ,"");};if _de .FullHeaders {_aga .AddEndOfPageSegment ();};return nil ;
};type Document struct{Pages map[int ]*Page ;NumberOfPagesUnknown bool ;NumberOfPages uint32 ;GBUseExtTemplate bool ;InputStream _ab .StreamReader ;GlobalSegments *Globals ;OrganizationType _e .OrganizationType ;Classer *_be .Classer ;XRes ,YRes int ;FullHeaders bool ;
CurrentSegmentNumber uint32 ;AverageTemplates *_fc .Bitmaps ;BaseIndexes []int ;Refinement bool ;RefineLevel int ;_aa uint8 ;_gb *_ab .BufferedWriter ;EncodeGlobals bool ;_cc int ;_gf map[int ][]int ;_bg map[int ][]int ;_cfb []int ;_ea map[int ]int ;};
func (_cgg *Page )GetBitmap ()(_cec *_fc .Bitmap ,_cdd error ){_ag .Log .Trace (_a .Sprintf ("\u005b\u0050\u0041G\u0045\u005d\u005b\u0023%\u0064\u005d\u0020\u0047\u0065\u0074\u0042i\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e",_cgg .PageNumber ));
defer func (){if _cdd !=nil {_ag .Log .Trace (_a .Sprintf ("\u005b\u0050\u0041\u0047\u0045\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074B\u0069t\u006d\u0061\u0070\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_cgg .PageNumber ,_cdd ));
}else {_ag .Log .Trace (_a .Sprintf ("\u005b\u0050\u0041\u0047\u0045\u005d\u005b\u0023\u0025\u0064]\u0020\u0047\u0065\u0074\u0042\u0069\u0074m\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064",_cgg .PageNumber ));};}();if _cgg .Bitmap !=nil {return _cgg .Bitmap ,nil ;
};_cdd =_cgg .composePageBitmap ();if _cdd !=nil {return nil ,_cdd ;};return _cgg .Bitmap ,nil ;};func (_dfg *Document )completeSymbols ()(_fcb error ){const _bgc ="\u0063o\u006dp\u006c\u0065\u0074\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";if _dfg .Classer ==nil {return nil ;
};if _dfg .Classer .UndilatedTemplates ==nil {return _cf .Error (_bgc ,"\u006e\u006f t\u0065\u006d\u0070l\u0061\u0074\u0065\u0073 de\u0066in\u0065\u0064\u0020\u0066\u006f\u0072\u0020th\u0065\u0020\u0063\u006c\u0061\u0073\u0073e\u0072");};_cgc :=len (_dfg .Pages )==1;
_gdb :=make ([]int ,_dfg .Classer .UndilatedTemplates .Size ());var _ee int ;for _fcbf :=0;_fcbf < _dfg .Classer .ClassIDs .Size ();_fcbf ++{_ee ,_fcb =_dfg .Classer .ClassIDs .Get (_fcbf );if _fcb !=nil {return _cf .Wrap (_fcb ,_bgc ,"\u0063\u006c\u0061\u0073\u0073\u0020\u0049\u0044\u0027\u0073");
};_gdb [_ee ]++;};var _dg []int ;for _eaf :=0;_eaf < _dfg .Classer .UndilatedTemplates .Size ();_eaf ++{if _gdb [_eaf ]==0{return _cf .Error (_bgc ,"\u006eo\u0020\u0073y\u006d\u0062\u006f\u006cs\u0020\u0069\u006es\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u0066\u006fun\u0064\u0020\u0066o\u0072\u0020g\u0069\u0076\u0065\u006e\u0020\u0063l\u0061\u0073s\u003f\u0020");
};if _gdb [_eaf ]> 1||_cgc {_dg =append (_dg ,_eaf );};};_dfg ._cc =len (_dg );var _ecd ,_abe int ;for _bd :=0;_bd < _dfg .Classer .ComponentPageNumbers .Size ();_bd ++{_ecd ,_fcb =_dfg .Classer .ComponentPageNumbers .Get (_bd );if _fcb !=nil {return _cf .Wrapf (_fcb ,_bgc ,"p\u0061\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027 \u006e\u006f\u0074\u0020\u0066\u006f\u0075nd\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0063\u006c\u0061\u0073\u0073\u0065r \u0070\u0061g\u0065\u006e\u0075\u006d\u0062\u0065\u0072\u0073",_bd );
};_abe ,_fcb =_dfg .Classer .ClassIDs .Get (_bd );if _fcb !=nil {return _cf .Wrapf (_fcb ,_bgc ,"\u0063\u0061\u006e\u0027\u0074\u0020\u0067e\u0074\u0020\u0073y\u006d\u0062\u006f\u006c \u0066\u006f\u0072\u0020\u0070\u0061\u0067\u0065\u0020\u0027\u0025\u0064\u0027\u0020\u0066\u0072\u006f\u006d\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072",_ecd );
};if _gdb [_abe ]==1&&!_cgc {_dfg ._gf [_ecd ]=append (_dfg ._gf [_ecd ],_abe );};};if _fcb =_dfg .Classer .ComputeLLCorners ();_fcb !=nil {return _cf .Wrap (_fcb ,_bgc ,"");};return nil ;};func (_gfa *Document )nextSegmentNumber ()uint32 {_abd :=_gfa .CurrentSegmentNumber ;
_gfa .CurrentSegmentNumber ++;return _abd ;};func (_cdcb *Document )isFileHeaderPresent ()(bool ,error ){_cdcb .InputStream .Mark ();for _ ,_ggeg :=range _d {_bgcf ,_fgf :=_cdcb .InputStream .ReadByte ();if _fgf !=nil {return false ,_fgf ;};if _ggeg !=_bgcf {_cdcb .InputStream .Reset ();
return false ,nil ;};};_cdcb .InputStream .Reset ();return true ,nil ;};func (_acf *Document )GetGlobalSegment (i int )(*_e .Header ,error ){_cab ,_eba :=_acf .GlobalSegments .GetSegment (i );if _eba !=nil {return nil ,_cf .Wrap (_eba ,"\u0047\u0065t\u0047\u006c\u006fb\u0061\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074","");
};return _cab ,nil ;};func (_efba *Page )getHeight ()(int ,error ){const _fed ="\u0067e\u0074\u0048\u0065\u0069\u0067\u0068t";if _efba .FinalHeight !=0{return _efba .FinalHeight ,nil ;};_deb :=_efba .getPageInformationSegment ();if _deb ==nil {return 0,_cf .Error (_fed ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");
};_bfaf ,_bace :=_deb .GetSegmentData ();if _bace !=nil {return 0,_cf .Wrap (_bace ,_fed ,"");};_ggcg ,_cfd :=_bfaf .(*_e .PageInformationSegment );if !_cfd {return 0,_cf .Errorf (_fed ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_bfaf );
};if _ggcg .PageBMHeight ==_c .MaxInt32 {_ ,_bace =_efba .GetBitmap ();if _bace !=nil {return 0,_cf .Wrap (_bace ,_fed ,"");};}else {_efba .FinalHeight =_ggcg .PageBMHeight ;};return _efba .FinalHeight ,nil ;};func _ae (_ge int )int {_ff :=0;_ffa :=(_ge &(_ge -1))==0;
_ge >>=1;for ;_ge !=0;_ge >>=1{_ff ++;};if _ffa {return _ff ;};return _ff +1;};func (_gee *Page )AddEndOfPageSegment (){_cac :=&_e .Header {Type :_e .TEndOfPage ,PageAssociation :_gee .PageNumber };_gee .Segments =append (_gee .Segments ,_cac );};func (_gac *Document )mapData ()error {const _eec ="\u006da\u0070\u0044\u0061\u0074\u0061";
var (_cabg []*_e .Header ;_ccc int64 ;_gaa _e .Type ;);_bggg ,_bff :=_gac .isFileHeaderPresent ();if _bff !=nil {return _cf .Wrap (_bff ,_eec ,"");};if _bggg {if _bff =_gac .parseFileHeader ();_bff !=nil {return _cf .Wrap (_bff ,_eec ,"");};_ccc +=int64 (_gac ._aa );
_gac .FullHeaders =true ;};var (_fd *Page ;_ced bool ;);for _gaa !=51&&!_ced {_cade ,_cff :=_e .NewHeader (_gac ,_gac .InputStream ,_ccc ,_gac .OrganizationType );if _cff !=nil {return _cf .Wrap (_cff ,_eec ,"");};_ag .Log .Trace ("\u0044\u0065c\u006f\u0064\u0069\u006eg\u0020\u0073e\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u0075m\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c\u0020\u0054\u0079\u0070e\u003a\u0020\u0025\u0073",_cade .SegmentNumber ,_cade .Type );
_gaa =_cade .Type ;if _gaa !=_e .TEndOfFile {if _cade .PageAssociation !=0{_fd =_gac .Pages [_cade .PageAssociation ];if _fd ==nil {_fd =_gdag (_gac ,_cade .PageAssociation );_gac .Pages [_cade .PageAssociation ]=_fd ;if _gac .NumberOfPagesUnknown {_gac .NumberOfPages ++;
};};_fd .Segments =append (_fd .Segments ,_cade );}else {_gac .GlobalSegments .AddSegment (_cade );};};_cabg =append (_cabg ,_cade );_ccc =_gac .InputStream .StreamPosition ();if _gac .OrganizationType ==_e .OSequential {_ccc +=int64 (_cade .SegmentDataLength );
};_ced ,_cff =_gac .reachedEOF (_ccc );if _cff !=nil {_ag .Log .Debug ("\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0072\u0065\u0061\u0063h\u0065\u0064\u0020\u0045\u004f\u0046\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_cff );
return _cf .Wrap (_cff ,_eec ,"");};};_gac .determineRandomDataOffsets (_cabg ,uint64 (_ccc ));return nil ;};func (_adc *Page )nextSegmentNumber ()uint32 {return _adc .Document .nextSegmentNumber ()};func (_ccd *Globals )GetSegmentByIndex (index int )(*_e .Header ,error ){const _geba ="\u0047l\u006f\u0062\u0061\u006cs\u002e\u0047\u0065\u0074\u0053e\u0067m\u0065n\u0074\u0042\u0079\u0049\u006e\u0064\u0065x";
if _ccd ==nil {return nil ,_cf .Error (_geba ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (_ccd .Segments )==0{return nil ,_cf .Error (_geba ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");
};if index > len (_ccd .Segments )-1{return nil ,_cf .Error (_geba ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};return _ccd .Segments [index ],nil ;};type EncodingMethod int ;func (_dga *Document )Encode ()(_dgb []byte ,_adag error ){const _cag ="\u0044o\u0063u\u006d\u0065\u006e\u0074\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
var _dcg ,_ef int ;if _dga .FullHeaders {if _dcg ,_adag =_dga .encodeFileHeader (_dga ._gb );_adag !=nil {return nil ,_cf .Wrap (_adag ,_cag ,"");};};var (_ace bool ;_adbe *_e .Header ;_beg *Page ;);if _adag =_dga .completeClassifiedPages ();_adag !=nil {return nil ,_cf .Wrap (_adag ,_cag ,"");
};if _adag =_dga .produceClassifiedPages ();_adag !=nil {return nil ,_cf .Wrap (_adag ,_cag ,"");};if _dga .GlobalSegments !=nil {for _ ,_adbe =range _dga .GlobalSegments .Segments {if _adag =_dga .encodeSegment (_adbe ,&_dcg );_adag !=nil {return nil ,_cf .Wrap (_adag ,_cag ,"");
};};};for _efd :=1;_efd <=int (_dga .NumberOfPages );_efd ++{if _beg ,_ace =_dga .Pages [_efd ];!_ace {return nil ,_cf .Errorf (_cag ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_efd );};for _ ,_adbe =range _beg .Segments {if _adag =_dga .encodeSegment (_adbe ,&_dcg );
_adag !=nil {return nil ,_cf .Wrap (_adag ,_cag ,"");};};};if _dga .FullHeaders {if _ef ,_adag =_dga .encodeEOFHeader (_dga ._gb );_adag !=nil {return nil ,_cf .Wrap (_adag ,_cag ,"");};_dcg +=_ef ;};_dgb =_dga ._gb .Data ();if len (_dgb )!=_dcg {_ag .Log .Debug ("\u0042\u0079\u0074\u0065\u0073 \u0077\u0072\u0069\u0074\u0074\u0065\u006e \u0028\u006e\u0029\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006f\u0066\u0020t\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0065\u006e\u0063\u006fd\u0065\u0064\u003a\u0020\u0027\u0025d\u0027",_dcg ,len (_dgb ));
};return _dgb ,nil ;};func (_bfaa *Document )encodeSegment (_gcb *_e .Header ,_bea *int )error {const _efe ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074";_gcb .SegmentNumber =_bfaa .nextSegmentNumber ();_dbg ,_ffc :=_gcb .Encode (_bfaa ._gb );
if _ffc !=nil {return _cf .Wrapf (_ffc ,_efe ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_gcb .SegmentNumber );};*_bea +=_dbg ;return nil ;};func (_efb *Page )createPage (_dcag *_e .PageInformationSegment )error {var _bdc error ;
if !_dcag .IsStripe ||_dcag .PageBMHeight !=-1{_bdc =_efb .createNormalPage (_dcag );}else {_bdc =_efb .createStripedPage (_dcag );};return _bdc ;};func (_ccdd *Page )GetResolutionX ()(int ,error ){return _ccdd .getResolutionX ()};func (_fcc *Page )String ()string {return _a .Sprintf ("\u0050\u0061\u0067\u0065\u0020\u0023\u0025\u0064",_fcc .PageNumber );
};func (_bbg *Document )encodeEOFHeader (_bga _ab .BinaryWriter )(_bfe int ,_eeb error ){_egg :=&_e .Header {SegmentNumber :_bbg .nextSegmentNumber (),Type :_e .TEndOfFile };if _bfe ,_eeb =_egg .Encode (_bga );_eeb !=nil {return 0,_cf .Wrap (_eeb ,"\u0065n\u0063o\u0064\u0065\u0045\u004f\u0046\u0048\u0065\u0061\u0064\u0065\u0072","");
};return _bfe ,nil ;};func (_ede *Page )addTextRegionSegment (_feac []*_e .Header ,_eaca ,_gcfd map[int ]int ,_aced []int ,_aeg *_fc .Points ,_dce *_fc .Bitmaps ,_baf *_fg .IntSlice ,_faa *_fc .Boxes ,_bbf ,_ggc int ){_dbc :=&_e .TextRegion {NumberOfSymbols :uint32 (_ggc )};
_dbc .InitEncode (_eaca ,_gcfd ,_aced ,_aeg ,_dce ,_baf ,_faa ,_ede .FinalWidth ,_ede .FinalHeight ,_bbf );_fbg :=&_e .Header {RTSegments :_feac ,SegmentData :_dbc ,PageAssociation :_ede .PageNumber ,Type :_e .TImmediateTextRegion };_ceb :=_e .TPageInformation ;
if _gcfd !=nil {_ceb =_e .TSymbolDictionary ;};var _bba int ;for ;_bba < len (_ede .Segments );_bba ++{if _ede .Segments [_bba ].Type ==_ceb {_bba ++;break ;};};_ede .Segments =append (_ede .Segments ,nil );copy (_ede .Segments [_bba +1:],_ede .Segments [_bba :]);
_ede .Segments [_bba ]=_fbg ;};func _gdag (_ddf *Document ,_dec int )*Page {return &Page {Document :_ddf ,PageNumber :_dec ,Segments :[]*_e .Header {}};};func (_aed *Page )getPageInformationSegment ()*_e .Header {for _ ,_dbgbc :=range _aed .Segments {if _dbgbc .Type ==_e .TPageInformation {return _dbgbc ;
};};_ag .Log .Debug ("\u0050\u0061\u0067\u0065\u0020\u0069\u006e\u0066o\u0072\u006d\u0061ti\u006f\u006e\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0066o\u0072\u0020\u0070\u0061\u0067\u0065\u003a\u0020%\u0073\u002e",_aed );
return nil ;};func (_afb *Page )GetResolutionY ()(int ,error ){return _afb .getResolutionY ()};func (_gge *Document )encodeFileHeader (_gcc _ab .BinaryWriter )(_afg int ,_dff error ){const _gcf ="\u0065\u006ec\u006f\u0064\u0065F\u0069\u006c\u0065\u0048\u0065\u0061\u0064\u0065\u0072";
_afg ,_dff =_gcc .Write (_d );if _dff !=nil {return _afg ,_cf .Wrap (_dff ,_gcf ,"\u0069\u0064");};if _dff =_gcc .WriteByte (0x01);_dff !=nil {return _afg ,_cf .Wrap (_dff ,_gcf ,"\u0066\u006c\u0061g\u0073");};_afg ++;_ded :=make ([]byte ,4);_g .BigEndian .PutUint32 (_ded ,_gge .NumberOfPages );
_add ,_dff :=_gcc .Write (_ded );if _dff !=nil {return _add ,_cf .Wrap (_dff ,_gcf ,"p\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_afg +=_add ;return _afg ,nil ;};func (_gaca *Page )clearSegmentData (){for _cfbc :=range _gaca .Segments {_gaca .Segments [_cfbc ].CleanSegmentData ();
};};func (_bggga *Globals )GetSegment (segmentNumber int )(*_e .Header ,error ){const _fba ="\u0047l\u006fb\u0061\u006c\u0073\u002e\u0047e\u0074\u0053e\u0067\u006d\u0065\u006e\u0074";if _bggga ==nil {return nil ,_cf .Error (_fba ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (_bggga .Segments )==0{return nil ,_cf .Error (_fba ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");};var _fab *_e .Header ;for _ ,_fab =range _bggga .Segments {if _fab .SegmentNumber ==uint32 (segmentNumber ){break ;
};};if _fab ==nil {return nil ,_cf .Error (_fba ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");};return _fab ,nil ;};func (_gbgd *Page )getCombinationOperator (_ddac *_e .PageInformationSegment ,_bbdg _fc .CombinationOperator )_fc .CombinationOperator {if _ddac .CombinationOperatorOverrideAllowed (){return _bbdg ;
};return _ddac .CombinationOperator ();};func (_egc *Globals )AddSegment (segment *_e .Header ){_egc .Segments =append (_egc .Segments ,segment )};func InitEncodeDocument (fullHeaders bool )*Document {return &Document {FullHeaders :fullHeaders ,_gb :_ab .BufferedMSB (),Pages :map[int ]*Page {},_gf :map[int ][]int {},_ea :map[int ]int {},_bg :map[int ][]int {}};
};type Globals struct{Segments []*_e .Header ;};func (_dac *Page )getResolutionY ()(int ,error ){const _cecb ="\u0067\u0065\u0074\u0052\u0065\u0073\u006f\u006c\u0075t\u0069\u006f\u006e\u0059";if _dac .ResolutionY !=0{return _dac .ResolutionY ,nil ;};_edab :=_dac .getPageInformationSegment ();
if _edab ==nil {return 0,_cf .Error (_cecb ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");};_dcb ,_eagb :=_edab .GetSegmentData ();if _eagb !=nil {return 0,_cf .Wrap (_eagb ,_cecb ,"");};_dbd ,_eebc :=_dcb .(*_e .PageInformationSegment );
if !_eebc {return 0,_cf .Errorf (_cecb ,"\u0070\u0061\u0067\u0065\u0020\u0069\u006e\u0066o\u0072\u006d\u0061ti\u006f\u006e\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0074\u0079\u0070\u0065\u003a\u0027%\u0054\u0027",_dcb );
};_dac .ResolutionY =_dbd .ResolutionY ;return _dac .ResolutionY ,nil ;};func (_dfd *Document )addSymbolDictionary (_dab int ,_fgda *_fc .Bitmaps ,_gde []int ,_gda map[int ]int ,_feb bool )(*_e .Header ,error ){const _gbg ="\u0061\u0064\u0064\u0053ym\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079";
_dabf :=&_e .SymbolDictionary {};if _gef :=_dabf .InitEncode (_fgda ,_gde ,_gda ,_feb );_gef !=nil {return nil ,_gef ;};_aag :=&_e .Header {Type :_e .TSymbolDictionary ,PageAssociation :_dab ,SegmentData :_dabf };if _dab ==0{if _dfd .GlobalSegments ==nil {_dfd .GlobalSegments =&Globals {};
};_dfd .GlobalSegments .AddSegment (_aag );return _aag ,nil ;};_eg ,_ac :=_dfd .Pages [_dab ];if !_ac {return nil ,_cf .Errorf (_gbg ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_dab );};var (_cdc int ;
_ce *_e .Header ;);for _cdc ,_ce =range _eg .Segments {if _ce .Type ==_e .TPageInformation {break ;};};_cdc ++;_eg .Segments =append (_eg .Segments ,nil );copy (_eg .Segments [_cdc +1:],_eg .Segments [_cdc :]);_eg .Segments [_cdc ]=_aag ;return _aag ,nil ;
};func DecodeDocument (input _ab .StreamReader ,globals *Globals )(*Document ,error ){return _eac (input ,globals );};func (_acae *Page )fitsPage (_ccda *_e .PageInformationSegment ,_ebg *_fc .Bitmap )bool {return _acae .countRegions ()==1&&_ccda .DefaultPixelValue ==0&&_ccda .PageBMWidth ==_ebg .Width &&_ccda .PageBMHeight ==_ebg .Height ;
};var _d =[]byte {0x97,0x4A,0x42,0x32,0x0D,0x0A,0x1A,0x0A};func (_fe *Document )AddClassifiedPage (bm *_fc .Bitmap ,method _be .Method )(_eb error ){const _ga ="\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0041\u0064d\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064P\u0061\u0067\u0065";
if !_fe .FullHeaders &&_fe .NumberOfPages !=0{return _cf .Error (_ga ,"\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0070\u0061\u0067\u0065\u002e\u0020\u0046\u0069\u006c\u0065\u004d\u006f\u0064\u0065\u0020\u0064\u0069\u0073\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0064\u0064i\u006e\u0067\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u006f\u006e\u0065\u0020\u0070\u0061g\u0065");
};if _fe .Classer ==nil {if _fe .Classer ,_eb =_be .Init (_be .DefaultSettings ());_eb !=nil {return _cf .Wrap (_eb ,_ga ,"");};};_dc :=int (_fe .nextPageNumber ());_db :=&Page {Segments :[]*_e .Header {},Bitmap :bm ,Document :_fe ,FinalHeight :bm .Height ,FinalWidth :bm .Width ,PageNumber :_dc };
_fe .Pages [_dc ]=_db ;switch method {case _be .RankHaus :_db .EncodingMethod =RankHausEM ;case _be .Correlation :_db .EncodingMethod =CorrelationEM ;};_db .AddPageInformationSegment ();if _eb =_fe .Classer .AddPage (bm ,_dc ,method );_eb !=nil {return _cf .Wrap (_eb ,_ga ,"");
};if _fe .FullHeaders {_db .AddEndOfPageSegment ();};return nil ;};func (_dge *Document )GetNumberOfPages ()(uint32 ,error ){if _dge .NumberOfPagesUnknown ||_dge .NumberOfPages ==0{if len (_dge .Pages )==0{if _acc :=_dge .mapData ();_acc !=nil {return 0,_cf .Wrap (_acc ,"\u0044o\u0063\u0075\u006d\u0065n\u0074\u002e\u0047\u0065\u0074N\u0075m\u0062e\u0072\u004f\u0066\u0050\u0061\u0067\u0065s","");
};};return uint32 (len (_dge .Pages )),nil ;};return _dge .NumberOfPages ,nil ;};const (GenericEM EncodingMethod =iota ;CorrelationEM ;RankHausEM ;);func (_ffg *Page )GetWidth ()(int ,error ){return _ffg .getWidth ()};func (_ggda *Document )determineRandomDataOffsets (_geb []*_e .Header ,_ffd uint64 ){if _ggda .OrganizationType !=_e .ORandom {return ;
};for _ ,_af :=range _geb {_af .SegmentDataStartOffset =_ffd ;_ffd +=_af .SegmentDataLength ;};};func (_gdd *Document )produceClassifiedPage (_gff *Page ,_ada *_e .Header )(_adg error ){const _bc ="p\u0072\u006f\u0064\u0075ce\u0043l\u0061\u0073\u0073\u0069\u0066i\u0065\u0064\u0050\u0061\u0067\u0065";
var _ed map[int ]int ;_gfb :=_gdd ._cc ;_ca :=[]*_e .Header {_ada };if len (_gdd ._gf [_gff .PageNumber ])> 0{_ed =map[int ]int {};_fea ,_cad :=_gdd .addSymbolDictionary (_gff .PageNumber ,_gdd .Classer .UndilatedTemplates ,_gdd ._gf [_gff .PageNumber ],_ed ,false );
if _cad !=nil {return _cf .Wrap (_cad ,_bc ,"");};_ca =append (_ca ,_fea );_gfb +=len (_gdd ._gf [_gff .PageNumber ]);};_bgg :=_gdd ._bg [_gff .PageNumber ];_ag .Log .Debug ("P\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020c\u006f\u006d\u0070\u0073: \u0025\u0076",_gff .PageNumber ,_bgg );
_gff .addTextRegionSegment (_ca ,_gdd ._ea ,_ed ,_gdd ._bg [_gff .PageNumber ],_gdd .Classer .PtaLL ,_gdd .Classer .UndilatedTemplates ,_gdd .Classer .ClassIDs ,nil ,_ae (_gfb ),len (_gdd ._bg [_gff .PageNumber ]));return nil ;};func (_ffgc *Page )composePageBitmap ()error {const _ecdg ="\u0063\u006f\u006d\u0070\u006f\u0073\u0065\u0050\u0061\u0067\u0065\u0042i\u0074\u006d\u0061\u0070";
if _ffgc .PageNumber ==0{return nil ;};_cfbf :=_ffgc .getPageInformationSegment ();if _cfbf ==nil {return _cf .Error (_ecdg ,"\u0070\u0061\u0067e \u0069\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069o\u006e \u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_dcgb ,_ddd :=_cfbf .GetSegmentData ();if _ddd !=nil {return _ddd ;};_dgg ,_bdff :=_dcgb .(*_e .PageInformationSegment );if !_bdff {return _cf .Error (_ecdg ,"\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006da\u0074\u0069\u006f\u006e \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070\u0065");
};if _ddd =_ffgc .createPage (_dgg );_ddd !=nil {return _cf .Wrap (_ddd ,_ecdg ,"");};_ffgc .clearSegmentData ();return nil ;};func (_aeb *Page )countRegions ()int {var _aba int ;for _ ,_agb :=range _aeb .Segments {switch _agb .Type {case 6,7,22,23,38,39,42,43:_aba ++;
};};return _aba ;};func (_cage *Page )collectPageStripes ()(_dba []_e .Segmenter ,_gcac error ){const _gba ="\u0063o\u006cl\u0065\u0063\u0074\u0050\u0061g\u0065\u0053t\u0072\u0069\u0070\u0065\u0073";var _gdcd _e .Segmenter ;for _ ,_gefa :=range _cage .Segments {switch _gefa .Type {case 6,7,22,23,38,39,42,43:_gdcd ,_gcac =_gefa .GetSegmentData ();
if _gcac !=nil {return nil ,_cf .Wrap (_gcac ,_gba ,"");};_dba =append (_dba ,_gdcd );case 50:_gdcd ,_gcac =_gefa .GetSegmentData ();if _gcac !=nil {return nil ,_gcac ;};_fdc ,_dgab :=_gdcd .(*_e .EndOfStripe );if !_dgab {return nil ,_cf .Errorf (_gba ,"\u0045\u006e\u0064\u004f\u0066\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u006f\u0066\u0020\u0076\u0061l\u0069\u0064\u0020\u0074\u0079p\u0065\u003a \u0027\u0025\u0054\u0027",_gdcd );
};_dba =append (_dba ,_fdc );_cage .FinalHeight =_fdc .LineNumber ();};};return _dba ,nil ;};func (_bb *Document )GetPage (pageNumber int )(_e .Pager ,error ){const _bda ="\u0044\u006fc\u0075\u006d\u0065n\u0074\u002e\u0047\u0065\u0074\u0050\u0061\u0067\u0065";
if pageNumber < 0{_ag .Log .Debug ("\u004a\u0042\u0049\u00472\u0020\u0050\u0061\u0067\u0065\u0020\u002d\u0020\u0047e\u0074\u0050\u0061\u0067\u0065\u003a\u0020\u0025\u0064\u002e\u0020\u0050\u0061\u0067\u0065\u0020\u0063\u0061n\u006e\u006f\u0074\u0020\u0062e\u0020\u006c\u006f\u0077\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0020\u0025\u0073",pageNumber ,_cd .Stack ());
return nil ,_cf .Errorf (_bda ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032\u0020d\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u002d\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064 \u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064",pageNumber );
};if pageNumber > len (_bb .Pages ){_ag .Log .Debug ("\u0050\u0061\u0067\u0065 n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0064\u002e\u0020%\u0073",pageNumber ,_cd .Stack ());return nil ,_cf .Error (_bda ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u002d\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");
};_bbd ,_fcg :=_bb .Pages [pageNumber ];if !_fcg {_ag .Log .Debug ("\u0050\u0061\u0067\u0065 n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0064\u002e\u0020%\u0073",pageNumber ,_cd .Stack ());return nil ,_cf .Errorf (_bda ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u002d\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");
};return _bbd ,nil ;};func (_dbgd *Page )GetSegment (number int )(*_e .Header ,error ){const _geeb ="\u0050a\u0067e\u002e\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074";for _ ,_eda :=range _dbgd .Segments {if _eda .SegmentNumber ==uint32 (number ){return _eda ,nil ;
};};_bfd :=make ([]uint32 ,len (_dbgd .Segments ));for _aef ,_cdda :=range _dbgd .Segments {_bfd [_aef ]=_cdda .SegmentNumber ;};return nil ,_cf .Errorf (_geeb ,"\u0073e\u0067\u006d\u0065n\u0074\u0020\u0077i\u0074h \u006e\u0075\u006d\u0062\u0065\u0072\u003a \u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0070\u0061\u0067\u0065\u003a\u0020'%\u0064'\u002e\u0020\u004b\u006e\u006f\u0077n\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0073\u003a \u0025\u0076",number ,_dbgd .PageNumber ,_bfd );
};func (_gebaf *Page )createNormalPage (_acag *_e .PageInformationSegment )error {const _ddfd ="\u0063\u0072e\u0061\u0074\u0065N\u006f\u0072\u006d\u0061\u006c\u0050\u0061\u0067\u0065";_gebaf .Bitmap =_fc .New (_acag .PageBMWidth ,_acag .PageBMHeight );
if _acag .DefaultPixelValue !=0{_gebaf .Bitmap .SetDefaultPixel ();};for _ ,_fgc :=range _gebaf .Segments {switch _fgc .Type {case 6,7,22,23,38,39,42,43:_ag .Log .Trace ("\u0047\u0065\u0074\u0074in\u0067\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0064",_fgc .SegmentNumber );
_ebc ,_ffge :=_fgc .GetSegmentData ();if _ffge !=nil {return _ffge ;};_babc ,_bacd :=_ebc .(_e .Regioner );if !_bacd {_ag .Log .Debug ("\u0053\u0065g\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069on\u0065\u0072",_ebc );
return _cf .Errorf (_ddfd ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062i\u0067\u0032\u0020\u0073\u0065\u0067\u006den\u0074\u0020\u0074\u0079p\u0065\u0020\u002d\u0020\u006e\u006f\u0074\u0020\u0061 R\u0065\u0067i\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_ebc );
};_bee ,_ffge :=_babc .GetRegionBitmap ();if _ffge !=nil {return _cf .Wrap (_ffge ,_ddfd ,"");};if _gebaf .fitsPage (_acag ,_bee ){_gebaf .Bitmap =_bee ;}else {_dfe :=_babc .GetRegionInfo ();_dced :=_gebaf .getCombinationOperator (_acag ,_dfe .CombinaionOperator );
_ffge =_fc .Blit (_bee ,_gebaf .Bitmap ,int (_dfe .XLocation ),int (_dfe .YLocation ),_dced );if _ffge !=nil {return _cf .Wrap (_ffge ,_ddfd ,"");};};};};return nil ;};func (_gdc *Document )reachedEOF (_fb int64 )(bool ,error ){const _bgcc ="\u0072\u0065\u0061\u0063\u0068\u0065\u0064\u0045\u004f\u0046";
_ ,_cgbe :=_gdc .InputStream .Seek (_fb ,_f .SeekStart );if _cgbe !=nil {_ag .Log .Debug ("\u0072\u0065\u0061c\u0068\u0065\u0064\u0045\u004f\u0046\u0020\u002d\u0020\u0064\u002e\u0049\u006e\u0070\u0075\u0074\u0053\u0074\u0072\u0065\u0061\u006d\u002e\u0053\u0065\u0065\u006b\u0020\u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cgbe );
return false ,_cf .Wrap (_cgbe ,_bgcc ,"\u0069n\u0070\u0075\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020s\u0065\u0065\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};_ ,_cgbe =_gdc .InputStream .ReadBits (32);if _cgbe ==_f .EOF {return true ,nil ;
}else if _cgbe !=nil {return false ,_cf .Wrap (_cgbe ,_bgcc ,"");};return false ,nil ;};func (_gbeg *Page )GetHeight ()(int ,error ){return _gbeg .getHeight ()};func (_da *Document )completeClassifiedPages ()(_df error ){const _aad ="\u0063\u006f\u006dpl\u0065\u0074\u0065\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0050\u0061\u0067\u0065\u0073";
if _da .Classer ==nil {return nil ;};_da ._cfb =make ([]int ,_da .Classer .UndilatedTemplates .Size ());for _dcf :=0;_dcf < _da .Classer .ClassIDs .Size ();_dcf ++{_fgd ,_ba :=_da .Classer .ClassIDs .Get (_dcf );if _ba !=nil {return _cf .Wrapf (_ba ,_aad ,"\u0063\u006c\u0061\u0073s \u0077\u0069\u0074\u0068\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027",_dcf );
};_da ._cfb [_fgd ]++;};var _bab []int ;for _gc :=0;_gc < _da .Classer .UndilatedTemplates .Size ();_gc ++{if _da .NumberOfPages ==1||_da ._cfb [_gc ]> 1{_bab =append (_bab ,_gc );};};var (_cb *Page ;_bgb bool ;);for _bad ,_gg :=range *_da .Classer .ComponentPageNumbers {if _cb ,_bgb =_da .Pages [_gg ];
!_bgb {return _cf .Errorf (_aad ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_bad );};if _cb .EncodingMethod ==GenericEM {_ag .Log .Error ("\u0047\u0065\u006e\u0065\u0072\u0069c\u0020\u0070\u0061g\u0065\u0020\u0077i\u0074\u0068\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u003a \u0027\u0025\u0064\u0027\u0020ma\u0070\u0070\u0065\u0064\u0020\u0061\u0073\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0020\u0070\u0061\u0067\u0065",_bad );
continue ;};_da ._bg [_gg ]=append (_da ._bg [_gg ],_bad );_bf ,_gad :=_da .Classer .ClassIDs .Get (_bad );if _gad !=nil {return _cf .Wrapf (_gad ,_aad ,"\u006e\u006f\u0020\u0073uc\u0068\u0020\u0063\u006c\u0061\u0073\u0073\u0049\u0044\u003a\u0020\u0025\u0064",_bad );
};if _da ._cfb [_bf ]==1&&_da .NumberOfPages !=1{_cg :=append (_da ._gf [_gg ],_bf );_da ._gf [_gg ]=_cg ;};};if _df =_da .Classer .ComputeLLCorners ();_df !=nil {return _cf .Wrap (_df ,_aad ,"");};if _ ,_df =_da .addSymbolDictionary (0,_da .Classer .UndilatedTemplates ,_bab ,_da ._ea ,false );
_df !=nil {return _cf .Wrap (_df ,_aad ,"");};return nil ;};func (_abc *Page )getWidth ()(int ,error ){const _bacdg ="\u0067\u0065\u0074\u0057\u0069\u0064\u0074\u0068";if _abc .FinalWidth !=0{return _abc .FinalWidth ,nil ;};_gdf :=_abc .getPageInformationSegment ();
if _gdf ==nil {return 0,_cf .Error (_bacdg ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");};_fgcf ,_aagf :=_gdf .GetSegmentData ();if _aagf !=nil {return 0,_cf .Wrap (_aagf ,_bacdg ,"");};_cddg ,_bdd :=_fgcf .(*_e .PageInformationSegment );
if !_bdd {return 0,_cf .Errorf (_bacdg ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_fgcf );
};_abc .FinalWidth =_cddg .PageBMWidth ;return _abc .FinalWidth ,nil ;};func (_aca *Globals )GetSymbolDictionary ()(*_e .Header ,error ){const _dbgg ="G\u006c\u006f\u0062\u0061\u006c\u0073.\u0047\u0065\u0074\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079";
if _aca ==nil {return nil ,_cf .Error (_dbgg ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (_aca .Segments )==0{return nil ,_cf .Error (_dbgg ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");
};for _ ,_ccce :=range _aca .Segments {if _ccce .Type ==_e .TSymbolDictionary {return _ccce ,nil ;};};return nil ,_cf .Error (_dbgg ,"\u0067\u006c\u006fba\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020d\u0069c\u0074i\u006fn\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};func (_edc *Page )Encode (w _ab .BinaryWriter )(_cabc int ,_dbb error ){const _dca ="P\u0061\u0067\u0065\u002e\u0045\u006e\u0063\u006f\u0064\u0065";var _eebe int ;for _ ,_gdba :=range _edc .Segments {if _eebe ,_dbb =_gdba .Encode (w );_dbb !=nil {return _cabc ,_cf .Wrap (_dbb ,_dca ,"");
};_cabc +=_eebe ;};return _cabc ,nil ;};func (_bdf *Page )AddPageInformationSegment (){_cde :=&_e .PageInformationSegment {PageBMWidth :_bdf .FinalWidth ,PageBMHeight :_bdf .FinalHeight ,ResolutionX :_bdf .ResolutionX ,ResolutionY :_bdf .ResolutionY ,IsLossless :_bdf .IsLossless };
if _bdf .BlackIsOne {_cde .DefaultPixelValue =uint8 (0x1);};_eaa :=&_e .Header {PageAssociation :_bdf .PageNumber ,SegmentDataLength :uint64 (_cde .Size ()),SegmentData :_cde ,Type :_e .TPageInformation };_bdf .Segments =append (_bdf .Segments ,_eaa );
};func (_bggf *Page )getResolutionX ()(int ,error ){const _gffg ="\u0067\u0065\u0074\u0052\u0065\u0073\u006f\u006c\u0075t\u0069\u006f\u006e\u0058";if _bggf .ResolutionX !=0{return _bggf .ResolutionX ,nil ;};_bbe :=_bggf .getPageInformationSegment ();if _bbe ==nil {return 0,_cf .Error (_gffg ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");
};_baa ,_fcdf :=_bbe .GetSegmentData ();if _fcdf !=nil {return 0,_cf .Wrap (_fcdf ,_gffg ,"");};_gbaf ,_eed :=_baa .(*_e .PageInformationSegment );if !_eed {return 0,_cf .Errorf (_gffg ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_baa );
};_bggf .ResolutionX =_gbaf .ResolutionX ;return _bggf .ResolutionX ,nil ;};func (_gbaa *Page )lastSegmentNumber ()(_edb uint32 ,_dgbf error ){const _gaf ="\u006c\u0061\u0073\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";
if len (_gbaa .Segments )==0{return _edb ,_cf .Errorf (_gaf ,"\u006e\u006f\u0020se\u0067\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006fu\u006ed\u0020i\u006e \u0074\u0068\u0065\u0020\u0070\u0061\u0067\u0065\u0020\u0027\u0025\u0064\u0027",_gbaa .PageNumber );
};return _gbaa .Segments [len (_gbaa .Segments )-1].SegmentNumber ,nil ;};func _eac (_bdb _ab .StreamReader ,_gcad *Globals )(*Document ,error ){_gfgb :=&Document {Pages :make (map[int ]*Page ),InputStream :_bdb ,OrganizationType :_e .OSequential ,NumberOfPagesUnknown :true ,GlobalSegments :_gcad ,_aa :9};
if _gfgb .GlobalSegments ==nil {_gfgb .GlobalSegments =&Globals {};};if _fcd :=_gfgb .mapData ();_fcd !=nil {return nil ,_fcd ;};return _gfgb ,nil ;};func (_gbd *Document )nextPageNumber ()uint32 {_gbd .NumberOfPages ++;return _gbd .NumberOfPages };func (_adgc *Page )AddGenericRegion (bm *_fc .Bitmap ,xloc ,yloc ,template int ,tp _e .Type ,duplicateLineRemoval bool )error {const _dee ="P\u0061\u0067\u0065\u002eAd\u0064G\u0065\u006e\u0065\u0072\u0069c\u0052\u0065\u0067\u0069\u006f\u006e";
_ffde :=&_e .GenericRegion {};if _ceg :=_ffde .InitEncode (bm ,xloc ,yloc ,template ,duplicateLineRemoval );_ceg !=nil {return _cf .Wrap (_ceg ,_dee ,"");};_gcaf :=&_e .Header {Type :_e .TImmediateGenericRegion ,PageAssociation :_adgc .PageNumber ,SegmentData :_ffde };
_adgc .Segments =append (_adgc .Segments ,_gcaf );return nil ;};