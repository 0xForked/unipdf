//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (_gb "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_d "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_cf "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";_b "math";
);const (RankHaus Method =iota ;Correlation ;);const (MaxConnCompWidth =350;MaxCharCompWidth =350;MaxWordCompWidth =1000;MaxCompHeight =120;);func (_dcaed *Settings )SetDefault (){if _dcaed .MaxCompWidth ==0{switch _dcaed .Components {case _d .ComponentConn :_dcaed .MaxCompWidth =MaxConnCompWidth ;
case _d .ComponentCharacters :_dcaed .MaxCompWidth =MaxCharCompWidth ;case _d .ComponentWords :_dcaed .MaxCompWidth =MaxWordCompWidth ;};};if _dcaed .MaxCompHeight ==0{_dcaed .MaxCompHeight =MaxCompHeight ;};if _dcaed .Thresh ==0.0{_dcaed .Thresh =0.9;
};if _dcaed .WeightFactor ==0.0{_dcaed .WeightFactor =0.75;};if _dcaed .RankHaus ==0.0{_dcaed .RankHaus =0.97;};if _dcaed .SizeHaus ==0{_dcaed .SizeHaus =2;};};type Settings struct{MaxCompWidth int ;MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;
WeightFactor float64 ;KeepClassInstances bool ;Components _d .Component ;Method Method ;};func (_abc *Classer )classifyRankHouseNonOne (_fada *_d .Boxes ,_fga ,_aega ,_ffg *_d .Bitmaps ,_gga *_d .Points ,_cdce *_a .NumSlice ,_gef int )(_bbc error ){const _dcgd ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_fcd ,_adeb ,_fggf ,_cfde float32 ;_gbe ,_cbe ,_gda int ;_bgf ,_dea ,_def ,_cbb ,_afgg *_d .Bitmap ;_afgb ,_eca bool ;);_aede :=_d .MakePixelSumTab8 ();for _ggf :=0;_ggf < len (_fga .Values );_ggf ++{if _dea ,_bbc =_aega .GetBitmap (_ggf );_bbc !=nil {return _cf .Wrap (_bbc ,_dcgd ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};if _gbe ,_bbc =_cdce .GetInt (_ggf );_bbc !=nil {_gb .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_ggf ,_bbc );
};if _def ,_bbc =_ffg .GetBitmap (_ggf );_bbc !=nil {return _cf .Wrap (_bbc ,_dcgd ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _fcd ,_adeb ,_bbc =_gga .GetGeometry (_ggf );_bbc !=nil {return _cf .Wrapf (_bbc ,_dcgd ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_cbc :=len (_abc .UndilatedTemplates .Values );_afgb =false ;_egbe :=_egbc (_abc ,_dea );for _gda =_egbe .Next ();_gda > -1;{if _cbb ,_bbc =_abc .UndilatedTemplates .GetBitmap (_gda );_bbc !=nil {return _cf .Wrap (_bbc ,_dcgd ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _cbe ,_bbc =_abc .FgTemplates .GetInt (_gda );_bbc !=nil {_gb .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_gda ,_bbc );
};if _afgg ,_bbc =_abc .DilatedTemplates .GetBitmap (_gda );_bbc !=nil {return _cf .Wrap (_bbc ,_dcgd ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _fggf ,_cfde ,_bbc =_abc .CentroidPointsTemplates .GetGeometry (_gda );
_bbc !=nil {return _cf .Wrap (_bbc ,_dcgd ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_eca ,_bbc =_d .RankHausTest (_dea ,_def ,_cbb ,_afgg ,_fcd -_fggf ,_adeb -_cfde ,MaxDiffWidth ,MaxDiffHeight ,_gbe ,_cbe ,float32 (_abc .Settings .RankHaus ),_aede );
if _bbc !=nil {return _cf .Wrap (_bbc ,_dcgd ,"");};if _eca {_afgb =true ;if _bbc =_abc .ClassIDs .Add (_gda );_bbc !=nil {return _cf .Wrap (_bbc ,_dcgd ,"");};if _bbc =_abc .ComponentPageNumbers .Add (_gef );_bbc !=nil {return _cf .Wrap (_bbc ,_dcgd ,"");
};if _abc .Settings .KeepClassInstances {_ccad ,_cfdc :=_abc .ClassInstances .GetBitmaps (_gda );if _cfdc !=nil {return _cf .Wrap (_cfdc ,_dcgd ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");
};if _bgf ,_cfdc =_fga .GetBitmap (_ggf );_cfdc !=nil {return _cf .Wrap (_cfdc ,_dcgd ,"\u0070i\u0078\u0061\u005b\u0069\u005d");};_ccad .Values =append (_ccad .Values ,_bgf );_dcad ,_cfdc :=_fada .Get (_ggf );if _cfdc !=nil {return _cf .Wrap (_cfdc ,_dcgd ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};_ccad .Boxes =append (_ccad .Boxes ,_dcad );};break ;};};if !_afgb {if _bbc =_abc .ClassIDs .Add (_cbc );_bbc !=nil {return _cf .Wrap (_bbc ,_dcgd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _bbc =_abc .ComponentPageNumbers .Add (_gef );_bbc !=nil {return _cf .Wrap (_bbc ,_dcgd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_dfa :=&_d .Bitmaps {};_bgf =_fga .Values [_ggf ];_dfa .AddBitmap (_bgf );_ffab ,_bbf :=_bgf .Width ,_bgf .Height ;_abc .TemplatesSize .Add (uint64 (_ffab )*uint64 (_bbf ),_cbc );_gfb ,_cdf :=_fada .Get (_ggf );if _cdf !=nil {return _cf .Wrap (_cdf ,_dcgd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_dfa .AddBox (_gfb );_abc .ClassInstances .AddBitmaps (_dfa );_abc .CentroidPointsTemplates .AddPoint (_fcd ,_adeb );_abc .UndilatedTemplates .AddBitmap (_dea );_abc .DilatedTemplates .AddBitmap (_def );_abc .FgTemplates .AddInt (_gbe );};};_abc .NumberOfClasses =len (_abc .UndilatedTemplates .Values );
return nil ;};func _egbc (_gdca *Classer ,_dcb *_d .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_dcb .Width ,Height :_dcb .Height ,Classer :_gdca };};type similarTemplatesFinder struct{Classer *Classer ;Width int ;Height int ;
Index int ;CurrentNumbers []int ;N int ;};func Init (settings Settings )(*Classer ,error ){const _f ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";_ge :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_a .IntsMap {},TemplateAreas :&_a .IntSlice {},ComponentPageNumbers :&_a .IntSlice {},ClassIDs :&_a .IntSlice {},ComponentsNumber :&_a .IntSlice {},CentroidPoints :&_d .Points {},CentroidPointsTemplates :&_d .Points {},UndilatedTemplates :&_d .Bitmaps {},DilatedTemplates :&_d .Bitmaps {},ClassInstances :&_d .BitmapsArray {},FgTemplates :&_a .NumSlice {}};
if _de :=_ge .Settings .Validate ();_de !=nil {return nil ,_cf .Wrap (_de ,_f ,"");};return _ge ,nil ;};func (_ccd *Classer )getULCorners (_gg *_d .Bitmap ,_gf *_d .Boxes )error {const _af ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _gg ==nil {return _cf .Error (_af ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gf ==nil {return _cf .Error (_af ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _ccd .PtaUL ==nil {_ccd .PtaUL =&_d .Points {};
};_fa :=len (*_gf );var (_fca ,_be ,_ff ,_bce int ;_fab ,_fg ,_fcb ,_fe float32 ;_fgc error ;_aa *_c .Rectangle ;_ecg *_d .Bitmap ;_bd _c .Point ;);for _acf :=0;_acf < _fa ;_acf ++{_fca =_ccd .BaseIndex +_acf ;if _fab ,_fg ,_fgc =_ccd .CentroidPoints .GetGeometry (_fca );
_fgc !=nil {return _cf .Wrap (_fgc ,_af ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");};if _be ,_fgc =_ccd .ClassIDs .Get (_fca );_fgc !=nil {return _cf .Wrap (_fgc ,_af ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");
};if _fcb ,_fe ,_fgc =_ccd .CentroidPointsTemplates .GetGeometry (_be );_fgc !=nil {return _cf .Wrap (_fgc ,_af ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_bb :=_fcb -_fab ;
_aac :=_fe -_fg ;if _bb >=0{_ff =int (_bb +0.5);}else {_ff =int (_bb -0.5);};if _aac >=0{_bce =int (_aac +0.5);}else {_bce =int (_aac -0.5);};if _aa ,_fgc =_gf .Get (_acf );_fgc !=nil {return _cf .Wrap (_fgc ,_af ,"");};_aeg ,_bcd :=_aa .Min .X ,_aa .Min .Y ;
_ecg ,_fgc =_ccd .UndilatedTemplates .GetBitmap (_be );if _fgc !=nil {return _cf .Wrap (_fgc ,_af ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_bd ,_fgc =_ecgc (_gg ,_aeg ,_bcd ,_ff ,_bce ,_ecg );if _fgc !=nil {return _cf .Wrap (_fgc ,_af ,"");};_ccd .PtaUL .AddPoint (float32 (_aeg -_ff +_bd .X ),float32 (_bcd -_bce +_bd .Y ));};return nil ;};var _feb bool ;var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};
func (_cc *Classer )AddPage (inputPage *_d .Bitmap ,pageNumber int ,method Method )(_e error ){const _ac ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";_cc .Widths [pageNumber ]=inputPage .Width ;_cc .Heights [pageNumber ]=inputPage .Height ;
if _e =_cc .verifyMethod (method );_e !=nil {return _cf .Wrap (_e ,_ac ,"");};_cfc ,_ef ,_e :=inputPage .GetComponents (_cc .Settings .Components ,_cc .Settings .MaxCompWidth ,_cc .Settings .MaxCompHeight );if _e !=nil {return _cf .Wrap (_e ,_ac ,"");};
_gb .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_cfc );if _e =_cc .addPageComponents (inputPage ,_ef ,_cfc ,pageNumber ,method );_e !=nil {return _cf .Wrap (_e ,_ac ,"");};return nil ;};func (_acc *Classer )addPageComponents (_cfa *_d .Bitmap ,_dec *_d .Boxes ,_gc *_d .Bitmaps ,_ae int ,_fc Method )error {const _ec ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _cfa ==nil {return _cf .Error (_ec ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _dec ==nil ||_gc ==nil ||len (*_dec )==0{_gb .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_cfa );
return nil ;};var _cd error ;switch _fc {case RankHaus :_cd =_acc .classifyRankHaus (_dec ,_gc ,_ae );case Correlation :_cd =_acc .classifyCorrelation (_dec ,_gc ,_ae );default:_gb .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_fc );
return _cf .Error (_ec ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _cd !=nil {return _cf .Wrap (_cd ,_ec ,"");};if _cd =_acc .getULCorners (_cfa ,_dec );_cd !=nil {return _cf .Wrap (_cd ,_ec ,"");
};_cbf :=len (*_dec );_acc .BaseIndex +=_cbf ;if _cd =_acc .ComponentsNumber .Add (_cbf );_cd !=nil {return _cf .Wrap (_cd ,_ec ,"");};return nil ;};const (MaxDiffWidth =2;MaxDiffHeight =2;);type Classer struct{BaseIndex int ;Settings Settings ;ComponentsNumber *_a .IntSlice ;
TemplateAreas *_a .IntSlice ;Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_d .BitmapsArray ;UndilatedTemplates *_d .Bitmaps ;DilatedTemplates *_d .Bitmaps ;TemplatesSize _a .IntsMap ;FgTemplates *_a .NumSlice ;CentroidPoints *_d .Points ;
CentroidPointsTemplates *_d .Points ;ClassIDs *_a .IntSlice ;ComponentPageNumbers *_a .IntSlice ;PtaUL *_d .Points ;PtaLL *_d .Points ;};type Method int ;func DefaultSettings ()Settings {_bega :=&Settings {};_bega .SetDefault ();return *_bega };func (_ffa *Classer )classifyRankHouseOne (_df *_d .Boxes ,_eaa ,_gea ,_adf *_d .Bitmaps ,_eae *_d .Points ,_dfd int )(_egg error ){const _ebd ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_adg ,_caf ,_ebcb ,_aec float32 ;_bcb int ;_fde ,_aabg ,_gdc ,_bdb ,_cgb *_d .Bitmap ;_adfe ,_eab bool ;);for _ffc :=0;_ffc < len (_eaa .Values );_ffc ++{_aabg =_gea .Values [_ffc ];_gdc =_adf .Values [_ffc ];_adg ,_caf ,_egg =_eae .GetGeometry (_ffc );
if _egg !=nil {return _cf .Wrapf (_egg ,_ebd ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_afg :=len (_ffa .UndilatedTemplates .Values );_adfe =false ;_ffe :=_egbc (_ffa ,_aabg );for _bcb =_ffe .Next ();_bcb > -1;
{_bdb ,_egg =_ffa .UndilatedTemplates .GetBitmap (_bcb );if _egg !=nil {return _cf .Wrap (_egg ,_ebd ,"\u0062\u006d\u0033");};_cgb ,_egg =_ffa .DilatedTemplates .GetBitmap (_bcb );if _egg !=nil {return _cf .Wrap (_egg ,_ebd ,"\u0062\u006d\u0034");};_ebcb ,_aec ,_egg =_ffa .CentroidPointsTemplates .GetGeometry (_bcb );
if _egg !=nil {return _cf .Wrap (_egg ,_ebd ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_eab ,_egg =_d .HausTest (_aabg ,_gdc ,_bdb ,_cgb ,_adg -_ebcb ,_caf -_aec ,MaxDiffWidth ,MaxDiffHeight );
if _egg !=nil {return _cf .Wrap (_egg ,_ebd ,"");};if _eab {_adfe =true ;if _egg =_ffa .ClassIDs .Add (_bcb );_egg !=nil {return _cf .Wrap (_egg ,_ebd ,"");};if _egg =_ffa .ComponentPageNumbers .Add (_dfd );_egg !=nil {return _cf .Wrap (_egg ,_ebd ,"");
};if _ffa .Settings .KeepClassInstances {_fad ,_edg :=_ffa .ClassInstances .GetBitmaps (_bcb );if _edg !=nil {return _cf .Wrap (_edg ,_ebd ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_fde ,_edg =_eaa .GetBitmap (_ffc );if _edg !=nil {return _cf .Wrap (_edg ,_ebd ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");
};_fad .AddBitmap (_fde );_eabe ,_edg :=_df .Get (_ffc );if _edg !=nil {return _cf .Wrap (_edg ,_ebd ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_fad .AddBox (_eabe );};break ;};};if !_adfe {if _egg =_ffa .ClassIDs .Add (_afg );_egg !=nil {return _cf .Wrap (_egg ,_ebd ,"");
};if _egg =_ffa .ComponentPageNumbers .Add (_dfd );_egg !=nil {return _cf .Wrap (_egg ,_ebd ,"");};_acda :=&_d .Bitmaps {};_fde ,_egg =_eaa .GetBitmap (_ffc );if _egg !=nil {return _cf .Wrap (_egg ,_ebd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_acda .Values =append (_acda .Values ,_fde );
_cff ,_bde :=_fde .Width ,_fde .Height ;_ffa .TemplatesSize .Add (uint64 (_bde )*uint64 (_cff ),_afg );_ddae ,_gfe :=_df .Get (_ffc );if _gfe !=nil {return _cf .Wrap (_gfe ,_ebd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_acda .AddBox (_ddae );_ffa .ClassInstances .AddBitmaps (_acda );
_ffa .CentroidPointsTemplates .AddPoint (_adg ,_caf );_ffa .UndilatedTemplates .AddBitmap (_aabg );_ffa .DilatedTemplates .AddBitmap (_gdc );};};return nil ;};const JbAddedPixels =6;func (_fbe *Classer )classifyRankHaus (_dde *_d .Boxes ,_cgcgb *_d .Bitmaps ,_gac int )error {const _ege ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";
if _dde ==nil {return _cf .Error (_ege ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _cgcgb ==nil {return _cf .Error (_ege ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_cfg :=len (_cgcgb .Values );if _cfg ==0{return _cf .Error (_ege ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");};_feg :=_cgcgb .CountPixels ();_bag :=_fbe .Settings .SizeHaus ;_efc :=_d .SelCreateBrick (_bag ,_bag ,_bag /2,_bag /2,_d .SelHit );
_ggc :=&_d .Bitmaps {Values :make ([]*_d .Bitmap ,_cfg )};_efe :=&_d .Bitmaps {Values :make ([]*_d .Bitmap ,_cfg )};var (_fafe ,_acfc ,_gde *_d .Bitmap ;_ddeb error ;);for _ffff :=0;_ffff < _cfg ;_ffff ++{_fafe ,_ddeb =_cgcgb .GetBitmap (_ffff );if _ddeb !=nil {return _cf .Wrap (_ddeb ,_ege ,"");
};_acfc ,_ddeb =_fafe .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _ddeb !=nil {return _cf .Wrap (_ddeb ,_ege ,"");};_gde ,_ddeb =_d .Dilate (nil ,_acfc ,_efc );if _ddeb !=nil {return _cf .Wrap (_ddeb ,_ege ,"");
};_ggc .Values [_cfg ]=_acfc ;_efe .Values [_cfg ]=_gde ;};_gdg ,_ddeb :=_d .Centroids (_ggc .Values );if _ddeb !=nil {return _cf .Wrap (_ddeb ,_ege ,"");};if _ddeb =_gdg .Add (_fbe .CentroidPoints );_ddeb !=nil {_gb .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");
};if _fbe .Settings .RankHaus ==1.0{_ddeb =_fbe .classifyRankHouseOne (_dde ,_cgcgb ,_ggc ,_efe ,_gdg ,_gac );}else {_ddeb =_fbe .classifyRankHouseNonOne (_dde ,_cgcgb ,_ggc ,_efe ,_gdg ,_feg ,_gac );};if _ddeb !=nil {return _cf .Wrap (_ddeb ,_ege ,"");
};return nil ;};func (_dca *Classer )classifyCorrelation (_aea *_d .Boxes ,_ed *_d .Bitmaps ,_dg int )error {const _dcf ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";if _aea ==nil {return _cf .Error (_dcf ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _ed ==nil {return _cf .Error (_dcf ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_fgg :=len (_ed .Values );if _fgg ==0{_gb .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_fff ,_fec *_d .Bitmap ;_dcaf error ;);_eb :=&_d .Bitmaps {Values :make ([]*_d .Bitmap ,_fgg )};for _fd ,_dd :=range _ed .Values {_fec ,_dcaf =_dd .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _dcaf !=nil {return _cf .Wrap (_dcaf ,_dcf ,"");
};_eb .Values [_fd ]=_fec ;};_eba :=_dca .FgTemplates ;_cfd :=_d .MakePixelSumTab8 ();_cge :=_d .MakePixelCentroidTab8 ();_cdc :=make ([]int ,_fgg );_bbb :=make ([][]int ,_fgg );_gcbg :=_d .Points (make ([]_d .Point ,_fgg ));_geb :=&_gcbg ;var (_dcd ,_eg int ;
_ebg ,_gff ,_aaf int ;_egb ,_ebe int ;_ggb byte ;);for _beb ,_aed :=range _eb .Values {_bbb [_beb ]=make ([]int ,_aed .Height );_dcd =0;_eg =0;_gff =(_aed .Height -1)*_aed .RowStride ;_ebg =0;for _ebe =_aed .Height -1;_ebe >=0;_ebe ,_gff =_ebe -1,_gff -_aed .RowStride {_bbb [_beb ][_ebe ]=_ebg ;
_aaf =0;for _egb =0;_egb < _aed .RowStride ;_egb ++{_ggb =_aed .Data [_gff +_egb ];_aaf +=_cfd [_ggb ];_dcd +=_cge [_ggb ]+_egb *8*_cfd [_ggb ];};_ebg +=_aaf ;_eg +=_aaf *_ebe ;};_cdc [_beb ]=_ebg ;if _ebg > 0{(*_geb )[_beb ]=_d .Point {X :float32 (_dcd )/float32 (_ebg ),Y :float32 (_eg )/float32 (_ebg )};
}else {(*_geb )[_beb ]=_d .Point {X :float32 (_aed .Width )/float32 (2),Y :float32 (_aed .Height )/float32 (2)};};};if _dcaf =_dca .CentroidPoints .Add (_geb );_dcaf !=nil {return _cf .Wrap (_dcaf ,_dcf ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");
};var (_cac ,_ab ,_bg int ;_gee float64 ;_cag ,_bcdf ,_cgc ,_aba float32 ;_gbf ,_eeg _d .Point ;_dcab bool ;_ad *similarTemplatesFinder ;_dcae int ;_ccf *_d .Bitmap ;_eegd *_c .Rectangle ;_bcda *_d .Bitmaps ;);for _dcae ,_fec =range _eb .Values {_ab =_cdc [_dcae ];
if _cag ,_bcdf ,_dcaf =_geb .GetGeometry (_dcae );_dcaf !=nil {return _cf .Wrap (_dcaf ,_dcf ,"\u0070t\u0061\u0020\u002d\u0020\u0069");};_dcab =false ;_ade :=len (_dca .UndilatedTemplates .Values );_ad =_egbc (_dca ,_fec );for _fb :=_ad .Next ();_fb > -1;
{if _ccf ,_dcaf =_dca .UndilatedTemplates .GetBitmap (_fb );_dcaf !=nil {return _cf .Wrap (_dcaf ,_dcf ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");};if _bg ,_dcaf =_eba .GetInt (_fb );
_dcaf !=nil {_gb .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dcaf );};if _cgc ,_aba ,_dcaf =_dca .CentroidPointsTemplates .GetGeometry (_fb );
_dcaf !=nil {return _cf .Wrap (_dcaf ,_dcf ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _dca .Settings .WeightFactor > 0.0{if _cac ,_dcaf =_dca .TemplateAreas .Get (_fb );_dcaf !=nil {_gb .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_dcaf );
};_gee =_dca .Settings .Thresh +(1.0-_dca .Settings .Thresh )*_dca .Settings .WeightFactor *float64 (_bg )/float64 (_cac );}else {_gee =_dca .Settings .Thresh ;};_fcaf ,_ebc :=_d .CorrelationScoreThresholded (_fec ,_ccf ,_ab ,_bg ,_gbf .X -_eeg .X ,_gbf .Y -_eeg .Y ,MaxDiffWidth ,MaxDiffHeight ,_cfd ,_bbb [_dcae ],float32 (_gee ));
if _ebc !=nil {return _cf .Wrap (_ebc ,_dcf ,"");};if _feb {var (_ebb ,_aca float64 ;_cgcg ,_abg int ;);_ebb ,_ebc =_d .CorrelationScore (_fec ,_ccf ,_ab ,_bg ,_cag -_cgc ,_bcdf -_aba ,MaxDiffWidth ,MaxDiffHeight ,_cfd );if _ebc !=nil {return _cf .Wrap (_ebc ,_dcf ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_aca ,_ebc =_d .CorrelationScoreSimple (_fec ,_ccf ,_ab ,_bg ,_cag -_cgc ,_bcdf -_aba ,MaxDiffWidth ,MaxDiffHeight ,_cfd );if _ebc !=nil {return _cf .Wrap (_ebc ,_dcf ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_cgcg =int (_b .Sqrt (_ebb *float64 (_ab )*float64 (_bg )));_abg =int (_b .Sqrt (_aca *float64 (_ab )*float64 (_bg )));if (_ebb >=_gee )!=(_aca >=_gee ){return _cf .Errorf (_dcf ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_cgcg ,_ebb ,_ebb >=_gee ,_abg ,_aca ,_aca >=_gee ,_ebb -_aca );
};if _ebb >=_gee !=_fcaf {return _cf .Errorf (_dcf ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_ebb ,_ebb *float64 (_ab )*float64 (_bg ),_cgcg ,_gee ,float32 (_gee )*float32 (_ab )*float32 (_bg ),_fcaf );
};};if _fcaf {_dcab =true ;if _ebc =_dca .ClassIDs .Add (_fb );_ebc !=nil {return _cf .Wrap (_ebc ,_dcf ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _ebc =_dca .ComponentPageNumbers .Add (_dg );_ebc !=nil {return _cf .Wrap (_ebc ,_dcf ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _dca .Settings .KeepClassInstances {if _fff ,_ebc =_ed .GetBitmap (_dcae );_ebc !=nil {return _cf .Wrap (_ebc ,_dcf ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _bcda ,_ebc =_dca .ClassInstances .GetBitmaps (_fb );
_ebc !=nil {return _cf .Wrap (_ebc ,_dcf ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_bcda .AddBitmap (_fff );if _eegd ,_ebc =_aea .Get (_dcae );_ebc !=nil {return _cf .Wrap (_ebc ,_dcf ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_bcda .AddBox (_eegd );};break ;};};if !_dcab {if _dcaf =_dca .ClassIDs .Add (_ade );_dcaf !=nil {return _cf .Wrap (_dcaf ,_dcf ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _dcaf =_dca .ComponentPageNumbers .Add (_dg );_dcaf !=nil {return _cf .Wrap (_dcaf ,_dcf ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_bcda =&_d .Bitmaps {};if _fff ,_dcaf =_ed .GetBitmap (_dcae );_dcaf !=nil {return _cf .Wrap (_dcaf ,_dcf ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_bcda .AddBitmap (_fff );_dda ,_bge :=_fff .Width ,_fff .Height ;_eeb :=uint64 (_bge )*uint64 (_dda );
_dca .TemplatesSize .Add (_eeb ,_ade );if _eegd ,_dcaf =_aea .Get (_dcae );_dcaf !=nil {return _cf .Wrap (_dcaf ,_dcf ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_bcda .AddBox (_eegd );_dca .ClassInstances .AddBitmaps (_bcda );_dca .CentroidPointsTemplates .AddPoint (_cag ,_bcdf );
_dca .FgTemplates .AddInt (_ab );_dca .UndilatedTemplates .AddBitmap (_fff );_cac =(_fec .Width -2*JbAddedPixels )*(_fec .Height -2*JbAddedPixels );if _dcaf =_dca .TemplateAreas .Add (_cac );_dcaf !=nil {return _cf .Wrap (_dcaf ,_dcf ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};};};_dca .NumberOfClasses =len (_dca .UndilatedTemplates .Values );return nil ;};func (_db *Classer )ComputeLLCorners ()(_cca error ){const _bf ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _db .PtaUL ==nil {return _cf .Error (_bf ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};_bc :=len (*_db .PtaUL );_db .PtaLL =&_d .Points {};var (_da ,_ce float32 ;_cb ,_ag int ;
_ca *_d .Bitmap ;);for _bff :=0;_bff < _bc ;_bff ++{_da ,_ce ,_cca =_db .PtaUL .GetGeometry (_bff );if _cca !=nil {_gb .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cca );
return _cf .Wrap (_cca ,_bf ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_cb ,_cca =_db .ClassIDs .Get (_bff );if _cca !=nil {_gb .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_cca );
return _cf .Wrap (_cca ,_bf ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_ca ,_cca =_db .UndilatedTemplates .GetBitmap (_cb );if _cca !=nil {_gb .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_cca );
return _cf .Wrap (_cca ,_bf ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_ag =_ca .Height ;_db .PtaLL .AddPoint (_da ,_ce +float32 (_ag ));};return nil ;};func (_fdb Settings )Validate ()error {const _deg ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";
if _fdb .Thresh < 0.4||_fdb .Thresh > 0.98{return _cf .Error (_deg ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _fdb .WeightFactor < 0.0||_fdb .WeightFactor > 1.0{return _cf .Error (_deg ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _fdb .RankHaus < 0.5||_fdb .RankHaus > 1.0{return _cf .Error (_deg ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _fdb .SizeHaus < 1||_fdb .SizeHaus > 10{return _cf .Error (_deg ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _fdb .Components {case _d .ComponentConn ,_d .ComponentCharacters ,_d .ComponentWords :default:return _cf .Error (_deg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};func (_ga *Classer )verifyMethod (_gcd Method )error {if _gcd !=RankHaus &&_gcd !=Correlation {return _cf .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};func (_ace *similarTemplatesFinder )Next ()int {var (_fbg ,_dege ,_bee ,_fag int ;_cgbb bool ;_ecf *_d .Bitmap ;_dff error ;);for {if _ace .Index >=25{return -1;};_dege =_ace .Width +TwoByTwoWalk [2*_ace .Index ];_fbg =_ace .Height +TwoByTwoWalk [2*_ace .Index +1];
if _fbg < 1||_dege < 1{_ace .Index ++;continue ;};if len (_ace .CurrentNumbers )==0{_ace .CurrentNumbers ,_cgbb =_ace .Classer .TemplatesSize .GetSlice (uint64 (_dege )*uint64 (_fbg ));if !_cgbb {_ace .Index ++;continue ;};_ace .N =0;};_bee =len (_ace .CurrentNumbers );
for ;_ace .N < _bee ;_ace .N ++{_fag =_ace .CurrentNumbers [_ace .N ];_ecf ,_dff =_ace .Classer .DilatedTemplates .GetBitmap (_fag );if _dff !=nil {_gb .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _ecf .Width -2*JbAddedPixels ==_dege &&_ecf .Height -2*JbAddedPixels ==_fbg {return _fag ;};};_ace .Index ++;_ace .CurrentNumbers =nil ;};};func _ecgc (_fgb *_d .Bitmap ,_afd ,_cbd ,_afc ,_agd int ,_gd *_d .Bitmap )(_ea _c .Point ,_ba error ){const _fed ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";
if _fgb ==nil {return _ea ,_cf .Error (_fed ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};if _gd ==nil {return _ea ,_cf .Error (_fed ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");
};_bfc ,_faf :=_gd .Width ,_gd .Height ;_gbd ,_ee :=_afd -_afc -JbAddedPixels ,_cbd -_agd -JbAddedPixels ;_gb .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_afd ,_cbd ,_bfc ,_faf ,_gbd ,_ee );
_gec ,_ba :=_d .Rect (_gbd ,_ee ,_bfc ,_faf );if _ba !=nil {return _ea ,_cf .Wrap (_ba ,_fed ,"");};_gdd ,_ ,_ba :=_fgb .ClipRectangle (_gec );if _ba !=nil {_gb .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_gec );
return _ea ,_cf .Wrap (_ba ,_fed ,"");};_cg :=_d .New (_gdd .Width ,_gdd .Height );_aab :=_b .MaxInt32 ;var _fge ,_dc ,_acd ,_beg ,_dcg int ;for _fge =-1;_fge <=1;_fge ++{for _dc =-1;_dc <=1;_dc ++{if _ ,_ba =_d .Copy (_cg ,_gdd );_ba !=nil {return _ea ,_cf .Wrap (_ba ,_fed ,"");
};if _ba =_cg .RasterOperation (_dc ,_fge ,_bfc ,_faf ,_d .PixSrcXorDst ,_gd ,0,0);_ba !=nil {return _ea ,_cf .Wrap (_ba ,_fed ,"");};_acd =_cg .CountPixels ();if _acd < _aab {_beg =_dc ;_dcg =_fge ;_aab =_acd ;};};};_ea .X =_beg ;_ea .Y =_dcg ;return _ea ,nil ;
};