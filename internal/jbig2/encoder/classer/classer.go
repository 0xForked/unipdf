//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (_ea "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_eae "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ff "image";_e "math";
);const (MaxConnCompWidth =350;MaxCharCompWidth =350;MaxWordCompWidth =1000;MaxCompHeight =120;);var _efbg bool ;const (MaxDiffWidth =2;MaxDiffHeight =2;);func (_cdgc Settings )Validate ()error {const _ggb ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";
if _cdgc .Thresh < 0.4||_cdgc .Thresh > 0.98{return _c .Error (_ggb ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _cdgc .WeightFactor < 0.0||_cdgc .WeightFactor > 1.0{return _c .Error (_ggb ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _cdgc .RankHaus < 0.5||_cdgc .RankHaus > 1.0{return _c .Error (_ggb ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _cdgc .SizeHaus < 1||_cdgc .SizeHaus > 10{return _c .Error (_ggb ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _cdgc .Components {case _eae .ComponentConn ,_eae .ComponentCharacters ,_eae .ComponentWords :default:return _c .Error (_ggb ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};func (_acb *Classer )classifyRankHaus (_gfge *_eae .Boxes ,_ed *_eae .Bitmaps ,_cag int )error {const _ccc ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";if _gfge ==nil {return _c .Error (_ccc ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _ed ==nil {return _c .Error (_ccc ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_ggag :=len (_ed .Values );if _ggag ==0{return _c .Error (_ccc ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");
};_fbe :=_ed .CountPixels ();_ddd :=_acb .Settings .SizeHaus ;_cedd :=_eae .SelCreateBrick (_ddd ,_ddd ,_ddd /2,_ddd /2,_eae .SelHit );_bc :=&_eae .Bitmaps {Values :make ([]*_eae .Bitmap ,_ggag )};_fgb :=&_eae .Bitmaps {Values :make ([]*_eae .Bitmap ,_ggag )};
var (_cec ,_fgc ,_ga *_eae .Bitmap ;_bgd error ;);for _dcb :=0;_dcb < _ggag ;_dcb ++{_cec ,_bgd =_ed .GetBitmap (_dcb );if _bgd !=nil {return _c .Wrap (_bgd ,_ccc ,"");};_fgc ,_bgd =_cec .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);
if _bgd !=nil {return _c .Wrap (_bgd ,_ccc ,"");};_ga ,_bgd =_eae .Dilate (nil ,_fgc ,_cedd );if _bgd !=nil {return _c .Wrap (_bgd ,_ccc ,"");};_bc .Values [_ggag ]=_fgc ;_fgb .Values [_ggag ]=_ga ;};_efd ,_bgd :=_eae .Centroids (_bc .Values );if _bgd !=nil {return _c .Wrap (_bgd ,_ccc ,"");
};if _bgd =_efd .Add (_acb .CentroidPoints );_bgd !=nil {_ea .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");};if _acb .Settings .RankHaus ==1.0{_bgd =_acb .classifyRankHouseOne (_gfge ,_ed ,_bc ,_fgb ,_efd ,_cag );
}else {_bgd =_acb .classifyRankHouseNonOne (_gfge ,_ed ,_bc ,_fgb ,_efd ,_fbe ,_cag );};if _bgd !=nil {return _c .Wrap (_bgd ,_ccc ,"");};return nil ;};func _bfd (_be *_eae .Bitmap ,_def ,_dcd ,_egc ,_ca int ,_egbca *_eae .Bitmap )(_deb _ff .Point ,_dg error ){const _cc ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";
if _be ==nil {return _deb ,_c .Error (_cc ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};if _egbca ==nil {return _deb ,_c .Error (_cc ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");
};_ge ,_eac :=_egbca .Width ,_egbca .Height ;_faa ,_fag :=_def -_egc -JbAddedPixels ,_dcd -_ca -JbAddedPixels ;_ea .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_def ,_dcd ,_ge ,_eac ,_faa ,_fag );
_ec ,_dg :=_eae .Rect (_faa ,_fag ,_ge ,_eac );if _dg !=nil {return _deb ,_c .Wrap (_dg ,_cc ,"");};_bg ,_ ,_dg :=_be .ClipRectangle (_ec );if _dg !=nil {_ea .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_ec );
return _deb ,_c .Wrap (_dg ,_cc ,"");};_fd :=_eae .New (_bg .Width ,_bg .Height );_cgb :=_e .MaxInt32 ;var _dagb ,_dgg ,_fagc ,_ccb ,_gdb int ;for _dagb =-1;_dagb <=1;_dagb ++{for _dgg =-1;_dgg <=1;_dgg ++{if _ ,_dg =_eae .Copy (_fd ,_bg );_dg !=nil {return _deb ,_c .Wrap (_dg ,_cc ,"");
};if _dg =_fd .RasterOperation (_dgg ,_dagb ,_ge ,_eac ,_eae .PixSrcXorDst ,_egbca ,0,0);_dg !=nil {return _deb ,_c .Wrap (_dg ,_cc ,"");};_fagc =_fd .CountPixels ();if _fagc < _cgb {_ccb =_dgg ;_gdb =_dagb ;_cgb =_fagc ;};};};_deb .X =_ccb ;_deb .Y =_gdb ;
return _deb ,nil ;};func (_ef *Classer )ComputeLLCorners ()(_ffb error ){const _b ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";if _ef .PtaUL ==nil {return _c .Error (_b ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};_da :=len (*_ef .PtaUL );_ef .PtaLL =&_eae .Points {};var (_cg ,_fa float32 ;_ce ,_ebf int ;_fc *_eae .Bitmap ;);for _gg :=0;_gg < _da ;_gg ++{_cg ,_fa ,_ffb =_ef .PtaUL .GetGeometry (_gg );if _ffb !=nil {_ea .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ffb );
return _c .Wrap (_ffb ,_b ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_ce ,_ffb =_ef .ClassIDs .Get (_gg );if _ffb !=nil {_ea .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_ffb );
return _c .Wrap (_ffb ,_b ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_fc ,_ffb =_ef .UndilatedTemplates .GetBitmap (_ce );if _ffb !=nil {_ea .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_ffb );
return _c .Wrap (_ffb ,_b ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_ebf =_fc .Height ;_ef .PtaLL .AddPoint (_cg ,_fa +float32 (_ebf ));};return nil ;};type Method int ;func (_agb *similarTemplatesFinder )Next ()int {var (_bcg ,_abb ,_ffbgf ,_cfca int ;
_ged bool ;_gbg *_eae .Bitmap ;_age error ;);for {if _agb .Index >=25{return -1;};_abb =_agb .Width +TwoByTwoWalk [2*_agb .Index ];_bcg =_agb .Height +TwoByTwoWalk [2*_agb .Index +1];if _bcg < 1||_abb < 1{_agb .Index ++;continue ;};if len (_agb .CurrentNumbers )==0{_agb .CurrentNumbers ,_ged =_agb .Classer .TemplatesSize .GetSlice (uint64 (_abb )*uint64 (_bcg ));
if !_ged {_agb .Index ++;continue ;};_agb .N =0;};_ffbgf =len (_agb .CurrentNumbers );for ;_agb .N < _ffbgf ;_agb .N ++{_cfca =_agb .CurrentNumbers [_agb .N ];_gbg ,_age =_agb .Classer .DilatedTemplates .GetBitmap (_cfca );if _age !=nil {_ea .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _gbg .Width -2*JbAddedPixels ==_abb &&_gbg .Height -2*JbAddedPixels ==_bcg {return _cfca ;};};_agb .Index ++;_agb .CurrentNumbers =nil ;};};func (_fb *Classer )addPageComponents (_fg *_eae .Bitmap ,_fba *_eae .Boxes ,_cfc *_eae .Bitmaps ,_fe int ,_bb Method )error {const _df ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _fg ==nil {return _c .Error (_df ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _fba ==nil ||_cfc ==nil ||len (*_fba )==0{_ea .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_fg );
return nil ;};var _gga error ;switch _bb {case RankHaus :_gga =_fb .classifyRankHaus (_fba ,_cfc ,_fe );case Correlation :_gga =_fb .classifyCorrelation (_fba ,_cfc ,_fe );default:_ea .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_bb );
return _c .Error (_df ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _gga !=nil {return _c .Wrap (_gga ,_df ,"");};if _gga =_fb .getULCorners (_fg ,_fba );_gga !=nil {return _c .Wrap (_gga ,_df ,"");
};_gc :=len (*_fba );_fb .BaseIndex +=_gc ;if _gga =_fb .ComponentsNumber .Add (_gc );_gga !=nil {return _c .Wrap (_gga ,_df ,"");};return nil ;};func _fad (_fga *Classer ,_dacc *_eae .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_dacc .Width ,Height :_dacc .Height ,Classer :_fga };
};func Init (settings Settings )(*Classer ,error ){const _cf ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";_eg :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_a .IntsMap {},TemplateAreas :&_a .IntSlice {},ComponentPageNumbers :&_a .IntSlice {},ClassIDs :&_a .IntSlice {},ComponentsNumber :&_a .IntSlice {},CentroidPoints :&_eae .Points {},CentroidPointsTemplates :&_eae .Points {},UndilatedTemplates :&_eae .Bitmaps {},DilatedTemplates :&_eae .Bitmaps {},ClassInstances :&_eae .BitmapsArray {},FgTemplates :&_a .NumSlice {}};
if _g :=_eg .Settings .Validate ();_g !=nil {return nil ,_c .Wrap (_g ,_cf ,"");};return _eg ,nil ;};const JbAddedPixels =6;func (_d *Classer )AddPage (inputPage *_eae .Bitmap ,pageNumber int ,method Method )(_egb error ){const _egbc ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";
_d .Widths [pageNumber ]=inputPage .Width ;_d .Heights [pageNumber ]=inputPage .Height ;if _egb =_d .verifyMethod (method );_egb !=nil {return _c .Wrap (_egb ,_egbc ,"");};_eb ,_gf ,_egb :=inputPage .GetComponents (_d .Settings .Components ,_d .Settings .MaxCompWidth ,_d .Settings .MaxCompHeight );
if _egb !=nil {return _c .Wrap (_egb ,_egbc ,"");};_ea .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_eb );if _egb =_d .addPageComponents (inputPage ,_gf ,_eb ,pageNumber ,method );_egb !=nil {return _c .Wrap (_egb ,_egbc ,"");
};return nil ;};func (_gfg *Classer )getULCorners (_fbae *_eae .Bitmap ,_af *_eae .Boxes )error {const _ab ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";if _fbae ==nil {return _c .Error (_ab ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");
};if _af ==nil {return _c .Error (_ab ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _gfg .PtaUL ==nil {_gfg .PtaUL =&_eae .Points {};};_ceb :=len (*_af );var (_bbg ,_egf ,_afb ,_dfg int ;_cd ,_ag ,_bd ,_dag float32 ;_bf error ;_efb *_ff .Rectangle ;
_ced *_eae .Bitmap ;_cdc _ff .Point ;);for _de :=0;_de < _ceb ;_de ++{_bbg =_gfg .BaseIndex +_de ;if _cd ,_ag ,_bf =_gfg .CentroidPoints .GetGeometry (_bbg );_bf !=nil {return _c .Wrap (_bf ,_ab ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");
};if _egf ,_bf =_gfg .ClassIDs .Get (_bbg );_bf !=nil {return _c .Wrap (_bf ,_ab ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");};if _bd ,_dag ,_bf =_gfg .CentroidPointsTemplates .GetGeometry (_egf );_bf !=nil {return _c .Wrap (_bf ,_ab ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");
};_afe :=_bd -_cd ;_dd :=_dag -_ag ;if _afe >=0{_afb =int (_afe +0.5);}else {_afb =int (_afe -0.5);};if _dd >=0{_dfg =int (_dd +0.5);}else {_dfg =int (_dd -0.5);};if _efb ,_bf =_af .Get (_de );_bf !=nil {return _c .Wrap (_bf ,_ab ,"");};_afa ,_gd :=_efb .Min .X ,_efb .Min .Y ;
_ced ,_bf =_gfg .UndilatedTemplates .GetBitmap (_egf );if _bf !=nil {return _c .Wrap (_bf ,_ab ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_cdc ,_bf =_bfd (_fbae ,_afa ,_gd ,_afb ,_dfg ,_ced );if _bf !=nil {return _c .Wrap (_bf ,_ab ,"");};_gfg .PtaUL .AddPoint (float32 (_afa -_afb +_cdc .X ),float32 (_gd -_dfg +_cdc .Y ));};return nil ;};func (_dc *Classer )verifyMethod (_ae Method )error {if _ae !=RankHaus &&_ae !=Correlation {return _c .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};func DefaultSettings ()Settings {_ggc :=&Settings {};_ggc .SetDefault ();return *_ggc };func (_dgc *Classer )classifyRankHouseNonOne (_dcge *_eae .Boxes ,_fgf ,_cda ,_eecg *_eae .Bitmaps ,_caga *_eae .Points ,_bdd *_a .NumSlice ,_afd int )(_gfa error ){const _dae ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_gec ,_ede ,_cdg ,_gef float32 ;_beaf ,_bdb ,_feg int ;_cfa ,_bfg ,_bddd ,_bfdb ,_ggf *_eae .Bitmap ;_aeb ,_cbb bool ;);_fcd :=_eae .MakePixelSumTab8 ();for _fgcb :=0;_fgcb < len (_fgf .Values );_fgcb ++{if _bfg ,_gfa =_cda .GetBitmap (_fgcb );_gfa !=nil {return _c .Wrap (_gfa ,_dae ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};if _beaf ,_gfa =_bdd .GetInt (_fgcb );_gfa !=nil {_ea .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_fgcb ,_gfa );
};if _bddd ,_gfa =_eecg .GetBitmap (_fgcb );_gfa !=nil {return _c .Wrap (_gfa ,_dae ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _gec ,_ede ,_gfa =_caga .GetGeometry (_fgcb );_gfa !=nil {return _c .Wrapf (_gfa ,_dae ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_eggf :=len (_dgc .UndilatedTemplates .Values );_aeb =false ;_ad :=_fad (_dgc ,_bfg );for _feg =_ad .Next ();_feg > -1;{if _bfdb ,_gfa =_dgc .UndilatedTemplates .GetBitmap (_feg );_gfa !=nil {return _c .Wrap (_gfa ,_dae ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _bdb ,_gfa =_dgc .FgTemplates .GetInt (_feg );_gfa !=nil {_ea .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_feg ,_gfa );
};if _ggf ,_gfa =_dgc .DilatedTemplates .GetBitmap (_feg );_gfa !=nil {return _c .Wrap (_gfa ,_dae ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _cdg ,_gef ,_gfa =_dgc .CentroidPointsTemplates .GetGeometry (_feg );
_gfa !=nil {return _c .Wrap (_gfa ,_dae ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_cbb ,_gfa =_eae .RankHausTest (_bfg ,_bddd ,_bfdb ,_ggf ,_gec -_cdg ,_ede -_gef ,MaxDiffWidth ,MaxDiffHeight ,_beaf ,_bdb ,float32 (_dgc .Settings .RankHaus ),_fcd );
if _gfa !=nil {return _c .Wrap (_gfa ,_dae ,"");};if _cbb {_aeb =true ;if _gfa =_dgc .ClassIDs .Add (_feg );_gfa !=nil {return _c .Wrap (_gfa ,_dae ,"");};if _gfa =_dgc .ComponentPageNumbers .Add (_afd );_gfa !=nil {return _c .Wrap (_gfa ,_dae ,"");};if _dgc .Settings .KeepClassInstances {_ffbg ,_dbdc :=_dgc .ClassInstances .GetBitmaps (_feg );
if _dbdc !=nil {return _c .Wrap (_dbdc ,_dae ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");};if _cfa ,_dbdc =_fgf .GetBitmap (_fgcb );_dbdc !=nil {return _c .Wrap (_dbdc ,_dae ,"\u0070i\u0078\u0061\u005b\u0069\u005d");
};_ffbg .Values =append (_ffbg .Values ,_cfa );_abg ,_dbdc :=_dcge .Get (_fgcb );if _dbdc !=nil {return _c .Wrap (_dbdc ,_dae ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};_ffbg .Boxes =append (_ffbg .Boxes ,_abg );};break ;};};if !_aeb {if _gfa =_dgc .ClassIDs .Add (_eggf );
_gfa !=nil {return _c .Wrap (_gfa ,_dae ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _gfa =_dgc .ComponentPageNumbers .Add (_afd );_gfa !=nil {return _c .Wrap (_gfa ,_dae ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_fagf :=&_eae .Bitmaps {};_cfa =_fgf .Values [_fgcb ];
_fagf .AddBitmap (_cfa );_bef ,_begg :=_cfa .Width ,_cfa .Height ;_dgc .TemplatesSize .Add (uint64 (_bef )*uint64 (_begg ),_eggf );_cdfc ,_acf :=_dcge .Get (_fgcb );if _acf !=nil {return _c .Wrap (_acf ,_dae ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_fagf .AddBox (_cdfc );
_dgc .ClassInstances .AddBitmaps (_fagf );_dgc .CentroidPointsTemplates .AddPoint (_gec ,_ede );_dgc .UndilatedTemplates .AddBitmap (_bfg );_dgc .DilatedTemplates .AddBitmap (_bddd );_dgc .FgTemplates .AddInt (_beaf );};};_dgc .NumberOfClasses =len (_dgc .UndilatedTemplates .Values );
return nil ;};func (_bfdf *Settings )SetDefault (){if _bfdf .MaxCompWidth ==0{switch _bfdf .Components {case _eae .ComponentConn :_bfdf .MaxCompWidth =MaxConnCompWidth ;case _eae .ComponentCharacters :_bfdf .MaxCompWidth =MaxCharCompWidth ;case _eae .ComponentWords :_bfdf .MaxCompWidth =MaxWordCompWidth ;
};};if _bfdf .MaxCompHeight ==0{_bfdf .MaxCompHeight =MaxCompHeight ;};if _bfdf .Thresh ==0.0{_bfdf .Thresh =0.9;};if _bfdf .WeightFactor ==0.0{_bfdf .WeightFactor =0.75;};if _bfdf .RankHaus ==0.0{_bfdf .RankHaus =0.97;};if _bfdf .SizeHaus ==0{_bfdf .SizeHaus =2;
};};type similarTemplatesFinder struct{Classer *Classer ;Width int ;Height int ;Index int ;CurrentNumbers []int ;N int ;};var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};
type Settings struct{MaxCompWidth int ;MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;WeightFactor float64 ;KeepClassInstances bool ;Components _eae .Component ;Method Method ;};type Classer struct{BaseIndex int ;Settings Settings ;
ComponentsNumber *_a .IntSlice ;TemplateAreas *_a .IntSlice ;Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_eae .BitmapsArray ;UndilatedTemplates *_eae .Bitmaps ;DilatedTemplates *_eae .Bitmaps ;TemplatesSize _a .IntsMap ;
FgTemplates *_a .NumSlice ;CentroidPoints *_eae .Points ;CentroidPointsTemplates *_eae .Points ;ClassIDs *_a .IntSlice ;ComponentPageNumbers *_a .IntSlice ;PtaUL *_eae .Points ;PtaLL *_eae .Points ;};func (_bcb *Classer )classifyRankHouseOne (_abc *_eae .Boxes ,_ecd ,_gfee ,_aba *_eae .Bitmaps ,_eec *_eae .Points ,_bea int )(_ba error ){const _fae ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_bgdf ,_edd ,_fec ,_fcf float32 ;_gaf int ;_bgf ,_beg ,_efe ,_ggaa ,_bbeg *_eae .Bitmap ;_aabe ,_cb bool ;);for _dfe :=0;_dfe < len (_ecd .Values );_dfe ++{_beg =_gfee .Values [_dfe ];_efe =_aba .Values [_dfe ];_bgdf ,_edd ,_ba =_eec .GetGeometry (_dfe );
if _ba !=nil {return _c .Wrapf (_ba ,_fae ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_ccbb :=len (_bcb .UndilatedTemplates .Values );_aabe =false ;_dagc :=_fad (_bcb ,_beg );for _gaf =_dagc .Next ();_gaf > -1;
{_ggaa ,_ba =_bcb .UndilatedTemplates .GetBitmap (_gaf );if _ba !=nil {return _c .Wrap (_ba ,_fae ,"\u0062\u006d\u0033");};_bbeg ,_ba =_bcb .DilatedTemplates .GetBitmap (_gaf );if _ba !=nil {return _c .Wrap (_ba ,_fae ,"\u0062\u006d\u0034");};_fec ,_fcf ,_ba =_bcb .CentroidPointsTemplates .GetGeometry (_gaf );
if _ba !=nil {return _c .Wrap (_ba ,_fae ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_cb ,_ba =_eae .HausTest (_beg ,_efe ,_ggaa ,_bbeg ,_bgdf -_fec ,_edd -_fcf ,MaxDiffWidth ,MaxDiffHeight );
if _ba !=nil {return _c .Wrap (_ba ,_fae ,"");};if _cb {_aabe =true ;if _ba =_bcb .ClassIDs .Add (_gaf );_ba !=nil {return _c .Wrap (_ba ,_fae ,"");};if _ba =_bcb .ComponentPageNumbers .Add (_bea );_ba !=nil {return _c .Wrap (_ba ,_fae ,"");};if _bcb .Settings .KeepClassInstances {_afg ,_dfc :=_bcb .ClassInstances .GetBitmaps (_gaf );
if _dfc !=nil {return _c .Wrap (_dfc ,_fae ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_bgf ,_dfc =_ecd .GetBitmap (_dfe );if _dfc !=nil {return _c .Wrap (_dfc ,_fae ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_afg .AddBitmap (_bgf );_gdf ,_dfc :=_abc .Get (_dfe );
if _dfc !=nil {return _c .Wrap (_dfc ,_fae ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_afg .AddBox (_gdf );};break ;};};if !_aabe {if _ba =_bcb .ClassIDs .Add (_ccbb );_ba !=nil {return _c .Wrap (_ba ,_fae ,"");};if _ba =_bcb .ComponentPageNumbers .Add (_bea );
_ba !=nil {return _c .Wrap (_ba ,_fae ,"");};_fbd :=&_eae .Bitmaps {};_bgf ,_ba =_ecd .GetBitmap (_dfe );if _ba !=nil {return _c .Wrap (_ba ,_fae ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_fbd .Values =append (_fbd .Values ,_bgf );_cbc ,_dcg :=_bgf .Width ,_bgf .Height ;
_bcb .TemplatesSize .Add (uint64 (_dcg )*uint64 (_cbc ),_ccbb );_gae ,_fde :=_abc .Get (_dfe );if _fde !=nil {return _c .Wrap (_fde ,_fae ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_fbd .AddBox (_gae );_bcb .ClassInstances .AddBitmaps (_fbd );_bcb .CentroidPointsTemplates .AddPoint (_bgdf ,_edd );
_bcb .UndilatedTemplates .AddBitmap (_beg );_bcb .DilatedTemplates .AddBitmap (_efe );};};return nil ;};func (_dgb *Classer )classifyCorrelation (_ac *_eae .Boxes ,_bbe *_eae .Bitmaps ,_fea int )error {const _dfb ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";
if _ac ==nil {return _c .Error (_dfb ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _bbe ==nil {return _c .Error (_dfb ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_daf :=len (_bbe .Values );if _daf ==0{_ea .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_aca ,_gcf *_eae .Bitmap ;_db error ;);_cca :=&_eae .Bitmaps {Values :make ([]*_eae .Bitmap ,_daf )};for _cdf ,_fcg :=range _bbe .Values {_gcf ,_db =_fcg .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);
if _db !=nil {return _c .Wrap (_db ,_dfb ,"");};_cca .Values [_cdf ]=_gcf ;};_bbf :=_dgb .FgTemplates ;_gfd :=_eae .MakePixelSumTab8 ();_aa :=_eae .MakePixelCentroidTab8 ();_fbc :=make ([]int ,_daf );_aab :=make ([][]int ,_daf );_dcc :=_eae .Points (make ([]_eae .Point ,_daf ));
_fdf :=&_dcc ;var (_bec ,_dgbe int ;_dde ,_ebb ,_gce int ;_gda ,_gfe int ;_abf byte ;);for _ee ,_egbd :=range _cca .Values {_aab [_ee ]=make ([]int ,_egbd .Height );_bec =0;_dgbe =0;_ebb =(_egbd .Height -1)*_egbd .RowStride ;_dde =0;for _gfe =_egbd .Height -1;
_gfe >=0;_gfe ,_ebb =_gfe -1,_ebb -_egbd .RowStride {_aab [_ee ][_gfe ]=_dde ;_gce =0;for _gda =0;_gda < _egbd .RowStride ;_gda ++{_abf =_egbd .Data [_ebb +_gda ];_gce +=_gfd [_abf ];_bec +=_aa [_abf ]+_gda *8*_gfd [_abf ];};_dde +=_gce ;_dgbe +=_gce *_gfe ;
};_fbc [_ee ]=_dde ;if _dde > 0{(*_fdf )[_ee ]=_eae .Point {X :float32 (_bec )/float32 (_dde ),Y :float32 (_dgbe )/float32 (_dde )};}else {(*_fdf )[_ee ]=_eae .Point {X :float32 (_egbd .Width )/float32 (2),Y :float32 (_egbd .Height )/float32 (2)};};};if _db =_dgb .CentroidPoints .Add (_fdf );
_db !=nil {return _c .Wrap (_db ,_dfb ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");};var (_bda ,_fca ,_gcd int ;_bdf float64 ;_fdc ,_aaf ,_afae ,_cde float32 ;_dagd ,_dac _eae .Point ;_dbb bool ;_aef *similarTemplatesFinder ;
_agg int ;_fda *_eae .Bitmap ;_efg *_ff .Rectangle ;_gb *_eae .Bitmaps ;);for _agg ,_gcf =range _cca .Values {_fca =_fbc [_agg ];if _fdc ,_aaf ,_db =_fdf .GetGeometry (_agg );_db !=nil {return _c .Wrap (_db ,_dfb ,"\u0070t\u0061\u0020\u002d\u0020\u0069");
};_dbb =false ;_egd :=len (_dgb .UndilatedTemplates .Values );_aef =_fad (_dgb ,_gcf );for _fge :=_aef .Next ();_fge > -1;{if _fda ,_db =_dgb .UndilatedTemplates .GetBitmap (_fge );_db !=nil {return _c .Wrap (_db ,_dfb ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");
};if _gcd ,_db =_bbf .GetInt (_fge );_db !=nil {_ea .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_db );};if _afae ,_cde ,_db =_dgb .CentroidPointsTemplates .GetGeometry (_fge );
_db !=nil {return _c .Wrap (_db ,_dfb ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _dgb .Settings .WeightFactor > 0.0{if _bda ,_db =_dgb .TemplateAreas .Get (_fge );_db !=nil {_ea .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_db );
};_bdf =_dgb .Settings .Thresh +(1.0-_dgb .Settings .Thresh )*_dgb .Settings .WeightFactor *float64 (_gcd )/float64 (_bda );}else {_bdf =_dgb .Settings .Thresh ;};_gge ,_gcee :=_eae .CorrelationScoreThresholded (_gcf ,_fda ,_fca ,_gcd ,_dagd .X -_dac .X ,_dagd .Y -_dac .Y ,MaxDiffWidth ,MaxDiffHeight ,_gfd ,_aab [_agg ],float32 (_bdf ));
if _gcee !=nil {return _c .Wrap (_gcee ,_dfb ,"");};if _efbg {var (_gcff ,_fac float64 ;_dbd ,_ffg int ;);_gcff ,_gcee =_eae .CorrelationScore (_gcf ,_fda ,_fca ,_gcd ,_fdc -_afae ,_aaf -_cde ,MaxDiffWidth ,MaxDiffHeight ,_gfd );if _gcee !=nil {return _c .Wrap (_gcee ,_dfb ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_fac ,_gcee =_eae .CorrelationScoreSimple (_gcf ,_fda ,_fca ,_gcd ,_fdc -_afae ,_aaf -_cde ,MaxDiffWidth ,MaxDiffHeight ,_gfd );if _gcee !=nil {return _c .Wrap (_gcee ,_dfb ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_dbd =int (_e .Sqrt (_gcff *float64 (_fca )*float64 (_gcd )));_ffg =int (_e .Sqrt (_fac *float64 (_fca )*float64 (_gcd )));if (_gcff >=_bdf )!=(_fac >=_bdf ){return _c .Errorf (_dfb ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_dbd ,_gcff ,_gcff >=_bdf ,_ffg ,_fac ,_fac >=_bdf ,_gcff -_fac );
};if _gcff >=_bdf !=_gge {return _c .Errorf (_dfb ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_gcff ,_gcff *float64 (_fca )*float64 (_gcd ),_dbd ,_bdf ,float32 (_bdf )*float32 (_fca )*float32 (_gcd ),_gge );
};};if _gge {_dbb =true ;if _gcee =_dgb .ClassIDs .Add (_fge );_gcee !=nil {return _c .Wrap (_gcee ,_dfb ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _gcee =_dgb .ComponentPageNumbers .Add (_fea );_gcee !=nil {return _c .Wrap (_gcee ,_dfb ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _dgb .Settings .KeepClassInstances {if _aca ,_gcee =_bbe .GetBitmap (_agg );_gcee !=nil {return _c .Wrap (_gcee ,_dfb ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _gb ,_gcee =_dgb .ClassInstances .GetBitmaps (_fge );
_gcee !=nil {return _c .Wrap (_gcee ,_dfb ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_gb .AddBitmap (_aca );if _efg ,_gcee =_ac .Get (_agg );_gcee !=nil {return _c .Wrap (_gcee ,_dfb ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_gb .AddBox (_efg );};break ;};};if !_dbb {if _db =_dgb .ClassIDs .Add (_egd );_db !=nil {return _c .Wrap (_db ,_dfb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _db =_dgb .ComponentPageNumbers .Add (_fea );_db !=nil {return _c .Wrap (_db ,_dfb ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_gb =&_eae .Bitmaps {};if _aca ,_db =_bbe .GetBitmap (_agg );_db !=nil {return _c .Wrap (_db ,_dfb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_gb .AddBitmap (_aca );_aafe ,_eace :=_aca .Width ,_aca .Height ;_gdc :=uint64 (_eace )*uint64 (_aafe );_dgb .TemplatesSize .Add (_gdc ,_egd );
if _efg ,_db =_ac .Get (_agg );_db !=nil {return _c .Wrap (_db ,_dfb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_gb .AddBox (_efg );_dgb .ClassInstances .AddBitmaps (_gb );_dgb .CentroidPointsTemplates .AddPoint (_fdc ,_aaf );_dgb .FgTemplates .AddInt (_fca );
_dgb .UndilatedTemplates .AddBitmap (_aca );_bda =(_gcf .Width -2*JbAddedPixels )*(_gcf .Height -2*JbAddedPixels );if _db =_dgb .TemplateAreas .Add (_bda );_db !=nil {return _c .Wrap (_db ,_dfb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};};};_dgb .NumberOfClasses =len (_dgb .UndilatedTemplates .Values );
return nil ;};const (RankHaus Method =iota ;Correlation ;);