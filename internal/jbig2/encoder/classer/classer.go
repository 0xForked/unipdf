//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (_gb "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_ge "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "image";_g "math";
);func (_ed *Classer )ComputeLLCorners ()(_ga error ){const _fa ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";if _ed .PtaUL ==nil {return _b .Error (_fa ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};_bb :=len (*_ed .PtaUL );_ed .PtaLL =&_ge .Points {};var (_eb ,_fc float32 ;_ggc ,_ab int ;_c *_ge .Bitmap ;);for _fga :=0;_fga < _bb ;_fga ++{_eb ,_fc ,_ga =_ed .PtaUL .GetGeometry (_fga );if _ga !=nil {_gb .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ga );
return _b .Wrap (_ga ,_fa ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_ggc ,_ga =_ed .ClassIDs .Get (_fga );if _ga !=nil {_gb .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_ga );
return _b .Wrap (_ga ,_fa ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_c ,_ga =_ed .UndilatedTemplates .GetBitmap (_ggc );if _ga !=nil {_gb .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_ga );
return _b .Wrap (_ga ,_fa ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_ab =_c .Height ;_ed .PtaLL .AddPoint (_eb ,_fc +float32 (_ab ));};return nil ;};type Method int ;func (_gag *Classer )verifyMethod (_bc Method )error {if _bc !=RankHaus &&_bc !=Correlation {return _b .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};func (_a *Classer )AddPage (inputPage *_ge .Bitmap ,pageNumber int ,method Method )(_ff error ){const _deg ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";_a .Widths [pageNumber ]=inputPage .Width ;_a .Heights [pageNumber ]=inputPage .Height ;
if _ff =_a .verifyMethod (method );_ff !=nil {return _b .Wrap (_ff ,_deg ,"");};_fe ,_gg ,_ff :=inputPage .GetComponents (_a .Settings .Components ,_a .Settings .MaxCompWidth ,_a .Settings .MaxCompHeight );if _ff !=nil {return _b .Wrap (_ff ,_deg ,"");
};_gb .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_fe );if _ff =_a .addPageComponents (inputPage ,_gg ,_fe ,pageNumber ,method );_ff !=nil {return _b .Wrap (_ff ,_deg ,"");};return nil ;};type Classer struct{BaseIndex int ;
Settings Settings ;ComponentsNumber *_d .IntSlice ;TemplateAreas *_d .IntSlice ;Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_ge .BitmapsArray ;UndilatedTemplates *_ge .Bitmaps ;DilatedTemplates *_ge .Bitmaps ;TemplatesSize _d .IntsMap ;
FgTemplates *_d .NumSlice ;CentroidPoints *_ge .Points ;CentroidPointsTemplates *_ge .Points ;ClassIDs *_d .IntSlice ;ComponentPageNumbers *_d .IntSlice ;PtaUL *_ge .Points ;PtaLL *_ge .Points ;};func (_ea *Classer )addPageComponents (_bf *_ge .Bitmap ,_ce *_ge .Boxes ,_gd *_ge .Bitmaps ,_dg int ,_gga Method )error {const _bg ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _bf ==nil {return _b .Error (_bg ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _ce ==nil ||_gd ==nil ||len (*_ce )==0{_gb .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_bf );
return nil ;};var _eg error ;switch _gga {case RankHaus :_eg =_ea .classifyRankHaus (_ce ,_gd ,_dg );case Correlation :_eg =_ea .classifyCorrelation (_ce ,_gd ,_dg );default:_gb .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_gga );
return _b .Error (_bg ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _eg !=nil {return _b .Wrap (_eg ,_bg ,"");};if _eg =_ea .getULCorners (_bf ,_ce );_eg !=nil {return _b .Wrap (_eg ,_bg ,"");
};_ef :=len (*_ce );_ea .BaseIndex +=_ef ;if _eg =_ea .ComponentsNumber .Add (_ef );_eg !=nil {return _b .Wrap (_eg ,_bg ,"");};return nil ;};func (_gbff Settings )Validate ()error {const _dcg ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";
if _gbff .Thresh < 0.4||_gbff .Thresh > 0.98{return _b .Error (_dcg ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _gbff .WeightFactor < 0.0||_gbff .WeightFactor > 1.0{return _b .Error (_dcg ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _gbff .RankHaus < 0.5||_gbff .RankHaus > 1.0{return _b .Error (_dcg ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _gbff .SizeHaus < 1||_gbff .SizeHaus > 10{return _b .Error (_dcg ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _gbff .Components {case _ge .ComponentConn ,_ge .ComponentCharacters ,_ge .ComponentWords :default:return _b .Error (_dcg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};func DefaultSettings ()Settings {_bee :=&Settings {};_bee .SetDefault ();return *_bee };func (_aef *Settings )SetDefault (){if _aef .MaxCompWidth ==0{switch _aef .Components {case _ge .ComponentConn :_aef .MaxCompWidth =MaxConnCompWidth ;
case _ge .ComponentCharacters :_aef .MaxCompWidth =MaxCharCompWidth ;case _ge .ComponentWords :_aef .MaxCompWidth =MaxWordCompWidth ;};};if _aef .MaxCompHeight ==0{_aef .MaxCompHeight =MaxCompHeight ;};if _aef .Thresh ==0.0{_aef .Thresh =0.9;};if _aef .WeightFactor ==0.0{_aef .WeightFactor =0.75;
};if _aef .RankHaus ==0.0{_aef .RankHaus =0.97;};if _aef .SizeHaus ==0{_aef .SizeHaus =2;};};func (_cfgg *Classer )classifyCorrelation (_ad *_ge .Boxes ,_ddd *_ge .Bitmaps ,_aed int )error {const _geec ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";
if _ad ==nil {return _b .Error (_geec ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _ddd ==nil {return _b .Error (_geec ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_fgg :=len (_ddd .Values );if _fgg ==0{_gb .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_gdg ,_cfd *_ge .Bitmap ;_deb error ;);_efb :=&_ge .Bitmaps {Values :make ([]*_ge .Bitmap ,_fgg )};for _ege ,_adb :=range _ddd .Values {_cfd ,_deb =_adb .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);
if _deb !=nil {return _b .Wrap (_deb ,_geec ,"");};_efb .Values [_ege ]=_cfd ;};_fac :=_cfgg .FgTemplates ;_efgb :=_ge .MakePixelSumTab8 ();_aafa :=_ge .MakePixelCentroidTab8 ();_cge :=make ([]int ,_fgg );_gbb :=make ([][]int ,_fgg );_ffac :=_ge .Points (make ([]_ge .Point ,_fgg ));
_fae :=&_ffac ;var (_ceef ,_gbg int ;_age ,_cbe ,_af int ;_fcf ,_dc int ;_ec byte ;);for _gfc ,_ca :=range _efb .Values {_gbb [_gfc ]=make ([]int ,_ca .Height );_ceef =0;_gbg =0;_cbe =(_ca .Height -1)*_ca .RowStride ;_age =0;for _dc =_ca .Height -1;_dc >=0;
_dc ,_cbe =_dc -1,_cbe -_ca .RowStride {_gbb [_gfc ][_dc ]=_age ;_af =0;for _fcf =0;_fcf < _ca .RowStride ;_fcf ++{_ec =_ca .Data [_cbe +_fcf ];_af +=_efgb [_ec ];_ceef +=_aafa [_ec ]+_fcf *8*_efgb [_ec ];};_age +=_af ;_gbg +=_af *_dc ;};_cge [_gfc ]=_age ;
if _age > 0{(*_fae )[_gfc ]=_ge .Point {X :float32 (_ceef )/float32 (_age ),Y :float32 (_gbg )/float32 (_age )};}else {(*_fae )[_gfc ]=_ge .Point {X :float32 (_ca .Width )/float32 (2),Y :float32 (_ca .Height )/float32 (2)};};};if _deb =_cfgg .CentroidPoints .Add (_fae );
_deb !=nil {return _b .Wrap (_deb ,_geec ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");};var (_cbc ,_ebe ,_dge int ;_cfa float64 ;_cfgc ,_fcef ,_gbe ,_bde float32 ;_ede ,_dea _ge .Point ;_agbd bool ;_eed *similarTemplatesFinder ;
_fgf int ;_ced *_ge .Bitmap ;_ffba *_f .Rectangle ;_eab *_ge .Bitmaps ;);for _fgf ,_cfd =range _efb .Values {_ebe =_cge [_fgf ];if _cfgc ,_fcef ,_deb =_fae .GetGeometry (_fgf );_deb !=nil {return _b .Wrap (_deb ,_geec ,"\u0070t\u0061\u0020\u002d\u0020\u0069");
};_agbd =false ;_adf :=len (_cfgg .UndilatedTemplates .Values );_eed =_ceeg (_cfgg ,_cfd );for _dgg :=_eed .Next ();_dgg > -1;{if _ced ,_deb =_cfgg .UndilatedTemplates .GetBitmap (_dgg );_deb !=nil {return _b .Wrap (_deb ,_geec ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");
};if _dge ,_deb =_fac .GetInt (_dgg );_deb !=nil {_gb .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_deb );};if _gbe ,_bde ,_deb =_cfgg .CentroidPointsTemplates .GetGeometry (_dgg );
_deb !=nil {return _b .Wrap (_deb ,_geec ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _cfgg .Settings .WeightFactor > 0.0{if _cbc ,_deb =_cfgg .TemplateAreas .Get (_dgg );_deb !=nil {_gb .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_deb );
};_cfa =_cfgg .Settings .Thresh +(1.0-_cfgg .Settings .Thresh )*_cfgg .Settings .WeightFactor *float64 (_dge )/float64 (_cbc );}else {_cfa =_cfgg .Settings .Thresh ;};_cgc ,_bff :=_ge .CorrelationScoreThresholded (_cfd ,_ced ,_ebe ,_dge ,_ede .X -_dea .X ,_ede .Y -_dea .Y ,MaxDiffWidth ,MaxDiffHeight ,_efgb ,_gbb [_fgf ],float32 (_cfa ));
if _bff !=nil {return _b .Wrap (_bff ,_geec ,"");};if _fce {var (_bbf ,_gfcb float64 ;_dab ,_afc int ;);_bbf ,_bff =_ge .CorrelationScore (_cfd ,_ced ,_ebe ,_dge ,_cfgc -_gbe ,_fcef -_bde ,MaxDiffWidth ,MaxDiffHeight ,_efgb );if _bff !=nil {return _b .Wrap (_bff ,_geec ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_gfcb ,_bff =_ge .CorrelationScoreSimple (_cfd ,_ced ,_ebe ,_dge ,_cfgc -_gbe ,_fcef -_bde ,MaxDiffWidth ,MaxDiffHeight ,_efgb );if _bff !=nil {return _b .Wrap (_bff ,_geec ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_dab =int (_g .Sqrt (_bbf *float64 (_ebe )*float64 (_dge )));_afc =int (_g .Sqrt (_gfcb *float64 (_ebe )*float64 (_dge )));if (_bbf >=_cfa )!=(_gfcb >=_cfa ){return _b .Errorf (_geec ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_dab ,_bbf ,_bbf >=_cfa ,_afc ,_gfcb ,_gfcb >=_cfa ,_bbf -_gfcb );
};if _bbf >=_cfa !=_cgc {return _b .Errorf (_geec ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_bbf ,_bbf *float64 (_ebe )*float64 (_dge ),_dab ,_cfa ,float32 (_cfa )*float32 (_ebe )*float32 (_dge ),_cgc );
};};if _cgc {_agbd =true ;if _bff =_cfgg .ClassIDs .Add (_dgg );_bff !=nil {return _b .Wrap (_bff ,_geec ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _bff =_cfgg .ComponentPageNumbers .Add (_aed );_bff !=nil {return _b .Wrap (_bff ,_geec ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _cfgg .Settings .KeepClassInstances {if _gdg ,_bff =_ddd .GetBitmap (_fgf );_bff !=nil {return _b .Wrap (_bff ,_geec ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _eab ,_bff =_cfgg .ClassInstances .GetBitmaps (_dgg );
_bff !=nil {return _b .Wrap (_bff ,_geec ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_eab .AddBitmap (_gdg );if _ffba ,_bff =_ad .Get (_fgf );_bff !=nil {return _b .Wrap (_bff ,_geec ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_eab .AddBox (_ffba );};break ;};};if !_agbd {if _deb =_cfgg .ClassIDs .Add (_adf );_deb !=nil {return _b .Wrap (_deb ,_geec ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _deb =_cfgg .ComponentPageNumbers .Add (_aed );_deb !=nil {return _b .Wrap (_deb ,_geec ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_eab =&_ge .Bitmaps {};if _gdg ,_deb =_ddd .GetBitmap (_fgf );_deb !=nil {return _b .Wrap (_deb ,_geec ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_eab .AddBitmap (_gdg );_gdd ,_gac :=_gdg .Width ,_gdg .Height ;_ace :=uint64 (_gac )*uint64 (_gdd );_cfgg .TemplatesSize .Add (_ace ,_adf );
if _ffba ,_deb =_ad .Get (_fgf );_deb !=nil {return _b .Wrap (_deb ,_geec ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_eab .AddBox (_ffba );_cfgg .ClassInstances .AddBitmaps (_eab );_cfgg .CentroidPointsTemplates .AddPoint (_cfgc ,_fcef );_cfgg .FgTemplates .AddInt (_ebe );
_cfgg .UndilatedTemplates .AddBitmap (_gdg );_cbc =(_cfd .Width -2*JbAddedPixels )*(_cfd .Height -2*JbAddedPixels );if _deb =_cfgg .TemplateAreas .Add (_cbc );_deb !=nil {return _b .Wrap (_deb ,_geec ,"\u0021\u0066\u006f\u0075\u006e\u0064");};};};_cfgg .NumberOfClasses =len (_cfgg .UndilatedTemplates .Values );
return nil ;};func Init (settings Settings )(*Classer ,error ){const _fg ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";_de :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_d .IntsMap {},TemplateAreas :&_d .IntSlice {},ComponentPageNumbers :&_d .IntSlice {},ClassIDs :&_d .IntSlice {},ComponentsNumber :&_d .IntSlice {},CentroidPoints :&_ge .Points {},CentroidPointsTemplates :&_ge .Points {},UndilatedTemplates :&_ge .Bitmaps {},DilatedTemplates :&_ge .Bitmaps {},ClassInstances :&_ge .BitmapsArray {},FgTemplates :&_d .NumSlice {}};
if _gc :=_de .Settings .Validate ();_gc !=nil {return nil ,_b .Wrap (_gc ,_fg ,"");};return _de ,nil ;};func (_bfa *similarTemplatesFinder )Next ()int {var (_fea ,_cd ,_dbg ,_eedd int ;_ead bool ;_abae *_ge .Bitmap ;_bfeb error ;);for {if _bfa .Index >=25{return -1;
};_cd =_bfa .Width +TwoByTwoWalk [2*_bfa .Index ];_fea =_bfa .Height +TwoByTwoWalk [2*_bfa .Index +1];if _fea < 1||_cd < 1{_bfa .Index ++;continue ;};if len (_bfa .CurrentNumbers )==0{_bfa .CurrentNumbers ,_ead =_bfa .Classer .TemplatesSize .GetSlice (uint64 (_cd )*uint64 (_fea ));
if !_ead {_bfa .Index ++;continue ;};_bfa .N =0;};_dbg =len (_bfa .CurrentNumbers );for ;_bfa .N < _dbg ;_bfa .N ++{_eedd =_bfa .CurrentNumbers [_bfa .N ];_abae ,_bfeb =_bfa .Classer .DilatedTemplates .GetBitmap (_eedd );if _bfeb !=nil {_gb .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _abae .Width -2*JbAddedPixels ==_cd &&_abae .Height -2*JbAddedPixels ==_fea {return _eedd ;};};_bfa .Index ++;_bfa .CurrentNumbers =nil ;};};var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};
func _ac (_be *_ge .Bitmap ,_ffb ,_cf ,_bgga ,_egd int ,_acf *_ge .Bitmap )(_efd _f .Point ,_egc error ){const _dgf ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";if _be ==nil {return _efd ,_b .Error (_dgf ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};if _acf ==nil {return _efd ,_b .Error (_dgf ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");};_aeg ,_dega :=_acf .Width ,_acf .Height ;_acd ,_ffg :=_ffb -_bgga -JbAddedPixels ,_cf -_egd -JbAddedPixels ;
_gb .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_ffb ,_cf ,_aeg ,_dega ,_acd ,_ffg );
_cee ,_egc :=_ge .Rect (_acd ,_ffg ,_aeg ,_dega );if _egc !=nil {return _efd ,_b .Wrap (_egc ,_dgf ,"");};_bbg ,_ ,_egc :=_be .ClipRectangle (_cee );if _egc !=nil {_gb .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_cee );
return _efd ,_b .Wrap (_egc ,_dgf ,"");};_fd :=_ge .New (_bbg .Width ,_bbg .Height );_fgc :=_g .MaxInt32 ;var _gagg ,_aaf ,_ffa ,_efg ,_cfg int ;for _gagg =-1;_gagg <=1;_gagg ++{for _aaf =-1;_aaf <=1;_aaf ++{if _ ,_egc =_ge .Copy (_fd ,_bbg );_egc !=nil {return _efd ,_b .Wrap (_egc ,_dgf ,"");
};if _egc =_fd .RasterOperation (_aaf ,_gagg ,_aeg ,_dega ,_ge .PixSrcXorDst ,_acf ,0,0);_egc !=nil {return _efd ,_b .Wrap (_egc ,_dgf ,"");};_ffa =_fd .CountPixels ();if _ffa < _fgc {_efg =_aaf ;_cfg =_gagg ;_fgc =_ffa ;};};};_efd .X =_efg ;_efd .Y =_cfg ;
return _efd ,nil ;};type similarTemplatesFinder struct{Classer *Classer ;Width int ;Height int ;Index int ;CurrentNumbers []int ;N int ;};func (_aea *Classer )classifyRankHouseNonOne (_ada *_ge .Boxes ,_aca ,_gbd ,_ba *_ge .Bitmaps ,_bdf *_ge .Points ,_acfg *_d .NumSlice ,_eaf int )(_dbbg error ){const _gdgb ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_fag ,_efa ,_daa ,_gec float32 ;_ffd ,_bcca ,_faf int ;_dbf ,_cca ,_fcfg ,_ffdc ,_cga *_ge .Bitmap ;_fbe ,_gbf bool ;);_df :=_ge .MakePixelSumTab8 ();for _bga :=0;_bga < len (_aca .Values );_bga ++{if _cca ,_dbbg =_gbd .GetBitmap (_bga );_dbbg !=nil {return _b .Wrap (_dbbg ,_gdgb ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};if _ffd ,_dbbg =_acfg .GetInt (_bga );_dbbg !=nil {_gb .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_bga ,_dbbg );
};if _fcfg ,_dbbg =_ba .GetBitmap (_bga );_dbbg !=nil {return _b .Wrap (_dbbg ,_gdgb ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _fag ,_efa ,_dbbg =_bdf .GetGeometry (_bga );_dbbg !=nil {return _b .Wrapf (_dbbg ,_gdgb ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_baf :=len (_aea .UndilatedTemplates .Values );_fbe =false ;_aced :=_ceeg (_aea ,_cca );for _faf =_aced .Next ();_faf > -1;{if _ffdc ,_dbbg =_aea .UndilatedTemplates .GetBitmap (_faf );_dbbg !=nil {return _b .Wrap (_dbbg ,_gdgb ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _bcca ,_dbbg =_aea .FgTemplates .GetInt (_faf );_dbbg !=nil {_gb .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_faf ,_dbbg );
};if _cga ,_dbbg =_aea .DilatedTemplates .GetBitmap (_faf );_dbbg !=nil {return _b .Wrap (_dbbg ,_gdgb ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _daa ,_gec ,_dbbg =_aea .CentroidPointsTemplates .GetGeometry (_faf );
_dbbg !=nil {return _b .Wrap (_dbbg ,_gdgb ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_gbf ,_dbbg =_ge .RankHausTest (_cca ,_fcfg ,_ffdc ,_cga ,_fag -_daa ,_efa -_gec ,MaxDiffWidth ,MaxDiffHeight ,_ffd ,_bcca ,float32 (_aea .Settings .RankHaus ),_df );
if _dbbg !=nil {return _b .Wrap (_dbbg ,_gdgb ,"");};if _gbf {_fbe =true ;if _dbbg =_aea .ClassIDs .Add (_faf );_dbbg !=nil {return _b .Wrap (_dbbg ,_gdgb ,"");};if _dbbg =_aea .ComponentPageNumbers .Add (_eaf );_dbbg !=nil {return _b .Wrap (_dbbg ,_gdgb ,"");
};if _aea .Settings .KeepClassInstances {_geef ,_aaa :=_aea .ClassInstances .GetBitmaps (_faf );if _aaa !=nil {return _b .Wrap (_aaa ,_gdgb ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");
};if _dbf ,_aaa =_aca .GetBitmap (_bga );_aaa !=nil {return _b .Wrap (_aaa ,_gdgb ,"\u0070i\u0078\u0061\u005b\u0069\u005d");};_geef .Values =append (_geef .Values ,_dbf );_bfb ,_aaa :=_ada .Get (_bga );if _aaa !=nil {return _b .Wrap (_aaa ,_gdgb ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};_geef .Boxes =append (_geef .Boxes ,_bfb );};break ;};};if !_fbe {if _dbbg =_aea .ClassIDs .Add (_baf );_dbbg !=nil {return _b .Wrap (_dbbg ,_gdgb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _dbbg =_aea .ComponentPageNumbers .Add (_eaf );_dbbg !=nil {return _b .Wrap (_dbbg ,_gdgb ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_def :=&_ge .Bitmaps {};_dbf =_aca .Values [_bga ];_def .AddBitmap (_dbf );_dba ,_gbede :=_dbf .Width ,_dbf .Height ;_aea .TemplatesSize .Add (uint64 (_dba )*uint64 (_gbede ),_baf );_dca ,_fcc :=_ada .Get (_bga );if _fcc !=nil {return _b .Wrap (_fcc ,_gdgb ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_def .AddBox (_dca );_aea .ClassInstances .AddBitmaps (_def );_aea .CentroidPointsTemplates .AddPoint (_fag ,_efa );_aea .UndilatedTemplates .AddBitmap (_cca );_aea .DilatedTemplates .AddBitmap (_fcfg );_aea .FgTemplates .AddInt (_ffd );};};_aea .NumberOfClasses =len (_aea .UndilatedTemplates .Values );
return nil ;};func (_bcg *Classer )classifyRankHaus (_fbb *_ge .Boxes ,_dgb *_ge .Bitmaps ,_agf int )error {const _cfb ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";if _fbb ==nil {return _b .Error (_cfb ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _dgb ==nil {return _b .Error (_cfb ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_cba :=len (_dgb .Values );if _cba ==0{return _b .Error (_cfb ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");
};_gfd :=_dgb .CountPixels ();_dcc :=_bcg .Settings .SizeHaus ;_cgg :=_ge .SelCreateBrick (_dcc ,_dcc ,_dcc /2,_dcc /2,_ge .SelHit );_eae :=&_ge .Bitmaps {Values :make ([]*_ge .Bitmap ,_cba )};_aba :=&_ge .Bitmaps {Values :make ([]*_ge .Bitmap ,_cba )};
var (_bcb ,_ggba ,_edba *_ge .Bitmap ;_gcg error ;);for _ddc :=0;_ddc < _cba ;_ddc ++{_bcb ,_gcg =_dgb .GetBitmap (_ddc );if _gcg !=nil {return _b .Wrap (_gcg ,_cfb ,"");};_ggba ,_gcg =_bcb .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);
if _gcg !=nil {return _b .Wrap (_gcg ,_cfb ,"");};_edba ,_gcg =_ge .Dilate (nil ,_ggba ,_cgg );if _gcg !=nil {return _b .Wrap (_gcg ,_cfb ,"");};_eae .Values [_cba ]=_ggba ;_aba .Values [_cba ]=_edba ;};_cgge ,_gcg :=_ge .Centroids (_eae .Values );if _gcg !=nil {return _b .Wrap (_gcg ,_cfb ,"");
};if _gcg =_cgge .Add (_bcg .CentroidPoints );_gcg !=nil {_gb .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");};if _bcg .Settings .RankHaus ==1.0{_gcg =_bcg .classifyRankHouseOne (_fbb ,_dgb ,_eae ,_aba ,_cgge ,_agf );
}else {_gcg =_bcg .classifyRankHouseNonOne (_fbb ,_dgb ,_eae ,_aba ,_cgge ,_gfd ,_agf );};if _gcg !=nil {return _b .Wrap (_gcg ,_cfb ,"");};return nil ;};const (MaxConnCompWidth =350;MaxCharCompWidth =350;MaxWordCompWidth =1000;MaxCompHeight =120;);const JbAddedPixels =6;
const (MaxDiffWidth =2;MaxDiffHeight =2;);func _ceeg (_abc *Classer ,_dbd *_ge .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_dbd .Width ,Height :_dbd .Height ,Classer :_abc };};const (RankHaus Method =iota ;Correlation ;);type Settings struct{MaxCompWidth int ;
MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;WeightFactor float64 ;KeepClassInstances bool ;Components _ge .Component ;Method Method ;};func (_cbf *Classer )classifyRankHouseOne (_gbbd *_ge .Boxes ,_cbb ,_gcgc ,_ceg *_ge .Bitmaps ,_cag *_ge .Points ,_db int )(_aga error ){const _ffgg ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_bea ,_gfa ,_bgb ,_dbb float32 ;_cbd int ;_eac ,_cc ,_aece ,_eba ,_ebg *_ge .Bitmap ;_ggac ,_beb bool ;);for _egb :=0;_egb < len (_cbb .Values );_egb ++{_cc =_gcgc .Values [_egb ];_aece =_ceg .Values [_egb ];_bea ,_gfa ,_aga =_cag .GetGeometry (_egb );
if _aga !=nil {return _b .Wrapf (_aga ,_ffgg ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_eda :=len (_cbf .UndilatedTemplates .Values );_ggac =false ;_gbed :=_ceeg (_cbf ,_cc );for _cbd =_gbed .Next ();_cbd > -1;
{_eba ,_aga =_cbf .UndilatedTemplates .GetBitmap (_cbd );if _aga !=nil {return _b .Wrap (_aga ,_ffgg ,"\u0062\u006d\u0033");};_ebg ,_aga =_cbf .DilatedTemplates .GetBitmap (_cbd );if _aga !=nil {return _b .Wrap (_aga ,_ffgg ,"\u0062\u006d\u0034");};_bgb ,_dbb ,_aga =_cbf .CentroidPointsTemplates .GetGeometry (_cbd );
if _aga !=nil {return _b .Wrap (_aga ,_ffgg ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_beb ,_aga =_ge .HausTest (_cc ,_aece ,_eba ,_ebg ,_bea -_bgb ,_gfa -_dbb ,MaxDiffWidth ,MaxDiffHeight );
if _aga !=nil {return _b .Wrap (_aga ,_ffgg ,"");};if _beb {_ggac =true ;if _aga =_cbf .ClassIDs .Add (_cbd );_aga !=nil {return _b .Wrap (_aga ,_ffgg ,"");};if _aga =_cbf .ComponentPageNumbers .Add (_db );_aga !=nil {return _b .Wrap (_aga ,_ffgg ,"");
};if _cbf .Settings .KeepClassInstances {_fef ,_bfe :=_cbf .ClassInstances .GetBitmaps (_cbd );if _bfe !=nil {return _b .Wrap (_bfe ,_ffgg ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_eac ,_bfe =_cbb .GetBitmap (_egb );if _bfe !=nil {return _b .Wrap (_bfe ,_ffgg ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");
};_fef .AddBitmap (_eac );_gff ,_bfe :=_gbbd .Get (_egb );if _bfe !=nil {return _b .Wrap (_bfe ,_ffgg ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_fef .AddBox (_gff );};break ;};};if !_ggac {if _aga =_cbf .ClassIDs .Add (_eda );_aga !=nil {return _b .Wrap (_aga ,_ffgg ,"");
};if _aga =_cbf .ComponentPageNumbers .Add (_db );_aga !=nil {return _b .Wrap (_aga ,_ffgg ,"");};_cfc :=&_ge .Bitmaps {};_eac ,_aga =_cbb .GetBitmap (_egb );if _aga !=nil {return _b .Wrap (_aga ,_ffgg ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_cfc .Values =append (_cfc .Values ,_eac );
_fgcd ,_gda :=_eac .Width ,_eac .Height ;_cbf .TemplatesSize .Add (uint64 (_gda )*uint64 (_fgcd ),_eda );_ded ,_bcc :=_gbbd .Get (_egb );if _bcc !=nil {return _b .Wrap (_bcc ,_ffgg ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_cfc .AddBox (_ded );_cbf .ClassInstances .AddBitmaps (_cfc );
_cbf .CentroidPointsTemplates .AddPoint (_bea ,_gfa );_cbf .UndilatedTemplates .AddBitmap (_cc );_cbf .DilatedTemplates .AddBitmap (_aece );};};return nil ;};func (_fee *Classer )getULCorners (_aa *_ge .Bitmap ,_fab *_ge .Boxes )error {const _ag ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _aa ==nil {return _b .Error (_ag ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fab ==nil {return _b .Error (_ag ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _fee .PtaUL ==nil {_fee .PtaUL =&_ge .Points {};
};_edb :=len (*_fab );var (_edc ,_gee ,_cb ,_ae int ;_bd ,_ee ,_gf ,_fcb float32 ;_ggb error ;_aec *_f .Rectangle ;_fge *_ge .Bitmap ;_dec _f .Point ;);for _eee :=0;_eee < _edb ;_eee ++{_edc =_fee .BaseIndex +_eee ;if _bd ,_ee ,_ggb =_fee .CentroidPoints .GetGeometry (_edc );
_ggb !=nil {return _b .Wrap (_ggb ,_ag ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");};if _gee ,_ggb =_fee .ClassIDs .Get (_edc );_ggb !=nil {return _b .Wrap (_ggb ,_ag ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");
};if _gf ,_fcb ,_ggb =_fee .CentroidPointsTemplates .GetGeometry (_gee );_ggb !=nil {return _b .Wrap (_ggb ,_ag ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_bgg :=_gf -_bd ;
_da :=_fcb -_ee ;if _bgg >=0{_cb =int (_bgg +0.5);}else {_cb =int (_bgg -0.5);};if _da >=0{_ae =int (_da +0.5);}else {_ae =int (_da -0.5);};if _aec ,_ggb =_fab .Get (_eee );_ggb !=nil {return _b .Wrap (_ggb ,_ag ,"");};_cg ,_fb :=_aec .Min .X ,_aec .Min .Y ;
_fge ,_ggb =_fee .UndilatedTemplates .GetBitmap (_gee );if _ggb !=nil {return _b .Wrap (_ggb ,_ag ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_dec ,_ggb =_ac (_aa ,_cg ,_fb ,_cb ,_ae ,_fge );if _ggb !=nil {return _b .Wrap (_ggb ,_ag ,"");};_fee .PtaUL .AddPoint (float32 (_cg -_cb +_dec .X ),float32 (_fb -_ae +_dec .Y ));};return nil ;};var _fce bool ;