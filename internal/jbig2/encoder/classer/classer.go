//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (_aa "github.com/unidoc/unipdf/v3/common";_db "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_f "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_dg "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";_a "math";
);var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};const (MaxDiffWidth =2;MaxDiffHeight =2;);func (_dc *Classer )AddPage (inputPage *_f .Bitmap ,pageNumber int ,method Method )(_fc error ){const _cc ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";
_dc .Widths [pageNumber ]=inputPage .Width ;_dc .Heights [pageNumber ]=inputPage .Height ;if _fc =_dc .verifyMethod (method );_fc !=nil {return _dg .Wrap (_fc ,_cc ,"");};_b ,_ga ,_fc :=inputPage .GetComponents (_dc .Settings .Components ,_dc .Settings .MaxCompWidth ,_dc .Settings .MaxCompHeight );
if _fc !=nil {return _dg .Wrap (_fc ,_cc ,"");};_aa .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_b );if _fc =_dc .addPageComponents (inputPage ,_ga ,_b ,pageNumber ,method );_fc !=nil {return _dg .Wrap (_fc ,_cc ,"");
};return nil ;};func _eacg (_cfd *Classer ,_agg *_f .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_agg .Width ,Height :_agg .Height ,Classer :_cfd };};func (_ag *Classer )verifyMethod (_geb Method )error {if _geb !=RankHaus &&_geb !=Correlation {return _dg .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};func (_bad *Settings )SetDefault (){if _bad .MaxCompWidth ==0{switch _bad .Components {case _f .ComponentConn :_bad .MaxCompWidth =MaxConnCompWidth ;case _f .ComponentCharacters :_bad .MaxCompWidth =MaxCharCompWidth ;case _f .ComponentWords :_bad .MaxCompWidth =MaxWordCompWidth ;
};};if _bad .MaxCompHeight ==0{_bad .MaxCompHeight =MaxCompHeight ;};if _bad .Thresh ==0.0{_bad .Thresh =0.9;};if _bad .WeightFactor ==0.0{_bad .WeightFactor =0.75;};if _bad .RankHaus ==0.0{_bad .RankHaus =0.97;};if _bad .SizeHaus ==0{_bad .SizeHaus =2;
};};func DefaultSettings ()Settings {_eaa :=&Settings {};_eaa .SetDefault ();return *_eaa };func (_cf *Classer )ComputeLLCorners ()(_e error ){const _eb ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _cf .PtaUL ==nil {return _dg .Error (_eb ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};_dd :=len (*_cf .PtaUL );_cf .PtaLL =&_f .Points {};var (_ea ,_ac float32 ;_ba ,_ee int ;
_fa *_f .Bitmap ;);for _eg :=0;_eg < _dd ;_eg ++{_ea ,_ac ,_e =_cf .PtaUL .GetGeometry (_eg );if _e !=nil {_aa .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_e );
return _dg .Wrap (_e ,_eb ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_ba ,_e =_cf .ClassIDs .Get (_eg );if _e !=nil {_aa .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_e );
return _dg .Wrap (_e ,_eb ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_fa ,_e =_cf .UndilatedTemplates .GetBitmap (_ba );if _e !=nil {_aa .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_e );
return _dg .Wrap (_e ,_eb ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_ee =_fa .Height ;_cf .PtaLL .AddPoint (_ea ,_ac +float32 (_ee ));};return nil ;};func _ffe (_bga *_f .Bitmap ,_ad ,_edc ,_be ,_cgb int ,_agc *_f .Bitmap )(_adg _d .Point ,_ebb error ){const _cbg ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";
if _bga ==nil {return _adg ,_dg .Error (_cbg ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};if _agc ==nil {return _adg ,_dg .Error (_cbg ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");
};_dgf ,_dag :=_agc .Width ,_agc .Height ;_fg ,_aba :=_ad -_be -JbAddedPixels ,_edc -_cgb -JbAddedPixels ;_aa .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_ad ,_edc ,_dgf ,_dag ,_fg ,_aba );
_beg ,_ebb :=_f .Rect (_fg ,_aba ,_dgf ,_dag );if _ebb !=nil {return _adg ,_dg .Wrap (_ebb ,_cbg ,"");};_dge ,_ ,_ebb :=_bga .ClipRectangle (_beg );if _ebb !=nil {_aa .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_beg );
return _adg ,_dg .Wrap (_ebb ,_cbg ,"");};_cfba :=_f .New (_dge .Width ,_dge .Height );_gga :=_a .MaxInt32 ;var _baa ,_df ,_aga ,_gc ,_bc int ;for _baa =-1;_baa <=1;_baa ++{for _df =-1;_df <=1;_df ++{if _ ,_ebb =_f .Copy (_cfba ,_dge );_ebb !=nil {return _adg ,_dg .Wrap (_ebb ,_cbg ,"");
};if _ebb =_cfba .RasterOperation (_df ,_baa ,_dgf ,_dag ,_f .PixSrcXorDst ,_agc ,0,0);_ebb !=nil {return _adg ,_dg .Wrap (_ebb ,_cbg ,"");};_aga =_cfba .CountPixels ();if _aga < _gga {_gc =_df ;_bc =_baa ;_gga =_aga ;};};};_adg .X =_gc ;_adg .Y =_bc ;
return _adg ,nil ;};const JbAddedPixels =6;func Init (settings Settings )(*Classer ,error ){const _gg ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";_c :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_db .IntsMap {},TemplateAreas :&_db .IntSlice {},ComponentPageNumbers :&_db .IntSlice {},ClassIDs :&_db .IntSlice {},ComponentsNumber :&_db .IntSlice {},CentroidPoints :&_f .Points {},CentroidPointsTemplates :&_f .Points {},UndilatedTemplates :&_f .Bitmaps {},DilatedTemplates :&_f .Bitmaps {},ClassInstances :&_f .BitmapsArray {},FgTemplates :&_db .NumSlice {}};
if _cg :=_c .Settings .Validate ();_cg !=nil {return nil ,_dg .Wrap (_cg ,_gg ,"");};return _c ,nil ;};func (_fdg *Classer )classifyRankHaus (_bcf *_f .Boxes ,_ggae *_f .Bitmaps ,_fcf int )error {const _feab ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";
if _bcf ==nil {return _dg .Error (_feab ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _ggae ==nil {return _dg .Error (_feab ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_ebf :=len (_ggae .Values );if _ebf ==0{return _dg .Error (_feab ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");};_bda :=_ggae .CountPixels ();_fad :=_fdg .Settings .SizeHaus ;_eece :=_f .SelCreateBrick (_fad ,_fad ,_fad /2,_fad /2,_f .SelHit );
_cab :=&_f .Bitmaps {Values :make ([]*_f .Bitmap ,_ebf )};_ggg :=&_f .Bitmaps {Values :make ([]*_f .Bitmap ,_ebf )};var (_eaef ,_ceae ,_bcd *_f .Bitmap ;_fab error ;);for _dec :=0;_dec < _ebf ;_dec ++{_eaef ,_fab =_ggae .GetBitmap (_dec );if _fab !=nil {return _dg .Wrap (_fab ,_feab ,"");
};_ceae ,_fab =_eaef .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _fab !=nil {return _dg .Wrap (_fab ,_feab ,"");};_bcd ,_fab =_f .Dilate (nil ,_ceae ,_eece );if _fab !=nil {return _dg .Wrap (_fab ,_feab ,"");};_cab .Values [_ebf ]=_ceae ;
_ggg .Values [_ebf ]=_bcd ;};_bcb ,_fab :=_f .Centroids (_cab .Values );if _fab !=nil {return _dg .Wrap (_fab ,_feab ,"");};if _fab =_bcb .Add (_fdg .CentroidPoints );_fab !=nil {_aa .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");
};if _fdg .Settings .RankHaus ==1.0{_fab =_fdg .classifyRankHouseOne (_bcf ,_ggae ,_cab ,_ggg ,_bcb ,_fcf );}else {_fab =_fdg .classifyRankHouseNonOne (_bcf ,_ggae ,_cab ,_ggg ,_bcb ,_bda ,_fcf );};if _fab !=nil {return _dg .Wrap (_fab ,_feab ,"");};return nil ;
};func (_bf *Classer )getULCorners (_cbb *_f .Bitmap ,_bae *_f .Boxes )error {const _ggc ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";if _cbb ==nil {return _dg .Error (_ggc ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");
};if _bae ==nil {return _dg .Error (_ggc ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _bf .PtaUL ==nil {_bf .PtaUL =&_f .Points {};};_bg :=len (*_bae );var (_ead ,_ebe ,_ff ,_dgg int ;_ce ,_ed ,_cfb ,_cgg float32 ;_eec error ;_ae *_d .Rectangle ;
_aee *_f .Bitmap ;_fff _d .Point ;);for _edb :=0;_edb < _bg ;_edb ++{_ead =_bf .BaseIndex +_edb ;if _ce ,_ed ,_eec =_bf .CentroidPoints .GetGeometry (_ead );_eec !=nil {return _dg .Wrap (_eec ,_ggc ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");
};if _ebe ,_eec =_bf .ClassIDs .Get (_ead );_eec !=nil {return _dg .Wrap (_eec ,_ggc ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");};if _cfb ,_cgg ,_eec =_bf .CentroidPointsTemplates .GetGeometry (_ebe );_eec !=nil {return _dg .Wrap (_eec ,_ggc ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");
};_ede :=_cfb -_ce ;_aec :=_cgg -_ed ;if _ede >=0{_ff =int (_ede +0.5);}else {_ff =int (_ede -0.5);};if _aec >=0{_dgg =int (_aec +0.5);}else {_dgg =int (_aec -0.5);};if _ae ,_eec =_bae .Get (_edb );_eec !=nil {return _dg .Wrap (_eec ,_ggc ,"");};_fd ,_ab :=_ae .Min .X ,_ae .Min .Y ;
_aee ,_eec =_bf .UndilatedTemplates .GetBitmap (_ebe );if _eec !=nil {return _dg .Wrap (_eec ,_ggc ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_fff ,_eec =_ffe (_cbb ,_fd ,_ab ,_ff ,_dgg ,_aee );if _eec !=nil {return _dg .Wrap (_eec ,_ggc ,"");};_bf .PtaUL .AddPoint (float32 (_fd -_ff +_fff .X ),float32 (_ab -_dgg +_fff .Y ));};return nil ;};const (MaxConnCompWidth =350;MaxCharCompWidth =350;
MaxWordCompWidth =1000;MaxCompHeight =120;);const (RankHaus Method =iota ;Correlation ;);func (_egb *Classer )classifyRankHouseOne (_gfd *_f .Boxes ,_efc ,_feg ,_fddb *_f .Bitmaps ,_ccd *_f .Points ,_gdd int )(_cfg error ){const _aaac ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_ecb ,_bddb ,_adf ,_cfe float32 ;_eged int ;_daf ,_eac ,_ddc ,_ebc ,_dea *_f .Bitmap ;_eda ,_bea bool ;);for _dga :=0;_dga < len (_efc .Values );_dga ++{_eac =_feg .Values [_dga ];_ddc =_fddb .Values [_dga ];_ecb ,_bddb ,_cfg =_ccd .GetGeometry (_dga );
if _cfg !=nil {return _dg .Wrapf (_cfg ,_aaac ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_dgcb :=len (_egb .UndilatedTemplates .Values );_eda =false ;_eed :=_eacg (_egb ,_eac );for _eged =_eed .Next ();_eged > -1;
{_ebc ,_cfg =_egb .UndilatedTemplates .GetBitmap (_eged );if _cfg !=nil {return _dg .Wrap (_cfg ,_aaac ,"\u0062\u006d\u0033");};_dea ,_cfg =_egb .DilatedTemplates .GetBitmap (_eged );if _cfg !=nil {return _dg .Wrap (_cfg ,_aaac ,"\u0062\u006d\u0034");};
_adf ,_cfe ,_cfg =_egb .CentroidPointsTemplates .GetGeometry (_eged );if _cfg !=nil {return _dg .Wrap (_cfg ,_aaac ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_bea ,_cfg =_f .HausTest (_eac ,_ddc ,_ebc ,_dea ,_ecb -_adf ,_bddb -_cfe ,MaxDiffWidth ,MaxDiffHeight );
if _cfg !=nil {return _dg .Wrap (_cfg ,_aaac ,"");};if _bea {_eda =true ;if _cfg =_egb .ClassIDs .Add (_eged );_cfg !=nil {return _dg .Wrap (_cfg ,_aaac ,"");};if _cfg =_egb .ComponentPageNumbers .Add (_gdd );_cfg !=nil {return _dg .Wrap (_cfg ,_aaac ,"");
};if _egb .Settings .KeepClassInstances {_facgb ,_ecbb :=_egb .ClassInstances .GetBitmaps (_eged );if _ecbb !=nil {return _dg .Wrap (_ecbb ,_aaac ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_daf ,_ecbb =_efc .GetBitmap (_dga );if _ecbb !=nil {return _dg .Wrap (_ecbb ,_aaac ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");
};_facgb .AddBitmap (_daf );_agag ,_ecbb :=_gfd .Get (_dga );if _ecbb !=nil {return _dg .Wrap (_ecbb ,_aaac ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_facgb .AddBox (_agag );};break ;};};if !_eda {if _cfg =_egb .ClassIDs .Add (_dgcb );_cfg !=nil {return _dg .Wrap (_cfg ,_aaac ,"");
};if _cfg =_egb .ComponentPageNumbers .Add (_gdd );_cfg !=nil {return _dg .Wrap (_cfg ,_aaac ,"");};_eeg :=&_f .Bitmaps {};_daf ,_cfg =_efc .GetBitmap (_dga );if _cfg !=nil {return _dg .Wrap (_cfg ,_aaac ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_eeg .Values =append (_eeg .Values ,_daf );
_ebd ,_deaa :=_daf .Width ,_daf .Height ;_egb .TemplatesSize .Add (uint64 (_deaa )*uint64 (_ebd ),_dgcb );_gbg ,_fbe :=_gfd .Get (_dga );if _fbe !=nil {return _dg .Wrap (_fbe ,_aaac ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_eeg .AddBox (_gbg );_egb .ClassInstances .AddBitmaps (_eeg );
_egb .CentroidPointsTemplates .AddPoint (_ecb ,_bddb );_egb .UndilatedTemplates .AddBitmap (_eac );_egb .DilatedTemplates .AddBitmap (_ddc );};};return nil ;};func (_bddg *Classer )classifyRankHouseNonOne (_ded *_f .Boxes ,_ffbg ,_aac ,_gcb *_f .Bitmaps ,_cac *_f .Points ,_fddbd *_db .NumSlice ,_fged int )(_bfda error ){const _fbf ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_aed ,_afe ,_bgd ,_aad float32 ;_baac ,_abf ,_bfb int ;_fda ,_gdb ,_baeg ,_bde ,_deaab *_f .Bitmap ;_beaa ,_dbg bool ;);_bcg :=_f .MakePixelSumTab8 ();for _dggb :=0;_dggb < len (_ffbg .Values );_dggb ++{if _gdb ,_bfda =_aac .GetBitmap (_dggb );_bfda !=nil {return _dg .Wrap (_bfda ,_fbf ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};if _baac ,_bfda =_fddbd .GetInt (_dggb );_bfda !=nil {_aa .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_dggb ,_bfda );
};if _baeg ,_bfda =_gcb .GetBitmap (_dggb );_bfda !=nil {return _dg .Wrap (_bfda ,_fbf ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _aed ,_afe ,_bfda =_cac .GetGeometry (_dggb );_bfda !=nil {return _dg .Wrapf (_bfda ,_fbf ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_dfe :=len (_bddg .UndilatedTemplates .Values );_beaa =false ;_bca :=_eacg (_bddg ,_gdb );for _bfb =_bca .Next ();_bfb > -1;{if _bde ,_bfda =_bddg .UndilatedTemplates .GetBitmap (_bfb );_bfda !=nil {return _dg .Wrap (_bfda ,_fbf ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _abf ,_bfda =_bddg .FgTemplates .GetInt (_bfb );_bfda !=nil {_aa .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_bfb ,_bfda );
};if _deaab ,_bfda =_bddg .DilatedTemplates .GetBitmap (_bfb );_bfda !=nil {return _dg .Wrap (_bfda ,_fbf ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _bgd ,_aad ,_bfda =_bddg .CentroidPointsTemplates .GetGeometry (_bfb );
_bfda !=nil {return _dg .Wrap (_bfda ,_fbf ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_dbg ,_bfda =_f .RankHausTest (_gdb ,_baeg ,_bde ,_deaab ,_aed -_bgd ,_afe -_aad ,MaxDiffWidth ,MaxDiffHeight ,_baac ,_abf ,float32 (_bddg .Settings .RankHaus ),_bcg );
if _bfda !=nil {return _dg .Wrap (_bfda ,_fbf ,"");};if _dbg {_beaa =true ;if _bfda =_bddg .ClassIDs .Add (_bfb );_bfda !=nil {return _dg .Wrap (_bfda ,_fbf ,"");};if _bfda =_bddg .ComponentPageNumbers .Add (_fged );_bfda !=nil {return _dg .Wrap (_bfda ,_fbf ,"");
};if _bddg .Settings .KeepClassInstances {_cge ,_ece :=_bddg .ClassInstances .GetBitmaps (_bfb );if _ece !=nil {return _dg .Wrap (_ece ,_fbf ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");
};if _fda ,_ece =_ffbg .GetBitmap (_dggb );_ece !=nil {return _dg .Wrap (_ece ,_fbf ,"\u0070i\u0078\u0061\u005b\u0069\u005d");};_cge .Values =append (_cge .Values ,_fda );_fec ,_ece :=_ded .Get (_dggb );if _ece !=nil {return _dg .Wrap (_ece ,_fbf ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};_cge .Boxes =append (_cge .Boxes ,_fec );};break ;};};if !_beaa {if _bfda =_bddg .ClassIDs .Add (_dfe );_bfda !=nil {return _dg .Wrap (_bfda ,_fbf ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _bfda =_bddg .ComponentPageNumbers .Add (_fged );_bfda !=nil {return _dg .Wrap (_bfda ,_fbf ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_gcc :=&_f .Bitmaps {};_fda =_ffbg .Values [_dggb ];_gcc .AddBitmap (_fda );_cgef ,_efca :=_fda .Width ,_fda .Height ;_bddg .TemplatesSize .Add (uint64 (_cgef )*uint64 (_efca ),_dfe );_ada ,_ced :=_ded .Get (_dggb );if _ced !=nil {return _dg .Wrap (_ced ,_fbf ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_gcc .AddBox (_ada );_bddg .ClassInstances .AddBitmaps (_gcc );_bddg .CentroidPointsTemplates .AddPoint (_aed ,_afe );_bddg .UndilatedTemplates .AddBitmap (_gdb );_bddg .DilatedTemplates .AddBitmap (_baeg );_bddg .FgTemplates .AddInt (_baac );};};_bddg .NumberOfClasses =len (_bddg .UndilatedTemplates .Values );
return nil ;};func (_dac *Classer )classifyCorrelation (_gfg *_f .Boxes ,_gad *_f .Bitmaps ,_bdg int )error {const _adc ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";if _gfg ==nil {return _dg .Error (_adc ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _gad ==nil {return _dg .Error (_adc ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_add :=len (_gad .Values );if _add ==0{_aa .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_baea ,_fac *_f .Bitmap ;_bfg error ;);_aeeb :=&_f .Bitmaps {Values :make ([]*_f .Bitmap ,_add )};for _ege ,_ef :=range _gad .Values {_fac ,_bfg =_ef .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _bfg !=nil {return _dg .Wrap (_bfg ,_adc ,"");
};_aeeb .Values [_ege ]=_fac ;};_aaa :=_dac .FgTemplates ;_fe :=_f .MakePixelSumTab8 ();_gda :=_f .MakePixelCentroidTab8 ();_ca :=make ([]int ,_add );_dgc :=make ([][]int ,_add );_gb :=_f .Points (make ([]_f .Point ,_add ));_de :=&_gb ;var (_af ,_gab int ;
_gaa ,_dcg ,_eae int ;_cea ,_efg int ;_ggf byte ;);for _abg ,_dcc :=range _aeeb .Values {_dgc [_abg ]=make ([]int ,_dcc .Height );_af =0;_gab =0;_dcg =(_dcc .Height -1)*_dcc .RowStride ;_gaa =0;for _efg =_dcc .Height -1;_efg >=0;_efg ,_dcg =_efg -1,_dcg -_dcc .RowStride {_dgc [_abg ][_efg ]=_gaa ;
_eae =0;for _cea =0;_cea < _dcc .RowStride ;_cea ++{_ggf =_dcc .Data [_dcg +_cea ];_eae +=_fe [_ggf ];_af +=_gda [_ggf ]+_cea *8*_fe [_ggf ];};_gaa +=_eae ;_gab +=_eae *_efg ;};_ca [_abg ]=_gaa ;if _gaa > 0{(*_de )[_abg ]=_f .Point {X :float32 (_af )/float32 (_gaa ),Y :float32 (_gab )/float32 (_gaa )};
}else {(*_de )[_abg ]=_f .Point {X :float32 (_dcc .Width )/float32 (2),Y :float32 (_dcc .Height )/float32 (2)};};};if _bfg =_dac .CentroidPoints .Add (_de );_bfg !=nil {return _dg .Wrap (_bfg ,_adc ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");
};var (_acf ,_ffb ,_afd int ;_ecc float64 ;_bgaa ,_bgad ,_bec ,_ggd float32 ;_bcc ,_eadc _f .Point ;_fge bool ;_bccb *similarTemplatesFinder ;_fb int ;_bfd *_f .Bitmap ;_fed *_d .Rectangle ;_ffg *_f .Bitmaps ;);for _fb ,_fac =range _aeeb .Values {_ffb =_ca [_fb ];
if _bgaa ,_bgad ,_bfg =_de .GetGeometry (_fb );_bfg !=nil {return _dg .Wrap (_bfg ,_adc ,"\u0070t\u0061\u0020\u002d\u0020\u0069");};_fge =false ;_acg :=len (_dac .UndilatedTemplates .Values );_bccb =_eacg (_dac ,_fac );for _dab :=_bccb .Next ();_dab > -1;
{if _bfd ,_bfg =_dac .UndilatedTemplates .GetBitmap (_dab );_bfg !=nil {return _dg .Wrap (_bfg ,_adc ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");};if _afd ,_bfg =_aaa .GetInt (_dab );
_bfg !=nil {_aa .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bfg );};if _bec ,_ggd ,_bfg =_dac .CentroidPointsTemplates .GetGeometry (_dab );
_bfg !=nil {return _dg .Wrap (_bfg ,_adc ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _dac .Settings .WeightFactor > 0.0{if _acf ,_bfg =_dac .TemplateAreas .Get (_dab );_bfg !=nil {_aa .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_bfg );
};_ecc =_dac .Settings .Thresh +(1.0-_dac .Settings .Thresh )*_dac .Settings .WeightFactor *float64 (_afd )/float64 (_acf );}else {_ecc =_dac .Settings .Thresh ;};_facg ,_bb :=_f .CorrelationScoreThresholded (_fac ,_bfd ,_ffb ,_afd ,_bcc .X -_eadc .X ,_bcc .Y -_eadc .Y ,MaxDiffWidth ,MaxDiffHeight ,_fe ,_dgc [_fb ],float32 (_ecc ));
if _bb !=nil {return _dg .Wrap (_bb ,_adc ,"");};if _fdd {var (_dae ,_efa float64 ;_bce ,_bdf int ;);_dae ,_bb =_f .CorrelationScore (_fac ,_bfd ,_ffb ,_afd ,_bgaa -_bec ,_bgad -_ggd ,MaxDiffWidth ,MaxDiffHeight ,_fe );if _bb !=nil {return _dg .Wrap (_bb ,_adc ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_efa ,_bb =_f .CorrelationScoreSimple (_fac ,_bfd ,_ffb ,_afd ,_bgaa -_bec ,_bgad -_ggd ,MaxDiffWidth ,MaxDiffHeight ,_fe );if _bb !=nil {return _dg .Wrap (_bb ,_adc ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_bce =int (_a .Sqrt (_dae *float64 (_ffb )*float64 (_afd )));_bdf =int (_a .Sqrt (_efa *float64 (_ffb )*float64 (_afd )));if (_dae >=_ecc )!=(_efa >=_ecc ){return _dg .Errorf (_adc ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_bce ,_dae ,_dae >=_ecc ,_bdf ,_efa ,_efa >=_ecc ,_dae -_efa );
};if _dae >=_ecc !=_facg {return _dg .Errorf (_adc ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_dae ,_dae *float64 (_ffb )*float64 (_afd ),_bce ,_ecc ,float32 (_ecc )*float32 (_ffb )*float32 (_afd ),_facg );
};};if _facg {_fge =true ;if _bb =_dac .ClassIDs .Add (_dab );_bb !=nil {return _dg .Wrap (_bb ,_adc ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _bb =_dac .ComponentPageNumbers .Add (_bdg );_bb !=nil {return _dg .Wrap (_bb ,_adc ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _dac .Settings .KeepClassInstances {if _baea ,_bb =_gad .GetBitmap (_fb );_bb !=nil {return _dg .Wrap (_bb ,_adc ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _ffg ,_bb =_dac .ClassInstances .GetBitmaps (_dab );
_bb !=nil {return _dg .Wrap (_bb ,_adc ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_ffg .AddBitmap (_baea );if _fed ,_bb =_gfg .Get (_fb );_bb !=nil {return _dg .Wrap (_bb ,_adc ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_ffg .AddBox (_fed );};break ;};};if !_fge {if _bfg =_dac .ClassIDs .Add (_acg );_bfg !=nil {return _dg .Wrap (_bfg ,_adc ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _bfg =_dac .ComponentPageNumbers .Add (_bdg );_bfg !=nil {return _dg .Wrap (_bfg ,_adc ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_ffg =&_f .Bitmaps {};if _baea ,_bfg =_gad .GetBitmap (_fb );_bfg !=nil {return _dg .Wrap (_bfg ,_adc ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_ffg .AddBitmap (_baea );_fea ,_ebba :=_baea .Width ,_baea .Height ;_bdd :=uint64 (_ebba )*uint64 (_fea );
_dac .TemplatesSize .Add (_bdd ,_acg );if _fed ,_bfg =_gfg .Get (_fb );_bfg !=nil {return _dg .Wrap (_bfg ,_adc ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_ffg .AddBox (_fed );_dac .ClassInstances .AddBitmaps (_ffg );_dac .CentroidPointsTemplates .AddPoint (_bgaa ,_bgad );
_dac .FgTemplates .AddInt (_ffb );_dac .UndilatedTemplates .AddBitmap (_baea );_acf =(_fac .Width -2*JbAddedPixels )*(_fac .Height -2*JbAddedPixels );if _bfg =_dac .TemplateAreas .Add (_acf );_bfg !=nil {return _dg .Wrap (_bfg ,_adc ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};};};_dac .NumberOfClasses =len (_dac .UndilatedTemplates .Values );return nil ;};func (_bed Settings )Validate ()error {const _bead ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";if _bed .Thresh < 0.4||_bed .Thresh > 0.98{return _dg .Error (_bead ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _bed .WeightFactor < 0.0||_bed .WeightFactor > 1.0{return _dg .Error (_bead ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _bed .RankHaus < 0.5||_bed .RankHaus > 1.0{return _dg .Error (_bead ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _bed .SizeHaus < 1||_bed .SizeHaus > 10{return _dg .Error (_bead ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _bed .Components {case _f .ComponentConn ,_f .ComponentCharacters ,_f .ComponentWords :default:return _dg .Error (_bead ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};type similarTemplatesFinder struct{Classer *Classer ;Width int ;Height int ;Index int ;CurrentNumbers []int ;N int ;};func (_ffea *similarTemplatesFinder )Next ()int {var (_acc ,_fcb ,_fbg ,_cae int ;_gbe bool ;_fcd *_f .Bitmap ;_gbc error ;
);for {if _ffea .Index >=25{return -1;};_fcb =_ffea .Width +TwoByTwoWalk [2*_ffea .Index ];_acc =_ffea .Height +TwoByTwoWalk [2*_ffea .Index +1];if _acc < 1||_fcb < 1{_ffea .Index ++;continue ;};if len (_ffea .CurrentNumbers )==0{_ffea .CurrentNumbers ,_gbe =_ffea .Classer .TemplatesSize .GetSlice (uint64 (_fcb )*uint64 (_acc ));
if !_gbe {_ffea .Index ++;continue ;};_ffea .N =0;};_fbg =len (_ffea .CurrentNumbers );for ;_ffea .N < _fbg ;_ffea .N ++{_cae =_ffea .CurrentNumbers [_ffea .N ];_fcd ,_gbc =_ffea .Classer .DilatedTemplates .GetBitmap (_cae );if _gbc !=nil {_aa .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _fcd .Width -2*JbAddedPixels ==_fcb &&_fcd .Height -2*JbAddedPixels ==_acc {return _cae ;};};_ffea .Index ++;_ffea .CurrentNumbers =nil ;};};func (_gd *Classer )addPageComponents (_bd *_f .Bitmap ,_dgd *_f .Boxes ,_ge *_f .Bitmaps ,_egc int ,_gf Method )error {const _gfa ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _bd ==nil {return _dg .Error (_gfa ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _dgd ==nil ||_ge ==nil ||len (*_dgd )==0{_aa .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_bd );
return nil ;};var _da error ;switch _gf {case RankHaus :_da =_gd .classifyRankHaus (_dgd ,_ge ,_egc );case Correlation :_da =_gd .classifyCorrelation (_dgd ,_ge ,_egc );default:_aa .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_gf );
return _dg .Error (_gfa ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _da !=nil {return _dg .Wrap (_da ,_gfa ,"");};if _da =_gd .getULCorners (_bd ,_dgd );_da !=nil {return _dg .Wrap (_da ,_gfa ,"");
};_cb :=len (*_dgd );_gd .BaseIndex +=_cb ;if _da =_gd .ComponentsNumber .Add (_cb );_da !=nil {return _dg .Wrap (_da ,_gfa ,"");};return nil ;};type Classer struct{BaseIndex int ;Settings Settings ;ComponentsNumber *_db .IntSlice ;TemplateAreas *_db .IntSlice ;
Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_f .BitmapsArray ;UndilatedTemplates *_f .Bitmaps ;DilatedTemplates *_f .Bitmaps ;TemplatesSize _db .IntsMap ;FgTemplates *_db .NumSlice ;CentroidPoints *_f .Points ;CentroidPointsTemplates *_f .Points ;
ClassIDs *_db .IntSlice ;ComponentPageNumbers *_db .IntSlice ;PtaUL *_f .Points ;PtaLL *_f .Points ;};var _fdd bool ;type Settings struct{MaxCompWidth int ;MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;WeightFactor float64 ;KeepClassInstances bool ;
Components _f .Component ;Method Method ;};type Method int ;