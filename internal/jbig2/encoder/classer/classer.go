//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (_af "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_e "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_ce "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_a "image";_b "math";
);type Classer struct{BaseIndex int ;Settings Settings ;ComponentsNumber *_d .IntSlice ;TemplateAreas *_d .IntSlice ;Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_e .BitmapsArray ;UndilatedTemplates *_e .Bitmaps ;DilatedTemplates *_e .Bitmaps ;
TemplatesSize _d .IntsMap ;FgTemplates *_d .NumSlice ;CentroidPoints *_e .Points ;CentroidPointsTemplates *_e .Points ;ClassIDs *_d .IntSlice ;ComponentPageNumbers *_d .IntSlice ;PtaUL *_e .Points ;PtaLL *_e .Points ;};func (_cc *Classer )addPageComponents (_ceg *_e .Bitmap ,_cec *_e .Boxes ,_cd *_e .Bitmaps ,_dc int ,_eec Method )error {const _gdc ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _ceg ==nil {return _ce .Error (_gdc ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _cec ==nil ||_cd ==nil ||len (*_cec )==0{_af .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_ceg );
return nil ;};var _dcg error ;switch _eec {case RankHaus :_dcg =_cc .classifyRankHaus (_cec ,_cd ,_dc );case Correlation :_dcg =_cc .classifyCorrelation (_cec ,_cd ,_dc );default:_af .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_eec );
return _ce .Error (_gdc ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _dcg !=nil {return _ce .Wrap (_dcg ,_gdc ,"");};if _dcg =_cc .getULCorners (_ceg ,_cec );_dcg !=nil {return _ce .Wrap (_dcg ,_gdc ,"");
};_da :=len (*_cec );_cc .BaseIndex +=_da ;if _dcg =_cc .ComponentsNumber .Add (_da );_dcg !=nil {return _ce .Wrap (_dcg ,_gdc ,"");};return nil ;};func (_ee *Classer )ComputeLLCorners ()(_fb error ){const _ec ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _ee .PtaUL ==nil {return _ce .Error (_ec ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};_bf :=len (*_ee .PtaUL );_ee .PtaLL =&_e .Points {};var (_g ,_be float32 ;_bc ,_dge int ;
_cab *_e .Bitmap ;);for _gd :=0;_gd < _bf ;_gd ++{_g ,_be ,_fb =_ee .PtaUL .GetGeometry (_gd );if _fb !=nil {_af .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fb );
return _ce .Wrap (_fb ,_ec ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_bc ,_fb =_ee .ClassIDs .Get (_gd );if _fb !=nil {_af .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_fb );
return _ce .Wrap (_fb ,_ec ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_cab ,_fb =_ee .UndilatedTemplates .GetBitmap (_bc );if _fb !=nil {_af .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_fb );
return _ce .Wrap (_fb ,_ec ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_dge =_cab .Height ;_ee .PtaLL .AddPoint (_g ,_be +float32 (_dge ));};return nil ;};func Init (settings Settings )(*Classer ,error ){const _ca ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";
_dd :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_d .IntsMap {},TemplateAreas :&_d .IntSlice {},ComponentPageNumbers :&_d .IntSlice {},ClassIDs :&_d .IntSlice {},ComponentsNumber :&_d .IntSlice {},CentroidPoints :&_e .Points {},CentroidPointsTemplates :&_e .Points {},UndilatedTemplates :&_e .Bitmaps {},DilatedTemplates :&_e .Bitmaps {},ClassInstances :&_e .BitmapsArray {},FgTemplates :&_d .NumSlice {}};
if _dg :=_dd .Settings .Validate ();_dg !=nil {return nil ,_ce .Wrap (_dg ,_ca ,"");};return _dd ,nil ;};type Method int ;func (_dfb *Classer )classifyRankHaus (_eda *_e .Boxes ,_dcb *_e .Bitmaps ,_gec int )error {const _fce ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";
if _eda ==nil {return _ce .Error (_fce ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _dcb ==nil {return _ce .Error (_fce ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_feg :=len (_dcb .Values );if _feg ==0{return _ce .Error (_fce ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");};_cbg :=_dcb .CountPixels ();_badb :=_dfb .Settings .SizeHaus ;_fecc :=_e .SelCreateBrick (_badb ,_badb ,_badb /2,_badb /2,_e .SelHit );
_dea :=&_e .Bitmaps {Values :make ([]*_e .Bitmap ,_feg )};_fbb :=&_e .Bitmaps {Values :make ([]*_e .Bitmap ,_feg )};var (_cag ,_fg ,_fde *_e .Bitmap ;_aec error ;);for _edc :=0;_edc < _feg ;_edc ++{_cag ,_aec =_dcb .GetBitmap (_edc );if _aec !=nil {return _ce .Wrap (_aec ,_fce ,"");
};_fg ,_aec =_cag .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _aec !=nil {return _ce .Wrap (_aec ,_fce ,"");};_fde ,_aec =_e .Dilate (nil ,_fg ,_fecc );if _aec !=nil {return _ce .Wrap (_aec ,_fce ,"");};_dea .Values [_feg ]=_fg ;
_fbb .Values [_feg ]=_fde ;};_aeb ,_aec :=_e .Centroids (_dea .Values );if _aec !=nil {return _ce .Wrap (_aec ,_fce ,"");};if _aec =_aeb .Add (_dfb .CentroidPoints );_aec !=nil {_af .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");
};if _dfb .Settings .RankHaus ==1.0{_aec =_dfb .classifyRankHouseOne (_eda ,_dcb ,_dea ,_fbb ,_aeb ,_gec );}else {_aec =_dfb .classifyRankHouseNonOne (_eda ,_dcb ,_dea ,_fbb ,_aeb ,_cbg ,_gec );};if _aec !=nil {return _ce .Wrap (_aec ,_fce ,"");};return nil ;
};func _bb (_cfb *_e .Bitmap ,_gf ,_cac ,_gdd ,_cg int ,_fa *_e .Bitmap )(_fed _a .Point ,_eb error ){const _eaa ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";if _cfb ==nil {return _fed ,_ce .Error (_eaa ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};if _fa ==nil {return _fed ,_ce .Error (_eaa ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");};_efd ,_ab :=_fa .Width ,_fa .Height ;_ga ,_eecc :=_gf -_gdd -JbAddedPixels ,_cac -_cg -JbAddedPixels ;
_af .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_gf ,_cac ,_efd ,_ab ,_ga ,_eecc );
_gda ,_eb :=_e .Rect (_ga ,_eecc ,_efd ,_ab );if _eb !=nil {return _fed ,_ce .Wrap (_eb ,_eaa ,"");};_cdc ,_ ,_eb :=_cfb .ClipRectangle (_gda );if _eb !=nil {_af .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_gda );
return _fed ,_ce .Wrap (_eb ,_eaa ,"");};_ccg :=_e .New (_cdc .Width ,_cdc .Height );_ba :=_b .MaxInt32 ;var _acb ,_ccef ,_cgf ,_dgb ,_fec int ;for _acb =-1;_acb <=1;_acb ++{for _ccef =-1;_ccef <=1;_ccef ++{if _ ,_eb =_e .Copy (_ccg ,_cdc );_eb !=nil {return _fed ,_ce .Wrap (_eb ,_eaa ,"");
};if _eb =_ccg .RasterOperation (_ccef ,_acb ,_efd ,_ab ,_e .PixSrcXorDst ,_fa ,0,0);_eb !=nil {return _fed ,_ce .Wrap (_eb ,_eaa ,"");};_cgf =_ccg .CountPixels ();if _cgf < _ba {_dgb =_ccef ;_fec =_acb ;_ba =_cgf ;};};};_fed .X =_dgb ;_fed .Y =_fec ;return _fed ,nil ;
};func (_dga *Classer )classifyRankHouseOne (_aebc *_e .Boxes ,_bfd ,_bca ,_gbd *_e .Bitmaps ,_bde *_e .Points ,_add int )(_eaae error ){const _cfd ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_fee ,_eef ,_fcf ,_fac float32 ;_agga int ;_edad ,_gba ,_ddbd ,_ffd ,_geg *_e .Bitmap ;_ead ,_fgd bool ;);for _ceae :=0;_ceae < len (_bfd .Values );_ceae ++{_gba =_bca .Values [_ceae ];_ddbd =_gbd .Values [_ceae ];_fee ,_eef ,_eaae =_bde .GetGeometry (_ceae );
if _eaae !=nil {return _ce .Wrapf (_eaae ,_cfd ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_cacg :=len (_dga .UndilatedTemplates .Values );_ead =false ;_abf :=_aa (_dga ,_gba );for _agga =_abf .Next ();_agga > -1;
{_ffd ,_eaae =_dga .UndilatedTemplates .GetBitmap (_agga );if _eaae !=nil {return _ce .Wrap (_eaae ,_cfd ,"\u0062\u006d\u0033");};_geg ,_eaae =_dga .DilatedTemplates .GetBitmap (_agga );if _eaae !=nil {return _ce .Wrap (_eaae ,_cfd ,"\u0062\u006d\u0034");
};_fcf ,_fac ,_eaae =_dga .CentroidPointsTemplates .GetGeometry (_agga );if _eaae !=nil {return _ce .Wrap (_eaae ,_cfd ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_fgd ,_eaae =_e .HausTest (_gba ,_ddbd ,_ffd ,_geg ,_fee -_fcf ,_eef -_fac ,MaxDiffWidth ,MaxDiffHeight );
if _eaae !=nil {return _ce .Wrap (_eaae ,_cfd ,"");};if _fgd {_ead =true ;if _eaae =_dga .ClassIDs .Add (_agga );_eaae !=nil {return _ce .Wrap (_eaae ,_cfd ,"");};if _eaae =_dga .ComponentPageNumbers .Add (_add );_eaae !=nil {return _ce .Wrap (_eaae ,_cfd ,"");
};if _dga .Settings .KeepClassInstances {_addf ,_dged :=_dga .ClassInstances .GetBitmaps (_agga );if _dged !=nil {return _ce .Wrap (_dged ,_cfd ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_edad ,_dged =_bfd .GetBitmap (_ceae );if _dged !=nil {return _ce .Wrap (_dged ,_cfd ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");
};_addf .AddBitmap (_edad );_bee ,_dged :=_aebc .Get (_ceae );if _dged !=nil {return _ce .Wrap (_dged ,_cfd ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_addf .AddBox (_bee );};break ;};};if !_ead {if _eaae =_dga .ClassIDs .Add (_cacg );_eaae !=nil {return _ce .Wrap (_eaae ,_cfd ,"");
};if _eaae =_dga .ComponentPageNumbers .Add (_add );_eaae !=nil {return _ce .Wrap (_eaae ,_cfd ,"");};_bbb :=&_e .Bitmaps {};_edad ,_eaae =_bfd .GetBitmap (_ceae );if _eaae !=nil {return _ce .Wrap (_eaae ,_cfd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};
_bbb .Values =append (_bbb .Values ,_edad );_cff ,_edac :=_edad .Width ,_edad .Height ;_dga .TemplatesSize .Add (uint64 (_edac )*uint64 (_cff ),_cacg );_ddf ,_gbc :=_aebc .Get (_ceae );if _gbc !=nil {return _ce .Wrap (_gbc ,_cfd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_bbb .AddBox (_ddf );_dga .ClassInstances .AddBitmaps (_bbb );_dga .CentroidPointsTemplates .AddPoint (_fee ,_eef );_dga .UndilatedTemplates .AddBitmap (_gba );_dga .DilatedTemplates .AddBitmap (_ddbd );};};return nil ;};func DefaultSettings ()Settings {_dfbg :=&Settings {};
_dfbg .SetDefault ();return *_dfbg };func _aa (_eed *Classer ,_eaaeb *_e .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_eaaeb .Width ,Height :_eaaeb .Height ,Classer :_eed };};func (_f *Classer )AddPage (inputPage *_e .Bitmap ,pageNumber int ,method Method )(_fc error ){const _ea ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";
_f .Widths [pageNumber ]=inputPage .Width ;_f .Heights [pageNumber ]=inputPage .Height ;if _fc =_f .verifyMethod (method );_fc !=nil {return _ce .Wrap (_fc ,_ea ,"");};_df ,_eag ,_fc :=inputPage .GetComponents (_f .Settings .Components ,_f .Settings .MaxCompWidth ,_f .Settings .MaxCompHeight );
if _fc !=nil {return _ce .Wrap (_fc ,_ea ,"");};_af .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_df );if _fc =_f .addPageComponents (inputPage ,_eag ,_df ,pageNumber ,method );_fc !=nil {return _ce .Wrap (_fc ,_ea ,"");
};return nil ;};const (RankHaus Method =iota ;Correlation ;);func (_ag *Classer )verifyMethod (_ceb Method )error {if _ceb !=RankHaus &&_ceb !=Correlation {return _ce .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};const (MaxDiffWidth =2;MaxDiffHeight =2;);func (_fedd *Classer )classifyRankHouseNonOne (_fea *_e .Boxes ,_fbd ,_ebc ,_bbd *_e .Bitmaps ,_abd *_e .Points ,_afc *_d .NumSlice ,_afg int )(_ceba error ){const _gbg ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_fece ,_fge ,_fad ,_dgc float32 ;_eca ,_fgdb ,_bfgd int ;_gef ,_cgd ,_fcbd ,_cdcc ,_ecg *_e .Bitmap ;_efa ,_aee bool ;);_bdg :=_e .MakePixelSumTab8 ();for _fga :=0;_fga < len (_fbd .Values );_fga ++{if _cgd ,_ceba =_ebc .GetBitmap (_fga );_ceba !=nil {return _ce .Wrap (_ceba ,_gbg ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};if _eca ,_ceba =_afc .GetInt (_fga );_ceba !=nil {_af .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_fga ,_ceba );
};if _fcbd ,_ceba =_bbd .GetBitmap (_fga );_ceba !=nil {return _ce .Wrap (_ceba ,_gbg ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _fece ,_fge ,_ceba =_abd .GetGeometry (_fga );_ceba !=nil {return _ce .Wrapf (_ceba ,_gbg ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_gfd :=len (_fedd .UndilatedTemplates .Values );_efa =false ;_feab :=_aa (_fedd ,_cgd );for _bfgd =_feab .Next ();_bfgd > -1;{if _cdcc ,_ceba =_fedd .UndilatedTemplates .GetBitmap (_bfgd );_ceba !=nil {return _ce .Wrap (_ceba ,_gbg ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _fgdb ,_ceba =_fedd .FgTemplates .GetInt (_bfgd );_ceba !=nil {_af .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_bfgd ,_ceba );
};if _ecg ,_ceba =_fedd .DilatedTemplates .GetBitmap (_bfgd );_ceba !=nil {return _ce .Wrap (_ceba ,_gbg ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _fad ,_dgc ,_ceba =_fedd .CentroidPointsTemplates .GetGeometry (_bfgd );
_ceba !=nil {return _ce .Wrap (_ceba ,_gbg ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_aee ,_ceba =_e .RankHausTest (_cgd ,_fcbd ,_cdcc ,_ecg ,_fece -_fad ,_fge -_dgc ,MaxDiffWidth ,MaxDiffHeight ,_eca ,_fgdb ,float32 (_fedd .Settings .RankHaus ),_bdg );
if _ceba !=nil {return _ce .Wrap (_ceba ,_gbg ,"");};if _aee {_efa =true ;if _ceba =_fedd .ClassIDs .Add (_bfgd );_ceba !=nil {return _ce .Wrap (_ceba ,_gbg ,"");};if _ceba =_fedd .ComponentPageNumbers .Add (_afg );_ceba !=nil {return _ce .Wrap (_ceba ,_gbg ,"");
};if _fedd .Settings .KeepClassInstances {_gfg ,_fdd :=_fedd .ClassInstances .GetBitmaps (_bfgd );if _fdd !=nil {return _ce .Wrap (_fdd ,_gbg ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");
};if _gef ,_fdd =_fbd .GetBitmap (_fga );_fdd !=nil {return _ce .Wrap (_fdd ,_gbg ,"\u0070i\u0078\u0061\u005b\u0069\u005d");};_gfg .Values =append (_gfg .Values ,_gef );_eac ,_fdd :=_fea .Get (_fga );if _fdd !=nil {return _ce .Wrap (_fdd ,_gbg ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};_gfg .Boxes =append (_gfg .Boxes ,_eac );};break ;};};if !_efa {if _ceba =_fedd .ClassIDs .Add (_gfd );_ceba !=nil {return _ce .Wrap (_ceba ,_gbg ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _ceba =_fedd .ComponentPageNumbers .Add (_afg );_ceba !=nil {return _ce .Wrap (_ceba ,_gbg ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_eaf :=&_e .Bitmaps {};_gef =_fbd .Values [_fga ];_eaf .AddBitmap (_gef );_cffd ,_bgb :=_gef .Width ,_gef .Height ;_fedd .TemplatesSize .Add (uint64 (_cffd )*uint64 (_bgb ),_gfd );_dfd ,_aff :=_fea .Get (_fga );if _aff !=nil {return _ce .Wrap (_aff ,_gbg ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_eaf .AddBox (_dfd );_fedd .ClassInstances .AddBitmaps (_eaf );_fedd .CentroidPointsTemplates .AddPoint (_fece ,_fge );_fedd .UndilatedTemplates .AddBitmap (_cgd );_fedd .DilatedTemplates .AddBitmap (_fcbd );_fedd .FgTemplates .AddInt (_eca );};};_fedd .NumberOfClasses =len (_fedd .UndilatedTemplates .Values );
return nil ;};func (_bef Settings )Validate ()error {const _edgf ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";if _bef .Thresh < 0.4||_bef .Thresh > 0.98{return _ce .Error (_edgf ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _bef .WeightFactor < 0.0||_bef .WeightFactor > 1.0{return _ce .Error (_edgf ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _bef .RankHaus < 0.5||_bef .RankHaus > 1.0{return _ce .Error (_edgf ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _bef .SizeHaus < 1||_bef .SizeHaus > 10{return _ce .Error (_edgf ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _bef .Components {case _e .ComponentConn ,_e .ComponentCharacters ,_e .ComponentWords :default:return _ce .Error (_edgf ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};func (_fcc *similarTemplatesFinder )Next ()int {var (_efe ,_aeea ,_cdd ,_dfe int ;_dade bool ;_fbdd *_e .Bitmap ;_agf error ;);for {if _fcc .Index >=25{return -1;};_aeea =_fcc .Width +TwoByTwoWalk [2*_fcc .Index ];_efe =_fcc .Height +TwoByTwoWalk [2*_fcc .Index +1];
if _efe < 1||_aeea < 1{_fcc .Index ++;continue ;};if len (_fcc .CurrentNumbers )==0{_fcc .CurrentNumbers ,_dade =_fcc .Classer .TemplatesSize .GetSlice (uint64 (_aeea )*uint64 (_efe ));if !_dade {_fcc .Index ++;continue ;};_fcc .N =0;};_cdd =len (_fcc .CurrentNumbers );
for ;_fcc .N < _cdd ;_fcc .N ++{_dfe =_fcc .CurrentNumbers [_fcc .N ];_fbdd ,_agf =_fcc .Classer .DilatedTemplates .GetBitmap (_dfe );if _agf !=nil {_af .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _fbdd .Width -2*JbAddedPixels ==_aeea &&_fbdd .Height -2*JbAddedPixels ==_efe {return _dfe ;};};_fcc .Index ++;_fcc .CurrentNumbers =nil ;};};var _caf bool ;var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};
const (MaxConnCompWidth =350;MaxCharCompWidth =350;MaxWordCompWidth =1000;MaxCompHeight =120;);func (_dde *Settings )SetDefault (){if _dde .MaxCompWidth ==0{switch _dde .Components {case _e .ComponentConn :_dde .MaxCompWidth =MaxConnCompWidth ;case _e .ComponentCharacters :_dde .MaxCompWidth =MaxCharCompWidth ;
case _e .ComponentWords :_dde .MaxCompWidth =MaxWordCompWidth ;};};if _dde .MaxCompHeight ==0{_dde .MaxCompHeight =MaxCompHeight ;};if _dde .Thresh ==0.0{_dde .Thresh =0.9;};if _dde .WeightFactor ==0.0{_dde .WeightFactor =0.75;};if _dde .RankHaus ==0.0{_dde .RankHaus =0.97;
};if _dde .SizeHaus ==0{_dde .SizeHaus =2;};};type Settings struct{MaxCompWidth int ;MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;WeightFactor float64 ;KeepClassInstances bool ;Components _e .Component ;Method Method ;};func (_ed *Classer )classifyCorrelation (_abe *_e .Boxes ,_bac *_e .Bitmaps ,_bda int )error {const _dbe ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";
if _abe ==nil {return _ce .Error (_dbe ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _bac ==nil {return _ce .Error (_dbe ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_def :=len (_bac .Values );if _def ==0{_af .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_beba ,_agd *_e .Bitmap ;_dab error ;);_ae :=&_e .Bitmaps {Values :make ([]*_e .Bitmap ,_def )};for _gad ,_dcc :=range _bac .Values {_agd ,_dab =_dcc .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _dab !=nil {return _ce .Wrap (_dab ,_dbe ,"");
};_ae .Values [_gad ]=_agd ;};_edb :=_ed .FgTemplates ;_ad :=_e .MakePixelSumTab8 ();_cdf :=_e .MakePixelCentroidTab8 ();_fca :=make ([]int ,_def );_ccf :=make ([][]int ,_def );_bacf :=_e .Points (make ([]_e .Point ,_def ));_acf :=&_bacf ;var (_ebf ,_bed int ;
_cfc ,_ggc ,_bce int ;_ebg ,_daa int ;_agg byte ;);for _dad ,_ccd :=range _ae .Values {_ccf [_dad ]=make ([]int ,_ccd .Height );_ebf =0;_bed =0;_ggc =(_ccd .Height -1)*_ccd .RowStride ;_cfc =0;for _daa =_ccd .Height -1;_daa >=0;_daa ,_ggc =_daa -1,_ggc -_ccd .RowStride {_ccf [_dad ][_daa ]=_cfc ;
_bce =0;for _ebg =0;_ebg < _ccd .RowStride ;_ebg ++{_agg =_ccd .Data [_ggc +_ebg ];_bce +=_ad [_agg ];_ebf +=_cdf [_agg ]+_ebg *8*_ad [_agg ];};_cfc +=_bce ;_bed +=_bce *_daa ;};_fca [_dad ]=_cfc ;if _cfc > 0{(*_acf )[_dad ]=_e .Point {X :float32 (_ebf )/float32 (_cfc ),Y :float32 (_bed )/float32 (_cfc )};
}else {(*_acf )[_dad ]=_e .Point {X :float32 (_ccd .Width )/float32 (2),Y :float32 (_ccd .Height )/float32 (2)};};};if _dab =_ed .CentroidPoints .Add (_acf );_dab !=nil {return _ce .Wrap (_dab ,_dbe ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");
};var (_agc ,_fef ,_ff int ;_ecb float64 ;_fbf ,_dbd ,_edg ,_ggcg float32 ;_dee ,_bad _e .Point ;_ced bool ;_ebe *similarTemplatesFinder ;_cea int ;_acg *_e .Bitmap ;_bfc *_a .Rectangle ;_bg *_e .Bitmaps ;);for _cea ,_agd =range _ae .Values {_fef =_fca [_cea ];
if _fbf ,_dbd ,_dab =_acf .GetGeometry (_cea );_dab !=nil {return _ce .Wrap (_dab ,_dbe ,"\u0070t\u0061\u0020\u002d\u0020\u0069");};_ced =false ;_ebfb :=len (_ed .UndilatedTemplates .Values );_ebe =_aa (_ed ,_agd );for _ccb :=_ebe .Next ();_ccb > -1;{if _acg ,_dab =_ed .UndilatedTemplates .GetBitmap (_ccb );
_dab !=nil {return _ce .Wrap (_dab ,_dbe ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");};if _ff ,_dab =_edb .GetInt (_ccb );_dab !=nil {_af .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dab );
};if _edg ,_ggcg ,_dab =_ed .CentroidPointsTemplates .GetGeometry (_ccb );_dab !=nil {return _ce .Wrap (_dab ,_dbe ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _ed .Settings .WeightFactor > 0.0{if _agc ,_dab =_ed .TemplateAreas .Get (_ccb );_dab !=nil {_af .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_dab );
};_ecb =_ed .Settings .Thresh +(1.0-_ed .Settings .Thresh )*_ed .Settings .WeightFactor *float64 (_ff )/float64 (_agc );}else {_ecb =_ed .Settings .Thresh ;};_efdf ,_ecbg :=_e .CorrelationScoreThresholded (_agd ,_acg ,_fef ,_ff ,_dee .X -_bad .X ,_dee .Y -_bad .Y ,MaxDiffWidth ,MaxDiffHeight ,_ad ,_ccf [_cea ],float32 (_ecb ));
if _ecbg !=nil {return _ce .Wrap (_ecbg ,_dbe ,"");};if _caf {var (_edgd ,_bfg float64 ;_bebe ,_cdfd int ;);_edgd ,_ecbg =_e .CorrelationScore (_agd ,_acg ,_fef ,_ff ,_fbf -_edg ,_dbd -_ggcg ,MaxDiffWidth ,MaxDiffHeight ,_ad );if _ecbg !=nil {return _ce .Wrap (_ecbg ,_dbe ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_bfg ,_ecbg =_e .CorrelationScoreSimple (_agd ,_acg ,_fef ,_ff ,_fbf -_edg ,_dbd -_ggcg ,MaxDiffWidth ,MaxDiffHeight ,_ad );if _ecbg !=nil {return _ce .Wrap (_ecbg ,_dbe ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_bebe =int (_b .Sqrt (_edgd *float64 (_fef )*float64 (_ff )));_cdfd =int (_b .Sqrt (_bfg *float64 (_fef )*float64 (_ff )));if (_edgd >=_ecb )!=(_bfg >=_ecb ){return _ce .Errorf (_dbe ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_bebe ,_edgd ,_edgd >=_ecb ,_cdfd ,_bfg ,_bfg >=_ecb ,_edgd -_bfg );
};if _edgd >=_ecb !=_efdf {return _ce .Errorf (_dbe ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_edgd ,_edgd *float64 (_fef )*float64 (_ff ),_bebe ,_ecb ,float32 (_ecb )*float32 (_fef )*float32 (_ff ),_efdf );
};};if _efdf {_ced =true ;if _ecbg =_ed .ClassIDs .Add (_ccb );_ecbg !=nil {return _ce .Wrap (_ecbg ,_dbe ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _ecbg =_ed .ComponentPageNumbers .Add (_bda );_ecbg !=nil {return _ce .Wrap (_ecbg ,_dbe ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _ed .Settings .KeepClassInstances {if _beba ,_ecbg =_bac .GetBitmap (_cea );_ecbg !=nil {return _ce .Wrap (_ecbg ,_dbe ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _bg ,_ecbg =_ed .ClassInstances .GetBitmaps (_ccb );
_ecbg !=nil {return _ce .Wrap (_ecbg ,_dbe ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_bg .AddBitmap (_beba );if _bfc ,_ecbg =_abe .Get (_cea );_ecbg !=nil {return _ce .Wrap (_ecbg ,_dbe ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_bg .AddBox (_bfc );};break ;};};if !_ced {if _dab =_ed .ClassIDs .Add (_ebfb );_dab !=nil {return _ce .Wrap (_dab ,_dbe ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _dab =_ed .ComponentPageNumbers .Add (_bda );_dab !=nil {return _ce .Wrap (_dab ,_dbe ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_bg =&_e .Bitmaps {};if _beba ,_dab =_bac .GetBitmap (_cea );_dab !=nil {return _ce .Wrap (_dab ,_dbe ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_bg .AddBitmap (_beba );_bcc ,_ddb :=_beba .Width ,_beba .Height ;_bbf :=uint64 (_ddb )*uint64 (_bcc );_ed .TemplatesSize .Add (_bbf ,_ebfb );
if _bfc ,_dab =_abe .Get (_cea );_dab !=nil {return _ce .Wrap (_dab ,_dbe ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_bg .AddBox (_bfc );_ed .ClassInstances .AddBitmaps (_bg );_ed .CentroidPointsTemplates .AddPoint (_fbf ,_dbd );_ed .FgTemplates .AddInt (_fef );
_ed .UndilatedTemplates .AddBitmap (_beba );_agc =(_agd .Width -2*JbAddedPixels )*(_agd .Height -2*JbAddedPixels );if _dab =_ed .TemplateAreas .Add (_agc );_dab !=nil {return _ce .Wrap (_dab ,_dbe ,"\u0021\u0066\u006f\u0075\u006e\u0064");};};};_ed .NumberOfClasses =len (_ed .UndilatedTemplates .Values );
return nil ;};const JbAddedPixels =6;func (_ge *Classer )getULCorners (_ef *_e .Bitmap ,_fd *_e .Boxes )error {const _eg ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";if _ef ==nil {return _ce .Error (_eg ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");
};if _fd ==nil {return _ce .Error (_eg ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _ge .PtaUL ==nil {_ge .PtaUL =&_e .Points {};};_gg :=len (*_fd );var (_db ,_cb ,_cca ,_bff int ;_fe ,_gb ,_fcb ,_cce float32 ;_cad error ;_cbd *_a .Rectangle ;
_cef *_e .Bitmap ;_de _a .Point ;);for _beb :=0;_beb < _gg ;_beb ++{_db =_ge .BaseIndex +_beb ;if _fe ,_gb ,_cad =_ge .CentroidPoints .GetGeometry (_db );_cad !=nil {return _ce .Wrap (_cad ,_eg ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");
};if _cb ,_cad =_ge .ClassIDs .Get (_db );_cad !=nil {return _ce .Wrap (_cad ,_eg ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");};if _fcb ,_cce ,_cad =_ge .CentroidPointsTemplates .GetGeometry (_cb );_cad !=nil {return _ce .Wrap (_cad ,_eg ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");
};_bd :=_fcb -_fe ;_ac :=_cce -_gb ;if _bd >=0{_cca =int (_bd +0.5);}else {_cca =int (_bd -0.5);};if _ac >=0{_bff =int (_ac +0.5);}else {_bff =int (_ac -0.5);};if _cbd ,_cad =_fd .Get (_beb );_cad !=nil {return _ce .Wrap (_cad ,_eg ,"");};_cf ,_caa :=_cbd .Min .X ,_cbd .Min .Y ;
_cef ,_cad =_ge .UndilatedTemplates .GetBitmap (_cb );if _cad !=nil {return _ce .Wrap (_cad ,_eg ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_de ,_cad =_bb (_ef ,_cf ,_caa ,_cca ,_bff ,_cef );if _cad !=nil {return _ce .Wrap (_cad ,_eg ,"");};_ge .PtaUL .AddPoint (float32 (_cf -_cca +_de .X ),float32 (_caa -_bff +_de .Y ));};return nil ;};type similarTemplatesFinder struct{Classer *Classer ;
Width int ;Height int ;Index int ;CurrentNumbers []int ;N int ;};