//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (_fe "github.com/unidoc/unipdf/v3/common";_bd "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_a "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_bf "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "image";_fd "math";
);func _df (_eg *_a .Bitmap ,_cbd ,_gad ,_dc ,_cf int ,_fge *_a .Bitmap )(_gb _f .Point ,_da error ){const _cc ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";if _eg ==nil {return _gb ,_bf .Error (_cc ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};if _fge ==nil {return _gb ,_bf .Error (_cc ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");};_bga ,_eaf :=_fge .Width ,_fge .Height ;_ec ,_acb :=_cbd -_dc -JbAddedPixels ,_gad -_cf -JbAddedPixels ;
_fe .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_cbd ,_gad ,_bga ,_eaf ,_ec ,_acb );
_aff ,_da :=_a .Rect (_ec ,_acb ,_bga ,_eaf );if _da !=nil {return _gb ,_bf .Wrap (_da ,_cc ,"");};_fcc ,_ ,_da :=_eg .ClipRectangle (_aff );if _da !=nil {_fe .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_aff );
return _gb ,_bf .Wrap (_da ,_cc ,"");};_ggd :=_a .New (_fcc .Width ,_fcc .Height );_gdd :=_fd .MaxInt32 ;var _agc ,_bfga ,_fdd ,_cfc ,_aeag int ;for _agc =-1;_agc <=1;_agc ++{for _bfga =-1;_bfga <=1;_bfga ++{if _ ,_da =_a .Copy (_ggd ,_fcc );_da !=nil {return _gb ,_bf .Wrap (_da ,_cc ,"");
};if _da =_ggd .RasterOperation (_bfga ,_agc ,_bga ,_eaf ,_a .PixSrcXorDst ,_fge ,0,0);_da !=nil {return _gb ,_bf .Wrap (_da ,_cc ,"");};_fdd =_ggd .CountPixels ();if _fdd < _gdd {_cfc =_bfga ;_aeag =_agc ;_gdd =_fdd ;};};};_gb .X =_cfc ;_gb .Y =_aeag ;
return _gb ,nil ;};func DefaultSettings ()Settings {_bed :=&Settings {};_bed .SetDefault ();return *_bed };func (_agcd *Settings )SetDefault (){if _agcd .MaxCompWidth ==0{switch _agcd .Components {case _a .ComponentConn :_agcd .MaxCompWidth =MaxConnCompWidth ;
case _a .ComponentCharacters :_agcd .MaxCompWidth =MaxCharCompWidth ;case _a .ComponentWords :_agcd .MaxCompWidth =MaxWordCompWidth ;};};if _agcd .MaxCompHeight ==0{_agcd .MaxCompHeight =MaxCompHeight ;};if _agcd .Thresh ==0.0{_agcd .Thresh =0.9;};if _agcd .WeightFactor ==0.0{_agcd .WeightFactor =0.75;
};if _agcd .RankHaus ==0.0{_agcd .RankHaus =0.97;};if _agcd .SizeHaus ==0{_agcd .SizeHaus =2;};};func (_egb *Classer )classifyRankHaus (_efg *_a .Boxes ,_dgc *_a .Bitmaps ,_aaa int )error {const _bbb ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";
if _efg ==nil {return _bf .Error (_bbb ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _dgc ==nil {return _bf .Error (_bbb ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_faag :=len (_dgc .Values );if _faag ==0{return _bf .Error (_bbb ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");};_ece :=_dgc .CountPixels ();_dff :=_egb .Settings .SizeHaus ;_fadg :=_a .SelCreateBrick (_dff ,_dff ,_dff /2,_dff /2,_a .SelHit );
_gc :=&_a .Bitmaps {Values :make ([]*_a .Bitmap ,_faag )};_beg :=&_a .Bitmaps {Values :make ([]*_a .Bitmap ,_faag )};var (_abb ,_baad ,_bee *_a .Bitmap ;_cgd error ;);for _cff :=0;_cff < _faag ;_cff ++{_abb ,_cgd =_dgc .GetBitmap (_cff );if _cgd !=nil {return _bf .Wrap (_cgd ,_bbb ,"");
};_baad ,_cgd =_abb .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _cgd !=nil {return _bf .Wrap (_cgd ,_bbb ,"");};_bee ,_cgd =_a .Dilate (nil ,_baad ,_fadg );if _cgd !=nil {return _bf .Wrap (_cgd ,_bbb ,"");};_gc .Values [_faag ]=_baad ;
_beg .Values [_faag ]=_bee ;};_cbe ,_cgd :=_a .Centroids (_gc .Values );if _cgd !=nil {return _bf .Wrap (_cgd ,_bbb ,"");};if _cgd =_cbe .Add (_egb .CentroidPoints );_cgd !=nil {_fe .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");
};if _egb .Settings .RankHaus ==1.0{_cgd =_egb .classifyRankHouseOne (_efg ,_dgc ,_gc ,_beg ,_cbe ,_aaa );}else {_cgd =_egb .classifyRankHouseNonOne (_efg ,_dgc ,_gc ,_beg ,_cbe ,_ece ,_aaa );};if _cgd !=nil {return _bf .Wrap (_cgd ,_bbb ,"");};return nil ;
};func (_dbd *Classer )classifyRankHouseOne (_bbfd *_a .Boxes ,_gdb ,_acg ,_efbg *_a .Bitmaps ,_ecg *_a .Points ,_agf int )(_fbad error ){const _ecf ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_fgec ,_gde ,_cgb ,_bgag float32 ;_fbb int ;_bdc ,_efe ,_adb ,_bcg ,_beeg *_a .Bitmap ;_bdf ,_de bool ;);for _dde :=0;_dde < len (_gdb .Values );_dde ++{_efe =_acg .Values [_dde ];_adb =_efbg .Values [_dde ];_fgec ,_gde ,_fbad =_ecg .GetGeometry (_dde );
if _fbad !=nil {return _bf .Wrapf (_fbad ,_ecf ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_bgc :=len (_dbd .UndilatedTemplates .Values );_bdf =false ;_dgb :=_adg (_dbd ,_efe );for _fbb =_dgb .Next ();_fbb > -1;
{_bcg ,_fbad =_dbd .UndilatedTemplates .GetBitmap (_fbb );if _fbad !=nil {return _bf .Wrap (_fbad ,_ecf ,"\u0062\u006d\u0033");};_beeg ,_fbad =_dbd .DilatedTemplates .GetBitmap (_fbb );if _fbad !=nil {return _bf .Wrap (_fbad ,_ecf ,"\u0062\u006d\u0034");
};_cgb ,_bgag ,_fbad =_dbd .CentroidPointsTemplates .GetGeometry (_fbb );if _fbad !=nil {return _bf .Wrap (_fbad ,_ecf ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_de ,_fbad =_a .HausTest (_efe ,_adb ,_bcg ,_beeg ,_fgec -_cgb ,_gde -_bgag ,MaxDiffWidth ,MaxDiffHeight );
if _fbad !=nil {return _bf .Wrap (_fbad ,_ecf ,"");};if _de {_bdf =true ;if _fbad =_dbd .ClassIDs .Add (_fbb );_fbad !=nil {return _bf .Wrap (_fbad ,_ecf ,"");};if _fbad =_dbd .ComponentPageNumbers .Add (_agf );_fbad !=nil {return _bf .Wrap (_fbad ,_ecf ,"");
};if _dbd .Settings .KeepClassInstances {_fdf ,_dgcg :=_dbd .ClassInstances .GetBitmaps (_fbb );if _dgcg !=nil {return _bf .Wrap (_dgcg ,_ecf ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_bdc ,_dgcg =_gdb .GetBitmap (_dde );if _dgcg !=nil {return _bf .Wrap (_dgcg ,_ecf ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");
};_fdf .AddBitmap (_bdc );_gdbe ,_dgcg :=_bbfd .Get (_dde );if _dgcg !=nil {return _bf .Wrap (_dgcg ,_ecf ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_fdf .AddBox (_gdbe );};break ;};};if !_bdf {if _fbad =_dbd .ClassIDs .Add (_bgc );_fbad !=nil {return _bf .Wrap (_fbad ,_ecf ,"");
};if _fbad =_dbd .ComponentPageNumbers .Add (_agf );_fbad !=nil {return _bf .Wrap (_fbad ,_ecf ,"");};_egd :=&_a .Bitmaps {};_bdc ,_fbad =_gdb .GetBitmap (_dde );if _fbad !=nil {return _bf .Wrap (_fbad ,_ecf ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_egd .Values =append (_egd .Values ,_bdc );
_fbc ,_ega :=_bdc .Width ,_bdc .Height ;_dbd .TemplatesSize .Add (uint64 (_ega )*uint64 (_fbc ),_bgc );_aae ,_bae :=_bbfd .Get (_dde );if _bae !=nil {return _bf .Wrap (_bae ,_ecf ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_egd .AddBox (_aae );_dbd .ClassInstances .AddBitmaps (_egd );
_dbd .CentroidPointsTemplates .AddPoint (_fgec ,_gde );_dbd .UndilatedTemplates .AddBitmap (_efe );_dbd .DilatedTemplates .AddBitmap (_adb );};};return nil ;};const JbAddedPixels =6;func (_bg *Classer )ComputeLLCorners ()(_eb error ){const _ae ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _bg .PtaUL ==nil {return _bf .Error (_ae ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};_fa :=len (*_bg .PtaUL );_bg .PtaLL =&_a .Points {};var (_ea ,_c float32 ;_d ,_fb int ;
_ge *_a .Bitmap ;);for _ebc :=0;_ebc < _fa ;_ebc ++{_ea ,_c ,_eb =_bg .PtaUL .GetGeometry (_ebc );if _eb !=nil {_fe .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_eb );
return _bf .Wrap (_eb ,_ae ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_d ,_eb =_bg .ClassIDs .Get (_ebc );if _eb !=nil {_fe .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_eb );
return _bf .Wrap (_eb ,_ae ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_ge ,_eb =_bg .UndilatedTemplates .GetBitmap (_d );if _eb !=nil {_fe .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_eb );
return _bf .Wrap (_eb ,_ae ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_fb =_ge .Height ;_bg .PtaLL .AddPoint (_ea ,_c +float32 (_fb ));};return nil ;};var _cda bool ;const (RankHaus Method =iota ;
Correlation ;);func (_cb *Classer )addPageComponents (_fde *_a .Bitmap ,_gd *_a .Boxes ,_db *_a .Bitmaps ,_fae int ,_dd Method )error {const _fbe ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _fde ==nil {return _bf .Error (_fbe ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _gd ==nil ||_db ==nil ||len (*_gd )==0{_fe .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_fde );
return nil ;};var _aeb error ;switch _dd {case RankHaus :_aeb =_cb .classifyRankHaus (_gd ,_db ,_fae );case Correlation :_aeb =_cb .classifyCorrelation (_gd ,_db ,_fae );default:_fe .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_dd );
return _bf .Error (_fbe ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _aeb !=nil {return _bf .Wrap (_aeb ,_fbe ,"");};if _aeb =_cb .getULCorners (_fde ,_gd );_aeb !=nil {return _bf .Wrap (_aeb ,_fbe ,"");
};_fdb :=len (*_gd );_cb .BaseIndex +=_fdb ;if _aeb =_cb .ComponentsNumber .Add (_fdb );_aeb !=nil {return _bf .Wrap (_aeb ,_fbe ,"");};return nil ;};func (_ff Settings )Validate ()error {const _eed ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";
if _ff .Thresh < 0.4||_ff .Thresh > 0.98{return _bf .Error (_eed ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _ff .WeightFactor < 0.0||_ff .WeightFactor > 1.0{return _bf .Error (_eed ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _ff .RankHaus < 0.5||_ff .RankHaus > 1.0{return _bf .Error (_eed ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _ff .SizeHaus < 1||_ff .SizeHaus > 10{return _bf .Error (_eed ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _ff .Components {case _a .ComponentConn ,_a .ComponentCharacters ,_a .ComponentWords :default:return _bf .Error (_eed ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};func (_ef *Classer )classifyCorrelation (_bff *_a .Boxes ,_efb *_a .Bitmaps ,_agb int )error {const _affd ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";if _bff ==nil {return _bf .Error (_affd ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _efb ==nil {return _bf .Error (_affd ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_fdbc :=len (_efb .Values );if _fdbc ==0{_fe .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_ab ,_aa *_a .Bitmap ;_ad error ;);_gae :=&_a .Bitmaps {Values :make ([]*_a .Bitmap ,_fdbc )};for _bdd ,_fgd :=range _efb .Values {_aa ,_ad =_fgd .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _ad !=nil {return _bf .Wrap (_ad ,_affd ,"");
};_gae .Values [_bdd ]=_aa ;};_ggdf :=_ef .FgTemplates ;_eff :=_a .MakePixelSumTab8 ();_bc :=_a .MakePixelCentroidTab8 ();_dfc :=make ([]int ,_fdbc );_acc :=make ([][]int ,_fdbc );_bce :=_a .Points (make ([]_a .Point ,_fdbc ));_dfa :=&_bce ;var (_bad ,_ddf int ;
_aga ,_cbcd ,_dcg int ;_gef ,_aaf int ;_bbd byte ;);for _ged ,_dda :=range _gae .Values {_acc [_ged ]=make ([]int ,_dda .Height );_bad =0;_ddf =0;_cbcd =(_dda .Height -1)*_dda .RowStride ;_aga =0;for _aaf =_dda .Height -1;_aaf >=0;_aaf ,_cbcd =_aaf -1,_cbcd -_dda .RowStride {_acc [_ged ][_aaf ]=_aga ;
_dcg =0;for _gef =0;_gef < _dda .RowStride ;_gef ++{_bbd =_dda .Data [_cbcd +_gef ];_dcg +=_eff [_bbd ];_bad +=_bc [_bbd ]+_gef *8*_eff [_bbd ];};_aga +=_dcg ;_ddf +=_dcg *_aaf ;};_dfc [_ged ]=_aga ;if _aga > 0{(*_dfa )[_ged ]=_a .Point {X :float32 (_bad )/float32 (_aga ),Y :float32 (_ddf )/float32 (_aga )};
}else {(*_dfa )[_ged ]=_a .Point {X :float32 (_dda .Width )/float32 (2),Y :float32 (_dda .Height )/float32 (2)};};};if _ad =_ef .CentroidPoints .Add (_dfa );_ad !=nil {return _bf .Wrap (_ad ,_affd ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");
};var (_dcgc ,_cge ,_fac int ;_cgf float64 ;_ddc ,_fag ,_baa ,_eab float32 ;_gaa ,_daa _a .Point ;_ggdc bool ;_dba *similarTemplatesFinder ;_dfe int ;_effg *_a .Bitmap ;_fba *_f .Rectangle ;_cdf *_a .Bitmaps ;);for _dfe ,_aa =range _gae .Values {_cge =_dfc [_dfe ];
if _ddc ,_fag ,_ad =_dfa .GetGeometry (_dfe );_ad !=nil {return _bf .Wrap (_ad ,_affd ,"\u0070t\u0061\u0020\u002d\u0020\u0069");};_ggdc =false ;_fgf :=len (_ef .UndilatedTemplates .Values );_dba =_adg (_ef ,_aa );for _fad :=_dba .Next ();_fad > -1;{if _effg ,_ad =_ef .UndilatedTemplates .GetBitmap (_fad );
_ad !=nil {return _bf .Wrap (_ad ,_affd ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");};if _fac ,_ad =_ggdf .GetInt (_fad );_ad !=nil {_fe .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ad );
};if _baa ,_eab ,_ad =_ef .CentroidPointsTemplates .GetGeometry (_fad );_ad !=nil {return _bf .Wrap (_ad ,_affd ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _ef .Settings .WeightFactor > 0.0{if _dcgc ,_ad =_ef .TemplateAreas .Get (_fad );_ad !=nil {_fe .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_ad );
};_cgf =_ef .Settings .Thresh +(1.0-_ef .Settings .Thresh )*_ef .Settings .WeightFactor *float64 (_fac )/float64 (_dcgc );}else {_cgf =_ef .Settings .Thresh ;};_dcga ,_gfd :=_a .CorrelationScoreThresholded (_aa ,_effg ,_cge ,_fac ,_gaa .X -_daa .X ,_gaa .Y -_daa .Y ,MaxDiffWidth ,MaxDiffHeight ,_eff ,_acc [_dfe ],float32 (_cgf ));
if _gfd !=nil {return _bf .Wrap (_gfd ,_affd ,"");};if _cda {var (_aee ,_fdc float64 ;_ada ,_faa int ;);_aee ,_gfd =_a .CorrelationScore (_aa ,_effg ,_cge ,_fac ,_ddc -_baa ,_fag -_eab ,MaxDiffWidth ,MaxDiffHeight ,_eff );if _gfd !=nil {return _bf .Wrap (_gfd ,_affd ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_fdc ,_gfd =_a .CorrelationScoreSimple (_aa ,_effg ,_cge ,_fac ,_ddc -_baa ,_fag -_eab ,MaxDiffWidth ,MaxDiffHeight ,_eff );if _gfd !=nil {return _bf .Wrap (_gfd ,_affd ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_ada =int (_fd .Sqrt (_aee *float64 (_cge )*float64 (_fac )));_faa =int (_fd .Sqrt (_fdc *float64 (_cge )*float64 (_fac )));if (_aee >=_cgf )!=(_fdc >=_cgf ){return _bf .Errorf (_affd ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_ada ,_aee ,_aee >=_cgf ,_faa ,_fdc ,_fdc >=_cgf ,_aee -_fdc );
};if _aee >=_cgf !=_dcga {return _bf .Errorf (_affd ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_aee ,_aee *float64 (_cge )*float64 (_fac ),_ada ,_cgf ,float32 (_cgf )*float32 (_cge )*float32 (_fac ),_dcga );
};};if _dcga {_ggdc =true ;if _gfd =_ef .ClassIDs .Add (_fad );_gfd !=nil {return _bf .Wrap (_gfd ,_affd ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _gfd =_ef .ComponentPageNumbers .Add (_agb );_gfd !=nil {return _bf .Wrap (_gfd ,_affd ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _ef .Settings .KeepClassInstances {if _ab ,_gfd =_efb .GetBitmap (_dfe );_gfd !=nil {return _bf .Wrap (_gfd ,_affd ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _cdf ,_gfd =_ef .ClassInstances .GetBitmaps (_fad );
_gfd !=nil {return _bf .Wrap (_gfd ,_affd ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_cdf .AddBitmap (_ab );if _fba ,_gfd =_bff .Get (_dfe );_gfd !=nil {return _bf .Wrap (_gfd ,_affd ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_cdf .AddBox (_fba );};break ;};};if !_ggdc {if _ad =_ef .ClassIDs .Add (_fgf );_ad !=nil {return _bf .Wrap (_ad ,_affd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _ad =_ef .ComponentPageNumbers .Add (_agb );_ad !=nil {return _bf .Wrap (_ad ,_affd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_cdf =&_a .Bitmaps {};if _ab ,_ad =_efb .GetBitmap (_dfe );_ad !=nil {return _bf .Wrap (_ad ,_affd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_cdf .AddBitmap (_ab );_ddb ,_adf :=_ab .Width ,_ab .Height ;_agaf :=uint64 (_adf )*uint64 (_ddb );_ef .TemplatesSize .Add (_agaf ,_fgf );
if _fba ,_ad =_bff .Get (_dfe );_ad !=nil {return _bf .Wrap (_ad ,_affd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_cdf .AddBox (_fba );_ef .ClassInstances .AddBitmaps (_cdf );_ef .CentroidPointsTemplates .AddPoint (_ddc ,_fag );_ef .FgTemplates .AddInt (_cge );
_ef .UndilatedTemplates .AddBitmap (_ab );_dcgc =(_aa .Width -2*JbAddedPixels )*(_aa .Height -2*JbAddedPixels );if _ad =_ef .TemplateAreas .Add (_dcgc );_ad !=nil {return _bf .Wrap (_ad ,_affd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};};};_ef .NumberOfClasses =len (_ef .UndilatedTemplates .Values );
return nil ;};type similarTemplatesFinder struct{Classer *Classer ;Width int ;Height int ;Index int ;CurrentNumbers []int ;N int ;};const (MaxDiffWidth =2;MaxDiffHeight =2;);var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};
func (_ccg *Classer )classifyRankHouseNonOne (_fgc *_a .Boxes ,_ee ,_bge ,_ce *_a .Bitmaps ,_ed *_a .Points ,_ddg *_bd .NumSlice ,_febc int )(_adbf error ){const _fccd ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_dcc ,_acbd ,_dbe ,_faef float32 ;_fdba ,_dbf ,_dae int ;_ecff ,_fbade ,_ddad ,_fgcb ,_bcf *_a .Bitmap ;_edc ,_ecee bool ;);_gdg :=_a .MakePixelSumTab8 ();for _eeb :=0;_eeb < len (_ee .Values );_eeb ++{if _fbade ,_adbf =_bge .GetBitmap (_eeb );_adbf !=nil {return _bf .Wrap (_adbf ,_fccd ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};if _fdba ,_adbf =_ddg .GetInt (_eeb );_adbf !=nil {_fe .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_eeb ,_adbf );
};if _ddad ,_adbf =_ce .GetBitmap (_eeb );_adbf !=nil {return _bf .Wrap (_adbf ,_fccd ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _dcc ,_acbd ,_adbf =_ed .GetGeometry (_eeb );_adbf !=nil {return _bf .Wrapf (_adbf ,_fccd ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_cef :=len (_ccg .UndilatedTemplates .Values );_edc =false ;_ca :=_adg (_ccg ,_fbade );for _dae =_ca .Next ();_dae > -1;{if _fgcb ,_adbf =_ccg .UndilatedTemplates .GetBitmap (_dae );_adbf !=nil {return _bf .Wrap (_adbf ,_fccd ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _dbf ,_adbf =_ccg .FgTemplates .GetInt (_dae );_adbf !=nil {_fe .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_dae ,_adbf );
};if _bcf ,_adbf =_ccg .DilatedTemplates .GetBitmap (_dae );_adbf !=nil {return _bf .Wrap (_adbf ,_fccd ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _dbe ,_faef ,_adbf =_ccg .CentroidPointsTemplates .GetGeometry (_dae );
_adbf !=nil {return _bf .Wrap (_adbf ,_fccd ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_ecee ,_adbf =_a .RankHausTest (_fbade ,_ddad ,_fgcb ,_bcf ,_dcc -_dbe ,_acbd -_faef ,MaxDiffWidth ,MaxDiffHeight ,_fdba ,_dbf ,float32 (_ccg .Settings .RankHaus ),_gdg );
if _adbf !=nil {return _bf .Wrap (_adbf ,_fccd ,"");};if _ecee {_edc =true ;if _adbf =_ccg .ClassIDs .Add (_dae );_adbf !=nil {return _bf .Wrap (_adbf ,_fccd ,"");};if _adbf =_ccg .ComponentPageNumbers .Add (_febc );_adbf !=nil {return _bf .Wrap (_adbf ,_fccd ,"");
};if _ccg .Settings .KeepClassInstances {_accf ,_gaad :=_ccg .ClassInstances .GetBitmaps (_dae );if _gaad !=nil {return _bf .Wrap (_gaad ,_fccd ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");
};if _ecff ,_gaad =_ee .GetBitmap (_eeb );_gaad !=nil {return _bf .Wrap (_gaad ,_fccd ,"\u0070i\u0078\u0061\u005b\u0069\u005d");};_accf .Values =append (_accf .Values ,_ecff );_gfcf ,_gaad :=_fgc .Get (_eeb );if _gaad !=nil {return _bf .Wrap (_gaad ,_fccd ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};_accf .Boxes =append (_accf .Boxes ,_gfcf );};break ;};};if !_edc {if _adbf =_ccg .ClassIDs .Add (_cef );_adbf !=nil {return _bf .Wrap (_adbf ,_fccd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _adbf =_ccg .ComponentPageNumbers .Add (_febc );_adbf !=nil {return _bf .Wrap (_adbf ,_fccd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_cga :=&_a .Bitmaps {};_ecff =_ee .Values [_eeb ];_cga .AddBitmap (_ecff );_fbcb ,_gaf :=_ecff .Width ,_ecff .Height ;_ccg .TemplatesSize .Add (uint64 (_fbcb )*uint64 (_gaf ),_cef );_dfee ,_gab :=_fgc .Get (_eeb );if _gab !=nil {return _bf .Wrap (_gab ,_fccd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_cga .AddBox (_dfee );_ccg .ClassInstances .AddBitmaps (_cga );_ccg .CentroidPointsTemplates .AddPoint (_dcc ,_acbd );_ccg .UndilatedTemplates .AddBitmap (_fbade );_ccg .DilatedTemplates .AddBitmap (_ddad );_ccg .FgTemplates .AddInt (_fdba );};};_ccg .NumberOfClasses =len (_ccg .UndilatedTemplates .Values );
return nil ;};type Classer struct{BaseIndex int ;Settings Settings ;ComponentsNumber *_bd .IntSlice ;TemplateAreas *_bd .IntSlice ;Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_a .BitmapsArray ;UndilatedTemplates *_a .Bitmaps ;
DilatedTemplates *_a .Bitmaps ;TemplatesSize _bd .IntsMap ;FgTemplates *_bd .NumSlice ;CentroidPoints *_a .Points ;CentroidPointsTemplates *_a .Points ;ClassIDs *_bd .IntSlice ;ComponentPageNumbers *_bd .IntSlice ;PtaUL *_a .Points ;PtaLL *_a .Points ;
};func Init (settings Settings )(*Classer ,error ){const _g ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";_ba :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_bd .IntsMap {},TemplateAreas :&_bd .IntSlice {},ComponentPageNumbers :&_bd .IntSlice {},ClassIDs :&_bd .IntSlice {},ComponentsNumber :&_bd .IntSlice {},CentroidPoints :&_a .Points {},CentroidPointsTemplates :&_a .Points {},UndilatedTemplates :&_a .Bitmaps {},DilatedTemplates :&_a .Bitmaps {},ClassInstances :&_a .BitmapsArray {},FgTemplates :&_bd .NumSlice {}};
if _bb :=_ba .Settings .Validate ();_bb !=nil {return nil ,_bf .Wrap (_bb ,_g ,"");};return _ba ,nil ;};func (_gg *Classer )verifyMethod (_fga Method )error {if _fga !=RankHaus &&_fga !=Correlation {return _bf .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};func (_gge *similarTemplatesFinder )Next ()int {var (_gfb ,_fgcc ,_aeeb ,_bbg int ;_age bool ;_feg *_a .Bitmap ;_gbb error ;);for {if _gge .Index >=25{return -1;};_fgcc =_gge .Width +TwoByTwoWalk [2*_gge .Index ];_gfb =_gge .Height +TwoByTwoWalk [2*_gge .Index +1];
if _gfb < 1||_fgcc < 1{_gge .Index ++;continue ;};if len (_gge .CurrentNumbers )==0{_gge .CurrentNumbers ,_age =_gge .Classer .TemplatesSize .GetSlice (uint64 (_fgcc )*uint64 (_gfb ));if !_age {_gge .Index ++;continue ;};_gge .N =0;};_aeeb =len (_gge .CurrentNumbers );
for ;_gge .N < _aeeb ;_gge .N ++{_bbg =_gge .CurrentNumbers [_gge .N ];_feg ,_gbb =_gge .Classer .DilatedTemplates .GetBitmap (_bbg );if _gbb !=nil {_fe .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _feg .Width -2*JbAddedPixels ==_fgcc &&_feg .Height -2*JbAddedPixels ==_gfb {return _bbg ;};};_gge .Index ++;_gge .CurrentNumbers =nil ;};};func (_feb *Classer )getULCorners (_fec *_a .Bitmap ,_dg *_a .Boxes )error {const _cbc ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _fec ==nil {return _bf .Error (_cbc ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _dg ==nil {return _bf .Error (_cbc ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _feb .PtaUL ==nil {_feb .PtaUL =&_a .Points {};
};_af :=len (*_dg );var (_fg ,_bfa ,_be ,_dgd int ;_cbcb ,_ag ,_aea ,_agd float32 ;_cg error ;_gf *_f .Rectangle ;_gfc *_a .Bitmap ;_bfg _f .Point ;);for _bbf :=0;_bbf < _af ;_bbf ++{_fg =_feb .BaseIndex +_bbf ;if _cbcb ,_ag ,_cg =_feb .CentroidPoints .GetGeometry (_fg );
_cg !=nil {return _bf .Wrap (_cg ,_cbc ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");};if _bfa ,_cg =_feb .ClassIDs .Get (_fg );_cg !=nil {return _bf .Wrap (_cg ,_cbc ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");
};if _aea ,_agd ,_cg =_feb .CentroidPointsTemplates .GetGeometry (_bfa );_cg !=nil {return _bf .Wrap (_cg ,_cbc ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_cd :=_aea -_cbcb ;
_ebca :=_agd -_ag ;if _cd >=0{_be =int (_cd +0.5);}else {_be =int (_cd -0.5);};if _ebca >=0{_dgd =int (_ebca +0.5);}else {_dgd =int (_ebca -0.5);};if _gf ,_cg =_dg .Get (_bbf );_cg !=nil {return _bf .Wrap (_cg ,_cbc ,"");};_bda ,_fgg :=_gf .Min .X ,_gf .Min .Y ;
_gfc ,_cg =_feb .UndilatedTemplates .GetBitmap (_bfa );if _cg !=nil {return _bf .Wrap (_cg ,_cbc ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_bfg ,_cg =_df (_fec ,_bda ,_fgg ,_be ,_dgd ,_gfc );if _cg !=nil {return _bf .Wrap (_cg ,_cbc ,"");};_feb .PtaUL .AddPoint (float32 (_bda -_be +_bfg .X ),float32 (_fgg -_dgd +_bfg .Y ));};return nil ;};func _adg (_gec *Classer ,_fada *_a .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_fada .Width ,Height :_fada .Height ,Classer :_gec };
};func (_fc *Classer )AddPage (inputPage *_a .Bitmap ,pageNumber int ,method Method )(_ac error ){const _ga ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";_fc .Widths [pageNumber ]=inputPage .Width ;_fc .Heights [pageNumber ]=inputPage .Height ;
if _ac =_fc .verifyMethod (method );_ac !=nil {return _bf .Wrap (_ac ,_ga ,"");};_e ,_bfe ,_ac :=inputPage .GetComponents (_fc .Settings .Components ,_fc .Settings .MaxCompWidth ,_fc .Settings .MaxCompHeight );if _ac !=nil {return _bf .Wrap (_ac ,_ga ,"");
};_fe .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_e );if _ac =_fc .addPageComponents (inputPage ,_bfe ,_e ,pageNumber ,method );_ac !=nil {return _bf .Wrap (_ac ,_ga ,"");};return nil ;};const (MaxConnCompWidth =350;
MaxCharCompWidth =350;MaxWordCompWidth =1000;MaxCompHeight =120;);type Settings struct{MaxCompWidth int ;MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;WeightFactor float64 ;KeepClassInstances bool ;Components _a .Component ;Method Method ;
};type Method int ;