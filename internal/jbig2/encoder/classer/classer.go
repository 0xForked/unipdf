//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (_f "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_e "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_be "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_g "image";_b "math";);
type similarTemplatesFinder struct{Classer *Classer ;Width int ;Height int ;Index int ;CurrentNumbers []int ;N int ;};func (_ce *Classer )AddPage (inputPage *_e .Bitmap ,pageNumber int ,method Method )(_fb error ){const _fg ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";
_ce .Widths [pageNumber ]=inputPage .Width ;_ce .Heights [pageNumber ]=inputPage .Height ;if _fb =_ce .verifyMethod (method );_fb !=nil {return _be .Wrap (_fb ,_fg ,"");};_edc ,_bc ,_fb :=inputPage .GetComponents (_ce .Settings .Components ,_ce .Settings .MaxCompWidth ,_ce .Settings .MaxCompHeight );
if _fb !=nil {return _be .Wrap (_fb ,_fg ,"");};_f .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_edc );if _fb =_ce .addPageComponents (inputPage ,_bc ,_edc ,pageNumber ,method );_fb !=nil {return _be .Wrap (_fb ,_fg ,"");
};return nil ;};func (_bcec *Classer )classifyRankHaus (_bga *_e .Boxes ,_eca *_e .Bitmaps ,_abe int )error {const _deb ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";if _bga ==nil {return _be .Error (_deb ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _eca ==nil {return _be .Error (_deb ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_dfa :=len (_eca .Values );if _dfa ==0{return _be .Error (_deb ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");
};_aca :=_eca .CountPixels ();_ebc :=_bcec .Settings .SizeHaus ;_ecd :=_e .SelCreateBrick (_ebc ,_ebc ,_ebc /2,_ebc /2,_e .SelHit );_abeg :=&_e .Bitmaps {Values :make ([]*_e .Bitmap ,_dfa )};_dbe :=&_e .Bitmaps {Values :make ([]*_e .Bitmap ,_dfa )};var (_daf ,_faf ,_cef *_e .Bitmap ;
_bag error ;);for _abf :=0;_abf < _dfa ;_abf ++{_daf ,_bag =_eca .GetBitmap (_abf );if _bag !=nil {return _be .Wrap (_bag ,_deb ,"");};_faf ,_bag =_daf .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _bag !=nil {return _be .Wrap (_bag ,_deb ,"");
};_cef ,_bag =_e .Dilate (nil ,_faf ,_ecd );if _bag !=nil {return _be .Wrap (_bag ,_deb ,"");};_abeg .Values [_dfa ]=_faf ;_dbe .Values [_dfa ]=_cef ;};_daa ,_bag :=_e .Centroids (_abeg .Values );if _bag !=nil {return _be .Wrap (_bag ,_deb ,"");};if _bag =_daa .Add (_bcec .CentroidPoints );
_bag !=nil {_f .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");};if _bcec .Settings .RankHaus ==1.0{_bag =_bcec .classifyRankHouseOne (_bga ,_eca ,_abeg ,_dbe ,_daa ,_abe );}else {_bag =_bcec .classifyRankHouseNonOne (_bga ,_eca ,_abeg ,_dbe ,_daa ,_aca ,_abe );
};if _bag !=nil {return _be .Wrap (_bag ,_deb ,"");};return nil ;};func DefaultSettings ()Settings {_beeb :=&Settings {};_beeb .SetDefault ();return *_beeb };func (_bgd *Classer )classifyRankHouseOne (_eeef *_e .Boxes ,_cfg ,_eea ,_ged *_e .Bitmaps ,_eeac *_e .Points ,_egb int )(_ceff error ){const _ffd ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_ffaa ,_egbc ,_bdf ,_daaa float32 ;_cab int ;_ggd ,_daff ,_fad ,_gge ,_adf *_e .Bitmap ;_cfe ,_dcc bool ;);for _gec :=0;_gec < len (_cfg .Values );_gec ++{_daff =_eea .Values [_gec ];_fad =_ged .Values [_gec ];_ffaa ,_egbc ,_ceff =_eeac .GetGeometry (_gec );
if _ceff !=nil {return _be .Wrapf (_ceff ,_ffd ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_aebc :=len (_bgd .UndilatedTemplates .Values );_cfe =false ;_ffeb :=_afgb (_bgd ,_daff );for _cab =_ffeb .Next ();_cab > -1;
{_gge ,_ceff =_bgd .UndilatedTemplates .GetBitmap (_cab );if _ceff !=nil {return _be .Wrap (_ceff ,_ffd ,"\u0062\u006d\u0033");};_adf ,_ceff =_bgd .DilatedTemplates .GetBitmap (_cab );if _ceff !=nil {return _be .Wrap (_ceff ,_ffd ,"\u0062\u006d\u0034");
};_bdf ,_daaa ,_ceff =_bgd .CentroidPointsTemplates .GetGeometry (_cab );if _ceff !=nil {return _be .Wrap (_ceff ,_ffd ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_dcc ,_ceff =_e .HausTest (_daff ,_fad ,_gge ,_adf ,_ffaa -_bdf ,_egbc -_daaa ,MaxDiffWidth ,MaxDiffHeight );
if _ceff !=nil {return _be .Wrap (_ceff ,_ffd ,"");};if _dcc {_cfe =true ;if _ceff =_bgd .ClassIDs .Add (_cab );_ceff !=nil {return _be .Wrap (_ceff ,_ffd ,"");};if _ceff =_bgd .ComponentPageNumbers .Add (_egb );_ceff !=nil {return _be .Wrap (_ceff ,_ffd ,"");
};if _bgd .Settings .KeepClassInstances {_fbg ,_ffgd :=_bgd .ClassInstances .GetBitmaps (_cab );if _ffgd !=nil {return _be .Wrap (_ffgd ,_ffd ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_ggd ,_ffgd =_cfg .GetBitmap (_gec );if _ffgd !=nil {return _be .Wrap (_ffgd ,_ffd ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");
};_fbg .AddBitmap (_ggd );_afc ,_ffgd :=_eeef .Get (_gec );if _ffgd !=nil {return _be .Wrap (_ffgd ,_ffd ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_fbg .AddBox (_afc );};break ;};};if !_cfe {if _ceff =_bgd .ClassIDs .Add (_aebc );_ceff !=nil {return _be .Wrap (_ceff ,_ffd ,"");
};if _ceff =_bgd .ComponentPageNumbers .Add (_egb );_ceff !=nil {return _be .Wrap (_ceff ,_ffd ,"");};_fffa :=&_e .Bitmaps {};_ggd ,_ceff =_cfg .GetBitmap (_gec );if _ceff !=nil {return _be .Wrap (_ceff ,_ffd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};
_fffa .Values =append (_fffa .Values ,_ggd );_ced ,_aae :=_ggd .Width ,_ggd .Height ;_bgd .TemplatesSize .Add (uint64 (_aae )*uint64 (_ced ),_aebc );_adg ,_ccb :=_eeef .Get (_gec );if _ccb !=nil {return _be .Wrap (_ccb ,_ffd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_fffa .AddBox (_adg );_bgd .ClassInstances .AddBitmaps (_fffa );_bgd .CentroidPointsTemplates .AddPoint (_ffaa ,_egbc );_bgd .UndilatedTemplates .AddBitmap (_daff );_bgd .DilatedTemplates .AddBitmap (_fad );};};return nil ;};func (_a *Classer )ComputeLLCorners ()(_ff error ){const _ab ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _a .PtaUL ==nil {return _be .Error (_ab ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};_fc :=len (*_a .PtaUL );_a .PtaLL =&_e .Points {};var (_fe ,_fa float32 ;_ee ,_eed int ;
_eda *_e .Bitmap ;);for _bec :=0;_bec < _fc ;_bec ++{_fe ,_fa ,_ff =_a .PtaUL .GetGeometry (_bec );if _ff !=nil {_f .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ff );
return _be .Wrap (_ff ,_ab ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_ee ,_ff =_a .ClassIDs .Get (_bec );if _ff !=nil {_f .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_ff );
return _be .Wrap (_ff ,_ab ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_eda ,_ff =_a .UndilatedTemplates .GetBitmap (_ee );if _ff !=nil {_f .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_ff );
return _be .Wrap (_ff ,_ab ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_eed =_eda .Height ;_a .PtaLL .AddPoint (_fe ,_fa +float32 (_eed ));};return nil ;};func (_afd Settings )Validate ()error {const _ddb ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";
if _afd .Thresh < 0.4||_afd .Thresh > 0.98{return _be .Error (_ddb ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _afd .WeightFactor < 0.0||_afd .WeightFactor > 1.0{return _be .Error (_ddb ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _afd .RankHaus < 0.5||_afd .RankHaus > 1.0{return _be .Error (_ddb ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _afd .SizeHaus < 1||_afd .SizeHaus > 10{return _be .Error (_ddb ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _afd .Components {case _e .ComponentConn ,_e .ComponentCharacters ,_e .ComponentWords :default:return _be .Error (_ddb ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};func _bbg (_bef *_e .Bitmap ,_adb ,_bac ,_gb ,_befd int ,_deg *_e .Bitmap )(_af _g .Point ,_ec error ){const _bgg ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";
if _bef ==nil {return _af ,_be .Error (_bgg ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};if _deg ==nil {return _af ,_be .Error (_bgg ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");
};_gba ,_def :=_deg .Width ,_deg .Height ;_bgf ,_fcc :=_adb -_gb -JbAddedPixels ,_bac -_befd -JbAddedPixels ;_f .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_adb ,_bac ,_gba ,_def ,_bgf ,_fcc );
_dee ,_ec :=_e .Rect (_bgf ,_fcc ,_gba ,_def );if _ec !=nil {return _af ,_be .Wrap (_ec ,_bgg ,"");};_aec ,_ ,_ec :=_bef .ClipRectangle (_dee );if _ec !=nil {_f .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_dee );
return _af ,_be .Wrap (_ec ,_bgg ,"");};_ea :=_e .New (_aec .Width ,_aec .Height );_ag :=_b .MaxInt32 ;var _gddf ,_cc ,_fffd ,_bf ,_bcf int ;for _gddf =-1;_gddf <=1;_gddf ++{for _cc =-1;_cc <=1;_cc ++{if _ ,_ec =_e .Copy (_ea ,_aec );_ec !=nil {return _af ,_be .Wrap (_ec ,_bgg ,"");
};if _ec =_ea .RasterOperation (_cc ,_gddf ,_gba ,_def ,_e .PixSrcXorDst ,_deg ,0,0);_ec !=nil {return _af ,_be .Wrap (_ec ,_bgg ,"");};_fffd =_ea .CountPixels ();if _fffd < _ag {_bf =_cc ;_bcf =_gddf ;_ag =_fffd ;};};};_af .X =_bf ;_af .Y =_bcf ;return _af ,nil ;
};const (MaxDiffWidth =2;MaxDiffHeight =2;);type Classer struct{BaseIndex int ;Settings Settings ;ComponentsNumber *_d .IntSlice ;TemplateAreas *_d .IntSlice ;Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_e .BitmapsArray ;
UndilatedTemplates *_e .Bitmaps ;DilatedTemplates *_e .Bitmaps ;TemplatesSize _d .IntsMap ;FgTemplates *_d .NumSlice ;CentroidPoints *_e .Points ;CentroidPointsTemplates *_e .Points ;ClassIDs *_d .IntSlice ;ComponentPageNumbers *_d .IntSlice ;PtaUL *_e .Points ;
PtaLL *_e .Points ;};func (_bda *Classer )verifyMethod (_ffef Method )error {if _ffef !=RankHaus &&_ffef !=Correlation {return _be .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};func (_ecf *Classer )classifyRankHouseNonOne (_gfb *_e .Boxes ,_cefd ,_dec ,_fcaf *_e .Bitmaps ,_ccf *_e .Points ,_cbgf *_d .NumSlice ,_ebe int )(_bggd error ){const _dcd ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_dbc ,_ef ,_daac ,_dcdg float32 ;_fcba ,_dea ,_edaf int ;_dfbd ,_dead ,_dacc ,_ecg ,_cefa *_e .Bitmap ;_ded ,_gbd bool ;);_cefe :=_e .MakePixelSumTab8 ();for _aaeg :=0;_aaeg < len (_cefd .Values );_aaeg ++{if _dead ,_bggd =_dec .GetBitmap (_aaeg );
_bggd !=nil {return _be .Wrap (_bggd ,_dcd ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _fcba ,_bggd =_cbgf .GetInt (_aaeg );_bggd !=nil {_f .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_aaeg ,_bggd );
};if _dacc ,_bggd =_fcaf .GetBitmap (_aaeg );_bggd !=nil {return _be .Wrap (_bggd ,_dcd ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _dbc ,_ef ,_bggd =_ccf .GetGeometry (_aaeg );_bggd !=nil {return _be .Wrapf (_bggd ,_dcd ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_deeg :=len (_ecf .UndilatedTemplates .Values );_ded =false ;_caff :=_afgb (_ecf ,_dead );for _edaf =_caff .Next ();_edaf > -1;{if _ecg ,_bggd =_ecf .UndilatedTemplates .GetBitmap (_edaf );_bggd !=nil {return _be .Wrap (_bggd ,_dcd ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _dea ,_bggd =_ecf .FgTemplates .GetInt (_edaf );_bggd !=nil {_f .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_edaf ,_bggd );
};if _cefa ,_bggd =_ecf .DilatedTemplates .GetBitmap (_edaf );_bggd !=nil {return _be .Wrap (_bggd ,_dcd ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _daac ,_dcdg ,_bggd =_ecf .CentroidPointsTemplates .GetGeometry (_edaf );
_bggd !=nil {return _be .Wrap (_bggd ,_dcd ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_gbd ,_bggd =_e .RankHausTest (_dead ,_dacc ,_ecg ,_cefa ,_dbc -_daac ,_ef -_dcdg ,MaxDiffWidth ,MaxDiffHeight ,_fcba ,_dea ,float32 (_ecf .Settings .RankHaus ),_cefe );
if _bggd !=nil {return _be .Wrap (_bggd ,_dcd ,"");};if _gbd {_ded =true ;if _bggd =_ecf .ClassIDs .Add (_edaf );_bggd !=nil {return _be .Wrap (_bggd ,_dcd ,"");};if _bggd =_ecf .ComponentPageNumbers .Add (_ebe );_bggd !=nil {return _be .Wrap (_bggd ,_dcd ,"");
};if _ecf .Settings .KeepClassInstances {_deca ,_dbcd :=_ecf .ClassInstances .GetBitmaps (_edaf );if _dbcd !=nil {return _be .Wrap (_dbcd ,_dcd ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");
};if _dfbd ,_dbcd =_cefd .GetBitmap (_aaeg );_dbcd !=nil {return _be .Wrap (_dbcd ,_dcd ,"\u0070i\u0078\u0061\u005b\u0069\u005d");};_deca .Values =append (_deca .Values ,_dfbd );_cedf ,_dbcd :=_gfb .Get (_aaeg );if _dbcd !=nil {return _be .Wrap (_dbcd ,_dcd ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};_deca .Boxes =append (_deca .Boxes ,_cedf );};break ;};};if !_ded {if _bggd =_ecf .ClassIDs .Add (_deeg );_bggd !=nil {return _be .Wrap (_bggd ,_dcd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _bggd =_ecf .ComponentPageNumbers .Add (_ebe );_bggd !=nil {return _be .Wrap (_bggd ,_dcd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_ecde :=&_e .Bitmaps {};_dfbd =_cefd .Values [_aaeg ];_ecde .AddBitmap (_dfbd );_gdgc ,_ada :=_dfbd .Width ,_dfbd .Height ;_ecf .TemplatesSize .Add (uint64 (_gdgc )*uint64 (_ada ),_deeg );_acc ,_gce :=_gfb .Get (_aaeg );if _gce !=nil {return _be .Wrap (_gce ,_dcd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_ecde .AddBox (_acc );_ecf .ClassInstances .AddBitmaps (_ecde );_ecf .CentroidPointsTemplates .AddPoint (_dbc ,_ef );_ecf .UndilatedTemplates .AddBitmap (_dead );_ecf .DilatedTemplates .AddBitmap (_dacc );_ecf .FgTemplates .AddInt (_fcba );};};_ecf .NumberOfClasses =len (_ecf .UndilatedTemplates .Values );
return nil ;};func (_ece *Classer )classifyCorrelation (_afg *_e .Boxes ,_cfb *_e .Bitmaps ,_eba int )error {const _gaf ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";if _afg ==nil {return _be .Error (_gaf ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _cfb ==nil {return _be .Error (_gaf ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_dgb :=len (_cfb .Values );if _dgb ==0{_f .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_fef ,_cb *_e .Bitmap ;_ac error ;);_afgd :=&_e .Bitmaps {Values :make ([]*_e .Bitmap ,_dgb )};for _acb ,_dae :=range _cfb .Values {_cb ,_ac =_dae .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _ac !=nil {return _be .Wrap (_ac ,_gaf ,"");
};_afgd .Values [_acb ]=_cb ;};_ebd :=_ece .FgTemplates ;_gafb :=_e .MakePixelSumTab8 ();_cgd :=_e .MakePixelCentroidTab8 ();_aga :=make ([]int ,_dgb );_aeb :=make ([][]int ,_dgb );_ge :=_e .Points (make ([]_e .Point ,_dgb ));_cca :=&_ge ;var (_df ,_dfc int ;
_eg ,_cd ,_dd int ;_ebdb ,_aebb int ;_ebac byte ;);for _db ,_aa :=range _afgd .Values {_aeb [_db ]=make ([]int ,_aa .Height );_df =0;_dfc =0;_cd =(_aa .Height -1)*_aa .RowStride ;_eg =0;for _aebb =_aa .Height -1;_aebb >=0;_aebb ,_cd =_aebb -1,_cd -_aa .RowStride {_aeb [_db ][_aebb ]=_eg ;
_dd =0;for _ebdb =0;_ebdb < _aa .RowStride ;_ebdb ++{_ebac =_aa .Data [_cd +_ebdb ];_dd +=_gafb [_ebac ];_df +=_cgd [_ebac ]+_ebdb *8*_gafb [_ebac ];};_eg +=_dd ;_dfc +=_dd *_aebb ;};_aga [_db ]=_eg ;if _eg > 0{(*_cca )[_db ]=_e .Point {X :float32 (_df )/float32 (_eg ),Y :float32 (_dfc )/float32 (_eg )};
}else {(*_cca )[_db ]=_e .Point {X :float32 (_aa .Width )/float32 (2),Y :float32 (_aa .Height )/float32 (2)};};};if _ac =_ece .CentroidPoints .Add (_cca );_ac !=nil {return _be .Wrap (_ac ,_gaf ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");
};var (_feg ,_aeg ,_fcb int ;_bfc float64 ;_gc ,_ecec ,_cae ,_gf float32 ;_aed ,_dfd _e .Point ;_cag bool ;_ffg *similarTemplatesFinder ;_abc int ;_cgg *_e .Bitmap ;_bfe *_g .Rectangle ;_adc *_e .Bitmaps ;);for _abc ,_cb =range _afgd .Values {_aeg =_aga [_abc ];
if _gc ,_ecec ,_ac =_cca .GetGeometry (_abc );_ac !=nil {return _be .Wrap (_ac ,_gaf ,"\u0070t\u0061\u0020\u002d\u0020\u0069");};_cag =false ;_fdc :=len (_ece .UndilatedTemplates .Values );_ffg =_afgb (_ece ,_cb );for _ggc :=_ffg .Next ();_ggc > -1;{if _cgg ,_ac =_ece .UndilatedTemplates .GetBitmap (_ggc );
_ac !=nil {return _be .Wrap (_ac ,_gaf ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");};if _fcb ,_ac =_ebd .GetInt (_ggc );_ac !=nil {_f .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ac );
};if _cae ,_gf ,_ac =_ece .CentroidPointsTemplates .GetGeometry (_ggc );_ac !=nil {return _be .Wrap (_ac ,_gaf ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _ece .Settings .WeightFactor > 0.0{if _feg ,_ac =_ece .TemplateAreas .Get (_ggc );_ac !=nil {_f .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_ac );
};_bfc =_ece .Settings .Thresh +(1.0-_ece .Settings .Thresh )*_ece .Settings .WeightFactor *float64 (_fcb )/float64 (_feg );}else {_bfc =_ece .Settings .Thresh ;};_ffb ,_daeg :=_e .CorrelationScoreThresholded (_cb ,_cgg ,_aeg ,_fcb ,_aed .X -_dfd .X ,_aed .Y -_dfd .Y ,MaxDiffWidth ,MaxDiffHeight ,_gafb ,_aeb [_abc ],float32 (_bfc ));
if _daeg !=nil {return _be .Wrap (_daeg ,_gaf ,"");};if _bgc {var (_fca ,_dfb float64 ;_edb ,_ddf int ;);_fca ,_daeg =_e .CorrelationScore (_cb ,_cgg ,_aeg ,_fcb ,_gc -_cae ,_ecec -_gf ,MaxDiffWidth ,MaxDiffHeight ,_gafb );if _daeg !=nil {return _be .Wrap (_daeg ,_gaf ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_dfb ,_daeg =_e .CorrelationScoreSimple (_cb ,_cgg ,_aeg ,_fcb ,_gc -_cae ,_ecec -_gf ,MaxDiffWidth ,MaxDiffHeight ,_gafb );if _daeg !=nil {return _be .Wrap (_daeg ,_gaf ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_edb =int (_b .Sqrt (_fca *float64 (_aeg )*float64 (_fcb )));_ddf =int (_b .Sqrt (_dfb *float64 (_aeg )*float64 (_fcb )));if (_fca >=_bfc )!=(_dfb >=_bfc ){return _be .Errorf (_gaf ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_edb ,_fca ,_fca >=_bfc ,_ddf ,_dfb ,_dfb >=_bfc ,_fca -_dfb );
};if _fca >=_bfc !=_ffb {return _be .Errorf (_gaf ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_fca ,_fca *float64 (_aeg )*float64 (_fcb ),_edb ,_bfc ,float32 (_bfc )*float32 (_aeg )*float32 (_fcb ),_ffb );
};};if _ffb {_cag =true ;if _daeg =_ece .ClassIDs .Add (_ggc );_daeg !=nil {return _be .Wrap (_daeg ,_gaf ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _daeg =_ece .ComponentPageNumbers .Add (_eba );_daeg !=nil {return _be .Wrap (_daeg ,_gaf ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _ece .Settings .KeepClassInstances {if _fef ,_daeg =_cfb .GetBitmap (_abc );_daeg !=nil {return _be .Wrap (_daeg ,_gaf ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _adc ,_daeg =_ece .ClassInstances .GetBitmaps (_ggc );
_daeg !=nil {return _be .Wrap (_daeg ,_gaf ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_adc .AddBitmap (_fef );if _bfe ,_daeg =_afg .Get (_abc );_daeg !=nil {return _be .Wrap (_daeg ,_gaf ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_adc .AddBox (_bfe );};break ;};};if !_cag {if _ac =_ece .ClassIDs .Add (_fdc );_ac !=nil {return _be .Wrap (_ac ,_gaf ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _ac =_ece .ComponentPageNumbers .Add (_eba );_ac !=nil {return _be .Wrap (_ac ,_gaf ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_adc =&_e .Bitmaps {};if _fef ,_ac =_cfb .GetBitmap (_abc );_ac !=nil {return _be .Wrap (_ac ,_gaf ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_adc .AddBitmap (_fef );_caf ,_cbg :=_fef .Width ,_fef .Height ;_gfe :=uint64 (_cbg )*uint64 (_caf );_ece .TemplatesSize .Add (_gfe ,_fdc );
if _bfe ,_ac =_afg .Get (_abc );_ac !=nil {return _be .Wrap (_ac ,_gaf ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_adc .AddBox (_bfe );_ece .ClassInstances .AddBitmaps (_adc );_ece .CentroidPointsTemplates .AddPoint (_gc ,_ecec );_ece .FgTemplates .AddInt (_aeg );
_ece .UndilatedTemplates .AddBitmap (_fef );_feg =(_cb .Width -2*JbAddedPixels )*(_cb .Height -2*JbAddedPixels );if _ac =_ece .TemplateAreas .Add (_feg );_ac !=nil {return _be .Wrap (_ac ,_gaf ,"\u0021\u0066\u006f\u0075\u006e\u0064");};};};_ece .NumberOfClasses =len (_ece .UndilatedTemplates .Values );
return nil ;};func (_gdd *Classer )getULCorners (_ae *_e .Bitmap ,_dc *_e .Boxes )error {const _cf ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";if _ae ==nil {return _be .Error (_cf ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");
};if _dc ==nil {return _be .Error (_cf ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _gdd .PtaUL ==nil {_gdd .PtaUL =&_e .Points {};};_dga :=len (*_dc );var (_bd ,_gdg ,_fd ,_de int ;_bee ,_fff ,_dacd ,_ffe float32 ;_cg error ;_ba *_g .Rectangle ;
_becc *_e .Bitmap ;_gae _g .Point ;);for _ffa :=0;_ffa < _dga ;_ffa ++{_bd =_gdd .BaseIndex +_ffa ;if _bee ,_fff ,_cg =_gdd .CentroidPoints .GetGeometry (_bd );_cg !=nil {return _be .Wrap (_cg ,_cf ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");
};if _gdg ,_cg =_gdd .ClassIDs .Get (_bd );_cg !=nil {return _be .Wrap (_cg ,_cf ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");};if _dacd ,_ffe ,_cg =_gdd .CentroidPointsTemplates .GetGeometry (_gdg );_cg !=nil {return _be .Wrap (_cg ,_cf ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");
};_eee :=_dacd -_bee ;_eb :=_ffe -_fff ;if _eee >=0{_fd =int (_eee +0.5);}else {_fd =int (_eee -0.5);};if _eb >=0{_de =int (_eb +0.5);}else {_de =int (_eb -0.5);};if _ba ,_cg =_dc .Get (_ffa );_cg !=nil {return _be .Wrap (_cg ,_cf ,"");};_bg ,_ad :=_ba .Min .X ,_ba .Min .Y ;
_becc ,_cg =_gdd .UndilatedTemplates .GetBitmap (_gdg );if _cg !=nil {return _be .Wrap (_cg ,_cf ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_gae ,_cg =_bbg (_ae ,_bg ,_ad ,_fd ,_de ,_becc );if _cg !=nil {return _be .Wrap (_cg ,_cf ,"");};_gdd .PtaUL .AddPoint (float32 (_bg -_fd +_gae .X ),float32 (_ad -_de +_gae .Y ));};return nil ;};type Method int ;func Init (settings Settings )(*Classer ,error ){const _dg ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";
_ga :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_d .IntsMap {},TemplateAreas :&_d .IntSlice {},ComponentPageNumbers :&_d .IntSlice {},ClassIDs :&_d .IntSlice {},ComponentsNumber :&_d .IntSlice {},CentroidPoints :&_e .Points {},CentroidPointsTemplates :&_e .Points {},UndilatedTemplates :&_e .Bitmaps {},DilatedTemplates :&_e .Bitmaps {},ClassInstances :&_e .BitmapsArray {},FgTemplates :&_d .NumSlice {}};
if _ed :=_ga .Settings .Validate ();_ed !=nil {return nil ,_be .Wrap (_ed ,_dg ,"");};return _ga ,nil ;};var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};func (_bce *Classer )addPageComponents (_gg *_e .Bitmap ,_bb *_e .Boxes ,_fbc *_e .Bitmaps ,_da int ,_dac Method )error {const _gd ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _gg ==nil {return _be .Error (_gd ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _bb ==nil ||_fbc ==nil ||len (*_bb )==0{_f .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_gg );
return nil ;};var _abg error ;switch _dac {case RankHaus :_abg =_bce .classifyRankHaus (_bb ,_fbc ,_da );case Correlation :_abg =_bce .classifyCorrelation (_bb ,_fbc ,_da );default:_f .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_dac );
return _be .Error (_gd ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _abg !=nil {return _be .Wrap (_abg ,_gd ,"");};if _abg =_bce .getULCorners (_gg ,_bb );_abg !=nil {return _be .Wrap (_abg ,_gd ,"");
};_ca :=len (*_bb );_bce .BaseIndex +=_ca ;if _abg =_bce .ComponentsNumber .Add (_ca );_abg !=nil {return _be .Wrap (_abg ,_gd ,"");};return nil ;};func (_cce *similarTemplatesFinder )Next ()int {var (_bfcb ,_edbc ,_fde ,_bbf int ;_acd bool ;_ccg *_e .Bitmap ;
_bba error ;);for {if _cce .Index >=25{return -1;};_edbc =_cce .Width +TwoByTwoWalk [2*_cce .Index ];_bfcb =_cce .Height +TwoByTwoWalk [2*_cce .Index +1];if _bfcb < 1||_edbc < 1{_cce .Index ++;continue ;};if len (_cce .CurrentNumbers )==0{_cce .CurrentNumbers ,_acd =_cce .Classer .TemplatesSize .GetSlice (uint64 (_edbc )*uint64 (_bfcb ));
if !_acd {_cce .Index ++;continue ;};_cce .N =0;};_fde =len (_cce .CurrentNumbers );for ;_cce .N < _fde ;_cce .N ++{_bbf =_cce .CurrentNumbers [_cce .N ];_ccg ,_bba =_cce .Classer .DilatedTemplates .GetBitmap (_bbf );if _bba !=nil {_f .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _ccg .Width -2*JbAddedPixels ==_edbc &&_ccg .Height -2*JbAddedPixels ==_bfcb {return _bbf ;};};_cce .Index ++;_cce .CurrentNumbers =nil ;};};const (MaxConnCompWidth =350;MaxCharCompWidth =350;MaxWordCompWidth =1000;MaxCompHeight =120;);type Settings struct{MaxCompWidth int ;
MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;WeightFactor float64 ;KeepClassInstances bool ;Components _e .Component ;Method Method ;};const (RankHaus Method =iota ;Correlation ;);func (_afgf *Settings )SetDefault (){if _afgf .MaxCompWidth ==0{switch _afgf .Components {case _e .ComponentConn :_afgf .MaxCompWidth =MaxConnCompWidth ;
case _e .ComponentCharacters :_afgf .MaxCompWidth =MaxCharCompWidth ;case _e .ComponentWords :_afgf .MaxCompWidth =MaxWordCompWidth ;};};if _afgf .MaxCompHeight ==0{_afgf .MaxCompHeight =MaxCompHeight ;};if _afgf .Thresh ==0.0{_afgf .Thresh =0.9;};if _afgf .WeightFactor ==0.0{_afgf .WeightFactor =0.75;
};if _afgf .RankHaus ==0.0{_afgf .RankHaus =0.97;};if _afgf .SizeHaus ==0{_afgf .SizeHaus =2;};};var _bgc bool ;const JbAddedPixels =6;func _afgb (_cbe *Classer ,_egf *_e .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_egf .Width ,Height :_egf .Height ,Classer :_cbe };
};