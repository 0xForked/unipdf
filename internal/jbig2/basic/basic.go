//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _e "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_cfd *Stack )Len ()int {return len (_cfd .Data )};type IntsMap map[uint64 ][]int ;func NewNumSlice (i int )*NumSlice {_df :=NumSlice (make ([]float32 ,i ));return &_df };
func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_da IntsMap )Delete (key uint64 ){delete (_da ,key )};func (_adf IntsMap )Get (key uint64 )(int ,bool ){_g ,_af :=_adf [key ];
if !_af {return 0,false ;};if len (_g )==0{return 0,false ;};return _g [0],true ;};func (_cg *NumSlice )AddInt (v int ){*_cg =append (*_cg ,float32 (v ))};func (_gd IntSlice )Size ()int {return len (_gd )};func (_c *IntSlice )Add (v int )error {if _c ==nil {return _e .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_c =append (*_c ,v );return nil ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_gg IntsMap )GetSlice (key uint64 )([]int ,bool ){_aa ,_d :=_gg [key ];if !_d {return nil ,false ;};return _aa ,true ;};func (_ag IntSlice )Get (index int )(int ,error ){if index > len (_ag )-1{return 0,_e .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _ag [index ],nil ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_gf NumSlice )GetIntSlice ()[]int {_cb :=make ([]int ,len (_gf ));for _db ,_ga :=range _gf {_cb [_db ]=int (_ga );};return _cb ;};type IntSlice []int ;func Abs (v int )int {if v > 0{return v ;
};return -v ;};func NewIntSlice (i int )*IntSlice {_f :=IntSlice (make ([]int ,i ));return &_f };func (_edc *Stack )Pop ()(_cgd interface{},_ac bool ){_cgd ,_ac =_edc .peek ();if !_ac {return nil ,_ac ;};_edc .Data =_edc .Data [:_edc .top ()];return _cgd ,true ;
};type NumSlice []float32 ;func (_eb *Stack )Peek ()(_bd interface{},_daa bool ){return _eb .peek ()};func (_cd NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_cd )-1{return 0,_e .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _cd [i ],nil ;};func (_eg *IntSlice )Copy ()*IntSlice {_dad :=IntSlice (make ([]int ,len (*_eg )));copy (_dad ,*_eg );return &_dad ;};func (_cf *NumSlice )Add (v float32 ){*_cf =append (*_cf ,v )};func (_fb *Stack )peek ()(interface{},bool ){_dg :=_fb .top ();
if _dg ==-1{return nil ,false ;};return _fb .Data [_dg ],true ;};func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_ec *Stack )Push (v interface{}){_ec .Data =append (_ec .Data ,v )};type Stack struct{Data []interface{};Aux *Stack ;};func (_gda NumSlice )GetInt (i int )(int ,error ){const _ed ="\u0047\u0065\u0074\u0049\u006e\u0074";
if i < 0||i > len (_gda )-1{return 0,_e .Errorf (_ed ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_b :=_gda [i ];return int (_b +Sign (_b )*0.5),nil ;};func (_aff *Stack )top ()int {return len (_aff .Data )-1};
func (_ad IntsMap )Add (key uint64 ,value int ){_ad [key ]=append (_ad [key ],value )};