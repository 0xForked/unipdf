//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_ag *Stack )peek ()(interface{},bool ){_fad :=_ag .top ();if _fad ==-1{return nil ,false ;};return _ag .Data [_fad ],true ;};func NewIntSlice (i int )*IntSlice {_ef :=IntSlice (make ([]int ,i ));return &_ef };func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_ad *Stack )Push (v interface{}){_ad .Data =append (_ad .Data ,v )};func (_bf IntsMap )Get (key uint64 )(int ,bool ){_e ,_bb :=_bf [key ];if !_bb {return 0,false ;};if len (_e )==0{return 0,false ;};return _e [0],true ;};func (_d IntsMap )GetSlice (key uint64 )([]int ,bool ){_bc ,_cb :=_d [key ];if !_cb {return nil ,false ;};return _bc ,true ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_efc IntSlice )Get (index int )(int ,error ){if index > len (_efc )-1{return 0,_c .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _efc [index ],nil ;};func (_fg *Stack )top ()int {return len (_fg .Data )-1};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_ee *IntSlice )Copy ()*IntSlice {_f :=IntSlice (make ([]int ,len (*_ee )));copy (_f ,*_ee );return &_f ;};func (_dff NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_dff )-1{return 0,_c .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dff [i ],nil ;};type IntsMap map[uint64 ][]int ;func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_gd *Stack )Pop ()(_de interface{},_dcc bool ){_de ,_dcc =_gd .peek ();if !_dcc {return nil ,_dcc ;};_gd .Data =_gd .Data [:_gd .top ()];return _de ,true ;};func (_g *IntSlice )Add (v int )error {if _g ==nil {return _c .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_g =append (*_g ,v );return nil ;};func (_ed *NumSlice )Add (v float32 ){*_ed =append (*_ed ,v )};func (_ga NumSlice )GetInt (i int )(int ,error ){const _cee ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_ga )-1{return 0,_c .Errorf (_cee ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_da :=_ga [i ];return int (_da +Sign (_da )*0.5),nil ;};func (_dg NumSlice )GetIntSlice ()[]int {_bg :=make ([]int ,len (_dg ));for _a ,_cc :=range _dg {_bg [_a ]=int (_cc );};return _bg ;};func Min (x ,y int )int {if x < y {return x ;};return y ;};func NewNumSlice (i int )*NumSlice {_ebd :=NumSlice (make ([]float32 ,i ));return &_ebd };func (_gf *Stack )Len ()int {return len (_gf .Data )};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_bd IntsMap )Add (key uint64 ,value int ){_bd [key ]=append (_bd [key ],value )};func (_gab *Stack )Peek ()(_fa interface{},_dc bool ){return _gab .peek ()};func (_df *NumSlice )AddInt (v int ){*_df =append (*_df ,float32 (v ))};type NumSlice []float32 ;func (_ce IntSlice )Size ()int {return len (_ce )};type IntSlice []int ;func (_eb IntsMap )Delete (key uint64 ){delete (_eb ,key )};