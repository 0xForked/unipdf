//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func Min (x ,y int )int {if x < y {return x ;
};return y ;};func (_ac *Stack )Push (v interface{}){_ac .Data =append (_ac .Data ,v )};func (_fa *NumSlice )AddInt (v int ){*_fa =append (*_fa ,float32 (v ))};func (_cc *Stack )peek ()(interface{},bool ){_eea :=_cc .top ();if _eea ==-1{return nil ,false ;
};return _cc .Data [_eea ],true ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func NewNumSlice (i int )*NumSlice {_bg :=NumSlice (make ([]float32 ,i ));return &_bg };func (_gf IntsMap )Delete (key uint64 ){delete (_gf ,key )};func Sign (v float32 )float32 {if v >=0.0{return 1.0;
};return -1.0;};func (_ce IntsMap )Get (key uint64 )(int ,bool ){_b ,_d :=_ce [key ];if !_d {return 0,false ;};if len (_b )==0{return 0,false ;};return _b [0],true ;};func (_g IntsMap )GetSlice (key uint64 )([]int ,bool ){_bf ,_df :=_g [key ];if !_df {return nil ,false ;
};return _bf ,true ;};func (_eg *IntSlice )Copy ()*IntSlice {_ab :=IntSlice (make ([]int ,len (*_eg )));copy (_ab ,*_eg );return &_ab ;};func (_gff NumSlice )GetInt (i int )(int ,error ){const _ef ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_gff )-1{return 0,_c .Errorf (_ef ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_ed :=_gff [i ];return int (_ed +Sign (_ed )*0.5),nil ;};func (_da NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_da )-1{return 0,_c .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _da [i ],nil ;};func (_af NumSlice )GetIntSlice ()[]int {_fc :=make ([]int ,len (_af ));for _gfc ,_bb :=range _af {_fc [_gfc ]=int (_bb );};return _fc ;};func NewIntSlice (i int )*IntSlice {_f :=IntSlice (make ([]int ,i ));return &_f };func (_bbc *Stack )Peek ()(_bc interface{},_bcg bool ){return _bbc .peek ()};
func (_e IntsMap )Add (key uint64 ,value int ){_e [key ]=append (_e [key ],value )};func (_fb *Stack )Pop ()(_ceee interface{},_de bool ){_ceee ,_de =_fb .peek ();if !_de {return nil ,_de ;};_fb .Data =_fb .Data [:_fb .top ()];return _ceee ,true ;};func (_cee IntSlice )Get (index int )(int ,error ){if index > len (_cee )-1{return 0,_c .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _cee [index ],nil ;};type IntSlice []int ;func (_ge *Stack )top ()int {return len (_ge .Data )-1};func (_ee *Stack )Len ()int {return len (_ee .Data )};func (_ff IntSlice )Size ()int {return len (_ff )};type NumSlice []float32 ;type IntsMap map[uint64 ][]int ;
type Stack struct{Data []interface{};Aux *Stack ;};func (_ea *IntSlice )Add (v int )error {if _ea ==nil {return _c .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_ea =append (*_ea ,v );return nil ;};func (_gd *NumSlice )Add (v float32 ){*_gd =append (*_gd ,v )};func Max (x ,y int )int {if x > y {return x ;};return y ;};