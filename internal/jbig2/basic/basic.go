//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_db *Stack )Len ()int {return len (_db .Data )};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_d NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_d )-1{return 0,_g .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _d [i ],nil ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_be *NumSlice )Add (v float32 ){*_be =append (*_be ,v )};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_fe *Stack )Push (v interface{}){_fe .Data =append (_fe .Data ,v )};
func (_ea *Stack )top ()int {return len (_ea .Data )-1};func (_cf IntsMap )GetSlice (key uint64 )([]int ,bool ){_ag ,_eb :=_cf [key ];if !_eb {return nil ,false ;};return _ag ,true ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_gc *IntSlice )Add (v int )error {if _gc ==nil {return _g .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_gc =append (*_gc ,v );return nil ;};func NewIntSlice (i int )*IntSlice {_f :=IntSlice (make ([]int ,i ));return &_f };func (_gb NumSlice )GetInt (i int )(int ,error ){const _gf ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_gb )-1{return 0,_g .Errorf (_gf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_ac :=_gb [i ];return int (_ac +Sign (_ac )*0.5),nil ;};func (_af IntsMap )Delete (key uint64 ){delete (_af ,key )};func (_ee IntsMap )Get (key uint64 )(int ,bool ){_eee ,_a :=_ee [key ];if !_a {return 0,false ;};if len (_eee )==0{return 0,false ;};return _eee [0],true ;
};func NewNumSlice (i int )*NumSlice {_ge :=NumSlice (make ([]float32 ,i ));return &_ge };type IntsMap map[uint64 ][]int ;func (_b *IntSlice )Copy ()*IntSlice {_bg :=IntSlice (make ([]int ,len (*_b )));copy (_bg ,*_b );return &_bg ;};func (_dc *Stack )peek ()(interface{},bool ){_dg :=_dc .top ();
if _dg ==-1{return nil ,false ;};return _dc .Data [_dg ],true ;};func (_eeb *NumSlice )AddInt (v int ){*_eeb =append (*_eeb ,float32 (v ))};func (_fc *Stack )Peek ()(_fd interface{},_ad bool ){return _fc .peek ()};type NumSlice []float32 ;func (_adg *Stack )Pop ()(_fb interface{},_gd bool ){_fb ,_gd =_adg .peek ();
if !_gd {return nil ,_gd ;};_adg .Data =_adg .Data [:_adg .top ()];return _fb ,true ;};func (_bb IntSlice )Get (index int )(int ,error ){if index > len (_bb )-1{return 0,_g .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _bb [index ],nil ;};func (_gca IntSlice )Size ()int {return len (_gca )};func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_c IntsMap )Add (key uint64 ,value int ){_c [key ]=append (_c [key ],value )};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;
};return (numerator /denominator )+1;};func (_ce NumSlice )GetIntSlice ()[]int {_cc :=make ([]int ,len (_ce ));for _cea ,_ec :=range _ce {_cc [_cea ]=int (_ec );};return _cc ;};type IntSlice []int ;