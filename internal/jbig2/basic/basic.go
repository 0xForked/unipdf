//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_f IntsMap )GetSlice (key uint64 )([]int ,bool ){_ba ,_ca :=_f [key ];if !_ca {return nil ,false ;};return _ba ,true ;};func (_a IntsMap )Add (key uint64 ,value int ){_a [key ]=append (_a [key ],value )};
func (_ee *Stack )peek ()(interface{},bool ){_ac :=_ee .top ();if _ac ==-1{return nil ,false ;};return _ee .Data [_ac ],true ;};func (_bb IntSlice )Size ()int {return len (_bb )};func (_bd IntsMap )Delete (key uint64 ){delete (_bd ,key )};func Min (x ,y int )int {if x < y {return x ;
};return y ;};func NewNumSlice (i int )*NumSlice {_bc :=NumSlice (make ([]float32 ,i ));return &_bc };func (_cg NumSlice )GetInt (i int )(int ,error ){const _de ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_cg )-1{return 0,_b .Errorf (_de ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_ga :=_cg [i ];return int (_ga +Sign (_ga )*0.5),nil ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_bgb *NumSlice )AddInt (v int ){*_bgb =append (*_bgb ,float32 (v ))};
func (_gf *Stack )Pop ()(_bbc interface{},_bbe bool ){_bbc ,_bbe =_gf .peek ();if !_bbe {return nil ,_bbe ;};_gf .Data =_gf .Data [:_gf .top ()];return _bbc ,true ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};type IntSlice []int ;
func (_fc NumSlice )GetIntSlice ()[]int {_gab :=make ([]int ,len (_fc ));for _ce ,_cfe :=range _fc {_gab [_ce ]=int (_cfe );};return _gab ;};func (_cf IntSlice )Get (index int )(int ,error ){if index > len (_cf )-1{return 0,_b .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _cf [index ],nil ;};func (_fd *NumSlice )Add (v float32 ){*_fd =append (*_fd ,v )};type NumSlice []float32 ;type IntsMap map[uint64 ][]int ;func (_gce *Stack )top ()int {return len (_gce .Data )-1};func Max (x ,y int )int {if x > y {return x ;
};return y ;};func (_bce NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_bce )-1{return 0,_b .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _bce [i ],nil ;};func (_cc *IntSlice )Add (v int )error {if _cc ==nil {return _b .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_cc =append (*_cc ,v );return nil ;};func (_d *IntSlice )Copy ()*IntSlice {_bg :=IntSlice (make ([]int ,len (*_d )));copy (_bg ,*_d );return &_bg ;};func NewIntSlice (i int )*IntSlice {_gc :=IntSlice (make ([]int ,i ));return &_gc };func (_cag *Stack )Peek ()(_cfg interface{},_bdc bool ){return _cag .peek ()};
func Abs (v int )int {if v > 0{return v ;};return -v ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_cb IntsMap )Get (key uint64 )(int ,bool ){_g ,_e :=_cb [key ];if !_e {return 0,false ;};if len (_g )==0{return 0,false ;};return _g [0],true ;
};func (_gd *Stack )Len ()int {return len (_gd .Data )};func (_ef *Stack )Push (v interface{}){_ef .Data =append (_ef .Data ,v )};