//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _e "github.com/unidoc/unipdf/v3/internal/jbig2/errors";type NumSlice []float32 ;func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_ba IntSlice )Get (index int )(int ,error ){if index > len (_ba )-1{return 0,_e .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _ba [index ],nil ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_d IntsMap )Add (key uint64 ,value int ){_d [key ]=append (_d [key ],value )};func NewNumSlice (i int )*NumSlice {_gd :=NumSlice (make ([]float32 ,i ));return &_gd };type IntsMap map[uint64 ][]int ;func Min (x ,y int )int {if x < y {return x ;};return y ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_dfb *Stack )Pop ()(_af interface{},_cfbf bool ){_af ,_cfbf =_dfb .peek ();if !_cfbf {return nil ,_cfbf ;};_dfb .Data =_dfb .Data [:_dfb .top ()];return _af ,true ;};func NewIntSlice (i int )*IntSlice {_cfb :=IntSlice (make ([]int ,i ));return &_cfb };func (_edg *Stack )Len ()int {return len (_edg .Data )};func (_ef *IntSlice )Copy ()*IntSlice {_b :=IntSlice (make ([]int ,len (*_ef )));copy (_b ,*_ef );return &_b ;};func (_ee IntSlice )Size ()int {return len (_ee )};type IntSlice []int ;func (_ed NumSlice )GetIntSlice ()[]int {_ce :=make ([]int ,len (_ed ));for _ff ,_be :=range _ed {_ce [_ff ]=int (_be );};return _ce ;};func (_ca *Stack )peek ()(interface{},bool ){_cdg :=_ca .top ();if _cdg ==-1{return nil ,false ;};return _ca .Data [_cdg ],true ;};func (_a IntsMap )GetSlice (key uint64 )([]int ,bool ){_da ,_cfg :=_a [key ];if !_cfg {return nil ,false ;};return _da ,true ;};func (_g *IntSlice )Add (v int )error {if _g ==nil {return _e .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_g =append (*_g ,v );return nil ;};func (_eg IntsMap )Get (key uint64 )(int ,bool ){_cc ,_cf :=_eg [key ];if !_cf {return 0,false ;};if len (_cc )==0{return 0,false ;};return _cc [0],true ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_de *NumSlice )Add (v float32 ){*_de =append (*_de ,v )};func (_f *NumSlice )AddInt (v int ){*_f =append (*_f ,float32 (v ))};func (_bcf *Stack )Peek ()(_cd interface{},_gc bool ){return _bcf .peek ()};func (_bc NumSlice )GetInt (i int )(int ,error ){const _cb ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_bc )-1{return 0,_e .Errorf (_cb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_fc :=_bc [i ];return int (_fc +Sign (_fc )*0.5),nil ;};func (_dc *Stack )Push (v interface{}){_dc .Data =append (_dc .Data ,v )};func (_ab IntsMap )Delete (key uint64 ){delete (_ab ,key )};func (_df NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_df )-1{return 0,_e .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _df [i ],nil ;};func (_efb *Stack )top ()int {return len (_efb .Data )-1};func Abs (v int )int {if v > 0{return v ;};return -v ;};