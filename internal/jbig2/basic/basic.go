//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _a "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func NewNumSlice (i int )*NumSlice {_ea :=NumSlice (make ([]float32 ,i ));return &_ea };func (_e IntsMap )GetSlice (key uint64 )([]int ,bool ){_cb ,_ce :=_e [key ];if !_ce {return nil ,false ;
};return _cb ,true ;};func (_ab *IntSlice )Add (v int )error {if _ab ==nil {return _a .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_ab =append (*_ab ,v );return nil ;};func (_eg IntSlice )Size ()int {return len (_eg )};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_abb NumSlice )GetIntSlice ()[]int {_cd :=make ([]int ,len (_abb ));
for _ff ,_ag :=range _abb {_cd [_ff ]=int (_ag );};return _cd ;};type IntSlice []int ;type IntsMap map[uint64 ][]int ;func (_gf NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_gf )-1{return 0,_a .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gf [i ],nil ;};func (_dg IntsMap )Add (key uint64 ,value int ){_dg [key ]=append (_dg [key ],value )};func (_dgb *NumSlice )Add (v float32 ){*_dgb =append (*_dgb ,v )};type Stack struct{Data []interface{};Aux *Stack ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;
};return -1.0;};type NumSlice []float32 ;func (_fe *IntSlice )Copy ()*IntSlice {_b :=IntSlice (make ([]int ,len (*_fe )));copy (_b ,*_fe );return &_b ;};func (_eb IntSlice )Get (index int )(int ,error ){if index > len (_eb )-1{return 0,_a .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _eb [index ],nil ;};func (_ba *NumSlice )AddInt (v int ){*_ba =append (*_ba ,float32 (v ))};func NewIntSlice (i int )*IntSlice {_f :=IntSlice (make ([]int ,i ));return &_f };func (_c IntsMap )Get (key uint64 )(int ,bool ){_g ,_db :=_c [key ];if !_db {return 0,false ;
};if len (_g )==0{return 0,false ;};return _g [0],true ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_cf IntsMap )Delete (key uint64 ){delete (_cf ,key )};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_df NumSlice )GetInt (i int )(int ,error ){const _de ="\u0047\u0065\u0074\u0049\u006e\u0074";
if i < 0||i > len (_df )-1{return 0,_a .Errorf (_de ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_be :=_df [i ];return int (_be +Sign (_be )*0.5),nil ;};
func (_ae *Stack )Len ()int {return len (_ae .Data )};func (_abbc *Stack )Peek ()(_fc interface{},_da bool ){return _abbc .peek ()};func (_eag *Stack )Push (v interface{}){_eag .Data =append (_eag .Data ,v )};func (_cbf *Stack )top ()int {return len (_cbf .Data )-1};
func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_cff *Stack )Pop ()(_fcf interface{},_fcfg bool ){_fcf ,_fcfg =_cff .peek ();if !_fcfg {return nil ,_fcfg ;};_cff .Data =_cff .Data [:_cff .top ()];return _fcf ,true ;};func (_cc *Stack )peek ()(interface{},bool ){_cce :=_cc .top ();
if _cce ==-1{return nil ,false ;};return _cc .Data [_cce ],true ;};