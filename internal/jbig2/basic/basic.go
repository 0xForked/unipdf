//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _ea "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_fcg *Stack )Peek ()(_da interface{},_fcf bool ){return _fcg .peek ()};type IntsMap map[uint64 ][]int ;func Max (x ,y int )int {if x > y {return x ;};return y ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;
};return -1.0;};type NumSlice []float32 ;func (_fa *NumSlice )AddInt (v int ){*_fa =append (*_fa ,float32 (v ))};func NewNumSlice (i int )*NumSlice {_g :=NumSlice (make ([]float32 ,i ));return &_g };func (_a IntsMap )GetSlice (key uint64 )([]int ,bool ){_b ,_d :=_a [key ];
if !_d {return nil ,false ;};return _b ,true ;};func (_bf IntSlice )Get (index int )(int ,error ){if index > len (_bf )-1{return 0,_ea .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _bf [index ],nil ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_eg *IntSlice )Add (v int )error {if _eg ==nil {return _ea .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_eg =append (*_eg ,v );return nil ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_bdd IntSlice )Size ()int {return len (_bdd )};func (_fe *NumSlice )Add (v float32 ){*_fe =append (*_fe ,v )};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;
};return (numerator /denominator )+1;};func (_ge NumSlice )GetInt (i int )(int ,error ){const _fg ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_ge )-1{return 0,_ea .Errorf (_fg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_ac :=_ge [i ];return int (_ac +Sign (_ac )*0.5),nil ;};func (_ag *Stack )Len ()int {return len (_ag .Data )};func (_bg *IntSlice )Copy ()*IntSlice {_ebf :=IntSlice (make ([]int ,len (*_bg )));copy (_ebf ,*_bg );return &_ebf ;};func NewIntSlice (i int )*IntSlice {_bd :=IntSlice (make ([]int ,i ));
return &_bd };func (_eab *Stack )top ()int {return len (_eab .Data )-1};func (_ad NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_ad )-1{return 0,_ea .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ad [i ],nil ;};func (_egc NumSlice )GetIntSlice ()[]int {_ba :=make ([]int ,len (_egc ));for _ab ,_cd :=range _egc {_ba [_ab ]=int (_cd );};return _ba ;};func (_f IntsMap )Get (key uint64 )(int ,bool ){_fc ,_eb :=_f [key ];if !_eb {return 0,false ;
};if len (_fc )==0{return 0,false ;};return _fc [0],true ;};func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_be *Stack )Pop ()(_cf interface{},_abe bool ){_cf ,_abe =_be .peek ();if !_abe {return nil ,_abe ;};_be .Data =_be .Data [:_be .top ()];
return _cf ,true ;};func (_ff IntsMap )Delete (key uint64 ){delete (_ff ,key )};type IntSlice []int ;func (_eba *Stack )peek ()(interface{},bool ){_de :=_eba .top ();if _de ==-1{return nil ,false ;};return _eba .Data [_de ],true ;};func (_bb *Stack )Push (v interface{}){_bb .Data =append (_bb .Data ,v )};
func (_c IntsMap )Add (key uint64 ,value int ){_c [key ]=append (_c [key ],value )};