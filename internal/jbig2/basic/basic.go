//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_ag NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_ag )-1{return 0,_c .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ag [i ],nil ;};type IntsMap map[uint64 ][]int ;func Min (x ,y int )int {if x < y {return x ;};return y ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_db IntSlice )Get (index int )(int ,error ){if index > len (_db )-1{return 0,_c .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _db [index ],nil ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_da *Stack )Len ()int {return len (_da .Data )};func (_bde *Stack )Pop ()(_eg interface{},_cb bool ){_eg ,_cb =_bde .peek ();if !_cb {return nil ,_cb ;
};_bde .Data =_bde .Data [:_bde .top ()];return _eg ,true ;};func (_gaa *IntSlice )Copy ()*IntSlice {_be :=IntSlice (make ([]int ,len (*_gaa )));copy (_be ,*_gaa );return &_be ;};func (_ca *Stack )peek ()(interface{},bool ){_aae :=_ca .top ();if _aae ==-1{return nil ,false ;
};return _ca .Data [_aae ],true ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_cc NumSlice )GetInt (i int )(int ,error ){const _ecg ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_cc )-1{return 0,_c .Errorf (_ecg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_ba :=_cc [i ];return int (_ba +Sign (_ba )*0.5),nil ;};type NumSlice []float32 ;func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_e IntsMap )Add (key uint64 ,value int ){_e [key ]=append (_e [key ],value )};
func (_ee IntsMap )GetSlice (key uint64 )([]int ,bool ){_gb ,_b :=_ee [key ];if !_b {return nil ,false ;};return _gb ,true ;};type IntSlice []int ;func (_bd IntsMap )Delete (key uint64 ){delete (_bd ,key )};func NewNumSlice (i int )*NumSlice {_f :=NumSlice (make ([]float32 ,i ));
return &_f };func (_ga IntsMap )Get (key uint64 )(int ,bool ){_ec ,_d :=_ga [key ];if !_d {return 0,false ;};if len (_ec )==0{return 0,false ;};return _ec [0],true ;};func (_ce *Stack )top ()int {return len (_ce .Data )-1};func (_bad NumSlice )GetIntSlice ()[]int {_dg :=make ([]int ,len (_bad ));
for _bda ,_ac :=range _bad {_dg [_bda ]=int (_ac );};return _dg ;};func (_fd *NumSlice )Add (v float32 ){*_fd =append (*_fd ,v )};func Max (x ,y int )int {if x > y {return x ;};return y ;};func NewIntSlice (i int )*IntSlice {_bdb :=IntSlice (make ([]int ,i ));
return &_bdb };func (_dd *NumSlice )AddInt (v int ){*_dd =append (*_dd ,float32 (v ))};func (_a *IntSlice )Add (v int )error {if _a ==nil {return _c .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_a =append (*_a ,v );return nil ;};func (_bb IntSlice )Size ()int {return len (_bb )};func (_bbe *Stack )Peek ()(_ae interface{},_aa bool ){return _bbe .peek ()};func (_gc *Stack )Push (v interface{}){_gc .Data =append (_gc .Data ,v )};