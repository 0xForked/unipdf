//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func Abs (v int )int {if v > 0{return v ;};return -v ;};func Min (x ,y int )int {if x < y {return x ;};return y ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;
};func (_ea *IntSlice )Copy ()*IntSlice {_ce :=IntSlice (make ([]int ,len (*_ea )));copy (_ce ,*_ea );return &_ce ;};func (_aa *Stack )peek ()(interface{},bool ){_fba :=_aa .top ();if _fba ==-1{return nil ,false ;};return _aa .Data [_fba ],true ;};func (_gd *Stack )Push (v interface{}){_gd .Data =append (_gd .Data ,v )};
func (_d IntsMap )Add (key uint64 ,value int ){_d [key ]=append (_d [key ],value )};func (_abg *Stack )Pop ()(_fe interface{},_eb bool ){_fe ,_eb =_abg .peek ();if !_eb {return nil ,_eb ;};_abg .Data =_abg .Data [:_abg .top ()];return _fe ,true ;};type IntsMap map[uint64 ][]int ;
type NumSlice []float32 ;func NewIntSlice (i int )*IntSlice {_cg :=IntSlice (make ([]int ,i ));return &_cg };func (_cgc *NumSlice )Add (v float32 ){*_cgc =append (*_cgc ,v )};func (_ff IntSlice )Size ()int {return len (_ff )};func (_cgb *Stack )top ()int {return len (_cgb .Data )-1};
func (_de *IntSlice )Add (v int )error {if _de ==nil {return _b .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_de =append (*_de ,v );
return nil ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_fd NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_fd )-1{return 0,_b .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fd [i ],nil ;};func (_ac *NumSlice )AddInt (v int ){*_ac =append (*_ac ,float32 (v ))};func (_c IntsMap )Delete (key uint64 ){delete (_c ,key )};func (_bf NumSlice )GetIntSlice ()[]int {_g :=make ([]int ,len (_bf ));for _ga ,_ca :=range _bf {_g [_ga ]=int (_ca );
};return _g ;};func (_eg IntsMap )GetSlice (key uint64 )([]int ,bool ){_ec ,_ae :=_eg [key ];if !_ae {return nil ,false ;};return _ec ,true ;};type IntSlice []int ;func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;
};return (numerator /denominator )+1;};func NewNumSlice (i int )*NumSlice {_fc :=NumSlice (make ([]float32 ,i ));return &_fc };func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_gg *Stack )Peek ()(_gae interface{},_dac bool ){return _gg .peek ()};
func (_fb *Stack )Len ()int {return len (_fb .Data )};func (_ee NumSlice )GetInt (i int )(int ,error ){const _da ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_ee )-1{return 0,_b .Errorf (_da ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_aba :=_ee [i ];return int (_aba +Sign (_aba )*0.5),nil ;};func (_a IntsMap )Get (key uint64 )(int ,bool ){_ab ,_f :=_a [key ];if !_f {return 0,false ;};if len (_ab )==0{return 0,false ;};return _ab [0],true ;};func (_eac IntSlice )Get (index int )(int ,error ){if index > len (_eac )-1{return 0,_b .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _eac [index ],nil ;};