//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _a "github.com/unidoc/unipdf/v3/internal/jbig2/errors";type IntsMap map[uint64 ][]int ;func (_bd NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_bd )-1{return 0,_a .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bd [i ],nil ;};func (_ac IntSlice )Get (index int )(int ,error ){if index > len (_ac )-1{return 0,_a .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _ac [index ],nil ;};type Stack struct{Data []interface{};Aux *Stack ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_dgc *Stack )top ()int {return len (_dgc .Data )-1};func (_bdf *Stack )Push (v interface{}){_bdf .Data =append (_bdf .Data ,v )};func (_aa IntsMap )GetSlice (key uint64 )([]int ,bool ){_e ,_eg :=_aa [key ];if !_eg {return nil ,false ;};return _e ,true ;};func (_gc *IntSlice )Add (v int )error {if _gc ==nil {return _a .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_gc =append (*_gc ,v );return nil ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_dg IntSlice )Size ()int {return len (_dg )};type IntSlice []int ;func (_ag IntsMap )Get (key uint64 )(int ,bool ){_d ,_bc :=_ag [key ];if !_bc {return 0,false ;};if len (_d )==0{return 0,false ;};return _d [0],true ;};func (_b IntsMap )Add (key uint64 ,value int ){_b [key ]=append (_b [key ],value )};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_f *NumSlice )AddInt (v int ){*_f =append (*_f ,float32 (v ))};func (_fg *Stack )Pop ()(_ba interface{},_agb bool ){_ba ,_agb =_fg .peek ();if !_agb {return nil ,_agb ;};_fg .Data =_fg .Data [:_fg .top ()];return _ba ,true ;};func (_c NumSlice )GetInt (i int )(int ,error ){const _egf ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_c )-1{return 0,_a .Errorf (_egf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_cb :=_c [i ];return int (_cb +Sign (_cb )*0.5),nil ;};func (_af *Stack )peek ()(interface{},bool ){_cg :=_af .top ();if _cg ==-1{return nil ,false ;};return _af .Data [_cg ],true ;};func (_ad *IntSlice )Copy ()*IntSlice {_ec :=IntSlice (make ([]int ,len (*_ad )));copy (_ec ,*_ad );return &_ec ;};func NewNumSlice (i int )*NumSlice {_gfe :=NumSlice (make ([]float32 ,i ));return &_gfe };func Max (x ,y int )int {if x > y {return x ;};return y ;};func NewIntSlice (i int )*IntSlice {_gf :=IntSlice (make ([]int ,i ));return &_gf };func (_fc *Stack )Len ()int {return len (_fc .Data )};func (_ecb NumSlice )GetIntSlice ()[]int {_eb :=make ([]int ,len (_ecb ));for _ef ,_ca :=range _ecb {_eb [_ef ]=int (_ca );};return _eb ;};type NumSlice []float32 ;func (_bb IntsMap )Delete (key uint64 ){delete (_bb ,key )};func (_bg *Stack )Peek ()(_bf interface{},_agd bool ){return _bg .peek ()};func (_ece *NumSlice )Add (v float32 ){*_ece =append (*_ece ,v )};