//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _cd "github.com/unidoc/unipdf/v3/internal/jbig2/errors";type IntsMap map[uint64 ][]int ;func (_b IntsMap )GetSlice (key uint64 )([]int ,bool ){_cg ,_cdf :=_b [key ];if !_cdf {return nil ,false ;};return _cg ,true ;};func (_be *Stack )Pop ()(_fff interface{},_daa bool ){_fff ,_daa =_be .peek ();
if !_daa {return nil ,_daa ;};_be .Data =_be .Data [:_be .top ()];return _fff ,true ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};type IntSlice []int ;
func (_gb *Stack )Len ()int {return len (_gb .Data )};func (_gd IntsMap )Delete (key uint64 ){delete (_gd ,key )};func (_bef *Stack )Push (v interface{}){_bef .Data =append (_bef .Data ,v )};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;
};type Stack struct{Data []interface{};Aux *Stack ;};func NewNumSlice (i int )*NumSlice {_gg :=NumSlice (make ([]float32 ,i ));return &_gg };func NewIntSlice (i int )*IntSlice {_cda :=IntSlice (make ([]int ,i ));return &_cda };func Max (x ,y int )int {if x > y {return x ;
};return y ;};func (_a IntsMap )Add (key uint64 ,value int ){_a [key ]=append (_a [key ],value )};func (_fb *Stack )peek ()(interface{},bool ){_cf :=_fb .top ();if _cf ==-1{return nil ,false ;};return _fb .Data [_cf ],true ;};func (_bg *IntSlice )Add (v int )error {if _bg ==nil {return _cd .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_bg =append (*_bg ,v );return nil ;};func (_d IntSlice )Size ()int {return len (_d )};func (_fd *Stack )top ()int {return len (_fd .Data )-1};func (_ff NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_ff )-1{return 0,_cd .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ff [i ],nil ;};type NumSlice []float32 ;func (_g IntsMap )Get (key uint64 )(int ,bool ){_ae ,_ac :=_g [key ];if !_ac {return 0,false ;};if len (_ae )==0{return 0,false ;};return _ae [0],true ;};func (_bb NumSlice )GetInt (i int )(int ,error ){const _fe ="\u0047\u0065\u0074\u0049\u006e\u0074";
if i < 0||i > len (_bb )-1{return 0,_cd .Errorf (_fe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_ga :=_bb [i ];return int (_ga +Sign (_ga )*0.5),nil ;};
func (_gf *NumSlice )Add (v float32 ){*_gf =append (*_gf ,v )};func Min (x ,y int )int {if x < y {return x ;};return y ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_gfa NumSlice )GetIntSlice ()[]int {_db :=make ([]int ,len (_gfa ));
for _e ,_bae :=range _gfa {_db [_e ]=int (_bae );};return _db ;};func (_aa *Stack )Peek ()(_bbe interface{},_fg bool ){return _aa .peek ()};func (_da *NumSlice )AddInt (v int ){*_da =append (*_da ,float32 (v ))};func (_ce *IntSlice )Copy ()*IntSlice {_ba :=IntSlice (make ([]int ,len (*_ce )));
copy (_ba ,*_ce );return &_ba ;};func (_f IntSlice )Get (index int )(int ,error ){if index > len (_f )-1{return 0,_cd .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _f [index ],nil ;};