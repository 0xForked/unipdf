//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_e "errors";_fd "fmt";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_ca "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_f "math";_d "strings";);func (_ada *OutOfBandNode )String ()string {return _fd .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_f .MaxInt64 ));
};func (_bc *FixedSizeTable )InitTree (codeTable []*Code )error {_gcf (codeTable );for _ ,_eb :=range codeTable {_a :=_bc ._faa .append (_eb );if _a !=nil {return _a ;};};return nil ;};type InternalNode struct{_bcc int32 ;_fddc Node ;_be Node ;};func (_bf *ValueNode )String ()string {return _fd .Sprintf ("\u0025\u0064\u002f%\u0064",_bf ._eg ,_bf ._fad );
};func (_ac *OutOfBandNode )Decode (r *_c .Reader )(int64 ,error ){return 0,_ca .ErrOOB };type Tabler interface{Decode (_fba *_c .Reader )(int64 ,error );InitTree (_afb []*Code )error ;String ()string ;RootNode ()*InternalNode ;};type EncodedTable struct{BasicTabler ;
_fdd *InternalNode ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_eag :=&FixedSizeTable {_faa :&InternalNode {}};if _gf :=_eag .InitTree (codeTable );_gf !=nil {return nil ,_gf ;};return _eag ,nil ;};func (_gb *EncodedTable )InitTree (codeTable []*Code )error {_gcf (codeTable );
for _ ,_ea :=range codeTable {if _ga :=_gb ._fdd .append (_ea );_ga !=nil {return _ga ;};};return nil ;};func (_ad *FixedSizeTable )RootNode ()*InternalNode {return _ad ._faa };func _ecg (_gff *Code )*ValueNode {return &ValueNode {_eg :_gff ._fcb ,_fad :_gff ._ddd ,_bb :_gff ._afa }};
func (_cd *EncodedTable )String ()string {return _cd ._fdd .String ()+"\u000a"};var _ Node =&ValueNode {};func _dba (_ccf *Code )*OutOfBandNode {return &OutOfBandNode {}};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_edd ){return nil ,_e .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fe :=_edd [number -1];if _fe ==nil {var _eff error ;_fe ,_eff =_egg (_ebf [number -1]);if _eff !=nil {return nil ,_eff ;};_edd [number -1]=_fe ;};return _fe ,nil ;};var _ebf =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
var _ Node =&InternalNode {};func (_gc *ValueNode )Decode (r *_c .Reader )(int64 ,error ){_gab ,_gcb :=r .ReadBits (byte (_gc ._eg ));if _gcb !=nil {return 0,_gcb ;};if _gc ._bb {_gab =-_gab ;};return int64 (_gc ._fad )+int64 (_gab ),nil ;};type ValueNode struct{_eg int32 ;
_fad int32 ;_bb bool ;};var _edd =make ([]Tabler ,len (_ebf ));type OutOfBandNode struct{};type Node interface{Decode (_fag *_c .Reader )(int64 ,error );String ()string ;};type FixedSizeTable struct{_faa *InternalNode };func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_df :prefixLength ,_fcb :rangeLength ,_ddd :rangeLow ,_afa :isLowerRange ,_eac :-1};
};func (_fbe *InternalNode )append (_gde *Code )(_bcf error ){if _gde ._df ==0{return nil ;};_bdd :=_gde ._df -1-_fbe ._bcc ;if _bdd < 0{return _e .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_adf :=(_gde ._eac >>uint (_bdd ))&0x1;if _bdd ==0{if _gde ._fcb ==-1{if _adf ==1{if _fbe ._be !=nil {return _fd .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_gde );
};_fbe ._be =_dba (_gde );}else {if _fbe ._fddc !=nil {return _fd .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_gde );};_fbe ._fddc =_dba (_gde );};
}else {if _adf ==1{if _fbe ._be !=nil {return _fd .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_gde );};_fbe ._be =_ecg (_gde );
}else {if _fbe ._fddc !=nil {return _fd .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_gde );};_fbe ._fddc =_ecg (_gde );
};};}else {if _adf ==1{if _fbe ._be ==nil {_fbe ._be =_gag (_fbe ._bcc +1);};if _bcf =_fbe ._be .(*InternalNode ).append (_gde );_bcf !=nil {return _bcf ;};}else {if _fbe ._fddc ==nil {_fbe ._fddc =_gag (_fbe ._bcc +1);};if _bcf =_fbe ._fddc .(*InternalNode ).append (_gde );
_bcf !=nil {return _bcf ;};};};return nil ;};func (_cb *Code )String ()string {var _gg string ;if _cb ._eac !=-1{_gg =_gbd (_cb ._eac ,_cb ._df );}else {_gg ="\u003f";};return _fd .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_gg ,_cb ._df ,_cb ._fcb ,_cb ._ddd );
};func (_bbe *StandardTable )InitTree (codeTable []*Code )error {_gcf (codeTable );for _ ,_ee :=range codeTable {if _cg :=_bbe ._af .append (_ee );_cg !=nil {return _cg ;};};return nil ;};func _edf (_fcfd ,_cdc int32 )int32 {if _fcfd > _cdc {return _fcfd ;
};return _cdc ;};func _gbd (_fcc ,_bde int32 )string {var _bec int32 ;_gda :=make ([]rune ,_bde );for _afg :=int32 (1);_afg <=_bde ;_afg ++{_bec =_fcc >>uint (_bde -_afg )&1;if _bec !=0{_gda [_afg -1]='1';}else {_gda [_afg -1]='0';};};return string (_gda );
};func (_dd *InternalNode )String ()string {_ed :=&_d .Builder {};_ed .WriteString ("\u000a");_dd .pad (_ed );_ed .WriteString ("\u0030\u003a\u0020");_ed .WriteString (_dd ._fddc .String ()+"\u000a");_dd .pad (_ed );_ed .WriteString ("\u0031\u003a\u0020");
_ed .WriteString (_dd ._be .String ()+"\u000a");return _ed .String ();};type Code struct{_df int32 ;_fcb int32 ;_ddd int32 ;_afa bool ;_eac int32 ;};func _egg (_cac [][]int32 )(*StandardTable ,error ){var _ce []*Code ;for _bg :=0;_bg < len (_cac );_bg ++{_eaf :=_cac [_bg ][0];
_dec :=_cac [_bg ][1];_dag :=_cac [_bg ][2];var _cdb bool ;if len (_cac [_bg ])> 3{_cdb =true ;};_ce =append (_ce ,NewCode (_eaf ,_dec ,_dag ,_cdb ));};_caa :=&StandardTable {_af :_gag (0)};if _gce :=_caa .InitTree (_ce );_gce !=nil {return nil ,_gce ;
};return _caa ,nil ;};func (_fce *StandardTable )Decode (r *_c .Reader )(int64 ,error ){return _fce ._af .Decode (r )};var _ Node =&OutOfBandNode {};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_c .Reader ;HtPS ()int32 ;HtRS ()int32 ;
HtOOB ()int32 ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_dc :=&EncodedTable {_fdd :&InternalNode {},BasicTabler :table };if _bd :=_dc .parseTable ();_bd !=nil {return nil ,_bd ;};return _dc ,nil ;};func (_ab *StandardTable )RootNode ()*InternalNode {return _ab ._af };
func (_dbf *FixedSizeTable )String ()string {return _dbf ._faa .String ()+"\u000a"};type StandardTable struct{_af *InternalNode };func _gag (_gba int32 )*InternalNode {return &InternalNode {_bcc :_gba }};func (_fcf *InternalNode )Decode (r *_c .Reader )(int64 ,error ){_fb ,_ef :=r .ReadBit ();
if _ef !=nil {return 0,_ef ;};if _fb ==0{return _fcf ._fddc .Decode (r );};return _fcf ._be .Decode (r );};func _gcf (_gfg []*Code ){var _eee int32 ;for _ ,_bbc :=range _gfg {_eee =_edf (_eee ,_bbc ._df );};_bdc :=make ([]int32 ,_eee +1);for _ ,_aa :=range _gfg {_bdc [_aa ._df ]++;
};var _cf int32 ;_gfc :=make ([]int32 ,len (_bdc )+1);_bdc [0]=0;for _dcd :=int32 (1);_dcd <=int32 (len (_bdc ));_dcd ++{_gfc [_dcd ]=(_gfc [_dcd -1]+(_bdc [_dcd -1]))<<1;_cf =_gfc [_dcd ];for _ ,_fbc :=range _gfg {if _fbc ._df ==_dcd {_fbc ._eac =_cf ;
_cf ++;};};};};var _ Tabler =&EncodedTable {};func (_dcb *StandardTable )String ()string {return _dcb ._af .String ()+"\u000a"};func (_de *EncodedTable )parseTable ()error {var (_db []*Code ;_dg ,_dee ,_ff int32 ;_ffc uint64 ;_fc error ;);_ba :=_de .StreamReader ();
_ge :=_de .HtLow ();for _ge < _de .HtHigh (){_ffc ,_fc =_ba .ReadBits (byte (_de .HtPS ()));if _fc !=nil {return _fc ;};_dg =int32 (_ffc );_ffc ,_fc =_ba .ReadBits (byte (_de .HtRS ()));if _fc !=nil {return _fc ;};_dee =int32 (_ffc );_db =append (_db ,NewCode (_dg ,_dee ,_ff ,false ));
_ge +=1<<uint (_dee );};_ffc ,_fc =_ba .ReadBits (byte (_de .HtPS ()));if _fc !=nil {return _fc ;};_dg =int32 (_ffc );_dee =32;_ff =_de .HtLow ()-1;_db =append (_db ,NewCode (_dg ,_dee ,_ff ,true ));_ffc ,_fc =_ba .ReadBits (byte (_de .HtPS ()));if _fc !=nil {return _fc ;
};_dg =int32 (_ffc );_dee =32;_ff =_de .HtHigh ();_db =append (_db ,NewCode (_dg ,_dee ,_ff ,false ));if _de .HtOOB ()==1{_ffc ,_fc =_ba .ReadBits (byte (_de .HtPS ()));if _fc !=nil {return _fc ;};_dg =int32 (_ffc );_db =append (_db ,NewCode (_dg ,-1,-1,false ));
};if _fc =_de .InitTree (_db );_fc !=nil {return _fc ;};return nil ;};func (_ec *EncodedTable )Decode (r *_c .Reader )(int64 ,error ){return _ec ._fdd .Decode (r )};func (_gd *FixedSizeTable )Decode (r *_c .Reader )(int64 ,error ){return _gd ._faa .Decode (r )};
func (_daa *InternalNode )pad (_fda *_d .Builder ){for _ecb :=int32 (0);_ecb < _daa ._bcc ;_ecb ++{_fda .WriteString ("\u0020\u0020\u0020");};};func (_dca *EncodedTable )RootNode ()*InternalNode {return _dca ._fdd };