//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_bd "errors";_a "fmt";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_bg "math";_bb "strings";);func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_gb :=&EncodedTable {_da :&InternalNode {},BasicTabler :table };
if _gd :=_gb .parseTable ();_gd !=nil {return nil ,_gd ;};return _gb ,nil ;};var _ Node =&InternalNode {};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_fa :=&FixedSizeTable {_cd :&InternalNode {}};if _ge :=_fa .InitTree (codeTable );
_ge !=nil {return nil ,_ge ;};return _fa ,nil ;};func (_f *EncodedTable )InitTree (codeTable []*Code )error {_def (codeTable );for _ ,_gdf :=range codeTable {if _ec :=_f ._da .append (_gdf );_ec !=nil {return _ec ;};};return nil ;};func (_fb *FixedSizeTable )RootNode ()*InternalNode {return _fb ._cd };
type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_g .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};type ValueNode struct{_gg int32 ;_ff int32 ;_gec bool ;};func _fe (_gf *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_gdb *InternalNode )String ()string {_db :=&_bb .Builder {};
_db .WriteString ("\u000a");_gdb .pad (_db );_db .WriteString ("\u0030\u003a\u0020");_db .WriteString (_gdb ._caaa .String ()+"\u000a");_gdb .pad (_db );_db .WriteString ("\u0031\u003a\u0020");_db .WriteString (_gdb ._ed .String ()+"\u000a");return _db .String ();
};type InternalNode struct{_ebc int32 ;_caaa Node ;_ed Node ;};func (_af *StandardTable )String ()string {return _af ._fca .String ()+"\u000a"};func (_cc *StandardTable )RootNode ()*InternalNode {return _cc ._fca };func (_caa *FixedSizeTable )InitTree (codeTable []*Code )error {_def (codeTable );
for _ ,_cbc :=range codeTable {_bee :=_caa ._cd .append (_cbc );if _bee !=nil {return _bee ;};};return nil ;};type OutOfBandNode struct{};var _dag =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_bf *FixedSizeTable )String ()string {return _bf ._cd .String ()+"\u000a"};var _ Tabler =&EncodedTable {};func _cg (_ddfc *Code )*ValueNode {return &ValueNode {_gg :_ddfc ._efa ,_ff :_ddfc ._gee ,_gec :_ddfc ._beb };};var _ Node =&OutOfBandNode {};
func (_fc *InternalNode )append (_fee *Code )(_ffc error ){if _fee ._fgf ==0{return nil ;};_dde :=_fee ._fgf -1-_fc ._ebc ;if _dde < 0{return _bd .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_fg :=(_fee ._edb >>uint (_dde ))&0x1;if _dde ==0{if _fee ._efa ==-1{if _fg ==1{if _fc ._ed !=nil {return _a .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fee );
};_fc ._ed =_fe (_fee );}else {if _fc ._caaa !=nil {return _a .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fee );};_fc ._caaa =_fe (_fee );};}else {if _fg ==1{if _fc ._ed !=nil {return _a .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fee );
};_fc ._ed =_cg (_fee );}else {if _fc ._caaa !=nil {return _a .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fee );
};_fc ._caaa =_cg (_fee );};};}else {if _fg ==1{if _fc ._ed ==nil {_fc ._ed =_ade (_fc ._ebc +1);};if _ffc =_fc ._ed .(*InternalNode ).append (_fee );_ffc !=nil {return _ffc ;};}else {if _fc ._caaa ==nil {_fc ._caaa =_ade (_fc ._ebc +1);};if _ffc =_fc ._caaa .(*InternalNode ).append (_fee );
_ffc !=nil {return _ffc ;};};};return nil ;};func (_ad *OutOfBandNode )Decode (r *_g .Reader )(int64 ,error ){return 0,_e .ErrOOB };func _ffg (_cdc ,_gc int32 )string {var _de int32 ;_dbd :=make ([]rune ,_gc );for _ga :=int32 (1);_ga <=_gc ;_ga ++{_de =_cdc >>uint (_gc -_ga )&1;
if _de !=0{_dbd [_ga -1]='1';}else {_dbd [_ga -1]='0';};};return string (_dbd );};func (_ae *ValueNode )String ()string {return _a .Sprintf ("\u0025\u0064\u002f%\u0064",_ae ._gg ,_ae ._ff );};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_caf ){return nil ,_bd .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fcd :=_caf [number -1];if _fcd ==nil {var _cdf error ;_fcd ,_cdf =_baf (_dag [number -1]);if _cdf !=nil {return nil ,_cdf ;};_caf [number -1]=_fcd ;};return _fcd ,nil ;};func (_egc *InternalNode )pad (_egd *_bb .Builder ){for _aa :=int32 (0);_aa < _egc ._ebc ;
_aa ++{_egd .WriteString ("\u0020\u0020\u0020");};};func _baf (_ecf [][]int32 )(*StandardTable ,error ){var _ddae []*Code ;for _bea :=0;_bea < len (_ecf );_bea ++{_gff :=_ecf [_bea ][0];_adba :=_ecf [_bea ][1];_dbc :=_ecf [_bea ][2];var _geg bool ;if len (_ecf [_bea ])> 3{_geg =true ;
};_ddae =append (_ddae ,NewCode (_gff ,_adba ,_dbc ,_geg ));};_ab :=&StandardTable {_fca :_ade (0)};if _gbf :=_ab .InitTree (_ddae );_gbf !=nil {return nil ,_gbf ;};return _ab ,nil ;};func (_ac *EncodedTable )RootNode ()*InternalNode {return _ac ._da };
func (_bc *OutOfBandNode )String ()string {return _a .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_bg .MaxInt64 ));};func (_c *EncodedTable )String ()string {return _c ._da .String ()+"\u000a"};func (_cge *Code )String ()string {var _ea string ;if _cge ._edb !=-1{_ea =_ffg (_cge ._edb ,_cge ._fgf );
}else {_ea ="\u003f";};return _a .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_ea ,_cge ._fgf ,_cge ._efa ,_cge ._gee );};func (_gbc *StandardTable )Decode (r *_g .Reader )(int64 ,error ){return _gbc ._fca .Decode (r )};func (_dca *ValueNode )Decode (r *_g .Reader )(int64 ,error ){_ba ,_cf :=r .ReadBits (byte (_dca ._gg ));
if _cf !=nil {return 0,_cf ;};if _dca ._gec {_ba =-_ba ;};return int64 (_dca ._ff )+int64 (_ba ),nil ;};type Node interface{Decode (_eg *_g .Reader )(int64 ,error );String ()string ;};type EncodedTable struct{BasicTabler ;_da *InternalNode ;};type Code struct{_fgf int32 ;
_efa int32 ;_gee int32 ;_beb bool ;_edb int32 ;};func (_bdc *FixedSizeTable )Decode (r *_g .Reader )(int64 ,error ){return _bdc ._cd .Decode (r )};var _caf =make ([]Tabler ,len (_dag ));func (_bdb *EncodedTable )parseTable ()error {var (_ace []*Code ;_be ,_daa ,_gbd int32 ;
_fd uint64 ;_cb error ;);_ddf :=_bdb .StreamReader ();_ca :=_bdb .HtLow ();for _ca < _bdb .HtHigh (){_fd ,_cb =_ddf .ReadBits (byte (_bdb .HtPS ()));if _cb !=nil {return _cb ;};_be =int32 (_fd );_fd ,_cb =_ddf .ReadBits (byte (_bdb .HtRS ()));if _cb !=nil {return _cb ;
};_daa =int32 (_fd );_ace =append (_ace ,NewCode (_be ,_daa ,_gbd ,false ));_ca +=1<<uint (_daa );};_fd ,_cb =_ddf .ReadBits (byte (_bdb .HtPS ()));if _cb !=nil {return _cb ;};_be =int32 (_fd );_daa =32;_gbd =_bdb .HtLow ()-1;_ace =append (_ace ,NewCode (_be ,_daa ,_gbd ,true ));
_fd ,_cb =_ddf .ReadBits (byte (_bdb .HtPS ()));if _cb !=nil {return _cb ;};_be =int32 (_fd );_daa =32;_gbd =_bdb .HtHigh ();_ace =append (_ace ,NewCode (_be ,_daa ,_gbd ,false ));if _bdb .HtOOB ()==1{_fd ,_cb =_ddf .ReadBits (byte (_bdb .HtPS ()));if _cb !=nil {return _cb ;
};_be =int32 (_fd );_ace =append (_ace ,NewCode (_be ,-1,-1,false ));};if _cb =_bdb .InitTree (_ace );_cb !=nil {return _cb ;};return nil ;};type StandardTable struct{_fca *InternalNode };func (_ddb *StandardTable )InitTree (codeTable []*Code )error {_def (codeTable );
for _ ,_cdd :=range codeTable {if _ddeg :=_ddb ._fca .append (_cdd );_ddeg !=nil {return _ddeg ;};};return nil ;};type Tabler interface{Decode (_edc *_g .Reader )(int64 ,error );InitTree (_daf []*Code )error ;String ()string ;RootNode ()*InternalNode ;
};var _ Node =&ValueNode {};func _cgf (_cda ,_ffe int32 )int32 {if _cda > _ffe {return _cda ;};return _ffe ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_fgf :prefixLength ,_efa :rangeLength ,_gee :rangeLow ,_beb :isLowerRange ,_edb :-1};
};func _ade (_dda int32 )*InternalNode {return &InternalNode {_ebc :_dda }};func (_bgg *InternalNode )Decode (r *_g .Reader )(int64 ,error ){_bcb ,_adb :=r .ReadBit ();if _adb !=nil {return 0,_adb ;};if _bcb ==0{return _bgg ._caaa .Decode (r );};return _bgg ._ed .Decode (r );
};func _def (_dbb []*Code ){var _gcf int32 ;for _ ,_dab :=range _dbb {_gcf =_cgf (_gcf ,_dab ._fgf );};_bead :=make ([]int32 ,_gcf +1);for _ ,_gcg :=range _dbb {_bead [_gcg ._fgf ]++;};var _eff int32 ;_ffd :=make ([]int32 ,len (_bead )+1);_bead [0]=0;for _ee :=int32 (1);
_ee <=int32 (len (_bead ));_ee ++{_ffd [_ee ]=(_ffd [_ee -1]+(_bead [_ee -1]))<<1;_eff =_ffd [_ee ];for _ ,_edce :=range _dbb {if _edce ._fgf ==_ee {_edce ._edb =_eff ;_eff ++;};};};};type FixedSizeTable struct{_cd *InternalNode };func (_dd *EncodedTable )Decode (r *_g .Reader )(int64 ,error ){return _dd ._da .Decode (r )};
