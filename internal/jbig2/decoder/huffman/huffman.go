//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_ed "errors";_ag "fmt";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_e "math";_d "strings";);func (_afe *OutOfBandNode )Decode (r _g .StreamReader )(int64 ,error ){return int64 (_e .MaxInt64 ),nil };var _ Node =&InternalNode {};var _ Node =&OutOfBandNode {};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_g .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_fc *EncodedTable )RootNode ()*InternalNode {return _fc ._af };func _bab (_bgf [][]int32 )(*StandardTable ,error ){var _baba []*Code ;for _fdb :=0;_fdb < len (_bgf );_fdb ++{_aea :=_bgf [_fdb ][0];_ege :=_bgf [_fdb ][1];_cgc :=_bgf [_fdb ][2];var _eaf bool ;if len (_bgf [_fdb ])> 3{_eaf =true ;};_baba =append (_baba ,NewCode (_aea ,_ege ,_cgc ,_eaf ));};_bbb :=&StandardTable {_bb :_ccc (0)};if _dge :=_bbb .InitTree (_baba );_dge !=nil {return nil ,_dge ;};return _bbb ,nil ;};func (_dc *FixedSizeTable )InitTree (codeTable []*Code )error {_gee (codeTable );for _ ,_dfe :=range codeTable {_bc :=_dc ._gac .append (_dfe );if _bc !=nil {return _bc ;};};return nil ;};type OutOfBandNode struct{};func (_bf *OutOfBandNode )String ()string {return _ag .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_e .MaxInt64 ));};func (_ab *EncodedTable )Decode (r _g .StreamReader )(int64 ,error ){return _ab ._af .Decode (r )};type Tabler interface{Decode (_bdc _g .StreamReader )(int64 ,error );InitTree (_fdc []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_fe :prefixLength ,_bbe :rangeLength ,_bdg :rangeLow ,_aa :isLowerRange ,_eec :-1};};func _be (_cgf *Code )*OutOfBandNode {return &OutOfBandNode {}};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_gf :=&FixedSizeTable {_gac :&InternalNode {}};if _dd :=_gf .InitTree (codeTable );_dd !=nil {return nil ,_dd ;};return _gf ,nil ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_gfd ){return nil ,_ed .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_fce :=_gfd [number -1];if _fce ==nil {var _fbe error ;_fce ,_fbe =_bab (_afef [number -1]);if _fbe !=nil {return nil ,_fbe ;};_gfd [number -1]=_fce ;};return _fce ,nil ;};func (_ae *FixedSizeTable )Decode (r _g .StreamReader )(int64 ,error ){return _ae ._gac .Decode (r )};var _ Node =&ValueNode {};func (_ec *ValueNode )String ()string {return _ag .Sprintf ("\u0025\u0064\u002f%\u0064",_ec ._fg ,_ec ._ac );};type Code struct{_fe int32 ;_bbe int32 ;_bdg int32 ;_aa bool ;_eec int32 ;};type InternalNode struct{_da int32 ;_ce Node ;_ff Node ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_gb :=&EncodedTable {_af :&InternalNode {},BasicTabler :table };if _ad :=_gb .parseTable ();_ad !=nil {return nil ,_ad ;};return _gb ,nil ;};func (_afb *InternalNode )String ()string {_cee :=&_d .Builder {};_cee .WriteString ("\u000a");_afb .pad (_cee );_cee .WriteString ("\u0030\u003a\u0020");_cee .WriteString (_afb ._ce .String ()+"\u000a");_afb .pad (_cee );_cee .WriteString ("\u0031\u003a\u0020");_cee .WriteString (_afb ._ff .String ()+"\u000a");return _cee .String ();};func (_cf *StandardTable )RootNode ()*InternalNode {return _cf ._bb };func _ecf (_dfb ,_ced int32 )string {var _ecg int32 ;_fcf :=make ([]rune ,_ced );for _abg :=int32 (1);_abg <=_ced ;_abg ++{_ecg =_dfb >>uint (_ced -_abg )&1;if _ecg !=0{_fcf [_abg -1]='1';}else {_fcf [_abg -1]='0';};};return string (_fcf );};var _gfd =make ([]Tabler ,len (_afef ));func (_bec *InternalNode )append (_dff *Code )(_fa error ){if _dff ._fe ==0{return nil ;};_abf :=_dff ._fe -1-_bec ._da ;if _abf < 0{return _ed .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_eeg :=(_dff ._eec >>uint (_abf ))&0x1;if _abf ==0{if _dff ._bbe ==-1{if _eeg ==1{if _bec ._ff !=nil {return _ag .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dff );};_bec ._ff =_be (_dff );}else {if _bec ._ce !=nil {return _ag .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dff );};_bec ._ce =_be (_dff );};}else {if _eeg ==1{if _bec ._ff !=nil {return _ag .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dff );};_bec ._ff =_dca (_dff );}else {if _bec ._ce !=nil {return _ag .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dff );};_bec ._ce =_dca (_dff );};};}else {if _eeg ==1{if _bec ._ff ==nil {_bec ._ff =_ccc (_bec ._da +1);};if _fa =_bec ._ff .(*InternalNode ).append (_dff );_fa !=nil {return _fa ;};}else {if _bec ._ce ==nil {_bec ._ce =_ccc (_bec ._da +1);};if _fa =_bec ._ce .(*InternalNode ).append (_dff );_fa !=nil {return _fa ;};};};return nil ;};func _gee (_cac []*Code ){var _bgd int32 ;for _ ,_efb :=range _cac {_bgd =_eegd (_bgd ,_efb ._fe );};_fgg :=make ([]int32 ,_bgd +1);for _ ,_bbd :=range _cac {_fgg [_bbd ._fe ]++;};var _dcc int32 ;_ceeb :=make ([]int32 ,len (_fgg )+1);_fgg [0]=0;for _dgg :=int32 (1);_dgg <=int32 (len (_fgg ));_dgg ++{_ceeb [_dgg ]=(_ceeb [_dgg -1]+(_fgg [_dgg -1]))<<1;_dcc =_ceeb [_dgg ];for _ ,_bfb :=range _cac {if _bfb ._fe ==_dgg {_bfb ._eec =_dcc ;_dcc ++;};};};};type Node interface{Decode (_cg _g .StreamReader )(int64 ,error );String ()string ;};func (_eab *InternalNode )pad (_cdb *_d .Builder ){for _abd :=int32 (0);_abd < _eab ._da ;_abd ++{_cdb .WriteString ("\u0020\u0020\u0020");};};func (_ef *FixedSizeTable )String ()string {return _ef ._gac .String ()+"\u000a"};func (_dfd *StandardTable )String ()string {return _dfd ._bb .String ()+"\u000a"};var _ Tabler =&EncodedTable {};type FixedSizeTable struct{_gac *InternalNode };func _dca (_cdg *Code )*ValueNode {return &ValueNode {_fg :_cdg ._bbe ,_ac :_cdg ._bdg ,_fdg :_cdg ._aa }};var _afef =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};type ValueNode struct{_fg int32 ;_ac int32 ;_fdg bool ;};func _ccc (_gg int32 )*InternalNode {return &InternalNode {_da :_gg }};func (_ea *ValueNode )Decode (r _g .StreamReader )(int64 ,error ){_cd ,_dgf :=r .ReadBits (byte (_ea ._fg ));if _dgf !=nil {return 0,_dgf ;};if _ea ._fdg {_cd =-_cd ;};return int64 (_ea ._ac )+int64 (_cd ),nil ;};func (_gd *EncodedTable )InitTree (codeTable []*Code )error {_gee (codeTable );for _ ,_eg :=range codeTable {if _c :=_gd ._af .append (_eg );_c !=nil {return _c ;};};return nil ;};func _eegd (_ead ,_bfe int32 )int32 {if _ead > _bfe {return _ead ;};return _bfe ;};func (_cb *InternalNode )Decode (r _g .StreamReader )(int64 ,error ){_dae ,_fgb :=r .ReadBit ();if _fgb !=nil {return 0,_fgb ;};if _dae ==0{return _cb ._ce .Decode (r );};return _cb ._ff .Decode (r );};func (_db *StandardTable )Decode (r _g .StreamReader )(int64 ,error ){return _db ._bb .Decode (r )};func (_ge *EncodedTable )String ()string {return _ge ._af .String ()+"\u000a"};func (_efa *Code )String ()string {var _ca string ;if _efa ._eec !=-1{_ca =_ecf (_efa ._eec ,_efa ._fe );}else {_ca ="\u003f";};return _ag .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_ca ,_efa ._fe ,_efa ._bbe ,_efa ._bdg );};func (_ccf *FixedSizeTable )RootNode ()*InternalNode {return _ccf ._gac };type StandardTable struct{_bb *InternalNode };func (_faa *StandardTable )InitTree (codeTable []*Code )error {_gee (codeTable );for _ ,_edb :=range codeTable {if _aef :=_faa ._bb .append (_edb );_aef !=nil {return _aef ;};};return nil ;};func (_egg *EncodedTable )parseTable ()error {var (_b []*Code ;_cc ,_fb ,_dg int32 ;_ga uint64 ;_ba error ;);_fd :=_egg .StreamReader ();_df :=_egg .HtLow ();for _df < _egg .HtHigh (){_ga ,_ba =_fd .ReadBits (byte (_egg .HtPS ()));if _ba !=nil {return _ba ;};_cc =int32 (_ga );_ga ,_ba =_fd .ReadBits (byte (_egg .HtRS ()));if _ba !=nil {return _ba ;};_fb =int32 (_ga );_b =append (_b ,NewCode (_cc ,_fb ,_dg ,false ));_df +=1<<uint (_fb );};_ga ,_ba =_fd .ReadBits (byte (_egg .HtPS ()));if _ba !=nil {return _ba ;};_cc =int32 (_ga );_fb =32;_dg =_egg .HtLow ()-1;_b =append (_b ,NewCode (_cc ,_fb ,_dg ,true ));_ga ,_ba =_fd .ReadBits (byte (_egg .HtPS ()));if _ba !=nil {return _ba ;};_cc =int32 (_ga );_fb =32;_dg =_egg .HtHigh ();_b =append (_b ,NewCode (_cc ,_fb ,_dg ,false ));if _egg .HtOOB ()==1{_ga ,_ba =_fd .ReadBits (byte (_egg .HtPS ()));if _ba !=nil {return _ba ;};_cc =int32 (_ga );_b =append (_b ,NewCode (_cc ,-1,-1,false ));};if _ba =_egg .InitTree (_b );_ba !=nil {return _ba ;};return nil ;};type EncodedTable struct{BasicTabler ;_af *InternalNode ;};