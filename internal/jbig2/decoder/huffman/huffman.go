//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_dd "errors";_be "fmt";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_d "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ba "math";_b "strings";);type FixedSizeTable struct{_da *InternalNode };func (_gc *EncodedTable )parseTable ()error {var (_faf []*Code ;
_eg ,_fg ,_c int32 ;_gd uint64 ;_dba error ;);_eb :=_gc .StreamReader ();_gdd :=_gc .HtLow ();for _gdd < _gc .HtHigh (){_gd ,_dba =_eb .ReadBits (byte (_gc .HtPS ()));if _dba !=nil {return _dba ;};_eg =int32 (_gd );_gd ,_dba =_eb .ReadBits (byte (_gc .HtRS ()));
if _dba !=nil {return _dba ;};_fg =int32 (_gd );_faf =append (_faf ,NewCode (_eg ,_fg ,_c ,false ));_gdd +=1<<uint (_fg );};_gd ,_dba =_eb .ReadBits (byte (_gc .HtPS ()));if _dba !=nil {return _dba ;};_eg =int32 (_gd );_fg =32;_c =_gc .HtLow ()-1;_faf =append (_faf ,NewCode (_eg ,_fg ,_c ,true ));
_gd ,_dba =_eb .ReadBits (byte (_gc .HtPS ()));if _dba !=nil {return _dba ;};_eg =int32 (_gd );_fg =32;_c =_gc .HtHigh ();_faf =append (_faf ,NewCode (_eg ,_fg ,_c ,false ));if _gc .HtOOB ()==1{_gd ,_dba =_eb .ReadBits (byte (_gc .HtPS ()));if _dba !=nil {return _dba ;
};_eg =int32 (_gd );_faf =append (_faf ,NewCode (_eg ,-1,-1,false ));};if _dba =_gc .InitTree (_faf );_dba !=nil {return _dba ;};return nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_gg :=&EncodedTable {_db :&InternalNode {},BasicTabler :table };
if _ac :=_gg .parseTable ();_ac !=nil {return nil ,_ac ;};return _gg ,nil ;};func (_gfgg *StandardTable )InitTree (codeTable []*Code )error {_egb (codeTable );for _ ,_gcc :=range codeTable {if _ffa :=_gfgg ._eab .append (_gcc );_ffa !=nil {return _ffa ;
};};return nil ;};func (_bcb *StandardTable )String ()string {return _bcb ._eab .String ()+"\u000a"};func (_dac *ValueNode )Decode (r _a .StreamReader )(int64 ,error ){_baca ,_ebb :=r .ReadBits (byte (_dac ._ec ));if _ebb !=nil {return 0,_ebb ;};if _dac ._bc {_baca =-_baca ;
};return int64 (_dac ._bbd )+int64 (_baca ),nil ;};func _bb (_fbe *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_fab *OutOfBandNode )Decode (r _a .StreamReader )(int64 ,error ){return 0,_d .ErrOOB };func (_aa *FixedSizeTable )String ()string {return _aa ._da .String ()+"\u000a"};
func _egb (_fd []*Code ){var _ee int32 ;for _ ,_ebf :=range _fd {_ee =_gccf (_ee ,_ebf ._ggd );};_gcb :=make ([]int32 ,_ee +1);for _ ,_defe :=range _fd {_gcb [_defe ._ggd ]++;};var _bec int32 ;_eeb :=make ([]int32 ,len (_gcb )+1);_gcb [0]=0;for _bfd :=int32 (1);
_bfd <=int32 (len (_gcb ));_bfd ++{_eeb [_bfd ]=(_eeb [_bfd -1]+(_gcb [_bfd -1]))<<1;_bec =_eeb [_bfd ];for _ ,_fdc :=range _fd {if _fdc ._ggd ==_bfd {_fdc ._ggg =_bec ;_bec ++;};};};};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ggd :prefixLength ,_aceg :rangeLength ,_deg :rangeLow ,_aee :isLowerRange ,_ggg :-1};
};func (_dg *FixedSizeTable )Decode (r _a .StreamReader )(int64 ,error ){return _dg ._da .Decode (r )};func (_gddf *InternalNode )Decode (r _a .StreamReader )(int64 ,error ){_ace ,_bea :=r .ReadBit ();if _bea !=nil {return 0,_bea ;};if _ace ==0{return _gddf ._gfc .Decode (r );
};return _gddf ._cg .Decode (r );};var _ Tabler =&EncodedTable {};func (_fabb *InternalNode )String ()string {_ed :=&_b .Builder {};_ed .WriteString ("\u000a");_fabb .pad (_ed );_ed .WriteString ("\u0030\u003a\u0020");_ed .WriteString (_fabb ._gfc .String ()+"\u000a");
_fabb .pad (_ed );_ed .WriteString ("\u0031\u003a\u0020");_ed .WriteString (_fabb ._cg .String ()+"\u000a");return _ed .String ();};var _ Node =&InternalNode {};func (_eae *FixedSizeTable )InitTree (codeTable []*Code )error {_egb (codeTable );for _ ,_cc :=range codeTable {_fb :=_eae ._da .append (_cc );
if _fb !=nil {return _fb ;};};return nil ;};type InternalNode struct{_ge int32 ;_gfc Node ;_cg Node ;};func (_gega *StandardTable )RootNode ()*InternalNode {return _gega ._eab };func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_ab :=&FixedSizeTable {_da :&InternalNode {}};
if _dad :=_ab .InitTree (codeTable );_dad !=nil {return nil ,_dad ;};return _ab ,nil ;};type ValueNode struct{_ec int32 ;_bbd int32 ;_bc bool ;};func (_ccd *OutOfBandNode )String ()string {return _be .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_ba .MaxInt64 ));
};func (_ccc *Code )String ()string {var _gag string ;if _ccc ._ggg !=-1{_gag =_aaa (_ccc ._ggg ,_ccc ._ggd );}else {_gag ="\u003f";};return _be .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_gag ,_ccc ._ggd ,_ccc ._aceg ,_ccc ._deg );
};type StandardTable struct{_eab *InternalNode };func (_beg *InternalNode )pad (_bf *_b .Builder ){for _bae :=int32 (0);_bae < _beg ._ge ;_bae ++{_bf .WriteString ("\u0020\u0020\u0020");};};func (_gcee *StandardTable )Decode (r _a .StreamReader )(int64 ,error ){return _gcee ._eab .Decode (r )};
type OutOfBandNode struct{};func _gde (_eaa *Code )*ValueNode {return &ValueNode {_ec :_eaa ._aceg ,_bbd :_eaa ._deg ,_bc :_eaa ._aee }};func (_bac *FixedSizeTable )RootNode ()*InternalNode {return _bac ._da };func (_fabf *ValueNode )String ()string {return _be .Sprintf ("\u0025\u0064\u002f%\u0064",_fabf ._ec ,_fabf ._bbd );
};var _ Node =&ValueNode {};func (_fa *EncodedTable )Decode (r _a .StreamReader )(int64 ,error ){return _fa ._db .Decode (r )};func (_gf *EncodedTable )InitTree (codeTable []*Code )error {_egb (codeTable );for _ ,_e :=range codeTable {if _ff :=_gf ._db .append (_e );
_ff !=nil {return _ff ;};};return nil ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_a .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};type EncodedTable struct{BasicTabler ;_db *InternalNode ;};func _aaa (_eda ,_cbf int32 )string {var _cd int32 ;
_fe :=make ([]rune ,_cbf );for _ddc :=int32 (1);_ddc <=_cbf ;_ddc ++{_cd =_eda >>uint (_cbf -_ddc )&1;if _cd !=0{_fe [_ddc -1]='1';}else {_fe [_ddc -1]='0';};};return string (_fe );};func (_ea *EncodedTable )RootNode ()*InternalNode {return _ea ._db };
func (_gce *InternalNode )append (_gda *Code )(_fbea error ){if _gda ._ggd ==0{return nil ;};_eac :=_gda ._ggd -1-_gce ._ge ;if _eac < 0{return _dd .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_gfg :=(_gda ._ggg >>uint (_eac ))&0x1;if _eac ==0{if _gda ._aceg ==-1{if _gfg ==1{if _gce ._cg !=nil {return _be .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_gda );
};_gce ._cg =_bb (_gda );}else {if _gce ._gfc !=nil {return _be .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_gda );};_gce ._gfc =_bb (_gda );};}else {if _gfg ==1{if _gce ._cg !=nil {return _be .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_gda );
};_gce ._cg =_gde (_gda );}else {if _gce ._gfc !=nil {return _be .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_gda );
};_gce ._gfc =_gde (_gda );};};}else {if _gfg ==1{if _gce ._cg ==nil {_gce ._cg =_bbe (_gce ._ge +1);};if _fbea =_gce ._cg .(*InternalNode ).append (_gda );_fbea !=nil {return _fbea ;};}else {if _gce ._gfc ==nil {_gce ._gfc =_bbe (_gce ._ge +1);};if _fbea =_gce ._gfc .(*InternalNode ).append (_gda );
_fbea !=nil {return _fbea ;};};};return nil ;};type Code struct{_ggd int32 ;_aceg int32 ;_deg int32 ;_aee bool ;_ggg int32 ;};func _bbe (_ce int32 )*InternalNode {return &InternalNode {_ge :_ce }};var _ga =make ([]Tabler ,len (_ffac ));var _ffac =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_bd *EncodedTable )String ()string {return _bd ._db .String ()+"\u000a"};type Tabler interface{Decode (_fcg _a .StreamReader )(int64 ,error );InitTree (_fba []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_ga ){return nil ,_dd .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bcf :=_ga [number -1];if _bcf ==nil {var _aag error ;_bcf ,_aag =_bcg (_ffac [number -1]);if _aag !=nil {return nil ,_aag ;};_ga [number -1]=_bcf ;};return _bcf ,nil ;};type Node interface{Decode (_fc _a .StreamReader )(int64 ,error );String ()string ;
};func _gccf (_dadc ,_aced int32 )int32 {if _dadc > _aced {return _dadc ;};return _aced ;};func _bcg (_cf [][]int32 )(*StandardTable ,error ){var _ddb []*Code ;for _dea :=0;_dea < len (_cf );_dea ++{_dec :=_cf [_dea ][0];_ggc :=_cf [_dea ][1];_bdd :=_cf [_dea ][2];
var _cgf bool ;if len (_cf [_dea ])> 3{_cgf =true ;};_ddb =append (_ddb ,NewCode (_dec ,_ggc ,_bdd ,_cgf ));};_cga :=&StandardTable {_eab :_bbe (0)};if _edc :=_cga .InitTree (_ddb );_edc !=nil {return nil ,_edc ;};return _cga ,nil ;};var _ Node =&OutOfBandNode {};
