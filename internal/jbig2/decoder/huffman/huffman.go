//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_dd "errors";_d "fmt";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_fg "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_gb "math";_g "strings";);type OutOfBandNode struct{};func (_cg *EncodedTable )Decode (r *_f .Reader )(int64 ,error ){return _cg ._c .Decode (r )};
func (_dde *InternalNode )pad (_fed *_g .Builder ){for _fc :=int32 (0);_fc < _dde ._ffd ;_fc ++{_fed .WriteString ("\u0020\u0020\u0020");};};func (_ag *StandardTable )Decode (r *_f .Reader )(int64 ,error ){return _ag ._dae .Decode (r )};func _cgbd (_ab *Code )*OutOfBandNode {return &OutOfBandNode {}};
type ValueNode struct{_cfe int32 ;_cgf int32 ;_ebd bool ;};func (_fgc *OutOfBandNode )String ()string {return _d .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_gb .MaxInt64 ));};func (_ccee *FixedSizeTable )RootNode ()*InternalNode {return _ccee ._bb };
func (_de *EncodedTable )InitTree (codeTable []*Code )error {_fgf (codeTable );for _ ,_fe :=range codeTable {if _e :=_de ._c .append (_fe );_e !=nil {return _e ;};};return nil ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_fb :=&FixedSizeTable {_bb :&InternalNode {}};
if _cd :=_fb .InitTree (codeTable );_cd !=nil {return nil ,_cd ;};return _fb ,nil ;};func _aaf (_fdg ,_adc int32 )int32 {if _fdg > _adc {return _fdg ;};return _adc ;};func (_cce *FixedSizeTable )InitTree (codeTable []*Code )error {_fgf (codeTable );for _ ,_aa :=range codeTable {_ee :=_cce ._bb .append (_aa );
if _ee !=nil {return _ee ;};};return nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_gg :=&EncodedTable {_c :&InternalNode {},BasicTabler :table };if _gbd :=_gg .parseTable ();_gbd !=nil {return nil ,_gbd ;};return _gg ,nil ;};
func (_cgb *EncodedTable )RootNode ()*InternalNode {return _cgb ._c };type Code struct{_addg int32 ;_bee int32 ;_abf int32 ;_bfc bool ;_cde int32 ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_be ){return nil ,_dd .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ca :=_be [number -1];if _ca ==nil {var _bf error ;_ca ,_bf =_ebc (_eca [number -1]);if _bf !=nil {return nil ,_bf ;};_be [number -1]=_ca ;};return _ca ,nil ;};type InternalNode struct{_ffd int32 ;_df Node ;_egd Node ;};var _ Node =&InternalNode {};func _fgf (_faa []*Code ){var _bfe int32 ;
for _ ,_bad :=range _faa {_bfe =_aaf (_bfe ,_bad ._addg );};_dfa :=make ([]int32 ,_bfe +1);for _ ,_ccd :=range _faa {_dfa [_ccd ._addg ]++;};var _gdd int32 ;_fda :=make ([]int32 ,len (_dfa )+1);_dfa [0]=0;for _gcc :=int32 (1);_gcc <=int32 (len (_dfa ));
_gcc ++{_fda [_gcc ]=(_fda [_gcc -1]+(_dfa [_gcc -1]))<<1;_gdd =_fda [_gcc ];for _ ,_bca :=range _faa {if _bca ._addg ==_gcc {_bca ._cde =_gdd ;_gdd ++;};};};};func _ac (_dfd int32 )*InternalNode {return &InternalNode {_ffd :_dfd }};type Node interface{Decode (_ad *_f .Reader )(int64 ,error );
String ()string ;};var _eca =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_gc *FixedSizeTable )Decode (r *_f .Reader )(int64 ,error ){return _gc ._bb .Decode (r )};type FixedSizeTable struct{_bb *InternalNode };func (_fdc *InternalNode )append (_cgc *Code )(_ec error ){if _cgc ._addg ==0{return nil ;};_ce :=_cgc ._addg -1-_fdc ._ffd ;
if _ce < 0{return _dd .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_cfg :=(_cgc ._cde >>uint (_ce ))&0x1;
if _ce ==0{if _cgc ._bee ==-1{if _cfg ==1{if _fdc ._egd !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cgc );};_fdc ._egd =_cgbd (_cgc );
}else {if _fdc ._df !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cgc );};_fdc ._df =_cgbd (_cgc );};}else {if _cfg ==1{if _fdc ._egd !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cgc );
};_fdc ._egd =_afg (_cgc );}else {if _fdc ._df !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cgc );
};_fdc ._df =_afg (_cgc );};};}else {if _cfg ==1{if _fdc ._egd ==nil {_fdc ._egd =_ac (_fdc ._ffd +1);};if _ec =_fdc ._egd .(*InternalNode ).append (_cgc );_ec !=nil {return _ec ;};}else {if _fdc ._df ==nil {_fdc ._df =_ac (_fdc ._ffd +1);};if _ec =_fdc ._df .(*InternalNode ).append (_cgc );
_ec !=nil {return _ec ;};};};return nil ;};type StandardTable struct{_dae *InternalNode };type EncodedTable struct{BasicTabler ;_c *InternalNode ;};var _ Tabler =&EncodedTable {};var _ Node =&ValueNode {};func (_ea *StandardTable )String ()string {return _ea ._dae .String ()+"\u000a"};
type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_f .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_cfec *InternalNode )String ()string {_ccc :=&_g .Builder {};_ccc .WriteString ("\u000a");_cfec .pad (_ccc );_ccc .WriteString ("\u0030\u003a\u0020");
_ccc .WriteString (_cfec ._df .String ()+"\u000a");_cfec .pad (_ccc );_ccc .WriteString ("\u0031\u003a\u0020");_ccc .WriteString (_cfec ._egd .String ()+"\u000a");return _ccc .String ();};func (_cgfc *ValueNode )String ()string {return _d .Sprintf ("\u0025\u0064\u002f%\u0064",_cgfc ._cfe ,_cgfc ._cgf );
};func (_fa *Code )String ()string {var _dded string ;if _fa ._cde !=-1{_dded =_fee (_fa ._cde ,_fa ._addg );}else {_dded ="\u003f";};return _d .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_dded ,_fa ._addg ,_fa ._bee ,_fa ._abf );
};func (_ba *OutOfBandNode )Decode (r *_f .Reader )(int64 ,error ){return 0,_fg .ErrOOB };func (_gce *StandardTable )InitTree (codeTable []*Code )error {_fgf (codeTable );for _ ,_bcb :=range codeTable {if _deg :=_gce ._dae .append (_bcb );_deg !=nil {return _deg ;
};};return nil ;};type Tabler interface{Decode (_gga *_f .Reader )(int64 ,error );InitTree (_gbf []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_ff *EncodedTable )parseTable ()error {var (_cc []*Code ;_cf ,_b ,_fff int32 ;_fd uint64 ;
_eg error ;);_bc :=_ff .StreamReader ();_ga :=_ff .HtLow ();for _ga < _ff .HtHigh (){_fd ,_eg =_bc .ReadBits (byte (_ff .HtPS ()));if _eg !=nil {return _eg ;};_cf =int32 (_fd );_fd ,_eg =_bc .ReadBits (byte (_ff .HtRS ()));if _eg !=nil {return _eg ;};_b =int32 (_fd );
_cc =append (_cc ,NewCode (_cf ,_b ,_fff ,false ));_ga +=1<<uint (_b );};_fd ,_eg =_bc .ReadBits (byte (_ff .HtPS ()));if _eg !=nil {return _eg ;};_cf =int32 (_fd );_b =32;_fff =_ff .HtLow ()-1;_cc =append (_cc ,NewCode (_cf ,_b ,_fff ,true ));_fd ,_eg =_bc .ReadBits (byte (_ff .HtPS ()));
if _eg !=nil {return _eg ;};_cf =int32 (_fd );_b =32;_fff =_ff .HtHigh ();_cc =append (_cc ,NewCode (_cf ,_b ,_fff ,false ));if _ff .HtOOB ()==1{_fd ,_eg =_bc .ReadBits (byte (_ff .HtPS ()));if _eg !=nil {return _eg ;};_cf =int32 (_fd );_cc =append (_cc ,NewCode (_cf ,-1,-1,false ));
};if _eg =_ff .InitTree (_cc );_eg !=nil {return _eg ;};return nil ;};func (_ecd *StandardTable )RootNode ()*InternalNode {return _ecd ._dae };func (_af *EncodedTable )String ()string {return _af ._c .String ()+"\u000a"};func _ebc (_fcc [][]int32 )(*StandardTable ,error ){var _gcd []*Code ;
for _age :=0;_age < len (_fcc );_age ++{_eed :=_fcc [_age ][0];_cb :=_fcc [_age ][1];_cag :=_fcc [_age ][2];var _bfb bool ;if len (_fcc [_age ])> 3{_bfb =true ;};_gcd =append (_gcd ,NewCode (_eed ,_cb ,_cag ,_bfb ));};_add :=&StandardTable {_dae :_ac (0)};
if _gf :=_add .InitTree (_gcd );_gf !=nil {return nil ,_gf ;};return _add ,nil ;};func _fee (_fef ,_abb int32 )string {var _aaa int32 ;_caf :=make ([]rune ,_abb );for _fac :=int32 (1);_fac <=_abb ;_fac ++{_aaa =_fef >>uint (_abb -_fac )&1;if _aaa !=0{_caf [_fac -1]='1';
}else {_caf [_fac -1]='0';};};return string (_caf );};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_addg :prefixLength ,_bee :rangeLength ,_abf :rangeLow ,_bfc :isLowerRange ,_cde :-1};};var _ Node =&OutOfBandNode {};
var _be =make ([]Tabler ,len (_eca ));func (_bcg *ValueNode )Decode (r *_f .Reader )(int64 ,error ){_ada ,_ebb :=r .ReadBits (byte (_bcg ._cfe ));if _ebb !=nil {return 0,_ebb ;};if _bcg ._ebd {_ada =-_ada ;};return int64 (_bcg ._cgf )+int64 (_ada ),nil ;
};func _afg (_ggc *Code )*ValueNode {return &ValueNode {_cfe :_ggc ._bee ,_cgf :_ggc ._abf ,_ebd :_ggc ._bfc };};func (_def *FixedSizeTable )String ()string {return _def ._bb .String ()+"\u000a"};func (_dge *InternalNode )Decode (r *_f .Reader )(int64 ,error ){_gd ,_ffg :=r .ReadBit ();
if _ffg !=nil {return 0,_ffg ;};if _gd ==0{return _dge ._df .Decode (r );};return _dge ._egd .Decode (r );};