//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_a "errors";_d "fmt";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_f "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_cc "math";_c "strings";);func (_fg *FixedSizeTable )String ()string {return _fg ._ac .String ()+"\u000a"};
func (_fd *EncodedTable )RootNode ()*InternalNode {return _fd ._fb };func (_cce *FixedSizeTable )Decode (r _g .StreamReader )(int64 ,error ){return _cce ._ac .Decode (r )};var _ Node =&ValueNode {};func (_ee *FixedSizeTable )RootNode ()*InternalNode {return _ee ._ac };
func (_fe *EncodedTable )parseTable ()error {var (_ca []*Code ;_ag ,_feg ,_bg int32 ;_da uint64 ;_fdb error ;);_ff :=_fe .StreamReader ();_ae :=_fe .HtLow ();for _ae < _fe .HtHigh (){_da ,_fdb =_ff .ReadBits (byte (_fe .HtPS ()));if _fdb !=nil {return _fdb ;
};_ag =int32 (_da );_da ,_fdb =_ff .ReadBits (byte (_fe .HtRS ()));if _fdb !=nil {return _fdb ;};_feg =int32 (_da );_ca =append (_ca ,NewCode (_ag ,_feg ,_bg ,false ));_ae +=1<<uint (_feg );};_da ,_fdb =_ff .ReadBits (byte (_fe .HtPS ()));if _fdb !=nil {return _fdb ;
};_ag =int32 (_da );_feg =32;_bg =_fe .HtLow ()-1;_ca =append (_ca ,NewCode (_ag ,_feg ,_bg ,true ));_da ,_fdb =_ff .ReadBits (byte (_fe .HtPS ()));if _fdb !=nil {return _fdb ;};_ag =int32 (_da );_feg =32;_bg =_fe .HtHigh ();_ca =append (_ca ,NewCode (_ag ,_feg ,_bg ,false ));
if _fe .HtOOB ()==1{_da ,_fdb =_ff .ReadBits (byte (_fe .HtPS ()));if _fdb !=nil {return _fdb ;};_ag =int32 (_da );_ca =append (_ca ,NewCode (_ag ,-1,-1,false ));};if _fdb =_fe .InitTree (_ca );_fdb !=nil {return _fdb ;};return nil ;};type Node interface{Decode (_eb _g .StreamReader )(int64 ,error );
String ()string ;};func (_ad *StandardTable )String ()string {return _ad ._ge .String ()+"\u000a"};func _dg (_eec *Code )*ValueNode {return &ValueNode {_agd :_eec ._fcf ,_eg :_eec ._fec ,_fea :_eec ._dcf }};func (_cea *Code )String ()string {var _gde string ;
if _cea ._feb !=-1{_gde =_eea (_cea ._feb ,_cea ._geb );}else {_gde ="\u003f";};return _d .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_gde ,_cea ._geb ,_cea ._fcf ,_cea ._fec );};func (_ccg *EncodedTable )InitTree (codeTable []*Code )error {_fa (codeTable );
for _ ,_gaa :=range codeTable {if _fc :=_ccg ._fb .append (_gaa );_fc !=nil {return _fc ;};};return nil ;};func (_egb *StandardTable )InitTree (codeTable []*Code )error {_fa (codeTable );for _ ,_dgf :=range codeTable {if _ed :=_egb ._ge .append (_dgf );
_ed !=nil {return _ed ;};};return nil ;};type InternalNode struct{_dd int32 ;_bgb Node ;_abb Node ;};type StandardTable struct{_ge *InternalNode };func _eea (_cd ,_ffe int32 )string {var _gge int32 ;_bcf :=make ([]rune ,_ffe );for _eecc :=int32 (1);_eecc <=_ffe ;
_eecc ++{_gge =_cd >>uint (_ffe -_eecc )&1;if _gge !=0{_bcf [_eecc -1]='1';}else {_bcf [_eecc -1]='0';};};return string (_bcf );};func (_ceg *InternalNode )append (_cf *Code )(_ecf error ){if _cf ._geb ==0{return nil ;};_dc :=_cf ._geb -1-_ceg ._dd ;if _dc < 0{return _a .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_af :=(_cf ._feb >>uint (_dc ))&0x1;if _dc ==0{if _cf ._fcf ==-1{if _af ==1{if _ceg ._abb !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cf );
};_ceg ._abb =_caf (_cf );}else {if _ceg ._bgb !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cf );};_ceg ._bgb =_caf (_cf );};}else {if _af ==1{if _ceg ._abb !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cf );
};_ceg ._abb =_dg (_cf );}else {if _ceg ._bgb !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cf );
};_ceg ._bgb =_dg (_cf );};};}else {if _af ==1{if _ceg ._abb ==nil {_ceg ._abb =_cab (_ceg ._dd +1);};if _ecf =_ceg ._abb .(*InternalNode ).append (_cf );_ecf !=nil {return _ecf ;};}else {if _ceg ._bgb ==nil {_ceg ._bgb =_cab (_ceg ._dd +1);};if _ecf =_ceg ._bgb .(*InternalNode ).append (_cf );
_ecf !=nil {return _ecf ;};};};return nil ;};func (_gb *ValueNode )String ()string {return _d .Sprintf ("\u0025\u0064\u002f%\u0064",_gb ._agd ,_gb ._eg );};func (_bd *ValueNode )Decode (r _g .StreamReader )(int64 ,error ){_gaaa ,_gae :=r .ReadBits (byte (_bd ._agd ));
if _gae !=nil {return 0,_gae ;};if _bd ._fea {_gaaa =-_gaaa ;};return int64 (_bd ._eg )+int64 (_gaaa ),nil ;};var _ecc =make ([]Tabler ,len (_fgf ));func (_cae *OutOfBandNode )String ()string {return _d .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_cc .MaxInt64 ));
};func _cab (_bec int32 )*InternalNode {return &InternalNode {_dd :_bec }};var _ Tabler =&EncodedTable {};func _caa (_dcg [][]int32 )(*StandardTable ,error ){var _efe []*Code ;for _bc :=0;_bc < len (_dcg );_bc ++{_ebc :=_dcg [_bc ][0];_cgb :=_dcg [_bc ][1];
_adf :=_dcg [_bc ][2];var _gg bool ;if len (_dcg [_bc ])> 3{_gg =true ;};_efe =append (_efe ,NewCode (_ebc ,_cgb ,_adf ,_gg ));};_dgc :=&StandardTable {_ge :_cab (0)};if _afb :=_dgc .InitTree (_efe );_afb !=nil {return nil ,_afb ;};return _dgc ,nil ;};
func (_de *OutOfBandNode )Decode (r _g .StreamReader )(int64 ,error ){return 0,_f .ErrOOB };type Code struct{_geb int32 ;_fcf int32 ;_fec int32 ;_dcf bool ;_feb int32 ;};type EncodedTable struct{BasicTabler ;_fb *InternalNode ;};type BasicTabler interface{HtHigh ()int32 ;
HtLow ()int32 ;StreamReader ()_g .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_abcg *StandardTable )RootNode ()*InternalNode {return _abcg ._ge };func (_dca *StandardTable )Decode (r _g .StreamReader )(int64 ,error ){return _dca ._ge .Decode (r )};
type Tabler interface{Decode (_fba _g .StreamReader )(int64 ,error );InitTree (_ebe []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_e :=&FixedSizeTable {_ac :&InternalNode {}};
if _ccd :=_e .InitTree (codeTable );_ccd !=nil {return nil ,_ccd ;};return _e ,nil ;};var _ Node =&InternalNode {};type FixedSizeTable struct{_ac *InternalNode };func (_db *InternalNode )Decode (r _g .StreamReader )(int64 ,error ){_cg ,_abc :=r .ReadBit ();
if _abc !=nil {return 0,_abc ;};if _cg ==0{return _db ._bgb .Decode (r );};return _db ._abb .Decode (r );};var _ Node =&OutOfBandNode {};var _fgf =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_gcg *InternalNode )pad (_bab *_c .Builder ){for _ea :=int32 (0);_ea < _gcg ._dd ;_ea ++{_bab .WriteString ("\u0020\u0020\u0020");};};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_geb :prefixLength ,_fcf :rangeLength ,_fec :rangeLow ,_dcf :isLowerRange ,_feb :-1};
};func (_fde *EncodedTable )String ()string {return _fde ._fb .String ()+"\u000a"};func (_ef *FixedSizeTable )InitTree (codeTable []*Code )error {_fa (codeTable );for _ ,_gc :=range codeTable {_ec :=_ef ._ac .append (_gc );if _ec !=nil {return _ec ;};};
return nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_aa :=&EncodedTable {_fb :&InternalNode {},BasicTabler :table };if _be :=_aa .parseTable ();_be !=nil {return nil ,_be ;};return _aa ,nil ;};func _caf (_ab *Code )*OutOfBandNode {return &OutOfBandNode {}};
func _fdbg (_dga ,_abba int32 )int32 {if _dga > _abba {return _dga ;};return _abba ;};type OutOfBandNode struct{};func _fa (_fegf []*Code ){var _bce int32 ;for _ ,_fbd :=range _fegf {_bce =_fdbg (_bce ,_fbd ._geb );};_ece :=make ([]int32 ,_bce +1);for _ ,_bcd :=range _fegf {_ece [_bcd ._geb ]++;
};var _ega int32 ;_bee :=make ([]int32 ,len (_ece )+1);_ece [0]=0;for _dgfa :=int32 (1);_dgfa <=int32 (len (_ece ));_dgfa ++{_bee [_dgfa ]=(_bee [_dgfa -1]+(_ece [_dgfa -1]))<<1;_ega =_bee [_dgfa ];for _ ,_edc :=range _fegf {if _edc ._geb ==_dgfa {_edc ._feb =_ega ;
_ega ++;};};};};func (_fcd *InternalNode )String ()string {_agg :=&_c .Builder {};_agg .WriteString ("\u000a");_fcd .pad (_agg );_agg .WriteString ("\u0030\u003a\u0020");_agg .WriteString (_fcd ._bgb .String ()+"\u000a");_fcd .pad (_agg );_agg .WriteString ("\u0031\u003a\u0020");
_agg .WriteString (_fcd ._abb .String ()+"\u000a");return _agg .String ();};type ValueNode struct{_agd int32 ;_eg int32 ;_fea bool ;};func (_cb *EncodedTable )Decode (r _g .StreamReader )(int64 ,error ){return _cb ._fb .Decode (r )};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_ecc ){return nil ,_a .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dea :=_ecc [number -1];if _dea ==nil {var _gcd error ;_dea ,_gcd =_caa (_fgf [number -1]);if _gcd !=nil {return nil ,_gcd ;};_ecc [number -1]=_dea ;};return _dea ,nil ;};