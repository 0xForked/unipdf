//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_fd "errors";_cf "fmt";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_gf "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_c "math";_a "strings";);func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_e :=&EncodedTable {_cg :&InternalNode {},BasicTabler :table };
if _d :=_e .parseTable ();_d !=nil {return nil ,_d ;};return _e ,nil ;};func (_ded *ValueNode )String ()string {return _cf .Sprintf ("\u0025\u0064\u002f%\u0064",_ded ._df ,_ded ._aa );};var _ Tabler =&EncodedTable {};func (_ab *EncodedTable )String ()string {return _ab ._cg .String ()+"\u000a"};
func (_gee *ValueNode )Decode (r *_g .Reader )(int64 ,error ){_da ,_faca :=r .ReadBits (byte (_gee ._df ));if _faca !=nil {return 0,_faca ;};if _gee ._abd {_da =-_da ;};return int64 (_gee ._aa )+int64 (_da ),nil ;};func (_ede *EncodedTable )InitTree (codeTable []*Code )error {_dee (codeTable );
for _ ,_fc :=range codeTable {if _geg :=_ede ._cg .append (_fc );_geg !=nil {return _geg ;};};return nil ;};func (_aee *InternalNode )String ()string {_eba :=&_a .Builder {};_eba .WriteString ("\u000a");_aee .pad (_eba );_eba .WriteString ("\u0030\u003a\u0020");
_eba .WriteString (_aee ._fee .String ()+"\u000a");_aee .pad (_eba );_eba .WriteString ("\u0031\u003a\u0020");_eba .WriteString (_aee ._edc .String ()+"\u000a");return _eba .String ();};type InternalNode struct{_ea int32 ;_fee Node ;_edc Node ;};func _ace (_edcg int32 )*InternalNode {return &InternalNode {_ea :_edcg }};
type Node interface{Decode (_fb *_g .Reader )(int64 ,error );String ()string ;};func (_ddd *Code )String ()string {var _bafg string ;if _ddd ._gbc !=-1{_bafg =_dac (_ddd ._gbc ,_ddd ._bb );}else {_bafg ="\u003f";};return _cf .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bafg ,_ddd ._bb ,_ddd ._gd ,_ddd ._bg );
};var _ Node =&InternalNode {};var _ccf =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_gb *EncodedTable )RootNode ()*InternalNode {return _gb ._cg };func (_ffc *InternalNode )pad (_ccb *_a .Builder ){for _aag :=int32 (0);_aag < _ffc ._ea ;_aag ++{_ccb .WriteString ("\u0020\u0020\u0020");};};func (_fca *StandardTable )Decode (r *_g .Reader )(int64 ,error ){return _fca ._gc .Decode (r )};
func (_ff *EncodedTable )parseTable ()error {var (_eb []*Code ;_ba ,_gg ,_cd int32 ;_de uint64 ;_fe error ;);_edf :=_ff .StreamReader ();_fa :=_ff .HtLow ();for _fa < _ff .HtHigh (){_de ,_fe =_edf .ReadBits (byte (_ff .HtPS ()));if _fe !=nil {return _fe ;
};_ba =int32 (_de );_de ,_fe =_edf .ReadBits (byte (_ff .HtRS ()));if _fe !=nil {return _fe ;};_gg =int32 (_de );_eb =append (_eb ,NewCode (_ba ,_gg ,_cd ,false ));_fa +=1<<uint (_gg );};_de ,_fe =_edf .ReadBits (byte (_ff .HtPS ()));if _fe !=nil {return _fe ;
};_ba =int32 (_de );_gg =32;_cd =_ff .HtLow ()-1;_eb =append (_eb ,NewCode (_ba ,_gg ,_cd ,true ));_de ,_fe =_edf .ReadBits (byte (_ff .HtPS ()));if _fe !=nil {return _fe ;};_ba =int32 (_de );_gg =32;_cd =_ff .HtHigh ();_eb =append (_eb ,NewCode (_ba ,_gg ,_cd ,false ));
if _ff .HtOOB ()==1{_de ,_fe =_edf .ReadBits (byte (_ff .HtPS ()));if _fe !=nil {return _fe ;};_ba =int32 (_de );_eb =append (_eb ,NewCode (_ba ,-1,-1,false ));};if _fe =_ff .InitTree (_eb );_fe !=nil {return _fe ;};return nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_bb :prefixLength ,_gd :rangeLength ,_bg :rangeLow ,_afc :isLowerRange ,_gbc :-1};
};func (_ed *EncodedTable )Decode (r *_g .Reader )(int64 ,error ){return _ed ._cg .Decode (r )};func _dac (_cad ,_gac int32 )string {var _dbb int32 ;_gec :=make ([]rune ,_gac );for _dfe :=int32 (1);_dfe <=_gac ;_dfe ++{_dbb =_cad >>uint (_gac -_dfe )&1;
if _dbb !=0{_gec [_dfe -1]='1';}else {_gec [_dfe -1]='0';};};return string (_gec );};func (_eg *InternalNode )append (_adf *Code )(_dab error ){if _adf ._bb ==0{return nil ;};_abda :=_adf ._bb -1-_eg ._ea ;if _abda < 0{return _fd .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_bca :=(_adf ._gbc >>uint (_abda ))&0x1;if _abda ==0{if _adf ._gd ==-1{if _bca ==1{if _eg ._edc !=nil {return _cf .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_adf );
};_eg ._edc =_deb (_adf );}else {if _eg ._fee !=nil {return _cf .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_adf );};_eg ._fee =_deb (_adf );};}else {if _bca ==1{if _eg ._edc !=nil {return _cf .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_adf );
};_eg ._edc =_beb (_adf );}else {if _eg ._fee !=nil {return _cf .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_adf );
};_eg ._fee =_beb (_adf );};};}else {if _bca ==1{if _eg ._edc ==nil {_eg ._edc =_ace (_eg ._ea +1);};if _dab =_eg ._edc .(*InternalNode ).append (_adf );_dab !=nil {return _dab ;};}else {if _eg ._fee ==nil {_eg ._fee =_ace (_eg ._ea +1);};if _dab =_eg ._fee .(*InternalNode ).append (_adf );
_dab !=nil {return _dab ;};};};return nil ;};func (_bea *StandardTable )String ()string {return _bea ._gc .String ()+"\u000a"};type FixedSizeTable struct{_be *InternalNode };type EncodedTable struct{BasicTabler ;_cg *InternalNode ;};func (_ffg *StandardTable )InitTree (codeTable []*Code )error {_dee (codeTable );
for _ ,_gaa :=range codeTable {if _acd :=_ffg ._gc .append (_gaa );_acd !=nil {return _acd ;};};return nil ;};func (_bc *OutOfBandNode )String ()string {return _cf .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_c .MaxInt64 ));};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_cc :=&FixedSizeTable {_be :&InternalNode {}};
if _ef :=_cc .InitTree (codeTable );_ef !=nil {return nil ,_ef ;};return _cc ,nil ;};func (_db *FixedSizeTable )Decode (r *_g .Reader )(int64 ,error ){return _db ._be .Decode (r )};func _dee (_eac []*Code ){var _gcd int32 ;for _ ,_bfa :=range _eac {_gcd =_bgc (_gcd ,_bfa ._bb );
};_fcg :=make ([]int32 ,_gcd +1);for _ ,_eaf :=range _eac {_fcg [_eaf ._bb ]++;};var _gbf int32 ;_gfd :=make ([]int32 ,len (_fcg )+1);_fcg [0]=0;for _daca :=int32 (1);_daca <=int32 (len (_fcg ));_daca ++{_gfd [_daca ]=(_gfd [_daca -1]+(_fcg [_daca -1]))<<1;
_gbf =_gfd [_daca ];for _ ,_cfe :=range _eac {if _cfe ._bb ==_daca {_cfe ._gbc =_gbf ;_gbf ++;};};};};func (_fac *FixedSizeTable )InitTree (codeTable []*Code )error {_dee (codeTable );for _ ,_ae :=range codeTable {_gfg :=_fac ._be .append (_ae );if _gfg !=nil {return _gfg ;
};};return nil ;};type Code struct{_bb int32 ;_gd int32 ;_bg int32 ;_afc bool ;_gbc int32 ;};func (_baf *StandardTable )RootNode ()*InternalNode {return _baf ._gc };func _beb (_abe *Code )*ValueNode {return &ValueNode {_df :_abe ._gd ,_aa :_abe ._bg ,_abd :_abe ._afc }};
func (_af *FixedSizeTable )RootNode ()*InternalNode {return _af ._be };func (_dd *FixedSizeTable )String ()string {return _dd ._be .String ()+"\u000a"};func _bgc (_cfee ,_dc int32 )int32 {if _cfee > _dc {return _cfee ;};return _dc ;};var _ Node =&OutOfBandNode {};
func (_ga *OutOfBandNode )Decode (r *_g .Reader )(int64 ,error ){return 0,_gf .ErrOOB };type Tabler interface{Decode (_cae *_g .Reader )(int64 ,error );InitTree (_gfgb []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_ac *InternalNode )Decode (r *_g .Reader )(int64 ,error ){_cec ,_efa :=r .ReadBit ();
if _efa !=nil {return 0,_efa ;};if _cec ==0{return _ac ._fee .Decode (r );};return _ac ._edc .Decode (r );};type StandardTable struct{_gc *InternalNode };var _ Node =&ValueNode {};var _bf =make ([]Tabler ,len (_ccf ));func _deb (_ad *Code )*OutOfBandNode {return &OutOfBandNode {}};
type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_g .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_bf ){return nil ,_fd .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bae :=_bf [number -1];if _bae ==nil {var _ca error ;_bae ,_ca =_cgc (_ccf [number -1]);if _ca !=nil {return nil ,_ca ;};_bf [number -1]=_bae ;};return _bae ,nil ;};func _cgc (_ag [][]int32 )(*StandardTable ,error ){var _cge []*Code ;for _ggd :=0;_ggd < len (_ag );
_ggd ++{_deba :=_ag [_ggd ][0];_ee :=_ag [_ggd ][1];_ceg :=_ag [_ggd ][2];var _gcb bool ;if len (_ag [_ggd ])> 3{_gcb =true ;};_cge =append (_cge ,NewCode (_deba ,_ee ,_ceg ,_gcb ));};_eed :=&StandardTable {_gc :_ace (0)};if _fcf :=_eed .InitTree (_cge );
_fcf !=nil {return nil ,_fcf ;};return _eed ,nil ;};type ValueNode struct{_df int32 ;_aa int32 ;_abd bool ;};type OutOfBandNode struct{};