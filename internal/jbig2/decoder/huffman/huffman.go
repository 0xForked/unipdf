//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_fa "errors";_a "fmt";_fd "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ed "math";_e "strings";);func (_ff *OutOfBandNode )Decode (r _fd .StreamReader )(int64 ,error ){return 0,_g .ErrOOB };
type Node interface{Decode (_gea _fd .StreamReader )(int64 ,error );String ()string ;};func (_cc *OutOfBandNode )String ()string {return _a .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_ed .MaxInt64 ));};type InternalNode struct{_faf int32 ;_cbf Node ;
_gfb Node ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_fbd ){return nil ,_fa .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_gef :=_fbd [number -1];if _gef ==nil {var _ebe error ;
_gef ,_ebe =_edd (_bfff [number -1]);if _ebe !=nil {return nil ,_ebe ;};_fbd [number -1]=_gef ;};return _gef ,nil ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_gfd :=&FixedSizeTable {_gf :&InternalNode {}};if _ba :=_gfd .InitTree (codeTable );
_ba !=nil {return nil ,_ba ;};return _gfd ,nil ;};func (_cab *InternalNode )append (_eb *Code )(_be error ){if _eb ._geb ==0{return nil ;};_ded :=_eb ._geb -1-_cab ._faf ;if _ded < 0{return _fa .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_da :=(_eb ._agd >>uint (_ded ))&0x1;if _ded ==0{if _eb ._ebf ==-1{if _da ==1{if _cab ._gfb !=nil {return _a .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_eb );
};_cab ._gfb =_cfe (_eb );}else {if _cab ._cbf !=nil {return _a .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_eb );};_cab ._cbf =_cfe (_eb );};}else {if _da ==1{if _cab ._gfb !=nil {return _a .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_eb );
};_cab ._gfb =_ce (_eb );}else {if _cab ._cbf !=nil {return _a .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_eb );
};_cab ._cbf =_ce (_eb );};};}else {if _da ==1{if _cab ._gfb ==nil {_cab ._gfb =_bba (_cab ._faf +1);};if _be =_cab ._gfb .(*InternalNode ).append (_eb );_be !=nil {return _be ;};}else {if _cab ._cbf ==nil {_cab ._cbf =_bba (_cab ._faf +1);};if _be =_cab ._cbf .(*InternalNode ).append (_eb );
_be !=nil {return _be ;};};};return nil ;};var _bfff =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_fd .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_agb *ValueNode )String ()string {return _a .Sprintf ("\u0025\u0064\u002f%\u0064",_agb ._ec ,_agb ._ecg );};func (_ca *FixedSizeTable )String ()string {return _ca ._gf .String ()+"\u000a"};
func (_gdf *FixedSizeTable )InitTree (codeTable []*Code )error {_cfaa (codeTable );for _ ,_bae :=range codeTable {_df :=_gdf ._gf .append (_bae );if _df !=nil {return _df ;};};return nil ;};func _cfe (_abf *Code )*OutOfBandNode {return &OutOfBandNode {}};
type EncodedTable struct{BasicTabler ;_d *InternalNode ;};func (_cef *StandardTable )String ()string {return _cef ._egd .String ()+"\u000a"};func (_bb *ValueNode )Decode (r _fd .StreamReader )(int64 ,error ){_dbg ,_cd :=r .ReadBits (byte (_bb ._ec ));if _cd !=nil {return 0,_cd ;
};if _bb ._bd {_dbg =-_dbg ;};return int64 (_bb ._ecg )+int64 (_dbg ),nil ;};type ValueNode struct{_ec int32 ;_ecg int32 ;_bd bool ;};func (_ade *FixedSizeTable )Decode (r _fd .StreamReader )(int64 ,error ){return _ade ._gf .Decode (r )};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_geb :prefixLength ,_ebf :rangeLength ,_bcc :rangeLow ,_cbe :isLowerRange ,_agd :-1};
};var _ Node =&InternalNode {};func (_ad *EncodedTable )String ()string {return _ad ._d .String ()+"\u000a"};var _ Tabler =&EncodedTable {};func (_b *EncodedTable )InitTree (codeTable []*Code )error {_cfaa (codeTable );for _ ,_de :=range codeTable {if _gg :=_b ._d .append (_de );
_gg !=nil {return _gg ;};};return nil ;};func (_eg *InternalNode )String ()string {_gae :=&_e .Builder {};_gae .WriteString ("\u000a");_eg .pad (_gae );_gae .WriteString ("\u0030\u003a\u0020");_gae .WriteString (_eg ._cbf .String ()+"\u000a");_eg .pad (_gae );
_gae .WriteString ("\u0031\u003a\u0020");_gae .WriteString (_eg ._gfb .String ()+"\u000a");return _gae .String ();};func (_cbg *InternalNode )Decode (r _fd .StreamReader )(int64 ,error ){_bcg ,_ga :=r .ReadBit ();if _ga !=nil {return 0,_ga ;};if _bcg ==0{return _cbg ._cbf .Decode (r );
};return _cbg ._gfb .Decode (r );};func _abc (_ece ,_egc int32 )int32 {if _ece > _egc {return _ece ;};return _egc ;};type Tabler interface{Decode (_edf _fd .StreamReader )(int64 ,error );InitTree (_bcb []*Code )error ;String ()string ;RootNode ()*InternalNode ;
};func _cca (_abg ,_ege int32 )string {var _bdg int32 ;_adeg :=make ([]rune ,_ege );for _ecd :=int32 (1);_ecd <=_ege ;_ecd ++{_bdg =_abg >>uint (_ege -_ecd )&1;if _bdg !=0{_adeg [_ecd -1]='1';}else {_adeg [_ecd -1]='0';};};return string (_adeg );};func (_ebd *InternalNode )pad (_dg *_e .Builder ){for _ada :=int32 (0);
_ada < _ebd ._faf ;_ada ++{_dg .WriteString ("\u0020\u0020\u0020");};};func (_fb *FixedSizeTable )RootNode ()*InternalNode {return _fb ._gf };func _cfaa (_eba []*Code ){var _add int32 ;for _ ,_ffb :=range _eba {_add =_abc (_add ,_ffb ._geb );};_cae :=make ([]int32 ,_add +1);
for _ ,_bed :=range _eba {_cae [_bed ._geb ]++;};var _ee int32 ;_bcge :=make ([]int32 ,len (_cae )+1);_cae [0]=0;for _cdf :=int32 (1);_cdf <=int32 (len (_cae ));_cdf ++{_bcge [_cdf ]=(_bcge [_cdf -1]+(_cae [_cdf -1]))<<1;_ee =_bcge [_cdf ];for _ ,_afd :=range _eba {if _afd ._geb ==_cdf {_afd ._agd =_ee ;
_ee ++;};};};};var _ Node =&ValueNode {};var _fbd =make ([]Tabler ,len (_bfff ));type FixedSizeTable struct{_gf *InternalNode };type Code struct{_geb int32 ;_ebf int32 ;_bcc int32 ;_cbe bool ;_agd int32 ;};func _ce (_eda *Code )*ValueNode {return &ValueNode {_ec :_eda ._ebf ,_ecg :_eda ._bcc ,_bd :_eda ._cbe }};
func _edd (_ggc [][]int32 )(*StandardTable ,error ){var _cg []*Code ;for _dgg :=0;_dgg < len (_ggc );_dgg ++{_dbe :=_ggc [_dgg ][0];_fga :=_ggc [_dgg ][1];_gcd :=_ggc [_dgg ][2];var _dcc bool ;if len (_ggc [_dgg ])> 3{_dcc =true ;};_cg =append (_cg ,NewCode (_dbe ,_fga ,_gcd ,_dcc ));
};_ecfd :=&StandardTable {_egd :_bba (0)};if _bbaa :=_ecfd .InitTree (_cg );_bbaa !=nil {return nil ,_bbaa ;};return _ecfd ,nil ;};func (_fg *StandardTable )InitTree (codeTable []*Code )error {_cfaa (codeTable );for _ ,_adfa :=range codeTable {if _cfa :=_fg ._egd .append (_adfa );
_cfa !=nil {return _cfa ;};};return nil ;};func (_c *EncodedTable )RootNode ()*InternalNode {return _c ._d };func (_gd *EncodedTable )Decode (r _fd .StreamReader )(int64 ,error ){return _gd ._d .Decode (r )};func (_cde *StandardTable )RootNode ()*InternalNode {return _cde ._egd };
type StandardTable struct{_egd *InternalNode };func (_gc *StandardTable )Decode (r _fd .StreamReader )(int64 ,error ){return _gc ._egd .Decode (r )};func (_bdd *Code )String ()string {var _cgg string ;if _bdd ._agd !=-1{_cgg =_cca (_bdd ._agd ,_bdd ._geb );
}else {_cgg ="\u003f";};return _a .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cgg ,_bdd ._geb ,_bdd ._ebf ,_bdd ._bcc );};var _ Node =&OutOfBandNode {};func _bba (_dba int32 )*InternalNode {return &InternalNode {_faf :_dba }};
func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_db :=&EncodedTable {_d :&InternalNode {},BasicTabler :table };if _ge :=_db .parseTable ();_ge !=nil {return nil ,_ge ;};return _db ,nil ;};func (_bf *EncodedTable )parseTable ()error {var (_dc []*Code ;
_fc ,_gdd ,_ac int32 ;_bc uint64 ;_cb error ;);_bff :=_bf .StreamReader ();_adf :=_bf .HtLow ();for _adf < _bf .HtHigh (){_bc ,_cb =_bff .ReadBits (byte (_bf .HtPS ()));if _cb !=nil {return _cb ;};_fc =int32 (_bc );_bc ,_cb =_bff .ReadBits (byte (_bf .HtRS ()));
if _cb !=nil {return _cb ;};_gdd =int32 (_bc );_dc =append (_dc ,NewCode (_fc ,_gdd ,_ac ,false ));_adf +=1<<uint (_gdd );};_bc ,_cb =_bff .ReadBits (byte (_bf .HtPS ()));if _cb !=nil {return _cb ;};_fc =int32 (_bc );_gdd =32;_ac =_bf .HtLow ()-1;_dc =append (_dc ,NewCode (_fc ,_gdd ,_ac ,true ));
_bc ,_cb =_bff .ReadBits (byte (_bf .HtPS ()));if _cb !=nil {return _cb ;};_fc =int32 (_bc );_gdd =32;_ac =_bf .HtHigh ();_dc =append (_dc ,NewCode (_fc ,_gdd ,_ac ,false ));if _bf .HtOOB ()==1{_bc ,_cb =_bff .ReadBits (byte (_bf .HtPS ()));if _cb !=nil {return _cb ;
};_fc =int32 (_bc );_dc =append (_dc ,NewCode (_fc ,-1,-1,false ));};if _cb =_bf .InitTree (_dc );_cb !=nil {return _cb ;};return nil ;};type OutOfBandNode struct{};