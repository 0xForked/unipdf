//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_b "errors";_e "fmt";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_c "math";_d "strings";);func (_agd *FixedSizeTable )String ()string {return _agd ._ag .String ()+"\u000a"};func (_gb *ValueNode )Decode (r _g .StreamReader )(int64 ,error ){_egc ,_ecc :=r .ReadBits (byte (_gb ._fd ));if _ecc !=nil {return 0,_ecc ;};if _gb ._eg {_egc =-_egc ;};return int64 (_gb ._cf )+int64 (_egc ),nil ;};func (_edc *OutOfBandNode )String ()string {return _e .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_c .MaxInt64 ));};type ValueNode struct{_fd int32 ;_cf int32 ;_eg bool ;};type FixedSizeTable struct{_ag *InternalNode };func _bdb (_gc int32 )*InternalNode {return &InternalNode {_abd :_gc }};var _eb =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};func (_dce *StandardTable )Decode (r _g .StreamReader )(int64 ,error ){return _dce ._fdf .Decode (r )};func (_gbb *InternalNode )Decode (r _g .StreamReader )(int64 ,error ){_ge ,_dc :=r .ReadBit ();if _dc !=nil {return 0,_dc ;};if _ge ==0{return _gbb ._cg .Decode (r );};return _gbb ._ca .Decode (r );};var _ Node =&ValueNode {};func (_cb *FixedSizeTable )InitTree (codeTable []*Code )error {_af (codeTable );for _ ,_ff :=range codeTable {_ef :=_cb ._ag .append (_ff );if _ef !=nil {return _ef ;};};return nil ;};type Tabler interface{Decode (_fg _g .StreamReader )(int64 ,error );InitTree (_ac []*Code )error ;String ()string ;RootNode ()*InternalNode ;};type StandardTable struct{_fdf *InternalNode };type InternalNode struct{_abd int32 ;_cg Node ;_ca Node ;};func (_ae *StandardTable )String ()string {return _ae ._fdf .String ()+"\u000a"};var _ Node =&InternalNode {};func (_cedd *StandardTable )RootNode ()*InternalNode {return _cedd ._fdf };var _ Node =&OutOfBandNode {};func (_bge *FixedSizeTable )Decode (r _g .StreamReader )(int64 ,error ){return _bge ._ag .Decode (r )};func (_gfa *OutOfBandNode )Decode (r _g .StreamReader )(int64 ,error ){return int64 (_c .MaxInt64 ),nil };func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_ede :=&FixedSizeTable {_ag :&InternalNode {}};if _dgf :=_ede .InitTree (codeTable );_dgf !=nil {return nil ,_dgf ;};return _ede ,nil ;};func (_agg *StandardTable )InitTree (codeTable []*Code )error {_af (codeTable );for _ ,_faa :=range codeTable {if _fde :=_agg ._fdf .append (_faa );_fde !=nil {return _fde ;};};return nil ;};type Code struct{_agc int32 ;_gg int32 ;_eda int32 ;_ffc bool ;_ebd int32 ;};type Node interface{Decode (_edeb _g .StreamReader )(int64 ,error );String ()string ;};func _ceg (_bf *Code )*ValueNode {return &ValueNode {_fd :_bf ._gg ,_cf :_bf ._eda ,_eg :_bf ._ffc }};func _df (_dd *Code )*OutOfBandNode {return &OutOfBandNode {}};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_dg :=&EncodedTable {_da :&InternalNode {},BasicTabler :table };if _db :=_dg .parseTable ();_db !=nil {return nil ,_db ;};return _dg ,nil ;};func (_bg *EncodedTable )String ()string {return _bg ._da .String ()+"\u000a"};var _edg =make ([]Tabler ,len (_eb ));func (_ed *EncodedTable )parseTable ()error {var (_bb []*Code ;_ec ,_gf ,_ad int32 ;_gd uint64 ;_ab error ;);_fc :=_ed .StreamReader ();_fa :=_ed .HtLow ();for _fa < _ed .HtHigh (){_gd ,_ab =_fc .ReadBits (byte (_ed .HtPS ()));if _ab !=nil {return _ab ;};_ec =int32 (_gd );_gd ,_ab =_fc .ReadBits (byte (_ed .HtRS ()));if _ab !=nil {return _ab ;};_gf =int32 (_gd );_bb =append (_bb ,NewCode (_ec ,_gf ,_ad ,false ));_fa +=1<<uint (_gf );};_gd ,_ab =_fc .ReadBits (byte (_ed .HtPS ()));if _ab !=nil {return _ab ;};_ec =int32 (_gd );_gf =32;_ad =_ed .HtLow ()-1;_bb =append (_bb ,NewCode (_ec ,_gf ,_ad ,true ));_gd ,_ab =_fc .ReadBits (byte (_ed .HtPS ()));if _ab !=nil {return _ab ;};_ec =int32 (_gd );_gf =32;_ad =_ed .HtHigh ();_bb =append (_bb ,NewCode (_ec ,_gf ,_ad ,false ));if _ed .HtOOB ()==1{_gd ,_ab =_fc .ReadBits (byte (_ed .HtPS ()));if _ab !=nil {return _ab ;};_ec =int32 (_gd );_bb =append (_bb ,NewCode (_ec ,-1,-1,false ));};if _ab =_ed .InitTree (_bb );_ab !=nil {return _ab ;};return nil ;};var _ Tabler =&EncodedTable {};func (_bcb *EncodedTable )RootNode ()*InternalNode {return _bcb ._da };type EncodedTable struct{BasicTabler ;_da *InternalNode ;};func (_be *InternalNode )String ()string {_ffe :=&_d .Builder {};_ffe .WriteString ("\u000a");_be .pad (_ffe );_ffe .WriteString ("\u0030\u003a\u0020");_ffe .WriteString (_be ._cg .String ()+"\u000a");_be .pad (_ffe );_ffe .WriteString ("\u0031\u003a\u0020");_ffe .WriteString (_be ._ca .String ()+"\u000a");return _ffe .String ();};func (_ce *EncodedTable )Decode (r _g .StreamReader )(int64 ,error ){return _ce ._da .Decode (r )};func _af (_fce []*Code ){var _bgb int32 ;for _ ,_aea :=range _fce {_bgb =_ggf (_bgb ,_aea ._agc );};_bab :=make ([]int32 ,_bgb +1);for _ ,_cab :=range _fce {_bab [_cab ._agc ]++;};var _ffbf int32 ;_cde :=make ([]int32 ,len (_bab )+1);_bab [0]=0;for _gbe :=int32 (1);_gbe <=int32 (len (_bab ));_gbe ++{_cde [_gbe ]=(_cde [_gbe -1]+(_bab [_gbe -1]))<<1;_ffbf =_cde [_gbe ];for _ ,_gcb :=range _fce {if _gcb ._agc ==_gbe {_gcb ._ebd =_ffbf ;_ffbf ++;};};};};func _ggf (_bgd ,_fb int32 )int32 {if _bgd > _fb {return _bgd ;};return _fb ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_agc :prefixLength ,_gg :rangeLength ,_eda :rangeLow ,_ffc :isLowerRange ,_ebd :-1};};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_g .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};type OutOfBandNode struct{};func (_f *EncodedTable )InitTree (codeTable []*Code )error {_af (codeTable );for _ ,_dgb :=range codeTable {if _cc :=_f ._da .append (_dgb );_cc !=nil {return _cc ;};};return nil ;};func (_ffb *FixedSizeTable )RootNode ()*InternalNode {return _ffb ._ag };func (_ced *InternalNode )pad (_bbc *_d .Builder ){for _ccg :=int32 (0);_ccg < _ced ._abd ;_ccg ++{_bbc .WriteString ("\u0020\u0020\u0020");};};func (_cd *InternalNode )append (_efd *Code )(_ddf error ){if _efd ._agc ==0{return nil ;};_dcf :=_efd ._agc -1-_cd ._abd ;if _dcf < 0{return _b .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_ee :=(_efd ._ebd >>uint (_dcf ))&0x1;if _dcf ==0{if _efd ._gg ==-1{if _ee ==1{if _cd ._ca !=nil {return _e .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_efd );};_cd ._ca =_df (_efd );}else {if _cd ._cg !=nil {return _e .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_efd );};_cd ._cg =_df (_efd );};}else {if _ee ==1{if _cd ._ca !=nil {return _e .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_efd );};_cd ._ca =_ceg (_efd );}else {if _cd ._cg !=nil {return _e .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_efd );};_cd ._cg =_ceg (_efd );};};}else {if _ee ==1{if _cd ._ca ==nil {_cd ._ca =_bdb (_cd ._abd +1);};if _ddf =_cd ._ca .(*InternalNode ).append (_efd );_ddf !=nil {return _ddf ;};}else {if _cd ._cg ==nil {_cd ._cg =_bdb (_cd ._abd +1);};if _ddf =_cd ._cg .(*InternalNode ).append (_efd );_ddf !=nil {return _ddf ;};};};return nil ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_edg ){return nil ,_b .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_gca :=_edg [number -1];if _gca ==nil {var _agdb error ;_gca ,_agdb =_edcf (_eb [number -1]);if _agdb !=nil {return nil ,_agdb ;};_edg [number -1]=_gca ;};return _gca ,nil ;};func (_cbd *Code )String ()string {var _gee string ;if _cbd ._ebd !=-1{_gee =_gce (_cbd ._ebd ,_cbd ._agc );}else {_gee ="\u003f";};return _e .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_gee ,_cbd ._agc ,_cbd ._gg ,_cbd ._eda );};func _gce (_fca ,_gdd int32 )string {var _ceddc int32 ;_bgea :=make ([]rune ,_gdd );for _geb :=int32 (1);_geb <=_gdd ;_geb ++{_ceddc =_fca >>uint (_gdd -_geb )&1;if _ceddc !=0{_bgea [_geb -1]='1';}else {_bgea [_geb -1]='0';};};return string (_bgea );};func _edcf (_dde [][]int32 )(*StandardTable ,error ){var _bce []*Code ;for _cce :=0;_cce < len (_dde );_cce ++{_bdd :=_dde [_cce ][0];_cfg :=_dde [_cce ][1];_dbd :=_dde [_cce ][2];var _fe bool ;if len (_dde [_cce ])> 3{_fe =true ;};_bce =append (_bce ,NewCode (_bdd ,_cfg ,_dbd ,_fe ));};_dcg :=&StandardTable {_fdf :_bdb (0)};if _faac :=_dcg .InitTree (_bce );_faac !=nil {return nil ,_faac ;};return _dcg ,nil ;};func (_dgfb *ValueNode )String ()string {return _e .Sprintf ("\u0025\u0064\u002f%\u0064",_dgfb ._fd ,_dgfb ._cf );};