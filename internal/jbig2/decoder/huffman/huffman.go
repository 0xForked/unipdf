//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_ff "errors";_g "fmt";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_d "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_dd "math";_e "strings";);type FixedSizeTable struct{_efc *InternalNode };func (_ac *EncodedTable )parseTable ()error {var (_aa []*Code ;
_c ,_ea ,_fcf int32 ;_ed uint64 ;_fcd error ;);_gd :=_ac .StreamReader ();_ggg :=_ac .HtLow ();for _ggg < _ac .HtHigh (){_ed ,_fcd =_gd .ReadBits (byte (_ac .HtPS ()));if _fcd !=nil {return _fcd ;};_c =int32 (_ed );_ed ,_fcd =_gd .ReadBits (byte (_ac .HtRS ()));
if _fcd !=nil {return _fcd ;};_ea =int32 (_ed );_aa =append (_aa ,NewCode (_c ,_ea ,_fcf ,false ));_ggg +=1<<uint (_ea );};_ed ,_fcd =_gd .ReadBits (byte (_ac .HtPS ()));if _fcd !=nil {return _fcd ;};_c =int32 (_ed );_ea =32;_fcf =_ac .HtLow ()-1;_aa =append (_aa ,NewCode (_c ,_ea ,_fcf ,true ));
_ed ,_fcd =_gd .ReadBits (byte (_ac .HtPS ()));if _fcd !=nil {return _fcd ;};_c =int32 (_ed );_ea =32;_fcf =_ac .HtHigh ();_aa =append (_aa ,NewCode (_c ,_ea ,_fcf ,false ));if _ac .HtOOB ()==1{_ed ,_fcd =_gd .ReadBits (byte (_ac .HtPS ()));if _fcd !=nil {return _fcd ;
};_c =int32 (_ed );_aa =append (_aa ,NewCode (_c ,-1,-1,false ));};if _fcd =_ac .InitTree (_aa );_fcd !=nil {return _fcd ;};return nil ;};type Node interface{Decode (_bba _b .StreamReader )(int64 ,error );String ()string ;};func _ge (_aad *Code )*OutOfBandNode {return &OutOfBandNode {}};
func (_dg *FixedSizeTable )RootNode ()*InternalNode {return _dg ._efc };func (_ec *InternalNode )pad (_gab *_e .Builder ){for _acg :=int32 (0);_acg < _ec ._egb ;_acg ++{_gab .WriteString ("\u0020\u0020\u0020");};};func (_ba *FixedSizeTable )String ()string {return _ba ._efc .String ()+"\u000a"};
func (_cag *InternalNode )Decode (r _b .StreamReader )(int64 ,error ){_cgb ,_fbg :=r .ReadBit ();if _fbg !=nil {return 0,_fbg ;};if _cgb ==0{return _cag ._fga .Decode (r );};return _cag ._af .Decode (r );};func (_eea *ValueNode )String ()string {return _g .Sprintf ("\u0025\u0064\u002f%\u0064",_eea ._dc ,_eea ._fg );
};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_fc :=&EncodedTable {_eg :&InternalNode {},BasicTabler :table };if _bf :=_fc .parseTable ();_bf !=nil {return nil ,_bf ;};return _fc ,nil ;};func (_fda *OutOfBandNode )Decode (r _b .StreamReader )(int64 ,error ){return 0,_d .ErrOOB };
func _cga (_gec ,_eda int32 )string {var _dgbd int32 ;_cgaf :=make ([]rune ,_eda );for _bbc :=int32 (1);_bbc <=_eda ;_bbc ++{_dgbd =_gec >>uint (_eda -_bbc )&1;if _dgbd !=0{_cgaf [_bbc -1]='1';}else {_cgaf [_bbc -1]='0';};};return string (_cgaf );};func (_gg *EncodedTable )InitTree (codeTable []*Code )error {_dcc (codeTable );
for _ ,_a :=range codeTable {if _da :=_gg ._eg .append (_a );_da !=nil {return _da ;};};return nil ;};func (_ged *InternalNode )append (_be *Code )(_fgaf error ){if _be ._dgbg ==0{return nil ;};_de :=_be ._dgbg -1-_ged ._egb ;if _de < 0{return _ff .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_cfe :=(_be ._ffg >>uint (_de ))&0x1;if _de ==0{if _be ._ab ==-1{if _cfe ==1{if _ged ._af !=nil {return _g .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_be );
};_ged ._af =_ge (_be );}else {if _ged ._fga !=nil {return _g .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_be );};_ged ._fga =_ge (_be );};}else {if _cfe ==1{if _ged ._af !=nil {return _g .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_be );
};_ged ._af =_acf (_be );}else {if _ged ._fga !=nil {return _g .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_be );
};_ged ._fga =_acf (_be );};};}else {if _cfe ==1{if _ged ._af ==nil {_ged ._af =_bd (_ged ._egb +1);};if _fgaf =_ged ._af .(*InternalNode ).append (_be );_fgaf !=nil {return _fgaf ;};}else {if _ged ._fga ==nil {_ged ._fga =_bd (_ged ._egb +1);};if _fgaf =_ged ._fga .(*InternalNode ).append (_be );
_fgaf !=nil {return _fgaf ;};};};return nil ;};var _ Node =&ValueNode {};func (_bb *EncodedTable )String ()string {return _bb ._eg .String ()+"\u000a"};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_fd :=&FixedSizeTable {_efc :&InternalNode {}};
if _df :=_fd .InitTree (codeTable );_df !=nil {return nil ,_df ;};return _fd ,nil ;};var _ Tabler =&EncodedTable {};func _acf (_dab *Code )*ValueNode {return &ValueNode {_dc :_dab ._ab ,_fg :_dab ._gea ,_edf :_dab ._eef }};func (_bgc *StandardTable )InitTree (codeTable []*Code )error {_dcc (codeTable );
for _ ,_bc :=range codeTable {if _afd :=_bgc ._dcd .append (_bc );_afd !=nil {return _afd ;};};return nil ;};func _gda (_eb ,_cgag int32 )int32 {if _eb > _cgag {return _eb ;};return _cgag ;};func (_daf *StandardTable )RootNode ()*InternalNode {return _daf ._dcd };
func (_ee *OutOfBandNode )String ()string {return _g .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_dd .MaxInt64 ));};type Code struct{_dgbg int32 ;_ab int32 ;_gea int32 ;_eef bool ;_ffg int32 ;};var _gdgf =make ([]Tabler ,len (_dde ));func (_dgg *StandardTable )Decode (r _b .StreamReader )(int64 ,error ){return _dgg ._dcd .Decode (r )};
func (_faa *Code )String ()string {var _ace string ;if _faa ._ffg !=-1{_ace =_cga (_faa ._ffg ,_faa ._dgbg );}else {_ace ="\u003f";};return _g .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_ace ,_faa ._dgbg ,_faa ._ab ,_faa ._gea );
};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_gdgf ){return nil ,_ff .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_eec :=_gdgf [number -1];if _eec ==nil {var _gdb error ;
_eec ,_gdb =_cc (_dde [number -1]);if _gdb !=nil {return nil ,_gdb ;};_gdgf [number -1]=_eec ;};return _eec ,nil ;};var _ Node =&OutOfBandNode {};func (_cb *FixedSizeTable )Decode (r _b .StreamReader )(int64 ,error ){return _cb ._efc .Decode (r )};type EncodedTable struct{BasicTabler ;
_eg *InternalNode ;};func (_fe *EncodedTable )Decode (r _b .StreamReader )(int64 ,error ){return _fe ._eg .Decode (r )};func (_fb *FixedSizeTable )InitTree (codeTable []*Code )error {_dcc (codeTable );for _ ,_ce :=range codeTable {_fee :=_fb ._efc .append (_ce );
if _fee !=nil {return _fee ;};};return nil ;};type InternalNode struct{_egb int32 ;_fga Node ;_af Node ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_b .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};type ValueNode struct{_dc int32 ;
_fg int32 ;_edf bool ;};var _ Node =&InternalNode {};func _dcc (_gdgc []*Code ){var _feab int32 ;for _ ,_gag :=range _gdgc {_feab =_gda (_feab ,_gag ._dgbg );};_dca :=make ([]int32 ,_feab +1);for _ ,_ede :=range _gdgc {_dca [_ede ._dgbg ]++;};var _bdf int32 ;
_ecc :=make ([]int32 ,len (_dca )+1);_dca [0]=0;for _fgg :=int32 (1);_fgg <=int32 (len (_dca ));_fgg ++{_ecc [_fgg ]=(_ecc [_fgg -1]+(_dca [_fgg -1]))<<1;_bdf =_ecc [_fgg ];for _ ,_ffa :=range _gdgc {if _ffa ._dgbg ==_fgg {_ffa ._ffg =_bdf ;_bdf ++;};};
};};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_dgbg :prefixLength ,_ab :rangeLength ,_gea :rangeLow ,_eef :isLowerRange ,_ffg :-1};};func _bd (_ad int32 )*InternalNode {return &InternalNode {_egb :_ad }};
func _cc (_bcf [][]int32 )(*StandardTable ,error ){var _gdg []*Code ;for _acb :=0;_acb < len (_bcf );_acb ++{_ecf :=_bcf [_acb ][0];_bdd :=_bcf [_acb ][1];_fea :=_bcf [_acb ][2];var _bad bool ;if len (_bcf [_acb ])> 3{_bad =true ;};_gdg =append (_gdg ,NewCode (_ecf ,_bdd ,_fea ,_bad ));
};_fgf :=&StandardTable {_dcd :_bd (0)};if _dea :=_fgf .InitTree (_gdg );_dea !=nil {return nil ,_dea ;};return _fgf ,nil ;};type OutOfBandNode struct{};func (_fa *InternalNode )String ()string {_cbf :=&_e .Builder {};_cbf .WriteString ("\u000a");_fa .pad (_cbf );
_cbf .WriteString ("\u0030\u003a\u0020");_cbf .WriteString (_fa ._fga .String ()+"\u000a");_fa .pad (_cbf );_cbf .WriteString ("\u0031\u003a\u0020");_cbf .WriteString (_fa ._af .String ()+"\u000a");return _cbf .String ();};var _dde =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_ca *ValueNode )Decode (r _b .StreamReader )(int64 ,error ){_ggc ,_fec :=r .ReadBits (byte (_ca ._dc ));if _fec !=nil {return 0,_fec ;};if _ca ._edf {_ggc =-_ggc ;};return int64 (_ca ._fg )+int64 (_ggc ),nil ;};func (_bg *EncodedTable )RootNode ()*InternalNode {return _bg ._eg };
type StandardTable struct{_dcd *InternalNode };func (_cega *StandardTable )String ()string {return _cega ._dcd .String ()+"\u000a"};type Tabler interface{Decode (_ded _b .StreamReader )(int64 ,error );InitTree (_efb []*Code )error ;String ()string ;RootNode ()*InternalNode ;
};