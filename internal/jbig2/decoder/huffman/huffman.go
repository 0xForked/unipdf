//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_c "errors";_b "fmt";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_fg "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_d "math";_fb "strings";);func (_ca *FixedSizeTable )RootNode ()*InternalNode {return _ca ._cg };func (_ag *OutOfBandNode )String ()string {return _b .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_d .MaxInt64 ));
};func (_gf *FixedSizeTable )Decode (r _e .StreamReader )(int64 ,error ){return _gf ._cg .Decode (r )};func (_eb *StandardTable )RootNode ()*InternalNode {return _eb ._gdd };func (_bg *EncodedTable )RootNode ()*InternalNode {return _bg ._fd };func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_bbb :prefixLength ,_dcg :rangeLength ,_cgbd :rangeLow ,_eab :isLowerRange ,_dce :-1};
};var _aa =make ([]Tabler ,len (_egff ));func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_aa ){return nil ,_c .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_deb :=_aa [number -1];
if _deb ==nil {var _afg error ;_deb ,_afg =_bb (_egff [number -1]);if _afg !=nil {return nil ,_afg ;};_aa [number -1]=_deb ;};return _deb ,nil ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_dc :=&FixedSizeTable {_cg :&InternalNode {}};
if _dea :=_dc .InitTree (codeTable );_dea !=nil {return nil ,_dea ;};return _dc ,nil ;};func (_ee *FixedSizeTable )String ()string {return _ee ._cg .String ()+"\u000a"};type OutOfBandNode struct{};func (_df *StandardTable )String ()string {return _df ._gdd .String ()+"\u000a"};
type StandardTable struct{_gdd *InternalNode };func (_dd *EncodedTable )InitTree (codeTable []*Code )error {_dge (codeTable );for _ ,_cb :=range codeTable {if _eg :=_dd ._fd .append (_cb );_eg !=nil {return _eg ;};};return nil ;};func (_cfgb *InternalNode )pad (_caaa *_fb .Builder ){for _fdc :=int32 (0);
_fdc < _cfgb ._cf ;_fdc ++{_caaa .WriteString ("\u0020\u0020\u0020");};};func (_de *EncodedTable )String ()string {return _de ._fd .String ()+"\u000a"};func _dge (_ecc []*Code ){var _dde int32 ;for _ ,_cbe :=range _ecc {_dde =_ge (_dde ,_cbe ._bbb );};
_dcef :=make ([]int32 ,_dde +1);for _ ,_cd :=range _ecc {_dcef [_cd ._bbb ]++;};var _acb int32 ;_cfc :=make ([]int32 ,len (_dcef )+1);_dcef [0]=0;for _dca :=int32 (1);_dca <=int32 (len (_dcef ));_dca ++{_cfc [_dca ]=(_cfc [_dca -1]+(_dcef [_dca -1]))<<1;
_acb =_cfc [_dca ];for _ ,_fdb :=range _ecc {if _fdb ._bbb ==_dca {_fdb ._dce =_acb ;_acb ++;};};};};func _ge (_baa ,_fe int32 )int32 {if _baa > _fe {return _baa ;};return _fe ;};var _ Node =&ValueNode {};func _gg (_ded *Code )*OutOfBandNode {return &OutOfBandNode {}};
var _egff =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
type InternalNode struct{_cf int32 ;_ad Node ;_db Node ;};var _ Tabler =&EncodedTable {};func (_gd *EncodedTable )parseTable ()error {var (_af []*Code ;_cba ,_gbe ,_egf int32 ;_deg uint64 ;_dga error ;);_ae :=_gd .StreamReader ();_ce :=_gd .HtLow ();for _ce < _gd .HtHigh (){_deg ,_dga =_ae .ReadBits (byte (_gd .HtPS ()));
if _dga !=nil {return _dga ;};_cba =int32 (_deg );_deg ,_dga =_ae .ReadBits (byte (_gd .HtRS ()));if _dga !=nil {return _dga ;};_gbe =int32 (_deg );_af =append (_af ,NewCode (_cba ,_gbe ,_egf ,false ));_ce +=1<<uint (_gbe );};_deg ,_dga =_ae .ReadBits (byte (_gd .HtPS ()));
if _dga !=nil {return _dga ;};_cba =int32 (_deg );_gbe =32;_egf =_gd .HtLow ()-1;_af =append (_af ,NewCode (_cba ,_gbe ,_egf ,true ));_deg ,_dga =_ae .ReadBits (byte (_gd .HtPS ()));if _dga !=nil {return _dga ;};_cba =int32 (_deg );_gbe =32;_egf =_gd .HtHigh ();
_af =append (_af ,NewCode (_cba ,_gbe ,_egf ,false ));if _gd .HtOOB ()==1{_deg ,_dga =_ae .ReadBits (byte (_gd .HtPS ()));if _dga !=nil {return _dga ;};_cba =int32 (_deg );_af =append (_af ,NewCode (_cba ,-1,-1,false ));};if _dga =_gd .InitTree (_af );
_dga !=nil {return _dga ;};return nil ;};func (_ac *InternalNode )String ()string {_bcc :=&_fb .Builder {};_bcc .WriteString ("\u000a");_ac .pad (_bcc );_bcc .WriteString ("\u0030\u003a\u0020");_bcc .WriteString (_ac ._ad .String ()+"\u000a");_ac .pad (_bcc );
_bcc .WriteString ("\u0031\u003a\u0020");_bcc .WriteString (_ac ._db .String ()+"\u000a");return _bcc .String ();};func (_dgg *InternalNode )append (_da *Code )(_gcb error ){if _da ._bbb ==0{return nil ;};_add :=_da ._bbb -1-_dgg ._cf ;if _add < 0{return _c .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_dcd :=(_da ._dce >>uint (_add ))&0x1;if _add ==0{if _da ._dcg ==-1{if _dcd ==1{if _dgg ._db !=nil {return _b .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_da );
};_dgg ._db =_gg (_da );}else {if _dgg ._ad !=nil {return _b .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_da );};_dgg ._ad =_gg (_da );};}else {if _dcd ==1{if _dgg ._db !=nil {return _b .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_da );
};_dgg ._db =_efe (_da );}else {if _dgg ._ad !=nil {return _b .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_da );
};_dgg ._ad =_efe (_da );};};}else {if _dcd ==1{if _dgg ._db ==nil {_dgg ._db =_bgd (_dgg ._cf +1);};if _gcb =_dgg ._db .(*InternalNode ).append (_da );_gcb !=nil {return _gcb ;};}else {if _dgg ._ad ==nil {_dgg ._ad =_bgd (_dgg ._cf +1);};if _gcb =_dgg ._ad .(*InternalNode ).append (_da );
_gcb !=nil {return _gcb ;};};};return nil ;};type FixedSizeTable struct{_cg *InternalNode };type ValueNode struct{_cef int32 ;_caa int32 ;_ceff bool ;};func (_bga *OutOfBandNode )Decode (r _e .StreamReader )(int64 ,error ){return 0,_fg .ErrOOB };func (_dedb *ValueNode )String ()string {return _b .Sprintf ("\u0025\u0064\u002f%\u0064",_dedb ._cef ,_dedb ._caa );
};func (_bc *ValueNode )Decode (r _e .StreamReader )(int64 ,error ){_aea ,_ef :=r .ReadBits (byte (_bc ._cef ));if _ef !=nil {return 0,_ef ;};if _bc ._ceff {_aea =-_aea ;};return int64 (_bc ._caa )+int64 (_aea ),nil ;};func (_g *EncodedTable )Decode (r _e .StreamReader )(int64 ,error ){return _g ._fd .Decode (r )};
func _efe (_fgb *Code )*ValueNode {return &ValueNode {_cef :_fgb ._dcg ,_caa :_fgb ._cgbd ,_ceff :_fgb ._eab };};type EncodedTable struct{BasicTabler ;_fd *InternalNode ;};func _bb (_fdd [][]int32 )(*StandardTable ,error ){var _aee []*Code ;for _gga :=0;
_gga < len (_fdd );_gga ++{_bed :=_fdd [_gga ][0];_fge :=_fdd [_gga ][1];_ba :=_fdd [_gga ][2];var _ace bool ;if len (_fdd [_gga ])> 3{_ace =true ;};_aee =append (_aee ,NewCode (_bed ,_fge ,_ba ,_ace ));};_ed :=&StandardTable {_gdd :_bgd (0)};if _ege :=_ed .InitTree (_aee );
_ege !=nil {return nil ,_ege ;};return _ed ,nil ;};func (_cfg *InternalNode )Decode (r _e .StreamReader )(int64 ,error ){_fbb ,_ggb :=r .ReadBit ();if _ggb !=nil {return 0,_ggb ;};if _fbb ==0{return _cfg ._ad .Decode (r );};return _cfg ._db .Decode (r );
};func (_cgg *StandardTable )Decode (r _e .StreamReader )(int64 ,error ){return _cgg ._gdd .Decode (r )};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_e .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_ga *FixedSizeTable )InitTree (codeTable []*Code )error {_dge (codeTable );
for _ ,_bf :=range codeTable {_cbc :=_ga ._cg .append (_bf );if _cbc !=nil {return _cbc ;};};return nil ;};type Node interface{Decode (_fbd _e .StreamReader )(int64 ,error );String ()string ;};func _ced (_dfe ,_bcd int32 )string {var _bfb int32 ;_bgg :=make ([]rune ,_bcd );
for _afe :=int32 (1);_afe <=_bcd ;_afe ++{_bfb =_dfe >>uint (_bcd -_afe )&1;if _bfb !=0{_bgg [_afe -1]='1';}else {_bgg [_afe -1]='0';};};return string (_bgg );};func _bgd (_dac int32 )*InternalNode {return &InternalNode {_cf :_dac }};func (_cgb *StandardTable )InitTree (codeTable []*Code )error {_dge (codeTable );
for _ ,_ec :=range codeTable {if _be :=_cgb ._gdd .append (_ec );_be !=nil {return _be ;};};return nil ;};type Code struct{_bbb int32 ;_dcg int32 ;_cgbd int32 ;_eab bool ;_dce int32 ;};var _ Node =&OutOfBandNode {};var _ Node =&InternalNode {};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_cc :=&EncodedTable {_fd :&InternalNode {},BasicTabler :table };
if _a :=_cc .parseTable ();_a !=nil {return nil ,_a ;};return _cc ,nil ;};func (_dbd *Code )String ()string {var _afb string ;if _dbd ._dce !=-1{_afb =_ced (_dbd ._dce ,_dbd ._bbb );}else {_afb ="\u003f";};return _b .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_afb ,_dbd ._bbb ,_dbd ._dcg ,_dbd ._cgbd );
};type Tabler interface{Decode (_ecd _e .StreamReader )(int64 ,error );InitTree (_ebf []*Code )error ;String ()string ;RootNode ()*InternalNode ;};