//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_eg "errors";_e "fmt";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ce "math";_f "strings";);type OutOfBandNode struct{};func (_cg *EncodedTable )Decode (r _d .StreamReader )(int64 ,error ){return _cg ._ff .Decode (r )};
func (_cc *EncodedTable )InitTree (codeTable []*Code )error {_daf (codeTable );for _ ,_ffd :=range codeTable {if _gg :=_cc ._ff .append (_ffd );_gg !=nil {return _gg ;};};return nil ;};func (_ac *InternalNode )Decode (r _d .StreamReader )(int64 ,error ){_ec ,_dg :=r .ReadBit ();
if _dg !=nil {return 0,_dg ;};if _ec ==0{return _ac ._feae .Decode (r );};return _ac ._bb .Decode (r );};type ValueNode struct{_afc int32 ;_dcb int32 ;_efb bool ;};func (_af *FixedSizeTable )RootNode ()*InternalNode {return _af ._aa };var _ca =make ([]Tabler ,len (_eca ));
func (_ga *OutOfBandNode )Decode (r _d .StreamReader )(int64 ,error ){return 0,_a .ErrOOB };func (_ae *FixedSizeTable )InitTree (codeTable []*Code )error {_daf (codeTable );for _ ,_ee :=range codeTable {_ad :=_ae ._aa .append (_ee );if _ad !=nil {return _ad ;
};};return nil ;};var _ Node =&OutOfBandNode {};var _eca =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_db *FixedSizeTable )String ()string {return _db ._aa .String ()+"\u000a"};type FixedSizeTable struct{_aa *InternalNode };func _ccc (_gge *Code )*ValueNode {return &ValueNode {_afc :_gge ._egc ,_dcb :_gge ._aec ,_efb :_gge ._acaf };};func (_cgg *StandardTable )Decode (r _d .StreamReader )(int64 ,error ){return _cgg ._fb .Decode (r )};
func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_cge :=&FixedSizeTable {_aa :&InternalNode {}};if _gd :=_cge .InitTree (codeTable );_gd !=nil {return nil ,_gd ;};return _cge ,nil ;};type EncodedTable struct{BasicTabler ;_ff *InternalNode ;
};func _ffc (_ccg *Code )*OutOfBandNode {return &OutOfBandNode {}};func _cbf (_dfd int32 )*InternalNode {return &InternalNode {_gaa :_dfd }};func (_ddd *FixedSizeTable )Decode (r _d .StreamReader )(int64 ,error ){return _ddd ._aa .Decode (r )};func (_gf *StandardTable )RootNode ()*InternalNode {return _gf ._fb };
type Node interface{Decode (_dad _d .StreamReader )(int64 ,error );String ()string ;};func (_gac *StandardTable )String ()string {return _gac ._fb .String ()+"\u000a"};func _adc (_dea [][]int32 )(*StandardTable ,error ){var _ge []*Code ;for _dac :=0;_dac < len (_dea );
_dac ++{_bga :=_dea [_dac ][0];_egg :=_dea [_dac ][1];_ab :=_dea [_dac ][2];var _aad bool ;if len (_dea [_dac ])> 3{_aad =true ;};_ge =append (_ge ,NewCode (_bga ,_egg ,_ab ,_aad ));};_dcf :=&StandardTable {_fb :_cbf (0)};if _bfg :=_dcf .InitTree (_ge );
_bfg !=nil {return nil ,_bfg ;};return _dcf ,nil ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_d .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_bg *StandardTable )InitTree (codeTable []*Code )error {_daf (codeTable );
for _ ,_fcd :=range codeTable {if _ggc :=_bg ._fb .append (_fcd );_ggc !=nil {return _ggc ;};};return nil ;};func (_bf *OutOfBandNode )String ()string {return _e .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_ce .MaxInt64 ));};var _ Node =&ValueNode {};
func (_cd *InternalNode )pad (_be *_f .Builder ){for _dda :=int32 (0);_dda < _cd ._gaa ;_dda ++{_be .WriteString ("\u0020\u0020\u0020");};};func (_ef *EncodedTable )String ()string {return _ef ._ff .String ()+"\u000a"};var _ Tabler =&EncodedTable {};type Code struct{_eb int32 ;
_egc int32 ;_aec int32 ;_acaf bool ;_dga int32 ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_ca ){return nil ,_eg .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};
_fd :=_ca [number -1];if _fd ==nil {var _aed error ;_fd ,_aed =_adc (_eca [number -1]);if _aed !=nil {return nil ,_aed ;};_ca [number -1]=_fd ;};return _fd ,nil ;};type StandardTable struct{_fb *InternalNode };func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_eb :prefixLength ,_egc :rangeLength ,_aec :rangeLow ,_acaf :isLowerRange ,_dga :-1};
};func (_fff *EncodedTable )parseTable ()error {var (_ba []*Code ;_cgc ,_fe ,_dc int32 ;_dd uint64 ;_ddg error ;);_cb :=_fff .StreamReader ();_bc :=_fff .HtLow ();for _bc < _fff .HtHigh (){_dd ,_ddg =_cb .ReadBits (byte (_fff .HtPS ()));if _ddg !=nil {return _ddg ;
};_cgc =int32 (_dd );_dd ,_ddg =_cb .ReadBits (byte (_fff .HtRS ()));if _ddg !=nil {return _ddg ;};_fe =int32 (_dd );_ba =append (_ba ,NewCode (_cgc ,_fe ,_dc ,false ));_bc +=1<<uint (_fe );};_dd ,_ddg =_cb .ReadBits (byte (_fff .HtPS ()));if _ddg !=nil {return _ddg ;
};_cgc =int32 (_dd );_fe =32;_dc =_fff .HtLow ()-1;_ba =append (_ba ,NewCode (_cgc ,_fe ,_dc ,true ));_dd ,_ddg =_cb .ReadBits (byte (_fff .HtPS ()));if _ddg !=nil {return _ddg ;};_cgc =int32 (_dd );_fe =32;_dc =_fff .HtHigh ();_ba =append (_ba ,NewCode (_cgc ,_fe ,_dc ,false ));
if _fff .HtOOB ()==1{_dd ,_ddg =_cb .ReadBits (byte (_fff .HtPS ()));if _ddg !=nil {return _ddg ;};_cgc =int32 (_dd );_ba =append (_ba ,NewCode (_cgc ,-1,-1,false ));};if _ddg =_fff .InitTree (_ba );_ddg !=nil {return _ddg ;};return nil ;};func (_ea *InternalNode )append (_de *Code )(_aac error ){if _de ._eb ==0{return nil ;
};_eag :=_de ._eb -1-_ea ._gaa ;if _eag < 0{return _eg .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_ecg :=(_de ._dga >>uint (_eag ))&0x1;
if _eag ==0{if _de ._egc ==-1{if _ecg ==1{if _ea ._bb !=nil {return _e .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_de );};_ea ._bb =_ffc (_de );}else {if _ea ._feae !=nil {return _e .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_de );
};_ea ._feae =_ffc (_de );};}else {if _ecg ==1{if _ea ._bb !=nil {return _e .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_de );
};_ea ._bb =_ccc (_de );}else {if _ea ._feae !=nil {return _e .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_de );
};_ea ._feae =_ccc (_de );};};}else {if _ecg ==1{if _ea ._bb ==nil {_ea ._bb =_cbf (_ea ._gaa +1);};if _aac =_ea ._bb .(*InternalNode ).append (_de );_aac !=nil {return _aac ;};}else {if _ea ._feae ==nil {_ea ._feae =_cbf (_ea ._gaa +1);};if _aac =_ea ._feae .(*InternalNode ).append (_de );
_aac !=nil {return _aac ;};};};return nil ;};func _acf (_eed ,_ed int32 )int32 {if _eed > _ed {return _eed ;};return _ed ;};type InternalNode struct{_gaa int32 ;_feae Node ;_bb Node ;};func (_feaf *InternalNode )String ()string {_ceb :=&_f .Builder {};
_ceb .WriteString ("\u000a");_feaf .pad (_ceb );_ceb .WriteString ("\u0030\u003a\u0020");_ceb .WriteString (_feaf ._feae .String ()+"\u000a");_feaf .pad (_ceb );_ceb .WriteString ("\u0031\u003a\u0020");_ceb .WriteString (_feaf ._bb .String ()+"\u000a");
return _ceb .String ();};func (_b *EncodedTable )RootNode ()*InternalNode {return _b ._ff };func _ebb (_cdb ,_ade int32 )string {var _bgg int32 ;_ece :=make ([]rune ,_ade );for _dbg :=int32 (1);_dbg <=_ade ;_dbg ++{_bgg =_cdb >>uint (_ade -_dbg )&1;if _bgg !=0{_ece [_dbg -1]='1';
}else {_ece [_dbg -1]='0';};};return string (_ece );};func (_cdd *Code )String ()string {var _dfdb string ;if _cdd ._dga !=-1{_dfdb =_ebb (_cdd ._dga ,_cdd ._eb );}else {_dfdb ="\u003f";};return _e .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_dfdb ,_cdd ._eb ,_cdd ._egc ,_cdd ._aec );
};type Tabler interface{Decode (_aca _d .StreamReader )(int64 ,error );InitTree (_fec []*Code )error ;String ()string ;RootNode ()*InternalNode ;};var _ Node =&InternalNode {};func (_afa *ValueNode )String ()string {return _e .Sprintf ("\u0025\u0064\u002f%\u0064",_afa ._afc ,_afa ._dcb );
};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_fc :=&EncodedTable {_ff :&InternalNode {},BasicTabler :table };if _da :=_fc .parseTable ();_da !=nil {return nil ,_da ;};return _fc ,nil ;};func _daf (_fba []*Code ){var _fdf int32 ;for _ ,_efg :=range _fba {_fdf =_acf (_fdf ,_efg ._eb );
};_dfg :=make ([]int32 ,_fdf +1);for _ ,_dfge :=range _fba {_dfg [_dfge ._eb ]++;};var _gda int32 ;_gc :=make ([]int32 ,len (_dfg )+1);_dfg [0]=0;for _aeb :=int32 (1);_aeb <=int32 (len (_dfg ));_aeb ++{_gc [_aeb ]=(_gc [_aeb -1]+(_dfg [_aeb -1]))<<1;_gda =_gc [_aeb ];
for _ ,_fcb :=range _fba {if _fcb ._eb ==_aeb {_fcb ._dga =_gda ;_gda ++;};};};};func (_fea *ValueNode )Decode (r _d .StreamReader )(int64 ,error ){_cee ,_bd :=r .ReadBits (byte (_fea ._afc ));if _bd !=nil {return 0,_bd ;};if _fea ._efb {_cee =-_cee ;};
return int64 (_fea ._dcb )+int64 (_cee ),nil ;};