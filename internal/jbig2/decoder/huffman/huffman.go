//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_b "errors";_ca "fmt";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ed "math";_f "strings";);var _ Tabler =&EncodedTable {};type Node interface{Decode (_fe _a .StreamReader )(int64 ,error );
String ()string ;};func (_dcb *InternalNode )pad (_bde *_f .Builder ){for _ddc :=int32 (0);_ddc < _dcb ._dc ;_ddc ++{_bde .WriteString ("\u0020\u0020\u0020");};};type ValueNode struct{_bgf int32 ;_bda int32 ;_cb bool ;};func _cfaa (_ccb []*Code ){var _abd int32 ;
for _ ,_agc :=range _ccb {_abd =_fcb (_abd ,_agc ._bfg );};_gggg :=make ([]int32 ,_abd +1);for _ ,_bag :=range _ccb {_gggg [_bag ._bfg ]++;};var _afce int32 ;_egbd :=make ([]int32 ,len (_gggg )+1);_gggg [0]=0;for _agf :=int32 (1);_agf <=int32 (len (_gggg ));
_agf ++{_egbd [_agf ]=(_egbd [_agf -1]+(_gggg [_agf -1]))<<1;_afce =_egbd [_agf ];for _ ,_cee :=range _ccb {if _cee ._bfg ==_agf {_cee ._fca =_afce ;_afce ++;};};};};func (_eda *FixedSizeTable )Decode (r _a .StreamReader )(int64 ,error ){return _eda ._bdf .Decode (r )};
func (_fga *InternalNode )String ()string {_da :=&_f .Builder {};_da .WriteString ("\u000a");_fga .pad (_da );_da .WriteString ("\u0030\u003a\u0020");_da .WriteString (_fga ._ggc .String ()+"\u000a");_fga .pad (_da );_da .WriteString ("\u0031\u003a\u0020");
_da .WriteString (_fga ._ef .String ()+"\u000a");return _da .String ();};func _cga (_bae ,_cfa int32 )string {var _bcb int32 ;_cc :=make ([]rune ,_cfa );for _ffb :=int32 (1);_ffb <=_cfa ;_ffb ++{_bcb =_bae >>uint (_cfa -_ffb )&1;if _bcb !=0{_cc [_ffb -1]='1';
}else {_cc [_ffb -1]='0';};};return string (_cc );};type InternalNode struct{_dc int32 ;_ggc Node ;_ef Node ;};func (_ea *StandardTable )RootNode ()*InternalNode {return _ea ._ab };type Tabler interface{Decode (_bc _a .StreamReader )(int64 ,error );InitTree (_cba []*Code )error ;
String ()string ;RootNode ()*InternalNode ;};func _ce (_eed *Code )*OutOfBandNode {return &OutOfBandNode {}};type FixedSizeTable struct{_bdf *InternalNode };func (_ba *EncodedTable )InitTree (codeTable []*Code )error {_cfaa (codeTable );for _ ,_fc :=range codeTable {if _ec :=_ba ._d .append (_fc );
_ec !=nil {return _ec ;};};return nil ;};func (_dec *OutOfBandNode )String ()string {return _ca .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_ed .MaxInt64 ));};type EncodedTable struct{BasicTabler ;_d *InternalNode ;};func (_bdc *FixedSizeTable )RootNode ()*InternalNode {return _bdc ._bdf };
func (_gg *ValueNode )Decode (r _a .StreamReader )(int64 ,error ){_egb ,_aa :=r .ReadBits (byte (_gg ._bgf ));if _aa !=nil {return 0,_aa ;};if _gg ._cb {_egb =-_egb ;};return int64 (_gg ._bda )+int64 (_egb ),nil ;};func (_fgg *FixedSizeTable )InitTree (codeTable []*Code )error {_cfaa (codeTable );
for _ ,_ge :=range codeTable {_af :=_fgg ._bdf .append (_ge );if _af !=nil {return _af ;};};return nil ;};func (_dga *ValueNode )String ()string {return _ca .Sprintf ("\u0025\u0064\u002f%\u0064",_dga ._bgf ,_dga ._bda );};func (_afg *InternalNode )append (_efg *Code )(_ae error ){if _efg ._bfg ==0{return nil ;
};_dfb :=_efg ._bfg -1-_afg ._dc ;if _dfb < 0{return _b .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_aaf :=(_efg ._fca >>uint (_dfb ))&0x1;
if _dfb ==0{if _efg ._ged ==-1{if _aaf ==1{if _afg ._ef !=nil {return _ca .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_efg );};_afg ._ef =_ce (_efg );
}else {if _afg ._ggc !=nil {return _ca .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_efg );};_afg ._ggc =_ce (_efg );};}else {if _aaf ==1{if _afg ._ef !=nil {return _ca .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_efg );
};_afg ._ef =_ced (_efg );}else {if _afg ._ggc !=nil {return _ca .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_efg );
};_afg ._ggc =_ced (_efg );};};}else {if _aaf ==1{if _afg ._ef ==nil {_afg ._ef =_aad (_afg ._dc +1);};if _ae =_afg ._ef .(*InternalNode ).append (_efg );_ae !=nil {return _ae ;};}else {if _afg ._ggc ==nil {_afg ._ggc =_aad (_afg ._dc +1);};if _ae =_afg ._ggc .(*InternalNode ).append (_efg );
_ae !=nil {return _ae ;};};};return nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_bfg :prefixLength ,_ged :rangeLength ,_fdc :rangeLow ,_cfe :isLowerRange ,_fca :-1};};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_bdb ){return nil ,_b .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cgb :=_bdb [number -1];if _cgb ==nil {var _ggg error ;_cgb ,_ggg =_eaa (_dda [number -1]);if _ggg !=nil {return nil ,_ggg ;};_bdb [number -1]=_cgb ;};return _cgb ,nil ;};func (_bgc *EncodedTable )RootNode ()*InternalNode {return _bgc ._d };func (_fb *EncodedTable )String ()string {return _fb ._d .String ()+"\u000a"};
var _bdb =make ([]Tabler ,len (_dda ));func _fcb (_ac ,_eae int32 )int32 {if _ac > _eae {return _ac ;};return _eae ;};func _aad (_ff int32 )*InternalNode {return &InternalNode {_dc :_ff }};func (_gc *EncodedTable )Decode (r _a .StreamReader )(int64 ,error ){return _gc ._d .Decode (r )};
type OutOfBandNode struct{};func (_cea *Code )String ()string {var _fgaa string ;if _cea ._fca !=-1{_fgaa =_cga (_cea ._fca ,_cea ._bfg );}else {_fgaa ="\u003f";};return _ca .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_fgaa ,_cea ._bfg ,_cea ._ged ,_cea ._fdc );
};var _ Node =&OutOfBandNode {};func _ced (_edf *Code )*ValueNode {return &ValueNode {_bgf :_edf ._ged ,_bda :_edf ._fdc ,_cb :_edf ._cfe }};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_edd :=&FixedSizeTable {_bdf :&InternalNode {}};
if _dg :=_edd .InitTree (codeTable );_dg !=nil {return nil ,_dg ;};return _edd ,nil ;};func (_cg *InternalNode )Decode (r _a .StreamReader )(int64 ,error ){_df ,_eddg :=r .ReadBit ();if _eddg !=nil {return 0,_eddg ;};if _df ==0{return _cg ._ggc .Decode (r );
};return _cg ._ef .Decode (r );};var _ Node =&InternalNode {};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_a .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_eg :=&EncodedTable {_d :&InternalNode {},BasicTabler :table };
if _bg :=_eg .parseTable ();_bg !=nil {return nil ,_bg ;};return _eg ,nil ;};type Code struct{_bfg int32 ;_ged int32 ;_fdc int32 ;_cfe bool ;_fca int32 ;};var _ Node =&ValueNode {};func _eaa (_edc [][]int32 )(*StandardTable ,error ){var _cedb []*Code ;
for _bfe :=0;_bfe < len (_edc );_bfe ++{_cag :=_edc [_bfe ][0];_fa :=_edc [_bfe ][1];_egc :=_edc [_bfe ][2];var _gcf bool ;if len (_edc [_bfe ])> 3{_gcf =true ;};_cedb =append (_cedb ,NewCode (_cag ,_fa ,_egc ,_gcf ));};_aee :=&StandardTable {_ab :_aad (0)};
if _aea :=_aee .InitTree (_cedb );_aea !=nil {return nil ,_aea ;};return _aee ,nil ;};var _dda =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_ecf *EncodedTable )parseTable ()error {var (_bd []*Code ;_de ,_gcb ,_gcba int32 ;_ee uint64 ;_cf error ;);_dd :=_ecf .StreamReader ();_bf :=_ecf .HtLow ();for _bf < _ecf .HtHigh (){_ee ,_cf =_dd .ReadBits (byte (_ecf .HtPS ()));if _cf !=nil {return _cf ;
};_de =int32 (_ee );_ee ,_cf =_dd .ReadBits (byte (_ecf .HtRS ()));if _cf !=nil {return _cf ;};_gcb =int32 (_ee );_bd =append (_bd ,NewCode (_de ,_gcb ,_gcba ,false ));_bf +=1<<uint (_gcb );};_ee ,_cf =_dd .ReadBits (byte (_ecf .HtPS ()));if _cf !=nil {return _cf ;
};_de =int32 (_ee );_gcb =32;_gcba =_ecf .HtLow ()-1;_bd =append (_bd ,NewCode (_de ,_gcb ,_gcba ,true ));_ee ,_cf =_dd .ReadBits (byte (_ecf .HtPS ()));if _cf !=nil {return _cf ;};_de =int32 (_ee );_gcb =32;_gcba =_ecf .HtHigh ();_bd =append (_bd ,NewCode (_de ,_gcb ,_gcba ,false ));
if _ecf .HtOOB ()==1{_ee ,_cf =_dd .ReadBits (byte (_ecf .HtPS ()));if _cf !=nil {return _cf ;};_de =int32 (_ee );_bd =append (_bd ,NewCode (_de ,-1,-1,false ));};if _cf =_ecf .InitTree (_bd );_cf !=nil {return _cf ;};return nil ;};type StandardTable struct{_ab *InternalNode };
func (_dge *OutOfBandNode )Decode (r _a .StreamReader )(int64 ,error ){return 0,_e .ErrOOB };func (_fd *StandardTable )Decode (r _a .StreamReader )(int64 ,error ){return _fd ._ab .Decode (r )};func (_fgc *StandardTable )InitTree (codeTable []*Code )error {_cfaa (codeTable );
for _ ,_dca :=range codeTable {if _fba :=_fgc ._ab .append (_dca );_fba !=nil {return _fba ;};};return nil ;};func (_gd *StandardTable )String ()string {return _gd ._ab .String ()+"\u000a"};func (_afc *FixedSizeTable )String ()string {return _afc ._bdf .String ()+"\u000a"};
