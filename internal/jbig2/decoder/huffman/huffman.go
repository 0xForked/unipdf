//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_d "errors";_c "fmt";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_gg "math";_ee "strings";);var _gcf =make ([]Tabler ,len (_efa ));func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_aac :prefixLength ,_gba :rangeLength ,_ge :rangeLow ,_fdd :isLowerRange ,_edeb :-1};
};func (_gf *InternalNode )Decode (r _e .StreamReader )(int64 ,error ){_adc ,_efe :=r .ReadBit ();if _efe !=nil {return 0,_efe ;};if _adc ==0{return _gf ._ff .Decode (r );};return _gf ._fe .Decode (r );};func (_gbe *InternalNode )pad (_bfg *_ee .Builder ){for _fc :=int32 (0);
_fc < _gbe ._gc ;_fc ++{_bfg .WriteString ("\u0020\u0020\u0020");};};func _ged (_edc ,_bbg int32 )string {var _edg int32 ;_gae :=make ([]rune ,_bbg );for _fcc :=int32 (1);_fcc <=_bbg ;_fcc ++{_edg =_edc >>uint (_bbg -_fcc )&1;if _edg !=0{_gae [_fcc -1]='1';
}else {_gae [_fcc -1]='0';};};return string (_gae );};func (_dc *FixedSizeTable )String ()string {return _dc ._ede .String ()+"\u000a"};func (_da *EncodedTable )String ()string {return _da ._dgg .String ()+"\u000a"};func _bge (_cec []*Code ){var _bad int32 ;
for _ ,_cbd :=range _cec {_bad =_abd (_bad ,_cbd ._aac );};_dbb :=make ([]int32 ,_bad +1);for _ ,_bc :=range _cec {_dbb [_bc ._aac ]++;};var _dab int32 ;_cea :=make ([]int32 ,len (_dbb )+1);_dbb [0]=0;for _dec :=int32 (1);_dec <=int32 (len (_dbb ));_dec ++{_cea [_dec ]=(_cea [_dec -1]+(_dbb [_dec -1]))<<1;
_dab =_cea [_dec ];for _ ,_gag :=range _cec {if _gag ._aac ==_dec {_gag ._edeb =_dab ;_dab ++;};};};};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_e .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_ga :=&EncodedTable {_dgg :&InternalNode {},BasicTabler :table };
if _eb :=_ga .parseTable ();_eb !=nil {return nil ,_eb ;};return _ga ,nil ;};func (_cff *FixedSizeTable )RootNode ()*InternalNode {return _cff ._ede };type OutOfBandNode struct{};var _ Node =&InternalNode {};func _abd (_afb ,_bdg int32 )int32 {if _afb > _bdg {return _afb ;
};return _bdg ;};func (_ca *ValueNode )Decode (r _e .StreamReader )(int64 ,error ){_cfd ,_fg :=r .ReadBits (byte (_ca ._ebb ));if _fg !=nil {return 0,_fg ;};if _ca ._cgf {_cfd =-_cfd ;};return int64 (_ca ._aaa )+int64 (_cfd ),nil ;};var _ Node =&ValueNode {};
func (_eec *FixedSizeTable )Decode (r _e .StreamReader )(int64 ,error ){return _eec ._ede .Decode (r )};func (_eeg *Code )String ()string {var _dff string ;if _eeg ._edeb !=-1{_dff =_ged (_eeg ._edeb ,_eeg ._aac );}else {_dff ="\u003f";};return _c .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_dff ,_eeg ._aac ,_eeg ._gba ,_eeg ._ge );
};type InternalNode struct{_gc int32 ;_ff Node ;_fe Node ;};func _fa (_ea *Code )*ValueNode {return &ValueNode {_ebb :_ea ._gba ,_aaa :_ea ._ge ,_cgf :_ea ._fdd }};func (_bd *InternalNode )String ()string {_gcc :=&_ee .Builder {};_gcc .WriteString ("\u000a");
_bd .pad (_gcc );_gcc .WriteString ("\u0030\u003a\u0020");_gcc .WriteString (_bd ._ff .String ()+"\u000a");_bd .pad (_gcc );_gcc .WriteString ("\u0031\u003a\u0020");_gcc .WriteString (_bd ._fe .String ()+"\u000a");return _gcc .String ();};func (_dgb *StandardTable )String ()string {return _dgb ._ce .String ()+"\u000a"};
func (_agg *EncodedTable )parseTable ()error {var (_de []*Code ;_db ,_f ,_cc int32 ;_ebd uint64 ;_b error ;);_df :=_agg .StreamReader ();_dbe :=_agg .HtLow ();for _dbe < _agg .HtHigh (){_ebd ,_b =_df .ReadBits (byte (_agg .HtPS ()));if _b !=nil {return _b ;
};_db =int32 (_ebd );_ebd ,_b =_df .ReadBits (byte (_agg .HtRS ()));if _b !=nil {return _b ;};_f =int32 (_ebd );_de =append (_de ,NewCode (_db ,_f ,_cc ,false ));_dbe +=1<<uint (_f );};_ebd ,_b =_df .ReadBits (byte (_agg .HtPS ()));if _b !=nil {return _b ;
};_db =int32 (_ebd );_f =32;_cc =_agg .HtLow ()-1;_de =append (_de ,NewCode (_db ,_f ,_cc ,true ));_ebd ,_b =_df .ReadBits (byte (_agg .HtPS ()));if _b !=nil {return _b ;};_db =int32 (_ebd );_f =32;_cc =_agg .HtHigh ();_de =append (_de ,NewCode (_db ,_f ,_cc ,false ));
if _agg .HtOOB ()==1{_ebd ,_b =_df .ReadBits (byte (_agg .HtPS ()));if _b !=nil {return _b ;};_db =int32 (_ebd );_de =append (_de ,NewCode (_db ,-1,-1,false ));};if _b =_agg .InitTree (_de );_b !=nil {return _b ;};return nil ;};func (_eed *InternalNode )append (_ab *Code )(_dfb error ){if _ab ._aac ==0{return nil ;
};_gb :=_ab ._aac -1-_eed ._gc ;if _gb < 0{return _d .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_dcc :=(_ab ._edeb >>uint (_gb ))&0x1;
if _gb ==0{if _ab ._gba ==-1{if _dcc ==1{if _eed ._fe !=nil {return _c .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ab );};_eed ._fe =_dea (_ab );}else {if _eed ._ff !=nil {return _c .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ab );
};_eed ._ff =_dea (_ab );};}else {if _dcc ==1{if _eed ._fe !=nil {return _c .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ab );
};_eed ._fe =_fa (_ab );}else {if _eed ._ff !=nil {return _c .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ab );
};_eed ._ff =_fa (_ab );};};}else {if _dcc ==1{if _eed ._fe ==nil {_eed ._fe =_gaf (_eed ._gc +1);};if _dfb =_eed ._fe .(*InternalNode ).append (_ab );_dfb !=nil {return _dfb ;};}else {if _eed ._ff ==nil {_eed ._ff =_gaf (_eed ._gc +1);};if _dfb =_eed ._ff .(*InternalNode ).append (_ab );
_dfb !=nil {return _dfb ;};};};return nil ;};var _efa =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_dcf *StandardTable )Decode (r _e .StreamReader )(int64 ,error ){return _dcf ._ce .Decode (r )};type Code struct{_aac int32 ;_gba int32 ;_ge int32 ;_fdd bool ;_edeb int32 ;};func (_dggf *EncodedTable )RootNode ()*InternalNode {return _dggf ._dgg };
func (_ba *OutOfBandNode )String ()string {return _c .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_gg .MaxInt64 ));};type ValueNode struct{_ebb int32 ;_aaa int32 ;_cgf bool ;};func _dea (_ac *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_dgf *ValueNode )String ()string {return _c .Sprintf ("\u0025\u0064\u002f%\u0064",_dgf ._ebb ,_dgf ._aaa );
};type FixedSizeTable struct{_ede *InternalNode };func (_cgff *StandardTable )RootNode ()*InternalNode {return _cgff ._ce };func (_ed *EncodedTable )Decode (r _e .StreamReader )(int64 ,error ){return _ed ._dgg .Decode (r )};func (_ae *StandardTable )InitTree (codeTable []*Code )error {_bge (codeTable );
for _ ,_bfa :=range codeTable {if _gda :=_ae ._ce .append (_bfa );_gda !=nil {return _gda ;};};return nil ;};func _gaf (_dge int32 )*InternalNode {return &InternalNode {_gc :_dge }};func (_ded *OutOfBandNode )Decode (r _e .StreamReader )(int64 ,error ){return 0,_a .ErrOOB };
var _ Tabler =&EncodedTable {};type EncodedTable struct{BasicTabler ;_dgg *InternalNode ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_cf :=&FixedSizeTable {_ede :&InternalNode {}};if _gdb :=_cf .InitTree (codeTable );_gdb !=nil {return nil ,_gdb ;
};return _cf ,nil ;};func _dd (_bb [][]int32 )(*StandardTable ,error ){var _ec []*Code ;for _af :=0;_af < len (_bb );_af ++{_bfc :=_bb [_af ][0];_def :=_bb [_af ][1];_eea :=_bb [_af ][2];var _aag bool ;if len (_bb [_af ])> 3{_aag =true ;};_ec =append (_ec ,NewCode (_bfc ,_def ,_eea ,_aag ));
};_bba :=&StandardTable {_ce :_gaf (0)};if _bg :=_bba .InitTree (_ec );_bg !=nil {return nil ,_bg ;};return _bba ,nil ;};type Tabler interface{Decode (_gfd _e .StreamReader )(int64 ,error );InitTree (_dfbg []*Code )error ;String ()string ;RootNode ()*InternalNode ;
};var _ Node =&OutOfBandNode {};func (_aa *EncodedTable )InitTree (codeTable []*Code )error {_bge (codeTable );for _ ,_ag :=range codeTable {if _gd :=_aa ._dgg .append (_ag );_gd !=nil {return _gd ;};};return nil ;};func (_ef *FixedSizeTable )InitTree (codeTable []*Code )error {_bge (codeTable );
for _ ,_bf :=range codeTable {_ad :=_ef ._ede .append (_bf );if _ad !=nil {return _ad ;};};return nil ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_gcf ){return nil ,_d .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cgb :=_gcf [number -1];if _cgb ==nil {var _cbf error ;_cgb ,_cbf =_dd (_efa [number -1]);if _cbf !=nil {return nil ,_cbf ;};_gcf [number -1]=_cgb ;};return _cgb ,nil ;};type Node interface{Decode (_cb _e .StreamReader )(int64 ,error );String ()string ;
};type StandardTable struct{_ce *InternalNode };