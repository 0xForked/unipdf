//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_d "errors";_e "fmt";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_ae "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ff "math";_c "strings";);func (_b *EncodedTable )RootNode ()*InternalNode {return _b ._fe };func (_ceee *Code )String ()string {var _dcge string ;if _ceee ._gda !=-1{_dcge =_ebe (_ceee ._gda ,_ceee ._ggc );}else {_dcge ="\u003f";};return _e .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_dcge ,_ceee ._ggc ,_ceee ._ddg ,_ceee ._edd );};func _ged (_be *Code )*OutOfBandNode {return &OutOfBandNode {}};type InternalNode struct{_feb int32 ;_ccf Node ;_cg Node ;};func (_ea *EncodedTable )parseTable ()error {var (_df []*Code ;_ag ,_cf ,_de int32 ;_bg uint64 ;_ef error ;);_dea :=_ea .StreamReader ();_geg :=_ea .HtLow ();for _geg < _ea .HtHigh (){_bg ,_ef =_dea .ReadBits (byte (_ea .HtPS ()));if _ef !=nil {return _ef ;};_ag =int32 (_bg );_bg ,_ef =_dea .ReadBits (byte (_ea .HtRS ()));if _ef !=nil {return _ef ;};_cf =int32 (_bg );_df =append (_df ,NewCode (_ag ,_cf ,_de ,false ));_geg +=1<<uint (_cf );};_bg ,_ef =_dea .ReadBits (byte (_ea .HtPS ()));if _ef !=nil {return _ef ;};_ag =int32 (_bg );_cf =32;_de =_ea .HtLow ()-1;_df =append (_df ,NewCode (_ag ,_cf ,_de ,true ));_bg ,_ef =_dea .ReadBits (byte (_ea .HtPS ()));if _ef !=nil {return _ef ;};_ag =int32 (_bg );_cf =32;_de =_ea .HtHigh ();_df =append (_df ,NewCode (_ag ,_cf ,_de ,false ));if _ea .HtOOB ()==1{_bg ,_ef =_dea .ReadBits (byte (_ea .HtPS ()));if _ef !=nil {return _ef ;};_ag =int32 (_bg );_df =append (_df ,NewCode (_ag ,-1,-1,false ));};if _ef =_ea .InitTree (_df );_ef !=nil {return _ef ;};return nil ;};func (_aa *FixedSizeTable )String ()string {return _aa ._eb .String ()+"\u000a"};var _ Tabler =&EncodedTable {};var _ Node =&ValueNode {};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_dfb :=&FixedSizeTable {_eb :&InternalNode {}};if _dc :=_dfb .InitTree (codeTable );_dc !=nil {return nil ,_dc ;};return _dfb ,nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_ge :=&EncodedTable {_fe :&InternalNode {},BasicTabler :table };if _gg :=_ge .parseTable ();_gg !=nil {return nil ,_gg ;};return _ge ,nil ;};type Code struct{_ggc int32 ;_ddg int32 ;_edd int32 ;_defe bool ;_gda int32 ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_f .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_agb *OutOfBandNode )String ()string {return _e .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_ff .MaxInt64 ));};func (_aed *InternalNode )Decode (r _f .StreamReader )(int64 ,error ){_bgc ,_gd :=r .ReadBit ();if _gd !=nil {return 0,_gd ;};if _bgc ==0{return _aed ._ccf .Decode (r );};return _aed ._cg .Decode (r );};func (_ee *EncodedTable )Decode (r _f .StreamReader )(int64 ,error ){return _ee ._fe .Decode (r )};func (_da *StandardTable )Decode (r _f .StreamReader )(int64 ,error ){return _da ._bgb .Decode (r )};func (_efd *InternalNode )append (_ed *Code )(_cfb error ){if _ed ._ggc ==0{return nil ;};_deb :=_ed ._ggc -1-_efd ._feb ;if _deb < 0{return _d .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_fg :=(_ed ._gda >>uint (_deb ))&0x1;if _deb ==0{if _ed ._ddg ==-1{if _fg ==1{if _efd ._cg !=nil {return _e .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ed );};_efd ._cg =_ged (_ed );}else {if _efd ._ccf !=nil {return _e .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ed );};_efd ._ccf =_ged (_ed );};}else {if _fg ==1{if _efd ._cg !=nil {return _e .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ed );};_efd ._cg =_eef (_ed );}else {if _efd ._ccf !=nil {return _e .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ed );};_efd ._ccf =_eef (_ed );};};}else {if _fg ==1{if _efd ._cg ==nil {_efd ._cg =_baa (_efd ._feb +1);};if _cfb =_efd ._cg .(*InternalNode ).append (_ed );_cfb !=nil {return _cfb ;};}else {if _efd ._ccf ==nil {_efd ._ccf =_baa (_efd ._feb +1);};if _cfb =_efd ._ccf .(*InternalNode ).append (_ed );_cfb !=nil {return _cfb ;};};};return nil ;};func (_cee *InternalNode )pad (_ffg *_c .Builder ){for _gec :=int32 (0);_gec < _cee ._feb ;_gec ++{_ffg .WriteString ("\u0020\u0020\u0020");};};func _fea (_cdc [][]int32 )(*StandardTable ,error ){var _bc []*Code ;for _abb :=0;_abb < len (_cdc );_abb ++{_ad :=_cdc [_abb ][0];_aee :=_cdc [_abb ][1];_gbc :=_cdc [_abb ][2];var _gefg bool ;if len (_cdc [_abb ])> 3{_gefg =true ;};_bc =append (_bc ,NewCode (_ad ,_aee ,_gbc ,_gefg ));};_bad :=&StandardTable {_bgb :_baa (0)};if _dg :=_bad .InitTree (_bc );_dg !=nil {return nil ,_dg ;};return _bad ,nil ;};func (_efc *StandardTable )InitTree (codeTable []*Code )error {_cfd (codeTable );for _ ,_beb :=range codeTable {if _gef :=_efc ._bgb .append (_beb );_gef !=nil {return _gef ;};};return nil ;};type FixedSizeTable struct{_eb *InternalNode };func _ebe (_bd ,_gea int32 )string {var _gc int32 ;_ead :=make ([]rune ,_gea );for _gdd :=int32 (1);_gdd <=_gea ;_gdd ++{_gc =_bd >>uint (_gea -_gdd )&1;if _gc !=0{_ead [_gdd -1]='1';}else {_ead [_gdd -1]='0';};};return string (_ead );};func (_aeb *InternalNode )String ()string {_deg :=&_c .Builder {};_deg .WriteString ("\u000a");_aeb .pad (_deg );_deg .WriteString ("\u0030\u003a\u0020");_deg .WriteString (_aeb ._ccf .String ()+"\u000a");_aeb .pad (_deg );_deg .WriteString ("\u0031\u003a\u0020");_deg .WriteString (_aeb ._cg .String ()+"\u000a");return _deg .String ();};var _ Node =&OutOfBandNode {};type ValueNode struct{_dfg int32 ;_gaa int32 ;_ffe bool ;};type Tabler interface{Decode (_ded _f .StreamReader )(int64 ,error );InitTree (_gde []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_cdab ){return nil ,_d .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_efed :=_cdab [number -1];if _efed ==nil {var _dcb error ;_efed ,_dcb =_fea (_dd [number -1]);if _dcb !=nil {return nil ,_dcb ;};_cdab [number -1]=_efed ;};return _efed ,nil ;};func (_ggd *OutOfBandNode )Decode (r _f .StreamReader )(int64 ,error ){return 0,_ae .ErrOOB };func (_cd *FixedSizeTable )Decode (r _f .StreamReader )(int64 ,error ){return _cd ._eb .Decode (r )};var _cdab =make ([]Tabler ,len (_dd ));func _af (_aac ,_fec int32 )int32 {if _aac > _fec {return _aac ;};return _fec ;};func (_ggg *FixedSizeTable )InitTree (codeTable []*Code )error {_cfd (codeTable );for _ ,_cdd :=range codeTable {_fb :=_ggg ._eb .append (_cdd );if _fb !=nil {return _fb ;};};return nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ggc :prefixLength ,_ddg :rangeLength ,_edd :rangeLow ,_defe :isLowerRange ,_gda :-1};};func (_aecd *FixedSizeTable )RootNode ()*InternalNode {return _aecd ._eb };func (_efcc *StandardTable )String ()string {return _efcc ._bgb .String ()+"\u000a"};type Node interface{Decode (_def _f .StreamReader )(int64 ,error );String ()string ;};func _cfd (_fgf []*Code ){var _ec int32 ;for _ ,_gac :=range _fgf {_ec =_af (_ec ,_gac ._ggc );};_bdg :=make ([]int32 ,_ec +1);for _ ,_eec :=range _fgf {_bdg [_eec ._ggc ]++;};var _fga int32 ;_fgfe :=make ([]int32 ,len (_bdg )+1);_bdg [0]=0;for _cef :=int32 (1);_cef <=int32 (len (_bdg ));_cef ++{_fgfe [_cef ]=(_fgfe [_cef -1]+(_bdg [_cef -1]))<<1;_fga =_fgfe [_cef ];for _ ,_ecd :=range _fgf {if _ecd ._ggc ==_cef {_ecd ._gda =_fga ;_fga ++;};};};};var _dd =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};type EncodedTable struct{BasicTabler ;_fe *InternalNode ;};func (_ce *EncodedTable )String ()string {return _ce ._fe .String ()+"\u000a"};func (_cad *ValueNode )String ()string {return _e .Sprintf ("\u0025\u0064\u002f%\u0064",_cad ._dfg ,_cad ._gaa );};type OutOfBandNode struct{};var _ Node =&InternalNode {};func (_ab *EncodedTable )InitTree (codeTable []*Code )error {_cfd (codeTable );for _ ,_aec :=range codeTable {if _cc :=_ab ._fe .append (_aec );_cc !=nil {return _cc ;};};return nil ;};func (_ba *ValueNode )Decode (r _f .StreamReader )(int64 ,error ){_abf ,_fbe :=r .ReadBits (byte (_ba ._dfg ));if _fbe !=nil {return 0,_fbe ;};if _ba ._ffe {_abf =-_abf ;};return int64 (_ba ._gaa )+int64 (_abf ),nil ;};func _eef (_gb *Code )*ValueNode {return &ValueNode {_dfg :_gb ._ddg ,_gaa :_gb ._edd ,_ffe :_gb ._defe }};type StandardTable struct{_bgb *InternalNode };func _baa (_efe int32 )*InternalNode {return &InternalNode {_feb :_efe }};func (_cda *StandardTable )RootNode ()*InternalNode {return _cda ._bgb };