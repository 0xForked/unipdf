//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_d "errors";_f "fmt";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_bc "math";_ae "strings";);type EncodedTable struct{BasicTabler ;_cg *InternalNode ;};func (_fae *InternalNode )append (_dag *Code )(_ggd error ){if _dag ._db ==0{return nil ;
};_ec :=_dag ._db -1-_fae ._cgg ;if _ec < 0{return _d .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_aea :=(_dag ._fccd >>uint (_ec ))&0x1;
if _ec ==0{if _dag ._egd ==-1{if _aea ==1{if _fae ._ff !=nil {return _f .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dag );};_fae ._ff =_ef (_dag );
}else {if _fae ._cc !=nil {return _f .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dag );};_fae ._cc =_ef (_dag );};}else {if _aea ==1{if _fae ._ff !=nil {return _f .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dag );
};_fae ._ff =_fb (_dag );}else {if _fae ._cc !=nil {return _f .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dag );
};_fae ._cc =_fb (_dag );};};}else {if _aea ==1{if _fae ._ff ==nil {_fae ._ff =_de (_fae ._cgg +1);};if _ggd =_fae ._ff .(*InternalNode ).append (_dag );_ggd !=nil {return _ggd ;};}else {if _fae ._cc ==nil {_fae ._cc =_de (_fae ._cgg +1);};if _ggd =_fae ._cc .(*InternalNode ).append (_dag );
_ggd !=nil {return _ggd ;};};};return nil ;};func (_bde *InternalNode )pad (_cef *_ae .Builder ){for _cff :=int32 (0);_cff < _bde ._cgg ;_cff ++{_cef .WriteString ("\u0020\u0020\u0020");};};type OutOfBandNode struct{};func (_cfa *StandardTable )Decode (r _b .StreamReader )(int64 ,error ){return _cfa ._cba .Decode (r )};
type InternalNode struct{_cgg int32 ;_cc Node ;_ff Node ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_db :prefixLength ,_egd :rangeLength ,_gfe :rangeLow ,_fd :isLowerRange ,_fccd :-1};};func (_fag *FixedSizeTable )RootNode ()*InternalNode {return _fag ._ce };
func (_cd *EncodedTable )parseTable ()error {var (_gec []*Code ;_ga ,_fc ,_fa int32 ;_da uint64 ;_fcd error ;);_bb :=_cd .StreamReader ();_gef :=_cd .HtLow ();for _gef < _cd .HtHigh (){_da ,_fcd =_bb .ReadBits (byte (_cd .HtPS ()));if _fcd !=nil {return _fcd ;
};_ga =int32 (_da );_da ,_fcd =_bb .ReadBits (byte (_cd .HtRS ()));if _fcd !=nil {return _fcd ;};_fc =int32 (_da );_gec =append (_gec ,NewCode (_ga ,_fc ,_fa ,false ));_gef +=1<<uint (_fc );};_da ,_fcd =_bb .ReadBits (byte (_cd .HtPS ()));if _fcd !=nil {return _fcd ;
};_ga =int32 (_da );_fc =32;_fa =_cd .HtLow ()-1;_gec =append (_gec ,NewCode (_ga ,_fc ,_fa ,true ));_da ,_fcd =_bb .ReadBits (byte (_cd .HtPS ()));if _fcd !=nil {return _fcd ;};_ga =int32 (_da );_fc =32;_fa =_cd .HtHigh ();_gec =append (_gec ,NewCode (_ga ,_fc ,_fa ,false ));
if _cd .HtOOB ()==1{_da ,_fcd =_bb .ReadBits (byte (_cd .HtPS ()));if _fcd !=nil {return _fcd ;};_ga =int32 (_da );_gec =append (_gec ,NewCode (_ga ,-1,-1,false ));};if _fcd =_cd .InitTree (_gec );_fcd !=nil {return _fcd ;};return nil ;};func _de (_acc int32 )*InternalNode {return &InternalNode {_cgg :_acc }};
type ValueNode struct{_eg int32 ;_fe int32 ;_dda bool ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_cge ){return nil ,_d .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_abg :=_cge [number -1];if _abg ==nil {var _fgf error ;_abg ,_fgf =_gf (_bca [number -1]);if _fgf !=nil {return nil ,_fgf ;};_cge [number -1]=_abg ;};return _abg ,nil ;};func (_ggaf *StandardTable )InitTree (codeTable []*Code )error {_be (codeTable );
for _ ,_eag :=range codeTable {if _gdd :=_ggaf ._cba .append (_eag );_gdd !=nil {return _gdd ;};};return nil ;};func (_gac *OutOfBandNode )Decode (r _b .StreamReader )(int64 ,error ){return 0,_c .ErrOOB };func (_g *EncodedTable )Decode (r _b .StreamReader )(int64 ,error ){return _g ._cg .Decode (r )};
func _ef (_bga *Code )*OutOfBandNode {return &OutOfBandNode {}};var _ Node =&ValueNode {};func (_af *StandardTable )String ()string {return _af ._cba .String ()+"\u000a"};func (_cdd *InternalNode )String ()string {_cgb :=&_ae .Builder {};_cgb .WriteString ("\u000a");
_cdd .pad (_cgb );_cgb .WriteString ("\u0030\u003a\u0020");_cgb .WriteString (_cdd ._cc .String ()+"\u000a");_cdd .pad (_cgb );_cgb .WriteString ("\u0031\u003a\u0020");_cgb .WriteString (_cdd ._ff .String ()+"\u000a");return _cgb .String ();};func (_gg *EncodedTable )InitTree (codeTable []*Code )error {_be (codeTable );
for _ ,_bg :=range codeTable {if _ge :=_gg ._cg .append (_bg );_ge !=nil {return _ge ;};};return nil ;};func (_gbd *ValueNode )String ()string {return _f .Sprintf ("\u0025\u0064\u002f%\u0064",_gbd ._eg ,_gbd ._fe );};var _ Node =&InternalNode {};func (_bfg *OutOfBandNode )String ()string {return _f .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_bc .MaxInt64 ));
};func (_gba *InternalNode )Decode (r _b .StreamReader )(int64 ,error ){_bfb ,_ac :=r .ReadBit ();if _ac !=nil {return 0,_ac ;};if _bfb ==0{return _gba ._cc .Decode (r );};return _gba ._ff .Decode (r );};type StandardTable struct{_cba *InternalNode };func (_e *EncodedTable )RootNode ()*InternalNode {return _e ._cg };
func (_cddf *Code )String ()string {var _cbaa string ;if _cddf ._fccd !=-1{_cbaa =_egf (_cddf ._fccd ,_cddf ._db );}else {_cbaa ="\u003f";};return _f .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cbaa ,_cddf ._db ,_cddf ._egd ,_cddf ._gfe );
};var _ Tabler =&EncodedTable {};func (_eb *FixedSizeTable )InitTree (codeTable []*Code )error {_be (codeTable );for _ ,_cf :=range codeTable {_fg :=_eb ._ce .append (_cf );if _fg !=nil {return _fg ;};};return nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_cb :=&EncodedTable {_cg :&InternalNode {},BasicTabler :table };
if _bcd :=_cb .parseTable ();_bcd !=nil {return nil ,_bcd ;};return _cb ,nil ;};var _cge =make ([]Tabler ,len (_bca ));func _fb (_gad *Code )*ValueNode {return &ValueNode {_eg :_gad ._egd ,_fe :_gad ._gfe ,_dda :_gad ._fd }};func (_aa *EncodedTable )String ()string {return _aa ._cg .String ()+"\u000a"};
func _be (_dea []*Code ){var _ecc int32 ;for _ ,_ca :=range _dea {_ecc =_bgag (_ecc ,_ca ._db );};_egc :=make ([]int32 ,_ecc +1);for _ ,_cfd :=range _dea {_egc [_cfd ._db ]++;};var _fed int32 ;_ag :=make ([]int32 ,len (_egc )+1);_egc [0]=0;for _aeg :=int32 (1);
_aeg <=int32 (len (_egc ));_aeg ++{_ag [_aeg ]=(_ag [_aeg -1]+(_egc [_aeg -1]))<<1;_fed =_ag [_aeg ];for _ ,_bcac :=range _dea {if _bcac ._db ==_aeg {_bcac ._fccd =_fed ;_fed ++;};};};};type FixedSizeTable struct{_ce *InternalNode };type Tabler interface{Decode (_dae _b .StreamReader )(int64 ,error );
InitTree (_edd []*Code )error ;String ()string ;RootNode ()*InternalNode ;};var _bca =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_ee :=&FixedSizeTable {_ce :&InternalNode {}};if _bbf :=_ee .InitTree (codeTable );_bbf !=nil {return nil ,_bbf ;};return _ee ,nil ;};type Code struct{_db int32 ;_egd int32 ;_gfe int32 ;
_fd bool ;_fccd int32 ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_b .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func _egf (_ebdf ,_gab int32 )string {var _bcc int32 ;_daf :=make ([]rune ,_gab );for _bcdd :=int32 (1);
_bcdd <=_gab ;_bcdd ++{_bcc =_ebdf >>uint (_gab -_bcdd )&1;if _bcc !=0{_daf [_bcdd -1]='1';}else {_daf [_bcdd -1]='0';};};return string (_daf );};type Node interface{Decode (_gd _b .StreamReader )(int64 ,error );String ()string ;};var _ Node =&OutOfBandNode {};
func (_gga *FixedSizeTable )String ()string {return _gga ._ce .String ()+"\u000a"};func (_ab *FixedSizeTable )Decode (r _b .StreamReader )(int64 ,error ){return _ab ._ce .Decode (r )};func (_dc *StandardTable )RootNode ()*InternalNode {return _dc ._cba };
func _bgag (_bcf ,_fff int32 )int32 {if _bcf > _fff {return _bcf ;};return _fff ;};func (_efd *ValueNode )Decode (r _b .StreamReader )(int64 ,error ){_ed ,_ebb :=r .ReadBits (byte (_efd ._eg ));if _ebb !=nil {return 0,_ebb ;};if _efd ._dda {_ed =-_ed ;
};return int64 (_efd ._fe )+int64 (_ed ),nil ;};func _gf (_cgbe [][]int32 )(*StandardTable ,error ){var _ffd []*Code ;for _gc :=0;_gc < len (_cgbe );_gc ++{_cdc :=_cgbe [_gc ][0];_gea :=_cgbe [_gc ][1];_gbg :=_cgbe [_gc ][2];var _abb bool ;if len (_cgbe [_gc ])> 3{_abb =true ;
};_ffd =append (_ffd ,NewCode (_cdc ,_gea ,_gbg ,_abb ));};_cgd :=&StandardTable {_cba :_de (0)};if _fcc :=_cgd .InitTree (_ffd );_fcc !=nil {return nil ,_fcc ;};return _cgd ,nil ;};