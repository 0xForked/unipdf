//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_ga "errors";_de "fmt";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_a "math";_f "strings";);func _fca (_bad *Code )*ValueNode {return &ValueNode {_bg :_bad ._aae ,_afg :_bad ._bgg ,_fcb :_bad ._eaf }};
func (_ca *StandardTable )InitTree (codeTable []*Code )error {_aga (codeTable );for _ ,_ddf :=range codeTable {if _cc :=_ca ._dbgb .append (_ddf );_cc !=nil {return _cc ;};};return nil ;};type FixedSizeTable struct{_deg *InternalNode };func _ebf (_efb *Code )*OutOfBandNode {return &OutOfBandNode {}};
func (_dba *StandardTable )Decode (r _d .StreamReader )(int64 ,error ){return _dba ._dbgb .Decode (r )};type InternalNode struct{_gea int32 ;_ebd Node ;_fb Node ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_gfad :prefixLength ,_aae :rangeLength ,_bgg :rangeLow ,_eaf :isLowerRange ,_abe :-1};
};func (_gd *InternalNode )Decode (r _d .StreamReader )(int64 ,error ){_bga ,_ab :=r .ReadBit ();if _ab !=nil {return 0,_ab ;};if _bga ==0{return _gd ._ebd .Decode (r );};return _gd ._fb .Decode (r );};var _ Node =&ValueNode {};func _dg (_ffac ,_ec int32 )int32 {if _ffac > _ec {return _ffac ;
};return _ec ;};var _ Tabler =&EncodedTable {};func _fdg (_abd [][]int32 )(*StandardTable ,error ){var _cbg []*Code ;for _bda :=0;_bda < len (_abd );_bda ++{_aaf :=_abd [_bda ][0];_ed :=_abd [_bda ][1];_fab :=_abd [_bda ][2];var _bgf bool ;if len (_abd [_bda ])> 3{_bgf =true ;
};_cbg =append (_cbg ,NewCode (_aaf ,_ed ,_fab ,_bgf ));};_dc :=&StandardTable {_dbgb :_bd (0)};if _gc :=_dc .InitTree (_cbg );_gc !=nil {return nil ,_gc ;};return _dc ,nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_gf :=&EncodedTable {_ag :&InternalNode {},BasicTabler :table };
if _b :=_gf .parseTable ();_b !=nil {return nil ,_b ;};return _gf ,nil ;};func (_dd *EncodedTable )Decode (r _d .StreamReader )(int64 ,error ){return _dd ._ag .Decode (r )};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_bc ){return nil ,_ga .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_gfa :=_bc [number -1];if _gfa ==nil {var _faf error ;_gfa ,_faf =_fdg (_fg [number -1]);if _faf !=nil {return nil ,_faf ;};_bc [number -1]=_gfa ;};return _gfa ,nil ;};func (_fe *FixedSizeTable )String ()string {return _fe ._deg .String ()+"\u000a"};
func (_eee *OutOfBandNode )Decode (r _d .StreamReader )(int64 ,error ){return 0,_g .ErrOOB };func (_ebfb *ValueNode )Decode (r _d .StreamReader )(int64 ,error ){_dddc ,_dbg :=r .ReadBits (byte (_ebfb ._bg ));if _dbg !=nil {return 0,_dbg ;};if _ebfb ._fcb {_dddc =-_dddc ;
};return int64 (_ebfb ._afg )+int64 (_dddc ),nil ;};var _ Node =&OutOfBandNode {};type StandardTable struct{_dbgb *InternalNode };type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_d .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;
};func (_eg *EncodedTable )RootNode ()*InternalNode {return _eg ._ag };func (_ddg *FixedSizeTable )InitTree (codeTable []*Code )error {_aga (codeTable );for _ ,_ce :=range codeTable {_agc :=_ddg ._deg .append (_ce );if _agc !=nil {return _agc ;};};return nil ;
};func (_ea *EncodedTable )parseTable ()error {var (_fa []*Code ;_fc ,_c ,_ged int32 ;_ee uint64 ;_fd error ;);_af :=_ea .StreamReader ();_db :=_ea .HtLow ();for _db < _ea .HtHigh (){_ee ,_fd =_af .ReadBits (byte (_ea .HtPS ()));if _fd !=nil {return _fd ;
};_fc =int32 (_ee );_ee ,_fd =_af .ReadBits (byte (_ea .HtRS ()));if _fd !=nil {return _fd ;};_c =int32 (_ee );_fa =append (_fa ,NewCode (_fc ,_c ,_ged ,false ));_db +=1<<uint (_c );};_ee ,_fd =_af .ReadBits (byte (_ea .HtPS ()));if _fd !=nil {return _fd ;
};_fc =int32 (_ee );_c =32;_ged =_ea .HtLow ()-1;_fa =append (_fa ,NewCode (_fc ,_c ,_ged ,true ));_ee ,_fd =_af .ReadBits (byte (_ea .HtPS ()));if _fd !=nil {return _fd ;};_fc =int32 (_ee );_c =32;_ged =_ea .HtHigh ();_fa =append (_fa ,NewCode (_fc ,_c ,_ged ,false ));
if _ea .HtOOB ()==1{_ee ,_fd =_af .ReadBits (byte (_ea .HtPS ()));if _fd !=nil {return _fd ;};_fc =int32 (_ee );_fa =append (_fa ,NewCode (_fc ,-1,-1,false ));};if _fd =_ea .InitTree (_fa );_fd !=nil {return _fd ;};return nil ;};var _fg =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
type OutOfBandNode struct{};func (_ff *ValueNode )String ()string {return _de .Sprintf ("\u0025\u0064\u002f%\u0064",_ff ._bg ,_ff ._afg );};func (_ebdg *InternalNode )append (_cb *Code )(_baa error ){if _cb ._gfad ==0{return nil ;};_ae :=_cb ._gfad -1-_ebdg ._gea ;
if _ae < 0{return _ga .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_ac :=(_cb ._abe >>uint (_ae ))&0x1;
if _ae ==0{if _cb ._aae ==-1{if _ac ==1{if _ebdg ._fb !=nil {return _de .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cb );};_ebdg ._fb =_ebf (_cb );
}else {if _ebdg ._ebd !=nil {return _de .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cb );};_ebdg ._ebd =_ebf (_cb );};}else {if _ac ==1{if _ebdg ._fb !=nil {return _de .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cb );
};_ebdg ._fb =_fca (_cb );}else {if _ebdg ._ebd !=nil {return _de .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cb );
};_ebdg ._ebd =_fca (_cb );};};}else {if _ac ==1{if _ebdg ._fb ==nil {_ebdg ._fb =_bd (_ebdg ._gea +1);};if _baa =_ebdg ._fb .(*InternalNode ).append (_cb );_baa !=nil {return _baa ;};}else {if _ebdg ._ebd ==nil {_ebdg ._ebd =_bd (_ebdg ._gea +1);};if _baa =_ebdg ._ebd .(*InternalNode ).append (_cb );
_baa !=nil {return _baa ;};};};return nil ;};type Tabler interface{Decode (_dec _d .StreamReader )(int64 ,error );InitTree (_aee []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_be *EncodedTable )InitTree (codeTable []*Code )error {_aga (codeTable );
for _ ,_ge :=range codeTable {if _ba :=_be ._ag .append (_ge );_ba !=nil {return _ba ;};};return nil ;};func _aga (_ccf []*Code ){var _bcb int32 ;for _ ,_fdd :=range _ccf {_bcb =_dg (_bcb ,_fdd ._gfad );};_bca :=make ([]int32 ,_bcb +1);for _ ,_bgae :=range _ccf {_bca [_bgae ._gfad ]++;
};var _acc int32 ;_fcd :=make ([]int32 ,len (_bca )+1);_bca [0]=0;for _cdg :=int32 (1);_cdg <=int32 (len (_bca ));_cdg ++{_fcd [_cdg ]=(_fcd [_cdg -1]+(_bca [_cdg -1]))<<1;_acc =_fcd [_cdg ];for _ ,_aaeb :=range _ccf {if _aaeb ._gfad ==_cdg {_aaeb ._abe =_acc ;
_acc ++;};};};};func (_gb *FixedSizeTable )Decode (r _d .StreamReader )(int64 ,error ){return _gb ._deg .Decode (r )};func _bd (_fbf int32 )*InternalNode {return &InternalNode {_gea :_fbf }};func (_ad *OutOfBandNode )String ()string {return _de .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_a .MaxInt64 ));
};func (_eb *EncodedTable )String ()string {return _eb ._ag .String ()+"\u000a"};type Node interface{Decode (_ef _d .StreamReader )(int64 ,error );String ()string ;};func (_aa *InternalNode )pad (_efg *_f .Builder ){for _ffa :=int32 (0);_ffa < _aa ._gea ;
_ffa ++{_efg .WriteString ("\u0020\u0020\u0020");};};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_ead :=&FixedSizeTable {_deg :&InternalNode {}};if _df :=_ead .InitTree (codeTable );_df !=nil {return nil ,_df ;};return _ead ,nil ;
};type EncodedTable struct{BasicTabler ;_ag *InternalNode ;};var _bc =make ([]Tabler ,len (_fg ));type ValueNode struct{_bg int32 ;_afg int32 ;_fcb bool ;};type Code struct{_gfad int32 ;_aae int32 ;_bgg int32 ;_eaf bool ;_abe int32 ;};func (_edf *Code )String ()string {var _efe string ;
if _edf ._abe !=-1{_efe =_decc (_edf ._abe ,_edf ._gfad );}else {_efe ="\u003f";};return _de .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_efe ,_edf ._gfad ,_edf ._aae ,_edf ._bgg );};func (_bae *StandardTable )RootNode ()*InternalNode {return _bae ._dbgb };
func (_beb *FixedSizeTable )RootNode ()*InternalNode {return _beb ._deg };func (_bb *StandardTable )String ()string {return _bb ._dbgb .String ()+"\u000a"};var _ Node =&InternalNode {};func (_ggf *InternalNode )String ()string {_cdc :=&_f .Builder {};_cdc .WriteString ("\u000a");
_ggf .pad (_cdc );_cdc .WriteString ("\u0030\u003a\u0020");_cdc .WriteString (_ggf ._ebd .String ()+"\u000a");_ggf .pad (_cdc );_cdc .WriteString ("\u0031\u003a\u0020");_cdc .WriteString (_ggf ._fb .String ()+"\u000a");return _cdc .String ();};func _decc (_fee ,_fgd int32 )string {var _bdf int32 ;
_cf :=make ([]rune ,_fgd );for _gef :=int32 (1);_gef <=_fgd ;_gef ++{_bdf =_fee >>uint (_fgd -_gef )&1;if _bdf !=0{_cf [_gef -1]='1';}else {_cf [_gef -1]='0';};};return string (_cf );};