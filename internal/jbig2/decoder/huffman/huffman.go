//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_e "errors";_db "fmt";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_c "math";_f "strings";);type FixedSizeTable struct{_gd *InternalNode };func (_eae *StandardTable )String ()string {return _eae ._baa .String ()+"\u000a"};
type InternalNode struct{_ddd int32 ;_eab Node ;_fb Node ;};type OutOfBandNode struct{};func _cae (_ce *Code )*ValueNode {return &ValueNode {_eg :_ce ._cgbc ,_dgb :_ce ._fbe ,_edb :_ce ._dfc }};func (_ga *EncodedTable )String ()string {return _ga ._ge .String ()+"\u000a"};
func (_cd *EncodedTable )parseTable ()error {var (_gae []*Code ;_ec ,_ffd ,_cc int32 ;_cda uint64 ;_dfd error ;);_gaf :=_cd .StreamReader ();_gge :=_cd .HtLow ();for _gge < _cd .HtHigh (){_cda ,_dfd =_gaf .ReadBits (byte (_cd .HtPS ()));if _dfd !=nil {return _dfd ;
};_ec =int32 (_cda );_cda ,_dfd =_gaf .ReadBits (byte (_cd .HtRS ()));if _dfd !=nil {return _dfd ;};_ffd =int32 (_cda );_gae =append (_gae ,NewCode (_ec ,_ffd ,_cc ,false ));_gge +=1<<uint (_ffd );};_cda ,_dfd =_gaf .ReadBits (byte (_cd .HtPS ()));if _dfd !=nil {return _dfd ;
};_ec =int32 (_cda );_ffd =32;_cc =_cd .HtLow ()-1;_gae =append (_gae ,NewCode (_ec ,_ffd ,_cc ,true ));_cda ,_dfd =_gaf .ReadBits (byte (_cd .HtPS ()));if _dfd !=nil {return _dfd ;};_ec =int32 (_cda );_ffd =32;_cc =_cd .HtHigh ();_gae =append (_gae ,NewCode (_ec ,_ffd ,_cc ,false ));
if _cd .HtOOB ()==1{_cda ,_dfd =_gaf .ReadBits (byte (_cd .HtPS ()));if _dfd !=nil {return _dfd ;};_ec =int32 (_cda );_gae =append (_gae ,NewCode (_ec ,-1,-1,false ));};if _dfd =_cd .InitTree (_gae );_dfd !=nil {return _dfd ;};return nil ;};func (_fage *StandardTable )RootNode ()*InternalNode {return _fage ._baa };
type EncodedTable struct{BasicTabler ;_ge *InternalNode ;};var _ Node =&ValueNode {};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_dc ){return nil ,_e .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fee :=_dc [number -1];if _fee ==nil {var _eaf error ;_fee ,_eaf =_gea (_bae [number -1]);if _eaf !=nil {return nil ,_eaf ;};_dc [number -1]=_fee ;};return _fee ,nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_fc :=&EncodedTable {_ge :&InternalNode {},BasicTabler :table };
if _ff :=_fc .parseTable ();_ff !=nil {return nil ,_ff ;};return _fc ,nil ;};func (_gc *InternalNode )String ()string {_ccc :=&_f .Builder {};_ccc .WriteString ("\u000a");_gc .pad (_ccc );_ccc .WriteString ("\u0030\u003a\u0020");_ccc .WriteString (_gc ._eab .String ()+"\u000a");
_gc .pad (_ccc );_ccc .WriteString ("\u0031\u003a\u0020");_ccc .WriteString (_gc ._fb .String ()+"\u000a");return _ccc .String ();};func (_fd *InternalNode )append (_ba *Code )(_baf error ){if _ba ._aba ==0{return nil ;};_gdg :=_ba ._aba -1-_fd ._ddd ;
if _gdg < 0{return _e .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_cb :=(_ba ._bba >>uint (_gdg ))&0x1;
if _gdg ==0{if _ba ._cgbc ==-1{if _cb ==1{if _fd ._fb !=nil {return _db .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ba );};_fd ._fb =_de (_ba );}else {if _fd ._eab !=nil {return _db .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ba );
};_fd ._eab =_de (_ba );};}else {if _cb ==1{if _fd ._fb !=nil {return _db .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ba );
};_fd ._fb =_cae (_ba );}else {if _fd ._eab !=nil {return _db .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ba );
};_fd ._eab =_cae (_ba );};};}else {if _cb ==1{if _fd ._fb ==nil {_fd ._fb =_dga (_fd ._ddd +1);};if _baf =_fd ._fb .(*InternalNode ).append (_ba );_baf !=nil {return _baf ;};}else {if _fd ._eab ==nil {_fd ._eab =_dga (_fd ._ddd +1);};if _baf =_fd ._eab .(*InternalNode ).append (_ba );
_baf !=nil {return _baf ;};};};return nil ;};func (_ad *InternalNode )Decode (r _a .StreamReader )(int64 ,error ){_bc ,_cgb :=r .ReadBit ();if _cgb !=nil {return 0,_cgb ;};if _bc ==0{return _ad ._eab .Decode (r );};return _ad ._fb .Decode (r );};func (_faf *ValueNode )String ()string {return _db .Sprintf ("\u0025\u0064\u002f%\u0064",_faf ._eg ,_faf ._dgb );
};func _de (_fag *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_ddg *FixedSizeTable )RootNode ()*InternalNode {return _ddg ._gd };func _gea (_cdad [][]int32 )(*StandardTable ,error ){var _bd []*Code ;for _efe :=0;_efe < len (_cdad );_efe ++{_be :=_cdad [_efe ][0];
_gde :=_cdad [_efe ][1];_deg :=_cdad [_efe ][2];var _eda bool ;if len (_cdad [_efe ])> 3{_eda =true ;};_bd =append (_bd ,NewCode (_be ,_gde ,_deg ,_eda ));};_af :=&StandardTable {_baa :_dga (0)};if _bad :=_af .InitTree (_bd );_bad !=nil {return nil ,_bad ;
};return _af ,nil ;};func _bbe (_gfeg ,_ebc int32 )int32 {if _gfeg > _ebc {return _gfeg ;};return _ebc ;};func _gaea (_egf ,_acb int32 )string {var _ece int32 ;_dgf :=make ([]rune ,_acb );for _ged :=int32 (1);_ged <=_acb ;_ged ++{_ece =_egf >>uint (_acb -_ged )&1;
if _ece !=0{_dgf [_ged -1]='1';}else {_dgf [_ged -1]='0';};};return string (_dgf );};func (_bb *OutOfBandNode )String ()string {return _db .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_c .MaxInt64 ));};type Node interface{Decode (_gf _a .StreamReader )(int64 ,error );
String ()string ;};func _dga (_cdd int32 )*InternalNode {return &InternalNode {_ddd :_cdd }};func (_eca *StandardTable )InitTree (codeTable []*Code )error {_feb (codeTable );for _ ,_ee :=range codeTable {if _edf :=_eca ._baa .append (_ee );_edf !=nil {return _edf ;
};};return nil ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_dg :=&FixedSizeTable {_gd :&InternalNode {}};if _fa :=_dg .InitTree (codeTable );_fa !=nil {return nil ,_fa ;};return _dg ,nil ;};type Code struct{_aba int32 ;_cgbc int32 ;
_fbe int32 ;_dfc bool ;_bba int32 ;};type Tabler interface{Decode (_cca _a .StreamReader )(int64 ,error );InitTree (_da []*Code )error ;String ()string ;RootNode ()*InternalNode ;};var _bae =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_ffa *Code )String ()string {var _dbd string ;if _ffa ._bba !=-1{_dbd =_gaea (_ffa ._bba ,_ffa ._aba );}else {_dbd ="\u003f";};return _db .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_dbd ,_ffa ._aba ,_ffa ._cgbc ,_ffa ._fbe );
};type StandardTable struct{_baa *InternalNode };func (_bg *EncodedTable )InitTree (codeTable []*Code )error {_feb (codeTable );for _ ,_ag :=range codeTable {if _df :=_bg ._ge .append (_ag );_df !=nil {return _df ;};};return nil ;};var _ Node =&InternalNode {};
func (_ef *FixedSizeTable )InitTree (codeTable []*Code )error {_feb (codeTable );for _ ,_fe :=range codeTable {_ggb :=_ef ._gd .append (_fe );if _ggb !=nil {return _ggb ;};};return nil ;};var _dc =make ([]Tabler ,len (_bae ));func (_dd *FixedSizeTable )String ()string {return _dd ._gd .String ()+"\u000a"};
type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_a .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_cf *OutOfBandNode )Decode (r _a .StreamReader )(int64 ,error ){return 0,_g .ErrOOB };var _ Tabler =&EncodedTable {};
func (_ebe *InternalNode )pad (_ade *_f .Builder ){for _dfb :=int32 (0);_dfb < _ebe ._ddd ;_dfb ++{_ade .WriteString ("\u0020\u0020\u0020");};};func (_fca *EncodedTable )Decode (r _a .StreamReader )(int64 ,error ){return _fca ._ge .Decode (r )};func (_ab *StandardTable )Decode (r _a .StreamReader )(int64 ,error ){return _ab ._baa .Decode (r )};
func (_ae *ValueNode )Decode (r _a .StreamReader )(int64 ,error ){_cg ,_ea :=r .ReadBits (byte (_ae ._eg ));if _ea !=nil {return 0,_ea ;};if _ae ._edb {_cg =-_cg ;};return int64 (_ae ._dgb )+int64 (_cg ),nil ;};func (_eb *FixedSizeTable )Decode (r _a .StreamReader )(int64 ,error ){return _eb ._gd .Decode (r )};
func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_aba :prefixLength ,_cgbc :rangeLength ,_fbe :rangeLow ,_dfc :isLowerRange ,_bba :-1};};func _feb (_fg []*Code ){var _geg int32 ;for _ ,_efc :=range _fg {_geg =_bbe (_geg ,_efc ._aba );
};_bda :=make ([]int32 ,_geg +1);for _ ,_cdg :=range _fg {_bda [_cdg ._aba ]++;};var _cab int32 ;_gcc :=make ([]int32 ,len (_bda )+1);_bda [0]=0;for _fageg :=int32 (1);_fageg <=int32 (len (_bda ));_fageg ++{_gcc [_fageg ]=(_gcc [_fageg -1]+(_bda [_fageg -1]))<<1;
_cab =_gcc [_fageg ];for _ ,_aa :=range _fg {if _aa ._aba ==_fageg {_aa ._bba =_cab ;_cab ++;};};};};func (_ca *EncodedTable )RootNode ()*InternalNode {return _ca ._ge };var _ Node =&OutOfBandNode {};type ValueNode struct{_eg int32 ;_dgb int32 ;_edb bool ;
};