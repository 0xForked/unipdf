//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_a "errors";_f "fmt";_c "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_d "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_fc "io";);const (_dcb int =1024<<7;_fac int =3;_bca uint =24;);func (_geg *Decoder )UncompressMMR ()(_bc *_d .Bitmap ,_cgb error ){_bc =_d .New (_geg ._fda ,_geg ._ega );
_ae :=make ([]int ,_bc .Width +5);_gbd :=make ([]int ,_bc .Width +5);_gbd [0]=_bc .Width ;_dde :=1;var _fce int ;for _cf :=0;_cf < _bc .Height ;_cf ++{_fce ,_cgb =_geg .uncompress2d (_geg ._gcc ,_gbd ,_dde ,_ae ,_bc .Width );if _cgb !=nil {return nil ,_cgb ;
};if _fce ==EOF {break ;};if _fce > 0{_cgb =_geg .fillBitmap (_bc ,_cf ,_ae ,_fce );if _cgb !=nil {return nil ,_cgb ;};};_gbd ,_ae =_ae ,_gbd ;_dde =_fce ;};if _cgb =_geg .detectAndSkipEOL ();_cgb !=nil {return nil ,_cgb ;};_geg ._gcc .align ();return _bc ,nil ;
};func _b (_gc [3]int )*code {return &code {_cc :_gc [0],_de :_gc [1],_ed :_gc [2]}};func (_eae *Decoder )initTables ()(_ff error ){if _eae ._daf ==nil {_eae ._daf ,_ff =_eae .createLittleEndianTable (_fe );if _ff !=nil {return ;};_eae ._egg ,_ff =_eae .createLittleEndianTable (_gfc );
if _ff !=nil {return ;};_eae ._gfd ,_ff =_eae .createLittleEndianTable (_gae );if _ff !=nil {return ;};};return nil ;};func (_fdf *Decoder )detectAndSkipEOL ()error {for {_egb ,_bbg :=_fdf ._gcc .uncompressGetCode (_fdf ._gfd );if _bbg !=nil {return _bbg ;
};if _egb !=nil &&_egb ._ed ==EOL {_fdf ._gcc ._cfd +=_egb ._cc ;}else {return nil ;};};};func (_cd *code )String ()string {return _f .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cd ._cc ,_cd ._de ,_cd ._ed );};const (_ebb mmrCode =iota ;
_fa ;_da ;_adg ;_ce ;_db ;_bd ;_fcd ;_ef ;_fag ;_fd ;);func (_ccc *Decoder )createLittleEndianTable (_ddf [][3]int )([]*code ,error ){_fea :=make ([]*code ,_gg +1);for _faa :=0;_faa < len (_ddf );_faa ++{_egaf :=_b (_ddf [_faa ]);if _egaf ._cc <=_af {_bb :=_af -_egaf ._cc ;
_cdd :=_egaf ._de <<uint (_bb );for _fg :=(1<<uint (_bb ))-1;_fg >=0;_fg --{_ab :=_cdd |_fg ;_fea [_ab ]=_egaf ;};}else {_gaeb :=_egaf ._de >>uint (_egaf ._cc -_af );if _fea [_gaeb ]==nil {var _gdf =_b ([3]int {});_gdf ._eb =make ([]*code ,_gb +1);_fea [_gaeb ]=_gdf ;
};if _egaf ._cc <=_af +_dd {_ea :=_af +_dd -_egaf ._cc ;_ceg :=(_egaf ._de <<uint (_ea ))&_gb ;_fea [_gaeb ]._cb =true ;for _eef :=(1<<uint (_ea ))-1;_eef >=0;_eef --{_fea [_gaeb ]._eb [_ceg |_eef ]=_egaf ;};}else {return nil ,_a .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _fea ,nil ;};func _cbc (_fcb *_e .Reader )(*runData ,error ){_efc :=&runData {_bg :_fcb ,_cfd :0,_be :1};_gddb :=_ac (_ad (_fac ,int (_fcb .Length ())),_dcb );_efc ._feb =make ([]byte ,_gddb );if _dag :=_efc .fillBuffer (0);_dag !=nil {if _dag ==_fc .EOF {_efc ._feb =make ([]byte ,10);
_c .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_dag );}else {return nil ,_dag ;};};return _efc ,nil ;};func (_deec *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_ecb :=_deec ._cfd -_deec ._be ;
if _ecb < 0||_ecb > 24{_ffd :=(_deec ._cfd >>3)-_deec ._bde ;if _ffd >=_deec ._fef {_ffd +=_deec ._bde ;if _ada :=_deec .fillBuffer (_ffd );_ada !=nil {return 0,_ada ;};_ffd -=_deec ._bde ;};_aaf :=(uint32 (_deec ._feb [_ffd ]&0xFF)<<16)|(uint32 (_deec ._feb [_ffd +1]&0xFF)<<8)|(uint32 (_deec ._feb [_ffd +2]&0xFF));
_dfbc :=uint32 (_deec ._cfd &7);_aaf <<=_dfbc ;_deec ._aab =int (_aaf );}else {_ag :=_deec ._be &7;_aea :=7-_ag ;if _ecb <=_aea {_deec ._aab <<=uint (_ecb );}else {_fdab :=(_deec ._be >>3)+3-_deec ._bde ;if _fdab >=_deec ._fef {_fdab +=_deec ._bde ;if _ace :=_deec .fillBuffer (_fdab );
_ace !=nil {return 0,_ace ;};_fdab -=_deec ._bde ;};_ag =8-_ag ;for {_deec ._aab <<=uint (_ag );_deec ._aab |=int (uint (_deec ._feb [_fdab ])&0xFF);_ecb -=_ag ;_fdab ++;_ag =8;if !(_ecb >=8){break ;};};_deec ._aab <<=uint (_ecb );};};_deec ._be =_deec ._cfd ;
return _deec ._aab ,nil ;};type Decoder struct{_fda ,_ega int ;_gcc *runData ;_daf []*code ;_egg []*code ;_gfd []*code ;};func _ad (_gd ,_ec int )int {if _gd < _ec {return _ec ;};return _gd ;};const (EOF =-3;_gf =-2;EOL =-1;_af =8;_gg =(1<<_af )-1;_dd =5;
_gb =(1<<_dd )-1;);var (_gae =[][3]int {{4,0x1,int (_ebb )},{3,0x1,int (_fa )},{1,0x1,int (_da )},{3,0x3,int (_adg )},{6,0x3,int (_ce )},{7,0x3,int (_db )},{3,0x2,int (_bd )},{6,0x2,int (_fcd )},{7,0x2,int (_ef )},{10,0xf,int (_fag )},{12,0xf,int (_fd )},{12,0x1,int (EOL )}};
_fe =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_gf },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_gf },{11,0x01,_gf },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_gfc =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_gf },{9,0x18,15},{10,0x01,_gf },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_gf },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_cec *runData )uncompressGetCodeLittleEndian (_bcbc []*code )(*code ,error ){_eda ,_efce :=_cec .uncompressGetNextCodeLittleEndian ();if _efce !=nil {_c .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_efce );
return nil ,_efce ;};_eda &=0xffffff;_fec :=_eda >>(_bca -_af );_bbgf :=_bcbc [_fec ];if _bbgf !=nil &&_bbgf ._cb {_fec =(_eda >>(_bca -_af -_dd ))&_gb ;_bbgf =_bbgf ._eb [_fec ];};return _bbgf ,nil ;};func New (r *_e .Reader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_ee :=&Decoder {_fda :width ,_ega :height };
_fee ,_cdg :=r .NewPartialReader (int (dataOffset ),int (dataLength ),false );if _cdg !=nil {return nil ,_cdg ;};_cg ,_cdg :=_cbc (_fee );if _cdg !=nil {return nil ,_cdg ;};_ ,_cdg =r .Seek (_fee .RelativePosition (),_fc .SeekCurrent );if _cdg !=nil {return nil ,_cdg ;
};_ee ._gcc =_cg ;if _gge :=_ee .initTables ();_gge !=nil {return nil ,_gge ;};return _ee ,nil ;};func (_deg *Decoder )fillBitmap (_ba *_d .Bitmap ,_ca int ,_eea []int ,_ccb int )error {var _gce byte ;_cfe :=0;_dbf :=_ba .GetByteIndex (_cfe ,_ca );for _cef :=0;
_cef < _ccb ;_cef ++{_dg :=byte (1);_dc :=_eea [_cef ];if (_cef &1)==0{_dg =0;};for _cfe < _dc {_gce =(_gce <<1)|_dg ;_cfe ++;if (_cfe &7)==0{if _cca :=_ba .SetByte (_dbf ,_gce );_cca !=nil {return _cca ;};_dbf ++;_gce =0;};};};if (_cfe &7)!=0{_gce <<=uint (8-(_cfe &7));
if _edb :=_ba .SetByte (_dbf ,_gce );_edb !=nil {return _edb ;};};return nil ;};func (_cad *Decoder )uncompress2d (_cea *runData ,_afc []int ,_fge int ,_fcdb []int ,_cddd int )(int ,error ){var (_acb int ;_eed int ;_eeb int ;_cce =true ;_bcb error ;_cbg *code ;
);_afc [_fge ]=_cddd ;_afc [_fge +1]=_cddd ;_afc [_fge +2]=_cddd +1;_afc [_fge +3]=_cddd +1;_eefd :for _eeb < _cddd {_cbg ,_bcb =_cea .uncompressGetCode (_cad ._gfd );if _bcb !=nil {return EOL ,nil ;};if _cbg ==nil {_cea ._cfd ++;break _eefd ;};_cea ._cfd +=_cbg ._cc ;
switch mmrCode (_cbg ._ed ){case _da :_eeb =_afc [_acb ];case _adg :_eeb =_afc [_acb ]+1;case _bd :_eeb =_afc [_acb ]-1;case _fa :for {var _fff []*code ;if _cce {_fff =_cad ._daf ;}else {_fff =_cad ._egg ;};_cbg ,_bcb =_cea .uncompressGetCode (_fff );if _bcb !=nil {return 0,_bcb ;
};if _cbg ==nil {break _eefd ;};_cea ._cfd +=_cbg ._cc ;if _cbg ._ed < 64{if _cbg ._ed < 0{_fcdb [_eed ]=_eeb ;_eed ++;_cbg =nil ;break _eefd ;};_eeb +=_cbg ._ed ;_fcdb [_eed ]=_eeb ;_eed ++;break ;};_eeb +=_cbg ._ed ;};_dfa :=_eeb ;_dfb :for {var _fbb []*code ;
if !_cce {_fbb =_cad ._daf ;}else {_fbb =_cad ._egg ;};_cbg ,_bcb =_cea .uncompressGetCode (_fbb );if _bcb !=nil {return 0,_bcb ;};if _cbg ==nil {break _eefd ;};_cea ._cfd +=_cbg ._cc ;if _cbg ._ed < 64{if _cbg ._ed < 0{_fcdb [_eed ]=_eeb ;_eed ++;break _eefd ;
};_eeb +=_cbg ._ed ;if _eeb < _cddd ||_eeb !=_dfa {_fcdb [_eed ]=_eeb ;_eed ++;};break _dfb ;};_eeb +=_cbg ._ed ;};for _eeb < _cddd &&_afc [_acb ]<=_eeb {_acb +=2;};continue _eefd ;case _ebb :_acb ++;_eeb =_afc [_acb ];_acb ++;continue _eefd ;case _ce :_eeb =_afc [_acb ]+2;
case _fcd :_eeb =_afc [_acb ]-2;case _db :_eeb =_afc [_acb ]+3;case _ef :_eeb =_afc [_acb ]-3;default:if _cea ._cfd ==12&&_cbg ._ed ==EOL {_cea ._cfd =0;if _ ,_bcb =_cad .uncompress1d (_cea ,_afc ,_cddd );_bcb !=nil {return 0,_bcb ;};_cea ._cfd ++;if _ ,_bcb =_cad .uncompress1d (_cea ,_fcdb ,_cddd );
_bcb !=nil {return 0,_bcb ;};_gag ,_feg :=_cad .uncompress1d (_cea ,_afc ,_cddd );if _feg !=nil {return EOF ,_feg ;};_cea ._cfd ++;return _gag ,nil ;};_eeb =_cddd ;continue _eefd ;};if _eeb <=_cddd {_cce =!_cce ;_fcdb [_eed ]=_eeb ;_eed ++;if _acb > 0{_acb --;
}else {_acb ++;};for _eeb < _cddd &&_afc [_acb ]<=_eeb {_acb +=2;};};};if _fcdb [_eed ]!=_cddd {_fcdb [_eed ]=_cddd ;};if _cbg ==nil {return EOL ,nil ;};return _eed ,nil ;};type runData struct{_bg *_e .Reader ;_cfd int ;_be int ;_aab int ;_feb []byte ;
_bde int ;_fef int ;};func (_cdf *runData )align (){_cdf ._cfd =((_cdf ._cfd +7)>>3)<<3};func (_fb *Decoder )uncompress1d (_gfa *runData ,_dee []int ,_ggeg int )(int ,error ){var (_bf =true ;_ggb int ;_gdd *code ;_cfef int ;_df error ;);_aa :for _ggb < _ggeg {_bag :for {if _bf {_gdd ,_df =_gfa .uncompressGetCode (_fb ._daf );
if _df !=nil {return 0,_df ;};}else {_gdd ,_df =_gfa .uncompressGetCode (_fb ._egg );if _df !=nil {return 0,_df ;};};_gfa ._cfd +=_gdd ._cc ;if _gdd ._ed < 0{break _aa ;};_ggb +=_gdd ._ed ;if _gdd ._ed < 64{_bf =!_bf ;_dee [_cfef ]=_ggb ;_cfef ++;break _bag ;
};};};if _dee [_cfef ]!=_ggeg {_dee [_cfef ]=_ggeg ;};_eaa :=EOL ;if _gdd !=nil &&_gdd ._ed !=EOL {_eaa =_cfef ;};return _eaa ,nil ;};func _ac (_eg ,_ga int )int {if _eg > _ga {return _ga ;};return _eg ;};type mmrCode int ;func (_dcf *runData )uncompressGetCode (_ebf []*code )(*code ,error ){return _dcf .uncompressGetCodeLittleEndian (_ebf );
};func (_bec *runData )fillBuffer (_dbfc int )error {_bec ._bde =_dbfc ;_ ,_aed :=_bec ._bg .Seek (int64 (_dbfc ),_fc .SeekStart );if _aed !=nil {if _aed ==_fc .EOF {_c .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_bec ._fef =-1;}else {return _aed ;
};};if _aed ==nil {_bec ._fef ,_aed =_bec ._bg .Read (_bec ._feb );if _aed !=nil {if _aed ==_fc .EOF {_c .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_bec ._fef =-1;}else {return _aed ;};};};if _bec ._fef > -1&&_bec ._fef < 3{for _bec ._fef < 3{_aeb ,_bge :=_bec ._bg .ReadByte ();
if _bge !=nil {if _bge ==_fc .EOF {_bec ._feb [_bec ._fef ]=0;}else {return _bge ;};}else {_bec ._feb [_bec ._fef ]=_aeb &0xFF;};_bec ._fef ++;};};_bec ._fef -=3;if _bec ._fef < 0{_bec ._feb =make ([]byte ,len (_bec ._feb ));_bec ._fef =len (_bec ._feb )-3;
};return nil ;};type code struct{_cc int ;_de int ;_ed int ;_eb []*code ;_cb bool ;};