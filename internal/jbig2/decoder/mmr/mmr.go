//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_d "errors";_f "fmt";_a "github.com/unidoc/unipdf/v3/common";_df "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_b "io";);func (_bd *code )String ()string {return _f .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bd ._fc ,_bd ._eb ,_bd ._be );};func (_fcd *Decoder )fillBitmap (_ebf *_e .Bitmap ,_cec int ,_gfa []int ,_cfg int )error {var _aag byte ;_fge :=0;_dge :=_ebf .GetByteIndex (_fge ,_cec );for _ec :=0;_ec < _cfg ;_ec ++{_ceg :=byte (1);_ddg :=_gfa [_ec ];if (_ec &1)==0{_ceg =0;};for _fge < _ddg {_aag =(_aag <<1)|_ceg ;_fge ++;if (_fge &7)==0{if _gbg :=_ebf .SetByte (_dge ,_aag );_gbg !=nil {return _gbg ;};_dge ++;_aag =0;};};};if (_fge &7)!=0{_aag <<=uint (8-(_fge &7));if _ffd :=_ebf .SetByte (_dge ,_aag );_ffd !=nil {return _ffd ;};};return nil ;};func (_degb *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_bac :=_degb ._gbb -_degb ._ecba ;if _bac < 0||_bac > 24{_fbc :=(_degb ._gbb >>3)-_degb ._bda ;if _fbc >=_degb ._fab {_fbc +=_degb ._bda ;if _dff :=_degb .fillBuffer (_fbc );_dff !=nil {return 0,_dff ;};_fbc -=_degb ._bda ;};_bce :=(uint32 (_degb ._eed [_fbc ]&0xFF)<<16)|(uint32 (_degb ._eed [_fbc +1]&0xFF)<<8)|(uint32 (_degb ._eed [_fbc +2]&0xFF));_gde :=uint32 (_degb ._gbb &7);_bce <<=_gde ;_degb ._afa =int (_bce );}else {_abb :=_degb ._ecba &7;_fae :=7-_abb ;if _bac <=_fae {_degb ._afa <<=uint (_bac );}else {_ecg :=(_degb ._ecba >>3)+3-_degb ._bda ;if _ecg >=_degb ._fab {_ecg +=_degb ._bda ;if _ddc :=_degb .fillBuffer (_ecg );_ddc !=nil {return 0,_ddc ;};_ecg -=_degb ._bda ;};_abb =8-_abb ;for {_degb ._afa <<=uint (_abb );_degb ._afa |=int (uint (_degb ._eed [_ecg ])&0xFF);_bac -=_abb ;_ecg ++;_abb =8;if !(_bac >=8){break ;};};_degb ._afa <<=uint (_bac );};};_degb ._ecba =_degb ._gbb ;return _degb ._afa ,nil ;};type Decoder struct{_bf ,_afb int ;_dc *runData ;_gcc []*code ;_fg []*code ;_dfb []*code ;};func _ef (_fe ,_ce int )int {if _fe < _ce {return _ce ;};return _fe ;};const (_bc mmrCode =iota ;_db ;_dg ;_g ;_dbg ;_fd ;_dba ;_gb ;_af ;_gc ;_gd ;);func _aad (_dd ,_dfc int )int {if _dd > _dfc {return _dfc ;};return _dd ;};type mmrCode int ;func (_gbc *Decoder )initTables ()(_ecb error ){if _gbc ._gcc ==nil {_gbc ._gcc ,_ecb =_gbc .createLittleEndianTable (_efd );if _ecb !=nil {return ;};_gbc ._fg ,_ecb =_gbc .createLittleEndianTable (_ga );if _ecb !=nil {return ;};_gbc ._dfb ,_ecb =_gbc .createLittleEndianTable (_cb );if _ecb !=nil {return ;};};return nil ;};func (_adf *Decoder )UncompressMMR ()(_aga *_e .Bitmap ,_dda error ){_aga =_e .New (_adf ._bf ,_adf ._afb );_gdc :=make ([]int ,_aga .Width +5);_deb :=make ([]int ,_aga .Width +5);_deb [0]=_aga .Width ;_ab :=1;var _dbe int ;for _fed :=0;_fed < _aga .Height ;_fed ++{_dbe ,_dda =_adf .uncompress2d (_adf ._dc ,_deb ,_ab ,_gdc ,_aga .Width );if _dda !=nil {return nil ,_dda ;};if _dbe ==EOF {break ;};if _dbe > 0{_dda =_adf .fillBitmap (_aga ,_fed ,_gdc ,_dbe );if _dda !=nil {return nil ,_dda ;};};_deb ,_gdc =_gdc ,_deb ;_ab =_dbe ;};if _dda =_adf .detectAndSkipEOL ();_dda !=nil {return nil ,_dda ;};_adf ._dc .align ();return _aga ,nil ;};func (_gdg *runData )fillBuffer (_eec int )error {_gdg ._bda =_eec ;_ ,_bcc :=_gdg ._gg .Seek (int64 (_eec ),_b .SeekStart );if _bcc !=nil {if _bcc ==_b .EOF {_a .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_gdg ._fab =-1;}else {return _bcc ;};};if _bcc ==nil {_gdg ._fab ,_bcc =_gdg ._gg .Read (_gdg ._eed );if _bcc !=nil {if _bcc ==_b .EOF {_a .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_gdg ._fab =-1;}else {return _bcc ;};};};if _gdg ._fab > -1&&_gdg ._fab < 3{for _gdg ._fab < 3{_aea ,_faa :=_gdg ._gg .ReadByte ();if _faa !=nil {if _faa ==_b .EOF {_gdg ._eed [_gdg ._fab ]=0;}else {return _faa ;};}else {_gdg ._eed [_gdg ._fab ]=_aea &0xFF;};_gdg ._fab ++;};};_gdg ._fab -=3;if _gdg ._fab < 0{_gdg ._eed =make ([]byte ,len (_gdg ._eed ));_gdg ._fab =len (_gdg ._eed )-3;};return nil ;};func _ee (_ff [3]int )*code {return &code {_fc :_ff [0],_eb :_ff [1],_be :_ff [2]}};func (_gfc *Decoder )uncompress2d (_cce *runData ,_dbc []int ,_cbb int ,_gbce []int ,_gbd int )(int ,error ){var (_afe int ;_fdb int ;_ca int ;_fdg =true ;_fdf error ;_fb *code ;);_dbc [_cbb ]=_gbd ;_dbc [_cbb +1]=_gbd ;_dbc [_cbb +2]=_gbd +1;_dbc [_cbb +3]=_gbd +1;_gccc :for _ca < _gbd {_fb ,_fdf =_cce .uncompressGetCode (_gfc ._dfb );if _fdf !=nil {return EOL ,nil ;};if _fb ==nil {_cce ._gbb ++;break _gccc ;};_cce ._gbb +=_fb ._fc ;switch mmrCode (_fb ._be ){case _dg :_ca =_dbc [_afe ];case _g :_ca =_dbc [_afe ]+1;case _dba :_ca =_dbc [_afe ]-1;case _db :_fcga :=1;for _fcga > 0{var _dde []*code ;if _fdg {_dde =_gfc ._gcc ;}else {_dde =_gfc ._fg ;};_fb ,_fdf =_cce .uncompressGetCode (_dde );if _fdf !=nil {return 0,_fdf ;};if _fb ==nil {break _gccc ;};_cce ._gbb +=_fb ._fc ;if _fb ._be < 64{if _fb ._be < 0{_gbce [_fdb ]=_ca ;_fdb ++;_fb =nil ;break _gccc ;};_ca +=_fb ._be ;_gbce [_fdb ]=_ca ;_fdb ++;break ;};_ca +=_fb ._be ;};_fgaa :=_ca ;_bb :=1;_dcbe :for _bb > 0{var _dae []*code ;if !_fdg {_dae =_gfc ._gcc ;}else {_dae =_gfc ._fg ;};_fb ,_fdf =_cce .uncompressGetCode (_dae );if _fdf !=nil {return 0,_fdf ;};if _fb ==nil {break _gccc ;};_cce ._gbb +=_fb ._fc ;if _fb ._be < 64{if _fb ._be < 0{_gbce [_fdb ]=_ca ;_fdb ++;break _gccc ;};_ca +=_fb ._be ;if _ca < _gbd ||_ca !=_fgaa {_gbce [_fdb ]=_ca ;_fdb ++;};break _dcbe ;};_ca +=_fb ._be ;};for _ca < _gbd &&_dbc [_afe ]<=_ca {_afe +=2;};continue _gccc ;case _bc :_afe ++;_ca =_dbc [_afe ];_afe ++;continue _gccc ;case _dbg :_ca =_dbc [_afe ]+2;case _gb :_ca =_dbc [_afe ]-2;case _fd :_ca =_dbc [_afe ]+3;case _af :_ca =_dbc [_afe ]-3;default:if _cce ._gbb ==12&&_fb ._be ==EOL {_cce ._gbb =0;if _ ,_fdf =_gfc .uncompress1d (_cce ,_dbc ,_gbd );_fdf !=nil {return 0,_fdf ;};_cce ._gbb ++;if _ ,_fdf =_gfc .uncompress1d (_cce ,_gbce ,_gbd );_fdf !=nil {return 0,_fdf ;};_gad ,_ded :=_gfc .uncompress1d (_cce ,_dbc ,_gbd );if _ded !=nil {return EOF ,_ded ;};_cce ._gbb ++;return _gad ,nil ;};_ca =_gbd ;continue _gccc ;};if _ca <=_gbd {_fdg =!_fdg ;_gbce [_fdb ]=_ca ;_fdb ++;if _afe > 0{_afe --;}else {_afe ++;};for _ca < _gbd &&_dbc [_afe ]<=_ca {_afe +=2;};};};if _gbce [_fdb ]!=_gbd {_gbce [_fdb ]=_gbd ;};if _fb ==nil {return EOL ,nil ;};return _fdb ,nil ;};func New (r _df .StreamReader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_bdf :=&Decoder {_bf :width ,_afb :height };_ag ,_ad :=_df .NewSubstreamReader (r ,uint64 (dataOffset ),uint64 (dataLength ));if _ad !=nil {return nil ,_ad ;};_de ,_ad :=_adec (_ag );if _ad !=nil {return nil ,_ad ;};_bdf ._dc =_de ;if _dcb :=_bdf .initTables ();_dcb !=nil {return nil ,_dcb ;};return _bdf ,nil ;};type code struct{_fc int ;_eb int ;_be int ;_ba []*code ;_aa bool ;};func (_gf *Decoder )createLittleEndianTable (_gac [][3]int )([]*code ,error ){_fde :=make ([]*code ,_beb +1);for _gfd :=0;_gfd < len (_gac );_gfd ++{_bg :=_ee (_gac [_gfd ]);if _bg ._fc <=_ae {_ade :=_ae -_bg ._fc ;_ddb :=_bg ._eb <<uint (_ade );for _bfg :=(1<<uint (_ade ))-1;_bfg >=0;_bfg --{_ea :=_ddb |_bfg ;_fde [_ea ]=_bg ;};}else {_efdb :=_bg ._eb >>uint (_bg ._fc -_ae );if _fde [_efdb ]==nil {var _da =_ee ([3]int {});_da ._ba =make ([]*code ,_dfg +1);_fde [_efdb ]=_da ;};if _bg ._fc <=_ae +_cg {_gcf :=_ae +_cg -_bg ._fc ;_cf :=(_bg ._eb <<uint (_gcf ))&_dfg ;_fde [_efdb ]._aa =true ;for _deba :=(1<<uint (_gcf ))-1;_deba >=0;_deba --{_fde [_efdb ]._ba [_cf |_deba ]=_bg ;};}else {return nil ,_d .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");};};};return _fde ,nil ;};func (_ega *runData )uncompressGetCode (_eba []*code )(*code ,error ){return _ega .uncompressGetCodeLittleEndian (_eba );};func (_deg *Decoder )uncompress1d (_ed *runData ,_fgc []int ,_cbg int )(int ,error ){var (_fcg =true ;_cc int ;_cfa *code ;_bgb int ;_fa error ;);_egb :for _cc < _cbg {_dcbb :for {if _fcg {_cfa ,_fa =_ed .uncompressGetCode (_deg ._gcc );if _fa !=nil {return 0,_fa ;};}else {_cfa ,_fa =_ed .uncompressGetCode (_deg ._fg );if _fa !=nil {return 0,_fa ;};};_ed ._gbb +=_cfa ._fc ;if _cfa ._be < 0{break _egb ;};_cc +=_cfa ._be ;if _cfa ._be < 64{_fcg =!_fcg ;_fgc [_bgb ]=_cc ;_bgb ++;break _dcbb ;};};};if _fgc [_bgb ]!=_cbg {_fgc [_bgb ]=_cbg ;};_adb :=EOL ;if _cfa !=nil &&_cfa ._be !=EOL {_adb =_bgb ;};return _adb ,nil ;};func (_ffdd *runData )align (){_ffdd ._gbb =((_ffdd ._gbb +7)>>3)<<3};const (EOF =-3;_eg =-2;EOL =-1;_ae =8;_beb =(1<<_ae )-1;_cg =5;_dfg =(1<<_cg )-1;);func (_agcc *runData )uncompressGetCodeLittleEndian (_fgg []*code )(*code ,error ){_ac ,_aeg :=_agcc .uncompressGetNextCodeLittleEndian ();if _aeg !=nil {_a .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_aeg );return nil ,_aeg ;};_ac &=0xffffff;_eae :=_ac >>(_agc -_ae );_aae :=_fgg [_eae ];if _aae !=nil &&_aae ._aa {_eae =(_ac >>(_agc -_ae -_cg ))&_dfg ;_aae =_aae ._ba [_eae ];};return _aae ,nil ;};const (_fdc int =1024<<7;_gfdf int =3;_agc uint =24;);var (_cb =[][3]int {{4,0x1,int (_bc )},{3,0x1,int (_db )},{1,0x1,int (_dg )},{3,0x3,int (_g )},{6,0x3,int (_dbg )},{7,0x3,int (_fd )},{3,0x2,int (_dba )},{6,0x2,int (_gb )},{7,0x2,int (_af )},{10,0xf,int (_gc )},{12,0xf,int (_gd )},{12,0x1,int (EOL )}};_efd =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_eg },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_eg },{11,0x01,_eg },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};_ga =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_eg },{9,0x18,15},{10,0x01,_eg },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_eg },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};);func _adec (_eag *_df .SubstreamReader )(*runData ,error ){_faf :=&runData {_gg :_eag ,_gbb :0,_ecba :1};_dgd :=_aad (_ef (_gfdf ,int (_eag .Length ())),_fdc );_faf ._eed =make ([]byte ,_dgd );if _ggb :=_faf .fillBuffer (0);_ggb !=nil {if _ggb ==_b .EOF {_faf ._eed =make ([]byte ,10);_a .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_ggb );}else {return nil ,_ggb ;};};return _faf ,nil ;};type runData struct{_gg *_df .SubstreamReader ;_gbb int ;_ecba int ;_afa int ;_eed []byte ;_bda int ;_fab int ;};func (_fga *Decoder )detectAndSkipEOL ()error {for {_cgb ,_dbf :=_fga ._dc .uncompressGetCode (_fga ._dfb );if _dbf !=nil {return _dbf ;};if _cgb !=nil &&_cgb ._be ==EOL {_fga ._dc ._gbb +=_cgb ._fc ;}else {return nil ;};};};