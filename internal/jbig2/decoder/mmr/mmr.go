//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_g "errors";_e "fmt";_ce "github.com/unidoc/unipdf/v3/common";_gf "github.com/unidoc/unipdf/v3/internal/bitwise";_cg "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_c "io";);func (_cbc *runData )fillBuffer (_aga int )error {_cbc ._aba =_aga ;_ ,_cgc :=_cbc ._ed .Seek (int64 (_aga ),_c .SeekStart );if _cgc !=nil {if _cgc ==_c .EOF {_ce .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_cbc ._eca =-1;}else {return _cgc ;};};if _cgc ==nil {_cbc ._eca ,_cgc =_cbc ._ed .Read (_cbc ._bffg );if _cgc !=nil {if _cgc ==_c .EOF {_ce .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_cbc ._eca =-1;}else {return _cgc ;};};};if _cbc ._eca > -1&&_cbc ._eca < 3{for _cbc ._eca < 3{_dab ,_ecfg :=_cbc ._ed .ReadByte ();if _ecfg !=nil {if _ecfg ==_c .EOF {_cbc ._bffg [_cbc ._eca ]=0;}else {return _ecfg ;};}else {_cbc ._bffg [_cbc ._eca ]=_dab &0xFF;};_cbc ._eca ++;};};_cbc ._eca -=3;if _cbc ._eca < 0{_cbc ._bffg =make ([]byte ,len (_cbc ._bffg ));_cbc ._eca =len (_cbc ._bffg )-3;};return nil ;};func _ae (_ggg ,_ee int )int {if _ggg > _ee {return _ee ;};return _ggg ;};func (_ff *Decoder )initTables ()(_fc error ){if _ff ._afb ==nil {_ff ._afb ,_fc =_ff .createLittleEndianTable (_gga );if _fc !=nil {return ;};_ff ._cgf ,_fc =_ff .createLittleEndianTable (_gc );if _fc !=nil {return ;};_ff ._cb ,_fc =_ff .createLittleEndianTable (_bd );if _fc !=nil {return ;};};return nil ;};func (_ccg *runData )align (){_ccg ._bfef =((_ccg ._bfef +7)>>3)<<3};type code struct{_dd int ;_a int ;_b int ;_df []*code ;_db bool ;};func _edf (_ddaa *_gf .SubstreamReader )(*runData ,error ){_eae :=&runData {_ed :_ddaa ,_bfef :0,_aeg :1};_gae :=_ae (_f (_gdc ,int (_ddaa .Length ())),_afcc );_eae ._bffg =make ([]byte ,_gae );if _ddg :=_eae .fillBuffer (0);_ddg !=nil {if _ddg ==_c .EOF {_eae ._bffg =make ([]byte ,10);_ce .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_ddg );}else {return nil ,_ddg ;};};return _eae ,nil ;};type runData struct{_ed *_gf .SubstreamReader ;_bfef int ;_aeg int ;_gff int ;_bffg []byte ;_aba int ;_eca int ;};type Decoder struct{_gfc ,_fd int ;_fg *runData ;_afb []*code ;_cgf []*code ;_cb []*code ;};func (_ggbb *runData )uncompressGetCodeLittleEndian (_dee []*code )(*code ,error ){_edd ,_cfa :=_ggbb .uncompressGetNextCodeLittleEndian ();if _cfa !=nil {_ce .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_cfa );return nil ,_cfa ;};_edd &=0xffffff;_gag :=_edd >>(_efg -_cd );_cdg :=_dee [_gag ];if _cdg !=nil &&_cdg ._db {_gag =(_edd >>(_efg -_cd -_ag ))&_da ;_cdg =_cdg ._df [_gag ];};return _cdg ,nil ;};type mmrCode int ;func (_fcef *runData )uncompressGetCode (_bg []*code )(*code ,error ){return _fcef .uncompressGetCodeLittleEndian (_bg );};func (_ef *Decoder )UncompressMMR ()(_ea *_cg .Bitmap ,_ca error ){_ea =_cg .New (_ef ._gfc ,_ef ._fd );_eb :=make ([]int ,_ea .Width +5);_gaa :=make ([]int ,_ea .Width +5);_gaa [0]=_ea .Width ;_dgb :=1;var _bc int ;for _caf :=0;_caf < _ea .Height ;_caf ++{_bc ,_ca =_ef .uncompress2d (_ef ._fg ,_gaa ,_dgb ,_eb ,_ea .Width );if _ca !=nil {return nil ,_ca ;};if _bc ==EOF {break ;};if _bc > 0{_ca =_ef .fillBitmap (_ea ,_caf ,_eb ,_bc );if _ca !=nil {return nil ,_ca ;};};_gaa ,_eb =_eb ,_gaa ;_dgb =_bc ;};if _ca =_ef .detectAndSkipEOL ();_ca !=nil {return nil ,_ca ;};_ef ._fg .align ();return _ea ,nil ;};func (_gad *Decoder )uncompress2d (_cdd *runData ,_ega []int ,_dbc int ,_agg []int ,_ebd int )(int ,error ){var (_fbg int ;_daa int ;_cgg int ;_ggaa =true ;_daf error ;_ebb *code ;);_ega [_dbc ]=_ebd ;_ega [_dbc +1]=_ebd ;_ega [_dbc +2]=_ebd +1;_ega [_dbc +3]=_ebd +1;_caa :for _cgg < _ebd {_ebb ,_daf =_cdd .uncompressGetCode (_gad ._cb );if _daf !=nil {return EOL ,nil ;};if _ebb ==nil {_cdd ._bfef ++;break _caa ;};_cdd ._bfef +=_ebb ._dd ;switch mmrCode (_ebb ._b ){case _ac :_cgg =_ega [_fbg ];case _af :_cgg =_ega [_fbg ]+1;case _ba :_cgg =_ega [_fbg ]-1;case _gd :_bece :=1;for _bece > 0{var _fdd []*code ;if _ggaa {_fdd =_gad ._afb ;}else {_fdd =_gad ._cgf ;};_ebb ,_daf =_cdd .uncompressGetCode (_fdd );if _daf !=nil {return 0,_daf ;};if _ebb ==nil {break _caa ;};_cdd ._bfef +=_ebb ._dd ;if _ebb ._b < 64{if _ebb ._b < 0{_agg [_daa ]=_cgg ;_daa ++;_ebb =nil ;break _caa ;};_cgg +=_ebb ._b ;_agg [_daa ]=_cgg ;_daa ++;break ;};_cgg +=_ebb ._b ;};_fgeg :=_cgg ;_afc :=1;_gbd :for _afc > 0{var _fce []*code ;if !_ggaa {_fce =_gad ._afb ;}else {_fce =_gad ._cgf ;};_ebb ,_daf =_cdd .uncompressGetCode (_fce );if _daf !=nil {return 0,_daf ;};if _ebb ==nil {break _caa ;};_cdd ._bfef +=_ebb ._dd ;if _ebb ._b < 64{if _ebb ._b < 0{_agg [_daa ]=_cgg ;_daa ++;break _caa ;};_cgg +=_ebb ._b ;if _cgg < _ebd ||_cgg !=_fgeg {_agg [_daa ]=_cgg ;_daa ++;};break _gbd ;};_cgg +=_ebb ._b ;};for _cgg < _ebd &&_ega [_fbg ]<=_cgg {_fbg +=2;};continue _caa ;case _fb :_fbg ++;_cgg =_ega [_fbg ];_fbg ++;continue _caa ;case _be :_cgg =_ega [_fbg ]+2;case _gb :_cgg =_ega [_fbg ]-2;case _bec :_cgg =_ega [_fbg ]+3;case _gbf :_cgg =_ega [_fbg ]-3;default:if _cdd ._bfef ==12&&_ebb ._b ==EOL {_cdd ._bfef =0;if _ ,_daf =_gad .uncompress1d (_cdd ,_ega ,_ebd );_daf !=nil {return 0,_daf ;};_cdd ._bfef ++;if _ ,_daf =_gad .uncompress1d (_cdd ,_agg ,_ebd );_daf !=nil {return 0,_daf ;};_dgba ,_cdc :=_gad .uncompress1d (_cdd ,_ega ,_ebd );if _cdc !=nil {return EOF ,_cdc ;};_cdd ._bfef ++;return _dgba ,nil ;};_cgg =_ebd ;continue _caa ;};if _cgg <=_ebd {_ggaa =!_ggaa ;_agg [_daa ]=_cgg ;_daa ++;if _fbg > 0{_fbg --;}else {_fbg ++;};for _cgg < _ebd &&_ega [_fbg ]<=_cgg {_fbg +=2;};};};if _agg [_daa ]!=_ebd {_agg [_daa ]=_ebd ;};if _ebb ==nil {return EOL ,nil ;};return _daa ,nil ;};func (_dgg *Decoder )fillBitmap (_ddf *_cg .Bitmap ,_eag int ,_cdf []int ,_gbc int )error {var _de byte ;_dcdc :=0;_acaf :=_ddf .GetByteIndex (_dcdc ,_eag );for _cbb :=0;_cbb < _gbc ;_cbb ++{_bda :=byte (1);_fe :=_cdf [_cbb ];if (_cbb &1)==0{_bda =0;};for _dcdc < _fe {_de =(_de <<1)|_bda ;_dcdc ++;if (_dcdc &7)==0{if _bfe :=_ddf .SetByte (_acaf ,_de );_bfe !=nil {return _bfe ;};_acaf ++;_de =0;};};};if (_dcdc &7)!=0{_de <<=uint (8-(_dcdc &7));if _aed :=_ddf .SetByte (_acaf ,_de );_aed !=nil {return _aed ;};};return nil ;};func (_cbe *Decoder )uncompress1d (_gbe *runData ,_cfc []int ,_ec int )(int ,error ){var (_cda =true ;_ecf int ;_eaa *code ;_eeb int ;_feb error ;);_ggf :for _ecf < _ec {_bac :for {if _cda {_eaa ,_feb =_gbe .uncompressGetCode (_cbe ._afb );if _feb !=nil {return 0,_feb ;};}else {_eaa ,_feb =_gbe .uncompressGetCode (_cbe ._cgf );if _feb !=nil {return 0,_feb ;};};_gbe ._bfef +=_eaa ._dd ;if _eaa ._b < 0{break _ggf ;};_ecf +=_eaa ._b ;if _eaa ._b < 64{_cda =!_cda ;_cfc [_eeb ]=_ecf ;_eeb ++;break _bac ;};};};if _cfc [_eeb ]!=_ec {_cfc [_eeb ]=_ec ;};_eac :=EOL ;if _eaa !=nil &&_eaa ._b !=EOL {_eac =_eeb ;};return _eac ,nil ;};const (_afcc int =1024<<7;_gdc int =3;_efg uint =24;);func (_baa *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_febd :=_baa ._bfef -_baa ._aeg ;if _febd < 0||_febd > 24{_ace :=(_baa ._bfef >>3)-_baa ._aba ;if _ace >=_baa ._eca {_ace +=_baa ._aba ;if _agd :=_baa .fillBuffer (_ace );_agd !=nil {return 0,_agd ;};_ace -=_baa ._aba ;};_ecb :=(uint32 (_baa ._bffg [_ace ]&0xFF)<<16)|(uint32 (_baa ._bffg [_ace +1]&0xFF)<<8)|(uint32 (_baa ._bffg [_ace +2]&0xFF));_cbf :=uint32 (_baa ._bfef &7);_ecb <<=_cbf ;_baa ._gff =int (_ecb );}else {_gcc :=_baa ._aeg &7;_cdga :=7-_gcc ;if _febd <=_cdga {_baa ._gff <<=uint (_febd );}else {_abef :=(_baa ._aeg >>3)+3-_baa ._aba ;if _abef >=_baa ._eca {_abef +=_baa ._aba ;if _dba :=_baa .fillBuffer (_abef );_dba !=nil {return 0,_dba ;};_abef -=_baa ._aba ;};_gcc =8-_gcc ;for {_baa ._gff <<=uint (_gcc );_baa ._gff |=int (uint (_baa ._bffg [_abef ])&0xFF);_febd -=_gcc ;_abef ++;_gcc =8;if !(_febd >=8){break ;};};_baa ._gff <<=uint (_febd );};};_baa ._aeg =_baa ._bfef ;return _baa ._gff ,nil ;};const (_fb mmrCode =iota ;_gd ;_ac ;_af ;_be ;_bec ;_ba ;_gb ;_gbf ;_ge ;_dbb ;);const (EOF =-3;_bb =-2;EOL =-1;_cd =8;_abe =(1<<_cd )-1;_ag =5;_da =(1<<_ag )-1;);func _f (_cea ,_ab int )int {if _cea < _ab {return _ab ;};return _cea ;};func New (r _gf .StreamReader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_dg :=&Decoder {_gfc :width ,_fd :height };_eg ,_bf :=_gf .NewSubstreamReader (r ,uint64 (dataOffset ),uint64 (dataLength ));if _bf !=nil {return nil ,_bf ;};_egd ,_bf :=_edf (_eg );if _bf !=nil {return nil ,_bf ;};_dg ._fg =_egd ;if _fa :=_dg .initTables ();_fa !=nil {return nil ,_fa ;};return _dg ,nil ;};func (_ga *code )String ()string {return _e .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_ga ._dd ,_ga ._a ,_ga ._b );};func _gg (_cf [3]int )*code {return &code {_dd :_cf [0],_a :_cf [1],_b :_cf [2]}};func (_ad *Decoder )detectAndSkipEOL ()error {for {_adf ,_dda :=_ad ._fg .uncompressGetCode (_ad ._cb );if _dda !=nil {return _dda ;};if _adf !=nil &&_adf ._b ==EOL {_ad ._fg ._bfef +=_adf ._dd ;}else {return nil ;};};};func (_bbb *Decoder )createLittleEndianTable (_aca [][3]int )([]*code ,error ){_cc :=make ([]*code ,_abe +1);for _fgc :=0;_fgc < len (_aca );_fgc ++{_bdc :=_gg (_aca [_fgc ]);if _bdc ._dd <=_cd {_aef :=_cd -_bdc ._dd ;_cac :=_bdc ._a <<uint (_aef );for _fge :=(1<<uint (_aef ))-1;_fge >=0;_fge --{_aa :=_cac |_fge ;_cc [_aa ]=_bdc ;};}else {_dc :=_bdc ._a >>uint (_bdc ._dd -_cd );if _cc [_dc ]==nil {var _dcd =_gg ([3]int {});_dcd ._df =make ([]*code ,_da +1);_cc [_dc ]=_dcd ;};if _bdc ._dd <=_cd +_ag {_ggb :=_cd +_ag -_bdc ._dd ;_gac :=(_bdc ._a <<uint (_ggb ))&_da ;_cc [_dc ]._db =true ;for _cde :=(1<<uint (_ggb ))-1;_cde >=0;_cde --{_cc [_dc ]._df [_gac |_cde ]=_bdc ;};}else {return nil ,_g .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");};};};return _cc ,nil ;};var (_bd =[][3]int {{4,0x1,int (_fb )},{3,0x1,int (_gd )},{1,0x1,int (_ac )},{3,0x3,int (_af )},{6,0x3,int (_be )},{7,0x3,int (_bec )},{3,0x2,int (_ba )},{6,0x2,int (_gb )},{7,0x2,int (_gbf )},{10,0xf,int (_ge )},{12,0xf,int (_dbb )},{12,0x1,int (EOL )}};_gga =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_bb },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_bb },{11,0x01,_bb },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};_gc =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_bb },{9,0x18,15},{10,0x01,_bb },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_bb },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};);