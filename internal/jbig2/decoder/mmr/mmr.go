//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_da "errors";_c "fmt";_f "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_b "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_ce "io";);func (_dbg *runData )fillBuffer (_bbg int )error {_dbg ._beg =_bbg ;
_ ,_gcb :=_dbg ._faf .Seek (int64 (_bbg ),_ce .SeekStart );if _gcb !=nil {if _gcb ==_ce .EOF {_f .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_dbg ._gca =-1;}else {return _gcb ;};};if _gcb ==nil {_dbg ._gca ,_gcb =_dbg ._faf .Read (_dbg ._fbf );
if _gcb !=nil {if _gcb ==_ce .EOF {_f .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_dbg ._gca =-1;}else {return _gcb ;};};};if _dbg ._gca > -1&&_dbg ._gca < 3{for _dbg ._gca < 3{_fe ,_gde :=_dbg ._faf .ReadByte ();if _gde !=nil {if _gde ==_ce .EOF {_dbg ._fbf [_dbg ._gca ]=0;
}else {return _gde ;};}else {_dbg ._fbf [_dbg ._gca ]=_fe &0xFF;};_dbg ._gca ++;};};_dbg ._gca -=3;if _dbg ._gca < 0{_dbg ._fbf =make ([]byte ,len (_dbg ._fbf ));_dbg ._gca =len (_dbg ._fbf )-3;};return nil ;};func New (r _e .StreamReader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_fd :=&Decoder {_abg :width ,_dbd :height };
_ad ,_cg :=_e .NewSubstreamReader (r ,uint64 (dataOffset ),uint64 (dataLength ));if _cg !=nil {return nil ,_cg ;};_dgcd ,_cg :=_eca (_ad );if _cg !=nil {return nil ,_cg ;};_fd ._ae =_dgcd ;if _fcbc :=_fd .initTables ();_fcbc !=nil {return nil ,_fcbc ;};
return _fd ,nil ;};const (_gg mmrCode =iota ;_cf ;_dg ;_db ;_ca ;_abf ;_cef ;_bd ;_dd ;_ddd ;_caa ;);const (EOF =-3;_eg =-2;EOL =-1;_fba =8;_efd =(1<<_fba )-1;_afb =5;_cbd =(1<<_afb )-1;);func (_efe *Decoder )uncompress2d (_cec *runData ,_dfd []int ,_bb int ,_ddaf []int ,_fce int )(int ,error ){var (_ddde int ;
_ccc int ;_ddb int ;_abb =true ;_gb error ;_fa *code ;);_dfd [_bb ]=_fce ;_dfd [_bb +1]=_fce ;_dfd [_bb +2]=_fce +1;_dfd [_bb +3]=_fce +1;_cad :for _ddb < _fce {_fa ,_gb =_cec .uncompressGetCode (_efe ._ccd );if _gb !=nil {return EOL ,nil ;};if _fa ==nil {_cec ._cfd ++;
break _cad ;};_cec ._cfd +=_fa ._fc ;switch mmrCode (_fa ._cb ){case _dg :_ddb =_dfd [_ddde ];case _db :_ddb =_dfd [_ddde ]+1;case _cef :_ddb =_dfd [_ddde ]-1;case _cf :for {var _aea []*code ;if _abb {_aea =_efe ._dgc ;}else {_aea =_efe ._dgb ;};_fa ,_gb =_cec .uncompressGetCode (_aea );
if _gb !=nil {return 0,_gb ;};if _fa ==nil {break _cad ;};_cec ._cfd +=_fa ._fc ;if _fa ._cb < 64{if _fa ._cb < 0{_ddaf [_ccc ]=_ddb ;_ccc ++;_fa =nil ;break _cad ;};_ddb +=_fa ._cb ;_ddaf [_ccc ]=_ddb ;_ccc ++;break ;};_ddb +=_fa ._cb ;};_dcb :=_ddb ;
_dfg :for {var _cefb []*code ;if !_abb {_cefb =_efe ._dgc ;}else {_cefb =_efe ._dgb ;};_fa ,_gb =_cec .uncompressGetCode (_cefb );if _gb !=nil {return 0,_gb ;};if _fa ==nil {break _cad ;};_cec ._cfd +=_fa ._fc ;if _fa ._cb < 64{if _fa ._cb < 0{_ddaf [_ccc ]=_ddb ;
_ccc ++;break _cad ;};_ddb +=_fa ._cb ;if _ddb < _fce ||_ddb !=_dcb {_ddaf [_ccc ]=_ddb ;_ccc ++;};break _dfg ;};_ddb +=_fa ._cb ;};for _ddb < _fce &&_dfd [_ddde ]<=_ddb {_ddde +=2;};continue _cad ;case _gg :_ddde ++;_ddb =_dfd [_ddde ];_ddde ++;continue _cad ;
case _ca :_ddb =_dfd [_ddde ]+2;case _bd :_ddb =_dfd [_ddde ]-2;case _abf :_ddb =_dfd [_ddde ]+3;case _dd :_ddb =_dfd [_ddde ]-3;default:if _cec ._cfd ==12&&_fa ._cb ==EOL {_cec ._cfd =0;if _ ,_gb =_efe .uncompress1d (_cec ,_dfd ,_fce );_gb !=nil {return 0,_gb ;
};_cec ._cfd ++;if _ ,_gb =_efe .uncompress1d (_cec ,_ddaf ,_fce );_gb !=nil {return 0,_gb ;};_cag ,_edd :=_efe .uncompress1d (_cec ,_dfd ,_fce );if _edd !=nil {return EOF ,_edd ;};_cec ._cfd ++;return _cag ,nil ;};_ddb =_fce ;continue _cad ;};if _ddb <=_fce {_abb =!_abb ;
_ddaf [_ccc ]=_ddb ;_ccc ++;if _ddde > 0{_ddde --;}else {_ddde ++;};for _ddb < _fce &&_dfd [_ddde ]<=_ddb {_ddde +=2;};};};if _ddaf [_ccc ]!=_fce {_ddaf [_ccc ]=_fce ;};if _fa ==nil {return EOL ,nil ;};return _ccc ,nil ;};var (_ecg =[][3]int {{4,0x1,int (_gg )},{3,0x1,int (_cf )},{1,0x1,int (_dg )},{3,0x3,int (_db )},{6,0x3,int (_ca )},{7,0x3,int (_abf )},{3,0x2,int (_cef )},{6,0x2,int (_bd )},{7,0x2,int (_dd )},{10,0xf,int (_ddd )},{12,0xf,int (_caa )},{12,0x1,int (EOL )}};
_afa =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_eg },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_eg },{11,0x01,_eg },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_bg =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_eg },{9,0x18,15},{10,0x01,_eg },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_eg },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_gbd *runData )uncompressGetCodeLittleEndian (_bcga []*code )(*code ,error ){_dfdb ,_bbf :=_gbd .uncompressGetNextCodeLittleEndian ();if _bbf !=nil {_f .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_bbf );
return nil ,_bbf ;};_dfdb &=0xffffff;_efg :=_dfdb >>(_dfe -_fba );_cefbe :=_bcga [_efg ];if _cefbe !=nil &&_cefbe ._ef {_efg =(_dfdb >>(_dfe -_fba -_afb ))&_cbd ;_cefbe =_cefbe ._a [_efg ];};return _cefbe ,nil ;};func (_gef *Decoder )initTables ()(_ddf error ){if _gef ._dgc ==nil {_gef ._dgc ,_ddf =_gef .createLittleEndianTable (_afa );
if _ddf !=nil {return ;};_gef ._dgb ,_ddf =_gef .createLittleEndianTable (_bg );if _ddf !=nil {return ;};_gef ._ccd ,_ddf =_gef .createLittleEndianTable (_ecg );if _ddf !=nil {return ;};};return nil ;};func (_ebb *Decoder )detectAndSkipEOL ()error {for {_df ,_afd :=_ebb ._ae .uncompressGetCode (_ebb ._ccd );
if _afd !=nil {return _afd ;};if _df !=nil &&_df ._cb ==EOL {_ebb ._ae ._cfd +=_df ._fc ;}else {return nil ;};};};func (_ede *Decoder )createLittleEndianTable (_dc [][3]int )([]*code ,error ){_ba :=make ([]*code ,_efd +1);for _bcg :=0;_bcg < len (_dc );
_bcg ++{_cac :=_fcb (_dc [_bcg ]);if _cac ._fc <=_fba {_ebd :=_fba -_cac ._fc ;_de :=_cac ._fb <<uint (_ebd );for _gf :=(1<<uint (_ebd ))-1;_gf >=0;_gf --{_dcd :=_de |_gf ;_ba [_dcd ]=_cac ;};}else {_ge :=_cac ._fb >>uint (_cac ._fc -_fba );if _ba [_ge ]==nil {var _dda =_fcb ([3]int {});
_dda ._a =make ([]*code ,_cbd +1);_ba [_ge ]=_dda ;};if _cac ._fc <=_fba +_afb {_abgc :=_fba +_afb -_cac ._fc ;_cd :=(_cac ._fb <<uint (_abgc ))&_cbd ;_ba [_ge ]._ef =true ;for _be :=(1<<uint (_abgc ))-1;_be >=0;_be --{_ba [_ge ]._a [_cd |_be ]=_cac ;};
}else {return nil ,_da .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");};};};return _ba ,nil ;};func _g (_abc ,_ec int )int {if _abc > _ec {return _ec ;
};return _abc ;};func (_cbdc *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_cbc :=_cbdc ._cfd -_cbdc ._gaf ;if _cbc < 0||_cbc > 24{_ada :=(_cbdc ._cfd >>3)-_cbdc ._beg ;if _ada >=_cbdc ._gca {_ada +=_cbdc ._beg ;if _gec :=_cbdc .fillBuffer (_ada );
_gec !=nil {return 0,_gec ;};_ada -=_cbdc ._beg ;};_cddb :=(uint32 (_cbdc ._fbf [_ada ]&0xFF)<<16)|(uint32 (_cbdc ._fbf [_ada +1]&0xFF)<<8)|(uint32 (_cbdc ._fbf [_ada +2]&0xFF));_gga :=uint32 (_cbdc ._cfd &7);_cddb <<=_gga ;_cbdc ._ffb =int (_cddb );}else {_afc :=_cbdc ._gaf &7;
_gfd :=7-_afc ;if _cbc <=_gfd {_cbdc ._ffb <<=uint (_cbc );}else {_daa :=(_cbdc ._gaf >>3)+3-_cbdc ._beg ;if _daa >=_cbdc ._gca {_daa +=_cbdc ._beg ;if _cca :=_cbdc .fillBuffer (_daa );_cca !=nil {return 0,_cca ;};_daa -=_cbdc ._beg ;};_afc =8-_afc ;for {_cbdc ._ffb <<=uint (_afc );
_cbdc ._ffb |=int (uint (_cbdc ._fbf [_daa ])&0xFF);_cbc -=_afc ;_daa ++;_afc =8;if !(_cbc >=8){break ;};};_cbdc ._ffb <<=uint (_cbc );};};_cbdc ._gaf =_cbdc ._cfd ;return _cbdc ._ffb ,nil ;};func _daf (_cc ,_ab int )int {if _cc < _ab {return _ab ;};return _cc ;
};type Decoder struct{_abg ,_dbd int ;_ae *runData ;_dgc []*code ;_dgb []*code ;_ccd []*code ;};type code struct{_fc int ;_fb int ;_cb int ;_a []*code ;_ef bool ;};func (_ee *Decoder )UncompressMMR ()(_bc *_b .Bitmap ,_bf error ){_bc =_b .New (_ee ._abg ,_ee ._dbd );
_ed :=make ([]int ,_bc .Width +5);_egf :=make ([]int ,_bc .Width +5);_egf [0]=_bc .Width ;_eb :=1;var _cce int ;for _fbd :=0;_fbd < _bc .Height ;_fbd ++{_cce ,_bf =_ee .uncompress2d (_ee ._ae ,_egf ,_eb ,_ed ,_bc .Width );if _bf !=nil {return nil ,_bf ;
};if _cce ==EOF {break ;};if _cce > 0{_bf =_ee .fillBitmap (_bc ,_fbd ,_ed ,_cce );if _bf !=nil {return nil ,_bf ;};};_egf ,_ed =_ed ,_egf ;_eb =_cce ;};if _bf =_ee .detectAndSkipEOL ();_bf !=nil {return nil ,_bf ;};_ee ._ae .align ();return _bc ,nil ;
};type runData struct{_faf *_e .SubstreamReader ;_cfd int ;_gaf int ;_ffb int ;_fbf []byte ;_beg int ;_gca int ;};const (_fgd int =1024<<7;_gc int =3;_dfe uint =24;);func _eca (_bde *_e .SubstreamReader )(*runData ,error ){_fac :=&runData {_faf :_bde ,_cfd :0,_gaf :1};
_gac :=_g (_daf (_gc ,int (_bde .Length ())),_fgd );_fac ._fbf =make ([]byte ,_gac );if _ddbg :=_fac .fillBuffer (0);_ddbg !=nil {if _ddbg ==_ce .EOF {_fac ._fbf =make ([]byte ,10);_f .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_ddbg );
}else {return nil ,_ddbg ;};};return _fac ,nil ;};func _fcb (_ff [3]int )*code {return &code {_fc :_ff [0],_fb :_ff [1],_cb :_ff [2]}};func (_abac *runData )align (){_abac ._cfd =((_abac ._cfd +7)>>3)<<3};func (_adb *Decoder )uncompress1d (_aeb *runData ,_dfb []int ,_ga int )(int ,error ){var (_ced =true ;
_dge int ;_dde *code ;_adc int ;_aba error ;);_cde :for _dge < _ga {_cdd :for {if _ced {_dde ,_aba =_aeb .uncompressGetCode (_adb ._dgc );if _aba !=nil {return 0,_aba ;};}else {_dde ,_aba =_aeb .uncompressGetCode (_adb ._dgb );if _aba !=nil {return 0,_aba ;
};};_aeb ._cfd +=_dde ._fc ;if _dde ._cb < 0{break _cde ;};_dge +=_dde ._cb ;if _dde ._cb < 64{_ced =!_ced ;_dfb [_adc ]=_dge ;_adc ++;break _cdd ;};};};if _dfb [_adc ]!=_ga {_dfb [_adc ]=_ga ;};_ea :=EOL ;if _dde !=nil &&_dde ._cb !=EOL {_ea =_adc ;};
return _ea ,nil ;};func (_eed *Decoder )fillBitmap (_cab *_b .Bitmap ,_ag int ,_fg []int ,_ggd int )error {var _ecb byte ;_aa :=0;_ceb :=_cab .GetByteIndex (_aa ,_ag );for _afg :=0;_afg < _ggd ;_afg ++{_gd :=byte (1);_agb :=_fg [_afg ];if (_afg &1)==0{_gd =0;
};for _aa < _agb {_ecb =(_ecb <<1)|_gd ;_aa ++;if (_aa &7)==0{if _fca :=_cab .SetByte (_ceb ,_ecb );_fca !=nil {return _fca ;};_ceb ++;_ecb =0;};};};if (_aa &7)!=0{_ecb <<=uint (8-(_aa &7));if _bgf :=_cab .SetByte (_ceb ,_ecb );_bgf !=nil {return _bgf ;
};};return nil ;};func (_af *code )String ()string {return _c .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_af ._fc ,_af ._fb ,_af ._cb );};type mmrCode int ;func (_cea *runData )uncompressGetCode (_gfe []*code )(*code ,error ){return _cea .uncompressGetCodeLittleEndian (_gfe );
};