//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_gb "errors";_da "fmt";_cb "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_cf "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_g "io";);func New (r *_c .Reader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_ae :=&Decoder {_db :width ,_gbf :height };
_gce ,_gd :=r .NewPartialReader (int (dataOffset ),int (dataLength ),false );if _gd !=nil {return nil ,_gd ;};_bg ,_gd :=_abc (_gce );if _gd !=nil {return nil ,_gd ;};_ ,_gd =r .Seek (_gce .RelativePosition (),_g .SeekCurrent );if _gd !=nil {return nil ,_gd ;
};_ae ._gcg =_bg ;if _fdg :=_ae .initTables ();_fdg !=nil {return nil ,_fdg ;};return _ae ,nil ;};func _cfa (_fc ,_ff int )int {if _fc > _ff {return _ff ;};return _fc ;};type mmrCode int ;func (_dfg *runData )uncompressGetCode (_gbe []*code )(*code ,error ){return _dfg .uncompressGetCodeLittleEndian (_gbe );
};type Decoder struct{_db ,_gbf int ;_gcg *runData ;_af []*code ;_de []*code ;_eb []*code ;};type code struct{_f int ;_gg int ;_dg int ;_dc []*code ;_dd bool ;};func _gc (_b ,_bf int )int {if _b < _bf {return _bf ;};return _b ;};func (_fb *Decoder )uncompress1d (_bfg *runData ,_afg []int ,_aegb int )(int ,error ){var (_baf =true ;
_be int ;_cge *code ;_fdc int ;_cdd error ;);_afde :for _be < _aegb {_bd :for {if _baf {_cge ,_cdd =_bfg .uncompressGetCode (_fb ._af );if _cdd !=nil {return 0,_cdd ;};}else {_cge ,_cdd =_bfg .uncompressGetCode (_fb ._de );if _cdd !=nil {return 0,_cdd ;
};};_bfg ._ebd +=_cge ._f ;if _cge ._dg < 0{break _afde ;};_be +=_cge ._dg ;if _cge ._dg < 64{_baf =!_baf ;_afg [_fdc ]=_be ;_fdc ++;break _bd ;};};};if _afg [_fdc ]!=_aegb {_afg [_fdc ]=_aegb ;};_eg :=EOL ;if _cge !=nil &&_cge ._dg !=EOL {_eg =_fdc ;};
return _eg ,nil ;};func _abc (_ef *_c .Reader )(*runData ,error ){_fgg :=&runData {_adg :_ef ,_ebd :0,_cad :1};_cec :=_cfa (_gc (_ca ,int (_ef .Length ())),_cgea );_fgg ._ade =make ([]byte ,_cec );if _fad :=_fgg .fillBuffer (0);_fad !=nil {if _fad ==_g .EOF {_fgg ._ade =make ([]byte ,10);
_cb .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_fad );}else {return nil ,_fad ;};};return _fgg ,nil ;};func (_bfc *Decoder )UncompressMMR ()(_bb *_cf .Bitmap ,_dac error ){_bb =_cf .New (_bfc ._db ,_bfc ._gbf );
_fg :=make ([]int ,_bb .Width +5);_bbb :=make ([]int ,_bb .Width +5);_bbb [0]=_bb .Width ;_afe :=1;var _cba int ;for _fa :=0;_fa < _bb .Height ;_fa ++{_cba ,_dac =_bfc .uncompress2d (_bfc ._gcg ,_bbb ,_afe ,_fg ,_bb .Width );if _dac !=nil {return nil ,_dac ;
};if _cba ==EOF {break ;};if _cba > 0{_dac =_bfc .fillBitmap (_bb ,_fa ,_fg ,_cba );if _dac !=nil {return nil ,_dac ;};};_bbb ,_fg =_fg ,_bbb ;_afe =_cba ;};if _dac =_bfc .detectAndSkipEOL ();_dac !=nil {return nil ,_dac ;};_bfc ._gcg .align ();return _bb ,nil ;
};func (_e *code )String ()string {return _da .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_e ._f ,_e ._gg ,_e ._dg );};var (_ga =[][3]int {{4,0x1,int (_cg )},{3,0x1,int (_bfe )},{1,0x1,int (_ce )},{3,0x3,int (_cfc )},{6,0x3,int (_fd )},{7,0x3,int (_dab )},{3,0x2,int (_ed )},{6,0x2,int (_gca )},{7,0x2,int (_bc )},{10,0xf,int (_dca )},{12,0xf,int (_ea )},{12,0x1,int (EOL )}};
_ab =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_ffg },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_ffg },{11,0x01,_ffg },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_gac =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_ffg },{9,0x18,15},{10,0x01,_ffg },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_ffg },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_bdd *runData )align (){_bdd ._ebd =((_bdd ._ebd +7)>>3)<<3};func (_bcg *runData )fillBuffer (_beg int )error {_bcg ._bad =_beg ;_ ,_dgc :=_bcg ._adg .Seek (int64 (_beg ),_g .SeekStart );if _dgc !=nil {if _dgc ==_g .EOF {_cb .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");
_bcg ._afdg =-1;}else {return _dgc ;};};if _dgc ==nil {_bcg ._afdg ,_dgc =_bcg ._adg .Read (_bcg ._ade );if _dgc !=nil {if _dgc ==_g .EOF {_cb .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_bcg ._afdg =-1;}else {return _dgc ;};};};if _bcg ._afdg > -1&&_bcg ._afdg < 3{for _bcg ._afdg < 3{_eff ,_ccc :=_bcg ._adg .ReadByte ();
if _ccc !=nil {if _ccc ==_g .EOF {_bcg ._ade [_bcg ._afdg ]=0;}else {return _ccc ;};}else {_bcg ._ade [_bcg ._afdg ]=_eff &0xFF;};_bcg ._afdg ++;};};_bcg ._afdg -=3;if _bcg ._afdg < 0{_bcg ._ade =make ([]byte ,len (_bcg ._ade ));_bcg ._afdg =len (_bcg ._ade )-3;
};return nil ;};const (_cg mmrCode =iota ;_bfe ;_ce ;_cfc ;_fd ;_dab ;_ed ;_gca ;_bc ;_dca ;_ea ;);const (EOF =-3;_ffg =-2;EOL =-1;_cd =8;_a =(1<<_cd )-1;_ge =5;_ba =(1<<_ge )-1;);func (_ad *Decoder )createLittleEndianTable (_afd [][3]int )([]*code ,error ){_fe :=make ([]*code ,_a +1);
for _gcef :=0;_gcef < len (_afd );_gcef ++{_dga :=_cfb (_afd [_gcef ]);if _dga ._f <=_cd {_aba :=_cd -_dga ._f ;_cdb :=_dga ._gg <<uint (_aba );for _ec :=(1<<uint (_aba ))-1;_ec >=0;_ec --{_afc :=_cdb |_ec ;_fe [_afc ]=_dga ;};}else {_adf :=_dga ._gg >>uint (_dga ._f -_cd );
if _fe [_adf ]==nil {var _gge =_cfb ([3]int {});_gge ._dc =make ([]*code ,_ba +1);_fe [_adf ]=_gge ;};if _dga ._f <=_cd +_ge {_gdc :=_cd +_ge -_dga ._f ;_bfb :=(_dga ._gg <<uint (_gdc ))&_ba ;_fe [_adf ]._dd =true ;for _aa :=(1<<uint (_gdc ))-1;_aa >=0;
_aa --{_fe [_adf ]._dc [_bfb |_aa ]=_dga ;};}else {return nil ,_gb .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _fe ,nil ;};type runData struct{_adg *_c .Reader ;_ebd int ;_cad int ;_dbe int ;_ade []byte ;_bad int ;_afdg int ;};func (_ecf *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_gfe :=_ecf ._ebd -_ecf ._cad ;if _gfe < 0||_gfe > 24{_gfc :=(_ecf ._ebd >>3)-_ecf ._bad ;
if _gfc >=_ecf ._afdg {_gfc +=_ecf ._bad ;if _beb :=_ecf .fillBuffer (_gfc );_beb !=nil {return 0,_beb ;};_gfc -=_ecf ._bad ;};_egfa :=(uint32 (_ecf ._ade [_gfc ]&0xFF)<<16)|(uint32 (_ecf ._ade [_gfc +1]&0xFF)<<8)|(uint32 (_ecf ._ade [_gfc +2]&0xFF));_cff :=uint32 (_ecf ._ebd &7);
_egfa <<=_cff ;_ecf ._dbe =int (_egfa );}else {_fggd :=_ecf ._cad &7;_gga :=7-_fggd ;if _gfe <=_gga {_ecf ._dbe <<=uint (_gfe );}else {_cdg :=(_ecf ._cad >>3)+3-_ecf ._bad ;if _cdg >=_ecf ._afdg {_cdg +=_ecf ._bad ;if _fga :=_ecf .fillBuffer (_cdg );_fga !=nil {return 0,_fga ;
};_cdg -=_ecf ._bad ;};_fggd =8-_fggd ;for {_ecf ._dbe <<=uint (_fggd );_ecf ._dbe |=int (uint (_ecf ._ade [_cdg ])&0xFF);_gfe -=_fggd ;_cdg ++;_fggd =8;if !(_gfe >=8){break ;};};_ecf ._dbe <<=uint (_gfe );};};_ecf ._cad =_ecf ._ebd ;return _ecf ._dbe ,nil ;
};func (_bbd *Decoder )fillBitmap (_cfe *_cf .Bitmap ,_fef int ,_dea []int ,_gaa int )error {var _ffe byte ;_gcb :=0;_edg :=_cfe .GetByteIndex (_gcb ,_fef );for _aeb :=0;_aeb < _gaa ;_aeb ++{_fcf :=byte (1);_abg :=_dea [_aeb ];if (_aeb &1)==0{_fcf =0;};
for _gcb < _abg {_ffe =(_ffe <<1)|_fcf ;_gcb ++;if (_gcb &7)==0{if _dead :=_cfe .SetByte (_edg ,_ffe );_dead !=nil {return _dead ;};_edg ++;_ffe =0;};};};if (_gcb &7)!=0{_ffe <<=uint (8-(_gcb &7));if _bab :=_cfe .SetByte (_edg ,_ffe );_bab !=nil {return _bab ;
};};return nil ;};func (_bce *runData )uncompressGetCodeLittleEndian (_cbag []*code )(*code ,error ){_ddg ,_fda :=_bce .uncompressGetNextCodeLittleEndian ();if _fda !=nil {_cb .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_fda );
return nil ,_fda ;};_ddg &=0xffffff;_ecg :=_ddg >>(_cae -_cd );_fbb :=_cbag [_ecg ];if _fbb !=nil &&_fbb ._dd {_ecg =(_ddg >>(_cae -_cd -_ge ))&_ba ;_fbb =_fbb ._dc [_ecg ];};return _fbb ,nil ;};func (_df *Decoder )initTables ()(_cee error ){if _df ._af ==nil {_df ._af ,_cee =_df .createLittleEndianTable (_ab );
if _cee !=nil {return ;};_df ._de ,_cee =_df .createLittleEndianTable (_gac );if _cee !=nil {return ;};_df ._eb ,_cee =_df .createLittleEndianTable (_ga );if _cee !=nil {return ;};};return nil ;};const (_cgea int =1024<<7;_ca int =3;_cae uint =24;);func (_afb *Decoder )detectAndSkipEOL ()error {for {_cc ,_aeg :=_afb ._gcg .uncompressGetCode (_afb ._eb );
if _aeg !=nil {return _aeg ;};if _cc !=nil &&_cc ._dg ==EOL {_afb ._gcg ._ebd +=_cc ._f ;}else {return nil ;};};};func (_bbg *Decoder )uncompress2d (_cbac *runData ,_bfee []int ,_ded int ,_ggc []int ,_dda int )(int ,error ){var (_egf int ;_cfd int ;_aac int ;
_ffc =true ;_fgf error ;_fag *code ;);_bfee [_ded ]=_dda ;_bfee [_ded +1]=_dda ;_bfee [_ded +2]=_dda +1;_bfee [_ded +3]=_dda +1;_gf :for _aac < _dda {_fag ,_fgf =_cbac .uncompressGetCode (_bbg ._eb );if _fgf !=nil {return EOL ,nil ;};if _fag ==nil {_cbac ._ebd ++;
break _gf ;};_cbac ._ebd +=_fag ._f ;switch mmrCode (_fag ._dg ){case _ce :_aac =_bfee [_egf ];case _cfc :_aac =_bfee [_egf ]+1;case _ed :_aac =_bfee [_egf ]-1;case _bfe :for {var _edc []*code ;if _ffc {_edc =_bbg ._af ;}else {_edc =_bbg ._de ;};_fag ,_fgf =_cbac .uncompressGetCode (_edc );
if _fgf !=nil {return 0,_fgf ;};if _fag ==nil {break _gf ;};_cbac ._ebd +=_fag ._f ;if _fag ._dg < 64{if _fag ._dg < 0{_ggc [_cfd ]=_aac ;_cfd ++;_fag =nil ;break _gf ;};_aac +=_fag ._dg ;_ggc [_cfd ]=_aac ;_cfd ++;break ;};_aac +=_fag ._dg ;};_afce :=_aac ;
_cbg :for {var _feb []*code ;if !_ffc {_feb =_bbg ._af ;}else {_feb =_bbg ._de ;};_fag ,_fgf =_cbac .uncompressGetCode (_feb );if _fgf !=nil {return 0,_fgf ;};if _fag ==nil {break _gf ;};_cbac ._ebd +=_fag ._f ;if _fag ._dg < 64{if _fag ._dg < 0{_ggc [_cfd ]=_aac ;
_cfd ++;break _gf ;};_aac +=_fag ._dg ;if _aac < _dda ||_aac !=_afce {_ggc [_cfd ]=_aac ;_cfd ++;};break _cbg ;};_aac +=_fag ._dg ;};for _aac < _dda &&_bfee [_egf ]<=_aac {_egf +=2;};continue _gf ;case _cg :_egf ++;_aac =_bfee [_egf ];_egf ++;continue _gf ;
case _fd :_aac =_bfee [_egf ]+2;case _gca :_aac =_bfee [_egf ]-2;case _dab :_aac =_bfee [_egf ]+3;case _bc :_aac =_bfee [_egf ]-3;default:if _cbac ._ebd ==12&&_fag ._dg ==EOL {_cbac ._ebd =0;if _ ,_fgf =_bbg .uncompress1d (_cbac ,_bfee ,_dda );_fgf !=nil {return 0,_fgf ;
};_cbac ._ebd ++;if _ ,_fgf =_bbg .uncompress1d (_cbac ,_ggc ,_dda );_fgf !=nil {return 0,_fgf ;};_gcc ,_def :=_bbg .uncompress1d (_cbac ,_bfee ,_dda );if _def !=nil {return EOF ,_def ;};_cbac ._ebd ++;return _gcc ,nil ;};_aac =_dda ;continue _gf ;};if _aac <=_dda {_ffc =!_ffc ;
_ggc [_cfd ]=_aac ;_cfd ++;if _egf > 0{_egf --;}else {_egf ++;};for _aac < _dda &&_bfee [_egf ]<=_aac {_egf +=2;};};};if _ggc [_cfd ]!=_dda {_ggc [_cfd ]=_dda ;};if _fag ==nil {return EOL ,nil ;};return _cfd ,nil ;};func _cfb (_gbb [3]int )*code {return &code {_f :_gbb [0],_gg :_gbb [1],_dg :_gbb [2]}};
