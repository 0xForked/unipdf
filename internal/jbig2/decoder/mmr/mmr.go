//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_cc "errors";_cf "fmt";_g "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_cd "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_f "io";);func (_afd *runData )align (){_afd ._cccf =((_afd ._cccf +7)>>3)<<3};
func (_cgb *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_fbc :=_cgb ._cccf -_cgb ._cde ;if _fbc < 0||_fbc > 24{_bee :=(_cgb ._cccf >>3)-_cgb ._cac ;if _bee >=_cgb ._baa {_bee +=_cgb ._cac ;if _gad :=_cgb .fillBuffer (_bee );_gad !=nil {return 0,_gad ;
};_bee -=_cgb ._cac ;};_gafdd :=(uint32 (_cgb ._ged [_bee ]&0xFF)<<16)|(uint32 (_cgb ._ged [_bee +1]&0xFF)<<8)|(uint32 (_cgb ._ged [_bee +2]&0xFF));_dea :=uint32 (_cgb ._cccf &7);_gafdd <<=_dea ;_cgb ._dbe =int (_gafdd );}else {_ecd :=_cgb ._cde &7;_eddc :=7-_ecd ;
if _fbc <=_eddc {_cgb ._dbe <<=uint (_fbc );}else {_ffg :=(_cgb ._cde >>3)+3-_cgb ._cac ;if _ffg >=_cgb ._baa {_ffg +=_cgb ._cac ;if _cad :=_cgb .fillBuffer (_ffg );_cad !=nil {return 0,_cad ;};_ffg -=_cgb ._cac ;};_ecd =8-_ecd ;for {_cgb ._dbe <<=uint (_ecd );
_cgb ._dbe |=int (uint (_cgb ._ged [_ffg ])&0xFF);_fbc -=_ecd ;_ffg ++;_ecd =8;if !(_fbc >=8){break ;};};_cgb ._dbe <<=uint (_fbc );};};_cgb ._cde =_cgb ._cccf ;return _cgb ._dbe ,nil ;};func (_ffd *Decoder )initTables ()(_bcd error ){if _ffd ._bc ==nil {_ffd ._bc ,_bcd =_ffd .createLittleEndianTable (_cbc );
if _bcd !=nil {return ;};_ffd ._ce ,_bcd =_ffd .createLittleEndianTable (_ag );if _bcd !=nil {return ;};_ffd ._dgd ,_bcd =_ffd .createLittleEndianTable (_ca );if _bcd !=nil {return ;};};return nil ;};type runData struct{_edd *_b .SubstreamReader ;_cccf int ;
_cde int ;_dbe int ;_ged []byte ;_cac int ;_baa int ;};func _bf (_ddd ,_gaf int )int {if _ddd < _gaf {return _gaf ;};return _ddd ;};func _da (_fe [3]int )*code {return &code {_d :_fe [0],_a :_fe [1],_aa :_fe [2]}};func (_ddg *Decoder )createLittleEndianTable (_fg [][3]int )([]*code ,error ){_daf :=make ([]*code ,_af +1);
for _feg :=0;_feg < len (_fg );_feg ++{_bdc :=_da (_fg [_feg ]);if _bdc ._d <=_ff {_ge :=_ff -_bdc ._d ;_ead :=_bdc ._a <<uint (_ge );for _acfa :=(1<<uint (_ge ))-1;_acfa >=0;_acfa --{_fbf :=_ead |_acfa ;_daf [_fbf ]=_bdc ;};}else {_ba :=_bdc ._a >>uint (_bdc ._d -_ff );
if _daf [_ba ]==nil {var _aefc =_da ([3]int {});_aefc ._ga =make ([]*code ,_abc +1);_daf [_ba ]=_aefc ;};if _bdc ._d <=_ff +_ef {_fc :=_ff +_ef -_bdc ._d ;_gg :=(_bdc ._a <<uint (_fc ))&_abc ;_daf [_ba ]._dd =true ;for _ecg :=(1<<uint (_fc ))-1;_ecg >=0;
_ecg --{_daf [_ba ]._ga [_gg |_ecg ]=_bdc ;};}else {return nil ,_cc .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _daf ,nil ;};func (_fa *Decoder )uncompress2d (_dde *runData ,_gafd []int ,_ddeg int ,_aace []int ,_gbg int )(int ,error ){var (_eff int ;_beg int ;_egf int ;_ffa =true ;_cccg error ;_faa *code ;);_gafd [_ddeg ]=_gbg ;_gafd [_ddeg +1]=_gbg ;
_gafd [_ddeg +2]=_gbg +1;_gafd [_ddeg +3]=_gbg +1;_eab :for _egf < _gbg {_faa ,_cccg =_dde .uncompressGetCode (_fa ._dgd );if _cccg !=nil {return EOL ,nil ;};if _faa ==nil {_dde ._cccf ++;break _eab ;};_dde ._cccf +=_faa ._d ;switch mmrCode (_faa ._aa ){case _ea :_egf =_gafd [_eff ];
case _gb :_egf =_gafd [_eff ]+1;case _dg :_egf =_gafd [_eff ]-1;case _be :for {var _gbb []*code ;if _ffa {_gbb =_fa ._bc ;}else {_gbb =_fa ._ce ;};_faa ,_cccg =_dde .uncompressGetCode (_gbb );if _cccg !=nil {return 0,_cccg ;};if _faa ==nil {break _eab ;
};_dde ._cccf +=_faa ._d ;if _faa ._aa < 64{if _faa ._aa < 0{_aace [_beg ]=_egf ;_beg ++;_faa =nil ;break _eab ;};_egf +=_faa ._aa ;_aace [_beg ]=_egf ;_beg ++;break ;};_egf +=_faa ._aa ;};_fcb :=_egf ;_cbf :for {var _aba []*code ;if !_ffa {_aba =_fa ._bc ;
}else {_aba =_fa ._ce ;};_faa ,_cccg =_dde .uncompressGetCode (_aba );if _cccg !=nil {return 0,_cccg ;};if _faa ==nil {break _eab ;};_dde ._cccf +=_faa ._d ;if _faa ._aa < 64{if _faa ._aa < 0{_aace [_beg ]=_egf ;_beg ++;break _eab ;};_egf +=_faa ._aa ;
if _egf < _gbg ||_egf !=_fcb {_aace [_beg ]=_egf ;_beg ++;};break _cbf ;};_egf +=_faa ._aa ;};for _egf < _gbg &&_gafd [_eff ]<=_egf {_eff +=2;};continue _eab ;case _fd :_eff ++;_egf =_gafd [_eff ];_eff ++;continue _eab ;case _ae :_egf =_gafd [_eff ]+2;
case _bfb :_egf =_gafd [_eff ]-2;case _ed :_egf =_gafd [_eff ]+3;case _dgg :_egf =_gafd [_eff ]-3;default:if _dde ._cccf ==12&&_faa ._aa ==EOL {_dde ._cccf =0;if _ ,_cccg =_fa .uncompress1d (_dde ,_gafd ,_gbg );_cccg !=nil {return 0,_cccg ;};_dde ._cccf ++;
if _ ,_cccg =_fa .uncompress1d (_dde ,_aace ,_gbg );_cccg !=nil {return 0,_cccg ;};_dbd ,_acb :=_fa .uncompress1d (_dde ,_gafd ,_gbg );if _acb !=nil {return EOF ,_acb ;};_dde ._cccf ++;return _dbd ,nil ;};_egf =_gbg ;continue _eab ;};if _egf <=_gbg {_ffa =!_ffa ;
_aace [_beg ]=_egf ;_beg ++;if _eff > 0{_eff --;}else {_eff ++;};for _egf < _gbg &&_gafd [_eff ]<=_egf {_eff +=2;};};};if _aace [_beg ]!=_gbg {_aace [_beg ]=_gbg ;};if _faa ==nil {return EOL ,nil ;};return _beg ,nil ;};const (_fd mmrCode =iota ;_be ;_ea ;
_gb ;_ae ;_ed ;_dg ;_bfb ;_dgg ;_ab ;_ac ;);func (_gbc *Decoder )uncompress1d (_ggd *runData ,_dda []int ,_ebf int )(int ,error ){var (_fgcc =true ;_bag int ;_ddga *code ;_caf int ;_dbb error ;);_ceg :for _bag < _ebf {_ede :for {if _fgcc {_ddga ,_dbb =_ggd .uncompressGetCode (_gbc ._bc );
if _dbb !=nil {return 0,_dbb ;};}else {_ddga ,_dbb =_ggd .uncompressGetCode (_gbc ._ce );if _dbb !=nil {return 0,_dbb ;};};_ggd ._cccf +=_ddga ._d ;if _ddga ._aa < 0{break _ceg ;};_bag +=_ddga ._aa ;if _ddga ._aa < 64{_fgcc =!_fgcc ;_dda [_caf ]=_bag ;
_caf ++;break _ede ;};};};if _dda [_caf ]!=_ebf {_dda [_caf ]=_ebf ;};_beb :=EOL ;if _ddga !=nil &&_ddga ._aa !=EOL {_beb =_caf ;};return _beb ,nil ;};func (_ad *code )String ()string {return _cf .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_ad ._d ,_ad ._a ,_ad ._aa );
};const (_cg int =1024<<7;_bed int =3;_agc uint =24;);func New (r _b .StreamReader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_acf :=&Decoder {_aef :width ,_df :height };_eb ,_db :=_b .NewSubstreamReader (r ,uint64 (dataOffset ),uint64 (dataLength ));
if _db !=nil {return nil ,_db ;};_de ,_db :=_ege (_eb );if _db !=nil {return nil ,_db ;};_acf ._bd =_de ;if _adb :=_acf .initTables ();_adb !=nil {return nil ,_adb ;};return _acf ,nil ;};func _ege (_gga *_b .SubstreamReader )(*runData ,error ){_egc :=&runData {_edd :_gga ,_cccf :0,_cde :1};
_gd :=_dc (_bf (_bed ,int (_gga .Length ())),_cg );_egc ._ged =make ([]byte ,_gd );if _fge :=_egc .fillBuffer (0);_fge !=nil {if _fge ==_f .EOF {_egc ._ged =make ([]byte ,10);_g .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_fge );
}else {return nil ,_fge ;};};return _egc ,nil ;};func (_bad *Decoder )fillBitmap (_fcd *_cd .Bitmap ,_bda int ,_eca []int ,_eg int )error {var _ccc byte ;_dfa :=0;_efc :=_fcd .GetByteIndex (_dfa ,_bda );for _fbff :=0;_fbff < _eg ;_fbff ++{_cdg :=byte (1);
_aac :=_eca [_fbff ];if (_fbff &1)==0{_cdg =0;};for _dfa < _aac {_ccc =(_ccc <<1)|_cdg ;_dfa ++;if (_dfa &7)==0{if _ee :=_fcd .SetByte (_efc ,_ccc );_ee !=nil {return _ee ;};_efc ++;_ccc =0;};};};if (_dfa &7)!=0{_ccc <<=uint (8-(_dfa &7));if _bb :=_fcd .SetByte (_efc ,_ccc );
_bb !=nil {return _bb ;};};return nil ;};type Decoder struct{_aef ,_df int ;_bd *runData ;_bc []*code ;_ce []*code ;_dgd []*code ;};func (_feb *runData )uncompressGetCodeLittleEndian (_dcc []*code )(*code ,error ){_adc ,_gde :=_feb .uncompressGetNextCodeLittleEndian ();
if _gde !=nil {_g .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_gde );
return nil ,_gde ;};_adc &=0xffffff;_eba :=_adc >>(_agc -_ff );_aaca :=_dcc [_eba ];if _aaca !=nil &&_aaca ._dd {_eba =(_adc >>(_agc -_ff -_ef ))&_abc ;_aaca =_aaca ._ga [_eba ];};return _aaca ,nil ;};func (_dce *Decoder )detectAndSkipEOL ()error {for {_bdd ,_fgc :=_dce ._bd .uncompressGetCode (_dce ._dgd );
if _fgc !=nil {return _fgc ;};if _bdd !=nil &&_bdd ._aa ==EOL {_dce ._bd ._cccf +=_bdd ._d ;}else {return nil ;};};};type code struct{_d int ;_a int ;_aa int ;_ga []*code ;_dd bool ;};func (_gedd *runData )uncompressGetCode (_bfe []*code )(*code ,error ){return _gedd .uncompressGetCodeLittleEndian (_bfe );
};const (EOF =-3;_abe =-2;EOL =-1;_ff =8;_af =(1<<_ff )-1;_ef =5;_abc =(1<<_ef )-1;);var (_ca =[][3]int {{4,0x1,int (_fd )},{3,0x1,int (_be )},{1,0x1,int (_ea )},{3,0x3,int (_gb )},{6,0x3,int (_ae )},{7,0x3,int (_ed )},{3,0x2,int (_dg )},{6,0x2,int (_bfb )},{7,0x2,int (_dgg )},{10,0xf,int (_ab )},{12,0xf,int (_ac )},{12,0x1,int (EOL )}};
_cbc =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_abe },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_abe },{11,0x01,_abe },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_ag =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_abe },{9,0x18,15},{10,0x01,_abe },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_abe },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_dbf *Decoder )UncompressMMR ()(_fb *_cd .Bitmap ,_ec error ){_fb =_cd .New (_dbf ._aef ,_dbf ._df );_bff :=make ([]int ,_fb .Width +5);_gf :=make ([]int ,_fb .Width +5);_gf [0]=_fb .Width ;_fdg :=1;var _gba int ;for _ebc :=0;_ebc < _fb .Height ;
_ebc ++{_gba ,_ec =_dbf .uncompress2d (_dbf ._bd ,_gf ,_fdg ,_bff ,_fb .Width );if _ec !=nil {return nil ,_ec ;};if _gba ==EOF {break ;};if _gba > 0{_ec =_dbf .fillBitmap (_fb ,_ebc ,_bff ,_gba );if _ec !=nil {return nil ,_ec ;};};_gf ,_bff =_bff ,_gf ;
_fdg =_gba ;};if _ec =_dbf .detectAndSkipEOL ();_ec !=nil {return nil ,_ec ;};_dbf ._bd .align ();return _fb ,nil ;};func _dc (_cb ,_e int )int {if _cb > _e {return _e ;};return _cb ;};type mmrCode int ;func (_fdgc *runData )fillBuffer (_fee int )error {_fdgc ._cac =_fee ;
_ ,_agb :=_fdgc ._edd .Seek (int64 (_fee ),_f .SeekStart );if _agb !=nil {if _agb ==_f .EOF {_g .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_fdgc ._baa =-1;}else {return _agb ;};};if _agb ==nil {_fdgc ._baa ,_agb =_fdgc ._edd .Read (_fdgc ._ged );
if _agb !=nil {if _agb ==_f .EOF {_g .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_fdgc ._baa =-1;}else {return _agb ;};};};if _fdgc ._baa > -1&&_fdgc ._baa < 3{for _fdgc ._baa < 3{_bddc ,_dgde :=_fdgc ._edd .ReadByte ();if _dgde !=nil {if _dgde ==_f .EOF {_fdgc ._ged [_fdgc ._baa ]=0;
}else {return _dgde ;};}else {_fdgc ._ged [_fdgc ._baa ]=_bddc &0xFF;};_fdgc ._baa ++;};};_fdgc ._baa -=3;if _fdgc ._baa < 0{_fdgc ._ged =make ([]byte ,len (_fdgc ._ged ));_fdgc ._baa =len (_fdgc ._ged )-3;};return nil ;};