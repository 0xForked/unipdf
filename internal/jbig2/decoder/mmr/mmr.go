//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_f "errors";_d "fmt";_gf "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_fa "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_dc "io";);func _cc (_gfe ,_fcd int )int {if _gfe < _fcd {return _fcd ;
};return _gfe ;};func (_bc *Decoder )fillBitmap (_aaf *_fa .Bitmap ,_eaa int ,_cgb []int ,_ddbg int )error {var _acd byte ;_bg :=0;_bagb :=_aaf .GetByteIndex (_bg ,_eaa );for _dfdc :=0;_dfdc < _ddbg ;_dfdc ++{_ebg :=byte (1);_fgb :=_cgb [_dfdc ];if (_dfdc &1)==0{_ebg =0;
};for _bg < _fgb {_acd =(_acd <<1)|_ebg ;_bg ++;if (_bg &7)==0{if _fb :=_aaf .SetByte (_bagb ,_acd );_fb !=nil {return _fb ;};_bagb ++;_acd =0;};};};if (_bg &7)!=0{_acd <<=uint (8-(_bg &7));if _ebgc :=_aaf .SetByte (_bagb ,_acd );_ebgc !=nil {return _ebgc ;
};};return nil ;};func _ca (_cce ,_cd int )int {if _cce > _cd {return _cd ;};return _cce ;};const (EOF =-3;_bb =-2;EOL =-1;_ccb =8;_gg =(1<<_ccb )-1;_dcd =5;_bae =(1<<_dcd )-1;);type runData struct{_bea *_g .Reader ;_ecb int ;_dbag int ;_cb int ;_aec []byte ;
_dfg int ;_eaf int ;};func (_fac *runData )align (){_fac ._ecb =((_fac ._ecb +7)>>3)<<3};func (_eec *runData )uncompressGetCode (_ddf []*code )(*code ,error ){return _eec .uncompressGetCodeLittleEndian (_ddf );};func _dgb (_ccf *_g .Reader )(*runData ,error ){_dbfb :=&runData {_bea :_ccf ,_ecb :0,_dbag :1};
_ccc :=_ca (_cc (_fgg ,int (_ccf .Length ())),_fef );_dbfb ._aec =make ([]byte ,_ccc );if _cgc :=_dbfb .fillBuffer (0);_cgc !=nil {if _cgc ==_dc .EOF {_dbfb ._aec =make ([]byte ,10);_gf .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_cgc );
}else {return nil ,_cgc ;};};return _dbfb ,nil ;};const (_fef int =1024<<7;_fgg int =3;_gdf uint =24;);func (_gda *Decoder )uncompress2d (_dg *runData ,_ade []int ,_aebe int ,_aed []int ,_deb int )(int ,error ){var (_ee int ;_fdg int ;_egc int ;_ddc =true ;
_gcd error ;_ccee *code ;);_ade [_aebe ]=_deb ;_ade [_aebe +1]=_deb ;_ade [_aebe +2]=_deb +1;_ade [_aebe +3]=_deb +1;_ffgc :for _egc < _deb {_ccee ,_gcd =_dg .uncompressGetCode (_gda ._da );if _gcd !=nil {return EOL ,nil ;};if _ccee ==nil {_dg ._ecb ++;
break _ffgc ;};_dg ._ecb +=_ccee ._faf ;switch mmrCode (_ccee ._c ){case _ff :_egc =_ade [_ee ];case _b :_egc =_ade [_ee ]+1;case _ea :_egc =_ade [_ee ]-1;case _ce :for {var _dgf []*code ;if _ddc {_dgf =_gda ._gc ;}else {_dgf =_gda ._df ;};_ccee ,_gcd =_dg .uncompressGetCode (_dgf );
if _gcd !=nil {return 0,_gcd ;};if _ccee ==nil {break _ffgc ;};_dg ._ecb +=_ccee ._faf ;if _ccee ._c < 64{if _ccee ._c < 0{_aed [_fdg ]=_egc ;_fdg ++;_ccee =nil ;break _ffgc ;};_egc +=_ccee ._c ;_aed [_fdg ]=_egc ;_fdg ++;break ;};_egc +=_ccee ._c ;};_cgg :=_egc ;
_deg :for {var _gbad []*code ;if !_ddc {_gbad =_gda ._gc ;}else {_gbad =_gda ._df ;};_ccee ,_gcd =_dg .uncompressGetCode (_gbad );if _gcd !=nil {return 0,_gcd ;};if _ccee ==nil {break _ffgc ;};_dg ._ecb +=_ccee ._faf ;if _ccee ._c < 64{if _ccee ._c < 0{_aed [_fdg ]=_egc ;
_fdg ++;break _ffgc ;};_egc +=_ccee ._c ;if _egc < _deb ||_egc !=_cgg {_aed [_fdg ]=_egc ;_fdg ++;};break _deg ;};_egc +=_ccee ._c ;};for _egc < _deb &&_ade [_ee ]<=_egc {_ee +=2;};continue _ffgc ;case _aag :_ee ++;_egc =_ade [_ee ];_ee ++;continue _ffgc ;
case _gd :_egc =_ade [_ee ]+2;case _dd :_egc =_ade [_ee ]-2;case _eg :_egc =_ade [_ee ]+3;case _ba :_egc =_ade [_ee ]-3;default:if _dg ._ecb ==12&&_ccee ._c ==EOL {_dg ._ecb =0;if _ ,_gcd =_gda .uncompress1d (_dg ,_ade ,_deb );_gcd !=nil {return 0,_gcd ;
};_dg ._ecb ++;if _ ,_gcd =_gda .uncompress1d (_dg ,_aed ,_deb );_gcd !=nil {return 0,_gcd ;};_eeb ,_dba :=_gda .uncompress1d (_dg ,_ade ,_deb );if _dba !=nil {return EOF ,_dba ;};_dg ._ecb ++;return _eeb ,nil ;};_egc =_deb ;continue _ffgc ;};if _egc <=_deb {_ddc =!_ddc ;
_aed [_fdg ]=_egc ;_fdg ++;if _ee > 0{_ee --;}else {_ee ++;};for _egc < _deb &&_ade [_ee ]<=_egc {_ee +=2;};};};if _aed [_fdg ]!=_deb {_aed [_fdg ]=_deb ;};if _ccee ==nil {return EOL ,nil ;};return _fdg ,nil ;};type code struct{_faf int ;_aa int ;_c int ;
_af []*code ;_fc bool ;};var (_afb =[][3]int {{4,0x1,int (_aag )},{3,0x1,int (_ce )},{1,0x1,int (_ff )},{3,0x3,int (_b )},{6,0x3,int (_gd )},{7,0x3,int (_eg )},{3,0x2,int (_ea )},{6,0x2,int (_dd )},{7,0x2,int (_ba )},{10,0xf,int (_ae )},{12,0xf,int (_fe )},{12,0x1,int (EOL )}};
_bf =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_bb },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_bb },{11,0x01,_bb },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_ec =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_bb },{9,0x18,15},{10,0x01,_bb },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_bb },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_cf *Decoder )UncompressMMR ()(_ad *_fa .Bitmap ,_ace error ){_ad =_fa .New (_cf ._be ,_cf ._fg );_eb :=make ([]int ,_ad .Width +5);_gdc :=make ([]int ,_ad .Width +5);_gdc [0]=_ad .Width ;_gfc :=1;var _db int ;for _dbf :=0;_dbf < _ad .Height ;_dbf ++{_db ,_ace =_cf .uncompress2d (_cf ._cda ,_gdc ,_gfc ,_eb ,_ad .Width );
if _ace !=nil {return nil ,_ace ;};if _db ==EOF {break ;};if _db > 0{_ace =_cf .fillBitmap (_ad ,_dbf ,_eb ,_db );if _ace !=nil {return nil ,_ace ;};};_gdc ,_eb =_eb ,_gdc ;_gfc =_db ;};if _ace =_cf .detectAndSkipEOL ();_ace !=nil {return nil ,_ace ;};
_cf ._cda .align ();return _ad ,nil ;};func (_dbe *Decoder )uncompress1d (_dcc *runData ,_cecc []int ,_ebgf int )(int ,error ){var (_gba =true ;_de int ;_beb *code ;_ag int ;_adf error ;);_ggb :for _de < _ebgf {_agb :for {if _gba {_beb ,_adf =_dcc .uncompressGetCode (_dbe ._gc );
if _adf !=nil {return 0,_adf ;};}else {_beb ,_adf =_dcc .uncompressGetCode (_dbe ._df );if _adf !=nil {return 0,_adf ;};};_dcc ._ecb +=_beb ._faf ;if _beb ._c < 0{break _ggb ;};_de +=_beb ._c ;if _beb ._c < 64{_gba =!_gba ;_cecc [_ag ]=_de ;_ag ++;break _agb ;
};};};if _cecc [_ag ]!=_ebgf {_cecc [_ag ]=_ebgf ;};_dff :=EOL ;if _beb !=nil &&_beb ._c !=EOL {_dff =_ag ;};return _dff ,nil ;};type mmrCode int ;func (_adc *Decoder )initTables ()(_ffa error ){if _adc ._gc ==nil {_adc ._gc ,_ffa =_adc .createLittleEndianTable (_bf );
if _ffa !=nil {return ;};_adc ._df ,_ffa =_adc .createLittleEndianTable (_ec );if _ffa !=nil {return ;};_adc ._da ,_ffa =_adc .createLittleEndianTable (_afb );if _ffa !=nil {return ;};};return nil ;};func (_fae *Decoder )createLittleEndianTable (_cec [][3]int )([]*code ,error ){_cg :=make ([]*code ,_gg +1);
for _bd :=0;_bd < len (_cec );_bd ++{_bfc :=_ac (_cec [_bd ]);if _bfc ._faf <=_ccb {_bbb :=_ccb -_bfc ._faf ;_ddb :=_bfc ._aa <<uint (_bbb );for _cdg :=(1<<uint (_bbb ))-1;_cdg >=0;_cdg --{_baea :=_ddb |_cdg ;_cg [_baea ]=_bfc ;};}else {_ffg :=_bfc ._aa >>uint (_bfc ._faf -_ccb );
if _cg [_ffg ]==nil {var _cdc =_ac ([3]int {});_cdc ._af =make ([]*code ,_bae +1);_cg [_ffg ]=_cdc ;};if _bfc ._faf <=_ccb +_dcd {_bag :=_ccb +_dcd -_bfc ._faf ;_ed :=(_bfc ._aa <<uint (_bag ))&_bae ;_cg [_ffg ]._fc =true ;for _dfd :=(1<<uint (_bag ))-1;
_dfd >=0;_dfd --{_cg [_ffg ]._af [_ed |_dfd ]=_bfc ;};}else {return nil ,_f .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _cg ,nil ;};func (_afc *code )String ()string {return _d .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_afc ._faf ,_afc ._aa ,_afc ._c );};type Decoder struct{_be ,_fg int ;_cda *runData ;_gc []*code ;_df []*code ;_da []*code ;
};func (_cee *runData )uncompressGetCodeLittleEndian (_geb []*code )(*code ,error ){_eed ,_eag :=_cee .uncompressGetNextCodeLittleEndian ();if _eag !=nil {_gf .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_eag );
return nil ,_eag ;};_eed &=0xffffff;_ffc :=_eed >>(_gdf -_ccb );_eca :=_geb [_ffc ];if _eca !=nil &&_eca ._fc {_ffc =(_eed >>(_gdf -_ccb -_dcd ))&_bae ;_eca =_eca ._af [_ffc ];};return _eca ,nil ;};func (_ebe *runData )fillBuffer (_gbf int )error {_ebe ._dfg =_gbf ;
_ ,_dda :=_ebe ._bea .Seek (int64 (_gbf ),_dc .SeekStart );if _dda !=nil {if _dda ==_dc .EOF {_gf .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_ebe ._eaf =-1;}else {return _dda ;};};if _dda ==nil {_ebe ._eaf ,_dda =_ebe ._bea .Read (_ebe ._aec );
if _dda !=nil {if _dda ==_dc .EOF {_gf .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_ebe ._eaf =-1;}else {return _dda ;};};};if _ebe ._eaf > -1&&_ebe ._eaf < 3{for _ebe ._eaf < 3{_fab ,_gcb :=_ebe ._bea .ReadByte ();if _gcb !=nil {if _gcb ==_dc .EOF {_ebe ._aec [_ebe ._eaf ]=0;
}else {return _gcb ;};}else {_ebe ._aec [_ebe ._eaf ]=_fab &0xFF;};_ebe ._eaf ++;};};_ebe ._eaf -=3;if _ebe ._eaf < 0{_ebe ._aec =make ([]byte ,len (_ebe ._aec ));_ebe ._eaf =len (_ebe ._aec )-3;};return nil ;};func (_acf *Decoder )detectAndSkipEOL ()error {for {_fcc ,_ge :=_acf ._cda .uncompressGetCode (_acf ._da );
if _ge !=nil {return _ge ;};if _fcc !=nil &&_fcc ._c ==EOL {_acf ._cda ._ecb +=_fcc ._faf ;}else {return nil ;};};};const (_aag mmrCode =iota ;_ce ;_ff ;_b ;_gd ;_eg ;_ea ;_dd ;_ba ;_ae ;_fe ;);func (_ab *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_afcb :=_ab ._ecb -_ab ._dbag ;
if _afcb < 0||_afcb > 24{_eab :=(_ab ._ecb >>3)-_ab ._dfg ;if _eab >=_ab ._eaf {_eab +=_ab ._dfg ;if _beab :=_ab .fillBuffer (_eab );_beab !=nil {return 0,_beab ;};_eab -=_ab ._dfg ;};_abf :=(uint32 (_ab ._aec [_eab ]&0xFF)<<16)|(uint32 (_ab ._aec [_eab +1]&0xFF)<<8)|(uint32 (_ab ._aec [_eab +2]&0xFF));
_ga :=uint32 (_ab ._ecb &7);_abf <<=_ga ;_ab ._cb =int (_abf );}else {_gac :=_ab ._dbag &7;_afd :=7-_gac ;if _afcb <=_afd {_ab ._cb <<=uint (_afcb );}else {_ef :=(_ab ._dbag >>3)+3-_ab ._dfg ;if _ef >=_ab ._eaf {_ef +=_ab ._dfg ;if _cfb :=_ab .fillBuffer (_ef );
_cfb !=nil {return 0,_cfb ;};_ef -=_ab ._dfg ;};_gac =8-_gac ;for {_ab ._cb <<=uint (_gac );_ab ._cb |=int (uint (_ab ._aec [_ef ])&0xFF);_afcb -=_gac ;_ef ++;_gac =8;if !(_afcb >=8){break ;};};_ab ._cb <<=uint (_afcb );};};_ab ._dbag =_ab ._ecb ;return _ab ._cb ,nil ;
};func New (r *_g .Reader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_gb :=&Decoder {_be :width ,_fg :height };_gcc ,_dae :=r .NewPartialReader (int (dataOffset ),int (dataLength ),false );if _dae !=nil {return nil ,_dae ;};_aeb ,_dae :=_dgb (_gcc );
if _dae !=nil {return nil ,_dae ;};_ ,_dae =r .Seek (_gcc .RelativePosition (),_dc .SeekCurrent );if _dae !=nil {return nil ,_dae ;};_gb ._cda =_aeb ;if _fd :=_gb .initTables ();_fd !=nil {return nil ,_fd ;};return _gb ,nil ;};func _ac (_e [3]int )*code {return &code {_faf :_e [0],_aa :_e [1],_c :_e [2]}};
