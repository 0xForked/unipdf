//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_da "github.com/unidoc/unipdf/v3/internal/bitwise";_de "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_dee "github.com/unidoc/unipdf/v3/internal/jbig2/document";_dea "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";);func (_fgd *Decoder )decodePage (_g int )([]byte ,error ){const _ge ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _g < 0{return nil ,_dea .Errorf (_ge ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_g );};if _g > int (_fgd ._e .NumberOfPages ){return nil ,_dea .Errorf (_ge ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_g );};_aef ,_dab :=_fgd ._e .GetPage (_g );if _dab !=nil {return nil ,_dea .Wrap (_dab ,_ge ,"");};_gc ,_dab :=_aef .GetBitmap ();if _dab !=nil {return nil ,_dea .Wrap (_dab ,_ge ,"");};_gc .InverseData ();if !_fgd ._c .UnpaddedData {return _gc .Data ,nil ;};return _gc .GetUnpaddedData ();};func Decode (input []byte ,parameters Parameters ,globals *_dee .Globals )(*Decoder ,error ){_ga :=_da .NewReader (input );_ba ,_fa :=_dee .DecodeDocument (_ga ,globals );if _fa !=nil {return nil ,_fa ;};return &Decoder {_f :_ga ,_e :_ba ,_c :parameters },nil ;};func (_eb *Decoder )PageNumber ()(int ,error ){const _bd ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _eb ._e ==nil {return 0,_dea .Error (_bd ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_eb ._e .NumberOfPages ),nil ;};type Parameters struct{UnpaddedData bool ;Color _de .Color ;};type Decoder struct{_f _da .StreamReader ;_e *_dee .Document ;_ef int ;_c Parameters ;};func (_a *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _a .decodePage (pageNumber )};func (_fg *Decoder )DecodeNextPage ()([]byte ,error ){_fg ._ef ++;_ec :=_fg ._ef ;return _fg .decodePage (_ec );};func (_ff *Decoder )DecodePageImage (pageNumber int )(_d .Image ,error ){const _ae ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_dc ,_ag :=_ff .decodePageImage (pageNumber );if _ag !=nil {return nil ,_dea .Wrap (_ag ,_ae ,"");};return _dc ,nil ;};func (_agb *Decoder )decodePageImage (_ged int )(_d .Image ,error ){const _gb ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _ged < 0{return nil ,_dea .Errorf (_gb ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ged );};if _ged > int (_agb ._e .NumberOfPages ){return nil ,_dea .Errorf (_gb ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ged );};_dcc ,_be :=_agb ._e .GetPage (_ged );if _be !=nil {return nil ,_dea .Wrap (_be ,_gb ,"");};_aeg ,_be :=_dcc .GetBitmap ();if _be !=nil {return nil ,_dea .Wrap (_be ,_gb ,"");};return _aeg .ToImage (),nil ;};