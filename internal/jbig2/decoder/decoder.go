//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_f "github.com/unidoc/unipdf/v3/internal/bitwise";_b "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_e "github.com/unidoc/unipdf/v3/internal/jbig2/document";_fa "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_db "image";
);func (_ff *Decoder )decodePage (_gde int )([]byte ,error ){const _c ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _gde < 0{return nil ,_fa .Errorf (_c ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_gde );
};if _gde > int (_ff ._fc .NumberOfPages ){return nil ,_fa .Errorf (_c ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_gde );
};_ce ,_fce :=_ff ._fc .GetPage (_gde );if _fce !=nil {return nil ,_fa .Wrap (_fce ,_c ,"");};_dbe ,_fce :=_ce .GetBitmap ();if _fce !=nil {return nil ,_fa .Wrap (_fce ,_c ,"");};_dbe .InverseData ();if !_ff ._ga .UnpaddedData {return _dbe .Data ,nil ;
};return _dbe .GetUnpaddedData ();};func (_gb *Decoder )DecodeNextPage ()([]byte ,error ){_gb ._gd ++;_bb :=_gb ._gd ;return _gb .decodePage (_bb );};func (_ea *Decoder )decodePageImage (_eg int )(_db .Image ,error ){const _ge ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _eg < 0{return nil ,_fa .Errorf (_ge ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_eg );};if _eg > int (_ea ._fc .NumberOfPages ){return nil ,_fa .Errorf (_ge ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_eg );
};_ecb ,_ag :=_ea ._fc .GetPage (_eg );if _ag !=nil {return nil ,_fa .Wrap (_ag ,_ge ,"");};_fd ,_ag :=_ecb .GetBitmap ();if _ag !=nil {return nil ,_fa .Wrap (_ag ,_ge ,"");};_fd .InverseData ();return _fd .ToImage (),nil ;};func (_de *Decoder )PageNumber ()(int ,error ){const _a ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _de ._fc ==nil {return 0,_fa .Error (_a ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_de ._fc .NumberOfPages ),nil ;};func (_gac *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _gac .decodePage (pageNumber )};
func (_ec *Decoder )DecodePageImage (pageNumber int )(_db .Image ,error ){const _eb ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_fae ,_be :=_ec .decodePageImage (pageNumber );
if _be !=nil {return nil ,_fa .Wrap (_be ,_eb ,"");};return _fae ,nil ;};func Decode (input []byte ,parameters Parameters ,globals *_e .Globals )(*Decoder ,error ){_gc :=_f .NewReader (input );_ca ,_cea :=_e .DecodeDocument (_gc ,globals );if _cea !=nil {return nil ,_cea ;
};return &Decoder {_g :_gc ,_fc :_ca ,_ga :parameters },nil ;};type Decoder struct{_g _f .StreamReader ;_fc *_e .Document ;_gd int ;_ga Parameters ;};type Parameters struct{UnpaddedData bool ;Color _b .Color ;};