//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_f "github.com/unidoc/unipdf/v3/internal/bitwise";_cd "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_cb "github.com/unidoc/unipdf/v3/internal/jbig2/document";_ff "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";
);func (_fb *Decoder )DecodeNextPage ()([]byte ,error ){_fb ._b ++;_gg :=_fb ._b ;return _fb .decodePage (_gg );};func (_be *Decoder )decodePageImage (_dc int )(_c .Image ,error ){const _cg ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _dc < 0{return nil ,_ff .Errorf (_cg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_dc );};if _dc > int (_be ._cc .NumberOfPages ){return nil ,_ff .Errorf (_cg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_dc );
};_dd ,_bd :=_be ._cc .GetPage (_dc );if _bd !=nil {return nil ,_ff .Wrap (_bd ,_cg ,"");};_fbc ,_bd :=_dd .GetBitmap ();if _bd !=nil {return nil ,_ff .Wrap (_bd ,_cg ,"");};_fbc .InverseData ();return _fbc .ToImage (),nil ;};func Decode (input []byte ,parameters Parameters ,globals *_cb .Globals )(*Decoder ,error ){_cda :=_f .NewReader (input );
_gf ,_ee :=_cb .DecodeDocument (_cda ,globals );if _ee !=nil {return nil ,_ee ;};return &Decoder {_ec :_cda ,_cc :_gf ,_a :parameters },nil ;};type Decoder struct{_ec _f .StreamReader ;_cc *_cb .Document ;_b int ;_a Parameters ;};func (_d *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _bb ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_ac ,_g :=_d .decodePageImage (pageNumber );if _g !=nil {return nil ,_ff .Wrap (_g ,_bb ,"");};return _ac ,nil ;};func (_eb *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _eb .decodePage (pageNumber )};func (_acf *Decoder )decodePage (_fc int )([]byte ,error ){const _dg ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _fc < 0{return nil ,_ff .Errorf (_dg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fc );};if _fc > int (_acf ._cc .NumberOfPages ){return nil ,_ff .Errorf (_dg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fc );
};_de ,_cbf :=_acf ._cc .GetPage (_fc );if _cbf !=nil {return nil ,_ff .Wrap (_cbf ,_dg ,"");};_fg ,_cbf :=_de .GetBitmap ();if _cbf !=nil {return nil ,_ff .Wrap (_cbf ,_dg ,"");};_fg .InverseData ();if !_acf ._a .UnpaddedData {return _fg .Data ,nil ;};
return _fg .GetUnpaddedData ();};type Parameters struct{UnpaddedData bool ;Color _cd .Color ;};func (_da *Decoder )PageNumber ()(int ,error ){const _ga ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _da ._cc ==nil {return 0,_ff .Error (_ga ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_da ._cc .NumberOfPages ),nil ;};