//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_c "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_bg "github.com/unidoc/unipdf/v3/internal/jbig2/document";_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_bd "image";
);func (_d *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _d .decodePage (pageNumber )};func (_e *Decoder )decodePage (_ca int )([]byte ,error ){const _fc ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _ca < 0{return nil ,_g .Errorf (_fc ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ca );
};if _ca > int (_e ._f .NumberOfPages ){return nil ,_g .Errorf (_fc ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ca );
};_bf ,_ff :=_e ._f .GetPage (_ca );if _ff !=nil {return nil ,_g .Wrap (_ff ,_fc ,"");};_fcg ,_ff :=_bf .GetBitmap ();if _ff !=nil {return nil ,_g .Wrap (_ff ,_fc ,"");};_fcg .InverseData ();if !_e ._cd .UnpaddedData {return _fcg .Data ,nil ;};return _fcg .GetUnpaddedData ();
};func (_agd *Decoder )PageNumber ()(int ,error ){const _de ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _agd ._f ==nil {return 0,_g .Error (_de ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_agd ._f .NumberOfPages ),nil ;};type Parameters struct{UnpaddedData bool ;Color _a .Color ;};func Decode (input []byte ,parameters Parameters ,globals *_bg .Globals )(*Decoder ,error ){_ddc :=_c .NewReader (input );_ga ,_aa :=_bg .DecodeDocument (_ddc ,globals );
if _aa !=nil {return nil ,_aa ;};return &Decoder {_bc :_ddc ,_f :_ga ,_cd :parameters },nil ;};func (_ba *Decoder )DecodePageImage (pageNumber int )(_bd .Image ,error ){const _ag ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_bgf ,_gc :=_ba .decodePageImage (pageNumber );if _gc !=nil {return nil ,_g .Wrap (_gc ,_ag ,"");};return _bgf ,nil ;};func (_dd *Decoder )DecodeNextPage ()([]byte ,error ){_dd ._cf ++;_cg :=_dd ._cf ;return _dd .decodePage (_cg );};type Decoder struct{_bc *_c .Reader ;
_f *_bg .Document ;_cf int ;_cd Parameters ;};func (_ac *Decoder )decodePageImage (_cb int )(_bd .Image ,error ){const _fd ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _cb < 0{return nil ,_g .Errorf (_fd ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_cb );
};if _cb > int (_ac ._f .NumberOfPages ){return nil ,_g .Errorf (_fd ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_cb );
};_fe ,_fea :=_ac ._f .GetPage (_cb );if _fea !=nil {return nil ,_g .Wrap (_fea ,_fd ,"");};_ge ,_fea :=_fe .GetBitmap ();if _fea !=nil {return nil ,_g .Wrap (_fea ,_fd ,"");};_ge .InverseData ();return _ge .ToImage (),nil ;};