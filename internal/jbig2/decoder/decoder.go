//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_ce "github.com/unidoc/unipdf/v3/internal/bitwise";_cf "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_bd "github.com/unidoc/unipdf/v3/internal/jbig2/document";_b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";);type Parameters struct{UnpaddedData bool ;Color _cf .Color ;};func (_ae *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _cfec ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_bf ,_fc :=_ae .decodePageImage (pageNumber );if _fc !=nil {return nil ,_b .Wrap (_fc ,_cfec ,"");};return _bf ,nil ;};func (_d *Decoder )decodePage (_fd int )([]byte ,error ){const _ca ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _fd < 0{return nil ,_b .Errorf (_ca ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fd );};if _fd > int (_d ._bb .NumberOfPages ){return nil ,_b .Errorf (_ca ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fd );};_bc ,_ad :=_d ._bb .GetPage (_fd );if _ad !=nil {return nil ,_b .Wrap (_ad ,_ca ,"");};_dd ,_ad :=_bc .GetBitmap ();if _ad !=nil {return nil ,_b .Wrap (_ad ,_ca ,"");};_dd .InverseData ();if !_d ._cfea .UnpaddedData {return _dd .Data ,nil ;};return _dd .GetUnpaddedData ();};func (_ddb *Decoder )decodePageImage (_e int )(_c .Image ,error ){const _aa ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _e < 0{return nil ,_b .Errorf (_aa ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_e );};if _e > int (_ddb ._bb .NumberOfPages ){return nil ,_b .Errorf (_aa ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_e );};_bcb ,_db :=_ddb ._bb .GetPage (_e );if _db !=nil {return nil ,_b .Wrap (_db ,_aa ,"");};_de ,_db :=_bcb .GetBitmap ();if _db !=nil {return nil ,_b .Wrap (_db ,_aa ,"");};return _de .ToImage (),nil ;};func (_g *Decoder )PageNumber ()(int ,error ){const _gd ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _g ._bb ==nil {return 0,_b .Error (_gd ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_g ._bb .NumberOfPages ),nil ;};type Decoder struct{_f _ce .StreamReader ;_bb *_bd .Document ;_cfe int ;_cfea Parameters ;};func (_fcd *Decoder )DecodeNextPage ()([]byte ,error ){_fcd ._cfe ++;_cb :=_fcd ._cfe ;return _fcd .decodePage (_cb );};func (_af *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _af .decodePage (pageNumber )};func Decode (input []byte ,parameters Parameters ,globals *_bd .Globals )(*Decoder ,error ){_dde :=_ce .NewReader (input );_ef ,_ceg :=_bd .DecodeDocument (_dde ,globals );if _ceg !=nil {return nil ,_ceg ;};return &Decoder {_f :_dde ,_bb :_ef ,_cfea :parameters },nil ;};