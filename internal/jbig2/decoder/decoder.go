//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_bf "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_a "github.com/unidoc/unipdf/v3/internal/jbig2/document";_f "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_b "image";
);func Decode (input []byte ,parameters Parameters ,globals *_a .Globals )(*Decoder ,error ){_fdb :=_bf .NewReader (input );_be ,_fc :=_a .DecodeDocument (_fdb ,globals );if _fc !=nil {return nil ,_fc ;};return &Decoder {_d :_fdb ,_ba :_be ,_dg :parameters },nil ;
};func (_ed *Decoder )DecodePageImage (pageNumber int )(_b .Image ,error ){const _fb ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_af ,_afc :=_ed .decodePageImage (pageNumber );
if _afc !=nil {return nil ,_f .Wrap (_afc ,_fb ,"");};return _af ,nil ;};func (_c *Decoder )DecodeNextPage ()([]byte ,error ){_c ._gd ++;_fd :=_c ._gd ;return _c .decodePage (_fd );};func (_fde *Decoder )PageNumber ()(int ,error ){const _gb ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _fde ._ba ==nil {return 0,_f .Error (_gb ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_fde ._ba .NumberOfPages ),nil ;};func (_df *Decoder )decodePage (_fa int )([]byte ,error ){const _ab ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _fa < 0{return nil ,_f .Errorf (_ab ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fa );};if _fa > int (_df ._ba .NumberOfPages ){return nil ,_f .Errorf (_ab ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fa );
};_ce ,_bc :=_df ._ba .GetPage (_fa );if _bc !=nil {return nil ,_f .Wrap (_bc ,_ab ,"");};_abd ,_bc :=_ce .GetBitmap ();if _bc !=nil {return nil ,_f .Wrap (_bc ,_ab ,"");};_abd .InverseData ();if !_df ._dg .UnpaddedData {return _abd .Data ,nil ;};return _abd .GetUnpaddedData ();
};func (_gbf *Decoder )decodePageImage (_eg int )(_b .Image ,error ){const _ec ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _eg < 0{return nil ,_f .Errorf (_ec ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_eg );
};if _eg > int (_gbf ._ba .NumberOfPages ){return nil ,_f .Errorf (_ec ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_eg );
};_gda ,_edf :=_gbf ._ba .GetPage (_eg );if _edf !=nil {return nil ,_f .Wrap (_edf ,_ec ,"");};_ece ,_edf :=_gda .GetBitmap ();if _edf !=nil {return nil ,_f .Wrap (_edf ,_ec ,"");};_ece .InverseData ();return _ece .ToImage (),nil ;};type Parameters struct{UnpaddedData bool ;
Color _g .Color ;};func (_ef *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _ef .decodePage (pageNumber )};type Decoder struct{_d _bf .StreamReader ;_ba *_a .Document ;_gd int ;_dg Parameters ;};