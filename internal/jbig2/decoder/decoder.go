//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_b "github.com/unidoc/unipdf/v3/internal/bitwise";_df "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_g "github.com/unidoc/unipdf/v3/internal/jbig2/document";_ba "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";
);func (_db *Decoder )DecodeNextPage ()([]byte ,error ){_db ._gb ++;_ad :=_db ._gb ;return _db .decodePage (_ad );};func (_dc *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _dc .decodePage (pageNumber )};type Parameters struct{UnpaddedData bool ;
Color _df .Color ;};func (_cb *Decoder )decodePage (_e int )([]byte ,error ){const _gf ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _e < 0{return nil ,_ba .Errorf (_gf ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_e );
};if _e > int (_cb ._f .NumberOfPages ){return nil ,_ba .Errorf (_gf ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_e );
};_cc ,_aa :=_cb ._f .GetPage (_e );if _aa !=nil {return nil ,_ba .Wrap (_aa ,_gf ,"");};_cf ,_aa :=_cc .GetBitmap ();if _aa !=nil {return nil ,_ba .Wrap (_aa ,_gf ,"");};_cf .InverseData ();if !_cb ._a .UnpaddedData {return _cf .Data ,nil ;};return _cf .GetUnpaddedData ();
};func (_gg *Decoder )DecodePageImage (pageNumber int )(_d .Image ,error ){const _dd ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_bg ,_da :=_gg .decodePageImage (pageNumber );
if _da !=nil {return nil ,_ba .Wrap (_da ,_dd ,"");};return _bg ,nil ;};type Decoder struct{_ca _b .StreamReader ;_f *_g .Document ;_gb int ;_a Parameters ;};func (_eb *Decoder )decodePageImage (_fa int )(_d .Image ,error ){const _be ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _fa < 0{return nil ,_ba .Errorf (_be ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fa );};if _fa > int (_eb ._f .NumberOfPages ){return nil ,_ba .Errorf (_be ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fa );
};_gfe ,_cfe :=_eb ._f .GetPage (_fa );if _cfe !=nil {return nil ,_ba .Wrap (_cfe ,_be ,"");};_aaf ,_cfe :=_gfe .GetBitmap ();if _cfe !=nil {return nil ,_ba .Wrap (_cfe ,_be ,"");};_aaf .InverseData ();return _aaf .ToImage (),nil ;};func (_ga *Decoder )PageNumber ()(int ,error ){const _fc ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _ga ._f ==nil {return 0,_ba .Error (_fc ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_ga ._f .NumberOfPages ),nil ;};func Decode (input []byte ,parameters Parameters ,globals *_g .Globals )(*Decoder ,error ){_bb :=_b .NewReader (input );
_bec ,_gac :=_g .DecodeDocument (_bb ,globals );if _gac !=nil {return nil ,_gac ;};return &Decoder {_ca :_bb ,_f :_bec ,_a :parameters },nil ;};