//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_b "github.com/unidoc/unipdf/v3/internal/bitwise";_ac "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_dd "github.com/unidoc/unipdf/v3/internal/jbig2/document";_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";);func (_df *Decoder )DecodePageImage (pageNumber int )(_d .Image ,error ){const _c ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_eg ,_ec :=_df .decodePageImage (pageNumber );if _ec !=nil {return nil ,_g .Wrap (_ec ,_c ,"");};return _eg ,nil ;};type Parameters struct{UnpaddedData bool ;Color _ac .Color ;};func (_ce *Decoder )decodePageImage (_db int )(_d .Image ,error ){const _ga ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _db < 0{return nil ,_g .Errorf (_ga ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_db );};if _db > int (_ce ._ad .NumberOfPages ){return nil ,_g .Errorf (_ga ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_db );};_ag ,_ebf :=_ce ._ad .GetPage (_db );if _ebf !=nil {return nil ,_g .Wrap (_ebf ,_ga ,"");};_gae ,_ebf :=_ag .GetBitmap ();if _ebf !=nil {return nil ,_g .Wrap (_ebf ,_ga ,"");};return _gae .ToImage (),nil ;};func (_aa *Decoder )PageNumber ()(int ,error ){const _gd ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _aa ._ad ==nil {return 0,_g .Error (_gd ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_aa ._ad .NumberOfPages ),nil ;};func (_cf *Decoder )decodePage (_fa int )([]byte ,error ){const _fac ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _fa < 0{return nil ,_g .Errorf (_fac ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fa );};if _fa > int (_cf ._ad .NumberOfPages ){return nil ,_g .Errorf (_fac ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fa );};_bg ,_ee :=_cf ._ad .GetPage (_fa );if _ee !=nil {return nil ,_g .Wrap (_ee ,_fac ,"");};_eb ,_ee :=_bg .GetBitmap ();if _ee !=nil {return nil ,_g .Wrap (_ee ,_fac ,"");};_eb .InverseData ();if !_cf ._f .UnpaddedData {return _eb .Data ,nil ;};return _eb .GetUnpaddedData ();};func (_gg *Decoder )DecodeNextPage ()([]byte ,error ){_gg ._ae ++;_gf :=_gg ._ae ;return _gg .decodePage (_gf );};type Decoder struct{_ba _b .StreamReader ;_ad *_dd .Document ;_ae int ;_f Parameters ;};func (_e *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _e .decodePage (pageNumber )};func Decode (input []byte ,parameters Parameters ,globals *_dd .Globals )(*Decoder ,error ){_fg :=_b .NewReader (input );_be ,_af :=_dd .DecodeDocument (_fg ,globals );if _af !=nil {return nil ,_af ;};return &Decoder {_ba :_fg ,_ad :_be ,_f :parameters },nil ;};