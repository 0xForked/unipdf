//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_ba "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_bg "github.com/unidoc/unipdf/v3/internal/jbig2/document";_a "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_e "image";);func (_d *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _d .decodePage (pageNumber )};type Decoder struct{_ef _ba .StreamReader ;_ea *_bg .Document ;_ed int ;_g Parameters ;};func (_bge *Decoder )DecodeNextPage ()([]byte ,error ){_bge ._ed ++;_eb :=_bge ._ed ;return _bge .decodePage (_eb );};func (_ac *Decoder )PageNumber ()(int ,error ){const _bc ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _ac ._ea ==nil {return 0,_a .Error (_bc ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_ac ._ea .NumberOfPages ),nil ;};func Decode (input []byte ,parameters Parameters ,globals *_bg .Globals )(*Decoder ,error ){_ad :=_ba .NewReader (input );_bf ,_edc :=_bg .DecodeDocument (_ad ,globals );if _edc !=nil {return nil ,_edc ;};return &Decoder {_ef :_ad ,_ea :_bf ,_g :parameters },nil ;};type Parameters struct{UnpaddedData bool ;Color _c .Color ;};func (_dg *Decoder )DecodePageImage (pageNumber int )(_e .Image ,error ){const _df ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_bag ,_f :=_dg .decodePageImage (pageNumber );if _f !=nil {return nil ,_a .Wrap (_f ,_df ,"");};return _bag ,nil ;};func (_dc *Decoder )decodePage (_fg int )([]byte ,error ){const _dcd ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _fg < 0{return nil ,_a .Errorf (_dcd ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fg );};if _fg > int (_dc ._ea .NumberOfPages ){return nil ,_a .Errorf (_dcd ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fg );};_be ,_fb :=_dc ._ea .GetPage (_fg );if _fb !=nil {return nil ,_a .Wrap (_fb ,_dcd ,"");};_bed ,_fb :=_be .GetBitmap ();if _fb !=nil {return nil ,_a .Wrap (_fb ,_dcd ,"");};_bed .InverseData ();if !_dc ._g .UnpaddedData {return _bed .Data ,nil ;};return _bed .GetUnpaddedData ();};func (_ag *Decoder )decodePageImage (_ee int )(_e .Image ,error ){const _fe ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _ee < 0{return nil ,_a .Errorf (_fe ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ee );};if _ee > int (_ag ._ea .NumberOfPages ){return nil ,_a .Errorf (_fe ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ee );};_beb ,_ce :=_ag ._ea .GetPage (_ee );if _ce !=nil {return nil ,_a .Wrap (_ce ,_fe ,"");};_dfc ,_ce :=_beb .GetBitmap ();if _ce !=nil {return nil ,_a .Wrap (_ce ,_fe ,"");};_dfc .InverseData ();return _dfc .ToImage (),nil ;};