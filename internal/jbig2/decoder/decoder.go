//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_g "github.com/unidoc/unipdf/v3/internal/bitwise";_ae "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_f "github.com/unidoc/unipdf/v3/internal/jbig2/document";_ad "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_a "image";);func (_cd *Decoder )PageNumber ()(int ,error ){const _af ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _cd ._gd ==nil {return 0,_ad .Error (_af ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_cd ._gd .NumberOfPages ),nil ;};func (_cc *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _cc .decodePage (pageNumber )};type Parameters struct{UnpaddedData bool ;Color _ae .Color ;};func (_db *Decoder )decodePage (_cb int )([]byte ,error ){const _gee ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _cb < 0{return nil ,_ad .Errorf (_gee ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_cb );};if _cb > int (_db ._gd .NumberOfPages ){return nil ,_ad .Errorf (_gee ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_cb );};_ec ,_dd :=_db ._gd .GetPage (_cb );if _dd !=nil {return nil ,_ad .Wrap (_dd ,_gee ,"");};_ada ,_dd :=_ec .GetBitmap ();if _dd !=nil {return nil ,_ad .Wrap (_dd ,_gee ,"");};_ada .InverseData ();if !_db ._e .UnpaddedData {return _ada .Data ,nil ;};return _ada .GetUnpaddedData ();};func (_ed *Decoder )DecodeNextPage ()([]byte ,error ){_ed ._fc ++;_ge :=_ed ._fc ;return _ed .decodePage (_ge );};func Decode (input []byte ,parameters Parameters ,globals *_f .Globals )(*Decoder ,error ){_fa :=_g .NewReader (input );_gb ,_fb :=_f .DecodeDocument (_fa ,globals );if _fb !=nil {return nil ,_fb ;};return &Decoder {_c :_fa ,_gd :_gb ,_e :parameters },nil ;};func (_ac *Decoder )DecodePageImage (pageNumber int )(_a .Image ,error ){const _d ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_fe ,_ea :=_ac .decodePageImage (pageNumber );if _ea !=nil {return nil ,_ad .Wrap (_ea ,_d ,"");};return _fe ,nil ;};func (_gda *Decoder )decodePageImage (_adf int )(_a .Image ,error ){const _cg ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _adf < 0{return nil ,_ad .Errorf (_cg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_adf );};if _adf > int (_gda ._gd .NumberOfPages ){return nil ,_ad .Errorf (_cg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_adf );};_acd ,_fg :=_gda ._gd .GetPage (_adf );if _fg !=nil {return nil ,_ad .Wrap (_fg ,_cg ,"");};_dc ,_fg :=_acd .GetBitmap ();if _fg !=nil {return nil ,_ad .Wrap (_fg ,_cg ,"");};return _dc .ToImage (),nil ;};type Decoder struct{_c _g .StreamReader ;_gd *_f .Document ;_fc int ;_e Parameters ;};