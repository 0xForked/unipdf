//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_a "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_f "github.com/unidoc/unipdf/v3/internal/jbig2/document";_ea "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";
);func (_cb *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _ac ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_ed ,_be :=_cb .decodePageImage (pageNumber );
if _be !=nil {return nil ,_ea .Wrap (_be ,_ac ,"");};return _ed ,nil ;};func (_d *Decoder )PageNumber ()(int ,error ){const _g ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _d ._bb ==nil {return 0,_ea .Error (_g ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_d ._bb .NumberOfPages ),nil ;};func (_bbg *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _bbg .decodePage (pageNumber )};type Decoder struct{_fe *_a .Reader ;_bb *_f .Document ;_ba int ;_fa Parameters ;};func (_aa *Decoder )decodePageImage (_dg int )(_c .Image ,error ){const _ecb ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _dg < 0{return nil ,_ea .Errorf (_ecb ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_dg );};if _dg > int (_aa ._bb .NumberOfPages ){return nil ,_ea .Errorf (_ecb ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_dg );
};_fg ,_ee :=_aa ._bb .GetPage (_dg );if _ee !=nil {return nil ,_ea .Wrap (_ee ,_ecb ,"");};_df ,_ee :=_fg .GetBitmap ();if _ee !=nil {return nil ,_ea .Wrap (_ee ,_ecb ,"");};_df .InverseData ();return _df .ToImage (),nil ;};func (_ce *Decoder )DecodeNextPage ()([]byte ,error ){_ce ._ba ++;
_bbe :=_ce ._ba ;return _ce .decodePage (_bbe );};type Parameters struct{UnpaddedData bool ;Color _e .Color ;};func Decode (input []byte ,parameters Parameters ,globals *_f .Globals )(*Decoder ,error ){_fac :=_a .NewReader (input );_gg ,_ggd :=_f .DecodeDocument (_fac ,globals );
if _ggd !=nil {return nil ,_ggd ;};return &Decoder {_fe :_fac ,_bb :_gg ,_fa :parameters },nil ;};func (_eac *Decoder )decodePage (_ec int )([]byte ,error ){const _dd ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _ec < 0{return nil ,_ea .Errorf (_dd ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ec );
};if _ec > int (_eac ._bb .NumberOfPages ){return nil ,_ea .Errorf (_dd ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ec );
};_bg ,_ca :=_eac ._bb .GetPage (_ec );if _ca !=nil {return nil ,_ea .Wrap (_ca ,_dd ,"");};_fd ,_ca :=_bg .GetBitmap ();if _ca !=nil {return nil ,_ea .Wrap (_ca ,_dd ,"");};_fd .InverseData ();if !_eac ._fa .UnpaddedData {return _fd .Data ,nil ;};return _fd .GetUnpaddedData ();
};