//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_b "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_c "github.com/unidoc/unipdf/v3/internal/jbig2/document";_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "image";
);func (_e *Decoder )DecodePageImage (pageNumber int )(_f .Image ,error ){const _af ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_fg ,_fa :=_e .decodePageImage (pageNumber );
if _fa !=nil {return nil ,_g .Wrap (_fa ,_af ,"");};return _fg ,nil ;};func (_ea *Decoder )PageNumber ()(int ,error ){const _bg ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _ea ._db ==nil {return 0,_g .Error (_bg ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_ea ._db .NumberOfPages ),nil ;};type Parameters struct{UnpaddedData bool ;Color _a .Color ;};func Decode (input []byte ,parameters Parameters ,globals *_c .Globals )(*Decoder ,error ){_afb :=_b .NewReader (input );_ec ,_dg :=_c .DecodeDocument (_afb ,globals );
if _dg !=nil {return nil ,_dg ;};return &Decoder {_fc :_afb ,_db :_ec ,_bd :parameters },nil ;};func (_cg *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _cg .decodePage (pageNumber )};type Decoder struct{_fc *_b .Reader ;_db *_c .Document ;
_ge int ;_bd Parameters ;};func (_da *Decoder )DecodeNextPage ()([]byte ,error ){_da ._ge ++;_cc :=_da ._ge ;return _da .decodePage (_cc );};func (_caa *Decoder )decodePageImage (_cd int )(_f .Image ,error ){const _ab ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _cd < 0{return nil ,_g .Errorf (_ab ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_cd );};if _cd > int (_caa ._db .NumberOfPages ){return nil ,_g .Errorf (_ab ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_cd );
};_gg ,_cdc :=_caa ._db .GetPage (_cd );if _cdc !=nil {return nil ,_g .Wrap (_cdc ,_ab ,"");};_gb ,_cdc :=_gg .GetBitmap ();if _cdc !=nil {return nil ,_g .Wrap (_cdc ,_ab ,"");};_gb .InverseData ();return _gb .ToImage (),nil ;};func (_ca *Decoder )decodePage (_ad int )([]byte ,error ){const _ef ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _ad < 0{return nil ,_g .Errorf (_ef ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ad );};if _ad > int (_ca ._db .NumberOfPages ){return nil ,_g .Errorf (_ef ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ad );
};_bb ,_df :=_ca ._db .GetPage (_ad );if _df !=nil {return nil ,_g .Wrap (_df ,_ef ,"");};_ac ,_df :=_bb .GetBitmap ();if _df !=nil {return nil ,_g .Wrap (_df ,_ef ,"");};_ac .InverseData ();if !_ca ._bd .UnpaddedData {return _ac .Data ,nil ;};return _ac .GetUnpaddedData ();
};