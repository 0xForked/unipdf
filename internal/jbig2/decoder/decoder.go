//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_f "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_af "github.com/unidoc/unipdf/v3/internal/jbig2/document";_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_a "image";
);func Decode (input []byte ,parameters Parameters ,globals *_af .Globals )(*Decoder ,error ){_gd :=_f .NewReader (input );_cda ,_cff :=_af .DecodeDocument (_gd ,globals );if _cff !=nil {return nil ,_cff ;};return &Decoder {_gg :_gd ,_dc :_cda ,_c :parameters },nil ;
};func (_fd *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _fd .decodePage (pageNumber )};func (_db *Decoder )PageNumber ()(int ,error ){const _ff ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _db ._dc ==nil {return 0,_g .Error (_ff ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_db ._dc .NumberOfPages ),nil ;};func (_afe *Decoder )DecodeNextPage ()([]byte ,error ){_afe ._gb ++;
_gf :=_afe ._gb ;return _afe .decodePage (_gf );};func (_ga *Decoder )DecodePageImage (pageNumber int )(_a .Image ,error ){const _b ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_dcc ,_ea :=_ga .decodePageImage (pageNumber );if _ea !=nil {return nil ,_g .Wrap (_ea ,_b ,"");};return _dcc ,nil ;};type Parameters struct{UnpaddedData bool ;Color _e .Color ;};func (_bb *Decoder )decodePageImage (_dcf int )(_a .Image ,error ){const _ee ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _dcf < 0{return nil ,_g .Errorf (_ee ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_dcf );};if _dcf > int (_bb ._dc .NumberOfPages ){return nil ,_g .Errorf (_ee ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_dcf );
};_de ,_cg :=_bb ._dc .GetPage (_dcf );if _cg !=nil {return nil ,_g .Wrap (_cg ,_ee ,"");};_cd ,_cg :=_de .GetBitmap ();if _cg !=nil {return nil ,_g .Wrap (_cg ,_ee ,"");};_cd .InverseData ();return _cd .ToImage (),nil ;};type Decoder struct{_gg _f .StreamReader ;
_dc *_af .Document ;_gb int ;_c Parameters ;};func (_bd *Decoder )decodePage (_ab int )([]byte ,error ){const _dbd ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _ab < 0{return nil ,_g .Errorf (_dbd ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ab );
};if _ab > int (_bd ._dc .NumberOfPages ){return nil ,_g .Errorf (_dbd ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ab );
};_abe ,_fg :=_bd ._dc .GetPage (_ab );if _fg !=nil {return nil ,_g .Wrap (_fg ,_dbd ,"");};_cf ,_fg :=_abe .GetBitmap ();if _fg !=nil {return nil ,_g .Wrap (_fg ,_dbd ,"");};_cf .InverseData ();if !_bd ._c .UnpaddedData {return _cf .Data ,nil ;};return _cf .GetUnpaddedData ();
};