//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_d "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_fe "github.com/unidoc/unipdf/v3/internal/jbig2/document";_fg "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_b "image";
);func (_ag *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _ag .decodePage (pageNumber )};func (_bf *Decoder )PageNumber ()(int ,error ){const _fd ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _bf ._a ==nil {return 0,_fg .Error (_fd ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_bf ._a .NumberOfPages ),nil ;};func Decode (input []byte ,parameters Parameters ,globals *_fe .Globals )(*Decoder ,error ){_fc :=_d .NewReader (input );
_ae ,_db :=_fe .DecodeDocument (_fc ,globals );if _db !=nil {return nil ,_db ;};return &Decoder {_ff :_fc ,_a :_ae ,_ga :parameters },nil ;};type Decoder struct{_ff _d .StreamReader ;_a *_fe .Document ;_g int ;_ga Parameters ;};func (_ac *Decoder )DecodeNextPage ()([]byte ,error ){_ac ._g ++;
_dc :=_ac ._g ;return _ac .decodePage (_dc );};func (_eg *Decoder )decodePageImage (_acd int )(_b .Image ,error ){const _ce ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _acd < 0{return nil ,_fg .Errorf (_ce ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_acd );
};if _acd > int (_eg ._a .NumberOfPages ){return nil ,_fg .Errorf (_ce ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_acd );
};_fa ,_gd :=_eg ._a .GetPage (_acd );if _gd !=nil {return nil ,_fg .Wrap (_gd ,_ce ,"");};_df ,_gd :=_fa .GetBitmap ();if _gd !=nil {return nil ,_fg .Wrap (_gd ,_ce ,"");};_df .InverseData ();return _df .ToImage (),nil ;};func (_cf *Decoder )decodePage (_gad int )([]byte ,error ){const _cfe ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _gad < 0{return nil ,_fg .Errorf (_cfe ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_gad );};if _gad > int (_cf ._a .NumberOfPages ){return nil ,_fg .Errorf (_cfe ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_gad );
};_gg ,_bfa :=_cf ._a .GetPage (_gad );if _bfa !=nil {return nil ,_fg .Wrap (_bfa ,_cfe ,"");};_gaf ,_bfa :=_gg .GetBitmap ();if _bfa !=nil {return nil ,_fg .Wrap (_bfa ,_cfe ,"");};_gaf .InverseData ();if !_cf ._ga .UnpaddedData {return _gaf .Data ,nil ;
};return _gaf .GetUnpaddedData ();};type Parameters struct{UnpaddedData bool ;Color _c .Color ;};func (_ca *Decoder )DecodePageImage (pageNumber int )(_b .Image ,error ){const _e ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_dg ,_dd :=_ca .decodePageImage (pageNumber );if _dd !=nil {return nil ,_fg .Wrap (_dd ,_e ,"");};return _dg ,nil ;};