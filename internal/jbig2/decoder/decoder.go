//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_a "github.com/unidoc/unipdf/v3/internal/bitwise";_af "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_ab "github.com/unidoc/unipdf/v3/internal/jbig2/document";_ca "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";
);func (_bc *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _bg ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_abf ,_fg :=_bc .decodePageImage (pageNumber );
if _fg !=nil {return nil ,_ca .Wrap (_fg ,_bg ,"");};return _abf ,nil ;};type Decoder struct{_d _a .StreamReader ;_e *_ab .Document ;_f int ;_ed Parameters ;};func Decode (input []byte ,parameters Parameters ,globals *_ab .Globals )(*Decoder ,error ){_ag :=_a .NewReader (input );
_cfd ,_cee :=_ab .DecodeDocument (_ag ,globals );if _cee !=nil {return nil ,_cee ;};return &Decoder {_d :_ag ,_e :_cfd ,_ed :parameters },nil ;};func (_gc *Decoder )PageNumber ()(int ,error ){const _cag ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _gc ._e ==nil {return 0,_ca .Error (_cag ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_gc ._e .NumberOfPages ),nil ;};func (_fb *Decoder )decodePage (_bf int )([]byte ,error ){const _ce ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _bf < 0{return nil ,_ca .Errorf (_ce ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_bf );};if _bf > int (_fb ._e .NumberOfPages ){return nil ,_ca .Errorf (_ce ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_bf );
};_dg ,_cg :=_fb ._e .GetPage (_bf );if _cg !=nil {return nil ,_ca .Wrap (_cg ,_ce ,"");};_gf ,_cg :=_dg .GetBitmap ();if _cg !=nil {return nil ,_ca .Wrap (_cg ,_ce ,"");};_gf .InverseData ();if !_fb ._ed .UnpaddedData {return _gf .Data ,nil ;};return _gf .GetUnpaddedData ();
};func (_db *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _db .decodePage (pageNumber )};type Parameters struct{UnpaddedData bool ;Color _af .Color ;};func (_fa *Decoder )decodePageImage (_afb int )(_c .Image ,error ){const _df ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _afb < 0{return nil ,_ca .Errorf (_df ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_afb );};if _afb > int (_fa ._e .NumberOfPages ){return nil ,_ca .Errorf (_df ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_afb );
};_cf ,_de :=_fa ._e .GetPage (_afb );if _de !=nil {return nil ,_ca .Wrap (_de ,_df ,"");};_ef ,_de :=_cf .GetBitmap ();if _de !=nil {return nil ,_ca .Wrap (_de ,_df ,"");};_ef .InverseData ();return _ef .ToImage (),nil ;};func (_da *Decoder )DecodeNextPage ()([]byte ,error ){_da ._f ++;
_g :=_da ._f ;return _da .decodePage (_g );};