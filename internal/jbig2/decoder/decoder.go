//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_d "github.com/unidoc/unipdf/v3/internal/bitwise";_df "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_ff "github.com/unidoc/unipdf/v3/internal/jbig2/document";_e "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_b "image";
);func (_ddg *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _ddg .decodePage (pageNumber )};func (_a *Decoder )DecodePageImage (pageNumber int )(_b .Image ,error ){const _ed ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_bg ,_ae :=_a .decodePageImage (pageNumber );if _ae !=nil {return nil ,_e .Wrap (_ae ,_ed ,"");};return _bg ,nil ;};type Decoder struct{_bc _d .StreamReader ;_dd *_ff .Document ;_c int ;_dfd Parameters ;};type Parameters struct{UnpaddedData bool ;Color _df .Color ;
};func (_bgc *Decoder )DecodeNextPage ()([]byte ,error ){_bgc ._c ++;_be :=_bgc ._c ;return _bgc .decodePage (_be );};func Decode (input []byte ,parameters Parameters ,globals *_ff .Globals )(*Decoder ,error ){_dc :=_d .NewReader (input );_ddgb ,_gff :=_ff .DecodeDocument (_dc ,globals );
if _gff !=nil {return nil ,_gff ;};return &Decoder {_bc :_dc ,_dd :_ddgb ,_dfd :parameters },nil ;};func (_ba *Decoder )decodePageImage (_gf int )(_b .Image ,error ){const _ag ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _gf < 0{return nil ,_e .Errorf (_ag ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_gf );};if _gf > int (_ba ._dd .NumberOfPages ){return nil ,_e .Errorf (_ag ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_gf );
};_fbg ,_bcf :=_ba ._dd .GetPage (_gf );if _bcf !=nil {return nil ,_e .Wrap (_bcf ,_ag ,"");};_edg ,_bcf :=_fbg .GetBitmap ();if _bcf !=nil {return nil ,_e .Wrap (_bcf ,_ag ,"");};_edg .InverseData ();return _edg .ToImage (),nil ;};func (_g *Decoder )decodePage (_de int )([]byte ,error ){const _ec ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _de < 0{return nil ,_e .Errorf (_ec ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_de );};if _de > int (_g ._dd .NumberOfPages ){return nil ,_e .Errorf (_ec ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_de );
};_fb ,_ga :=_g ._dd .GetPage (_de );if _ga !=nil {return nil ,_e .Wrap (_ga ,_ec ,"");};_dff ,_ga :=_fb .GetBitmap ();if _ga !=nil {return nil ,_e .Wrap (_ga ,_ec ,"");};_dff .InverseData ();if !_g ._dfd .UnpaddedData {return _dff .Data ,nil ;};return _dff .GetUnpaddedData ();
};func (_ad *Decoder )PageNumber ()(int ,error ){const _cf ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _ad ._dd ==nil {return 0,_e .Error (_cf ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_ad ._dd .NumberOfPages ),nil ;};