//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_e "fmt";_ag "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_ab "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_g "io";_c "strings";);type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_ba _b .StreamReader ;_f uint8 ;_d uint64 ;_df uint32 ;_ff int64 ;_be int32 ;_bc int32 ;_gdc int64 ;};func (_dcc *Decoder )decodeIntBit (_dfd *DecoderStats )(int ,error ){_dfd .SetIndex (int32 (_dcc ._ff ));_ffde ,_bf :=_dcc .DecodeBit (_dfd );if _bf !=nil {_ag .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_bf );return _ffde ,_bf ;};if _dcc ._ff < 256{_dcc ._ff =((_dcc ._ff <<uint64 (1))|int64 (_ffde ))&0x1ff;}else {_dcc ._ff =(((_dcc ._ff <<uint64 (1)|int64 (_ffde ))&511)|256)&0x1ff;};return _ffde ,nil ;};var (_gd =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};);func (_afb *DecoderStats )Reset (){for _dbc :=0;_dbc < len (_afb ._ce );_dbc ++{_afb ._ce [_dbc ]=0;_afb ._ace [_dbc ]=0;};};func (_gaee *Decoder )lpsExchange (_bg *DecoderStats ,_dff int32 ,_ec uint32 )int {_aab :=_bg .getMps ();if _gaee ._df < _ec {_bg .setEntry (int (_gd [_dff ][1]));_gaee ._df =_ec ;return int (_aab );};if _gd [_dff ][3]==1{_bg .toggleMps ();};_bg .setEntry (int (_gd [_dff ][2]));_gaee ._df =_ec ;return int (1-_aab );};func (_feg *Decoder )mpsExchange (_baea *DecoderStats ,_gcd int32 )int {_aff :=_baea ._ace [_baea ._bge ];if _feg ._df < _gd [_gcd ][0]{if _gd [_gcd ][3]==1{_baea .toggleMps ();};_baea .setEntry (int (_gd [_gcd ][2]));return int (1-_aff );};_baea .setEntry (int (_gd [_gcd ][1]));return int (_aff );};func (_acc *Decoder )init ()error {_acc ._gdc =_acc ._ba .StreamPosition ();_aag ,_dca :=_acc ._ba .ReadByte ();if _dca !=nil {_ag .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_dca );return _dca ;};_acc ._f =_aag ;_acc ._d =uint64 (_aag )<<16;if _dca =_acc .readByte ();_dca !=nil {return _dca ;};_acc ._d <<=7;_acc ._be -=7;_acc ._df =0x8000;_acc ._bc ++;return nil ;};func (_eaf *DecoderStats )toggleMps (){_eaf ._ace [_eaf ._bge ]^=1};func (_eg *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_eg ._ff =1;var _gc uint64 ;for _gc =0;_gc < codeLen ;_gc ++{stats .SetIndex (int32 (_eg ._ff ));_ee ,_aa :=_eg .DecodeBit (stats );if _aa !=nil {return 0,_aa ;};_eg ._ff =(_eg ._ff <<1)|int64 (_ee );};_bae :=_eg ._ff -(1<<codeLen );return _bae ,nil ;};func (_cc *DecoderStats )getMps ()byte {return _cc ._ace [_cc ._bge ]};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_bge :index ,_fed :contextSize ,_ce :make ([]byte ,contextSize ),_ace :make ([]byte ,contextSize )};};func (_cd *DecoderStats )cx ()byte {return _cd ._ce [_cd ._bge ]};func (_cb *Decoder )renormalize ()error {for {if _cb ._be ==0{if _fcb :=_cb .readByte ();_fcb !=nil {return _fcb ;};};_cb ._df <<=1;_cb ._d <<=1;_cb ._be --;if (_cb ._df &0x8000)!=0{break ;};};_cb ._d &=0xffffffff;return nil ;};func (_fb *DecoderStats )SetIndex (index int32 ){_fb ._bge =index };func (_eae *DecoderStats )Copy ()*DecoderStats {_gb :=&DecoderStats {_fed :_eae ._fed ,_ce :make ([]byte ,_eae ._fed )};for _bda :=0;_bda < len (_eae ._ce );_bda ++{_gb ._ce [_bda ]=_eae ._ce [_bda ];};return _gb ;};func (_geb *DecoderStats )String ()string {_dae :=&_c .Builder {};_dae .WriteString (_e .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_geb ._ce )));for _bff ,_gdb :=range _geb ._ce {if _gdb !=0{_dae .WriteString (_e .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_bff ,_gdb ));};};return _dae .String ();};func (_dad *DecoderStats )Overwrite (dNew *DecoderStats ){for _aba :=0;_aba < len (_dad ._ce );_aba ++{_dad ._ce [_aba ]=dNew ._ce [_aba ];_dad ._ace [_aba ]=dNew ._ace [_aba ];};};type DecoderStats struct{_bge int32 ;_fed int32 ;_ce []byte ;_ace []byte ;};func (_eb *DecoderStats )setEntry (_eag int ){_dcd :=byte (_eag &0x7f);_eb ._ce [_eb ._bge ]=_dcd };func New (r _b .StreamReader )(*Decoder ,error ){_ga :=&Decoder {_ba :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _bd :=_ga .init ();_bd !=nil {return nil ,_bd ;};return _ga ,nil ;};func (_dd *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_ac int ;_db =_gd [stats .cx ()][0];_af =int32 (stats .cx ()););defer func (){_dd ._bc ++}();_dd ._df -=_db ;if (_dd ._d >>16)< uint64 (_db ){_ac =_dd .lpsExchange (stats ,_af ,_db );if _da :=_dd .renormalize ();_da !=nil {return 0,_da ;};}else {_dd ._d -=uint64 (_db )<<16;if (_dd ._df &0x8000)==0{_ac =_dd .mpsExchange (stats ,_af );if _ffd :=_dd .renormalize ();_ffd !=nil {return 0,_ffd ;};}else {_ac =int (stats .getMps ());};};return _ac ,nil ;};func (_ef *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_fe ,_fc int32 ;_dfb ,_dc ,_cf int ;_gae error ;);if stats ==nil {stats =NewStats (512,1);};_ef ._ff =1;_dc ,_gae =_ef .decodeIntBit (stats );if _gae !=nil {return 0,_gae ;};_dfb ,_gae =_ef .decodeIntBit (stats );if _gae !=nil {return 0,_gae ;};if _dfb ==1{_dfb ,_gae =_ef .decodeIntBit (stats );if _gae !=nil {return 0,_gae ;};if _dfb ==1{_dfb ,_gae =_ef .decodeIntBit (stats );if _gae !=nil {return 0,_gae ;};if _dfb ==1{_dfb ,_gae =_ef .decodeIntBit (stats );if _gae !=nil {return 0,_gae ;};if _dfb ==1{_dfb ,_gae =_ef .decodeIntBit (stats );if _gae !=nil {return 0,_gae ;};if _dfb ==1{_cf =32;_fc =4436;}else {_cf =12;_fc =340;};}else {_cf =8;_fc =84;};}else {_cf =6;_fc =20;};}else {_cf =4;_fc =4;};}else {_cf =2;_fc =0;};for _acf :=0;_acf < _cf ;_acf ++{_dfb ,_gae =_ef .decodeIntBit (stats );if _gae !=nil {return 0,_gae ;};_fe =(_fe <<1)|int32 (_dfb );};_fe +=_fc ;if _dc ==0{return _fe ,nil ;}else if _dc ==1&&_fe > 0{return -_fe ,nil ;};return 0,_ab .ErrOOB ;};func (_ae *Decoder )readByte ()error {if _ae ._ba .StreamPosition ()> _ae ._gdc {if _ ,_ddf :=_ae ._ba .Seek (-1,_g .SeekCurrent );_ddf !=nil {return _ddf ;};};_ea ,_dg :=_ae ._ba .ReadByte ();if _dg !=nil {return _dg ;};_ae ._f =_ea ;if _ae ._f ==0xFF{_ad ,_afc :=_ae ._ba .ReadByte ();if _afc !=nil {return _afc ;};if _ad > 0x8F{_ae ._d +=0xFF00;_ae ._be =8;if _ ,_ge :=_ae ._ba .Seek (-2,_g .SeekCurrent );_ge !=nil {return _ge ;};}else {_ae ._d +=uint64 (_ad )<<9;_ae ._be =7;};}else {_ea ,_dg =_ae ._ba .ReadByte ();if _dg !=nil {return _dg ;};_ae ._f =_ea ;_ae ._d +=uint64 (_ae ._f )<<8;_ae ._be =8;};_ae ._d &=0xFFFFFFFFFF;return nil ;};