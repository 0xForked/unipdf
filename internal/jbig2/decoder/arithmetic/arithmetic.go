//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_ga "fmt";_ac "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_a "io";_gb "math";_g "strings";);func (_ba *DecoderStats )toggleMps (){_ba ._dag [_ba ._fb ]^=1};func New (r _d .StreamReader )(*Decoder ,error ){_e :=&Decoder {_df :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _acb :=_e .init ();_acb !=nil {return nil ,_acb ;};return _e ,nil ;};func (_fe *DecoderStats )Reset (){for _ge :=0;_ge < len (_fe ._gff );_ge ++{_fe ._gff [_ge ]=0;_fe ._dag [_ge ]=0;};};func (_dgb *Decoder )readByte ()error {if _dgb ._df .StreamPosition ()> _dgb ._gfa {if _ ,_cag :=_dgb ._df .Seek (-1,_a .SeekCurrent );_cag !=nil {return _cag ;};};_ggf ,_dgbg :=_dgb ._df .ReadByte ();if _dgbg !=nil {return _dgbg ;};_dgb ._f =_ggf ;if _dgb ._f ==0xFF{_fgb ,_bfc :=_dgb ._df .ReadByte ();if _bfc !=nil {return _bfc ;};if _fgb > 0x8F{_dgb ._gd +=0xFF00;_dgb ._dd =8;if _ ,_af :=_dgb ._df .Seek (-2,_a .SeekCurrent );_af !=nil {return _af ;};}else {_dgb ._gd +=uint64 (_fgb )<<9;_dgb ._dd =7;};}else {_ggf ,_dgbg =_dgb ._df .ReadByte ();if _dgbg !=nil {return _dgbg ;};_dgb ._f =_ggf ;_dgb ._gd +=uint64 (_dgb ._f )<<8;_dgb ._dd =8;};_dgb ._gd &=0xFFFFFFFFFF;return nil ;};func (_feg *DecoderStats )getMps ()byte {return _feg ._dag [_feg ._fb ]};func (_dc *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_dc ._gf =1;var _ec uint64 ;for _ec =0;_ec < codeLen ;_ec ++{stats .SetIndex (int32 (_dc ._gf ));_gag ,_gbb :=_dc .DecodeBit (stats );if _gbb !=nil {return 0,_gbb ;};_dc ._gf =(_dc ._gf <<1)|int64 (_gag );};_da :=_dc ._gf -(1<<codeLen );return _da ,nil ;};func (_dde *Decoder )init ()error {_dde ._gfa =_dde ._df .StreamPosition ();_aa ,_ed :=_dde ._df .ReadByte ();if _ed !=nil {_ac .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ed );return _ed ;};_dde ._f =_aa ;_dde ._gd =uint64 (_aa )<<16;if _ed =_dde .readByte ();_ed !=nil {return _ed ;};_dde ._gd <<=7;_dde ._dd -=7;_dde ._b =0x8000;_dde ._db ++;return nil ;};var (_dg =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};);func (_ecd *Decoder )mpsExchange (_def *DecoderStats ,_bb int32 )int {_ebg :=_def ._dag [_def ._fb ];if _ecd ._b < _dg [_bb ][0]{if _dg [_bb ][3]==1{_def .toggleMps ();};_def .setEntry (int (_dg [_bb ][2]));return int (1-_ebg );};_def .setEntry (int (_dg [_bb ][1]));return int (_ebg );};func (_bd *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_bg ,_ca int32 ;_ae ,_gg ,_bf int ;_abd error ;);if stats ==nil {stats =NewStats (512,1);};_bd ._gf =1;_gg ,_abd =_bd .decodeIntBit (stats );if _abd !=nil {return 0,_abd ;};_ae ,_abd =_bd .decodeIntBit (stats );if _abd !=nil {return 0,_abd ;};if _ae ==1{_ae ,_abd =_bd .decodeIntBit (stats );if _abd !=nil {return 0,_abd ;};if _ae ==1{_ae ,_abd =_bd .decodeIntBit (stats );if _abd !=nil {return 0,_abd ;};if _ae ==1{_ae ,_abd =_bd .decodeIntBit (stats );if _abd !=nil {return 0,_abd ;};if _ae ==1{_ae ,_abd =_bd .decodeIntBit (stats );if _abd !=nil {return 0,_abd ;};if _ae ==1{_bf =32;_ca =4436;}else {_bf =12;_ca =340;};}else {_bf =8;_ca =84;};}else {_bf =6;_ca =20;};}else {_bf =4;_ca =4;};}else {_bf =2;_ca =0;};for _fg :=0;_fg < _bf ;_fg ++{_ae ,_abd =_bd .decodeIntBit (stats );if _abd !=nil {return 0,_abd ;};_bg =(_bg <<1)|int32 (_ae );};_bg +=_ca ;if _gg ==0{return _bg ,nil ;}else if _gg ==1&&_bg > 0{return -_bg ,nil ;};return _gb .MaxInt32 ,nil ;};func (_dfb *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_fa int ;_cb =_dg [stats .cx ()][0];_fae =int32 (stats .cx ()););defer func (){_dfb ._db ++}();_dfb ._b -=_cb ;if (_dfb ._gd >>16)< uint64 (_cb ){_fa =_dfb .lpsExchange (stats ,_fae ,_cb );if _be :=_dfb .renormalize ();_be !=nil {return 0,_be ;};}else {_dfb ._gd -=uint64 (_cb )<<16;if (_dfb ._b &0x8000)==0{_fa =_dfb .mpsExchange (stats ,_fae );if _ab :=_dfb .renormalize ();_ab !=nil {return 0,_ab ;};}else {_fa =int (stats .getMps ());};};return _fa ,nil ;};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_fb :index ,_eg :contextSize ,_gff :make ([]byte ,contextSize ),_dag :make ([]byte ,contextSize )};};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_df _d .StreamReader ;_f uint8 ;_gd uint64 ;_b uint32 ;_gf int64 ;_dd int32 ;_db int32 ;_gfa int64 ;};func (_dbg *DecoderStats )Overwrite (dNew *DecoderStats ){for _gc :=0;_gc < len (_dbg ._gff );_gc ++{_dbg ._gff [_gc ]=dNew ._gff [_gc ];_dbg ._dag [_gc ]=dNew ._dag [_gc ];};};func (_gfd *DecoderStats )SetIndex (index int32 ){_gfd ._fb =index };func (_eb *Decoder )renormalize ()error {for {if _eb ._dd ==0{if _ea :=_eb .readByte ();_ea !=nil {return _ea ;};};_eb ._b <<=1;_eb ._gd <<=1;_eb ._dd --;if (_eb ._b &0x8000)!=0{break ;};};_eb ._gd &=0xffffffff;return nil ;};func (_ddg *DecoderStats )cx ()byte {return _ddg ._gff [_ddg ._fb ]};func (_cf *DecoderStats )Copy ()*DecoderStats {_bfg :=&DecoderStats {_eg :_cf ._eg ,_gff :make ([]byte ,_cf ._eg )};for _dfba :=0;_dfba < len (_cf ._gff );_dfba ++{_bfg ._gff [_dfba ]=_cf ._gff [_dfba ];};return _bfg ;};func (_gbbb *DecoderStats )String ()string {_gec :=&_g .Builder {};_gec .WriteString (_ga .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_gbbb ._gff )));for _faeb ,_bdf :=range _gbbb ._gff {if _bdf !=0{_gec .WriteString (_ga .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_faeb ,_bdf ));};};return _gec .String ();};type DecoderStats struct{_fb int32 ;_eg int32 ;_gff []byte ;_dag []byte ;};func (_ag *Decoder )decodeIntBit (_ef *DecoderStats )(int ,error ){_ef .SetIndex (int32 (_ag ._gf ));_abf ,_dff :=_ag .DecodeBit (_ef );if _dff !=nil {_ac .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_dff );return _abf ,_dff ;};if _ag ._gf < 256{_ag ._gf =((_ag ._gf <<uint64 (1))|int64 (_abf ))&0x1ff;}else {_ag ._gf =(((_ag ._gf <<uint64 (1)|int64 (_abf ))&511)|256)&0x1ff;};return _abf ,nil ;};func (_bgb *Decoder )lpsExchange (_gge *DecoderStats ,_bc int32 ,_abdf uint32 )int {_gage :=_gge .getMps ();if _bgb ._b < _abdf {_gge .setEntry (int (_dg [_bc ][1]));_bgb ._b =_abdf ;return int (_gage );};if _dg [_bc ][3]==1{_gge .toggleMps ();};_gge .setEntry (int (_dg [_bc ][2]));_bgb ._b =_abdf ;return int (1-_gage );};func (_bca *DecoderStats )setEntry (_cd int ){_dga :=byte (_cd &0x7f);_bca ._gff [_bca ._fb ]=_dga };