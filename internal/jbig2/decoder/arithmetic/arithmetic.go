//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_f "fmt";_b "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_bb "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ae "io";_c "strings";);type DecoderStats struct{_aeg int32 ;_cb int32 ;
_gfe []byte ;_geg []byte ;};func (_gbe *Decoder )mpsExchange (_dc *DecoderStats ,_cga int32 )int {_cf :=_dc ._geg [_dc ._aeg ];if _gbe ._cc < _cg [_cga ][0]{if _cg [_cga ][3]==1{_dc .toggleMps ();};_dc .setEntry (int (_cg [_cga ][2]));return int (1-_cf );
};_dc .setEntry (int (_cg [_cga ][1]));return int (_cf );};func (_bbb *Decoder )decodeIntBit (_gff *DecoderStats )(int ,error ){_gff .SetIndex (int32 (_bbb ._db ));_af ,_bccf :=_bbb .DecodeBit (_gff );if _bccf !=nil {_b .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_bccf );
return _af ,_bccf ;};if _bbb ._db < 256{_bbb ._db =((_bbb ._db <<uint64 (1))|int64 (_af ))&0x1ff;}else {_bbb ._db =(((_bbb ._db <<uint64 (1)|int64 (_af ))&511)|256)&0x1ff;};return _af ,nil ;};func (_gegf *DecoderStats )getMps ()byte {return _gegf ._geg [_gegf ._aeg ]};
func (_gf *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_gf ._db =1;var _gb uint64 ;for _gb =0;_gb < codeLen ;_gb ++{stats .SetIndex (int32 (_gf ._db ));_ebf ,_gg :=_gf .DecodeBit (stats );if _gg !=nil {return 0,_gg ;};_gf ._db =(_gf ._db <<1)|int64 (_ebf );
};_bcd :=_gf ._db -(1<<codeLen );return _bcd ,nil ;};func (_gfb *DecoderStats )cx ()byte {return _gfb ._gfe [_gfb ._aeg ]};func (_dfa *Decoder )init ()error {_dfa ._be =_dfa ._d .StreamPosition ();_eea ,_dd :=_dfa ._d .ReadByte ();if _dd !=nil {_b .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_dd );
return _dd ;};_dfa ._g =_eea ;_dfa ._eb =uint64 (_eea )<<16;if _dd =_dfa .readByte ();_dd !=nil {return _dd ;};_dfa ._eb <<=7;_dfa ._aa -=7;_dfa ._cc =0x8000;_dfa ._bc ++;return nil ;};func New (r _e .StreamReader )(*Decoder ,error ){_ad :=&Decoder {_d :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _bd :=_ad .init ();_bd !=nil {return nil ,_bd ;};return _ad ,nil ;};func (_ada *Decoder )lpsExchange (_cfc *DecoderStats ,_cd int32 ,_fg uint32 )int {_ba :=_cfc .getMps ();if _ada ._cc < _fg {_cfc .setEntry (int (_cg [_cd ][1]));_ada ._cc =_fg ;return int (_ba );
};if _cg [_cd ][3]==1{_cfc .toggleMps ();};_cfc .setEntry (int (_cg [_cd ][2]));_ada ._cc =_fg ;return int (1-_ba );};func (_gc *DecoderStats )Overwrite (dNew *DecoderStats ){for _ce :=0;_ce < len (_gc ._gfe );_ce ++{_gc ._gfe [_ce ]=dNew ._gfe [_ce ];
_gc ._geg [_ce ]=dNew ._geg [_ce ];};};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_aeg :index ,_cb :contextSize ,_gfe :make ([]byte ,contextSize ),_geg :make ([]byte ,contextSize )};};func (_adef *DecoderStats )Reset (){for _dcc :=0;
_dcc < len (_adef ._gfe );_dcc ++{_adef ._gfe [_dcc ]=0;_adef ._geg [_dcc ]=0;};};func (_caf *Decoder )readByte ()error {if _caf ._d .StreamPosition ()> _caf ._be {if _ ,_ff :=_caf ._d .Seek (-1,_ae .SeekCurrent );_ff !=nil {return _ff ;};};_agb ,_aae :=_caf ._d .ReadByte ();
if _aae !=nil {return _aae ;};_caf ._g =_agb ;if _caf ._g ==0xFF{_fe ,_ade :=_caf ._d .ReadByte ();if _ade !=nil {return _ade ;};if _fe > 0x8F{_caf ._eb +=0xFF00;_caf ._aa =8;if _ ,_bcf :=_caf ._d .Seek (-2,_ae .SeekCurrent );_bcf !=nil {return _bcf ;};
}else {_caf ._eb +=uint64 (_fe )<<9;_caf ._aa =7;};}else {_agb ,_aae =_caf ._d .ReadByte ();if _aae !=nil {return _aae ;};_caf ._g =_agb ;_caf ._eb +=uint64 (_caf ._g )<<8;_caf ._aa =8;};_caf ._eb &=0xFFFFFFFFFF;return nil ;};func (_bf *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_bg int ;
_bdg =_cg [stats .cx ()][0];_ag =int32 (stats .cx ()););defer func (){_bf ._bc ++}();_bf ._cc -=_bdg ;if (_bf ._eb >>16)< uint64 (_bdg ){_bg =_bf .lpsExchange (stats ,_ag ,_bdg );if _ge :=_bf .renormalize ();_ge !=nil {return 0,_ge ;};}else {_bf ._eb -=uint64 (_bdg )<<16;
if (_bf ._cc &0x8000)==0{_bg =_bf .mpsExchange (stats ,_ag );if _ee :=_bf .renormalize ();_ee !=nil {return 0,_ee ;};}else {_bg =int (stats .getMps ());};};return _bg ,nil ;};func (_ecc *DecoderStats )SetIndex (index int32 ){_ecc ._aeg =index };func (_bbbf *DecoderStats )Copy ()*DecoderStats {_cbe :=&DecoderStats {_cb :_bbbf ._cb ,_gfe :make ([]byte ,_bbbf ._cb )};
for _ec :=0;_ec < len (_bbbf ._gfe );_ec ++{_cbe ._gfe [_ec ]=_bbbf ._gfe [_ec ];};return _cbe ;};func (_ga *DecoderStats )String ()string {_dbf :=&_c .Builder {};_dbf .WriteString (_f .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_ga ._gfe )));
for _bff ,_de :=range _ga ._gfe {if _de !=0{_dbf .WriteString (_f .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_bff ,_de ));};};return _dbf .String ();};var (_cg =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_d _e .StreamReader ;_g uint8 ;_eb uint64 ;_cc uint32 ;_db int64 ;_aa int32 ;_bc int32 ;_be int64 ;};func (_cafc *Decoder )renormalize ()error {for {if _cafc ._aa ==0{if _fc :=_cafc .readByte ();
_fc !=nil {return _fc ;};};_cafc ._cc <<=1;_cafc ._eb <<=1;_cafc ._aa --;if (_cafc ._cc &0x8000)!=0{break ;};};_cafc ._eb &=0xffffffff;return nil ;};func (_ea *DecoderStats )setEntry (_ggb int ){_bfb :=byte (_ggb &0x7f);_ea ._gfe [_ea ._aeg ]=_bfb };func (_cab *DecoderStats )toggleMps (){_cab ._geg [_cab ._aeg ]^=1};
func (_fb *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_ab ,_bcc int32 ;_eba ,_aga ,_ca int ;_df error ;);if stats ==nil {stats =NewStats (512,1);};_fb ._db =1;_aga ,_df =_fb .decodeIntBit (stats );if _df !=nil {return 0,_df ;};_eba ,_df =_fb .decodeIntBit (stats );
if _df !=nil {return 0,_df ;};if _eba ==1{_eba ,_df =_fb .decodeIntBit (stats );if _df !=nil {return 0,_df ;};if _eba ==1{_eba ,_df =_fb .decodeIntBit (stats );if _df !=nil {return 0,_df ;};if _eba ==1{_eba ,_df =_fb .decodeIntBit (stats );if _df !=nil {return 0,_df ;
};if _eba ==1{_eba ,_df =_fb .decodeIntBit (stats );if _df !=nil {return 0,_df ;};if _eba ==1{_ca =32;_bcc =4436;}else {_ca =12;_bcc =340;};}else {_ca =8;_bcc =84;};}else {_ca =6;_bcc =20;};}else {_ca =4;_bcc =4;};}else {_ca =2;_bcc =0;};for _eg :=0;_eg < _ca ;
_eg ++{_eba ,_df =_fb .decodeIntBit (stats );if _df !=nil {return 0,_df ;};_ab =(_ab <<1)|int32 (_eba );};_ab +=_bcc ;if _aga ==0{return _ab ,nil ;}else if _aga ==1&&_ab > 0{return -_ab ,nil ;};return 0,_bb .ErrOOB ;};