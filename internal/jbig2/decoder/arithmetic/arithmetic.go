//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_ab "fmt";_ac "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_a "io";_c "strings";);func (_af *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_da int ;
_afa =_f [stats .cx ()][0];_cd =int32 (stats .cx ()););defer func (){_af ._cc ++}();_af ._ce -=_afa ;if (_af ._eg >>16)< uint64 (_afa ){_da =_af .lpsExchange (stats ,_cd ,_afa );if _df :=_af .renormalize ();_df !=nil {return 0,_df ;};}else {_af ._eg -=uint64 (_afa )<<16;
if (_af ._ce &0x8000)==0{_da =_af .mpsExchange (stats ,_cd );if _ca :=_af .renormalize ();_ca !=nil {return 0,_ca ;};}else {_da =int (stats .getMps ());};};return _da ,nil ;};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_gc *_d .Reader ;
_ff uint8 ;_eg uint64 ;_ce uint32 ;_cb int64 ;_gb int32 ;_cc int32 ;_fe int64 ;};func (_bbd *DecoderStats )cx ()byte {return _bbd ._gbd [_bbd ._cff ]};func (_gcf *DecoderStats )setEntry (_dbdb int ){_ee :=byte (_dbdb &0x7f);_gcf ._gbd [_gcf ._cff ]=_ee };
func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_cff :index ,_ccd :contextSize ,_gbd :make ([]byte ,contextSize ),_egd :make ([]byte ,contextSize )};};func (_eb *Decoder )readByte ()error {if _eb ._gc .AbsolutePosition ()> _eb ._fe {if _ ,_dee :=_eb ._gc .Seek (-1,_a .SeekCurrent );
_dee !=nil {return _dee ;};};_db ,_ga :=_eb ._gc .ReadByte ();if _ga !=nil {return _ga ;};_eb ._ff =_db ;if _eb ._ff ==0xFF{_bab ,_fc :=_eb ._gc .ReadByte ();if _fc !=nil {return _fc ;};if _bab > 0x8F{_eb ._eg +=0xFF00;_eb ._gb =8;if _ ,_dfg :=_eb ._gc .Seek (-2,_a .SeekCurrent );
_dfg !=nil {return _dfg ;};}else {_eb ._eg +=uint64 (_bab )<<9;_eb ._gb =7;};}else {_db ,_ga =_eb ._gc .ReadByte ();if _ga !=nil {return _ga ;};_eb ._ff =_db ;_eb ._eg +=uint64 (_eb ._ff )<<8;_eb ._gb =8;};_eb ._eg &=0xFFFFFFFFFF;return nil ;};func (_ae *Decoder )init ()error {_ae ._fe =_ae ._gc .AbsolutePosition ();
_afg ,_ba :=_ae ._gc .ReadByte ();if _ba !=nil {_ac .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ba );return _ba ;};_ae ._ff =_afg ;_ae ._eg =uint64 (_afg )<<16;
if _ba =_ae .readByte ();_ba !=nil {return _ba ;};_ae ._eg <<=7;_ae ._gb -=7;_ae ._ce =0x8000;_ae ._cc ++;return nil ;};func (_dbd *Decoder )mpsExchange (_gcc *DecoderStats ,_gagb int32 )int {_gbc :=_gcc ._egd [_gcc ._cff ];if _dbd ._ce < _f [_gagb ][0]{if _f [_gagb ][3]==1{_gcc .toggleMps ();
};_gcc .setEntry (int (_f [_gagb ][2]));return int (1-_gbc );};_gcc .setEntry (int (_f [_gagb ][1]));return int (_gbc );};type DecoderStats struct{_cff int32 ;_ccd int32 ;_gbd []byte ;_egd []byte ;};func (_aaf *Decoder )decodeIntBit (_dff *DecoderStats )(int ,error ){_dff .SetIndex (int32 (_aaf ._cb ));
_ec ,_ed :=_aaf .DecodeBit (_dff );if _ed !=nil {_ac .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ed );
return _ec ,_ed ;};if _aaf ._cb < 256{_aaf ._cb =((_aaf ._cb <<uint64 (1))|int64 (_ec ))&0x1ff;}else {_aaf ._cb =(((_aaf ._cb <<uint64 (1)|int64 (_ec ))&511)|256)&0x1ff;};return _ec ,nil ;};func New (r *_d .Reader )(*Decoder ,error ){_cg :=&Decoder {_gc :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _b :=_cg .init ();_b !=nil {return nil ,_b ;};return _cg ,nil ;};func (_fd *DecoderStats )Overwrite (dNew *DecoderStats ){for _ecb :=0;_ecb < len (_fd ._gbd );_ecb ++{_fd ._gbd [_ecb ]=dNew ._gbd [_ecb ];_fd ._egd [_ecb ]=dNew ._egd [_ecb ];};};func (_adg *DecoderStats )Reset (){for _dfe :=0;
_dfe < len (_adg ._gbd );_dfe ++{_adg ._gbd [_dfe ]=0;_adg ._egd [_dfe ]=0;};};func (_dad *DecoderStats )Copy ()*DecoderStats {_cdf :=&DecoderStats {_ccd :_dad ._ccd ,_gbd :make ([]byte ,_dad ._ccd )};copy (_cdf ._gbd ,_dad ._gbd );return _cdf ;};func (_ad *Decoder )lpsExchange (_acc *DecoderStats ,_cea int32 ,_ffg uint32 )int {_gea :=_acc .getMps ();
if _ad ._ce < _ffg {_acc .setEntry (int (_f [_cea ][1]));_ad ._ce =_ffg ;return int (_gea );};if _f [_cea ][3]==1{_acc .toggleMps ();};_acc .setEntry (int (_f [_cea ][2]));_ad ._ce =_ffg ;return int (1-_gea );};func (_edd *DecoderStats )String ()string {_dg :=&_c .Builder {};
_dg .WriteString (_ab .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_edd ._gbd )));for _ceb ,_dag :=range _edd ._gbd {if _dag !=0{_dg .WriteString (_ab .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_ceb ,_dag ));
};};return _dg .String ();};func (_gag *Decoder )renormalize ()error {for {if _gag ._gb ==0{if _cgd :=_gag .readByte ();_cgd !=nil {return _cgd ;};};_gag ._ce <<=1;_gag ._eg <<=1;_gag ._gb --;if (_gag ._ce &0x8000)!=0{break ;};};_gag ._eg &=0xffffffff;
return nil ;};func (_ge *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_ge ._cb =1;var _aa uint64 ;for _aa =0;_aa < codeLen ;_aa ++{stats .SetIndex (int32 (_ge ._cb ));_dab ,_dfc :=_ge .DecodeBit (stats );if _dfc !=nil {return 0,_dfc ;
};_ge ._cb =(_ge ._cb <<1)|int64 (_dab );};_bc :=_ge ._cb -(1<<codeLen );return _bc ,nil ;};func (_egb *DecoderStats )toggleMps (){_egb ._egd [_egb ._cff ]^=1};func (_bag *DecoderStats )SetIndex (index int32 ){_bag ._cff =index };func (_ccc *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_abc ,_be int32 ;
_de ,_feb ,_cf int ;_abb error ;);if stats ==nil {stats =NewStats (512,1);};_ccc ._cb =1;_feb ,_abb =_ccc .decodeIntBit (stats );if _abb !=nil {return 0,_abb ;};_de ,_abb =_ccc .decodeIntBit (stats );if _abb !=nil {return 0,_abb ;};if _de ==1{_de ,_abb =_ccc .decodeIntBit (stats );
if _abb !=nil {return 0,_abb ;};if _de ==1{_de ,_abb =_ccc .decodeIntBit (stats );if _abb !=nil {return 0,_abb ;};if _de ==1{_de ,_abb =_ccc .decodeIntBit (stats );if _abb !=nil {return 0,_abb ;};if _de ==1{_de ,_abb =_ccc .decodeIntBit (stats );if _abb !=nil {return 0,_abb ;
};if _de ==1{_cf =32;_be =4436;}else {_cf =12;_be =340;};}else {_cf =8;_be =84;};}else {_cf =6;_be =20;};}else {_cf =4;_be =4;};}else {_cf =2;_be =0;};for _gg :=0;_gg < _cf ;_gg ++{_de ,_abb =_ccc .decodeIntBit (stats );if _abb !=nil {return 0,_abb ;};
_abc =(_abc <<1)|int32 (_de );};_abc +=_be ;if _feb ==0{return _abc ,nil ;}else if _feb ==1&&_abc > 0{return -_abc ,nil ;};return 0,_e .ErrOOB ;};func (_ea *DecoderStats )getMps ()byte {return _ea ._egd [_ea ._cff ]};var (_f =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);