//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_b "fmt";_gc "github.com/unidoc/unipdf/v3/common";_be "github.com/unidoc/unipdf/v3/internal/bitwise";_fa "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ff "io";_g "strings";);type Decoder struct{ContextSize []uint32 ;
ReferedToContextSize []uint32 ;_bf *_be .Reader ;_c uint8 ;_cd uint64 ;_cc uint32 ;_a int64 ;_ga int32 ;_fd int32 ;_bfa int64 ;};func (_dc *DecoderStats )toggleMps (){_dc ._de [_dc ._cbf ]^=1};func New (r *_be .Reader )(*Decoder ,error ){_gb :=&Decoder {_bf :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _e :=_gb .init ();_e !=nil {return nil ,_e ;};return _gb ,nil ;};func (_efa *Decoder )mpsExchange (_aa *DecoderStats ,_bge int32 )int {_cgf :=_aa ._de [_aa ._cbf ];if _efa ._cc < _fe [_bge ][0]{if _fe [_bge ][3]==1{_aa .toggleMps ();};_aa .setEntry (int (_fe [_bge ][2]));
return int (1-_cgf );};_aa .setEntry (int (_fe [_bge ][1]));return int (_cgf );};func (_gdc *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_gdc ._a =1;var _cg uint64 ;for _cg =0;_cg < codeLen ;_cg ++{stats .SetIndex (int32 (_gdc ._a ));
_efe ,_edg :=_gdc .DecodeBit (stats );if _edg !=nil {return 0,_edg ;};_gdc ._a =(_gdc ._a <<1)|int64 (_efe );};_af :=_gdc ._a -(1<<codeLen );return _af ,nil ;};func (_bbg *Decoder )decodeIntBit (_eab *DecoderStats )(int ,error ){_eab .SetIndex (int32 (_bbg ._a ));
_bc ,_bac :=_bbg .DecodeBit (_eab );if _bac !=nil {_gc .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_bac );
return _bc ,_bac ;};if _bbg ._a < 256{_bbg ._a =((_bbg ._a <<uint64 (1))|int64 (_bc ))&0x1ff;}else {_bbg ._a =(((_bbg ._a <<uint64 (1)|int64 (_bc ))&511)|256)&0x1ff;};return _bc ,nil ;};func (_ce *Decoder )init ()error {_ce ._bfa =_ce ._bf .AbsolutePosition ();
_fda ,_ba :=_ce ._bf .ReadByte ();if _ba !=nil {_gc .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ba );return _ba ;};_ce ._c =_fda ;_ce ._cd =uint64 (_fda )<<16;
if _ba =_ce .readByte ();_ba !=nil {return _ba ;};_ce ._cd <<=7;_ce ._ga -=7;_ce ._cc =0x8000;_ce ._fd ++;return nil ;};func (_fde *DecoderStats )Copy ()*DecoderStats {_da :=&DecoderStats {_cgfc :_fde ._cgfc ,_edb :make ([]byte ,_fde ._cgfc )};copy (_da ._edb ,_fde ._edb );
return _da ;};func (_bae *Decoder )readByte ()error {if _bae ._bf .AbsolutePosition ()> _bae ._bfa {if _ ,_bag :=_bae ._bf .Seek (-1,_ff .SeekCurrent );_bag !=nil {return _bag ;};};_ccb ,_cb :=_bae ._bf .ReadByte ();if _cb !=nil {return _cb ;};_bae ._c =_ccb ;
if _bae ._c ==0xFF{_fdc ,_eb :=_bae ._bf .ReadByte ();if _eb !=nil {return _eb ;};if _fdc > 0x8F{_bae ._cd +=0xFF00;_bae ._ga =8;if _ ,_beb :=_bae ._bf .Seek (-2,_ff .SeekCurrent );_beb !=nil {return _beb ;};}else {_bae ._cd +=uint64 (_fdc )<<9;_bae ._ga =7;
};}else {_ccb ,_cb =_bae ._bf .ReadByte ();if _cb !=nil {return _cb ;};_bae ._c =_ccb ;_bae ._cd +=uint64 (_bae ._c )<<8;_bae ._ga =8;};_bae ._cd &=0xFFFFFFFFFF;return nil ;};func (_cgfce *DecoderStats )getMps ()byte {return _cgfce ._de [_cgfce ._cbf ]};
func (_ccfc *Decoder )lpsExchange (_dda *DecoderStats ,_aaf int32 ,_bed uint32 )int {_gac :=_dda .getMps ();if _ccfc ._cc < _bed {_dda .setEntry (int (_fe [_aaf ][1]));_ccfc ._cc =_bed ;return int (_gac );};if _fe [_aaf ][3]==1{_dda .toggleMps ();};_dda .setEntry (int (_fe [_aaf ][2]));
_ccfc ._cc =_bed ;return int (1-_gac );};func (_fee *Decoder )renormalize ()error {for {if _fee ._ga ==0{if _fb :=_fee .readByte ();_fb !=nil {return _fb ;};};_fee ._cc <<=1;_fee ._cd <<=1;_fee ._ga --;if (_fee ._cc &0x8000)!=0{break ;};};_fee ._cd &=0xffffffff;
return nil ;};func (_ab *DecoderStats )cx ()byte {return _ab ._edb [_ab ._cbf ]};func (_cgfg *DecoderStats )setEntry (_bfe int ){_cca :=byte (_bfe &0x7f);_cgfg ._edb [_cgfg ._cbf ]=_cca ;};func (_bg *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_bb int ;
_ge =_fe [stats .cx ()][0];_ed =int32 (stats .cx ()););defer func (){_bg ._fd ++}();_bg ._cc -=_ge ;if (_bg ._cd >>16)< uint64 (_ge ){_bb =_bg .lpsExchange (stats ,_ed ,_ge );if _gf :=_bg .renormalize ();_gf !=nil {return 0,_gf ;};}else {_bg ._cd -=uint64 (_ge )<<16;
if (_bg ._cc &0x8000)==0{_bb =_bg .mpsExchange (stats ,_ed );if _d :=_bg .renormalize ();_d !=nil {return 0,_d ;};}else {_bb =int (stats .getMps ());};};return _bb ,nil ;};func (_ccf *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_ef ,_gd int32 ;
_ged ,_gdf ,_ede int ;_ea error ;);if stats ==nil {stats =NewStats (512,1);};_ccf ._a =1;_gdf ,_ea =_ccf .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;};_ged ,_ea =_ccf .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;};if _ged ==1{_ged ,_ea =_ccf .decodeIntBit (stats );
if _ea !=nil {return 0,_ea ;};if _ged ==1{_ged ,_ea =_ccf .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;};if _ged ==1{_ged ,_ea =_ccf .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;};if _ged ==1{_ged ,_ea =_ccf .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;
};if _ged ==1{_ede =32;_gd =4436;}else {_ede =12;_gd =340;};}else {_ede =8;_gd =84;};}else {_ede =6;_gd =20;};}else {_ede =4;_gd =4;};}else {_ede =2;_gd =0;};for _dd :=0;_dd < _ede ;_dd ++{_ged ,_ea =_ccf .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;
};_ef =(_ef <<1)|int32 (_ged );};_ef +=_gd ;if _gdf ==0{return _ef ,nil ;}else if _gdf ==1&&_ef > 0{return -_ef ,nil ;};return 0,_fa .ErrOOB ;};func (_cga *DecoderStats )String ()string {_ad :=&_g .Builder {};_ad .WriteString (_b .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_cga ._edb )));
for _gbb ,_fab :=range _cga ._edb {if _fab !=0{_ad .WriteString (_b .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_gbb ,_fab ));};};return _ad .String ();};func (_gg *DecoderStats )Reset (){for _ddc :=0;
_ddc < len (_gg ._edb );_ddc ++{_gg ._edb [_ddc ]=0;_gg ._de [_ddc ]=0;};};var (_fe =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_dac *DecoderStats )Overwrite (dNew *DecoderStats ){for _eg :=0;_eg < len (_dac ._edb );_eg ++{_dac ._edb [_eg ]=dNew ._edb [_eg ];_dac ._de [_eg ]=dNew ._de [_eg ];};};func (_fc *DecoderStats )SetIndex (index int32 ){_fc ._cbf =index };func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_cbf :index ,_cgfc :contextSize ,_edb :make ([]byte ,contextSize ),_de :make ([]byte ,contextSize )};
};type DecoderStats struct{_cbf int32 ;_cgfc int32 ;_edb []byte ;_de []byte ;};