//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_ec "fmt";_g "github.com/unidoc/unipdf/v3/common";_eg "github.com/unidoc/unipdf/v3/internal/bitwise";_e "io";_fb "math";_fa "strings";);func (_dbe *DecoderStats )Overwrite (dNew *DecoderStats ){for _cd :=0;_cd < len (_dbe ._ccc );_cd ++{_dbe ._ccc [_cd ]=dNew ._ccc [_cd ];_dbe ._bdcd [_cd ]=dNew ._bdcd [_cd ];};};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_c _eg .StreamReader ;_b uint8 ;_ce uint64 ;_ge uint32 ;_fd int64 ;_be int32 ;_bd int32 ;_a int64 ;};var (_ef =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};);func (_d *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_bc ,_db int32 ;_gc ,_gf ,_gd int ;_bdd error ;);if stats ==nil {stats =NewStats (512,1);};_d ._fd =1;_gf ,_bdd =_d .decodeIntBit (stats );if _bdd !=nil {return 0,_bdd ;};_gc ,_bdd =_d .decodeIntBit (stats );if _bdd !=nil {return 0,_bdd ;};if _gc ==1{_gc ,_bdd =_d .decodeIntBit (stats );if _bdd !=nil {return 0,_bdd ;};if _gc ==1{_gc ,_bdd =_d .decodeIntBit (stats );if _bdd !=nil {return 0,_bdd ;};if _gc ==1{_gc ,_bdd =_d .decodeIntBit (stats );if _bdd !=nil {return 0,_bdd ;};if _gc ==1{_gc ,_bdd =_d .decodeIntBit (stats );if _bdd !=nil {return 0,_bdd ;};if _gc ==1{_gd =32;_db =4436;}else {_gd =12;_db =340;};}else {_gd =8;_db =84;};}else {_gd =6;_db =20;};}else {_gd =4;_db =4;};}else {_gd =2;_db =0;};for _bf :=0;_bf < _gd ;_bf ++{_gc ,_bdd =_d .decodeIntBit (stats );if _bdd !=nil {return 0,_bdd ;};_bc =(_bc <<1)|int32 (_gc );};_bc +=_db ;if _gf ==0{return _bc ,nil ;}else if _gf ==1&&_bc > 0{return -_bc ,nil ;};return _fb .MaxInt32 ,nil ;};func (_df *Decoder )mpsExchange (_cfc *DecoderStats ,_agd int32 )int {_dge :=_cfc ._bdcd [_cfc ._dgb ];if _df ._ge < _ef [_agd ][0]{if _ef [_agd ][3]==1{_cfc .toggleMps ();};_cfc .setEntry (int (_ef [_agd ][2]));return int (1-_dge );};_cfc .setEntry (int (_ef [_agd ][1]));return int (_dge );};func (_faa *DecoderStats )SetIndex (index int32 ){_faa ._dgb =index };func (_bdc *Decoder )init ()error {_bdc ._a =_bdc ._c .StreamPosition ();_ae ,_abb :=_bdc ._c .ReadByte ();if _abb !=nil {_g .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_abb );return _abb ;};_bdc ._b =_ae ;_bdc ._ce =uint64 (_ae )<<16;if _abb =_bdc .readByte ();_abb !=nil {return _abb ;};_bdc ._ce <<=7;_bdc ._be -=7;_bdc ._ge =0x8000;_bdc ._bd ++;return nil ;};func (_cb *Decoder )decodeIntBit (_bdg *DecoderStats )(int ,error ){_bdg .SetIndex (int32 (_cb ._fd ));_ed ,_bg :=_cb .DecodeBit (_bdg );if _bg !=nil {_g .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_bg );return _ed ,_bg ;};if _cb ._fd < 256{_cb ._fd =((_cb ._fd <<uint64 (1))|int64 (_ed ))&0x1ff;}else {_cb ._fd =(((_cb ._fd <<uint64 (1)|int64 (_ed ))&511)|256)&0x1ff;};return _ed ,nil ;};func (_fbc *DecoderStats )Reset (){for _dd :=0;_dd < len (_fbc ._ccc );_dd ++{_fbc ._ccc [_dd ]=0;_fbc ._bdcd [_dd ]=0;};};func (_cfg *DecoderStats )Copy ()*DecoderStats {_bgb :=&DecoderStats {_egg :_cfg ._egg ,_ccc :make ([]byte ,_cfg ._egg )};for _de :=0;_de < len (_cfg ._ccc );_de ++{_bgb ._ccc [_de ]=_cfg ._ccc [_de ];};return _bgb ;};func (_egf *Decoder )renormalize ()error {for {if _egf ._be ==0{if _cca :=_egf .readByte ();_cca !=nil {return _cca ;};};_egf ._ge <<=1;_egf ._ce <<=1;_egf ._be --;if (_egf ._ge &0x8000)!=0{break ;};};_egf ._ce &=0xffffffff;return nil ;};func (_geg *Decoder )lpsExchange (_dcg *DecoderStats ,_gdc int32 ,_aa uint32 )int {_eda :=_dcg .getMps ();if _geg ._ge < _aa {_dcg .setEntry (int (_ef [_gdc ][1]));_geg ._ge =_aa ;return int (_eda );};if _ef [_gdc ][3]==1{_dcg .toggleMps ();};_dcg .setEntry (int (_ef [_gdc ][2]));_geg ._ge =_aa ;return int (1-_eda );};func (_fdg *DecoderStats )cx ()byte {return _fdg ._ccc [_fdg ._dgb ]};type DecoderStats struct{_dgb int32 ;_egg int32 ;_ccc []byte ;_bdcd []byte ;};func (_bde *Decoder )readByte ()error {if _bde ._c .StreamPosition ()> _bde ._a {if _ ,_gcg :=_bde ._c .Seek (-1,_e .SeekCurrent );_gcg !=nil {return _gcg ;};};_eb ,_gcc :=_bde ._c .ReadByte ();if _gcc !=nil {return _gcc ;};_bde ._b =_eb ;if _bde ._b ==0xFF{_dc ,_gfe :=_bde ._c .ReadByte ();if _gfe !=nil {return _gfe ;};if _dc > 0x8F{_bde ._ce +=0xFF00;_bde ._be =8;if _ ,_abeg :=_bde ._c .Seek (-2,_e .SeekCurrent );_abeg !=nil {return _abeg ;};}else {_bde ._ce +=uint64 (_dc )<<9;_bde ._be =7;};}else {_eb ,_gcc =_bde ._c .ReadByte ();if _gcc !=nil {return _gcc ;};_bde ._b =_eb ;_bde ._ce +=uint64 (_bde ._b )<<8;_bde ._be =8;};_bde ._ce &=0xFFFFFFFFFF;return nil ;};func (_ceg *DecoderStats )String ()string {_ecg :=&_fa .Builder {};_ecg .WriteString (_ec .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_ceg ._ccc )));for _cdd ,_ee :=range _ceg ._ccc {if _ee !=0{_ecg .WriteString (_ec .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_cdd ,_ee ));};};return _ecg .String ();};func (_def *DecoderStats )toggleMps (){_def ._bdcd [_def ._dgb ]^=1};func (_ac *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_ac ._fd =1;var _af uint64 ;for _af =0;_af < codeLen ;_af ++{stats .SetIndex (int32 (_ac ._fd ));_fbd ,_bec :=_ac .DecodeBit (stats );if _bec !=nil {return 0,_bec ;};_ac ._fd =(_ac ._fd <<1)|int64 (_fbd );};_abe :=_ac ._fd -(1<<codeLen );return _abe ,nil ;};func New (r _eg .StreamReader )(*Decoder ,error ){_beb :=&Decoder {_c :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _ecd :=_beb .init ();_ecd !=nil {return nil ,_ecd ;};return _beb ,nil ;};func (_cc *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_fbe int ;_ab =_ef [stats .cx ()][0];_cf =int32 (stats .cx ()););defer func (){_cc ._bd ++}();_cc ._ge -=_ab ;if (_cc ._ce >>16)< uint64 (_ab ){_fbe =_cc .lpsExchange (stats ,_cf ,_ab );if _ag :=_cc .renormalize ();_ag !=nil {return 0,_ag ;};}else {_cc ._ce -=uint64 (_ab )<<16;if (_cc ._ge &0x8000)==0{_fbe =_cc .mpsExchange (stats ,_cf );if _efd :=_cc .renormalize ();_efd !=nil {return 0,_efd ;};}else {_fbe =int (stats .getMps ());};};return _fbe ,nil ;};func (_eff *DecoderStats )setEntry (_dde int ){_abba :=byte (_dde &0x7f);_eff ._ccc [_eff ._dgb ]=_abba ;};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_dgb :index ,_egg :contextSize ,_ccc :make ([]byte ,contextSize ),_bdcd :make ([]byte ,contextSize )};};func (_ceb *DecoderStats )getMps ()byte {return _ceb ._bdcd [_ceb ._dgb ]};