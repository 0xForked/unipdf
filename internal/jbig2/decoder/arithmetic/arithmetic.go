//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_g "fmt";_be "github.com/unidoc/unipdf/v3/common";_bb "github.com/unidoc/unipdf/v3/internal/bitwise";_ag "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_a "io";_f "strings";);func (_cd *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_fc ,_fcf int32 ;
_fb ,_bac ,_aa int ;_fef error ;);if stats ==nil {stats =NewStats (512,1);};_cd ._c =1;_bac ,_fef =_cd .decodeIntBit (stats );if _fef !=nil {return 0,_fef ;};_fb ,_fef =_cd .decodeIntBit (stats );if _fef !=nil {return 0,_fef ;};if _fb ==1{_fb ,_fef =_cd .decodeIntBit (stats );
if _fef !=nil {return 0,_fef ;};if _fb ==1{_fb ,_fef =_cd .decodeIntBit (stats );if _fef !=nil {return 0,_fef ;};if _fb ==1{_fb ,_fef =_cd .decodeIntBit (stats );if _fef !=nil {return 0,_fef ;};if _fb ==1{_fb ,_fef =_cd .decodeIntBit (stats );if _fef !=nil {return 0,_fef ;
};if _fb ==1{_aa =32;_fcf =4436;}else {_aa =12;_fcf =340;};}else {_aa =8;_fcf =84;};}else {_aa =6;_fcf =20;};}else {_aa =4;_fcf =4;};}else {_aa =2;_fcf =0;};for _fg :=0;_fg < _aa ;_fg ++{_fb ,_fef =_cd .decodeIntBit (stats );if _fef !=nil {return 0,_fef ;
};_fc =(_fc <<1)|int32 (_fb );};_fc +=_fcf ;if _bac ==0{return _fc ,nil ;}else if _bac ==1&&_fc > 0{return -_fc ,nil ;};return 0,_ag .ErrOOB ;};func (_bc *Decoder )readByte ()error {if _bc ._gg .StreamPosition ()> _bc ._fe {if _ ,_cbf :=_bc ._gg .Seek (-1,_a .SeekCurrent );
_cbf !=nil {return _cbf ;};};_eg ,_ga :=_bc ._gg .ReadByte ();if _ga !=nil {return _ga ;};_bc ._ad =_eg ;if _bc ._ad ==0xFF{_cg ,_dd :=_bc ._gg .ReadByte ();if _dd !=nil {return _dd ;};if _cg > 0x8F{_bc ._fa +=0xFF00;_bc ._e =8;if _ ,_cgc :=_bc ._gg .Seek (-2,_a .SeekCurrent );
_cgc !=nil {return _cgc ;};}else {_bc ._fa +=uint64 (_cg )<<9;_bc ._e =7;};}else {_eg ,_ga =_bc ._gg .ReadByte ();if _ga !=nil {return _ga ;};_bc ._ad =_eg ;_bc ._fa +=uint64 (_bc ._ad )<<8;_bc ._e =8;};_bc ._fa &=0xFFFFFFFFFF;return nil ;};func (_ddb *Decoder )lpsExchange (_aae *DecoderStats ,_gd int32 ,_gga uint32 )int {_caa :=_aae .getMps ();
if _ddb ._bec < _gga {_aae .setEntry (int (_gf [_gd ][1]));_ddb ._bec =_gga ;return int (_caa );};if _gf [_gd ][3]==1{_aae .toggleMps ();};_aae .setEntry (int (_gf [_gd ][2]));_ddb ._bec =_gga ;return int (1-_caa );};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_fce :index ,_fcef :contextSize ,_cag :make ([]byte ,contextSize ),_bee :make ([]byte ,contextSize )};
};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_gg _bb .StreamReader ;_ad uint8 ;_fa uint64 ;_bec uint32 ;_c int64 ;_e int32 ;_ec int32 ;_fe int64 ;};func (_ege *DecoderStats )toggleMps (){_ege ._bee [_ege ._fce ]^=1};func (_fbf *Decoder )init ()error {_fbf ._fe =_fbf ._gg .StreamPosition ();
_cb ,_ged :=_fbf ._gg .ReadByte ();if _ged !=nil {_be .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ged );return _ged ;};_fbf ._ad =_cb ;_fbf ._fa =uint64 (_cb )<<16;
if _ged =_fbf .readByte ();_ged !=nil {return _ged ;};_fbf ._fa <<=7;_fbf ._e -=7;_fbf ._bec =0x8000;_fbf ._ec ++;return nil ;};func (_ea *DecoderStats )Copy ()*DecoderStats {_ceb :=&DecoderStats {_fcef :_ea ._fcef ,_cag :make ([]byte ,_ea ._fcef )};for _ae :=0;
_ae < len (_ea ._cag );_ae ++{_ceb ._cag [_ae ]=_ea ._cag [_ae ];};return _ceb ;};func (_cab *Decoder )mpsExchange (_ab *DecoderStats ,_ceg int32 )int {_dg :=_ab ._bee [_ab ._fce ];if _cab ._bec < _gf [_ceg ][0]{if _gf [_ceg ][3]==1{_ab .toggleMps ();};
_ab .setEntry (int (_gf [_ceg ][2]));return int (1-_dg );};_ab .setEntry (int (_gf [_ceg ][1]));return int (_dg );};func (_gdg *DecoderStats )String ()string {_bg :=&_f .Builder {};_bg .WriteString (_g .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_gdg ._cag )));
for _adg ,_aag :=range _gdg ._cag {if _aag !=0{_bg .WriteString (_g .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_adg ,_aag ));};};return _bg .String ();};func (_cdg *DecoderStats )Overwrite (dNew *DecoderStats ){for _gfe :=0;
_gfe < len (_cdg ._cag );_gfe ++{_cdg ._cag [_gfe ]=dNew ._cag [_gfe ];_cdg ._bee [_gfe ]=dNew ._bee [_gfe ];};};func (_fgg *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_fgg ._c =1;var _ff uint64 ;for _ff =0;_ff < codeLen ;
_ff ++{stats .SetIndex (int32 (_fgg ._c ));_adc ,_bab :=_fgg .DecodeBit (stats );if _bab !=nil {return 0,_bab ;};_fgg ._c =(_fgg ._c <<1)|int64 (_adc );};_facc :=_fgg ._c -(1<<codeLen );return _facc ,nil ;};func (_ffa *DecoderStats )setEntry (_gea int ){_agc :=byte (_gea &0x7f);
_ffa ._cag [_ffa ._fce ]=_agc };func New (r _bb .StreamReader )(*Decoder ,error ){_ba :=&Decoder {_gg :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _aga :=_ba .init ();_aga !=nil {return nil ,_aga ;};return _ba ,nil ;
};func (_ffb *Decoder )decodeIntBit (_ce *DecoderStats )(int ,error ){_ce .SetIndex (int32 (_ffb ._c ));_cea ,_eed :=_ffb .DecodeBit (_ce );if _eed !=nil {_be .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_eed );
return _cea ,_eed ;};if _ffb ._c < 256{_ffb ._c =((_ffb ._c <<uint64 (1))|int64 (_cea ))&0x1ff;}else {_ffb ._c =(((_ffb ._c <<uint64 (1)|int64 (_cea ))&511)|256)&0x1ff;};return _cea ,nil ;};func (_ee *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_fac int ;
_agac =_gf [stats .cx ()][0];_d =int32 (stats .cx ()););defer func (){_ee ._ec ++}();_ee ._bec -=_agac ;if (_ee ._fa >>16)< uint64 (_agac ){_fac =_ee .lpsExchange (stats ,_d ,_agac );if _ge :=_ee .renormalize ();_ge !=nil {return 0,_ge ;};}else {_ee ._fa -=uint64 (_agac )<<16;
if (_ee ._bec &0x8000)==0{_fac =_ee .mpsExchange (stats ,_d );if _ada :=_ee .renormalize ();_ada !=nil {return 0,_ada ;};}else {_fac =int (stats .getMps ());};};return _fac ,nil ;};func (_aad *DecoderStats )getMps ()byte {return _aad ._bee [_aad ._fce ]};
var (_gf =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_baf *DecoderStats )cx ()byte {return _baf ._cag [_baf ._fce ]};func (_cc *Decoder )renormalize ()error {for {if _cc ._e ==0{if _ac :=_cc .readByte ();_ac !=nil {return _ac ;};};_cc ._bec <<=1;_cc ._fa <<=1;_cc ._e --;if (_cc ._bec &0x8000)!=0{break ;
};};_cc ._fa &=0xffffffff;return nil ;};type DecoderStats struct{_fce int32 ;_fcef int32 ;_cag []byte ;_bee []byte ;};func (_bd *DecoderStats )SetIndex (index int32 ){_bd ._fce =index };func (_fgd *DecoderStats )Reset (){for _fae :=0;_fae < len (_fgd ._cag );
_fae ++{_fgd ._cag [_fae ]=0;_fgd ._bee [_fae ]=0;};};