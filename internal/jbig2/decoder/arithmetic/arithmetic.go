//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_ga "fmt";_b "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_gg "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_cd "io";_g "strings";);type DecoderStats struct{_add int32 ;_be int32 ;
_ec []byte ;_dd []byte ;};func (_dc *Decoder )decodeIntBit (_gd *DecoderStats )(int ,error ){_gd .SetIndex (int32 (_dc ._db ));_eed ,_ad :=_dc .DecodeBit (_gd );if _ad !=nil {_b .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ad );
return _eed ,_ad ;};if _dc ._db < 256{_dc ._db =((_dc ._db <<uint64 (1))|int64 (_eed ))&0x1ff;}else {_dc ._db =(((_dc ._db <<uint64 (1)|int64 (_eed ))&511)|256)&0x1ff;};return _eed ,nil ;};func (_dbge *Decoder )renormalize ()error {for {if _dbge ._e ==0{if _cfc :=_dbge .readByte ();
_cfc !=nil {return _cfc ;};};_dbge ._ab <<=1;_dbge ._f <<=1;_dbge ._e --;if (_dbge ._ab &0x8000)!=0{break ;};};_dbge ._f &=0xffffffff;return nil ;};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_d _a .StreamReader ;_bb uint8 ;
_f uint64 ;_ab uint32 ;_db int64 ;_e int32 ;_bc int32 ;_eg int64 ;};func (_ba *Decoder )lpsExchange (_ce *DecoderStats ,_dcf int32 ,_abg uint32 )int {_bd :=_ce .getMps ();if _ba ._ab < _abg {_ce .setEntry (int (_gf [_dcf ][1]));_ba ._ab =_abg ;return int (_bd );
};if _gf [_dcf ][3]==1{_ce .toggleMps ();};_ce .setEntry (int (_gf [_dcf ][2]));_ba ._ab =_abg ;return int (1-_bd );};func (_aa *Decoder )readByte ()error {if _aa ._d .StreamPosition ()> _aa ._eg {if _ ,_gfe :=_aa ._d .Seek (-1,_cd .SeekCurrent );_gfe !=nil {return _gfe ;
};};_ffg ,_cg :=_aa ._d .ReadByte ();if _cg !=nil {return _cg ;};_aa ._bb =_ffg ;if _aa ._bb ==0xFF{_cge ,_fg :=_aa ._d .ReadByte ();if _fg !=nil {return _fg ;};if _cge > 0x8F{_aa ._f +=0xFF00;_aa ._e =8;if _ ,_geb :=_aa ._d .Seek (-2,_cd .SeekCurrent );
_geb !=nil {return _geb ;};}else {_aa ._f +=uint64 (_cge )<<9;_aa ._e =7;};}else {_ffg ,_cg =_aa ._d .ReadByte ();if _cg !=nil {return _cg ;};_aa ._bb =_ffg ;_aa ._f +=uint64 (_aa ._bb )<<8;_aa ._e =8;};_aa ._f &=0xFFFFFFFFFF;return nil ;};func (_gb *Decoder )init ()error {_gb ._eg =_gb ._d .StreamPosition ();
_ded ,_gaa :=_gb ._d .ReadByte ();if _gaa !=nil {_b .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_gaa );return _gaa ;};_gb ._bb =_ded ;_gb ._f =uint64 (_ded )<<16;
if _gaa =_gb .readByte ();_gaa !=nil {return _gaa ;};_gb ._f <<=7;_gb ._e -=7;_gb ._ab =0x8000;_gb ._bc ++;return nil ;};func (_bec *DecoderStats )cx ()byte {return _bec ._ec [_bec ._add ]};func (_fd *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_cb int ;
_dg =_gf [stats .cx ()][0];_de =int32 (stats .cx ()););defer func (){_fd ._bc ++}();_fd ._ab -=_dg ;if (_fd ._f >>16)< uint64 (_dg ){_cb =_fd .lpsExchange (stats ,_de ,_dg );if _dbg :=_fd .renormalize ();_dbg !=nil {return 0,_dbg ;};}else {_fd ._f -=uint64 (_dg )<<16;
if (_fd ._ab &0x8000)==0{_cb =_fd .mpsExchange (stats ,_de );if _ee :=_fd .renormalize ();_ee !=nil {return 0,_ee ;};}else {_cb =int (stats .getMps ());};};return _cb ,nil ;};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_add :index ,_be :contextSize ,_ec :make ([]byte ,contextSize ),_dd :make ([]byte ,contextSize )};
};func (_fa *DecoderStats )toggleMps (){_fa ._dd [_fa ._add ]^=1};func (_afg *DecoderStats )SetIndex (index int32 ){_afg ._add =index };func (_dbgd *DecoderStats )String ()string {_cgd :=&_g .Builder {};_cgd .WriteString (_ga .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_dbgd ._ec )));
for _ged ,_aga :=range _dbgd ._ec {if _aga !=0{_cgd .WriteString (_ga .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_ged ,_aga ));};};return _cgd .String ();};func (_gfc *DecoderStats )getMps ()byte {return _gfc ._dd [_gfc ._add ]};
func (_daa *DecoderStats )Overwrite (dNew *DecoderStats ){for _cc :=0;_cc < len (_daa ._ec );_cc ++{_daa ._ec [_cc ]=dNew ._ec [_cc ];_daa ._dd [_cc ]=dNew ._dd [_cc ];};};func (_gff *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_dgb ,_fdd int32 ;
_bg ,_ea ,_ff int ;_fc error ;);if stats ==nil {stats =NewStats (512,1);};_gff ._db =1;_ea ,_fc =_gff .decodeIntBit (stats );if _fc !=nil {return 0,_fc ;};_bg ,_fc =_gff .decodeIntBit (stats );if _fc !=nil {return 0,_fc ;};if _bg ==1{_bg ,_fc =_gff .decodeIntBit (stats );
if _fc !=nil {return 0,_fc ;};if _bg ==1{_bg ,_fc =_gff .decodeIntBit (stats );if _fc !=nil {return 0,_fc ;};if _bg ==1{_bg ,_fc =_gff .decodeIntBit (stats );if _fc !=nil {return 0,_fc ;};if _bg ==1{_bg ,_fc =_gff .decodeIntBit (stats );if _fc !=nil {return 0,_fc ;
};if _bg ==1{_ff =32;_fdd =4436;}else {_ff =12;_fdd =340;};}else {_ff =8;_fdd =84;};}else {_ff =6;_fdd =20;};}else {_ff =4;_fdd =4;};}else {_ff =2;_fdd =0;};for _cbf :=0;_cbf < _ff ;_cbf ++{_bg ,_fc =_gff .decodeIntBit (stats );if _fc !=nil {return 0,_fc ;
};_dgb =(_dgb <<1)|int32 (_bg );};_dgb +=_fdd ;if _ea ==0{return _dgb ,nil ;}else if _ea ==1&&_dgb > 0{return -_dgb ,nil ;};return 0,_gg .ErrOOB ;};var (_gf =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_df *DecoderStats )Copy ()*DecoderStats {_bf :=&DecoderStats {_be :_df ._be ,_ec :make ([]byte ,_df ._be )};for _ag :=0;_ag < len (_df ._ec );_ag ++{_bf ._ec [_ag ]=_df ._ec [_ag ];};return _bf ;};func (_ed *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_ed ._db =1;
var _dec uint64 ;for _dec =0;_dec < codeLen ;_dec ++{stats .SetIndex (int32 (_ed ._db ));_da ,_cf :=_ed .DecodeBit (stats );if _cf !=nil {return 0,_cf ;};_ed ._db =(_ed ._db <<1)|int64 (_da );};_cfe :=_ed ._db -(1<<codeLen );return _cfe ,nil ;};func (_dcc *Decoder )mpsExchange (_edg *DecoderStats ,_dbga int32 )int {_eb :=_edg ._dd [_edg ._add ];
if _dcc ._ab < _gf [_dbga ][0]{if _gf [_dbga ][3]==1{_edg .toggleMps ();};_edg .setEntry (int (_gf [_dbga ][2]));return int (1-_eb );};_edg .setEntry (int (_gf [_dbga ][1]));return int (_eb );};func New (r _a .StreamReader )(*Decoder ,error ){_af :=&Decoder {_d :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _ge :=_af .init ();_ge !=nil {return nil ,_ge ;};return _af ,nil ;};func (_ead *DecoderStats )Reset (){for _afd :=0;_afd < len (_ead ._ec );_afd ++{_ead ._ec [_afd ]=0;_ead ._dd [_afd ]=0;};};func (_cdd *DecoderStats )setEntry (_beb int ){_ade :=byte (_beb &0x7f);
_cdd ._ec [_cdd ._add ]=_ade };