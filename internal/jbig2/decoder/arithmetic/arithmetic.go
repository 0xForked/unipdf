//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_d "fmt";_b "github.com/unidoc/unipdf/v3/common";_bd "github.com/unidoc/unipdf/v3/internal/bitwise";_bb "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_g "io";_c "strings";);func (_dea *Decoder )mpsExchange (_ddb *DecoderStats ,_bdc int32 )int {_gc :=_ddb ._aa [_ddb ._ged ];
if _dea ._bac < _fb [_bdc ][0]{if _fb [_bdc ][3]==1{_ddb .toggleMps ();};_ddb .setEntry (int (_fb [_bdc ][2]));return int (1-_gc );};_ddb .setEntry (int (_fb [_bdc ][1]));return int (_gc );};func (_efd *DecoderStats )Overwrite (dNew *DecoderStats ){for _egc :=0;
_egc < len (_efd ._eba );_egc ++{_efd ._eba [_egc ]=dNew ._eba [_egc ];_efd ._aa [_egc ]=dNew ._aa [_egc ];};};func (_gf *Decoder )renormalize ()error {for {if _gf ._bc ==0{if _fbb :=_gf .readByte ();_fbb !=nil {return _fbb ;};};_gf ._bac <<=1;_gf ._de <<=1;
_gf ._bc --;if (_gf ._bac &0x8000)!=0{break ;};};_gf ._de &=0xffffffff;return nil ;};func New (r _bd .StreamReader )(*Decoder ,error ){_dd :=&Decoder {_ba :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _fa :=_dd .init ();
_fa !=nil {return nil ,_fa ;};return _dd ,nil ;};func (_cgd *DecoderStats )cx ()byte {return _cgd ._eba [_cgd ._ged ]};func (_baa *Decoder )readByte ()error {if _baa ._ba .StreamPosition ()> _baa ._e {if _ ,_gba :=_baa ._ba .Seek (-1,_g .SeekCurrent );
_gba !=nil {return _gba ;};};_cbgc ,_gda :=_baa ._ba .ReadByte ();if _gda !=nil {return _gda ;};_baa ._dg =_cbgc ;if _baa ._dg ==0xFF{_dcd ,_ee :=_baa ._ba .ReadByte ();if _ee !=nil {return _ee ;};if _dcd > 0x8F{_baa ._de +=0xFF00;_baa ._bc =8;if _ ,_ga :=_baa ._ba .Seek (-2,_g .SeekCurrent );
_ga !=nil {return _ga ;};}else {_baa ._de +=uint64 (_dcd )<<9;_baa ._bc =7;};}else {_cbgc ,_gda =_baa ._ba .ReadByte ();if _gda !=nil {return _gda ;};_baa ._dg =_cbgc ;_baa ._de +=uint64 (_baa ._dg )<<8;_baa ._bc =8;};_baa ._de &=0xFFFFFFFFFF;return nil ;
};func (_cf *Decoder )init ()error {_cf ._e =_cf ._ba .StreamPosition ();_db ,_ac :=_cf ._ba .ReadByte ();if _ac !=nil {_b .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ac );
return _ac ;};_cf ._dg =_db ;_cf ._de =uint64 (_db )<<16;if _ac =_cf .readByte ();_ac !=nil {return _ac ;};_cf ._de <<=7;_cf ._bc -=7;_cf ._bac =0x8000;_cf ._def ++;return nil ;};type DecoderStats struct{_ged int32 ;_aeg int32 ;_eba []byte ;_aa []byte ;
};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_ged :index ,_aeg :contextSize ,_eba :make ([]byte ,contextSize ),_aa :make ([]byte ,contextSize )};};func (_df *DecoderStats )getMps ()byte {return _df ._aa [_df ._ged ]};
func (_cbge *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_cbge ._cb =1;var _ddg uint64 ;for _ddg =0;_ddg < codeLen ;_ddg ++{stats .SetIndex (int32 (_cbge ._cb ));_ddd ,_dc :=_cbge .DecodeBit (stats );if _dc !=nil {return 0,_dc ;
};_cbge ._cb =(_cbge ._cb <<1)|int64 (_ddd );};_ab :=_cbge ._cb -(1<<codeLen );return _ab ,nil ;};func (_a *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_cc ,_cd int32 ;_fg ,_ca ,_bbf int ;_ea error ;);if stats ==nil {stats =NewStats (512,1);
};_a ._cb =1;_ca ,_ea =_a .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;};_fg ,_ea =_a .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;};if _fg ==1{_fg ,_ea =_a .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;};if _fg ==1{_fg ,_ea =_a .decodeIntBit (stats );
if _ea !=nil {return 0,_ea ;};if _fg ==1{_fg ,_ea =_a .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;};if _fg ==1{_fg ,_ea =_a .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;};if _fg ==1{_bbf =32;_cd =4436;}else {_bbf =12;_cd =340;};}else {_bbf =8;
_cd =84;};}else {_bbf =6;_cd =20;};}else {_bbf =4;_cd =4;};}else {_bbf =2;_cd =0;};for _ag :=0;_ag < _bbf ;_ag ++{_fg ,_ea =_a .decodeIntBit (stats );if _ea !=nil {return 0,_ea ;};_cc =(_cc <<1)|int32 (_fg );};_cc +=_cd ;if _ca ==0{return _cc ,nil ;}else if _ca ==1&&_cc > 0{return -_cc ,nil ;
};return 0,_bb .ErrOOB ;};func (_dec *Decoder )lpsExchange (_ge *DecoderStats ,_gae int32 ,_cde uint32 )int {_fga :=_ge .getMps ();if _dec ._bac < _cde {_ge .setEntry (int (_fb [_gae ][1]));_dec ._bac =_cde ;return int (_fga );};if _fb [_gae ][3]==1{_ge .toggleMps ();
};_ge .setEntry (int (_fb [_gae ][2]));_dec ._bac =_cde ;return int (1-_fga );};func (_fd *DecoderStats )toggleMps (){_fd ._aa [_fd ._ged ]^=1};func (_egd *DecoderStats )String ()string {_cfd :=&_c .Builder {};_cfd .WriteString (_d .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_egd ._eba )));
for _bgf ,_da :=range _egd ._eba {if _da !=0{_cfd .WriteString (_d .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_bgf ,_da ));};};return _cfd .String ();};func (_ead *DecoderStats )setEntry (_gee int ){_aag :=byte (_gee &0x7f);
_ead ._eba [_ead ._ged ]=_aag };func (_eb *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_cbg int ;_cg =_fb [stats .cx ()][0];_ef =int32 (stats .cx ()););defer func (){_eb ._def ++}();_eb ._bac -=_cg ;if (_eb ._de >>16)< uint64 (_cg ){_cbg =_eb .lpsExchange (stats ,_ef ,_cg );
if _gd :=_eb .renormalize ();_gd !=nil {return 0,_gd ;};}else {_eb ._de -=uint64 (_cg )<<16;if (_eb ._bac &0x8000)==0{_cbg =_eb .mpsExchange (stats ,_ef );if _be :=_eb .renormalize ();_be !=nil {return 0,_be ;};}else {_cbg =int (stats .getMps ());};};return _cbg ,nil ;
};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_ba _bd .StreamReader ;_dg uint8 ;_de uint64 ;_bac uint32 ;_cb int64 ;_bc int32 ;_def int32 ;_e int64 ;};func (_decb *DecoderStats )Copy ()*DecoderStats {_cdf :=&DecoderStats {_aeg :_decb ._aeg ,_eba :make ([]byte ,_decb ._aeg )};
for _dbc :=0;_dbc < len (_decb ._eba );_dbc ++{_cdf ._eba [_dbc ]=_decb ._eba [_dbc ];};return _cdf ;};func (_gg *DecoderStats )SetIndex (index int32 ){_gg ._ged =index };func (_bcb *DecoderStats )Reset (){for _ce :=0;_ce < len (_bcb ._eba );_ce ++{_bcb ._eba [_ce ]=0;
_bcb ._aa [_ce ]=0;};};func (_dcda *Decoder )decodeIntBit (_bg *DecoderStats )(int ,error ){_bg .SetIndex (int32 (_dcda ._cb ));_cga ,_ae :=_dcda .DecodeBit (_bg );if _ae !=nil {_b .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ae );
return _cga ,_ae ;};if _dcda ._cb < 256{_dcda ._cb =((_dcda ._cb <<uint64 (1))|int64 (_cga ))&0x1ff;}else {_dcda ._cb =(((_dcda ._cb <<uint64 (1)|int64 (_cga ))&511)|256)&0x1ff;};return _cga ,nil ;};var (_fb =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);