//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_a "fmt";_d "github.com/unidoc/unipdf/v3/common";_ab "github.com/unidoc/unipdf/v3/internal/bitwise";_de "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_e "io";_b "strings";);func (_ff *Decoder )renormalize ()error {for {if _ff ._fd ==0{if _bdb :=_ff .readByte ();
_bdb !=nil {return _bdb ;};};_ff ._f <<=1;_ff ._ca <<=1;_ff ._fd --;if (_ff ._f &0x8000)!=0{break ;};};_ff ._ca &=0xffffffff;return nil ;};func New (r _ab .StreamReader )(*Decoder ,error ){_aa :=&Decoder {_eg :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _fdc :=_aa .init ();_fdc !=nil {return nil ,_fdc ;};return _aa ,nil ;};type DecoderStats struct{_ccg int32 ;_fc int32 ;_cd []byte ;_edf []byte ;};func (_aef *DecoderStats )String ()string {_efb :=&_b .Builder {};_efb .WriteString (_a .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_aef ._cd )));
for _fbd ,_dd :=range _aef ._cd {if _dd !=0{_efb .WriteString (_a .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_fbd ,_dd ));};};return _efb .String ();};type Decoder struct{ContextSize []uint32 ;
ReferedToContextSize []uint32 ;_eg _ab .StreamReader ;_ee uint8 ;_ca uint64 ;_f uint32 ;_ba int64 ;_fd int32 ;_egc int32 ;_bb int64 ;};func (_ae *Decoder )mpsExchange (_bf *DecoderStats ,_gd int32 )int {_fa :=_bf ._edf [_bf ._ccg ];if _ae ._f < _bd [_gd ][0]{if _bd [_gd ][3]==1{_bf .toggleMps ();
};_bf .setEntry (int (_bd [_gd ][2]));return int (1-_fa );};_bf .setEntry (int (_bd [_gd ][1]));return int (_fa );};func (_ea *Decoder )init ()error {_ea ._bb =_ea ._eg .StreamPosition ();_ce ,_bbda :=_ea ._eg .ReadByte ();if _bbda !=nil {_d .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_bbda );
return _bbda ;};_ea ._ee =_ce ;_ea ._ca =uint64 (_ce )<<16;if _bbda =_ea .readByte ();_bbda !=nil {return _bbda ;};_ea ._ca <<=7;_ea ._fd -=7;_ea ._f =0x8000;_ea ._egc ++;return nil ;};func (_ega *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_ega ._ba =1;
var _eb uint64 ;for _eb =0;_eb < codeLen ;_eb ++{stats .SetIndex (int32 (_ega ._ba ));_eba ,_gb :=_ega .DecodeBit (stats );if _gb !=nil {return 0,_gb ;};_ega ._ba =(_ega ._ba <<1)|int64 (_eba );};_bbd :=_ega ._ba -(1<<codeLen );return _bbd ,nil ;};func (_def *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_dca ,_cb int32 ;
_cbg ,_ac ,_df int ;_fdd error ;);if stats ==nil {stats =NewStats (512,1);};_def ._ba =1;_ac ,_fdd =_def .decodeIntBit (stats );if _fdd !=nil {return 0,_fdd ;};_cbg ,_fdd =_def .decodeIntBit (stats );if _fdd !=nil {return 0,_fdd ;};if _cbg ==1{_cbg ,_fdd =_def .decodeIntBit (stats );
if _fdd !=nil {return 0,_fdd ;};if _cbg ==1{_cbg ,_fdd =_def .decodeIntBit (stats );if _fdd !=nil {return 0,_fdd ;};if _cbg ==1{_cbg ,_fdd =_def .decodeIntBit (stats );if _fdd !=nil {return 0,_fdd ;};if _cbg ==1{_cbg ,_fdd =_def .decodeIntBit (stats );
if _fdd !=nil {return 0,_fdd ;};if _cbg ==1{_df =32;_cb =4436;}else {_df =12;_cb =340;};}else {_df =8;_cb =84;};}else {_df =6;_cb =20;};}else {_df =4;_cb =4;};}else {_df =2;_cb =0;};for _ga :=0;_ga < _df ;_ga ++{_cbg ,_fdd =_def .decodeIntBit (stats );
if _fdd !=nil {return 0,_fdd ;};_dca =(_dca <<1)|int32 (_cbg );};_dca +=_cb ;if _ac ==0{return _dca ,nil ;}else if _ac ==1&&_dca > 0{return -_dca ,nil ;};return 0,_de .ErrOOB ;};var (_bd =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_egag *Decoder )lpsExchange (_egb *DecoderStats ,_gdb int32 ,_eag uint32 )int {_aaf :=_egb .getMps ();if _egag ._f < _eag {_egb .setEntry (int (_bd [_gdb ][1]));_egag ._f =_eag ;return int (_aaf );};if _bd [_gdb ][3]==1{_egb .toggleMps ();};_egb .setEntry (int (_bd [_gdb ][2]));
_egag ._f =_eag ;return int (1-_aaf );};func (_g *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_ed int ;_fe =_bd [stats .cx ()][0];_ef =int32 (stats .cx ()););defer func (){_g ._egc ++}();_g ._f -=_fe ;if (_g ._ca >>16)< uint64 (_fe ){_ed =_g .lpsExchange (stats ,_ef ,_fe );
if _fb :=_g .renormalize ();_fb !=nil {return 0,_fb ;};}else {_g ._ca -=uint64 (_fe )<<16;if (_g ._f &0x8000)==0{_ed =_g .mpsExchange (stats ,_ef );if _dc :=_g .renormalize ();_dc !=nil {return 0,_dc ;};}else {_ed =int (stats .getMps ());};};return _ed ,nil ;
};func (_edab *DecoderStats )getMps ()byte {return _edab ._edf [_edab ._ccg ]};func (_dbc *DecoderStats )Copy ()*DecoderStats {_bc :=&DecoderStats {_fc :_dbc ._fc ,_cd :make ([]byte ,_dbc ._fc )};for _gbd :=0;_gbd < len (_dbc ._cd );_gbd ++{_bc ._cd [_gbd ]=_dbc ._cd [_gbd ];
};return _bc ;};func (_dg *Decoder )decodeIntBit (_da *DecoderStats )(int ,error ){_da .SetIndex (int32 (_dg ._ba ));_bab ,_eda :=_dg .DecodeBit (_da );if _eda !=nil {_d .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_eda );
return _bab ,_eda ;};if _dg ._ba < 256{_dg ._ba =((_dg ._ba <<uint64 (1))|int64 (_bab ))&0x1ff;}else {_dg ._ba =(((_dg ._ba <<uint64 (1)|int64 (_bab ))&511)|256)&0x1ff;};return _bab ,nil ;};func (_eee *DecoderStats )cx ()byte {return _eee ._cd [_eee ._ccg ]};
func (_af *DecoderStats )Overwrite (dNew *DecoderStats ){for _aae :=0;_aae < len (_af ._cd );_aae ++{_af ._cd [_aae ]=dNew ._cd [_aae ];_af ._edf [_aae ]=dNew ._edf [_aae ];};};func (_ggb *DecoderStats )SetIndex (index int32 ){_ggb ._ccg =index };func (_gbb *DecoderStats )setEntry (_bg int ){_caa :=byte (_bg &0x7f);
_gbb ._cd [_gbb ._ccg ]=_caa };func (_ddg *DecoderStats )toggleMps (){_ddg ._edf [_ddg ._ccg ]^=1};func (_gg *Decoder )readByte ()error {if _gg ._eg .StreamPosition ()> _gg ._bb {if _ ,_cac :=_gg ._eg .Seek (-1,_e .SeekCurrent );_cac !=nil {return _cac ;
};};_cc ,_efc :=_gg ._eg .ReadByte ();if _efc !=nil {return _efc ;};_gg ._ee =_cc ;if _gg ._ee ==0xFF{_db ,_cae :=_gg ._eg .ReadByte ();if _cae !=nil {return _cae ;};if _db > 0x8F{_gg ._ca +=0xFF00;_gg ._fd =8;if _ ,_be :=_gg ._eg .Seek (-2,_e .SeekCurrent );
_be !=nil {return _be ;};}else {_gg ._ca +=uint64 (_db )<<9;_gg ._fd =7;};}else {_cc ,_efc =_gg ._eg .ReadByte ();if _efc !=nil {return _efc ;};_gg ._ee =_cc ;_gg ._ca +=uint64 (_gg ._ee )<<8;_gg ._fd =8;};_gg ._ca &=0xFFFFFFFFFF;return nil ;};func (_feg *DecoderStats )Reset (){for _gc :=0;
_gc < len (_feg ._cd );_gc ++{_feg ._cd [_gc ]=0;_feg ._edf [_gc ]=0;};};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_ccg :index ,_fc :contextSize ,_cd :make ([]byte ,contextSize ),_edf :make ([]byte ,contextSize )};
};