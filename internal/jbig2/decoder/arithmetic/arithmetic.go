//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_c "fmt";_ea "github.com/unidoc/unipdf/v3/common";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_e "io";_g "math";_d "strings";);func (_ced *DecoderStats )getMps ()byte {return _ced ._dgf [_ced ._bac ]};func (_fbf *Decoder )decodeIntBit (_dc *DecoderStats )(int ,error ){_dc .SetIndex (int32 (_fbf ._a ));_ag ,_ad :=_fbf .DecodeBit (_dc );if _ad !=nil {_ea .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ad );return _ag ,_ad ;};if _fbf ._a < 256{_fbf ._a =((_fbf ._a <<uint64 (1))|int64 (_ag ))&0x1ff;}else {_fbf ._a =(((_fbf ._a <<uint64 (1)|int64 (_ag ))&511)|256)&0x1ff;};return _ag ,nil ;};func (_fed *DecoderStats )String ()string {_cda :=&_d .Builder {};_cda .WriteString (_c .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_fed ._dgg )));for _gab ,_fff :=range _fed ._dgg {if _fff !=0{_cda .WriteString (_c .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_gab ,_fff ));};};return _cda .String ();};func (_gf *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_gf ._a =1;var _gd uint64 ;for _gd =0;_gd < codeLen ;_gd ++{stats .SetIndex (int32 (_gf ._a ));_db ,_fgc :=_gf .DecodeBit (stats );if _fgc !=nil {return 0,_fgc ;};_gf ._a =(_gf ._a <<1)|int64 (_db );};_dbd :=_gf ._a -(1<<codeLen );return _dbd ,nil ;};func (_dgc *DecoderStats )Overwrite (dNew *DecoderStats ){for _ede :=0;_ede < len (_dgc ._dgg );_ede ++{_dgc ._dgg [_ede ]=dNew ._dgg [_ede ];_dgc ._dgf [_ede ]=dNew ._dgf [_ede ];};};func (_gcb *DecoderStats )SetIndex (index int32 ){_gcb ._bac =index };func (_bg *Decoder )init ()error {_bg ._bc =_bg ._fb .StreamPosition ();_afb ,_dfa :=_bg ._fb .ReadByte ();if _dfa !=nil {_ea .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_dfa );return _dfa ;};_bg ._ff =_afb ;_bg ._df =uint64 (_afb )<<16;if _dfa =_bg .readByte ();_dfa !=nil {return _dfa ;};_bg ._df <<=7;_bg ._fe -=7;_bg ._ce =0x8000;_bg ._dg ++;return nil ;};type DecoderStats struct{_bac int32 ;_ge int32 ;_dgg []byte ;_dgf []byte ;};func (_cg *DecoderStats )cx ()byte {return _cg ._dgg [_cg ._bac ]};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_fb _f .StreamReader ;_ff uint8 ;_df uint64 ;_ce uint32 ;_a int64 ;_fe int32 ;_dg int32 ;_bc int64 ;};func New (r _f .StreamReader )(*Decoder ,error ){_bd :=&Decoder {_fb :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _gb :=_bd .init ();_gb !=nil {return nil ,_gb ;};return _bd ,nil ;};func (_ga *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_af ,_cf int32 ;_ba ,_fg ,_ae int ;_cde error ;);if stats ==nil {stats =NewStats (512,1);};_ga ._a =1;_fg ,_cde =_ga .decodeIntBit (stats );if _cde !=nil {return 0,_cde ;};_ba ,_cde =_ga .decodeIntBit (stats );if _cde !=nil {return 0,_cde ;};if _ba ==1{_ba ,_cde =_ga .decodeIntBit (stats );if _cde !=nil {return 0,_cde ;};if _ba ==1{_ba ,_cde =_ga .decodeIntBit (stats );if _cde !=nil {return 0,_cde ;};if _ba ==1{_ba ,_cde =_ga .decodeIntBit (stats );if _cde !=nil {return 0,_cde ;};if _ba ==1{_ba ,_cde =_ga .decodeIntBit (stats );if _cde !=nil {return 0,_cde ;};if _ba ==1{_ae =32;_cf =4436;}else {_ae =12;_cf =340;};}else {_ae =8;_cf =84;};}else {_ae =6;_cf =20;};}else {_ae =4;_cf =4;};}else {_ae =2;_cf =0;};for _dac :=0;_dac < _ae ;_dac ++{_ba ,_cde =_ga .decodeIntBit (stats );if _cde !=nil {return 0,_cde ;};_af =(_af <<1)|int32 (_ba );};_af +=_cf ;if _fg ==0{return _af ,nil ;}else if _fg ==1&&_af > 0{return -_af ,nil ;};return _g .MaxInt32 ,nil ;};func (_ed *Decoder )readByte ()error {if _ed ._fb .StreamPosition ()> _ed ._bc {if _ ,_cad :=_ed ._fb .Seek (-1,_e .SeekCurrent );_cad !=nil {return _cad ;};};_ac ,_eg :=_ed ._fb .ReadByte ();if _eg !=nil {return _eg ;};_ed ._ff =_ac ;if _ed ._ff ==0xFF{_edc ,_gda :=_ed ._fb .ReadByte ();if _gda !=nil {return _gda ;};if _edc > 0x8F{_ed ._df +=0xFF00;_ed ._fe =8;if _ ,_bae :=_ed ._fb .Seek (-2,_e .SeekCurrent );_bae !=nil {return _bae ;};}else {_ed ._df +=uint64 (_edc )<<9;_ed ._fe =7;};}else {_ac ,_eg =_ed ._fb .ReadByte ();if _eg !=nil {return _eg ;};_ed ._ff =_ac ;_ed ._df +=uint64 (_ed ._ff )<<8;_ed ._fe =8;};_ed ._df &=0xFFFFFFFFFF;return nil ;};func (_baf *DecoderStats )toggleMps (){_baf ._dgf [_baf ._bac ]^=1};func (_aca *DecoderStats )setEntry (_cfb int ){_bb :=byte (_cfb &0x7f);_aca ._dgg [_aca ._bac ]=_bb };func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_bac :index ,_ge :contextSize ,_dgg :make ([]byte ,contextSize ),_dgf :make ([]byte ,contextSize )};};func (_gfb *Decoder )mpsExchange (_bdc *DecoderStats ,_fc int32 )int {_ab :=_bdc ._dgf [_bdc ._bac ];if _gfb ._ce < _ca [_fc ][0]{if _ca [_fc ][3]==1{_bdc .toggleMps ();};_bdc .setEntry (int (_ca [_fc ][2]));return int (1-_ab );};_bdc .setEntry (int (_ca [_fc ][1]));return int (_ab );};func (_cdc *DecoderStats )Reset (){for _fcd :=0;_fcd < len (_cdc ._dgg );_fcd ++{_cdc ._dgg [_fcd ]=0;_cdc ._dgf [_fcd ]=0;};};var (_ca =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};);func (_ega *Decoder )renormalize ()error {for {if _ega ._fe ==0{if _dag :=_ega .readByte ();_dag !=nil {return _dag ;};};_ega ._ce <<=1;_ega ._df <<=1;_ega ._fe --;if (_ega ._ce &0x8000)!=0{break ;};};_ega ._df &=0xffffffff;return nil ;};func (_cd *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_da int ;_ec =_ca [stats .cx ()][0];_dfb =int32 (stats .cx ()););defer func (){_cd ._dg ++}();_cd ._ce -=_ec ;if (_cd ._df >>16)< uint64 (_ec ){_da =_cd .lpsExchange (stats ,_dfb ,_ec );if _fa :=_cd .renormalize ();_fa !=nil {return 0,_fa ;};}else {_cd ._df -=uint64 (_ec )<<16;if (_cd ._ce &0x8000)==0{_da =_cd .mpsExchange (stats ,_dfb );if _eb :=_cd .renormalize ();_eb !=nil {return 0,_eb ;};}else {_da =int (stats .getMps ());};};return _da ,nil ;};func (_bda *Decoder )lpsExchange (_eaf *DecoderStats ,_gc int32 ,_age uint32 )int {_ee :=_eaf .getMps ();if _bda ._ce < _age {_eaf .setEntry (int (_ca [_gc ][1]));_bda ._ce =_age ;return int (_ee );};if _ca [_gc ][3]==1{_eaf .toggleMps ();};_eaf .setEntry (int (_ca [_gc ][2]));_bda ._ce =_age ;return int (1-_ee );};func (_dab *DecoderStats )Copy ()*DecoderStats {_feg :=&DecoderStats {_ge :_dab ._ge ,_dgg :make ([]byte ,_dab ._ge )};for _cb :=0;_cb < len (_dab ._dgg );_cb ++{_feg ._dgg [_cb ]=_dab ._dgg [_cb ];};return _feg ;};