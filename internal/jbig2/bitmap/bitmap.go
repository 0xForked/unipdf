//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_dc "encoding/binary";_g "github.com/stretchr/testify/require";_ag "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_f "github.com/unidoc/unipdf/v3/internal/imageutil";_gd "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_df "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ad "image";_ea "math";_b "sort";_dfc "strings";_a "testing";);func _cdbe (_caacd ,_fcad *Bitmap ,_deadf *Selection )(*Bitmap ,error ){const _fed ="\u0065\u0072\u006fd\u0065";var (_fagga error ;_ebbb *Bitmap ;
);_caacd ,_fagga =_bafg (_caacd ,_fcad ,_deadf ,&_ebbb );if _fagga !=nil {return nil ,_df .Wrap (_fagga ,_fed ,"");};if _fagga =_caacd .setAll ();_fagga !=nil {return nil ,_df .Wrap (_fagga ,_fed ,"");};var _feagf SelectionValue ;for _dggc :=0;_dggc < _deadf .Height ;
_dggc ++{for _dbca :=0;_dbca < _deadf .Width ;_dbca ++{_feagf =_deadf .Data [_dggc ][_dbca ];if _feagf ==SelHit {_fagga =_ebeg (_caacd ,_deadf .Cx -_dbca ,_deadf .Cy -_dggc ,_fcad .Width ,_fcad .Height ,PixSrcAndDst ,_ebbb ,0,0);if _fagga !=nil {return nil ,_df .Wrap (_fagga ,_fed ,"");
};};};};if MorphBC ==SymmetricMorphBC {return _caacd ,nil ;};_dgdd ,_aecf ,_eebe ,_acc :=_deadf .findMaxTranslations ();if _dgdd > 0{if _fagga =_caacd .RasterOperation (0,0,_dgdd ,_fcad .Height ,PixClr ,nil ,0,0);_fagga !=nil {return nil ,_df .Wrap (_fagga ,_fed ,"\u0078\u0070\u0020\u003e\u0020\u0030");
};};if _eebe > 0{if _fagga =_caacd .RasterOperation (_fcad .Width -_eebe ,0,_eebe ,_fcad .Height ,PixClr ,nil ,0,0);_fagga !=nil {return nil ,_df .Wrap (_fagga ,_fed ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _aecf > 0{if _fagga =_caacd .RasterOperation (0,0,_fcad .Width ,_aecf ,PixClr ,nil ,0,0);
_fagga !=nil {return nil ,_df .Wrap (_fagga ,_fed ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _acc > 0{if _fagga =_caacd .RasterOperation (0,_fcad .Height -_acc ,_fcad .Width ,_acc ,PixClr ,nil ,0,0);_fagga !=nil {return nil ,_df .Wrap (_fagga ,_fed ,"\u0079\u006e\u0020\u003e\u0020\u0030");
};};return _caacd ,nil ;};func (_cfgb *Bitmap )CreateTemplate ()*Bitmap {return _cfgb .createTemplate ()};type Color int ;func TstImageBitmap ()*Bitmap {return _cebc .Copy ()};func (_daag *Bitmaps )AddBox (box *_ad .Rectangle ){_daag .Boxes =append (_daag .Boxes ,box )};
func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gacc float64 ,_agdd error ){const _daed ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _gacc ,_df .Error (_daed ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _gacc ,_df .Error (_daed ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _gacc ,_df .Error (_daed ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_dgda ,_dece :=bm1 .Width ,bm1 .Height ;_gaaef ,_aaga :=bm2 .Width ,bm2 .Height ;
if _dcag (_dgda -_gaaef )> maxDiffW {return 0,nil ;};if _dcag (_dece -_aaga )> maxDiffH {return 0,nil ;};var _bgdg ,_cccfg int ;if delX >=0{_bgdg =int (delX +0.5);}else {_bgdg =int (delX -0.5);};if delY >=0{_cccfg =int (delY +0.5);}else {_cccfg =int (delY -0.5);
};_egcbg :=bm1 .createTemplate ();if _agdd =_egcbg .RasterOperation (_bgdg ,_cccfg ,_gaaef ,_aaga ,PixSrc ,bm2 ,0,0);_agdd !=nil {return _gacc ,_df .Wrap (_agdd ,_daed ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};if _agdd =_egcbg .RasterOperation (0,0,_dgda ,_dece ,PixSrcAndDst ,bm1 ,0,0);_agdd !=nil {return _gacc ,_df .Wrap (_agdd ,_daed ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_gccg :=_egcbg .countPixels ();_gacc =float64 (_gccg )*float64 (_gccg )/(float64 (area1 )*float64 (area2 ));
return _gacc ,nil ;};func _cec (_abd ,_dfbd *Bitmap ,_bfa int ,_gaaf []byte ,_fbf int )(_caba error ){const _ggf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_bbba ,_bae ,_fde ,_fbe ,_cgf ,_edbd ,_eee ,_dgad int ;
_gee ,_ccf ,_fce ,_ccd uint32 ;_eef ,_aegg byte ;_afc uint16 ;);_cfc :=make ([]byte ,4);_dfff :=make ([]byte ,4);for _fde =0;_fde < _abd .Height -1;_fde ,_fbe =_fde +2,_fbe +1{_bbba =_fde *_abd .RowStride ;_bae =_fbe *_dfbd .RowStride ;for _cgf ,_edbd =0,0;
_cgf < _fbf ;_cgf ,_edbd =_cgf +4,_edbd +1{for _eee =0;_eee < 4;_eee ++{_dgad =_bbba +_cgf +_eee ;if _dgad <=len (_abd .Data )-1&&_dgad < _bbba +_abd .RowStride {_cfc [_eee ]=_abd .Data [_dgad ];}else {_cfc [_eee ]=0x00;};_dgad =_bbba +_abd .RowStride +_cgf +_eee ;
if _dgad <=len (_abd .Data )-1&&_dgad < _bbba +(2*_abd .RowStride ){_dfff [_eee ]=_abd .Data [_dgad ];}else {_dfff [_eee ]=0x00;};};_gee =_dc .BigEndian .Uint32 (_cfc );_ccf =_dc .BigEndian .Uint32 (_dfff );_fce =_gee &_ccf ;_fce |=_fce <<1;_ccd =_gee |_ccf ;
_ccd &=_ccd <<1;_ccf =_fce &_ccd ;_ccf &=0xaaaaaaaa;_gee =_ccf |(_ccf <<7);_eef =byte (_gee >>24);_aegg =byte ((_gee >>8)&0xff);_dgad =_bae +_edbd ;if _dgad +1==len (_dfbd .Data )-1||_dgad +1>=_bae +_dfbd .RowStride {if _caba =_dfbd .SetByte (_dgad ,_gaaf [_eef ]);
_caba !=nil {return _df .Wrapf (_caba ,_ggf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dgad );};}else {_afc =(uint16 (_gaaf [_eef ])<<8)|uint16 (_gaaf [_aegg ]);if _caba =_dfbd .setTwoBytes (_dgad ,_afc );_caba !=nil {return _df .Wrapf (_caba ,_ggf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dgad );
};_edbd ++;};};};return nil ;};type ClassedPoints struct{*Points ;_gd .IntSlice ;_deaef func (_gffd ,_bcadc int )bool ;};func (_aeddc *Points )Add (pt *Points )error {const _bgaa ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _aeddc ==nil {return _df .Error (_bgaa ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _df .Error (_bgaa ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_aeddc =append (*_aeddc ,*pt ...);return nil ;};const (ComponentConn Component =iota ;
ComponentCharacters ;ComponentWords ;);func _fdeef (_bddfb ,_ddbf int ,_abba string )*Selection {_aadf :=&Selection {Height :_bddfb ,Width :_ddbf ,Name :_abba };_aadf .Data =make ([][]SelectionValue ,_bddfb );for _dffe :=0;_dffe < _bddfb ;_dffe ++{_aadf .Data [_dffe ]=make ([]SelectionValue ,_ddbf );
};return _aadf ;};func Centroids (bms []*Bitmap )(*Points ,error ){_eaed :=make ([]Point ,len (bms ));_fgdg :=_eecae ();_fffd :=_gbga ();var _afca error ;for _cdec ,_efdd :=range bms {_eaed [_cdec ],_afca =_efdd .centroid (_fgdg ,_fffd );if _afca !=nil {return nil ,_afca ;
};};_cdfd :=Points (_eaed );return &_cdfd ,nil ;};func _bd (_be ,_bb *Bitmap )(_adb error ){const _ed ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_ff :=_bb .RowStride ;_ae :=_be .RowStride ;
var (_fc byte ;_c uint16 ;_cd ,_gc ,_dd ,_gf ,_fe int ;);for _dd =0;_dd < _bb .Height ;_dd ++{_cd =_dd *_ff ;_gc =2*_dd *_ae ;for _gf =0;_gf < _ff ;_gf ++{_fc =_bb .Data [_cd +_gf ];_c =_febe [_fc ];_fe =_gc +_gf *2;if _be .RowStride !=_bb .RowStride *2&&(_gf +1)*2> _be .RowStride {_adb =_be .SetByte (_fe ,byte (_c >>8));
}else {_adb =_be .setTwoBytes (_fe ,_c );};if _adb !=nil {return _df .Wrap (_adb ,_ed ,"");};};for _gf =0;_gf < _ae ;_gf ++{_fe =_gc +_ae +_gf ;_fc =_be .Data [_gc +_gf ];if _adb =_be .SetByte (_fe ,_fc );_adb !=nil {return _df .Wrapf (_adb ,_ed ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_gc +_gf ,_gc +_ae +_gf );
};};};return nil ;};func ClipBoxToRectangle (box *_ad .Rectangle ,wi ,hi int )(_ccfe *_ad .Rectangle ,_caeag error ){const _bdbf ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_df .Error (_bdbf ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_df .Error (_bdbf ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_bddb :=*box ;
_ccfe =&_bddb ;if _ccfe .Min .X < 0{_ccfe .Max .X +=_ccfe .Min .X ;_ccfe .Min .X =0;};if _ccfe .Min .Y < 0{_ccfe .Max .Y +=_ccfe .Min .Y ;_ccfe .Min .Y =0;};if _ccfe .Max .X > wi {_ccfe .Max .X =wi ;};if _ccfe .Max .Y > hi {_ccfe .Max .Y =hi ;};return _ccfe ,nil ;
};func _cgab (_decd ,_fdcb *Bitmap ,_abga ,_befd int )(*Bitmap ,error ){const _adaab ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _fdcb ==nil {return nil ,_df .Error (_adaab ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _abga < 1||_befd < 1{return nil ,_df .Error (_adaab ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _abga ==1&&_befd ==1{return _fbc (_decd ,_fdcb );};
if MorphBC ==SymmetricMorphBC {_eebg ,_cgaea :=_cbca (_decd ,_fdcb ,_abga ,_befd );if _cgaea !=nil {return nil ,_df .Wrap (_cgaea ,_adaab ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _eebg ,nil ;};
_afefg :=_efdfd (_abga /2,_befd /2);_gbca :=8*((_afefg +7)/8);_ddcd ,_adege :=_fdcb .AddBorder (_gbca ,0);if _adege !=nil {return nil ,_df .Wrapf (_adege ,_adaab ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_gbca );
};var _adag ,_fcef *Bitmap ;if _abga ==1||_befd ==1{_ebgc :=SelCreateBrick (_befd ,_abga ,_befd /2,_abga /2,SelHit );_adag ,_adege =_gadb (nil ,_ddcd ,_ebgc );if _adege !=nil {return nil ,_df .Wrap (_adege ,_adaab ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_bcdb :=SelCreateBrick (1,_abga ,0,_abga /2,SelHit );_beab ,_feggg :=_bbbb (nil ,_ddcd ,_bcdb );if _feggg !=nil {return nil ,_df .Wrap (_feggg ,_adaab ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_cgda :=SelCreateBrick (_befd ,1,_befd /2,0,SelHit );_adag ,_feggg =_bbbb (nil ,_beab ,_cgda );if _feggg !=nil {return nil ,_df .Wrap (_feggg ,_adaab ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_feggg =_cdbe (_beab ,_adag ,_bcdb );_feggg !=nil {return nil ,_df .Wrap (_feggg ,_adaab ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_feggg =_cdbe (_adag ,_beab ,_cgda );_feggg !=nil {return nil ,_df .Wrap (_feggg ,_adaab ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _fcef ,_adege =_adag .RemoveBorder (_gbca );_adege !=nil {return nil ,_df .Wrap (_adege ,_adaab ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _decd ==nil {return _fcef ,nil ;};if _ ,_adege =_fbc (_decd ,_fcef );_adege !=nil {return nil ,_adege ;
};return _decd ,nil ;};func TstTSymbol (t *_a .T ,scale ...int )*Bitmap {_aaecc ,_cbec :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_g .NoError (t ,_cbec );return TstGetScaledSymbol (t ,_aaecc ,scale ...);};func (_afed *Bitmap )setTwoBytes (_cegb int ,_fbfa uint16 )error {if _cegb +1> len (_afed .Data )-1{return _df .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cegb );
};_afed .Data [_cegb ]=byte ((_fbfa &0xff00)>>8);_afed .Data [_cegb +1]=byte (_fbfa &0xff);return nil ;};func init (){for _cgc :=0;_cgc < 256;_cgc ++{_bddf [_cgc ]=uint8 (_cgc &0x1)+(uint8 (_cgc >>1)&0x1)+(uint8 (_cgc >>2)&0x1)+(uint8 (_cgc >>3)&0x1)+(uint8 (_cgc >>4)&0x1)+(uint8 (_cgc >>5)&0x1)+(uint8 (_cgc >>6)&0x1)+(uint8 (_cgc >>7)&0x1);
};};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_cbae bool ,_afag error ){const _gbfa ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_dcc ,_fbdd :=p1 .Width ,p1 .Height ;
_ceda ,_edea :=p3 .Width ,p3 .Height ;if _gd .Abs (_dcc -_ceda )> maxDiffW {return false ,nil ;};if _gd .Abs (_fbdd -_edea )> maxDiffH {return false ,nil ;};_dbedb :=int (float32 (area1 )*(1.0-rank )+0.5);_cdfe :=int (float32 (area3 )*(1.0-rank )+0.5);
var _deb ,_dbgd int ;if delX >=0{_deb =int (delX +0.5);}else {_deb =int (delX -0.5);};if delY >=0{_dbgd =int (delY +0.5);}else {_dbgd =int (delY -0.5);};_abgd :=p1 .CreateTemplate ();if _afag =_abgd .RasterOperation (0,0,_dcc ,_fbdd ,PixSrc ,p1 ,0,0);_afag !=nil {return false ,_df .Wrap (_afag ,_gbfa ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _afag =_abgd .RasterOperation (_deb ,_dbgd ,_dcc ,_fbdd ,PixNotSrcAndDst ,p4 ,0,0);_afag !=nil {return false ,_df .Wrap (_afag ,_gbfa ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_cbae ,_afag =_abgd .ThresholdPixelSum (_dbedb ,tab8 );if _afag !=nil {return false ,_df .Wrap (_afag ,_gbfa ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");
};if _cbae {return false ,nil ;};if _afag =_abgd .RasterOperation (_deb ,_dbgd ,_ceda ,_edea ,PixSrc ,p3 ,0,0);_afag !=nil {return false ,_df .Wrap (_afag ,_gbfa ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _afag =_abgd .RasterOperation (0,0,_ceda ,_edea ,PixNotSrcAndDst ,p2 ,0,0);
_afag !=nil {return false ,_df .Wrap (_afag ,_gbfa ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_cbae ,_afag =_abgd .ThresholdPixelSum (_cdfe ,tab8 );if _afag !=nil {return false ,_df .Wrap (_afag ,_gbfa ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");
};return !_cbae ,nil ;};var MorphBC BoundaryCondition ;func (_bcfa *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_eda *Boxes ,_egde error ){const _bgf ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _bcfa ==nil {return nil ,_df .Error (_bgf ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_df .Error (_bgf ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _eda ,_egde =_bcfa .connComponentsBB (connectivity );_egde !=nil {return nil ,_df .Wrap (_egde ,_bgf ,"");};}else {if _eda ,_egde =_bcfa .connComponentsBitmapsBB (bms ,connectivity );_egde !=nil {return nil ,_df .Wrap (_egde ,_bgf ,"");
};};return _eda ,nil ;};var (_febe =_gaa ();_aedff =_ddd ();_cada =_bbe (););func (_acea *Bitmaps )GetBox (i int )(*_ad .Rectangle ,error ){const _ffcb ="\u0047\u0065\u0074\u0042\u006f\u0078";if _acea ==nil {return nil ,_df .Error (_ffcb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_acea .Boxes )-1{return nil ,_df .Errorf (_ffcb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _acea .Boxes [i ],nil ;};const (_afge shift =iota ;
_gfcfg ;);func (_begc *Bitmap )SetByte (index int ,v byte )error {if index > len (_begc .Data )-1||index < 0{return _df .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_begc .Data [index ]=v ;return nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func New (width ,height int )*Bitmap {_ceb :=_egc (width ,height );_ceb .Data =make ([]byte ,height *_ceb .RowStride );
return _ceb ;};func (_caed *Boxes )Get (i int )(*_ad .Rectangle ,error ){const _egg ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _caed ==nil {return nil ,_df .Error (_egg ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_caed )-1{return nil ,_df .Errorf (_egg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_caed )[i ],nil ;};func _ebgg (_cdff *Bitmap ,_agee ,_ecff int ,_cgbe ,_gdga int ,_bbec RasterOperator ){var (_ccga bool ;
_ccfbb bool ;_dcddb int ;_eebd int ;_ffaf int ;_afad int ;_cbgbe bool ;_dgeeb byte ;);_fggb :=8-(_agee &7);_acbf :=_ddgc [_fggb ];_cfcc :=_cdff .RowStride *_ecff +(_agee >>3);if _cgbe < _fggb {_ccga =true ;_acbf &=_gccaf [8-_fggb +_cgbe ];};if !_ccga {_dcddb =(_cgbe -_fggb )>>3;
if _dcddb !=0{_ccfbb =true ;_eebd =_cfcc +1;};};_ffaf =(_agee +_cgbe )&7;if !(_ccga ||_ffaf ==0){_cbgbe =true ;_dgeeb =_gccaf [_ffaf ];_afad =_cfcc +1+_dcddb ;};var _dede ,_ffde int ;switch _bbec {case PixClr :for _dede =0;_dede < _gdga ;_dede ++{_cdff .Data [_cfcc ]=_cfbdg (_cdff .Data [_cfcc ],0x0,_acbf );
_cfcc +=_cdff .RowStride ;};if _ccfbb {for _dede =0;_dede < _gdga ;_dede ++{for _ffde =0;_ffde < _dcddb ;_ffde ++{_cdff .Data [_eebd +_ffde ]=0x0;};_eebd +=_cdff .RowStride ;};};if _cbgbe {for _dede =0;_dede < _gdga ;_dede ++{_cdff .Data [_afad ]=_cfbdg (_cdff .Data [_afad ],0x0,_dgeeb );
_afad +=_cdff .RowStride ;};};case PixSet :for _dede =0;_dede < _gdga ;_dede ++{_cdff .Data [_cfcc ]=_cfbdg (_cdff .Data [_cfcc ],0xff,_acbf );_cfcc +=_cdff .RowStride ;};if _ccfbb {for _dede =0;_dede < _gdga ;_dede ++{for _ffde =0;_ffde < _dcddb ;_ffde ++{_cdff .Data [_eebd +_ffde ]=0xff;
};_eebd +=_cdff .RowStride ;};};if _cbgbe {for _dede =0;_dede < _gdga ;_dede ++{_cdff .Data [_afad ]=_cfbdg (_cdff .Data [_afad ],0xff,_dgeeb );_afad +=_cdff .RowStride ;};};case PixNotDst :for _dede =0;_dede < _gdga ;_dede ++{_cdff .Data [_cfcc ]=_cfbdg (_cdff .Data [_cfcc ],^_cdff .Data [_cfcc ],_acbf );
_cfcc +=_cdff .RowStride ;};if _ccfbb {for _dede =0;_dede < _gdga ;_dede ++{for _ffde =0;_ffde < _dcddb ;_ffde ++{_cdff .Data [_eebd +_ffde ]=^(_cdff .Data [_eebd +_ffde ]);};_eebd +=_cdff .RowStride ;};};if _cbgbe {for _dede =0;_dede < _gdga ;_dede ++{_cdff .Data [_afad ]=_cfbdg (_cdff .Data [_afad ],^_cdff .Data [_afad ],_dgeeb );
_afad +=_cdff .RowStride ;};};};};func _gaa ()(_dbdc [256]uint16 ){for _gbf :=0;_gbf < 256;_gbf ++{if _gbf &0x01!=0{_dbdc [_gbf ]|=0x3;};if _gbf &0x02!=0{_dbdc [_gbf ]|=0xc;};if _gbf &0x04!=0{_dbdc [_gbf ]|=0x30;};if _gbf &0x08!=0{_dbdc [_gbf ]|=0xc0;};
if _gbf &0x10!=0{_dbdc [_gbf ]|=0x300;};if _gbf &0x20!=0{_dbdc [_gbf ]|=0xc00;};if _gbf &0x40!=0{_dbdc [_gbf ]|=0x3000;};if _gbf &0x80!=0{_dbdc [_gbf ]|=0xc000;};};return _dbdc ;};func (_eede *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _ddbfa ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _eede ==nil {return nil ,_df .Error (_ddbfa ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_df .Error (_ddbfa ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_ccgd :=len (_eede .Values );_eaebb :=&Bitmaps {Values :make ([]*Bitmap ,_ccgd ),Boxes :make ([]*_ad .Rectangle ,_ccgd )};var (_bbfe ,_eecaeg *Bitmap ;_eabb *_ad .Rectangle ;_abafd error ;);for _afcge :=0;_afcge < _ccgd ;_afcge ++{if _bbfe ,_abafd =_eede .GetBitmap (_afcge );
_abafd !=nil {return nil ,_df .Wrap (_abafd ,_ddbfa ,"");};if _eabb ,_abafd =_eede .GetBox (_afcge );_abafd !=nil {return nil ,_df .Wrap (_abafd ,_ddbfa ,"");};if _eecaeg ,_abafd =s .clipRectangle (_eabb ,nil );_abafd !=nil {return nil ,_df .Wrap (_abafd ,_ddbfa ,"");
};if _eecaeg ,_abafd =_eecaeg .And (_bbfe );_abafd !=nil {return nil ,_df .Wrap (_abafd ,_ddbfa ,"");};_eaebb .Values [_afcge ]=_eecaeg ;_eaebb .Boxes [_afcge ]=_eabb ;};return _eaebb ,nil ;};func (_fag *Bitmap )And (s *Bitmap )(_gdf *Bitmap ,_bda error ){const _dac ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _fag ==nil {return nil ,_df .Error (_dac ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_df .Error (_dac ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_fag .SizesEqual (s ){_ag .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_dac );
};if _gdf ,_bda =_fbc (_gdf ,_fag );_bda !=nil {return nil ,_df .Wrap (_bda ,_dac ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _bda =_gdf .RasterOperation (0,0,_gdf .Width ,_gdf .Height ,PixSrcAndDst ,s ,0,0);
_bda !=nil {return nil ,_df .Wrap (_bda ,_dac ,"");};return _gdf ,nil ;};type Points []Point ;type SelectionValue int ;const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;
);type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_ad .Rectangle ;};func (_ecgdc CombinationOperator )String ()string {var _afaf string ;switch _ecgdc {case CmbOpOr :_afaf ="\u004f\u0052";case CmbOpAnd :_afaf ="\u0041\u004e\u0044";case CmbOpXor :_afaf ="\u0058\u004f\u0052";
case CmbOpXNor :_afaf ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_afaf ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_afaf ="\u004e\u004f\u0054";};return _afaf ;};func TstWordBitmapWithSpaces (t *_a .T ,scale ...int )*Bitmap {_fgaf :=1;if len (scale )> 0{_fgaf =scale [0];
};_deabda :=3;_abfa :=9+7+15+2*_deabda +2*_deabda ;_befc :=5+_deabda +5+2*_deabda ;_abgag :=New (_abfa *_fgaf ,_befc *_fgaf );_eeea :=&Bitmaps {};var _eecb *int ;_deabda *=_fgaf ;_cefbf :=_deabda ;_eecb =&_cefbf ;_ggae :=_deabda ;_dgfc :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,1*_fgaf );_dgfc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,_deabda );_dgfc =TstISymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,1*_fgaf );_dgfc =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,_deabda );_dgfc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,1*_fgaf );_dgfc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,1*_fgaf );_dgfc =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,0);*_eecb =_deabda ;_ggae =5*_fgaf +_deabda ;_dgfc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,1*_fgaf );_dgfc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,_deabda );
_dgfc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,1*_fgaf );_dgfc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,1*_fgaf );_dgfc =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,1*_fgaf );
_dgfc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,1*_fgaf );_dgfc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_eeea ,_dgfc ,_eecb ,_ggae ,0);TstWriteSymbols (t ,_eeea ,_abgag );return _abgag ;};func (_efce MorphProcess )getWidthHeight ()(_eddg ,_fgad int ){return _efce .Arguments [0],_efce .Arguments [1];
};func TstESymbol (t *_a .T ,scale ...int )*Bitmap {_gdgb ,_efafe :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_g .NoError (t ,_efafe );return TstGetScaledSymbol (t ,_gdgb ,scale ...);};func (_edec *ClassedPoints )Swap (i ,j int ){_edec .IntSlice [i ],_edec .IntSlice [j ]=_edec .IntSlice [j ],_edec .IntSlice [i ];
};func _baeg (_gacca ,_adage *Bitmap ,_fdfa ,_dedg int )(_bcef error ){const _efgf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_eaeb ,_affb ,_adac ,_acbc int ;_ddba ,_gced ,_edcd ,_eefc ,_eaba ,_bede ,_acga byte ;
);for _eaeb =0;_eaeb < _fdfa ;_eaeb ++{_adac =_eaeb *_gacca .RowStride ;_acbc =_eaeb *_adage .RowStride ;for _affb =0;_affb < _dedg ;_affb ++{_ddba ,_bcef =_gacca .GetByte (_adac +_affb );if _bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_gced ,_bcef =_adage .GetByte (_acbc +_affb );if _bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _eaeb > 0{_edcd ,_bcef =_gacca .GetByte (_adac -_gacca .RowStride +_affb );if _bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"\u0069\u0020\u003e \u0030");
};_ddba |=_edcd ;};if _affb > 0{_eefc ,_bcef =_gacca .GetByte (_adac +_affb -1);if _bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"\u006a\u0020\u003e \u0030");};_ddba |=_eefc <<7;};_ddba &=_gced ;if _ddba ==0||(^_ddba )==0{if _bcef =_gacca .SetByte (_adac +_affb ,_ddba );
_bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_acga =_ddba ;_ddba =(_ddba |(_ddba >>1)|(_ddba <<1))&_gced ;if (_ddba ^_acga )==0{if _bcef =_gacca .SetByte (_adac +_affb ,_ddba );
_bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _eaeb =_fdfa -1;_eaeb >=0;_eaeb --{_adac =_eaeb *_gacca .RowStride ;_acbc =_eaeb *_adage .RowStride ;
for _affb =_dedg -1;_affb >=0;_affb --{if _ddba ,_bcef =_gacca .GetByte (_adac +_affb );_bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _gced ,_bcef =_adage .GetByte (_acbc +_affb );
_bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _eaeb < _fdfa -1{if _eaba ,_bcef =_gacca .GetByte (_adac +_gacca .RowStride +_affb );_bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_ddba |=_eaba ;};if _affb < _dedg -1{if _bede ,_bcef =_gacca .GetByte (_adac +_affb +1);_bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_ddba |=_bede >>7;
};_ddba &=_gced ;if _ddba ==0||(^_ddba )==0{if _bcef =_gacca .SetByte (_adac +_affb ,_ddba );_bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_acga =_ddba ;_ddba =(_ddba |(_ddba >>1)|(_ddba <<1))&_gced ;if (_ddba ^_acga )==0{if _bcef =_gacca .SetByte (_adac +_affb ,_ddba );_bcef !=nil {return _df .Wrap (_bcef ,_efgf ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_fga *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _fga .removeBorderGeneral (left ,right ,top ,bot );};func (_ccac *Bitmap )centroid (_cfdb ,_begab []int )(Point ,error ){_bddc :=Point {};
_ccac .setPadBits (0);if len (_cfdb )==0{_cfdb =_eecae ();};if len (_begab )==0{_begab =_gbga ();};var _gebe ,_deag ,_dddc ,_cagdg ,_bfdg ,_dbbf int ;var _edag byte ;for _bfdg =0;_bfdg < _ccac .Height ;_bfdg ++{_dacf :=_ccac .RowStride *_bfdg ;_cagdg =0;
for _dbbf =0;_dbbf < _ccac .RowStride ;_dbbf ++{_edag =_ccac .Data [_dacf +_dbbf ];if _edag !=0{_cagdg +=_begab [_edag ];_gebe +=_cfdb [_edag ]+_dbbf *8*_begab [_edag ];};};_dddc +=_cagdg ;_deag +=_cagdg *_bfdg ;};if _dddc !=0{_bddc .X =float32 (_gebe )/float32 (_dddc );
_bddc .Y =float32 (_deag )/float32 (_dddc );};return _bddc ,nil ;};func (_gdef *Bitmap )SetDefaultPixel (){for _deef :=range _gdef .Data {_gdef .Data [_deef ]=byte (0xff);};};func (_eace *ClassedPoints )SortByY (){_eace ._deaef =_eace .ySortFunction ();
_b .Sort (_eace )};func (_gaea *byHeight )Less (i ,j int )bool {return _gaea .Values [i ].Height < _gaea .Values [j ].Height };type BoundaryCondition int ;func _ggfa ()(_gbbc []byte ){_gbbc =make ([]byte ,256);for _aae :=0;_aae < 256;_aae ++{_gaad :=byte (_aae );
_gbbc [_gaad ]=(_gaad &0x01)|((_gaad &0x04)>>1)|((_gaad &0x10)>>2)|((_gaad &0x40)>>3)|((_gaad &0x02)<<3)|((_gaad &0x08)<<2)|((_gaad &0x20)<<1)|(_gaad &0x80);};return _gbbc ;};type Getter interface{GetBitmap ()*Bitmap ;};func (_ggfd *Bitmap )setEightBytes (_aaef int ,_gbddf uint64 )error {_cccfd :=_ggfd .RowStride -(_aaef %_ggfd .RowStride );
if _ggfd .RowStride !=_ggfd .Width >>3{_cccfd --;};if _cccfd >=8{return _ggfd .setEightFullBytes (_aaef ,_gbddf );};return _ggfd .setEightPartlyBytes (_aaef ,_cccfd ,_gbddf );};func _bcdd (_cee ,_caca ,_ebg *Bitmap )(*Bitmap ,error ){const _bdfe ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";
if _caca ==nil {return nil ,_df .Error (_bdfe ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ebg ==nil {return nil ,_df .Error (_bdfe ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _cee ==_ebg {return nil ,_df .Error (_bdfe ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");
};if !_caca .SizesEqual (_ebg ){_ag .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_bdfe );
};var _bcbf error ;if _cee ,_bcbf =_fbc (_cee ,_caca );_bcbf !=nil {return nil ,_df .Wrap (_bcbf ,_bdfe ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _bcbf =_cee .RasterOperation (0,0,_cee .Width ,_cee .Height ,PixSrcXorDst ,_ebg ,0,0);
_bcbf !=nil {return nil ,_df .Wrap (_bcbf ,_bdfe ,"");};return _cee ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _edc ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_efea ,_bbfd :=p1 .Width ,p1 .Height ;
_gaaefc ,_fdgcc :=p3 .Width ,p3 .Height ;if _gd .Abs (_efea -_gaaefc )> maxDiffW {return false ,nil ;};if _gd .Abs (_bbfd -_fdgcc )> maxDiffH {return false ,nil ;};_ebcc :=int (delX +_gd .Sign (delX )*0.5);_ace :=int (delY +_gd .Sign (delY )*0.5);var _fff error ;
_cedba :=p1 .CreateTemplate ();if _fff =_cedba .RasterOperation (0,0,_efea ,_bbfd ,PixSrc ,p1 ,0,0);_fff !=nil {return false ,_df .Wrap (_fff ,_edc ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _fff =_cedba .RasterOperation (_ebcc ,_ace ,_efea ,_bbfd ,PixNotSrcAndDst ,p4 ,0,0);
_fff !=nil {return false ,_df .Wrap (_fff ,_edc ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _cedba .Zero (){return false ,nil ;};if _fff =_cedba .RasterOperation (_ebcc ,_ace ,_gaaefc ,_fdgcc ,PixSrc ,p3 ,0,0);_fff !=nil {return false ,_df .Wrap (_fff ,_edc ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _fff =_cedba .RasterOperation (0,0,_gaaefc ,_fdgcc ,PixNotSrcAndDst ,p2 ,0,0);_fff !=nil {return false ,_df .Wrap (_fff ,_edc ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _cedba .Zero (),nil ;};func _bfgaa (_badc ,_eded *Bitmap ,_ecaa *Selection )(*Bitmap ,error ){const _ebgd ="\u006f\u0070\u0065\u006e";
var _edagd error ;_badc ,_edagd =_edcc (_badc ,_eded ,_ecaa );if _edagd !=nil {return nil ,_df .Wrap (_edagd ,_ebgd ,"");};_dbcab ,_edagd :=_cdbe (nil ,_eded ,_ecaa );if _edagd !=nil {return nil ,_df .Wrap (_edagd ,_ebgd ,"");};_ ,_edagd =_bbbb (_badc ,_dbcab ,_ecaa );
if _edagd !=nil {return nil ,_df .Wrap (_edagd ,_ebgd ,"");};return _badc ,nil ;};func (_dead *Bitmap )addPadBits ()(_daba error ){const _aec ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_agf :=_dead .Width %8;
if _agf ==0{return nil ;};_faad :=_dead .Width /8;_dabf :=_e .NewReader (_dead .Data );_cbdd :=make ([]byte ,_dead .Height *_dead .RowStride );_dec :=_e .NewWriterMSB (_cbdd );_gbaea :=make ([]byte ,_faad );var (_dbea int ;_aaeg uint64 ;);for _dbea =0;
_dbea < _dead .Height ;_dbea ++{if _ ,_daba =_dabf .Read (_gbaea );_daba !=nil {return _df .Wrap (_daba ,_aec ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_daba =_dec .Write (_gbaea );_daba !=nil {return _df .Wrap (_daba ,_aec ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _aaeg ,_daba =_dabf .ReadBits (byte (_agf ));_daba !=nil {return _df .Wrap (_daba ,_aec ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _daba =_dec .WriteByte (byte (_aaeg )<<uint (8-_agf ));_daba !=nil {return _df .Wrap (_daba ,_aec ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_dead .Data =_dec .Data ();return nil ;};func TstWSymbol (t *_a .T ,scale ...int )*Bitmap {_gfbbb ,_eaab :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_g .NoError (t ,_eaab );return TstGetScaledSymbol (t ,_gfbbb ,scale ...);};func _gb (_dg ,_fa *Bitmap )(_fd error ){const _cf ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_fg :=_fa .RowStride ;_ca :=_dg .RowStride ;_cae :=_fa .RowStride *4-_dg .RowStride ;var (_faa ,_db byte ;_de uint32 ;_gg ,_dea ,_ef ,_ge ,_bf ,_feb ,_fb int ;);for _ef =0;_ef < _fa .Height ;_ef ++{_gg =_ef *_fg ;_dea =4*_ef *_ca ;for _ge =0;_ge < _fg ;
_ge ++{_faa =_fa .Data [_gg +_ge ];_de =_aedff [_faa ];_feb =_dea +_ge *4;if _cae !=0&&(_ge +1)*4> _dg .RowStride {for _bf =_cae ;_bf > 0;_bf --{_db =byte ((_de >>uint (_bf *8))&0xff);_fb =_feb +(_cae -_bf );if _fd =_dg .SetByte (_fb ,_db );_fd !=nil {return _df .Wrapf (_fd ,_cf ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_bf );
};};}else if _fd =_dg .setFourBytes (_feb ,_de );_fd !=nil {return _df .Wrap (_fd ,_cf ,"");};if _fd =_dg .setFourBytes (_dea +_ge *4,_aedff [_fa .Data [_gg +_ge ]]);_fd !=nil {return _df .Wrap (_fd ,_cf ,"");};};for _bf =1;_bf < 4;_bf ++{for _ge =0;_ge < _ca ;
_ge ++{if _fd =_dg .SetByte (_dea +_bf *_ca +_ge ,_dg .Data [_dea +_ge ]);_fd !=nil {return _df .Wrapf (_fd ,_cf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_bf ,_ge );
};};};};return nil ;};func _adcb (_afg ,_bacd int )int {if _afg < _bacd {return _afg ;};return _bacd ;};func (_eeb *Bitmap )connComponentsBitmapsBB (_eagf *Bitmaps ,_ccdg int )(_dafd *Boxes ,_dcb error ){const _dfbg ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _ccdg !=4&&_ccdg !=8{return nil ,_df .Error (_dfbg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _eagf ==nil {return nil ,_df .Error (_dfbg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_eagf .Values )> 0{return nil ,_df .Error (_dfbg ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _eeb .Zero (){return &Boxes {},nil ;};
var (_fcg ,_ggdfc ,_cabg ,_gdff *Bitmap ;);_eeb .setPadBits (0);if _fcg ,_dcb =_fbc (nil ,_eeb );_dcb !=nil {return nil ,_df .Wrap (_dcb ,_dfbg ,"\u0062\u006d\u0031");};if _ggdfc ,_dcb =_fbc (nil ,_eeb );_dcb !=nil {return nil ,_df .Wrap (_dcb ,_dfbg ,"\u0062\u006d\u0032");
};_aeed :=&_gd .Stack {};_aeed .Aux =&_gd .Stack {};_dafd =&Boxes {};var (_eaff ,_fecd int ;_bcda _ad .Point ;_bdbd bool ;_fbb *_ad .Rectangle ;);for {if _bcda ,_bdbd ,_dcb =_fcg .nextOnPixel (_eaff ,_fecd );_dcb !=nil {return nil ,_df .Wrap (_dcb ,_dfbg ,"");
};if !_bdbd {break ;};if _fbb ,_dcb =_cfad (_fcg ,_aeed ,_bcda .X ,_bcda .Y ,_ccdg );_dcb !=nil {return nil ,_df .Wrap (_dcb ,_dfbg ,"");};if _dcb =_dafd .Add (_fbb );_dcb !=nil {return nil ,_df .Wrap (_dcb ,_dfbg ,"");};if _cabg ,_dcb =_fcg .clipRectangle (_fbb ,nil );
_dcb !=nil {return nil ,_df .Wrap (_dcb ,_dfbg ,"\u0062\u006d\u0033");};if _gdff ,_dcb =_ggdfc .clipRectangle (_fbb ,nil );_dcb !=nil {return nil ,_df .Wrap (_dcb ,_dfbg ,"\u0062\u006d\u0034");};if _ ,_dcb =_bcdd (_cabg ,_cabg ,_gdff );_dcb !=nil {return nil ,_df .Wrap (_dcb ,_dfbg ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _dcb =_ggdfc .RasterOperation (_fbb .Min .X ,_fbb .Min .Y ,_fbb .Dx (),_fbb .Dy (),PixSrcXorDst ,_cabg ,0,0);_dcb !=nil {return nil ,_df .Wrap (_dcb ,_dfbg ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_eagf .AddBitmap (_cabg );
_eaff =_bcda .X ;_fecd =_bcda .Y ;};_eagf .Boxes =*_dafd ;return _dafd ,nil ;};func _egc (_gce ,_gfd int )*Bitmap {return &Bitmap {Width :_gce ,Height :_gfd ,RowStride :(_gce +7)>>3};};func (_dabb Points )Get (i int )(Point ,error ){if i > len (_dabb )-1{return Point {},_df .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _dabb [i ],nil ;};func (_ffa *Bitmap )GetVanillaData ()[]byte {if _ffa .Color ==Chocolate {_ffa .inverseData ();};return _ffa .Data ;};func (_abg *Bitmap )GetChocolateData ()[]byte {if _abg .Color ==Vanilla {_abg .inverseData ();};return _abg .Data ;
};func (_acfb *Bitmap )removeBorderGeneral (_cacf ,_fec ,_bagg ,_aecc int )(*Bitmap ,error ){const _gecd ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _cacf < 0||_fec < 0||_bagg < 0||_aecc < 0{return nil ,_df .Error (_gecd ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");
};_dfdf ,_faaa :=_acfb .Width ,_acfb .Height ;_fdfc :=_dfdf -_cacf -_fec ;_cbbd :=_faaa -_bagg -_aecc ;if _fdfc <=0{return nil ,_df .Errorf (_gecd ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_fdfc );
};if _cbbd <=0{return nil ,_df .Errorf (_gecd ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_cbbd );};_gagf :=New (_fdfc ,_cbbd );_gagf .Color =_acfb .Color ;_bfeg :=_gagf .RasterOperation (0,0,_fdfc ,_cbbd ,PixSrc ,_acfb ,_cacf ,_bagg );
if _bfeg !=nil {return nil ,_df .Wrap (_bfeg ,_gecd ,"");};return _gagf ,nil ;};func (_efdf *Bitmap )GetByteIndex (x ,y int )int {return y *_efdf .RowStride +(x >>3)};func MakePixelCentroidTab8 ()[]int {return _eecae ()};func _deff (_ecgba *Bitmap ,_aaca *_gd .Stack ,_gbda ,_gdfg int )(_acfbe *_ad .Rectangle ,_fgbc error ){const _fece ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ecgba ==nil {return nil ,_df .Error (_fece ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _aaca ==nil {return nil ,_df .Error (_fece ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_gaaa ,_edfg :=_ecgba .Width ,_ecgba .Height ;_fccfa :=_gaaa -1;_abad :=_edfg -1;if _gbda < 0||_gbda > _fccfa ||_gdfg < 0||_gdfg > _abad ||!_ecgba .GetPixel (_gbda ,_gdfg ){return nil ,nil ;};var _beaf *_ad .Rectangle ;_beaf ,_fgbc =Rect (100000,100000,0,0);
if _fgbc !=nil {return nil ,_df .Wrap (_fgbc ,_fece ,"");};if _fgbc =_bdad (_aaca ,_gbda ,_gbda ,_gdfg ,1,_abad ,_beaf );_fgbc !=nil {return nil ,_df .Wrap (_fgbc ,_fece ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fgbc =_bdad (_aaca ,_gbda ,_gbda ,_gdfg +1,-1,_abad ,_beaf );
_fgbc !=nil {return nil ,_df .Wrap (_fgbc ,_fece ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_beaf .Min .X ,_beaf .Max .X =_gbda ,_gbda ;_beaf .Min .Y ,_beaf .Max .Y =_gdfg ,_gdfg ;var (_cbag *fillSegment ;
_ecca int ;);for _aaca .Len ()> 0{if _cbag ,_fgbc =_dgcd (_aaca );_fgbc !=nil {return nil ,_df .Wrap (_fgbc ,_fece ,"");};_gdfg =_cbag ._bcec ;for _gbda =_cbag ._cgdac ;_gbda >=0&&_ecgba .GetPixel (_gbda ,_gdfg );_gbda --{if _fgbc =_ecgba .SetPixel (_gbda ,_gdfg ,0);
_fgbc !=nil {return nil ,_df .Wrap (_fgbc ,_fece ,"");};};if _gbda >=_cbag ._cgdac {for _gbda ++;_gbda <=_cbag ._ccca &&_gbda <=_fccfa &&!_ecgba .GetPixel (_gbda ,_gdfg );_gbda ++{};_ecca =_gbda ;if !(_gbda <=_cbag ._ccca &&_gbda <=_fccfa ){continue ;};
}else {_ecca =_gbda +1;if _ecca < _cbag ._cgdac -1{if _fgbc =_bdad (_aaca ,_ecca ,_cbag ._cgdac -1,_cbag ._bcec ,-_cbag ._dbgde ,_abad ,_beaf );_fgbc !=nil {return nil ,_df .Wrap (_fgbc ,_fece ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_gbda =_cbag ._cgdac +1;};for {for ;_gbda <=_fccfa &&_ecgba .GetPixel (_gbda ,_gdfg );_gbda ++{if _fgbc =_ecgba .SetPixel (_gbda ,_gdfg ,0);_fgbc !=nil {return nil ,_df .Wrap (_fgbc ,_fece ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _fgbc =_bdad (_aaca ,_ecca ,_gbda -1,_cbag ._bcec ,_cbag ._dbgde ,_abad ,_beaf );
_fgbc !=nil {return nil ,_df .Wrap (_fgbc ,_fece ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gbda > _cbag ._ccca +1{if _fgbc =_bdad (_aaca ,_cbag ._ccca +1,_gbda -1,_cbag ._bcec ,-_cbag ._dbgde ,_abad ,_beaf );_fgbc !=nil {return nil ,_df .Wrap (_fgbc ,_fece ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _gbda ++;_gbda <=_cbag ._ccca &&_gbda <=_fccfa &&!_ecgba .GetPixel (_gbda ,_gdfg );_gbda ++{};_ecca =_gbda ;if !(_gbda <=_cbag ._ccca &&_gbda <=_fccfa ){break ;};};};_beaf .Max .X ++;_beaf .Max .Y ++;return _beaf ,nil ;};type Boxes []*_ad .Rectangle ;
func _bdad (_cegbd *_gd .Stack ,_eggb ,_gegb ,_adcdee ,_cbaee ,_dddg int ,_fead *_ad .Rectangle )(_eddb error ){const _ceag ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _cegbd ==nil {return _df .Error (_ceag ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _fead ==nil {return _df .Error (_ceag ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_fead .Min .X =_gd .Min (_fead .Min .X ,_eggb );_fead .Max .X =_gd .Max (_fead .Max .X ,_gegb );_fead .Min .Y =_gd .Min (_fead .Min .Y ,_adcdee );_fead .Max .Y =_gd .Max (_fead .Max .Y ,_adcdee );if !(_adcdee +_cbaee >=0&&_adcdee +_cbaee <=_dddg ){return nil ;
};if _cegbd .Aux ==nil {return _df .Error (_ceag ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _abaf *fillSegment ;_acba ,_gbcab :=_cegbd .Aux .Pop ();if _gbcab {if _abaf ,_gbcab =_acba .(*fillSegment );
!_gbcab {return _df .Error (_ceag ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_abaf =&fillSegment {};
};_abaf ._cgdac =_eggb ;_abaf ._ccca =_gegb ;_abaf ._bcec =_adcdee ;_abaf ._dbgde =_cbaee ;_cegbd .Push (_abaf );return nil ;};func (_caf *Bitmap )SetPixel (x ,y int ,pixel byte )error {_dbe :=_caf .GetByteIndex (x ,y );if _dbe > len (_caf .Data )-1{return _df .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_dbe );
};_aad :=_caf .GetBitOffset (x );_bff :=uint (7-_aad );_dbge :=_caf .Data [_dbe ];var _fba byte ;if pixel ==1{_fba =_dbge |(pixel &0x01<<_bff );}else {_fba =_dbge &^(1<<_bff );};_caf .Data [_dbe ]=_fba ;return nil ;};func (_ebgdd *ClassedPoints )XAtIndex (i int )float32 {return (*_ebgdd .Points )[_ebgdd .IntSlice [i ]].X };
func (_gaaee *ClassedPoints )SortByX (){_gaaee ._deaef =_gaaee .xSortFunction ();_b .Sort (_gaaee )};func (_ecbe *Bitmaps )selectByIndicator (_ddcf *_gd .NumSlice )(_feaeb *Bitmaps ,_efdgg error ){const _bcgdd ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ecbe ==nil {return nil ,_df .Error (_bcgdd ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _ddcf ==nil {return nil ,_df .Error (_bcgdd ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_ecbe .Values )==0{return _ecbe ,nil ;};if len (*_ddcf )!=len (_ecbe .Values ){return nil ,_df .Errorf (_bcgdd ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_ddcf ),len (_ecbe .Values ));
};var _fgbcf ,_acbfa ,_agbg int ;for _acbfa =0;_acbfa < len (*_ddcf );_acbfa ++{if _fgbcf ,_efdgg =_ddcf .GetInt (_acbfa );_efdgg !=nil {return nil ,_df .Wrap (_efdgg ,_bcgdd ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _fgbcf ==1{_agbg ++;
};};if _agbg ==len (_ecbe .Values ){return _ecbe ,nil ;};_feaeb =&Bitmaps {};_bced :=len (_ecbe .Values )==len (_ecbe .Boxes );for _acbfa =0;_acbfa < len (*_ddcf );_acbfa ++{if _fgbcf =int ((*_ddcf )[_acbfa ]);_fgbcf ==0{continue ;};_feaeb .Values =append (_feaeb .Values ,_ecbe .Values [_acbfa ]);
if _bced {_feaeb .Boxes =append (_feaeb .Boxes ,_ecbe .Boxes [_acbfa ]);};};return _feaeb ,nil ;};var (_facf *Bitmap ;_cebc *Bitmap ;);func (_adge *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_edabc *Bitmaps ,_bagb error ){const _egcg ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _adge ==nil {return nil ,_df .Error (_egcg ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_df .Errorf (_egcg ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_df .Errorf (_egcg ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_fcaad ,_bagb :=_adge .makeSizeIndicator (width ,height ,tp ,relation );if _bagb !=nil {return nil ,_df .Wrap (_bagb ,_egcg ,"");};_edabc ,_bagb =_adge .selectByIndicator (_fcaad );if _bagb !=nil {return nil ,_df .Wrap (_bagb ,_egcg ,"");};return _edabc ,nil ;
};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;
MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_cfcg *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _gcfg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_cfcg .IntSlice .Size (){return 0,_df .Errorf (_gcfg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_cfcg .XAtIndex (i )),nil ;};func (_cfddc *Boxes )Add (box *_ad .Rectangle )error {if _cfddc ==nil {return _df .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_cfddc =append (*_cfddc ,box );return nil ;};func _gdc (_abce ,_cbg *Bitmap ,_dgag ,_bde ,_bbfc uint ,_cfde ,_fcae int ,_fgab bool ,_dabd ,_bbcg int )error {for _dag :=_cfde ;_dag < _fcae ;_dag ++{if _dabd +1< len (_abce .Data ){_gbaef :=_dag +1==_fcae ;
_bcf ,_cefb :=_abce .GetByte (_dabd );if _cefb !=nil {return _cefb ;};_dabd ++;_bcf <<=_dgag ;_cba ,_cefb :=_abce .GetByte (_dabd );if _cefb !=nil {return _cefb ;};_cba >>=_bde ;_feag :=_bcf |_cba ;if _gbaef &&!_fgab {_feag =_aaff (_bbfc ,_feag );};_cefb =_cbg .SetByte (_bbcg ,_feag );
if _cefb !=nil {return _cefb ;};_bbcg ++;if _gbaef &&_fgab {_gbgd ,_deabd :=_abce .GetByte (_dabd );if _deabd !=nil {return _deabd ;};_gbgd <<=_dgag ;_feag =_aaff (_bbfc ,_gbgd );if _deabd =_cbg .SetByte (_bbcg ,_feag );_deabd !=nil {return _deabd ;};};
continue ;};_bead ,_daebd :=_abce .GetByte (_dabd );if _daebd !=nil {_ag .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_dabd ,_daebd );
return _daebd ;};_bead <<=_dgag ;_dabd ++;_daebd =_cbg .SetByte (_bbcg ,_bead );if _daebd !=nil {return _daebd ;};_bbcg ++;};return nil ;};type Component int ;func _dfaf (_aaec ,_fbae *Bitmap ,_cafe ,_cdd int )(*Bitmap ,error ){const _bdabe ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _fbae ==nil {return nil ,_df .Error (_bdabe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cafe < 1&&_cdd < 1{return nil ,_df .Error (_bdabe ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _cafe ==1&&_cdd ==1{return _fbae .Copy (),nil ;};if _cafe ==1||_cdd ==1{var _abec error ;_cafeb :=SelCreateBrick (_cdd ,_cafe ,_cdd /2,_cafe /2,SelHit );_aaec ,_abec =_bfgaa (_aaec ,_fbae ,_cafeb );if _abec !=nil {return nil ,_df .Wrap (_abec ,_bdabe ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _aaec ,nil ;};_edca :=SelCreateBrick (1,_cafe ,0,_cafe /2,SelHit );_ebbaf :=SelCreateBrick (_cdd ,1,_cdd /2,0,SelHit );_eecg ,_gecdd :=_cdbe (nil ,_fbae ,_edca );if _gecdd !=nil {return nil ,_df .Wrap (_gecdd ,_bdabe ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_aaec ,_gecdd =_cdbe (_aaec ,_eecg ,_ebbaf );if _gecdd !=nil {return nil ,_df .Wrap (_gecdd ,_bdabe ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_gecdd =_bbbb (_eecg ,_aaec ,_edca );if _gecdd !=nil {return nil ,_df .Wrap (_gecdd ,_bdabe ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_gecdd =_bbbb (_aaec ,_eecg ,_ebbaf );if _gecdd !=nil {return nil ,_df .Wrap (_gecdd ,_bdabe ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _aaec ,nil ;};func (_cdgd *Bitmap )setPadBits (_bedb int ){_cag :=8-_cdgd .Width %8;
if _cag ==8{return ;};_fbfc :=_cdgd .Width /8;_bfb :=_ddgc [_cag ];if _bedb ==0{_bfb ^=_bfb ;};var _edfbc int ;for _eaea :=0;_eaea < _cdgd .Height ;_eaea ++{_edfbc =_eaea *_cdgd .RowStride +_fbfc ;if _bedb ==0{_cdgd .Data [_edfbc ]&=_bfb ;}else {_cdgd .Data [_edfbc ]|=_bfb ;
};};};func TstWordBitmap (t *_a .T ,scale ...int )*Bitmap {_edba :=1;if len (scale )> 0{_edba =scale [0];};_beefa :=3;_bfcff :=9+7+15+2*_beefa ;_cdag :=5+_beefa +5;_cfe :=New (_bfcff *_edba ,_cdag *_edba );_cefac :=&Bitmaps {};var _eceg *int ;_beefa *=_edba ;
_befe :=0;_eceg =&_befe ;_deecc :=0;_ebad :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,1*_edba );_ebad =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,_beefa );_ebad =TstISymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,1*_edba );
_ebad =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,_beefa );_ebad =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,1*_edba );_ebad =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,1*_edba );
_ebad =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,0);*_eceg =0;_deecc =5*_edba +_beefa ;_ebad =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,1*_edba );_ebad =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,_beefa );
_ebad =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,1*_edba );_ebad =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,1*_edba );_ebad =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,1*_edba );
_ebad =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,1*_edba );_ebad =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cefac ,_ebad ,_eceg ,_deecc ,0);TstWriteSymbols (t ,_cefac ,_cfe );return _cfe ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _afeda ,_gdeg int ;
_ccce :=src .RowStride -1;if x < 0{_gdeg =-x ;x =0;}else if x +src .Width > dst .Width {_ccce -=src .Width +x -dst .Width ;};if y < 0{_afeda =-y ;y =0;_gdeg +=src .RowStride ;_ccce +=src .RowStride ;}else if y +src .Height > dst .Height {_afeda =src .Height +y -dst .Height ;
};var (_adae int ;_eac error ;);_dgd :=x &0x07;_fcbf :=8-_dgd ;_fbef :=src .Width &0x07;_dbf :=_fcbf -_fbef ;_fcfd :=_fcbf &0x07!=0;_egbg :=src .Width <=((_ccce -_gdeg )<<3)+_fcbf ;_efcc :=dst .GetByteIndex (x ,y );_aeae :=_afeda +dst .Height ;if src .Height > _aeae {_adae =_aeae ;
}else {_adae =src .Height ;};switch {case !_fcfd :_eac =_ffd (src ,dst ,_afeda ,_adae ,_efcc ,_gdeg ,_ccce ,op );case _egbg :_eac =_aacc (src ,dst ,_afeda ,_adae ,_efcc ,_gdeg ,_ccce ,_dbf ,_dgd ,_fcbf ,op );default:_eac =_ggg (src ,dst ,_afeda ,_adae ,_efcc ,_gdeg ,_ccce ,_dbf ,_dgd ,_fcbf ,op ,_fbef );
};return _eac ;};func _faac (_gfage *Bitmap ,_adcbe *Bitmap ,_ece int )(_bbcb error ){const _acee ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_efb :=_adcb (_gfage .Height ,_adcbe .Height );_cdeag :=_adcb (_gfage .RowStride ,_adcbe .RowStride );
switch _ece {case 4:_bbcb =_baeg (_gfage ,_adcbe ,_efb ,_cdeag );case 8:_bbcb =_fdff (_gfage ,_adcbe ,_efb ,_cdeag );default:return _df .Errorf (_acee ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_ece );
};if _bbcb !=nil {return _df .Wrap (_bbcb ,_acee ,"");};return nil ;};func (_cfa *Bitmap )Equivalent (s *Bitmap )bool {return _cfa .equivalent (s )};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;
LocSelectIfBoth ;);func (_gfab MorphProcess )verify (_abea int ,_bgfe ,_aaea *int )error {const _gdde ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _gfab .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_gfab .Arguments )!=2{return _df .Error (_gdde ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_dbcg ,_agae :=_gfab .getWidthHeight ();if _dbcg <=0||_agae <=0{return _df .Error (_gdde ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_aagd :=len (_gfab .Arguments );*_bgfe +=_aagd ;if _aagd < 1||_aagd > 4{return _df .Error (_gdde ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _abcca :=0;_abcca < _aagd ;_abcca ++{if _gfab .Arguments [_abcca ]< 1||_gfab .Arguments [_abcca ]> 4{return _df .Error (_gdde ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_gfab .Arguments )==0{return _df .Error (_gdde ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gbdg :=_gfab .Arguments [0];if _gbdg !=2&&_gbdg !=4&&_gbdg !=8{return _df .Error (_gdde ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_bgfe -=_gffb [_gbdg /4];case MopAddBorder :if len (_gfab .Arguments )==0{return _df .Error (_gdde ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aadb :=_gfab .Arguments [0];if _abea > 0{return _df .Error (_gdde ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _aadb < 1{return _df .Error (_gdde ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_aaea =_aadb ;};return nil ;};func (_ggab *Boxes )selectWithIndicator (_bdab *_gd .NumSlice )(_dad *Boxes ,_bfab error ){const _aggd ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ggab ==nil {return nil ,_df .Error (_aggd ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _bdab ==nil {return nil ,_df .Error (_aggd ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_bdab )!=len (*_ggab ){return nil ,_df .Error (_aggd ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _ddf ,_fgaa int ;for _bdge :=0;_bdge < len (*_bdab );_bdge ++{if _ddf ,_bfab =_bdab .GetInt (_bdge );_bfab !=nil {return nil ,_df .Wrap (_bfab ,_aggd ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _ddf ==1{_fgaa ++;
};};if _fgaa ==len (*_ggab ){return _ggab ,nil ;};_abcd :=Boxes {};for _adeg :=0;_adeg < len (*_bdab );_adeg ++{_ddf =int ((*_bdab )[_adeg ]);if _ddf ==0{continue ;};_abcd =append (_abcd ,(*_ggab )[_adeg ]);};_dad =&_abcd ;return _dad ,nil ;};const (Vanilla Color =iota ;
Chocolate ;);func (_bbdb *Selection )findMaxTranslations ()(_bgbc ,_efaf ,_ffcg ,_caaa int ){for _abbf :=0;_abbf < _bbdb .Height ;_abbf ++{for _bdbbf :=0;_bdbbf < _bbdb .Width ;_bdbbf ++{if _bbdb .Data [_abbf ][_bdbbf ]==SelHit {_bgbc =_efdfd (_bgbc ,_bbdb .Cx -_bdbbf );
_efaf =_efdfd (_efaf ,_bbdb .Cy -_abbf );_ffcg =_efdfd (_ffcg ,_bdbbf -_bbdb .Cx );_caaa =_efdfd (_caaa ,_abbf -_bbdb .Cy );};};};return _bgbc ,_efaf ,_ffcg ,_caaa ;};func (_cdb *Bitmap )clearAll ()error {return _cdb .RasterOperation (0,0,_cdb .Width ,_cdb .Height ,PixClr ,nil ,0,0);
};func (_dacc Points )GetGeometry (i int )(_fbg ,_fdaae float32 ,_bgbb error ){if i > len (_dacc )-1{return 0,0,_df .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_agbf :=_dacc [i ];return _agbf .X ,_agbf .Y ,nil ;};func _bafg (_gdeee *Bitmap ,_efcb *Bitmap ,_fbefe *Selection ,_eddeg **Bitmap )(*Bitmap ,error ){const _eedg ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _efcb ==nil {return nil ,_df .Error (_eedg ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _fbefe ==nil {return nil ,_df .Error (_eedg ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_ecaae ,_ecae :=_fbefe .Height ,_fbefe .Width ;if _ecaae ==0||_ecae ==0{return nil ,_df .Error (_eedg ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _gdeee ==nil {_gdeee =_efcb .createTemplate ();
*_eddeg =_efcb ;return _gdeee ,nil ;};_gdeee .Width =_efcb .Width ;_gdeee .Height =_efcb .Height ;_gdeee .RowStride =_efcb .RowStride ;_gdeee .Color =_efcb .Color ;_gdeee .Data =make ([]byte ,_efcb .RowStride *_efcb .Height );if _gdeee ==_efcb {*_eddeg =_efcb .Copy ();
}else {*_eddeg =_efcb ;};return _gdeee ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_bdbb float64 ,_aggb error ){const _fdaa ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_df .Error (_fdaa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_df .Error (_fdaa ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_df .Error (_fdaa ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_ddga ,_edde :=bm1 .Width ,bm1 .Height ;_eacb ,_ggfdd :=bm2 .Width ,bm2 .Height ;
_gca :=_dcag (_ddga -_eacb );if _gca > maxDiffW {return 0,nil ;};_cbgb :=_dcag (_edde -_ggfdd );if _cbgb > maxDiffH {return 0,nil ;};var _ffbg ,_fbce int ;if delX >=0{_ffbg =int (delX +0.5);}else {_ffbg =int (delX -0.5);};if delY >=0{_fbce =int (delY +0.5);
}else {_fbce =int (delY -0.5);};_gbcd :=_efdfd (_fbce ,0);_gfff :=_adcb (_ggfdd +_fbce ,_edde );_bcddg :=bm1 .RowStride *_gbcd ;_eegc :=bm2 .RowStride *(_gbcd -_fbce );_cbce :=_efdfd (_ffbg ,0);_gcae :=_adcb (_eacb +_ffbg ,_ddga );_acb :=bm2 .RowStride ;
var _dcbb ,_dfcf int ;if _ffbg >=8{_dcbb =_ffbg >>3;_bcddg +=_dcbb ;_cbce -=_dcbb <<3;_gcae -=_dcbb <<3;_ffbg &=7;}else if _ffbg <=-8{_dfcf =-((_ffbg +7)>>3);_eegc +=_dfcf ;_acb -=_dfcf ;_ffbg +=_dfcf <<3;};if _cbce >=_gcae ||_gbcd >=_gfff {return 0,nil ;
};_bgge :=(_gcae +7)>>3;var (_caa ,_gfdac ,_bggc byte ;_egef ,_gfbb ,_fagg int ;);switch {case _ffbg ==0:for _fagg =_gbcd ;_fagg < _gfff ;_fagg ,_bcddg ,_eegc =_fagg +1,_bcddg +bm1 .RowStride ,_eegc +bm2 .RowStride {for _gfbb =0;_gfbb < _bgge ;_gfbb ++{_bggc =bm1 .Data [_bcddg +_gfbb ]&bm2 .Data [_eegc +_gfbb ];
_egef +=tab [_bggc ];};};case _ffbg > 0:if _acb < _bgge {for _fagg =_gbcd ;_fagg < _gfff ;_fagg ,_bcddg ,_eegc =_fagg +1,_bcddg +bm1 .RowStride ,_eegc +bm2 .RowStride {_caa ,_gfdac =bm1 .Data [_bcddg ],bm2 .Data [_eegc ]>>uint (_ffbg );_bggc =_caa &_gfdac ;
_egef +=tab [_bggc ];for _gfbb =1;_gfbb < _acb ;_gfbb ++{_caa ,_gfdac =bm1 .Data [_bcddg +_gfbb ],(bm2 .Data [_eegc +_gfbb ]>>uint (_ffbg ))|(bm2 .Data [_eegc +_gfbb -1]<<uint (8-_ffbg ));_bggc =_caa &_gfdac ;_egef +=tab [_bggc ];};_caa =bm1 .Data [_bcddg +_gfbb ];
_gfdac =bm2 .Data [_eegc +_gfbb -1]<<uint (8-_ffbg );_bggc =_caa &_gfdac ;_egef +=tab [_bggc ];};}else {for _fagg =_gbcd ;_fagg < _gfff ;_fagg ,_bcddg ,_eegc =_fagg +1,_bcddg +bm1 .RowStride ,_eegc +bm2 .RowStride {_caa ,_gfdac =bm1 .Data [_bcddg ],bm2 .Data [_eegc ]>>uint (_ffbg );
_bggc =_caa &_gfdac ;_egef +=tab [_bggc ];for _gfbb =1;_gfbb < _bgge ;_gfbb ++{_caa =bm1 .Data [_bcddg +_gfbb ];_gfdac =(bm2 .Data [_eegc +_gfbb ]>>uint (_ffbg ))|(bm2 .Data [_eegc +_gfbb -1]<<uint (8-_ffbg ));_bggc =_caa &_gfdac ;_egef +=tab [_bggc ];
};};};default:if _bgge < _acb {for _fagg =_gbcd ;_fagg < _gfff ;_fagg ,_bcddg ,_eegc =_fagg +1,_bcddg +bm1 .RowStride ,_eegc +bm2 .RowStride {for _gfbb =0;_gfbb < _bgge ;_gfbb ++{_caa =bm1 .Data [_bcddg +_gfbb ];_gfdac =bm2 .Data [_eegc +_gfbb ]<<uint (-_ffbg );
_gfdac |=bm2 .Data [_eegc +_gfbb +1]>>uint (8+_ffbg );_bggc =_caa &_gfdac ;_egef +=tab [_bggc ];};};}else {for _fagg =_gbcd ;_fagg < _gfff ;_fagg ,_bcddg ,_eegc =_fagg +1,_bcddg +bm1 .RowStride ,_eegc +bm2 .RowStride {for _gfbb =0;_gfbb < _bgge -1;_gfbb ++{_caa =bm1 .Data [_bcddg +_gfbb ];
_gfdac =bm2 .Data [_eegc +_gfbb ]<<uint (-_ffbg );_gfdac |=bm2 .Data [_eegc +_gfbb +1]>>uint (8+_ffbg );_bggc =_caa &_gfdac ;_egef +=tab [_bggc ];};_caa =bm1 .Data [_bcddg +_gfbb ];_gfdac =bm2 .Data [_eegc +_gfbb ]<<uint (-_ffbg );_bggc =_caa &_gfdac ;
_egef +=tab [_bggc ];};};};_bdbb =float64 (_egef )*float64 (_egef )/(float64 (area1 )*float64 (area2 ));return _bdbb ,nil ;};func (_ebbae *ClassedPoints )validateIntSlice ()error {const _fbab ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_ffad :=range _ebbae .IntSlice {if _ffad >=(_ebbae .Points .Size ()){return _df .Errorf (_fbab ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_ffad ,_ebbae .Points .Size ());
};};return nil ;};func (_bbce *Bitmap )String ()string {var _cga ="\u000a";for _agab :=0;_agab < _bbce .Height ;_agab ++{var _ddgf string ;for _ceab :=0;_ceab < _bbce .Width ;_ceab ++{_cfba :=_bbce .GetPixel (_ceab ,_agab );if _cfba {_ddgf +="\u0031";}else {_ddgf +="\u0030";
};};_cga +=_ddgf +"\u000a";};return _cga ;};func (_eagc *Bitmap )Copy ()*Bitmap {_beg :=make ([]byte ,len (_eagc .Data ));copy (_beg ,_eagc .Data );return &Bitmap {Width :_eagc .Width ,Height :_eagc .Height ,RowStride :_eagc .RowStride ,Data :_beg ,Color :_eagc .Color ,Text :_eagc .Text ,BitmapNumber :_eagc .BitmapNumber ,Special :_eagc .Special };
};func (_egd *Bitmap )SizesEqual (s *Bitmap )bool {if _egd ==s {return true ;};if _egd .Width !=s .Width ||_egd .Height !=s .Height {return false ;};return true ;};func (_egb *Bitmap )setEightFullBytes (_afff int ,_cfdd uint64 )error {if _afff +7> len (_egb .Data )-1{return _df .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_egb .Data [_afff ]=byte ((_cfdd &0xff00000000000000)>>56);_egb .Data [_afff +1]=byte ((_cfdd &0xff000000000000)>>48);_egb .Data [_afff +2]=byte ((_cfdd &0xff0000000000)>>40);_egb .Data [_afff +3]=byte ((_cfdd &0xff00000000)>>32);_egb .Data [_afff +4]=byte ((_cfdd &0xff000000)>>24);
_egb .Data [_afff +5]=byte ((_cfdd &0xff0000)>>16);_egb .Data [_afff +6]=byte ((_cfdd &0xff00)>>8);_egb .Data [_afff +7]=byte (_cfdd &0xff);return nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _bbbb (d ,s ,sel )};func (_egdd *Bitmaps )String ()string {_dbbbg :=_dfc .Builder {};
for _ ,_afbeb :=range _egdd .Values {_dbbbg .WriteString (_afbeb .String ());_dbbbg .WriteRune ('\n');};return _dbbbg .String ();};type MorphOperation int ;const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);const _babg =5000;func (_adcbd *ClassedPoints )YAtIndex (i int )float32 {return (*_adcbd .Points )[_adcbd .IntSlice [i ]].Y };
const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_gbac *BitmapsArray )AddBox (box *_ad .Rectangle ){_gbac .Boxes =append (_gbac .Boxes ,box )};func _cfbdg (_bbeb ,_cacb ,_ffgb byte )byte {return (_bbeb &^(_ffgb ))|(_cacb &_ffgb )};
func (_baee Points )GetIntX (i int )(int ,error ){if i >=len (_baee ){return 0,_df .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_baee [i ].X ),nil ;};func _cgfaf (_bcde *Bitmap ,_afba ...MorphProcess )(_aafa *Bitmap ,_efdb error ){const _afae ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _bcde ==nil {return nil ,_df .Error (_afae ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_afba )==0{return nil ,_df .Error (_afae ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _efdb =_fedd (_afba ...);
_efdb !=nil {return nil ,_df .Wrap (_efdb ,_afae ,"");};var _eafe ,_effg ,_gcca int ;_aafa =_bcde .Copy ();for _ ,_cega :=range _afba {switch _cega .Operation {case MopDilation :_eafe ,_effg =_cega .getWidthHeight ();_aafa ,_efdb =DilateBrick (nil ,_aafa ,_eafe ,_effg );
if _efdb !=nil {return nil ,_df .Wrap (_efdb ,_afae ,"");};case MopErosion :_eafe ,_effg =_cega .getWidthHeight ();_aafa ,_efdb =_cabf (nil ,_aafa ,_eafe ,_effg );if _efdb !=nil {return nil ,_df .Wrap (_efdb ,_afae ,"");};case MopOpening :_eafe ,_effg =_cega .getWidthHeight ();
_aafa ,_efdb =_dfaf (nil ,_aafa ,_eafe ,_effg );if _efdb !=nil {return nil ,_df .Wrap (_efdb ,_afae ,"");};case MopClosing :_eafe ,_effg =_cega .getWidthHeight ();_aafa ,_efdb =_cgab (nil ,_aafa ,_eafe ,_effg );if _efdb !=nil {return nil ,_df .Wrap (_efdb ,_afae ,"");
};case MopRankBinaryReduction :_aafa ,_efdb =_cfg (_aafa ,_cega .Arguments ...);if _efdb !=nil {return nil ,_df .Wrap (_efdb ,_afae ,"");};case MopReplicativeBinaryExpansion :_aafa ,_efdb =_dabab (_aafa ,_cega .Arguments [0]);if _efdb !=nil {return nil ,_df .Wrap (_efdb ,_afae ,"");
};case MopAddBorder :_gcca =_cega .Arguments [0];_aafa ,_efdb =_aafa .AddBorder (_gcca ,0);if _efdb !=nil {return nil ,_df .Wrap (_efdb ,_afae ,"");};default:return nil ,_df .Error (_afae ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _gcca > 0{_aafa ,_efdb =_aafa .RemoveBorder (_gcca );if _efdb !=nil {return nil ,_df .Wrap (_efdb ,_afae ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _aafa ,nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;
Name string ;Data [][]SelectionValue ;};func _fdff (_bebc ,_agcc *Bitmap ,_bggd ,_bdeg int )(_afcc error ){const _acca ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_eccg ,_dfbe ,_debc ,_afagf int ;_fgdf ,_efgcea ,_ecdc ,_dgde ,_agaf ,_acce ,_fae ,_dcbc byte ;
);for _eccg =0;_eccg < _bggd ;_eccg ++{_debc =_eccg *_bebc .RowStride ;_afagf =_eccg *_agcc .RowStride ;for _dfbe =0;_dfbe < _bdeg ;_dfbe ++{if _fgdf ,_afcc =_bebc .GetByte (_debc +_dfbe );_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _efgcea ,_afcc =_agcc .GetByte (_afagf +_dfbe );_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _eccg > 0{if _ecdc ,_afcc =_bebc .GetByte (_debc -_bebc .RowStride +_dfbe );
_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_fgdf |=_ecdc |(_ecdc <<1)|(_ecdc >>1);if _dfbe > 0{if _dcbc ,_afcc =_bebc .GetByte (_debc -_bebc .RowStride +_dfbe -1);_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_fgdf |=_dcbc <<7;};if _dfbe < _bdeg -1{if _dcbc ,_afcc =_bebc .GetByte (_debc -_bebc .RowStride +_dfbe +1);_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_fgdf |=_dcbc >>7;
};};if _dfbe > 0{if _dgde ,_afcc =_bebc .GetByte (_debc +_dfbe -1);_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u006a\u0020\u003e \u0030");};_fgdf |=_dgde <<7;};_fgdf &=_efgcea ;if _fgdf ==0||^_fgdf ==0{if _afcc =_bebc .SetByte (_debc +_dfbe ,_fgdf );
_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_fae =_fgdf ;_fgdf =(_fgdf |(_fgdf >>1)|(_fgdf <<1))&_efgcea ;if (_fgdf ^_fae )==0{if _afcc =_bebc .SetByte (_debc +_dfbe ,_fgdf );
_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _eccg =_bggd -1;_eccg >=0;_eccg --{_debc =_eccg *_bebc .RowStride ;_afagf =_eccg *_agcc .RowStride ;
for _dfbe =_bdeg -1;_dfbe >=0;_dfbe --{if _fgdf ,_afcc =_bebc .GetByte (_debc +_dfbe );_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _efgcea ,_afcc =_agcc .GetByte (_afagf +_dfbe );_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _eccg < _bggd -1{if _agaf ,_afcc =_bebc .GetByte (_debc +_bebc .RowStride +_dfbe );
_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_fgdf |=_agaf |(_agaf <<1)|_agaf >>1;if _dfbe > 0{if _dcbc ,_afcc =_bebc .GetByte (_debc +_bebc .RowStride +_dfbe -1);
_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_fgdf |=_dcbc <<7;};if _dfbe < _bdeg -1{if _dcbc ,_afcc =_bebc .GetByte (_debc +_bebc .RowStride +_dfbe +1);
_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_fgdf |=_dcbc >>7;};};if _dfbe < _bdeg -1{if _acce ,_afcc =_bebc .GetByte (_debc +_dfbe +1);_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_fgdf |=_acce >>7;};_fgdf &=_efgcea ;if _fgdf ==0||(^_fgdf )==0{if _afcc =_bebc .SetByte (_debc +_dfbe ,_fgdf );_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_fae =_fgdf ;
_fgdf =(_fgdf |(_fgdf >>1)|(_fgdf <<1))&_efgcea ;if (_fgdf ^_fae )==0{if _afcc =_bebc .SetByte (_debc +_dfbe ,_fgdf );_afcc !=nil {return _df .Wrap (_afcc ,_acca ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func _cgfgd (_fege ,_bcg byte ,_baac CombinationOperator )byte {switch _baac {case CmbOpOr :return _bcg |_fege ;case CmbOpAnd :return _bcg &_fege ;case CmbOpXor :return _bcg ^_fege ;case CmbOpXNor :return ^(_bcg ^_fege );
case CmbOpNot :return ^(_bcg );default:return _bcg ;};};func (_cgcg *byWidth )Len ()int {return len (_cgcg .Values )};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_bgaf *ClassedPoints )Len ()int {return _bgaf .IntSlice .Size ()};
func (_bbfed *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _dggd ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_bbfed .Values )==0{return nil ,_df .Error (_dggd ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_eggbg :=&BitmapsArray {};_bbfed .SortByHeight ();_gbe :=-1;_dcaa :=-1;for _bba :=0;_bba < len (_bbfed .Values );_bba ++{_ggef :=_bbfed .Values [_bba ].Height ;if _ggef > _gbe {_gbe =_ggef ;_dcaa ++;_eggbg .Values =append (_eggbg .Values ,&Bitmaps {});
};_eggbg .Values [_dcaa ].AddBitmap (_bbfed .Values [_bba ]);};return _eggbg ,nil ;};func Extract (roi _ad .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ddgb :=New (roi .Dx (),roi .Dy ());_bbfg :=roi .Min .X &0x07;_fafb :=8-_bbfg ;_gdac :=uint (8-_ddgb .Width &0x07);
_ega :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_cdbfc :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_fbcf :=_ddgb .RowStride ==_cdbfc +1-_ega ;var _cgcca int ;for _edd :=roi .Min .Y ;_edd < roi .Max .Y ;_edd ++{_dgff :=_ega ;_deea :=_cgcca ;switch {case _ega ==_cdbfc :_bfea ,_dgffg :=src .GetByte (_dgff );
if _dgffg !=nil {return nil ,_dgffg ;};_bfea <<=uint (_bbfg );_dgffg =_ddgb .SetByte (_deea ,_aaff (_gdac ,_bfea ));if _dgffg !=nil {return nil ,_dgffg ;};case _bbfg ==0:for _eaaf :=_ega ;_eaaf <=_cdbfc ;_eaaf ++{_fega ,_bbd :=src .GetByte (_dgff );if _bbd !=nil {return nil ,_bbd ;
};_dgff ++;if _eaaf ==_cdbfc &&_fbcf {_fega =_aaff (_gdac ,_fega );};_bbd =_ddgb .SetByte (_deea ,_fega );if _bbd !=nil {return nil ,_bbd ;};_deea ++;};default:_afdc :=_gdc (src ,_ddgb ,uint (_bbfg ),uint (_fafb ),_gdac ,_ega ,_cdbfc ,_fbcf ,_dgff ,_deea );
if _afdc !=nil {return nil ,_afdc ;};};_ega +=src .RowStride ;_cdbfc +=src .RowStride ;_cgcca +=_ddgb .RowStride ;};return _ddgb ,nil ;};func MakePixelSumTab8 ()[]int {return _gbga ()};func _aeab (_befb *Bitmap )(_febg *Bitmap ,_gffa int ,_dcgd error ){const _fagf ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _befb ==nil {return nil ,0,_df .Errorf (_fagf ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _gfag ,_cda *Bitmap ;if _gfag ,_dcgd =_fbc (nil ,_befb );_dcgd !=nil {return nil ,0,_df .Wrap (_dcgd ,_fagf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_bfabd [13]int ;_gffg ,_cgba int ;);_efgce :=12;_dbdd :=_gd .NewNumSlice (_efgce +1);_gcd :=_gd .NewNumSlice (_efgce +1);var _cfacc *Boxes ;for _cacaa :=0;_cacaa <=_efgce ;_cacaa ++{if _cacaa ==0{if _cda ,_dcgd =_fbc (nil ,_gfag );_dcgd !=nil {return nil ,0,_df .Wrap (_dcgd ,_fagf ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _cda ,_dcgd =_cgfaf (_gfag ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_dcgd !=nil {return nil ,0,_df .Wrap (_dcgd ,_fagf ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _cfacc ,_dcgd =_cda .connComponentsBB (4);
_dcgd !=nil {return nil ,0,_df .Wrap (_dcgd ,_fagf ,"");};_bfabd [_cacaa ]=len (*_cfacc );_dbdd .AddInt (_bfabd [_cacaa ]);switch _cacaa {case 0:_gffg =_bfabd [0];default:_cgba =_bfabd [_cacaa -1]-_bfabd [_cacaa ];_gcd .AddInt (_cgba );};_gfag =_cda ;};
_bbfag :=true ;_fabdc :=2;var _bffd ,_dbed int ;for _gcbb :=1;_gcbb < len (*_gcd );_gcbb ++{if _bffd ,_dcgd =_dbdd .GetInt (_gcbb );_dcgd !=nil {return nil ,0,_df .Wrap (_dcgd ,_fagf ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _bbfag &&_bffd < int (0.3*float32 (_gffg )){_fabdc =_gcbb +1;_bbfag =false ;};if _cgba ,_dcgd =_gcd .GetInt (_gcbb );_dcgd !=nil {return nil ,0,_df .Wrap (_dcgd ,_fagf ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _cgba > _dbed {_dbed =_cgba ;};};_dbbb :=_befb .XResolution ;if _dbbb ==0{_dbbb =150;};if _dbbb > 110{_fabdc ++;};if _fabdc < 2{_ag .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_fabdc =2;};_gffa =_fabdc +1;if _febg ,_dcgd =_cbca (nil ,_befb ,_fabdc +1,1);_dcgd !=nil {return nil ,0,_df .Wrap (_dcgd ,_fagf ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _febg ,_gffa ,nil ;
};func _dfee (_baea ,_bcfb *Bitmap ,_bacf ,_bdgf int )(*Bitmap ,error ){const _dcdf ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _bcfb ==nil {_ag .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_df .Error (_dcdf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bacf < 1||_bdgf < 1{return nil ,_df .Error (_dcdf ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _bacf ==1&&_bdgf ==1{_bdfa ,_agfe :=_fbc (_baea ,_bcfb );if _agfe !=nil {return nil ,_df .Wrap (_agfe ,_dcdf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bdfa ,nil ;};if _bacf ==1||_bdgf ==1{_fbbg :=SelCreateBrick (_bdgf ,_bacf ,_bdgf /2,_bacf /2,SelHit );_bacfa ,_deba :=_bbbb (_baea ,_bcfb ,_fbbg );if _deba !=nil {return nil ,_df .Wrap (_deba ,_dcdf ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bacfa ,nil ;};_bfed :=SelCreateBrick (1,_bacf ,0,_bacf /2,SelHit );_beb :=SelCreateBrick (_bdgf ,1,_bdgf /2,0,SelHit );_eabe ,_egee :=_bbbb (nil ,_bcfb ,_bfed );if _egee !=nil {return nil ,_df .Wrap (_egee ,_dcdf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_baea ,_egee =_bbbb (_baea ,_eabe ,_beb );if _egee !=nil {return nil ,_df .Wrap (_egee ,_dcdf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _baea ,nil ;};func _afb (_bbf ,_dde *Bitmap ,_fgef int ,_cc []byte ,_eb int )(_ede error ){const _ac ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_gdd ,_agda ,_gbg ,_ege ,_edf ,_ada ,_dba ,_dbc int ;_dbgb ,_ged uint32 ;_bef ,_dff byte ;_bdd uint16 ;);_bgc :=make ([]byte ,4);_cfb :=make ([]byte ,4);for _gbg =0;_gbg < _bbf .Height -1;_gbg ,_ege =_gbg +2,_ege +1{_gdd =_gbg *_bbf .RowStride ;_agda =_ege *_dde .RowStride ;
for _edf ,_ada =0,0;_edf < _eb ;_edf ,_ada =_edf +4,_ada +1{for _dba =0;_dba < 4;_dba ++{_dbc =_gdd +_edf +_dba ;if _dbc <=len (_bbf .Data )-1&&_dbc < _gdd +_bbf .RowStride {_bgc [_dba ]=_bbf .Data [_dbc ];}else {_bgc [_dba ]=0x00;};_dbc =_gdd +_bbf .RowStride +_edf +_dba ;
if _dbc <=len (_bbf .Data )-1&&_dbc < _gdd +(2*_bbf .RowStride ){_cfb [_dba ]=_bbf .Data [_dbc ];}else {_cfb [_dba ]=0x00;};};_dbgb =_dc .BigEndian .Uint32 (_bgc );_ged =_dc .BigEndian .Uint32 (_cfb );_ged |=_dbgb ;_ged |=_ged <<1;_ged &=0xaaaaaaaa;_dbgb =_ged |(_ged <<7);
_bef =byte (_dbgb >>24);_dff =byte ((_dbgb >>8)&0xff);_dbc =_agda +_ada ;if _dbc +1==len (_dde .Data )-1||_dbc +1>=_agda +_dde .RowStride {_dde .Data [_dbc ]=_cc [_bef ];}else {_bdd =(uint16 (_cc [_bef ])<<8)|uint16 (_cc [_dff ]);if _ede =_dde .setTwoBytes (_dbc ,_bdd );
_ede !=nil {return _df .Wrapf (_ede ,_ac ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dbc );};_ada ++;};};};
return nil ;};func (_cbfg *Selection )setOrigin (_edgaa ,_dddf int ){_cbfg .Cy ,_cbfg .Cx =_edgaa ,_dddf };func TstFrameBitmap ()*Bitmap {return _facf .Copy ()};func _cfg (_cbd *Bitmap ,_geb ...int )(_fge *Bitmap ,_abb error ){const _dga ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _cbd ==nil {return nil ,_df .Error (_dga ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_geb )==0||len (_geb )> 4{return nil ,_df .Error (_dga ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _geb [0]<=0{_ag .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_fge ,_abb =_fbc (nil ,_cbd );if _abb !=nil {return nil ,_df .Wrap (_abb ,_dga ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _fge ,nil ;};_agd :=_ggfa ();_fge =_cbd ;for _aa ,_abf :=range _geb {if _abf <=0{break ;};_fge ,_abb =_af (_fge ,_abf ,_agd );if _abb !=nil {return nil ,_df .Wrapf (_abb ,_dga ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_aa );
};};return _fge ,nil ;};func (_adgb *Bitmaps )Size ()int {return len (_adgb .Values )};func (_dcab *Bitmap )Zero ()bool {_agbe :=_dcab .Width /8;_gac :=_dcab .Width &7;var _ddc byte ;if _gac !=0{_ddc =byte (0xff<<uint (8-_gac ));};var _gbae ,_fbac ,_gddc int ;
for _fbac =0;_fbac < _dcab .Height ;_fbac ++{_gbae =_dcab .RowStride *_fbac ;for _gddc =0;_gddc < _agbe ;_gddc ,_gbae =_gddc +1,_gbae +1{if _dcab .Data [_gbae ]!=0{return false ;};};if _gac > 0{if _dcab .Data [_gbae ]&_ddc !=0{return false ;};};};return true ;
};func _fdgdf (_bbbbg *Bitmap ,_ceca ,_gege int ,_dfca ,_bebg int ,_cedaa RasterOperator ){var (_eeaef int ;_edaf byte ;_gcag ,_feeb int ;_dcge int ;);_ageb :=_dfca >>3;_daff :=_dfca &7;if _daff > 0{_edaf =_gccaf [_daff ];};_eeaef =_bbbbg .RowStride *_gege +(_ceca >>3);
switch _cedaa {case PixClr :for _gcag =0;_gcag < _bebg ;_gcag ++{_dcge =_eeaef +_gcag *_bbbbg .RowStride ;for _feeb =0;_feeb < _ageb ;_feeb ++{_bbbbg .Data [_dcge ]=0x0;_dcge ++;};if _daff > 0{_bbbbg .Data [_dcge ]=_cfbdg (_bbbbg .Data [_dcge ],0x0,_edaf );
};};case PixSet :for _gcag =0;_gcag < _bebg ;_gcag ++{_dcge =_eeaef +_gcag *_bbbbg .RowStride ;for _feeb =0;_feeb < _ageb ;_feeb ++{_bbbbg .Data [_dcge ]=0xff;_dcge ++;};if _daff > 0{_bbbbg .Data [_dcge ]=_cfbdg (_bbbbg .Data [_dcge ],0xff,_edaf );};};
case PixNotDst :for _gcag =0;_gcag < _bebg ;_gcag ++{_dcge =_eeaef +_gcag *_bbbbg .RowStride ;for _feeb =0;_feeb < _ageb ;_feeb ++{_bbbbg .Data [_dcge ]=^_bbbbg .Data [_dcge ];_dcge ++;};if _daff > 0{_bbbbg .Data [_dcge ]=_cfbdg (_bbbbg .Data [_dcge ],^_bbbbg .Data [_dcge ],_edaf );
};};};};func _cfad (_bafd *Bitmap ,_ebdc *_gd .Stack ,_edfc ,_fabf ,_gebbd int )(_aeec *_ad .Rectangle ,_gdae error ){const _edga ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _bafd ==nil {return nil ,_df .Error (_edga ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _ebdc ==nil {return nil ,_df .Error (_edga ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _gebbd {case 4:if _aeec ,_gdae =_deff (_bafd ,_ebdc ,_edfc ,_fabf );_gdae !=nil {return nil ,_df .Wrap (_gdae ,_edga ,"");
};return _aeec ,nil ;case 8:if _aeec ,_gdae =_eeef (_bafd ,_ebdc ,_edfc ,_fabf );_gdae !=nil {return nil ,_df .Wrap (_gdae ,_edga ,"");};return _aeec ,nil ;default:return nil ,_df .Errorf (_edga ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_gebbd );
};};func (_fcfde *Points )AddPoint (x ,y float32 ){*_fcfde =append (*_fcfde ,Point {x ,y })};type RasterOperator int ;func (_bfec *ClassedPoints )ySortFunction ()func (_adfb int ,_ccbgc int )bool {return func (_aggcc ,_dfad int )bool {return _bfec .YAtIndex (_aggcc )< _bfec .YAtIndex (_dfad )};
};var _bddf [256]uint8 ;const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func _cde (_def ,_edfb *Bitmap ,_age int ,_bdf []byte ,_dae int )(_feg error ){const _abe ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_ccc ,_gde ,_ccb ,_dab ,_adc ,_geba ,_faf ,_afbf int ;_dddd ,_fab ,_bbca ,_cea uint32 ;_gbd ,_dee byte ;_adaf uint16 ;);_gbce :=make ([]byte ,4);_febf :=make ([]byte ,4);for _ccb =0;_ccb < _def .Height -1;_ccb ,_dab =_ccb +2,_dab +1{_ccc =_ccb *_def .RowStride ;
_gde =_dab *_edfb .RowStride ;for _adc ,_geba =0,0;_adc < _dae ;_adc ,_geba =_adc +4,_geba +1{for _faf =0;_faf < 4;_faf ++{_afbf =_ccc +_adc +_faf ;if _afbf <=len (_def .Data )-1&&_afbf < _ccc +_def .RowStride {_gbce [_faf ]=_def .Data [_afbf ];}else {_gbce [_faf ]=0x00;
};_afbf =_ccc +_def .RowStride +_adc +_faf ;if _afbf <=len (_def .Data )-1&&_afbf < _ccc +(2*_def .RowStride ){_febf [_faf ]=_def .Data [_afbf ];}else {_febf [_faf ]=0x00;};};_dddd =_dc .BigEndian .Uint32 (_gbce );_fab =_dc .BigEndian .Uint32 (_febf );
_bbca =_dddd &_fab ;_bbca |=_bbca <<1;_cea =_dddd |_fab ;_cea &=_cea <<1;_fab =_bbca |_cea ;_fab &=0xaaaaaaaa;_dddd =_fab |(_fab <<7);_gbd =byte (_dddd >>24);_dee =byte ((_dddd >>8)&0xff);_afbf =_gde +_geba ;if _afbf +1==len (_edfb .Data )-1||_afbf +1>=_gde +_edfb .RowStride {if _feg =_edfb .SetByte (_afbf ,_bdf [_gbd ]);
_feg !=nil {return _df .Wrapf (_feg ,_abe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_afbf );};}else {_adaf =(uint16 (_bdf [_gbd ])<<8)|uint16 (_bdf [_dee ]);if _feg =_edfb .setTwoBytes (_afbf ,_adaf );_feg !=nil {return _df .Wrapf (_feg ,_abe ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_afbf );
};_geba ++;};};};return nil ;};func (_dfeg *byWidth )Swap (i ,j int ){_dfeg .Values [i ],_dfeg .Values [j ]=_dfeg .Values [j ],_dfeg .Values [i ];if _dfeg .Boxes !=nil {_dfeg .Boxes [i ],_dfeg .Boxes [j ]=_dfeg .Boxes [j ],_dfeg .Boxes [i ];};};func (_eae *Bitmap )GetPixel (x ,y int )bool {_fbd :=_eae .GetByteIndex (x ,y );
_dfbb :=_eae .GetBitOffset (x );_gddf :=uint (7-_dfbb );if _fbd > len (_eae .Data )-1{_ag .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_eae );
return false ;};if (_eae .Data [_fbd ]>>_gddf )&0x01>=1{return true ;};return false ;};func (_ecac *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _egea ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_ecac .IntSlice .Size (){return 0,_df .Errorf (_egea ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_ecac .YAtIndex (i )),nil ;};func _eecae ()[]int {_gebb :=make ([]int ,256);_gebb [0]=0;_gebb [1]=7;var _cceda int ;for _cceda =2;_cceda < 4;_cceda ++{_gebb [_cceda ]=_gebb [_cceda -2]+6;};for _cceda =4;_cceda < 8;_cceda ++{_gebb [_cceda ]=_gebb [_cceda -4]+5;
};for _cceda =8;_cceda < 16;_cceda ++{_gebb [_cceda ]=_gebb [_cceda -8]+4;};for _cceda =16;_cceda < 32;_cceda ++{_gebb [_cceda ]=_gebb [_cceda -16]+3;};for _cceda =32;_cceda < 64;_cceda ++{_gebb [_cceda ]=_gebb [_cceda -32]+2;};for _cceda =64;_cceda < 128;
_cceda ++{_gebb [_cceda ]=_gebb [_cceda -64]+1;};for _cceda =128;_cceda < 256;_cceda ++{_gebb [_cceda ]=_gebb [_cceda -128];};return _gebb ;};func (_efgd Points )Size ()int {return len (_efgd )};func (_cge *Bitmap )inverseData (){if _aeca :=_cge .RasterOperation (0,0,_cge .Width ,_cge .Height ,PixNotDst ,nil ,0,0);
_aeca !=nil {_ag .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_aeca );};if _cge .Color ==Chocolate {_cge .Color =Vanilla ;}else {_cge .Color =Chocolate ;};};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _aac ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_ggb :=_egc (width ,height );_ggb .Data =data ;if len (data )< height *_ggb .RowStride {return nil ,_df .Errorf (_aac ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_ggb .RowStride );
};return _ggb ,nil ;};func (_dcd *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_gdee bool ,_eadd error ){const _afe ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_gbga ();};_abc :=_dcd .Width >>3;_dcga :=_dcd .Width &7;_baec :=byte (0xff<<uint (8-_dcga ));var (_afbga ,_fcc ,_cgfg ,_bfe int ;_cdea byte ;);for _afbga =0;_afbga < _dcd .Height ;_afbga ++{_cgfg =_dcd .RowStride *_afbga ;for _fcc =0;
_fcc < _abc ;_fcc ++{_cdea ,_eadd =_dcd .GetByte (_cgfg +_fcc );if _eadd !=nil {return false ,_df .Wrap (_eadd ,_afe ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_bfe +=tab8 [_cdea ];};if _dcga !=0{_cdea ,_eadd =_dcd .GetByte (_cgfg +_fcc );if _eadd !=nil {return false ,_df .Wrap (_eadd ,_afe ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_cdea &=_baec ;_bfe +=tab8 [_cdea ];};if _bfe > thresh {return true ,nil ;};};return _gdee ,nil ;};func (_dgcg *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ebeg (_dgcg ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _dcg (_aee *Bitmap ,_fac ,_fcac int )(*Bitmap ,error ){const _ggd ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _aee ==nil {return nil ,_df .Error (_ggd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fac <=0||_fcac <=0{return nil ,_df .Error (_ggd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _fac ==_fcac {if _fac ==1{_ddg ,_fea :=_fbc (nil ,_aee );
if _fea !=nil {return nil ,_df .Wrap (_fea ,_ggd ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _ddg ,nil ;};if _fac ==2||_fac ==4||_fac ==8{_eaf ,_egf :=_gcc (_aee ,_fac );if _egf !=nil {return nil ,_df .Wrap (_egf ,_ggd ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _eaf ,nil ;};};_dbg :=_fac *_aee .Width ;_fda :=_fcac *_aee .Height ;_aeg :=New (_dbg ,_fda );_fdgc :=_aeg .RowStride ;var (_edb ,_gea ,_da ,_bbc ,_dce int ;_bbb byte ;_ce error ;);for _gea =0;_gea < _aee .Height ;_gea ++{_edb =_fcac *_gea *_fdgc ;
for _da =0;_da < _aee .Width ;_da ++{if _daf :=_aee .GetPixel (_da ,_gea );_daf {_dce =_fac *_da ;for _bbc =0;_bbc < _fac ;_bbc ++{_aeg .setBit (_edb *8+_dce +_bbc );};};};for _bbc =1;_bbc < _fcac ;_bbc ++{_ga :=_edb +_bbc *_fdgc ;for _fdf :=0;_fdf < _fdgc ;
_fdf ++{if _bbb ,_ce =_aeg .GetByte (_edb +_fdf );_ce !=nil {return nil ,_df .Wrapf (_ce ,_ggd ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_bbc );};if _ce =_aeg .SetByte (_ga +_fdf ,_bbb );
_ce !=nil {return nil ,_df .Wrap (_ce ,_ggd ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _aeg ,nil ;};func NewClassedPoints (points *Points ,classes _gd .IntSlice )(*ClassedPoints ,error ){const _feae ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_df .Error (_feae ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_df .Error (_feae ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_ccgc :=&ClassedPoints {Points :points ,IntSlice :classes };if _gcbcf :=_ccgc .validateIntSlice ();_gcbcf !=nil {return nil ,_df .Wrap (_gcbcf ,_feae ,"");};return _ccgc ,nil ;};func (_gaf *Bitmap )InverseData (){_gaf .inverseData ()};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _cgfgd (oldByte ,newByte ,op );
};func (_dbcba *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _gedec ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _dbcba ==nil {return nil ,_df .Error (_gedec ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_dbcba .Values )-1{return nil ,_df .Errorf (_gedec ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dbcba .Values [i ],nil ;};func _daab (_adbbg *Bitmap ,_abeb ,_fdgb ,_aebe ,_cbfc int ,_aeeb RasterOperator ,_ebbc *Bitmap ,_ebea ,_efca int )error {var (_dacg byte ;
_daaf int ;_abcg int ;_effc ,_dddce int ;_fdbf ,_ccbe int ;);_ebcb :=_aebe >>3;_eecaea :=_aebe &7;if _eecaea > 0{_dacg =_gccaf [_eecaea ];};_daaf =_ebbc .RowStride *_efca +(_ebea >>3);_abcg =_adbbg .RowStride *_fdgb +(_abeb >>3);switch _aeeb {case PixSrc :for _fdbf =0;
_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]=_ebbc .Data [_effc ];_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],_ebbc .Data [_effc ],_dacg );
};};case PixNotSrc :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]=^(_ebbc .Data [_effc ]);_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],^_ebbc .Data [_effc ],_dacg );
};};case PixSrcOrDst :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]|=_ebbc .Data [_effc ];_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],_ebbc .Data [_effc ]|_adbbg .Data [_dddce ],_dacg );
};};case PixSrcAndDst :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]&=_ebbc .Data [_effc ];_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],_ebbc .Data [_effc ]&_adbbg .Data [_dddce ],_dacg );
};};case PixSrcXorDst :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]^=_ebbc .Data [_effc ];_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],_ebbc .Data [_effc ]^_adbbg .Data [_dddce ],_dacg );
};};case PixNotSrcOrDst :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]|=^(_ebbc .Data [_effc ]);_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],^(_ebbc .Data [_effc ])|_adbbg .Data [_dddce ],_dacg );
};};case PixNotSrcAndDst :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]&=^(_ebbc .Data [_effc ]);_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],^(_ebbc .Data [_effc ])&_adbbg .Data [_dddce ],_dacg );
};};case PixSrcOrNotDst :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]=_ebbc .Data [_effc ]|^(_adbbg .Data [_dddce ]);_dddce ++;
_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],_ebbc .Data [_effc ]|^(_adbbg .Data [_dddce ]),_dacg );};};case PixSrcAndNotDst :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;
for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]=_ebbc .Data [_effc ]&^(_adbbg .Data [_dddce ]);_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],_ebbc .Data [_effc ]&^(_adbbg .Data [_dddce ]),_dacg );
};};case PixNotPixSrcOrDst :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]=^(_ebbc .Data [_effc ]|_adbbg .Data [_dddce ]);
_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],^(_ebbc .Data [_effc ]|_adbbg .Data [_dddce ]),_dacg );};};case PixNotPixSrcAndDst :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;
for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]=^(_ebbc .Data [_effc ]&_adbbg .Data [_dddce ]);_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],^(_ebbc .Data [_effc ]&_adbbg .Data [_dddce ]),_dacg );
};};case PixNotPixSrcXorDst :for _fdbf =0;_fdbf < _cbfc ;_fdbf ++{_effc =_daaf +_fdbf *_ebbc .RowStride ;_dddce =_abcg +_fdbf *_adbbg .RowStride ;for _ccbe =0;_ccbe < _ebcb ;_ccbe ++{_adbbg .Data [_dddce ]=^(_ebbc .Data [_effc ]^_adbbg .Data [_dddce ]);
_dddce ++;_effc ++;};if _eecaea > 0{_adbbg .Data [_dddce ]=_cfbdg (_adbbg .Data [_dddce ],^(_ebbc .Data [_effc ]^_adbbg .Data [_dddce ]),_dacg );};};default:_ag .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_aeeb );
return _df .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func TstISymbol (t *_a .T ,scale ...int )*Bitmap {_bada ,_acgb :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_g .NoError (t ,_acgb );return TstGetScaledSymbol (t ,_bada ,scale ...);};func _aacc (_bbg ,_fced *Bitmap ,_deec ,_egdb ,_geaff ,_dffc ,_ggad ,_dgfd ,_bagge ,_bbgd int ,_fdee CombinationOperator )error {var _afef int ;
_dfgeb :=func (){_afef ++;_geaff +=_fced .RowStride ;_dffc +=_bbg .RowStride ;_ggad +=_bbg .RowStride };for _afef =_deec ;_afef < _egdb ;_dfgeb (){var _fbca uint16 ;_ebba :=_geaff ;for _gcge :=_dffc ;_gcge <=_ggad ;_gcge ++{_agdaf ,_aacf :=_fced .GetByte (_ebba );
if _aacf !=nil {return _aacf ;};_dbfc ,_aacf :=_bbg .GetByte (_gcge );if _aacf !=nil {return _aacf ;};_fbca =(_fbca |uint16 (_dbfc ))<<uint (_bbgd );_dbfc =byte (_fbca >>8);if _gcge ==_ggad {_dbfc =_aaff (uint (_dgfd ),_dbfc );};if _aacf =_fced .SetByte (_ebba ,_cgfgd (_agdaf ,_dbfc ,_fdee ));
_aacf !=nil {return _aacf ;};_ebba ++;_fbca <<=uint (_bagge );};};return nil ;};func (_gcf *Bitmap )GetByte (index int )(byte ,error ){if index > len (_gcf .Data )-1||index < 0{return 0,_df .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _gcf .Data [index ],nil ;};func _ffd (_ffb ,_adab *Bitmap ,_ceae ,_gafg ,_cgbc ,_cef ,_ecb int ,_adeb CombinationOperator )error {var _bfae int ;_cffb :=func (){_bfae ++;_cgbc +=_adab .RowStride ;_cef +=_ffb .RowStride ;_ecb +=_ffb .RowStride };
for _bfae =_ceae ;_bfae < _gafg ;_cffb (){_fdea :=_cgbc ;for _abfg :=_cef ;_abfg <=_ecb ;_abfg ++{_cca ,_dfgd :=_adab .GetByte (_fdea );if _dfgd !=nil {return _dfgd ;};_fbaf ,_dfgd :=_ffb .GetByte (_abfg );if _dfgd !=nil {return _dfgd ;};if _dfgd =_adab .SetByte (_fdea ,_cgfgd (_cca ,_fbaf ,_adeb ));
_dfgd !=nil {return _dfgd ;};_fdea ++;};};return nil ;};func (_dbeb *Boxes )makeSizeIndicator (_cced ,_eadc int ,_abdf LocationFilter ,_cceee SizeComparison )*_gd .NumSlice {_abdb :=&_gd .NumSlice {};var _bfcf ,_gfde ,_gbcg int ;for _ ,_eagg :=range *_dbeb {_bfcf =0;
_gfde ,_gbcg =_eagg .Dx (),_eagg .Dy ();switch _abdf {case LocSelectWidth :if (_cceee ==SizeSelectIfLT &&_gfde < _cced )||(_cceee ==SizeSelectIfGT &&_gfde > _cced )||(_cceee ==SizeSelectIfLTE &&_gfde <=_cced )||(_cceee ==SizeSelectIfGTE &&_gfde >=_cced ){_bfcf =1;
};case LocSelectHeight :if (_cceee ==SizeSelectIfLT &&_gbcg < _eadc )||(_cceee ==SizeSelectIfGT &&_gbcg > _eadc )||(_cceee ==SizeSelectIfLTE &&_gbcg <=_eadc )||(_cceee ==SizeSelectIfGTE &&_gbcg >=_eadc ){_bfcf =1;};case LocSelectIfEither :if (_cceee ==SizeSelectIfLT &&(_gbcg < _eadc ||_gfde < _cced ))||(_cceee ==SizeSelectIfGT &&(_gbcg > _eadc ||_gfde > _cced ))||(_cceee ==SizeSelectIfLTE &&(_gbcg <=_eadc ||_gfde <=_cced ))||(_cceee ==SizeSelectIfGTE &&(_gbcg >=_eadc ||_gfde >=_cced )){_bfcf =1;
};case LocSelectIfBoth :if (_cceee ==SizeSelectIfLT &&(_gbcg < _eadc &&_gfde < _cced ))||(_cceee ==SizeSelectIfGT &&(_gbcg > _eadc &&_gfde > _cced ))||(_cceee ==SizeSelectIfLTE &&(_gbcg <=_eadc &&_gfde <=_cced ))||(_cceee ==SizeSelectIfGTE &&(_gbcg >=_eadc &&_gfde >=_cced )){_bfcf =1;
};};_abdb .AddInt (_bfcf );};return _abdb ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _bbbb (_ccdf *Bitmap ,_edab *Bitmap ,_cfabf *Selection )(*Bitmap ,error ){var (_eafb *Bitmap ;_eeae error ;);_ccdf ,_eeae =_bafg (_ccdf ,_edab ,_cfabf ,&_eafb );
if _eeae !=nil {return nil ,_eeae ;};if _eeae =_ccdf .clearAll ();_eeae !=nil {return nil ,_eeae ;};var _ageg SelectionValue ;for _gbgf :=0;_gbgf < _cfabf .Height ;_gbgf ++{for _efeaf :=0;_efeaf < _cfabf .Width ;_efeaf ++{_ageg =_cfabf .Data [_gbgf ][_efeaf ];
if _ageg ==SelHit {if _eeae =_ccdf .RasterOperation (_efeaf -_cfabf .Cx ,_gbgf -_cfabf .Cy ,_edab .Width ,_edab .Height ,PixSrcOrDst ,_eafb ,0,0);_eeae !=nil {return nil ,_eeae ;};};};};return _ccdf ,nil ;};type SizeSelection int ;func (_aga *Bitmap )GetBitOffset (x int )int {return x &0x07};
func _aaff (_aedf uint ,_daeb byte )byte {return _daeb >>_aedf <<_aedf };var _ _b .Interface =&ClassedPoints {};func _ebeae (_cfbd *Bitmap ,_gecc ,_cffdg ,_cbeg ,_facd int ,_cbebg RasterOperator ,_edg *Bitmap ,_addc ,_ceeg int )error {var (_edac bool ;
_afafd bool ;_afdec int ;_ffbe int ;_cgea int ;_dbfcd bool ;_edbc byte ;_efde int ;_bfeda int ;_bdfaa int ;_dgacc ,_dbdce int ;);_cggf :=8-(_gecc &7);_agbb :=_ddgc [_cggf ];_bfbf :=_cfbd .RowStride *_cffdg +(_gecc >>3);_beef :=_edg .RowStride *_ceeg +(_addc >>3);
if _cbeg < _cggf {_edac =true ;_agbb &=_gccaf [8-_cggf +_cbeg ];};if !_edac {_afdec =(_cbeg -_cggf )>>3;if _afdec > 0{_afafd =true ;_ffbe =_bfbf +1;_cgea =_beef +1;};};_efde =(_gecc +_cbeg )&7;if !(_edac ||_efde ==0){_dbfcd =true ;_edbc =_gccaf [_efde ];
_bfeda =_bfbf +1+_afdec ;_bdfaa =_beef +1+_afdec ;};switch _cbebg {case PixSrc :for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],_edg .Data [_beef ],_agbb );_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;};if _afafd {for _dgacc =0;
_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]=_edg .Data [_cgea +_dbdce ];};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],_edg .Data [_bdfaa ],_edbc );
_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixNotSrc :for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],^_edg .Data [_beef ],_agbb );_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;};if _afafd {for _dgacc =0;
_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]=^_edg .Data [_cgea +_dbdce ];};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],^_edg .Data [_bdfaa ],_edbc );
_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixSrcOrDst :for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],_edg .Data [_beef ]|_cfbd .Data [_bfbf ],_agbb );_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;
};if _afafd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]|=_edg .Data [_cgea +_dbdce ];};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],_edg .Data [_bdfaa ]|_cfbd .Data [_bfeda ],_edbc );
_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixSrcAndDst :for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],_edg .Data [_beef ]&_cfbd .Data [_bfbf ],_agbb );_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;
};if _afafd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]&=_edg .Data [_cgea +_dbdce ];};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],_edg .Data [_bdfaa ]&_cfbd .Data [_bfeda ],_edbc );
_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixSrcXorDst :for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],_edg .Data [_beef ]^_cfbd .Data [_bfbf ],_agbb );_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;
};if _afafd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]^=_edg .Data [_cgea +_dbdce ];};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],_edg .Data [_bdfaa ]^_cfbd .Data [_bfeda ],_edbc );
_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixNotSrcOrDst :for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],^(_edg .Data [_beef ])|_cfbd .Data [_bfbf ],_agbb );_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;
};if _afafd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]|=^(_edg .Data [_cgea +_dbdce ]);};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;_dgacc < _facd ;
_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],^(_edg .Data [_bdfaa ])|_cfbd .Data [_bfeda ],_edbc );_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixNotSrcAndDst :for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],^(_edg .Data [_beef ])&_cfbd .Data [_bfbf ],_agbb );
_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;};if _afafd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]&=^_edg .Data [_cgea +_dbdce ];};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;
};};if _dbfcd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],^(_edg .Data [_bdfaa ])&_cfbd .Data [_bfeda ],_edbc );_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixSrcOrNotDst :for _dgacc =0;
_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],_edg .Data [_beef ]|^(_cfbd .Data [_bfbf ]),_agbb );_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;};if _afafd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;
_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]=_edg .Data [_cgea +_dbdce ]|^(_cfbd .Data [_ffbe +_dbdce ]);};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],_edg .Data [_bdfaa ]|^(_cfbd .Data [_bfeda ]),_edbc );
_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixSrcAndNotDst :for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],_edg .Data [_beef ]&^(_cfbd .Data [_bfbf ]),_agbb );_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;
};if _afafd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]=_edg .Data [_cgea +_dbdce ]&^(_cfbd .Data [_ffbe +_dbdce ]);};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;
_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],_edg .Data [_bdfaa ]&^(_cfbd .Data [_bfeda ]),_edbc );_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixNotPixSrcOrDst :for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],^(_edg .Data [_beef ]|_cfbd .Data [_bfbf ]),_agbb );
_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;};if _afafd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]=^(_edg .Data [_cgea +_dbdce ]|_cfbd .Data [_ffbe +_dbdce ]);};_ffbe +=_cfbd .RowStride ;
_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],^(_edg .Data [_bdfaa ]|_cfbd .Data [_bfeda ]),_edbc );_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixNotPixSrcAndDst :for _dgacc =0;
_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],^(_edg .Data [_beef ]&_cfbd .Data [_bfbf ]),_agbb );_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;};if _afafd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;
_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]=^(_edg .Data [_cgea +_dbdce ]&_cfbd .Data [_ffbe +_dbdce ]);};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],^(_edg .Data [_bdfaa ]&_cfbd .Data [_bfeda ]),_edbc );
_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};case PixNotPixSrcXorDst :for _dgacc =0;_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfbf ]=_cfbdg (_cfbd .Data [_bfbf ],^(_edg .Data [_beef ]^_cfbd .Data [_bfbf ]),_agbb );_bfbf +=_cfbd .RowStride ;_beef +=_edg .RowStride ;
};if _afafd {for _dgacc =0;_dgacc < _facd ;_dgacc ++{for _dbdce =0;_dbdce < _afdec ;_dbdce ++{_cfbd .Data [_ffbe +_dbdce ]=^(_edg .Data [_cgea +_dbdce ]^_cfbd .Data [_ffbe +_dbdce ]);};_ffbe +=_cfbd .RowStride ;_cgea +=_edg .RowStride ;};};if _dbfcd {for _dgacc =0;
_dgacc < _facd ;_dgacc ++{_cfbd .Data [_bfeda ]=_cfbdg (_cfbd .Data [_bfeda ],^(_edg .Data [_bdfaa ]^_cfbd .Data [_bfeda ]),_edbc );_bfeda +=_cfbd .RowStride ;_bdfaa +=_edg .RowStride ;};};default:_ag .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_cbebg );
return _df .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _cabf (_bcga ,_efdg *Bitmap ,_adbcb ,_fegc int )(*Bitmap ,error ){const _cagb ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _efdg ==nil {return nil ,_df .Error (_cagb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _adbcb < 1||_fegc < 1{return nil ,_df .Error (_cagb ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _adbcb ==1&&_fegc ==1{_fcd ,_adbf :=_fbc (_bcga ,_efdg );if _adbf !=nil {return nil ,_df .Wrap (_adbf ,_cagb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fcd ,nil ;};if _adbcb ==1||_fegc ==1{_eead :=SelCreateBrick (_fegc ,_adbcb ,_fegc /2,_adbcb /2,SelHit );_gcgc ,_gcfb :=_cdbe (_bcga ,_efdg ,_eead );if _gcfb !=nil {return nil ,_df .Wrap (_gcfb ,_cagb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gcgc ,nil ;};_fabe :=SelCreateBrick (1,_adbcb ,0,_adbcb /2,SelHit );_bdabg :=SelCreateBrick (_fegc ,1,_fegc /2,0,SelHit );_bceb ,_becg :=_cdbe (nil ,_efdg ,_fabe );if _becg !=nil {return nil ,_df .Wrap (_becg ,_cagb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_bcga ,_becg =_cdbe (_bcga ,_bceb ,_bdabg );if _becg !=nil {return nil ,_df .Wrap (_becg ,_cagb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bcga ,nil ;};func TstASymbol (t *_a .T )*Bitmap {t .Helper ();_bcce :=New (6,6);_g .NoError (t ,_bcce .SetPixel (1,0,1));
_g .NoError (t ,_bcce .SetPixel (2,0,1));_g .NoError (t ,_bcce .SetPixel (3,0,1));_g .NoError (t ,_bcce .SetPixel (4,0,1));_g .NoError (t ,_bcce .SetPixel (5,1,1));_g .NoError (t ,_bcce .SetPixel (1,2,1));_g .NoError (t ,_bcce .SetPixel (2,2,1));_g .NoError (t ,_bcce .SetPixel (3,2,1));
_g .NoError (t ,_bcce .SetPixel (4,2,1));_g .NoError (t ,_bcce .SetPixel (5,2,1));_g .NoError (t ,_bcce .SetPixel (0,3,1));_g .NoError (t ,_bcce .SetPixel (5,3,1));_g .NoError (t ,_bcce .SetPixel (0,4,1));_g .NoError (t ,_bcce .SetPixel (5,4,1));_g .NoError (t ,_bcce .SetPixel (1,5,1));
_g .NoError (t ,_bcce .SetPixel (2,5,1));_g .NoError (t ,_bcce .SetPixel (3,5,1));_g .NoError (t ,_bcce .SetPixel (4,5,1));_g .NoError (t ,_bcce .SetPixel (5,5,1));return _bcce ;};func (_gcbc *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_gbcf *Boxes ,_bec error ){const _bbga ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _gcbc ==nil {return nil ,_df .Error (_bbga ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_gcbc )==0{return _gcbc ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_df .Errorf (_bbga ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_df .Errorf (_bbga ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_caea :=_gcbc .makeSizeIndicator (width ,height ,tp ,relation );_ecgd ,_bec :=_gcbc .selectWithIndicator (_caea );if _bec !=nil {return nil ,_df .Wrap (_bec ,_bbga ,"");};return _ecgd ,nil ;};func (_fgb *Bitmap )addBorderGeneral (_cdg ,_acd ,_adaa ,_fbfd int ,_dcde int )(*Bitmap ,error ){const _fgd ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _cdg < 0||_acd < 0||_adaa < 0||_fbfd < 0{return nil ,_df .Error (_fgd ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_beeb ,_gag :=_fgb .Width ,_fgb .Height ;_bcb :=_beeb +_cdg +_acd ;_cgfb :=_gag +_adaa +_fbfd ;
_efc :=New (_bcb ,_cgfb );_efc .Color =_fgb .Color ;_dggg :=PixClr ;if _dcde > 0{_dggg =PixSet ;};_bag :=_efc .RasterOperation (0,0,_cdg ,_cgfb ,_dggg ,nil ,0,0);if _bag !=nil {return nil ,_df .Wrap (_bag ,_fgd ,"\u006c\u0065\u0066\u0074");};_bag =_efc .RasterOperation (_bcb -_acd ,0,_acd ,_cgfb ,_dggg ,nil ,0,0);
if _bag !=nil {return nil ,_df .Wrap (_bag ,_fgd ,"\u0072\u0069\u0067h\u0074");};_bag =_efc .RasterOperation (0,0,_bcb ,_adaa ,_dggg ,nil ,0,0);if _bag !=nil {return nil ,_df .Wrap (_bag ,_fgd ,"\u0074\u006f\u0070");};_bag =_efc .RasterOperation (0,_cgfb -_fbfd ,_bcb ,_fbfd ,_dggg ,nil ,0,0);
if _bag !=nil {return nil ,_df .Wrap (_bag ,_fgd ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_bag =_efc .RasterOperation (_cdg ,_adaa ,_beeb ,_gag ,PixSrc ,_fgb ,0,0);if _bag !=nil {return nil ,_df .Wrap (_bag ,_fgd ,"\u0063\u006f\u0070\u0079");};return _efc ,nil ;
};func Rect (x ,y ,w ,h int )(*_ad .Rectangle ,error ){const _ccab ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_df .Errorf (_ccab ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_df .Error (_ccab ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_cfac :=_ad .Rect (x ,y ,x +w ,y +h );return &_cfac ,nil ;
};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ebeg (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_gcdf *ClassedPoints )Less (i ,j int )bool {return _gcdf ._deaef (i ,j )};func _gbga ()[]int {_defa :=make ([]int ,256);
for _cfabd :=0;_cfabd <=0xff;_cfabd ++{_bagd :=byte (_cfabd );_defa [_bagd ]=int (_bagd &0x1)+(int (_bagd >>1)&0x1)+(int (_bagd >>2)&0x1)+(int (_bagd >>3)&0x1)+(int (_bagd >>4)&0x1)+(int (_bagd >>5)&0x1)+(int (_bagd >>6)&0x1)+(int (_bagd >>7)&0x1);};return _defa ;
};func (_ded *Bitmap )setAll ()error {_ebe :=_ebeg (_ded ,0,0,_ded .Width ,_ded .Height ,PixSet ,nil ,0,0);if _ebe !=nil {return _df .Wrap (_ebe ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func (_dfdg *ClassedPoints )xSortFunction ()func (_bfede int ,_aecce int )bool {return func (_caad ,_aabg int )bool {return _dfdg .XAtIndex (_caad )< _dfdg .XAtIndex (_aabg )};
};func _edcc (_fddb ,_bcc *Bitmap ,_cddd *Selection )(*Bitmap ,error ){const _cbf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _bccc ,_gfcf int ;if _bcc ==nil {return nil ,_df .Error (_cbf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _cddd ==nil {return nil ,_df .Error (_cbf ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_bccc =_cddd .Width ;_gfcf =_cddd .Height ;if _bccc ==0||_gfcf ==0{return nil ,_df .Error (_cbf ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _fddb ==nil {return _bcc .createTemplate (),nil ;};if _bddfg :=_fddb .resizeImageData (_bcc );_bddfg !=nil {return nil ,_bddfg ;};return _fddb ,nil ;};func (_acg *Bitmap )thresholdPixelSum (_cgfe int )bool {var (_fgga int ;_gcgg uint8 ;_aecg byte ;
_dcgc int ;);_ggdf :=_acg .RowStride ;_cdeg :=uint (_acg .Width &0x07);if _cdeg !=0{_gcgg =uint8 ((0xff<<(8-_cdeg ))&0xff);_ggdf --;};for _fbdba :=0;_fbdba < _acg .Height ;_fbdba ++{for _dcgc =0;_dcgc < _ggdf ;_dcgc ++{_aecg =_acg .Data [_fbdba *_acg .RowStride +_dcgc ];
_fgga +=int (_bddf [_aecg ]);};if _cdeg !=0{_aecg =_acg .Data [_fbdba *_acg .RowStride +_dcgc ]&_gcgg ;_fgga +=int (_bddf [_aecg ]);};if _fgga > _cgfe {return true ;};};return false ;};func _aea (_eg ,_fca *Bitmap )(_cab error ){const _ggc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_bc :=_fca .RowStride ;_ec :=_eg .RowStride ;var _gfb ,_eag ,_fee ,_dgg ,_gba int ;for _fee =0;_fee < _fca .Height ;_fee ++{_gfb =_fee *_bc ;_eag =8*_fee *_ec ;for _dgg =0;_dgg < _bc ;_dgg ++{if _cab =_eg .setEightBytes (_eag +_dgg *8,_cada [_fca .Data [_gfb +_dgg ]]);
_cab !=nil {return _df .Wrap (_cab ,_ggc ,"");};};for _gba =1;_gba < 8;_gba ++{for _dgg =0;_dgg < _ec ;_dgg ++{if _cab =_eg .SetByte (_eag +_gba *_ec +_dgg ,_eg .Data [_eag +_dgg ]);_cab !=nil {return _df .Wrap (_cab ,_ggc ,"");};};};};return nil ;};func _bbe ()(_dgcc [256]uint64 ){for _ba :=0;
_ba < 256;_ba ++{if _ba &0x01!=0{_dgcc [_ba ]|=0xff;};if _ba &0x02!=0{_dgcc [_ba ]|=0xff00;};if _ba &0x04!=0{_dgcc [_ba ]|=0xff0000;};if _ba &0x08!=0{_dgcc [_ba ]|=0xff000000;};if _ba &0x10!=0{_dgcc [_ba ]|=0xff00000000;};if _ba &0x20!=0{_dgcc [_ba ]|=0xff0000000000;
};if _ba &0x40!=0{_dgcc [_ba ]|=0xff000000000000;};if _ba &0x80!=0{_dgcc [_ba ]|=0xff00000000000000;};};return _dgcc ;};var _gffb =[5]int {1,2,3,0,4};func _gcgcb (_aaegf ,_faade ,_efag *Bitmap ,_acfbg int )(*Bitmap ,error ){const _eba ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _faade ==nil {return nil ,_df .Error (_eba ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _efag ==nil {return nil ,_df .Error (_eba ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _acfbg !=4&&_acfbg !=8{return nil ,_df .Error (_eba ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _adfe error ;
_aaegf ,_adfe =_fbc (_aaegf ,_faade );if _adfe !=nil {return nil ,_df .Wrap (_adfe ,_eba ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_aafe :=_faade .createTemplate ();_efag .setPadBits (0);for _baef :=0;
_baef < _babg ;_baef ++{_aafe ,_adfe =_fbc (_aafe ,_aaegf );if _adfe !=nil {return nil ,_df .Wrapf (_adfe ,_eba ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_baef );};if _adfe =_faac (_aaegf ,_efag ,_acfbg );_adfe !=nil {return nil ,_df .Wrapf (_adfe ,_eba ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_baef );
};if _aafe .Equals (_aaegf ){break ;};};return _aaegf ,nil ;};func (_efa *Bitmap )connComponentsBB (_afa int )(_agdg *Boxes ,_ecbb error ){const _febb ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _afa !=4&&_afa !=8{return nil ,_df .Error (_febb ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _efa .Zero (){return &Boxes {},nil ;
};_efa .setPadBits (0);_eabf ,_ecbb :=_fbc (nil ,_efa );if _ecbb !=nil {return nil ,_df .Wrap (_ecbb ,_febb ,"\u0062\u006d\u0031");};_eaec :=&_gd .Stack {};_eaec .Aux =&_gd .Stack {};_agdg =&Boxes {};var (_cffa ,_aeef int ;_fgdb _ad .Point ;_gagd bool ;
_agaba *_ad .Rectangle ;);for {if _fgdb ,_gagd ,_ecbb =_eabf .nextOnPixel (_aeef ,_cffa );_ecbb !=nil {return nil ,_df .Wrap (_ecbb ,_febb ,"");};if !_gagd {break ;};if _agaba ,_ecbb =_cfad (_eabf ,_eaec ,_fgdb .X ,_fgdb .Y ,_afa );_ecbb !=nil {return nil ,_df .Wrap (_ecbb ,_febb ,"");
};if _ecbb =_agdg .Add (_agaba );_ecbb !=nil {return nil ,_df .Wrap (_ecbb ,_febb ,"");};_aeef =_fgdb .X ;_cffa =_fgdb .Y ;};return _agdg ,nil ;};func (_bbbab *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _agc ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _egdf :=_bbbab .validateIntSlice ();_egdf !=nil {return nil ,_df .Wrap (_egdf ,_agc ,"");};if _bbbab .IntSlice .Size ()==0{return nil ,_df .Error (_agc ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_bbbab .SortByY ();var (_eeega []*ClassedPoints ;_caag int ;);_degb :=-1;var _cdab *ClassedPoints ;for _dcgb :=0;_dcgb < len (_bbbab .IntSlice );_dcgb ++{_caag =int (_bbbab .YAtIndex (_dcgb ));if _caag !=_degb {_cdab =&ClassedPoints {Points :_bbbab .Points };
_degb =_caag ;_eeega =append (_eeega ,_cdab );};_cdab .IntSlice =append (_cdab .IntSlice ,_bbbab .IntSlice [_dcgb ]);};for _ ,_cecb :=range _eeega {_cecb .SortByX ();};return _eeega ,nil ;};func _aeb (_eaa ,_aggc ,_cedb *Bitmap )(*Bitmap ,error ){const _afcb ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";
if _aggc ==nil {return nil ,_df .Error (_afcb ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _cedb ==nil {return nil ,_df .Error (_afcb ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _bfgb error ;switch {case _eaa ==_aggc :if _bfgb =_eaa .RasterOperation (0,0,_aggc .Width ,_aggc .Height ,PixNotSrcAndDst ,_cedb ,0,0);
_bfgb !=nil {return nil ,_df .Wrap (_bfgb ,_afcb ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _eaa ==_cedb :if _bfgb =_eaa .RasterOperation (0,0,_aggc .Width ,_aggc .Height ,PixNotSrcAndDst ,_aggc ,0,0);_bfgb !=nil {return nil ,_df .Wrap (_bfgb ,_afcb ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_eaa ,_bfgb =_fbc (_eaa ,_aggc );if _bfgb !=nil {return nil ,_df .Wrap (_bfgb ,_afcb ,"");};if _bfgb =_eaa .RasterOperation (0,0,_aggc .Width ,_aggc .Height ,PixNotSrcAndDst ,_cedb ,0,0);_bfgb !=nil {return nil ,_df .Wrap (_bfgb ,_afcb ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _eaa ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _cgfaf (src ,sequence ...);};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_eeac :=_fdeef (h ,w ,"");_eeac .setOrigin (cy ,cx );
var _fgcg ,_befg int ;for _fgcg =0;_fgcg < h ;_fgcg ++{for _befg =0;_befg < w ;_befg ++{_eeac .Data [_fgcg ][_befg ]=tp ;};};return _eeac ;};type shift int ;func TstOSymbol (t *_a .T ,scale ...int )*Bitmap {_ebbbg ,_fede :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_g .NoError (t ,_fede );return TstGetScaledSymbol (t ,_ebbbg ,scale ...);};func (_bfd *Bitmap )ToImage ()_ad .Image {_dgac ,_edff :=_f .NewImage (_bfd .Width ,_bfd .Height ,1,1,_bfd .Data ,nil ,nil );if _edff !=nil {_ag .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_edff );
};return _dgac ;};type SizeComparison int ;func (_fgf *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _fgf .Copy (),nil ;};_gab ,_egcb :=_fgf .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _egcb !=nil {return nil ,_df .Wrap (_egcb ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");
};return _gab ,nil ;};func (_efgc *Bitmap )setFourBytes (_cad int ,_abgb uint32 )error {if _cad +3> len (_efgc .Data )-1{return _df .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cad );
};_efgc .Data [_cad ]=byte ((_abgb &0xff000000)>>24);_efgc .Data [_cad +1]=byte ((_abgb &0xff0000)>>16);_efgc .Data [_cad +2]=byte ((_abgb &0xff00)>>8);_efgc .Data [_cad +3]=byte (_abgb &0xff);return nil ;};type LocationFilter int ;func _ebda (_fgea *Bitmap ,_cfgd ,_geca ,_bfcfe ,_degfc int ,_cdfc RasterOperator ){if _cfgd < 0{_bfcfe +=_cfgd ;
_cfgd =0;};_cbac :=_cfgd +_bfcfe -_fgea .Width ;if _cbac > 0{_bfcfe -=_cbac ;};if _geca < 0{_degfc +=_geca ;_geca =0;};_efab :=_geca +_degfc -_fgea .Height ;if _efab > 0{_degfc -=_efab ;};if _bfcfe <=0||_degfc <=0{return ;};if (_cfgd &7)==0{_fdgdf (_fgea ,_cfgd ,_geca ,_bfcfe ,_degfc ,_cdfc );
}else {_ebgg (_fgea ,_cfgd ,_geca ,_bfcfe ,_degfc ,_cdfc );};};func (_gadd *Bitmaps )HeightSorter ()func (_gbge ,_eafeb int )bool {return func (_fbba ,_eabd int )bool {_cfdee :=_gadd .Values [_fbba ].Height < _gadd .Values [_eabd ].Height ;_ag .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_gadd .Values [_fbba ].Height ,_gadd .Values [_eabd ].Height ,_cfdee );
return _cfdee ;};};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _cabd ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_ecc :=_egc (width ,height );_ecc .Data =data ;
if _cbc :=((width *height )+7)>>3;len (data )< _cbc {return nil ,_df .Errorf (_cabd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_cbc );
};if _aed :=_ecc .addPadBits ();_aed !=nil {return nil ,_df .Wrap (_aed ,_cabd ,"");};return _ecc ,nil ;};func _gff (_dgaa ,_dcgf *Bitmap ,_ebf CombinationOperator )*Bitmap {_baa :=New (_dgaa .Width ,_dgaa .Height );for _bgb :=0;_bgb < len (_baa .Data );
_bgb ++{_baa .Data [_bgb ]=_cgfgd (_dgaa .Data [_bgb ],_dcgf .Data [_bgb ],_ebf );};return _baa ;};func (_cefa *Bitmaps )CountPixels ()*_gd .NumSlice {_efba :=&_gd .NumSlice {};for _ ,_gabf :=range _cefa .Values {_efba .AddInt (_gabf .CountPixels ());};
return _efba ;};func TstImageBitmapData ()[]byte {return _cebc .Data };func TstNSymbol (t *_a .T ,scale ...int )*Bitmap {_bace ,_gcaa :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_g .NoError (t ,_gcaa );return TstGetScaledSymbol (t ,_bace ,scale ...);
};func (_baf *Bitmap )GetUnpaddedData ()([]byte ,error ){_ffg :=uint (_baf .Width &0x07);if _ffg ==0{return _baf .Data ,nil ;};_dddb :=_baf .Width *_baf .Height ;if _dddb %8!=0{_dddb >>=3;_dddb ++;}else {_dddb >>=3;};_bad :=make ([]byte ,_dddb );_gdb :=_e .NewWriterMSB (_bad );
const _ddee ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _dfba :=0;_dfba < _baf .Height ;_dfba ++{for _fdgd :=0;_fdgd < _baf .RowStride ;_fdgd ++{_gcg :=_baf .Data [_dfba *_baf .RowStride +_fdgd ];if _fdgd !=_baf .RowStride -1{_gge :=_gdb .WriteByte (_gcg );
if _gge !=nil {return nil ,_df .Wrap (_gge ,_ddee ,"");};continue ;};for _cabad :=uint (0);_cabad < _ffg ;_cabad ++{_cccf :=_gdb .WriteBit (int (_gcg >>(7-_cabad )&0x01));if _cccf !=nil {return nil ,_df .Wrap (_cccf ,_ddee ,"");};};};};return _bad ,nil ;
};func (_effe *Bitmaps )SortByWidth (){_bbgdd :=(*byWidth )(_effe );_b .Sort (_bbgdd )};func (_caebd *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _abeg ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _caebd ==nil {return nil ,_df .Error (_abeg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_caebd .Values )-1{return nil ,_df .Errorf (_abeg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _caebd .Values [i ],nil ;};func _af (_ee *Bitmap ,_dfb int ,_aff []byte )(_cbe *Bitmap ,_bgg error ){const _dcf ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _ee ==nil {return nil ,_df .Error (_dcf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _dfb < 1||_dfb > 4{return nil ,_df .Error (_dcf ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _ee .Height <=1{return nil ,_df .Errorf (_dcf ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_ee .Height );
};_cbe =New (_ee .Width /2,_ee .Height /2);if _aff ==nil {_aff =_ggfa ();};_dca :=_adcb (_ee .RowStride ,2*_cbe .RowStride );switch _dfb {case 1:_bgg =_afb (_ee ,_cbe ,_dfb ,_aff ,_dca );case 2:_bgg =_cde (_ee ,_cbe ,_dfb ,_aff ,_dca );case 3:_bgg =_cec (_ee ,_cbe ,_dfb ,_aff ,_dca );
case 4:_bgg =_dfge (_ee ,_cbe ,_dfb ,_aff ,_dca );};if _bgg !=nil {return nil ,_bgg ;};return _cbe ,nil ;};func _dcag (_bdbc int )int {if _bdbc < 0{return -_bdbc ;};return _bdbc ;};func (_bddg Points )XSorter ()func (_gfcc ,_ffc int )bool {return func (_gdaca ,_eaae int )bool {return _bddg [_gdaca ].X < _bddg [_eaae ].X };
};func _aece (_cdeab *Bitmap ,_ccfb ,_abca ,_cecc ,_gcdg int ,_acgf RasterOperator ,_bfgg *Bitmap ,_aacfgb ,_aebg int )error {var (_adcd bool ;_ecgf bool ;_dagd byte ;_egdbc int ;_eccf int ;_fgfe int ;_adg int ;_efcbd bool ;_dbgf int ;_bacg int ;_fgge int ;
_fcgc bool ;_bdgee byte ;_agcb int ;_abda int ;_dbdf int ;_bgbbd byte ;_ccba int ;_cgfad int ;_ccbed uint ;_efcac uint ;_ffac byte ;_gedg shift ;_fbdf bool ;_fdaaa bool ;_ebcd ,_ecda int ;);if _aacfgb &7!=0{_cgfad =8-(_aacfgb &7);};if _ccfb &7!=0{_eccf =8-(_ccfb &7);
};if _cgfad ==0&&_eccf ==0{_ffac =_ddgc [0];}else {if _eccf > _cgfad {_ccbed =uint (_eccf -_cgfad );}else {_ccbed =uint (8-(_cgfad -_eccf ));};_efcac =8-_ccbed ;_ffac =_ddgc [_ccbed ];};if (_ccfb &7)!=0{_adcd =true ;_egdbc =8-(_ccfb &7);_dagd =_ddgc [_egdbc ];
_fgfe =_cdeab .RowStride *_abca +(_ccfb >>3);_adg =_bfgg .RowStride *_aebg +(_aacfgb >>3);_ccba =8-(_aacfgb &7);if _egdbc > _ccba {_gedg =_afge ;if _cecc >=_cgfad {_fbdf =true ;};}else {_gedg =_gfcfg ;};};if _cecc < _egdbc {_ecgf =true ;_dagd &=_gccaf [8-_egdbc +_cecc ];
};if !_ecgf {_dbgf =(_cecc -_egdbc )>>3;if _dbgf !=0{_efcbd =true ;_bacg =_cdeab .RowStride *_abca +((_ccfb +_eccf )>>3);_fgge =_bfgg .RowStride *_aebg +((_aacfgb +_eccf )>>3);};};_agcb =(_ccfb +_cecc )&7;if !(_ecgf ||_agcb ==0){_fcgc =true ;_bdgee =_gccaf [_agcb ];
_abda =_cdeab .RowStride *_abca +((_ccfb +_eccf )>>3)+_dbgf ;_dbdf =_bfgg .RowStride *_aebg +((_aacfgb +_eccf )>>3)+_dbgf ;if _agcb > int (_efcac ){_fdaaa =true ;};};switch _acgf {case PixSrc :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;
if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],_bgbbd ,_dagd );_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;
_ebcd < _gcdg ;_ebcd ++{for _ecda =0;_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );_cdeab .Data [_bacg +_ecda ]=_bgbbd ;};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;
};};if _fcgc {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],_bgbbd ,_bdgee );_abda +=_cdeab .RowStride ;
_dbdf +=_bfgg .RowStride ;};};case PixNotSrc :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;
};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],^_bgbbd ,_dagd );_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );
_cdeab .Data [_bacg +_ecda ]=^_bgbbd ;};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};if _fcgc {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );
};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],^_bgbbd ,_bdgee );_abda +=_cdeab .RowStride ;_dbdf +=_bfgg .RowStride ;};};case PixSrcOrDst :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );
};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],_bgbbd |_cdeab .Data [_fgfe ],_dagd );_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;
_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );_cdeab .Data [_bacg +_ecda ]|=_bgbbd ;};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};if _fcgc {for _ebcd =0;_ebcd < _gcdg ;
_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],_bgbbd |_cdeab .Data [_abda ],_bdgee );_abda +=_cdeab .RowStride ;_dbdf +=_bfgg .RowStride ;
};};case PixSrcAndDst :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],_bgbbd &_cdeab .Data [_fgfe ],_dagd );
_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );_cdeab .Data [_bacg +_ecda ]&=_bgbbd ;
};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};if _fcgc {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],_bgbbd &_cdeab .Data [_abda ],_bdgee );
_abda +=_cdeab .RowStride ;_dbdf +=_bfgg .RowStride ;};};case PixSrcXorDst :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );};
}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],_bgbbd ^_cdeab .Data [_fgfe ],_dagd );_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;
_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );_cdeab .Data [_bacg +_ecda ]^=_bgbbd ;};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};if _fcgc {for _ebcd =0;_ebcd < _gcdg ;
_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],_bgbbd ^_cdeab .Data [_abda ],_bdgee );_abda +=_cdeab .RowStride ;_dbdf +=_bfgg .RowStride ;
};};case PixNotSrcOrDst :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],^_bgbbd |_cdeab .Data [_fgfe ],_dagd );
_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );_cdeab .Data [_bacg +_ecda ]|=^_bgbbd ;
};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};if _fcgc {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],^_bgbbd |_cdeab .Data [_abda ],_bdgee );
_abda +=_cdeab .RowStride ;_dbdf +=_bfgg .RowStride ;};};case PixNotSrcAndDst :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );
};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],^_bgbbd &_cdeab .Data [_fgfe ],_dagd );_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;
_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );_cdeab .Data [_bacg +_ecda ]&=^_bgbbd ;};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};if _fcgc {for _ebcd =0;_ebcd < _gcdg ;
_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],^_bgbbd &_cdeab .Data [_abda ],_bdgee );_abda +=_cdeab .RowStride ;_dbdf +=_bfgg .RowStride ;
};};case PixSrcOrNotDst :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],_bgbbd |^_cdeab .Data [_fgfe ],_dagd );
_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );_cdeab .Data [_bacg +_ecda ]=_bgbbd |^_cdeab .Data [_bacg +_ecda ];
};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};if _fcgc {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],_bgbbd |^_cdeab .Data [_abda ],_bdgee );
_abda +=_cdeab .RowStride ;_dbdf +=_bfgg .RowStride ;};};case PixSrcAndNotDst :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );
};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],_bgbbd &^_cdeab .Data [_fgfe ],_dagd );_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;
_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );_cdeab .Data [_bacg +_ecda ]=_bgbbd &^_cdeab .Data [_bacg +_ecda ];};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};if _fcgc {for _ebcd =0;
_ebcd < _gcdg ;_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],_bgbbd &^_cdeab .Data [_abda ],_bdgee );_abda +=_cdeab .RowStride ;
_dbdf +=_bfgg .RowStride ;};};case PixNotPixSrcOrDst :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;
};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],^(_bgbbd |_cdeab .Data [_fgfe ]),_dagd );_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );
_cdeab .Data [_bacg +_ecda ]=^(_bgbbd |_cdeab .Data [_bacg +_ecda ]);};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};if _fcgc {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );
};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],^(_bgbbd |_cdeab .Data [_abda ]),_bdgee );_abda +=_cdeab .RowStride ;_dbdf +=_bfgg .RowStride ;};};case PixNotPixSrcAndDst :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;
if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],^(_bgbbd &_cdeab .Data [_fgfe ]),_dagd );_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;
};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );_cdeab .Data [_bacg +_ecda ]=^(_bgbbd &_cdeab .Data [_bacg +_ecda ]);
};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};if _fcgc {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],^(_bgbbd &_cdeab .Data [_abda ]),_bdgee );
_abda +=_cdeab .RowStride ;_dbdf +=_bfgg .RowStride ;};};case PixNotPixSrcXorDst :if _adcd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{if _gedg ==_afge {_bgbbd =_bfgg .Data [_adg ]<<_ccbed ;if _fbdf {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_adg +1]>>_efcac ,_ffac );
};}else {_bgbbd =_bfgg .Data [_adg ]>>_efcac ;};_cdeab .Data [_fgfe ]=_cfbdg (_cdeab .Data [_fgfe ],^(_bgbbd ^_cdeab .Data [_fgfe ]),_dagd );_fgfe +=_cdeab .RowStride ;_adg +=_bfgg .RowStride ;};};if _efcbd {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{for _ecda =0;
_ecda < _dbgf ;_ecda ++{_bgbbd =_cfbdg (_bfgg .Data [_fgge +_ecda ]<<_ccbed ,_bfgg .Data [_fgge +_ecda +1]>>_efcac ,_ffac );_cdeab .Data [_bacg +_ecda ]=^(_bgbbd ^_cdeab .Data [_bacg +_ecda ]);};_bacg +=_cdeab .RowStride ;_fgge +=_bfgg .RowStride ;};};
if _fcgc {for _ebcd =0;_ebcd < _gcdg ;_ebcd ++{_bgbbd =_bfgg .Data [_dbdf ]<<_ccbed ;if _fdaaa {_bgbbd =_cfbdg (_bgbbd ,_bfgg .Data [_dbdf +1]>>_efcac ,_ffac );};_cdeab .Data [_abda ]=_cfbdg (_cdeab .Data [_abda ],^(_bgbbd ^_cdeab .Data [_abda ]),_bdgee );
_abda +=_cdeab .RowStride ;_dbdf +=_bfgg .RowStride ;};};default:_ag .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_acgf );
return _df .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func _dfge (_cce ,_bcd *Bitmap ,_afbg int ,_bfc []byte ,_acf int )(_gbb error ){const _bgd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_fcb ,_cbeb ,_eeed ,_gfa ,_add ,_eefb ,_deab ,_efd int ;
_efe ,_gdg uint32 ;_ggdb ,_dgf byte ;_bce uint16 ;);_cff :=make ([]byte ,4);_cdf :=make ([]byte ,4);for _eeed =0;_eeed < _cce .Height -1;_eeed ,_gfa =_eeed +2,_gfa +1{_fcb =_eeed *_cce .RowStride ;_cbeb =_gfa *_bcd .RowStride ;for _add ,_eefb =0,0;_add < _acf ;
_add ,_eefb =_add +4,_eefb +1{for _deab =0;_deab < 4;_deab ++{_efd =_fcb +_add +_deab ;if _efd <=len (_cce .Data )-1&&_efd < _fcb +_cce .RowStride {_cff [_deab ]=_cce .Data [_efd ];}else {_cff [_deab ]=0x00;};_efd =_fcb +_cce .RowStride +_add +_deab ;if _efd <=len (_cce .Data )-1&&_efd < _fcb +(2*_cce .RowStride ){_cdf [_deab ]=_cce .Data [_efd ];
}else {_cdf [_deab ]=0x00;};};_efe =_dc .BigEndian .Uint32 (_cff );_gdg =_dc .BigEndian .Uint32 (_cdf );_gdg &=_efe ;_gdg &=_gdg <<1;_gdg &=0xaaaaaaaa;_efe =_gdg |(_gdg <<7);_ggdb =byte (_efe >>24);_dgf =byte ((_efe >>8)&0xff);_efd =_cbeb +_eefb ;if _efd +1==len (_bcd .Data )-1||_efd +1>=_cbeb +_bcd .RowStride {_bcd .Data [_efd ]=_bfc [_ggdb ];
if _gbb =_bcd .SetByte (_efd ,_bfc [_ggdb ]);_gbb !=nil {return _df .Wrapf (_gbb ,_bgd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_efd );};}else {_bce =(uint16 (_bfc [_ggdb ])<<8)|uint16 (_bfc [_dgf ]);if _gbb =_bcd .setTwoBytes (_efd ,_bce );_gbb !=nil {return _df .Wrapf (_gbb ,_bgd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_efd );
};_eefb ++;};};};return nil ;};type byHeight Bitmaps ;func _dgcd (_cdbef *_gd .Stack )(_bdgeg *fillSegment ,_bbgf error ){const _gffgg ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _cdbef ==nil {return nil ,_df .Error (_gffgg ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _cdbef .Aux ==nil {return nil ,_df .Error (_gffgg ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_cfbe ,_gcaeg :=_cdbef .Pop ();if !_gcaeg {return nil ,nil ;};_gddfg ,_gcaeg :=_cfbe .(*fillSegment );
if !_gcaeg {return nil ,_df .Error (_gffgg ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_bdgeg =&fillSegment {_gddfg ._cgdac ,_gddfg ._ccca ,_gddfg ._bcec +_gddfg ._dbgde ,_gddfg ._dbgde };
_cdbef .Aux .Push (_gddfg );return _bdgeg ,nil ;};func (_dfbdf *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _cgga ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_bcfg ,_daad :=_dfbdf .selectByIndexes (idx );if _daad !=nil {return nil ,_df .Wrap (_daad ,_cgga ,"");};return _bcfg ,nil ;};func (_fcedb *byHeight )Swap (i ,j int ){_fcedb .Values [i ],_fcedb .Values [j ]=_fcedb .Values [j ],_fcedb .Values [i ];if _fcedb .Boxes !=nil {_fcedb .Boxes [i ],_fcedb .Boxes [j ]=_fcedb .Boxes [j ],_fcedb .Boxes [i ];
};};var _dgga =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
type CombinationOperator int ;func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _fbc (d ,s )};func (_gaae *Bitmap )equivalent (_gfda *Bitmap )bool {if _gaae ==_gfda {return true ;};if !_gaae .SizesEqual (_gfda ){return false ;};_efcdc :=_gff (_gaae ,_gfda ,CmbOpXor );
_gga :=_gaae .countPixels ();_afcg :=int (0.25*float32 (_gga ));if _efcdc .thresholdPixelSum (_afcg ){return false ;};var (_efec [9][9]int ;_afd [18][9]int ;_afbe [9][18]int ;_bcbb int ;_bgee int ;);_cdgc :=9;_bfga :=_gaae .Height /_cdgc ;_bddd :=_gaae .Width /_cdgc ;
_agec ,_aag :=_bfga /2,_bddd /2;if _bfga < _bddd {_agec =_bddd /2;_aag =_bfga /2;};_gec :=float64 (_agec )*float64 (_aag )*_ea .Pi ;_dfdc :=int (float64 (_bfga *_bddd /2)*0.9);_fgbe :=int (float64 (_bddd *_bfga /2)*0.9);for _cebf :=0;_cebf < _cdgc ;_cebf ++{_cbb :=_bddd *_cebf +_bcbb ;
var _ebd int ;if _cebf ==_cdgc -1{_bcbb =0;_ebd =_gaae .Width ;}else {_ebd =_cbb +_bddd ;if ((_gaae .Width -_bcbb )%_cdgc )> 0{_bcbb ++;_ebd ++;};};for _ade :=0;_ade < _cdgc ;_ade ++{_adf :=_bfga *_ade +_bgee ;var _dcff int ;if _ade ==_cdgc -1{_bgee =0;
_dcff =_gaae .Height ;}else {_dcff =_adf +_bfga ;if (_gaae .Height -_bgee )%_cdgc > 0{_bgee ++;_dcff ++;};};var _cfce ,_abae ,_gaec ,_agff int ;_cgcc :=(_cbb +_ebd )/2;_bfcb :=(_adf +_dcff )/2;for _fcfc :=_cbb ;_fcfc < _ebd ;_fcfc ++{for _dabfc :=_adf ;
_dabfc < _dcff ;_dabfc ++{if _efcdc .GetPixel (_fcfc ,_dabfc ){if _fcfc < _cgcc {_cfce ++;}else {_abae ++;};if _dabfc < _bfcb {_agff ++;}else {_gaec ++;};};};};_efec [_cebf ][_ade ]=_cfce +_abae ;_afd [_cebf *2][_ade ]=_cfce ;_afd [_cebf *2+1][_ade ]=_abae ;
_afbe [_cebf ][_ade *2]=_agff ;_afbe [_cebf ][_ade *2+1]=_gaec ;};};for _cfd :=0;_cfd < _cdgc *2-1;_cfd ++{for _bdde :=0;_bdde < (_cdgc -1);_bdde ++{var _cgfa int ;for _gbgb :=0;_gbgb < 2;_gbgb ++{for _fbdb :=0;_fbdb < 2;_fbdb ++{_cgfa +=_afd [_cfd +_gbgb ][_bdde +_fbdb ];
};};if _cgfa > _fgbe {return false ;};};};for _fdc :=0;_fdc < (_cdgc -1);_fdc ++{for _eeca :=0;_eeca < ((_cdgc *2)-1);_eeca ++{var _gacb int ;for _bea :=0;_bea < 2;_bea ++{for _cebg :=0;_cebg < 2;_cebg ++{_gacb +=_afbe [_fdc +_bea ][_eeca +_cebg ];};};
if _gacb > _dfdc {return false ;};};};for _dcdd :=0;_dcdd < (_cdgc -2);_dcdd ++{for _bbfa :=0;_bbfa < (_cdgc -2);_bbfa ++{var _cbde ,_dbag int ;for _deee :=0;_deee < 3;_deee ++{for _abbb :=0;_abbb < 3;_abbb ++{if _deee ==_abbb {_cbde +=_efec [_dcdd +_deee ][_bbfa +_abbb ];
};if (2-_deee )==_abbb {_dbag +=_efec [_dcdd +_deee ][_bbfa +_abbb ];};};};if _cbde > _fgbe ||_dbag > _fgbe {return false ;};};};for _gfdc :=0;_gfdc < (_cdgc -1);_gfdc ++{for _gdgg :=0;_gdgg < (_cdgc -1);_gdgg ++{var _ceg int ;for _ffab :=0;_ffab < 2;_ffab ++{for _bdb :=0;
_bdb < 2;_bdb ++{_ceg +=_efec [_gfdc +_ffab ][_gdgg +_bdb ];};};if float64 (_ceg )> _gec {return false ;};};};return true ;};func TstVSymbol (t *_a .T ,scale ...int )*Bitmap {_bdce ,_becge :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_g .NoError (t ,_becge );
return TstGetScaledSymbol (t ,_bdce ,scale ...);};func (_abdg Points )GetIntY (i int )(int ,error ){if i >=len (_abdg ){return 0,_df .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_abdg [i ].Y ),nil ;};func _fedd (_gbcaa ...MorphProcess )(_degg error ){const _defb ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _gdfff ,_dege int ;for _cabaa ,_aadbf :=range _gbcaa {if _degg =_aadbf .verify (_cabaa ,&_gdfff ,&_dege );
_degg !=nil {return _df .Wrap (_degg ,_defb ,"");};};if _dege !=0&&_gdfff !=0{return _df .Error (_defb ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func TstGetScaledSymbol (t *_a .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_aabb ,_adca :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_g .NoError (t ,_adca );return _aabb ;};func _efdfd (_gecb ,_beac int )int {if _gecb > _beac {return _gecb ;};return _beac ;};func _ddd ()(_dggf [256]uint32 ){for _bg :=0;_bg < 256;_bg ++{if _bg &0x01!=0{_dggf [_bg ]|=0xf;};if _bg &0x02!=0{_dggf [_bg ]|=0xf0;
};if _bg &0x04!=0{_dggf [_bg ]|=0xf00;};if _bg &0x08!=0{_dggf [_bg ]|=0xf000;};if _bg &0x10!=0{_dggf [_bg ]|=0xf0000;};if _bg &0x20!=0{_dggf [_bg ]|=0xf00000;};if _bg &0x40!=0{_dggf [_bg ]|=0xf000000;};if _bg &0x80!=0{_dggf [_bg ]|=0xf0000000;};};return _dggf ;
};func (_dfed *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_ggdbf *Bitmaps ,_fbcc *Boxes ,_gggd error ){const _geg ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _dfed ==nil {return nil ,nil ,_df .Error (_geg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");
};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_df .Error (_geg ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _dfed .Zero (){_fbcc =&Boxes {};_ggdbf =&Bitmaps {};return _ggdbf ,_fbcc ,nil ;};switch components {case ComponentConn :_ggdbf =&Bitmaps {};if _fbcc ,_gggd =_dfed .ConnComponents (_ggdbf ,8);_gggd !=nil {return nil ,nil ,_df .Wrap (_gggd ,_geg ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_edbdd ,_bdec :=MorphSequence (_dfed ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _bdec !=nil {return nil ,nil ,_df .Wrap (_bdec ,_geg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _ag .Log .IsLogLevel (_ag .LogLevelTrace ){_ag .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_edbdd .String ());
};_cfgbc :=&Bitmaps {};_fbcc ,_bdec =_edbdd .ConnComponents (_cfgbc ,8);if _bdec !=nil {return nil ,nil ,_df .Wrap (_bdec ,_geg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _ag .Log .IsLogLevel (_ag .LogLevelTrace ){_ag .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_cfgbc .String ());
};if _ggdbf ,_bdec =_cfgbc .ClipToBitmap (_dfed );_bdec !=nil {return nil ,nil ,_df .Wrap (_bdec ,_geg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_eecc :=1;
var _gad *Bitmap ;switch {case _dfed .XResolution <=200:_gad =_dfed ;case _dfed .XResolution <=400:_eecc =2;_gad ,_gggd =_cfg (_dfed ,1,0,0,0);if _gggd !=nil {return nil ,nil ,_df .Wrap (_gggd ,_geg ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_eecc =4;_gad ,_gggd =_cfg (_dfed ,1,1,0,0);if _gggd !=nil {return nil ,nil ,_df .Wrap (_gggd ,_geg ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_dfcb ,_ ,_fbag :=_aeab (_gad );if _fbag !=nil {return nil ,nil ,_df .Wrap (_fbag ,_geg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_eea ,_fbag :=_dabab (_dfcb ,_eecc );if _fbag !=nil {return nil ,nil ,_df .Wrap (_fbag ,_geg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_dbb :=&Bitmaps {};if _fbcc ,_fbag =_eea .ConnComponents (_dbb ,4);_fbag !=nil {return nil ,nil ,_df .Wrap (_fbag ,_geg ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _ggdbf ,_fbag =_dbb .ClipToBitmap (_dfed );_fbag !=nil {return nil ,nil ,_df .Wrap (_fbag ,_geg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_ggdbf ,_gggd =_ggdbf .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _gggd !=nil {return nil ,nil ,_df .Wrap (_gggd ,_geg ,"");};_fbcc ,_gggd =_fbcc .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _gggd !=nil {return nil ,nil ,_df .Wrap (_gggd ,_geg ,"");};return _ggdbf ,_fbcc ,nil ;};func (_adgc *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _adce ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_adgc .Values )==0{return nil ,_df .Error (_adce ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_eggd :=&BitmapsArray {};_adgc .SortByWidth ();_bdabd :=-1;_dfdd :=-1;for _afea :=0;_afea < len (_adgc .Values );
_afea ++{_cedd :=_adgc .Values [_afea ].Width ;if _cedd > _bdabd {_bdabd =_cedd ;_dfdd ++;_eggd .Values =append (_eggd .Values ,&Bitmaps {});};_eggd .Values [_dfdd ].AddBitmap (_adgc .Values [_afea ]);};return _eggd ,nil ;};type Point struct{X ,Y float32 ;
};func (_cabfa *byWidth )Less (i ,j int )bool {return _cabfa .Values [i ].Width < _cabfa .Values [j ].Width };type byWidth Bitmaps ;func (_afbc *BitmapsArray )AddBitmaps (bm *Bitmaps ){_afbc .Values =append (_afbc .Values ,bm )};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _adda ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_df .Error (_adda ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_df .Error (_adda ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_df .Error (_adda ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_df .Error (_adda ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_df .Error (_adda ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_fad ,_dfcfa :=bm1 .Width ,bm1 .Height ;_adfa ,_gggfd :=bm2 .Width ,bm2 .Height ;if _gd .Abs (_fad -_adfa )> maxDiffW {return false ,nil ;};if _gd .Abs (_dfcfa -_gggfd )> maxDiffH {return false ,nil ;};_ebbd :=int (delX +_gd .Sign (delX )*0.5);_fdce :=int (delY +_gd .Sign (delY )*0.5);
_gcbd :=int (_ea .Ceil (_ea .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_gecf :=bm2 .RowStride ;_abcc :=_efdfd (_fdce ,0);_faae :=_adcb (_gggfd +_fdce ,_dfcfa );_bdfc :=bm1 .RowStride *_abcc ;_ffaa :=bm2 .RowStride *(_abcc -_fdce );
var _dbcb int ;if _faae <=_dfcfa {_dbcb =downcount [_faae -1];};_cdega :=_efdfd (_ebbd ,0);_eged :=_adcb (_adfa +_ebbd ,_fad );var _cffd ,_gbgc int ;if _ebbd >=8{_cffd =_ebbd >>3;_bdfc +=_cffd ;_cdega -=_cffd <<3;_eged -=_cffd <<3;_ebbd &=7;}else if _ebbd <=-8{_gbgc =-((_ebbd +7)>>3);
_ffaa +=_gbgc ;_gecf -=_gbgc ;_ebbd +=_gbgc <<3;};var (_cffe ,_fdfd ,_eeeb int ;_acdg ,_cgg ,_ccbg byte ;);if _cdega >=_eged ||_abcc >=_faae {return false ,nil ;};_ebbg :=(_eged +7)>>3;switch {case _ebbd ==0:for _fdfd =_abcc ;_fdfd < _faae ;_fdfd ,_bdfc ,_ffaa =_fdfd +1,_bdfc +bm1 .RowStride ,_ffaa +bm2 .RowStride {for _eeeb =0;
_eeeb < _ebbg ;_eeeb ++{_acdg =bm1 .Data [_bdfc +_eeeb ]&bm2 .Data [_ffaa +_eeeb ];_cffe +=tab [_acdg ];};if _cffe >=_gcbd {return true ,nil ;};if _ddeg :=_cffe +downcount [_fdfd ]-_dbcb ;_ddeg < _gcbd {return false ,nil ;};};case _ebbd > 0&&_gecf < _ebbg :for _fdfd =_abcc ;
_fdfd < _faae ;_fdfd ,_bdfc ,_ffaa =_fdfd +1,_bdfc +bm1 .RowStride ,_ffaa +bm2 .RowStride {_cgg =bm1 .Data [_bdfc ];_ccbg =bm2 .Data [_ffaa ]>>uint (_ebbd );_acdg =_cgg &_ccbg ;_cffe +=tab [_acdg ];for _eeeb =1;_eeeb < _gecf ;_eeeb ++{_cgg =bm1 .Data [_bdfc +_eeeb ];
_ccbg =bm2 .Data [_ffaa +_eeeb ]>>uint (_ebbd )|bm2 .Data [_ffaa +_eeeb -1]<<uint (8-_ebbd );_acdg =_cgg &_ccbg ;_cffe +=tab [_acdg ];};_cgg =bm1 .Data [_bdfc +_eeeb ];_ccbg =bm2 .Data [_ffaa +_eeeb -1]<<uint (8-_ebbd );_acdg =_cgg &_ccbg ;_cffe +=tab [_acdg ];
if _cffe >=_gcbd {return true ,nil ;}else if _cffe +downcount [_fdfd ]-_dbcb < _gcbd {return false ,nil ;};};case _ebbd > 0&&_gecf >=_ebbg :for _fdfd =_abcc ;_fdfd < _faae ;_fdfd ,_bdfc ,_ffaa =_fdfd +1,_bdfc +bm1 .RowStride ,_ffaa +bm2 .RowStride {_cgg =bm1 .Data [_bdfc ];
_ccbg =bm2 .Data [_ffaa ]>>uint (_ebbd );_acdg =_cgg &_ccbg ;_cffe +=tab [_acdg ];for _eeeb =1;_eeeb < _ebbg ;_eeeb ++{_cgg =bm1 .Data [_bdfc +_eeeb ];_ccbg =bm2 .Data [_ffaa +_eeeb ]>>uint (_ebbd );_ccbg |=bm2 .Data [_ffaa +_eeeb -1]<<uint (8-_ebbd );
_acdg =_cgg &_ccbg ;_cffe +=tab [_acdg ];};if _cffe >=_gcbd {return true ,nil ;}else if _cffe +downcount [_fdfd ]-_dbcb < _gcbd {return false ,nil ;};};case _ebbg < _gecf :for _fdfd =_abcc ;_fdfd < _faae ;_fdfd ,_bdfc ,_ffaa =_fdfd +1,_bdfc +bm1 .RowStride ,_ffaa +bm2 .RowStride {for _eeeb =0;
_eeeb < _ebbg ;_eeeb ++{_cgg =bm1 .Data [_bdfc +_eeeb ];_ccbg =bm2 .Data [_ffaa +_eeeb ]<<uint (-_ebbd );_ccbg |=bm2 .Data [_ffaa +_eeeb +1]>>uint (8+_ebbd );_acdg =_cgg &_ccbg ;_cffe +=tab [_acdg ];};if _cffe >=_gcbd {return true ,nil ;}else if _dcbe :=_cffe +downcount [_fdfd ]-_dbcb ;
_dcbe < _gcbd {return false ,nil ;};};case _gecf >=_ebbg :for _fdfd =_abcc ;_fdfd < _faae ;_fdfd ,_bdfc ,_ffaa =_fdfd +1,_bdfc +bm1 .RowStride ,_ffaa +bm2 .RowStride {for _eeeb =0;_eeeb < _ebbg ;_eeeb ++{_cgg =bm1 .Data [_bdfc +_eeeb ];_ccbg =bm2 .Data [_ffaa +_eeeb ]<<uint (-_ebbd );
_ccbg |=bm2 .Data [_ffaa +_eeeb +1]>>uint (8+_ebbd );_acdg =_cgg &_ccbg ;_cffe +=tab [_acdg ];};_cgg =bm1 .Data [_bdfc +_eeeb ];_ccbg =bm2 .Data [_ffaa +_eeeb ]<<uint (-_ebbd );_acdg =_cgg &_ccbg ;_cffe +=tab [_acdg ];if _cffe >=_gcbd {return true ,nil ;
}else if _cffe +downcount [_fdfd ]-_dbcb < _gcbd {return false ,nil ;};};};_ebeb :=float32 (_cffe )*float32 (_cffe )/(float32 (area1 )*float32 (area2 ));if _ebeb >=scoreThreshold {_ag .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_cffe ,_gcbd ,_ebeb ,scoreThreshold );
};return false ,nil ;};func TstFrameBitmapData ()[]byte {return _facf .Data };func (_dfae *Bitmaps )selectByIndexes (_debaf []int )(*Bitmaps ,error ){_bbfcfa :=&Bitmaps {};for _ ,_cgdg :=range _debaf {_gggdc ,_gddg :=_dfae .GetBitmap (_cgdg );if _gddg !=nil {return nil ,_df .Wrap (_gddg ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_bbfcfa .AddBitmap (_gggdc );};return _bbfcfa ,nil ;};func TstAddSymbol (t *_a .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_dage :=_ad .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_dage );*x +=sym .Width +space ;
};func (_dfbc *Bitmap )CountPixels ()int {return _dfbc .countPixels ()};func (_geaf *Bitmap )setEightPartlyBytes (_aedd ,_gfg int ,_fabd uint64 )(_gafe error ){var (_bga byte ;_gagg int ;);const _cdcc ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _dfgc :=1;_dfgc <=_gfg ;_dfgc ++{_gagg =64-_dfgc *8;_bga =byte (_fabd >>uint (_gagg )&0xff);_ag .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_bga ,_aedd ,_aedd +_dfgc -1,_gfg ,_gagg );
if _gafe =_geaf .SetByte (_aedd +_dfgc -1,_bga );_gafe !=nil {return _df .Wrap (_gafe ,_cdcc ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_fcaa :=_geaf .RowStride *8-_geaf .Width ;if _fcaa ==0{return nil ;};_gagg -=8;_bga =byte (_fabd >>uint (_gagg )&0xff)<<uint (_fcaa );
if _gafe =_geaf .SetByte (_aedd +_gfg ,_bga );_gafe !=nil {return _df .Wrap (_gafe ,_cdcc ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_ecbbf *Bitmaps )WidthSorter ()func (_accf ,_bfff int )bool {return func (_bgac ,_aedaf int )bool {return _ecbbf .Values [_bgac ].Width < _ecbbf .Values [_aedaf ].Width };
};func TstRSymbol (t *_a .T ,scale ...int )*Bitmap {_facfb ,_eabfg :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_g .NoError (t ,_eabfg );return TstGetScaledSymbol (t ,_facfb ,scale ...);};var (_gccaf =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};
_ddgc =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);type Bitmaps struct{Values []*Bitmap ;Boxes []*_ad .Rectangle ;};func (_bfg *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _bfg .addBorderGeneral (left ,right ,top ,bot ,val );
};func TstPSymbol (t *_a .T )*Bitmap {t .Helper ();_fdbge :=New (5,8);_g .NoError (t ,_fdbge .SetPixel (0,0,1));_g .NoError (t ,_fdbge .SetPixel (1,0,1));_g .NoError (t ,_fdbge .SetPixel (2,0,1));_g .NoError (t ,_fdbge .SetPixel (3,0,1));_g .NoError (t ,_fdbge .SetPixel (4,1,1));
_g .NoError (t ,_fdbge .SetPixel (0,1,1));_g .NoError (t ,_fdbge .SetPixel (4,2,1));_g .NoError (t ,_fdbge .SetPixel (0,2,1));_g .NoError (t ,_fdbge .SetPixel (4,3,1));_g .NoError (t ,_fdbge .SetPixel (0,3,1));_g .NoError (t ,_fdbge .SetPixel (0,4,1));
_g .NoError (t ,_fdbge .SetPixel (1,4,1));_g .NoError (t ,_fdbge .SetPixel (2,4,1));_g .NoError (t ,_fdbge .SetPixel (3,4,1));_g .NoError (t ,_fdbge .SetPixel (0,5,1));_g .NoError (t ,_fdbge .SetPixel (0,6,1));_g .NoError (t ,_fdbge .SetPixel (0,7,1));
return _fdbge ;};func TstDSymbol (t *_a .T ,scale ...int )*Bitmap {_cccg ,_ggag :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_g .NoError (t ,_ggag );return TstGetScaledSymbol (t ,_cccg ,scale ...);};func _gcc (_deg *Bitmap ,_cac int )(*Bitmap ,error ){const _dfg ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _deg ==nil {return nil ,_df .Error (_dfg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cac ==1{return _fbc (nil ,_deg );};if _cac !=2&&_cac !=4&&_cac !=8{return nil ,_df .Error (_dfg ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_dda :=_cac *_deg .Width ;_cg :=_cac *_deg .Height ;_fcf :=New (_dda ,_cg );var _cb error ;switch _cac {case 2:_cb =_bd (_fcf ,_deg );case 4:_cb =_gb (_fcf ,_deg );case 8:_cb =_aea (_fcf ,_deg );};if _cb !=nil {return nil ,_df .Wrap (_cb ,_dfg ,"");};
return _fcf ,nil ;};func (_cfdc *Bitmaps )makeSizeIndicator (_ffce ,_febd int ,_bgfcf LocationFilter ,_egga SizeComparison )(_bcgc *_gd .NumSlice ,_ebfb error ){const _cbda ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _cfdc ==nil {return nil ,_df .Error (_cbda ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _bgfcf {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_df .Errorf (_cbda ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_bgfcf );
};switch _egga {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_df .Errorf (_cbda ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_egga );
};_bcgc =&_gd .NumSlice {};var (_dcfc ,_dadd ,_gfgc int ;_eabef *Bitmap ;);for _ ,_eabef =range _cfdc .Values {_dcfc =0;_dadd ,_gfgc =_eabef .Width ,_eabef .Height ;switch _bgfcf {case LocSelectWidth :if (_egga ==SizeSelectIfLT &&_dadd < _ffce )||(_egga ==SizeSelectIfGT &&_dadd > _ffce )||(_egga ==SizeSelectIfLTE &&_dadd <=_ffce )||(_egga ==SizeSelectIfGTE &&_dadd >=_ffce )||(_egga ==SizeSelectIfEQ &&_dadd ==_ffce ){_dcfc =1;
};case LocSelectHeight :if (_egga ==SizeSelectIfLT &&_gfgc < _febd )||(_egga ==SizeSelectIfGT &&_gfgc > _febd )||(_egga ==SizeSelectIfLTE &&_gfgc <=_febd )||(_egga ==SizeSelectIfGTE &&_gfgc >=_febd )||(_egga ==SizeSelectIfEQ &&_gfgc ==_febd ){_dcfc =1;
};case LocSelectIfEither :if (_egga ==SizeSelectIfLT &&(_dadd < _ffce ||_gfgc < _febd ))||(_egga ==SizeSelectIfGT &&(_dadd > _ffce ||_gfgc > _febd ))||(_egga ==SizeSelectIfLTE &&(_dadd <=_ffce ||_gfgc <=_febd ))||(_egga ==SizeSelectIfGTE &&(_dadd >=_ffce ||_gfgc >=_febd ))||(_egga ==SizeSelectIfEQ &&(_dadd ==_ffce ||_gfgc ==_febd )){_dcfc =1;
};case LocSelectIfBoth :if (_egga ==SizeSelectIfLT &&(_dadd < _ffce &&_gfgc < _febd ))||(_egga ==SizeSelectIfGT &&(_dadd > _ffce &&_gfgc > _febd ))||(_egga ==SizeSelectIfLTE &&(_dadd <=_ffce &&_gfgc <=_febd ))||(_egga ==SizeSelectIfGTE &&(_dadd >=_ffce &&_gfgc >=_febd ))||(_egga ==SizeSelectIfEQ &&(_dadd ==_ffce &&_gfgc ==_febd )){_dcfc =1;
};};_bcgc .AddInt (_dcfc );};return _bcgc ,nil ;};func (_cgae *Bitmap )clipRectangle (_bac ,_fegg *_ad .Rectangle )(_cfcf *Bitmap ,_cdbf error ){const _ebc ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _bac ==nil {return nil ,_df .Error (_ebc ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_cdfa ,_eeeg :=_cgae .Width ,_cgae .Height ;_ecg ,_cdbf :=ClipBoxToRectangle (_bac ,_cdfa ,_eeeg );if _cdbf !=nil {_ag .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_cdbf );
return nil ,nil ;};_gacf ,_daa :=_ecg .Min .X ,_ecg .Min .Y ;_eec ,_aeda :=_ecg .Max .X -_ecg .Min .X ,_ecg .Max .Y -_ecg .Min .Y ;_cfcf =New (_eec ,_aeda );_cfcf .Text =_cgae .Text ;if _cdbf =_cfcf .RasterOperation (0,0,_eec ,_aeda ,PixSrc ,_cgae ,_gacf ,_daa );
_cdbf !=nil {return nil ,_df .Wrap (_cdbf ,_ebc ,"");};if _fegg !=nil {*_fegg =*_ecg ;};return _cfcf ,nil ;};func _eeef (_egad *Bitmap ,_bbbf *_gd .Stack ,_adcde ,_fgc int )(_fbcee *_ad .Rectangle ,_geed error ){const _cceef ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _egad ==nil {return nil ,_df .Error (_cceef ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bbbf ==nil {return nil ,_df .Error (_cceef ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_fffc ,_dcec :=_egad .Width ,_egad .Height ;_bebce :=_fffc -1;_bceg :=_dcec -1;if _adcde < 0||_adcde > _bebce ||_fgc < 0||_fgc > _bceg ||!_egad .GetPixel (_adcde ,_fgc ){return nil ,nil ;};_caee :=_ad .Rect (100000,100000,0,0);if _geed =_bdad (_bbbf ,_adcde ,_adcde ,_fgc ,1,_bceg ,&_caee );
_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _geed =_bdad (_bbbf ,_adcde ,_adcde ,_fgc +1,-1,_bceg ,&_caee );_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_caee .Min .X ,_caee .Max .X =_adcde ,_adcde ;_caee .Min .Y ,_caee .Max .Y =_fgc ,_fgc ;var (_gbgfa *fillSegment ;_aagae int ;);for _bbbf .Len ()> 0{if _gbgfa ,_geed =_dgcd (_bbbf );_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"");};_fgc =_gbgfa ._bcec ;
for _adcde =_gbgfa ._cgdac -1;_adcde >=0&&_egad .GetPixel (_adcde ,_fgc );_adcde --{if _geed =_egad .SetPixel (_adcde ,_fgc ,0);_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _adcde >=_gbgfa ._cgdac -1{for {for _adcde ++;
_adcde <=_gbgfa ._ccca +1&&_adcde <=_bebce &&!_egad .GetPixel (_adcde ,_fgc );_adcde ++{};_aagae =_adcde ;if !(_adcde <=_gbgfa ._ccca +1&&_adcde <=_bebce ){break ;};for ;_adcde <=_bebce &&_egad .GetPixel (_adcde ,_fgc );_adcde ++{if _geed =_egad .SetPixel (_adcde ,_fgc ,0);
_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _geed =_bdad (_bbbf ,_aagae ,_adcde -1,_gbgfa ._bcec ,_gbgfa ._dbgde ,_bceg ,&_caee );_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _adcde > _gbgfa ._ccca {if _geed =_bdad (_bbbf ,_gbgfa ._ccca +1,_adcde -1,_gbgfa ._bcec ,-_gbgfa ._dbgde ,_bceg ,&_caee );_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_aagae =_adcde +1;if _aagae < _gbgfa ._cgdac {if _geed =_bdad (_bbbf ,_aagae ,_gbgfa ._cgdac -1,_gbgfa ._bcec ,-_gbgfa ._dbgde ,_bceg ,&_caee );_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_adcde =_gbgfa ._cgdac ;for {for ;_adcde <=_bebce &&_egad .GetPixel (_adcde ,_fgc );_adcde ++{if _geed =_egad .SetPixel (_adcde ,_fgc ,0);_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _geed =_bdad (_bbbf ,_aagae ,_adcde -1,_gbgfa ._bcec ,_gbgfa ._dbgde ,_bceg ,&_caee );
_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _adcde > _gbgfa ._ccca {if _geed =_bdad (_bbbf ,_gbgfa ._ccca +1,_adcde -1,_gbgfa ._bcec ,-_gbgfa ._dbgde ,_bceg ,&_caee );_geed !=nil {return nil ,_df .Wrap (_geed ,_cceef ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _adcde ++;_adcde <=_gbgfa ._ccca +1&&_adcde <=_bebce &&!_egad .GetPixel (_adcde ,_fgc );_adcde ++{};_aagae =_adcde ;if !(_adcde <=_gbgfa ._ccca +1&&_adcde <=_bebce ){break ;};};};_caee .Max .X ++;_caee .Max .Y ++;return &_caee ,nil ;};func _cbca (_dgae ,_fcfa *Bitmap ,_caeb ,_ecf int )(*Bitmap ,error ){const _dgagg ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _fcfa ==nil {return nil ,_df .Error (_dgagg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _caeb < 1||_ecf < 1{return nil ,_df .Error (_dgagg ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _caeb ==1&&_ecf ==1{return _fcfa .Copy (),nil ;};if _caeb ==1||_ecf ==1{_eca :=SelCreateBrick (_ecf ,_caeb ,_ecf /2,_caeb /2,SelHit );var _gcbcb error ;_dgae ,_gcbcb =_gadb (_dgae ,_fcfa ,_eca );if _gcbcb !=nil {return nil ,_df .Wrap (_gcbcb ,_dgagg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dgae ,nil ;};_bfcbf :=SelCreateBrick (1,_caeb ,0,_caeb /2,SelHit );_ddgac :=SelCreateBrick (_ecf ,1,_ecf /2,0,SelHit );_ddad ,_efee :=_bbbb (nil ,_fcfa ,_bfcbf );if _efee !=nil {return nil ,_df .Wrap (_efee ,_dgagg ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _dgae ,_efee =_bbbb (_dgae ,_ddad ,_ddgac );_efee !=nil {return nil ,_df .Wrap (_efee ,_dgagg ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_efee =_cdbe (_ddad ,_dgae ,_bfcbf );_efee !=nil {return nil ,_df .Wrap (_efee ,_dgagg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_efee =_cdbe (_dgae ,_ddad ,_ddgac );_efee !=nil {return nil ,_df .Wrap (_efee ,_dgagg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _dgae ,nil ;};func _ebeg (_gbab *Bitmap ,_faadg ,_fedg ,_bbdg ,_dfac int ,_ebdb RasterOperator ,_faga *Bitmap ,_cbbb ,_gbdb int )error {const _bcgd ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _gbab ==nil {return _df .Error (_bcgd ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _ebdb ==PixDst {return nil ;};switch _ebdb {case PixClr ,PixSet ,PixNotDst :_ebda (_gbab ,_faadg ,_fedg ,_bbdg ,_dfac ,_ebdb );
return nil ;};if _faga ==nil {_ag .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _df .Error (_bcgd ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _bade :=_bgfc (_gbab ,_faadg ,_fedg ,_bbdg ,_dfac ,_ebdb ,_faga ,_cbbb ,_gbdb );_bade !=nil {return _df .Wrap (_bade ,_bcgd ,"");};
return nil ;};func (_dcaba *Bitmap )setBit (_eed int ){_dcaba .Data [(_eed >>3)]|=0x80>>uint (_eed &7)};func _gadb (_eabg ,_eff *Bitmap ,_bcad *Selection )(*Bitmap ,error ){const _gcaf ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _gecfb error ;
if _eabg ,_gecfb =_edcc (_eabg ,_eff ,_bcad );_gecfb !=nil {return nil ,_gecfb ;};_afde ,_gecfb :=_bbbb (nil ,_eff ,_bcad );if _gecfb !=nil {return nil ,_df .Wrap (_gecfb ,_gcaf ,"");};if _ ,_gecfb =_cdbe (_eabg ,_afde ,_bcad );_gecfb !=nil {return nil ,_df .Wrap (_gecfb ,_gcaf ,"");
};return _eabg ,nil ;};func (_dfd *Bitmap )Equals (s *Bitmap )bool {if len (_dfd .Data )!=len (s .Data )||_dfd .Width !=s .Width ||_dfd .Height !=s .Height {return false ;};for _gae :=0;_gae < _dfd .Height ;_gae ++{_dge :=_gae *_dfd .RowStride ;for _bee :=0;
_bee < _dfd .RowStride ;_bee ++{if _dfd .Data [_dge +_bee ]!=s .Data [_dge +_bee ]{return false ;};};};return true ;};func (_bdg *Bitmap )resizeImageData (_cdc *Bitmap )error {if _cdc ==nil {return _df .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bdg .SizesEqual (_cdc ){return nil ;};_bdg .Data =make ([]byte ,len (_cdc .Data ));_bdg .Width =_cdc .Width ;_bdg .Height =_cdc .Height ;_bdg .RowStride =_cdc .RowStride ;return nil ;};func (_beeba *Bitmap )countPixels ()int {var (_dace int ;_bega uint8 ;
_efg byte ;_bgda int ;);_defc :=_beeba .RowStride ;_dfa :=uint (_beeba .Width &0x07);if _dfa !=0{_bega =uint8 ((0xff<<(8-_dfa ))&0xff);_defc --;};for _fccf :=0;_fccf < _beeba .Height ;_fccf ++{for _bgda =0;_bgda < _defc ;_bgda ++{_efg =_beeba .Data [_fccf *_beeba .RowStride +_bgda ];
_dace +=int (_bddf [_efg ]);};if _dfa !=0{_dace +=int (_bddf [_beeba .Data [_fccf *_beeba .RowStride +_bgda ]&_bega ]);};};return _dace ;};func init (){const _fcda ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_facf =New (50,40);var _efdbc error ;_facf ,_efdbc =_facf .AddBorder (2,1);if _efdbc !=nil {panic (_df .Wrap (_efdbc ,_fcda ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_cebc ,_efdbc =NewWithData (50,22,_dgga );if _efdbc !=nil {panic (_df .Wrap (_efdbc ,_fcda ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func _fbc (_ced ,_gede *Bitmap )(*Bitmap ,error ){if _gede ==nil {return nil ,_df .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gede ==_ced {return _ced ,nil ;
};if _ced ==nil {_ced =_gede .createTemplate ();copy (_ced .Data ,_gede .Data );return _ced ,nil ;};_ccee :=_ced .resizeImageData (_gede );if _ccee !=nil {return nil ,_df .Wrap (_ccee ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_ced .Text =_gede .Text ;copy (_ced .Data ,_gede .Data );return _ced ,nil ;};func (_ead *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _ead .Copy (),nil ;};_eeg ,_eagb :=_ead .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _eagb !=nil {return nil ,_df .Wrap (_eagb ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _eeg ,nil ;};func (_affg *Bitmaps )SortByHeight (){_fdbg :=(*byHeight )(_affg );_b .Sort (_fdbg )};func TstCSymbol (t *_a .T )*Bitmap {t .Helper ();
_agfeg :=New (6,6);_g .NoError (t ,_agfeg .SetPixel (1,0,1));_g .NoError (t ,_agfeg .SetPixel (2,0,1));_g .NoError (t ,_agfeg .SetPixel (3,0,1));_g .NoError (t ,_agfeg .SetPixel (4,0,1));_g .NoError (t ,_agfeg .SetPixel (0,1,1));_g .NoError (t ,_agfeg .SetPixel (5,1,1));
_g .NoError (t ,_agfeg .SetPixel (0,2,1));_g .NoError (t ,_agfeg .SetPixel (0,3,1));_g .NoError (t ,_agfeg .SetPixel (0,4,1));_g .NoError (t ,_agfeg .SetPixel (5,4,1));_g .NoError (t ,_agfeg .SetPixel (1,5,1));_g .NoError (t ,_agfeg .SetPixel (2,5,1));
_g .NoError (t ,_agfeg .SetPixel (3,5,1));_g .NoError (t ,_agfeg .SetPixel (4,5,1));return _agfeg ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _dfee (d ,s ,hSize ,vSize )};const (AsymmetricMorphBC BoundaryCondition =iota ;
SymmetricMorphBC ;);func (_fgg *Bitmap )nextOnPixelLow (_edfa ,_acfd ,_agfb ,_bgcc ,_dfe int )(_bdbe _ad .Point ,_gfc bool ,_gbdd error ){const _agg ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_ddbb int ;_daaa byte ;);_dffg :=_dfe *_agfb ;_bfcd :=_dffg +(_bgcc /8);if _daaa ,_gbdd =_fgg .GetByte (_bfcd );_gbdd !=nil {return _bdbe ,false ,_df .Wrap (_gbdd ,_agg ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _daaa !=0{_bab :=_bgcc -(_bgcc %8)+7;for _ddbb =_bgcc ;_ddbb <=_bab &&_ddbb < _edfa ;_ddbb ++{if _fgg .GetPixel (_ddbb ,_dfe ){_bdbe .X =_ddbb ;_bdbe .Y =_dfe ;return _bdbe ,true ,nil ;};};};_ebde :=(_bgcc /8)+1;_ddbb =8*_ebde ;var _fdd int ;for _bfcd =_dffg +_ebde ;
_ddbb < _edfa ;_bfcd ,_ddbb =_bfcd +1,_ddbb +8{if _daaa ,_gbdd =_fgg .GetByte (_bfcd );_gbdd !=nil {return _bdbe ,false ,_df .Wrap (_gbdd ,_agg ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};
if _daaa ==0{continue ;};for _fdd =0;_fdd < 8&&_ddbb < _edfa ;_fdd ,_ddbb =_fdd +1,_ddbb +1{if _fgg .GetPixel (_ddbb ,_dfe ){_bdbe .X =_ddbb ;_bdbe .Y =_dfe ;return _bdbe ,true ,nil ;};};};for _bbfb :=_dfe +1;_bbfb < _acfd ;_bbfb ++{_dffg =_bbfb *_agfb ;
for _bfcd ,_ddbb =_dffg ,0;_ddbb < _edfa ;_bfcd ,_ddbb =_bfcd +1,_ddbb +8{if _daaa ,_gbdd =_fgg .GetByte (_bfcd );_gbdd !=nil {return _bdbe ,false ,_df .Wrap (_gbdd ,_agg ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");
};if _daaa ==0{continue ;};for _fdd =0;_fdd < 8&&_ddbb < _edfa ;_fdd ,_ddbb =_fdd +1,_ddbb +1{if _fgg .GetPixel (_ddbb ,_bbfb ){_bdbe .X =_ddbb ;_bdbe .Y =_bbfb ;return _bdbe ,true ,nil ;};};};};return _bdbe ,false ,nil ;};func (_bca *Bitmap )SetPadBits (value int ){_bca .setPadBits (value )};
func (_ecga *Bitmaps )AddBitmap (bm *Bitmap ){_ecga .Values =append (_ecga .Values ,bm )};func TstImageBitmapInverseData ()[]byte {_cbced :=_cebc .Copy ();_cbced .InverseData ();return _cbced .Data ;};func (_adbc *Bitmap )nextOnPixel (_ddb ,_fceb int )(_fcea _ad .Point ,_ecgb bool ,_cgd error ){const _bdc ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_fcea ,_ecgb ,_cgd =_adbc .nextOnPixelLow (_adbc .Width ,_adbc .Height ,_adbc .RowStride ,_ddb ,_fceb );if _cgd !=nil {return _fcea ,false ,_df .Wrap (_cgd ,_bdc ,"");};return _fcea ,_ecgb ,nil ;};func (_efcd *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_efcd .Width ,Height :_efcd .Height ,RowStride :_efcd .RowStride ,Color :_efcd .Color ,Text :_efcd .Text ,BitmapNumber :_efcd .BitmapNumber ,Special :_efcd .Special ,Data :make ([]byte ,len (_efcd .Data ))};
};func (_fdb Points )YSorter ()func (_ebge ,_ggaf int )bool {return func (_dgee ,_ecgg int )bool {return _fdb [_dgee ].Y < _fdb [_ecgg ].Y };};type fillSegment struct{_cgdac int ;_ccca int ;_bcec int ;_dbgde int ;};func (_ebce *byHeight )Len ()int {return len (_ebce .Values )};
func _gbc (_dgc *Bitmap ,_ab *Bitmap ,_fdg int )(_aba error ){const _dbd ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _fdg {case 2:_aba =_bd (_dgc ,_ab );case 4:_aba =_gb (_dgc ,_ab );case 8:_aba =_aea (_dgc ,_ab );
default:return _df .Error (_dbd ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _aba !=nil {_aba =_df .Wrap (_aba ,_dbd ,"");
};return _aba ;};func _dabab (_ccdfd *Bitmap ,_adbb int )(*Bitmap ,error ){const _abceb ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _ccdfd ==nil {return nil ,_df .Error (_abceb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _adbb <=0{return nil ,_df .Error (_abceb ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _adbb ==1{_daea ,_ccgb :=_fbc (nil ,_ccdfd );if _ccgb !=nil {return nil ,_df .Wrap (_ccgb ,_abceb ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _daea ,nil ;};_dgge ,_bdaa :=_dcg (_ccdfd ,_adbb ,_adbb );if _bdaa !=nil {return nil ,_df .Wrap (_bdaa ,_abceb ,"");};return _dgge ,nil ;};func (_abab *Bitmap )ClipRectangle (box *_ad .Rectangle )(_agb *Bitmap ,_cgb *_ad .Rectangle ,_bed error ){const _eccb ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_df .Error (_eccb ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_aaf ,_aab :=_abab .Width ,_abab .Height ;_dced :=_ad .Rect (0,0,_aaf ,_aab );if !box .Overlaps (_dced ){return nil ,nil ,_df .Error (_eccb ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_gcce :=box .Intersect (_dced );_beff ,_dcad :=_gcce .Min .X ,_gcce .Min .Y ;_dafg ,_bge :=_gcce .Dx (),_gcce .Dy ();_agb =New (_dafg ,_bge );_agb .Text =_abab .Text ;if _bed =_agb .RasterOperation (0,0,_dafg ,_bge ,PixSrc ,_abab ,_beff ,_dcad );_bed !=nil {return nil ,nil ,_df .Wrap (_bed ,_eccb ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_cgb =&_gcce ;return _agb ,_cgb ,nil ;};func _bgfc (_aacfg *Bitmap ,_ecaac ,_cfga int ,_ggdc ,_gfgf int ,_gbgae RasterOperator ,_fgdbe *Bitmap ,_bbcgc ,_faff int )error {var _feba ,_gfad ,_gdbc ,_gbfe int ;if _ecaac < 0{_bbcgc -=_ecaac ;_ggdc +=_ecaac ;
_ecaac =0;};if _bbcgc < 0{_ecaac -=_bbcgc ;_ggdc +=_bbcgc ;_bbcgc =0;};_feba =_ecaac +_ggdc -_aacfg .Width ;if _feba > 0{_ggdc -=_feba ;};_gfad =_bbcgc +_ggdc -_fgdbe .Width ;if _gfad > 0{_ggdc -=_gfad ;};if _cfga < 0{_faff -=_cfga ;_gfgf +=_cfga ;_cfga =0;
};if _faff < 0{_cfga -=_faff ;_gfgf +=_faff ;_faff =0;};_gdbc =_cfga +_gfgf -_aacfg .Height ;if _gdbc > 0{_gfgf -=_gdbc ;};_gbfe =_faff +_gfgf -_fgdbe .Height ;if _gbfe > 0{_gfgf -=_gbfe ;};if _ggdc <=0||_gfgf <=0{return nil ;};var _bbfcf error ;switch {case _ecaac &7==0&&_bbcgc &7==0:_bbfcf =_daab (_aacfg ,_ecaac ,_cfga ,_ggdc ,_gfgf ,_gbgae ,_fgdbe ,_bbcgc ,_faff );
case _ecaac &7==_bbcgc &7:_bbfcf =_ebeae (_aacfg ,_ecaac ,_cfga ,_ggdc ,_gfgf ,_gbgae ,_fgdbe ,_bbcgc ,_faff );default:_bbfcf =_aece (_aacfg ,_ecaac ,_cfga ,_ggdc ,_gfgf ,_gbgae ,_fgdbe ,_bbcgc ,_faff );};if _bbfcf !=nil {return _df .Wrap (_bbfcf ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func _ggg (_ddbc ,_dbec *Bitmap ,_cfag ,_gggf ,_cegbg ,_bgef ,_acgc ,_gda ,_gdba ,_ebb int ,_ddgd CombinationOperator ,_bgca int )error {var _dcfa int ;_cagd :=func (){_dcfa ++;_cegbg +=_dbec .RowStride ;_bgef +=_ddbc .RowStride ;_acgc +=_ddbc .RowStride };
for _dcfa =_cfag ;_dcfa < _gggf ;_cagd (){var _fdeg uint16 ;_gbag :=_cegbg ;for _bbef :=_bgef ;_bbef <=_acgc ;_bbef ++{_deae ,_ccg :=_dbec .GetByte (_gbag );if _ccg !=nil {return _ccg ;};_ecd ,_ccg :=_ddbc .GetByte (_bbef );if _ccg !=nil {return _ccg ;
};_fdeg =(_fdeg |(uint16 (_ecd )&0xff))<<uint (_ebb );_ecd =byte (_fdeg >>8);if _ccg =_dbec .SetByte (_gbag ,_cgfgd (_deae ,_ecd ,_ddgd ));_ccg !=nil {return _ccg ;};_gbag ++;_fdeg <<=uint (_gdba );if _bbef ==_acgc {_ecd =byte (_fdeg >>(8-uint8 (_ebb )));
if _bgca !=0{_ecd =_aaff (uint (8+_gda ),_ecd );};_deae ,_ccg =_dbec .GetByte (_gbag );if _ccg !=nil {return _ccg ;};if _ccg =_dbec .SetByte (_gbag ,_cgfgd (_deae ,_ecd ,_ddgd ));_ccg !=nil {return _ccg ;};};};};return nil ;};func (_fggg *BitmapsArray )GetBox (i int )(*_ad .Rectangle ,error ){const _ffgg ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _fggg ==nil {return nil ,_df .Error (_ffgg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_fggg .Boxes )-1{return nil ,_df .Errorf (_ffgg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fggg .Boxes [i ],nil ;};func TstWriteSymbols (t *_a .T ,bms *Bitmaps ,src *Bitmap ){for _ecbd :=0;_ecbd < bms .Size ();_ecbd ++{_ebbe :=bms .Values [_ecbd ];_ccbc :=bms .Boxes [_ecbd ];_fbfb :=src .RasterOperation (_ccbc .Min .X ,_ccbc .Min .Y ,_ebbe .Width ,_ebbe .Height ,PixSrc ,_ebbe ,0,0);
_g .NoError (t ,_fbfb );};};