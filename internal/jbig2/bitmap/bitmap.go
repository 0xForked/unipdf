//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_dd "encoding/binary";_c "github.com/stretchr/testify/require";_fb "github.com/unidoc/unipdf/v3/common";_da "github.com/unidoc/unipdf/v3/internal/bitwise";_f "github.com/unidoc/unipdf/v3/internal/imageutil";_g "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_a "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ec "image";_df "math";_eg "sort";_ca "strings";_e "testing";);func (_gaeb *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _dccd ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_gaeb .Values )==0{return nil ,_a .Error (_dccd ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_cbdc :=&BitmapsArray {};_gaeb .SortByHeight ();_bgcc :=-1;_fbece :=-1;for _bgef :=0;_bgef < len (_gaeb .Values );
_bgef ++{_acde :=_gaeb .Values [_bgef ].Height ;if _acde > _bgcc {_bgcc =_acde ;_fbece ++;_cbdc .Values =append (_cbdc .Values ,&Bitmaps {});};_cbdc .Values [_fbece ].AddBitmap (_gaeb .Values [_bgef ]);};return _cbdc ,nil ;};func TstRSymbol (t *_e .T ,scale ...int )*Bitmap {_fecb ,_geabe :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});
_c .NoError (t ,_geabe );return TstGetScaledSymbol (t ,_fecb ,scale ...);};func (_ade *Bitmap )String ()string {var _dcgb ="\u000a";for _dba :=0;_dba < _ade .Height ;_dba ++{var _cbbb string ;for _dcdf :=0;_dcdf < _ade .Width ;_dcdf ++{_gfg :=_ade .GetPixel (_dcdf ,_dba );
if _gfg {_cbbb +="\u0031";}else {_cbbb +="\u0030";};};_dcgb +=_cbbb +"\u000a";};return _dcgb ;};func (_cef *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_cef .Width ,Height :_cef .Height ,RowStride :_cef .RowStride ,Color :_cef .Color ,Text :_cef .Text ,BitmapNumber :_cef .BitmapNumber ,Special :_cef .Special ,Data :make ([]byte ,len (_cef .Data ))};
};func TstFrameBitmapData ()[]byte {return _cafe .Data };func _ffce ()[]int {_fcff :=make ([]int ,256);_fcff [0]=0;_fcff [1]=7;var _fgacg int ;for _fgacg =2;_fgacg < 4;_fgacg ++{_fcff [_fgacg ]=_fcff [_fgacg -2]+6;};for _fgacg =4;_fgacg < 8;_fgacg ++{_fcff [_fgacg ]=_fcff [_fgacg -4]+5;
};for _fgacg =8;_fgacg < 16;_fgacg ++{_fcff [_fgacg ]=_fcff [_fgacg -8]+4;};for _fgacg =16;_fgacg < 32;_fgacg ++{_fcff [_fgacg ]=_fcff [_fgacg -16]+3;};for _fgacg =32;_fgacg < 64;_fgacg ++{_fcff [_fgacg ]=_fcff [_fgacg -32]+2;};for _fgacg =64;_fgacg < 128;
_fgacg ++{_fcff [_fgacg ]=_fcff [_fgacg -64]+1;};for _fgacg =128;_fgacg < 256;_fgacg ++{_fcff [_fgacg ]=_fcff [_fgacg -128];};return _fcff ;};func (_gff *Bitmap )nextOnPixelLow (_bbb ,_eba ,_ddcc ,_fcf ,_cebde int )(_cbeb _ec .Point ,_ggda bool ,_ggdb error ){const _dcf ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_bbd int ;_ffe byte ;);_eab :=_cebde *_ddcc ;_dbd :=_eab +(_fcf /8);if _ffe ,_ggdb =_gff .GetByte (_dbd );_ggdb !=nil {return _cbeb ,false ,_a .Wrap (_ggdb ,_dcf ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _ffe !=0{_cdfe :=_fcf -(_fcf %8)+7;for _bbd =_fcf ;_bbd <=_cdfe &&_bbd < _bbb ;_bbd ++{if _gff .GetPixel (_bbd ,_cebde ){_cbeb .X =_bbd ;_cbeb .Y =_cebde ;return _cbeb ,true ,nil ;};};};_gfa :=(_fcf /8)+1;_bbd =8*_gfa ;var _fgef int ;for _dbd =_eab +_gfa ;
_bbd < _bbb ;_dbd ,_bbd =_dbd +1,_bbd +8{if _ffe ,_ggdb =_gff .GetByte (_dbd );_ggdb !=nil {return _cbeb ,false ,_a .Wrap (_ggdb ,_dcf ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _ffe ==0{continue ;
};for _fgef =0;_fgef < 8&&_bbd < _bbb ;_fgef ,_bbd =_fgef +1,_bbd +1{if _gff .GetPixel (_bbd ,_cebde ){_cbeb .X =_bbd ;_cbeb .Y =_cebde ;return _cbeb ,true ,nil ;};};};for _faa :=_cebde +1;_faa < _eba ;_faa ++{_eab =_faa *_ddcc ;for _dbd ,_bbd =_eab ,0;
_bbd < _bbb ;_dbd ,_bbd =_dbd +1,_bbd +8{if _ffe ,_ggdb =_gff .GetByte (_dbd );_ggdb !=nil {return _cbeb ,false ,_a .Wrap (_ggdb ,_dcf ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _ffe ==0{continue ;};for _fgef =0;
_fgef < 8&&_bbd < _bbb ;_fgef ,_bbd =_fgef +1,_bbd +1{if _gff .GetPixel (_bbd ,_faa ){_cbeb .X =_bbd ;_cbeb .Y =_faa ;return _cbeb ,true ,nil ;};};};};return _cbeb ,false ,nil ;};func TstVSymbol (t *_e .T ,scale ...int )*Bitmap {_cbde ,_fbgfe :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});
_c .NoError (t ,_fbgfe );return TstGetScaledSymbol (t ,_cbde ,scale ...);};func (_dfgdd *BitmapsArray )GetBox (i int )(*_ec .Rectangle ,error ){const _bdab ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _dfgdd ==nil {return nil ,_a .Error (_bdab ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_dfgdd .Boxes )-1{return nil ,_a .Errorf (_bdab ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _dfgdd .Boxes [i ],nil ;};func _eggc (_becc *Bitmap ,_feca ...MorphProcess )(_adgd *Bitmap ,_gfgd error ){const _caac ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _becc ==nil {return nil ,_a .Error (_caac ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_feca )==0{return nil ,_a .Error (_caac ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _gfgd =_bead (_feca ...);
_gfgd !=nil {return nil ,_a .Wrap (_gfgd ,_caac ,"");};var _gbced ,_eaea ,_egbd int ;_adgd =_becc .Copy ();for _ ,_bbcd :=range _feca {switch _bbcd .Operation {case MopDilation :_gbced ,_eaea =_bbcd .getWidthHeight ();_adgd ,_gfgd =DilateBrick (nil ,_adgd ,_gbced ,_eaea );
if _gfgd !=nil {return nil ,_a .Wrap (_gfgd ,_caac ,"");};case MopErosion :_gbced ,_eaea =_bbcd .getWidthHeight ();_adgd ,_gfgd =_gbfd (nil ,_adgd ,_gbced ,_eaea );if _gfgd !=nil {return nil ,_a .Wrap (_gfgd ,_caac ,"");};case MopOpening :_gbced ,_eaea =_bbcd .getWidthHeight ();
_adgd ,_gfgd =_eegbg (nil ,_adgd ,_gbced ,_eaea );if _gfgd !=nil {return nil ,_a .Wrap (_gfgd ,_caac ,"");};case MopClosing :_gbced ,_eaea =_bbcd .getWidthHeight ();_adgd ,_gfgd =_aegbf (nil ,_adgd ,_gbced ,_eaea );if _gfgd !=nil {return nil ,_a .Wrap (_gfgd ,_caac ,"");
};case MopRankBinaryReduction :_adgd ,_gfgd =_eb (_adgd ,_bbcd .Arguments ...);if _gfgd !=nil {return nil ,_a .Wrap (_gfgd ,_caac ,"");};case MopReplicativeBinaryExpansion :_adgd ,_gfgd =_ebdb (_adgd ,_bbcd .Arguments [0]);if _gfgd !=nil {return nil ,_a .Wrap (_gfgd ,_caac ,"");
};case MopAddBorder :_egbd =_bbcd .Arguments [0];_adgd ,_gfgd =_adgd .AddBorder (_egbd ,0);if _gfgd !=nil {return nil ,_a .Wrap (_gfgd ,_caac ,"");};default:return nil ,_a .Error (_caac ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _egbd > 0{_adgd ,_gfgd =_adgd .RemoveBorder (_egbd );if _gfgd !=nil {return nil ,_a .Wrap (_gfgd ,_caac ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _adgd ,nil ;};type Point struct{X ,Y float32 ;};func _cefd (_bcd int )int {if _bcd < 0{return -_bcd ;
};return _bcd ;};func (_baf *Bitmap )GetByte (index int )(byte ,error ){if index > len (_baf .Data )-1||index < 0{return 0,_a .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _baf .Data [index ],nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gbb float64 ,_cebf error ){const _gfff ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_a .Error (_gfff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_a .Error (_gfff ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_a .Error (_gfff ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_gace ,_cecg :=bm1 .Width ,bm1 .Height ;_fbf ,_dbcd :=bm2 .Width ,bm2 .Height ;
_fcdb :=_cefd (_gace -_fbf );if _fcdb > maxDiffW {return 0,nil ;};_fcgg :=_cefd (_cecg -_dbcd );if _fcgg > maxDiffH {return 0,nil ;};var _beb ,_cbebf int ;if delX >=0{_beb =int (delX +0.5);}else {_beb =int (delX -0.5);};if delY >=0{_cbebf =int (delY +0.5);
}else {_cbebf =int (delY -0.5);};_bggd :=_gcaa (_cbebf ,0);_dgee :=_fbbd (_dbcd +_cbebf ,_cecg );_eeff :=bm1 .RowStride *_bggd ;_fbee :=bm2 .RowStride *(_bggd -_cbebf );_edgg :=_gcaa (_beb ,0);_edge :=_fbbd (_fbf +_beb ,_gace );_acb :=bm2 .RowStride ;var _eeac ,_affb int ;
if _beb >=8{_eeac =_beb >>3;_eeff +=_eeac ;_edgg -=_eeac <<3;_edge -=_eeac <<3;_beb &=7;}else if _beb <=-8{_affb =-((_beb +7)>>3);_fbee +=_affb ;_acb -=_affb ;_beb +=_affb <<3;};if _edgg >=_edge ||_bggd >=_dgee {return 0,nil ;};_gbe :=(_edge +7)>>3;var (_aege ,_bcee ,_cgae byte ;
_fbce ,_ebcd ,_gad int ;);switch {case _beb ==0:for _gad =_bggd ;_gad < _dgee ;_gad ,_eeff ,_fbee =_gad +1,_eeff +bm1 .RowStride ,_fbee +bm2 .RowStride {for _ebcd =0;_ebcd < _gbe ;_ebcd ++{_cgae =bm1 .Data [_eeff +_ebcd ]&bm2 .Data [_fbee +_ebcd ];_fbce +=tab [_cgae ];
};};case _beb > 0:if _acb < _gbe {for _gad =_bggd ;_gad < _dgee ;_gad ,_eeff ,_fbee =_gad +1,_eeff +bm1 .RowStride ,_fbee +bm2 .RowStride {_aege ,_bcee =bm1 .Data [_eeff ],bm2 .Data [_fbee ]>>uint (_beb );_cgae =_aege &_bcee ;_fbce +=tab [_cgae ];for _ebcd =1;
_ebcd < _acb ;_ebcd ++{_aege ,_bcee =bm1 .Data [_eeff +_ebcd ],(bm2 .Data [_fbee +_ebcd ]>>uint (_beb ))|(bm2 .Data [_fbee +_ebcd -1]<<uint (8-_beb ));_cgae =_aege &_bcee ;_fbce +=tab [_cgae ];};_aege =bm1 .Data [_eeff +_ebcd ];_bcee =bm2 .Data [_fbee +_ebcd -1]<<uint (8-_beb );
_cgae =_aege &_bcee ;_fbce +=tab [_cgae ];};}else {for _gad =_bggd ;_gad < _dgee ;_gad ,_eeff ,_fbee =_gad +1,_eeff +bm1 .RowStride ,_fbee +bm2 .RowStride {_aege ,_bcee =bm1 .Data [_eeff ],bm2 .Data [_fbee ]>>uint (_beb );_cgae =_aege &_bcee ;_fbce +=tab [_cgae ];
for _ebcd =1;_ebcd < _gbe ;_ebcd ++{_aege =bm1 .Data [_eeff +_ebcd ];_bcee =(bm2 .Data [_fbee +_ebcd ]>>uint (_beb ))|(bm2 .Data [_fbee +_ebcd -1]<<uint (8-_beb ));_cgae =_aege &_bcee ;_fbce +=tab [_cgae ];};};};default:if _gbe < _acb {for _gad =_bggd ;
_gad < _dgee ;_gad ,_eeff ,_fbee =_gad +1,_eeff +bm1 .RowStride ,_fbee +bm2 .RowStride {for _ebcd =0;_ebcd < _gbe ;_ebcd ++{_aege =bm1 .Data [_eeff +_ebcd ];_bcee =bm2 .Data [_fbee +_ebcd ]<<uint (-_beb );_bcee |=bm2 .Data [_fbee +_ebcd +1]>>uint (8+_beb );
_cgae =_aege &_bcee ;_fbce +=tab [_cgae ];};};}else {for _gad =_bggd ;_gad < _dgee ;_gad ,_eeff ,_fbee =_gad +1,_eeff +bm1 .RowStride ,_fbee +bm2 .RowStride {for _ebcd =0;_ebcd < _gbe -1;_ebcd ++{_aege =bm1 .Data [_eeff +_ebcd ];_bcee =bm2 .Data [_fbee +_ebcd ]<<uint (-_beb );
_bcee |=bm2 .Data [_fbee +_ebcd +1]>>uint (8+_beb );_cgae =_aege &_bcee ;_fbce +=tab [_cgae ];};_aege =bm1 .Data [_eeff +_ebcd ];_bcee =bm2 .Data [_fbee +_ebcd ]<<uint (-_beb );_cgae =_aege &_bcee ;_fbce +=tab [_cgae ];};};};_gbb =float64 (_fbce )*float64 (_fbce )/(float64 (area1 )*float64 (area2 ));
return _gbb ,nil ;};func ClipBoxToRectangle (box *_ec .Rectangle ,wi ,hi int )(_ebcca *_ec .Rectangle ,_fage error ){const _gcfb ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_a .Error (_gcfb ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_a .Error (_gcfb ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_afbe :=*box ;
_ebcca =&_afbe ;if _ebcca .Min .X < 0{_ebcca .Max .X +=_ebcca .Min .X ;_ebcca .Min .X =0;};if _ebcca .Min .Y < 0{_ebcca .Max .Y +=_ebcca .Min .Y ;_ebcca .Min .Y =0;};if _ebcca .Max .X > wi {_ebcca .Max .X =wi ;};if _ebcca .Max .Y > hi {_ebcca .Max .Y =hi ;
};return _ebcca ,nil ;};func (_cbdg *Bitmap )thresholdPixelSum (_adfg int )bool {var (_gacb int ;_dddg uint8 ;_bgag byte ;_adda int ;);_aagg :=_cbdg .RowStride ;_acd :=uint (_cbdg .Width &0x07);if _acd !=0{_dddg =uint8 ((0xff<<(8-_acd ))&0xff);_aagg --;
};for _dfgf :=0;_dfgf < _cbdg .Height ;_dfgf ++{for _adda =0;_adda < _aagg ;_adda ++{_bgag =_cbdg .Data [_dfgf *_cbdg .RowStride +_adda ];_gacb +=int (_cebb [_bgag ]);};if _acd !=0{_bgag =_cbdg .Data [_dfgf *_cbdg .RowStride +_adda ]&_dddg ;_gacb +=int (_cebb [_bgag ]);
};if _gacb > _adfg {return true ;};};return false ;};func TstWriteSymbols (t *_e .T ,bms *Bitmaps ,src *Bitmap ){for _gbef :=0;_gbef < bms .Size ();_gbef ++{_efea :=bms .Values [_gbef ];_ebea :=bms .Boxes [_gbef ];_fdga :=src .RasterOperation (_ebea .Min .X ,_ebea .Min .Y ,_efea .Width ,_efea .Height ,PixSrc ,_efea ,0,0);
_c .NoError (t ,_fdga );};};func init (){for _dgbe :=0;_dgbe < 256;_dgbe ++{_cebb [_dgbe ]=uint8 (_dgbe &0x1)+(uint8 (_dgbe >>1)&0x1)+(uint8 (_dgbe >>2)&0x1)+(uint8 (_dgbe >>3)&0x1)+(uint8 (_dgbe >>4)&0x1)+(uint8 (_dgbe >>5)&0x1)+(uint8 (_dgbe >>6)&0x1)+(uint8 (_dgbe >>7)&0x1);
};};func (_ceca *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _ceca .removeBorderGeneral (left ,right ,top ,bot );};func (_abee *Boxes )Add (box *_ec .Rectangle )error {if _abee ==nil {return _a .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_abee =append (*_abee ,box );return nil ;};func (_gcg *Bitmap )setBit (_dgf int ){_gcg .Data [(_dgf >>3)]|=0x80>>uint (_dgf &7)};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _bcab ,_gfdb int ;_gceea :=src .RowStride -1;
if x < 0{_gfdb =-x ;x =0;}else if x +src .Width > dst .Width {_gceea -=src .Width +x -dst .Width ;};if y < 0{_bcab =-y ;y =0;_gfdb +=src .RowStride ;_gceea +=src .RowStride ;}else if y +src .Height > dst .Height {_bcab =src .Height +y -dst .Height ;};var (_bcg int ;
_gfcb error ;);_faef :=x &0x07;_geacb :=8-_faef ;_fee :=src .Width &0x07;_geef :=_geacb -_fee ;_bfe :=_geacb &0x07!=0;_bcbg :=src .Width <=((_gceea -_gfdb )<<3)+_geacb ;_abac :=dst .GetByteIndex (x ,y );_fggd :=_bcab +dst .Height ;if src .Height > _fggd {_bcg =_fggd ;
}else {_bcg =src .Height ;};switch {case !_bfe :_gfcb =_aega (src ,dst ,_bcab ,_bcg ,_abac ,_gfdb ,_gceea ,op );case _bcbg :_gfcb =_gaaed (src ,dst ,_bcab ,_bcg ,_abac ,_gfdb ,_gceea ,_geef ,_faef ,_geacb ,op );default:_gfcb =_egg (src ,dst ,_bcab ,_bcg ,_abac ,_gfdb ,_gceea ,_geef ,_faef ,_geacb ,op ,_fee );
};return _gfcb ;};func (_gddb *Bitmap )connComponentsBB (_ccc int )(_dgdd *Boxes ,_becg error ){const _dccc ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _ccc !=4&&_ccc !=8{return nil ,_a .Error (_dccc ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _gddb .Zero (){return &Boxes {},nil ;};_gddb .setPadBits (0);_cgfa ,_becg :=_cee (nil ,_gddb );if _becg !=nil {return nil ,_a .Wrap (_becg ,_dccc ,"\u0062\u006d\u0031");};_bacfa :=&_g .Stack {};_bacfa .Aux =&_g .Stack {};_dgdd =&Boxes {};var (_ecad ,_feeaf int ;
_adbg _ec .Point ;_cbf bool ;_bdba *_ec .Rectangle ;);for {if _adbg ,_cbf ,_becg =_cgfa .nextOnPixel (_feeaf ,_ecad );_becg !=nil {return nil ,_a .Wrap (_becg ,_dccc ,"");};if !_cbf {break ;};if _bdba ,_becg =_abbc (_cgfa ,_bacfa ,_adbg .X ,_adbg .Y ,_ccc );
_becg !=nil {return nil ,_a .Wrap (_becg ,_dccc ,"");};if _becg =_dgdd .Add (_bdba );_becg !=nil {return nil ,_a .Wrap (_becg ,_dccc ,"");};_feeaf =_adbg .X ;_ecad =_adbg .Y ;};return _dgdd ,nil ;};func _gbfd (_begf ,_cgdb *Bitmap ,_dadd ,_egcg int )(*Bitmap ,error ){const _cbgd ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _cgdb ==nil {return nil ,_a .Error (_cbgd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dadd < 1||_egcg < 1{return nil ,_a .Error (_cbgd ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _dadd ==1&&_egcg ==1{_gbec ,_def :=_cee (_begf ,_cgdb );if _def !=nil {return nil ,_a .Wrap (_def ,_cbgd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _gbec ,nil ;
};if _dadd ==1||_egcg ==1{_fffa :=SelCreateBrick (_egcg ,_dadd ,_egcg /2,_dadd /2,SelHit );_ecca ,_bbba :=_ddgb (_begf ,_cgdb ,_fffa );if _bbba !=nil {return nil ,_a .Wrap (_bbba ,_cbgd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ecca ,nil ;};_fcbg :=SelCreateBrick (1,_dadd ,0,_dadd /2,SelHit );_bfgd :=SelCreateBrick (_egcg ,1,_egcg /2,0,SelHit );_acg ,_eadg :=_ddgb (nil ,_cgdb ,_fcbg );if _eadg !=nil {return nil ,_a .Wrap (_eadg ,_cbgd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_begf ,_eadg =_ddgb (_begf ,_acg ,_bfgd );if _eadg !=nil {return nil ,_a .Wrap (_eadg ,_cbgd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _begf ,nil ;};func TstImageBitmap ()*Bitmap {return _feefe .Copy ()};const (AsymmetricMorphBC BoundaryCondition =iota ;
SymmetricMorphBC ;);func _cecd (_eac *Bitmap )(_adgee *Bitmap ,_ggdd int ,_cdfee error ){const _bfdc ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _eac ==nil {return nil ,0,_a .Errorf (_bfdc ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};var _ecbd ,_ebda *Bitmap ;if _ecbd ,_cdfee =_cee (nil ,_eac );_cdfee !=nil {return nil ,0,_a .Wrap (_cdfee ,_bfdc ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_fdae [13]int ;_ebbdc ,_begg int ;);_eggaa :=12;_bagfa :=_g .NewNumSlice (_eggaa +1);
_fea :=_g .NewNumSlice (_eggaa +1);var _dgbb *Boxes ;for _bagc :=0;_bagc <=_eggaa ;_bagc ++{if _bagc ==0{if _ebda ,_cdfee =_cee (nil ,_ecbd );_cdfee !=nil {return nil ,0,_a .Wrap (_cdfee ,_bfdc ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _ebda ,_cdfee =_eggc (_ecbd ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});
_cdfee !=nil {return nil ,0,_a .Wrap (_cdfee ,_bfdc ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _dgbb ,_cdfee =_ebda .connComponentsBB (4);_cdfee !=nil {return nil ,0,_a .Wrap (_cdfee ,_bfdc ,"");};_fdae [_bagc ]=len (*_dgbb );
_bagfa .AddInt (_fdae [_bagc ]);switch _bagc {case 0:_ebbdc =_fdae [0];default:_begg =_fdae [_bagc -1]-_fdae [_bagc ];_fea .AddInt (_begg );};_ecbd =_ebda ;};_bgbce :=true ;_egbg :=2;var _caf ,_deab int ;for _bgba :=1;_bgba < len (*_fea );_bgba ++{if _caf ,_cdfee =_bagfa .GetInt (_bgba );
_cdfee !=nil {return nil ,0,_a .Wrap (_cdfee ,_bfdc ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _bgbce &&_caf < int (0.3*float32 (_ebbdc )){_egbg =_bgba +1;_bgbce =false ;
};if _begg ,_cdfee =_fea .GetInt (_bgba );_cdfee !=nil {return nil ,0,_a .Wrap (_cdfee ,_bfdc ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _begg > _deab {_deab =_begg ;};};_dffee :=_eac .XResolution ;if _dffee ==0{_dffee =150;
};if _dffee > 110{_egbg ++;};if _egbg < 2{_fb .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_egbg =2;};_ggdd =_egbg +1;if _adgee ,_cdfee =_cecb (nil ,_eac ,_egbg +1,1);_cdfee !=nil {return nil ,0,_a .Wrap (_cdfee ,_bfdc ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _adgee ,_ggdd ,nil ;
};func _abacf (_cecdf ,_dbbd ,_dead *Bitmap ,_ecade int )(*Bitmap ,error ){const _dbbc ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _dbbd ==nil {return nil ,_a .Error (_dbbc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _dead ==nil {return nil ,_a .Error (_dbbc ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ecade !=4&&_ecade !=8{return nil ,_a .Error (_dbbc ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _bbae error ;_cecdf ,_bbae =_cee (_cecdf ,_dbbd );if _bbae !=nil {return nil ,_a .Wrap (_bbae ,_dbbc ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_cdae :=_dbbd .createTemplate ();_dead .setPadBits (0);
for _aegce :=0;_aegce < _cdfad ;_aegce ++{_cdae ,_bbae =_cee (_cdae ,_cecdf );if _bbae !=nil {return nil ,_a .Wrapf (_bbae ,_dbbc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_aegce );};if _bbae =_beeb (_cecdf ,_dead ,_ecade );
_bbae !=nil {return nil ,_a .Wrapf (_bbae ,_dbbc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_aegce );};if _cdae .Equals (_cecdf ){break ;};};return _cecdf ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _bfg ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_adde :=_dgd (width ,height );_adde .Data =data ;if len (data )< height *_adde .RowStride {return nil ,_a .Errorf (_bfg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_adde .RowStride );
};return _adde ,nil ;};func (_cga *Bitmap )SetPixel (x ,y int ,pixel byte )error {_gcb :=_cga .GetByteIndex (x ,y );if _gcb > len (_cga .Data )-1{return _a .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_gcb );
};_ebb :=_cga .GetBitOffset (x );_cdbf :=uint (7-_ebb );_gfdd :=_cga .Data [_gcb ];var _egc byte ;if pixel ==1{_egc =_gfdd |(pixel &0x01<<_cdbf );}else {_egc =_gfdd &^(1<<_cdbf );};_cga .Data [_gcb ]=_egc ;return nil ;};func (_bbeb *Bitmap )clipRectangle (_abae ,_bgcfg *_ec .Rectangle )(_dbad *Bitmap ,_bbf error ){const _geccf ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _abae ==nil {return nil ,_a .Error (_geccf ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_gfgg ,_acc :=_bbeb .Width ,_bbeb .Height ;_ecbf ,_bbf :=ClipBoxToRectangle (_abae ,_gfgg ,_acc );if _bbf !=nil {_fb .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_bbf );
return nil ,nil ;};_fff ,_daae :=_ecbf .Min .X ,_ecbf .Min .Y ;_bgbd ,_gaaa :=_ecbf .Max .X -_ecbf .Min .X ,_ecbf .Max .Y -_ecbf .Min .Y ;_dbad =New (_bgbd ,_gaaa );_dbad .Text =_bbeb .Text ;if _bbf =_dbad .RasterOperation (0,0,_bgbd ,_gaaa ,PixSrc ,_bbeb ,_fff ,_daae );
_bbf !=nil {return nil ,_a .Wrap (_bbf ,_geccf ,"");};if _bgcfg !=nil {*_bgcfg =*_ecbf ;};return _dbad ,nil ;};func _gg (_gd ,_gc *Bitmap )(_db error ){const _ae ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_de :=_gc .RowStride ;_b :=_gd .RowStride ;var (_gb byte ;_ef uint16 ;_cae ,_bc ,_ff ,_caed ,_fd int ;);for _ff =0;_ff < _gc .Height ;_ff ++{_cae =_ff *_de ;_bc =2*_ff *_b ;for _caed =0;_caed < _de ;_caed ++{_gb =_gc .Data [_cae +_caed ];_ef =_aggf [_gb ];
_fd =_bc +_caed *2;if _gd .RowStride !=_gc .RowStride *2&&(_caed +1)*2> _gd .RowStride {_db =_gd .SetByte (_fd ,byte (_ef >>8));}else {_db =_gd .setTwoBytes (_fd ,_ef );};if _db !=nil {return _a .Wrap (_db ,_ae ,"");};};for _caed =0;_caed < _b ;_caed ++{_fd =_bc +_b +_caed ;
_gb =_gd .Data [_bc +_caed ];if _db =_gd .SetByte (_fd ,_gb );_db !=nil {return _a .Wrapf (_db ,_ae ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_bc +_caed ,_bc +_b +_caed );
};};};return nil ;};func (_cdcc *ClassedPoints )xSortFunction ()func (_dagb int ,_gfeb int )bool {return func (_gfca ,_bgbg int )bool {return _cdcc .XAtIndex (_gfca )< _cdcc .XAtIndex (_bgbg )};};func (_caaf *ClassedPoints )YAtIndex (i int )float32 {return (*_caaf .Points )[_caaf .IntSlice [i ]].Y };
func _dcca ()(_bcac [256]uint32 ){for _efdb :=0;_efdb < 256;_efdb ++{if _efdb &0x01!=0{_bcac [_efdb ]|=0xf;};if _efdb &0x02!=0{_bcac [_efdb ]|=0xf0;};if _efdb &0x04!=0{_bcac [_efdb ]|=0xf00;};if _efdb &0x08!=0{_bcac [_efdb ]|=0xf000;};if _efdb &0x10!=0{_bcac [_efdb ]|=0xf0000;
};if _efdb &0x20!=0{_bcac [_efdb ]|=0xf00000;};if _efdb &0x40!=0{_bcac [_efdb ]|=0xf000000;};if _efdb &0x80!=0{_bcac [_efdb ]|=0xf0000000;};};return _bcac ;};func _ceag (_fgaad ,_dbgd *Bitmap ,_acad ,_gcegca ,_eaf uint ,_baga ,_cddg int ,_faeg bool ,_bgec ,_acea int )error {for _addd :=_baga ;
_addd < _cddg ;_addd ++{if _bgec +1< len (_fgaad .Data ){_dgef :=_addd +1==_cddg ;_aada ,_adfa :=_fgaad .GetByte (_bgec );if _adfa !=nil {return _adfa ;};_bgec ++;_aada <<=_acad ;_cbebb ,_adfa :=_fgaad .GetByte (_bgec );if _adfa !=nil {return _adfa ;};
_cbebb >>=_gcegca ;_ggdbg :=_aada |_cbebb ;if _dgef &&!_faeg {_ggdbg =_eebb (_eaf ,_ggdbg );};_adfa =_dbgd .SetByte (_acea ,_ggdbg );if _adfa !=nil {return _adfa ;};_acea ++;if _dgef &&_faeg {_gagd ,_gdg :=_fgaad .GetByte (_bgec );if _gdg !=nil {return _gdg ;
};_gagd <<=_acad ;_ggdbg =_eebb (_eaf ,_gagd );if _gdg =_dbgd .SetByte (_acea ,_ggdbg );_gdg !=nil {return _gdg ;};};continue ;};_cdbc ,_aadaa :=_fgaad .GetByte (_bgec );if _aadaa !=nil {_fb .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_bgec ,_aadaa );
return _aadaa ;};_cdbc <<=_acad ;_bgec ++;_aadaa =_dbgd .SetByte (_acea ,_cdbc );if _aadaa !=nil {return _aadaa ;};_acea ++;};return nil ;};func (_dabb *Bitmap )GetVanillaData ()[]byte {if _dabb .Color ==Chocolate {_dabb .inverseData ();};return _dabb .Data ;
};func _ddgb (_bbde ,_gcc *Bitmap ,_cfac *Selection )(*Bitmap ,error ){const _afba ="\u0065\u0072\u006fd\u0065";var (_cdgg error ;_acfc *Bitmap ;);_bbde ,_cdgg =_bebb (_bbde ,_gcc ,_cfac ,&_acfc );if _cdgg !=nil {return nil ,_a .Wrap (_cdgg ,_afba ,"");
};if _cdgg =_bbde .setAll ();_cdgg !=nil {return nil ,_a .Wrap (_cdgg ,_afba ,"");};var _egae SelectionValue ;for _afbcf :=0;_afbcf < _cfac .Height ;_afbcf ++{for _gefe :=0;_gefe < _cfac .Width ;_gefe ++{_egae =_cfac .Data [_afbcf ][_gefe ];if _egae ==SelHit {_cdgg =_caacf (_bbde ,_cfac .Cx -_gefe ,_cfac .Cy -_afbcf ,_gcc .Width ,_gcc .Height ,PixSrcAndDst ,_acfc ,0,0);
if _cdgg !=nil {return nil ,_a .Wrap (_cdgg ,_afba ,"");};};};};if MorphBC ==SymmetricMorphBC {return _bbde ,nil ;};_adad ,_bggc ,_fbgef ,_ddde :=_cfac .findMaxTranslations ();if _adad > 0{if _cdgg =_bbde .RasterOperation (0,0,_adad ,_gcc .Height ,PixClr ,nil ,0,0);
_cdgg !=nil {return nil ,_a .Wrap (_cdgg ,_afba ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _fbgef > 0{if _cdgg =_bbde .RasterOperation (_gcc .Width -_fbgef ,0,_fbgef ,_gcc .Height ,PixClr ,nil ,0,0);_cdgg !=nil {return nil ,_a .Wrap (_cdgg ,_afba ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _bggc > 0{if _cdgg =_bbde .RasterOperation (0,0,_gcc .Width ,_bggc ,PixClr ,nil ,0,0);_cdgg !=nil {return nil ,_a .Wrap (_cdgg ,_afba ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _ddde > 0{if _cdgg =_bbde .RasterOperation (0,_gcc .Height -_ddde ,_gcc .Width ,_ddde ,PixClr ,nil ,0,0);
_cdgg !=nil {return nil ,_a .Wrap (_cdgg ,_afba ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _bbde ,nil ;};func _beeb (_bfff *Bitmap ,_dcag *Bitmap ,_ddgbf int )(_gaea error ){const _gbdb ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_bacfd :=_fbbd (_bfff .Height ,_dcag .Height );_bbcbf :=_fbbd (_bfff .RowStride ,_dcag .RowStride );switch _ddgbf {case 4:_gaea =_abec (_bfff ,_dcag ,_bacfd ,_bbcbf );case 8:_gaea =_egfcd (_bfff ,_dcag ,_bacfd ,_bbcbf );default:return _a .Errorf (_gbdb ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_ddgbf );
};if _gaea !=nil {return _a .Wrap (_gaea ,_gbdb ,"");};return nil ;};type Color int ;func (_bcdc Points )XSorter ()func (_eabf ,_dbe int )bool {return func (_ffee ,_cgga int )bool {return _bcdc [_ffee ].X < _bcdc [_cgga ].X };};type byHeight Bitmaps ;type SelectionValue int ;
var (_aggf =_bgc ();_bba =_dcca ();_aadf =_aeb (););func (_bae *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_feb bool ,_baac error ){const _fbbe ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_accfa ();};_ebff :=_bae .Width >>3;_geeg :=_bae .Width &7;_eda :=byte (0xff<<uint (8-_geeg ));var (_edb ,_dcce ,_abg ,_cgg int ;_edcc byte ;);for _edb =0;_edb < _bae .Height ;_edb ++{_abg =_bae .RowStride *_edb ;for _dcce =0;_dcce < _ebff ;
_dcce ++{_edcc ,_baac =_bae .GetByte (_abg +_dcce );if _baac !=nil {return false ,_a .Wrap (_baac ,_fbbe ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_cgg +=tab8 [_edcc ];};if _geeg !=0{_edcc ,_baac =_bae .GetByte (_abg +_dcce );if _baac !=nil {return false ,_a .Wrap (_baac ,_fbbe ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_edcc &=_eda ;_cgg +=tab8 [_edcc ];};if _cgg > thresh {return true ,nil ;};};return _feb ,nil ;};func (_bgbaac *Selection )setOrigin (_cafbd ,_dbba int ){_bgbaac .Cy ,_bgbaac .Cx =_cafbd ,_dbba };type CombinationOperator int ;func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _ecfg (d ,s ,hSize ,vSize )};
func _acce (_fdf *Bitmap ,_cgdab *Bitmap ,_caa *Selection )(*Bitmap ,error ){var (_baae *Bitmap ;_dbdce error ;);_fdf ,_dbdce =_bebb (_fdf ,_cgdab ,_caa ,&_baae );if _dbdce !=nil {return nil ,_dbdce ;};if _dbdce =_fdf .clearAll ();_dbdce !=nil {return nil ,_dbdce ;
};var _bfad SelectionValue ;for _fegg :=0;_fegg < _caa .Height ;_fegg ++{for _fbfc :=0;_fbfc < _caa .Width ;_fbfc ++{_bfad =_caa .Data [_fegg ][_fbfc ];if _bfad ==SelHit {if _dbdce =_fdf .RasterOperation (_fbfc -_caa .Cx ,_fegg -_caa .Cy ,_cgdab .Width ,_cgdab .Height ,PixSrcOrDst ,_baae ,0,0);
_dbdce !=nil {return nil ,_dbdce ;};};};};return _fdf ,nil ;};func (_dgedc *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_abcb *Bitmaps ,_fdca error ){const _cebba ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _dgedc ==nil {return nil ,_a .Error (_cebba ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_a .Errorf (_cebba ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_a .Errorf (_cebba ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_aaaeb ,_fdca :=_dgedc .makeSizeIndicator (width ,height ,tp ,relation );if _fdca !=nil {return nil ,_a .Wrap (_fdca ,_cebba ,"");};_abcb ,_fdca =_dgedc .selectByIndicator (_aaaeb );if _fdca !=nil {return nil ,_a .Wrap (_fdca ,_cebba ,"");};return _abcb ,nil ;
};func (_gac *Bitmap )Copy ()*Bitmap {_fegbe :=make ([]byte ,len (_gac .Data ));copy (_fegbe ,_gac .Data );return &Bitmap {Width :_gac .Width ,Height :_gac .Height ,RowStride :_gac .RowStride ,Data :_fegbe ,Color :_gac .Color ,Text :_gac .Text ,BitmapNumber :_gac .BitmapNumber ,Special :_gac .Special };
};func (_gaaf *Boxes )makeSizeIndicator (_fbca ,_bed int ,_gbcb LocationFilter ,_ccdd SizeComparison )*_g .NumSlice {_bda :=&_g .NumSlice {};var _cfefc ,_ebcc ,_ddcef int ;for _ ,_bfa :=range *_gaaf {_cfefc =0;_ebcc ,_ddcef =_bfa .Dx (),_bfa .Dy ();switch _gbcb {case LocSelectWidth :if (_ccdd ==SizeSelectIfLT &&_ebcc < _fbca )||(_ccdd ==SizeSelectIfGT &&_ebcc > _fbca )||(_ccdd ==SizeSelectIfLTE &&_ebcc <=_fbca )||(_ccdd ==SizeSelectIfGTE &&_ebcc >=_fbca ){_cfefc =1;
};case LocSelectHeight :if (_ccdd ==SizeSelectIfLT &&_ddcef < _bed )||(_ccdd ==SizeSelectIfGT &&_ddcef > _bed )||(_ccdd ==SizeSelectIfLTE &&_ddcef <=_bed )||(_ccdd ==SizeSelectIfGTE &&_ddcef >=_bed ){_cfefc =1;};case LocSelectIfEither :if (_ccdd ==SizeSelectIfLT &&(_ddcef < _bed ||_ebcc < _fbca ))||(_ccdd ==SizeSelectIfGT &&(_ddcef > _bed ||_ebcc > _fbca ))||(_ccdd ==SizeSelectIfLTE &&(_ddcef <=_bed ||_ebcc <=_fbca ))||(_ccdd ==SizeSelectIfGTE &&(_ddcef >=_bed ||_ebcc >=_fbca )){_cfefc =1;
};case LocSelectIfBoth :if (_ccdd ==SizeSelectIfLT &&(_ddcef < _bed &&_ebcc < _fbca ))||(_ccdd ==SizeSelectIfGT &&(_ddcef > _bed &&_ebcc > _fbca ))||(_ccdd ==SizeSelectIfLTE &&(_ddcef <=_bed &&_ebcc <=_fbca ))||(_ccdd ==SizeSelectIfGTE &&(_ddcef >=_bed &&_ebcc >=_fbca )){_cfefc =1;
};};_bda .AddInt (_cfefc );};return _bda ;};func (_dgag *ClassedPoints )SortByX (){_dgag ._bbbd =_dgag .xSortFunction ();_eg .Sort (_dgag )};func (_dgcf Points )GetIntY (i int )(int ,error ){if i >=len (_dgcf ){return 0,_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dgcf [i ].Y ),nil ;};type shift int ;func _abbc (_bdged *Bitmap ,_dffeb *_g .Stack ,_dfec ,_adbgg ,_bffdb int )(_efcga *_ec .Rectangle ,_ebdc error ){const _ddfb ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _bdged ==nil {return nil ,_a .Error (_ddfb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dffeb ==nil {return nil ,_a .Error (_ddfb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _bffdb {case 4:if _efcga ,_ebdc =_aecg (_bdged ,_dffeb ,_dfec ,_adbgg );_ebdc !=nil {return nil ,_a .Wrap (_ebdc ,_ddfb ,"");};return _efcga ,nil ;case 8:if _efcga ,_ebdc =_acfed (_bdged ,_dffeb ,_dfec ,_adbgg );_ebdc !=nil {return nil ,_a .Wrap (_ebdc ,_ddfb ,"");
};return _efcga ,nil ;default:return nil ,_a .Errorf (_ddfb ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_bffdb );
};};func (_eaead *Bitmaps )selectByIndexes (_cgea []int )(*Bitmaps ,error ){_eafac :=&Bitmaps {};for _ ,_dcgd :=range _cgea {_bbbbc ,_fdgc :=_eaead .GetBitmap (_dcgd );if _fdgc !=nil {return nil ,_a .Wrap (_fdgc ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_eafac .AddBitmap (_bbbbc );};return _eafac ,nil ;};func _dbfd (_ggde *Bitmap ,_eacf ,_faddd int ,_dfagc ,_fgba int ,_abgee RasterOperator ,_aegea *Bitmap ,_bafd ,_dagbf int )error {var _defb ,_gfdbf ,_cccc ,_dcee int ;if _eacf < 0{_bafd -=_eacf ;_dfagc +=_eacf ;
_eacf =0;};if _bafd < 0{_eacf -=_bafd ;_dfagc +=_bafd ;_bafd =0;};_defb =_eacf +_dfagc -_ggde .Width ;if _defb > 0{_dfagc -=_defb ;};_gfdbf =_bafd +_dfagc -_aegea .Width ;if _gfdbf > 0{_dfagc -=_gfdbf ;};if _faddd < 0{_dagbf -=_faddd ;_fgba +=_faddd ;_faddd =0;
};if _dagbf < 0{_faddd -=_dagbf ;_fgba +=_dagbf ;_dagbf =0;};_cccc =_faddd +_fgba -_ggde .Height ;if _cccc > 0{_fgba -=_cccc ;};_dcee =_dagbf +_fgba -_aegea .Height ;if _dcee > 0{_fgba -=_dcee ;};if _dfagc <=0||_fgba <=0{return nil ;};var _ccdc error ;
switch {case _eacf &7==0&&_bafd &7==0:_ccdc =_ccbc (_ggde ,_eacf ,_faddd ,_dfagc ,_fgba ,_abgee ,_aegea ,_bafd ,_dagbf );case _eacf &7==_bafd &7:_ccdc =_egaeg (_ggde ,_eacf ,_faddd ,_dfagc ,_fgba ,_abgee ,_aegea ,_bafd ,_dagbf );default:_ccdc =_gcbg (_ggde ,_eacf ,_faddd ,_dfagc ,_fgba ,_abgee ,_aegea ,_bafd ,_dagbf );
};if _ccdc !=nil {return _a .Wrap (_ccdc ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_aeegb *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _bcebb ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_aeegb .Values )==0{return nil ,_a .Error (_bcebb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_fdbd :=&BitmapsArray {};_aeegb .SortByWidth ();_bfgc :=-1;_cega :=-1;for _bgae :=0;_bgae < len (_aeegb .Values );
_bgae ++{_debe :=_aeegb .Values [_bgae ].Width ;if _debe > _bfgc {_bfgc =_debe ;_cega ++;_fdbd .Values =append (_fdbd .Values ,&Bitmaps {});};_fdbd .Values [_cega ].AddBitmap (_aeegb .Values [_bgae ]);};return _fdbd ,nil ;};func (_feff Points )Get (i int )(Point ,error ){if i > len (_feff )-1{return Point {},_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _feff [i ],nil ;};type fillSegment struct{_caae int ;_cgcd int ;_gagg int ;_dgca int ;};func (_ecdf *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _efbb ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _ecdf ==nil {return nil ,_a .Error (_efbb ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_a .Error (_efbb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_ddaag :=len (_ecdf .Values );_cbcga :=&Bitmaps {Values :make ([]*Bitmap ,_ddaag ),Boxes :make ([]*_ec .Rectangle ,_ddaag )};var (_edbc ,_edbe *Bitmap ;_cebac *_ec .Rectangle ;_ffdb error ;);for _bcbgg :=0;_bcbgg < _ddaag ;_bcbgg ++{if _edbc ,_ffdb =_ecdf .GetBitmap (_bcbgg );
_ffdb !=nil {return nil ,_a .Wrap (_ffdb ,_efbb ,"");};if _cebac ,_ffdb =_ecdf .GetBox (_bcbgg );_ffdb !=nil {return nil ,_a .Wrap (_ffdb ,_efbb ,"");};if _edbe ,_ffdb =s .clipRectangle (_cebac ,nil );_ffdb !=nil {return nil ,_a .Wrap (_ffdb ,_efbb ,"");
};if _edbe ,_ffdb =_edbe .And (_edbc );_ffdb !=nil {return nil ,_a .Wrap (_ffdb ,_efbb ,"");};_cbcga .Values [_bcbgg ]=_edbe ;_cbcga .Boxes [_bcbgg ]=_cebac ;};return _cbcga ,nil ;};func _aega (_bcfb ,_dgce *Bitmap ,_bfce ,_afbc ,_aedd ,_dadg ,_abb int ,_ceeb CombinationOperator )error {var _fgbc int ;
_cggb :=func (){_fgbc ++;_aedd +=_dgce .RowStride ;_dadg +=_bcfb .RowStride ;_abb +=_bcfb .RowStride };for _fgbc =_bfce ;_fgbc < _afbc ;_cggb (){_gfdg :=_aedd ;for _cced :=_dadg ;_cced <=_abb ;_cced ++{_fbcda ,_fdeg :=_dgce .GetByte (_gfdg );if _fdeg !=nil {return _fdeg ;
};_gag ,_fdeg :=_bcfb .GetByte (_cced );if _fdeg !=nil {return _fdeg ;};if _fdeg =_dgce .SetByte (_gfdg ,_ebbd (_fbcda ,_gag ,_ceeb ));_fdeg !=nil {return _fdeg ;};_gfdg ++;};};return nil ;};func (_ecbb *Bitmap )Zero ()bool {_gfbgd :=_ecbb .Width /8;_bfd :=_ecbb .Width &7;
var _dfe byte ;if _bfd !=0{_dfe =byte (0xff<<uint (8-_bfd ));};var _bfb ,_cfb ,_ede int ;for _cfb =0;_cfb < _ecbb .Height ;_cfb ++{_bfb =_ecbb .RowStride *_cfb ;for _ede =0;_ede < _gfbgd ;_ede ,_bfb =_ede +1,_bfb +1{if _ecbb .Data [_bfb ]!=0{return false ;
};};if _bfd > 0{if _ecbb .Data [_bfb ]&_dfe !=0{return false ;};};};return true ;};func MakePixelSumTab8 ()[]int {return _accfa ()};func (_egbde *ClassedPoints )Swap (i ,j int ){_egbde .IntSlice [i ],_egbde .IntSlice [j ]=_egbde .IntSlice [j ],_egbde .IntSlice [i ];
};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _acce (d ,s ,sel )};func (_caec *Bitmap )CountPixels ()int {return _caec .countPixels ()};func TstWordBitmapWithSpaces (t *_e .T ,scale ...int )*Bitmap {_ffeea :=1;if len (scale )> 0{_ffeea =scale [0];
};_fdcb :=3;_edeg :=9+7+15+2*_fdcb +2*_fdcb ;_gbggg :=5+_fdcb +5+2*_fdcb ;_cfbc :=New (_edeg *_ffeea ,_gbggg *_ffeea );_efed :=&Bitmaps {};var _ffbff *int ;_fdcb *=_ffeea ;_ccef :=_fdcb ;_ffbff =&_ccef ;_efee :=_fdcb ;_daba :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,1*_ffeea );_daba =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,_fdcb );_daba =TstISymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,1*_ffeea );_daba =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,_fdcb );_daba =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,1*_ffeea );_daba =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,1*_ffeea );_daba =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,0);*_ffbff =_fdcb ;_efee =5*_ffeea +_fdcb ;_daba =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,1*_ffeea );_daba =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,_fdcb );
_daba =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,1*_ffeea );_daba =TstESymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,1*_ffeea );_daba =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,1*_ffeea );
_daba =TstESymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,1*_ffeea );_daba =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_efed ,_daba ,_ffbff ,_efee ,0);TstWriteSymbols (t ,_efed ,_cfbc );return _cfbc ;};func (_fafd *Bitmap )centroid (_eaef ,_deec []int )(Point ,error ){_fegf :=Point {};
_fafd .setPadBits (0);if len (_eaef )==0{_eaef =_ffce ();};if len (_deec )==0{_deec =_accfa ();};var _gadf ,_bcfg ,_eeadf ,_cffd ,_cffg ,_gbce int ;var _efad byte ;for _cffg =0;_cffg < _fafd .Height ;_cffg ++{_bcgca :=_fafd .RowStride *_cffg ;_cffd =0;
for _gbce =0;_gbce < _fafd .RowStride ;_gbce ++{_efad =_fafd .Data [_bcgca +_gbce ];if _efad !=0{_cffd +=_deec [_efad ];_gadf +=_eaef [_efad ]+_gbce *8*_deec [_efad ];};};_eeadf +=_cffd ;_bcfg +=_cffd *_cffg ;};if _eeadf !=0{_fegf .X =float32 (_gadf )/float32 (_eeadf );
_fegf .Y =float32 (_bcfg )/float32 (_eeadf );};return _fegf ,nil ;};func _ced (_aecb ,_eacd *Bitmap ,_ccf *Selection )(*Bitmap ,error ){const _abca ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _gffg ,_cafc int ;
if _eacd ==nil {return nil ,_a .Error (_abca ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ccf ==nil {return nil ,_a .Error (_abca ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_gffg =_ccf .Width ;_cafc =_ccf .Height ;if _gffg ==0||_cafc ==0{return nil ,_a .Error (_abca ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _aecb ==nil {return _eacd .createTemplate (),nil ;};if _daaee :=_aecb .resizeImageData (_eacd );
_daaee !=nil {return nil ,_daaee ;};return _aecb ,nil ;};func (_egdg *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _eede ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_ddgg ,_fdfd :=_egdg .selectByIndexes (idx );if _fdfd !=nil {return nil ,_a .Wrap (_fdfd ,_eede ,"");};return _ddgg ,nil ;};func (_bdcc *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _dfaa ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_bdcc .IntSlice .Size (){return 0,_a .Errorf (_dfaa ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_bdcc .XAtIndex (i )),nil ;};func _accfa ()[]int {_begb :=make ([]int ,256);for _cab :=0;_cab <=0xff;_cab ++{_ccbfa :=byte (_cab );_begb [_ccbfa ]=int (_ccbfa &0x1)+(int (_ccbfa >>1)&0x1)+(int (_ccbfa >>2)&0x1)+(int (_ccbfa >>3)&0x1)+(int (_ccbfa >>4)&0x1)+(int (_ccbfa >>5)&0x1)+(int (_ccbfa >>6)&0x1)+(int (_ccbfa >>7)&0x1);
};return _begb ;};func (_age *Bitmap )And (s *Bitmap )(_ecc *Bitmap ,_ccgb error ){const _bbec ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _age ==nil {return nil ,_a .Error (_bbec ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_a .Error (_bbec ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_age .SizesEqual (s ){_fb .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_bbec );
};if _ecc ,_ccgb =_cee (_ecc ,_age );_ccgb !=nil {return nil ,_a .Wrap (_ccgb ,_bbec ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ccgb =_ecc .RasterOperation (0,0,_ecc .Width ,_ecc .Height ,PixSrcAndDst ,s ,0,0);
_ccgb !=nil {return nil ,_a .Wrap (_ccgb ,_bbec ,"");};return _ecc ,nil ;};func (_ceagbg *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _faefb ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _cegd :=_ceagbg .validateIntSlice ();_cegd !=nil {return nil ,_a .Wrap (_cegd ,_faefb ,"");};if _ceagbg .IntSlice .Size ()==0{return nil ,_a .Error (_faefb ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_ceagbg .SortByY ();var (_bcbae []*ClassedPoints ;_fafbg int ;);_edde :=-1;var _faff *ClassedPoints ;for _debf :=0;_debf < len (_ceagbg .IntSlice );_debf ++{_fafbg =int (_ceagbg .YAtIndex (_debf ));if _fafbg !=_edde {_faff =&ClassedPoints {Points :_ceagbg .Points };
_edde =_fafbg ;_bcbae =append (_bcbae ,_faff );};_faff .IntSlice =append (_faff .IntSlice ,_ceagbg .IntSlice [_debf ]);};for _ ,_dfff :=range _bcbae {_dfff .SortByX ();};return _bcbae ,nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _babg ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_fegb :=_dgd (width ,height );_fegb .Data =data ;if _afd :=((width *height )+7)>>3;len (data )< _afd {return nil ,_a .Errorf (_babg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_afd );
};if _cdb :=_fegb .addPadBits ();_cdb !=nil {return nil ,_a .Wrap (_cdb ,_babg ,"");};return _fegb ,nil ;};func _bgc ()(_dbf [256]uint16 ){for _cdf :=0;_cdf < 256;_cdf ++{if _cdf &0x01!=0{_dbf [_cdf ]|=0x3;};if _cdf &0x02!=0{_dbf [_cdf ]|=0xc;};if _cdf &0x04!=0{_dbf [_cdf ]|=0x30;
};if _cdf &0x08!=0{_dbf [_cdf ]|=0xc0;};if _cdf &0x10!=0{_dbf [_cdf ]|=0x300;};if _cdf &0x20!=0{_dbf [_cdf ]|=0xc00;};if _cdf &0x40!=0{_dbf [_cdf ]|=0x3000;};if _cdf &0x80!=0{_dbf [_cdf ]|=0xc000;};};return _dbf ;};func _ebbd (_fcac ,_faee byte ,_afag CombinationOperator )byte {switch _afag {case CmbOpOr :return _faee |_fcac ;
case CmbOpAnd :return _faee &_fcac ;case CmbOpXor :return _faee ^_fcac ;case CmbOpXNor :return ^(_faee ^_fcac );case CmbOpNot :return ^(_faee );default:return _faee ;};};type Getter interface{GetBitmap ()*Bitmap ;};func _ecfg (_cagc ,_gegec *Bitmap ,_cgec ,_cafb int )(*Bitmap ,error ){const _abeee ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";
if _gegec ==nil {_fb .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_a .Error (_abeee ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _cgec < 1||_cafb < 1{return nil ,_a .Error (_abeee ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _cgec ==1&&_cafb ==1{_gbcd ,_cbdf :=_cee (_cagc ,_gegec );if _cbdf !=nil {return nil ,_a .Wrap (_cbdf ,_abeee ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gbcd ,nil ;};if _cgec ==1||_cafb ==1{_caee :=SelCreateBrick (_cafb ,_cgec ,_cafb /2,_cgec /2,SelHit );_efde ,_gbfb :=_acce (_cagc ,_gegec ,_caee );if _gbfb !=nil {return nil ,_a .Wrap (_gbfb ,_abeee ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _efde ,nil ;};_bbgc :=SelCreateBrick (1,_cgec ,0,_cgec /2,SelHit );_acab :=SelCreateBrick (_cafb ,1,_cafb /2,0,SelHit );_fded ,_ffda :=_acce (nil ,_gegec ,_bbgc );if _ffda !=nil {return nil ,_a .Wrap (_ffda ,_abeee ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_cagc ,_ffda =_acce (_cagc ,_fded ,_acab );if _ffda !=nil {return nil ,_a .Wrap (_ffda ,_abeee ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _cagc ,nil ;};func (_fgda *Bitmaps )makeSizeIndicator (_deacd ,_edef int ,_afdc LocationFilter ,_daca SizeComparison )(_fdea *_g .NumSlice ,_dcae error ){const _fabad ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _fgda ==nil {return nil ,_a .Error (_fabad ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _afdc {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_a .Errorf (_fabad ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_afdc );
};switch _daca {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_a .Errorf (_fabad ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_daca );
};_fdea =&_g .NumSlice {};var (_begc ,_geccca ,_cbdga int ;_dfbf *Bitmap ;);for _ ,_dfbf =range _fgda .Values {_begc =0;_geccca ,_cbdga =_dfbf .Width ,_dfbf .Height ;switch _afdc {case LocSelectWidth :if (_daca ==SizeSelectIfLT &&_geccca < _deacd )||(_daca ==SizeSelectIfGT &&_geccca > _deacd )||(_daca ==SizeSelectIfLTE &&_geccca <=_deacd )||(_daca ==SizeSelectIfGTE &&_geccca >=_deacd )||(_daca ==SizeSelectIfEQ &&_geccca ==_deacd ){_begc =1;
};case LocSelectHeight :if (_daca ==SizeSelectIfLT &&_cbdga < _edef )||(_daca ==SizeSelectIfGT &&_cbdga > _edef )||(_daca ==SizeSelectIfLTE &&_cbdga <=_edef )||(_daca ==SizeSelectIfGTE &&_cbdga >=_edef )||(_daca ==SizeSelectIfEQ &&_cbdga ==_edef ){_begc =1;
};case LocSelectIfEither :if (_daca ==SizeSelectIfLT &&(_geccca < _deacd ||_cbdga < _edef ))||(_daca ==SizeSelectIfGT &&(_geccca > _deacd ||_cbdga > _edef ))||(_daca ==SizeSelectIfLTE &&(_geccca <=_deacd ||_cbdga <=_edef ))||(_daca ==SizeSelectIfGTE &&(_geccca >=_deacd ||_cbdga >=_edef ))||(_daca ==SizeSelectIfEQ &&(_geccca ==_deacd ||_cbdga ==_edef )){_begc =1;
};case LocSelectIfBoth :if (_daca ==SizeSelectIfLT &&(_geccca < _deacd &&_cbdga < _edef ))||(_daca ==SizeSelectIfGT &&(_geccca > _deacd &&_cbdga > _edef ))||(_daca ==SizeSelectIfLTE &&(_geccca <=_deacd &&_cbdga <=_edef ))||(_daca ==SizeSelectIfGTE &&(_geccca >=_deacd &&_cbdga >=_edef ))||(_daca ==SizeSelectIfEQ &&(_geccca ==_deacd &&_cbdga ==_edef )){_begc =1;
};};_fdea .AddInt (_begc );};return _fdea ,nil ;};func (_ebfee *Bitmaps )Size ()int {return len (_ebfee .Values )};type byWidth Bitmaps ;func (_ffcb *byWidth )Less (i ,j int )bool {return _ffcb .Values [i ].Width < _ffcb .Values [j ].Width };func _bf (_cfg ,_eeg *Bitmap ,_ac int ,_dae []byte ,_agf int )(_aaaa error ){const _eag ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_gecc ,_agd ,_ddc ,_ddce ,_dffc ,_fba ,_fbcd ,_gcee int ;_bb ,_bgb ,_cec ,_eage uint32 ;_fed ,_eee byte ;_bdge uint16 ;);_ffb :=make ([]byte ,4);_aegd :=make ([]byte ,4);for _ddc =0;_ddc < _cfg .Height -1;_ddc ,_ddce =_ddc +2,_ddce +1{_gecc =_ddc *_cfg .RowStride ;
_agd =_ddce *_eeg .RowStride ;for _dffc ,_fba =0,0;_dffc < _agf ;_dffc ,_fba =_dffc +4,_fba +1{for _fbcd =0;_fbcd < 4;_fbcd ++{_gcee =_gecc +_dffc +_fbcd ;if _gcee <=len (_cfg .Data )-1&&_gcee < _gecc +_cfg .RowStride {_ffb [_fbcd ]=_cfg .Data [_gcee ];
}else {_ffb [_fbcd ]=0x00;};_gcee =_gecc +_cfg .RowStride +_dffc +_fbcd ;if _gcee <=len (_cfg .Data )-1&&_gcee < _gecc +(2*_cfg .RowStride ){_aegd [_fbcd ]=_cfg .Data [_gcee ];}else {_aegd [_fbcd ]=0x00;};};_bb =_dd .BigEndian .Uint32 (_ffb );_bgb =_dd .BigEndian .Uint32 (_aegd );
_cec =_bb &_bgb ;_cec |=_cec <<1;_eage =_bb |_bgb ;_eage &=_eage <<1;_bgb =_cec |_eage ;_bgb &=0xaaaaaaaa;_bb =_bgb |(_bgb <<7);_fed =byte (_bb >>24);_eee =byte ((_bb >>8)&0xff);_gcee =_agd +_fba ;if _gcee +1==len (_eeg .Data )-1||_gcee +1>=_agd +_eeg .RowStride {if _aaaa =_eeg .SetByte (_gcee ,_dae [_fed ]);
_aaaa !=nil {return _a .Wrapf (_aaaa ,_eag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gcee );};}else {_bdge =(uint16 (_dae [_fed ])<<8)|uint16 (_dae [_eee ]);if _aaaa =_eeg .setTwoBytes (_gcee ,_bdge );_aaaa !=nil {return _a .Wrapf (_aaaa ,_eag ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gcee );
};_fba ++;};};};return nil ;};func TstFrameBitmap ()*Bitmap {return _cafe .Copy ()};func (_gcbb Points )GetGeometry (i int )(_bfbf ,_gefd float32 ,_baaa error ){if i > len (_gcbb )-1{return 0,0,_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_eadf :=_gcbb [i ];return _eadf .X ,_eadf .Y ,nil ;};var _cebb [256]uint8 ;var _ _eg .Interface =&ClassedPoints {};func (_fceb *byWidth )Swap (i ,j int ){_fceb .Values [i ],_fceb .Values [j ]=_fceb .Values [j ],_fceb .Values [i ];if _fceb .Boxes !=nil {_fceb .Boxes [i ],_fceb .Boxes [j ]=_fceb .Boxes [j ],_fceb .Boxes [i ];
};};func (_feea *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_fefd *Bitmaps ,_dace *Boxes ,_cfca error ){const _dedc ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _feea ==nil {return nil ,nil ,_a .Error (_dedc ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");
};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_a .Error (_dedc ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _feea .Zero (){_dace =&Boxes {};_fefd =&Bitmaps {};return _fefd ,_dace ,nil ;};switch components {case ComponentConn :_fefd =&Bitmaps {};if _dace ,_cfca =_feea .ConnComponents (_fefd ,8);_cfca !=nil {return nil ,nil ,_a .Wrap (_cfca ,_dedc ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_egga ,_bdf :=MorphSequence (_feea ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _bdf !=nil {return nil ,nil ,_a .Wrap (_bdf ,_dedc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _fb .Log .IsLogLevel (_fb .LogLevelTrace ){_fb .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_egga .String ());
};_geca :=&Bitmaps {};_dace ,_bdf =_egga .ConnComponents (_geca ,8);if _bdf !=nil {return nil ,nil ,_a .Wrap (_bdf ,_dedc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _fb .Log .IsLogLevel (_fb .LogLevelTrace ){_fb .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_geca .String ());
};if _fefd ,_bdf =_geca .ClipToBitmap (_feea );_bdf !=nil {return nil ,nil ,_a .Wrap (_bdf ,_dedc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_babga :=1;
var _aefg *Bitmap ;switch {case _feea .XResolution <=200:_aefg =_feea ;case _feea .XResolution <=400:_babga =2;_aefg ,_cfca =_eb (_feea ,1,0,0,0);if _cfca !=nil {return nil ,nil ,_a .Wrap (_cfca ,_dedc ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_babga =4;_aefg ,_cfca =_eb (_feea ,1,1,0,0);if _cfca !=nil {return nil ,nil ,_a .Wrap (_cfca ,_dedc ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_ffgb ,_ ,_fbeb :=_cecd (_aefg );if _fbeb !=nil {return nil ,nil ,_a .Wrap (_fbeb ,_dedc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_cgfb ,_fbeb :=_ebdb (_ffgb ,_babga );if _fbeb !=nil {return nil ,nil ,_a .Wrap (_fbeb ,_dedc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_fgac :=&Bitmaps {};if _dace ,_fbeb =_cgfb .ConnComponents (_fgac ,4);_fbeb !=nil {return nil ,nil ,_a .Wrap (_fbeb ,_dedc ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _fefd ,_fbeb =_fgac .ClipToBitmap (_feea );_fbeb !=nil {return nil ,nil ,_a .Wrap (_fbeb ,_dedc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_fefd ,_cfca =_fefd .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _cfca !=nil {return nil ,nil ,_a .Wrap (_cfca ,_dedc ,"");};_dace ,_cfca =_dace .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _cfca !=nil {return nil ,nil ,_a .Wrap (_cfca ,_dedc ,"");};return _fefd ,_dace ,nil ;};func _eegbg (_fddb ,_ebaa *Bitmap ,_dbga ,_fbcad int )(*Bitmap ,error ){const _deg ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _ebaa ==nil {return nil ,_a .Error (_deg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _dbga < 1&&_fbcad < 1{return nil ,_a .Error (_deg ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _dbga ==1&&_fbcad ==1{return _ebaa .Copy (),nil ;};if _dbga ==1||_fbcad ==1{var _gegc error ;_abge :=SelCreateBrick (_fbcad ,_dbga ,_fbcad /2,_dbga /2,SelHit );_fddb ,_gegc =_dagc (_fddb ,_ebaa ,_abge );if _gegc !=nil {return nil ,_a .Wrap (_gegc ,_deg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fddb ,nil ;};_acfe :=SelCreateBrick (1,_dbga ,0,_dbga /2,SelHit );_gccf :=SelCreateBrick (_fbcad ,1,_fbcad /2,0,SelHit );_badd ,_gdee :=_ddgb (nil ,_ebaa ,_acfe );if _gdee !=nil {return nil ,_a .Wrap (_gdee ,_deg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_fddb ,_gdee =_ddgb (_fddb ,_badd ,_gccf );if _gdee !=nil {return nil ,_a .Wrap (_gdee ,_deg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_gdee =_acce (_badd ,_fddb ,_acfe );if _gdee !=nil {return nil ,_a .Wrap (_gdee ,_deg ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_gdee =_acce (_fddb ,_badd ,_gccf );if _gdee !=nil {return nil ,_a .Wrap (_gdee ,_deg ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _fddb ,nil ;};func TstCSymbol (t *_e .T )*Bitmap {t .Helper ();_ffabe :=New (6,6);_c .NoError (t ,_ffabe .SetPixel (1,0,1));
_c .NoError (t ,_ffabe .SetPixel (2,0,1));_c .NoError (t ,_ffabe .SetPixel (3,0,1));_c .NoError (t ,_ffabe .SetPixel (4,0,1));_c .NoError (t ,_ffabe .SetPixel (0,1,1));_c .NoError (t ,_ffabe .SetPixel (5,1,1));_c .NoError (t ,_ffabe .SetPixel (0,2,1));
_c .NoError (t ,_ffabe .SetPixel (0,3,1));_c .NoError (t ,_ffabe .SetPixel (0,4,1));_c .NoError (t ,_ffabe .SetPixel (5,4,1));_c .NoError (t ,_ffabe .SetPixel (1,5,1));_c .NoError (t ,_ffabe .SetPixel (2,5,1));_c .NoError (t ,_ffabe .SetPixel (3,5,1));
_c .NoError (t ,_ffabe .SetPixel (4,5,1));return _ffabe ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _caacf (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_bdce *Bitmap )SizesEqual (s *Bitmap )bool {if _bdce ==s {return true ;
};if _bdce .Width !=s .Width ||_bdce .Height !=s .Height {return false ;};return true ;};func (_gbg *Bitmap )clearAll ()error {return _gbg .RasterOperation (0,0,_gbg .Width ,_gbg .Height ,PixClr ,nil ,0,0);};func (_edg *Bitmap )addPadBits ()(_ffbe error ){const _fedf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_cfd :=_edg .Width %8;if _cfd ==0{return nil ;};_abag :=_edg .Width /8;_bceb :=_da .NewReader (_edg .Data );_fcg :=make ([]byte ,_edg .Height *_edg .RowStride );_efgg :=_da .NewWriterMSB (_fcg );_adg :=make ([]byte ,_abag );var (_fbe int ;_gacc uint64 ;
);for _fbe =0;_fbe < _edg .Height ;_fbe ++{if _ ,_ffbe =_bceb .Read (_adg );_ffbe !=nil {return _a .Wrap (_ffbe ,_fedf ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_ffbe =_efgg .Write (_adg );_ffbe !=nil {return _a .Wrap (_ffbe ,_fedf ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _gacc ,_ffbe =_bceb .ReadBits (byte (_cfd ));_ffbe !=nil {return _a .Wrap (_ffbe ,_fedf ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _ffbe =_efgg .WriteByte (byte (_gacc )<<uint (8-_cfd ));_ffbe !=nil {return _a .Wrap (_ffbe ,_fedf ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_edg .Data =_efgg .Data ();return nil ;};func (_dbfb *Bitmap )setEightPartlyBytes (_dfebb ,_acf int ,_bcbc uint64 )(_fbag error ){var (_bfga byte ;_ggg int ;);const _dcb ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _ffbf :=1;_ffbf <=_acf ;_ffbf ++{_ggg =64-_ffbf *8;_bfga =byte (_bcbc >>uint (_ggg )&0xff);_fb .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_bfga ,_dfebb ,_dfebb +_ffbf -1,_acf ,_ggg );
if _fbag =_dbfb .SetByte (_dfebb +_ffbf -1,_bfga );_fbag !=nil {return _a .Wrap (_fbag ,_dcb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_bagf :=_dbfb .RowStride *8-_dbfb .Width ;if _bagf ==0{return nil ;};_ggg -=8;_bfga =byte (_bcbc >>uint (_ggg )&0xff)<<uint (_bagf );
if _fbag =_dbfb .SetByte (_dfebb +_acf ,_bfga );_fbag !=nil {return _a .Wrap (_fbag ,_dcb ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func _feg (_gec ,_fbc *Bitmap ,_cf int ,_gfb []byte ,_ddd int )(_ea error ){const _gab ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_ag ,_fbg ,_fgb ,_fbcg ,_fbge ,_ege ,_cb ,_fbbb int ;_afa ,_ccg uint32 ;_dcd ,_eec byte ;_dbg uint16 ;);_daa :=make ([]byte ,4);_cagd :=make ([]byte ,4);for _fgb =0;_fgb < _gec .Height -1;_fgb ,_fbcg =_fgb +2,_fbcg +1{_ag =_fgb *_gec .RowStride ;_fbg =_fbcg *_fbc .RowStride ;
for _fbge ,_ege =0,0;_fbge < _ddd ;_fbge ,_ege =_fbge +4,_ege +1{for _cb =0;_cb < 4;_cb ++{_fbbb =_ag +_fbge +_cb ;if _fbbb <=len (_gec .Data )-1&&_fbbb < _ag +_gec .RowStride {_daa [_cb ]=_gec .Data [_fbbb ];}else {_daa [_cb ]=0x00;};_fbbb =_ag +_gec .RowStride +_fbge +_cb ;
if _fbbb <=len (_gec .Data )-1&&_fbbb < _ag +(2*_gec .RowStride ){_cagd [_cb ]=_gec .Data [_fbbb ];}else {_cagd [_cb ]=0x00;};};_afa =_dd .BigEndian .Uint32 (_daa );_ccg =_dd .BigEndian .Uint32 (_cagd );_ccg |=_afa ;_ccg |=_ccg <<1;_ccg &=0xaaaaaaaa;_afa =_ccg |(_ccg <<7);
_dcd =byte (_afa >>24);_eec =byte ((_afa >>8)&0xff);_fbbb =_fbg +_ege ;if _fbbb +1==len (_fbc .Data )-1||_fbbb +1>=_fbg +_fbc .RowStride {_fbc .Data [_fbbb ]=_gfb [_dcd ];}else {_dbg =(uint16 (_gfb [_dcd ])<<8)|uint16 (_gfb [_eec ]);if _ea =_fbc .setTwoBytes (_fbbb ,_dbg );
_ea !=nil {return _a .Wrapf (_ea ,_gab ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fbbb );};_ege ++;};};};
return nil ;};func _aeb ()(_edc [256]uint64 ){for _ged :=0;_ged < 256;_ged ++{if _ged &0x01!=0{_edc [_ged ]|=0xff;};if _ged &0x02!=0{_edc [_ged ]|=0xff00;};if _ged &0x04!=0{_edc [_ged ]|=0xff0000;};if _ged &0x08!=0{_edc [_ged ]|=0xff000000;};if _ged &0x10!=0{_edc [_ged ]|=0xff00000000;
};if _ged &0x20!=0{_edc [_ged ]|=0xff0000000000;};if _ged &0x40!=0{_edc [_ged ]|=0xff000000000000;};if _ged &0x80!=0{_edc [_ged ]|=0xff00000000000000;};};return _edc ;};func _caacf (_efbad *Bitmap ,_gfdde ,_dbb ,_adbb ,_dfd int ,_acfb RasterOperator ,_baca *Bitmap ,_ggb ,_fdb int )error {const _fefc ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _efbad ==nil {return _a .Error (_fefc ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _acfb ==PixDst {return nil ;};switch _acfb {case PixClr ,PixSet ,PixNotDst :_bgbaa (_efbad ,_gfdde ,_dbb ,_adbb ,_dfd ,_acfb );
return nil ;};if _baca ==nil {_fb .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _a .Error (_fefc ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cfce :=_dbfd (_efbad ,_gfdde ,_dbb ,_adbb ,_dfd ,_acfb ,_baca ,_ggb ,_fdb );_cfce !=nil {return _a .Wrap (_cfce ,_fefc ,"");};return nil ;
};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _cee (d ,s )};func (_aag *Bitmap )InverseData (){_aag .inverseData ()};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _ebbd (oldByte ,newByte ,op );};func TstNSymbol (t *_e .T ,scale ...int )*Bitmap {_ggebf ,_feggc :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_c .NoError (t ,_feggc );return TstGetScaledSymbol (t ,_ggebf ,scale ...);};func (_aee *Bitmap )SetDefaultPixel (){for _bag :=range _aee .Data {_aee .Data [_bag ]=byte (0xff);};};func _bgff (_efe ,_bfed *Bitmap ,_cbc *Selection )(*Bitmap ,error ){const _beeg ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";
var _ggag error ;if _efe ,_ggag =_ced (_efe ,_bfed ,_cbc );_ggag !=nil {return nil ,_ggag ;};_bagfd ,_ggag :=_acce (nil ,_bfed ,_cbc );if _ggag !=nil {return nil ,_a .Wrap (_ggag ,_beeg ,"");};if _ ,_ggag =_ddgb (_efe ,_bagfd ,_cbc );_ggag !=nil {return nil ,_a .Wrap (_ggag ,_beeg ,"");
};return _efe ,nil ;};func _bebb (_cba *Bitmap ,_egaea *Bitmap ,_afeac *Selection ,_dcfa **Bitmap )(*Bitmap ,error ){const _acfec ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _egaea ==nil {return nil ,_a .Error (_acfec ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _afeac ==nil {return nil ,_a .Error (_acfec ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_adcd ,_cccb :=_afeac .Height ,_afeac .Width ;if _adcd ==0||_cccb ==0{return nil ,_a .Error (_acfec ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _cba ==nil {_cba =_egaea .createTemplate ();*_dcfa =_egaea ;return _cba ,nil ;};_cba .Width =_egaea .Width ;_cba .Height =_egaea .Height ;_cba .RowStride =_egaea .RowStride ;_cba .Color =_egaea .Color ;_cba .Data =make ([]byte ,_egaea .RowStride *_egaea .Height );
if _cba ==_egaea {*_dcfa =_egaea .Copy ();}else {*_dcfa =_egaea ;};return _cba ,nil ;};func (_efdd *Bitmaps )AddBox (box *_ec .Rectangle ){_efdd .Boxes =append (_efdd .Boxes ,box )};type BoundaryCondition int ;type MorphProcess struct{Operation MorphOperation ;
Arguments []int ;};func TstTSymbol (t *_e .T ,scale ...int )*Bitmap {_cefg ,_bgbfc :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_c .NoError (t ,_bgbfc );return TstGetScaledSymbol (t ,_cefg ,scale ...);};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _eggc (src ,sequence ...);
};func (_fcc *Bitmap )inverseData (){if _fffg :=_fcc .RasterOperation (0,0,_fcc .Width ,_fcc .Height ,PixNotDst ,nil ,0,0);_fffg !=nil {_fb .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_fffg );
};if _fcc .Color ==Chocolate {_fcc .Color =Vanilla ;}else {_fcc .Color =Chocolate ;};};func (_cgbcd Points )YSorter ()func (_eccg ,_dggd int )bool {return func (_dfbb ,_cgac int )bool {return _cgbcd [_dfbb ].Y < _cgbcd [_cgac ].Y };};func _gcegc (_eeb *Bitmap ,_bdd int ,_dgc []byte )(_ecd *Bitmap ,_eea error ){const _fab ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _eeb ==nil {return nil ,_a .Error (_fab ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bdd < 1||_bdd > 4{return nil ,_a .Error (_fab ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _eeb .Height <=1{return nil ,_a .Errorf (_fab ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_eeb .Height );
};_ecd =New (_eeb .Width /2,_eeb .Height /2);if _dgc ==nil {_dgc =_aba ();};_aad :=_fbbd (_eeb .RowStride ,2*_ecd .RowStride );switch _bdd {case 1:_eea =_feg (_eeb ,_ecd ,_bdd ,_dgc ,_aad );case 2:_eea =_bf (_eeb ,_ecd ,_bdd ,_dgc ,_aad );case 3:_eea =_gfbg (_eeb ,_ecd ,_bdd ,_dgc ,_aad );
case 4:_eea =_fad (_eeb ,_ecd ,_bdd ,_dgc ,_aad );};if _eea !=nil {return nil ,_eea ;};return _ecd ,nil ;};func _gaaeda (_ddca ,_dacd int ,_fdgb string )*Selection {_geda :=&Selection {Height :_ddca ,Width :_dacd ,Name :_fdgb };_geda .Data =make ([][]SelectionValue ,_ddca );
for _gbfa :=0;_gbfa < _ddca ;_gbfa ++{_geda .Data [_gbfa ]=make ([]SelectionValue ,_dacd );};return _geda ;};func (_adcdb *Bitmaps )SortByWidth (){_aacba :=(*byWidth )(_adcdb );_eg .Sort (_aacba )};func (_cde MorphProcess )verify (_fedg int ,_ccca ,_fbbg *int )error {const _cgda ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _cde .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_cde .Arguments )!=2{return _a .Error (_cgda ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_eggea ,_feef :=_cde .getWidthHeight ();if _eggea <=0||_feef <=0{return _a .Error (_cgda ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_dcea :=len (_cde .Arguments );*_ccca +=_dcea ;if _dcea < 1||_dcea > 4{return _a .Error (_cgda ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _fdac :=0;_fdac < _dcea ;_fdac ++{if _cde .Arguments [_fdac ]< 1||_cde .Arguments [_fdac ]> 4{return _a .Error (_cgda ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_cde .Arguments )==0{return _a .Error (_cgda ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_aaca :=_cde .Arguments [0];if _aaca !=2&&_aaca !=4&&_aaca !=8{return _a .Error (_cgda ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_ccca -=_ceba [_aaca /4];case MopAddBorder :if len (_cde .Arguments )==0{return _a .Error (_cgda ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_daff :=_cde .Arguments [0];if _fedg > 0{return _a .Error (_cgda ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _daff < 1{return _a .Error (_cgda ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_fbbg =_daff ;};return nil ;};func (_cegg *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _cfagd ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";
if _cegg ==nil {return nil ,_a .Error (_cfagd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_cegg .Values )-1{return nil ,_a .Errorf (_cfagd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _cegg .Values [i ],nil ;};func _bead (_aabg ...MorphProcess )(_ceagb error ){const _aebgc ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _gaca ,_fbfb int ;for _fcgf ,_fgaag :=range _aabg {if _ceagb =_fgaag .verify (_fcgf ,&_gaca ,&_fbfb );
_ceagb !=nil {return _a .Wrap (_ceagb ,_aebgc ,"");};};if _fbfb !=0&&_gaca !=0{return _a .Error (_aebgc ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func (_gcbc CombinationOperator )String ()string {var _agdc string ;switch _gcbc {case CmbOpOr :_agdc ="\u004f\u0052";case CmbOpAnd :_agdc ="\u0041\u004e\u0044";case CmbOpXor :_agdc ="\u0058\u004f\u0052";case CmbOpXNor :_agdc ="\u0058\u004e\u004f\u0052";
case CmbOpReplace :_agdc ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_agdc ="\u004e\u004f\u0054";};return _agdc ;};func (_dgedf *BitmapsArray )AddBox (box *_ec .Rectangle ){_dgedf .Boxes =append (_dgedf .Boxes ,box )};func TstPSymbol (t *_e .T )*Bitmap {t .Helper ();
_gcbbb :=New (5,8);_c .NoError (t ,_gcbbb .SetPixel (0,0,1));_c .NoError (t ,_gcbbb .SetPixel (1,0,1));_c .NoError (t ,_gcbbb .SetPixel (2,0,1));_c .NoError (t ,_gcbbb .SetPixel (3,0,1));_c .NoError (t ,_gcbbb .SetPixel (4,1,1));_c .NoError (t ,_gcbbb .SetPixel (0,1,1));
_c .NoError (t ,_gcbbb .SetPixel (4,2,1));_c .NoError (t ,_gcbbb .SetPixel (0,2,1));_c .NoError (t ,_gcbbb .SetPixel (4,3,1));_c .NoError (t ,_gcbbb .SetPixel (0,3,1));_c .NoError (t ,_gcbbb .SetPixel (0,4,1));_c .NoError (t ,_gcbbb .SetPixel (1,4,1));
_c .NoError (t ,_gcbbb .SetPixel (2,4,1));_c .NoError (t ,_gcbbb .SetPixel (3,4,1));_c .NoError (t ,_gcbbb .SetPixel (0,5,1));_c .NoError (t ,_gcbbb .SetPixel (0,6,1));_c .NoError (t ,_gcbbb .SetPixel (0,7,1));return _gcbbb ;};func (_aagb *Bitmaps )HeightSorter ()func (_fgfc ,_cffb int )bool {return func (_ecgdf ,_cffbe int )bool {_acfff :=_aagb .Values [_ecgdf ].Height < _aagb .Values [_cffbe ].Height ;
_fb .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_aagb .Values [_ecgdf ].Height ,_aagb .Values [_cffbe ].Height ,_acfff );return _acfff ;};};var _dffg =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_ffcc MorphProcess )getWidthHeight ()(_bacc ,_gbeg int ){return _ffcc .Arguments [0],_ffcc .Arguments [1];};func (_bage *Bitmap )setFourBytes (_gceb int ,_cfea uint32 )error {if _gceb +3> len (_bage .Data )-1{return _a .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_gceb );
};_bage .Data [_gceb ]=byte ((_cfea &0xff000000)>>24);_bage .Data [_gceb +1]=byte ((_cfea &0xff0000)>>16);_bage .Data [_gceb +2]=byte ((_cfea &0xff00)>>8);_bage .Data [_gceb +3]=byte (_cfea &0xff);return nil ;};func (_bgffb *ClassedPoints )ySortFunction ()func (_cdde int ,_egab int )bool {return func (_eebe ,_gdgf int )bool {return _bgffb .YAtIndex (_eebe )< _bgffb .YAtIndex (_gdgf )};
};func _abgbb (_cfde *Bitmap ,_afaf ,_gdde int ,_fgaca ,_gcebd int ,_dggef RasterOperator ){var (_gddfa int ;_eddd byte ;_fggb ,_dcgbc int ;_caeed int ;);_eedc :=_fgaca >>3;_cefbg :=_fgaca &7;if _cefbg > 0{_eddd =_fgbcd [_cefbg ];};_gddfa =_cfde .RowStride *_gdde +(_afaf >>3);
switch _dggef {case PixClr :for _fggb =0;_fggb < _gcebd ;_fggb ++{_caeed =_gddfa +_fggb *_cfde .RowStride ;for _dcgbc =0;_dcgbc < _eedc ;_dcgbc ++{_cfde .Data [_caeed ]=0x0;_caeed ++;};if _cefbg > 0{_cfde .Data [_caeed ]=_bgbe (_cfde .Data [_caeed ],0x0,_eddd );
};};case PixSet :for _fggb =0;_fggb < _gcebd ;_fggb ++{_caeed =_gddfa +_fggb *_cfde .RowStride ;for _dcgbc =0;_dcgbc < _eedc ;_dcgbc ++{_cfde .Data [_caeed ]=0xff;_caeed ++;};if _cefbg > 0{_cfde .Data [_caeed ]=_bgbe (_cfde .Data [_caeed ],0xff,_eddd );
};};case PixNotDst :for _fggb =0;_fggb < _gcebd ;_fggb ++{_caeed =_gddfa +_fggb *_cfde .RowStride ;for _dcgbc =0;_dcgbc < _eedc ;_dcgbc ++{_cfde .Data [_caeed ]=^_cfde .Data [_caeed ];_caeed ++;};if _cefbg > 0{_cfde .Data [_caeed ]=_bgbe (_cfde .Data [_caeed ],^_cfde .Data [_caeed ],_eddd );
};};};};func _fbbd (_fda ,_ffaa int )int {if _fda < _ffaa {return _fda ;};return _ffaa ;};func _eb (_dcec *Bitmap ,_edcb ...int )(_gfc *Bitmap ,_fe error ){const _ab ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _dcec ==nil {return nil ,_a .Error (_ab ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_edcb )==0||len (_edcb )> 4{return nil ,_a .Error (_ab ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _edcb [0]<=0{_fb .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_gfc ,_fe =_cee (nil ,_dcec );if _fe !=nil {return nil ,_a .Wrap (_fe ,_ab ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _gfc ,nil ;};_gceg :=_aba ();_gfc =_dcec ;for _ee ,_ga :=range _edcb {if _ga <=0{break ;};_gfc ,_fe =_gcegc (_gfc ,_ga ,_gceg );if _fe !=nil {return nil ,_a .Wrapf (_fe ,_ab ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_ee );
};};return _gfc ,nil ;};func _cg (_cag ,_bd *Bitmap )(_ecf error ){const _ddb ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_dbc :=_bd .RowStride ;_ce :=_cag .RowStride ;_fa :=_bd .RowStride *4-_cag .RowStride ;
var (_ba ,_dff byte ;_dc uint32 ;_ad ,_efd ,_aa ,_dfa ,_ffd ,_aeg ,_cc int ;);for _aa =0;_aa < _bd .Height ;_aa ++{_ad =_aa *_dbc ;_efd =4*_aa *_ce ;for _dfa =0;_dfa < _dbc ;_dfa ++{_ba =_bd .Data [_ad +_dfa ];_dc =_bba [_ba ];_aeg =_efd +_dfa *4;if _fa !=0&&(_dfa +1)*4> _cag .RowStride {for _ffd =_fa ;
_ffd > 0;_ffd --{_dff =byte ((_dc >>uint (_ffd *8))&0xff);_cc =_aeg +(_fa -_ffd );if _ecf =_cag .SetByte (_cc ,_dff );_ecf !=nil {return _a .Wrapf (_ecf ,_ddb ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ffd );
};};}else if _ecf =_cag .setFourBytes (_aeg ,_dc );_ecf !=nil {return _a .Wrap (_ecf ,_ddb ,"");};if _ecf =_cag .setFourBytes (_efd +_dfa *4,_bba [_bd .Data [_ad +_dfa ]]);_ecf !=nil {return _a .Wrap (_ecf ,_ddb ,"");};};for _ffd =1;_ffd < 4;_ffd ++{for _dfa =0;
_dfa < _ce ;_dfa ++{if _ecf =_cag .SetByte (_efd +_ffd *_ce +_dfa ,_cag .Data [_efd +_dfa ]);_ecf !=nil {return _a .Wrapf (_ecf ,_ddb ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ffd ,_dfa );
};};};};return nil ;};func (_gddgc *byWidth )Len ()int {return len (_gddgc .Values )};func (_gcfc *Bitmap )setAll ()error {_fgdf :=_caacf (_gcfc ,0,0,_gcfc .Width ,_gcfc .Height ,PixSet ,nil ,0,0);if _fgdf !=nil {return _a .Wrap (_fgdf ,"\u0073\u0065\u0074\u0041\u006c\u006c","");
};return nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);var (_cafe *Bitmap ;_feefe *Bitmap ;);func (_egfdg *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _caacf (_egfdg ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_fbcb *Bitmap )resizeImageData (_aaaac *Bitmap )error {if _aaaac ==nil {return _a .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fbcb .SizesEqual (_aaaac ){return nil ;};_fbcb .Data =make ([]byte ,len (_aaaac .Data ));_fbcb .Width =_aaaac .Width ;_fbcb .Height =_aaaac .Height ;_fbcb .RowStride =_aaaac .RowStride ;return nil ;};func (_cfad *ClassedPoints )XAtIndex (i int )float32 {return (*_cfad .Points )[_cfad .IntSlice [i ]].X };
func TstASymbol (t *_e .T )*Bitmap {t .Helper ();_gbefd :=New (6,6);_c .NoError (t ,_gbefd .SetPixel (1,0,1));_c .NoError (t ,_gbefd .SetPixel (2,0,1));_c .NoError (t ,_gbefd .SetPixel (3,0,1));_c .NoError (t ,_gbefd .SetPixel (4,0,1));_c .NoError (t ,_gbefd .SetPixel (5,1,1));
_c .NoError (t ,_gbefd .SetPixel (1,2,1));_c .NoError (t ,_gbefd .SetPixel (2,2,1));_c .NoError (t ,_gbefd .SetPixel (3,2,1));_c .NoError (t ,_gbefd .SetPixel (4,2,1));_c .NoError (t ,_gbefd .SetPixel (5,2,1));_c .NoError (t ,_gbefd .SetPixel (0,3,1));
_c .NoError (t ,_gbefd .SetPixel (5,3,1));_c .NoError (t ,_gbefd .SetPixel (0,4,1));_c .NoError (t ,_gbefd .SetPixel (5,4,1));_c .NoError (t ,_gbefd .SetPixel (1,5,1));_c .NoError (t ,_gbefd .SetPixel (2,5,1));_c .NoError (t ,_gbefd .SetPixel (3,5,1));
_c .NoError (t ,_gbefd .SetPixel (4,5,1));_c .NoError (t ,_gbefd .SetPixel (5,5,1));return _gbefd ;};func (_bcca *Bitmaps )CountPixels ()*_g .NumSlice {_babab :=&_g .NumSlice {};for _ ,_acga :=range _bcca .Values {_babab .AddInt (_acga .CountPixels ());
};return _babab ;};func (_cgc *Bitmap )SetByte (index int ,v byte )error {if index > len (_cgc .Data )-1||index < 0{return _a .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_cgc .Data [index ]=v ;return nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);type Component int ;func _gcbg (_gfbf *Bitmap ,_gdab ,_gddgb ,_gbcbd ,_bddg int ,_deaag RasterOperator ,_gdbda *Bitmap ,_afec ,_badf int )error {var (_dcgf bool ;
_aecee bool ;_ggddd byte ;_efbg int ;_fgc int ;_dbfbf int ;_ccfa int ;_bgbfd bool ;_acee int ;_fcacc int ;_agae int ;_dec bool ;_abgb byte ;_bcedd int ;_dbeb int ;_fdbb int ;_dagf byte ;_bddbe int ;_fbba int ;_aged uint ;_gdeb uint ;_baba byte ;_cfge shift ;
_cbcg bool ;_egef bool ;_gbbd ,_gadd int ;);if _afec &7!=0{_fbba =8-(_afec &7);};if _gdab &7!=0{_fgc =8-(_gdab &7);};if _fbba ==0&&_fgc ==0{_baba =_eeeg [0];}else {if _fgc > _fbba {_aged =uint (_fgc -_fbba );}else {_aged =uint (8-(_fbba -_fgc ));};_gdeb =8-_aged ;
_baba =_eeeg [_aged ];};if (_gdab &7)!=0{_dcgf =true ;_efbg =8-(_gdab &7);_ggddd =_eeeg [_efbg ];_dbfbf =_gfbf .RowStride *_gddgb +(_gdab >>3);_ccfa =_gdbda .RowStride *_badf +(_afec >>3);_bddbe =8-(_afec &7);if _efbg > _bddbe {_cfge =_fcba ;if _gbcbd >=_fbba {_cbcg =true ;
};}else {_cfge =_abeb ;};};if _gbcbd < _efbg {_aecee =true ;_ggddd &=_fgbcd [8-_efbg +_gbcbd ];};if !_aecee {_acee =(_gbcbd -_efbg )>>3;if _acee !=0{_bgbfd =true ;_fcacc =_gfbf .RowStride *_gddgb +((_gdab +_fgc )>>3);_agae =_gdbda .RowStride *_badf +((_afec +_fgc )>>3);
};};_bcedd =(_gdab +_gbcbd )&7;if !(_aecee ||_bcedd ==0){_dec =true ;_abgb =_fgbcd [_bcedd ];_dbeb =_gfbf .RowStride *_gddgb +((_gdab +_fgc )>>3)+_acee ;_fdbb =_gdbda .RowStride *_badf +((_afec +_fgc )>>3)+_acee ;if _bcedd > int (_gdeb ){_egef =true ;};
};switch _deaag {case PixSrc :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],_dagf ,_ggddd );
_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );_gfbf .Data [_fcacc +_gadd ]=_dagf ;
};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],_dagf ,_abgb );
_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;};};case PixNotSrc :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;
};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],^_dagf ,_ggddd );_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );
_gfbf .Data [_fcacc +_gadd ]=^_dagf ;};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};
_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],^_dagf ,_abgb );_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;};};case PixSrcOrDst :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );
};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],_dagf |_gfbf .Data [_dbfbf ],_ggddd );_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;
_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );_gfbf .Data [_fcacc +_gadd ]|=_dagf ;};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;_gbbd < _bddg ;
_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],_dagf |_gfbf .Data [_dbeb ],_abgb );_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;
};};case PixSrcAndDst :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],_dagf &_gfbf .Data [_dbfbf ],_ggddd );
_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );_gfbf .Data [_fcacc +_gadd ]&=_dagf ;
};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],_dagf &_gfbf .Data [_dbeb ],_abgb );
_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;};};case PixSrcXorDst :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;
};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],_dagf ^_gfbf .Data [_dbfbf ],_ggddd );_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );
_gfbf .Data [_fcacc +_gadd ]^=_dagf ;};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};
_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],_dagf ^_gfbf .Data [_dbeb ],_abgb );_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;};};case PixNotSrcOrDst :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;
if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],^_dagf |_gfbf .Data [_dbfbf ],_ggddd );_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;
};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );_gfbf .Data [_fcacc +_gadd ]|=^_dagf ;};_fcacc +=_gfbf .RowStride ;
_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],^_dagf |_gfbf .Data [_dbeb ],_abgb );
_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;};};case PixNotSrcAndDst :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );
};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],^_dagf &_gfbf .Data [_dbfbf ],_ggddd );_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;
_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );_gfbf .Data [_fcacc +_gadd ]&=^_dagf ;};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;_gbbd < _bddg ;
_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],^_dagf &_gfbf .Data [_dbeb ],_abgb );_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;
};};case PixSrcOrNotDst :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],_dagf |^_gfbf .Data [_dbfbf ],_ggddd );
_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );_gfbf .Data [_fcacc +_gadd ]=_dagf |^_gfbf .Data [_fcacc +_gadd ];
};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],_dagf |^_gfbf .Data [_dbeb ],_abgb );
_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;};};case PixSrcAndNotDst :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );
};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],_dagf &^_gfbf .Data [_dbfbf ],_ggddd );_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;
_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );_gfbf .Data [_fcacc +_gadd ]=_dagf &^_gfbf .Data [_fcacc +_gadd ];};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;
_gbbd < _bddg ;_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],_dagf &^_gfbf .Data [_dbeb ],_abgb );_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;
};};case PixNotPixSrcOrDst :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],^(_dagf |_gfbf .Data [_dbfbf ]),_ggddd );
_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );_gfbf .Data [_fcacc +_gadd ]=^(_dagf |_gfbf .Data [_fcacc +_gadd ]);
};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],^(_dagf |_gfbf .Data [_dbeb ]),_abgb );
_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;};};case PixNotPixSrcAndDst :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );
};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],^(_dagf &_gfbf .Data [_dbfbf ]),_ggddd );_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;
_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );_gfbf .Data [_fcacc +_gadd ]=^(_dagf &_gfbf .Data [_fcacc +_gadd ]);};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;
_gbbd < _bddg ;_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],^(_dagf &_gfbf .Data [_dbeb ]),_abgb );_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;
};};case PixNotPixSrcXorDst :if _dcgf {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{if _cfge ==_fcba {_dagf =_gdbda .Data [_ccfa ]<<_aged ;if _cbcg {_dagf =_bgbe (_dagf ,_gdbda .Data [_ccfa +1]>>_gdeb ,_baba );};}else {_dagf =_gdbda .Data [_ccfa ]>>_gdeb ;};_gfbf .Data [_dbfbf ]=_bgbe (_gfbf .Data [_dbfbf ],^(_dagf ^_gfbf .Data [_dbfbf ]),_ggddd );
_dbfbf +=_gfbf .RowStride ;_ccfa +=_gdbda .RowStride ;};};if _bgbfd {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{for _gadd =0;_gadd < _acee ;_gadd ++{_dagf =_bgbe (_gdbda .Data [_agae +_gadd ]<<_aged ,_gdbda .Data [_agae +_gadd +1]>>_gdeb ,_baba );_gfbf .Data [_fcacc +_gadd ]=^(_dagf ^_gfbf .Data [_fcacc +_gadd ]);
};_fcacc +=_gfbf .RowStride ;_agae +=_gdbda .RowStride ;};};if _dec {for _gbbd =0;_gbbd < _bddg ;_gbbd ++{_dagf =_gdbda .Data [_fdbb ]<<_aged ;if _egef {_dagf =_bgbe (_dagf ,_gdbda .Data [_fdbb +1]>>_gdeb ,_baba );};_gfbf .Data [_dbeb ]=_bgbe (_gfbf .Data [_dbeb ],^(_dagf ^_gfbf .Data [_dbeb ]),_abgb );
_dbeb +=_gfbf .RowStride ;_fdbb +=_gdbda .RowStride ;};};default:_fb .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_deaag );
return _a .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_bgfe *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_aeeg *Boxes ,_cdcdc error ){const _acff ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _bgfe ==nil {return nil ,_a .Error (_acff ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_a .Error (_acff ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _aeeg ,_cdcdc =_bgfe .connComponentsBB (connectivity );
_cdcdc !=nil {return nil ,_a .Wrap (_cdcdc ,_acff ,"");};}else {if _aeeg ,_cdcdc =_bgfe .connComponentsBitmapsBB (bms ,connectivity );_cdcdc !=nil {return nil ,_a .Wrap (_cdcdc ,_acff ,"");};};return _aeeg ,nil ;};type SizeComparison int ;type Selection struct{Height ,Width int ;
Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_eeee *Bitmap )removeBorderGeneral (_bef ,_aegb ,_fffb ,_bcfa int )(*Bitmap ,error ){const _eeeb ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _bef < 0||_aegb < 0||_fffb < 0||_bcfa < 0{return nil ,_a .Error (_eeeb ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_ceab ,_ccbf :=_eeee .Width ,_eeee .Height ;
_fdd :=_ceab -_bef -_aegb ;_cbg :=_ccbf -_fffb -_bcfa ;if _fdd <=0{return nil ,_a .Errorf (_eeeb ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_fdd );};if _cbg <=0{return nil ,_a .Errorf (_eeeb ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_cbg );
};_cfc :=New (_fdd ,_cbg );_cfc .Color =_eeee .Color ;_becf :=_cfc .RasterOperation (0,0,_fdd ,_cbg ,PixSrc ,_eeee ,_bef ,_fffb );if _becf !=nil {return nil ,_a .Wrap (_becf ,_eeeb ,"");};return _cfc ,nil ;};func _fdc (_bcc *Bitmap ,_bce *Bitmap ,_gga int )(_caeb error ){const _ecg ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _gga {case 2:_caeb =_gg (_bcc ,_bce );case 4:_caeb =_cg (_bcc ,_bce );case 8:_caeb =_faf (_bcc ,_bce );default:return _a .Error (_ecg ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _caeb !=nil {_caeb =_a .Wrap (_caeb ,_ecg ,"");};return _caeb ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;
);func _faf (_ecb ,_fg *Bitmap )(_dcc error ){const _gce ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_fag :=_fg .RowStride ;_dffe :=_ecb .RowStride ;var _be ,_dce ,_cad ,_cd ,_ge int ;for _cad =0;
_cad < _fg .Height ;_cad ++{_be =_cad *_fag ;_dce =8*_cad *_dffe ;for _cd =0;_cd < _fag ;_cd ++{if _dcc =_ecb .setEightBytes (_dce +_cd *8,_aadf [_fg .Data [_be +_cd ]]);_dcc !=nil {return _a .Wrap (_dcc ,_gce ,"");};};for _ge =1;_ge < 8;_ge ++{for _cd =0;
_cd < _dffe ;_cd ++{if _dcc =_ecb .SetByte (_dce +_ge *_dffe +_cd ,_ecb .Data [_dce +_cd ]);_dcc !=nil {return _a .Wrap (_dcc ,_gce ,"");};};};};return nil ;};func (_daed *byHeight )Swap (i ,j int ){_daed .Values [i ],_daed .Values [j ]=_daed .Values [j ],_daed .Values [i ];
if _daed .Boxes !=nil {_daed .Boxes [i ],_daed .Boxes [j ]=_daed .Boxes [j ],_daed .Boxes [i ];};};func (_dabd *Points )Add (pt *Points )error {const _eced ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _dabd ==nil {return _a .Error (_eced ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _a .Error (_eced ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_dabd =append (*_dabd ,*pt ...);return nil ;};func _dagc (_aefb ,_gddf *Bitmap ,_dbdg *Selection )(*Bitmap ,error ){const _abbg ="\u006f\u0070\u0065\u006e";
var _bcff error ;_aefb ,_bcff =_ced (_aefb ,_gddf ,_dbdg );if _bcff !=nil {return nil ,_a .Wrap (_bcff ,_abbg ,"");};_fdadd ,_bcff :=_ddgb (nil ,_gddf ,_dbdg );if _bcff !=nil {return nil ,_a .Wrap (_bcff ,_abbg ,"");};_ ,_bcff =_acce (_aefb ,_fdadd ,_dbdg );
if _bcff !=nil {return nil ,_a .Wrap (_bcff ,_abbg ,"");};return _aefb ,nil ;};func (_acccb *Bitmaps )SortByHeight (){_dfcgb :=(*byHeight )(_acccb );_eg .Sort (_dfcgb )};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;
SizeSelectIfEQ ;);func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_daf float64 ,_bfge error ){const _gdc ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _daf ,_a .Error (_gdc ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _daf ,_a .Error (_gdc ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _daf ,_a .Error (_gdc ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_ddcfe ,_egfe :=bm1 .Width ,bm1 .Height ;_bffde ,_ece :=bm2 .Width ,bm2 .Height ;
if _cefd (_ddcfe -_bffde )> maxDiffW {return 0,nil ;};if _cefd (_egfe -_ece )> maxDiffH {return 0,nil ;};var _cfdg ,_bccfa int ;if delX >=0{_cfdg =int (delX +0.5);}else {_cfdg =int (delX -0.5);};if delY >=0{_bccfa =int (delY +0.5);}else {_bccfa =int (delY -0.5);
};_agbe :=bm1 .createTemplate ();if _bfge =_agbe .RasterOperation (_cfdg ,_bccfa ,_bffde ,_ece ,PixSrc ,bm2 ,0,0);_bfge !=nil {return _daf ,_a .Wrap (_bfge ,_gdc ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _bfge =_agbe .RasterOperation (0,0,_ddcfe ,_egfe ,PixSrcAndDst ,bm1 ,0,0);
_bfge !=nil {return _daf ,_a .Wrap (_bfge ,_gdc ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_gdbd :=_agbe .countPixels ();_daf =float64 (_gdbd )*float64 (_gdbd )/(float64 (area1 )*float64 (area2 ));return _daf ,nil ;};func (_dbde *Boxes )Get (i int )(*_ec .Rectangle ,error ){const _cdd ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _dbde ==nil {return nil ,_a .Error (_cdd ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_dbde )-1{return nil ,_a .Errorf (_cdd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_dbde )[i ],nil ;};func (_ddbb *ClassedPoints )validateIntSlice ()error {const _aadab ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_ecfe :=range _ddbb .IntSlice {if _ecfe >=(_ddbb .Points .Size ()){return _a .Errorf (_aadab ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_ecfe ,_ddbb .Points .Size ());
};};return nil ;};func (_bff *Bitmap )Equals (s *Bitmap )bool {if len (_bff .Data )!=len (s .Data )||_bff .Width !=s .Width ||_bff .Height !=s .Height {return false ;};for _bfgb :=0;_bfgb < _bff .Height ;_bfgb ++{_ada :=_bfgb *_bff .RowStride ;for _cfe :=0;
_cfe < _bff .RowStride ;_cfe ++{if _bff .Data [_ada +_cfe ]!=s .Data [_ada +_cfe ]{return false ;};};};return true ;};func _egaeg (_eded *Bitmap ,_cdbcf ,_ggaf ,_dfcg ,_afeg int ,_aded RasterOperator ,_gacg *Bitmap ,_gfac ,_cbab int )error {var (_aecbg bool ;
_bfgab bool ;_acdgg int ;_becb int ;_cfeg int ;_aggb bool ;_cgabb byte ;_gedf int ;_fdbf int ;_cdaab int ;_cceg ,_bddf int ;);_eecb :=8-(_cdbcf &7);_fcfe :=_eeeg [_eecb ];_ebbg :=_eded .RowStride *_ggaf +(_cdbcf >>3);_bded :=_gacg .RowStride *_cbab +(_gfac >>3);
if _dfcg < _eecb {_aecbg =true ;_fcfe &=_fgbcd [8-_eecb +_dfcg ];};if !_aecbg {_acdgg =(_dfcg -_eecb )>>3;if _acdgg > 0{_bfgab =true ;_becb =_ebbg +1;_cfeg =_bded +1;};};_gedf =(_cdbcf +_dfcg )&7;if !(_aecbg ||_gedf ==0){_aggb =true ;_cgabb =_fgbcd [_gedf ];
_fdbf =_ebbg +1+_acdgg ;_cdaab =_bded +1+_acdgg ;};switch _aded {case PixSrc :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],_gacg .Data [_bded ],_fcfe );_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;};if _bfgab {for _cceg =0;
_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]=_gacg .Data [_cfeg +_bddf ];};_becb +=_eded .RowStride ;_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],_gacg .Data [_cdaab ],_cgabb );
_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixNotSrc :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],^_gacg .Data [_bded ],_fcfe );_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;};if _bfgab {for _cceg =0;
_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]=^_gacg .Data [_cfeg +_bddf ];};_becb +=_eded .RowStride ;_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],^_gacg .Data [_cdaab ],_cgabb );
_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixSrcOrDst :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],_gacg .Data [_bded ]|_eded .Data [_ebbg ],_fcfe );_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;
};if _bfgab {for _cceg =0;_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]|=_gacg .Data [_cfeg +_bddf ];};_becb +=_eded .RowStride ;_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],_gacg .Data [_cdaab ]|_eded .Data [_fdbf ],_cgabb );
_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixSrcAndDst :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],_gacg .Data [_bded ]&_eded .Data [_ebbg ],_fcfe );_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;
};if _bfgab {for _cceg =0;_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]&=_gacg .Data [_cfeg +_bddf ];};_becb +=_eded .RowStride ;_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],_gacg .Data [_cdaab ]&_eded .Data [_fdbf ],_cgabb );
_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixSrcXorDst :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],_gacg .Data [_bded ]^_eded .Data [_ebbg ],_fcfe );_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;
};if _bfgab {for _cceg =0;_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]^=_gacg .Data [_cfeg +_bddf ];};_becb +=_eded .RowStride ;_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],_gacg .Data [_cdaab ]^_eded .Data [_fdbf ],_cgabb );
_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixNotSrcOrDst :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],^(_gacg .Data [_bded ])|_eded .Data [_ebbg ],_fcfe );_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;
};if _bfgab {for _cceg =0;_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]|=^(_gacg .Data [_cfeg +_bddf ]);};_becb +=_eded .RowStride ;_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],^(_gacg .Data [_cdaab ])|_eded .Data [_fdbf ],_cgabb );
_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixNotSrcAndDst :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],^(_gacg .Data [_bded ])&_eded .Data [_ebbg ],_fcfe );_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;
};if _bfgab {for _cceg =0;_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]&=^_gacg .Data [_cfeg +_bddf ];};_becb +=_eded .RowStride ;_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],^(_gacg .Data [_cdaab ])&_eded .Data [_fdbf ],_cgabb );
_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixSrcOrNotDst :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],_gacg .Data [_bded ]|^(_eded .Data [_ebbg ]),_fcfe );_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;
};if _bfgab {for _cceg =0;_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]=_gacg .Data [_cfeg +_bddf ]|^(_eded .Data [_becb +_bddf ]);};_becb +=_eded .RowStride ;_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;
_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],_gacg .Data [_cdaab ]|^(_eded .Data [_fdbf ]),_cgabb );_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixSrcAndNotDst :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],_gacg .Data [_bded ]&^(_eded .Data [_ebbg ]),_fcfe );
_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;};if _bfgab {for _cceg =0;_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]=_gacg .Data [_cfeg +_bddf ]&^(_eded .Data [_becb +_bddf ]);};_becb +=_eded .RowStride ;
_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],_gacg .Data [_cdaab ]&^(_eded .Data [_fdbf ]),_cgabb );_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixNotPixSrcOrDst :for _cceg =0;
_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],^(_gacg .Data [_bded ]|_eded .Data [_ebbg ]),_fcfe );_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;};if _bfgab {for _cceg =0;_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;
_bddf ++{_eded .Data [_becb +_bddf ]=^(_gacg .Data [_cfeg +_bddf ]|_eded .Data [_becb +_bddf ]);};_becb +=_eded .RowStride ;_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],^(_gacg .Data [_cdaab ]|_eded .Data [_fdbf ]),_cgabb );
_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixNotPixSrcAndDst :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],^(_gacg .Data [_bded ]&_eded .Data [_ebbg ]),_fcfe );_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;
};if _bfgab {for _cceg =0;_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]=^(_gacg .Data [_cfeg +_bddf ]&_eded .Data [_becb +_bddf ]);};_becb +=_eded .RowStride ;_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;
_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],^(_gacg .Data [_cdaab ]&_eded .Data [_fdbf ]),_cgabb );_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};case PixNotPixSrcXorDst :for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_ebbg ]=_bgbe (_eded .Data [_ebbg ],^(_gacg .Data [_bded ]^_eded .Data [_ebbg ]),_fcfe );
_ebbg +=_eded .RowStride ;_bded +=_gacg .RowStride ;};if _bfgab {for _cceg =0;_cceg < _afeg ;_cceg ++{for _bddf =0;_bddf < _acdgg ;_bddf ++{_eded .Data [_becb +_bddf ]=^(_gacg .Data [_cfeg +_bddf ]^_eded .Data [_becb +_bddf ]);};_becb +=_eded .RowStride ;
_cfeg +=_gacg .RowStride ;};};if _aggb {for _cceg =0;_cceg < _afeg ;_cceg ++{_eded .Data [_fdbf ]=_bgbe (_eded .Data [_fdbf ],^(_gacg .Data [_cdaab ]^_eded .Data [_fdbf ]),_cgabb );_fdbf +=_eded .RowStride ;_cdaab +=_gacg .RowStride ;};};default:_fb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_aded );
return _a .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_agee *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_aab *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _aab .addBorderGeneral (left ,right ,top ,bot ,val );};func _egfcd (_decd ,_fbae *Bitmap ,_afde ,_badg int )(_eece error ){const _cbfa ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_eagc ,_fffe ,_acaf ,_beaca int ;_cedg ,_aaada ,_dbdd ,_eebc ,_cabb ,_fdbba ,_agbb ,_ffab byte ;);for _eagc =0;_eagc < _afde ;_eagc ++{_acaf =_eagc *_decd .RowStride ;_beaca =_eagc *_fbae .RowStride ;for _fffe =0;_fffe < _badg ;_fffe ++{if _cedg ,_eece =_decd .GetByte (_acaf +_fffe );
_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _aaada ,_eece =_fbae .GetByte (_beaca +_fffe );_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _eagc > 0{if _dbdd ,_eece =_decd .GetByte (_acaf -_decd .RowStride +_fffe );_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cedg |=_dbdd |(_dbdd <<1)|(_dbdd >>1);if _fffe > 0{if _ffab ,_eece =_decd .GetByte (_acaf -_decd .RowStride +_fffe -1);
_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cedg |=_ffab <<7;};if _fffe < _badg -1{if _ffab ,_eece =_decd .GetByte (_acaf -_decd .RowStride +_fffe +1);
_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_cedg |=_ffab >>7;};};if _fffe > 0{if _eebc ,_eece =_decd .GetByte (_acaf +_fffe -1);_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u006a\u0020\u003e \u0030");
};_cedg |=_eebc <<7;};_cedg &=_aaada ;if _cedg ==0||^_cedg ==0{if _eece =_decd .SetByte (_acaf +_fffe ,_cedg );_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_agbb =_cedg ;
_cedg =(_cedg |(_cedg >>1)|(_cedg <<1))&_aaada ;if (_cedg ^_agbb )==0{if _eece =_decd .SetByte (_acaf +_fffe ,_cedg );_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _eagc =_afde -1;_eagc >=0;_eagc --{_acaf =_eagc *_decd .RowStride ;_beaca =_eagc *_fbae .RowStride ;for _fffe =_badg -1;_fffe >=0;_fffe --{if _cedg ,_eece =_decd .GetByte (_acaf +_fffe );_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _aaada ,_eece =_fbae .GetByte (_beaca +_fffe );_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _eagc < _afde -1{if _cabb ,_eece =_decd .GetByte (_acaf +_decd .RowStride +_fffe );
_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_cedg |=_cabb |(_cabb <<1)|_cabb >>1;if _fffe > 0{if _ffab ,_eece =_decd .GetByte (_acaf +_decd .RowStride +_fffe -1);
_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_cedg |=_ffab <<7;};if _fffe < _badg -1{if _ffab ,_eece =_decd .GetByte (_acaf +_decd .RowStride +_fffe +1);
_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_cedg |=_ffab >>7;};};if _fffe < _badg -1{if _fdbba ,_eece =_decd .GetByte (_acaf +_fffe +1);_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_cedg |=_fdbba >>7;};_cedg &=_aaada ;if _cedg ==0||(^_cedg )==0{if _eece =_decd .SetByte (_acaf +_fffe ,_cedg );_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_agbb =_cedg ;
_cedg =(_cedg |(_cedg >>1)|(_cedg <<1))&_aaada ;if (_cedg ^_agbb )==0{if _eece =_decd .SetByte (_acaf +_fffe ,_cedg );_eece !=nil {return _a .Wrap (_eece ,_cbfa ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func (_cbb *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _cbb .Copy (),nil ;};_dgg ,_eaa :=_cbb .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _eaa !=nil {return nil ,_a .Wrap (_eaa ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");
};return _dgg ,nil ;};func (_beag *Bitmap )addBorderGeneral (_bga ,_fdce ,_egb ,_gbfe int ,_beg int )(*Bitmap ,error ){const _efc ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _bga < 0||_fdce < 0||_egb < 0||_gbfe < 0{return nil ,_a .Error (_efc ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_bega ,_agba :=_beag .Width ,_beag .Height ;_ceae :=_bega +_bga +_fdce ;_afe :=_agba +_egb +_gbfe ;_adcb :=New (_ceae ,_afe );_adcb .Color =_beag .Color ;_fbcdf :=PixClr ;if _beg > 0{_fbcdf =PixSet ;};_abf :=_adcb .RasterOperation (0,0,_bga ,_afe ,_fbcdf ,nil ,0,0);
if _abf !=nil {return nil ,_a .Wrap (_abf ,_efc ,"\u006c\u0065\u0066\u0074");};_abf =_adcb .RasterOperation (_ceae -_fdce ,0,_fdce ,_afe ,_fbcdf ,nil ,0,0);if _abf !=nil {return nil ,_a .Wrap (_abf ,_efc ,"\u0072\u0069\u0067h\u0074");};_abf =_adcb .RasterOperation (0,0,_ceae ,_egb ,_fbcdf ,nil ,0,0);
if _abf !=nil {return nil ,_a .Wrap (_abf ,_efc ,"\u0074\u006f\u0070");};_abf =_adcb .RasterOperation (0,_afe -_gbfe ,_ceae ,_gbfe ,_fbcdf ,nil ,0,0);if _abf !=nil {return nil ,_a .Wrap (_abf ,_efc ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_abf =_adcb .RasterOperation (_bga ,_egb ,_bega ,_agba ,PixSrc ,_beag ,0,0);
if _abf !=nil {return nil ,_a .Wrap (_abf ,_efc ,"\u0063\u006f\u0070\u0079");};return _adcb ,nil ;};var (_fgbcd =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_eeeg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_eaba *Bitmap )setEightBytes (_dgbff int ,_cfbd uint64 )error {_ggf :=_eaba .RowStride -(_dgbff %_eaba .RowStride );
if _eaba .RowStride !=_eaba .Width >>3{_ggf --;};if _ggf >=8{return _eaba .setEightFullBytes (_dgbff ,_cfbd );};return _eaba .setEightPartlyBytes (_dgbff ,_ggf ,_cfbd );};type MorphOperation int ;func (_gde *Bitmap )GetByteIndex (x ,y int )int {return y *_gde .RowStride +(x >>3)};
func _abec (_dggb ,_ebaag *Bitmap ,_aaabg ,_fdfc int )(_bbcc error ){const _abga ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_dbgg ,_ebdf ,_febc ,_dega int ;_cfdeb ,_cggf ,_gacba ,_fcef ,_agbac ,_dedf ,_egad byte ;
);for _dbgg =0;_dbgg < _aaabg ;_dbgg ++{_febc =_dbgg *_dggb .RowStride ;_dega =_dbgg *_ebaag .RowStride ;for _ebdf =0;_ebdf < _fdfc ;_ebdf ++{_cfdeb ,_bbcc =_dggb .GetByte (_febc +_ebdf );if _bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_cggf ,_bbcc =_ebaag .GetByte (_dega +_ebdf );if _bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _dbgg > 0{_gacba ,_bbcc =_dggb .GetByte (_febc -_dggb .RowStride +_ebdf );if _bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"\u0069\u0020\u003e \u0030");
};_cfdeb |=_gacba ;};if _ebdf > 0{_fcef ,_bbcc =_dggb .GetByte (_febc +_ebdf -1);if _bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"\u006a\u0020\u003e \u0030");};_cfdeb |=_fcef <<7;};_cfdeb &=_cggf ;if _cfdeb ==0||(^_cfdeb )==0{if _bbcc =_dggb .SetByte (_febc +_ebdf ,_cfdeb );
_bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_egad =_cfdeb ;_cfdeb =(_cfdeb |(_cfdeb >>1)|(_cfdeb <<1))&_cggf ;if (_cfdeb ^_egad )==0{if _bbcc =_dggb .SetByte (_febc +_ebdf ,_cfdeb );
_bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _dbgg =_aaabg -1;_dbgg >=0;_dbgg --{_febc =_dbgg *_dggb .RowStride ;_dega =_dbgg *_ebaag .RowStride ;
for _ebdf =_fdfc -1;_ebdf >=0;_ebdf --{if _cfdeb ,_bbcc =_dggb .GetByte (_febc +_ebdf );_bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _cggf ,_bbcc =_ebaag .GetByte (_dega +_ebdf );
_bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dbgg < _aaabg -1{if _agbac ,_bbcc =_dggb .GetByte (_febc +_dggb .RowStride +_ebdf );_bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_cfdeb |=_agbac ;};if _ebdf < _fdfc -1{if _dedf ,_bbcc =_dggb .GetByte (_febc +_ebdf +1);_bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_cfdeb |=_dedf >>7;
};_cfdeb &=_cggf ;if _cfdeb ==0||(^_cfdeb )==0{if _bbcc =_dggb .SetByte (_febc +_ebdf ,_cfdeb );_bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_egad =_cfdeb ;_cfdeb =(_cfdeb |(_cfdeb >>1)|(_cfdeb <<1))&_cggf ;if (_cfdeb ^_egad )==0{if _bbcc =_dggb .SetByte (_febc +_ebdf ,_cfdeb );_bbcc !=nil {return _a .Wrap (_bbcc ,_abga ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_dfbe *Selection )findMaxTranslations ()(_agbc ,_cggfc ,_affc ,_dcab int ){for _dfbc :=0;_dfbc < _dfbe .Height ;_dfbc ++{for _agdcg :=0;_agdcg < _dfbe .Width ;_agdcg ++{if _dfbe .Data [_dfbc ][_agdcg ]==SelHit {_agbc =_gcaa (_agbc ,_dfbe .Cx -_agdcg );
_cggfc =_gcaa (_cggfc ,_dfbe .Cy -_dfbc );_affc =_gcaa (_affc ,_agdcg -_dfbe .Cx );_dcab =_gcaa (_dcab ,_dfbc -_dfbe .Cy );};};};return _agbc ,_cggfc ,_affc ,_dcab ;};func _gcaa (_efb ,_fadd int )int {if _efb > _fadd {return _efb ;};return _fadd ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_dadaa :=_gaaeda (h ,w ,"");
_dadaa .setOrigin (cy ,cx );var _dafg ,_cdfd int ;for _dafg =0;_dafg < h ;_dafg ++{for _cdfd =0;_cdfd < w ;_cdfd ++{_dadaa .Data [_dafg ][_cdfd ]=tp ;};};return _dadaa ;};func _fad (_egd ,_ceb *Bitmap ,_dda int ,_ead []byte ,_bacf int )(_bab error ){const _fcd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_aed ,_cdg ,_gcd ,_cgb ,_cgbc ,_dee ,_fgg ,_abc int ;_ebf ,_gfde uint32 ;_geac ,_gdd byte ;_aebbe uint16 ;);_ecba :=make ([]byte ,4);_agcb :=make ([]byte ,4);for _gcd =0;_gcd < _egd .Height -1;_gcd ,_cgb =_gcd +2,_cgb +1{_aed =_gcd *_egd .RowStride ;
_cdg =_cgb *_ceb .RowStride ;for _cgbc ,_dee =0,0;_cgbc < _bacf ;_cgbc ,_dee =_cgbc +4,_dee +1{for _fgg =0;_fgg < 4;_fgg ++{_abc =_aed +_cgbc +_fgg ;if _abc <=len (_egd .Data )-1&&_abc < _aed +_egd .RowStride {_ecba [_fgg ]=_egd .Data [_abc ];}else {_ecba [_fgg ]=0x00;
};_abc =_aed +_egd .RowStride +_cgbc +_fgg ;if _abc <=len (_egd .Data )-1&&_abc < _aed +(2*_egd .RowStride ){_agcb [_fgg ]=_egd .Data [_abc ];}else {_agcb [_fgg ]=0x00;};};_ebf =_dd .BigEndian .Uint32 (_ecba );_gfde =_dd .BigEndian .Uint32 (_agcb );_gfde &=_ebf ;
_gfde &=_gfde <<1;_gfde &=0xaaaaaaaa;_ebf =_gfde |(_gfde <<7);_geac =byte (_ebf >>24);_gdd =byte ((_ebf >>8)&0xff);_abc =_cdg +_dee ;if _abc +1==len (_ceb .Data )-1||_abc +1>=_cdg +_ceb .RowStride {_ceb .Data [_abc ]=_ead [_geac ];if _bab =_ceb .SetByte (_abc ,_ead [_geac ]);
_bab !=nil {return _a .Wrapf (_bab ,_fcd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_abc );};}else {_aebbe =(uint16 (_ead [_geac ])<<8)|uint16 (_ead [_gdd ]);if _bab =_ceb .setTwoBytes (_abc ,_aebbe );_bab !=nil {return _a .Wrapf (_bab ,_fcd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_abc );
};_dee ++;};};};return nil ;};func (_gaae *Bitmap )SetPadBits (value int ){_gaae .setPadBits (value )};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func TstWordBitmap (t *_e .T ,scale ...int )*Bitmap {_bdbc :=1;
if len (scale )> 0{_bdbc =scale [0];};_gfea :=3;_befg :=9+7+15+2*_gfea ;_gdbc :=5+_gfea +5;_fcbac :=New (_befg *_bdbc ,_gdbc *_bdbc );_bfda :=&Bitmaps {};var _ddaga *int ;_gfea *=_bdbc ;_egbc :=0;_ddaga =&_egbc ;_ffdgb :=0;_fedca :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,1*_bdbc );_fedca =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,_gfea );_fedca =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,1*_bdbc );_fedca =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,_gfea );_fedca =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,1*_bdbc );_fedca =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,1*_bdbc );_fedca =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,0);*_ddaga =0;_ffdgb =5*_bdbc +_gfea ;_fedca =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,1*_bdbc );_fedca =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,_gfea );
_fedca =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,1*_bdbc );_fedca =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,1*_bdbc );_fedca =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,1*_bdbc );
_fedca =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,1*_bdbc );_fedca =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bfda ,_fedca ,_ddaga ,_ffdgb ,0);TstWriteSymbols (t ,_bfda ,_fcbac );return _fcbac ;};func _dabdf (_faddf *Bitmap ,_deac ,_bfgeg int ,_aadc ,_fdbff int ,_ddgbc RasterOperator ){var (_dfcga bool ;
_ccbd bool ;_gfcd int ;_dca int ;_bbcb int ;_afg int ;_ccfd bool ;_adfb byte ;);_efff :=8-(_deac &7);_gcecf :=_eeeg [_efff ];_fbgf :=_faddf .RowStride *_bfgeg +(_deac >>3);if _aadc < _efff {_dfcga =true ;_gcecf &=_fgbcd [8-_efff +_aadc ];};if !_dfcga {_gfcd =(_aadc -_efff )>>3;
if _gfcd !=0{_ccbd =true ;_dca =_fbgf +1;};};_bbcb =(_deac +_aadc )&7;if !(_dfcga ||_bbcb ==0){_ccfd =true ;_adfb =_fgbcd [_bbcb ];_afg =_fbgf +1+_gfcd ;};var _deaf ,_dedbb int ;switch _ddgbc {case PixClr :for _deaf =0;_deaf < _fdbff ;_deaf ++{_faddf .Data [_fbgf ]=_bgbe (_faddf .Data [_fbgf ],0x0,_gcecf );
_fbgf +=_faddf .RowStride ;};if _ccbd {for _deaf =0;_deaf < _fdbff ;_deaf ++{for _dedbb =0;_dedbb < _gfcd ;_dedbb ++{_faddf .Data [_dca +_dedbb ]=0x0;};_dca +=_faddf .RowStride ;};};if _ccfd {for _deaf =0;_deaf < _fdbff ;_deaf ++{_faddf .Data [_afg ]=_bgbe (_faddf .Data [_afg ],0x0,_adfb );
_afg +=_faddf .RowStride ;};};case PixSet :for _deaf =0;_deaf < _fdbff ;_deaf ++{_faddf .Data [_fbgf ]=_bgbe (_faddf .Data [_fbgf ],0xff,_gcecf );_fbgf +=_faddf .RowStride ;};if _ccbd {for _deaf =0;_deaf < _fdbff ;_deaf ++{for _dedbb =0;_dedbb < _gfcd ;
_dedbb ++{_faddf .Data [_dca +_dedbb ]=0xff;};_dca +=_faddf .RowStride ;};};if _ccfd {for _deaf =0;_deaf < _fdbff ;_deaf ++{_faddf .Data [_afg ]=_bgbe (_faddf .Data [_afg ],0xff,_adfb );_afg +=_faddf .RowStride ;};};case PixNotDst :for _deaf =0;_deaf < _fdbff ;
_deaf ++{_faddf .Data [_fbgf ]=_bgbe (_faddf .Data [_fbgf ],^_faddf .Data [_fbgf ],_gcecf );_fbgf +=_faddf .RowStride ;};if _ccbd {for _deaf =0;_deaf < _fdbff ;_deaf ++{for _dedbb =0;_dedbb < _gfcd ;_dedbb ++{_faddf .Data [_dca +_dedbb ]=^(_faddf .Data [_dca +_dedbb ]);
};_dca +=_faddf .RowStride ;};};if _ccfd {for _deaf =0;_deaf < _fdbff ;_deaf ++{_faddf .Data [_afg ]=_bgbe (_faddf .Data [_afg ],^_faddf .Data [_afg ],_adfb );_afg +=_faddf .RowStride ;};};};};func (_geccc *Bitmaps )String ()string {_aecf :=_ca .Builder {};
for _ ,_dabg :=range _geccc .Values {_aecf .WriteString (_dabg .String ());_aecf .WriteRune ('\n');};return _aecf .String ();};func (_edea *Bitmaps )GetBox (i int )(*_ec .Rectangle ,error ){const _agce ="\u0047\u0065\u0074\u0042\u006f\u0078";if _edea ==nil {return nil ,_a .Error (_agce ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_edea .Boxes )-1{return nil ,_a .Errorf (_agce ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _edea .Boxes [i ],nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_bgbf :=make ([]Point ,len (bms ));
_gafb :=_ffce ();_cefe :=_accfa ();var _agea error ;for _ccgcf ,_aacc :=range bms {_bgbf [_ccgcf ],_agea =_aacc .centroid (_gafb ,_cefe );if _agea !=nil {return nil ,_agea ;};};_caecd :=Points (_bgbf );return &_caecd ,nil ;};func _egcf (_cfcb *_g .Stack ,_abbcb ,_cac ,_decb ,_addb ,_deafe int ,_aaaaa *_ec .Rectangle )(_cabc error ){const _eabb ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _cfcb ==nil {return _a .Error (_eabb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _aaaaa ==nil {return _a .Error (_eabb ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_aaaaa .Min .X =_g .Min (_aaaaa .Min .X ,_abbcb );_aaaaa .Max .X =_g .Max (_aaaaa .Max .X ,_cac );_aaaaa .Min .Y =_g .Min (_aaaaa .Min .Y ,_decb );_aaaaa .Max .Y =_g .Max (_aaaaa .Max .Y ,_decb );if !(_decb +_addb >=0&&_decb +_addb <=_deafe ){return nil ;
};if _cfcb .Aux ==nil {return _a .Error (_eabb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _eebca *fillSegment ;_fgacgf ,_cabd :=_cfcb .Aux .Pop ();if _cabd {if _eebca ,_cabd =_fgacgf .(*fillSegment );
!_cabd {return _a .Error (_eabb ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_eebca =&fillSegment {};
};_eebca ._caae =_abbcb ;_eebca ._cgcd =_cac ;_eebca ._gagg =_decb ;_eebca ._dgca =_addb ;_cfcb .Push (_eebca );return nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_ec .Rectangle ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_eegb bool ,_dabf error ){const _gbgg ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_dbgc ,_feeg :=p1 .Width ,p1 .Height ;_ebfe ,_cdcf :=p3 .Width ,p3 .Height ;if _g .Abs (_dbgc -_ebfe )> maxDiffW {return false ,nil ;};if _g .Abs (_feeg -_cdcf )> maxDiffH {return false ,nil ;};_bdae :=int (float32 (area1 )*(1.0-rank )+0.5);_geea :=int (float32 (area3 )*(1.0-rank )+0.5);
var _geaf ,_dfag int ;if delX >=0{_geaf =int (delX +0.5);}else {_geaf =int (delX -0.5);};if delY >=0{_dfag =int (delY +0.5);}else {_dfag =int (delY -0.5);};_bbgg :=p1 .CreateTemplate ();if _dabf =_bbgg .RasterOperation (0,0,_dbgc ,_feeg ,PixSrc ,p1 ,0,0);
_dabf !=nil {return false ,_a .Wrap (_dabf ,_gbgg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dabf =_bbgg .RasterOperation (_geaf ,_dfag ,_dbgc ,_feeg ,PixNotSrcAndDst ,p4 ,0,0);_dabf !=nil {return false ,_a .Wrap (_dabf ,_gbgg ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_eegb ,_dabf =_bbgg .ThresholdPixelSum (_bdae ,tab8 );if _dabf !=nil {return false ,_a .Wrap (_dabf ,_gbgg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _eegb {return false ,nil ;};if _dabf =_bbgg .RasterOperation (_geaf ,_dfag ,_ebfe ,_cdcf ,PixSrc ,p3 ,0,0);
_dabf !=nil {return false ,_a .Wrap (_dabf ,_gbgg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dabf =_bbgg .RasterOperation (0,0,_ebfe ,_cdcf ,PixNotSrcAndDst ,p2 ,0,0);_dabf !=nil {return false ,_a .Wrap (_dabf ,_gbgg ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_eegb ,_dabf =_bbgg .ThresholdPixelSum (_geea ,tab8 );if _dabf !=nil {return false ,_a .Wrap (_dabf ,_gbgg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_eegb ,nil ;};func _ecfc (_cfa ,_ffg *Bitmap ,_febe CombinationOperator )*Bitmap {_fgfg :=New (_cfa .Width ,_cfa .Height );
for _fegd :=0;_fegd < len (_fgfg .Data );_fegd ++{_fgfg .Data [_fegd ]=_ebbd (_cfa .Data [_fegd ],_ffg .Data [_fegd ],_febe );};return _fgfg ;};func (_gcfd *BitmapsArray )AddBitmaps (bm *Bitmaps ){_gcfd .Values =append (_gcfd .Values ,bm )};func TstISymbol (t *_e .T ,scale ...int )*Bitmap {_dgfa ,_eade :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});
_c .NoError (t ,_eade );return TstGetScaledSymbol (t ,_dgfa ,scale ...);};func TstGetScaledSymbol (t *_e .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_ffge ,_aadce :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_c .NoError (t ,_aadce );return _ffge ;};func (_gae *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _gae .Copy (),nil ;};_ccb ,_deeg :=_gae .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _deeg !=nil {return nil ,_a .Wrap (_deeg ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");
};return _ccb ,nil ;};func (_cbbbe Points )GetIntX (i int )(int ,error ){if i >=len (_cbbbe ){return 0,_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_cbbbe [i ].X ),nil ;};var MorphBC BoundaryCondition ;func (_adgg *Bitmap )countPixels ()int {var (_geab int ;_dfgd uint8 ;_dfb byte ;_ebc int ;);_ega :=_adgg .RowStride ;_cgab :=uint (_adgg .Width &0x07);if _cgab !=0{_dfgd =uint8 ((0xff<<(8-_cgab ))&0xff);
_ega --;};for _affg :=0;_affg < _adgg .Height ;_affg ++{for _ebc =0;_ebc < _ega ;_ebc ++{_dfb =_adgg .Data [_affg *_adgg .RowStride +_ebc ];_geab +=int (_cebb [_dfb ]);};if _cgab !=0{_geab +=int (_cebb [_adgg .Data [_affg *_adgg .RowStride +_ebc ]&_dfgd ]);
};};return _geab ;};func (_fegbg *Bitmap )nextOnPixel (_gcbf ,_bbebf int )(_babe _ec .Point ,_eege bool ,_cadb error ){const _bcaa ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_babe ,_eege ,_cadb =_fegbg .nextOnPixelLow (_fegbg .Width ,_fegbg .Height ,_fegbg .RowStride ,_gcbf ,_bbebf );
if _cadb !=nil {return _babe ,false ,_a .Wrap (_cadb ,_bcaa ,"");};return _babe ,_eege ,nil ;};func TstDSymbol (t *_e .T ,scale ...int )*Bitmap {_beacf ,_feae :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_c .NoError (t ,_feae );return TstGetScaledSymbol (t ,_beacf ,scale ...);
};type ClassedPoints struct{*Points ;_g .IntSlice ;_bbbd func (_faca ,_cdcfc int )bool ;};func _fbb (_add *Bitmap ,_cge int )(*Bitmap ,error ){const _gee ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _add ==nil {return nil ,_a .Error (_gee ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cge ==1{return _cee (nil ,_add );};if _cge !=2&&_cge !=4&&_cge !=8{return nil ,_a .Error (_gee ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_bdc :=_cge *_add .Width ;_gca :=_cge *_add .Height ;_bac :=New (_bdc ,_gca );var _cce error ;switch _cge {case 2:_cce =_gg (_bac ,_add );case 4:_cce =_cg (_bac ,_add );case 8:_cce =_faf (_bac ,_add );};if _cce !=nil {return nil ,_a .Wrap (_cce ,_gee ,"");
};return _bac ,nil ;};func Rect (x ,y ,w ,h int )(*_ec .Rectangle ,error ){const _adge ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_a .Errorf (_adge ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_a .Error (_adge ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_aaad :=_ec .Rect (x ,y ,x +w ,y +h );return &_aaad ,nil ;
};func (_bgeb *Bitmaps )selectByIndicator (_adga *_g .NumSlice )(_beadd *Bitmaps ,_dedda error ){const _cfeda ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _bgeb ==nil {return nil ,_a .Error (_cfeda ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _adga ==nil {return nil ,_a .Error (_cfeda ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_bgeb .Values )==0{return _bgeb ,nil ;};if len (*_adga )!=len (_bgeb .Values ){return nil ,_a .Errorf (_cfeda ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_adga ),len (_bgeb .Values ));
};var _dffebg ,_bebe ,_aabf int ;for _bebe =0;_bebe < len (*_adga );_bebe ++{if _dffebg ,_dedda =_adga .GetInt (_bebe );_dedda !=nil {return nil ,_a .Wrap (_dedda ,_cfeda ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _dffebg ==1{_aabf ++;
};};if _aabf ==len (_bgeb .Values ){return _bgeb ,nil ;};_beadd =&Bitmaps {};_cded :=len (_bgeb .Values )==len (_bgeb .Boxes );for _bebe =0;_bebe < len (*_adga );_bebe ++{if _dffebg =int ((*_adga )[_bebe ]);_dffebg ==0{continue ;};_beadd .Values =append (_beadd .Values ,_bgeb .Values [_bebe ]);
if _cded {_beadd .Boxes =append (_beadd .Boxes ,_bgeb .Boxes [_bebe ]);};};return _beadd ,nil ;};func (_bffd *Bitmap )equivalent (_gbc *Bitmap )bool {if _bffd ==_gbc {return true ;};if !_bffd .SizesEqual (_gbc ){return false ;};_agbae :=_ecfc (_bffd ,_gbc ,CmbOpXor );
_dfbd :=_bffd .countPixels ();_bgf :=int (0.25*float32 (_dfbd ));if _agbae .thresholdPixelSum (_bgf ){return false ;};var (_cfef [9][9]int ;_ded [18][9]int ;_aaac [9][18]int ;_deegc int ;_dbgb int ;);_bec :=9;_ggeb :=_bffd .Height /_bec ;_fdg :=_bffd .Width /_bec ;
_gbff ,_dacb :=_ggeb /2,_fdg /2;if _ggeb < _fdg {_gbff =_fdg /2;_dacb =_ggeb /2;};_efa :=float64 (_gbff )*float64 (_dacb )*_df .Pi ;_fca :=int (float64 (_ggeb *_fdg /2)*0.9);_cdfc :=int (float64 (_fdg *_ggeb /2)*0.9);for _ffc :=0;_ffc < _bec ;_ffc ++{_aca :=_fdg *_ffc +_deegc ;
var _aeee int ;if _ffc ==_bec -1{_deegc =0;_aeee =_bffd .Width ;}else {_aeee =_aca +_fdg ;if ((_bffd .Width -_deegc )%_bec )> 0{_deegc ++;_aeee ++;};};for _aadb :=0;_aadb < _bec ;_aadb ++{_fcbd :=_ggeb *_aadb +_dbgb ;var _abd int ;if _aadb ==_bec -1{_dbgb =0;
_abd =_bffd .Height ;}else {_abd =_fcbd +_ggeb ;if (_bffd .Height -_dbgb )%_bec > 0{_dbgb ++;_abd ++;};};var _gba ,_edd ,_dabbe ,_egdd int ;_eagd :=(_aca +_aeee )/2;_cdcd :=(_fcbd +_abd )/2;for _bced :=_aca ;_bced < _aeee ;_bced ++{for _fbaa :=_fcbd ;_fbaa < _abd ;
_fbaa ++{if _agbae .GetPixel (_bced ,_fbaa ){if _bced < _eagd {_gba ++;}else {_edd ++;};if _fbaa < _cdcd {_egdd ++;}else {_dabbe ++;};};};};_cfef [_ffc ][_aadb ]=_gba +_edd ;_ded [_ffc *2][_aadb ]=_gba ;_ded [_ffc *2+1][_aadb ]=_edd ;_aaac [_ffc ][_aadb *2]=_egdd ;
_aaac [_ffc ][_aadb *2+1]=_dabbe ;};};for _fbec :=0;_fbec < _bec *2-1;_fbec ++{for _gbfc :=0;_gbfc < (_bec -1);_gbfc ++{var _cgff int ;for _dga :=0;_dga < 2;_dga ++{for _cbe :=0;_cbe < 2;_cbe ++{_cgff +=_ded [_fbec +_dga ][_gbfc +_cbe ];};};if _cgff > _cdfc {return false ;
};};};for _dag :=0;_dag < (_bec -1);_dag ++{for _dcdd :=0;_dcdd < ((_bec *2)-1);_dcdd ++{var _gcba int ;for _cgfg :=0;_cgfg < 2;_cgfg ++{for _egdc :=0;_egdc < 2;_egdc ++{_gcba +=_aaac [_dag +_cgfg ][_dcdd +_egdc ];};};if _gcba > _fca {return false ;};};
};for _bbfc :=0;_bbfc < (_bec -2);_bbfc ++{for _edeb :=0;_edeb < (_bec -2);_edeb ++{var _afc ,_fgd int ;for _aec :=0;_aec < 3;_aec ++{for _dfeb :=0;_dfeb < 3;_dfeb ++{if _aec ==_dfeb {_afc +=_cfef [_bbfc +_aec ][_edeb +_dfeb ];};if (2-_aec )==_dfeb {_fgd +=_cfef [_bbfc +_aec ][_edeb +_dfeb ];
};};};if _afc > _cdfc ||_fgd > _cdfc {return false ;};};};for _dbac :=0;_dbac < (_bec -1);_dbac ++{for _bcba :=0;_bcba < (_bec -1);_bcba ++{var _gfec int ;for _dgbf :=0;_dgbf < 2;_dgbf ++{for _fae :=0;_fae < 2;_fae ++{_gfec +=_cfef [_dbac +_dgbf ][_bcba +_fae ];
};};if float64 (_gfec )> _efa {return false ;};};};return true ;};func (_abacc *ClassedPoints )Less (i ,j int )bool {return _abacc ._bbbd (i ,j )};func (_eccf *Bitmaps )AddBitmap (bm *Bitmap ){_eccf .Values =append (_eccf .Values ,bm )};func TstAddSymbol (t *_e .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_dafb :=_ec .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_dafb );*x +=sym .Width +space ;};func (_geb *Bitmap )GetPixel (x ,y int )bool {_dab :=_geb .GetByteIndex (x ,y );_dea :=_geb .GetBitOffset (x );_dddc :=uint (7-_dea );if _dab > len (_geb .Data )-1{_fb .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_geb );
return false ;};if (_geb .Data [_dab ]>>_dddc )&0x01>=1{return true ;};return false ;};func _cee (_fagf ,_bccf *Bitmap )(*Bitmap ,error ){if _bccf ==nil {return nil ,_a .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bccf ==_fagf {return _fagf ,nil ;};if _fagf ==nil {_fagf =_bccf .createTemplate ();copy (_fagf .Data ,_bccf .Data );return _fagf ,nil ;};_deb :=_fagf .resizeImageData (_bccf );if _deb !=nil {return nil ,_a .Wrap (_deb ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_fagf .Text =_bccf .Text ;copy (_fagf .Data ,_bccf .Data );return _fagf ,nil ;};func _aba ()(_cebd []byte ){_cebd =make ([]byte ,256);for _bfc :=0;_bfc < 256;_bfc ++{_ace :=byte (_bfc );_cebd [_ace ]=(_ace &0x01)|((_ace &0x04)>>1)|((_ace &0x10)>>2)|((_ace &0x40)>>3)|((_ace &0x02)<<3)|((_ace &0x08)<<2)|((_ace &0x20)<<1)|(_ace &0x80);
};return _cebd ;};func Extract (roi _ec .Rectangle ,src *Bitmap )(*Bitmap ,error ){_accf :=New (roi .Dx (),roi .Dy ());_geee :=roi .Min .X &0x07;_fege :=8-_geee ;_agfa :=uint (8-_accf .Width &0x07);_bfab :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );
_fefa :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_cgfd :=_accf .RowStride ==_fefa +1-_bfab ;var _ebe int ;for _ddge :=roi .Min .Y ;_ddge < roi .Max .Y ;_ddge ++{_deba :=_bfab ;_eca :=_ebe ;switch {case _bfab ==_fefa :_abagf ,_gacd :=src .GetByte (_deba );
if _gacd !=nil {return nil ,_gacd ;};_abagf <<=uint (_geee );_gacd =_accf .SetByte (_eca ,_eebb (_agfa ,_abagf ));if _gacd !=nil {return nil ,_gacd ;};case _geee ==0:for _gdac :=_bfab ;_gdac <=_fefa ;_gdac ++{_bfbg ,_fgaa :=src .GetByte (_deba );if _fgaa !=nil {return nil ,_fgaa ;
};_deba ++;if _gdac ==_fefa &&_cgfd {_bfbg =_eebb (_agfa ,_bfbg );};_fgaa =_accf .SetByte (_eca ,_bfbg );if _fgaa !=nil {return nil ,_fgaa ;};_eca ++;};default:_dcfc :=_ceag (src ,_accf ,uint (_geee ),uint (_fege ),_agfa ,_bfab ,_fefa ,_cgfd ,_deba ,_eca );
if _dcfc !=nil {return nil ,_dcfc ;};};_bfab +=src .RowStride ;_fefa +=src .RowStride ;_ebe +=_accf .RowStride ;};return _accf ,nil ;};type LocationFilter int ;func _egda (_gcdf ,_eef ,_dfgb *Bitmap )(*Bitmap ,error ){const _ecfa ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";
if _eef ==nil {return nil ,_a .Error (_ecfa ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dfgb ==nil {return nil ,_a .Error (_ecfa ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _fagg error ;switch {case _gcdf ==_eef :if _fagg =_gcdf .RasterOperation (0,0,_eef .Width ,_eef .Height ,PixNotSrcAndDst ,_dfgb ,0,0);
_fagg !=nil {return nil ,_a .Wrap (_fagg ,_ecfa ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _gcdf ==_dfgb :if _fagg =_gcdf .RasterOperation (0,0,_eef .Width ,_eef .Height ,PixNotSrcAndDst ,_eef ,0,0);_fagg !=nil {return nil ,_a .Wrap (_fagg ,_ecfa ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_gcdf ,_fagg =_cee (_gcdf ,_eef );if _fagg !=nil {return nil ,_a .Wrap (_fagg ,_ecfa ,"");};if _fagg =_gcdf .RasterOperation (0,0,_eef .Width ,_eef .Height ,PixNotSrcAndDst ,_dfgb ,0,0);_fagg !=nil {return nil ,_a .Wrap (_fagg ,_ecfa ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _gcdf ,nil ;};func (_cbd *Bitmap )setTwoBytes (_ggc int ,_ccgg uint16 )error {if _ggc +1> len (_cbd .Data )-1{return _a .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ggc );
};_cbd .Data [_ggc ]=byte ((_ccgg &0xff00)>>8);_cbd .Data [_ggc +1]=byte (_ccgg &0xff);return nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_abce *byHeight )Less (i ,j int )bool {return _abce .Values [i ].Height < _abce .Values [j ].Height };
func (_gfgb *Bitmaps )WidthSorter ()func (_agca ,_bcbe int )bool {return func (_aadbe ,_gbae int )bool {return _gfgb .Values [_aadbe ].Width < _gfgb .Values [_gbae ].Width };};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;
Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_fcdc *Bitmap )ToImage ()_ec .Image {_cegc ,_deag :=_f .NewImage (_fcdc .Width ,_fcdc .Height ,1,1,_fcdc .Data ,nil ,nil );if _deag !=nil {_fb .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_deag );
};return _cegc ;};func (_afb *Bitmap )setPadBits (_bfdf int ){_fbcf :=8-_afb .Width %8;if _fbcf ==8{return ;};_baeg :=_afb .Width /8;_fedc :=_eeeg [_fbcf ];if _bfdf ==0{_fedc ^=_fedc ;};var _ebdg int ;for _fade :=0;_fade < _afb .Height ;_fade ++{_ebdg =_fade *_afb .RowStride +_baeg ;
if _bfdf ==0{_afb .Data [_ebdg ]&=_fedc ;}else {_afb .Data [_ebdg ]|=_fedc ;};};};type RasterOperator int ;const _cdfad =5000;func TstESymbol (t *_e .T ,scale ...int )*Bitmap {_fdee ,_feeb :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_c .NoError (t ,_feeb );
return TstGetScaledSymbol (t ,_fdee ,scale ...);};func _gaaed (_bggf ,_eaeg *Bitmap ,_dfef ,_bee ,_aadg ,_daeg ,_beae ,_adeg ,_fef ,_fga int ,_fefg CombinationOperator )error {var _gaf int ;_daaf :=func (){_gaf ++;_aadg +=_eaeg .RowStride ;_daeg +=_bggf .RowStride ;
_beae +=_bggf .RowStride };for _gaf =_dfef ;_gaf < _bee ;_daaf (){var _gda uint16 ;_cgd :=_aadg ;for _agfd :=_daeg ;_agfd <=_beae ;_agfd ++{_efcg ,_fbd :=_eaeg .GetByte (_cgd );if _fbd !=nil {return _fbd ;};_cgbg ,_fbd :=_bggf .GetByte (_agfd );if _fbd !=nil {return _fbd ;
};_gda =(_gda |uint16 (_cgbg ))<<uint (_fga );_cgbg =byte (_gda >>8);if _agfd ==_beae {_cgbg =_eebb (uint (_adeg ),_cgbg );};if _fbd =_eaeg .SetByte (_cgd ,_ebbd (_efcg ,_cgbg ,_fefg ));_fbd !=nil {return _fbd ;};_cgd ++;_gda <<=uint (_fef );};};return nil ;
};func _egg (_fgbe ,_gege *Bitmap ,_gdf ,_fcea ,_afea ,_ddcf ,_eeab ,_eega ,_dedd ,_aacb int ,_deaa CombinationOperator ,_ggec int )error {var _aegc int ;_cfed :=func (){_aegc ++;_afea +=_gege .RowStride ;_ddcf +=_fgbe .RowStride ;_eeab +=_fgbe .RowStride };
for _aegc =_gdf ;_aegc < _fcea ;_cfed (){var _eae uint16 ;_faba :=_afea ;for _geed :=_ddcf ;_geed <=_eeab ;_geed ++{_adgc ,_accg :=_gege .GetByte (_faba );if _accg !=nil {return _accg ;};_ccgc ,_accg :=_fgbe .GetByte (_geed );if _accg !=nil {return _accg ;
};_eae =(_eae |(uint16 (_ccgc )&0xff))<<uint (_aacb );_ccgc =byte (_eae >>8);if _accg =_gege .SetByte (_faba ,_ebbd (_adgc ,_ccgc ,_deaa ));_accg !=nil {return _accg ;};_faba ++;_eae <<=uint (_dedd );if _geed ==_eeab {_ccgc =byte (_eae >>(8-uint8 (_aacb )));
if _ggec !=0{_ccgc =_eebb (uint (8+_eega ),_ccgc );};_adgc ,_accg =_gege .GetByte (_faba );if _accg !=nil {return _accg ;};if _accg =_gege .SetByte (_faba ,_ebbd (_adgc ,_ccgc ,_deaa ));_accg !=nil {return _accg ;};};};};return nil ;};func _bgbe (_gfce ,_bcaf ,_fcda byte )byte {return (_gfce &^(_fcda ))|(_bcaf &_fcda )};
func TstImageBitmapData ()[]byte {return _feefe .Data };func _ccbc (_dbbe *Bitmap ,_agdf ,_abbb ,_adbc ,_gbab int ,_beba RasterOperator ,_gaga *Bitmap ,_dgad ,_dgge int )error {var (_dbbed byte ;_addg int ;_fgfb int ;_baec ,_edec int ;_dcbf ,_afeb int ;
);_acaa :=_adbc >>3;_ggac :=_adbc &7;if _ggac > 0{_dbbed =_fgbcd [_ggac ];};_addg =_gaga .RowStride *_dgge +(_dgad >>3);_fgfb =_dbbe .RowStride *_abbb +(_agdf >>3);switch _beba {case PixSrc :for _dcbf =0;_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;
_edec =_fgfb +_dcbf *_dbbe .RowStride ;for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]=_gaga .Data [_baec ];_edec ++;_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],_gaga .Data [_baec ],_dbbed );};};case PixNotSrc :for _dcbf =0;
_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]=^(_gaga .Data [_baec ]);_edec ++;_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],^_gaga .Data [_baec ],_dbbed );
};};case PixSrcOrDst :for _dcbf =0;_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]|=_gaga .Data [_baec ];_edec ++;_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],_gaga .Data [_baec ]|_dbbe .Data [_edec ],_dbbed );
};};case PixSrcAndDst :for _dcbf =0;_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]&=_gaga .Data [_baec ];_edec ++;_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],_gaga .Data [_baec ]&_dbbe .Data [_edec ],_dbbed );
};};case PixSrcXorDst :for _dcbf =0;_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]^=_gaga .Data [_baec ];_edec ++;_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],_gaga .Data [_baec ]^_dbbe .Data [_edec ],_dbbed );
};};case PixNotSrcOrDst :for _dcbf =0;_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]|=^(_gaga .Data [_baec ]);_edec ++;_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],^(_gaga .Data [_baec ])|_dbbe .Data [_edec ],_dbbed );
};};case PixNotSrcAndDst :for _dcbf =0;_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]&=^(_gaga .Data [_baec ]);_edec ++;_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],^(_gaga .Data [_baec ])&_dbbe .Data [_edec ],_dbbed );
};};case PixSrcOrNotDst :for _dcbf =0;_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]=_gaga .Data [_baec ]|^(_dbbe .Data [_edec ]);_edec ++;
_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],_gaga .Data [_baec ]|^(_dbbe .Data [_edec ]),_dbbed );};};case PixSrcAndNotDst :for _dcbf =0;_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;
for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]=_gaga .Data [_baec ]&^(_dbbe .Data [_edec ]);_edec ++;_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],_gaga .Data [_baec ]&^(_dbbe .Data [_edec ]),_dbbed );};};case PixNotPixSrcOrDst :for _dcbf =0;
_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]=^(_gaga .Data [_baec ]|_dbbe .Data [_edec ]);_edec ++;_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],^(_gaga .Data [_baec ]|_dbbe .Data [_edec ]),_dbbed );
};};case PixNotPixSrcAndDst :for _dcbf =0;_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]=^(_gaga .Data [_baec ]&_dbbe .Data [_edec ]);_edec ++;
_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],^(_gaga .Data [_baec ]&_dbbe .Data [_edec ]),_dbbed );};};case PixNotPixSrcXorDst :for _dcbf =0;_dcbf < _gbab ;_dcbf ++{_baec =_addg +_dcbf *_gaga .RowStride ;_edec =_fgfb +_dcbf *_dbbe .RowStride ;
for _afeb =0;_afeb < _acaa ;_afeb ++{_dbbe .Data [_edec ]=^(_gaga .Data [_baec ]^_dbbe .Data [_edec ]);_edec ++;_baec ++;};if _ggac > 0{_dbbe .Data [_edec ]=_bgbe (_dbbe .Data [_edec ],^(_gaga .Data [_baec ]^_dbbe .Data [_edec ]),_dbbed );};};default:_fb .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_beba );
return _a .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};type Boxes []*_ec .Rectangle ;type SizeSelection int ;func _ebdb (_dagg *Bitmap ,_eceb int )(*Bitmap ,error ){const _gfeca ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _dagg ==nil {return nil ,_a .Error (_gfeca ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _eceb <=0{return nil ,_a .Error (_gfeca ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _eceb ==1{_dfc ,_dgdc :=_cee (nil ,_dagg );if _dgdc !=nil {return nil ,_a .Wrap (_dgdc ,_gfeca ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _dfc ,nil ;};_edaf ,_ccge :=_aaa (_dagg ,_eceb ,_eceb );if _ccge !=nil {return nil ,_a .Wrap (_ccge ,_gfeca ,"");};return _edaf ,nil ;};func (_bcgc *Boxes )selectWithIndicator (_fccd *_g .NumSlice )(_ffed *Boxes ,_dedb error ){const _gcec ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _bcgc ==nil {return nil ,_a .Error (_gcec ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _fccd ==nil {return nil ,_a .Error (_gcec ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_fccd )!=len (*_bcgc ){return nil ,_a .Error (_gcec ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _ddg ,_dbdc int ;for _fdad :=0;_fdad < len (*_fccd );_fdad ++{if _ddg ,_dedb =_fccd .GetInt (_fdad );_dedb !=nil {return nil ,_a .Wrap (_dedb ,_gcec ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _ddg ==1{_dbdc ++;
};};if _dbdc ==len (*_bcgc ){return _bcgc ,nil ;};_abdg :=Boxes {};for _ecgc :=0;_ecgc < len (*_fccd );_ecgc ++{_ddg =int ((*_fccd )[_ecgc ]);if _ddg ==0{continue ;};_abdg =append (_abdg ,(*_bcgc )[_ecgc ]);};_ffed =&_abdg ;return _ffed ,nil ;};func _cecb (_edga ,_aece *Bitmap ,_cece ,_bfcg int )(*Bitmap ,error ){const _fafc ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _aece ==nil {return nil ,_a .Error (_fafc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cece < 1||_bfcg < 1{return nil ,_a .Error (_fafc ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _cece ==1&&_bfcg ==1{return _aece .Copy (),nil ;};if _cece ==1||_bfcg ==1{_ffdg :=SelCreateBrick (_bfcg ,_cece ,_bfcg /2,_cece /2,SelHit );var _fbcge error ;_edga ,_fbcge =_bgff (_edga ,_aece ,_ffdg );if _fbcge !=nil {return nil ,_a .Wrap (_fbcge ,_fafc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _edga ,nil ;};_dgaf :=SelCreateBrick (1,_cece ,0,_cece /2,SelHit );_faggc :=SelCreateBrick (_bfcg ,1,_bfcg /2,0,SelHit );_aaab ,_bgd :=_acce (nil ,_aece ,_dgaf );if _bgd !=nil {return nil ,_a .Wrap (_bgd ,_fafc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _edga ,_bgd =_acce (_edga ,_aaab ,_faggc );_bgd !=nil {return nil ,_a .Wrap (_bgd ,_fafc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_bgd =_ddgb (_aaab ,_edga ,_dgaf );_bgd !=nil {return nil ,_a .Wrap (_bgd ,_fafc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_bgd =_ddgb (_edga ,_aaab ,_faggc );_bgd !=nil {return nil ,_a .Wrap (_bgd ,_fafc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _edga ,nil ;};func (_bbg *Bitmap )GetChocolateData ()[]byte {if _bbg .Color ==Vanilla {_bbg .inverseData ();
};return _bbg .Data ;};func _ddgd (_aaae *_g .Stack )(_dffa *fillSegment ,_bfedd error ){const _ffabg ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _aaae ==nil {return nil ,_a .Error (_ffabg ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _aaae .Aux ==nil {return nil ,_a .Error (_ffabg ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_dbfdd ,_feaa :=_aaae .Pop ();if !_feaa {return nil ,nil ;};_cdgb ,_feaa :=_dbfdd .(*fillSegment );
if !_feaa {return nil ,_a .Error (_ffabg ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_dffa =&fillSegment {_cdgb ._caae ,_cdgb ._cgcd ,_cdgb ._gagg +_cdgb ._dgca ,_cdgb ._dgca };
_aaae .Aux .Push (_cdgb );return _dffa ,nil ;};const (_fcba shift =iota ;_abeb ;);func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _fdge ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_ccce ,_bde :=p1 .Width ,p1 .Height ;
_afbb ,_fdaa :=p3 .Width ,p3 .Height ;if _g .Abs (_ccce -_afbb )> maxDiffW {return false ,nil ;};if _g .Abs (_bde -_fdaa )> maxDiffH {return false ,nil ;};_cff :=int (delX +_g .Sign (delX )*0.5);_bfba :=int (delY +_g .Sign (delY )*0.5);var _aebg error ;
_gddg :=p1 .CreateTemplate ();if _aebg =_gddg .RasterOperation (0,0,_ccce ,_bde ,PixSrc ,p1 ,0,0);_aebg !=nil {return false ,_a .Wrap (_aebg ,_fdge ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _aebg =_gddg .RasterOperation (_cff ,_bfba ,_ccce ,_bde ,PixNotSrcAndDst ,p4 ,0,0);
_aebg !=nil {return false ,_a .Wrap (_aebg ,_fdge ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _gddg .Zero (){return false ,nil ;};if _aebg =_gddg .RasterOperation (_cff ,_bfba ,_afbb ,_fdaa ,PixSrc ,p3 ,0,0);_aebg !=nil {return false ,_a .Wrap (_aebg ,_fdge ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _aebg =_gddg .RasterOperation (0,0,_afbb ,_fdaa ,PixNotSrcAndDst ,p2 ,0,0);_aebg !=nil {return false ,_a .Wrap (_aebg ,_fdge ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _gddg .Zero (),nil ;};func New (width ,height int )*Bitmap {_aegf :=_dgd (width ,height );
_aegf .Data =make ([]byte ,height *_aegf .RowStride );return _aegf ;};func (_fbea *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_aeea *Boxes ,_fcbc error ){const _bge ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _fbea ==nil {return nil ,_a .Error (_bge ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_fbea )==0{return _fbea ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_a .Errorf (_bge ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_a .Errorf (_bge ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_gcegcd :=_fbea .makeSizeIndicator (width ,height ,tp ,relation );_dged ,_fcbc :=_fbea .selectWithIndicator (_gcegcd );if _fcbc !=nil {return nil ,_a .Wrap (_fcbc ,_bge ,"");};return _dged ,nil ;};func (_adbd *byHeight )Len ()int {return len (_adbd .Values )};
var _ceba =[5]int {1,2,3,0,4};func (_aefc *Bitmap )GetUnpaddedData ()([]byte ,error ){_bcf :=uint (_aefc .Width &0x07);if _bcf ==0{return _aefc .Data ,nil ;};_aga :=_aefc .Width *_aefc .Height ;if _aga %8!=0{_aga >>=3;_aga ++;}else {_aga >>=3;};_ccd :=make ([]byte ,_aga );
_baa :=_da .NewWriterMSB (_ccd );const _fde ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _abe :=0;_abe < _aefc .Height ;_abe ++{for _bbeg :=0;_bbeg < _aefc .RowStride ;_bbeg ++{_ddag :=_aefc .Data [_abe *_aefc .RowStride +_bbeg ];
if _bbeg !=_aefc .RowStride -1{_gge :=_baa .WriteByte (_ddag );if _gge !=nil {return nil ,_a .Wrap (_gge ,_fde ,"");};continue ;};for _ecdg :=uint (0);_ecdg < _bcf ;_ecdg ++{_fce :=_baa .WriteBit (int (_ddag >>(7-_ecdg )&0x01));if _fce !=nil {return nil ,_a .Wrap (_fce ,_fde ,"");
};};};};return _ccd ,nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func TstImageBitmapInverseData ()[]byte {_fbac :=_feefe .Copy ();_fbac .InverseData ();return _fbac .Data ;};func (_dced *ClassedPoints )Len ()int {return _dced .IntSlice .Size ()};
func (_egfc *Bitmap )CreateTemplate ()*Bitmap {return _egfc .createTemplate ()};func (_bdde *Bitmap )ClipRectangle (box *_ec .Rectangle )(_gbf *Bitmap ,_dceb *_ec .Rectangle ,_dad error ){const _fgf ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_a .Error (_fgf ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_agb ,_dcga :=_bdde .Width ,_bdde .Height ;_egde :=_ec .Rect (0,0,_agb ,_dcga );if !box .Overlaps (_egde ){return nil ,nil ,_a .Error (_fgf ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_bddb :=box .Intersect (_egde );_bgcf ,_cda :=_bddb .Min .X ,_bddb .Min .Y ;_ceg ,_gecb :=_bddb .Dx (),_bddb .Dy ();_gbf =New (_ceg ,_gecb );_gbf .Text =_bdde .Text ;if _dad =_gbf .RasterOperation (0,0,_ceg ,_gecb ,PixSrc ,_bdde ,_bgcf ,_cda );_dad !=nil {return nil ,nil ,_a .Wrap (_dad ,_fgf ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_dceb =&_bddb ;return _gbf ,_dceb ,nil ;};func _gfbg (_aff ,_ffa *Bitmap ,_ebd int ,_gdb []byte ,_daaa int )(_geg error ){const _egfd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_bgg ,_bcb ,_adc ,_aebb ,_fabc ,_agc ,_bdb ,_aac int ;_gaa ,_gfd ,_dcg ,_cdfa uint32 ;_gea ,_gcf byte ;_fge uint16 ;);_bea :=make ([]byte ,4);_adf :=make ([]byte ,4);for _adc =0;_adc < _aff .Height -1;_adc ,_aebb =_adc +2,_aebb +1{_bgg =_adc *_aff .RowStride ;
_bcb =_aebb *_ffa .RowStride ;for _fabc ,_agc =0,0;_fabc < _daaa ;_fabc ,_agc =_fabc +4,_agc +1{for _bdb =0;_bdb < 4;_bdb ++{_aac =_bgg +_fabc +_bdb ;if _aac <=len (_aff .Data )-1&&_aac < _bgg +_aff .RowStride {_bea [_bdb ]=_aff .Data [_aac ];}else {_bea [_bdb ]=0x00;
};_aac =_bgg +_aff .RowStride +_fabc +_bdb ;if _aac <=len (_aff .Data )-1&&_aac < _bgg +(2*_aff .RowStride ){_adf [_bdb ]=_aff .Data [_aac ];}else {_adf [_bdb ]=0x00;};};_gaa =_dd .BigEndian .Uint32 (_bea );_gfd =_dd .BigEndian .Uint32 (_adf );_dcg =_gaa &_gfd ;
_dcg |=_dcg <<1;_cdfa =_gaa |_gfd ;_cdfa &=_cdfa <<1;_gfd =_dcg &_cdfa ;_gfd &=0xaaaaaaaa;_gaa =_gfd |(_gfd <<7);_gea =byte (_gaa >>24);_gcf =byte ((_gaa >>8)&0xff);_aac =_bcb +_agc ;if _aac +1==len (_ffa .Data )-1||_aac +1>=_bcb +_ffa .RowStride {if _geg =_ffa .SetByte (_aac ,_gdb [_gea ]);
_geg !=nil {return _a .Wrapf (_geg ,_egfd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_aac );};}else {_fge =(uint16 (_gdb [_gea ])<<8)|uint16 (_gdb [_gcf ]);if _geg =_ffa .setTwoBytes (_aac ,_fge );_geg !=nil {return _a .Wrapf (_geg ,_egfd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_aac );
};_agc ++;};};};return nil ;};func (_ebca Points )Size ()int {return len (_ebca )};func (_egdde *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _daaab ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _egdde ==nil {return nil ,_a .Error (_daaab ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_egdde .Values )-1{return nil ,_a .Errorf (_daaab ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _egdde .Values [i ],nil ;};func MakePixelCentroidTab8 ()[]int {return _ffce ()};func init (){const _bgffe ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_cafe =New (50,40);
var _egaae error ;_cafe ,_egaae =_cafe .AddBorder (2,1);if _egaae !=nil {panic (_a .Wrap (_egaae ,_bgffe ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_feefe ,_egaae =NewWithData (50,22,_dffg );if _egaae !=nil {panic (_a .Wrap (_egaae ,_bgffe ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func _bgbaa (_bbce *Bitmap ,_edaae ,_fgbf ,_cdcg ,_gega int ,_cbbg RasterOperator ){if _edaae < 0{_cdcg +=_edaae ;_edaae =0;};_gcgg :=_edaae +_cdcg -_bbce .Width ;if _gcgg > 0{_cdcg -=_gcgg ;};if _fgbf < 0{_gega +=_fgbf ;_fgbf =0;};_fefff :=_fgbf +_gega -_bbce .Height ;
if _fefff > 0{_gega -=_fefff ;};if _cdcg <=0||_gega <=0{return ;};if (_edaae &7)==0{_abgbb (_bbce ,_edaae ,_fgbf ,_cdcg ,_gega ,_cbbg );}else {_dabdf (_bbce ,_edaae ,_fgbf ,_cdcg ,_gega ,_cbbg );};};func _acfed (_aea *Bitmap ,_fcfb *_g .Stack ,_cdbe ,_cggg int )(_fgdd *_ec .Rectangle ,_ggcd error ){const _gdea ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _aea ==nil {return nil ,_a .Error (_gdea ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fcfb ==nil {return nil ,_a .Error (_gdea ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_daegb ,_gegd :=_aea .Width ,_aea .Height ;_dgcg :=_daegb -1;_faega :=_gegd -1;if _cdbe < 0||_cdbe > _dgcg ||_cggg < 0||_cggg > _faega ||!_aea .GetPixel (_cdbe ,_cggg ){return nil ,nil ;};_cfdf :=_ec .Rect (100000,100000,0,0);if _ggcd =_egcf (_fcfb ,_cdbe ,_cdbe ,_cggg ,1,_faega ,&_cfdf );
_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ggcd =_egcf (_fcfb ,_cdbe ,_cdbe ,_cggg +1,-1,_faega ,&_cfdf );_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_cfdf .Min .X ,_cfdf .Max .X =_cdbe ,_cdbe ;_cfdf .Min .Y ,_cfdf .Max .Y =_cggg ,_cggg ;var (_decc *fillSegment ;_fggf int ;);for _fcfb .Len ()> 0{if _decc ,_ggcd =_ddgd (_fcfb );_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"");};_cggg =_decc ._gagg ;
for _cdbe =_decc ._caae -1;_cdbe >=0&&_aea .GetPixel (_cdbe ,_cggg );_cdbe --{if _ggcd =_aea .SetPixel (_cdbe ,_cggg ,0);_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _cdbe >=_decc ._caae -1{for {for _cdbe ++;
_cdbe <=_decc ._cgcd +1&&_cdbe <=_dgcg &&!_aea .GetPixel (_cdbe ,_cggg );_cdbe ++{};_fggf =_cdbe ;if !(_cdbe <=_decc ._cgcd +1&&_cdbe <=_dgcg ){break ;};for ;_cdbe <=_dgcg &&_aea .GetPixel (_cdbe ,_cggg );_cdbe ++{if _ggcd =_aea .SetPixel (_cdbe ,_cggg ,0);
_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ggcd =_egcf (_fcfb ,_fggf ,_cdbe -1,_decc ._gagg ,_decc ._dgca ,_faega ,&_cfdf );_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _cdbe > _decc ._cgcd {if _ggcd =_egcf (_fcfb ,_decc ._cgcd +1,_cdbe -1,_decc ._gagg ,-_decc ._dgca ,_faega ,&_cfdf );_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_fggf =_cdbe +1;if _fggf < _decc ._caae {if _ggcd =_egcf (_fcfb ,_fggf ,_decc ._caae -1,_decc ._gagg ,-_decc ._dgca ,_faega ,&_cfdf );_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_cdbe =_decc ._caae ;for {for ;_cdbe <=_dgcg &&_aea .GetPixel (_cdbe ,_cggg );_cdbe ++{if _ggcd =_aea .SetPixel (_cdbe ,_cggg ,0);_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ggcd =_egcf (_fcfb ,_fggf ,_cdbe -1,_decc ._gagg ,_decc ._dgca ,_faega ,&_cfdf );
_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cdbe > _decc ._cgcd {if _ggcd =_egcf (_fcfb ,_decc ._cgcd +1,_cdbe -1,_decc ._gagg ,-_decc ._dgca ,_faega ,&_cfdf );_ggcd !=nil {return nil ,_a .Wrap (_ggcd ,_gdea ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _cdbe ++;_cdbe <=_decc ._cgcd +1&&_cdbe <=_dgcg &&!_aea .GetPixel (_cdbe ,_cggg );_cdbe ++{};_fggf =_cdbe ;if !(_cdbe <=_decc ._cgcd +1&&_cdbe <=_dgcg ){break ;};};};_cfdf .Max .X ++;_cfdf .Max .Y ++;return &_cfdf ,nil ;};func _dada (_dge ,_fac ,_egfb *Bitmap )(*Bitmap ,error ){const _bdgb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";
if _fac ==nil {return nil ,_a .Error (_bdgb ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _egfb ==nil {return nil ,_a .Error (_bdgb ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dge ==_egfb {return nil ,_a .Error (_bdgb ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");
};if !_fac .SizesEqual (_egfb ){_fb .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_bdgb );
};var _fbcbf error ;if _dge ,_fbcbf =_cee (_dge ,_fac );_fbcbf !=nil {return nil ,_a .Wrap (_fbcbf ,_bdgb ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _fbcbf =_dge .RasterOperation (0,0,_dge .Width ,_dge .Height ,PixSrcXorDst ,_egfb ,0,0);
_fbcbf !=nil {return nil ,_a .Wrap (_fbcbf ,_bdgb ,"");};return _dge ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _aagf ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_a .Error (_aagf ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_a .Error (_aagf ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_a .Error (_aagf ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_a .Error (_aagf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_a .Error (_aagf ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_beec ,_fbbdb :=bm1 .Width ,bm1 .Height ;_edca ,_gdcb :=bm2 .Width ,bm2 .Height ;if _g .Abs (_beec -_edca )> maxDiffW {return false ,nil ;};if _g .Abs (_fbbdb -_gdcb )> maxDiffH {return false ,nil ;};_bbbb :=int (delX +_g .Sign (delX )*0.5);_bcda :=int (delY +_g .Sign (delY )*0.5);
_efba :=int (_df .Ceil (_df .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_fbgd :=bm2 .RowStride ;_cgaa :=_gcaa (_bcda ,0);_ebfa :=_fbbd (_gdcb +_bcda ,_fbbdb );_edbb :=bm1 .RowStride *_cgaa ;_eafa :=bm2 .RowStride *(_cgaa -_bcda );
var _bfae int ;if _ebfa <=_fbbdb {_bfae =downcount [_ebfa -1];};_bbc :=_gcaa (_bbbb ,0);_cgaeg :=_fbbd (_edca +_bbbb ,_beec );var _aebbc ,_afce int ;if _bbbb >=8{_aebbc =_bbbb >>3;_edbb +=_aebbc ;_bbc -=_aebbc <<3;_cgaeg -=_aebbc <<3;_bbbb &=7;}else if _bbbb <=-8{_afce =-((_bbbb +7)>>3);
_eafa +=_afce ;_fbgd -=_afce ;_bbbb +=_afce <<3;};var (_afbf ,_egcc ,_egaa int ;_bcfac ,_ebeb ,_ecgd byte ;);if _bbc >=_cgaeg ||_cgaa >=_ebfa {return false ,nil ;};_gcab :=(_cgaeg +7)>>3;switch {case _bbbb ==0:for _egcc =_cgaa ;_egcc < _ebfa ;_egcc ,_edbb ,_eafa =_egcc +1,_edbb +bm1 .RowStride ,_eafa +bm2 .RowStride {for _egaa =0;
_egaa < _gcab ;_egaa ++{_bcfac =bm1 .Data [_edbb +_egaa ]&bm2 .Data [_eafa +_egaa ];_afbf +=tab [_bcfac ];};if _afbf >=_efba {return true ,nil ;};if _adac :=_afbf +downcount [_egcc ]-_bfae ;_adac < _efba {return false ,nil ;};};case _bbbb > 0&&_fbgd < _gcab :for _egcc =_cgaa ;
_egcc < _ebfa ;_egcc ,_edbb ,_eafa =_egcc +1,_edbb +bm1 .RowStride ,_eafa +bm2 .RowStride {_ebeb =bm1 .Data [_edbb ];_ecgd =bm2 .Data [_eafa ]>>uint (_bbbb );_bcfac =_ebeb &_ecgd ;_afbf +=tab [_bcfac ];for _egaa =1;_egaa < _fbgd ;_egaa ++{_ebeb =bm1 .Data [_edbb +_egaa ];
_ecgd =bm2 .Data [_eafa +_egaa ]>>uint (_bbbb )|bm2 .Data [_eafa +_egaa -1]<<uint (8-_bbbb );_bcfac =_ebeb &_ecgd ;_afbf +=tab [_bcfac ];};_ebeb =bm1 .Data [_edbb +_egaa ];_ecgd =bm2 .Data [_eafa +_egaa -1]<<uint (8-_bbbb );_bcfac =_ebeb &_ecgd ;_afbf +=tab [_bcfac ];
if _afbf >=_efba {return true ,nil ;}else if _afbf +downcount [_egcc ]-_bfae < _efba {return false ,nil ;};};case _bbbb > 0&&_fbgd >=_gcab :for _egcc =_cgaa ;_egcc < _ebfa ;_egcc ,_edbb ,_eafa =_egcc +1,_edbb +bm1 .RowStride ,_eafa +bm2 .RowStride {_ebeb =bm1 .Data [_edbb ];
_ecgd =bm2 .Data [_eafa ]>>uint (_bbbb );_bcfac =_ebeb &_ecgd ;_afbf +=tab [_bcfac ];for _egaa =1;_egaa < _gcab ;_egaa ++{_ebeb =bm1 .Data [_edbb +_egaa ];_ecgd =bm2 .Data [_eafa +_egaa ]>>uint (_bbbb );_ecgd |=bm2 .Data [_eafa +_egaa -1]<<uint (8-_bbbb );
_bcfac =_ebeb &_ecgd ;_afbf +=tab [_bcfac ];};if _afbf >=_efba {return true ,nil ;}else if _afbf +downcount [_egcc ]-_bfae < _efba {return false ,nil ;};};case _gcab < _fbgd :for _egcc =_cgaa ;_egcc < _ebfa ;_egcc ,_edbb ,_eafa =_egcc +1,_edbb +bm1 .RowStride ,_eafa +bm2 .RowStride {for _egaa =0;
_egaa < _gcab ;_egaa ++{_ebeb =bm1 .Data [_edbb +_egaa ];_ecgd =bm2 .Data [_eafa +_egaa ]<<uint (-_bbbb );_ecgd |=bm2 .Data [_eafa +_egaa +1]>>uint (8+_bbbb );_bcfac =_ebeb &_ecgd ;_afbf +=tab [_bcfac ];};if _afbf >=_efba {return true ,nil ;}else if _bacde :=_afbf +downcount [_egcc ]-_bfae ;
_bacde < _efba {return false ,nil ;};};case _fbgd >=_gcab :for _egcc =_cgaa ;_egcc < _ebfa ;_egcc ,_edbb ,_eafa =_egcc +1,_edbb +bm1 .RowStride ,_eafa +bm2 .RowStride {for _egaa =0;_egaa < _gcab ;_egaa ++{_ebeb =bm1 .Data [_edbb +_egaa ];_ecgd =bm2 .Data [_eafa +_egaa ]<<uint (-_bbbb );
_ecgd |=bm2 .Data [_eafa +_egaa +1]>>uint (8+_bbbb );_bcfac =_ebeb &_ecgd ;_afbf +=tab [_bcfac ];};_ebeb =bm1 .Data [_edbb +_egaa ];_ecgd =bm2 .Data [_eafa +_egaa ]<<uint (-_bbbb );_bcfac =_ebeb &_ecgd ;_afbf +=tab [_bcfac ];if _afbf >=_efba {return true ,nil ;
}else if _afbf +downcount [_egcc ]-_bfae < _efba {return false ,nil ;};};};_fbcbb :=float32 (_afbf )*float32 (_afbf )/(float32 (area1 )*float32 (area2 ));if _fbcbb >=scoreThreshold {_fb .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_afbf ,_efba ,_fbcbb ,scoreThreshold );
};return false ,nil ;};func (_cgf *Bitmap )Equivalent (s *Bitmap )bool {return _cgf .equivalent (s )};func _dgd (_dfg ,_bbe int )*Bitmap {return &Bitmap {Width :_dfg ,Height :_bbe ,RowStride :(_dfg +7)>>3};};func (_cbfb *Bitmap )connComponentsBitmapsBB (_egdb *Bitmaps ,_fadc int )(_gedc *Boxes ,_cdac error ){const _eed ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _fadc !=4&&_fadc !=8{return nil ,_a .Error (_eed ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _egdb ==nil {return nil ,_a .Error (_eed ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_egdb .Values )> 0{return nil ,_a .Error (_eed ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _cbfb .Zero (){return &Boxes {},nil ;};
var (_edaa ,_facb ,_fbecf ,_edgb *Bitmap ;);_cbfb .setPadBits (0);if _edaa ,_cdac =_cee (nil ,_cbfb );_cdac !=nil {return nil ,_a .Wrap (_cdac ,_eed ,"\u0062\u006d\u0031");};if _facb ,_cdac =_cee (nil ,_cbfb );_cdac !=nil {return nil ,_a .Wrap (_cdac ,_eed ,"\u0062\u006d\u0032");
};_egdbe :=&_g .Stack {};_egdbe .Aux =&_g .Stack {};_gedc =&Boxes {};var (_gaaae ,_fec int ;_ddf _ec .Point ;_accc bool ;_bfgag *_ec .Rectangle ;);for {if _ddf ,_accc ,_cdac =_edaa .nextOnPixel (_gaaae ,_fec );_cdac !=nil {return nil ,_a .Wrap (_cdac ,_eed ,"");
};if !_accc {break ;};if _bfgag ,_cdac =_abbc (_edaa ,_egdbe ,_ddf .X ,_ddf .Y ,_fadc );_cdac !=nil {return nil ,_a .Wrap (_cdac ,_eed ,"");};if _cdac =_gedc .Add (_bfgag );_cdac !=nil {return nil ,_a .Wrap (_cdac ,_eed ,"");};if _fbecf ,_cdac =_edaa .clipRectangle (_bfgag ,nil );
_cdac !=nil {return nil ,_a .Wrap (_cdac ,_eed ,"\u0062\u006d\u0033");};if _edgb ,_cdac =_facb .clipRectangle (_bfgag ,nil );_cdac !=nil {return nil ,_a .Wrap (_cdac ,_eed ,"\u0062\u006d\u0034");};if _ ,_cdac =_dada (_fbecf ,_fbecf ,_edgb );_cdac !=nil {return nil ,_a .Wrap (_cdac ,_eed ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _cdac =_facb .RasterOperation (_bfgag .Min .X ,_bfgag .Min .Y ,_bfgag .Dx (),_bfgag .Dy (),PixSrcXorDst ,_fbecf ,0,0);_cdac !=nil {return nil ,_a .Wrap (_cdac ,_eed ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_egdb .AddBitmap (_fbecf );_gaaae =_ddf .X ;_fec =_ddf .Y ;};_egdb .Boxes =*_gedc ;return _gedc ,nil ;};func (_cdaa *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _caag ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_cdaa .IntSlice .Size (){return 0,_a .Errorf (_caag ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_cdaa .YAtIndex (i )),nil ;};func (_gged *Bitmap )setEightFullBytes (_geae int ,_adb uint64 )error {if _geae +7> len (_gged .Data )-1{return _a .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_gged .Data [_geae ]=byte ((_adb &0xff00000000000000)>>56);_gged .Data [_geae +1]=byte ((_adb &0xff000000000000)>>48);_gged .Data [_geae +2]=byte ((_adb &0xff0000000000)>>40);_gged .Data [_geae +3]=byte ((_adb &0xff00000000)>>32);_gged .Data [_geae +4]=byte ((_adb &0xff000000)>>24);
_gged .Data [_geae +5]=byte ((_adb &0xff0000)>>16);_gged .Data [_geae +6]=byte ((_adb &0xff00)>>8);_gged .Data [_geae +7]=byte (_adb &0xff);return nil ;};const (Vanilla Color =iota ;Chocolate ;);type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_ec .Rectangle ;
};func (_bagd *ClassedPoints )SortByY (){_bagd ._bbbd =_bagd .ySortFunction ();_eg .Sort (_bagd )};type Points []Point ;func TstWSymbol (t *_e .T ,scale ...int )*Bitmap {_dgdcc ,_ecab :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_c .NoError (t ,_ecab );
return TstGetScaledSymbol (t ,_dgdcc ,scale ...);};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func _aegbf (_ccddg ,_cfag *Bitmap ,_dggf ,_cfcg int )(*Bitmap ,error ){const _beece ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _cfag ==nil {return nil ,_a .Error (_beece ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dggf < 1||_cfcg < 1{return nil ,_a .Error (_beece ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _dggf ==1&&_cfcg ==1{return _cee (_ccddg ,_cfag );};if MorphBC ==SymmetricMorphBC {_eaac ,_fafb :=_cecb (_ccddg ,_cfag ,_dggf ,_cfcg );if _fafb !=nil {return nil ,_a .Wrap (_fafb ,_beece ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _eaac ,nil ;};_bceg :=_gcaa (_dggf /2,_cfcg /2);_gfee :=8*((_bceg +7)/8);_ccee ,_eefb :=_cfag .AddBorder (_gfee ,0);if _eefb !=nil {return nil ,_a .Wrapf (_eefb ,_beece ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_gfee );
};var _egdef ,_adec *Bitmap ;if _dggf ==1||_cfcg ==1{_fbdf :=SelCreateBrick (_cfcg ,_dggf ,_cfcg /2,_dggf /2,SelHit );_egdef ,_eefb =_bgff (nil ,_ccee ,_fbdf );if _eefb !=nil {return nil ,_a .Wrap (_eefb ,_beece ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_agfg :=SelCreateBrick (1,_dggf ,0,_dggf /2,SelHit );_ffae ,_adbe :=_acce (nil ,_ccee ,_agfg );if _adbe !=nil {return nil ,_a .Wrap (_adbe ,_beece ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_gbcf :=SelCreateBrick (_cfcg ,1,_cfcg /2,0,SelHit );_egdef ,_adbe =_acce (nil ,_ffae ,_gbcf );if _adbe !=nil {return nil ,_a .Wrap (_adbe ,_beece ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_adbe =_ddgb (_ffae ,_egdef ,_agfg );_adbe !=nil {return nil ,_a .Wrap (_adbe ,_beece ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_adbe =_ddgb (_egdef ,_ffae ,_gbcf );_adbe !=nil {return nil ,_a .Wrap (_adbe ,_beece ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _adec ,_eefb =_egdef .RemoveBorder (_gfee );_eefb !=nil {return nil ,_a .Wrap (_eefb ,_beece ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _ccddg ==nil {return _adec ,nil ;};if _ ,_eefb =_cee (_ccddg ,_adec );_eefb !=nil {return nil ,_eefb ;};return _ccddg ,nil ;
};func _aecg (_cgbd *Bitmap ,_fcffg *_g .Stack ,_bebc ,_beaa int )(_dbcda *_ec .Rectangle ,_egdaa error ){const _egdaaf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _cgbd ==nil {return nil ,_a .Error (_egdaaf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _fcffg ==nil {return nil ,_a .Error (_egdaaf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_aabgg ,_ffeg :=_cgbd .Width ,_cgbd .Height ;_aecc :=_aabgg -1;_defe :=_ffeg -1;if _bebc < 0||_bebc > _aecc ||_beaa < 0||_beaa > _defe ||!_cgbd .GetPixel (_bebc ,_beaa ){return nil ,nil ;
};var _ddaa *_ec .Rectangle ;_ddaa ,_egdaa =Rect (100000,100000,0,0);if _egdaa !=nil {return nil ,_a .Wrap (_egdaa ,_egdaaf ,"");};if _egdaa =_egcf (_fcffg ,_bebc ,_bebc ,_beaa ,1,_defe ,_ddaa );_egdaa !=nil {return nil ,_a .Wrap (_egdaa ,_egdaaf ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _egdaa =_egcf (_fcffg ,_bebc ,_bebc ,_beaa +1,-1,_defe ,_ddaa );_egdaa !=nil {return nil ,_a .Wrap (_egdaa ,_egdaaf ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_ddaa .Min .X ,_ddaa .Max .X =_bebc ,_bebc ;
_ddaa .Min .Y ,_ddaa .Max .Y =_beaa ,_beaa ;var (_gfbgf *fillSegment ;_dbgcf int ;);for _fcffg .Len ()> 0{if _gfbgf ,_egdaa =_ddgd (_fcffg );_egdaa !=nil {return nil ,_a .Wrap (_egdaa ,_egdaaf ,"");};_beaa =_gfbgf ._gagg ;for _bebc =_gfbgf ._caae ;_bebc >=0&&_cgbd .GetPixel (_bebc ,_beaa );
_bebc --{if _egdaa =_cgbd .SetPixel (_bebc ,_beaa ,0);_egdaa !=nil {return nil ,_a .Wrap (_egdaa ,_egdaaf ,"");};};if _bebc >=_gfbgf ._caae {for _bebc ++;_bebc <=_gfbgf ._cgcd &&_bebc <=_aecc &&!_cgbd .GetPixel (_bebc ,_beaa );_bebc ++{};_dbgcf =_bebc ;
if !(_bebc <=_gfbgf ._cgcd &&_bebc <=_aecc ){continue ;};}else {_dbgcf =_bebc +1;if _dbgcf < _gfbgf ._caae -1{if _egdaa =_egcf (_fcffg ,_dbgcf ,_gfbgf ._caae -1,_gfbgf ._gagg ,-_gfbgf ._dgca ,_defe ,_ddaa );_egdaa !=nil {return nil ,_a .Wrap (_egdaa ,_egdaaf ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_bebc =_gfbgf ._caae +1;};for {for ;_bebc <=_aecc &&_cgbd .GetPixel (_bebc ,_beaa );_bebc ++{if _egdaa =_cgbd .SetPixel (_bebc ,_beaa ,0);_egdaa !=nil {return nil ,_a .Wrap (_egdaa ,_egdaaf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _egdaa =_egcf (_fcffg ,_dbgcf ,_bebc -1,_gfbgf ._gagg ,_gfbgf ._dgca ,_defe ,_ddaa );
_egdaa !=nil {return nil ,_a .Wrap (_egdaa ,_egdaaf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bebc > _gfbgf ._cgcd +1{if _egdaa =_egcf (_fcffg ,_gfbgf ._cgcd +1,_bebc -1,_gfbgf ._gagg ,-_gfbgf ._dgca ,_defe ,_ddaa );_egdaa !=nil {return nil ,_a .Wrap (_egdaa ,_egdaaf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _bebc ++;_bebc <=_gfbgf ._cgcd &&_bebc <=_aecc &&!_cgbd .GetPixel (_bebc ,_beaa );_bebc ++{};_dbgcf =_bebc ;if !(_bebc <=_gfbgf ._cgcd &&_bebc <=_aecc ){break ;};};};_ddaa .Max .X ++;_ddaa .Max .Y ++;return _ddaa ,nil ;};func _aaa (_af *Bitmap ,_ed ,_egf int )(*Bitmap ,error ){const _gf ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _af ==nil {return nil ,_a .Error (_gf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ed <=0||_egf <=0{return nil ,_a .Error (_gf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _ed ==_egf {if _ed ==1{_dg ,_dgb :=_cee (nil ,_af );if _dgb !=nil {return nil ,_a .Wrap (_dgb ,_gf ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _dg ,nil ;};if _ed ==2||_ed ==4||_ed ==8{_gfe ,_efg :=_fbb (_af ,_ed );
if _efg !=nil {return nil ,_a .Wrap (_efg ,_gf ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _gfe ,nil ;};};_eff :=_ed *_af .Width ;_cea :=_egf *_af .Height ;_dac :=New (_eff ,_cea );_gef :=_dac .RowStride ;
var (_cdc ,_bdg ,_aef ,_ggd ,_bad int ;_fc byte ;_bg error ;);for _bdg =0;_bdg < _af .Height ;_bdg ++{_cdc =_egf *_bdg *_gef ;for _aef =0;_aef < _af .Width ;_aef ++{if _fcb :=_af .GetPixel (_aef ,_bdg );_fcb {_bad =_ed *_aef ;for _ggd =0;_ggd < _ed ;_ggd ++{_dac .setBit (_cdc *8+_bad +_ggd );
};};};for _ggd =1;_ggd < _egf ;_ggd ++{_bacd :=_cdc +_ggd *_gef ;for _bca :=0;_bca < _gef ;_bca ++{if _fc ,_bg =_dac .GetByte (_cdc +_bca );_bg !=nil {return nil ,_a .Wrapf (_bg ,_gf ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_ggd );
};if _bg =_dac .SetByte (_bacd +_bca ,_fc );_bg !=nil {return nil ,_a .Wrap (_bg ,_gf ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _dac ,nil ;};func TstOSymbol (t *_e .T ,scale ...int )*Bitmap {_fccb ,_cgffa :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_c .NoError (t ,_cgffa );return TstGetScaledSymbol (t ,_fccb ,scale ...);};func (_fefe *Points )AddPoint (x ,y float32 ){*_fefe =append (*_fefe ,Point {x ,y })};func _eebb (_dde uint ,_bgbc byte )byte {return _bgbc >>_dde <<_dde };func NewClassedPoints (points *Points ,classes _g .IntSlice )(*ClassedPoints ,error ){const _cbbbd ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_a .Error (_cbbbd ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_a .Error (_cbbbd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_aabd :=&ClassedPoints {Points :points ,IntSlice :classes };if _bbbe :=_aabd .validateIntSlice ();_bbbe !=nil {return nil ,_a .Wrap (_bbbe ,_cbbbd ,"");};return _aabd ,nil ;};