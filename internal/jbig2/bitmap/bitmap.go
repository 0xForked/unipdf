//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_gc "encoding/binary";_b "github.com/stretchr/testify/require";_gf "github.com/unidoc/unipdf/v3/common";_gg "github.com/unidoc/unipdf/v3/internal/bitwise";_ca "github.com/unidoc/unipdf/v3/internal/imageutil";_bc "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";_f "math";_ae "sort";_a "strings";_bb "testing";);func (_fdge *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _fadb ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _ebfe :=_fdge .validateIntSlice ();_ebfe !=nil {return nil ,_c .Wrap (_ebfe ,_fadb ,"");};if _fdge .IntSlice .Size ()==0{return nil ,_c .Error (_fadb ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_fdge .SortByY ();var (_dbfb []*ClassedPoints ;_ebcbf int ;);_cdbaa :=-1;var _ecb *ClassedPoints ;for _cacg :=0;_cacg < len (_fdge .IntSlice );_cacg ++{_ebcbf =int (_fdge .YAtIndex (_cacg ));if _ebcbf !=_cdbaa {_ecb =&ClassedPoints {Points :_fdge .Points };
_cdbaa =_ebcbf ;_dbfb =append (_dbfb ,_ecb );};_ecb .IntSlice =append (_ecb .IntSlice ,_fdge .IntSlice [_cacg ]);};for _ ,_eadd :=range _dbfb {_eadd .SortByX ();};return _dbfb ,nil ;};func (_bgcd *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _ffcf ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_bgcd .Values )==0{return nil ,_c .Error (_ffcf ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_bgbd :=&BitmapsArray {};_bgcd .SortByHeight ();_ddac :=-1;_bccbc :=-1;for _abdf :=0;_abdf < len (_bgcd .Values );
_abdf ++{_bbafd :=_bgcd .Values [_abdf ].Height ;if _bbafd > _ddac {_ddac =_bbafd ;_bccbc ++;_bgbd .Values =append (_bgbd .Values ,&Bitmaps {});};_bgbd .Values [_bccbc ].AddBitmap (_bgcd .Values [_abdf ]);};return _bgbd ,nil ;};func (_dgc *Bitmap )GetByteIndex (x ,y int )int {return y *_dgc .RowStride +(x >>3)};
type byWidth Bitmaps ;var _bcde [256]uint8 ;func (_ebcf *Bitmap )InverseData (){_ebcf .inverseData ()};type SizeComparison int ;func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _cdga (oldByte ,newByte ,op );};func _gcgc (_dged *Bitmap ,_egfd *Bitmap ,_cdcg *Selection )(*Bitmap ,error ){var (_bdceb *Bitmap ;
_fdce error ;);_dged ,_fdce =_dfcg (_dged ,_egfd ,_cdcg ,&_bdceb );if _fdce !=nil {return nil ,_fdce ;};if _fdce =_dged .clearAll ();_fdce !=nil {return nil ,_fdce ;};var _ecada SelectionValue ;for _geab :=0;_geab < _cdcg .Height ;_geab ++{for _adfg :=0;
_adfg < _cdcg .Width ;_adfg ++{_ecada =_cdcg .Data [_geab ][_adfg ];if _ecada ==SelHit {if _fdce =_dged .RasterOperation (_adfg -_cdcg .Cx ,_geab -_cdcg .Cy ,_egfd .Width ,_egfd .Height ,PixSrcOrDst ,_bdceb ,0,0);_fdce !=nil {return nil ,_fdce ;};};};};
return _dged ,nil ;};func (_dcf Points )XSorter ()func (_cgbfd ,_cecd int )bool {return func (_eef ,_dcbd int )bool {return _dcf [_eef ].X < _dcf [_dcbd ].X };};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _ccaa (d ,s )};func (_cede *Bitmap )resizeImageData (_cadeb *Bitmap )error {if _cadeb ==nil {return _c .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cede .SizesEqual (_cadeb ){return nil ;};_cede .Data =make ([]byte ,len (_cadeb .Data ));_cede .Width =_cadeb .Width ;_cede .Height =_cadeb .Height ;_cede .RowStride =_cadeb .RowStride ;return nil ;};func _acca (_cgag ,_bdgbe int ,_dgad string )*Selection {_afbb :=&Selection {Height :_cgag ,Width :_bdgbe ,Name :_dgad };
_afbb .Data =make ([][]SelectionValue ,_cgag );for _fbbea :=0;_fbbea < _cgag ;_fbbea ++{_afbb .Data [_fbbea ]=make ([]SelectionValue ,_bdgbe );};return _afbb ;};func _ecfb (_ebdd ,_aeaa *Bitmap ,_dfbc ,_gbef int )(*Bitmap ,error ){const _eedb ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _aeaa ==nil {return nil ,_c .Error (_eedb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dfbc < 1||_gbef < 1{return nil ,_c .Error (_eedb ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _dfbc ==1&&_gbef ==1{return _aeaa .Copy (),nil ;};if _dfbc ==1||_gbef ==1{_adf :=SelCreateBrick (_gbef ,_dfbc ,_gbef /2,_dfbc /2,SelHit );var _cbfg error ;_ebdd ,_cbfg =_aeade (_ebdd ,_aeaa ,_adf );if _cbfg !=nil {return nil ,_c .Wrap (_cbfg ,_eedb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ebdd ,nil ;};_beae :=SelCreateBrick (1,_dfbc ,0,_dfbc /2,SelHit );_befb :=SelCreateBrick (_gbef ,1,_gbef /2,0,SelHit );_fbfdc ,_cebf :=_gcgc (nil ,_aeaa ,_beae );if _cebf !=nil {return nil ,_c .Wrap (_cebf ,_eedb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ebdd ,_cebf =_gcgc (_ebdd ,_fbfdc ,_befb );_cebf !=nil {return nil ,_c .Wrap (_cebf ,_eedb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_cebf =_efeb (_fbfdc ,_ebdd ,_beae );_cebf !=nil {return nil ,_c .Wrap (_cebf ,_eedb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_cebf =_efeb (_ebdd ,_fbfdc ,_befb );_cebf !=nil {return nil ,_c .Wrap (_cebf ,_eedb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ebdd ,nil ;};func (_abdg *Bitmap )Equivalent (s *Bitmap )bool {return _abdg .equivalent (s )};func TstVSymbol (t *_bb .T ,scale ...int )*Bitmap {_dccd ,_ecdg :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});
_b .NoError (t ,_ecdg );return TstGetScaledSymbol (t ,_dccd ,scale ...);};func Rect (x ,y ,w ,h int )(*_d .Rectangle ,error ){const _eag ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_c .Errorf (_eag ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_c .Error (_eag ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_aegg :=_d .Rect (x ,y ,x +w ,y +h );return &_aegg ,nil ;
};func init (){for _dec :=0;_dec < 256;_dec ++{_bcde [_dec ]=uint8 (_dec &0x1)+(uint8 (_dec >>1)&0x1)+(uint8 (_dec >>2)&0x1)+(uint8 (_dec >>3)&0x1)+(uint8 (_dec >>4)&0x1)+(uint8 (_dec >>5)&0x1)+(uint8 (_dec >>6)&0x1)+(uint8 (_dec >>7)&0x1);};};func _dbaef (_cbceb *Bitmap ,_dgded ,_cfb ,_fdgbae ,_ddaf int ,_adeb RasterOperator ,_dadg *Bitmap ,_ebgf ,_bacc int )error {var (_ecgge bool ;
_fbfdg bool ;_fadbb int ;_fddg int ;_eabd int ;_aacb bool ;_fcda byte ;_cbgd int ;_adef int ;_bage int ;_gegee ,_aegf int ;);_efb :=8-(_dgded &7);_aefb :=_aceee [_efb ];_eacc :=_cbceb .RowStride *_cfb +(_dgded >>3);_cagd :=_dadg .RowStride *_bacc +(_ebgf >>3);
if _fdgbae < _efb {_ecgge =true ;_aefb &=_agad [8-_efb +_fdgbae ];};if !_ecgge {_fadbb =(_fdgbae -_efb )>>3;if _fadbb > 0{_fbfdg =true ;_fddg =_eacc +1;_eabd =_cagd +1;};};_cbgd =(_dgded +_fdgbae )&7;if !(_ecgge ||_cbgd ==0){_aacb =true ;_fcda =_agad [_cbgd ];
_adef =_eacc +1+_fadbb ;_bage =_cagd +1+_fadbb ;};switch _adeb {case PixSrc :for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],_dadg .Data [_cagd ],_aefb );_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;};
if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;_aegf ++{_cbceb .Data [_fddg +_aegf ]=_dadg .Data [_eabd +_aegf ];};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],_dadg .Data [_bage ],_fcda );
_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixNotSrc :for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],^_dadg .Data [_cagd ],_aefb );_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;};if _fbfdg {for _gegee =0;
_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;_aegf ++{_cbceb .Data [_fddg +_aegf ]=^_dadg .Data [_eabd +_aegf ];};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],^_dadg .Data [_bage ],_fcda );
_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixSrcOrDst :for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],_dadg .Data [_cagd ]|_cbceb .Data [_eacc ],_aefb );_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;
};if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;_aegf ++{_cbceb .Data [_fddg +_aegf ]|=_dadg .Data [_eabd +_aegf ];};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],_dadg .Data [_bage ]|_cbceb .Data [_adef ],_fcda );
_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixSrcAndDst :for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],_dadg .Data [_cagd ]&_cbceb .Data [_eacc ],_aefb );_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;
};if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;_aegf ++{_cbceb .Data [_fddg +_aegf ]&=_dadg .Data [_eabd +_aegf ];};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],_dadg .Data [_bage ]&_cbceb .Data [_adef ],_fcda );
_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixSrcXorDst :for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],_dadg .Data [_cagd ]^_cbceb .Data [_eacc ],_aefb );_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;
};if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;_aegf ++{_cbceb .Data [_fddg +_aegf ]^=_dadg .Data [_eabd +_aegf ];};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],_dadg .Data [_bage ]^_cbceb .Data [_adef ],_fcda );
_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixNotSrcOrDst :for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],^(_dadg .Data [_cagd ])|_cbceb .Data [_eacc ],_aefb );_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;
};if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;_aegf ++{_cbceb .Data [_fddg +_aegf ]|=^(_dadg .Data [_eabd +_aegf ]);};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],^(_dadg .Data [_bage ])|_cbceb .Data [_adef ],_fcda );
_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixNotSrcAndDst :for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],^(_dadg .Data [_cagd ])&_cbceb .Data [_eacc ],_aefb );_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;
};if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;_aegf ++{_cbceb .Data [_fddg +_aegf ]&=^_dadg .Data [_eabd +_aegf ];};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],^(_dadg .Data [_bage ])&_cbceb .Data [_adef ],_fcda );
_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixSrcOrNotDst :for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],_dadg .Data [_cagd ]|^(_cbceb .Data [_eacc ]),_aefb );_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;
};if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;_aegf ++{_cbceb .Data [_fddg +_aegf ]=_dadg .Data [_eabd +_aegf ]|^(_cbceb .Data [_fddg +_aegf ]);};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;
_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],_dadg .Data [_bage ]|^(_cbceb .Data [_adef ]),_fcda );_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixSrcAndNotDst :for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],_dadg .Data [_cagd ]&^(_cbceb .Data [_eacc ]),_aefb );
_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;};if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;_aegf ++{_cbceb .Data [_fddg +_aegf ]=_dadg .Data [_eabd +_aegf ]&^(_cbceb .Data [_fddg +_aegf ]);};_fddg +=_cbceb .RowStride ;
_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],_dadg .Data [_bage ]&^(_cbceb .Data [_adef ]),_fcda );_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixNotPixSrcOrDst :for _gegee =0;
_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],^(_dadg .Data [_cagd ]|_cbceb .Data [_eacc ]),_aefb );_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;};if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;
_aegf ++{_cbceb .Data [_fddg +_aegf ]=^(_dadg .Data [_eabd +_aegf ]|_cbceb .Data [_fddg +_aegf ]);};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],^(_dadg .Data [_bage ]|_cbceb .Data [_adef ]),_fcda );
_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixNotPixSrcAndDst :for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],^(_dadg .Data [_cagd ]&_cbceb .Data [_eacc ]),_aefb );_eacc +=_cbceb .RowStride ;
_cagd +=_dadg .RowStride ;};if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;_aegf ++{_cbceb .Data [_fddg +_aegf ]=^(_dadg .Data [_eabd +_aegf ]&_cbceb .Data [_fddg +_aegf ]);};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;
};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],^(_dadg .Data [_bage ]&_cbceb .Data [_adef ]),_fcda );_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};case PixNotPixSrcXorDst :for _gegee =0;
_gegee < _ddaf ;_gegee ++{_cbceb .Data [_eacc ]=_dddd (_cbceb .Data [_eacc ],^(_dadg .Data [_cagd ]^_cbceb .Data [_eacc ]),_aefb );_eacc +=_cbceb .RowStride ;_cagd +=_dadg .RowStride ;};if _fbfdg {for _gegee =0;_gegee < _ddaf ;_gegee ++{for _aegf =0;_aegf < _fadbb ;
_aegf ++{_cbceb .Data [_fddg +_aegf ]=^(_dadg .Data [_eabd +_aegf ]^_cbceb .Data [_fddg +_aegf ]);};_fddg +=_cbceb .RowStride ;_eabd +=_dadg .RowStride ;};};if _aacb {for _gegee =0;_gegee < _ddaf ;_gegee ++{_cbceb .Data [_adef ]=_dddd (_cbceb .Data [_adef ],^(_dadg .Data [_bage ]^_cbceb .Data [_adef ]),_fcda );
_adef +=_cbceb .RowStride ;_bage +=_dadg .RowStride ;};};default:_gf .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_adeb );return _c .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_egc *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _egc .Copy (),nil ;};_dbf ,_bbd :=_egc .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _bbd !=nil {return nil ,_c .Wrap (_bbd ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");
};return _dbf ,nil ;};func (_aead *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_dcgee *byWidth )Less (i ,j int )bool {return _dcgee .Values [i ].Width < _dcgee .Values [j ].Width };func (_gecf *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ecfd (_gecf ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_bgce MorphProcess )verify (_gbafe int ,_cbfc ,_ebac *int )error {const _degf ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _bgce .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_bgce .Arguments )!=2{return _c .Error (_degf ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_bcbgfa ,_edbc :=_bgce .getWidthHeight ();if _bcbgfa <=0||_edbc <=0{return _c .Error (_degf ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_eebg :=len (_bgce .Arguments );*_cbfc +=_eebg ;if _eebg < 1||_eebg > 4{return _c .Error (_degf ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _gbdd :=0;_gbdd < _eebg ;_gbdd ++{if _bgce .Arguments [_gbdd ]< 1||_bgce .Arguments [_gbdd ]> 4{return _c .Error (_degf ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_bgce .Arguments )==0{return _c .Error (_degf ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gfec :=_bgce .Arguments [0];if _gfec !=2&&_gfec !=4&&_gfec !=8{return _c .Error (_degf ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_cbfc -=_ead [_gfec /4];case MopAddBorder :if len (_bgce .Arguments )==0{return _c .Error (_degf ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bffef :=_bgce .Arguments [0];if _gbafe > 0{return _c .Error (_degf ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _bffef < 1{return _c .Error (_degf ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_ebac =_bffef ;};return nil ;};type BoundaryCondition int ;
func (_eac *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_ecff bool ,_eff error ){const _dea ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_gceaf ();
};_ffbd :=_eac .Width >>3;_agf :=_eac .Width &7;_cdea :=byte (0xff<<uint (8-_agf ));var (_gddb ,_gae ,_fff ,_aeef int ;_bbbb byte ;);for _gddb =0;_gddb < _eac .Height ;_gddb ++{_fff =_eac .RowStride *_gddb ;for _gae =0;_gae < _ffbd ;_gae ++{_bbbb ,_eff =_eac .GetByte (_fff +_gae );
if _eff !=nil {return false ,_c .Wrap (_eff ,_dea ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_aeef +=tab8 [_bbbb ];};if _agf !=0{_bbbb ,_eff =_eac .GetByte (_fff +_gae );if _eff !=nil {return false ,_c .Wrap (_eff ,_dea ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_bbbb &=_cdea ;_aeef +=tab8 [_bbbb ];};if _aeef > thresh {return true ,nil ;};};return _ecff ,nil ;};func _afab (_fga ,_dae ,_bffff *Bitmap )(*Bitmap ,error ){const _bacf ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _dae ==nil {return nil ,_c .Error (_bacf ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bffff ==nil {return nil ,_c .Error (_bacf ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _aebg error ;switch {case _fga ==_dae :if _aebg =_fga .RasterOperation (0,0,_dae .Width ,_dae .Height ,PixNotSrcAndDst ,_bffff ,0,0);
_aebg !=nil {return nil ,_c .Wrap (_aebg ,_bacf ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _fga ==_bffff :if _aebg =_fga .RasterOperation (0,0,_dae .Width ,_dae .Height ,PixNotSrcAndDst ,_dae ,0,0);_aebg !=nil {return nil ,_c .Wrap (_aebg ,_bacf ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_fga ,_aebg =_ccaa (_fga ,_dae );if _aebg !=nil {return nil ,_c .Wrap (_aebg ,_bacf ,"");};if _aebg =_fga .RasterOperation (0,0,_dae .Width ,_dae .Height ,PixNotSrcAndDst ,_bffff ,0,0);_aebg !=nil {return nil ,_c .Wrap (_aebg ,_bacf ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _fga ,nil ;};func _dfcg (_fcgd *Bitmap ,_baec *Bitmap ,_gdbf *Selection ,_ggba **Bitmap )(*Bitmap ,error ){const _cgdc ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _baec ==nil {return nil ,_c .Error (_cgdc ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _gdbf ==nil {return nil ,_c .Error (_cgdc ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_fee ,_bgdd :=_gdbf .Height ,_gdbf .Width ;if _fee ==0||_bgdd ==0{return nil ,_c .Error (_cgdc ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _fcgd ==nil {_fcgd =_baec .createTemplate ();*_ggba =_baec ;return _fcgd ,nil ;};_fcgd .Width =_baec .Width ;_fcgd .Height =_baec .Height ;_fcgd .RowStride =_baec .RowStride ;_fcgd .Color =_baec .Color ;_fcgd .Data =make ([]byte ,_baec .RowStride *_baec .Height );
if _fcgd ==_baec {*_ggba =_baec .Copy ();}else {*_ggba =_baec ;};return _fcgd ,nil ;};func (_efaa *Bitmap )nextOnPixel (_faefb ,_gagb int )(_fdaa _d .Point ,_gbde bool ,_dda error ){const _dagd ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_fdaa ,_gbde ,_dda =_efaa .nextOnPixelLow (_efaa .Width ,_efaa .Height ,_efaa .RowStride ,_faefb ,_gagb );if _dda !=nil {return _fdaa ,false ,_c .Wrap (_dda ,_dagd ,"");};return _fdaa ,_gbde ,nil ;};func (_aafd Points )GetIntY (i int )(int ,error ){if i >=len (_aafd ){return 0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_aafd [i ].Y ),nil ;};func (_fac *Bitmap )CountPixels ()int {return _fac .countPixels ()};func (_aecf *Boxes )makeSizeIndicator (_gcbf ,_bgff int ,_cbg LocationFilter ,_deg SizeComparison )*_bc .NumSlice {_ddbc :=&_bc .NumSlice {};var _dfde ,_dfbb ,_dega int ;
for _ ,_egfg :=range *_aecf {_dfde =0;_dfbb ,_dega =_egfg .Dx (),_egfg .Dy ();switch _cbg {case LocSelectWidth :if (_deg ==SizeSelectIfLT &&_dfbb < _gcbf )||(_deg ==SizeSelectIfGT &&_dfbb > _gcbf )||(_deg ==SizeSelectIfLTE &&_dfbb <=_gcbf )||(_deg ==SizeSelectIfGTE &&_dfbb >=_gcbf ){_dfde =1;
};case LocSelectHeight :if (_deg ==SizeSelectIfLT &&_dega < _bgff )||(_deg ==SizeSelectIfGT &&_dega > _bgff )||(_deg ==SizeSelectIfLTE &&_dega <=_bgff )||(_deg ==SizeSelectIfGTE &&_dega >=_bgff ){_dfde =1;};case LocSelectIfEither :if (_deg ==SizeSelectIfLT &&(_dega < _bgff ||_dfbb < _gcbf ))||(_deg ==SizeSelectIfGT &&(_dega > _bgff ||_dfbb > _gcbf ))||(_deg ==SizeSelectIfLTE &&(_dega <=_bgff ||_dfbb <=_gcbf ))||(_deg ==SizeSelectIfGTE &&(_dega >=_bgff ||_dfbb >=_gcbf )){_dfde =1;
};case LocSelectIfBoth :if (_deg ==SizeSelectIfLT &&(_dega < _bgff &&_dfbb < _gcbf ))||(_deg ==SizeSelectIfGT &&(_dega > _bgff &&_dfbb > _gcbf ))||(_deg ==SizeSelectIfLTE &&(_dega <=_bgff &&_dfbb <=_gcbf ))||(_deg ==SizeSelectIfGTE &&(_dega >=_bgff &&_dfbb >=_gcbf )){_dfde =1;
};};_ddbc .AddInt (_dfde );};return _ddbc ;};func _cfgc (_agef ,_efaf ,_aaeda *Bitmap ,_fcfe int )(*Bitmap ,error ){const _baga ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _efaf ==nil {return nil ,_c .Error (_baga ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _aaeda ==nil {return nil ,_c .Error (_baga ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _fcfe !=4&&_fcfe !=8{return nil ,_c .Error (_baga ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _dace error ;_agef ,_dace =_ccaa (_agef ,_efaf );if _dace !=nil {return nil ,_c .Wrap (_dace ,_baga ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_bcff :=_efaf .createTemplate ();_aaeda .setPadBits (0);
for _ffdde :=0;_ffdde < _ebgfg ;_ffdde ++{_bcff ,_dace =_ccaa (_bcff ,_agef );if _dace !=nil {return nil ,_c .Wrapf (_dace ,_baga ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ffdde );};if _dace =_gefe (_agef ,_aaeda ,_fcfe );
_dace !=nil {return nil ,_c .Wrapf (_dace ,_baga ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ffdde );};if _bcff .Equals (_agef ){break ;};};return _agef ,nil ;};func (_bbde *Bitmap )addPadBits ()(_gaa error ){const _ecd ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_cggb :=_bbde .Width %8;if _cggb ==0{return nil ;};_eead :=_bbde .Width /8;_ddg :=_gg .NewReader (_bbde .Data );_bab :=make ([]byte ,_bbde .Height *_bbde .RowStride );_fdeg :=_gg .NewWriterMSB (_bab );_bgd :=make ([]byte ,_eead );var (_afd int ;_eae uint64 ;
);for _afd =0;_afd < _bbde .Height ;_afd ++{if _ ,_gaa =_ddg .Read (_bgd );_gaa !=nil {return _c .Wrap (_gaa ,_ecd ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_gaa =_fdeg .Write (_bgd );_gaa !=nil {return _c .Wrap (_gaa ,_ecd ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _eae ,_gaa =_ddg .ReadBits (byte (_cggb ));_gaa !=nil {return _c .Wrap (_gaa ,_ecd ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _gaa =_fdeg .WriteByte (byte (_eae )<<uint (8-_cggb ));_gaa !=nil {return _c .Wrap (_gaa ,_ecd ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_bbde .Data =_fdeg .Data ();return nil ;};func (_bdd *Bitmap )thresholdPixelSum (_ccae int )bool {var (_agcd int ;_acfc uint8 ;_gdaf byte ;_ddaa int ;);_bebg :=_bdd .RowStride ;_cadb :=uint (_bdd .Width &0x07);if _cadb !=0{_acfc =uint8 ((0xff<<(8-_cadb ))&0xff);
_bebg --;};for _gabgb :=0;_gabgb < _bdd .Height ;_gabgb ++{for _ddaa =0;_ddaa < _bebg ;_ddaa ++{_gdaf =_bdd .Data [_gabgb *_bdd .RowStride +_ddaa ];_agcd +=int (_bcde [_gdaf ]);};if _cadb !=0{_gdaf =_bdd .Data [_gabgb *_bdd .RowStride +_ddaa ]&_acfc ;_agcd +=int (_bcde [_gdaf ]);
};if _agcd > _ccae {return true ;};};return false ;};func (_gbb *Points )AddPoint (x ,y float32 ){*_gbb =append (*_gbb ,Point {x ,y })};func (_bfcc *Bitmap )SetDefaultPixel (){for _aad :=range _bfcc .Data {_bfcc .Data [_aad ]=byte (0xff);};};func (_eeb *Bitmap )SetPadBits (value int ){_eeb .setPadBits (value )};
type Getter interface{GetBitmap ()*Bitmap ;};func (_afb *Bitmap )connComponentsBB (_dgef int )(_deag *Boxes ,_ebaf error ){const _aecd ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _dgef !=4&&_dgef !=8{return nil ,_c .Error (_aecd ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _afb .Zero (){return &Boxes {},nil ;
};_afb .setPadBits (0);_adgf ,_ebaf :=_ccaa (nil ,_afb );if _ebaf !=nil {return nil ,_c .Wrap (_ebaf ,_aecd ,"\u0062\u006d\u0031");};_gdad :=&_bc .Stack {};_gdad .Aux =&_bc .Stack {};_deag =&Boxes {};var (_bgb ,_fcfg int ;_dcdg _d .Point ;_gegc bool ;_aaae *_d .Rectangle ;
);for {if _dcdg ,_gegc ,_ebaf =_adgf .nextOnPixel (_fcfg ,_bgb );_ebaf !=nil {return nil ,_c .Wrap (_ebaf ,_aecd ,"");};if !_gegc {break ;};if _aaae ,_ebaf =_gafd (_adgf ,_gdad ,_dcdg .X ,_dcdg .Y ,_dgef );_ebaf !=nil {return nil ,_c .Wrap (_ebaf ,_aecd ,"");
};if _ebaf =_deag .Add (_aaae );_ebaf !=nil {return nil ,_c .Wrap (_ebaf ,_aecd ,"");};_fcfg =_dcdg .X ;_bgb =_dcdg .Y ;};return _deag ,nil ;};func TstImageBitmapData ()[]byte {return _ffcg .Data };func _efeb (_egdf ,_dcda *Bitmap ,_fgfe *Selection )(*Bitmap ,error ){const _gabad ="\u0065\u0072\u006fd\u0065";
var (_ceaf error ;_ebfc *Bitmap ;);_egdf ,_ceaf =_dfcg (_egdf ,_dcda ,_fgfe ,&_ebfc );if _ceaf !=nil {return nil ,_c .Wrap (_ceaf ,_gabad ,"");};if _ceaf =_egdf .setAll ();_ceaf !=nil {return nil ,_c .Wrap (_ceaf ,_gabad ,"");};var _egff SelectionValue ;
for _aega :=0;_aega < _fgfe .Height ;_aega ++{for _ffbc :=0;_ffbc < _fgfe .Width ;_ffbc ++{_egff =_fgfe .Data [_aega ][_ffbc ];if _egff ==SelHit {_ceaf =_ecfd (_egdf ,_fgfe .Cx -_ffbc ,_fgfe .Cy -_aega ,_dcda .Width ,_dcda .Height ,PixSrcAndDst ,_ebfc ,0,0);
if _ceaf !=nil {return nil ,_c .Wrap (_ceaf ,_gabad ,"");};};};};if MorphBC ==SymmetricMorphBC {return _egdf ,nil ;};_egdb ,_dab ,_caab ,_bddf :=_fgfe .findMaxTranslations ();if _egdb > 0{if _ceaf =_egdf .RasterOperation (0,0,_egdb ,_dcda .Height ,PixClr ,nil ,0,0);
_ceaf !=nil {return nil ,_c .Wrap (_ceaf ,_gabad ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _caab > 0{if _ceaf =_egdf .RasterOperation (_dcda .Width -_caab ,0,_caab ,_dcda .Height ,PixClr ,nil ,0,0);_ceaf !=nil {return nil ,_c .Wrap (_ceaf ,_gabad ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _dab > 0{if _ceaf =_egdf .RasterOperation (0,0,_dcda .Width ,_dab ,PixClr ,nil ,0,0);_ceaf !=nil {return nil ,_c .Wrap (_ceaf ,_gabad ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _bddf > 0{if _ceaf =_egdf .RasterOperation (0,_dcda .Height -_bddf ,_dcda .Width ,_bddf ,PixClr ,nil ,0,0);
_ceaf !=nil {return nil ,_c .Wrap (_ceaf ,_gabad ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _egdf ,nil ;};type Component int ;func TstFrameBitmapData ()[]byte {return _dggb .Data };type SelectionValue int ;func (_gaf *Bitmap )Equals (s *Bitmap )bool {if len (_gaf .Data )!=len (s .Data )||_gaf .Width !=s .Width ||_gaf .Height !=s .Height {return false ;
};for _aggf :=0;_aggf < _gaf .Height ;_aggf ++{_bbb :=_aggf *_gaf .RowStride ;for _ecad :=0;_ecad < _gaf .RowStride ;_ecad ++{if _gaf .Data [_bbb +_ecad ]!=s .Data [_bbb +_ecad ]{return false ;};};};return true ;};func (_fece *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_aacc *Bitmaps ,_aaafbf error ){const _caef ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _fece ==nil {return nil ,_c .Error (_caef ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_caef ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_c .Errorf (_caef ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_dadgf ,_aaafbf :=_fece .makeSizeIndicator (width ,height ,tp ,relation );if _aaafbf !=nil {return nil ,_c .Wrap (_aaafbf ,_caef ,"");};_aacc ,_aaafbf =_fece .selectByIndicator (_dadgf );if _aaafbf !=nil {return nil ,_c .Wrap (_aaafbf ,_caef ,"");};return _aacc ,nil ;
};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_fdea *Bitmap )Zero ()bool {_faae :=_fdea .Width /8;_bae :=_fdea .Width &7;var _cae byte ;if _bae !=0{_cae =byte (0xff<<uint (8-_bae ));};var _dgd ,_fce ,_dgag int ;for _fce =0;
_fce < _fdea .Height ;_fce ++{_dgd =_fdea .RowStride *_fce ;for _dgag =0;_dgag < _faae ;_dgag ,_dgd =_dgag +1,_dgd +1{if _fdea .Data [_dgd ]!=0{return false ;};};if _bae > 0{if _fdea .Data [_dgd ]&_cae !=0{return false ;};};};return true ;};func _ecba (_dcfg *_bc .Stack ,_cefab ,_bfgff ,_eafc ,_bagab ,_cead int ,_cfega *_d .Rectangle )(_ceaa error ){const _dfaf ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _dcfg ==nil {return _c .Error (_dfaf ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _cfega ==nil {return _c .Error (_dfaf ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_cfega .Min .X =_bc .Min (_cfega .Min .X ,_cefab );_cfega .Max .X =_bc .Max (_cfega .Max .X ,_bfgff );_cfega .Min .Y =_bc .Min (_cfega .Min .Y ,_eafc );_cfega .Max .Y =_bc .Max (_cfega .Max .Y ,_eafc );if !(_eafc +_bagab >=0&&_eafc +_bagab <=_cead ){return nil ;
};if _dcfg .Aux ==nil {return _c .Error (_dfaf ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _bdcfe *fillSegment ;_fcbd ,_bgae :=_dcfg .Aux .Pop ();if _bgae {if _bdcfe ,_bgae =_fcbd .(*fillSegment );
!_bgae {return _c .Error (_dfaf ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_bdcfe =&fillSegment {};
};_bdcfe ._ccfa =_cefab ;_bdcfe ._afeag =_bfgff ;_bdcfe ._eafa =_eafc ;_bdcfe ._cefee =_bagab ;_dcfg .Push (_bdcfe );return nil ;};func (_faca *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _agcab ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_faca .IntSlice .Size (){return 0,_c .Errorf (_agcab ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_faca .XAtIndex (i )),nil ;};func _bbded (_gebb ,_fcef *Bitmap ,_bfgc ,_deaga int )(*Bitmap ,error ){const _gcag ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _fcef ==nil {return nil ,_c .Error (_gcag ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bfgc < 1||_deaga < 1{return nil ,_c .Error (_gcag ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _bfgc ==1&&_deaga ==1{return _ccaa (_gebb ,_fcef );};
if MorphBC ==SymmetricMorphBC {_ddaaa ,_ggfg :=_ecfb (_gebb ,_fcef ,_bfgc ,_deaga );if _ggfg !=nil {return nil ,_c .Wrap (_ggfg ,_gcag ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _ddaaa ,nil ;};_ddcdd :=_fdeb (_bfgc /2,_deaga /2);
_fadd :=8*((_ddcdd +7)/8);_ebcb ,_aeafe :=_fcef .AddBorder (_fadd ,0);if _aeafe !=nil {return nil ,_c .Wrapf (_aeafe ,_gcag ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_fadd );};var _ggbc ,_dbbbg *Bitmap ;if _bfgc ==1||_deaga ==1{_fbd :=SelCreateBrick (_deaga ,_bfgc ,_deaga /2,_bfgc /2,SelHit );
_ggbc ,_aeafe =_aeade (nil ,_ebcb ,_fbd );if _aeafe !=nil {return nil ,_c .Wrap (_aeafe ,_gcag ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_fegf :=SelCreateBrick (1,_bfgc ,0,_bfgc /2,SelHit );
_edba ,_bade :=_gcgc (nil ,_ebcb ,_fegf );if _bade !=nil {return nil ,_c .Wrap (_bade ,_gcag ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_daff :=SelCreateBrick (_deaga ,1,_deaga /2,0,SelHit );
_ggbc ,_bade =_gcgc (nil ,_edba ,_daff );if _bade !=nil {return nil ,_c .Wrap (_bade ,_gcag ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_bade =_efeb (_edba ,_ggbc ,_fegf );
_bade !=nil {return nil ,_c .Wrap (_bade ,_gcag ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_bade =_efeb (_ggbc ,_edba ,_daff );_bade !=nil {return nil ,_c .Wrap (_bade ,_gcag ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _dbbbg ,_aeafe =_ggbc .RemoveBorder (_fadd );_aeafe !=nil {return nil ,_c .Wrap (_aeafe ,_gcag ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _gebb ==nil {return _dbbbg ,nil ;};if _ ,_aeafe =_ccaa (_gebb ,_dbbbg );_aeafe !=nil {return nil ,_aeafe ;
};return _gebb ,nil ;};func _dgdd (_edcc ,_fbcd *Bitmap ,_ecgg ,_gbgd ,_fecg ,_bbdcc ,_bcga ,_gefc ,_gdbb ,_fbcc int ,_cbcc CombinationOperator )error {var _cce int ;_deef :=func (){_cce ++;_fecg +=_fbcd .RowStride ;_bbdcc +=_edcc .RowStride ;_bcga +=_edcc .RowStride };
for _cce =_ecgg ;_cce < _gbgd ;_deef (){var _gabc uint16 ;_becg :=_fecg ;for _afc :=_bbdcc ;_afc <=_bcga ;_afc ++{_fadc ,_fcff :=_fbcd .GetByte (_becg );if _fcff !=nil {return _fcff ;};_gdafc ,_fcff :=_edcc .GetByte (_afc );if _fcff !=nil {return _fcff ;
};_gabc =(_gabc |uint16 (_gdafc ))<<uint (_fbcc );_gdafc =byte (_gabc >>8);if _afc ==_bcga {_gdafc =_aadb (uint (_gefc ),_gdafc );};if _fcff =_fbcd .SetByte (_becg ,_cdga (_fadc ,_gdafc ,_cbcc ));_fcff !=nil {return _fcff ;};_becg ++;_gabc <<=uint (_gdbb );
};};return nil ;};func New (width ,height int )*Bitmap {_ffg :=_eca (width ,height );_ffg .Data =make ([]byte ,height *_ffg .RowStride );return _ffg ;};func (_cffd *Bitmap )String ()string {var _fed ="\u000a";for _dcbc :=0;_dcbc < _cffd .Height ;_dcbc ++{var _gbaf string ;
for _bcef :=0;_bcef < _cffd .Width ;_bcef ++{_aeff :=_cffd .GetPixel (_bcef ,_dcbc );if _aeff {_gbaf +="\u0031";}else {_gbaf +="\u0030";};};_fed +=_gbaf +"\u000a";};return _fed ;};func _cecc (_eagd *Bitmap )(_daae *Bitmap ,_degad int ,_cgga error ){const _gfef ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _eagd ==nil {return nil ,0,_c .Errorf (_gfef ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _gbe ,_cgd *Bitmap ;if _gbe ,_cgga =_ccaa (nil ,_eagd );_cgga !=nil {return nil ,0,_c .Wrap (_cgga ,_gfef ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_cgf [13]int ;_dgcd ,_afge int ;);_caea :=12;_fgc :=_bc .NewNumSlice (_caea +1);_agca :=_bc .NewNumSlice (_caea +1);var _cfde *Boxes ;for _cegd :=0;_cegd <=_caea ;_cegd ++{if _cegd ==0{if _cgd ,_cgga =_ccaa (nil ,_gbe );_cgga !=nil {return nil ,0,_c .Wrap (_cgga ,_gfef ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _cgd ,_cgga =_eegcb (_gbe ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_cgga !=nil {return nil ,0,_c .Wrap (_cgga ,_gfef ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _cfde ,_cgga =_cgd .connComponentsBB (4);
_cgga !=nil {return nil ,0,_c .Wrap (_cgga ,_gfef ,"");};_cgf [_cegd ]=len (*_cfde );_fgc .AddInt (_cgf [_cegd ]);switch _cegd {case 0:_dgcd =_cgf [0];default:_afge =_cgf [_cegd -1]-_cgf [_cegd ];_agca .AddInt (_afge );};_gbe =_cgd ;};_cbcf :=true ;_fcfce :=2;
var _gccd ,_caded int ;for _fgac :=1;_fgac < len (*_agca );_fgac ++{if _gccd ,_cgga =_fgc .GetInt (_fgac );_cgga !=nil {return nil ,0,_c .Wrap (_cgga ,_gfef ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _cbcf &&_gccd < int (0.3*float32 (_dgcd )){_fcfce =_fgac +1;_cbcf =false ;};if _afge ,_cgga =_agca .GetInt (_fgac );_cgga !=nil {return nil ,0,_c .Wrap (_cgga ,_gfef ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _afge > _caded {_caded =_afge ;};};_ffgd :=_eagd .XResolution ;if _ffgd ==0{_ffgd =150;};if _ffgd > 110{_fcfce ++;};if _fcfce < 2{_gf .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_fcfce =2;};_degad =_fcfce +1;if _daae ,_cgga =_ecfb (nil ,_eagd ,_fcfce +1,1);_cgga !=nil {return nil ,0,_c .Wrap (_cgga ,_gfef ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _daae ,_degad ,nil ;
};func (_dcdc *Bitmap )setFourBytes (_efcd int ,_dbd uint32 )error {if _efcd +3> len (_dcdc .Data )-1{return _c .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_efcd );
};_dcdc .Data [_efcd ]=byte ((_dbd &0xff000000)>>24);_dcdc .Data [_efcd +1]=byte ((_dbd &0xff0000)>>16);_dcdc .Data [_efcd +2]=byte ((_dbd &0xff00)>>8);_dcdc .Data [_efcd +3]=byte (_dbd &0xff);return nil ;};func _cge (_acc *Bitmap ,_bfe int ,_adg []byte )(_aeag *Bitmap ,_bdgb error ){const _agb ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _acc ==nil {return nil ,_c .Error (_agb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bfe < 1||_bfe > 4{return nil ,_c .Error (_agb ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _acc .Height <=1{return nil ,_c .Errorf (_agb ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_acc .Height );
};_aeag =New (_acc .Width /2,_acc .Height /2);if _adg ==nil {_adg =_cebe ();};_eea :=_edgb (_acc .RowStride ,2*_aeag .RowStride );switch _bfe {case 1:_bdgb =_cda (_acc ,_aeag ,_bfe ,_adg ,_eea );case 2:_bdgb =_gdf (_acc ,_aeag ,_bfe ,_adg ,_eea );case 3:_bdgb =_dfg (_acc ,_aeag ,_bfe ,_adg ,_eea );
case 4:_bdgb =_bec (_acc ,_aeag ,_bfe ,_adg ,_eea );};if _bdgb !=nil {return nil ,_bdgb ;};return _aeag ,nil ;};func _dddd (_gbfgf ,_gggc ,_ggff byte )byte {return (_gbfgf &^(_ggff ))|(_gggc &_ggff )};func (_gaaa *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_dad *Boxes ,_bgfae error ){const _cdce ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _gaaa ==nil {return nil ,_c .Error (_cdce ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_gaaa )==0{return _gaaa ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_cdce ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_c .Errorf (_cdce ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_ddcdc :=_gaaa .makeSizeIndicator (width ,height ,tp ,relation );_gcbd ,_bgfae :=_gaaa .selectWithIndicator (_ddcdc );if _bgfae !=nil {return nil ,_c .Wrap (_bgfae ,_cdce ,"");};return _gcbd ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _eegcb (src ,sequence ...);
};func _ebea (_gfad *Bitmap ,_ffgde ,_fcad int ,_cafe ,_dedb int ,_fccc RasterOperator ,_fbfae *Bitmap ,_agbf ,_dcea int )error {var _fdd ,_edag ,_gdga ,_gagg int ;if _ffgde < 0{_agbf -=_ffgde ;_cafe +=_ffgde ;_ffgde =0;};if _agbf < 0{_ffgde -=_agbf ;_cafe +=_agbf ;
_agbf =0;};_fdd =_ffgde +_cafe -_gfad .Width ;if _fdd > 0{_cafe -=_fdd ;};_edag =_agbf +_cafe -_fbfae .Width ;if _edag > 0{_cafe -=_edag ;};if _fcad < 0{_dcea -=_fcad ;_dedb +=_fcad ;_fcad =0;};if _dcea < 0{_fcad -=_dcea ;_dedb +=_dcea ;_dcea =0;};_gdga =_fcad +_dedb -_gfad .Height ;
if _gdga > 0{_dedb -=_gdga ;};_gagg =_dcea +_dedb -_fbfae .Height ;if _gagg > 0{_dedb -=_gagg ;};if _cafe <=0||_dedb <=0{return nil ;};var _gfde error ;switch {case _ffgde &7==0&&_agbf &7==0:_gfde =_abdd (_gfad ,_ffgde ,_fcad ,_cafe ,_dedb ,_fccc ,_fbfae ,_agbf ,_dcea );
case _ffgde &7==_agbf &7:_gfde =_dbaef (_gfad ,_ffgde ,_fcad ,_cafe ,_dedb ,_fccc ,_fbfae ,_agbf ,_dcea );default:_gfde =_ggd (_gfad ,_ffgde ,_fcad ,_cafe ,_dedb ,_fccc ,_fbfae ,_agbf ,_dcea );};if _gfde !=nil {return _c .Wrap (_gfde ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func (_fag *Boxes )selectWithIndicator (_dgcg *_bc .NumSlice )(_eddc *Boxes ,_dcad error ){const _ece ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _fag ==nil {return nil ,_c .Error (_ece ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if _dgcg ==nil {return nil ,_c .Error (_ece ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_dgcg )!=len (*_fag ){return nil ,_c .Error (_ece ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _eeg ,_dbff int ;for _fdff :=0;_fdff < len (*_dgcg );_fdff ++{if _eeg ,_dcad =_dgcg .GetInt (_fdff );_dcad !=nil {return nil ,_c .Wrap (_dcad ,_ece ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _eeg ==1{_dbff ++;
};};if _dbff ==len (*_fag ){return _fag ,nil ;};_ccaf :=Boxes {};for _afda :=0;_afda < len (*_dgcg );_afda ++{_eeg =int ((*_dgcg )[_afda ]);if _eeg ==0{continue ;};_ccaf =append (_ccaf ,(*_fag )[_afda ]);};_eddc =&_ccaf ;return _eddc ,nil ;};type Boxes []*_d .Rectangle ;
func (_cggbc *Bitmap )setEightPartlyBytes (_cebc ,_geff int ,_dagf uint64 )(_bbce error ){var (_dceb byte ;_affbg int ;);const _ded ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _ccfd :=1;
_ccfd <=_geff ;_ccfd ++{_affbg =64-_ccfd *8;_dceb =byte (_dagf >>uint (_affbg )&0xff);_gf .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_dceb ,_cebc ,_cebc +_ccfd -1,_geff ,_affbg );
if _bbce =_cggbc .SetByte (_cebc +_ccfd -1,_dceb );_bbce !=nil {return _c .Wrap (_bbce ,_ded ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_eccf :=_cggbc .RowStride *8-_cggbc .Width ;if _eccf ==0{return nil ;};_affbg -=8;_dceb =byte (_dagf >>uint (_affbg )&0xff)<<uint (_eccf );
if _bbce =_cggbc .SetByte (_cebc +_geff ,_dceb );_bbce !=nil {return _c .Wrap (_bbce ,_ded ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func TstFrameBitmap ()*Bitmap {return _dggb .Copy ()};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;
SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func MakePixelSumTab8 ()[]int {return _gceaf ()};func (_fcf *Bitmap )GetVanillaData ()[]byte {if _fcf .Color ==Chocolate {_fcf .inverseData ();};return _fcf .Data ;};func (_ecfg *Boxes )Add (box *_d .Rectangle )error {if _ecfg ==nil {return _c .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_ecfg =append (*_ecfg ,box );return nil ;};func (_dbfe *ClassedPoints )ySortFunction ()func (_cabb int ,_dbec int )bool {return func (_ccga ,_gfdg int )bool {return _dbfe .YAtIndex (_ccga )< _dbfe .YAtIndex (_gfdg )};};func (_gegcf Points )GetGeometry (i int )(_gfeg ,_edbe float32 ,_dcce error ){if i > len (_gegcf )-1{return 0,0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_afba :=_gegcf [i ];return _afba .X ,_afba .Y ,nil ;};type LocationFilter int ;func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _acfa ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_dcc :=_eca (width ,height );_dcc .Data =data ;if _gdfa :=((width *height )+7)>>3;len (data )< _gdfa {return nil ,_c .Errorf (_acfa ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_gdfa );
};if _efa :=_dcc .addPadBits ();_efa !=nil {return nil ,_c .Wrap (_efa ,_acfa ,"");};return _dcc ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_cdbd float64 ,_edce error ){const _gff ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_c .Error (_gff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_c .Error (_gff ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_c .Error (_gff ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_fbaa ,_cfdf :=bm1 .Width ,bm1 .Height ;_fccb ,_fdgbf :=bm2 .Width ,bm2 .Height ;
_abea :=_afa (_fbaa -_fccb );if _abea > maxDiffW {return 0,nil ;};_egcd :=_afa (_cfdf -_fdgbf );if _egcd > maxDiffH {return 0,nil ;};var _gcd ,_cgfb int ;if delX >=0{_gcd =int (delX +0.5);}else {_gcd =int (delX -0.5);};if delY >=0{_cgfb =int (delY +0.5);
}else {_cgfb =int (delY -0.5);};_cgbf :=_fdeb (_cgfb ,0);_bbcg :=_edgb (_fdgbf +_cgfb ,_cfdf );_cfcf :=bm1 .RowStride *_cgbf ;_acee :=bm2 .RowStride *(_cgbf -_cgfb );_bdff :=_fdeb (_gcd ,0);_ggbf :=_edgb (_fccb +_gcd ,_fbaa );_badc :=bm2 .RowStride ;var _fdec ,_ddec int ;
if _gcd >=8{_fdec =_gcd >>3;_cfcf +=_fdec ;_bdff -=_fdec <<3;_ggbf -=_fdec <<3;_gcd &=7;}else if _gcd <=-8{_ddec =-((_gcd +7)>>3);_acee +=_ddec ;_badc -=_ddec ;_gcd +=_ddec <<3;};if _bdff >=_ggbf ||_cgbf >=_bbcg {return 0,nil ;};_bbda :=(_ggbf +7)>>3;var (_befa ,_dff ,_fef byte ;
_bega ,_ede ,_bge int ;);switch {case _gcd ==0:for _bge =_cgbf ;_bge < _bbcg ;_bge ,_cfcf ,_acee =_bge +1,_cfcf +bm1 .RowStride ,_acee +bm2 .RowStride {for _ede =0;_ede < _bbda ;_ede ++{_fef =bm1 .Data [_cfcf +_ede ]&bm2 .Data [_acee +_ede ];_bega +=tab [_fef ];
};};case _gcd > 0:if _badc < _bbda {for _bge =_cgbf ;_bge < _bbcg ;_bge ,_cfcf ,_acee =_bge +1,_cfcf +bm1 .RowStride ,_acee +bm2 .RowStride {_befa ,_dff =bm1 .Data [_cfcf ],bm2 .Data [_acee ]>>uint (_gcd );_fef =_befa &_dff ;_bega +=tab [_fef ];for _ede =1;
_ede < _badc ;_ede ++{_befa ,_dff =bm1 .Data [_cfcf +_ede ],(bm2 .Data [_acee +_ede ]>>uint (_gcd ))|(bm2 .Data [_acee +_ede -1]<<uint (8-_gcd ));_fef =_befa &_dff ;_bega +=tab [_fef ];};_befa =bm1 .Data [_cfcf +_ede ];_dff =bm2 .Data [_acee +_ede -1]<<uint (8-_gcd );
_fef =_befa &_dff ;_bega +=tab [_fef ];};}else {for _bge =_cgbf ;_bge < _bbcg ;_bge ,_cfcf ,_acee =_bge +1,_cfcf +bm1 .RowStride ,_acee +bm2 .RowStride {_befa ,_dff =bm1 .Data [_cfcf ],bm2 .Data [_acee ]>>uint (_gcd );_fef =_befa &_dff ;_bega +=tab [_fef ];
for _ede =1;_ede < _bbda ;_ede ++{_befa =bm1 .Data [_cfcf +_ede ];_dff =(bm2 .Data [_acee +_ede ]>>uint (_gcd ))|(bm2 .Data [_acee +_ede -1]<<uint (8-_gcd ));_fef =_befa &_dff ;_bega +=tab [_fef ];};};};default:if _bbda < _badc {for _bge =_cgbf ;_bge < _bbcg ;
_bge ,_cfcf ,_acee =_bge +1,_cfcf +bm1 .RowStride ,_acee +bm2 .RowStride {for _ede =0;_ede < _bbda ;_ede ++{_befa =bm1 .Data [_cfcf +_ede ];_dff =bm2 .Data [_acee +_ede ]<<uint (-_gcd );_dff |=bm2 .Data [_acee +_ede +1]>>uint (8+_gcd );_fef =_befa &_dff ;
_bega +=tab [_fef ];};};}else {for _bge =_cgbf ;_bge < _bbcg ;_bge ,_cfcf ,_acee =_bge +1,_cfcf +bm1 .RowStride ,_acee +bm2 .RowStride {for _ede =0;_ede < _bbda -1;_ede ++{_befa =bm1 .Data [_cfcf +_ede ];_dff =bm2 .Data [_acee +_ede ]<<uint (-_gcd );_dff |=bm2 .Data [_acee +_ede +1]>>uint (8+_gcd );
_fef =_befa &_dff ;_bega +=tab [_fef ];};_befa =bm1 .Data [_cfcf +_ede ];_dff =bm2 .Data [_acee +_ede ]<<uint (-_gcd );_fef =_befa &_dff ;_bega +=tab [_fef ];};};};_cdbd =float64 (_bega )*float64 (_bega )/(float64 (area1 )*float64 (area2 ));return _cdbd ,nil ;
};func _aadb (_fgab uint ,_dbdc byte )byte {return _dbdc >>_fgab <<_fgab };func (_ccfdc *ClassedPoints )xSortFunction ()func (_fafc int ,_dcdcb int )bool {return func (_cggbe ,_gabbe int )bool {return _ccfdc .XAtIndex (_cggbe )< _ccfdc .XAtIndex (_gabbe )};
};func (_ged *Bitmap )setAll ()error {_cdbc :=_ecfd (_ged ,0,0,_ged .Width ,_ged .Height ,PixSet ,nil ,0,0);if _cdbc !=nil {return _c .Wrap (_cdbc ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func (_efab *Bitmap )countPixels ()int {var (_faab int ;
_deec uint8 ;_ccab byte ;_ceeg int ;);_fgbd :=_efab .RowStride ;_geec :=uint (_efab .Width &0x07);if _geec !=0{_deec =uint8 ((0xff<<(8-_geec ))&0xff);_fgbd --;};for _cgb :=0;_cgb < _efab .Height ;_cgb ++{for _ceeg =0;_ceeg < _fgbd ;_ceeg ++{_ccab =_efab .Data [_cgb *_efab .RowStride +_ceeg ];
_faab +=int (_bcde [_ccab ]);};if _geec !=0{_faab +=int (_bcde [_efab .Data [_cgb *_efab .RowStride +_ceeg ]&_deec ]);};};return _faab ;};func (_cggf *Bitmap )GetChocolateData ()[]byte {if _cggf .Color ==Vanilla {_cggf .inverseData ();};return _cggf .Data ;
};func TstAddSymbol (t *_bb .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_accba :=_d .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_accba );*x +=sym .Width +space ;};var MorphBC BoundaryCondition ;func Extract (roi _d .Rectangle ,src *Bitmap )(*Bitmap ,error ){_aca :=New (roi .Dx (),roi .Dy ());
_bggb :=roi .Min .X &0x07;_aaab :=8-_bggb ;_gdcb :=uint (8-_aca .Width &0x07);_aab :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_ccad :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_deaf :=_aca .RowStride ==_ccad +1-_aab ;var _fbfc int ;for _gcbg :=roi .Min .Y ;
_gcbg < roi .Max .Y ;_gcbg ++{_gcec :=_aab ;_ceded :=_fbfc ;switch {case _aab ==_ccad :_abee ,_fagc :=src .GetByte (_gcec );if _fagc !=nil {return nil ,_fagc ;};_abee <<=uint (_bggb );_fagc =_aca .SetByte (_ceded ,_aadb (_gdcb ,_abee ));if _fagc !=nil {return nil ,_fagc ;
};case _bggb ==0:for _cgbg :=_aab ;_cgbg <=_ccad ;_cgbg ++{_ecca ,_aaba :=src .GetByte (_gcec );if _aaba !=nil {return nil ,_aaba ;};_gcec ++;if _cgbg ==_ccad &&_deaf {_ecca =_aadb (_gdcb ,_ecca );};_aaba =_aca .SetByte (_ceded ,_ecca );if _aaba !=nil {return nil ,_aaba ;
};_ceded ++;};default:_ccc :=_abb (src ,_aca ,uint (_bggb ),uint (_aaab ),_gdcb ,_aab ,_ccad ,_deaf ,_gcec ,_ceded );if _ccc !=nil {return nil ,_ccc ;};};_aab +=src .RowStride ;_ccad +=src .RowStride ;_fbfc +=_aca .RowStride ;};return _aca ,nil ;};func (_decb *Boxes )Get (i int )(*_d .Rectangle ,error ){const _gbaaf ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _decb ==nil {return nil ,_c .Error (_gbaaf ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_decb )-1{return nil ,_c .Errorf (_gbaaf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_decb )[i ],nil ;};func (_fbfa *Bitmap )GetByte (index int )(byte ,error ){if index > len (_fbfa .Data )-1||index < 0{return 0,_c .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _fbfa .Data [index ],nil ;};func _cdga (_dgg ,_fcc byte ,_ebba CombinationOperator )byte {switch _ebba {case CmbOpOr :return _fcc |_dgg ;case CmbOpAnd :return _fcc &_dgg ;case CmbOpXor :return _fcc ^_dgg ;case CmbOpXNor :return ^(_fcc ^_dgg );
case CmbOpNot :return ^(_fcc );default:return _fcc ;};};func (_cbce CombinationOperator )String ()string {var _bgbgcc string ;switch _cbce {case CmbOpOr :_bgbgcc ="\u004f\u0052";case CmbOpAnd :_bgbgcc ="\u0041\u004e\u0044";case CmbOpXor :_bgbgcc ="\u0058\u004f\u0052";
case CmbOpXNor :_bgbgcc ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_bgbgcc ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_bgbgcc ="\u004e\u004f\u0054";};return _bgbgcc ;};func (_fbdd *BitmapsArray )GetBox (i int )(*_d .Rectangle ,error ){const _cdafc ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _fbdd ==nil {return nil ,_c .Error (_cdafc ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_fbdd .Boxes )-1{return nil ,_c .Errorf (_cdafc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fbdd .Boxes [i ],nil ;};func (_deebe *Bitmaps )Size ()int {return len (_deebe .Values )};func _dca (_cdgf ,_cfcb *Bitmap ,_aag ,_abg ,_gaed ,_bgg ,_eeab int ,_dgee CombinationOperator )error {var _bcbg int ;_gfb :=func (){_bcbg ++;_gaed +=_cfcb .RowStride ;
_bgg +=_cdgf .RowStride ;_eeab +=_cdgf .RowStride };for _bcbg =_aag ;_bcbg < _abg ;_gfb (){_afeb :=_gaed ;for _aac :=_bgg ;_aac <=_eeab ;_aac ++{_fbfd ,_dafa :=_cfcb .GetByte (_afeb );if _dafa !=nil {return _dafa ;};_dgca ,_dafa :=_cdgf .GetByte (_aac );
if _dafa !=nil {return _dafa ;};if _dafa =_cfcb .SetByte (_afeb ,_cdga (_fbfd ,_dgca ,_dgee ));_dafa !=nil {return _dafa ;};_afeb ++;};};return nil ;};type CombinationOperator int ;func _gceaf ()[]int {_ebccg :=make ([]int ,256);for _befd :=0;_befd <=0xff;
_befd ++{_fdead :=byte (_befd );_ebccg [_fdead ]=int (_fdead &0x1)+(int (_fdead >>1)&0x1)+(int (_fdead >>2)&0x1)+(int (_fdead >>3)&0x1)+(int (_fdead >>4)&0x1)+(int (_fdead >>5)&0x1)+(int (_fdead >>6)&0x1)+(int (_fdead >>7)&0x1);};return _ebccg ;};func ClipBoxToRectangle (box *_d .Rectangle ,wi ,hi int )(_cfed *_d .Rectangle ,_dfddc error ){const _fbb ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_c .Error (_fbb ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_c .Error (_fbb ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_eege :=*box ;_cfed =&_eege ;if _cfed .Min .X < 0{_cfed .Max .X +=_cfed .Min .X ;_cfed .Min .X =0;};if _cfed .Min .Y < 0{_cfed .Max .Y +=_cfed .Min .Y ;_cfed .Min .Y =0;};if _cfed .Max .X > wi {_cfed .Max .X =wi ;};if _cfed .Max .Y > hi {_cfed .Max .Y =hi ;
};return _cfed ,nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_aaag Points )GetIntX (i int )(int ,error ){if i >=len (_aaag ){return 0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_aaag [i ].X ),nil ;};func (_bdae *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_gddg *Bitmaps ,_gbab *Boxes ,_gcfb error ){const _add ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _bdae ==nil {return nil ,nil ,_c .Error (_add ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_c .Error (_add ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _bdae .Zero (){_gbab =&Boxes {};_gddg =&Bitmaps {};return _gddg ,_gbab ,nil ;};switch components {case ComponentConn :_gddg =&Bitmaps {};if _gbab ,_gcfb =_bdae .ConnComponents (_gddg ,8);_gcfb !=nil {return nil ,nil ,_c .Wrap (_gcfb ,_add ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_dgcgc ,_dbba :=MorphSequence (_bdae ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _dbba !=nil {return nil ,nil ,_c .Wrap (_dbba ,_add ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _gf .Log .IsLogLevel (_gf .LogLevelTrace ){_gf .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_dgcgc .String ());
};_fgba :=&Bitmaps {};_gbab ,_dbba =_dgcgc .ConnComponents (_fgba ,8);if _dbba !=nil {return nil ,nil ,_c .Wrap (_dbba ,_add ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _gf .Log .IsLogLevel (_gf .LogLevelTrace ){_gf .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_fgba .String ());
};if _gddg ,_dbba =_fgba .ClipToBitmap (_bdae );_dbba !=nil {return nil ,nil ,_c .Wrap (_dbba ,_add ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_fdc :=1;
var _ebed *Bitmap ;switch {case _bdae .XResolution <=200:_ebed =_bdae ;case _bdae .XResolution <=400:_fdc =2;_ebed ,_gcfb =_ccf (_bdae ,1,0,0,0);if _gcfb !=nil {return nil ,nil ,_c .Wrap (_gcfb ,_add ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_fdc =4;_ebed ,_gcfb =_ccf (_bdae ,1,1,0,0);if _gcfb !=nil {return nil ,nil ,_c .Wrap (_gcfb ,_add ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_aade ,_ ,_ccce :=_cecc (_ebed );if _ccce !=nil {return nil ,nil ,_c .Wrap (_ccce ,_add ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_ebef ,_ccce :=_acgd (_aade ,_fdc );if _ccce !=nil {return nil ,nil ,_c .Wrap (_ccce ,_add ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_dfdde :=&Bitmaps {};if _gbab ,_ccce =_ebef .ConnComponents (_dfdde ,4);_ccce !=nil {return nil ,nil ,_c .Wrap (_ccce ,_add ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _gddg ,_ccce =_dfdde .ClipToBitmap (_bdae );_ccce !=nil {return nil ,nil ,_c .Wrap (_ccce ,_add ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_gddg ,_gcfb =_gddg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _gcfb !=nil {return nil ,nil ,_c .Wrap (_gcfb ,_add ,"");};_gbab ,_gcfb =_gbab .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _gcfb !=nil {return nil ,nil ,_c .Wrap (_gcfb ,_add ,"");};return _gddg ,_gbab ,nil ;};func TstNSymbol (t *_bb .T ,scale ...int )*Bitmap {_gaedf ,_dfdf :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_b .NoError (t ,_dfdf );return TstGetScaledSymbol (t ,_gaedf ,scale ...);};func (_dagfa MorphProcess )getWidthHeight ()(_cegfd ,_bccb int ){return _dagfa .Arguments [0],_dagfa .Arguments [1];};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _aaeb ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_acgb ,_abdgd :=p1 .Width ,p1 .Height ;_bbea ,_gea :=p3 .Width ,p3 .Height ;if _bc .Abs (_acgb -_bbea )> maxDiffW {return false ,nil ;};if _bc .Abs (_abdgd -_gea )> maxDiffH {return false ,nil ;};_bdce :=int (delX +_bc .Sign (delX )*0.5);_egca :=int (delY +_bc .Sign (delY )*0.5);
var _bfgf error ;_egddb :=p1 .CreateTemplate ();if _bfgf =_egddb .RasterOperation (0,0,_acgb ,_abdgd ,PixSrc ,p1 ,0,0);_bfgf !=nil {return false ,_c .Wrap (_bfgf ,_aaeb ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bfgf =_egddb .RasterOperation (_bdce ,_egca ,_acgb ,_abdgd ,PixNotSrcAndDst ,p4 ,0,0);
_bfgf !=nil {return false ,_c .Wrap (_bfgf ,_aaeb ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _egddb .Zero (){return false ,nil ;};if _bfgf =_egddb .RasterOperation (_bdce ,_egca ,_bbea ,_gea ,PixSrc ,p3 ,0,0);_bfgf !=nil {return false ,_c .Wrap (_bfgf ,_aaeb ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _bfgf =_egddb .RasterOperation (0,0,_bbea ,_gea ,PixNotSrcAndDst ,p2 ,0,0);_bfgf !=nil {return false ,_c .Wrap (_bfgf ,_aaeb ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _egddb .Zero (),nil ;};var (_agad =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};
_aceee =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_fded *Bitmap )GetUnpaddedData ()([]byte ,error ){_cbc :=uint (_fded .Width &0x07);if _cbc ==0{return _fded .Data ,nil ;};_gfe :=_fded .Width *_fded .Height ;if _gfe %8!=0{_gfe >>=3;
_gfe ++;}else {_gfe >>=3;};_ddcd :=make ([]byte ,_gfe );_gabb :=_gg .NewWriterMSB (_ddcd );const _ace ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _edge :=0;_edge < _fded .Height ;_edge ++{for _efd :=0;_efd < _fded .RowStride ;
_efd ++{_aa :=_fded .Data [_edge *_fded .RowStride +_efd ];if _efd !=_fded .RowStride -1{_beb :=_gabb .WriteByte (_aa );if _beb !=nil {return nil ,_c .Wrap (_beb ,_ace ,"");};continue ;};for _abag :=uint (0);_abag < _cbc ;_abag ++{_aaa :=_gabb .WriteBit (int (_aa >>(7-_abag )&0x01));
if _aaa !=nil {return nil ,_c .Wrap (_aaa ,_ace ,"");};};};};return _ddcd ,nil ;};func TstCSymbol (t *_bb .T )*Bitmap {t .Helper ();_dfda :=New (6,6);_b .NoError (t ,_dfda .SetPixel (1,0,1));_b .NoError (t ,_dfda .SetPixel (2,0,1));_b .NoError (t ,_dfda .SetPixel (3,0,1));
_b .NoError (t ,_dfda .SetPixel (4,0,1));_b .NoError (t ,_dfda .SetPixel (0,1,1));_b .NoError (t ,_dfda .SetPixel (5,1,1));_b .NoError (t ,_dfda .SetPixel (0,2,1));_b .NoError (t ,_dfda .SetPixel (0,3,1));_b .NoError (t ,_dfda .SetPixel (0,4,1));_b .NoError (t ,_dfda .SetPixel (5,4,1));
_b .NoError (t ,_dfda .SetPixel (1,5,1));_b .NoError (t ,_dfda .SetPixel (2,5,1));_b .NoError (t ,_dfda .SetPixel (3,5,1));_b .NoError (t ,_dfda .SetPixel (4,5,1));return _dfda ;};func (_edaa *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _edaa .Copy (),nil ;
};_egb ,_dcef :=_edaa .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _dcef !=nil {return nil ,_c .Wrap (_dcef ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _egb ,nil ;};func (_dafc *Bitmaps )AddBox (box *_d .Rectangle ){_dafc .Boxes =append (_dafc .Boxes ,box )};
func (_bcge *BitmapsArray )AddBox (box *_d .Rectangle ){_bcge .Boxes =append (_bcge .Boxes ,box )};func _e (_ce ,_ac *Bitmap )(_cb error ){const _cf ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_fa :=_ac .RowStride ;_bbe :=_ce .RowStride ;var (_bcg byte ;_gfc uint16 ;_cfg ,_fb ,_db ,_faf ,_ba int ;);for _db =0;_db < _ac .Height ;_db ++{_cfg =_db *_fa ;_fb =2*_db *_bbe ;for _faf =0;_faf < _fa ;_faf ++{_bcg =_ac .Data [_cfg +_faf ];_gfc =_edfb [_bcg ];
_ba =_fb +_faf *2;if _ce .RowStride !=_ac .RowStride *2&&(_faf +1)*2> _ce .RowStride {_cb =_ce .SetByte (_ba ,byte (_gfc >>8));}else {_cb =_ce .setTwoBytes (_ba ,_gfc );};if _cb !=nil {return _c .Wrap (_cb ,_cf ,"");};};for _faf =0;_faf < _bbe ;_faf ++{_ba =_fb +_bbe +_faf ;
_bcg =_ce .Data [_fb +_faf ];if _cb =_ce .SetByte (_ba ,_bcg );_cb !=nil {return _c .Wrapf (_cb ,_cf ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_fb +_faf ,_fb +_bbe +_faf );
};};};return nil ;};func (_gcae *Bitmaps )makeSizeIndicator (_dfea ,_afaf int ,_dgac LocationFilter ,_gcage SizeComparison )(_edgf *_bc .NumSlice ,_ffca error ){const _afcdb ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gcae ==nil {return nil ,_c .Error (_afcdb ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _dgac {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_afcdb ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_dgac );
};switch _gcage {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_c .Errorf (_afcdb ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_gcage );
};_edgf =&_bc .NumSlice {};var (_afaa ,_cgcc ,_bfdf int ;_geba *Bitmap ;);for _ ,_geba =range _gcae .Values {_afaa =0;_cgcc ,_bfdf =_geba .Width ,_geba .Height ;switch _dgac {case LocSelectWidth :if (_gcage ==SizeSelectIfLT &&_cgcc < _dfea )||(_gcage ==SizeSelectIfGT &&_cgcc > _dfea )||(_gcage ==SizeSelectIfLTE &&_cgcc <=_dfea )||(_gcage ==SizeSelectIfGTE &&_cgcc >=_dfea )||(_gcage ==SizeSelectIfEQ &&_cgcc ==_dfea ){_afaa =1;
};case LocSelectHeight :if (_gcage ==SizeSelectIfLT &&_bfdf < _afaf )||(_gcage ==SizeSelectIfGT &&_bfdf > _afaf )||(_gcage ==SizeSelectIfLTE &&_bfdf <=_afaf )||(_gcage ==SizeSelectIfGTE &&_bfdf >=_afaf )||(_gcage ==SizeSelectIfEQ &&_bfdf ==_afaf ){_afaa =1;
};case LocSelectIfEither :if (_gcage ==SizeSelectIfLT &&(_cgcc < _dfea ||_bfdf < _afaf ))||(_gcage ==SizeSelectIfGT &&(_cgcc > _dfea ||_bfdf > _afaf ))||(_gcage ==SizeSelectIfLTE &&(_cgcc <=_dfea ||_bfdf <=_afaf ))||(_gcage ==SizeSelectIfGTE &&(_cgcc >=_dfea ||_bfdf >=_afaf ))||(_gcage ==SizeSelectIfEQ &&(_cgcc ==_dfea ||_bfdf ==_afaf )){_afaa =1;
};case LocSelectIfBoth :if (_gcage ==SizeSelectIfLT &&(_cgcc < _dfea &&_bfdf < _afaf ))||(_gcage ==SizeSelectIfGT &&(_cgcc > _dfea &&_bfdf > _afaf ))||(_gcage ==SizeSelectIfLTE &&(_cgcc <=_dfea &&_bfdf <=_afaf ))||(_gcage ==SizeSelectIfGTE &&(_cgcc >=_dfea &&_bfdf >=_afaf ))||(_gcage ==SizeSelectIfEQ &&(_cgcc ==_dfea &&_bfdf ==_afaf )){_afaa =1;
};};_edgf .AddInt (_afaa );};return _edgf ,nil ;};func _fdeb (_daf ,_cafd int )int {if _daf > _cafd {return _daf ;};return _cafd ;};func Centroids (bms []*Bitmap )(*Points ,error ){_dgfg :=make ([]Point ,len (bms ));_bdfb :=_geag ();_fcfgf :=_gceaf ();
var _gacb error ;for _cbddg ,_fefc :=range bms {_dgfg [_cbddg ],_gacb =_fefc .centroid (_bdfb ,_fcfgf );if _gacb !=nil {return nil ,_gacb ;};};_acd :=Points (_dgfg );return &_acd ,nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _cac (d ,s ,hSize ,vSize )};
func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_aaafb :=_acca (h ,w ,"");_aaafb .setOrigin (cy ,cx );var _gabba ,_dfdeg int ;for _gabba =0;_gabba < h ;_gabba ++{for _dfdeg =0;_dfdeg < w ;_dfdeg ++{_aaafb .Data [_gabba ][_dfdeg ]=tp ;
};};return _aaafb ;};func (_dfgf *Bitmap )setTwoBytes (_ebcc int ,_ebbd uint16 )error {if _ebcc +1> len (_dfgf .Data )-1{return _c .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ebcc );
};_dfgf .Data [_ebcc ]=byte ((_ebbd &0xff00)>>8);_dfgf .Data [_ebcc +1]=byte (_ebbd &0xff);return nil ;};func NewClassedPoints (points *Points ,classes _bc .IntSlice )(*ClassedPoints ,error ){const _cedd ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_c .Error (_cedd ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_c .Error (_cedd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_ebefe :=&ClassedPoints {Points :points ,IntSlice :classes };if _ddfc :=_ebefe .validateIntSlice ();_ddfc !=nil {return nil ,_c .Wrap (_ddfc ,_cedd ,"");};return _ebefe ,nil ;};func _afgc (_efgg ,_bccfa *Bitmap ,_cgab CombinationOperator )*Bitmap {_ccec :=New (_efgg .Width ,_efgg .Height );
for _fdgbb :=0;_fdgbb < len (_ccec .Data );_fdgbb ++{_ccec .Data [_fdgbb ]=_cdga (_efgg .Data [_fdgbb ],_bccfa .Data [_fdgbb ],_cgab );};return _ccec ;};const _ebgfg =5000;func (_cbac *Bitmap )setBit (_bbdf int ){_cbac .Data [(_bbdf >>3)]|=0x80>>uint (_bbdf &7)};
func (_bcgg *Bitmap )And (s *Bitmap )(_gcbc *Bitmap ,_fgf error ){const _agge ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _bcgg ==nil {return nil ,_c .Error (_agge ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_c .Error (_agge ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_bcgg .SizesEqual (s ){_gf .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_agge );
};if _gcbc ,_fgf =_ccaa (_gcbc ,_bcgg );_fgf !=nil {return nil ,_c .Wrap (_fgf ,_agge ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fgf =_gcbc .RasterOperation (0,0,_gcbc .Width ,_gcbc .Height ,PixSrcAndDst ,s ,0,0);
_fgf !=nil {return nil ,_c .Wrap (_fgf ,_agge ,"");};return _gcbc ,nil ;};type fillSegment struct{_ccfa int ;_afeag int ;_eafa int ;_cefee int ;};func _fgdg (_aace *Bitmap ,_bebf *_bc .Stack ,_abfb ,_aaec int )(_ggee *_d .Rectangle ,_gbfc error ){const _ecfc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _aace ==nil {return nil ,_c .Error (_ecfc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bebf ==nil {return nil ,_c .Error (_ecfc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_adec ,_gabd :=_aace .Width ,_aace .Height ;_efac :=_adec -1;_daca :=_gabd -1;if _abfb < 0||_abfb > _efac ||_aaec < 0||_aaec > _daca ||!_aace .GetPixel (_abfb ,_aaec ){return nil ,nil ;};var _ggcb *_d .Rectangle ;_ggcb ,_gbfc =Rect (100000,100000,0,0);
if _gbfc !=nil {return nil ,_c .Wrap (_gbfc ,_ecfc ,"");};if _gbfc =_ecba (_bebf ,_abfb ,_abfb ,_aaec ,1,_daca ,_ggcb );_gbfc !=nil {return nil ,_c .Wrap (_gbfc ,_ecfc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gbfc =_ecba (_bebf ,_abfb ,_abfb ,_aaec +1,-1,_daca ,_ggcb );
_gbfc !=nil {return nil ,_c .Wrap (_gbfc ,_ecfc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_ggcb .Min .X ,_ggcb .Max .X =_abfb ,_abfb ;_ggcb .Min .Y ,_ggcb .Max .Y =_aaec ,_aaec ;var (_ecbf *fillSegment ;
_adbcg int ;);for _bebf .Len ()> 0{if _ecbf ,_gbfc =_afdce (_bebf );_gbfc !=nil {return nil ,_c .Wrap (_gbfc ,_ecfc ,"");};_aaec =_ecbf ._eafa ;for _abfb =_ecbf ._ccfa ;_abfb >=0&&_aace .GetPixel (_abfb ,_aaec );_abfb --{if _gbfc =_aace .SetPixel (_abfb ,_aaec ,0);
_gbfc !=nil {return nil ,_c .Wrap (_gbfc ,_ecfc ,"");};};if _abfb >=_ecbf ._ccfa {for _abfb ++;_abfb <=_ecbf ._afeag &&_abfb <=_efac &&!_aace .GetPixel (_abfb ,_aaec );_abfb ++{};_adbcg =_abfb ;if !(_abfb <=_ecbf ._afeag &&_abfb <=_efac ){continue ;};}else {_adbcg =_abfb +1;
if _adbcg < _ecbf ._ccfa -1{if _gbfc =_ecba (_bebf ,_adbcg ,_ecbf ._ccfa -1,_ecbf ._eafa ,-_ecbf ._cefee ,_daca ,_ggcb );_gbfc !=nil {return nil ,_c .Wrap (_gbfc ,_ecfc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_abfb =_ecbf ._ccfa +1;};for {for ;_abfb <=_efac &&_aace .GetPixel (_abfb ,_aaec );_abfb ++{if _gbfc =_aace .SetPixel (_abfb ,_aaec ,0);_gbfc !=nil {return nil ,_c .Wrap (_gbfc ,_ecfc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _gbfc =_ecba (_bebf ,_adbcg ,_abfb -1,_ecbf ._eafa ,_ecbf ._cefee ,_daca ,_ggcb );
_gbfc !=nil {return nil ,_c .Wrap (_gbfc ,_ecfc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _abfb > _ecbf ._afeag +1{if _gbfc =_ecba (_bebf ,_ecbf ._afeag +1,_abfb -1,_ecbf ._eafa ,-_ecbf ._cefee ,_daca ,_ggcb );_gbfc !=nil {return nil ,_c .Wrap (_gbfc ,_ecfc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _abfb ++;_abfb <=_ecbf ._afeag &&_abfb <=_efac &&!_aace .GetPixel (_abfb ,_aaec );_abfb ++{};_adbcg =_abfb ;if !(_abfb <=_ecbf ._afeag &&_abfb <=_efac ){break ;};};};_ggcb .Max .X ++;_ggcb .Max .Y ++;return _ggcb ,nil ;};type MorphProcess struct{Operation MorphOperation ;
Arguments []int ;};func _cac (_fcgc ,_dcab *Bitmap ,_fgfg ,_cbfa int )(*Bitmap ,error ){const _cebb ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _dcab ==nil {_gf .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_c .Error (_cebb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _fgfg < 1||_cbfa < 1{return nil ,_c .Error (_cebb ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _fgfg ==1&&_cbfa ==1{_geffd ,_begac :=_ccaa (_fcgc ,_dcab );if _begac !=nil {return nil ,_c .Wrap (_begac ,_cebb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _geffd ,nil ;};if _fgfg ==1||_cbfa ==1{_afdcd :=SelCreateBrick (_cbfa ,_fgfg ,_cbfa /2,_fgfg /2,SelHit );_gffb ,_acbe :=_gcgc (_fcgc ,_dcab ,_afdcd );if _acbe !=nil {return nil ,_c .Wrap (_acbe ,_cebb ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gffb ,nil ;};_cbgca :=SelCreateBrick (1,_fgfg ,0,_fgfg /2,SelHit );_dedd :=SelCreateBrick (_cbfa ,1,_cbfa /2,0,SelHit );_ebfg ,_geecg :=_gcgc (nil ,_dcab ,_cbgca );if _geecg !=nil {return nil ,_c .Wrap (_geecg ,_cebb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_fcgc ,_geecg =_gcgc (_fcgc ,_ebfg ,_dedd );if _geecg !=nil {return nil ,_c .Wrap (_geecg ,_cebb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _fcgc ,nil ;};func (_dgbfb *Bitmaps )SortByHeight (){_eaccg :=(*byHeight )(_dgbfb );
_ae .Sort (_eaccg )};func _afdce (_gddaef *_bc .Stack )(_gbdgf *fillSegment ,_fefb error ){const _bbdg ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _gddaef ==nil {return nil ,_c .Error (_bbdg ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _gddaef .Aux ==nil {return nil ,_c .Error (_bbdg ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_edcef ,_gedb :=_gddaef .Pop ();if !_gedb {return nil ,nil ;};_afcdd ,_gedb :=_edcef .(*fillSegment );
if !_gedb {return nil ,_c .Error (_bbdg ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_gbdgf =&fillSegment {_afcdd ._ccfa ,_afcdd ._afeag ,_afcdd ._eafa +_afcdd ._cefee ,_afcdd ._cefee };
_gddaef .Aux .Push (_afcdd );return _gbdgf ,nil ;};func (_fcgg *Bitmap )SetPixel (x ,y int ,pixel byte )error {_geg :=_fcgg .GetByteIndex (x ,y );if _geg > len (_fcgg .Data )-1{return _c .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_geg );
};_gfea :=_fcgg .GetBitOffset (x );_bagg :=uint (7-_gfea );_acb :=_fcgg .Data [_geg ];var _bfc byte ;if pixel ==1{_bfc =_acb |(pixel &0x01<<_bagg );}else {_bfc =_acb &^(1<<_bagg );};_fcgg .Data [_geg ]=_bfc ;return nil ;};func (_dde *Bitmap )ClipRectangle (box *_d .Rectangle )(_bee *Bitmap ,_ggc *_d .Rectangle ,_adbc error ){const _cbaf ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_c .Error (_cbaf ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_cabf ,_bbae :=_dde .Width ,_dde .Height ;_feg :=_d .Rect (0,0,_cabf ,_bbae );if !box .Overlaps (_feg ){return nil ,nil ,_c .Error (_cbaf ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_bad :=box .Intersect (_feg );_edc ,_gde :=_bad .Min .X ,_bad .Min .Y ;_eece ,_dce :=_bad .Dx (),_bad .Dy ();_bee =New (_eece ,_dce );_bee .Text =_dde .Text ;if _adbc =_bee .RasterOperation (0,0,_eece ,_dce ,PixSrc ,_dde ,_edc ,_gde );_adbc !=nil {return nil ,nil ,_c .Wrap (_adbc ,_cbaf ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_ggc =&_bad ;return _bee ,_ggc ,nil ;};func (_edea *ClassedPoints )Len ()int {return _edea .IntSlice .Size ()};func _ecfd (_bcbgb *Bitmap ,_gbcf ,_decc ,_abdae ,_cafc int ,_dgfa RasterOperator ,_aeae *Bitmap ,_fdad ,_aabb int )error {const _ebdc ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _bcbgb ==nil {return _c .Error (_ebdc ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _dgfa ==PixDst {return nil ;};switch _dgfa {case PixClr ,PixSet ,PixNotDst :_bddc (_bcbgb ,_gbcf ,_decc ,_abdae ,_cafc ,_dgfa );
return nil ;};if _aeae ==nil {_gf .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .Error (_ebdc ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _dage :=_ebea (_bcbgb ,_gbcf ,_decc ,_abdae ,_cafc ,_dgfa ,_aeae ,_fdad ,_aabb );_dage !=nil {return _c .Wrap (_dage ,_ebdc ,"");};return nil ;
};func _cebe ()(_cff []byte ){_cff =make ([]byte ,256);for _fbac :=0;_fbac < 256;_fbac ++{_gadfa :=byte (_fbac );_cff [_gadfa ]=(_gadfa &0x01)|((_gadfa &0x04)>>1)|((_gadfa &0x10)>>2)|((_gadfa &0x40)>>3)|((_gadfa &0x02)<<3)|((_gadfa &0x08)<<2)|((_gadfa &0x20)<<1)|(_gadfa &0x80);
};return _cff ;};func TstRSymbol (t *_bb .T ,scale ...int )*Bitmap {_dbcc ,_dfed :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_b .NoError (t ,_dfed );return TstGetScaledSymbol (t ,_dbcc ,scale ...);};func (_cbadb *ClassedPoints )Less (i ,j int )bool {return _cbadb ._faabb (i ,j )};
func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ecfd (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _gcgc (d ,s ,sel )};
func (_cfgbe *Bitmaps )String ()string {_ceca :=_a .Builder {};for _ ,_fead :=range _cfgbe .Values {_ceca .WriteString (_fead .String ());_ceca .WriteRune ('\n');};return _ceca .String ();};func _ffb ()(_cege [256]uint16 ){for _fg :=0;_fg < 256;_fg ++{if _fg &0x01!=0{_cege [_fg ]|=0x3;
};if _fg &0x02!=0{_cege [_fg ]|=0xc;};if _fg &0x04!=0{_cege [_fg ]|=0x30;};if _fg &0x08!=0{_cege [_fg ]|=0xc0;};if _fg &0x10!=0{_cege [_fg ]|=0x300;};if _fg &0x20!=0{_cege [_fg ]|=0xc00;};if _fg &0x40!=0{_cege [_fg ]|=0x3000;};if _fg &0x80!=0{_cege [_fg ]|=0xc000;
};};return _cege ;};func (_ffgb *Bitmap )nextOnPixelLow (_cef ,_dded ,_fcd ,_fafg ,_ecg int )(_ffdf _d .Point ,_adbe bool ,_ggab error ){const _dfe ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_cegec int ;_gceb byte ;);_decd :=_ecg *_fcd ;_beeb :=_decd +(_fafg /8);if _gceb ,_ggab =_ffgb .GetByte (_beeb );_ggab !=nil {return _ffdf ,false ,_c .Wrap (_ggab ,_dfe ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _gceb !=0{_dbbb :=_fafg -(_fafg %8)+7;for _cegec =_fafg ;_cegec <=_dbbb &&_cegec < _cef ;_cegec ++{if _ffgb .GetPixel (_cegec ,_ecg ){_ffdf .X =_cegec ;_ffdf .Y =_ecg ;return _ffdf ,true ,nil ;};};};_aff :=(_fafg /8)+1;_cegec =8*_aff ;var _feda int ;
for _beeb =_decd +_aff ;_cegec < _cef ;_beeb ,_cegec =_beeb +1,_cegec +8{if _gceb ,_ggab =_ffgb .GetByte (_beeb );_ggab !=nil {return _ffdf ,false ,_c .Wrap (_ggab ,_dfe ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");
};if _gceb ==0{continue ;};for _feda =0;_feda < 8&&_cegec < _cef ;_feda ,_cegec =_feda +1,_cegec +1{if _ffgb .GetPixel (_cegec ,_ecg ){_ffdf .X =_cegec ;_ffdf .Y =_ecg ;return _ffdf ,true ,nil ;};};};for _affb :=_ecg +1;_affb < _dded ;_affb ++{_decd =_affb *_fcd ;
for _beeb ,_cegec =_decd ,0;_cegec < _cef ;_beeb ,_cegec =_beeb +1,_cegec +8{if _gceb ,_ggab =_ffgb .GetByte (_beeb );_ggab !=nil {return _ffdf ,false ,_c .Wrap (_ggab ,_dfe ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");
};if _gceb ==0{continue ;};for _feda =0;_feda < 8&&_cegec < _cef ;_feda ,_cegec =_feda +1,_cegec +1{if _ffgb .GetPixel (_cegec ,_affb ){_ffdf .X =_cegec ;_ffdf .Y =_affb ;return _ffdf ,true ,nil ;};};};};return _ffdf ,false ,nil ;};func _ggd (_gabbd *Bitmap ,_cfeg ,_cadea ,_gefcd ,_ddgd int ,_cggde RasterOperator ,_gbca *Bitmap ,_ggg ,_fabf int )error {var (_efaab bool ;
_abdc bool ;_egge byte ;_geefb int ;_agaed int ;_afdge int ;_bcggf int ;_bbad bool ;_ddgg int ;_gbbc int ;_acef int ;_aadc bool ;_dgea byte ;_gceg int ;_cfgaa int ;_dffa int ;_cafa byte ;_cefe int ;_gffe int ;_cagdc uint ;_aefc uint ;_fgcf byte ;_gdgb shift ;
_dcbf bool ;_fgacg bool ;_cfgb ,_facf int ;);if _ggg &7!=0{_gffe =8-(_ggg &7);};if _cfeg &7!=0{_agaed =8-(_cfeg &7);};if _gffe ==0&&_agaed ==0{_fgcf =_aceee [0];}else {if _agaed > _gffe {_cagdc =uint (_agaed -_gffe );}else {_cagdc =uint (8-(_gffe -_agaed ));
};_aefc =8-_cagdc ;_fgcf =_aceee [_cagdc ];};if (_cfeg &7)!=0{_efaab =true ;_geefb =8-(_cfeg &7);_egge =_aceee [_geefb ];_afdge =_gabbd .RowStride *_cadea +(_cfeg >>3);_bcggf =_gbca .RowStride *_fabf +(_ggg >>3);_cefe =8-(_ggg &7);if _geefb > _cefe {_gdgb =_gcfd ;
if _gefcd >=_gffe {_dcbf =true ;};}else {_gdgb =_dfac ;};};if _gefcd < _geefb {_abdc =true ;_egge &=_agad [8-_geefb +_gefcd ];};if !_abdc {_ddgg =(_gefcd -_geefb )>>3;if _ddgg !=0{_bbad =true ;_gbbc =_gabbd .RowStride *_cadea +((_cfeg +_agaed )>>3);_acef =_gbca .RowStride *_fabf +((_ggg +_agaed )>>3);
};};_gceg =(_cfeg +_gefcd )&7;if !(_abdc ||_gceg ==0){_aadc =true ;_dgea =_agad [_gceg ];_cfgaa =_gabbd .RowStride *_cadea +((_cfeg +_agaed )>>3)+_ddgg ;_dffa =_gbca .RowStride *_fabf +((_ggg +_agaed )>>3)+_ddgg ;if _gceg > int (_aefc ){_fgacg =true ;};
};switch _cggde {case PixSrc :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};
_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],_cafa ,_egge );_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );
_gabbd .Data [_gbbc +_facf ]=_cafa ;};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};
_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],_cafa ,_dgea );_cfgaa +=_gabbd .RowStride ;_dffa +=_gbca .RowStride ;};};case PixNotSrc :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );
};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],^_cafa ,_egge );_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );
_gabbd .Data [_gbbc +_facf ]=^_cafa ;};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};
_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],^_cafa ,_dgea );_cfgaa +=_gabbd .RowStride ;_dffa +=_gbca .RowStride ;};};case PixSrcOrDst :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );
};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],_cafa |_gabbd .Data [_afdge ],_egge );_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;
_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );_gabbd .Data [_gbbc +_facf ]|=_cafa ;};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;_cfgb < _ddgd ;
_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],_cafa |_gabbd .Data [_cfgaa ],_dgea );_cfgaa +=_gabbd .RowStride ;_dffa +=_gbca .RowStride ;
};};case PixSrcAndDst :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],_cafa &_gabbd .Data [_afdge ],_egge );
_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );_gabbd .Data [_gbbc +_facf ]&=_cafa ;
};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],_cafa &_gabbd .Data [_cfgaa ],_dgea );
_cfgaa +=_gabbd .RowStride ;_dffa +=_gbca .RowStride ;};};case PixSrcXorDst :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );
};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],_cafa ^_gabbd .Data [_afdge ],_egge );_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;
_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );_gabbd .Data [_gbbc +_facf ]^=_cafa ;};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;_cfgb < _ddgd ;
_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],_cafa ^_gabbd .Data [_cfgaa ],_dgea );_cfgaa +=_gabbd .RowStride ;_dffa +=_gbca .RowStride ;
};};case PixNotSrcOrDst :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],^_cafa |_gabbd .Data [_afdge ],_egge );
_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );_gabbd .Data [_gbbc +_facf ]|=^_cafa ;
};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],^_cafa |_gabbd .Data [_cfgaa ],_dgea );
_cfgaa +=_gabbd .RowStride ;_dffa +=_gbca .RowStride ;};};case PixNotSrcAndDst :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );
};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],^_cafa &_gabbd .Data [_afdge ],_egge );_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;
_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );_gabbd .Data [_gbbc +_facf ]&=^_cafa ;};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;_cfgb < _ddgd ;
_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],^_cafa &_gabbd .Data [_cfgaa ],_dgea );_cfgaa +=_gabbd .RowStride ;_dffa +=_gbca .RowStride ;
};};case PixSrcOrNotDst :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],_cafa |^_gabbd .Data [_afdge ],_egge );
_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );_gabbd .Data [_gbbc +_facf ]=_cafa |^_gabbd .Data [_gbbc +_facf ];
};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],_cafa |^_gabbd .Data [_cfgaa ],_dgea );
_cfgaa +=_gabbd .RowStride ;_dffa +=_gbca .RowStride ;};};case PixSrcAndNotDst :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );
};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],_cafa &^_gabbd .Data [_afdge ],_egge );_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;
_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );_gabbd .Data [_gbbc +_facf ]=_cafa &^_gabbd .Data [_gbbc +_facf ];};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;
_cfgb < _ddgd ;_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],_cafa &^_gabbd .Data [_cfgaa ],_dgea );_cfgaa +=_gabbd .RowStride ;
_dffa +=_gbca .RowStride ;};};case PixNotPixSrcOrDst :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;
};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],^(_cafa |_gabbd .Data [_afdge ]),_egge );_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );
_gabbd .Data [_gbbc +_facf ]=^(_cafa |_gabbd .Data [_gbbc +_facf ]);};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );
};_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],^(_cafa |_gabbd .Data [_cfgaa ]),_dgea );_cfgaa +=_gabbd .RowStride ;_dffa +=_gbca .RowStride ;};};case PixNotPixSrcAndDst :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;
if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],^(_cafa &_gabbd .Data [_afdge ]),_egge );_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;
};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );_gabbd .Data [_gbbc +_facf ]=^(_cafa &_gabbd .Data [_gbbc +_facf ]);
};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],^(_cafa &_gabbd .Data [_cfgaa ]),_dgea );
_cfgaa +=_gabbd .RowStride ;_dffa +=_gbca .RowStride ;};};case PixNotPixSrcXorDst :if _efaab {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{if _gdgb ==_gcfd {_cafa =_gbca .Data [_bcggf ]<<_cagdc ;if _dcbf {_cafa =_dddd (_cafa ,_gbca .Data [_bcggf +1]>>_aefc ,_fgcf );
};}else {_cafa =_gbca .Data [_bcggf ]>>_aefc ;};_gabbd .Data [_afdge ]=_dddd (_gabbd .Data [_afdge ],^(_cafa ^_gabbd .Data [_afdge ]),_egge );_afdge +=_gabbd .RowStride ;_bcggf +=_gbca .RowStride ;};};if _bbad {for _cfgb =0;_cfgb < _ddgd ;_cfgb ++{for _facf =0;
_facf < _ddgg ;_facf ++{_cafa =_dddd (_gbca .Data [_acef +_facf ]<<_cagdc ,_gbca .Data [_acef +_facf +1]>>_aefc ,_fgcf );_gabbd .Data [_gbbc +_facf ]=^(_cafa ^_gabbd .Data [_gbbc +_facf ]);};_gbbc +=_gabbd .RowStride ;_acef +=_gbca .RowStride ;};};if _aadc {for _cfgb =0;
_cfgb < _ddgd ;_cfgb ++{_cafa =_gbca .Data [_dffa ]<<_cagdc ;if _fgacg {_cafa =_dddd (_cafa ,_gbca .Data [_dffa +1]>>_aefc ,_fgcf );};_gabbd .Data [_cfgaa ]=_dddd (_gabbd .Data [_cfgaa ],^(_cafa ^_gabbd .Data [_cfgaa ]),_dgea );_cfgaa +=_gabbd .RowStride ;
_dffa +=_gbca .RowStride ;};};default:_gf .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_cggde );return _c .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func _aacg (_dbdga ,_faaa *Bitmap ,_cafaa ,_eggf int )(_fcca error ){const _eace ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_ddfg ,_efgda ,_ebdf ,_gfcg int ;_gbgcc ,_cegeb ,_efcde ,_ceed ,_dccg ,_acdd ,_adadg byte ;
);for _ddfg =0;_ddfg < _cafaa ;_ddfg ++{_ebdf =_ddfg *_dbdga .RowStride ;_gfcg =_ddfg *_faaa .RowStride ;for _efgda =0;_efgda < _eggf ;_efgda ++{_gbgcc ,_fcca =_dbdga .GetByte (_ebdf +_efgda );if _fcca !=nil {return _c .Wrap (_fcca ,_eace ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_cegeb ,_fcca =_faaa .GetByte (_gfcg +_efgda );if _fcca !=nil {return _c .Wrap (_fcca ,_eace ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _ddfg > 0{_efcde ,_fcca =_dbdga .GetByte (_ebdf -_dbdga .RowStride +_efgda );if _fcca !=nil {return _c .Wrap (_fcca ,_eace ,"\u0069\u0020\u003e \u0030");
};_gbgcc |=_efcde ;};if _efgda > 0{_ceed ,_fcca =_dbdga .GetByte (_ebdf +_efgda -1);if _fcca !=nil {return _c .Wrap (_fcca ,_eace ,"\u006a\u0020\u003e \u0030");};_gbgcc |=_ceed <<7;};_gbgcc &=_cegeb ;if _gbgcc ==0||(^_gbgcc )==0{if _fcca =_dbdga .SetByte (_ebdf +_efgda ,_gbgcc );
_fcca !=nil {return _c .Wrap (_fcca ,_eace ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_adadg =_gbgcc ;_gbgcc =(_gbgcc |(_gbgcc >>1)|(_gbgcc <<1))&_cegeb ;if (_gbgcc ^_adadg )==0{if _fcca =_dbdga .SetByte (_ebdf +_efgda ,_gbgcc );
_fcca !=nil {return _c .Wrap (_fcca ,_eace ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _ddfg =_cafaa -1;_ddfg >=0;_ddfg --{_ebdf =_ddfg *_dbdga .RowStride ;_gfcg =_ddfg *_faaa .RowStride ;
for _efgda =_eggf -1;_efgda >=0;_efgda --{if _gbgcc ,_fcca =_dbdga .GetByte (_ebdf +_efgda );_fcca !=nil {return _c .Wrap (_fcca ,_eace ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _cegeb ,_fcca =_faaa .GetByte (_gfcg +_efgda );
_fcca !=nil {return _c .Wrap (_fcca ,_eace ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _ddfg < _cafaa -1{if _dccg ,_fcca =_dbdga .GetByte (_ebdf +_dbdga .RowStride +_efgda );_fcca !=nil {return _c .Wrap (_fcca ,_eace ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_gbgcc |=_dccg ;};if _efgda < _eggf -1{if _acdd ,_fcca =_dbdga .GetByte (_ebdf +_efgda +1);_fcca !=nil {return _c .Wrap (_fcca ,_eace ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_gbgcc |=_acdd >>7;
};_gbgcc &=_cegeb ;if _gbgcc ==0||(^_gbgcc )==0{if _fcca =_dbdga .SetByte (_ebdf +_efgda ,_gbgcc );_fcca !=nil {return _c .Wrap (_fcca ,_eace ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_adadg =_gbgcc ;_gbgcc =(_gbgcc |(_gbgcc >>1)|(_gbgcc <<1))&_cegeb ;if (_gbgcc ^_adadg )==0{if _fcca =_dbdga .SetByte (_ebdf +_efgda ,_gbgcc );_fcca !=nil {return _c .Wrap (_fcca ,_eace ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func _gcce (_eccb *Bitmap ,_bddfe *_bc .Stack ,_afea ,_fdcg int )(_gcdd *_d .Rectangle ,_bafd error ){const _ggbfc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _eccb ==nil {return nil ,_c .Error (_ggbfc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _bddfe ==nil {return nil ,_c .Error (_ggbfc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_aaac ,_cacc :=_eccb .Width ,_eccb .Height ;_aadba :=_aaac -1;_degg :=_cacc -1;if _afea < 0||_afea > _aadba ||_fdcg < 0||_fdcg > _degg ||!_eccb .GetPixel (_afea ,_fdcg ){return nil ,nil ;
};_ffag :=_d .Rect (100000,100000,0,0);if _bafd =_ecba (_bddfe ,_afea ,_afea ,_fdcg ,1,_degg ,&_ffag );_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bafd =_ecba (_bddfe ,_afea ,_afea ,_fdcg +1,-1,_degg ,&_ffag );
_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_ffag .Min .X ,_ffag .Max .X =_afea ,_afea ;_ffag .Min .Y ,_ffag .Max .Y =_fdcg ,_fdcg ;var (_fccaa *fillSegment ;
_bdaa int ;);for _bddfe .Len ()> 0{if _fccaa ,_bafd =_afdce (_bddfe );_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"");};_fdcg =_fccaa ._eafa ;for _afea =_fccaa ._ccfa -1;_afea >=0&&_eccb .GetPixel (_afea ,_fdcg );_afea --{if _bafd =_eccb .SetPixel (_afea ,_fdcg ,0);
_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _afea >=_fccaa ._ccfa -1{for {for _afea ++;_afea <=_fccaa ._afeag +1&&_afea <=_aadba &&!_eccb .GetPixel (_afea ,_fdcg );_afea ++{};_bdaa =_afea ;if !(_afea <=_fccaa ._afeag +1&&_afea <=_aadba ){break ;
};for ;_afea <=_aadba &&_eccb .GetPixel (_afea ,_fdcg );_afea ++{if _bafd =_eccb .SetPixel (_afea ,_fdcg ,0);_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bafd =_ecba (_bddfe ,_bdaa ,_afea -1,_fccaa ._eafa ,_fccaa ._cefee ,_degg ,&_ffag );
_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _afea > _fccaa ._afeag {if _bafd =_ecba (_bddfe ,_fccaa ._afeag +1,_afea -1,_fccaa ._eafa ,-_fccaa ._cefee ,_degg ,&_ffag );_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_bdaa =_afea +1;if _bdaa < _fccaa ._ccfa {if _bafd =_ecba (_bddfe ,_bdaa ,_fccaa ._ccfa -1,_fccaa ._eafa ,-_fccaa ._cefee ,_degg ,&_ffag );_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_afea =_fccaa ._ccfa ;for {for ;_afea <=_aadba &&_eccb .GetPixel (_afea ,_fdcg );_afea ++{if _bafd =_eccb .SetPixel (_afea ,_fdcg ,0);_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bafd =_ecba (_bddfe ,_bdaa ,_afea -1,_fccaa ._eafa ,_fccaa ._cefee ,_degg ,&_ffag );
_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _afea > _fccaa ._afeag {if _bafd =_ecba (_bddfe ,_fccaa ._afeag +1,_afea -1,_fccaa ._eafa ,-_fccaa ._cefee ,_degg ,&_ffag );_bafd !=nil {return nil ,_c .Wrap (_bafd ,_ggbfc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _afea ++;_afea <=_fccaa ._afeag +1&&_afea <=_aadba &&!_eccb .GetPixel (_afea ,_fdcg );_afea ++{};_bdaa =_afea ;if !(_afea <=_fccaa ._afeag +1&&_afea <=_aadba ){break ;};};};_ffag .Max .X ++;_ffag .Max .Y ++;return &_ffag ,nil ;};func TstGetScaledSymbol (t *_bb .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;
};if scale [0]==1{return sm ;};_ddeg ,_adebe :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_b .NoError (t ,_adebe );return _ddeg ;};type ClassedPoints struct{*Points ;_bc .IntSlice ;_faabb func (_aggb ,_bfffb int )bool ;
};func (_abc *Bitmap )setEightFullBytes (_acg int ,_fgdc uint64 )error {if _acg +7> len (_abc .Data )-1{return _c .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_abc .Data [_acg ]=byte ((_fgdc &0xff00000000000000)>>56);_abc .Data [_acg +1]=byte ((_fgdc &0xff000000000000)>>48);_abc .Data [_acg +2]=byte ((_fgdc &0xff0000000000)>>40);_abc .Data [_acg +3]=byte ((_fgdc &0xff00000000)>>32);_abc .Data [_acg +4]=byte ((_fgdc &0xff000000)>>24);
_abc .Data [_acg +5]=byte ((_fgdc &0xff0000)>>16);_abc .Data [_acg +6]=byte ((_fgdc &0xff00)>>8);_abc .Data [_acg +7]=byte (_fgdc &0xff);return nil ;};func _bada (_fbcb ,_fbgf *Bitmap ,_ebg *Selection )(*Bitmap ,error ){const _gdda ="\u006f\u0070\u0065\u006e";
var _gcca error ;_fbcb ,_gcca =_gfa (_fbcb ,_fbgf ,_ebg );if _gcca !=nil {return nil ,_c .Wrap (_gcca ,_gdda ,"");};_ebaa ,_gcca :=_efeb (nil ,_fbgf ,_ebg );if _gcca !=nil {return nil ,_c .Wrap (_gcca ,_gdda ,"");};_ ,_gcca =_gcgc (_fbcb ,_ebaa ,_ebg );
if _gcca !=nil {return nil ,_c .Wrap (_gcca ,_gdda ,"");};return _fbcb ,nil ;};var _ead =[5]int {1,2,3,0,4};func _dfg (_bgc ,_bcgb *Bitmap ,_deb int ,_fbf []byte ,_ceb int )(_fde error ){const _accf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_aeaf ,_cee ,_geb ,_dac ,_gcb ,_fgg ,_edb ,_bdf int ;_bbf ,_fbg ,_gad ,_adgg uint32 ;_dee ,_gadf byte ;_cfa uint16 ;);_dcb :=make ([]byte ,4);_fgb :=make ([]byte ,4);for _geb =0;_geb < _bgc .Height -1;_geb ,_dac =_geb +2,_dac +1{_aeaf =_geb *_bgc .RowStride ;
_cee =_dac *_bcgb .RowStride ;for _gcb ,_fgg =0,0;_gcb < _ceb ;_gcb ,_fgg =_gcb +4,_fgg +1{for _edb =0;_edb < 4;_edb ++{_bdf =_aeaf +_gcb +_edb ;if _bdf <=len (_bgc .Data )-1&&_bdf < _aeaf +_bgc .RowStride {_dcb [_edb ]=_bgc .Data [_bdf ];}else {_dcb [_edb ]=0x00;
};_bdf =_aeaf +_bgc .RowStride +_gcb +_edb ;if _bdf <=len (_bgc .Data )-1&&_bdf < _aeaf +(2*_bgc .RowStride ){_fgb [_edb ]=_bgc .Data [_bdf ];}else {_fgb [_edb ]=0x00;};};_bbf =_gc .BigEndian .Uint32 (_dcb );_fbg =_gc .BigEndian .Uint32 (_fgb );_gad =_bbf &_fbg ;
_gad |=_gad <<1;_adgg =_bbf |_fbg ;_adgg &=_adgg <<1;_fbg =_gad &_adgg ;_fbg &=0xaaaaaaaa;_bbf =_fbg |(_fbg <<7);_dee =byte (_bbf >>24);_gadf =byte ((_bbf >>8)&0xff);_bdf =_cee +_fgg ;if _bdf +1==len (_bcgb .Data )-1||_bdf +1>=_cee +_bcgb .RowStride {if _fde =_bcgb .SetByte (_bdf ,_fbf [_dee ]);
_fde !=nil {return _c .Wrapf (_fde ,_accf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bdf );};}else {_cfa =(uint16 (_fbf [_dee ])<<8)|uint16 (_fbf [_gadf ]);if _fde =_bcgb .setTwoBytes (_bdf ,_cfa );_fde !=nil {return _c .Wrapf (_fde ,_accf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bdf );
};_fgg ++;};};};return nil ;};func (_eacb *Bitmaps )selectByIndexes (_ddca []int )(*Bitmaps ,error ){_ddgaa :=&Bitmaps {};for _ ,_acdda :=range _ddca {_abaa ,_acaaf :=_eacb .GetBitmap (_acdda );if _acaaf !=nil {return nil ,_c .Wrap (_acaaf ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_ddgaa .AddBitmap (_abaa );};return _ddgaa ,nil ;};func TstWordBitmap (t *_bb .T ,scale ...int )*Bitmap {_gfaa :=1;if len (scale )> 0{_gfaa =scale [0];};_fadf :=3;_aacca :=9+7+15+2*_fadf ;_edgc :=5+_fadf +5;_bbgc :=New (_aacca *_gfaa ,_edgc *_gfaa );
_cfba :=&Bitmaps {};var _eedc *int ;_fadf *=_gfaa ;_cedc :=0;_eedc =&_cedc ;_eaa :=0;_acgcb :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,1*_gfaa );_acgcb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,_fadf );
_acgcb =TstISymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,1*_gfaa );_acgcb =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,_fadf );_acgcb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,1*_gfaa );
_acgcb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,1*_gfaa );_acgcb =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,0);*_eedc =0;_eaa =5*_gfaa +_fadf ;_acgcb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,1*_gfaa );
_acgcb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,_fadf );_acgcb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,1*_gfaa );_acgcb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,1*_gfaa );
_acgcb =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,1*_gfaa );_acgcb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,1*_gfaa );_acgcb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cfba ,_acgcb ,_eedc ,_eaa ,0);
TstWriteSymbols (t ,_cfba ,_bbgc );return _bbgc ;};func (_aeccc *Bitmaps )WidthSorter ()func (_adgfd ,_dcaa int )bool {return func (_decf ,_abcc int )bool {return _aeccc .Values [_decf ].Width < _aeccc .Values [_abcc ].Width };};type Bitmap struct{Width ,Height int ;
BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_geea *byWidth )Len ()int {return len (_geea .Values )};func (_cdd *ClassedPoints )XAtIndex (i int )float32 {return (*_cdd .Points )[_cdd .IntSlice [i ]].X };
func TstDSymbol (t *_bb .T ,scale ...int )*Bitmap {_ggbfcg ,_baccd :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_b .NoError (t ,_baccd );return TstGetScaledSymbol (t ,_ggbfcg ,scale ...);};func _bec (_edg ,_ccg *Bitmap ,_feb int ,_dbg []byte ,_cfe int )(_bca error ){const _fggb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_ddb ,_cgc ,_ccd ,_agg ,_dge ,_dfd ,_cafg ,_dcd int ;_bgf ,_ebc uint32 ;_ggf ,_cfee byte ;_gcg uint16 ;);_ggea :=make ([]byte ,4);_dfdd :=make ([]byte ,4);for _ccd =0;_ccd < _edg .Height -1;_ccd ,_agg =_ccd +2,_agg +1{_ddb =_ccd *_edg .RowStride ;
_cgc =_agg *_ccg .RowStride ;for _dge ,_dfd =0,0;_dge < _cfe ;_dge ,_dfd =_dge +4,_dfd +1{for _cafg =0;_cafg < 4;_cafg ++{_dcd =_ddb +_dge +_cafg ;if _dcd <=len (_edg .Data )-1&&_dcd < _ddb +_edg .RowStride {_ggea [_cafg ]=_edg .Data [_dcd ];}else {_ggea [_cafg ]=0x00;
};_dcd =_ddb +_edg .RowStride +_dge +_cafg ;if _dcd <=len (_edg .Data )-1&&_dcd < _ddb +(2*_edg .RowStride ){_dfdd [_cafg ]=_edg .Data [_dcd ];}else {_dfdd [_cafg ]=0x00;};};_bgf =_gc .BigEndian .Uint32 (_ggea );_ebc =_gc .BigEndian .Uint32 (_dfdd );_ebc &=_bgf ;
_ebc &=_ebc <<1;_ebc &=0xaaaaaaaa;_bgf =_ebc |(_ebc <<7);_ggf =byte (_bgf >>24);_cfee =byte ((_bgf >>8)&0xff);_dcd =_cgc +_dfd ;if _dcd +1==len (_ccg .Data )-1||_dcd +1>=_cgc +_ccg .RowStride {_ccg .Data [_dcd ]=_dbg [_ggf ];if _bca =_ccg .SetByte (_dcd ,_dbg [_ggf ]);
_bca !=nil {return _c .Wrapf (_bca ,_fggb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dcd );};}else {_gcg =(uint16 (_dbg [_ggf ])<<8)|uint16 (_dbg [_cfee ]);if _bca =_ccg .setTwoBytes (_dcd ,_gcg );_bca !=nil {return _c .Wrapf (_bca ,_fggb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dcd );
};_dfd ++;};};};return nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_geaf *Points )Add (pt *Points )error {const _feed ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _geaf ==nil {return _c .Error (_feed ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _c .Error (_feed ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_geaf =append (*_geaf ,*pt ...);return nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_dege float64 ,_fefg error ){const _ccced ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _dege ,_c .Error (_ccced ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _dege ,_c .Error (_ccced ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _dege ,_c .Error (_ccced ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_fegg ,_ccdf :=bm1 .Width ,bm1 .Height ;_bgbg ,_cbff :=bm2 .Width ,bm2 .Height ;
if _afa (_fegg -_bgbg )> maxDiffW {return 0,nil ;};if _afa (_ccdf -_cbff )> maxDiffH {return 0,nil ;};var _bcbgf ,_bcab int ;if delX >=0{_bcbgf =int (delX +0.5);}else {_bcbgf =int (delX -0.5);};if delY >=0{_bcab =int (delY +0.5);}else {_bcab =int (delY -0.5);
};_cgfa :=bm1 .createTemplate ();if _fefg =_cgfa .RasterOperation (_bcbgf ,_bcab ,_bgbg ,_cbff ,PixSrc ,bm2 ,0,0);_fefg !=nil {return _dege ,_c .Wrap (_fefg ,_ccced ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};
if _fefg =_cgfa .RasterOperation (0,0,_fegg ,_ccdf ,PixSrcAndDst ,bm1 ,0,0);_fefg !=nil {return _dege ,_c .Wrap (_fefg ,_ccced ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_fdb :=_cgfa .countPixels ();_dege =float64 (_fdb )*float64 (_fdb )/(float64 (area1 )*float64 (area2 ));
return _dege ,nil ;};func _fad (_df *Bitmap ,_bd int )(*Bitmap ,error ){const _da ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _df ==nil {return nil ,_c .Error (_da ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bd ==1{return _ccaa (nil ,_df );};if _bd !=2&&_bd !=4&&_bd !=8{return nil ,_c .Error (_da ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_gce :=_bd *_df .Width ;_cbf :=_bd *_df .Height ;_gcab :=New (_gce ,_cbf );var _cbb error ;switch _bd {case 2:_cbb =_e (_gcab ,_df );case 4:_cbb =_ag (_gcab ,_df );case 8:_cbb =_eg (_gcab ,_df );};if _cbb !=nil {return nil ,_c .Wrap (_cbb ,_da ,"");};
return _gcab ,nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_dggd *Bitmap )connComponentsBitmapsBB (_cfae *Bitmaps ,_fge int )(_dfc *Boxes ,_fbfce error ){const _dbca ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _fge !=4&&_fge !=8{return nil ,_c .Error (_dbca ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _cfae ==nil {return nil ,_c .Error (_dbca ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_cfae .Values )> 0{return nil ,_c .Error (_dbca ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _dggd .Zero (){return &Boxes {},nil ;};
var (_eagf ,_dbee ,_fgbad ,_ecgf *Bitmap ;);_dggd .setPadBits (0);if _eagf ,_fbfce =_ccaa (nil ,_dggd );_fbfce !=nil {return nil ,_c .Wrap (_fbfce ,_dbca ,"\u0062\u006d\u0031");};if _dbee ,_fbfce =_ccaa (nil ,_dggd );_fbfce !=nil {return nil ,_c .Wrap (_fbfce ,_dbca ,"\u0062\u006d\u0032");
};_aeffb :=&_bc .Stack {};_aeffb .Aux =&_bc .Stack {};_dfc =&Boxes {};var (_aeeb ,_fbbe int ;_bea _d .Point ;_bfcd bool ;_cdf *_d .Rectangle ;);for {if _bea ,_bfcd ,_fbfce =_eagf .nextOnPixel (_aeeb ,_fbbe );_fbfce !=nil {return nil ,_c .Wrap (_fbfce ,_dbca ,"");
};if !_bfcd {break ;};if _cdf ,_fbfce =_gafd (_eagf ,_aeffb ,_bea .X ,_bea .Y ,_fge );_fbfce !=nil {return nil ,_c .Wrap (_fbfce ,_dbca ,"");};if _fbfce =_dfc .Add (_cdf );_fbfce !=nil {return nil ,_c .Wrap (_fbfce ,_dbca ,"");};if _fgbad ,_fbfce =_eagf .clipRectangle (_cdf ,nil );
_fbfce !=nil {return nil ,_c .Wrap (_fbfce ,_dbca ,"\u0062\u006d\u0033");};if _ecgf ,_fbfce =_dbee .clipRectangle (_cdf ,nil );_fbfce !=nil {return nil ,_c .Wrap (_fbfce ,_dbca ,"\u0062\u006d\u0034");};if _ ,_fbfce =_adeg (_fgbad ,_fgbad ,_ecgf );_fbfce !=nil {return nil ,_c .Wrap (_fbfce ,_dbca ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _fbfce =_dbee .RasterOperation (_cdf .Min .X ,_cdf .Min .Y ,_cdf .Dx (),_cdf .Dy (),PixSrcXorDst ,_fgbad ,0,0);_fbfce !=nil {return nil ,_c .Wrap (_fbfce ,_dbca ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};
_cfae .AddBitmap (_fgbad );_aeeb =_bea .X ;_fbbe =_bea .Y ;};_cfae .Boxes =*_dfc ;return _dfc ,nil ;};func _afa (_agae int )int {if _agae < 0{return -_agae ;};return _agae ;};const (_gcfd shift =iota ;_dfac ;);type Selection struct{Height ,Width int ;Cx ,Cy int ;
Name string ;Data [][]SelectionValue ;};func TstWordBitmapWithSpaces (t *_bb .T ,scale ...int )*Bitmap {_gfecb :=1;if len (scale )> 0{_gfecb =scale [0];};_eadc :=3;_gabf :=9+7+15+2*_eadc +2*_eadc ;_gdbe :=5+_eadc +5+2*_eadc ;_gadda :=New (_gabf *_gfecb ,_gdbe *_gfecb );
_ecce :=&Bitmaps {};var _eefd *int ;_eadc *=_gfecb ;_ceaff :=_eadc ;_eefd =&_ceaff ;_ebddg :=_eadc ;_cededa :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,1*_gfecb );_cededa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,_eadc );
_cededa =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,1*_gfecb );_cededa =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,_eadc );_cededa =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,1*_gfecb );
_cededa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,1*_gfecb );_cededa =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,0);*_eefd =_eadc ;_ebddg =5*_gfecb +_eadc ;_cededa =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,1*_gfecb );_cededa =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,_eadc );_cededa =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,1*_gfecb );_cededa =TstESymbol (t ,scale ...);
TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,1*_gfecb );_cededa =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,1*_gfecb );_cededa =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,1*_gfecb );_cededa =TstRSymbol (t ,scale ...);
TstAddSymbol (t ,_ecce ,_cededa ,_eefd ,_ebddg ,0);TstWriteSymbols (t ,_ecce ,_gadda );return _gadda ;};func _ag (_dd ,_aeb *Bitmap )(_caa error ){const _cd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_ad :=_aeb .RowStride ;_cc :=_dd .RowStride ;_cad :=_aeb .RowStride *4-_dd .RowStride ;var (_bac ,_gca byte ;_bce uint32 ;_bag ,_ceg ,_ed ,_ga ,_gab ,_cdc ,_faa int ;);for _ed =0;_ed < _aeb .Height ;_ed ++{_bag =_ed *_ad ;_ceg =4*_ed *_cc ;for _ga =0;_ga < _ad ;
_ga ++{_bac =_aeb .Data [_bag +_ga ];_bce =_ebae [_bac ];_cdc =_ceg +_ga *4;if _cad !=0&&(_ga +1)*4> _dd .RowStride {for _gab =_cad ;_gab > 0;_gab --{_gca =byte ((_bce >>uint (_gab *8))&0xff);_faa =_cdc +(_cad -_gab );if _caa =_dd .SetByte (_faa ,_gca );
_caa !=nil {return _c .Wrapf (_caa ,_cd ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_gab );};};}else if _caa =_dd .setFourBytes (_cdc ,_bce );_caa !=nil {return _c .Wrap (_caa ,_cd ,"");
};if _caa =_dd .setFourBytes (_ceg +_ga *4,_ebae [_aeb .Data [_bag +_ga ]]);_caa !=nil {return _c .Wrap (_caa ,_cd ,"");};};for _gab =1;_gab < 4;_gab ++{for _ga =0;_ga < _cc ;_ga ++{if _caa =_dd .SetByte (_ceg +_gab *_cc +_ga ,_dd .Data [_ceg +_ga ]);_caa !=nil {return _c .Wrapf (_caa ,_cd ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_gab ,_ga );
};};};};return nil ;};func TstPSymbol (t *_bb .T )*Bitmap {t .Helper ();_baabb :=New (5,8);_b .NoError (t ,_baabb .SetPixel (0,0,1));_b .NoError (t ,_baabb .SetPixel (1,0,1));_b .NoError (t ,_baabb .SetPixel (2,0,1));_b .NoError (t ,_baabb .SetPixel (3,0,1));
_b .NoError (t ,_baabb .SetPixel (4,1,1));_b .NoError (t ,_baabb .SetPixel (0,1,1));_b .NoError (t ,_baabb .SetPixel (4,2,1));_b .NoError (t ,_baabb .SetPixel (0,2,1));_b .NoError (t ,_baabb .SetPixel (4,3,1));_b .NoError (t ,_baabb .SetPixel (0,3,1));
_b .NoError (t ,_baabb .SetPixel (0,4,1));_b .NoError (t ,_baabb .SetPixel (1,4,1));_b .NoError (t ,_baabb .SetPixel (2,4,1));_b .NoError (t ,_baabb .SetPixel (3,4,1));_b .NoError (t ,_baabb .SetPixel (0,5,1));_b .NoError (t ,_baabb .SetPixel (0,6,1));
_b .NoError (t ,_baabb .SetPixel (0,7,1));return _baabb ;};func (_cdbaf *Bitmaps )GetBox (i int )(*_d .Rectangle ,error ){const _gcbda ="\u0047\u0065\u0074\u0042\u006f\u0078";if _cdbaf ==nil {return nil ,_c .Error (_gcbda ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_cdbaf .Boxes )-1{return nil ,_c .Errorf (_gcbda ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cdbaf .Boxes [i ],nil ;};func (_adfd *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _bfee ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _adfd ==nil {return nil ,_c .Error (_bfee ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_adfd .Values )-1{return nil ,_c .Errorf (_bfee ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _adfd .Values [i ],nil ;};func (_gfge *Bitmaps )CountPixels ()*_bc .NumSlice {_fggeb :=&_bc .NumSlice {};for _ ,_fecad :=range _gfge .Values {_fggeb .AddInt (_fecad .CountPixels ());};return _fggeb ;};func (_gdd *Bitmap )SizesEqual (s *Bitmap )bool {if _gdd ==s {return true ;
};if _gdd .Width !=s .Width ||_gdd .Height !=s .Height {return false ;};return true ;};func (_aba *Bitmap )Copy ()*Bitmap {_gdcd :=make ([]byte ,len (_aba .Data ));copy (_gdcd ,_aba .Data );return &Bitmap {Width :_aba .Width ,Height :_aba .Height ,RowStride :_aba .RowStride ,Data :_gdcd ,Color :_aba .Color ,Text :_aba .Text ,BitmapNumber :_aba .BitmapNumber ,Special :_aba .Special };
};func (_beef Points )Size ()int {return len (_beef )};func _efgd (_gbgcd ,_geef *Bitmap ,_dggc ,_acgbd int )(*Bitmap ,error ){const _ebff ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _geef ==nil {return nil ,_c .Error (_ebff ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _dggc < 1||_acgbd < 1{return nil ,_c .Error (_ebff ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _dggc ==1&&_acgbd ==1{_bgbgc ,_bdgd :=_ccaa (_gbgcd ,_geef );if _bdgd !=nil {return nil ,_c .Wrap (_bdgd ,_ebff ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bgbgc ,nil ;};if _dggc ==1||_acgbd ==1{_begg :=SelCreateBrick (_acgbd ,_dggc ,_acgbd /2,_dggc /2,SelHit );_eceaf ,_fedgd :=_efeb (_gbgcd ,_geef ,_begg );if _fedgd !=nil {return nil ,_c .Wrap (_fedgd ,_ebff ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _eceaf ,nil ;};_fegge :=SelCreateBrick (1,_dggc ,0,_dggc /2,SelHit );_aeadea :=SelCreateBrick (_acgbd ,1,_acgbd /2,0,SelHit );_bdba ,_adad :=_efeb (nil ,_geef ,_fegge );if _adad !=nil {return nil ,_c .Wrap (_adad ,_ebff ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_gbgcd ,_adad =_efeb (_gbgcd ,_bdba ,_aeadea );if _adad !=nil {return nil ,_c .Wrap (_adad ,_ebff ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _gbgcd ,nil ;};func TstImageBitmapInverseData ()[]byte {_fcdc :=_ffcg .Copy ();_fcdc .InverseData ();
return _fcdc .Data ;};func TstESymbol (t *_bb .T ,scale ...int )*Bitmap {_fedb ,_eced :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_b .NoError (t ,_eced );return TstGetScaledSymbol (t ,_fedb ,scale ...);};func _eg (_eda ,_be *Bitmap )(_ff error ){const _ee ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_gcc :=_be .RowStride ;_cg :=_eda .RowStride ;var _bed ,_cga ,_ggb ,_fe ,_dg int ;for _ggb =0;_ggb < _be .Height ;_ggb ++{_bed =_ggb *_gcc ;_cga =8*_ggb *_cg ;for _fe =0;_fe < _gcc ;_fe ++{if _ff =_eda .setEightBytes (_cga +_fe *8,_edbb [_be .Data [_bed +_fe ]]);
_ff !=nil {return _c .Wrap (_ff ,_ee ,"");};};for _dg =1;_dg < 8;_dg ++{for _fe =0;_fe < _cg ;_fe ++{if _ff =_eda .SetByte (_cga +_dg *_cg +_fe ,_eda .Data [_cga +_fe ]);_ff !=nil {return _c .Wrap (_ff ,_ee ,"");};};};};return nil ;};func MakePixelCentroidTab8 ()[]int {return _geag ()};
func (_fgeb *Selection )setOrigin (_dcff ,_fcbg int ){_fgeb .Cy ,_fgeb .Cx =_dcff ,_fcbg };func _aeade (_efdd ,_ggbd *Bitmap ,_afcd *Selection )(*Bitmap ,error ){const _dfbd ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _fbca error ;
if _efdd ,_fbca =_gfa (_efdd ,_ggbd ,_afcd );_fbca !=nil {return nil ,_fbca ;};_gdeg ,_fbca :=_gcgc (nil ,_ggbd ,_afcd );if _fbca !=nil {return nil ,_c .Wrap (_fbca ,_dfbd ,"");};if _ ,_fbca =_efeb (_efdd ,_gdeg ,_afcd );_fbca !=nil {return nil ,_c .Wrap (_fbca ,_dfbd ,"");
};return _efdd ,nil ;};func (_dbge *byHeight )Len ()int {return len (_dbge .Values )};func _cfabc (_abf ,_cbddb *Bitmap ,_egd ,_fegd ,_caeg ,_cag ,_bga ,_dfec ,_bbdc ,_debe int ,_gddd CombinationOperator ,_ffdd int )error {var _bdbe int ;_cadee :=func (){_bdbe ++;
_caeg +=_cbddb .RowStride ;_cag +=_abf .RowStride ;_bga +=_abf .RowStride };for _bdbe =_egd ;_bdbe < _fegd ;_cadee (){var _geeg uint16 ;_abe :=_caeg ;for _cec :=_cag ;_cec <=_bga ;_cec ++{_gebd ,_cdbe :=_cbddb .GetByte (_abe );if _cdbe !=nil {return _cdbe ;
};_gecc ,_cdbe :=_abf .GetByte (_cec );if _cdbe !=nil {return _cdbe ;};_geeg =(_geeg |(uint16 (_gecc )&0xff))<<uint (_debe );_gecc =byte (_geeg >>8);if _cdbe =_cbddb .SetByte (_abe ,_cdga (_gebd ,_gecc ,_gddd ));_cdbe !=nil {return _cdbe ;};_abe ++;_geeg <<=uint (_bbdc );
if _cec ==_bga {_gecc =byte (_geeg >>(8-uint8 (_debe )));if _ffdd !=0{_gecc =_aadb (uint (8+_dfec ),_gecc );};_gebd ,_cdbe =_cbddb .GetByte (_abe );if _cdbe !=nil {return _cdbe ;};if _cdbe =_cbddb .SetByte (_abe ,_cdga (_gebd ,_gecc ,_gddd ));_cdbe !=nil {return _cdbe ;
};};};};return nil ;};func _geag ()[]int {_bcca :=make ([]int ,256);_bcca [0]=0;_bcca [1]=7;var _beff int ;for _beff =2;_beff < 4;_beff ++{_bcca [_beff ]=_bcca [_beff -2]+6;};for _beff =4;_beff < 8;_beff ++{_bcca [_beff ]=_bcca [_beff -4]+5;};for _beff =8;
_beff < 16;_beff ++{_bcca [_beff ]=_bcca [_beff -8]+4;};for _beff =16;_beff < 32;_beff ++{_bcca [_beff ]=_bcca [_beff -16]+3;};for _beff =32;_beff < 64;_beff ++{_bcca [_beff ]=_bcca [_beff -32]+2;};for _beff =64;_beff < 128;_beff ++{_bcca [_beff ]=_bcca [_beff -64]+1;
};for _beff =128;_beff < 256;_beff ++{_bcca [_beff ]=_bcca [_beff -128];};return _bcca ;};func (_ebd *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _ebd .removeBorderGeneral (left ,right ,top ,bot );};func (_fffg *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _edca ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _fffg ==nil {return nil ,_c .Error (_edca ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_c .Error (_edca ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_geecgd :=len (_fffg .Values );_gbcga :=&Bitmaps {Values :make ([]*Bitmap ,_geecgd ),Boxes :make ([]*_d .Rectangle ,_geecgd )};var (_abfc ,_eedg *Bitmap ;_dece *_d .Rectangle ;_dfded error ;);for _decea :=0;_decea < _geecgd ;_decea ++{if _abfc ,_dfded =_fffg .GetBitmap (_decea );
_dfded !=nil {return nil ,_c .Wrap (_dfded ,_edca ,"");};if _dece ,_dfded =_fffg .GetBox (_decea );_dfded !=nil {return nil ,_c .Wrap (_dfded ,_edca ,"");};if _eedg ,_dfded =s .clipRectangle (_dece ,nil );_dfded !=nil {return nil ,_c .Wrap (_dfded ,_edca ,"");
};if _eedg ,_dfded =_eedg .And (_abfc );_dfded !=nil {return nil ,_c .Wrap (_dfded ,_edca ,"");};_gbcga .Values [_decea ]=_eedg ;_gbcga .Boxes [_decea ]=_dece ;};return _gbcga ,nil ;};func _caf (_dfb *Bitmap ,_eb ,_aee int )(*Bitmap ,error ){const _ef ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _dfb ==nil {return nil ,_c .Error (_ef ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _eb <=0||_aee <=0{return nil ,_c .Error (_ef ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _eb ==_aee {if _eb ==1{_bg ,_bdc :=_ccaa (nil ,_dfb );if _bdc !=nil {return nil ,_c .Wrap (_bdc ,_ef ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _bg ,nil ;};if _eb ==2||_eb ==4||_eb ==8{_bf ,_bdgf :=_fad (_dfb ,_eb );
if _bdgf !=nil {return nil ,_c .Wrap (_bdgf ,_ef ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _bf ,nil ;};};_cgaf :=_eb *_dfb .Width ;_ebb :=_aee *_dfb .Height ;_ec :=New (_cgaf ,_ebb );_agd :=_ec .RowStride ;
var (_cca ,_ccb ,_dcg ,_gd ,_bdb int ;_bdgfa byte ;_eee error ;);for _ccb =0;_ccb < _dfb .Height ;_ccb ++{_cca =_aee *_ccb *_agd ;for _dcg =0;_dcg < _dfb .Width ;_dcg ++{if _ccbe :=_dfb .GetPixel (_dcg ,_ccb );_ccbe {_bdb =_eb *_dcg ;for _gd =0;_gd < _eb ;
_gd ++{_ec .setBit (_cca *8+_bdb +_gd );};};};for _gd =1;_gd < _aee ;_gd ++{_ea :=_cca +_gd *_agd ;for _bba :=0;_bba < _agd ;_bba ++{if _bdgfa ,_eee =_ec .GetByte (_cca +_bba );_eee !=nil {return nil ,_c .Wrapf (_eee ,_ef ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_gd );
};if _eee =_ec .SetByte (_ea +_bba ,_bdgfa );_eee !=nil {return nil ,_c .Wrap (_eee ,_ef ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _ec ,nil ;};func (_fbfaf *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_bfg *Boxes ,_aagg error ){const _aeba ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _fbfaf ==nil {return nil ,_c .Error (_aeba ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_c .Error (_aeba ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _bfg ,_aagg =_fbfaf .connComponentsBB (connectivity );_aagg !=nil {return nil ,_c .Wrap (_aagg ,_aeba ,"");};}else {if _bfg ,_aagg =_fbfaf .connComponentsBitmapsBB (bms ,connectivity );_aagg !=nil {return nil ,_c .Wrap (_aagg ,_aeba ,"");
};};return _bfg ,nil ;};func _eca (_ecc ,_bcc int )*Bitmap {return &Bitmap {Width :_ecc ,Height :_bcc ,RowStride :(_ecc +7)>>3};};func _gafd (_dcag *Bitmap ,_ffedf *_bc .Stack ,_aecc ,_dgbg ,_geee int )(_gdfaa *_d .Rectangle ,_gddae error ){const _adfb ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _dcag ==nil {return nil ,_c .Error (_adfb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _ffedf ==nil {return nil ,_c .Error (_adfb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _geee {case 4:if _gdfaa ,_gddae =_fgdg (_dcag ,_ffedf ,_aecc ,_dgbg );_gddae !=nil {return nil ,_c .Wrap (_gddae ,_adfb ,"");};return _gdfaa ,nil ;case 8:if _gdfaa ,_gddae =_gcce (_dcag ,_ffedf ,_aecc ,_dgbg );_gddae !=nil {return nil ,_c .Wrap (_gddae ,_adfb ,"");
};return _gdfaa ,nil ;default:return nil ,_c .Errorf (_adfb ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_geee );
};};func (_bfgd Points )YSorter ()func (_ggfb ,_ceef int )bool {return func (_cgffe ,_fdcd int )bool {return _bfgd [_cgffe ].Y < _bfgd [_fdcd ].Y };};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_d .Rectangle ;};func _cba ()(_eba [256]uint64 ){for _ffbe :=0;
_ffbe < 256;_ffbe ++{if _ffbe &0x01!=0{_eba [_ffbe ]|=0xff;};if _ffbe &0x02!=0{_eba [_ffbe ]|=0xff00;};if _ffbe &0x04!=0{_eba [_ffbe ]|=0xff0000;};if _ffbe &0x08!=0{_eba [_ffbe ]|=0xff000000;};if _ffbe &0x10!=0{_eba [_ffbe ]|=0xff00000000;};if _ffbe &0x20!=0{_eba [_ffbe ]|=0xff0000000000;
};if _ffbe &0x40!=0{_eba [_ffbe ]|=0xff000000000000;};if _ffbe &0x80!=0{_eba [_ffbe ]|=0xff00000000000000;};};return _eba ;};type Point struct{X ,Y float32 ;};func _fc (_ab *Bitmap ,_cgg *Bitmap ,_bdg int )(_dc error ){const _aea ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _bdg {case 2:_dc =_e (_ab ,_cgg );case 4:_dc =_ag (_ab ,_cgg );case 8:_dc =_eg (_ab ,_cgg );default:return _c .Error (_aea ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _dc !=nil {_dc =_c .Wrap (_dc ,_aea ,"");};return _dc ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _dcegf ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_c .Error (_dcegf ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_c .Error (_dcegf ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_c .Error (_dcegf ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_c .Error (_dcegf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_c .Error (_dcegf ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_gegd ,_cffbgf :=bm1 .Width ,bm1 .Height ;_cdef ,_aafa :=bm2 .Width ,bm2 .Height ;if _bc .Abs (_gegd -_cdef )> maxDiffW {return false ,nil ;};if _bc .Abs (_cffbgf -_aafa )> maxDiffH {return false ,nil ;};_bde :=int (delX +_bc .Sign (delX )*0.5);_febg :=int (delY +_bc .Sign (delY )*0.5);
_ggca :=int (_f .Ceil (_f .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_adc :=bm2 .RowStride ;_cbcg :=_fdeb (_febg ,0);_bffg :=_edgb (_aafa +_febg ,_cffbgf );_gbcg :=bm1 .RowStride *_cbcg ;_cefa :=bm2 .RowStride *(_cbcg -_febg );
var _bede int ;if _bffg <=_cffbgf {_bede =downcount [_bffg -1];};_acbf :=_fdeb (_bde ,0);_ccafb :=_edgb (_cdef +_bde ,_gegd );var _cgff ,_cceca int ;if _bde >=8{_cgff =_bde >>3;_gbcg +=_cgff ;_acbf -=_cgff <<3;_ccafb -=_cgff <<3;_bde &=7;}else if _bde <=-8{_cceca =-((_bde +7)>>3);
_cefa +=_cceca ;_adc -=_cceca ;_bde +=_cceca <<3;};var (_ebfb ,_gffg ,_gege int ;_dfad ,_bccff ,_bfcb byte ;);if _acbf >=_ccafb ||_cbcg >=_bffg {return false ,nil ;};_gbfa :=(_ccafb +7)>>3;switch {case _bde ==0:for _gffg =_cbcg ;_gffg < _bffg ;_gffg ,_gbcg ,_cefa =_gffg +1,_gbcg +bm1 .RowStride ,_cefa +bm2 .RowStride {for _gege =0;
_gege < _gbfa ;_gege ++{_dfad =bm1 .Data [_gbcg +_gege ]&bm2 .Data [_cefa +_gege ];_ebfb +=tab [_dfad ];};if _ebfb >=_ggca {return true ,nil ;};if _ecde :=_ebfb +downcount [_gffg ]-_bede ;_ecde < _ggca {return false ,nil ;};};case _bde > 0&&_adc < _gbfa :for _gffg =_cbcg ;
_gffg < _bffg ;_gffg ,_gbcg ,_cefa =_gffg +1,_gbcg +bm1 .RowStride ,_cefa +bm2 .RowStride {_bccff =bm1 .Data [_gbcg ];_bfcb =bm2 .Data [_cefa ]>>uint (_bde );_dfad =_bccff &_bfcb ;_ebfb +=tab [_dfad ];for _gege =1;_gege < _adc ;_gege ++{_bccff =bm1 .Data [_gbcg +_gege ];
_bfcb =bm2 .Data [_cefa +_gege ]>>uint (_bde )|bm2 .Data [_cefa +_gege -1]<<uint (8-_bde );_dfad =_bccff &_bfcb ;_ebfb +=tab [_dfad ];};_bccff =bm1 .Data [_gbcg +_gege ];_bfcb =bm2 .Data [_cefa +_gege -1]<<uint (8-_bde );_dfad =_bccff &_bfcb ;_ebfb +=tab [_dfad ];
if _ebfb >=_ggca {return true ,nil ;}else if _ebfb +downcount [_gffg ]-_bede < _ggca {return false ,nil ;};};case _bde > 0&&_adc >=_gbfa :for _gffg =_cbcg ;_gffg < _bffg ;_gffg ,_gbcg ,_cefa =_gffg +1,_gbcg +bm1 .RowStride ,_cefa +bm2 .RowStride {_bccff =bm1 .Data [_gbcg ];
_bfcb =bm2 .Data [_cefa ]>>uint (_bde );_dfad =_bccff &_bfcb ;_ebfb +=tab [_dfad ];for _gege =1;_gege < _gbfa ;_gege ++{_bccff =bm1 .Data [_gbcg +_gege ];_bfcb =bm2 .Data [_cefa +_gege ]>>uint (_bde );_bfcb |=bm2 .Data [_cefa +_gege -1]<<uint (8-_bde );
_dfad =_bccff &_bfcb ;_ebfb +=tab [_dfad ];};if _ebfb >=_ggca {return true ,nil ;}else if _ebfb +downcount [_gffg ]-_bede < _ggca {return false ,nil ;};};case _gbfa < _adc :for _gffg =_cbcg ;_gffg < _bffg ;_gffg ,_gbcg ,_cefa =_gffg +1,_gbcg +bm1 .RowStride ,_cefa +bm2 .RowStride {for _gege =0;
_gege < _gbfa ;_gege ++{_bccff =bm1 .Data [_gbcg +_gege ];_bfcb =bm2 .Data [_cefa +_gege ]<<uint (-_bde );_bfcb |=bm2 .Data [_cefa +_gege +1]>>uint (8+_bde );_dfad =_bccff &_bfcb ;_ebfb +=tab [_dfad ];};if _ebfb >=_ggca {return true ,nil ;}else if _dacf :=_ebfb +downcount [_gffg ]-_bede ;
_dacf < _ggca {return false ,nil ;};};case _adc >=_gbfa :for _gffg =_cbcg ;_gffg < _bffg ;_gffg ,_gbcg ,_cefa =_gffg +1,_gbcg +bm1 .RowStride ,_cefa +bm2 .RowStride {for _gege =0;_gege < _gbfa ;_gege ++{_bccff =bm1 .Data [_gbcg +_gege ];_bfcb =bm2 .Data [_cefa +_gege ]<<uint (-_bde );
_bfcb |=bm2 .Data [_cefa +_gege +1]>>uint (8+_bde );_dfad =_bccff &_bfcb ;_ebfb +=tab [_dfad ];};_bccff =bm1 .Data [_gbcg +_gege ];_bfcb =bm2 .Data [_cefa +_gege ]<<uint (-_bde );_dfad =_bccff &_bfcb ;_ebfb +=tab [_dfad ];if _ebfb >=_ggca {return true ,nil ;
}else if _ebfb +downcount [_gffg ]-_bede < _ggca {return false ,nil ;};};};_aege :=float32 (_ebfb )*float32 (_ebfb )/(float32 (area1 )*float32 (area2 ));if _aege >=scoreThreshold {_gf .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_ebfb ,_ggca ,_aege ,scoreThreshold );
};return false ,nil ;};type SizeSelection int ;func _acgd (_dgdc *Bitmap ,_faea int )(*Bitmap ,error ){const _gfbf ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _dgdc ==nil {return nil ,_c .Error (_gfbf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _faea <=0{return nil ,_c .Error (_gfbf ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _faea ==1{_ebcfb ,_cfdff :=_ccaa (nil ,_dgdc );if _cfdff !=nil {return nil ,_c .Wrap (_cfdff ,_gfbf ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _ebcfb ,nil ;};_fbabg ,_fecdf :=_caf (_dgdc ,_faea ,_faea );if _fecdf !=nil {return nil ,_c .Wrap (_fecdf ,_gfbf ,"");};return _fbabg ,nil ;};func (_cdafg *ClassedPoints )Swap (i ,j int ){_cdafg .IntSlice [i ],_cdafg .IntSlice [j ]=_cdafg .IntSlice [j ],_cdafg .IntSlice [i ];
};func (_ccba *Bitmap )setEightBytes (_fcfd int ,_badg uint64 )error {_ddf :=_ccba .RowStride -(_fcfd %_ccba .RowStride );if _ccba .RowStride !=_ccba .Width >>3{_ddf --;};if _ddf >=8{return _ccba .setEightFullBytes (_fcfd ,_badg );};return _ccba .setEightPartlyBytes (_fcfd ,_ddf ,_badg );
};func (_fdda *Bitmaps )selectByIndicator (_gacg *_bc .NumSlice )(_daec *Bitmaps ,_bgabf error ){const _faffg ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _fdda ==nil {return nil ,_c .Error (_faffg ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _gacg ==nil {return nil ,_c .Error (_faffg ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_fdda .Values )==0{return _fdda ,nil ;};if len (*_gacg )!=len (_fdda .Values ){return nil ,_c .Errorf (_faffg ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_gacg ),len (_fdda .Values ));
};var _faddb ,_feaf ,_bdab int ;for _feaf =0;_feaf < len (*_gacg );_feaf ++{if _faddb ,_bgabf =_gacg .GetInt (_feaf );_bgabf !=nil {return nil ,_c .Wrap (_bgabf ,_faffg ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _faddb ==1{_bdab ++;
};};if _bdab ==len (_fdda .Values ){return _fdda ,nil ;};_daec =&Bitmaps {};_dbbd :=len (_fdda .Values )==len (_fdda .Boxes );for _feaf =0;_feaf < len (*_gacg );_feaf ++{if _faddb =int ((*_gacg )[_feaf ]);_faddb ==0{continue ;};_daec .Values =append (_daec .Values ,_fdda .Values [_feaf ]);
if _dbbd {_daec .Boxes =append (_daec .Boxes ,_fdda .Boxes [_feaf ]);};};return _daec ,nil ;};func (_gabg *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _gabg .addBorderGeneral (left ,right ,top ,bot ,val );};func (_edda *Bitmaps )SortByWidth (){_ffff :=(*byWidth )(_edda );
_ae .Sort (_ffff )};func (_edd *Bitmap )clipRectangle (_cffb ,_eddb *_d .Rectangle )(_cdag *Bitmap ,_eaee error ){const _fda ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _cffb ==nil {return nil ,_c .Error (_fda ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_faff ,_beea :=_edd .Width ,_edd .Height ;_abda ,_eaee :=ClipBoxToRectangle (_cffb ,_faff ,_beea );if _eaee !=nil {_gf .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_eaee );
return nil ,nil ;};_gcaf ,_bcfe :=_abda .Min .X ,_abda .Min .Y ;_fcfc ,_cbbc :=_abda .Max .X -_abda .Min .X ,_abda .Max .Y -_abda .Min .Y ;_cdag =New (_fcfc ,_cbbc );_cdag .Text =_edd .Text ;if _eaee =_cdag .RasterOperation (0,0,_fcfc ,_cbbc ,PixSrc ,_edd ,_gcaf ,_bcfe );
_eaee !=nil {return nil ,_c .Wrap (_eaee ,_fda ,"");};if _eddb !=nil {*_eddb =*_abda ;};return _cdag ,nil ;};func (_gecag *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _bbcc ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_gecag .Values )==0{return nil ,_c .Error (_bbcc ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_geed :=&BitmapsArray {};_gecag .SortByWidth ();_baag :=-1;_bfca :=-1;for _gabacc :=0;_gabacc < len (_gecag .Values );
_gabacc ++{_effb :=_gecag .Values [_gabacc ].Width ;if _effb > _baag {_baag =_effb ;_bfca ++;_geed .Values =append (_geed .Values ,&Bitmaps {});};_geed .Values [_bfca ].AddBitmap (_gecag .Values [_gabacc ]);};return _geed ,nil ;};func (_aebgg *ClassedPoints )SortByY (){_aebgg ._faabb =_aebgg .ySortFunction ();
_ae .Sort (_aebgg )};func TstISymbol (t *_bb .T ,scale ...int )*Bitmap {_adda ,_ddcg :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_b .NoError (t ,_ddcg );return TstGetScaledSymbol (t ,_adda ,scale ...);};func (_bccbg *ClassedPoints )validateIntSlice ()error {const _cbbg ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_egba :=range _bccbg .IntSlice {if _egba >=(_bccbg .Points .Size ()){return _c .Errorf (_cbbg ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_egba ,_bccbg .Points .Size ());
};};return nil ;};type MorphOperation int ;func _gdf (_fec ,_bcb *Bitmap ,_fba int ,_afe []byte ,_gee int )(_aef error ){const _dba ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_gfd ,_dag ,_accb ,_cfd ,_dga ,_gag ,_baf ,_cde int ;_fcg ,_gdc ,_ega ,_cggd uint32 ;_adb ,_gbg byte ;_daa uint16 ;);_aeab :=make ([]byte ,4);_gda :=make ([]byte ,4);for _accb =0;_accb < _fec .Height -1;_accb ,_cfd =_accb +2,_cfd +1{_gfd =_accb *_fec .RowStride ;
_dag =_cfd *_bcb .RowStride ;for _dga ,_gag =0,0;_dga < _gee ;_dga ,_gag =_dga +4,_gag +1{for _baf =0;_baf < 4;_baf ++{_cde =_gfd +_dga +_baf ;if _cde <=len (_fec .Data )-1&&_cde < _gfd +_fec .RowStride {_aeab [_baf ]=_fec .Data [_cde ];}else {_aeab [_baf ]=0x00;
};_cde =_gfd +_fec .RowStride +_dga +_baf ;if _cde <=len (_fec .Data )-1&&_cde < _gfd +(2*_fec .RowStride ){_gda [_baf ]=_fec .Data [_cde ];}else {_gda [_baf ]=0x00;};};_fcg =_gc .BigEndian .Uint32 (_aeab );_gdc =_gc .BigEndian .Uint32 (_gda );_ega =_fcg &_gdc ;
_ega |=_ega <<1;_cggd =_fcg |_gdc ;_cggd &=_cggd <<1;_gdc =_ega |_cggd ;_gdc &=0xaaaaaaaa;_fcg =_gdc |(_gdc <<7);_adb =byte (_fcg >>24);_gbg =byte ((_fcg >>8)&0xff);_cde =_dag +_gag ;if _cde +1==len (_bcb .Data )-1||_cde +1>=_dag +_bcb .RowStride {if _aef =_bcb .SetByte (_cde ,_afe [_adb ]);
_aef !=nil {return _c .Wrapf (_aef ,_dba ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cde );};}else {_daa =(uint16 (_afe [_adb ])<<8)|uint16 (_afe [_gbg ]);if _aef =_bcb .setTwoBytes (_cde ,_daa );_aef !=nil {return _c .Wrapf (_aef ,_dba ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cde );
};_gag ++;};};};return nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;
PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_ffbecc *Selection )findMaxTranslations ()(_fgae ,_fgce ,_gaea ,_gabac int ){for _efee :=0;_efee < _ffbecc .Height ;_efee ++{for _efdae :=0;
_efdae < _ffbecc .Width ;_efdae ++{if _ffbecc .Data [_efee ][_efdae ]==SelHit {_fgae =_fdeb (_fgae ,_ffbecc .Cx -_efdae );_fgce =_fdeb (_fgce ,_ffbecc .Cy -_efee );_gaea =_fdeb (_gaea ,_efdae -_ffbecc .Cx );_gabac =_fdeb (_gabac ,_efee -_ffbecc .Cy );};
};};return _fgae ,_fgce ,_gaea ,_gabac ;};func (_bege *Bitmaps )HeightSorter ()func (_ddga ,_geddg int )bool {return func (_gagbd ,_fcade int )bool {_gcda :=_bege .Values [_gagbd ].Height < _bege .Values [_fcade ].Height ;_gf .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_bege .Values [_gagbd ].Height ,_bege .Values [_fcade ].Height ,_gcda );
return _gcda ;};};type Bitmaps struct{Values []*Bitmap ;Boxes []*_d .Rectangle ;};func (_gaae *ClassedPoints )SortByX (){_gaae ._faabb =_gaae .xSortFunction ();_ae .Sort (_gaae )};func _gefe (_defb *Bitmap ,_dddb *Bitmap ,_dbea int )(_geagg error ){const _accfg ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_feca :=_edgb (_defb .Height ,_dddb .Height );_eebe :=_edgb (_defb .RowStride ,_dddb .RowStride );switch _dbea {case 4:_geagg =_aacg (_defb ,_dddb ,_feca ,_eebe );case 8:_geagg =_dagdb (_defb ,_dddb ,_feca ,_eebe );default:return _c .Errorf (_accfg ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_dbea );
};if _geagg !=nil {return _c .Wrap (_geagg ,_accfg ,"");};return nil ;};func (_fea *Bitmap )centroid (_dfcc ,_adea []int )(Point ,error ){_bfga :=Point {};_fea .setPadBits (0);if len (_dfcc )==0{_dfcc =_geag ();};if len (_adea )==0{_adea =_gceaf ();};var _ecac ,_aaaf ,_aeee ,_egcf ,_bbdb ,_aaea int ;
var _afcc byte ;for _bbdb =0;_bbdb < _fea .Height ;_bbdb ++{_deeb :=_fea .RowStride *_bbdb ;_egcf =0;for _aaea =0;_aaea < _fea .RowStride ;_aaea ++{_afcc =_fea .Data [_deeb +_aaea ];if _afcc !=0{_egcf +=_adea [_afcc ];_ecac +=_dfcc [_afcc ]+_aaea *8*_adea [_afcc ];
};};_aeee +=_egcf ;_aaaf +=_egcf *_bbdb ;};if _aeee !=0{_bfga .X =float32 (_ecac )/float32 (_aeee );_bfga .Y =float32 (_aaaf )/float32 (_aeee );};return _bfga ,nil ;};type shift int ;func (_ebca *Bitmap )GetPixel (x ,y int )bool {_ced :=_ebca .GetByteIndex (x ,y );
_bcec :=_ebca .GetBitOffset (x );_fdf :=uint (7-_bcec );if _ced > len (_ebca .Data )-1{_gf .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_ebca );
return false ;};if (_ebca .Data [_ced ]>>_fdf )&0x01>=1{return true ;};return false ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);var (_dggb *Bitmap ;_ffcg *Bitmap ;);func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _gba ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_cade :=_eca (width ,height );_cade .Data =data ;if len (data )< height *_cade .RowStride {return nil ,_c .Errorf (_gba ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_cade .RowStride );
};return _cade ,nil ;};var _gdff =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func TstTSymbol (t *_bb .T ,scale ...int )*Bitmap {_effe ,_befab :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_b .NoError (t ,_befab );return TstGetScaledSymbol (t ,_effe ,scale ...);};func TstWSymbol (t *_bb .T ,scale ...int )*Bitmap {_bdef ,_bgfd :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_b .NoError (t ,_bgfd );return TstGetScaledSymbol (t ,_bdef ,scale ...);};func _edgb (_fggc ,_cdbg int )int {if _fggc < _cdbg {return _fggc ;};return _cdbg ;};func _feeb (_gabcb *Bitmap ,_cbcebb ,_gccg int ,_fadce ,_gfda int ,_acgc RasterOperator ){var (_dfcf bool ;
_edae bool ;_bfbd int ;_cccg int ;_fbdc int ;_gagbg int ;_dade bool ;_eede byte ;);_adce :=8-(_cbcebb &7);_gbfab :=_aceee [_adce ];_dffae :=_gabcb .RowStride *_gccg +(_cbcebb >>3);if _fadce < _adce {_dfcf =true ;_gbfab &=_agad [8-_adce +_fadce ];};if !_dfcf {_bfbd =(_fadce -_adce )>>3;
if _bfbd !=0{_edae =true ;_cccg =_dffae +1;};};_fbdc =(_cbcebb +_fadce )&7;if !(_dfcf ||_fbdc ==0){_dade =true ;_eede =_agad [_fbdc ];_gagbg =_dffae +1+_bfbd ;};var _agcb ,_bddd int ;switch _acgc {case PixClr :for _agcb =0;_agcb < _gfda ;_agcb ++{_gabcb .Data [_dffae ]=_dddd (_gabcb .Data [_dffae ],0x0,_gbfab );
_dffae +=_gabcb .RowStride ;};if _edae {for _agcb =0;_agcb < _gfda ;_agcb ++{for _bddd =0;_bddd < _bfbd ;_bddd ++{_gabcb .Data [_cccg +_bddd ]=0x0;};_cccg +=_gabcb .RowStride ;};};if _dade {for _agcb =0;_agcb < _gfda ;_agcb ++{_gabcb .Data [_gagbg ]=_dddd (_gabcb .Data [_gagbg ],0x0,_eede );
_gagbg +=_gabcb .RowStride ;};};case PixSet :for _agcb =0;_agcb < _gfda ;_agcb ++{_gabcb .Data [_dffae ]=_dddd (_gabcb .Data [_dffae ],0xff,_gbfab );_dffae +=_gabcb .RowStride ;};if _edae {for _agcb =0;_agcb < _gfda ;_agcb ++{for _bddd =0;_bddd < _bfbd ;
_bddd ++{_gabcb .Data [_cccg +_bddd ]=0xff;};_cccg +=_gabcb .RowStride ;};};if _dade {for _agcb =0;_agcb < _gfda ;_agcb ++{_gabcb .Data [_gagbg ]=_dddd (_gabcb .Data [_gagbg ],0xff,_eede );_gagbg +=_gabcb .RowStride ;};};case PixNotDst :for _agcb =0;_agcb < _gfda ;
_agcb ++{_gabcb .Data [_dffae ]=_dddd (_gabcb .Data [_dffae ],^_gabcb .Data [_dffae ],_gbfab );_dffae +=_gabcb .RowStride ;};if _edae {for _agcb =0;_agcb < _gfda ;_agcb ++{for _bddd =0;_bddd < _bfbd ;_bddd ++{_gabcb .Data [_cccg +_bddd ]=^(_gabcb .Data [_cccg +_bddd ]);
};_cccg +=_gabcb .RowStride ;};};if _dade {for _agcb =0;_agcb < _gfda ;_agcb ++{_gabcb .Data [_gagbg ]=_dddd (_gabcb .Data [_gagbg ],^_gabcb .Data [_gagbg ],_eede );_gagbg +=_gabcb .RowStride ;};};};};func _gedd (_abga ...MorphProcess )(_cdcgc error ){const _cged ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _adde ,_fdgg int ;for _ffed ,_efgb :=range _abga {if _cdcgc =_efgb .verify (_ffed ,&_adde ,&_fdgg );_cdcgc !=nil {return _c .Wrap (_cdcgc ,_cged ,"");};};if _fdgg !=0&&_adde !=0{return _c .Error (_cged ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func (_fgcd *Bitmaps )AddBitmap (bm *Bitmap ){_fgcd .Values =append (_fgcd .Values ,bm )};func TstImageBitmap ()*Bitmap {return _ffcg .Copy ()};func _caca (_fegcb *Bitmap ,_dbbc ,_accg int ,_edbf ,_cccd int ,_fdfb RasterOperator ){var (_gbgcf int ;
_dgff byte ;_cacd ,_eefb int ;_bfccc int ;);_cbcebe :=_edbf >>3;_cagdg :=_edbf &7;if _cagdg > 0{_dgff =_agad [_cagdg ];};_gbgcf =_fegcb .RowStride *_accg +(_dbbc >>3);switch _fdfb {case PixClr :for _cacd =0;_cacd < _cccd ;_cacd ++{_bfccc =_gbgcf +_cacd *_fegcb .RowStride ;
for _eefb =0;_eefb < _cbcebe ;_eefb ++{_fegcb .Data [_bfccc ]=0x0;_bfccc ++;};if _cagdg > 0{_fegcb .Data [_bfccc ]=_dddd (_fegcb .Data [_bfccc ],0x0,_dgff );};};case PixSet :for _cacd =0;_cacd < _cccd ;_cacd ++{_bfccc =_gbgcf +_cacd *_fegcb .RowStride ;
for _eefb =0;_eefb < _cbcebe ;_eefb ++{_fegcb .Data [_bfccc ]=0xff;_bfccc ++;};if _cagdg > 0{_fegcb .Data [_bfccc ]=_dddd (_fegcb .Data [_bfccc ],0xff,_dgff );};};case PixNotDst :for _cacd =0;_cacd < _cccd ;_cacd ++{_bfccc =_gbgcf +_cacd *_fegcb .RowStride ;
for _eefb =0;_eefb < _cbcebe ;_eefb ++{_fegcb .Data [_bfccc ]=^_fegcb .Data [_bfccc ];_bfccc ++;};if _cagdg > 0{_fegcb .Data [_bfccc ]=_dddd (_fegcb .Data [_bfccc ],^_fegcb .Data [_bfccc ],_dgff );};};};};func (_efe *Bitmap )equivalent (_fcb *Bitmap )bool {if _efe ==_fcb {return true ;
};if !_efe .SizesEqual (_fcb ){return false ;};_edf :=_afgc (_efe ,_fcb ,CmbOpXor );_fbab :=_efe .countPixels ();_cfga :=int (0.25*float32 (_fbab ));if _edf .thresholdPixelSum (_cfga ){return false ;};var (_ada [9][9]int ;_bbc [18][9]int ;_cbd [9][18]int ;
_dgf int ;_gbgc int ;);_efff :=9;_fadg :=_efe .Height /_efff ;_bfd :=_efe .Width /_efff ;_cdg ,_cfab :=_fadg /2,_bfd /2;if _fadg < _bfd {_cdg =_bfd /2;_cfab =_fadg /2;};_gga :=float64 (_cdg )*float64 (_cfab )*_f .Pi ;_dgbf :=int (float64 (_fadg *_bfd /2)*0.9);
_ebf :=int (float64 (_bfd *_fadg /2)*0.9);for _gbd :=0;_gbd < _efff ;_gbd ++{_ffgf :=_bfd *_gbd +_dgf ;var _gdcg int ;if _gbd ==_efff -1{_dgf =0;_gdcg =_efe .Width ;}else {_gdcg =_ffgf +_bfd ;if ((_efe .Width -_dgf )%_efff )> 0{_dgf ++;_gdcg ++;};};for _fegc :=0;
_fegc < _efff ;_fegc ++{_gadc :=_fadg *_fegc +_gbgc ;var _bcggb int ;if _fegc ==_efff -1{_gbgc =0;_bcggb =_efe .Height ;}else {_bcggb =_gadc +_fadg ;if (_efe .Height -_gbgc )%_efff > 0{_gbgc ++;_bcggb ++;};};var _gcf ,_dfgd ,_cfcg ,_faabg int ;_cabc :=(_ffgf +_gdcg )/2;
_bfff :=(_gadc +_bcggb )/2;for _dgde :=_ffgf ;_dgde < _gdcg ;_dgde ++{for _gef :=_gadc ;_gef < _bcggb ;_gef ++{if _edf .GetPixel (_dgde ,_gef ){if _dgde < _cabc {_gcf ++;}else {_dfgd ++;};if _gef < _bfff {_faabg ++;}else {_cfcg ++;};};};};_ada [_gbd ][_fegc ]=_gcf +_dfgd ;
_bbc [_gbd *2][_fegc ]=_gcf ;_bbc [_gbd *2+1][_fegc ]=_dfgd ;_cbd [_gbd ][_fegc *2]=_faabg ;_cbd [_gbd ][_fegc *2+1]=_cfcg ;};};for _eab :=0;_eab < _efff *2-1;_eab ++{for _ffc :=0;_ffc < (_efff -1);_ffc ++{var _ceee int ;for _egf :=0;_egf < 2;_egf ++{for _fdg :=0;
_fdg < 2;_fdg ++{_ceee +=_bbc [_eab +_egf ][_ffc +_fdg ];};};if _ceee > _ebf {return false ;};};};for _dcbe :=0;_dcbe < (_efff -1);_dcbe ++{for _dbae :=0;_dbae < ((_efff *2)-1);_dbae ++{var _dbe int ;for _geca :=0;_geca < 2;_geca ++{for _fdga :=0;_fdga < 2;
_fdga ++{_dbe +=_cbd [_dcbe +_geca ][_dbae +_fdga ];};};if _dbe > _dgbf {return false ;};};};for _caaf :=0;_caaf < (_efff -2);_caaf ++{for _bffeg :=0;_bffeg < (_efff -2);_bffeg ++{var _cbe ,_aed int ;for _dbb :=0;_dbb < 3;_dbb ++{for _dgbfg :=0;_dgbfg < 3;
_dgbfg ++{if _dbb ==_dgbfg {_cbe +=_ada [_caaf +_dbb ][_bffeg +_dgbfg ];};if (2-_dbb )==_dgbfg {_aed +=_ada [_caaf +_dbb ][_bffeg +_dgbfg ];};};};if _cbe > _ebf ||_aed > _ebf {return false ;};};};for _fcfa :=0;_fcfa < (_efff -1);_fcfa ++{for _gdb :=0;_gdb < (_efff -1);
_gdb ++{var _cebed int ;for _baad :=0;_baad < 2;_baad ++{for _gaac :=0;_gaac < 2;_gaac ++{_cebed +=_ada [_fcfa +_baad ][_gdb +_gaac ];};};if float64 (_cebed )> _gga {return false ;};};};return true ;};var _ _ae .Interface =&ClassedPoints {};func TstWriteSymbols (t *_bb .T ,bms *Bitmaps ,src *Bitmap ){for _ffcc :=0;
_ffcc < bms .Size ();_ffcc ++{_dgdg :=bms .Values [_ffcc ];_bfa :=bms .Boxes [_ffcc ];_fbbf :=src .RasterOperation (_bfa .Min .X ,_bfa .Min .Y ,_dgdg .Width ,_dgdg .Height ,PixSrc ,_dgdg ,0,0);_b .NoError (t ,_fbbf );};};func _fgd ()(_cab [256]uint32 ){for _bcf :=0;
_bcf < 256;_bcf ++{if _bcf &0x01!=0{_cab [_bcf ]|=0xf;};if _bcf &0x02!=0{_cab [_bcf ]|=0xf0;};if _bcf &0x04!=0{_cab [_bcf ]|=0xf00;};if _bcf &0x08!=0{_cab [_bcf ]|=0xf000;};if _bcf &0x10!=0{_cab [_bcf ]|=0xf0000;};if _bcf &0x20!=0{_cab [_bcf ]|=0xf00000;
};if _bcf &0x40!=0{_cab [_bcf ]|=0xf000000;};if _bcf &0x80!=0{_cab [_bcf ]|=0xf0000000;};};return _cab ;};const (Vanilla Color =iota ;Chocolate ;);var (_edfb =_ffb ();_ebae =_fgd ();_edbb =_cba (););func _eegcb (_bdfa *Bitmap ,_abge ...MorphProcess )(_bfbf *Bitmap ,_bgef error ){const _beab ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _bdfa ==nil {return nil ,_c .Error (_beab ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_abge )==0{return nil ,_c .Error (_beab ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _bgef =_gedd (_abge ...);
_bgef !=nil {return nil ,_c .Wrap (_bgef ,_beab ,"");};var _geefg ,_gcac ,_defe int ;_bfbf =_bdfa .Copy ();for _ ,_bfdc :=range _abge {switch _bfdc .Operation {case MopDilation :_geefg ,_gcac =_bfdc .getWidthHeight ();_bfbf ,_bgef =DilateBrick (nil ,_bfbf ,_geefg ,_gcac );
if _bgef !=nil {return nil ,_c .Wrap (_bgef ,_beab ,"");};case MopErosion :_geefg ,_gcac =_bfdc .getWidthHeight ();_bfbf ,_bgef =_efgd (nil ,_bfbf ,_geefg ,_gcac );if _bgef !=nil {return nil ,_c .Wrap (_bgef ,_beab ,"");};case MopOpening :_geefg ,_gcac =_bfdc .getWidthHeight ();
_bfbf ,_bgef =_cbfaf (nil ,_bfbf ,_geefg ,_gcac );if _bgef !=nil {return nil ,_c .Wrap (_bgef ,_beab ,"");};case MopClosing :_geefg ,_gcac =_bfdc .getWidthHeight ();_bfbf ,_bgef =_bbded (nil ,_bfbf ,_geefg ,_gcac );if _bgef !=nil {return nil ,_c .Wrap (_bgef ,_beab ,"");
};case MopRankBinaryReduction :_bfbf ,_bgef =_ccf (_bfbf ,_bfdc .Arguments ...);if _bgef !=nil {return nil ,_c .Wrap (_bgef ,_beab ,"");};case MopReplicativeBinaryExpansion :_bfbf ,_bgef =_acgd (_bfbf ,_bfdc .Arguments [0]);if _bgef !=nil {return nil ,_c .Wrap (_bgef ,_beab ,"");
};case MopAddBorder :_defe =_bfdc .Arguments [0];_bfbf ,_bgef =_bfbf .AddBorder (_defe ,0);if _bgef !=nil {return nil ,_c .Wrap (_bgef ,_beab ,"");};default:return nil ,_c .Error (_beab ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _defe > 0{_bfbf ,_bgef =_bfbf .RemoveBorder (_defe );if _bgef !=nil {return nil ,_c .Wrap (_bgef ,_beab ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _bfbf ,nil ;};func (_eecg *Bitmap )ToImage ()_d .Image {_dgb ,_bcbd :=_ca .NewImage (_eecg .Width ,_eecg .Height ,1,1,_eecg .Data ,nil ,nil );
if _bcbd !=nil {_gf .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bcbd );
};return _dgb ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_eegc bool ,_edef error ){const _cbda ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_aadd ,_afdg :=p1 .Width ,p1 .Height ;_cedeb ,_gcdf :=p3 .Width ,p3 .Height ;if _bc .Abs (_aadd -_cedeb )> maxDiffW {return false ,nil ;};if _bc .Abs (_afdg -_gcdf )> maxDiffH {return false ,nil ;};_cggfb :=int (float32 (area1 )*(1.0-rank )+0.5);_gcafc :=int (float32 (area3 )*(1.0-rank )+0.5);
var _cgcg ,_gadd int ;if delX >=0{_cgcg =int (delX +0.5);}else {_cgcg =int (delX -0.5);};if delY >=0{_gadd =int (delY +0.5);}else {_gadd =int (delY -0.5);};_egfgf :=p1 .CreateTemplate ();if _edef =_egfgf .RasterOperation (0,0,_aadd ,_afdg ,PixSrc ,p1 ,0,0);
_edef !=nil {return false ,_c .Wrap (_edef ,_cbda ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _edef =_egfgf .RasterOperation (_cgcg ,_gadd ,_aadd ,_afdg ,PixNotSrcAndDst ,p4 ,0,0);_edef !=nil {return false ,_c .Wrap (_edef ,_cbda ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_eegc ,_edef =_egfgf .ThresholdPixelSum (_cggfb ,tab8 );if _edef !=nil {return false ,_c .Wrap (_edef ,_cbda ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _eegc {return false ,nil ;};if _edef =_egfgf .RasterOperation (_cgcg ,_gadd ,_cedeb ,_gcdf ,PixSrc ,p3 ,0,0);
_edef !=nil {return false ,_c .Wrap (_edef ,_cbda ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _edef =_egfgf .RasterOperation (0,0,_cedeb ,_gcdf ,PixNotSrcAndDst ,p2 ,0,0);_edef !=nil {return false ,_c .Wrap (_edef ,_cbda ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_eegc ,_edef =_egfgf .ThresholdPixelSum (_gcafc ,tab8 );if _edef !=nil {return false ,_c .Wrap (_edef ,_cbda ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_eegc ,nil ;};func _bddc (_feab *Bitmap ,_efbf ,_bbga ,_aecfa ,_ccecc int ,_adcd RasterOperator ){if _efbf < 0{_aecfa +=_efbf ;
_efbf =0;};_efbe :=_efbf +_aecfa -_feab .Width ;if _efbe > 0{_aecfa -=_efbe ;};if _bbga < 0{_ccecc +=_bbga ;_bbga =0;};_aedc :=_bbga +_ccecc -_feab .Height ;if _aedc > 0{_ccecc -=_aedc ;};if _aecfa <=0||_ccecc <=0{return ;};if (_efbf &7)==0{_caca (_feab ,_efbf ,_bbga ,_aecfa ,_ccecc ,_adcd );
}else {_feeb (_feab ,_efbf ,_bbga ,_aecfa ,_ccecc ,_adcd );};};func (_fffe *BitmapsArray )AddBitmaps (bm *Bitmaps ){_fffe .Values =append (_fffe .Values ,bm )};func _ccf (_cadg *Bitmap ,_bda ...int )(_ddc *Bitmap ,_de error ){const _bff ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _cadg ==nil {return nil ,_c .Error (_bff ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_bda )==0||len (_bda )> 4{return nil ,_c .Error (_bff ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _bda [0]<=0{_gf .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_ddc ,_de =_ccaa (nil ,_cadg );if _de !=nil {return nil ,_c .Wrap (_de ,_bff ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _ddc ,nil ;};_fae :=_cebe ();_ddc =_cadg ;for _agc ,_gge :=range _bda {if _gge <=0{break ;};_ddc ,_de =_cge (_ddc ,_gge ,_fae );if _de !=nil {return nil ,_c .Wrapf (_de ,_bff ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_agc );
};};return _ddc ,nil ;};func (_fgbac *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _bgcb ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_gefb ,_cededd :=_fgbac .selectByIndexes (idx );
if _cededd !=nil {return nil ,_c .Wrap (_cededd ,_bgcb ,"");};return _gefb ,nil ;};func (_beg *Bitmap )inverseData (){if _cdb :=_beg .RasterOperation (0,0,_beg .Width ,_beg .Height ,PixNotDst ,nil ,0,0);_cdb !=nil {_gf .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_cdb );
};if _beg .Color ==Chocolate {_beg .Color =Vanilla ;}else {_beg .Color =Chocolate ;};};func (_fdgba *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _bcce ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_fdgba .IntSlice .Size (){return 0,_c .Errorf (_bcce ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fdgba .YAtIndex (i )),nil ;};func (_ffbec *Bitmap )SetByte (index int ,v byte )error {if index > len (_ffbec .Data )-1||index < 0{return _c .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_ffbec .Data [index ]=v ;return nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_cbbb *Bitmap )CreateTemplate ()*Bitmap {return _cbbb .createTemplate ()};
func _abb (_cbgc ,_cfgae *Bitmap ,_afdc ,_ecea ,_gedc uint ,_dbc ,_fggf int ,_cegf bool ,_cebeg ,_cabe int )error {for _efggf :=_dbc ;_efggf < _fggf ;_efggf ++{if _cebeg +1< len (_cbgc .Data ){_dedf :=_efggf +1==_fggf ;_eed ,_dbgd :=_cbgc .GetByte (_cebeg );
if _dbgd !=nil {return _dbgd ;};_cebeg ++;_eed <<=_afdc ;_cdba ,_dbgd :=_cbgc .GetByte (_cebeg );if _dbgd !=nil {return _dbgd ;};_cdba >>=_ecea ;_gac :=_eed |_cdba ;if _dedf &&!_cegf {_gac =_aadb (_gedc ,_gac );};_dbgd =_cfgae .SetByte (_cabe ,_gac );if _dbgd !=nil {return _dbgd ;
};_cabe ++;if _dedf &&_cegf {_dbdg ,_egcb :=_cbgc .GetByte (_cebeg );if _egcb !=nil {return _egcb ;};_dbdg <<=_afdc ;_gac =_aadb (_gedc ,_dbdg );if _egcb =_cfgae .SetByte (_cabe ,_gac );_egcb !=nil {return _egcb ;};};continue ;};_ddede ,_effd :=_cbgc .GetByte (_cebeg );
if _effd !=nil {_gf .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_cebeg ,_effd );return _effd ;};
_ddede <<=_afdc ;_cebeg ++;_effd =_cfgae .SetByte (_cabe ,_ddede );if _effd !=nil {return _effd ;};_cabe ++;};return nil ;};func _cbfaf (_edeb ,_bgab *Bitmap ,_adbb ,_fdcc int )(*Bitmap ,error ){const _bced ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _bgab ==nil {return nil ,_c .Error (_bced ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _adbb < 1&&_fdcc < 1{return nil ,_c .Error (_bced ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _adbb ==1&&_fdcc ==1{return _bgab .Copy (),nil ;};if _adbb ==1||_fdcc ==1{var _gddaa error ;_gdg :=SelCreateBrick (_fdcc ,_adbb ,_fdcc /2,_adbb /2,SelHit );_edeb ,_gddaa =_bada (_edeb ,_bgab ,_gdg );if _gddaa !=nil {return nil ,_c .Wrap (_gddaa ,_bced ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _edeb ,nil ;};_gbdg :=SelCreateBrick (1,_adbb ,0,_adbb /2,SelHit );_age :=SelCreateBrick (_fdcc ,1,_fdcc /2,0,SelHit );_afeg ,_cage :=_efeb (nil ,_bgab ,_gbdg );if _cage !=nil {return nil ,_c .Wrap (_cage ,_bced ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_edeb ,_cage =_efeb (_edeb ,_afeg ,_age );if _cage !=nil {return nil ,_c .Wrap (_cage ,_bced ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_cage =_gcgc (_afeg ,_edeb ,_gbdg );if _cage !=nil {return nil ,_c .Wrap (_cage ,_bced ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_cage =_gcgc (_edeb ,_afeg ,_age );if _cage !=nil {return nil ,_c .Wrap (_cage ,_bced ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _edeb ,nil ;};func _abdd (_bgca *Bitmap ,_eeae ,_ffdg ,_edfg ,_ggce int ,_aaad RasterOperator ,_egac *Bitmap ,_eegd ,_edcg int )error {var (_gbfg byte ;
_gfg int ;_fgfgg int ;_aafb ,_dcge int ;_fbcdg ,_gagef int ;);_bdcd :=_edfg >>3;_cggdd :=_edfg &7;if _cggdd > 0{_gbfg =_agad [_cggdd ];};_gfg =_egac .RowStride *_edcg +(_eegd >>3);_fgfgg =_bgca .RowStride *_ffdg +(_eeae >>3);switch _aaad {case PixSrc :for _fbcdg =0;
_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]=_egac .Data [_aafb ];_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],_egac .Data [_aafb ],_gbfg );
};};case PixNotSrc :for _fbcdg =0;_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]=^(_egac .Data [_aafb ]);_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],^_egac .Data [_aafb ],_gbfg );
};};case PixSrcOrDst :for _fbcdg =0;_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]|=_egac .Data [_aafb ];_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],_egac .Data [_aafb ]|_bgca .Data [_dcge ],_gbfg );
};};case PixSrcAndDst :for _fbcdg =0;_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]&=_egac .Data [_aafb ];_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],_egac .Data [_aafb ]&_bgca .Data [_dcge ],_gbfg );
};};case PixSrcXorDst :for _fbcdg =0;_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]^=_egac .Data [_aafb ];_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],_egac .Data [_aafb ]^_bgca .Data [_dcge ],_gbfg );
};};case PixNotSrcOrDst :for _fbcdg =0;_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]|=^(_egac .Data [_aafb ]);_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],^(_egac .Data [_aafb ])|_bgca .Data [_dcge ],_gbfg );
};};case PixNotSrcAndDst :for _fbcdg =0;_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]&=^(_egac .Data [_aafb ]);_dcge ++;_aafb ++;};
if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],^(_egac .Data [_aafb ])&_bgca .Data [_dcge ],_gbfg );};};case PixSrcOrNotDst :for _fbcdg =0;_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;
for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]=_egac .Data [_aafb ]|^(_bgca .Data [_dcge ]);_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],_egac .Data [_aafb ]|^(_bgca .Data [_dcge ]),_gbfg );};};case PixSrcAndNotDst :for _fbcdg =0;
_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]=_egac .Data [_aafb ]&^(_bgca .Data [_dcge ]);_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],_egac .Data [_aafb ]&^(_bgca .Data [_dcge ]),_gbfg );
};};case PixNotPixSrcOrDst :for _fbcdg =0;_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]=^(_egac .Data [_aafb ]|_bgca .Data [_dcge ]);
_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],^(_egac .Data [_aafb ]|_bgca .Data [_dcge ]),_gbfg );};};case PixNotPixSrcAndDst :for _fbcdg =0;_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;
for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]=^(_egac .Data [_aafb ]&_bgca .Data [_dcge ]);_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],^(_egac .Data [_aafb ]&_bgca .Data [_dcge ]),_gbfg );};};case PixNotPixSrcXorDst :for _fbcdg =0;
_fbcdg < _ggce ;_fbcdg ++{_aafb =_gfg +_fbcdg *_egac .RowStride ;_dcge =_fgfgg +_fbcdg *_bgca .RowStride ;for _gagef =0;_gagef < _bdcd ;_gagef ++{_bgca .Data [_dcge ]=^(_egac .Data [_aafb ]^_bgca .Data [_dcge ]);_dcge ++;_aafb ++;};if _cggdd > 0{_bgca .Data [_dcge ]=_dddd (_bgca .Data [_dcge ],^(_egac .Data [_aafb ]^_bgca .Data [_dcge ]),_gbfg );
};};default:_gf .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_aaad );return _c .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_bffe *Bitmap )addBorderGeneral (_gec ,_bgfa ,_dgeb ,_afg int ,_aae int )(*Bitmap ,error ){const _bbg ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _gec < 0||_bgfa < 0||_dgeb < 0||_afg < 0{return nil ,_c .Error (_bbg ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_aaed ,_gdcf :=_bffe .Width ,_bffe .Height ;_bbgf :=_aaed +_gec +_bgfa ;_afgb :=_gdcf +_dgeb +_afg ;_cgad :=New (_bbgf ,_afgb );_cgad .Color =_bffe .Color ;_aga :=PixClr ;if _aae > 0{_aga =PixSet ;};_baa :=_cgad .RasterOperation (0,0,_gec ,_afgb ,_aga ,nil ,0,0);
if _baa !=nil {return nil ,_c .Wrap (_baa ,_bbg ,"\u006c\u0065\u0066\u0074");};_baa =_cgad .RasterOperation (_bbgf -_bgfa ,0,_bgfa ,_afgb ,_aga ,nil ,0,0);if _baa !=nil {return nil ,_c .Wrap (_baa ,_bbg ,"\u0072\u0069\u0067h\u0074");};_baa =_cgad .RasterOperation (0,0,_bbgf ,_dgeb ,_aga ,nil ,0,0);
if _baa !=nil {return nil ,_c .Wrap (_baa ,_bbg ,"\u0074\u006f\u0070");};_baa =_cgad .RasterOperation (0,_afgb -_afg ,_bbgf ,_afg ,_aga ,nil ,0,0);if _baa !=nil {return nil ,_c .Wrap (_baa ,_bbg ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_baa =_cgad .RasterOperation (_gec ,_dgeb ,_aaed ,_gdcf ,PixSrc ,_bffe ,0,0);
if _baa !=nil {return nil ,_c .Wrap (_baa ,_bbg ,"\u0063\u006f\u0070\u0079");};return _cgad ,nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_cdafd *Bitmap )setPadBits (_befc int ){_fab :=8-_cdafd .Width %8;
if _fab ==8{return ;};_cffbg :=_cdafd .Width /8;_efda :=_aceee [_fab ];if _befc ==0{_efda ^=_efda ;};var _ade int ;for _ecgc :=0;_ecgc < _cdafd .Height ;_ecgc ++{_ade =_ecgc *_cdafd .RowStride +_cffbg ;if _befc ==0{_cdafd .Data [_ade ]&=_efda ;}else {_cdafd .Data [_ade ]|=_efda ;
};};};func init (){const _eeca ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_dggb =New (50,40);var _faba error ;_dggb ,_faba =_dggb .AddBorder (2,1);if _faba !=nil {panic (_c .Wrap (_faba ,_eeca ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};_ffcg ,_faba =NewWithData (50,22,_gdff );if _faba !=nil {panic (_c .Wrap (_faba ,_eeca ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func (_fgge *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_fgge .Width ,Height :_fgge .Height ,RowStride :_fgge .RowStride ,Color :_fgge .Color ,Text :_fgge .Text ,BitmapNumber :_fgge .BitmapNumber ,Special :_fgge .Special ,Data :make ([]byte ,len (_fgge .Data ))};
};func (_fege Points )Get (i int )(Point ,error ){if i > len (_fege )-1{return Point {},_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fege [i ],nil ;};func (_gdgf *byHeight )Swap (i ,j int ){_gdgf .Values [i ],_gdgf .Values [j ]=_gdgf .Values [j ],_gdgf .Values [i ];if _gdgf .Boxes !=nil {_gdgf .Boxes [i ],_gdgf .Boxes [j ]=_gdgf .Boxes [j ],_gdgf .Boxes [i ];};};type Points []Point ;
type Color int ;func _dagdb (_acae ,_efggg *Bitmap ,_fdbe ,_efdag int )(_afdgd error ){const _becgc ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_eedea ,_ffbda ,_dgbd ,_aedf int ;_eccc ,_acaa ,_cefb ,_ccecf ,_baab ,_cafae ,_bbdd ,_ggfa byte ;
);for _eedea =0;_eedea < _fdbe ;_eedea ++{_dgbd =_eedea *_acae .RowStride ;_aedf =_eedea *_efggg .RowStride ;for _ffbda =0;_ffbda < _efdag ;_ffbda ++{if _eccc ,_afdgd =_acae .GetByte (_dgbd +_ffbda );_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _acaa ,_afdgd =_efggg .GetByte (_aedf +_ffbda );_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _eedea > 0{if _cefb ,_afdgd =_acae .GetByte (_dgbd -_acae .RowStride +_ffbda );
_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_eccc |=_cefb |(_cefb <<1)|(_cefb >>1);if _ffbda > 0{if _ggfa ,_afdgd =_acae .GetByte (_dgbd -_acae .RowStride +_ffbda -1);_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_eccc |=_ggfa <<7;};if _ffbda < _efdag -1{if _ggfa ,_afdgd =_acae .GetByte (_dgbd -_acae .RowStride +_ffbda +1);_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};
_eccc |=_ggfa >>7;};};if _ffbda > 0{if _ccecf ,_afdgd =_acae .GetByte (_dgbd +_ffbda -1);_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u006a\u0020\u003e \u0030");};_eccc |=_ccecf <<7;};_eccc &=_acaa ;if _eccc ==0||^_eccc ==0{if _afdgd =_acae .SetByte (_dgbd +_ffbda ,_eccc );
_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_bbdd =_eccc ;_eccc =(_eccc |(_eccc >>1)|(_eccc <<1))&_acaa ;if (_eccc ^_bbdd )==0{if _afdgd =_acae .SetByte (_dgbd +_ffbda ,_eccc );
_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _eedea =_fdbe -1;_eedea >=0;_eedea --{_dgbd =_eedea *_acae .RowStride ;_aedf =_eedea *_efggg .RowStride ;
for _ffbda =_efdag -1;_ffbda >=0;_ffbda --{if _eccc ,_afdgd =_acae .GetByte (_dgbd +_ffbda );_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _acaa ,_afdgd =_efggg .GetByte (_aedf +_ffbda );_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _eedea < _fdbe -1{if _baab ,_afdgd =_acae .GetByte (_dgbd +_acae .RowStride +_ffbda );
_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_eccc |=_baab |(_baab <<1)|_baab >>1;if _ffbda > 0{if _ggfa ,_afdgd =_acae .GetByte (_dgbd +_acae .RowStride +_ffbda -1);
_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_eccc |=_ggfa <<7;};if _ffbda < _efdag -1{if _ggfa ,_afdgd =_acae .GetByte (_dgbd +_acae .RowStride +_ffbda +1);
_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_eccc |=_ggfa >>7;};};if _ffbda < _efdag -1{if _cafae ,_afdgd =_acae .GetByte (_dgbd +_ffbda +1);_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_eccc |=_cafae >>7;};_eccc &=_acaa ;if _eccc ==0||(^_eccc )==0{if _afdgd =_acae .SetByte (_dgbd +_ffbda ,_eccc );_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_bbdd =_eccc ;
_eccc =(_eccc |(_eccc >>1)|(_eccc <<1))&_acaa ;if (_eccc ^_bbdd )==0{if _afdgd =_acae .SetByte (_dgbd +_ffbda ,_eccc );_afdgd !=nil {return _c .Wrap (_afdgd ,_becgc ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};type byHeight Bitmaps ;func _ccaa (_ffa ,_dbad *Bitmap )(*Bitmap ,error ){if _dbad ==nil {return nil ,_c .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _dbad ==_ffa {return _ffa ,nil ;};if _ffa ==nil {_ffa =_dbad .createTemplate ();copy (_ffa .Data ,_dbad .Data );return _ffa ,nil ;};_aeadd :=_ffa .resizeImageData (_dbad );if _aeadd !=nil {return nil ,_c .Wrap (_aeadd ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_ffa .Text =_dbad .Text ;copy (_ffa .Data ,_dbad .Data );return _ffa ,nil ;};type RasterOperator int ;func (_cbdd *Bitmap )removeBorderGeneral (_gbf ,_aedd ,_dgcf ,_gccc int )(*Bitmap ,error ){const _fedg ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _gbf < 0||_aedd < 0||_dgcf < 0||_gccc < 0{return nil ,_c .Error (_fedg ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_deecc ,_gdea :=_cbdd .Width ,_cbdd .Height ;
_fdgb :=_deecc -_gbf -_aedd ;_efg :=_gdea -_dgcf -_gccc ;if _fdgb <=0{return nil ,_c .Errorf (_fedg ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_fdgb );};if _efg <=0{return nil ,_c .Errorf (_fedg ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_efg );
};_bcgbf :=New (_fdgb ,_efg );_bcgbf .Color =_cbdd .Color ;_fecd :=_bcgbf .RasterOperation (0,0,_fdgb ,_efg ,PixSrc ,_cbdd ,_gbf ,_dgcf );if _fecd !=nil {return nil ,_c .Wrap (_fecd ,_fedg ,"");};return _bcgbf ,nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _aaf ,_bccf int ;
_egg :=src .RowStride -1;if x < 0{_bccf =-x ;x =0;}else if x +src .Width > dst .Width {_egg -=src .Width +x -dst .Width ;};if y < 0{_aaf =-y ;y =0;_bccf +=src .RowStride ;_egg +=src .RowStride ;}else if y +src .Height > dst .Height {_aaf =src .Height +y -dst .Height ;
};var (_bdcf int ;_gefg error ;);_aedb :=x &0x07;_gcafe :=8-_aedb ;_bfb :=src .Width &0x07;_ebe :=_gcafe -_bfb ;_cdafb :=_gcafe &0x07!=0;_adbf :=src .Width <=((_egg -_bccf )<<3)+_gcafe ;_eggd :=dst .GetByteIndex (x ,y );_dceg :=_aaf +dst .Height ;if src .Height > _dceg {_bdcf =_dceg ;
}else {_bdcf =src .Height ;};switch {case !_cdafb :_gefg =_dca (src ,dst ,_aaf ,_bdcf ,_eggd ,_bccf ,_egg ,op );case _adbf :_gefg =_dgdd (src ,dst ,_aaf ,_bdcf ,_eggd ,_bccf ,_egg ,_ebe ,_aedb ,_gcafe ,op );default:_gefg =_cfabc (src ,dst ,_aaf ,_bdcf ,_eggd ,_bccf ,_egg ,_ebe ,_aedb ,_gcafe ,op ,_bfb );
};return _gefg ;};func _cda (_abd ,_cdaf *Bitmap ,_ge int ,_fd []byte ,_gb int )(_ecf error ){const _cea ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_cfc ,_eec ,_aeg ,_bbaf ,_aec ,_faef ,_ffd ,_bcd int ;
_fbc ,_def uint32 ;_af ,_cbad byte ;_acf uint16 ;);_efc :=make ([]byte ,4);_bef :=make ([]byte ,4);for _aeg =0;_aeg < _abd .Height -1;_aeg ,_bbaf =_aeg +2,_bbaf +1{_cfc =_aeg *_abd .RowStride ;_eec =_bbaf *_cdaf .RowStride ;for _aec ,_faef =0,0;_aec < _gb ;
_aec ,_faef =_aec +4,_faef +1{for _ffd =0;_ffd < 4;_ffd ++{_bcd =_cfc +_aec +_ffd ;if _bcd <=len (_abd .Data )-1&&_bcd < _cfc +_abd .RowStride {_efc [_ffd ]=_abd .Data [_bcd ];}else {_efc [_ffd ]=0x00;};_bcd =_cfc +_abd .RowStride +_aec +_ffd ;if _bcd <=len (_abd .Data )-1&&_bcd < _cfc +(2*_abd .RowStride ){_bef [_ffd ]=_abd .Data [_bcd ];
}else {_bef [_ffd ]=0x00;};};_fbc =_gc .BigEndian .Uint32 (_efc );_def =_gc .BigEndian .Uint32 (_bef );_def |=_fbc ;_def |=_def <<1;_def &=0xaaaaaaaa;_fbc =_def |(_def <<7);_af =byte (_fbc >>24);_cbad =byte ((_fbc >>8)&0xff);_bcd =_eec +_faef ;if _bcd +1==len (_cdaf .Data )-1||_bcd +1>=_eec +_cdaf .RowStride {_cdaf .Data [_bcd ]=_fd [_af ];
}else {_acf =(uint16 (_fd [_af ])<<8)|uint16 (_fd [_cbad ]);if _ecf =_cdaf .setTwoBytes (_bcd ,_acf );_ecf !=nil {return _c .Wrapf (_ecf ,_cea ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bcd );
};_faef ++;};};};return nil ;};func _gfa (_ecga ,_efcg *Bitmap ,_caba *Selection )(*Bitmap ,error ){const _egdda ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _caed ,_bcgc int ;if _efcg ==nil {return nil ,_c .Error (_egdda ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _caba ==nil {return nil ,_c .Error (_egdda ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_caed =_caba .Width ;_bcgc =_caba .Height ;if _caed ==0||_bcgc ==0{return nil ,_c .Error (_egdda ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _ecga ==nil {return _efcg .createTemplate (),nil ;};if _cafgf :=_ecga .resizeImageData (_efcg );_cafgf !=nil {return nil ,_cafgf ;};return _ecga ,nil ;};func (_ccbc *Bitmap )clearAll ()error {return _ccbc .RasterOperation (0,0,_ccbc .Width ,_ccbc .Height ,PixClr ,nil ,0,0);
};func TstOSymbol (t *_bb .T ,scale ...int )*Bitmap {_bceg ,_ccafd :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_b .NoError (t ,_ccafd );return TstGetScaledSymbol (t ,_bceg ,scale ...);};func (_feabe *byHeight )Less (i ,j int )bool {return _feabe .Values [i ].Height < _feabe .Values [j ].Height };
func (_edfgb *byWidth )Swap (i ,j int ){_edfgb .Values [i ],_edfgb .Values [j ]=_edfgb .Values [j ],_edfgb .Values [i ];if _edfgb .Boxes !=nil {_edfgb .Boxes [i ],_edfgb .Boxes [j ]=_edfgb .Boxes [j ],_edfgb .Boxes [i ];};};const (_ SizeSelection =iota ;
SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_bdad *ClassedPoints )YAtIndex (i int )float32 {return (*_bdad .Points )[_bdad .IntSlice [i ]].Y };func TstASymbol (t *_bb .T )*Bitmap {t .Helper ();
_bcgee :=New (6,6);_b .NoError (t ,_bcgee .SetPixel (1,0,1));_b .NoError (t ,_bcgee .SetPixel (2,0,1));_b .NoError (t ,_bcgee .SetPixel (3,0,1));_b .NoError (t ,_bcgee .SetPixel (4,0,1));_b .NoError (t ,_bcgee .SetPixel (5,1,1));_b .NoError (t ,_bcgee .SetPixel (1,2,1));
_b .NoError (t ,_bcgee .SetPixel (2,2,1));_b .NoError (t ,_bcgee .SetPixel (3,2,1));_b .NoError (t ,_bcgee .SetPixel (4,2,1));_b .NoError (t ,_bcgee .SetPixel (5,2,1));_b .NoError (t ,_bcgee .SetPixel (0,3,1));_b .NoError (t ,_bcgee .SetPixel (5,3,1));
_b .NoError (t ,_bcgee .SetPixel (0,4,1));_b .NoError (t ,_bcgee .SetPixel (5,4,1));_b .NoError (t ,_bcgee .SetPixel (1,5,1));_b .NoError (t ,_bcgee .SetPixel (2,5,1));_b .NoError (t ,_bcgee .SetPixel (3,5,1));_b .NoError (t ,_bcgee .SetPixel (4,5,1));
_b .NoError (t ,_bcgee .SetPixel (5,5,1));return _bcgee ;};func _adeg (_gbaa ,_gbc ,_bffc *Bitmap )(*Bitmap ,error ){const _eaf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _gbc ==nil {return nil ,_c .Error (_eaf ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bffc ==nil {return nil ,_c .Error (_eaf ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gbaa ==_bffc {return nil ,_c .Error (_eaf ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_gbc .SizesEqual (_bffc ){_gf .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_eaf );
};var _bbdfb error ;if _gbaa ,_bbdfb =_ccaa (_gbaa ,_gbc );_bbdfb !=nil {return nil ,_c .Wrap (_bbdfb ,_eaf ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _bbdfb =_gbaa .RasterOperation (0,0,_gbaa .Width ,_gbaa .Height ,PixSrcXorDst ,_bffc ,0,0);
_bbdfb !=nil {return nil ,_c .Wrap (_bbdfb ,_eaf ,"");};return _gbaa ,nil ;};func (_badce *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _dfcfa ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _badce ==nil {return nil ,_c .Error (_dfcfa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_badce .Values )-1{return nil ,_c .Errorf (_dfcfa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _badce .Values [i ],nil ;};