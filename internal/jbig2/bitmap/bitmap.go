//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_ge "encoding/binary";_e "github.com/stretchr/testify/require";_ggc "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_dg "github.com/unidoc/unipdf/v3/internal/imageutil";_fd "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_gg "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_fde "image";_gga "math";_f "sort";_d "strings";_gb "testing";);func (_eddf *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ebed (_eddf ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_ffa *Bitmap )GetVanillaData ()[]byte {if _ffa .Color ==Chocolate {_ffa .inverseData ();};return _ffa .Data ;};func (_affb *Bitmap )GetByte (index int )(byte ,error ){if index > len (_affb .Data )-1||index < 0{return 0,_gg .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _affb .Data [index ],nil ;};var (_agbb =_gda ();_aacb =_gc ();_cabe =_gdd (););func _dgfc (_dgab ,_gdde *Bitmap ,_eaeec ,_cgbad ,_cgg ,_ffcc ,_abeb int ,_facba CombinationOperator )error {var _cbe int ;_ead :=func (){_cbe ++;_cgg +=_gdde .RowStride ;_ffcc +=_dgab .RowStride ;_abeb +=_dgab .RowStride };for _cbe =_eaeec ;_cbe < _cgbad ;_ead (){_edg :=_cgg ;for _dfa :=_ffcc ;_dfa <=_abeb ;_dfa ++{_aag ,_eef :=_gdde .GetByte (_edg );if _eef !=nil {return _eef ;};_bbg ,_eef :=_dgab .GetByte (_dfa );if _eef !=nil {return _eef ;};if _eef =_gdde .SetByte (_edg ,_gca (_aag ,_bbg ,_facba ));_eef !=nil {return _eef ;};_edg ++;};};return nil ;};func (_bef *Bitmap )thresholdPixelSum (_bffb int )bool {var (_bbbd int ;_edef uint8 ;_faab byte ;_gedf int ;);_bba :=_bef .RowStride ;_eaae :=uint (_bef .Width &0x07);if _eaae !=0{_edef =uint8 ((0xff<<(8-_eaae ))&0xff);_bba --;};for _aefa :=0;_aefa < _bef .Height ;_aefa ++{for _gedf =0;_gedf < _bba ;_gedf ++{_faab =_bef .Data [_aefa *_bef .RowStride +_gedf ];_bbbd +=int (_beg [_faab ]);};if _eaae !=0{_faab =_bef .Data [_aefa *_bef .RowStride +_gedf ]&_edef ;_bbbd +=int (_beg [_faab ]);};if _bbbd > _bffb {return true ;};};return false ;};func _ebed (_efgc *Bitmap ,_fegf ,_addec ,_bgeg ,_fbbfc int ,_egecc RasterOperator ,_beeeg *Bitmap ,_bdda ,_aaga int )error {const _adad ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _efgc ==nil {return _gg .Error (_adad ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _egecc ==PixDst {return nil ;};switch _egecc {case PixClr ,PixSet ,PixNotDst :_afba (_efgc ,_fegf ,_addec ,_bgeg ,_fbbfc ,_egecc );return nil ;};if _beeeg ==nil {_ggc .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _gg .Error (_adad ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _baee :=_aebc (_efgc ,_fegf ,_addec ,_bgeg ,_fbbfc ,_egecc ,_beeeg ,_bdda ,_aaga );_baee !=nil {return _gg .Wrap (_baee ,_adad ,"");};return nil ;};type Component int ;func _ddcg (_eaad *Bitmap ,_fegfd *_fd .Stack ,_bffd ,_fffdb int )(_ecag *_fde .Rectangle ,_dbad error ){const _bcdf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _eaad ==nil {return nil ,_gg .Error (_bcdf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fegfd ==nil {return nil ,_gg .Error (_bcdf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_aeca ,_bfabd :=_eaad .Width ,_eaad .Height ;_dggd :=_aeca -1;_ddgc :=_bfabd -1;if _bffd < 0||_bffd > _dggd ||_fffdb < 0||_fffdb > _ddgc ||!_eaad .GetPixel (_bffd ,_fffdb ){return nil ,nil ;};var _ffeb *_fde .Rectangle ;_ffeb ,_dbad =Rect (100000,100000,0,0);if _dbad !=nil {return nil ,_gg .Wrap (_dbad ,_bcdf ,"");};if _dbad =_dbdc (_fegfd ,_bffd ,_bffd ,_fffdb ,1,_ddgc ,_ffeb );_dbad !=nil {return nil ,_gg .Wrap (_dbad ,_bcdf ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dbad =_dbdc (_fegfd ,_bffd ,_bffd ,_fffdb +1,-1,_ddgc ,_ffeb );_dbad !=nil {return nil ,_gg .Wrap (_dbad ,_bcdf ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_ffeb .Min .X ,_ffeb .Max .X =_bffd ,_bffd ;_ffeb .Min .Y ,_ffeb .Max .Y =_fffdb ,_fffdb ;var (_bafg *fillSegment ;_cdbe int ;);for _fegfd .Len ()> 0{if _bafg ,_dbad =_caedb (_fegfd );_dbad !=nil {return nil ,_gg .Wrap (_dbad ,_bcdf ,"");};_fffdb =_bafg ._gbeg ;for _bffd =_bafg ._bfga ;_bffd >=0&&_eaad .GetPixel (_bffd ,_fffdb );_bffd --{if _dbad =_eaad .SetPixel (_bffd ,_fffdb ,0);_dbad !=nil {return nil ,_gg .Wrap (_dbad ,_bcdf ,"");};};if _bffd >=_bafg ._bfga {for _bffd ++;_bffd <=_bafg ._agcaa &&_bffd <=_dggd &&!_eaad .GetPixel (_bffd ,_fffdb );_bffd ++{};_cdbe =_bffd ;if !(_bffd <=_bafg ._agcaa &&_bffd <=_dggd ){continue ;};}else {_cdbe =_bffd +1;if _cdbe < _bafg ._bfga -1{if _dbad =_dbdc (_fegfd ,_cdbe ,_bafg ._bfga -1,_bafg ._gbeg ,-_bafg ._gcfgb ,_ddgc ,_ffeb );_dbad !=nil {return nil ,_gg .Wrap (_dbad ,_bcdf ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_bffd =_bafg ._bfga +1;};for {for ;_bffd <=_dggd &&_eaad .GetPixel (_bffd ,_fffdb );_bffd ++{if _dbad =_eaad .SetPixel (_bffd ,_fffdb ,0);_dbad !=nil {return nil ,_gg .Wrap (_dbad ,_bcdf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dbad =_dbdc (_fegfd ,_cdbe ,_bffd -1,_bafg ._gbeg ,_bafg ._gcfgb ,_ddgc ,_ffeb );_dbad !=nil {return nil ,_gg .Wrap (_dbad ,_bcdf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bffd > _bafg ._agcaa +1{if _dbad =_dbdc (_fegfd ,_bafg ._agcaa +1,_bffd -1,_bafg ._gbeg ,-_bafg ._gcfgb ,_ddgc ,_ffeb );_dbad !=nil {return nil ,_gg .Wrap (_dbad ,_bcdf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _bffd ++;_bffd <=_bafg ._agcaa &&_bffd <=_dggd &&!_eaad .GetPixel (_bffd ,_fffdb );_bffd ++{};_cdbe =_bffd ;if !(_bffd <=_bafg ._agcaa &&_bffd <=_dggd ){break ;};};};_ffeb .Max .X ++;_ffeb .Max .Y ++;return _ffeb ,nil ;};type BoundaryCondition int ;func (_ccgc *Bitmap )setEightBytes (_aega int ,_bgeb uint64 )error {_beee :=_ccgc .RowStride -(_aega %_ccgc .RowStride );if _ccgc .RowStride !=_ccgc .Width >>3{_beee --;};if _beee >=8{return _ccgc .setEightFullBytes (_aega ,_bgeb );};return _ccgc .setEightPartlyBytes (_aega ,_beee ,_bgeb );};func (_fecb *ClassedPoints )XAtIndex (i int )float32 {return (*_fecb .Points )[_fecb .IntSlice [i ]].X };func _cfe (_fbd *Bitmap ,_eec ...int )(_ddd *Bitmap ,_dcd error ){const _gffe ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _fbd ==nil {return nil ,_gg .Error (_gffe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_eec )==0||len (_eec )> 4{return nil ,_gg .Error (_gffe ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");};if _eec [0]<=0{_ggc .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_ddd ,_dcd =_bdaa (nil ,_fbd );if _dcd !=nil {return nil ,_gg .Wrap (_dcd ,_gffe ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");};return _ddd ,nil ;};_ccfg :=_face ();_ddd =_fbd ;for _gffd ,_fca :=range _eec {if _fca <=0{break ;};_ddd ,_dcd =_fab (_ddd ,_fca ,_ccfg );if _dcd !=nil {return nil ,_gg .Wrapf (_dcd ,_gffe ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_gffd );};};return _ddd ,nil ;};var (_gfgc *Bitmap ;_ecff *Bitmap ;);func (_ede *Bitmap )clearAll ()error {return _ede .RasterOperation (0,0,_ede .Width ,_ede .Height ,PixClr ,nil ,0,0);};func _gdd ()(_gfg [256]uint64 ){for _eda :=0;_eda < 256;_eda ++{if _eda &0x01!=0{_gfg [_eda ]|=0xff;};if _eda &0x02!=0{_gfg [_eda ]|=0xff00;};if _eda &0x04!=0{_gfg [_eda ]|=0xff0000;};if _eda &0x08!=0{_gfg [_eda ]|=0xff000000;};if _eda &0x10!=0{_gfg [_eda ]|=0xff00000000;};if _eda &0x20!=0{_gfg [_eda ]|=0xff0000000000;};if _eda &0x40!=0{_gfg [_eda ]|=0xff000000000000;};if _eda &0x80!=0{_gfg [_eda ]|=0xff00000000000000;};};return _gfg ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_bdaed bool ,_dagg error ){const _gfaf ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_gaacc ,_fcac :=p1 .Width ,p1 .Height ;_cgeb ,_cbbc :=p3 .Width ,p3 .Height ;if _fd .Abs (_gaacc -_cgeb )> maxDiffW {return false ,nil ;};if _fd .Abs (_fcac -_cbbc )> maxDiffH {return false ,nil ;};_fbbeg :=int (float32 (area1 )*(1.0-rank )+0.5);_defa :=int (float32 (area3 )*(1.0-rank )+0.5);var _abb ,_bffg int ;if delX >=0{_abb =int (delX +0.5);}else {_abb =int (delX -0.5);};if delY >=0{_bffg =int (delY +0.5);}else {_bffg =int (delY -0.5);};_ddcf :=p1 .CreateTemplate ();if _dagg =_ddcf .RasterOperation (0,0,_gaacc ,_fcac ,PixSrc ,p1 ,0,0);_dagg !=nil {return false ,_gg .Wrap (_dagg ,_gfaf ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dagg =_ddcf .RasterOperation (_abb ,_bffg ,_gaacc ,_fcac ,PixNotSrcAndDst ,p4 ,0,0);_dagg !=nil {return false ,_gg .Wrap (_dagg ,_gfaf ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_bdaed ,_dagg =_ddcf .ThresholdPixelSum (_fbbeg ,tab8 );if _dagg !=nil {return false ,_gg .Wrap (_dagg ,_gfaf ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _bdaed {return false ,nil ;};if _dagg =_ddcf .RasterOperation (_abb ,_bffg ,_cgeb ,_cbbc ,PixSrc ,p3 ,0,0);_dagg !=nil {return false ,_gg .Wrap (_dagg ,_gfaf ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dagg =_ddcf .RasterOperation (0,0,_cgeb ,_cbbc ,PixNotSrcAndDst ,p2 ,0,0);_dagg !=nil {return false ,_gg .Wrap (_dagg ,_gfaf ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_bdaed ,_dagg =_ddcf .ThresholdPixelSum (_defa ,tab8 );if _dagg !=nil {return false ,_gg .Wrap (_dagg ,_gfaf ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_bdaed ,nil ;};func init (){for _dgac :=0;_dgac < 256;_dgac ++{_beg [_dgac ]=uint8 (_dgac &0x1)+(uint8 (_dgac >>1)&0x1)+(uint8 (_dgac >>2)&0x1)+(uint8 (_dgac >>3)&0x1)+(uint8 (_dgac >>4)&0x1)+(uint8 (_dgac >>5)&0x1)+(uint8 (_dgac >>6)&0x1)+(uint8 (_dgac >>7)&0x1);};};func TstTSymbol (t *_gb .T ,scale ...int )*Bitmap {_baaf ,_babff :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_e .NoError (t ,_babff );return TstGetScaledSymbol (t ,_baaf ,scale ...);};func (_cead *ClassedPoints )SortByX (){_cead ._ebfgb =_cead .xSortFunction ();_f .Sort (_cead )};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_dfcde *BitmapsArray )GetBox (i int )(*_fde .Rectangle ,error ){const _accga ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _dfcde ==nil {return nil ,_gg .Error (_accga ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_dfcde .Boxes )-1{return nil ,_gg .Errorf (_accga ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dfcde .Boxes [i ],nil ;};func (_eacd *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_bfad *Bitmaps ,_babd error ){const _ddbfe ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _eacd ==nil {return nil ,_gg .Error (_ddbfe ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_gg .Errorf (_ddbfe ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_gg .Errorf (_ddbfe ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );};_ddba ,_babd :=_eacd .makeSizeIndicator (width ,height ,tp ,relation );if _babd !=nil {return nil ,_gg .Wrap (_babd ,_ddbfe ,"");};_bfad ,_babd =_eacd .selectByIndicator (_ddba );if _babd !=nil {return nil ,_gg .Wrap (_babd ,_ddbfe ,"");};return _bfad ,nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _eedc ,_fbec int ;_cfgd :=src .RowStride -1;if x < 0{_fbec =-x ;x =0;}else if x +src .Width > dst .Width {_cfgd -=src .Width +x -dst .Width ;};if y < 0{_eedc =-y ;y =0;_fbec +=src .RowStride ;_cfgd +=src .RowStride ;}else if y +src .Height > dst .Height {_eedc =src .Height +y -dst .Height ;};var (_ccee int ;_fcfg error ;);_cgba :=x &0x07;_agad :=8-_cgba ;_gdcf :=src .Width &0x07;_bac :=_agad -_gdcf ;_dabe :=_agad &0x07!=0;_effb :=src .Width <=((_cfgd -_fbec )<<3)+_agad ;_ddeg :=dst .GetByteIndex (x ,y );_gedg :=_eedc +dst .Height ;if src .Height > _gedg {_ccee =_gedg ;}else {_ccee =src .Height ;};switch {case !_dabe :_fcfg =_dgfc (src ,dst ,_eedc ,_ccee ,_ddeg ,_fbec ,_cfgd ,op );case _effb :_fcfg =_bcca (src ,dst ,_eedc ,_ccee ,_ddeg ,_fbec ,_cfgd ,_bac ,_cgba ,_agad ,op );default:_fcfg =_gfbbg (src ,dst ,_eedc ,_ccee ,_ddeg ,_fbec ,_cfgd ,_bac ,_cgba ,_agad ,op ,_gdcf );};return _fcfg ;};func _gfbbg (_bgbb ,_eaeg *Bitmap ,_aced ,_dfaf ,_ccfa ,_dcda ,_cbgb ,_beaf ,_bddb ,_fefdg int ,_dgbg CombinationOperator ,_bbe int )error {var _dfgg int ;_ebcc :=func (){_dfgg ++;_ccfa +=_eaeg .RowStride ;_dcda +=_bgbb .RowStride ;_cbgb +=_bgbb .RowStride };for _dfgg =_aced ;_dfgg < _dfaf ;_ebcc (){var _gbdd uint16 ;_decd :=_ccfa ;for _dgabf :=_dcda ;_dgabf <=_cbgb ;_dgabf ++{_faea ,_eeb :=_eaeg .GetByte (_decd );if _eeb !=nil {return _eeb ;};_feag ,_eeb :=_bgbb .GetByte (_dgabf );if _eeb !=nil {return _eeb ;};_gbdd =(_gbdd |(uint16 (_feag )&0xff))<<uint (_fefdg );_feag =byte (_gbdd >>8);if _eeb =_eaeg .SetByte (_decd ,_gca (_faea ,_feag ,_dgbg ));_eeb !=nil {return _eeb ;};_decd ++;_gbdd <<=uint (_bddb );if _dgabf ==_cbgb {_feag =byte (_gbdd >>(8-uint8 (_fefdg )));if _bbe !=0{_feag =_befb (uint (8+_beaf ),_feag );};_faea ,_eeb =_eaeg .GetByte (_decd );if _eeb !=nil {return _eeb ;};if _eeb =_eaeg .SetByte (_decd ,_gca (_faea ,_feag ,_dgbg ));_eeb !=nil {return _eeb ;};};};};return nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_fde .Rectangle ;};func (_eaa *Bitmap )CountPixels ()int {return _eaa .countPixels ()};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _eae ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_agcc :=_efb (width ,height );_agcc .Data =data ;if _gea :=((width *height )+7)>>3;len (data )< _gea {return nil ,_gg .Errorf (_eae ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_gea );};if _cad :=_agcc .addPadBits ();_cad !=nil {return nil ,_gg .Wrap (_cad ,_eae ,"");};return _agcc ,nil ;};func (_bcec *ClassedPoints )Len ()int {return _bcec .IntSlice .Size ()};func (_geaf *Bitmap )SetPixel (x ,y int ,pixel byte )error {_ggfe :=_geaf .GetByteIndex (x ,y );if _ggfe > len (_geaf .Data )-1{return _gg .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_ggfe );};_ggcf :=_geaf .GetBitOffset (x );_caeb :=uint (7-_ggcf );_cbca :=_geaf .Data [_ggfe ];var _cdd byte ;if pixel ==1{_cdd =_cbca |(pixel &0x01<<_caeb );}else {_cdd =_cbca &^(1<<_caeb );};_geaf .Data [_ggfe ]=_cdd ;return nil ;};type Points []Point ;func _cfgdd (_dfaa ,_eggb *Bitmap ,_fffd ,_fcbe int )(*Bitmap ,error ){const _cbcb ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _eggb ==nil {_ggc .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_gg .Error (_cbcb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _fffd < 1||_fcbe < 1{return nil ,_gg .Error (_cbcb ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _fffd ==1&&_fcbe ==1{_adfa ,_dead :=_bdaa (_dfaa ,_eggb );if _dead !=nil {return nil ,_gg .Wrap (_dead ,_cbcb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _adfa ,nil ;};if _fffd ==1||_fcbe ==1{_efed :=SelCreateBrick (_fcbe ,_fffd ,_fcbe /2,_fffd /2,SelHit );_gdcc ,_badd :=_cdaa (_dfaa ,_eggb ,_efed );if _badd !=nil {return nil ,_gg .Wrap (_badd ,_cbcb ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _gdcc ,nil ;};_efgb :=SelCreateBrick (1,_fffd ,0,_fffd /2,SelHit );_eabg :=SelCreateBrick (_fcbe ,1,_fcbe /2,0,SelHit );_bffbg ,_egff :=_cdaa (nil ,_eggb ,_efgb );if _egff !=nil {return nil ,_gg .Wrap (_egff ,_cbcb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_dfaa ,_egff =_cdaa (_dfaa ,_bffbg ,_eabg );if _egff !=nil {return nil ,_gg .Wrap (_egff ,_cbcb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _dfaa ,nil ;};func (_cgf *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _cgf .Copy (),nil ;};_fgb ,_gfc :=_cgf .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _gfc !=nil {return nil ,_gg .Wrap (_gfc ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _fgb ,nil ;};func _fded (_gfgb ,_ccbg *Bitmap ,_bbedf *Selection )(*Bitmap ,error ){const _bfab ="\u006f\u0070\u0065\u006e";var _dcef error ;_gfgb ,_dcef =_bgba (_gfgb ,_ccbg ,_bbedf );if _dcef !=nil {return nil ,_gg .Wrap (_dcef ,_bfab ,"");};_afaf ,_dcef :=_gdfeb (nil ,_ccbg ,_bbedf );if _dcef !=nil {return nil ,_gg .Wrap (_dcef ,_bfab ,"");};_ ,_dcef =_cdaa (_gfgb ,_afaf ,_bbedf );if _dcef !=nil {return nil ,_gg .Wrap (_dcef ,_bfab ,"");};return _gfgb ,nil ;};type shift int ;func (_faa *Bitmap )SizesEqual (s *Bitmap )bool {if _faa ==s {return true ;};if _faa .Width !=s .Width ||_faa .Height !=s .Height {return false ;};return true ;};func NewClassedPoints (points *Points ,classes _fd .IntSlice )(*ClassedPoints ,error ){const _afab ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_gg .Error (_afab ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_gg .Error (_afab ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_bcag :=&ClassedPoints {Points :points ,IntSlice :classes };if _feaf :=_bcag .validateIntSlice ();_feaf !=nil {return nil ,_gg .Wrap (_feaf ,_afab ,"");};return _bcag ,nil ;};func (_bdc *Bitmap )setBit (_cbcc int ){_bdc .Data [(_cbcc >>3)]|=0x80>>uint (_cbcc &7)};func (_gec *Bitmap )Equivalent (s *Bitmap )bool {return _gec .equivalent (s )};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gbae float64 ,_cadcf error ){const _dbgg ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";if bm1 ==nil ||bm2 ==nil {return 0,_gg .Error (_dbgg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_gg .Error (_dbgg ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if area1 <=0||area2 <=0{return 0,_gg .Error (_dbgg ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_ceaf ,_bcgdb :=bm1 .Width ,bm1 .Height ;_ddegf ,_agfd :=bm2 .Width ,bm2 .Height ;_cbgd :=_cbba (_ceaf -_ddegf );if _cbgd > maxDiffW {return 0,nil ;};_cadcb :=_cbba (_bcgdb -_agfd );if _cadcb > maxDiffH {return 0,nil ;};var _egea ,_cbeb int ;if delX >=0{_egea =int (delX +0.5);}else {_egea =int (delX -0.5);};if delY >=0{_cbeb =int (delY +0.5);}else {_cbeb =int (delY -0.5);};_cbdda :=_dfgb (_cbeb ,0);_cbbd :=_ccgb (_agfd +_cbeb ,_bcgdb );_ceac :=bm1 .RowStride *_cbdda ;_bbbc :=bm2 .RowStride *(_cbdda -_cbeb );_cdbfg :=_dfgb (_egea ,0);_bacf :=_ccgb (_ddegf +_egea ,_ceaf );_gegf :=bm2 .RowStride ;var _bacb ,_addf int ;if _egea >=8{_bacb =_egea >>3;_ceac +=_bacb ;_cdbfg -=_bacb <<3;_bacf -=_bacb <<3;_egea &=7;}else if _egea <=-8{_addf =-((_egea +7)>>3);_bbbc +=_addf ;_gegf -=_addf ;_egea +=_addf <<3;};if _cdbfg >=_bacf ||_cbdda >=_cbbd {return 0,nil ;};_abcac :=(_bacf +7)>>3;var (_bae ,_acg ,_bebc byte ;_edba ,_gccg ,_acfda int ;);switch {case _egea ==0:for _acfda =_cbdda ;_acfda < _cbbd ;_acfda ,_ceac ,_bbbc =_acfda +1,_ceac +bm1 .RowStride ,_bbbc +bm2 .RowStride {for _gccg =0;_gccg < _abcac ;_gccg ++{_bebc =bm1 .Data [_ceac +_gccg ]&bm2 .Data [_bbbc +_gccg ];_edba +=tab [_bebc ];};};case _egea > 0:if _gegf < _abcac {for _acfda =_cbdda ;_acfda < _cbbd ;_acfda ,_ceac ,_bbbc =_acfda +1,_ceac +bm1 .RowStride ,_bbbc +bm2 .RowStride {_bae ,_acg =bm1 .Data [_ceac ],bm2 .Data [_bbbc ]>>uint (_egea );_bebc =_bae &_acg ;_edba +=tab [_bebc ];for _gccg =1;_gccg < _gegf ;_gccg ++{_bae ,_acg =bm1 .Data [_ceac +_gccg ],(bm2 .Data [_bbbc +_gccg ]>>uint (_egea ))|(bm2 .Data [_bbbc +_gccg -1]<<uint (8-_egea ));_bebc =_bae &_acg ;_edba +=tab [_bebc ];};_bae =bm1 .Data [_ceac +_gccg ];_acg =bm2 .Data [_bbbc +_gccg -1]<<uint (8-_egea );_bebc =_bae &_acg ;_edba +=tab [_bebc ];};}else {for _acfda =_cbdda ;_acfda < _cbbd ;_acfda ,_ceac ,_bbbc =_acfda +1,_ceac +bm1 .RowStride ,_bbbc +bm2 .RowStride {_bae ,_acg =bm1 .Data [_ceac ],bm2 .Data [_bbbc ]>>uint (_egea );_bebc =_bae &_acg ;_edba +=tab [_bebc ];for _gccg =1;_gccg < _abcac ;_gccg ++{_bae =bm1 .Data [_ceac +_gccg ];_acg =(bm2 .Data [_bbbc +_gccg ]>>uint (_egea ))|(bm2 .Data [_bbbc +_gccg -1]<<uint (8-_egea ));_bebc =_bae &_acg ;_edba +=tab [_bebc ];};};};default:if _abcac < _gegf {for _acfda =_cbdda ;_acfda < _cbbd ;_acfda ,_ceac ,_bbbc =_acfda +1,_ceac +bm1 .RowStride ,_bbbc +bm2 .RowStride {for _gccg =0;_gccg < _abcac ;_gccg ++{_bae =bm1 .Data [_ceac +_gccg ];_acg =bm2 .Data [_bbbc +_gccg ]<<uint (-_egea );_acg |=bm2 .Data [_bbbc +_gccg +1]>>uint (8+_egea );_bebc =_bae &_acg ;_edba +=tab [_bebc ];};};}else {for _acfda =_cbdda ;_acfda < _cbbd ;_acfda ,_ceac ,_bbbc =_acfda +1,_ceac +bm1 .RowStride ,_bbbc +bm2 .RowStride {for _gccg =0;_gccg < _abcac -1;_gccg ++{_bae =bm1 .Data [_ceac +_gccg ];_acg =bm2 .Data [_bbbc +_gccg ]<<uint (-_egea );_acg |=bm2 .Data [_bbbc +_gccg +1]>>uint (8+_egea );_bebc =_bae &_acg ;_edba +=tab [_bebc ];};_bae =bm1 .Data [_ceac +_gccg ];_acg =bm2 .Data [_bbbc +_gccg ]<<uint (-_egea );_bebc =_bae &_acg ;_edba +=tab [_bebc ];};};};_gbae =float64 (_edba )*float64 (_edba )/(float64 (area1 )*float64 (area2 ));return _gbae ,nil ;};func (_badaf *Bitmaps )AddBitmap (bm *Bitmap ){_badaf .Values =append (_badaf .Values ,bm )};func (_adg *Bitmap )setEightFullBytes (_dec int ,_fcba uint64 )error {if _dec +7> len (_adg .Data )-1{return _gg .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_adg .Data [_dec ]=byte ((_fcba &0xff00000000000000)>>56);_adg .Data [_dec +1]=byte ((_fcba &0xff000000000000)>>48);_adg .Data [_dec +2]=byte ((_fcba &0xff0000000000)>>40);_adg .Data [_dec +3]=byte ((_fcba &0xff00000000)>>32);_adg .Data [_dec +4]=byte ((_fcba &0xff000000)>>24);_adg .Data [_dec +5]=byte ((_fcba &0xff0000)>>16);_adg .Data [_dec +6]=byte ((_fcba &0xff00)>>8);_adg .Data [_dec +7]=byte (_fcba &0xff);return nil ;};func (_dceg *BitmapsArray )AddBitmaps (bm *Bitmaps ){_dceg .Values =append (_dceg .Values ,bm )};func (_cab *Bitmap )equivalent (_bcgbb *Bitmap )bool {if _cab ==_bcgbb {return true ;};if !_cab .SizesEqual (_bcgbb ){return false ;};_bgg :=_dfd (_cab ,_bcgbb ,CmbOpXor );_bgca :=_cab .countPixels ();_ddfg :=int (0.25*float32 (_bgca ));if _bgg .thresholdPixelSum (_ddfg ){return false ;};var (_cag [9][9]int ;_cfdg [18][9]int ;_bgbd [9][18]int ;_egc int ;_eedg int ;);_ade :=9;_gfbd :=_cab .Height /_ade ;_ffb :=_cab .Width /_ade ;_fecd ,_gcf :=_gfbd /2,_ffb /2;if _gfbd < _ffb {_fecd =_ffb /2;_gcf =_gfbd /2;};_gfgd :=float64 (_fecd )*float64 (_gcf )*_gga .Pi ;_gcff :=int (float64 (_gfbd *_ffb /2)*0.9);_fcgf :=int (float64 (_ffb *_gfbd /2)*0.9);for _ebdc :=0;_ebdc < _ade ;_ebdc ++{_fgdg :=_ffb *_ebdc +_egc ;var _gfbg int ;if _ebdc ==_ade -1{_egc =0;_gfbg =_cab .Width ;}else {_gfbg =_fgdg +_ffb ;if ((_cab .Width -_egc )%_ade )> 0{_egc ++;_gfbg ++;};};for _ggff :=0;_ggff < _ade ;_ggff ++{_aef :=_gfbd *_ggff +_eedg ;var _cac int ;if _ggff ==_ade -1{_eedg =0;_cac =_cab .Height ;}else {_cac =_aef +_gfbd ;if (_cab .Height -_eedg )%_ade > 0{_eedg ++;_cac ++;};};var _feaa ,_dedg ,_cecf ,_dac int ;_dge :=(_fgdg +_gfbg )/2;_ffaf :=(_aef +_cac )/2;for _ebeg :=_fgdg ;_ebeg < _gfbg ;_ebeg ++{for _edc :=_aef ;_edc < _cac ;_edc ++{if _bgg .GetPixel (_ebeg ,_edc ){if _ebeg < _dge {_feaa ++;}else {_dedg ++;};if _edc < _ffaf {_dac ++;}else {_cecf ++;};};};};_cag [_ebdc ][_ggff ]=_feaa +_dedg ;_cfdg [_ebdc *2][_ggff ]=_feaa ;_cfdg [_ebdc *2+1][_ggff ]=_dedg ;_bgbd [_ebdc ][_ggff *2]=_dac ;_bgbd [_ebdc ][_ggff *2+1]=_cecf ;};};for _eaf :=0;_eaf < _ade *2-1;_eaf ++{for _abdg :=0;_abdg < (_ade -1);_abdg ++{var _bgcc int ;for _cfg :=0;_cfg < 2;_cfg ++{for _fged :=0;_fged < 2;_fged ++{_bgcc +=_cfdg [_eaf +_cfg ][_abdg +_fged ];};};if _bgcc > _fcgf {return false ;};};};for _ddg :=0;_ddg < (_ade -1);_ddg ++{for _dgcd :=0;_dgcd < ((_ade *2)-1);_dgcd ++{var _facb int ;for _fbcg :=0;_fbcg < 2;_fbcg ++{for _ebeec :=0;_ebeec < 2;_ebeec ++{_facb +=_bgbd [_ddg +_fbcg ][_dgcd +_ebeec ];};};if _facb > _gcff {return false ;};};};for _eegd :=0;_eegd < (_ade -2);_eegd ++{for _bfa :=0;_bfa < (_ade -2);_bfa ++{var _aac ,_feb int ;for _fbfe :=0;_fbfe < 3;_fbfe ++{for _faba :=0;_faba < 3;_faba ++{if _fbfe ==_faba {_aac +=_cag [_eegd +_fbfe ][_bfa +_faba ];};if (2-_fbfe )==_faba {_feb +=_cag [_eegd +_fbfe ][_bfa +_faba ];};};};if _aac > _fcgf ||_feb > _fcgf {return false ;};};};for _ggga :=0;_ggga < (_ade -1);_ggga ++{for _gfa :=0;_gfa < (_ade -1);_gfa ++{var _bbf int ;for _gebg :=0;_gebg < 2;_gebg ++{for _agag :=0;_agag < 2;_agag ++{_bbf +=_cag [_ggga +_gebg ][_gfa +_agag ];};};if float64 (_bbf )> _gfgd {return false ;};};};return true ;};func (_bad *Bitmap )ToImage ()_fde .Image {_gcde ,_fdb :=_dg .NewImage (_bad .Width ,_bad .Height ,1,1,_bad .Data ,nil ,nil );if _fdb !=nil {_ggc .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fdb );};return _gcde ;};func _acfc (_eeba *Bitmap ,_efde ,_cggb int ,_fcfa ,_ccbb int ,_cdcf RasterOperator ){var (_gdda int ;_dffdc byte ;_eeeg ,_gfab int ;_eacc int ;);_gfgg :=_fcfa >>3;_afed :=_fcfa &7;if _afed > 0{_dffdc =_edfgc [_afed ];};_gdda =_eeba .RowStride *_cggb +(_efde >>3);switch _cdcf {case PixClr :for _eeeg =0;_eeeg < _ccbb ;_eeeg ++{_eacc =_gdda +_eeeg *_eeba .RowStride ;for _gfab =0;_gfab < _gfgg ;_gfab ++{_eeba .Data [_eacc ]=0x0;_eacc ++;};if _afed > 0{_eeba .Data [_eacc ]=_fafeec (_eeba .Data [_eacc ],0x0,_dffdc );};};case PixSet :for _eeeg =0;_eeeg < _ccbb ;_eeeg ++{_eacc =_gdda +_eeeg *_eeba .RowStride ;for _gfab =0;_gfab < _gfgg ;_gfab ++{_eeba .Data [_eacc ]=0xff;_eacc ++;};if _afed > 0{_eeba .Data [_eacc ]=_fafeec (_eeba .Data [_eacc ],0xff,_dffdc );};};case PixNotDst :for _eeeg =0;_eeeg < _ccbb ;_eeeg ++{_eacc =_gdda +_eeeg *_eeba .RowStride ;for _gfab =0;_gfab < _gfgg ;_gfab ++{_eeba .Data [_eacc ]=^_eeba .Data [_eacc ];_eacc ++;};if _afed > 0{_eeba .Data [_eacc ]=_fafeec (_eeba .Data [_eacc ],^_eeba .Data [_eacc ],_dffdc );};};};};func _fcee (_eafg *Bitmap ,_abgb ,_bgebf int ,_fceee ,_ggfa int ,_bbdc RasterOperator ){var (_bdgg bool ;_bagd bool ;_gbgfa int ;_febdb int ;_ffbc int ;_ecgdf int ;_eeea bool ;_eeeb byte ;);_bdef :=8-(_abgb &7);_efgf :=_abgbg [_bdef ];_aada :=_eafg .RowStride *_bgebf +(_abgb >>3);if _fceee < _bdef {_bdgg =true ;_efgf &=_edfgc [8-_bdef +_fceee ];};if !_bdgg {_gbgfa =(_fceee -_bdef )>>3;if _gbgfa !=0{_bagd =true ;_febdb =_aada +1;};};_ffbc =(_abgb +_fceee )&7;if !(_bdgg ||_ffbc ==0){_eeea =true ;_eeeb =_edfgc [_ffbc ];_ecgdf =_aada +1+_gbgfa ;};var _bfce ,_fbef int ;switch _bbdc {case PixClr :for _bfce =0;_bfce < _ggfa ;_bfce ++{_eafg .Data [_aada ]=_fafeec (_eafg .Data [_aada ],0x0,_efgf );_aada +=_eafg .RowStride ;};if _bagd {for _bfce =0;_bfce < _ggfa ;_bfce ++{for _fbef =0;_fbef < _gbgfa ;_fbef ++{_eafg .Data [_febdb +_fbef ]=0x0;};_febdb +=_eafg .RowStride ;};};if _eeea {for _bfce =0;_bfce < _ggfa ;_bfce ++{_eafg .Data [_ecgdf ]=_fafeec (_eafg .Data [_ecgdf ],0x0,_eeeb );_ecgdf +=_eafg .RowStride ;};};case PixSet :for _bfce =0;_bfce < _ggfa ;_bfce ++{_eafg .Data [_aada ]=_fafeec (_eafg .Data [_aada ],0xff,_efgf );_aada +=_eafg .RowStride ;};if _bagd {for _bfce =0;_bfce < _ggfa ;_bfce ++{for _fbef =0;_fbef < _gbgfa ;_fbef ++{_eafg .Data [_febdb +_fbef ]=0xff;};_febdb +=_eafg .RowStride ;};};if _eeea {for _bfce =0;_bfce < _ggfa ;_bfce ++{_eafg .Data [_ecgdf ]=_fafeec (_eafg .Data [_ecgdf ],0xff,_eeeb );_ecgdf +=_eafg .RowStride ;};};case PixNotDst :for _bfce =0;_bfce < _ggfa ;_bfce ++{_eafg .Data [_aada ]=_fafeec (_eafg .Data [_aada ],^_eafg .Data [_aada ],_efgf );_aada +=_eafg .RowStride ;};if _bagd {for _bfce =0;_bfce < _ggfa ;_bfce ++{for _fbef =0;_fbef < _gbgfa ;_fbef ++{_eafg .Data [_febdb +_fbef ]=^(_eafg .Data [_febdb +_fbef ]);};_febdb +=_eafg .RowStride ;};};if _eeea {for _bfce =0;_bfce < _ggfa ;_bfce ++{_eafg .Data [_ecgdf ]=_fafeec (_eafg .Data [_ecgdf ],^_eafg .Data [_ecgdf ],_eeeb );_ecgdf +=_eafg .RowStride ;};};};};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _bdaa (d ,s )};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func TstWordBitmap (t *_gb .T ,scale ...int )*Bitmap {_befe :=1;if len (scale )> 0{_befe =scale [0];};_bcbg :=3;_dgaf :=9+7+15+2*_bcbg ;_cgag :=5+_bcbg +5;_agcae :=New (_dgaf *_befe ,_cgag *_befe );_eacce :=&Bitmaps {};var _fade *int ;_bcbg *=_befe ;_dacd :=0;_fade =&_dacd ;_dbgge :=0;_debf :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,1*_befe );_debf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,_bcbg );_debf =TstISymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,1*_befe );_debf =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,_bcbg );_debf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,1*_befe );_debf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,1*_befe );_debf =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,0);*_fade =0;_dbgge =5*_befe +_bcbg ;_debf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,1*_befe );_debf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,_bcbg );_debf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,1*_befe );_debf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,1*_befe );_debf =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,1*_befe );_debf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,1*_befe );_debf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_eacce ,_debf ,_fade ,_dbgge ,0);TstWriteSymbols (t ,_eacce ,_agcae );return _agcae ;};func (_bfeg *Bitmap )GetByteIndex (x ,y int )int {return y *_bfeg .RowStride +(x >>3)};func (_efacb *Bitmap )connComponentsBB (_fgcd int )(_acfd *Boxes ,_aadf error ){const _gecd ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _fgcd !=4&&_fgcd !=8{return nil ,_gg .Error (_gecd ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _efacb .Zero (){return &Boxes {},nil ;};_efacb .setPadBits (0);_cga ,_aadf :=_bdaa (nil ,_efacb );if _aadf !=nil {return nil ,_gg .Wrap (_aadf ,_gecd ,"\u0062\u006d\u0031");};_aggag :=&_fd .Stack {};_aggag .Aux =&_fd .Stack {};_acfd =&Boxes {};var (_edcb ,_fgbf int ;_bdec _fde .Point ;_bfdb bool ;_bcbd *_fde .Rectangle ;);for {if _bdec ,_bfdb ,_aadf =_cga .nextOnPixel (_fgbf ,_edcb );_aadf !=nil {return nil ,_gg .Wrap (_aadf ,_gecd ,"");};if !_bfdb {break ;};if _bcbd ,_aadf =_gecac (_cga ,_aggag ,_bdec .X ,_bdec .Y ,_fgcd );_aadf !=nil {return nil ,_gg .Wrap (_aadf ,_gecd ,"");};if _aadf =_acfd .Add (_bcbd );_aadf !=nil {return nil ,_gg .Wrap (_aadf ,_gecd ,"");};_fgbf =_bdec .X ;_edcb =_bdec .Y ;};return _acfd ,nil ;};type Color int ;func TstAddSymbol (t *_gb .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_gegfb :=_fde .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_gegfb );*x +=sym .Width +space ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ebed (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_fgea *Boxes )Get (i int )(*_fde .Rectangle ,error ){const _afdb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _fgea ==nil {return nil ,_gg .Error (_afdb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_fgea )-1{return nil ,_gg .Errorf (_afdb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_fgea )[i ],nil ;};func (_bec *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_bec .Width ,Height :_bec .Height ,RowStride :_bec .RowStride ,Color :_bec .Color ,Text :_bec .Text ,BitmapNumber :_bec .BitmapNumber ,Special :_bec .Special ,Data :make ([]byte ,len (_bec .Data ))};};func _cdaa (_efad *Bitmap ,_cfab *Bitmap ,_aggf *Selection )(*Bitmap ,error ){var (_edae *Bitmap ;_eafa error ;);_efad ,_eafa =_abge (_efad ,_cfab ,_aggf ,&_edae );if _eafa !=nil {return nil ,_eafa ;};if _eafa =_efad .clearAll ();_eafa !=nil {return nil ,_eafa ;};var _aade SelectionValue ;for _efaea :=0;_efaea < _aggf .Height ;_efaea ++{for _egbd :=0;_egbd < _aggf .Width ;_egbd ++{_aade =_aggf .Data [_efaea ][_egbd ];if _aade ==SelHit {if _eafa =_efad .RasterOperation (_egbd -_aggf .Cx ,_efaea -_aggf .Cy ,_cfab .Width ,_cfab .Height ,PixSrcOrDst ,_edae ,0,0);_eafa !=nil {return nil ,_eafa ;};};};};return _efad ,nil ;};func (_cbgba *Points )Add (pt *Points )error {const _egbc ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _cbgba ==nil {return _gg .Error (_egbc ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _gg .Error (_egbc ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_cbgba =append (*_cbgba ,*pt ...);return nil ;};type LocationFilter int ;func (_abdec Points )Size ()int {return len (_abdec )};func _dbee (_cedg ...MorphProcess )(_gbfd error ){const _gfad ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _abcf ,_fcbc int ;for _cbfbc ,_bcff :=range _cedg {if _gbfd =_bcff .verify (_cbfbc ,&_abcf ,&_fcbc );_gbfd !=nil {return _gg .Wrap (_gbfd ,_gfad ,"");};};if _fcbc !=0&&_abcf !=0{return _gg .Error (_gfad ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");};return nil ;};type byHeight Bitmaps ;func (_gdf *Bitmap )GetChocolateData ()[]byte {if _gdf .Color ==Vanilla {_gdf .inverseData ();};return _gdf .Data ;};type SelectionValue int ;func (_cffa *Bitmaps )GetBox (i int )(*_fde .Rectangle ,error ){const _adfad ="\u0047\u0065\u0074\u0042\u006f\u0078";if _cffa ==nil {return nil ,_gg .Error (_adfad ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_cffa .Boxes )-1{return nil ,_gg .Errorf (_adfad ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cffa .Boxes [i ],nil ;};func (_cfce *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _afad ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_cfce .IntSlice .Size (){return 0,_gg .Errorf (_afad ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_cfce .XAtIndex (i )),nil ;};func _cgdg (_edbd ,_ceba *Bitmap ,_edab ,_bgacf int )(*Bitmap ,error ){const _cgda ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _ceba ==nil {return nil ,_gg .Error (_cgda ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _edab < 1||_bgacf < 1{return nil ,_gg .Error (_cgda ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _edab ==1&&_bgacf ==1{_dcgc ,_aaeb :=_bdaa (_edbd ,_ceba );if _aaeb !=nil {return nil ,_gg .Wrap (_aaeb ,_cgda ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _dcgc ,nil ;};if _edab ==1||_bgacf ==1{_bccaa :=SelCreateBrick (_bgacf ,_edab ,_bgacf /2,_edab /2,SelHit );_fbdda ,_ecga :=_gdfeb (_edbd ,_ceba ,_bccaa );if _ecga !=nil {return nil ,_gg .Wrap (_ecga ,_cgda ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _fbdda ,nil ;};_dgad :=SelCreateBrick (1,_edab ,0,_edab /2,SelHit );_fdcb :=SelCreateBrick (_bgacf ,1,_bgacf /2,0,SelHit );_fbcf ,_fbbg :=_gdfeb (nil ,_ceba ,_dgad );if _fbbg !=nil {return nil ,_gg .Wrap (_fbbg ,_cgda ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_edbd ,_fbbg =_gdfeb (_edbd ,_fbcf ,_fdcb );if _fbbg !=nil {return nil ,_gg .Wrap (_fbbg ,_cgda ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _edbd ,nil ;};func (_agg *Bitmap )nextOnPixelLow (_cfag ,_aegg ,_dgec ,_ecfa ,_ebff int )(_daa _fde .Point ,_fgbg bool ,_caad error ){const _adde ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_abfa int ;_dfb byte ;);_gefg :=_ebff *_dgec ;_eff :=_gefg +(_ecfa /8);if _dfb ,_caad =_agg .GetByte (_eff );_caad !=nil {return _daa ,false ,_gg .Wrap (_caad ,_adde ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");};if _dfb !=0{_bge :=_ecfa -(_ecfa %8)+7;for _abfa =_ecfa ;_abfa <=_bge &&_abfa < _cfag ;_abfa ++{if _agg .GetPixel (_abfa ,_ebff ){_daa .X =_abfa ;_daa .Y =_ebff ;return _daa ,true ,nil ;};};};_gaaf :=(_ecfa /8)+1;_abfa =8*_gaaf ;var _adfb int ;for _eff =_gefg +_gaaf ;_abfa < _cfag ;_eff ,_abfa =_eff +1,_abfa +8{if _dfb ,_caad =_agg .GetByte (_eff );_caad !=nil {return _daa ,false ,_gg .Wrap (_caad ,_adde ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _dfb ==0{continue ;};for _adfb =0;_adfb < 8&&_abfa < _cfag ;_adfb ,_abfa =_adfb +1,_abfa +1{if _agg .GetPixel (_abfa ,_ebff ){_daa .X =_abfa ;_daa .Y =_ebff ;return _daa ,true ,nil ;};};};for _afgc :=_ebff +1;_afgc < _aegg ;_afgc ++{_gefg =_afgc *_dgec ;for _eff ,_abfa =_gefg ,0;_abfa < _cfag ;_eff ,_abfa =_eff +1,_abfa +8{if _dfb ,_caad =_agg .GetByte (_eff );_caad !=nil {return _daa ,false ,_gg .Wrap (_caad ,_adde ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _dfb ==0{continue ;};for _adfb =0;_adfb < 8&&_abfa < _cfag ;_adfb ,_abfa =_adfb +1,_abfa +1{if _agg .GetPixel (_abfa ,_afgc ){_daa .X =_abfa ;_daa .Y =_afgc ;return _daa ,true ,nil ;};};};};return _daa ,false ,nil ;};func _cfcb (_ea ,_ce *Bitmap ,_cd int ,_fcad []byte ,_fea int )(_bde error ){const _ega ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_afe ,_ded ,_gcd ,_ecdf ,_cfec ,_gdba ,_add ,_eed int ;_bb ,_aff uint32 ;_eee ,_ae byte ;_acec uint16 ;);_dbg :=make ([]byte ,4);_ccd :=make ([]byte ,4);for _gcd =0;_gcd < _ea .Height -1;_gcd ,_ecdf =_gcd +2,_ecdf +1{_afe =_gcd *_ea .RowStride ;_ded =_ecdf *_ce .RowStride ;for _cfec ,_gdba =0,0;_cfec < _fea ;_cfec ,_gdba =_cfec +4,_gdba +1{for _add =0;_add < 4;_add ++{_eed =_afe +_cfec +_add ;if _eed <=len (_ea .Data )-1&&_eed < _afe +_ea .RowStride {_dbg [_add ]=_ea .Data [_eed ];}else {_dbg [_add ]=0x00;};_eed =_afe +_ea .RowStride +_cfec +_add ;if _eed <=len (_ea .Data )-1&&_eed < _afe +(2*_ea .RowStride ){_ccd [_add ]=_ea .Data [_eed ];}else {_ccd [_add ]=0x00;};};_bb =_ge .BigEndian .Uint32 (_dbg );_aff =_ge .BigEndian .Uint32 (_ccd );_aff |=_bb ;_aff |=_aff <<1;_aff &=0xaaaaaaaa;_bb =_aff |(_aff <<7);_eee =byte (_bb >>24);_ae =byte ((_bb >>8)&0xff);_eed =_ded +_gdba ;if _eed +1==len (_ce .Data )-1||_eed +1>=_ded +_ce .RowStride {_ce .Data [_eed ]=_fcad [_eee ];}else {_acec =(uint16 (_fcad [_eee ])<<8)|uint16 (_fcad [_ae ]);if _bde =_ce .setTwoBytes (_eed ,_acec );_bde !=nil {return _gg .Wrapf (_bde ,_ega ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eed );};_gdba ++;};};};return nil ;};func (_caefd *Bitmap )countPixels ()int {var (_bbbg int ;_caa uint8 ;_egf byte ;_cefd int ;);_aad :=_caefd .RowStride ;_dcg :=uint (_caefd .Width &0x07);if _dcg !=0{_caa =uint8 ((0xff<<(8-_dcg ))&0xff);_aad --;};for _bgbg :=0;_bgbg < _caefd .Height ;_bgbg ++{for _cefd =0;_cefd < _aad ;_cefd ++{_egf =_caefd .Data [_bgbg *_caefd .RowStride +_cefd ];_bbbg +=int (_beg [_egf ]);};if _dcg !=0{_bbbg +=int (_beg [_caefd .Data [_bgbg *_caefd .RowStride +_cefd ]&_caa ]);};};return _bbbg ;};func (_agccc *byHeight )Less (i ,j int )bool {return _agccc .Values [i ].Height < _agccc .Values [j ].Height };type SizeSelection int ;func (_dege *Bitmap )setFourBytes (_agfb int ,_dbec uint32 )error {if _agfb +3> len (_dege .Data )-1{return _gg .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_agfb );};_dege .Data [_agfb ]=byte ((_dbec &0xff000000)>>24);_dege .Data [_agfb +1]=byte ((_dbec &0xff0000)>>16);_dege .Data [_agfb +2]=byte ((_dbec &0xff00)>>8);_dege .Data [_agfb +3]=byte (_dbec &0xff);return nil ;};func (_bacgg *Bitmaps )HeightSorter ()func (_eadf ,_cgc int )bool {return func (_feca ,_ffaa int )bool {_gffb :=_bacgg .Values [_feca ].Height < _bacgg .Values [_ffaa ].Height ;_ggc .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_bacgg .Values [_feca ].Height ,_bacgg .Values [_ffaa ].Height ,_gffb );return _gffb ;};};func _afba (_gdbf *Bitmap ,_gaag ,_bdac ,_bcbe ,_babf int ,_ebegee RasterOperator ){if _gaag < 0{_bcbe +=_gaag ;_gaag =0;};_gebf :=_gaag +_bcbe -_gdbf .Width ;if _gebf > 0{_bcbe -=_gebf ;};if _bdac < 0{_babf +=_bdac ;_bdac =0;};_dcdb :=_bdac +_babf -_gdbf .Height ;if _dcdb > 0{_babf -=_dcdb ;};if _bcbe <=0||_babf <=0{return ;};if (_gaag &7)==0{_acfc (_gdbf ,_gaag ,_bdac ,_bcbe ,_babf ,_ebegee );}else {_fcee (_gdbf ,_gaag ,_bdac ,_bcbe ,_babf ,_ebegee );};};func _eceb (_ddfd ,_bgf *Bitmap ,_caeba ,_ffafc ,_gbgb uint ,_ddec ,_egda int ,_dabb bool ,_dbge ,_dfc int )error {for _accg :=_ddec ;_accg < _egda ;_accg ++{if _dbge +1< len (_ddfd .Data ){_badff :=_accg +1==_egda ;_dfgbg ,_edgg :=_ddfd .GetByte (_dbge );if _edgg !=nil {return _edgg ;};_dbge ++;_dfgbg <<=_caeba ;_cff ,_edgg :=_ddfd .GetByte (_dbge );if _edgg !=nil {return _edgg ;};_cff >>=_ffafc ;_bgbff :=_dfgbg |_cff ;if _badff &&!_dabb {_bgbff =_befb (_gbgb ,_bgbff );};_edgg =_bgf .SetByte (_dfc ,_bgbff );if _edgg !=nil {return _edgg ;};_dfc ++;if _badff &&_dabb {_beafg ,_dcdg :=_ddfd .GetByte (_dbge );if _dcdg !=nil {return _dcdg ;};_beafg <<=_caeba ;_bgbff =_befb (_gbgb ,_beafg );if _dcdg =_bgf .SetByte (_dfc ,_bgbff );_dcdg !=nil {return _dcdg ;};};continue ;};_dadb ,_adb :=_ddfd .GetByte (_dbge );if _adb !=nil {_ggc .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_dbge ,_adb );return _adb ;};_dadb <<=_caeba ;_dbge ++;_adb =_bgf .SetByte (_dfc ,_dadb );if _adb !=nil {return _adb ;};_dfc ++;};return nil ;};func TstImageBitmap ()*Bitmap {return _ecff .Copy ()};func ClipBoxToRectangle (box *_fde .Rectangle ,wi ,hi int )(_ceaa *_fde .Rectangle ,_ggcdg error ){const _cggc ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_gg .Error (_cggc ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_gg .Error (_cggc ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_abga :=*box ;_ceaa =&_abga ;if _ceaa .Min .X < 0{_ceaa .Max .X +=_ceaa .Min .X ;_ceaa .Min .X =0;};if _ceaa .Min .Y < 0{_ceaa .Max .Y +=_ceaa .Min .Y ;_ceaa .Min .Y =0;};if _ceaa .Max .X > wi {_ceaa .Max .X =wi ;};if _ceaa .Max .Y > hi {_ceaa .Max .Y =hi ;};return _ceaa ,nil ;};func (_bgbgc *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_gcea *Bitmaps ,_abcd *Boxes ,_cfbe error ){const _dgace ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _bgbgc ==nil {return nil ,nil ,_gg .Error (_dgace ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_gg .Error (_dgace ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");};if _bgbgc .Zero (){_abcd =&Boxes {};_gcea =&Bitmaps {};return _gcea ,_abcd ,nil ;};switch components {case ComponentConn :_gcea =&Bitmaps {};if _abcd ,_cfbe =_bgbgc .ConnComponents (_gcea ,8);_cfbe !=nil {return nil ,nil ,_gg .Wrap (_cfbe ,_dgace ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentCharacters :_bbcad ,_ffcd :=MorphSequence (_bgbgc ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _ffcd !=nil {return nil ,nil ,_gg .Wrap (_ffcd ,_dgace ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _ggc .Log .IsLogLevel (_ggc .LogLevelTrace ){_ggc .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_bbcad .String ());};_agga :=&Bitmaps {};_abcd ,_ffcd =_bbcad .ConnComponents (_agga ,8);if _ffcd !=nil {return nil ,nil ,_gg .Wrap (_ffcd ,_dgace ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _ggc .Log .IsLogLevel (_ggc .LogLevelTrace ){_ggc .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_agga .String ());};if _gcea ,_ffcd =_agga .ClipToBitmap (_bgbgc );_ffcd !=nil {return nil ,nil ,_gg .Wrap (_ffcd ,_dgace ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_ggeb :=1;var _gcca *Bitmap ;switch {case _bgbgc .XResolution <=200:_gcca =_bgbgc ;case _bgbgc .XResolution <=400:_ggeb =2;_gcca ,_cfbe =_cfe (_bgbgc ,1,0,0,0);if _cfbe !=nil {return nil ,nil ,_gg .Wrap (_cfbe ,_dgace ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");};default:_ggeb =4;_gcca ,_cfbe =_cfe (_bgbgc ,1,1,0,0);if _cfbe !=nil {return nil ,nil ,_gg .Wrap (_cfbe ,_dgace ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");};};_aae ,_ ,_dbdg :=_eccbda (_gcca );if _dbdg !=nil {return nil ,nil ,_gg .Wrap (_dbdg ,_dgace ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_dcaf ,_dbdg :=_egcf (_aae ,_ggeb );if _dbdg !=nil {return nil ,nil ,_gg .Wrap (_dbdg ,_dgace ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_geae :=&Bitmaps {};if _abcd ,_dbdg =_dcaf .ConnComponents (_geae ,4);_dbdg !=nil {return nil ,nil ,_gg .Wrap (_dbdg ,_dgace ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");};if _gcea ,_dbdg =_geae .ClipToBitmap (_bgbgc );_dbdg !=nil {return nil ,nil ,_gg .Wrap (_dbdg ,_dgace ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_gcea ,_cfbe =_gcea .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _cfbe !=nil {return nil ,nil ,_gg .Wrap (_cfbe ,_dgace ,"");};_abcd ,_cfbe =_abcd .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _cfbe !=nil {return nil ,nil ,_gg .Wrap (_cfbe ,_dgace ,"");};return _gcea ,_abcd ,nil ;};func (_bddf *Boxes )selectWithIndicator (_eccf *_fd .NumSlice )(_facc *Boxes ,_bcd error ){const _daf ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _bddf ==nil {return nil ,_gg .Error (_daf ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _eccf ==nil {return nil ,_gg .Error (_daf ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_eccf )!=len (*_bddf ){return nil ,_gg .Error (_daf ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");};var _gcgg ,_aca int ;for _dcab :=0;_dcab < len (*_eccf );_dcab ++{if _gcgg ,_bcd =_eccf .GetInt (_dcab );_bcd !=nil {return nil ,_gg .Wrap (_bcd ,_daf ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _gcgg ==1{_aca ++;};};if _aca ==len (*_bddf ){return _bddf ,nil ;};_efe :=Boxes {};for _bbca :=0;_bbca < len (*_eccf );_bbca ++{_gcgg =int ((*_eccf )[_bbca ]);if _gcgg ==0{continue ;};_efe =append (_efe ,(*_bddf )[_bbca ]);};_facc =&_efe ;return _facc ,nil ;};func _bcca (_gafa ,_cdec *Bitmap ,_ebdce ,_afdg ,_bcgc ,_feff ,_edb ,_fbdg ,_edfg ,_acfa int ,_cada CombinationOperator )error {var _gggb int ;_eegc :=func (){_gggb ++;_bcgc +=_cdec .RowStride ;_feff +=_gafa .RowStride ;_edb +=_gafa .RowStride };for _gggb =_ebdce ;_gggb < _afdg ;_eegc (){var _bdgd uint16 ;_bbgc :=_bcgc ;for _feceg :=_feff ;_feceg <=_edb ;_feceg ++{_eecc ,_bbee :=_cdec .GetByte (_bbgc );if _bbee !=nil {return _bbee ;};_gafe ,_bbee :=_gafa .GetByte (_feceg );if _bbee !=nil {return _bbee ;};_bdgd =(_bdgd |uint16 (_gafe ))<<uint (_acfa );_gafe =byte (_bdgd >>8);if _feceg ==_edb {_gafe =_befb (uint (_fbdg ),_gafe );};if _bbee =_cdec .SetByte (_bbgc ,_gca (_eecc ,_gafe ,_cada ));_bbee !=nil {return _bbee ;};_bbgc ++;_bdgd <<=uint (_edfg );};};return nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _cdaa (d ,s ,sel )};const (Vanilla Color =iota ;Chocolate ;);func (_bgbf *Bitmap )removeBorderGeneral (_ddc ,_bff ,_gcbb ,_egg int )(*Bitmap ,error ){const _ddfge ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _ddc < 0||_bff < 0||_gcbb < 0||_egg < 0{return nil ,_gg .Error (_ddfge ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_cdbf ,_cefa :=_bgbf .Width ,_bgbf .Height ;_dde :=_cdbf -_ddc -_bff ;_acb :=_cefa -_gcbb -_egg ;if _dde <=0{return nil ,_gg .Errorf (_ddfge ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_dde );};if _acb <=0{return nil ,_gg .Errorf (_ddfge ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_acb );};_ccgg :=New (_dde ,_acb );_ccgg .Color =_bgbf .Color ;_fbdd :=_ccgg .RasterOperation (0,0,_dde ,_acb ,PixSrc ,_bgbf ,_ddc ,_gcbb );if _fbdd !=nil {return nil ,_gg .Wrap (_fbdd ,_ddfge ,"");};return _ccgg ,nil ;};func (_cfb *Bitmap )addPadBits ()(_ecgd error ){const _bcb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_faf :=_cfb .Width %8;if _faf ==0{return nil ;};_gaf :=_cfb .Width /8;_fge :=_b .NewReader (_cfb .Data );_dfg :=make ([]byte ,_cfb .Height *_cfb .RowStride );_bcga :=_b .NewWriterMSB (_dfg );_degb :=make ([]byte ,_gaf );var (_eeed int ;_ggcd uint64 ;);for _eeed =0;_eeed < _cfb .Height ;_eeed ++{if _ ,_ecgd =_fge .Read (_degb );_ecgd !=nil {return _gg .Wrap (_ecgd ,_bcb ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_ecgd =_bcga .Write (_degb );_ecgd !=nil {return _gg .Wrap (_ecgd ,_bcb ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _ggcd ,_ecgd =_fge .ReadBits (byte (_faf ));_ecgd !=nil {return _gg .Wrap (_ecgd ,_bcb ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _ecgd =_bcga .WriteByte (byte (_ggcd )<<uint (8-_faf ));_ecgd !=nil {return _gg .Wrap (_ecgd ,_bcb ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_cfb .Data =_bcga .Data ();return nil ;};const _efgg =5000;func (_gffg *Bitmap )Zero ()bool {_acecc :=_gffg .Width /8;_dbe :=_gffg .Width &7;var _dadc byte ;if _dbe !=0{_dadc =byte (0xff<<uint (8-_dbe ));};var _gdbc ,_ebee ,_affbb int ;for _ebee =0;_ebee < _gffg .Height ;_ebee ++{_gdbc =_gffg .RowStride *_ebee ;for _affbb =0;_affbb < _acecc ;_affbb ,_gdbc =_affbb +1,_gdbc +1{if _gffg .Data [_gdbc ]!=0{return false ;};};if _dbe > 0{if _gffg .Data [_gdbc ]&_dadc !=0{return false ;};};};return true ;};func (_acee Points )YSorter ()func (_eedged ,_fgab int )bool {return func (_cbcbf ,_fffg int )bool {return _acee [_cbcbf ].Y < _acee [_fffg ].Y };};func _dfgb (_ceg ,_ccaa int )int {if _ceg > _ccaa {return _ceg ;};return _ccaa ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _cfgdd (d ,s ,hSize ,vSize )};func (_fcbb *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_adga *Boxes ,_caafa error ){const _fdd ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _fcbb ==nil {return nil ,_gg .Error (_fdd ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_gg .Error (_fdd ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _adga ,_caafa =_fcbb .connComponentsBB (connectivity );_caafa !=nil {return nil ,_gg .Wrap (_caafa ,_fdd ,"");};}else {if _adga ,_caafa =_fcbb .connComponentsBitmapsBB (bms ,connectivity );_caafa !=nil {return nil ,_gg .Wrap (_caafa ,_fdd ,"");};};return _adga ,nil ;};func (_gecc *Bitmap )setPadBits (_cdgc int ){_eged :=8-_gecc .Width %8;if _eged ==8{return ;};_egec :=_gecc .Width /8;_agcd :=_abgbg [_eged ];if _cdgc ==0{_agcd ^=_agcd ;};var _febd int ;for _accd :=0;_accd < _gecc .Height ;_accd ++{_febd =_accd *_gecc .RowStride +_egec ;if _cdgc ==0{_gecc .Data [_febd ]&=_agcd ;}else {_gecc .Data [_febd ]|=_agcd ;};};};func _eccfa (_fcgb ,_aafd *Bitmap ,_fafb *Selection )(*Bitmap ,error ){const _gdfc ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _agdd error ;if _fcgb ,_agdd =_bgba (_fcgb ,_aafd ,_fafb );_agdd !=nil {return nil ,_agdd ;};_ffdd ,_agdd :=_cdaa (nil ,_aafd ,_fafb );if _agdd !=nil {return nil ,_gg .Wrap (_agdd ,_gdfc ,"");};if _ ,_agdd =_gdfeb (_fcgb ,_ffdd ,_fafb );_agdd !=nil {return nil ,_gg .Wrap (_agdd ,_gdfc ,"");};return _fcgb ,nil ;};func Rect (x ,y ,w ,h int )(*_fde .Rectangle ,error ){const _afb ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_gg .Errorf (_afb ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_gg .Error (_afb ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_gedfd :=_fde .Rect (x ,y ,x +w ,y +h );return &_gedfd ,nil ;};func (_cagdd *ClassedPoints )SortByY (){_cagdd ._ebfgb =_cagdd .ySortFunction ();_f .Sort (_cagdd )};func (_aeb *Bitmap )inverseData (){if _bgcae :=_aeb .RasterOperation (0,0,_aeb .Width ,_aeb .Height ,PixNotDst ,nil ,0,0);_bgcae !=nil {_ggc .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_bgcae );};if _aeb .Color ==Chocolate {_aeb .Color =Vanilla ;}else {_aeb .Color =Chocolate ;};};type ClassedPoints struct{*Points ;_fd .IntSlice ;_ebfgb func (_dfcd ,_eadef int )bool ;};func (_ecee *Bitmap )InverseData (){_ecee .inverseData ()};func (_gdg *Bitmap )Equals (s *Bitmap )bool {if len (_gdg .Data )!=len (s .Data )||_gdg .Width !=s .Width ||_gdg .Height !=s .Height {return false ;};for _cda :=0;_cda < _gdg .Height ;_cda ++{_fff :=_cda *_gdg .RowStride ;for _ggf :=0;_ggf < _gdg .RowStride ;_ggf ++{if _gdg .Data [_fff +_ggf ]!=s .Data [_fff +_ggf ]{return false ;};};};return true ;};func (_eeg *Bitmap )CreateTemplate ()*Bitmap {return _eeg .createTemplate ()};func _cgac (_fdef *Bitmap ,_begc ...MorphProcess )(_beac *Bitmap ,_aegge error ){const _feda ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _fdef ==nil {return nil ,_gg .Error (_feda ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if len (_begc )==0{return nil ,_gg .Error (_feda ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _aegge =_dbee (_begc ...);_aegge !=nil {return nil ,_gg .Wrap (_aegge ,_feda ,"");};var _eedbc ,_cgfe ,_feg int ;_beac =_fdef .Copy ();for _ ,_bcab :=range _begc {switch _bcab .Operation {case MopDilation :_eedbc ,_cgfe =_bcab .getWidthHeight ();_beac ,_aegge =DilateBrick (nil ,_beac ,_eedbc ,_cgfe );if _aegge !=nil {return nil ,_gg .Wrap (_aegge ,_feda ,"");};case MopErosion :_eedbc ,_cgfe =_bcab .getWidthHeight ();_beac ,_aegge =_cgdg (nil ,_beac ,_eedbc ,_cgfe );if _aegge !=nil {return nil ,_gg .Wrap (_aegge ,_feda ,"");};case MopOpening :_eedbc ,_cgfe =_bcab .getWidthHeight ();_beac ,_aegge =_caf (nil ,_beac ,_eedbc ,_cgfe );if _aegge !=nil {return nil ,_gg .Wrap (_aegge ,_feda ,"");};case MopClosing :_eedbc ,_cgfe =_bcab .getWidthHeight ();_beac ,_aegge =_eefd (nil ,_beac ,_eedbc ,_cgfe );if _aegge !=nil {return nil ,_gg .Wrap (_aegge ,_feda ,"");};case MopRankBinaryReduction :_beac ,_aegge =_cfe (_beac ,_bcab .Arguments ...);if _aegge !=nil {return nil ,_gg .Wrap (_aegge ,_feda ,"");};case MopReplicativeBinaryExpansion :_beac ,_aegge =_egcf (_beac ,_bcab .Arguments [0]);if _aegge !=nil {return nil ,_gg .Wrap (_aegge ,_feda ,"");};case MopAddBorder :_feg =_bcab .Arguments [0];_beac ,_aegge =_beac .AddBorder (_feg ,0);if _aegge !=nil {return nil ,_gg .Wrap (_aegge ,_feda ,"");};default:return nil ,_gg .Error (_feda ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");};};if _feg > 0{_beac ,_aegge =_beac .RemoveBorder (_feg );if _aegge !=nil {return nil ,_gg .Wrap (_aegge ,_feda ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _beac ,nil ;};func _egcf (_gbcdd *Bitmap ,_eccef int )(*Bitmap ,error ){const _gfd ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _gbcdd ==nil {return nil ,_gg .Error (_gfd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _eccef <=0{return nil ,_gg .Error (_gfd ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _eccef ==1{_ffcb ,_eabe :=_bdaa (nil ,_gbcdd );if _eabe !=nil {return nil ,_gg .Wrap (_eabe ,_gfd ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _ffcb ,nil ;};_eedge ,_bcdg :=_ffea (_gbcdd ,_eccef ,_eccef );if _bcdg !=nil {return nil ,_gg .Wrap (_bcdg ,_gfd ,"");};return _eedge ,nil ;};func (_efgd *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _geag ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_efgd .Values )==0{return nil ,_gg .Error (_geag ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_fbdge :=&BitmapsArray {};_efgd .SortByWidth ();_bdcfd :=-1;_agff :=-1;for _gcfe :=0;_gcfe < len (_efgd .Values );_gcfe ++{_bgd :=_efgd .Values [_gcfe ].Width ;if _bgd > _bdcfd {_bdcfd =_bgd ;_agff ++;_fbdge .Values =append (_fbdge .Values ,&Bitmaps {});};_fbdge .Values [_agff ].AddBitmap (_efgd .Values [_gcfe ]);};return _fbdge ,nil ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func Centroids (bms []*Bitmap )(*Points ,error ){_edea :=make ([]Point ,len (bms ));_gbad :=_dabfd ();_bace :=_gcfg ();var _dffdd error ;for _cdfg ,_ddecb :=range bms {_edea [_cdfg ],_dffdd =_ddecb .centroid (_gbad ,_bace );if _dffdd !=nil {return nil ,_dffdd ;};};_egde :=Points (_edea );return &_egde ,nil ;};func _fcd (_agbe ,_dggg ,_gce *Bitmap )(*Bitmap ,error ){const _cdba ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _dggg ==nil {return nil ,_gg .Error (_cdba ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gce ==nil {return nil ,_gg .Error (_cdba ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _agbe ==_gce {return nil ,_gg .Error (_cdba ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_dggg .SizesEqual (_gce ){_ggc .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_cdba );};var _bgbdf error ;if _agbe ,_bgbdf =_bdaa (_agbe ,_dggg );_bgbdf !=nil {return nil ,_gg .Wrap (_bgbdf ,_cdba ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _bgbdf =_agbe .RasterOperation (0,0,_agbe .Width ,_agbe .Height ,PixSrcXorDst ,_gce ,0,0);_bgbdf !=nil {return nil ,_gg .Wrap (_bgbdf ,_cdba ,"");};return _agbe ,nil ;};func TstISymbol (t *_gb .T ,scale ...int )*Bitmap {_beeb ,_abebg :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_e .NoError (t ,_abebg );return TstGetScaledSymbol (t ,_beeb ,scale ...);};func _efb (_bee ,_fgg int )*Bitmap {return &Bitmap {Width :_bee ,Height :_fgg ,RowStride :(_bee +7)>>3};};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func _abge (_deged *Bitmap ,_bbafb *Bitmap ,_cedc *Selection ,_bece **Bitmap )(*Bitmap ,error ){const _ggaa ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _bbafb ==nil {return nil ,_gg .Error (_ggaa ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _cedc ==nil {return nil ,_gg .Error (_ggaa ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_eedbg ,_cafg :=_cedc .Height ,_cedc .Width ;if _eedbg ==0||_cafg ==0{return nil ,_gg .Error (_ggaa ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _deged ==nil {_deged =_bbafb .createTemplate ();*_bece =_bbafb ;return _deged ,nil ;};_deged .Width =_bbafb .Width ;_deged .Height =_bbafb .Height ;_deged .RowStride =_bbafb .RowStride ;_deged .Color =_bbafb .Color ;_deged .Data =make ([]byte ,_bbafb .RowStride *_bbafb .Height );if _deged ==_bbafb {*_bece =_bbafb .Copy ();}else {*_bece =_bbafb ;};return _deged ,nil ;};func TstESymbol (t *_gb .T ,scale ...int )*Bitmap {_becb ,_fbcfd :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_e .NoError (t ,_fbcfd );return TstGetScaledSymbol (t ,_becb ,scale ...);};func _cdbd (_cdca *Bitmap ,_cegf *_fd .Stack ,_acbd ,_agagf int )(_adab *_fde .Rectangle ,_cebc error ){const _dafg ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _cdca ==nil {return nil ,_gg .Error (_dafg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _cegf ==nil {return nil ,_gg .Error (_dafg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_gcfd ,_gdfda :=_cdca .Width ,_cdca .Height ;_bbbcfc :=_gcfd -1;_eadc :=_gdfda -1;if _acbd < 0||_acbd > _bbbcfc ||_agagf < 0||_agagf > _eadc ||!_cdca .GetPixel (_acbd ,_agagf ){return nil ,nil ;};_gaeeb :=_fde .Rect (100000,100000,0,0);if _cebc =_dbdc (_cegf ,_acbd ,_acbd ,_agagf ,1,_eadc ,&_gaeeb );_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cebc =_dbdc (_cegf ,_acbd ,_acbd ,_agagf +1,-1,_eadc ,&_gaeeb );_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_gaeeb .Min .X ,_gaeeb .Max .X =_acbd ,_acbd ;_gaeeb .Min .Y ,_gaeeb .Max .Y =_agagf ,_agagf ;var (_addfd *fillSegment ;_aaef int ;);for _cegf .Len ()> 0{if _addfd ,_cebc =_caedb (_cegf );_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"");};_agagf =_addfd ._gbeg ;for _acbd =_addfd ._bfga -1;_acbd >=0&&_cdca .GetPixel (_acbd ,_agagf );_acbd --{if _cebc =_cdca .SetPixel (_acbd ,_agagf ,0);_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _acbd >=_addfd ._bfga -1{for {for _acbd ++;_acbd <=_addfd ._agcaa +1&&_acbd <=_bbbcfc &&!_cdca .GetPixel (_acbd ,_agagf );_acbd ++{};_aaef =_acbd ;if !(_acbd <=_addfd ._agcaa +1&&_acbd <=_bbbcfc ){break ;};for ;_acbd <=_bbbcfc &&_cdca .GetPixel (_acbd ,_agagf );_acbd ++{if _cebc =_cdca .SetPixel (_acbd ,_agagf ,0);_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cebc =_dbdc (_cegf ,_aaef ,_acbd -1,_addfd ._gbeg ,_addfd ._gcfgb ,_eadc ,&_gaeeb );_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _acbd > _addfd ._agcaa {if _cebc =_dbdc (_cegf ,_addfd ._agcaa +1,_acbd -1,_addfd ._gbeg ,-_addfd ._gcfgb ,_eadc ,&_gaeeb );_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};};continue ;};_aaef =_acbd +1;if _aaef < _addfd ._bfga {if _cebc =_dbdc (_cegf ,_aaef ,_addfd ._bfga -1,_addfd ._gbeg ,-_addfd ._gcfgb ,_eadc ,&_gaeeb );_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_acbd =_addfd ._bfga ;for {for ;_acbd <=_bbbcfc &&_cdca .GetPixel (_acbd ,_agagf );_acbd ++{if _cebc =_cdca .SetPixel (_acbd ,_agagf ,0);_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cebc =_dbdc (_cegf ,_aaef ,_acbd -1,_addfd ._gbeg ,_addfd ._gcfgb ,_eadc ,&_gaeeb );_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _acbd > _addfd ._agcaa {if _cebc =_dbdc (_cegf ,_addfd ._agcaa +1,_acbd -1,_addfd ._gbeg ,-_addfd ._gcfgb ,_eadc ,&_gaeeb );_cebc !=nil {return nil ,_gg .Wrap (_cebc ,_dafg ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _acbd ++;_acbd <=_addfd ._agcaa +1&&_acbd <=_bbbcfc &&!_cdca .GetPixel (_acbd ,_agagf );_acbd ++{};_aaef =_acbd ;if !(_acbd <=_addfd ._agcaa +1&&_acbd <=_bbbcfc ){break ;};};};_gaeeb .Max .X ++;_gaeeb .Max .Y ++;return &_gaeeb ,nil ;};func (_badaa *Selection )findMaxTranslations ()(_gdeg ,_cgaa ,_bfdc ,_deda int ){for _bede :=0;_bede < _badaa .Height ;_bede ++{for _ebbf :=0;_ebbf < _badaa .Width ;_ebbf ++{if _badaa .Data [_bede ][_ebbf ]==SelHit {_gdeg =_dfgb (_gdeg ,_badaa .Cx -_ebbf );_cgaa =_dfgb (_cgaa ,_badaa .Cy -_bede );_bfdc =_dfgb (_bfdc ,_ebbf -_badaa .Cx );_deda =_dfgb (_deda ,_bede -_badaa .Cy );};};};return _gdeg ,_cgaa ,_bfdc ,_deda ;};func (_fefd *Bitmap )SetPadBits (value int ){_fefd .setPadBits (value )};func (_dbfd *ClassedPoints )Swap (i ,j int ){_dbfd .IntSlice [i ],_dbfd .IntSlice [j ]=_dbfd .IntSlice [j ],_dbfd .IntSlice [i ];};func (_gbfce *Bitmap )clipRectangle (_eedb ,_ffdf *_fde .Rectangle )(_gde *Bitmap ,_dba error ){const _bcgb ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _eedb ==nil {return nil ,_gg .Error (_bcgb ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_ged ,_cbde :=_gbfce .Width ,_gbfce .Height ;_eeaa ,_dba :=ClipBoxToRectangle (_eedb ,_ged ,_cbde );if _dba !=nil {_ggc .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_dba );return nil ,nil ;};_cdbb ,_dccc :=_eeaa .Min .X ,_eeaa .Min .Y ;_bdb ,_aeg :=_eeaa .Max .X -_eeaa .Min .X ,_eeaa .Max .Y -_eeaa .Min .Y ;_gde =New (_bdb ,_aeg );_gde .Text =_gbfce .Text ;if _dba =_gde .RasterOperation (0,0,_bdb ,_aeg ,PixSrc ,_gbfce ,_cdbb ,_dccc );_dba !=nil {return nil ,_gg .Wrap (_dba ,_bcgb ,"");};if _ffdf !=nil {*_ffdf =*_eeaa ;};return _gde ,nil ;};func _dbdc (_geea *_fd .Stack ,_ecfg ,_bdcf ,_ddbfc ,_geba ,_egdg int ,_bfgbe *_fde .Rectangle )(_afbb error ){const _bfaed ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";if _geea ==nil {return _gg .Error (_bfaed ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _bfgbe ==nil {return _gg .Error (_bfaed ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");};_bfgbe .Min .X =_fd .Min (_bfgbe .Min .X ,_ecfg );_bfgbe .Max .X =_fd .Max (_bfgbe .Max .X ,_bdcf );_bfgbe .Min .Y =_fd .Min (_bfgbe .Min .Y ,_ddbfc );_bfgbe .Max .Y =_fd .Max (_bfgbe .Max .Y ,_ddbfc );if !(_ddbfc +_geba >=0&&_ddbfc +_geba <=_egdg ){return nil ;};if _geea .Aux ==nil {return _gg .Error (_bfaed ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _accc *fillSegment ;_cgaf ,_deeb :=_geea .Aux .Pop ();if _deeb {if _accc ,_deeb =_cgaf .(*fillSegment );!_deeb {return _gg .Error (_bfaed ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_accc =&fillSegment {};};_accc ._bfga =_ecfg ;_accc ._agcaa =_bdcf ;_accc ._gbeg =_ddbfc ;_accc ._gcfgb =_geba ;_geea .Push (_accc );return nil ;};var _beg [256]uint8 ;func (_eeabb *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _eeabb .Copy (),nil ;};_egaa ,_gccf :=_eeabb .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _gccf !=nil {return nil ,_gg .Wrap (_gccf ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _egaa ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _cgac (src ,sequence ...);};type byWidth Bitmaps ;func (_fbbf MorphProcess )verify (_dacg int ,_cfcg ,_aefcg *int )error {const _eceg ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _fbbf .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_fbbf .Arguments )!=2{return _gg .Error (_eceg ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");};_afa ,_cfagg :=_fbbf .getWidthHeight ();if _afa <=0||_cfagg <=0{return _gg .Error (_eceg ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");};case MopRankBinaryReduction :_fbdb :=len (_fbbf .Arguments );*_cfcg +=_fbdb ;if _fbdb < 1||_fbdb > 4{return _gg .Error (_eceg ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");};for _ecaf :=0;_ecaf < _fbdb ;_ecaf ++{if _fbbf .Arguments [_ecaf ]< 1||_fbbf .Arguments [_ecaf ]> 4{return _gg .Error (_eceg ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");};};case MopReplicativeBinaryExpansion :if len (_fbbf .Arguments )==0{return _gg .Error (_eceg ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fbea :=_fbbf .Arguments [0];if _fbea !=2&&_fbea !=4&&_fbea !=8{return _gg .Error (_eceg ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};*_cfcg -=_egcd [_fbea /4];case MopAddBorder :if len (_fbbf .Arguments )==0{return _gg .Error (_eceg ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caed :=_fbbf .Arguments [0];if _dacg > 0{return _gg .Error (_eceg ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");};if _caed < 1{return _gg .Error (_eceg ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_aefcg =_caed ;};return nil ;};func _gc ()(_bcg [256]uint32 ){for _fgd :=0;_fgd < 256;_fgd ++{if _fgd &0x01!=0{_bcg [_fgd ]|=0xf;};if _fgd &0x02!=0{_bcg [_fgd ]|=0xf0;};if _fgd &0x04!=0{_bcg [_fgd ]|=0xf00;};if _fgd &0x08!=0{_bcg [_fgd ]|=0xf000;};if _fgd &0x10!=0{_bcg [_fgd ]|=0xf0000;};if _fgd &0x20!=0{_bcg [_fgd ]|=0xf00000;};if _fgd &0x40!=0{_bcg [_fgd ]|=0xf000000;};if _fgd &0x80!=0{_bcg [_fgd ]|=0xf0000000;};};return _bcg ;};func (_gdcg *byHeight )Len ()int {return len (_gdcg .Values )};func _deee (_be ,_aed *Bitmap ,_gee int ,_ccfe []byte ,_dga int )(_dgc error ){const _eag ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_bfe ,_agf ,_dbd ,_eab ,_ecf ,_gdad ,_efc ,_cae int ;_ebf ,_fece ,_dgg ,_ggd uint32 ;_bbb ,_fgcc byte ;_fcc uint16 ;);_bda :=make ([]byte ,4);_dbgf :=make ([]byte ,4);for _dbd =0;_dbd < _be .Height -1;_dbd ,_eab =_dbd +2,_eab +1{_bfe =_dbd *_be .RowStride ;_agf =_eab *_aed .RowStride ;for _ecf ,_gdad =0,0;_ecf < _dga ;_ecf ,_gdad =_ecf +4,_gdad +1{for _efc =0;_efc < 4;_efc ++{_cae =_bfe +_ecf +_efc ;if _cae <=len (_be .Data )-1&&_cae < _bfe +_be .RowStride {_bda [_efc ]=_be .Data [_cae ];}else {_bda [_efc ]=0x00;};_cae =_bfe +_be .RowStride +_ecf +_efc ;if _cae <=len (_be .Data )-1&&_cae < _bfe +(2*_be .RowStride ){_dbgf [_efc ]=_be .Data [_cae ];}else {_dbgf [_efc ]=0x00;};};_ebf =_ge .BigEndian .Uint32 (_bda );_fece =_ge .BigEndian .Uint32 (_dbgf );_dgg =_ebf &_fece ;_dgg |=_dgg <<1;_ggd =_ebf |_fece ;_ggd &=_ggd <<1;_fece =_dgg |_ggd ;_fece &=0xaaaaaaaa;_ebf =_fece |(_fece <<7);_bbb =byte (_ebf >>24);_fgcc =byte ((_ebf >>8)&0xff);_cae =_agf +_gdad ;if _cae +1==len (_aed .Data )-1||_cae +1>=_agf +_aed .RowStride {if _dgc =_aed .SetByte (_cae ,_ccfe [_bbb ]);_dgc !=nil {return _gg .Wrapf (_dgc ,_eag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cae );};}else {_fcc =(uint16 (_ccfe [_bbb ])<<8)|uint16 (_ccfe [_fgcc ]);if _dgc =_aed .setTwoBytes (_cae ,_fcc );_dgc !=nil {return _gg .Wrapf (_dgc ,_eag ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cae );};_gdad ++;};};};return nil ;};func _eefd (_cabf ,_ebfd *Bitmap ,_dgcg ,_bcgae int )(*Bitmap ,error ){const _fggc ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _ebfd ==nil {return nil ,_gg .Error (_fggc ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dgcg < 1||_bcgae < 1{return nil ,_gg .Error (_fggc ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _dgcg ==1&&_bcgae ==1{return _bdaa (_cabf ,_ebfd );};if MorphBC ==SymmetricMorphBC {_fbbc ,_aebb :=_afea (_cabf ,_ebfd ,_dgcg ,_bcgae );if _aebb !=nil {return nil ,_gg .Wrap (_aebb ,_fggc ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _fbbc ,nil ;};_dbaa :=_dfgb (_dgcg /2,_bcgae /2);_ddb :=8*((_dbaa +7)/8);_bcbc ,_abcb :=_ebfd .AddBorder (_ddb ,0);if _abcb !=nil {return nil ,_gg .Wrapf (_abcb ,_fggc ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_ddb );};var _bfba ,_bfeb *Bitmap ;if _dgcg ==1||_bcgae ==1{_bab :=SelCreateBrick (_bcgae ,_dgcg ,_bcgae /2,_dgcg /2,SelHit );_bfba ,_abcb =_eccfa (nil ,_bcbc ,_bab );if _abcb !=nil {return nil ,_gg .Wrap (_abcb ,_fggc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_cagd :=SelCreateBrick (1,_dgcg ,0,_dgcg /2,SelHit );_bada ,_beeeb :=_cdaa (nil ,_bcbc ,_cagd );if _beeeb !=nil {return nil ,_gg .Wrap (_beeeb ,_fggc ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_ddbg :=SelCreateBrick (_bcgae ,1,_bcgae /2,0,SelHit );_bfba ,_beeeb =_cdaa (nil ,_bada ,_ddbg );if _beeeb !=nil {return nil ,_gg .Wrap (_beeeb ,_fggc ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_beeeb =_gdfeb (_bada ,_bfba ,_cagd );_beeeb !=nil {return nil ,_gg .Wrap (_beeeb ,_fggc ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_beeeb =_gdfeb (_bfba ,_bada ,_ddbg );_beeeb !=nil {return nil ,_gg .Wrap (_beeeb ,_fggc ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");};};if _bfeb ,_abcb =_bfba .RemoveBorder (_ddb );_abcb !=nil {return nil ,_gg .Wrap (_abcb ,_fggc ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _cabf ==nil {return _bfeb ,nil ;};if _ ,_abcb =_bdaa (_cabf ,_bfeb );_abcb !=nil {return nil ,_abcb ;};return _cabf ,nil ;};func (_ccfd *Bitmap )setTwoBytes (_gdbe int ,_dgcad uint16 )error {if _gdbe +1> len (_ccfd .Data )-1{return _gg .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_gdbe );};_ccfd .Data [_gdbe ]=byte ((_dgcad &0xff00)>>8);_ccfd .Data [_gdbe +1]=byte (_dgcad &0xff);return nil ;};func (_egd *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _egd .removeBorderGeneral (left ,right ,top ,bot );};func (_aeac *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _beba ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _ageb :=_aeac .validateIntSlice ();_ageb !=nil {return nil ,_gg .Wrap (_ageb ,_beba ,"");};if _aeac .IntSlice .Size ()==0{return nil ,_gg .Error (_beba ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_aeac .SortByY ();var (_ddfe []*ClassedPoints ;_eded int ;);_dggb :=-1;var _abea *ClassedPoints ;for _dda :=0;_dda < len (_aeac .IntSlice );_dda ++{_eded =int (_aeac .YAtIndex (_dda ));if _eded !=_dggb {_abea =&ClassedPoints {Points :_aeac .Points };_dggb =_eded ;_ddfe =append (_ddfe ,_abea );};_abea .IntSlice =append (_abea .IntSlice ,_aeac .IntSlice [_dda ]);};for _ ,_eefg :=range _ddfe {_eefg .SortByX ();};return _ddfe ,nil ;};func _caedb (_dgdg *_fd .Stack )(_ceddd *fillSegment ,_egbdd error ){const _egee ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _dgdg ==nil {return nil ,_gg .Error (_egee ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _dgdg .Aux ==nil {return nil ,_gg .Error (_egee ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_caeea ,_aedcff :=_dgdg .Pop ();if !_aedcff {return nil ,nil ;};_bbdd ,_aedcff :=_caeea .(*fillSegment );if !_aedcff {return nil ,_gg .Error (_egee ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_ceddd =&fillSegment {_bbdd ._bfga ,_bbdd ._agcaa ,_bbdd ._gbeg +_bbdd ._gcfgb ,_bbdd ._gcfgb };_dgdg .Aux .Push (_bbdd );return _ceddd ,nil ;};func _c (_df ,_eb *Bitmap )(_cf error ){const _ed ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_cg :=_eb .RowStride ;_cfd :=_df .RowStride ;var (_a byte ;_ag uint16 ;_db ,_eg ,_de ,_ff ,_cc int ;);for _de =0;_de < _eb .Height ;_de ++{_db =_de *_cg ;_eg =2*_de *_cfd ;for _ff =0;_ff < _cg ;_ff ++{_a =_eb .Data [_db +_ff ];_ag =_agbb [_a ];_cc =_eg +_ff *2;if _df .RowStride !=_eb .RowStride *2&&(_ff +1)*2> _df .RowStride {_cf =_df .SetByte (_cc ,byte (_ag >>8));}else {_cf =_df .setTwoBytes (_cc ,_ag );};if _cf !=nil {return _gg .Wrap (_cf ,_ed ,"");};};for _ff =0;_ff < _cfd ;_ff ++{_cc =_eg +_cfd +_ff ;_a =_df .Data [_eg +_ff ];if _cf =_df .SetByte (_cc ,_a );_cf !=nil {return _gg .Wrapf (_cf ,_ed ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_eg +_ff ,_eg +_cfd +_ff );};};};return nil ;};func _cagab (_ccdb *Bitmap ,_bdee *Bitmap ,_decg int )(_ecdd error ){const _cgfa ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_dabfa :=_ccgb (_ccdb .Height ,_bdee .Height );_becc :=_ccgb (_ccdb .RowStride ,_bdee .RowStride );switch _decg {case 4:_ecdd =_fdbf (_ccdb ,_bdee ,_dabfa ,_becc );case 8:_ecdd =_bbef (_ccdb ,_bdee ,_dabfa ,_becc );default:return _gg .Errorf (_cgfa ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_decg );};if _ecdd !=nil {return _gg .Wrap (_ecdd ,_cgfa ,"");};return nil ;};func _fadb (_afffb *Bitmap ,_ecdab ,_aagg ,_aebd ,_abdf int ,_agbba RasterOperator ,_dgeb *Bitmap ,_gbce ,_abaa int )error {var (_bbeb bool ;_adae bool ;_bbab byte ;_gfebc int ;_bacd int ;_dgadg int ;_cefdg int ;_bbdg bool ;_egecg int ;_efedf int ;_acbba int ;_bdca bool ;_geff byte ;_eaba int ;_dfgda int ;_eegcb int ;_befba byte ;_baf int ;_cgebd int ;_cgga uint ;_dfed uint ;_eeff byte ;_fcbd shift ;_fbdc bool ;_adgd bool ;_cabff ,_gdfg int ;);if _gbce &7!=0{_cgebd =8-(_gbce &7);};if _ecdab &7!=0{_bacd =8-(_ecdab &7);};if _cgebd ==0&&_bacd ==0{_eeff =_abgbg [0];}else {if _bacd > _cgebd {_cgga =uint (_bacd -_cgebd );}else {_cgga =uint (8-(_cgebd -_bacd ));};_dfed =8-_cgga ;_eeff =_abgbg [_cgga ];};if (_ecdab &7)!=0{_bbeb =true ;_gfebc =8-(_ecdab &7);_bbab =_abgbg [_gfebc ];_dgadg =_afffb .RowStride *_aagg +(_ecdab >>3);_cefdg =_dgeb .RowStride *_abaa +(_gbce >>3);_baf =8-(_gbce &7);if _gfebc > _baf {_fcbd =_ccgbg ;if _aebd >=_cgebd {_fbdc =true ;};}else {_fcbd =_cefdc ;};};if _aebd < _gfebc {_adae =true ;_bbab &=_edfgc [8-_gfebc +_aebd ];};if !_adae {_egecg =(_aebd -_gfebc )>>3;if _egecg !=0{_bbdg =true ;_efedf =_afffb .RowStride *_aagg +((_ecdab +_bacd )>>3);_acbba =_dgeb .RowStride *_abaa +((_gbce +_bacd )>>3);};};_eaba =(_ecdab +_aebd )&7;if !(_adae ||_eaba ==0){_bdca =true ;_geff =_edfgc [_eaba ];_dfgda =_afffb .RowStride *_aagg +((_ecdab +_bacd )>>3)+_egecg ;_eegcb =_dgeb .RowStride *_abaa +((_gbce +_bacd )>>3)+_egecg ;if _eaba > int (_dfed ){_adgd =true ;};};switch _agbba {case PixSrc :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],_befba ,_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]=_befba ;};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],_befba ,_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixNotSrc :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],^_befba ,_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]=^_befba ;};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],^_befba ,_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixSrcOrDst :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],_befba |_afffb .Data [_dgadg ],_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]|=_befba ;};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],_befba |_afffb .Data [_dfgda ],_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixSrcAndDst :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],_befba &_afffb .Data [_dgadg ],_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]&=_befba ;};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],_befba &_afffb .Data [_dfgda ],_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixSrcXorDst :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],_befba ^_afffb .Data [_dgadg ],_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]^=_befba ;};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],_befba ^_afffb .Data [_dfgda ],_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixNotSrcOrDst :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],^_befba |_afffb .Data [_dgadg ],_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]|=^_befba ;};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],^_befba |_afffb .Data [_dfgda ],_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixNotSrcAndDst :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],^_befba &_afffb .Data [_dgadg ],_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]&=^_befba ;};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],^_befba &_afffb .Data [_dfgda ],_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixSrcOrNotDst :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],_befba |^_afffb .Data [_dgadg ],_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]=_befba |^_afffb .Data [_efedf +_gdfg ];};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],_befba |^_afffb .Data [_dfgda ],_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixSrcAndNotDst :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],_befba &^_afffb .Data [_dgadg ],_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]=_befba &^_afffb .Data [_efedf +_gdfg ];};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],_befba &^_afffb .Data [_dfgda ],_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixNotPixSrcOrDst :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],^(_befba |_afffb .Data [_dgadg ]),_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]=^(_befba |_afffb .Data [_efedf +_gdfg ]);};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],^(_befba |_afffb .Data [_dfgda ]),_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixNotPixSrcAndDst :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],^(_befba &_afffb .Data [_dgadg ]),_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]=^(_befba &_afffb .Data [_efedf +_gdfg ]);};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],^(_befba &_afffb .Data [_dfgda ]),_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};case PixNotPixSrcXorDst :if _bbeb {for _cabff =0;_cabff < _abdf ;_cabff ++{if _fcbd ==_ccgbg {_befba =_dgeb .Data [_cefdg ]<<_cgga ;if _fbdc {_befba =_fafeec (_befba ,_dgeb .Data [_cefdg +1]>>_dfed ,_eeff );};}else {_befba =_dgeb .Data [_cefdg ]>>_dfed ;};_afffb .Data [_dgadg ]=_fafeec (_afffb .Data [_dgadg ],^(_befba ^_afffb .Data [_dgadg ]),_bbab );_dgadg +=_afffb .RowStride ;_cefdg +=_dgeb .RowStride ;};};if _bbdg {for _cabff =0;_cabff < _abdf ;_cabff ++{for _gdfg =0;_gdfg < _egecg ;_gdfg ++{_befba =_fafeec (_dgeb .Data [_acbba +_gdfg ]<<_cgga ,_dgeb .Data [_acbba +_gdfg +1]>>_dfed ,_eeff );_afffb .Data [_efedf +_gdfg ]=^(_befba ^_afffb .Data [_efedf +_gdfg ]);};_efedf +=_afffb .RowStride ;_acbba +=_dgeb .RowStride ;};};if _bdca {for _cabff =0;_cabff < _abdf ;_cabff ++{_befba =_dgeb .Data [_eegcb ]<<_cgga ;if _adgd {_befba =_fafeec (_befba ,_dgeb .Data [_eegcb +1]>>_dfed ,_eeff );};_afffb .Data [_dfgda ]=_fafeec (_afffb .Data [_dfgda ],^(_befba ^_afffb .Data [_dfgda ]),_geff );_dfgda +=_afffb .RowStride ;_eegcb +=_dgeb .RowStride ;};};default:_ggc .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_agbba );return _gg .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func _aebc (_bgae *Bitmap ,_adgc ,_bdbd int ,_gace ,_cbad int ,_fede RasterOperator ,_dgfa *Bitmap ,_gbdb ,_ebdca int )error {var _gbe ,_cdab ,_fgag ,_gffgd int ;if _adgc < 0{_gbdb -=_adgc ;_gace +=_adgc ;_adgc =0;};if _gbdb < 0{_adgc -=_gbdb ;_gace +=_gbdb ;_gbdb =0;};_gbe =_adgc +_gace -_bgae .Width ;if _gbe > 0{_gace -=_gbe ;};_cdab =_gbdb +_gace -_dgfa .Width ;if _cdab > 0{_gace -=_cdab ;};if _bdbd < 0{_ebdca -=_bdbd ;_cbad +=_bdbd ;_bdbd =0;};if _ebdca < 0{_bdbd -=_ebdca ;_cbad +=_ebdca ;_ebdca =0;};_fgag =_bdbd +_cbad -_bgae .Height ;if _fgag > 0{_cbad -=_fgag ;};_gffgd =_ebdca +_cbad -_dgfa .Height ;if _gffgd > 0{_cbad -=_gffgd ;};if _gace <=0||_cbad <=0{return nil ;};var _fddb error ;switch {case _adgc &7==0&&_gbdb &7==0:_fddb =_eebfd (_bgae ,_adgc ,_bdbd ,_gace ,_cbad ,_fede ,_dgfa ,_gbdb ,_ebdca );case _adgc &7==_gbdb &7:_fddb =_cbgg (_bgae ,_adgc ,_bdbd ,_gace ,_cbad ,_fede ,_dgfa ,_gbdb ,_ebdca );default:_fddb =_fadb (_bgae ,_adgc ,_bdbd ,_gace ,_cbad ,_fede ,_dgfa ,_gbdb ,_ebdca );};if _fddb !=nil {return _gg .Wrap (_fddb ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_efff float64 ,_fbcb error ){const _gdcd ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";if bm1 ==nil ||bm2 ==nil {return _efff ,_gg .Error (_gdcd ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _efff ,_gg .Error (_gdcd ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if area1 ==0||area2 ==0{return _efff ,_gg .Error (_gdcd ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_gdca ,_gbdg :=bm1 .Width ,bm1 .Height ;_gcce ,_edfa :=bm2 .Width ,bm2 .Height ;if _cbba (_gdca -_gcce )> maxDiffW {return 0,nil ;};if _cbba (_gbdg -_edfa )> maxDiffH {return 0,nil ;};var _bacg ,_dbb int ;if delX >=0{_bacg =int (delX +0.5);}else {_bacg =int (delX -0.5);};if delY >=0{_dbb =int (delY +0.5);}else {_dbb =int (delY -0.5);};_gbff :=bm1 .createTemplate ();if _fbcb =_gbff .RasterOperation (_bacg ,_dbb ,_gcce ,_edfa ,PixSrc ,bm2 ,0,0);_fbcb !=nil {return _efff ,_gg .Wrap (_fbcb ,_gdcd ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _fbcb =_gbff .RasterOperation (0,0,_gdca ,_gbdg ,PixSrcAndDst ,bm1 ,0,0);_fbcb !=nil {return _efff ,_gg .Wrap (_fbcb ,_gdcd ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_gdfe :=_gbff .countPixels ();_efff =float64 (_gdfe )*float64 (_gdfe )/(float64 (area1 )*float64 (area2 ));return _efff ,nil ;};func (_abcc *Bitmap )Copy ()*Bitmap {_gdbd :=make ([]byte ,len (_abcc .Data ));copy (_gdbd ,_abcc .Data );return &Bitmap {Width :_abcc .Width ,Height :_abcc .Height ,RowStride :_abcc .RowStride ,Data :_gdbd ,Color :_abcc .Color ,Text :_abcc .Text ,BitmapNumber :_abcc .BitmapNumber ,Special :_abcc .Special };};func (_ggcg *Bitmap )centroid (_cege ,_fgbc []int )(Point ,error ){_efcd :=Point {};_ggcg .setPadBits (0);if len (_cege )==0{_cege =_dabfd ();};if len (_fgbc )==0{_fgbc =_gcfg ();};var _abaf ,_aaea ,_bdgc ,_fgcg ,_fcabc ,_eac int ;var _dfdb byte ;for _fcabc =0;_fcabc < _ggcg .Height ;_fcabc ++{_bcgba :=_ggcg .RowStride *_fcabc ;_fgcg =0;for _eac =0;_eac < _ggcg .RowStride ;_eac ++{_dfdb =_ggcg .Data [_bcgba +_eac ];if _dfdb !=0{_fgcg +=_fgbc [_dfdb ];_abaf +=_cege [_dfdb ]+_eac *8*_fgbc [_dfdb ];};};_bdgc +=_fgcg ;_aaea +=_fgcg *_fcabc ;};if _bdgc !=0{_efcd .X =float32 (_abaf )/float32 (_bdgc );_efcd .Y =float32 (_aaea )/float32 (_bdgc );};return _efcd ,nil ;};func (_bcba *Bitmap )connComponentsBitmapsBB (_egb *Bitmaps ,_cbcf int )(_fdc *Boxes ,_abca error ){const _gagg ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _cbcf !=4&&_cbcf !=8{return nil ,_gg .Error (_gagg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _egb ==nil {return nil ,_gg .Error (_gagg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_egb .Values )> 0{return nil ,_gg .Error (_gagg ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _bcba .Zero (){return &Boxes {},nil ;};var (_befc ,_aaca ,_gega ,_fafe *Bitmap ;);_bcba .setPadBits (0);if _befc ,_abca =_bdaa (nil ,_bcba );_abca !=nil {return nil ,_gg .Wrap (_abca ,_gagg ,"\u0062\u006d\u0031");};if _aaca ,_abca =_bdaa (nil ,_bcba );_abca !=nil {return nil ,_gg .Wrap (_abca ,_gagg ,"\u0062\u006d\u0032");};_ebb :=&_fd .Stack {};_ebb .Aux =&_fd .Stack {};_fdc =&Boxes {};var (_gddc ,_gdcff int ;_bdfg _fde .Point ;_ccgcg bool ;_fbcc *_fde .Rectangle ;);for {if _bdfg ,_ccgcg ,_abca =_befc .nextOnPixel (_gddc ,_gdcff );_abca !=nil {return nil ,_gg .Wrap (_abca ,_gagg ,"");};if !_ccgcg {break ;};if _fbcc ,_abca =_gecac (_befc ,_ebb ,_bdfg .X ,_bdfg .Y ,_cbcf );_abca !=nil {return nil ,_gg .Wrap (_abca ,_gagg ,"");};if _abca =_fdc .Add (_fbcc );_abca !=nil {return nil ,_gg .Wrap (_abca ,_gagg ,"");};if _gega ,_abca =_befc .clipRectangle (_fbcc ,nil );_abca !=nil {return nil ,_gg .Wrap (_abca ,_gagg ,"\u0062\u006d\u0033");};if _fafe ,_abca =_aaca .clipRectangle (_fbcc ,nil );_abca !=nil {return nil ,_gg .Wrap (_abca ,_gagg ,"\u0062\u006d\u0034");};if _ ,_abca =_fcd (_gega ,_gega ,_fafe );_abca !=nil {return nil ,_gg .Wrap (_abca ,_gagg ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _abca =_aaca .RasterOperation (_fbcc .Min .X ,_fbcc .Min .Y ,_fbcc .Dx (),_fbcc .Dy (),PixSrcXorDst ,_gega ,0,0);_abca !=nil {return nil ,_gg .Wrap (_abca ,_gagg ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_egb .AddBitmap (_gega );_gddc =_bdfg .X ;_gdcff =_bdfg .Y ;};_egb .Boxes =*_fdc ;return _fdc ,nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_fbc *Bitmap )ClipRectangle (box *_fde .Rectangle )(_geg *Bitmap ,_gbb *_fde .Rectangle ,_fbbe error ){const _bgb ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_gg .Error (_bgb ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_gbfc ,_affa :=_fbc .Width ,_fbc .Height ;_aedc :=_fde .Rect (0,0,_gbfc ,_affa );if !box .Overlaps (_aedc ){return nil ,nil ,_gg .Error (_bgb ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_aea :=box .Intersect (_aedc );_fag ,_cbc :=_aea .Min .X ,_aea .Min .Y ;_ggg ,_beb :=_aea .Dx (),_aea .Dy ();_geg =New (_ggg ,_beb );_geg .Text =_fbc .Text ;if _fbbe =_geg .RasterOperation (0,0,_ggg ,_beb ,PixSrc ,_fbc ,_fag ,_cbc );_fbbe !=nil {return nil ,nil ,_gg .Wrap (_fbbe ,_bgb ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_gbb =&_aea ;return _geg ,_gbb ,nil ;};func TstGetScaledSymbol (t *_gb .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_fdbg ,_cfcgc :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_e .NoError (t ,_cfcgc );return _fdbg ;};func TstWriteSymbols (t *_gb .T ,bms *Bitmaps ,src *Bitmap ){for _cbbb :=0;_cbbb < bms .Size ();_cbbb ++{_fdad :=bms .Values [_cbbb ];_dgee :=bms .Boxes [_cbbb ];_bdgdc :=src .RasterOperation (_dgee .Min .X ,_dgee .Min .Y ,_fdad .Width ,_fdad .Height ,PixSrc ,_fdad ,0,0);_e .NoError (t ,_bdgdc );};};func (_edac *ClassedPoints )YAtIndex (i int )float32 {return (*_edac .Points )[_edac .IntSlice [i ]].Y };func _dfd (_ddda ,_cdc *Bitmap ,_feba CombinationOperator )*Bitmap {_bbed :=New (_ddda .Width ,_ddda .Height );for _ecda :=0;_ecda < len (_bbed .Data );_ecda ++{_bbed .Data [_ecda ]=_gca (_ddda .Data [_ecda ],_cdc .Data [_ecda ],_feba );};return _bbed ;};func _gcfg ()[]int {_ecae :=make ([]int ,256);for _dfcg :=0;_dfcg <=0xff;_dfcg ++{_caga :=byte (_dfcg );_ecae [_caga ]=int (_caga &0x1)+(int (_caga >>1)&0x1)+(int (_caga >>2)&0x1)+(int (_caga >>3)&0x1)+(int (_caga >>4)&0x1)+(int (_caga >>5)&0x1)+(int (_caga >>6)&0x1)+(int (_caga >>7)&0x1);};return _ecae ;};type MorphOperation int ;func New (width ,height int )*Bitmap {_fee :=_efb (width ,height );_fee .Data =make ([]byte ,height *_fee .RowStride );return _fee ;};func (_dcad CombinationOperator )String ()string {var _bbcga string ;switch _dcad {case CmbOpOr :_bbcga ="\u004f\u0052";case CmbOpAnd :_bbcga ="\u0041\u004e\u0044";case CmbOpXor :_bbcga ="\u0058\u004f\u0052";case CmbOpXNor :_bbcga ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_bbcga ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_bbcga ="\u004e\u004f\u0054";};return _bbcga ;};func (_dffc Points )GetIntY (i int )(int ,error ){if i >=len (_dffc ){return 0,_gg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_dffc [i ].Y ),nil ;};func _bgba (_gfcb ,_afgg *Bitmap ,_gfeb *Selection )(*Bitmap ,error ){const _fcbba ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _egecf ,_bfgb int ;if _afgg ==nil {return nil ,_gg .Error (_fcbba ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _gfeb ==nil {return nil ,_gg .Error (_fcbba ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_egecf =_gfeb .Width ;_bfgb =_gfeb .Height ;if _egecf ==0||_bfgb ==0{return nil ,_gg .Error (_fcbba ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _gfcb ==nil {return _afgg .createTemplate (),nil ;};if _deedd :=_gfcb .resizeImageData (_afgg );_deedd !=nil {return nil ,_deedd ;};return _gfcb ,nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func TstPSymbol (t *_gb .T )*Bitmap {t .Helper ();_bcde :=New (5,8);_e .NoError (t ,_bcde .SetPixel (0,0,1));_e .NoError (t ,_bcde .SetPixel (1,0,1));_e .NoError (t ,_bcde .SetPixel (2,0,1));_e .NoError (t ,_bcde .SetPixel (3,0,1));_e .NoError (t ,_bcde .SetPixel (4,1,1));_e .NoError (t ,_bcde .SetPixel (0,1,1));_e .NoError (t ,_bcde .SetPixel (4,2,1));_e .NoError (t ,_bcde .SetPixel (0,2,1));_e .NoError (t ,_bcde .SetPixel (4,3,1));_e .NoError (t ,_bcde .SetPixel (0,3,1));_e .NoError (t ,_bcde .SetPixel (0,4,1));_e .NoError (t ,_bcde .SetPixel (1,4,1));_e .NoError (t ,_bcde .SetPixel (2,4,1));_e .NoError (t ,_bcde .SetPixel (3,4,1));_e .NoError (t ,_bcde .SetPixel (0,5,1));_e .NoError (t ,_bcde .SetPixel (0,6,1));_e .NoError (t ,_bcde .SetPixel (0,7,1));return _bcde ;};func TstWordBitmapWithSpaces (t *_gb .T ,scale ...int )*Bitmap {_aeab :=1;if len (scale )> 0{_aeab =scale [0];};_cedf :=3;_gefb :=9+7+15+2*_cedf +2*_cedf ;_accgf :=5+_cedf +5+2*_cedf ;_dcdd :=New (_gefb *_aeab ,_accgf *_aeab );_faaf :=&Bitmaps {};var _cefcc *int ;_cedf *=_aeab ;_bfec :=_cedf ;_cefcc =&_bfec ;_gfef :=_cedf ;_egge :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,1*_aeab );_egge =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,_cedf );_egge =TstISymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,1*_aeab );_egge =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,_cedf );_egge =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,1*_aeab );_egge =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,1*_aeab );_egge =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,0);*_cefcc =_cedf ;_gfef =5*_aeab +_cedf ;_egge =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,1*_aeab );_egge =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,_cedf );_egge =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,1*_aeab );_egge =TstESymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,1*_aeab );_egge =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,1*_aeab );_egge =TstESymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,1*_aeab );_egge =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_faaf ,_egge ,_cefcc ,_gfef ,0);TstWriteSymbols (t ,_faaf ,_dcdd );return _dcdd ;};func TstOSymbol (t *_gb .T ,scale ...int )*Bitmap {_adfg ,_debda :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_e .NoError (t ,_debda );return TstGetScaledSymbol (t ,_adfg ,scale ...);};func (_dae *Bitmap )SetByte (index int ,v byte )error {if index > len (_dae .Data )-1||index < 0{return _gg .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );};_dae .Data [index ]=v ;return nil ;};func (_deag *Bitmap )SetDefaultPixel (){for _cadc :=range _deag .Data {_deag .Data [_cadc ]=byte (0xff);};};func Extract (roi _fde .Rectangle ,src *Bitmap )(*Bitmap ,error ){_fdbe :=New (roi .Dx (),roi .Dy ());_fgdge :=roi .Min .X &0x07;_dabf :=8-_fgdge ;_cbdd :=uint (8-_fdbe .Width &0x07);_dfab :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_acaa :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_ffbe :=_fdbe .RowStride ==_acaa +1-_dfab ;var _egfa int ;for _agaf :=roi .Min .Y ;_agaf < roi .Max .Y ;_agaf ++{_eeede :=_dfab ;_dgfb :=_egfa ;switch {case _dfab ==_acaa :_bgac ,_eafd :=src .GetByte (_eeede );if _eafd !=nil {return nil ,_eafd ;};_bgac <<=uint (_fgdge );_eafd =_fdbe .SetByte (_dgfb ,_befb (_cbdd ,_bgac ));if _eafd !=nil {return nil ,_eafd ;};case _fgdge ==0:for _eabb :=_dfab ;_eabb <=_acaa ;_eabb ++{_efee ,_addb :=src .GetByte (_eeede );if _addb !=nil {return nil ,_addb ;};_eeede ++;if _eabb ==_acaa &&_ffbe {_efee =_befb (_cbdd ,_efee );};_addb =_fdbe .SetByte (_dgfb ,_efee );if _addb !=nil {return nil ,_addb ;};_dgfb ++;};default:_fagd :=_eceb (src ,_fdbe ,uint (_fgdge ),uint (_dabf ),_cbdd ,_dfab ,_acaa ,_ffbe ,_eeede ,_dgfb );if _fagd !=nil {return nil ,_fagd ;};};_dfab +=src .RowStride ;_acaa +=src .RowStride ;_egfa +=_fdbe .RowStride ;};return _fdbe ,nil ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_efca :=_gafee (h ,w ,"");_efca .setOrigin (cy ,cx );var _fgde ,_bbag int ;for _fgde =0;_fgde < h ;_fgde ++{for _bbag =0;_bbag < w ;_bbag ++{_efca .Data [_fgde ][_bbag ]=tp ;};};return _efca ;};func (_ceagf Points )XSorter ()func (_cgbaf ,_ffdcg int )bool {return func (_fcgg ,_geaeg int )bool {return _ceagf [_fcgg ].X < _ceagf [_geaeg ].X };};func (_fed *Bitmap )GetBitOffset (x int )int {return x &0x07};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_dgdc *Bitmap )setEightPartlyBytes (_gcdd ,_dcba int ,_fdg uint64 )(_eaee error ){var (_bdd byte ;_cca int ;);const _cgdb ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _efae :=1;_efae <=_dcba ;_efae ++{_cca =64-_efae *8;_bdd =byte (_fdg >>uint (_cca )&0xff);_ggc .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_bdd ,_gcdd ,_gcdd +_efae -1,_dcba ,_cca );if _eaee =_dgdc .SetByte (_gcdd +_efae -1,_bdd );_eaee !=nil {return _gg .Wrap (_eaee ,_cgdb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_abff :=_dgdc .RowStride *8-_dgdc .Width ;if _abff ==0{return nil ;};_cca -=8;_bdd =byte (_fdg >>uint (_cca )&0xff)<<uint (_abff );if _eaee =_dgdc .SetByte (_gcdd +_dcba ,_bdd );_eaee !=nil {return _gg .Wrap (_eaee ,_cgdb ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func _gecac (_cfcbd *Bitmap ,_abgc *_fd .Stack ,_eefdf ,_aacgf ,_gad int )(_cffg *_fde .Rectangle ,_cdcfd error ){const _eddgc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _cfcbd ==nil {return nil ,_gg .Error (_eddgc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _abgc ==nil {return nil ,_gg .Error (_eddgc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _gad {case 4:if _cffg ,_cdcfd =_ddcg (_cfcbd ,_abgc ,_eefdf ,_aacgf );_cdcfd !=nil {return nil ,_gg .Wrap (_cdcfd ,_eddgc ,"");};return _cffg ,nil ;case 8:if _cffg ,_cdcfd =_cdbd (_cfcbd ,_abgc ,_eefdf ,_aacgf );_cdcfd !=nil {return nil ,_gg .Wrap (_cdcfd ,_eddgc ,"");};return _cffg ,nil ;default:return nil ,_gg .Errorf (_eddgc ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_gad );};};func (_cgdd *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _afbae ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_fdbbf ,_ccggb :=_cgdd .selectByIndexes (idx );if _ccggb !=nil {return nil ,_gg .Wrap (_ccggb ,_afbae ,"");};return _fdbbf ,nil ;};func (_ddbf *ClassedPoints )xSortFunction ()func (_gcae int ,_aedcf int )bool {return func (_cbbdf ,_dddg int )bool {return _ddbf .XAtIndex (_cbbdf )< _ddbf .XAtIndex (_dddg )};};func MakePixelCentroidTab8 ()[]int {return _dabfd ()};func (_edgb Points )GetGeometry (i int )(_gcfc ,_afeb float32 ,_fefc error ){if i > len (_edgb )-1{return 0,0,_gg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_dbdd :=_edgb [i ];return _dbdd .X ,_dbdd .Y ,nil ;};func (_cba *ClassedPoints )Less (i ,j int )bool {return _cba ._ebfgb (i ,j )};func (_feaab *Bitmap )nextOnPixel (_caaf ,_dgca int )(_badf _fde .Point ,_aec bool ,_bbcc error ){const _gfba ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_badf ,_aec ,_bbcc =_feaab .nextOnPixelLow (_feaab .Width ,_feaab .Height ,_feaab .RowStride ,_caaf ,_dgca );if _bbcc !=nil {return _badf ,false ,_gg .Wrap (_bbcc ,_gfba ,"");};return _badf ,_aec ,nil ;};func _gafee (_aafb ,_caff int ,_cagddb string )*Selection {_cgde :=&Selection {Height :_aafb ,Width :_caff ,Name :_cagddb };_cgde .Data =make ([][]SelectionValue ,_aafb );for _cfeb :=0;_cfeb < _aafb ;_cfeb ++{_cgde .Data [_cfeb ]=make ([]SelectionValue ,_caff );};return _cgde ;};func _bbef (_bfdg ,_aegd *Bitmap ,_fedf ,_ggea int )(_gefgg error ){const _daac ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_edfe ,_ebga ,_ebgg ,_aaeag int ;_ededd ,_ecfe ,_ebcd ,_fbed ,_gbbb ,_afee ,_gcbbg ,_eebb byte ;);for _edfe =0;_edfe < _fedf ;_edfe ++{_ebgg =_edfe *_bfdg .RowStride ;_aaeag =_edfe *_aegd .RowStride ;for _ebga =0;_ebga < _ggea ;_ebga ++{if _ededd ,_gefgg =_bfdg .GetByte (_ebgg +_ebga );_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _ecfe ,_gefgg =_aegd .GetByte (_aaeag +_ebga );_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _edfe > 0{if _ebcd ,_gefgg =_bfdg .GetByte (_ebgg -_bfdg .RowStride +_ebga );_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_ededd |=_ebcd |(_ebcd <<1)|(_ebcd >>1);if _ebga > 0{if _eebb ,_gefgg =_bfdg .GetByte (_ebgg -_bfdg .RowStride +_ebga -1);_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_ededd |=_eebb <<7;};if _ebga < _ggea -1{if _eebb ,_gefgg =_bfdg .GetByte (_ebgg -_bfdg .RowStride +_ebga +1);_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_ededd |=_eebb >>7;};};if _ebga > 0{if _fbed ,_gefgg =_bfdg .GetByte (_ebgg +_ebga -1);_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u006a\u0020\u003e \u0030");};_ededd |=_fbed <<7;};_ededd &=_ecfe ;if _ededd ==0||^_ededd ==0{if _gefgg =_bfdg .SetByte (_ebgg +_ebga ,_ededd );_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_gcbbg =_ededd ;_ededd =(_ededd |(_ededd >>1)|(_ededd <<1))&_ecfe ;if (_ededd ^_gcbbg )==0{if _gefgg =_bfdg .SetByte (_ebgg +_ebga ,_ededd );_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _edfe =_fedf -1;_edfe >=0;_edfe --{_ebgg =_edfe *_bfdg .RowStride ;_aaeag =_edfe *_aegd .RowStride ;for _ebga =_ggea -1;_ebga >=0;_ebga --{if _ededd ,_gefgg =_bfdg .GetByte (_ebgg +_ebga );_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _ecfe ,_gefgg =_aegd .GetByte (_aaeag +_ebga );_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _edfe < _fedf -1{if _gbbb ,_gefgg =_bfdg .GetByte (_ebgg +_bfdg .RowStride +_ebga );_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_ededd |=_gbbb |(_gbbb <<1)|_gbbb >>1;if _ebga > 0{if _eebb ,_gefgg =_bfdg .GetByte (_ebgg +_bfdg .RowStride +_ebga -1);_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_ededd |=_eebb <<7;};if _ebga < _ggea -1{if _eebb ,_gefgg =_bfdg .GetByte (_ebgg +_bfdg .RowStride +_ebga +1);_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");};_ededd |=_eebb >>7;};};if _ebga < _ggea -1{if _afee ,_gefgg =_bfdg .GetByte (_ebgg +_ebga +1);_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");};_ededd |=_afee >>7;};_ededd &=_ecfe ;if _ededd ==0||(^_ededd )==0{if _gefgg =_bfdg .SetByte (_ebgg +_ebga ,_ededd );_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_gcbbg =_ededd ;_ededd =(_ededd |(_ededd >>1)|(_ededd <<1))&_ecfe ;if (_ededd ^_gcbbg )==0{if _gefgg =_bfdg .SetByte (_ebgg +_ebga ,_ededd );_gefgg !=nil {return _gg .Wrap (_gefgg ,_daac ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");};break ;};};};};return nil ;};func TstFrameBitmapData ()[]byte {return _gfgc .Data };func _afea (_bag ,_fbeab *Bitmap ,_dbc ,_eade int )(*Bitmap ,error ){const _ccfc ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _fbeab ==nil {return nil ,_gg .Error (_ccfc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dbc < 1||_eade < 1{return nil ,_gg .Error (_ccfc ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _dbc ==1&&_eade ==1{return _fbeab .Copy (),nil ;};if _dbc ==1||_eade ==1{_dgdd :=SelCreateBrick (_eade ,_dbc ,_eade /2,_dbc /2,SelHit );var _gbadb error ;_bag ,_gbadb =_eccfa (_bag ,_fbeab ,_dgdd );if _gbadb !=nil {return nil ,_gg .Wrap (_gbadb ,_ccfc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _bag ,nil ;};_egcdd :=SelCreateBrick (1,_dbc ,0,_dbc /2,SelHit );_accdg :=SelCreateBrick (_eade ,1,_eade /2,0,SelHit );_dfgd ,_gbddd :=_cdaa (nil ,_fbeab ,_egcdd );if _gbddd !=nil {return nil ,_gg .Wrap (_gbddd ,_ccfc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _bag ,_gbddd =_cdaa (_bag ,_dfgd ,_accdg );_gbddd !=nil {return nil ,_gg .Wrap (_gbddd ,_ccfc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_gbddd =_gdfeb (_dfgd ,_bag ,_egcdd );_gbddd !=nil {return nil ,_gg .Wrap (_gbddd ,_ccfc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};if _ ,_gbddd =_gdfeb (_bag ,_dfgd ,_accdg );_gbddd !=nil {return nil ,_gg .Wrap (_gbddd ,_ccfc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bag ,nil ;};func (_bdga Points )GetIntX (i int )(int ,error ){if i >=len (_bdga ){return 0,_gg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_bdga [i ].X ),nil ;};func (_dab *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _dab .addBorderGeneral (left ,right ,top ,bot ,val );};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _gca (oldByte ,newByte ,op );};func _bdg (_age ,_ecg *Bitmap ,_ege int ,_bdad []byte ,_ccg int )(_gddf error ){const _bfd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_dca ,_adf ,_ffca ,_bbd ,_eeab ,_gdc ,_efg ,_dgf int ;_acf ,_eead ,_ebg ,_adca uint32 ;_ggda ,_fcf byte ;_def uint16 ;);_cgb :=make ([]byte ,4);_dcc :=make ([]byte ,4);for _ffca =0;_ffca < _age .Height -1;_ffca ,_bbd =_ffca +2,_bbd +1{_dca =_ffca *_age .RowStride ;_adf =_bbd *_ecg .RowStride ;for _eeab ,_gdc =0,0;_eeab < _ccg ;_eeab ,_gdc =_eeab +4,_gdc +1{for _efg =0;_efg < 4;_efg ++{_dgf =_dca +_eeab +_efg ;if _dgf <=len (_age .Data )-1&&_dgf < _dca +_age .RowStride {_cgb [_efg ]=_age .Data [_dgf ];}else {_cgb [_efg ]=0x00;};_dgf =_dca +_age .RowStride +_eeab +_efg ;if _dgf <=len (_age .Data )-1&&_dgf < _dca +(2*_age .RowStride ){_dcc [_efg ]=_age .Data [_dgf ];}else {_dcc [_efg ]=0x00;};};_acf =_ge .BigEndian .Uint32 (_cgb );_eead =_ge .BigEndian .Uint32 (_dcc );_ebg =_acf &_eead ;_ebg |=_ebg <<1;_adca =_acf |_eead ;_adca &=_adca <<1;_eead =_ebg &_adca ;_eead &=0xaaaaaaaa;_acf =_eead |(_eead <<7);_ggda =byte (_acf >>24);_fcf =byte ((_acf >>8)&0xff);_dgf =_adf +_gdc ;if _dgf +1==len (_ecg .Data )-1||_dgf +1>=_adf +_ecg .RowStride {if _gddf =_ecg .SetByte (_dgf ,_bdad [_ggda ]);_gddf !=nil {return _gg .Wrapf (_gddf ,_bfd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dgf );};}else {_def =(uint16 (_bdad [_ggda ])<<8)|uint16 (_bdad [_fcf ]);if _gddf =_ecg .setTwoBytes (_dgf ,_def );_gddf !=nil {return _gg .Wrapf (_gddf ,_bfd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dgf );};_gdc ++;};};};return nil ;};func _face ()(_cce []byte ){_cce =make ([]byte ,256);for _ceca :=0;_ceca < 256;_ceca ++{_fae :=byte (_ceca );_cce [_fae ]=(_fae &0x01)|((_fae &0x04)>>1)|((_fae &0x10)>>2)|((_fae &0x40)>>3)|((_fae &0x02)<<3)|((_fae &0x08)<<2)|((_fae &0x20)<<1)|(_fae &0x80);};return _cce ;};func (_cbf *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_dad bool ,_bbc error ){const _gbg ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_gcfg ();};_cbfb :=_cbf .Width >>3;_gcb :=_cbf .Width &7;_gfcf :=byte (0xff<<uint (8-_gcb ));var (_gdfd ,_afd ,_cbb ,_gba int ;_gae byte ;);for _gdfd =0;_gdfd < _cbf .Height ;_gdfd ++{_cbb =_cbf .RowStride *_gdfd ;for _afd =0;_afd < _cbfb ;_afd ++{_gae ,_bbc =_cbf .GetByte (_cbb +_afd );if _bbc !=nil {return false ,_gg .Wrap (_bbc ,_gbg ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_gba +=tab8 [_gae ];};if _gcb !=0{_gae ,_bbc =_cbf .GetByte (_cbb +_afd );if _bbc !=nil {return false ,_gg .Wrap (_bbc ,_gbg ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_gae &=_gfcf ;_gba +=tab8 [_gae ];};if _gba > thresh {return true ,nil ;};};return _dad ,nil ;};var (_edfgc =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_abgbg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func TstWSymbol (t *_gb .T ,scale ...int )*Bitmap {_gddcf ,_acfae :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_e .NoError (t ,_acfae );return TstGetScaledSymbol (t ,_gddcf ,scale ...);};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_fde .Rectangle ;};func _gdb (_bg ,_bd *Bitmap )(_gf error ){const _gfe ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_ecc :=_bd .RowStride ;_fa :=_bg .RowStride ;var _ecd ,_ac ,_ebc ,_ab ,_ef int ;for _ebc =0;_ebc < _bd .Height ;_ebc ++{_ecd =_ebc *_ecc ;_ac =8*_ebc *_fa ;for _ab =0;_ab < _ecc ;_ab ++{if _gf =_bg .setEightBytes (_ac +_ab *8,_cabe [_bd .Data [_ecd +_ab ]]);_gf !=nil {return _gg .Wrap (_gf ,_gfe ,"");};};for _ef =1;_ef < 8;_ef ++{for _ab =0;_ab < _fa ;_ab ++{if _gf =_bg .SetByte (_ac +_ef *_fa +_ab ,_bg .Data [_ac +_ab ]);_gf !=nil {return _gg .Wrap (_gf ,_gfe ,"");};};};};return nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_agfc *Bitmaps )CountPixels ()*_fd .NumSlice {_bggg :=&_fd .NumSlice {};for _ ,_fgef :=range _agfc .Values {_bggg .AddInt (_fgef .CountPixels ());};return _bggg ;};func (_bfcf *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _ccef ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _bfcf ==nil {return nil ,_gg .Error (_ccef ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_bfcf .Values )-1{return nil ,_gg .Errorf (_ccef ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bfcf .Values [i ],nil ;};func _cbgg (_acga *Bitmap ,_ecb ,_fecba ,_egaac ,_afgd int ,_abda RasterOperator ,_efeb *Bitmap ,_gbgf ,_gcad int )error {var (_gdga bool ;_ffcbc bool ;_fdbb int ;_baeb int ;_abbe int ;_defb bool ;_adcea byte ;_adcaf int ;_gbbg int ;_gcdg int ;_cedd ,_afc int ;);_abad :=8-(_ecb &7);_acac :=_abgbg [_abad ];_aggad :=_acga .RowStride *_fecba +(_ecb >>3);_cbdef :=_efeb .RowStride *_gcad +(_gbgf >>3);if _egaac < _abad {_gdga =true ;_acac &=_edfgc [8-_abad +_egaac ];};if !_gdga {_fdbb =(_egaac -_abad )>>3;if _fdbb > 0{_ffcbc =true ;_baeb =_aggad +1;_abbe =_cbdef +1;};};_adcaf =(_ecb +_egaac )&7;if !(_gdga ||_adcaf ==0){_defb =true ;_adcea =_edfgc [_adcaf ];_gbbg =_aggad +1+_fdbb ;_gcdg =_cbdef +1+_fdbb ;};switch _abda {case PixSrc :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],_efeb .Data [_cbdef ],_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]=_efeb .Data [_abbe +_afc ];};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],_efeb .Data [_gcdg ],_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixNotSrc :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],^_efeb .Data [_cbdef ],_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]=^_efeb .Data [_abbe +_afc ];};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],^_efeb .Data [_gcdg ],_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixSrcOrDst :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],_efeb .Data [_cbdef ]|_acga .Data [_aggad ],_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]|=_efeb .Data [_abbe +_afc ];};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],_efeb .Data [_gcdg ]|_acga .Data [_gbbg ],_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixSrcAndDst :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],_efeb .Data [_cbdef ]&_acga .Data [_aggad ],_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]&=_efeb .Data [_abbe +_afc ];};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],_efeb .Data [_gcdg ]&_acga .Data [_gbbg ],_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixSrcXorDst :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],_efeb .Data [_cbdef ]^_acga .Data [_aggad ],_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]^=_efeb .Data [_abbe +_afc ];};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],_efeb .Data [_gcdg ]^_acga .Data [_gbbg ],_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixNotSrcOrDst :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],^(_efeb .Data [_cbdef ])|_acga .Data [_aggad ],_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]|=^(_efeb .Data [_abbe +_afc ]);};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],^(_efeb .Data [_gcdg ])|_acga .Data [_gbbg ],_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixNotSrcAndDst :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],^(_efeb .Data [_cbdef ])&_acga .Data [_aggad ],_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]&=^_efeb .Data [_abbe +_afc ];};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],^(_efeb .Data [_gcdg ])&_acga .Data [_gbbg ],_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixSrcOrNotDst :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],_efeb .Data [_cbdef ]|^(_acga .Data [_aggad ]),_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]=_efeb .Data [_abbe +_afc ]|^(_acga .Data [_baeb +_afc ]);};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],_efeb .Data [_gcdg ]|^(_acga .Data [_gbbg ]),_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixSrcAndNotDst :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],_efeb .Data [_cbdef ]&^(_acga .Data [_aggad ]),_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]=_efeb .Data [_abbe +_afc ]&^(_acga .Data [_baeb +_afc ]);};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],_efeb .Data [_gcdg ]&^(_acga .Data [_gbbg ]),_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixNotPixSrcOrDst :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],^(_efeb .Data [_cbdef ]|_acga .Data [_aggad ]),_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]=^(_efeb .Data [_abbe +_afc ]|_acga .Data [_baeb +_afc ]);};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],^(_efeb .Data [_gcdg ]|_acga .Data [_gbbg ]),_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixNotPixSrcAndDst :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],^(_efeb .Data [_cbdef ]&_acga .Data [_aggad ]),_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]=^(_efeb .Data [_abbe +_afc ]&_acga .Data [_baeb +_afc ]);};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],^(_efeb .Data [_gcdg ]&_acga .Data [_gbbg ]),_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};case PixNotPixSrcXorDst :for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_aggad ]=_fafeec (_acga .Data [_aggad ],^(_efeb .Data [_cbdef ]^_acga .Data [_aggad ]),_acac );_aggad +=_acga .RowStride ;_cbdef +=_efeb .RowStride ;};if _ffcbc {for _cedd =0;_cedd < _afgd ;_cedd ++{for _afc =0;_afc < _fdbb ;_afc ++{_acga .Data [_baeb +_afc ]=^(_efeb .Data [_abbe +_afc ]^_acga .Data [_baeb +_afc ]);};_baeb +=_acga .RowStride ;_abbe +=_efeb .RowStride ;};};if _defb {for _cedd =0;_cedd < _afgd ;_cedd ++{_acga .Data [_gbbg ]=_fafeec (_acga .Data [_gbbg ],^(_efeb .Data [_gcdg ]^_acga .Data [_gbbg ]),_adcea );_gbbg +=_acga .RowStride ;_gcdg +=_efeb .RowStride ;};};default:_ggc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_abda );return _gg .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_fdff *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_bdae *Boxes ,_begg error ){const _ggbb ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _fdff ==nil {return nil ,_gg .Error (_ggbb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_fdff )==0{return _fdff ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_gg .Errorf (_ggbb ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_gg .Errorf (_ggbb ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );};_bfae :=_fdff .makeSizeIndicator (width ,height ,tp ,relation );_eaed ,_begg :=_fdff .selectWithIndicator (_bfae );if _begg !=nil {return nil ,_gg .Wrap (_begg ,_ggbb ,"");};return _eaed ,nil ;};func _ffea (_da *Bitmap ,_fbg ,_gfb int )(*Bitmap ,error ){const _cbg ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _da ==nil {return nil ,_gg .Error (_cbg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fbg <=0||_gfb <=0{return nil ,_gg .Error (_cbg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _fbg ==_gfb {if _fbg ==1{_dea ,_gge :=_bdaa (nil ,_da );if _gge !=nil {return nil ,_gg .Wrap (_gge ,_cbg ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _dea ,nil ;};if _fbg ==2||_fbg ==4||_fbg ==8{_adcb ,_aga :=_fec (_da ,_fbg );if _aga !=nil {return nil ,_gg .Wrap (_aga ,_cbg ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _adcb ,nil ;};};_gfbb :=_fbg *_da .Width ;_fgc :=_gfb *_da .Height ;_dgd :=New (_gfbb ,_fgc );_ebd :=_dgd .RowStride ;var (_ca ,_ecde ,_fbb ,_gbd ,_dbf int ;_agb byte ;_abd error ;);for _ecde =0;_ecde < _da .Height ;_ecde ++{_ca =_gfb *_ecde *_ebd ;for _fbb =0;_fbb < _da .Width ;_fbb ++{if _ece :=_da .GetPixel (_fbb ,_ecde );_ece {_dbf =_fbg *_fbb ;for _gbd =0;_gbd < _fbg ;_gbd ++{_dgd .setBit (_ca *8+_dbf +_gbd );};};};for _gbd =1;_gbd < _gfb ;_gbd ++{_fc :=_ca +_gbd *_ebd ;for _aa :=0;_aa < _ebd ;_aa ++{if _agb ,_abd =_dgd .GetByte (_ca +_aa );_abd !=nil {return nil ,_gg .Wrapf (_abd ,_cbg ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_gbd );};if _abd =_dgd .SetByte (_fc +_aa ,_agb );_abd !=nil {return nil ,_gg .Wrap (_abd ,_cbg ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _dgd ,nil ;};func _caf (_egfb ,_agbbb *Bitmap ,_defae ,_cdbag int )(*Bitmap ,error ){const _bfbag ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _agbbb ==nil {return nil ,_gg .Error (_bfbag ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _defae < 1&&_cdbag < 1{return nil ,_gg .Error (_bfbag ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _defae ==1&&_cdbag ==1{return _agbbb .Copy (),nil ;};if _defae ==1||_cdbag ==1{var _gbaeg error ;_fcaf :=SelCreateBrick (_cdbag ,_defae ,_cdbag /2,_defae /2,SelHit );_egfb ,_gbaeg =_fded (_egfb ,_agbbb ,_fcaf );if _gbaeg !=nil {return nil ,_gg .Wrap (_gbaeg ,_bfbag ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _egfb ,nil ;};_bddg :=SelCreateBrick (1,_defae ,0,_defae /2,SelHit );_ebege :=SelCreateBrick (_cdbag ,1,_cdbag /2,0,SelHit );_dgabb ,_afag :=_gdfeb (nil ,_agbbb ,_bddg );if _afag !=nil {return nil ,_gg .Wrap (_afag ,_bfbag ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_egfb ,_afag =_gdfeb (_egfb ,_dgabb ,_ebege );if _afag !=nil {return nil ,_gg .Wrap (_afag ,_bfbag ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_afag =_cdaa (_dgabb ,_egfb ,_bddg );if _afag !=nil {return nil ,_gg .Wrap (_afag ,_bfbag ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ ,_afag =_cdaa (_egfb ,_dgabb ,_ebege );if _afag !=nil {return nil ,_gg .Wrap (_afag ,_bfbag ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _egfb ,nil ;};func _gca (_eebf ,_agd byte ,_bce CombinationOperator )byte {switch _bce {case CmbOpOr :return _agd |_eebf ;case CmbOpAnd :return _agd &_eebf ;case CmbOpXor :return _agd ^_eebf ;case CmbOpXNor :return ^(_agd ^_eebf );case CmbOpNot :return ^(_agd );default:return _agd ;};};func _bdaa (_bfb ,_fgee *Bitmap )(*Bitmap ,error ){if _fgee ==nil {return nil ,_gg .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fgee ==_bfb {return _bfb ,nil ;};if _bfb ==nil {_bfb =_fgee .createTemplate ();copy (_bfb .Data ,_fgee .Data );return _bfb ,nil ;};_aaaa :=_bfb .resizeImageData (_fgee );if _aaaa !=nil {return nil ,_gg .Wrap (_aaaa ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_bfb .Text =_fgee .Text ;copy (_bfb .Data ,_fgee .Data );return _bfb ,nil ;};func _fdbf (_dgccg ,_ecdb *Bitmap ,_ebef ,_cccc int )(_cdcb error ){const _dgea ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_fceb ,_feef ,_eafdd ,_agca int ;_fedb ,_bddgc ,_decge ,_agda ,_bfcb ,_adbg ,_adfba byte ;);for _fceb =0;_fceb < _ebef ;_fceb ++{_eafdd =_fceb *_dgccg .RowStride ;_agca =_fceb *_ecdb .RowStride ;for _feef =0;_feef < _cccc ;_feef ++{_fedb ,_cdcb =_dgccg .GetByte (_eafdd +_feef );if _cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_bddgc ,_cdcb =_ecdb .GetByte (_agca +_feef );if _cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _fceb > 0{_decge ,_cdcb =_dgccg .GetByte (_eafdd -_dgccg .RowStride +_feef );if _cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"\u0069\u0020\u003e \u0030");};_fedb |=_decge ;};if _feef > 0{_agda ,_cdcb =_dgccg .GetByte (_eafdd +_feef -1);if _cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"\u006a\u0020\u003e \u0030");};_fedb |=_agda <<7;};_fedb &=_bddgc ;if _fedb ==0||(^_fedb )==0{if _cdcb =_dgccg .SetByte (_eafdd +_feef ,_fedb );_cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_adfba =_fedb ;_fedb =(_fedb |(_fedb >>1)|(_fedb <<1))&_bddgc ;if (_fedb ^_adfba )==0{if _cdcb =_dgccg .SetByte (_eafdd +_feef ,_fedb );_cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _fceb =_ebef -1;_fceb >=0;_fceb --{_eafdd =_fceb *_dgccg .RowStride ;_agca =_fceb *_ecdb .RowStride ;for _feef =_cccc -1;_feef >=0;_feef --{if _fedb ,_cdcb =_dgccg .GetByte (_eafdd +_feef );_cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _bddgc ,_cdcb =_ecdb .GetByte (_agca +_feef );_cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _fceb < _ebef -1{if _bfcb ,_cdcb =_dgccg .GetByte (_eafdd +_dgccg .RowStride +_feef );_cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_fedb |=_bfcb ;};if _feef < _cccc -1{if _adbg ,_cdcb =_dgccg .GetByte (_eafdd +_feef +1);_cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_fedb |=_adbg >>7;};_fedb &=_bddgc ;if _fedb ==0||(^_fedb )==0{if _cdcb =_dgccg .SetByte (_eafdd +_feef ,_fedb );_cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");};continue ;};for {_adfba =_fedb ;_fedb =(_fedb |(_fedb >>1)|(_fedb <<1))&_bddgc ;if (_fedb ^_adfba )==0{if _cdcb =_dgccg .SetByte (_eafdd +_feef ,_fedb );_cdcb !=nil {return _gg .Wrap (_cdcb ,_dgea ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");};break ;};};};};return nil ;};func TstImageBitmapInverseData ()[]byte {_gcffb :=_ecff .Copy ();_gcffb .InverseData ();return _gcffb .Data ;};func MakePixelSumTab8 ()[]int {return _gcfg ()};func (_gedgc *Bitmaps )Size ()int {return len (_gedgc .Values )};func (_ffge *Bitmap )String ()string {var _ebgf ="\u000a";for _ffeg :=0;_ffeg < _ffge .Height ;_ffeg ++{var _cgd string ;for _caef :=0;_caef < _ffge .Width ;_caef ++{_bfg :=_ffge .GetPixel (_caef ,_ffeg );if _bfg {_cgd +="\u0031";}else {_cgd +="\u0030";};};_ebgf +=_cgd +"\u000a";};return _ebgf ;};func _cbba (_acbb int )int {if _acbb < 0{return -_acbb ;};return _acbb ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);type SizeComparison int ;func (_fbag MorphProcess )getWidthHeight ()(_ffccb ,_faee int ){return _fbag .Arguments [0],_fbag .Arguments [1];};func (_bbdf *Bitmaps )String ()string {_gfda :=_d .Builder {};for _ ,_fgdgd :=range _bbdf .Values {_gfda .WriteString (_fgdgd .String ());_gfda .WriteRune ('\n');};return _gfda .String ();};func _egad (_dage ,_fdeb ,_defg *Bitmap ,_efeg int )(*Bitmap ,error ){const _bcge ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _fdeb ==nil {return nil ,_gg .Error (_bcge ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _defg ==nil {return nil ,_gg .Error (_bcge ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _efeg !=4&&_efeg !=8{return nil ,_gg .Error (_bcge ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _bbbe error ;_dage ,_bbbe =_bdaa (_dage ,_fdeb );if _bbbe !=nil {return nil ,_gg .Wrap (_bbbe ,_bcge ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_cbcd :=_fdeb .createTemplate ();_defg .setPadBits (0);for _dagc :=0;_dagc < _efgg ;_dagc ++{_cbcd ,_bbbe =_bdaa (_cbcd ,_dage );if _bbbe !=nil {return nil ,_gg .Wrapf (_bbbe ,_bcge ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_dagc );};if _bbbe =_cagab (_dage ,_defg ,_efeg );_bbbe !=nil {return nil ,_gg .Wrapf (_bbbe ,_bcge ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_dagc );};if _cbcd .Equals (_dage ){break ;};};return _dage ,nil ;};func (_abf *Bitmap )And (s *Bitmap )(_caee *Bitmap ,_fcab error ){const _dce ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _abf ==nil {return nil ,_gg .Error (_dce ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_gg .Error (_dce ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_abf .SizesEqual (s ){_ggc .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_dce );};if _caee ,_fcab =_bdaa (_caee ,_abf );_fcab !=nil {return nil ,_gg .Wrap (_fcab ,_dce ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fcab =_caee .RasterOperation (0,0,_caee .Width ,_caee .Height ,PixSrcAndDst ,s ,0,0);_fcab !=nil {return nil ,_gg .Wrap (_fcab ,_dce ,"");};return _caee ,nil ;};func (_bgab *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _cgef ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _bgab ==nil {return nil ,_gg .Error (_cgef ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_bgab .Values )-1{return nil ,_gg .Errorf (_cgef ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bgab .Values [i ],nil ;};func TstASymbol (t *_gb .T )*Bitmap {t .Helper ();_bdbg :=New (6,6);_e .NoError (t ,_bdbg .SetPixel (1,0,1));_e .NoError (t ,_bdbg .SetPixel (2,0,1));_e .NoError (t ,_bdbg .SetPixel (3,0,1));_e .NoError (t ,_bdbg .SetPixel (4,0,1));_e .NoError (t ,_bdbg .SetPixel (5,1,1));_e .NoError (t ,_bdbg .SetPixel (1,2,1));_e .NoError (t ,_bdbg .SetPixel (2,2,1));_e .NoError (t ,_bdbg .SetPixel (3,2,1));_e .NoError (t ,_bdbg .SetPixel (4,2,1));_e .NoError (t ,_bdbg .SetPixel (5,2,1));_e .NoError (t ,_bdbg .SetPixel (0,3,1));_e .NoError (t ,_bdbg .SetPixel (5,3,1));_e .NoError (t ,_bdbg .SetPixel (0,4,1));_e .NoError (t ,_bdbg .SetPixel (5,4,1));_e .NoError (t ,_bdbg .SetPixel (1,5,1));_e .NoError (t ,_bdbg .SetPixel (2,5,1));_e .NoError (t ,_bdbg .SetPixel (3,5,1));_e .NoError (t ,_bdbg .SetPixel (4,5,1));_e .NoError (t ,_bdbg .SetPixel (5,5,1));return _bdbg ;};func _cec (_gcg ,_fbf *Bitmap ,_agc int ,_cdg []byte ,_efd int )(_fef error ){const _gcc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_ga ,_ddf ,_ffg ,_ecec ,_fcg ,_gfgf ,_acc ,_fbe int ;_cde ,_ccb uint32 ;_fac ,_ggca byte ;_dff uint16 ;);_dgb :=make ([]byte ,4);_eecb :=make ([]byte ,4);for _ffg =0;_ffg < _gcg .Height -1;_ffg ,_ecec =_ffg +2,_ecec +1{_ga =_ffg *_gcg .RowStride ;_ddf =_ecec *_fbf .RowStride ;for _fcg ,_gfgf =0,0;_fcg < _efd ;_fcg ,_gfgf =_fcg +4,_gfgf +1{for _acc =0;_acc < 4;_acc ++{_fbe =_ga +_fcg +_acc ;if _fbe <=len (_gcg .Data )-1&&_fbe < _ga +_gcg .RowStride {_dgb [_acc ]=_gcg .Data [_fbe ];}else {_dgb [_acc ]=0x00;};_fbe =_ga +_gcg .RowStride +_fcg +_acc ;if _fbe <=len (_gcg .Data )-1&&_fbe < _ga +(2*_gcg .RowStride ){_eecb [_acc ]=_gcg .Data [_fbe ];}else {_eecb [_acc ]=0x00;};};_cde =_ge .BigEndian .Uint32 (_dgb );_ccb =_ge .BigEndian .Uint32 (_eecb );_ccb &=_cde ;_ccb &=_ccb <<1;_ccb &=0xaaaaaaaa;_cde =_ccb |(_ccb <<7);_fac =byte (_cde >>24);_ggca =byte ((_cde >>8)&0xff);_fbe =_ddf +_gfgf ;if _fbe +1==len (_fbf .Data )-1||_fbe +1>=_ddf +_fbf .RowStride {_fbf .Data [_fbe ]=_cdg [_fac ];if _fef =_fbf .SetByte (_fbe ,_cdg [_fac ]);_fef !=nil {return _gg .Wrapf (_fef ,_gcc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fbe );};}else {_dff =(uint16 (_cdg [_fac ])<<8)|uint16 (_cdg [_ggca ]);if _fef =_fbf .setTwoBytes (_fbe ,_dff );_fef !=nil {return _gg .Wrapf (_fef ,_gcc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fbe );};_gfgf ++;};};};return nil ;};func (_aefc *Bitmap )resizeImageData (_faed *Bitmap )error {if _faed ==nil {return _gg .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _aefc .SizesEqual (_faed ){return nil ;};_aefc .Data =make ([]byte ,len (_faed .Data ));_aefc .Width =_faed .Width ;_aefc .Height =_faed .Height ;_aefc .RowStride =_faed .RowStride ;return nil ;};func (_bafb *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _cbag ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _bafb ==nil {return nil ,_gg .Error (_cbag ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_gg .Error (_cbag ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_bbeg :=len (_bafb .Values );_ebdcb :=&Bitmaps {Values :make ([]*Bitmap ,_bbeg ),Boxes :make ([]*_fde .Rectangle ,_bbeg )};var (_bgcg ,_fege *Bitmap ;_dcca *_fde .Rectangle ;_bacc error ;);for _ccca :=0;_ccca < _bbeg ;_ccca ++{if _bgcg ,_bacc =_bafb .GetBitmap (_ccca );_bacc !=nil {return nil ,_gg .Wrap (_bacc ,_cbag ,"");};if _dcca ,_bacc =_bafb .GetBox (_ccca );_bacc !=nil {return nil ,_gg .Wrap (_bacc ,_cbag ,"");};if _fege ,_bacc =s .clipRectangle (_dcca ,nil );_bacc !=nil {return nil ,_gg .Wrap (_bacc ,_cbag ,"");};if _fege ,_bacc =_fege .And (_bgcg );_bacc !=nil {return nil ,_gg .Wrap (_bacc ,_cbag ,"");};_ebdcb .Values [_ccca ]=_fege ;_ebdcb .Boxes [_ccca ]=_dcca ;};return _ebdcb ,nil ;};func (_fgae *Points )AddPoint (x ,y float32 ){*_fgae =append (*_fgae ,Point {x ,y })};func TstDSymbol (t *_gb .T ,scale ...int )*Bitmap {_bddd ,_aeacb :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_e .NoError (t ,_aeacb );return TstGetScaledSymbol (t ,_bddd ,scale ...);};func (_gffbc *byWidth )Less (i ,j int )bool {return _gffbc .Values [i ].Width < _gffbc .Values [j ].Width };func _cb (_bcc *Bitmap ,_afg *Bitmap ,_efa int )(_geb error ){const _adc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _efa {case 2:_geb =_c (_bcc ,_afg );case 4:_geb =_cfc (_bcc ,_afg );case 8:_geb =_gdb (_bcc ,_afg );default:return _gg .Error (_adc ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _geb !=nil {_geb =_gg .Wrap (_geb ,_adc ,"");};return _geb ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _fec (_dd *Bitmap ,_gff int )(*Bitmap ,error ){const _ad ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _dd ==nil {return nil ,_gg .Error (_ad ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gff ==1{return _bdaa (nil ,_dd );};if _gff !=2&&_gff !=4&&_gff !=8{return nil ,_gg .Error (_ad ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");};_edd :=_gff *_dd .Width ;_eea :=_gff *_dd .Height ;_af :=New (_edd ,_eea );var _cfa error ;switch _gff {case 2:_cfa =_c (_af ,_dd );case 4:_cfa =_cfc (_af ,_dd );case 8:_cfa =_gdb (_af ,_dd );};if _cfa !=nil {return nil ,_gg .Wrap (_cfa ,_ad ,"");};return _af ,nil ;};func _fafeec (_deb ,_fdca ,_aegf byte )byte {return (_deb &^(_aegf ))|(_fdca &_aegf )};func (_fba *Bitmap )addBorderGeneral (_fdf ,_edf ,_gbc ,_ggba int ,_ebfg int )(*Bitmap ,error ){const _bdf ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _fdf < 0||_edf < 0||_gbc < 0||_ggba < 0{return nil ,_gg .Error (_bdf ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_cdb ,_deed :=_fba .Width ,_fba .Height ;_adce :=_cdb +_fdf +_edf ;_abg :=_deed +_gbc +_ggba ;_eddg :=New (_adce ,_abg );_eddg .Color =_fba .Color ;_gbdc :=PixClr ;if _ebfg > 0{_gbdc =PixSet ;};_efac :=_eddg .RasterOperation (0,0,_fdf ,_abg ,_gbdc ,nil ,0,0);if _efac !=nil {return nil ,_gg .Wrap (_efac ,_bdf ,"\u006c\u0065\u0066\u0074");};_efac =_eddg .RasterOperation (_adce -_edf ,0,_edf ,_abg ,_gbdc ,nil ,0,0);if _efac !=nil {return nil ,_gg .Wrap (_efac ,_bdf ,"\u0072\u0069\u0067h\u0074");};_efac =_eddg .RasterOperation (0,0,_adce ,_gbc ,_gbdc ,nil ,0,0);if _efac !=nil {return nil ,_gg .Wrap (_efac ,_bdf ,"\u0074\u006f\u0070");};_efac =_eddg .RasterOperation (0,_abg -_ggba ,_adce ,_ggba ,_gbdc ,nil ,0,0);if _efac !=nil {return nil ,_gg .Wrap (_efac ,_bdf ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_efac =_eddg .RasterOperation (_fdf ,_gbc ,_cdb ,_deed ,PixSrc ,_fba ,0,0);if _efac !=nil {return nil ,_gg .Wrap (_efac ,_bdf ,"\u0063\u006f\u0070\u0079");};return _eddg ,nil ;};func TstImageBitmapData ()[]byte {return _ecff .Data };func (_bbac *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _fgfe ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_bbac .Values )==0{return nil ,_gg .Error (_fgfe ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_cbggd :=&BitmapsArray {};_bbac .SortByHeight ();_aedd :=-1;_cabfc :=-1;for _baed :=0;_baed < len (_bbac .Values );_baed ++{_fdgd :=_bbac .Values [_baed ].Height ;if _fdgd > _aedd {_aedd =_fdgd ;_cabfc ++;_cbggd .Values =append (_cbggd .Values ,&Bitmaps {});};_cbggd .Values [_cabfc ].AddBitmap (_bbac .Values [_baed ]);};return _cbggd ,nil ;};func (_ggfd *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _ada ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_ggfd .IntSlice .Size (){return 0,_gg .Errorf (_ada ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_ggfd .YAtIndex (i )),nil ;};func (_dcf *Bitmap )setAll ()error {_bfc :=_ebed (_dcf ,0,0,_dcf .Width ,_dcf .Height ,PixSet ,nil ,0,0);if _bfc !=nil {return _gg .Wrap (_bfc ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};type fillSegment struct{_bfga int ;_agcaa int ;_gbeg int ;_gcfgb int ;};type Boxes []*_fde .Rectangle ;func (_bffbgd *byHeight )Swap (i ,j int ){_bffbgd .Values [i ],_bffbgd .Values [j ]=_bffbgd .Values [j ],_bffbgd .Values [i ];if _bffbgd .Boxes !=nil {_bffbgd .Boxes [i ],_bffbgd .Boxes [j ]=_bffbgd .Boxes [j ],_bffbgd .Boxes [i ];};};type Getter interface{GetBitmap ()*Bitmap ;};func (_fcea *Bitmaps )WidthSorter ()func (_agfg ,_cded int )bool {return func (_fbdf ,_ceea int )bool {return _fcea .Values [_fbdf ].Width < _fcea .Values [_ceea ].Width };};var MorphBC BoundaryCondition ;func (_geeg *Bitmap )GetUnpaddedData ()([]byte ,error ){_bed :=uint (_geeg .Width &0x07);if _bed ==0{return _geeg .Data ,nil ;};_cef :=_geeg .Width *_geeg .Height ;if _cef %8!=0{_cef >>=3;_cef ++;}else {_cef >>=3;};_faeb :=make ([]byte ,_cef );_gaac :=_b .NewWriterMSB (_faeb );const _dcb ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _gag :=0;_gag < _geeg .Height ;_gag ++{for _ffgb :=0;_ffgb < _geeg .RowStride ;_ffgb ++{_beec :=_geeg .Data [_gag *_geeg .RowStride +_ffgb ];if _ffgb !=_geeg .RowStride -1{_eccbd :=_gaac .WriteByte (_beec );if _eccbd !=nil {return nil ,_gg .Wrap (_eccbd ,_dcb ,"");};continue ;};for _gefc :=uint (0);_gefc < _bed ;_gefc ++{_ggb :=_gaac .WriteBit (int (_beec >>(7-_gefc )&0x01));if _ggb !=nil {return nil ,_gg .Wrap (_ggb ,_dcb ,"");};};};};return _faeb ,nil ;};func (_bgea *byWidth )Swap (i ,j int ){_bgea .Values [i ],_bgea .Values [j ]=_bgea .Values [j ],_bgea .Values [i ];if _bgea .Boxes !=nil {_bgea .Boxes [i ],_bgea .Boxes [j ]=_bgea .Boxes [j ],_bgea .Boxes [i ];};};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _ced ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";if bm1 ==nil {return false ,_gg .Error (_ced ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");};if bm2 ==nil {return false ,_gg .Error (_ced ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");};if area1 <=0||area2 <=0{return false ,_gg .Error (_ced ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");};if downcount ==nil {return false ,_gg .Error (_ced ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_gg .Error (_ced ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");};_cfaf ,_cbgc :=bm1 .Width ,bm1 .Height ;_ccc ,_cffe :=bm2 .Width ,bm2 .Height ;if _fd .Abs (_cfaf -_ccc )> maxDiffW {return false ,nil ;};if _fd .Abs (_cbgc -_cffe )> maxDiffH {return false ,nil ;};_fgead :=int (delX +_fd .Sign (delX )*0.5);_acede :=int (delY +_fd .Sign (delY )*0.5);_cefc :=int (_gga .Ceil (_gga .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_dgae :=bm2 .RowStride ;_gedd :=_dfgb (_acede ,0);_fgac :=_ccgb (_cffe +_acede ,_cbgc );_eecf :=bm1 .RowStride *_gedd ;_fagf :=bm2 .RowStride *(_gedd -_acede );var _dfgge int ;if _fgac <=_cbgc {_dfgge =downcount [_fgac -1];};_eba :=_dfgb (_fgead ,0);_bddc :=_ccgb (_ccc +_fgead ,_cfaf );var _gbcd ,_bca int ;if _fgead >=8{_gbcd =_fgead >>3;_eecf +=_gbcd ;_eba -=_gbcd <<3;_bddc -=_gbcd <<3;_fgead &=7;}else if _fgead <=-8{_bca =-((_fgead +7)>>3);_fagf +=_bca ;_dgae -=_bca ;_fgead +=_bca <<3;};var (_fce ,_dbgeb ,_edeb int ;_fgba ,_ceae ,_acba byte ;);if _eba >=_bddc ||_gedd >=_fgac {return false ,nil ;};_bdeb :=(_bddc +7)>>3;switch {case _fgead ==0:for _dbgeb =_gedd ;_dbgeb < _fgac ;_dbgeb ,_eecf ,_fagf =_dbgeb +1,_eecf +bm1 .RowStride ,_fagf +bm2 .RowStride {for _edeb =0;_edeb < _bdeb ;_edeb ++{_fgba =bm1 .Data [_eecf +_edeb ]&bm2 .Data [_fagf +_edeb ];_fce +=tab [_fgba ];};if _fce >=_cefc {return true ,nil ;};if _cbda :=_fce +downcount [_dbgeb ]-_dfgge ;_cbda < _cefc {return false ,nil ;};};case _fgead > 0&&_dgae < _bdeb :for _dbgeb =_gedd ;_dbgeb < _fgac ;_dbgeb ,_eecf ,_fagf =_dbgeb +1,_eecf +bm1 .RowStride ,_fagf +bm2 .RowStride {_ceae =bm1 .Data [_eecf ];_acba =bm2 .Data [_fagf ]>>uint (_fgead );_fgba =_ceae &_acba ;_fce +=tab [_fgba ];for _edeb =1;_edeb < _dgae ;_edeb ++{_ceae =bm1 .Data [_eecf +_edeb ];_acba =bm2 .Data [_fagf +_edeb ]>>uint (_fgead )|bm2 .Data [_fagf +_edeb -1]<<uint (8-_fgead );_fgba =_ceae &_acba ;_fce +=tab [_fgba ];};_ceae =bm1 .Data [_eecf +_edeb ];_acba =bm2 .Data [_fagf +_edeb -1]<<uint (8-_fgead );_fgba =_ceae &_acba ;_fce +=tab [_fgba ];if _fce >=_cefc {return true ,nil ;}else if _fce +downcount [_dbgeb ]-_dfgge < _cefc {return false ,nil ;};};case _fgead > 0&&_dgae >=_bdeb :for _dbgeb =_gedd ;_dbgeb < _fgac ;_dbgeb ,_eecf ,_fagf =_dbgeb +1,_eecf +bm1 .RowStride ,_fagf +bm2 .RowStride {_ceae =bm1 .Data [_eecf ];_acba =bm2 .Data [_fagf ]>>uint (_fgead );_fgba =_ceae &_acba ;_fce +=tab [_fgba ];for _edeb =1;_edeb < _bdeb ;_edeb ++{_ceae =bm1 .Data [_eecf +_edeb ];_acba =bm2 .Data [_fagf +_edeb ]>>uint (_fgead );_acba |=bm2 .Data [_fagf +_edeb -1]<<uint (8-_fgead );_fgba =_ceae &_acba ;_fce +=tab [_fgba ];};if _fce >=_cefc {return true ,nil ;}else if _fce +downcount [_dbgeb ]-_dfgge < _cefc {return false ,nil ;};};case _bdeb < _dgae :for _dbgeb =_gedd ;_dbgeb < _fgac ;_dbgeb ,_eecf ,_fagf =_dbgeb +1,_eecf +bm1 .RowStride ,_fagf +bm2 .RowStride {for _edeb =0;_edeb < _bdeb ;_edeb ++{_ceae =bm1 .Data [_eecf +_edeb ];_acba =bm2 .Data [_fagf +_edeb ]<<uint (-_fgead );_acba |=bm2 .Data [_fagf +_edeb +1]>>uint (8+_fgead );_fgba =_ceae &_acba ;_fce +=tab [_fgba ];};if _fce >=_cefc {return true ,nil ;}else if _fabg :=_fce +downcount [_dbgeb ]-_dfgge ;_fabg < _cefc {return false ,nil ;};};case _dgae >=_bdeb :for _dbgeb =_gedd ;_dbgeb < _fgac ;_dbgeb ,_eecf ,_fagf =_dbgeb +1,_eecf +bm1 .RowStride ,_fagf +bm2 .RowStride {for _edeb =0;_edeb < _bdeb ;_edeb ++{_ceae =bm1 .Data [_eecf +_edeb ];_acba =bm2 .Data [_fagf +_edeb ]<<uint (-_fgead );_acba |=bm2 .Data [_fagf +_edeb +1]>>uint (8+_fgead );_fgba =_ceae &_acba ;_fce +=tab [_fgba ];};_ceae =bm1 .Data [_eecf +_edeb ];_acba =bm2 .Data [_fagf +_edeb ]<<uint (-_fgead );_fgba =_ceae &_acba ;_fce +=tab [_fgba ];if _fce >=_cefc {return true ,nil ;}else if _fce +downcount [_dbgeb ]-_dfgge < _cefc {return false ,nil ;};};};_gbbf :=float32 (_fce )*float32 (_fce )/(float32 (area1 )*float32 (area2 ));if _gbbf >=scoreThreshold {_ggc .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_fce ,_cefc ,_gbbf ,scoreThreshold );};return false ,nil ;};func (_dccab *Bitmaps )SortByWidth (){_afcf :=(*byWidth )(_dccab );_f .Sort (_afcf )};func TstRSymbol (t *_gb .T ,scale ...int )*Bitmap {_ecbb ,_afadg :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_e .NoError (t ,_afadg );return TstGetScaledSymbol (t ,_ecbb ,scale ...);};type Point struct{X ,Y float32 ;};type RasterOperator int ;func (_gbadf *Bitmaps )makeSizeIndicator (_afeg ,_adcd int ,_bgge LocationFilter ,_cbce SizeComparison )(_bfcc *_fd .NumSlice ,_gddg error ){const _acge ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _gbadf ==nil {return nil ,_gg .Error (_acge ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _bgge {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_gg .Errorf (_acge ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_bgge );};switch _cbce {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_gg .Errorf (_acge ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_cbce );};_bfcc =&_fd .NumSlice {};var (_dbcc ,_ebcf ,_cbgca int ;_ccbga *Bitmap ;);for _ ,_ccbga =range _gbadf .Values {_dbcc =0;_ebcf ,_cbgca =_ccbga .Width ,_ccbga .Height ;switch _bgge {case LocSelectWidth :if (_cbce ==SizeSelectIfLT &&_ebcf < _afeg )||(_cbce ==SizeSelectIfGT &&_ebcf > _afeg )||(_cbce ==SizeSelectIfLTE &&_ebcf <=_afeg )||(_cbce ==SizeSelectIfGTE &&_ebcf >=_afeg )||(_cbce ==SizeSelectIfEQ &&_ebcf ==_afeg ){_dbcc =1;};case LocSelectHeight :if (_cbce ==SizeSelectIfLT &&_cbgca < _adcd )||(_cbce ==SizeSelectIfGT &&_cbgca > _adcd )||(_cbce ==SizeSelectIfLTE &&_cbgca <=_adcd )||(_cbce ==SizeSelectIfGTE &&_cbgca >=_adcd )||(_cbce ==SizeSelectIfEQ &&_cbgca ==_adcd ){_dbcc =1;};case LocSelectIfEither :if (_cbce ==SizeSelectIfLT &&(_ebcf < _afeg ||_cbgca < _adcd ))||(_cbce ==SizeSelectIfGT &&(_ebcf > _afeg ||_cbgca > _adcd ))||(_cbce ==SizeSelectIfLTE &&(_ebcf <=_afeg ||_cbgca <=_adcd ))||(_cbce ==SizeSelectIfGTE &&(_ebcf >=_afeg ||_cbgca >=_adcd ))||(_cbce ==SizeSelectIfEQ &&(_ebcf ==_afeg ||_cbgca ==_adcd )){_dbcc =1;};case LocSelectIfBoth :if (_cbce ==SizeSelectIfLT &&(_ebcf < _afeg &&_cbgca < _adcd ))||(_cbce ==SizeSelectIfGT &&(_ebcf > _afeg &&_cbgca > _adcd ))||(_cbce ==SizeSelectIfLTE &&(_ebcf <=_afeg &&_cbgca <=_adcd ))||(_cbce ==SizeSelectIfGTE &&(_ebcf >=_afeg &&_cbgca >=_adcd ))||(_cbce ==SizeSelectIfEQ &&(_ebcf ==_afeg &&_cbgca ==_adcd )){_dbcc =1;};};_bfcc .AddInt (_dbcc );};return _bfcc ,nil ;};func (_gaa *Bitmap )GetPixel (x ,y int )bool {_cbd :=_gaa .GetByteIndex (x ,y );_fcb :=_gaa .GetBitOffset (x );_geac :=uint (7-_fcb );if _cbd > len (_gaa .Data )-1{_ggc .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_gaa );return false ;};if (_gaa .Data [_cbd ]>>_geac )&0x01>=1{return true ;};return false ;};func TstVSymbol (t *_gb .T ,scale ...int )*Bitmap {_cdff ,_beea :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_e .NoError (t ,_beea );return TstGetScaledSymbol (t ,_cdff ,scale ...);};var _accf =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};func (_gdgg *ClassedPoints )ySortFunction ()func (_ebda int ,_bcac int )bool {return func (_cfdgc ,_beaa int )bool {return _gdgg .YAtIndex (_cfdgc )< _gdgg .YAtIndex (_beaa )};};func (_ffbb *BitmapsArray )AddBox (box *_fde .Rectangle ){_ffbb .Boxes =append (_ffbb .Boxes ,box )};func (_cgcg *Bitmaps )SortByHeight (){_ffad :=(*byHeight )(_cgcg );_f .Sort (_ffad )};func (_dfbd *Bitmaps )selectByIndicator (_cfea *_fd .NumSlice )(_gdadg *Bitmaps ,_baga error ){const _dcgf ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _dfbd ==nil {return nil ,_gg .Error (_dcgf ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _cfea ==nil {return nil ,_gg .Error (_dcgf ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_dfbd .Values )==0{return _dfbd ,nil ;};if len (*_cfea )!=len (_dfbd .Values ){return nil ,_gg .Errorf (_dcgf ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_cfea ),len (_dfbd .Values ));};var _cfbd ,_fcdg ,_ggad int ;for _fcdg =0;_fcdg < len (*_cfea );_fcdg ++{if _cfbd ,_baga =_cfea .GetInt (_fcdg );_baga !=nil {return nil ,_gg .Wrap (_baga ,_dcgf ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _cfbd ==1{_ggad ++;};};if _ggad ==len (_dfbd .Values ){return _dfbd ,nil ;};_gdadg =&Bitmaps {};_debd :=len (_dfbd .Values )==len (_dfbd .Boxes );for _fcdg =0;_fcdg < len (*_cfea );_fcdg ++{if _cfbd =int ((*_cfea )[_fcdg ]);_cfbd ==0{continue ;};_gdadg .Values =append (_gdadg .Values ,_dfbd .Values [_fcdg ]);if _debd {_gdadg .Boxes =append (_gdadg .Boxes ,_dfbd .Boxes [_fcdg ]);};};return _gdadg ,nil ;};func (_gcbc *byWidth )Len ()int {return len (_gcbc .Values )};func _ccgb (_dcec ,_deagd int )int {if _dcec < _deagd {return _dcec ;};return _deagd ;};func _gda ()(_aaa [256]uint16 ){for _bgc :=0;_bgc < 256;_bgc ++{if _bgc &0x01!=0{_aaa [_bgc ]|=0x3;};if _bgc &0x02!=0{_aaa [_bgc ]|=0xc;};if _bgc &0x04!=0{_aaa [_bgc ]|=0x30;};if _bgc &0x08!=0{_aaa [_bgc ]|=0xc0;};if _bgc &0x10!=0{_aaa [_bgc ]|=0x300;};if _bgc &0x20!=0{_aaa [_bgc ]|=0xc00;};if _bgc &0x40!=0{_aaa [_bgc ]|=0x3000;};if _bgc &0x80!=0{_aaa [_bgc ]|=0xc000;};};return _aaa ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func TstNSymbol (t *_gb .T ,scale ...int )*Bitmap {_agbg ,_addee :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_e .NoError (t ,_addee );return TstGetScaledSymbol (t ,_agbg ,scale ...);};func _cfc (_gd ,_ffe *Bitmap )(_bf error ){const _bc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_fb :=_ffe .RowStride ;_ec :=_gd .RowStride ;_ebe :=_ffe .RowStride *4-_gd .RowStride ;var (_eca ,_ee byte ;_fe uint32 ;_gef ,_fg ,_dc ,_ba ,_ccf ,_fda ,_fgf int ;);for _dc =0;_dc < _ffe .Height ;_dc ++{_gef =_dc *_fb ;_fg =4*_dc *_ec ;for _ba =0;_ba < _fb ;_ba ++{_eca =_ffe .Data [_gef +_ba ];_fe =_aacb [_eca ];_fda =_fg +_ba *4;if _ebe !=0&&(_ba +1)*4> _gd .RowStride {for _ccf =_ebe ;_ccf > 0;_ccf --{_ee =byte ((_fe >>uint (_ccf *8))&0xff);_fgf =_fda +(_ebe -_ccf );if _bf =_gd .SetByte (_fgf ,_ee );_bf !=nil {return _gg .Wrapf (_bf ,_bc ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ccf );};};}else if _bf =_gd .setFourBytes (_fda ,_fe );_bf !=nil {return _gg .Wrap (_bf ,_bc ,"");};if _bf =_gd .setFourBytes (_fg +_ba *4,_aacb [_ffe .Data [_gef +_ba ]]);_bf !=nil {return _gg .Wrap (_bf ,_bc ,"");};};for _ccf =1;_ccf < 4;_ccf ++{for _ba =0;_ba < _ec ;_ba ++{if _bf =_gd .SetByte (_fg +_ccf *_ec +_ba ,_gd .Data [_fg +_ba ]);_bf !=nil {return _gg .Wrapf (_bf ,_bc ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ccf ,_ba );};};};};return nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _deg ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_bea :=_efb (width ,height );_bea .Data =data ;if len (data )< height *_bea .RowStride {return nil ,_gg .Errorf (_deg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_bea .RowStride );};return _bea ,nil ;};func (_cbcfa *ClassedPoints )validateIntSlice ()error {const _bgef ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_becf :=range _cbcfa .IntSlice {if _becf >=(_cbcfa .Points .Size ()){return _gg .Errorf (_bgef ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_becf ,_cbcfa .Points .Size ());};};return nil ;};func init (){const _eccfg ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_gfgc =New (50,40);var _aeddf error ;_gfgc ,_aeddf =_gfgc .AddBorder (2,1);if _aeddf !=nil {panic (_gg .Wrap (_aeddf ,_eccfg ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_ecff ,_aeddf =NewWithData (50,22,_accf );if _aeddf !=nil {panic (_gg .Wrap (_aeddf ,_eccfg ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func _befb (_agcf uint ,_cea byte )byte {return _cea >>_agcf <<_agcf };func _fab (_dee *Bitmap ,_ffc int ,_aba []byte )(_ffd *Bitmap ,_gbf error ){const _eccb ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _dee ==nil {return nil ,_gg .Error (_eccb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ffc < 1||_ffc > 4{return nil ,_gg .Error (_eccb ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _dee .Height <=1{return nil ,_gg .Errorf (_eccb ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_dee .Height );};_ffd =New (_dee .Width /2,_dee .Height /2);if _aba ==nil {_aba =_face ();};_ace :=_ccgb (_dee .RowStride ,2*_ffd .RowStride );switch _ffc {case 1:_gbf =_cfcb (_dee ,_ffd ,_ffc ,_aba ,_ace );case 2:_gbf =_deee (_dee ,_ffd ,_ffc ,_aba ,_ace );case 3:_gbf =_bdg (_dee ,_ffd ,_ffc ,_aba ,_ace );case 4:_gbf =_cec (_dee ,_ffd ,_ffc ,_aba ,_ace );};if _gbf !=nil {return nil ,_gbf ;};return _ffd ,nil ;};func (_abeg *Bitmaps )AddBox (box *_fde .Rectangle ){_abeg .Boxes =append (_abeg .Boxes ,box )};func (_ceag *Boxes )makeSizeIndicator (_cge ,_ecdg int ,_ffab LocationFilter ,_dfe SizeComparison )*_fd .NumSlice {_cdaf :=&_fd .NumSlice {};var _facf ,_beed ,_fga int ;for _ ,_cceg :=range *_ceag {_facf =0;_beed ,_fga =_cceg .Dx (),_cceg .Dy ();switch _ffab {case LocSelectWidth :if (_dfe ==SizeSelectIfLT &&_beed < _cge )||(_dfe ==SizeSelectIfGT &&_beed > _cge )||(_dfe ==SizeSelectIfLTE &&_beed <=_cge )||(_dfe ==SizeSelectIfGTE &&_beed >=_cge ){_facf =1;};case LocSelectHeight :if (_dfe ==SizeSelectIfLT &&_fga < _ecdg )||(_dfe ==SizeSelectIfGT &&_fga > _ecdg )||(_dfe ==SizeSelectIfLTE &&_fga <=_ecdg )||(_dfe ==SizeSelectIfGTE &&_fga >=_ecdg ){_facf =1;};case LocSelectIfEither :if (_dfe ==SizeSelectIfLT &&(_fga < _ecdg ||_beed < _cge ))||(_dfe ==SizeSelectIfGT &&(_fga > _ecdg ||_beed > _cge ))||(_dfe ==SizeSelectIfLTE &&(_fga <=_ecdg ||_beed <=_cge ))||(_dfe ==SizeSelectIfGTE &&(_fga >=_ecdg ||_beed >=_cge )){_facf =1;};case LocSelectIfBoth :if (_dfe ==SizeSelectIfLT &&(_fga < _ecdg &&_beed < _cge ))||(_dfe ==SizeSelectIfGT &&(_fga > _ecdg &&_beed > _cge ))||(_dfe ==SizeSelectIfLTE &&(_fga <=_ecdg &&_beed <=_cge ))||(_dfe ==SizeSelectIfGTE &&(_fga >=_ecdg &&_beed >=_cge )){_facf =1;};};_cdaf .AddInt (_facf );};return _cdaf ;};func _dabfd ()[]int {_ccgga :=make ([]int ,256);_ccgga [0]=0;_ccgga [1]=7;var _cee int ;for _cee =2;_cee < 4;_cee ++{_ccgga [_cee ]=_ccgga [_cee -2]+6;};for _cee =4;_cee < 8;_cee ++{_ccgga [_cee ]=_ccgga [_cee -4]+5;};for _cee =8;_cee < 16;_cee ++{_ccgga [_cee ]=_ccgga [_cee -8]+4;};for _cee =16;_cee < 32;_cee ++{_ccgga [_cee ]=_ccgga [_cee -16]+3;};for _cee =32;_cee < 64;_cee ++{_ccgga [_cee ]=_ccgga [_cee -32]+2;};for _cee =64;_cee < 128;_cee ++{_ccgga [_cee ]=_ccgga [_cee -64]+1;};for _cee =128;_cee < 256;_cee ++{_ccgga [_cee ]=_ccgga [_cee -128];};return _ccgga ;};func (_degf Points )Get (i int )(Point ,error ){if i > len (_degf )-1{return Point {},_gg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _degf [i ],nil ;};func _gdfeb (_bcdd ,_begb *Bitmap ,_dcfe *Selection )(*Bitmap ,error ){const _gaee ="\u0065\u0072\u006fd\u0065";var (_fbbce error ;_ceb *Bitmap ;);_bcdd ,_fbbce =_abge (_bcdd ,_begb ,_dcfe ,&_ceb );if _fbbce !=nil {return nil ,_gg .Wrap (_fbbce ,_gaee ,"");};if _fbbce =_bcdd .setAll ();_fbbce !=nil {return nil ,_gg .Wrap (_fbbce ,_gaee ,"");};var _ebde SelectionValue ;for _fbcbb :=0;_fbcbb < _dcfe .Height ;_fbcbb ++{for _gfbbc :=0;_gfbbc < _dcfe .Width ;_gfbbc ++{_ebde =_dcfe .Data [_fbcbb ][_gfbbc ];if _ebde ==SelHit {_fbbce =_ebed (_bcdd ,_dcfe .Cx -_gfbbc ,_dcfe .Cy -_fbcbb ,_begb .Width ,_begb .Height ,PixSrcAndDst ,_ceb ,0,0);if _fbbce !=nil {return nil ,_gg .Wrap (_fbbce ,_gaee ,"");};};};};if MorphBC ==SymmetricMorphBC {return _bcdd ,nil ;};_gaff ,_cdcc ,_fdge ,_daeb :=_dcfe .findMaxTranslations ();if _gaff > 0{if _fbbce =_bcdd .RasterOperation (0,0,_gaff ,_begb .Height ,PixClr ,nil ,0,0);_fbbce !=nil {return nil ,_gg .Wrap (_fbbce ,_gaee ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _fdge > 0{if _fbbce =_bcdd .RasterOperation (_begb .Width -_fdge ,0,_fdge ,_begb .Height ,PixClr ,nil ,0,0);_fbbce !=nil {return nil ,_gg .Wrap (_fbbce ,_gaee ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _cdcc > 0{if _fbbce =_bcdd .RasterOperation (0,0,_begb .Width ,_cdcc ,PixClr ,nil ,0,0);_fbbce !=nil {return nil ,_gg .Wrap (_fbbce ,_gaee ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _daeb > 0{if _fbbce =_bcdd .RasterOperation (0,_begb .Height -_daeb ,_begb .Width ,_daeb ,PixClr ,nil ,0,0);_fbbce !=nil {return nil ,_gg .Wrap (_fbbce ,_gaee ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _bcdd ,nil ;};func TstCSymbol (t *_gb .T )*Bitmap {t .Helper ();_bcacf :=New (6,6);_e .NoError (t ,_bcacf .SetPixel (1,0,1));_e .NoError (t ,_bcacf .SetPixel (2,0,1));_e .NoError (t ,_bcacf .SetPixel (3,0,1));_e .NoError (t ,_bcacf .SetPixel (4,0,1));_e .NoError (t ,_bcacf .SetPixel (0,1,1));_e .NoError (t ,_bcacf .SetPixel (5,1,1));_e .NoError (t ,_bcacf .SetPixel (0,2,1));_e .NoError (t ,_bcacf .SetPixel (0,3,1));_e .NoError (t ,_bcacf .SetPixel (0,4,1));_e .NoError (t ,_bcacf .SetPixel (5,4,1));_e .NoError (t ,_bcacf .SetPixel (1,5,1));_e .NoError (t ,_bcacf .SetPixel (2,5,1));_e .NoError (t ,_bcacf .SetPixel (3,5,1));_e .NoError (t ,_bcacf .SetPixel (4,5,1));return _bcacf ;};func _eebfd (_bbbcf *Bitmap ,_baa ,_begf ,_adgg ,_ggcc int ,_gbdf RasterOperator ,_ddab *Bitmap ,_egbe ,_eaga int )error {var (_cgfg byte ;_bgaa int ;_cgbb int ;_ccab ,_fafee int ;_cacb ,_gfea int ;);_beadb :=_adgg >>3;_aeae :=_adgg &7;if _aeae > 0{_cgfg =_edfgc [_aeae ];};_bgaa =_ddab .RowStride *_eaga +(_egbe >>3);_cgbb =_bbbcf .RowStride *_begf +(_baa >>3);switch _gbdf {case PixSrc :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]=_ddab .Data [_ccab ];_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],_ddab .Data [_ccab ],_cgfg );};};case PixNotSrc :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]=^(_ddab .Data [_ccab ]);_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],^_ddab .Data [_ccab ],_cgfg );};};case PixSrcOrDst :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]|=_ddab .Data [_ccab ];_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],_ddab .Data [_ccab ]|_bbbcf .Data [_fafee ],_cgfg );};};case PixSrcAndDst :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]&=_ddab .Data [_ccab ];_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],_ddab .Data [_ccab ]&_bbbcf .Data [_fafee ],_cgfg );};};case PixSrcXorDst :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]^=_ddab .Data [_ccab ];_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],_ddab .Data [_ccab ]^_bbbcf .Data [_fafee ],_cgfg );};};case PixNotSrcOrDst :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]|=^(_ddab .Data [_ccab ]);_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],^(_ddab .Data [_ccab ])|_bbbcf .Data [_fafee ],_cgfg );};};case PixNotSrcAndDst :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]&=^(_ddab .Data [_ccab ]);_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],^(_ddab .Data [_ccab ])&_bbbcf .Data [_fafee ],_cgfg );};};case PixSrcOrNotDst :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]=_ddab .Data [_ccab ]|^(_bbbcf .Data [_fafee ]);_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],_ddab .Data [_ccab ]|^(_bbbcf .Data [_fafee ]),_cgfg );};};case PixSrcAndNotDst :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]=_ddab .Data [_ccab ]&^(_bbbcf .Data [_fafee ]);_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],_ddab .Data [_ccab ]&^(_bbbcf .Data [_fafee ]),_cgfg );};};case PixNotPixSrcOrDst :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]=^(_ddab .Data [_ccab ]|_bbbcf .Data [_fafee ]);_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],^(_ddab .Data [_ccab ]|_bbbcf .Data [_fafee ]),_cgfg );};};case PixNotPixSrcAndDst :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]=^(_ddab .Data [_ccab ]&_bbbcf .Data [_fafee ]);_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],^(_ddab .Data [_ccab ]&_bbbcf .Data [_fafee ]),_cgfg );};};case PixNotPixSrcXorDst :for _cacb =0;_cacb < _ggcc ;_cacb ++{_ccab =_bgaa +_cacb *_ddab .RowStride ;_fafee =_cgbb +_cacb *_bbbcf .RowStride ;for _gfea =0;_gfea < _beadb ;_gfea ++{_bbbcf .Data [_fafee ]=^(_ddab .Data [_ccab ]^_bbbcf .Data [_fafee ]);_fafee ++;_ccab ++;};if _aeae > 0{_bbbcf .Data [_fafee ]=_fafeec (_bbbcf .Data [_fafee ],^(_ddab .Data [_ccab ]^_bbbcf .Data [_fafee ]),_cgfg );};};default:_ggc .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_gbdf );return _gg .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _eccbda (_fad *Bitmap )(_beae *Bitmap ,_ecce int ,_bbcd error ){const _gdce ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _fad ==nil {return nil ,0,_gg .Errorf (_gdce ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _cdf ,_aacg *Bitmap ;if _cdf ,_bbcd =_bdaa (nil ,_fad );_bbcd !=nil {return nil ,0,_gg .Wrap (_bbcd ,_gdce ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_acbbc [13]int ;_aaf ,_bcgd int ;);_efaa :=12;_bcgdf :=_fd .NewNumSlice (_efaa +1);_bbcg :=_fd .NewNumSlice (_efaa +1);var _ffdc *Boxes ;for _geda :=0;_geda <=_efaa ;_geda ++{if _geda ==0{if _aacg ,_bbcd =_bdaa (nil ,_cdf );_bbcd !=nil {return nil ,0,_gg .Wrap (_bbcd ,_gdce ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _aacg ,_bbcd =_cgac (_cdf ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_bbcd !=nil {return nil ,0,_gg .Wrap (_bbcd ,_gdce ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _ffdc ,_bbcd =_aacg .connComponentsBB (4);_bbcd !=nil {return nil ,0,_gg .Wrap (_bbcd ,_gdce ,"");};_acbbc [_geda ]=len (*_ffdc );_bcgdf .AddInt (_acbbc [_geda ]);switch _geda {case 0:_aaf =_acbbc [0];default:_bcgd =_acbbc [_geda -1]-_acbbc [_geda ];_bbcg .AddInt (_bcgd );};_cdf =_aacg ;};_bead :=true ;_geec :=2;var _bcf ,_abde int ;for _dbdf :=1;_dbdf < len (*_bbcg );_dbdf ++{if _bcf ,_bbcd =_bcgdf .GetInt (_dbdf );_bbcd !=nil {return nil ,0,_gg .Wrap (_bbcd ,_gdce ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _bead &&_bcf < int (0.3*float32 (_aaf )){_geec =_dbdf +1;_bead =false ;};if _bcgd ,_bbcd =_bbcg .GetInt (_dbdf );_bbcd !=nil {return nil ,0,_gg .Wrap (_bbcd ,_gdce ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _bcgd > _abde {_abde =_bcgd ;};};_cbef :=_fad .XResolution ;if _cbef ==0{_cbef =150;};if _cbef > 110{_geec ++;};if _geec < 2{_ggc .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");_geec =2;};_ecce =_geec +1;if _beae ,_bbcd =_afea (nil ,_fad ,_geec +1,1);_bbcd !=nil {return nil ,0,_gg .Wrap (_bbcd ,_gdce ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _beae ,_ecce ,nil ;};var _egcd =[5]int {1,2,3,0,4};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_cefdd *Boxes )Add (box *_fde .Rectangle )error {if _cefdd ==nil {return _gg .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_cefdd =append (*_cefdd ,box );return nil ;};var _ _f .Interface =&ClassedPoints {};func _bga (_gffa ,_daab ,_ggeg *Bitmap )(*Bitmap ,error ){const _abe ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _daab ==nil {return nil ,_gg .Error (_abe ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ggeg ==nil {return nil ,_gg .Error (_abe ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _ecgg error ;switch {case _gffa ==_daab :if _ecgg =_gffa .RasterOperation (0,0,_daab .Width ,_daab .Height ,PixNotSrcAndDst ,_ggeg ,0,0);_ecgg !=nil {return nil ,_gg .Wrap (_ecgg ,_abe ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _gffa ==_ggeg :if _ecgg =_gffa .RasterOperation (0,0,_daab .Width ,_daab .Height ,PixNotSrcAndDst ,_daab ,0,0);_ecgg !=nil {return nil ,_gg .Wrap (_ecgg ,_abe ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_gffa ,_ecgg =_bdaa (_gffa ,_daab );if _ecgg !=nil {return nil ,_gg .Wrap (_ecgg ,_abe ,"");};if _ecgg =_gffa .RasterOperation (0,0,_daab .Width ,_daab .Height ,PixNotSrcAndDst ,_ggeg ,0,0);_ecgg !=nil {return nil ,_gg .Wrap (_ecgg ,_abe ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _gffa ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _efaae ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_bccg ,_geeb :=p1 .Width ,p1 .Height ;_gbba ,_defe :=p3 .Width ,p3 .Height ;if _fd .Abs (_bccg -_gbba )> maxDiffW {return false ,nil ;};if _fd .Abs (_geeb -_defe )> maxDiffH {return false ,nil ;};_dffd :=int (delX +_fd .Sign (delX )*0.5);_acca :=int (delY +_fd .Sign (delY )*0.5);var _gfcd error ;_eeec :=p1 .CreateTemplate ();if _gfcd =_eeec .RasterOperation (0,0,_bccg ,_geeb ,PixSrc ,p1 ,0,0);_gfcd !=nil {return false ,_gg .Wrap (_gfcd ,_efaae ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gfcd =_eeec .RasterOperation (_dffd ,_acca ,_bccg ,_geeb ,PixNotSrcAndDst ,p4 ,0,0);_gfcd !=nil {return false ,_gg .Wrap (_gfcd ,_efaae ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _eeec .Zero (){return false ,nil ;};if _gfcd =_eeec .RasterOperation (_dffd ,_acca ,_gbba ,_defe ,PixSrc ,p3 ,0,0);_gfcd !=nil {return false ,_gg .Wrap (_gfcd ,_efaae ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gfcd =_eeec .RasterOperation (0,0,_gbba ,_defe ,PixNotSrcAndDst ,p2 ,0,0);_gfcd !=nil {return false ,_gg .Wrap (_gfcd ,_efaae ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _eeec .Zero (),nil ;};func (_gfbgb *Selection )setOrigin (_bfbg ,_bbbdc int ){_gfbgb .Cy ,_gfbgb .Cx =_bfbg ,_bbbdc };const (_ccgbg shift =iota ;_cefdc ;);type CombinationOperator int ;func TstFrameBitmap ()*Bitmap {return _gfgc .Copy ()};func (_fgeb *Bitmaps )selectByIndexes (_beca []int )(*Bitmaps ,error ){_afeaf :=&Bitmaps {};for _ ,_gggc :=range _beca {_afagd ,_acgc :=_fgeb .GetBitmap (_gggc );if _acgc !=nil {return nil ,_gg .Wrap (_acgc ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_afeaf .AddBitmap (_afagd );};return _afeaf ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};