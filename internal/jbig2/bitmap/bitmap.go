//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_fd "encoding/binary";_dg "github.com/stretchr/testify/require";_g "github.com/unidoc/unipdf/v3/common";_ba "github.com/unidoc/unipdf/v3/internal/bitwise";_df "github.com/unidoc/unipdf/v3/internal/imageutil";_bg "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "image";_a "math";_ee "sort";_e "strings";_dgg "testing";);func _dggee (_fcfa ,_gebe *Bitmap ,_aaaf ,_fafd ,_edec uint ,_bedd ,_dfge int ,_edfcd bool ,_cfeb ,_aegc int )error {for _fgcd :=_bedd ;
_fgcd < _dfge ;_fgcd ++{if _cfeb +1< len (_fcfa .Data ){_dcaa :=_fgcd +1==_dfge ;_feba ,_cabb :=_fcfa .GetByte (_cfeb );if _cabb !=nil {return _cabb ;};_cfeb ++;_feba <<=_aaaf ;_dcfgb ,_cabb :=_fcfa .GetByte (_cfeb );if _cabb !=nil {return _cabb ;};_dcfgb >>=_fafd ;
_gabaa :=_feba |_dcfgb ;if _dcaa &&!_edfcd {_gabaa =_cdde (_edec ,_gabaa );};_cabb =_gebe .SetByte (_aegc ,_gabaa );if _cabb !=nil {return _cabb ;};_aegc ++;if _dcaa &&_edfcd {_abbg ,_beec :=_fcfa .GetByte (_cfeb );if _beec !=nil {return _beec ;};_abbg <<=_aaaf ;
_gabaa =_cdde (_edec ,_abbg );if _beec =_gebe .SetByte (_aegc ,_gabaa );_beec !=nil {return _beec ;};};continue ;};_abgd ,_agfe :=_fcfa .GetByte (_cfeb );if _agfe !=nil {_g .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_cfeb ,_agfe );
return _agfe ;};_abgd <<=_aaaf ;_cfeb ++;_agfe =_gebe .SetByte (_aegc ,_abgd );if _agfe !=nil {return _agfe ;};_aegc ++;};return nil ;};func (_dec *Bitmap )SizesEqual (s *Bitmap )bool {if _dec ==s {return true ;};if _dec .Width !=s .Width ||_dec .Height !=s .Height {return false ;
};return true ;};var _bbab =[5]int {1,2,3,0,4};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _afcd (oldByte ,newByte ,op );};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _dfcf (src ,sequence ...);
};func _de (_dbc ,_aae *Bitmap )(_ebg error ){const _afe ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_eg :=_aae .RowStride ;_gg :=_dbc .RowStride ;var _cc ,_dga ,_ea ,_cf ,_dcb int ;for _ea =0;
_ea < _aae .Height ;_ea ++{_cc =_ea *_eg ;_dga =8*_ea *_gg ;for _cf =0;_cf < _eg ;_cf ++{if _ebg =_dbc .setEightBytes (_dga +_cf *8,_bfed [_aae .Data [_cc +_cf ]]);_ebg !=nil {return _b .Wrap (_ebg ,_afe ,"");};};for _dcb =1;_dcb < 8;_dcb ++{for _cf =0;
_cf < _gg ;_cf ++{if _ebg =_dbc .SetByte (_dga +_dcb *_gg +_cf ,_dbc .Data [_dga +_cf ]);_ebg !=nil {return _b .Wrap (_ebg ,_afe ,"");};};};};return nil ;};func (_efef MorphProcess )getWidthHeight ()(_cecbe ,_adb int ){return _efef .Arguments [0],_efef .Arguments [1];
};func _fgdaf (_ebdce *Bitmap ,_faddg *Bitmap ,_edab *Selection )(*Bitmap ,error ){var (_cabg *Bitmap ;_fddg error ;);_ebdce ,_fddg =_cbfc (_ebdce ,_faddg ,_edab ,&_cabg );if _fddg !=nil {return nil ,_fddg ;};if _fddg =_ebdce .clearAll ();_fddg !=nil {return nil ,_fddg ;
};var _cdgf SelectionValue ;for _gcfc :=0;_gcfc < _edab .Height ;_gcfc ++{for _caad :=0;_caad < _edab .Width ;_caad ++{_cdgf =_edab .Data [_gcfc ][_caad ];if _cdgf ==SelHit {if _fddg =_ebdce .RasterOperation (_caad -_edab .Cx ,_gcfc -_edab .Cy ,_faddg .Width ,_faddg .Height ,PixSrcOrDst ,_cabg ,0,0);
_fddg !=nil {return nil ,_fddg ;};};};};return _ebdce ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_bgf *Bitmap )ToImage ()_f .Image {_cgd ,_cfee :=_df .NewImage (_bgf .Width ,_bgf .Height ,1,1,_bgf .Data ,nil ,nil );
if _cfee !=nil {_g .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cfee );
};return _cgd ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_fgdff float64 ,_edae error ){const _afb ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _fgdff ,_b .Error (_afb ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _fgdff ,_b .Error (_afb ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _fgdff ,_b .Error (_afb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_ecce ,_dbedc :=bm1 .Width ,bm1 .Height ;_faea ,_dabc :=bm2 .Width ,bm2 .Height ;
if _ffgg (_ecce -_faea )> maxDiffW {return 0,nil ;};if _ffgg (_dbedc -_dabc )> maxDiffH {return 0,nil ;};var _acbd ,_gggb int ;if delX >=0{_acbd =int (delX +0.5);}else {_acbd =int (delX -0.5);};if delY >=0{_gggb =int (delY +0.5);}else {_gggb =int (delY -0.5);
};_aacd :=bm1 .createTemplate ();if _edae =_aacd .RasterOperation (_acbd ,_gggb ,_faea ,_dabc ,PixSrc ,bm2 ,0,0);_edae !=nil {return _fgdff ,_b .Wrap (_edae ,_afb ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _edae =_aacd .RasterOperation (0,0,_ecce ,_dbedc ,PixSrcAndDst ,bm1 ,0,0);
_edae !=nil {return _fgdff ,_b .Wrap (_edae ,_afb ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_fdfb :=_aacd .countPixels ();_fgdff =float64 (_fdfb )*float64 (_fdfb )/(float64 (area1 )*float64 (area2 ));return _fgdff ,nil ;};func TstFrameBitmap ()*Bitmap {return _cegca .Copy ()};
func (_ccc *Bitmap )SetPixel (x ,y int ,pixel byte )error {_efcg :=_ccc .GetByteIndex (x ,y );if _efcg > len (_ccc .Data )-1{return _b .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_efcg );
};_def :=_ccc .GetBitOffset (x );_ebge :=uint (7-_def );_bfgbb :=_ccc .Data [_efcg ];var _fca byte ;if pixel ==1{_fca =_bfgbb |(pixel &0x01<<_ebge );}else {_fca =_bfgbb &^(1<<_ebge );};_ccc .Data [_efcg ]=_fca ;return nil ;};func _agfcf (_edad ,_bdac *Bitmap ,_cbcdf *Selection )(*Bitmap ,error ){const _cbdee ="\u006f\u0070\u0065\u006e";
var _dfaf error ;_edad ,_dfaf =_ebcag (_edad ,_bdac ,_cbcdf );if _dfaf !=nil {return nil ,_b .Wrap (_dfaf ,_cbdee ,"");};_dbfe ,_dfaf :=_cddc (nil ,_bdac ,_cbcdf );if _dfaf !=nil {return nil ,_b .Wrap (_dfaf ,_cbdee ,"");};_ ,_dfaf =_fgdaf (_edad ,_dbfe ,_cbcdf );
if _dfaf !=nil {return nil ,_b .Wrap (_dfaf ,_cbdee ,"");};return _edad ,nil ;};func _bfbd (_fdff *Bitmap ,_fbaf ,_dbec ,_ffage ,_dfacc int ,_becec RasterOperator ,_afgef *Bitmap ,_cdeaa ,_ebdd int )error {var (_efcf bool ;_fbec bool ;_bffff byte ;_bbcf int ;
_gceb int ;_dgcc int ;_cdgg int ;_abfbb bool ;_daf int ;_aagad int ;_fddgc int ;_gaaeg bool ;_gebd byte ;_fgaf int ;_ccec int ;_ecdf int ;_gccf byte ;_fgaca int ;_eefe int ;_abce uint ;_eabf uint ;_beage byte ;_fcge shift ;_bfgfe bool ;_ffaga bool ;_ddgba ,_dcfcg int ;
);if _cdeaa &7!=0{_eefe =8-(_cdeaa &7);};if _fbaf &7!=0{_gceb =8-(_fbaf &7);};if _eefe ==0&&_gceb ==0{_beage =_bfccf [0];}else {if _gceb > _eefe {_abce =uint (_gceb -_eefe );}else {_abce =uint (8-(_eefe -_gceb ));};_eabf =8-_abce ;_beage =_bfccf [_abce ];
};if (_fbaf &7)!=0{_efcf =true ;_bbcf =8-(_fbaf &7);_bffff =_bfccf [_bbcf ];_dgcc =_fdff .RowStride *_dbec +(_fbaf >>3);_cdgg =_afgef .RowStride *_ebdd +(_cdeaa >>3);_fgaca =8-(_cdeaa &7);if _bbcf > _fgaca {_fcge =_ggda ;if _ffage >=_eefe {_bfgfe =true ;
};}else {_fcge =_dgcd ;};};if _ffage < _bbcf {_fbec =true ;_bffff &=_daacf [8-_bbcf +_ffage ];};if !_fbec {_daf =(_ffage -_bbcf )>>3;if _daf !=0{_abfbb =true ;_aagad =_fdff .RowStride *_dbec +((_fbaf +_gceb )>>3);_fddgc =_afgef .RowStride *_ebdd +((_cdeaa +_gceb )>>3);
};};_fgaf =(_fbaf +_ffage )&7;if !(_fbec ||_fgaf ==0){_gaaeg =true ;_gebd =_daacf [_fgaf ];_ccec =_fdff .RowStride *_dbec +((_fbaf +_gceb )>>3)+_daf ;_ecdf =_afgef .RowStride *_ebdd +((_cdeaa +_gceb )>>3)+_daf ;if _fgaf > int (_eabf ){_ffaga =true ;};};
switch _becec {case PixSrc :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;
};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],_gccf ,_bffff );_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );
_fdff .Data [_aagad +_dcfcg ]=_gccf ;};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;};};if _gaaeg {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );
};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],_gccf ,_gebd );_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;};};case PixNotSrc :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );
};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],^_gccf ,_bffff );_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;_dcfcg < _daf ;
_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );_fdff .Data [_aagad +_dcfcg ]=^_gccf ;};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;};};if _gaaeg {for _ddgba =0;_ddgba < _dfacc ;
_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],^_gccf ,_gebd );_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;};};case PixSrcOrDst :if _efcf {for _ddgba =0;
_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],_gccf |_fdff .Data [_dgcc ],_bffff );
_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );_fdff .Data [_aagad +_dcfcg ]|=_gccf ;
};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;};};if _gaaeg {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],_gccf |_fdff .Data [_ccec ],_gebd );
_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;};};case PixSrcAndDst :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );
};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],_gccf &_fdff .Data [_dgcc ],_bffff );_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;
_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );_fdff .Data [_aagad +_dcfcg ]&=_gccf ;};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;};};if _gaaeg {for _ddgba =0;
_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],_gccf &_fdff .Data [_ccec ],_gebd );_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;
};};case PixSrcXorDst :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],_gccf ^_fdff .Data [_dgcc ],_bffff );
_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );_fdff .Data [_aagad +_dcfcg ]^=_gccf ;
};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;};};if _gaaeg {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],_gccf ^_fdff .Data [_ccec ],_gebd );
_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;};};case PixNotSrcOrDst :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );
};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],^_gccf |_fdff .Data [_dgcc ],_bffff );_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;
_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );_fdff .Data [_aagad +_dcfcg ]|=^_gccf ;};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;};};if _gaaeg {for _ddgba =0;
_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],^_gccf |_fdff .Data [_ccec ],_gebd );_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;
};};case PixNotSrcAndDst :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};
_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],^_gccf &_fdff .Data [_dgcc ],_bffff );_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );
_fdff .Data [_aagad +_dcfcg ]&=^_gccf ;};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;};};if _gaaeg {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );
};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],^_gccf &_fdff .Data [_ccec ],_gebd );_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;};};case PixSrcOrNotDst :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;
if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],_gccf |^_fdff .Data [_dgcc ],_bffff );_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;
};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );_fdff .Data [_aagad +_dcfcg ]=_gccf |^_fdff .Data [_aagad +_dcfcg ];
};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;};};if _gaaeg {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],_gccf |^_fdff .Data [_ccec ],_gebd );
_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;};};case PixSrcAndNotDst :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );
};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],_gccf &^_fdff .Data [_dgcc ],_bffff );_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;
_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );_fdff .Data [_aagad +_dcfcg ]=_gccf &^_fdff .Data [_aagad +_dcfcg ];};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;
};};if _gaaeg {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],_gccf &^_fdff .Data [_ccec ],_gebd );
_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;};};case PixNotPixSrcOrDst :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );
};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],^(_gccf |_fdff .Data [_dgcc ]),_bffff );_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;
_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );_fdff .Data [_aagad +_dcfcg ]=^(_gccf |_fdff .Data [_aagad +_dcfcg ]);};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;
};};if _gaaeg {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],^(_gccf |_fdff .Data [_ccec ]),_gebd );
_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;};};case PixNotPixSrcAndDst :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );
};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],^(_gccf &_fdff .Data [_dgcc ]),_bffff );_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;
_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );_fdff .Data [_aagad +_dcfcg ]=^(_gccf &_fdff .Data [_aagad +_dcfcg ]);};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;
};};if _gaaeg {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],^(_gccf &_fdff .Data [_ccec ]),_gebd );
_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;};};case PixNotPixSrcXorDst :if _efcf {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{if _fcge ==_ggda {_gccf =_afgef .Data [_cdgg ]<<_abce ;if _bfgfe {_gccf =_ceed (_gccf ,_afgef .Data [_cdgg +1]>>_eabf ,_beage );
};}else {_gccf =_afgef .Data [_cdgg ]>>_eabf ;};_fdff .Data [_dgcc ]=_ceed (_fdff .Data [_dgcc ],^(_gccf ^_fdff .Data [_dgcc ]),_bffff );_dgcc +=_fdff .RowStride ;_cdgg +=_afgef .RowStride ;};};if _abfbb {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{for _dcfcg =0;
_dcfcg < _daf ;_dcfcg ++{_gccf =_ceed (_afgef .Data [_fddgc +_dcfcg ]<<_abce ,_afgef .Data [_fddgc +_dcfcg +1]>>_eabf ,_beage );_fdff .Data [_aagad +_dcfcg ]=^(_gccf ^_fdff .Data [_aagad +_dcfcg ]);};_aagad +=_fdff .RowStride ;_fddgc +=_afgef .RowStride ;
};};if _gaaeg {for _ddgba =0;_ddgba < _dfacc ;_ddgba ++{_gccf =_afgef .Data [_ecdf ]<<_abce ;if _ffaga {_gccf =_ceed (_gccf ,_afgef .Data [_ecdf +1]>>_eabf ,_beage );};_fdff .Data [_ccec ]=_ceed (_fdff .Data [_ccec ],^(_gccf ^_fdff .Data [_ccec ]),_gebd );
_ccec +=_fdff .RowStride ;_ecdf +=_afgef .RowStride ;};};default:_g .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_becec );
return _b .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_cdfd Points )XSorter ()func (_fgba ,_eabb int )bool {return func (_dadc ,_adge int )bool {return _cdfd [_dadc ].X < _cdfd [_adge ].X };};func (_ecga *Bitmaps )AddBitmap (bm *Bitmap ){_ecga .Values =append (_ecga .Values ,bm )};func init (){for _bfe :=0;
_bfe < 256;_bfe ++{_dbcc [_bfe ]=uint8 (_bfe &0x1)+(uint8 (_bfe >>1)&0x1)+(uint8 (_bfe >>2)&0x1)+(uint8 (_bfe >>3)&0x1)+(uint8 (_bfe >>4)&0x1)+(uint8 (_bfe >>5)&0x1)+(uint8 (_bfe >>6)&0x1)+(uint8 (_bfe >>7)&0x1);};};func (_ggfb *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _eddd ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _ggfb ==nil {return nil ,_b .Error (_eddd ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_b .Error (_eddd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_afgg :=len (_ggfb .Values );_ecdef :=&Bitmaps {Values :make ([]*Bitmap ,_afgg ),Boxes :make ([]*_f .Rectangle ,_afgg )};var (_dgacb ,_cbeb *Bitmap ;_cfdcf *_f .Rectangle ;_abdg error ;);for _eecd :=0;_eecd < _afgg ;_eecd ++{if _dgacb ,_abdg =_ggfb .GetBitmap (_eecd );
_abdg !=nil {return nil ,_b .Wrap (_abdg ,_eddd ,"");};if _cfdcf ,_abdg =_ggfb .GetBox (_eecd );_abdg !=nil {return nil ,_b .Wrap (_abdg ,_eddd ,"");};if _cbeb ,_abdg =s .clipRectangle (_cfdcf ,nil );_abdg !=nil {return nil ,_b .Wrap (_abdg ,_eddd ,"");
};if _cbeb ,_abdg =_cbeb .And (_dgacb );_abdg !=nil {return nil ,_b .Wrap (_abdg ,_eddd ,"");};_ecdef .Values [_eecd ]=_cbeb ;_ecdef .Boxes [_eecd ]=_cfdcf ;};return _ecdef ,nil ;};type Component int ;func _egbg (_eacdg ,_efefd *Bitmap ,_ddfd ,_agda int )(*Bitmap ,error ){const _dfde ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _efefd ==nil {return nil ,_b .Error (_dfde ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ddfd < 1&&_agda < 1{return nil ,_b .Error (_dfde ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _ddfd ==1&&_agda ==1{return _efefd .Copy (),nil ;};if _ddfd ==1||_agda ==1{var _eacf error ;_dbcd :=SelCreateBrick (_agda ,_ddfd ,_agda /2,_ddfd /2,SelHit );_eacdg ,_eacf =_agfcf (_eacdg ,_efefd ,_dbcd );if _eacf !=nil {return nil ,_b .Wrap (_eacf ,_dfde ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _eacdg ,nil ;};_eefd :=SelCreateBrick (1,_ddfd ,0,_ddfd /2,SelHit );_decb :=SelCreateBrick (_agda ,1,_agda /2,0,SelHit );_fcbdg ,_efad :=_cddc (nil ,_efefd ,_eefd );if _efad !=nil {return nil ,_b .Wrap (_efad ,_dfde ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_eacdg ,_efad =_cddc (_eacdg ,_fcbdg ,_decb );if _efad !=nil {return nil ,_b .Wrap (_efad ,_dfde ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_efad =_fgdaf (_fcbdg ,_eacdg ,_eefd );if _efad !=nil {return nil ,_b .Wrap (_efad ,_dfde ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_efad =_fgdaf (_eacdg ,_fcbdg ,_decb );if _efad !=nil {return nil ,_b .Wrap (_efad ,_dfde ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _eacdg ,nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;
SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func _bgc (_gbg ,_bdg *Bitmap ,_bab int ,_dbbf []byte ,_ddf int )(_gec error ){const _gfe ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_bbd ,_eed ,_fgb ,_gbc ,_beg ,_aac ,_afga ,_bagg int ;_bff ,_aed uint32 ;_eab ,_aee byte ;_dgd uint16 ;);_gdd :=make ([]byte ,4);_fed :=make ([]byte ,4);for _fgb =0;_fgb < _gbg .Height -1;_fgb ,_gbc =_fgb +2,_gbc +1{_bbd =_fgb *_gbg .RowStride ;_eed =_gbc *_bdg .RowStride ;
for _beg ,_aac =0,0;_beg < _ddf ;_beg ,_aac =_beg +4,_aac +1{for _afga =0;_afga < 4;_afga ++{_bagg =_bbd +_beg +_afga ;if _bagg <=len (_gbg .Data )-1&&_bagg < _bbd +_gbg .RowStride {_gdd [_afga ]=_gbg .Data [_bagg ];}else {_gdd [_afga ]=0x00;};_bagg =_bbd +_gbg .RowStride +_beg +_afga ;
if _bagg <=len (_gbg .Data )-1&&_bagg < _bbd +(2*_gbg .RowStride ){_fed [_afga ]=_gbg .Data [_bagg ];}else {_fed [_afga ]=0x00;};};_bff =_fd .BigEndian .Uint32 (_gdd );_aed =_fd .BigEndian .Uint32 (_fed );_aed |=_bff ;_aed |=_aed <<1;_aed &=0xaaaaaaaa;
_bff =_aed |(_aed <<7);_eab =byte (_bff >>24);_aee =byte ((_bff >>8)&0xff);_bagg =_eed +_aac ;if _bagg +1==len (_bdg .Data )-1||_bagg +1>=_eed +_bdg .RowStride {_bdg .Data [_bagg ]=_dbbf [_eab ];}else {_dgd =(uint16 (_dbbf [_eab ])<<8)|uint16 (_dbbf [_aee ]);
if _gec =_bdg .setTwoBytes (_bagg ,_dgd );_gec !=nil {return _b .Wrapf (_gec ,_gfe ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bagg );
};_aac ++;};};};return nil ;};var _ _ee .Interface =&ClassedPoints {};func (_fbegb *byHeight )Len ()int {return len (_fbegb .Values )};func (_aef *Bitmap )GetVanillaData ()[]byte {if _aef .Color ==Chocolate {_aef .inverseData ();};return _aef .Data ;};
func _gefag (_bdab *_bg .Stack )(_edef *fillSegment ,_gfga error ){const _gcce ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _bdab ==nil {return nil ,_b .Error (_gcce ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _bdab .Aux ==nil {return nil ,_b .Error (_gcce ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_gcbee ,_gbad :=_bdab .Pop ();if !_gbad {return nil ,nil ;};_bfgc ,_gbad :=_gcbee .(*fillSegment );
if !_gbad {return nil ,_b .Error (_gcce ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_edef =&fillSegment {_bfgc ._ecgf ,_bfgc ._baggea ,_bfgc ._fbbc +_bfgc ._fbgf ,_bfgc ._fbgf };
_bdab .Aux .Push (_bfgc );return _edef ,nil ;};func (_afcc *Bitmap )ClipRectangle (box *_f .Rectangle )(_cgf *Bitmap ,_dbed *_f .Rectangle ,_cee error ){const _dge ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_b .Error (_dge ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};_fdf ,_edfg :=_afcc .Width ,_afcc .Height ;_feee :=_f .Rect (0,0,_fdf ,_edfg );if !box .Overlaps (_feee ){return nil ,nil ,_b .Error (_dge ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_cbg :=box .Intersect (_feee );
_ccbb ,_dbbb :=_cbg .Min .X ,_cbg .Min .Y ;_ebcc ,_fbda :=_cbg .Dx (),_cbg .Dy ();_cgf =New (_ebcc ,_fbda );_cgf .Text =_afcc .Text ;if _cee =_cgf .RasterOperation (0,0,_ebcc ,_fbda ,PixSrc ,_afcc ,_ccbb ,_dbbb );_cee !=nil {return nil ,nil ,_b .Wrap (_cee ,_dge ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_dbed =&_cbg ;return _cgf ,_dbed ,nil ;};func (_dgea *Bitmap )setBit (_cbcc int ){_dgea .Data [(_cbcc >>3)]|=0x80>>uint (_cbcc &7)};func _afcd (_baca ,_egfe byte ,_gabba CombinationOperator )byte {switch _gabba {case CmbOpOr :return _egfe |_baca ;case CmbOpAnd :return _egfe &_baca ;
case CmbOpXor :return _egfe ^_baca ;case CmbOpXNor :return ^(_egfe ^_baca );case CmbOpNot :return ^(_egfe );default:return _egfe ;};};func _dfcf (_ecfd *Bitmap ,_acac ...MorphProcess )(_bcfc *Bitmap ,_bbcd error ){const _faee ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _ecfd ==nil {return nil ,_b .Error (_faee ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_acac )==0{return nil ,_b .Error (_faee ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _bbcd =_gedce (_acac ...);
_bbcd !=nil {return nil ,_b .Wrap (_bbcd ,_faee ,"");};var _geeba ,_adegc ,_gdcb int ;_bcfc =_ecfd .Copy ();for _ ,_dbgf :=range _acac {switch _dbgf .Operation {case MopDilation :_geeba ,_adegc =_dbgf .getWidthHeight ();_bcfc ,_bbcd =DilateBrick (nil ,_bcfc ,_geeba ,_adegc );
if _bbcd !=nil {return nil ,_b .Wrap (_bbcd ,_faee ,"");};case MopErosion :_geeba ,_adegc =_dbgf .getWidthHeight ();_bcfc ,_bbcd =_adeg (nil ,_bcfc ,_geeba ,_adegc );if _bbcd !=nil {return nil ,_b .Wrap (_bbcd ,_faee ,"");};case MopOpening :_geeba ,_adegc =_dbgf .getWidthHeight ();
_bcfc ,_bbcd =_egbg (nil ,_bcfc ,_geeba ,_adegc );if _bbcd !=nil {return nil ,_b .Wrap (_bbcd ,_faee ,"");};case MopClosing :_geeba ,_adegc =_dbgf .getWidthHeight ();_bcfc ,_bbcd =_eaag (nil ,_bcfc ,_geeba ,_adegc );if _bbcd !=nil {return nil ,_b .Wrap (_bbcd ,_faee ,"");
};case MopRankBinaryReduction :_bcfc ,_bbcd =_afg (_bcfc ,_dbgf .Arguments ...);if _bbcd !=nil {return nil ,_b .Wrap (_bbcd ,_faee ,"");};case MopReplicativeBinaryExpansion :_bcfc ,_bbcd =_bbec (_bcfc ,_dbgf .Arguments [0]);if _bbcd !=nil {return nil ,_b .Wrap (_bbcd ,_faee ,"");
};case MopAddBorder :_gdcb =_dbgf .Arguments [0];_bcfc ,_bbcd =_bcfc .AddBorder (_gdcb ,0);if _bbcd !=nil {return nil ,_b .Wrap (_bbcd ,_faee ,"");};default:return nil ,_b .Error (_faee ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _gdcb > 0{_bcfc ,_bbcd =_bcfc .RemoveBorder (_gdcb );if _bbcd !=nil {return nil ,_b .Wrap (_bbcd ,_faee ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _bcfc ,nil ;};var _dbcc [256]uint8 ;func TstESymbol (t *_dgg .T ,scale ...int )*Bitmap {_gdccd ,_bgab :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_dg .NoError (t ,_bgab );return TstGetScaledSymbol (t ,_gdccd ,scale ...);};func (_bgda *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_bfgg *Bitmaps ,_dgag error ){const _fddc ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _bgda ==nil {return nil ,_b .Error (_fddc ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_fddc ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_b .Errorf (_fddc ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_aedg ,_dgag :=_bgda .makeSizeIndicator (width ,height ,tp ,relation );if _dgag !=nil {return nil ,_b .Wrap (_dgag ,_fddc ,"");};_bfgg ,_dgag =_bgda .selectByIndicator (_aedg );if _dgag !=nil {return nil ,_b .Wrap (_dgag ,_fddc ,"");};return _bfgg ,nil ;
};func _fcefa (_ggbb *Bitmap ,_gegfd ,_efaf int ,_dgacf ,_abcf int ,_ffcb RasterOperator ){var (_fbg int ;_gefc byte ;_gdfa ,_efdgd int ;_ebdg int ;);_aegd :=_dgacf >>3;_gcaa :=_dgacf &7;if _gcaa > 0{_gefc =_daacf [_gcaa ];};_fbg =_ggbb .RowStride *_efaf +(_gegfd >>3);
switch _ffcb {case PixClr :for _gdfa =0;_gdfa < _abcf ;_gdfa ++{_ebdg =_fbg +_gdfa *_ggbb .RowStride ;for _efdgd =0;_efdgd < _aegd ;_efdgd ++{_ggbb .Data [_ebdg ]=0x0;_ebdg ++;};if _gcaa > 0{_ggbb .Data [_ebdg ]=_ceed (_ggbb .Data [_ebdg ],0x0,_gefc );
};};case PixSet :for _gdfa =0;_gdfa < _abcf ;_gdfa ++{_ebdg =_fbg +_gdfa *_ggbb .RowStride ;for _efdgd =0;_efdgd < _aegd ;_efdgd ++{_ggbb .Data [_ebdg ]=0xff;_ebdg ++;};if _gcaa > 0{_ggbb .Data [_ebdg ]=_ceed (_ggbb .Data [_ebdg ],0xff,_gefc );};};case PixNotDst :for _gdfa =0;
_gdfa < _abcf ;_gdfa ++{_ebdg =_fbg +_gdfa *_ggbb .RowStride ;for _efdgd =0;_efdgd < _aegd ;_efdgd ++{_ggbb .Data [_ebdg ]=^_ggbb .Data [_ebdg ];_ebdg ++;};if _gcaa > 0{_ggbb .Data [_ebdg ]=_ceed (_ggbb .Data [_ebdg ],^_ggbb .Data [_ebdg ],_gefc );};};
};};func (_cabfg *ClassedPoints )validateIntSlice ()error {const _egfeb ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_gecfc :=range _cabfg .IntSlice {if _gecfc >=(_cabfg .Points .Size ()){return _b .Errorf (_egfeb ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_gecfc ,_cabfg .Points .Size ());
};};return nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _feda (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_fea *Bitmap )setEightFullBytes (_aefg int ,_ceae uint64 )error {if _aefg +7> len (_fea .Data )-1{return _b .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fea .Data [_aefg ]=byte ((_ceae &0xff00000000000000)>>56);_fea .Data [_aefg +1]=byte ((_ceae &0xff000000000000)>>48);_fea .Data [_aefg +2]=byte ((_ceae &0xff0000000000)>>40);_fea .Data [_aefg +3]=byte ((_ceae &0xff00000000)>>32);_fea .Data [_aefg +4]=byte ((_ceae &0xff000000)>>24);
_fea .Data [_aefg +5]=byte ((_ceae &0xff0000)>>16);_fea .Data [_aefg +6]=byte ((_ceae &0xff00)>>8);_fea .Data [_aefg +7]=byte (_ceae &0xff);return nil ;};func (_deac *Bitmaps )AddBox (box *_f .Rectangle ){_deac .Boxes =append (_deac .Boxes ,box )};func (_ebae MorphProcess )verify (_gbdbc int ,_ecgg ,_afbd *int )error {const _ecag ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _ebae .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_ebae .Arguments )!=2{return _b .Error (_ecag ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_feffg ,_bdag :=_ebae .getWidthHeight ();if _feffg <=0||_bdag <=0{return _b .Error (_ecag ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_agcc :=len (_ebae .Arguments );*_ecgg +=_agcc ;if _agcc < 1||_agcc > 4{return _b .Error (_ecag ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _cefe :=0;_cefe < _agcc ;_cefe ++{if _ebae .Arguments [_cefe ]< 1||_ebae .Arguments [_cefe ]> 4{return _b .Error (_ecag ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_ebae .Arguments )==0{return _b .Error (_ecag ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cagb :=_ebae .Arguments [0];if _cagb !=2&&_cagb !=4&&_cagb !=8{return _b .Error (_ecag ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_ecgg -=_bbab [_cagb /4];case MopAddBorder :if len (_ebae .Arguments )==0{return _b .Error (_ecag ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfba :=_ebae .Arguments [0];if _gbdbc > 0{return _b .Error (_ecag ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _gfba < 1{return _b .Error (_ecag ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_afbd =_gfba ;};return nil ;};const (_ SizeComparison =iota ;
SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_ead *Bitmap )setEightBytes (_dgeb int ,_aeea uint64 )error {_fbdfg :=_ead .RowStride -(_dgeb %_ead .RowStride );if _ead .RowStride !=_ead .Width >>3{_fbdfg --;};
if _fbdfg >=8{return _ead .setEightFullBytes (_dgeb ,_aeea );};return _ead .setEightPartlyBytes (_dgeb ,_fbdfg ,_aeea );};func (_dab *Bitmap )GetByte (index int )(byte ,error ){if index > len (_dab .Data )-1||index < 0{return 0,_b .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _dab .Data [index ],nil ;};func (_ccb *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _ccb .addBorderGeneral (left ,right ,top ,bot ,val );};func TstWSymbol (t *_dgg .T ,scale ...int )*Bitmap {_efeg ,_dfff :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_dg .NoError (t ,_dfff );return TstGetScaledSymbol (t ,_efeg ,scale ...);};func (_gdaa *Bitmap )setTwoBytes (_gegf int ,_eef uint16 )error {if _gegf +1> len (_gdaa .Data )-1{return _b .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_gegf );
};_gdaa .Data [_gegf ]=byte ((_eef &0xff00)>>8);_gdaa .Data [_gegf +1]=byte (_eef &0xff);return nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _ade (d ,s )};type MorphOperation int ;func TstCSymbol (t *_dgg .T )*Bitmap {t .Helper ();_ebdcb :=New (6,6);
_dg .NoError (t ,_ebdcb .SetPixel (1,0,1));_dg .NoError (t ,_ebdcb .SetPixel (2,0,1));_dg .NoError (t ,_ebdcb .SetPixel (3,0,1));_dg .NoError (t ,_ebdcb .SetPixel (4,0,1));_dg .NoError (t ,_ebdcb .SetPixel (0,1,1));_dg .NoError (t ,_ebdcb .SetPixel (5,1,1));
_dg .NoError (t ,_ebdcb .SetPixel (0,2,1));_dg .NoError (t ,_ebdcb .SetPixel (0,3,1));_dg .NoError (t ,_ebdcb .SetPixel (0,4,1));_dg .NoError (t ,_ebdcb .SetPixel (5,4,1));_dg .NoError (t ,_ebdcb .SetPixel (1,5,1));_dg .NoError (t ,_ebdcb .SetPixel (2,5,1));
_dg .NoError (t ,_ebdcb .SetPixel (3,5,1));_dg .NoError (t ,_ebdcb .SetPixel (4,5,1));return _ebdcb ;};func TstTSymbol (t *_dgg .T ,scale ...int )*Bitmap {_daea ,_bbef :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_dg .NoError (t ,_bbef );return TstGetScaledSymbol (t ,_daea ,scale ...);
};func _bgg (_gb ,_cg *Bitmap )(_gf error ){const _ab ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_be :=_cg .RowStride ;_gcb :=_gb .RowStride ;_ce :=_cg .RowStride *4-_gb .RowStride ;var (_fe ,_db byte ;
_gcg uint32 ;_aag ,_dbe ,_ad ,_cga ,_dd ,_ca ,_cb int ;);for _ad =0;_ad < _cg .Height ;_ad ++{_aag =_ad *_be ;_dbe =4*_ad *_gcb ;for _cga =0;_cga < _be ;_cga ++{_fe =_cg .Data [_aag +_cga ];_gcg =_agfdf [_fe ];_ca =_dbe +_cga *4;if _ce !=0&&(_cga +1)*4> _gb .RowStride {for _dd =_ce ;
_dd > 0;_dd --{_db =byte ((_gcg >>uint (_dd *8))&0xff);_cb =_ca +(_ce -_dd );if _gf =_gb .SetByte (_cb ,_db );_gf !=nil {return _b .Wrapf (_gf ,_ab ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_dd );
};};}else if _gf =_gb .setFourBytes (_ca ,_gcg );_gf !=nil {return _b .Wrap (_gf ,_ab ,"");};if _gf =_gb .setFourBytes (_dbe +_cga *4,_agfdf [_cg .Data [_aag +_cga ]]);_gf !=nil {return _b .Wrap (_gf ,_ab ,"");};};for _dd =1;_dd < 4;_dd ++{for _cga =0;
_cga < _gcb ;_cga ++{if _gf =_gb .SetByte (_dbe +_dd *_gcb +_cga ,_gb .Data [_dbe +_cga ]);_gf !=nil {return _b .Wrapf (_gf ,_ab ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_dd ,_cga );
};};};};return nil ;};func _ceed (_dfeg ,_fgbb ,_agdg byte )byte {return (_dfeg &^(_agdg ))|(_fgbb &_agdg )};func NewClassedPoints (points *Points ,classes _bg .IntSlice )(*ClassedPoints ,error ){const _bbba ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_b .Error (_bbba ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_b .Error (_bbba ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_bbcb :=&ClassedPoints {Points :points ,IntSlice :classes };if _dgdaf :=_bbcb .validateIntSlice ();_dgdaf !=nil {return nil ,_b .Wrap (_dgdaf ,_bbba ,"");};return _bbcb ,nil ;};type SelectionValue int ;func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _dggb ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_baf :=_gegb (width ,height );_baf .Data =data ;if _egg :=((width *height )+7)>>3;len (data )< _egg {return nil ,_b .Errorf (_dggb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_egg );
};if _ced :=_baf .addPadBits ();_ced !=nil {return nil ,_b .Wrap (_ced ,_dggb ,"");};return _baf ,nil ;};func (_dgf *Bitmap )equivalent (_ebdb *Bitmap )bool {if _dgf ==_ebdb {return true ;};if !_dgf .SizesEqual (_ebdb ){return false ;};_gagc :=_dde (_dgf ,_ebdb ,CmbOpXor );
_dbdf :=_dgf .countPixels ();_gfb :=int (0.25*float32 (_dbdf ));if _gagc .thresholdPixelSum (_gfb ){return false ;};var (_dcg [9][9]int ;_eeb [18][9]int ;_eace [9][18]int ;_gcgd int ;_gdg int ;);_bcfg :=9;_acec :=_dgf .Height /_bcfg ;_cfd :=_dgf .Width /_bcfg ;
_dfba ,_cagf :=_acec /2,_cfd /2;if _acec < _cfd {_dfba =_cfd /2;_cagf =_acec /2;};_egfdg :=float64 (_dfba )*float64 (_cagf )*_a .Pi ;_ffdd :=int (float64 (_acec *_cfd /2)*0.9);_gbee :=int (float64 (_cfd *_acec /2)*0.9);for _aeg :=0;_aeg < _bcfg ;_aeg ++{_ggec :=_cfd *_aeg +_gcgd ;
var _acfe int ;if _aeg ==_bcfg -1{_gcgd =0;_acfe =_dgf .Width ;}else {_acfe =_ggec +_cfd ;if ((_dgf .Width -_gcgd )%_bcfg )> 0{_gcgd ++;_acfe ++;};};for _faa :=0;_faa < _bcfg ;_faa ++{_aff :=_acec *_faa +_gdg ;var _fbdf int ;if _faa ==_bcfg -1{_gdg =0;
_fbdf =_dgf .Height ;}else {_fbdf =_aff +_acec ;if (_dgf .Height -_gdg )%_bcfg > 0{_gdg ++;_fbdf ++;};};var _geb ,_edfc ,_bbfg ,_eaa int ;_bgdg :=(_ggec +_acfe )/2;_cfea :=(_aff +_fbdf )/2;for _fcgg :=_ggec ;_fcgg < _acfe ;_fcgg ++{for _caa :=_aff ;_caa < _fbdf ;
_caa ++{if _gagc .GetPixel (_fcgg ,_caa ){if _fcgg < _bgdg {_geb ++;}else {_edfc ++;};if _caa < _cfea {_eaa ++;}else {_bbfg ++;};};};};_dcg [_aeg ][_faa ]=_geb +_edfc ;_eeb [_aeg *2][_faa ]=_geb ;_eeb [_aeg *2+1][_faa ]=_edfc ;_eace [_aeg ][_faa *2]=_eaa ;
_eace [_aeg ][_faa *2+1]=_bbfg ;};};for _gdf :=0;_gdf < _bcfg *2-1;_gdf ++{for _cabf :=0;_cabf < (_bcfg -1);_cabf ++{var _dgdbb int ;for _aaf :=0;_aaf < 2;_aaf ++{for _egda :=0;_egda < 2;_egda ++{_dgdbb +=_eeb [_gdf +_aaf ][_cabf +_egda ];};};if _dgdbb > _gbee {return false ;
};};};for _gddg :=0;_gddg < (_bcfg -1);_gddg ++{for _dee :=0;_dee < ((_bcfg *2)-1);_dee ++{var _fdbg int ;for _caed :=0;_caed < 2;_caed ++{for _agdf :=0;_agdf < 2;_agdf ++{_fdbg +=_eace [_gddg +_caed ][_dee +_agdf ];};};if _fdbg > _ffdd {return false ;
};};};for _bga :=0;_bga < (_bcfg -2);_bga ++{for _fdcg :=0;_fdcg < (_bcfg -2);_fdcg ++{var _ebgeg ,_deg int ;for _egdg :=0;_egdg < 3;_egdg ++{for _fdae :=0;_fdae < 3;_fdae ++{if _egdg ==_fdae {_ebgeg +=_dcg [_bga +_egdg ][_fdcg +_fdae ];};if (2-_egdg )==_fdae {_deg +=_dcg [_bga +_egdg ][_fdcg +_fdae ];
};};};if _ebgeg > _gbee ||_deg > _gbee {return false ;};};};for _adfc :=0;_adfc < (_bcfg -1);_adfc ++{for _fcac :=0;_fcac < (_bcfg -1);_fcac ++{var _feb int ;for _beda :=0;_beda < 2;_beda ++{for _fge :=0;_fge < 2;_fge ++{_feb +=_dcg [_adfc +_beda ][_fcac +_fge ];
};};if float64 (_feb )> _egfdg {return false ;};};};return true ;};const (_ggda shift =iota ;_dgcd ;);func _cbfc (_eeae *Bitmap ,_abaa *Bitmap ,_bdef *Selection ,_aafe **Bitmap )(*Bitmap ,error ){const _ddgb ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _abaa ==nil {return nil ,_b .Error (_ddgb ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _bdef ==nil {return nil ,_b .Error (_ddgb ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_fdge ,_dbgb :=_bdef .Height ,_bdef .Width ;if _fdge ==0||_dbgb ==0{return nil ,_b .Error (_ddgb ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _eeae ==nil {_eeae =_abaa .createTemplate ();
*_aafe =_abaa ;return _eeae ,nil ;};_eeae .Width =_abaa .Width ;_eeae .Height =_abaa .Height ;_eeae .RowStride =_abaa .RowStride ;_eeae .Color =_abaa .Color ;_eeae .Data =make ([]byte ,_abaa .RowStride *_abaa .Height );if _eeae ==_abaa {*_aafe =_abaa .Copy ();
}else {*_aafe =_abaa ;};return _eeae ,nil ;};func ClipBoxToRectangle (box *_f .Rectangle ,wi ,hi int )(_adfb *_f .Rectangle ,_gbdb error ){const _fgdfc ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_b .Error (_fgdfc ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_b .Error (_fgdfc ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_ggeg :=*box ;
_adfb =&_ggeg ;if _adfb .Min .X < 0{_adfb .Max .X +=_adfb .Min .X ;_adfb .Min .X =0;};if _adfb .Min .Y < 0{_adfb .Max .Y +=_adfb .Min .Y ;_adfb .Min .Y =0;};if _adfb .Max .X > wi {_adfb .Max .X =wi ;};if _adfb .Max .Y > hi {_adfb .Max .Y =hi ;};return _adfb ,nil ;
};func (_affag *ClassedPoints )ySortFunction ()func (_gfag int ,_fega int )bool {return func (_acbgg ,_cabd int )bool {return _affag .YAtIndex (_acbgg )< _affag .YAtIndex (_cabd )};};func (_gaba *Bitmap )SetPadBits (value int ){_gaba .setPadBits (value )};
func (_effa *Bitmap )InverseData (){_effa .inverseData ()};func (_edb Points )Size ()int {return len (_edb )};func _ffdf (_cbge *Bitmap ,_dcde *Bitmap ,_ebcfc int )(_baad error ){const _bdca ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_adce :=_afa (_cbge .Height ,_dcde .Height );_effaa :=_afa (_cbge .RowStride ,_dcde .RowStride );switch _ebcfc {case 4:_baad =_dcfe (_cbge ,_dcde ,_adce ,_effaa );case 8:_baad =_abfe (_cbge ,_dcde ,_adce ,_effaa );default:return _b .Errorf (_bdca ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_ebcfc );
};if _baad !=nil {return _b .Wrap (_baad ,_bdca ,"");};return nil ;};func _dad (_gafc ,_becf ,_bda *Bitmap )(*Bitmap ,error ){const _cacg ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _becf ==nil {return nil ,_b .Error (_cacg ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bda ==nil {return nil ,_b .Error (_cacg ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _ecfa error ;switch {case _gafc ==_becf :if _ecfa =_gafc .RasterOperation (0,0,_becf .Width ,_becf .Height ,PixNotSrcAndDst ,_bda ,0,0);
_ecfa !=nil {return nil ,_b .Wrap (_ecfa ,_cacg ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _gafc ==_bda :if _ecfa =_gafc .RasterOperation (0,0,_becf .Width ,_becf .Height ,PixNotSrcAndDst ,_becf ,0,0);_ecfa !=nil {return nil ,_b .Wrap (_ecfa ,_cacg ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_gafc ,_ecfa =_ade (_gafc ,_becf );if _ecfa !=nil {return nil ,_b .Wrap (_ecfa ,_cacg ,"");};if _ecfa =_gafc .RasterOperation (0,0,_becf .Width ,_becf .Height ,PixNotSrcAndDst ,_bda ,0,0);_ecfa !=nil {return nil ,_b .Wrap (_ecfa ,_cacg ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _gafc ,nil ;};func _bcgf (_dfaa ,_ggfd *Bitmap ,_fcag ,_bfadc int )(*Bitmap ,error ){const _fdcf ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _ggfd ==nil {return nil ,_b .Error (_fdcf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fcag < 1||_bfadc < 1{return nil ,_b .Error (_fdcf ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _fcag ==1&&_bfadc ==1{return _ggfd .Copy (),nil ;};if _fcag ==1||_bfadc ==1{_dbgd :=SelCreateBrick (_bfadc ,_fcag ,_bfadc /2,_fcag /2,SelHit );
var _febbd error ;_dfaa ,_febbd =_fggg (_dfaa ,_ggfd ,_dbgd );if _febbd !=nil {return nil ,_b .Wrap (_febbd ,_fdcf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dfaa ,nil ;};_gaca :=SelCreateBrick (1,_fcag ,0,_fcag /2,SelHit );_aec :=SelCreateBrick (_bfadc ,1,_bfadc /2,0,SelHit );_beag ,_cbde :=_fgdaf (nil ,_ggfd ,_gaca );if _cbde !=nil {return nil ,_b .Wrap (_cbde ,_fdcf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _dfaa ,_cbde =_fgdaf (_dfaa ,_beag ,_aec );_cbde !=nil {return nil ,_b .Wrap (_cbde ,_fdcf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_cbde =_cddc (_beag ,_dfaa ,_gaca );_cbde !=nil {return nil ,_b .Wrap (_cbde ,_fdcf ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_cbde =_cddc (_dfaa ,_beag ,_aec );_cbde !=nil {return nil ,_b .Wrap (_cbde ,_fdcf ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _dfaa ,nil ;};func _ffgbd (_ebcf *Bitmap ,_dbbd ,_cfab ,_ededa ,_ebedc int ,_ddbb RasterOperator ,_abdd *Bitmap ,_bfaa ,_feeg int )error {var (_cccb bool ;
_gdbd bool ;_egcc int ;_cdad int ;_baff int ;_bggd bool ;_efec byte ;_abdb int ;_fbeg int ;_dfca int ;_feege ,_ggabd int ;);_dfec :=8-(_dbbd &7);_afgd :=_bfccf [_dfec ];_feac :=_ebcf .RowStride *_cfab +(_dbbd >>3);_cfcb :=_abdd .RowStride *_feeg +(_bfaa >>3);
if _ededa < _dfec {_cccb =true ;_afgd &=_daacf [8-_dfec +_ededa ];};if !_cccb {_egcc =(_ededa -_dfec )>>3;if _egcc > 0{_gdbd =true ;_cdad =_feac +1;_baff =_cfcb +1;};};_abdb =(_dbbd +_ededa )&7;if !(_cccb ||_abdb ==0){_bggd =true ;_efec =_daacf [_abdb ];
_fbeg =_feac +1+_egcc ;_dfca =_cfcb +1+_egcc ;};switch _ddbb {case PixSrc :for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],_abdd .Data [_cfcb ],_afgd );_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;};if _gdbd {for _feege =0;
_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]=_abdd .Data [_baff +_ggabd ];};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],_abdd .Data [_dfca ],_efec );
_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};case PixNotSrc :for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],^_abdd .Data [_cfcb ],_afgd );_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;};if _gdbd {for _feege =0;
_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]=^_abdd .Data [_baff +_ggabd ];};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],^_abdd .Data [_dfca ],_efec );
_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};case PixSrcOrDst :for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],_abdd .Data [_cfcb ]|_ebcf .Data [_feac ],_afgd );_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;
};if _gdbd {for _feege =0;_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]|=_abdd .Data [_baff +_ggabd ];};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],_abdd .Data [_dfca ]|_ebcf .Data [_fbeg ],_efec );
_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};case PixSrcAndDst :for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],_abdd .Data [_cfcb ]&_ebcf .Data [_feac ],_afgd );_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;
};if _gdbd {for _feege =0;_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]&=_abdd .Data [_baff +_ggabd ];};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],_abdd .Data [_dfca ]&_ebcf .Data [_fbeg ],_efec );
_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};case PixSrcXorDst :for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],_abdd .Data [_cfcb ]^_ebcf .Data [_feac ],_afgd );_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;
};if _gdbd {for _feege =0;_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]^=_abdd .Data [_baff +_ggabd ];};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],_abdd .Data [_dfca ]^_ebcf .Data [_fbeg ],_efec );
_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};case PixNotSrcOrDst :for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],^(_abdd .Data [_cfcb ])|_ebcf .Data [_feac ],_afgd );_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;
};if _gdbd {for _feege =0;_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]|=^(_abdd .Data [_baff +_ggabd ]);};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;_feege < _ebedc ;
_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],^(_abdd .Data [_dfca ])|_ebcf .Data [_fbeg ],_efec );_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};case PixNotSrcAndDst :for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],^(_abdd .Data [_cfcb ])&_ebcf .Data [_feac ],_afgd );
_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;};if _gdbd {for _feege =0;_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]&=^_abdd .Data [_baff +_ggabd ];};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;
};};if _bggd {for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],^(_abdd .Data [_dfca ])&_ebcf .Data [_fbeg ],_efec );_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};case PixSrcOrNotDst :for _feege =0;_feege < _ebedc ;
_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],_abdd .Data [_cfcb ]|^(_ebcf .Data [_feac ]),_afgd );_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;};if _gdbd {for _feege =0;_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]=_abdd .Data [_baff +_ggabd ]|^(_ebcf .Data [_cdad +_ggabd ]);
};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],_abdd .Data [_dfca ]|^(_ebcf .Data [_fbeg ]),_efec );_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;
};};case PixSrcAndNotDst :for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],_abdd .Data [_cfcb ]&^(_ebcf .Data [_feac ]),_afgd );_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;};if _gdbd {for _feege =0;_feege < _ebedc ;
_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]=_abdd .Data [_baff +_ggabd ]&^(_ebcf .Data [_cdad +_ggabd ]);};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],_abdd .Data [_dfca ]&^(_ebcf .Data [_fbeg ]),_efec );
_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};case PixNotPixSrcOrDst :for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],^(_abdd .Data [_cfcb ]|_ebcf .Data [_feac ]),_afgd );_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;
};if _gdbd {for _feege =0;_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]=^(_abdd .Data [_baff +_ggabd ]|_ebcf .Data [_cdad +_ggabd ]);};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;
_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],^(_abdd .Data [_dfca ]|_ebcf .Data [_fbeg ]),_efec );_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};case PixNotPixSrcAndDst :for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],^(_abdd .Data [_cfcb ]&_ebcf .Data [_feac ]),_afgd );
_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;};if _gdbd {for _feege =0;_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;_ggabd ++{_ebcf .Data [_cdad +_ggabd ]=^(_abdd .Data [_baff +_ggabd ]&_ebcf .Data [_cdad +_ggabd ]);};_cdad +=_ebcf .RowStride ;
_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],^(_abdd .Data [_dfca ]&_ebcf .Data [_fbeg ]),_efec );_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};case PixNotPixSrcXorDst :for _feege =0;
_feege < _ebedc ;_feege ++{_ebcf .Data [_feac ]=_ceed (_ebcf .Data [_feac ],^(_abdd .Data [_cfcb ]^_ebcf .Data [_feac ]),_afgd );_feac +=_ebcf .RowStride ;_cfcb +=_abdd .RowStride ;};if _gdbd {for _feege =0;_feege < _ebedc ;_feege ++{for _ggabd =0;_ggabd < _egcc ;
_ggabd ++{_ebcf .Data [_cdad +_ggabd ]=^(_abdd .Data [_baff +_ggabd ]^_ebcf .Data [_cdad +_ggabd ]);};_cdad +=_ebcf .RowStride ;_baff +=_abdd .RowStride ;};};if _bggd {for _feege =0;_feege < _ebedc ;_feege ++{_ebcf .Data [_fbeg ]=_ceed (_ebcf .Data [_fbeg ],^(_abdd .Data [_dfca ]^_ebcf .Data [_fbeg ]),_efec );
_fbeg +=_ebcf .RowStride ;_dfca +=_abdd .RowStride ;};};default:_g .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_ddbb );return _b .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_dcdf *Bitmap )Equivalent (s *Bitmap )bool {return _dcdf .equivalent (s )};func (_gfff *Bitmap )setAll ()error {_addg :=_feda (_gfff ,0,0,_gfff .Width ,_gfff .Height ,PixSet ,nil ,0,0);if _addg !=nil {return _b .Wrap (_addg ,"\u0073\u0065\u0074\u0041\u006c\u006c","");
};return nil ;};func _bf ()(_gd [256]uint16 ){for _fga :=0;_fga < 256;_fga ++{if _fga &0x01!=0{_gd [_fga ]|=0x3;};if _fga &0x02!=0{_gd [_fga ]|=0xc;};if _fga &0x04!=0{_gd [_fga ]|=0x30;};if _fga &0x08!=0{_gd [_fga ]|=0xc0;};if _fga &0x10!=0{_gd [_fga ]|=0x300;
};if _fga &0x20!=0{_gd [_fga ]|=0xc00;};if _fga &0x40!=0{_gd [_fga ]|=0x3000;};if _fga &0x80!=0{_gd [_fga ]|=0xc000;};};return _gd ;};func (_gbgc *ClassedPoints )Swap (i ,j int ){_gbgc .IntSlice [i ],_gbgc .IntSlice [j ]=_gbgc .IntSlice [j ],_gbgc .IntSlice [i ];
};func MakePixelCentroidTab8 ()[]int {return _ffb ()};func _adeg (_ddfa ,_ccad *Bitmap ,_dgc ,_aeeg int )(*Bitmap ,error ){const _bdga ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _ccad ==nil {return nil ,_b .Error (_bdga ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _dgc < 1||_aeeg < 1{return nil ,_b .Error (_bdga ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _dgc ==1&&_aeeg ==1{_bdea ,_fgdd :=_ade (_ddfa ,_ccad );if _fgdd !=nil {return nil ,_b .Wrap (_fgdd ,_bdga ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};
return _bdea ,nil ;};if _dgc ==1||_aeeg ==1{_ccbbga :=SelCreateBrick (_aeeg ,_dgc ,_aeeg /2,_dgc /2,SelHit );_fagd ,_ffcd :=_cddc (_ddfa ,_ccad ,_ccbbga );if _ffcd !=nil {return nil ,_b .Wrap (_ffcd ,_bdga ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fagd ,nil ;};_ggdg :=SelCreateBrick (1,_dgc ,0,_dgc /2,SelHit );_cefb :=SelCreateBrick (_aeeg ,1,_aeeg /2,0,SelHit );_abe ,_daaab :=_cddc (nil ,_ccad ,_ggdg );if _daaab !=nil {return nil ,_b .Wrap (_daaab ,_bdga ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_ddfa ,_daaab =_cddc (_ddfa ,_abe ,_cefb );if _daaab !=nil {return nil ,_b .Wrap (_daaab ,_bdga ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ddfa ,nil ;};type fillSegment struct{_ecgf int ;_baggea int ;_fbbc int ;_fbgf int ;};func (_dcaf *ClassedPoints )SortByY (){_dcaf ._gdba =_dcaf .ySortFunction ();
_ee .Sort (_dcaf )};func (_gcgg *Bitmap )SetDefaultPixel (){for _cdd :=range _gcgg .Data {_gcgg .Data [_cdd ]=byte (0xff);};};func (_cabbe *BitmapsArray )GetBox (i int )(*_f .Rectangle ,error ){const _bfag ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _cabbe ==nil {return nil ,_b .Error (_bfag ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_cabbe .Boxes )-1{return nil ,_b .Errorf (_bfag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _cabbe .Boxes [i ],nil ;};func (_egab *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _dfdd ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _egab ==nil {return nil ,_b .Error (_dfdd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_egab .Values )-1{return nil ,_b .Errorf (_dfdd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _egab .Values [i ],nil ;};func _eaag (_fbcac ,_bbg *Bitmap ,_becfg ,_bdfa int )(*Bitmap ,error ){const _fcgb ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _bbg ==nil {return nil ,_b .Error (_fcgb ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _becfg < 1||_bdfa < 1{return nil ,_b .Error (_fcgb ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _becfg ==1&&_bdfa ==1{return _ade (_fbcac ,_bbg );};if MorphBC ==SymmetricMorphBC {_ccbf ,_ddd :=_bcgf (_fbcac ,_bbg ,_becfg ,_bdfa );if _ddd !=nil {return nil ,_b .Wrap (_ddd ,_fcgb ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _ccbf ,nil ;};_dadf :=_fgda (_becfg /2,_bdfa /2);_gffb :=8*((_dadf +7)/8);_defd ,_gebeb :=_bbg .AddBorder (_gffb ,0);if _gebeb !=nil {return nil ,_b .Wrapf (_gebeb ,_fcgb ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_gffb );
};var _ggfc ,_dgdac *Bitmap ;if _becfg ==1||_bdfa ==1{_bfb :=SelCreateBrick (_bdfa ,_becfg ,_bdfa /2,_becfg /2,SelHit );_ggfc ,_gebeb =_fggg (nil ,_defd ,_bfb );if _gebeb !=nil {return nil ,_b .Wrap (_gebeb ,_fcgb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_ebde :=SelCreateBrick (1,_becfg ,0,_becfg /2,SelHit );_gdda ,_edgg :=_fgdaf (nil ,_defd ,_ebde );if _edgg !=nil {return nil ,_b .Wrap (_edgg ,_fcgb ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_bcae :=SelCreateBrick (_bdfa ,1,_bdfa /2,0,SelHit );_ggfc ,_edgg =_fgdaf (nil ,_gdda ,_bcae );if _edgg !=nil {return nil ,_b .Wrap (_edgg ,_fcgb ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_edgg =_cddc (_gdda ,_ggfc ,_ebde );_edgg !=nil {return nil ,_b .Wrap (_edgg ,_fcgb ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_edgg =_cddc (_ggfc ,_gdda ,_bcae );_edgg !=nil {return nil ,_b .Wrap (_edgg ,_fcgb ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _dgdac ,_gebeb =_ggfc .RemoveBorder (_gffb );_gebeb !=nil {return nil ,_b .Wrap (_gebeb ,_fcgb ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _fbcac ==nil {return _dgdac ,nil ;};if _ ,_gebeb =_ade (_fbcac ,_dgdac );_gebeb !=nil {return nil ,_gebeb ;
};return _fbcac ,nil ;};func (_cdea *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _fgcb ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_cdea .IntSlice .Size (){return 0,_b .Errorf (_fgcb ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_cdea .YAtIndex (i )),nil ;};func (_ddbc *BitmapsArray )AddBitmaps (bm *Bitmaps ){_ddbc .Values =append (_ddbc .Values ,bm )};func MakePixelSumTab8 ()[]int {return _ebbg ()};func _fgcg (_adff ,_caef *Bitmap ,_eefa ,_cegg ,_bae ,_ceac ,_fdcc int ,_fef CombinationOperator )error {var _efcd int ;
_dbf :=func (){_efcd ++;_bae +=_caef .RowStride ;_ceac +=_adff .RowStride ;_fdcc +=_adff .RowStride };for _efcd =_eefa ;_efcd < _cegg ;_dbf (){_bcbc :=_bae ;for _gbcb :=_ceac ;_gbcb <=_fdcc ;_gbcb ++{_bfgf ,_afaf :=_caef .GetByte (_bcbc );if _afaf !=nil {return _afaf ;
};_gbeec ,_afaf :=_adff .GetByte (_gbcb );if _afaf !=nil {return _afaf ;};if _afaf =_caef .SetByte (_bcbc ,_afcd (_bfgf ,_gbeec ,_fef ));_afaf !=nil {return _afaf ;};_bcbc ++;};};return nil ;};func _cdcde (_aage *_bg .Stack ,_efdge ,_decd ,_cagd ,_egbfd ,_cfdc int ,_dbda *_f .Rectangle )(_deeb error ){const _cdaea ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _aage ==nil {return _b .Error (_cdaea ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _dbda ==nil {return _b .Error (_cdaea ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_dbda .Min .X =_bg .Min (_dbda .Min .X ,_efdge );_dbda .Max .X =_bg .Max (_dbda .Max .X ,_decd );_dbda .Min .Y =_bg .Min (_dbda .Min .Y ,_cagd );_dbda .Max .Y =_bg .Max (_dbda .Max .Y ,_cagd );if !(_cagd +_egbfd >=0&&_cagd +_egbfd <=_cfdc ){return nil ;
};if _aage .Aux ==nil {return _b .Error (_cdaea ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _fbcb *fillSegment ;_dfcfc ,_dfbc :=_aage .Aux .Pop ();if _dfbc {if _fbcb ,_dfbc =_dfcfc .(*fillSegment );
!_dfbc {return _b .Error (_cdaea ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_fbcb =&fillSegment {};
};_fbcb ._ecgf =_efdge ;_fbcb ._baggea =_decd ;_fbcb ._fbbc =_cagd ;_fbcb ._fbgf =_egbfd ;_aage .Push (_fbcb );return nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_gaaed *Points )Add (pt *Points )error {const _bgga ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _gaaed ==nil {return _b .Error (_bgga ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _b .Error (_bgga ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_gaaed =append (*_gaaed ,*pt ...);return nil ;};func _cddc (_fgdeg ,_eabe *Bitmap ,_agfcc *Selection )(*Bitmap ,error ){const _egce ="\u0065\u0072\u006fd\u0065";var (_egdf error ;_fagf *Bitmap ;);_fgdeg ,_egdf =_cbfc (_fgdeg ,_eabe ,_agfcc ,&_fagf );
if _egdf !=nil {return nil ,_b .Wrap (_egdf ,_egce ,"");};if _egdf =_fgdeg .setAll ();_egdf !=nil {return nil ,_b .Wrap (_egdf ,_egce ,"");};var _dfeb SelectionValue ;for _dccd :=0;_dccd < _agfcc .Height ;_dccd ++{for _dcfa :=0;_dcfa < _agfcc .Width ;_dcfa ++{_dfeb =_agfcc .Data [_dccd ][_dcfa ];
if _dfeb ==SelHit {_egdf =_feda (_fgdeg ,_agfcc .Cx -_dcfa ,_agfcc .Cy -_dccd ,_eabe .Width ,_eabe .Height ,PixSrcAndDst ,_fagf ,0,0);if _egdf !=nil {return nil ,_b .Wrap (_egdf ,_egce ,"");};};};};if MorphBC ==SymmetricMorphBC {return _fgdeg ,nil ;};_afac ,_daag ,_aacb ,_dbbbe :=_agfcc .findMaxTranslations ();
if _afac > 0{if _egdf =_fgdeg .RasterOperation (0,0,_afac ,_eabe .Height ,PixClr ,nil ,0,0);_egdf !=nil {return nil ,_b .Wrap (_egdf ,_egce ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _aacb > 0{if _egdf =_fgdeg .RasterOperation (_eabe .Width -_aacb ,0,_aacb ,_eabe .Height ,PixClr ,nil ,0,0);
_egdf !=nil {return nil ,_b .Wrap (_egdf ,_egce ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _daag > 0{if _egdf =_fgdeg .RasterOperation (0,0,_eabe .Width ,_daag ,PixClr ,nil ,0,0);_egdf !=nil {return nil ,_b .Wrap (_egdf ,_egce ,"\u0079\u0070\u0020\u003e\u0020\u0030");
};};if _dbbbe > 0{if _egdf =_fgdeg .RasterOperation (0,_eabe .Height -_dbbbe ,_eabe .Width ,_dbbbe ,PixClr ,nil ,0,0);_egdf !=nil {return nil ,_b .Wrap (_egdf ,_egce ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _fgdeg ,nil ;};func _afffe (_ccbgd *Bitmap ,_bggf *_bg .Stack ,_efbg ,_fecg int )(_bded *_f .Rectangle ,_cbcg error ){const _efcc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ccbgd ==nil {return nil ,_b .Error (_efcc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bggf ==nil {return nil ,_b .Error (_efcc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_eece ,_ggfcd :=_ccbgd .Width ,_ccbgd .Height ;_fcgf :=_eece -1;_cbdd :=_ggfcd -1;if _efbg < 0||_efbg > _fcgf ||_fecg < 0||_fecg > _cbdd ||!_ccbgd .GetPixel (_efbg ,_fecg ){return nil ,nil ;};var _gcca *_f .Rectangle ;_gcca ,_cbcg =Rect (100000,100000,0,0);
if _cbcg !=nil {return nil ,_b .Wrap (_cbcg ,_efcc ,"");};if _cbcg =_cdcde (_bggf ,_efbg ,_efbg ,_fecg ,1,_cbdd ,_gcca );_cbcg !=nil {return nil ,_b .Wrap (_cbcg ,_efcc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cbcg =_cdcde (_bggf ,_efbg ,_efbg ,_fecg +1,-1,_cbdd ,_gcca );
_cbcg !=nil {return nil ,_b .Wrap (_cbcg ,_efcc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_gcca .Min .X ,_gcca .Max .X =_efbg ,_efbg ;_gcca .Min .Y ,_gcca .Max .Y =_fecg ,_fecg ;var (_abcec *fillSegment ;
_gfee int ;);for _bggf .Len ()> 0{if _abcec ,_cbcg =_gefag (_bggf );_cbcg !=nil {return nil ,_b .Wrap (_cbcg ,_efcc ,"");};_fecg =_abcec ._fbbc ;for _efbg =_abcec ._ecgf ;_efbg >=0&&_ccbgd .GetPixel (_efbg ,_fecg );_efbg --{if _cbcg =_ccbgd .SetPixel (_efbg ,_fecg ,0);
_cbcg !=nil {return nil ,_b .Wrap (_cbcg ,_efcc ,"");};};if _efbg >=_abcec ._ecgf {for _efbg ++;_efbg <=_abcec ._baggea &&_efbg <=_fcgf &&!_ccbgd .GetPixel (_efbg ,_fecg );_efbg ++{};_gfee =_efbg ;if !(_efbg <=_abcec ._baggea &&_efbg <=_fcgf ){continue ;
};}else {_gfee =_efbg +1;if _gfee < _abcec ._ecgf -1{if _cbcg =_cdcde (_bggf ,_gfee ,_abcec ._ecgf -1,_abcec ._fbbc ,-_abcec ._fbgf ,_cbdd ,_gcca );_cbcg !=nil {return nil ,_b .Wrap (_cbcg ,_efcc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_efbg =_abcec ._ecgf +1;};for {for ;_efbg <=_fcgf &&_ccbgd .GetPixel (_efbg ,_fecg );_efbg ++{if _cbcg =_ccbgd .SetPixel (_efbg ,_fecg ,0);_cbcg !=nil {return nil ,_b .Wrap (_cbcg ,_efcc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cbcg =_cdcde (_bggf ,_gfee ,_efbg -1,_abcec ._fbbc ,_abcec ._fbgf ,_cbdd ,_gcca );
_cbcg !=nil {return nil ,_b .Wrap (_cbcg ,_efcc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _efbg > _abcec ._baggea +1{if _cbcg =_cdcde (_bggf ,_abcec ._baggea +1,_efbg -1,_abcec ._fbbc ,-_abcec ._fbgf ,_cbdd ,_gcca );_cbcg !=nil {return nil ,_b .Wrap (_cbcg ,_efcc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _efbg ++;_efbg <=_abcec ._baggea &&_efbg <=_fcgf &&!_ccbgd .GetPixel (_efbg ,_fecg );_efbg ++{};_gfee =_efbg ;if !(_efbg <=_abcec ._baggea &&_efbg <=_fcgf ){break ;};};};_gcca .Max .X ++;_gcca .Max .Y ++;return _gcca ,nil ;};func (_eeea *Boxes )Get (i int )(*_f .Rectangle ,error ){const _fgcge ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _eeea ==nil {return nil ,_b .Error (_fgcge ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_eeea )-1{return nil ,_b .Errorf (_fgcge ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_eeea )[i ],nil ;};func _abfe (_deea ,_bdde *Bitmap ,_cbff ,_gafb int )(_dabg error ){const _eage ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_ggbe ,_beab ,_bgfc ,_cbafd int ;_gagf ,_eaba ,_gcef ,_ffaea ,_fcagc ,_fdfbd ,_dcagb ,_eeeg byte ;
);for _ggbe =0;_ggbe < _cbff ;_ggbe ++{_bgfc =_ggbe *_deea .RowStride ;_cbafd =_ggbe *_bdde .RowStride ;for _beab =0;_beab < _gafb ;_beab ++{if _gagf ,_dabg =_deea .GetByte (_bgfc +_beab );_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _eaba ,_dabg =_bdde .GetByte (_cbafd +_beab );_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _ggbe > 0{if _gcef ,_dabg =_deea .GetByte (_bgfc -_deea .RowStride +_beab );
_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_gagf |=_gcef |(_gcef <<1)|(_gcef >>1);if _beab > 0{if _eeeg ,_dabg =_deea .GetByte (_bgfc -_deea .RowStride +_beab -1);_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_gagf |=_eeeg <<7;};if _beab < _gafb -1{if _eeeg ,_dabg =_deea .GetByte (_bgfc -_deea .RowStride +_beab +1);_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_gagf |=_eeeg >>7;
};};if _beab > 0{if _ffaea ,_dabg =_deea .GetByte (_bgfc +_beab -1);_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u006a\u0020\u003e \u0030");};_gagf |=_ffaea <<7;};_gagf &=_eaba ;if _gagf ==0||^_gagf ==0{if _dabg =_deea .SetByte (_bgfc +_beab ,_gagf );
_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_dcagb =_gagf ;_gagf =(_gagf |(_gagf >>1)|(_gagf <<1))&_eaba ;if (_gagf ^_dcagb )==0{if _dabg =_deea .SetByte (_bgfc +_beab ,_gagf );
_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _ggbe =_cbff -1;_ggbe >=0;_ggbe --{_bgfc =_ggbe *_deea .RowStride ;_cbafd =_ggbe *_bdde .RowStride ;
for _beab =_gafb -1;_beab >=0;_beab --{if _gagf ,_dabg =_deea .GetByte (_bgfc +_beab );_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _eaba ,_dabg =_bdde .GetByte (_cbafd +_beab );_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _ggbe < _cbff -1{if _fcagc ,_dabg =_deea .GetByte (_bgfc +_deea .RowStride +_beab );
_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_gagf |=_fcagc |(_fcagc <<1)|_fcagc >>1;if _beab > 0{if _eeeg ,_dabg =_deea .GetByte (_bgfc +_deea .RowStride +_beab -1);
_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_gagf |=_eeeg <<7;};if _beab < _gafb -1{if _eeeg ,_dabg =_deea .GetByte (_bgfc +_deea .RowStride +_beab +1);
_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_gagf |=_eeeg >>7;};};if _beab < _gafb -1{if _fdfbd ,_dabg =_deea .GetByte (_bgfc +_beab +1);_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_gagf |=_fdfbd >>7;};_gagf &=_eaba ;if _gagf ==0||(^_gagf )==0{if _dabg =_deea .SetByte (_bgfc +_beab ,_gagf );_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_dcagb =_gagf ;
_gagf =(_gagf |(_gagf >>1)|(_gagf <<1))&_eaba ;if (_gagf ^_dcagb )==0{if _dabg =_deea .SetByte (_bgfc +_beab ,_gagf );_dabg !=nil {return _b .Wrap (_dabg ,_eage ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func _bbec (_dddc *Bitmap ,_eag int )(*Bitmap ,error ){const _afee ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _dddc ==nil {return nil ,_b .Error (_afee ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _eag <=0{return nil ,_b .Error (_afee ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _eag ==1{_edgb ,_ggb :=_ade (nil ,_dddc );if _ggb !=nil {return nil ,_b .Wrap (_ggb ,_afee ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _edgb ,nil ;};_gegd ,_gfa :=_fa (_dddc ,_eag ,_eag );if _gfa !=nil {return nil ,_b .Wrap (_gfa ,_afee ,"");};return _gegd ,nil ;};type ClassedPoints struct{*Points ;_bg .IntSlice ;_gdba func (_bad ,_cgcc int )bool ;};func (_egfd *Bitmap )GetBitOffset (x int )int {return x &0x07};
func _cdde (_egfb uint ,_dbbgc byte )byte {return _dbbgc >>_egfb <<_egfb };type Point struct{X ,Y float32 ;};func (_dfg *Bitmap )addPadBits ()(_ffg error ){const _ffga ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_add :=_dfg .Width %8;if _add ==0{return nil ;};_dfbg :=_dfg .Width /8;_ecb :=_ba .NewReader (_dfg .Data );_ccbbf :=make ([]byte ,_dfg .Height *_dfg .RowStride );_bca :=_ba .NewWriterMSB (_ccbbf );_dfc :=make ([]byte ,_dfbg );var (_aba int ;_aaeb uint64 ;
);for _aba =0;_aba < _dfg .Height ;_aba ++{if _ ,_ffg =_ecb .Read (_dfc );_ffg !=nil {return _b .Wrap (_ffg ,_ffga ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_ffg =_bca .Write (_dfc );_ffg !=nil {return _b .Wrap (_ffg ,_ffga ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _aaeb ,_ffg =_ecb .ReadBits (byte (_add ));_ffg !=nil {return _b .Wrap (_ffg ,_ffga ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _ffg =_bca .WriteByte (byte (_aaeb )<<uint (8-_add ));_ffg !=nil {return _b .Wrap (_ffg ,_ffga ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_dfg .Data =_bca .Data ();return nil ;};func (_gbdbcd *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _begc ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_gbdbcd .IntSlice .Size (){return 0,_b .Errorf (_begc ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_gbdbcd .XAtIndex (i )),nil ;};func (_cedd *Bitmap )clearAll ()error {return _cedd .RasterOperation (0,0,_cedd .Width ,_cedd .Height ,PixClr ,nil ,0,0);};func (_fcff *Boxes )selectWithIndicator (_cfb *_bg .NumSlice )(_acecf *Boxes ,_febb error ){const _bfdg ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _fcff ==nil {return nil ,_b .Error (_bfdg ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _cfb ==nil {return nil ,_b .Error (_bfdg ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_cfb )!=len (*_fcff ){return nil ,_b .Error (_bfdg ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _fegb ,_efba int ;for _ggcd :=0;_ggcd < len (*_cfb );_ggcd ++{if _fegb ,_febb =_cfb .GetInt (_ggcd );_febb !=nil {return nil ,_b .Wrap (_febb ,_bfdg ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _fegb ==1{_efba ++;
};};if _efba ==len (*_fcff ){return _fcff ,nil ;};_ebfa :=Boxes {};for _fefff :=0;_fefff < len (*_cfb );_fefff ++{_fegb =int ((*_cfb )[_fefff ]);if _fegb ==0{continue ;};_ebfa =append (_ebfa ,(*_fcff )[_fefff ]);};_acecf =&_ebfa ;return _acecf ,nil ;};
func (_cbaf *Bitmap )setEightPartlyBytes (_ebbf ,_bced int ,_ccbd uint64 )(_deef error ){var (_fcbd byte ;_bfad int ;);const _eae ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _gae :=1;_gae <=_bced ;
_gae ++{_bfad =64-_gae *8;_fcbd =byte (_ccbd >>uint (_bfad )&0xff);_g .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_fcbd ,_ebbf ,_ebbf +_gae -1,_bced ,_bfad );
if _deef =_cbaf .SetByte (_ebbf +_gae -1,_fcbd );_deef !=nil {return _b .Wrap (_deef ,_eae ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_gabb :=_cbaf .RowStride *8-_cbaf .Width ;if _gabb ==0{return nil ;};_bfad -=8;_fcbd =byte (_ccbd >>uint (_bfad )&0xff)<<uint (_gabb );
if _deef =_cbaf .SetByte (_ebbf +_bced ,_fcbd );_deef !=nil {return _b .Wrap (_deef ,_eae ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_eabg *Bitmap )addBorderGeneral (_gbga ,_bbfeg ,_aaef ,_bfgeg int ,_gea int )(*Bitmap ,error ){const _edg ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _gbga < 0||_bbfeg < 0||_aaef < 0||_bfgeg < 0{return nil ,_b .Error (_edg ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_agf ,_fgfc :=_eabg .Width ,_eabg .Height ;_bcef :=_agf +_gbga +_bbfeg ;
_gcddf :=_fgfc +_aaef +_bfgeg ;_bgfb :=New (_bcef ,_gcddf );_bgfb .Color =_eabg .Color ;_fdb :=PixClr ;if _gea > 0{_fdb =PixSet ;};_dgdc :=_bgfb .RasterOperation (0,0,_gbga ,_gcddf ,_fdb ,nil ,0,0);if _dgdc !=nil {return nil ,_b .Wrap (_dgdc ,_edg ,"\u006c\u0065\u0066\u0074");
};_dgdc =_bgfb .RasterOperation (_bcef -_bbfeg ,0,_bbfeg ,_gcddf ,_fdb ,nil ,0,0);if _dgdc !=nil {return nil ,_b .Wrap (_dgdc ,_edg ,"\u0072\u0069\u0067h\u0074");};_dgdc =_bgfb .RasterOperation (0,0,_bcef ,_aaef ,_fdb ,nil ,0,0);if _dgdc !=nil {return nil ,_b .Wrap (_dgdc ,_edg ,"\u0074\u006f\u0070");
};_dgdc =_bgfb .RasterOperation (0,_gcddf -_bfgeg ,_bcef ,_bfgeg ,_fdb ,nil ,0,0);if _dgdc !=nil {return nil ,_b .Wrap (_dgdc ,_edg ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_dgdc =_bgfb .RasterOperation (_gbga ,_aaef ,_agf ,_fgfc ,PixSrc ,_eabg ,0,0);
if _dgdc !=nil {return nil ,_b .Wrap (_dgdc ,_edg ,"\u0063\u006f\u0070\u0079");};return _bgfb ,nil ;};func (_egf *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _egf .Copy (),nil ;};_gfc ,_ega :=_egf .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _ega !=nil {return nil ,_b .Wrap (_ega ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _gfc ,nil ;};func (_dfcff *byWidth )Less (i ,j int )bool {return _dfcff .Values [i ].Width < _dfcff .Values [j ].Width };type Getter interface{GetBitmap ()*Bitmap ;
};func (_fbfg Points )GetIntY (i int )(int ,error ){if i >=len (_fbfg ){return 0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_fbfg [i ].Y ),nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _fgdaf (d ,s ,sel )};func (_cefa *Bitmap )removeBorderGeneral (_dbeg ,_fbf ,_cdc ,_cabe int )(*Bitmap ,error ){const _bfff ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _dbeg < 0||_fbf < 0||_cdc < 0||_cabe < 0{return nil ,_b .Error (_bfff ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_afeb ,_faag :=_cefa .Width ,_cefa .Height ;
_cdcg :=_afeb -_dbeg -_fbf ;_fgdf :=_faag -_cdc -_cabe ;if _cdcg <=0{return nil ,_b .Errorf (_bfff ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_cdcg );};if _fgdf <=0{return nil ,_b .Errorf (_bfff ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_fgdf );
};_defe :=New (_cdcg ,_fgdf );_defe .Color =_cefa .Color ;_ebbc :=_defe .RasterOperation (0,0,_cdcg ,_fgdf ,PixSrc ,_cefa ,_dbeg ,_cdc );if _ebbc !=nil {return nil ,_b .Wrap (_ebbc ,_bfff ,"");};return _defe ,nil ;};func _fgda (_bage ,_daeb int )int {if _bage > _daeb {return _bage ;
};return _daeb ;};func (_faaea *ClassedPoints )YAtIndex (i int )float32 {return (*_faaea .Points )[_faaea .IntSlice [i ]].Y };func (_cdgb *Bitmap )connComponentsBB (_cegaf int )(_gedb *Boxes ,_deec error ){const _daaa ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _cegaf !=4&&_cegaf !=8{return nil ,_b .Error (_daaa ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _cdgb .Zero (){return &Boxes {},nil ;
};_cdgb .setPadBits (0);_aaga ,_deec :=_ade (nil ,_cdgb );if _deec !=nil {return nil ,_b .Wrap (_deec ,_daaa ,"\u0062\u006d\u0031");};_eafe :=&_bg .Stack {};_eafe .Aux =&_bg .Stack {};_gedb =&Boxes {};var (_ecgb ,_dcfgg int ;_ccbg _f .Point ;_gcbe bool ;
_gcfd *_f .Rectangle ;);for {if _ccbg ,_gcbe ,_deec =_aaga .nextOnPixel (_dcfgg ,_ecgb );_deec !=nil {return nil ,_b .Wrap (_deec ,_daaa ,"");};if !_gcbe {break ;};if _gcfd ,_deec =_gaebd (_aaga ,_eafe ,_ccbg .X ,_ccbg .Y ,_cegaf );_deec !=nil {return nil ,_b .Wrap (_deec ,_daaa ,"");
};if _deec =_gedb .Add (_gcfd );_deec !=nil {return nil ,_b .Wrap (_deec ,_daaa ,"");};_dcfgg =_ccbg .X ;_ecgb =_ccbg .Y ;};return _gedb ,nil ;};func (_bfa *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_bfa .Width ,Height :_bfa .Height ,RowStride :_bfa .RowStride ,Color :_bfa .Color ,Text :_bfa .Text ,BitmapNumber :_bfa .BitmapNumber ,Special :_bfa .Special ,Data :make ([]byte ,len (_bfa .Data ))};
};func Extract (roi _f .Rectangle ,src *Bitmap )(*Bitmap ,error ){_efe :=New (roi .Dx (),roi .Dy ());_agab :=roi .Min .X &0x07;_gfbd :=8-_agab ;_ecfg :=uint (8-_efe .Width &0x07);_cgc :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_abgc :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );
_cbgd :=_efe .RowStride ==_abgc +1-_cgc ;var _becd int ;for _fdeb :=roi .Min .Y ;_fdeb < roi .Max .Y ;_fdeb ++{_eacd :=_cgc ;_bdc :=_becd ;switch {case _cgc ==_abgc :_dcea ,_gdec :=src .GetByte (_eacd );if _gdec !=nil {return nil ,_gdec ;};_dcea <<=uint (_agab );
_gdec =_efe .SetByte (_bdc ,_cdde (_ecfg ,_dcea ));if _gdec !=nil {return nil ,_gdec ;};case _agab ==0:for _bbac :=_cgc ;_bbac <=_abgc ;_bbac ++{_fgdb ,_decg :=src .GetByte (_eacd );if _decg !=nil {return nil ,_decg ;};_eacd ++;if _bbac ==_abgc &&_cbgd {_fgdb =_cdde (_ecfg ,_fgdb );
};_decg =_efe .SetByte (_bdc ,_fgdb );if _decg !=nil {return nil ,_decg ;};_bdc ++;};default:_bbc :=_dggee (src ,_efe ,uint (_agab ),uint (_gfbd ),_ecfg ,_cgc ,_abgc ,_cbgd ,_eacd ,_bdc );if _bbc !=nil {return nil ,_bbc ;};};_cgc +=src .RowStride ;_abgc +=src .RowStride ;
_becd +=_efe .RowStride ;};return _efe ,nil ;};func (_fdea *Bitmap )Equals (s *Bitmap )bool {if len (_fdea .Data )!=len (s .Data )||_fdea .Width !=s .Width ||_fdea .Height !=s .Height {return false ;};for _ebb :=0;_ebb < _fdea .Height ;_ebb ++{_efc :=_ebb *_fdea .RowStride ;
for _ebf :=0;_ebf < _fdea .RowStride ;_ebf ++{if _fdea .Data [_efc +_ebf ]!=s .Data [_efc +_ebf ]{return false ;};};};return true ;};func _bfc ()(_ed [256]uint32 ){for _cfe :=0;_cfe < 256;_cfe ++{if _cfe &0x01!=0{_ed [_cfe ]|=0xf;};if _cfe &0x02!=0{_ed [_cfe ]|=0xf0;
};if _cfe &0x04!=0{_ed [_cfe ]|=0xf00;};if _cfe &0x08!=0{_ed [_cfe ]|=0xf000;};if _cfe &0x10!=0{_ed [_cfe ]|=0xf0000;};if _cfe &0x20!=0{_ed [_cfe ]|=0xf00000;};if _cfe &0x40!=0{_ed [_cfe ]|=0xf000000;};if _cfe &0x80!=0{_ed [_cfe ]|=0xf0000000;};};return _ed ;
};func (_ffc *Bitmap )resizeImageData (_gefb *Bitmap )error {if _gefb ==nil {return _b .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _ffc .SizesEqual (_gefb ){return nil ;};_ffc .Data =make ([]byte ,len (_gefb .Data ));_ffc .Width =_gefb .Width ;_ffc .Height =_gefb .Height ;_ffc .RowStride =_gefb .RowStride ;return nil ;};func (_cag *Bitmap )CreateTemplate ()*Bitmap {return _cag .createTemplate ()};
func _eedab (_dbcf *Bitmap ,_fcfg *_bg .Stack ,_cdac ,_gbfb int )(_acce *_f .Rectangle ,_eada error ){const _afgea ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _dbcf ==nil {return nil ,_b .Error (_afgea ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _fcfg ==nil {return nil ,_b .Error (_afgea ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_eccb ,_gcde :=_dbcf .Width ,_dbcf .Height ;_ccde :=_eccb -1;_cdgd :=_gcde -1;if _cdac < 0||_cdac > _ccde ||_gbfb < 0||_gbfb > _cdgd ||!_dbcf .GetPixel (_cdac ,_gbfb ){return nil ,nil ;
};_fadb :=_f .Rect (100000,100000,0,0);if _eada =_cdcde (_fcfg ,_cdac ,_cdac ,_gbfb ,1,_cdgd ,&_fadb );_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _eada =_cdcde (_fcfg ,_cdac ,_cdac ,_gbfb +1,-1,_cdgd ,&_fadb );
_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_fadb .Min .X ,_fadb .Max .X =_cdac ,_cdac ;_fadb .Min .Y ,_fadb .Max .Y =_gbfb ,_gbfb ;var (_fbde *fillSegment ;
_dgce int ;);for _fcfg .Len ()> 0{if _fbde ,_eada =_gefag (_fcfg );_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"");};_gbfb =_fbde ._fbbc ;for _cdac =_fbde ._ecgf -1;_cdac >=0&&_dbcf .GetPixel (_cdac ,_gbfb );_cdac --{if _eada =_dbcf .SetPixel (_cdac ,_gbfb ,0);
_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _cdac >=_fbde ._ecgf -1{for {for _cdac ++;_cdac <=_fbde ._baggea +1&&_cdac <=_ccde &&!_dbcf .GetPixel (_cdac ,_gbfb );_cdac ++{};_dgce =_cdac ;if !(_cdac <=_fbde ._baggea +1&&_cdac <=_ccde ){break ;
};for ;_cdac <=_ccde &&_dbcf .GetPixel (_cdac ,_gbfb );_cdac ++{if _eada =_dbcf .SetPixel (_cdac ,_gbfb ,0);_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _eada =_cdcde (_fcfg ,_dgce ,_cdac -1,_fbde ._fbbc ,_fbde ._fbgf ,_cdgd ,&_fadb );
_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cdac > _fbde ._baggea {if _eada =_cdcde (_fcfg ,_fbde ._baggea +1,_cdac -1,_fbde ._fbbc ,-_fbde ._fbgf ,_cdgd ,&_fadb );_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_dgce =_cdac +1;if _dgce < _fbde ._ecgf {if _eada =_cdcde (_fcfg ,_dgce ,_fbde ._ecgf -1,_fbde ._fbbc ,-_fbde ._fbgf ,_cdgd ,&_fadb );_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_cdac =_fbde ._ecgf ;for {for ;_cdac <=_ccde &&_dbcf .GetPixel (_cdac ,_gbfb );_cdac ++{if _eada =_dbcf .SetPixel (_cdac ,_gbfb ,0);_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _eada =_cdcde (_fcfg ,_dgce ,_cdac -1,_fbde ._fbbc ,_fbde ._fbgf ,_cdgd ,&_fadb );
_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cdac > _fbde ._baggea {if _eada =_cdcde (_fcfg ,_fbde ._baggea +1,_cdac -1,_fbde ._fbbc ,-_fbde ._fbgf ,_cdgd ,&_fadb );_eada !=nil {return nil ,_b .Wrap (_eada ,_afgea ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _cdac ++;_cdac <=_fbde ._baggea +1&&_cdac <=_ccde &&!_dbcf .GetPixel (_cdac ,_gbfb );_cdac ++{};_dgce =_cdac ;if !(_cdac <=_fbde ._baggea +1&&_cdac <=_ccde ){break ;};};};_fadb .Max .X ++;_fadb .Max .Y ++;return &_fadb ,nil ;};var (_fbdb =_bf ();
_agfdf =_bfc ();_bfed =_cdb (););func (_adaf Points )GetGeometry (i int )(_gacae ,_aaec float32 ,_gcfce error ){if i > len (_adaf )-1{return 0,0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_aefc :=_adaf [i ];return _aefc .X ,_aefc .Y ,nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_fcc *Selection )setOrigin (_bbdd ,_adcc int ){_fcc .Cy ,_fcc .Cx =_bbdd ,_adcc };func _ebbg ()[]int {_aeeb :=make ([]int ,256);for _cfbc :=0;
_cfbc <=0xff;_cfbc ++{_baba :=byte (_cfbc );_aeeb [_baba ]=int (_baba &0x1)+(int (_baba >>1)&0x1)+(int (_baba >>2)&0x1)+(int (_baba >>3)&0x1)+(int (_baba >>4)&0x1)+(int (_baba >>5)&0x1)+(int (_baba >>6)&0x1)+(int (_baba >>7)&0x1);};return _aeeb ;};func (_ccab *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _faeg ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_agaa ,_bgbb :=_ccab .selectByIndexes (idx );if _bgbb !=nil {return nil ,_b .Wrap (_bgbb ,_faeg ,"");};return _agaa ,nil ;};func (_gbae *ClassedPoints )SortByX (){_gbae ._gdba =_gbae .xSortFunction ();_ee .Sort (_gbae )};func _bffc (_ffdge *Bitmap ,_gfge ,_afgefa int ,_fdcff ,_dda int ,_egca RasterOperator ){var (_eede bool ;
_fab bool ;_cadf int ;_baed int ;_dba int ;_adfcf int ;_cgde bool ;_cdcd byte ;);_fdgb :=8-(_gfge &7);_gfgbb :=_bfccf [_fdgb ];_gbfe :=_ffdge .RowStride *_afgefa +(_gfge >>3);if _fdcff < _fdgb {_eede =true ;_gfgbb &=_daacf [8-_fdgb +_fdcff ];};if !_eede {_cadf =(_fdcff -_fdgb )>>3;
if _cadf !=0{_fab =true ;_baed =_gbfe +1;};};_dba =(_gfge +_fdcff )&7;if !(_eede ||_dba ==0){_cgde =true ;_cdcd =_daacf [_dba ];_adfcf =_gbfe +1+_cadf ;};var _eeff ,_daac int ;switch _egca {case PixClr :for _eeff =0;_eeff < _dda ;_eeff ++{_ffdge .Data [_gbfe ]=_ceed (_ffdge .Data [_gbfe ],0x0,_gfgbb );
_gbfe +=_ffdge .RowStride ;};if _fab {for _eeff =0;_eeff < _dda ;_eeff ++{for _daac =0;_daac < _cadf ;_daac ++{_ffdge .Data [_baed +_daac ]=0x0;};_baed +=_ffdge .RowStride ;};};if _cgde {for _eeff =0;_eeff < _dda ;_eeff ++{_ffdge .Data [_adfcf ]=_ceed (_ffdge .Data [_adfcf ],0x0,_cdcd );
_adfcf +=_ffdge .RowStride ;};};case PixSet :for _eeff =0;_eeff < _dda ;_eeff ++{_ffdge .Data [_gbfe ]=_ceed (_ffdge .Data [_gbfe ],0xff,_gfgbb );_gbfe +=_ffdge .RowStride ;};if _fab {for _eeff =0;_eeff < _dda ;_eeff ++{for _daac =0;_daac < _cadf ;_daac ++{_ffdge .Data [_baed +_daac ]=0xff;
};_baed +=_ffdge .RowStride ;};};if _cgde {for _eeff =0;_eeff < _dda ;_eeff ++{_ffdge .Data [_adfcf ]=_ceed (_ffdge .Data [_adfcf ],0xff,_cdcd );_adfcf +=_ffdge .RowStride ;};};case PixNotDst :for _eeff =0;_eeff < _dda ;_eeff ++{_ffdge .Data [_gbfe ]=_ceed (_ffdge .Data [_gbfe ],^_ffdge .Data [_gbfe ],_gfgbb );
_gbfe +=_ffdge .RowStride ;};if _fab {for _eeff =0;_eeff < _dda ;_eeff ++{for _daac =0;_daac < _cadf ;_daac ++{_ffdge .Data [_baed +_daac ]=^(_ffdge .Data [_baed +_daac ]);};_baed +=_ffdge .RowStride ;};};if _cgde {for _eeff =0;_eeff < _dda ;_eeff ++{_ffdge .Data [_adfcf ]=_ceed (_ffdge .Data [_adfcf ],^_ffdge .Data [_adfcf ],_cdcd );
_adfcf +=_ffdge .RowStride ;};};};};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_dgebf float64 ,_bfga error ){const _fcbg ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_b .Error (_fcbg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_b .Error (_fcbg ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_b .Error (_fcbg ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_ceb ,_egbfe :=bm1 .Width ,bm1 .Height ;_efge ,_abcb :=bm2 .Width ,bm2 .Height ;
_ccfb :=_ffgg (_ceb -_efge );if _ccfb > maxDiffW {return 0,nil ;};_gbda :=_ffgg (_egbfe -_abcb );if _gbda > maxDiffH {return 0,nil ;};var _gafd ,_ada int ;if delX >=0{_gafd =int (delX +0.5);}else {_gafd =int (delX -0.5);};if delY >=0{_ada =int (delY +0.5);
}else {_ada =int (delY -0.5);};_cdf :=_fgda (_ada ,0);_ecca :=_afa (_abcb +_ada ,_egbfe );_faef :=bm1 .RowStride *_cdf ;_dfgc :=bm2 .RowStride *(_cdf -_ada );_dbega :=_fgda (_gafd ,0);_cdfb :=_afa (_efge +_gafd ,_ceb );_ebgcf :=bm2 .RowStride ;var _gfca ,_gbgd int ;
if _gafd >=8{_gfca =_gafd >>3;_faef +=_gfca ;_dbega -=_gfca <<3;_cdfb -=_gfca <<3;_gafd &=7;}else if _gafd <=-8{_gbgd =-((_gafd +7)>>3);_dfgc +=_gbgd ;_ebgcf -=_gbgd ;_gafd +=_gbgd <<3;};if _dbega >=_cdfb ||_cdf >=_ecca {return 0,nil ;};_abbf :=(_cdfb +7)>>3;
var (_bffe ,_fgfe ,_gcee byte ;_fdbc ,_dgec ,_fceff int ;);switch {case _gafd ==0:for _fceff =_cdf ;_fceff < _ecca ;_fceff ,_faef ,_dfgc =_fceff +1,_faef +bm1 .RowStride ,_dfgc +bm2 .RowStride {for _dgec =0;_dgec < _abbf ;_dgec ++{_gcee =bm1 .Data [_faef +_dgec ]&bm2 .Data [_dfgc +_dgec ];
_fdbc +=tab [_gcee ];};};case _gafd > 0:if _ebgcf < _abbf {for _fceff =_cdf ;_fceff < _ecca ;_fceff ,_faef ,_dfgc =_fceff +1,_faef +bm1 .RowStride ,_dfgc +bm2 .RowStride {_bffe ,_fgfe =bm1 .Data [_faef ],bm2 .Data [_dfgc ]>>uint (_gafd );_gcee =_bffe &_fgfe ;
_fdbc +=tab [_gcee ];for _dgec =1;_dgec < _ebgcf ;_dgec ++{_bffe ,_fgfe =bm1 .Data [_faef +_dgec ],(bm2 .Data [_dfgc +_dgec ]>>uint (_gafd ))|(bm2 .Data [_dfgc +_dgec -1]<<uint (8-_gafd ));_gcee =_bffe &_fgfe ;_fdbc +=tab [_gcee ];};_bffe =bm1 .Data [_faef +_dgec ];
_fgfe =bm2 .Data [_dfgc +_dgec -1]<<uint (8-_gafd );_gcee =_bffe &_fgfe ;_fdbc +=tab [_gcee ];};}else {for _fceff =_cdf ;_fceff < _ecca ;_fceff ,_faef ,_dfgc =_fceff +1,_faef +bm1 .RowStride ,_dfgc +bm2 .RowStride {_bffe ,_fgfe =bm1 .Data [_faef ],bm2 .Data [_dfgc ]>>uint (_gafd );
_gcee =_bffe &_fgfe ;_fdbc +=tab [_gcee ];for _dgec =1;_dgec < _abbf ;_dgec ++{_bffe =bm1 .Data [_faef +_dgec ];_fgfe =(bm2 .Data [_dfgc +_dgec ]>>uint (_gafd ))|(bm2 .Data [_dfgc +_dgec -1]<<uint (8-_gafd ));_gcee =_bffe &_fgfe ;_fdbc +=tab [_gcee ];};
};};default:if _abbf < _ebgcf {for _fceff =_cdf ;_fceff < _ecca ;_fceff ,_faef ,_dfgc =_fceff +1,_faef +bm1 .RowStride ,_dfgc +bm2 .RowStride {for _dgec =0;_dgec < _abbf ;_dgec ++{_bffe =bm1 .Data [_faef +_dgec ];_fgfe =bm2 .Data [_dfgc +_dgec ]<<uint (-_gafd );
_fgfe |=bm2 .Data [_dfgc +_dgec +1]>>uint (8+_gafd );_gcee =_bffe &_fgfe ;_fdbc +=tab [_gcee ];};};}else {for _fceff =_cdf ;_fceff < _ecca ;_fceff ,_faef ,_dfgc =_fceff +1,_faef +bm1 .RowStride ,_dfgc +bm2 .RowStride {for _dgec =0;_dgec < _abbf -1;_dgec ++{_bffe =bm1 .Data [_faef +_dgec ];
_fgfe =bm2 .Data [_dfgc +_dgec ]<<uint (-_gafd );_fgfe |=bm2 .Data [_dfgc +_dgec +1]>>uint (8+_gafd );_gcee =_bffe &_fgfe ;_fdbc +=tab [_gcee ];};_bffe =bm1 .Data [_faef +_dgec ];_fgfe =bm2 .Data [_dfgc +_dgec ]<<uint (-_gafd );_gcee =_bffe &_fgfe ;_fdbc +=tab [_gcee ];
};};};_dgebf =float64 (_fdbc )*float64 (_fdbc )/(float64 (area1 )*float64 (area2 ));return _dgebf ,nil ;};func TstWordBitmap (t *_dgg .T ,scale ...int )*Bitmap {_dadcb :=1;if len (scale )> 0{_dadcb =scale [0];};_bcbfa :=3;_eegb :=9+7+15+2*_bcbfa ;_agggd :=5+_bcbfa +5;
_dfege :=New (_eegb *_dadcb ,_agggd *_dadcb );_gfcd :=&Bitmaps {};var _agga *int ;_bcbfa *=_dadcb ;_adgeg :=0;_agga =&_adgeg ;_eedg :=0;_cbgg :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,1*_dadcb );_cbgg =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,_bcbfa );_cbgg =TstISymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,1*_dadcb );_cbgg =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,_bcbfa );_cbgg =TstNSymbol (t ,scale ...);
TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,1*_dadcb );_cbgg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,1*_dadcb );_cbgg =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,0);*_agga =0;_eedg =5*_dadcb +_bcbfa ;
_cbgg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,1*_dadcb );_cbgg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,_bcbfa );_cbgg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,1*_dadcb );
_cbgg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,1*_dadcb );_cbgg =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,1*_dadcb );_cbgg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,1*_dadcb );
_cbgg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gfcd ,_cbgg ,_agga ,_eedg ,0);TstWriteSymbols (t ,_gfcd ,_dfege );return _dfege ;};func TstImageBitmapInverseData ()[]byte {_bbde :=_eafgg .Copy ();_bbde .InverseData ();return _bbde .Data ;};func (_ecdg CombinationOperator )String ()string {var _gcfe string ;
switch _ecdg {case CmbOpOr :_gcfe ="\u004f\u0052";case CmbOpAnd :_gcfe ="\u0041\u004e\u0044";case CmbOpXor :_gcfe ="\u0058\u004f\u0052";case CmbOpXNor :_gcfe ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_gcfe ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_gcfe ="\u004e\u004f\u0054";};return _gcfe ;};func _fcd ()(_bbfe []byte ){_bbfe =make ([]byte ,256);for _beb :=0;_beb < 256;_beb ++{_eee :=byte (_beb );_bbfe [_eee ]=(_eee &0x01)|((_eee &0x04)>>1)|((_eee &0x10)>>2)|((_eee &0x40)>>3)|((_eee &0x02)<<3)|((_eee &0x08)<<2)|((_eee &0x20)<<1)|(_eee &0x80);
};return _bbfe ;};func _efd (_ddc ,_gee *Bitmap ,_fdaa int ,_dgdb []byte ,_ggga int )(_bcb error ){const _dggf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_gaf ,_gfg ,_bfd ,_efb ,_fde ,_aeda ,_bgd ,_gde int ;
_aagb ,_bfcc ,_ebd ,_dag uint32 ;_bega ,_fec byte ;_cde uint16 ;);_afec :=make ([]byte ,4);_ecd :=make ([]byte ,4);for _bfd =0;_bfd < _ddc .Height -1;_bfd ,_efb =_bfd +2,_efb +1{_gaf =_bfd *_ddc .RowStride ;_gfg =_efb *_gee .RowStride ;for _fde ,_aeda =0,0;
_fde < _ggga ;_fde ,_aeda =_fde +4,_aeda +1{for _bgd =0;_bgd < 4;_bgd ++{_gde =_gaf +_fde +_bgd ;if _gde <=len (_ddc .Data )-1&&_gde < _gaf +_ddc .RowStride {_afec [_bgd ]=_ddc .Data [_gde ];}else {_afec [_bgd ]=0x00;};_gde =_gaf +_ddc .RowStride +_fde +_bgd ;
if _gde <=len (_ddc .Data )-1&&_gde < _gaf +(2*_ddc .RowStride ){_ecd [_bgd ]=_ddc .Data [_gde ];}else {_ecd [_bgd ]=0x00;};};_aagb =_fd .BigEndian .Uint32 (_afec );_bfcc =_fd .BigEndian .Uint32 (_ecd );_ebd =_aagb &_bfcc ;_ebd |=_ebd <<1;_dag =_aagb |_bfcc ;
_dag &=_dag <<1;_bfcc =_ebd |_dag ;_bfcc &=0xaaaaaaaa;_aagb =_bfcc |(_bfcc <<7);_bega =byte (_aagb >>24);_fec =byte ((_aagb >>8)&0xff);_gde =_gfg +_aeda ;if _gde +1==len (_gee .Data )-1||_gde +1>=_gfg +_gee .RowStride {if _bcb =_gee .SetByte (_gde ,_dgdb [_bega ]);
_bcb !=nil {return _b .Wrapf (_bcb ,_dggf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gde );};}else {_cde =(uint16 (_dgdb [_bega ])<<8)|uint16 (_dgdb [_fec ]);if _bcb =_gee .setTwoBytes (_gde ,_cde );_bcb !=nil {return _b .Wrapf (_bcb ,_dggf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gde );
};_aeda ++;};};};return nil ;};func (_gbe *Bitmap )String ()string {var _dce ="\u000a";for _dagb :=0;_dagb < _gbe .Height ;_dagb ++{var _gda string ;for _fae :=0;_fae < _gbe .Width ;_fae ++{_fdc :=_gbe .GetPixel (_fae ,_dagb );if _fdc {_gda +="\u0031";
}else {_gda +="\u0030";};};_dce +=_gda +"\u000a";};return _dce ;};func _cegc (_cbca *Bitmap )(_agff *Bitmap ,_bece int ,_ccac error ){const _dfe ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _cbca ==nil {return nil ,0,_b .Errorf (_dfe ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _ebdc ,_dgac *Bitmap ;if _ebdc ,_ccac =_ade (nil ,_cbca );_ccac !=nil {return nil ,0,_b .Wrap (_ccac ,_dfe ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_edfe [13]int ;_dcaae ,_fcffg int ;);_eba :=12;_egbf :=_bg .NewNumSlice (_eba +1);_eafg :=_bg .NewNumSlice (_eba +1);var _fbe *Boxes ;for _acfb :=0;_acfb <=_eba ;_acfb ++{if _acfb ==0{if _dgac ,_ccac =_ade (nil ,_ebdc );_ccac !=nil {return nil ,0,_b .Wrap (_ccac ,_dfe ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _dgac ,_ccac =_dfcf (_ebdc ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_ccac !=nil {return nil ,0,_b .Wrap (_ccac ,_dfe ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _fbe ,_ccac =_dgac .connComponentsBB (4);
_ccac !=nil {return nil ,0,_b .Wrap (_ccac ,_dfe ,"");};_edfe [_acfb ]=len (*_fbe );_egbf .AddInt (_edfe [_acfb ]);switch _acfb {case 0:_dcaae =_edfe [0];default:_fcffg =_edfe [_acfb -1]-_edfe [_acfb ];_eafg .AddInt (_fcffg );};_ebdc =_dgac ;};_cefg :=true ;
_gdcg :=2;var _fdfc ,_gbgb int ;for _caf :=1;_caf < len (*_eafg );_caf ++{if _fdfc ,_ccac =_egbf .GetInt (_caf );_ccac !=nil {return nil ,0,_b .Wrap (_ccac ,_dfe ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _cefg &&_fdfc < int (0.3*float32 (_dcaae )){_gdcg =_caf +1;_cefg =false ;};if _fcffg ,_ccac =_eafg .GetInt (_caf );_ccac !=nil {return nil ,0,_b .Wrap (_ccac ,_dfe ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _fcffg > _gbgb {_gbgb =_fcffg ;};};_dceb :=_cbca .XResolution ;if _dceb ==0{_dceb =150;};if _dceb > 110{_gdcg ++;};if _gdcg < 2{_g .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_gdcg =2;};_bece =_gdcg +1;if _agff ,_ccac =_bcgf (nil ,_cbca ,_gdcg +1,1);_ccac !=nil {return nil ,0,_b .Wrap (_ccac ,_dfe ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _agff ,_bece ,nil ;
};func (_gbca *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _gbca .Copy (),nil ;};_fece ,_ebgd :=_gbca .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _ebgd !=nil {return nil ,_b .Wrap (_ebgd ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");
};return _fece ,nil ;};func (_acdc *ClassedPoints )Less (i ,j int )bool {return _acdc ._gdba (i ,j )};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _geab (d ,s ,hSize ,vSize )};type byWidth Bitmaps ;var MorphBC BoundaryCondition ;
func _fggg (_ecec ,_abfb *Bitmap ,_gcab *Selection )(*Bitmap ,error ){const _bfcb ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _baegd error ;if _ecec ,_baegd =_ebcag (_ecec ,_abfb ,_gcab );_baegd !=nil {return nil ,_baegd ;};_afdb ,_baegd :=_fgdaf (nil ,_abfb ,_gcab );
if _baegd !=nil {return nil ,_b .Wrap (_baegd ,_bfcb ,"");};if _ ,_baegd =_cddc (_ecec ,_afdb ,_gcab );_baegd !=nil {return nil ,_b .Wrap (_baegd ,_bfcb ,"");};return _ecec ,nil ;};func TstFrameBitmapData ()[]byte {return _cegca .Data };type shift int ;
func (_bbeb *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _eccg ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _bbeb ==nil {return nil ,_b .Error (_eccg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_bbeb .Values )-1{return nil ,_b .Errorf (_eccg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bbeb .Values [i ],nil ;};func (_gceg *Bitmap )clipRectangle (_aca ,_cedf *_f .Rectangle )(_beba *Bitmap ,_ffd error ){const _beff ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _aca ==nil {return nil ,_b .Error (_beff ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_dca ,_abd :=_gceg .Width ,_gceg .Height ;_gbf ,_ffd :=ClipBoxToRectangle (_aca ,_dca ,_abd );if _ffd !=nil {_g .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_ffd );
return nil ,nil ;};_cge ,_ecg :=_gbf .Min .X ,_gbf .Min .Y ;_fcg ,_bgcf :=_gbf .Max .X -_gbf .Min .X ,_gbf .Max .Y -_gbf .Min .Y ;_beba =New (_fcg ,_bgcf );_beba .Text =_gceg .Text ;if _ffd =_beba .RasterOperation (0,0,_fcg ,_bgcf ,PixSrc ,_gceg ,_cge ,_ecg );
_ffd !=nil {return nil ,_b .Wrap (_ffd ,_beff ,"");};if _cedf !=nil {*_cedf =*_gbf ;};return _beba ,nil ;};func (_ecbe *Bitmaps )HeightSorter ()func (_bccg ,_bbca int )bool {return func (_dff ,_gaac int )bool {_fege :=_ecbe .Values [_dff ].Height < _ecbe .Values [_gaac ].Height ;
_g .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_ecbe .Values [_dff ].Height ,_ecbe .Values [_gaac ].Height ,_fege );return _fege ;};};func (_fad *Bitmap )And (s *Bitmap )(_ecde *Bitmap ,_begb error ){const _bde ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _fad ==nil {return nil ,_b .Error (_bde ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_b .Error (_bde ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_fad .SizesEqual (s ){_g .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_bde );
};if _ecde ,_begb =_ade (_ecde ,_fad );_begb !=nil {return nil ,_b .Wrap (_begb ,_bde ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _begb =_ecde .RasterOperation (0,0,_ecde .Width ,_ecde .Height ,PixSrcAndDst ,s ,0,0);
_begb !=nil {return nil ,_b .Wrap (_begb ,_bde ,"");};return _ecde ,nil ;};func (_baab Points )YSorter ()func (_aedd ,_egbgg int )bool {return func (_babg ,_edfce int )bool {return _baab [_babg ].Y < _baab [_edfce ].Y };};type Color int ;func Rect (x ,y ,w ,h int )(*_f .Rectangle ,error ){const _cbac ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_b .Errorf (_cbac ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_b .Error (_cbac ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_afff :=_f .Rect (x ,y ,x +w ,y +h );return &_afff ,nil ;};func (_bcbf *Bitmap )CountPixels ()int {return _bcbf .countPixels ()};func (_bfdc *Bitmap )GetByteIndex (x ,y int )int {return y *_bfdc .RowStride +(x >>3)};type SizeComparison int ;func (_gefa *Bitmap )centroid (_afcf ,_aeff []int )(Point ,error ){_gdfe :=Point {};
_gefa .setPadBits (0);if len (_afcf )==0{_afcf =_ffb ();};if len (_aeff )==0{_aeff =_ebbg ();};var _dccf ,_bdgf ,_agfc ,_agfcg ,_fagc ,_bdd int ;var _eeaa byte ;for _fagc =0;_fagc < _gefa .Height ;_fagc ++{_babc :=_gefa .RowStride *_fagc ;_agfcg =0;for _bdd =0;
_bdd < _gefa .RowStride ;_bdd ++{_eeaa =_gefa .Data [_babc +_bdd ];if _eeaa !=0{_agfcg +=_aeff [_eeaa ];_dccf +=_afcf [_eeaa ]+_bdd *8*_aeff [_eeaa ];};};_agfc +=_agfcg ;_bdgf +=_agfcg *_fagc ;};if _agfc !=0{_gdfe .X =float32 (_dccf )/float32 (_agfc );
_gdfe .Y =float32 (_bdgf )/float32 (_agfc );};return _gdfe ,nil ;};func (_daeg *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _feda (_daeg ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};type Bitmap struct{Width ,Height int ;
BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_dfacd *Bitmaps )makeSizeIndicator (_gfgd ,_bfadf int ,_fdbgg LocationFilter ,_cbdef SizeComparison )(_eadaa *_bg .NumSlice ,_gedg error ){const _efefde ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _dfacd ==nil {return nil ,_b .Error (_efefde ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _fdbgg {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_efefde ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_fdbgg );
};switch _cbdef {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_b .Errorf (_efefde ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_cbdef );
};_eadaa =&_bg .NumSlice {};var (_ggbd ,_ccdf ,_fadbg int ;_bbfd *Bitmap ;);for _ ,_bbfd =range _dfacd .Values {_ggbd =0;_ccdf ,_fadbg =_bbfd .Width ,_bbfd .Height ;switch _fdbgg {case LocSelectWidth :if (_cbdef ==SizeSelectIfLT &&_ccdf < _gfgd )||(_cbdef ==SizeSelectIfGT &&_ccdf > _gfgd )||(_cbdef ==SizeSelectIfLTE &&_ccdf <=_gfgd )||(_cbdef ==SizeSelectIfGTE &&_ccdf >=_gfgd )||(_cbdef ==SizeSelectIfEQ &&_ccdf ==_gfgd ){_ggbd =1;
};case LocSelectHeight :if (_cbdef ==SizeSelectIfLT &&_fadbg < _bfadf )||(_cbdef ==SizeSelectIfGT &&_fadbg > _bfadf )||(_cbdef ==SizeSelectIfLTE &&_fadbg <=_bfadf )||(_cbdef ==SizeSelectIfGTE &&_fadbg >=_bfadf )||(_cbdef ==SizeSelectIfEQ &&_fadbg ==_bfadf ){_ggbd =1;
};case LocSelectIfEither :if (_cbdef ==SizeSelectIfLT &&(_ccdf < _gfgd ||_fadbg < _bfadf ))||(_cbdef ==SizeSelectIfGT &&(_ccdf > _gfgd ||_fadbg > _bfadf ))||(_cbdef ==SizeSelectIfLTE &&(_ccdf <=_gfgd ||_fadbg <=_bfadf ))||(_cbdef ==SizeSelectIfGTE &&(_ccdf >=_gfgd ||_fadbg >=_bfadf ))||(_cbdef ==SizeSelectIfEQ &&(_ccdf ==_gfgd ||_fadbg ==_bfadf )){_ggbd =1;
};case LocSelectIfBoth :if (_cbdef ==SizeSelectIfLT &&(_ccdf < _gfgd &&_fadbg < _bfadf ))||(_cbdef ==SizeSelectIfGT &&(_ccdf > _gfgd &&_fadbg > _bfadf ))||(_cbdef ==SizeSelectIfLTE &&(_ccdf <=_gfgd &&_fadbg <=_bfadf ))||(_cbdef ==SizeSelectIfGTE &&(_ccdf >=_gfgd &&_fadbg >=_bfadf ))||(_cbdef ==SizeSelectIfEQ &&(_ccdf ==_gfgd &&_fadbg ==_bfadf )){_ggbd =1;
};};_eadaa .AddInt (_ggbd );};return _eadaa ,nil ;};func (_cfc *Points )AddPoint (x ,y float32 ){*_cfc =append (*_cfc ,Point {x ,y })};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_agfee :=_faab (h ,w ,"");_agfee .setOrigin (cy ,cx );
var _affd ,_ebgcd int ;for _affd =0;_affd < h ;_affd ++{for _ebgcd =0;_ebgcd < w ;_ebgcd ++{_agfee .Data [_affd ][_ebgcd ]=tp ;};};return _agfee ;};func (_gebc *Bitmaps )SortByHeight (){_efcca :=(*byHeight )(_gebc );_ee .Sort (_efcca )};func _gaebd (_ffdbd *Bitmap ,_fefffg *_bg .Stack ,_bffg ,_agcd ,_aagaa int )(_ebbd *_f .Rectangle ,_bedc error ){const _gdbf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ffdbd ==nil {return nil ,_b .Error (_gdbf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fefffg ==nil {return nil ,_b .Error (_gdbf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _aagaa {case 4:if _ebbd ,_bedc =_afffe (_ffdbd ,_fefffg ,_bffg ,_agcd );_bedc !=nil {return nil ,_b .Wrap (_bedc ,_gdbf ,"");};return _ebbd ,nil ;case 8:if _ebbd ,_bedc =_eedab (_ffdbd ,_fefffg ,_bffg ,_agcd );_bedc !=nil {return nil ,_b .Wrap (_bedc ,_gdbf ,"");
};return _ebbd ,nil ;default:return nil ,_b .Errorf (_gdbf ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_aagaa );
};};func (_fdadg *Bitmap )inverseData (){if _gef :=_fdadg .RasterOperation (0,0,_fdadg .Width ,_fdadg .Height ,PixNotDst ,nil ,0,0);_gef !=nil {_g .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_gef );
};if _fdadg .Color ==Chocolate {_fdadg .Color =Vanilla ;}else {_fdadg .Color =Chocolate ;};};func Centroids (bms []*Bitmap )(*Points ,error ){_geda :=make ([]Point ,len (bms ));_gaeb :=_ffb ();_bbda :=_ebbg ();var _bgdeb error ;for _gbdbb ,_beca :=range bms {_geda [_gbdbb ],_bgdeb =_beca .centroid (_gaeb ,_bbda );
if _bgdeb !=nil {return nil ,_bgdeb ;};};_abag :=Points (_geda );return &_abag ,nil ;};func TstGetScaledSymbol (t *_dgg .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_dgbe ,_gdfeg :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_dg .NoError (t ,_gdfeg );return _dgbe ;};func (_fcbe *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _ddda ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_fcbe .Values )==0{return nil ,_b .Error (_ddda ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_gdcba :=&BitmapsArray {};_fcbe .SortByHeight ();_ebbca :=-1;_cgef :=-1;for _ggggf :=0;_ggggf < len (_fcbe .Values );_ggggf ++{_eddc :=_fcbe .Values [_ggggf ].Height ;if _eddc > _ebbca {_ebbca =_eddc ;_cgef ++;_gdcba .Values =append (_gdcba .Values ,&Bitmaps {});
};_gdcba .Values [_cgef ].AddBitmap (_fcbe .Values [_ggggf ]);};return _gdcba ,nil ;};func (_gacb *Bitmaps )selectByIndicator (_agea *_bg .NumSlice )(_bccgb *Bitmaps ,_edfgg error ){const _ddfff ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gacb ==nil {return nil ,_b .Error (_ddfff ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _agea ==nil {return nil ,_b .Error (_ddfff ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_gacb .Values )==0{return _gacb ,nil ;};if len (*_agea )!=len (_gacb .Values ){return nil ,_b .Errorf (_ddfff ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_agea ),len (_gacb .Values ));
};var _dgcef ,_cfag ,_faaf int ;for _cfag =0;_cfag < len (*_agea );_cfag ++{if _dgcef ,_edfgg =_agea .GetInt (_cfag );_edfgg !=nil {return nil ,_b .Wrap (_edfgg ,_ddfff ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _dgcef ==1{_faaf ++;
};};if _faaf ==len (_gacb .Values ){return _gacb ,nil ;};_bccgb =&Bitmaps {};_cbcdfg :=len (_gacb .Values )==len (_gacb .Boxes );for _cfag =0;_cfag < len (*_agea );_cfag ++{if _dgcef =int ((*_agea )[_cfag ]);_dgcef ==0{continue ;};_bccgb .Values =append (_bccgb .Values ,_gacb .Values [_cfag ]);
if _cbcdfg {_bccgb .Boxes =append (_bccgb .Boxes ,_gacb .Boxes [_cfag ]);};};return _bccgb ,nil ;};func _aaeg (_fbce ,_fdeab *Bitmap ,_cec ,_eecg ,_befa ,_cda ,_ebe ,_bdeg ,_deb ,_bgec int ,_effc CombinationOperator ,_adcf int )error {var _fbaa int ;_eecf :=func (){_fbaa ++;
_befa +=_fdeab .RowStride ;_cda +=_fbce .RowStride ;_ebe +=_fbce .RowStride };for _fbaa =_cec ;_fbaa < _eecg ;_eecf (){var _cbafc uint16 ;_effae :=_befa ;for _bafd :=_cda ;_bafd <=_ebe ;_bafd ++{_acba ,_aead :=_fdeab .GetByte (_effae );if _aead !=nil {return _aead ;
};_fgbg ,_aead :=_fbce .GetByte (_bafd );if _aead !=nil {return _aead ;};_cbafc =(_cbafc |(uint16 (_fgbg )&0xff))<<uint (_bgec );_fgbg =byte (_cbafc >>8);if _aead =_fdeab .SetByte (_effae ,_afcd (_acba ,_fgbg ,_effc ));_aead !=nil {return _aead ;};_effae ++;
_cbafc <<=uint (_deb );if _bafd ==_ebe {_fgbg =byte (_cbafc >>(8-uint8 (_bgec )));if _adcf !=0{_fgbg =_cdde (uint (8+_bdeg ),_fgbg );};_acba ,_aead =_fdeab .GetByte (_effae );if _aead !=nil {return _aead ;};if _aead =_fdeab .SetByte (_effae ,_afcd (_acba ,_fgbg ,_effc ));
_aead !=nil {return _aead ;};};};};return nil ;};func _ebgc (_bce ,_gbb *Bitmap ,_bfge int ,_edc []byte ,_ffae int )(_bcc error ){const _dbd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_gecf ,_gfeb ,_bed ,_efa ,_ffe ,_dae ,_fcb ,_baga int ;_gff ,_bfgb ,_cba ,_agde uint32 ;_eff ,_edf byte ;_fdd uint16 ;);_dfb :=make ([]byte ,4);_dcfc :=make ([]byte ,4);for _bed =0;_bed < _bce .Height -1;_bed ,_efa =_bed +2,_efa +1{_gecf =_bed *_bce .RowStride ;
_gfeb =_efa *_gbb .RowStride ;for _ffe ,_dae =0,0;_ffe < _ffae ;_ffe ,_dae =_ffe +4,_dae +1{for _fcb =0;_fcb < 4;_fcb ++{_baga =_gecf +_ffe +_fcb ;if _baga <=len (_bce .Data )-1&&_baga < _gecf +_bce .RowStride {_dfb [_fcb ]=_bce .Data [_baga ];}else {_dfb [_fcb ]=0x00;
};_baga =_gecf +_bce .RowStride +_ffe +_fcb ;if _baga <=len (_bce .Data )-1&&_baga < _gecf +(2*_bce .RowStride ){_dcfc [_fcb ]=_bce .Data [_baga ];}else {_dcfc [_fcb ]=0x00;};};_gff =_fd .BigEndian .Uint32 (_dfb );_bfgb =_fd .BigEndian .Uint32 (_dcfc );
_cba =_gff &_bfgb ;_cba |=_cba <<1;_agde =_gff |_bfgb ;_agde &=_agde <<1;_bfgb =_cba &_agde ;_bfgb &=0xaaaaaaaa;_gff =_bfgb |(_bfgb <<7);_eff =byte (_gff >>24);_edf =byte ((_gff >>8)&0xff);_baga =_gfeb +_dae ;if _baga +1==len (_gbb .Data )-1||_baga +1>=_gfeb +_gbb .RowStride {if _bcc =_gbb .SetByte (_baga ,_edc [_eff ]);
_bcc !=nil {return _b .Wrapf (_bcc ,_dbd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_baga );};}else {_fdd =(uint16 (_edc [_eff ])<<8)|uint16 (_edc [_edf ]);if _bcc =_gbb .setTwoBytes (_baga ,_fdd );_bcc !=nil {return _b .Wrapf (_bcc ,_dbd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_baga );
};_dae ++;};};};return nil ;};func (_bfgee Points )GetIntX (i int )(int ,error ){if i >=len (_bfgee ){return 0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_bfgee [i ].X ),nil ;};func (_ggdb *byHeight )Swap (i ,j int ){_ggdb .Values [i ],_ggdb .Values [j ]=_ggdb .Values [j ],_ggdb .Values [i ];if _ggdb .Boxes !=nil {_ggdb .Boxes [i ],_ggdb .Boxes [j ]=_ggdb .Boxes [j ],_ggdb .Boxes [i ];};};
func (_aggg *Bitmap )setPadBits (_dfbf int ){_ebca :=8-_aggg .Width %8;if _ebca ==8{return ;};_geed :=_aggg .Width /8;_ebbe :=_bfccf [_ebca ];if _dfbf ==0{_ebbe ^=_ebbe ;};var _afd int ;for _egcf :=0;_egcf < _aggg .Height ;_egcf ++{_afd =_egcf *_aggg .RowStride +_geed ;
if _dfbf ==0{_aggg .Data [_afd ]&=_ebbe ;}else {_aggg .Data [_afd ]|=_ebbe ;};};};func TstVSymbol (t *_dgg .T ,scale ...int )*Bitmap {_eebb ,_ebfb :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_dg .NoError (t ,_ebfb );return TstGetScaledSymbol (t ,_eebb ,scale ...);
};func (_cddf *ClassedPoints )Len ()int {return _cddf .IntSlice .Size ()};func (_gfac *Bitmaps )CountPixels ()*_bg .NumSlice {_dbggb :=&_bg .NumSlice {};for _ ,_cceg :=range _gfac .Values {_dbggb .AddInt (_cceg .CountPixels ());};return _dbggb ;};type RasterOperator int ;
func _fb (_cae *Bitmap ,_egc *Bitmap ,_dbb int )(_fda error ){const _fg ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _dbb {case 2:_fda =_ga (_cae ,_egc );case 4:_fda =_bgg (_cae ,_egc );
case 8:_fda =_de (_cae ,_egc );default:return _b .Error (_fg ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _fda !=nil {_fda =_b .Wrap (_fda ,_fg ,"");};return _fda ;};func (_ffaa *Bitmaps )Size ()int {return len (_ffaa .Values )};func (_cfef *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_agc *Boxes ,_cacd error ){const _gfgb ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _cfef ==nil {return nil ,_b .Error (_gfgb ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_b .Error (_gfgb ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _agc ,_cacd =_cfef .connComponentsBB (connectivity );_cacd !=nil {return nil ,_b .Wrap (_cacd ,_gfgb ,"");};}else {if _agc ,_cacd =_cfef .connComponentsBitmapsBB (bms ,connectivity );_cacd !=nil {return nil ,_b .Wrap (_cacd ,_gfgb ,"");
};};return _agc ,nil ;};func (_acaa *Bitmap )setFourBytes (_bcgb int ,_cefc uint32 )error {if _bcgb +3> len (_acaa .Data )-1{return _b .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bcgb );
};_acaa .Data [_bcgb ]=byte ((_cefc &0xff000000)>>24);_acaa .Data [_bcgb +1]=byte ((_cefc &0xff0000)>>16);_acaa .Data [_bcgb +2]=byte ((_cefc &0xff00)>>8);_acaa .Data [_bcgb +3]=byte (_cefc &0xff);return nil ;};func _eebg (_cfa *Bitmap ,_ecbf ,_edfb ,_eefb ,_ffag int ,_debf RasterOperator ,_dgaf *Bitmap ,_eacbf ,_afge int )error {var (_gcc byte ;
_dage int ;_gcfg int ;_afece ,_afecf int ;_cfeg ,_gbec int ;);_eadf :=_eefb >>3;_efbc :=_eefb &7;if _efbc > 0{_gcc =_daacf [_efbc ];};_dage =_dgaf .RowStride *_afge +(_eacbf >>3);_gcfg =_cfa .RowStride *_edfb +(_ecbf >>3);switch _debf {case PixSrc :for _cfeg =0;
_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]=_dgaf .Data [_afece ];_afecf ++;_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],_dgaf .Data [_afece ],_gcc );
};};case PixNotSrc :for _cfeg =0;_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]=^(_dgaf .Data [_afece ]);_afecf ++;_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],^_dgaf .Data [_afece ],_gcc );
};};case PixSrcOrDst :for _cfeg =0;_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]|=_dgaf .Data [_afece ];_afecf ++;_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],_dgaf .Data [_afece ]|_cfa .Data [_afecf ],_gcc );
};};case PixSrcAndDst :for _cfeg =0;_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]&=_dgaf .Data [_afece ];_afecf ++;_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],_dgaf .Data [_afece ]&_cfa .Data [_afecf ],_gcc );
};};case PixSrcXorDst :for _cfeg =0;_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]^=_dgaf .Data [_afece ];_afecf ++;_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],_dgaf .Data [_afece ]^_cfa .Data [_afecf ],_gcc );
};};case PixNotSrcOrDst :for _cfeg =0;_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]|=^(_dgaf .Data [_afece ]);_afecf ++;_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],^(_dgaf .Data [_afece ])|_cfa .Data [_afecf ],_gcc );
};};case PixNotSrcAndDst :for _cfeg =0;_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]&=^(_dgaf .Data [_afece ]);_afecf ++;_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],^(_dgaf .Data [_afece ])&_cfa .Data [_afecf ],_gcc );
};};case PixSrcOrNotDst :for _cfeg =0;_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]=_dgaf .Data [_afece ]|^(_cfa .Data [_afecf ]);_afecf ++;
_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],_dgaf .Data [_afece ]|^(_cfa .Data [_afecf ]),_gcc );};};case PixSrcAndNotDst :for _cfeg =0;_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;
for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]=_dgaf .Data [_afece ]&^(_cfa .Data [_afecf ]);_afecf ++;_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],_dgaf .Data [_afece ]&^(_cfa .Data [_afecf ]),_gcc );};};case PixNotPixSrcOrDst :for _cfeg =0;
_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]=^(_dgaf .Data [_afece ]|_cfa .Data [_afecf ]);_afecf ++;_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],^(_dgaf .Data [_afece ]|_cfa .Data [_afecf ]),_gcc );
};};case PixNotPixSrcAndDst :for _cfeg =0;_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]=^(_dgaf .Data [_afece ]&_cfa .Data [_afecf ]);_afecf ++;
_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],^(_dgaf .Data [_afece ]&_cfa .Data [_afecf ]),_gcc );};};case PixNotPixSrcXorDst :for _cfeg =0;_cfeg < _ffag ;_cfeg ++{_afece =_dage +_cfeg *_dgaf .RowStride ;_afecf =_gcfg +_cfeg *_cfa .RowStride ;
for _gbec =0;_gbec < _eadf ;_gbec ++{_cfa .Data [_afecf ]=^(_dgaf .Data [_afece ]^_cfa .Data [_afecf ]);_afecf ++;_afece ++;};if _efbc > 0{_cfa .Data [_afecf ]=_ceed (_cfa .Data [_afecf ],^(_dgaf .Data [_afece ]^_cfa .Data [_afecf ]),_gcc );};};default:_g .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_debf );
return _b .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _ffgg (_cad int )int {if _cad < 0{return -_cad ;};return _cad ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _gbcg ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_abc :=_gegb (width ,height );
_abc .Data =data ;if len (data )< height *_abc .RowStride {return nil ,_b .Errorf (_gbcg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_abc .RowStride );
};return _abc ,nil ;};func _fgde (_gbbe ,_fbd *Bitmap ,_cab int ,_fee []byte ,_egd int )(_eaff error ){const _ccd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_ace ,_bef ,_geeb ,_eca ,_fdaad ,_acg ,_fede ,_fcf int ;
_bbf ,_dgb uint32 ;_gaa ,_gdc byte ;_bcbe uint16 ;);_edd :=make ([]byte ,4);_feg :=make ([]byte ,4);for _geeb =0;_geeb < _gbbe .Height -1;_geeb ,_eca =_geeb +2,_eca +1{_ace =_geeb *_gbbe .RowStride ;_bef =_eca *_fbd .RowStride ;for _fdaad ,_acg =0,0;_fdaad < _egd ;
_fdaad ,_acg =_fdaad +4,_acg +1{for _fede =0;_fede < 4;_fede ++{_fcf =_ace +_fdaad +_fede ;if _fcf <=len (_gbbe .Data )-1&&_fcf < _ace +_gbbe .RowStride {_edd [_fede ]=_gbbe .Data [_fcf ];}else {_edd [_fede ]=0x00;};_fcf =_ace +_gbbe .RowStride +_fdaad +_fede ;
if _fcf <=len (_gbbe .Data )-1&&_fcf < _ace +(2*_gbbe .RowStride ){_feg [_fede ]=_gbbe .Data [_fcf ];}else {_feg [_fede ]=0x00;};};_bbf =_fd .BigEndian .Uint32 (_edd );_dgb =_fd .BigEndian .Uint32 (_feg );_dgb &=_bbf ;_dgb &=_dgb <<1;_dgb &=0xaaaaaaaa;
_bbf =_dgb |(_dgb <<7);_gaa =byte (_bbf >>24);_gdc =byte ((_bbf >>8)&0xff);_fcf =_bef +_acg ;if _fcf +1==len (_fbd .Data )-1||_fcf +1>=_bef +_fbd .RowStride {_fbd .Data [_fcf ]=_fee [_gaa ];if _eaff =_fbd .SetByte (_fcf ,_fee [_gaa ]);_eaff !=nil {return _b .Wrapf (_eaff ,_ccd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fcf );
};}else {_bcbe =(uint16 (_fee [_gaa ])<<8)|uint16 (_fee [_gdc ]);if _eaff =_fbd .setTwoBytes (_fcf ,_bcbe );_eaff !=nil {return _b .Wrapf (_eaff ,_ccd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fcf );
};_acg ++;};};};return nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_cbafa *Bitmaps )selectByIndexes (_fbdad []int )(*Bitmaps ,error ){_adcg :=&Bitmaps {};for _ ,_ccfg :=range _fbdad {_ffgf ,_eagf :=_cbafa .GetBitmap (_ccfg );
if _eagf !=nil {return nil ,_b .Wrap (_eagf ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_adcg .AddBitmap (_ffgf );};return _adcg ,nil ;};func TstISymbol (t *_dgg .T ,scale ...int )*Bitmap {_debb ,_edbc :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});
_dg .NoError (t ,_edbc );return TstGetScaledSymbol (t ,_debb ,scale ...);};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _ebgeb ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_fbca ,_eaeg :=p1 .Width ,p1 .Height ;
_eeed ,_efcb :=p3 .Width ,p3 .Height ;if _bg .Abs (_fbca -_eeed )> maxDiffW {return false ,nil ;};if _bg .Abs (_eaeg -_efcb )> maxDiffH {return false ,nil ;};_ffad :=int (delX +_bg .Sign (delX )*0.5);_bede :=int (delY +_bg .Sign (delY )*0.5);var _debc error ;
_bbb :=p1 .CreateTemplate ();if _debc =_bbb .RasterOperation (0,0,_fbca ,_eaeg ,PixSrc ,p1 ,0,0);_debc !=nil {return false ,_b .Wrap (_debc ,_ebgeb ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _debc =_bbb .RasterOperation (_ffad ,_bede ,_fbca ,_eaeg ,PixNotSrcAndDst ,p4 ,0,0);
_debc !=nil {return false ,_b .Wrap (_debc ,_ebgeb ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _bbb .Zero (){return false ,nil ;};if _debc =_bbb .RasterOperation (_ffad ,_bede ,_eeed ,_efcb ,PixSrc ,p3 ,0,0);_debc !=nil {return false ,_b .Wrap (_debc ,_ebgeb ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _debc =_bbb .RasterOperation (0,0,_eeed ,_efcb ,PixNotSrcAndDst ,p2 ,0,0);_debc !=nil {return false ,_b .Wrap (_debc ,_ebgeb ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _bbb .Zero (),nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;
ComponentWords ;);func (_dbecf *Selection )findMaxTranslations ()(_bceaa ,_fadc ,_gded ,_dabb int ){for _bgedd :=0;_bgedd < _dbecf .Height ;_bgedd ++{for _bgaf :=0;_bgaf < _dbecf .Width ;_bgaf ++{if _dbecf .Data [_bgedd ][_bgaf ]==SelHit {_bceaa =_fgda (_bceaa ,_dbecf .Cx -_bgaf );
_fadc =_fgda (_fadc ,_dbecf .Cy -_bgedd );_gded =_fgda (_gded ,_bgaf -_dbecf .Cx );_dabb =_fgda (_dabb ,_bgedd -_dbecf .Cy );};};};return _bceaa ,_fadc ,_gded ,_dabb ;};const (Vanilla Color =iota ;Chocolate ;);func (_gdcc *byHeight )Less (i ,j int )bool {return _gdcc .Values [i ].Height < _gdcc .Values [j ].Height };
const _bbcg =5000;type Bitmaps struct{Values []*Bitmap ;Boxes []*_f .Rectangle ;};func (_dbegb *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_acd *Boxes ,_decc error ){const _eccc ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _dbegb ==nil {return nil ,_b .Error (_eccc ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_dbegb )==0{return _dbegb ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_eccc ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_b .Errorf (_eccc ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_bagge :=_dbegb .makeSizeIndicator (width ,height ,tp ,relation );_gbea ,_decc :=_dbegb .selectWithIndicator (_bagge );if _decc !=nil {return nil ,_b .Wrap (_decc ,_eccc ,"");};return _gbea ,nil ;};func (_cceb *Bitmap )nextOnPixelLow (_cded ,_dcfg ,_fgg ,_fgad ,_aacc int )(_aaae _f .Point ,_cbcf bool ,_bebg error ){const _ceddb ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_aggc int ;_dac byte ;);_fbc :=_aacc *_fgg ;_eaffb :=_fbc +(_fgad /8);if _dac ,_bebg =_cceb .GetByte (_eaffb );_bebg !=nil {return _aaae ,false ,_b .Wrap (_bebg ,_ceddb ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _dac !=0{_ffdb :=_fgad -(_fgad %8)+7;for _aggc =_fgad ;_aggc <=_ffdb &&_aggc < _cded ;_aggc ++{if _cceb .GetPixel (_aggc ,_aacc ){_aaae .X =_aggc ;_aaae .Y =_aacc ;return _aaae ,true ,nil ;};};};_cfg :=(_fgad /8)+1;_aggc =8*_cfg ;var _ceea int ;for _eaffb =_fbc +_cfg ;
_aggc < _cded ;_eaffb ,_aggc =_eaffb +1,_aggc +8{if _dac ,_bebg =_cceb .GetByte (_eaffb );_bebg !=nil {return _aaae ,false ,_b .Wrap (_bebg ,_ceddb ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");
};if _dac ==0{continue ;};for _ceea =0;_ceea < 8&&_aggc < _cded ;_ceea ,_aggc =_ceea +1,_aggc +1{if _cceb .GetPixel (_aggc ,_aacc ){_aaae .X =_aggc ;_aaae .Y =_aacc ;return _aaae ,true ,nil ;};};};for _gbd :=_aacc +1;_gbd < _dcfg ;_gbd ++{_fbc =_gbd *_fgg ;
for _eaffb ,_aggc =_fbc ,0;_aggc < _cded ;_eaffb ,_aggc =_eaffb +1,_aggc +8{if _dac ,_bebg =_cceb .GetByte (_eaffb );_bebg !=nil {return _aaae ,false ,_b .Wrap (_bebg ,_ceddb ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");
};if _dac ==0{continue ;};for _ceea =0;_ceea < 8&&_aggc < _cded ;_ceea ,_aggc =_ceea +1,_aggc +1{if _cceb .GetPixel (_aggc ,_gbd ){_aaae .X =_aggc ;_aaae .Y =_gbd ;return _aaae ,true ,nil ;};};};};return _aaae ,false ,nil ;};func _dcfe (_ddfad ,_adaa *Bitmap ,_bged ,_acgg int )(_fac error ){const _cgfdd ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_bfdf ,_gfd ,_cbgf ,_ffcc int ;_bfbf ,_geabg ,_bbaaf ,_dgde ,_bgdb ,_beagg ,_efbe byte ;);for _bfdf =0;_bfdf < _bged ;_bfdf ++{_cbgf =_bfdf *_ddfad .RowStride ;_ffcc =_bfdf *_adaa .RowStride ;for _gfd =0;_gfd < _acgg ;_gfd ++{_bfbf ,_fac =_ddfad .GetByte (_cbgf +_gfd );
if _fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_geabg ,_fac =_adaa .GetByte (_ffcc +_gfd );if _fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};
if _bfdf > 0{_bbaaf ,_fac =_ddfad .GetByte (_cbgf -_ddfad .RowStride +_gfd );if _fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"\u0069\u0020\u003e \u0030");};_bfbf |=_bbaaf ;};if _gfd > 0{_dgde ,_fac =_ddfad .GetByte (_cbgf +_gfd -1);if _fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"\u006a\u0020\u003e \u0030");
};_bfbf |=_dgde <<7;};_bfbf &=_geabg ;if _bfbf ==0||(^_bfbf )==0{if _fac =_ddfad .SetByte (_cbgf +_gfd ,_bfbf );_fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_efbe =_bfbf ;_bfbf =(_bfbf |(_bfbf >>1)|(_bfbf <<1))&_geabg ;if (_bfbf ^_efbe )==0{if _fac =_ddfad .SetByte (_cbgf +_gfd ,_bfbf );_fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _bfdf =_bged -1;_bfdf >=0;_bfdf --{_cbgf =_bfdf *_ddfad .RowStride ;_ffcc =_bfdf *_adaa .RowStride ;for _gfd =_acgg -1;_gfd >=0;_gfd --{if _bfbf ,_fac =_ddfad .GetByte (_cbgf +_gfd );_fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _geabg ,_fac =_adaa .GetByte (_ffcc +_gfd );_fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bfdf < _bged -1{if _bgdb ,_fac =_ddfad .GetByte (_cbgf +_ddfad .RowStride +_gfd );
_fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_bfbf |=_bgdb ;};if _gfd < _acgg -1{if _beagg ,_fac =_ddfad .GetByte (_cbgf +_gfd +1);_fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_bfbf |=_beagg >>7;};_bfbf &=_geabg ;if _bfbf ==0||(^_bfbf )==0{if _fac =_ddfad .SetByte (_cbgf +_gfd ,_bfbf );_fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_efbe =_bfbf ;_bfbf =(_bfbf |(_bfbf >>1)|(_bfbf <<1))&_geabg ;if (_bfbf ^_efbe )==0{if _fac =_ddfad .SetByte (_cbgf +_gfd ,_bfbf );_fac !=nil {return _b .Wrap (_fac ,_cgfdd ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func _cdb ()(_abf [256]uint64 ){for _gcf :=0;_gcf < 256;_gcf ++{if _gcf &0x01!=0{_abf [_gcf ]|=0xff;};if _gcf &0x02!=0{_abf [_gcf ]|=0xff00;};if _gcf &0x04!=0{_abf [_gcf ]|=0xff0000;};if _gcf &0x08!=0{_abf [_gcf ]|=0xff000000;
};if _gcf &0x10!=0{_abf [_gcf ]|=0xff00000000;};if _gcf &0x20!=0{_abf [_gcf ]|=0xff0000000000;};if _gcf &0x40!=0{_abf [_gcf ]|=0xff000000000000;};if _gcf &0x80!=0{_abf [_gcf ]|=0xff00000000000000;};};return _abf ;};func _fa (_acf *Bitmap ,_acb ,_eac int )(*Bitmap ,error ){const _ge ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _acf ==nil {return nil ,_b .Error (_ge ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _acb <=0||_eac <=0{return nil ,_b .Error (_ge ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _acb ==_eac {if _acb ==1{_geg ,_ec :=_ade (nil ,_acf );if _ec !=nil {return nil ,_b .Wrap (_ec ,_ge ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _geg ,nil ;};if _acb ==2||_acb ==4||_acb ==8{_ae ,_gega :=_bac (_acf ,_acb );
if _gega !=nil {return nil ,_b .Wrap (_gega ,_ge ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _ae ,nil ;};};_cd :=_acb *_acf .Width ;_gcgc :=_eac *_acf .Height ;_gga :=New (_cd ,_gcgc );_fff :=_gga .RowStride ;
var (_ged ,_agd ,_gge ,_da ,_ggf int ;_dgge byte ;_bag error ;);for _agd =0;_agd < _acf .Height ;_agd ++{_ged =_eac *_agd *_fff ;for _gge =0;_gge < _acf .Width ;_gge ++{if _bec :=_acf .GetPixel (_gge ,_agd );_bec {_ggf =_acb *_gge ;for _da =0;_da < _acb ;
_da ++{_gga .setBit (_ged *8+_ggf +_da );};};};for _da =1;_da < _eac ;_da ++{_gca :=_ged +_da *_fff ;for _dcd :=0;_dcd < _fff ;_dcd ++{if _dgge ,_bag =_gga .GetByte (_ged +_dcd );_bag !=nil {return nil ,_b .Wrapf (_bag ,_ge ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_da );
};if _bag =_gga .SetByte (_gca +_dcd ,_dgge );_bag !=nil {return nil ,_b .Wrap (_bag ,_ge ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _gga ,nil ;};var (_cegca *Bitmap ;_eafgg *Bitmap ;
);type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_f .Rectangle ;};func _ggg (_dcf *Bitmap ,_gag int ,_adc []byte )(_ggc *Bitmap ,_ceg error ){const _ggff ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _dcf ==nil {return nil ,_b .Error (_ggff ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gag < 1||_gag > 4{return nil ,_b .Error (_ggff ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _dcf .Height <=1{return nil ,_b .Errorf (_ggff ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_dcf .Height );
};_ggc =New (_dcf .Width /2,_dcf .Height /2);if _adc ==nil {_adc =_fcd ();};_bfg :=_afa (_dcf .RowStride ,2*_ggc .RowStride );switch _gag {case 1:_ceg =_bgc (_dcf ,_ggc ,_gag ,_adc ,_bfg );case 2:_ceg =_efd (_dcf ,_ggc ,_gag ,_adc ,_bfg );case 3:_ceg =_ebgc (_dcf ,_ggc ,_gag ,_adc ,_bfg );
case 4:_ceg =_fgde (_dcf ,_ggc ,_gag ,_adc ,_bfg );};if _ceg !=nil {return nil ,_ceg ;};return _ggc ,nil ;};func _faab (_ebcfd ,_afad int ,_fcgea string )*Selection {_dgfg :=&Selection {Height :_ebcfd ,Width :_afad ,Name :_fcgea };_dgfg .Data =make ([][]SelectionValue ,_ebcfd );
for _aggga :=0;_aggga < _ebcfd ;_aggga ++{_dgfg .Data [_aggga ]=make ([]SelectionValue ,_afad );};return _dgfg ;};func TstRSymbol (t *_dgg .T ,scale ...int )*Bitmap {_gadf ,_cbdec :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_dg .NoError (t ,_cbdec );
return TstGetScaledSymbol (t ,_gadf ,scale ...);};func (_eaffc *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_egad bool ,_cgb error ){const _agg ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_ebbg ();};_bcg :=_eaffc .Width >>3;_eeg :=_eaffc .Width &7;_adf :=byte (0xff<<uint (8-_eeg ));var (_gcdd ,_aeb ,_fgf ,_fgac int ;_eea byte ;);for _gcdd =0;_gcdd < _eaffc .Height ;_gcdd ++{_fgf =_eaffc .RowStride *_gcdd ;for _aeb =0;
_aeb < _bcg ;_aeb ++{_eea ,_cgb =_eaffc .GetByte (_fgf +_aeb );if _cgb !=nil {return false ,_b .Wrap (_cgb ,_agg ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_fgac +=tab8 [_eea ];};if _eeg !=0{_eea ,_cgb =_eaffc .GetByte (_fgf +_aeb );if _cgb !=nil {return false ,_b .Wrap (_cgb ,_agg ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_eea &=_adf ;_fgac +=tab8 [_eea ];};if _fgac > thresh {return true ,nil ;};};return _egad ,nil ;};func _cecef (_dea ,_fbee ,_edea *Bitmap ,_gbdad int )(*Bitmap ,error ){const _gad ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _fbee ==nil {return nil ,_b .Error (_gad ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _edea ==nil {return nil ,_b .Error (_gad ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _gbdad !=4&&_gbdad !=8{return nil ,_b .Error (_gad ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _cafe error ;_dea ,_cafe =_ade (_dea ,_fbee );
if _cafe !=nil {return nil ,_b .Wrap (_cafe ,_gad ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_daae :=_fbee .createTemplate ();_edea .setPadBits (0);for _fabd :=0;_fabd < _bbcg ;_fabd ++{_daae ,_cafe =_ade (_daae ,_dea );
if _cafe !=nil {return nil ,_b .Wrapf (_cafe ,_gad ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_fabd );};if _cafe =_ffdf (_dea ,_edea ,_gbdad );_cafe !=nil {return nil ,_b .Wrapf (_cafe ,_gad ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_fabd );
};if _daae .Equals (_dea ){break ;};};return _dea ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _dbbe ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_b .Error (_dbbe ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_b .Error (_dbbe ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_b .Error (_dbbe ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_b .Error (_dbbe ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_b .Error (_dbbe ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_gfea ,_eeef :=bm1 .Width ,bm1 .Height ;_egbb ,_bdge :=bm2 .Width ,bm2 .Height ;if _bg .Abs (_gfea -_egbb )> maxDiffW {return false ,nil ;};if _bg .Abs (_eeef -_bdge )> maxDiffH {return false ,nil ;};_acae :=int (delX +_bg .Sign (delX )*0.5);_ddg :=int (delY +_bg .Sign (delY )*0.5);
_ggcdg :=int (_a .Ceil (_a .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_ceec :=bm2 .RowStride ;_dbg :=_fgda (_ddg ,0);_ccfa :=_afa (_bdge +_ddg ,_eeef );_edfd :=bm1 .RowStride *_dbg ;_cgfd :=bm2 .RowStride *(_dbg -_ddg );var _acfc int ;
if _ccfa <=_eeef {_acfc =downcount [_ccfa -1];};_cbgc :=_fgda (_acae ,0);_eeeac :=_afa (_egbb +_acae ,_gfea );var _bgag ,_baeg int ;if _acae >=8{_bgag =_acae >>3;_edfd +=_bgag ;_cbgc -=_bgag <<3;_eeeac -=_bgag <<3;_acae &=7;}else if _acae <=-8{_baeg =-((_acae +7)>>3);
_cgfd +=_baeg ;_ceec -=_baeg ;_acae +=_baeg <<3;};var (_adfbg ,_gfeg ,_ebfe int ;_agfd ,_egee ,_bacb byte ;);if _cbgc >=_eeeac ||_dbg >=_ccfa {return false ,nil ;};_ebed :=(_eeeac +7)>>3;switch {case _acae ==0:for _gfeg =_dbg ;_gfeg < _ccfa ;_gfeg ,_edfd ,_cgfd =_gfeg +1,_edfd +bm1 .RowStride ,_cgfd +bm2 .RowStride {for _ebfe =0;
_ebfe < _ebed ;_ebfe ++{_agfd =bm1 .Data [_edfd +_ebfe ]&bm2 .Data [_cgfd +_ebfe ];_adfbg +=tab [_agfd ];};if _adfbg >=_ggcdg {return true ,nil ;};if _becc :=_adfbg +downcount [_gfeg ]-_acfc ;_becc < _ggcdg {return false ,nil ;};};case _acae > 0&&_ceec < _ebed :for _gfeg =_dbg ;
_gfeg < _ccfa ;_gfeg ,_edfd ,_cgfd =_gfeg +1,_edfd +bm1 .RowStride ,_cgfd +bm2 .RowStride {_egee =bm1 .Data [_edfd ];_bacb =bm2 .Data [_cgfd ]>>uint (_acae );_agfd =_egee &_bacb ;_adfbg +=tab [_agfd ];for _ebfe =1;_ebfe < _ceec ;_ebfe ++{_egee =bm1 .Data [_edfd +_ebfe ];
_bacb =bm2 .Data [_cgfd +_ebfe ]>>uint (_acae )|bm2 .Data [_cgfd +_ebfe -1]<<uint (8-_acae );_agfd =_egee &_bacb ;_adfbg +=tab [_agfd ];};_egee =bm1 .Data [_edfd +_ebfe ];_bacb =bm2 .Data [_cgfd +_ebfe -1]<<uint (8-_acae );_agfd =_egee &_bacb ;_adfbg +=tab [_agfd ];
if _adfbg >=_ggcdg {return true ,nil ;}else if _adfbg +downcount [_gfeg ]-_acfc < _ggcdg {return false ,nil ;};};case _acae > 0&&_ceec >=_ebed :for _gfeg =_dbg ;_gfeg < _ccfa ;_gfeg ,_edfd ,_cgfd =_gfeg +1,_edfd +bm1 .RowStride ,_cgfd +bm2 .RowStride {_egee =bm1 .Data [_edfd ];
_bacb =bm2 .Data [_cgfd ]>>uint (_acae );_agfd =_egee &_bacb ;_adfbg +=tab [_agfd ];for _ebfe =1;_ebfe < _ebed ;_ebfe ++{_egee =bm1 .Data [_edfd +_ebfe ];_bacb =bm2 .Data [_cgfd +_ebfe ]>>uint (_acae );_bacb |=bm2 .Data [_cgfd +_ebfe -1]<<uint (8-_acae );
_agfd =_egee &_bacb ;_adfbg +=tab [_agfd ];};if _adfbg >=_ggcdg {return true ,nil ;}else if _adfbg +downcount [_gfeg ]-_acfc < _ggcdg {return false ,nil ;};};case _ebed < _ceec :for _gfeg =_dbg ;_gfeg < _ccfa ;_gfeg ,_edfd ,_cgfd =_gfeg +1,_edfd +bm1 .RowStride ,_cgfd +bm2 .RowStride {for _ebfe =0;
_ebfe < _ebed ;_ebfe ++{_egee =bm1 .Data [_edfd +_ebfe ];_bacb =bm2 .Data [_cgfd +_ebfe ]<<uint (-_acae );_bacb |=bm2 .Data [_cgfd +_ebfe +1]>>uint (8+_acae );_agfd =_egee &_bacb ;_adfbg +=tab [_agfd ];};if _adfbg >=_ggcdg {return true ,nil ;}else if _bdb :=_adfbg +downcount [_gfeg ]-_acfc ;
_bdb < _ggcdg {return false ,nil ;};};case _ceec >=_ebed :for _gfeg =_dbg ;_gfeg < _ccfa ;_gfeg ,_edfd ,_cgfd =_gfeg +1,_edfd +bm1 .RowStride ,_cgfd +bm2 .RowStride {for _ebfe =0;_ebfe < _ebed ;_ebfe ++{_egee =bm1 .Data [_edfd +_ebfe ];_bacb =bm2 .Data [_cgfd +_ebfe ]<<uint (-_acae );
_bacb |=bm2 .Data [_cgfd +_ebfe +1]>>uint (8+_acae );_agfd =_egee &_bacb ;_adfbg +=tab [_agfd ];};_egee =bm1 .Data [_edfd +_ebfe ];_bacb =bm2 .Data [_cgfd +_ebfe ]<<uint (-_acae );_agfd =_egee &_bacb ;_adfbg +=tab [_agfd ];if _adfbg >=_ggcdg {return true ,nil ;
}else if _adfbg +downcount [_gfeg ]-_acfc < _ggcdg {return false ,nil ;};};};_ccdc :=float32 (_adfbg )*float32 (_adfbg )/(float32 (area1 )*float32 (area2 ));if _ccdc >=scoreThreshold {_g .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_adfbg ,_ggcdg ,_ccdc ,scoreThreshold );
};return false ,nil ;};func (_gege *Boxes )Add (box *_f .Rectangle )error {if _gege ==nil {return _b .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_gege =append (*_gege ,box );return nil ;};func (_fdgg *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _beecc ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _gegdd :=_fdgg .validateIntSlice ();
_gegdd !=nil {return nil ,_b .Wrap (_gegdd ,_beecc ,"");};if _fdgg .IntSlice .Size ()==0{return nil ,_b .Error (_beecc ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_fdgg .SortByY ();var (_egbggb []*ClassedPoints ;
_cefac int ;);_gdbc :=-1;var _cddb *ClassedPoints ;for _fcec :=0;_fcec < len (_fdgg .IntSlice );_fcec ++{_cefac =int (_fdgg .YAtIndex (_fcec ));if _cefac !=_gdbc {_cddb =&ClassedPoints {Points :_fdgg .Points };_gdbc =_cefac ;_egbggb =append (_egbggb ,_cddb );
};_cddb .IntSlice =append (_cddb .IntSlice ,_fdgg .IntSlice [_fcec ]);};for _ ,_fgdg :=range _egbggb {_fgdg .SortByX ();};return _egbggb ,nil ;};func TstWriteSymbols (t *_dgg .T ,bms *Bitmaps ,src *Bitmap ){for _bcaeg :=0;_bcaeg < bms .Size ();_bcaeg ++{_eeaf :=bms .Values [_bcaeg ];
_bdcad :=bms .Boxes [_bcaeg ];_deca :=src .RasterOperation (_bdcad .Min .X ,_bdcad .Min .Y ,_eeaf .Width ,_eeaf .Height ,PixSrc ,_eeaf ,0,0);_dg .NoError (t ,_deca );};};func TstImageBitmapData ()[]byte {return _eafgg .Data };func _gegb (_eeda ,_fgc int )*Bitmap {return &Bitmap {Width :_eeda ,Height :_fgc ,RowStride :(_eeda +7)>>3};
};func _cbdb (_dcbf *Bitmap ,_gafa ,_dacg ,_afbc ,_faeec int ,_fafe RasterOperator ){if _gafa < 0{_afbc +=_gafa ;_gafa =0;};_gegaa :=_gafa +_afbc -_dcbf .Width ;if _gegaa > 0{_afbc -=_gegaa ;};if _dacg < 0{_faeec +=_dacg ;_dacg =0;};_ccfc :=_dacg +_faeec -_dcbf .Height ;
if _ccfc > 0{_faeec -=_ccfc ;};if _afbc <=0||_faeec <=0{return ;};if (_gafa &7)==0{_fcefa (_dcbf ,_gafa ,_dacg ,_afbc ,_faeec ,_fafe );}else {_bffc (_dcbf ,_gafa ,_dacg ,_afbc ,_faeec ,_fafe );};};func (_abfd *Bitmap )SetByte (index int ,v byte )error {if index > len (_abfd .Data )-1||index < 0{return _b .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_abfd .Data [index ]=v ;return nil ;};func _ade (_cca ,_eged *Bitmap )(*Bitmap ,error ){if _eged ==nil {return nil ,_b .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _eged ==_cca {return _cca ,nil ;};if _cca ==nil {_cca =_eged .createTemplate ();copy (_cca .Data ,_eged .Data );return _cca ,nil ;};_gaag :=_cca .resizeImageData (_eged );if _gaag !=nil {return nil ,_b .Wrap (_gaag ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_cca .Text =_eged .Text ;copy (_cca .Data ,_eged .Data );return _cca ,nil ;};func (_fegfb *Boxes )makeSizeIndicator (_bagf ,_gbfg int ,_eafd LocationFilter ,_afdc SizeComparison )*_bg .NumSlice {_ece :=&_bg .NumSlice {};var _dgda ,_baeb ,_aedb int ;for _ ,_efbb :=range *_fegfb {_dgda =0;
_baeb ,_aedb =_efbb .Dx (),_efbb .Dy ();switch _eafd {case LocSelectWidth :if (_afdc ==SizeSelectIfLT &&_baeb < _bagf )||(_afdc ==SizeSelectIfGT &&_baeb > _bagf )||(_afdc ==SizeSelectIfLTE &&_baeb <=_bagf )||(_afdc ==SizeSelectIfGTE &&_baeb >=_bagf ){_dgda =1;
};case LocSelectHeight :if (_afdc ==SizeSelectIfLT &&_aedb < _gbfg )||(_afdc ==SizeSelectIfGT &&_aedb > _gbfg )||(_afdc ==SizeSelectIfLTE &&_aedb <=_gbfg )||(_afdc ==SizeSelectIfGTE &&_aedb >=_gbfg ){_dgda =1;};case LocSelectIfEither :if (_afdc ==SizeSelectIfLT &&(_aedb < _gbfg ||_baeb < _bagf ))||(_afdc ==SizeSelectIfGT &&(_aedb > _gbfg ||_baeb > _bagf ))||(_afdc ==SizeSelectIfLTE &&(_aedb <=_gbfg ||_baeb <=_bagf ))||(_afdc ==SizeSelectIfGTE &&(_aedb >=_gbfg ||_baeb >=_bagf )){_dgda =1;
};case LocSelectIfBoth :if (_afdc ==SizeSelectIfLT &&(_aedb < _gbfg &&_baeb < _bagf ))||(_afdc ==SizeSelectIfGT &&(_aedb > _gbfg &&_baeb > _bagf ))||(_afdc ==SizeSelectIfLTE &&(_aedb <=_gbfg &&_baeb <=_bagf ))||(_afdc ==SizeSelectIfGTE &&(_aedb >=_gbfg &&_baeb >=_bagf )){_dgda =1;
};};_ece .AddInt (_dgda );};return _ece ;};func (_ddca *Bitmap )GetPixel (x ,y int )bool {_ecc :=_ddca .GetByteIndex (x ,y );_cdeb :=_ddca .GetBitOffset (x );_aad :=uint (7-_cdeb );if _ecc > len (_ddca .Data )-1{_g .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_ddca );
return false ;};if (_ddca .Data [_ecc ]>>_aad )&0x01>=1{return true ;};return false ;};func (_gfab *Bitmaps )String ()string {_agbf :=_e .Builder {};for _ ,_fbaff :=range _gfab .Values {_agbf .WriteString (_fbaff .String ());_agbf .WriteRune ('\n');};return _agbf .String ();
};func (_ecgc *Bitmaps )SortByWidth (){_eccd :=(*byWidth )(_ecgc );_ee .Sort (_eccd )};func (_gce *Bitmap )GetChocolateData ()[]byte {if _gce .Color ==Vanilla {_gce .inverseData ();};return _gce .Data ;};func (_gagd *Bitmap )GetUnpaddedData ()([]byte ,error ){_fce :=uint (_gagd .Width &0x07);
if _fce ==0{return _gagd .Data ,nil ;};_bcf :=_gagd .Width *_gagd .Height ;if _bcf %8!=0{_bcf >>=3;_bcf ++;}else {_bcf >>=3;};_cbc :=make ([]byte ,_bcf );_dbbg :=_ba .NewWriterMSB (_cbc );const _agb ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
for _bee :=0;_bee < _gagd .Height ;_bee ++{for _cea :=0;_cea < _gagd .RowStride ;_cea ++{_aeed :=_gagd .Data [_bee *_gagd .RowStride +_cea ];if _cea !=_gagd .RowStride -1{_bagc :=_dbbg .WriteByte (_aeed );if _bagc !=nil {return nil ,_b .Wrap (_bagc ,_agb ,"");
};continue ;};for _aea :=uint (0);_aea < _fce ;_aea ++{_aaa :=_dbbg .WriteBit (int (_aeed >>(7-_aea )&0x01));if _aaa !=nil {return nil ,_b .Wrap (_aaa ,_agb ,"");};};};};return _cbc ,nil ;};func _ebcag (_eded ,_gabc *Bitmap ,_ceda *Selection )(*Bitmap ,error ){const _ffdg ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _aged ,_ddeg int ;if _gabc ==nil {return nil ,_b .Error (_ffdg ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ceda ==nil {return nil ,_b .Error (_ffdg ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_aged =_ceda .Width ;_ddeg =_ceda .Height ;if _aged ==0||_ddeg ==0{return nil ,_b .Error (_ffdg ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _eded ==nil {return _gabc .createTemplate (),nil ;};if _cdee :=_eded .resizeImageData (_gabc );
_cdee !=nil {return nil ,_cdee ;};return _eded ,nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _dcc ,_acad int ;_fbb :=src .RowStride -1;if x < 0{_acad =-x ;x =0;}else if x +src .Width > dst .Width {_fbb -=src .Width +x -dst .Width ;
};if y < 0{_dcc =-y ;y =0;_acad +=src .RowStride ;_fbb +=src .RowStride ;}else if y +src .Height > dst .Height {_dcc =src .Height +y -dst .Height ;};var (_ccg int ;_fba error ;);_eade :=x &0x07;_caaf :=8-_eade ;_faf :=src .Width &0x07;_affa :=_caaf -_faf ;
_caeg :=_caaf &0x07!=0;_ddff :=src .Width <=((_fbb -_acad )<<3)+_caaf ;_dgfa :=dst .GetByteIndex (x ,y );_gfcc :=_dcc +dst .Height ;if src .Height > _gfcc {_ccg =_gfcc ;}else {_ccg =src .Height ;};switch {case !_caeg :_fba =_fgcg (src ,dst ,_dcc ,_ccg ,_dgfa ,_acad ,_fbb ,op );
case _ddff :_fba =_fag (src ,dst ,_dcc ,_ccg ,_dgfa ,_acad ,_fbb ,_affa ,_eade ,_caaf ,op );default:_fba =_aaeg (src ,dst ,_dcc ,_ccg ,_dgfa ,_acad ,_fbb ,_affa ,_eade ,_caaf ,op ,_faf );};return _fba ;};func _dgdbd (_fbad *Bitmap ,_bfda ,_cgfcb int ,_defa ,_gbcgg int ,_acdd RasterOperator ,_aadf *Bitmap ,_gdca ,_fcdc int )error {var _bdee ,_fbdfb ,_fbff ,_faec int ;
if _bfda < 0{_gdca -=_bfda ;_defa +=_bfda ;_bfda =0;};if _gdca < 0{_bfda -=_gdca ;_defa +=_gdca ;_gdca =0;};_bdee =_bfda +_defa -_fbad .Width ;if _bdee > 0{_defa -=_bdee ;};_fbdfb =_gdca +_defa -_aadf .Width ;if _fbdfb > 0{_defa -=_fbdfb ;};if _cgfcb < 0{_fcdc -=_cgfcb ;
_gbcgg +=_cgfcb ;_cgfcb =0;};if _fcdc < 0{_cgfcb -=_fcdc ;_gbcgg +=_fcdc ;_fcdc =0;};_fbff =_cgfcb +_gbcgg -_fbad .Height ;if _fbff > 0{_gbcgg -=_fbff ;};_faec =_fcdc +_gbcgg -_aadf .Height ;if _faec > 0{_gbcgg -=_faec ;};if _defa <=0||_gbcgg <=0{return nil ;
};var _cbgb error ;switch {case _bfda &7==0&&_gdca &7==0:_cbgb =_eebg (_fbad ,_bfda ,_cgfcb ,_defa ,_gbcgg ,_acdd ,_aadf ,_gdca ,_fcdc );case _bfda &7==_gdca &7:_cbgb =_ffgbd (_fbad ,_bfda ,_cgfcb ,_defa ,_gbcgg ,_acdd ,_aadf ,_gdca ,_fcdc );default:_cbgb =_bfbd (_fbad ,_bfda ,_cgfcb ,_defa ,_gbcgg ,_acdd ,_aadf ,_gdca ,_fcdc );
};if _cbgb !=nil {return _b .Wrap (_cbgb ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_ffcde *Bitmaps )WidthSorter ()func (_ddcb ,_aedda int )bool {return func (_fffa ,_bbee int )bool {return _ffcde .Values [_fffa ].Width < _ffcde .Values [_bbee ].Width };
};func _geab (_cabeg ,_cbcd *Bitmap ,_cece ,_fdebb int )(*Bitmap ,error ){const _cgfc ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _cbcd ==nil {_g .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_b .Error (_cgfc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cece < 1||_fdebb < 1{return nil ,_b .Error (_cgfc ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _cece ==1&&_fdebb ==1{_bcce ,_agac :=_ade (_cabeg ,_cbcd );if _agac !=nil {return nil ,_b .Wrap (_agac ,_cgfc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bcce ,nil ;};if _cece ==1||_fdebb ==1{_ggffe :=SelCreateBrick (_fdebb ,_cece ,_fdebb /2,_cece /2,SelHit );_fedc ,_dcef :=_fgdaf (_cabeg ,_cbcd ,_ggffe );if _dcef !=nil {return nil ,_b .Wrap (_dcef ,_cgfc ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fedc ,nil ;};_dbgg :=SelCreateBrick (1,_cece ,0,_cece /2,SelHit );_aggd :=SelCreateBrick (_fdebb ,1,_fdebb /2,0,SelHit );_fegfbe ,_afba :=_fgdaf (nil ,_cbcd ,_dbgg );if _afba !=nil {return nil ,_b .Wrap (_afba ,_cgfc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_cabeg ,_afba =_fgdaf (_cabeg ,_fegfbe ,_aggd );if _afba !=nil {return nil ,_b .Wrap (_afba ,_cgfc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _cabeg ,nil ;};func TstWordBitmapWithSpaces (t *_dgg .T ,scale ...int )*Bitmap {_ggee :=1;
if len (scale )> 0{_ggee =scale [0];};_gdfb :=3;_fdfd :=9+7+15+2*_gdfb +2*_gdfb ;_edca :=5+_gdfb +5+2*_gdfb ;_baadg :=New (_fdfd *_ggee ,_edca *_ggee );_ecef :=&Bitmaps {};var _fedad *int ;_gdfb *=_ggee ;_gdbad :=_gdfb ;_fedad =&_gdbad ;_gecc :=_gdfb ;
_cccd :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,1*_ggee );_cccd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,_gdfb );_cccd =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,1*_ggee );
_cccd =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,_gdfb );_cccd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,1*_ggee );_cccd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,1*_ggee );
_cccd =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,0);*_fedad =_gdfb ;_gecc =5*_ggee +_gdfb ;_cccd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,1*_ggee );_cccd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,_gdfb );
_cccd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,1*_ggee );_cccd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,1*_ggee );_cccd =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,1*_ggee );
_cccd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,1*_ggee );_cccd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ecef ,_cccd ,_fedad ,_gecc ,0);TstWriteSymbols (t ,_ecef ,_baadg );return _baadg ;};func TstNSymbol (t *_dgg .T ,scale ...int )*Bitmap {_ceacf ,_cfead :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_dg .NoError (t ,_cfead );return TstGetScaledSymbol (t ,_ceacf ,scale ...);};func TstImageBitmap ()*Bitmap {return _eafgg .Copy ()};func (_effe *BitmapsArray )AddBox (box *_f .Rectangle ){_effe .Boxes =append (_effe .Boxes ,box )};const (_ LocationFilter =iota ;
LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);var _dcdfd =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_cgfa *Bitmap )connComponentsBitmapsBB (_adg *Bitmaps ,_bcee int )(_ddcac *Boxes ,_afef error ){const _gedc ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _bcee !=4&&_bcee !=8{return nil ,_b .Error (_gedc ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _adg ==nil {return nil ,_b .Error (_gedc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_adg .Values )> 0{return nil ,_b .Error (_gedc ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");
};if _cgfa .Zero (){return &Boxes {},nil ;};var (_cdae ,_dgff ,_dfcd ,_ecge *Bitmap ;);_cgfa .setPadBits (0);if _cdae ,_afef =_ade (nil ,_cgfa );_afef !=nil {return nil ,_b .Wrap (_afef ,_gedc ,"\u0062\u006d\u0031");};if _dgff ,_afef =_ade (nil ,_cgfa );
_afef !=nil {return nil ,_b .Wrap (_afef ,_gedc ,"\u0062\u006d\u0032");};_ggab :=&_bg .Stack {};_ggab .Aux =&_bg .Stack {};_ddcac =&Boxes {};var (_cecb ,_acbg int ;_ddcf _f .Point ;_ggdd bool ;_gdb *_f .Rectangle ;);for {if _ddcf ,_ggdd ,_afef =_cdae .nextOnPixel (_cecb ,_acbg );
_afef !=nil {return nil ,_b .Wrap (_afef ,_gedc ,"");};if !_ggdd {break ;};if _gdb ,_afef =_gaebd (_cdae ,_ggab ,_ddcf .X ,_ddcf .Y ,_bcee );_afef !=nil {return nil ,_b .Wrap (_afef ,_gedc ,"");};if _afef =_ddcac .Add (_gdb );_afef !=nil {return nil ,_b .Wrap (_afef ,_gedc ,"");
};if _dfcd ,_afef =_cdae .clipRectangle (_gdb ,nil );_afef !=nil {return nil ,_b .Wrap (_afef ,_gedc ,"\u0062\u006d\u0033");};if _ecge ,_afef =_dgff .clipRectangle (_gdb ,nil );_afef !=nil {return nil ,_b .Wrap (_afef ,_gedc ,"\u0062\u006d\u0034");};if _ ,_afef =_fcfd (_dfcd ,_dfcd ,_ecge );
_afef !=nil {return nil ,_b .Wrap (_afef ,_gedc ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _afef =_dgff .RasterOperation (_gdb .Min .X ,_gdb .Min .Y ,_gdb .Dx (),_gdb .Dy (),PixSrcXorDst ,_dfcd ,0,0);_afef !=nil {return nil ,_b .Wrap (_afef ,_gedc ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_adg .AddBitmap (_dfcd );_cecb =_ddcf .X ;_acbg =_ddcf .Y ;};_adg .Boxes =*_ddcac ;return _ddcac ,nil ;};func (_cdgbe *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _afde ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_cdgbe .Values )==0{return nil ,_b .Error (_afde ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_ddbf :=&BitmapsArray {};_cdgbe .SortByWidth ();_bgcb :=-1;_fgggf :=-1;for _dgdcg :=0;_dgdcg < len (_cdgbe .Values );
_dgdcg ++{_bffb :=_cdgbe .Values [_dgdcg ].Width ;if _bffb > _bgcb {_bgcb =_bffb ;_fgggf ++;_ddbf .Values =append (_ddbf .Values ,&Bitmaps {});};_ddbf .Values [_fgggf ].AddBitmap (_cdgbe .Values [_dgdcg ]);};return _ddbf ,nil ;};type Boxes []*_f .Rectangle ;
func _ga (_dfd ,_dc *Bitmap )(_gc error ){const _ac ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_ef :=_dc .RowStride ;_aa :=_dfd .RowStride ;var (_bge byte ;_eb uint16 ;_dfa ,_c ,_ff ,_bc ,_af int ;
);for _ff =0;_ff < _dc .Height ;_ff ++{_dfa =_ff *_ef ;_c =2*_ff *_aa ;for _bc =0;_bc < _ef ;_bc ++{_bge =_dc .Data [_dfa +_bc ];_eb =_fbdb [_bge ];_af =_c +_bc *2;if _dfd .RowStride !=_dc .RowStride *2&&(_bc +1)*2> _dfd .RowStride {_gc =_dfd .SetByte (_af ,byte (_eb >>8));
}else {_gc =_dfd .setTwoBytes (_af ,_eb );};if _gc !=nil {return _b .Wrap (_gc ,_ac ,"");};};for _bc =0;_bc < _aa ;_bc ++{_af =_c +_aa +_bc ;_bge =_dfd .Data [_c +_bc ];if _gc =_dfd .SetByte (_af ,_bge );_gc !=nil {return _b .Wrapf (_gc ,_ac ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_c +_bc ,_c +_aa +_bc );
};};};return nil ;};func (_gcd *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _gcd .removeBorderGeneral (left ,right ,top ,bot );};func (_gdde *Bitmap )countPixels ()int {var (_faed int ;_abg uint8 ;_egdd byte ;_dfab int ;
);_afce :=_gdde .RowStride ;_ecf :=uint (_gdde .Width &0x07);if _ecf !=0{_abg =uint8 ((0xff<<(8-_ecf ))&0xff);_afce --;};for _dbca :=0;_dbca < _gdde .Height ;_dbca ++{for _dfab =0;_dfab < _afce ;_dfab ++{_egdd =_gdde .Data [_dbca *_gdde .RowStride +_dfab ];
_faed +=int (_dbcc [_egdd ]);};if _ecf !=0{_faed +=int (_dbcc [_gdde .Data [_dbca *_gdde .RowStride +_dfab ]&_abg ]);};};return _faed ;};func _fcfd (_dgga ,_gaae ,_cega *Bitmap )(*Bitmap ,error ){const _bgde ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";
if _gaae ==nil {return nil ,_b .Error (_bgde ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _cega ==nil {return nil ,_b .Error (_bgde ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dgga ==_cega {return nil ,_b .Error (_bgde ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");
};if !_gaae .SizesEqual (_cega ){_g .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_bgde );
};var _ffce error ;if _dgga ,_ffce =_ade (_dgga ,_gaae );_ffce !=nil {return nil ,_b .Wrap (_ffce ,_bgde ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _ffce =_dgga .RasterOperation (0,0,_dgga .Width ,_dgga .Height ,PixSrcXorDst ,_cega ,0,0);
_ffce !=nil {return nil ,_b .Wrap (_ffce ,_bgde ,"");};return _dgga ,nil ;};type SizeSelection int ;func _fag (_fdbf ,_bcfge *Bitmap ,_fegf ,_geae ,_caca ,_bgfd ,_gdga ,_faae ,_caea ,_eaaa int ,_bea CombinationOperator )error {var _ddcg int ;_daa :=func (){_ddcg ++;
_caca +=_bcfge .RowStride ;_bgfd +=_fdbf .RowStride ;_gdga +=_fdbf .RowStride };for _ddcg =_fegf ;_ddcg < _geae ;_daa (){var _bbe uint16 ;_cdedb :=_caca ;for _aga :=_bgfd ;_aga <=_gdga ;_aga ++{_eda ,_feff :=_bcfge .GetByte (_cdedb );if _feff !=nil {return _feff ;
};_ffee ,_feff :=_fdbf .GetByte (_aga );if _feff !=nil {return _feff ;};_bbe =(_bbe |uint16 (_ffee ))<<uint (_eaaa );_ffee =byte (_bbe >>8);if _aga ==_gdga {_ffee =_cdde (uint (_faae ),_ffee );};if _feff =_bcfge .SetByte (_cdedb ,_afcd (_eda ,_ffee ,_bea ));
_feff !=nil {return _feff ;};_cdedb ++;_bbe <<=uint (_caea );};};return nil ;};func _ffb ()[]int {_afdg :=make ([]int ,256);_afdg [0]=0;_afdg [1]=7;var _cged int ;for _cged =2;_cged < 4;_cged ++{_afdg [_cged ]=_afdg [_cged -2]+6;};for _cged =4;_cged < 8;
_cged ++{_afdg [_cged ]=_afdg [_cged -4]+5;};for _cged =8;_cged < 16;_cged ++{_afdg [_cged ]=_afdg [_cged -8]+4;};for _cged =16;_cged < 32;_cged ++{_afdg [_cged ]=_afdg [_cged -16]+3;};for _cged =32;_cged < 64;_cged ++{_afdg [_cged ]=_afdg [_cged -32]+2;
};for _cged =64;_cged < 128;_cged ++{_afdg [_cged ]=_afdg [_cged -64]+1;};for _cged =128;_cged < 256;_cged ++{_afdg [_cged ]=_afdg [_cged -128];};return _afdg ;};type byHeight Bitmaps ;func (_cdbe *Bitmap )thresholdPixelSum (_bba int )bool {var (_efg int ;
_dbee uint8 ;_gggf byte ;_fade int ;);_edge :=_cdbe .RowStride ;_acef :=uint (_cdbe .Width &0x07);if _acef !=0{_dbee =uint8 ((0xff<<(8-_acef ))&0xff);_edge --;};for _bgae :=0;_bgae < _cdbe .Height ;_bgae ++{for _fade =0;_fade < _edge ;_fade ++{_gggf =_cdbe .Data [_bgae *_cdbe .RowStride +_fade ];
_efg +=int (_dbcc [_gggf ]);};if _acef !=0{_gggf =_cdbe .Data [_bgae *_cdbe .RowStride +_fade ]&_dbee ;_efg +=int (_dbcc [_gggf ]);};if _efg > _bba {return true ;};};return false ;};func _afa (_fadd ,_adee int )int {if _fadd < _adee {return _fadd ;};return _adee ;
};func (_gbdbg *ClassedPoints )XAtIndex (i int )float32 {return (*_gbdbg .Points )[_gbdbg .IntSlice [i ]].X };func TstDSymbol (t *_dgg .T ,scale ...int )*Bitmap {_begac ,_gfdf :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_dg .NoError (t ,_gfdf );
return TstGetScaledSymbol (t ,_begac ,scale ...);};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_egef bool ,_ddb error ){const _bgfe ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_adfbb ,_cadb :=p1 .Width ,p1 .Height ;_gba ,_ddbg :=p3 .Width ,p3 .Height ;if _bg .Abs (_adfbb -_gba )> maxDiffW {return false ,nil ;};if _bg .Abs (_cadb -_ddbg )> maxDiffH {return false ,nil ;};_egbbd :=int (float32 (area1 )*(1.0-rank )+0.5);_bbce :=int (float32 (area3 )*(1.0-rank )+0.5);
var _gfcb ,_bgcd int ;if delX >=0{_gfcb =int (delX +0.5);}else {_gfcb =int (delX -0.5);};if delY >=0{_bgcd =int (delY +0.5);}else {_bgcd =int (delY -0.5);};_ddgg :=p1 .CreateTemplate ();if _ddb =_ddgg .RasterOperation (0,0,_adfbb ,_cadb ,PixSrc ,p1 ,0,0);
_ddb !=nil {return false ,_b .Wrap (_ddb ,_bgfe ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ddb =_ddgg .RasterOperation (_gfcb ,_bgcd ,_adfbb ,_cadb ,PixNotSrcAndDst ,p4 ,0,0);_ddb !=nil {return false ,_b .Wrap (_ddb ,_bgfe ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_egef ,_ddb =_ddgg .ThresholdPixelSum (_egbbd ,tab8 );if _ddb !=nil {return false ,_b .Wrap (_ddb ,_bgfe ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _egef {return false ,nil ;};if _ddb =_ddgg .RasterOperation (_gfcb ,_bgcd ,_gba ,_ddbg ,PixSrc ,p3 ,0,0);
_ddb !=nil {return false ,_b .Wrap (_ddb ,_bgfe ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ddb =_ddgg .RasterOperation (0,0,_gba ,_ddbg ,PixNotSrcAndDst ,p2 ,0,0);_ddb !=nil {return false ,_b .Wrap (_ddb ,_bgfe ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_egef ,_ddb =_ddgg .ThresholdPixelSum (_bbce ,tab8 );if _ddb !=nil {return false ,_b .Wrap (_ddb ,_bgfe ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_egef ,nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;
MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_egge *Bitmap )Zero ()bool {_ede :=_egge .Width /8;_bdf :=_egge .Width &7;var _fdad byte ;if _bdf !=0{_fdad =byte (0xff<<uint (8-_bdf ));};var _ggd ,_cegd ,_efdg int ;
for _cegd =0;_cegd < _egge .Height ;_cegd ++{_ggd =_egge .RowStride *_cegd ;for _efdg =0;_efdg < _ede ;_efdg ,_ggd =_efdg +1,_ggd +1{if _egge .Data [_ggd ]!=0{return false ;};};if _bdf > 0{if _egge .Data [_ggd ]&_fdad !=0{return false ;};};};return true ;
};func (_age *Bitmap )nextOnPixel (_bffd ,_fddd int )(_bgb _f .Point ,_eec bool ,_cbf error ){const _bbdb ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_bgb ,_eec ,_cbf =_age .nextOnPixelLow (_age .Width ,_age .Height ,_age .RowStride ,_bffd ,_fddd );
if _cbf !=nil {return _bgb ,false ,_b .Wrap (_cbf ,_bbdb ,"");};return _bgb ,_eec ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_dcba *byWidth )Swap (i ,j int ){_dcba .Values [i ],_dcba .Values [j ]=_dcba .Values [j ],_dcba .Values [i ];
if _dcba .Boxes !=nil {_dcba .Boxes [i ],_dcba .Boxes [j ]=_dcba .Boxes [j ],_dcba .Boxes [i ];};};func TstAddSymbol (t *_dgg .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_cfca :=_f .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );
bms .AddBox (&_cfca );*x +=sym .Width +space ;};func init (){const _bbebe ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_cegca =New (50,40);var _gcba error ;_cegca ,_gcba =_cegca .AddBorder (2,1);
if _gcba !=nil {panic (_b .Wrap (_gcba ,_bbebe ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_eafgg ,_gcba =NewWithData (50,22,_dcdfd );if _gcba !=nil {panic (_b .Wrap (_gcba ,_bbebe ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func New (width ,height int )*Bitmap {_bgcg :=_gegb (width ,height );_bgcg .Data =make ([]byte ,height *_bgcg .RowStride );return _bgcg ;};func TstASymbol (t *_dgg .T )*Bitmap {t .Helper ();_ebdge :=New (6,6);_dg .NoError (t ,_ebdge .SetPixel (1,0,1));
_dg .NoError (t ,_ebdge .SetPixel (2,0,1));_dg .NoError (t ,_ebdge .SetPixel (3,0,1));_dg .NoError (t ,_ebdge .SetPixel (4,0,1));_dg .NoError (t ,_ebdge .SetPixel (5,1,1));_dg .NoError (t ,_ebdge .SetPixel (1,2,1));_dg .NoError (t ,_ebdge .SetPixel (2,2,1));
_dg .NoError (t ,_ebdge .SetPixel (3,2,1));_dg .NoError (t ,_ebdge .SetPixel (4,2,1));_dg .NoError (t ,_ebdge .SetPixel (5,2,1));_dg .NoError (t ,_ebdge .SetPixel (0,3,1));_dg .NoError (t ,_ebdge .SetPixel (5,3,1));_dg .NoError (t ,_ebdge .SetPixel (0,4,1));
_dg .NoError (t ,_ebdge .SetPixel (5,4,1));_dg .NoError (t ,_ebdge .SetPixel (1,5,1));_dg .NoError (t ,_ebdge .SetPixel (2,5,1));_dg .NoError (t ,_ebdge .SetPixel (3,5,1));_dg .NoError (t ,_ebdge .SetPixel (4,5,1));_dg .NoError (t ,_ebdge .SetPixel (5,5,1));
return _ebdge ;};type Points []Point ;func TstPSymbol (t *_dgg .T )*Bitmap {t .Helper ();_cdeag :=New (5,8);_dg .NoError (t ,_cdeag .SetPixel (0,0,1));_dg .NoError (t ,_cdeag .SetPixel (1,0,1));_dg .NoError (t ,_cdeag .SetPixel (2,0,1));_dg .NoError (t ,_cdeag .SetPixel (3,0,1));
_dg .NoError (t ,_cdeag .SetPixel (4,1,1));_dg .NoError (t ,_cdeag .SetPixel (0,1,1));_dg .NoError (t ,_cdeag .SetPixel (4,2,1));_dg .NoError (t ,_cdeag .SetPixel (0,2,1));_dg .NoError (t ,_cdeag .SetPixel (4,3,1));_dg .NoError (t ,_cdeag .SetPixel (0,3,1));
_dg .NoError (t ,_cdeag .SetPixel (0,4,1));_dg .NoError (t ,_cdeag .SetPixel (1,4,1));_dg .NoError (t ,_cdeag .SetPixel (2,4,1));_dg .NoError (t ,_cdeag .SetPixel (3,4,1));_dg .NoError (t ,_cdeag .SetPixel (0,5,1));_dg .NoError (t ,_cdeag .SetPixel (0,6,1));
_dg .NoError (t ,_cdeag .SetPixel (0,7,1));return _cdeag ;};func (_fgga *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_cgcg *Bitmaps ,_afae *Boxes ,_cgff error ){const _aefe ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _fgga ==nil {return nil ,nil ,_b .Error (_aefe ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_b .Error (_aefe ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _fgga .Zero (){_afae =&Boxes {};_cgcg =&Bitmaps {};return _cgcg ,_afae ,nil ;};switch components {case ComponentConn :_cgcg =&Bitmaps {};if _afae ,_cgff =_fgga .ConnComponents (_cgcg ,8);_cgff !=nil {return nil ,nil ,_b .Wrap (_cgff ,_aefe ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_eggb ,_egb :=MorphSequence (_fgga ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _egb !=nil {return nil ,nil ,_b .Wrap (_egb ,_aefe ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _g .Log .IsLogLevel (_g .LogLevelTrace ){_g .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_eggb .String ());
};_fdg :=&Bitmaps {};_afae ,_egb =_eggb .ConnComponents (_fdg ,8);if _egb !=nil {return nil ,nil ,_b .Wrap (_egb ,_aefe ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _g .Log .IsLogLevel (_g .LogLevelTrace ){_g .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_fdg .String ());
};if _cgcg ,_egb =_fdg .ClipToBitmap (_fgga );_egb !=nil {return nil ,nil ,_b .Wrap (_egb ,_aefe ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_baa :=1;
var _fbab *Bitmap ;switch {case _fgga .XResolution <=200:_fbab =_fgga ;case _fgga .XResolution <=400:_baa =2;_fbab ,_cgff =_afg (_fgga ,1,0,0,0);if _cgff !=nil {return nil ,nil ,_b .Wrap (_cgff ,_aefe ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_baa =4;_fbab ,_cgff =_afg (_fgga ,1,1,0,0);if _cgff !=nil {return nil ,nil ,_b .Wrap (_cgff ,_aefe ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_cfge ,_ ,_eedaf :=_cegc (_fbab );if _eedaf !=nil {return nil ,nil ,_b .Wrap (_eedaf ,_aefe ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_fcef ,_eedaf :=_bbec (_cfge ,_baa );if _eedaf !=nil {return nil ,nil ,_b .Wrap (_eedaf ,_aefe ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_afcce :=&Bitmaps {};if _afae ,_eedaf =_fcef .ConnComponents (_afcce ,4);_eedaf !=nil {return nil ,nil ,_b .Wrap (_eedaf ,_aefe ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _cgcg ,_eedaf =_afcce .ClipToBitmap (_fgga );_eedaf !=nil {return nil ,nil ,_b .Wrap (_eedaf ,_aefe ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_cgcg ,_cgff =_cgcg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _cgff !=nil {return nil ,nil ,_b .Wrap (_cgff ,_aefe ,"");};_afae ,_cgff =_afae .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _cgff !=nil {return nil ,nil ,_b .Wrap (_cgff ,_aefe ,"");};return _cgcg ,_afae ,nil ;};func _bac (_gab *Bitmap ,_ebc int )(*Bitmap ,error ){const _cce ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _gab ==nil {return nil ,_b .Error (_cce ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ebc ==1{return _ade (nil ,_gab );};if _ebc !=2&&_ebc !=4&&_ebc !=8{return nil ,_b .Error (_cce ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_ege :=_ebc *_gab .Width ;_afc :=_ebc *_gab .Height ;_ag :=New (_ege ,_afc );var _abb error ;switch _ebc {case 2:_abb =_ga (_ag ,_gab );case 4:_abb =_bgg (_ag ,_gab );case 8:_abb =_de (_ag ,_gab );};if _abb !=nil {return nil ,_b .Wrap (_abb ,_cce ,"");
};return _ag ,nil ;};func (_gggg Points )Get (i int )(Point ,error ){if i > len (_gggg )-1{return Point {},_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gggg [i ],nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_ccdcd *Bitmaps )GetBox (i int )(*_f .Rectangle ,error ){const _baea ="\u0047\u0065\u0074\u0042\u006f\u0078";
if _ccdcd ==nil {return nil ,_b .Error (_baea ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_ccdcd .Boxes )-1{return nil ,_b .Errorf (_baea ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ccdcd .Boxes [i ],nil ;};func _dde (_defeg ,_afaa *Bitmap ,_dbdg CombinationOperator )*Bitmap {_dggfa :=New (_defeg .Width ,_defeg .Height );for _ccf :=0;_ccf < len (_dggfa .Data );_ccf ++{_dggfa .Data [_ccf ]=_afcd (_defeg .Data [_ccf ],_afaa .Data [_ccf ],_dbdg );
};return _dggfa ;};func TstOSymbol (t *_dgg .T ,scale ...int )*Bitmap {_fefc ,_ecaa :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_dg .NoError (t ,_ecaa );return TstGetScaledSymbol (t ,_fefc ,scale ...);};func _feda (_acde *Bitmap ,_efca ,_aeae ,_becfga ,_acc int ,_ebeb RasterOperator ,_fedf *Bitmap ,_aaecb ,_gdcf int )error {const _ccca ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _acde ==nil {return _b .Error (_ccca ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _ebeb ==PixDst {return nil ;};switch _ebeb {case PixClr ,PixSet ,PixNotDst :_cbdb (_acde ,_efca ,_aeae ,_becfga ,_acc ,_ebeb );
return nil ;};if _fedf ==nil {_g .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _b .Error (_ccca ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _edfdf :=_dgdbd (_acde ,_efca ,_aeae ,_becfga ,_acc ,_ebeb ,_fedf ,_aaecb ,_gdcf );_edfdf !=nil {return _b .Wrap (_edfdf ,_ccca ,"");
};return nil ;};func (_geag *byWidth )Len ()int {return len (_geag .Values )};type BoundaryCondition int ;func (_cac *Bitmap )Copy ()*Bitmap {_fecd :=make ([]byte ,len (_cac .Data ));copy (_fecd ,_cac .Data );return &Bitmap {Width :_cac .Width ,Height :_cac .Height ,RowStride :_cac .RowStride ,Data :_fecd ,Color :_cac .Color ,Text :_cac .Text ,BitmapNumber :_cac .BitmapNumber ,Special :_cac .Special };
};func (_gacc *ClassedPoints )xSortFunction ()func (_ccdcb int ,_bbaa int )bool {return func (_gceeb ,_bgge int )bool {return _gacc .XAtIndex (_gceeb )< _gacc .XAtIndex (_bgge )};};var (_daacf =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_bfccf =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};
);func _gedce (_efce ...MorphProcess )(_ebda error ){const _agccg ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _cbea ,_bcea int ;for _dade ,_addgf :=range _efce {if _ebda =_addgf .verify (_dade ,&_cbea ,&_bcea );
_ebda !=nil {return _b .Wrap (_ebda ,_agccg ,"");};};if _bcea !=0&&_cbea !=0{return _b .Error (_agccg ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};type CombinationOperator int ;func _afg (_fc *Bitmap ,_bd ...int )(_bb *Bitmap ,_cbd error ){const _eaf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _fc ==nil {return nil ,_b .Error (_eaf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_bd )==0||len (_bd )> 4{return nil ,_b .Error (_eaf ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _bd [0]<=0{_g .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_bb ,_cbd =_ade (nil ,_fc );if _cbd !=nil {return nil ,_b .Wrap (_cbd ,_eaf ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _bb ,nil ;};_fgd :=_fcd ();_bb =_fc ;for _ffa ,_cef :=range _bd {if _cef <=0{break ;};_bb ,_cbd =_ggg (_bb ,_cef ,_fgd );if _cbd !=nil {return nil ,_b .Wrapf (_cbd ,_eaf ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_ffa );
};};return _bb ,nil ;};type LocationFilter int ;