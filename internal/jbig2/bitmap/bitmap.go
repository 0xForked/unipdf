//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_fc "encoding/binary";_e "github.com/stretchr/testify/require";_c "github.com/unidoc/unipdf/v3/common";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_dd "github.com/unidoc/unipdf/v3/internal/imageutil";_ed "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_d "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_be "image";_bd "math";_b "sort";_ge "strings";_eg "testing";);func _dbd (_fcb ,_dde *Bitmap )(_gfb error ){const _gfd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_dg :=_dde .RowStride ;_dc :=_fcb .RowStride ;var _ff ,_fca ,_bg ,_gg ,_bgf int ;for _bg =0;_bg < _dde .Height ;_bg ++{_ff =_bg *_dg ;_fca =8*_bg *_dc ;for _gg =0;_gg < _dg ;_gg ++{if _gfb =_fcb .setEightBytes (_fca +_gg *8,_cffab [_dde .Data [_ff +_gg ]]);
_gfb !=nil {return _d .Wrap (_gfb ,_gfd ,"");};};for _bgf =1;_bgf < 8;_bgf ++{for _gg =0;_gg < _dc ;_gg ++{if _gfb =_fcb .SetByte (_fca +_bgf *_dc +_gg ,_fcb .Data [_fca +_gg ]);_gfb !=nil {return _d .Wrap (_gfb ,_gfd ,"");};};};};return nil ;};func _ffgbb (_dfgf ,_adea *Bitmap ,_dgeef *Selection )(*Bitmap ,error ){const _eccb ="\u006f\u0070\u0065\u006e";
var _ebfbc error ;_dfgf ,_ebfbc =_acgd (_dfgf ,_adea ,_dgeef );if _ebfbc !=nil {return nil ,_d .Wrap (_ebfbc ,_eccb ,"");};_cdba ,_ebfbc :=_cec (nil ,_adea ,_dgeef );if _ebfbc !=nil {return nil ,_d .Wrap (_ebfbc ,_eccb ,"");};_ ,_ebfbc =_bddgg (_dfgf ,_cdba ,_dgeef );
if _ebfbc !=nil {return nil ,_d .Wrap (_ebfbc ,_eccb ,"");};return _dfgf ,nil ;};func _dbaf (_afdc ,_affg *Bitmap ,_fgffc ,_cbb ,_feb uint ,_feafe ,_ecfa int ,_aeda bool ,_ebfb ,_ggce int )error {for _gcf :=_feafe ;_gcf < _ecfa ;_gcf ++{if _ebfb +1< len (_afdc .Data ){_bffgb :=_gcf +1==_ecfa ;
_dgc ,_bfaa :=_afdc .GetByte (_ebfb );if _bfaa !=nil {return _bfaa ;};_ebfb ++;_dgc <<=_fgffc ;_cdef ,_bfaa :=_afdc .GetByte (_ebfb );if _bfaa !=nil {return _bfaa ;};_cdef >>=_cbb ;_bgea :=_dgc |_cdef ;if _bffgb &&!_aeda {_bgea =_fbaef (_feb ,_bgea );};
_bfaa =_affg .SetByte (_ggce ,_bgea );if _bfaa !=nil {return _bfaa ;};_ggce ++;if _bffgb &&_aeda {_bccf ,_gaab :=_afdc .GetByte (_ebfb );if _gaab !=nil {return _gaab ;};_bccf <<=_fgffc ;_bgea =_fbaef (_feb ,_bccf );if _gaab =_affg .SetByte (_ggce ,_bgea );
_gaab !=nil {return _gaab ;};};continue ;};_efebg ,_dfgg :=_afdc .GetByte (_ebfb );if _dfgg !=nil {_c .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_ebfb ,_dfgg );
return _dfgg ;};_efebg <<=_fgffc ;_ebfb ++;_dfgg =_affg .SetByte (_ggce ,_efebg );if _dfgg !=nil {return _dfgg ;};_ggce ++;};return nil ;};func _fdga (_aega *Bitmap ,_cbee ,_abab int ,_dfda ,_dfge int ,_bfgc RasterOperator ){var (_gdbfg bool ;_ggda bool ;
_ffgad int ;_dbced int ;_cebcd int ;_bdca int ;_fgcg bool ;_acec byte ;);_afbag :=8-(_cbee &7);_faffc :=_geda [_afbag ];_abafa :=_aega .RowStride *_abab +(_cbee >>3);if _dfda < _afbag {_gdbfg =true ;_faffc &=_bdef [8-_afbag +_dfda ];};if !_gdbfg {_ffgad =(_dfda -_afbag )>>3;
if _ffgad !=0{_ggda =true ;_dbced =_abafa +1;};};_cebcd =(_cbee +_dfda )&7;if !(_gdbfg ||_cebcd ==0){_fgcg =true ;_acec =_bdef [_cebcd ];_bdca =_abafa +1+_ffgad ;};var _cafbg ,_gcff int ;switch _bfgc {case PixClr :for _cafbg =0;_cafbg < _dfge ;_cafbg ++{_aega .Data [_abafa ]=_agcb (_aega .Data [_abafa ],0x0,_faffc );
_abafa +=_aega .RowStride ;};if _ggda {for _cafbg =0;_cafbg < _dfge ;_cafbg ++{for _gcff =0;_gcff < _ffgad ;_gcff ++{_aega .Data [_dbced +_gcff ]=0x0;};_dbced +=_aega .RowStride ;};};if _fgcg {for _cafbg =0;_cafbg < _dfge ;_cafbg ++{_aega .Data [_bdca ]=_agcb (_aega .Data [_bdca ],0x0,_acec );
_bdca +=_aega .RowStride ;};};case PixSet :for _cafbg =0;_cafbg < _dfge ;_cafbg ++{_aega .Data [_abafa ]=_agcb (_aega .Data [_abafa ],0xff,_faffc );_abafa +=_aega .RowStride ;};if _ggda {for _cafbg =0;_cafbg < _dfge ;_cafbg ++{for _gcff =0;_gcff < _ffgad ;
_gcff ++{_aega .Data [_dbced +_gcff ]=0xff;};_dbced +=_aega .RowStride ;};};if _fgcg {for _cafbg =0;_cafbg < _dfge ;_cafbg ++{_aega .Data [_bdca ]=_agcb (_aega .Data [_bdca ],0xff,_acec );_bdca +=_aega .RowStride ;};};case PixNotDst :for _cafbg =0;_cafbg < _dfge ;
_cafbg ++{_aega .Data [_abafa ]=_agcb (_aega .Data [_abafa ],^_aega .Data [_abafa ],_faffc );_abafa +=_aega .RowStride ;};if _ggda {for _cafbg =0;_cafbg < _dfge ;_cafbg ++{for _gcff =0;_gcff < _ffgad ;_gcff ++{_aega .Data [_dbced +_gcff ]=^(_aega .Data [_dbced +_gcff ]);
};_dbced +=_aega .RowStride ;};};if _fgcg {for _cafbg =0;_cafbg < _dfge ;_cafbg ++{_aega .Data [_bdca ]=_agcb (_aega .Data [_bdca ],^_aega .Data [_bdca ],_acec );_bdca +=_aega .RowStride ;};};};};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _eaee (d ,s )};
func _bbed (_dbf ,_badb ,_gbed *Bitmap )(*Bitmap ,error ){const _cdbd ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _badb ==nil {return nil ,_d .Error (_cdbd ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gbed ==nil {return nil ,_d .Error (_cdbd ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _dbf ==_gbed {return nil ,_d .Error (_cdbd ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_badb .SizesEqual (_gbed ){_c .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_cdbd );
};var _aaae error ;if _dbf ,_aaae =_eaee (_dbf ,_badb );_aaae !=nil {return nil ,_d .Wrap (_aaae ,_cdbd ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _aaae =_dbf .RasterOperation (0,0,_dbf .Width ,_dbf .Height ,PixSrcXorDst ,_gbed ,0,0);
_aaae !=nil {return nil ,_d .Wrap (_aaae ,_cdbd ,"");};return _dbf ,nil ;};func (_gdg *Boxes )selectWithIndicator (_cac *_ed .NumSlice )(_aaaed *Boxes ,_aeac error ){const _feec ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gdg ==nil {return nil ,_d .Error (_feec ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _cac ==nil {return nil ,_d .Error (_feec ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_cac )!=len (*_gdg ){return nil ,_d .Error (_feec ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _cafb ,_bgfa int ;for _bgd :=0;_bgd < len (*_cac );_bgd ++{if _cafb ,_aeac =_cac .GetInt (_bgd );_aeac !=nil {return nil ,_d .Wrap (_aeac ,_feec ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _cafb ==1{_bgfa ++;
};};if _bgfa ==len (*_gdg ){return _gdg ,nil ;};_dcg :=Boxes {};for _dcea :=0;_dcea < len (*_cac );_dcea ++{_cafb =int ((*_cac )[_dcea ]);if _cafb ==0{continue ;};_dcg =append (_dcg ,(*_gdg )[_dcea ]);};_aaaed =&_dcg ;return _aaaed ,nil ;};func _eefd (_ceee ,_feca int ,_bcafd string )*Selection {_cddbd :=&Selection {Height :_ceee ,Width :_feca ,Name :_bcafd };
_cddbd .Data =make ([][]SelectionValue ,_ceee );for _eccf :=0;_eccf < _ceee ;_eccf ++{_cddbd .Data [_eccf ]=make ([]SelectionValue ,_feca );};return _cddbd ;};func (_gebg *Bitmap )SetPixel (x ,y int ,pixel byte )error {_dfgd :=_gebg .GetByteIndex (x ,y );
if _dfgd > len (_gebg .Data )-1{return _d .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_dfgd );};_ccc :=_gebg .GetBitOffset (x );
_cebf :=uint (7-_ccc );_afb :=_gebg .Data [_dfgd ];var _egbf byte ;if pixel ==1{_egbf =_afb |(pixel &0x01<<_cebf );}else {_egbf =_afb &^(1<<_cebf );};_gebg .Data [_dfgd ]=_egbf ;return nil ;};func _gfa (_ggbg *Bitmap ,_agfd int )(*Bitmap ,error ){const _caaab ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _ggbg ==nil {return nil ,_d .Error (_caaab ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _agfd <=0{return nil ,_d .Error (_caaab ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _agfd ==1{_acae ,_abac :=_eaee (nil ,_ggbg );if _abac !=nil {return nil ,_d .Wrap (_abac ,_caaab ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _acae ,nil ;};_dgdge ,_bbba :=_fg (_ggbg ,_agfd ,_agfd );if _bbba !=nil {return nil ,_d .Wrap (_bbba ,_caaab ,"");
};return _dgdge ,nil ;};func (_bebb *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _bebb .Copy (),nil ;};_ccb ,_ebb :=_bebb .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _ebb !=nil {return nil ,_d .Wrap (_ebb ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");
};return _ccb ,nil ;};func (_dacf *Bitmap )GetByte (index int )(byte ,error ){if index > len (_dacf .Data )-1||index < 0{return 0,_d .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _dacf .Data [index ],nil ;};func (_cdfc Points )YSorter ()func (_gfcc ,_ebgc int )bool {return func (_cdcc ,_dcag int )bool {return _cdfc [_cdcc ].Y < _cdfc [_dcag ].Y };};func ClipBoxToRectangle (box *_be .Rectangle ,wi ,hi int )(_cff *_be .Rectangle ,_ecac error ){const _afaa ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_d .Error (_afaa ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_d .Error (_afaa ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_eaga :=*box ;_cff =&_eaga ;if _cff .Min .X < 0{_cff .Max .X +=_cff .Min .X ;_cff .Min .X =0;};if _cff .Min .Y < 0{_cff .Max .Y +=_cff .Min .Y ;_cff .Min .Y =0;};if _cff .Max .X > wi {_cff .Max .X =wi ;};if _cff .Max .Y > hi {_cff .Max .Y =hi ;};return _cff ,nil ;
};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;
};func (_egdg *Bitmap )GetVanillaData ()[]byte {if _egdg .Color ==Chocolate {_egdg .inverseData ();};return _egdg .Data ;};func init (){for _bdg :=0;_bdg < 256;_bdg ++{_daca [_bdg ]=uint8 (_bdg &0x1)+(uint8 (_bdg >>1)&0x1)+(uint8 (_bdg >>2)&0x1)+(uint8 (_bdg >>3)&0x1)+(uint8 (_bdg >>4)&0x1)+(uint8 (_bdg >>5)&0x1)+(uint8 (_bdg >>6)&0x1)+(uint8 (_bdg >>7)&0x1);
};};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _gbcd ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_ccge ,_gacg :=p1 .Width ,p1 .Height ;_eeeb ,_bcf :=p3 .Width ,p3 .Height ;if _ed .Abs (_ccge -_eeeb )> maxDiffW {return false ,nil ;
};if _ed .Abs (_gacg -_bcf )> maxDiffH {return false ,nil ;};_cffa :=int (delX +_ed .Sign (delX )*0.5);_bde :=int (delY +_ed .Sign (delY )*0.5);var _gcb error ;_gegc :=p1 .CreateTemplate ();if _gcb =_gegc .RasterOperation (0,0,_ccge ,_gacg ,PixSrc ,p1 ,0,0);
_gcb !=nil {return false ,_d .Wrap (_gcb ,_gbcd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gcb =_gegc .RasterOperation (_cffa ,_bde ,_ccge ,_gacg ,PixNotSrcAndDst ,p4 ,0,0);_gcb !=nil {return false ,_d .Wrap (_gcb ,_gbcd ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _gegc .Zero (){return false ,nil ;};if _gcb =_gegc .RasterOperation (_cffa ,_bde ,_eeeb ,_bcf ,PixSrc ,p3 ,0,0);_gcb !=nil {return false ,_d .Wrap (_gcb ,_gbcd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gcb =_gegc .RasterOperation (0,0,_eeeb ,_bcf ,PixNotSrcAndDst ,p2 ,0,0);
_gcb !=nil {return false ,_d .Wrap (_gcb ,_gbcd ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _gegc .Zero (),nil ;};func (_fbe *Bitmap )nextOnPixel (_acbc ,_cdg int )(_fbae _be .Point ,_cgdd bool ,_ebe error ){const _ddfg ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_fbae ,_cgdd ,_ebe =_fbe .nextOnPixelLow (_fbe .Width ,_fbe .Height ,_fbe .RowStride ,_acbc ,_cdg );if _ebe !=nil {return _fbae ,false ,_d .Wrap (_ebe ,_ddfg ,"");};return _fbae ,_cgdd ,nil ;};func (_cga *Bitmap )String ()string {var _fde ="\u000a";for _bbdg :=0;
_bbdg < _cga .Height ;_bbdg ++{var _dgdd string ;for _bda :=0;_bda < _cga .Width ;_bda ++{_agd :=_cga .GetPixel (_bda ,_bbdg );if _agd {_dgdd +="\u0031";}else {_dgdd +="\u0030";};};_fde +=_dgdd +"\u000a";};return _fde ;};type BoundaryCondition int ;type Bitmaps struct{Values []*Bitmap ;
Boxes []*_be .Rectangle ;};func _fg (_af *Bitmap ,_fb ,_dcf int )(*Bitmap ,error ){const _ea ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _af ==nil {return nil ,_d .Error (_ea ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fb <=0||_dcf <=0{return nil ,_d .Error (_ea ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _fb ==_dcf {if _fb ==1{_gfc ,_dfb :=_eaee (nil ,_af );
if _dfb !=nil {return nil ,_d .Wrap (_dfb ,_ea ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _gfc ,nil ;};if _fb ==2||_fb ==4||_fb ==8{_gd ,_dab :=_dce (_af ,_fb );if _dab !=nil {return nil ,_d .Wrap (_dab ,_ea ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _gd ,nil ;};};_ec :=_fb *_af .Width ;_gc :=_dcf *_af .Height ;_beag :=New (_ec ,_gc );_ceb :=_beag .RowStride ;var (_def ,_dfg ,_ged ,_ecc ,_eda int ;_bcc byte ;_dac error ;);for _dfg =0;_dfg < _af .Height ;_dfg ++{_def =_dcf *_dfg *_ceb ;for _ged =0;
_ged < _af .Width ;_ged ++{if _eb :=_af .GetPixel (_ged ,_dfg );_eb {_eda =_fb *_ged ;for _ecc =0;_ecc < _fb ;_ecc ++{_beag .setBit (_def *8+_eda +_ecc );};};};for _ecc =1;_ecc < _dcf ;_ecc ++{_fed :=_def +_ecc *_ceb ;for _afa :=0;_afa < _ceb ;_afa ++{if _bcc ,_dac =_beag .GetByte (_def +_afa );
_dac !=nil {return nil ,_d .Wrapf (_dac ,_ea ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_ecc );};if _dac =_beag .SetByte (_fed +_afa ,_bcc );_dac !=nil {return nil ,_d .Wrap (_dac ,_ea ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};};};};return _beag ,nil ;};func (_dgdb *Bitmap )addPadBits ()(_bge error ){const _dfgdf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_agdd :=_dgdb .Width %8;if _agdd ==0{return nil ;};_adc :=_dgdb .Width /8;
_dfcg :=_f .NewReader (_dgdb .Data );_dfdcd :=make ([]byte ,_dgdb .Height *_dgdb .RowStride );_aabf :=_f .NewWriterMSB (_dfdcd );_abdb :=make ([]byte ,_adc );var (_fgff int ;_ebgf uint64 ;);for _fgff =0;_fgff < _dgdb .Height ;_fgff ++{if _ ,_bge =_dfcg .Read (_abdb );
_bge !=nil {return _d .Wrap (_bge ,_dfgdf ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_bge =_aabf .Write (_abdb );_bge !=nil {return _d .Wrap (_bge ,_dfgdf ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _ebgf ,_bge =_dfcg .ReadBits (byte (_agdd ));
_bge !=nil {return _d .Wrap (_bge ,_dfgdf ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _bge =_aabf .WriteByte (byte (_ebgf )<<uint (8-_agdd ));_bge !=nil {return _d .Wrap (_bge ,_dfgdf ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_dgdb .Data =_aabf .Data ();return nil ;};func _egb (_egg *Bitmap ,_gea *Bitmap ,_fcbb int )(_fd error ){const _dcee ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _fcbb {case 2:_fd =_ga (_egg ,_gea );
case 4:_fd =_df (_egg ,_gea );case 8:_fd =_dbd (_egg ,_gea );default:return _d .Error (_dcee ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _fd !=nil {_fd =_d .Wrap (_fd ,_dcee ,"");};return _fd ;};func Extract (roi _be .Rectangle ,src *Bitmap )(*Bitmap ,error ){_baaff :=New (roi .Dx (),roi .Dy ());_bebc :=roi .Min .X &0x07;_feaf :=8-_bebc ;_ffec :=uint (8-_baaff .Width &0x07);_ccff :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );
_beab :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_dcbg :=_baaff .RowStride ==_beab +1-_ccff ;var _bgffe int ;for _fbba :=roi .Min .Y ;_fbba < roi .Max .Y ;_fbba ++{_aga :=_ccff ;_bbca :=_bgffe ;switch {case _ccff ==_beab :_fgdd ,_gbag :=src .GetByte (_aga );
if _gbag !=nil {return nil ,_gbag ;};_fgdd <<=uint (_bebc );_gbag =_baaff .SetByte (_bbca ,_fbaef (_ffec ,_fgdd ));if _gbag !=nil {return nil ,_gbag ;};case _bebc ==0:for _dcga :=_ccff ;_dcga <=_beab ;_dcga ++{_cefg ,_ceff :=src .GetByte (_aga );if _ceff !=nil {return nil ,_ceff ;
};_aga ++;if _dcga ==_beab &&_dcbg {_cefg =_fbaef (_ffec ,_cefg );};_ceff =_baaff .SetByte (_bbca ,_cefg );if _ceff !=nil {return nil ,_ceff ;};_bbca ++;};default:_bfbd :=_dbaf (src ,_baaff ,uint (_bebc ),uint (_feaf ),_ffec ,_ccff ,_beab ,_dcbg ,_aga ,_bbca );
if _bfbd !=nil {return nil ,_bfbd ;};};_ccff +=src .RowStride ;_beab +=src .RowStride ;_bgffe +=_baaff .RowStride ;};return _baaff ,nil ;};type LocationFilter int ;func (_gcc *Bitmap )ClipRectangle (box *_be .Rectangle )(_agcg *Bitmap ,_fgg *_be .Rectangle ,_ggbe error ){const _aabg ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_d .Error (_aabg ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_acb ,_cdd :=_gcc .Width ,_gcc .Height ;_bdc :=_be .Rect (0,0,_acb ,_cdd );if !box .Overlaps (_bdc ){return nil ,nil ,_d .Error (_aabg ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_gbc :=box .Intersect (_bdc );_dfdce ,_cab :=_gbc .Min .X ,_gbc .Min .Y ;_abd ,_ddb :=_gbc .Dx (),_gbc .Dy ();_agcg =New (_abd ,_ddb );_agcg .Text =_gcc .Text ;if _ggbe =_agcg .RasterOperation (0,0,_abd ,_ddb ,PixSrc ,_gcc ,_dfdce ,_cab );_ggbe !=nil {return nil ,nil ,_d .Wrap (_ggbe ,_aabg ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_fgg =&_gbc ;return _agcg ,_fgg ,nil ;};func _bbdb (_ggg ,_acac *Bitmap ,_bddb ,_edbg int )(*Bitmap ,error ){const _bced ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _acac ==nil {_c .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_d .Error (_bced ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bddb < 1||_edbg < 1{return nil ,_d .Error (_bced ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _bddb ==1&&_edbg ==1{_defg ,_acdc :=_eaee (_ggg ,_acac );if _acdc !=nil {return nil ,_d .Wrap (_acdc ,_bced ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _defg ,nil ;};if _bddb ==1||_edbg ==1{_gfg :=SelCreateBrick (_edbg ,_bddb ,_edbg /2,_bddb /2,SelHit );_gbec ,_dga :=_bddgg (_ggg ,_acac ,_gfg );if _dga !=nil {return nil ,_d .Wrap (_dga ,_bced ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gbec ,nil ;};_cacd :=SelCreateBrick (1,_bddb ,0,_bddb /2,SelHit );_dfbf :=SelCreateBrick (_edbg ,1,_edbg /2,0,SelHit );_acga ,_agfg :=_bddgg (nil ,_acac ,_cacd );if _agfg !=nil {return nil ,_d .Wrap (_agfg ,_bced ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ggg ,_agfg =_bddgg (_ggg ,_acga ,_dfbf );if _agfg !=nil {return nil ,_d .Wrap (_agfg ,_bced ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _ggg ,nil ;};func _bddgg (_bcaf *Bitmap ,_aeee *Bitmap ,_add *Selection )(*Bitmap ,error ){var (_cbfb *Bitmap ;
_ddcc error ;);_bcaf ,_ddcc =_fdfd (_bcaf ,_aeee ,_add ,&_cbfb );if _ddcc !=nil {return nil ,_ddcc ;};if _ddcc =_bcaf .clearAll ();_ddcc !=nil {return nil ,_ddcc ;};var _cadcf SelectionValue ;for _gagee :=0;_gagee < _add .Height ;_gagee ++{for _ddgg :=0;
_ddgg < _add .Width ;_ddgg ++{_cadcf =_add .Data [_gagee ][_ddgg ];if _cadcf ==SelHit {if _ddcc =_bcaf .RasterOperation (_ddgg -_add .Cx ,_gagee -_add .Cy ,_aeee .Width ,_aeee .Height ,PixSrcOrDst ,_cbfb ,0,0);_ddcc !=nil {return nil ,_ddcc ;};};};};return _bcaf ,nil ;
};func (_ffg *Bitmap )Equivalent (s *Bitmap )bool {return _ffg .equivalent (s )};func (_fcge *ClassedPoints )SortByY (){_fcge ._ffae =_fcge .ySortFunction ();_b .Sort (_fcge )};func (_gda *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _gda .removeBorderGeneral (left ,right ,top ,bot );
};func (_dffd *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _dbgb ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_dffd .Values )==0{return nil ,_d .Error (_dbgb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_geaac :=&BitmapsArray {};_dffd .SortByWidth ();_bagc :=-1;_dcgab :=-1;for _gebgf :=0;_gebgf < len (_dffd .Values );_gebgf ++{_cabbb :=_dffd .Values [_gebgf ].Width ;if _cabbb > _bagc {_bagc =_cabbb ;_dcgab ++;_geaac .Values =append (_geaac .Values ,&Bitmaps {});
};_geaac .Values [_dcgab ].AddBitmap (_dffd .Values [_gebgf ]);};return _geaac ,nil ;};func (_eecc *Bitmap )SetPadBits (value int ){_eecc .setPadBits (value )};const _egfbc =5000;func (_gbdgg Points )Size ()int {return len (_gbdgg )};func Centroids (bms []*Bitmap )(*Points ,error ){_ecbc :=make ([]Point ,len (bms ));
_dgca :=_cdac ();_ggad :=_beac ();var _eagf error ;for _cfba ,_fcdb :=range bms {_ecbc [_cfba ],_eagf =_fcdb .centroid (_dgca ,_ggad );if _eagf !=nil {return nil ,_eagf ;};};_fceg :=Points (_ecbc );return &_fceg ,nil ;};type MorphOperation int ;func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_gadc bool ,_adfe error ){const _decg ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_gbdd ,_dfec :=p1 .Width ,p1 .Height ;_bdeg ,_cbbc :=p3 .Width ,p3 .Height ;if _ed .Abs (_gbdd -_bdeg )> maxDiffW {return false ,nil ;};if _ed .Abs (_dfec -_cbbc )> maxDiffH {return false ,nil ;};_aefg :=int (float32 (area1 )*(1.0-rank )+0.5);_eegg :=int (float32 (area3 )*(1.0-rank )+0.5);
var _gbbf ,_fead int ;if delX >=0{_gbbf =int (delX +0.5);}else {_gbbf =int (delX -0.5);};if delY >=0{_fead =int (delY +0.5);}else {_fead =int (delY -0.5);};_cffe :=p1 .CreateTemplate ();if _adfe =_cffe .RasterOperation (0,0,_gbdd ,_dfec ,PixSrc ,p1 ,0,0);
_adfe !=nil {return false ,_d .Wrap (_adfe ,_decg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _adfe =_cffe .RasterOperation (_gbbf ,_fead ,_gbdd ,_dfec ,PixNotSrcAndDst ,p4 ,0,0);_adfe !=nil {return false ,_d .Wrap (_adfe ,_decg ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_gadc ,_adfe =_cffe .ThresholdPixelSum (_aefg ,tab8 );if _adfe !=nil {return false ,_d .Wrap (_adfe ,_decg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _gadc {return false ,nil ;};if _adfe =_cffe .RasterOperation (_gbbf ,_fead ,_bdeg ,_cbbc ,PixSrc ,p3 ,0,0);
_adfe !=nil {return false ,_d .Wrap (_adfe ,_decg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _adfe =_cffe .RasterOperation (0,0,_bdeg ,_cbbc ,PixNotSrcAndDst ,p2 ,0,0);_adfe !=nil {return false ,_d .Wrap (_adfe ,_decg ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_gadc ,_adfe =_cffe .ThresholdPixelSum (_eegg ,tab8 );if _adfe !=nil {return false ,_d .Wrap (_adfe ,_decg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_gadc ,nil ;};type Color int ;func _ddga (_dcabb *Bitmap ,_cbeg ,_bcea ,_eecd ,_gefa int ,_ebd RasterOperator ,_dcda *Bitmap ,_cbage ,_bfda int )error {var (_abacd byte ;
_ccadc int ;_geea int ;_ageg ,_aeec int ;_ecgb ,_cdcg int ;);_egfg :=_eecd >>3;_efdf :=_eecd &7;if _efdf > 0{_abacd =_bdef [_efdf ];};_ccadc =_dcda .RowStride *_bfda +(_cbage >>3);_geea =_dcabb .RowStride *_bcea +(_cbeg >>3);switch _ebd {case PixSrc :for _ecgb =0;
_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]=_dcda .Data [_ageg ];_aeec ++;_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],_dcda .Data [_ageg ],_abacd );
};};case PixNotSrc :for _ecgb =0;_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]=^(_dcda .Data [_ageg ]);_aeec ++;_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],^_dcda .Data [_ageg ],_abacd );
};};case PixSrcOrDst :for _ecgb =0;_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]|=_dcda .Data [_ageg ];_aeec ++;_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],_dcda .Data [_ageg ]|_dcabb .Data [_aeec ],_abacd );
};};case PixSrcAndDst :for _ecgb =0;_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]&=_dcda .Data [_ageg ];_aeec ++;_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],_dcda .Data [_ageg ]&_dcabb .Data [_aeec ],_abacd );
};};case PixSrcXorDst :for _ecgb =0;_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]^=_dcda .Data [_ageg ];_aeec ++;_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],_dcda .Data [_ageg ]^_dcabb .Data [_aeec ],_abacd );
};};case PixNotSrcOrDst :for _ecgb =0;_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]|=^(_dcda .Data [_ageg ]);_aeec ++;_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],^(_dcda .Data [_ageg ])|_dcabb .Data [_aeec ],_abacd );
};};case PixNotSrcAndDst :for _ecgb =0;_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]&=^(_dcda .Data [_ageg ]);_aeec ++;_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],^(_dcda .Data [_ageg ])&_dcabb .Data [_aeec ],_abacd );
};};case PixSrcOrNotDst :for _ecgb =0;_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]=_dcda .Data [_ageg ]|^(_dcabb .Data [_aeec ]);_aeec ++;
_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],_dcda .Data [_ageg ]|^(_dcabb .Data [_aeec ]),_abacd );};};case PixSrcAndNotDst :for _ecgb =0;_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;
for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]=_dcda .Data [_ageg ]&^(_dcabb .Data [_aeec ]);_aeec ++;_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],_dcda .Data [_ageg ]&^(_dcabb .Data [_aeec ]),_abacd );};};case PixNotPixSrcOrDst :for _ecgb =0;
_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]=^(_dcda .Data [_ageg ]|_dcabb .Data [_aeec ]);_aeec ++;_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],^(_dcda .Data [_ageg ]|_dcabb .Data [_aeec ]),_abacd );
};};case PixNotPixSrcAndDst :for _ecgb =0;_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]=^(_dcda .Data [_ageg ]&_dcabb .Data [_aeec ]);_aeec ++;
_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],^(_dcda .Data [_ageg ]&_dcabb .Data [_aeec ]),_abacd );};};case PixNotPixSrcXorDst :for _ecgb =0;_ecgb < _gefa ;_ecgb ++{_ageg =_ccadc +_ecgb *_dcda .RowStride ;_aeec =_geea +_ecgb *_dcabb .RowStride ;
for _cdcg =0;_cdcg < _egfg ;_cdcg ++{_dcabb .Data [_aeec ]=^(_dcda .Data [_ageg ]^_dcabb .Data [_aeec ]);_aeec ++;_ageg ++;};if _efdf > 0{_dcabb .Data [_aeec ]=_agcb (_dcabb .Data [_aeec ],^(_dcda .Data [_ageg ]^_dcabb .Data [_aeec ]),_abacd );};};default:_c .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_ebd );
return _d .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_afeg *ClassedPoints )YAtIndex (i int )float32 {return (*_afeg .Points )[_afeg .IntSlice [i ]].Y };func (_acff *Bitmap )setFourBytes (_agcd int ,_bbdgb uint32 )error {if _agcd +3> len (_acff .Data )-1{return _d .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_agcd );
};_acff .Data [_agcd ]=byte ((_bbdgb &0xff000000)>>24);_acff .Data [_agcd +1]=byte ((_bbdgb &0xff0000)>>16);_acff .Data [_agcd +2]=byte ((_bbdgb &0xff00)>>8);_acff .Data [_agcd +3]=byte (_bbdgb &0xff);return nil ;};func _eafg (_fcgf *Bitmap ,_gfcf ,_ffed int ,_ccce ,_cffb int ,_ggeb RasterOperator ,_dbca *Bitmap ,_eeb ,_fadb int )error {var _eebe ,_afaf ,_cdfde ,_fddf int ;
if _gfcf < 0{_eeb -=_gfcf ;_ccce +=_gfcf ;_gfcf =0;};if _eeb < 0{_gfcf -=_eeb ;_ccce +=_eeb ;_eeb =0;};_eebe =_gfcf +_ccce -_fcgf .Width ;if _eebe > 0{_ccce -=_eebe ;};_afaf =_eeb +_ccce -_dbca .Width ;if _afaf > 0{_ccce -=_afaf ;};if _ffed < 0{_fadb -=_ffed ;
_cffb +=_ffed ;_ffed =0;};if _fadb < 0{_ffed -=_fadb ;_cffb +=_fadb ;_fadb =0;};_cdfde =_ffed +_cffb -_fcgf .Height ;if _cdfde > 0{_cffb -=_cdfde ;};_fddf =_fadb +_cffb -_dbca .Height ;if _fddf > 0{_cffb -=_fddf ;};if _ccce <=0||_cffb <=0{return nil ;};
var _cdce error ;switch {case _gfcf &7==0&&_eeb &7==0:_cdce =_ddga (_fcgf ,_gfcf ,_ffed ,_ccce ,_cffb ,_ggeb ,_dbca ,_eeb ,_fadb );case _gfcf &7==_eeb &7:_cdce =_adgf (_fcgf ,_gfcf ,_ffed ,_ccce ,_cffb ,_ggeb ,_dbca ,_eeb ,_fadb );default:_cdce =_gafc (_fcgf ,_gfcf ,_ffed ,_ccce ,_cffb ,_ggeb ,_dbca ,_eeb ,_fadb );
};if _cdce !=nil {return _d .Wrap (_cdce ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_gacgd *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _agbc ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_gacgd .Values )==0{return nil ,_d .Error (_agbc ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_adbe :=&BitmapsArray {};_gacgd .SortByHeight ();_cefbg :=-1;_bfcgbd :=-1;for _gfbg :=0;_gfbg < len (_gacgd .Values );
_gfbg ++{_efbf :=_gacgd .Values [_gfbg ].Height ;if _efbf > _cefbg {_cefbg =_efbf ;_bfcgbd ++;_adbe .Values =append (_adbe .Values ,&Bitmaps {});};_adbe .Values [_bfcgbd ].AddBitmap (_gacgd .Values [_gfbg ]);};return _adbe ,nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _bddgg (d ,s ,sel )};
func (_cca *Bitmap )countPixels ()int {var (_gegg int ;_fdgc uint8 ;_dfbg byte ;_ffe int ;);_beagb :=_cca .RowStride ;_eabg :=uint (_cca .Width &0x07);if _eabg !=0{_fdgc =uint8 ((0xff<<(8-_eabg ))&0xff);_beagb --;};for _dafg :=0;_dafg < _cca .Height ;_dafg ++{for _ffe =0;
_ffe < _beagb ;_ffe ++{_dfbg =_cca .Data [_dafg *_cca .RowStride +_ffe ];_gegg +=int (_daca [_dfbg ]);};if _eabg !=0{_gegg +=int (_daca [_cca .Data [_dafg *_cca .RowStride +_ffe ]&_fdgc ]);};};return _gegg ;};func (_bcabd *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _aabfa ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";
if _bcabd ==nil {return nil ,_d .Error (_aabfa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_bcabd .Values )-1{return nil ,_d .Errorf (_aabfa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _bcabd .Values [i ],nil ;};func (_dcfb *Bitmap )CreateTemplate ()*Bitmap {return _dcfb .createTemplate ()};type ClassedPoints struct{*Points ;_ed .IntSlice ;_ffae func (_defgb ,_dced int )bool ;};func _dce (_aaa *Bitmap ,_aab int )(*Bitmap ,error ){const _ddd ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _aaa ==nil {return nil ,_d .Error (_ddd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _aab ==1{return _eaee (nil ,_aaa );};if _aab !=2&&_aab !=4&&_aab !=8{return nil ,_d .Error (_ddd ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_dcc :=_aab *_aaa .Width ;_cbg :=_aab *_aaa .Height ;_dba :=New (_dcc ,_cbg );var _gge error ;switch _aab {case 2:_gge =_ga (_dba ,_aaa );case 4:_gge =_df (_dba ,_aaa );case 8:_gge =_dbd (_dba ,_aaa );};if _gge !=nil {return nil ,_d .Wrap (_gge ,_ddd ,"");
};return _dba ,nil ;};type Points []Point ;func (_gdfg *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_gdfg .Width ,Height :_gdfg .Height ,RowStride :_gdfg .RowStride ,Color :_gdfg .Color ,Text :_gdfg .Text ,BitmapNumber :_gdfg .BitmapNumber ,Special :_gdfg .Special ,Data :make ([]byte ,len (_gdfg .Data ))};
};type Component int ;func (_fedf *Bitmap )addBorderGeneral (_gdf ,_feg ,_cgde ,_bac int ,_ccd int )(*Bitmap ,error ){const _geae ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _gdf < 0||_feg < 0||_cgde < 0||_bac < 0{return nil ,_d .Error (_geae ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_dgfa ,_bffg :=_fedf .Width ,_fedf .Height ;_ega :=_dgfa +_gdf +_feg ;_adgc :=_bffg +_cgde +_bac ;_ffgb :=New (_ega ,_adgc );_ffgb .Color =_fedf .Color ;_aaaaf :=PixClr ;if _ccd > 0{_aaaaf =PixSet ;};_debb :=_ffgb .RasterOperation (0,0,_gdf ,_adgc ,_aaaaf ,nil ,0,0);
if _debb !=nil {return nil ,_d .Wrap (_debb ,_geae ,"\u006c\u0065\u0066\u0074");};_debb =_ffgb .RasterOperation (_ega -_feg ,0,_feg ,_adgc ,_aaaaf ,nil ,0,0);if _debb !=nil {return nil ,_d .Wrap (_debb ,_geae ,"\u0072\u0069\u0067h\u0074");};_debb =_ffgb .RasterOperation (0,0,_ega ,_cgde ,_aaaaf ,nil ,0,0);
if _debb !=nil {return nil ,_d .Wrap (_debb ,_geae ,"\u0074\u006f\u0070");};_debb =_ffgb .RasterOperation (0,_adgc -_bac ,_ega ,_bac ,_aaaaf ,nil ,0,0);if _debb !=nil {return nil ,_d .Wrap (_debb ,_geae ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_debb =_ffgb .RasterOperation (_gdf ,_cgde ,_dgfa ,_bffg ,PixSrc ,_fedf ,0,0);
if _debb !=nil {return nil ,_d .Wrap (_debb ,_geae ,"\u0063\u006f\u0070\u0079");};return _ffgb ,nil ;};func (_dgffb *ClassedPoints )validateIntSlice ()error {const _feafa ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_ccgbg :=range _dgffb .IntSlice {if _ccgbg >=(_dgffb .Points .Size ()){return _d .Errorf (_feafa ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_ccgbg ,_dgffb .Points .Size ());
};};return nil ;};func _gfe (_afe ,_baaf *Bitmap ,_ecg int ,_dfdc []byte ,_gef int )(_gbaf error ){const _dddb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_ggcd ,_ef ,_cgd ,_cad ,_cce ,_ecbec ,_accc ,_fbc int ;
_eca ,_gaa uint32 ;_bfb ,_ebg byte ;_ab uint16 ;);_aafd :=make ([]byte ,4);_cfc :=make ([]byte ,4);for _cgd =0;_cgd < _afe .Height -1;_cgd ,_cad =_cgd +2,_cad +1{_ggcd =_cgd *_afe .RowStride ;_ef =_cad *_baaf .RowStride ;for _cce ,_ecbec =0,0;_cce < _gef ;
_cce ,_ecbec =_cce +4,_ecbec +1{for _accc =0;_accc < 4;_accc ++{_fbc =_ggcd +_cce +_accc ;if _fbc <=len (_afe .Data )-1&&_fbc < _ggcd +_afe .RowStride {_aafd [_accc ]=_afe .Data [_fbc ];}else {_aafd [_accc ]=0x00;};_fbc =_ggcd +_afe .RowStride +_cce +_accc ;
if _fbc <=len (_afe .Data )-1&&_fbc < _ggcd +(2*_afe .RowStride ){_cfc [_accc ]=_afe .Data [_fbc ];}else {_cfc [_accc ]=0x00;};};_eca =_fc .BigEndian .Uint32 (_aafd );_gaa =_fc .BigEndian .Uint32 (_cfc );_gaa &=_eca ;_gaa &=_gaa <<1;_gaa &=0xaaaaaaaa;_eca =_gaa |(_gaa <<7);
_bfb =byte (_eca >>24);_ebg =byte ((_eca >>8)&0xff);_fbc =_ef +_ecbec ;if _fbc +1==len (_baaf .Data )-1||_fbc +1>=_ef +_baaf .RowStride {_baaf .Data [_fbc ]=_dfdc [_bfb ];if _gbaf =_baaf .SetByte (_fbc ,_dfdc [_bfb ]);_gbaf !=nil {return _d .Wrapf (_gbaf ,_dddb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fbc );
};}else {_ab =(uint16 (_dfdc [_bfb ])<<8)|uint16 (_dfdc [_ebg ]);if _gbaf =_baaf .setTwoBytes (_fbc ,_ab );_gbaf !=nil {return _d .Wrapf (_gbaf ,_dddb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fbc );
};_ecbec ++;};};};return nil ;};func (_fgffd *ClassedPoints )SortByX (){_fgffd ._ffae =_fgffd .xSortFunction ();_b .Sort (_fgffd )};func (_beea *Bitmap )removeBorderGeneral (_cgge ,_bbb ,_abe ,_cbff int )(*Bitmap ,error ){const _bga ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _cgge < 0||_bbb < 0||_abe < 0||_cbff < 0{return nil ,_d .Error (_bga ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_gedc ,_ebf :=_beea .Width ,_beea .Height ;
_bag :=_gedc -_cgge -_bbb ;_bddg :=_ebf -_abe -_cbff ;if _bag <=0{return nil ,_d .Errorf (_bga ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_bag );};if _bddg <=0{return nil ,_d .Errorf (_bga ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_bddg );
};_abcc :=New (_bag ,_bddg );_abcc .Color =_beea .Color ;_fcec :=_abcc .RasterOperation (0,0,_bag ,_bddg ,PixSrc ,_beea ,_cgge ,_abe );if _fcec !=nil {return nil ,_d .Wrap (_fcec ,_bga ,"");};return _abcc ,nil ;};func _aebad (_fdffa ,_dcgd ,_eaaf *Bitmap ,_bbcd int )(*Bitmap ,error ){const _dfab ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _dcgd ==nil {return nil ,_d .Error (_dfab ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _eaaf ==nil {return nil ,_d .Error (_dfab ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _bbcd !=4&&_bbcd !=8{return nil ,_d .Error (_dfab ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _egce error ;_fdffa ,_egce =_eaee (_fdffa ,_dcgd );
if _egce !=nil {return nil ,_d .Wrap (_egce ,_dfab ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_cge :=_dcgd .createTemplate ();_eaaf .setPadBits (0);for _adab :=0;_adab < _egfbc ;_adab ++{_cge ,_egce =_eaee (_cge ,_fdffa );
if _egce !=nil {return nil ,_d .Wrapf (_egce ,_dfab ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_adab );};if _egce =_dcbge (_fdffa ,_eaaf ,_bbcd );_egce !=nil {return nil ,_d .Wrapf (_egce ,_dfab ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_adab );
};if _cge .Equals (_fdffa ){break ;};};return _fdffa ,nil ;};func _cbf (_dgf ,_dabd int )*Bitmap {return &Bitmap {Width :_dgf ,Height :_dabd ,RowStride :(_dgf +7)>>3};};func _efeg (_agff ,_adcd *Bitmap ,_ffeb ,_dgbd ,_bbdc ,_dfcc ,_aefc int ,_gdaa CombinationOperator )error {var _dec int ;
_efd :=func (){_dec ++;_bbdc +=_adcd .RowStride ;_dfcc +=_agff .RowStride ;_aefc +=_agff .RowStride };for _dec =_ffeb ;_dec < _dgbd ;_efd (){_fefd :=_bbdc ;for _beeb :=_dfcc ;_beeb <=_aefc ;_beeb ++{_geef ,_cadc :=_adcd .GetByte (_fefd );if _cadc !=nil {return _cadc ;
};_bcad ,_cadc :=_agff .GetByte (_beeb );if _cadc !=nil {return _cadc ;};if _cadc =_adcd .SetByte (_fefd ,_fdd (_geef ,_bcad ,_gdaa ));_cadc !=nil {return _cadc ;};_fefd ++;};};return nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _bbdb (d ,s ,hSize ,vSize )};
func _deaff (_debbg *_ed .Stack ,_acbfa ,_bfdf ,_dfcgf ,_bdbb ,_edca int ,_bgcac *_be .Rectangle )(_cfae error ){const _geeaa ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _debbg ==nil {return _d .Error (_geeaa ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _bgcac ==nil {return _d .Error (_geeaa ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_bgcac .Min .X =_ed .Min (_bgcac .Min .X ,_acbfa );_bgcac .Max .X =_ed .Max (_bgcac .Max .X ,_bfdf );_bgcac .Min .Y =_ed .Min (_bgcac .Min .Y ,_dfcgf );_bgcac .Max .Y =_ed .Max (_bgcac .Max .Y ,_dfcgf );if !(_dfcgf +_bdbb >=0&&_dfcgf +_bdbb <=_edca ){return nil ;
};if _debbg .Aux ==nil {return _d .Error (_geeaa ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _bbedb *fillSegment ;_cgcb ,_cfag :=_debbg .Aux .Pop ();if _cfag {if _bbedb ,_cfag =_cgcb .(*fillSegment );
!_cfag {return _d .Error (_geeaa ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_bbedb =&fillSegment {};
};_bbedb ._aacbf =_acbfa ;_bbedb ._caaad =_bfdf ;_bbedb ._cdae =_dfcgf ;_bbedb ._adeg =_bdbb ;_debbg .Push (_bbedb );return nil ;};func _bdbd (_adebd *Bitmap ,_eggg ,_feadb ,_gced ,_geafc int ,_efec RasterOperator ,_dfdg *Bitmap ,_fefbf ,_dbbbd int )error {const _cfbc ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _adebd ==nil {return _d .Error (_cfbc ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _efec ==PixDst {return nil ;};switch _efec {case PixClr ,PixSet ,PixNotDst :_dgba (_adebd ,_eggg ,_feadb ,_gced ,_geafc ,_efec );
return nil ;};if _dfdg ==nil {_c .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _d .Error (_cfbc ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ddcaf :=_eafg (_adebd ,_eggg ,_feadb ,_gced ,_geafc ,_efec ,_dfdg ,_fefbf ,_dbbbd );_ddcaf !=nil {return _d .Wrap (_ddcaf ,_cfbc ,"");
};return nil ;};func (_afdea *byWidth )Less (i ,j int )bool {return _afdea .Values [i ].Width < _afdea .Values [j ].Width };func _cec (_ggeef ,_bgace *Bitmap ,_ecfe *Selection )(*Bitmap ,error ){const _fbff ="\u0065\u0072\u006fd\u0065";var (_ceca error ;
_cedf *Bitmap ;);_ggeef ,_ceca =_fdfd (_ggeef ,_bgace ,_ecfe ,&_cedf );if _ceca !=nil {return nil ,_d .Wrap (_ceca ,_fbff ,"");};if _ceca =_ggeef .setAll ();_ceca !=nil {return nil ,_d .Wrap (_ceca ,_fbff ,"");};var _ddcae SelectionValue ;for _abec :=0;
_abec < _ecfe .Height ;_abec ++{for _dcccf :=0;_dcccf < _ecfe .Width ;_dcccf ++{_ddcae =_ecfe .Data [_abec ][_dcccf ];if _ddcae ==SelHit {_ceca =_bdbd (_ggeef ,_ecfe .Cx -_dcccf ,_ecfe .Cy -_abec ,_bgace .Width ,_bgace .Height ,PixSrcAndDst ,_cedf ,0,0);
if _ceca !=nil {return nil ,_d .Wrap (_ceca ,_fbff ,"");};};};};if MorphBC ==SymmetricMorphBC {return _ggeef ,nil ;};_gcbd ,_acab ,_baeea ,_beecb :=_ecfe .findMaxTranslations ();if _gcbd > 0{if _ceca =_ggeef .RasterOperation (0,0,_gcbd ,_bgace .Height ,PixClr ,nil ,0,0);
_ceca !=nil {return nil ,_d .Wrap (_ceca ,_fbff ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _baeea > 0{if _ceca =_ggeef .RasterOperation (_bgace .Width -_baeea ,0,_baeea ,_bgace .Height ,PixClr ,nil ,0,0);_ceca !=nil {return nil ,_d .Wrap (_ceca ,_fbff ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _acab > 0{if _ceca =_ggeef .RasterOperation (0,0,_bgace .Width ,_acab ,PixClr ,nil ,0,0);_ceca !=nil {return nil ,_d .Wrap (_ceca ,_fbff ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _beecb > 0{if _ceca =_ggeef .RasterOperation (0,_bgace .Height -_beecb ,_bgace .Width ,_beecb ,PixClr ,nil ,0,0);
_ceca !=nil {return nil ,_d .Wrap (_ceca ,_fbff ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _ggeef ,nil ;};func TstPSymbol (t *_eg .T )*Bitmap {t .Helper ();_fage :=New (5,8);_e .NoError (t ,_fage .SetPixel (0,0,1));_e .NoError (t ,_fage .SetPixel (1,0,1));
_e .NoError (t ,_fage .SetPixel (2,0,1));_e .NoError (t ,_fage .SetPixel (3,0,1));_e .NoError (t ,_fage .SetPixel (4,1,1));_e .NoError (t ,_fage .SetPixel (0,1,1));_e .NoError (t ,_fage .SetPixel (4,2,1));_e .NoError (t ,_fage .SetPixel (0,2,1));_e .NoError (t ,_fage .SetPixel (4,3,1));
_e .NoError (t ,_fage .SetPixel (0,3,1));_e .NoError (t ,_fage .SetPixel (0,4,1));_e .NoError (t ,_fage .SetPixel (1,4,1));_e .NoError (t ,_fage .SetPixel (2,4,1));_e .NoError (t ,_fage .SetPixel (3,4,1));_e .NoError (t ,_fage .SetPixel (0,5,1));_e .NoError (t ,_fage .SetPixel (0,6,1));
_e .NoError (t ,_fage .SetPixel (0,7,1));return _fage ;};func _bgb ()(_ggb [256]uint64 ){for _adec :=0;_adec < 256;_adec ++{if _adec &0x01!=0{_ggb [_adec ]|=0xff;};if _adec &0x02!=0{_ggb [_adec ]|=0xff00;};if _adec &0x04!=0{_ggb [_adec ]|=0xff0000;};if _adec &0x08!=0{_ggb [_adec ]|=0xff000000;
};if _adec &0x10!=0{_ggb [_adec ]|=0xff00000000;};if _adec &0x20!=0{_ggb [_adec ]|=0xff0000000000;};if _adec &0x40!=0{_ggb [_adec ]|=0xff000000000000;};if _adec &0x80!=0{_ggb [_adec ]|=0xff00000000000000;};};return _ggb ;};func (_dcab Points )GetIntY (i int )(int ,error ){if i >=len (_dcab ){return 0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dcab [i ].Y ),nil ;};type byHeight Bitmaps ;func TstWriteSymbols (t *_eg .T ,bms *Bitmaps ,src *Bitmap ){for _bcbfe :=0;_bcbfe < bms .Size ();_bcbfe ++{_dbdee :=bms .Values [_bcbfe ];_cfdec :=bms .Boxes [_bcbfe ];_cbfbg :=src .RasterOperation (_cfdec .Min .X ,_cfdec .Min .Y ,_dbdee .Width ,_dbdee .Height ,PixSrc ,_dbdee ,0,0);
_e .NoError (t ,_cbfbg );};};func (_dffc *Bitmap )GetBitOffset (x int )int {return x &0x07};func TstFrameBitmapData ()[]byte {return _gdc .Data };func (_eceac *Points )Add (pt *Points )error {const _fgcd ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _eceac ==nil {return _d .Error (_fgcd ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _d .Error (_fgcd ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_eceac =append (*_eceac ,*pt ...);return nil ;};func (_bcbc *ClassedPoints )xSortFunction ()func (_bdda int ,_gcbc int )bool {return func (_cfccd ,_edgb int )bool {return _bcbc .XAtIndex (_cfccd )< _bcbc .XAtIndex (_edgb )};};func (_fefbg Points )GetIntX (i int )(int ,error ){if i >=len (_fefbg ){return 0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_fefbg [i ].X ),nil ;};func (_faa *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_gcdd bool ,_gfdg error ){const _edd ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_beac ();};_fba :=_faa .Width >>3;_ebgb :=_faa .Width &7;_dfba :=byte (0xff<<uint (8-_ebgb ));var (_adg ,_fdcc ,_aeb ,_dfgc int ;_gca byte ;);for _adg =0;_adg < _faa .Height ;_adg ++{_aeb =_faa .RowStride *_adg ;for _fdcc =0;_fdcc < _fba ;
_fdcc ++{_gca ,_gfdg =_faa .GetByte (_aeb +_fdcc );if _gfdg !=nil {return false ,_d .Wrap (_gfdg ,_edd ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_dfgc +=tab8 [_gca ];};if _ebgb !=0{_gca ,_gfdg =_faa .GetByte (_aeb +_fdcc );if _gfdg !=nil {return false ,_d .Wrap (_gfdg ,_edd ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_gca &=_dfba ;_dfgc +=tab8 [_gca ];};if _dfgc > thresh {return true ,nil ;};};return _gcdd ,nil ;};func (_bbeg *Bitmap )inverseData (){if _dagd :=_bbeg .RasterOperation (0,0,_bbeg .Width ,_bbeg .Height ,PixNotDst ,nil ,0,0);_dagd !=nil {_c .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_dagd );
};if _bbeg .Color ==Chocolate {_bbeg .Color =Vanilla ;}else {_bbeg .Color =Chocolate ;};};func (_acbd *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_agca *Bitmaps ,_ddbf error ){const _ceae ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _acbd ==nil {return nil ,_d .Error (_ceae ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_ceae ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_d .Errorf (_ceae ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_fbfb ,_ddbf :=_acbd .makeSizeIndicator (width ,height ,tp ,relation );if _ddbf !=nil {return nil ,_d .Wrap (_ddbf ,_ceae ,"");};_agca ,_ddbf =_acbd .selectByIndicator (_fbfb );if _ddbf !=nil {return nil ,_d .Wrap (_ddbf ,_ceae ,"");};return _agca ,nil ;
};func (_dddbc *ClassedPoints )Swap (i ,j int ){_dddbc .IntSlice [i ],_dddbc .IntSlice [j ]=_dddbc .IntSlice [j ],_dddbc .IntSlice [i ];};func (_gff *Bitmap )Copy ()*Bitmap {_gaf :=make ([]byte ,len (_gff .Data ));copy (_gaf ,_gff .Data );return &Bitmap {Width :_gff .Width ,Height :_gff .Height ,RowStride :_gff .RowStride ,Data :_gaf ,Color :_gff .Color ,Text :_gff .Text ,BitmapNumber :_gff .BitmapNumber ,Special :_gff .Special };
};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func TstImageBitmap ()*Bitmap {return _cafbc .Copy ()};func TstWSymbol (t *_eg .T ,scale ...int )*Bitmap {_dacd ,_dbgg :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_e .NoError (t ,_dbgg );return TstGetScaledSymbol (t ,_dacd ,scale ...);};func (_efcdd *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _fgda ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_cddd ,_facf :=_efcdd .selectByIndexes (idx );if _facf !=nil {return nil ,_d .Wrap (_facf ,_fgda ,"");};return _cddd ,nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_be .Rectangle ;};var (_dgfd =_geaf ();_fafd =_fbd ();_cffab =_bgb (););func _adgf (_aacb *Bitmap ,_feae ,_bgab ,_egee ,_gaad int ,_fdgb RasterOperator ,_fccd *Bitmap ,_acbbc ,_ggcee int )error {var (_cebd bool ;
_bbgaf bool ;_dgcd int ;_deeb int ;_bcd int ;_gefe bool ;_fedd byte ;_gdeg int ;_gceb int ;_gcgfe int ;_fadg ,_cfa int ;);_ebfcd :=8-(_feae &7);_agded :=_geda [_ebfcd ];_afeb :=_aacb .RowStride *_bgab +(_feae >>3);_gdgcg :=_fccd .RowStride *_ggcee +(_acbbc >>3);
if _egee < _ebfcd {_cebd =true ;_agded &=_bdef [8-_ebfcd +_egee ];};if !_cebd {_dgcd =(_egee -_ebfcd )>>3;if _dgcd > 0{_bbgaf =true ;_deeb =_afeb +1;_bcd =_gdgcg +1;};};_gdeg =(_feae +_egee )&7;if !(_cebd ||_gdeg ==0){_gefe =true ;_fedd =_bdef [_gdeg ];
_gceb =_afeb +1+_dgcd ;_gcgfe =_gdgcg +1+_dgcd ;};switch _fdgb {case PixSrc :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],_fccd .Data [_gdgcg ],_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;};if _bbgaf {for _fadg =0;
_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]=_fccd .Data [_bcd +_cfa ];};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],_fccd .Data [_gcgfe ],_fedd );
_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};case PixNotSrc :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],^_fccd .Data [_gdgcg ],_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;};if _bbgaf {for _fadg =0;
_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]=^_fccd .Data [_bcd +_cfa ];};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],^_fccd .Data [_gcgfe ],_fedd );
_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};case PixSrcOrDst :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],_fccd .Data [_gdgcg ]|_aacb .Data [_afeb ],_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;
};if _bbgaf {for _fadg =0;_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]|=_fccd .Data [_bcd +_cfa ];};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],_fccd .Data [_gcgfe ]|_aacb .Data [_gceb ],_fedd );
_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};case PixSrcAndDst :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],_fccd .Data [_gdgcg ]&_aacb .Data [_afeb ],_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;
};if _bbgaf {for _fadg =0;_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]&=_fccd .Data [_bcd +_cfa ];};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],_fccd .Data [_gcgfe ]&_aacb .Data [_gceb ],_fedd );
_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};case PixSrcXorDst :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],_fccd .Data [_gdgcg ]^_aacb .Data [_afeb ],_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;
};if _bbgaf {for _fadg =0;_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]^=_fccd .Data [_bcd +_cfa ];};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],_fccd .Data [_gcgfe ]^_aacb .Data [_gceb ],_fedd );
_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};case PixNotSrcOrDst :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],^(_fccd .Data [_gdgcg ])|_aacb .Data [_afeb ],_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;
};if _bbgaf {for _fadg =0;_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]|=^(_fccd .Data [_bcd +_cfa ]);};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],^(_fccd .Data [_gcgfe ])|_aacb .Data [_gceb ],_fedd );
_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};case PixNotSrcAndDst :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],^(_fccd .Data [_gdgcg ])&_aacb .Data [_afeb ],_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;
};if _bbgaf {for _fadg =0;_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]&=^_fccd .Data [_bcd +_cfa ];};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],^(_fccd .Data [_gcgfe ])&_aacb .Data [_gceb ],_fedd );
_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};case PixSrcOrNotDst :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],_fccd .Data [_gdgcg ]|^(_aacb .Data [_afeb ]),_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;
};if _bbgaf {for _fadg =0;_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]=_fccd .Data [_bcd +_cfa ]|^(_aacb .Data [_deeb +_cfa ]);};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;
_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],_fccd .Data [_gcgfe ]|^(_aacb .Data [_gceb ]),_fedd );_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};case PixSrcAndNotDst :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],_fccd .Data [_gdgcg ]&^(_aacb .Data [_afeb ]),_agded );
_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;};if _bbgaf {for _fadg =0;_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]=_fccd .Data [_bcd +_cfa ]&^(_aacb .Data [_deeb +_cfa ]);};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;
};};if _gefe {for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],_fccd .Data [_gcgfe ]&^(_aacb .Data [_gceb ]),_fedd );_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};case PixNotPixSrcOrDst :for _fadg =0;_fadg < _gaad ;
_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],^(_fccd .Data [_gdgcg ]|_aacb .Data [_afeb ]),_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;};if _bbgaf {for _fadg =0;_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]=^(_fccd .Data [_bcd +_cfa ]|_aacb .Data [_deeb +_cfa ]);
};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],^(_fccd .Data [_gcgfe ]|_aacb .Data [_gceb ]),_fedd );_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;
};};case PixNotPixSrcAndDst :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],^(_fccd .Data [_gdgcg ]&_aacb .Data [_afeb ]),_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;};if _bbgaf {for _fadg =0;_fadg < _gaad ;
_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]=^(_fccd .Data [_bcd +_cfa ]&_aacb .Data [_deeb +_cfa ]);};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],^(_fccd .Data [_gcgfe ]&_aacb .Data [_gceb ]),_fedd );
_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};case PixNotPixSrcXorDst :for _fadg =0;_fadg < _gaad ;_fadg ++{_aacb .Data [_afeb ]=_agcb (_aacb .Data [_afeb ],^(_fccd .Data [_gdgcg ]^_aacb .Data [_afeb ]),_agded );_afeb +=_aacb .RowStride ;_gdgcg +=_fccd .RowStride ;
};if _bbgaf {for _fadg =0;_fadg < _gaad ;_fadg ++{for _cfa =0;_cfa < _dgcd ;_cfa ++{_aacb .Data [_deeb +_cfa ]=^(_fccd .Data [_bcd +_cfa ]^_aacb .Data [_deeb +_cfa ]);};_deeb +=_aacb .RowStride ;_bcd +=_fccd .RowStride ;};};if _gefe {for _fadg =0;_fadg < _gaad ;
_fadg ++{_aacb .Data [_gceb ]=_agcb (_aacb .Data [_gceb ],^(_fccd .Data [_gcgfe ]^_aacb .Data [_gceb ]),_fedd );_gceb +=_aacb .RowStride ;_gcgfe +=_fccd .RowStride ;};};default:_c .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_fdgb );
return _d .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _dgba (_acdd *Bitmap ,_dffge ,_cbbd ,_cdcgd ,_ccac int ,_abgf RasterOperator ){if _dffge < 0{_cdcgd +=_dffge ;_dffge =0;};_gffe :=_dffge +_cdcgd -_acdd .Width ;if _gffe > 0{_cdcgd -=_gffe ;};if _cbbd < 0{_ccac +=_cbbd ;_cbbd =0;};_eggfe :=_cbbd +_ccac -_acdd .Height ;
if _eggfe > 0{_ccac -=_eggfe ;};if _cdcgd <=0||_ccac <=0{return ;};if (_dffge &7)==0{_dgfdg (_acdd ,_dffge ,_cbbd ,_cdcgd ,_ccac ,_abgf );}else {_fdga (_acdd ,_dffge ,_cbbd ,_cdcgd ,_ccac ,_abgf );};};func (_eae *Bitmap )Zero ()bool {_bfde :=_eae .Width /8;
_caga :=_eae .Width &7;var _gee byte ;if _caga !=0{_gee =byte (0xff<<uint (8-_caga ));};var _cgg ,_bfeb ,_agcc int ;for _bfeb =0;_bfeb < _eae .Height ;_bfeb ++{_cgg =_eae .RowStride *_bfeb ;for _agcc =0;_agcc < _bfde ;_agcc ,_cgg =_agcc +1,_cgg +1{if _eae .Data [_cgg ]!=0{return false ;
};};if _caga > 0{if _eae .Data [_cgg ]&_gee !=0{return false ;};};};return true ;};func (_gbbed *byWidth )Len ()int {return len (_gbbed .Values )};func NewClassedPoints (points *Points ,classes _ed .IntSlice )(*ClassedPoints ,error ){const _agdee ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_d .Error (_agdee ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_d .Error (_agdee ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_ecaf :=&ClassedPoints {Points :points ,IntSlice :classes };if _cfe :=_ecaf .validateIntSlice ();_cfe !=nil {return nil ,_d .Wrap (_cfe ,_agdee ,"");};return _ecaf ,nil ;};func TstImageBitmapData ()[]byte {return _cafbc .Data };func (_caae *BitmapsArray )AddBitmaps (bm *Bitmaps ){_caae .Values =append (_caae .Values ,bm )};
func MakePixelCentroidTab8 ()[]int {return _cdac ()};func (_fbcc *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _dcgf ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_fbcc .IntSlice .Size (){return 0,_d .Errorf (_dcgf ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fbcc .XAtIndex (i )),nil ;};var _daca [256]uint8 ;func (_gbae *Bitmap )clipRectangle (_eab ,_fcea *_be .Rectangle )(_ffc *Bitmap ,_fcff error ){const _bcac ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _eab ==nil {return nil ,_d .Error (_bcac ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_aecc ,_dffg :=_gbae .Width ,_gbae .Height ;_agf ,_fcff :=ClipBoxToRectangle (_eab ,_aecc ,_dffg );if _fcff !=nil {_c .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_fcff );
return nil ,nil ;};_dbb ,_fac :=_agf .Min .X ,_agf .Min .Y ;_dea ,_fef :=_agf .Max .X -_agf .Min .X ,_agf .Max .Y -_agf .Min .Y ;_ffc =New (_dea ,_fef );_ffc .Text =_gbae .Text ;if _fcff =_ffc .RasterOperation (0,0,_dea ,_fef ,PixSrc ,_gbae ,_dbb ,_fac );
_fcff !=nil {return nil ,_d .Wrap (_fcff ,_bcac ,"");};if _fcea !=nil {*_fcea =*_agf ;};return _ffc ,nil ;};func (_bfcg *Bitmap )GetUnpaddedData ()([]byte ,error ){_ggea :=uint (_bfcg .Width &0x07);if _ggea ==0{return _bfcg .Data ,nil ;};_bbd :=_bfcg .Width *_bfcg .Height ;
if _bbd %8!=0{_bbd >>=3;_bbd ++;}else {_bbd >>=3;};_aaec :=make ([]byte ,_bbd );_dbac :=_f .NewWriterMSB (_aaec );const _aded ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _cdb :=0;_cdb < _bfcg .Height ;_cdb ++{for _ead :=0;
_ead < _bfcg .RowStride ;_ead ++{_dge :=_bfcg .Data [_cdb *_bfcg .RowStride +_ead ];if _ead !=_bfcg .RowStride -1{_gdbe :=_dbac .WriteByte (_dge );if _gdbe !=nil {return nil ,_d .Wrap (_gdbe ,_aded ,"");};continue ;};for _begg :=uint (0);_begg < _ggea ;
_begg ++{_aff :=_dbac .WriteBit (int (_dge >>(7-_begg )&0x01));if _aff !=nil {return nil ,_d .Wrap (_aff ,_aded ,"");};};};};return _aaec ,nil ;};func (_fdf *Bitmap )SetByte (index int ,v byte )error {if index > len (_fdf .Data )-1||index < 0{return _d .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_fdf .Data [index ]=v ;return nil ;};type RasterOperator int ;func (_fdgf *Bitmap )SizesEqual (s *Bitmap )bool {if _fdgf ==s {return true ;};if _fdgf .Width !=s .Width ||_fdgf .Height !=s .Height {return false ;};return true ;};func (_egdfbe *byHeight )Swap (i ,j int ){_egdfbe .Values [i ],_egdfbe .Values [j ]=_egdfbe .Values [j ],_egdfbe .Values [i ];
if _egdfbe .Boxes !=nil {_egdfbe .Boxes [i ],_egdfbe .Boxes [j ]=_egdfbe .Boxes [j ],_egdfbe .Boxes [i ];};};var (_bdef =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_geda =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _fcd (_cef ,_deg *Bitmap ,_beec int ,_dca []byte ,_dbg int )(_ced error ){const _cbgg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_fee ,_debd ,_bfe ,_eac ,_fdc ,_ba ,_aae ,_gdb int ;_fgb ,_bfadd uint32 ;_dgd ,_afd byte ;_geg uint16 ;);_cae :=make ([]byte ,4);_ecb :=make ([]byte ,4);for _bfe =0;_bfe < _cef .Height -1;_bfe ,_eac =_bfe +2,_eac +1{_fee =_bfe *_cef .RowStride ;_debd =_eac *_deg .RowStride ;
for _fdc ,_ba =0,0;_fdc < _dbg ;_fdc ,_ba =_fdc +4,_ba +1{for _aae =0;_aae < 4;_aae ++{_gdb =_fee +_fdc +_aae ;if _gdb <=len (_cef .Data )-1&&_gdb < _fee +_cef .RowStride {_cae [_aae ]=_cef .Data [_gdb ];}else {_cae [_aae ]=0x00;};_gdb =_fee +_cef .RowStride +_fdc +_aae ;
if _gdb <=len (_cef .Data )-1&&_gdb < _fee +(2*_cef .RowStride ){_ecb [_aae ]=_cef .Data [_gdb ];}else {_ecb [_aae ]=0x00;};};_fgb =_fc .BigEndian .Uint32 (_cae );_bfadd =_fc .BigEndian .Uint32 (_ecb );_bfadd |=_fgb ;_bfadd |=_bfadd <<1;_bfadd &=0xaaaaaaaa;
_fgb =_bfadd |(_bfadd <<7);_dgd =byte (_fgb >>24);_afd =byte ((_fgb >>8)&0xff);_gdb =_debd +_ba ;if _gdb +1==len (_deg .Data )-1||_gdb +1>=_debd +_deg .RowStride {_deg .Data [_gdb ]=_dca [_dgd ];}else {_geg =(uint16 (_dca [_dgd ])<<8)|uint16 (_dca [_afd ]);
if _ced =_deg .setTwoBytes (_gdb ,_geg );_ced !=nil {return _d .Wrapf (_ced ,_cbgg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gdb );
};_ba ++;};};};return nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);var _bccfc =[5]int {1,2,3,0,4};func _dggf (_ddfb *Bitmap ,_aeea *_ed .Stack ,_bbea ,_gdad int )(_cbgf *_be .Rectangle ,_bagb error ){const _bbcg ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ddfb ==nil {return nil ,_d .Error (_bbcg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _aeea ==nil {return nil ,_d .Error (_bbcg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_aaff ,_feba :=_ddfb .Width ,_ddfb .Height ;_ffdbd :=_aaff -1;_dfff :=_feba -1;if _bbea < 0||_bbea > _ffdbd ||_gdad < 0||_gdad > _dfff ||!_ddfb .GetPixel (_bbea ,_gdad ){return nil ,nil ;};var _ecdd *_be .Rectangle ;_ecdd ,_bagb =Rect (100000,100000,0,0);
if _bagb !=nil {return nil ,_d .Wrap (_bagb ,_bbcg ,"");};if _bagb =_deaff (_aeea ,_bbea ,_bbea ,_gdad ,1,_dfff ,_ecdd );_bagb !=nil {return nil ,_d .Wrap (_bagb ,_bbcg ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bagb =_deaff (_aeea ,_bbea ,_bbea ,_gdad +1,-1,_dfff ,_ecdd );
_bagb !=nil {return nil ,_d .Wrap (_bagb ,_bbcg ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_ecdd .Min .X ,_ecdd .Max .X =_bbea ,_bbea ;_ecdd .Min .Y ,_ecdd .Max .Y =_gdad ,_gdad ;var (_bddag *fillSegment ;
_caeg int ;);for _aeea .Len ()> 0{if _bddag ,_bagb =_dggcf (_aeea );_bagb !=nil {return nil ,_d .Wrap (_bagb ,_bbcg ,"");};_gdad =_bddag ._cdae ;for _bbea =_bddag ._aacbf ;_bbea >=0&&_ddfb .GetPixel (_bbea ,_gdad );_bbea --{if _bagb =_ddfb .SetPixel (_bbea ,_gdad ,0);
_bagb !=nil {return nil ,_d .Wrap (_bagb ,_bbcg ,"");};};if _bbea >=_bddag ._aacbf {for _bbea ++;_bbea <=_bddag ._caaad &&_bbea <=_ffdbd &&!_ddfb .GetPixel (_bbea ,_gdad );_bbea ++{};_caeg =_bbea ;if !(_bbea <=_bddag ._caaad &&_bbea <=_ffdbd ){continue ;
};}else {_caeg =_bbea +1;if _caeg < _bddag ._aacbf -1{if _bagb =_deaff (_aeea ,_caeg ,_bddag ._aacbf -1,_bddag ._cdae ,-_bddag ._adeg ,_dfff ,_ecdd );_bagb !=nil {return nil ,_d .Wrap (_bagb ,_bbcg ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_bbea =_bddag ._aacbf +1;};for {for ;_bbea <=_ffdbd &&_ddfb .GetPixel (_bbea ,_gdad );_bbea ++{if _bagb =_ddfb .SetPixel (_bbea ,_gdad ,0);_bagb !=nil {return nil ,_d .Wrap (_bagb ,_bbcg ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bagb =_deaff (_aeea ,_caeg ,_bbea -1,_bddag ._cdae ,_bddag ._adeg ,_dfff ,_ecdd );
_bagb !=nil {return nil ,_d .Wrap (_bagb ,_bbcg ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bbea > _bddag ._caaad +1{if _bagb =_deaff (_aeea ,_bddag ._caaad +1,_bbea -1,_bddag ._cdae ,-_bddag ._adeg ,_dfff ,_ecdd );_bagb !=nil {return nil ,_d .Wrap (_bagb ,_bbcg ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _bbea ++;_bbea <=_bddag ._caaad &&_bbea <=_ffdbd &&!_ddfb .GetPixel (_bbea ,_gdad );_bbea ++{};_caeg =_bbea ;if !(_bbea <=_bddag ._caaad &&_bbea <=_ffdbd ){break ;};};};_ecdd .Max .X ++;_ecdd .Max .Y ++;return _ecdd ,nil ;};func (_agccec *Bitmaps )String ()string {_abba :=_ge .Builder {};
for _ ,_ccae :=range _agccec .Values {_abba .WriteString (_ccae .String ());_abba .WriteRune ('\n');};return _abba .String ();};func _beac ()[]int {_cbefg :=make ([]int ,256);for _fega :=0;_fega <=0xff;_fega ++{_cegc :=byte (_fega );_cbefg [_cegc ]=int (_cegc &0x1)+(int (_cegc >>1)&0x1)+(int (_cegc >>2)&0x1)+(int (_cegc >>3)&0x1)+(int (_cegc >>4)&0x1)+(int (_cegc >>5)&0x1)+(int (_cegc >>6)&0x1)+(int (_cegc >>7)&0x1);
};return _cbefg ;};func (_eff *Bitmap )connComponentsBB (_dfcga int )(_fbbd *Boxes ,_adee error ){const _ggcec ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _dfcga !=4&&_dfcga !=8{return nil ,_d .Error (_ggcec ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _eff .Zero (){return &Boxes {},nil ;};_eff .setPadBits (0);_gage ,_adee :=_eaee (nil ,_eff );if _adee !=nil {return nil ,_d .Wrap (_adee ,_ggcec ,"\u0062\u006d\u0031");};_ecba :=&_ed .Stack {};_ecba .Aux =&_ed .Stack {};_fbbd =&Boxes {};var (_eeae ,_gcee int ;
_ecea _be .Point ;_afdg bool ;_beef *_be .Rectangle ;);for {if _ecea ,_afdg ,_adee =_gage .nextOnPixel (_gcee ,_eeae );_adee !=nil {return nil ,_d .Wrap (_adee ,_ggcec ,"");};if !_afdg {break ;};if _beef ,_adee =_caba (_gage ,_ecba ,_ecea .X ,_ecea .Y ,_dfcga );
_adee !=nil {return nil ,_d .Wrap (_adee ,_ggcec ,"");};if _adee =_fbbd .Add (_beef );_adee !=nil {return nil ,_d .Wrap (_adee ,_ggcec ,"");};_gcee =_ecea .X ;_eeae =_ecea .Y ;};return _fbbd ,nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_ecbf float64 ,_cbcc error ){const _dcce ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _ecbf ,_d .Error (_dcce ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _ecbf ,_d .Error (_dcce ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _ecbf ,_d .Error (_dcce ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_abfa ,_bfcf :=bm1 .Width ,bm1 .Height ;_bfag ,_eef :=bm2 .Width ,bm2 .Height ;
if _efgb (_abfa -_bfag )> maxDiffW {return 0,nil ;};if _efgb (_bfcf -_eef )> maxDiffH {return 0,nil ;};var _ebee ,_ebfc int ;if delX >=0{_ebee =int (delX +0.5);}else {_ebee =int (delX -0.5);};if delY >=0{_ebfc =int (delY +0.5);}else {_ebfc =int (delY -0.5);
};_eafc :=bm1 .createTemplate ();if _cbcc =_eafc .RasterOperation (_ebee ,_ebfc ,_bfag ,_eef ,PixSrc ,bm2 ,0,0);_cbcc !=nil {return _ecbf ,_d .Wrap (_cbcc ,_dcce ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _cbcc =_eafc .RasterOperation (0,0,_abfa ,_bfcf ,PixSrcAndDst ,bm1 ,0,0);
_cbcc !=nil {return _ecbf ,_d .Wrap (_cbcc ,_dcce ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_dggc :=_eafc .countPixels ();_ecbf =float64 (_dggc )*float64 (_dggc )/(float64 (area1 )*float64 (area2 ));return _ecbf ,nil ;};func _ga (_cc ,_a *Bitmap )(_bdd error ){const _bc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_cg :=_a .RowStride ;_ca :=_cc .RowStride ;var (_bce byte ;_bea uint16 ;_ad ,_ce ,_bddf ,_de ,_fcf int ;);for _bddf =0;_bddf < _a .Height ;_bddf ++{_ad =_bddf *_cg ;_ce =2*_bddf *_ca ;for _de =0;_de < _cg ;_de ++{_bce =_a .Data [_ad +_de ];_bea =_dgfd [_bce ];
_fcf =_ce +_de *2;if _cc .RowStride !=_a .RowStride *2&&(_de +1)*2> _cc .RowStride {_bdd =_cc .SetByte (_fcf ,byte (_bea >>8));}else {_bdd =_cc .setTwoBytes (_fcf ,_bea );};if _bdd !=nil {return _d .Wrap (_bdd ,_bc ,"");};};for _de =0;_de < _ca ;_de ++{_fcf =_ce +_ca +_de ;
_bce =_cc .Data [_ce +_de ];if _bdd =_cc .SetByte (_fcf ,_bce );_bdd !=nil {return _d .Wrapf (_bdd ,_bc ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ce +_de ,_ce +_ca +_de );
};};};return nil ;};func (_bebd *Bitmap )centroid (_ceaf ,_fgea []int )(Point ,error ){_fcfe :=Point {};_bebd .setPadBits (0);if len (_ceaf )==0{_ceaf =_cdac ();};if len (_fgea )==0{_fgea =_beac ();};var _ddffg ,_fbed ,_ffecf ,_efag ,_fcafe ,_gfdc int ;
var _aaag byte ;for _fcafe =0;_fcafe < _bebd .Height ;_fcafe ++{_cggf :=_bebd .RowStride *_fcafe ;_efag =0;for _gfdc =0;_gfdc < _bebd .RowStride ;_gfdc ++{_aaag =_bebd .Data [_cggf +_gfdc ];if _aaag !=0{_efag +=_fgea [_aaag ];_ddffg +=_ceaf [_aaag ]+_gfdc *8*_fgea [_aaag ];
};};_ffecf +=_efag ;_fbed +=_efag *_fcafe ;};if _ffecf !=0{_fcfe .X =float32 (_ddffg )/float32 (_ffecf );_fcfe .Y =float32 (_fbed )/float32 (_ffecf );};return _fcfe ,nil ;};func (_ebefd *Bitmaps )selectByIndexes (_gadcb []int )(*Bitmaps ,error ){_bgeaa :=&Bitmaps {};
for _ ,_fgba :=range _gadcb {_bdgd ,_cfbf :=_ebefd .GetBitmap (_fgba );if _cfbf !=nil {return nil ,_d .Wrap (_cfbf ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_bgeaa .AddBitmap (_bdgd );};return _bgeaa ,nil ;
};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _fdd (oldByte ,newByte ,op );};func _efgb (_dgbe int )int {if _dgbe < 0{return -_dgbe ;};return _dgbe ;};func (_efaa *byHeight )Less (i ,j int )bool {return _efaa .Values [i ].Height < _efaa .Values [j ].Height };
func (_dgdba *Bitmaps )SortByHeight (){_fecgb :=(*byHeight )(_dgdba );_b .Sort (_fecgb )};func (_fbcd *ClassedPoints )Less (i ,j int )bool {return _fbcd ._ffae (i ,j )};func (_abaa *Bitmaps )SortByWidth (){_cbfa :=(*byWidth )(_abaa );_b .Sort (_cbfa )};
const (_febg shift =iota ;_gdff ;);func _acgd (_dgde ,_ebef *Bitmap ,_acfe *Selection )(*Bitmap ,error ){const _degc ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _cdbdf ,_badgg int ;if _ebef ==nil {return nil ,_d .Error (_degc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _acfe ==nil {return nil ,_d .Error (_degc ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_cdbdf =_acfe .Width ;_badgg =_acfe .Height ;if _cdbdf ==0||_badgg ==0{return nil ,_d .Error (_degc ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _dgde ==nil {return _ebef .createTemplate (),nil ;};if _fcfc :=_dgde .resizeImageData (_ebef );_fcfc !=nil {return nil ,_fcfc ;};return _dgde ,nil ;};func (_beba *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _beba .addBorderGeneral (left ,right ,top ,bot ,val );
};func _geaf ()(_gae [256]uint16 ){for _fbb :=0;_fbb < 256;_fbb ++{if _fbb &0x01!=0{_gae [_fbb ]|=0x3;};if _fbb &0x02!=0{_gae [_fbb ]|=0xc;};if _fbb &0x04!=0{_gae [_fbb ]|=0x30;};if _fbb &0x08!=0{_gae [_fbb ]|=0xc0;};if _fbb &0x10!=0{_gae [_fbb ]|=0x300;
};if _fbb &0x20!=0{_gae [_fbb ]|=0xc00;};if _fbb &0x40!=0{_gae [_fbb ]|=0x3000;};if _fbb &0x80!=0{_gae [_fbb ]|=0xc000;};};return _gae ;};func (_fagd *Selection )findMaxTranslations ()(_fbec ,_ddceg ,_dagdg ,_baeb int ){for _fdefb :=0;_fdefb < _fagd .Height ;
_fdefb ++{for _fcdd :=0;_fcdd < _fagd .Width ;_fcdd ++{if _fagd .Data [_fdefb ][_fcdd ]==SelHit {_fbec =_aed (_fbec ,_fagd .Cx -_fcdd );_ddceg =_aed (_ddceg ,_fagd .Cy -_fdefb );_dagdg =_aed (_dagdg ,_fcdd -_fagd .Cx );_baeb =_aed (_baeb ,_fdefb -_fagd .Cy );
};};};return _fbec ,_ddceg ,_dagdg ,_baeb ;};func (_ffda *Bitmap )nextOnPixelLow (_gga ,_fge ,_ccf ,_bdfg ,_cbad int )(_eadg _be .Point ,_bab bool ,_gcg error ){const _bfcd ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_fbbg int ;_dffb byte ;);_aafc :=_cbad *_ccf ;_cdc :=_aafc +(_bdfg /8);if _dffb ,_gcg =_ffda .GetByte (_cdc );_gcg !=nil {return _eadg ,false ,_d .Wrap (_gcg ,_bfcd ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _dffb !=0{_efeb :=_bdfg -(_bdfg %8)+7;for _fbbg =_bdfg ;_fbbg <=_efeb &&_fbbg < _gga ;_fbbg ++{if _ffda .GetPixel (_fbbg ,_cbad ){_eadg .X =_fbbg ;_eadg .Y =_cbad ;return _eadg ,true ,nil ;};};};_dfdcdb :=(_bdfg /8)+1;_fbbg =8*_dfdcdb ;var _dfaf int ;
for _cdc =_aafc +_dfdcdb ;_fbbg < _gga ;_cdc ,_fbbg =_cdc +1,_fbbg +8{if _dffb ,_gcg =_ffda .GetByte (_cdc );_gcg !=nil {return _eadg ,false ,_d .Wrap (_gcg ,_bfcd ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");
};if _dffb ==0{continue ;};for _dfaf =0;_dfaf < 8&&_fbbg < _gga ;_dfaf ,_fbbg =_dfaf +1,_fbbg +1{if _ffda .GetPixel (_fbbg ,_cbad ){_eadg .X =_fbbg ;_eadg .Y =_cbad ;return _eadg ,true ,nil ;};};};for _ggec :=_cbad +1;_ggec < _fge ;_ggec ++{_aafc =_ggec *_ccf ;
for _cdc ,_fbbg =_aafc ,0;_fbbg < _gga ;_cdc ,_fbbg =_cdc +1,_fbbg +8{if _dffb ,_gcg =_ffda .GetByte (_cdc );_gcg !=nil {return _eadg ,false ,_d .Wrap (_gcg ,_bfcd ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _dffb ==0{continue ;
};for _dfaf =0;_dfaf < 8&&_fbbg < _gga ;_dfaf ,_fbbg =_dfaf +1,_fbbg +1{if _ffda .GetPixel (_fbbg ,_ggec ){_eadg .X =_fbbg ;_eadg .Y =_ggec ;return _eadg ,true ,nil ;};};};};return _eadg ,false ,nil ;};func (_egdc *Points )AddPoint (x ,y float32 ){*_egdc =append (*_egdc ,Point {x ,y })};
const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func _cfcc (_adebf ,_gffg *Bitmap ,_gadd ,_dae ,_abfb ,_gbg ,_ffdd ,_fdfa ,_affb ,_fcc int ,_eag CombinationOperator ,_agcce int )error {var _dfgcc int ;_gec :=func (){_dfgcc ++;
_abfb +=_gffg .RowStride ;_gbg +=_adebf .RowStride ;_ffdd +=_adebf .RowStride };for _dfgcc =_gadd ;_dfgcc < _dae ;_gec (){var _abg uint16 ;_eadb :=_abfb ;for _fegg :=_gbg ;_fegg <=_ffdd ;_fegg ++{_fafg ,_bed :=_gffg .GetByte (_eadb );if _bed !=nil {return _bed ;
};_abgd ,_bed :=_adebf .GetByte (_fegg );if _bed !=nil {return _bed ;};_abg =(_abg |(uint16 (_abgd )&0xff))<<uint (_fcc );_abgd =byte (_abg >>8);if _bed =_gffg .SetByte (_eadb ,_fdd (_fafg ,_abgd ,_eag ));_bed !=nil {return _bed ;};_eadb ++;_abg <<=uint (_affb );
if _fegg ==_ffdd {_abgd =byte (_abg >>(8-uint8 (_fcc )));if _agcce !=0{_abgd =_fbaef (uint (8+_fdfa ),_abgd );};_fafg ,_bed =_gffg .GetByte (_eadb );if _bed !=nil {return _bed ;};if _bed =_gffg .SetByte (_eadb ,_fdd (_fafg ,_abgd ,_eag ));_bed !=nil {return _bed ;
};};};};return nil ;};func TstAddSymbol (t *_eg .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_fgbb :=_be .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_fgbb );*x +=sym .Width +space ;};func (_cggb *Boxes )makeSizeIndicator (_agdb ,_aag int ,_ada LocationFilter ,_gdae SizeComparison )*_ed .NumSlice {_eddf :=&_ed .NumSlice {};
var _geaa ,_fefb ,_eece int ;for _ ,_fgaba :=range *_cggb {_geaa =0;_fefb ,_eece =_fgaba .Dx (),_fgaba .Dy ();switch _ada {case LocSelectWidth :if (_gdae ==SizeSelectIfLT &&_fefb < _agdb )||(_gdae ==SizeSelectIfGT &&_fefb > _agdb )||(_gdae ==SizeSelectIfLTE &&_fefb <=_agdb )||(_gdae ==SizeSelectIfGTE &&_fefb >=_agdb ){_geaa =1;
};case LocSelectHeight :if (_gdae ==SizeSelectIfLT &&_eece < _aag )||(_gdae ==SizeSelectIfGT &&_eece > _aag )||(_gdae ==SizeSelectIfLTE &&_eece <=_aag )||(_gdae ==SizeSelectIfGTE &&_eece >=_aag ){_geaa =1;};case LocSelectIfEither :if (_gdae ==SizeSelectIfLT &&(_eece < _aag ||_fefb < _agdb ))||(_gdae ==SizeSelectIfGT &&(_eece > _aag ||_fefb > _agdb ))||(_gdae ==SizeSelectIfLTE &&(_eece <=_aag ||_fefb <=_agdb ))||(_gdae ==SizeSelectIfGTE &&(_eece >=_aag ||_fefb >=_agdb )){_geaa =1;
};case LocSelectIfBoth :if (_gdae ==SizeSelectIfLT &&(_eece < _aag &&_fefb < _agdb ))||(_gdae ==SizeSelectIfGT &&(_eece > _aag &&_fefb > _agdb ))||(_gdae ==SizeSelectIfLTE &&(_eece <=_aag &&_fefb <=_agdb ))||(_gdae ==SizeSelectIfGTE &&(_eece >=_aag &&_fefb >=_agdb )){_geaa =1;
};};_eddf .AddInt (_geaa );};return _eddf ;};func _deec (_bgc *Bitmap )(_cbef *Bitmap ,_gccg int ,_bgaf error ){const _dgbf ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _bgc ==nil {return nil ,0,_d .Errorf (_dgbf ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};var _fdgd ,_ecfb *Bitmap ;if _fdgd ,_bgaf =_eaee (nil ,_bgc );_bgaf !=nil {return nil ,0,_d .Wrap (_bgaf ,_dgbf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_cefbf [13]int ;_acg ,_cedg int ;);_baee :=12;_cdgc :=_ed .NewNumSlice (_baee +1);
_fggg :=_ed .NewNumSlice (_baee +1);var _gbbe *Boxes ;for _baba :=0;_baba <=_baee ;_baba ++{if _baba ==0{if _ecfb ,_bgaf =_eaee (nil ,_fdgd );_bgaf !=nil {return nil ,0,_d .Wrap (_bgaf ,_dgbf ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _ecfb ,_bgaf =_eeef (_fdgd ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});
_bgaf !=nil {return nil ,0,_d .Wrap (_bgaf ,_dgbf ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _gbbe ,_bgaf =_ecfb .connComponentsBB (4);_bgaf !=nil {return nil ,0,_d .Wrap (_bgaf ,_dgbf ,"");};_cefbf [_baba ]=len (*_gbbe );
_cdgc .AddInt (_cefbf [_baba ]);switch _baba {case 0:_acg =_cefbf [0];default:_cedg =_cefbf [_baba -1]-_cefbf [_baba ];_fggg .AddInt (_cedg );};_fdgd =_ecfb ;};_dddc :=true ;_cgbe :=2;var _fdef ,_dcdg int ;for _edea :=1;_edea < len (*_fggg );_edea ++{if _fdef ,_bgaf =_cdgc .GetInt (_edea );
_bgaf !=nil {return nil ,0,_d .Wrap (_bgaf ,_dgbf ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _dddc &&_fdef < int (0.3*float32 (_acg )){_cgbe =_edea +1;_dddc =false ;};if _cedg ,_bgaf =_fggg .GetInt (_edea );
_bgaf !=nil {return nil ,0,_d .Wrap (_bgaf ,_dgbf ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _cedg > _dcdg {_dcdg =_cedg ;};};_fccg :=_bgc .XResolution ;if _fccg ==0{_fccg =150;};if _fccg > 110{_cgbe ++;};if _cgbe < 2{_c .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_cgbe =2;};_gccg =_cgbe +1;if _cbef ,_bgaf =_cebe (nil ,_bgc ,_cgbe +1,1);_bgaf !=nil {return nil ,0,_d .Wrap (_bgaf ,_dgbf ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _cbef ,_gccg ,nil ;
};func (_faeb *Bitmaps )AddBitmap (bm *Bitmap ){_faeb .Values =append (_faeb .Values ,bm )};func _gfce (_ac *Bitmap ,_ffd ...int )(_ggc *Bitmap ,_ded error ){const _gde ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _ac ==nil {return nil ,_d .Error (_gde ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_ffd )==0||len (_ffd )> 4{return nil ,_d .Error (_gde ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _ffd [0]<=0{_c .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_ggc ,_ded =_eaee (nil ,_ac );if _ded !=nil {return nil ,_d .Wrap (_ded ,_gde ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _ggc ,nil ;};_fgf :=_feef ();_ggc =_ac ;for _bgff ,_bfad :=range _ffd {if _bfad <=0{break ;};_ggc ,_ded =_dcb (_ggc ,_bfad ,_fgf );if _ded !=nil {return nil ,_d .Wrapf (_ded ,_gde ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_bgff );
};};return _ggc ,nil ;};func (_bbff *Bitmaps )HeightSorter ()func (_ebgga ,_ggab int )bool {return func (_adcff ,_dgcda int )bool {_caad :=_bbff .Values [_adcff ].Height < _bbff .Values [_dgcda ].Height ;_c .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_bbff .Values [_adcff ].Height ,_bbff .Values [_dgcda ].Height ,_caad );
return _caad ;};};func _gafa (_gbdg ,_abgc *Bitmap ,_aggf ,_cbccg int )(*Bitmap ,error ){const _bdbg ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _abgc ==nil {return nil ,_d .Error (_bdbg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _aggf < 1||_cbccg < 1{return nil ,_d .Error (_bdbg ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _aggf ==1&&_cbccg ==1{_fegf ,_bdga :=_eaee (_gbdg ,_abgc );if _bdga !=nil {return nil ,_d .Wrap (_bdga ,_bdbg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fegf ,nil ;};if _aggf ==1||_cbccg ==1{_bceb :=SelCreateBrick (_cbccg ,_aggf ,_cbccg /2,_aggf /2,SelHit );_cdeff ,_cceg :=_cec (_gbdg ,_abgc ,_bceb );if _cceg !=nil {return nil ,_d .Wrap (_cceg ,_bdbg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cdeff ,nil ;};_beaae :=SelCreateBrick (1,_aggf ,0,_aggf /2,SelHit );_edf :=SelCreateBrick (_cbccg ,1,_cbccg /2,0,SelHit );_ege ,_fcbec :=_cec (nil ,_abgc ,_beaae );if _fcbec !=nil {return nil ,_d .Wrap (_fcbec ,_bdbg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_gbdg ,_fcbec =_cec (_gbdg ,_ege ,_edf );if _fcbec !=nil {return nil ,_d .Wrap (_fcbec ,_bdbg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _gbdg ,nil ;};func (_fea *Bitmap )setPadBits (_agde int ){_adeb :=8-_fea .Width %8;if _adeb ==8{return ;
};_gdee :=_fea .Width /8;_ggac :=_geda [_adeb ];if _agde ==0{_ggac ^=_ggac ;};var _cadf int ;for _bgg :=0;_bgg < _fea .Height ;_bgg ++{_cadf =_bgg *_fea .RowStride +_gdee ;if _agde ==0{_fea .Data [_cadf ]&=_ggac ;}else {_fea .Data [_cadf ]|=_ggac ;};};
};func (_gdbf *Bitmap )GetByteIndex (x ,y int )int {return y *_gdbf .RowStride +(x >>3)};func _df (_deb ,_aa *Bitmap )(_fe error ){const _gf ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_cb :=_aa .RowStride ;
_beb :=_deb .RowStride ;_bf :=_aa .RowStride *4-_deb .RowStride ;var (_edg ,_ee byte ;_cd uint32 ;_bfc ,_da ,_fcfa ,_db ,_caa ,_bfa ,_cgf int ;);for _fcfa =0;_fcfa < _aa .Height ;_fcfa ++{_bfc =_fcfa *_cb ;_da =4*_fcfa *_beb ;for _db =0;_db < _cb ;_db ++{_edg =_aa .Data [_bfc +_db ];
_cd =_fafd [_edg ];_bfa =_da +_db *4;if _bf !=0&&(_db +1)*4> _deb .RowStride {for _caa =_bf ;_caa > 0;_caa --{_ee =byte ((_cd >>uint (_caa *8))&0xff);_cgf =_bfa +(_bf -_caa );if _fe =_deb .SetByte (_cgf ,_ee );_fe !=nil {return _d .Wrapf (_fe ,_gf ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_caa );
};};}else if _fe =_deb .setFourBytes (_bfa ,_cd );_fe !=nil {return _d .Wrap (_fe ,_gf ,"");};if _fe =_deb .setFourBytes (_da +_db *4,_fafd [_aa .Data [_bfc +_db ]]);_fe !=nil {return _d .Wrap (_fe ,_gf ,"");};};for _caa =1;_caa < 4;_caa ++{for _db =0;
_db < _beb ;_db ++{if _fe =_deb .SetByte (_da +_caa *_beb +_db ,_deb .Data [_da +_db ]);_fe !=nil {return _d .Wrapf (_fe ,_gf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_caa ,_db );
};};};};return nil ;};func (_ecd *Bitmap )resizeImageData (_efg *Bitmap )error {if _efg ==nil {return _d .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _ecd .SizesEqual (_efg ){return nil ;};_ecd .Data =make ([]byte ,len (_efg .Data ));_ecd .Width =_efg .Width ;_ecd .Height =_efg .Height ;_ecd .RowStride =_efg .RowStride ;return nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;
SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func _cdac ()[]int {_ggeac :=make ([]int ,256);_ggeac [0]=0;_ggeac [1]=7;var _aeca int ;for _aeca =2;_aeca < 4;_aeca ++{_ggeac [_aeca ]=_ggeac [_aeca -2]+6;};for _aeca =4;_aeca < 8;_aeca ++{_ggeac [_aeca ]=_ggeac [_aeca -4]+5;
};for _aeca =8;_aeca < 16;_aeca ++{_ggeac [_aeca ]=_ggeac [_aeca -8]+4;};for _aeca =16;_aeca < 32;_aeca ++{_ggeac [_aeca ]=_ggeac [_aeca -16]+3;};for _aeca =32;_aeca < 64;_aeca ++{_ggeac [_aeca ]=_ggeac [_aeca -32]+2;};for _aeca =64;_aeca < 128;_aeca ++{_ggeac [_aeca ]=_ggeac [_aeca -64]+1;
};for _aeca =128;_aeca < 256;_aeca ++{_ggeac [_aeca ]=_ggeac [_aeca -128];};return _ggeac ;};func (_gffga *BitmapsArray )GetBox (i int )(*_be .Rectangle ,error ){const _dgag ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _gffga ==nil {return nil ,_d .Error (_dgag ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_gffga .Boxes )-1{return nil ,_d .Errorf (_dgag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gffga .Boxes [i ],nil ;};var (_gdc *Bitmap ;_cafbc *Bitmap ;);func Rect (x ,y ,w ,h int )(*_be .Rectangle ,error ){const _acbf ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_d .Errorf (_acbf ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_d .Error (_acbf ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_gce :=_be .Rect (x ,y ,x +w ,y +h );return &_gce ,nil ;
};func TstGetScaledSymbol (t *_eg .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_cggee ,_cagf :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_e .NoError (t ,_cagf );
return _cggee ;};func (_ddg *Bitmap )CountPixels ()int {return _ddg .countPixels ()};func (_fcaa *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_fgae *Boxes ,_dede error ){const _cbae ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _fcaa ==nil {return nil ,_d .Error (_cbae ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_d .Error (_cbae ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _fgae ,_dede =_fcaa .connComponentsBB (connectivity );_dede !=nil {return nil ,_d .Wrap (_dede ,_cbae ,"");};}else {if _fgae ,_dede =_fcaa .connComponentsBitmapsBB (bms ,connectivity );_dede !=nil {return nil ,_d .Wrap (_dede ,_cbae ,"");
};};return _fgae ,nil ;};type byWidth Bitmaps ;func _bcb (_egd ,_dgb *Bitmap ,_bb int ,_cf []byte ,_ddc int )(_daa error ){const _cgb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_eaf ,_bdf ,_bca ,_ddef ,_eccd ,_aaf ,_gfdd ,_bfd int ;_bbe ,_dddg ,_gcd ,_dbc uint32 ;_gbd ,_dfc byte ;_beg uint16 ;);_fa :=make ([]byte ,4);_fff :=make ([]byte ,4);for _bca =0;_bca < _egd .Height -1;_bca ,_ddef =_bca +2,_ddef +1{_eaf =_bca *_egd .RowStride ;
_bdf =_ddef *_dgb .RowStride ;for _eccd ,_aaf =0,0;_eccd < _ddc ;_eccd ,_aaf =_eccd +4,_aaf +1{for _gfdd =0;_gfdd < 4;_gfdd ++{_bfd =_eaf +_eccd +_gfdd ;if _bfd <=len (_egd .Data )-1&&_bfd < _eaf +_egd .RowStride {_fa [_gfdd ]=_egd .Data [_bfd ];}else {_fa [_gfdd ]=0x00;
};_bfd =_eaf +_egd .RowStride +_eccd +_gfdd ;if _bfd <=len (_egd .Data )-1&&_bfd < _eaf +(2*_egd .RowStride ){_fff [_gfdd ]=_egd .Data [_bfd ];}else {_fff [_gfdd ]=0x00;};};_bbe =_fc .BigEndian .Uint32 (_fa );_dddg =_fc .BigEndian .Uint32 (_fff );_gcd =_bbe &_dddg ;
_gcd |=_gcd <<1;_dbc =_bbe |_dddg ;_dbc &=_dbc <<1;_dddg =_gcd |_dbc ;_dddg &=0xaaaaaaaa;_bbe =_dddg |(_dddg <<7);_gbd =byte (_bbe >>24);_dfc =byte ((_bbe >>8)&0xff);_bfd =_bdf +_aaf ;if _bfd +1==len (_dgb .Data )-1||_bfd +1>=_bdf +_dgb .RowStride {if _daa =_dgb .SetByte (_bfd ,_cf [_gbd ]);
_daa !=nil {return _d .Wrapf (_daa ,_cgb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bfd );};}else {_beg =(uint16 (_cf [_gbd ])<<8)|uint16 (_cf [_dfc ]);if _daa =_dgb .setTwoBytes (_bfd ,_beg );_daa !=nil {return _d .Wrapf (_daa ,_cgb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bfd );
};_aaf ++;};};};return nil ;};func _fbaef (_dbdf uint ,_bgbf byte )byte {return _bgbf >>_dbdf <<_dbdf };func (_gebe *Bitmaps )selectByIndicator (_fbffg *_ed .NumSlice )(_dged *Bitmaps ,_egge error ){const _gcge ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gebe ==nil {return nil ,_d .Error (_gcge ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _fbffg ==nil {return nil ,_d .Error (_gcge ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_gebe .Values )==0{return _gebe ,nil ;};if len (*_fbffg )!=len (_gebe .Values ){return nil ,_d .Errorf (_gcge ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_fbffg ),len (_gebe .Values ));
};var _fbcg ,_fagb ,_ceda int ;for _fagb =0;_fagb < len (*_fbffg );_fagb ++{if _fbcg ,_egge =_fbffg .GetInt (_fagb );_egge !=nil {return nil ,_d .Wrap (_egge ,_gcge ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _fbcg ==1{_ceda ++;
};};if _ceda ==len (_gebe .Values ){return _gebe ,nil ;};_dged =&Bitmaps {};_gccd :=len (_gebe .Values )==len (_gebe .Boxes );for _fagb =0;_fagb < len (*_fbffg );_fagb ++{if _fbcg =int ((*_fbffg )[_fagb ]);_fbcg ==0{continue ;};_dged .Values =append (_dged .Values ,_gebe .Values [_fagb ]);
if _gccd {_dged .Boxes =append (_dged .Boxes ,_gebe .Boxes [_fagb ]);};};return _dged ,nil ;};func _cebe (_cfda ,_cfdb *Bitmap ,_efdg ,_deaf int )(*Bitmap ,error ){const _gaec ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _cfdb ==nil {return nil ,_d .Error (_gaec ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _efdg < 1||_deaf < 1{return nil ,_d .Error (_gaec ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _efdg ==1&&_deaf ==1{return _cfdb .Copy (),nil ;};if _efdg ==1||_deaf ==1{_bgfd :=SelCreateBrick (_deaf ,_efdg ,_deaf /2,_efdg /2,SelHit );
var _faae error ;_cfda ,_faae =_acgf (_cfda ,_cfdb ,_bgfd );if _faae !=nil {return nil ,_d .Wrap (_faae ,_gaec ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};
return _cfda ,nil ;};_fggd :=SelCreateBrick (1,_efdg ,0,_efdg /2,SelHit );_cead :=SelCreateBrick (_deaf ,1,_deaf /2,0,SelHit );_cagg ,_ceaa :=_bddgg (nil ,_cfdb ,_fggd );if _ceaa !=nil {return nil ,_d .Wrap (_ceaa ,_gaec ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _cfda ,_ceaa =_bddgg (_cfda ,_cagg ,_cead );_ceaa !=nil {return nil ,_d .Wrap (_ceaa ,_gaec ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_ceaa =_cec (_cagg ,_cfda ,_fggd );_ceaa !=nil {return nil ,_d .Wrap (_ceaa ,_gaec ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_ceaa =_cec (_cfda ,_cagg ,_cead );_ceaa !=nil {return nil ,_d .Wrap (_ceaa ,_gaec ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _cfda ,nil ;};func _feef ()(_dee []byte ){_dee =make ([]byte ,256);for _gcdb :=0;_gcdb < 256;_gcdb ++{_age :=byte (_gcdb );
_dee [_age ]=(_age &0x01)|((_age &0x04)>>1)|((_age &0x10)>>2)|((_age &0x40)>>3)|((_age &0x02)<<3)|((_age &0x08)<<2)|((_age &0x20)<<1)|(_age &0x80);};return _dee ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func TstNSymbol (t *_eg .T ,scale ...int )*Bitmap {_cdfa ,_aedd :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_e .NoError (t ,_aedd );return TstGetScaledSymbol (t ,_cdfa ,scale ...);};func (_eeaf *Bitmap )thresholdPixelSum (_gafd int )bool {var (_fbag int ;_fgab uint8 ;_caf byte ;_acccd int ;);_cefb :=_eeaf .RowStride ;_fdfc :=uint (_eeaf .Width &0x07);if _fdfc !=0{_fgab =uint8 ((0xff<<(8-_fdfc ))&0xff);
_cefb --;};for _fbf :=0;_fbf < _eeaf .Height ;_fbf ++{for _acccd =0;_acccd < _cefb ;_acccd ++{_caf =_eeaf .Data [_fbf *_eeaf .RowStride +_acccd ];_fbag +=int (_daca [_caf ]);};if _fdfc !=0{_caf =_eeaf .Data [_fbf *_eeaf .RowStride +_acccd ]&_fgab ;_fbag +=int (_daca [_caf ]);
};if _fbag > _gafd {return true ;};};return false ;};func (_fabf *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_fbg *Bitmaps ,_cefgf *Boxes ,_bef error ){const _gdbd ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _fabf ==nil {return nil ,nil ,_d .Error (_gdbd ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_d .Error (_gdbd ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _fabf .Zero (){_cefgf =&Boxes {};_fbg =&Bitmaps {};return _fbg ,_cefgf ,nil ;};switch components {case ComponentConn :_fbg =&Bitmaps {};if _cefgf ,_bef =_fabf .ConnComponents (_fbg ,8);_bef !=nil {return nil ,nil ,_d .Wrap (_bef ,_gdbd ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_fecg ,_afadf :=MorphSequence (_fabf ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _afadf !=nil {return nil ,nil ,_d .Wrap (_afadf ,_gdbd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _c .Log .IsLogLevel (_c .LogLevelTrace ){_c .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_fecg .String ());
};_aggd :=&Bitmaps {};_cefgf ,_afadf =_fecg .ConnComponents (_aggd ,8);if _afadf !=nil {return nil ,nil ,_d .Wrap (_afadf ,_gdbd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _c .Log .IsLogLevel (_c .LogLevelTrace ){_c .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_aggd .String ());
};if _fbg ,_afadf =_aggd .ClipToBitmap (_fabf );_afadf !=nil {return nil ,nil ,_d .Wrap (_afadf ,_gdbd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_dfbe :=1;
var _gdgc *Bitmap ;switch {case _fabf .XResolution <=200:_gdgc =_fabf ;case _fabf .XResolution <=400:_dfbe =2;_gdgc ,_bef =_gfce (_fabf ,1,0,0,0);if _bef !=nil {return nil ,nil ,_d .Wrap (_bef ,_gdbd ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_dfbe =4;_gdgc ,_bef =_gfce (_fabf ,1,1,0,0);if _bef !=nil {return nil ,nil ,_d .Wrap (_bef ,_gdbd ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_ddca ,_ ,_ccab :=_deec (_gdgc );if _ccab !=nil {return nil ,nil ,_d .Wrap (_ccab ,_gdbd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_efgc ,_ccab :=_gfa (_ddca ,_dfbe );if _ccab !=nil {return nil ,nil ,_d .Wrap (_ccab ,_gdbd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_gdbg :=&Bitmaps {};if _cefgf ,_ccab =_efgc .ConnComponents (_gdbg ,4);_ccab !=nil {return nil ,nil ,_d .Wrap (_ccab ,_gdbd ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _fbg ,_ccab =_gdbg .ClipToBitmap (_fabf );_ccab !=nil {return nil ,nil ,_d .Wrap (_ccab ,_gdbd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_fbg ,_bef =_fbg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _bef !=nil {return nil ,nil ,_d .Wrap (_bef ,_gdbd ,"");};_cefgf ,_bef =_cefgf .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _bef !=nil {return nil ,nil ,_d .Wrap (_bef ,_gdbd ,"");};return _fbg ,_cefgf ,nil ;};func (_ccbb Points )Get (i int )(Point ,error ){if i > len (_ccbb )-1{return Point {},_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ccbb [i ],nil ;};func (_fggb *ClassedPoints )XAtIndex (i int )float32 {return (*_fggb .Points )[_fggb .IntSlice [i ]].X };type fillSegment struct{_aacbf int ;_caaad int ;_cdae int ;_adeg int ;};var MorphBC BoundaryCondition ;func (_ffbc *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_dcd *Boxes ,_bfbe error ){const _defb ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _ffbc ==nil {return nil ,_d .Error (_defb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_ffbc )==0{return _ffbc ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_defb ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_d .Errorf (_defb ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_afbg :=_ffbc .makeSizeIndicator (width ,height ,tp ,relation );_adcf ,_bfbe :=_ffbc .selectWithIndicator (_afbg );if _bfbe !=nil {return nil ,_d .Wrap (_bfbe ,_defb ,"");};return _adcf ,nil ;};func TstOSymbol (t *_eg .T ,scale ...int )*Bitmap {_feab ,_befc :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_e .NoError (t ,_befc );return TstGetScaledSymbol (t ,_feab ,scale ...);};func (_agg *Bitmap )setEightPartlyBytes (_eabb ,_adfa int ,_cee uint64 )(_eee error ){var (_dbde byte ;_aef int ;);const _edb ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _egae :=1;_egae <=_adfa ;_egae ++{_aef =64-_egae *8;_dbde =byte (_cee >>uint (_aef )&0xff);_c .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_dbde ,_eabb ,_eabb +_egae -1,_adfa ,_aef );
if _eee =_agg .SetByte (_eabb +_egae -1,_dbde );_eee !=nil {return _d .Wrap (_eee ,_edb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_fabd :=_agg .RowStride *8-_agg .Width ;if _fabd ==0{return nil ;};_aef -=8;_dbde =byte (_cee >>uint (_aef )&0xff)<<uint (_fabd );
if _eee =_agg .SetByte (_eabb +_adfa ,_dbde );_eee !=nil {return _d .Wrap (_eee ,_edb ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func _ggee (_fec ,_ddff *Bitmap ,_cgcc ,_dda ,_ecf ,_bdb ,_eggf ,_cbag ,_dgee ,_bfgg int ,_cbca CombinationOperator )error {var _eafd int ;
_fcg :=func (){_eafd ++;_ecf +=_ddff .RowStride ;_bdb +=_fec .RowStride ;_eggf +=_fec .RowStride };for _eafd =_cgcc ;_eafd < _dda ;_fcg (){var _daff uint16 ;_dcec :=_ecf ;for _fegc :=_bdb ;_fegc <=_eggf ;_fegc ++{_fbeg ,_cde :=_ddff .GetByte (_dcec );if _cde !=nil {return _cde ;
};_egdd ,_cde :=_fec .GetByte (_fegc );if _cde !=nil {return _cde ;};_daff =(_daff |uint16 (_egdd ))<<uint (_bfgg );_egdd =byte (_daff >>8);if _fegc ==_eggf {_egdd =_fbaef (uint (_cbag ),_egdd );};if _cde =_ddff .SetByte (_dcec ,_fdd (_fbeg ,_egdd ,_cbca ));
_cde !=nil {return _cde ;};_dcec ++;_daff <<=uint (_dgee );};};return nil ;};func _dggcf (_cfde *_ed .Stack )(_efde *fillSegment ,_egbfg error ){const _ffbce ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _cfde ==nil {return nil ,_d .Error (_ffbce ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _cfde .Aux ==nil {return nil ,_d .Error (_ffbce ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_afaab ,_fgbg :=_cfde .Pop ();if !_fgbg {return nil ,nil ;};_ggf ,_fgbg :=_afaab .(*fillSegment );
if !_fgbg {return nil ,_d .Error (_ffbce ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_efde =&fillSegment {_ggf ._aacbf ,_ggf ._caaad ,_ggf ._cdae +_ggf ._adeg ,_ggf ._adeg };
_cfde .Aux .Push (_ggf );return _efde ,nil ;};func (_egf *ClassedPoints )Len ()int {return _egf .IntSlice .Size ()};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_cddb :=_eefd (h ,w ,"");_cddb .setOrigin (cy ,cx );var _bbfe ,_efcd int ;
for _bbfe =0;_bbfe < h ;_bbfe ++{for _efcd =0;_efcd < w ;_efcd ++{_cddb .Data [_bbfe ][_efcd ]=tp ;};};return _cddb ;};func (_abbf *Bitmaps )CountPixels ()*_ed .NumSlice {_addc :=&_ed .NumSlice {};for _ ,_acabg :=range _abbf .Values {_addc .AddInt (_acabg .CountPixels ());
};return _addc ;};var _cebeb =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func _dcb (_gb *Bitmap ,_acc int ,_cda []byte )(_bee *Bitmap ,_bfg error ){const _dfd ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _gb ==nil {return nil ,_d .Error (_dfd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _acc < 1||_acc > 4{return nil ,_d .Error (_dfd ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _gb .Height <=1{return nil ,_d .Errorf (_dfd ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_gb .Height );
};_bee =New (_gb .Width /2,_gb .Height /2);if _cda ==nil {_cda =_feef ();};_acf :=_aafe (_gb .RowStride ,2*_bee .RowStride );switch _acc {case 1:_bfg =_fcd (_gb ,_bee ,_acc ,_cda ,_acf );case 2:_bfg =_bcb (_gb ,_bee ,_acc ,_cda ,_acf );case 3:_bfg =_fffe (_gb ,_bee ,_acc ,_cda ,_acf );
case 4:_bfg =_gfe (_gb ,_bee ,_acc ,_cda ,_acf );};if _bfg !=nil {return nil ,_bfg ;};return _bee ,nil ;};func TstESymbol (t *_eg .T ,scale ...int )*Bitmap {_eeeff ,_ecgc :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_e .NoError (t ,_ecgc );return TstGetScaledSymbol (t ,_eeeff ,scale ...);
};func _agcb (_ccfg ,_eabga ,_cfcb byte )byte {return (_ccfg &^(_cfcb ))|(_eabga &_cfcb )};func (_ebbb *Bitmap )connComponentsBitmapsBB (_aba *Bitmaps ,_eecce int )(_eabe *Boxes ,_fabb error ){const _bfef ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _eecce !=4&&_eecce !=8{return nil ,_d .Error (_bfef ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _aba ==nil {return nil ,_d .Error (_bfef ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_aba .Values )> 0{return nil ,_d .Error (_bfef ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _ebbb .Zero (){return &Boxes {},nil ;};
var (_ccef ,_cbe ,_ffbca ,_cdda *Bitmap ;);_ebbb .setPadBits (0);if _ccef ,_fabb =_eaee (nil ,_ebbb );_fabb !=nil {return nil ,_d .Wrap (_fabb ,_bfef ,"\u0062\u006d\u0031");};if _cbe ,_fabb =_eaee (nil ,_ebbb );_fabb !=nil {return nil ,_d .Wrap (_fabb ,_bfef ,"\u0062\u006d\u0032");
};_eeca :=&_ed .Stack {};_eeca .Aux =&_ed .Stack {};_eabe =&Boxes {};var (_agcda ,_fdee int ;_eaca _be .Point ;_ebgg bool ;_fdgfa *_be .Rectangle ;);for {if _eaca ,_ebgg ,_fabb =_ccef .nextOnPixel (_agcda ,_fdee );_fabb !=nil {return nil ,_d .Wrap (_fabb ,_bfef ,"");
};if !_ebgg {break ;};if _fdgfa ,_fabb =_caba (_ccef ,_eeca ,_eaca .X ,_eaca .Y ,_eecce );_fabb !=nil {return nil ,_d .Wrap (_fabb ,_bfef ,"");};if _fabb =_eabe .Add (_fdgfa );_fabb !=nil {return nil ,_d .Wrap (_fabb ,_bfef ,"");};if _ffbca ,_fabb =_ccef .clipRectangle (_fdgfa ,nil );
_fabb !=nil {return nil ,_d .Wrap (_fabb ,_bfef ,"\u0062\u006d\u0033");};if _cdda ,_fabb =_cbe .clipRectangle (_fdgfa ,nil );_fabb !=nil {return nil ,_d .Wrap (_fabb ,_bfef ,"\u0062\u006d\u0034");};if _ ,_fabb =_bbed (_ffbca ,_ffbca ,_cdda );_fabb !=nil {return nil ,_d .Wrap (_fabb ,_bfef ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _fabb =_cbe .RasterOperation (_fdgfa .Min .X ,_fdgfa .Min .Y ,_fdgfa .Dx (),_fdgfa .Dy (),PixSrcXorDst ,_ffbca ,0,0);_fabb !=nil {return nil ,_d .Wrap (_fabb ,_bfef ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_aba .AddBitmap (_ffbca );_agcda =_eaca .X ;_fdee =_eaca .Y ;};_aba .Boxes =*_eabe ;return _eabe ,nil ;};func (_gfgbg *Bitmaps )makeSizeIndicator (_efea ,_adag int ,_cfdg LocationFilter ,_cebea SizeComparison )(_gfee *_ed .NumSlice ,_gbbb error ){const _edce ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gfgbg ==nil {return nil ,_d .Error (_edce ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _cfdg {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_edce ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_cfdg );
};switch _cebea {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_d .Errorf (_edce ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_cebea );
};_gfee =&_ed .NumSlice {};var (_dcca ,_dddcd ,_edgc int ;_dagdb *Bitmap ;);for _ ,_dagdb =range _gfgbg .Values {_dcca =0;_dddcd ,_edgc =_dagdb .Width ,_dagdb .Height ;switch _cfdg {case LocSelectWidth :if (_cebea ==SizeSelectIfLT &&_dddcd < _efea )||(_cebea ==SizeSelectIfGT &&_dddcd > _efea )||(_cebea ==SizeSelectIfLTE &&_dddcd <=_efea )||(_cebea ==SizeSelectIfGTE &&_dddcd >=_efea )||(_cebea ==SizeSelectIfEQ &&_dddcd ==_efea ){_dcca =1;
};case LocSelectHeight :if (_cebea ==SizeSelectIfLT &&_edgc < _adag )||(_cebea ==SizeSelectIfGT &&_edgc > _adag )||(_cebea ==SizeSelectIfLTE &&_edgc <=_adag )||(_cebea ==SizeSelectIfGTE &&_edgc >=_adag )||(_cebea ==SizeSelectIfEQ &&_edgc ==_adag ){_dcca =1;
};case LocSelectIfEither :if (_cebea ==SizeSelectIfLT &&(_dddcd < _efea ||_edgc < _adag ))||(_cebea ==SizeSelectIfGT &&(_dddcd > _efea ||_edgc > _adag ))||(_cebea ==SizeSelectIfLTE &&(_dddcd <=_efea ||_edgc <=_adag ))||(_cebea ==SizeSelectIfGTE &&(_dddcd >=_efea ||_edgc >=_adag ))||(_cebea ==SizeSelectIfEQ &&(_dddcd ==_efea ||_edgc ==_adag )){_dcca =1;
};case LocSelectIfBoth :if (_cebea ==SizeSelectIfLT &&(_dddcd < _efea &&_edgc < _adag ))||(_cebea ==SizeSelectIfGT &&(_dddcd > _efea &&_edgc > _adag ))||(_cebea ==SizeSelectIfLTE &&(_dddcd <=_efea &&_edgc <=_adag ))||(_cebea ==SizeSelectIfGTE &&(_dddcd >=_efea &&_edgc >=_adag ))||(_cebea ==SizeSelectIfEQ &&(_dddcd ==_efea &&_edgc ==_adag )){_dcca =1;
};};_gfee .AddInt (_dcca );};return _gfee ,nil ;};func TstImageBitmapInverseData ()[]byte {_aggea :=_cafbc .Copy ();_aggea .InverseData ();return _aggea .Data ;};const (Vanilla Color =iota ;Chocolate ;);func New (width ,height int )*Bitmap {_aac :=_cbf (width ,height );
_aac .Data =make ([]byte ,height *_aac .RowStride );return _aac ;};type Getter interface{GetBitmap ()*Bitmap ;};func TstRSymbol (t *_eg .T ,scale ...int )*Bitmap {_bgfdd ,_caff :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_e .NoError (t ,_caff );
return TstGetScaledSymbol (t ,_bgfdd ,scale ...);};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func TstFrameBitmap ()*Bitmap {return _gdc .Copy ()};type Selection struct{Height ,Width int ;Cx ,Cy int ;
Name string ;Data [][]SelectionValue ;};func (_gcce *Bitmap )clearAll ()error {return _gcce .RasterOperation (0,0,_gcce .Width ,_gcce .Height ,PixClr ,nil ,0,0);};func _caba (_gceeb *Bitmap ,_bbgc *_ed .Stack ,_aeff ,_cgfe ,_gbdda int )(_gagd *_be .Rectangle ,_ffdb error ){const _ggge ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _gceeb ==nil {return nil ,_d .Error (_ggge ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bbgc ==nil {return nil ,_d .Error (_ggge ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _gbdda {case 4:if _gagd ,_ffdb =_dggf (_gceeb ,_bbgc ,_aeff ,_cgfe );_ffdb !=nil {return nil ,_d .Wrap (_ffdb ,_ggge ,"");};return _gagd ,nil ;case 8:if _gagd ,_ffdb =_efaef (_gceeb ,_bbgc ,_aeff ,_cgfe );_ffdb !=nil {return nil ,_d .Wrap (_ffdb ,_ggge ,"");
};return _gagd ,nil ;default:return nil ,_d .Errorf (_ggge ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_gbdda );
};};func (_cccee *Bitmaps )WidthSorter ()func (_dfded ,_fgag int )bool {return func (_cfbd ,_bbdf int )bool {return _cccee .Values [_cfbd ].Width < _cccee .Values [_bbdf ].Width };};func (_bcbf *Bitmaps )GetBox (i int )(*_be .Rectangle ,error ){const _ggbb ="\u0047\u0065\u0074\u0042\u006f\u0078";
if _bcbf ==nil {return nil ,_d .Error (_ggbb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_bcbf .Boxes )-1{return nil ,_d .Errorf (_ggbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _bcbf .Boxes [i ],nil ;};func _fbd ()(_ade [256]uint32 ){for _ebc :=0;_ebc < 256;_ebc ++{if _ebc &0x01!=0{_ade [_ebc ]|=0xf;};if _ebc &0x02!=0{_ade [_ebc ]|=0xf0;};if _ebc &0x04!=0{_ade [_ebc ]|=0xf00;};if _ebc &0x08!=0{_ade [_ebc ]|=0xf000;};
if _ebc &0x10!=0{_ade [_ebc ]|=0xf0000;};if _ebc &0x20!=0{_ade [_ebc ]|=0xf00000;};if _ebc &0x40!=0{_ade [_ebc ]|=0xf000000;};if _ebc &0x80!=0{_ade [_ebc ]|=0xf0000000;};};return _ade ;};func (_cbc *Bitmap )GetChocolateData ()[]byte {if _cbc .Color ==Vanilla {_cbc .inverseData ();
};return _cbc .Data ;};func _cdfd (_fede ...MorphProcess )(_ccfc error ){const _dafe ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _befb ,_egdf int ;for _cfgc ,_caac :=range _fede {if _ccfc =_caac .verify (_cfgc ,&_befb ,&_egdf );
_ccfc !=nil {return _d .Wrap (_ccfc ,_dafe ,"");};};if _egdf !=0&&_befb !=0{return _d .Error (_dafe ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};type Point struct{X ,Y float32 ;};func _eaee (_ceg ,_bgac *Bitmap )(*Bitmap ,error ){if _bgac ==nil {return nil ,_d .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bgac ==_ceg {return _ceg ,nil ;};if _ceg ==nil {_ceg =_bgac .createTemplate ();copy (_ceg .Data ,_bgac .Data );return _ceg ,nil ;};_cadfg :=_ceg .resizeImageData (_bgac );if _cadfg !=nil {return nil ,_d .Wrap (_cadfg ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_ceg .Text =_bgac .Text ;copy (_ceg .Data ,_bgac .Data );return _ceg ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _eeef (src ,sequence ...);};func (_gedcc *Bitmap )setTwoBytes (_aced int ,_badc uint16 )error {if _aced +1> len (_gedcc .Data )-1{return _d .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_aced );
};_gedcc .Data [_aced ]=byte ((_badc &0xff00)>>8);_gedcc .Data [_aced +1]=byte (_badc &0xff);return nil ;};func (_cede *Bitmap )setEightBytes (_fdfg int ,_gccef uint64 )error {_aeg :=_cede .RowStride -(_fdfg %_cede .RowStride );if _cede .RowStride !=_cede .Width >>3{_aeg --;
};if _aeg >=8{return _cede .setEightFullBytes (_fdfg ,_gccef );};return _cede .setEightPartlyBytes (_fdfg ,_aeg ,_gccef );};func _gcea (_eadf ,_dbfa *Bitmap ,_gaga ,_cadeb int )(*Bitmap ,error ){const _cfdbd ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _dbfa ==nil {return nil ,_d .Error (_cfdbd ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gaga < 1||_cadeb < 1{return nil ,_d .Error (_cfdbd ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _gaga ==1&&_cadeb ==1{return _eaee (_eadf ,_dbfa );};if MorphBC ==SymmetricMorphBC {_edbb ,_agdg :=_cebe (_eadf ,_dbfa ,_gaga ,_cadeb );if _agdg !=nil {return nil ,_d .Wrap (_agdg ,_cfdbd ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _edbb ,nil ;};_fffd :=_aed (_gaga /2,_cadeb /2);_ddgc :=8*((_fffd +7)/8);_gab ,_dadf :=_dbfa .AddBorder (_ddgc ,0);if _dadf !=nil {return nil ,_d .Wrapf (_dadf ,_cfdbd ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_ddgc );
};var _cdga ,_gaaf *Bitmap ;if _gaga ==1||_cadeb ==1{_bdaf :=SelCreateBrick (_cadeb ,_gaga ,_cadeb /2,_gaga /2,SelHit );_cdga ,_dadf =_acgf (nil ,_gab ,_bdaf );if _dadf !=nil {return nil ,_d .Wrap (_dadf ,_cfdbd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_abaf :=SelCreateBrick (1,_gaga ,0,_gaga /2,SelHit );_gbbd ,_cfdac :=_bddgg (nil ,_gab ,_abaf );if _cfdac !=nil {return nil ,_d .Wrap (_cfdac ,_cfdbd ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_ddgd :=SelCreateBrick (_cadeb ,1,_cadeb /2,0,SelHit );_cdga ,_cfdac =_bddgg (nil ,_gbbd ,_ddgd );if _cfdac !=nil {return nil ,_d .Wrap (_cfdac ,_cfdbd ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_cfdac =_cec (_gbbd ,_cdga ,_abaf );_cfdac !=nil {return nil ,_d .Wrap (_cfdac ,_cfdbd ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_cfdac =_cec (_cdga ,_gbbd ,_ddgd );_cfdac !=nil {return nil ,_d .Wrap (_cfdac ,_cfdbd ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _gaaf ,_dadf =_cdga .RemoveBorder (_ddgc );_dadf !=nil {return nil ,_d .Wrap (_dadf ,_cfdbd ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _eadf ==nil {return _gaaf ,nil ;};if _ ,_dadf =_eaee (_eadf ,_gaaf );_dadf !=nil {return nil ,_dadf ;};return _eadf ,nil ;
};type Boxes []*_be .Rectangle ;func TstDSymbol (t *_eg .T ,scale ...int )*Bitmap {_dcedg ,_gbeee :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_e .NoError (t ,_gbeee );return TstGetScaledSymbol (t ,_dcedg ,scale ...);};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _bdbd (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_aafdf Points )XSorter ()func (_aebe ,_fbdb int )bool {return func (_ccbc ,_fefdc int )bool {return _aafdf [_ccbc ].X < _aafdf [_fefdc ].X };};func (_adb *Bitmap )And (s *Bitmap )(_cdab *Bitmap ,_eea error ){const _eec ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _adb ==nil {return nil ,_d .Error (_eec ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_d .Error (_eec ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_adb .SizesEqual (s ){_c .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_eec );
};if _cdab ,_eea =_eaee (_cdab ,_adb );_eea !=nil {return nil ,_d .Wrap (_eea ,_eec ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _eea =_cdab .RasterOperation (0,0,_cdab .Width ,_cdab .Height ,PixSrcAndDst ,s ,0,0);
_eea !=nil {return nil ,_d .Wrap (_eea ,_eec ,"");};return _cdab ,nil ;};type shift int ;func _afaac (_gfbe ,_fceb *Bitmap ,_ecfd ,_faff int )(*Bitmap ,error ){const _cafc ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _fceb ==nil {return nil ,_d .Error (_cafc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _ecfd < 1&&_faff < 1{return nil ,_d .Error (_cafc ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _ecfd ==1&&_faff ==1{return _fceb .Copy (),nil ;};if _ecfd ==1||_faff ==1{var _cggfg error ;
_acedg :=SelCreateBrick (_faff ,_ecfd ,_faff /2,_ecfd /2,SelHit );_gfbe ,_cggfg =_ffgbb (_gfbe ,_fceb ,_acedg );if _cggfg !=nil {return nil ,_d .Wrap (_cggfg ,_cafc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gfbe ,nil ;};_gafb :=SelCreateBrick (1,_ecfd ,0,_ecfd /2,SelHit );_fgad :=SelCreateBrick (_faff ,1,_faff /2,0,SelHit );_dadb ,_afae :=_cec (nil ,_fceb ,_gafb );if _afae !=nil {return nil ,_d .Wrap (_afae ,_cafc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_gfbe ,_afae =_cec (_gfbe ,_dadb ,_fgad );if _afae !=nil {return nil ,_d .Wrap (_afae ,_cafc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_afae =_bddgg (_dadb ,_gfbe ,_gafb );if _afae !=nil {return nil ,_d .Wrap (_afae ,_cafc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_afae =_bddgg (_gfbe ,_dadb ,_fgad );if _afae !=nil {return nil ,_d .Wrap (_afae ,_cafc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _gfbe ,nil ;};type SizeSelection int ;func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _fdg ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_eacc :=_cbf (width ,height );_eacc .Data =data ;if len (data )< height *_eacc .RowStride {return nil ,_d .Errorf (_fdg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_eacc .RowStride );
};return _eacc ,nil ;};func (_badfe *BitmapsArray )AddBox (box *_be .Rectangle ){_badfe .Boxes =append (_badfe .Boxes ,box )};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);type SizeComparison int ;func _fdd (_dbe ,_bgfg byte ,_cabb CombinationOperator )byte {switch _cabb {case CmbOpOr :return _bgfg |_dbe ;
case CmbOpAnd :return _bgfg &_dbe ;case CmbOpXor :return _bgfg ^_dbe ;case CmbOpXNor :return ^(_bgfg ^_dbe );case CmbOpNot :return ^(_bgfg );default:return _bgfg ;};};func (_ggd *ClassedPoints )ySortFunction ()func (_eeda int ,_ddce int )bool {return func (_bebde ,_aeba int )bool {return _ggd .YAtIndex (_bebde )< _ggd .YAtIndex (_aeba )};
};func _gafc (_efcf *Bitmap ,_cegf ,_feff ,_acbfe ,_deefg int ,_begga RasterOperator ,_dbce *Bitmap ,_dbcb ,_agge int )error {var (_ffdf bool ;_eacd bool ;_gbecd byte ;_adde int ;_ecgga int ;_eacdd int ;_bdegb int ;_deefgf bool ;_bec int ;_dagece int ;
_fface int ;_eggca bool ;_affee byte ;_acfed int ;_gebf int ;_bfcfb int ;_aaecc byte ;_gdbgb int ;_fgge int ;_cfgb uint ;_dedf uint ;_eccbb byte ;_gaaba shift ;_dcfdg bool ;_ddddg bool ;_dbafa ,_dedc int ;);if _dbcb &7!=0{_fgge =8-(_dbcb &7);};if _cegf &7!=0{_ecgga =8-(_cegf &7);
};if _fgge ==0&&_ecgga ==0{_eccbb =_geda [0];}else {if _ecgga > _fgge {_cfgb =uint (_ecgga -_fgge );}else {_cfgb =uint (8-(_fgge -_ecgga ));};_dedf =8-_cfgb ;_eccbb =_geda [_cfgb ];};if (_cegf &7)!=0{_ffdf =true ;_adde =8-(_cegf &7);_gbecd =_geda [_adde ];
_eacdd =_efcf .RowStride *_feff +(_cegf >>3);_bdegb =_dbce .RowStride *_agge +(_dbcb >>3);_gdbgb =8-(_dbcb &7);if _adde > _gdbgb {_gaaba =_febg ;if _acbfe >=_fgge {_dcfdg =true ;};}else {_gaaba =_gdff ;};};if _acbfe < _adde {_eacd =true ;_gbecd &=_bdef [8-_adde +_acbfe ];
};if !_eacd {_bec =(_acbfe -_adde )>>3;if _bec !=0{_deefgf =true ;_dagece =_efcf .RowStride *_feff +((_cegf +_ecgga )>>3);_fface =_dbce .RowStride *_agge +((_dbcb +_ecgga )>>3);};};_acfed =(_cegf +_acbfe )&7;if !(_eacd ||_acfed ==0){_eggca =true ;_affee =_bdef [_acfed ];
_gebf =_efcf .RowStride *_feff +((_cegf +_ecgga )>>3)+_bec ;_bfcfb =_dbce .RowStride *_agge +((_dbcb +_ecgga )>>3)+_bec ;if _acfed > int (_dedf ){_ddddg =true ;};};switch _begga {case PixSrc :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;
if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],_aaecc ,_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;};};if _deefgf {for _dbafa =0;
_dbafa < _deefg ;_dbafa ++{for _dedc =0;_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );_efcf .Data [_dagece +_dedc ]=_aaecc ;};_dagece +=_efcf .RowStride ;_fface +=_dbce .RowStride ;
};};if _eggca {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],_aaecc ,_affee );_gebf +=_efcf .RowStride ;
_bfcfb +=_dbce .RowStride ;};};case PixNotSrc :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;
};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],^_aaecc ,_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );
_efcf .Data [_dagece +_dedc ]=^_aaecc ;};_dagece +=_efcf .RowStride ;_fface +=_dbce .RowStride ;};};if _eggca {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );
};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],^_aaecc ,_affee );_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;};};case PixSrcOrDst :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;
if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],_aaecc |_efcf .Data [_eacdd ],_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;
};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );_efcf .Data [_dagece +_dedc ]|=_aaecc ;};_dagece +=_efcf .RowStride ;
_fface +=_dbce .RowStride ;};};if _eggca {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],_aaecc |_efcf .Data [_gebf ],_affee );
_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;};};case PixSrcAndDst :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );
};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],_aaecc &_efcf .Data [_eacdd ],_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;
_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );_efcf .Data [_dagece +_dedc ]&=_aaecc ;};_dagece +=_efcf .RowStride ;_fface +=_dbce .RowStride ;};};if _eggca {for _dbafa =0;_dbafa < _deefg ;
_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],_aaecc &_efcf .Data [_gebf ],_affee );_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;
};};case PixSrcXorDst :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;
};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],_aaecc ^_efcf .Data [_eacdd ],_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );
_efcf .Data [_dagece +_dedc ]^=_aaecc ;};_dagece +=_efcf .RowStride ;_fface +=_dbce .RowStride ;};};if _eggca {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );
};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],_aaecc ^_efcf .Data [_gebf ],_affee );_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;};};case PixNotSrcOrDst :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;
if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],^_aaecc |_efcf .Data [_eacdd ],_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;
};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );_efcf .Data [_dagece +_dedc ]|=^_aaecc ;};_dagece +=_efcf .RowStride ;
_fface +=_dbce .RowStride ;};};if _eggca {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],^_aaecc |_efcf .Data [_gebf ],_affee );
_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;};};case PixNotSrcAndDst :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );
};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],^_aaecc &_efcf .Data [_eacdd ],_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;
_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );_efcf .Data [_dagece +_dedc ]&=^_aaecc ;};_dagece +=_efcf .RowStride ;_fface +=_dbce .RowStride ;};};if _eggca {for _dbafa =0;_dbafa < _deefg ;
_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],^_aaecc &_efcf .Data [_gebf ],_affee );_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;
};};case PixSrcOrNotDst :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;
};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],_aaecc |^_efcf .Data [_eacdd ],_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );
_efcf .Data [_dagece +_dedc ]=_aaecc |^_efcf .Data [_dagece +_dedc ];};_dagece +=_efcf .RowStride ;_fface +=_dbce .RowStride ;};};if _eggca {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );
};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],_aaecc |^_efcf .Data [_gebf ],_affee );_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;};};case PixSrcAndNotDst :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;
if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],_aaecc &^_efcf .Data [_eacdd ],_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;
};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );_efcf .Data [_dagece +_dedc ]=_aaecc &^_efcf .Data [_dagece +_dedc ];
};_dagece +=_efcf .RowStride ;_fface +=_dbce .RowStride ;};};if _eggca {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],_aaecc &^_efcf .Data [_gebf ],_affee );
_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;};};case PixNotPixSrcOrDst :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );
};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],^(_aaecc |_efcf .Data [_eacdd ]),_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;
_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );_efcf .Data [_dagece +_dedc ]=^(_aaecc |_efcf .Data [_dagece +_dedc ]);};_dagece +=_efcf .RowStride ;_fface +=_dbce .RowStride ;};
};if _eggca {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],^(_aaecc |_efcf .Data [_gebf ]),_affee );
_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;};};case PixNotPixSrcAndDst :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );
};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],^(_aaecc &_efcf .Data [_eacdd ]),_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;
_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );_efcf .Data [_dagece +_dedc ]=^(_aaecc &_efcf .Data [_dagece +_dedc ]);};_dagece +=_efcf .RowStride ;_fface +=_dbce .RowStride ;};
};if _eggca {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],^(_aaecc &_efcf .Data [_gebf ]),_affee );
_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;};};case PixNotPixSrcXorDst :if _ffdf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{if _gaaba ==_febg {_aaecc =_dbce .Data [_bdegb ]<<_cfgb ;if _dcfdg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bdegb +1]>>_dedf ,_eccbb );
};}else {_aaecc =_dbce .Data [_bdegb ]>>_dedf ;};_efcf .Data [_eacdd ]=_agcb (_efcf .Data [_eacdd ],^(_aaecc ^_efcf .Data [_eacdd ]),_gbecd );_eacdd +=_efcf .RowStride ;_bdegb +=_dbce .RowStride ;};};if _deefgf {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{for _dedc =0;
_dedc < _bec ;_dedc ++{_aaecc =_agcb (_dbce .Data [_fface +_dedc ]<<_cfgb ,_dbce .Data [_fface +_dedc +1]>>_dedf ,_eccbb );_efcf .Data [_dagece +_dedc ]=^(_aaecc ^_efcf .Data [_dagece +_dedc ]);};_dagece +=_efcf .RowStride ;_fface +=_dbce .RowStride ;};
};if _eggca {for _dbafa =0;_dbafa < _deefg ;_dbafa ++{_aaecc =_dbce .Data [_bfcfb ]<<_cfgb ;if _ddddg {_aaecc =_agcb (_aaecc ,_dbce .Data [_bfcfb +1]>>_dedf ,_eccbb );};_efcf .Data [_gebf ]=_agcb (_efcf .Data [_gebf ],^(_aaecc ^_efcf .Data [_gebf ]),_affee );
_gebf +=_efcf .RowStride ;_bfcfb +=_dbce .RowStride ;};};default:_c .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_begga );
return _d .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_fegcf *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _fdff ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_fegcf .IntSlice .Size (){return 0,_d .Errorf (_fdff ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fegcf .YAtIndex (i )),nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gcag float64 ,_cebc error ){const _efc ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_d .Error (_efc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_d .Error (_efc ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_d .Error (_efc ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_agdc ,_aggc :=bm1 .Width ,bm1 .Height ;_dagef ,_fbgd :=bm2 .Width ,bm2 .Height ;
_gffge :=_efgb (_agdc -_dagef );if _gffge > maxDiffW {return 0,nil ;};_gdaee :=_efgb (_aggc -_fbgd );if _gdaee > maxDiffH {return 0,nil ;};var _cefc ,_dgdg int ;if delX >=0{_cefc =int (delX +0.5);}else {_cefc =int (delX -0.5);};if delY >=0{_dgdg =int (delY +0.5);
}else {_dgdg =int (delY -0.5);};_bfcgb :=_aed (_dgdg ,0);_eeaeg :=_aafe (_fbgd +_dgdg ,_aggc );_affef :=bm1 .RowStride *_bfcgb ;_dgff :=bm2 .RowStride *(_bfcgb -_dgdg );_gdea :=_aed (_cefc ,0);_beagd :=_aafe (_dagef +_cefc ,_agdc );_bgca :=bm2 .RowStride ;
var _aagd ,_eggc int ;if _cefc >=8{_aagd =_cefc >>3;_affef +=_aagd ;_gdea -=_aagd <<3;_beagd -=_aagd <<3;_cefc &=7;}else if _cefc <=-8{_eggc =-((_cefc +7)>>3);_dgff +=_eggc ;_bgca -=_eggc ;_cefc +=_eggc <<3;};if _gdea >=_beagd ||_bfcgb >=_eeaeg {return 0,nil ;
};_gegf :=(_beagd +7)>>3;var (_eaa ,_agcf ,_dega byte ;_badg ,_gfdb ,_dagec int ;);switch {case _cefc ==0:for _dagec =_bfcgb ;_dagec < _eeaeg ;_dagec ,_affef ,_dgff =_dagec +1,_affef +bm1 .RowStride ,_dgff +bm2 .RowStride {for _gfdb =0;_gfdb < _gegf ;_gfdb ++{_dega =bm1 .Data [_affef +_gfdb ]&bm2 .Data [_dgff +_gfdb ];
_badg +=tab [_dega ];};};case _cefc > 0:if _bgca < _gegf {for _dagec =_bfcgb ;_dagec < _eeaeg ;_dagec ,_affef ,_dgff =_dagec +1,_affef +bm1 .RowStride ,_dgff +bm2 .RowStride {_eaa ,_agcf =bm1 .Data [_affef ],bm2 .Data [_dgff ]>>uint (_cefc );_dega =_eaa &_agcf ;
_badg +=tab [_dega ];for _gfdb =1;_gfdb < _bgca ;_gfdb ++{_eaa ,_agcf =bm1 .Data [_affef +_gfdb ],(bm2 .Data [_dgff +_gfdb ]>>uint (_cefc ))|(bm2 .Data [_dgff +_gfdb -1]<<uint (8-_cefc ));_dega =_eaa &_agcf ;_badg +=tab [_dega ];};_eaa =bm1 .Data [_affef +_gfdb ];
_agcf =bm2 .Data [_dgff +_gfdb -1]<<uint (8-_cefc );_dega =_eaa &_agcf ;_badg +=tab [_dega ];};}else {for _dagec =_bfcgb ;_dagec < _eeaeg ;_dagec ,_affef ,_dgff =_dagec +1,_affef +bm1 .RowStride ,_dgff +bm2 .RowStride {_eaa ,_agcf =bm1 .Data [_affef ],bm2 .Data [_dgff ]>>uint (_cefc );
_dega =_eaa &_agcf ;_badg +=tab [_dega ];for _gfdb =1;_gfdb < _gegf ;_gfdb ++{_eaa =bm1 .Data [_affef +_gfdb ];_agcf =(bm2 .Data [_dgff +_gfdb ]>>uint (_cefc ))|(bm2 .Data [_dgff +_gfdb -1]<<uint (8-_cefc ));_dega =_eaa &_agcf ;_badg +=tab [_dega ];};};
};default:if _gegf < _bgca {for _dagec =_bfcgb ;_dagec < _eeaeg ;_dagec ,_affef ,_dgff =_dagec +1,_affef +bm1 .RowStride ,_dgff +bm2 .RowStride {for _gfdb =0;_gfdb < _gegf ;_gfdb ++{_eaa =bm1 .Data [_affef +_gfdb ];_agcf =bm2 .Data [_dgff +_gfdb ]<<uint (-_cefc );
_agcf |=bm2 .Data [_dgff +_gfdb +1]>>uint (8+_cefc );_dega =_eaa &_agcf ;_badg +=tab [_dega ];};};}else {for _dagec =_bfcgb ;_dagec < _eeaeg ;_dagec ,_affef ,_dgff =_dagec +1,_affef +bm1 .RowStride ,_dgff +bm2 .RowStride {for _gfdb =0;_gfdb < _gegf -1;
_gfdb ++{_eaa =bm1 .Data [_affef +_gfdb ];_agcf =bm2 .Data [_dgff +_gfdb ]<<uint (-_cefc );_agcf |=bm2 .Data [_dgff +_gfdb +1]>>uint (8+_cefc );_dega =_eaa &_agcf ;_badg +=tab [_dega ];};_eaa =bm1 .Data [_affef +_gfdb ];_agcf =bm2 .Data [_dgff +_gfdb ]<<uint (-_cefc );
_dega =_eaa &_agcf ;_badg +=tab [_dega ];};};};_gcag =float64 (_badg )*float64 (_badg )/(float64 (area1 )*float64 (area2 ));return _gcag ,nil ;};func (_afc *Bitmap )equivalent (_bceg *Bitmap )bool {if _afc ==_bceg {return true ;};if !_afc .SizesEqual (_bceg ){return false ;
};_eaba :=_efb (_afc ,_bceg ,CmbOpXor );_ddf :=_afc .countPixels ();_dbab :=int (0.25*float32 (_ddf ));if _eaba .thresholdPixelSum (_dbab ){return false ;};var (_caaf [9][9]int ;_afg [18][9]int ;_gafg [9][18]int ;_gadf int ;_bdfe int ;);_gfed :=9;_dfde :=_afc .Height /_gfed ;
_bdcg :=_afc .Width /_gfed ;_dgg ,_abf :=_dfde /2,_bdcg /2;if _dfde < _bdcg {_dgg =_bdcg /2;_abf =_dfde /2;};_cebg :=float64 (_dgg )*float64 (_abf )*_bd .Pi ;_ffa :=int (float64 (_dfde *_bdcg /2)*0.9);_bbfc :=int (float64 (_bdcg *_dfde /2)*0.9);for _bdfc :=0;
_bdfc < _gfed ;_bdfc ++{_gbe :=_bdcg *_bdfc +_gadf ;var _egba int ;if _bdfc ==_gfed -1{_gadf =0;_egba =_afc .Width ;}else {_egba =_gbe +_bdcg ;if ((_afc .Width -_gadf )%_gfed )> 0{_gadf ++;_egba ++;};};for _dgdf :=0;_dgdf < _gfed ;_dgdf ++{_fgc :=_dfde *_dgdf +_bdfe ;
var _faf int ;if _dgdf ==_gfed -1{_bdfe =0;_faf =_afc .Height ;}else {_faf =_fgc +_dfde ;if (_afc .Height -_bdfe )%_gfed > 0{_bdfe ++;_faf ++;};};var _fga ,_cba ,_eggd ,_dcae int ;_dbbc :=(_gbe +_egba )/2;_fabc :=(_fgc +_faf )/2;for _gac :=_gbe ;_gac < _egba ;
_gac ++{for _gaaa :=_fgc ;_gaaa < _faf ;_gaaa ++{if _eaba .GetPixel (_gac ,_gaaa ){if _gac < _dbbc {_fga ++;}else {_cba ++;};if _gaaa < _fabc {_dcae ++;}else {_eggd ++;};};};};_caaf [_bdfc ][_dgdf ]=_fga +_cba ;_afg [_bdfc *2][_dgdf ]=_fga ;_afg [_bdfc *2+1][_dgdf ]=_cba ;
_gafg [_bdfc ][_dgdf *2]=_dcae ;_gafg [_bdfc ][_dgdf *2+1]=_eggd ;};};for _bad :=0;_bad < _gfed *2-1;_bad ++{for _adca :=0;_adca < (_gfed -1);_adca ++{var _dddbg int ;for _gfff :=0;_gfff < 2;_gfff ++{for _dbae :=0;_dbae < 2;_dbae ++{_dddbg +=_afg [_bad +_gfff ][_adca +_dbae ];
};};if _dddbg > _bbfc {return false ;};};};for _eggdb :=0;_eggdb < (_gfed -1);_eggdb ++{for _cgc :=0;_cgc < ((_gfed *2)-1);_cgc ++{var _eba int ;for _bdgg :=0;_bdgg < 2;_bdgg ++{for _ffca :=0;_ffca < 2;_ffca ++{_eba +=_gafg [_eggdb +_bdgg ][_cgc +_ffca ];
};};if _eba > _ffa {return false ;};};};for _eaec :=0;_eaec < (_gfed -2);_eaec ++{for _edab :=0;_edab < (_gfed -2);_edab ++{var _aged ,_cfd int ;for _gag :=0;_gag < 3;_gag ++{for _eacf :=0;_eacf < 3;_eacf ++{if _gag ==_eacf {_aged +=_caaf [_eaec +_gag ][_edab +_eacf ];
};if (2-_gag )==_eacf {_cfd +=_caaf [_eaec +_gag ][_edab +_eacf ];};};};if _aged > _bbfc ||_cfd > _bbfc {return false ;};};};for _ace :=0;_ace < (_gfed -1);_ace ++{for _faeg :=0;_faeg < (_gfed -1);_faeg ++{var _gcad int ;for _fcad :=0;_fcad < 2;_fcad ++{for _gaefe :=0;
_gaefe < 2;_gaefe ++{_gcad +=_caaf [_ace +_fcad ][_faeg +_gaefe ];};};if float64 (_gcad )> _cebg {return false ;};};};return true ;};func _acgf (_fcbe ,_bbga *Bitmap ,_acaab *Selection )(*Bitmap ,error ){const _fgfgf ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";
var _abgb error ;if _fcbe ,_abgb =_acgd (_fcbe ,_bbga ,_acaab );_abgb !=nil {return nil ,_abgb ;};_edef ,_abgb :=_bddgg (nil ,_bbga ,_acaab );if _abgb !=nil {return nil ,_d .Wrap (_abgb ,_fgfgf ,"");};if _ ,_abgb =_cec (_fcbe ,_edef ,_acaab );_abgb !=nil {return nil ,_d .Wrap (_abgb ,_fgfgf ,"");
};return _fcbe ,nil ;};func (_adgg *byWidth )Swap (i ,j int ){_adgg .Values [i ],_adgg .Values [j ]=_adgg .Values [j ],_adgg .Values [i ];if _adgg .Boxes !=nil {_adgg .Boxes [i ],_adgg .Boxes [j ]=_adgg .Boxes [j ],_adgg .Boxes [i ];};};func (_geggb *Bitmaps )AddBox (box *_be .Rectangle ){_geggb .Boxes =append (_geggb .Boxes ,box )};
func (_eadc *Bitmap )setBit (_afad int ){_eadc .Data [(_afad >>3)]|=0x80>>uint (_afad &7)};func _aed (_dcfd ,_acfd int )int {if _dcfd > _acfd {return _dcfd ;};return _acfd ;};func TstCSymbol (t *_eg .T )*Bitmap {t .Helper ();_ccegd :=New (6,6);_e .NoError (t ,_ccegd .SetPixel (1,0,1));
_e .NoError (t ,_ccegd .SetPixel (2,0,1));_e .NoError (t ,_ccegd .SetPixel (3,0,1));_e .NoError (t ,_ccegd .SetPixel (4,0,1));_e .NoError (t ,_ccegd .SetPixel (0,1,1));_e .NoError (t ,_ccegd .SetPixel (5,1,1));_e .NoError (t ,_ccegd .SetPixel (0,2,1));
_e .NoError (t ,_ccegd .SetPixel (0,3,1));_e .NoError (t ,_ccegd .SetPixel (0,4,1));_e .NoError (t ,_ccegd .SetPixel (5,4,1));_e .NoError (t ,_ccegd .SetPixel (1,5,1));_e .NoError (t ,_ccegd .SetPixel (2,5,1));_e .NoError (t ,_ccegd .SetPixel (3,5,1));
_e .NoError (t ,_ccegd .SetPixel (4,5,1));return _ccegd ;};func (_edgg *byHeight )Len ()int {return len (_edgg .Values )};func MakePixelSumTab8 ()[]int {return _beac ()};func (_fgd *Bitmap )setAll ()error {_bcec :=_bdbd (_fgd ,0,0,_fgd .Width ,_fgd .Height ,PixSet ,nil ,0,0);
if _bcec !=nil {return _d .Wrap (_bcec ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);type SelectionValue int ;func _efb (_afde ,_caaa *Bitmap ,_gbaga CombinationOperator )*Bitmap {_bba :=New (_afde .Width ,_afde .Height );
for _cfb :=0;_cfb < len (_bba .Data );_cfb ++{_bba .Data [_cfb ]=_fdd (_afde .Data [_cfb ],_caaa .Data [_cfb ],_gbaga );};return _bba ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _geaad ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_d .Error (_geaad ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_d .Error (_geaad ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_d .Error (_geaad ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_d .Error (_geaad ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_d .Error (_geaad ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_dfe ,_aaba :=bm1 .Width ,bm1 .Height ;_afba ,_ccg :=bm2 .Width ,bm2 .Height ;if _ed .Abs (_dfe -_afba )> maxDiffW {return false ,nil ;};if _ed .Abs (_aaba -_ccg )> maxDiffH {return false ,nil ;};_geeb :=int (delX +_ed .Sign (delX )*0.5);_ffgg :=int (delY +_ed .Sign (delY )*0.5);
_fdcf :=int (_bd .Ceil (_bd .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_cgdea :=bm2 .RowStride ;_cgcd :=_aed (_ffgg ,0);_cgbf :=_aafe (_ccg +_ffgg ,_aaba );_cfg :=bm1 .RowStride *_cgcd ;_baf :=bm2 .RowStride *(_cgcd -_ffgg );
var _bgdg int ;if _cgbf <=_aaba {_bgdg =downcount [_cgbf -1];};_bgfb :=_aed (_geeb ,0);_ggcc :=_aafe (_afba +_geeb ,_dfe );var _fcaac ,_cbgc int ;if _geeb >=8{_fcaac =_geeb >>3;_cfg +=_fcaac ;_bgfb -=_fcaac <<3;_ggcc -=_fcaac <<3;_geeb &=7;}else if _geeb <=-8{_cbgc =-((_geeb +7)>>3);
_baf +=_cbgc ;_cgdea -=_cbgc ;_geeb +=_cbgc <<3;};var (_acd ,_faea ,_fbbf int ;_fbac ,_bbg ,_ffde byte ;);if _bgfb >=_ggcc ||_cgcd >=_cgbf {return false ,nil ;};_abcb :=(_ggcc +7)>>3;switch {case _geeb ==0:for _faea =_cgcd ;_faea < _cgbf ;_faea ,_cfg ,_baf =_faea +1,_cfg +bm1 .RowStride ,_baf +bm2 .RowStride {for _fbbf =0;
_fbbf < _abcb ;_fbbf ++{_fbac =bm1 .Data [_cfg +_fbbf ]&bm2 .Data [_baf +_fbbf ];_acd +=tab [_fbac ];};if _acd >=_fdcf {return true ,nil ;};if _fedb :=_acd +downcount [_faea ]-_bgdg ;_fedb < _fdcf {return false ,nil ;};};case _geeb > 0&&_cgdea < _abcb :for _faea =_cgcd ;
_faea < _cgbf ;_faea ,_cfg ,_baf =_faea +1,_cfg +bm1 .RowStride ,_baf +bm2 .RowStride {_bbg =bm1 .Data [_cfg ];_ffde =bm2 .Data [_baf ]>>uint (_geeb );_fbac =_bbg &_ffde ;_acd +=tab [_fbac ];for _fbbf =1;_fbbf < _cgdea ;_fbbf ++{_bbg =bm1 .Data [_cfg +_fbbf ];
_ffde =bm2 .Data [_baf +_fbbf ]>>uint (_geeb )|bm2 .Data [_baf +_fbbf -1]<<uint (8-_geeb );_fbac =_bbg &_ffde ;_acd +=tab [_fbac ];};_bbg =bm1 .Data [_cfg +_fbbf ];_ffde =bm2 .Data [_baf +_fbbf -1]<<uint (8-_geeb );_fbac =_bbg &_ffde ;_acd +=tab [_fbac ];
if _acd >=_fdcf {return true ,nil ;}else if _acd +downcount [_faea ]-_bgdg < _fdcf {return false ,nil ;};};case _geeb > 0&&_cgdea >=_abcb :for _faea =_cgcd ;_faea < _cgbf ;_faea ,_cfg ,_baf =_faea +1,_cfg +bm1 .RowStride ,_baf +bm2 .RowStride {_bbg =bm1 .Data [_cfg ];
_ffde =bm2 .Data [_baf ]>>uint (_geeb );_fbac =_bbg &_ffde ;_acd +=tab [_fbac ];for _fbbf =1;_fbbf < _abcb ;_fbbf ++{_bbg =bm1 .Data [_cfg +_fbbf ];_ffde =bm2 .Data [_baf +_fbbf ]>>uint (_geeb );_ffde |=bm2 .Data [_baf +_fbbf -1]<<uint (8-_geeb );_fbac =_bbg &_ffde ;
_acd +=tab [_fbac ];};if _acd >=_fdcf {return true ,nil ;}else if _acd +downcount [_faea ]-_bgdg < _fdcf {return false ,nil ;};};case _abcb < _cgdea :for _faea =_cgcd ;_faea < _cgbf ;_faea ,_cfg ,_baf =_faea +1,_cfg +bm1 .RowStride ,_baf +bm2 .RowStride {for _fbbf =0;
_fbbf < _abcb ;_fbbf ++{_bbg =bm1 .Data [_cfg +_fbbf ];_ffde =bm2 .Data [_baf +_fbbf ]<<uint (-_geeb );_ffde |=bm2 .Data [_baf +_fbbf +1]>>uint (8+_geeb );_fbac =_bbg &_ffde ;_acd +=tab [_fbac ];};if _acd >=_fdcf {return true ,nil ;}else if _fgfg :=_acd +downcount [_faea ]-_bgdg ;
_fgfg < _fdcf {return false ,nil ;};};case _cgdea >=_abcb :for _faea =_cgcd ;_faea < _cgbf ;_faea ,_cfg ,_baf =_faea +1,_cfg +bm1 .RowStride ,_baf +bm2 .RowStride {for _fbbf =0;_fbbf < _abcb ;_fbbf ++{_bbg =bm1 .Data [_cfg +_fbbf ];_ffde =bm2 .Data [_baf +_fbbf ]<<uint (-_geeb );
_ffde |=bm2 .Data [_baf +_fbbf +1]>>uint (8+_geeb );_fbac =_bbg &_ffde ;_acd +=tab [_fbac ];};_bbg =bm1 .Data [_cfg +_fbbf ];_ffde =bm2 .Data [_baf +_fbbf ]<<uint (-_geeb );_fbac =_bbg &_ffde ;_acd +=tab [_fbac ];if _acd >=_fdcf {return true ,nil ;}else if _acd +downcount [_faea ]-_bgdg < _fdcf {return false ,nil ;
};};};_aee :=float32 (_acd )*float32 (_acd )/(float32 (area1 )*float32 (area2 ));if _aee >=scoreThreshold {_c .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_acd ,_fdcf ,_aee ,scoreThreshold );
};return false ,nil ;};func (_fce *Bitmap )Equals (s *Bitmap )bool {if len (_fce .Data )!=len (s .Data )||_fce .Width !=s .Width ||_fce .Height !=s .Height {return false ;};for _daf :=0;_daf < _fce .Height ;_daf ++{_ffb :=_daf *_fce .RowStride ;for _dfa :=0;
_dfa < _fce .RowStride ;_dfa ++{if _fce .Data [_ffb +_dfa ]!=s .Data [_ffb +_dfa ]{return false ;};};};return true ;};func (_bbc *Bitmap )InverseData (){_bbc .inverseData ()};func _baed (_bgeg ,_gfgb *Bitmap ,_dgab ,_fgac int )(_adgff error ){const _bdagb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_agee ,_cdefa ,_bcg ,_fgeab int ;_ebba ,_fdec ,_aaed ,_deafg ,_ggbd ,_gdd ,_dfgef ,_fefbb byte ;);for _agee =0;_agee < _dgab ;_agee ++{_bcg =_agee *_bgeg .RowStride ;_fgeab =_agee *_gfgb .RowStride ;for _cdefa =0;_cdefa < _fgac ;_cdefa ++{if _ebba ,_adgff =_bgeg .GetByte (_bcg +_cdefa );
_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _fdec ,_adgff =_gfgb .GetByte (_fgeab +_cdefa );_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _agee > 0{if _aaed ,_adgff =_bgeg .GetByte (_bcg -_bgeg .RowStride +_cdefa );_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_ebba |=_aaed |(_aaed <<1)|(_aaed >>1);if _cdefa > 0{if _fefbb ,_adgff =_bgeg .GetByte (_bcg -_bgeg .RowStride +_cdefa -1);
_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_ebba |=_fefbb <<7;};if _cdefa < _fgac -1{if _fefbb ,_adgff =_bgeg .GetByte (_bcg -_bgeg .RowStride +_cdefa +1);
_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_ebba |=_fefbb >>7;};};if _cdefa > 0{if _deafg ,_adgff =_bgeg .GetByte (_bcg +_cdefa -1);_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u006a\u0020\u003e \u0030");
};_ebba |=_deafg <<7;};_ebba &=_fdec ;if _ebba ==0||^_ebba ==0{if _adgff =_bgeg .SetByte (_bcg +_cdefa ,_ebba );_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};
};for {_dfgef =_ebba ;_ebba =(_ebba |(_ebba >>1)|(_ebba <<1))&_fdec ;if (_ebba ^_dfgef )==0{if _adgff =_bgeg .SetByte (_bcg +_cdefa ,_ebba );_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _agee =_dgab -1;_agee >=0;_agee --{_bcg =_agee *_bgeg .RowStride ;_fgeab =_agee *_gfgb .RowStride ;for _cdefa =_fgac -1;_cdefa >=0;_cdefa --{if _ebba ,_adgff =_bgeg .GetByte (_bcg +_cdefa );_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _fdec ,_adgff =_gfgb .GetByte (_fgeab +_cdefa );_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _agee < _dgab -1{if _ggbd ,_adgff =_bgeg .GetByte (_bcg +_bgeg .RowStride +_cdefa );
_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_ebba |=_ggbd |(_ggbd <<1)|_ggbd >>1;if _cdefa > 0{if _fefbb ,_adgff =_bgeg .GetByte (_bcg +_bgeg .RowStride +_cdefa -1);
_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_ebba |=_fefbb <<7;};if _cdefa < _fgac -1{if _fefbb ,_adgff =_bgeg .GetByte (_bcg +_bgeg .RowStride +_cdefa +1);
_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_ebba |=_fefbb >>7;};};if _cdefa < _fgac -1{if _gdd ,_adgff =_bgeg .GetByte (_bcg +_cdefa +1);_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_ebba |=_gdd >>7;};_ebba &=_fdec ;if _ebba ==0||(^_ebba )==0{if _adgff =_bgeg .SetByte (_bcg +_cdefa ,_ebba );_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_dfgef =_ebba ;
_ebba =(_ebba |(_ebba >>1)|(_ebba <<1))&_fdec ;if (_ebba ^_dfgef )==0{if _adgff =_bgeg .SetByte (_bcg +_cdefa ,_ebba );_adgff !=nil {return _d .Wrap (_adgff ,_bdagb ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func _efaef (_dedcg *Bitmap ,_deeca *_ed .Stack ,_cecf ,_dacbb int )(_dgdfg *_be .Rectangle ,_ebdf error ){const _bede ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _dedcg ==nil {return nil ,_d .Error (_bede ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _deeca ==nil {return nil ,_d .Error (_bede ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_cdcef ,_cacc :=_dedcg .Width ,_dedcg .Height ;_dbfdc :=_cdcef -1;_fegaa :=_cacc -1;if _cecf < 0||_cecf > _dbfdc ||_dacbb < 0||_dacbb > _fegaa ||!_dedcg .GetPixel (_cecf ,_dacbb ){return nil ,nil ;
};_dbdec :=_be .Rect (100000,100000,0,0);if _ebdf =_deaff (_deeca ,_cecf ,_cecf ,_dacbb ,1,_fegaa ,&_dbdec );_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ebdf =_deaff (_deeca ,_cecf ,_cecf ,_dacbb +1,-1,_fegaa ,&_dbdec );
_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_dbdec .Min .X ,_dbdec .Max .X =_cecf ,_cecf ;_dbdec .Min .Y ,_dbdec .Max .Y =_dacbb ,_dacbb ;var (_cagdd *fillSegment ;
_abef int ;);for _deeca .Len ()> 0{if _cagdd ,_ebdf =_dggcf (_deeca );_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"");};_dacbb =_cagdd ._cdae ;for _cecf =_cagdd ._aacbf -1;_cecf >=0&&_dedcg .GetPixel (_cecf ,_dacbb );_cecf --{if _ebdf =_dedcg .SetPixel (_cecf ,_dacbb ,0);
_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _cecf >=_cagdd ._aacbf -1{for {for _cecf ++;_cecf <=_cagdd ._caaad +1&&_cecf <=_dbfdc &&!_dedcg .GetPixel (_cecf ,_dacbb );_cecf ++{};_abef =_cecf ;if !(_cecf <=_cagdd ._caaad +1&&_cecf <=_dbfdc ){break ;
};for ;_cecf <=_dbfdc &&_dedcg .GetPixel (_cecf ,_dacbb );_cecf ++{if _ebdf =_dedcg .SetPixel (_cecf ,_dacbb ,0);_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ebdf =_deaff (_deeca ,_abef ,_cecf -1,_cagdd ._cdae ,_cagdd ._adeg ,_fegaa ,&_dbdec );
_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cecf > _cagdd ._caaad {if _ebdf =_deaff (_deeca ,_cagdd ._caaad +1,_cecf -1,_cagdd ._cdae ,-_cagdd ._adeg ,_fegaa ,&_dbdec );_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_abef =_cecf +1;if _abef < _cagdd ._aacbf {if _ebdf =_deaff (_deeca ,_abef ,_cagdd ._aacbf -1,_cagdd ._cdae ,-_cagdd ._adeg ,_fegaa ,&_dbdec );_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_cecf =_cagdd ._aacbf ;for {for ;_cecf <=_dbfdc &&_dedcg .GetPixel (_cecf ,_dacbb );_cecf ++{if _ebdf =_dedcg .SetPixel (_cecf ,_dacbb ,0);_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ebdf =_deaff (_deeca ,_abef ,_cecf -1,_cagdd ._cdae ,_cagdd ._adeg ,_fegaa ,&_dbdec );
_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cecf > _cagdd ._caaad {if _ebdf =_deaff (_deeca ,_cagdd ._caaad +1,_cecf -1,_cagdd ._cdae ,-_cagdd ._adeg ,_fegaa ,&_dbdec );_ebdf !=nil {return nil ,_d .Wrap (_ebdf ,_bede ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _cecf ++;_cecf <=_cagdd ._caaad +1&&_cecf <=_dbfdc &&!_dedcg .GetPixel (_cecf ,_dacbb );_cecf ++{};_abef =_cecf ;if !(_cecf <=_cagdd ._caaad +1&&_cecf <=_dbfdc ){break ;};};};_dbdec .Max .X ++;_dbdec .Max .Y ++;return &_dbdec ,nil ;};func _fffe (_dddd ,_eed *Bitmap ,_fab int ,_cag []byte ,_dff int )(_ag error ){const _gba ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_dag ,_dage ,_eede ,_geb ,_fdcg ,_gegb ,_baa ,_fcaf int ;_ecbe ,_dbdg ,_bff ,_dfga uint32 ;_ae ,_aec byte ;_beaa uint16 ;);_fae :=make ([]byte ,4);_cea :=make ([]byte ,4);for _eede =0;_eede < _dddd .Height -1;_eede ,_geb =_eede +2,_geb +1{_dag =_eede *_dddd .RowStride ;
_dage =_geb *_eed .RowStride ;for _fdcg ,_gegb =0,0;_fdcg < _dff ;_fdcg ,_gegb =_fdcg +4,_gegb +1{for _baa =0;_baa < 4;_baa ++{_fcaf =_dag +_fdcg +_baa ;if _fcaf <=len (_dddd .Data )-1&&_fcaf < _dag +_dddd .RowStride {_fae [_baa ]=_dddd .Data [_fcaf ];
}else {_fae [_baa ]=0x00;};_fcaf =_dag +_dddd .RowStride +_fdcg +_baa ;if _fcaf <=len (_dddd .Data )-1&&_fcaf < _dag +(2*_dddd .RowStride ){_cea [_baa ]=_dddd .Data [_fcaf ];}else {_cea [_baa ]=0x00;};};_ecbe =_fc .BigEndian .Uint32 (_fae );_dbdg =_fc .BigEndian .Uint32 (_cea );
_bff =_ecbe &_dbdg ;_bff |=_bff <<1;_dfga =_ecbe |_dbdg ;_dfga &=_dfga <<1;_dbdg =_bff &_dfga ;_dbdg &=0xaaaaaaaa;_ecbe =_dbdg |(_dbdg <<7);_ae =byte (_ecbe >>24);_aec =byte ((_ecbe >>8)&0xff);_fcaf =_dage +_gegb ;if _fcaf +1==len (_eed .Data )-1||_fcaf +1>=_dage +_eed .RowStride {if _ag =_eed .SetByte (_fcaf ,_cag [_ae ]);
_ag !=nil {return _d .Wrapf (_ag ,_gba ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fcaf );};}else {_beaa =(uint16 (_cag [_ae ])<<8)|uint16 (_cag [_aec ]);if _ag =_eed .setTwoBytes (_fcaf ,_beaa );_ag !=nil {return _d .Wrapf (_ag ,_gba ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fcaf );
};_gegb ++;};};};return nil ;};func TstVSymbol (t *_eg .T ,scale ...int )*Bitmap {_afdf ,_bdec :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_e .NoError (t ,_bdec );return TstGetScaledSymbol (t ,_afdf ,scale ...);};func (_accd *Bitmap )ToImage ()_be .Image {_bfbc ,_dad :=_dd .NewImage (_accd .Width ,_accd .Height ,1,1,_accd .Data ,nil ,nil );
if _dad !=nil {_c .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dad );
};return _bfbc ;};func (_aaaa *Bitmap )GetPixel (x ,y int )bool {_gaef :=_aaaa .GetByteIndex (x ,y );_abc :=_aaaa .GetBitOffset (x );_ffga :=uint (7-_abc );if _gaef > len (_aaaa .Data )-1{_c .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_aaaa );
return false ;};if (_aaaa .Data [_gaef ]>>_ffga )&0x01>=1{return true ;};return false ;};func (_ede *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _ede .Copy (),nil ;};_edc ,_agc :=_ede .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _agc !=nil {return nil ,_d .Wrap (_agc ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _edc ,nil ;};func TstTSymbol (t *_eg .T ,scale ...int )*Bitmap {_aafcc ,_gbeg :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_e .NoError (t ,_gbeg );
return TstGetScaledSymbol (t ,_aafcc ,scale ...);};func (_fffa Points )GetGeometry (i int )(_eeec ,_bbaf float32 ,_gbee error ){if i > len (_fffa )-1{return 0,0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_dcac :=_fffa [i ];return _dcac .X ,_dcac .Y ,nil ;};func _dgfdg (_egaf *Bitmap ,_eecdc ,_egfb int ,_aefcb ,_gbeb int ,_dfcd RasterOperator ){var (_ecdef int ;_fgaa byte ;_fdeb ,_cccc int ;_bfed int ;);_cgbd :=_aefcb >>3;_edbc :=_aefcb &7;if _edbc > 0{_fgaa =_bdef [_edbc ];
};_ecdef =_egaf .RowStride *_egfb +(_eecdc >>3);switch _dfcd {case PixClr :for _fdeb =0;_fdeb < _gbeb ;_fdeb ++{_bfed =_ecdef +_fdeb *_egaf .RowStride ;for _cccc =0;_cccc < _cgbd ;_cccc ++{_egaf .Data [_bfed ]=0x0;_bfed ++;};if _edbc > 0{_egaf .Data [_bfed ]=_agcb (_egaf .Data [_bfed ],0x0,_fgaa );
};};case PixSet :for _fdeb =0;_fdeb < _gbeb ;_fdeb ++{_bfed =_ecdef +_fdeb *_egaf .RowStride ;for _cccc =0;_cccc < _cgbd ;_cccc ++{_egaf .Data [_bfed ]=0xff;_bfed ++;};if _edbc > 0{_egaf .Data [_bfed ]=_agcb (_egaf .Data [_bfed ],0xff,_fgaa );};};case PixNotDst :for _fdeb =0;
_fdeb < _gbeb ;_fdeb ++{_bfed =_ecdef +_fdeb *_egaf .RowStride ;for _cccc =0;_cccc < _cgbd ;_cccc ++{_egaf .Data [_bfed ]=^_egaf .Data [_bfed ];_bfed ++;};if _edbc > 0{_egaf .Data [_bfed ]=_agcb (_egaf .Data [_bfed ],^_egaf .Data [_bfed ],_fgaa );};};};
};func TstWordBitmap (t *_eg .T ,scale ...int )*Bitmap {_edcg :=1;if len (scale )> 0{_edcg =scale [0];};_adedc :=3;_efgcc :=9+7+15+2*_adedc ;_geec :=5+_adedc +5;_cceb :=New (_efgcc *_edcg ,_geec *_edcg );_cbcb :=&Bitmaps {};var _feed *int ;_adedc *=_edcg ;
_gcedc :=0;_feed =&_gcedc ;_bffb :=0;_bcdd :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,1*_edcg );_bcdd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,_adedc );_bcdd =TstISymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,1*_edcg );
_bcdd =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,_adedc );_bcdd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,1*_edcg );_bcdd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,1*_edcg );
_bcdd =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,0);*_feed =0;_bffb =5*_edcg +_adedc ;_bcdd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,1*_edcg );_bcdd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,_adedc );
_bcdd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,1*_edcg );_bcdd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,1*_edcg );_bcdd =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,1*_edcg );
_bcdd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,1*_edcg );_bcdd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cbcb ,_bcdd ,_feed ,_bffb ,0);TstWriteSymbols (t ,_cbcb ,_cceb );return _cceb ;};func _eeef (_fggf *Bitmap ,_bdeb ...MorphProcess )(_ccdd *Bitmap ,_acbb error ){const _dfafa ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _fggf ==nil {return nil ,_d .Error (_dfafa ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_bdeb )==0{return nil ,_d .Error (_dfafa ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _acbb =_cdfd (_bdeb ...);
_acbb !=nil {return nil ,_d .Wrap (_acbb ,_dfafa ,"");};var _gcda ,_dedb ,_caafg int ;_ccdd =_fggf .Copy ();for _ ,_ccgbb :=range _bdeb {switch _ccgbb .Operation {case MopDilation :_gcda ,_dedb =_ccgbb .getWidthHeight ();_ccdd ,_acbb =DilateBrick (nil ,_ccdd ,_gcda ,_dedb );
if _acbb !=nil {return nil ,_d .Wrap (_acbb ,_dfafa ,"");};case MopErosion :_gcda ,_dedb =_ccgbb .getWidthHeight ();_ccdd ,_acbb =_gafa (nil ,_ccdd ,_gcda ,_dedb );if _acbb !=nil {return nil ,_d .Wrap (_acbb ,_dfafa ,"");};case MopOpening :_gcda ,_dedb =_ccgbb .getWidthHeight ();
_ccdd ,_acbb =_afaac (nil ,_ccdd ,_gcda ,_dedb );if _acbb !=nil {return nil ,_d .Wrap (_acbb ,_dfafa ,"");};case MopClosing :_gcda ,_dedb =_ccgbb .getWidthHeight ();_ccdd ,_acbb =_gcea (nil ,_ccdd ,_gcda ,_dedb );if _acbb !=nil {return nil ,_d .Wrap (_acbb ,_dfafa ,"");
};case MopRankBinaryReduction :_ccdd ,_acbb =_gfce (_ccdd ,_ccgbb .Arguments ...);if _acbb !=nil {return nil ,_d .Wrap (_acbb ,_dfafa ,"");};case MopReplicativeBinaryExpansion :_ccdd ,_acbb =_gfa (_ccdd ,_ccgbb .Arguments [0]);if _acbb !=nil {return nil ,_d .Wrap (_acbb ,_dfafa ,"");
};case MopAddBorder :_caafg =_ccgbb .Arguments [0];_ccdd ,_acbb =_ccdd .AddBorder (_caafg ,0);if _acbb !=nil {return nil ,_d .Wrap (_acbb ,_dfafa ,"");};default:return nil ,_d .Error (_dfafa ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _caafg > 0{_ccdd ,_acbb =_ccdd .RemoveBorder (_caafg );if _acbb !=nil {return nil ,_d .Wrap (_acbb ,_dfafa ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _ccdd ,nil ;};func (_fafde *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _dggd ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _fafde ==nil {return nil ,_d .Error (_dggd ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_d .Error (_dggd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_cbcd :=len (_fafde .Values );_bbbae :=&Bitmaps {Values :make ([]*Bitmap ,_cbcd ),Boxes :make ([]*_be .Rectangle ,_cbcd )};var (_dfdb ,_egcc *Bitmap ;_gbcb *_be .Rectangle ;_fbbc error ;);for _gefed :=0;_gefed < _cbcd ;_gefed ++{if _dfdb ,_fbbc =_fafde .GetBitmap (_gefed );
_fbbc !=nil {return nil ,_d .Wrap (_fbbc ,_dggd ,"");};if _gbcb ,_fbbc =_fafde .GetBox (_gefed );_fbbc !=nil {return nil ,_d .Wrap (_fbbc ,_dggd ,"");};if _egcc ,_fbbc =s .clipRectangle (_gbcb ,nil );_fbbc !=nil {return nil ,_d .Wrap (_fbbc ,_dggd ,"");
};if _egcc ,_fbbc =_egcc .And (_dfdb );_fbbc !=nil {return nil ,_d .Wrap (_fbbc ,_dggd ,"");};_bbbae .Values [_gefed ]=_egcc ;_bbbae .Boxes [_gefed ]=_gbcb ;};return _bbbae ,nil ;};func (_gcba *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _bdbd (_gcba ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};type CombinationOperator int ;func (_gceaf CombinationOperator )String ()string {var _gbf string ;switch _gceaf {case CmbOpOr :_gbf ="\u004f\u0052";case CmbOpAnd :_gbf ="\u0041\u004e\u0044";case CmbOpXor :_gbf ="\u0058\u004f\u0052";case CmbOpXNor :_gbf ="\u0058\u004e\u004f\u0052";
case CmbOpReplace :_gbf ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_gbf ="\u004e\u004f\u0054";};return _gbf ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _efe ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_bbf :=_cbf (width ,height );_bbf .Data =data ;if _bfcb :=((width *height )+7)>>3;len (data )< _bfcb {return nil ,_d .Errorf (_efe ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_bfcb );
};if _fcbbg :=_bbf .addPadBits ();_fcbbg !=nil {return nil ,_d .Wrap (_fcbbg ,_efe ,"");};return _bbf ,nil ;};func init (){const _febgg ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_gdc =New (50,40);var _fdgg error ;_gdc ,_fdgg =_gdc .AddBorder (2,1);if _fdgg !=nil {panic (_d .Wrap (_fdgg ,_febgg ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_cafbc ,_fdgg =NewWithData (50,22,_cebeb );if _fdgg !=nil {panic (_d .Wrap (_fdgg ,_febgg ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func (_faef *Boxes )Get (i int )(*_be .Rectangle ,error ){const _gfdgb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _faef ==nil {return nil ,_d .Error (_gfdgb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_faef )-1{return nil ,_d .Errorf (_gfdgb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_faef )[i ],nil ;};const (SelDontCare SelectionValue =iota ;
SelHit ;SelMiss ;);func (_ecgg *Bitmap )setEightFullBytes (_geff int ,_bdfd uint64 )error {if _geff +7> len (_ecgg .Data )-1{return _d .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ecgg .Data [_geff ]=byte ((_bdfd &0xff00000000000000)>>56);_ecgg .Data [_geff +1]=byte ((_bdfd &0xff000000000000)>>48);_ecgg .Data [_geff +2]=byte ((_bdfd &0xff0000000000)>>40);_ecgg .Data [_geff +3]=byte ((_bdfd &0xff00000000)>>32);_ecgg .Data [_geff +4]=byte ((_bdfd &0xff000000)>>24);
_ecgg .Data [_geff +5]=byte ((_bdfd &0xff0000)>>16);_ecgg .Data [_geff +6]=byte ((_bdfd &0xff00)>>8);_ecgg .Data [_geff +7]=byte (_bdfd &0xff);return nil ;};func (_gad *Bitmap )SetDefaultPixel (){for _cdf :=range _gad .Data {_gad .Data [_cdf ]=byte (0xff);
};};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _affe ,_abde int ;_dbbb :=src .RowStride -1;if x < 0{_abde =-x ;x =0;}else if x +src .Width > dst .Width {_dbbb -=src .Width +x -dst .Width ;};if y < 0{_affe =-y ;y =0;
_abde +=src .RowStride ;_dbbb +=src .RowStride ;}else if y +src .Height > dst .Height {_affe =src .Height +y -dst .Height ;};var (_adcc int ;_aea error ;);_dbda :=x &0x07;_affeg :=8-_dbda ;_adfb :=src .Width &0x07;_fbad :=_affeg -_adfb ;_eeg :=_affeg &0x07!=0;
_gbca :=src .Width <=((_dbbb -_abde )<<3)+_affeg ;_eabbb :=dst .GetByteIndex (x ,y );_dbfd :=_affe +dst .Height ;if src .Height > _dbfd {_adcc =_dbfd ;}else {_adcc =src .Height ;};switch {case !_eeg :_aea =_efeg (src ,dst ,_affe ,_adcc ,_eabbb ,_abde ,_dbbb ,op );
case _gbca :_aea =_ggee (src ,dst ,_affe ,_adcc ,_eabbb ,_abde ,_dbbb ,_fbad ,_dbda ,_affeg ,op );default:_aea =_cfcc (src ,dst ,_affe ,_adcc ,_eabbb ,_abde ,_dbbb ,_fbad ,_dbda ,_affeg ,op ,_adfb );};return _aea ;};var _ _b .Interface =&ClassedPoints {};
func (_ddbe *Boxes )Add (box *_be .Rectangle )error {if _ddbe ==nil {return _d .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_ddbe =append (*_ddbe ,box );
return nil ;};func (_eaafe *Bitmaps )Size ()int {return len (_eaafe .Values )};func TstISymbol (t *_eg .T ,scale ...int )*Bitmap {_cadfe ,_abbfd :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_e .NoError (t ,_abbfd );return TstGetScaledSymbol (t ,_cadfe ,scale ...);
};func _bae (_bebe ,_eeac ,_ece *Bitmap )(*Bitmap ,error ){const _geac ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _eeac ==nil {return nil ,_d .Error (_geac ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ece ==nil {return nil ,_d .Error (_geac ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};var _ffdg error ;switch {case _bebe ==_eeac :if _ffdg =_bebe .RasterOperation (0,0,_eeac .Width ,_eeac .Height ,PixNotSrcAndDst ,_ece ,0,0);_ffdg !=nil {return nil ,_d .Wrap (_ffdg ,_geac ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _bebe ==_ece :if _ffdg =_bebe .RasterOperation (0,0,_eeac .Width ,_eeac .Height ,PixNotSrcAndDst ,_eeac ,0,0);
_ffdg !=nil {return nil ,_d .Wrap (_ffdg ,_geac ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_bebe ,_ffdg =_eaee (_bebe ,_eeac );if _ffdg !=nil {return nil ,_d .Wrap (_ffdg ,_geac ,"");};if _ffdg =_bebe .RasterOperation (0,0,_eeac .Width ,_eeac .Height ,PixNotSrcAndDst ,_ece ,0,0);
_ffdg !=nil {return nil ,_d .Wrap (_ffdg ,_geac ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _bebe ,nil ;};func _efff (_abcbg ,_gdbda *Bitmap ,_bbag ,_cdeg int )(_gaaac error ){const _aaaf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_acfc ,_gdga ,_dfggb ,_bggc int ;_egbc ,_ceffd ,_dacb ,_gccea ,_bdfed ,_adbf ,_cggeb byte ;);for _acfc =0;_acfc < _bbag ;_acfc ++{_dfggb =_acfc *_abcbg .RowStride ;_bggc =_acfc *_gdbda .RowStride ;for _gdga =0;_gdga < _cdeg ;_gdga ++{_egbc ,_gaaac =_abcbg .GetByte (_dfggb +_gdga );
if _gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_ceffd ,_gaaac =_gdbda .GetByte (_bggc +_gdga );if _gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _acfc > 0{_dacb ,_gaaac =_abcbg .GetByte (_dfggb -_abcbg .RowStride +_gdga );if _gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"\u0069\u0020\u003e \u0030");};_egbc |=_dacb ;};if _gdga > 0{_gccea ,_gaaac =_abcbg .GetByte (_dfggb +_gdga -1);if _gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"\u006a\u0020\u003e \u0030");
};_egbc |=_gccea <<7;};_egbc &=_ceffd ;if _egbc ==0||(^_egbc )==0{if _gaaac =_abcbg .SetByte (_dfggb +_gdga ,_egbc );_gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_cggeb =_egbc ;_egbc =(_egbc |(_egbc >>1)|(_egbc <<1))&_ceffd ;if (_egbc ^_cggeb )==0{if _gaaac =_abcbg .SetByte (_dfggb +_gdga ,_egbc );_gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _acfc =_bbag -1;_acfc >=0;_acfc --{_dfggb =_acfc *_abcbg .RowStride ;_bggc =_acfc *_gdbda .RowStride ;for _gdga =_cdeg -1;_gdga >=0;_gdga --{if _egbc ,_gaaac =_abcbg .GetByte (_dfggb +_gdga );_gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _ceffd ,_gaaac =_gdbda .GetByte (_bggc +_gdga );_gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _acfc < _bbag -1{if _bdfed ,_gaaac =_abcbg .GetByte (_dfggb +_abcbg .RowStride +_gdga );
_gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_egbc |=_bdfed ;};if _gdga < _cdeg -1{if _adbf ,_gaaac =_abcbg .GetByte (_dfggb +_gdga +1);_gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_egbc |=_adbf >>7;};_egbc &=_ceffd ;if _egbc ==0||(^_egbc )==0{if _gaaac =_abcbg .SetByte (_dfggb +_gdga ,_egbc );_gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_cggeb =_egbc ;_egbc =(_egbc |(_egbc >>1)|(_egbc <<1))&_ceffd ;if (_egbc ^_cggeb )==0{if _gaaac =_abcbg .SetByte (_dfggb +_gdga ,_egbc );_gaaac !=nil {return _d .Wrap (_gaaac ,_aaaf ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_ggbc *Selection )setOrigin (_gfedd ,_fbaeg int ){_ggbc .Cy ,_ggbc .Cx =_gfedd ,_fbaeg };func _aafe (_gbb ,_gcgf int )int {if _gbb < _gcgf {return _gbb ;};return _gcgf ;};func TstASymbol (t *_eg .T )*Bitmap {t .Helper ();
_gada :=New (6,6);_e .NoError (t ,_gada .SetPixel (1,0,1));_e .NoError (t ,_gada .SetPixel (2,0,1));_e .NoError (t ,_gada .SetPixel (3,0,1));_e .NoError (t ,_gada .SetPixel (4,0,1));_e .NoError (t ,_gada .SetPixel (5,1,1));_e .NoError (t ,_gada .SetPixel (1,2,1));
_e .NoError (t ,_gada .SetPixel (2,2,1));_e .NoError (t ,_gada .SetPixel (3,2,1));_e .NoError (t ,_gada .SetPixel (4,2,1));_e .NoError (t ,_gada .SetPixel (5,2,1));_e .NoError (t ,_gada .SetPixel (0,3,1));_e .NoError (t ,_gada .SetPixel (5,3,1));_e .NoError (t ,_gada .SetPixel (0,4,1));
_e .NoError (t ,_gada .SetPixel (5,4,1));_e .NoError (t ,_gada .SetPixel (1,5,1));_e .NoError (t ,_gada .SetPixel (2,5,1));_e .NoError (t ,_gada .SetPixel (3,5,1));_e .NoError (t ,_gada .SetPixel (4,5,1));_e .NoError (t ,_gada .SetPixel (5,5,1));return _gada ;
};func (_fggc MorphProcess )verify (_afcd int ,_aca ,_cagd *int )error {const _deef ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _fggc .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_fggc .Arguments )!=2{return _d .Error (_deef ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_agb ,_cade :=_fggc .getWidthHeight ();if _agb <=0||_cade <=0{return _d .Error (_deef ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_gcde :=len (_fggc .Arguments );*_aca +=_gcde ;if _gcde < 1||_gcde > 4{return _d .Error (_deef ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _fbfc :=0;_fbfc < _gcde ;_fbfc ++{if _fggc .Arguments [_fbfc ]< 1||_fggc .Arguments [_fbfc ]> 4{return _d .Error (_deef ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_fggc .Arguments )==0{return _d .Error (_deef ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_acaa :=_fggc .Arguments [0];if _acaa !=2&&_acaa !=4&&_acaa !=8{return _d .Error (_deef ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_aca -=_bccfc [_acaa /4];case MopAddBorder :if len (_fggc .Arguments )==0{return _d .Error (_deef ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egaa :=_fggc .Arguments [0];if _afcd > 0{return _d .Error (_deef ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _egaa < 1{return _d .Error (_deef ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_cagd =_egaa ;};return nil ;};func (_aagg MorphProcess )getWidthHeight ()(_geag ,_fecc int ){return _aagg .Arguments [0],_aagg .Arguments [1];
};func (_eace *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _badf ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _bgcg :=_eace .validateIntSlice ();_bgcg !=nil {return nil ,_d .Wrap (_bgcg ,_badf ,"");
};if _eace .IntSlice .Size ()==0{return nil ,_d .Error (_badf ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_eace .SortByY ();var (_egc []*ClassedPoints ;_bcacc int ;);_ebefa :=-1;var _dfca *ClassedPoints ;
for _abb :=0;_abb < len (_eace .IntSlice );_abb ++{_bcacc =int (_eace .YAtIndex (_abb ));if _bcacc !=_ebefa {_dfca =&ClassedPoints {Points :_eace .Points };_ebefa =_bcacc ;_egc =append (_egc ,_dfca );};_dfca .IntSlice =append (_dfca .IntSlice ,_eace .IntSlice [_abb ]);
};for _ ,_egdfb :=range _egc {_egdfb .SortByX ();};return _egc ,nil ;};func TstWordBitmapWithSpaces (t *_eg .T ,scale ...int )*Bitmap {_gbda :=1;if len (scale )> 0{_gbda =scale [0];};_gafga :=3;_dbga :=9+7+15+2*_gafga +2*_gafga ;_cdag :=5+_gafga +5+2*_gafga ;
_bdaa :=New (_dbga *_gbda ,_cdag *_gbda );_ebec :=&Bitmaps {};var _dgaba *int ;_gafga *=_gbda ;_cgbg :=_gafga ;_dgaba =&_cgbg ;_ddgf :=_gafga ;_bbcb :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,1*_gbda );_bbcb =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,_gafga );_bbcb =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,1*_gbda );_bbcb =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,_gafga );_bbcb =TstNSymbol (t ,scale ...);
TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,1*_gbda );_bbcb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,1*_gbda );_bbcb =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,0);*_dgaba =_gafga ;_ddgf =5*_gbda +_gafga ;
_bbcb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,1*_gbda );_bbcb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,_gafga );_bbcb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,1*_gbda );
_bbcb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,1*_gbda );_bbcb =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,1*_gbda );_bbcb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,1*_gbda );
_bbcb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ebec ,_bbcb ,_dgaba ,_ddgf ,0);TstWriteSymbols (t ,_ebec ,_bdaa );return _bdaa ;};func (_egafe *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _cfdgf ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _egafe ==nil {return nil ,_d .Error (_cfdgf ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_egafe .Values )-1{return nil ,_d .Errorf (_cfdgf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _egafe .Values [i ],nil ;};func _dcbge (_bcab *Bitmap ,_gacd *Bitmap ,_bece int )(_fefe error ){const _ffce ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_efbd :=_aafe (_bcab .Height ,_gacd .Height );
_eaae :=_aafe (_bcab .RowStride ,_gacd .RowStride );switch _bece {case 4:_fefe =_efff (_bcab ,_gacd ,_efbd ,_eaae );case 8:_fefe =_baed (_bcab ,_gacd ,_efbd ,_eaae );default:return _d .Errorf (_ffce ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_bece );
};if _fefe !=nil {return _d .Wrap (_fefe ,_ffce ,"");};return nil ;};func _fdfd (_edeff *Bitmap ,_cbggc *Bitmap ,_bgce *Selection ,_fag **Bitmap )(*Bitmap ,error ){const _bdag ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _cbggc ==nil {return nil ,_d .Error (_bdag ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _bgce ==nil {return nil ,_d .Error (_bdag ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_gfaa ,_bacb :=_bgce .Height ,_bgce .Width ;if _gfaa ==0||_bacb ==0{return nil ,_d .Error (_bdag ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _edeff ==nil {_edeff =_cbggc .createTemplate ();
*_fag =_cbggc ;return _edeff ,nil ;};_edeff .Width =_cbggc .Width ;_edeff .Height =_cbggc .Height ;_edeff .RowStride =_cbggc .RowStride ;_edeff .Color =_cbggc .Color ;_edeff .Data =make ([]byte ,_cbggc .RowStride *_cbggc .Height );if _edeff ==_cbggc {*_fag =_cbggc .Copy ();
}else {*_fag =_cbggc ;};return _edeff ,nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);