//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_fdb "encoding/binary";_fc "github.com/stretchr/testify/require";_c "github.com/unidoc/unipdf/v3/common";_ab "github.com/unidoc/unipdf/v3/internal/bitwise";_aac "github.com/unidoc/unipdf/v3/internal/imageutil";_ff "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_a "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_fce "image";_b "math";_fd "sort";_e "strings";_aa "testing";);type RasterOperator int ;func _ffffa (_agbg ,_bgea *Bitmap ,_agfac ,_aecf int )(_daffg error ){const _bfga ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_fgfb ,_afea ,_aabae ,_degff int ;_bbeb ,_bcae ,_bdae ,_bdeb ,_fdgfg ,_fagd ,_bgbc ,_cfeag byte ;);for _fgfb =0;_fgfb < _agfac ;_fgfb ++{_aabae =_fgfb *_agbg .RowStride ;_degff =_fgfb *_bgea .RowStride ;for _afea =0;_afea < _aecf ;_afea ++{if _bbeb ,_daffg =_agbg .GetByte (_aabae +_afea );_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _bcae ,_daffg =_bgea .GetByte (_degff +_afea );_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _fgfb > 0{if _bdae ,_daffg =_agbg .GetByte (_aabae -_agbg .RowStride +_afea );_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_bbeb |=_bdae |(_bdae <<1)|(_bdae >>1);if _afea > 0{if _cfeag ,_daffg =_agbg .GetByte (_aabae -_agbg .RowStride +_afea -1);_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_bbeb |=_cfeag <<7;};if _afea < _aecf -1{if _cfeag ,_daffg =_agbg .GetByte (_aabae -_agbg .RowStride +_afea +1);_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_bbeb |=_cfeag >>7;};};if _afea > 0{if _bdeb ,_daffg =_agbg .GetByte (_aabae +_afea -1);_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u006a\u0020\u003e \u0030");};_bbeb |=_bdeb <<7;};_bbeb &=_bcae ;if _bbeb ==0||^_bbeb ==0{if _daffg =_agbg .SetByte (_aabae +_afea ,_bbeb );_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_bgbc =_bbeb ;_bbeb =(_bbeb |(_bbeb >>1)|(_bbeb <<1))&_bcae ;if (_bbeb ^_bgbc )==0{if _daffg =_agbg .SetByte (_aabae +_afea ,_bbeb );_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _fgfb =_agfac -1;_fgfb >=0;_fgfb --{_aabae =_fgfb *_agbg .RowStride ;_degff =_fgfb *_bgea .RowStride ;for _afea =_aecf -1;_afea >=0;_afea --{if _bbeb ,_daffg =_agbg .GetByte (_aabae +_afea );_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _bcae ,_daffg =_bgea .GetByte (_degff +_afea );_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _fgfb < _agfac -1{if _fdgfg ,_daffg =_agbg .GetByte (_aabae +_agbg .RowStride +_afea );_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_bbeb |=_fdgfg |(_fdgfg <<1)|_fdgfg >>1;if _afea > 0{if _cfeag ,_daffg =_agbg .GetByte (_aabae +_agbg .RowStride +_afea -1);_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_bbeb |=_cfeag <<7;};if _afea < _aecf -1{if _cfeag ,_daffg =_agbg .GetByte (_aabae +_agbg .RowStride +_afea +1);_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");};_bbeb |=_cfeag >>7;};};if _afea < _aecf -1{if _fagd ,_daffg =_agbg .GetByte (_aabae +_afea +1);_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");};_bbeb |=_fagd >>7;};_bbeb &=_bcae ;if _bbeb ==0||(^_bbeb )==0{if _daffg =_agbg .SetByte (_aabae +_afea ,_bbeb );_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_bgbc =_bbeb ;_bbeb =(_bbeb |(_bbeb >>1)|(_bbeb <<1))&_bcae ;if (_bbeb ^_bgbc )==0{if _daffg =_agbg .SetByte (_aabae +_afea ,_bbeb );_daffg !=nil {return _a .Wrap (_daffg ,_bfga ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");};break ;};};};};return nil ;};func NewClassedPoints (points *Points ,classes _ff .IntSlice )(*ClassedPoints ,error ){const _daa ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_a .Error (_daa ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_a .Error (_daa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_abdab :=&ClassedPoints {Points :points ,IntSlice :classes };if _eeeg :=_abdab .validateIntSlice ();_eeeg !=nil {return nil ,_a .Wrap (_eeeg ,_daa ,"");};return _abdab ,nil ;};func (_dcc *Bitmap )GetPixel (x ,y int )bool {_dfbg :=_dcc .GetByteIndex (x ,y );_gaee :=_dcc .GetBitOffset (x );_ccd :=uint (7-_gaee );if _dfbg > len (_dcc .Data )-1{_c .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_dcc );return false ;};if (_dcc .Data [_dfbg ]>>_ccd )&0x01>=1{return true ;};return false ;};func TstCSymbol (t *_aa .T )*Bitmap {t .Helper ();_gaed :=New (6,6);_fc .NoError (t ,_gaed .SetPixel (1,0,1));_fc .NoError (t ,_gaed .SetPixel (2,0,1));_fc .NoError (t ,_gaed .SetPixel (3,0,1));_fc .NoError (t ,_gaed .SetPixel (4,0,1));_fc .NoError (t ,_gaed .SetPixel (0,1,1));_fc .NoError (t ,_gaed .SetPixel (5,1,1));_fc .NoError (t ,_gaed .SetPixel (0,2,1));_fc .NoError (t ,_gaed .SetPixel (0,3,1));_fc .NoError (t ,_gaed .SetPixel (0,4,1));_fc .NoError (t ,_gaed .SetPixel (5,4,1));_fc .NoError (t ,_gaed .SetPixel (1,5,1));_fc .NoError (t ,_gaed .SetPixel (2,5,1));_fc .NoError (t ,_gaed .SetPixel (3,5,1));_fc .NoError (t ,_gaed .SetPixel (4,5,1));return _gaed ;};func Extract (roi _fce .Rectangle ,src *Bitmap )(*Bitmap ,error ){_gdg :=New (roi .Dx (),roi .Dy ());_bdbb :=roi .Min .X &0x07;_cbfdc :=8-_bdbb ;_degc :=uint (8-_gdg .Width &0x07);_abea :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_ebg :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_cfc :=_gdg .RowStride ==_ebg +1-_abea ;var _dbbf int ;for _ddgc :=roi .Min .Y ;_ddgc < roi .Max .Y ;_ddgc ++{_bfcfc :=_abea ;_gbab :=_dbbf ;switch {case _abea ==_ebg :_cba ,_afccd :=src .GetByte (_bfcfc );if _afccd !=nil {return nil ,_afccd ;};_cba <<=uint (_bdbb );_afccd =_gdg .SetByte (_gbab ,_bgge (_degc ,_cba ));if _afccd !=nil {return nil ,_afccd ;};case _bdbb ==0:for _afaf :=_abea ;_afaf <=_ebg ;_afaf ++{_fcbe ,_eabf :=src .GetByte (_bfcfc );if _eabf !=nil {return nil ,_eabf ;};_bfcfc ++;if _afaf ==_ebg &&_cfc {_fcbe =_bgge (_degc ,_fcbe );};_eabf =_gdg .SetByte (_gbab ,_fcbe );if _eabf !=nil {return nil ,_eabf ;};_gbab ++;};default:_bgefb :=_bce (src ,_gdg ,uint (_bdbb ),uint (_cbfdc ),_degc ,_abea ,_ebg ,_cfc ,_bfcfc ,_gbab );if _bgefb !=nil {return nil ,_bgefb ;};};_abea +=src .RowStride ;_ebg +=src .RowStride ;_dbbf +=_gdg .RowStride ;};return _gdg ,nil ;};func (_cdae *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _babg (_cdae ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_ceba float64 ,_dbbb error ){const _becc ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";if bm1 ==nil ||bm2 ==nil {return _ceba ,_a .Error (_becc ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _ceba ,_a .Error (_becc ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if area1 ==0||area2 ==0{return _ceba ,_a .Error (_becc ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_cfad ,_fcad :=bm1 .Width ,bm1 .Height ;_bgcba ,_efae :=bm2 .Width ,bm2 .Height ;if _fcdf (_cfad -_bgcba )> maxDiffW {return 0,nil ;};if _fcdf (_fcad -_efae )> maxDiffH {return 0,nil ;};var _eafg ,_adfe int ;if delX >=0{_eafg =int (delX +0.5);}else {_eafg =int (delX -0.5);};if delY >=0{_adfe =int (delY +0.5);}else {_adfe =int (delY -0.5);};_acfa :=bm1 .createTemplate ();if _dbbb =_acfa .RasterOperation (_eafg ,_adfe ,_bgcba ,_efae ,PixSrc ,bm2 ,0,0);_dbbb !=nil {return _ceba ,_a .Wrap (_dbbb ,_becc ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _dbbb =_acfa .RasterOperation (0,0,_cfad ,_fcad ,PixSrcAndDst ,bm1 ,0,0);_dbbb !=nil {return _ceba ,_a .Wrap (_dbbb ,_becc ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_edbb :=_acfa .countPixels ();_ceba =float64 (_edbb )*float64 (_edbb )/(float64 (area1 )*float64 (area2 ));return _ceba ,nil ;};func (_gaeb *Bitmap )setPadBits (_eae int ){_faaa :=8-_gaeb .Width %8;if _faaa ==8{return ;};_ccfgb :=_gaeb .Width /8;_ceec :=_edgeg [_faaa ];if _eae ==0{_ceec ^=_ceec ;};var _bgb int ;for _agf :=0;_agf < _gaeb .Height ;_agf ++{_bgb =_agf *_gaeb .RowStride +_ccfgb ;if _eae ==0{_gaeb .Data [_bgb ]&=_ceec ;}else {_gaeb .Data [_bgb ]|=_ceec ;};};};func _bd (_eg *Bitmap ,_fg ,_cb int )(*Bitmap ,error ){const _cgf ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _eg ==nil {return nil ,_a .Error (_cgf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fg <=0||_cb <=0{return nil ,_a .Error (_cgf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _fg ==_cb {if _fg ==1{_bgc ,_ced :=_caad (nil ,_eg );if _ced !=nil {return nil ,_a .Wrap (_ced ,_cgf ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _bgc ,nil ;};if _fg ==2||_fg ==4||_fg ==8{_db ,_bed :=_fdg (_eg ,_fg );if _bed !=nil {return nil ,_a .Wrap (_bed ,_cgf ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _db ,nil ;};};_fgc :=_fg *_eg .Width ;_fa :=_cb *_eg .Height ;_cef :=New (_fgc ,_fa );_dff :=_cef .RowStride ;var (_bca ,_dfb ,_acf ,_bfe ,_bdg int ;_cbc byte ;_ada error ;);for _dfb =0;_dfb < _eg .Height ;_dfb ++{_bca =_cb *_dfb *_dff ;for _acf =0;_acf < _eg .Width ;_acf ++{if _beb :=_eg .GetPixel (_acf ,_dfb );_beb {_bdg =_fg *_acf ;for _bfe =0;_bfe < _fg ;_bfe ++{_cef .setBit (_bca *8+_bdg +_bfe );};};};for _bfe =1;_bfe < _cb ;_bfe ++{_bfa :=_bca +_bfe *_dff ;for _egf :=0;_egf < _dff ;_egf ++{if _cbc ,_ada =_cef .GetByte (_bca +_egf );_ada !=nil {return nil ,_a .Wrapf (_ada ,_cgf ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_bfe );};if _ada =_cef .SetByte (_bfa +_egf ,_cbc );_ada !=nil {return nil ,_a .Wrap (_ada ,_cgf ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _cef ,nil ;};func (_gfg *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_gfg .Width ,Height :_gfg .Height ,RowStride :_gfg .RowStride ,Color :_gfg .Color ,Text :_gfg .Text ,BitmapNumber :_gfg .BitmapNumber ,Special :_gfg .Special ,Data :make ([]byte ,len (_gfg .Data ))};};func (_gad *ClassedPoints )Len ()int {return _gad .IntSlice .Size ()};func TstFrameBitmap ()*Bitmap {return _ffbfd .Copy ()};func _bfaea (_ebfa ,_gadf *Bitmap ,_facd ,_efea int )(_gdgd error ){const _ddfc ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_beegc ,_gfbf ,_ffbcd ,_bdfcd int ;_acdg ,_ggdd ,_fabge ,_decc ,_cfee ,_ffea ,_ddega byte ;);for _beegc =0;_beegc < _facd ;_beegc ++{_ffbcd =_beegc *_ebfa .RowStride ;_bdfcd =_beegc *_gadf .RowStride ;for _gfbf =0;_gfbf < _efea ;_gfbf ++{_acdg ,_gdgd =_ebfa .GetByte (_ffbcd +_gfbf );if _gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_ggdd ,_gdgd =_gadf .GetByte (_bdfcd +_gfbf );if _gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _beegc > 0{_fabge ,_gdgd =_ebfa .GetByte (_ffbcd -_ebfa .RowStride +_gfbf );if _gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"\u0069\u0020\u003e \u0030");};_acdg |=_fabge ;};if _gfbf > 0{_decc ,_gdgd =_ebfa .GetByte (_ffbcd +_gfbf -1);if _gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"\u006a\u0020\u003e \u0030");};_acdg |=_decc <<7;};_acdg &=_ggdd ;if _acdg ==0||(^_acdg )==0{if _gdgd =_ebfa .SetByte (_ffbcd +_gfbf ,_acdg );_gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_ddega =_acdg ;_acdg =(_acdg |(_acdg >>1)|(_acdg <<1))&_ggdd ;if (_acdg ^_ddega )==0{if _gdgd =_ebfa .SetByte (_ffbcd +_gfbf ,_acdg );_gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _beegc =_facd -1;_beegc >=0;_beegc --{_ffbcd =_beegc *_ebfa .RowStride ;_bdfcd =_beegc *_gadf .RowStride ;for _gfbf =_efea -1;_gfbf >=0;_gfbf --{if _acdg ,_gdgd =_ebfa .GetByte (_ffbcd +_gfbf );_gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _ggdd ,_gdgd =_gadf .GetByte (_bdfcd +_gfbf );_gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _beegc < _facd -1{if _cfee ,_gdgd =_ebfa .GetByte (_ffbcd +_ebfa .RowStride +_gfbf );_gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_acdg |=_cfee ;};if _gfbf < _efea -1{if _ffea ,_gdgd =_ebfa .GetByte (_ffbcd +_gfbf +1);_gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_acdg |=_ffea >>7;};_acdg &=_ggdd ;if _acdg ==0||(^_acdg )==0{if _gdgd =_ebfa .SetByte (_ffbcd +_gfbf ,_acdg );_gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");};continue ;};for {_ddega =_acdg ;_acdg =(_acdg |(_acdg >>1)|(_acdg <<1))&_ggdd ;if (_acdg ^_ddega )==0{if _gdgd =_ebfa .SetByte (_ffbcd +_gfbf ,_acdg );_gdgd !=nil {return _a .Wrap (_gdgd ,_ddfc ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");};break ;};};};};return nil ;};func (_bged *Boxes )makeSizeIndicator (_dgaf ,_bbf int ,_fadc LocationFilter ,_bbgg SizeComparison )*_ff .NumSlice {_dega :=&_ff .NumSlice {};var _ccbd ,_cbdd ,_aec int ;for _ ,_edcd :=range *_bged {_ccbd =0;_cbdd ,_aec =_edcd .Dx (),_edcd .Dy ();switch _fadc {case LocSelectWidth :if (_bbgg ==SizeSelectIfLT &&_cbdd < _dgaf )||(_bbgg ==SizeSelectIfGT &&_cbdd > _dgaf )||(_bbgg ==SizeSelectIfLTE &&_cbdd <=_dgaf )||(_bbgg ==SizeSelectIfGTE &&_cbdd >=_dgaf ){_ccbd =1;};case LocSelectHeight :if (_bbgg ==SizeSelectIfLT &&_aec < _bbf )||(_bbgg ==SizeSelectIfGT &&_aec > _bbf )||(_bbgg ==SizeSelectIfLTE &&_aec <=_bbf )||(_bbgg ==SizeSelectIfGTE &&_aec >=_bbf ){_ccbd =1;};case LocSelectIfEither :if (_bbgg ==SizeSelectIfLT &&(_aec < _bbf ||_cbdd < _dgaf ))||(_bbgg ==SizeSelectIfGT &&(_aec > _bbf ||_cbdd > _dgaf ))||(_bbgg ==SizeSelectIfLTE &&(_aec <=_bbf ||_cbdd <=_dgaf ))||(_bbgg ==SizeSelectIfGTE &&(_aec >=_bbf ||_cbdd >=_dgaf )){_ccbd =1;};case LocSelectIfBoth :if (_bbgg ==SizeSelectIfLT &&(_aec < _bbf &&_cbdd < _dgaf ))||(_bbgg ==SizeSelectIfGT &&(_aec > _bbf &&_cbdd > _dgaf ))||(_bbgg ==SizeSelectIfLTE &&(_aec <=_bbf &&_cbdd <=_dgaf ))||(_bbgg ==SizeSelectIfGTE &&(_aec >=_bbf &&_cbdd >=_dgaf )){_ccbd =1;};};_dega .AddInt (_ccbd );};return _dega ;};func (_dcfgd *ClassedPoints )xSortFunction ()func (_gceg int ,_ccad int )bool {return func (_ccdf ,_gcad int )bool {return _dcfgd .XAtIndex (_ccdf )< _dcfgd .XAtIndex (_gcad )};};var (_gcdcd =_dbf ();_cagdg =_cde ();_ebd =_gdd (););func init (){for _cbe :=0;_cbe < 256;_cbe ++{_dfde [_cbe ]=uint8 (_cbe &0x1)+(uint8 (_cbe >>1)&0x1)+(uint8 (_cbe >>2)&0x1)+(uint8 (_cbe >>3)&0x1)+(uint8 (_cbe >>4)&0x1)+(uint8 (_cbe >>5)&0x1)+(uint8 (_cbe >>6)&0x1)+(uint8 (_cbe >>7)&0x1);};};func (_aaeed *Bitmaps )selectByIndicator (_fccf *_ff .NumSlice )(_gggbg *Bitmaps ,_degbe error ){const _cdaee ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _aaeed ==nil {return nil ,_a .Error (_cdaee ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _fccf ==nil {return nil ,_a .Error (_cdaee ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_aaeed .Values )==0{return _aaeed ,nil ;};if len (*_fccf )!=len (_aaeed .Values ){return nil ,_a .Errorf (_cdaee ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_fccf ),len (_aaeed .Values ));};var _fgee ,_cecfg ,_fddfd int ;for _cecfg =0;_cecfg < len (*_fccf );_cecfg ++{if _fgee ,_degbe =_fccf .GetInt (_cecfg );_degbe !=nil {return nil ,_a .Wrap (_degbe ,_cdaee ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _fgee ==1{_fddfd ++;};};if _fddfd ==len (_aaeed .Values ){return _aaeed ,nil ;};_gggbg =&Bitmaps {};_gecc :=len (_aaeed .Values )==len (_aaeed .Boxes );for _cecfg =0;_cecfg < len (*_fccf );_cecfg ++{if _fgee =int ((*_fccf )[_cecfg ]);_fgee ==0{continue ;};_gggbg .Values =append (_gggbg .Values ,_aaeed .Values [_cecfg ]);if _gecc {_gggbg .Boxes =append (_gggbg .Boxes ,_aaeed .Boxes [_cecfg ]);};};return _gggbg ,nil ;};func (_dgg *Bitmap )Zero ()bool {_fac :=_dgg .Width /8;_cfd :=_dgg .Width &7;var _dggg byte ;if _cfd !=0{_dggg =byte (0xff<<uint (8-_cfd ));};var _gbac ,_gdbc ,_cfe int ;for _gdbc =0;_gdbc < _dgg .Height ;_gdbc ++{_gbac =_dgg .RowStride *_gdbc ;for _cfe =0;_cfe < _fac ;_cfe ,_gbac =_cfe +1,_gbac +1{if _dgg .Data [_gbac ]!=0{return false ;};};if _cfd > 0{if _dgg .Data [_gbac ]&_dggg !=0{return false ;};};};return true ;};type Point struct{X ,Y float32 ;};func _cdfg (_agdbfd ,_baga *Bitmap ,_aeab *Selection )(*Bitmap ,error ){const _aae ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _dcfe ,_bacg int ;if _baga ==nil {return nil ,_a .Error (_aae ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _aeab ==nil {return nil ,_a .Error (_aae ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_dcfe =_aeab .Width ;_bacg =_aeab .Height ;if _dcfe ==0||_bacg ==0{return nil ,_a .Error (_aae ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _agdbfd ==nil {return _baga .createTemplate (),nil ;};if _bgcbd :=_agdbfd .resizeImageData (_baga );_bgcbd !=nil {return nil ,_bgcbd ;};return _agdbfd ,nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func _gdd ()(_ge [256]uint64 ){for _de :=0;_de < 256;_de ++{if _de &0x01!=0{_ge [_de ]|=0xff;};if _de &0x02!=0{_ge [_de ]|=0xff00;};if _de &0x04!=0{_ge [_de ]|=0xff0000;};if _de &0x08!=0{_ge [_de ]|=0xff000000;};if _de &0x10!=0{_ge [_de ]|=0xff00000000;};if _de &0x20!=0{_ge [_de ]|=0xff0000000000;};if _de &0x40!=0{_ge [_de ]|=0xff000000000000;};if _de &0x80!=0{_ge [_de ]|=0xff00000000000000;};};return _ge ;};func _dbacb (_bbae *Bitmap ,_agcf int )(*Bitmap ,error ){const _efeg ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _bbae ==nil {return nil ,_a .Error (_efeg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _agcf <=0{return nil ,_a .Error (_efeg ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _agcf ==1{_ffefd ,_dgafd :=_caad (nil ,_bbae );if _dgafd !=nil {return nil ,_a .Wrap (_dgafd ,_efeg ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _ffefd ,nil ;};_cddf ,_cgag :=_bd (_bbae ,_agcf ,_agcf );if _cgag !=nil {return nil ,_a .Wrap (_cgag ,_efeg ,"");};return _cddf ,nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_dfc *Bitmap )countPixels ()int {var (_dec int ;_dffb uint8 ;_gbdb byte ;_gdaf int ;);_agdb :=_dfc .RowStride ;_afga :=uint (_dfc .Width &0x07);if _afga !=0{_dffb =uint8 ((0xff<<(8-_afga ))&0xff);_agdb --;};for _afcc :=0;_afcc < _dfc .Height ;_afcc ++{for _gdaf =0;_gdaf < _agdb ;_gdaf ++{_gbdb =_dfc .Data [_afcc *_dfc .RowStride +_gdaf ];_dec +=int (_dfde [_gbdb ]);};if _afga !=0{_dec +=int (_dfde [_dfc .Data [_afcc *_dfc .RowStride +_gdaf ]&_dffb ]);};};return _dec ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_fce .Rectangle ;};func Rect (x ,y ,w ,h int )(*_fce .Rectangle ,error ){const _aabd ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_a .Errorf (_aabd ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_a .Error (_aabd ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_aaab :=_fce .Rect (x ,y ,x +w ,y +h );return &_aaab ,nil ;};func _abd (_bee ,_facg ,_fff *Bitmap )(*Bitmap ,error ){const _ffba ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _facg ==nil {return nil ,_a .Error (_ffba ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _fff ==nil {return nil ,_a .Error (_ffba ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _cbgc error ;switch {case _bee ==_facg :if _cbgc =_bee .RasterOperation (0,0,_facg .Width ,_facg .Height ,PixNotSrcAndDst ,_fff ,0,0);_cbgc !=nil {return nil ,_a .Wrap (_cbgc ,_ffba ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _bee ==_fff :if _cbgc =_bee .RasterOperation (0,0,_facg .Width ,_facg .Height ,PixNotSrcAndDst ,_facg ,0,0);_cbgc !=nil {return nil ,_a .Wrap (_cbgc ,_ffba ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_bee ,_cbgc =_caad (_bee ,_facg );if _cbgc !=nil {return nil ,_a .Wrap (_cbgc ,_ffba ,"");};if _cbgc =_bee .RasterOperation (0,0,_facg .Width ,_facg .Height ,PixNotSrcAndDst ,_fff ,0,0);_cbgc !=nil {return nil ,_a .Wrap (_cbgc ,_ffba ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _bee ,nil ;};func (_dfab *BitmapsArray )AddBox (box *_fce .Rectangle ){_dfab .Boxes =append (_dfab .Boxes ,box )};func (_fcdgg *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _dfbf ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_fcdgg .IntSlice .Size (){return 0,_a .Errorf (_dfbf ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_fcdgg .XAtIndex (i )),nil ;};func _dffeg (_bddf *Bitmap ,_dac *Bitmap ,_gacfa *Selection )(*Bitmap ,error ){var (_dadg *Bitmap ;_eedf error ;);_bddf ,_eedf =_acbf (_bddf ,_dac ,_gacfa ,&_dadg );if _eedf !=nil {return nil ,_eedf ;};if _eedf =_bddf .clearAll ();_eedf !=nil {return nil ,_eedf ;};var _ggcb SelectionValue ;for _eceb :=0;_eceb < _gacfa .Height ;_eceb ++{for _gcdda :=0;_gcdda < _gacfa .Width ;_gcdda ++{_ggcb =_gacfa .Data [_eceb ][_gcdda ];if _ggcb ==SelHit {if _eedf =_bddf .RasterOperation (_gcdda -_gacfa .Cx ,_eceb -_gacfa .Cy ,_dac .Width ,_dac .Height ,PixSrcOrDst ,_dadg ,0,0);_eedf !=nil {return nil ,_eedf ;};};};};return _bddf ,nil ;};func MakePixelCentroidTab8 ()[]int {return _fdaf ()};func (_dccdd *ClassedPoints )ySortFunction ()func (_cafa int ,_gfeg int )bool {return func (_gcaac ,_aecg int )bool {return _dccdd .YAtIndex (_gcaac )< _dccdd .YAtIndex (_aecg )};};func (_fdfb *Bitmap )setEightBytes (_dede int ,_eed uint64 )error {_gaeg :=_fdfb .RowStride -(_dede %_fdfb .RowStride );if _fdfb .RowStride !=_fdfb .Width >>3{_gaeg --;};if _gaeg >=8{return _fdfb .setEightFullBytes (_dede ,_eed );};return _fdfb .setEightPartlyBytes (_dede ,_gaeg ,_eed );};func TstWordBitmap (t *_aa .T ,scale ...int )*Bitmap {_agdbc :=1;if len (scale )> 0{_agdbc =scale [0];};_efagg :=3;_bffef :=9+7+15+2*_efagg ;_afcf :=5+_efagg +5;_egab :=New (_bffef *_agdbc ,_afcf *_agdbc );_ebef :=&Bitmaps {};var _dcdd *int ;_efagg *=_agdbc ;_cgaee :=0;_dcdd =&_cgaee ;_fdeg :=0;_dbaf :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,1*_agdbc );_dbaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,_efagg );_dbaf =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,1*_agdbc );_dbaf =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,_efagg );_dbaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,1*_agdbc );_dbaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,1*_agdbc );_dbaf =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,0);*_dcdd =0;_fdeg =5*_agdbc +_efagg ;_dbaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,1*_agdbc );_dbaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,_efagg );_dbaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,1*_agdbc );_dbaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,1*_agdbc );_dbaf =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,1*_agdbc );_dbaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,1*_agdbc );_dbaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ebef ,_dbaf ,_dcdd ,_fdeg ,0);TstWriteSymbols (t ,_ebef ,_egab );return _egab ;};func (_cgcg *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_effg *Boxes ,_cdaa error ){const _dbbc ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _cgcg ==nil {return nil ,_a .Error (_dbbc ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_cgcg )==0{return _cgcg ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_a .Errorf (_dbbc ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_a .Errorf (_dbbc ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );};_acaab :=_cgcg .makeSizeIndicator (width ,height ,tp ,relation );_fcgg ,_cdaa :=_cgcg .selectWithIndicator (_acaab );if _cdaa !=nil {return nil ,_a .Wrap (_cdaa ,_dbbc ,"");};return _fcgg ,nil ;};func (_caeb *Bitmaps )HeightSorter ()func (_ggcfe ,_fbaeg int )bool {return func (_cgdcd ,_gdce int )bool {_ecdd :=_caeb .Values [_cgdcd ].Height < _caeb .Values [_gdce ].Height ;_c .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_caeb .Values [_cgdcd ].Height ,_caeb .Values [_gdce ].Height ,_ecdd );return _ecdd ;};};func (_dbcf Points )XSorter ()func (_eebe ,_aebb int )bool {return func (_daca ,_ffff int )bool {return _dbcf [_daca ].X < _dbcf [_ffff ].X };};func (_fbccg *Bitmap )nextOnPixel (_edga ,_abec int )(_ffd _fce .Point ,_gbee bool ,_ded error ){const _daee ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_ffd ,_gbee ,_ded =_fbccg .nextOnPixelLow (_fbccg .Width ,_fbccg .Height ,_fbccg .RowStride ,_edga ,_abec );if _ded !=nil {return _ffd ,false ,_a .Wrap (_ded ,_daee ,"");};return _ffd ,_gbee ,nil ;};func (_fcfa *Bitmaps )GetBox (i int )(*_fce .Rectangle ,error ){const _agaac ="\u0047\u0065\u0074\u0042\u006f\u0078";if _fcfa ==nil {return nil ,_a .Error (_agaac ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_fcfa .Boxes )-1{return nil ,_a .Errorf (_agaac ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fcfa .Boxes [i ],nil ;};func (_dfbcf *Bitmaps )makeSizeIndicator (_ffbf ,_bddgg int ,_edcg LocationFilter ,_dfgd SizeComparison )(_gebg *_ff .NumSlice ,_gfcf error ){const _dce ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _dfbcf ==nil {return nil ,_a .Error (_dce ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _edcg {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_a .Errorf (_dce ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_edcg );};switch _dfgd {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_a .Errorf (_dce ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_dfgd );};_gebg =&_ff .NumSlice {};var (_beca ,_efbd ,_eecg int ;_daceb *Bitmap ;);for _ ,_daceb =range _dfbcf .Values {_beca =0;_efbd ,_eecg =_daceb .Width ,_daceb .Height ;switch _edcg {case LocSelectWidth :if (_dfgd ==SizeSelectIfLT &&_efbd < _ffbf )||(_dfgd ==SizeSelectIfGT &&_efbd > _ffbf )||(_dfgd ==SizeSelectIfLTE &&_efbd <=_ffbf )||(_dfgd ==SizeSelectIfGTE &&_efbd >=_ffbf )||(_dfgd ==SizeSelectIfEQ &&_efbd ==_ffbf ){_beca =1;};case LocSelectHeight :if (_dfgd ==SizeSelectIfLT &&_eecg < _bddgg )||(_dfgd ==SizeSelectIfGT &&_eecg > _bddgg )||(_dfgd ==SizeSelectIfLTE &&_eecg <=_bddgg )||(_dfgd ==SizeSelectIfGTE &&_eecg >=_bddgg )||(_dfgd ==SizeSelectIfEQ &&_eecg ==_bddgg ){_beca =1;};case LocSelectIfEither :if (_dfgd ==SizeSelectIfLT &&(_efbd < _ffbf ||_eecg < _bddgg ))||(_dfgd ==SizeSelectIfGT &&(_efbd > _ffbf ||_eecg > _bddgg ))||(_dfgd ==SizeSelectIfLTE &&(_efbd <=_ffbf ||_eecg <=_bddgg ))||(_dfgd ==SizeSelectIfGTE &&(_efbd >=_ffbf ||_eecg >=_bddgg ))||(_dfgd ==SizeSelectIfEQ &&(_efbd ==_ffbf ||_eecg ==_bddgg )){_beca =1;};case LocSelectIfBoth :if (_dfgd ==SizeSelectIfLT &&(_efbd < _ffbf &&_eecg < _bddgg ))||(_dfgd ==SizeSelectIfGT &&(_efbd > _ffbf &&_eecg > _bddgg ))||(_dfgd ==SizeSelectIfLTE &&(_efbd <=_ffbf &&_eecg <=_bddgg ))||(_dfgd ==SizeSelectIfGTE &&(_efbd >=_ffbf &&_eecg >=_bddgg ))||(_dfgd ==SizeSelectIfEQ &&(_efbd ==_ffbf &&_eecg ==_bddgg )){_beca =1;};};_gebg .AddInt (_beca );};return _gebg ,nil ;};func _fcdf (_dgc int )int {if _dgc < 0{return -_dgc ;};return _dgc ;};func (_aaac Points )GetIntX (i int )(int ,error ){if i >=len (_aaac ){return 0,_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_aaac [i ].X ),nil ;};type Boxes []*_fce .Rectangle ;func (_edfc *ClassedPoints )SortByX (){_edfc ._adce =_edfc .xSortFunction ();_fd .Sort (_edfc )};type SelectionValue int ;type MorphOperation int ;func _fdac (_ggfd ,_gbbcb *Bitmap ,_bbca ,_dggb int )(*Bitmap ,error ){const _fbacc ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _gbbcb ==nil {return nil ,_a .Error (_fbacc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bbca < 1||_dggb < 1{return nil ,_a .Error (_fbacc ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _bbca ==1&&_dggb ==1{_cfcb ,_edge :=_caad (_ggfd ,_gbbcb );if _edge !=nil {return nil ,_a .Wrap (_edge ,_fbacc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _cfcb ,nil ;};if _bbca ==1||_dggb ==1{_cffd :=SelCreateBrick (_dggb ,_bbca ,_dggb /2,_bbca /2,SelHit );_fbgcb ,_ccdb :=_bfee (_ggfd ,_gbbcb ,_cffd );if _ccdb !=nil {return nil ,_a .Wrap (_ccdb ,_fbacc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _fbgcb ,nil ;};_dbac :=SelCreateBrick (1,_bbca ,0,_bbca /2,SelHit );_bgdc :=SelCreateBrick (_dggb ,1,_dggb /2,0,SelHit );_bcec ,_efbb :=_bfee (nil ,_gbbcb ,_dbac );if _efbb !=nil {return nil ,_a .Wrap (_efbb ,_fbacc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_ggfd ,_efbb =_bfee (_ggfd ,_bcec ,_bgdc );if _efbb !=nil {return nil ,_a .Wrap (_efbb ,_fbacc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ggfd ,nil ;};func _bce (_gdbb ,_dbgc *Bitmap ,_dbbg ,_dad ,_daba uint ,_facce ,_fdgd int ,_fae bool ,_fdgf ,_fdbb int )error {for _edcc :=_facce ;_edcc < _fdgd ;_edcc ++{if _fdgf +1< len (_gdbb .Data ){_bcac :=_edcc +1==_fdgd ;_bcf ,_abfd :=_gdbb .GetByte (_fdgf );if _abfd !=nil {return _abfd ;};_fdgf ++;_bcf <<=_dbbg ;_cad ,_abfd :=_gdbb .GetByte (_fdgf );if _abfd !=nil {return _abfd ;};_cad >>=_dad ;_dfea :=_bcf |_cad ;if _bcac &&!_fae {_dfea =_bgge (_daba ,_dfea );};_abfd =_dbgc .SetByte (_fdbb ,_dfea );if _abfd !=nil {return _abfd ;};_fdbb ++;if _bcac &&_fae {_beac ,_bfafe :=_gdbb .GetByte (_fdgf );if _bfafe !=nil {return _bfafe ;};_beac <<=_dbbg ;_dfea =_bgge (_daba ,_beac );if _bfafe =_dbgc .SetByte (_fdbb ,_dfea );_bfafe !=nil {return _bfafe ;};};continue ;};_aege ,_bdbe :=_gdbb .GetByte (_fdgf );if _bdbe !=nil {_c .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_fdgf ,_bdbe );return _bdbe ;};_aege <<=_dbbg ;_fdgf ++;_bdbe =_dbgc .SetByte (_fdbb ,_aege );if _bdbe !=nil {return _bdbe ;};_fdbb ++;};return nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_fecd :=make ([]Point ,len (bms ));_cggb :=_fdaf ();_ffed :=_ddec ();var _dbge error ;for _bffe ,_ccce :=range bms {_fecd [_bffe ],_dbge =_ccce .centroid (_cggb ,_ffed );if _dbge !=nil {return nil ,_dbge ;};};_egbg :=Points (_fecd );return &_egbg ,nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func _bfee (_caada ,_bbea *Bitmap ,_cgda *Selection )(*Bitmap ,error ){const _bbdbb ="\u0065\u0072\u006fd\u0065";var (_ccae error ;_bfca *Bitmap ;);_caada ,_ccae =_acbf (_caada ,_bbea ,_cgda ,&_bfca );if _ccae !=nil {return nil ,_a .Wrap (_ccae ,_bbdbb ,"");};if _ccae =_caada .setAll ();_ccae !=nil {return nil ,_a .Wrap (_ccae ,_bbdbb ,"");};var _geab SelectionValue ;for _bfbd :=0;_bfbd < _cgda .Height ;_bfbd ++{for _ddfd :=0;_ddfd < _cgda .Width ;_ddfd ++{_geab =_cgda .Data [_bfbd ][_ddfd ];if _geab ==SelHit {_ccae =_babg (_caada ,_cgda .Cx -_ddfd ,_cgda .Cy -_bfbd ,_bbea .Width ,_bbea .Height ,PixSrcAndDst ,_bfca ,0,0);if _ccae !=nil {return nil ,_a .Wrap (_ccae ,_bbdbb ,"");};};};};if MorphBC ==SymmetricMorphBC {return _caada ,nil ;};_efee ,_agbf ,_cbgaa ,_gdbg :=_cgda .findMaxTranslations ();if _efee > 0{if _ccae =_caada .RasterOperation (0,0,_efee ,_bbea .Height ,PixClr ,nil ,0,0);_ccae !=nil {return nil ,_a .Wrap (_ccae ,_bbdbb ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _cbgaa > 0{if _ccae =_caada .RasterOperation (_bbea .Width -_cbgaa ,0,_cbgaa ,_bbea .Height ,PixClr ,nil ,0,0);_ccae !=nil {return nil ,_a .Wrap (_ccae ,_bbdbb ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _agbf > 0{if _ccae =_caada .RasterOperation (0,0,_bbea .Width ,_agbf ,PixClr ,nil ,0,0);_ccae !=nil {return nil ,_a .Wrap (_ccae ,_bbdbb ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _gdbg > 0{if _ccae =_caada .RasterOperation (0,_bbea .Height -_gdbg ,_bbea .Width ,_gdbg ,PixClr ,nil ,0,0);_ccae !=nil {return nil ,_a .Wrap (_ccae ,_bbdbb ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _caada ,nil ;};var (_ffbfd *Bitmap ;_gddbc *Bitmap ;);func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _bfgd (d ,s ,hSize ,vSize )};func _fbdg (_cdda *Bitmap ,_gdac *_ff .Stack ,_egda ,_febdf int )(_cggbc *_fce .Rectangle ,_egcaa error ){const _afgf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _cdda ==nil {return nil ,_a .Error (_afgf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _gdac ==nil {return nil ,_a .Error (_afgf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_abcc ,_gaege :=_cdda .Width ,_cdda .Height ;_cgffg :=_abcc -1;_dcafa :=_gaege -1;if _egda < 0||_egda > _cgffg ||_febdf < 0||_febdf > _dcafa ||!_cdda .GetPixel (_egda ,_febdf ){return nil ,nil ;};var _aecad *_fce .Rectangle ;_aecad ,_egcaa =Rect (100000,100000,0,0);if _egcaa !=nil {return nil ,_a .Wrap (_egcaa ,_afgf ,"");};if _egcaa =_dcbf (_gdac ,_egda ,_egda ,_febdf ,1,_dcafa ,_aecad );_egcaa !=nil {return nil ,_a .Wrap (_egcaa ,_afgf ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _egcaa =_dcbf (_gdac ,_egda ,_egda ,_febdf +1,-1,_dcafa ,_aecad );_egcaa !=nil {return nil ,_a .Wrap (_egcaa ,_afgf ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_aecad .Min .X ,_aecad .Max .X =_egda ,_egda ;_aecad .Min .Y ,_aecad .Max .Y =_febdf ,_febdf ;var (_gbggc *fillSegment ;_bcaa int ;);for _gdac .Len ()> 0{if _gbggc ,_egcaa =_fegb (_gdac );_egcaa !=nil {return nil ,_a .Wrap (_egcaa ,_afgf ,"");};_febdf =_gbggc ._ecbcb ;for _egda =_gbggc ._ccbc ;_egda >=0&&_cdda .GetPixel (_egda ,_febdf );_egda --{if _egcaa =_cdda .SetPixel (_egda ,_febdf ,0);_egcaa !=nil {return nil ,_a .Wrap (_egcaa ,_afgf ,"");};};if _egda >=_gbggc ._ccbc {for _egda ++;_egda <=_gbggc ._gdbfg &&_egda <=_cgffg &&!_cdda .GetPixel (_egda ,_febdf );_egda ++{};_bcaa =_egda ;if !(_egda <=_gbggc ._gdbfg &&_egda <=_cgffg ){continue ;};}else {_bcaa =_egda +1;if _bcaa < _gbggc ._ccbc -1{if _egcaa =_dcbf (_gdac ,_bcaa ,_gbggc ._ccbc -1,_gbggc ._ecbcb ,-_gbggc ._bcde ,_dcafa ,_aecad );_egcaa !=nil {return nil ,_a .Wrap (_egcaa ,_afgf ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_egda =_gbggc ._ccbc +1;};for {for ;_egda <=_cgffg &&_cdda .GetPixel (_egda ,_febdf );_egda ++{if _egcaa =_cdda .SetPixel (_egda ,_febdf ,0);_egcaa !=nil {return nil ,_a .Wrap (_egcaa ,_afgf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _egcaa =_dcbf (_gdac ,_bcaa ,_egda -1,_gbggc ._ecbcb ,_gbggc ._bcde ,_dcafa ,_aecad );_egcaa !=nil {return nil ,_a .Wrap (_egcaa ,_afgf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _egda > _gbggc ._gdbfg +1{if _egcaa =_dcbf (_gdac ,_gbggc ._gdbfg +1,_egda -1,_gbggc ._ecbcb ,-_gbggc ._bcde ,_dcafa ,_aecad );_egcaa !=nil {return nil ,_a .Wrap (_egcaa ,_afgf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _egda ++;_egda <=_gbggc ._gdbfg &&_egda <=_cgffg &&!_cdda .GetPixel (_egda ,_febdf );_egda ++{};_bcaa =_egda ;if !(_egda <=_gbggc ._gdbfg &&_egda <=_cgffg ){break ;};};};_aecad .Max .X ++;_aecad .Max .Y ++;return _aecad ,nil ;};func (_bfbgc *byWidth )Less (i ,j int )bool {return _bfbgc .Values [i ].Width < _bfbgc .Values [j ].Width };const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func TstWordBitmapWithSpaces (t *_aa .T ,scale ...int )*Bitmap {_bddgb :=1;if len (scale )> 0{_bddgb =scale [0];};_dcbfg :=3;_dbcg :=9+7+15+2*_dcbfg +2*_dcbfg ;_cfag :=5+_dcbfg +5+2*_dcbfg ;_ecgeb :=New (_dbcg *_bddgb ,_cfag *_bddgb );_cedfa :=&Bitmaps {};var _cbfc *int ;_dcbfg *=_bddgb ;_gfgc :=_dcbfg ;_cbfc =&_gfgc ;_agge :=_dcbfg ;_ccbgb :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,1*_bddgb );_ccbgb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,_dcbfg );_ccbgb =TstISymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,1*_bddgb );_ccbgb =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,_dcbfg );_ccbgb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,1*_bddgb );_ccbgb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,1*_bddgb );_ccbgb =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,0);*_cbfc =_dcbfg ;_agge =5*_bddgb +_dcbfg ;_ccbgb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,1*_bddgb );_ccbgb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,_dcbfg );_ccbgb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,1*_bddgb );_ccbgb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,1*_bddgb );_ccbgb =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,1*_bddgb );_ccbgb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,1*_bddgb );_ccbgb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cedfa ,_ccbgb ,_cbfc ,_agge ,0);TstWriteSymbols (t ,_cedfa ,_ecgeb );return _ecgeb ;};func TstTSymbol (t *_aa .T ,scale ...int )*Bitmap {_bgbeg ,_ccbdg :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_fc .NoError (t ,_ccbdg );return TstGetScaledSymbol (t ,_bgbeg ,scale ...);};func _gcf (_ega ,_gdf *Bitmap ,_begg int ,_fgcd []byte ,_ddg int )(_abe error ){const _efe ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_adcb ,_bge ,_bdaa ,_ddb ,_dfdd ,_bff ,_gga ,_fef int ;_agb ,_bfcf uint32 ;_gae ,_dge byte ;_gcb uint16 ;);_bgd :=make ([]byte ,4);_abeb :=make ([]byte ,4);for _bdaa =0;_bdaa < _ega .Height -1;_bdaa ,_ddb =_bdaa +2,_ddb +1{_adcb =_bdaa *_ega .RowStride ;_bge =_ddb *_gdf .RowStride ;for _dfdd ,_bff =0,0;_dfdd < _ddg ;_dfdd ,_bff =_dfdd +4,_bff +1{for _gga =0;_gga < 4;_gga ++{_fef =_adcb +_dfdd +_gga ;if _fef <=len (_ega .Data )-1&&_fef < _adcb +_ega .RowStride {_bgd [_gga ]=_ega .Data [_fef ];}else {_bgd [_gga ]=0x00;};_fef =_adcb +_ega .RowStride +_dfdd +_gga ;if _fef <=len (_ega .Data )-1&&_fef < _adcb +(2*_ega .RowStride ){_abeb [_gga ]=_ega .Data [_fef ];}else {_abeb [_gga ]=0x00;};};_agb =_fdb .BigEndian .Uint32 (_bgd );_bfcf =_fdb .BigEndian .Uint32 (_abeb );_bfcf &=_agb ;_bfcf &=_bfcf <<1;_bfcf &=0xaaaaaaaa;_agb =_bfcf |(_bfcf <<7);_gae =byte (_agb >>24);_dge =byte ((_agb >>8)&0xff);_fef =_bge +_bff ;if _fef +1==len (_gdf .Data )-1||_fef +1>=_bge +_gdf .RowStride {_gdf .Data [_fef ]=_fgcd [_gae ];if _abe =_gdf .SetByte (_fef ,_fgcd [_gae ]);_abe !=nil {return _a .Wrapf (_abe ,_efe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fef );};}else {_gcb =(uint16 (_fgcd [_gae ])<<8)|uint16 (_fgcd [_dge ]);if _abe =_gdf .setTwoBytes (_fef ,_gcb );_abe !=nil {return _a .Wrapf (_abe ,_efe ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fef );};_bff ++;};};};return nil ;};func (_dfaf *Bitmaps )AddBox (box *_fce .Rectangle ){_dfaf .Boxes =append (_dfaf .Boxes ,box )};func (_gcg *Bitmap )thresholdPixelSum (_ffg int )bool {var (_ddbb int ;_eeda uint8 ;_bbab byte ;_dbb int ;);_ccca :=_gcg .RowStride ;_ead :=uint (_gcg .Width &0x07);if _ead !=0{_eeda =uint8 ((0xff<<(8-_ead ))&0xff);_ccca --;};for _fgcb :=0;_fgcb < _gcg .Height ;_fgcb ++{for _dbb =0;_dbb < _ccca ;_dbb ++{_bbab =_gcg .Data [_fgcb *_gcg .RowStride +_dbb ];_ddbb +=int (_dfde [_bbab ]);};if _ead !=0{_bbab =_gcg .Data [_fgcb *_gcg .RowStride +_dbb ]&_eeda ;_ddbb +=int (_dfde [_bbab ]);};if _ddbb > _ffg {return true ;};};return false ;};func (_gggb *byWidth )Len ()int {return len (_gggb .Values )};func (_aeaae *byHeight )Less (i ,j int )bool {return _aeaae .Values [i ].Height < _aeaae .Values [j ].Height };func _abeede (_ebdf *Bitmap ,_fagcg *Bitmap ,_cgae int )(_ggbdg error ){const _ffcb ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_cgbe :=_afdb (_ebdf .Height ,_fagcg .Height );_gfcaf :=_afdb (_ebdf .RowStride ,_fagcg .RowStride );switch _cgae {case 4:_ggbdg =_bfaea (_ebdf ,_fagcg ,_cgbe ,_gfcaf );case 8:_ggbdg =_ffffa (_ebdf ,_fagcg ,_cgbe ,_gfcaf );default:return _a .Errorf (_ffcb ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_cgae );};if _ggbdg !=nil {return _a .Wrap (_ggbdg ,_ffcb ,"");};return nil ;};func _afdb (_bgca ,_fdgb int )int {if _bgca < _fdgb {return _bgca ;};return _fdgb ;};func (_cce *Bitmap )connComponentsBitmapsBB (_ebgg *Bitmaps ,_aeca int )(_eedg *Boxes ,_egg error ){const _cfb ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _aeca !=4&&_aeca !=8{return nil ,_a .Error (_cfb ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _ebgg ==nil {return nil ,_a .Error (_cfb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_ebgg .Values )> 0{return nil ,_a .Error (_cfb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _cce .Zero (){return &Boxes {},nil ;};var (_gfca ,_bced ,_gfda ,_abeed *Bitmap ;);_cce .setPadBits (0);if _gfca ,_egg =_caad (nil ,_cce );_egg !=nil {return nil ,_a .Wrap (_egg ,_cfb ,"\u0062\u006d\u0031");};if _bced ,_egg =_caad (nil ,_cce );_egg !=nil {return nil ,_a .Wrap (_egg ,_cfb ,"\u0062\u006d\u0032");};_ege :=&_ff .Stack {};_ege .Aux =&_ff .Stack {};_eedg =&Boxes {};var (_acfg ,_abda int ;_beaf _fce .Point ;_cbcd bool ;_cfaed *_fce .Rectangle ;);for {if _beaf ,_cbcd ,_egg =_gfca .nextOnPixel (_acfg ,_abda );_egg !=nil {return nil ,_a .Wrap (_egg ,_cfb ,"");};if !_cbcd {break ;};if _cfaed ,_egg =_fedb (_gfca ,_ege ,_beaf .X ,_beaf .Y ,_aeca );_egg !=nil {return nil ,_a .Wrap (_egg ,_cfb ,"");};if _egg =_eedg .Add (_cfaed );_egg !=nil {return nil ,_a .Wrap (_egg ,_cfb ,"");};if _gfda ,_egg =_gfca .clipRectangle (_cfaed ,nil );_egg !=nil {return nil ,_a .Wrap (_egg ,_cfb ,"\u0062\u006d\u0033");};if _abeed ,_egg =_bced .clipRectangle (_cfaed ,nil );_egg !=nil {return nil ,_a .Wrap (_egg ,_cfb ,"\u0062\u006d\u0034");};if _ ,_egg =_fcbg (_gfda ,_gfda ,_abeed );_egg !=nil {return nil ,_a .Wrap (_egg ,_cfb ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _egg =_bced .RasterOperation (_cfaed .Min .X ,_cfaed .Min .Y ,_cfaed .Dx (),_cfaed .Dy (),PixSrcXorDst ,_gfda ,0,0);_egg !=nil {return nil ,_a .Wrap (_egg ,_cfb ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_ebgg .AddBitmap (_gfda );_acfg =_beaf .X ;_abda =_beaf .Y ;};_ebgg .Boxes =*_eedg ;return _eedg ,nil ;};func (_dacg *Selection )setOrigin (_cbba ,_fgcde int ){_dacg .Cy ,_dacg .Cx =_cbba ,_fgcde };func (_dag *Bitmap )setBit (_ggb int ){_dag .Data [(_ggb >>3)]|=0x80>>uint (_ggb &7)};func (_abb *Bitmap )SetByte (index int ,v byte )error {if index > len (_abb .Data )-1||index < 0{return _a .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );};_abb .Data [index ]=v ;return nil ;};func _bdfa (_faee ,_beeb *Bitmap ,_fbef ,_ffga int )(*Bitmap ,error ){const _dfef ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _beeb ==nil {return nil ,_a .Error (_dfef ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _fbef < 1&&_ffga < 1{return nil ,_a .Error (_dfef ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _fbef ==1&&_ffga ==1{return _beeb .Copy (),nil ;};if _fbef ==1||_ffga ==1{var _dcgd error ;_ddecd :=SelCreateBrick (_ffga ,_fbef ,_ffga /2,_fbef /2,SelHit );_faee ,_dcgd =_bbcag (_faee ,_beeb ,_ddecd );if _dcgd !=nil {return nil ,_a .Wrap (_dcgd ,_dfef ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _faee ,nil ;};_abfg :=SelCreateBrick (1,_fbef ,0,_fbef /2,SelHit );_eebf :=SelCreateBrick (_ffga ,1,_ffga /2,0,SelHit );_fdfc ,_dca :=_bfee (nil ,_beeb ,_abfg );if _dca !=nil {return nil ,_a .Wrap (_dca ,_dfef ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_faee ,_dca =_bfee (_faee ,_fdfc ,_eebf );if _dca !=nil {return nil ,_a .Wrap (_dca ,_dfef ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_dca =_dffeg (_fdfc ,_faee ,_abfg );if _dca !=nil {return nil ,_a .Wrap (_dca ,_dfef ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ ,_dca =_dffeg (_faee ,_fdfc ,_eebf );if _dca !=nil {return nil ,_a .Wrap (_dca ,_dfef ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _faee ,nil ;};func TstNSymbol (t *_aa .T ,scale ...int )*Bitmap {_cccca ,_dabfa :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_fc .NoError (t ,_dabfa );return TstGetScaledSymbol (t ,_cccca ,scale ...);};func _begf (_fed ,_dcgf int )int {if _fed > _dcgf {return _fed ;};return _dcgf ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _dbbd (src ,sequence ...);};type Component int ;func _ecc (_add *Bitmap ,_caac ...int )(_dbfg *Bitmap ,_bcc error ){const _ede ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _add ==nil {return nil ,_a .Error (_ede ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_caac )==0||len (_caac )> 4{return nil ,_a .Error (_ede ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");};if _caac [0]<=0{_c .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_dbfg ,_bcc =_caad (nil ,_add );if _bcc !=nil {return nil ,_a .Wrap (_bcc ,_ede ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");};return _dbfg ,nil ;};_fge :=_bdfc ();_dbfg =_add ;for _dfd ,_bb :=range _caac {if _bb <=0{break ;};_dbfg ,_bcc =_fb (_dbfg ,_bb ,_fge );if _bcc !=nil {return nil ,_a .Wrapf (_bcc ,_ede ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_dfd );};};return _dbfg ,nil ;};func _cffa (_aaf *Bitmap )(_geffb *Bitmap ,_cbgcf int ,_ece error ){const _faea ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _aaf ==nil {return nil ,0,_a .Errorf (_faea ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _efcf ,_fcbb *Bitmap ;if _efcf ,_ece =_caad (nil ,_aaf );_ece !=nil {return nil ,0,_a .Wrap (_ece ,_faea ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_efed [13]int ;_egfb ,_eeebe int ;);_gdag :=12;_cea :=_ff .NewNumSlice (_gdag +1);_acd :=_ff .NewNumSlice (_gdag +1);var _dffg *Boxes ;for _gafc :=0;_gafc <=_gdag ;_gafc ++{if _gafc ==0{if _fcbb ,_ece =_caad (nil ,_efcf );_ece !=nil {return nil ,0,_a .Wrap (_ece ,_faea ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _fcbb ,_ece =_dbbd (_efcf ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_ece !=nil {return nil ,0,_a .Wrap (_ece ,_faea ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _dffg ,_ece =_fcbb .connComponentsBB (4);_ece !=nil {return nil ,0,_a .Wrap (_ece ,_faea ,"");};_efed [_gafc ]=len (*_dffg );_cea .AddInt (_efed [_gafc ]);switch _gafc {case 0:_egfb =_efed [0];default:_eeebe =_efed [_gafc -1]-_efed [_gafc ];_acd .AddInt (_eeebe );};_efcf =_fcbb ;};_fdbbb :=true ;_daff :=2;var _cbeg ,_adb int ;for _bbbd :=1;_bbbd < len (*_acd );_bbbd ++{if _cbeg ,_ece =_cea .GetInt (_bbbd );_ece !=nil {return nil ,0,_a .Wrap (_ece ,_faea ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _fdbbb &&_cbeg < int (0.3*float32 (_egfb )){_daff =_bbbd +1;_fdbbb =false ;};if _eeebe ,_ece =_acd .GetInt (_bbbd );_ece !=nil {return nil ,0,_a .Wrap (_ece ,_faea ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _eeebe > _adb {_adb =_eeebe ;};};_ecca :=_aaf .XResolution ;if _ecca ==0{_ecca =150;};if _ecca > 110{_daff ++;};if _daff < 2{_c .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");_daff =2;};_cbgcf =_daff +1;if _geffb ,_ece =_faaga (nil ,_aaf ,_daff +1,1);_ece !=nil {return nil ,0,_a .Wrap (_ece ,_faea ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _geffb ,_cbgcf ,nil ;};func (_cece *Bitmaps )String ()string {_dabab :=_e .Builder {};for _ ,_eaadc :=range _cece .Values {_dabab .WriteString (_eaadc .String ());_dabab .WriteRune ('\n');};return _dabab .String ();};func (_eaec *Bitmap )setFourBytes (_eega int ,_dbe uint32 )error {if _eega +3> len (_eaec .Data )-1{return _a .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_eega );};_eaec .Data [_eega ]=byte ((_dbe &0xff000000)>>24);_eaec .Data [_eega +1]=byte ((_dbe &0xff0000)>>16);_eaec .Data [_eega +2]=byte ((_dbe &0xff00)>>8);_eaec .Data [_eega +3]=byte (_dbe &0xff);return nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _babg (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_fgbb :=_fccg (h ,w ,"");_fgbb .setOrigin (cy ,cx );var _fgab ,_bfgad int ;for _fgab =0;_fgab < h ;_fgab ++{for _bfgad =0;_bfgad < w ;_bfgad ++{_fgbb .Data [_fgab ][_bfgad ]=tp ;};};return _fgbb ;};type CombinationOperator int ;func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _eccd ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_cefd ,_dbfb :=p1 .Width ,p1 .Height ;_degf ,_ceff :=p3 .Width ,p3 .Height ;if _ff .Abs (_cefd -_degf )> maxDiffW {return false ,nil ;};if _ff .Abs (_dbfb -_ceff )> maxDiffH {return false ,nil ;};_gbga :=int (delX +_ff .Sign (delX )*0.5);_bbaba :=int (delY +_ff .Sign (delY )*0.5);var _eaca error ;_fdbbe :=p1 .CreateTemplate ();if _eaca =_fdbbe .RasterOperation (0,0,_cefd ,_dbfb ,PixSrc ,p1 ,0,0);_eaca !=nil {return false ,_a .Wrap (_eaca ,_eccd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _eaca =_fdbbe .RasterOperation (_gbga ,_bbaba ,_cefd ,_dbfb ,PixNotSrcAndDst ,p4 ,0,0);_eaca !=nil {return false ,_a .Wrap (_eaca ,_eccd ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _fdbbe .Zero (){return false ,nil ;};if _eaca =_fdbbe .RasterOperation (_gbga ,_bbaba ,_degf ,_ceff ,PixSrc ,p3 ,0,0);_eaca !=nil {return false ,_a .Wrap (_eaca ,_eccd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _eaca =_fdbbe .RasterOperation (0,0,_degf ,_ceff ,PixNotSrcAndDst ,p2 ,0,0);_eaca !=nil {return false ,_a .Wrap (_eaca ,_eccd ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _fdbbe .Zero (),nil ;};func _acbf (_gcaea *Bitmap ,_fbf *Bitmap ,_adfa *Selection ,_bcda **Bitmap )(*Bitmap ,error ){const _acfbc ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _fbf ==nil {return nil ,_a .Error (_acfbc ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _adfa ==nil {return nil ,_a .Error (_acfbc ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_aeaa ,_gbgf :=_adfa .Height ,_adfa .Width ;if _aeaa ==0||_gbgf ==0{return nil ,_a .Error (_acfbc ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _gcaea ==nil {_gcaea =_fbf .createTemplate ();*_bcda =_fbf ;return _gcaea ,nil ;};_gcaea .Width =_fbf .Width ;_gcaea .Height =_fbf .Height ;_gcaea .RowStride =_fbf .RowStride ;_gcaea .Color =_fbf .Color ;_gcaea .Data =make ([]byte ,_fbf .RowStride *_fbf .Height );if _gcaea ==_fbf {*_bcda =_fbf .Copy ();}else {*_bcda =_fbf ;};return _gcaea ,nil ;};func (_gaa *Bitmap )InverseData (){_gaa .inverseData ()};type ClassedPoints struct{*Points ;_ff .IntSlice ;_adce func (_ecafd ,_ecaa int )bool ;};func (_cefa *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _cefa .removeBorderGeneral (left ,right ,top ,bot );};func (_cac *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_afgd *Boxes ,_gff error ){const _fagb ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _cac ==nil {return nil ,_a .Error (_fagb ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_a .Error (_fagb ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _afgd ,_gff =_cac .connComponentsBB (connectivity );_gff !=nil {return nil ,_a .Wrap (_gff ,_fagb ,"");};}else {if _afgd ,_gff =_cac .connComponentsBitmapsBB (bms ,connectivity );_gff !=nil {return nil ,_a .Wrap (_gff ,_fagb ,"");};};return _afgd ,nil ;};func _cda (_cff ,_beg *Bitmap ,_gab int ,_fbc []byte ,_gaba int )(_gea error ){const _cefg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_dga ,_dee ,_fbcf ,_dbd ,_febe ,_fgb ,_fdf ,_egd int ;_gac ,_agc ,_cca ,_gag uint32 ;_deb ,_gacf byte ;_efc uint16 ;);_gdc :=make ([]byte ,4);_cdb :=make ([]byte ,4);for _fbcf =0;_fbcf < _cff .Height -1;_fbcf ,_dbd =_fbcf +2,_dbd +1{_dga =_fbcf *_cff .RowStride ;_dee =_dbd *_beg .RowStride ;for _febe ,_fgb =0,0;_febe < _gaba ;_febe ,_fgb =_febe +4,_fgb +1{for _fdf =0;_fdf < 4;_fdf ++{_egd =_dga +_febe +_fdf ;if _egd <=len (_cff .Data )-1&&_egd < _dga +_cff .RowStride {_gdc [_fdf ]=_cff .Data [_egd ];}else {_gdc [_fdf ]=0x00;};_egd =_dga +_cff .RowStride +_febe +_fdf ;if _egd <=len (_cff .Data )-1&&_egd < _dga +(2*_cff .RowStride ){_cdb [_fdf ]=_cff .Data [_egd ];}else {_cdb [_fdf ]=0x00;};};_gac =_fdb .BigEndian .Uint32 (_gdc );_agc =_fdb .BigEndian .Uint32 (_cdb );_cca =_gac &_agc ;_cca |=_cca <<1;_gag =_gac |_agc ;_gag &=_gag <<1;_agc =_cca |_gag ;_agc &=0xaaaaaaaa;_gac =_agc |(_agc <<7);_deb =byte (_gac >>24);_gacf =byte ((_gac >>8)&0xff);_egd =_dee +_fgb ;if _egd +1==len (_beg .Data )-1||_egd +1>=_dee +_beg .RowStride {if _gea =_beg .SetByte (_egd ,_fbc [_deb ]);_gea !=nil {return _a .Wrapf (_gea ,_cefg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_egd );};}else {_efc =(uint16 (_fbc [_deb ])<<8)|uint16 (_fbc [_gacf ]);if _gea =_beg .setTwoBytes (_egd ,_efc );_gea !=nil {return _a .Wrapf (_gea ,_cefg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_egd );};_fgb ++;};};};return nil ;};func (_eede *byWidth )Swap (i ,j int ){_eede .Values [i ],_eede .Values [j ]=_eede .Values [j ],_eede .Values [i ];if _eede .Boxes !=nil {_eede .Boxes [i ],_eede .Boxes [j ]=_eede .Boxes [j ],_eede .Boxes [i ];};};func _ccee (_bfcce ,_eage ,_fgfcdf *Bitmap ,_dace int )(*Bitmap ,error ){const _bfag ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _eage ==nil {return nil ,_a .Error (_bfag ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _fgfcdf ==nil {return nil ,_a .Error (_bfag ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _dace !=4&&_dace !=8{return nil ,_a .Error (_bfag ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _fdgg error ;_bfcce ,_fdgg =_caad (_bfcce ,_eage );if _fdgg !=nil {return nil ,_a .Wrap (_fdgg ,_bfag ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_acab :=_eage .createTemplate ();_fgfcdf .setPadBits (0);for _acee :=0;_acee < _bgga ;_acee ++{_acab ,_fdgg =_caad (_acab ,_bfcce );if _fdgg !=nil {return nil ,_a .Wrapf (_fdgg ,_bfag ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_acee );};if _fdgg =_abeede (_bfcce ,_fgfcdf ,_dace );_fdgg !=nil {return nil ,_a .Wrapf (_fdgg ,_bfag ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_acee );};if _acab .Equals (_bfcce ){break ;};};return _bfcce ,nil ;};func (_agfd MorphProcess )verify (_fbag int ,_gcdc ,_feac *int )error {const _cdgf ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _agfd .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_agfd .Arguments )!=2{return _a .Error (_cdgf ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");};_cfdb ,_dcfb :=_agfd .getWidthHeight ();if _cfdb <=0||_dcfb <=0{return _a .Error (_cdgf ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");};case MopRankBinaryReduction :_fffe :=len (_agfd .Arguments );*_gcdc +=_fffe ;if _fffe < 1||_fffe > 4{return _a .Error (_cdgf ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");};for _ebge :=0;_ebge < _fffe ;_ebge ++{if _agfd .Arguments [_ebge ]< 1||_agfd .Arguments [_ebge ]> 4{return _a .Error (_cdgf ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");};};case MopReplicativeBinaryExpansion :if len (_agfd .Arguments )==0{return _a .Error (_cdgf ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ddcg :=_agfd .Arguments [0];if _ddcg !=2&&_ddcg !=4&&_ddcg !=8{return _a .Error (_cdgf ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};*_gcdc -=_fbca [_ddcg /4];case MopAddBorder :if len (_agfd .Arguments )==0{return _a .Error (_cdgf ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccbdc :=_agfd .Arguments [0];if _fbag > 0{return _a .Error (_cdgf ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");};if _ccbdc < 1{return _a .Error (_cdgf ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_feac =_ccbdc ;};return nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func _fdaf ()[]int {_acge :=make ([]int ,256);_acge [0]=0;_acge [1]=7;var _bddg int ;for _bddg =2;_bddg < 4;_bddg ++{_acge [_bddg ]=_acge [_bddg -2]+6;};for _bddg =4;_bddg < 8;_bddg ++{_acge [_bddg ]=_acge [_bddg -4]+5;};for _bddg =8;_bddg < 16;_bddg ++{_acge [_bddg ]=_acge [_bddg -8]+4;};for _bddg =16;_bddg < 32;_bddg ++{_acge [_bddg ]=_acge [_bddg -16]+3;};for _bddg =32;_bddg < 64;_bddg ++{_acge [_bddg ]=_acge [_bddg -32]+2;};for _bddg =64;_bddg < 128;_bddg ++{_acge [_bddg ]=_acge [_bddg -64]+1;};for _bddg =128;_bddg < 256;_bddg ++{_acge [_bddg ]=_acge [_bddg -128];};return _acge ;};var _ _fd .Interface =&ClassedPoints {};func TstDSymbol (t *_aa .T ,scale ...int )*Bitmap {_afgaa ,_fgcbd :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_fc .NoError (t ,_fgcbd );return TstGetScaledSymbol (t ,_afgaa ,scale ...);};func (_faaf *byHeight )Swap (i ,j int ){_faaf .Values [i ],_faaf .Values [j ]=_faaf .Values [j ],_faaf .Values [i ];if _faaf .Boxes !=nil {_faaf .Boxes [i ],_faaf .Boxes [j ]=_faaf .Boxes [j ],_faaf .Boxes [i ];};};func _bga (_edf *Bitmap ,_fcd *Bitmap ,_cd int )(_be error ){const _cg ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _cd {case 2:_be =_fcg (_edf ,_fcd );case 4:_be =_cc (_edf ,_fcd );case 8:_be =_dd (_edf ,_fcd );default:return _a .Error (_cg ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _be !=nil {_be =_a .Wrap (_be ,_cg ,"");};return _be ;};func (_aafc Points )Size ()int {return len (_aafc )};func (_eegda *Bitmaps )CountPixels ()*_ff .NumSlice {_bgab :=&_ff .NumSlice {};for _ ,_dgfg :=range _eegda .Values {_bgab .AddInt (_dgfg .CountPixels ());};return _bgab ;};func TstESymbol (t *_aa .T ,scale ...int )*Bitmap {_ddbf ,_degaf :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_fc .NoError (t ,_degaf );return TstGetScaledSymbol (t ,_ddbf ,scale ...);};func (_dffa *Bitmap )removeBorderGeneral (_ddc ,_cgdd ,_ggfc ,_dfdee int )(*Bitmap ,error ){const _bafe ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _ddc < 0||_cgdd < 0||_ggfc < 0||_dfdee < 0{return nil ,_a .Error (_bafe ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_gbeb ,_fbae :=_dffa .Width ,_dffa .Height ;_bfada :=_gbeb -_ddc -_cgdd ;_dbff :=_fbae -_ggfc -_dfdee ;if _bfada <=0{return nil ,_a .Errorf (_bafe ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_bfada );};if _dbff <=0{return nil ,_a .Errorf (_bafe ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_dbff );};_cage :=New (_bfada ,_dbff );_cage .Color =_dffa .Color ;_eaa :=_cage .RasterOperation (0,0,_bfada ,_dbff ,PixSrc ,_dffa ,_ddc ,_ggfc );if _eaa !=nil {return nil ,_a .Wrap (_eaa ,_bafe ,"");};return _cage ,nil ;};func (_dcd *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_eeceb *Bitmaps ,_dccd *Boxes ,_cgef error ){const _acb ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _dcd ==nil {return nil ,nil ,_a .Error (_acb ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_a .Error (_acb ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");};if _dcd .Zero (){_dccd =&Boxes {};_eeceb =&Bitmaps {};return _eeceb ,_dccd ,nil ;};switch components {case ComponentConn :_eeceb =&Bitmaps {};if _dccd ,_cgef =_dcd .ConnComponents (_eeceb ,8);_cgef !=nil {return nil ,nil ,_a .Wrap (_cgef ,_acb ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentCharacters :_dbfa ,_bcgd :=MorphSequence (_dcd ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _bcgd !=nil {return nil ,nil ,_a .Wrap (_bcgd ,_acb ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _c .Log .IsLogLevel (_c .LogLevelTrace ){_c .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_dbfa .String ());};_abbb :=&Bitmaps {};_dccd ,_bcgd =_dbfa .ConnComponents (_abbb ,8);if _bcgd !=nil {return nil ,nil ,_a .Wrap (_bcgd ,_acb ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _c .Log .IsLogLevel (_c .LogLevelTrace ){_c .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_abbb .String ());};if _eeceb ,_bcgd =_abbb .ClipToBitmap (_dcd );_bcgd !=nil {return nil ,nil ,_a .Wrap (_bcgd ,_acb ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_bfcd :=1;var _cede *Bitmap ;switch {case _dcd .XResolution <=200:_cede =_dcd ;case _dcd .XResolution <=400:_bfcd =2;_cede ,_cgef =_ecc (_dcd ,1,0,0,0);if _cgef !=nil {return nil ,nil ,_a .Wrap (_cgef ,_acb ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");};default:_bfcd =4;_cede ,_cgef =_ecc (_dcd ,1,1,0,0);if _cgef !=nil {return nil ,nil ,_a .Wrap (_cgef ,_acb ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");};};_bgba ,_ ,_dbgce :=_cffa (_cede );if _dbgce !=nil {return nil ,nil ,_a .Wrap (_dbgce ,_acb ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_febf ,_dbgce :=_dbacb (_bgba ,_bfcd );if _dbgce !=nil {return nil ,nil ,_a .Wrap (_dbgce ,_acb ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_eac :=&Bitmaps {};if _dccd ,_dbgce =_febf .ConnComponents (_eac ,4);_dbgce !=nil {return nil ,nil ,_a .Wrap (_dbgce ,_acb ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");};if _eeceb ,_dbgce =_eac .ClipToBitmap (_dcd );_dbgce !=nil {return nil ,nil ,_a .Wrap (_dbgce ,_acb ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_eeceb ,_cgef =_eeceb .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _cgef !=nil {return nil ,nil ,_a .Wrap (_cgef ,_acb ,"");};_dccd ,_cgef =_dccd .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _cgef !=nil {return nil ,nil ,_a .Wrap (_cgef ,_acb ,"");};return _eeceb ,_dccd ,nil ;};func (_cbd *Bitmap )ClipRectangle (box *_fce .Rectangle )(_geac *Bitmap ,_ddd *_fce .Rectangle ,_addf error ){const _fabg ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_a .Error (_fabg ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_ffbb ,_fcc :=_cbd .Width ,_cbd .Height ;_aade :=_fce .Rect (0,0,_ffbb ,_fcc );if !box .Overlaps (_aade ){return nil ,nil ,_a .Error (_fabg ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_gbc :=box .Intersect (_aade );_fgcf ,_ggeb :=_gbc .Min .X ,_gbc .Min .Y ;_bdb ,_fbe :=_gbc .Dx (),_gbc .Dy ();_geac =New (_bdb ,_fbe );_geac .Text =_cbd .Text ;if _addf =_geac .RasterOperation (0,0,_bdb ,_fbe ,PixSrc ,_cbd ,_fgcf ,_ggeb );_addf !=nil {return nil ,nil ,_a .Wrap (_addf ,_fabg ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_ddd =&_gbc ;return _geac ,_ddd ,nil ;};func (_dfdf *Bitmap )clearAll ()error {return _dfdf .RasterOperation (0,0,_dfdf .Width ,_dfdf .Height ,PixClr ,nil ,0,0);};func _cde ()(_gca [256]uint32 ){for _ea :=0;_ea < 256;_ea ++{if _ea &0x01!=0{_gca [_ea ]|=0xf;};if _ea &0x02!=0{_gca [_ea ]|=0xf0;};if _ea &0x04!=0{_gca [_ea ]|=0xf00;};if _ea &0x08!=0{_gca [_ea ]|=0xf000;};if _ea &0x10!=0{_gca [_ea ]|=0xf0000;};if _ea &0x20!=0{_gca [_ea ]|=0xf00000;};if _ea &0x40!=0{_gca [_ea ]|=0xf000000;};if _ea &0x80!=0{_gca [_ea ]|=0xf0000000;};};return _gca ;};func (_ebac *Bitmap )resizeImageData (_gbcg *Bitmap )error {if _gbcg ==nil {return _a .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ebac .SizesEqual (_gbcg ){return nil ;};_ebac .Data =make ([]byte ,len (_gbcg .Data ));_ebac .Width =_gbcg .Width ;_ebac .Height =_gbcg .Height ;_ebac .RowStride =_gbcg .RowStride ;return nil ;};func ClipBoxToRectangle (box *_fce .Rectangle ,wi ,hi int )(_feg *_fce .Rectangle ,_bfcb error ){const _dafc ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_a .Error (_dafc ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_a .Error (_dafc ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_feg =&(*box );if _feg .Min .X < 0{_feg .Max .X +=_feg .Min .X ;_feg .Min .X =0;};if _feg .Min .Y < 0{_feg .Max .Y +=_feg .Min .Y ;_feg .Min .Y =0;};if _feg .Max .X > wi {_feg .Max .X =wi ;};if _feg .Max .Y > hi {_feg .Max .Y =hi ;};return _feg ,nil ;};func _fdg (_fdc *Bitmap ,_ce int )(*Bitmap ,error ){const _ecd ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _fdc ==nil {return nil ,_a .Error (_ecd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ce ==1{return _caad (nil ,_fdc );};if _ce !=2&&_ce !=4&&_ce !=8{return nil ,_a .Error (_ecd ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");};_dab :=_ce *_fdc .Width ;_feb :=_ce *_fdc .Height ;_bg :=New (_dab ,_feb );var _eb error ;switch _ce {case 2:_eb =_fcg (_bg ,_fdc );case 4:_eb =_cc (_bg ,_fdc );case 8:_eb =_dd (_bg ,_fdc );};if _eb !=nil {return nil ,_a .Wrap (_eb ,_ecd ,"");};return _bg ,nil ;};func (_fece *Bitmap )centroid (_gdgb ,_dafbb []int )(Point ,error ){_fgef :=Point {};_fece .setPadBits (0);if len (_gdgb )==0{_gdgb =_fdaf ();};if len (_dafbb )==0{_dafbb =_ddec ();};var _faae ,_bace ,_gdge ,_faag ,_gfcc ,_fcae int ;var _dfeb byte ;for _gfcc =0;_gfcc < _fece .Height ;_gfcc ++{_bdcd :=_fece .RowStride *_gfcc ;_faag =0;for _fcae =0;_fcae < _fece .RowStride ;_fcae ++{_dfeb =_fece .Data [_bdcd +_fcae ];if _dfeb !=0{_faag +=_dafbb [_dfeb ];_faae +=_gdgb [_dfeb ]+_fcae *8*_dafbb [_dfeb ];};};_gdge +=_faag ;_bace +=_faag *_gfcc ;};if _gdge !=0{_fgef .X =float32 (_faae )/float32 (_gdge );_fgef .Y =float32 (_bace )/float32 (_gdge );};return _fgef ,nil ;};type SizeComparison int ;func (_efcb *ClassedPoints )XAtIndex (i int )float32 {return (*_efcb .Points )[_efcb .IntSlice [i ]].X };func (_afb *Bitmap )setAll ()error {_ggef :=_babg (_afb ,0,0,_afb .Width ,_afb .Height ,PixSet ,nil ,0,0);if _ggef !=nil {return _a .Wrap (_ggef ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func (_bab *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _bab .Copy (),nil ;};_fgba ,_gbbc :=_bab .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _gbbc !=nil {return nil ,_a .Wrap (_gbbc ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _fgba ,nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_ddgce *Selection )findMaxTranslations ()(_dgdc ,_ggeg ,_bcgde ,_ecdf int ){for _fede :=0;_fede < _ddgce .Height ;_fede ++{for _aafa :=0;_aafa < _ddgce .Width ;_aafa ++{if _ddgce .Data [_fede ][_aafa ]==SelHit {_dgdc =_begf (_dgdc ,_ddgce .Cx -_aafa );_ggeg =_begf (_ggeg ,_ddgce .Cy -_fede );_bcgde =_begf (_bcgde ,_aafa -_ddgce .Cx );_ecdf =_begf (_ecdf ,_fede -_ddgce .Cy );};};};return _dgdc ,_ggeg ,_bcgde ,_ecdf ;};var (_gced =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_edgeg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _fegb (_fdfa *_ff .Stack )(_gggd *fillSegment ,_dbgd error ){const _cdgde ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _fdfa ==nil {return nil ,_a .Error (_cdgde ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _fdfa .Aux ==nil {return nil ,_a .Error (_cdgde ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_eada ,_affb :=_fdfa .Pop ();if !_affb {return nil ,nil ;};_aacce ,_affb :=_eada .(*fillSegment );if !_affb {return nil ,_a .Error (_cdgde ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_gggd =&fillSegment {_aacce ._ccbc ,_aacce ._gdbfg ,_aacce ._ecbcb +_aacce ._bcde ,_aacce ._bcde };_fdfa .Aux .Push (_aacce );return _gggd ,nil ;};func (_bcge *Bitmap )setTwoBytes (_ceeg int ,_gbdf uint16 )error {if _ceeg +1> len (_bcge .Data )-1{return _a .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ceeg );};_bcge .Data [_ceeg ]=byte ((_gbdf &0xff00)>>8);_bcge .Data [_ceeg +1]=byte (_gbdf &0xff);return nil ;};func (_bba *Bitmap )GetByte (index int )(byte ,error ){if index > len (_bba .Data )-1||index < 0{return 0,_a .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _bba .Data [index ],nil ;};func _gcae (_ebe ,_gba *Bitmap ,_bdf int ,_efd []byte ,_cdc int )(_ddf error ){const _ee ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_gce ,_ged ,_dc ,_aacc ,_fbdf ,_fab ,_bcca ,_fced int ;_gda ,_dg uint32 ;_adc ,_dfe byte ;_bebg uint16 ;);_aaba :=make ([]byte ,4);_edb :=make ([]byte ,4);for _dc =0;_dc < _ebe .Height -1;_dc ,_aacc =_dc +2,_aacc +1{_gce =_dc *_ebe .RowStride ;_ged =_aacc *_gba .RowStride ;for _fbdf ,_fab =0,0;_fbdf < _cdc ;_fbdf ,_fab =_fbdf +4,_fab +1{for _bcca =0;_bcca < 4;_bcca ++{_fced =_gce +_fbdf +_bcca ;if _fced <=len (_ebe .Data )-1&&_fced < _gce +_ebe .RowStride {_aaba [_bcca ]=_ebe .Data [_fced ];}else {_aaba [_bcca ]=0x00;};_fced =_gce +_ebe .RowStride +_fbdf +_bcca ;if _fced <=len (_ebe .Data )-1&&_fced < _gce +(2*_ebe .RowStride ){_edb [_bcca ]=_ebe .Data [_fced ];}else {_edb [_bcca ]=0x00;};};_gda =_fdb .BigEndian .Uint32 (_aaba );_dg =_fdb .BigEndian .Uint32 (_edb );_dg |=_gda ;_dg |=_dg <<1;_dg &=0xaaaaaaaa;_gda =_dg |(_dg <<7);_adc =byte (_gda >>24);_dfe =byte ((_gda >>8)&0xff);_fced =_ged +_fab ;if _fced +1==len (_gba .Data )-1||_fced +1>=_ged +_gba .RowStride {_gba .Data [_fced ]=_efd [_adc ];}else {_bebg =(uint16 (_efd [_adc ])<<8)|uint16 (_efd [_dfe ]);if _ddf =_gba .setTwoBytes (_fced ,_bebg );_ddf !=nil {return _a .Wrapf (_ddf ,_ee ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fced );};_fab ++;};};};return nil ;};func (_gcaab *ClassedPoints )validateIntSlice ()error {const _dbcb ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_bcacd :=range _gcaab .IntSlice {if _bcacd >=(_gcaab .Points .Size ()){return _a .Errorf (_dbcb ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_bcacd ,_gcaab .Points .Size ());};};return nil ;};func (_bdag *Bitmap )addBorderGeneral (_bbc ,_daf ,_cag ,_gcd int ,_fca int )(*Bitmap ,error ){const _agbe ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _bbc < 0||_daf < 0||_cag < 0||_gcd < 0{return nil ,_a .Error (_agbe ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_agdf ,_aeb :=_bdag .Width ,_bdag .Height ;_fcde :=_agdf +_bbc +_daf ;_gcc :=_aeb +_cag +_gcd ;_bgec :=New (_fcde ,_gcc );_bgec .Color =_bdag .Color ;_bdbg :=PixClr ;if _fca > 0{_bdbg =PixSet ;};_fad :=_bgec .RasterOperation (0,0,_bbc ,_gcc ,_bdbg ,nil ,0,0);if _fad !=nil {return nil ,_a .Wrap (_fad ,_agbe ,"\u006c\u0065\u0066\u0074");};_fad =_bgec .RasterOperation (_fcde -_daf ,0,_daf ,_gcc ,_bdbg ,nil ,0,0);if _fad !=nil {return nil ,_a .Wrap (_fad ,_agbe ,"\u0072\u0069\u0067h\u0074");};_fad =_bgec .RasterOperation (0,0,_fcde ,_cag ,_bdbg ,nil ,0,0);if _fad !=nil {return nil ,_a .Wrap (_fad ,_agbe ,"\u0074\u006f\u0070");};_fad =_bgec .RasterOperation (0,_gcc -_gcd ,_fcde ,_gcd ,_bdbg ,nil ,0,0);if _fad !=nil {return nil ,_a .Wrap (_fad ,_agbe ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_fad =_bgec .RasterOperation (_bbc ,_cag ,_agdf ,_aeb ,PixSrc ,_bdag ,0,0);if _fad !=nil {return nil ,_a .Wrap (_fad ,_agbe ,"\u0063\u006f\u0070\u0079");};return _bgec ,nil ;};func (_febg *Bitmap )String ()string {var _deg ="\u000a";for _fafb :=0;_fafb < _febg .Height ;_fafb ++{var _fdgc string ;for _cae :=0;_cae < _febg .Width ;_cae ++{_cgdc :=_febg .GetPixel (_cae ,_fafb );if _cgdc {_fdgc +="\u0031";}else {_fdgc +="\u0030";};};_deg +=_fdgc +"\u000a";};return _deg ;};func TstRSymbol (t *_aa .T ,scale ...int )*Bitmap {_dgggb ,_becca :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_fc .NoError (t ,_becca );return TstGetScaledSymbol (t ,_dgggb ,scale ...);};const (_bbcfa shift =iota ;_acfge ;);var _dfde [256]uint8 ;func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _dffeg (d ,s ,sel )};func (_bafc MorphProcess )getWidthHeight ()(_bcbd ,_ccbdd int ){return _bafc .Arguments [0],_bafc .Arguments [1];};func (_eddf *Bitmap )connComponentsBB (_aefa int )(_gdff *Boxes ,_cdaad error ){const _bdfg ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _aefa !=4&&_aefa !=8{return nil ,_a .Error (_bdfg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _eddf .Zero (){return &Boxes {},nil ;};_eddf .setPadBits (0);_bgbaf ,_cdaad :=_caad (nil ,_eddf );if _cdaad !=nil {return nil ,_a .Wrap (_cdaad ,_bdfg ,"\u0062\u006d\u0031");};_dffe :=&_ff .Stack {};_dffe .Aux =&_ff .Stack {};_gdff =&Boxes {};var (_efbg ,_acfb int ;_fdee _fce .Point ;_bcff bool ;_gbdd *_fce .Rectangle ;);for {if _fdee ,_bcff ,_cdaad =_bgbaf .nextOnPixel (_acfb ,_efbg );_cdaad !=nil {return nil ,_a .Wrap (_cdaad ,_bdfg ,"");};if !_bcff {break ;};if _gbdd ,_cdaad =_fedb (_bgbaf ,_dffe ,_fdee .X ,_fdee .Y ,_aefa );_cdaad !=nil {return nil ,_a .Wrap (_cdaad ,_bdfg ,"");};if _cdaad =_gdff .Add (_gbdd );_cdaad !=nil {return nil ,_a .Wrap (_cdaad ,_bdfg ,"");};_acfb =_fdee .X ;_efbg =_fdee .Y ;};return _gdff ,nil ;};func TstGetScaledSymbol (t *_aa .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_caed ,_egcag :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_fc .NoError (t ,_egcag );return _caed ;};var _fbca =[5]int {1,2,3,0,4};func (_dbbbc *ClassedPoints )YAtIndex (i int )float32 {return (*_dbbbc .Points )[_dbbbc .IntSlice [i ]].Y };func _dbbd (_bgafa *Bitmap ,_fdcgb ...MorphProcess )(_caf *Bitmap ,_acdf error ){const _bfed ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _bgafa ==nil {return nil ,_a .Error (_bfed ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if len (_fdcgb )==0{return nil ,_a .Error (_bfed ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _acdf =_dgggg (_fdcgb ...);_acdf !=nil {return nil ,_a .Wrap (_acdf ,_bfed ,"");};var _aff ,_cbdda ,_edcda int ;_caf =_bgafa .Copy ();for _ ,_defd :=range _fdcgb {switch _defd .Operation {case MopDilation :_aff ,_cbdda =_defd .getWidthHeight ();_caf ,_acdf =DilateBrick (nil ,_caf ,_aff ,_cbdda );if _acdf !=nil {return nil ,_a .Wrap (_acdf ,_bfed ,"");};case MopErosion :_aff ,_cbdda =_defd .getWidthHeight ();_caf ,_acdf =_fdac (nil ,_caf ,_aff ,_cbdda );if _acdf !=nil {return nil ,_a .Wrap (_acdf ,_bfed ,"");};case MopOpening :_aff ,_cbdda =_defd .getWidthHeight ();_caf ,_acdf =_bdfa (nil ,_caf ,_aff ,_cbdda );if _acdf !=nil {return nil ,_a .Wrap (_acdf ,_bfed ,"");};case MopClosing :_aff ,_cbdda =_defd .getWidthHeight ();_caf ,_acdf =_aggd (nil ,_caf ,_aff ,_cbdda );if _acdf !=nil {return nil ,_a .Wrap (_acdf ,_bfed ,"");};case MopRankBinaryReduction :_caf ,_acdf =_ecc (_caf ,_defd .Arguments ...);if _acdf !=nil {return nil ,_a .Wrap (_acdf ,_bfed ,"");};case MopReplicativeBinaryExpansion :_caf ,_acdf =_dbacb (_caf ,_defd .Arguments [0]);if _acdf !=nil {return nil ,_a .Wrap (_acdf ,_bfed ,"");};case MopAddBorder :_edcda =_defd .Arguments [0];_caf ,_acdf =_caf .AddBorder (_edcda ,0);if _acdf !=nil {return nil ,_a .Wrap (_acdf ,_bfed ,"");};default:return nil ,_a .Error (_bfed ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");};};if _edcda > 0{_caf ,_acdf =_caf .RemoveBorder (_edcda );if _acdf !=nil {return nil ,_a .Wrap (_acdf ,_bfed ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _caf ,nil ;};func _dgggg (_fga ...MorphProcess )(_agee error ){const _abbd ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _adcba ,_cbbb int ;for _ggg ,_ggag :=range _fga {if _agee =_ggag .verify (_ggg ,&_adcba ,&_cbbb );_agee !=nil {return _a .Wrap (_agee ,_abbd ,"");};};if _cbbb !=0&&_adcba !=0{return _a .Error (_abbd ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");};return nil ;};func (_cddc Points )Get (i int )(Point ,error ){if i > len (_cddc )-1{return Point {},_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cddc [i ],nil ;};func (_fafa *Bitmaps )WidthSorter ()func (_cdagff ,_cgceg int )bool {return func (_dgbg ,_adgg int )bool {return _fafa .Values [_dgbg ].Width < _fafa .Values [_adgg ].Width };};type shift int ;func TstAddSymbol (t *_aa .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_gfde :=_fce .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_gfde );*x +=sym .Width +space ;};func _eeab (_gcfd *Bitmap ,_ecfc ,_dbbgg int ,_fgcgc ,_ggfbf int ,_fddb RasterOperator ){var (_cgfb int ;_cdbfg byte ;_caade ,_afeg int ;_cfdcd int ;);_aag :=_fgcgc >>3;_gbfa :=_fgcgc &7;if _gbfa > 0{_cdbfg =_gced [_gbfa ];};_cgfb =_gcfd .RowStride *_dbbgg +(_ecfc >>3);switch _fddb {case PixClr :for _caade =0;_caade < _ggfbf ;_caade ++{_cfdcd =_cgfb +_caade *_gcfd .RowStride ;for _afeg =0;_afeg < _aag ;_afeg ++{_gcfd .Data [_cfdcd ]=0x0;_cfdcd ++;};if _gbfa > 0{_gcfd .Data [_cfdcd ]=_gfab (_gcfd .Data [_cfdcd ],0x0,_cdbfg );};};case PixSet :for _caade =0;_caade < _ggfbf ;_caade ++{_cfdcd =_cgfb +_caade *_gcfd .RowStride ;for _afeg =0;_afeg < _aag ;_afeg ++{_gcfd .Data [_cfdcd ]=0xff;_cfdcd ++;};if _gbfa > 0{_gcfd .Data [_cfdcd ]=_gfab (_gcfd .Data [_cfdcd ],0xff,_cdbfg );};};case PixNotDst :for _caade =0;_caade < _ggfbf ;_caade ++{_cfdcd =_cgfb +_caade *_gcfd .RowStride ;for _afeg =0;_afeg < _aag ;_afeg ++{_gcfd .Data [_cfdcd ]=^_gcfd .Data [_cfdcd ];_cfdcd ++;};if _gbfa > 0{_gcfd .Data [_cfdcd ]=_gfab (_gcfd .Data [_cfdcd ],^_gcfd .Data [_cfdcd ],_cdbfg );};};};};func _fcbg (_ecf ,_bdc ,_cefb *Bitmap )(*Bitmap ,error ){const _gcab ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _bdc ==nil {return nil ,_a .Error (_gcab ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _cefb ==nil {return nil ,_a .Error (_gcab ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ecf ==_cefb {return nil ,_a .Error (_gcab ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_bdc .SizesEqual (_cefb ){_c .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_gcab );};var _fage error ;if _ecf ,_fage =_caad (_ecf ,_bdc );_fage !=nil {return nil ,_a .Wrap (_fage ,_gcab ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _fage =_ecf .RasterOperation (0,0,_ecf .Width ,_ecf .Height ,PixSrcXorDst ,_cefb ,0,0);_fage !=nil {return nil ,_a .Wrap (_fage ,_gcab ,"");};return _ecf ,nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_fce .Rectangle ;};func TstISymbol (t *_aa .T ,scale ...int )*Bitmap {_gfcce ,_acde :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_fc .NoError (t ,_acde );return TstGetScaledSymbol (t ,_gfcce ,scale ...);};func (_ebgb *ClassedPoints )Less (i ,j int )bool {return _ebgb ._adce (i ,j )};func (_ggbf *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _beec ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _ggbf ==nil {return nil ,_a .Error (_beec ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_ggbf .Values )-1{return nil ,_a .Errorf (_beec ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ggbf .Values [i ],nil ;};type fillSegment struct{_ccbc int ;_gdbfg int ;_ecbcb int ;_bcde int ;};func _aggd (_cdagf ,_acgf *Bitmap ,_bgce ,_abebb int )(*Bitmap ,error ){const _fdgbd ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _acgf ==nil {return nil ,_a .Error (_fdgbd ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _bgce < 1||_abebb < 1{return nil ,_a .Error (_fdgbd ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _bgce ==1&&_abebb ==1{return _caad (_cdagf ,_acgf );};if MorphBC ==SymmetricMorphBC {_fdbg ,_bbaa :=_faaga (_cdagf ,_acgf ,_bgce ,_abebb );if _bbaa !=nil {return nil ,_a .Wrap (_bbaa ,_fdgbd ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _fdbg ,nil ;};_gedb :=_begf (_bgce /2,_abebb /2);_abfe :=8*((_gedb +7)/8);_cade ,_fffc :=_acgf .AddBorder (_abfe ,0);if _fffc !=nil {return nil ,_a .Wrapf (_fffc ,_fdgbd ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_abfe );};var _afgc ,_bgcbf *Bitmap ;if _bgce ==1||_abebb ==1{_cgad :=SelCreateBrick (_abebb ,_bgce ,_abebb /2,_bgce /2,SelHit );_afgc ,_fffc =_age (nil ,_cade ,_cgad );if _fffc !=nil {return nil ,_a .Wrap (_fffc ,_fdgbd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_gdaa :=SelCreateBrick (1,_bgce ,0,_bgce /2,SelHit );_fgfe ,_caee :=_dffeg (nil ,_cade ,_gdaa );if _caee !=nil {return nil ,_a .Wrap (_caee ,_fdgbd ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_aabc :=SelCreateBrick (_abebb ,1,_abebb /2,0,SelHit );_afgc ,_caee =_dffeg (nil ,_fgfe ,_aabc );if _caee !=nil {return nil ,_a .Wrap (_caee ,_fdgbd ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_caee =_bfee (_fgfe ,_afgc ,_gdaa );_caee !=nil {return nil ,_a .Wrap (_caee ,_fdgbd ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_caee =_bfee (_afgc ,_fgfe ,_aabc );_caee !=nil {return nil ,_a .Wrap (_caee ,_fdgbd ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");};};if _bgcbf ,_fffc =_afgc .RemoveBorder (_abfe );_fffc !=nil {return nil ,_a .Wrap (_fffc ,_fdgbd ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _cdagf ==nil {return _bgcbf ,nil ;};if _ ,_fffc =_caad (_cdagf ,_bgcbf );_fffc !=nil {return nil ,_fffc ;};return _cdagf ,nil ;};func (_ceb *Bitmap )SetDefaultPixel (){for _bcg :=range _ceb .Data {_ceb .Data [_bcg ]=byte (0xff);};};func TstWriteSymbols (t *_aa .T ,bms *Bitmaps ,src *Bitmap ){for _cbdbb :=0;_cbdbb < bms .Size ();_cbdbb ++{_efg :=bms .Values [_cbdbb ];_efde :=bms .Boxes [_cbdbb ];_dgae :=src .RasterOperation (_efde .Min .X ,_efde .Min .Y ,_efg .Width ,_efg .Height ,PixSrc ,_efg ,0,0);_fc .NoError (t ,_dgae );};};func (_addc *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _geaf ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _addc ==nil {return nil ,_a .Error (_geaf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_addc .Values )-1{return nil ,_a .Errorf (_geaf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _addc .Values [i ],nil ;};type SizeSelection int ;func (_fgcg *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _bcgc ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_fgcg .IntSlice .Size (){return 0,_a .Errorf (_bcgc ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_fgcg .YAtIndex (i )),nil ;};func _afbe (_eccg ,_caeg *Bitmap ,_cefaa CombinationOperator )*Bitmap {_ebag :=New (_eccg .Width ,_eccg .Height );for _acc :=0;_acc < len (_ebag .Data );_acc ++{_ebag .Data [_acc ]=_aeba (_eccg .Data [_acc ],_caeg .Data [_acc ],_cefaa );};return _ebag ;};func (_gfceb *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _dcaf ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _efcff :=_gfceb .validateIntSlice ();_efcff !=nil {return nil ,_a .Wrap (_efcff ,_dcaf ,"");};if _gfceb .IntSlice .Size ()==0{return nil ,_a .Error (_dcaf ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_gfceb .SortByY ();var (_ffec []*ClassedPoints ;_ecbc int ;);_dadf :=-1;var _dgef *ClassedPoints ;for _gabf :=0;_gabf < len (_gfceb .IntSlice );_gabf ++{_ecbc =int (_gfceb .YAtIndex (_gabf ));if _ecbc !=_dadf {_dgef =&ClassedPoints {Points :_gfceb .Points };_dadf =_ecbc ;_ffec =append (_ffec ,_dgef );};_dgef .IntSlice =append (_dgef .IntSlice ,_gfceb .IntSlice [_gabf ]);};for _ ,_eccb :=range _ffec {_eccb .SortByX ();};return _ffec ,nil ;};func (_gfc *Bitmap )SetPadBits (value int ){_gfc .setPadBits (value )};func _dcbf (_dfeag *_ff .Stack ,_feaf ,_efbf ,_cedf ,_agae ,_beda int ,_eaad *_fce .Rectangle )(_ebecd error ){const _beef ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";if _dfeag ==nil {return _a .Error (_beef ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _eaad ==nil {return _a .Error (_beef ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");};_eaad .Min .X =_ff .Min (_eaad .Min .X ,_feaf );_eaad .Max .X =_ff .Max (_eaad .Max .X ,_efbf );_eaad .Min .Y =_ff .Min (_eaad .Min .Y ,_cedf );_eaad .Max .Y =_ff .Max (_eaad .Max .Y ,_cedf );if !(_cedf +_agae >=0&&_cedf +_agae <=_beda ){return nil ;};if _dfeag .Aux ==nil {return _a .Error (_beef ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _gdef *fillSegment ;_fagef ,_facced :=_dfeag .Aux .Pop ();if _facced {if _gdef ,_facced =_fagef .(*fillSegment );!_facced {return _a .Error (_beef ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_gdef =&fillSegment {};};_gdef ._ccbc =_feaf ;_gdef ._gdbfg =_efbf ;_gdef ._ecbcb =_cedf ;_gdef ._bcde =_agae ;_dfeag .Push (_gdef );return nil ;};func (_fgbed *ClassedPoints )Swap (i ,j int ){_fgbed .IntSlice [i ],_fgbed .IntSlice [j ]=_fgbed .IntSlice [j ],_fgbed .IntSlice [i ];};func (_fec *Bitmap )CountPixels ()int {return _fec .countPixels ()};func (_dgbd *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _ccged ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _dgbd ==nil {return nil ,_a .Error (_ccged ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_a .Error (_ccged ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_ddcd :=len (_dgbd .Values );_fcedd :=&Bitmaps {Values :make ([]*Bitmap ,_ddcd ),Boxes :make ([]*_fce .Rectangle ,_ddcd )};var (_dbeg ,_gcec *Bitmap ;_ddcc *_fce .Rectangle ;_dfdgc error ;);for _bfcfe :=0;_bfcfe < _ddcd ;_bfcfe ++{if _dbeg ,_dfdgc =_dgbd .GetBitmap (_bfcfe );_dfdgc !=nil {return nil ,_a .Wrap (_dfdgc ,_ccged ,"");};if _ddcc ,_dfdgc =_dgbd .GetBox (_bfcfe );_dfdgc !=nil {return nil ,_a .Wrap (_dfdgc ,_ccged ,"");};if _gcec ,_dfdgc =s .clipRectangle (_ddcc ,nil );_dfdgc !=nil {return nil ,_a .Wrap (_dfdgc ,_ccged ,"");};if _gcec ,_dfdgc =_gcec .And (_dbeg );_dfdgc !=nil {return nil ,_a .Wrap (_dfdgc ,_ccged ,"");};_fcedd .Values [_bfcfe ]=_gcec ;_fcedd .Boxes [_bfcfe ]=_ddcc ;};return _fcedd ,nil ;};func _fedb (_bdba *Bitmap ,_bacee *_ff .Stack ,_ffgf ,_gbdfg ,_ccgd int )(_cbdc *_fce .Rectangle ,_eddg error ){const _fdab ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _bdba ==nil {return nil ,_a .Error (_fdab ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bacee ==nil {return nil ,_a .Error (_fdab ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _ccgd {case 4:if _cbdc ,_eddg =_fbdg (_bdba ,_bacee ,_ffgf ,_gbdfg );_eddg !=nil {return nil ,_a .Wrap (_eddg ,_fdab ,"");};return _cbdc ,nil ;case 8:if _cbdc ,_eddg =_aeed (_bdba ,_bacee ,_ffgf ,_gbdfg );_eddg !=nil {return nil ,_a .Wrap (_eddg ,_fdab ,"");};return _cbdc ,nil ;default:return nil ,_a .Errorf (_fdab ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_ccgd );};};func _facea (_acba *Bitmap ,_agfad ,_bcea ,_afcca ,_dbed int ,_gdfe RasterOperator ,_cfbb *Bitmap ,_agaa ,_baca int )error {var (_aacd bool ;_fcdae bool ;_ddeg int ;_bfae int ;_gceb int ;_dfbe bool ;_dbdf byte ;_abbc int ;_egdc int ;_bae int ;_cccg ,_eegc int ;);_caae :=8-(_agfad &7);_cecb :=_edgeg [_caae ];_fefc :=_acba .RowStride *_bcea +(_agfad >>3);_dcba :=_cfbb .RowStride *_baca +(_agaa >>3);if _afcca < _caae {_aacd =true ;_cecb &=_gced [8-_caae +_afcca ];};if !_aacd {_ddeg =(_afcca -_caae )>>3;if _ddeg > 0{_fcdae =true ;_bfae =_fefc +1;_gceb =_dcba +1;};};_abbc =(_agfad +_afcca )&7;if !(_aacd ||_abbc ==0){_dfbe =true ;_dbdf =_gced [_abbc ];_egdc =_fefc +1+_ddeg ;_bae =_dcba +1+_ddeg ;};switch _gdfe {case PixSrc :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],_cfbb .Data [_dcba ],_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]=_cfbb .Data [_gceb +_eegc ];};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],_cfbb .Data [_bae ],_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixNotSrc :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],^_cfbb .Data [_dcba ],_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]=^_cfbb .Data [_gceb +_eegc ];};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],^_cfbb .Data [_bae ],_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixSrcOrDst :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],_cfbb .Data [_dcba ]|_acba .Data [_fefc ],_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]|=_cfbb .Data [_gceb +_eegc ];};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],_cfbb .Data [_bae ]|_acba .Data [_egdc ],_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixSrcAndDst :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],_cfbb .Data [_dcba ]&_acba .Data [_fefc ],_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]&=_cfbb .Data [_gceb +_eegc ];};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],_cfbb .Data [_bae ]&_acba .Data [_egdc ],_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixSrcXorDst :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],_cfbb .Data [_dcba ]^_acba .Data [_fefc ],_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]^=_cfbb .Data [_gceb +_eegc ];};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],_cfbb .Data [_bae ]^_acba .Data [_egdc ],_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixNotSrcOrDst :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],^(_cfbb .Data [_dcba ])|_acba .Data [_fefc ],_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]|=^(_cfbb .Data [_gceb +_eegc ]);};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],^(_cfbb .Data [_bae ])|_acba .Data [_egdc ],_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixNotSrcAndDst :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],^(_cfbb .Data [_dcba ])&_acba .Data [_fefc ],_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]&=^_cfbb .Data [_gceb +_eegc ];};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],^(_cfbb .Data [_bae ])&_acba .Data [_egdc ],_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixSrcOrNotDst :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],_cfbb .Data [_dcba ]|^(_acba .Data [_fefc ]),_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]=_cfbb .Data [_gceb +_eegc ]|^(_acba .Data [_bfae +_eegc ]);};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],_cfbb .Data [_bae ]|^(_acba .Data [_egdc ]),_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixSrcAndNotDst :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],_cfbb .Data [_dcba ]&^(_acba .Data [_fefc ]),_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]=_cfbb .Data [_gceb +_eegc ]&^(_acba .Data [_bfae +_eegc ]);};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],_cfbb .Data [_bae ]&^(_acba .Data [_egdc ]),_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixNotPixSrcOrDst :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],^(_cfbb .Data [_dcba ]|_acba .Data [_fefc ]),_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]=^(_cfbb .Data [_gceb +_eegc ]|_acba .Data [_bfae +_eegc ]);};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],^(_cfbb .Data [_bae ]|_acba .Data [_egdc ]),_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixNotPixSrcAndDst :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],^(_cfbb .Data [_dcba ]&_acba .Data [_fefc ]),_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]=^(_cfbb .Data [_gceb +_eegc ]&_acba .Data [_bfae +_eegc ]);};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],^(_cfbb .Data [_bae ]&_acba .Data [_egdc ]),_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};case PixNotPixSrcXorDst :for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_fefc ]=_gfab (_acba .Data [_fefc ],^(_cfbb .Data [_dcba ]^_acba .Data [_fefc ]),_cecb );_fefc +=_acba .RowStride ;_dcba +=_cfbb .RowStride ;};if _fcdae {for _cccg =0;_cccg < _dbed ;_cccg ++{for _eegc =0;_eegc < _ddeg ;_eegc ++{_acba .Data [_bfae +_eegc ]=^(_cfbb .Data [_gceb +_eegc ]^_acba .Data [_bfae +_eegc ]);};_bfae +=_acba .RowStride ;_gceb +=_cfbb .RowStride ;};};if _dfbe {for _cccg =0;_cccg < _dbed ;_cccg ++{_acba .Data [_egdc ]=_gfab (_acba .Data [_egdc ],^(_cfbb .Data [_bae ]^_acba .Data [_egdc ]),_dbdf );_egdc +=_acba .RowStride ;_bae +=_cfbb .RowStride ;};};default:_c .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_gdfe );return _a .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_gbba *Bitmap )SizesEqual (s *Bitmap )bool {if _gbba ==s {return true ;};if _gbba .Width !=s .Width ||_gbba .Height !=s .Height {return false ;};return true ;};func (_gagd Points )GetIntY (i int )(int ,error ){if i >=len (_gagd ){return 0,_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_gagd [i ].Y ),nil ;};func (_baa *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_cfdf *Bitmaps ,_eecb error ){const _babd ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _baa ==nil {return nil ,_a .Error (_babd ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_a .Errorf (_babd ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_a .Errorf (_babd ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );};_bbfe ,_eecb :=_baa .makeSizeIndicator (width ,height ,tp ,relation );if _eecb !=nil {return nil ,_a .Wrap (_eecb ,_babd ,"");};_cfdf ,_eecb =_baa .selectByIndicator (_bbfe );if _eecb !=nil {return nil ,_a .Wrap (_eecb ,_babd ,"");};return _cfdf ,nil ;};func (_ecg *Bitmap )Equivalent (s *Bitmap )bool {return _ecg .equivalent (s )};func (_effc *Bitmap )setEightFullBytes (_ddga int ,_ccb uint64 )error {if _ddga +7> len (_effc .Data )-1{return _a .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_effc .Data [_ddga ]=byte ((_ccb &0xff00000000000000)>>56);_effc .Data [_ddga +1]=byte ((_ccb &0xff000000000000)>>48);_effc .Data [_ddga +2]=byte ((_ccb &0xff0000000000)>>40);_effc .Data [_ddga +3]=byte ((_ccb &0xff00000000)>>32);_effc .Data [_ddga +4]=byte ((_ccb &0xff000000)>>24);_effc .Data [_ddga +5]=byte ((_ccb &0xff0000)>>16);_effc .Data [_ddga +6]=byte ((_ccb &0xff00)>>8);_effc .Data [_ddga +7]=byte (_ccb &0xff);return nil ;};func _cc (_aacg ,_ec *Bitmap )(_fcf error ){const _eca ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_aabb :=_ec .RowStride ;_bc :=_aacg .RowStride ;_ac :=_ec .RowStride *4-_aacg .RowStride ;var (_af ,_ffb byte ;_bf uint32 ;_gf ,_ba ,_baf ,_gdb ,_abc ,_afg ,_da int ;);for _baf =0;_baf < _ec .Height ;_baf ++{_gf =_baf *_aabb ;_ba =4*_baf *_bc ;for _gdb =0;_gdb < _aabb ;_gdb ++{_af =_ec .Data [_gf +_gdb ];_bf =_cagdg [_af ];_afg =_ba +_gdb *4;if _ac !=0&&(_gdb +1)*4> _aacg .RowStride {for _abc =_ac ;_abc > 0;_abc --{_ffb =byte ((_bf >>uint (_abc *8))&0xff);_da =_afg +(_ac -_abc );if _fcf =_aacg .SetByte (_da ,_ffb );_fcf !=nil {return _a .Wrapf (_fcf ,_eca ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_abc );};};}else if _fcf =_aacg .setFourBytes (_afg ,_bf );_fcf !=nil {return _a .Wrap (_fcf ,_eca ,"");};if _fcf =_aacg .setFourBytes (_ba +_gdb *4,_cagdg [_ec .Data [_gf +_gdb ]]);_fcf !=nil {return _a .Wrap (_fcf ,_eca ,"");};};for _abc =1;_abc < 4;_abc ++{for _gdb =0;_gdb < _bc ;_gdb ++{if _fcf =_aacg .SetByte (_ba +_abc *_bc +_gdb ,_aacg .Data [_ba +_gdb ]);_fcf !=nil {return _a .Wrapf (_fcf ,_eca ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_abc ,_gdb );};};};};return nil ;};func (_dgdde *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _ddee ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_dgdde .Values )==0{return nil ,_a .Error (_ddee ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_fgag :=&BitmapsArray {};_dgdde .SortByHeight ();_dbbfd :=-1;_fddf :=-1;for _gbefa :=0;_gbefa < len (_dgdde .Values );_gbefa ++{_adcf :=_dgdde .Values [_gbefa ].Height ;if _adcf > _dbbfd {_dbbfd =_adcf ;_fddf ++;_fgag .Values =append (_fgag .Values ,&Bitmaps {});};_fgag .Values [_fddf ].AddBitmap (_dgdde .Values [_gbefa ]);};return _fgag ,nil ;};func (_bafa *Bitmap )clipRectangle (_fcdd ,_gcdd *_fce .Rectangle )(_gdca *Bitmap ,_edd error ){const _def ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _fcdd ==nil {return nil ,_a .Error (_def ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_bffa ,_efdc :=_bafa .Width ,_bafa .Height ;_egbb ,_edd :=ClipBoxToRectangle (_fcdd ,_bffa ,_efdc );if _edd !=nil {_c .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_edd );return nil ,nil ;};_gedg ,_bcb :=_egbb .Min .X ,_egbb .Min .Y ;_bbd ,_cfda :=_egbb .Max .X -_egbb .Min .X ,_egbb .Max .Y -_egbb .Min .Y ;_gdca =New (_bbd ,_cfda );_gdca .Text =_bafa .Text ;if _edd =_gdca .RasterOperation (0,0,_bbd ,_cfda ,PixSrc ,_bafa ,_gedg ,_bcb );_edd !=nil {return nil ,_a .Wrap (_edd ,_def ,"");};if _gcdd !=nil {*_gcdd =*_egbb ;};return _gdca ,nil ;};type byHeight Bitmaps ;const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);const (Vanilla Color =iota ;Chocolate ;);func (_egdg *Bitmap )GetByteIndex (x ,y int )int {return y *_egdg .RowStride +(x >>3)};func (_cggd *Boxes )selectWithIndicator (_bbb *_ff .NumSlice )(_cege *Boxes ,_bbdb error ){const _faba ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _cggd ==nil {return nil ,_a .Error (_faba ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _bbb ==nil {return nil ,_a .Error (_faba ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_bbb )!=len (*_cggd ){return nil ,_a .Error (_faba ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");};var _feadf ,_gaega int ;for _ggefd :=0;_ggefd < len (*_bbb );_ggefd ++{if _feadf ,_bbdb =_bbb .GetInt (_ggefd );_bbdb !=nil {return nil ,_a .Wrap (_bbdb ,_faba ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _feadf ==1{_gaega ++;};};if _gaega ==len (*_cggd ){return _cggd ,nil ;};_ebea :=Boxes {};for _cbfd :=0;_cbfd < len (*_bbb );_cbfd ++{_feadf =int ((*_bbb )[_cbfd ]);if _feadf ==0{continue ;};_ebea =append (_ebea ,(*_cggd )[_cbfd ]);};_cege =&_ebea ;return _cege ,nil ;};func _dbf ()(_ae [256]uint16 ){for _fee :=0;_fee < 256;_fee ++{if _fee &0x01!=0{_ae [_fee ]|=0x3;};if _fee &0x02!=0{_ae [_fee ]|=0xc;};if _fee &0x04!=0{_ae [_fee ]|=0x30;};if _fee &0x08!=0{_ae [_fee ]|=0xc0;};if _fee &0x10!=0{_ae [_fee ]|=0x300;};if _fee &0x20!=0{_ae [_fee ]|=0xc00;};if _fee &0x40!=0{_ae [_fee ]|=0x3000;};if _fee &0x80!=0{_ae [_fee ]|=0xc000;};};return _ae ;};func TstOSymbol (t *_aa .T ,scale ...int )*Bitmap {_cgddc ,_gccf :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_fc .NoError (t ,_gccf );return TstGetScaledSymbol (t ,_cgddc ,scale ...);};func (_dgga *Bitmap )inverseData (){if _ggd :=_dgga .RasterOperation (0,0,_dgga .Width ,_dgga .Height ,PixNotDst ,nil ,0,0);_ggd !=nil {_c .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ggd );};if _dgga .Color ==Chocolate {_dgga .Color =Vanilla ;}else {_dgga .Color =Chocolate ;};};func (_gcedf *Bitmaps )Size ()int {return len (_gcedf .Values )};func (_dfcg CombinationOperator )String ()string {var _ecbg string ;switch _dfcg {case CmbOpOr :_ecbg ="\u004f\u0052";case CmbOpAnd :_ecbg ="\u0041\u004e\u0044";case CmbOpXor :_ecbg ="\u0058\u004f\u0052";case CmbOpXNor :_ecbg ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_ecbg ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_ecbg ="\u004e\u004f\u0054";};return _ecbg ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);type byWidth Bitmaps ;func TstFrameBitmapData ()[]byte {return _ffbfd .Data };func _bdfc ()(_bdd []byte ){_bdd =make ([]byte ,256);for _gbe :=0;_gbe < 256;_gbe ++{_fbcc :=byte (_gbe );_bdd [_fbcc ]=(_fbcc &0x01)|((_fbcc &0x04)>>1)|((_fbcc &0x10)>>2)|((_fbcc &0x40)>>3)|((_fbcc &0x02)<<3)|((_fbcc &0x08)<<2)|((_fbcc &0x20)<<1)|(_fbcc &0x80);};return _bdd ;};func (_bedd *Points )Add (pt *Points )error {const _faec ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _bedd ==nil {return _a .Error (_faec ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _a .Error (_faec ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_bedd =append (*_bedd ,*pt ...);return nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_agdc *Points )AddPoint (x ,y float32 ){*_agdc =append (*_agdc ,Point {x ,y })};func TstVSymbol (t *_aa .T ,scale ...int )*Bitmap {_ccecg ,_cadb :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_fc .NoError (t ,_cadb );return TstGetScaledSymbol (t ,_ccecg ,scale ...);};func _fb (_cdg *Bitmap ,_ffa int ,_agd []byte )(_cbb *Bitmap ,_faf error ){const _fbd ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _cdg ==nil {return nil ,_a .Error (_fbd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ffa < 1||_ffa > 4{return nil ,_a .Error (_fbd ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _cdg .Height <=1{return nil ,_a .Errorf (_fbd ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_cdg .Height );};_cbb =New (_cdg .Width /2,_cdg .Height /2);if _agd ==nil {_agd =_bdfc ();};_fgg :=_afdb (_cdg .RowStride ,2*_cbb .RowStride );switch _ffa {case 1:_faf =_gcae (_cdg ,_cbb ,_ffa ,_agd ,_fgg );case 2:_faf =_cda (_cdg ,_cbb ,_ffa ,_agd ,_fgg );case 3:_faf =_abf (_cdg ,_cbb ,_ffa ,_agd ,_fgg );case 4:_faf =_gcf (_cdg ,_cbb ,_ffa ,_agd ,_fgg );};if _faf !=nil {return nil ,_faf ;};return _cbb ,nil ;};func _ddec ()[]int {_dbc :=make ([]int ,256);for _afde :=0;_afde <=0xff;_afde ++{_ggab :=byte (_afde );_dbc [_ggab ]=int (_ggab &0x1)+(int (_ggab >>1)&0x1)+(int (_ggab >>2)&0x1)+(int (_ggab >>3)&0x1)+(int (_ggab >>4)&0x1)+(int (_ggab >>5)&0x1)+(int (_ggab >>6)&0x1)+(int (_ggab >>7)&0x1);};return _dbc ;};func _babg (_gfba *Bitmap ,_cecf ,_dbca ,_fcdaa ,_eecc int ,_dbffb RasterOperator ,_face *Bitmap ,_adbb ,_cacd int )error {const _dadgc ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _gfba ==nil {return _a .Error (_dadgc ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _dbffb ==PixDst {return nil ;};switch _dbffb {case PixClr ,PixSet ,PixNotDst :_aaee (_gfba ,_cecf ,_dbca ,_fcdaa ,_eecc ,_dbffb );return nil ;};if _face ==nil {_c .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _a .Error (_dadgc ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _bfcc :=_ddgca (_gfba ,_cecf ,_dbca ,_fcdaa ,_eecc ,_dbffb ,_face ,_adbb ,_cacd );_bfcc !=nil {return _a .Wrap (_bfcc ,_dadgc ,"");};return nil ;};func (_efdb *Bitmap )GetChocolateData ()[]byte {if _efdb .Color ==Vanilla {_efdb .inverseData ();};return _efdb .Data ;};func _cgadd (_bdda *Bitmap ,_gaac ,_eea ,_cdfb ,_ddab int ,_ecab RasterOperator ,_eeef *Bitmap ,_adfg ,_edcf int )error {var (_edba bool ;_dffegg bool ;_faaae byte ;_cdab int ;_bfgg int ;_eggc int ;_bfaa int ;_ddac bool ;_afdfd int ;_bfbg int ;_aggdf int ;_gddbd bool ;_ddgcc byte ;_aabg int ;_bccb int ;_abcb int ;_edccb byte ;_abcbg int ;_febd int ;_gbfg uint ;_gbcf uint ;_gbgg byte ;_gbeg shift ;_agbb bool ;_fegab bool ;_cebac ,_eegd int ;);if _adfg &7!=0{_febd =8-(_adfg &7);};if _gaac &7!=0{_bfgg =8-(_gaac &7);};if _febd ==0&&_bfgg ==0{_gbgg =_edgeg [0];}else {if _bfgg > _febd {_gbfg =uint (_bfgg -_febd );}else {_gbfg =uint (8-(_febd -_bfgg ));};_gbcf =8-_gbfg ;_gbgg =_edgeg [_gbfg ];};if (_gaac &7)!=0{_edba =true ;_cdab =8-(_gaac &7);_faaae =_edgeg [_cdab ];_eggc =_bdda .RowStride *_eea +(_gaac >>3);_bfaa =_eeef .RowStride *_edcf +(_adfg >>3);_abcbg =8-(_adfg &7);if _cdab > _abcbg {_gbeg =_bbcfa ;if _cdfb >=_febd {_agbb =true ;};}else {_gbeg =_acfge ;};};if _cdfb < _cdab {_dffegg =true ;_faaae &=_gced [8-_cdab +_cdfb ];};if !_dffegg {_afdfd =(_cdfb -_cdab )>>3;if _afdfd !=0{_ddac =true ;_bfbg =_bdda .RowStride *_eea +((_gaac +_bfgg )>>3);_aggdf =_eeef .RowStride *_edcf +((_adfg +_bfgg )>>3);};};_aabg =(_gaac +_cdfb )&7;if !(_dffegg ||_aabg ==0){_gddbd =true ;_ddgcc =_gced [_aabg ];_bccb =_bdda .RowStride *_eea +((_gaac +_bfgg )>>3)+_afdfd ;_abcb =_eeef .RowStride *_edcf +((_adfg +_bfgg )>>3)+_afdfd ;if _aabg > int (_gbcf ){_fegab =true ;};};switch _ecab {case PixSrc :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],_edccb ,_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]=_edccb ;};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],_edccb ,_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixNotSrc :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],^_edccb ,_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]=^_edccb ;};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],^_edccb ,_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixSrcOrDst :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],_edccb |_bdda .Data [_eggc ],_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]|=_edccb ;};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],_edccb |_bdda .Data [_bccb ],_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixSrcAndDst :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],_edccb &_bdda .Data [_eggc ],_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]&=_edccb ;};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],_edccb &_bdda .Data [_bccb ],_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixSrcXorDst :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],_edccb ^_bdda .Data [_eggc ],_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]^=_edccb ;};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],_edccb ^_bdda .Data [_bccb ],_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixNotSrcOrDst :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],^_edccb |_bdda .Data [_eggc ],_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]|=^_edccb ;};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],^_edccb |_bdda .Data [_bccb ],_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixNotSrcAndDst :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],^_edccb &_bdda .Data [_eggc ],_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]&=^_edccb ;};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],^_edccb &_bdda .Data [_bccb ],_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixSrcOrNotDst :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],_edccb |^_bdda .Data [_eggc ],_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]=_edccb |^_bdda .Data [_bfbg +_eegd ];};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],_edccb |^_bdda .Data [_bccb ],_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixSrcAndNotDst :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],_edccb &^_bdda .Data [_eggc ],_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]=_edccb &^_bdda .Data [_bfbg +_eegd ];};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],_edccb &^_bdda .Data [_bccb ],_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixNotPixSrcOrDst :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],^(_edccb |_bdda .Data [_eggc ]),_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]=^(_edccb |_bdda .Data [_bfbg +_eegd ]);};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],^(_edccb |_bdda .Data [_bccb ]),_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixNotPixSrcAndDst :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],^(_edccb &_bdda .Data [_eggc ]),_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]=^(_edccb &_bdda .Data [_bfbg +_eegd ]);};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],^(_edccb &_bdda .Data [_bccb ]),_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};case PixNotPixSrcXorDst :if _edba {for _cebac =0;_cebac < _ddab ;_cebac ++{if _gbeg ==_bbcfa {_edccb =_eeef .Data [_bfaa ]<<_gbfg ;if _agbb {_edccb =_gfab (_edccb ,_eeef .Data [_bfaa +1]>>_gbcf ,_gbgg );};}else {_edccb =_eeef .Data [_bfaa ]>>_gbcf ;};_bdda .Data [_eggc ]=_gfab (_bdda .Data [_eggc ],^(_edccb ^_bdda .Data [_eggc ]),_faaae );_eggc +=_bdda .RowStride ;_bfaa +=_eeef .RowStride ;};};if _ddac {for _cebac =0;_cebac < _ddab ;_cebac ++{for _eegd =0;_eegd < _afdfd ;_eegd ++{_edccb =_gfab (_eeef .Data [_aggdf +_eegd ]<<_gbfg ,_eeef .Data [_aggdf +_eegd +1]>>_gbcf ,_gbgg );_bdda .Data [_bfbg +_eegd ]=^(_edccb ^_bdda .Data [_bfbg +_eegd ]);};_bfbg +=_bdda .RowStride ;_aggdf +=_eeef .RowStride ;};};if _gddbd {for _cebac =0;_cebac < _ddab ;_cebac ++{_edccb =_eeef .Data [_abcb ]<<_gbfg ;if _fegab {_edccb =_gfab (_edccb ,_eeef .Data [_abcb +1]>>_gbcf ,_gbgg );};_bdda .Data [_bccb ]=_gfab (_bdda .Data [_bccb ],^(_edccb ^_bdda .Data [_bccb ]),_ddgcc );_bccb +=_bdda .RowStride ;_abcb +=_eeef .RowStride ;};};default:_c .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ecab );return _a .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func (_cgg *Bitmap )Copy ()*Bitmap {_baff :=make ([]byte ,len (_cgg .Data ));copy (_baff ,_cgg .Data );return &Bitmap {Width :_cgg .Width ,Height :_cgg .Height ,RowStride :_cgg .RowStride ,Data :_baff ,Color :_cgg .Color ,Text :_cgg .Text ,BitmapNumber :_cgg .BitmapNumber ,Special :_cgg .Special };};func (_eba *Bitmap )addPadBits ()(_gcce error ){const _efa ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_ggaa :=_eba .Width %8;if _ggaa ==0{return nil ;};_cec :=_eba .Width /8;_bgcdd :=_ab .NewReader (_eba .Data );_eff :=make ([]byte ,_eba .Height *_eba .RowStride );_gcda :=_ab .NewWriterMSB (_eff );_ffef :=make ([]byte ,_cec );var (_abee int ;_gef uint64 ;);for _abee =0;_abee < _eba .Height ;_abee ++{if _ ,_gcce =_bgcdd .Read (_ffef );_gcce !=nil {return _a .Wrap (_gcce ,_efa ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_gcce =_gcda .Write (_ffef );_gcce !=nil {return _a .Wrap (_gcce ,_efa ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _gef ,_gcce =_bgcdd .ReadBits (byte (_ggaa ));_gcce !=nil {return _a .Wrap (_gcce ,_efa ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _gcce =_gcda .WriteByte (byte (_gef )<<uint (8-_ggaa ));_gcce !=nil {return _a .Wrap (_gcce ,_efa ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_eba .Data =_gcda .Data ();return nil ;};func (_fgcc *BitmapsArray )AddBitmaps (bm *Bitmaps ){_fgcc .Values =append (_fgcc .Values ,bm )};func _egca (_bfb ,_bcga *Bitmap ,_afe ,_gcdg ,_cdcfb ,_ggcd ,_eecd ,_eafb ,_cagd ,_eabd int ,_cdag CombinationOperator ,_egff int )error {var _cedce int ;_cbcc :=func (){_cedce ++;_cdcfb +=_bcga .RowStride ;_ggcd +=_bfb .RowStride ;_eecd +=_bfb .RowStride };for _cedce =_afe ;_cedce < _gcdg ;_cbcc (){var _abdg uint16 ;_cbf :=_cdcfb ;for _cab :=_ggcd ;_cab <=_eecd ;_cab ++{_ecb ,_eece :=_bcga .GetByte (_cbf );if _eece !=nil {return _eece ;};_geb ,_eece :=_bfb .GetByte (_cab );if _eece !=nil {return _eece ;};_abdg =(_abdg |(uint16 (_geb )&0xff))<<uint (_eabd );_geb =byte (_abdg >>8);if _eece =_bcga .SetByte (_cbf ,_aeba (_ecb ,_geb ,_cdag ));_eece !=nil {return _eece ;};_cbf ++;_abdg <<=uint (_cagd );if _cab ==_eecd {_geb =byte (_abdg >>(8-uint8 (_eabd )));if _egff !=0{_geb =_bgge (uint (8+_eafb ),_geb );};_ecb ,_eece =_bcga .GetByte (_cbf );if _eece !=nil {return _eece ;};if _eece =_bcga .SetByte (_cbf ,_aeba (_ecb ,_geb ,_cdag ));_eece !=nil {return _eece ;};};};};return nil ;};func (_cdea *Bitmaps )AddBitmap (bm *Bitmap ){_cdea .Values =append (_cdea .Values ,bm )};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _abg ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_gbb :=_fba (width ,height );_gbb .Data =data ;if _edea :=((width *height )+7)>>3;len (data )< _edea {return nil ,_a .Errorf (_abg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_edea );};if _dgb :=_gbb .addPadBits ();_dgb !=nil {return nil ,_a .Wrap (_dgb ,_abg ,"");};return _gbb ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _fgbe ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";if bm1 ==nil {return false ,_a .Error (_fgbe ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");};if bm2 ==nil {return false ,_a .Error (_fgbe ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");};if area1 <=0||area2 <=0{return false ,_a .Error (_fgbe ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");};if downcount ==nil {return false ,_a .Error (_fgbe ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_a .Error (_fgbe ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");};_aee ,_bbge :=bm1 .Width ,bm1 .Height ;_dabf ,_fcdgd :=bm2 .Width ,bm2 .Height ;if _ff .Abs (_aee -_dabf )> maxDiffW {return false ,nil ;};if _ff .Abs (_bbge -_fcdgd )> maxDiffH {return false ,nil ;};_ggcc :=int (delX +_ff .Sign (delX )*0.5);_addb :=int (delY +_ff .Sign (delY )*0.5);_cdcc :=int (_b .Ceil (_b .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_ffag :=bm2 .RowStride ;_dadc :=_begf (_addb ,0);_eefa :=_afdb (_fcdgd +_addb ,_bbge );_dbfac :=bm1 .RowStride *_dadc ;_eagg :=bm2 .RowStride *(_dadc -_addb );var _gfe int ;if _eefa <=_bbge {_gfe =downcount [_eefa -1];};_dafb :=_begf (_ggcc ,0);_aedb :=_afdb (_dabf +_ggcc ,_aee );var _aeae ,_gbeff int ;if _ggcc >=8{_aeae =_ggcc >>3;_dbfac +=_aeae ;_dafb -=_aeae <<3;_aedb -=_aeae <<3;_ggcc &=7;}else if _ggcc <=-8{_gbeff =-((_ggcc +7)>>3);_eagg +=_gbeff ;_ffag -=_gbeff ;_ggcc +=_gbeff <<3;};var (_gaef ,_cdgd ,_ggbd int ;_gfce ,_bfg ,_eabfb byte ;);if _dafb >=_aedb ||_dadc >=_eefa {return false ,nil ;};_dffgf :=(_aedb +7)>>3;switch {case _ggcc ==0:for _cdgd =_dadc ;_cdgd < _eefa ;_cdgd ,_dbfac ,_eagg =_cdgd +1,_dbfac +bm1 .RowStride ,_eagg +bm2 .RowStride {for _ggbd =0;_ggbd < _dffgf ;_ggbd ++{_gfce =bm1 .Data [_dbfac +_ggbd ]&bm2 .Data [_eagg +_ggbd ];_gaef +=tab [_gfce ];};if _gaef >=_cdcc {return true ,nil ;};if _ccff :=_gaef +downcount [_cdgd ]-_gfe ;_ccff < _cdcc {return false ,nil ;};};case _ggcc > 0&&_ffag < _dffgf :for _cdgd =_dadc ;_cdgd < _eefa ;_cdgd ,_dbfac ,_eagg =_cdgd +1,_dbfac +bm1 .RowStride ,_eagg +bm2 .RowStride {_bfg =bm1 .Data [_dbfac ];_eabfb =bm2 .Data [_eagg ]>>uint (_ggcc );_gfce =_bfg &_eabfb ;_gaef +=tab [_gfce ];for _ggbd =1;_ggbd < _ffag ;_ggbd ++{_bfg =bm1 .Data [_dbfac +_ggbd ];_eabfb =bm2 .Data [_eagg +_ggbd ]>>uint (_ggcc )|bm2 .Data [_eagg +_ggbd -1]<<uint (8-_ggcc );_gfce =_bfg &_eabfb ;_gaef +=tab [_gfce ];};_bfg =bm1 .Data [_dbfac +_ggbd ];_eabfb =bm2 .Data [_eagg +_ggbd -1]<<uint (8-_ggcc );_gfce =_bfg &_eabfb ;_gaef +=tab [_gfce ];if _gaef >=_cdcc {return true ,nil ;}else if _gaef +downcount [_cdgd ]-_gfe < _cdcc {return false ,nil ;};};case _ggcc > 0&&_ffag >=_dffgf :for _cdgd =_dadc ;_cdgd < _eefa ;_cdgd ,_dbfac ,_eagg =_cdgd +1,_dbfac +bm1 .RowStride ,_eagg +bm2 .RowStride {_bfg =bm1 .Data [_dbfac ];_eabfb =bm2 .Data [_eagg ]>>uint (_ggcc );_gfce =_bfg &_eabfb ;_gaef +=tab [_gfce ];for _ggbd =1;_ggbd < _dffgf ;_ggbd ++{_bfg =bm1 .Data [_dbfac +_ggbd ];_eabfb =bm2 .Data [_eagg +_ggbd ]>>uint (_ggcc );_eabfb |=bm2 .Data [_eagg +_ggbd -1]<<uint (8-_ggcc );_gfce =_bfg &_eabfb ;_gaef +=tab [_gfce ];};if _gaef >=_cdcc {return true ,nil ;}else if _gaef +downcount [_cdgd ]-_gfe < _cdcc {return false ,nil ;};};case _dffgf < _ffag :for _cdgd =_dadc ;_cdgd < _eefa ;_cdgd ,_dbfac ,_eagg =_cdgd +1,_dbfac +bm1 .RowStride ,_eagg +bm2 .RowStride {for _ggbd =0;_ggbd < _dffgf ;_ggbd ++{_bfg =bm1 .Data [_dbfac +_ggbd ];_eabfb =bm2 .Data [_eagg +_ggbd ]<<uint (-_ggcc );_eabfb |=bm2 .Data [_eagg +_ggbd +1]>>uint (8+_ggcc );_gfce =_bfg &_eabfb ;_gaef +=tab [_gfce ];};if _gaef >=_cdcc {return true ,nil ;}else if _bcef :=_gaef +downcount [_cdgd ]-_gfe ;_bcef < _cdcc {return false ,nil ;};};case _ffag >=_dffgf :for _cdgd =_dadc ;_cdgd < _eefa ;_cdgd ,_dbfac ,_eagg =_cdgd +1,_dbfac +bm1 .RowStride ,_eagg +bm2 .RowStride {for _ggbd =0;_ggbd < _dffgf ;_ggbd ++{_bfg =bm1 .Data [_dbfac +_ggbd ];_eabfb =bm2 .Data [_eagg +_ggbd ]<<uint (-_ggcc );_eabfb |=bm2 .Data [_eagg +_ggbd +1]>>uint (8+_ggcc );_gfce =_bfg &_eabfb ;_gaef +=tab [_gfce ];};_bfg =bm1 .Data [_dbfac +_ggbd ];_eabfb =bm2 .Data [_eagg +_ggbd ]<<uint (-_ggcc );_gfce =_bfg &_eabfb ;_gaef +=tab [_gfce ];if _gaef >=_cdcc {return true ,nil ;}else if _gaef +downcount [_cdgd ]-_gfe < _cdcc {return false ,nil ;};};};_fgde :=float32 (_gaef )*float32 (_gaef )/(float32 (area1 )*float32 (area2 ));if _fgde >=scoreThreshold {_c .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_gaef ,_cdcc ,_fgde ,scoreThreshold );};return false ,nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func _abf (_cfae ,_fafe *Bitmap ,_eee int ,_bgg []byte ,_edg int )(_bda error ){const _adag ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_aaa ,_cgb ,_gde ,_gfa ,_bea ,_aad ,_fcdg ,_eag int ;_aea ,_cbbc ,_gacc ,_cgbf uint32 ;_gge ,_dda byte ;_gbg uint16 ;);_bfc :=make ([]byte ,4);_cdga :=make ([]byte ,4);for _gde =0;_gde < _cfae .Height -1;_gde ,_gfa =_gde +2,_gfa +1{_aaa =_gde *_cfae .RowStride ;_cgb =_gfa *_fafe .RowStride ;for _bea ,_aad =0,0;_bea < _edg ;_bea ,_aad =_bea +4,_aad +1{for _fcdg =0;_fcdg < 4;_fcdg ++{_eag =_aaa +_bea +_fcdg ;if _eag <=len (_cfae .Data )-1&&_eag < _aaa +_cfae .RowStride {_bfc [_fcdg ]=_cfae .Data [_eag ];}else {_bfc [_fcdg ]=0x00;};_eag =_aaa +_cfae .RowStride +_bea +_fcdg ;if _eag <=len (_cfae .Data )-1&&_eag < _aaa +(2*_cfae .RowStride ){_cdga [_fcdg ]=_cfae .Data [_eag ];}else {_cdga [_fcdg ]=0x00;};};_aea =_fdb .BigEndian .Uint32 (_bfc );_cbbc =_fdb .BigEndian .Uint32 (_cdga );_gacc =_aea &_cbbc ;_gacc |=_gacc <<1;_cgbf =_aea |_cbbc ;_cgbf &=_cgbf <<1;_cbbc =_gacc &_cgbf ;_cbbc &=0xaaaaaaaa;_aea =_cbbc |(_cbbc <<7);_gge =byte (_aea >>24);_dda =byte ((_aea >>8)&0xff);_eag =_cgb +_aad ;if _eag +1==len (_fafe .Data )-1||_eag +1>=_cgb +_fafe .RowStride {if _bda =_fafe .SetByte (_eag ,_bgg [_gge ]);_bda !=nil {return _a .Wrapf (_bda ,_adag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eag );};}else {_gbg =(uint16 (_bgg [_gge ])<<8)|uint16 (_bgg [_dda ]);if _bda =_fafe .setTwoBytes (_eag ,_gbg );_bda !=nil {return _a .Wrapf (_bda ,_adag ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eag );};_aad ++;};};};return nil ;};func (_fafg *Bitmaps )SortByWidth (){_feea :=(*byWidth )(_fafg );_fd .Sort (_feea )};func (_eeag *BitmapsArray )GetBox (i int )(*_fce .Rectangle ,error ){const _ecgb ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _eeag ==nil {return nil ,_a .Error (_ecgb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_eeag .Boxes )-1{return nil ,_a .Errorf (_ecgb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _eeag .Boxes [i ],nil ;};func _bfgd (_dgcc ,_fffd *Bitmap ,_eeed ,_cbga int )(*Bitmap ,error ){const _ggcf ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _fffd ==nil {_c .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_a .Error (_ggcf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _eeed < 1||_cbga < 1{return nil ,_a .Error (_ggcf ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _eeed ==1&&_cbga ==1{_fgfc ,_bgbg :=_caad (_dgcc ,_fffd );if _bgbg !=nil {return nil ,_a .Wrap (_bgbg ,_ggcf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _fgfc ,nil ;};if _eeed ==1||_cbga ==1{_bdab :=SelCreateBrick (_cbga ,_eeed ,_cbga /2,_eeed /2,SelHit );_ccgf ,_cgec :=_dffeg (_dgcc ,_fffd ,_bdab );if _cgec !=nil {return nil ,_a .Wrap (_cgec ,_ggcf ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _ccgf ,nil ;};_afdg :=SelCreateBrick (1,_eeed ,0,_eeed /2,SelHit );_edgd :=SelCreateBrick (_cbga ,1,_cbga /2,0,SelHit );_edac ,_ccea :=_dffeg (nil ,_fffd ,_afdg );if _ccea !=nil {return nil ,_a .Wrap (_ccea ,_ggcf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_dgcc ,_ccea =_dffeg (_dgcc ,_edac ,_edgd );if _ccea !=nil {return nil ,_a .Wrap (_ccea ,_ggcf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _dgcc ,nil ;};func _dbde (_bgef ,_aebe *Bitmap ,_edeae ,_afa ,_eegfd ,_feada ,_dfcf ,_feeb ,_ffbc ,_cdbf int ,_bbcda CombinationOperator )error {var _fgd int ;_ebacc :=func (){_fgd ++;_eegfd +=_aebe .RowStride ;_feada +=_bgef .RowStride ;_dfcf +=_bgef .RowStride };for _fgd =_edeae ;_fgd < _afa ;_ebacc (){var _agfa uint16 ;_efag :=_eegfd ;for _cfdc :=_feada ;_cfdc <=_dfcf ;_cfdc ++{_aba ,_cgga :=_aebe .GetByte (_efag );if _cgga !=nil {return _cgga ;};_bcgf ,_cgga :=_bgef .GetByte (_cfdc );if _cgga !=nil {return _cgga ;};_agfa =(_agfa |uint16 (_bcgf ))<<uint (_cdbf );_bcgf =byte (_agfa >>8);if _cfdc ==_dfcf {_bcgf =_bgge (uint (_feeb ),_bcgf );};if _cgga =_aebe .SetByte (_efag ,_aeba (_aba ,_bcgf ,_bbcda ));_cgga !=nil {return _cgga ;};_efag ++;_agfa <<=uint (_ffbc );};};return nil ;};func MakePixelSumTab8 ()[]int {return _ddec ()};type Points []Point ;func _feec (_ggc ,_bec *Bitmap ,_facc ,_ebae ,_bbcc ,_dbg ,_cdf int ,_fda CombinationOperator )error {var _gefa int ;_feeca :=func (){_gefa ++;_bbcc +=_bec .RowStride ;_dbg +=_ggc .RowStride ;_cdf +=_ggc .RowStride };for _gefa =_facc ;_gefa < _ebae ;_feeca (){_dfg :=_bbcc ;for _aef :=_dbg ;_aef <=_cdf ;_aef ++{_effbf ,_dde :=_bec .GetByte (_dfg );if _dde !=nil {return _dde ;};_eeca ,_dde :=_ggc .GetByte (_aef );if _dde !=nil {return _dde ;};if _dde =_bec .SetByte (_dfg ,_aeba (_effbf ,_eeca ,_fda ));_dde !=nil {return _dde ;};_dfg ++;};};return nil ;};func (_efda *Bitmap )equivalent (_cbdb *Bitmap )bool {if _efda ==_cbdb {return true ;};if !_efda .SizesEqual (_cbdb ){return false ;};_gabe :=_afbe (_efda ,_cbdb ,CmbOpXor );_gaf :=_efda .countPixels ();_bag :=int (0.25*float32 (_gaf ));if _gabe .thresholdPixelSum (_bag ){return false ;};var (_fcfg [9][9]int ;_gdfa [18][9]int ;_gdab [9][18]int ;_fbg int ;_gfd int ;);_afd :=9;_dbfd :=_efda .Height /_afd ;_fag :=_efda .Width /_afd ;_agdg ,_ccaa :=_dbfd /2,_fag /2;if _dbfd < _fag {_agdg =_fag /2;_ccaa =_dbfd /2;};_gcac :=float64 (_agdg )*float64 (_ccaa )*_b .Pi ;_ebc :=int (float64 (_dbfd *_fag /2)*0.9);_bccf :=int (float64 (_fag *_dbfd /2)*0.9);for _eeee :=0;_eeee < _afd ;_eeee ++{_eaf :=_fag *_eeee +_fbg ;var _ebeb int ;if _eeee ==_afd -1{_fbg =0;_ebeb =_efda .Width ;}else {_ebeb =_eaf +_fag ;if ((_efda .Width -_fbg )%_afd )> 0{_fbg ++;_ebeb ++;};};for _fagc :=0;_fagc < _afd ;_fagc ++{_gabdg :=_dbfd *_fagc +_gfd ;var _agcd int ;if _fagc ==_afd -1{_gfd =0;_agcd =_efda .Height ;}else {_agcd =_gabdg +_dbfd ;if (_efda .Height -_gfd )%_afd > 0{_gfd ++;_agcd ++;};};var _faa ,_bbg ,_fggc ,_geff int ;_fbac :=(_eaf +_ebeb )/2;_aeg :=(_gabdg +_agcd )/2;for _aadf :=_eaf ;_aadf < _ebeb ;_aadf ++{for _gagf :=_gabdg ;_gagf < _agcd ;_gagf ++{if _gabe .GetPixel (_aadf ,_gagf ){if _aadf < _fbac {_faa ++;}else {_bbg ++;};if _gagf < _aeg {_geff ++;}else {_fggc ++;};};};};_fcfg [_eeee ][_fagc ]=_faa +_bbg ;_gdfa [_eeee *2][_fagc ]=_faa ;_gdfa [_eeee *2+1][_fagc ]=_bbg ;_gdab [_eeee ][_fagc *2]=_geff ;_gdab [_eeee ][_fagc *2+1]=_fggc ;};};for _bbcf :=0;_bbcf < _afd *2-1;_bbcf ++{for _bac :=0;_bac < (_afd -1);_bac ++{var _cga int ;for _gfgg :=0;_gfgg < 2;_gfgg ++{for _gbdbf :=0;_gbdbf < 2;_gbdbf ++{_cga +=_gdfa [_bbcf +_gfgg ][_bac +_gbdbf ];};};if _cga > _bccf {return false ;};};};for _cccf :=0;_cccf < (_afd -1);_cccf ++{for _dgd :=0;_dgd < ((_afd *2)-1);_dgd ++{var _efdcd int ;for _cbbg :=0;_cbbg < 2;_cbbg ++{for _decf :=0;_decf < 2;_decf ++{_efdcd +=_gdab [_cccf +_cbbg ][_dgd +_decf ];};};if _efdcd > _ebc {return false ;};};};for _aed :=0;_aed < (_afd -2);_aed ++{for _dabb :=0;_dabb < (_afd -2);_dabb ++{var _aabaa ,_fdec int ;for _bdge :=0;_bdge < 3;_bdge ++{for _efb :=0;_efb < 3;_efb ++{if _bdge ==_efb {_aabaa +=_fcfg [_aed +_bdge ][_dabb +_efb ];};if (2-_bdge )==_efb {_fdec +=_fcfg [_aed +_bdge ][_dabb +_efb ];};};};if _aabaa > _bccf ||_fdec > _bccf {return false ;};};};for _dfa :=0;_dfa < (_afd -1);_dfa ++{for _ecag :=0;_ecag < (_afd -1);_ecag ++{var _eab int ;for _cgc :=0;_cgc < 2;_cgc ++{for _edc :=0;_edc < 2;_edc ++{_eab +=_fcfg [_dfa +_cgc ][_ecag +_edc ];};};if float64 (_eab )> _gcac {return false ;};};};return true ;};func TstPSymbol (t *_aa .T )*Bitmap {t .Helper ();_fbecc :=New (5,8);_fc .NoError (t ,_fbecc .SetPixel (0,0,1));_fc .NoError (t ,_fbecc .SetPixel (1,0,1));_fc .NoError (t ,_fbecc .SetPixel (2,0,1));_fc .NoError (t ,_fbecc .SetPixel (3,0,1));_fc .NoError (t ,_fbecc .SetPixel (4,1,1));_fc .NoError (t ,_fbecc .SetPixel (0,1,1));_fc .NoError (t ,_fbecc .SetPixel (4,2,1));_fc .NoError (t ,_fbecc .SetPixel (0,2,1));_fc .NoError (t ,_fbecc .SetPixel (4,3,1));_fc .NoError (t ,_fbecc .SetPixel (0,3,1));_fc .NoError (t ,_fbecc .SetPixel (0,4,1));_fc .NoError (t ,_fbecc .SetPixel (1,4,1));_fc .NoError (t ,_fbecc .SetPixel (2,4,1));_fc .NoError (t ,_fbecc .SetPixel (3,4,1));_fc .NoError (t ,_fbecc .SetPixel (0,5,1));_fc .NoError (t ,_fbecc .SetPixel (0,6,1));_fc .NoError (t ,_fbecc .SetPixel (0,7,1));return _fbecc ;};func _fbgd (_fcag *Bitmap ,_eabc ,_ade ,_gaec ,_cfdce int ,_cgce RasterOperator ,_aeeb *Bitmap ,_ccfd ,_cacf int )error {var (_ffdg byte ;_fecdc int ;_gfaf int ;_bbeg ,_adeg int ;_edeg ,_gec int ;);_ebeaa :=_gaec >>3;_ebb :=_gaec &7;if _ebb > 0{_ffdg =_gced [_ebb ];};_fecdc =_aeeb .RowStride *_cacf +(_ccfd >>3);_gfaf =_fcag .RowStride *_ade +(_eabc >>3);switch _cgce {case PixSrc :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]=_aeeb .Data [_bbeg ];_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],_aeeb .Data [_bbeg ],_ffdg );};};case PixNotSrc :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]=^(_aeeb .Data [_bbeg ]);_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],^_aeeb .Data [_bbeg ],_ffdg );};};case PixSrcOrDst :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]|=_aeeb .Data [_bbeg ];_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],_aeeb .Data [_bbeg ]|_fcag .Data [_adeg ],_ffdg );};};case PixSrcAndDst :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]&=_aeeb .Data [_bbeg ];_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],_aeeb .Data [_bbeg ]&_fcag .Data [_adeg ],_ffdg );};};case PixSrcXorDst :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]^=_aeeb .Data [_bbeg ];_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],_aeeb .Data [_bbeg ]^_fcag .Data [_adeg ],_ffdg );};};case PixNotSrcOrDst :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]|=^(_aeeb .Data [_bbeg ]);_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],^(_aeeb .Data [_bbeg ])|_fcag .Data [_adeg ],_ffdg );};};case PixNotSrcAndDst :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]&=^(_aeeb .Data [_bbeg ]);_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],^(_aeeb .Data [_bbeg ])&_fcag .Data [_adeg ],_ffdg );};};case PixSrcOrNotDst :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]=_aeeb .Data [_bbeg ]|^(_fcag .Data [_adeg ]);_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],_aeeb .Data [_bbeg ]|^(_fcag .Data [_adeg ]),_ffdg );};};case PixSrcAndNotDst :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]=_aeeb .Data [_bbeg ]&^(_fcag .Data [_adeg ]);_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],_aeeb .Data [_bbeg ]&^(_fcag .Data [_adeg ]),_ffdg );};};case PixNotPixSrcOrDst :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]=^(_aeeb .Data [_bbeg ]|_fcag .Data [_adeg ]);_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],^(_aeeb .Data [_bbeg ]|_fcag .Data [_adeg ]),_ffdg );};};case PixNotPixSrcAndDst :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]=^(_aeeb .Data [_bbeg ]&_fcag .Data [_adeg ]);_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],^(_aeeb .Data [_bbeg ]&_fcag .Data [_adeg ]),_ffdg );};};case PixNotPixSrcXorDst :for _edeg =0;_edeg < _cfdce ;_edeg ++{_bbeg =_fecdc +_edeg *_aeeb .RowStride ;_adeg =_gfaf +_edeg *_fcag .RowStride ;for _gec =0;_gec < _ebeaa ;_gec ++{_fcag .Data [_adeg ]=^(_aeeb .Data [_bbeg ]^_fcag .Data [_adeg ]);_adeg ++;_bbeg ++;};if _ebb > 0{_fcag .Data [_adeg ]=_gfab (_fcag .Data [_adeg ],^(_aeeb .Data [_bbeg ]^_fcag .Data [_adeg ]),_ffdg );};};default:_c .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_cgce );return _a .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _bbcag (_fccc ,_gdde *Bitmap ,_bbga *Selection )(*Bitmap ,error ){const _ddde ="\u006f\u0070\u0065\u006e";var _gcbf error ;_fccc ,_gcbf =_cdfg (_fccc ,_gdde ,_bbga );if _gcbf !=nil {return nil ,_a .Wrap (_gcbf ,_ddde ,"");};_afdf ,_gcbf :=_bfee (nil ,_gdde ,_bbga );if _gcbf !=nil {return nil ,_a .Wrap (_gcbf ,_ddde ,"");};_ ,_gcbf =_dffeg (_fccc ,_afdf ,_bbga );if _gcbf !=nil {return nil ,_a .Wrap (_gcbf ,_ddde ,"");};return _fccc ,nil ;};func (_afc *Bitmap )GetBitOffset (x int )int {return x &0x07};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _dfdc ,_ddcb int ;_ffacd :=src .RowStride -1;if x < 0{_ddcb =-x ;x =0;}else if x +src .Width > dst .Width {_ffacd -=src .Width +x -dst .Width ;};if y < 0{_dfdc =-y ;y =0;_ddcb +=src .RowStride ;_ffacd +=src .RowStride ;}else if y +src .Height > dst .Height {_dfdc =src .Height +y -dst .Height ;};var (_gcfa int ;_eec error ;);_edgg :=x &0x07;_fggcf :=8-_edgg ;_adde :=src .Width &0x07;_fgf :=_fggcf -_adde ;_cgff :=_fggcf &0x07!=0;_dfaa :=src .Width <=((_ffacd -_ddcb )<<3)+_fggcf ;_dffd :=dst .GetByteIndex (x ,y );_dfbc :=_dfdc +dst .Height ;if src .Height > _dfbc {_gcfa =_dfbc ;}else {_gcfa =src .Height ;};switch {case !_cgff :_eec =_feec (src ,dst ,_dfdc ,_gcfa ,_dffd ,_ddcb ,_ffacd ,op );case _dfaa :_eec =_dbde (src ,dst ,_dfdc ,_gcfa ,_dffd ,_ddcb ,_ffacd ,_fgf ,_edgg ,_fggcf ,op );default:_eec =_egca (src ,dst ,_dfdc ,_gcfa ,_dffd ,_ddcb ,_ffacd ,_fgf ,_edgg ,_fggcf ,op ,_adde );};return _eec ;};func (_bbgb *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _gfef ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_dgbgf ,_dade :=_bbgb .selectByIndexes (idx );if _dade !=nil {return nil ,_a .Wrap (_dade ,_gfef ,"");};return _dgbgf ,nil ;};func _faaga (_beeg ,_ddcbc *Bitmap ,_bef ,_cgee int )(*Bitmap ,error ){const _efedb ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _ddcbc ==nil {return nil ,_a .Error (_efedb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bef < 1||_cgee < 1{return nil ,_a .Error (_efedb ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _bef ==1&&_cgee ==1{return _ddcbc .Copy (),nil ;};if _bef ==1||_cgee ==1{_bfac :=SelCreateBrick (_cgee ,_bef ,_cgee /2,_bef /2,SelHit );var _dcfc error ;_beeg ,_dcfc =_age (_beeg ,_ddcbc ,_bfac );if _dcfc !=nil {return nil ,_a .Wrap (_dcfc ,_efedb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _beeg ,nil ;};_afgdf :=SelCreateBrick (1,_bef ,0,_bef /2,SelHit );_gdfb :=SelCreateBrick (_cgee ,1,_cgee /2,0,SelHit );_ccg ,_cfcfe :=_dffeg (nil ,_ddcbc ,_afgdf );if _cfcfe !=nil {return nil ,_a .Wrap (_cfcfe ,_efedb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _beeg ,_cfcfe =_dffeg (_beeg ,_ccg ,_gdfb );_cfcfe !=nil {return nil ,_a .Wrap (_cfcfe ,_efedb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_cfcfe =_bfee (_ccg ,_beeg ,_afgdf );_cfcfe !=nil {return nil ,_a .Wrap (_cfcfe ,_efedb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};if _ ,_cfcfe =_bfee (_beeg ,_ccg ,_gdfb );_cfcfe !=nil {return nil ,_a .Wrap (_cfcfe ,_efedb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _beeg ,nil ;};func TstImageBitmapData ()[]byte {return _gddbc .Data };func (_gbf *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _gbf .addBorderGeneral (left ,right ,top ,bot ,val );};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _cbg ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_fcb :=_fba (width ,height );_fcb .Data =data ;if len (data )< height *_fcb .RowStride {return nil ,_a .Errorf (_cbg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_fcb .RowStride );};return _fcb ,nil ;};func New (width ,height int )*Bitmap {_ggf :=_fba (width ,height );_ggf .Data =make ([]byte ,height *_ggf .RowStride );return _ggf ;};func (_eeg *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_bgae bool ,_gabd error ){const _acaa ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_ddec ();};_egcff :=_eeg .Width >>3;_ecge :=_eeg .Width &7;_fcdc :=byte (0xff<<uint (8-_ecge ));var (_aabbb ,_dcge ,_bbe ,_cdcf int ;_ccfg byte ;);for _aabbb =0;_aabbb < _eeg .Height ;_aabbb ++{_bbe =_eeg .RowStride *_aabbb ;for _dcge =0;_dcge < _egcff ;_dcge ++{_ccfg ,_gabd =_eeg .GetByte (_bbe +_dcge );if _gabd !=nil {return false ,_a .Wrap (_gabd ,_acaa ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_cdcf +=tab8 [_ccfg ];};if _ecge !=0{_ccfg ,_gabd =_eeg .GetByte (_bbe +_dcge );if _gabd !=nil {return false ,_a .Wrap (_gabd ,_acaa ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_ccfg &=_fcdc ;_cdcf +=tab8 [_ccfg ];};if _cdcf > thresh {return true ,nil ;};};return _bgae ,nil ;};func _fccg (_bfba ,_bgdd int ,_bcgg string )*Selection {_aafag :=&Selection {Height :_bfba ,Width :_bgdd ,Name :_bcgg };_aafag .Data =make ([][]SelectionValue ,_bfba );for _ffffe :=0;_ffffe < _bfba ;_ffffe ++{_aafag .Data [_ffffe ]=make ([]SelectionValue ,_bgdd );};return _aafag ;};func _dd (_aca ,_gdbe *Bitmap )(_ccc error ){const _fe ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_df :=_gdbe .RowStride ;_ag :=_aca .RowStride ;var _cfa ,_caa ,_ad ,_adg ,_fea int ;for _ad =0;_ad < _gdbe .Height ;_ad ++{_cfa =_ad *_df ;_caa =8*_ad *_ag ;for _adg =0;_adg < _df ;_adg ++{if _ccc =_aca .setEightBytes (_caa +_adg *8,_ebd [_gdbe .Data [_cfa +_adg ]]);_ccc !=nil {return _a .Wrap (_ccc ,_fe ,"");};};for _fea =1;_fea < 8;_fea ++{for _adg =0;_adg < _ag ;_adg ++{if _ccc =_aca .SetByte (_caa +_fea *_ag +_adg ,_aca .Data [_caa +_adg ]);_ccc !=nil {return _a .Wrap (_ccc ,_fe ,"");};};};};return nil ;};func (_gfdf *Bitmap )nextOnPixelLow (_bbcd ,_eeeb ,_fdcgc ,_dba ,_bfaf int )(_bbdc _fce .Point ,_faab bool ,_bgaf error ){const _bcad ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_ffab int ;_eeb byte ;);_abfb :=_bfaf *_fdcgc ;_adf :=_abfb +(_dba /8);if _eeb ,_bgaf =_gfdf .GetByte (_adf );_bgaf !=nil {return _bbdc ,false ,_a .Wrap (_bgaf ,_bcad ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");};if _eeb !=0{_effb :=_dba -(_dba %8)+7;for _ffab =_dba ;_ffab <=_effb &&_ffab < _bbcd ;_ffab ++{if _gfdf .GetPixel (_ffab ,_bfaf ){_bbdc .X =_ffab ;_bbdc .Y =_bfaf ;return _bbdc ,true ,nil ;};};};_acg :=(_dba /8)+1;_ffab =8*_acg ;var _dgf int ;for _adf =_abfb +_acg ;_ffab < _bbcd ;_adf ,_ffab =_adf +1,_ffab +8{if _eeb ,_bgaf =_gfdf .GetByte (_adf );_bgaf !=nil {return _bbdc ,false ,_a .Wrap (_bgaf ,_bcad ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _eeb ==0{continue ;};for _dgf =0;_dgf < 8&&_ffab < _bbcd ;_dgf ,_ffab =_dgf +1,_ffab +1{if _gfdf .GetPixel (_ffab ,_bfaf ){_bbdc .X =_ffab ;_bbdc .Y =_bfaf ;return _bbdc ,true ,nil ;};};};for _dgec :=_bfaf +1;_dgec < _eeeb ;_dgec ++{_abfb =_dgec *_fdcgc ;for _adf ,_ffab =_abfb ,0;_ffab < _bbcd ;_adf ,_ffab =_adf +1,_ffab +8{if _eeb ,_bgaf =_gfdf .GetByte (_adf );_bgaf !=nil {return _bbdc ,false ,_a .Wrap (_bgaf ,_bcad ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _eeb ==0{continue ;};for _dgf =0;_dgf < 8&&_ffab < _bbcd ;_dgf ,_ffab =_dgf +1,_ffab +1{if _gfdf .GetPixel (_ffab ,_dgec ){_bbdc .X =_ffab ;_bbdc .Y =_dgec ;return _bbdc ,true ,nil ;};};};};return _bbdc ,false ,nil ;};func TstWSymbol (t *_aa .T ,scale ...int )*Bitmap {_gbff ,_cdagb :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_fc .NoError (t ,_cdagb );return TstGetScaledSymbol (t ,_gbff ,scale ...);};func (_faeb *byHeight )Len ()int {return len (_faeb .Values )};func (_gcbfe *ClassedPoints )SortByY (){_gcbfe ._adce =_gcbfe .ySortFunction ();_fd .Sort (_gcbfe )};func _fcg (_g ,_cf *Bitmap )(_gg error ){const _ef ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_cfg :=_cf .RowStride ;_aab :=_g .RowStride ;var (_gc byte ;_gb uint16 ;_ca ,_ga ,_ed ,_d ,_gd int ;);for _ed =0;_ed < _cf .Height ;_ed ++{_ca =_ed *_cfg ;_ga =2*_ed *_aab ;for _d =0;_d < _cfg ;_d ++{_gc =_cf .Data [_ca +_d ];_gb =_gcdcd [_gc ];_gd =_ga +_d *2;if _g .RowStride !=_cf .RowStride *2&&(_d +1)*2> _g .RowStride {_gg =_g .SetByte (_gd ,byte (_gb >>8));}else {_gg =_g .setTwoBytes (_gd ,_gb );};if _gg !=nil {return _a .Wrap (_gg ,_ef ,"");};};for _d =0;_d < _aab ;_d ++{_gd =_ga +_aab +_d ;_gc =_g .Data [_ga +_d ];if _gg =_g .SetByte (_gd ,_gc );_gg !=nil {return _a .Wrapf (_gg ,_ef ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ga +_d ,_ga +_aab +_d );};};};return nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_cfcf bool ,_fefe error ){const _dagg ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_fdgbb ,_cdd :=p1 .Width ,p1 .Height ;_fceg ,_dfdg :=p3 .Width ,p3 .Height ;if _ff .Abs (_fdgbb -_fceg )> maxDiffW {return false ,nil ;};if _ff .Abs (_cdd -_dfdg )> maxDiffH {return false ,nil ;};_acbb :=int (float32 (area1 )*(1.0-rank )+0.5);_cegf :=int (float32 (area3 )*(1.0-rank )+0.5);var _fgfd ,_eegg int ;if delX >=0{_fgfd =int (delX +0.5);}else {_fgfd =int (delX -0.5);};if delY >=0{_eegg =int (delY +0.5);}else {_eegg =int (delY -0.5);};_egcc :=p1 .CreateTemplate ();if _fefe =_egcc .RasterOperation (0,0,_fdgbb ,_cdd ,PixSrc ,p1 ,0,0);_fefe !=nil {return false ,_a .Wrap (_fefe ,_dagg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _fefe =_egcc .RasterOperation (_fgfd ,_eegg ,_fdgbb ,_cdd ,PixNotSrcAndDst ,p4 ,0,0);_fefe !=nil {return false ,_a .Wrap (_fefe ,_dagg ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_cfcf ,_fefe =_egcc .ThresholdPixelSum (_acbb ,tab8 );if _fefe !=nil {return false ,_a .Wrap (_fefe ,_dagg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _cfcf {return false ,nil ;};if _fefe =_egcc .RasterOperation (_fgfd ,_eegg ,_fceg ,_dfdg ,PixSrc ,p3 ,0,0);_fefe !=nil {return false ,_a .Wrap (_fefe ,_dagg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _fefe =_egcc .RasterOperation (0,0,_fceg ,_dfdg ,PixNotSrcAndDst ,p2 ,0,0);_fefe !=nil {return false ,_a .Wrap (_fefe ,_dagg ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_cfcf ,_fefe =_egcc .ThresholdPixelSum (_cegf ,tab8 );if _fefe !=nil {return false ,_a .Wrap (_fefe ,_dagg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_cfcf ,nil ;};var MorphBC BoundaryCondition ;func _caad (_ecaf ,_acac *Bitmap )(*Bitmap ,error ){if _acac ==nil {return nil ,_a .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _acac ==_ecaf {return _ecaf ,nil ;};if _ecaf ==nil {_ecaf =_acac .createTemplate ();copy (_ecaf .Data ,_acac .Data );return _ecaf ,nil ;};_ffc :=_ecaf .resizeImageData (_acac );if _ffc !=nil {return nil ,_a .Wrap (_ffc ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_ecaf .Text =_acac .Text ;copy (_ecaf .Data ,_acac .Data );return _ecaf ,nil ;};func (_geacb *Boxes )Get (i int )(*_fce .Rectangle ,error ){const _gdad ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _geacb ==nil {return nil ,_a .Error (_gdad ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_geacb )-1{return nil ,_a .Errorf (_gdad ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_geacb )[i ],nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_bdcg float64 ,_gebe error ){const _febc ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";if bm1 ==nil ||bm2 ==nil {return 0,_a .Error (_febc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_a .Error (_febc ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if area1 <=0||area2 <=0{return 0,_a .Error (_febc ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_gfcb ,_cbec :=bm1 .Width ,bm1 .Height ;_aggb ,_afgb :=bm2 .Width ,bm2 .Height ;_gbebe :=_fcdf (_gfcb -_aggb );if _gbebe > maxDiffW {return 0,nil ;};_aaag :=_fcdf (_cbec -_afgb );if _aaag > maxDiffH {return 0,nil ;};var _ccbg ,_caaf int ;if delX >=0{_ccbg =int (delX +0.5);}else {_ccbg =int (delX -0.5);};if delY >=0{_caaf =int (delY +0.5);}else {_caaf =int (delY -0.5);};_ecda :=_begf (_caaf ,0);_gbef :=_afdb (_afgb +_caaf ,_cbec );_bffd :=bm1 .RowStride *_ecda ;_bcfc :=bm2 .RowStride *(_ecda -_caaf );_fcda :=_begf (_ccbg ,0);_ceaa :=_afdb (_aggb +_ccbg ,_gfcb );_efad :=bm2 .RowStride ;var _bbcdd ,_cffg int ;if _ccbg >=8{_bbcdd =_ccbg >>3;_bffd +=_bbcdd ;_fcda -=_bbcdd <<3;_ceaa -=_bbcdd <<3;_ccbg &=7;}else if _ccbg <=-8{_cffg =-((_ccbg +7)>>3);_bcfc +=_cffg ;_efad -=_cffg ;_ccbg +=_cffg <<3;};if _fcda >=_ceaa ||_ecda >=_gbef {return 0,nil ;};_cdeb :=(_ceaa +7)>>3;var (_ebff ,_bgcc ,_gccb byte ;_dgdd ,_dgeg ,_cgba int ;);switch {case _ccbg ==0:for _cgba =_ecda ;_cgba < _gbef ;_cgba ,_bffd ,_bcfc =_cgba +1,_bffd +bm1 .RowStride ,_bcfc +bm2 .RowStride {for _dgeg =0;_dgeg < _cdeb ;_dgeg ++{_gccb =bm1 .Data [_bffd +_dgeg ]&bm2 .Data [_bcfc +_dgeg ];_dgdd +=tab [_gccb ];};};case _ccbg > 0:if _efad < _cdeb {for _cgba =_ecda ;_cgba < _gbef ;_cgba ,_bffd ,_bcfc =_cgba +1,_bffd +bm1 .RowStride ,_bcfc +bm2 .RowStride {_ebff ,_bgcc =bm1 .Data [_bffd ],bm2 .Data [_bcfc ]>>uint (_ccbg );_gccb =_ebff &_bgcc ;_dgdd +=tab [_gccb ];for _dgeg =1;_dgeg < _efad ;_dgeg ++{_ebff ,_bgcc =bm1 .Data [_bffd +_dgeg ],(bm2 .Data [_bcfc +_dgeg ]>>uint (_ccbg ))|(bm2 .Data [_bcfc +_dgeg -1]<<uint (8-_ccbg ));_gccb =_ebff &_bgcc ;_dgdd +=tab [_gccb ];};_ebff =bm1 .Data [_bffd +_dgeg ];_bgcc =bm2 .Data [_bcfc +_dgeg -1]<<uint (8-_ccbg );_gccb =_ebff &_bgcc ;_dgdd +=tab [_gccb ];};}else {for _cgba =_ecda ;_cgba < _gbef ;_cgba ,_bffd ,_bcfc =_cgba +1,_bffd +bm1 .RowStride ,_bcfc +bm2 .RowStride {_ebff ,_bgcc =bm1 .Data [_bffd ],bm2 .Data [_bcfc ]>>uint (_ccbg );_gccb =_ebff &_bgcc ;_dgdd +=tab [_gccb ];for _dgeg =1;_dgeg < _cdeb ;_dgeg ++{_ebff =bm1 .Data [_bffd +_dgeg ];_bgcc =(bm2 .Data [_bcfc +_dgeg ]>>uint (_ccbg ))|(bm2 .Data [_bcfc +_dgeg -1]<<uint (8-_ccbg ));_gccb =_ebff &_bgcc ;_dgdd +=tab [_gccb ];};};};default:if _cdeb < _efad {for _cgba =_ecda ;_cgba < _gbef ;_cgba ,_bffd ,_bcfc =_cgba +1,_bffd +bm1 .RowStride ,_bcfc +bm2 .RowStride {for _dgeg =0;_dgeg < _cdeb ;_dgeg ++{_ebff =bm1 .Data [_bffd +_dgeg ];_bgcc =bm2 .Data [_bcfc +_dgeg ]<<uint (-_ccbg );_bgcc |=bm2 .Data [_bcfc +_dgeg +1]>>uint (8+_ccbg );_gccb =_ebff &_bgcc ;_dgdd +=tab [_gccb ];};};}else {for _cgba =_ecda ;_cgba < _gbef ;_cgba ,_bffd ,_bcfc =_cgba +1,_bffd +bm1 .RowStride ,_bcfc +bm2 .RowStride {for _dgeg =0;_dgeg < _cdeb -1;_dgeg ++{_ebff =bm1 .Data [_bffd +_dgeg ];_bgcc =bm2 .Data [_bcfc +_dgeg ]<<uint (-_ccbg );_bgcc |=bm2 .Data [_bcfc +_dgeg +1]>>uint (8+_ccbg );_gccb =_ebff &_bgcc ;_dgdd +=tab [_gccb ];};_ebff =bm1 .Data [_bffd +_dgeg ];_bgcc =bm2 .Data [_bcfc +_dgeg ]<<uint (-_ccbg );_gccb =_ebff &_bgcc ;_dgdd +=tab [_gccb ];};};};_bdcg =float64 (_dgdd )*float64 (_dgdd )/(float64 (area1 )*float64 (area2 ));return _bdcg ,nil ;};func _bgge (_bgcb uint ,_ebf byte )byte {return _ebf >>_bgcb <<_bgcb };var _deca =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};func TstImageBitmap ()*Bitmap {return _gddbc .Copy ()};func (_egad *Bitmap )And (s *Bitmap )(_dcf *Bitmap ,_edbc error ){const _ffe ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _egad ==nil {return nil ,_a .Error (_ffe ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_a .Error (_ffe ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_egad .SizesEqual (s ){_c .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_ffe );};if _dcf ,_edbc =_caad (_dcf ,_egad );_edbc !=nil {return nil ,_a .Wrap (_edbc ,_ffe ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _edbc =_dcf .RasterOperation (0,0,_dcf .Width ,_dcf .Height ,PixSrcAndDst ,s ,0,0);_edbc !=nil {return nil ,_a .Wrap (_edbc ,_ffe ,"");};return _dcf ,nil ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_geaba *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _ccgdd ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_geaba .Values )==0{return nil ,_a .Error (_ccgdd ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_cceea :=&BitmapsArray {};_geaba .SortByWidth ();_aedg :=-1;_ccab :=-1;for _bffg :=0;_bffg < len (_geaba .Values );_bffg ++{_cedd :=_geaba .Values [_bffg ].Width ;if _cedd > _aedg {_aedg =_cedd ;_ccab ++;_cceea .Values =append (_cceea .Values ,&Bitmaps {});};_cceea .Values [_ccab ].AddBitmap (_geaba .Values [_bffg ]);};return _cceea ,nil ;};func _aaee (_ffcf *Bitmap ,_afce ,_cecd ,_dabe ,_bdfce int ,_edfe RasterOperator ){if _afce < 0{_dabe +=_afce ;_afce =0;};_acdfe :=_afce +_dabe -_ffcf .Width ;if _acdfe > 0{_dabe -=_acdfe ;};if _cecd < 0{_bdfce +=_cecd ;_cecd =0;};_dcae :=_cecd +_bdfce -_ffcf .Height ;if _dcae > 0{_bdfce -=_dcae ;};if _dabe <=0||_bdfce <=0{return ;};if (_afce &7)==0{_eeab (_ffcf ,_afce ,_cecd ,_dabe ,_bdfce ,_edfe );}else {_daab (_ffcf ,_afce ,_cecd ,_dabe ,_bdfce ,_edfe );};};func _fba (_fead ,_fde int )*Bitmap {return &Bitmap {Width :_fead ,Height :_fde ,RowStride :(_fead +7)>>3};};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func _daab (_eaggf *Bitmap ,_gcea ,_ageb int ,_aeef ,_eecac int ,_dfag RasterOperator ){var (_cdebc bool ;_cbff bool ;_ecac int ;_adab int ;_gggg int ;_gdbf int ;_bagc bool ;_cabe byte ;);_ccfdg :=8-(_gcea &7);_ggfba :=_edgeg [_ccfdg ];_fdgca :=_eaggf .RowStride *_ageb +(_gcea >>3);if _aeef < _ccfdg {_cdebc =true ;_ggfba &=_gced [8-_ccfdg +_aeef ];};if !_cdebc {_ecac =(_aeef -_ccfdg )>>3;if _ecac !=0{_cbff =true ;_adab =_fdgca +1;};};_gggg =(_gcea +_aeef )&7;if !(_cdebc ||_gggg ==0){_bagc =true ;_cabe =_gced [_gggg ];_gdbf =_fdgca +1+_ecac ;};var _edcca ,_ebec int ;switch _dfag {case PixClr :for _edcca =0;_edcca < _eecac ;_edcca ++{_eaggf .Data [_fdgca ]=_gfab (_eaggf .Data [_fdgca ],0x0,_ggfba );_fdgca +=_eaggf .RowStride ;};if _cbff {for _edcca =0;_edcca < _eecac ;_edcca ++{for _ebec =0;_ebec < _ecac ;_ebec ++{_eaggf .Data [_adab +_ebec ]=0x0;};_adab +=_eaggf .RowStride ;};};if _bagc {for _edcca =0;_edcca < _eecac ;_edcca ++{_eaggf .Data [_gdbf ]=_gfab (_eaggf .Data [_gdbf ],0x0,_cabe );_gdbf +=_eaggf .RowStride ;};};case PixSet :for _edcca =0;_edcca < _eecac ;_edcca ++{_eaggf .Data [_fdgca ]=_gfab (_eaggf .Data [_fdgca ],0xff,_ggfba );_fdgca +=_eaggf .RowStride ;};if _cbff {for _edcca =0;_edcca < _eecac ;_edcca ++{for _ebec =0;_ebec < _ecac ;_ebec ++{_eaggf .Data [_adab +_ebec ]=0xff;};_adab +=_eaggf .RowStride ;};};if _bagc {for _edcca =0;_edcca < _eecac ;_edcca ++{_eaggf .Data [_gdbf ]=_gfab (_eaggf .Data [_gdbf ],0xff,_cabe );_gdbf +=_eaggf .RowStride ;};};case PixNotDst :for _edcca =0;_edcca < _eecac ;_edcca ++{_eaggf .Data [_fdgca ]=_gfab (_eaggf .Data [_fdgca ],^_eaggf .Data [_fdgca ],_ggfba );_fdgca +=_eaggf .RowStride ;};if _cbff {for _edcca =0;_edcca < _eecac ;_edcca ++{for _ebec =0;_ebec < _ecac ;_ebec ++{_eaggf .Data [_adab +_ebec ]=^(_eaggf .Data [_adab +_ebec ]);};_adab +=_eaggf .RowStride ;};};if _bagc {for _edcca =0;_edcca < _eecac ;_edcca ++{_eaggf .Data [_gdbf ]=_gfab (_eaggf .Data [_gdbf ],^_eaggf .Data [_gdbf ],_cabe );_gdbf +=_eaggf .RowStride ;};};};};func _aeba (_bcce ,_fbb byte ,_fbgc CombinationOperator )byte {switch _fbgc {case CmbOpOr :return _fbb |_bcce ;case CmbOpAnd :return _fbb &_bcce ;case CmbOpXor :return _fbb ^_bcce ;case CmbOpXNor :return ^(_fbb ^_bcce );case CmbOpNot :return ^(_fbb );default:return _fbb ;};};const _bgga =5000;func TstASymbol (t *_aa .T )*Bitmap {t .Helper ();_bafea :=New (6,6);_fc .NoError (t ,_bafea .SetPixel (1,0,1));_fc .NoError (t ,_bafea .SetPixel (2,0,1));_fc .NoError (t ,_bafea .SetPixel (3,0,1));_fc .NoError (t ,_bafea .SetPixel (4,0,1));_fc .NoError (t ,_bafea .SetPixel (5,1,1));_fc .NoError (t ,_bafea .SetPixel (1,2,1));_fc .NoError (t ,_bafea .SetPixel (2,2,1));_fc .NoError (t ,_bafea .SetPixel (3,2,1));_fc .NoError (t ,_bafea .SetPixel (4,2,1));_fc .NoError (t ,_bafea .SetPixel (5,2,1));_fc .NoError (t ,_bafea .SetPixel (0,3,1));_fc .NoError (t ,_bafea .SetPixel (5,3,1));_fc .NoError (t ,_bafea .SetPixel (0,4,1));_fc .NoError (t ,_bafea .SetPixel (5,4,1));_fc .NoError (t ,_bafea .SetPixel (1,5,1));_fc .NoError (t ,_bafea .SetPixel (2,5,1));_fc .NoError (t ,_bafea .SetPixel (3,5,1));_fc .NoError (t ,_bafea .SetPixel (4,5,1));_fc .NoError (t ,_bafea .SetPixel (5,5,1));return _bafea ;};func (_cgd *Bitmap )GetVanillaData ()[]byte {if _cgd .Color ==Chocolate {_cgd .inverseData ();};return _cgd .Data ;};func init (){const _dfbcc ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_ffbfd =New (50,40);var _beae error ;_ffbfd ,_beae =_ffbfd .AddBorder (2,1);if _beae !=nil {panic (_a .Wrap (_beae ,_dfbcc ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_gddbc ,_beae =NewWithData (50,22,_deca );if _beae !=nil {panic (_a .Wrap (_beae ,_dfbcc ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func _ddgca (_ebdb *Bitmap ,_dfac ,_gdfae int ,_febee ,_egcb int ,_fbec RasterOperator ,_dfbce *Bitmap ,_dfeg ,_fgfcd int )error {var _edca ,_dfad ,_aga ,_deda int ;if _dfac < 0{_dfeg -=_dfac ;_febee +=_dfac ;_dfac =0;};if _dfeg < 0{_dfac -=_dfeg ;_febee +=_dfeg ;_dfeg =0;};_edca =_dfac +_febee -_ebdb .Width ;if _edca > 0{_febee -=_edca ;};_dfad =_dfeg +_febee -_dfbce .Width ;if _dfad > 0{_febee -=_dfad ;};if _gdfae < 0{_fgfcd -=_gdfae ;_egcb +=_gdfae ;_gdfae =0;};if _fgfcd < 0{_gdfae -=_fgfcd ;_egcb +=_fgfcd ;_fgfcd =0;};_aga =_gdfae +_egcb -_ebdb .Height ;if _aga > 0{_egcb -=_aga ;};_deda =_fgfcd +_egcb -_dfbce .Height ;if _deda > 0{_egcb -=_deda ;};if _febee <=0||_egcb <=0{return nil ;};var _dcb error ;switch {case _dfac &7==0&&_dfeg &7==0:_dcb =_fbgd (_ebdb ,_dfac ,_gdfae ,_febee ,_egcb ,_fbec ,_dfbce ,_dfeg ,_fgfcd );case _dfac &7==_dfeg &7:_dcb =_facea (_ebdb ,_dfac ,_gdfae ,_febee ,_egcb ,_fbec ,_dfbce ,_dfeg ,_fgfcd );default:_dcb =_cgadd (_ebdb ,_dfac ,_gdfae ,_febee ,_egcb ,_fbec ,_dfbce ,_dfeg ,_fgfcd );};if _dcb !=nil {return _a .Wrap (_dcb ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};type Color int ;func (_gfac *Bitmap )CreateTemplate ()*Bitmap {return _gfac .createTemplate ()};func (_bgdf *Bitmaps )selectByIndexes (_acgc []int )(*Bitmaps ,error ){_ggff :=&Bitmaps {};for _ ,_gebc :=range _acgc {_ebfg ,_bdfga :=_bgdf .GetBitmap (_gebc );if _bdfga !=nil {return nil ,_a .Wrap (_bdfga ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_ggff .AddBitmap (_ebfg );};return _ggff ,nil ;};type LocationFilter int ;func (_fcfgc Points )YSorter ()func (_fbce ,_bbaeb int )bool {return func (_fdd ,_daeeb int )bool {return _fcfgc [_fdd ].Y < _fcfgc [_daeeb ].Y };};type BoundaryCondition int ;func (_gagb *Bitmap )Equals (s *Bitmap )bool {if len (_gagb .Data )!=len (s .Data )||_gagb .Width !=s .Width ||_gagb .Height !=s .Height {return false ;};for _bdgg :=0;_bdgg < _gagb .Height ;_bdgg ++{_bde :=_bdgg *_gagb .RowStride ;for _dcg :=0;_dcg < _gagb .RowStride ;_dcg ++{if _gagb .Data [_bde +_dcg ]!=s .Data [_bde +_dcg ]{return false ;};};};return true ;};func (_bad *Bitmaps )SortByHeight (){_fgbac :=(*byHeight )(_bad );_fd .Sort (_fgbac )};func _aeed (_ggec *Bitmap ,_gdbbg *_ff .Stack ,_eeeef ,_dfgb int )(_dfbbf *_fce .Rectangle ,_adaf error ){const _ccge ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _ggec ==nil {return nil ,_a .Error (_ccge ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _gdbbg ==nil {return nil ,_a .Error (_ccge ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_fcff ,_cdde :=_ggec .Width ,_ggec .Height ;_dfdb :=_fcff -1;_afee :=_cdde -1;if _eeeef < 0||_eeeef > _dfdb ||_dfgb < 0||_dfgb > _afee ||!_ggec .GetPixel (_eeeef ,_dfgb ){return nil ,nil ;};_ddfdc :=_fce .Rect (100000,100000,0,0);if _adaf =_dcbf (_gdbbg ,_eeeef ,_eeeef ,_dfgb ,1,_afee ,&_ddfdc );_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _adaf =_dcbf (_gdbbg ,_eeeef ,_eeeef ,_dfgb +1,-1,_afee ,&_ddfdc );_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_ddfdc .Min .X ,_ddfdc .Max .X =_eeeef ,_eeeef ;_ddfdc .Min .Y ,_ddfdc .Max .Y =_dfgb ,_dfgb ;var (_ddfa *fillSegment ;_bedc int ;);for _gdbbg .Len ()> 0{if _ddfa ,_adaf =_fegb (_gdbbg );_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"");};_dfgb =_ddfa ._ecbcb ;for _eeeef =_ddfa ._ccbc -1;_eeeef >=0&&_ggec .GetPixel (_eeeef ,_dfgb );_eeeef --{if _adaf =_ggec .SetPixel (_eeeef ,_dfgb ,0);_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _eeeef >=_ddfa ._ccbc -1{for {for _eeeef ++;_eeeef <=_ddfa ._gdbfg +1&&_eeeef <=_dfdb &&!_ggec .GetPixel (_eeeef ,_dfgb );_eeeef ++{};_bedc =_eeeef ;if !(_eeeef <=_ddfa ._gdbfg +1&&_eeeef <=_dfdb ){break ;};for ;_eeeef <=_dfdb &&_ggec .GetPixel (_eeeef ,_dfgb );_eeeef ++{if _adaf =_ggec .SetPixel (_eeeef ,_dfgb ,0);_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _adaf =_dcbf (_gdbbg ,_bedc ,_eeeef -1,_ddfa ._ecbcb ,_ddfa ._bcde ,_afee ,&_ddfdc );_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _eeeef > _ddfa ._gdbfg {if _adaf =_dcbf (_gdbbg ,_ddfa ._gdbfg +1,_eeeef -1,_ddfa ._ecbcb ,-_ddfa ._bcde ,_afee ,&_ddfdc );_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};};continue ;};_bedc =_eeeef +1;if _bedc < _ddfa ._ccbc {if _adaf =_dcbf (_gdbbg ,_bedc ,_ddfa ._ccbc -1,_ddfa ._ecbcb ,-_ddfa ._bcde ,_afee ,&_ddfdc );_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_eeeef =_ddfa ._ccbc ;for {for ;_eeeef <=_dfdb &&_ggec .GetPixel (_eeeef ,_dfgb );_eeeef ++{if _adaf =_ggec .SetPixel (_eeeef ,_dfgb ,0);_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _adaf =_dcbf (_gdbbg ,_bedc ,_eeeef -1,_ddfa ._ecbcb ,_ddfa ._bcde ,_afee ,&_ddfdc );_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _eeeef > _ddfa ._gdbfg {if _adaf =_dcbf (_gdbbg ,_ddfa ._gdbfg +1,_eeeef -1,_ddfa ._ecbcb ,-_ddfa ._bcde ,_afee ,&_ddfdc );_adaf !=nil {return nil ,_a .Wrap (_adaf ,_ccge ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _eeeef ++;_eeeef <=_ddfa ._gdbfg +1&&_eeeef <=_dfdb &&!_ggec .GetPixel (_eeeef ,_dfgb );_eeeef ++{};_bedc =_eeeef ;if !(_eeeef <=_ddfa ._gdbfg +1&&_eeeef <=_dfdb ){break ;};};};_ddfdc .Max .X ++;_ddfdc .Max .Y ++;return &_ddfdc ,nil ;};func (_agg *Bitmap )ToImage ()_fce .Image {_gbd ,_egb :=_aac .NewImage (_agg .Width ,_agg .Height ,1,1,_agg .Data ,nil ,nil );if _egb !=nil {_c .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_egb );};return _gbd ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _caad (d ,s )};func (_eda *Bitmap )setEightPartlyBytes (_agdbf ,_aace int ,_gddb uint64 )(_cbcb error ){var (_ggbc byte ;_cccc int ;);const _eebb ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _eegf :=1;_eegf <=_aace ;_eegf ++{_cccc =64-_eegf *8;_ggbc =byte (_gddb >>uint (_cccc )&0xff);_c .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_ggbc ,_agdbf ,_agdbf +_eegf -1,_aace ,_cccc );if _cbcb =_eda .SetByte (_agdbf +_eegf -1,_ggbc );_cbcb !=nil {return _a .Wrap (_cbcb ,_eebb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_cge :=_eda .RowStride *8-_eda .Width ;if _cge ==0{return nil ;};_cccc -=8;_ggbc =byte (_gddb >>uint (_cccc )&0xff)<<uint (_cge );if _cbcb =_eda .SetByte (_agdbf +_aace ,_ggbc );_cbcb !=nil {return _a .Wrap (_cbcb ,_eebb ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_dae *Bitmap )GetUnpaddedData ()([]byte ,error ){_fded :=uint (_dae .Width &0x07);if _fded ==0{return _dae .Data ,nil ;};_cefc :=_dae .Width *_dae .Height ;if _cefc %8!=0{_cefc >>=3;_cefc ++;}else {_cefc >>=3;};_fcdge :=make ([]byte ,_cefc );_cedca :=_ab .NewWriterMSB (_fcdge );const _gfb ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _fdedb :=0;_fdedb < _dae .Height ;_fdedb ++{for _fdba :=0;_fdba < _dae .RowStride ;_fdba ++{_egcf :=_dae .Data [_fdedb *_dae .RowStride +_fdba ];if _fdba !=_dae .RowStride -1{_fdcg :=_cedca .WriteByte (_egcf );if _fdcg !=nil {return nil ,_a .Wrap (_fdcg ,_gfb ,"");};continue ;};for _ffac :=uint (0);_ffac < _fded ;_ffac ++{_egcd :=_cedca .WriteBit (int (_egcf >>(7-_ffac )&0x01));if _egcd !=nil {return nil ,_a .Wrap (_egcd ,_gfb ,"");};};};};return _fcdge ,nil ;};func (_ffbbc Points )GetGeometry (i int )(_dcfg ,_debb float32 ,_dccc error ){if i > len (_ffbbc )-1{return 0,0,_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_fega :=_ffbbc [i ];return _fega .X ,_fega .Y ,nil ;};func _age (_edae ,_cebc *Bitmap ,_fbbg *Selection )(*Bitmap ,error ){const _bcab ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _fbbf error ;if _edae ,_fbbf =_cdfg (_edae ,_cebc ,_fbbg );_fbbf !=nil {return nil ,_fbbf ;};_ace ,_fbbf :=_dffeg (nil ,_cebc ,_fbbg );if _fbbf !=nil {return nil ,_a .Wrap (_fbbf ,_bcab ,"");};if _ ,_fbbf =_bfee (_edae ,_ace ,_fbbg );_fbbf !=nil {return nil ,_a .Wrap (_fbbf ,_bcab ,"");};return _edae ,nil ;};func (_fecfc *Boxes )Add (box *_fce .Rectangle )error {if _fecfc ==nil {return _a .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_fecfc =append (*_fecfc ,box );return nil ;};func (_fecf *Bitmap )SetPixel (x ,y int ,pixel byte )error {_egfe :=_fecf .GetByteIndex (x ,y );if _egfe > len (_fecf .Data )-1{return _a .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_egfe );};_bgcd :=_fecf .GetBitOffset (x );_gfad :=uint (7-_bgcd );_ccf :=_fecf .Data [_egfe ];var _ceg byte ;if pixel ==1{_ceg =_ccf |(pixel &0x01<<_gfad );}else {_ceg =_ccf &^(1<<_gfad );};_fecf .Data [_egfe ]=_ceg ;return nil ;};func _gfab (_ccec ,_aadc ,_geffe byte )byte {return (_ccec &^(_geffe ))|(_aadc &_geffe )};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _aeba (oldByte ,newByte ,op );};func (_cee *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _cee .Copy (),nil ;};_bfad ,_cedc :=_cee .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _cedc !=nil {return nil ,_a .Wrap (_cedc ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _bfad ,nil ;};