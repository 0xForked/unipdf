//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_gd "encoding/binary";_ee "github.com/stretchr/testify/require";_da "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_fe "github.com/unidoc/unipdf/v3/internal/imageutil";_ad "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_e "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_be "image";_b "math";_g "sort";_eec "strings";_f "testing";);func TstFrameBitmap ()*Bitmap {return _cefed .Copy ()};func _abca (_gefc ,_cbca *Bitmap ,_dbdg ,_eaggg int )(*Bitmap ,error ){const _ddad ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _cbca ==nil {return nil ,_e .Error (_ddad ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dbdg < 1||_eaggg < 1{return nil ,_e .Error (_ddad ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _dbdg ==1&&_eaggg ==1{return _cbca .Copy (),nil ;};if _dbdg ==1||_eaggg ==1{_daec :=SelCreateBrick (_eaggg ,_dbdg ,_eaggg /2,_dbdg /2,SelHit );var _fefg error ;_gefc ,_fefg =_ecbg (_gefc ,_cbca ,_daec );if _fefg !=nil {return nil ,_e .Wrap (_fefg ,_ddad ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gefc ,nil ;};_gbca :=SelCreateBrick (1,_dbdg ,0,_dbdg /2,SelHit );_fdeb :=SelCreateBrick (_eaggg ,1,_eaggg /2,0,SelHit );_egb ,_gbgf :=_eadb (nil ,_cbca ,_gbca );if _gbgf !=nil {return nil ,_e .Wrap (_gbgf ,_ddad ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _gefc ,_gbgf =_eadb (_gefc ,_egb ,_fdeb );_gbgf !=nil {return nil ,_e .Wrap (_gbgf ,_ddad ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_gbgf =_cafc (_egb ,_gefc ,_gbca );_gbgf !=nil {return nil ,_e .Wrap (_gbgf ,_ddad ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_gbgf =_cafc (_gefc ,_egb ,_fdeb );_gbgf !=nil {return nil ,_e .Wrap (_gbgf ,_ddad ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _gefc ,nil ;};func TstImageBitmapInverseData ()[]byte {_afca :=_ffad .Copy ();_afca .InverseData ();return _afca .Data ;
};func _ebfd (_dddge ,_dcb int )int {if _dddge > _dcb {return _dddge ;};return _dcb ;};func NewClassedPoints (points *Points ,classes _ad .IntSlice )(*ClassedPoints ,error ){const _ebcgc ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_e .Error (_ebcgc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_e .Error (_ebcgc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_cffag :=&ClassedPoints {Points :points ,IntSlice :classes };if _cdfbg :=_cffag .validateIntSlice ();_cdfbg !=nil {return nil ,_e .Wrap (_cdfbg ,_ebcgc ,"");};return _cffag ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _bcgd ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_ace ,_cefd :=p1 .Width ,p1 .Height ;_gfcd ,_acaeb :=p3 .Width ,p3 .Height ;if _ad .Abs (_ace -_gfcd )> maxDiffW {return false ,nil ;};if _ad .Abs (_cefd -_acaeb )> maxDiffH {return false ,nil ;};_fedb :=int (delX +_ad .Sign (delX )*0.5);_aeaa :=int (delY +_ad .Sign (delY )*0.5);
var _bbef error ;_fafa :=p1 .CreateTemplate ();if _bbef =_fafa .RasterOperation (0,0,_ace ,_cefd ,PixSrc ,p1 ,0,0);_bbef !=nil {return false ,_e .Wrap (_bbef ,_bcgd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bbef =_fafa .RasterOperation (_fedb ,_aeaa ,_ace ,_cefd ,PixNotSrcAndDst ,p4 ,0,0);
_bbef !=nil {return false ,_e .Wrap (_bbef ,_bcgd ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _fafa .Zero (){return false ,nil ;};if _bbef =_fafa .RasterOperation (_fedb ,_aeaa ,_gfcd ,_acaeb ,PixSrc ,p3 ,0,0);_bbef !=nil {return false ,_e .Wrap (_bbef ,_bcgd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _bbef =_fafa .RasterOperation (0,0,_gfcd ,_acaeb ,PixNotSrcAndDst ,p2 ,0,0);_bbef !=nil {return false ,_e .Wrap (_bbef ,_bcgd ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _fafa .Zero (),nil ;};func (_abde *Boxes )Get (i int )(*_be .Rectangle ,error ){const _eda ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _abde ==nil {return nil ,_e .Error (_eda ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_abde )-1{return nil ,_e .Errorf (_eda ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_abde )[i ],nil ;};func _fcdb (_decb ,_cdgd ,_gcgge *Bitmap )(*Bitmap ,error ){const _eeeg ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _cdgd ==nil {return nil ,_e .Error (_eeeg ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _gcgge ==nil {return nil ,_e .Error (_eeeg ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _bcab error ;switch {case _decb ==_cdgd :if _bcab =_decb .RasterOperation (0,0,_cdgd .Width ,_cdgd .Height ,PixNotSrcAndDst ,_gcgge ,0,0);
_bcab !=nil {return nil ,_e .Wrap (_bcab ,_eeeg ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _decb ==_gcgge :if _bcab =_decb .RasterOperation (0,0,_cdgd .Width ,_cdgd .Height ,PixNotSrcAndDst ,_cdgd ,0,0);_bcab !=nil {return nil ,_e .Wrap (_bcab ,_eeeg ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_decb ,_bcab =_dfcf (_decb ,_cdgd );if _bcab !=nil {return nil ,_e .Wrap (_bcab ,_eeeg ,"");};if _bcab =_decb .RasterOperation (0,0,_cdgd .Width ,_cdgd .Height ,PixNotSrcAndDst ,_gcgge ,0,0);_bcab !=nil {return nil ,_e .Wrap (_bcab ,_eeeg ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _decb ,nil ;};type Component int ;func (_fgdd *Bitmap )resizeImageData (_aabe *Bitmap )error {if _aabe ==nil {return _e .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fgdd .SizesEqual (_aabe ){return nil ;};_fgdd .Data =make ([]byte ,len (_aabe .Data ));_fgdd .Width =_aabe .Width ;_fgdd .Height =_aabe .Height ;_fgdd .RowStride =_aabe .RowStride ;return nil ;};func (_ggad *ClassedPoints )SortByX (){_ggad ._fggbca =_ggad .xSortFunction ();
_g .Sort (_ggad )};func _edd (_gfbc ,_abg *Bitmap ,_bgac ,_cge ,_ega ,_cfgb ,_acff int ,_gagc CombinationOperator )error {var _ddfc int ;_eadg :=func (){_ddfc ++;_ega +=_abg .RowStride ;_cfgb +=_gfbc .RowStride ;_acff +=_gfbc .RowStride };for _ddfc =_bgac ;
_ddfc < _cge ;_eadg (){_ecfa :=_ega ;for _dffad :=_cfgb ;_dffad <=_acff ;_dffad ++{_ffdd ,_eggfa :=_abg .GetByte (_ecfa );if _eggfa !=nil {return _eggfa ;};_eaaf ,_eggfa :=_gfbc .GetByte (_dffad );if _eggfa !=nil {return _eggfa ;};if _eggfa =_abg .SetByte (_ecfa ,_fgdde (_ffdd ,_eaaf ,_gagc ));
_eggfa !=nil {return _eggfa ;};_ecfa ++;};};return nil ;};func (_efee *Bitmap )SizesEqual (s *Bitmap )bool {if _efee ==s {return true ;};if _efee .Width !=s .Width ||_efee .Height !=s .Height {return false ;};return true ;};func _gcdc (_ffaf *Bitmap ,_aecg ,_bdfd int ,_abee ,_abadb int ,_fddb RasterOperator ){var (_ebedc int ;
_gffff byte ;_aebfe ,_egdb int ;_bfde int ;);_gefg :=_abee >>3;_bfgg :=_abee &7;if _bfgg > 0{_gffff =_fgcb [_bfgg ];};_ebedc =_ffaf .RowStride *_bdfd +(_aecg >>3);switch _fddb {case PixClr :for _aebfe =0;_aebfe < _abadb ;_aebfe ++{_bfde =_ebedc +_aebfe *_ffaf .RowStride ;
for _egdb =0;_egdb < _gefg ;_egdb ++{_ffaf .Data [_bfde ]=0x0;_bfde ++;};if _bfgg > 0{_ffaf .Data [_bfde ]=_baae (_ffaf .Data [_bfde ],0x0,_gffff );};};case PixSet :for _aebfe =0;_aebfe < _abadb ;_aebfe ++{_bfde =_ebedc +_aebfe *_ffaf .RowStride ;for _egdb =0;
_egdb < _gefg ;_egdb ++{_ffaf .Data [_bfde ]=0xff;_bfde ++;};if _bfgg > 0{_ffaf .Data [_bfde ]=_baae (_ffaf .Data [_bfde ],0xff,_gffff );};};case PixNotDst :for _aebfe =0;_aebfe < _abadb ;_aebfe ++{_bfde =_ebedc +_aebfe *_ffaf .RowStride ;for _egdb =0;
_egdb < _gefg ;_egdb ++{_ffaf .Data [_bfde ]=^_ffaf .Data [_bfde ];_bfde ++;};if _bfgg > 0{_ffaf .Data [_bfde ]=_baae (_ffaf .Data [_bfde ],^_ffaf .Data [_bfde ],_gffff );};};};};func _bacef (_caga *_ad .Stack ,_ceab ,_bddab ,_defe ,_dadc ,_ffbf int ,_dfdc *_be .Rectangle )(_cebe error ){const _cgdb ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _caga ==nil {return _e .Error (_cgdb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _dfdc ==nil {return _e .Error (_cgdb ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_dfdc .Min .X =_ad .Min (_dfdc .Min .X ,_ceab );_dfdc .Max .X =_ad .Max (_dfdc .Max .X ,_bddab );_dfdc .Min .Y =_ad .Min (_dfdc .Min .Y ,_defe );_dfdc .Max .Y =_ad .Max (_dfdc .Max .Y ,_defe );if !(_defe +_dadc >=0&&_defe +_dadc <=_ffbf ){return nil ;
};if _caga .Aux ==nil {return _e .Error (_cgdb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _fgddd *fillSegment ;_afdb ,_cgaga :=_caga .Aux .Pop ();if _cgaga {if _fgddd ,_cgaga =_afdb .(*fillSegment );
!_cgaga {return _e .Error (_cgdb ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_fgddd =&fillSegment {};
};_fgddd ._cadf =_ceab ;_fgddd ._abffe =_bddab ;_fgddd ._bcbf =_defe ;_fgddd ._dbfc =_dadc ;_caga .Push (_fgddd );return nil ;};var (_adaf =_adg ();_fabb =_fbbd ();_ffdc =_gg (););func _adg ()(_fgg [256]uint16 ){for _fgd :=0;_fgd < 256;_fgd ++{if _fgd &0x01!=0{_fgg [_fgd ]|=0x3;
};if _fgd &0x02!=0{_fgg [_fgd ]|=0xc;};if _fgd &0x04!=0{_fgg [_fgd ]|=0x30;};if _fgd &0x08!=0{_fgg [_fgd ]|=0xc0;};if _fgd &0x10!=0{_fgg [_fgd ]|=0x300;};if _fgd &0x20!=0{_fgg [_fgd ]|=0xc00;};if _fgd &0x40!=0{_fgg [_fgd ]|=0x3000;};if _fgd &0x80!=0{_fgg [_fgd ]|=0xc000;
};};return _fgg ;};func init (){for _ccde :=0;_ccde < 256;_ccde ++{_eecd [_ccde ]=uint8 (_ccde &0x1)+(uint8 (_ccde >>1)&0x1)+(uint8 (_ccde >>2)&0x1)+(uint8 (_ccde >>3)&0x1)+(uint8 (_ccde >>4)&0x1)+(uint8 (_ccde >>5)&0x1)+(uint8 (_ccde >>6)&0x1)+(uint8 (_ccde >>7)&0x1);
};};func TstAddSymbol (t *_f .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_aebeg :=_be .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_aebeg );*x +=sym .Width +space ;};func (_fca *Bitmap )SetPadBits (value int ){_fca .setPadBits (value )};
type Point struct{X ,Y float32 ;};func (_dcgd *byHeight )Len ()int {return len (_dcgd .Values )};func (_cbbd *Bitmap )countPixels ()int {var (_ade int ;_eebef uint8 ;_fdgg byte ;_fab int ;);_aggd :=_cbbd .RowStride ;_acbb :=uint (_cbbd .Width &0x07);if _acbb !=0{_eebef =uint8 ((0xff<<(8-_acbb ))&0xff);
_aggd --;};for _eebc :=0;_eebc < _cbbd .Height ;_eebc ++{for _fab =0;_fab < _aggd ;_fab ++{_fdgg =_cbbd .Data [_eebc *_cbbd .RowStride +_fab ];_ade +=int (_eecd [_fdgg ]);};if _acbb !=0{_ade +=int (_eecd [_cbbd .Data [_eebc *_cbbd .RowStride +_fab ]&_eebef ]);
};};return _ade ;};func (_bfgd *Boxes )selectWithIndicator (_afgc *_ad .NumSlice )(_eeae *Boxes ,_bgc error ){const _abgg ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _bfgd ==nil {return nil ,_e .Error (_abgg ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if _afgc ==nil {return nil ,_e .Error (_abgg ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_afgc )!=len (*_bfgd ){return nil ,_e .Error (_abgg ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _edcb ,_fbdf int ;for _gcgb :=0;_gcgb < len (*_afgc );_gcgb ++{if _edcb ,_bgc =_afgc .GetInt (_gcgb );_bgc !=nil {return nil ,_e .Wrap (_bgc ,_abgg ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _edcb ==1{_fbdf ++;
};};if _fbdf ==len (*_bfgd ){return _bfgd ,nil ;};_aeea :=Boxes {};for _efeb :=0;_efeb < len (*_afgc );_efeb ++{_edcb =int ((*_afgc )[_efeb ]);if _edcb ==0{continue ;};_aeea =append (_aeea ,(*_bfgd )[_efeb ]);};_eeae =&_aeea ;return _eeae ,nil ;};func _cgg (_fcgg *Bitmap )(_ebbb *Bitmap ,_gddg int ,_abea error ){const _bgfc ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _fcgg ==nil {return nil ,0,_e .Errorf (_bgfc ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _fedd ,_bbaa *Bitmap ;if _fedd ,_abea =_dfcf (nil ,_fcgg );_abea !=nil {return nil ,0,_e .Wrap (_abea ,_bgfc ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_gffa [13]int ;_agda ,_afec int ;);_gdg :=12;_eadc :=_ad .NewNumSlice (_gdg +1);_egaad :=_ad .NewNumSlice (_gdg +1);var _dgbg *Boxes ;for _aecc :=0;_aecc <=_gdg ;_aecc ++{if _aecc ==0{if _bbaa ,_abea =_dfcf (nil ,_fedd );_abea !=nil {return nil ,0,_e .Wrap (_abea ,_bgfc ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _bbaa ,_abea =_gdfe (_fedd ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_abea !=nil {return nil ,0,_e .Wrap (_abea ,_bgfc ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _dgbg ,_abea =_bbaa .connComponentsBB (4);
_abea !=nil {return nil ,0,_e .Wrap (_abea ,_bgfc ,"");};_gffa [_aecc ]=len (*_dgbg );_eadc .AddInt (_gffa [_aecc ]);switch _aecc {case 0:_agda =_gffa [0];default:_afec =_gffa [_aecc -1]-_gffa [_aecc ];_egaad .AddInt (_afec );};_fedd =_bbaa ;};_beea :=true ;
_bdeg :=2;var _dagee ,_agca int ;for _cbag :=1;_cbag < len (*_egaad );_cbag ++{if _dagee ,_abea =_eadc .GetInt (_cbag );_abea !=nil {return nil ,0,_e .Wrap (_abea ,_bgfc ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _beea &&_dagee < int (0.3*float32 (_agda )){_bdeg =_cbag +1;_beea =false ;};if _afec ,_abea =_egaad .GetInt (_cbag );_abea !=nil {return nil ,0,_e .Wrap (_abea ,_bgfc ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _afec > _agca {_agca =_afec ;};};_faged :=_fcgg .XResolution ;if _faged ==0{_faged =150;};if _faged > 110{_bdeg ++;};if _bdeg < 2{_da .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_bdeg =2;};_gddg =_bdeg +1;if _ebbb ,_abea =_abca (nil ,_fcgg ,_bdeg +1,1);_abea !=nil {return nil ,0,_e .Wrap (_abea ,_bgfc ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _ebbb ,_gddg ,nil ;
};func (_fdbg *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _fgaf ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_fdbg .Values )==0{return nil ,_e .Error (_fgaf ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_acgb :=&BitmapsArray {};_fdbg .SortByWidth ();_ffff :=-1;_cbda :=-1;for _eagggc :=0;_eagggc < len (_fdbg .Values );_eagggc ++{_dcad :=_fdbg .Values [_eagggc ].Width ;if _dcad > _ffff {_ffff =_dcad ;_cbda ++;_acgb .Values =append (_acgb .Values ,&Bitmaps {});
};_acgb .Values [_cbda ].AddBitmap (_fdbg .Values [_eagggc ]);};return _acgb ,nil ;};func (_dee *Bitmap )equivalent (_bec *Bitmap )bool {if _dee ==_bec {return true ;};if !_dee .SizesEqual (_bec ){return false ;};_cagc :=_aedd (_dee ,_bec ,CmbOpXor );_acab :=_dee .countPixels ();
_acg :=int (0.25*float32 (_acab ));if _cagc .thresholdPixelSum (_acg ){return false ;};var (_fdag [9][9]int ;_gbag [18][9]int ;_dgcc [9][18]int ;_ggd int ;_cga int ;);_cfg :=9;_bab :=_dee .Height /_cfg ;_ebed :=_dee .Width /_cfg ;_gbg ,_dffb :=_bab /2,_ebed /2;
if _bab < _ebed {_gbg =_ebed /2;_dffb =_bab /2;};_acaa :=float64 (_gbg )*float64 (_dffb )*_b .Pi ;_acbc :=int (float64 (_bab *_ebed /2)*0.9);_eee :=int (float64 (_ebed *_bab /2)*0.9);for _fgcf :=0;_fgcf < _cfg ;_fgcf ++{_edg :=_ebed *_fgcf +_ggd ;var _dbfe int ;
if _fgcf ==_cfg -1{_ggd =0;_dbfe =_dee .Width ;}else {_dbfe =_edg +_ebed ;if ((_dee .Width -_ggd )%_cfg )> 0{_ggd ++;_dbfe ++;};};for _ddgg :=0;_ddgg < _cfg ;_ddgg ++{_afff :=_bab *_ddgg +_cga ;var _defa int ;if _ddgg ==_cfg -1{_cga =0;_defa =_dee .Height ;
}else {_defa =_afff +_bab ;if (_dee .Height -_cga )%_cfg > 0{_cga ++;_defa ++;};};var _ggb ,_faef ,_ebfb ,_eagf int ;_gdab :=(_edg +_dbfe )/2;_edfg :=(_afff +_defa )/2;for _dafc :=_edg ;_dafc < _dbfe ;_dafc ++{for _edb :=_afff ;_edb < _defa ;_edb ++{if _cagc .GetPixel (_dafc ,_edb ){if _dafc < _gdab {_ggb ++;
}else {_faef ++;};if _edb < _edfg {_eagf ++;}else {_ebfb ++;};};};};_fdag [_fgcf ][_ddgg ]=_ggb +_faef ;_gbag [_fgcf *2][_ddgg ]=_ggb ;_gbag [_fgcf *2+1][_ddgg ]=_faef ;_dgcc [_fgcf ][_ddgg *2]=_eagf ;_dgcc [_fgcf ][_ddgg *2+1]=_ebfb ;};};for _efbe :=0;
_efbe < _cfg *2-1;_efbe ++{for _cbba :=0;_cbba < (_cfg -1);_cbba ++{var _gdaf int ;for _aag :=0;_aag < 2;_aag ++{for _ffdg :=0;_ffdg < 2;_ffdg ++{_gdaf +=_gbag [_efbe +_aag ][_cbba +_ffdg ];};};if _gdaf > _eee {return false ;};};};for _dfede :=0;_dfede < (_cfg -1);
_dfede ++{for _dagb :=0;_dagb < ((_cfg *2)-1);_dagb ++{var _febg int ;for _ggda :=0;_ggda < 2;_ggda ++{for _bdbc :=0;_bdbc < 2;_bdbc ++{_febg +=_dgcc [_dfede +_ggda ][_dagb +_bdbc ];};};if _febg > _acbc {return false ;};};};for _fge :=0;_fge < (_cfg -2);
_fge ++{for _agdf :=0;_agdf < (_cfg -2);_agdf ++{var _eaba ,_bdge int ;for _fea :=0;_fea < 3;_fea ++{for _cff :=0;_cff < 3;_cff ++{if _fea ==_cff {_eaba +=_fdag [_fge +_fea ][_agdf +_cff ];};if (2-_fea )==_cff {_bdge +=_fdag [_fge +_fea ][_agdf +_cff ];
};};};if _eaba > _eee ||_bdge > _eee {return false ;};};};for _cfab :=0;_cfab < (_cfg -1);_cfab ++{for _fdc :=0;_fdc < (_cfg -1);_fdc ++{var _efc int ;for _aec :=0;_aec < 2;_aec ++{for _agf :=0;_agf < 2;_agf ++{_efc +=_fdag [_cfab +_aec ][_fdc +_agf ];
};};if float64 (_efc )> _acaa {return false ;};};};return true ;};func (_baea *ClassedPoints )XAtIndex (i int )float32 {return (*_baea .Points )[_baea .IntSlice [i ]].X };func (_cfaa *Bitmap )Equivalent (s *Bitmap )bool {return _cfaa .equivalent (s )};
func (_eeaf CombinationOperator )String ()string {var _efccd string ;switch _eeaf {case CmbOpOr :_efccd ="\u004f\u0052";case CmbOpAnd :_efccd ="\u0041\u004e\u0044";case CmbOpXor :_efccd ="\u0058\u004f\u0052";case CmbOpXNor :_efccd ="\u0058\u004e\u004f\u0052";
case CmbOpReplace :_efccd ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_efccd ="\u004e\u004f\u0054";};return _efccd ;};func (_dccb *Bitmap )SetDefaultPixel (){for _aee :=range _dccb .Data {_dccb .Data [_aee ]=byte (0xff);};};func (_cabfd *Bitmaps )selectByIndexes (_geea []int )(*Bitmaps ,error ){_egbec :=&Bitmaps {};
for _ ,_ddfca :=range _geea {_bcged ,_dadcd :=_cabfd .GetBitmap (_ddfca );if _dadcd !=nil {return nil ,_e .Wrap (_dadcd ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_egbec .AddBitmap (_bcged );};return _egbec ,nil ;
};func _acc (_daf *Bitmap ,_cgc ,_fda int )(*Bitmap ,error ){const _aaaa ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _daf ==nil {return nil ,_e .Error (_aaaa ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cgc <=0||_fda <=0{return nil ,_e .Error (_aaaa ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _cgc ==_fda {if _cgc ==1{_abc ,_bac :=_dfcf (nil ,_daf );
if _bac !=nil {return nil ,_e .Wrap (_bac ,_aaaa ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _abc ,nil ;};if _cgc ==2||_cgc ==4||_cgc ==8{_bad ,_dbe :=_bcc (_daf ,_cgc );if _dbe !=nil {return nil ,_e .Wrap (_dbe ,_aaaa ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _bad ,nil ;};};_fbb :=_cgc *_daf .Width ;_bfcb :=_fda *_daf .Height ;_ecb :=New (_fbb ,_bfcb );_fcc :=_ecb .RowStride ;var (_dg ,_ca ,_fg ,_cbd ,_cae int ;_de byte ;_eag error ;);for _ca =0;_ca < _daf .Height ;_ca ++{_dg =_fda *_ca *_fcc ;for _fg =0;
_fg < _daf .Width ;_fg ++{if _dc :=_daf .GetPixel (_fg ,_ca );_dc {_cae =_cgc *_fg ;for _cbd =0;_cbd < _cgc ;_cbd ++{_ecb .setBit (_dg *8+_cae +_cbd );};};};for _cbd =1;_cbd < _fda ;_cbd ++{_cc :=_dg +_cbd *_fcc ;for _ffb :=0;_ffb < _fcc ;_ffb ++{if _de ,_eag =_ecb .GetByte (_dg +_ffb );
_eag !=nil {return nil ,_e .Wrapf (_eag ,_aaaa ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_cbd );};if _eag =_ecb .SetByte (_cc +_ffb ,_de );_eag !=nil {return nil ,_e .Wrap (_eag ,_aaaa ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};};};};return _ecb ,nil ;};func _adba (_edgf *Bitmap ,_ffaga *Bitmap ,_decaf *Selection ,_dagc **Bitmap )(*Bitmap ,error ){const _ddfa ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _ffaga ==nil {return nil ,_e .Error (_ddfa ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _decaf ==nil {return nil ,_e .Error (_ddfa ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_dcfda ,_bfdc :=_decaf .Height ,_decaf .Width ;if _dcfda ==0||_bfdc ==0{return nil ,_e .Error (_ddfa ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _edgf ==nil {_edgf =_ffaga .createTemplate ();*_dagc =_ffaga ;return _edgf ,nil ;};_edgf .Width =_ffaga .Width ;_edgf .Height =_ffaga .Height ;_edgf .RowStride =_ffaga .RowStride ;_edgf .Color =_ffaga .Color ;_edgf .Data =make ([]byte ,_ffaga .RowStride *_ffaga .Height );
if _edgf ==_ffaga {*_dagc =_ffaga .Copy ();}else {*_dagc =_ffaga ;};return _edgf ,nil ;};func _fgdg (_fbdb ,_egaa *Bitmap ,_agag ,_feaa ,_aebc ,_adc ,_baee ,_ebfe ,_fbc ,_acae int ,_dagf CombinationOperator )error {var _dge int ;_ccb :=func (){_dge ++;
_aebc +=_egaa .RowStride ;_adc +=_fbdb .RowStride ;_baee +=_fbdb .RowStride };for _dge =_agag ;_dge < _feaa ;_ccb (){var _efcc uint16 ;_gdfa :=_aebc ;for _bcge :=_adc ;_bcge <=_baee ;_bcge ++{_geef ,_caca :=_egaa .GetByte (_gdfa );if _caca !=nil {return _caca ;
};_daaf ,_caca :=_fbdb .GetByte (_bcge );if _caca !=nil {return _caca ;};_efcc =(_efcc |uint16 (_daaf ))<<uint (_acae );_daaf =byte (_efcc >>8);if _bcge ==_baee {_daaf =_ebfa (uint (_ebfe ),_daaf );};if _caca =_egaa .SetByte (_gdfa ,_fgdde (_geef ,_daaf ,_dagf ));
_caca !=nil {return _caca ;};_gdfa ++;_efcc <<=uint (_fbc );};};return nil ;};func _dede (_afe ,_agad *Bitmap ,_ddda ,_ffgg ,_dggb uint ,_fbgd ,_gfff int ,_acd bool ,_cdfb ,_abae int )error {for _gfbab :=_fbgd ;_gfbab < _gfff ;_gfbab ++{if _cdfb +1< len (_afe .Data ){_gfe :=_gfbab +1==_gfff ;
_bbgd ,_gcef :=_afe .GetByte (_cdfb );if _gcef !=nil {return _gcef ;};_cdfb ++;_bbgd <<=_ddda ;_dfbb ,_gcef :=_afe .GetByte (_cdfb );if _gcef !=nil {return _gcef ;};_dfbb >>=_ffgg ;_cffa :=_bbgd |_dfbb ;if _gfe &&!_acd {_cffa =_ebfa (_dggb ,_cffa );};_gcef =_agad .SetByte (_abae ,_cffa );
if _gcef !=nil {return _gcef ;};_abae ++;if _gfe &&_acd {_dbda ,_dcf :=_afe .GetByte (_cdfb );if _dcf !=nil {return _dcf ;};_dbda <<=_ddda ;_cffa =_ebfa (_dggb ,_dbda );if _dcf =_agad .SetByte (_abae ,_cffa );_dcf !=nil {return _dcf ;};};continue ;};_fecf ,_afb :=_afe .GetByte (_cdfb );
if _afb !=nil {_da .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_cdfb ,_afb );return _afb ;};_fecf <<=_ddda ;
_cdfb ++;_afb =_agad .SetByte (_abae ,_fecf );if _afb !=nil {return _afb ;};_abae ++;};return nil ;};func (_eba *Bitmap )clearAll ()error {return _eba .RasterOperation (0,0,_eba .Width ,_eba .Height ,PixClr ,nil ,0,0);};func _efbbd (_ccccb ,_cedab *Bitmap ,_gedf ,_fedg int )(*Bitmap ,error ){const _fcae ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _cedab ==nil {return nil ,_e .Error (_fcae ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gedf < 1&&_fedg < 1{return nil ,_e .Error (_fcae ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _gedf ==1&&_fedg ==1{return _cedab .Copy (),nil ;};if _gedf ==1||_fedg ==1{var _eged error ;_fagea :=SelCreateBrick (_fedg ,_gedf ,_fedg /2,_gedf /2,SelHit );_ccccb ,_eged =_fbcda (_ccccb ,_cedab ,_fagea );if _eged !=nil {return nil ,_e .Wrap (_eged ,_fcae ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ccccb ,nil ;};_aefaf :=SelCreateBrick (1,_gedf ,0,_gedf /2,SelHit );_eabcc :=SelCreateBrick (_fedg ,1,_fedg /2,0,SelHit );_bafe ,_adcb :=_cafc (nil ,_cedab ,_aefaf );if _adcb !=nil {return nil ,_e .Wrap (_adcb ,_fcae ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_ccccb ,_adcb =_cafc (_ccccb ,_bafe ,_eabcc );if _adcb !=nil {return nil ,_e .Wrap (_adcb ,_fcae ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_adcb =_eadb (_bafe ,_ccccb ,_aefaf );if _adcb !=nil {return nil ,_e .Wrap (_adcb ,_fcae ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_adcb =_eadb (_ccccb ,_bafe ,_eabcc );if _adcb !=nil {return nil ,_e .Wrap (_adcb ,_fcae ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _ccccb ,nil ;};func _aggg (_cac ,_gfg int )int {if _cac < _gfg {return _cac ;};return _gfg ;
};func (_agef *Bitmap )GetPixel (x ,y int )bool {_afd :=_agef .GetByteIndex (x ,y );_eggg :=_agef .GetBitOffset (x );_efa :=uint (7-_eggg );if _afd > len (_agef .Data )-1{_da .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_agef );
return false ;};if (_agef .Data [_afd ]>>_efa )&0x01>=1{return true ;};return false ;};func (_afac *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _bbcc ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _afac ==nil {return nil ,_e .Error (_bbcc ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_afac .Values )-1{return nil ,_e .Errorf (_bbcc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _afac .Values [i ],nil ;};func _gafb (_dadd ,_dagfd *Bitmap ,_gaebg ,_fbdbg int )(*Bitmap ,error ){const _adgb ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _dagfd ==nil {_da .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_e .Error (_adgb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gaebg < 1||_fbdbg < 1{return nil ,_e .Error (_adgb ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _gaebg ==1&&_fbdbg ==1{_cgd ,_ddfd :=_dfcf (_dadd ,_dagfd );if _ddfd !=nil {return nil ,_e .Wrap (_ddfd ,_adgb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cgd ,nil ;};if _gaebg ==1||_fbdbg ==1{_gggf :=SelCreateBrick (_fbdbg ,_gaebg ,_fbdbg /2,_gaebg /2,SelHit );_bbac ,_efbb :=_eadb (_dadd ,_dagfd ,_gggf );if _efbb !=nil {return nil ,_e .Wrap (_efbb ,_adgb ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bbac ,nil ;};_aefa :=SelCreateBrick (1,_gaebg ,0,_gaebg /2,SelHit );_abdc :=SelCreateBrick (_fbdbg ,1,_fbdbg /2,0,SelHit );_fcfd ,_ebgc :=_eadb (nil ,_dagfd ,_aefa );if _ebgc !=nil {return nil ,_e .Wrap (_ebgc ,_adgb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_dadd ,_ebgc =_eadb (_dadd ,_fcfd ,_abdc );if _ebgc !=nil {return nil ,_e .Wrap (_ebgc ,_adgb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _dadd ,nil ;};func (_bgea MorphProcess )getWidthHeight ()(_afcg ,_dedba int ){return _bgea .Arguments [0],_bgea .Arguments [1];
};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _eadb (d ,s ,sel )};func _cada (_aedeb *Bitmap ,_eega ,_gge ,_egfa ,_gged int ,_ffde RasterOperator ,_abad *Bitmap ,_acfdf ,_feegc int )error {var (_cabg bool ;_bege bool ;_abecf byte ;
_afdf int ;_agga int ;_ddaf int ;_cded int ;_eed bool ;_addc int ;_dbbb int ;_aaaf int ;_cdced bool ;_gbdbd byte ;_gcae int ;_fcgdg int ;_agae int ;_adfe byte ;_aeed int ;_gggb int ;_bfda uint ;_cbac uint ;_dcgc byte ;_adaa shift ;_fcdf bool ;_gagb bool ;
_efgf ,_facg int ;);if _acfdf &7!=0{_gggb =8-(_acfdf &7);};if _eega &7!=0{_agga =8-(_eega &7);};if _gggb ==0&&_agga ==0{_dcgc =_cdag [0];}else {if _agga > _gggb {_bfda =uint (_agga -_gggb );}else {_bfda =uint (8-(_gggb -_agga ));};_cbac =8-_bfda ;_dcgc =_cdag [_bfda ];
};if (_eega &7)!=0{_cabg =true ;_afdf =8-(_eega &7);_abecf =_cdag [_afdf ];_ddaf =_aedeb .RowStride *_gge +(_eega >>3);_cded =_abad .RowStride *_feegc +(_acfdf >>3);_aeed =8-(_acfdf &7);if _afdf > _aeed {_adaa =_aaab ;if _egfa >=_gggb {_fcdf =true ;};}else {_adaa =_dgdc ;
};};if _egfa < _afdf {_bege =true ;_abecf &=_fgcb [8-_afdf +_egfa ];};if !_bege {_addc =(_egfa -_afdf )>>3;if _addc !=0{_eed =true ;_dbbb =_aedeb .RowStride *_gge +((_eega +_agga )>>3);_aaaf =_abad .RowStride *_feegc +((_acfdf +_agga )>>3);};};_gcae =(_eega +_egfa )&7;
if !(_bege ||_gcae ==0){_cdced =true ;_gbdbd =_fgcb [_gcae ];_fcgdg =_aedeb .RowStride *_gge +((_eega +_agga )>>3)+_addc ;_agae =_abad .RowStride *_feegc +((_acfdf +_agga )>>3)+_addc ;if _gcae > int (_cbac ){_gagb =true ;};};switch _ffde {case PixSrc :if _cabg {for _efgf =0;
_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );};}else {_adfe =_abad .Data [_cded ]>>_cbac ;};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],_adfe ,_abecf );
_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;_facg < _addc ;_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );_aedeb .Data [_dbbb +_facg ]=_adfe ;
};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],_adfe ,_gbdbd );
_fcgdg +=_aedeb .RowStride ;_agae +=_abad .RowStride ;};};case PixNotSrc :if _cabg {for _efgf =0;_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );};}else {_adfe =_abad .Data [_cded ]>>_cbac ;
};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],^_adfe ,_abecf );_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;_facg < _addc ;_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );
_aedeb .Data [_dbbb +_facg ]=^_adfe ;};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};
_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],^_adfe ,_gbdbd );_fcgdg +=_aedeb .RowStride ;_agae +=_abad .RowStride ;};};case PixSrcOrDst :if _cabg {for _efgf =0;_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );
};}else {_adfe =_abad .Data [_cded ]>>_cbac ;};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],_adfe |_aedeb .Data [_ddaf ],_abecf );_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;
_facg < _addc ;_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );_aedeb .Data [_dbbb +_facg ]|=_adfe ;};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;_efgf < _gged ;
_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],_adfe |_aedeb .Data [_fcgdg ],_gbdbd );_fcgdg +=_aedeb .RowStride ;_agae +=_abad .RowStride ;
};};case PixSrcAndDst :if _cabg {for _efgf =0;_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );};}else {_adfe =_abad .Data [_cded ]>>_cbac ;};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],_adfe &_aedeb .Data [_ddaf ],_abecf );
_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;_facg < _addc ;_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );_aedeb .Data [_dbbb +_facg ]&=_adfe ;
};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],_adfe &_aedeb .Data [_fcgdg ],_gbdbd );
_fcgdg +=_aedeb .RowStride ;_agae +=_abad .RowStride ;};};case PixSrcXorDst :if _cabg {for _efgf =0;_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );};}else {_adfe =_abad .Data [_cded ]>>_cbac ;
};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],_adfe ^_aedeb .Data [_ddaf ],_abecf );_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;_facg < _addc ;_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );
_aedeb .Data [_dbbb +_facg ]^=_adfe ;};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};
_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],_adfe ^_aedeb .Data [_fcgdg ],_gbdbd );_fcgdg +=_aedeb .RowStride ;_agae +=_abad .RowStride ;};};case PixNotSrcOrDst :if _cabg {for _efgf =0;_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;
if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );};}else {_adfe =_abad .Data [_cded ]>>_cbac ;};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],^_adfe |_aedeb .Data [_ddaf ],_abecf );_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;
};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;_facg < _addc ;_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );_aedeb .Data [_dbbb +_facg ]|=^_adfe ;};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;
};};if _cdced {for _efgf =0;_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],^_adfe |_aedeb .Data [_fcgdg ],_gbdbd );
_fcgdg +=_aedeb .RowStride ;_agae +=_abad .RowStride ;};};case PixNotSrcAndDst :if _cabg {for _efgf =0;_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );};
}else {_adfe =_abad .Data [_cded ]>>_cbac ;};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],^_adfe &_aedeb .Data [_ddaf ],_abecf );_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;_facg < _addc ;
_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );_aedeb .Data [_dbbb +_facg ]&=^_adfe ;};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;
if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],^_adfe &_aedeb .Data [_fcgdg ],_gbdbd );_fcgdg +=_aedeb .RowStride ;_agae +=_abad .RowStride ;};};case PixSrcOrNotDst :if _cabg {for _efgf =0;
_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );};}else {_adfe =_abad .Data [_cded ]>>_cbac ;};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],_adfe |^_aedeb .Data [_ddaf ],_abecf );
_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;_facg < _addc ;_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );_aedeb .Data [_dbbb +_facg ]=_adfe |^_aedeb .Data [_dbbb +_facg ];
};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],_adfe |^_aedeb .Data [_fcgdg ],_gbdbd );
_fcgdg +=_aedeb .RowStride ;_agae +=_abad .RowStride ;};};case PixSrcAndNotDst :if _cabg {for _efgf =0;_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );};
}else {_adfe =_abad .Data [_cded ]>>_cbac ;};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],_adfe &^_aedeb .Data [_ddaf ],_abecf );_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;_facg < _addc ;
_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );_aedeb .Data [_dbbb +_facg ]=_adfe &^_aedeb .Data [_dbbb +_facg ];};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;
_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],_adfe &^_aedeb .Data [_fcgdg ],_gbdbd );_fcgdg +=_aedeb .RowStride ;
_agae +=_abad .RowStride ;};};case PixNotPixSrcOrDst :if _cabg {for _efgf =0;_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );};}else {_adfe =_abad .Data [_cded ]>>_cbac ;
};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],^(_adfe |_aedeb .Data [_ddaf ]),_abecf );_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;_facg < _addc ;_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );
_aedeb .Data [_dbbb +_facg ]=^(_adfe |_aedeb .Data [_dbbb +_facg ]);};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );
};_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],^(_adfe |_aedeb .Data [_fcgdg ]),_gbdbd );_fcgdg +=_aedeb .RowStride ;_agae +=_abad .RowStride ;};};case PixNotPixSrcAndDst :if _cabg {for _efgf =0;_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;
if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );};}else {_adfe =_abad .Data [_cded ]>>_cbac ;};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],^(_adfe &_aedeb .Data [_ddaf ]),_abecf );_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;
};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;_facg < _addc ;_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );_aedeb .Data [_dbbb +_facg ]=^(_adfe &_aedeb .Data [_dbbb +_facg ]);};
_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],^(_adfe &_aedeb .Data [_fcgdg ]),_gbdbd );
_fcgdg +=_aedeb .RowStride ;_agae +=_abad .RowStride ;};};case PixNotPixSrcXorDst :if _cabg {for _efgf =0;_efgf < _gged ;_efgf ++{if _adaa ==_aaab {_adfe =_abad .Data [_cded ]<<_bfda ;if _fcdf {_adfe =_baae (_adfe ,_abad .Data [_cded +1]>>_cbac ,_dcgc );
};}else {_adfe =_abad .Data [_cded ]>>_cbac ;};_aedeb .Data [_ddaf ]=_baae (_aedeb .Data [_ddaf ],^(_adfe ^_aedeb .Data [_ddaf ]),_abecf );_ddaf +=_aedeb .RowStride ;_cded +=_abad .RowStride ;};};if _eed {for _efgf =0;_efgf < _gged ;_efgf ++{for _facg =0;
_facg < _addc ;_facg ++{_adfe =_baae (_abad .Data [_aaaf +_facg ]<<_bfda ,_abad .Data [_aaaf +_facg +1]>>_cbac ,_dcgc );_aedeb .Data [_dbbb +_facg ]=^(_adfe ^_aedeb .Data [_dbbb +_facg ]);};_dbbb +=_aedeb .RowStride ;_aaaf +=_abad .RowStride ;};};if _cdced {for _efgf =0;
_efgf < _gged ;_efgf ++{_adfe =_abad .Data [_agae ]<<_bfda ;if _gagb {_adfe =_baae (_adfe ,_abad .Data [_agae +1]>>_cbac ,_dcgc );};_aedeb .Data [_fcgdg ]=_baae (_aedeb .Data [_fcgdg ],^(_adfe ^_aedeb .Data [_fcgdg ]),_gbdbd );_fcgdg +=_aedeb .RowStride ;
_agae +=_abad .RowStride ;};};default:_da .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ffde );return _e .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func _cee (_dgg ,_eccb *Bitmap ,_dbgc ,_ecfb ,_bcgg ,_bgf ,_ccfcd ,_eabf ,_aefd ,_deb int ,_ceda CombinationOperator ,_ggba int )error {var _gfbg int ;_bddbb :=func (){_gfbg ++;_bcgg +=_eccb .RowStride ;_bgf +=_dgg .RowStride ;_ccfcd +=_dgg .RowStride };
for _gfbg =_dbgc ;_gfbg < _ecfb ;_bddbb (){var _ebgf uint16 ;_ebb :=_bcgg ;for _ebdg :=_bgf ;_ebdg <=_ccfcd ;_ebdg ++{_bbg ,_ged :=_eccb .GetByte (_ebb );if _ged !=nil {return _ged ;};_degf ,_ged :=_dgg .GetByte (_ebdg );if _ged !=nil {return _ged ;};_ebgf =(_ebgf |(uint16 (_degf )&0xff))<<uint (_deb );
_degf =byte (_ebgf >>8);if _ged =_eccb .SetByte (_ebb ,_fgdde (_bbg ,_degf ,_ceda ));_ged !=nil {return _ged ;};_ebb ++;_ebgf <<=uint (_aefd );if _ebdg ==_ccfcd {_degf =byte (_ebgf >>(8-uint8 (_deb )));if _ggba !=0{_degf =_ebfa (uint (8+_eabf ),_degf );
};_bbg ,_ged =_eccb .GetByte (_ebb );if _ged !=nil {return _ged ;};if _ged =_eccb .SetByte (_ebb ,_fgdde (_bbg ,_degf ,_ceda ));_ged !=nil {return _ged ;};};};};return nil ;};func (_cgce *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _fecc ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_cgce .Values )==0{return nil ,_e .Error (_fecc ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_bgca :=&BitmapsArray {};_cgce .SortByHeight ();_gbab :=-1;_gdcda :=-1;for _dbgfd :=0;_dbgfd < len (_cgce .Values );
_dbgfd ++{_gbacc :=_cgce .Values [_dbgfd ].Height ;if _gbacc > _gbab {_gbab =_gbacc ;_gdcda ++;_bgca .Values =append (_bgca .Values ,&Bitmaps {});};_bgca .Values [_gdcda ].AddBitmap (_cgce .Values [_dbgfd ]);};return _bgca ,nil ;};func (_dgbc *Bitmap )ToImage ()_be .Image {_dda ,_efd :=_fe .NewImage (_dgbc .Width ,_dgbc .Height ,1,1,_dgbc .Data ,nil ,nil );
if _efd !=nil {_da .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_efd );
};return _dda ;};func (_dfcg *Selection )findMaxTranslations ()(_ebfaf ,_dgfaf ,_cedac ,_dddc int ){for _cfbb :=0;_cfbb < _dfcg .Height ;_cfbb ++{for _gdff :=0;_gdff < _dfcg .Width ;_gdff ++{if _dfcg .Data [_cfbb ][_gdff ]==SelHit {_ebfaf =_ebfd (_ebfaf ,_dfcg .Cx -_gdff );
_dgfaf =_ebfd (_dgfaf ,_dfcg .Cy -_cfbb );_cedac =_ebfd (_cedac ,_gdff -_dfcg .Cx );_dddc =_ebfd (_dddc ,_cfbb -_dfcg .Cy );};};};return _ebfaf ,_dgfaf ,_cedac ,_dddc ;};func _efae (_gaefa ,_fagb *Bitmap ,_bfad ,_abff int )(*Bitmap ,error ){const _aeac ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _fagb ==nil {return nil ,_e .Error (_aeac ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _bfad < 1||_abff < 1{return nil ,_e .Error (_aeac ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _bfad ==1&&_abff ==1{return _dfcf (_gaefa ,_fagb );};if MorphBC ==SymmetricMorphBC {_ffdde ,_ecbe :=_abca (_gaefa ,_fagb ,_bfad ,_abff );if _ecbe !=nil {return nil ,_e .Wrap (_ecbe ,_aeac ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _ffdde ,nil ;};_cagfe :=_ebfd (_bfad /2,_abff /2);_aeacb :=8*((_cagfe +7)/8);_bcde ,_egfc :=_fagb .AddBorder (_aeacb ,0);if _egfc !=nil {return nil ,_e .Wrapf (_egfc ,_aeac ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_aeacb );
};var _egbe ,_gcda *Bitmap ;if _bfad ==1||_abff ==1{_bgbe :=SelCreateBrick (_abff ,_bfad ,_abff /2,_bfad /2,SelHit );_egbe ,_egfc =_ecbg (nil ,_bcde ,_bgbe );if _egfc !=nil {return nil ,_e .Wrap (_egfc ,_aeac ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_dffea :=SelCreateBrick (1,_bfad ,0,_bfad /2,SelHit );_gdc ,_cdbf :=_eadb (nil ,_bcde ,_dffea );if _cdbf !=nil {return nil ,_e .Wrap (_cdbf ,_aeac ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_beca :=SelCreateBrick (_abff ,1,_abff /2,0,SelHit );_egbe ,_cdbf =_eadb (nil ,_gdc ,_beca );if _cdbf !=nil {return nil ,_e .Wrap (_cdbf ,_aeac ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_cdbf =_cafc (_gdc ,_egbe ,_dffea );_cdbf !=nil {return nil ,_e .Wrap (_cdbf ,_aeac ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_cdbf =_cafc (_egbe ,_gdc ,_beca );_cdbf !=nil {return nil ,_e .Wrap (_cdbf ,_aeac ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _gcda ,_egfc =_egbe .RemoveBorder (_aeacb );_egfc !=nil {return nil ,_e .Wrap (_egfc ,_aeac ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _gaefa ==nil {return _gcda ,nil ;};if _ ,_egfc =_dfcf (_gaefa ,_gcda );_egfc !=nil {return nil ,_egfc ;};return _gaefa ,nil ;
};func (_dfca *Bitmap )InverseData (){_dfca .inverseData ()};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func _afab (_gfa ,_ccfe ,_cfc *Bitmap )(*Bitmap ,error ){const _aagb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";
if _ccfe ==nil {return nil ,_e .Error (_aagb ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _cfc ==nil {return nil ,_e .Error (_aagb ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gfa ==_cfc {return nil ,_e .Error (_aagb ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");
};if !_ccfe .SizesEqual (_cfc ){_da .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_aagb );
};var _caf error ;if _gfa ,_caf =_dfcf (_gfa ,_ccfe );_caf !=nil {return nil ,_e .Wrap (_caf ,_aagb ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _caf =_gfa .RasterOperation (0,0,_gfa .Width ,_gfa .Height ,PixSrcXorDst ,_cfc ,0,0);
_caf !=nil {return nil ,_e .Wrap (_caf ,_aagb ,"");};return _gfa ,nil ;};type fillSegment struct{_cadf int ;_abffe int ;_bcbf int ;_dbfc int ;};func (_ecde *Bitmaps )HeightSorter ()func (_ccfcg ,_gfdb int )bool {return func (_bcdbc ,_ggaba int )bool {_fdda :=_ecde .Values [_bcdbc ].Height < _ecde .Values [_ggaba ].Height ;
_da .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_ecde .Values [_bcdbc ].Height ,_ecde .Values [_ggaba ].Height ,_fdda );return _fdda ;};};func (_bggb *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ddge *Boxes ,_cdb error ){const _bddf ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _bggb ==nil {return nil ,_e .Error (_bddf ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_bggb )==0{return _bggb ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_e .Errorf (_bddf ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_e .Errorf (_bddf ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_bdda :=_bggb .makeSizeIndicator (width ,height ,tp ,relation );_gaebc ,_cdb :=_bggb .selectWithIndicator (_bdda );if _cdb !=nil {return nil ,_e .Wrap (_cdb ,_bddf ,"");};return _gaebc ,nil ;};func _gg ()(_faa [256]uint64 ){for _abcb :=0;_abcb < 256;
_abcb ++{if _abcb &0x01!=0{_faa [_abcb ]|=0xff;};if _abcb &0x02!=0{_faa [_abcb ]|=0xff00;};if _abcb &0x04!=0{_faa [_abcb ]|=0xff0000;};if _abcb &0x08!=0{_faa [_abcb ]|=0xff000000;};if _abcb &0x10!=0{_faa [_abcb ]|=0xff00000000;};if _abcb &0x20!=0{_faa [_abcb ]|=0xff0000000000;
};if _abcb &0x40!=0{_faa [_abcb ]|=0xff000000000000;};if _abcb &0x80!=0{_faa [_abcb ]|=0xff00000000000000;};};return _faa ;};const (Vanilla Color =iota ;Chocolate ;);func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ffdbc (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};type MorphOperation int ;var _eecd [256]uint8 ;func (_gaef *Bitmap )setAll ()error {_geb :=_ffdbc (_gaef ,0,0,_gaef .Width ,_gaef .Height ,PixSet ,nil ,0,0);if _geb !=nil {return _e .Wrap (_geb ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;
};func (_dgb *Bitmap )GetByteIndex (x ,y int )int {return y *_dgb .RowStride +(x >>3)};func _fgdde (_cdcaa ,_becb byte ,_cbee CombinationOperator )byte {switch _cbee {case CmbOpOr :return _becb |_cdcaa ;case CmbOpAnd :return _becb &_cdcaa ;case CmbOpXor :return _becb ^_cdcaa ;
case CmbOpXNor :return ^(_becb ^_cdcaa );case CmbOpNot :return ^(_becb );default:return _becb ;};};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _dad ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_aeg :=_acf (width ,height );_aeg .Data =data ;if _cbe :=((width *height )+7)>>3;len (data )< _cbe {return nil ,_e .Errorf (_dad ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_cbe );
};if _ggc :=_aeg .addPadBits ();_ggc !=nil {return nil ,_e .Wrap (_ggc ,_dad ,"");};return _aeg ,nil ;};func (_fcge *Bitmap )clipRectangle (_bafg ,_eece *_be .Rectangle )(_ebd *Bitmap ,_dbgf error ){const _gbff ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _bafg ==nil {return nil ,_e .Error (_gbff ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_baga ,_cbb :=_fcge .Width ,_fcge .Height ;_bccff ,_dbgf :=ClipBoxToRectangle (_bafg ,_baga ,_cbb );if _dbgf !=nil {_da .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_dbgf );
return nil ,nil ;};_ced ,_ggg :=_bccff .Min .X ,_bccff .Min .Y ;_gggc ,_gagaa :=_bccff .Max .X -_bccff .Min .X ,_bccff .Max .Y -_bccff .Min .Y ;_ebd =New (_gggc ,_gagaa );_ebd .Text =_fcge .Text ;if _dbgf =_ebd .RasterOperation (0,0,_gggc ,_gagaa ,PixSrc ,_fcge ,_ced ,_ggg );
_dbgf !=nil {return nil ,_e .Wrap (_dbgf ,_gbff ,"");};if _eece !=nil {*_eece =*_bccff ;};return _ebd ,nil ;};func (_bcg *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _bcg .Copy (),nil ;};_bddb ,_eaa :=_bcg .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _eaa !=nil {return nil ,_e .Wrap (_eaa ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _bddb ,nil ;};func (_gca *Bitmap )SetPixel (x ,y int ,pixel byte )error {_ddg :=_gca .GetByteIndex (x ,y );if _ddg > len (_gca .Data )-1{return _e .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_ddg );
};_agg :=_gca .GetBitOffset (x );_cab :=uint (7-_agg );_gde :=_gca .Data [_ddg ];var _bef byte ;if pixel ==1{_bef =_gde |(pixel &0x01<<_cab );}else {_bef =_gde &^(1<<_cab );};_gca .Data [_ddg ]=_bef ;return nil ;};func (_fdg *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _fdg .removeBorderGeneral (left ,right ,top ,bot );
};func _cdbe (_ebcg ,_fcad *Bitmap ,_fcff *Selection )(*Bitmap ,error ){const _cdfbe ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _aefaa ,_bced int ;if _fcad ==nil {return nil ,_e .Error (_cdfbe ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _fcff ==nil {return nil ,_e .Error (_cdfbe ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_aefaa =_fcff .Width ;_bced =_fcff .Height ;if _aefaa ==0||_bced ==0{return nil ,_e .Error (_cdfbe ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _ebcg ==nil {return _fcad .createTemplate (),nil ;};if _gfad :=_ebcg .resizeImageData (_fcad );_gfad !=nil {return nil ,_gfad ;};return _ebcg ,nil ;};func (_efag *Bitmap )removeBorderGeneral (_bea ,_cfb ,_aggb ,_feeb int )(*Bitmap ,error ){const _cbaf ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _bea < 0||_cfb < 0||_aggb < 0||_feeb < 0{return nil ,_e .Error (_cbaf ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_gbcc ,_aea :=_efag .Width ,_efag .Height ;
_ddfg :=_gbcc -_bea -_cfb ;_cfge :=_aea -_aggb -_feeb ;if _ddfg <=0{return nil ,_e .Errorf (_cbaf ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_ddfg );};if _cfge <=0{return nil ,_e .Errorf (_cbaf ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_cfge );
};_dcg :=New (_ddfg ,_cfge );_dcg .Color =_efag .Color ;_abef :=_dcg .RasterOperation (0,0,_ddfg ,_cfge ,PixSrc ,_efag ,_bea ,_aggb );if _abef !=nil {return nil ,_e .Wrap (_abef ,_cbaf ,"");};return _dcg ,nil ;};func (_cfd *Bitmap )GetChocolateData ()[]byte {if _cfd .Color ==Vanilla {_cfd .inverseData ();
};return _cfd .Data ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _fega ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_e .Error (_fega ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_e .Error (_fega ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_e .Error (_fega ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_e .Error (_fega ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_e .Error (_fega ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_degc ,_bda :=bm1 .Width ,bm1 .Height ;_aeef ,_cfeg :=bm2 .Width ,bm2 .Height ;if _ad .Abs (_degc -_aeef )> maxDiffW {return false ,nil ;};if _ad .Abs (_bda -_cfeg )> maxDiffH {return false ,nil ;};_ebbe :=int (delX +_ad .Sign (delX )*0.5);_ecgd :=int (delY +_ad .Sign (delY )*0.5);
_aeag :=int (_b .Ceil (_b .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_abbc :=bm2 .RowStride ;_edfc :=_ebfd (_ecgd ,0);_gdbg :=_aggg (_cfeg +_ecgd ,_bda );_ceg :=bm1 .RowStride *_edfc ;_gggce :=bm2 .RowStride *(_edfc -_ecgd );
var _fcea int ;if _gdbg <=_bda {_fcea =downcount [_gdbg -1];};_ceba :=_ebfd (_ebbe ,0);_cbg :=_aggg (_aeef +_ebbe ,_degc );var _adge ,_cfgc int ;if _ebbe >=8{_adge =_ebbe >>3;_ceg +=_adge ;_ceba -=_adge <<3;_cbg -=_adge <<3;_ebbe &=7;}else if _ebbe <=-8{_cfgc =-((_ebbe +7)>>3);
_gggce +=_cfgc ;_abbc -=_cfgc ;_ebbe +=_cfgc <<3;};var (_afbb ,_ecbb ,_gddb int ;_fdba ,_efbg ,_ccba byte ;);if _ceba >=_cbg ||_edfc >=_gdbg {return false ,nil ;};_afbc :=(_cbg +7)>>3;switch {case _ebbe ==0:for _ecbb =_edfc ;_ecbb < _gdbg ;_ecbb ,_ceg ,_gggce =_ecbb +1,_ceg +bm1 .RowStride ,_gggce +bm2 .RowStride {for _gddb =0;
_gddb < _afbc ;_gddb ++{_fdba =bm1 .Data [_ceg +_gddb ]&bm2 .Data [_gggce +_gddb ];_afbb +=tab [_fdba ];};if _afbb >=_aeag {return true ,nil ;};if _gcgf :=_afbb +downcount [_ecbb ]-_fcea ;_gcgf < _aeag {return false ,nil ;};};case _ebbe > 0&&_abbc < _afbc :for _ecbb =_edfc ;
_ecbb < _gdbg ;_ecbb ,_ceg ,_gggce =_ecbb +1,_ceg +bm1 .RowStride ,_gggce +bm2 .RowStride {_efbg =bm1 .Data [_ceg ];_ccba =bm2 .Data [_gggce ]>>uint (_ebbe );_fdba =_efbg &_ccba ;_afbb +=tab [_fdba ];for _gddb =1;_gddb < _abbc ;_gddb ++{_efbg =bm1 .Data [_ceg +_gddb ];
_ccba =bm2 .Data [_gggce +_gddb ]>>uint (_ebbe )|bm2 .Data [_gggce +_gddb -1]<<uint (8-_ebbe );_fdba =_efbg &_ccba ;_afbb +=tab [_fdba ];};_efbg =bm1 .Data [_ceg +_gddb ];_ccba =bm2 .Data [_gggce +_gddb -1]<<uint (8-_ebbe );_fdba =_efbg &_ccba ;_afbb +=tab [_fdba ];
if _afbb >=_aeag {return true ,nil ;}else if _afbb +downcount [_ecbb ]-_fcea < _aeag {return false ,nil ;};};case _ebbe > 0&&_abbc >=_afbc :for _ecbb =_edfc ;_ecbb < _gdbg ;_ecbb ,_ceg ,_gggce =_ecbb +1,_ceg +bm1 .RowStride ,_gggce +bm2 .RowStride {_efbg =bm1 .Data [_ceg ];
_ccba =bm2 .Data [_gggce ]>>uint (_ebbe );_fdba =_efbg &_ccba ;_afbb +=tab [_fdba ];for _gddb =1;_gddb < _afbc ;_gddb ++{_efbg =bm1 .Data [_ceg +_gddb ];_ccba =bm2 .Data [_gggce +_gddb ]>>uint (_ebbe );_ccba |=bm2 .Data [_gggce +_gddb -1]<<uint (8-_ebbe );
_fdba =_efbg &_ccba ;_afbb +=tab [_fdba ];};if _afbb >=_aeag {return true ,nil ;}else if _afbb +downcount [_ecbb ]-_fcea < _aeag {return false ,nil ;};};case _afbc < _abbc :for _ecbb =_edfc ;_ecbb < _gdbg ;_ecbb ,_ceg ,_gggce =_ecbb +1,_ceg +bm1 .RowStride ,_gggce +bm2 .RowStride {for _gddb =0;
_gddb < _afbc ;_gddb ++{_efbg =bm1 .Data [_ceg +_gddb ];_ccba =bm2 .Data [_gggce +_gddb ]<<uint (-_ebbe );_ccba |=bm2 .Data [_gggce +_gddb +1]>>uint (8+_ebbe );_fdba =_efbg &_ccba ;_afbb +=tab [_fdba ];};if _afbb >=_aeag {return true ,nil ;}else if _bead :=_afbb +downcount [_ecbb ]-_fcea ;
_bead < _aeag {return false ,nil ;};};case _abbc >=_afbc :for _ecbb =_edfc ;_ecbb < _gdbg ;_ecbb ,_ceg ,_gggce =_ecbb +1,_ceg +bm1 .RowStride ,_gggce +bm2 .RowStride {for _gddb =0;_gddb < _afbc ;_gddb ++{_efbg =bm1 .Data [_ceg +_gddb ];_ccba =bm2 .Data [_gggce +_gddb ]<<uint (-_ebbe );
_ccba |=bm2 .Data [_gggce +_gddb +1]>>uint (8+_ebbe );_fdba =_efbg &_ccba ;_afbb +=tab [_fdba ];};_efbg =bm1 .Data [_ceg +_gddb ];_ccba =bm2 .Data [_gggce +_gddb ]<<uint (-_ebbe );_fdba =_efbg &_ccba ;_afbb +=tab [_fdba ];if _afbb >=_aeag {return true ,nil ;
}else if _afbb +downcount [_ecbb ]-_fcea < _aeag {return false ,nil ;};};};_cda :=float32 (_afbb )*float32 (_afbb )/(float32 (area1 )*float32 (area2 ));if _cda >=scoreThreshold {_da .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_afbb ,_aeag ,_cda ,scoreThreshold );
};return false ,nil ;};func TstWriteSymbols (t *_f .T ,bms *Bitmaps ,src *Bitmap ){for _daccca :=0;_daccca < bms .Size ();_daccca ++{_gecd :=bms .Values [_daccca ];_afaf :=bms .Boxes [_daccca ];_gbed :=src .RasterOperation (_afaf .Min .X ,_afaf .Min .Y ,_gecd .Width ,_gecd .Height ,PixSrc ,_gecd ,0,0);
_ee .NoError (t ,_gbed );};};type ClassedPoints struct{*Points ;_ad .IntSlice ;_fggbca func (_bdac ,_cbed int )bool ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_dace *Bitmap )nextOnPixel (_egfg ,_cea int )(_dbcg _be .Point ,_affa bool ,_baba error ){const _eagc ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_dbcg ,_affa ,_baba =_dace .nextOnPixelLow (_dace .Width ,_dace .Height ,_dace .RowStride ,_egfg ,_cea );if _baba !=nil {return _dbcg ,false ,_e .Wrap (_baba ,_eagc ,"");};return _dbcg ,_affa ,nil ;};var _ _g .Interface =&ClassedPoints {};func (_agfe *Bitmaps )CountPixels ()*_ad .NumSlice {_fbbf :=&_ad .NumSlice {};
for _ ,_acbee :=range _agfe .Values {_fbbf .AddInt (_acbee .CountPixels ());};return _fbbf ;};func (_egfd *ClassedPoints )validateIntSlice ()error {const _fceaa ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_bafgb :=range _egfd .IntSlice {if _bafgb >=(_egfd .Points .Size ()){return _e .Errorf (_fceaa ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_bafgb ,_egfd .Points .Size ());
};};return nil ;};func _decbga (_eded *Bitmap ,_bddd int )(*Bitmap ,error ){const _fafd ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _eded ==nil {return nil ,_e .Error (_fafd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bddd <=0{return nil ,_e .Error (_fafd ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _bddd ==1{_faefg ,_fbbeg :=_dfcf (nil ,_eded );if _fbbeg !=nil {return nil ,_e .Wrap (_fbbeg ,_fafd ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _faefg ,nil ;};_gdcd ,_bggba :=_acc (_eded ,_bddd ,_bddd );if _bggba !=nil {return nil ,_e .Wrap (_bggba ,_fafd ,"");};return _gdcd ,nil ;};func (_aabf *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_aabf .Width ,Height :_aabf .Height ,RowStride :_aabf .RowStride ,Color :_aabf .Color ,Text :_aabf .Text ,BitmapNumber :_aabf .BitmapNumber ,Special :_aabf .Special ,Data :make ([]byte ,len (_aabf .Data ))};
};func (_gefe *ClassedPoints )SortByY (){_gefe ._fggbca =_gefe .ySortFunction ();_g .Sort (_gefe )};func (_abcg *Bitmap )And (s *Bitmap )(_bcaef *Bitmap ,_dfd error ){const _bbfg ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _abcg ==nil {return nil ,_e .Error (_bbfg ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_e .Error (_bbfg ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_abcg .SizesEqual (s ){_da .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_bbfg );
};if _bcaef ,_dfd =_dfcf (_bcaef ,_abcg );_dfd !=nil {return nil ,_e .Wrap (_dfd ,_bbfg ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _dfd =_bcaef .RasterOperation (0,0,_bcaef .Width ,_bcaef .Height ,PixSrcAndDst ,s ,0,0);
_dfd !=nil {return nil ,_e .Wrap (_dfd ,_bbfg ,"");};return _bcaef ,nil ;};func _gdfg (_cbbdg ,_fbaa *Bitmap ,_fdbca ,_cfba int )(_cdbb error ){const _afgd ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_fbcf ,_dfdd ,_eggag ,_gfgf int ;
_cefe ,_bdbd ,_dacfe ,_fcdbd ,_edccg ,_egbb ,_aebae ,_gccd byte ;);for _fbcf =0;_fbcf < _fdbca ;_fbcf ++{_eggag =_fbcf *_cbbdg .RowStride ;_gfgf =_fbcf *_fbaa .RowStride ;for _dfdd =0;_dfdd < _cfba ;_dfdd ++{if _cefe ,_cdbb =_cbbdg .GetByte (_eggag +_dfdd );
_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _bdbd ,_cdbb =_fbaa .GetByte (_gfgf +_dfdd );_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _fbcf > 0{if _dacfe ,_cdbb =_cbbdg .GetByte (_eggag -_cbbdg .RowStride +_dfdd );_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cefe |=_dacfe |(_dacfe <<1)|(_dacfe >>1);if _dfdd > 0{if _gccd ,_cdbb =_cbbdg .GetByte (_eggag -_cbbdg .RowStride +_dfdd -1);
_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cefe |=_gccd <<7;};if _dfdd < _cfba -1{if _gccd ,_cdbb =_cbbdg .GetByte (_eggag -_cbbdg .RowStride +_dfdd +1);
_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_cefe |=_gccd >>7;};};if _dfdd > 0{if _fcdbd ,_cdbb =_cbbdg .GetByte (_eggag +_dfdd -1);_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u006a\u0020\u003e \u0030");
};_cefe |=_fcdbd <<7;};_cefe &=_bdbd ;if _cefe ==0||^_cefe ==0{if _cdbb =_cbbdg .SetByte (_eggag +_dfdd ,_cefe );_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};
for {_aebae =_cefe ;_cefe =(_cefe |(_cefe >>1)|(_cefe <<1))&_bdbd ;if (_cefe ^_aebae )==0{if _cdbb =_cbbdg .SetByte (_eggag +_dfdd ,_cefe );_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _fbcf =_fdbca -1;_fbcf >=0;_fbcf --{_eggag =_fbcf *_cbbdg .RowStride ;_gfgf =_fbcf *_fbaa .RowStride ;for _dfdd =_cfba -1;_dfdd >=0;_dfdd --{if _cefe ,_cdbb =_cbbdg .GetByte (_eggag +_dfdd );_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _bdbd ,_cdbb =_fbaa .GetByte (_gfgf +_dfdd );_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _fbcf < _fdbca -1{if _edccg ,_cdbb =_cbbdg .GetByte (_eggag +_cbbdg .RowStride +_dfdd );
_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_cefe |=_edccg |(_edccg <<1)|_edccg >>1;if _dfdd > 0{if _gccd ,_cdbb =_cbbdg .GetByte (_eggag +_cbbdg .RowStride +_dfdd -1);
_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_cefe |=_gccd <<7;};if _dfdd < _cfba -1{if _gccd ,_cdbb =_cbbdg .GetByte (_eggag +_cbbdg .RowStride +_dfdd +1);
_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_cefe |=_gccd >>7;};};if _dfdd < _cfba -1{if _egbb ,_cdbb =_cbbdg .GetByte (_eggag +_dfdd +1);_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_cefe |=_egbb >>7;};_cefe &=_bdbd ;if _cefe ==0||(^_cefe )==0{if _cdbb =_cbbdg .SetByte (_eggag +_dfdd ,_cefe );_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_aebae =_cefe ;
_cefe =(_cefe |(_cefe >>1)|(_cefe <<1))&_bdbd ;if (_cefe ^_aebae )==0{if _cdbb =_cbbdg .SetByte (_eggag +_dfdd ,_cefe );_cdbb !=nil {return _e .Wrap (_cdbb ,_afgd ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func _ecbg (_dbae ,_eefac *Bitmap ,_gaea *Selection )(*Bitmap ,error ){const _aebf ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _ceaf error ;if _dbae ,_ceaf =_cdbe (_dbae ,_eefac ,_gaea );_ceaf !=nil {return nil ,_ceaf ;
};_efg ,_ceaf :=_eadb (nil ,_eefac ,_gaea );if _ceaf !=nil {return nil ,_e .Wrap (_ceaf ,_aebf ,"");};if _ ,_ceaf =_cafc (_dbae ,_efg ,_gaea );_ceaf !=nil {return nil ,_e .Wrap (_ceaf ,_aebf ,"");};return _dbae ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _bdc ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_beb :=_acf (width ,height );_beb .Data =data ;if len (data )< height *_beb .RowStride {return nil ,_e .Errorf (_bdc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_beb .RowStride );
};return _beb ,nil ;};func (_bcce *ClassedPoints )Len ()int {return _bcce .IntSlice .Size ()};func (_aeb *Bitmap )setBit (_adda int ){_aeb .Data [(_adda >>3)]|=0x80>>uint (_adda &7)};func _fbbd ()(_cbdg [256]uint32 ){for _ead :=0;_ead < 256;_ead ++{if _ead &0x01!=0{_cbdg [_ead ]|=0xf;
};if _ead &0x02!=0{_cbdg [_ead ]|=0xf0;};if _ead &0x04!=0{_cbdg [_ead ]|=0xf00;};if _ead &0x08!=0{_cbdg [_ead ]|=0xf000;};if _ead &0x10!=0{_cbdg [_ead ]|=0xf0000;};if _ead &0x20!=0{_cbdg [_ead ]|=0xf00000;};if _ead &0x40!=0{_cbdg [_ead ]|=0xf000000;};if _ead &0x80!=0{_cbdg [_ead ]|=0xf0000000;
};};return _cbdg ;};func (_ecg *Bitmap )addBorderGeneral (_fef ,_bcd ,_gaga ,_bde int ,_fdec int )(*Bitmap ,error ){const _abcge ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _fef < 0||_bcd < 0||_gaga < 0||_bde < 0{return nil ,_e .Error (_abcge ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_cbc ,_fdef :=_ecg .Width ,_ecg .Height ;_cabb :=_cbc +_fef +_bcd ;_ecgc :=_fdef +_gaga +_bde ;_dbbg :=New (_cabb ,_ecgc );_dbbg .Color =_ecg .Color ;_fbf :=PixClr ;if _fdec > 0{_fbf =PixSet ;};_fgc :=_dbbg .RasterOperation (0,0,_fef ,_ecgc ,_fbf ,nil ,0,0);
if _fgc !=nil {return nil ,_e .Wrap (_fgc ,_abcge ,"\u006c\u0065\u0066\u0074");};_fgc =_dbbg .RasterOperation (_cabb -_bcd ,0,_bcd ,_ecgc ,_fbf ,nil ,0,0);if _fgc !=nil {return nil ,_e .Wrap (_fgc ,_abcge ,"\u0072\u0069\u0067h\u0074");};_fgc =_dbbg .RasterOperation (0,0,_cabb ,_gaga ,_fbf ,nil ,0,0);
if _fgc !=nil {return nil ,_e .Wrap (_fgc ,_abcge ,"\u0074\u006f\u0070");};_fgc =_dbbg .RasterOperation (0,_ecgc -_bde ,_cabb ,_bde ,_fbf ,nil ,0,0);if _fgc !=nil {return nil ,_e .Wrap (_fgc ,_abcge ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_fgc =_dbbg .RasterOperation (_fef ,_gaga ,_cbc ,_fdef ,PixSrc ,_ecg ,0,0);
if _fgc !=nil {return nil ,_e .Wrap (_fgc ,_abcge ,"\u0063\u006f\u0070\u0079");};return _dbbg ,nil ;};type LocationFilter int ;func _affd (_daeg int )int {if _daeg < 0{return -_daeg ;};return _daeg ;};func _ebfa (_geg uint ,_fdac byte )byte {return _fdac >>_geg <<_geg };
func (_geefd *Bitmaps )SortByHeight (){_cgcb :=(*byHeight )(_geefd );_g .Sort (_cgcb )};func (_bafa *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _bafd ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _bafa ==nil {return nil ,_e .Error (_bafd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_bafa .Values )-1{return nil ,_e .Errorf (_bafd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bafa .Values [i ],nil ;};func (_eeca *ClassedPoints )ySortFunction ()func (_ceee int ,_abdfg int )bool {return func (_egbf ,_bdfgf int )bool {return _eeca .YAtIndex (_egbf )< _eeca .YAtIndex (_bdfgf )};
};func TstVSymbol (t *_f .T ,scale ...int )*Bitmap {_adfef ,_gbeec :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_ee .NoError (t ,_gbeec );return TstGetScaledSymbol (t ,_adfef ,scale ...);};func _cafc (_fccb ,_bcdb *Bitmap ,_cbad *Selection )(*Bitmap ,error ){const _afdd ="\u0065\u0072\u006fd\u0065";
var (_aceb error ;_ffcb *Bitmap ;);_fccb ,_aceb =_adba (_fccb ,_bcdb ,_cbad ,&_ffcb );if _aceb !=nil {return nil ,_e .Wrap (_aceb ,_afdd ,"");};if _aceb =_fccb .setAll ();_aceb !=nil {return nil ,_e .Wrap (_aceb ,_afdd ,"");};var _bgcb SelectionValue ;
for _fgfa :=0;_fgfa < _cbad .Height ;_fgfa ++{for _becf :=0;_becf < _cbad .Width ;_becf ++{_bgcb =_cbad .Data [_fgfa ][_becf ];if _bgcb ==SelHit {_aceb =_ffdbc (_fccb ,_cbad .Cx -_becf ,_cbad .Cy -_fgfa ,_bcdb .Width ,_bcdb .Height ,PixSrcAndDst ,_ffcb ,0,0);
if _aceb !=nil {return nil ,_e .Wrap (_aceb ,_afdd ,"");};};};};if MorphBC ==SymmetricMorphBC {return _fccb ,nil ;};_fba ,_afag ,_bdfg ,_cfeda :=_cbad .findMaxTranslations ();if _fba > 0{if _aceb =_fccb .RasterOperation (0,0,_fba ,_bcdb .Height ,PixClr ,nil ,0,0);
_aceb !=nil {return nil ,_e .Wrap (_aceb ,_afdd ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _bdfg > 0{if _aceb =_fccb .RasterOperation (_bcdb .Width -_bdfg ,0,_bdfg ,_bcdb .Height ,PixClr ,nil ,0,0);_aceb !=nil {return nil ,_e .Wrap (_aceb ,_afdd ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _afag > 0{if _aceb =_fccb .RasterOperation (0,0,_bcdb .Width ,_afag ,PixClr ,nil ,0,0);_aceb !=nil {return nil ,_e .Wrap (_aceb ,_afdd ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _cfeda > 0{if _aceb =_fccb .RasterOperation (0,_bcdb .Height -_cfeda ,_bcdb .Width ,_cfeda ,PixClr ,nil ,0,0);
_aceb !=nil {return nil ,_e .Wrap (_aceb ,_afdd ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _fccb ,nil ;};type SizeComparison int ;func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _fgdde (oldByte ,newByte ,op );};func TstWordBitmap (t *_f .T ,scale ...int )*Bitmap {_cega :=1;
if len (scale )> 0{_cega =scale [0];};_bceg :=3;_fgac :=9+7+15+2*_bceg ;_cafg :=5+_bceg +5;_dbfed :=New (_fgac *_cega ,_cafg *_cega );_bgfcd :=&Bitmaps {};var _ebge *int ;_bceg *=_cega ;_dcdg :=0;_ebge =&_dcdg ;_fgcfe :=0;_acecg :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,1*_cega );_acecg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,_bceg );_acecg =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,1*_cega );_acecg =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,_bceg );_acecg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,1*_cega );_acecg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,1*_cega );_acecg =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,0);*_ebge =0;_fgcfe =5*_cega +_bceg ;_acecg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,1*_cega );_acecg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,_bceg );
_acecg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,1*_cega );_acecg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,1*_cega );_acecg =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,1*_cega );
_acecg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,1*_cega );_acecg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bgfcd ,_acecg ,_ebge ,_fgcfe ,0);TstWriteSymbols (t ,_bgfcd ,_dbfed );return _dbfed ;};func (_gdaa Points )YSorter ()func (_gfbgb ,_gdac int )bool {return func (_gcgd ,_bfed int )bool {return _gdaa [_gcgd ].Y < _gdaa [_bfed ].Y };
};func TstWSymbol (t *_f .T ,scale ...int )*Bitmap {_cabc ,_gdbd :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_ee .NoError (t ,_gdbd );return TstGetScaledSymbol (t ,_cabc ,scale ...);};func (_abgff *Points )Add (pt *Points )error {const _baeb ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _abgff ==nil {return _e .Error (_baeb ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _e .Error (_baeb ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_abgff =append (*_abgff ,*pt ...);return nil ;};func TstASymbol (t *_f .T )*Bitmap {t .Helper ();_dbgg :=New (6,6);_ee .NoError (t ,_dbgg .SetPixel (1,0,1));_ee .NoError (t ,_dbgg .SetPixel (2,0,1));_ee .NoError (t ,_dbgg .SetPixel (3,0,1));_ee .NoError (t ,_dbgg .SetPixel (4,0,1));
_ee .NoError (t ,_dbgg .SetPixel (5,1,1));_ee .NoError (t ,_dbgg .SetPixel (1,2,1));_ee .NoError (t ,_dbgg .SetPixel (2,2,1));_ee .NoError (t ,_dbgg .SetPixel (3,2,1));_ee .NoError (t ,_dbgg .SetPixel (4,2,1));_ee .NoError (t ,_dbgg .SetPixel (5,2,1));
_ee .NoError (t ,_dbgg .SetPixel (0,3,1));_ee .NoError (t ,_dbgg .SetPixel (5,3,1));_ee .NoError (t ,_dbgg .SetPixel (0,4,1));_ee .NoError (t ,_dbgg .SetPixel (5,4,1));_ee .NoError (t ,_dbgg .SetPixel (1,5,1));_ee .NoError (t ,_dbgg .SetPixel (2,5,1));
_ee .NoError (t ,_dbgg .SetPixel (3,5,1));_ee .NoError (t ,_dbgg .SetPixel (4,5,1));_ee .NoError (t ,_dbgg .SetPixel (5,5,1));return _dbgg ;};func (_dbbf *Bitmap )String ()string {var _ffdb ="\u000a";for _eefa :=0;_eefa < _dbbf .Height ;_eefa ++{var _bgga string ;
for _gdde :=0;_gdde < _dbbf .Width ;_gdde ++{_faea :=_dbbf .GetPixel (_gdde ,_eefa );if _faea {_bgga +="\u0031";}else {_bgga +="\u0030";};};_ffdb +=_bgga +"\u000a";};return _ffdb ;};func (_deec *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _fdeca ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _deec ==nil {return nil ,_e .Error (_fdeca ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_e .Error (_fdeca ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_fbbdb :=len (_deec .Values );_adgbg :=&Bitmaps {Values :make ([]*Bitmap ,_fbbdb ),Boxes :make ([]*_be .Rectangle ,_fbbdb )};var (_cbeg ,_cdba *Bitmap ;_eagff *_be .Rectangle ;_gead error ;);for _fbgdg :=0;_fbgdg < _fbbdb ;_fbgdg ++{if _cbeg ,_gead =_deec .GetBitmap (_fbgdg );
_gead !=nil {return nil ,_e .Wrap (_gead ,_fdeca ,"");};if _eagff ,_gead =_deec .GetBox (_fbgdg );_gead !=nil {return nil ,_e .Wrap (_gead ,_fdeca ,"");};if _cdba ,_gead =s .clipRectangle (_eagff ,nil );_gead !=nil {return nil ,_e .Wrap (_gead ,_fdeca ,"");
};if _cdba ,_gead =_cdba .And (_cbeg );_gead !=nil {return nil ,_e .Wrap (_gead ,_fdeca ,"");};_adgbg .Values [_fbgdg ]=_cdba ;_adgbg .Boxes [_fbgdg ]=_eagff ;};return _adgbg ,nil ;};func (_cedacc *Bitmaps )String ()string {_beaf :=_eec .Builder {};for _ ,_ecgdg :=range _cedacc .Values {_beaf .WriteString (_ecgdg .String ());
_beaf .WriteRune ('\n');};return _beaf .String ();};func (_gfefa *byWidth )Swap (i ,j int ){_gfefa .Values [i ],_gfefa .Values [j ]=_gfefa .Values [j ],_gfefa .Values [i ];if _gfefa .Boxes !=nil {_gfefa .Boxes [i ],_gfefa .Boxes [j ]=_gfefa .Boxes [j ],_gfefa .Boxes [i ];
};};func (_fcbb *byWidth )Len ()int {return len (_fcbb .Values )};func (_bff *Bitmap )GetByte (index int )(byte ,error ){if index > len (_bff .Data )-1||index < 0{return 0,_e .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _bff .Data [index ],nil ;};func (_bgfe *Boxes )Add (box *_be .Rectangle )error {if _bgfe ==nil {return _e .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_bgfe =append (*_bgfe ,box );return nil ;};func (_dce *Bitmap )setFourBytes (_cbf int ,_bfe uint32 )error {if _cbf +3> len (_dce .Data )-1{return _e .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cbf );
};_dce .Data [_cbf ]=byte ((_bfe &0xff000000)>>24);_dce .Data [_cbf +1]=byte ((_bfe &0xff0000)>>16);_dce .Data [_cbf +2]=byte ((_bfe &0xff00)>>8);_dce .Data [_cbf +3]=byte (_bfe &0xff);return nil ;};func (_eebf *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _eebf .addBorderGeneral (left ,right ,top ,bot ,val );
};type Color int ;func TstOSymbol (t *_f .T ,scale ...int )*Bitmap {_agggd ,_aaace :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_ee .NoError (t ,_aaace );return TstGetScaledSymbol (t ,_agggd ,scale ...);};func (_eeg *Bitmap )GetBitOffset (x int )int {return x &0x07};
const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;
PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;
PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _ag (_aa ,_aad *Bitmap )(_db error ){const _bbf ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_df :=_aad .RowStride ;
_gdd :=_aa .RowStride ;_c :=_aad .RowStride *4-_aa .RowStride ;var (_fd ,_cb byte ;_dbf uint32 ;_ff ,_bbb ,_ffd ,_ge ,_bd ,_ddd ,_cd int ;);for _ffd =0;_ffd < _aad .Height ;_ffd ++{_ff =_ffd *_df ;_bbb =4*_ffd *_gdd ;for _ge =0;_ge < _df ;_ge ++{_fd =_aad .Data [_ff +_ge ];
_dbf =_fabb [_fd ];_ddd =_bbb +_ge *4;if _c !=0&&(_ge +1)*4> _aa .RowStride {for _bd =_c ;_bd > 0;_bd --{_cb =byte ((_dbf >>uint (_bd *8))&0xff);_cd =_ddd +(_c -_bd );if _db =_aa .SetByte (_cd ,_cb );_db !=nil {return _e .Wrapf (_db ,_bbf ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_bd );
};};}else if _db =_aa .setFourBytes (_ddd ,_dbf );_db !=nil {return _e .Wrap (_db ,_bbf ,"");};if _db =_aa .setFourBytes (_bbb +_ge *4,_fabb [_aad .Data [_ff +_ge ]]);_db !=nil {return _e .Wrap (_db ,_bbf ,"");};};for _bd =1;_bd < 4;_bd ++{for _ge =0;_ge < _gdd ;
_ge ++{if _db =_aa .SetByte (_bbb +_bd *_gdd +_ge ,_aa .Data [_bbb +_ge ]);_db !=nil {return _e .Wrapf (_db ,_bbf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_bd ,_ge );
};};};};return nil ;};func _cdd (_gfec ,_ddee int ,_fdbae string )*Selection {_ggeda :=&Selection {Height :_gfec ,Width :_ddee ,Name :_fdbae };_ggeda .Data =make ([][]SelectionValue ,_gfec );for _dacae :=0;_dacae < _gfec ;_dacae ++{_ggeda .Data [_dacae ]=make ([]SelectionValue ,_ddee );
};return _ggeda ;};func ClipBoxToRectangle (box *_be .Rectangle ,wi ,hi int )(_cgcc *_be .Rectangle ,_cfbg error ){const _adab ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_e .Error (_adab ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_e .Error (_adab ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_fagf :=*box ;
_cgcc =&_fagf ;if _cgcc .Min .X < 0{_cgcc .Max .X +=_cgcc .Min .X ;_cgcc .Min .X =0;};if _cgcc .Min .Y < 0{_cgcc .Max .Y +=_cgcc .Min .Y ;_cgcc .Min .Y =0;};if _cgcc .Max .X > wi {_cgcc .Max .X =wi ;};if _cgcc .Max .Y > hi {_cgcc .Max .Y =hi ;};return _cgcc ,nil ;
};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _gafb (d ,s ,hSize ,vSize )};func (_beeg *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _fgef ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _becd :=_beeg .validateIntSlice ();_becd !=nil {return nil ,_e .Wrap (_becd ,_fgef ,"");};if _beeg .IntSlice .Size ()==0{return nil ,_e .Error (_fgef ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_beeg .SortByY ();var (_edec []*ClassedPoints ;_eca int ;);_cbfc :=-1;var _gfgc *ClassedPoints ;for _cgcca :=0;_cgcca < len (_beeg .IntSlice );_cgcca ++{_eca =int (_beeg .YAtIndex (_cgcca ));if _eca !=_cbfc {_gfgc =&ClassedPoints {Points :_beeg .Points };
_cbfc =_eca ;_edec =append (_edec ,_gfgc );};_gfgc .IntSlice =append (_gfgc .IntSlice ,_beeg .IntSlice [_cgcca ]);};for _ ,_gdca :=range _edec {_gdca .SortByX ();};return _edec ,nil ;};func (_afecg *BitmapsArray )GetBox (i int )(*_be .Rectangle ,error ){const _cbgb ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _afecg ==nil {return nil ,_e .Error (_cbgb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_afecg .Boxes )-1{return nil ,_e .Errorf (_cbgb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _afecg .Boxes [i ],nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_cce float64 ,_ede error ){const _gced ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _cce ,_e .Error (_gced ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _cce ,_e .Error (_gced ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _cce ,_e .Error (_gced ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_dgd ,_gagg :=bm1 .Width ,bm1 .Height ;_ccag ,_gec :=bm2 .Width ,bm2 .Height ;
if _affd (_dgd -_ccag )> maxDiffW {return 0,nil ;};if _affd (_gagg -_gec )> maxDiffH {return 0,nil ;};var _agb ,_gbagc int ;if delX >=0{_agb =int (delX +0.5);}else {_agb =int (delX -0.5);};if delY >=0{_gbagc =int (delY +0.5);}else {_gbagc =int (delY -0.5);
};_babb :=bm1 .createTemplate ();if _ede =_babb .RasterOperation (_agb ,_gbagc ,_ccag ,_gec ,PixSrc ,bm2 ,0,0);_ede !=nil {return _cce ,_e .Wrap (_ede ,_gced ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _ede =_babb .RasterOperation (0,0,_dgd ,_gagg ,PixSrcAndDst ,bm1 ,0,0);
_ede !=nil {return _cce ,_e .Wrap (_ede ,_gced ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_fecgfg :=_babb .countPixels ();_cce =float64 (_fecgfg )*float64 (_fecgfg )/(float64 (area1 )*float64 (area2 ));return _cce ,nil ;};func (_fcdg *Bitmap )connComponentsBB (_adbea int )(_bffa *Boxes ,_bgd error ){const _faga ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _adbea !=4&&_adbea !=8{return nil ,_e .Error (_faga ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _fcdg .Zero (){return &Boxes {},nil ;
};_fcdg .setPadBits (0);_dcdd ,_bgd :=_dfcf (nil ,_fcdg );if _bgd !=nil {return nil ,_e .Wrap (_bgd ,_faga ,"\u0062\u006d\u0031");};_ccaa :=&_ad .Stack {};_ccaa .Aux =&_ad .Stack {};_bffa =&Boxes {};var (_dedb ,_abbb int ;_fecgf _be .Point ;_gbge bool ;
_cccc *_be .Rectangle ;);for {if _fecgf ,_gbge ,_bgd =_dcdd .nextOnPixel (_abbb ,_dedb );_bgd !=nil {return nil ,_e .Wrap (_bgd ,_faga ,"");};if !_gbge {break ;};if _cccc ,_bgd =_cdaa (_dcdd ,_ccaa ,_fecgf .X ,_fecgf .Y ,_adbea );_bgd !=nil {return nil ,_e .Wrap (_bgd ,_faga ,"");
};if _bgd =_bffa .Add (_cccc );_bgd !=nil {return nil ,_e .Wrap (_bgd ,_faga ,"");};_abbb =_fecgf .X ;_dedb =_fecgf .Y ;};return _bffa ,nil ;};func _bdddc (_aceg *Bitmap ,_bbce ,_aeca int ,_gcefa ,_dgfa int ,_bfgdg RasterOperator ){var (_dgcb bool ;_eecc bool ;
_afagc int ;_gfef int ;_dacf int ;_eedc int ;_bfga bool ;_cdee byte ;);_ebdc :=8-(_bbce &7);_gbae :=_cdag [_ebdc ];_eabge :=_aceg .RowStride *_aeca +(_bbce >>3);if _gcefa < _ebdc {_dgcb =true ;_gbae &=_fgcb [8-_ebdc +_gcefa ];};if !_dgcb {_afagc =(_gcefa -_ebdc )>>3;
if _afagc !=0{_eecc =true ;_gfef =_eabge +1;};};_dacf =(_bbce +_gcefa )&7;if !(_dgcb ||_dacf ==0){_bfga =true ;_cdee =_fgcb [_dacf ];_eedc =_eabge +1+_afagc ;};var _cegb ,_fgde int ;switch _bfgdg {case PixClr :for _cegb =0;_cegb < _dgfa ;_cegb ++{_aceg .Data [_eabge ]=_baae (_aceg .Data [_eabge ],0x0,_gbae );
_eabge +=_aceg .RowStride ;};if _eecc {for _cegb =0;_cegb < _dgfa ;_cegb ++{for _fgde =0;_fgde < _afagc ;_fgde ++{_aceg .Data [_gfef +_fgde ]=0x0;};_gfef +=_aceg .RowStride ;};};if _bfga {for _cegb =0;_cegb < _dgfa ;_cegb ++{_aceg .Data [_eedc ]=_baae (_aceg .Data [_eedc ],0x0,_cdee );
_eedc +=_aceg .RowStride ;};};case PixSet :for _cegb =0;_cegb < _dgfa ;_cegb ++{_aceg .Data [_eabge ]=_baae (_aceg .Data [_eabge ],0xff,_gbae );_eabge +=_aceg .RowStride ;};if _eecc {for _cegb =0;_cegb < _dgfa ;_cegb ++{for _fgde =0;_fgde < _afagc ;_fgde ++{_aceg .Data [_gfef +_fgde ]=0xff;
};_gfef +=_aceg .RowStride ;};};if _bfga {for _cegb =0;_cegb < _dgfa ;_cegb ++{_aceg .Data [_eedc ]=_baae (_aceg .Data [_eedc ],0xff,_cdee );_eedc +=_aceg .RowStride ;};};case PixNotDst :for _cegb =0;_cegb < _dgfa ;_cegb ++{_aceg .Data [_eabge ]=_baae (_aceg .Data [_eabge ],^_aceg .Data [_eabge ],_gbae );
_eabge +=_aceg .RowStride ;};if _eecc {for _cegb =0;_cegb < _dgfa ;_cegb ++{for _fgde =0;_fgde < _afagc ;_fgde ++{_aceg .Data [_gfef +_fgde ]=^(_aceg .Data [_gfef +_fgde ]);};_gfef +=_aceg .RowStride ;};};if _bfga {for _cegb =0;_cegb < _dgfa ;_cegb ++{_aceg .Data [_eedc ]=_baae (_aceg .Data [_eedc ],^_aceg .Data [_eedc ],_cdee );
_eedc +=_aceg .RowStride ;};};};};func TstTSymbol (t *_f .T ,scale ...int )*Bitmap {_eaab ,_ffbfg :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_ee .NoError (t ,_ffbfg );return TstGetScaledSymbol (t ,_eaab ,scale ...);};func _dec (_dae ,_ded *Bitmap ,_bbd int ,_egfb []byte ,_gcg int )(_fde error ){const _fdaa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_febe ,_dag ,_ef ,_eeb ,_bfabd ,_beg ,_afa ,_edce int ;_aab ,_bbe ,_adf ,_ddde uint32 ;_gbb ,_aff byte ;_bag uint16 ;);_eb :=make ([]byte ,4);_dea :=make ([]byte ,4);for _ef =0;_ef < _dae .Height -1;_ef ,_eeb =_ef +2,_eeb +1{_febe =_ef *_dae .RowStride ;
_dag =_eeb *_ded .RowStride ;for _bfabd ,_beg =0,0;_bfabd < _gcg ;_bfabd ,_beg =_bfabd +4,_beg +1{for _afa =0;_afa < 4;_afa ++{_edce =_febe +_bfabd +_afa ;if _edce <=len (_dae .Data )-1&&_edce < _febe +_dae .RowStride {_eb [_afa ]=_dae .Data [_edce ];}else {_eb [_afa ]=0x00;
};_edce =_febe +_dae .RowStride +_bfabd +_afa ;if _edce <=len (_dae .Data )-1&&_edce < _febe +(2*_dae .RowStride ){_dea [_afa ]=_dae .Data [_edce ];}else {_dea [_afa ]=0x00;};};_aab =_gd .BigEndian .Uint32 (_eb );_bbe =_gd .BigEndian .Uint32 (_dea );_adf =_aab &_bbe ;
_adf |=_adf <<1;_ddde =_aab |_bbe ;_ddde &=_ddde <<1;_bbe =_adf |_ddde ;_bbe &=0xaaaaaaaa;_aab =_bbe |(_bbe <<7);_gbb =byte (_aab >>24);_aff =byte ((_aab >>8)&0xff);_edce =_dag +_beg ;if _edce +1==len (_ded .Data )-1||_edce +1>=_dag +_ded .RowStride {if _fde =_ded .SetByte (_edce ,_egfb [_gbb ]);
_fde !=nil {return _e .Wrapf (_fde ,_fdaa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_edce );};}else {_bag =(uint16 (_egfb [_gbb ])<<8)|uint16 (_egfb [_aff ]);if _fde =_ded .setTwoBytes (_edce ,_bag );_fde !=nil {return _e .Wrapf (_fde ,_fdaa ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_edce );
};_beg ++;};};};return nil ;};func New (width ,height int )*Bitmap {_addb :=_acf (width ,height );_addb .Data =make ([]byte ,height *_addb .RowStride );return _addb ;};func (_gbdb Points )GetIntX (i int )(int ,error ){if i >=len (_gbdb ){return 0,_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_gbdb [i ].X ),nil ;};func _dffae (_fbfa *_ad .Stack )(_eceg *fillSegment ,_bdfec error ){const _cdacb ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _fbfa ==nil {return nil ,_e .Error (_cdacb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _fbfa .Aux ==nil {return nil ,_e .Error (_cdacb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_agcaf ,_afbg :=_fbfa .Pop ();if !_afbg {return nil ,nil ;};_gede ,_afbg :=_agcaf .(*fillSegment );
if !_afbg {return nil ,_e .Error (_cdacb ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_eceg =&fillSegment {_gede ._cadf ,_gede ._abffe ,_gede ._bcbf +_gede ._dbfc ,_gede ._dbfc };
_fbfa .Aux .Push (_gede );return _eceg ,nil ;};const _daebg =5000;func _cecd (_aafg *Bitmap ,_bcabg ,_cbbaa ,_bdgd ,_addg int ,_eadd RasterOperator ){if _bcabg < 0{_bdgd +=_bcabg ;_bcabg =0;};_fcgdgg :=_bcabg +_bdgd -_aafg .Width ;if _fcgdgg > 0{_bdgd -=_fcgdgg ;
};if _cbbaa < 0{_addg +=_cbbaa ;_cbbaa =0;};_bbadd :=_cbbaa +_addg -_aafg .Height ;if _bbadd > 0{_addg -=_bbadd ;};if _bdgd <=0||_addg <=0{return ;};if (_bcabg &7)==0{_gcdc (_aafg ,_bcabg ,_cbbaa ,_bdgd ,_addg ,_eadd );}else {_bdddc (_aafg ,_bcabg ,_cbbaa ,_bdgd ,_addg ,_eadd );
};};func (_febgc Points )Size ()int {return len (_febgc )};type RasterOperator int ;var _bgec =[5]int {1,2,3,0,4};var _fccge =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_geee *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _geee .Copy (),nil ;};_gbac ,_gagf :=_geee .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _gagf !=nil {return nil ,_e .Wrap (_gagf ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");
};return _gbac ,nil ;};func (_ggabf *Bitmap )centroid (_ccg ,_cgab []int )(Point ,error ){_cdcdf :=Point {};_ggabf .setPadBits (0);if len (_ccg )==0{_ccg =_gceg ();};if len (_cgab )==0{_cgab =_acdc ();};var _egag ,_bffb ,_dcgb ,_gcfe ,_bgfg ,_gfce int ;
var _cfbgg byte ;for _bgfg =0;_bgfg < _ggabf .Height ;_bgfg ++{_daad :=_ggabf .RowStride *_bgfg ;_gcfe =0;for _gfce =0;_gfce < _ggabf .RowStride ;_gfce ++{_cfbgg =_ggabf .Data [_daad +_gfce ];if _cfbgg !=0{_gcfe +=_cgab [_cfbgg ];_egag +=_ccg [_cfbgg ]+_gfce *8*_cgab [_cfbgg ];
};};_dcgb +=_gcfe ;_bffb +=_gcfe *_bgfg ;};if _dcgb !=0{_cdcdf .X =float32 (_egag )/float32 (_dcgb );_cdcdf .Y =float32 (_bffb )/float32 (_dcgb );};return _cdcdf ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
func _fbcda (_cggb ,_cdff *Bitmap ,_dgfc *Selection )(*Bitmap ,error ){const _bcaec ="\u006f\u0070\u0065\u006e";var _fac error ;_cggb ,_fac =_cdbe (_cggb ,_cdff ,_dgfc );if _fac !=nil {return nil ,_e .Wrap (_fac ,_bcaec ,"");};_bbdf ,_fac :=_cafc (nil ,_cdff ,_dgfc );
if _fac !=nil {return nil ,_e .Wrap (_fac ,_bcaec ,"");};_ ,_fac =_eadb (_cggb ,_bbdf ,_dgfc );if _fac !=nil {return nil ,_e .Wrap (_fac ,_bcaec ,"");};return _cggb ,nil ;};func Extract (roi _be .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ffag :=New (roi .Dx (),roi .Dy ());
_abdf :=roi .Min .X &0x07;_cbbc :=8-_abdf ;_bgfeg :=uint (8-_ffag .Width &0x07);_bge :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_dbdc :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_bfce :=_ffag .RowStride ==_dbdc +1-_bge ;var _gff int ;for _dgfd :=roi .Min .Y ;
_dgfd < roi .Max .Y ;_dgfd ++{_cecc :=_bge ;_decg :=_gff ;switch {case _bge ==_dbdc :_cef ,_dgbe :=src .GetByte (_cecc );if _dgbe !=nil {return nil ,_dgbe ;};_cef <<=uint (_abdf );_dgbe =_ffag .SetByte (_decg ,_ebfa (_bgfeg ,_cef ));if _dgbe !=nil {return nil ,_dgbe ;
};case _abdf ==0:for _gceb :=_bge ;_gceb <=_dbdc ;_gceb ++{_bgce ,_dbgfc :=src .GetByte (_cecc );if _dbgfc !=nil {return nil ,_dbgfc ;};_cecc ++;if _gceb ==_dbdc &&_bfce {_bgce =_ebfa (_bgfeg ,_bgce );};_dbgfc =_ffag .SetByte (_decg ,_bgce );if _dbgfc !=nil {return nil ,_dbgfc ;
};_decg ++;};default:_fbbe :=_dede (src ,_ffag ,uint (_abdf ),uint (_cbbc ),_bgfeg ,_bge ,_dbdc ,_bfce ,_cecc ,_decg );if _fbbe !=nil {return nil ,_fbbe ;};};_bge +=src .RowStride ;_dbdc +=src .RowStride ;_gff +=_ffag .RowStride ;};return _ffag ,nil ;};
func (_bdfe Points )GetGeometry (i int )(_cdfbc ,_ffdf float32 ,_ddfe error ){if i > len (_bdfe )-1{return 0,0,_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_agaf :=_bdfe [i ];return _agaf .X ,_agaf .Y ,nil ;};func (_bggcg *Bitmaps )SortByWidth (){_aebe :=(*byWidth )(_bggcg );_g .Sort (_aebe )};func (_eegb *Bitmap )GetUnpaddedData ()([]byte ,error ){_daccc :=uint (_eegb .Width &0x07);if _daccc ==0{return _eegb .Data ,nil ;
};_cfe :=_eegb .Width *_eegb .Height ;if _cfe %8!=0{_cfe >>=3;_cfe ++;}else {_cfe >>=3;};_cdg :=make ([]byte ,_cfe );_dddg :=_d .NewWriterMSB (_cdg );const _dfbd ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _bcf :=0;
_bcf < _eegb .Height ;_bcf ++{for _feeg :=0;_feeg < _eegb .RowStride ;_feeg ++{_gbfg :=_eegb .Data [_bcf *_eegb .RowStride +_feeg ];if _feeg !=_eegb .RowStride -1{_aca :=_dddg .WriteByte (_gbfg );if _aca !=nil {return nil ,_e .Wrap (_aca ,_dfbd ,"");};
continue ;};for _fbbg :=uint (0);_fbbg < _daccc ;_fbbg ++{_agd :=_dddg .WriteBit (int (_gbfg >>(7-_fbbg )&0x01));if _agd !=nil {return nil ,_e .Wrap (_agd ,_dfbd ,"");};};};};return _cdg ,nil ;};func (_eea *Bitmap )Zero ()bool {_gcce :=_eea .Width /8;_gfc :=_eea .Width &7;
var _cdf byte ;if _gfc !=0{_cdf =byte (0xff<<uint (8-_gfc ));};var _cdcd ,_dca ,_affg int ;for _dca =0;_dca < _eea .Height ;_dca ++{_cdcd =_eea .RowStride *_dca ;for _affg =0;_affg < _gcce ;_affg ,_cdcd =_affg +1,_cdcd +1{if _eea .Data [_cdcd ]!=0{return false ;
};};if _gfc > 0{if _eea .Data [_cdcd ]&_cdf !=0{return false ;};};};return true ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_aabeb *Boxes )makeSizeIndicator (_ffg ,_fage int ,_adeb LocationFilter ,_eagg SizeComparison )*_ad .NumSlice {_cbfb :=&_ad .NumSlice {};
var _edcc ,_adgg ,_bedf int ;for _ ,_agcb :=range *_aabeb {_edcc =0;_adgg ,_bedf =_agcb .Dx (),_agcb .Dy ();switch _adeb {case LocSelectWidth :if (_eagg ==SizeSelectIfLT &&_adgg < _ffg )||(_eagg ==SizeSelectIfGT &&_adgg > _ffg )||(_eagg ==SizeSelectIfLTE &&_adgg <=_ffg )||(_eagg ==SizeSelectIfGTE &&_adgg >=_ffg ){_edcc =1;
};case LocSelectHeight :if (_eagg ==SizeSelectIfLT &&_bedf < _fage )||(_eagg ==SizeSelectIfGT &&_bedf > _fage )||(_eagg ==SizeSelectIfLTE &&_bedf <=_fage )||(_eagg ==SizeSelectIfGTE &&_bedf >=_fage ){_edcc =1;};case LocSelectIfEither :if (_eagg ==SizeSelectIfLT &&(_bedf < _fage ||_adgg < _ffg ))||(_eagg ==SizeSelectIfGT &&(_bedf > _fage ||_adgg > _ffg ))||(_eagg ==SizeSelectIfLTE &&(_bedf <=_fage ||_adgg <=_ffg ))||(_eagg ==SizeSelectIfGTE &&(_bedf >=_fage ||_adgg >=_ffg )){_edcc =1;
};case LocSelectIfBoth :if (_eagg ==SizeSelectIfLT &&(_bedf < _fage &&_adgg < _ffg ))||(_eagg ==SizeSelectIfGT &&(_bedf > _fage &&_adgg > _ffg ))||(_eagg ==SizeSelectIfLTE &&(_bedf <=_fage &&_adgg <=_ffg ))||(_eagg ==SizeSelectIfGTE &&(_bedf >=_fage &&_adgg >=_ffg )){_edcc =1;
};};_cbfb .AddInt (_edcc );};return _cbfb ;};func (_abcaa *Bitmaps )AddBox (box *_be .Rectangle ){_abcaa .Boxes =append (_abcaa .Boxes ,box )};func _acdc ()[]int {_acfg :=make ([]int ,256);for _efba :=0;_efba <=0xff;_efba ++{_acef :=byte (_efba );_acfg [_acef ]=int (_acef &0x1)+(int (_acef >>1)&0x1)+(int (_acef >>2)&0x1)+(int (_acef >>3)&0x1)+(int (_acef >>4)&0x1)+(int (_acef >>5)&0x1)+(int (_acef >>6)&0x1)+(int (_acef >>7)&0x1);
};return _acfg ;};func _fbd (_gef ,_bcae *Bitmap ,_ga int ,_bcb []byte ,_baa int )(_fec error ){const _fag ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_eebd ,_eef ,_dbb ,_gaf ,_ebf ,_add ,_def ,_ffa int ;
_eebe ,_gbc ,_cgf ,_cf uint32 ;_dacc ,_fcg byte ;_ccf uint16 ;);_ege :=make ([]byte ,4);_bcac :=make ([]byte ,4);for _dbb =0;_dbb < _gef .Height -1;_dbb ,_gaf =_dbb +2,_gaf +1{_eebd =_dbb *_gef .RowStride ;_eef =_gaf *_bcae .RowStride ;for _ebf ,_add =0,0;
_ebf < _baa ;_ebf ,_add =_ebf +4,_add +1{for _def =0;_def < 4;_def ++{_ffa =_eebd +_ebf +_def ;if _ffa <=len (_gef .Data )-1&&_ffa < _eebd +_gef .RowStride {_ege [_def ]=_gef .Data [_ffa ];}else {_ege [_def ]=0x00;};_ffa =_eebd +_gef .RowStride +_ebf +_def ;
if _ffa <=len (_gef .Data )-1&&_ffa < _eebd +(2*_gef .RowStride ){_bcac [_def ]=_gef .Data [_ffa ];}else {_bcac [_def ]=0x00;};};_eebe =_gd .BigEndian .Uint32 (_ege );_gbc =_gd .BigEndian .Uint32 (_bcac );_cgf =_eebe &_gbc ;_cgf |=_cgf <<1;_cf =_eebe |_gbc ;
_cf &=_cf <<1;_gbc =_cgf &_cf ;_gbc &=0xaaaaaaaa;_eebe =_gbc |(_gbc <<7);_dacc =byte (_eebe >>24);_fcg =byte ((_eebe >>8)&0xff);_ffa =_eef +_add ;if _ffa +1==len (_bcae .Data )-1||_ffa +1>=_eef +_bcae .RowStride {if _fec =_bcae .SetByte (_ffa ,_bcb [_dacc ]);
_fec !=nil {return _e .Wrapf (_fec ,_fag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ffa );};}else {_ccf =(uint16 (_bcb [_dacc ])<<8)|uint16 (_bcb [_fcg ]);if _fec =_bcae .setTwoBytes (_ffa ,_ccf );_fec !=nil {return _e .Wrapf (_fec ,_fag ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ffa );
};_add ++;};};};return nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func TstImageBitmapData ()[]byte {return _ffad .Data };func (_bffda Points )Get (i int )(Point ,error ){if i > len (_bffda )-1{return Point {},_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _bffda [i ],nil ;};type shift int ;func TstNSymbol (t *_f .T ,scale ...int )*Bitmap {_ebaf ,_agfbd :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_ee .NoError (t ,_agfbd );return TstGetScaledSymbol (t ,_ebaf ,scale ...);};func (_efcb *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_ceaa *Boxes ,_cbfd error ){const _dcfd ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _efcb ==nil {return nil ,_e .Error (_dcfd ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_e .Error (_dcfd ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _ceaa ,_cbfd =_efcb .connComponentsBB (connectivity );_cbfd !=nil {return nil ,_e .Wrap (_cbfd ,_dcfd ,"");};}else {if _ceaa ,_cbfd =_efcb .connComponentsBitmapsBB (bms ,connectivity );_cbfd !=nil {return nil ,_e .Wrap (_cbfd ,_dcfd ,"");
};};return _ceaa ,nil ;};func (_abafc *Selection )setOrigin (_dfcdb ,_edge int ){_abafc .Cy ,_abafc .Cx =_dfcdb ,_edge };func _aba (_bdg *Bitmap ,_edf int ,_gb []byte )(_bfgf *Bitmap ,_fae error ){const _abe ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _bdg ==nil {return nil ,_e .Error (_abe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _edf < 1||_edf > 4{return nil ,_e .Error (_abe ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _bdg .Height <=1{return nil ,_e .Errorf (_abe ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_bdg .Height );
};_bfgf =New (_bdg .Width /2,_bdg .Height /2);if _gb ==nil {_gb =_dga ();};_cdc :=_aggg (_bdg .RowStride ,2*_bfgf .RowStride );switch _edf {case 1:_fae =_deg (_bdg ,_bfgf ,_edf ,_gb ,_cdc );case 2:_fae =_dec (_bdg ,_bfgf ,_edf ,_gb ,_cdc );case 3:_fae =_fbd (_bdg ,_bfgf ,_edf ,_gb ,_cdc );
case 4:_fae =_efe (_bdg ,_bfgf ,_edf ,_gb ,_cdc );};if _fae !=nil {return nil ,_fae ;};return _bfgf ,nil ;};func (_agc *Bitmap )Equals (s *Bitmap )bool {if len (_agc .Data )!=len (s .Data )||_agc .Width !=s .Width ||_agc .Height !=s .Height {return false ;
};for _bae :=0;_bae < _agc .Height ;_bae ++{_dbg :=_bae *_agc .RowStride ;for _bbc :=0;_bbc < _agc .RowStride ;_bbc ++{if _agc .Data [_dbg +_bbc ]!=s .Data [_dbg +_bbc ]{return false ;};};};return true ;};func (_abb *Bitmap )setEightFullBytes (_ggbe int ,_fegf uint64 )error {if _ggbe +7> len (_abb .Data )-1{return _e .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_abb .Data [_ggbe ]=byte ((_fegf &0xff00000000000000)>>56);_abb .Data [_ggbe +1]=byte ((_fegf &0xff000000000000)>>48);_abb .Data [_ggbe +2]=byte ((_fegf &0xff0000000000)>>40);_abb .Data [_ggbe +3]=byte ((_fegf &0xff00000000)>>32);_abb .Data [_ggbe +4]=byte ((_fegf &0xff000000)>>24);
_abb .Data [_ggbe +5]=byte ((_fegf &0xff0000)>>16);_abb .Data [_ggbe +6]=byte ((_fegf &0xff00)>>8);_abb .Data [_ggbe +7]=byte (_fegf &0xff);return nil ;};type byHeight Bitmaps ;var MorphBC BoundaryCondition ;func (_cde *Bitmap )CreateTemplate ()*Bitmap {return _cde .createTemplate ()};
func (_eggd *Bitmaps )Size ()int {return len (_eggd .Values )};const (_aaab shift =iota ;_dgdc ;);func (_fafdb *byHeight )Swap (i ,j int ){_fafdb .Values [i ],_fafdb .Values [j ]=_fafdb .Values [j ],_fafdb .Values [i ];if _fafdb .Boxes !=nil {_fafdb .Boxes [i ],_fafdb .Boxes [j ]=_fafdb .Boxes [j ],_fafdb .Boxes [i ];
};};func _ecfd (_eeffc ,_cabfc *Bitmap ,_acgca ,_adec int )(_ccege error ){const _eeaef ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_dcef ,_deef ,_ecce ,_fdbc int ;_bcbde ,_ecaf ,_facgf ,_ecgf ,_bbcd ,_abfc ,_befec byte ;
);for _dcef =0;_dcef < _acgca ;_dcef ++{_ecce =_dcef *_eeffc .RowStride ;_fdbc =_dcef *_cabfc .RowStride ;for _deef =0;_deef < _adec ;_deef ++{_bcbde ,_ccege =_eeffc .GetByte (_ecce +_deef );if _ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_ecaf ,_ccege =_cabfc .GetByte (_fdbc +_deef );if _ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _dcef > 0{_facgf ,_ccege =_eeffc .GetByte (_ecce -_eeffc .RowStride +_deef );if _ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"\u0069\u0020\u003e \u0030");
};_bcbde |=_facgf ;};if _deef > 0{_ecgf ,_ccege =_eeffc .GetByte (_ecce +_deef -1);if _ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"\u006a\u0020\u003e \u0030");};_bcbde |=_ecgf <<7;};_bcbde &=_ecaf ;if _bcbde ==0||(^_bcbde )==0{if _ccege =_eeffc .SetByte (_ecce +_deef ,_bcbde );
_ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_befec =_bcbde ;_bcbde =(_bcbde |(_bcbde >>1)|(_bcbde <<1))&_ecaf ;if (_bcbde ^_befec )==0{if _ccege =_eeffc .SetByte (_ecce +_deef ,_bcbde );
_ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _dcef =_acgca -1;_dcef >=0;_dcef --{_ecce =_dcef *_eeffc .RowStride ;_fdbc =_dcef *_cabfc .RowStride ;
for _deef =_adec -1;_deef >=0;_deef --{if _bcbde ,_ccege =_eeffc .GetByte (_ecce +_deef );_ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _ecaf ,_ccege =_cabfc .GetByte (_fdbc +_deef );
_ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dcef < _acgca -1{if _bbcd ,_ccege =_eeffc .GetByte (_ecce +_eeffc .RowStride +_deef );_ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_bcbde |=_bbcd ;};if _deef < _adec -1{if _abfc ,_ccege =_eeffc .GetByte (_ecce +_deef +1);_ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_bcbde |=_abfc >>7;
};_bcbde &=_ecaf ;if _bcbde ==0||(^_bcbde )==0{if _ccege =_eeffc .SetByte (_ecce +_deef ,_bcbde );_ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_befec =_bcbde ;_bcbde =(_bcbde |(_bcbde >>1)|(_bcbde <<1))&_ecaf ;if (_bcbde ^_befec )==0{if _ccege =_eeffc .SetByte (_ecce +_deef ,_bcbde );_ccege !=nil {return _e .Wrap (_ccege ,_eeaef ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func TstESymbol (t *_f .T ,scale ...int )*Bitmap {_fdgd ,_edea :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_ee .NoError (t ,_edea );return TstGetScaledSymbol (t ,_fdgd ,scale ...);};func TstFrameBitmapData ()[]byte {return _cefed .Data };
type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_gag *Bitmap )CountPixels ()int {return _gag .countPixels ()};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_gdbe :=_cdd (h ,w ,"");
_gdbe .setOrigin (cy ,cx );var _aacf ,_feeab int ;for _aacf =0;_aacf < h ;_aacf ++{for _feeab =0;_feeab < w ;_feeab ++{_gdbe .Data [_aacf ][_feeab ]=tp ;};};return _gdbe ;};func (_bace *ClassedPoints )Less (i ,j int )bool {return _bace ._fggbca (i ,j )};
func TstImageBitmap ()*Bitmap {return _ffad .Copy ()};func (_ddgc *Bitmaps )WidthSorter ()func (_deeea ,_bacb int )bool {return func (_aead ,_adbg int )bool {return _ddgc .Values [_aead ].Width < _ddgc .Values [_adbg ].Width };};func (_febaf *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _bfag ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_febaf .IntSlice .Size (){return 0,_e .Errorf (_bfag ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_febaf .YAtIndex (i )),nil ;};func (_cgeg *ClassedPoints )xSortFunction ()func (_cdab int ,_geda int )bool {return func (_eaf ,_cecg int )bool {return _cgeg .XAtIndex (_eaf )< _cgeg .XAtIndex (_cecg )};};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _gdfe (src ,sequence ...);
};type Bitmaps struct{Values []*Bitmap ;Boxes []*_be .Rectangle ;};func _efeg (_aadc *Bitmap ,_ece *_ad .Stack ,_fgddea ,_fbdbc int )(_feeag *_be .Rectangle ,_gdge error ){const _eebda ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _aadc ==nil {return nil ,_e .Error (_eebda ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _ece ==nil {return nil ,_e .Error (_eebda ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_aae ,_gedd :=_aadc .Width ,_aadc .Height ;_abgd :=_aae -1;_gacb :=_gedd -1;if _fgddea < 0||_fgddea > _abgd ||_fbdbc < 0||_fbdbc > _gacb ||!_aadc .GetPixel (_fgddea ,_fbdbc ){return nil ,nil ;};var _cfca *_be .Rectangle ;_cfca ,_gdge =Rect (100000,100000,0,0);
if _gdge !=nil {return nil ,_e .Wrap (_gdge ,_eebda ,"");};if _gdge =_bacef (_ece ,_fgddea ,_fgddea ,_fbdbc ,1,_gacb ,_cfca );_gdge !=nil {return nil ,_e .Wrap (_gdge ,_eebda ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gdge =_bacef (_ece ,_fgddea ,_fgddea ,_fbdbc +1,-1,_gacb ,_cfca );
_gdge !=nil {return nil ,_e .Wrap (_gdge ,_eebda ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_cfca .Min .X ,_cfca .Max .X =_fgddea ,_fgddea ;_cfca .Min .Y ,_cfca .Max .Y =_fbdbc ,_fbdbc ;var (_cedf *fillSegment ;
_acad int ;);for _ece .Len ()> 0{if _cedf ,_gdge =_dffae (_ece );_gdge !=nil {return nil ,_e .Wrap (_gdge ,_eebda ,"");};_fbdbc =_cedf ._bcbf ;for _fgddea =_cedf ._cadf ;_fgddea >=0&&_aadc .GetPixel (_fgddea ,_fbdbc );_fgddea --{if _gdge =_aadc .SetPixel (_fgddea ,_fbdbc ,0);
_gdge !=nil {return nil ,_e .Wrap (_gdge ,_eebda ,"");};};if _fgddea >=_cedf ._cadf {for _fgddea ++;_fgddea <=_cedf ._abffe &&_fgddea <=_abgd &&!_aadc .GetPixel (_fgddea ,_fbdbc );_fgddea ++{};_acad =_fgddea ;if !(_fgddea <=_cedf ._abffe &&_fgddea <=_abgd ){continue ;
};}else {_acad =_fgddea +1;if _acad < _cedf ._cadf -1{if _gdge =_bacef (_ece ,_acad ,_cedf ._cadf -1,_cedf ._bcbf ,-_cedf ._dbfc ,_gacb ,_cfca );_gdge !=nil {return nil ,_e .Wrap (_gdge ,_eebda ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_fgddea =_cedf ._cadf +1;};for {for ;_fgddea <=_abgd &&_aadc .GetPixel (_fgddea ,_fbdbc );_fgddea ++{if _gdge =_aadc .SetPixel (_fgddea ,_fbdbc ,0);_gdge !=nil {return nil ,_e .Wrap (_gdge ,_eebda ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _gdge =_bacef (_ece ,_acad ,_fgddea -1,_cedf ._bcbf ,_cedf ._dbfc ,_gacb ,_cfca );
_gdge !=nil {return nil ,_e .Wrap (_gdge ,_eebda ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fgddea > _cedf ._abffe +1{if _gdge =_bacef (_ece ,_cedf ._abffe +1,_fgddea -1,_cedf ._bcbf ,-_cedf ._dbfc ,_gacb ,_cfca );_gdge !=nil {return nil ,_e .Wrap (_gdge ,_eebda ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _fgddea ++;_fgddea <=_cedf ._abffe &&_fgddea <=_abgd &&!_aadc .GetPixel (_fgddea ,_fbdbc );_fgddea ++{};_acad =_fgddea ;if !(_fgddea <=_cedf ._abffe &&_fgddea <=_abgd ){break ;};};};_cfca .Max .X ++;_cfca .Max .Y ++;return _cfca ,nil ;};type Boxes []*_be .Rectangle ;
func (_badd *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _aeba ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_badd .IntSlice .Size (){return 0,_e .Errorf (_aeba ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_badd .XAtIndex (i )),nil ;};func _eac (_dccec ,_gbaf ,_bafeb *Bitmap ,_fdga int )(*Bitmap ,error ){const _cced ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _gbaf ==nil {return nil ,_e .Error (_cced ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _bafeb ==nil {return nil ,_e .Error (_cced ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _fdga !=4&&_fdga !=8{return nil ,_e .Error (_cced ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _ddba error ;_dccec ,_ddba =_dfcf (_dccec ,_gbaf );if _ddba !=nil {return nil ,_e .Wrap (_ddba ,_cced ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_edcba :=_gbaf .createTemplate ();_bafeb .setPadBits (0);
for _gbgg :=0;_gbgg < _daebg ;_gbgg ++{_edcba ,_ddba =_dfcf (_edcba ,_dccec );if _ddba !=nil {return nil ,_e .Wrapf (_ddba ,_cced ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_gbgg );};if _ddba =_ebde (_dccec ,_bafeb ,_fdga );
_ddba !=nil {return nil ,_e .Wrapf (_ddba ,_cced ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_gbgg );};if _edcba .Equals (_dccec ){break ;};};return _dccec ,nil ;};func (_egga *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_efef bool ,_agge error ){const _gda ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_acdc ();};_dfba :=_egga .Width >>3;_acb :=_egga .Width &7;_daca :=byte (0xff<<uint (8-_acb ));var (_gea ,_acbe ,_ebc ,_dega int ;_gage byte ;);for _gea =0;_gea < _egga .Height ;_gea ++{_ebc =_egga .RowStride *_gea ;for _acbe =0;_acbe < _dfba ;
_acbe ++{_gage ,_agge =_egga .GetByte (_ebc +_acbe );if _agge !=nil {return false ,_e .Wrap (_agge ,_gda ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_dega +=tab8 [_gage ];};if _acb !=0{_gage ,_agge =_egga .GetByte (_ebc +_acbe );if _agge !=nil {return false ,_e .Wrap (_agge ,_gda ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_gage &=_daca ;_dega +=tab8 [_gage ];};if _dega > thresh {return true ,nil ;};};return _efef ,nil ;};func (_gbcf *Bitmap )nextOnPixelLow (_gbe ,_fecg ,_fdb ,_aef ,_abac int )(_cdcf _be .Point ,_ceb bool ,_ebff error ){const _cec ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_gdfb int ;_cad byte ;);_fbea :=_abac *_fdb ;_gcf :=_fbea +(_aef /8);if _cad ,_ebff =_gbcf .GetByte (_gcf );_ebff !=nil {return _cdcf ,false ,_e .Wrap (_ebff ,_cec ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _cad !=0{_deca :=_aef -(_aef %8)+7;for _gdfb =_aef ;_gdfb <=_deca &&_gdfb < _gbe ;_gdfb ++{if _gbcf .GetPixel (_gdfb ,_abac ){_cdcf .X =_gdfb ;_cdcf .Y =_abac ;return _cdcf ,true ,nil ;};};};_dbgb :=(_aef /8)+1;_gdfb =8*_dbgb ;var _fdgb int ;for _gcf =_fbea +_dbgb ;
_gdfb < _gbe ;_gcf ,_gdfb =_gcf +1,_gdfb +8{if _cad ,_ebff =_gbcf .GetByte (_gcf );_ebff !=nil {return _cdcf ,false ,_e .Wrap (_ebff ,_cec ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _cad ==0{continue ;
};for _fdgb =0;_fdgb < 8&&_gdfb < _gbe ;_fdgb ,_gdfb =_fdgb +1,_gdfb +1{if _gbcf .GetPixel (_gdfb ,_abac ){_cdcf .X =_gdfb ;_cdcf .Y =_abac ;return _cdcf ,true ,nil ;};};};for _bfae :=_abac +1;_bfae < _fecg ;_bfae ++{_fbea =_bfae *_fdb ;for _gcf ,_gdfb =_fbea ,0;
_gdfb < _gbe ;_gcf ,_gdfb =_gcf +1,_gdfb +8{if _cad ,_ebff =_gbcf .GetByte (_gcf );_ebff !=nil {return _cdcf ,false ,_e .Wrap (_ebff ,_cec ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _cad ==0{continue ;};for _fdgb =0;
_fdgb < 8&&_gdfb < _gbe ;_fdgb ,_gdfb =_fdgb +1,_gdfb +1{if _gbcf .GetPixel (_gdfb ,_bfae ){_cdcf .X =_gdfb ;_cdcf .Y =_bfae ;return _cdcf ,true ,nil ;};};};};return _cdcf ,false ,nil ;};type BoundaryCondition int ;func TstPSymbol (t *_f .T )*Bitmap {t .Helper ();
_aegc :=New (5,8);_ee .NoError (t ,_aegc .SetPixel (0,0,1));_ee .NoError (t ,_aegc .SetPixel (1,0,1));_ee .NoError (t ,_aegc .SetPixel (2,0,1));_ee .NoError (t ,_aegc .SetPixel (3,0,1));_ee .NoError (t ,_aegc .SetPixel (4,1,1));_ee .NoError (t ,_aegc .SetPixel (0,1,1));
_ee .NoError (t ,_aegc .SetPixel (4,2,1));_ee .NoError (t ,_aegc .SetPixel (0,2,1));_ee .NoError (t ,_aegc .SetPixel (4,3,1));_ee .NoError (t ,_aegc .SetPixel (0,3,1));_ee .NoError (t ,_aegc .SetPixel (0,4,1));_ee .NoError (t ,_aegc .SetPixel (1,4,1));
_ee .NoError (t ,_aegc .SetPixel (2,4,1));_ee .NoError (t ,_aegc .SetPixel (3,4,1));_ee .NoError (t ,_aegc .SetPixel (0,5,1));_ee .NoError (t ,_aegc .SetPixel (0,6,1));_ee .NoError (t ,_aegc .SetPixel (0,7,1));return _aegc ;};type SizeSelection int ;func TstGetScaledSymbol (t *_f .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;
};if scale [0]==1{return sm ;};_cgdf ,_bagad :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_ee .NoError (t ,_bagad );return _cgdf ;};func (_fbaf *byHeight )Less (i ,j int )bool {return _fbaf .Values [i ].Height < _fbaf .Values [j ].Height };
func (_gcaa *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ffdbc (_gcaa ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};type CombinationOperator int ;const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;
SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);type SelectionValue int ;func _bgb (_daa *Bitmap ,_ae *Bitmap ,_cba int )(_gdb error ){const _aaa ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _cba {case 2:_gdb =_ed (_daa ,_ae );case 4:_gdb =_ag (_daa ,_ae );case 8:_gdb =_feb (_daa ,_ae );default:return _e .Error (_aaa ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _gdb !=nil {_gdb =_e .Wrap (_gdb ,_aaa ,"");};return _gdb ;};type Points []Point ;func _efe (_febd ,_gaa *Bitmap ,_bdf int ,_bfaa []byte ,_cag int )(_fee error ){const _ce ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_gae ,_fggb ,_gcgg ,_adbe ,_dffe ,_age ,_feg ,_dfe int ;_dfb ,_dcd uint32 ;_fegg ,_bce byte ;_dcc uint16 ;);_gaaa :=make ([]byte ,4);_dcce :=make ([]byte ,4);for _gcgg =0;_gcgg < _febd .Height -1;_gcgg ,_adbe =_gcgg +2,_adbe +1{_gae =_gcgg *_febd .RowStride ;
_fggb =_adbe *_gaa .RowStride ;for _dffe ,_age =0,0;_dffe < _cag ;_dffe ,_age =_dffe +4,_age +1{for _feg =0;_feg < 4;_feg ++{_dfe =_gae +_dffe +_feg ;if _dfe <=len (_febd .Data )-1&&_dfe < _gae +_febd .RowStride {_gaaa [_feg ]=_febd .Data [_dfe ];}else {_gaaa [_feg ]=0x00;
};_dfe =_gae +_febd .RowStride +_dffe +_feg ;if _dfe <=len (_febd .Data )-1&&_dfe < _gae +(2*_febd .RowStride ){_dcce [_feg ]=_febd .Data [_dfe ];}else {_dcce [_feg ]=0x00;};};_dfb =_gd .BigEndian .Uint32 (_gaaa );_dcd =_gd .BigEndian .Uint32 (_dcce );
_dcd &=_dfb ;_dcd &=_dcd <<1;_dcd &=0xaaaaaaaa;_dfb =_dcd |(_dcd <<7);_fegg =byte (_dfb >>24);_bce =byte ((_dfb >>8)&0xff);_dfe =_fggb +_age ;if _dfe +1==len (_gaa .Data )-1||_dfe +1>=_fggb +_gaa .RowStride {_gaa .Data [_dfe ]=_bfaa [_fegg ];if _fee =_gaa .SetByte (_dfe ,_bfaa [_fegg ]);
_fee !=nil {return _e .Wrapf (_fee ,_ce ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dfe );};}else {_dcc =(uint16 (_bfaa [_fegg ])<<8)|uint16 (_bfaa [_bce ]);if _fee =_gaa .setTwoBytes (_dfe ,_dcc );_fee !=nil {return _e .Wrapf (_fee ,_ce ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dfe );
};_age ++;};};};return nil ;};func TstWordBitmapWithSpaces (t *_f .T ,scale ...int )*Bitmap {_ecaa :=1;if len (scale )> 0{_ecaa =scale [0];};_fefad :=3;_bbeeg :=9+7+15+2*_fefad +2*_fefad ;_eff :=5+_fefad +5+2*_fefad ;_ebae :=New (_bbeeg *_ecaa ,_eff *_ecaa );
_cgdd :=&Bitmaps {};var _agab *int ;_fefad *=_ecaa ;_dcaac :=_fefad ;_agab =&_dcaac ;_fefae :=_fefad ;_dcfg :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,1*_ecaa );_dcfg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,_fefad );
_dcfg =TstISymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,1*_ecaa );_dcfg =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,_fefad );_dcfg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,1*_ecaa );
_dcfg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,1*_ecaa );_dcfg =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,0);*_agab =_fefad ;_fefae =5*_ecaa +_fefad ;_dcfg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,1*_ecaa );
_dcfg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,_fefad );_dcfg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,1*_ecaa );_dcfg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,1*_ecaa );
_dcfg =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,1*_ecaa );_dcfg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,1*_ecaa );_dcfg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cgdd ,_dcfg ,_agab ,_fefae ,0);
TstWriteSymbols (t ,_cgdd ,_ebae );return _ebae ;};func (_ebe *Bitmap )Copy ()*Bitmap {_geeb :=make ([]byte ,len (_ebe .Data ));copy (_geeb ,_ebe .Data );return &Bitmap {Width :_ebe .Width ,Height :_ebe .Height ,RowStride :_ebe .RowStride ,Data :_geeb ,Color :_ebe .Color ,Text :_ebe .Text ,BitmapNumber :_ebe .BitmapNumber ,Special :_ebe .Special };
};func TstRSymbol (t *_f .T ,scale ...int )*Bitmap {_bbcf ,_ecbef :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_ee .NoError (t ,_ecbef );return TstGetScaledSymbol (t ,_bbcf ,scale ...);};func TstDSymbol (t *_f .T ,scale ...int )*Bitmap {_dcgf ,_cfae :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});
_ee .NoError (t ,_cfae );return TstGetScaledSymbol (t ,_dcgf ,scale ...);};func _gdfe (_cedaa *Bitmap ,_fffb ...MorphProcess )(_dgda *Bitmap ,_eae error ){const _dfgg ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _cedaa ==nil {return nil ,_e .Error (_dfgg ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_fffb )==0{return nil ,_e .Error (_dfgg ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _eae =_abgf (_fffb ...);
_eae !=nil {return nil ,_e .Wrap (_eae ,_dfgg ,"");};var _ccac ,_cdac ,_fdbd int ;_dgda =_cedaa .Copy ();for _ ,_faac :=range _fffb {switch _faac .Operation {case MopDilation :_ccac ,_cdac =_faac .getWidthHeight ();_dgda ,_eae =DilateBrick (nil ,_dgda ,_ccac ,_cdac );
if _eae !=nil {return nil ,_e .Wrap (_eae ,_dfgg ,"");};case MopErosion :_ccac ,_cdac =_faac .getWidthHeight ();_dgda ,_eae =_efgg (nil ,_dgda ,_ccac ,_cdac );if _eae !=nil {return nil ,_e .Wrap (_eae ,_dfgg ,"");};case MopOpening :_ccac ,_cdac =_faac .getWidthHeight ();
_dgda ,_eae =_efbbd (nil ,_dgda ,_ccac ,_cdac );if _eae !=nil {return nil ,_e .Wrap (_eae ,_dfgg ,"");};case MopClosing :_ccac ,_cdac =_faac .getWidthHeight ();_dgda ,_eae =_efae (nil ,_dgda ,_ccac ,_cdac );if _eae !=nil {return nil ,_e .Wrap (_eae ,_dfgg ,"");
};case MopRankBinaryReduction :_dgda ,_eae =_gdf (_dgda ,_faac .Arguments ...);if _eae !=nil {return nil ,_e .Wrap (_eae ,_dfgg ,"");};case MopReplicativeBinaryExpansion :_dgda ,_eae =_decbga (_dgda ,_faac .Arguments [0]);if _eae !=nil {return nil ,_e .Wrap (_eae ,_dfgg ,"");
};case MopAddBorder :_fdbd =_faac .Arguments [0];_dgda ,_eae =_dgda .AddBorder (_fdbd ,0);if _eae !=nil {return nil ,_e .Wrap (_eae ,_dfgg ,"");};default:return nil ,_e .Error (_dfgg ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _fdbd > 0{_dgda ,_eae =_dgda .RemoveBorder (_fdbd );if _eae !=nil {return nil ,_e .Wrap (_eae ,_dfgg ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _dgda ,nil ;};func (_agee *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _aeagd ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_fgcbg ,_degb :=_agee .selectByIndexes (idx );if _degb !=nil {return nil ,_e .Wrap (_degb ,_aeagd ,"");};return _fgcbg ,nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_feea bool ,_ceef error ){const _ddgd ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_fdde ,_fcaa :=p1 .Width ,p1 .Height ;_feeba ,_aagdd :=p3 .Width ,p3 .Height ;if _ad .Abs (_fdde -_feeba )> maxDiffW {return false ,nil ;};if _ad .Abs (_fcaa -_aagdd )> maxDiffH {return false ,nil ;};_bbfgd :=int (float32 (area1 )*(1.0-rank )+0.5);_cfed :=int (float32 (area3 )*(1.0-rank )+0.5);
var _acea ,_daeb int ;if delX >=0{_acea =int (delX +0.5);}else {_acea =int (delX -0.5);};if delY >=0{_daeb =int (delY +0.5);}else {_daeb =int (delY -0.5);};_cdgde :=p1 .CreateTemplate ();if _ceef =_cdgde .RasterOperation (0,0,_fdde ,_fcaa ,PixSrc ,p1 ,0,0);
_ceef !=nil {return false ,_e .Wrap (_ceef ,_ddgd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ceef =_cdgde .RasterOperation (_acea ,_daeb ,_fdde ,_fcaa ,PixNotSrcAndDst ,p4 ,0,0);_ceef !=nil {return false ,_e .Wrap (_ceef ,_ddgd ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_feea ,_ceef =_cdgde .ThresholdPixelSum (_bbfgd ,tab8 );if _ceef !=nil {return false ,_e .Wrap (_ceef ,_ddgd ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _feea {return false ,nil ;};if _ceef =_cdgde .RasterOperation (_acea ,_daeb ,_feeba ,_aagdd ,PixSrc ,p3 ,0,0);
_ceef !=nil {return false ,_e .Wrap (_ceef ,_ddgd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ceef =_cdgde .RasterOperation (0,0,_feeba ,_aagdd ,PixNotSrcAndDst ,p2 ,0,0);_ceef !=nil {return false ,_e .Wrap (_ceef ,_ddgd ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_feea ,_ceef =_cdgde .ThresholdPixelSum (_cfed ,tab8 );if _ceef !=nil {return false ,_e .Wrap (_ceef ,_ddgd ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_feea ,nil ;};func (_ccab MorphProcess )verify (_fdecf int ,_ggab ,_dgga *int )error {const _cdce ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _ccab .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_ccab .Arguments )!=2{return _e .Error (_cdce ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_aceag ,_fcgd :=_ccab .getWidthHeight ();if _aceag <=0||_fcgd <=0{return _e .Error (_cdce ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_fdea :=len (_ccab .Arguments );*_ggab +=_fdea ;if _fdea < 1||_fdea > 4{return _e .Error (_cdce ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _gegg :=0;_gegg < _fdea ;_gegg ++{if _ccab .Arguments [_gegg ]< 1||_ccab .Arguments [_gegg ]> 4{return _e .Error (_cdce ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_ccab .Arguments )==0{return _e .Error (_cdce ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cbcc :=_ccab .Arguments [0];if _cbcc !=2&&_cbcc !=4&&_cbcc !=8{return _e .Error (_cdce ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_ggab -=_bgec [_cbcc /4];case MopAddBorder :if len (_ccab .Arguments )==0{return _e .Error (_cdce ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cagf :=_ccab .Arguments [0];if _fdecf > 0{return _e .Error (_cdce ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _cagf < 1{return _e .Error (_cdce ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_dgga =_cagf ;};return nil ;};func _gceg ()[]int {_bggc :=make ([]int ,256);
_bggc [0]=0;_bggc [1]=7;var _aaad int ;for _aaad =2;_aaad < 4;_aaad ++{_bggc [_aaad ]=_bggc [_aaad -2]+6;};for _aaad =4;_aaad < 8;_aaad ++{_bggc [_aaad ]=_bggc [_aaad -4]+5;};for _aaad =8;_aaad < 16;_aaad ++{_bggc [_aaad ]=_bggc [_aaad -8]+4;};for _aaad =16;
_aaad < 32;_aaad ++{_bggc [_aaad ]=_bggc [_aaad -16]+3;};for _aaad =32;_aaad < 64;_aaad ++{_bggc [_aaad ]=_bggc [_aaad -32]+2;};for _aaad =64;_aaad < 128;_aaad ++{_bggc [_aaad ]=_bggc [_aaad -64]+1;};for _aaad =128;_aaad < 256;_aaad ++{_bggc [_aaad ]=_bggc [_aaad -128];
};return _bggc ;};type byWidth Bitmaps ;func _ffcd (_acec *Bitmap ,_dgcd ,_cffe int ,_gggd ,_eegf int ,_eabe RasterOperator ,_aebcb *Bitmap ,_ggbf ,_eddc int )error {var _aebcbf ,_gdec ,_aaf ,_bgbd int ;if _dgcd < 0{_ggbf -=_dgcd ;_gggd +=_dgcd ;_dgcd =0;
};if _ggbf < 0{_dgcd -=_ggbf ;_gggd +=_ggbf ;_ggbf =0;};_aebcbf =_dgcd +_gggd -_acec .Width ;if _aebcbf > 0{_gggd -=_aebcbf ;};_gdec =_ggbf +_gggd -_aebcb .Width ;if _gdec > 0{_gggd -=_gdec ;};if _cffe < 0{_eddc -=_cffe ;_eegf +=_cffe ;_cffe =0;};if _eddc < 0{_cffe -=_eddc ;
_eegf +=_eddc ;_eddc =0;};_aaf =_cffe +_eegf -_acec .Height ;if _aaf > 0{_eegf -=_aaf ;};_bgbd =_eddc +_eegf -_aebcb .Height ;if _bgbd > 0{_eegf -=_bgbd ;};if _gggd <=0||_eegf <=0{return nil ;};var _edff error ;switch {case _dgcd &7==0&&_ggbf &7==0:_edff =_ebgg (_acec ,_dgcd ,_cffe ,_gggd ,_eegf ,_eabe ,_aebcb ,_ggbf ,_eddc );
case _dgcd &7==_ggbf &7:_edff =_cfcd (_acec ,_dgcd ,_cffe ,_gggd ,_eegf ,_eabe ,_aebcb ,_ggbf ,_eddc );default:_edff =_cada (_acec ,_dgcd ,_cffe ,_gggd ,_eegf ,_eabe ,_aebcb ,_ggbf ,_eddc );};if _edff !=nil {return _e .Wrap (_edff ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _dbef ,_gebf int ;_fdagg :=src .RowStride -1;if x < 0{_gebf =-x ;x =0;}else if x +src .Width > dst .Width {_fdagg -=src .Width +x -dst .Width ;};if y < 0{_dbef =-y ;
y =0;_gebf +=src .RowStride ;_fdagg +=src .RowStride ;}else if y +src .Height > dst .Height {_dbef =src .Height +y -dst .Height ;};var (_cabf int ;_eggf error ;);_ecf :=x &0x07;_aagd :=8-_ecf ;_bbee :=src .Width &0x07;_dgfe :=_aagd -_bbee ;_daff :=_aagd &0x07!=0;
_fggbc :=src .Width <=((_fdagg -_gebf )<<3)+_aagd ;_fga :=dst .GetByteIndex (x ,y );_dbea :=_dbef +dst .Height ;if src .Height > _dbea {_cabf =_dbea ;}else {_cabf =src .Height ;};switch {case !_daff :_eggf =_edd (src ,dst ,_dbef ,_cabf ,_fga ,_gebf ,_fdagg ,op );
case _fggbc :_eggf =_fgdg (src ,dst ,_dbef ,_cabf ,_fga ,_gebf ,_fdagg ,_dgfe ,_ecf ,_aagd ,op );default:_eggf =_cee (src ,dst ,_dbef ,_cabf ,_fga ,_gebf ,_fdagg ,_dgfe ,_ecf ,_aagd ,op ,_bbee );};return _eggf ;};func (_bebe *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_cgde *Bitmaps ,_fdbac error ){const _dfga ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _bebe ==nil {return nil ,_e .Error (_dfga ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_e .Errorf (_dfga ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_e .Errorf (_dfga ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_beeae ,_fdbac :=_bebe .makeSizeIndicator (width ,height ,tp ,relation );if _fdbac !=nil {return nil ,_e .Wrap (_fdbac ,_dfga ,"");};_cgde ,_fdbac =_bebe .selectByIndicator (_beeae );if _fdbac !=nil {return nil ,_e .Wrap (_fdbac ,_dfga ,"");};return _cgde ,nil ;
};func (_aac *Bitmap )addPadBits ()(_ggcb error ){const _fefa ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_ccc :=_aac .Width %8;if _ccc ==0{return nil ;};_baf :=_aac .Width /8;_cbdge :=_d .NewReader (_aac .Data );
_ecd :=make ([]byte ,_aac .Height *_aac .RowStride );_caa :=_d .NewWriterMSB (_ecd );_gac :=make ([]byte ,_baf );var (_cca int ;_eab uint64 ;);for _cca =0;_cca < _aac .Height ;_cca ++{if _ ,_ggcb =_cbdge .Read (_gac );_ggcb !=nil {return _e .Wrap (_ggcb ,_fefa ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");
};if _ ,_ggcb =_caa .Write (_gac );_ggcb !=nil {return _e .Wrap (_ggcb ,_fefa ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _eab ,_ggcb =_cbdge .ReadBits (byte (_ccc ));_ggcb !=nil {return _e .Wrap (_ggcb ,_fefa ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");
};if _ggcb =_caa .WriteByte (byte (_eab )<<uint (8-_ccc ));_ggcb !=nil {return _e .Wrap (_ggcb ,_fefa ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_aac .Data =_caa .Data ();return nil ;};func (_aeeb *Bitmap )inverseData (){if _ebca :=_aeeb .RasterOperation (0,0,_aeeb .Width ,_aeeb .Height ,PixNotDst ,nil ,0,0);
_ebca !=nil {_da .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ebca );};if _aeeb .Color ==Chocolate {_aeeb .Color =Vanilla ;}else {_aeeb .Color =Chocolate ;};};func (_cdca *Bitmap )GetVanillaData ()[]byte {if _cdca .Color ==Chocolate {_cdca .inverseData ();
};return _cdca .Data ;};func _ffdbc (_cabbf *Bitmap ,_fdfc ,_gdad ,_agadf ,_gbgfb int ,_aaaeb RasterOperator ,_babd *Bitmap ,_ebcge ,_cgcg int )error {const _bdggd ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _cabbf ==nil {return _e .Error (_bdggd ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _aaaeb ==PixDst {return nil ;};switch _aaaeb {case PixClr ,PixSet ,PixNotDst :_cecd (_cabbf ,_fdfc ,_gdad ,_agadf ,_gbgfb ,_aaaeb );return nil ;};if _babd ==nil {_da .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _e .Error (_bdggd ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fcfdd :=_ffcd (_cabbf ,_fdfc ,_gdad ,_agadf ,_gbgfb ,_aaaeb ,_babd ,_ebcge ,_cgcg );_fcfdd !=nil {return _e .Wrap (_fcfdd ,_bdggd ,"");
};return nil ;};func (_ggfg Points )XSorter ()func (_cfabe ,_adbec int )bool {return func (_adag ,_edbd int )bool {return _ggfg [_adag ].X < _ggfg [_edbd ].X };};func _cfcd (_bbgg *Bitmap ,_gdeg ,_daee ,_bggg ,_fffg int ,_edffd RasterOperator ,_dggd *Bitmap ,_gegc ,_fbdcc int )error {var (_aefg bool ;
_fffbc bool ;_eeff int ;_dfdb int ;_eabg int ;_agfb bool ;_dacb byte ;_cffaa int ;_ccbad int ;_ccbc int ;_gagd ,_gcee int ;);_acgac :=8-(_gdeg &7);_abec :=_cdag [_acgac ];_dbgfa :=_bbgg .RowStride *_daee +(_gdeg >>3);_eeegd :=_dggd .RowStride *_fbdcc +(_gegc >>3);
if _bggg < _acgac {_aefg =true ;_abec &=_fgcb [8-_acgac +_bggg ];};if !_aefg {_eeff =(_bggg -_acgac )>>3;if _eeff > 0{_fffbc =true ;_dfdb =_dbgfa +1;_eabg =_eeegd +1;};};_cffaa =(_gdeg +_bggg )&7;if !(_aefg ||_cffaa ==0){_agfb =true ;_dacb =_fgcb [_cffaa ];
_ccbad =_dbgfa +1+_eeff ;_ccbc =_eeegd +1+_eeff ;};switch _edffd {case PixSrc :for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],_dggd .Data [_eeegd ],_abec );_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;};
if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]=_dggd .Data [_eabg +_gcee ];};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],_dggd .Data [_ccbc ],_dacb );
_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixNotSrc :for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],^_dggd .Data [_eeegd ],_abec );_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;};if _fffbc {for _gagd =0;
_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]=^_dggd .Data [_eabg +_gcee ];};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],^_dggd .Data [_ccbc ],_dacb );
_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixSrcOrDst :for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],_dggd .Data [_eeegd ]|_bbgg .Data [_dbgfa ],_abec );_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;
};if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]|=_dggd .Data [_eabg +_gcee ];};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],_dggd .Data [_ccbc ]|_bbgg .Data [_ccbad ],_dacb );
_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixSrcAndDst :for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],_dggd .Data [_eeegd ]&_bbgg .Data [_dbgfa ],_abec );_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;
};if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]&=_dggd .Data [_eabg +_gcee ];};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],_dggd .Data [_ccbc ]&_bbgg .Data [_ccbad ],_dacb );
_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixSrcXorDst :for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],_dggd .Data [_eeegd ]^_bbgg .Data [_dbgfa ],_abec );_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;
};if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]^=_dggd .Data [_eabg +_gcee ];};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],_dggd .Data [_ccbc ]^_bbgg .Data [_ccbad ],_dacb );
_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixNotSrcOrDst :for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],^(_dggd .Data [_eeegd ])|_bbgg .Data [_dbgfa ],_abec );_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;
};if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]|=^(_dggd .Data [_eabg +_gcee ]);};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],^(_dggd .Data [_ccbc ])|_bbgg .Data [_ccbad ],_dacb );
_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixNotSrcAndDst :for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],^(_dggd .Data [_eeegd ])&_bbgg .Data [_dbgfa ],_abec );_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;
};if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]&=^_dggd .Data [_eabg +_gcee ];};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],^(_dggd .Data [_ccbc ])&_bbgg .Data [_ccbad ],_dacb );
_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixSrcOrNotDst :for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],_dggd .Data [_eeegd ]|^(_bbgg .Data [_dbgfa ]),_abec );_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;
};if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]=_dggd .Data [_eabg +_gcee ]|^(_bbgg .Data [_dfdb +_gcee ]);};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;
_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],_dggd .Data [_ccbc ]|^(_bbgg .Data [_ccbad ]),_dacb );_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixSrcAndNotDst :for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],_dggd .Data [_eeegd ]&^(_bbgg .Data [_dbgfa ]),_abec );
_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;};if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]=_dggd .Data [_eabg +_gcee ]&^(_bbgg .Data [_dfdb +_gcee ]);};_dfdb +=_bbgg .RowStride ;
_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],_dggd .Data [_ccbc ]&^(_bbgg .Data [_ccbad ]),_dacb );_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixNotPixSrcOrDst :for _gagd =0;
_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],^(_dggd .Data [_eeegd ]|_bbgg .Data [_dbgfa ]),_abec );_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;};if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;
_gcee ++{_bbgg .Data [_dfdb +_gcee ]=^(_dggd .Data [_eabg +_gcee ]|_bbgg .Data [_dfdb +_gcee ]);};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],^(_dggd .Data [_ccbc ]|_bbgg .Data [_ccbad ]),_dacb );
_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixNotPixSrcAndDst :for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],^(_dggd .Data [_eeegd ]&_bbgg .Data [_dbgfa ]),_abec );_dbgfa +=_bbgg .RowStride ;
_eeegd +=_dggd .RowStride ;};if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]=^(_dggd .Data [_eabg +_gcee ]&_bbgg .Data [_dfdb +_gcee ]);};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;
};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],^(_dggd .Data [_ccbc ]&_bbgg .Data [_ccbad ]),_dacb );_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;};};case PixNotPixSrcXorDst :for _gagd =0;_gagd < _fffg ;
_gagd ++{_bbgg .Data [_dbgfa ]=_baae (_bbgg .Data [_dbgfa ],^(_dggd .Data [_eeegd ]^_bbgg .Data [_dbgfa ]),_abec );_dbgfa +=_bbgg .RowStride ;_eeegd +=_dggd .RowStride ;};if _fffbc {for _gagd =0;_gagd < _fffg ;_gagd ++{for _gcee =0;_gcee < _eeff ;_gcee ++{_bbgg .Data [_dfdb +_gcee ]=^(_dggd .Data [_eabg +_gcee ]^_bbgg .Data [_dfdb +_gcee ]);
};_dfdb +=_bbgg .RowStride ;_eabg +=_dggd .RowStride ;};};if _agfb {for _gagd =0;_gagd < _fffg ;_gagd ++{_bbgg .Data [_ccbad ]=_baae (_bbgg .Data [_ccbad ],^(_dggd .Data [_ccbc ]^_bbgg .Data [_ccbad ]),_dacb );_ccbad +=_bbgg .RowStride ;_ccbc +=_dggd .RowStride ;
};};default:_da .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_edffd );return _e .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func MakePixelCentroidTab8 ()[]int {return _gceg ()};func _cdaa (_ebfg *Bitmap ,_bgeag *_ad .Stack ,_ceeff ,_bgbdg ,_gfcb int )(_abaf *_be .Rectangle ,_ebeg error ){const _fedf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ebfg ==nil {return nil ,_e .Error (_fedf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bgeag ==nil {return nil ,_e .Error (_fedf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _gfcb {case 4:if _abaf ,_ebeg =_efeg (_ebfg ,_bgeag ,_ceeff ,_bgbdg );_ebeg !=nil {return nil ,_e .Wrap (_ebeg ,_fedf ,"");};return _abaf ,nil ;case 8:if _abaf ,_ebeg =_egcc (_ebfg ,_bgeag ,_ceeff ,_bgbdg );_ebeg !=nil {return nil ,_e .Wrap (_ebeg ,_fedf ,"");
};return _abaf ,nil ;default:return nil ,_e .Errorf (_fedf ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_gfcb );
};};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_cfdd *Bitmap )setPadBits (_ccfc int ){_bga :=8-_cfdd .Width %8;if _bga ==8{return ;};_faag :=_cfdd .Width /8;_dffa :=_cdag [_bga ];if _ccfc ==0{_dffa ^=_dffa ;};var _gdbc int ;
for _ccaf :=0;_ccaf < _cfdd .Height ;_ccaf ++{_gdbc =_ccaf *_cfdd .RowStride +_faag ;if _ccfc ==0{_cfdd .Data [_gdbc ]&=_dffa ;}else {_cfdd .Data [_gdbc ]|=_dffa ;};};};func (_cadb *Bitmap )connComponentsBitmapsBB (_geagb *Bitmaps ,_bee int )(_cffc *Boxes ,_fbcd error ){const _adbf ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _bee !=4&&_bee !=8{return nil ,_e .Error (_adbf ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _geagb ==nil {return nil ,_e .Error (_adbf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_geagb .Values )> 0{return nil ,_e .Error (_adbf ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _cadb .Zero (){return &Boxes {},nil ;
};var (_dfg ,_cadg ,_geae ,_agfg *Bitmap ;);_cadb .setPadBits (0);if _dfg ,_fbcd =_dfcf (nil ,_cadb );_fbcd !=nil {return nil ,_e .Wrap (_fbcd ,_adbf ,"\u0062\u006d\u0031");};if _cadg ,_fbcd =_dfcf (nil ,_cadb );_fbcd !=nil {return nil ,_e .Wrap (_fbcd ,_adbf ,"\u0062\u006d\u0032");
};_abega :=&_ad .Stack {};_abega .Aux =&_ad .Stack {};_cffc =&Boxes {};var (_gdbf ,_dage int ;_dbbff _be .Point ;_geff bool ;_gcd *_be .Rectangle ;);for {if _dbbff ,_geff ,_fbcd =_dfg .nextOnPixel (_gdbf ,_dage );_fbcd !=nil {return nil ,_e .Wrap (_fbcd ,_adbf ,"");
};if !_geff {break ;};if _gcd ,_fbcd =_cdaa (_dfg ,_abega ,_dbbff .X ,_dbbff .Y ,_bee );_fbcd !=nil {return nil ,_e .Wrap (_fbcd ,_adbf ,"");};if _fbcd =_cffc .Add (_gcd );_fbcd !=nil {return nil ,_e .Wrap (_fbcd ,_adbf ,"");};if _geae ,_fbcd =_dfg .clipRectangle (_gcd ,nil );
_fbcd !=nil {return nil ,_e .Wrap (_fbcd ,_adbf ,"\u0062\u006d\u0033");};if _agfg ,_fbcd =_cadg .clipRectangle (_gcd ,nil );_fbcd !=nil {return nil ,_e .Wrap (_fbcd ,_adbf ,"\u0062\u006d\u0034");};if _ ,_fbcd =_afab (_geae ,_geae ,_agfg );_fbcd !=nil {return nil ,_e .Wrap (_fbcd ,_adbf ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _fbcd =_cadg .RasterOperation (_gcd .Min .X ,_gcd .Min .Y ,_gcd .Dx (),_gcd .Dy (),PixSrcXorDst ,_geae ,0,0);_fbcd !=nil {return nil ,_e .Wrap (_fbcd ,_adbf ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_geagb .AddBitmap (_geae );
_gdbf =_dbbff .X ;_dage =_dbbff .Y ;};_geagb .Boxes =*_cffc ;return _cffc ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};var (_fgcb =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_cdag =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};
);func (_fbfb *Points )AddPoint (x ,y float32 ){*_fbfb =append (*_fbfb ,Point {x ,y })};func _dfcf (_befe ,_aed *Bitmap )(*Bitmap ,error ){if _aed ==nil {return nil ,_e .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _aed ==_befe {return _befe ,nil ;};if _befe ==nil {_befe =_aed .createTemplate ();copy (_befe .Data ,_aed .Data );return _befe ,nil ;};_dgf :=_befe .resizeImageData (_aed );if _dgf !=nil {return nil ,_e .Wrap (_dgf ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_befe .Text =_aed .Text ;copy (_befe .Data ,_aed .Data );return _befe ,nil ;};func (_geaf *ClassedPoints )Swap (i ,j int ){_geaf .IntSlice [i ],_geaf .IntSlice [j ]=_geaf .IntSlice [j ],_geaf .IntSlice [i ];};func (_efefaa *byWidth )Less (i ,j int )bool {return _efefaa .Values [i ].Width < _efefaa .Values [j ].Width };
func (_efaa *Bitmaps )selectByIndicator (_abdfa *_ad .NumSlice )(_bbed *Bitmaps ,_eeab error ){const _fbgc ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _efaa ==nil {return nil ,_e .Error (_fbgc ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _abdfa ==nil {return nil ,_e .Error (_fbgc ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_efaa .Values )==0{return _efaa ,nil ;};if len (*_abdfa )!=len (_efaa .Values ){return nil ,_e .Errorf (_fbgc ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_abdfa ),len (_efaa .Values ));
};var _bbec ,_egdba ,_caba int ;for _egdba =0;_egdba < len (*_abdfa );_egdba ++{if _bbec ,_eeab =_abdfa .GetInt (_egdba );_eeab !=nil {return nil ,_e .Wrap (_eeab ,_fbgc ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _bbec ==1{_caba ++;
};};if _caba ==len (_efaa .Values ){return _efaa ,nil ;};_bbed =&Bitmaps {};_beda :=len (_efaa .Values )==len (_efaa .Boxes );for _egdba =0;_egdba < len (*_abdfa );_egdba ++{if _bbec =int ((*_abdfa )[_egdba ]);_bbec ==0{continue ;};_bbed .Values =append (_bbed .Values ,_efaa .Values [_egdba ]);
if _beda {_bbed .Boxes =append (_bbed .Boxes ,_efaa .Boxes [_egdba ]);};};return _bbed ,nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_bbeg :=make ([]Point ,len (bms ));_fdf :=_gceg ();_bgae :=_acdc ();var _cggd error ;for _ddc ,_bgdg :=range bms {_bbeg [_ddc ],_cggd =_bgdg .centroid (_fdf ,_bgae );
if _cggd !=nil {return nil ,_cggd ;};};_eeaec :=Points (_bbeg );return &_eeaec ,nil ;};func (_acfd *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_eeec *Bitmaps ,_geag *Boxes ,_adfa error ){const _efac ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _acfd ==nil {return nil ,nil ,_e .Error (_efac ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_e .Error (_efac ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _acfd .Zero (){_geag =&Boxes {};_eeec =&Bitmaps {};return _eeec ,_geag ,nil ;};switch components {case ComponentConn :_eeec =&Bitmaps {};if _geag ,_adfa =_acfd .ConnComponents (_eeec ,8);_adfa !=nil {return nil ,nil ,_e .Wrap (_adfa ,_efac ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_ebea ,_efefa :=MorphSequence (_acfd ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _efefa !=nil {return nil ,nil ,_e .Wrap (_efefa ,_efac ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _da .Log .IsLogLevel (_da .LogLevelTrace ){_da .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_ebea .String ());
};_fecfd :=&Bitmaps {};_geag ,_efefa =_ebea .ConnComponents (_fecfd ,8);if _efefa !=nil {return nil ,nil ,_e .Wrap (_efefa ,_efac ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _da .Log .IsLogLevel (_da .LogLevelTrace ){_da .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_fecfd .String ());
};if _eeec ,_efefa =_fecfd .ClipToBitmap (_acfd );_efefa !=nil {return nil ,nil ,_e .Wrap (_efefa ,_efac ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_efaf :=1;
var _aadd *Bitmap ;switch {case _acfd .XResolution <=200:_aadd =_acfd ;case _acfd .XResolution <=400:_efaf =2;_aadd ,_adfa =_gdf (_acfd ,1,0,0,0);if _adfa !=nil {return nil ,nil ,_e .Wrap (_adfa ,_efac ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_efaf =4;_aadd ,_adfa =_gdf (_acfd ,1,1,0,0);if _adfa !=nil {return nil ,nil ,_e .Wrap (_adfa ,_efac ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_eabc ,_ ,_bbgda :=_cgg (_aadd );if _bbgda !=nil {return nil ,nil ,_e .Wrap (_bbgda ,_efac ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_debf ,_bbgda :=_decbga (_eabc ,_efaf );if _bbgda !=nil {return nil ,nil ,_e .Wrap (_bbgda ,_efac ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_fbbee :=&Bitmaps {};if _geag ,_bbgda =_debf .ConnComponents (_fbbee ,4);_bbgda !=nil {return nil ,nil ,_e .Wrap (_bbgda ,_efac ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _eeec ,_bbgda =_fbbee .ClipToBitmap (_acfd );_bbgda !=nil {return nil ,nil ,_e .Wrap (_bbgda ,_efac ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_eeec ,_adfa =_eeec .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _adfa !=nil {return nil ,nil ,_e .Wrap (_adfa ,_efac ,"");};_geag ,_adfa =_geag .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _adfa !=nil {return nil ,nil ,_e .Wrap (_adfa ,_efac ,"");};return _eeec ,_geag ,nil ;};func _gdf (_fbg *Bitmap ,_bca ...int )(_dde *Bitmap ,_ccd error ){const _eg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _fbg ==nil {return nil ,_e .Error (_eg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_bca )==0||len (_bca )> 4{return nil ,_e .Error (_eg ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _bca [0]<=0{_da .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_dde ,_ccd =_dfcf (nil ,_fbg );if _ccd !=nil {return nil ,_e .Wrap (_ccd ,_eg ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _dde ,nil ;};_dgc :=_dga ();_dde =_fbg ;for _ada ,_bba :=range _bca {if _bba <=0{break ;};_dde ,_ccd =_aba (_dde ,_bba ,_dgc );if _ccd !=nil {return nil ,_e .Wrapf (_ccd ,_eg ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_ada );
};};return _dde ,nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_be .Rectangle ;};func (_beaa *BitmapsArray )AddBitmaps (bm *Bitmaps ){_beaa .Values =append (_beaa .Values ,bm )};func _eadb (_cebd *Bitmap ,_aaac *Bitmap ,_ggf *Selection )(*Bitmap ,error ){var (_fdbe *Bitmap ;
_baed error ;);_cebd ,_baed =_adba (_cebd ,_aaac ,_ggf ,&_fdbe );if _baed !=nil {return nil ,_baed ;};if _baed =_cebd .clearAll ();_baed !=nil {return nil ,_baed ;};var _gggcc SelectionValue ;for _dggg :=0;_dggg < _ggf .Height ;_dggg ++{for _bccd :=0;_bccd < _ggf .Width ;
_bccd ++{_gggcc =_ggf .Data [_dggg ][_bccd ];if _gggcc ==SelHit {if _baed =_cebd .RasterOperation (_bccd -_ggf .Cx ,_dggg -_ggf .Cy ,_aaac .Width ,_aaac .Height ,PixSrcOrDst ,_fdbe ,0,0);_baed !=nil {return nil ,_baed ;};};};};return _cebd ,nil ;};func TstCSymbol (t *_f .T )*Bitmap {t .Helper ();
_bceeg :=New (6,6);_ee .NoError (t ,_bceeg .SetPixel (1,0,1));_ee .NoError (t ,_bceeg .SetPixel (2,0,1));_ee .NoError (t ,_bceeg .SetPixel (3,0,1));_ee .NoError (t ,_bceeg .SetPixel (4,0,1));_ee .NoError (t ,_bceeg .SetPixel (0,1,1));_ee .NoError (t ,_bceeg .SetPixel (5,1,1));
_ee .NoError (t ,_bceeg .SetPixel (0,2,1));_ee .NoError (t ,_bceeg .SetPixel (0,3,1));_ee .NoError (t ,_bceeg .SetPixel (0,4,1));_ee .NoError (t ,_bceeg .SetPixel (5,4,1));_ee .NoError (t ,_bceeg .SetPixel (1,5,1));_ee .NoError (t ,_bceeg .SetPixel (2,5,1));
_ee .NoError (t ,_bceeg .SetPixel (3,5,1));_ee .NoError (t ,_bceeg .SetPixel (4,5,1));return _bceeg ;};func (_bdfde *Bitmaps )GetBox (i int )(*_be .Rectangle ,error ){const _acgg ="\u0047\u0065\u0074\u0042\u006f\u0078";if _bdfde ==nil {return nil ,_e .Error (_acgg ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_bdfde .Boxes )-1{return nil ,_e .Errorf (_acgg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bdfde .Boxes [i ],nil ;};func (_efad *Bitmap )setEightPartlyBytes (_gab ,_acba int ,_cagd uint64 )(_decc error ){var (_dbd byte ;
_faeg int ;);const _cfde ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _gce :=1;_gce <=_acba ;_gce ++{_faeg =64-_gce *8;_dbd =byte (_cagd >>uint (_faeg )&0xff);_da .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_dbd ,_gab ,_gab +_gce -1,_acba ,_faeg );
if _decc =_efad .SetByte (_gab +_gce -1,_dbd );_decc !=nil {return _e .Wrap (_decc ,_cfde ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_bffd :=_efad .RowStride *8-_efad .Width ;if _bffd ==0{return nil ;};_faeg -=8;_dbd =byte (_cagd >>uint (_faeg )&0xff)<<uint (_bffd );
if _decc =_efad .SetByte (_gab +_acba ,_dbd );_decc !=nil {return _e .Wrap (_decc ,_cfde ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_dfcb *ClassedPoints )YAtIndex (i int )float32 {return (*_dfcb .Points )[_dfcb .IntSlice [i ]].Y };
func _ebde (_cegc *Bitmap ,_cgag *Bitmap ,_gbggb int )(_eabfg error ){const _fad ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_ddcg :=_aggg (_cegc .Height ,_cgag .Height );_ddcd :=_aggg (_cegc .RowStride ,_cgag .RowStride );
switch _gbggb {case 4:_eabfg =_ecfd (_cegc ,_cgag ,_ddcg ,_ddcd );case 8:_eabfg =_gdfg (_cegc ,_cgag ,_ddcg ,_ddcd );default:return _e .Errorf (_fad ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_gbggb );
};if _eabfg !=nil {return _e .Wrap (_eabfg ,_fad ,"");};return nil ;};func _ed (_bf ,_bb *Bitmap )(_ea error ){const _fc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_fa :=_bb .RowStride ;_adb :=_bf .RowStride ;
var (_edc byte ;_bfc uint16 ;_bfg ,_fb ,_bc ,_dd ,_fbe int ;);for _bc =0;_bc < _bb .Height ;_bc ++{_bfg =_bc *_fa ;_fb =2*_bc *_adb ;for _dd =0;_dd < _fa ;_dd ++{_edc =_bb .Data [_bfg +_dd ];_bfc =_adaf [_edc ];_fbe =_fb +_dd *2;if _bf .RowStride !=_bb .RowStride *2&&(_dd +1)*2> _bf .RowStride {_ea =_bf .SetByte (_fbe ,byte (_bfc >>8));
}else {_ea =_bf .setTwoBytes (_fbe ,_bfc );};if _ea !=nil {return _e .Wrap (_ea ,_fc ,"");};};for _dd =0;_dd < _adb ;_dd ++{_fbe =_fb +_adb +_dd ;_edc =_bf .Data [_fb +_dd ];if _ea =_bf .SetByte (_fbe ,_edc );_ea !=nil {return _e .Wrapf (_ea ,_fc ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_fb +_dd ,_fb +_adb +_dd );
};};};return nil ;};func _ebgg (_ggadf *Bitmap ,_acgc ,_fedga ,_bdff ,_aaaag int ,_cedd RasterOperator ,_acga *Bitmap ,_fdaaa ,_dab int )error {var (_cceg byte ;_dfbf int ;_bdgc int ;_faed ,_ebffb int ;_cegd ,_aabd int ;);_aagde :=_bdff >>3;_ddfae :=_bdff &7;
if _ddfae > 0{_cceg =_fgcb [_ddfae ];};_dfbf =_acga .RowStride *_dab +(_fdaaa >>3);_bdgc =_ggadf .RowStride *_fedga +(_acgc >>3);switch _cedd {case PixSrc :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;
for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]=_acga .Data [_faed ];_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],_acga .Data [_faed ],_cceg );};};case PixNotSrc :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;
_ebffb =_bdgc +_cegd *_ggadf .RowStride ;for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]=^(_acga .Data [_faed ]);_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],^_acga .Data [_faed ],_cceg );};};case PixSrcOrDst :for _cegd =0;
_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]|=_acga .Data [_faed ];_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],_acga .Data [_faed ]|_ggadf .Data [_ebffb ],_cceg );
};};case PixSrcAndDst :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]&=_acga .Data [_faed ];_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],_acga .Data [_faed ]&_ggadf .Data [_ebffb ],_cceg );
};};case PixSrcXorDst :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]^=_acga .Data [_faed ];_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],_acga .Data [_faed ]^_ggadf .Data [_ebffb ],_cceg );
};};case PixNotSrcOrDst :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]|=^(_acga .Data [_faed ]);_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],^(_acga .Data [_faed ])|_ggadf .Data [_ebffb ],_cceg );
};};case PixNotSrcAndDst :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]&=^(_acga .Data [_faed ]);_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],^(_acga .Data [_faed ])&_ggadf .Data [_ebffb ],_cceg );
};};case PixSrcOrNotDst :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]=_acga .Data [_faed ]|^(_ggadf .Data [_ebffb ]);_ebffb ++;
_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],_acga .Data [_faed ]|^(_ggadf .Data [_ebffb ]),_cceg );};};case PixSrcAndNotDst :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;
for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]=_acga .Data [_faed ]&^(_ggadf .Data [_ebffb ]);_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],_acga .Data [_faed ]&^(_ggadf .Data [_ebffb ]),_cceg );};
};case PixNotPixSrcOrDst :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]=^(_acga .Data [_faed ]|_ggadf .Data [_ebffb ]);
_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],^(_acga .Data [_faed ]|_ggadf .Data [_ebffb ]),_cceg );};};case PixNotPixSrcAndDst :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;
for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]=^(_acga .Data [_faed ]&_ggadf .Data [_ebffb ]);_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],^(_acga .Data [_faed ]&_ggadf .Data [_ebffb ]),_cceg );};
};case PixNotPixSrcXorDst :for _cegd =0;_cegd < _aaaag ;_cegd ++{_faed =_dfbf +_cegd *_acga .RowStride ;_ebffb =_bdgc +_cegd *_ggadf .RowStride ;for _aabd =0;_aabd < _aagde ;_aabd ++{_ggadf .Data [_ebffb ]=^(_acga .Data [_faed ]^_ggadf .Data [_ebffb ]);
_ebffb ++;_faed ++;};if _ddfae > 0{_ggadf .Data [_ebffb ]=_baae (_ggadf .Data [_ebffb ],^(_acga .Data [_faed ]^_ggadf .Data [_ebffb ]),_cceg );};};default:_da .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_cedd );
return _e .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _bcc (_ec *Bitmap ,_abd int )(*Bitmap ,error ){const _ddf ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _ec ==nil {return nil ,_e .Error (_ddf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _abd ==1{return _dfcf (nil ,_ec );};if _abd !=2&&_abd !=4&&_abd !=8{return nil ,_e .Error (_ddf ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_bdb :=_abd *_ec .Width ;_ba :=_abd *_ec .Height ;_ac :=New (_bdb ,_ba );var _bg error ;switch _abd {case 2:_bg =_ed (_ac ,_ec );case 4:_bg =_ag (_ac ,_ec );case 8:_bg =_feb (_ac ,_ec );};if _bg !=nil {return nil ,_e .Wrap (_bg ,_ddf ,"");};return _ac ,nil ;
};func TstISymbol (t *_f .T ,scale ...int )*Bitmap {_bffag ,_bdbdf :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_ee .NoError (t ,_bdbdf );return TstGetScaledSymbol (t ,_bffag ,scale ...);};func (_cbdc *Bitmaps )AddBitmap (bm *Bitmap ){_cbdc .Values =append (_cbdc .Values ,bm )};
func (_gaca *Bitmap )thresholdPixelSum (_gccc int )bool {var (_deee int ;_acaf uint8 ;_abeg byte ;_bfd int ;);_edbf :=_gaca .RowStride ;_gbcg :=uint (_gaca .Width &0x07);if _gbcg !=0{_acaf =uint8 ((0xff<<(8-_gbcg ))&0xff);_edbf --;};for _fcac :=0;_fcac < _gaca .Height ;
_fcac ++{for _bfd =0;_bfd < _edbf ;_bfd ++{_abeg =_gaca .Data [_fcac *_gaca .RowStride +_bfd ];_deee +=int (_eecd [_abeg ]);};if _gbcg !=0{_abeg =_gaca .Data [_fcac *_gaca .RowStride +_bfd ]&_acaf ;_deee +=int (_eecd [_abeg ]);};if _deee > _gccc {return true ;
};};return false ;};func (_cfa *Bitmap )ClipRectangle (box *_be .Rectangle )(_gee *Bitmap ,_dfed *_be .Rectangle ,_gbf error ){const _bbad ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_e .Error (_bbad ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};_bdgf ,_efb :=_cfa .Width ,_cfa .Height ;_adfb :=_be .Rect (0,0,_bdgf ,_efb );if !box .Overlaps (_adfb ){return nil ,nil ,_e .Error (_bbad ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_feba :=box .Intersect (_adfb );
_bbbg ,_gfba :=_feba .Min .X ,_feba .Min .Y ;_afg ,_gaeb :=_feba .Dx (),_feba .Dy ();_gee =New (_afg ,_gaeb );_gee .Text =_cfa .Text ;if _gbf =_gee .RasterOperation (0,0,_afg ,_gaeb ,PixSrc ,_cfa ,_bbbg ,_gfba );_gbf !=nil {return nil ,nil ,_e .Wrap (_gbf ,_bbad ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_dfed =&_feba ;return _gee ,_dfed ,nil ;};func init (){const _edfa ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_cefed =New (50,40);var _cddb error ;_cefed ,_cddb =_cefed .AddBorder (2,1);
if _cddb !=nil {panic (_e .Wrap (_cddb ,_edfa ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_ffad ,_cddb =NewWithData (50,22,_fccge );if _cddb !=nil {panic (_e .Wrap (_cddb ,_edfa ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func (_egcb *Bitmap )SetByte (index int ,v byte )error {if index > len (_egcb .Data )-1||index < 0{return _e .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_egcb .Data [index ]=v ;return nil ;};func _egcc (_cgaf *Bitmap ,_afcc *_ad .Stack ,_cgfe ,_eddcd int )(_ebedcb *_be .Rectangle ,_cbea error ){const _ddcf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _cgaf ==nil {return nil ,_e .Error (_ddcf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _afcc ==nil {return nil ,_e .Error (_ddcf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_ccded ,_faacb :=_cgaf .Width ,_cgaf .Height ;_cfgbg :=_ccded -1;_dacff :=_faacb -1;if _cgfe < 0||_cgfe > _cfgbg ||_eddcd < 0||_eddcd > _dacff ||!_cgaf .GetPixel (_cgfe ,_eddcd ){return nil ,nil ;
};_dcaa :=_be .Rect (100000,100000,0,0);if _cbea =_bacef (_afcc ,_cgfe ,_cgfe ,_eddcd ,1,_dacff ,&_dcaa );_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cbea =_bacef (_afcc ,_cgfe ,_cgfe ,_eddcd +1,-1,_dacff ,&_dcaa );
_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_dcaa .Min .X ,_dcaa .Max .X =_cgfe ,_cgfe ;_dcaa .Min .Y ,_dcaa .Max .Y =_eddcd ,_eddcd ;var (_cefdb *fillSegment ;
_baedb int ;);for _afcc .Len ()> 0{if _cefdb ,_cbea =_dffae (_afcc );_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"");};_eddcd =_cefdb ._bcbf ;for _cgfe =_cefdb ._cadf -1;_cgfe >=0&&_cgaf .GetPixel (_cgfe ,_eddcd );_cgfe --{if _cbea =_cgaf .SetPixel (_cgfe ,_eddcd ,0);
_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _cgfe >=_cefdb ._cadf -1{for {for _cgfe ++;_cgfe <=_cefdb ._abffe +1&&_cgfe <=_cfgbg &&!_cgaf .GetPixel (_cgfe ,_eddcd );_cgfe ++{};_baedb =_cgfe ;if !(_cgfe <=_cefdb ._abffe +1&&_cgfe <=_cfgbg ){break ;
};for ;_cgfe <=_cfgbg &&_cgaf .GetPixel (_cgfe ,_eddcd );_cgfe ++{if _cbea =_cgaf .SetPixel (_cgfe ,_eddcd ,0);_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cbea =_bacef (_afcc ,_baedb ,_cgfe -1,_cefdb ._bcbf ,_cefdb ._dbfc ,_dacff ,&_dcaa );
_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cgfe > _cefdb ._abffe {if _cbea =_bacef (_afcc ,_cefdb ._abffe +1,_cgfe -1,_cefdb ._bcbf ,-_cefdb ._dbfc ,_dacff ,&_dcaa );_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_baedb =_cgfe +1;if _baedb < _cefdb ._cadf {if _cbea =_bacef (_afcc ,_baedb ,_cefdb ._cadf -1,_cefdb ._bcbf ,-_cefdb ._dbfc ,_dacff ,&_dcaa );_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_cgfe =_cefdb ._cadf ;for {for ;_cgfe <=_cfgbg &&_cgaf .GetPixel (_cgfe ,_eddcd );_cgfe ++{if _cbea =_cgaf .SetPixel (_cgfe ,_eddcd ,0);_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cbea =_bacef (_afcc ,_baedb ,_cgfe -1,_cefdb ._bcbf ,_cefdb ._dbfc ,_dacff ,&_dcaa );
_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cgfe > _cefdb ._abffe {if _cbea =_bacef (_afcc ,_cefdb ._abffe +1,_cgfe -1,_cefdb ._bcbf ,-_cefdb ._dbfc ,_dacff ,&_dcaa );_cbea !=nil {return nil ,_e .Wrap (_cbea ,_ddcf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _cgfe ++;_cgfe <=_cefdb ._abffe +1&&_cgfe <=_cfgbg &&!_cgaf .GetPixel (_cgfe ,_eddcd );_cgfe ++{};_baedb =_cgfe ;if !(_cgfe <=_cefdb ._abffe +1&&_cgfe <=_cfgbg ){break ;};};};_dcaa .Max .X ++;_dcaa .Max .Y ++;return &_dcaa ,nil ;};func (_dggc *BitmapsArray )AddBox (box *_be .Rectangle ){_dggc .Boxes =append (_dggc .Boxes ,box )};
func _deg (_dac ,_egg *Bitmap ,_abce int ,_dba []byte ,_fed int )(_bgg error ){const _fcd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_egf ,_ffc ,_fccg ,_dfc ,_egc ,_gcb ,_fdab ,_gga int ;
_bdba ,_gfb uint32 ;_dff ,_faf byte ;_bccf uint16 ;);_bggf :=make ([]byte ,4);_dbee :=make ([]byte ,4);for _fccg =0;_fccg < _dac .Height -1;_fccg ,_dfc =_fccg +2,_dfc +1{_egf =_fccg *_dac .RowStride ;_ffc =_dfc *_egg .RowStride ;for _egc ,_gcb =0,0;_egc < _fed ;
_egc ,_gcb =_egc +4,_gcb +1{for _fdab =0;_fdab < 4;_fdab ++{_gga =_egf +_egc +_fdab ;if _gga <=len (_dac .Data )-1&&_gga < _egf +_dac .RowStride {_bggf [_fdab ]=_dac .Data [_gga ];}else {_bggf [_fdab ]=0x00;};_gga =_egf +_dac .RowStride +_egc +_fdab ;if _gga <=len (_dac .Data )-1&&_gga < _egf +(2*_dac .RowStride ){_dbee [_fdab ]=_dac .Data [_gga ];
}else {_dbee [_fdab ]=0x00;};};_bdba =_gd .BigEndian .Uint32 (_bggf );_gfb =_gd .BigEndian .Uint32 (_dbee );_gfb |=_bdba ;_gfb |=_gfb <<1;_gfb &=0xaaaaaaaa;_bdba =_gfb |(_gfb <<7);_dff =byte (_bdba >>24);_faf =byte ((_bdba >>8)&0xff);_gga =_ffc +_gcb ;
if _gga +1==len (_egg .Data )-1||_gga +1>=_ffc +_egg .RowStride {_egg .Data [_gga ]=_dba [_dff ];}else {_bccf =(uint16 (_dba [_dff ])<<8)|uint16 (_dba [_faf ]);if _bgg =_egg .setTwoBytes (_gga ,_bccf );_bgg !=nil {return _e .Wrapf (_bgg ,_fcd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gga );
};_gcb ++;};};};return nil ;};func _efgg (_ffgb ,_badf *Bitmap ,_bcgee ,_fcggb int )(*Bitmap ,error ){const _dfcd ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _badf ==nil {return nil ,_e .Error (_dfcd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bcgee < 1||_fcggb < 1{return nil ,_e .Error (_dfcd ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _bcgee ==1&&_fcggb ==1{_cgeb ,_fff :=_dfcf (_ffgb ,_badf );if _fff !=nil {return nil ,_e .Wrap (_fff ,_dfcd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cgeb ,nil ;};if _bcgee ==1||_fcggb ==1{_ggcbg :=SelCreateBrick (_fcggb ,_bcgee ,_fcggb /2,_bcgee /2,SelHit );_aede ,_ccfg :=_cafc (_ffgb ,_badf ,_ggcbg );if _ccfg !=nil {return nil ,_e .Wrap (_ccfg ,_dfcd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _aede ,nil ;};_eeecg :=SelCreateBrick (1,_bcgee ,0,_bcgee /2,SelHit );_ebbd :=SelCreateBrick (_fcggb ,1,_fcggb /2,0,SelHit );_abag ,_aaae :=_cafc (nil ,_badf ,_eeecg );if _aaae !=nil {return nil ,_e .Wrap (_aaae ,_dfcd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_ffgb ,_aaae =_cafc (_ffgb ,_abag ,_ebbd );if _aaae !=nil {return nil ,_e .Wrap (_aaae ,_dfcd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ffgb ,nil ;};func (_ccdb *Bitmaps )makeSizeIndicator (_geggg ,_fceg int ,_bdfeb LocationFilter ,_fgca SizeComparison )(_fdagb *_ad .NumSlice ,_adce error ){const _ccdbe ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ccdb ==nil {return nil ,_e .Error (_ccdbe ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _bdfeb {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_e .Errorf (_ccdbe ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_bdfeb );
};switch _fgca {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_e .Errorf (_ccdbe ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_fgca );
};_fdagb =&_ad .NumSlice {};var (_abab ,_dabf ,_fcga int ;_ecdc *Bitmap ;);for _ ,_ecdc =range _ccdb .Values {_abab =0;_dabf ,_fcga =_ecdc .Width ,_ecdc .Height ;switch _bdfeb {case LocSelectWidth :if (_fgca ==SizeSelectIfLT &&_dabf < _geggg )||(_fgca ==SizeSelectIfGT &&_dabf > _geggg )||(_fgca ==SizeSelectIfLTE &&_dabf <=_geggg )||(_fgca ==SizeSelectIfGTE &&_dabf >=_geggg )||(_fgca ==SizeSelectIfEQ &&_dabf ==_geggg ){_abab =1;
};case LocSelectHeight :if (_fgca ==SizeSelectIfLT &&_fcga < _fceg )||(_fgca ==SizeSelectIfGT &&_fcga > _fceg )||(_fgca ==SizeSelectIfLTE &&_fcga <=_fceg )||(_fgca ==SizeSelectIfGTE &&_fcga >=_fceg )||(_fgca ==SizeSelectIfEQ &&_fcga ==_fceg ){_abab =1;
};case LocSelectIfEither :if (_fgca ==SizeSelectIfLT &&(_dabf < _geggg ||_fcga < _fceg ))||(_fgca ==SizeSelectIfGT &&(_dabf > _geggg ||_fcga > _fceg ))||(_fgca ==SizeSelectIfLTE &&(_dabf <=_geggg ||_fcga <=_fceg ))||(_fgca ==SizeSelectIfGTE &&(_dabf >=_geggg ||_fcga >=_fceg ))||(_fgca ==SizeSelectIfEQ &&(_dabf ==_geggg ||_fcga ==_fceg )){_abab =1;
};case LocSelectIfBoth :if (_fgca ==SizeSelectIfLT &&(_dabf < _geggg &&_fcga < _fceg ))||(_fgca ==SizeSelectIfGT &&(_dabf > _geggg &&_fcga > _fceg ))||(_fgca ==SizeSelectIfLTE &&(_dabf <=_geggg &&_fcga <=_fceg ))||(_fgca ==SizeSelectIfGTE &&(_dabf >=_geggg &&_fcga >=_fceg ))||(_fgca ==SizeSelectIfEQ &&(_dabf ==_geggg &&_fcga ==_fceg )){_abab =1;
};};_fdagb .AddInt (_abab );};return _fdagb ,nil ;};var (_cefed *Bitmap ;_ffad *Bitmap ;);func (_ebg *Bitmap )setTwoBytes (_dfea int ,_bcee uint16 )error {if _dfea +1> len (_ebg .Data )-1{return _e .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_dfea );
};_ebg .Data [_dfea ]=byte ((_bcee &0xff00)>>8);_ebg .Data [_dfea +1]=byte (_bcee &0xff);return nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_faaa float64 ,_abf error ){const _dgff ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_e .Error (_dgff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_e .Error (_dgff ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_e .Error (_dgff ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_bbfb ,_bcec :=bm1 .Width ,bm1 .Height ;_gfae ,_decbg :=bm2 .Width ,bm2 .Height ;
_geeff :=_affd (_bbfb -_gfae );if _geeff > maxDiffW {return 0,nil ;};_gbbe :=_affd (_bcec -_decbg );if _gbbe > maxDiffH {return 0,nil ;};var _gfcf ,_fdd int ;if delX >=0{_gfcf =int (delX +0.5);}else {_gfcf =int (delX -0.5);};if delY >=0{_fdd =int (delY +0.5);
}else {_fdd =int (delY -0.5);};_eade :=_ebfd (_fdd ,0);_gfd :=_aggg (_decbg +_fdd ,_bcec );_debfd :=bm1 .RowStride *_eade ;_gebd :=bm2 .RowStride *(_eade -_fdd );_dcdc :=_ebfd (_gfcf ,0);_feaf :=_aggg (_gfae +_gfcf ,_bbfb );_dgfg :=bm2 .RowStride ;var _bcggf ,_aegf int ;
if _gfcf >=8{_bcggf =_gfcf >>3;_debfd +=_bcggf ;_dcdc -=_bcggf <<3;_feaf -=_bcggf <<3;_gfcf &=7;}else if _gfcf <=-8{_aegf =-((_gfcf +7)>>3);_gebd +=_aegf ;_dgfg -=_aegf ;_gfcf +=_aegf <<3;};if _dcdc >=_feaf ||_eade >=_gfd {return 0,nil ;};_gafe :=(_feaf +7)>>3;
var (_ecgcc ,_bfee ,_bfca byte ;_cfbf ,_dcda ,_dbcc int ;);switch {case _gfcf ==0:for _dbcc =_eade ;_dbcc < _gfd ;_dbcc ,_debfd ,_gebd =_dbcc +1,_debfd +bm1 .RowStride ,_gebd +bm2 .RowStride {for _dcda =0;_dcda < _gafe ;_dcda ++{_bfca =bm1 .Data [_debfd +_dcda ]&bm2 .Data [_gebd +_dcda ];
_cfbf +=tab [_bfca ];};};case _gfcf > 0:if _dgfg < _gafe {for _dbcc =_eade ;_dbcc < _gfd ;_dbcc ,_debfd ,_gebd =_dbcc +1,_debfd +bm1 .RowStride ,_gebd +bm2 .RowStride {_ecgcc ,_bfee =bm1 .Data [_debfd ],bm2 .Data [_gebd ]>>uint (_gfcf );_bfca =_ecgcc &_bfee ;
_cfbf +=tab [_bfca ];for _dcda =1;_dcda < _dgfg ;_dcda ++{_ecgcc ,_bfee =bm1 .Data [_debfd +_dcda ],(bm2 .Data [_gebd +_dcda ]>>uint (_gfcf ))|(bm2 .Data [_gebd +_dcda -1]<<uint (8-_gfcf ));_bfca =_ecgcc &_bfee ;_cfbf +=tab [_bfca ];};_ecgcc =bm1 .Data [_debfd +_dcda ];
_bfee =bm2 .Data [_gebd +_dcda -1]<<uint (8-_gfcf );_bfca =_ecgcc &_bfee ;_cfbf +=tab [_bfca ];};}else {for _dbcc =_eade ;_dbcc < _gfd ;_dbcc ,_debfd ,_gebd =_dbcc +1,_debfd +bm1 .RowStride ,_gebd +bm2 .RowStride {_ecgcc ,_bfee =bm1 .Data [_debfd ],bm2 .Data [_gebd ]>>uint (_gfcf );
_bfca =_ecgcc &_bfee ;_cfbf +=tab [_bfca ];for _dcda =1;_dcda < _gafe ;_dcda ++{_ecgcc =bm1 .Data [_debfd +_dcda ];_bfee =(bm2 .Data [_gebd +_dcda ]>>uint (_gfcf ))|(bm2 .Data [_gebd +_dcda -1]<<uint (8-_gfcf ));_bfca =_ecgcc &_bfee ;_cfbf +=tab [_bfca ];
};};};default:if _gafe < _dgfg {for _dbcc =_eade ;_dbcc < _gfd ;_dbcc ,_debfd ,_gebd =_dbcc +1,_debfd +bm1 .RowStride ,_gebd +bm2 .RowStride {for _dcda =0;_dcda < _gafe ;_dcda ++{_ecgcc =bm1 .Data [_debfd +_dcda ];_bfee =bm2 .Data [_gebd +_dcda ]<<uint (-_gfcf );
_bfee |=bm2 .Data [_gebd +_dcda +1]>>uint (8+_gfcf );_bfca =_ecgcc &_bfee ;_cfbf +=tab [_bfca ];};};}else {for _dbcc =_eade ;_dbcc < _gfd ;_dbcc ,_debfd ,_gebd =_dbcc +1,_debfd +bm1 .RowStride ,_gebd +bm2 .RowStride {for _dcda =0;_dcda < _gafe -1;_dcda ++{_ecgcc =bm1 .Data [_debfd +_dcda ];
_bfee =bm2 .Data [_gebd +_dcda ]<<uint (-_gfcf );_bfee |=bm2 .Data [_gebd +_dcda +1]>>uint (8+_gfcf );_bfca =_ecgcc &_bfee ;_cfbf +=tab [_bfca ];};_ecgcc =bm1 .Data [_debfd +_dcda ];_bfee =bm2 .Data [_gebd +_dcda ]<<uint (-_gfcf );_bfca =_ecgcc &_bfee ;
_cfbf +=tab [_bfca ];};};};_faaa =float64 (_cfbf )*float64 (_cfbf )/(float64 (area1 )*float64 (area2 ));return _faaa ,nil ;};func _feb (_gf ,_gc *Bitmap )(_ab error ){const _dddd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_cg :=_gc .RowStride ;_bfa :=_gf .RowStride ;var _af ,_dbc ,_bfab ,_aga ,_gcc int ;for _bfab =0;_bfab < _gc .Height ;_bfab ++{_af =_bfab *_cg ;_dbc =8*_bfab *_bfa ;for _aga =0;_aga < _cg ;_aga ++{if _ab =_gf .setEightBytes (_dbc +_aga *8,_ffdc [_gc .Data [_af +_aga ]]);
_ab !=nil {return _e .Wrap (_ab ,_dddd ,"");};};for _gcc =1;_gcc < 8;_gcc ++{for _aga =0;_aga < _bfa ;_aga ++{if _ab =_gf .SetByte (_dbc +_gcc *_bfa +_aga ,_gf .Data [_dbc +_aga ]);_ab !=nil {return _e .Wrap (_ab ,_dddd ,"");};};};};return nil ;};func Rect (x ,y ,w ,h int )(*_be .Rectangle ,error ){const _fgf ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_e .Errorf (_fgf ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_e .Error (_fgf ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_daef :=_be .Rect (x ,y ,x +w ,y +h );return &_daef ,nil ;};func _aedd (_aaga ,_gfbb *Bitmap ,_fbdc CombinationOperator )*Bitmap {_fce :=New (_aaga .Width ,_aaga .Height );for _bgbf :=0;_bgbf < len (_fce .Data );_bgbf ++{_fce .Data [_bgbf ]=_fgdde (_aaga .Data [_bgbf ],_gfbb .Data [_bgbf ],_fbdc );
};return _fce ;};func MakePixelSumTab8 ()[]int {return _acdc ()};func (_gbee Points )GetIntY (i int )(int ,error ){if i >=len (_gbee ){return 0,_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_gbee [i ].Y ),nil ;};func _baae (_cfee ,_adfbd ,_aefdd byte )byte {return (_cfee &^(_aefdd ))|(_adfbd &_aefdd )};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _dfcf (d ,s )};func (_gcfc *Bitmap )setEightBytes (_cfgf int ,_fcf uint64 )error {_fbec :=_gcfc .RowStride -(_cfgf %_gcfc .RowStride );
if _gcfc .RowStride !=_gcfc .Width >>3{_fbec --;};if _fbec >=8{return _gcfc .setEightFullBytes (_cfgf ,_fcf );};return _gcfc .setEightPartlyBytes (_cfgf ,_fbec ,_fcf );};func _abgf (_fdebg ...MorphProcess )(_bcbd error ){const _decf ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _begg ,_ddbb int ;for _dacaa ,_bbfd :=range _fdebg {if _bcbd =_bbfd .verify (_dacaa ,&_begg ,&_ddbb );_bcbd !=nil {return _e .Wrap (_bcbd ,_decf ,"");};};if _ddbb !=0&&_begg !=0{return _e .Error (_decf ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func _dga ()(_bdgg []byte ){_bdgg =make ([]byte ,256);for _gba :=0;_gba < 256;_gba ++{_dfbg :=byte (_gba );_bdgg [_dfbg ]=(_dfbg &0x01)|((_dfbg &0x04)>>1)|((_dfbg &0x10)>>2)|((_dfbg &0x40)>>3)|((_dfbg &0x02)<<3)|((_dfbg &0x08)<<2)|((_dfbg &0x20)<<1)|(_dfbg &0x80);
};return _bdgg ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _acf (_egd ,_bdd int )*Bitmap {return &Bitmap {Width :_egd ,Height :_bdd ,RowStride :(_egd +7)>>3};};