//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_bb "encoding/binary";_f "github.com/stretchr/testify/require";_dc "github.com/unidoc/unipdf/v3/common";_ec "github.com/unidoc/unipdf/v3/internal/bitwise";_fc "github.com/unidoc/unipdf/v3/internal/imageutil";_b "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_a "image";_d "math";_fg "sort";_g "strings";_ed "testing";);func (_cfccc *ClassedPoints )SortByY (){_cfccc ._gdcd =_cfccc .ySortFunction ();_fg .Sort (_cfccc )};var (_bceba =_gcf ();_gafg =_fcg ();
_cbdd =_ffb (););func _adf (_cea ,_dff *Bitmap ,_faab int ,_aae []byte ,_gee int )(_ddc error ){const _edf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_de ,_dfg ,_eca ,_feb ,_ece ,_bba ,_efa ,_gdg int ;
_fcb ,_bce uint32 ;_dgc ,_fbaaf byte ;_gea uint16 ;);_fgc :=make ([]byte ,4);_agb :=make ([]byte ,4);for _eca =0;_eca < _cea .Height -1;_eca ,_feb =_eca +2,_feb +1{_de =_eca *_cea .RowStride ;_dfg =_feb *_dff .RowStride ;for _ece ,_bba =0,0;_ece < _gee ;
_ece ,_bba =_ece +4,_bba +1{for _efa =0;_efa < 4;_efa ++{_gdg =_de +_ece +_efa ;if _gdg <=len (_cea .Data )-1&&_gdg < _de +_cea .RowStride {_fgc [_efa ]=_cea .Data [_gdg ];}else {_fgc [_efa ]=0x00;};_gdg =_de +_cea .RowStride +_ece +_efa ;if _gdg <=len (_cea .Data )-1&&_gdg < _de +(2*_cea .RowStride ){_agb [_efa ]=_cea .Data [_gdg ];
}else {_agb [_efa ]=0x00;};};_fcb =_bb .BigEndian .Uint32 (_fgc );_bce =_bb .BigEndian .Uint32 (_agb );_bce |=_fcb ;_bce |=_bce <<1;_bce &=0xaaaaaaaa;_fcb =_bce |(_bce <<7);_dgc =byte (_fcb >>24);_fbaaf =byte ((_fcb >>8)&0xff);_gdg =_dfg +_bba ;if _gdg +1==len (_dff .Data )-1||_gdg +1>=_dfg +_dff .RowStride {_dff .Data [_gdg ]=_aae [_dgc ];
}else {_gea =(uint16 (_aae [_dgc ])<<8)|uint16 (_aae [_fbaaf ]);if _ddc =_dff .setTwoBytes (_gdg ,_gea );_ddc !=nil {return _c .Wrapf (_ddc ,_edf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gdg );
};_bba ++;};};};return nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _adebf ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_c .Error (_adebf ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_c .Error (_adebf ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_c .Error (_adebf ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_c .Error (_adebf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_c .Error (_adebf ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_ggdba ,_dafc :=bm1 .Width ,bm1 .Height ;_deeg ,_gced :=bm2 .Width ,bm2 .Height ;if _b .Abs (_ggdba -_deeg )> maxDiffW {return false ,nil ;};if _b .Abs (_dafc -_gced )> maxDiffH {return false ,nil ;};_bege :=int (delX +_b .Sign (delX )*0.5);_ecea :=int (delY +_b .Sign (delY )*0.5);
_dea :=int (_d .Ceil (_d .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_fdea :=bm2 .RowStride ;_dddc :=_fggg (_ecea ,0);_edfe :=_aagb (_gced +_ecea ,_dafc );_cgcc :=bm1 .RowStride *_dddc ;_agcb :=bm2 .RowStride *(_dddc -_ecea );
var _aada int ;if _edfe <=_dafc {_aada =downcount [_edfe -1];};_daaf :=_fggg (_bege ,0);_gaea :=_aagb (_deeg +_bege ,_ggdba );var _ebbcc ,_adgc int ;if _bege >=8{_ebbcc =_bege >>3;_cgcc +=_ebbcc ;_daaf -=_ebbcc <<3;_gaea -=_ebbcc <<3;_bege &=7;}else if _bege <=-8{_adgc =-((_bege +7)>>3);
_agcb +=_adgc ;_fdea -=_adgc ;_bege +=_adgc <<3;};var (_dgcd ,_edeb ,_gggf int ;_aegd ,_fbgg ,_ggaf byte ;);if _daaf >=_gaea ||_dddc >=_edfe {return false ,nil ;};_faba :=(_gaea +7)>>3;switch {case _bege ==0:for _edeb =_dddc ;_edeb < _edfe ;_edeb ,_cgcc ,_agcb =_edeb +1,_cgcc +bm1 .RowStride ,_agcb +bm2 .RowStride {for _gggf =0;
_gggf < _faba ;_gggf ++{_aegd =bm1 .Data [_cgcc +_gggf ]&bm2 .Data [_agcb +_gggf ];_dgcd +=tab [_aegd ];};if _dgcd >=_dea {return true ,nil ;};if _eaga :=_dgcd +downcount [_edeb ]-_aada ;_eaga < _dea {return false ,nil ;};};case _bege > 0&&_fdea < _faba :for _edeb =_dddc ;
_edeb < _edfe ;_edeb ,_cgcc ,_agcb =_edeb +1,_cgcc +bm1 .RowStride ,_agcb +bm2 .RowStride {_fbgg =bm1 .Data [_cgcc ];_ggaf =bm2 .Data [_agcb ]>>uint (_bege );_aegd =_fbgg &_ggaf ;_dgcd +=tab [_aegd ];for _gggf =1;_gggf < _fdea ;_gggf ++{_fbgg =bm1 .Data [_cgcc +_gggf ];
_ggaf =bm2 .Data [_agcb +_gggf ]>>uint (_bege )|bm2 .Data [_agcb +_gggf -1]<<uint (8-_bege );_aegd =_fbgg &_ggaf ;_dgcd +=tab [_aegd ];};_fbgg =bm1 .Data [_cgcc +_gggf ];_ggaf =bm2 .Data [_agcb +_gggf -1]<<uint (8-_bege );_aegd =_fbgg &_ggaf ;_dgcd +=tab [_aegd ];
if _dgcd >=_dea {return true ,nil ;}else if _dgcd +downcount [_edeb ]-_aada < _dea {return false ,nil ;};};case _bege > 0&&_fdea >=_faba :for _edeb =_dddc ;_edeb < _edfe ;_edeb ,_cgcc ,_agcb =_edeb +1,_cgcc +bm1 .RowStride ,_agcb +bm2 .RowStride {_fbgg =bm1 .Data [_cgcc ];
_ggaf =bm2 .Data [_agcb ]>>uint (_bege );_aegd =_fbgg &_ggaf ;_dgcd +=tab [_aegd ];for _gggf =1;_gggf < _faba ;_gggf ++{_fbgg =bm1 .Data [_cgcc +_gggf ];_ggaf =bm2 .Data [_agcb +_gggf ]>>uint (_bege );_ggaf |=bm2 .Data [_agcb +_gggf -1]<<uint (8-_bege );
_aegd =_fbgg &_ggaf ;_dgcd +=tab [_aegd ];};if _dgcd >=_dea {return true ,nil ;}else if _dgcd +downcount [_edeb ]-_aada < _dea {return false ,nil ;};};case _faba < _fdea :for _edeb =_dddc ;_edeb < _edfe ;_edeb ,_cgcc ,_agcb =_edeb +1,_cgcc +bm1 .RowStride ,_agcb +bm2 .RowStride {for _gggf =0;
_gggf < _faba ;_gggf ++{_fbgg =bm1 .Data [_cgcc +_gggf ];_ggaf =bm2 .Data [_agcb +_gggf ]<<uint (-_bege );_ggaf |=bm2 .Data [_agcb +_gggf +1]>>uint (8+_bege );_aegd =_fbgg &_ggaf ;_dgcd +=tab [_aegd ];};if _dgcd >=_dea {return true ,nil ;}else if _bebdc :=_dgcd +downcount [_edeb ]-_aada ;
_bebdc < _dea {return false ,nil ;};};case _fdea >=_faba :for _edeb =_dddc ;_edeb < _edfe ;_edeb ,_cgcc ,_agcb =_edeb +1,_cgcc +bm1 .RowStride ,_agcb +bm2 .RowStride {for _gggf =0;_gggf < _faba ;_gggf ++{_fbgg =bm1 .Data [_cgcc +_gggf ];_ggaf =bm2 .Data [_agcb +_gggf ]<<uint (-_bege );
_ggaf |=bm2 .Data [_agcb +_gggf +1]>>uint (8+_bege );_aegd =_fbgg &_ggaf ;_dgcd +=tab [_aegd ];};_fbgg =bm1 .Data [_cgcc +_gggf ];_ggaf =bm2 .Data [_agcb +_gggf ]<<uint (-_bege );_aegd =_fbgg &_ggaf ;_dgcd +=tab [_aegd ];if _dgcd >=_dea {return true ,nil ;
}else if _dgcd +downcount [_edeb ]-_aada < _dea {return false ,nil ;};};};_gaag :=float32 (_dgcd )*float32 (_dgcd )/(float32 (area1 )*float32 (area2 ));if _gaag >=scoreThreshold {_dc .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_dgcd ,_dea ,_gaag ,scoreThreshold );
};return false ,nil ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _fegcf (_cced *Bitmap ,_ggafd ,_adeac ,_egea ,_adeaa int ,_ccdcd RasterOperator ,_bebeb *Bitmap ,_ffdcb ,_gbea int )error {var (_fgfb bool ;
_dba bool ;_egdc byte ;_cbaf int ;_bbag int ;_dbbgb int ;_cggc int ;_dgf bool ;_cecd int ;_fbcdd int ;_fdbe int ;_aaec bool ;_adge byte ;_daceg int ;_ffag int ;_fefc int ;_gedbd byte ;_cebg int ;_gfdf int ;_affe uint ;_faca uint ;_bbgd byte ;_ggbc shift ;
_fddcg bool ;_fcag bool ;_bfede ,_fabc int ;);if _ffdcb &7!=0{_gfdf =8-(_ffdcb &7);};if _ggafd &7!=0{_bbag =8-(_ggafd &7);};if _gfdf ==0&&_bbag ==0{_bbgd =_efccd [0];}else {if _bbag > _gfdf {_affe =uint (_bbag -_gfdf );}else {_affe =uint (8-(_gfdf -_bbag ));
};_faca =8-_affe ;_bbgd =_efccd [_affe ];};if (_ggafd &7)!=0{_fgfb =true ;_cbaf =8-(_ggafd &7);_egdc =_efccd [_cbaf ];_dbbgb =_cced .RowStride *_adeac +(_ggafd >>3);_cggc =_bebeb .RowStride *_gbea +(_ffdcb >>3);_cebg =8-(_ffdcb &7);if _cbaf > _cebg {_ggbc =_eaaac ;
if _egea >=_gfdf {_fddcg =true ;};}else {_ggbc =_eaebb ;};};if _egea < _cbaf {_dba =true ;_egdc &=_ggdd [8-_cbaf +_egea ];};if !_dba {_cecd =(_egea -_cbaf )>>3;if _cecd !=0{_dgf =true ;_fbcdd =_cced .RowStride *_adeac +((_ggafd +_bbag )>>3);_fdbe =_bebeb .RowStride *_gbea +((_ffdcb +_bbag )>>3);
};};_daceg =(_ggafd +_egea )&7;if !(_dba ||_daceg ==0){_aaec =true ;_adge =_ggdd [_daceg ];_ffag =_cced .RowStride *_adeac +((_ggafd +_bbag )>>3)+_cecd ;_fefc =_bebeb .RowStride *_gbea +((_ffdcb +_bbag )>>3)+_cecd ;if _daceg > int (_faca ){_fcag =true ;
};};switch _ccdcd {case PixSrc :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;
};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],_gedbd ,_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );
_cced .Data [_fbcdd +_fabc ]=_gedbd ;};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};if _aaec {for _bfede =0;_bfede < _adeaa ;_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );
};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],_gedbd ,_adge );_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;};};case PixNotSrc :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );
};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],^_gedbd ,_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;_fabc < _cecd ;
_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );_cced .Data [_fbcdd +_fabc ]=^_gedbd ;};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};if _aaec {for _bfede =0;_bfede < _adeaa ;_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;
if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],^_gedbd ,_adge );_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;};};case PixSrcOrDst :if _fgfb {for _bfede =0;_bfede < _adeaa ;
_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],_gedbd |_cced .Data [_dbbgb ],_egdc );
_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );_cced .Data [_fbcdd +_fabc ]|=_gedbd ;
};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};if _aaec {for _bfede =0;_bfede < _adeaa ;_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],_gedbd |_cced .Data [_ffag ],_adge );
_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;};};case PixSrcAndDst :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );
};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],_gedbd &_cced .Data [_dbbgb ],_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;
_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );_cced .Data [_fbcdd +_fabc ]&=_gedbd ;};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};if _aaec {for _bfede =0;_bfede < _adeaa ;
_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],_gedbd &_cced .Data [_ffag ],_adge );_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;
};};case PixSrcXorDst :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;
};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],_gedbd ^_cced .Data [_dbbgb ],_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );
_cced .Data [_fbcdd +_fabc ]^=_gedbd ;};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};if _aaec {for _bfede =0;_bfede < _adeaa ;_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );
};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],_gedbd ^_cced .Data [_ffag ],_adge );_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;};};case PixNotSrcOrDst :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;
if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],^_gedbd |_cced .Data [_dbbgb ],_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;
};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );_cced .Data [_fbcdd +_fabc ]|=^_gedbd ;};_fbcdd +=_cced .RowStride ;
_fdbe +=_bebeb .RowStride ;};};if _aaec {for _bfede =0;_bfede < _adeaa ;_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],^_gedbd |_cced .Data [_ffag ],_adge );
_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;};};case PixNotSrcAndDst :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );
};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],^_gedbd &_cced .Data [_dbbgb ],_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;
_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );_cced .Data [_fbcdd +_fabc ]&=^_gedbd ;};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};if _aaec {for _bfede =0;_bfede < _adeaa ;
_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],^_gedbd &_cced .Data [_ffag ],_adge );_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;
};};case PixSrcOrNotDst :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;
};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],_gedbd |^_cced .Data [_dbbgb ],_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );
_cced .Data [_fbcdd +_fabc ]=_gedbd |^_cced .Data [_fbcdd +_fabc ];};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};if _aaec {for _bfede =0;_bfede < _adeaa ;_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );
};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],_gedbd |^_cced .Data [_ffag ],_adge );_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;};};case PixSrcAndNotDst :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;
if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],_gedbd &^_cced .Data [_dbbgb ],_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;
};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );_cced .Data [_fbcdd +_fabc ]=_gedbd &^_cced .Data [_fbcdd +_fabc ];
};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};if _aaec {for _bfede =0;_bfede < _adeaa ;_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],_gedbd &^_cced .Data [_ffag ],_adge );
_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;};};case PixNotPixSrcOrDst :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );
};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],^(_gedbd |_cced .Data [_dbbgb ]),_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;
_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );_cced .Data [_fbcdd +_fabc ]=^(_gedbd |_cced .Data [_fbcdd +_fabc ]);};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};
if _aaec {for _bfede =0;_bfede < _adeaa ;_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],^(_gedbd |_cced .Data [_ffag ]),_adge );
_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;};};case PixNotPixSrcAndDst :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );
};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],^(_gedbd &_cced .Data [_dbbgb ]),_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;
_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );_cced .Data [_fbcdd +_fabc ]=^(_gedbd &_cced .Data [_fbcdd +_fabc ]);};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};
if _aaec {for _bfede =0;_bfede < _adeaa ;_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],^(_gedbd &_cced .Data [_ffag ]),_adge );
_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;};};case PixNotPixSrcXorDst :if _fgfb {for _bfede =0;_bfede < _adeaa ;_bfede ++{if _ggbc ==_eaaac {_gedbd =_bebeb .Data [_cggc ]<<_affe ;if _fddcg {_gedbd =_fagc (_gedbd ,_bebeb .Data [_cggc +1]>>_faca ,_bbgd );
};}else {_gedbd =_bebeb .Data [_cggc ]>>_faca ;};_cced .Data [_dbbgb ]=_fagc (_cced .Data [_dbbgb ],^(_gedbd ^_cced .Data [_dbbgb ]),_egdc );_dbbgb +=_cced .RowStride ;_cggc +=_bebeb .RowStride ;};};if _dgf {for _bfede =0;_bfede < _adeaa ;_bfede ++{for _fabc =0;
_fabc < _cecd ;_fabc ++{_gedbd =_fagc (_bebeb .Data [_fdbe +_fabc ]<<_affe ,_bebeb .Data [_fdbe +_fabc +1]>>_faca ,_bbgd );_cced .Data [_fbcdd +_fabc ]=^(_gedbd ^_cced .Data [_fbcdd +_fabc ]);};_fbcdd +=_cced .RowStride ;_fdbe +=_bebeb .RowStride ;};};
if _aaec {for _bfede =0;_bfede < _adeaa ;_bfede ++{_gedbd =_bebeb .Data [_fefc ]<<_affe ;if _fcag {_gedbd =_fagc (_gedbd ,_bebeb .Data [_fefc +1]>>_faca ,_bbgd );};_cced .Data [_ffag ]=_fagc (_cced .Data [_ffag ],^(_gedbd ^_cced .Data [_ffag ]),_adge );
_ffag +=_cced .RowStride ;_fefc +=_bebeb .RowStride ;};};default:_dc .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ccdcd );
return _c .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func _dagc (_egef ,_fea *Bitmap ,_edab ,_eaee int )(*Bitmap ,error ){const _ffca ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _fea ==nil {return nil ,_c .Error (_ffca ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _edab < 1||_eaee < 1{return nil ,_c .Error (_ffca ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _edab ==1&&_eaee ==1{return _dgbdf (_egef ,_fea );};if MorphBC ==SymmetricMorphBC {_gbaa ,_bbf :=_gdba (_egef ,_fea ,_edab ,_eaee );
if _bbf !=nil {return nil ,_c .Wrap (_bbf ,_ffca ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _gbaa ,nil ;};_agca :=_fggg (_edab /2,_eaee /2);_beegb :=8*((_agca +7)/8);_gfb ,_gdbd :=_fea .AddBorder (_beegb ,0);
if _gdbd !=nil {return nil ,_c .Wrapf (_gdbd ,_ffca ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_beegb );};var _fafa ,_gggfa *Bitmap ;if _edab ==1||_eaee ==1{_ffed :=SelCreateBrick (_eaee ,_edab ,_eaee /2,_edab /2,SelHit );
_fafa ,_gdbd =_eefa (nil ,_gfb ,_ffed );if _gdbd !=nil {return nil ,_c .Wrap (_gdbd ,_ffca ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_dcebae :=SelCreateBrick (1,_edab ,0,_edab /2,SelHit );
_ffgd ,_baca :=_gfce (nil ,_gfb ,_dcebae );if _baca !=nil {return nil ,_c .Wrap (_baca ,_ffca ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_fbeb :=SelCreateBrick (_eaee ,1,_eaee /2,0,SelHit );
_fafa ,_baca =_gfce (nil ,_ffgd ,_fbeb );if _baca !=nil {return nil ,_c .Wrap (_baca ,_ffca ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_baca =_ccdf (_ffgd ,_fafa ,_dcebae );
_baca !=nil {return nil ,_c .Wrap (_baca ,_ffca ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_baca =_ccdf (_fafa ,_ffgd ,_fbeb );_baca !=nil {return nil ,_c .Wrap (_baca ,_ffca ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _gggfa ,_gdbd =_fafa .RemoveBorder (_beegb );_gdbd !=nil {return nil ,_c .Wrap (_gdbd ,_ffca ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _egef ==nil {return _gggfa ,nil ;};if _ ,_gdbd =_dgbdf (_egef ,_gggfa );_gdbd !=nil {return nil ,_gdbd ;};
return _egef ,nil ;};var _ _fg .Interface =&ClassedPoints {};func (_fgfg *Bitmaps )AddBitmap (bm *Bitmap ){_fgfg .Values =append (_fgfg .Values ,bm )};type SelectionValue int ;func (_eea *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _eea .Copy (),nil ;
};_dfd ,_dcf :=_eea .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _dcf !=nil {return nil ,_c .Wrap (_dcf ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _dfd ,nil ;};func _acge (_ggef *Bitmap ,_adec ,_gdcbg int ,_ffga ,_dabc int ,_fgfe RasterOperator ,_gdgd *Bitmap ,_edd ,_ebff int )error {var _ddbb ,_accd ,_bdfcb ,_dgcda int ;
if _adec < 0{_edd -=_adec ;_ffga +=_adec ;_adec =0;};if _edd < 0{_adec -=_edd ;_ffga +=_edd ;_edd =0;};_ddbb =_adec +_ffga -_ggef .Width ;if _ddbb > 0{_ffga -=_ddbb ;};_accd =_edd +_ffga -_gdgd .Width ;if _accd > 0{_ffga -=_accd ;};if _gdcbg < 0{_ebff -=_gdcbg ;
_dabc +=_gdcbg ;_gdcbg =0;};if _ebff < 0{_gdcbg -=_ebff ;_dabc +=_ebff ;_ebff =0;};_bdfcb =_gdcbg +_dabc -_ggef .Height ;if _bdfcb > 0{_dabc -=_bdfcb ;};_dgcda =_ebff +_dabc -_gdgd .Height ;if _dgcda > 0{_dabc -=_dgcda ;};if _ffga <=0||_dabc <=0{return nil ;
};var _aacfg error ;switch {case _adec &7==0&&_edd &7==0:_aacfg =_gebe (_ggef ,_adec ,_gdcbg ,_ffga ,_dabc ,_fgfe ,_gdgd ,_edd ,_ebff );case _adec &7==_edd &7:_aacfg =_dfag (_ggef ,_adec ,_gdcbg ,_ffga ,_dabc ,_fgfe ,_gdgd ,_edd ,_ebff );default:_aacfg =_fegcf (_ggef ,_adec ,_gdcbg ,_ffga ,_dabc ,_fgfe ,_gdgd ,_edd ,_ebff );
};if _aacfg !=nil {return _c .Wrap (_aacfg ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_gdgg *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _abbf ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_gdgg .IntSlice .Size (){return 0,_c .Errorf (_abbf ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_gdgg .XAtIndex (i )),nil ;};func (_bebd *Bitmap )clearAll ()error {return _bebd .RasterOperation (0,0,_bebd .Width ,_bebd .Height ,PixClr ,nil ,0,0);};func _efefe (_gcbg ...MorphProcess )(_afdg error ){const _cfffg ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _dfa ,_fcae int ;for _edaf ,_cfdc :=range _gcbg {if _afdg =_cfdc .verify (_edaf ,&_dfa ,&_fcae );_afdg !=nil {return _c .Wrap (_afdg ,_cfffg ,"");};};if _fcae !=0&&_dfa !=0{return _c .Error (_cfffg ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};var _dfdc =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_eecf *ClassedPoints )xSortFunction ()func (_dgef int ,_cfca int )bool {return func (_efcc ,_ecgdd int )bool {return _eecf .XAtIndex (_efcc )< _eecf .XAtIndex (_ecgdd )};};func init (){for _fbe :=0;_fbe < 256;_fbe ++{_fgd [_fbe ]=uint8 (_fbe &0x1)+(uint8 (_fbe >>1)&0x1)+(uint8 (_fbe >>2)&0x1)+(uint8 (_fbe >>3)&0x1)+(uint8 (_fbe >>4)&0x1)+(uint8 (_fbe >>5)&0x1)+(uint8 (_fbe >>6)&0x1)+(uint8 (_fbe >>7)&0x1);
};};func (_cabe *Bitmap )countPixels ()int {var (_bddb int ;_dcebe uint8 ;_faaf byte ;_gbfd int ;);_cgeb :=_cabe .RowStride ;_dda :=uint (_cabe .Width &0x07);if _dda !=0{_dcebe =uint8 ((0xff<<(8-_dda ))&0xff);_cgeb --;};for _abdc :=0;_abdc < _cabe .Height ;
_abdc ++{for _gbfd =0;_gbfd < _cgeb ;_gbfd ++{_faaf =_cabe .Data [_abdc *_cabe .RowStride +_gbfd ];_bddb +=int (_fgd [_faaf ]);};if _dda !=0{_bddb +=int (_fgd [_cabe .Data [_abdc *_cabe .RowStride +_gbfd ]&_dcebe ]);};};return _bddb ;};type ClassedPoints struct{*Points ;
_b .IntSlice ;_gdcd func (_cbc ,_feac int )bool ;};func (_bccd *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _bccd .removeBorderGeneral (left ,right ,top ,bot );};func (_adfd *Bitmap )CreateTemplate ()*Bitmap {return _adfd .createTemplate ()};
func (_fgaf *Bitmap )addBorderGeneral (_cgdg ,_bad ,_cccg ,_cgcd int ,_ddfd int )(*Bitmap ,error ){const _dac ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _cgdg < 0||_bad < 0||_cccg < 0||_cgcd < 0{return nil ,_c .Error (_dac ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_eaeg ,_dfbe :=_fgaf .Width ,_fgaf .Height ;_gga :=_eaeg +_cgdg +_bad ;_cdb :=_dfbe +_cccg +_cgcd ;_ccg :=New (_gga ,_cdb );_ccg .Color =_fgaf .Color ;_cgfc :=PixClr ;if _ddfd > 0{_cgfc =PixSet ;};_ccf :=_ccg .RasterOperation (0,0,_cgdg ,_cdb ,_cgfc ,nil ,0,0);
if _ccf !=nil {return nil ,_c .Wrap (_ccf ,_dac ,"\u006c\u0065\u0066\u0074");};_ccf =_ccg .RasterOperation (_gga -_bad ,0,_bad ,_cdb ,_cgfc ,nil ,0,0);if _ccf !=nil {return nil ,_c .Wrap (_ccf ,_dac ,"\u0072\u0069\u0067h\u0074");};_ccf =_ccg .RasterOperation (0,0,_gga ,_cccg ,_cgfc ,nil ,0,0);
if _ccf !=nil {return nil ,_c .Wrap (_ccf ,_dac ,"\u0074\u006f\u0070");};_ccf =_ccg .RasterOperation (0,_cdb -_cgcd ,_gga ,_cgcd ,_cgfc ,nil ,0,0);if _ccf !=nil {return nil ,_c .Wrap (_ccf ,_dac ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_ccf =_ccg .RasterOperation (_cgdg ,_cccg ,_eaeg ,_dfbe ,PixSrc ,_fgaf ,0,0);
if _ccf !=nil {return nil ,_c .Wrap (_ccf ,_dac ,"\u0063\u006f\u0070\u0079");};return _ccg ,nil ;};func _ccdf (_gcca ,_ccae *Bitmap ,_ebcg *Selection )(*Bitmap ,error ){const _gaegf ="\u0065\u0072\u006fd\u0065";var (_gdff error ;_effa *Bitmap ;);_gcca ,_gdff =_bfdb (_gcca ,_ccae ,_ebcg ,&_effa );
if _gdff !=nil {return nil ,_c .Wrap (_gdff ,_gaegf ,"");};if _gdff =_gcca .setAll ();_gdff !=nil {return nil ,_c .Wrap (_gdff ,_gaegf ,"");};var _ffdcf SelectionValue ;for _ccdgg :=0;_ccdgg < _ebcg .Height ;_ccdgg ++{for _aafec :=0;_aafec < _ebcg .Width ;
_aafec ++{_ffdcf =_ebcg .Data [_ccdgg ][_aafec ];if _ffdcf ==SelHit {_gdff =_bgec (_gcca ,_ebcg .Cx -_aafec ,_ebcg .Cy -_ccdgg ,_ccae .Width ,_ccae .Height ,PixSrcAndDst ,_effa ,0,0);if _gdff !=nil {return nil ,_c .Wrap (_gdff ,_gaegf ,"");};};};};if MorphBC ==SymmetricMorphBC {return _gcca ,nil ;
};_agdd ,_ecgd ,_aeaa ,_daab :=_ebcg .findMaxTranslations ();if _agdd > 0{if _gdff =_gcca .RasterOperation (0,0,_agdd ,_ccae .Height ,PixClr ,nil ,0,0);_gdff !=nil {return nil ,_c .Wrap (_gdff ,_gaegf ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _aeaa > 0{if _gdff =_gcca .RasterOperation (_ccae .Width -_aeaa ,0,_aeaa ,_ccae .Height ,PixClr ,nil ,0,0);
_gdff !=nil {return nil ,_c .Wrap (_gdff ,_gaegf ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _ecgd > 0{if _gdff =_gcca .RasterOperation (0,0,_ccae .Width ,_ecgd ,PixClr ,nil ,0,0);_gdff !=nil {return nil ,_c .Wrap (_gdff ,_gaegf ,"\u0079\u0070\u0020\u003e\u0020\u0030");
};};if _daab > 0{if _gdff =_gcca .RasterOperation (0,_ccae .Height -_daab ,_ccae .Width ,_daab ,PixClr ,nil ,0,0);_gdff !=nil {return nil ,_c .Wrap (_gdff ,_gaegf ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _gcca ,nil ;};func (_cec *Bitmap )GetUnpaddedData ()([]byte ,error ){_dabb :=uint (_cec .Width &0x07);
if _dabb ==0{return _cec .Data ,nil ;};_ffa :=_cec .Width *_cec .Height ;if _ffa %8!=0{_ffa >>=3;_ffa ++;}else {_ffa >>=3;};_gge :=make ([]byte ,_ffa );_bbdd :=_ec .NewWriterMSB (_gge );const _ddf ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
for _fdde :=0;_fdde < _cec .Height ;_fdde ++{for _gda :=0;_gda < _cec .RowStride ;_gda ++{_cddd :=_cec .Data [_fdde *_cec .RowStride +_gda ];if _gda !=_cec .RowStride -1{_cefc :=_bbdd .WriteByte (_cddd );if _cefc !=nil {return nil ,_c .Wrap (_cefc ,_ddf ,"");
};continue ;};for _abbd :=uint (0);_abbd < _dabb ;_abbd ++{_eegc :=_bbdd .WriteBit (int (_cddd >>(7-_abbd )&0x01));if _eegc !=nil {return nil ,_c .Wrap (_eegc ,_ddf ,"");};};};};return _gge ,nil ;};func (_aaaf MorphProcess )verify (_dffac int ,_ccfa ,_adea *int )error {const _bdgf ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _aaaf .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_aaaf .Arguments )!=2{return _c .Error (_bdgf ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_gcae ,_gbgf :=_aaaf .getWidthHeight ();if _gcae <=0||_gbgf <=0{return _c .Error (_bdgf ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_efeff :=len (_aaaf .Arguments );*_ccfa +=_efeff ;if _efeff < 1||_efeff > 4{return _c .Error (_bdgf ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _fbde :=0;_fbde < _efeff ;_fbde ++{if _aaaf .Arguments [_fbde ]< 1||_aaaf .Arguments [_fbde ]> 4{return _c .Error (_bdgf ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_aaaf .Arguments )==0{return _c .Error (_bdgf ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gdcb :=_aaaf .Arguments [0];if _gdcb !=2&&_gdcb !=4&&_gdcb !=8{return _c .Error (_bdgf ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_ccfa -=_ebcc [_gdcb /4];case MopAddBorder :if len (_aaaf .Arguments )==0{return _c .Error (_bdgf ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcdg :=_aaaf .Arguments [0];if _dffac > 0{return _c .Error (_bdgf ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _bcdg < 1{return _c .Error (_bdgf ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_adea =_bcdg ;};return nil ;};func _ecce (_ggbd ,_fffc *Bitmap ,_aaab ,_baga int )(_cfaa error ){const _edde ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_ddbef ,_badc ,_dcec ,_fgcdc int ;_dbeb ,_aedd ,_fceb ,_dggc ,_eacg ,_cdbe ,_ffea byte ;);for _ddbef =0;_ddbef < _aaab ;_ddbef ++{_dcec =_ddbef *_ggbd .RowStride ;_fgcdc =_ddbef *_fffc .RowStride ;for _badc =0;_badc < _baga ;_badc ++{_dbeb ,_cfaa =_ggbd .GetByte (_dcec +_badc );
if _cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_aedd ,_cfaa =_fffc .GetByte (_fgcdc +_badc );if _cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _ddbef > 0{_fceb ,_cfaa =_ggbd .GetByte (_dcec -_ggbd .RowStride +_badc );if _cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"\u0069\u0020\u003e \u0030");};_dbeb |=_fceb ;};if _badc > 0{_dggc ,_cfaa =_ggbd .GetByte (_dcec +_badc -1);if _cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"\u006a\u0020\u003e \u0030");
};_dbeb |=_dggc <<7;};_dbeb &=_aedd ;if _dbeb ==0||(^_dbeb )==0{if _cfaa =_ggbd .SetByte (_dcec +_badc ,_dbeb );_cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_ffea =_dbeb ;_dbeb =(_dbeb |(_dbeb >>1)|(_dbeb <<1))&_aedd ;if (_dbeb ^_ffea )==0{if _cfaa =_ggbd .SetByte (_dcec +_badc ,_dbeb );_cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _ddbef =_aaab -1;_ddbef >=0;_ddbef --{_dcec =_ddbef *_ggbd .RowStride ;_fgcdc =_ddbef *_fffc .RowStride ;for _badc =_baga -1;_badc >=0;_badc --{if _dbeb ,_cfaa =_ggbd .GetByte (_dcec +_badc );_cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _aedd ,_cfaa =_fffc .GetByte (_fgcdc +_badc );_cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _ddbef < _aaab -1{if _eacg ,_cfaa =_ggbd .GetByte (_dcec +_ggbd .RowStride +_badc );
_cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_dbeb |=_eacg ;};if _badc < _baga -1{if _cdbe ,_cfaa =_ggbd .GetByte (_dcec +_badc +1);_cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_dbeb |=_cdbe >>7;};_dbeb &=_aedd ;if _dbeb ==0||(^_dbeb )==0{if _cfaa =_ggbd .SetByte (_dcec +_badc ,_dbeb );_cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_ffea =_dbeb ;_dbeb =(_dbeb |(_dbeb >>1)|(_dbeb <<1))&_aedd ;if (_dbeb ^_ffea )==0{if _cfaa =_ggbd .SetByte (_dcec +_badc ,_dbeb );_cfaa !=nil {return _c .Wrap (_cfaa ,_edde ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_efbg *Bitmap )GetByte (index int )(byte ,error ){if index > len (_efbg .Data )-1||index < 0{return 0,_c .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _efbg .Data [index ],nil ;};func (_bdg *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _bdg .addBorderGeneral (left ,right ,top ,bot ,val );};func (_eaae *byWidth )Less (i ,j int )bool {return _eaae .Values [i ].Width < _eaae .Values [j ].Width };
func (_bdac *Bitmap )removeBorderGeneral (_caeg ,_bdb ,_befg ,_eegd int )(*Bitmap ,error ){const _aff ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _caeg < 0||_bdb < 0||_befg < 0||_eegd < 0{return nil ,_c .Error (_aff ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");
};_accc ,_edcd :=_bdac .Width ,_bdac .Height ;_daac :=_accc -_caeg -_bdb ;_gaeg :=_edcd -_befg -_eegd ;if _daac <=0{return nil ,_c .Errorf (_aff ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_daac );
};if _gaeg <=0{return nil ,_c .Errorf (_aff ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_gaeg );};_faad :=New (_daac ,_gaeg );_faad .Color =_bdac .Color ;_cbb :=_faad .RasterOperation (0,0,_daac ,_gaeg ,PixSrc ,_bdac ,_caeg ,_befg );
if _cbb !=nil {return nil ,_c .Wrap (_cbb ,_aff ,"");};return _faad ,nil ;};func _ecd (_ag ,_eg *Bitmap )(_aed error ){const _ee ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_ce :=_eg .RowStride ;
_af :=_ag .RowStride ;_fe :=_eg .RowStride *4-_ag .RowStride ;var (_ab ,_fga byte ;_gd uint32 ;_cb ,_da ,_ac ,_bec ,_df ,_bd ,_ffc int ;);for _ac =0;_ac < _eg .Height ;_ac ++{_cb =_ac *_ce ;_da =4*_ac *_af ;for _bec =0;_bec < _ce ;_bec ++{_ab =_eg .Data [_cb +_bec ];
_gd =_gafg [_ab ];_bd =_da +_bec *4;if _fe !=0&&(_bec +1)*4> _ag .RowStride {for _df =_fe ;_df > 0;_df --{_fga =byte ((_gd >>uint (_df *8))&0xff);_ffc =_bd +(_fe -_df );if _aed =_ag .SetByte (_ffc ,_fga );_aed !=nil {return _c .Wrapf (_aed ,_ee ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_df );
};};}else if _aed =_ag .setFourBytes (_bd ,_gd );_aed !=nil {return _c .Wrap (_aed ,_ee ,"");};if _aed =_ag .setFourBytes (_da +_bec *4,_gafg [_eg .Data [_cb +_bec ]]);_aed !=nil {return _c .Wrap (_aed ,_ee ,"");};};for _df =1;_df < 4;_df ++{for _bec =0;
_bec < _af ;_bec ++{if _aed =_ag .SetByte (_da +_df *_af +_bec ,_ag .Data [_da +_bec ]);_aed !=nil {return _c .Wrapf (_aed ,_ee ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_df ,_bec );
};};};};return nil ;};func (_age *Bitmap )thresholdPixelSum (_dace int )bool {var (_gebf int ;_ffbc uint8 ;_abc byte ;_dcd int ;);_dgbg :=_age .RowStride ;_dfed :=uint (_age .Width &0x07);if _dfed !=0{_ffbc =uint8 ((0xff<<(8-_dfed ))&0xff);_dgbg --;};for _fcab :=0;
_fcab < _age .Height ;_fcab ++{for _dcd =0;_dcd < _dgbg ;_dcd ++{_abc =_age .Data [_fcab *_age .RowStride +_dcd ];_gebf +=int (_fgd [_abc ]);};if _dfed !=0{_abc =_age .Data [_fcab *_age .RowStride +_dcd ]&_ffbc ;_gebf +=int (_fgd [_abc ]);};if _gebf > _dace {return true ;
};};return false ;};func _caagc (_bgda *Bitmap )(_ggee *Bitmap ,_caad int ,_efecb error ){const _adaf ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _bgda ==nil {return nil ,0,_c .Errorf (_adaf ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};var _fde ,_bea *Bitmap ;if _fde ,_efecb =_dgbdf (nil ,_bgda );_efecb !=nil {return nil ,0,_c .Wrap (_efecb ,_adaf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_ecbf [13]int ;_cgff ,_cddf int ;);_dege :=12;_dade :=_b .NewNumSlice (_dege +1);
_bfcg :=_b .NewNumSlice (_dege +1);var _egb *Boxes ;for _degeb :=0;_degeb <=_dege ;_degeb ++{if _degeb ==0{if _bea ,_efecb =_dgbdf (nil ,_fde );_efecb !=nil {return nil ,0,_c .Wrap (_efecb ,_adaf ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _bea ,_efecb =_degg (_fde ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});
_efecb !=nil {return nil ,0,_c .Wrap (_efecb ,_adaf ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _egb ,_efecb =_bea .connComponentsBB (4);_efecb !=nil {return nil ,0,_c .Wrap (_efecb ,_adaf ,"");};_ecbf [_degeb ]=len (*_egb );
_dade .AddInt (_ecbf [_degeb ]);switch _degeb {case 0:_cgff =_ecbf [0];default:_cddf =_ecbf [_degeb -1]-_ecbf [_degeb ];_bfcg .AddInt (_cddf );};_fde =_bea ;};_dag :=true ;_eee :=2;var _caadb ,_gfd int ;for _ecef :=1;_ecef < len (*_bfcg );_ecef ++{if _caadb ,_efecb =_dade .GetInt (_ecef );
_efecb !=nil {return nil ,0,_c .Wrap (_efecb ,_adaf ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _dag &&_caadb < int (0.3*float32 (_cgff )){_eee =_ecef +1;_dag =false ;};
if _cddf ,_efecb =_bfcg .GetInt (_ecef );_efecb !=nil {return nil ,0,_c .Wrap (_efecb ,_adaf ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _cddf > _gfd {_gfd =_cddf ;};};_acfd :=_bgda .XResolution ;if _acfd ==0{_acfd =150;
};if _acfd > 110{_eee ++;};if _eee < 2{_dc .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_eee =2;};_caad =_eee +1;if _ggee ,_efecb =_gdba (nil ,_bgda ,_eee +1,1);_efecb !=nil {return nil ,0,_c .Wrap (_efecb ,_adaf ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _ggee ,_caad ,nil ;
};func (_fcaf *ClassedPoints )Len ()int {return _fcaf .IntSlice .Size ()};func Extract (roi _a .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ceee :=New (roi .Dx (),roi .Dy ());_acb :=roi .Min .X &0x07;_cafaf :=8-_acb ;_efeb :=uint (8-_ceee .Width &0x07);
_efd :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_bbde :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_dceba :=_ceee .RowStride ==_bbde +1-_efd ;var _caee int ;for _abca :=roi .Min .Y ;_abca < roi .Max .Y ;_abca ++{_ecde :=_efd ;_cgbf :=_caee ;switch {case _efd ==_bbde :_caed ,_gffg :=src .GetByte (_ecde );
if _gffg !=nil {return nil ,_gffg ;};_caed <<=uint (_acb );_gffg =_ceee .SetByte (_cgbf ,_bcbc (_efeb ,_caed ));if _gffg !=nil {return nil ,_gffg ;};case _acb ==0:for _aegg :=_efd ;_aegg <=_bbde ;_aegg ++{_cgga ,_aefc :=src .GetByte (_ecde );if _aefc !=nil {return nil ,_aefc ;
};_ecde ++;if _aegg ==_bbde &&_dceba {_cgga =_bcbc (_efeb ,_cgga );};_aefc =_ceee .SetByte (_cgbf ,_cgga );if _aefc !=nil {return nil ,_aefc ;};_cgbf ++;};default:_efgb :=_dabf (src ,_ceee ,uint (_acb ),uint (_cafaf ),_efeb ,_efd ,_bbde ,_dceba ,_ecde ,_cgbf );
if _efgb !=nil {return nil ,_efgb ;};};_efd +=src .RowStride ;_bbde +=src .RowStride ;_caee +=_ceee .RowStride ;};return _ceee ,nil ;};func (_adcg *Bitmap )nextOnPixel (_gaeb ,_fced int )(_bbge _a .Point ,_bbac bool ,_aea error ){const _bfcf ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_bbge ,_bbac ,_aea =_adcg .nextOnPixelLow (_adcg .Width ,_adcg .Height ,_adcg .RowStride ,_gaeb ,_fced );if _aea !=nil {return _bbge ,false ,_c .Wrap (_aea ,_bfcf ,"");};return _bbge ,_bbac ,nil ;};func (_fcfe *Bitmap )Zero ()bool {_ddcg :=_fcfe .Width /8;
_cfc :=_fcfe .Width &7;var _feed byte ;if _cfc !=0{_feed =byte (0xff<<uint (8-_cfc ));};var _bgcg ,_aeg ,_cae int ;for _aeg =0;_aeg < _fcfe .Height ;_aeg ++{_bgcg =_fcfe .RowStride *_aeg ;for _cae =0;_cae < _ddcg ;_cae ,_bgcg =_cae +1,_bgcg +1{if _fcfe .Data [_bgcg ]!=0{return false ;
};};if _cfc > 0{if _fcfe .Data [_bgcg ]&_feed !=0{return false ;};};};return true ;};func _be (_aa ,_ad *Bitmap )(_dd error ){const _ae ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_ef :=_ad .RowStride ;
_bg :=_aa .RowStride ;var (_dg byte ;_cd uint16 ;_bf ,_ga ,_efe ,_ff ,_ba int ;);for _efe =0;_efe < _ad .Height ;_efe ++{_bf =_efe *_ef ;_ga =2*_efe *_bg ;for _ff =0;_ff < _ef ;_ff ++{_dg =_ad .Data [_bf +_ff ];_cd =_bceba [_dg ];_ba =_ga +_ff *2;if _aa .RowStride !=_ad .RowStride *2&&(_ff +1)*2> _aa .RowStride {_dd =_aa .SetByte (_ba ,byte (_cd >>8));
}else {_dd =_aa .setTwoBytes (_ba ,_cd );};if _dd !=nil {return _c .Wrap (_dd ,_ae ,"");};};for _ff =0;_ff < _bg ;_ff ++{_ba =_ga +_bg +_ff ;_dg =_aa .Data [_ga +_ff ];if _dd =_aa .SetByte (_ba ,_dg );_dd !=nil {return _c .Wrapf (_dd ,_ae ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ga +_ff ,_ga +_bg +_ff );
};};};return nil ;};func _aacf (_baa *Bitmap ,_ace *Bitmap ,_ffg int )(_ada error ){const _bgb ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _ffg {case 2:_ada =_be (_baa ,_ace );case 4:_ada =_ecd (_baa ,_ace );
case 8:_ada =_gde (_baa ,_ace );default:return _c .Error (_bgb ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _ada !=nil {_ada =_c .Wrap (_ada ,_bgb ,"");};return _ada ;};func (_dgfc *byHeight )Less (i ,j int )bool {return _dgfc .Values [i ].Height < _dgfc .Values [j ].Height };func (_geeeb *Bitmaps )WidthSorter ()func (_gcgg ,_bdgd int )bool {return func (_gebfbg ,_eaec int )bool {return _geeeb .Values [_gebfbg ].Width < _geeeb .Values [_eaec ].Width };
};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func _dfec ()[]int {_afdb :=make ([]int ,256);_afdb [0]=0;_afdb [1]=7;var _ccbc int ;for _ccbc =2;_ccbc < 4;_ccbc ++{_afdb [_ccbc ]=_afdb [_ccbc -2]+6;};for _ccbc =4;_ccbc < 8;_ccbc ++{_afdb [_ccbc ]=_afdb [_ccbc -4]+5;
};for _ccbc =8;_ccbc < 16;_ccbc ++{_afdb [_ccbc ]=_afdb [_ccbc -8]+4;};for _ccbc =16;_ccbc < 32;_ccbc ++{_afdb [_ccbc ]=_afdb [_ccbc -16]+3;};for _ccbc =32;_ccbc < 64;_ccbc ++{_afdb [_ccbc ]=_afdb [_ccbc -32]+2;};for _ccbc =64;_ccbc < 128;_ccbc ++{_afdb [_ccbc ]=_afdb [_ccbc -64]+1;
};for _ccbc =128;_ccbc < 256;_ccbc ++{_afdb [_ccbc ]=_afdb [_ccbc -128];};return _afdb ;};var (_ggdd =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_efccd =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_ggb *Bitmap )addPadBits ()(_dcc error ){const _aeb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_acc :=_ggb .Width %8;if _acc ==0{return nil ;};_eagg :=_ggb .Width /8;_fac :=_ec .NewReader (_ggb .Data );_ggcb :=make ([]byte ,_ggb .Height *_ggb .RowStride );_abg :=_ec .NewWriterMSB (_ggcb );_aee :=make ([]byte ,_eagg );var (_afec int ;_beef uint64 ;
);for _afec =0;_afec < _ggb .Height ;_afec ++{if _ ,_dcc =_fac .Read (_aee );_dcc !=nil {return _c .Wrap (_dcc ,_aeb ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_dcc =_abg .Write (_aee );_dcc !=nil {return _c .Wrap (_dcc ,_aeb ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _beef ,_dcc =_fac .ReadBits (byte (_acc ));_dcc !=nil {return _c .Wrap (_dcc ,_aeb ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _dcc =_abg .WriteByte (byte (_beef )<<uint (8-_acc ));_dcc !=nil {return _c .Wrap (_dcc ,_aeb ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_ggb .Data =_abg .Data ();return nil ;};func _gcde ()(_afa []byte ){_afa =make ([]byte ,256);for _cgee :=0;_cgee < 256;_cgee ++{_ecab :=byte (_cgee );_afa [_ecab ]=(_ecab &0x01)|((_ecab &0x04)>>1)|((_ecab &0x10)>>2)|((_ecab &0x40)>>3)|((_ecab &0x02)<<3)|((_ecab &0x08)<<2)|((_ecab &0x20)<<1)|(_ecab &0x80);
};return _afa ;};func (_fadb *Bitmap )connComponentsBitmapsBB (_cffa *Bitmaps ,_def int )(_eagd *Boxes ,_eeag error ){const _afg ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _def !=4&&_def !=8{return nil ,_c .Error (_afg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _cffa ==nil {return nil ,_c .Error (_afg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_cffa .Values )> 0{return nil ,_c .Error (_afg ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _fadb .Zero (){return &Boxes {},nil ;};
var (_dcgb ,_aaca ,_dbbg ,_eaaa *Bitmap ;);_fadb .setPadBits (0);if _dcgb ,_eeag =_dgbdf (nil ,_fadb );_eeag !=nil {return nil ,_c .Wrap (_eeag ,_afg ,"\u0062\u006d\u0031");};if _aaca ,_eeag =_dgbdf (nil ,_fadb );_eeag !=nil {return nil ,_c .Wrap (_eeag ,_afg ,"\u0062\u006d\u0032");
};_ecg :=&_b .Stack {};_ecg .Aux =&_b .Stack {};_eagd =&Boxes {};var (_bfag ,_bfbf int ;_bgdf _a .Point ;_fdgab bool ;_fdf *_a .Rectangle ;);for {if _bgdf ,_fdgab ,_eeag =_dcgb .nextOnPixel (_bfag ,_bfbf );_eeag !=nil {return nil ,_c .Wrap (_eeag ,_afg ,"");
};if !_fdgab {break ;};if _fdf ,_eeag =_fcgdf (_dcgb ,_ecg ,_bgdf .X ,_bgdf .Y ,_def );_eeag !=nil {return nil ,_c .Wrap (_eeag ,_afg ,"");};if _eeag =_eagd .Add (_fdf );_eeag !=nil {return nil ,_c .Wrap (_eeag ,_afg ,"");};if _dbbg ,_eeag =_dcgb .clipRectangle (_fdf ,nil );
_eeag !=nil {return nil ,_c .Wrap (_eeag ,_afg ,"\u0062\u006d\u0033");};if _eaaa ,_eeag =_aaca .clipRectangle (_fdf ,nil );_eeag !=nil {return nil ,_c .Wrap (_eeag ,_afg ,"\u0062\u006d\u0034");};if _ ,_eeag =_adfa (_dbbg ,_dbbg ,_eaaa );_eeag !=nil {return nil ,_c .Wrap (_eeag ,_afg ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _eeag =_aaca .RasterOperation (_fdf .Min .X ,_fdf .Min .Y ,_fdf .Dx (),_fdf .Dy (),PixSrcXorDst ,_dbbg ,0,0);_eeag !=nil {return nil ,_c .Wrap (_eeag ,_afg ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_cffa .AddBitmap (_dbbg );
_bfag =_bgdf .X ;_bfbf =_bgdf .Y ;};_cffa .Boxes =*_eagd ;return _eagd ,nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_caaf :=make ([]Point ,len (bms ));_ecae :=_dfec ();_eecg :=_fagb ();var _acg error ;for _cgaff ,_cgac :=range bms {_caaf [_cgaff ],_acg =_cgac .centroid (_ecae ,_eecg );
if _acg !=nil {return nil ,_acg ;};};_ffcb :=Points (_caaf );return &_ffcb ,nil ;};func _gbcc (_faeb ,_abfd *Bitmap ,_bga ,_bdag int )(*Bitmap ,error ){const _bcdae ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _abfd ==nil {return nil ,_c .Error (_bcdae ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bga < 1||_bdag < 1{return nil ,_c .Error (_bcdae ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _bga ==1&&_bdag ==1{_ecee ,_gfbd :=_dgbdf (_faeb ,_abfd );if _gfbd !=nil {return nil ,_c .Wrap (_gfbd ,_bcdae ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ecee ,nil ;};if _bga ==1||_bdag ==1{_fdef :=SelCreateBrick (_bdag ,_bga ,_bdag /2,_bga /2,SelHit );_cacc ,_aaef :=_ccdf (_faeb ,_abfd ,_fdef );if _aaef !=nil {return nil ,_c .Wrap (_aaef ,_bcdae ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cacc ,nil ;};_beee :=SelCreateBrick (1,_bga ,0,_bga /2,SelHit );_cbfe :=SelCreateBrick (_bdag ,1,_bdag /2,0,SelHit );_efee ,_dbd :=_ccdf (nil ,_abfd ,_beee );if _dbd !=nil {return nil ,_c .Wrap (_dbd ,_bcdae ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_faeb ,_dbd =_ccdf (_faeb ,_efee ,_cbfe );if _dbd !=nil {return nil ,_c .Wrap (_dbd ,_bcdae ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _faeb ,nil ;};func _egfa (_ebfe ,_cfeb *Bitmap ,_ebae ,_fdaf ,_fcce ,_gca ,_ecaa int ,_cdfe CombinationOperator )error {var _gdea int ;
_acefa :=func (){_gdea ++;_fcce +=_cfeb .RowStride ;_gca +=_ebfe .RowStride ;_ecaa +=_ebfe .RowStride };for _gdea =_ebae ;_gdea < _fdaf ;_acefa (){_gbge :=_fcce ;for _cabd :=_gca ;_cabd <=_ecaa ;_cabd ++{_cafa ,_edcf :=_cfeb .GetByte (_gbge );if _edcf !=nil {return _edcf ;
};_bccf ,_edcf :=_ebfe .GetByte (_cabd );if _edcf !=nil {return _edcf ;};if _edcf =_cfeb .SetByte (_gbge ,_bdgb (_cafa ,_bccf ,_cdfe ));_edcf !=nil {return _edcf ;};_gbge ++;};};return nil ;};func (_fddca *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_fbae *Boxes ,_cdg error ){const _bdec ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _fddca ==nil {return nil ,_c .Error (_bdec ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_fddca )==0{return _fddca ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_bdec ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_c .Errorf (_bdec ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_gcbf :=_fddca .makeSizeIndicator (width ,height ,tp ,relation );_bfge ,_cdg :=_fddca .selectWithIndicator (_gcbf );if _cdg !=nil {return nil ,_c .Wrap (_cdg ,_bdec ,"");};return _bfge ,nil ;};func _bfdb (_cfdf *Bitmap ,_gfaa *Bitmap ,_efga *Selection ,_deae **Bitmap )(*Bitmap ,error ){const _beaf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _gfaa ==nil {return nil ,_c .Error (_beaf ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _efga ==nil {return nil ,_c .Error (_beaf ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_egaea ,_aceg :=_efga .Height ,_efga .Width ;if _egaea ==0||_aceg ==0{return nil ,_c .Error (_beaf ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _cfdf ==nil {_cfdf =_gfaa .createTemplate ();
*_deae =_gfaa ;return _cfdf ,nil ;};_cfdf .Width =_gfaa .Width ;_cfdf .Height =_gfaa .Height ;_cfdf .RowStride =_gfaa .RowStride ;_cfdf .Color =_gfaa .Color ;_cfdf .Data =make ([]byte ,_gfaa .RowStride *_gfaa .Height );if _cfdf ==_gfaa {*_deae =_gfaa .Copy ();
}else {*_deae =_gfaa ;};return _cfdf ,nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_bdfd *Bitmaps )HeightSorter ()func (_fgbfc ,_bbba int )bool {return func (_bacae ,_fadc int )bool {_afgd :=_bdfd .Values [_bacae ].Height < _bdfd .Values [_fadc ].Height ;
_dc .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_bdfd .Values [_bacae ].Height ,_bdfd .Values [_fadc ].Height ,_afgd );return _afgd ;};};func (_cdc *Boxes )Get (i int )(*_a .Rectangle ,error ){const _fccb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _cdc ==nil {return nil ,_c .Error (_fccb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_cdc )-1{return nil ,_c .Errorf (_fccb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_cdc )[i ],nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
func _bcbc (_agda uint ,_abfb byte )byte {return _abfb >>_agda <<_agda };type SizeSelection int ;func _gabbg (_cfcd *Bitmap ,_cfdb ,_bfedd int ,_aeff ,_fgae int ,_affcc RasterOperator ){var (_gfcf bool ;_gcfb bool ;_cfbb int ;_gffb int ;_ggcf int ;_gfdb int ;
_bcfb bool ;_egba byte ;);_fdeg :=8-(_cfdb &7);_cdgf :=_efccd [_fdeg ];_ebfed :=_cfcd .RowStride *_bfedd +(_cfdb >>3);if _aeff < _fdeg {_gfcf =true ;_cdgf &=_ggdd [8-_fdeg +_aeff ];};if !_gfcf {_cfbb =(_aeff -_fdeg )>>3;if _cfbb !=0{_gcfb =true ;_gffb =_ebfed +1;
};};_ggcf =(_cfdb +_aeff )&7;if !(_gfcf ||_ggcf ==0){_bcfb =true ;_egba =_ggdd [_ggcf ];_gfdb =_ebfed +1+_cfbb ;};var _edafa ,_cdfcc int ;switch _affcc {case PixClr :for _edafa =0;_edafa < _fgae ;_edafa ++{_cfcd .Data [_ebfed ]=_fagc (_cfcd .Data [_ebfed ],0x0,_cdgf );
_ebfed +=_cfcd .RowStride ;};if _gcfb {for _edafa =0;_edafa < _fgae ;_edafa ++{for _cdfcc =0;_cdfcc < _cfbb ;_cdfcc ++{_cfcd .Data [_gffb +_cdfcc ]=0x0;};_gffb +=_cfcd .RowStride ;};};if _bcfb {for _edafa =0;_edafa < _fgae ;_edafa ++{_cfcd .Data [_gfdb ]=_fagc (_cfcd .Data [_gfdb ],0x0,_egba );
_gfdb +=_cfcd .RowStride ;};};case PixSet :for _edafa =0;_edafa < _fgae ;_edafa ++{_cfcd .Data [_ebfed ]=_fagc (_cfcd .Data [_ebfed ],0xff,_cdgf );_ebfed +=_cfcd .RowStride ;};if _gcfb {for _edafa =0;_edafa < _fgae ;_edafa ++{for _cdfcc =0;_cdfcc < _cfbb ;
_cdfcc ++{_cfcd .Data [_gffb +_cdfcc ]=0xff;};_gffb +=_cfcd .RowStride ;};};if _bcfb {for _edafa =0;_edafa < _fgae ;_edafa ++{_cfcd .Data [_gfdb ]=_fagc (_cfcd .Data [_gfdb ],0xff,_egba );_gfdb +=_cfcd .RowStride ;};};case PixNotDst :for _edafa =0;_edafa < _fgae ;
_edafa ++{_cfcd .Data [_ebfed ]=_fagc (_cfcd .Data [_ebfed ],^_cfcd .Data [_ebfed ],_cdgf );_ebfed +=_cfcd .RowStride ;};if _gcfb {for _edafa =0;_edafa < _fgae ;_edafa ++{for _cdfcc =0;_cdfcc < _cfbb ;_cdfcc ++{_cfcd .Data [_gffb +_cdfcc ]=^(_cfcd .Data [_gffb +_cdfcc ]);
};_gffb +=_cfcd .RowStride ;};};if _bcfb {for _edafa =0;_edafa < _fgae ;_edafa ++{_cfcd .Data [_gfdb ]=_fagc (_cfcd .Data [_gfdb ],^_cfcd .Data [_gfdb ],_egba );_gfdb +=_cfcd .RowStride ;};};};};func TstVSymbol (t *_ed .T ,scale ...int )*Bitmap {_cfbe ,_gggg :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});
_f .NoError (t ,_gggg );return TstGetScaledSymbol (t ,_cfbe ,scale ...);};func TstDSymbol (t *_ed .T ,scale ...int )*Bitmap {_fcgbd ,_agaf :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_f .NoError (t ,_agaf );return TstGetScaledSymbol (t ,_fcgbd ,scale ...);
};func (_dca CombinationOperator )String ()string {var _eab string ;switch _dca {case CmbOpOr :_eab ="\u004f\u0052";case CmbOpAnd :_eab ="\u0041\u004e\u0044";case CmbOpXor :_eab ="\u0058\u004f\u0052";case CmbOpXNor :_eab ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_eab ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_eab ="\u004e\u004f\u0054";};return _eab ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_a .Rectangle ;};var (_fdac *Bitmap ;_egfb *Bitmap ;);func (_agd *Bitmap )setPadBits (_gcef int ){_ebb :=8-_agd .Width %8;if _ebb ==8{return ;};_agga :=_agd .Width /8;
_acce :=_efccd [_ebb ];if _gcef ==0{_acce ^=_acce ;};var _ebbc int ;for _agf :=0;_agf < _agd .Height ;_agf ++{_ebbc =_agf *_agd .RowStride +_agga ;if _gcef ==0{_agd .Data [_ebbc ]&=_acce ;}else {_agd .Data [_ebbc ]|=_acce ;};};};func (_bcebc *Bitmaps )makeSizeIndicator (_daeae ,_aadcd int ,_dfbb LocationFilter ,_ddce SizeComparison )(_ggdbb *_b .NumSlice ,_gfcb error ){const _bfefg ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _bcebc ==nil {return nil ,_c .Error (_bfefg ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _dfbb {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_bfefg ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_dfbb );
};switch _ddce {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_c .Errorf (_bfefg ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_ddce );
};_ggdbb =&_b .NumSlice {};var (_babbb ,_cgaffd ,_aefaf int ;_dbafc *Bitmap ;);for _ ,_dbafc =range _bcebc .Values {_babbb =0;_cgaffd ,_aefaf =_dbafc .Width ,_dbafc .Height ;switch _dfbb {case LocSelectWidth :if (_ddce ==SizeSelectIfLT &&_cgaffd < _daeae )||(_ddce ==SizeSelectIfGT &&_cgaffd > _daeae )||(_ddce ==SizeSelectIfLTE &&_cgaffd <=_daeae )||(_ddce ==SizeSelectIfGTE &&_cgaffd >=_daeae )||(_ddce ==SizeSelectIfEQ &&_cgaffd ==_daeae ){_babbb =1;
};case LocSelectHeight :if (_ddce ==SizeSelectIfLT &&_aefaf < _aadcd )||(_ddce ==SizeSelectIfGT &&_aefaf > _aadcd )||(_ddce ==SizeSelectIfLTE &&_aefaf <=_aadcd )||(_ddce ==SizeSelectIfGTE &&_aefaf >=_aadcd )||(_ddce ==SizeSelectIfEQ &&_aefaf ==_aadcd ){_babbb =1;
};case LocSelectIfEither :if (_ddce ==SizeSelectIfLT &&(_cgaffd < _daeae ||_aefaf < _aadcd ))||(_ddce ==SizeSelectIfGT &&(_cgaffd > _daeae ||_aefaf > _aadcd ))||(_ddce ==SizeSelectIfLTE &&(_cgaffd <=_daeae ||_aefaf <=_aadcd ))||(_ddce ==SizeSelectIfGTE &&(_cgaffd >=_daeae ||_aefaf >=_aadcd ))||(_ddce ==SizeSelectIfEQ &&(_cgaffd ==_daeae ||_aefaf ==_aadcd )){_babbb =1;
};case LocSelectIfBoth :if (_ddce ==SizeSelectIfLT &&(_cgaffd < _daeae &&_aefaf < _aadcd ))||(_ddce ==SizeSelectIfGT &&(_cgaffd > _daeae &&_aefaf > _aadcd ))||(_ddce ==SizeSelectIfLTE &&(_cgaffd <=_daeae &&_aefaf <=_aadcd ))||(_ddce ==SizeSelectIfGTE &&(_cgaffd >=_daeae &&_aefaf >=_aadcd ))||(_ddce ==SizeSelectIfEQ &&(_cgaffd ==_daeae &&_aefaf ==_aadcd )){_babbb =1;
};};_ggdbb .AddInt (_babbb );};return _ggdbb ,nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;
LocSelectIfBoth ;);type Points []Point ;func TstISymbol (t *_ed .T ,scale ...int )*Bitmap {_fggc ,_gef :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_f .NoError (t ,_gef );return TstGetScaledSymbol (t ,_fggc ,scale ...);};func (_gcdc *ClassedPoints )YAtIndex (i int )float32 {return (*_gcdc .Points )[_gcdc .IntSlice [i ]].Y };
func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gbb float64 ,_fddf error ){const _dgae ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _gbb ,_c .Error (_dgae ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _gbb ,_c .Error (_dgae ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _gbb ,_c .Error (_dgae ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_deca ,_dgaaa :=bm1 .Width ,bm1 .Height ;_cbgfa ,_fagg :=bm2 .Width ,bm2 .Height ;
if _fdcg (_deca -_cbgfa )> maxDiffW {return 0,nil ;};if _fdcg (_dgaaa -_fagg )> maxDiffH {return 0,nil ;};var _ggdf ,_cbee int ;if delX >=0{_ggdf =int (delX +0.5);}else {_ggdf =int (delX -0.5);};if delY >=0{_cbee =int (delY +0.5);}else {_cbee =int (delY -0.5);
};_fabg :=bm1 .createTemplate ();if _fddf =_fabg .RasterOperation (_ggdf ,_cbee ,_cbgfa ,_fagg ,PixSrc ,bm2 ,0,0);_fddf !=nil {return _gbb ,_c .Wrap (_fddf ,_dgae ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _fddf =_fabg .RasterOperation (0,0,_deca ,_dgaaa ,PixSrcAndDst ,bm1 ,0,0);
_fddf !=nil {return _gbb ,_c .Wrap (_fddf ,_dgae ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_aegc :=_fabg .countPixels ();_gbb =float64 (_aegc )*float64 (_aegc )/(float64 (area1 )*float64 (area2 ));return _gbb ,nil ;};func (_ageae *BitmapsArray )GetBox (i int )(*_a .Rectangle ,error ){const _begcc ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _ageae ==nil {return nil ,_c .Error (_begcc ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_ageae .Boxes )-1{return nil ,_c .Errorf (_begcc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ageae .Boxes [i ],nil ;};func _cega (_ccfad ,_fbegd *Bitmap ,_bece *Selection )(*Bitmap ,error ){const _dcff ="\u006f\u0070\u0065\u006e";var _gfec error ;_ccfad ,_gfec =_begc (_ccfad ,_fbegd ,_bece );if _gfec !=nil {return nil ,_c .Wrap (_gfec ,_dcff ,"");
};_gfcg ,_gfec :=_ccdf (nil ,_fbegd ,_bece );if _gfec !=nil {return nil ,_c .Wrap (_gfec ,_dcff ,"");};_ ,_gfec =_gfce (_ccfad ,_gfcg ,_bece );if _gfec !=nil {return nil ,_c .Wrap (_gfec ,_dcff ,"");};return _ccfad ,nil ;};var MorphBC BoundaryCondition ;
func TstRSymbol (t *_ed .T ,scale ...int )*Bitmap {_egcg ,_egeab :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_f .NoError (t ,_egeab );return TstGetScaledSymbol (t ,_egcg ,scale ...);};func (_begf *Bitmap )setAll ()error {_acad :=_bgec (_begf ,0,0,_begf .Width ,_begf .Height ,PixSet ,nil ,0,0);
if _acad !=nil {return _c .Wrap (_acad ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func _adfa (_ddae ,_aacg ,_ddd *Bitmap )(*Bitmap ,error ){const _cbga ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _aacg ==nil {return nil ,_c .Error (_cbga ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _ddd ==nil {return nil ,_c .Error (_cbga ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ddae ==_ddd {return nil ,_c .Error (_cbga ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_aacg .SizesEqual (_ddd ){_dc .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_cbga );
};var _ddaea error ;if _ddae ,_ddaea =_dgbdf (_ddae ,_aacg );_ddaea !=nil {return nil ,_c .Wrap (_ddaea ,_cbga ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _ddaea =_ddae .RasterOperation (0,0,_ddae .Width ,_ddae .Height ,PixSrcXorDst ,_ddd ,0,0);
_ddaea !=nil {return nil ,_c .Wrap (_ddaea ,_cbga ,"");};return _ddae ,nil ;};func (_fbgd *BitmapsArray )AddBitmaps (bm *Bitmaps ){_fbgd .Values =append (_fbgd .Values ,bm )};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _gfed ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_cbaa ,_fbeg :=p1 .Width ,p1 .Height ;_ddbe ,_aaa :=p3 .Width ,p3 .Height ;if _b .Abs (_cbaa -_ddbe )> maxDiffW {return false ,nil ;};if _b .Abs (_fbeg -_aaa )> maxDiffH {return false ,nil ;};_fbcg :=int (delX +_b .Sign (delX )*0.5);_fbef :=int (delY +_b .Sign (delY )*0.5);
var _cgggf error ;_acbc :=p1 .CreateTemplate ();if _cgggf =_acbc .RasterOperation (0,0,_cbaa ,_fbeg ,PixSrc ,p1 ,0,0);_cgggf !=nil {return false ,_c .Wrap (_cgggf ,_gfed ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _cgggf =_acbc .RasterOperation (_fbcg ,_fbef ,_cbaa ,_fbeg ,PixNotSrcAndDst ,p4 ,0,0);
_cgggf !=nil {return false ,_c .Wrap (_cgggf ,_gfed ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _acbc .Zero (){return false ,nil ;};if _cgggf =_acbc .RasterOperation (_fbcg ,_fbef ,_ddbe ,_aaa ,PixSrc ,p3 ,0,0);_cgggf !=nil {return false ,_c .Wrap (_cgggf ,_gfed ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _cgggf =_acbc .RasterOperation (0,0,_ddbe ,_aaa ,PixNotSrcAndDst ,p2 ,0,0);_cgggf !=nil {return false ,_c .Wrap (_cgggf ,_gfed ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _acbc .Zero (),nil ;};func (_caf *Bitmap )setFourBytes (_febb int ,_fbff uint32 )error {if _febb +3> len (_caf .Data )-1{return _c .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_febb );
};_caf .Data [_febb ]=byte ((_fbff &0xff000000)>>24);_caf .Data [_febb +1]=byte ((_fbff &0xff0000)>>16);_caf .Data [_febb +2]=byte ((_fbff &0xff00)>>8);_caf .Data [_febb +3]=byte (_fbff &0xff);return nil ;};func (_gebd MorphProcess )getWidthHeight ()(_ageg ,_eefg int ){return _gebd .Arguments [0],_gebd .Arguments [1];
};func _bdgb (_acf ,_cafe byte ,_fdbg CombinationOperator )byte {switch _fdbg {case CmbOpOr :return _cafe |_acf ;case CmbOpAnd :return _cafe &_acf ;case CmbOpXor :return _cafe ^_acf ;case CmbOpXNor :return ^(_cafe ^_acf );case CmbOpNot :return ^(_cafe );
default:return _cafe ;};};func _gebe (_bfagg *Bitmap ,_dfdf ,_ffbca ,_gfebe ,_aabg int ,_daeed RasterOperator ,_aaafd *Bitmap ,_cbbc ,_gabd int )error {var (_efba byte ;_efbc int ;_bgdc int ;_egge ,_gfbg int ;_cafb ,_bded int ;);_ceeg :=_gfebe >>3;_cgacc :=_gfebe &7;
if _cgacc > 0{_efba =_ggdd [_cgacc ];};_efbc =_aaafd .RowStride *_gabd +(_cbbc >>3);_bgdc =_bfagg .RowStride *_ffbca +(_dfdf >>3);switch _daeed {case PixSrc :for _cafb =0;_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;
for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]=_aaafd .Data [_egge ];_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],_aaafd .Data [_egge ],_efba );};};case PixNotSrc :for _cafb =0;_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;
_gfbg =_bgdc +_cafb *_bfagg .RowStride ;for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]=^(_aaafd .Data [_egge ]);_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],^_aaafd .Data [_egge ],_efba );};};case PixSrcOrDst :for _cafb =0;
_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]|=_aaafd .Data [_egge ];_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],_aaafd .Data [_egge ]|_bfagg .Data [_gfbg ],_efba );
};};case PixSrcAndDst :for _cafb =0;_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]&=_aaafd .Data [_egge ];_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],_aaafd .Data [_egge ]&_bfagg .Data [_gfbg ],_efba );
};};case PixSrcXorDst :for _cafb =0;_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]^=_aaafd .Data [_egge ];_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],_aaafd .Data [_egge ]^_bfagg .Data [_gfbg ],_efba );
};};case PixNotSrcOrDst :for _cafb =0;_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]|=^(_aaafd .Data [_egge ]);_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],^(_aaafd .Data [_egge ])|_bfagg .Data [_gfbg ],_efba );
};};case PixNotSrcAndDst :for _cafb =0;_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]&=^(_aaafd .Data [_egge ]);_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],^(_aaafd .Data [_egge ])&_bfagg .Data [_gfbg ],_efba );
};};case PixSrcOrNotDst :for _cafb =0;_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]=_aaafd .Data [_egge ]|^(_bfagg .Data [_gfbg ]);_gfbg ++;
_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],_aaafd .Data [_egge ]|^(_bfagg .Data [_gfbg ]),_efba );};};case PixSrcAndNotDst :for _cafb =0;_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;
for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]=_aaafd .Data [_egge ]&^(_bfagg .Data [_gfbg ]);_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],_aaafd .Data [_egge ]&^(_bfagg .Data [_gfbg ]),_efba );};};case PixNotPixSrcOrDst :for _cafb =0;
_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]=^(_aaafd .Data [_egge ]|_bfagg .Data [_gfbg ]);_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],^(_aaafd .Data [_egge ]|_bfagg .Data [_gfbg ]),_efba );
};};case PixNotPixSrcAndDst :for _cafb =0;_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]=^(_aaafd .Data [_egge ]&_bfagg .Data [_gfbg ]);
_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],^(_aaafd .Data [_egge ]&_bfagg .Data [_gfbg ]),_efba );};};case PixNotPixSrcXorDst :for _cafb =0;_cafb < _aabg ;_cafb ++{_egge =_efbc +_cafb *_aaafd .RowStride ;_gfbg =_bgdc +_cafb *_bfagg .RowStride ;
for _bded =0;_bded < _ceeg ;_bded ++{_bfagg .Data [_gfbg ]=^(_aaafd .Data [_egge ]^_bfagg .Data [_gfbg ]);_gfbg ++;_egge ++;};if _cgacc > 0{_bfagg .Data [_gfbg ]=_fagc (_bfagg .Data [_gfbg ],^(_aaafd .Data [_egge ]^_bfagg .Data [_gfbg ]),_efba );};};default:_dc .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_daeed );
return _c .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func MakePixelCentroidTab8 ()[]int {return _dfec ()};func ClipBoxToRectangle (box *_a .Rectangle ,wi ,hi int )(_agad *_a .Rectangle ,_aef error ){const _ggfa ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_c .Error (_ggfa ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_c .Error (_ggfa ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_gdfg :=*box ;_agad =&_gdfg ;if _agad .Min .X < 0{_agad .Max .X +=_agad .Min .X ;_agad .Min .X =0;};if _agad .Min .Y < 0{_agad .Max .Y +=_agad .Min .Y ;_agad .Min .Y =0;};if _agad .Max .X > wi {_agad .Max .X =wi ;};if _agad .Max .Y > hi {_agad .Max .Y =hi ;
};return _agad ,nil ;};func _bbce (_bfdc ,_gabb *Bitmap ,_daea ,_agbfc int )(*Bitmap ,error ){const _gfgc ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _gabb ==nil {_dc .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_c .Error (_gfgc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _daea < 1||_agbfc < 1{return nil ,_c .Error (_gfgc ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _daea ==1&&_agbfc ==1{_ebdg ,_dffd :=_dgbdf (_bfdc ,_gabb );if _dffd !=nil {return nil ,_c .Wrap (_dffd ,_gfgc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ebdg ,nil ;};if _daea ==1||_agbfc ==1{_ddaed :=SelCreateBrick (_agbfc ,_daea ,_agbfc /2,_daea /2,SelHit );_dead ,_gbfa :=_gfce (_bfdc ,_gabb ,_ddaed );if _gbfa !=nil {return nil ,_c .Wrap (_gbfa ,_gfgc ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dead ,nil ;};_cfeg :=SelCreateBrick (1,_daea ,0,_daea /2,SelHit );_fegc :=SelCreateBrick (_agbfc ,1,_agbfc /2,0,SelHit );_bfffg ,_bgbe :=_gfce (nil ,_gabb ,_cfeg );if _bgbe !=nil {return nil ,_c .Wrap (_bgbe ,_gfgc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_bfdc ,_bgbe =_gfce (_bfdc ,_bfffg ,_fegc );if _bgbe !=nil {return nil ,_c .Wrap (_bgbe ,_gfgc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _bfdc ,nil ;};func (_gbaf *Bitmap )And (s *Bitmap )(_bgf *Bitmap ,_fgg error ){const _aec ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _gbaf ==nil {return nil ,_c .Error (_aec ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_c .Error (_aec ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_gbaf .SizesEqual (s ){_dc .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_aec );
};if _bgf ,_fgg =_dgbdf (_bgf ,_gbaf );_fgg !=nil {return nil ,_c .Wrap (_fgg ,_aec ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fgg =_bgf .RasterOperation (0,0,_bgf .Width ,_bgf .Height ,PixSrcAndDst ,s ,0,0);
_fgg !=nil {return nil ,_c .Wrap (_fgg ,_aec ,"");};return _bgf ,nil ;};func (_gabc *Points )AddPoint (x ,y float32 ){*_gabc =append (*_gabc ,Point {x ,y })};func _gfce (_fdfa *Bitmap ,_agef *Bitmap ,_fbcd *Selection )(*Bitmap ,error ){var (_eecc *Bitmap ;
_fceda error ;);_fdfa ,_fceda =_bfdb (_fdfa ,_agef ,_fbcd ,&_eecc );if _fceda !=nil {return nil ,_fceda ;};if _fceda =_fdfa .clearAll ();_fceda !=nil {return nil ,_fceda ;};var _efaf SelectionValue ;for _dbga :=0;_dbga < _fbcd .Height ;_dbga ++{for _ccge :=0;
_ccge < _fbcd .Width ;_ccge ++{_efaf =_fbcd .Data [_dbga ][_ccge ];if _efaf ==SelHit {if _fceda =_fdfa .RasterOperation (_ccge -_fbcd .Cx ,_dbga -_fbcd .Cy ,_agef .Width ,_agef .Height ,PixSrcOrDst ,_eecc ,0,0);_fceda !=nil {return nil ,_fceda ;};};};};
return _fdfa ,nil ;};func (_gfcc *BitmapsArray )AddBox (box *_a .Rectangle ){_gfcc .Boxes =append (_gfcc .Boxes ,box )};func _abdcb (_cbfdg ,_dfde *Bitmap ,_efeed ,_bdbf int )(*Bitmap ,error ){const _daadb ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _dfde ==nil {return nil ,_c .Error (_daadb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _efeed < 1&&_bdbf < 1{return nil ,_c .Error (_daadb ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _efeed ==1&&_bdbf ==1{return _dfde .Copy (),nil ;};if _efeed ==1||_bdbf ==1{var _bbcb error ;_fgga :=SelCreateBrick (_bdbf ,_efeed ,_bdbf /2,_efeed /2,SelHit );_cbfdg ,_bbcb =_cega (_cbfdg ,_dfde ,_fgga );if _bbcb !=nil {return nil ,_c .Wrap (_bbcb ,_daadb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cbfdg ,nil ;};_bbdg :=SelCreateBrick (1,_efeed ,0,_efeed /2,SelHit );_gbad :=SelCreateBrick (_bdbf ,1,_bdbf /2,0,SelHit );_aaad ,_cfda :=_ccdf (nil ,_dfde ,_bbdg );if _cfda !=nil {return nil ,_c .Wrap (_cfda ,_daadb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_cbfdg ,_cfda =_ccdf (_cbfdg ,_aaad ,_gbad );if _cfda !=nil {return nil ,_c .Wrap (_cfda ,_daadb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_cfda =_gfce (_aaad ,_cbfdg ,_bbdg );if _cfda !=nil {return nil ,_c .Wrap (_cfda ,_daadb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_cfda =_gfce (_cbfdg ,_aaad ,_gbad );if _cfda !=nil {return nil ,_c .Wrap (_cfda ,_daadb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _cbfdg ,nil ;};func (_daaa *ClassedPoints )validateIntSlice ()error {const _gfaef ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_efgbd :=range _daaa .IntSlice {if _efgbd >=(_daaa .Points .Size ()){return _c .Errorf (_gfaef ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_efgbd ,_daaa .Points .Size ());
};};return nil ;};func (_gcga *Bitmap )GetChocolateData ()[]byte {if _gcga .Color ==Vanilla {_gcga .inverseData ();};return _gcga .Data ;};func (_fedb *Bitmap )equivalent (_eced *Bitmap )bool {if _fedb ==_eced {return true ;};if !_fedb .SizesEqual (_eced ){return false ;
};_cabfg :=_gdab (_fedb ,_eced ,CmbOpXor );_cbec :=_fedb .countPixels ();_ggce :=int (0.25*float32 (_cbec ));if _cabfg .thresholdPixelSum (_ggce ){return false ;};var (_gdd [9][9]int ;_ffdce [18][9]int ;_acd [9][18]int ;_fff int ;_eega int ;);_gbfb :=9;
_bagg :=_fedb .Height /_gbfb ;_fgdb :=_fedb .Width /_gbfb ;_cbd ,_dcce :=_bagg /2,_fgdb /2;if _bagg < _fgdb {_cbd =_fgdb /2;_dcce =_bagg /2;};_ceb :=float64 (_cbd )*float64 (_dcce )*_d .Pi ;_gcda :=int (float64 (_bagg *_fgdb /2)*0.9);_aadg :=int (float64 (_fgdb *_bagg /2)*0.9);
for _bbc :=0;_bbc < _gbfb ;_bbc ++{_ggeg :=_fgdb *_bbc +_fff ;var _bada int ;if _bbc ==_gbfb -1{_fff =0;_bada =_fedb .Width ;}else {_bada =_ggeg +_fgdb ;if ((_fedb .Width -_fff )%_gbfb )> 0{_fff ++;_bada ++;};};for _beg :=0;_beg < _gbfb ;_beg ++{_fada :=_bagg *_beg +_eega ;
var _deeb int ;if _beg ==_gbfb -1{_eega =0;_deeb =_fedb .Height ;}else {_deeb =_fada +_bagg ;if (_fedb .Height -_eega )%_gbfb > 0{_eega ++;_deeb ++;};};var _cgdc ,_fbaf ,_ddg ,_ceae int ;_bcbf :=(_ggeg +_bada )/2;_add :=(_fada +_deeb )/2;for _fgcg :=_ggeg ;
_fgcg < _bada ;_fgcg ++{for _bbae :=_fada ;_bbae < _deeb ;_bbae ++{if _cabfg .GetPixel (_fgcg ,_bbae ){if _fgcg < _bcbf {_cgdc ++;}else {_fbaf ++;};if _bbae < _add {_ceae ++;}else {_ddg ++;};};};};_gdd [_bbc ][_beg ]=_cgdc +_fbaf ;_ffdce [_bbc *2][_beg ]=_cgdc ;
_ffdce [_bbc *2+1][_beg ]=_fbaf ;_acd [_bbc ][_beg *2]=_ceae ;_acd [_bbc ][_beg *2+1]=_ddg ;};};for _gaa :=0;_gaa < _gbfb *2-1;_gaa ++{for _caca :=0;_caca < (_gbfb -1);_caca ++{var _dgb int ;for _adbc :=0;_adbc < 2;_adbc ++{for _fge :=0;_fge < 2;_fge ++{_dgb +=_ffdce [_gaa +_adbc ][_caca +_fge ];
};};if _dgb > _aadg {return false ;};};};for _dfba :=0;_dfba < (_gbfb -1);_dfba ++{for _efef :=0;_efef < ((_gbfb *2)-1);_efef ++{var _bfef int ;for _fce :=0;_fce < 2;_fce ++{for _bdae :=0;_bdae < 2;_bdae ++{_bfef +=_acd [_dfba +_fce ][_efef +_bdae ];};
};if _bfef > _gcda {return false ;};};};for _febc :=0;_febc < (_gbfb -2);_febc ++{for _fege :=0;_fege < (_gbfb -2);_fege ++{var _ded ,_gbef int ;for _ebc :=0;_ebc < 3;_ebc ++{for _gdfe :=0;_gdfe < 3;_gdfe ++{if _ebc ==_gdfe {_ded +=_gdd [_febc +_ebc ][_fege +_gdfe ];
};if (2-_ebc )==_gdfe {_gbef +=_gdd [_febc +_ebc ][_fege +_gdfe ];};};};if _ded > _aadg ||_gbef > _aadg {return false ;};};};for _dgaa :=0;_dgaa < (_gbfb -1);_dgaa ++{for _cdddd :=0;_cdddd < (_gbfb -1);_cdddd ++{var _bfec int ;for _bbga :=0;_bbga < 2;_bbga ++{for _edea :=0;
_edea < 2;_edea ++{_bfec +=_gdd [_dgaa +_bbga ][_cdddd +_edea ];};};if float64 (_bfec )> _ceb {return false ;};};};return true ;};func _cdgb (_fdff *Bitmap ,_febgg *Bitmap ,_ecdca int )(_bffa error ){const _dbc ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_dcbc :=_aagb (_fdff .Height ,_febgg .Height );_bbaa :=_aagb (_fdff .RowStride ,_febgg .RowStride );switch _ecdca {case 4:_bffa =_ecce (_fdff ,_febgg ,_dcbc ,_bbaa );case 8:_bffa =_gbfac (_fdff ,_febgg ,_dcbc ,_bbaa );default:return _c .Errorf (_dbc ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_ecdca );
};if _bffa !=nil {return _c .Wrap (_bffa ,_dbc ,"");};return nil ;};func _bade (_ceec *Bitmap ,_cbbb ,_fbgfd int ,_eadb ,_gdbe int ,_deaed RasterOperator ){var (_efea int ;_cbbf byte ;_eedac ,_dbaf int ;_bbgg int ;);_agcaf :=_eadb >>3;_bcg :=_eadb &7;if _bcg > 0{_cbbf =_ggdd [_bcg ];
};_efea =_ceec .RowStride *_fbgfd +(_cbbb >>3);switch _deaed {case PixClr :for _eedac =0;_eedac < _gdbe ;_eedac ++{_bbgg =_efea +_eedac *_ceec .RowStride ;for _dbaf =0;_dbaf < _agcaf ;_dbaf ++{_ceec .Data [_bbgg ]=0x0;_bbgg ++;};if _bcg > 0{_ceec .Data [_bbgg ]=_fagc (_ceec .Data [_bbgg ],0x0,_cbbf );
};};case PixSet :for _eedac =0;_eedac < _gdbe ;_eedac ++{_bbgg =_efea +_eedac *_ceec .RowStride ;for _dbaf =0;_dbaf < _agcaf ;_dbaf ++{_ceec .Data [_bbgg ]=0xff;_bbgg ++;};if _bcg > 0{_ceec .Data [_bbgg ]=_fagc (_ceec .Data [_bbgg ],0xff,_cbbf );};};case PixNotDst :for _eedac =0;
_eedac < _gdbe ;_eedac ++{_bbgg =_efea +_eedac *_ceec .RowStride ;for _dbaf =0;_dbaf < _agcaf ;_dbaf ++{_ceec .Data [_bbgg ]=^_ceec .Data [_bbgg ];_bbgg ++;};if _bcg > 0{_ceec .Data [_bbgg ]=_fagc (_ceec .Data [_bbgg ],^_ceec .Data [_bbgg ],_cbbf );};};
};};func (_adgf *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_gecc *Bitmaps ,_cacd *Boxes ,_fedd error ){const _fabb ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _adgf ==nil {return nil ,nil ,_c .Error (_fabb ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");
};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_c .Error (_fabb ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _adgf .Zero (){_cacd =&Boxes {};_gecc =&Bitmaps {};return _gecc ,_cacd ,nil ;};switch components {case ComponentConn :_gecc =&Bitmaps {};if _cacd ,_fedd =_adgf .ConnComponents (_gecc ,8);_fedd !=nil {return nil ,nil ,_c .Wrap (_fedd ,_fabb ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_dfgf ,_gfeb :=MorphSequence (_adgf ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _gfeb !=nil {return nil ,nil ,_c .Wrap (_gfeb ,_fabb ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _dc .Log .IsLogLevel (_dc .LogLevelTrace ){_dc .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_dfgf .String ());
};_ggg :=&Bitmaps {};_cacd ,_gfeb =_dfgf .ConnComponents (_ggg ,8);if _gfeb !=nil {return nil ,nil ,_c .Wrap (_gfeb ,_fabb ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _dc .Log .IsLogLevel (_dc .LogLevelTrace ){_dc .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_ggg .String ());
};if _gecc ,_gfeb =_ggg .ClipToBitmap (_adgf );_gfeb !=nil {return nil ,nil ,_c .Wrap (_gfeb ,_fabb ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_fcgf :=1;
var _gdb *Bitmap ;switch {case _adgf .XResolution <=200:_gdb =_adgf ;case _adgf .XResolution <=400:_fcgf =2;_gdb ,_fedd =_ddb (_adgf ,1,0,0,0);if _fedd !=nil {return nil ,nil ,_c .Wrap (_fedd ,_fabb ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_fcgf =4;_gdb ,_fedd =_ddb (_adgf ,1,1,0,0);if _fedd !=nil {return nil ,nil ,_c .Wrap (_fedd ,_fabb ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_ecbb ,_ ,_aafe :=_caagc (_gdb );if _aafe !=nil {return nil ,nil ,_c .Wrap (_aafe ,_fabb ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_gecg ,_aafe :=_babb (_ecbb ,_fcgf );if _aafe !=nil {return nil ,nil ,_c .Wrap (_aafe ,_fabb ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_egg :=&Bitmaps {};if _cacd ,_aafe =_gecg .ConnComponents (_egg ,4);_aafe !=nil {return nil ,nil ,_c .Wrap (_aafe ,_fabb ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _gecc ,_aafe =_egg .ClipToBitmap (_adgf );_aafe !=nil {return nil ,nil ,_c .Wrap (_aafe ,_fabb ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_gecc ,_fedd =_gecc .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _fedd !=nil {return nil ,nil ,_c .Wrap (_fedd ,_fabb ,"");};_cacd ,_fedd =_cacd .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _fedd !=nil {return nil ,nil ,_c .Wrap (_fedd ,_fabb ,"");};return _gecc ,_cacd ,nil ;};var _ebcc =[5]int {1,2,3,0,4};
const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);type Getter interface{GetBitmap ()*Bitmap ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _bdgb (oldByte ,newByte ,op );
};func (_bgff Points )GetIntY (i int )(int ,error ){if i >=len (_bgff ){return 0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_bgff [i ].Y ),nil ;};func (_bgc *Bitmap )SizesEqual (s *Bitmap )bool {if _bgc ==s {return true ;};if _bgc .Width !=s .Width ||_bgc .Height !=s .Height {return false ;};return true ;};func _dabf (_bbb ,_abcg *Bitmap ,_cgaf ,_bfce ,_gbc uint ,_egd ,_ddfdf int ,_gdaac bool ,_cgbfe ,_acec int )error {for _gebfb :=_egd ;
_gebfb < _ddfdf ;_gebfb ++{if _cgbfe +1< len (_bbb .Data ){_cbge :=_gebfb +1==_ddfdf ;_eeba ,_caag :=_bbb .GetByte (_cgbfe );if _caag !=nil {return _caag ;};_cgbfe ++;_eeba <<=_cgaf ;_ebd ,_caag :=_bbb .GetByte (_cgbfe );if _caag !=nil {return _caag ;};
_ebd >>=_bfce ;_abgg :=_eeba |_ebd ;if _cbge &&!_gdaac {_abgg =_bcbc (_gbc ,_abgg );};_caag =_abcg .SetByte (_acec ,_abgg );if _caag !=nil {return _caag ;};_acec ++;if _cbge &&_gdaac {_gded ,_aefa :=_bbb .GetByte (_cgbfe );if _aefa !=nil {return _aefa ;
};_gded <<=_cgaf ;_abgg =_bcbc (_gbc ,_gded );if _aefa =_abcg .SetByte (_acec ,_abgg );_aefa !=nil {return _aefa ;};};continue ;};_abdca ,_ggfc :=_bbb .GetByte (_cgbfe );if _ggfc !=nil {_dc .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_cgbfe ,_ggfc );
return _ggfc ;};_abdca <<=_cgaf ;_cgbfe ++;_ggfc =_abcg .SetByte (_acec ,_abdca );if _ggfc !=nil {return _ggfc ;};_acec ++;};return nil ;};func _gde (_becf ,_bee *Bitmap )(_gag error ){const _dfc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_ffd :=_bee .RowStride ;_cdf :=_becf .RowStride ;var _becd ,_efec ,_eeg ,_aac ,_gb int ;for _eeg =0;_eeg < _bee .Height ;_eeg ++{_becd =_eeg *_ffd ;_efec =8*_eeg *_cdf ;for _aac =0;_aac < _ffd ;_aac ++{if _gag =_becf .setEightBytes (_efec +_aac *8,_cbdd [_bee .Data [_becd +_aac ]]);
_gag !=nil {return _c .Wrap (_gag ,_dfc ,"");};};for _gb =1;_gb < 8;_gb ++{for _aac =0;_aac < _cdf ;_aac ++{if _gag =_becf .SetByte (_efec +_gb *_cdf +_aac ,_becf .Data [_efec +_aac ]);_gag !=nil {return _c .Wrap (_gag ,_dfc ,"");};};};};return nil ;};
func (_cbgf *Bitmap )setEightFullBytes (_bcd int ,_gabg uint64 )error {if _bcd +7> len (_cbgf .Data )-1{return _c .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cbgf .Data [_bcd ]=byte ((_gabg &0xff00000000000000)>>56);_cbgf .Data [_bcd +1]=byte ((_gabg &0xff000000000000)>>48);_cbgf .Data [_bcd +2]=byte ((_gabg &0xff0000000000)>>40);_cbgf .Data [_bcd +3]=byte ((_gabg &0xff00000000)>>32);_cbgf .Data [_bcd +4]=byte ((_gabg &0xff000000)>>24);
_cbgf .Data [_bcd +5]=byte ((_gabg &0xff0000)>>16);_cbgf .Data [_bcd +6]=byte ((_gabg &0xff00)>>8);_cbgf .Data [_bcd +7]=byte (_gabg &0xff);return nil ;};func TstFrameBitmap ()*Bitmap {return _fdac .Copy ()};func _fcc (_adg *Bitmap ,_ecdc int ,_bc []byte )(_cf *Bitmap ,_eb error ){const _cdd ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _adg ==nil {return nil ,_c .Error (_cdd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ecdc < 1||_ecdc > 4{return nil ,_c .Error (_cdd ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _adg .Height <=1{return nil ,_c .Errorf (_cdd ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_adg .Height );
};_cf =New (_adg .Width /2,_adg .Height /2);if _bc ==nil {_bc =_gcde ();};_bff :=_aagb (_adg .RowStride ,2*_cf .RowStride );switch _ecdc {case 1:_eb =_adf (_adg ,_cf ,_ecdc ,_bc ,_bff );case 2:_eb =_bcc (_adg ,_cf ,_ecdc ,_bc ,_bff );case 3:_eb =_gab (_adg ,_cf ,_ecdc ,_bc ,_bff );
case 4:_eb =_ecc (_adg ,_cf ,_ecdc ,_bc ,_bff );};if _eb !=nil {return nil ,_eb ;};return _cf ,nil ;};func (_dfe *Bitmap )Equals (s *Bitmap )bool {if len (_dfe .Data )!=len (s .Data )||_dfe .Width !=s .Width ||_dfe .Height !=s .Height {return false ;};
for _deb :=0;_deb < _dfe .Height ;_deb ++{_gcgc :=_deb *_dfe .RowStride ;for _edc :=0;_edc < _dfe .RowStride ;_edc ++{if _dfe .Data [_gcgc +_edc ]!=s .Data [_gcgc +_edc ]{return false ;};};};return true ;};func (_ggff *Bitmap )clipRectangle (_dee ,_geb *_a .Rectangle )(_cfff *Bitmap ,_bage error ){const _fdga ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _dee ==nil {return nil ,_c .Error (_fdga ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_fdgd ,_fbf :=_ggff .Width ,_ggff .Height ;_gbda ,_bage :=ClipBoxToRectangle (_dee ,_fdgd ,_fbf );if _bage !=nil {_dc .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_bage );
return nil ,nil ;};_fcfea ,_cce :=_gbda .Min .X ,_gbda .Min .Y ;_bgbg ,_cba :=_gbda .Max .X -_gbda .Min .X ,_gbda .Max .Y -_gbda .Min .Y ;_cfff =New (_bgbg ,_cba );_cfff .Text =_ggff .Text ;if _bage =_cfff .RasterOperation (0,0,_bgbg ,_cba ,PixSrc ,_ggff ,_fcfea ,_cce );
_bage !=nil {return nil ,_c .Wrap (_bage ,_fdga ,"");};if _geb !=nil {*_geb =*_gbda ;};return _cfff ,nil ;};func (_ggc *Bitmap )GetVanillaData ()[]byte {if _ggc .Color ==Chocolate {_ggc .inverseData ();};return _ggc .Data ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _degg (src ,sequence ...);
};func (_eggef *byWidth )Swap (i ,j int ){_eggef .Values [i ],_eggef .Values [j ]=_eggef .Values [j ],_eggef .Values [i ];if _eggef .Boxes !=nil {_eggef .Boxes [i ],_eggef .Boxes [j ]=_eggef .Boxes [j ],_eggef .Boxes [i ];};};func _gdba (_dgd ,_agfb *Bitmap ,_deag ,_bbca int )(*Bitmap ,error ){const _abcc ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _agfb ==nil {return nil ,_c .Error (_abcc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _deag < 1||_bbca < 1{return nil ,_c .Error (_abcc ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _deag ==1&&_bbca ==1{return _agfb .Copy (),nil ;};if _deag ==1||_bbca ==1{_gddf :=SelCreateBrick (_bbca ,_deag ,_bbca /2,_deag /2,SelHit );var _cda error ;_dgd ,_cda =_eefa (_dgd ,_agfb ,_gddf );if _cda !=nil {return nil ,_c .Wrap (_cda ,_abcc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dgd ,nil ;};_dgee :=SelCreateBrick (1,_deag ,0,_deag /2,SelHit );_gbgd :=SelCreateBrick (_bbca ,1,_bbca /2,0,SelHit );_cbdf ,_ggcbc :=_gfce (nil ,_agfb ,_dgee );if _ggcbc !=nil {return nil ,_c .Wrap (_ggcbc ,_abcc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _dgd ,_ggcbc =_gfce (_dgd ,_cbdf ,_gbgd );_ggcbc !=nil {return nil ,_c .Wrap (_ggcbc ,_abcc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_ggcbc =_ccdf (_cbdf ,_dgd ,_dgee );_ggcbc !=nil {return nil ,_c .Wrap (_ggcbc ,_abcc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_ggcbc =_ccdf (_dgd ,_cbdf ,_gbgd );_ggcbc !=nil {return nil ,_c .Wrap (_ggcbc ,_abcc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _dgd ,nil ;};func TstImageBitmap ()*Bitmap {return _egfb .Copy ()};func MakePixelSumTab8 ()[]int {return _fagb ()};
func TstPSymbol (t *_ed .T )*Bitmap {t .Helper ();_gdabg :=New (5,8);_f .NoError (t ,_gdabg .SetPixel (0,0,1));_f .NoError (t ,_gdabg .SetPixel (1,0,1));_f .NoError (t ,_gdabg .SetPixel (2,0,1));_f .NoError (t ,_gdabg .SetPixel (3,0,1));_f .NoError (t ,_gdabg .SetPixel (4,1,1));
_f .NoError (t ,_gdabg .SetPixel (0,1,1));_f .NoError (t ,_gdabg .SetPixel (4,2,1));_f .NoError (t ,_gdabg .SetPixel (0,2,1));_f .NoError (t ,_gdabg .SetPixel (4,3,1));_f .NoError (t ,_gdabg .SetPixel (0,3,1));_f .NoError (t ,_gdabg .SetPixel (0,4,1));
_f .NoError (t ,_gdabg .SetPixel (1,4,1));_f .NoError (t ,_gdabg .SetPixel (2,4,1));_f .NoError (t ,_gdabg .SetPixel (3,4,1));_f .NoError (t ,_gdabg .SetPixel (0,5,1));_f .NoError (t ,_gdabg .SetPixel (0,6,1));_f .NoError (t ,_gdabg .SetPixel (0,7,1));
return _gdabg ;};func (_ebde *Bitmap )connComponentsBB (_cffd int )(_egfe *Boxes ,_dgag error ){const _ddbg ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _cffd !=4&&_cffd !=8{return nil ,_c .Error (_ddbg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _ebde .Zero (){return &Boxes {},nil ;};_ebde .setPadBits (0);_cfcf ,_dgag :=_dgbdf (nil ,_ebde );if _dgag !=nil {return nil ,_c .Wrap (_dgag ,_ddbg ,"\u0062\u006d\u0031");};_gdad :=&_b .Stack {};_gdad .Aux =&_b .Stack {};_egfe =&Boxes {};var (_cdea ,_fef int ;
_bfb _a .Point ;_bbee bool ;_daae *_a .Rectangle ;);for {if _bfb ,_bbee ,_dgag =_cfcf .nextOnPixel (_fef ,_cdea );_dgag !=nil {return nil ,_c .Wrap (_dgag ,_ddbg ,"");};if !_bbee {break ;};if _daae ,_dgag =_fcgdf (_cfcf ,_gdad ,_bfb .X ,_bfb .Y ,_cffd );
_dgag !=nil {return nil ,_c .Wrap (_dgag ,_ddbg ,"");};if _dgag =_egfe .Add (_daae );_dgag !=nil {return nil ,_c .Wrap (_dgag ,_ddbg ,"");};_fef =_bfb .X ;_cdea =_bfb .Y ;};return _egfe ,nil ;};func _dfbea (_gdgc *Bitmap ,_dbbfg *_b .Stack ,_ebbd ,_fedef int )(_dfbd *_a .Rectangle ,_abba error ){const _ccbf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _gdgc ==nil {return nil ,_c .Error (_ccbf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dbbfg ==nil {return nil ,_c .Error (_ccbf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_ebfc ,_bfdg :=_gdgc .Width ,_gdgc .Height ;_begd :=_ebfc -1;_fbdge :=_bfdg -1;if _ebbd < 0||_ebbd > _begd ||_fedef < 0||_fedef > _fbdge ||!_gdgc .GetPixel (_ebbd ,_fedef ){return nil ,nil ;};var _bfbd *_a .Rectangle ;_bfbd ,_abba =Rect (100000,100000,0,0);
if _abba !=nil {return nil ,_c .Wrap (_abba ,_ccbf ,"");};if _abba =_edcc (_dbbfg ,_ebbd ,_ebbd ,_fedef ,1,_fbdge ,_bfbd );_abba !=nil {return nil ,_c .Wrap (_abba ,_ccbf ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _abba =_edcc (_dbbfg ,_ebbd ,_ebbd ,_fedef +1,-1,_fbdge ,_bfbd );
_abba !=nil {return nil ,_c .Wrap (_abba ,_ccbf ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_bfbd .Min .X ,_bfbd .Max .X =_ebbd ,_ebbd ;_bfbd .Min .Y ,_bfbd .Max .Y =_fedef ,_fedef ;var (_defa *fillSegment ;
_defc int ;);for _dbbfg .Len ()> 0{if _defa ,_abba =_ddcd (_dbbfg );_abba !=nil {return nil ,_c .Wrap (_abba ,_ccbf ,"");};_fedef =_defa ._aceff ;for _ebbd =_defa ._gbebe ;_ebbd >=0&&_gdgc .GetPixel (_ebbd ,_fedef );_ebbd --{if _abba =_gdgc .SetPixel (_ebbd ,_fedef ,0);
_abba !=nil {return nil ,_c .Wrap (_abba ,_ccbf ,"");};};if _ebbd >=_defa ._gbebe {for _ebbd ++;_ebbd <=_defa ._cagd &&_ebbd <=_begd &&!_gdgc .GetPixel (_ebbd ,_fedef );_ebbd ++{};_defc =_ebbd ;if !(_ebbd <=_defa ._cagd &&_ebbd <=_begd ){continue ;};}else {_defc =_ebbd +1;
if _defc < _defa ._gbebe -1{if _abba =_edcc (_dbbfg ,_defc ,_defa ._gbebe -1,_defa ._aceff ,-_defa ._ggdbc ,_fbdge ,_bfbd );_abba !=nil {return nil ,_c .Wrap (_abba ,_ccbf ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_ebbd =_defa ._gbebe +1;};for {for ;_ebbd <=_begd &&_gdgc .GetPixel (_ebbd ,_fedef );_ebbd ++{if _abba =_gdgc .SetPixel (_ebbd ,_fedef ,0);_abba !=nil {return nil ,_c .Wrap (_abba ,_ccbf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _abba =_edcc (_dbbfg ,_defc ,_ebbd -1,_defa ._aceff ,_defa ._ggdbc ,_fbdge ,_bfbd );
_abba !=nil {return nil ,_c .Wrap (_abba ,_ccbf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ebbd > _defa ._cagd +1{if _abba =_edcc (_dbbfg ,_defa ._cagd +1,_ebbd -1,_defa ._aceff ,-_defa ._ggdbc ,_fbdge ,_bfbd );_abba !=nil {return nil ,_c .Wrap (_abba ,_ccbf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _ebbd ++;_ebbd <=_defa ._cagd &&_ebbd <=_begd &&!_gdgc .GetPixel (_ebbd ,_fedef );_ebbd ++{};_defc =_ebbd ;if !(_ebbd <=_defa ._cagd &&_ebbd <=_begd ){break ;};};};_bfbd .Max .X ++;_bfbd .Max .Y ++;return _bfbd ,nil ;};type byHeight Bitmaps ;func (_dabe *Points )Add (pt *Points )error {const _dddf ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _dabe ==nil {return _c .Error (_dddf ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _c .Error (_dddf ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_dabe =append (*_dabe ,*pt ...);return nil ;};func (_beb *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_ddff *Bitmap )SetDefaultPixel (){for _aggd :=range _ddff .Data {_ddff .Data [_aggd ]=byte (0xff);};};func (_febf *Bitmap )setBit (_bgca int ){_febf .Data [(_bgca >>3)]|=0x80>>uint (_bgca &7)};
func _fagb ()[]int {_cccgd :=make ([]int ,256);for _cabeg :=0;_cabeg <=0xff;_cabeg ++{_cggf :=byte (_cabeg );_cccgd [_cggf ]=int (_cggf &0x1)+(int (_cggf >>1)&0x1)+(int (_cggf >>2)&0x1)+(int (_cggf >>3)&0x1)+(int (_cggf >>4)&0x1)+(int (_cggf >>5)&0x1)+(int (_cggf >>6)&0x1)+(int (_cggf >>7)&0x1);
};return _cccgd ;};func _fcgdf (_gfebed *Bitmap ,_bfcec *_b .Stack ,_abcd ,_effe ,_edg int )(_dfcf *_a .Rectangle ,_eegfg error ){const _cfde ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _gfebed ==nil {return nil ,_c .Error (_cfde ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _bfcec ==nil {return nil ,_c .Error (_cfde ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _edg {case 4:if _dfcf ,_eegfg =_dfbea (_gfebed ,_bfcec ,_abcd ,_effe );_eegfg !=nil {return nil ,_c .Wrap (_eegfg ,_cfde ,"");
};return _dfcf ,nil ;case 8:if _dfcf ,_eegfg =_dbgd (_gfebed ,_bfcec ,_abcd ,_effe );_eegfg !=nil {return nil ,_c .Wrap (_eegfg ,_cfde ,"");};return _dfcf ,nil ;default:return nil ,_c .Errorf (_cfde ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_edg );
};};func _fed (_abd *Bitmap ,_cc ,_bdf int )(*Bitmap ,error ){const _acef ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _abd ==nil {return nil ,_c .Error (_acef ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cc <=0||_bdf <=0{return nil ,_c .Error (_acef ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _cc ==_bdf {if _cc ==1{_db ,_fgab :=_dgbdf (nil ,_abd );
if _fgab !=nil {return nil ,_c .Wrap (_fgab ,_acef ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _db ,nil ;};if _cc ==2||_cc ==4||_cc ==8{_bfg ,_bed :=_gf (_abd ,_cc );if _bed !=nil {return nil ,_c .Wrap (_bed ,_acef ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _bfg ,nil ;};};_afe :=_cc *_abd .Width ;_aba :=_bdf *_abd .Height ;_gc :=New (_afe ,_aba );_egc :=_gc .RowStride ;var (_eeb ,_gcc ,_abb ,_eed ,_fb int ;_gfa byte ;_aca error ;);for _gcc =0;_gcc < _abd .Height ;_gcc ++{_eeb =_bdf *_gcc *_egc ;for _abb =0;
_abb < _abd .Width ;_abb ++{if _dab :=_abd .GetPixel (_abb ,_gcc );_dab {_fb =_cc *_abb ;for _eed =0;_eed < _cc ;_eed ++{_gc .setBit (_eeb *8+_fb +_eed );};};};for _eed =1;_eed < _bdf ;_eed ++{_fba :=_eeb +_eed *_egc ;for _fbg :=0;_fbg < _egc ;_fbg ++{if _gfa ,_aca =_gc .GetByte (_eeb +_fbg );
_aca !=nil {return nil ,_c .Wrapf (_aca ,_acef ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_eed );};if _aca =_gc .SetByte (_fba +_fbg ,_gfa );_aca !=nil {return nil ,_c .Wrap (_aca ,_acef ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};};};};return _gc ,nil ;};func (_fddb *Bitmap )resizeImageData (_bdc *Bitmap )error {if _bdc ==nil {return _c .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fddb .SizesEqual (_bdc ){return nil ;};_fddb .Data =make ([]byte ,len (_bdc .Data ));_fddb .Width =_bdc .Width ;_fddb .Height =_bdc .Height ;_fddb .RowStride =_bdc .RowStride ;return nil ;};type Point struct{X ,Y float32 ;};func (_dfge *Bitmap )centroid (_begec ,_egec []int )(Point ,error ){_dbf :=Point {};
_dfge .setPadBits (0);if len (_begec )==0{_begec =_dfec ();};if len (_egec )==0{_egec =_fagb ();};var _ddbd ,_cedf ,_cggd ,_cbda ,_fdeb ,_edfg int ;var _afbf byte ;for _fdeb =0;_fdeb < _dfge .Height ;_fdeb ++{_ffdb :=_dfge .RowStride *_fdeb ;_cbda =0;for _edfg =0;
_edfg < _dfge .RowStride ;_edfg ++{_afbf =_dfge .Data [_ffdb +_edfg ];if _afbf !=0{_cbda +=_egec [_afbf ];_ddbd +=_begec [_afbf ]+_edfg *8*_egec [_afbf ];};};_cggd +=_cbda ;_cedf +=_cbda *_fdeb ;};if _cggd !=0{_dbf .X =float32 (_ddbd )/float32 (_cggd );
_dbf .Y =float32 (_cedf )/float32 (_cggd );};return _dbf ,nil ;};func _dbgd (_aedc *Bitmap ,_eedab *_b .Stack ,_caafa ,_abbc int )(_fffcb *_a .Rectangle ,_acee error ){const _bfee ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _aedc ==nil {return nil ,_c .Error (_bfee ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _eedab ==nil {return nil ,_c .Error (_bfee ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_dgbc ,_geba :=_aedc .Width ,_aedc .Height ;_abcf :=_dgbc -1;_bcff :=_geba -1;if _caafa < 0||_caafa > _abcf ||_abbc < 0||_abbc > _bcff ||!_aedc .GetPixel (_caafa ,_abbc ){return nil ,nil ;};_bdcg :=_a .Rect (100000,100000,0,0);if _acee =_edcc (_eedab ,_caafa ,_caafa ,_abbc ,1,_bcff ,&_bdcg );
_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _acee =_edcc (_eedab ,_caafa ,_caafa ,_abbc +1,-1,_bcff ,&_bdcg );_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_bdcg .Min .X ,_bdcg .Max .X =_caafa ,_caafa ;_bdcg .Min .Y ,_bdcg .Max .Y =_abbc ,_abbc ;var (_abbad *fillSegment ;_fbge int ;);for _eedab .Len ()> 0{if _abbad ,_acee =_ddcd (_eedab );_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"");};_abbc =_abbad ._aceff ;
for _caafa =_abbad ._gbebe -1;_caafa >=0&&_aedc .GetPixel (_caafa ,_abbc );_caafa --{if _acee =_aedc .SetPixel (_caafa ,_abbc ,0);_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _caafa >=_abbad ._gbebe -1{for {for _caafa ++;
_caafa <=_abbad ._cagd +1&&_caafa <=_abcf &&!_aedc .GetPixel (_caafa ,_abbc );_caafa ++{};_fbge =_caafa ;if !(_caafa <=_abbad ._cagd +1&&_caafa <=_abcf ){break ;};for ;_caafa <=_abcf &&_aedc .GetPixel (_caafa ,_abbc );_caafa ++{if _acee =_aedc .SetPixel (_caafa ,_abbc ,0);
_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _acee =_edcc (_eedab ,_fbge ,_caafa -1,_abbad ._aceff ,_abbad ._ggdbc ,_bcff ,&_bdcg );_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _caafa > _abbad ._cagd {if _acee =_edcc (_eedab ,_abbad ._cagd +1,_caafa -1,_abbad ._aceff ,-_abbad ._ggdbc ,_bcff ,&_bdcg );_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_fbge =_caafa +1;if _fbge < _abbad ._gbebe {if _acee =_edcc (_eedab ,_fbge ,_abbad ._gbebe -1,_abbad ._aceff ,-_abbad ._ggdbc ,_bcff ,&_bdcg );_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_caafa =_abbad ._gbebe ;for {for ;_caafa <=_abcf &&_aedc .GetPixel (_caafa ,_abbc );_caafa ++{if _acee =_aedc .SetPixel (_caafa ,_abbc ,0);_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _acee =_edcc (_eedab ,_fbge ,_caafa -1,_abbad ._aceff ,_abbad ._ggdbc ,_bcff ,&_bdcg );
_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _caafa > _abbad ._cagd {if _acee =_edcc (_eedab ,_abbad ._cagd +1,_caafa -1,_abbad ._aceff ,-_abbad ._ggdbc ,_bcff ,&_bdcg );_acee !=nil {return nil ,_c .Wrap (_acee ,_bfee ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _caafa ++;_caafa <=_abbad ._cagd +1&&_caafa <=_abcf &&!_aedc .GetPixel (_caafa ,_abbc );_caafa ++{};_fbge =_caafa ;if !(_caafa <=_abbad ._cagd +1&&_caafa <=_abcf ){break ;};};};_bdcg .Max .X ++;_bdcg .Max .Y ++;return &_bdcg ,nil ;};func (_bafa Points )XSorter ()func (_caede ,_cccb int )bool {return func (_dfeb ,_cgfdg int )bool {return _bafa [_dfeb ].X < _bafa [_cgfdg ].X };
};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_abbb :=_ebdeg (h ,w ,"");_abbb .setOrigin (cy ,cx );var _gebad ,_cefg int ;for _gebad =0;_gebad < h ;_gebad ++{for _cefg =0;_cefg < w ;_cefg ++{_abbb .Data [_gebad ][_cefg ]=tp ;
};};return _abbb ;};func (_eae *Bitmap )SetPixel (x ,y int ,pixel byte )error {_becgd :=_eae .GetByteIndex (x ,y );if _becgd > len (_eae .Data )-1{return _c .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_becgd );
};_ccca :=_eae .GetBitOffset (x );_baaa :=uint (7-_ccca );_bfc :=_eae .Data [_becgd ];var _dadc byte ;if pixel ==1{_dadc =_bfc |(pixel &0x01<<_baaa );}else {_dadc =_bfc &^(1<<_baaa );};_eae .Data [_becgd ]=_dadc ;return nil ;};const (ComponentConn Component =iota ;
ComponentCharacters ;ComponentWords ;);func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _gfce (d ,s ,sel )};func TstCSymbol (t *_ed .T )*Bitmap {t .Helper ();_abcae :=New (6,6);_f .NoError (t ,_abcae .SetPixel (1,0,1));_f .NoError (t ,_abcae .SetPixel (2,0,1));
_f .NoError (t ,_abcae .SetPixel (3,0,1));_f .NoError (t ,_abcae .SetPixel (4,0,1));_f .NoError (t ,_abcae .SetPixel (0,1,1));_f .NoError (t ,_abcae .SetPixel (5,1,1));_f .NoError (t ,_abcae .SetPixel (0,2,1));_f .NoError (t ,_abcae .SetPixel (0,3,1));
_f .NoError (t ,_abcae .SetPixel (0,4,1));_f .NoError (t ,_abcae .SetPixel (5,4,1));_f .NoError (t ,_abcae .SetPixel (1,5,1));_f .NoError (t ,_abcae .SetPixel (2,5,1));_f .NoError (t ,_abcae .SetPixel (3,5,1));_f .NoError (t ,_abcae .SetPixel (4,5,1));
return _abcae ;};func (_aag *Bitmap )nextOnPixelLow (_ced ,_gdaa ,_cbf ,_ffcd ,_cbab int )(_dbee _a .Point ,_dgbd bool ,_cecf error ){const _ade ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_afad int ;
_fegb byte ;);_faf :=_cbab *_cbf ;_bcef :=_faf +(_ffcd /8);if _fegb ,_cecf =_aag .GetByte (_bcef );_cecf !=nil {return _dbee ,false ,_c .Wrap (_cecf ,_ade ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _fegb !=0{_dbg :=_ffcd -(_ffcd %8)+7;for _afad =_ffcd ;_afad <=_dbg &&_afad < _ced ;_afad ++{if _aag .GetPixel (_afad ,_cbab ){_dbee .X =_afad ;_dbee .Y =_cbab ;return _dbee ,true ,nil ;};};};_fabd :=(_ffcd /8)+1;_afad =8*_fabd ;var _gaba int ;for _bcef =_faf +_fabd ;
_afad < _ced ;_bcef ,_afad =_bcef +1,_afad +8{if _fegb ,_cecf =_aag .GetByte (_bcef );_cecf !=nil {return _dbee ,false ,_c .Wrap (_cecf ,_ade ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _fegb ==0{continue ;
};for _gaba =0;_gaba < 8&&_afad < _ced ;_gaba ,_afad =_gaba +1,_afad +1{if _aag .GetPixel (_afad ,_cbab ){_dbee .X =_afad ;_dbee .Y =_cbab ;return _dbee ,true ,nil ;};};};for _aaf :=_cbab +1;_aaf < _gdaa ;_aaf ++{_faf =_aaf *_cbf ;for _bcef ,_afad =_faf ,0;
_afad < _ced ;_bcef ,_afad =_bcef +1,_afad +8{if _fegb ,_cecf =_aag .GetByte (_bcef );_cecf !=nil {return _dbee ,false ,_c .Wrap (_cecf ,_ade ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _fegb ==0{continue ;
};for _gaba =0;_gaba < 8&&_afad < _ced ;_gaba ,_afad =_gaba +1,_afad +1{if _aag .GetPixel (_afad ,_aaf ){_dbee .X =_afad ;_dbee .Y =_aaf ;return _dbee ,true ,nil ;};};};};return _dbee ,false ,nil ;};func (_abeb Points )GetIntX (i int )(int ,error ){if i >=len (_abeb ){return 0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_abeb [i ].X ),nil ;};func _fagc (_edbaf ,_dddd ,_ecdeg byte )byte {return (_edbaf &^(_ecdeg ))|(_dddd &_ecdeg )};func _dfag (_egfeb *Bitmap ,_gbccf ,_acfe ,_gdaad ,_gebga int ,_cedff RasterOperator ,_dfbg *Bitmap ,_aadc ,_bdbg int )error {var (_bdge bool ;
_cfa bool ;_acedf int ;_faac int ;_efbag int ;_eccb bool ;_edbcc byte ;_cdgg int ;_abcaa int ;_dcdb int ;_ecbgd ,_bddbb int ;);_abbe :=8-(_gbccf &7);_fcgg :=_efccd [_abbe ];_agba :=_egfeb .RowStride *_acfe +(_gbccf >>3);_agefd :=_dfbg .RowStride *_bdbg +(_aadc >>3);
if _gdaad < _abbe {_bdge =true ;_fcgg &=_ggdd [8-_abbe +_gdaad ];};if !_bdge {_acedf =(_gdaad -_abbe )>>3;if _acedf > 0{_cfa =true ;_faac =_agba +1;_efbag =_agefd +1;};};_cdgg =(_gbccf +_gdaad )&7;if !(_bdge ||_cdgg ==0){_eccb =true ;_edbcc =_ggdd [_cdgg ];
_abcaa =_agba +1+_acedf ;_dcdb =_agefd +1+_acedf ;};switch _cedff {case PixSrc :for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],_dfbg .Data [_agefd ],_fcgg );_agba +=_egfeb .RowStride ;_agefd +=_dfbg .RowStride ;
};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]=_dfbg .Data [_efbag +_bddbb ];};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;
_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],_dfbg .Data [_dcdb ],_edbcc );_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixNotSrc :for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],^_dfbg .Data [_agefd ],_fcgg );
_agba +=_egfeb .RowStride ;_agefd +=_dfbg .RowStride ;};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]=^_dfbg .Data [_efbag +_bddbb ];};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;
};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],^_dfbg .Data [_dcdb ],_edbcc );_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixSrcOrDst :for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],_dfbg .Data [_agefd ]|_egfeb .Data [_agba ],_fcgg );
_agba +=_egfeb .RowStride ;_agefd +=_dfbg .RowStride ;};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]|=_dfbg .Data [_efbag +_bddbb ];};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;
};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],_dfbg .Data [_dcdb ]|_egfeb .Data [_abcaa ],_edbcc );_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixSrcAndDst :for _ecbgd =0;
_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],_dfbg .Data [_agefd ]&_egfeb .Data [_agba ],_fcgg );_agba +=_egfeb .RowStride ;_agefd +=_dfbg .RowStride ;};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;_bddbb < _acedf ;
_bddbb ++{_egfeb .Data [_faac +_bddbb ]&=_dfbg .Data [_efbag +_bddbb ];};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],_dfbg .Data [_dcdb ]&_egfeb .Data [_abcaa ],_edbcc );
_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixSrcXorDst :for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],_dfbg .Data [_agefd ]^_egfeb .Data [_agba ],_fcgg );_agba +=_egfeb .RowStride ;_agefd +=_dfbg .RowStride ;
};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]^=_dfbg .Data [_efbag +_bddbb ];};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;
_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],_dfbg .Data [_dcdb ]^_egfeb .Data [_abcaa ],_edbcc );_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixNotSrcOrDst :for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],^(_dfbg .Data [_agefd ])|_egfeb .Data [_agba ],_fcgg );
_agba +=_egfeb .RowStride ;_agefd +=_dfbg .RowStride ;};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]|=^(_dfbg .Data [_efbag +_bddbb ]);};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;
};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],^(_dfbg .Data [_dcdb ])|_egfeb .Data [_abcaa ],_edbcc );_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixNotSrcAndDst :for _ecbgd =0;
_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],^(_dfbg .Data [_agefd ])&_egfeb .Data [_agba ],_fcgg );_agba +=_egfeb .RowStride ;_agefd +=_dfbg .RowStride ;};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;
_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]&=^_dfbg .Data [_efbag +_bddbb ];};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],^(_dfbg .Data [_dcdb ])&_egfeb .Data [_abcaa ],_edbcc );
_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixSrcOrNotDst :for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],_dfbg .Data [_agefd ]|^(_egfeb .Data [_agba ]),_fcgg );_agba +=_egfeb .RowStride ;
_agefd +=_dfbg .RowStride ;};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]=_dfbg .Data [_efbag +_bddbb ]|^(_egfeb .Data [_faac +_bddbb ]);};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;
};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],_dfbg .Data [_dcdb ]|^(_egfeb .Data [_abcaa ]),_edbcc );_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixSrcAndNotDst :for _ecbgd =0;
_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],_dfbg .Data [_agefd ]&^(_egfeb .Data [_agba ]),_fcgg );_agba +=_egfeb .RowStride ;_agefd +=_dfbg .RowStride ;};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;
_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]=_dfbg .Data [_efbag +_bddbb ]&^(_egfeb .Data [_faac +_bddbb ]);};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],_dfbg .Data [_dcdb ]&^(_egfeb .Data [_abcaa ]),_edbcc );
_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixNotPixSrcOrDst :for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],^(_dfbg .Data [_agefd ]|_egfeb .Data [_agba ]),_fcgg );_agba +=_egfeb .RowStride ;
_agefd +=_dfbg .RowStride ;};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]=^(_dfbg .Data [_efbag +_bddbb ]|_egfeb .Data [_faac +_bddbb ]);};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;
};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],^(_dfbg .Data [_dcdb ]|_egfeb .Data [_abcaa ]),_edbcc );_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixNotPixSrcAndDst :for _ecbgd =0;
_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],^(_dfbg .Data [_agefd ]&_egfeb .Data [_agba ]),_fcgg );_agba +=_egfeb .RowStride ;_agefd +=_dfbg .RowStride ;};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;
_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]=^(_dfbg .Data [_efbag +_bddbb ]&_egfeb .Data [_faac +_bddbb ]);};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],^(_dfbg .Data [_dcdb ]&_egfeb .Data [_abcaa ]),_edbcc );
_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};case PixNotPixSrcXorDst :for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_agba ]=_fagc (_egfeb .Data [_agba ],^(_dfbg .Data [_agefd ]^_egfeb .Data [_agba ]),_fcgg );_agba +=_egfeb .RowStride ;
_agefd +=_dfbg .RowStride ;};if _cfa {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{for _bddbb =0;_bddbb < _acedf ;_bddbb ++{_egfeb .Data [_faac +_bddbb ]=^(_dfbg .Data [_efbag +_bddbb ]^_egfeb .Data [_faac +_bddbb ]);};_faac +=_egfeb .RowStride ;_efbag +=_dfbg .RowStride ;
};};if _eccb {for _ecbgd =0;_ecbgd < _gebga ;_ecbgd ++{_egfeb .Data [_abcaa ]=_fagc (_egfeb .Data [_abcaa ],^(_dfbg .Data [_dcdb ]^_egfeb .Data [_abcaa ]),_edbcc );_abcaa +=_egfeb .RowStride ;_dcdb +=_dfbg .RowStride ;};};default:_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_cedff );
return _c .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _afd (_egcf ,_ffeg int )*Bitmap {return &Bitmap {Width :_egcf ,Height :_ffeg ,RowStride :(_egcf +7)>>3};};func (_cfag *Bitmaps )SortByWidth (){_gcgae :=(*byWidth )(_cfag );_fg .Sort (_gcgae )};func TstESymbol (t *_ed .T ,scale ...int )*Bitmap {_ddca ,_ebaf :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_f .NoError (t ,_ebaf );return TstGetScaledSymbol (t ,_ddca ,scale ...);};func (_fdc *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_fdc .Width ,Height :_fdc .Height ,RowStride :_fdc .RowStride ,Color :_fdc .Color ,Text :_fdc .Text ,BitmapNumber :_fdc .BitmapNumber ,Special :_fdc .Special ,Data :make ([]byte ,len (_fdc .Data ))};
};func (_bebb *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _bgaa ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _bebb ==nil {return nil ,_c .Error (_bgaa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_bebb .Values )-1{return nil ,_c .Errorf (_bgaa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bebb .Values [i ],nil ;};func (_agcg *Bitmaps )String ()string {_beaa :=_g .Builder {};
for _ ,_ggeb :=range _agcg .Values {_beaa .WriteString (_ggeb .String ());_beaa .WriteRune ('\n');};return _beaa .String ();};type BoundaryCondition int ;func (_fcd *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _dccg ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _fcd ==nil {return nil ,_c .Error (_dccg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_fcd .Values )-1{return nil ,_c .Errorf (_dccg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fcd .Values [i ],nil ;};func _dcbb (_cgbe ,_aacfb ,_efc *Bitmap )(*Bitmap ,error ){const _ebfg ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _aacfb ==nil {return nil ,_c .Error (_ebfg ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _efc ==nil {return nil ,_c .Error (_ebfg ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _cede error ;switch {case _cgbe ==_aacfb :if _cede =_cgbe .RasterOperation (0,0,_aacfb .Width ,_aacfb .Height ,PixNotSrcAndDst ,_efc ,0,0);
_cede !=nil {return nil ,_c .Wrap (_cede ,_ebfg ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _cgbe ==_efc :if _cede =_cgbe .RasterOperation (0,0,_aacfb .Width ,_aacfb .Height ,PixNotSrcAndDst ,_aacfb ,0,0);_cede !=nil {return nil ,_c .Wrap (_cede ,_ebfg ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_cgbe ,_cede =_dgbdf (_cgbe ,_aacfb );if _cede !=nil {return nil ,_c .Wrap (_cede ,_ebfg ,"");};if _cede =_cgbe .RasterOperation (0,0,_aacfb .Width ,_aacfb .Height ,PixNotSrcAndDst ,_efc ,0,0);_cede !=nil {return nil ,_c .Wrap (_cede ,_ebfg ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _cgbe ,nil ;};func (_efcgc *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _fagba ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _fagd :=_efcgc .validateIntSlice ();
_fagd !=nil {return nil ,_c .Wrap (_fagd ,_fagba ,"");};if _efcgc .IntSlice .Size ()==0{return nil ,_c .Error (_fagba ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_efcgc .SortByY ();var (_eadc []*ClassedPoints ;
_cgfcd int ;);_fede :=-1;var _deea *ClassedPoints ;for _ebec :=0;_ebec < len (_efcgc .IntSlice );_ebec ++{_cgfcd =int (_efcgc .YAtIndex (_ebec ));if _cgfcd !=_fede {_deea =&ClassedPoints {Points :_efcgc .Points };_fede =_cgfcd ;_eadc =append (_eadc ,_deea );
};_deea .IntSlice =append (_deea .IntSlice ,_efcgc .IntSlice [_ebec ]);};for _ ,_agec :=range _eadc {_agec .SortByX ();};return _eadc ,nil ;};func (_cbaad *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _daafd ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _cbaad ==nil {return nil ,_c .Error (_daafd ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_c .Error (_daafd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_fgfgg :=len (_cbaad .Values );_acbb :=&Bitmaps {Values :make ([]*Bitmap ,_fgfgg ),Boxes :make ([]*_a .Rectangle ,_fgfgg )};var (_gfad ,_fbcgf *Bitmap ;_gfcd *_a .Rectangle ;_ebaa error ;);for _ddcga :=0;_ddcga < _fgfgg ;_ddcga ++{if _gfad ,_ebaa =_cbaad .GetBitmap (_ddcga );
_ebaa !=nil {return nil ,_c .Wrap (_ebaa ,_daafd ,"");};if _gfcd ,_ebaa =_cbaad .GetBox (_ddcga );_ebaa !=nil {return nil ,_c .Wrap (_ebaa ,_daafd ,"");};if _fbcgf ,_ebaa =s .clipRectangle (_gfcd ,nil );_ebaa !=nil {return nil ,_c .Wrap (_ebaa ,_daafd ,"");
};if _fbcgf ,_ebaa =_fbcgf .And (_gfad );_ebaa !=nil {return nil ,_c .Wrap (_ebaa ,_daafd ,"");};_acbb .Values [_ddcga ]=_fbcgf ;_acbb .Boxes [_ddcga ]=_gfcd ;};return _acbb ,nil ;};func _aagb (_gcfd ,_cgb int )int {if _gcfd < _cgb {return _gcfd ;};return _cgb ;
};func TstWordBitmap (t *_ed .T ,scale ...int )*Bitmap {_gfeg :=1;if len (scale )> 0{_gfeg =scale [0];};_bbgae :=3;_adfg :=9+7+15+2*_bbgae ;_ebgf :=5+_bbgae +5;_abaee :=New (_adfg *_gfeg ,_ebgf *_gfeg );_bbad :=&Bitmaps {};var _ccee *int ;_bbgae *=_gfeg ;
_eebg :=0;_ccee =&_eebg ;_baeg :=0;_acedd :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,1*_gfeg );_acedd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,_bbgae );_acedd =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,1*_gfeg );
_acedd =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,_bbgae );_acedd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,1*_gfeg );_acedd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,1*_gfeg );
_acedd =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,0);*_ccee =0;_baeg =5*_gfeg +_bbgae ;_acedd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,1*_gfeg );_acedd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,_bbgae );
_acedd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,1*_gfeg );_acedd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,1*_gfeg );_acedd =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,1*_gfeg );
_acedd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,1*_gfeg );_acedd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bbad ,_acedd ,_ccee ,_baeg ,0);TstWriteSymbols (t ,_bbad ,_abaee );return _abaee ;};func (_fffe Points )YSorter ()func (_eeda ,_fbea int )bool {return func (_cade ,_becgg int )bool {return _fffe [_cade ].Y < _fffe [_becgg ].Y };
};type fillSegment struct{_gbebe int ;_cagd int ;_aceff int ;_ggdbc int ;};func (_afdd Points )Get (i int )(Point ,error ){if i > len (_afdd )-1{return Point {},_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _afdd [i ],nil ;};func _gf (_bag *Bitmap ,_ge int )(*Bitmap ,error ){const _cg ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _bag ==nil {return nil ,_c .Error (_cg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _ge ==1{return _dgbdf (nil ,_bag );};if _ge !=2&&_ge !=4&&_ge !=8{return nil ,_c .Error (_cg ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_gdf :=_ge *_bag .Width ;_ceg :=_ge *_bag .Height ;_fa :=New (_gdf ,_ceg );var _cgf error ;switch _ge {case 2:_cgf =_be (_fa ,_bag );case 4:_cgf =_ecd (_fa ,_bag );case 8:_cgf =_gde (_fa ,_bag );};if _cgf !=nil {return nil ,_c .Wrap (_cgf ,_cg ,"");};
return _fa ,nil ;};func (_bfbc *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _bgec (_bfbc ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func TstNSymbol (t *_ed .T ,scale ...int )*Bitmap {_cegg ,_daca :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_f .NoError (t ,_daca );return TstGetScaledSymbol (t ,_cegg ,scale ...);};func (_eacc *Bitmap )inverseData (){if _afbc :=_eacc .RasterOperation (0,0,_eacc .Width ,_eacc .Height ,PixNotDst ,nil ,0,0);_afbc !=nil {_dc .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_afbc );
};if _eacc .Color ==Chocolate {_eacc .Color =Vanilla ;}else {_eacc .Color =Chocolate ;};};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _bbce (d ,s ,hSize ,vSize )};func (_eeec Points )GetGeometry (i int )(_fdcb ,_bede float32 ,_bfcb error ){if i > len (_eeec )-1{return 0,0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_cbff :=_eeec [i ];return _cbff .X ,_cbff .Y ,nil ;};func _fcg ()(_egf [256]uint32 ){for _fbaa :=0;_fbaa < 256;_fbaa ++{if _fbaa &0x01!=0{_egf [_fbaa ]|=0xf;};if _fbaa &0x02!=0{_egf [_fbaa ]|=0xf0;};if _fbaa &0x04!=0{_egf [_fbaa ]|=0xf00;};if _fbaa &0x08!=0{_egf [_fbaa ]|=0xf000;
};if _fbaa &0x10!=0{_egf [_fbaa ]|=0xf0000;};if _fbaa &0x20!=0{_egf [_fbaa ]|=0xf00000;};if _fbaa &0x40!=0{_egf [_fbaa ]|=0xf000000;};if _fbaa &0x80!=0{_egf [_fbaa ]|=0xf0000000;};};return _egf ;};func _degg (_ecdb *Bitmap ,_dafd ...MorphProcess )(_cbba *Bitmap ,_gagb error ){const _egecb ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _ecdb ==nil {return nil ,_c .Error (_egecb ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_dafd )==0{return nil ,_c .Error (_egecb ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _gagb =_efefe (_dafd ...);
_gagb !=nil {return nil ,_c .Wrap (_gagb ,_egecb ,"");};var _dcga ,_afdc ,_fdbd int ;_cbba =_ecdb .Copy ();for _ ,_cgfd :=range _dafd {switch _cgfd .Operation {case MopDilation :_dcga ,_afdc =_cgfd .getWidthHeight ();_cbba ,_gagb =DilateBrick (nil ,_cbba ,_dcga ,_afdc );
if _gagb !=nil {return nil ,_c .Wrap (_gagb ,_egecb ,"");};case MopErosion :_dcga ,_afdc =_cgfd .getWidthHeight ();_cbba ,_gagb =_gbcc (nil ,_cbba ,_dcga ,_afdc );if _gagb !=nil {return nil ,_c .Wrap (_gagb ,_egecb ,"");};case MopOpening :_dcga ,_afdc =_cgfd .getWidthHeight ();
_cbba ,_gagb =_abdcb (nil ,_cbba ,_dcga ,_afdc );if _gagb !=nil {return nil ,_c .Wrap (_gagb ,_egecb ,"");};case MopClosing :_dcga ,_afdc =_cgfd .getWidthHeight ();_cbba ,_gagb =_dagc (nil ,_cbba ,_dcga ,_afdc );if _gagb !=nil {return nil ,_c .Wrap (_gagb ,_egecb ,"");
};case MopRankBinaryReduction :_cbba ,_gagb =_ddb (_cbba ,_cgfd .Arguments ...);if _gagb !=nil {return nil ,_c .Wrap (_gagb ,_egecb ,"");};case MopReplicativeBinaryExpansion :_cbba ,_gagb =_babb (_cbba ,_cgfd .Arguments [0]);if _gagb !=nil {return nil ,_c .Wrap (_gagb ,_egecb ,"");
};case MopAddBorder :_fdbd =_cgfd .Arguments [0];_cbba ,_gagb =_cbba .AddBorder (_fdbd ,0);if _gagb !=nil {return nil ,_c .Wrap (_gagb ,_egecb ,"");};default:return nil ,_c .Error (_egecb ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _fdbd > 0{_cbba ,_gagb =_cbba .RemoveBorder (_fdbd );if _gagb !=nil {return nil ,_c .Wrap (_gagb ,_egecb ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _cbba ,nil ;};var _fgd [256]uint8 ;func _eefa (_eegf ,_ecda *Bitmap ,_geccf *Selection )(*Bitmap ,error ){const _ffbf ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";
var _bfff error ;if _eegf ,_bfff =_begc (_eegf ,_ecda ,_geccf );_bfff !=nil {return nil ,_bfff ;};_beec ,_bfff :=_gfce (nil ,_ecda ,_geccf );if _bfff !=nil {return nil ,_c .Wrap (_bfff ,_ffbf ,"");};if _ ,_bfff =_ccdf (_eegf ,_beec ,_geccf );_bfff !=nil {return nil ,_c .Wrap (_bfff ,_ffbf ,"");
};return _eegf ,nil ;};func TstAddSymbol (t *_ed .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_gccg :=_a .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_gccg );*x +=sym .Width +space ;};func TstWriteSymbols (t *_ed .T ,bms *Bitmaps ,src *Bitmap ){for _fgdfc :=0;
_fgdfc < bms .Size ();_fgdfc ++{_bcbg :=bms .Values [_fgdfc ];_aegb :=bms .Boxes [_fgdfc ];_gaegd :=src .RasterOperation (_aegb .Min .X ,_aegb .Min .Y ,_bcbg .Width ,_bcbg .Height ,PixSrc ,_bcbg ,0,0);_f .NoError (t ,_gaegd );};};func (_dceb *Bitmap )Equivalent (s *Bitmap )bool {return _dceb .equivalent (s )};
func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _ddde ,_efbga int ;_bcae :=src .RowStride -1;if x < 0{_efbga =-x ;x =0;}else if x +src .Width > dst .Width {_bcae -=src .Width +x -dst .Width ;};if y < 0{_ddde =-y ;y =0;
_efbga +=src .RowStride ;_bcae +=src .RowStride ;}else if y +src .Height > dst .Height {_ddde =src .Height +y -dst .Height ;};var (_bde int ;_bebe error ;);_eaa :=x &0x07;_gbfc :=8-_eaa ;_fdb :=src .Width &0x07;_cadf :=_gbfc -_fdb ;_bab :=_gbfc &0x07!=0;
_geeg :=src .Width <=((_bcae -_efbga )<<3)+_gbfc ;_fbda :=dst .GetByteIndex (x ,y );_ddba :=_ddde +dst .Height ;if src .Height > _ddba {_bde =_ddba ;}else {_bde =src .Height ;};switch {case !_bab :_bebe =_egfa (src ,dst ,_ddde ,_bde ,_fbda ,_efbga ,_bcae ,op );
case _geeg :_bebe =_dbbf (src ,dst ,_ddde ,_bde ,_fbda ,_efbga ,_bcae ,_cadf ,_eaa ,_gbfc ,op );default:_bebe =_dceg (src ,dst ,_ddde ,_bde ,_fbda ,_efbga ,_bcae ,_cadf ,_eaa ,_gbfc ,op ,_fdb );};return _bebe ;};func (_fgfa *Bitmaps )selectByIndexes (_gaac []int )(*Bitmaps ,error ){_ebdgf :=&Bitmaps {};
for _ ,_cedgg :=range _gaac {_egad ,_cecb :=_fgfa .GetBitmap (_cedgg );if _cecb !=nil {return nil ,_c .Wrap (_cecb ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_ebdgf .AddBitmap (_egad );};return _ebdgf ,nil ;
};func (_ddab *Bitmaps )selectByIndicator (_ggea *_b .NumSlice )(_aegcb *Bitmaps ,_ebbg error ){const _decad ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _ddab ==nil {return nil ,_c .Error (_decad ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _ggea ==nil {return nil ,_c .Error (_decad ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_ddab .Values )==0{return _ddab ,nil ;};if len (*_ggea )!=len (_ddab .Values ){return nil ,_c .Errorf (_decad ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_ggea ),len (_ddab .Values ));
};var _cgcb ,_eabe ,_babc int ;for _eabe =0;_eabe < len (*_ggea );_eabe ++{if _cgcb ,_ebbg =_ggea .GetInt (_eabe );_ebbg !=nil {return nil ,_c .Wrap (_ebbg ,_decad ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _cgcb ==1{_babc ++;
};};if _babc ==len (_ddab .Values ){return _ddab ,nil ;};_aegcb =&Bitmaps {};_aage :=len (_ddab .Values )==len (_ddab .Boxes );for _eabe =0;_eabe < len (*_ggea );_eabe ++{if _cgcb =int ((*_ggea )[_eabe ]);_cgcb ==0{continue ;};_aegcb .Values =append (_aegcb .Values ,_ddab .Values [_eabe ]);
if _aage {_aegcb .Boxes =append (_aegcb .Boxes ,_ddab .Boxes [_eabe ]);};};return _aegcb ,nil ;};func (_fec *Bitmap )setEightBytes (_affc int ,_eba uint64 )error {_gebg :=_fec .RowStride -(_affc %_fec .RowStride );if _fec .RowStride !=_fec .Width >>3{_gebg --;
};if _gebg >=8{return _fec .setEightFullBytes (_affc ,_eba );};return _fec .setEightPartlyBytes (_affc ,_gebg ,_eba );};func (_fgaaf *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_fgff *Bitmaps ,_daafa error ){const _gdbdb ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _fgaaf ==nil {return nil ,_c .Error (_gdbdb ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_gdbdb ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_c .Errorf (_gdbdb ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_egaec ,_daafa :=_fgaaf .makeSizeIndicator (width ,height ,tp ,relation );if _daafa !=nil {return nil ,_c .Wrap (_daafa ,_gdbdb ,"");};_fgff ,_daafa =_fgaaf .selectByIndicator (_egaec );if _daafa !=nil {return nil ,_c .Wrap (_daafa ,_gdbdb ,"");};return _fgff ,nil ;
};func (_eebf *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _eebf .Copy (),nil ;};_bef ,_cca :=_eebf .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _cca !=nil {return nil ,_c .Wrap (_cca ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");
};return _bef ,nil ;};func _bgec (_bcca *Bitmap ,_ffeb ,_egff ,_bdfcg ,_gfedca int ,_cfed RasterOperator ,_eafd *Bitmap ,_bbbc ,_ccbcb int )error {const _adfdg ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _bcca ==nil {return _c .Error (_adfdg ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _cfed ==PixDst {return nil ;};switch _cfed {case PixClr ,PixSet ,PixNotDst :_dbda (_bcca ,_ffeb ,_egff ,_bdfcg ,_gfedca ,_cfed );return nil ;};if _eafd ==nil {_dc .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .Error (_adfdg ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cafad :=_acge (_bcca ,_ffeb ,_egff ,_bdfcg ,_gfedca ,_cfed ,_eafd ,_bbbc ,_ccbcb );_cafad !=nil {return _c .Wrap (_cafad ,_adfdg ,"");
};return nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _fgaa ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_fbc :=_afd (width ,height );_fbc .Data =data ;
if _fddc :=((width *height )+7)>>3;len (data )< _fddc {return nil ,_c .Errorf (_fgaa ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_fddc );
};if _gbd :=_fbc .addPadBits ();_gbd !=nil {return nil ,_c .Wrap (_gbd ,_fgaa ,"");};return _fbc ,nil ;};func (_dcg *Bitmap )setTwoBytes (_afae int ,_bgge uint16 )error {if _afae +1> len (_dcg .Data )-1{return _c .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_afae );
};_dcg .Data [_afae ]=byte ((_bgge &0xff00)>>8);_dcg .Data [_afae +1]=byte (_bgge &0xff);return nil ;};func (_gbed *Selection )setOrigin (_ddag ,_deef int ){_gbed .Cy ,_gbed .Cx =_ddag ,_deef };func _gdab (_geee ,_bceb *Bitmap ,_gac CombinationOperator )*Bitmap {_afaf :=New (_geee .Width ,_geee .Height );
for _ggag :=0;_ggag < len (_afaf .Data );_ggag ++{_afaf .Data [_ggag ]=_bdgb (_geee .Data [_ggag ],_bceb .Data [_ggag ],_gac );};return _afaf ;};type Component int ;func TstOSymbol (t *_ed .T ,scale ...int )*Bitmap {_acgb ,_ccbd :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_f .NoError (t ,_ccbd );return TstGetScaledSymbol (t ,_acgb ,scale ...);};type RasterOperator int ;func (_afb *Bitmap )CountPixels ()int {return _afb .countPixels ()};func Rect (x ,y ,w ,h int )(*_a .Rectangle ,error ){const _aab ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_c .Errorf (_aab ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_c .Error (_aab ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_eebe :=_a .Rect (x ,y ,x +w ,y +h );return &_eebe ,nil ;};const (_eaaac shift =iota ;_eaebb ;);type SizeComparison int ;func _gab (_beca ,_dffa *Bitmap ,_dad int ,_ebg []byte ,_becg int )(_gbg error ){const _gcd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_cfe ,_fae ,_abf ,_ecb ,_cag ,_gcg ,_ffe ,_eec int ;_fedc ,_geg ,_ffdc ,_bca uint32 ;_cga ,_dce byte ;_fab uint16 ;);_bcb :=make ([]byte ,4);_acaf :=make ([]byte ,4);for _abf =0;_abf < _beca .Height -1;_abf ,_ecb =_abf +2,_ecb +1{_cfe =_abf *_beca .RowStride ;
_fae =_ecb *_dffa .RowStride ;for _cag ,_gcg =0,0;_cag < _becg ;_cag ,_gcg =_cag +4,_gcg +1{for _ffe =0;_ffe < 4;_ffe ++{_eec =_cfe +_cag +_ffe ;if _eec <=len (_beca .Data )-1&&_eec < _cfe +_beca .RowStride {_bcb [_ffe ]=_beca .Data [_eec ];}else {_bcb [_ffe ]=0x00;
};_eec =_cfe +_beca .RowStride +_cag +_ffe ;if _eec <=len (_beca .Data )-1&&_eec < _cfe +(2*_beca .RowStride ){_acaf [_ffe ]=_beca .Data [_eec ];}else {_acaf [_ffe ]=0x00;};};_fedc =_bb .BigEndian .Uint32 (_bcb );_geg =_bb .BigEndian .Uint32 (_acaf );_ffdc =_fedc &_geg ;
_ffdc |=_ffdc <<1;_bca =_fedc |_geg ;_bca &=_bca <<1;_geg =_ffdc &_bca ;_geg &=0xaaaaaaaa;_fedc =_geg |(_geg <<7);_cga =byte (_fedc >>24);_dce =byte ((_fedc >>8)&0xff);_eec =_fae +_gcg ;if _eec +1==len (_dffa .Data )-1||_eec +1>=_fae +_dffa .RowStride {if _gbg =_dffa .SetByte (_eec ,_ebg [_cga ]);
_gbg !=nil {return _c .Wrapf (_gbg ,_gcd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eec );};}else {_fab =(uint16 (_ebg [_cga ])<<8)|uint16 (_ebg [_dce ]);if _gbg =_dffa .setTwoBytes (_eec ,_fab );_gbg !=nil {return _c .Wrapf (_gbg ,_gcd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eec );
};_gcg ++;};};};return nil ;};func _ccef (_eefc ,_gbae ,_dcab *Bitmap ,_dgbb int )(*Bitmap ,error ){const _gcdf ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _gbae ==nil {return nil ,_c .Error (_gcdf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _dcab ==nil {return nil ,_c .Error (_gcdf ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _dgbb !=4&&_dgbb !=8{return nil ,_c .Error (_gcdf ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _adcd error ;_eefc ,_adcd =_dgbdf (_eefc ,_gbae );if _adcd !=nil {return nil ,_c .Wrap (_adcd ,_gcdf ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_afbd :=_gbae .createTemplate ();_dcab .setPadBits (0);
for _ceaf :=0;_ceaf < _gadc ;_ceaf ++{_afbd ,_adcd =_dgbdf (_afbd ,_eefc );if _adcd !=nil {return nil ,_c .Wrapf (_adcd ,_gcdf ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ceaf );};if _adcd =_cdgb (_eefc ,_dcab ,_dgbb );
_adcd !=nil {return nil ,_c .Wrapf (_adcd ,_gcdf ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ceaf );};if _afbd .Equals (_eefc ){break ;};};return _eefc ,nil ;};func (_gce *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_bfd bool ,_cde error ){const _cgd ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_fagb ();};_ebga :=_gce .Width >>3;_aced :=_gce .Width &7;_cac :=byte (0xff<<uint (8-_aced ));var (_bdd ,_deg ,_gae ,_bfa int ;_abae byte ;);for _bdd =0;_bdd < _gce .Height ;_bdd ++{_gae =_gce .RowStride *_bdd ;for _deg =0;_deg < _ebga ;
_deg ++{_abae ,_cde =_gce .GetByte (_gae +_deg );if _cde !=nil {return false ,_c .Wrap (_cde ,_cgd ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_bfa +=tab8 [_abae ];};if _aced !=0{_abae ,_cde =_gce .GetByte (_gae +_deg );if _cde !=nil {return false ,_c .Wrap (_cde ,_cgd ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_abae &=_cac ;_bfa +=tab8 [_abae ];};if _bfa > thresh {return true ,nil ;};};return _bfd ,nil ;};func _dceg (_daad ,_gbdaf *Bitmap ,_fag ,_bdga ,_eebfb ,_adbf ,_gdc ,_bbdc ,_dcfg ,_bfed int ,_gad CombinationOperator ,_fgf int )error {var _cecg int ;_agbf :=func (){_cecg ++;
_eebfb +=_gbdaf .RowStride ;_adbf +=_daad .RowStride ;_gdc +=_daad .RowStride };for _cecg =_fag ;_cecg < _bdga ;_agbf (){var _abea uint16 ;_bdbd :=_eebfb ;for _ged :=_adbf ;_ged <=_gdc ;_ged ++{_gedf ,_cdeg :=_gbdaf .GetByte (_bdbd );if _cdeg !=nil {return _cdeg ;
};_bdfc ,_cdeg :=_daad .GetByte (_ged );if _cdeg !=nil {return _cdeg ;};_abea =(_abea |(uint16 (_bdfc )&0xff))<<uint (_bfed );_bdfc =byte (_abea >>8);if _cdeg =_gbdaf .SetByte (_bdbd ,_bdgb (_gedf ,_bdfc ,_gad ));_cdeg !=nil {return _cdeg ;};_bdbd ++;_abea <<=uint (_dcfg );
if _ged ==_gdc {_bdfc =byte (_abea >>(8-uint8 (_bfed )));if _fgf !=0{_bdfc =_bcbc (uint (8+_bbdc ),_bdfc );};_gedf ,_cdeg =_gbdaf .GetByte (_bdbd );if _cdeg !=nil {return _cdeg ;};if _cdeg =_gbdaf .SetByte (_bdbd ,_bdgb (_gedf ,_bdfc ,_gad ));_cdeg !=nil {return _cdeg ;
};};};};return nil ;};func (_bedg *Bitmaps )Size ()int {return len (_bedg .Values )};func (_bbdb *Bitmap )SetPadBits (value int ){_bbdb .setPadBits (value )};func (_fda *Bitmap )SetByte (index int ,v byte )error {if index > len (_fda .Data )-1||index < 0{return _c .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_fda .Data [index ]=v ;return nil ;};func (_bbaea *Bitmaps )GetBox (i int )(*_a .Rectangle ,error ){const _dfbee ="\u0047\u0065\u0074\u0042\u006f\u0078";if _bbaea ==nil {return nil ,_c .Error (_dfbee ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_bbaea .Boxes )-1{return nil ,_c .Errorf (_dfbee ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bbaea .Boxes [i ],nil ;};func New (width ,height int )*Bitmap {_ggfb :=_afd (width ,height );
_ggfb .Data =make ([]byte ,height *_ggfb .RowStride );return _ggfb ;};func TstTSymbol (t *_ed .T ,scale ...int )*Bitmap {_ddga ,_cefa :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_f .NoError (t ,_cefa );return TstGetScaledSymbol (t ,_ddga ,scale ...);
};func _fdcg (_feda int )int {if _feda < 0{return -_feda ;};return _feda ;};type CombinationOperator int ;func TstWSymbol (t *_ed .T ,scale ...int )*Bitmap {_fbfc ,_edge :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_f .NoError (t ,_edge );return TstGetScaledSymbol (t ,_fbfc ,scale ...);
};func (_egag *Bitmap )GetPixel (x ,y int )bool {_abe :=_egag .GetByteIndex (x ,y );_gff :=_egag .GetBitOffset (x );_gffc :=uint (7-_gff );if _abe > len (_egag .Data )-1{_dc .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_egag );
return false ;};if (_egag .Data [_abe ]>>_gffc )&0x01>=1{return true ;};return false ;};func TstImageBitmapData ()[]byte {return _egfb .Data };const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_fbdb bool ,_gecf error ){const _eff ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_ecgc ,_dage :=p1 .Width ,p1 .Height ;_gfag ,_afda :=p3 .Width ,p3 .Height ;if _b .Abs (_ecgc -_gfag )> maxDiffW {return false ,nil ;};if _b .Abs (_dage -_afda )> maxDiffH {return false ,nil ;};_fdba :=int (float32 (area1 )*(1.0-rank )+0.5);_acea :=int (float32 (area3 )*(1.0-rank )+0.5);
var _bebeg ,_cedg int ;if delX >=0{_bebeg =int (delX +0.5);}else {_bebeg =int (delX -0.5);};if delY >=0{_cedg =int (delY +0.5);}else {_cedg =int (delY -0.5);};_fbgf :=p1 .CreateTemplate ();if _gecf =_fbgf .RasterOperation (0,0,_ecgc ,_dage ,PixSrc ,p1 ,0,0);
_gecf !=nil {return false ,_c .Wrap (_gecf ,_eff ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gecf =_fbgf .RasterOperation (_bebeg ,_cedg ,_ecgc ,_dage ,PixNotSrcAndDst ,p4 ,0,0);_gecf !=nil {return false ,_c .Wrap (_gecf ,_eff ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_fbdb ,_gecf =_fbgf .ThresholdPixelSum (_fdba ,tab8 );if _gecf !=nil {return false ,_c .Wrap (_gecf ,_eff ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _fbdb {return false ,nil ;};if _gecf =_fbgf .RasterOperation (_bebeg ,_cedg ,_gfag ,_afda ,PixSrc ,p3 ,0,0);
_gecf !=nil {return false ,_c .Wrap (_gecf ,_eff ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gecf =_fbgf .RasterOperation (0,0,_gfag ,_afda ,PixNotSrcAndDst ,p2 ,0,0);_gecf !=nil {return false ,_c .Wrap (_gecf ,_eff ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_fbdb ,_gecf =_fbgf .ThresholdPixelSum (_acea ,tab8 );if _gecf !=nil {return false ,_c .Wrap (_gecf ,_eff ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_fbdb ,nil ;};func (_cfd *Bitmap )InverseData (){_cfd .inverseData ()};
func (_cedffd *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _eggeg ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_eeea ,_bfcfg :=_cedffd .selectByIndexes (idx );
if _bfcfg !=nil {return nil ,_c .Wrap (_bfcfg ,_eggeg ,"");};return _eeea ,nil ;};func (_dfb *Bitmap )GetByteIndex (x ,y int )int {return y *_dfb .RowStride +(x >>3)};func (_afcc *Selection )findMaxTranslations ()(_afgf ,_efeac ,_gfca ,_ffcbg int ){for _cbdg :=0;
_cbdg < _afcc .Height ;_cbdg ++{for _fbfb :=0;_fbfb < _afcc .Width ;_fbfb ++{if _afcc .Data [_cbdg ][_fbfb ]==SelHit {_afgf =_fggg (_afgf ,_afcc .Cx -_fbfb );_efeac =_fggg (_efeac ,_afcc .Cy -_cbdg );_gfca =_fggg (_gfca ,_fbfb -_afcc .Cx );_ffcbg =_fggg (_ffcbg ,_cbdg -_afcc .Cy );
};};};return _afgf ,_efeac ,_gfca ,_ffcbg ;};type Boxes []*_a .Rectangle ;func TstGetScaledSymbol (t *_ed .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_cdbg ,_fabab :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_f .NoError (t ,_fabab );return _cdbg ;};func _ecc (_cfb ,_eeca *Bitmap ,_agg int ,_dae []byte ,_bedd int )(_becc error ){const _bbd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_aga ,_bac ,_cabf ,_bbg ,_gba ,_gbf ,_ccc ,_bge int ;_gaf ,_gcb uint32 ;_cad ,_ccdc byte ;_ede uint16 ;);_aad :=make ([]byte ,4);_cdfc :=make ([]byte ,4);for _cabf =0;_cabf < _cfb .Height -1;_cabf ,_bbg =_cabf +2,_bbg +1{_aga =_cabf *_cfb .RowStride ;
_bac =_bbg *_eeca .RowStride ;for _gba ,_gbf =0,0;_gba < _bedd ;_gba ,_gbf =_gba +4,_gbf +1{for _ccc =0;_ccc < 4;_ccc ++{_bge =_aga +_gba +_ccc ;if _bge <=len (_cfb .Data )-1&&_bge < _aga +_cfb .RowStride {_aad [_ccc ]=_cfb .Data [_bge ];}else {_aad [_ccc ]=0x00;
};_bge =_aga +_cfb .RowStride +_gba +_ccc ;if _bge <=len (_cfb .Data )-1&&_bge < _aga +(2*_cfb .RowStride ){_cdfc [_ccc ]=_cfb .Data [_bge ];}else {_cdfc [_ccc ]=0x00;};};_gaf =_bb .BigEndian .Uint32 (_aad );_gcb =_bb .BigEndian .Uint32 (_cdfc );_gcb &=_gaf ;
_gcb &=_gcb <<1;_gcb &=0xaaaaaaaa;_gaf =_gcb |(_gcb <<7);_cad =byte (_gaf >>24);_ccdc =byte ((_gaf >>8)&0xff);_bge =_bac +_gbf ;if _bge +1==len (_eeca .Data )-1||_bge +1>=_bac +_eeca .RowStride {_eeca .Data [_bge ]=_dae [_cad ];if _becc =_eeca .SetByte (_bge ,_dae [_cad ]);
_becc !=nil {return _c .Wrapf (_becc ,_bbd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bge );};}else {_ede =(uint16 (_dae [_cad ])<<8)|uint16 (_dae [_ccdc ]);if _becc =_eeca .setTwoBytes (_bge ,_ede );_becc !=nil {return _c .Wrapf (_becc ,_bbd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bge );
};_gbf ++;};};};return nil ;};func (_gdaaf *ClassedPoints )Less (i ,j int )bool {return _gdaaf ._gdcd (i ,j )};func _fggg (_baf ,_edb int )int {if _baf > _edb {return _baf ;};return _edb ;};func _ddcd (_dagd *_b .Stack )(_bdgff *fillSegment ,_edgc error ){const _dgcc ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _dagd ==nil {return nil ,_c .Error (_dgcc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _dagd .Aux ==nil {return nil ,_c .Error (_dgcc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_gddc ,_afea :=_dagd .Pop ();if !_afea {return nil ,nil ;};_cabee ,_afea :=_gddc .(*fillSegment );if !_afea {return nil ,_c .Error (_dgcc ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_bdgff =&fillSegment {_cabee ._gbebe ,_cabee ._cagd ,_cabee ._aceff +_cabee ._ggdbc ,_cabee ._ggdbc };_dagd .Aux .Push (_cabee );return _bdgff ,nil ;};func (_affb *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_fedf *Boxes ,_gbac error ){const _egae ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _affb ==nil {return nil ,_c .Error (_egae ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_c .Error (_egae ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _fedf ,_gbac =_affb .connComponentsBB (connectivity );_gbac !=nil {return nil ,_c .Wrap (_gbac ,_egae ,"");};}else {if _fedf ,_gbac =_affb .connComponentsBitmapsBB (bms ,connectivity );_gbac !=nil {return nil ,_c .Wrap (_gbac ,_egae ,"");
};};return _fedf ,nil ;};func (_aeef *Boxes )selectWithIndicator (_fgde *_b .NumSlice )(_baad *Boxes ,_agea error ){const _beeg ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _aeef ==nil {return nil ,_c .Error (_beeg ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _fgde ==nil {return nil ,_c .Error (_beeg ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_fgde )!=len (*_aeef ){return nil ,_c .Error (_beeg ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _bafd ,_cebb int ;for _ccda :=0;_ccda < len (*_fgde );_ccda ++{if _bafd ,_agea =_fgde .GetInt (_ccda );_agea !=nil {return nil ,_c .Wrap (_agea ,_beeg ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _bafd ==1{_cebb ++;
};};if _cebb ==len (*_aeef ){return _aeef ,nil ;};_bcda :=Boxes {};for _cgea :=0;_cgea < len (*_fgde );_cgea ++{_bafd =int ((*_fgde )[_cgea ]);if _bafd ==0{continue ;};_bcda =append (_bcda ,(*_aeef )[_cgea ]);};_baad =&_bcda ;return _baad ,nil ;};const (SelDontCare SelectionValue =iota ;
SelHit ;SelMiss ;);func _dbbf (_cfbf ,_efcg *Bitmap ,_ege ,_gedb ,_cacag ,_acdd ,_ebe ,_eace ,_aeab ,_fgeb int ,_bebg CombinationOperator )error {var _fbag int ;_adfad :=func (){_fbag ++;_cacag +=_efcg .RowStride ;_acdd +=_cfbf .RowStride ;_ebe +=_cfbf .RowStride };
for _fbag =_ege ;_fbag < _gedb ;_adfad (){var _baggb uint16 ;_cggg :=_cacag ;for _ecbg :=_acdd ;_ecbg <=_ebe ;_ecbg ++{_bgcd ,_cgfe :=_efcg .GetByte (_cggg );if _cgfe !=nil {return _cgfe ;};_gfg ,_cgfe :=_cfbf .GetByte (_ecbg );if _cgfe !=nil {return _cgfe ;
};_baggb =(_baggb |uint16 (_gfg ))<<uint (_fgeb );_gfg =byte (_baggb >>8);if _ecbg ==_ebe {_gfg =_bcbc (uint (_eace ),_gfg );};if _cgfe =_efcg .SetByte (_cggg ,_bdgb (_bgcd ,_gfg ,_bebg ));_cgfe !=nil {return _cgfe ;};_cggg ++;_baggb <<=uint (_aeab );};
};return nil ;};func _ffb ()(_dbe [256]uint64 ){for _ca :=0;_ca < 256;_ca ++{if _ca &0x01!=0{_dbe [_ca ]|=0xff;};if _ca &0x02!=0{_dbe [_ca ]|=0xff00;};if _ca &0x04!=0{_dbe [_ca ]|=0xff0000;};if _ca &0x08!=0{_dbe [_ca ]|=0xff000000;};if _ca &0x10!=0{_dbe [_ca ]|=0xff00000000;
};if _ca &0x20!=0{_dbe [_ca ]|=0xff0000000000;};if _ca &0x40!=0{_dbe [_ca ]|=0xff000000000000;};if _ca &0x80!=0{_dbe [_ca ]|=0xff00000000000000;};};return _dbe ;};func TstImageBitmapInverseData ()[]byte {_cdfd :=_egfb .Copy ();_cdfd .InverseData ();return _cdfd .Data ;
};func (_beba *byWidth )Len ()int {return len (_beba .Values )};type MorphOperation int ;func (_abaea *ClassedPoints )XAtIndex (i int )float32 {return (*_abaea .Points )[_abaea .IntSlice [i ]].X };func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_bgdb float64 ,_daee error ){const _cebc ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_c .Error (_cebc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_c .Error (_cebc ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_c .Error (_cebc ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_cfcc ,_fcgb :=bm1 .Width ,bm1 .Height ;_deebb ,_edba :=bm2 .Width ,bm2 .Height ;
_adeb :=_fdcg (_cfcc -_deebb );if _adeb > maxDiffW {return 0,nil ;};_agfd :=_fdcg (_fcgb -_edba );if _agfd > maxDiffH {return 0,nil ;};var _ddaf ,_eefd int ;if delX >=0{_ddaf =int (delX +0.5);}else {_ddaf =int (delX -0.5);};if delY >=0{_eefd =int (delY +0.5);
}else {_eefd =int (delY -0.5);};_eeff :=_fggg (_eefd ,0);_cbfd :=_aagb (_edba +_eefd ,_fcgb );_abde :=bm1 .RowStride *_eeff ;_afece :=bm2 .RowStride *(_eeff -_eefd );_daf :=_fggg (_ddaf ,0);_agdg :=_aagb (_deebb +_ddaf ,_cfcc );_ddgb :=bm2 .RowStride ;
var _eggd ,_cfcg int ;if _ddaf >=8{_eggd =_ddaf >>3;_abde +=_eggd ;_daf -=_eggd <<3;_agdg -=_eggd <<3;_ddaf &=7;}else if _ddaf <=-8{_cfcg =-((_ddaf +7)>>3);_afece +=_cfcg ;_ddgb -=_cfcg ;_ddaf +=_cfcg <<3;};if _daf >=_agdg ||_eeff >=_cbfd {return 0,nil ;
};_fbee :=(_agdg +7)>>3;var (_efbgae ,_ebgc ,_bageg byte ;_bfcfb ,_ccdg ,_aadd int ;);switch {case _ddaf ==0:for _aadd =_eeff ;_aadd < _cbfd ;_aadd ,_abde ,_afece =_aadd +1,_abde +bm1 .RowStride ,_afece +bm2 .RowStride {for _ccdg =0;_ccdg < _fbee ;_ccdg ++{_bageg =bm1 .Data [_abde +_ccdg ]&bm2 .Data [_afece +_ccdg ];
_bfcfb +=tab [_bageg ];};};case _ddaf > 0:if _ddgb < _fbee {for _aadd =_eeff ;_aadd < _cbfd ;_aadd ,_abde ,_afece =_aadd +1,_abde +bm1 .RowStride ,_afece +bm2 .RowStride {_efbgae ,_ebgc =bm1 .Data [_abde ],bm2 .Data [_afece ]>>uint (_ddaf );_bageg =_efbgae &_ebgc ;
_bfcfb +=tab [_bageg ];for _ccdg =1;_ccdg < _ddgb ;_ccdg ++{_efbgae ,_ebgc =bm1 .Data [_abde +_ccdg ],(bm2 .Data [_afece +_ccdg ]>>uint (_ddaf ))|(bm2 .Data [_afece +_ccdg -1]<<uint (8-_ddaf ));_bageg =_efbgae &_ebgc ;_bfcfb +=tab [_bageg ];};_efbgae =bm1 .Data [_abde +_ccdg ];
_ebgc =bm2 .Data [_afece +_ccdg -1]<<uint (8-_ddaf );_bageg =_efbgae &_ebgc ;_bfcfb +=tab [_bageg ];};}else {for _aadd =_eeff ;_aadd < _cbfd ;_aadd ,_abde ,_afece =_aadd +1,_abde +bm1 .RowStride ,_afece +bm2 .RowStride {_efbgae ,_ebgc =bm1 .Data [_abde ],bm2 .Data [_afece ]>>uint (_ddaf );
_bageg =_efbgae &_ebgc ;_bfcfb +=tab [_bageg ];for _ccdg =1;_ccdg < _fbee ;_ccdg ++{_efbgae =bm1 .Data [_abde +_ccdg ];_ebgc =(bm2 .Data [_afece +_ccdg ]>>uint (_ddaf ))|(bm2 .Data [_afece +_ccdg -1]<<uint (8-_ddaf ));_bageg =_efbgae &_ebgc ;_bfcfb +=tab [_bageg ];
};};};default:if _fbee < _ddgb {for _aadd =_eeff ;_aadd < _cbfd ;_aadd ,_abde ,_afece =_aadd +1,_abde +bm1 .RowStride ,_afece +bm2 .RowStride {for _ccdg =0;_ccdg < _fbee ;_ccdg ++{_efbgae =bm1 .Data [_abde +_ccdg ];_ebgc =bm2 .Data [_afece +_ccdg ]<<uint (-_ddaf );
_ebgc |=bm2 .Data [_afece +_ccdg +1]>>uint (8+_ddaf );_bageg =_efbgae &_ebgc ;_bfcfb +=tab [_bageg ];};};}else {for _aadd =_eeff ;_aadd < _cbfd ;_aadd ,_abde ,_afece =_aadd +1,_abde +bm1 .RowStride ,_afece +bm2 .RowStride {for _ccdg =0;_ccdg < _fbee -1;
_ccdg ++{_efbgae =bm1 .Data [_abde +_ccdg ];_ebgc =bm2 .Data [_afece +_ccdg ]<<uint (-_ddaf );_ebgc |=bm2 .Data [_afece +_ccdg +1]>>uint (8+_ddaf );_bageg =_efbgae &_ebgc ;_bfcfb +=tab [_bageg ];};_efbgae =bm1 .Data [_abde +_ccdg ];_ebgc =bm2 .Data [_afece +_ccdg ]<<uint (-_ddaf );
_bageg =_efbgae &_ebgc ;_bfcfb +=tab [_bageg ];};};};_bgdb =float64 (_bfcfb )*float64 (_bfcfb )/(float64 (area1 )*float64 (area2 ));return _bgdb ,nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_a .Rectangle ;};func _bcc (_fee ,_gbe *Bitmap ,_bgg int ,_fcf []byte ,_cab int )(_dfcg error ){const _ccb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_ggf ,_cff ,_cgg ,_adc ,_fad ,_ccd ,_ega ,_fca int ;_gfe ,_cggb ,_fccf ,_dga uint32 ;_bda ,_dge byte ;_cbe uint16 ;);_cbg :=make ([]byte ,4);_cgc :=make ([]byte ,4);for _cgg =0;_cgg < _fee .Height -1;_cgg ,_adc =_cgg +2,_adc +1{_ggf =_cgg *_fee .RowStride ;
_cff =_adc *_gbe .RowStride ;for _fad ,_ccd =0,0;_fad < _cab ;_fad ,_ccd =_fad +4,_ccd +1{for _ega =0;_ega < 4;_ega ++{_fca =_ggf +_fad +_ega ;if _fca <=len (_fee .Data )-1&&_fca < _ggf +_fee .RowStride {_cbg [_ega ]=_fee .Data [_fca ];}else {_cbg [_ega ]=0x00;
};_fca =_ggf +_fee .RowStride +_fad +_ega ;if _fca <=len (_fee .Data )-1&&_fca < _ggf +(2*_fee .RowStride ){_cgc [_ega ]=_fee .Data [_fca ];}else {_cgc [_ega ]=0x00;};};_gfe =_bb .BigEndian .Uint32 (_cbg );_cggb =_bb .BigEndian .Uint32 (_cgc );_fccf =_gfe &_cggb ;
_fccf |=_fccf <<1;_dga =_gfe |_cggb ;_dga &=_dga <<1;_cggb =_fccf |_dga ;_cggb &=0xaaaaaaaa;_gfe =_cggb |(_cggb <<7);_bda =byte (_gfe >>24);_dge =byte ((_gfe >>8)&0xff);_fca =_cff +_ccd ;if _fca +1==len (_gbe .Data )-1||_fca +1>=_cff +_gbe .RowStride {if _dfcg =_gbe .SetByte (_fca ,_fcf [_bda ]);
_dfcg !=nil {return _c .Wrapf (_dfcg ,_ccb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fca );};}else {_cbe =(uint16 (_fcf [_bda ])<<8)|uint16 (_fcf [_dge ]);if _dfcg =_gbe .setTwoBytes (_fca ,_cbe );_dfcg !=nil {return _c .Wrapf (_dfcg ,_ccb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fca );
};_ccd ++;};};};return nil ;};func (_fddcb *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _edabb ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_fddcb .Values )==0{return nil ,_c .Error (_edabb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_dde :=&BitmapsArray {};_fddcb .SortByWidth ();_afdccf :=-1;_edgb :=-1;for _cedfc :=0;_cedfc < len (_fddcb .Values );_cedfc ++{_fafg :=_fddcb .Values [_cedfc ].Width ;if _fafg > _afdccf {_afdccf =_fafg ;_edgb ++;_dde .Values =append (_dde .Values ,&Bitmaps {});
};_dde .Values [_edgb ].AddBitmap (_fddcb .Values [_cedfc ]);};return _dde ,nil ;};func (_ggcc *Bitmaps )CountPixels ()*_b .NumSlice {_acgc :=&_b .NumSlice {};for _ ,_gdef :=range _ggcc .Values {_acgc .AddInt (_gdef .CountPixels ());};return _acgc ;};func _babb (_efcf *Bitmap ,_bagb int )(*Bitmap ,error ){const _dcba ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _efcf ==nil {return nil ,_c .Error (_dcba ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bagb <=0{return nil ,_c .Error (_dcba ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _bagb ==1{_cdfee ,_eefde :=_dgbdf (nil ,_efcf );if _eefde !=nil {return nil ,_c .Wrap (_eefde ,_dcba ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _cdfee ,nil ;};_agadb ,_gdeg :=_fed (_efcf ,_bagb ,_bagb );if _gdeg !=nil {return nil ,_c .Wrap (_gdeg ,_dcba ,"");
};return _agadb ,nil ;};func _begc (_ggfaa ,_degb *Bitmap ,_ccad *Selection )(*Bitmap ,error ){const _agac ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _befc ,_bdgg int ;if _degb ==nil {return nil ,_c .Error (_agac ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _ccad ==nil {return nil ,_c .Error (_agac ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_befc =_ccad .Width ;_bdgg =_ccad .Height ;if _befc ==0||_bdgg ==0{return nil ,_c .Error (_agac ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _ggfaa ==nil {return _degb .createTemplate (),nil ;};if _gcfa :=_ggfaa .resizeImageData (_degb );_gcfa !=nil {return nil ,_gcfa ;};return _ggfaa ,nil ;};func (_fdg *Bitmap )Copy ()*Bitmap {_ggdb :=make ([]byte ,len (_fdg .Data ));copy (_ggdb ,_fdg .Data );
return &Bitmap {Width :_fdg .Width ,Height :_fdg .Height ,RowStride :_fdg .RowStride ,Data :_ggdb ,Color :_fdg .Color ,Text :_fdg .Text ,BitmapNumber :_fdg .BitmapNumber ,Special :_fdg .Special };};func _ebdeg (_ebea ,_baggf int ,_gdde string )*Selection {_bbcd :=&Selection {Height :_ebea ,Width :_baggf ,Name :_gdde };
_bbcd .Data =make ([][]SelectionValue ,_ebea );for _aaffg :=0;_aaffg < _ebea ;_aaffg ++{_bbcd .Data [_aaffg ]=make ([]SelectionValue ,_baggf );};return _bbcd ;};type Color int ;func NewClassedPoints (points *Points ,classes _b .IntSlice )(*ClassedPoints ,error ){const _ead ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_c .Error (_ead ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_c .Error (_ead ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_efbf :=&ClassedPoints {Points :points ,IntSlice :classes };if _becgf :=_efbf .validateIntSlice ();_becgf !=nil {return nil ,_c .Wrap (_becgf ,_ead ,"");};return _efbf ,nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _bgec (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func TstFrameBitmapData ()[]byte {return _fdac .Data };func TstWordBitmapWithSpaces (t *_ed .T ,scale ...int )*Bitmap {_caeb :=1;if len (scale )> 0{_caeb =scale [0];};_dddda :=3;_fdbc :=9+7+15+2*_dddda +2*_dddda ;_dgebd :=5+_dddda +5+2*_dddda ;_dcfa :=New (_fdbc *_caeb ,_dgebd *_caeb );
_egbg :=&Bitmaps {};var _ffbg *int ;_dddda *=_caeb ;_acgg :=_dddda ;_ffbg =&_acgg ;_bcfc :=_dddda ;_ccfga :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,1*_caeb );_ccfga =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,_dddda );
_ccfga =TstISymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,1*_caeb );_ccfga =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,_dddda );_ccfga =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,1*_caeb );
_ccfga =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,1*_caeb );_ccfga =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,0);*_ffbg =_dddda ;_bcfc =5*_caeb +_dddda ;_ccfga =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,1*_caeb );
_ccfga =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,_dddda );_ccfga =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,1*_caeb );_ccfga =TstESymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,1*_caeb );
_ccfga =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,1*_caeb );_ccfga =TstESymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,1*_caeb );_ccfga =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_egbg ,_ccfga ,_ffbg ,_bcfc ,0);
TstWriteSymbols (t ,_egbg ,_dcfa );return _dcfa ;};const (Vanilla Color =iota ;Chocolate ;);func (_afc *Boxes )makeSizeIndicator (_debb ,_gece int ,_efg LocationFilter ,_bgd SizeComparison )*_b .NumSlice {_cefb :=&_b .NumSlice {};var _bcag ,_dcbe ,_cadg int ;
for _ ,_cadb :=range *_afc {_bcag =0;_dcbe ,_cadg =_cadb .Dx (),_cadb .Dy ();switch _efg {case LocSelectWidth :if (_bgd ==SizeSelectIfLT &&_dcbe < _debb )||(_bgd ==SizeSelectIfGT &&_dcbe > _debb )||(_bgd ==SizeSelectIfLTE &&_dcbe <=_debb )||(_bgd ==SizeSelectIfGTE &&_dcbe >=_debb ){_bcag =1;
};case LocSelectHeight :if (_bgd ==SizeSelectIfLT &&_cadg < _gece )||(_bgd ==SizeSelectIfGT &&_cadg > _gece )||(_bgd ==SizeSelectIfLTE &&_cadg <=_gece )||(_bgd ==SizeSelectIfGTE &&_cadg >=_gece ){_bcag =1;};case LocSelectIfEither :if (_bgd ==SizeSelectIfLT &&(_cadg < _gece ||_dcbe < _debb ))||(_bgd ==SizeSelectIfGT &&(_cadg > _gece ||_dcbe > _debb ))||(_bgd ==SizeSelectIfLTE &&(_cadg <=_gece ||_dcbe <=_debb ))||(_bgd ==SizeSelectIfGTE &&(_cadg >=_gece ||_dcbe >=_debb )){_bcag =1;
};case LocSelectIfBoth :if (_bgd ==SizeSelectIfLT &&(_cadg < _gece &&_dcbe < _debb ))||(_bgd ==SizeSelectIfGT &&(_cadg > _gece &&_dcbe > _debb ))||(_bgd ==SizeSelectIfLTE &&(_cadg <=_gece &&_dcbe <=_debb ))||(_bgd ==SizeSelectIfGTE &&(_cadg >=_gece &&_dcbe >=_debb )){_bcag =1;
};};_cefb .AddInt (_bcag );};return _cefb ;};func (_aede *ClassedPoints )ySortFunction ()func (_cgbg int ,_gfedc int )bool {return func (_cdac ,_gdbb int )bool {return _aede .YAtIndex (_cdac )< _aede .YAtIndex (_gdbb )};};func (_efgc *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _fcgd ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_efgc .IntSlice .Size (){return 0,_c .Errorf (_fcgd ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_efgc .YAtIndex (i )),nil ;};func _dbda (_eggec *Bitmap ,_bbfc ,_dggg ,_cbeag ,_aadcg int ,_ecdd RasterOperator ){if _bbfc < 0{_cbeag +=_bbfc ;_bbfc =0;};_ebbe :=_bbfc +_cbeag -_eggec .Width ;if _ebbe > 0{_cbeag -=_ebbe ;};if _dggg < 0{_aadcg +=_dggg ;
_dggg =0;};_ddbeb :=_dggg +_aadcg -_eggec .Height ;if _ddbeb > 0{_aadcg -=_ddbeb ;};if _cbeag <=0||_aadcg <=0{return ;};if (_bbfc &7)==0{_bade (_eggec ,_bbfc ,_dggg ,_cbeag ,_aadcg ,_ecdd );}else {_gabbg (_eggec ,_bbfc ,_dggg ,_cbeag ,_aadcg ,_ecdd );};
};func (_dec *Bitmap )ClipRectangle (box *_a .Rectangle )(_cee *Bitmap ,_fbdg *_a .Rectangle ,_febg error ){const _adb ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_c .Error (_adb ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};_eef ,_cef :=_dec .Width ,_dec .Height ;_efb :=_a .Rect (0,0,_eef ,_cef );if !box .Overlaps (_efb ){return nil ,nil ,_c .Error (_adb ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_fbb :=box .Intersect (_efb );
_afag ,_bacb :=_fbb .Min .X ,_fbb .Min .Y ;_ggd ,_eede :=_fbb .Dx (),_fbb .Dy ();_cee =New (_ggd ,_eede );_cee .Text =_dec .Text ;if _febg =_cee .RasterOperation (0,0,_ggd ,_eede ,PixSrc ,_dec ,_afag ,_bacb );_febg !=nil {return nil ,nil ,_c .Wrap (_febg ,_adb ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_fbdg =&_fbb ;return _cee ,_fbdg ,nil ;};type shift int ;type LocationFilter int ;func _gcf ()(_gg [256]uint16 ){for _bbe :=0;_bbe < 256;_bbe ++{if _bbe &0x01!=0{_gg [_bbe ]|=0x3;};if _bbe &0x02!=0{_gg [_bbe ]|=0xc;};if _bbe &0x04!=0{_gg [_bbe ]|=0x30;
};if _bbe &0x08!=0{_gg [_bbe ]|=0xc0;};if _bbe &0x10!=0{_gg [_bbe ]|=0x300;};if _bbe &0x20!=0{_gg [_bbe ]|=0xc00;};if _bbe &0x40!=0{_gg [_bbe ]|=0x3000;};if _bbe &0x80!=0{_gg [_bbe ]|=0xc000;};};return _gg ;};func init (){const _efccf ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_fdac =New (50,40);var _defg error ;_fdac ,_defg =_fdac .AddBorder (2,1);if _defg !=nil {panic (_c .Wrap (_defg ,_efccf ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_egfb ,_defg =NewWithData (50,22,_dfdc );if _defg !=nil {panic (_c .Wrap (_defg ,_efccf ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func (_aaabc *Bitmaps )SortByHeight (){_adgef :=(*byHeight )(_aaabc );_fg .Sort (_adgef )};func (_edcb *Bitmaps )AddBox (box *_a .Rectangle ){_edcb .Boxes =append (_edcb .Boxes ,box )};func (_acede *ClassedPoints )SortByX (){_acede ._gdcd =_acede .xSortFunction ();
_fg .Sort (_acede )};func TstASymbol (t *_ed .T )*Bitmap {t .Helper ();_dbde :=New (6,6);_f .NoError (t ,_dbde .SetPixel (1,0,1));_f .NoError (t ,_dbde .SetPixel (2,0,1));_f .NoError (t ,_dbde .SetPixel (3,0,1));_f .NoError (t ,_dbde .SetPixel (4,0,1));
_f .NoError (t ,_dbde .SetPixel (5,1,1));_f .NoError (t ,_dbde .SetPixel (1,2,1));_f .NoError (t ,_dbde .SetPixel (2,2,1));_f .NoError (t ,_dbde .SetPixel (3,2,1));_f .NoError (t ,_dbde .SetPixel (4,2,1));_f .NoError (t ,_dbde .SetPixel (5,2,1));_f .NoError (t ,_dbde .SetPixel (0,3,1));
_f .NoError (t ,_dbde .SetPixel (5,3,1));_f .NoError (t ,_dbde .SetPixel (0,4,1));_f .NoError (t ,_dbde .SetPixel (5,4,1));_f .NoError (t ,_dbde .SetPixel (1,5,1));_f .NoError (t ,_dbde .SetPixel (2,5,1));_f .NoError (t ,_dbde .SetPixel (3,5,1));_f .NoError (t ,_dbde .SetPixel (4,5,1));
_f .NoError (t ,_dbde .SetPixel (5,5,1));return _dbde ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_efce *ClassedPoints )Swap (i ,j int ){_efce .IntSlice [i ],_efce .IntSlice [j ]=_efce .IntSlice [j ],_efce .IntSlice [i ];
};func _edcc (_cgfdc *_b .Stack ,_ccdaf ,_faebg ,_bcaga ,_afdcc ,_ccedg int ,_ddafd *_a .Rectangle )(_adfe error ){const _acada ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _cgfdc ==nil {return _c .Error (_acada ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _ddafd ==nil {return _c .Error (_acada ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_ddafd .Min .X =_b .Min (_ddafd .Min .X ,_ccdaf );_ddafd .Max .X =_b .Max (_ddafd .Max .X ,_faebg );_ddafd .Min .Y =_b .Min (_ddafd .Min .Y ,_bcaga );_ddafd .Max .Y =_b .Max (_ddafd .Max .Y ,_bcaga );if !(_bcaga +_afdcc >=0&&_bcaga +_afdcc <=_ccedg ){return nil ;
};if _cgfdc .Aux ==nil {return _c .Error (_acada ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _edbd *fillSegment ;_dgfg ,_afadc :=_cgfdc .Aux .Pop ();if _afadc {if _edbd ,_afadc =_dgfg .(*fillSegment );
!_afadc {return _c .Error (_acada ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_edbd =&fillSegment {};
};_edbd ._gbebe =_ccdaf ;_edbd ._cagd =_faebg ;_edbd ._aceff =_bcaga ;_edbd ._ggdbc =_afdcc ;_cgfdc .Push (_edbd );return nil ;};func (_begfa *Boxes )Add (box *_a .Rectangle )error {if _begfa ==nil {return _c .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_begfa =append (*_begfa ,box );return nil ;};func (_ddee *byHeight )Swap (i ,j int ){_ddee .Values [i ],_ddee .Values [j ]=_ddee .Values [j ],_ddee .Values [i ];if _ddee .Boxes !=nil {_ddee .Boxes [i ],_ddee .Boxes [j ]=_ddee .Boxes [j ],_ddee .Boxes [i ];
};};func _dgbdf (_fecb ,_caa *Bitmap )(*Bitmap ,error ){if _caa ==nil {return nil ,_c .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _caa ==_fecb {return _fecb ,nil ;
};if _fecb ==nil {_fecb =_caa .createTemplate ();copy (_fecb .Data ,_caa .Data );return _fecb ,nil ;};_efab :=_fecb .resizeImageData (_caa );if _efab !=nil {return nil ,_c .Wrap (_efab ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_fecb .Text =_caa .Text ;copy (_fecb .Data ,_caa .Data );return _fecb ,nil ;};func (_afdf *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _eecd ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_afdf .Values )==0{return nil ,_c .Error (_eecd ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_eggf :=&BitmapsArray {};_afdf .SortByHeight ();_gdfc :=-1;_bcagb :=-1;for _adcb :=0;_adcb < len (_afdf .Values );_adcb ++{_bgac :=_afdf .Values [_adcb ].Height ;if _bgac > _gdfc {_gdfc =_bgac ;_bcagb ++;_eggf .Values =append (_eggf .Values ,&Bitmaps {});
};_eggf .Values [_bcagb ].AddBitmap (_afdf .Values [_adcb ]);};return _eggf ,nil ;};func (_gdfgb Points )Size ()int {return len (_gdfgb )};const _gadc =5000;func (_bfaa *Bitmap )ToImage ()_a .Image {_eag ,_eaeb :=_fc .NewImage (_bfaa .Width ,_bfaa .Height ,1,1,_bfaa .Data ,nil ,nil );
if _eaeb !=nil {_dc .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_eaeb );
};return _eag ;};func (_dbb *Bitmap )setEightPartlyBytes (_ebf ,_eaf int ,_ggac uint64 )(_gebb error ){var (_cabed byte ;_aaff int ;);const _aebf ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _bcf :=1;_bcf <=_eaf ;_bcf ++{_aaff =64-_bcf *8;_cabed =byte (_ggac >>uint (_aaff )&0xff);_dc .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_cabed ,_ebf ,_ebf +_bcf -1,_eaf ,_aaff );
if _gebb =_dbb .SetByte (_ebf +_bcf -1,_cabed );_gebb !=nil {return _c .Wrap (_gebb ,_aebf ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_eedc :=_dbb .RowStride *8-_dbb .Width ;if _eedc ==0{return nil ;};_aaff -=8;_cabed =byte (_ggac >>uint (_aaff )&0xff)<<uint (_eedc );
if _gebb =_dbb .SetByte (_ebf +_eaf ,_cabed );_gebb !=nil {return _c .Wrap (_gebb ,_aebf ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_gec *Bitmap )String ()string {var _bae ="\u000a";for _cbea :=0;_cbea < _gec .Height ;_cbea ++{var _fgac string ;
for _bfe :=0;_bfe < _gec .Width ;_bfe ++{_bcad :=_gec .GetPixel (_bfe ,_cbea );if _bcad {_fgac +="\u0031";}else {_fgac +="\u0030";};};_bae +=_fgac +"\u000a";};return _bae ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _dgbdf (d ,s )};func (_dcdg *byHeight )Len ()int {return len (_dcdg .Values )};
func _gbfac (_bdfa ,_fddfb *Bitmap ,_ggcfa ,_abfdd int )(_gbeb error ){const _fgdf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_dcebc ,_gacg ,_acfc ,_bffg int ;_dbae ,_face ,_cdee ,_dcac ,_dbdc ,_fabgf ,_dgab ,_gdggb byte ;
);for _dcebc =0;_dcebc < _ggcfa ;_dcebc ++{_acfc =_dcebc *_bdfa .RowStride ;_bffg =_dcebc *_fddfb .RowStride ;for _gacg =0;_gacg < _abfdd ;_gacg ++{if _dbae ,_gbeb =_bdfa .GetByte (_acfc +_gacg );_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _face ,_gbeb =_fddfb .GetByte (_bffg +_gacg );_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _dcebc > 0{if _cdee ,_gbeb =_bdfa .GetByte (_acfc -_bdfa .RowStride +_gacg );
_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_dbae |=_cdee |(_cdee <<1)|(_cdee >>1);if _gacg > 0{if _gdggb ,_gbeb =_bdfa .GetByte (_acfc -_bdfa .RowStride +_gacg -1);_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_dbae |=_gdggb <<7;};if _gacg < _abfdd -1{if _gdggb ,_gbeb =_bdfa .GetByte (_acfc -_bdfa .RowStride +_gacg +1);_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_dbae |=_gdggb >>7;
};};if _gacg > 0{if _dcac ,_gbeb =_bdfa .GetByte (_acfc +_gacg -1);_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u006a\u0020\u003e \u0030");};_dbae |=_dcac <<7;};_dbae &=_face ;if _dbae ==0||^_dbae ==0{if _gbeb =_bdfa .SetByte (_acfc +_gacg ,_dbae );_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");
};};for {_dgab =_dbae ;_dbae =(_dbae |(_dbae >>1)|(_dbae <<1))&_face ;if (_dbae ^_dgab )==0{if _gbeb =_bdfa .SetByte (_acfc +_gacg ,_dbae );_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _dcebc =_ggcfa -1;_dcebc >=0;_dcebc --{_acfc =_dcebc *_bdfa .RowStride ;_bffg =_dcebc *_fddfb .RowStride ;for _gacg =_abfdd -1;_gacg >=0;_gacg --{if _dbae ,_gbeb =_bdfa .GetByte (_acfc +_gacg );_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _face ,_gbeb =_fddfb .GetByte (_bffg +_gacg );_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dcebc < _ggcfa -1{if _dbdc ,_gbeb =_bdfa .GetByte (_acfc +_bdfa .RowStride +_gacg );
_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_dbae |=_dbdc |(_dbdc <<1)|_dbdc >>1;if _gacg > 0{if _gdggb ,_gbeb =_bdfa .GetByte (_acfc +_bdfa .RowStride +_gacg -1);
_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_dbae |=_gdggb <<7;};if _gacg < _abfdd -1{if _gdggb ,_gbeb =_bdfa .GetByte (_acfc +_bdfa .RowStride +_gacg +1);
_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_dbae |=_gdggb >>7;};};if _gacg < _abfdd -1{if _fabgf ,_gbeb =_bdfa .GetByte (_acfc +_gacg +1);_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_dbae |=_fabgf >>7;};_dbae &=_face ;if _dbae ==0||(^_dbae )==0{if _gbeb =_bdfa .SetByte (_acfc +_gacg ,_dbae );_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_dgab =_dbae ;
_dbae =(_dbae |(_dbae >>1)|(_dbae <<1))&_face ;if (_dbae ^_dgab )==0{if _gbeb =_bdfa .SetByte (_acfc +_gacg ,_dbae );_gbeb !=nil {return _c .Wrap (_gbeb ,_fgdf ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func _ddb (_dcb *Bitmap ,_cge ...int )(_fd *Bitmap ,_gfae error ){const _fbd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _dcb ==nil {return nil ,_c .Error (_fbd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_cge )==0||len (_cge )> 4{return nil ,_c .Error (_fbd ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _cge [0]<=0{_dc .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_fd ,_gfae =_dgbdf (nil ,_dcb );if _gfae !=nil {return nil ,_c .Wrap (_gfae ,_fbd ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _fd ,nil ;};_ea :=_gcde ();_fd =_dcb ;for _bdff ,_faa :=range _cge {if _faa <=0{break ;};_fd ,_gfae =_fcc (_fd ,_faa ,_ea );if _gfae !=nil {return nil ,_c .Wrapf (_gfae ,_fbd ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_bdff );
};};return _fd ,nil ;};type byWidth Bitmaps ;func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _fdd ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_daa :=_afd (width ,height );_daa .Data =data ;if len (data )< height *_daa .RowStride {return nil ,_c .Errorf (_fdd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_daa .RowStride );
};return _daa ,nil ;};