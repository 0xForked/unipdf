//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_ag "encoding/binary";_af "github.com/stretchr/testify/require";_aef "github.com/unidoc/unipdf/v3/common";_cb "github.com/unidoc/unipdf/v3/internal/bitwise";_cd "github.com/unidoc/unipdf/v3/internal/imageutil";_ab "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_f "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_abc "image";_de "math";_c "sort";_d "strings";_ae "testing";);func New (width ,height int )*Bitmap {_efac :=_dgd (width ,height );_efac .Data =make ([]byte ,height *_efac .RowStride );return _efac ;
};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_aaae *Bitmap )equivalent (_bdeg *Bitmap )bool {if _aaae ==_bdeg {return true ;};if !_aaae .SizesEqual (_bdeg ){return false ;
};_efbb :=_daeg (_aaae ,_bdeg ,CmbOpXor );_afg :=_aaae .countPixels ();_deda :=int (0.25*float32 (_afg ));if _efbb .thresholdPixelSum (_deda ){return false ;};var (_ggdda [9][9]int ;_baa [18][9]int ;_afe [9][18]int ;_gace int ;_gfc int ;);_eabc :=9;_ddd :=_aaae .Height /_eabc ;
_fga :=_aaae .Width /_eabc ;_cfb ,_fbf :=_ddd /2,_fga /2;if _ddd < _fga {_cfb =_fga /2;_fbf =_ddd /2;};_dgdd :=float64 (_cfb )*float64 (_fbf )*_de .Pi ;_caea :=int (float64 (_ddd *_fga /2)*0.9);_gbdf :=int (float64 (_fga *_ddd /2)*0.9);for _aaca :=0;_aaca < _eabc ;
_aaca ++{_fcbe :=_fga *_aaca +_gace ;var _eaf int ;if _aaca ==_eabc -1{_gace =0;_eaf =_aaae .Width ;}else {_eaf =_fcbe +_fga ;if ((_aaae .Width -_gace )%_eabc )> 0{_gace ++;_eaf ++;};};for _dff :=0;_dff < _eabc ;_dff ++{_aacad :=_ddd *_dff +_gfc ;var _fgbf int ;
if _dff ==_eabc -1{_gfc =0;_fgbf =_aaae .Height ;}else {_fgbf =_aacad +_ddd ;if (_aaae .Height -_gfc )%_eabc > 0{_gfc ++;_fgbf ++;};};var _gfeg ,_agd ,_dabc ,_ecfc int ;_afee :=(_fcbe +_eaf )/2;_fdgc :=(_aacad +_fgbf )/2;for _fgaf :=_fcbe ;_fgaf < _eaf ;
_fgaf ++{for _gfb :=_aacad ;_gfb < _fgbf ;_gfb ++{if _efbb .GetPixel (_fgaf ,_gfb ){if _fgaf < _afee {_gfeg ++;}else {_agd ++;};if _gfb < _fdgc {_ecfc ++;}else {_dabc ++;};};};};_ggdda [_aaca ][_dff ]=_gfeg +_agd ;_baa [_aaca *2][_dff ]=_gfeg ;_baa [_aaca *2+1][_dff ]=_agd ;
_afe [_aaca ][_dff *2]=_ecfc ;_afe [_aaca ][_dff *2+1]=_dabc ;};};for _cged :=0;_cged < _eabc *2-1;_cged ++{for _ecdf :=0;_ecdf < (_eabc -1);_ecdf ++{var _ggg int ;for _bfec :=0;_bfec < 2;_bfec ++{for _ddgf :=0;_ddgf < 2;_ddgf ++{_ggg +=_baa [_cged +_bfec ][_ecdf +_ddgf ];
};};if _ggg > _gbdf {return false ;};};};for _fbed :=0;_fbed < (_eabc -1);_fbed ++{for _aabd :=0;_aabd < ((_eabc *2)-1);_aabd ++{var _cgbe int ;for _dee :=0;_dee < 2;_dee ++{for _agfc :=0;_agfc < 2;_agfc ++{_cgbe +=_afe [_fbed +_dee ][_aabd +_agfc ];};
};if _cgbe > _caea {return false ;};};};for _ggfc :=0;_ggfc < (_eabc -2);_ggfc ++{for _efgf :=0;_efgf < (_eabc -2);_efgf ++{var _bbd ,_gggg int ;for _cff :=0;_cff < 3;_cff ++{for _dfac :=0;_dfac < 3;_dfac ++{if _cff ==_dfac {_bbd +=_ggdda [_ggfc +_cff ][_efgf +_dfac ];
};if (2-_cff )==_dfac {_gggg +=_ggdda [_ggfc +_cff ][_efgf +_dfac ];};};};if _bbd > _gbdf ||_gggg > _gbdf {return false ;};};};for _cfac :=0;_cfac < (_eabc -1);_cfac ++{for _afa :=0;_afa < (_eabc -1);_afa ++{var _efd int ;for _ffc :=0;_ffc < 2;_ffc ++{for _dca :=0;
_dca < 2;_dca ++{_efd +=_ggdda [_cfac +_ffc ][_afa +_dca ];};};if float64 (_efd )> _dgdd {return false ;};};};return true ;};func (_bbbb *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _gbgb ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _dabb :=_bbbb .validateIntSlice ();_dabb !=nil {return nil ,_f .Wrap (_dabb ,_gbgb ,"");};if _bbbb .IntSlice .Size ()==0{return nil ,_f .Error (_gbgb ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_bbbb .SortByY ();var (_gfad []*ClassedPoints ;_bdfa int ;);_agbe :=-1;var _dfbcc *ClassedPoints ;for _cgae :=0;_cgae < len (_bbbb .IntSlice );_cgae ++{_bdfa =int (_bbbb .YAtIndex (_cgae ));if _bdfa !=_agbe {_dfbcc =&ClassedPoints {Points :_bbbb .Points };
_agbe =_bdfa ;_gfad =append (_gfad ,_dfbcc );};_dfbcc .IntSlice =append (_dfbcc .IntSlice ,_bbbb .IntSlice [_cgae ]);};for _ ,_caeba :=range _gfad {_caeba .SortByX ();};return _gfad ,nil ;};func _bcbb (_bcbf ,_cfbe ,_fafdf *Bitmap )(*Bitmap ,error ){const _fbd ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";
if _cfbe ==nil {return nil ,_f .Error (_fbd ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _fafdf ==nil {return nil ,_f .Error (_fbd ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _egdg error ;switch {case _bcbf ==_cfbe :if _egdg =_bcbf .RasterOperation (0,0,_cfbe .Width ,_cfbe .Height ,PixNotSrcAndDst ,_fafdf ,0,0);
_egdg !=nil {return nil ,_f .Wrap (_egdg ,_fbd ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _bcbf ==_fafdf :if _egdg =_bcbf .RasterOperation (0,0,_cfbe .Width ,_cfbe .Height ,PixNotSrcAndDst ,_cfbe ,0,0);_egdg !=nil {return nil ,_f .Wrap (_egdg ,_fbd ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_bcbf ,_egdg =_afad (_bcbf ,_cfbe );if _egdg !=nil {return nil ,_f .Wrap (_egdg ,_fbd ,"");};if _egdg =_bcbf .RasterOperation (0,0,_cfbe .Width ,_cfbe .Height ,PixNotSrcAndDst ,_fafdf ,0,0);_egdg !=nil {return nil ,_f .Wrap (_egdg ,_fbd ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _bcbf ,nil ;};func TstPSymbol (t *_ae .T )*Bitmap {t .Helper ();_dadc :=New (5,8);_af .NoError (t ,_dadc .SetPixel (0,0,1));_af .NoError (t ,_dadc .SetPixel (1,0,1));_af .NoError (t ,_dadc .SetPixel (2,0,1));_af .NoError (t ,_dadc .SetPixel (3,0,1));
_af .NoError (t ,_dadc .SetPixel (4,1,1));_af .NoError (t ,_dadc .SetPixel (0,1,1));_af .NoError (t ,_dadc .SetPixel (4,2,1));_af .NoError (t ,_dadc .SetPixel (0,2,1));_af .NoError (t ,_dadc .SetPixel (4,3,1));_af .NoError (t ,_dadc .SetPixel (0,3,1));
_af .NoError (t ,_dadc .SetPixel (0,4,1));_af .NoError (t ,_dadc .SetPixel (1,4,1));_af .NoError (t ,_dadc .SetPixel (2,4,1));_af .NoError (t ,_dadc .SetPixel (3,4,1));_af .NoError (t ,_dadc .SetPixel (0,5,1));_af .NoError (t ,_dadc .SetPixel (0,6,1));
_af .NoError (t ,_dadc .SetPixel (0,7,1));return _dadc ;};func _ggb (_cbfa ,_dacc int )int {if _cbfa < _dacc {return _cbfa ;};return _dacc ;};func (_ebbd *Bitmap )thresholdPixelSum (_fdd int )bool {var (_ecc int ;_ccc uint8 ;_fcbf byte ;_egc int ;);_fcbb :=_ebbd .RowStride ;
_dedc :=uint (_ebbd .Width &0x07);if _dedc !=0{_ccc =uint8 ((0xff<<(8-_dedc ))&0xff);_fcbb --;};for _gdae :=0;_gdae < _ebbd .Height ;_gdae ++{for _egc =0;_egc < _fcbb ;_egc ++{_fcbf =_ebbd .Data [_gdae *_ebbd .RowStride +_egc ];_ecc +=int (_faf [_fcbf ]);
};if _dedc !=0{_fcbf =_ebbd .Data [_gdae *_ebbd .RowStride +_egc ]&_ccc ;_ecc +=int (_faf [_fcbf ]);};if _ecc > _fdd {return true ;};};return false ;};func _fffad (_dbaa ,_abcd *Bitmap ,_gbdfg ,_bccf int )(*Bitmap ,error ){const _fdgg ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _abcd ==nil {return nil ,_f .Error (_fdgg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gbdfg < 1||_bccf < 1{return nil ,_f .Error (_fdgg ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _gbdfg ==1&&_bccf ==1{_fac ,_eegf :=_afad (_dbaa ,_abcd );if _eegf !=nil {return nil ,_f .Wrap (_eegf ,_fdgg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fac ,nil ;};if _gbdfg ==1||_bccf ==1{_beea :=SelCreateBrick (_bccf ,_gbdfg ,_bccf /2,_gbdfg /2,SelHit );_bbed ,_fgff :=_dafeg (_dbaa ,_abcd ,_beea );if _fgff !=nil {return nil ,_f .Wrap (_fgff ,_fdgg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bbed ,nil ;};_ecfg :=SelCreateBrick (1,_gbdfg ,0,_gbdfg /2,SelHit );_cdbc :=SelCreateBrick (_bccf ,1,_bccf /2,0,SelHit );_ccf ,_beace :=_dafeg (nil ,_abcd ,_ecfg );if _beace !=nil {return nil ,_f .Wrap (_beace ,_fdgg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_dbaa ,_beace =_dafeg (_dbaa ,_ccf ,_cdbc );if _beace !=nil {return nil ,_f .Wrap (_beace ,_fdgg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _dbaa ,nil ;};func (_eadd *Boxes )Add (box *_abc .Rectangle )error {if _eadd ==nil {return _f .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_eadd =append (*_eadd ,box );return nil ;};func _cbfc (_eafdg ,_fbda *Bitmap ,_eegb ,_dfgc int )(*Bitmap ,error ){const _gdbc ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _fbda ==nil {return nil ,_f .Error (_gdbc ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _eegb < 1||_dfgc < 1{return nil ,_f .Error (_gdbc ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _eegb ==1&&_dfgc ==1{return _afad (_eafdg ,_fbda );};
if MorphBC ==SymmetricMorphBC {_ffed ,_baea :=_efcb (_eafdg ,_fbda ,_eegb ,_dfgc );if _baea !=nil {return nil ,_f .Wrap (_baea ,_gdbc ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _ffed ,nil ;};_bbbcf :=_fagdb (_eegb /2,_dfgc /2);
_fbcf :=8*((_bbbcf +7)/8);_feab ,_bgec :=_fbda .AddBorder (_fbcf ,0);if _bgec !=nil {return nil ,_f .Wrapf (_bgec ,_gdbc ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_fbcf );};var _dfca ,_babe *Bitmap ;if _eegb ==1||_dfgc ==1{_egb :=SelCreateBrick (_dfgc ,_eegb ,_dfgc /2,_eegb /2,SelHit );
_dfca ,_bgec =_bgbf (nil ,_feab ,_egb );if _bgec !=nil {return nil ,_f .Wrap (_bgec ,_gdbc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_ddaa :=SelCreateBrick (1,_eegb ,0,_eegb /2,SelHit );
_bcedg ,_aegga :=_gafe (nil ,_feab ,_ddaa );if _aegga !=nil {return nil ,_f .Wrap (_aegga ,_gdbc ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_cfed :=SelCreateBrick (_dfgc ,1,_dfgc /2,0,SelHit );
_dfca ,_aegga =_gafe (nil ,_bcedg ,_cfed );if _aegga !=nil {return nil ,_f .Wrap (_aegga ,_gdbc ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_aegga =_dafeg (_bcedg ,_dfca ,_ddaa );
_aegga !=nil {return nil ,_f .Wrap (_aegga ,_gdbc ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_aegga =_dafeg (_dfca ,_bcedg ,_cfed );_aegga !=nil {return nil ,_f .Wrap (_aegga ,_gdbc ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _babe ,_bgec =_dfca .RemoveBorder (_fbcf );_bgec !=nil {return nil ,_f .Wrap (_bgec ,_gdbc ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _eafdg ==nil {return _babe ,nil ;};if _ ,_bgec =_afad (_eafdg ,_babe );_bgec !=nil {return nil ,_bgec ;};return _eafdg ,nil ;
};func _acca (_bccg *Bitmap )(_caee *Bitmap ,_gagfd int ,_gbfc error ){const _dcae ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _bccg ==nil {return nil ,0,_f .Errorf (_dcae ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};var _faaa ,_dddf *Bitmap ;if _faaa ,_gbfc =_afad (nil ,_bccg );_gbfc !=nil {return nil ,0,_f .Wrap (_gbfc ,_dcae ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_fgga [13]int ;_gbge ,_afcd int ;);_fgbba :=12;_dcaad :=_ab .NewNumSlice (_fgbba +1);
_badg :=_ab .NewNumSlice (_fgbba +1);var _gccg *Boxes ;for _bfed :=0;_bfed <=_fgbba ;_bfed ++{if _bfed ==0{if _dddf ,_gbfc =_afad (nil ,_faaa );_gbfc !=nil {return nil ,0,_f .Wrap (_gbfc ,_dcae ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _dddf ,_gbfc =_beacc (_faaa ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});
_gbfc !=nil {return nil ,0,_f .Wrap (_gbfc ,_dcae ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _gccg ,_gbfc =_dddf .connComponentsBB (4);_gbfc !=nil {return nil ,0,_f .Wrap (_gbfc ,_dcae ,"");};_fgga [_bfed ]=len (*_gccg );
_dcaad .AddInt (_fgga [_bfed ]);switch _bfed {case 0:_gbge =_fgga [0];default:_afcd =_fgga [_bfed -1]-_fgga [_bfed ];_badg .AddInt (_afcd );};_faaa =_dddf ;};_dddde :=true ;_cbeg :=2;var _afeed ,_bddf int ;for _bae :=1;_bae < len (*_badg );_bae ++{if _afeed ,_gbfc =_dcaad .GetInt (_bae );
_gbfc !=nil {return nil ,0,_f .Wrap (_gbfc ,_dcae ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _dddde &&_afeed < int (0.3*float32 (_gbge )){_cbeg =_bae +1;_dddde =false ;
};if _afcd ,_gbfc =_badg .GetInt (_bae );_gbfc !=nil {return nil ,0,_f .Wrap (_gbfc ,_dcae ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _afcd > _bddf {_bddf =_afcd ;};};_abda :=_bccg .XResolution ;if _abda ==0{_abda =150;
};if _abda > 110{_cbeg ++;};if _cbeg < 2{_aef .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_cbeg =2;};_gagfd =_cbeg +1;if _caee ,_gbfc =_efcb (nil ,_bccg ,_cbeg +1,1);_gbfc !=nil {return nil ,0,_f .Wrap (_gbfc ,_dcae ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _caee ,_gagfd ,nil ;
};func _bbf (_eda ,_efc *Bitmap ,_fab int ,_aaaa []byte ,_edf int )(_fcdg error ){const _daa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_bfb ,_dgbe ,_ggcd ,_ecd ,_gfg ,_fcb ,_add ,_bdde int ;
_aed ,_deb uint32 ;_ggd ,_fcg byte ;_eba uint16 ;);_bfba :=make ([]byte ,4);_gbd :=make ([]byte ,4);for _ggcd =0;_ggcd < _eda .Height -1;_ggcd ,_ecd =_ggcd +2,_ecd +1{_bfb =_ggcd *_eda .RowStride ;_dgbe =_ecd *_efc .RowStride ;for _gfg ,_fcb =0,0;_gfg < _edf ;
_gfg ,_fcb =_gfg +4,_fcb +1{for _add =0;_add < 4;_add ++{_bdde =_bfb +_gfg +_add ;if _bdde <=len (_eda .Data )-1&&_bdde < _bfb +_eda .RowStride {_bfba [_add ]=_eda .Data [_bdde ];}else {_bfba [_add ]=0x00;};_bdde =_bfb +_eda .RowStride +_gfg +_add ;if _bdde <=len (_eda .Data )-1&&_bdde < _bfb +(2*_eda .RowStride ){_gbd [_add ]=_eda .Data [_bdde ];
}else {_gbd [_add ]=0x00;};};_aed =_ag .BigEndian .Uint32 (_bfba );_deb =_ag .BigEndian .Uint32 (_gbd );_deb &=_aed ;_deb &=_deb <<1;_deb &=0xaaaaaaaa;_aed =_deb |(_deb <<7);_ggd =byte (_aed >>24);_fcg =byte ((_aed >>8)&0xff);_bdde =_dgbe +_fcb ;if _bdde +1==len (_efc .Data )-1||_bdde +1>=_dgbe +_efc .RowStride {_efc .Data [_bdde ]=_aaaa [_ggd ];
if _fcdg =_efc .SetByte (_bdde ,_aaaa [_ggd ]);_fcdg !=nil {return _f .Wrapf (_fcdg ,_daa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bdde );};}else {_eba =(uint16 (_aaaa [_ggd ])<<8)|uint16 (_aaaa [_fcg ]);if _fcdg =_efc .setTwoBytes (_bdde ,_eba );
_fcdg !=nil {return _f .Wrapf (_fcdg ,_daa ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bdde );};_fcb ++;};
};};return nil ;};func (_gdegg *Bitmaps )selectByIndicator (_bdbd *_ab .NumSlice )(_adfa *Bitmaps ,_eefc error ){const _aedd ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _gdegg ==nil {return nil ,_f .Error (_aedd ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _bdbd ==nil {return nil ,_f .Error (_aedd ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_gdegg .Values )==0{return _gdegg ,nil ;};if len (*_bdbd )!=len (_gdegg .Values ){return nil ,_f .Errorf (_aedd ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_bdbd ),len (_gdegg .Values ));
};var _beecb ,_gcfa ,_bfbf int ;for _gcfa =0;_gcfa < len (*_bdbd );_gcfa ++{if _beecb ,_eefc =_bdbd .GetInt (_gcfa );_eefc !=nil {return nil ,_f .Wrap (_eefc ,_aedd ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _beecb ==1{_bfbf ++;
};};if _bfbf ==len (_gdegg .Values ){return _gdegg ,nil ;};_adfa =&Bitmaps {};_cfec :=len (_gdegg .Values )==len (_gdegg .Boxes );for _gcfa =0;_gcfa < len (*_bdbd );_gcfa ++{if _beecb =int ((*_bdbd )[_gcfa ]);_beecb ==0{continue ;};_adfa .Values =append (_adfa .Values ,_gdegg .Values [_gcfa ]);
if _cfec {_adfa .Boxes =append (_adfa .Boxes ,_gdegg .Boxes [_gcfa ]);};};return _adfa ,nil ;};type byHeight Bitmaps ;func TstWriteSymbols (t *_ae .T ,bms *Bitmaps ,src *Bitmap ){for _abege :=0;_abege < bms .Size ();_abege ++{_dafgf :=bms .Values [_abege ];
_gecee :=bms .Boxes [_abege ];_bgfd :=src .RasterOperation (_gecee .Min .X ,_gecee .Min .Y ,_dafgf .Width ,_dafgf .Height ,PixSrc ,_dafgf ,0,0);_af .NoError (t ,_bgfd );};};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;
CmbOpNot ;);func init (){for _baf :=0;_baf < 256;_baf ++{_faf [_baf ]=uint8 (_baf &0x1)+(uint8 (_baf >>1)&0x1)+(uint8 (_baf >>2)&0x1)+(uint8 (_baf >>3)&0x1)+(uint8 (_baf >>4)&0x1)+(uint8 (_baf >>5)&0x1)+(uint8 (_baf >>6)&0x1)+(uint8 (_baf >>7)&0x1);};};
func _b (_da ,_df *Bitmap )(_fc error ){const _dd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_bd :=_df .RowStride ;_cf :=_da .RowStride ;var (_abg byte ;_fa uint16 ;_ca ,_g ,_gb ,_e ,_dea int ;
);for _gb =0;_gb < _df .Height ;_gb ++{_ca =_gb *_bd ;_g =2*_gb *_cf ;for _e =0;_e < _bd ;_e ++{_abg =_df .Data [_ca +_e ];_fa =_gaca [_abg ];_dea =_g +_e *2;if _da .RowStride !=_df .RowStride *2&&(_e +1)*2> _da .RowStride {_fc =_da .SetByte (_dea ,byte (_fa >>8));
}else {_fc =_da .setTwoBytes (_dea ,_fa );};if _fc !=nil {return _f .Wrap (_fc ,_dd ,"");};};for _e =0;_e < _cf ;_e ++{_dea =_g +_cf +_e ;_abg =_da .Data [_g +_e ];if _fc =_da .SetByte (_dea ,_abg );_fc !=nil {return _f .Wrapf (_fc ,_dd ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_g +_e ,_g +_cf +_e );
};};};return nil ;};func ClipBoxToRectangle (box *_abc .Rectangle ,wi ,hi int )(_baca *_abc .Rectangle ,_eeg error ){const _cdf ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_f .Error (_cdf ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_f .Error (_cdf ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_efde :=*box ;
_baca =&_efde ;if _baca .Min .X < 0{_baca .Max .X +=_baca .Min .X ;_baca .Min .X =0;};if _baca .Min .Y < 0{_baca .Max .Y +=_baca .Min .Y ;_baca .Min .Y =0;};if _baca .Max .X > wi {_baca .Max .X =wi ;};if _baca .Max .Y > hi {_baca .Max .Y =hi ;};return _baca ,nil ;
};func (_ecgd *Selection )setOrigin (_ebaab ,_aedbb int ){_ecgd .Cy ,_ecgd .Cx =_ebaab ,_aedbb };func _bab (_gcfg ,_cbeb *Bitmap ,_agc int ,_ffb []byte ,_fcf int )(_gfa error ){const _bcf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_dac ,_ecfe ,_aee ,_fce ,_efa ,_cfa ,_cef ,_gda int ;_cfc ,_ebe ,_bca ,_gag uint32 ;_fad ,_geaf byte ;_ggc uint16 ;);_bgfc :=make ([]byte ,4);_ffea :=make ([]byte ,4);for _aee =0;_aee < _gcfg .Height -1;_aee ,_fce =_aee +2,_fce +1{_dac =_aee *_gcfg .RowStride ;
_ecfe =_fce *_cbeb .RowStride ;for _efa ,_cfa =0,0;_efa < _fcf ;_efa ,_cfa =_efa +4,_cfa +1{for _cef =0;_cef < 4;_cef ++{_gda =_dac +_efa +_cef ;if _gda <=len (_gcfg .Data )-1&&_gda < _dac +_gcfg .RowStride {_bgfc [_cef ]=_gcfg .Data [_gda ];}else {_bgfc [_cef ]=0x00;
};_gda =_dac +_gcfg .RowStride +_efa +_cef ;if _gda <=len (_gcfg .Data )-1&&_gda < _dac +(2*_gcfg .RowStride ){_ffea [_cef ]=_gcfg .Data [_gda ];}else {_ffea [_cef ]=0x00;};};_cfc =_ag .BigEndian .Uint32 (_bgfc );_ebe =_ag .BigEndian .Uint32 (_ffea );_bca =_cfc &_ebe ;
_bca |=_bca <<1;_gag =_cfc |_ebe ;_gag &=_gag <<1;_ebe =_bca |_gag ;_ebe &=0xaaaaaaaa;_cfc =_ebe |(_ebe <<7);_fad =byte (_cfc >>24);_geaf =byte ((_cfc >>8)&0xff);_gda =_ecfe +_cfa ;if _gda +1==len (_cbeb .Data )-1||_gda +1>=_ecfe +_cbeb .RowStride {if _gfa =_cbeb .SetByte (_gda ,_ffb [_fad ]);
_gfa !=nil {return _f .Wrapf (_gfa ,_bcf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gda );};}else {_ggc =(uint16 (_ffb [_fad ])<<8)|uint16 (_ffb [_geaf ]);if _gfa =_cbeb .setTwoBytes (_gda ,_ggc );_gfa !=nil {return _f .Wrapf (_gfa ,_bcf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gda );
};_cfa ++;};};};return nil ;};func MakePixelSumTab8 ()[]int {return _bece ()};func (_bbg *Bitmaps )GetBox (i int )(*_abc .Rectangle ,error ){const _ecfdf ="\u0047\u0065\u0074\u0042\u006f\u0078";if _bbg ==nil {return nil ,_f .Error (_ecfdf ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_bbg .Boxes )-1{return nil ,_f .Errorf (_ecfdf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bbg .Boxes [i ],nil ;};func (_bbeg *Bitmap )setTwoBytes (_dddc int ,_bgae uint16 )error {if _dddc +1> len (_bbeg .Data )-1{return _f .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_dddc );
};_bbeg .Data [_dddc ]=byte ((_bgae &0xff00)>>8);_bbeg .Data [_dddc +1]=byte (_bgae &0xff);return nil ;};func (_gdc *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _gdc .Copy (),nil ;};_ged ,_abf :=_gdc .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _abf !=nil {return nil ,_f .Wrap (_abf ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _ged ,nil ;};func _efea (_beb ,_afba byte ,_bebg CombinationOperator )byte {switch _bebg {case CmbOpOr :return _afba |_beb ;case CmbOpAnd :return _afba &_beb ;
case CmbOpXor :return _afba ^_beb ;case CmbOpXNor :return ^(_afba ^_beb );case CmbOpNot :return ^(_afba );default:return _afba ;};};func _gafe (_cgeg *Bitmap ,_ccb *Bitmap ,_edcf *Selection )(*Bitmap ,error ){var (_dfedd *Bitmap ;_beca error ;);_cgeg ,_beca =_bedf (_cgeg ,_ccb ,_edcf ,&_dfedd );
if _beca !=nil {return nil ,_beca ;};if _beca =_cgeg .clearAll ();_beca !=nil {return nil ,_beca ;};var _cccb SelectionValue ;for _cfba :=0;_cfba < _edcf .Height ;_cfba ++{for _ebfg :=0;_ebfg < _edcf .Width ;_ebfg ++{_cccb =_edcf .Data [_cfba ][_ebfg ];
if _cccb ==SelHit {if _beca =_cgeg .RasterOperation (_ebfg -_edcf .Cx ,_cfba -_edcf .Cy ,_ccb .Width ,_ccb .Height ,PixSrcOrDst ,_dfedd ,0,0);_beca !=nil {return nil ,_beca ;};};};};return _cgeg ,nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_bgcf :=make ([]Point ,len (bms ));
_dbbb :=_bcab ();_acge :=_bece ();var _bccb error ;for _ecfb ,_eaac :=range bms {_bgcf [_ecfb ],_bccb =_eaac .centroid (_dbbb ,_acge );if _bccb !=nil {return nil ,_bccb ;};};_gbac :=Points (_bgcf );return &_gbac ,nil ;};func _fdca (_ggga int )int {if _ggga < 0{return -_ggga ;
};return _ggga ;};func (_gdde Points )Size ()int {return len (_gdde )};func (_cbbe *Bitmap )setPadBits (_cacd int ){_gfaf :=8-_cbbe .Width %8;if _gfaf ==8{return ;};_abb :=_cbbe .Width /8;_cfeb :=_eccfe [_gfaf ];if _cacd ==0{_cfeb ^=_cfeb ;};var _dddg int ;
for _ecdb :=0;_ecdb < _cbbe .Height ;_ecdb ++{_dddg =_ecdb *_cbbe .RowStride +_abb ;if _cacd ==0{_cbbe .Data [_dddg ]&=_cfeb ;}else {_cbbe .Data [_dddg ]|=_cfeb ;};};};func (_geac Points )Get (i int )(Point ,error ){if i > len (_geac )-1{return Point {},_f .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _geac [i ],nil ;};func (_cbbff *Bitmap )SetPixel (x ,y int ,pixel byte )error {_dgg :=_cbbff .GetByteIndex (x ,y );if _dgg > len (_cbbff .Data )-1{return _f .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_dgg );
};_eeb :=_cbbff .GetBitOffset (x );_efegf :=uint (7-_eeb );_gddf :=_cbbff .Data [_dgg ];var _dccd byte ;if pixel ==1{_dccd =_gddf |(pixel &0x01<<_efegf );}else {_dccd =_gddf &^(1<<_efegf );};_cbbff .Data [_dgg ]=_dccd ;return nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _bace ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_f .Error (_bace ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_f .Error (_bace ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_f .Error (_bace ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_f .Error (_bace ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_f .Error (_bace ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_gaef ,_baeb :=bm1 .Width ,bm1 .Height ;_cabd ,_gbfdf :=bm2 .Width ,bm2 .Height ;if _ab .Abs (_gaef -_cabd )> maxDiffW {return false ,nil ;};if _ab .Abs (_baeb -_gbfdf )> maxDiffH {return false ,nil ;};_caeg :=int (delX +_ab .Sign (delX )*0.5);_cagd :=int (delY +_ab .Sign (delY )*0.5);
_gcee :=int (_de .Ceil (_de .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_fega :=bm2 .RowStride ;_fbdb :=_fagdb (_cagd ,0);_geeg :=_ggb (_gbfdf +_cagd ,_baeb );_fgfe :=bm1 .RowStride *_fbdb ;_acbb :=bm2 .RowStride *(_fbdb -_cagd );
var _bfbg int ;if _geeg <=_baeb {_bfbg =downcount [_geeg -1];};_geafb :=_fagdb (_caeg ,0);_cdfd :=_ggb (_cabd +_caeg ,_gaef );var _ddee ,_gffg int ;if _caeg >=8{_ddee =_caeg >>3;_fgfe +=_ddee ;_geafb -=_ddee <<3;_cdfd -=_ddee <<3;_caeg &=7;}else if _caeg <=-8{_gffg =-((_caeg +7)>>3);
_acbb +=_gffg ;_fega -=_gffg ;_caeg +=_gffg <<3;};var (_cbda ,_gagb ,_cggf int ;_cdg ,_dbga ,_bddc byte ;);if _geafb >=_cdfd ||_fbdb >=_geeg {return false ,nil ;};_cdaa :=(_cdfd +7)>>3;switch {case _caeg ==0:for _gagb =_fbdb ;_gagb < _geeg ;_gagb ,_fgfe ,_acbb =_gagb +1,_fgfe +bm1 .RowStride ,_acbb +bm2 .RowStride {for _cggf =0;
_cggf < _cdaa ;_cggf ++{_cdg =bm1 .Data [_fgfe +_cggf ]&bm2 .Data [_acbb +_cggf ];_cbda +=tab [_cdg ];};if _cbda >=_gcee {return true ,nil ;};if _edgb :=_cbda +downcount [_gagb ]-_bfbg ;_edgb < _gcee {return false ,nil ;};};case _caeg > 0&&_fega < _cdaa :for _gagb =_fbdb ;
_gagb < _geeg ;_gagb ,_fgfe ,_acbb =_gagb +1,_fgfe +bm1 .RowStride ,_acbb +bm2 .RowStride {_dbga =bm1 .Data [_fgfe ];_bddc =bm2 .Data [_acbb ]>>uint (_caeg );_cdg =_dbga &_bddc ;_cbda +=tab [_cdg ];for _cggf =1;_cggf < _fega ;_cggf ++{_dbga =bm1 .Data [_fgfe +_cggf ];
_bddc =bm2 .Data [_acbb +_cggf ]>>uint (_caeg )|bm2 .Data [_acbb +_cggf -1]<<uint (8-_caeg );_cdg =_dbga &_bddc ;_cbda +=tab [_cdg ];};_dbga =bm1 .Data [_fgfe +_cggf ];_bddc =bm2 .Data [_acbb +_cggf -1]<<uint (8-_caeg );_cdg =_dbga &_bddc ;_cbda +=tab [_cdg ];
if _cbda >=_gcee {return true ,nil ;}else if _cbda +downcount [_gagb ]-_bfbg < _gcee {return false ,nil ;};};case _caeg > 0&&_fega >=_cdaa :for _gagb =_fbdb ;_gagb < _geeg ;_gagb ,_fgfe ,_acbb =_gagb +1,_fgfe +bm1 .RowStride ,_acbb +bm2 .RowStride {_dbga =bm1 .Data [_fgfe ];
_bddc =bm2 .Data [_acbb ]>>uint (_caeg );_cdg =_dbga &_bddc ;_cbda +=tab [_cdg ];for _cggf =1;_cggf < _cdaa ;_cggf ++{_dbga =bm1 .Data [_fgfe +_cggf ];_bddc =bm2 .Data [_acbb +_cggf ]>>uint (_caeg );_bddc |=bm2 .Data [_acbb +_cggf -1]<<uint (8-_caeg );
_cdg =_dbga &_bddc ;_cbda +=tab [_cdg ];};if _cbda >=_gcee {return true ,nil ;}else if _cbda +downcount [_gagb ]-_bfbg < _gcee {return false ,nil ;};};case _cdaa < _fega :for _gagb =_fbdb ;_gagb < _geeg ;_gagb ,_fgfe ,_acbb =_gagb +1,_fgfe +bm1 .RowStride ,_acbb +bm2 .RowStride {for _cggf =0;
_cggf < _cdaa ;_cggf ++{_dbga =bm1 .Data [_fgfe +_cggf ];_bddc =bm2 .Data [_acbb +_cggf ]<<uint (-_caeg );_bddc |=bm2 .Data [_acbb +_cggf +1]>>uint (8+_caeg );_cdg =_dbga &_bddc ;_cbda +=tab [_cdg ];};if _cbda >=_gcee {return true ,nil ;}else if _fbgb :=_cbda +downcount [_gagb ]-_bfbg ;
_fbgb < _gcee {return false ,nil ;};};case _fega >=_cdaa :for _gagb =_fbdb ;_gagb < _geeg ;_gagb ,_fgfe ,_acbb =_gagb +1,_fgfe +bm1 .RowStride ,_acbb +bm2 .RowStride {for _cggf =0;_cggf < _cdaa ;_cggf ++{_dbga =bm1 .Data [_fgfe +_cggf ];_bddc =bm2 .Data [_acbb +_cggf ]<<uint (-_caeg );
_bddc |=bm2 .Data [_acbb +_cggf +1]>>uint (8+_caeg );_cdg =_dbga &_bddc ;_cbda +=tab [_cdg ];};_dbga =bm1 .Data [_fgfe +_cggf ];_bddc =bm2 .Data [_acbb +_cggf ]<<uint (-_caeg );_cdg =_dbga &_bddc ;_cbda +=tab [_cdg ];if _cbda >=_gcee {return true ,nil ;
}else if _cbda +downcount [_gagb ]-_bfbg < _gcee {return false ,nil ;};};};_eca :=float32 (_cbda )*float32 (_cbda )/(float32 (area1 )*float32 (area2 ));if _eca >=scoreThreshold {_aef .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_cbda ,_gcee ,_eca ,scoreThreshold );
};return false ,nil ;};func (_bdb *Bitmap )Copy ()*Bitmap {_gaa :=make ([]byte ,len (_bdb .Data ));copy (_gaa ,_bdb .Data );return &Bitmap {Width :_bdb .Width ,Height :_bdb .Height ,RowStride :_bdb .RowStride ,Data :_gaa ,Color :_bdb .Color ,Text :_bdb .Text ,BitmapNumber :_bdb .BitmapNumber ,Special :_bdb .Special };
};func (_bbbf *byHeight )Len ()int {return len (_bbbf .Values )};func (_ecb *Bitmap )SetByte (index int ,v byte )error {if index > len (_ecb .Data )-1||index < 0{return _f .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_ecb .Data [index ]=v ;return nil ;};func _dgd (_dfc ,_ceab int )*Bitmap {return &Bitmap {Width :_dfc ,Height :_ceab ,RowStride :(_dfc +7)>>3};};func _cbdf (_cbce *Bitmap ,_gdac ,_dfff ,_gfefc ,_gdbg int ,_dccg RasterOperator ,_cafdg *Bitmap ,_dfcb ,_aae int )error {var (_aaef byte ;
_dgdg int ;_bedg int ;_gcbg ,_gdcf int ;_fddee ,_ggeg int ;);_ceed :=_gfefc >>3;_dcff :=_gfefc &7;if _dcff > 0{_aaef =_afagc [_dcff ];};_dgdg =_cafdg .RowStride *_aae +(_dfcb >>3);_bedg =_cbce .RowStride *_dfff +(_gdac >>3);switch _dccg {case PixSrc :for _fddee =0;
_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]=_cafdg .Data [_gcbg ];_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],_cafdg .Data [_gcbg ],_aaef );
};};case PixNotSrc :for _fddee =0;_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]=^(_cafdg .Data [_gcbg ]);_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],^_cafdg .Data [_gcbg ],_aaef );
};};case PixSrcOrDst :for _fddee =0;_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]|=_cafdg .Data [_gcbg ];_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],_cafdg .Data [_gcbg ]|_cbce .Data [_gdcf ],_aaef );
};};case PixSrcAndDst :for _fddee =0;_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]&=_cafdg .Data [_gcbg ];_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],_cafdg .Data [_gcbg ]&_cbce .Data [_gdcf ],_aaef );
};};case PixSrcXorDst :for _fddee =0;_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]^=_cafdg .Data [_gcbg ];_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],_cafdg .Data [_gcbg ]^_cbce .Data [_gdcf ],_aaef );
};};case PixNotSrcOrDst :for _fddee =0;_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]|=^(_cafdg .Data [_gcbg ]);_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],^(_cafdg .Data [_gcbg ])|_cbce .Data [_gdcf ],_aaef );
};};case PixNotSrcAndDst :for _fddee =0;_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]&=^(_cafdg .Data [_gcbg ]);_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],^(_cafdg .Data [_gcbg ])&_cbce .Data [_gdcf ],_aaef );
};};case PixSrcOrNotDst :for _fddee =0;_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]=_cafdg .Data [_gcbg ]|^(_cbce .Data [_gdcf ]);_gdcf ++;
_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],_cafdg .Data [_gcbg ]|^(_cbce .Data [_gdcf ]),_aaef );};};case PixSrcAndNotDst :for _fddee =0;_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;
for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]=_cafdg .Data [_gcbg ]&^(_cbce .Data [_gdcf ]);_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],_cafdg .Data [_gcbg ]&^(_cbce .Data [_gdcf ]),_aaef );};};case PixNotPixSrcOrDst :for _fddee =0;
_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]=^(_cafdg .Data [_gcbg ]|_cbce .Data [_gdcf ]);_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],^(_cafdg .Data [_gcbg ]|_cbce .Data [_gdcf ]),_aaef );
};};case PixNotPixSrcAndDst :for _fddee =0;_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]=^(_cafdg .Data [_gcbg ]&_cbce .Data [_gdcf ]);
_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],^(_cafdg .Data [_gcbg ]&_cbce .Data [_gdcf ]),_aaef );};};case PixNotPixSrcXorDst :for _fddee =0;_fddee < _gdbg ;_fddee ++{_gcbg =_dgdg +_fddee *_cafdg .RowStride ;_gdcf =_bedg +_fddee *_cbce .RowStride ;
for _ggeg =0;_ggeg < _ceed ;_ggeg ++{_cbce .Data [_gdcf ]=^(_cafdg .Data [_gcbg ]^_cbce .Data [_gdcf ]);_gdcf ++;_gcbg ++;};if _dcff > 0{_cbce .Data [_gdcf ]=_dcfgc (_cbce .Data [_gdcf ],^(_cafdg .Data [_gcbg ]^_cbce .Data [_gdcf ]),_aaef );};};default:_aef .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_dccg );
return _f .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _dfe ()(_cbbf [256]uint16 ){for _dde :=0;_dde < 256;_dde ++{if _dde &0x01!=0{_cbbf [_dde ]|=0x3;};if _dde &0x02!=0{_cbbf [_dde ]|=0xc;};if _dde &0x04!=0{_cbbf [_dde ]|=0x30;};if _dde &0x08!=0{_cbbf [_dde ]|=0xc0;};if _dde &0x10!=0{_cbbf [_dde ]|=0x300;
};if _dde &0x20!=0{_cbbf [_dde ]|=0xc00;};if _dde &0x40!=0{_cbbf [_dde ]|=0x3000;};if _dde &0x80!=0{_cbbf [_dde ]|=0xc000;};};return _cbbf ;};func _dfbfa (_bfadc ,_defd *Bitmap ,_cegc ,_caaf int )(_acdde error ){const _cbddg ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_ceeb ,_cfef ,_gfdde ,_ddcg int ;_ccce ,_edfbc ,_cgba ,_dcdd ,_gcgg ,_afbeg ,_gcgfc byte ;);for _ceeb =0;_ceeb < _cegc ;_ceeb ++{_gfdde =_ceeb *_bfadc .RowStride ;_ddcg =_ceeb *_defd .RowStride ;for _cfef =0;_cfef < _caaf ;_cfef ++{_ccce ,_acdde =_bfadc .GetByte (_gfdde +_cfef );
if _acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_edfbc ,_acdde =_defd .GetByte (_ddcg +_cfef );if _acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _ceeb > 0{_cgba ,_acdde =_bfadc .GetByte (_gfdde -_bfadc .RowStride +_cfef );if _acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"\u0069\u0020\u003e \u0030");};_ccce |=_cgba ;};if _cfef > 0{_dcdd ,_acdde =_bfadc .GetByte (_gfdde +_cfef -1);if _acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"\u006a\u0020\u003e \u0030");
};_ccce |=_dcdd <<7;};_ccce &=_edfbc ;if _ccce ==0||(^_ccce )==0{if _acdde =_bfadc .SetByte (_gfdde +_cfef ,_ccce );_acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_gcgfc =_ccce ;_ccce =(_ccce |(_ccce >>1)|(_ccce <<1))&_edfbc ;if (_ccce ^_gcgfc )==0{if _acdde =_bfadc .SetByte (_gfdde +_cfef ,_ccce );_acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _ceeb =_cegc -1;_ceeb >=0;_ceeb --{_gfdde =_ceeb *_bfadc .RowStride ;_ddcg =_ceeb *_defd .RowStride ;for _cfef =_caaf -1;_cfef >=0;_cfef --{if _ccce ,_acdde =_bfadc .GetByte (_gfdde +_cfef );_acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _edfbc ,_acdde =_defd .GetByte (_ddcg +_cfef );_acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _ceeb < _cegc -1{if _gcgg ,_acdde =_bfadc .GetByte (_gfdde +_bfadc .RowStride +_cfef );
_acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_ccce |=_gcgg ;};if _cfef < _caaf -1{if _afbeg ,_acdde =_bfadc .GetByte (_gfdde +_cfef +1);_acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_ccce |=_afbeg >>7;};_ccce &=_edfbc ;if _ccce ==0||(^_ccce )==0{if _acdde =_bfadc .SetByte (_gfdde +_cfef ,_ccce );_acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_gcgfc =_ccce ;_ccce =(_ccce |(_ccce >>1)|(_ccce <<1))&_edfbc ;if (_ccce ^_gcgfc )==0{if _acdde =_bfadc .SetByte (_gfdde +_cfef ,_ccce );_acdde !=nil {return _f .Wrap (_acdde ,_cbddg ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_fgb *Bitmap )GetUnpaddedData ()([]byte ,error ){_eabag :=uint (_fgb .Width &0x07);if _eabag ==0{return _fgb .Data ,nil ;};_dba :=_fgb .Width *_fgb .Height ;if _dba %8!=0{_dba >>=3;_dba ++;}else {_dba >>=3;};_cbff :=make ([]byte ,_dba );
_efeg :=_cb .NewWriterMSB (_cbff );const _ffg ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _gfe :=0;_gfe < _fgb .Height ;_gfe ++{for _gce :=0;_gce < _fgb .RowStride ;_gce ++{_ggcg :=_fgb .Data [_gfe *_fgb .RowStride +_gce ];
if _gce !=_fgb .RowStride -1{_ebb :=_efeg .WriteByte (_ggcg );if _ebb !=nil {return nil ,_f .Wrap (_ebb ,_ffg ,"");};continue ;};for _adba :=uint (0);_adba < _eabag ;_adba ++{_cac :=_efeg .WriteBit (int (_ggcg >>(7-_adba )&0x01));if _cac !=nil {return nil ,_f .Wrap (_cac ,_ffg ,"");
};};};};return _cbff ,nil ;};const (Vanilla Color =iota ;Chocolate ;);func _fagdb (_fagcf ,_dbb int )int {if _fagcf > _dbb {return _fagcf ;};return _dbb ;};func (_ece *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _ece .removeBorderGeneral (left ,right ,top ,bot );
};type Point struct{X ,Y float32 ;};func TstNSymbol (t *_ae .T ,scale ...int )*Bitmap {_beegf ,_ebge :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_af .NoError (t ,_ebge );return TstGetScaledSymbol (t ,_beegf ,scale ...);};func (_ggac *Bitmap )GetByteIndex (x ,y int )int {return y *_ggac .RowStride +(x >>3)};
type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};type CombinationOperator int ;func (_acdc *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _bddg ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_eaea ,_ccgg :=_acdc .selectByIndexes (idx );if _ccgg !=nil {return nil ,_f .Wrap (_ccgg ,_bddg ,"");};return _eaea ,nil ;};func (_bcce *Bitmap )CreateTemplate ()*Bitmap {return _bcce .createTemplate ()};const (AsymmetricMorphBC BoundaryCondition =iota ;
SymmetricMorphBC ;);func _agcd (_cadd *Bitmap ,_cege ,_bbde int ,_gaed ,_dcaf int ,_daef RasterOperator ){var (_dfdee int ;_edbcb byte ;_fccd ,_acf int ;_fcbcf int ;);_efacf :=_gaed >>3;_effd :=_gaed &7;if _effd > 0{_edbcb =_afagc [_effd ];};_dfdee =_cadd .RowStride *_bbde +(_cege >>3);
switch _daef {case PixClr :for _fccd =0;_fccd < _dcaf ;_fccd ++{_fcbcf =_dfdee +_fccd *_cadd .RowStride ;for _acf =0;_acf < _efacf ;_acf ++{_cadd .Data [_fcbcf ]=0x0;_fcbcf ++;};if _effd > 0{_cadd .Data [_fcbcf ]=_dcfgc (_cadd .Data [_fcbcf ],0x0,_edbcb );
};};case PixSet :for _fccd =0;_fccd < _dcaf ;_fccd ++{_fcbcf =_dfdee +_fccd *_cadd .RowStride ;for _acf =0;_acf < _efacf ;_acf ++{_cadd .Data [_fcbcf ]=0xff;_fcbcf ++;};if _effd > 0{_cadd .Data [_fcbcf ]=_dcfgc (_cadd .Data [_fcbcf ],0xff,_edbcb );};};
case PixNotDst :for _fccd =0;_fccd < _dcaf ;_fccd ++{_fcbcf =_dfdee +_fccd *_cadd .RowStride ;for _acf =0;_acf < _efacf ;_acf ++{_cadd .Data [_fcbcf ]=^_cadd .Data [_fcbcf ];_fcbcf ++;};if _effd > 0{_cadd .Data [_fcbcf ]=_dcfgc (_cadd .Data [_fcbcf ],^_cadd .Data [_fcbcf ],_edbcb );
};};};};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};var (_gaca =_dfe ();_ffcd =_ff ();_adbe =_bcb (););type SizeSelection int ;func (_dfgg *Bitmap )setFourBytes (_acde int ,_cdd uint32 )error {if _acde +3> len (_dfgg .Data )-1{return _f .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_acde );
};_dfgg .Data [_acde ]=byte ((_cdd &0xff000000)>>24);_dfgg .Data [_acde +1]=byte ((_cdd &0xff0000)>>16);_dfgg .Data [_acde +2]=byte ((_cdd &0xff00)>>8);_dfgg .Data [_acde +3]=byte (_cdd &0xff);return nil ;};func (_adgf *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_gegf *Boxes ,_dfbb error ){const _cfff ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _adgf ==nil {return nil ,_f .Error (_cfff ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_adgf )==0{return _adgf ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_f .Errorf (_cfff ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_f .Errorf (_cfff ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_ecg :=_adgf .makeSizeIndicator (width ,height ,tp ,relation );_beec ,_dfbb :=_adgf .selectWithIndicator (_ecg );if _dfbb !=nil {return nil ,_f .Wrap (_dfbb ,_cfff ,"");};return _beec ,nil ;};func TstISymbol (t *_ae .T ,scale ...int )*Bitmap {_ddcf ,_afbdc :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});
_af .NoError (t ,_afbdc );return TstGetScaledSymbol (t ,_ddcf ,scale ...);};func (_cffc *Bitmaps )selectByIndexes (_fcaee []int )(*Bitmaps ,error ){_dbab :=&Bitmaps {};for _ ,_daff :=range _fcaee {_egfg ,_efbe :=_cffc .GetBitmap (_daff );if _efbe !=nil {return nil ,_f .Wrap (_efbe ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_dbab .AddBitmap (_egfg );};return _dbab ,nil ;};func (_gffc *Boxes )selectWithIndicator (_cabc *_ab .NumSlice )(_dag *Boxes ,_bega error ){const _ggec ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gffc ==nil {return nil ,_f .Error (_ggec ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _cabc ==nil {return nil ,_f .Error (_ggec ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_cabc )!=len (*_gffc ){return nil ,_f .Error (_ggec ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _fded ,_abeb int ;for _gba :=0;_gba < len (*_cabc );_gba ++{if _fded ,_bega =_cabc .GetInt (_gba );_bega !=nil {return nil ,_f .Wrap (_bega ,_ggec ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _fded ==1{_abeb ++;
};};if _abeb ==len (*_gffc ){return _gffc ,nil ;};_afbd :=Boxes {};for _afc :=0;_afc < len (*_cabc );_afc ++{_fded =int ((*_cabc )[_afc ]);if _fded ==0{continue ;};_afbd =append (_afbd ,(*_gffc )[_afc ]);};_dag =&_afbd ;return _dag ,nil ;};var MorphBC BoundaryCondition ;
func (_acdda Points )GetGeometry (i int )(_egca ,_cbbc float32 ,_geef error ){if i > len (_acdda )-1{return 0,0,_f .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_agdd :=_acdda [i ];return _agdd .X ,_agdd .Y ,nil ;};func (_ffbbb *Bitmap )setEightFullBytes (_bddd int ,_caa uint64 )error {if _bddd +7> len (_ffbbb .Data )-1{return _f .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ffbbb .Data [_bddd ]=byte ((_caa &0xff00000000000000)>>56);_ffbbb .Data [_bddd +1]=byte ((_caa &0xff000000000000)>>48);_ffbbb .Data [_bddd +2]=byte ((_caa &0xff0000000000)>>40);_ffbbb .Data [_bddd +3]=byte ((_caa &0xff00000000)>>32);_ffbbb .Data [_bddd +4]=byte ((_caa &0xff000000)>>24);
_ffbbb .Data [_bddd +5]=byte ((_caa &0xff0000)>>16);_ffbbb .Data [_bddd +6]=byte ((_caa &0xff00)>>8);_ffbbb .Data [_bddd +7]=byte (_caa &0xff);return nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func _fcc (_bc *Bitmap ,_cge *Bitmap ,_fb int )(_bce error ){const _efbc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _fb {case 2:_bce =_b (_bc ,_cge );case 4:_bce =_ed (_bc ,_cge );case 8:_bce =_dg (_bc ,_cge );default:return _f .Error (_efbc ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _bce !=nil {_bce =_f .Wrap (_bce ,_efbc ,"");};return _bce ;};func TstOSymbol (t *_ae .T ,scale ...int )*Bitmap {_efgcg ,_bdafb :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_af .NoError (t ,_bdafb );return TstGetScaledSymbol (t ,_efgcg ,scale ...);
};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);const _dacca =5000;type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_abc .Rectangle ;};func (_fbc *Bitmap )ClipRectangle (box *_abc .Rectangle )(_fbe *Bitmap ,_ggf *_abc .Rectangle ,_efeb error ){const _cbg ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_f .Error (_cbg ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_eae ,_gdd :=_fbc .Width ,_fbc .Height ;_bgg :=_abc .Rect (0,0,_eae ,_gdd );if !box .Overlaps (_bgg ){return nil ,nil ,_f .Error (_cbg ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_dcc :=box .Intersect (_bgg );_bbe ,_cbd :=_dcc .Min .X ,_dcc .Min .Y ;_bbc ,_ffbg :=_dcc .Dx (),_dcc .Dy ();_fbe =New (_bbc ,_ffbg );_fbe .Text =_fbc .Text ;if _efeb =_fbe .RasterOperation (0,0,_bbc ,_ffbg ,PixSrc ,_fbc ,_bbe ,_cbd );_efeb !=nil {return nil ,nil ,_f .Wrap (_efeb ,_cbg ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_ggf =&_dcc ;return _fbe ,_ggf ,nil ;};func (_aggab *ClassedPoints )XAtIndex (i int )float32 {return (*_aggab .Points )[_aggab .IntSlice [i ]].X };func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _cfg ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_fdcf ,_cafd :=p1 .Width ,p1 .Height ;_aafb ,_ggcge :=p3 .Width ,p3 .Height ;if _ab .Abs (_fdcf -_aafb )> maxDiffW {return false ,nil ;};if _ab .Abs (_cafd -_ggcge )> maxDiffH {return false ,nil ;};_cafb :=int (delX +_ab .Sign (delX )*0.5);_gbb :=int (delY +_ab .Sign (delY )*0.5);
var _ecdbe error ;_egaf :=p1 .CreateTemplate ();if _ecdbe =_egaf .RasterOperation (0,0,_fdcf ,_cafd ,PixSrc ,p1 ,0,0);_ecdbe !=nil {return false ,_f .Wrap (_ecdbe ,_cfg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ecdbe =_egaf .RasterOperation (_cafb ,_gbb ,_fdcf ,_cafd ,PixNotSrcAndDst ,p4 ,0,0);
_ecdbe !=nil {return false ,_f .Wrap (_ecdbe ,_cfg ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _egaf .Zero (){return false ,nil ;};if _ecdbe =_egaf .RasterOperation (_cafb ,_gbb ,_aafb ,_ggcge ,PixSrc ,p3 ,0,0);_ecdbe !=nil {return false ,_f .Wrap (_ecdbe ,_cfg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _ecdbe =_egaf .RasterOperation (0,0,_aafb ,_ggcge ,PixNotSrcAndDst ,p2 ,0,0);_ecdbe !=nil {return false ,_f .Wrap (_ecdbe ,_cfg ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _egaf .Zero (),nil ;};func (_gbfcd *BitmapsArray )GetBox (i int )(*_abc .Rectangle ,error ){const _gfde ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _gbfcd ==nil {return nil ,_f .Error (_gfde ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_gbfcd .Boxes )-1{return nil ,_f .Errorf (_gfde ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gbfcd .Boxes [i ],nil ;};func (_edecg *byWidth )Swap (i ,j int ){_edecg .Values [i ],_edecg .Values [j ]=_edecg .Values [j ],_edecg .Values [i ];if _edecg .Boxes !=nil {_edecg .Boxes [i ],_edecg .Boxes [j ]=_edecg .Boxes [j ],_edecg .Boxes [i ];
};};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _efea (oldByte ,newByte ,op );};func (_bgeg Points )GetIntY (i int )(int ,error ){if i >=len (_bgeg ){return 0,_f .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_bgeg [i ].Y ),nil ;};func (_eccb *Points )AddPoint (x ,y float32 ){*_eccb =append (*_eccb ,Point {x ,y })};func (_ecdd *Bitmap )CountPixels ()int {return _ecdd .countPixels ()};type RasterOperator int ;func (_becg *ClassedPoints )Swap (i ,j int ){_becg .IntSlice [i ],_becg .IntSlice [j ]=_becg .IntSlice [j ],_becg .IntSlice [i ];
};func _gfce (_eefa ,_gcde *Bitmap ,_bedb *Selection )(*Bitmap ,error ){const _fabd ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _caca ,_dbbf int ;if _gcde ==nil {return nil ,_f .Error (_fabd ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _bedb ==nil {return nil ,_f .Error (_fabd ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_caca =_bedb .Width ;_dbbf =_bedb .Height ;if _caca ==0||_dbbf ==0{return nil ,_f .Error (_fabd ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _eefa ==nil {return _gcde .createTemplate (),nil ;};if _ebff :=_eefa .resizeImageData (_gcde );_ebff !=nil {return nil ,_ebff ;};return _eefa ,nil ;};func TstImageBitmapData ()[]byte {return _aagac .Data };func _cbcd (_gcgb *Bitmap ,_cdag *Bitmap ,_bebf int )(_gfdd error ){const _fdda ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_eacca :=_ggb (_gcgb .Height ,_cdag .Height );_gcca :=_ggb (_gcgb .RowStride ,_cdag .RowStride );switch _bebf {case 4:_gfdd =_dfbfa (_gcgb ,_cdag ,_eacca ,_gcca );case 8:_gfdd =_bbcd (_gcgb ,_cdag ,_eacca ,_gcca );default:return _f .Errorf (_fdda ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_bebf );
};if _gfdd !=nil {return _f .Wrap (_gfdd ,_fdda ,"");};return nil ;};func _gee (_gga ,_cfe *Bitmap ,_ddfe int ,_bcc []byte ,_bda int )(_ecf error ){const _abcb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_cbf ,_egfe ,_fggf ,_gegg ,_ddg ,_cgfg ,_cag ,_ee int ;_bef ,_ffe uint32 ;_ede ,_gcg byte ;_gge uint16 ;);_cce :=make ([]byte ,4);_aaa :=make ([]byte ,4);for _fggf =0;_fggf < _gga .Height -1;_fggf ,_gegg =_fggf +2,_gegg +1{_cbf =_fggf *_gga .RowStride ;
_egfe =_gegg *_cfe .RowStride ;for _ddg ,_cgfg =0,0;_ddg < _bda ;_ddg ,_cgfg =_ddg +4,_cgfg +1{for _cag =0;_cag < 4;_cag ++{_ee =_cbf +_ddg +_cag ;if _ee <=len (_gga .Data )-1&&_ee < _cbf +_gga .RowStride {_cce [_cag ]=_gga .Data [_ee ];}else {_cce [_cag ]=0x00;
};_ee =_cbf +_gga .RowStride +_ddg +_cag ;if _ee <=len (_gga .Data )-1&&_ee < _cbf +(2*_gga .RowStride ){_aaa [_cag ]=_gga .Data [_ee ];}else {_aaa [_cag ]=0x00;};};_bef =_ag .BigEndian .Uint32 (_cce );_ffe =_ag .BigEndian .Uint32 (_aaa );_ffe |=_bef ;
_ffe |=_ffe <<1;_ffe &=0xaaaaaaaa;_bef =_ffe |(_ffe <<7);_ede =byte (_bef >>24);_gcg =byte ((_bef >>8)&0xff);_ee =_egfe +_cgfg ;if _ee +1==len (_cfe .Data )-1||_ee +1>=_egfe +_cfe .RowStride {_cfe .Data [_ee ]=_bcc [_ede ];}else {_gge =(uint16 (_bcc [_ede ])<<8)|uint16 (_bcc [_gcg ]);
if _ecf =_cfe .setTwoBytes (_ee ,_gge );_ecf !=nil {return _f .Wrapf (_ecf ,_abcb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ee );
};_cgfg ++;};};};return nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_cbdd bool ,_acgd error ){const _abbg ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_cfdd ,_cee :=p1 .Width ,p1 .Height ;_bgfa ,_ffbc :=p3 .Width ,p3 .Height ;if _ab .Abs (_cfdd -_bgfa )> maxDiffW {return false ,nil ;};if _ab .Abs (_cee -_ffbc )> maxDiffH {return false ,nil ;};_afbb :=int (float32 (area1 )*(1.0-rank )+0.5);_bdbf :=int (float32 (area3 )*(1.0-rank )+0.5);
var _bfgfa ,_ebfc int ;if delX >=0{_bfgfa =int (delX +0.5);}else {_bfgfa =int (delX -0.5);};if delY >=0{_ebfc =int (delY +0.5);}else {_ebfc =int (delY -0.5);};_decb :=p1 .CreateTemplate ();if _acgd =_decb .RasterOperation (0,0,_cfdd ,_cee ,PixSrc ,p1 ,0,0);
_acgd !=nil {return false ,_f .Wrap (_acgd ,_abbg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _acgd =_decb .RasterOperation (_bfgfa ,_ebfc ,_cfdd ,_cee ,PixNotSrcAndDst ,p4 ,0,0);_acgd !=nil {return false ,_f .Wrap (_acgd ,_abbg ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_cbdd ,_acgd =_decb .ThresholdPixelSum (_afbb ,tab8 );if _acgd !=nil {return false ,_f .Wrap (_acgd ,_abbg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _cbdd {return false ,nil ;};if _acgd =_decb .RasterOperation (_bfgfa ,_ebfc ,_bgfa ,_ffbc ,PixSrc ,p3 ,0,0);
_acgd !=nil {return false ,_f .Wrap (_acgd ,_abbg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _acgd =_decb .RasterOperation (0,0,_bgfa ,_ffbc ,PixNotSrcAndDst ,p2 ,0,0);_acgd !=nil {return false ,_f .Wrap (_acgd ,_abbg ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_cbdd ,_acgd =_decb .ThresholdPixelSum (_bdbf ,tab8 );if _acgd !=nil {return false ,_f .Wrap (_acgd ,_abbg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_cbdd ,nil ;};func TstFrameBitmap ()*Bitmap {return _afffc .Copy ()};
func _aceg (_edaa *_ab .Stack ,_gebe ,_efebd ,_afde ,_cgcbe ,_gadg int ,_ceaf *_abc .Rectangle )(_dgdgc error ){const _aaaea ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _edaa ==nil {return _f .Error (_aaaea ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _ceaf ==nil {return _f .Error (_aaaea ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_ceaf .Min .X =_ab .Min (_ceaf .Min .X ,_gebe );_ceaf .Max .X =_ab .Max (_ceaf .Max .X ,_efebd );_ceaf .Min .Y =_ab .Min (_ceaf .Min .Y ,_afde );_ceaf .Max .Y =_ab .Max (_ceaf .Max .Y ,_afde );if !(_afde +_cgcbe >=0&&_afde +_cgcbe <=_gadg ){return nil ;
};if _edaa .Aux ==nil {return _f .Error (_aaaea ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _efcd *fillSegment ;_cdba ,_fdag :=_edaa .Aux .Pop ();if _fdag {if _efcd ,_fdag =_cdba .(*fillSegment );
!_fdag {return _f .Error (_aaaea ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_efcd =&fillSegment {};
};_efcd ._bcdf =_gebe ;_efcd ._cbed =_efebd ;_efcd ._dcfgf =_afde ;_efcd ._ebaa =_cgcbe ;_edaa .Push (_efcd );return nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _gafe (d ,s ,sel )};func (_bcba *Selection )findMaxTranslations ()(_geegg ,_gbdb ,_abeg ,_fdee int ){for _ggfb :=0;
_ggfb < _bcba .Height ;_ggfb ++{for _dadea :=0;_dadea < _bcba .Width ;_dadea ++{if _bcba .Data [_ggfb ][_dadea ]==SelHit {_geegg =_fagdb (_geegg ,_bcba .Cx -_dadea );_gbdb =_fagdb (_gbdb ,_bcba .Cy -_ggfb );_abeg =_fagdb (_abeg ,_dadea -_bcba .Cx );_fdee =_fagdb (_fdee ,_ggfb -_bcba .Cy );
};};};return _geegg ,_gbdb ,_abeg ,_fdee ;};func (_fgc *Bitmap )GetByte (index int )(byte ,error ){if index > len (_fgc .Data )-1||index < 0{return 0,_f .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _fgc .Data [index ],nil ;};func (_gfbg *Bitmaps )SortByWidth (){_cbaeb :=(*byWidth )(_gfbg );_c .Sort (_cbaeb )};func (_cgc *Bitmap )countPixels ()int {var (_gdb int ;_bbb uint8 ;_eea byte ;_agff int ;);_bccd :=_cgc .RowStride ;_bbbg :=uint (_cgc .Width &0x07);
if _bbbg !=0{_bbb =uint8 ((0xff<<(8-_bbbg ))&0xff);_bccd --;};for _cba :=0;_cba < _cgc .Height ;_cba ++{for _agff =0;_agff < _bccd ;_agff ++{_eea =_cgc .Data [_cba *_cgc .RowStride +_agff ];_gdb +=int (_faf [_eea ]);};if _bbbg !=0{_gdb +=int (_faf [_cgc .Data [_cba *_cgc .RowStride +_agff ]&_bbb ]);
};};return _gdb ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_fdf float64 ,_bdda error ){const _eace ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _fdf ,_f .Error (_eace ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _fdf ,_f .Error (_eace ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _fdf ,_f .Error (_eace ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_efgc ,_eecf :=bm1 .Width ,bm1 .Height ;_fcda ,_adadg :=bm2 .Width ,bm2 .Height ;
if _fdca (_efgc -_fcda )> maxDiffW {return 0,nil ;};if _fdca (_eecf -_adadg )> maxDiffH {return 0,nil ;};var _baaf ,_bdba int ;if delX >=0{_baaf =int (delX +0.5);}else {_baaf =int (delX -0.5);};if delY >=0{_bdba =int (delY +0.5);}else {_bdba =int (delY -0.5);
};_fcdgf :=bm1 .createTemplate ();if _bdda =_fcdgf .RasterOperation (_baaf ,_bdba ,_fcda ,_adadg ,PixSrc ,bm2 ,0,0);_bdda !=nil {return _fdf ,_f .Wrap (_bdda ,_eace ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};
if _bdda =_fcdgf .RasterOperation (0,0,_efgc ,_eecf ,PixSrcAndDst ,bm1 ,0,0);_bdda !=nil {return _fdf ,_f .Wrap (_bdda ,_eace ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_ggefg :=_fcdgf .countPixels ();_fdf =float64 (_ggefg )*float64 (_ggefg )/(float64 (area1 )*float64 (area2 ));
return _fdf ,nil ;};func _gggge (_gaefd ,_beae *Bitmap ,_cfbd ,_ceb int )(*Bitmap ,error ){const _gef ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _beae ==nil {_aef .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_f .Error (_gef ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cfbd < 1||_ceb < 1{return nil ,_f .Error (_gef ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _cfbd ==1&&_ceb ==1{_gca ,_abdg :=_afad (_gaefd ,_beae );if _abdg !=nil {return nil ,_f .Wrap (_abdg ,_gef ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};
return _gca ,nil ;};if _cfbd ==1||_ceb ==1{_bggc :=SelCreateBrick (_ceb ,_cfbd ,_ceb /2,_cfbd /2,SelHit );_bgd ,_egcd :=_gafe (_gaefd ,_beae ,_bggc );if _egcd !=nil {return nil ,_f .Wrap (_egcd ,_gef ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bgd ,nil ;};_edag :=SelCreateBrick (1,_cfbd ,0,_cfbd /2,SelHit );_ecdc :=SelCreateBrick (_ceb ,1,_ceb /2,0,SelHit );_ffgd ,_ggda :=_gafe (nil ,_beae ,_edag );if _ggda !=nil {return nil ,_f .Wrap (_ggda ,_gef ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_gaefd ,_ggda =_gafe (_gaefd ,_ffgd ,_ecdc );if _ggda !=nil {return nil ,_f .Wrap (_ggda ,_gef ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _gaefd ,nil ;};var _gfgd =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func _efcb (_fed ,_bfea *Bitmap ,_cfgb ,_gggad int )(*Bitmap ,error ){const _edef ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _bfea ==nil {return nil ,_f .Error (_edef ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cfgb < 1||_gggad < 1{return nil ,_f .Error (_edef ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _cfgb ==1&&_gggad ==1{return _bfea .Copy (),nil ;};if _cfgb ==1||_gggad ==1{_dgdf :=SelCreateBrick (_gggad ,_cfgb ,_gggad /2,_cfgb /2,SelHit );
var _afeg error ;_fed ,_afeg =_bgbf (_fed ,_bfea ,_dgdf );if _afeg !=nil {return nil ,_f .Wrap (_afeg ,_edef ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _fed ,nil ;
};_fbfg :=SelCreateBrick (1,_cfgb ,0,_cfgb /2,SelHit );_feae :=SelCreateBrick (_gggad ,1,_gggad /2,0,SelHit );_cdgg ,_ebc :=_gafe (nil ,_bfea ,_fbfg );if _ebc !=nil {return nil ,_f .Wrap (_ebc ,_edef ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _fed ,_ebc =_gafe (_fed ,_cdgg ,_feae );_ebc !=nil {return nil ,_f .Wrap (_ebc ,_edef ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_ebc =_dafeg (_cdgg ,_fed ,_fbfg );_ebc !=nil {return nil ,_f .Wrap (_ebc ,_edef ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_ebc =_dafeg (_fed ,_cdgg ,_feae );_ebc !=nil {return nil ,_f .Wrap (_ebc ,_edef ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _fed ,nil ;};func (_fabc *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _fabc .Copy (),nil ;
};_gcga ,_bdf :=_fabc .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _bdf !=nil {return nil ,_f .Wrap (_bdf ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _gcga ,nil ;};func (_ecdg *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_bde bool ,_effgf error ){const _gdf ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_bece ();};_egac :=_ecdg .Width >>3;_dfaf :=_ecdg .Width &7;_gab :=byte (0xff<<uint (8-_dfaf ));var (_gfac ,_aaf ,_gbgf ,_ffd int ;_eeed byte ;);for _gfac =0;_gfac < _ecdg .Height ;_gfac ++{_gbgf =_ecdg .RowStride *_gfac ;for _aaf =0;
_aaf < _egac ;_aaf ++{_eeed ,_effgf =_ecdg .GetByte (_gbgf +_aaf );if _effgf !=nil {return false ,_f .Wrap (_effgf ,_gdf ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_ffd +=tab8 [_eeed ];};if _dfaf !=0{_eeed ,_effgf =_ecdg .GetByte (_gbgf +_aaf );
if _effgf !=nil {return false ,_f .Wrap (_effgf ,_gdf ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_eeed &=_gab ;_ffd +=tab8 [_eeed ];};if _ffd > thresh {return true ,nil ;};};return _bde ,nil ;};func (_bga *Bitmap )GetPixel (x ,y int )bool {_dfde :=_bga .GetByteIndex (x ,y );
_cda :=_bga .GetBitOffset (x );_faa :=uint (7-_cda );if _dfde > len (_bga .Data )-1{_aef .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_bga );
return false ;};if (_bga .Data [_dfde ]>>_faa )&0x01>=1{return true ;};return false ;};func _aagc (_ggbd *Bitmap ,_bbbbg ,_fgbe ,_facc ,_dfab int ,_agfgb RasterOperator ,_dgeb *Bitmap ,_gcgc ,_ggcb int )error {var (_bgac bool ;_faeaf bool ;_abab int ;_fabb int ;
_efbcf int ;_bgca bool ;_bfd byte ;_fabf int ;_egeb int ;_cageb int ;_deca ,_aedc int ;);_cada :=8-(_bbbbg &7);_gbbd :=_eccfe [_cada ];_gcaa :=_ggbd .RowStride *_fgbe +(_bbbbg >>3);_aabfg :=_dgeb .RowStride *_ggcb +(_gcgc >>3);if _facc < _cada {_bgac =true ;
_gbbd &=_afagc [8-_cada +_facc ];};if !_bgac {_abab =(_facc -_cada )>>3;if _abab > 0{_faeaf =true ;_fabb =_gcaa +1;_efbcf =_aabfg +1;};};_fabf =(_bbbbg +_facc )&7;if !(_bgac ||_fabf ==0){_bgca =true ;_bfd =_afagc [_fabf ];_egeb =_gcaa +1+_abab ;_cageb =_aabfg +1+_abab ;
};switch _agfgb {case PixSrc :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],_dgeb .Data [_aabfg ],_gbbd );_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;
_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]=_dgeb .Data [_efbcf +_aedc ];};_fabb +=_ggbd .RowStride ;_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],_dgeb .Data [_cageb ],_bfd );
_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixNotSrc :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],^_dgeb .Data [_aabfg ],_gbbd );_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;};if _faeaf {for _deca =0;
_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]=^_dgeb .Data [_efbcf +_aedc ];};_fabb +=_ggbd .RowStride ;_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],^_dgeb .Data [_cageb ],_bfd );
_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixSrcOrDst :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],_dgeb .Data [_aabfg ]|_ggbd .Data [_gcaa ],_gbbd );_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;
};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]|=_dgeb .Data [_efbcf +_aedc ];};_fabb +=_ggbd .RowStride ;_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],_dgeb .Data [_cageb ]|_ggbd .Data [_egeb ],_bfd );
_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixSrcAndDst :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],_dgeb .Data [_aabfg ]&_ggbd .Data [_gcaa ],_gbbd );_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;
};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]&=_dgeb .Data [_efbcf +_aedc ];};_fabb +=_ggbd .RowStride ;_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],_dgeb .Data [_cageb ]&_ggbd .Data [_egeb ],_bfd );
_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixSrcXorDst :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],_dgeb .Data [_aabfg ]^_ggbd .Data [_gcaa ],_gbbd );_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;
};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]^=_dgeb .Data [_efbcf +_aedc ];};_fabb +=_ggbd .RowStride ;_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],_dgeb .Data [_cageb ]^_ggbd .Data [_egeb ],_bfd );
_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixNotSrcOrDst :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],^(_dgeb .Data [_aabfg ])|_ggbd .Data [_gcaa ],_gbbd );_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;
};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]|=^(_dgeb .Data [_efbcf +_aedc ]);};_fabb +=_ggbd .RowStride ;_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],^(_dgeb .Data [_cageb ])|_ggbd .Data [_egeb ],_bfd );
_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixNotSrcAndDst :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],^(_dgeb .Data [_aabfg ])&_ggbd .Data [_gcaa ],_gbbd );_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;
};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]&=^_dgeb .Data [_efbcf +_aedc ];};_fabb +=_ggbd .RowStride ;_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],^(_dgeb .Data [_cageb ])&_ggbd .Data [_egeb ],_bfd );
_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixSrcOrNotDst :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],_dgeb .Data [_aabfg ]|^(_ggbd .Data [_gcaa ]),_gbbd );_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;
};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]=_dgeb .Data [_efbcf +_aedc ]|^(_ggbd .Data [_fabb +_aedc ]);};_fabb +=_ggbd .RowStride ;_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;
_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],_dgeb .Data [_cageb ]|^(_ggbd .Data [_egeb ]),_bfd );_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixSrcAndNotDst :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],_dgeb .Data [_aabfg ]&^(_ggbd .Data [_gcaa ]),_gbbd );
_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]=_dgeb .Data [_efbcf +_aedc ]&^(_ggbd .Data [_fabb +_aedc ]);};_fabb +=_ggbd .RowStride ;
_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],_dgeb .Data [_cageb ]&^(_ggbd .Data [_egeb ]),_bfd );_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixNotPixSrcOrDst :for _deca =0;
_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],^(_dgeb .Data [_aabfg ]|_ggbd .Data [_gcaa ]),_gbbd );_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;
_aedc ++{_ggbd .Data [_fabb +_aedc ]=^(_dgeb .Data [_efbcf +_aedc ]|_ggbd .Data [_fabb +_aedc ]);};_fabb +=_ggbd .RowStride ;_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],^(_dgeb .Data [_cageb ]|_ggbd .Data [_egeb ]),_bfd );
_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixNotPixSrcAndDst :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],^(_dgeb .Data [_aabfg ]&_ggbd .Data [_gcaa ]),_gbbd );_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;
};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]=^(_dgeb .Data [_efbcf +_aedc ]&_ggbd .Data [_fabb +_aedc ]);};_fabb +=_ggbd .RowStride ;_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;
_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],^(_dgeb .Data [_cageb ]&_ggbd .Data [_egeb ]),_bfd );_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};case PixNotPixSrcXorDst :for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_gcaa ]=_dcfgc (_ggbd .Data [_gcaa ],^(_dgeb .Data [_aabfg ]^_ggbd .Data [_gcaa ]),_gbbd );
_gcaa +=_ggbd .RowStride ;_aabfg +=_dgeb .RowStride ;};if _faeaf {for _deca =0;_deca < _dfab ;_deca ++{for _aedc =0;_aedc < _abab ;_aedc ++{_ggbd .Data [_fabb +_aedc ]=^(_dgeb .Data [_efbcf +_aedc ]^_ggbd .Data [_fabb +_aedc ]);};_fabb +=_ggbd .RowStride ;
_efbcf +=_dgeb .RowStride ;};};if _bgca {for _deca =0;_deca < _dfab ;_deca ++{_ggbd .Data [_egeb ]=_dcfgc (_ggbd .Data [_egeb ],^(_dgeb .Data [_cageb ]^_ggbd .Data [_egeb ]),_bfd );_egeb +=_ggbd .RowStride ;_cageb +=_dgeb .RowStride ;};};default:_aef .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_agfgb );
return _f .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};type MorphOperation int ;func _bedf (_fceda *Bitmap ,_fgcg *Bitmap ,_edefa *Selection ,_aeeg **Bitmap )(*Bitmap ,error ){const _fcaeb ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _fgcg ==nil {return nil ,_f .Error (_fcaeb ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _edefa ==nil {return nil ,_f .Error (_fcaeb ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_ceec ,_aeege :=_edefa .Height ,_edefa .Width ;if _ceec ==0||_aeege ==0{return nil ,_f .Error (_fcaeb ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _fceda ==nil {_fceda =_fgcg .createTemplate ();*_aeeg =_fgcg ;return _fceda ,nil ;};_fceda .Width =_fgcg .Width ;_fceda .Height =_fgcg .Height ;_fceda .RowStride =_fgcg .RowStride ;_fceda .Color =_fgcg .Color ;_fceda .Data =make ([]byte ,_fgcg .RowStride *_fgcg .Height );
if _fceda ==_fgcg {*_aeeg =_fgcg .Copy ();}else {*_aeeg =_fgcg ;};return _fceda ,nil ;};func (_ddcb *Bitmaps )AddBitmap (bm *Bitmap ){_ddcb .Values =append (_ddcb .Values ,bm )};func (_bgge *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _fdbb ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _bgge ==nil {return nil ,_f .Error (_fdbb ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_f .Error (_fdbb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_edec :=len (_bgge .Values );_fef :=&Bitmaps {Values :make ([]*Bitmap ,_edec ),Boxes :make ([]*_abc .Rectangle ,_edec )};var (_gece ,_geca *Bitmap ;_edcbb *_abc .Rectangle ;_fffgc error ;);for _becaa :=0;_becaa < _edec ;_becaa ++{if _gece ,_fffgc =_bgge .GetBitmap (_becaa );
_fffgc !=nil {return nil ,_f .Wrap (_fffgc ,_fdbb ,"");};if _edcbb ,_fffgc =_bgge .GetBox (_becaa );_fffgc !=nil {return nil ,_f .Wrap (_fffgc ,_fdbb ,"");};if _geca ,_fffgc =s .clipRectangle (_edcbb ,nil );_fffgc !=nil {return nil ,_f .Wrap (_fffgc ,_fdbb ,"");
};if _geca ,_fffgc =_geca .And (_gece );_fffgc !=nil {return nil ,_f .Wrap (_fffgc ,_fdbb ,"");};_fef .Values [_becaa ]=_geca ;_fef .Boxes [_becaa ]=_edcbb ;};return _fef ,nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _gege ,_dbaf int ;
_dacda :=src .RowStride -1;if x < 0{_dbaf =-x ;x =0;}else if x +src .Width > dst .Width {_dacda -=src .Width +x -dst .Width ;};if y < 0{_gege =-y ;y =0;_dbaf +=src .RowStride ;_dacda +=src .RowStride ;}else if y +src .Height > dst .Height {_gege =src .Height +y -dst .Height ;
};var (_debc int ;_fgbb error ;);_eaab :=x &0x07;_abff :=8-_eaab ;_bceb :=src .Width &0x07;_adg :=_abff -_bceb ;_fcab :=_abff &0x07!=0;_fdcg :=src .Width <=((_dacda -_dbaf )<<3)+_abff ;_feb :=dst .GetByteIndex (x ,y );_bee :=_gege +dst .Height ;if src .Height > _bee {_debc =_bee ;
}else {_debc =src .Height ;};switch {case !_fcab :_fgbb =_gbfd (src ,dst ,_gege ,_debc ,_feb ,_dbaf ,_dacda ,op );case _fdcg :_fgbb =_bbfg (src ,dst ,_gege ,_debc ,_feb ,_dbaf ,_dacda ,_adg ,_eaab ,_abff ,op );default:_fgbb =_abgce (src ,dst ,_gege ,_debc ,_feb ,_dbaf ,_dacda ,_adg ,_eaab ,_abff ,op ,_bceb );
};return _fgbb ;};func _gbfd (_fbfd ,_eaeb *Bitmap ,_egcc ,_abbb ,_cddc ,_fffd ,_bbccg int ,_fddd CombinationOperator )error {var _cgfb int ;_def :=func (){_cgfb ++;_cddc +=_eaeb .RowStride ;_fffd +=_fbfd .RowStride ;_bbccg +=_fbfd .RowStride };for _cgfb =_egcc ;
_cgfb < _abbb ;_def (){_aga :=_cddc ;for _fafdb :=_fffd ;_fafdb <=_bbccg ;_fafdb ++{_deed ,_dbg :=_eaeb .GetByte (_aga );if _dbg !=nil {return _dbg ;};_dfed ,_dbg :=_fbfd .GetByte (_fafdb );if _dbg !=nil {return _dbg ;};if _dbg =_eaeb .SetByte (_aga ,_efea (_deed ,_dfed ,_fddd ));
_dbg !=nil {return _dbg ;};_aga ++;};};return nil ;};var (_afagc =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_eccfe =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_adde *Bitmaps )CountPixels ()*_ab .NumSlice {_fagea :=&_ab .NumSlice {};
for _ ,_fdgf :=range _adde .Values {_fagea .AddInt (_fdgf .CountPixels ());};return _fagea ;};func _fbfc (_gbgfe *Bitmap ,_gbgff ,_gabg ,_eedd ,_bfdb int ,_bgdd RasterOperator ){if _gbgff < 0{_eedd +=_gbgff ;_gbgff =0;};_dbfc :=_gbgff +_eedd -_gbgfe .Width ;
if _dbfc > 0{_eedd -=_dbfc ;};if _gabg < 0{_bfdb +=_gabg ;_gabg =0;};_daga :=_gabg +_bfdb -_gbgfe .Height ;if _daga > 0{_bfdb -=_daga ;};if _eedd <=0||_bfdb <=0{return ;};if (_gbgff &7)==0{_agcd (_gbgfe ,_gbgff ,_gabg ,_eedd ,_bfdb ,_bgdd );}else {_fdge (_gbgfe ,_gbgff ,_gabg ,_eedd ,_bfdb ,_bgdd );
};};func (_fbbc *ClassedPoints )Less (i ,j int )bool {return _fbbc ._edcg (i ,j )};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func TstASymbol (t *_ae .T )*Bitmap {t .Helper ();_edgf :=New (6,6);
_af .NoError (t ,_edgf .SetPixel (1,0,1));_af .NoError (t ,_edgf .SetPixel (2,0,1));_af .NoError (t ,_edgf .SetPixel (3,0,1));_af .NoError (t ,_edgf .SetPixel (4,0,1));_af .NoError (t ,_edgf .SetPixel (5,1,1));_af .NoError (t ,_edgf .SetPixel (1,2,1));
_af .NoError (t ,_edgf .SetPixel (2,2,1));_af .NoError (t ,_edgf .SetPixel (3,2,1));_af .NoError (t ,_edgf .SetPixel (4,2,1));_af .NoError (t ,_edgf .SetPixel (5,2,1));_af .NoError (t ,_edgf .SetPixel (0,3,1));_af .NoError (t ,_edgf .SetPixel (5,3,1));
_af .NoError (t ,_edgf .SetPixel (0,4,1));_af .NoError (t ,_edgf .SetPixel (5,4,1));_af .NoError (t ,_edgf .SetPixel (1,5,1));_af .NoError (t ,_edgf .SetPixel (2,5,1));_af .NoError (t ,_edgf .SetPixel (3,5,1));_af .NoError (t ,_edgf .SetPixel (4,5,1));
_af .NoError (t ,_edgf .SetPixel (5,5,1));return _edgf ;};func (_geb *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _egcdd ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_geb .IntSlice .Size (){return 0,_f .Errorf (_egcdd ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_geb .YAtIndex (i )),nil ;};func _bcb ()(_bfe [256]uint64 ){for _ced :=0;_ced < 256;_ced ++{if _ced &0x01!=0{_bfe [_ced ]|=0xff;};if _ced &0x02!=0{_bfe [_ced ]|=0xff00;};if _ced &0x04!=0{_bfe [_ced ]|=0xff0000;};if _ced &0x08!=0{_bfe [_ced ]|=0xff000000;
};if _ced &0x10!=0{_bfe [_ced ]|=0xff00000000;};if _ced &0x20!=0{_bfe [_ced ]|=0xff0000000000;};if _ced &0x40!=0{_bfe [_ced ]|=0xff000000000000;};if _ced &0x80!=0{_bfe [_ced ]|=0xff00000000000000;};};return _bfe ;};func (_cdcf *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _edefe ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_cdcf .Values )==0{return nil ,_f .Error (_edefe ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_ccba :=&BitmapsArray {};_cdcf .SortByWidth ();_ecedg :=-1;_aade :=-1;for _baafd :=0;_baafd < len (_cdcf .Values );
_baafd ++{_fagca :=_cdcf .Values [_baafd ].Width ;if _fagca > _ecedg {_ecedg =_fagca ;_aade ++;_ccba .Values =append (_ccba .Values ,&Bitmaps {});};_ccba .Values [_aade ].AddBitmap (_cdcf .Values [_baafd ]);};return _ccba ,nil ;};func _ddgc (_gcc ,_eff *Bitmap ,_dge int ,_cdb []byte ,_efe int )(_gcfd error ){const _dc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_gac ,_eab ,_fag ,_cedf ,_cgb ,_eee ,_fced ,_adb int ;_cfcd ,_ac ,_fffa ,_eaa uint32 ;_gde ,_agg byte ;_afb uint16 ;);_adad :=make ([]byte ,4);_cbee :=make ([]byte ,4);for _fag =0;_fag < _gcc .Height -1;_fag ,_cedf =_fag +2,_cedf +1{_gac =_fag *_gcc .RowStride ;
_eab =_cedf *_eff .RowStride ;for _cgb ,_eee =0,0;_cgb < _efe ;_cgb ,_eee =_cgb +4,_eee +1{for _fced =0;_fced < 4;_fced ++{_adb =_gac +_cgb +_fced ;if _adb <=len (_gcc .Data )-1&&_adb < _gac +_gcc .RowStride {_adad [_fced ]=_gcc .Data [_adb ];}else {_adad [_fced ]=0x00;
};_adb =_gac +_gcc .RowStride +_cgb +_fced ;if _adb <=len (_gcc .Data )-1&&_adb < _gac +(2*_gcc .RowStride ){_cbee [_fced ]=_gcc .Data [_adb ];}else {_cbee [_fced ]=0x00;};};_cfcd =_ag .BigEndian .Uint32 (_adad );_ac =_ag .BigEndian .Uint32 (_cbee );_fffa =_cfcd &_ac ;
_fffa |=_fffa <<1;_eaa =_cfcd |_ac ;_eaa &=_eaa <<1;_ac =_fffa &_eaa ;_ac &=0xaaaaaaaa;_cfcd =_ac |(_ac <<7);_gde =byte (_cfcd >>24);_agg =byte ((_cfcd >>8)&0xff);_adb =_eab +_eee ;if _adb +1==len (_eff .Data )-1||_adb +1>=_eab +_eff .RowStride {if _gcfd =_eff .SetByte (_adb ,_cdb [_gde ]);
_gcfd !=nil {return _f .Wrapf (_gcfd ,_dc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_adb );};}else {_afb =(uint16 (_cdb [_gde ])<<8)|uint16 (_cdb [_agg ]);if _gcfd =_eff .setTwoBytes (_adb ,_afb );_gcfd !=nil {return _f .Wrapf (_gcfd ,_dc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_adb );
};_eee ++;};};};return nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _afad (d ,s )};func _bgbf (_ecbe ,_cgbed *Bitmap ,_eaef *Selection )(*Bitmap ,error ){const _efbg ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _aaga error ;
if _ecbe ,_aaga =_gfce (_ecbe ,_cgbed ,_eaef );_aaga !=nil {return nil ,_aaga ;};_gfea ,_aaga :=_gafe (nil ,_cgbed ,_eaef );if _aaga !=nil {return nil ,_f .Wrap (_aaga ,_efbg ,"");};if _ ,_aaga =_dafeg (_ecbe ,_gfea ,_eaef );_aaga !=nil {return nil ,_f .Wrap (_aaga ,_efbg ,"");
};return _ecbe ,nil ;};type SizeComparison int ;func (_cdec *Bitmap )SizesEqual (s *Bitmap )bool {if _cdec ==s {return true ;};if _cdec .Width !=s .Width ||_cdec .Height !=s .Height {return false ;};return true ;};func TstImageBitmapInverseData ()[]byte {_edge :=_aagac .Copy ();
_edge .InverseData ();return _edge .Data ;};func (_fdagc *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_aded *Bitmaps ,_gbgca error ){const _edddc ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _fdagc ==nil {return nil ,_f .Error (_edddc ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_f .Errorf (_edddc ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_f .Errorf (_edddc ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_gcec ,_gbgca :=_fdagc .makeSizeIndicator (width ,height ,tp ,relation );if _gbgca !=nil {return nil ,_f .Wrap (_gbgca ,_edddc ,"");};_aded ,_gbgca =_fdagc .selectByIndicator (_gcec );if _gbgca !=nil {return nil ,_f .Wrap (_gbgca ,_edddc ,"");};return _aded ,nil ;
};type shift int ;type ClassedPoints struct{*Points ;_ab .IntSlice ;_edcg func (_feeg ,_acac int )bool ;};func (_agb *Bitmap )removeBorderGeneral (_ebf ,_eeaa ,_bada ,_ebbea int )(*Bitmap ,error ){const _fdb ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _ebf < 0||_eeaa < 0||_bada < 0||_ebbea < 0{return nil ,_f .Error (_fdb ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_ggafc ,_dacd :=_agb .Width ,_agb .Height ;
_edg :=_ggafc -_ebf -_eeaa ;_cbfd :=_dacd -_bada -_ebbea ;if _edg <=0{return nil ,_f .Errorf (_fdb ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_edg );};if _cbfd <=0{return nil ,_f .Errorf (_fdb ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_cbfd );
};_bgfe :=New (_edg ,_cbfd );_bgfe .Color =_agb .Color ;_fgfb :=_bgfe .RasterOperation (0,0,_edg ,_cbfd ,PixSrc ,_agb ,_ebf ,_bada );if _fgfb !=nil {return nil ,_f .Wrap (_fgfb ,_fdb ,"");};return _bgfe ,nil ;};func (_fgge *Bitmap )clipRectangle (_ddfb ,_dae *_abc .Rectangle )(_dggc *Bitmap ,_aegg error ){const _dgc ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _ddfb ==nil {return nil ,_f .Error (_dgc ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_fagc ,_bfa :=_fgge .Width ,_fgge .Height ;_dec ,_aegg :=ClipBoxToRectangle (_ddfb ,_fagc ,_bfa );if _aegg !=nil {_aef .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_aegg );
return nil ,nil ;};_caf ,_eacd :=_dec .Min .X ,_dec .Min .Y ;_fgdb ,_fcba :=_dec .Max .X -_dec .Min .X ,_dec .Max .Y -_dec .Min .Y ;_dggc =New (_fgdb ,_fcba );_dggc .Text =_fgge .Text ;if _aegg =_dggc .RasterOperation (0,0,_fgdb ,_fcba ,PixSrc ,_fgge ,_caf ,_eacd );
_aegg !=nil {return nil ,_f .Wrap (_aegg ,_dgc ,"");};if _dae !=nil {*_dae =*_dec ;};return _dggc ,nil ;};func (_dafe *Bitmap )connComponentsBB (_eafd int )(_gfegg *Boxes ,_dabd error ){const _bge ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _eafd !=4&&_eafd !=8{return nil ,_f .Error (_bge ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _dafe .Zero (){return &Boxes {},nil ;
};_dafe .setPadBits (0);_adcf ,_dabd :=_afad (nil ,_dafe );if _dabd !=nil {return nil ,_f .Wrap (_dabd ,_bge ,"\u0062\u006d\u0031");};_fcbda :=&_ab .Stack {};_fcbda .Aux =&_ab .Stack {};_gfegg =&Boxes {};var (_gggb ,_dbdc int ;_fgdbe _abc .Point ;_gfafb bool ;
_abaf *_abc .Rectangle ;);for {if _fgdbe ,_gfafb ,_dabd =_adcf .nextOnPixel (_dbdc ,_gggb );_dabd !=nil {return nil ,_f .Wrap (_dabd ,_bge ,"");};if !_gfafb {break ;};if _abaf ,_dabd =_dfae (_adcf ,_fcbda ,_fgdbe .X ,_fgdbe .Y ,_eafd );_dabd !=nil {return nil ,_f .Wrap (_dabd ,_bge ,"");
};if _dabd =_gfegg .Add (_abaf );_dabd !=nil {return nil ,_f .Wrap (_dabd ,_bge ,"");};_dbdc =_fgdbe .X ;_gggb =_fgdbe .Y ;};return _gfegg ,nil ;};func TstTSymbol (t *_ae .T ,scale ...int )*Bitmap {_eaebd ,_fabbc :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});
_af .NoError (t ,_fabbc );return TstGetScaledSymbol (t ,_eaebd ,scale ...);};func (_gebea *BitmapsArray )AddBitmaps (bm *Bitmaps ){_gebea .Values =append (_gebea .Values ,bm )};const (_dacaf shift =iota ;_gbab ;);func _eafc (_feea uint ,_daag byte )byte {return _daag >>_feea <<_feea };
func (_fbgcf *ClassedPoints )YAtIndex (i int )float32 {return (*_fbgcf .Points )[_fbgcf .IntSlice [i ]].Y };func _ed (_abcg ,_dfg *Bitmap )(_ge error ){const _fca ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_ded :=_dfg .RowStride ;_gd :=_abcg .RowStride ;_ea :=_dfg .RowStride *4-_abcg .RowStride ;var (_gg ,_cg byte ;_aa uint32 ;_ba ,_eg ,_db ,_cgf ,_ga ,_bg ,_bag int ;);for _db =0;_db < _dfg .Height ;_db ++{_ba =_db *_ded ;_eg =4*_db *_gd ;for _cgf =0;_cgf < _ded ;
_cgf ++{_gg =_dfg .Data [_ba +_cgf ];_aa =_ffcd [_gg ];_bg =_eg +_cgf *4;if _ea !=0&&(_cgf +1)*4> _abcg .RowStride {for _ga =_ea ;_ga > 0;_ga --{_cg =byte ((_aa >>uint (_ga *8))&0xff);_bag =_bg +(_ea -_ga );if _ge =_abcg .SetByte (_bag ,_cg );_ge !=nil {return _f .Wrapf (_ge ,_fca ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ga );
};};}else if _ge =_abcg .setFourBytes (_bg ,_aa );_ge !=nil {return _f .Wrap (_ge ,_fca ,"");};if _ge =_abcg .setFourBytes (_eg +_cgf *4,_ffcd [_dfg .Data [_ba +_cgf ]]);_ge !=nil {return _f .Wrap (_ge ,_fca ,"");};};for _ga =1;_ga < 4;_ga ++{for _cgf =0;
_cgf < _gd ;_cgf ++{if _ge =_abcg .SetByte (_eg +_ga *_gd +_cgf ,_abcg .Data [_eg +_cgf ]);_ge !=nil {return _f .Wrapf (_ge ,_fca ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ga ,_cgf );
};};};};return nil ;};func _cbb (_egf *Bitmap ,_fg int )(*Bitmap ,error ){const _efb ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _egf ==nil {return nil ,_f .Error (_efb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fg ==1{return _afad (nil ,_egf );};if _fg !=2&&_fg !=4&&_fg !=8{return nil ,_f .Error (_efb ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_agf :=_fg *_egf .Width ;_fcd :=_fg *_egf .Height ;_cde :=New (_agf ,_fcd );var _abgc error ;switch _fg {case 2:_abgc =_b (_cde ,_egf );case 4:_abgc =_ed (_cde ,_egf );case 8:_abgc =_dg (_cde ,_egf );};if _abgc !=nil {return nil ,_f .Wrap (_abgc ,_efb ,"");
};return _cde ,nil ;};func (_cacc *ClassedPoints )Len ()int {return _cacc .IntSlice .Size ()};type Color int ;func (_adff MorphProcess )getWidthHeight ()(_aabf ,_agga int ){return _adff .Arguments [0],_adff .Arguments [1];};func _bbfg (_cgef ,_fcgc *Bitmap ,_ceg ,_fegd ,_gagdd ,_acdb ,_ccee ,_adfbf ,_febb ,_cddcb int ,_aabb CombinationOperator )error {var _gbgc int ;
_dafg :=func (){_gbgc ++;_gagdd +=_fcgc .RowStride ;_acdb +=_cgef .RowStride ;_ccee +=_cgef .RowStride };for _gbgc =_ceg ;_gbgc < _fegd ;_dafg (){var _adda uint16 ;_dcfg :=_gagdd ;for _cefa :=_acdb ;_cefa <=_ccee ;_cefa ++{_cfbeg ,_ddbcc :=_fcgc .GetByte (_dcfg );
if _ddbcc !=nil {return _ddbcc ;};_ffdd ,_ddbcc :=_cgef .GetByte (_cefa );if _ddbcc !=nil {return _ddbcc ;};_adda =(_adda |uint16 (_ffdd ))<<uint (_cddcb );_ffdd =byte (_adda >>8);if _cefa ==_ccee {_ffdd =_eafc (uint (_adfbf ),_ffdd );};if _ddbcc =_fcgc .SetByte (_dcfg ,_efea (_cfbeg ,_ffdd ,_aabb ));
_ddbcc !=nil {return _ddbcc ;};_dcfg ++;_adda <<=uint (_febb );};};return nil ;};func (_cgcb *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _fafbd (_cgcb ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_cdde *Boxes )Get (i int )(*_abc .Rectangle ,error ){const _ecfd ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _cdde ==nil {return nil ,_f .Error (_ecfd ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_cdde )-1{return nil ,_f .Errorf (_ecfd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_cdde )[i ],nil ;};func (_ecgc *ClassedPoints )SortByX (){_ecgc ._edcg =_ecgc .xSortFunction ();_c .Sort (_ecgc )};func (_feag CombinationOperator )String ()string {var _ecbca string ;switch _feag {case CmbOpOr :_ecbca ="\u004f\u0052";case CmbOpAnd :_ecbca ="\u0041\u004e\u0044";
case CmbOpXor :_ecbca ="\u0058\u004f\u0052";case CmbOpXNor :_ecbca ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_ecbca ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_ecbca ="\u004e\u004f\u0054";};return _ecbca ;};func _egd ()(_gcb []byte ){_gcb =make ([]byte ,256);
for _dfd :=0;_dfd < 256;_dfd ++{_dcg :=byte (_dfd );_gcb [_dcg ]=(_dcg &0x01)|((_dcg &0x04)>>1)|((_dcg &0x10)>>2)|((_dcg &0x40)>>3)|((_dcg &0x02)<<3)|((_dcg &0x08)<<2)|((_dcg &0x20)<<1)|(_dcg &0x80);};return _gcb ;};func TstWordBitmap (t *_ae .T ,scale ...int )*Bitmap {_gaeffd :=1;
if len (scale )> 0{_gaeffd =scale [0];};_gafc :=3;_cdce :=9+7+15+2*_gafc ;_faca :=5+_gafc +5;_feeaf :=New (_cdce *_gaeffd ,_faca *_gaeffd );_geged :=&Bitmaps {};var _geadd *int ;_gafc *=_gaeffd ;_bdg :=0;_geadd =&_bdg ;_bbbfc :=0;_bdad :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,1*_gaeffd );_bdad =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,_gafc );_bdad =TstISymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,1*_gaeffd );_bdad =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,_gafc );_bdad =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,1*_gaeffd );_bdad =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,1*_gaeffd );_bdad =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,0);*_geadd =0;_bbbfc =5*_gaeffd +_gafc ;_bdad =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,1*_gaeffd );_bdad =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,_gafc );
_bdad =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,1*_gaeffd );_bdad =TstESymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,1*_gaeffd );_bdad =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,1*_gaeffd );
_bdad =TstESymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,1*_gaeffd );_bdad =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_geged ,_bdad ,_geadd ,_bbbfc ,0);TstWriteSymbols (t ,_geged ,_feeaf );return _feeaf ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _fafbd (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_adcfg *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _bfee ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_adcfg .Values )==0{return nil ,_f .Error (_bfee ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_dgeg :=&BitmapsArray {};_adcfg .SortByHeight ();_ddcdf :=-1;_efbd :=-1;for _afbee :=0;_afbee < len (_adcfg .Values );_afbee ++{_abdf :=_adcfg .Values [_afbee ].Height ;if _abdf > _ddcdf {_ddcdf =_abdf ;_efbd ++;_dgeg .Values =append (_dgeg .Values ,&Bitmaps {});
};_dgeg .Values [_efbd ].AddBitmap (_adcfg .Values [_afbee ]);};return _dgeg ,nil ;};func (_ffbb *Bitmap )addPadBits ()(_bad error ){const _fae ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_aab :=_ffbb .Width %8;
if _aab ==0{return nil ;};_fde :=_ffbb .Width /8;_ddbc :=_cb .NewReader (_ffbb .Data );_bede :=make ([]byte ,_ffbb .Height *_ffbb .RowStride );_bff :=_cb .NewWriterMSB (_bede );_gbc :=make ([]byte ,_fde );var (_gbcf int ;_adf uint64 ;);for _gbcf =0;_gbcf < _ffbb .Height ;
_gbcf ++{if _ ,_bad =_ddbc .Read (_gbc );_bad !=nil {return _f .Wrap (_bad ,_fae ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_bad =_bff .Write (_gbc );_bad !=nil {return _f .Wrap (_bad ,_fae ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _adf ,_bad =_ddbc .ReadBits (byte (_aab ));_bad !=nil {return _f .Wrap (_bad ,_fae ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _bad =_bff .WriteByte (byte (_adf )<<uint (8-_aab ));_bad !=nil {return _f .Wrap (_bad ,_fae ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_ffbb .Data =_bff .Data ();return nil ;};func _gaf (_eac *Bitmap ,_cea ...int )(_cgg *Bitmap ,_bb error ){const _aeg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _eac ==nil {return nil ,_f .Error (_aeg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_cea )==0||len (_cea )> 4{return nil ,_f .Error (_aeg ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _cea [0]<=0{_aef .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_cgg ,_bb =_afad (nil ,_eac );if _bb !=nil {return nil ,_f .Wrap (_bb ,_aeg ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _cgg ,nil ;};_fcae :=_egd ();_cgg =_eac ;for _ddf ,_ada :=range _cea {if _ada <=0{break ;};_cgg ,_bb =_edd (_cgg ,_ada ,_fcae );if _bb !=nil {return nil ,_f .Wrapf (_bb ,_aeg ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_ddf );
};};return _cgg ,nil ;};func (_ebg *Bitmap )resizeImageData (_egef *Bitmap )error {if _egef ==nil {return _f .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _ebg .SizesEqual (_egef ){return nil ;};_ebg .Data =make ([]byte ,len (_egef .Data ));_ebg .Width =_egef .Width ;_ebg .Height =_egef .Height ;_ebg .RowStride =_egef .RowStride ;return nil ;};func TstWSymbol (t *_ae .T ,scale ...int )*Bitmap {_gafbg ,_gcdc :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_af .NoError (t ,_gcdc );return TstGetScaledSymbol (t ,_gafbg ,scale ...);};func (_aaaf *Bitmap )Equivalent (s *Bitmap )bool {return _aaaf .equivalent (s )};func (_dgcc *ClassedPoints )xSortFunction ()func (_afbc int ,_dace int )bool {return func (_dbae ,_adcc int )bool {return _dgcc .XAtIndex (_dbae )< _dgcc .XAtIndex (_adcc )};
};func (_ccfb *ClassedPoints )ySortFunction ()func (_gabc int ,_daedb int )bool {return func (_cedg ,_ddcd int )bool {return _ccfb .YAtIndex (_cedg )< _ccfb .YAtIndex (_ddcd )};};func (_cab *Bitmap )addBorderGeneral (_gcce ,_gagd ,_fgf ,_ade int ,_edfg int )(*Bitmap ,error ){const _acd ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _gcce < 0||_gagd < 0||_fgf < 0||_ade < 0{return nil ,_f .Error (_acd ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_bfbe ,_ebab :=_cab .Width ,_cab .Height ;_acdg :=_bfbe +_gcce +_gagd ;_gcbd :=_ebab +_fgf +_ade ;
_gcfe :=New (_acdg ,_gcbd );_gcfe .Color =_cab .Color ;_gcfb :=PixClr ;if _edfg > 0{_gcfb =PixSet ;};_cdaf :=_gcfe .RasterOperation (0,0,_gcce ,_gcbd ,_gcfb ,nil ,0,0);if _cdaf !=nil {return nil ,_f .Wrap (_cdaf ,_acd ,"\u006c\u0065\u0066\u0074");};_cdaf =_gcfe .RasterOperation (_acdg -_gagd ,0,_gagd ,_gcbd ,_gcfb ,nil ,0,0);
if _cdaf !=nil {return nil ,_f .Wrap (_cdaf ,_acd ,"\u0072\u0069\u0067h\u0074");};_cdaf =_gcfe .RasterOperation (0,0,_acdg ,_fgf ,_gcfb ,nil ,0,0);if _cdaf !=nil {return nil ,_f .Wrap (_cdaf ,_acd ,"\u0074\u006f\u0070");};_cdaf =_gcfe .RasterOperation (0,_gcbd -_ade ,_acdg ,_ade ,_gcfb ,nil ,0,0);
if _cdaf !=nil {return nil ,_f .Wrap (_cdaf ,_acd ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_cdaf =_gcfe .RasterOperation (_gcce ,_fgf ,_bfbe ,_ebab ,PixSrc ,_cab ,0,0);if _cdaf !=nil {return nil ,_f .Wrap (_cdaf ,_acd ,"\u0063\u006f\u0070\u0079");};return _gcfe ,nil ;
};func _dafeg (_bgfg ,_cfbb *Bitmap ,_bfcc *Selection )(*Bitmap ,error ){const _ecde ="\u0065\u0072\u006fd\u0065";var (_fffde error ;_dabg *Bitmap ;);_bgfg ,_fffde =_bedf (_bgfg ,_cfbb ,_bfcc ,&_dabg );if _fffde !=nil {return nil ,_f .Wrap (_fffde ,_ecde ,"");
};if _fffde =_bgfg .setAll ();_fffde !=nil {return nil ,_f .Wrap (_fffde ,_ecde ,"");};var _affcg SelectionValue ;for _fgde :=0;_fgde < _bfcc .Height ;_fgde ++{for _bceg :=0;_bceg < _bfcc .Width ;_bceg ++{_affcg =_bfcc .Data [_fgde ][_bceg ];if _affcg ==SelHit {_fffde =_fafbd (_bgfg ,_bfcc .Cx -_bceg ,_bfcc .Cy -_fgde ,_cfbb .Width ,_cfbb .Height ,PixSrcAndDst ,_dabg ,0,0);
if _fffde !=nil {return nil ,_f .Wrap (_fffde ,_ecde ,"");};};};};if MorphBC ==SymmetricMorphBC {return _bgfg ,nil ;};_dce ,_bdef ,_dfedg ,_eced :=_bfcc .findMaxTranslations ();if _dce > 0{if _fffde =_bgfg .RasterOperation (0,0,_dce ,_cfbb .Height ,PixClr ,nil ,0,0);
_fffde !=nil {return nil ,_f .Wrap (_fffde ,_ecde ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _dfedg > 0{if _fffde =_bgfg .RasterOperation (_cfbb .Width -_dfedg ,0,_dfedg ,_cfbb .Height ,PixClr ,nil ,0,0);_fffde !=nil {return nil ,_f .Wrap (_fffde ,_ecde ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _bdef > 0{if _fffde =_bgfg .RasterOperation (0,0,_cfbb .Width ,_bdef ,PixClr ,nil ,0,0);_fffde !=nil {return nil ,_f .Wrap (_fffde ,_ecde ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _eced > 0{if _fffde =_bgfg .RasterOperation (0,_cfbb .Height -_eced ,_cfbb .Width ,_eced ,PixClr ,nil ,0,0);
_fffde !=nil {return nil ,_f .Wrap (_fffde ,_ecde ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _bgfg ,nil ;};type Component int ;type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_agdb *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_beed *Bitmaps ,_fgda *Boxes ,_dcaa error ){const _ebd ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _agdb ==nil {return nil ,nil ,_f .Error (_ebd ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_f .Error (_ebd ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _agdb .Zero (){_fgda =&Boxes {};_beed =&Bitmaps {};return _beed ,_fgda ,nil ;};switch components {case ComponentConn :_beed =&Bitmaps {};if _fgda ,_dcaa =_agdb .ConnComponents (_beed ,8);_dcaa !=nil {return nil ,nil ,_f .Wrap (_dcaa ,_ebd ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_aea ,_adbb :=MorphSequence (_agdb ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _adbb !=nil {return nil ,nil ,_f .Wrap (_adbb ,_ebd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _aef .Log .IsLogLevel (_aef .LogLevelTrace ){_aef .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_aea .String ());
};_gafg :=&Bitmaps {};_fgda ,_adbb =_aea .ConnComponents (_gafg ,8);if _adbb !=nil {return nil ,nil ,_f .Wrap (_adbb ,_ebd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _aef .Log .IsLogLevel (_aef .LogLevelTrace ){_aef .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_gafg .String ());
};if _beed ,_adbb =_gafg .ClipToBitmap (_agdb );_adbb !=nil {return nil ,nil ,_f .Wrap (_adbb ,_ebd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_befe :=1;
var _gcdf *Bitmap ;switch {case _agdb .XResolution <=200:_gcdf =_agdb ;case _agdb .XResolution <=400:_befe =2;_gcdf ,_dcaa =_gaf (_agdb ,1,0,0,0);if _dcaa !=nil {return nil ,nil ,_f .Wrap (_dcaa ,_ebd ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_befe =4;_gcdf ,_dcaa =_gaf (_agdb ,1,1,0,0);if _dcaa !=nil {return nil ,nil ,_f .Wrap (_dcaa ,_ebd ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_aacd ,_ ,_adfg :=_acca (_gcdf );if _adfg !=nil {return nil ,nil ,_f .Wrap (_adfg ,_ebd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_bdddb ,_adfg :=_ddgd (_aacd ,_befe );if _adfg !=nil {return nil ,nil ,_f .Wrap (_adfg ,_ebd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_afff :=&Bitmaps {};if _fgda ,_adfg =_bdddb .ConnComponents (_afff ,4);_adfg !=nil {return nil ,nil ,_f .Wrap (_adfg ,_ebd ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _beed ,_adfg =_afff .ClipToBitmap (_agdb );_adfg !=nil {return nil ,nil ,_f .Wrap (_adfg ,_ebd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_beed ,_dcaa =_beed .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _dcaa !=nil {return nil ,nil ,_f .Wrap (_dcaa ,_ebd ,"");};_fgda ,_dcaa =_fgda .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _dcaa !=nil {return nil ,nil ,_f .Wrap (_dcaa ,_ebd ,"");};return _beed ,_fgda ,nil ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_dacf :=_fafdd (h ,w ,"");
_dacf .setOrigin (cy ,cx );var _eaffc ,_gbadf int ;for _eaffc =0;_eaffc < h ;_eaffc ++{for _gbadf =0;_gbadf < w ;_gbadf ++{_dacf .Data [_eaffc ][_gbadf ]=tp ;};};return _dacf ;};func (_bced *Bitmap )SetDefaultPixel (){for _fcfd :=range _bced .Data {_bced .Data [_fcfd ]=byte (0xff);
};};func (_ebbe *Bitmap )nextOnPixel (_eagf ,_dcb int )(_dcf _abc .Point ,_dbd bool ,_baag error ){const _eec ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_dcf ,_dbd ,_baag =_ebbe .nextOnPixelLow (_ebbe .Width ,_ebbe .Height ,_ebbe .RowStride ,_eagf ,_dcb );
if _baag !=nil {return _dcf ,false ,_f .Wrap (_baag ,_eec ,"");};return _dcf ,_dbd ,nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_abc .Rectangle ;};func (_ggdd *Bitmap )Zero ()bool {_gcbe :=_ggdd .Width /8;_fagd :=_ggdd .Width &7;var _bddb byte ;
if _fagd !=0{_bddb =byte (0xff<<uint (8-_fagd ));};var _fcce ,_fagg ,_cage int ;for _fagg =0;_fagg < _ggdd .Height ;_fagg ++{_fcce =_ggdd .RowStride *_fagg ;for _cage =0;_cage < _gcbe ;_cage ,_fcce =_cage +1,_fcce +1{if _ggdd .Data [_fcce ]!=0{return false ;
};};if _fagd > 0{if _ggdd .Data [_fcce ]&_bddb !=0{return false ;};};};return true ;};func MakePixelCentroidTab8 ()[]int {return _bcab ()};func _fafdd (_bdce ,_bebb int ,_cdbab string )*Selection {_beedg :=&Selection {Height :_bdce ,Width :_bebb ,Name :_cdbab };
_beedg .Data =make ([][]SelectionValue ,_bdce );for _dcfc :=0;_dcfc < _bdce ;_dcfc ++{_beedg .Data [_dcfc ]=make ([]SelectionValue ,_bebb );};return _beedg ;};func (_edad *Bitmap )GetChocolateData ()[]byte {if _edad .Color ==Vanilla {_edad .inverseData ();
};return _edad .Data ;};func (_dda *Bitmap )ToImage ()_abc .Image {_ggaf ,_bed :=_cd .NewImage (_dda .Width ,_dda .Height ,1,1,_dda .Data ,nil ,nil );if _bed !=nil {_aef .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bed );
};return _ggaf ;};func (_gedgc Points )GetIntX (i int )(int ,error ){if i >=len (_gedgc ){return 0,_f .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_gedgc [i ].X ),nil ;};type Getter interface{GetBitmap ()*Bitmap ;};type byWidth Bitmaps ;func _ccae (_afbe ,_bcaa *Bitmap ,_caeb ,_ebac int )(*Bitmap ,error ){const _fdde ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _bcaa ==nil {return nil ,_f .Error (_fdde ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _caeb < 1&&_ebac < 1{return nil ,_f .Error (_fdde ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _caeb ==1&&_ebac ==1{return _bcaa .Copy (),nil ;};if _caeb ==1||_ebac ==1{var _geeb error ;
_gbgg :=SelCreateBrick (_ebac ,_caeb ,_ebac /2,_caeb /2,SelHit );_afbe ,_geeb =_bgad (_afbe ,_bcaa ,_gbgg );if _geeb !=nil {return nil ,_f .Wrap (_geeb ,_fdde ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _afbe ,nil ;};_eeda :=SelCreateBrick (1,_caeb ,0,_caeb /2,SelHit );_gead :=SelCreateBrick (_ebac ,1,_ebac /2,0,SelHit );_adcac ,_gfd :=_dafeg (nil ,_bcaa ,_eeda );if _gfd !=nil {return nil ,_f .Wrap (_gfd ,_fdde ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_afbe ,_gfd =_dafeg (_afbe ,_adcac ,_gead );if _gfd !=nil {return nil ,_f .Wrap (_gfd ,_fdde ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_gfd =_gafe (_adcac ,_afbe ,_eeda );if _gfd !=nil {return nil ,_f .Wrap (_gfd ,_fdde ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_gfd =_gafe (_afbe ,_adcac ,_gead );if _gfd !=nil {return nil ,_f .Wrap (_gfd ,_fdde ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _afbe ,nil ;};func (_fee *Bitmap )GetVanillaData ()[]byte {if _fee .Color ==Chocolate {_fee .inverseData ();
};return _fee .Data ;};func (_efbff *byWidth )Len ()int {return len (_efbff .Values )};func (_ead *Bitmap )InverseData (){_ead .inverseData ()};func (_abfd *Bitmap )inverseData (){if _gfcb :=_abfd .RasterOperation (0,0,_abfd .Width ,_abfd .Height ,PixNotDst ,nil ,0,0);
_gfcb !=nil {_aef .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_gfcb );};if _abfd .Color ==Chocolate {_abfd .Color =Vanilla ;}else {_abfd .Color =Chocolate ;};};
func TstFrameBitmapData ()[]byte {return _afffc .Data };func (_egea *Bitmap )setBit (_ecbc int ){_egea .Data [(_ecbc >>3)]|=0x80>>uint (_ecbc &7)};func _dg (_ef ,_eb *Bitmap )(_ad error ){const _dgb ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_gc :=_eb .RowStride ;_bf :=_ef .RowStride ;var _bgf ,_cc ,_aac ,_ega ,_cbe int ;for _aac =0;_aac < _eb .Height ;_aac ++{_bgf =_aac *_gc ;_cc =8*_aac *_bf ;for _ega =0;_ega < _gc ;_ega ++{if _ad =_ef .setEightBytes (_cc +_ega *8,_adbe [_eb .Data [_bgf +_ega ]]);
_ad !=nil {return _f .Wrap (_ad ,_dgb ,"");};};for _cbe =1;_cbe < 8;_cbe ++{for _ega =0;_ega < _bf ;_ega ++{if _ad =_ef .SetByte (_cc +_cbe *_bf +_ega ,_ef .Data [_cc +_ega ]);_ad !=nil {return _f .Wrap (_ad ,_dgb ,"");};};};};return nil ;};func _ffae (_fbfdd *_ab .Stack )(_adcbb *fillSegment ,_acda error ){const _gacc ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _fbfdd ==nil {return nil ,_f .Error (_gacc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _fbfdd .Aux ==nil {return nil ,_f .Error (_gacc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_ffddf ,_cffd :=_fbfdd .Pop ();if !_cffd {return nil ,nil ;};_aecb ,_cffd :=_ffddf .(*fillSegment );if !_cffd {return nil ,_f .Error (_gacc ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_adcbb =&fillSegment {_aecb ._bcdf ,_aecb ._cbed ,_aecb ._dcfgf +_aecb ._ebaa ,_aecb ._ebaa };_fbfdd .Aux .Push (_aecb );return _adcbb ,nil ;};func _eadb (_gcab *Bitmap ,_eacf ,_aagg ,_efecg ,_bcebc int ,_cefdd RasterOperator ,_bafb *Bitmap ,_ffbd ,_ecae int )error {var (_cggfg bool ;
_deab bool ;_gaad byte ;_dfec int ;_edae int ;_ebcf int ;_aafe int ;_dfbf bool ;_deeb int ;_dfabe int ;_bcda int ;_aedac bool ;_bfae byte ;_dcd int ;_ebbc int ;_fgbbd int ;_febc byte ;_cbbec int ;_adbc int ;_deeg uint ;_dfcd uint ;_bgba byte ;_ggdac shift ;
_eddeb bool ;_fdggf bool ;_egad ,_debcg int ;);if _ffbd &7!=0{_adbc =8-(_ffbd &7);};if _eacf &7!=0{_edae =8-(_eacf &7);};if _adbc ==0&&_edae ==0{_bgba =_eccfe [0];}else {if _edae > _adbc {_deeg =uint (_edae -_adbc );}else {_deeg =uint (8-(_adbc -_edae ));
};_dfcd =8-_deeg ;_bgba =_eccfe [_deeg ];};if (_eacf &7)!=0{_cggfg =true ;_dfec =8-(_eacf &7);_gaad =_eccfe [_dfec ];_ebcf =_gcab .RowStride *_aagg +(_eacf >>3);_aafe =_bafb .RowStride *_ecae +(_ffbd >>3);_cbbec =8-(_ffbd &7);if _dfec > _cbbec {_ggdac =_dacaf ;
if _efecg >=_adbc {_eddeb =true ;};}else {_ggdac =_gbab ;};};if _efecg < _dfec {_deab =true ;_gaad &=_afagc [8-_dfec +_efecg ];};if !_deab {_deeb =(_efecg -_dfec )>>3;if _deeb !=0{_dfbf =true ;_dfabe =_gcab .RowStride *_aagg +((_eacf +_edae )>>3);_bcda =_bafb .RowStride *_ecae +((_ffbd +_edae )>>3);
};};_dcd =(_eacf +_efecg )&7;if !(_deab ||_dcd ==0){_aedac =true ;_bfae =_afagc [_dcd ];_ebbc =_gcab .RowStride *_aagg +((_eacf +_edae )>>3)+_deeb ;_fgbbd =_bafb .RowStride *_ecae +((_ffbd +_edae )>>3)+_deeb ;if _dcd > int (_dfcd ){_fdggf =true ;};};switch _cefdd {case PixSrc :if _cggfg {for _egad =0;
_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],_febc ,_gaad );
_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;_debcg < _deeb ;_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );_gcab .Data [_dfabe +_debcg ]=_febc ;
};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],_febc ,_bfae );
_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;};};case PixNotSrc :if _cggfg {for _egad =0;_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );};
}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],^_febc ,_gaad );_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;_debcg < _deeb ;_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );
_gcab .Data [_dfabe +_debcg ]=^_febc ;};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );
};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],^_febc ,_bfae );_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;};};case PixSrcOrDst :if _cggfg {for _egad =0;_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );
};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],_febc |_gcab .Data [_ebcf ],_gaad );_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;_debcg < _deeb ;
_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );_gcab .Data [_dfabe +_debcg ]|=_febc ;};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;
if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],_febc |_gcab .Data [_ebbc ],_bfae );_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;};};case PixSrcAndDst :if _cggfg {for _egad =0;
_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],_febc &_gcab .Data [_ebcf ],_gaad );
_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;_debcg < _deeb ;_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );_gcab .Data [_dfabe +_debcg ]&=_febc ;
};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],_febc &_gcab .Data [_ebbc ],_bfae );
_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;};};case PixSrcXorDst :if _cggfg {for _egad =0;_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );
};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],_febc ^_gcab .Data [_ebcf ],_gaad );_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;_debcg < _deeb ;
_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );_gcab .Data [_dfabe +_debcg ]^=_febc ;};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;
if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],_febc ^_gcab .Data [_ebbc ],_bfae );_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;};};case PixNotSrcOrDst :if _cggfg {for _egad =0;
_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],^_febc |_gcab .Data [_ebcf ],_gaad );
_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;_debcg < _deeb ;_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );_gcab .Data [_dfabe +_debcg ]|=^_febc ;
};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],^_febc |_gcab .Data [_ebbc ],_bfae );
_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;};};case PixNotSrcAndDst :if _cggfg {for _egad =0;_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );
};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],^_febc &_gcab .Data [_ebcf ],_gaad );_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;
_debcg < _deeb ;_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );_gcab .Data [_dfabe +_debcg ]&=^_febc ;};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};if _aedac {for _egad =0;_egad < _bcebc ;
_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],^_febc &_gcab .Data [_ebbc ],_bfae );_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;
};};case PixSrcOrNotDst :if _cggfg {for _egad =0;_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],_febc |^_gcab .Data [_ebcf ],_gaad );
_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;_debcg < _deeb ;_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );_gcab .Data [_dfabe +_debcg ]=_febc |^_gcab .Data [_dfabe +_debcg ];
};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],_febc |^_gcab .Data [_ebbc ],_bfae );
_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;};};case PixSrcAndNotDst :if _cggfg {for _egad =0;_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );
};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],_febc &^_gcab .Data [_ebcf ],_gaad );_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;
_debcg < _deeb ;_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );_gcab .Data [_dfabe +_debcg ]=_febc &^_gcab .Data [_dfabe +_debcg ];};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};
if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],_febc &^_gcab .Data [_ebbc ],_bfae );_ebbc +=_gcab .RowStride ;
_fgbbd +=_bafb .RowStride ;};};case PixNotPixSrcOrDst :if _cggfg {for _egad =0;_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;
};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],^(_febc |_gcab .Data [_ebcf ]),_gaad );_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;_debcg < _deeb ;_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );
_gcab .Data [_dfabe +_debcg ]=^(_febc |_gcab .Data [_dfabe +_debcg ]);};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );
};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],^(_febc |_gcab .Data [_ebbc ]),_bfae );_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;};};case PixNotPixSrcAndDst :if _cggfg {for _egad =0;_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;
if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],^(_febc &_gcab .Data [_ebcf ]),_gaad );_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;
};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;_debcg < _deeb ;_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );_gcab .Data [_dfabe +_debcg ]=^(_febc &_gcab .Data [_dfabe +_debcg ]);
};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};};if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],^(_febc &_gcab .Data [_ebbc ]),_bfae );
_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;};};case PixNotPixSrcXorDst :if _cggfg {for _egad =0;_egad < _bcebc ;_egad ++{if _ggdac ==_dacaf {_febc =_bafb .Data [_aafe ]<<_deeg ;if _eddeb {_febc =_dcfgc (_febc ,_bafb .Data [_aafe +1]>>_dfcd ,_bgba );
};}else {_febc =_bafb .Data [_aafe ]>>_dfcd ;};_gcab .Data [_ebcf ]=_dcfgc (_gcab .Data [_ebcf ],^(_febc ^_gcab .Data [_ebcf ]),_gaad );_ebcf +=_gcab .RowStride ;_aafe +=_bafb .RowStride ;};};if _dfbf {for _egad =0;_egad < _bcebc ;_egad ++{for _debcg =0;
_debcg < _deeb ;_debcg ++{_febc =_dcfgc (_bafb .Data [_bcda +_debcg ]<<_deeg ,_bafb .Data [_bcda +_debcg +1]>>_dfcd ,_bgba );_gcab .Data [_dfabe +_debcg ]=^(_febc ^_gcab .Data [_dfabe +_debcg ]);};_dfabe +=_gcab .RowStride ;_bcda +=_bafb .RowStride ;};
};if _aedac {for _egad =0;_egad < _bcebc ;_egad ++{_febc =_bafb .Data [_fgbbd ]<<_deeg ;if _fdggf {_febc =_dcfgc (_febc ,_bafb .Data [_fgbbd +1]>>_dfcd ,_bgba );};_gcab .Data [_ebbc ]=_dcfgc (_gcab .Data [_ebbc ],^(_febc ^_gcab .Data [_ebbc ]),_bfae );
_ebbc +=_gcab .RowStride ;_fgbbd +=_bafb .RowStride ;};};default:_aef .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_cefdd );
return _f .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_ccac *Bitmaps )makeSizeIndicator (_dacg ,_dfbg int ,_adfgg LocationFilter ,_ceea SizeComparison )(_cbcdg *_ab .NumSlice ,_bcef error ){const _gcae ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ccac ==nil {return nil ,_f .Error (_gcae ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _adfgg {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_f .Errorf (_gcae ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_adfgg );
};switch _ceea {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_f .Errorf (_gcae ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_ceea );
};_cbcdg =&_ab .NumSlice {};var (_febbe ,_bdaa ,_edce int ;_bbfgfb *Bitmap ;);for _ ,_bbfgfb =range _ccac .Values {_febbe =0;_bdaa ,_edce =_bbfgfb .Width ,_bbfgfb .Height ;switch _adfgg {case LocSelectWidth :if (_ceea ==SizeSelectIfLT &&_bdaa < _dacg )||(_ceea ==SizeSelectIfGT &&_bdaa > _dacg )||(_ceea ==SizeSelectIfLTE &&_bdaa <=_dacg )||(_ceea ==SizeSelectIfGTE &&_bdaa >=_dacg )||(_ceea ==SizeSelectIfEQ &&_bdaa ==_dacg ){_febbe =1;
};case LocSelectHeight :if (_ceea ==SizeSelectIfLT &&_edce < _dfbg )||(_ceea ==SizeSelectIfGT &&_edce > _dfbg )||(_ceea ==SizeSelectIfLTE &&_edce <=_dfbg )||(_ceea ==SizeSelectIfGTE &&_edce >=_dfbg )||(_ceea ==SizeSelectIfEQ &&_edce ==_dfbg ){_febbe =1;
};case LocSelectIfEither :if (_ceea ==SizeSelectIfLT &&(_bdaa < _dacg ||_edce < _dfbg ))||(_ceea ==SizeSelectIfGT &&(_bdaa > _dacg ||_edce > _dfbg ))||(_ceea ==SizeSelectIfLTE &&(_bdaa <=_dacg ||_edce <=_dfbg ))||(_ceea ==SizeSelectIfGTE &&(_bdaa >=_dacg ||_edce >=_dfbg ))||(_ceea ==SizeSelectIfEQ &&(_bdaa ==_dacg ||_edce ==_dfbg )){_febbe =1;
};case LocSelectIfBoth :if (_ceea ==SizeSelectIfLT &&(_bdaa < _dacg &&_edce < _dfbg ))||(_ceea ==SizeSelectIfGT &&(_bdaa > _dacg &&_edce > _dfbg ))||(_ceea ==SizeSelectIfLTE &&(_bdaa <=_dacg &&_edce <=_dfbg ))||(_ceea ==SizeSelectIfGTE &&(_bdaa >=_dacg &&_edce >=_dfbg ))||(_ceea ==SizeSelectIfEQ &&(_bdaa ==_dacg &&_edce ==_dfbg )){_febbe =1;
};};_cbcdg .AddInt (_febbe );};return _cbcdg ,nil ;};func _baagg (_fdfb ...MorphProcess )(_becee error ){const _bdac ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _agbg ,_ffag int ;for _ebcd ,_dfgd :=range _fdfb {if _becee =_dfgd .verify (_ebcd ,&_agbg ,&_ffag );
_becee !=nil {return _f .Wrap (_becee ,_bdac ,"");};};if _ffag !=0&&_agbg !=0{return _f .Error (_bdac ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func TstDSymbol (t *_ae .T ,scale ...int )*Bitmap {_geafbg ,_eefe :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_af .NoError (t ,_eefe );return TstGetScaledSymbol (t ,_geafbg ,scale ...);};func (_cca *Bitmap )setAll ()error {_ffec :=_fafbd (_cca ,0,0,_cca .Width ,_cca .Height ,PixSet ,nil ,0,0);
if _ffec !=nil {return _f .Wrap (_ffec ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func (_gedc *Bitmap )Equals (s *Bitmap )bool {if len (_gedc .Data )!=len (s .Data )||_gedc .Width !=s .Width ||_gedc .Height !=s .Height {return false ;};
for _ddb :=0;_ddb < _gedc .Height ;_ddb ++{_dad :=_ddb *_gedc .RowStride ;for _beff :=0;_beff < _gedc .RowStride ;_beff ++{if _gedc .Data [_dad +_beff ]!=s .Data [_dad +_beff ]{return false ;};};};return true ;};func (_beab *Bitmaps )AddBox (box *_abc .Rectangle ){_beab .Boxes =append (_beab .Boxes ,box )};
func TstRSymbol (t *_ae .T ,scale ...int )*Bitmap {_ggfcf ,_dedd :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_af .NoError (t ,_dedd );return TstGetScaledSymbol (t ,_ggfcf ,scale ...);};type Boxes []*_abc .Rectangle ;func NewClassedPoints (points *Points ,classes _ab .IntSlice )(*ClassedPoints ,error ){const _bbfb ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_f .Error (_bbfb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_f .Error (_bbfb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_deg :=&ClassedPoints {Points :points ,IntSlice :classes };if _fcec :=_deg .validateIntSlice ();_fcec !=nil {return nil ,_f .Wrap (_fcec ,_bbfb ,"");};return _deg ,nil ;};func _ff ()(_dfa [256]uint32 ){for _fgd :=0;_fgd < 256;_fgd ++{if _fgd &0x01!=0{_dfa [_fgd ]|=0xf;
};if _fgd &0x02!=0{_dfa [_fgd ]|=0xf0;};if _fgd &0x04!=0{_dfa [_fgd ]|=0xf00;};if _fgd &0x08!=0{_dfa [_fgd ]|=0xf000;};if _fgd &0x10!=0{_dfa [_fgd ]|=0xf0000;};if _fgd &0x20!=0{_dfa [_fgd ]|=0xf00000;};if _fgd &0x40!=0{_dfa [_fgd ]|=0xf000000;};if _fgd &0x80!=0{_dfa [_fgd ]|=0xf0000000;
};};return _dfa ;};func (_fggef *Points )Add (pt *Points )error {const _accc ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _fggef ==nil {return _f .Error (_accc ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _f .Error (_accc ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_fggef =append (*_fggef ,*pt ...);return nil ;};func (_gbg *Bitmap )And (s *Bitmap )(_fgdc *Bitmap ,_eaba error ){const _aba ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _gbg ==nil {return nil ,_f .Error (_aba ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_f .Error (_aba ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_gbg .SizesEqual (s ){_aef .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_aba );
};if _fgdc ,_eaba =_afad (_fgdc ,_gbg );_eaba !=nil {return nil ,_f .Wrap (_eaba ,_aba ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _eaba =_fgdc .RasterOperation (0,0,_fgdc .Width ,_fgdc .Height ,PixSrcAndDst ,s ,0,0);
_eaba !=nil {return nil ,_f .Wrap (_eaba ,_aba ,"");};return _fgdc ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _beacc (src ,sequence ...);};func (_bec MorphProcess )verify (_gbcb int ,_afcdf ,_adcb *int )error {const _bcg ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _bec .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_bec .Arguments )!=2{return _f .Error (_bcg ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_adeb ,_cefd :=_bec .getWidthHeight ();if _adeb <=0||_cefd <=0{return _f .Error (_bcg ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_dffd :=len (_bec .Arguments );*_afcdf +=_dffd ;if _dffd < 1||_dffd > 4{return _f .Error (_bcg ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _afag :=0;_afag < _dffd ;_afag ++{if _bec .Arguments [_afag ]< 1||_bec .Arguments [_afag ]> 4{return _f .Error (_bcg ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_bec .Arguments )==0{return _f .Error (_bcg ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fagga :=_bec .Arguments [0];if _fagga !=2&&_fagga !=4&&_fagga !=8{return _f .Error (_bcg ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_afcdf -=_cbba [_fagga /4];case MopAddBorder :if len (_bec .Arguments )==0{return _f .Error (_bcg ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcbc :=_bec .Arguments [0];if _gbcb > 0{return _f .Error (_bcg ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _fcbc < 1{return _f .Error (_bcg ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_adcb =_fcbc ;};return nil ;};func _bbedd (_bbba *Bitmap ,_aec *_ab .Stack ,_dgee ,_aefb int )(_gaeb *_abc .Rectangle ,_edgc error ){const _facb ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _bbba ==nil {return nil ,_f .Error (_facb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _aec ==nil {return nil ,_f .Error (_facb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_deaf ,_cgadc :=_bbba .Width ,_bbba .Height ;_dgdb :=_deaf -1;_ffge :=_cgadc -1;if _dgee < 0||_dgee > _dgdb ||_aefb < 0||_aefb > _ffge ||!_bbba .GetPixel (_dgee ,_aefb ){return nil ,nil ;};_cfgg :=_abc .Rect (100000,100000,0,0);if _edgc =_aceg (_aec ,_dgee ,_dgee ,_aefb ,1,_ffge ,&_cfgg );
_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _edgc =_aceg (_aec ,_dgee ,_dgee ,_aefb +1,-1,_ffge ,&_cfgg );_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_cfgg .Min .X ,_cfgg .Max .X =_dgee ,_dgee ;_cfgg .Min .Y ,_cfgg .Max .Y =_aefb ,_aefb ;var (_deccb *fillSegment ;_cgdc int ;);for _aec .Len ()> 0{if _deccb ,_edgc =_ffae (_aec );_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"");};_aefb =_deccb ._dcfgf ;
for _dgee =_deccb ._bcdf -1;_dgee >=0&&_bbba .GetPixel (_dgee ,_aefb );_dgee --{if _edgc =_bbba .SetPixel (_dgee ,_aefb ,0);_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _dgee >=_deccb ._bcdf -1{for {for _dgee ++;
_dgee <=_deccb ._cbed +1&&_dgee <=_dgdb &&!_bbba .GetPixel (_dgee ,_aefb );_dgee ++{};_cgdc =_dgee ;if !(_dgee <=_deccb ._cbed +1&&_dgee <=_dgdb ){break ;};for ;_dgee <=_dgdb &&_bbba .GetPixel (_dgee ,_aefb );_dgee ++{if _edgc =_bbba .SetPixel (_dgee ,_aefb ,0);
_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _edgc =_aceg (_aec ,_cgdc ,_dgee -1,_deccb ._dcfgf ,_deccb ._ebaa ,_ffge ,&_cfgg );_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _dgee > _deccb ._cbed {if _edgc =_aceg (_aec ,_deccb ._cbed +1,_dgee -1,_deccb ._dcfgf ,-_deccb ._ebaa ,_ffge ,&_cfgg );_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_cgdc =_dgee +1;if _cgdc < _deccb ._bcdf {if _edgc =_aceg (_aec ,_cgdc ,_deccb ._bcdf -1,_deccb ._dcfgf ,-_deccb ._ebaa ,_ffge ,&_cfgg );_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_dgee =_deccb ._bcdf ;for {for ;_dgee <=_dgdb &&_bbba .GetPixel (_dgee ,_aefb );_dgee ++{if _edgc =_bbba .SetPixel (_dgee ,_aefb ,0);_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _edgc =_aceg (_aec ,_cgdc ,_dgee -1,_deccb ._dcfgf ,_deccb ._ebaa ,_ffge ,&_cfgg );
_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dgee > _deccb ._cbed {if _edgc =_aceg (_aec ,_deccb ._cbed +1,_dgee -1,_deccb ._dcfgf ,-_deccb ._ebaa ,_ffge ,&_cfgg );_edgc !=nil {return nil ,_f .Wrap (_edgc ,_facb ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _dgee ++;_dgee <=_deccb ._cbed +1&&_dgee <=_dgdb &&!_bbba .GetPixel (_dgee ,_aefb );_dgee ++{};_cgdc =_dgee ;if !(_dgee <=_deccb ._cbed +1&&_dgee <=_dgdb ){break ;};};};_cfgg .Max .X ++;_cfgg .Max .Y ++;return &_cfgg ,nil ;};func (_fcea *Bitmap )String ()string {var _bbcc ="\u000a";
for _gff :=0;_gff < _fcea .Height ;_gff ++{var _dbc string ;for _gbff :=0;_gbff < _fcea .Width ;_gbff ++{_efae :=_fcea .GetPixel (_gbff ,_gff );if _efae {_dbc +="\u0031";}else {_dbc +="\u0030";};};_bbcc +=_dbc +"\u000a";};return _bbcc ;};func (_cfbbd *Bitmaps )HeightSorter ()func (_dafb ,_eacg int )bool {return func (_ffcf ,_dbccd int )bool {_adae :=_cfbbd .Values [_ffcf ].Height < _cfbbd .Values [_dbccd ].Height ;
_aef .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_cfbbd .Values [_ffcf ].Height ,_cfbbd .Values [_dbccd ].Height ,_adae );return _adae ;};};func _dcbf (_aabba ,_cdcd *Bitmap ,_abga ,_eaff ,_fdcgb uint ,_fea ,_cgad int ,_dbf bool ,_bedee ,_daca int )error {for _aefg :=_fea ;
_aefg < _cgad ;_aefg ++{if _bedee +1< len (_aabba .Data ){_gcgf :=_aefg +1==_cgad ;_adcg ,_adgg :=_aabba .GetByte (_bedee );if _adgg !=nil {return _adgg ;};_bedee ++;_adcg <<=_abga ;_aega ,_adgg :=_aabba .GetByte (_bedee );if _adgg !=nil {return _adgg ;
};_aega >>=_eaff ;_cfad :=_adcg |_aega ;if _gcgf &&!_dbf {_cfad =_eafc (_fdcgb ,_cfad );};_adgg =_cdcd .SetByte (_daca ,_cfad );if _adgg !=nil {return _adgg ;};_daca ++;if _gcgf &&_dbf {_agad ,_cec :=_aabba .GetByte (_bedee );if _cec !=nil {return _cec ;
};_agad <<=_abga ;_cfad =_eafc (_fdcgb ,_agad );if _cec =_cdcd .SetByte (_daca ,_cfad );_cec !=nil {return _cec ;};};continue ;};_bfgf ,_agadd :=_aabba .GetByte (_bedee );if _agadd !=nil {_aef .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_bedee ,_agadd );
return _agadd ;};_bfgf <<=_abga ;_bedee ++;_agadd =_cdcd .SetByte (_daca ,_bfgf );if _agadd !=nil {return _agadd ;};_daca ++;};return nil ;};func (_febd *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _cgge ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_febd .IntSlice .Size (){return 0,_f .Errorf (_cgge ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_febd .XAtIndex (i )),nil ;};func (_abe *Boxes )makeSizeIndicator (_aeed ,_gcd int ,_bfge LocationFilter ,_faac SizeComparison )*_ab .NumSlice {_gaec :=&_ab .NumSlice {};var _agac ,_dfdg ,_bffg int ;for _ ,_acg :=range *_abe {_agac =0;_dfdg ,_bffg =_acg .Dx (),_acg .Dy ();
switch _bfge {case LocSelectWidth :if (_faac ==SizeSelectIfLT &&_dfdg < _aeed )||(_faac ==SizeSelectIfGT &&_dfdg > _aeed )||(_faac ==SizeSelectIfLTE &&_dfdg <=_aeed )||(_faac ==SizeSelectIfGTE &&_dfdg >=_aeed ){_agac =1;};case LocSelectHeight :if (_faac ==SizeSelectIfLT &&_bffg < _gcd )||(_faac ==SizeSelectIfGT &&_bffg > _gcd )||(_faac ==SizeSelectIfLTE &&_bffg <=_gcd )||(_faac ==SizeSelectIfGTE &&_bffg >=_gcd ){_agac =1;
};case LocSelectIfEither :if (_faac ==SizeSelectIfLT &&(_bffg < _gcd ||_dfdg < _aeed ))||(_faac ==SizeSelectIfGT &&(_bffg > _gcd ||_dfdg > _aeed ))||(_faac ==SizeSelectIfLTE &&(_bffg <=_gcd ||_dfdg <=_aeed ))||(_faac ==SizeSelectIfGTE &&(_bffg >=_gcd ||_dfdg >=_aeed )){_agac =1;
};case LocSelectIfBoth :if (_faac ==SizeSelectIfLT &&(_bffg < _gcd &&_dfdg < _aeed ))||(_faac ==SizeSelectIfGT &&(_bffg > _gcd &&_dfdg > _aeed ))||(_faac ==SizeSelectIfLTE &&(_bffg <=_gcd &&_dfdg <=_aeed ))||(_faac ==SizeSelectIfGTE &&(_bffg >=_gcd &&_dfdg >=_aeed )){_agac =1;
};};_gaec .AddInt (_agac );};return _gaec ;};func TstESymbol (t *_ae .T ,scale ...int )*Bitmap {_caed ,_decdb :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_af .NoError (t ,_decdb );return TstGetScaledSymbol (t ,_caed ,scale ...);};func (_ecgg *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _fcge ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _ecgg ==nil {return nil ,_f .Error (_fcge ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_ecgg .Values )-1{return nil ,_f .Errorf (_fcge ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ecgg .Values [i ],nil ;};func _ffgf (_adadgg *Bitmap ,_dcgg ,_caad int ,_gfag ,_cfde int ,_gage RasterOperator ,_fbbe *Bitmap ,_cccbg ,_fdcga int )error {var _eedc ,_gefc ,_aada ,_aeggab int ;if _dcgg < 0{_cccbg -=_dcgg ;_gfag +=_dcgg ;_dcgg =0;
};if _cccbg < 0{_dcgg -=_cccbg ;_gfag +=_cccbg ;_cccbg =0;};_eedc =_dcgg +_gfag -_adadgg .Width ;if _eedc > 0{_gfag -=_eedc ;};_gefc =_cccbg +_gfag -_fbbe .Width ;if _gefc > 0{_gfag -=_gefc ;};if _caad < 0{_fdcga -=_caad ;_cfde +=_caad ;_caad =0;};if _fdcga < 0{_caad -=_fdcga ;
_cfde +=_fdcga ;_fdcga =0;};_aada =_caad +_cfde -_adadgg .Height ;if _aada > 0{_cfde -=_aada ;};_aeggab =_fdcga +_cfde -_fbbe .Height ;if _aeggab > 0{_cfde -=_aeggab ;};if _gfag <=0||_cfde <=0{return nil ;};var _daba error ;switch {case _dcgg &7==0&&_cccbg &7==0:_daba =_cbdf (_adadgg ,_dcgg ,_caad ,_gfag ,_cfde ,_gage ,_fbbe ,_cccbg ,_fdcga );
case _dcgg &7==_cccbg &7:_daba =_aagc (_adadgg ,_dcgg ,_caad ,_gfag ,_cfde ,_gage ,_fbbe ,_cccbg ,_fdcga );default:_daba =_eadb (_adadgg ,_dcgg ,_caad ,_gfag ,_cfde ,_gage ,_fbbe ,_cccbg ,_fdcga );};if _daba !=nil {return _f .Wrap (_daba ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func (_fggff *byWidth )Less (i ,j int )bool {return _fggff .Values [i ].Width < _fggff .Values [j ].Width };func (_eaeg *BitmapsArray )AddBox (box *_abc .Rectangle ){_eaeg .Boxes =append (_eaeg .Boxes ,box )};func (_ecgcb *byHeight )Less (i ,j int )bool {return _ecgcb .Values [i ].Height < _ecgcb .Values [j ].Height };
func (_fafd *Bitmap )setEightBytes (_eage int ,_gdbb uint64 )error {_bdc :=_fafd .RowStride -(_eage %_fafd .RowStride );if _fafd .RowStride !=_fafd .Width >>3{_bdc --;};if _bdc >=8{return _fafd .setEightFullBytes (_eage ,_gdbb );};return _fafd .setEightPartlyBytes (_eage ,_bdc ,_gdbb );
};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _daf ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_effg :=_dgd (width ,height );_effg .Data =data ;if _cbbg :=((width *height )+7)>>3;
len (data )< _cbbg {return nil ,_f .Errorf (_daf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_cbbg );
};if _eag :=_effg .addPadBits ();_eag !=nil {return nil ,_f .Wrap (_eag ,_daf ,"");};return _effg ,nil ;};func (_caead *ClassedPoints )SortByY (){_caead ._edcg =_caead .ySortFunction ();_c .Sort (_caead )};func (_efaf *Bitmaps )String ()string {_ggfbf :=_d .Builder {};
for _ ,_bfef :=range _efaf .Values {_ggfbf .WriteString (_bfef .String ());_ggfbf .WriteRune ('\n');};return _ggfbf .String ();};func _cgff (_fda ,_caae ,_bffa *Bitmap )(*Bitmap ,error ){const _efacb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";
if _caae ==nil {return nil ,_f .Error (_efacb ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _bffa ==nil {return nil ,_f .Error (_efacb ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _fda ==_bffa {return nil ,_f .Error (_efacb ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");
};if !_caae .SizesEqual (_bffa ){_aef .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_efacb );
};var _gec error ;if _fda ,_gec =_afad (_fda ,_caae );_gec !=nil {return nil ,_f .Wrap (_gec ,_efacb ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _gec =_fda .RasterOperation (0,0,_fda .Width ,_fda .Height ,PixSrcXorDst ,_bffa ,0,0);
_gec !=nil {return nil ,_f .Wrap (_gec ,_efacb ,"");};return _fda ,nil ;};func TstVSymbol (t *_ae .T ,scale ...int )*Bitmap {_geae ,_fdcd :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_af .NoError (t ,_fdcd );return TstGetScaledSymbol (t ,_geae ,scale ...);
};func (_efbf *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _cfdb ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _efbf ==nil {return nil ,_f .Error (_cfdb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_efbf .Values )-1{return nil ,_f .Errorf (_cfdb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _efbf .Values [i ],nil ;};func (_faab *Bitmap )nextOnPixelLow (_aedb ,_gbcc ,_gcfgg ,_beg ,_fggg int )(_bcd _abc .Point ,_aabe bool ,_bgc error ){const _dbda ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_dddd int ;_ege byte ;);_feg :=_fggg *_gcfgg ;_aacb :=_feg +(_beg /8);if _ege ,_bgc =_faab .GetByte (_aacb );_bgc !=nil {return _bcd ,false ,_f .Wrap (_bgc ,_dbda ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _ege !=0{_gacg :=_beg -(_beg %8)+7;for _dddd =_beg ;_dddd <=_gacg &&_dddd < _aedb ;_dddd ++{if _faab .GetPixel (_dddd ,_fggg ){_bcd .X =_dddd ;_bcd .Y =_fggg ;return _bcd ,true ,nil ;};};};_bbca :=(_beg /8)+1;_dddd =8*_bbca ;var _eef int ;for _aacb =_feg +_bbca ;
_dddd < _aedb ;_aacb ,_dddd =_aacb +1,_dddd +8{if _ege ,_bgc =_faab .GetByte (_aacb );_bgc !=nil {return _bcd ,false ,_f .Wrap (_bgc ,_dbda ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _ege ==0{continue ;
};for _eef =0;_eef < 8&&_dddd < _aedb ;_eef ,_dddd =_eef +1,_dddd +1{if _faab .GetPixel (_dddd ,_fggg ){_bcd .X =_dddd ;_bcd .Y =_fggg ;return _bcd ,true ,nil ;};};};for _dbcb :=_fggg +1;_dbcb < _gbcc ;_dbcb ++{_feg =_dbcb *_gcfgg ;for _aacb ,_dddd =_feg ,0;
_dddd < _aedb ;_aacb ,_dddd =_aacb +1,_dddd +8{if _ege ,_bgc =_faab .GetByte (_aacb );_bgc !=nil {return _bcd ,false ,_f .Wrap (_bgc ,_dbda ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _ege ==0{continue ;};for _eef =0;
_eef < 8&&_dddd < _aedb ;_eef ,_dddd =_eef +1,_dddd +1{if _faab .GetPixel (_dddd ,_dbcb ){_bcd .X =_dddd ;_bcd .Y =_dbcb ;return _bcd ,true ,nil ;};};};};return _bcd ,false ,nil ;};func (_edcgcb *Bitmaps )WidthSorter ()func (_ceaa ,_dggf int )bool {return func (_adag ,_cfbf int )bool {return _edcgcb .Values [_adag ].Width < _edcgcb .Values [_cfbf ].Width };
};func (_beeg *Bitmaps )SortByHeight (){_gebb :=(*byHeight )(_beeg );_c .Sort (_gebb )};func _acea (_ebgb ,_acff ,_bfad *Bitmap ,_agab int )(*Bitmap ,error ){const _aacf ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _acff ==nil {return nil ,_f .Error (_aacf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _bfad ==nil {return nil ,_f .Error (_aacf ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _agab !=4&&_agab !=8{return nil ,_f .Error (_aacf ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _dade error ;_ebgb ,_dade =_afad (_ebgb ,_acff );
if _dade !=nil {return nil ,_f .Wrap (_dade ,_aacf ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_ccdd :=_acff .createTemplate ();_bfad .setPadBits (0);for _aaeb :=0;_aaeb < _dacca ;_aaeb ++{_ccdd ,_dade =_afad (_ccdd ,_ebgb );
if _dade !=nil {return nil ,_f .Wrapf (_dade ,_aacf ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_aaeb );};if _dade =_cbcd (_ebgb ,_bfad ,_agab );_dade !=nil {return nil ,_f .Wrapf (_dade ,_aacf ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_aaeb );
};if _ccdd .Equals (_ebgb ){break ;};};return _ebgb ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _edcbd ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_fdg :=_dgd (width ,height );_fdg .Data =data ;
if len (data )< height *_fdg .RowStride {return nil ,_f .Errorf (_edcbd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_fdg .RowStride );
};return _fdg ,nil ;};type SelectionValue int ;func (_afga *Bitmap )setEightPartlyBytes (_efcf ,_fdc int ,_aag uint64 )(_eed error ){var (_eddd byte ;_adfb int ;);const _egg ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _bbbc :=1;_bbbc <=_fdc ;_bbbc ++{_adfb =64-_bbbc *8;_eddd =byte (_aag >>uint (_adfb )&0xff);_aef .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_eddd ,_efcf ,_efcf +_bbbc -1,_fdc ,_adfb );
if _eed =_afga .SetByte (_efcf +_bbbc -1,_eddd );_eed !=nil {return _f .Wrap (_eed ,_egg ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_gedg :=_afga .RowStride *8-_afga .Width ;if _gedg ==0{return nil ;};_adfb -=8;_eddd =byte (_aag >>uint (_adfb )&0xff)<<uint (_gedg );
if _eed =_afga .SetByte (_efcf +_fdc ,_eddd );_eed !=nil {return _f .Wrap (_eed ,_egg ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _gggge (d ,s ,hSize ,vSize )};func Rect (x ,y ,w ,h int )(*_abc .Rectangle ,error ){const _dddgd ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_f .Errorf (_dddgd ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_f .Error (_dddgd ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_acef :=_abc .Rect (x ,y ,x +w ,y +h );return &_acef ,nil ;};func Extract (roi _abc .Rectangle ,src *Bitmap )(*Bitmap ,error ){_bgfb :=New (roi .Dx (),roi .Dy ());_dbgf :=roi .Min .X &0x07;_bfc :=8-_dbgf ;_eagd :=uint (8-_bgfb .Width &0x07);_deec :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );
_efcg :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_fddg :=_bgfb .RowStride ==_efcg +1-_deec ;var _fbfb int ;for _affc :=roi .Min .Y ;_affc < roi .Max .Y ;_affc ++{_ebec :=_deec ;_efaa :=_fbfb ;switch {case _deec ==_efcg :_acc ,_acb :=src .GetByte (_ebec );
if _acb !=nil {return nil ,_acb ;};_acc <<=uint (_dbgf );_acb =_bgfb .SetByte (_efaa ,_eafc (_eagd ,_acc ));if _acb !=nil {return nil ,_acb ;};case _dbgf ==0:for _ageb :=_deec ;_ageb <=_efcg ;_ageb ++{_fbeb ,_bbbcb :=src .GetByte (_ebec );if _bbbcb !=nil {return nil ,_bbbcb ;
};_ebec ++;if _ageb ==_efcg &&_fddg {_fbeb =_eafc (_eagd ,_fbeb );};_bbbcb =_bgfb .SetByte (_efaa ,_fbeb );if _bbbcb !=nil {return nil ,_bbbcb ;};_efaa ++;};default:_efec :=_dcbf (src ,_bgfb ,uint (_dbgf ),uint (_bfc ),_eagd ,_deec ,_efcg ,_fddg ,_ebec ,_efaa );
if _efec !=nil {return nil ,_efec ;};};_deec +=src .RowStride ;_efcg +=src .RowStride ;_fbfb +=_bgfb .RowStride ;};return _bgfb ,nil ;};func TstCSymbol (t *_ae .T )*Bitmap {t .Helper ();_egfed :=New (6,6);_af .NoError (t ,_egfed .SetPixel (1,0,1));_af .NoError (t ,_egfed .SetPixel (2,0,1));
_af .NoError (t ,_egfed .SetPixel (3,0,1));_af .NoError (t ,_egfed .SetPixel (4,0,1));_af .NoError (t ,_egfed .SetPixel (0,1,1));_af .NoError (t ,_egfed .SetPixel (5,1,1));_af .NoError (t ,_egfed .SetPixel (0,2,1));_af .NoError (t ,_egfed .SetPixel (0,3,1));
_af .NoError (t ,_egfed .SetPixel (0,4,1));_af .NoError (t ,_egfed .SetPixel (5,4,1));_af .NoError (t ,_egfed .SetPixel (1,5,1));_af .NoError (t ,_egfed .SetPixel (2,5,1));_af .NoError (t ,_egfed .SetPixel (3,5,1));_af .NoError (t ,_egfed .SetPixel (4,5,1));
return _egfed ;};func (_fbgc *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_bdfc *Boxes ,_ddda error ){const _dggcg ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _fbgc ==nil {return nil ,_f .Error (_dggcg ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_f .Error (_dggcg ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _bdfc ,_ddda =_fbgc .connComponentsBB (connectivity );
_ddda !=nil {return nil ,_f .Wrap (_ddda ,_dggcg ,"");};}else {if _bdfc ,_ddda =_fbgc .connComponentsBitmapsBB (bms ,connectivity );_ddda !=nil {return nil ,_f .Wrap (_ddda ,_dggcg ,"");};};return _bdfc ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_daed float64 ,_fage error ){const _dcad ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_f .Error (_dcad ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_f .Error (_dcad ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_f .Error (_dcad ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_faea ,_dbcc :=bm1 .Width ,bm1 .Height ;_egee ,_eafdb :=bm2 .Width ,bm2 .Height ;
_fgbg :=_fdca (_faea -_egee );if _fgbg > maxDiffW {return 0,nil ;};_dgab :=_fdca (_dbcc -_eafdb );if _dgab > maxDiffH {return 0,nil ;};var _cfd ,_eada int ;if delX >=0{_cfd =int (delX +0.5);}else {_cfd =int (delX -0.5);};if delY >=0{_eada =int (delY +0.5);
}else {_eada =int (delY -0.5);};_eagg :=_fagdb (_eada ,0);_ccg :=_ggb (_eafdb +_eada ,_dbcc );_eead :=bm1 .RowStride *_eagg ;_agfa :=bm2 .RowStride *(_eagg -_eada );_aeda :=_fagdb (_cfd ,0);_dfbc :=_ggb (_egee +_cfd ,_faea );_fffg :=bm2 .RowStride ;var _fafb ,_fabg int ;
if _cfd >=8{_fafb =_cfd >>3;_eead +=_fafb ;_aeda -=_fafb <<3;_dfbc -=_fafb <<3;_cfd &=7;}else if _cfd <=-8{_fabg =-((_cfd +7)>>3);_agfa +=_fabg ;_fffg -=_fabg ;_cfd +=_fabg <<3;};if _aeda >=_dfbc ||_eagg >=_ccg {return 0,nil ;};_dedg :=(_dfbc +7)>>3;var (_gcfc ,_ggef ,_beac byte ;
_cdeca ,_gbad ,_adgga int ;);switch {case _cfd ==0:for _adgga =_eagg ;_adgga < _ccg ;_adgga ,_eead ,_agfa =_adgga +1,_eead +bm1 .RowStride ,_agfa +bm2 .RowStride {for _gbad =0;_gbad < _dedg ;_gbad ++{_beac =bm1 .Data [_eead +_gbad ]&bm2 .Data [_agfa +_gbad ];
_cdeca +=tab [_beac ];};};case _cfd > 0:if _fffg < _dedg {for _adgga =_eagg ;_adgga < _ccg ;_adgga ,_eead ,_agfa =_adgga +1,_eead +bm1 .RowStride ,_agfa +bm2 .RowStride {_gcfc ,_ggef =bm1 .Data [_eead ],bm2 .Data [_agfa ]>>uint (_cfd );_beac =_gcfc &_ggef ;
_cdeca +=tab [_beac ];for _gbad =1;_gbad < _fffg ;_gbad ++{_gcfc ,_ggef =bm1 .Data [_eead +_gbad ],(bm2 .Data [_agfa +_gbad ]>>uint (_cfd ))|(bm2 .Data [_agfa +_gbad -1]<<uint (8-_cfd ));_beac =_gcfc &_ggef ;_cdeca +=tab [_beac ];};_gcfc =bm1 .Data [_eead +_gbad ];
_ggef =bm2 .Data [_agfa +_gbad -1]<<uint (8-_cfd );_beac =_gcfc &_ggef ;_cdeca +=tab [_beac ];};}else {for _adgga =_eagg ;_adgga < _ccg ;_adgga ,_eead ,_agfa =_adgga +1,_eead +bm1 .RowStride ,_agfa +bm2 .RowStride {_gcfc ,_ggef =bm1 .Data [_eead ],bm2 .Data [_agfa ]>>uint (_cfd );
_beac =_gcfc &_ggef ;_cdeca +=tab [_beac ];for _gbad =1;_gbad < _dedg ;_gbad ++{_gcfc =bm1 .Data [_eead +_gbad ];_ggef =(bm2 .Data [_agfa +_gbad ]>>uint (_cfd ))|(bm2 .Data [_agfa +_gbad -1]<<uint (8-_cfd ));_beac =_gcfc &_ggef ;_cdeca +=tab [_beac ];};
};};default:if _dedg < _fffg {for _adgga =_eagg ;_adgga < _ccg ;_adgga ,_eead ,_agfa =_adgga +1,_eead +bm1 .RowStride ,_agfa +bm2 .RowStride {for _gbad =0;_gbad < _dedg ;_gbad ++{_gcfc =bm1 .Data [_eead +_gbad ];_ggef =bm2 .Data [_agfa +_gbad ]<<uint (-_cfd );
_ggef |=bm2 .Data [_agfa +_gbad +1]>>uint (8+_cfd );_beac =_gcfc &_ggef ;_cdeca +=tab [_beac ];};};}else {for _adgga =_eagg ;_adgga < _ccg ;_adgga ,_eead ,_agfa =_adgga +1,_eead +bm1 .RowStride ,_agfa +bm2 .RowStride {for _gbad =0;_gbad < _dedg -1;_gbad ++{_gcfc =bm1 .Data [_eead +_gbad ];
_ggef =bm2 .Data [_agfa +_gbad ]<<uint (-_cfd );_ggef |=bm2 .Data [_agfa +_gbad +1]>>uint (8+_cfd );_beac =_gcfc &_ggef ;_cdeca +=tab [_beac ];};_gcfc =bm1 .Data [_eead +_gbad ];_ggef =bm2 .Data [_agfa +_gbad ]<<uint (-_cfd );_beac =_gcfc &_ggef ;_cdeca +=tab [_beac ];
};};};_daed =float64 (_cdeca )*float64 (_cdeca )/(float64 (area1 )*float64 (area2 ));return _daed ,nil ;};func _afad (_cdc ,_bcaf *Bitmap )(*Bitmap ,error ){if _bcaf ==nil {return nil ,_f .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bcaf ==_cdc {return _cdc ,nil ;};if _cdc ==nil {_cdc =_bcaf .createTemplate ();copy (_cdc .Data ,_bcaf .Data );return _cdc ,nil ;};_adca :=_cdc .resizeImageData (_bcaf );if _adca !=nil {return nil ,_f .Wrap (_adca ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_cdc .Text =_bcaf .Text ;copy (_cdc .Data ,_bcaf .Data );return _cdc ,nil ;};var (_afffc *Bitmap ;_aagac *Bitmap ;);const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;
PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;
PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;
);func _ddgd (_bdec *Bitmap ,_bcbd int )(*Bitmap ,error ){const _dfcaf ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _bdec ==nil {return nil ,_f .Error (_dfcaf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bcbd <=0{return nil ,_f .Error (_dfcaf ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _bcbd ==1{_edfb ,_dfcf :=_afad (nil ,_bdec );if _dfcf !=nil {return nil ,_f .Wrap (_dfcf ,_dfcaf ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _edfb ,nil ;};_gfga ,_dbe :=_fe (_bdec ,_bcbd ,_bcbd );if _dbe !=nil {return nil ,_f .Wrap (_dbe ,_dfcaf ,"");};return _gfga ,nil ;};func _bbcd (_abad ,_dbag *Bitmap ,_begg ,_dadg int )(_decc error ){const _cecf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_eceb ,_gcea ,_ebag ,_gfacd int ;_geba ,_gaeff ,_cfgf ,_edac ,_efba ,_ebdf ,_aaba ,_fdgb byte ;);for _eceb =0;_eceb < _begg ;_eceb ++{_ebag =_eceb *_abad .RowStride ;_gfacd =_eceb *_dbag .RowStride ;for _gcea =0;_gcea < _dadg ;_gcea ++{if _geba ,_decc =_abad .GetByte (_ebag +_gcea );
_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _gaeff ,_decc =_dbag .GetByte (_gfacd +_gcea );_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _eceb > 0{if _cfgf ,_decc =_abad .GetByte (_ebag -_abad .RowStride +_gcea );_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_geba |=_cfgf |(_cfgf <<1)|(_cfgf >>1);if _gcea > 0{if _fdgb ,_decc =_abad .GetByte (_ebag -_abad .RowStride +_gcea -1);
_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_geba |=_fdgb <<7;};if _gcea < _dadg -1{if _fdgb ,_decc =_abad .GetByte (_ebag -_abad .RowStride +_gcea +1);
_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_geba |=_fdgb >>7;};};if _gcea > 0{if _edac ,_decc =_abad .GetByte (_ebag +_gcea -1);_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u006a\u0020\u003e \u0030");
};_geba |=_edac <<7;};_geba &=_gaeff ;if _geba ==0||^_geba ==0{if _decc =_abad .SetByte (_ebag +_gcea ,_geba );_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_aaba =_geba ;
_geba =(_geba |(_geba >>1)|(_geba <<1))&_gaeff ;if (_geba ^_aaba )==0{if _decc =_abad .SetByte (_ebag +_gcea ,_geba );_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _eceb =_begg -1;_eceb >=0;_eceb --{_ebag =_eceb *_abad .RowStride ;_gfacd =_eceb *_dbag .RowStride ;for _gcea =_dadg -1;_gcea >=0;_gcea --{if _geba ,_decc =_abad .GetByte (_ebag +_gcea );_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _gaeff ,_decc =_dbag .GetByte (_gfacd +_gcea );_decc !=nil {return _f .Wrap (_decc ,_cecf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _eceb < _begg -1{if _efba ,_decc =_abad .GetByte (_ebag +_abad .RowStride +_gcea );
_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_geba |=_efba |(_efba <<1)|_efba >>1;if _gcea > 0{if _fdgb ,_decc =_abad .GetByte (_ebag +_abad .RowStride +_gcea -1);
_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_geba |=_fdgb <<7;};if _gcea < _dadg -1{if _fdgb ,_decc =_abad .GetByte (_ebag +_abad .RowStride +_gcea +1);
_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_geba |=_fdgb >>7;};};if _gcea < _dadg -1{if _ebdf ,_decc =_abad .GetByte (_ebag +_gcea +1);_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_geba |=_ebdf >>7;};_geba &=_gaeff ;if _geba ==0||(^_geba )==0{if _decc =_abad .SetByte (_ebag +_gcea ,_geba );_decc !=nil {return _f .Wrap (_decc ,_cecf ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_aaba =_geba ;
_geba =(_geba |(_geba >>1)|(_geba <<1))&_gaeff ;if (_geba ^_aaba )==0{if _decc =_abad .SetByte (_ebag +_gcea ,_geba );_decc !=nil {return _f .Wrap (_decc ,_cecf ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};type Points []Point ;func _daeg (_edbc ,_efdc *Bitmap ,_eacc CombinationOperator )*Bitmap {_fbg :=New (_edbc .Width ,_edbc .Height );for _cbde :=0;_cbde < len (_fbg .Data );_cbde ++{_fbg .Data [_cbde ]=_efea (_edbc .Data [_cbde ],_efdc .Data [_cbde ],_eacc );
};return _fbg ;};func _abgce (_aafa ,_cad *Bitmap ,_cgee ,_fdaa ,_agcf ,_afed ,_gaba ,_aff ,_bbcb ,_gagf int ,_egfd CombinationOperator ,_dgef int )error {var _bded int ;_gfef :=func (){_bded ++;_agcf +=_cad .RowStride ;_afed +=_aafa .RowStride ;_gaba +=_aafa .RowStride };
for _bded =_cgee ;_bded < _fdaa ;_gfef (){var _eageb uint16 ;_afeee :=_agcf ;for _bbef :=_afed ;_bbef <=_gaba ;_bbef ++{_fcbd ,_ebee :=_cad .GetByte (_afeee );if _ebee !=nil {return _ebee ;};_dfb ,_ebee :=_aafa .GetByte (_bbef );if _ebee !=nil {return _ebee ;
};_eageb =(_eageb |(uint16 (_dfb )&0xff))<<uint (_gagf );_dfb =byte (_eageb >>8);if _ebee =_cad .SetByte (_afeee ,_efea (_fcbd ,_dfb ,_egfd ));_ebee !=nil {return _ebee ;};_afeee ++;_eageb <<=uint (_bbcb );if _bbef ==_gaba {_dfb =byte (_eageb >>(8-uint8 (_gagf )));
if _dgef !=0{_dfb =_eafc (uint (8+_aff ),_dfb );};_fcbd ,_ebee =_cad .GetByte (_afeee );if _ebee !=nil {return _ebee ;};if _ebee =_cad .SetByte (_afeee ,_efea (_fcbd ,_dfb ,_egfd ));_ebee !=nil {return _ebee ;};};};};return nil ;};func _edd (_edc *Bitmap ,_bfg int ,_gae []byte )(_fff *Bitmap ,_edcb error ){const _be ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _edc ==nil {return nil ,_f .Error (_be ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bfg < 1||_bfg > 4{return nil ,_f .Error (_be ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _edc .Height <=1{return nil ,_f .Errorf (_be ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_edc .Height );
};_fff =New (_edc .Width /2,_edc .Height /2);if _gae ==nil {_gae =_egd ();};_fd :=_ggb (_edc .RowStride ,2*_fff .RowStride );switch _bfg {case 1:_edcb =_gee (_edc ,_fff ,_bfg ,_gae ,_fd );case 2:_edcb =_bab (_edc ,_fff ,_bfg ,_gae ,_fd );case 3:_edcb =_ddgc (_edc ,_fff ,_bfg ,_gae ,_fd );
case 4:_edcb =_bbf (_edc ,_fff ,_bfg ,_gae ,_fd );};if _edcb !=nil {return nil ,_edcb ;};return _fff ,nil ;};func (_abd *Bitmap )SetPadBits (value int ){_abd .setPadBits (value )};func TstWordBitmapWithSpaces (t *_ae .T ,scale ...int )*Bitmap {_fdggd :=1;
if len (scale )> 0{_fdggd =scale [0];};_ffbcf :=3;_ddcc :=9+7+15+2*_ffbcf +2*_ffbcf ;_ebcc :=5+_ffbcf +5+2*_ffbcf ;_abdag :=New (_ddcc *_fdggd ,_ebcc *_fdggd );_fbff :=&Bitmaps {};var _dagg *int ;_ffbcf *=_fdggd ;_fbef :=_ffbcf ;_dagg =&_fbef ;_degf :=_ffbcf ;
_gdfe :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,1*_fdggd );_gdfe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,_ffbcf );_gdfe =TstISymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,1*_fdggd );
_gdfe =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,_ffbcf );_gdfe =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,1*_fdggd );_gdfe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,1*_fdggd );
_gdfe =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,0);*_dagg =_ffbcf ;_degf =5*_fdggd +_ffbcf ;_gdfe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,1*_fdggd );_gdfe =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,_ffbcf );
_gdfe =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,1*_fdggd );_gdfe =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,1*_fdggd );_gdfe =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,1*_fdggd );
_gdfe =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,1*_fdggd );_gdfe =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fbff ,_gdfe ,_dagg ,_degf ,0);TstWriteSymbols (t ,_fbff ,_abdag );return _abdag ;};func _fafbd (_caga *Bitmap ,_dgf ,_bcgg ,_bcbc ,_ffgda int ,_bddfa RasterOperator ,_feec *Bitmap ,_edcgc ,_dbcf int )error {const _bdaf ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _caga ==nil {return _f .Error (_bdaf ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _bddfa ==PixDst {return nil ;};switch _bddfa {case PixClr ,PixSet ,PixNotDst :_fbfc (_caga ,_dgf ,_bcgg ,_bcbc ,_ffgda ,_bddfa );
return nil ;};if _feec ==nil {_aef .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _f .Error (_bdaf ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gdeg :=_ffgf (_caga ,_dgf ,_bcgg ,_bcbc ,_ffgda ,_bddfa ,_feec ,_edcgc ,_dbcf );_gdeg !=nil {return _f .Wrap (_gdeg ,_bdaf ,"");};return nil ;
};func (_cfdg Points )YSorter ()func (_egcf ,_gfbd int )bool {return func (_afca ,_faed int )bool {return _cfdg [_afca ].Y < _cfdg [_faed ].Y };};func _bece ()[]int {_aefc :=make ([]int ,256);for _abgd :=0;_abgd <=0xff;_abgd ++{_dfafb :=byte (_abgd );_aefc [_dfafb ]=int (_dfafb &0x1)+(int (_dfafb >>1)&0x1)+(int (_dfafb >>2)&0x1)+(int (_dfafb >>3)&0x1)+(int (_dfafb >>4)&0x1)+(int (_dfafb >>5)&0x1)+(int (_dfafb >>6)&0x1)+(int (_dfafb >>7)&0x1);
};return _aefc ;};var _cbba =[5]int {1,2,3,0,4};type BoundaryCondition int ;func _fdge (_becfb *Bitmap ,_ggcgc ,_faacb int ,_befd ,_agda int ,_aabde RasterOperator ){var (_bbfgf bool ;_bgfbd bool ;_gcbf int ;_cacg int ;_fead int ;_feaa int ;_edff bool ;
_fagee byte ;);_dgdc :=8-(_ggcgc &7);_aeea :=_eccfe [_dgdc ];_acab :=_becfb .RowStride *_faacb +(_ggcgc >>3);if _befd < _dgdc {_bbfgf =true ;_aeea &=_afagc [8-_dgdc +_befd ];};if !_bbfgf {_gcbf =(_befd -_dgdc )>>3;if _gcbf !=0{_bgfbd =true ;_cacg =_acab +1;
};};_fead =(_ggcgc +_befd )&7;if !(_bbfgf ||_fead ==0){_edff =true ;_fagee =_afagc [_fead ];_feaa =_acab +1+_gcbf ;};var _decd ,_fcdc int ;switch _aabde {case PixClr :for _decd =0;_decd < _agda ;_decd ++{_becfb .Data [_acab ]=_dcfgc (_becfb .Data [_acab ],0x0,_aeea );
_acab +=_becfb .RowStride ;};if _bgfbd {for _decd =0;_decd < _agda ;_decd ++{for _fcdc =0;_fcdc < _gcbf ;_fcdc ++{_becfb .Data [_cacg +_fcdc ]=0x0;};_cacg +=_becfb .RowStride ;};};if _edff {for _decd =0;_decd < _agda ;_decd ++{_becfb .Data [_feaa ]=_dcfgc (_becfb .Data [_feaa ],0x0,_fagee );
_feaa +=_becfb .RowStride ;};};case PixSet :for _decd =0;_decd < _agda ;_decd ++{_becfb .Data [_acab ]=_dcfgc (_becfb .Data [_acab ],0xff,_aeea );_acab +=_becfb .RowStride ;};if _bgfbd {for _decd =0;_decd < _agda ;_decd ++{for _fcdc =0;_fcdc < _gcbf ;_fcdc ++{_becfb .Data [_cacg +_fcdc ]=0xff;
};_cacg +=_becfb .RowStride ;};};if _edff {for _decd =0;_decd < _agda ;_decd ++{_becfb .Data [_feaa ]=_dcfgc (_becfb .Data [_feaa ],0xff,_fagee );_feaa +=_becfb .RowStride ;};};case PixNotDst :for _decd =0;_decd < _agda ;_decd ++{_becfb .Data [_acab ]=_dcfgc (_becfb .Data [_acab ],^_becfb .Data [_acab ],_aeea );
_acab +=_becfb .RowStride ;};if _bgfbd {for _decd =0;_decd < _agda ;_decd ++{for _fcdc =0;_fcdc < _gcbf ;_fcdc ++{_becfb .Data [_cacg +_fcdc ]=^(_becfb .Data [_cacg +_fcdc ]);};_cacg +=_becfb .RowStride ;};};if _edff {for _decd =0;_decd < _agda ;_decd ++{_becfb .Data [_feaa ]=_dcfgc (_becfb .Data [_feaa ],^_becfb .Data [_feaa ],_fagee );
_feaa +=_becfb .RowStride ;};};};};func _edfd (_gged *Bitmap ,_gcbff *_ab .Stack ,_fbae ,_fabba int )(_fdcc *_abc .Rectangle ,_ggfe error ){const _edcdf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _gged ==nil {return nil ,_f .Error (_edcdf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _gcbff ==nil {return nil ,_f .Error (_edcdf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_agdf ,_afabdc :=_gged .Width ,_gged .Height ;_cabcg :=_agdf -1;_ebbca :=_afabdc -1;if _fbae < 0||_fbae > _cabcg ||_fabba < 0||_fabba > _ebbca ||!_gged .GetPixel (_fbae ,_fabba ){return nil ,nil ;
};var _edaf *_abc .Rectangle ;_edaf ,_ggfe =Rect (100000,100000,0,0);if _ggfe !=nil {return nil ,_f .Wrap (_ggfe ,_edcdf ,"");};if _ggfe =_aceg (_gcbff ,_fbae ,_fbae ,_fabba ,1,_ebbca ,_edaf );_ggfe !=nil {return nil ,_f .Wrap (_ggfe ,_edcdf ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _ggfe =_aceg (_gcbff ,_fbae ,_fbae ,_fabba +1,-1,_ebbca ,_edaf );_ggfe !=nil {return nil ,_f .Wrap (_ggfe ,_edcdf ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_edaf .Min .X ,_edaf .Max .X =_fbae ,_fbae ;
_edaf .Min .Y ,_edaf .Max .Y =_fabba ,_fabba ;var (_dffe *fillSegment ;_gefd int ;);for _gcbff .Len ()> 0{if _dffe ,_ggfe =_ffae (_gcbff );_ggfe !=nil {return nil ,_f .Wrap (_ggfe ,_edcdf ,"");};_fabba =_dffe ._dcfgf ;for _fbae =_dffe ._bcdf ;_fbae >=0&&_gged .GetPixel (_fbae ,_fabba );
_fbae --{if _ggfe =_gged .SetPixel (_fbae ,_fabba ,0);_ggfe !=nil {return nil ,_f .Wrap (_ggfe ,_edcdf ,"");};};if _fbae >=_dffe ._bcdf {for _fbae ++;_fbae <=_dffe ._cbed &&_fbae <=_cabcg &&!_gged .GetPixel (_fbae ,_fabba );_fbae ++{};_gefd =_fbae ;if !(_fbae <=_dffe ._cbed &&_fbae <=_cabcg ){continue ;
};}else {_gefd =_fbae +1;if _gefd < _dffe ._bcdf -1{if _ggfe =_aceg (_gcbff ,_gefd ,_dffe ._bcdf -1,_dffe ._dcfgf ,-_dffe ._ebaa ,_ebbca ,_edaf );_ggfe !=nil {return nil ,_f .Wrap (_ggfe ,_edcdf ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_fbae =_dffe ._bcdf +1;};for {for ;_fbae <=_cabcg &&_gged .GetPixel (_fbae ,_fabba );_fbae ++{if _ggfe =_gged .SetPixel (_fbae ,_fabba ,0);_ggfe !=nil {return nil ,_f .Wrap (_ggfe ,_edcdf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ggfe =_aceg (_gcbff ,_gefd ,_fbae -1,_dffe ._dcfgf ,_dffe ._ebaa ,_ebbca ,_edaf );
_ggfe !=nil {return nil ,_f .Wrap (_ggfe ,_edcdf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fbae > _dffe ._cbed +1{if _ggfe =_aceg (_gcbff ,_dffe ._cbed +1,_fbae -1,_dffe ._dcfgf ,-_dffe ._ebaa ,_ebbca ,_edaf );_ggfe !=nil {return nil ,_f .Wrap (_ggfe ,_edcdf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _fbae ++;_fbae <=_dffe ._cbed &&_fbae <=_cabcg &&!_gged .GetPixel (_fbae ,_fabba );_fbae ++{};_gefd =_fbae ;if !(_fbae <=_dffe ._cbed &&_fbae <=_cabcg ){break ;};};};_edaf .Max .X ++;_edaf .Max .Y ++;return _edaf ,nil ;};func (_ddc *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_ddc .Width ,Height :_ddc .Height ,RowStride :_ddc .RowStride ,Color :_ddc .Color ,Text :_ddc .Text ,BitmapNumber :_ddc .BitmapNumber ,Special :_ddc .Special ,Data :make ([]byte ,len (_ddc .Data ))};
};func _beacc (_fbcd *Bitmap ,_fagde ...MorphProcess )(_ffdg *Bitmap ,_gdfc error ){const _gccd ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _fbcd ==nil {return nil ,_f .Error (_gccd ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_fagde )==0{return nil ,_f .Error (_gccd ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _gdfc =_baagg (_fagde ...);
_gdfc !=nil {return nil ,_f .Wrap (_gdfc ,_gccd ,"");};var _ggba ,_facd ,_ccbb int ;_ffdg =_fbcd .Copy ();for _ ,_gaac :=range _fagde {switch _gaac .Operation {case MopDilation :_ggba ,_facd =_gaac .getWidthHeight ();_ffdg ,_gdfc =DilateBrick (nil ,_ffdg ,_ggba ,_facd );
if _gdfc !=nil {return nil ,_f .Wrap (_gdfc ,_gccd ,"");};case MopErosion :_ggba ,_facd =_gaac .getWidthHeight ();_ffdg ,_gdfc =_fffad (nil ,_ffdg ,_ggba ,_facd );if _gdfc !=nil {return nil ,_f .Wrap (_gdfc ,_gccd ,"");};case MopOpening :_ggba ,_facd =_gaac .getWidthHeight ();
_ffdg ,_gdfc =_ccae (nil ,_ffdg ,_ggba ,_facd );if _gdfc !=nil {return nil ,_f .Wrap (_gdfc ,_gccd ,"");};case MopClosing :_ggba ,_facd =_gaac .getWidthHeight ();_ffdg ,_gdfc =_cbfc (nil ,_ffdg ,_ggba ,_facd );if _gdfc !=nil {return nil ,_f .Wrap (_gdfc ,_gccd ,"");
};case MopRankBinaryReduction :_ffdg ,_gdfc =_gaf (_ffdg ,_gaac .Arguments ...);if _gdfc !=nil {return nil ,_f .Wrap (_gdfc ,_gccd ,"");};case MopReplicativeBinaryExpansion :_ffdg ,_gdfc =_ddgd (_ffdg ,_gaac .Arguments [0]);if _gdfc !=nil {return nil ,_f .Wrap (_gdfc ,_gccd ,"");
};case MopAddBorder :_ccbb =_gaac .Arguments [0];_ffdg ,_gdfc =_ffdg .AddBorder (_ccbb ,0);if _gdfc !=nil {return nil ,_f .Wrap (_gdfc ,_gccd ,"");};default:return nil ,_f .Error (_gccd ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _ccbb > 0{_ffdg ,_gdfc =_ffdg .RemoveBorder (_ccbb );if _gdfc !=nil {return nil ,_f .Wrap (_gdfc ,_gccd ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _ffdg ,nil ;};func (_cga *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _cga .addBorderGeneral (left ,right ,top ,bot ,val );
};func init (){const _gbe ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_afffc =New (50,40);var _fgdec error ;_afffc ,_fgdec =_afffc .AddBorder (2,1);if _fgdec !=nil {panic (_f .Wrap (_fgdec ,_gbe ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};_aagac ,_fgdec =NewWithData (50,22,_gfgd );if _fgdec !=nil {panic (_f .Wrap (_fgdec ,_gbe ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func TstGetScaledSymbol (t *_ae .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;
};if scale [0]==1{return sm ;};_bbcce ,_gffe :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_af .NoError (t ,_gffe );return _bbcce ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;
SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func TstImageBitmap ()*Bitmap {return _aagac .Copy ()};type LocationFilter int ;func _dcfgc (_aeb ,_bebga ,_agbf byte )byte {return (_aeb &^(_agbf ))|(_bebga &_agbf )};func (_geadf *byHeight )Swap (i ,j int ){_geadf .Values [i ],_geadf .Values [j ]=_geadf .Values [j ],_geadf .Values [i ];
if _geadf .Boxes !=nil {_geadf .Boxes [i ],_geadf .Boxes [j ]=_geadf .Boxes [j ],_geadf .Boxes [i ];};};func TstAddSymbol (t *_ae .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_befg :=_abc .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );
bms .AddBox (&_befg );*x +=sym .Width +space ;};func (_bgb *Bitmap )centroid (_baef ,_eccf []int )(Point ,error ){_cbfe :=Point {};_bgb .setPadBits (0);if len (_baef )==0{_baef =_bcab ();};if len (_eccf )==0{_eccf =_bece ();};var _cbc ,_gccb ,_gad ,_dccdb ,_gafb ,_agfg int ;
var _egefe byte ;for _gafb =0;_gafb < _bgb .Height ;_gafb ++{_ggca :=_bgb .RowStride *_gafb ;_dccdb =0;for _agfg =0;_agfg < _bgb .RowStride ;_agfg ++{_egefe =_bgb .Data [_ggca +_agfg ];if _egefe !=0{_dccdb +=_eccf [_egefe ];_cbc +=_baef [_egefe ]+_agfg *8*_eccf [_egefe ];
};};_gad +=_dccdb ;_gccb +=_dccdb *_gafb ;};if _gad !=0{_cbfe .X =float32 (_cbc )/float32 (_gad );_cbfe .Y =float32 (_gccb )/float32 (_gad );};return _cbfe ,nil ;};func (_ffa *Bitmap )connComponentsBitmapsBB (_bea *Bitmaps ,_acdd int )(_abea *Boxes ,_gfega error ){const _cgbc ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _acdd !=4&&_acdd !=8{return nil ,_f .Error (_cgbc ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _bea ==nil {return nil ,_f .Error (_cgbc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_bea .Values )> 0{return nil ,_f .Error (_cgbc ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _ffa .Zero (){return &Boxes {},nil ;};var (_feeb ,_afab ,_abgae ,_fcde *Bitmap ;
);_ffa .setPadBits (0);if _feeb ,_gfega =_afad (nil ,_ffa );_gfega !=nil {return nil ,_f .Wrap (_gfega ,_cgbc ,"\u0062\u006d\u0031");};if _afab ,_gfega =_afad (nil ,_ffa );_gfega !=nil {return nil ,_f .Wrap (_gfega ,_cgbc ,"\u0062\u006d\u0032");};_gded :=&_ab .Stack {};
_gded .Aux =&_ab .Stack {};_abea =&Boxes {};var (_cbae ,_fgfc int ;_bfce _abc .Point ;_gbda bool ;_fccb *_abc .Rectangle ;);for {if _bfce ,_gbda ,_gfega =_feeb .nextOnPixel (_cbae ,_fgfc );_gfega !=nil {return nil ,_f .Wrap (_gfega ,_cgbc ,"");};if !_gbda {break ;
};if _fccb ,_gfega =_dfae (_feeb ,_gded ,_bfce .X ,_bfce .Y ,_acdd );_gfega !=nil {return nil ,_f .Wrap (_gfega ,_cgbc ,"");};if _gfega =_abea .Add (_fccb );_gfega !=nil {return nil ,_f .Wrap (_gfega ,_cgbc ,"");};if _abgae ,_gfega =_feeb .clipRectangle (_fccb ,nil );
_gfega !=nil {return nil ,_f .Wrap (_gfega ,_cgbc ,"\u0062\u006d\u0033");};if _fcde ,_gfega =_afab .clipRectangle (_fccb ,nil );_gfega !=nil {return nil ,_f .Wrap (_gfega ,_cgbc ,"\u0062\u006d\u0034");};if _ ,_gfega =_cgff (_abgae ,_abgae ,_fcde );_gfega !=nil {return nil ,_f .Wrap (_gfega ,_cgbc ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _gfega =_afab .RasterOperation (_fccb .Min .X ,_fccb .Min .Y ,_fccb .Dx (),_fccb .Dy (),PixSrcXorDst ,_abgae ,0,0);_gfega !=nil {return nil ,_f .Wrap (_gfega ,_cgbc ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_bea .AddBitmap (_abgae );_cbae =_bfce .X ;_fgfc =_bfce .Y ;};_bea .Boxes =*_abea ;return _abea ,nil ;};func (_ceda *Bitmap )GetBitOffset (x int )int {return x &0x07};func _bgad (_becb ,_aca *Bitmap ,_cgd *Selection )(*Bitmap ,error ){const _adggf ="\u006f\u0070\u0065\u006e";
var _edfc error ;_becb ,_edfc =_gfce (_becb ,_aca ,_cgd );if _edfc !=nil {return nil ,_f .Wrap (_edfc ,_adggf ,"");};_eegd ,_edfc :=_dafeg (nil ,_aca ,_cgd );if _edfc !=nil {return nil ,_f .Wrap (_edfc ,_adggf ,"");};_ ,_edfc =_gafe (_becb ,_eegd ,_cgd );
if _edfc !=nil {return nil ,_f .Wrap (_edfc ,_adggf ,"");};return _becb ,nil ;};var _ _c .Interface =&ClassedPoints {};func _fe (_bdd *Bitmap ,_cbea ,_bac int )(*Bitmap ,error ){const _dab ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _bdd ==nil {return nil ,_f .Error (_dab ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cbea <=0||_bac <=0{return nil ,_f .Error (_dab ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _cbea ==_bac {if _cbea ==1{_ccd ,_dga :=_afad (nil ,_bdd );if _dga !=nil {return nil ,_f .Wrap (_dga ,_dab ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _ccd ,nil ;};if _cbea ==2||_cbea ==4||_cbea ==8{_fgg ,_geg :=_cbb (_bdd ,_cbea );
if _geg !=nil {return nil ,_f .Wrap (_geg ,_dab ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _fgg ,nil ;};};_fba :=_cbea *_bdd .Width ;_gf :=_bac *_bdd .Height ;_age :=New (_fba ,_gf );_gea :=_age .RowStride ;
var (_adc ,_aad ,_ec ,_efg ,_ce int ;_edb byte ;_gbf error ;);for _aad =0;_aad < _bdd .Height ;_aad ++{_adc =_bac *_aad *_gea ;for _ec =0;_ec < _bdd .Width ;_ec ++{if _gegb :=_bdd .GetPixel (_ec ,_aad );_gegb {_ce =_cbea *_ec ;for _efg =0;_efg < _cbea ;
_efg ++{_age .setBit (_adc *8+_ce +_efg );};};};for _efg =1;_efg < _bac ;_efg ++{_afd :=_adc +_efg *_gea ;for _gcf :=0;_gcf < _gea ;_gcf ++{if _edb ,_gbf =_age .GetByte (_adc +_gcf );_gbf !=nil {return nil ,_f .Wrapf (_gbf ,_dab ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_efg );
};if _gbf =_age .SetByte (_afd +_gcf ,_edb );_gbf !=nil {return nil ,_f .Wrap (_gbf ,_dab ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _age ,nil ;};var _faf [256]uint8 ;func (_ace *Bitmap )clearAll ()error {return _ace .RasterOperation (0,0,_ace .Width ,_ace .Height ,PixClr ,nil ,0,0);
};func (_fefg *Bitmaps )Size ()int {return len (_fefg .Values )};func _dfae (_gaff *Bitmap ,_fcbg *_ab .Stack ,_gebd ,_afcg ,_babg int )(_cdbca *_abc .Rectangle ,_eccbg error ){const _eege ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _gaff ==nil {return nil ,_f .Error (_eege ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fcbg ==nil {return nil ,_f .Error (_eege ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _babg {case 4:if _cdbca ,_eccbg =_edfd (_gaff ,_fcbg ,_gebd ,_afcg );_eccbg !=nil {return nil ,_f .Wrap (_eccbg ,_eege ,"");};return _cdbca ,nil ;case 8:if _cdbca ,_eccbg =_bbedd (_gaff ,_fcbg ,_gebd ,_afcg );_eccbg !=nil {return nil ,_f .Wrap (_eccbg ,_eege ,"");
};return _cdbca ,nil ;default:return nil ,_f .Errorf (_eege ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_babg );
};};func (_edde *ClassedPoints )validateIntSlice ()error {const _cade ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_cfdc :=range _edde .IntSlice {if _cfdc >=(_edde .Points .Size ()){return _f .Errorf (_cade ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_cfdc ,_edde .Points .Size ());
};};return nil ;};type fillSegment struct{_bcdf int ;_cbed int ;_dcfgf int ;_ebaa int ;};func (_dgbf Points )XSorter ()func (_bcbe ,_fdeg int )bool {return func (_eaga ,_becf int )bool {return _dgbf [_eaga ].X < _dgbf [_becf ].X };};const (_ SizeComparison =iota ;
SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _bcab ()[]int {_dfcff :=make ([]int ,256);_dfcff [0]=0;_dfcff [1]=7;var _cggd int ;for _cggd =2;_cggd < 4;_cggd ++{_dfcff [_cggd ]=_dfcff [_cggd -2]+6;};for _cggd =4;
_cggd < 8;_cggd ++{_dfcff [_cggd ]=_dfcff [_cggd -4]+5;};for _cggd =8;_cggd < 16;_cggd ++{_dfcff [_cggd ]=_dfcff [_cggd -8]+4;};for _cggd =16;_cggd < 32;_cggd ++{_dfcff [_cggd ]=_dfcff [_cggd -16]+3;};for _cggd =32;_cggd < 64;_cggd ++{_dfcff [_cggd ]=_dfcff [_cggd -32]+2;
};for _cggd =64;_cggd < 128;_cggd ++{_dfcff [_cggd ]=_dfcff [_cggd -64]+1;};for _cggd =128;_cggd < 256;_cggd ++{_dfcff [_cggd ]=_dfcff [_cggd -128];};return _dfcff ;};