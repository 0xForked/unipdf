//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_fa "encoding/binary";_gd "github.com/stretchr/testify/require";_adf "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_ad "github.com/unidoc/unipdf/v3/internal/imageutil";_b "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_df "image";_f "math";_a "sort";_gc "strings";_e "testing";);func (_fgf *Bitmap )And (s *Bitmap )(_eaf *Bitmap ,_dcf error ){const _dcgd ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _fgf ==nil {return nil ,_g .Error (_dcgd ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_g .Error (_dcgd ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_fgf .SizesEqual (s ){_adf .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_dcgd );
};if _eaf ,_dcf =_cdec (_eaf ,_fgf );_dcf !=nil {return nil ,_g .Wrap (_dcf ,_dcgd ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _dcf =_eaf .RasterOperation (0,0,_eaf .Width ,_eaf .Height ,PixSrcAndDst ,s ,0,0);
_dcf !=nil {return nil ,_g .Wrap (_dcf ,_dcgd ,"");};return _eaf ,nil ;};func _aag (_eff ,_gg *Bitmap )(_fb error ){const _de ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_gce :=_gg .RowStride ;
_ge :=_eff .RowStride ;_gb :=_gg .RowStride *4-_eff .RowStride ;var (_ba ,_ded byte ;_ddd uint32 ;_fd ,_cgc ,_fag ,_eeg ,_ed ,_eb ,_cb int ;);for _fag =0;_fag < _gg .Height ;_fag ++{_fd =_fag *_gce ;_cgc =4*_fag *_ge ;for _eeg =0;_eeg < _gce ;_eeg ++{_ba =_gg .Data [_fd +_eeg ];
_ddd =_fecd [_ba ];_eb =_cgc +_eeg *4;if _gb !=0&&(_eeg +1)*4> _eff .RowStride {for _ed =_gb ;_ed > 0;_ed --{_ded =byte ((_ddd >>uint (_ed *8))&0xff);_cb =_eb +(_gb -_ed );if _fb =_eff .SetByte (_cb ,_ded );_fb !=nil {return _g .Wrapf (_fb ,_de ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ed );
};};}else if _fb =_eff .setFourBytes (_eb ,_ddd );_fb !=nil {return _g .Wrap (_fb ,_de ,"");};if _fb =_eff .setFourBytes (_cgc +_eeg *4,_fecd [_gg .Data [_fd +_eeg ]]);_fb !=nil {return _g .Wrap (_fb ,_de ,"");};};for _ed =1;_ed < 4;_ed ++{for _eeg =0;
_eeg < _ge ;_eeg ++{if _fb =_eff .SetByte (_cgc +_ed *_ge +_eeg ,_eff .Data [_cgc +_eeg ]);_fb !=nil {return _g .Wrapf (_fb ,_de ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ed ,_eeg );
};};};};return nil ;};func (_fegd *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_eafb *Bitmaps ,_efeec error ){const _ebfb ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _fegd ==nil {return nil ,_g .Error (_ebfb ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_ebfb ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_ebfb ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_gdad ,_efeec :=_fegd .makeSizeIndicator (width ,height ,tp ,relation );if _efeec !=nil {return nil ,_g .Wrap (_efeec ,_ebfb ,"");};_eafb ,_efeec =_fegd .selectByIndicator (_gdad );if _efeec !=nil {return nil ,_g .Wrap (_efeec ,_ebfb ,"");};return _eafb ,nil ;
};func (_dfca *Bitmap )GetVanillaData ()[]byte {if _dfca .Color ==Chocolate {_dfca .inverseData ();};return _dfca .Data ;};func _fbab (_gfb ,_eged *Bitmap ,_efdf ,_ddgbd ,_cfga uint ,_add ,_fdd int ,_beeb bool ,_gbfg ,_eaeec int )error {for _egeb :=_add ;
_egeb < _fdd ;_egeb ++{if _gbfg +1< len (_gfb .Data ){_fbgf :=_egeb +1==_fdd ;_dbgg ,_gbce :=_gfb .GetByte (_gbfg );if _gbce !=nil {return _gbce ;};_gbfg ++;_dbgg <<=_efdf ;_gddab ,_gbce :=_gfb .GetByte (_gbfg );if _gbce !=nil {return _gbce ;};_gddab >>=_ddgbd ;
_dbdfa :=_dbgg |_gddab ;if _fbgf &&!_beeb {_dbdfa =_eead (_cfga ,_dbdfa );};_gbce =_eged .SetByte (_eaeec ,_dbdfa );if _gbce !=nil {return _gbce ;};_eaeec ++;if _fbgf &&_beeb {_bfgg ,_cbec :=_gfb .GetByte (_gbfg );if _cbec !=nil {return _cbec ;};_bfgg <<=_efdf ;
_dbdfa =_eead (_cfga ,_bfgg );if _cbec =_eged .SetByte (_eaeec ,_dbdfa );_cbec !=nil {return _cbec ;};};continue ;};_degc ,_eedf :=_gfb .GetByte (_gbfg );if _eedf !=nil {_adf .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_gbfg ,_eedf );
return _eedf ;};_degc <<=_efdf ;_gbfg ++;_eedf =_eged .SetByte (_eaeec ,_degc );if _eedf !=nil {return _eedf ;};_eaeec ++;};return nil ;};func _ecgc (_egfe *Bitmap ,_ecfa ,_gbbdgd int ,_acacg ,_gdcdb int ,_dfgd RasterOperator ){var (_dcda bool ;_eccc bool ;
_ebdb int ;_dggd int ;_dddb int ;_aeac int ;_eaec bool ;_gccga byte ;);_gefc :=8-(_ecfa &7);_agfg :=_ddgbf [_gefc ];_dafa :=_egfe .RowStride *_gbbdgd +(_ecfa >>3);if _acacg < _gefc {_dcda =true ;_agfg &=_ceggg [8-_gefc +_acacg ];};if !_dcda {_ebdb =(_acacg -_gefc )>>3;
if _ebdb !=0{_eccc =true ;_dggd =_dafa +1;};};_dddb =(_ecfa +_acacg )&7;if !(_dcda ||_dddb ==0){_eaec =true ;_gccga =_ceggg [_dddb ];_aeac =_dafa +1+_ebdb ;};var _cbbf ,_cfda int ;switch _dfgd {case PixClr :for _cbbf =0;_cbbf < _gdcdb ;_cbbf ++{_egfe .Data [_dafa ]=_ggbgd (_egfe .Data [_dafa ],0x0,_agfg );
_dafa +=_egfe .RowStride ;};if _eccc {for _cbbf =0;_cbbf < _gdcdb ;_cbbf ++{for _cfda =0;_cfda < _ebdb ;_cfda ++{_egfe .Data [_dggd +_cfda ]=0x0;};_dggd +=_egfe .RowStride ;};};if _eaec {for _cbbf =0;_cbbf < _gdcdb ;_cbbf ++{_egfe .Data [_aeac ]=_ggbgd (_egfe .Data [_aeac ],0x0,_gccga );
_aeac +=_egfe .RowStride ;};};case PixSet :for _cbbf =0;_cbbf < _gdcdb ;_cbbf ++{_egfe .Data [_dafa ]=_ggbgd (_egfe .Data [_dafa ],0xff,_agfg );_dafa +=_egfe .RowStride ;};if _eccc {for _cbbf =0;_cbbf < _gdcdb ;_cbbf ++{for _cfda =0;_cfda < _ebdb ;_cfda ++{_egfe .Data [_dggd +_cfda ]=0xff;
};_dggd +=_egfe .RowStride ;};};if _eaec {for _cbbf =0;_cbbf < _gdcdb ;_cbbf ++{_egfe .Data [_aeac ]=_ggbgd (_egfe .Data [_aeac ],0xff,_gccga );_aeac +=_egfe .RowStride ;};};case PixNotDst :for _cbbf =0;_cbbf < _gdcdb ;_cbbf ++{_egfe .Data [_dafa ]=_ggbgd (_egfe .Data [_dafa ],^_egfe .Data [_dafa ],_agfg );
_dafa +=_egfe .RowStride ;};if _eccc {for _cbbf =0;_cbbf < _gdcdb ;_cbbf ++{for _cfda =0;_cfda < _ebdb ;_cfda ++{_egfe .Data [_dggd +_cfda ]=^(_egfe .Data [_dggd +_cfda ]);};_dggd +=_egfe .RowStride ;};};if _eaec {for _cbbf =0;_cbbf < _gdcdb ;_cbbf ++{_egfe .Data [_aeac ]=_ggbgd (_egfe .Data [_aeac ],^_egfe .Data [_aeac ],_gccga );
_aeac +=_egfe .RowStride ;};};};};func (_dab *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _dab .removeBorderGeneral (left ,right ,top ,bot );};func (_gdcc *Bitmap )removeBorderGeneral (_ccec ,_abcc ,_ced ,_fdf int )(*Bitmap ,error ){const _fgbd ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _ccec < 0||_abcc < 0||_ced < 0||_fdf < 0{return nil ,_g .Error (_fgbd ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_dccd ,_ggbg :=_gdcc .Width ,_gdcc .Height ;
_eebf :=_dccd -_ccec -_abcc ;_dbee :=_ggbg -_ced -_fdf ;if _eebf <=0{return nil ,_g .Errorf (_fgbd ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_eebf );};if _dbee <=0{return nil ,_g .Errorf (_fgbd ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_dbee );
};_bdcf :=New (_eebf ,_dbee );_bdcf .Color =_gdcc .Color ;_fcdg :=_bdcf .RasterOperation (0,0,_eebf ,_dbee ,PixSrc ,_gdcc ,_ccec ,_ced );if _fcdg !=nil {return nil ,_g .Wrap (_fcdg ,_fgbd ,"");};return _bdcf ,nil ;};type Point struct{X ,Y float32 ;};func (_dcdg *Bitmap )setEightBytes (_dagb int ,_eeda uint64 )error {_dbg :=_dcdg .RowStride -(_dagb %_dcdg .RowStride );
if _dcdg .RowStride !=_dcdg .Width >>3{_dbg --;};if _dbg >=8{return _dcdg .setEightFullBytes (_dagb ,_eeda );};return _dcdg .setEightPartlyBytes (_dagb ,_dbg ,_eeda );};func (_cefc *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _cefc .Copy (),nil ;
};_fce ,_ffb :=_cefc .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _ffb !=nil {return nil ,_g .Wrap (_ffb ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _fce ,nil ;};func (_egcg *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _efcg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_egcg .IntSlice .Size (){return 0,_g .Errorf (_efcg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_egcg .XAtIndex (i )),nil ;};func (_dgg *Bitmap )GetUnpaddedData ()([]byte ,error ){_gbc :=uint (_dgg .Width &0x07);if _gbc ==0{return _dgg .Data ,nil ;};_ddgb :=_dgg .Width *_dgg .Height ;if _ddgb %8!=0{_ddgb >>=3;_ddgb ++;}else {_ddgb >>=3;
};_cceg :=make ([]byte ,_ddgb );_adfab :=_d .NewWriterMSB (_cceg );const _fdb ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _cdc :=0;_cdc < _dgg .Height ;_cdc ++{for _faag :=0;_faag < _dgg .RowStride ;_faag ++{_fcc :=_dgg .Data [_cdc *_dgg .RowStride +_faag ];
if _faag !=_dgg .RowStride -1{_gccg :=_adfab .WriteByte (_fcc );if _gccg !=nil {return nil ,_g .Wrap (_gccg ,_fdb ,"");};continue ;};for _bcec :=uint (0);_bcec < _gbc ;_bcec ++{_ddbe :=_adfab .WriteBit (int (_fcc >>(7-_bcec )&0x01));if _ddbe !=nil {return nil ,_g .Wrap (_ddbe ,_fdb ,"");
};};};};return _cceg ,nil ;};type LocationFilter int ;func _cccb (_ddgd ,_bfeec *Bitmap ,_dfcgf ,_gga int )(*Bitmap ,error ){const _gdac ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _bfeec ==nil {return nil ,_g .Error (_gdac ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _dfcgf < 1&&_gga < 1{return nil ,_g .Error (_gdac ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _dfcgf ==1&&_gga ==1{return _bfeec .Copy (),nil ;};if _dfcgf ==1||_gga ==1{var _faba error ;
_afgb :=SelCreateBrick (_gga ,_dfcgf ,_gga /2,_dfcgf /2,SelHit );_ddgd ,_faba =_gcbe (_ddgd ,_bfeec ,_afgb );if _faba !=nil {return nil ,_g .Wrap (_faba ,_gdac ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ddgd ,nil ;};_bccf :=SelCreateBrick (1,_dfcgf ,0,_dfcgf /2,SelHit );_abb :=SelCreateBrick (_gga ,1,_gga /2,0,SelHit );_ddcaf ,_aaag :=_cgfc (nil ,_bfeec ,_bccf );if _aaag !=nil {return nil ,_g .Wrap (_aaag ,_gdac ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_ddgd ,_aaag =_cgfc (_ddgd ,_ddcaf ,_abb );if _aaag !=nil {return nil ,_g .Wrap (_aaag ,_gdac ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_aaag =_fef (_ddcaf ,_ddgd ,_bccf );if _aaag !=nil {return nil ,_g .Wrap (_aaag ,_gdac ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_aaag =_fef (_ddgd ,_ddcaf ,_abb );if _aaag !=nil {return nil ,_g .Wrap (_aaag ,_gdac ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _ddgd ,nil ;};func TstWordBitmapWithSpaces (t *_e .T ,scale ...int )*Bitmap {_fcbc :=1;
if len (scale )> 0{_fcbc =scale [0];};_gegdc :=3;_fddda :=9+7+15+2*_gegdc +2*_gegdc ;_fbaddg :=5+_gegdc +5+2*_gegdc ;_cfbb :=New (_fddda *_fcbc ,_fbaddg *_fcbc );_ffcabg :=&Bitmaps {};var _fggb *int ;_gegdc *=_fcbc ;_afdcc :=_gegdc ;_fggb =&_afdcc ;_gegde :=_gegdc ;
_eebe :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,1*_fcbc );_eebe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,_gegdc );_eebe =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,1*_fcbc );
_eebe =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,_gegdc );_eebe =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,1*_fcbc );_eebe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,1*_fcbc );
_eebe =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,0);*_fggb =_gegdc ;_gegde =5*_fcbc +_gegdc ;_eebe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,1*_fcbc );_eebe =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,_gegdc );
_eebe =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,1*_fcbc );_eebe =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,1*_fcbc );_eebe =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,1*_fcbc );
_eebe =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,1*_fcbc );_eebe =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ffcabg ,_eebe ,_fggb ,_gegde ,0);TstWriteSymbols (t ,_ffcabg ,_cfbb );return _cfbb ;};func (_afab *Bitmap )GetBitOffset (x int )int {return x &0x07};
func init (){for _fgbe :=0;_fgbe < 256;_fgbe ++{_cbdd [_fgbe ]=uint8 (_fgbe &0x1)+(uint8 (_fgbe >>1)&0x1)+(uint8 (_fgbe >>2)&0x1)+(uint8 (_fgbe >>3)&0x1)+(uint8 (_fgbe >>4)&0x1)+(uint8 (_fgbe >>5)&0x1)+(uint8 (_fgbe >>6)&0x1)+(uint8 (_fgbe >>7)&0x1);};
};func _effd (_afce *_b .Stack ,_bcgb ,_cfbc ,_bcdc ,_aggf ,_efdd int ,_geaab *_df .Rectangle )(_abbb error ){const _dgdaa ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _afce ==nil {return _g .Error (_dgdaa ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _geaab ==nil {return _g .Error (_dgdaa ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_geaab .Min .X =_b .Min (_geaab .Min .X ,_bcgb );_geaab .Max .X =_b .Max (_geaab .Max .X ,_cfbc );_geaab .Min .Y =_b .Min (_geaab .Min .Y ,_bcdc );_geaab .Max .Y =_b .Max (_geaab .Max .Y ,_bcdc );if !(_bcdc +_aggf >=0&&_bcdc +_aggf <=_efdd ){return nil ;
};if _afce .Aux ==nil {return _g .Error (_dgdaa ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _fcfbc *fillSegment ;_eega ,_abcb :=_afce .Aux .Pop ();if _abcb {if _fcfbc ,_abcb =_eega .(*fillSegment );
!_abcb {return _g .Error (_dgdaa ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_fcfbc =&fillSegment {};
};_fcfbc ._gaad =_bcgb ;_fcfbc ._cdae =_cfbc ;_fcfbc ._dbfda =_bcdc ;_fcfbc ._dcgf =_aggf ;_afce .Push (_fcfbc );return nil ;};func (_dbfe *Bitmap )setBit (_agcb int ){_dbfe .Data [(_agcb >>3)]|=0x80>>uint (_agcb &7)};func TstImageBitmapData ()[]byte {return _ebcc .Data };
func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_cgaf float64 ,_bedb error ){const _gdcdf ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _cgaf ,_g .Error (_gdcdf ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _cgaf ,_g .Error (_gdcdf ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _cgaf ,_g .Error (_gdcdf ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_gacf ,_fcfa :=bm1 .Width ,bm1 .Height ;_gabeb ,_gdeg :=bm2 .Width ,bm2 .Height ;
if _dgda (_gacf -_gabeb )> maxDiffW {return 0,nil ;};if _dgda (_fcfa -_gdeg )> maxDiffH {return 0,nil ;};var _bgeg ,_adgc int ;if delX >=0{_bgeg =int (delX +0.5);}else {_bgeg =int (delX -0.5);};if delY >=0{_adgc =int (delY +0.5);}else {_adgc =int (delY -0.5);
};_adcd :=bm1 .createTemplate ();if _bedb =_adcd .RasterOperation (_bgeg ,_adgc ,_gabeb ,_gdeg ,PixSrc ,bm2 ,0,0);_bedb !=nil {return _cgaf ,_g .Wrap (_bedb ,_gdcdf ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};
if _bedb =_adcd .RasterOperation (0,0,_gacf ,_fcfa ,PixSrcAndDst ,bm1 ,0,0);_bedb !=nil {return _cgaf ,_g .Wrap (_bedb ,_gdcdf ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_bfcf :=_adcd .countPixels ();_cgaf =float64 (_bfcf )*float64 (_bfcf )/(float64 (area1 )*float64 (area2 ));
return _cgaf ,nil ;};type fillSegment struct{_gaad int ;_cdae int ;_dbfda int ;_dcgf int ;};func (_gbd *Bitmap )ToImage ()_df .Image {_bed ,_fgec :=_ad .NewImage (_gbd .Width ,_gbd .Height ,1,1,_gbd .Data ,nil ,nil );if _fgec !=nil {_adf .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fgec );
};return _bed ;};func (_dddd *Bitmap )countPixels ()int {var (_fbfc int ;_dgae uint8 ;_eeb byte ;_ccc int ;);_bfbe :=_dddd .RowStride ;_gca :=uint (_dddd .Width &0x07);if _gca !=0{_dgae =uint8 ((0xff<<(8-_gca ))&0xff);_bfbe --;};for _eabb :=0;_eabb < _dddd .Height ;
_eabb ++{for _ccc =0;_ccc < _bfbe ;_ccc ++{_eeb =_dddd .Data [_eabb *_dddd .RowStride +_ccc ];_fbfc +=int (_cbdd [_eeb ]);};if _gca !=0{_fbfc +=int (_cbdd [_dddd .Data [_eabb *_dddd .RowStride +_ccc ]&_dgae ]);};};return _fbfc ;};func _agcd (_cfd ,_facb byte ,_cbded CombinationOperator )byte {switch _cbded {case CmbOpOr :return _facb |_cfd ;
case CmbOpAnd :return _facb &_cfd ;case CmbOpXor :return _facb ^_cfd ;case CmbOpXNor :return ^(_facb ^_cfd );case CmbOpNot :return ^(_facb );default:return _facb ;};};func (_bec *Bitmap )GetPixel (x ,y int )bool {_cgdf :=_bec .GetByteIndex (x ,y );_fbaa :=_bec .GetBitOffset (x );
_bga :=uint (7-_fbaa );if _cgdf > len (_bec .Data )-1{_adf .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_bec );
return false ;};if (_bec .Data [_cgdf ]>>_bga )&0x01>=1{return true ;};return false ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;
);func (_agc *Bitmap )setAll ()error {_aacc :=_fgdg (_agc ,0,0,_agc .Width ,_agc .Height ,PixSet ,nil ,0,0);if _aacc !=nil {return _g .Wrap (_aacc ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func _cbba (_bacbf *Bitmap ,_fece ,_efaec int ,_eage ,_bbdb int ,_feadd RasterOperator ){var (_gefb int ;
_gecf byte ;_dabdd ,_ebae int ;_ffddd int ;);_dbafe :=_eage >>3;_gfgd :=_eage &7;if _gfgd > 0{_gecf =_ceggg [_gfgd ];};_gefb =_bacbf .RowStride *_efaec +(_fece >>3);switch _feadd {case PixClr :for _dabdd =0;_dabdd < _bbdb ;_dabdd ++{_ffddd =_gefb +_dabdd *_bacbf .RowStride ;
for _ebae =0;_ebae < _dbafe ;_ebae ++{_bacbf .Data [_ffddd ]=0x0;_ffddd ++;};if _gfgd > 0{_bacbf .Data [_ffddd ]=_ggbgd (_bacbf .Data [_ffddd ],0x0,_gecf );};};case PixSet :for _dabdd =0;_dabdd < _bbdb ;_dabdd ++{_ffddd =_gefb +_dabdd *_bacbf .RowStride ;
for _ebae =0;_ebae < _dbafe ;_ebae ++{_bacbf .Data [_ffddd ]=0xff;_ffddd ++;};if _gfgd > 0{_bacbf .Data [_ffddd ]=_ggbgd (_bacbf .Data [_ffddd ],0xff,_gecf );};};case PixNotDst :for _dabdd =0;_dabdd < _bbdb ;_dabdd ++{_ffddd =_gefb +_dabdd *_bacbf .RowStride ;
for _ebae =0;_ebae < _dbafe ;_ebae ++{_bacbf .Data [_ffddd ]=^_bacbf .Data [_ffddd ];_ffddd ++;};if _gfgd > 0{_bacbf .Data [_ffddd ]=_ggbgd (_bacbf .Data [_ffddd ],^_bacbf .Data [_ffddd ],_gecf );};};};};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;
SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_affg *BitmapsArray )AddBox (box *_df .Rectangle ){_affg .Boxes =append (_affg .Boxes ,box )};func (_ceba *Boxes )selectWithIndicator (_fcad *_b .NumSlice )(_gbbd *Boxes ,_bge error ){const _ebb ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ceba ==nil {return nil ,_g .Error (_ebb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _fcad ==nil {return nil ,_g .Error (_ebb ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_fcad )!=len (*_ceba ){return nil ,_g .Error (_ebb ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _faeb ,_dacf int ;for _bceg :=0;_bceg < len (*_fcad );_bceg ++{if _faeb ,_bge =_fcad .GetInt (_bceg );_bge !=nil {return nil ,_g .Wrap (_bge ,_ebb ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _faeb ==1{_dacf ++;
};};if _dacf ==len (*_ceba ){return _ceba ,nil ;};_beg :=Boxes {};for _gccd :=0;_gccd < len (*_fcad );_gccd ++{_faeb =int ((*_fcad )[_gccd ]);if _faeb ==0{continue ;};_beg =append (_beg ,(*_ceba )[_gccd ]);};_gbbd =&_beg ;return _gbbd ,nil ;};type CombinationOperator int ;
func TstRSymbol (t *_e .T ,scale ...int )*Bitmap {_abcga ,_cgdea :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_gd .NoError (t ,_cgdea );return TstGetScaledSymbol (t ,_abcga ,scale ...);};func _cdec (_bcaf ,_dgfgb *Bitmap )(*Bitmap ,error ){if _dgfgb ==nil {return nil ,_g .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _dgfgb ==_bcaf {return _bcaf ,nil ;};if _bcaf ==nil {_bcaf =_dgfgb .createTemplate ();copy (_bcaf .Data ,_dgfgb .Data );return _bcaf ,nil ;};_bgc :=_bcaf .resizeImageData (_dgfgb );if _bgc !=nil {return nil ,_g .Wrap (_bgc ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_bcaf .Text =_dgfgb .Text ;copy (_bcaf .Data ,_dgfgb .Data );return _bcaf ,nil ;};func (_gbaf Points )GetGeometry (i int )(_acfb ,_bcde float32 ,_dgdc error ){if i > len (_gbaf )-1{return 0,0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_cbbb :=_gbaf [i ];return _cbbb .X ,_cbbb .Y ,nil ;};type byWidth Bitmaps ;func (_bdcfa *Bitmap )connComponentsBitmapsBB (_dgfgd *Bitmaps ,_afg int )(_bdcb *Boxes ,_egee error ){const _bacg ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _afg !=4&&_afg !=8{return nil ,_g .Error (_bacg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _dgfgd ==nil {return nil ,_g .Error (_bacg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_dgfgd .Values )> 0{return nil ,_g .Error (_bacg ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _bdcfa .Zero (){return &Boxes {},nil ;
};var (_aff ,_bedgf ,_efg ,_fbb *Bitmap ;);_bdcfa .setPadBits (0);if _aff ,_egee =_cdec (nil ,_bdcfa );_egee !=nil {return nil ,_g .Wrap (_egee ,_bacg ,"\u0062\u006d\u0031");};if _bedgf ,_egee =_cdec (nil ,_bdcfa );_egee !=nil {return nil ,_g .Wrap (_egee ,_bacg ,"\u0062\u006d\u0032");
};_accg :=&_b .Stack {};_accg .Aux =&_b .Stack {};_bdcb =&Boxes {};var (_gcfb ,_adab int ;_abedd _df .Point ;_cffb bool ;_abdeb *_df .Rectangle ;);for {if _abedd ,_cffb ,_egee =_aff .nextOnPixel (_gcfb ,_adab );_egee !=nil {return nil ,_g .Wrap (_egee ,_bacg ,"");
};if !_cffb {break ;};if _abdeb ,_egee =_fdaeb (_aff ,_accg ,_abedd .X ,_abedd .Y ,_afg );_egee !=nil {return nil ,_g .Wrap (_egee ,_bacg ,"");};if _egee =_bdcb .Add (_abdeb );_egee !=nil {return nil ,_g .Wrap (_egee ,_bacg ,"");};if _efg ,_egee =_aff .clipRectangle (_abdeb ,nil );
_egee !=nil {return nil ,_g .Wrap (_egee ,_bacg ,"\u0062\u006d\u0033");};if _fbb ,_egee =_bedgf .clipRectangle (_abdeb ,nil );_egee !=nil {return nil ,_g .Wrap (_egee ,_bacg ,"\u0062\u006d\u0034");};if _ ,_egee =_efbb (_efg ,_efg ,_fbb );_egee !=nil {return nil ,_g .Wrap (_egee ,_bacg ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _egee =_bedgf .RasterOperation (_abdeb .Min .X ,_abdeb .Min .Y ,_abdeb .Dx (),_abdeb .Dy (),PixSrcXorDst ,_efg ,0,0);_egee !=nil {return nil ,_g .Wrap (_egee ,_bacg ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_dgfgd .AddBitmap (_efg );_gcfb =_abedd .X ;_adab =_abedd .Y ;};_dgfgd .Boxes =*_bdcb ;return _bdcb ,nil ;};type BoundaryCondition int ;func (_bafcf *Selection )findMaxTranslations ()(_cagc ,_dade ,_afdf ,_dgge int ){for _daab :=0;_daab < _bafcf .Height ;
_daab ++{for _gagd :=0;_gagd < _bafcf .Width ;_gagd ++{if _bafcf .Data [_daab ][_gagd ]==SelHit {_cagc =_dcb (_cagc ,_bafcf .Cx -_gagd );_dade =_dcb (_dade ,_bafcf .Cy -_daab );_afdf =_dcb (_afdf ,_gagd -_bafcf .Cx );_dgge =_dcb (_dgge ,_daab -_bafcf .Cy );
};};};return _cagc ,_dade ,_afdf ,_dgge ;};func _bbcc (_cbcgg *_b .Stack )(_eccde *fillSegment ,_ebaf error ){const _aebc ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _cbcgg ==nil {return nil ,_g .Error (_aebc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _cbcgg .Aux ==nil {return nil ,_g .Error (_aebc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_cbdb ,_edfb :=_cbcgg .Pop ();if !_edfb {return nil ,nil ;};_gace ,_edfb :=_cbdb .(*fillSegment );
if !_edfb {return nil ,_g .Error (_aebc ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_eccde =&fillSegment {_gace ._gaad ,_gace ._cdae ,_gace ._dbfda +_gace ._dcgf ,_gace ._dcgf };
_cbcgg .Aux .Push (_gace );return _eccde ,nil ;};func (_ddab *Bitmap )addBorderGeneral (_bdb ,_ffca ,_gcb ,_bee int ,_fgfb int )(*Bitmap ,error ){const _gab ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _bdb < 0||_ffca < 0||_gcb < 0||_bee < 0{return nil ,_g .Error (_gab ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_fee ,_ffcab :=_ddab .Width ,_ddab .Height ;_acf :=_fee +_bdb +_ffca ;_cdef :=_ffcab +_gcb +_bee ;_dbef :=New (_acf ,_cdef );_dbef .Color =_ddab .Color ;_fad :=PixClr ;if _fgfb > 0{_fad =PixSet ;};_gfc :=_dbef .RasterOperation (0,0,_bdb ,_cdef ,_fad ,nil ,0,0);
if _gfc !=nil {return nil ,_g .Wrap (_gfc ,_gab ,"\u006c\u0065\u0066\u0074");};_gfc =_dbef .RasterOperation (_acf -_ffca ,0,_ffca ,_cdef ,_fad ,nil ,0,0);if _gfc !=nil {return nil ,_g .Wrap (_gfc ,_gab ,"\u0072\u0069\u0067h\u0074");};_gfc =_dbef .RasterOperation (0,0,_acf ,_gcb ,_fad ,nil ,0,0);
if _gfc !=nil {return nil ,_g .Wrap (_gfc ,_gab ,"\u0074\u006f\u0070");};_gfc =_dbef .RasterOperation (0,_cdef -_bee ,_acf ,_bee ,_fad ,nil ,0,0);if _gfc !=nil {return nil ,_g .Wrap (_gfc ,_gab ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_gfc =_dbef .RasterOperation (_bdb ,_gcb ,_fee ,_ffcab ,PixSrc ,_ddab ,0,0);
if _gfc !=nil {return nil ,_g .Wrap (_gfc ,_gab ,"\u0063\u006f\u0070\u0079");};return _dbef ,nil ;};var _cbdd [256]uint8 ;func _aacdba (_gafc *Bitmap ,_debgf ,_dcef ,_ggbe ,_ccag int ,_ebge RasterOperator ,_dfaf *Bitmap ,_dfge ,_fgea int )error {var (_adad bool ;
_bdcbe bool ;_dadc byte ;_gbbdg int ;_fgee int ;_afaeg int ;_afba int ;_cfef bool ;_ccdc int ;_fbdc int ;_faage int ;_dccb bool ;_fggae byte ;_fgfg int ;_cgfa int ;_addd int ;_bbbd byte ;_eedcd int ;_cda int ;_ffag uint ;_gcagc uint ;_cfcda byte ;_fecb shift ;
_gfcda bool ;_gfaa bool ;_gfdce ,_agfbe int ;);if _dfge &7!=0{_cda =8-(_dfge &7);};if _debgf &7!=0{_fgee =8-(_debgf &7);};if _cda ==0&&_fgee ==0{_cfcda =_ddgbf [0];}else {if _fgee > _cda {_ffag =uint (_fgee -_cda );}else {_ffag =uint (8-(_cda -_fgee ));
};_gcagc =8-_ffag ;_cfcda =_ddgbf [_ffag ];};if (_debgf &7)!=0{_adad =true ;_gbbdg =8-(_debgf &7);_dadc =_ddgbf [_gbbdg ];_afaeg =_gafc .RowStride *_dcef +(_debgf >>3);_afba =_dfaf .RowStride *_fgea +(_dfge >>3);_eedcd =8-(_dfge &7);if _gbbdg > _eedcd {_fecb =_bgcb ;
if _ggbe >=_cda {_gfcda =true ;};}else {_fecb =_gffd ;};};if _ggbe < _gbbdg {_bdcbe =true ;_dadc &=_ceggg [8-_gbbdg +_ggbe ];};if !_bdcbe {_ccdc =(_ggbe -_gbbdg )>>3;if _ccdc !=0{_cfef =true ;_fbdc =_gafc .RowStride *_dcef +((_debgf +_fgee )>>3);_faage =_dfaf .RowStride *_fgea +((_dfge +_fgee )>>3);
};};_fgfg =(_debgf +_ggbe )&7;if !(_bdcbe ||_fgfg ==0){_dccb =true ;_fggae =_ceggg [_fgfg ];_cgfa =_gafc .RowStride *_dcef +((_debgf +_fgee )>>3)+_ccdc ;_addd =_dfaf .RowStride *_fgea +((_dfge +_fgee )>>3)+_ccdc ;if _fgfg > int (_gcagc ){_gfaa =true ;};
};switch _ebge {case PixSrc :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;
};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],_bbbd ,_dadc );_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );
_gafc .Data [_fbdc +_agfbe ]=_bbbd ;};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};};if _dccb {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );
};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],_bbbd ,_fggae );_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;};};case PixNotSrc :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );
};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],^_bbbd ,_dadc );_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;_agfbe < _ccdc ;
_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );_gafc .Data [_fbdc +_agfbe ]=^_bbbd ;};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};};if _dccb {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;
if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],^_bbbd ,_fggae );_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;};};case PixSrcOrDst :if _adad {for _gfdce =0;_gfdce < _ccag ;
_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],_bbbd |_gafc .Data [_afaeg ],_dadc );
_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );_gafc .Data [_fbdc +_agfbe ]|=_bbbd ;
};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};};if _dccb {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],_bbbd |_gafc .Data [_cgfa ],_fggae );
_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;};};case PixSrcAndDst :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );
};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],_bbbd &_gafc .Data [_afaeg ],_dadc );_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;
_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );_gafc .Data [_fbdc +_agfbe ]&=_bbbd ;};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};};if _dccb {for _gfdce =0;_gfdce < _ccag ;
_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],_bbbd &_gafc .Data [_cgfa ],_fggae );_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;
};};case PixSrcXorDst :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],_bbbd ^_gafc .Data [_afaeg ],_dadc );
_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );_gafc .Data [_fbdc +_agfbe ]^=_bbbd ;
};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};};if _dccb {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],_bbbd ^_gafc .Data [_cgfa ],_fggae );
_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;};};case PixNotSrcOrDst :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );
};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],^_bbbd |_gafc .Data [_afaeg ],_dadc );_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;
_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );_gafc .Data [_fbdc +_agfbe ]|=^_bbbd ;};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};};if _dccb {for _gfdce =0;_gfdce < _ccag ;
_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],^_bbbd |_gafc .Data [_cgfa ],_fggae );_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;
};};case PixNotSrcAndDst :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;};
_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],^_bbbd &_gafc .Data [_afaeg ],_dadc );_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );
_gafc .Data [_fbdc +_agfbe ]&=^_bbbd ;};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};};if _dccb {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );
};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],^_bbbd &_gafc .Data [_cgfa ],_fggae );_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;};};case PixSrcOrNotDst :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;
if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],_bbbd |^_gafc .Data [_afaeg ],_dadc );_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;
};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );_gafc .Data [_fbdc +_agfbe ]=_bbbd |^_gafc .Data [_fbdc +_agfbe ];
};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};};if _dccb {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],_bbbd |^_gafc .Data [_cgfa ],_fggae );
_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;};};case PixSrcAndNotDst :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );
};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],_bbbd &^_gafc .Data [_afaeg ],_dadc );_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;
_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );_gafc .Data [_fbdc +_agfbe ]=_bbbd &^_gafc .Data [_fbdc +_agfbe ];};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};
};if _dccb {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],_bbbd &^_gafc .Data [_cgfa ],_fggae );_cgfa +=_gafc .RowStride ;
_addd +=_dfaf .RowStride ;};};case PixNotPixSrcOrDst :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;
};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],^(_bbbd |_gafc .Data [_afaeg ]),_dadc );_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );
_gafc .Data [_fbdc +_agfbe ]=^(_bbbd |_gafc .Data [_fbdc +_agfbe ]);};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};};if _dccb {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );
};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],^(_bbbd |_gafc .Data [_cgfa ]),_fggae );_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;};};case PixNotPixSrcAndDst :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;
if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],^(_bbbd &_gafc .Data [_afaeg ]),_dadc );_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;
};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );_gafc .Data [_fbdc +_agfbe ]=^(_bbbd &_gafc .Data [_fbdc +_agfbe ]);
};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;};};if _dccb {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],^(_bbbd &_gafc .Data [_cgfa ]),_fggae );
_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;};};case PixNotPixSrcXorDst :if _adad {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{if _fecb ==_bgcb {_bbbd =_dfaf .Data [_afba ]<<_ffag ;if _gfcda {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_afba +1]>>_gcagc ,_cfcda );
};}else {_bbbd =_dfaf .Data [_afba ]>>_gcagc ;};_gafc .Data [_afaeg ]=_ggbgd (_gafc .Data [_afaeg ],^(_bbbd ^_gafc .Data [_afaeg ]),_dadc );_afaeg +=_gafc .RowStride ;_afba +=_dfaf .RowStride ;};};if _cfef {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{for _agfbe =0;
_agfbe < _ccdc ;_agfbe ++{_bbbd =_ggbgd (_dfaf .Data [_faage +_agfbe ]<<_ffag ,_dfaf .Data [_faage +_agfbe +1]>>_gcagc ,_cfcda );_gafc .Data [_fbdc +_agfbe ]=^(_bbbd ^_gafc .Data [_fbdc +_agfbe ]);};_fbdc +=_gafc .RowStride ;_faage +=_dfaf .RowStride ;
};};if _dccb {for _gfdce =0;_gfdce < _ccag ;_gfdce ++{_bbbd =_dfaf .Data [_addd ]<<_ffag ;if _gfaa {_bbbd =_ggbgd (_bbbd ,_dfaf .Data [_addd +1]>>_gcagc ,_cfcda );};_gafc .Data [_cgfa ]=_ggbgd (_gafc .Data [_cgfa ],^(_bbbd ^_gafc .Data [_cgfa ]),_fggae );
_cgfa +=_gafc .RowStride ;_addd +=_dfaf .RowStride ;};};default:_adf .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ebge );
return _g .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_eccf *ClassedPoints )Len ()int {return _eccf .IntSlice .Size ()};func (_gff *ClassedPoints )XAtIndex (i int )float32 {return (*_gff .Points )[_gff .IntSlice [i ]].X };func (_agca *Bitmap )setEightPartlyBytes (_feeg ,_bgg int ,_bfec uint64 )(_gccf error ){var (_cgge byte ;
_bcfe int ;);const _efac ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _bgf :=1;_bgf <=_bgg ;_bgf ++{_bcfe =64-_bgf *8;_cgge =byte (_bfec >>uint (_bcfe )&0xff);_adf .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_cgge ,_feeg ,_feeg +_bgf -1,_bgg ,_bcfe );
if _gccf =_agca .SetByte (_feeg +_bgf -1,_cgge );_gccf !=nil {return _g .Wrap (_gccf ,_efac ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_bfad :=_agca .RowStride *8-_agca .Width ;if _bfad ==0{return nil ;};_bcfe -=8;_cgge =byte (_bfec >>uint (_bcfe )&0xff)<<uint (_bfad );
if _gccf =_agca .SetByte (_feeg +_bgg ,_cgge );_gccf !=nil {return _g .Wrap (_gccf ,_efac ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_beac *ClassedPoints )xSortFunction ()func (_ccdf int ,_egedd int )bool {return func (_fafd ,_egef int )bool {return _beac .XAtIndex (_fafd )< _beac .XAtIndex (_egef )};
};func (_bgbc Points )Size ()int {return len (_bgbc )};func (_fabffb *Bitmaps )selectByIndicator (_adae *_b .NumSlice )(_adgf *Bitmaps ,_cbfda error ){const _degbd ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _fabffb ==nil {return nil ,_g .Error (_degbd ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _adae ==nil {return nil ,_g .Error (_degbd ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_fabffb .Values )==0{return _fabffb ,nil ;};if len (*_adae )!=len (_fabffb .Values ){return nil ,_g .Errorf (_degbd ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_adae ),len (_fabffb .Values ));
};var _bgfe ,_dgfa ,_feee int ;for _dgfa =0;_dgfa < len (*_adae );_dgfa ++{if _bgfe ,_cbfda =_adae .GetInt (_dgfa );_cbfda !=nil {return nil ,_g .Wrap (_cbfda ,_degbd ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _bgfe ==1{_feee ++;
};};if _feee ==len (_fabffb .Values ){return _fabffb ,nil ;};_adgf =&Bitmaps {};_bcge :=len (_fabffb .Values )==len (_fabffb .Boxes );for _dgfa =0;_dgfa < len (*_adae );_dgfa ++{if _bgfe =int ((*_adae )[_dgfa ]);_bgfe ==0{continue ;};_adgf .Values =append (_adgf .Values ,_fabffb .Values [_dgfa ]);
if _bcge {_adgf .Boxes =append (_adgf .Boxes ,_fabffb .Boxes [_dgfa ]);};};return _adgf ,nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _bce ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_dec :=_faa (width ,height );_dec .Data =data ;if _bcae :=((width *height )+7)>>3;len (data )< _bcae {return nil ,_g .Errorf (_bce ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_bcae );
};if _bef :=_dec .addPadBits ();_bef !=nil {return nil ,_g .Wrap (_bef ,_bce ,"");};return _dec ,nil ;};func (_ccef *Bitmap )setPadBits (_gfcd int ){_cdga :=8-_ccef .Width %8;if _cdga ==8{return ;};_ebfa :=_ccef .Width /8;_adb :=_ddgbf [_cdga ];if _gfcd ==0{_adb ^=_adb ;
};var _abcg int ;for _dac :=0;_dac < _ccef .Height ;_dac ++{_abcg =_dac *_ccef .RowStride +_ebfa ;if _gfcd ==0{_ccef .Data [_abcg ]&=_adb ;}else {_ccef .Data [_abcg ]|=_adb ;};};};func TstPSymbol (t *_e .T )*Bitmap {t .Helper ();_gbac :=New (5,8);_gd .NoError (t ,_gbac .SetPixel (0,0,1));
_gd .NoError (t ,_gbac .SetPixel (1,0,1));_gd .NoError (t ,_gbac .SetPixel (2,0,1));_gd .NoError (t ,_gbac .SetPixel (3,0,1));_gd .NoError (t ,_gbac .SetPixel (4,1,1));_gd .NoError (t ,_gbac .SetPixel (0,1,1));_gd .NoError (t ,_gbac .SetPixel (4,2,1));
_gd .NoError (t ,_gbac .SetPixel (0,2,1));_gd .NoError (t ,_gbac .SetPixel (4,3,1));_gd .NoError (t ,_gbac .SetPixel (0,3,1));_gd .NoError (t ,_gbac .SetPixel (0,4,1));_gd .NoError (t ,_gbac .SetPixel (1,4,1));_gd .NoError (t ,_gbac .SetPixel (2,4,1));
_gd .NoError (t ,_gbac .SetPixel (3,4,1));_gd .NoError (t ,_gbac .SetPixel (0,5,1));_gd .NoError (t ,_gbac .SetPixel (0,6,1));_gd .NoError (t ,_gbac .SetPixel (0,7,1));return _gbac ;};func _eg (_bf *Bitmap ,_ega ,_db int )(*Bitmap ,error ){const _dc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _bf ==nil {return nil ,_g .Error (_dc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ega <=0||_db <=0{return nil ,_g .Error (_dc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _ega ==_db {if _ega ==1{_eac ,_bae :=_cdec (nil ,_bf );if _bae !=nil {return nil ,_g .Wrap (_bae ,_dc ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _eac ,nil ;};if _ega ==2||_ega ==4||_ega ==8{_bd ,_fea :=_dff (_bf ,_ega );
if _fea !=nil {return nil ,_g .Wrap (_fea ,_dc ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _bd ,nil ;};};_fbf :=_ega *_bf .Width ;_aca :=_db *_bf .Height ;_gf :=New (_fbf ,_aca );_ead :=_gf .RowStride ;
var (_bfb ,_ebf ,_cfe ,_gcc ,_ce int ;_cfeb byte ;_cgd error ;);for _ebf =0;_ebf < _bf .Height ;_ebf ++{_bfb =_db *_ebf *_ead ;for _cfe =0;_cfe < _bf .Width ;_cfe ++{if _bad :=_bf .GetPixel (_cfe ,_ebf );_bad {_ce =_ega *_cfe ;for _gcc =0;_gcc < _ega ;
_gcc ++{_gf .setBit (_bfb *8+_ce +_gcc );};};};for _gcc =1;_gcc < _db ;_gcc ++{_dcg :=_bfb +_gcc *_ead ;for _gag :=0;_gag < _ead ;_gag ++{if _cfeb ,_cgd =_gf .GetByte (_bfb +_gag );_cgd !=nil {return nil ,_g .Wrapf (_cgd ,_dc ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_gcc );
};if _cgd =_gf .SetByte (_dcg +_gag ,_cfeb );_cgd !=nil {return nil ,_g .Wrap (_cgd ,_dc ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _gf ,nil ;};func (_geeb Points )YSorter ()func (_cgff ,_edee int )bool {return func (_gfgc ,_gcfbd int )bool {return _geeb [_gfgc ].Y < _geeb [_gcfbd ].Y };
};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_df .Rectangle ;};func (_fcgcc *Boxes )Get (i int )(*_df .Rectangle ,error ){const _eaee ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _fcgcc ==nil {return nil ,_g .Error (_eaee ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_fcgcc )-1{return nil ,_g .Errorf (_eaee ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_fcgcc )[i ],nil ;};func _eafg (_fgbee ,_efeb *Bitmap ,_gdeff ,_feega int )(_ccfe error ){const _feb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_bebc ,_abbg ,_edce ,_deaaf int ;_gfae ,_decf ,_eaggc ,_fcee ,_abdfc ,_aada ,_fbadd ,_cdbfg byte ;);for _bebc =0;_bebc < _gdeff ;_bebc ++{_edce =_bebc *_fgbee .RowStride ;_deaaf =_bebc *_efeb .RowStride ;for _abbg =0;_abbg < _feega ;_abbg ++{if _gfae ,_ccfe =_fgbee .GetByte (_edce +_abbg );
_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _decf ,_ccfe =_efeb .GetByte (_deaaf +_abbg );_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _bebc > 0{if _eaggc ,_ccfe =_fgbee .GetByte (_edce -_fgbee .RowStride +_abbg );_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_gfae |=_eaggc |(_eaggc <<1)|(_eaggc >>1);if _abbg > 0{if _cdbfg ,_ccfe =_fgbee .GetByte (_edce -_fgbee .RowStride +_abbg -1);
_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_gfae |=_cdbfg <<7;};if _abbg < _feega -1{if _cdbfg ,_ccfe =_fgbee .GetByte (_edce -_fgbee .RowStride +_abbg +1);
_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_gfae |=_cdbfg >>7;};};if _abbg > 0{if _fcee ,_ccfe =_fgbee .GetByte (_edce +_abbg -1);_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u006a\u0020\u003e \u0030");
};_gfae |=_fcee <<7;};_gfae &=_decf ;if _gfae ==0||^_gfae ==0{if _ccfe =_fgbee .SetByte (_edce +_abbg ,_gfae );_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_fbadd =_gfae ;
_gfae =(_gfae |(_gfae >>1)|(_gfae <<1))&_decf ;if (_gfae ^_fbadd )==0{if _ccfe =_fgbee .SetByte (_edce +_abbg ,_gfae );_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _bebc =_gdeff -1;_bebc >=0;_bebc --{_edce =_bebc *_fgbee .RowStride ;_deaaf =_bebc *_efeb .RowStride ;for _abbg =_feega -1;_abbg >=0;_abbg --{if _gfae ,_ccfe =_fgbee .GetByte (_edce +_abbg );_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _decf ,_ccfe =_efeb .GetByte (_deaaf +_abbg );_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bebc < _gdeff -1{if _abdfc ,_ccfe =_fgbee .GetByte (_edce +_fgbee .RowStride +_abbg );
_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_gfae |=_abdfc |(_abdfc <<1)|_abdfc >>1;if _abbg > 0{if _cdbfg ,_ccfe =_fgbee .GetByte (_edce +_fgbee .RowStride +_abbg -1);
_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_gfae |=_cdbfg <<7;};if _abbg < _feega -1{if _cdbfg ,_ccfe =_fgbee .GetByte (_edce +_fgbee .RowStride +_abbg +1);
_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_gfae |=_cdbfg >>7;};};if _abbg < _feega -1{if _aada ,_ccfe =_fgbee .GetByte (_edce +_abbg +1);_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_gfae |=_aada >>7;};_gfae &=_decf ;if _gfae ==0||(^_gfae )==0{if _ccfe =_fgbee .SetByte (_edce +_abbg ,_gfae );_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_fbadd =_gfae ;
_gfae =(_gfae |(_gfae >>1)|(_gfae <<1))&_decf ;if (_gfae ^_fbadd )==0{if _ccfe =_fgbee .SetByte (_edce +_abbg ,_gfae );_ccfe !=nil {return _g .Wrap (_ccfe ,_feb ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _bacb ,_daaf int ;_cea :=src .RowStride -1;if x < 0{_daaf =-x ;x =0;}else if x +src .Width > dst .Width {_cea -=src .Width +x -dst .Width ;
};if y < 0{_bacb =-y ;y =0;_daaf +=src .RowStride ;_cea +=src .RowStride ;}else if y +src .Height > dst .Height {_bacb =src .Height +y -dst .Height ;};var (_afbf int ;_dfdd error ;);_bbb :=x &0x07;_eaac :=8-_bbb ;_afabb :=src .Width &0x07;_agdd :=_eaac -_afabb ;
_eadf :=_eaac &0x07!=0;_fbgd :=src .Width <=((_cea -_daaf )<<3)+_eaac ;_dgcb :=dst .GetByteIndex (x ,y );_afca :=_bacb +dst .Height ;if src .Height > _afca {_afbf =_afca ;}else {_afbf =src .Height ;};switch {case !_eadf :_dfdd =_bdbg (src ,dst ,_bacb ,_afbf ,_dgcb ,_daaf ,_cea ,op );
case _fbgd :_dfdd =_ggfd (src ,dst ,_bacb ,_afbf ,_dgcb ,_daaf ,_cea ,_agdd ,_bbb ,_eaac ,op );default:_dfdd =_cabb (src ,dst ,_bacb ,_afbf ,_dgcb ,_daaf ,_cea ,_agdd ,_bbb ,_eaac ,op ,_afabb );};return _dfdd ;};func _fdaeb (_cada *Bitmap ,_bdad *_b .Stack ,_faeg ,_dcggf ,_ecbf int )(_adgec *_df .Rectangle ,_efba error ){const _gacc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _cada ==nil {return nil ,_g .Error (_gacc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bdad ==nil {return nil ,_g .Error (_gacc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _ecbf {case 4:if _adgec ,_efba =_ceeb (_cada ,_bdad ,_faeg ,_dcggf );_efba !=nil {return nil ,_g .Wrap (_efba ,_gacc ,"");};return _adgec ,nil ;case 8:if _adgec ,_efba =_gbeec (_cada ,_bdad ,_faeg ,_dcggf );_efba !=nil {return nil ,_g .Wrap (_efba ,_gacc ,"");
};return _adgec ,nil ;default:return nil ,_g .Errorf (_gacc ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_ecbf );
};};func (_fgfc *Bitmap )InverseData (){_fgfc .inverseData ()};func (_dagc *Bitmaps )selectByIndexes (_adde []int )(*Bitmaps ,error ){_becf :=&Bitmaps {};for _ ,_caeb :=range _adde {_cefb ,_fdbd :=_dagc .GetBitmap (_caeb );if _fdbd !=nil {return nil ,_g .Wrap (_fdbd ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_becf .AddBitmap (_cefb );};return _becf ,nil ;};func (_ecg *Bitmap )nextOnPixel (_fgca ,_aagd int )(_dedb _df .Point ,_dbb bool ,_gdg error ){const _fggf ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_dedb ,_dbb ,_gdg =_ecg .nextOnPixelLow (_ecg .Width ,_ecg .Height ,_ecg .RowStride ,_fgca ,_aagd );
if _gdg !=nil {return _dedb ,false ,_g .Wrap (_gdg ,_fggf ,"");};return _dedb ,_dbb ,nil ;};func (_aacgf *Points )Add (pt *Points )error {const _efga ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _aacgf ==nil {return _g .Error (_efga ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _g .Error (_efga ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_aacgf =append (*_aacgf ,*pt ...);return nil ;};func _fc (_aa ,_dd *Bitmap )(_ca error ){const _bc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_af :=_dd .RowStride ;_ef :=_aa .RowStride ;var (_ag byte ;_fcb uint16 ;_ee ,_da ,_afb ,_ga ,_cg int ;);for _afb =0;_afb < _dd .Height ;_afb ++{_ee =_afb *_af ;_da =2*_afb *_ef ;for _ga =0;_ga < _af ;_ga ++{_ag =_dd .Data [_ee +_ga ];_fcb =_dea [_ag ];
_cg =_da +_ga *2;if _aa .RowStride !=_dd .RowStride *2&&(_ga +1)*2> _aa .RowStride {_ca =_aa .SetByte (_cg ,byte (_fcb >>8));}else {_ca =_aa .setTwoBytes (_cg ,_fcb );};if _ca !=nil {return _g .Wrap (_ca ,_bc ,"");};};for _ga =0;_ga < _ef ;_ga ++{_cg =_da +_ef +_ga ;
_ag =_aa .Data [_da +_ga ];if _ca =_aa .SetByte (_cg ,_ag );_ca !=nil {return _g .Wrapf (_ca ,_bc ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_da +_ga ,_da +_ef +_ga );
};};};return nil ;};func _dgda (_deff int )int {if _deff < 0{return -_deff ;};return _deff ;};func (_agd *Bitmap )ClipRectangle (box *_df .Rectangle )(_dage *Bitmap ,_cdb *_df .Rectangle ,_dbfd error ){const _bdd ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_g .Error (_bdd ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_beb ,_bfa :=_agd .Width ,_agd .Height ;_ccb :=_df .Rect (0,0,_beb ,_bfa );if !box .Overlaps (_ccb ){return nil ,nil ,_g .Error (_bdd ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_baf :=box .Intersect (_ccb );_fcfb ,_egf :=_baf .Min .X ,_baf .Min .Y ;_ggc ,_deg :=_baf .Dx (),_baf .Dy ();_dage =New (_ggc ,_deg );_dage .Text =_agd .Text ;if _dbfd =_dage .RasterOperation (0,0,_ggc ,_deg ,PixSrc ,_agd ,_fcfb ,_egf );_dbfd !=nil {return nil ,nil ,_g .Wrap (_dbfd ,_bdd ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_cdb =&_baf ;return _dage ,_cdb ,nil ;};func (_gcca *Bitmap )GetChocolateData ()[]byte {if _gcca .Color ==Vanilla {_gcca .inverseData ();};return _gcca .Data ;};func (_gadd *Bitmaps )WidthSorter ()func (_bfdf ,_dfcac int )bool {return func (_agbg ,_defa int )bool {return _gadd .Values [_agbg ].Width < _gadd .Values [_defa ].Width };
};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _bda ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_feab :=_faa (width ,height );_feab .Data =data ;if len (data )< height *_feab .RowStride {return nil ,_g .Errorf (_bda ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_feab .RowStride );
};return _feab ,nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_fegb *byWidth )Len ()int {return len (_fegb .Values )};func (_ggbb *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _dfgf ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_faaa ,_gbed :=_ggbb .selectByIndexes (idx );if _gbed !=nil {return nil ,_g .Wrap (_gbed ,_dfgf ,"");};return _faaa ,nil ;};func (_dbfcd MorphProcess )getWidthHeight ()(_cgf ,_dabb int ){return _dbfcd .Arguments [0],_dbfcd .Arguments [1];};func (_gcee *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_gde bool ,_ageb error ){const _aacg ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_dedg ();};_dfag :=_gcee .Width >>3;_dfg :=_gcee .Width &7;_gceg :=byte (0xff<<uint (8-_dfg ));var (_dca ,_bfe ,_ffg ,_gbcg int ;_cbc byte ;);for _dca =0;_dca < _gcee .Height ;_dca ++{_ffg =_gcee .RowStride *_dca ;for _bfe =0;_bfe < _dfag ;
_bfe ++{_cbc ,_ageb =_gcee .GetByte (_ffg +_bfe );if _ageb !=nil {return false ,_g .Wrap (_ageb ,_aacg ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_gbcg +=tab8 [_cbc ];};if _dfg !=0{_cbc ,_ageb =_gcee .GetByte (_ffg +_bfe );if _ageb !=nil {return false ,_g .Wrap (_ageb ,_aacg ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_cbc &=_gceg ;_gbcg +=tab8 [_cbc ];};if _gbcg > thresh {return true ,nil ;};};return _gde ,nil ;};type ClassedPoints struct{*Points ;_b .IntSlice ;_fgga func (_faaec ,_afff int )bool ;};func _egaa (_eegf ,_cbd *Bitmap ,_abg int ,_cde []byte ,_dfc int )(_bca error ){const _ede ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_dae ,_egg ,_bfg ,_fba ,_badg ,_dbe ,_gba ,_eaa int ;_baed ,_geg uint32 ;_cfebg ,_daa byte ;_dgf uint16 ;);_feg :=make ([]byte ,4);_cffd :=make ([]byte ,4);for _bfg =0;_bfg < _eegf .Height -1;_bfg ,_fba =_bfg +2,_fba +1{_dae =_bfg *_eegf .RowStride ;
_egg =_fba *_cbd .RowStride ;for _badg ,_dbe =0,0;_badg < _dfc ;_badg ,_dbe =_badg +4,_dbe +1{for _gba =0;_gba < 4;_gba ++{_eaa =_dae +_badg +_gba ;if _eaa <=len (_eegf .Data )-1&&_eaa < _dae +_eegf .RowStride {_feg [_gba ]=_eegf .Data [_eaa ];}else {_feg [_gba ]=0x00;
};_eaa =_dae +_eegf .RowStride +_badg +_gba ;if _eaa <=len (_eegf .Data )-1&&_eaa < _dae +(2*_eegf .RowStride ){_cffd [_gba ]=_eegf .Data [_eaa ];}else {_cffd [_gba ]=0x00;};};_baed =_fa .BigEndian .Uint32 (_feg );_geg =_fa .BigEndian .Uint32 (_cffd );
_geg |=_baed ;_geg |=_geg <<1;_geg &=0xaaaaaaaa;_baed =_geg |(_geg <<7);_cfebg =byte (_baed >>24);_daa =byte ((_baed >>8)&0xff);_eaa =_egg +_dbe ;if _eaa +1==len (_cbd .Data )-1||_eaa +1>=_egg +_cbd .RowStride {_cbd .Data [_eaa ]=_cde [_cfebg ];}else {_dgf =(uint16 (_cde [_cfebg ])<<8)|uint16 (_cde [_daa ]);
if _bca =_cbd .setTwoBytes (_eaa ,_dgf );_bca !=nil {return _g .Wrapf (_bca ,_ede ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eaa );
};_dbe ++;};};};return nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _bffc ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_babc ,_geae :=p1 .Width ,p1 .Height ;_bdf ,_ccfg :=p3 .Width ,p3 .Height ;
if _b .Abs (_babc -_bdf )> maxDiffW {return false ,nil ;};if _b .Abs (_geae -_ccfg )> maxDiffH {return false ,nil ;};_bcegd :=int (delX +_b .Sign (delX )*0.5);_cfaf :=int (delY +_b .Sign (delY )*0.5);var _dgbce error ;_dbeea :=p1 .CreateTemplate ();if _dgbce =_dbeea .RasterOperation (0,0,_babc ,_geae ,PixSrc ,p1 ,0,0);
_dgbce !=nil {return false ,_g .Wrap (_dgbce ,_bffc ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dgbce =_dbeea .RasterOperation (_bcegd ,_cfaf ,_babc ,_geae ,PixNotSrcAndDst ,p4 ,0,0);_dgbce !=nil {return false ,_g .Wrap (_dgbce ,_bffc ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _dbeea .Zero (){return false ,nil ;};if _dgbce =_dbeea .RasterOperation (_bcegd ,_cfaf ,_bdf ,_ccfg ,PixSrc ,p3 ,0,0);_dgbce !=nil {return false ,_g .Wrap (_dgbce ,_bffc ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dgbce =_dbeea .RasterOperation (0,0,_bdf ,_ccfg ,PixNotSrcAndDst ,p2 ,0,0);
_dgbce !=nil {return false ,_g .Wrap (_dgbce ,_bffc ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _dbeea .Zero (),nil ;};func (_eecc *byHeight )Less (i ,j int )bool {return _eecc .Values [i ].Height < _eecc .Values [j ].Height };func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _agcd (oldByte ,newByte ,op );
};func (_eaca *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _agecff ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _edgb :=_eaca .validateIntSlice ();_edgb !=nil {return nil ,_g .Wrap (_edgb ,_agecff ,"");
};if _eaca .IntSlice .Size ()==0{return nil ,_g .Error (_agecff ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_eaca .SortByY ();var (_aadg []*ClassedPoints ;_dacb int ;);_fagf :=-1;var _aaf *ClassedPoints ;
for _cgae :=0;_cgae < len (_eaca .IntSlice );_cgae ++{_dacb =int (_eaca .YAtIndex (_cgae ));if _dacb !=_fagf {_aaf =&ClassedPoints {Points :_eaca .Points };_fagf =_dacb ;_aadg =append (_aadg ,_aaf );};_aaf .IntSlice =append (_aaf .IntSlice ,_eaca .IntSlice [_cgae ]);
};for _ ,_cegg :=range _aadg {_cegg .SortByX ();};return _aadg ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_decg float64 ,_bedd error ){const _cbge ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_g .Error (_cbge ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_g .Error (_cbge ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_g .Error (_cbge ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_ebbg ,_efcd :=bm1 .Width ,bm1 .Height ;_fdfb ,_efbc :=bm2 .Width ,bm2 .Height ;
_cdfb :=_dgda (_ebbg -_fdfb );if _cdfb > maxDiffW {return 0,nil ;};_ddfd :=_dgda (_efcd -_efbc );if _ddfd > maxDiffH {return 0,nil ;};var _dede ,_bcfed int ;if delX >=0{_dede =int (delX +0.5);}else {_dede =int (delX -0.5);};if delY >=0{_bcfed =int (delY +0.5);
}else {_bcfed =int (delY -0.5);};_bded :=_dcb (_bcfed ,0);_gagf :=_defc (_efbc +_bcfed ,_efcd );_dege :=bm1 .RowStride *_bded ;_babe :=bm2 .RowStride *(_bded -_bcfed );_agaafb :=_dcb (_dede ,0);_abcgb :=_defc (_fdfb +_dede ,_ebbg );_ffbc :=bm2 .RowStride ;
var _daea ,_bba int ;if _dede >=8{_daea =_dede >>3;_dege +=_daea ;_agaafb -=_daea <<3;_abcgb -=_daea <<3;_dede &=7;}else if _dede <=-8{_bba =-((_dede +7)>>3);_babe +=_bba ;_ffbc -=_bba ;_dede +=_bba <<3;};if _agaafb >=_abcgb ||_bded >=_gagf {return 0,nil ;
};_ddea :=(_abcgb +7)>>3;var (_gfge ,_begd ,_fcdb byte ;_fddd ,_feec ,_aeec int ;);switch {case _dede ==0:for _aeec =_bded ;_aeec < _gagf ;_aeec ,_dege ,_babe =_aeec +1,_dege +bm1 .RowStride ,_babe +bm2 .RowStride {for _feec =0;_feec < _ddea ;_feec ++{_fcdb =bm1 .Data [_dege +_feec ]&bm2 .Data [_babe +_feec ];
_fddd +=tab [_fcdb ];};};case _dede > 0:if _ffbc < _ddea {for _aeec =_bded ;_aeec < _gagf ;_aeec ,_dege ,_babe =_aeec +1,_dege +bm1 .RowStride ,_babe +bm2 .RowStride {_gfge ,_begd =bm1 .Data [_dege ],bm2 .Data [_babe ]>>uint (_dede );_fcdb =_gfge &_begd ;
_fddd +=tab [_fcdb ];for _feec =1;_feec < _ffbc ;_feec ++{_gfge ,_begd =bm1 .Data [_dege +_feec ],(bm2 .Data [_babe +_feec ]>>uint (_dede ))|(bm2 .Data [_babe +_feec -1]<<uint (8-_dede ));_fcdb =_gfge &_begd ;_fddd +=tab [_fcdb ];};_gfge =bm1 .Data [_dege +_feec ];
_begd =bm2 .Data [_babe +_feec -1]<<uint (8-_dede );_fcdb =_gfge &_begd ;_fddd +=tab [_fcdb ];};}else {for _aeec =_bded ;_aeec < _gagf ;_aeec ,_dege ,_babe =_aeec +1,_dege +bm1 .RowStride ,_babe +bm2 .RowStride {_gfge ,_begd =bm1 .Data [_dege ],bm2 .Data [_babe ]>>uint (_dede );
_fcdb =_gfge &_begd ;_fddd +=tab [_fcdb ];for _feec =1;_feec < _ddea ;_feec ++{_gfge =bm1 .Data [_dege +_feec ];_begd =(bm2 .Data [_babe +_feec ]>>uint (_dede ))|(bm2 .Data [_babe +_feec -1]<<uint (8-_dede ));_fcdb =_gfge &_begd ;_fddd +=tab [_fcdb ];};
};};default:if _ddea < _ffbc {for _aeec =_bded ;_aeec < _gagf ;_aeec ,_dege ,_babe =_aeec +1,_dege +bm1 .RowStride ,_babe +bm2 .RowStride {for _feec =0;_feec < _ddea ;_feec ++{_gfge =bm1 .Data [_dege +_feec ];_begd =bm2 .Data [_babe +_feec ]<<uint (-_dede );
_begd |=bm2 .Data [_babe +_feec +1]>>uint (8+_dede );_fcdb =_gfge &_begd ;_fddd +=tab [_fcdb ];};};}else {for _aeec =_bded ;_aeec < _gagf ;_aeec ,_dege ,_babe =_aeec +1,_dege +bm1 .RowStride ,_babe +bm2 .RowStride {for _feec =0;_feec < _ddea -1;_feec ++{_gfge =bm1 .Data [_dege +_feec ];
_begd =bm2 .Data [_babe +_feec ]<<uint (-_dede );_begd |=bm2 .Data [_babe +_feec +1]>>uint (8+_dede );_fcdb =_gfge &_begd ;_fddd +=tab [_fcdb ];};_gfge =bm1 .Data [_dege +_feec ];_begd =bm2 .Data [_babe +_feec ]<<uint (-_dede );_fcdb =_gfge &_begd ;_fddd +=tab [_fcdb ];
};};};_decg =float64 (_fddd )*float64 (_fddd )/(float64 (area1 )*float64 (area2 ));return _decg ,nil ;};func (_bfed *Bitmaps )SortByWidth (){_cgbdd :=(*byWidth )(_bfed );_a .Sort (_cgbdd )};func _gcd (_adeg ,_eae *Bitmap ,_gcde int ,_ggb []byte ,_fbac int )(_deb error ){const _ccac ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_ceb ,_adg ,_dgb ,_efc ,_bbe ,_bff ,_gdd ,_bgd int ;_cbdg ,_gcf uint32 ;_dcge ,_adgd byte ;_fdg uint16 ;);_gdc :=make ([]byte ,4);_dgd :=make ([]byte ,4);for _dgb =0;_dgb < _adeg .Height -1;_dgb ,_efc =_dgb +2,_efc +1{_ceb =_dgb *_adeg .RowStride ;
_adg =_efc *_eae .RowStride ;for _bbe ,_bff =0,0;_bbe < _fbac ;_bbe ,_bff =_bbe +4,_bff +1{for _gdd =0;_gdd < 4;_gdd ++{_bgd =_ceb +_bbe +_gdd ;if _bgd <=len (_adeg .Data )-1&&_bgd < _ceb +_adeg .RowStride {_gdc [_gdd ]=_adeg .Data [_bgd ];}else {_gdc [_gdd ]=0x00;
};_bgd =_ceb +_adeg .RowStride +_bbe +_gdd ;if _bgd <=len (_adeg .Data )-1&&_bgd < _ceb +(2*_adeg .RowStride ){_dgd [_gdd ]=_adeg .Data [_bgd ];}else {_dgd [_gdd ]=0x00;};};_cbdg =_fa .BigEndian .Uint32 (_gdc );_gcf =_fa .BigEndian .Uint32 (_dgd );_gcf &=_cbdg ;
_gcf &=_gcf <<1;_gcf &=0xaaaaaaaa;_cbdg =_gcf |(_gcf <<7);_dcge =byte (_cbdg >>24);_adgd =byte ((_cbdg >>8)&0xff);_bgd =_adg +_bff ;if _bgd +1==len (_eae .Data )-1||_bgd +1>=_adg +_eae .RowStride {_eae .Data [_bgd ]=_ggb [_dcge ];if _deb =_eae .SetByte (_bgd ,_ggb [_dcge ]);
_deb !=nil {return _g .Wrapf (_deb ,_ccac ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bgd );};}else {_fdg =(uint16 (_ggb [_dcge ])<<8)|uint16 (_ggb [_adgd ]);if _deb =_eae .setTwoBytes (_bgd ,_fdg );_deb !=nil {return _g .Wrapf (_deb ,_ccac ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bgd );
};_bff ++;};};};return nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func _dde (_ddg ,_fg *Bitmap )(_ff error ){const _ac ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_ddc :=_fg .RowStride ;_fbc :=_ddg .RowStride ;var _dg ,_gef ,_ab ,_dda ,_ffc int ;for _ab =0;_ab < _fg .Height ;_ab ++{_dg =_ab *_ddc ;_gef =8*_ab *_fbc ;for _dda =0;_dda < _ddc ;_dda ++{if _ff =_ddg .setEightBytes (_gef +_dda *8,_acac [_fg .Data [_dg +_dda ]]);
_ff !=nil {return _g .Wrap (_ff ,_ac ,"");};};for _ffc =1;_ffc < 8;_ffc ++{for _dda =0;_dda < _fbc ;_dda ++{if _ff =_ddg .SetByte (_gef +_ffc *_fbc +_dda ,_ddg .Data [_gef +_dda ]);_ff !=nil {return _g .Wrap (_ff ,_ac ,"");};};};};return nil ;};const (_bgcb shift =iota ;
_gffd ;);func (_ebbb *ClassedPoints )Swap (i ,j int ){_ebbb .IntSlice [i ],_ebbb .IntSlice [j ]=_ebbb .IntSlice [j ],_ebbb .IntSlice [i ];};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;
XResolution ,YResolution int ;};func (_fabff *ClassedPoints )Less (i ,j int )bool {return _fabff ._fgga (i ,j )};func _gfbb (_acbc *Bitmap )(_eggd *Bitmap ,_fabf int ,_eege error ){const _abdf ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _acbc ==nil {return nil ,0,_g .Errorf (_abdf ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _ebg ,_efee *Bitmap ;if _ebg ,_eege =_cdec (nil ,_acbc );_eege !=nil {return nil ,0,_g .Wrap (_eege ,_abdf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_aeb [13]int ;_bgec ,_dcab int ;);_bbfa :=12;_bgcg :=_b .NewNumSlice (_bbfa +1);_fegg :=_b .NewNumSlice (_bbfa +1);var _adba *Boxes ;for _adag :=0;_adag <=_bbfa ;_adag ++{if _adag ==0{if _efee ,_eege =_cdec (nil ,_ebg );_eege !=nil {return nil ,0,_g .Wrap (_eege ,_abdf ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _efee ,_eege =_ceca (_ebg ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_eege !=nil {return nil ,0,_g .Wrap (_eege ,_abdf ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _adba ,_eege =_efee .connComponentsBB (4);
_eege !=nil {return nil ,0,_g .Wrap (_eege ,_abdf ,"");};_aeb [_adag ]=len (*_adba );_bgcg .AddInt (_aeb [_adag ]);switch _adag {case 0:_bgec =_aeb [0];default:_dcab =_aeb [_adag -1]-_aeb [_adag ];_fegg .AddInt (_dcab );};_ebg =_efee ;};_dbfc :=true ;_ggbgg :=2;
var _befe ,_agag int ;for _bcaec :=1;_bcaec < len (*_fegg );_bcaec ++{if _befe ,_eege =_bgcg .GetInt (_bcaec );_eege !=nil {return nil ,0,_g .Wrap (_eege ,_abdf ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _dbfc &&_befe < int (0.3*float32 (_bgec )){_ggbgg =_bcaec +1;_dbfc =false ;};if _dcab ,_eege =_fegg .GetInt (_bcaec );_eege !=nil {return nil ,0,_g .Wrap (_eege ,_abdf ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _dcab > _agag {_agag =_dcab ;};};_efcb :=_acbc .XResolution ;if _efcb ==0{_efcb =150;};if _efcb > 110{_ggbgg ++;};if _ggbgg < 2{_adf .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_ggbgg =2;};_fabf =_ggbgg +1;if _eggd ,_eege =_cebe (nil ,_acbc ,_ggbgg +1,1);_eege !=nil {return nil ,0,_g .Wrap (_eege ,_abdf ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _eggd ,_fabf ,nil ;
};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);type Color int ;func (_fbeg *Bitmaps )SortByHeight (){_cccd :=(*byHeight )(_fbeg );_a .Sort (_cccd )};func _dcb (_gcga ,_bgbf int )int {if _gcga > _bgbf {return _gcga ;
};return _bgbf ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _fef (d ,s ,sel )};type SizeSelection int ;func (_bcfd *Bitmap )resizeImageData (_abdg *Bitmap )error {if _abdg ==nil {return _g .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bcfd .SizesEqual (_abdg ){return nil ;};_bcfd .Data =make ([]byte ,len (_abdg .Data ));_bcfd .Width =_abdg .Width ;_bcfd .Height =_abdg .Height ;_bcfd .RowStride =_abdg .RowStride ;return nil ;};func _ffe ()[]int {_dbca :=make ([]int ,256);_dbca [0]=0;
_dbca [1]=7;var _cabab int ;for _cabab =2;_cabab < 4;_cabab ++{_dbca [_cabab ]=_dbca [_cabab -2]+6;};for _cabab =4;_cabab < 8;_cabab ++{_dbca [_cabab ]=_dbca [_cabab -4]+5;};for _cabab =8;_cabab < 16;_cabab ++{_dbca [_cabab ]=_dbca [_cabab -8]+4;};for _cabab =16;
_cabab < 32;_cabab ++{_dbca [_cabab ]=_dbca [_cabab -16]+3;};for _cabab =32;_cabab < 64;_cabab ++{_dbca [_cabab ]=_dbca [_cabab -32]+2;};for _cabab =64;_cabab < 128;_cabab ++{_dbca [_cabab ]=_dbca [_cabab -64]+1;};for _cabab =128;_cabab < 256;_cabab ++{_dbca [_cabab ]=_dbca [_cabab -128];
};return _dbca ;};func (_cbbc *Points )AddPoint (x ,y float32 ){*_cbbc =append (*_cbbc ,Point {x ,y })};func (_dccbg *Bitmaps )AddBox (box *_df .Rectangle ){_dccbg .Boxes =append (_dccbg .Boxes ,box )};func (_aagb *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _acbb ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_aagb .Values )==0{return nil ,_g .Error (_acbb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_ddddd :=&BitmapsArray {};_aagb .SortByWidth ();_ebgg :=-1;_bbdbca :=-1;for _ebde :=0;_ebde < len (_aagb .Values );
_ebde ++{_cabc :=_aagb .Values [_ebde ].Width ;if _cabc > _ebgg {_ebgg =_cabc ;_bbdbca ++;_ddddd .Values =append (_ddddd .Values ,&Bitmaps {});};_ddddd .Values [_bbdbca ].AddBitmap (_aagb .Values [_ebde ]);};return _ddddd ,nil ;};func TstFrameBitmap ()*Bitmap {return _cefae .Copy ()};
func _bdbg (_cccc ,_cab *Bitmap ,_afcf ,_cbcf ,_fcag ,_agg ,_bdde int ,_cbddd CombinationOperator )error {var _eceb int ;_gedd :=func (){_eceb ++;_fcag +=_cab .RowStride ;_agg +=_cccc .RowStride ;_bdde +=_cccc .RowStride };for _eceb =_afcf ;_eceb < _cbcf ;
_gedd (){_eggb :=_fcag ;for _baeg :=_agg ;_baeg <=_bdde ;_baeg ++{_ada ,_debb :=_cab .GetByte (_eggb );if _debb !=nil {return _debb ;};_ccd ,_debb :=_cccc .GetByte (_baeg );if _debb !=nil {return _debb ;};if _debb =_cab .SetByte (_eggb ,_agcd (_ada ,_ccd ,_cbddd ));
_debb !=nil {return _debb ;};_eggb ++;};};return nil ;};func _eead (_bgff uint ,_agdf byte )byte {return _agdf >>_bgff <<_bgff };func _cbg ()(_efa [256]uint16 ){for _abe :=0;_abe < 256;_abe ++{if _abe &0x01!=0{_efa [_abe ]|=0x3;};if _abe &0x02!=0{_efa [_abe ]|=0xc;
};if _abe &0x04!=0{_efa [_abe ]|=0x30;};if _abe &0x08!=0{_efa [_abe ]|=0xc0;};if _abe &0x10!=0{_efa [_abe ]|=0x300;};if _abe &0x20!=0{_efa [_abe ]|=0xc00;};if _abe &0x40!=0{_efa [_abe ]|=0x3000;};if _abe &0x80!=0{_efa [_abe ]|=0xc000;};};return _efa ;};
func (_fde *Bitmap )CreateTemplate ()*Bitmap {return _fde .createTemplate ()};var MorphBC BoundaryCondition ;func (_afge *Bitmaps )Size ()int {return len (_afge .Values )};func (_gdgba Points )GetIntX (i int )(int ,error ){if i >=len (_gdgba ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_gdgba [i ].X ),nil ;};func (_ecdd *BitmapsArray )GetBox (i int )(*_df .Rectangle ,error ){const _fdgfd ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _ecdd ==nil {return nil ,_g .Error (_fdgfd ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_ecdd .Boxes )-1{return nil ,_g .Errorf (_fdgfd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ecdd .Boxes [i ],nil ;};func _fgb ()(_ade [256]uint64 ){for _ged :=0;
_ged < 256;_ged ++{if _ged &0x01!=0{_ade [_ged ]|=0xff;};if _ged &0x02!=0{_ade [_ged ]|=0xff00;};if _ged &0x04!=0{_ade [_ged ]|=0xff0000;};if _ged &0x08!=0{_ade [_ged ]|=0xff000000;};if _ged &0x10!=0{_ade [_ged ]|=0xff00000000;};if _ged &0x20!=0{_ade [_ged ]|=0xff0000000000;
};if _ged &0x40!=0{_ade [_ged ]|=0xff000000000000;};if _ged &0x80!=0{_ade [_ged ]|=0xff00000000000000;};};return _ade ;};func ClipBoxToRectangle (box *_df .Rectangle ,wi ,hi int )(_egfa *_df .Rectangle ,_badb error ){const _ggcf ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_g .Error (_ggcf ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_g .Error (_ggcf ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_ccg :=*box ;_egfa =&_ccg ;if _egfa .Min .X < 0{_egfa .Max .X +=_egfa .Min .X ;_egfa .Min .X =0;};if _egfa .Min .Y < 0{_egfa .Max .Y +=_egfa .Min .Y ;_egfa .Min .Y =0;};if _egfa .Max .X > wi {_egfa .Max .X =wi ;};if _egfa .Max .Y > hi {_egfa .Max .Y =hi ;
};return _egfa ,nil ;};var _dcfg =[5]int {1,2,3,0,4};func (_efae *Bitmap )connComponentsBB (_edc int )(_fcaga *Boxes ,_afec error ){const _aaa ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _edc !=4&&_edc !=8{return nil ,_g .Error (_aaa ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _efae .Zero (){return &Boxes {},nil ;
};_efae .setPadBits (0);_fdea ,_afec :=_cdec (nil ,_efae );if _afec !=nil {return nil ,_g .Wrap (_afec ,_aaa ,"\u0062\u006d\u0031");};_fafc :=&_b .Stack {};_fafc .Aux =&_b .Stack {};_fcaga =&Boxes {};var (_geaa ,_dfceg int ;_dbff _df .Point ;_beea bool ;
_dfcd *_df .Rectangle ;);for {if _dbff ,_beea ,_afec =_fdea .nextOnPixel (_dfceg ,_geaa );_afec !=nil {return nil ,_g .Wrap (_afec ,_aaa ,"");};if !_beea {break ;};if _dfcd ,_afec =_fdaeb (_fdea ,_fafc ,_dbff .X ,_dbff .Y ,_edc );_afec !=nil {return nil ,_g .Wrap (_afec ,_aaa ,"");
};if _afec =_fcaga .Add (_dfcd );_afec !=nil {return nil ,_g .Wrap (_afec ,_aaa ,"");};_dfceg =_dbff .X ;_geaa =_dbff .Y ;};return _fcaga ,nil ;};func (_dgaa MorphProcess )verify (_abdee int ,_bbfac ,_bbeb *int )error {const _adcb ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _dgaa .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_dgaa .Arguments )!=2{return _g .Error (_adcb ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_ccea ,_acad :=_dgaa .getWidthHeight ();if _ccea <=0||_acad <=0{return _g .Error (_adcb ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_efdc :=len (_dgaa .Arguments );*_bbfac +=_efdc ;if _efdc < 1||_efdc > 4{return _g .Error (_adcb ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _fcfe :=0;_fcfe < _efdc ;_fcfe ++{if _dgaa .Arguments [_fcfe ]< 1||_dgaa .Arguments [_fcfe ]> 4{return _g .Error (_adcb ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_dgaa .Arguments )==0{return _g .Error (_adcb ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_aef :=_dgaa .Arguments [0];if _aef !=2&&_aef !=4&&_aef !=8{return _g .Error (_adcb ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_bbfac -=_dcfg [_aef /4];case MopAddBorder :if len (_dgaa .Arguments )==0{return _g .Error (_adcb ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cafg :=_dgaa .Arguments [0];if _abdee > 0{return _g .Error (_adcb ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _cafg < 1{return _g .Error (_adcb ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_bbeb =_cafg ;};return nil ;};func _aeff (_abcd ,_ddfcb int ,_bfbbd string )*Selection {_dbab :=&Selection {Height :_abcd ,Width :_ddfcb ,Name :_bfbbd };
_dbab .Data =make ([][]SelectionValue ,_abcd );for _faccc :=0;_faccc < _abcd ;_faccc ++{_dbab .Data [_faccc ]=make ([]SelectionValue ,_ddfcb );};return _dbab ;};func _be ()(_efcf []byte ){_efcf =make ([]byte ,256);for _gdda :=0;_gdda < 256;_gdda ++{_eedd :=byte (_gdda );
_efcf [_eedd ]=(_eedd &0x01)|((_eedd &0x04)>>1)|((_eedd &0x10)>>2)|((_eedd &0x40)>>3)|((_eedd &0x02)<<3)|((_eedd &0x08)<<2)|((_eedd &0x20)<<1)|(_eedd &0x80);};return _efcf ;};func _fbag (_dfb ,_ggdb *Bitmap ,_gebb CombinationOperator )*Bitmap {_ddacb :=New (_dfb .Width ,_dfb .Height );
for _faaed :=0;_faaed < len (_ddacb .Data );_faaed ++{_ddacb .Data [_faaed ]=_agcd (_dfb .Data [_faaed ],_ggdb .Data [_faaed ],_gebb );};return _ddacb ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;
PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;
PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _eece (_eeee *Bitmap ,_cfaa int )(*Bitmap ,error ){const _debg ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _eeee ==nil {return nil ,_g .Error (_debg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cfaa <=0{return nil ,_g .Error (_debg ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _cfaa ==1{_bfbeb ,_cbad :=_cdec (nil ,_eeee );if _cbad !=nil {return nil ,_g .Wrap (_cbad ,_debg ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _bfbeb ,nil ;};_ceg ,_edbaa :=_eg (_eeee ,_cfaa ,_cfaa );if _edbaa !=nil {return nil ,_g .Wrap (_edbaa ,_debg ,"");
};return _ceg ,nil ;};func _faa (_cfb ,_bbf int )*Bitmap {return &Bitmap {Width :_cfb ,Height :_bbf ,RowStride :(_cfb +7)>>3};};func (_dfcc *Bitmap )SetPixel (x ,y int ,pixel byte )error {_efb :=_dfcc .GetByteIndex (x ,y );if _efb > len (_dfcc .Data )-1{return _g .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_efb );
};_dccg :=_dfcc .GetBitOffset (x );_gcfg :=uint (7-_dccg );_fgg :=_dfcc .Data [_efb ];var _cgac byte ;if pixel ==1{_cgac =_fgg |(pixel &0x01<<_gcfg );}else {_cgac =_fgg &^(1<<_gcfg );};_dfcc .Data [_efb ]=_cgac ;return nil ;};func (_cfcc *Bitmap )Equivalent (s *Bitmap )bool {return _cfcc .equivalent (s )};
func TstTSymbol (t *_e .T ,scale ...int )*Bitmap {_bebaf ,_bfbd :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_gd .NoError (t ,_bfbd );return TstGetScaledSymbol (t ,_bebaf ,scale ...);};type RasterOperator int ;func (_efdfa *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _acba ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _efdfa ==nil {return nil ,_g .Error (_acba ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_efdfa .Values )-1{return nil ,_g .Errorf (_acba ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _efdfa .Values [i ],nil ;};func (_cfee *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _gedg ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_cfee .Values )==0{return nil ,_g .Error (_gedg ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_cgfff :=&BitmapsArray {};_cfee .SortByHeight ();_bcbdd :=-1;_fcgf :=-1;for _ceff :=0;_ceff < len (_cfee .Values );_ceff ++{_adcc :=_cfee .Values [_ceff ].Height ;if _adcc > _bcbdd {_bcbdd =_adcc ;_fcgf ++;_cgfff .Values =append (_cgfff .Values ,&Bitmaps {});
};_cgfff .Values [_fcgf ].AddBitmap (_cfee .Values [_ceff ]);};return _cgfff ,nil ;};func (_dgfg *Bitmap )GetByteIndex (x ,y int )int {return y *_dgfg .RowStride +(x >>3)};func (_dfe *Bitmap )SetDefaultPixel (){for _fgc :=range _dfe .Data {_dfe .Data [_fgc ]=byte (0xff);
};};func _ggbgd (_addb ,_afabbd ,_gcddg byte )byte {return (_addb &^(_gcddg ))|(_afabbd &_gcddg )};func TstISymbol (t *_e .T ,scale ...int )*Bitmap {_cfece ,_gbda :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_gd .NoError (t ,_gbda );return TstGetScaledSymbol (t ,_cfece ,scale ...);
};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_abde *Bitmap )String ()string {var _ddce ="\u000a";for _agdc :=0;_agdc < _abde .Height ;_agdc ++{var _cgcd string ;
for _afbc :=0;_afbc < _abde .Width ;_afbc ++{_ece :=_abde .GetPixel (_afbc ,_agdc );if _ece {_cgcd +="\u0031";}else {_cgcd +="\u0030";};};_ddce +=_cgcd +"\u000a";};return _ddce ;};func _eedc (_bgdd ,_cfcd *Bitmap ,_dffc *Selection )(*Bitmap ,error ){const _eadfbd ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _cecaa ,_dgce int ;if _cfcd ==nil {return nil ,_g .Error (_eadfbd ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _dffc ==nil {return nil ,_g .Error (_eadfbd ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_cecaa =_dffc .Width ;_dgce =_dffc .Height ;if _cecaa ==0||_dgce ==0{return nil ,_g .Error (_eadfbd ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _bgdd ==nil {return _cfcd .createTemplate (),nil ;};if _decdb :=_bgdd .resizeImageData (_cfcd );
_decdb !=nil {return nil ,_decdb ;};return _bgdd ,nil ;};func (_fcaf *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _fgdg (_fcaf ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_fge *Bitmap )SetByte (index int ,v byte )error {if index > len (_fge .Data )-1||index < 0{return _g .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_fge .Data [index ]=v ;return nil ;};func _ggfd (_effe ,_fac *Bitmap ,_dbae ,_faf ,_bffd ,_afbcc ,_fdfc ,_bafc ,_dcac ,_afae int ,_cdgd CombinationOperator )error {var _ccfd int ;_degb :=func (){_ccfd ++;_bffd +=_fac .RowStride ;_afbcc +=_effe .RowStride ;
_fdfc +=_effe .RowStride };for _ccfd =_dbae ;_ccfd < _faf ;_degb (){var _abed uint16 ;_daba :=_bffd ;for _bcee :=_afbcc ;_bcee <=_fdfc ;_bcee ++{_ggfc ,_bgfa :=_fac .GetByte (_daba );if _bgfa !=nil {return _bgfa ;};_cfec ,_bgfa :=_effe .GetByte (_bcee );
if _bgfa !=nil {return _bgfa ;};_abed =(_abed |uint16 (_cfec ))<<uint (_afae );_cfec =byte (_abed >>8);if _bcee ==_fdfc {_cfec =_eead (uint (_bafc ),_cfec );};if _bgfa =_fac .SetByte (_daba ,_agcd (_ggfc ,_cfec ,_cdgd ));_bgfa !=nil {return _bgfa ;};_daba ++;
_abed <<=uint (_dcac );};};return nil ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_fcffa :=_aeff (h ,w ,"");_fcffa .setOrigin (cy ,cx );var _bege ,_adbb int ;for _bege =0;_bege < h ;_bege ++{for _adbb =0;_adbb < w ;_adbb ++{_fcffa .Data [_bege ][_adbb ]=tp ;
};};return _fcffa ;};func (_fabe *ClassedPoints )SortByX (){_fabe ._fgga =_fabe .xSortFunction ();_a .Sort (_fabe )};func _gcbe (_cdge ,_gdff *Bitmap ,_bcbd *Selection )(*Bitmap ,error ){const _dcabg ="\u006f\u0070\u0065\u006e";var _bdgb error ;_cdge ,_bdgb =_eedc (_cdge ,_gdff ,_bcbd );
if _bdgb !=nil {return nil ,_g .Wrap (_bdgb ,_dcabg ,"");};_agdg ,_bdgb :=_cgfc (nil ,_gdff ,_bcbd );if _bdgb !=nil {return nil ,_g .Wrap (_bdgb ,_dcabg ,"");};_ ,_bdgb =_fef (_cdge ,_agdg ,_bcbd );if _bdgb !=nil {return nil ,_g .Wrap (_bdgb ,_dcabg ,"");
};return _cdge ,nil ;};func (_ebc *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_cdgg *Boxes ,_gdcd error ){const _abff ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _ebc ==nil {return nil ,_g .Error (_abff ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_g .Error (_abff ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _cdgg ,_gdcd =_ebc .connComponentsBB (connectivity );
_gdcd !=nil {return nil ,_g .Wrap (_gdcd ,_abff ,"");};}else {if _cdgg ,_gdcd =_ebc .connComponentsBitmapsBB (bms ,connectivity );_gdcd !=nil {return nil ,_g .Wrap (_gdcd ,_abff ,"");};};return _cdgg ,nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _fgdg (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};var _ _a .Interface =&ClassedPoints {};func _acdg (_bfbb *Bitmap ,_cee ,_cabbc ,_gdgf ,_agdfg int ,_deaa RasterOperator ){if _cee < 0{_gdgf +=_cee ;_cee =0;};_aabc :=_cee +_gdgf -_bfbb .Width ;
if _aabc > 0{_gdgf -=_aabc ;};if _cabbc < 0{_agdfg +=_cabbc ;_cabbc =0;};_dbaf :=_cabbc +_agdfg -_bfbb .Height ;if _dbaf > 0{_agdfg -=_dbaf ;};if _gdgf <=0||_agdfg <=0{return ;};if (_cee &7)==0{_cbba (_bfbb ,_cee ,_cabbc ,_gdgf ,_agdfg ,_deaa );}else {_ecgc (_bfbb ,_cee ,_cabbc ,_gdgf ,_agdfg ,_deaa );
};};func _cge (_cff *Bitmap ,_cbf int ,_egaf []byte )(_ggd *Bitmap ,_cga error ){const _bade ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _cff ==nil {return nil ,_g .Error (_bade ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _cbf < 1||_cbf > 4{return nil ,_g .Error (_bade ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _cff .Height <=1{return nil ,_g .Errorf (_bade ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_cff .Height );
};_ggd =New (_cff .Width /2,_cff .Height /2);if _egaf ==nil {_egaf =_be ();};_ccf :=_defc (_cff .RowStride ,2*_ggd .RowStride );switch _cbf {case 1:_cga =_egaa (_cff ,_ggd ,_cbf ,_egaf ,_ccf );case 2:_cga =_cgb (_cff ,_ggd ,_cbf ,_egaf ,_ccf );case 3:_cga =_fca (_cff ,_ggd ,_cbf ,_egaf ,_ccf );
case 4:_cga =_gcd (_cff ,_ggd ,_cbf ,_egaf ,_ccf );};if _cga !=nil {return nil ,_cga ;};return _ggd ,nil ;};func (_abf *Bitmap )SetPadBits (value int ){_abf .setPadBits (value )};func (_gfecc *byWidth )Less (i ,j int )bool {return _gfecc .Values [i ].Width < _gfecc .Values [j ].Width };
type Boxes []*_df .Rectangle ;func (_dgc *Bitmap )clipRectangle (_gddc ,_bfc *_df .Rectangle )(_bddd *Bitmap ,_ageba error ){const _cbdf ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _gddc ==nil {return nil ,_g .Error (_cbdf ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_dadg ,_fega :=_dgc .Width ,_dgc .Height ;_ebd ,_ageba :=ClipBoxToRectangle (_gddc ,_dadg ,_fega );if _ageba !=nil {_adf .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_ageba );
return nil ,nil ;};_cec ,_dfce :=_ebd .Min .X ,_ebd .Min .Y ;_dcd ,_gdee :=_ebd .Max .X -_ebd .Min .X ,_ebd .Max .Y -_ebd .Min .Y ;_bddd =New (_dcd ,_gdee );_bddd .Text =_dgc .Text ;if _ageba =_bddd .RasterOperation (0,0,_dcd ,_gdee ,PixSrc ,_dgc ,_cec ,_dfce );
_ageba !=nil {return nil ,_g .Wrap (_ageba ,_cbdf ,"");};if _bfc !=nil {*_bfc =*_ebd ;};return _bddd ,nil ;};func (_bgead *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _ddgac ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _bgead ==nil {return nil ,_g .Error (_ddgac ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_g .Error (_ddgac ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_bddde :=len (_bgead .Values );_cfca :=&Bitmaps {Values :make ([]*Bitmap ,_bddde ),Boxes :make ([]*_df .Rectangle ,_bddde )};var (_bfea ,_gfbe *Bitmap ;_fbbd *_df .Rectangle ;_dcaff error ;);for _bgcc :=0;_bgcc < _bddde ;_bgcc ++{if _bfea ,_dcaff =_bgead .GetBitmap (_bgcc );
_dcaff !=nil {return nil ,_g .Wrap (_dcaff ,_ddgac ,"");};if _fbbd ,_dcaff =_bgead .GetBox (_bgcc );_dcaff !=nil {return nil ,_g .Wrap (_dcaff ,_ddgac ,"");};if _gfbe ,_dcaff =s .clipRectangle (_fbbd ,nil );_dcaff !=nil {return nil ,_g .Wrap (_dcaff ,_ddgac ,"");
};if _gfbe ,_dcaff =_gfbe .And (_bfea );_dcaff !=nil {return nil ,_g .Wrap (_dcaff ,_ddgac ,"");};_cfca .Values [_bgcc ]=_gfbe ;_cfca .Boxes [_bgcc ]=_fbbd ;};return _cfca ,nil ;};var (_dea =_cbg ();_fecd =_dge ();_acac =_fgb (););type MorphOperation int ;
func (_baag *Bitmap )centroid (_eabg ,_daacc []int )(Point ,error ){_degg :=Point {};_baag .setPadBits (0);if len (_eabg )==0{_eabg =_ffe ();};if len (_daacc )==0{_daacc =_dedg ();};var _bfd ,_ddca ,_gaba ,_ccbc ,_daf ,_dfbg int ;var _gfcg byte ;for _daf =0;
_daf < _baag .Height ;_daf ++{_gabef :=_baag .RowStride *_daf ;_ccbc =0;for _dfbg =0;_dfbg < _baag .RowStride ;_dfbg ++{_gfcg =_baag .Data [_gabef +_dfbg ];if _gfcg !=0{_ccbc +=_daacc [_gfcg ];_bfd +=_eabg [_gfcg ]+_dfbg *8*_daacc [_gfcg ];};};_gaba +=_ccbc ;
_ddca +=_ccbc *_daf ;};if _gaba !=0{_degg .X =float32 (_bfd )/float32 (_gaba );_degg .Y =float32 (_ddca )/float32 (_gaba );};return _degg ,nil ;};func _dfae (_eagbb *Bitmap ,_fecc ,_ebfca ,_cgbc ,_acd int ,_fddf RasterOperator ,_fbaad *Bitmap ,_cebb ,_dddc int )error {var (_acead byte ;
_eeeg int ;_cccf int ;_gfcag ,_gceec int ;_dcga ,_eecf int ;);_dedbg :=_cgbc >>3;_faec :=_cgbc &7;if _faec > 0{_acead =_ceggg [_faec ];};_eeeg =_fbaad .RowStride *_dddc +(_cebb >>3);_cccf =_eagbb .RowStride *_ebfca +(_fecc >>3);switch _fddf {case PixSrc :for _dcga =0;
_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]=_fbaad .Data [_gfcag ];_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],_fbaad .Data [_gfcag ],_acead );
};};case PixNotSrc :for _dcga =0;_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]=^(_fbaad .Data [_gfcag ]);_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],^_fbaad .Data [_gfcag ],_acead );
};};case PixSrcOrDst :for _dcga =0;_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]|=_fbaad .Data [_gfcag ];_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],_fbaad .Data [_gfcag ]|_eagbb .Data [_gceec ],_acead );
};};case PixSrcAndDst :for _dcga =0;_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]&=_fbaad .Data [_gfcag ];_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],_fbaad .Data [_gfcag ]&_eagbb .Data [_gceec ],_acead );
};};case PixSrcXorDst :for _dcga =0;_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]^=_fbaad .Data [_gfcag ];_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],_fbaad .Data [_gfcag ]^_eagbb .Data [_gceec ],_acead );
};};case PixNotSrcOrDst :for _dcga =0;_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]|=^(_fbaad .Data [_gfcag ]);_gceec ++;_gfcag ++;};
if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],^(_fbaad .Data [_gfcag ])|_eagbb .Data [_gceec ],_acead );};};case PixNotSrcAndDst :for _dcga =0;_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;_gceec =_cccf +_dcga *_eagbb .RowStride ;
for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]&=^(_fbaad .Data [_gfcag ]);_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],^(_fbaad .Data [_gfcag ])&_eagbb .Data [_gceec ],_acead );};};case PixSrcOrNotDst :for _dcga =0;
_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]=_fbaad .Data [_gfcag ]|^(_eagbb .Data [_gceec ]);_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],_fbaad .Data [_gfcag ]|^(_eagbb .Data [_gceec ]),_acead );
};};case PixSrcAndNotDst :for _dcga =0;_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]=_fbaad .Data [_gfcag ]&^(_eagbb .Data [_gceec ]);
_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],_fbaad .Data [_gfcag ]&^(_eagbb .Data [_gceec ]),_acead );};};case PixNotPixSrcOrDst :for _dcga =0;_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;
_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]=^(_fbaad .Data [_gfcag ]|_eagbb .Data [_gceec ]);_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],^(_fbaad .Data [_gfcag ]|_eagbb .Data [_gceec ]),_acead );
};};case PixNotPixSrcAndDst :for _dcga =0;_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]=^(_fbaad .Data [_gfcag ]&_eagbb .Data [_gceec ]);
_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],^(_fbaad .Data [_gfcag ]&_eagbb .Data [_gceec ]),_acead );};};case PixNotPixSrcXorDst :for _dcga =0;_dcga < _acd ;_dcga ++{_gfcag =_eeeg +_dcga *_fbaad .RowStride ;
_gceec =_cccf +_dcga *_eagbb .RowStride ;for _eecf =0;_eecf < _dedbg ;_eecf ++{_eagbb .Data [_gceec ]=^(_fbaad .Data [_gfcag ]^_eagbb .Data [_gceec ]);_gceec ++;_gfcag ++;};if _faec > 0{_eagbb .Data [_gceec ]=_ggbgd (_eagbb .Data [_gceec ],^(_fbaad .Data [_gfcag ]^_eagbb .Data [_gceec ]),_acead );
};};default:_adf .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_fddf );return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};type byHeight Bitmaps ;var (_ceggg =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_ddgbf =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func TstFrameBitmapData ()[]byte {return _cefae .Data };func MakePixelSumTab8 ()[]int {return _dedg ()};
func _acbg (_fagc ,_ffaa *Bitmap ,_fcff *Selection )(*Bitmap ,error ){const _aacdc ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _agdfe error ;if _fagc ,_agdfe =_eedc (_fagc ,_ffaa ,_fcff );_agdfe !=nil {return nil ,_agdfe ;};_dagee ,_agdfe :=_fef (nil ,_ffaa ,_fcff );
if _agdfe !=nil {return nil ,_g .Wrap (_agdfe ,_aacdc ,"");};if _ ,_agdfe =_cgfc (_fagc ,_dagee ,_fcff );_agdfe !=nil {return nil ,_g .Wrap (_agdfe ,_aacdc ,"");};return _fagc ,nil ;};func Rect (x ,y ,w ,h int )(*_df .Rectangle ,error ){const _bceef ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_g .Errorf (_bceef ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_g .Error (_bceef ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_cbde :=_df .Rect (x ,y ,x +w ,y +h );return &_cbde ,nil ;};func _gee (_bdfb ,_geed *Bitmap ,_cdcb ,_babb int )(*Bitmap ,error ){const _bggc ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _geed ==nil {return nil ,_g .Error (_bggc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cdcb < 1||_babb < 1{return nil ,_g .Error (_bggc ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _cdcb ==1&&_babb ==1{_cfgd ,_aacdb :=_cdec (_bdfb ,_geed );if _aacdb !=nil {return nil ,_g .Wrap (_aacdb ,_bggc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cfgd ,nil ;};if _cdcb ==1||_babb ==1{_egeag :=SelCreateBrick (_babb ,_cdcb ,_babb /2,_cdcb /2,SelHit );_agbb ,_dbcc :=_cgfc (_bdfb ,_geed ,_egeag );if _dbcc !=nil {return nil ,_g .Wrap (_dbcc ,_bggc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _agbb ,nil ;};_gdcce :=SelCreateBrick (1,_cdcb ,0,_cdcb /2,SelHit );_ggeg :=SelCreateBrick (_babb ,1,_babb /2,0,SelHit );_efed ,_fbcf :=_cgfc (nil ,_geed ,_gdcce );if _fbcf !=nil {return nil ,_g .Wrap (_fbcf ,_bggc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_bdfb ,_fbcf =_cgfc (_bdfb ,_efed ,_ggeg );if _fbcf !=nil {return nil ,_g .Wrap (_fbcf ,_bggc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bdfb ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
func _bdfe (_cbdga ...MorphProcess )(_gbg error ){const _faga ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _edeb ,_dbeeb int ;for _edbac ,_aae :=range _cbdga {if _gbg =_aae .verify (_edbac ,&_edeb ,&_dbeeb );
_gbg !=nil {return _g .Wrap (_gbg ,_faga ,"");};};if _dbeeb !=0&&_edeb !=0{return _g .Error (_faga ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _cdec (d ,s )};func (_aea *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _aea .Copy (),nil ;};_dga ,_abd :=_aea .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );
if _abd !=nil {return nil ,_g .Wrap (_abd ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _dga ,nil ;};func _cabb (_fae ,_ggf *Bitmap ,_ccfa ,_cfgee ,_bab ,_decd ,_ddge ,_dbdf ,_dcfa ,_becd int ,_caba CombinationOperator ,_eegfd int )error {var _cfgb int ;
_befc :=func (){_cfgb ++;_bab +=_ggf .RowStride ;_decd +=_fae .RowStride ;_ddge +=_fae .RowStride };for _cfgb =_ccfa ;_cfgb < _cfgee ;_befc (){var _dcbd uint16 ;_fegc :=_bab ;for _dcaf :=_decd ;_dcaf <=_ddge ;_dcaf ++{_caaf ,_aadf :=_ggf .GetByte (_fegc );
if _aadf !=nil {return _aadf ;};_eec ,_aadf :=_fae .GetByte (_dcaf );if _aadf !=nil {return _aadf ;};_dcbd =(_dcbd |(uint16 (_eec )&0xff))<<uint (_becd );_eec =byte (_dcbd >>8);if _aadf =_ggf .SetByte (_fegc ,_agcd (_caaf ,_eec ,_caba ));_aadf !=nil {return _aadf ;
};_fegc ++;_dcbd <<=uint (_dcfa );if _dcaf ==_ddge {_eec =byte (_dcbd >>(8-uint8 (_becd )));if _eegfd !=0{_eec =_eead (uint (8+_dbdf ),_eec );};_caaf ,_aadf =_ggf .GetByte (_fegc );if _aadf !=nil {return _aadf ;};if _aadf =_ggf .SetByte (_fegc ,_agcd (_caaf ,_eec ,_caba ));
_aadf !=nil {return _aadf ;};};};};return nil ;};func (_ggcb *Bitmap )setEightFullBytes (_cgcde int ,_ddfc uint64 )error {if _cgcde +7> len (_ggcb .Data )-1{return _g .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ggcb .Data [_cgcde ]=byte ((_ddfc &0xff00000000000000)>>56);_ggcb .Data [_cgcde +1]=byte ((_ddfc &0xff000000000000)>>48);_ggcb .Data [_cgcde +2]=byte ((_ddfc &0xff0000000000)>>40);_ggcb .Data [_cgcde +3]=byte ((_ddfc &0xff00000000)>>32);_ggcb .Data [_cgcde +4]=byte ((_ddfc &0xff000000)>>24);
_ggcb .Data [_cgcde +5]=byte ((_ddfc &0xff0000)>>16);_ggcb .Data [_cgcde +6]=byte ((_ddfc &0xff00)>>8);_ggcb .Data [_cgcde +7]=byte (_ddfc &0xff);return nil ;};func (_cbecd *byHeight )Len ()int {return len (_cbecd .Values )};func _fef (_gdb *Bitmap ,_abgg *Bitmap ,_cba *Selection )(*Bitmap ,error ){var (_ecda *Bitmap ;
_egeg error ;);_gdb ,_egeg =_cded (_gdb ,_abgg ,_cba ,&_ecda );if _egeg !=nil {return nil ,_egeg ;};if _egeg =_gdb .clearAll ();_egeg !=nil {return nil ,_egeg ;};var _cbfcg SelectionValue ;for _gec :=0;_gec < _cba .Height ;_gec ++{for _faeba :=0;_faeba < _cba .Width ;
_faeba ++{_cbfcg =_cba .Data [_gec ][_faeba ];if _cbfcg ==SelHit {if _egeg =_gdb .RasterOperation (_faeba -_cba .Cx ,_gec -_cba .Cy ,_abgg .Width ,_abgg .Height ,PixSrcOrDst ,_ecda ,0,0);_egeg !=nil {return nil ,_egeg ;};};};};return _gdb ,nil ;};func _ceeb (_bcafc *Bitmap ,_fcdc *_b .Stack ,_aeeb ,_cabd int )(_cgde *_df .Rectangle ,_bged error ){const _geea ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _bcafc ==nil {return nil ,_g .Error (_geea ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fcdc ==nil {return nil ,_g .Error (_geea ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_aaca ,_cbbd :=_bcafc .Width ,_bcafc .Height ;_efcbf :=_aaca -1;_ebffd :=_cbbd -1;if _aeeb < 0||_aeeb > _efcbf ||_cabd < 0||_cabd > _ebffd ||!_bcafc .GetPixel (_aeeb ,_cabd ){return nil ,nil ;};var _faagd *_df .Rectangle ;_faagd ,_bged =Rect (100000,100000,0,0);
if _bged !=nil {return nil ,_g .Wrap (_bged ,_geea ,"");};if _bged =_effd (_fcdc ,_aeeb ,_aeeb ,_cabd ,1,_ebffd ,_faagd );_bged !=nil {return nil ,_g .Wrap (_bged ,_geea ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bged =_effd (_fcdc ,_aeeb ,_aeeb ,_cabd +1,-1,_ebffd ,_faagd );
_bged !=nil {return nil ,_g .Wrap (_bged ,_geea ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_faagd .Min .X ,_faagd .Max .X =_aeeb ,_aeeb ;_faagd .Min .Y ,_faagd .Max .Y =_cabd ,_cabd ;var (_abccd *fillSegment ;
_faad int ;);for _fcdc .Len ()> 0{if _abccd ,_bged =_bbcc (_fcdc );_bged !=nil {return nil ,_g .Wrap (_bged ,_geea ,"");};_cabd =_abccd ._dbfda ;for _aeeb =_abccd ._gaad ;_aeeb >=0&&_bcafc .GetPixel (_aeeb ,_cabd );_aeeb --{if _bged =_bcafc .SetPixel (_aeeb ,_cabd ,0);
_bged !=nil {return nil ,_g .Wrap (_bged ,_geea ,"");};};if _aeeb >=_abccd ._gaad {for _aeeb ++;_aeeb <=_abccd ._cdae &&_aeeb <=_efcbf &&!_bcafc .GetPixel (_aeeb ,_cabd );_aeeb ++{};_faad =_aeeb ;if !(_aeeb <=_abccd ._cdae &&_aeeb <=_efcbf ){continue ;
};}else {_faad =_aeeb +1;if _faad < _abccd ._gaad -1{if _bged =_effd (_fcdc ,_faad ,_abccd ._gaad -1,_abccd ._dbfda ,-_abccd ._dcgf ,_ebffd ,_faagd );_bged !=nil {return nil ,_g .Wrap (_bged ,_geea ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_aeeb =_abccd ._gaad +1;};for {for ;_aeeb <=_efcbf &&_bcafc .GetPixel (_aeeb ,_cabd );_aeeb ++{if _bged =_bcafc .SetPixel (_aeeb ,_cabd ,0);_bged !=nil {return nil ,_g .Wrap (_bged ,_geea ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bged =_effd (_fcdc ,_faad ,_aeeb -1,_abccd ._dbfda ,_abccd ._dcgf ,_ebffd ,_faagd );
_bged !=nil {return nil ,_g .Wrap (_bged ,_geea ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _aeeb > _abccd ._cdae +1{if _bged =_effd (_fcdc ,_abccd ._cdae +1,_aeeb -1,_abccd ._dbfda ,-_abccd ._dcgf ,_ebffd ,_faagd );_bged !=nil {return nil ,_g .Wrap (_bged ,_geea ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _aeeb ++;_aeeb <=_abccd ._cdae &&_aeeb <=_efcbf &&!_bcafc .GetPixel (_aeeb ,_cabd );_aeeb ++{};_faad =_aeeb ;if !(_aeeb <=_abccd ._cdae &&_aeeb <=_efcbf ){break ;};};};_faagd .Max .X ++;_faagd .Max .Y ++;return _faagd ,nil ;};func (_geff *Bitmaps )GetBox (i int )(*_df .Rectangle ,error ){const _dded ="\u0047\u0065\u0074\u0042\u006f\u0078";
if _geff ==nil {return nil ,_g .Error (_dded ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_geff .Boxes )-1{return nil ,_g .Errorf (_dded ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _geff .Boxes [i ],nil ;};func (_eggg *ClassedPoints )ySortFunction ()func (_fgde int ,_cafc int )bool {return func (_agfc ,_ecbb int )bool {return _eggg .YAtIndex (_agfc )< _eggg .YAtIndex (_ecbb )};};func (_fdga CombinationOperator )String ()string {var _eeba string ;
switch _fdga {case CmbOpOr :_eeba ="\u004f\u0052";case CmbOpAnd :_eeba ="\u0041\u004e\u0044";case CmbOpXor :_eeba ="\u0058\u004f\u0052";case CmbOpXNor :_eeba ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_eeba ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_eeba ="\u004e\u004f\u0054";};return _eeba ;};func (_gfe *Bitmap )setTwoBytes (_bbd int ,_agaaf uint16 )error {if _bbd +1> len (_gfe .Data )-1{return _g .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bbd );
};_gfe .Data [_bbd ]=byte ((_agaaf &0xff00)>>8);_gfe .Data [_bbd +1]=byte (_agaaf &0xff);return nil ;};func _eed (_cf *Bitmap ,_aac *Bitmap ,_aad int )(_cc error ){const _fe ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _aad {case 2:_cc =_fc (_cf ,_aac );case 4:_cc =_aag (_cf ,_aac );case 8:_cc =_dde (_cf ,_aac );default:return _g .Error (_fe ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _cc !=nil {_cc =_g .Wrap (_cc ,_fe ,"");};return _cc ;};func _gbgb (_babcg ,_caabf ,_ffdb *Bitmap ,_debd int )(*Bitmap ,error ){const _ebef ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _caabf ==nil {return nil ,_g .Error (_ebef ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _ffdb ==nil {return nil ,_g .Error (_ebef ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _debd !=4&&_debd !=8{return nil ,_g .Error (_ebef ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _dagbe error ;_babcg ,_dagbe =_cdec (_babcg ,_caabf );if _dagbe !=nil {return nil ,_g .Wrap (_dagbe ,_ebef ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_dgbd :=_caabf .createTemplate ();_ffdb .setPadBits (0);
for _geef :=0;_geef < _gbgf ;_geef ++{_dgbd ,_dagbe =_cdec (_dgbd ,_babcg );if _dagbe !=nil {return nil ,_g .Wrapf (_dagbe ,_ebef ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_geef );};if _dagbe =_cbff (_babcg ,_ffdb ,_debd );
_dagbe !=nil {return nil ,_g .Wrapf (_dagbe ,_ebef ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_geef );};if _dgbd .Equals (_babcg ){break ;};};return _babcg ,nil ;};func (_cdg *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _cdg .addBorderGeneral (left ,right ,top ,bot ,val );
};func (_gebgb *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _dabd ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_gebgb .IntSlice .Size (){return 0,_g .Errorf (_dabd ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_gebgb .YAtIndex (i )),nil ;};func (_ace *Bitmap )CountPixels ()int {return _ace .countPixels ()};func TstGetScaledSymbol (t *_e .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_fbea ,_bcdgb :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_gd .NoError (t ,_bcdgb );return _fbea ;};func _cgfc (_fbge ,_fbcdf *Bitmap ,_dggg *Selection )(*Bitmap ,error ){const _dacd ="\u0065\u0072\u006fd\u0065";var (_cdcf error ;_cabe *Bitmap ;);_fbge ,_cdcf =_cded (_fbge ,_fbcdf ,_dggg ,&_cabe );if _cdcf !=nil {return nil ,_g .Wrap (_cdcf ,_dacd ,"");
};if _cdcf =_fbge .setAll ();_cdcf !=nil {return nil ,_g .Wrap (_cdcf ,_dacd ,"");};var _dggga SelectionValue ;for _dafc :=0;_dafc < _dggg .Height ;_dafc ++{for _dce :=0;_dce < _dggg .Width ;_dce ++{_dggga =_dggg .Data [_dafc ][_dce ];if _dggga ==SelHit {_cdcf =_fgdg (_fbge ,_dggg .Cx -_dce ,_dggg .Cy -_dafc ,_fbcdf .Width ,_fbcdf .Height ,PixSrcAndDst ,_cabe ,0,0);
if _cdcf !=nil {return nil ,_g .Wrap (_cdcf ,_dacd ,"");};};};};if MorphBC ==SymmetricMorphBC {return _fbge ,nil ;};_gebg ,_babd ,_cafab ,_ccccd :=_dggg .findMaxTranslations ();if _gebg > 0{if _cdcf =_fbge .RasterOperation (0,0,_gebg ,_fbcdf .Height ,PixClr ,nil ,0,0);
_cdcf !=nil {return nil ,_g .Wrap (_cdcf ,_dacd ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _cafab > 0{if _cdcf =_fbge .RasterOperation (_fbcdf .Width -_cafab ,0,_cafab ,_fbcdf .Height ,PixClr ,nil ,0,0);_cdcf !=nil {return nil ,_g .Wrap (_cdcf ,_dacd ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _babd > 0{if _cdcf =_fbge .RasterOperation (0,0,_fbcdf .Width ,_babd ,PixClr ,nil ,0,0);_cdcf !=nil {return nil ,_g .Wrap (_cdcf ,_dacd ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _ccccd > 0{if _cdcf =_fbge .RasterOperation (0,_fbcdf .Height -_ccccd ,_fbcdf .Width ,_ccccd ,PixClr ,nil ,0,0);
_cdcf !=nil {return nil ,_g .Wrap (_cdcf ,_dacd ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _fbge ,nil ;};func (_bbee *Bitmap )clearAll ()error {return _bbee .RasterOperation (0,0,_bbee .Width ,_bbee .Height ,PixClr ,nil ,0,0);};const (Vanilla Color =iota ;
Chocolate ;);type Bitmaps struct{Values []*Bitmap ;Boxes []*_df .Rectangle ;};func _dedg ()[]int {_gfbbg :=make ([]int ,256);for _fdgg :=0;_fdgg <=0xff;_fdgg ++{_gfec :=byte (_fdgg );_gfbbg [_gfec ]=int (_gfec &0x1)+(int (_gfec >>1)&0x1)+(int (_gfec >>2)&0x1)+(int (_gfec >>3)&0x1)+(int (_gfec >>4)&0x1)+(int (_gfec >>5)&0x1)+(int (_gfec >>6)&0x1)+(int (_gfec >>7)&0x1);
};return _gfbbg ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _cecd ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_g .Error (_cecd ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_g .Error (_cecd ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_g .Error (_cecd ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_g .Error (_cecd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_g .Error (_cecd ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_fada ,_bcaa :=bm1 .Width ,bm1 .Height ;_cdbf ,_gbab :=bm2 .Width ,bm2 .Height ;if _b .Abs (_fada -_cdbf )> maxDiffW {return false ,nil ;};if _b .Abs (_bcaa -_gbab )> maxDiffH {return false ,nil ;};_fafb :=int (delX +_b .Sign (delX )*0.5);_faac :=int (delY +_b .Sign (delY )*0.5);
_acg :=int (_f .Ceil (_f .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_edba :=bm2 .RowStride ;_becc :=_dcb (_faac ,0);_dgbc :=_defc (_gbab +_faac ,_bcaa );_acae :=bm1 .RowStride *_becc ;_fgfa :=bm2 .RowStride *(_becc -_faac );var _efbe int ;
if _dgbc <=_bcaa {_efbe =downcount [_dgbc -1];};_gfd :=_dcb (_fafb ,0);_abdd :=_defc (_cdbf +_fafb ,_fada );var _daee ,_bdbe int ;if _fafb >=8{_daee =_fafb >>3;_acae +=_daee ;_gfd -=_daee <<3;_abdd -=_daee <<3;_fafb &=7;}else if _fafb <=-8{_bdbe =-((_fafb +7)>>3);
_fgfa +=_bdbe ;_edba -=_bdbe ;_fafb +=_bdbe <<3;};var (_dbda ,_fcfd ,_bdg int ;_aadff ,_bcg ,_aeg byte ;);if _gfd >=_abdd ||_becc >=_dgbc {return false ,nil ;};_eeed :=(_abdd +7)>>3;switch {case _fafb ==0:for _fcfd =_becc ;_fcfd < _dgbc ;_fcfd ,_acae ,_fgfa =_fcfd +1,_acae +bm1 .RowStride ,_fgfa +bm2 .RowStride {for _bdg =0;
_bdg < _eeed ;_bdg ++{_aadff =bm1 .Data [_acae +_bdg ]&bm2 .Data [_fgfa +_bdg ];_dbda +=tab [_aadff ];};if _dbda >=_acg {return true ,nil ;};if _eddf :=_dbda +downcount [_fcfd ]-_efbe ;_eddf < _acg {return false ,nil ;};};case _fafb > 0&&_edba < _eeed :for _fcfd =_becc ;
_fcfd < _dgbc ;_fcfd ,_acae ,_fgfa =_fcfd +1,_acae +bm1 .RowStride ,_fgfa +bm2 .RowStride {_bcg =bm1 .Data [_acae ];_aeg =bm2 .Data [_fgfa ]>>uint (_fafb );_aadff =_bcg &_aeg ;_dbda +=tab [_aadff ];for _bdg =1;_bdg < _edba ;_bdg ++{_bcg =bm1 .Data [_acae +_bdg ];
_aeg =bm2 .Data [_fgfa +_bdg ]>>uint (_fafb )|bm2 .Data [_fgfa +_bdg -1]<<uint (8-_fafb );_aadff =_bcg &_aeg ;_dbda +=tab [_aadff ];};_bcg =bm1 .Data [_acae +_bdg ];_aeg =bm2 .Data [_fgfa +_bdg -1]<<uint (8-_fafb );_aadff =_bcg &_aeg ;_dbda +=tab [_aadff ];
if _dbda >=_acg {return true ,nil ;}else if _dbda +downcount [_fcfd ]-_efbe < _acg {return false ,nil ;};};case _fafb > 0&&_edba >=_eeed :for _fcfd =_becc ;_fcfd < _dgbc ;_fcfd ,_acae ,_fgfa =_fcfd +1,_acae +bm1 .RowStride ,_fgfa +bm2 .RowStride {_bcg =bm1 .Data [_acae ];
_aeg =bm2 .Data [_fgfa ]>>uint (_fafb );_aadff =_bcg &_aeg ;_dbda +=tab [_aadff ];for _bdg =1;_bdg < _eeed ;_bdg ++{_bcg =bm1 .Data [_acae +_bdg ];_aeg =bm2 .Data [_fgfa +_bdg ]>>uint (_fafb );_aeg |=bm2 .Data [_fgfa +_bdg -1]<<uint (8-_fafb );_aadff =_bcg &_aeg ;
_dbda +=tab [_aadff ];};if _dbda >=_acg {return true ,nil ;}else if _dbda +downcount [_fcfd ]-_efbe < _acg {return false ,nil ;};};case _eeed < _edba :for _fcfd =_becc ;_fcfd < _dgbc ;_fcfd ,_acae ,_fgfa =_fcfd +1,_acae +bm1 .RowStride ,_fgfa +bm2 .RowStride {for _bdg =0;
_bdg < _eeed ;_bdg ++{_bcg =bm1 .Data [_acae +_bdg ];_aeg =bm2 .Data [_fgfa +_bdg ]<<uint (-_fafb );_aeg |=bm2 .Data [_fgfa +_bdg +1]>>uint (8+_fafb );_aadff =_bcg &_aeg ;_dbda +=tab [_aadff ];};if _dbda >=_acg {return true ,nil ;}else if _fcgd :=_dbda +downcount [_fcfd ]-_efbe ;
_fcgd < _acg {return false ,nil ;};};case _edba >=_eeed :for _fcfd =_becc ;_fcfd < _dgbc ;_fcfd ,_acae ,_fgfa =_fcfd +1,_acae +bm1 .RowStride ,_fgfa +bm2 .RowStride {for _bdg =0;_bdg < _eeed ;_bdg ++{_bcg =bm1 .Data [_acae +_bdg ];_aeg =bm2 .Data [_fgfa +_bdg ]<<uint (-_fafb );
_aeg |=bm2 .Data [_fgfa +_bdg +1]>>uint (8+_fafb );_aadff =_bcg &_aeg ;_dbda +=tab [_aadff ];};_bcg =bm1 .Data [_acae +_bdg ];_aeg =bm2 .Data [_fgfa +_bdg ]<<uint (-_fafb );_aadff =_bcg &_aeg ;_dbda +=tab [_aadff ];if _dbda >=_acg {return true ,nil ;}else if _dbda +downcount [_fcfd ]-_efbe < _acg {return false ,nil ;
};};};_gcab :=float32 (_dbda )*float32 (_dbda )/(float32 (area1 )*float32 (area2 ));if _gcab >=scoreThreshold {_adf .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_dbda ,_acg ,_gcab ,scoreThreshold );
};return false ,nil ;};type Points []Point ;func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _ceca (src ,sequence ...);};func (_agf *Bitmap )setFourBytes (_daec int ,_def uint32 )error {if _daec +3> len (_agf .Data )-1{return _g .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_daec );
};_agf .Data [_daec ]=byte ((_def &0xff000000)>>24);_agf .Data [_daec +1]=byte ((_def &0xff0000)>>16);_agf .Data [_daec +2]=byte ((_def &0xff00)>>8);_agf .Data [_daec +3]=byte (_def &0xff);return nil ;};func (_cgef *Bitmap )inverseData (){if _ggeb :=_cgef .RasterOperation (0,0,_cgef .Width ,_cgef .Height ,PixNotDst ,nil ,0,0);
_ggeb !=nil {_adf .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ggeb );};if _cgef .Color ==Chocolate {_cgef .Color =Vanilla ;}else {_cgef .Color =Chocolate ;};};
var (_cefae *Bitmap ;_ebcc *Bitmap ;);const _gbgf =5000;func (_ccaa *Selection )setOrigin (_aacgb ,_bcba int ){_ccaa .Cy ,_ccaa .Cx =_aacgb ,_bcba };func _cgb (_bb ,_cfc *Bitmap ,_dag int ,_cfeg []byte ,_eacf int )(_ggda error ){const _ddgc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_dbf ,_afd ,_caa ,_eggf ,_abc ,_gbf ,_ecd ,_aee int ;_bcf ,_cca ,_cdf ,_dgff uint32 ;_fgd ,_cdd byte ;_cef uint16 ;);_fec :=make ([]byte ,4);_afa :=make ([]byte ,4);for _caa =0;_caa < _bb .Height -1;_caa ,_eggf =_caa +2,_eggf +1{_dbf =_caa *_bb .RowStride ;
_afd =_eggf *_cfc .RowStride ;for _abc ,_gbf =0,0;_abc < _eacf ;_abc ,_gbf =_abc +4,_gbf +1{for _ecd =0;_ecd < 4;_ecd ++{_aee =_dbf +_abc +_ecd ;if _aee <=len (_bb .Data )-1&&_aee < _dbf +_bb .RowStride {_fec [_ecd ]=_bb .Data [_aee ];}else {_fec [_ecd ]=0x00;
};_aee =_dbf +_bb .RowStride +_abc +_ecd ;if _aee <=len (_bb .Data )-1&&_aee < _dbf +(2*_bb .RowStride ){_afa [_ecd ]=_bb .Data [_aee ];}else {_afa [_ecd ]=0x00;};};_bcf =_fa .BigEndian .Uint32 (_fec );_cca =_fa .BigEndian .Uint32 (_afa );_cdf =_bcf &_cca ;
_cdf |=_cdf <<1;_dgff =_bcf |_cca ;_dgff &=_dgff <<1;_cca =_cdf |_dgff ;_cca &=0xaaaaaaaa;_bcf =_cca |(_cca <<7);_fgd =byte (_bcf >>24);_cdd =byte ((_bcf >>8)&0xff);_aee =_afd +_gbf ;if _aee +1==len (_cfc .Data )-1||_aee +1>=_afd +_cfc .RowStride {if _ggda =_cfc .SetByte (_aee ,_cfeg [_fgd ]);
_ggda !=nil {return _g .Wrapf (_ggda ,_ddgc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_aee );};}else {_cef =(uint16 (_cfeg [_fgd ])<<8)|uint16 (_cfeg [_cdd ]);if _ggda =_cfc .setTwoBytes (_aee ,_cef );_ggda !=nil {return _g .Wrapf (_ggda ,_ddgc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_aee );
};_gbf ++;};};};return nil ;};func (_geac *Bitmaps )AddBitmap (bm *Bitmap ){_geac .Values =append (_geac .Values ,bm )};func _ae (_dcgg *Bitmap ,_fda ...int )(_fbfb *Bitmap ,_caf error ){const _abeg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _dcgg ==nil {return nil ,_g .Error (_abeg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_fda )==0||len (_fda )> 4{return nil ,_g .Error (_abeg ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _fda [0]<=0{_adf .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_fbfb ,_caf =_cdec (nil ,_dcgg );if _caf !=nil {return nil ,_g .Wrap (_caf ,_abeg ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _fbfb ,nil ;};_fed :=_be ();_fbfb =_dcgg ;for _egag ,_egb :=range _fda {if _egb <=0{break ;};_fbfb ,_caf =_cge (_fbfb ,_egb ,_fed );if _caf !=nil {return nil ,_g .Wrapf (_caf ,_abeg ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_egag );
};};return _fbfb ,nil ;};func MakePixelCentroidTab8 ()[]int {return _ffe ()};func _dff (_ea *Bitmap ,_ddb int )(*Bitmap ,error ){const _eag ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _ea ==nil {return nil ,_g .Error (_eag ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _ddb ==1{return _cdec (nil ,_ea );};if _ddb !=2&&_ddb !=4&&_ddb !=8{return nil ,_g .Error (_eag ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_ec :=_ddb *_ea .Width ;_ddgf :=_ddb *_ea .Height ;_cd :=New (_ec ,_ddgf );var _eda error ;switch _ddb {case 2:_eda =_fc (_cd ,_ea );case 4:_eda =_aag (_cd ,_ea );case 8:_eda =_dde (_cd ,_ea );};if _eda !=nil {return nil ,_g .Wrap (_eda ,_eag ,"");};
return _cd ,nil ;};func TstESymbol (t *_e .T ,scale ...int )*Bitmap {_dbaff ,_adff :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_gd .NoError (t ,_adff );return TstGetScaledSymbol (t ,_dbaff ,scale ...);};func (_fbgg *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_egbc *Bitmaps ,_agecf *Boxes ,_gaga error ){const _eee ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _fbgg ==nil {return nil ,nil ,_g .Error (_eee ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_g .Error (_eee ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _fbgg .Zero (){_agecf =&Boxes {};_egbc =&Bitmaps {};return _egbc ,_agecf ,nil ;};switch components {case ComponentConn :_egbc =&Bitmaps {};if _agecf ,_gaga =_fbgg .ConnComponents (_egbc ,8);_gaga !=nil {return nil ,nil ,_g .Wrap (_gaga ,_eee ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_edde ,_eagb :=MorphSequence (_fbgg ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _eagb !=nil {return nil ,nil ,_g .Wrap (_eagb ,_eee ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _adf .Log .IsLogLevel (_adf .LogLevelTrace ){_adf .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_edde .String ());
};_aab :=&Bitmaps {};_agecf ,_eagb =_edde .ConnComponents (_aab ,8);if _eagb !=nil {return nil ,nil ,_g .Wrap (_eagb ,_eee ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _adf .Log .IsLogLevel (_adf .LogLevelTrace ){_adf .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_aab .String ());
};if _egbc ,_eagb =_aab .ClipToBitmap (_fbgg );_eagb !=nil {return nil ,nil ,_g .Wrap (_eagb ,_eee ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_gcdc :=1;
var _gdec *Bitmap ;switch {case _fbgg .XResolution <=200:_gdec =_fbgg ;case _fbgg .XResolution <=400:_gcdc =2;_gdec ,_gaga =_ae (_fbgg ,1,0,0,0);if _gaga !=nil {return nil ,nil ,_g .Wrap (_gaga ,_eee ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_gcdc =4;_gdec ,_gaga =_ae (_fbgg ,1,1,0,0);if _gaga !=nil {return nil ,nil ,_g .Wrap (_gaga ,_eee ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_gad ,_ ,_cadb :=_gfbb (_gdec );if _cadb !=nil {return nil ,nil ,_g .Wrap (_cadb ,_eee ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_ebag ,_cadb :=_eece (_gad ,_gcdc );if _cadb !=nil {return nil ,nil ,_g .Wrap (_cadb ,_eee ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_dgbf :=&Bitmaps {};if _agecf ,_cadb =_ebag .ConnComponents (_dgbf ,4);_cadb !=nil {return nil ,nil ,_g .Wrap (_cadb ,_eee ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _egbc ,_cadb =_dgbf .ClipToBitmap (_fbgg );_cadb !=nil {return nil ,nil ,_g .Wrap (_cadb ,_eee ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_egbc ,_gaga =_egbc .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _gaga !=nil {return nil ,nil ,_g .Wrap (_gaga ,_eee ,"");};_agecf ,_gaga =_agecf .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _gaga !=nil {return nil ,nil ,_g .Wrap (_gaga ,_eee ,"");};return _egbc ,_agecf ,nil ;};func (_afc *Bitmap )equivalent (_gdef *Bitmap )bool {if _afc ==_gdef {return true ;
};if !_afc .SizesEqual (_gdef ){return false ;};_bbc :=_fbag (_afc ,_gdef ,CmbOpXor );_cgg :=_afc .countPixels ();_edb :=int (0.25*float32 (_cgg ));if _bbc .thresholdPixelSum (_edb ){return false ;};var (_adge [9][9]int ;_eea [18][9]int ;_bcc [9][18]int ;
_fbg int ;_dcde int ;);_afdd :=9;_gabe :=_afc .Height /_afdd ;_ebfc :=_afc .Width /_afdd ;_cfa ,_bac :=_gabe /2,_ebfc /2;if _gabe < _ebfc {_cfa =_ebfc /2;_bac =_gabe /2;};_cdce :=float64 (_cfa )*float64 (_bac )*_f .Pi ;_becag :=int (float64 (_gabe *_ebfc /2)*0.9);
_gefd :=int (float64 (_ebfc *_gabe /2)*0.9);for _abgb :=0;_abgb < _afdd ;_abgb ++{_aeea :=_ebfc *_abgb +_fbg ;var _bafe int ;if _abgb ==_afdd -1{_fbg =0;_bafe =_afc .Width ;}else {_bafe =_aeea +_ebfc ;if ((_afc .Width -_fbg )%_afdd )> 0{_fbg ++;_bafe ++;
};};for _gbdc :=0;_gbdc < _afdd ;_gbdc ++{_daac :=_gabe *_gbdc +_dcde ;var _aba int ;if _gbdc ==_afdd -1{_dcde =0;_aba =_afc .Height ;}else {_aba =_daac +_gabe ;if (_afc .Height -_dcde )%_afdd > 0{_dcde ++;_aba ++;};};var _bea ,_cgag ,_bedg ,_eced int ;
_cfg :=(_aeea +_bafe )/2;_gefe :=(_daac +_aba )/2;for _eccg :=_aeea ;_eccg < _bafe ;_eccg ++{for _bdc :=_daac ;_bdc < _aba ;_bdc ++{if _bbc .GetPixel (_eccg ,_bdc ){if _eccg < _cfg {_bea ++;}else {_cgag ++;};if _bdc < _gefe {_eced ++;}else {_bedg ++;};
};};};_adge [_abgb ][_gbdc ]=_bea +_cgag ;_eea [_abgb *2][_gbdc ]=_bea ;_eea [_abgb *2+1][_gbdc ]=_cgag ;_bcc [_abgb ][_gbdc *2]=_eced ;_bcc [_abgb ][_gbdc *2+1]=_bedg ;};};for _gfa :=0;_gfa < _afdd *2-1;_gfa ++{for _cad :=0;_cad < (_afdd -1);_cad ++{var _ddcc int ;
for _agb :=0;_agb < 2;_agb ++{for _ffa :=0;_ffa < 2;_ffa ++{_ddcc +=_eea [_gfa +_agb ][_cad +_ffa ];};};if _ddcc > _gefd {return false ;};};};for _fcd :=0;_fcd < (_afdd -1);_fcd ++{for _fcac :=0;_fcac < ((_afdd *2)-1);_fcac ++{var _fbaaa int ;for _adfad :=0;
_adfad < 2;_adfad ++{for _cdca :=0;_cdca < 2;_cdca ++{_fbaaa +=_bcc [_fcd +_adfad ][_fcac +_cdca ];};};if _fbaaa > _becag {return false ;};};};for _aade :=0;_aade < (_afdd -2);_aade ++{for _feae :=0;_feae < (_afdd -2);_feae ++{var _aace ,_edf int ;for _dccf :=0;
_dccf < 3;_dccf ++{for _bgb :=0;_bgb < 3;_bgb ++{if _dccf ==_bgb {_aace +=_adge [_aade +_dccf ][_feae +_bgb ];};if (2-_dccf )==_bgb {_edf +=_adge [_aade +_dccf ][_feae +_bgb ];};};};if _aace > _gefd ||_edf > _gefd {return false ;};};};for _bfee :=0;_bfee < (_afdd -1);
_bfee ++{for _gaf :=0;_gaf < (_afdd -1);_gaf ++{var _gcg int ;for _ege :=0;_ege < 2;_ege ++{for _gge :=0;_gge < 2;_gge ++{_gcg +=_adge [_bfee +_ege ][_gaf +_gge ];};};if float64 (_gcg )> _cdce {return false ;};};};return true ;};const (SelDontCare SelectionValue =iota ;
SelHit ;SelMiss ;);func (_cgbd *ClassedPoints )SortByY (){_cgbd ._fgga =_cgbd .ySortFunction ();_a .Sort (_cgbd )};func _gbeec (_ddbc *Bitmap ,_bafef *_b .Stack ,_fgad ,_egdaf int )(_gaab *_df .Rectangle ,_cfdf error ){const _daeag ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ddbc ==nil {return nil ,_g .Error (_daeag ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bafef ==nil {return nil ,_g .Error (_daeag ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_gbeb ,_bgea :=_ddbc .Width ,_ddbc .Height ;_feaba :=_gbeb -1;_cfgf :=_bgea -1;if _fgad < 0||_fgad > _feaba ||_egdaf < 0||_egdaf > _cfgf ||!_ddbc .GetPixel (_fgad ,_egdaf ){return nil ,nil ;};_eafd :=_df .Rect (100000,100000,0,0);if _cfdf =_effd (_bafef ,_fgad ,_fgad ,_egdaf ,1,_cfgf ,&_eafd );
_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cfdf =_effd (_bafef ,_fgad ,_fgad ,_egdaf +1,-1,_cfgf ,&_eafd );_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_eafd .Min .X ,_eafd .Max .X =_fgad ,_fgad ;_eafd .Min .Y ,_eafd .Max .Y =_egdaf ,_egdaf ;var (_ccefc *fillSegment ;_edfe int ;);for _bafef .Len ()> 0{if _ccefc ,_cfdf =_bbcc (_bafef );_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"");};_egdaf =_ccefc ._dbfda ;
for _fgad =_ccefc ._gaad -1;_fgad >=0&&_ddbc .GetPixel (_fgad ,_egdaf );_fgad --{if _cfdf =_ddbc .SetPixel (_fgad ,_egdaf ,0);_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _fgad >=_ccefc ._gaad -1{for {for _fgad ++;
_fgad <=_ccefc ._cdae +1&&_fgad <=_feaba &&!_ddbc .GetPixel (_fgad ,_egdaf );_fgad ++{};_edfe =_fgad ;if !(_fgad <=_ccefc ._cdae +1&&_fgad <=_feaba ){break ;};for ;_fgad <=_feaba &&_ddbc .GetPixel (_fgad ,_egdaf );_fgad ++{if _cfdf =_ddbc .SetPixel (_fgad ,_egdaf ,0);
_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cfdf =_effd (_bafef ,_edfe ,_fgad -1,_ccefc ._dbfda ,_ccefc ._dcgf ,_cfgf ,&_eafd );_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _fgad > _ccefc ._cdae {if _cfdf =_effd (_bafef ,_ccefc ._cdae +1,_fgad -1,_ccefc ._dbfda ,-_ccefc ._dcgf ,_cfgf ,&_eafd );_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_edfe =_fgad +1;if _edfe < _ccefc ._gaad {if _cfdf =_effd (_bafef ,_edfe ,_ccefc ._gaad -1,_ccefc ._dbfda ,-_ccefc ._dcgf ,_cfgf ,&_eafd );_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_fgad =_ccefc ._gaad ;for {for ;_fgad <=_feaba &&_ddbc .GetPixel (_fgad ,_egdaf );_fgad ++{if _cfdf =_ddbc .SetPixel (_fgad ,_egdaf ,0);_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cfdf =_effd (_bafef ,_edfe ,_fgad -1,_ccefc ._dbfda ,_ccefc ._dcgf ,_cfgf ,&_eafd );
_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fgad > _ccefc ._cdae {if _cfdf =_effd (_bafef ,_ccefc ._cdae +1,_fgad -1,_ccefc ._dbfda ,-_ccefc ._dcgf ,_cfgf ,&_eafd );_cfdf !=nil {return nil ,_g .Wrap (_cfdf ,_daeag ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _fgad ++;_fgad <=_ccefc ._cdae +1&&_fgad <=_feaba &&!_ddbc .GetPixel (_fgad ,_egdaf );_fgad ++{};_edfe =_fgad ;if !(_fgad <=_ccefc ._cdae +1&&_fgad <=_feaba ){break ;};};};_eafd .Max .X ++;_eafd .Max .Y ++;return &_eafd ,nil ;};func _fgfd (_cbce *Bitmap ,_acgb ,_ddfce ,_eedb ,_fbd int ,_afeb RasterOperator ,_gaa *Bitmap ,_dacdg ,_dada int )error {var (_ffde bool ;
_ffacc bool ;_ddae int ;_aadgg int ;_dfba int ;_cag bool ;_gfdc byte ;_affe int ;_cbgf int ;_gagg int ;_bgfc ,_dcbb int ;);_bdbd :=8-(_acgb &7);_gced :=_ddgbf [_bdbd ];_abeb :=_cbce .RowStride *_ddfce +(_acgb >>3);_gade :=_gaa .RowStride *_dada +(_dacdg >>3);
if _eedb < _bdbd {_ffde =true ;_gced &=_ceggg [8-_bdbd +_eedb ];};if !_ffde {_ddae =(_eedb -_bdbd )>>3;if _ddae > 0{_ffacc =true ;_aadgg =_abeb +1;_dfba =_gade +1;};};_affe =(_acgb +_eedb )&7;if !(_ffde ||_affe ==0){_cag =true ;_gfdc =_ceggg [_affe ];_cbgf =_abeb +1+_ddae ;
_gagg =_gade +1+_ddae ;};switch _afeb {case PixSrc :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],_gaa .Data [_gade ],_gced );_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;};if _ffacc {for _bgfc =0;_bgfc < _fbd ;
_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]=_gaa .Data [_dfba +_dcbb ];};_aadgg +=_cbce .RowStride ;_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],_gaa .Data [_gagg ],_gfdc );
_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixNotSrc :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],^_gaa .Data [_gade ],_gced );_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;};if _ffacc {for _bgfc =0;
_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]=^_gaa .Data [_dfba +_dcbb ];};_aadgg +=_cbce .RowStride ;_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],^_gaa .Data [_gagg ],_gfdc );
_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixSrcOrDst :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],_gaa .Data [_gade ]|_cbce .Data [_abeb ],_gced );_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;
};if _ffacc {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]|=_gaa .Data [_dfba +_dcbb ];};_aadgg +=_cbce .RowStride ;_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],_gaa .Data [_gagg ]|_cbce .Data [_cbgf ],_gfdc );
_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixSrcAndDst :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],_gaa .Data [_gade ]&_cbce .Data [_abeb ],_gced );_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;
};if _ffacc {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]&=_gaa .Data [_dfba +_dcbb ];};_aadgg +=_cbce .RowStride ;_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],_gaa .Data [_gagg ]&_cbce .Data [_cbgf ],_gfdc );
_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixSrcXorDst :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],_gaa .Data [_gade ]^_cbce .Data [_abeb ],_gced );_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;
};if _ffacc {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]^=_gaa .Data [_dfba +_dcbb ];};_aadgg +=_cbce .RowStride ;_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],_gaa .Data [_gagg ]^_cbce .Data [_cbgf ],_gfdc );
_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixNotSrcOrDst :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],^(_gaa .Data [_gade ])|_cbce .Data [_abeb ],_gced );_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;
};if _ffacc {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]|=^(_gaa .Data [_dfba +_dcbb ]);};_aadgg +=_cbce .RowStride ;_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],^(_gaa .Data [_gagg ])|_cbce .Data [_cbgf ],_gfdc );
_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixNotSrcAndDst :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],^(_gaa .Data [_gade ])&_cbce .Data [_abeb ],_gced );_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;
};if _ffacc {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]&=^_gaa .Data [_dfba +_dcbb ];};_aadgg +=_cbce .RowStride ;_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],^(_gaa .Data [_gagg ])&_cbce .Data [_cbgf ],_gfdc );
_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixSrcOrNotDst :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],_gaa .Data [_gade ]|^(_cbce .Data [_abeb ]),_gced );_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;
};if _ffacc {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]=_gaa .Data [_dfba +_dcbb ]|^(_cbce .Data [_aadgg +_dcbb ]);};_aadgg +=_cbce .RowStride ;_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;
_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],_gaa .Data [_gagg ]|^(_cbce .Data [_cbgf ]),_gfdc );_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixSrcAndNotDst :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],_gaa .Data [_gade ]&^(_cbce .Data [_abeb ]),_gced );
_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;};if _ffacc {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]=_gaa .Data [_dfba +_dcbb ]&^(_cbce .Data [_aadgg +_dcbb ]);};_aadgg +=_cbce .RowStride ;
_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],_gaa .Data [_gagg ]&^(_cbce .Data [_cbgf ]),_gfdc );_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixNotPixSrcOrDst :for _bgfc =0;
_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],^(_gaa .Data [_gade ]|_cbce .Data [_abeb ]),_gced );_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;};if _ffacc {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;
_dcbb ++{_cbce .Data [_aadgg +_dcbb ]=^(_gaa .Data [_dfba +_dcbb ]|_cbce .Data [_aadgg +_dcbb ]);};_aadgg +=_cbce .RowStride ;_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],^(_gaa .Data [_gagg ]|_cbce .Data [_cbgf ]),_gfdc );
_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixNotPixSrcAndDst :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],^(_gaa .Data [_gade ]&_cbce .Data [_abeb ]),_gced );_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;
};if _ffacc {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]=^(_gaa .Data [_dfba +_dcbb ]&_cbce .Data [_aadgg +_dcbb ]);};_aadgg +=_cbce .RowStride ;_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;
_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],^(_gaa .Data [_gagg ]&_cbce .Data [_cbgf ]),_gfdc );_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};case PixNotPixSrcXorDst :for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_abeb ]=_ggbgd (_cbce .Data [_abeb ],^(_gaa .Data [_gade ]^_cbce .Data [_abeb ]),_gced );
_abeb +=_cbce .RowStride ;_gade +=_gaa .RowStride ;};if _ffacc {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{for _dcbb =0;_dcbb < _ddae ;_dcbb ++{_cbce .Data [_aadgg +_dcbb ]=^(_gaa .Data [_dfba +_dcbb ]^_cbce .Data [_aadgg +_dcbb ]);};_aadgg +=_cbce .RowStride ;
_dfba +=_gaa .RowStride ;};};if _cag {for _bgfc =0;_bgfc < _fbd ;_bgfc ++{_cbce .Data [_cbgf ]=_ggbgd (_cbce .Data [_cbgf ],^(_gaa .Data [_gagg ]^_cbce .Data [_cbgf ]),_gfdc );_cbgf +=_cbce .RowStride ;_gagg +=_gaa .RowStride ;};};default:_adf .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_afeb );
return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_cafe *ClassedPoints )validateIntSlice ()error {const _ebfg ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_gebd :=range _cafe .IntSlice {if _gebd >=(_cafe .Points .Size ()){return _g .Errorf (_ebfg ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_gebd ,_cafe .Points .Size ());
};};return nil ;};func (_adc *Bitmap )Copy ()*Bitmap {_dad :=make ([]byte ,len (_adc .Data ));copy (_dad ,_adc .Data );return &Bitmap {Width :_adc .Width ,Height :_adc .Height ,RowStride :_adc .RowStride ,Data :_dad ,Color :_adc .Color ,Text :_adc .Text ,BitmapNumber :_adc .BitmapNumber ,Special :_adc .Special };
};func (_gccdd *Bitmaps )String ()string {_bfff :=_gc .Builder {};for _ ,_afgd :=range _gccdd .Values {_bfff .WriteString (_afgd .String ());_bfff .WriteRune ('\n');};return _bfff .String ();};func New (width ,height int )*Bitmap {_fcf :=_faa (width ,height );
_fcf .Data =make ([]byte ,height *_fcf .RowStride );return _fcf ;};func (_egafg *byWidth )Swap (i ,j int ){_egafg .Values [i ],_egafg .Values [j ]=_egafg .Values [j ],_egafg .Values [i ];if _egafg .Boxes !=nil {_egafg .Boxes [i ],_egafg .Boxes [j ]=_egafg .Boxes [j ],_egafg .Boxes [i ];
};};func (_fcgc *Boxes )Add (box *_df .Rectangle )error {if _fcgc ==nil {return _g .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_fcgc =append (*_fcgc ,box );
return nil ;};func TstWSymbol (t *_e .T ,scale ...int )*Bitmap {_aacf ,_ebbd :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_gd .NoError (t ,_ebbd );return TstGetScaledSymbol (t ,_aacf ,scale ...);};func (_efcc Points )Get (i int )(Point ,error ){if i > len (_efcc )-1{return Point {},_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _efcc [i ],nil ;};func (_eacfd Points )GetIntY (i int )(int ,error ){if i >=len (_eacfd ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_eacfd [i ].Y ),nil ;};type shift int ;func (_becg *ClassedPoints )YAtIndex (i int )float32 {return (*_becg .Points )[_becg .IntSlice [i ]].Y };func _cded (_eaga *Bitmap ,_ebfe *Bitmap ,_bgeb *Selection ,_gegg **Bitmap )(*Bitmap ,error ){const _cfac ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _ebfe ==nil {return nil ,_g .Error (_cfac ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _bgeb ==nil {return nil ,_g .Error (_cfac ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_gacd ,_ceaf :=_bgeb .Height ,_bgeb .Width ;if _gacd ==0||_ceaf ==0{return nil ,_g .Error (_cfac ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _eaga ==nil {_eaga =_ebfe .createTemplate ();
*_gegg =_ebfe ;return _eaga ,nil ;};_eaga .Width =_ebfe .Width ;_eaga .Height =_ebfe .Height ;_eaga .RowStride =_ebfe .RowStride ;_eaga .Color =_ebfe .Color ;_eaga .Data =make ([]byte ,_ebfe .RowStride *_ebfe .Height );if _eaga ==_ebfe {*_gegg =_ebfe .Copy ();
}else {*_gegg =_ebfe ;};return _eaga ,nil ;};func (_ffcc *Bitmaps )HeightSorter ()func (_bbde ,_aead int )bool {return func (_ecca ,_affef int )bool {_ffdcc :=_ffcc .Values [_ecca ].Height < _ffcc .Values [_affef ].Height ;_adf .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_ffcc .Values [_ecca ].Height ,_ffcc .Values [_affef ].Height ,_ffdcc );
return _ffdcc ;};};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_dfgb bool ,_eadfb error ){const _ccfc ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_cfab ,_egdf :=p1 .Width ,p1 .Height ;_bcfb ,_fcda :=p3 .Width ,p3 .Height ;if _b .Abs (_cfab -_bcfb )> maxDiffW {return false ,nil ;};if _b .Abs (_egdf -_fcda )> maxDiffH {return false ,nil ;};_bbg :=int (float32 (area1 )*(1.0-rank )+0.5);_ffcb :=int (float32 (area3 )*(1.0-rank )+0.5);
var _cbcg ,_cae int ;if delX >=0{_cbcg =int (delX +0.5);}else {_cbcg =int (delX -0.5);};if delY >=0{_cae =int (delY +0.5);}else {_cae =int (delY -0.5);};_caab :=p1 .CreateTemplate ();if _eadfb =_caab .RasterOperation (0,0,_cfab ,_egdf ,PixSrc ,p1 ,0,0);
_eadfb !=nil {return false ,_g .Wrap (_eadfb ,_ccfc ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _eadfb =_caab .RasterOperation (_cbcg ,_cae ,_cfab ,_egdf ,PixNotSrcAndDst ,p4 ,0,0);_eadfb !=nil {return false ,_g .Wrap (_eadfb ,_ccfc ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_dfgb ,_eadfb =_caab .ThresholdPixelSum (_bbg ,tab8 );if _eadfb !=nil {return false ,_g .Wrap (_eadfb ,_ccfc ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _dfgb {return false ,nil ;};if _eadfb =_caab .RasterOperation (_cbcg ,_cae ,_bcfb ,_fcda ,PixSrc ,p3 ,0,0);
_eadfb !=nil {return false ,_g .Wrap (_eadfb ,_ccfc ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _eadfb =_caab .RasterOperation (0,0,_bcfb ,_fcda ,PixNotSrcAndDst ,p2 ,0,0);_eadfb !=nil {return false ,_g .Wrap (_eadfb ,_ccfc ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_dfgb ,_eadfb =_caab .ThresholdPixelSum (_ffcb ,tab8 );if _eadfb !=nil {return false ,_g .Wrap (_eadfb ,_ccfc ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_dfgb ,nil ;};func _dge ()(_cce [256]uint32 ){for _edd :=0;_edd < 256;
_edd ++{if _edd &0x01!=0{_cce [_edd ]|=0xf;};if _edd &0x02!=0{_cce [_edd ]|=0xf0;};if _edd &0x04!=0{_cce [_edd ]|=0xf00;};if _edd &0x08!=0{_cce [_edd ]|=0xf000;};if _edd &0x10!=0{_cce [_edd ]|=0xf0000;};if _edd &0x20!=0{_cce [_edd ]|=0xf00000;};if _edd &0x40!=0{_cce [_edd ]|=0xf000000;
};if _edd &0x80!=0{_cce [_edd ]|=0xf0000000;};};return _cce ;};func (_gddb *Bitmap )Equals (s *Bitmap )bool {if len (_gddb .Data )!=len (s .Data )||_gddb .Width !=s .Width ||_gddb .Height !=s .Height {return false ;};for _bceb :=0;_bceb < _gddb .Height ;
_bceb ++{_gedc :=_bceb *_gddb .RowStride ;for _age :=0;_age < _gddb .RowStride ;_age ++{if _gddb .Data [_gedc +_age ]!=s .Data [_gedc +_age ]{return false ;};};};return true ;};func (_ffd *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_ffd .Width ,Height :_ffd .Height ,RowStride :_ffd .RowStride ,Color :_ffd .Color ,Text :_ffd .Text ,BitmapNumber :_ffd .BitmapNumber ,Special :_ffd .Special ,Data :make ([]byte ,len (_ffd .Data ))};
};func Centroids (bms []*Bitmap )(*Points ,error ){_acaa :=make ([]Point ,len (bms ));_dffe :=_ffe ();_ddfe :=_dedg ();var _bbad error ;for _bdgc ,_agfd :=range bms {_acaa [_bdgc ],_bbad =_agfd .centroid (_dffe ,_ddfe );if _bbad !=nil {return nil ,_bbad ;
};};_fbfe :=Points (_acaa );return &_fbfe ,nil ;};func TstImageBitmap ()*Bitmap {return _ebcc .Copy ()};func (_abffa *Bitmaps )makeSizeIndicator (_cccbg ,_abcbd int ,_bbcb LocationFilter ,_bcdg SizeComparison )(_cdbbg *_b .NumSlice ,_cebea error ){const _bcab ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _abffa ==nil {return nil ,_g .Error (_bcab ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _bbcb {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_bcab ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_bbcb );
};switch _bcdg {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_bcab ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_bcdg );
};_cdbbg =&_b .NumSlice {};var (_gdbd ,_cbgeb ,_cegc int ;_ggdg *Bitmap ;);for _ ,_ggdg =range _abffa .Values {_gdbd =0;_cbgeb ,_cegc =_ggdg .Width ,_ggdg .Height ;switch _bbcb {case LocSelectWidth :if (_bcdg ==SizeSelectIfLT &&_cbgeb < _cccbg )||(_bcdg ==SizeSelectIfGT &&_cbgeb > _cccbg )||(_bcdg ==SizeSelectIfLTE &&_cbgeb <=_cccbg )||(_bcdg ==SizeSelectIfGTE &&_cbgeb >=_cccbg )||(_bcdg ==SizeSelectIfEQ &&_cbgeb ==_cccbg ){_gdbd =1;
};case LocSelectHeight :if (_bcdg ==SizeSelectIfLT &&_cegc < _abcbd )||(_bcdg ==SizeSelectIfGT &&_cegc > _abcbd )||(_bcdg ==SizeSelectIfLTE &&_cegc <=_abcbd )||(_bcdg ==SizeSelectIfGTE &&_cegc >=_abcbd )||(_bcdg ==SizeSelectIfEQ &&_cegc ==_abcbd ){_gdbd =1;
};case LocSelectIfEither :if (_bcdg ==SizeSelectIfLT &&(_cbgeb < _cccbg ||_cegc < _abcbd ))||(_bcdg ==SizeSelectIfGT &&(_cbgeb > _cccbg ||_cegc > _abcbd ))||(_bcdg ==SizeSelectIfLTE &&(_cbgeb <=_cccbg ||_cegc <=_abcbd ))||(_bcdg ==SizeSelectIfGTE &&(_cbgeb >=_cccbg ||_cegc >=_abcbd ))||(_bcdg ==SizeSelectIfEQ &&(_cbgeb ==_cccbg ||_cegc ==_abcbd )){_gdbd =1;
};case LocSelectIfBoth :if (_bcdg ==SizeSelectIfLT &&(_cbgeb < _cccbg &&_cegc < _abcbd ))||(_bcdg ==SizeSelectIfGT &&(_cbgeb > _cccbg &&_cegc > _abcbd ))||(_bcdg ==SizeSelectIfLTE &&(_cbgeb <=_cccbg &&_cegc <=_abcbd ))||(_bcdg ==SizeSelectIfGTE &&(_cbgeb >=_cccbg &&_cegc >=_abcbd ))||(_bcdg ==SizeSelectIfEQ &&(_cbgeb ==_cccbg &&_cegc ==_abcbd )){_gdbd =1;
};};_cdbbg .AddInt (_gdbd );};return _cdbbg ,nil ;};func TstOSymbol (t *_e .T ,scale ...int )*Bitmap {_caec ,_fcdd :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_gd .NoError (t ,_fcdd );return TstGetScaledSymbol (t ,_caec ,scale ...);};func (_aegb *Bitmaps )CountPixels ()*_b .NumSlice {_cdad :=&_b .NumSlice {};
for _ ,_bgfd :=range _aegb .Values {_cdad .AddInt (_bgfd .CountPixels ());};return _cdad ;};func TstImageBitmapInverseData ()[]byte {_aefbf :=_ebcc .Copy ();_aefbf .InverseData ();return _aefbf .Data ;};func TstCSymbol (t *_e .T )*Bitmap {t .Helper ();
_gggb :=New (6,6);_gd .NoError (t ,_gggb .SetPixel (1,0,1));_gd .NoError (t ,_gggb .SetPixel (2,0,1));_gd .NoError (t ,_gggb .SetPixel (3,0,1));_gd .NoError (t ,_gggb .SetPixel (4,0,1));_gd .NoError (t ,_gggb .SetPixel (0,1,1));_gd .NoError (t ,_gggb .SetPixel (5,1,1));
_gd .NoError (t ,_gggb .SetPixel (0,2,1));_gd .NoError (t ,_gggb .SetPixel (0,3,1));_gd .NoError (t ,_gggb .SetPixel (0,4,1));_gd .NoError (t ,_gggb .SetPixel (5,4,1));_gd .NoError (t ,_gggb .SetPixel (1,5,1));_gd .NoError (t ,_gggb .SetPixel (2,5,1));
_gd .NoError (t ,_gggb .SetPixel (3,5,1));_gd .NoError (t ,_gggb .SetPixel (4,5,1));return _gggb ;};func TstWordBitmap (t *_e .T ,scale ...int )*Bitmap {_bffg :=1;if len (scale )> 0{_bffg =scale [0];};_bgee :=3;_bffgb :=9+7+15+2*_bgee ;_dddf :=5+_bgee +5;
_baga :=New (_bffgb *_bffg ,_dddf *_bffg );_dffg :=&Bitmaps {};var _geggb *int ;_bgee *=_bffg ;_eede :=0;_geggb =&_eede ;_adce :=0;_daeef :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,1*_bffg );_daeef =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,_bgee );_daeef =TstISymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,1*_bffg );_daeef =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,_bgee );_daeef =TstNSymbol (t ,scale ...);
TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,1*_bffg );_daeef =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,1*_bffg );_daeef =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,0);*_geggb =0;_adce =5*_bffg +_bgee ;
_daeef =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,1*_bffg );_daeef =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,_bgee );_daeef =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,1*_bffg );
_daeef =TstESymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,1*_bffg );_daeef =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,1*_bffg );_daeef =TstESymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,1*_bffg );
_daeef =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_dffg ,_daeef ,_geggb ,_adce ,0);TstWriteSymbols (t ,_dffg ,_baga );return _baga ;};type Component int ;func _cbff (_dgdg *Bitmap ,_aagf *Bitmap ,_ecce int )(_cfaad error ){const _fagg ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_beba :=_defc (_dgdg .Height ,_aagf .Height );_bced :=_defc (_dgdg .RowStride ,_aagf .RowStride );switch _ecce {case 4:_cfaad =_ebca (_dgdg ,_aagf ,_beba ,_bced );case 8:_cfaad =_eafg (_dgdg ,_aagf ,_beba ,_bced );default:return _g .Errorf (_fagg ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_ecce );
};if _cfaad !=nil {return _g .Wrap (_cfaad ,_fagg ,"");};return nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func _fgdg (_gafge *Bitmap ,_daed ,_fdfg ,_eggff ,_efcca int ,_ffdd RasterOperator ,_dfeg *Bitmap ,_bdge ,_bebb int )error {const _gdccf ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _gafge ==nil {return _g .Error (_gdccf ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _ffdd ==PixDst {return nil ;};switch _ffdd {case PixClr ,PixSet ,PixNotDst :_acdg (_gafge ,_daed ,_fdfg ,_eggff ,_efcca ,_ffdd );
return nil ;};if _dfeg ==nil {_adf .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _g .Error (_gdccf ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cdfd :=_bgge (_gafge ,_daed ,_fdfg ,_eggff ,_efcca ,_ffdd ,_dfeg ,_bdge ,_bebb );_cdfd !=nil {return _g .Wrap (_cdfd ,_gdccf ,"");
};return nil ;};func TstWriteSymbols (t *_e .T ,bms *Bitmaps ,src *Bitmap ){for _gagb :=0;_gagb < bms .Size ();_gagb ++{_feece :=bms .Values [_gagb ];_bfdd :=bms .Boxes [_gagb ];_gaee :=src .RasterOperation (_bfdd .Min .X ,_bfdd .Min .Y ,_feece .Width ,_feece .Height ,PixSrc ,_feece ,0,0);
_gd .NoError (t ,_gaee );};};func (_gfeb *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_fdc *Boxes ,_gdf error ){const _gbe ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _gfeb ==nil {return nil ,_g .Error (_gbe ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_gfeb )==0{return _gfeb ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_gbe ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_g .Errorf (_gbe ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_gabg :=_gfeb .makeSizeIndicator (width ,height ,tp ,relation );_gac ,_gdf :=_gfeb .selectWithIndicator (_gabg );if _gdf !=nil {return nil ,_g .Wrap (_gdf ,_gbe ,"");};return _gac ,nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _efde (d ,s ,hSize ,vSize )};
func _efbb (_cefa ,_edg ,_cfge *Bitmap )(*Bitmap ,error ){const _acb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _edg ==nil {return nil ,_g .Error (_acb ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _cfge ==nil {return nil ,_g .Error (_acb ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _cefa ==_cfge {return nil ,_g .Error (_acb ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_edg .SizesEqual (_cfge ){_adf .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_acb );
};var _cafa error ;if _cefa ,_cafa =_cdec (_cefa ,_edg );_cafa !=nil {return nil ,_g .Wrap (_cafa ,_acb ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _cafa =_cefa .RasterOperation (0,0,_cefa .Width ,_cefa .Height ,PixSrcXorDst ,_cfge ,0,0);
_cafa !=nil {return nil ,_g .Wrap (_cafa ,_acb ,"");};return _cefa ,nil ;};func NewClassedPoints (points *Points ,classes _b .IntSlice )(*ClassedPoints ,error ){const _bgcd ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_g .Error (_bgcd ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_g .Error (_bgcd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_ddga :=&ClassedPoints {Points :points ,IntSlice :classes };if _ecdaf :=_ddga .validateIntSlice ();_ecdaf !=nil {return nil ,_g .Wrap (_ecdaf ,_bgcd ,"");};return _ddga ,nil ;};func _fca (_bg ,_aga *Bitmap ,_dcc int ,_egc []byte ,_fga int )(_ecc error ){const _cbgc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_cbb ,_gbb ,_bcac ,_fbcd ,_eab ,_ddf ,_dfd ,_fab int ;_fbcg ,_ddcb ,_bcd ,_dfa uint32 ;_cac ,_agad byte ;_acc uint16 ;);_agaa :=make ([]byte ,4);_bde :=make ([]byte ,4);for _bcac =0;_bcac < _bg .Height -1;_bcac ,_fbcd =_bcac +2,_fbcd +1{_cbb =_bcac *_bg .RowStride ;
_gbb =_fbcd *_aga .RowStride ;for _eab ,_ddf =0,0;_eab < _fga ;_eab ,_ddf =_eab +4,_ddf +1{for _dfd =0;_dfd < 4;_dfd ++{_fab =_cbb +_eab +_dfd ;if _fab <=len (_bg .Data )-1&&_fab < _cbb +_bg .RowStride {_agaa [_dfd ]=_bg .Data [_fab ];}else {_agaa [_dfd ]=0x00;
};_fab =_cbb +_bg .RowStride +_eab +_dfd ;if _fab <=len (_bg .Data )-1&&_fab < _cbb +(2*_bg .RowStride ){_bde [_dfd ]=_bg .Data [_fab ];}else {_bde [_dfd ]=0x00;};};_fbcg =_fa .BigEndian .Uint32 (_agaa );_ddcb =_fa .BigEndian .Uint32 (_bde );_bcd =_fbcg &_ddcb ;
_bcd |=_bcd <<1;_dfa =_fbcg |_ddcb ;_dfa &=_dfa <<1;_ddcb =_bcd &_dfa ;_ddcb &=0xaaaaaaaa;_fbcg =_ddcb |(_ddcb <<7);_cac =byte (_fbcg >>24);_agad =byte ((_fbcg >>8)&0xff);_fab =_gbb +_ddf ;if _fab +1==len (_aga .Data )-1||_fab +1>=_gbb +_aga .RowStride {if _ecc =_aga .SetByte (_fab ,_egc [_cac ]);
_ecc !=nil {return _g .Wrapf (_ecc ,_cbgc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fab );};}else {_acc =(uint16 (_egc [_cac ])<<8)|uint16 (_egc [_agad ]);if _ecc =_aga .setTwoBytes (_fab ,_acc );_ecc !=nil {return _g .Wrapf (_ecc ,_cbgc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fab );
};_ddf ++;};};};return nil ;};func (_bbed *byHeight )Swap (i ,j int ){_bbed .Values [i ],_bbed .Values [j ]=_bbed .Values [j ],_bbed .Values [i ];if _bbed .Boxes !=nil {_bbed .Boxes [i ],_bbed .Boxes [j ]=_bbed .Boxes [j ],_bbed .Boxes [i ];};};func Extract (roi _df .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ecb :=New (roi .Dx (),roi .Dy ());
_dbbf :=roi .Min .X &0x07;_cabf :=8-_dbbf ;_egcf :=uint (8-_ecb .Width &0x07);_aed :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_fbff :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_bcb :=_ecb .RowStride ==_fbff +1-_aed ;var _egca int ;for _gafg :=roi .Min .Y ;
_gafg < roi .Max .Y ;_gafg ++{_adbc :=_aed ;_gdfg :=_egca ;switch {case _aed ==_fbff :_cbfc ,_bgcf :=src .GetByte (_adbc );if _bgcf !=nil {return nil ,_bgcf ;};_cbfc <<=uint (_dbbf );_bgcf =_ecb .SetByte (_gdfg ,_eead (_egcf ,_cbfc ));if _bgcf !=nil {return nil ,_bgcf ;
};case _dbbf ==0:for _acea :=_aed ;_acea <=_fbff ;_acea ++{_faae ,_egda :=src .GetByte (_adbc );if _egda !=nil {return nil ,_egda ;};_adbc ++;if _acea ==_fbff &&_bcb {_faae =_eead (_egcf ,_faae );};_egda =_ecb .SetByte (_gdfg ,_faae );if _egda !=nil {return nil ,_egda ;
};_gdfg ++;};default:_cdff :=_fbab (src ,_ecb ,uint (_dbbf ),uint (_cabf ),_egcf ,_aed ,_fbff ,_bcb ,_adbc ,_gdfg );if _cdff !=nil {return nil ,_cdff ;};};_aed +=src .RowStride ;_fbff +=src .RowStride ;_egca +=_ecb .RowStride ;};return _ecb ,nil ;};func TstDSymbol (t *_e .T ,scale ...int )*Bitmap {_gdcbf ,_gggg :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});
_gd .NoError (t ,_gggg );return TstGetScaledSymbol (t ,_gdcbf ,scale ...);};func TstVSymbol (t *_e .T ,scale ...int )*Bitmap {_bfedb ,_fadf :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_gd .NoError (t ,_fadf );return TstGetScaledSymbol (t ,_bfedb ,scale ...);
};func _ceca (_ecf *Bitmap ,_egcff ...MorphProcess )(_cbgg *Bitmap ,_aced error ){const _bgad ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _ecf ==nil {return nil ,_g .Error (_bgad ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_egcff )==0{return nil ,_g .Error (_bgad ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _aced =_bdfe (_egcff ...);
_aced !=nil {return nil ,_g .Wrap (_aced ,_bgad ,"");};var _bbfe ,_facc ,_gdcb int ;_cbgg =_ecf .Copy ();for _ ,_gdgb :=range _egcff {switch _gdgb .Operation {case MopDilation :_bbfe ,_facc =_gdgb .getWidthHeight ();_cbgg ,_aced =DilateBrick (nil ,_cbgg ,_bbfe ,_facc );
if _aced !=nil {return nil ,_g .Wrap (_aced ,_bgad ,"");};case MopErosion :_bbfe ,_facc =_gdgb .getWidthHeight ();_cbgg ,_aced =_gee (nil ,_cbgg ,_bbfe ,_facc );if _aced !=nil {return nil ,_g .Wrap (_aced ,_bgad ,"");};case MopOpening :_bbfe ,_facc =_gdgb .getWidthHeight ();
_cbgg ,_aced =_cccb (nil ,_cbgg ,_bbfe ,_facc );if _aced !=nil {return nil ,_g .Wrap (_aced ,_bgad ,"");};case MopClosing :_bbfe ,_facc =_gdgb .getWidthHeight ();_cbgg ,_aced =_cadbb (nil ,_cbgg ,_bbfe ,_facc );if _aced !=nil {return nil ,_g .Wrap (_aced ,_bgad ,"");
};case MopRankBinaryReduction :_cbgg ,_aced =_ae (_cbgg ,_gdgb .Arguments ...);if _aced !=nil {return nil ,_g .Wrap (_aced ,_bgad ,"");};case MopReplicativeBinaryExpansion :_cbgg ,_aced =_eece (_cbgg ,_gdgb .Arguments [0]);if _aced !=nil {return nil ,_g .Wrap (_aced ,_bgad ,"");
};case MopAddBorder :_gdcb =_gdgb .Arguments [0];_cbgg ,_aced =_cbgg .AddBorder (_gdcb ,0);if _aced !=nil {return nil ,_g .Wrap (_aced ,_bgad ,"");};default:return nil ,_g .Error (_bgad ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _gdcb > 0{_cbgg ,_aced =_cbgg .RemoveBorder (_gdcb );if _aced !=nil {return nil ,_g .Wrap (_aced ,_bgad ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _cbgg ,nil ;};func (_aceb *Bitmap )Zero ()bool {_fcg :=_aceb .Width /8;
_afdc :=_aceb .Width &7;var _eacb byte ;if _afdc !=0{_eacb =byte (0xff<<uint (8-_afdc ));};var _fccf ,_dfcg ,_dcgb int ;for _dfcg =0;_dfcg < _aceb .Height ;_dfcg ++{_fccf =_aceb .RowStride *_dfcg ;for _dcgb =0;_dcgb < _fcg ;_dcgb ,_fccf =_dcgb +1,_fccf +1{if _aceb .Data [_fccf ]!=0{return false ;
};};if _afdc > 0{if _aceb .Data [_fccf ]&_eacb !=0{return false ;};};};return true ;};func _eef (_fbfg ,_efe ,_fgcc *Bitmap )(*Bitmap ,error ){const _fdgf ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _efe ==nil {return nil ,_g .Error (_fdgf ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _fgcc ==nil {return nil ,_g .Error (_fdgf ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _acee error ;switch {case _fbfg ==_efe :if _acee =_fbfg .RasterOperation (0,0,_efe .Width ,_efe .Height ,PixNotSrcAndDst ,_fgcc ,0,0);
_acee !=nil {return nil ,_g .Wrap (_acee ,_fdgf ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _fbfg ==_fgcc :if _acee =_fbfg .RasterOperation (0,0,_efe .Width ,_efe .Height ,PixNotSrcAndDst ,_efe ,0,0);_acee !=nil {return nil ,_g .Wrap (_acee ,_fdgf ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_fbfg ,_acee =_cdec (_fbfg ,_efe );if _acee !=nil {return nil ,_g .Wrap (_acee ,_fdgf ,"");};if _acee =_fbfg .RasterOperation (0,0,_efe .Width ,_efe .Height ,PixNotSrcAndDst ,_fgcc ,0,0);_acee !=nil {return nil ,_g .Wrap (_acee ,_fdgf ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _fbfg ,nil ;};func init (){const _gfad ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_cefae =New (50,40);var _fecg error ;_cefae ,_fecg =_cefae .AddBorder (2,1);if _fecg !=nil {panic (_g .Wrap (_fecg ,_gfad ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};_ebcc ,_fecg =NewWithData (50,22,_cbgb );if _fecg !=nil {panic (_g .Wrap (_fecg ,_gfad ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func (_beca *Bitmap )SizesEqual (s *Bitmap )bool {if _beca ==s {return true ;};if _beca .Width !=s .Width ||_beca .Height !=s .Height {return false ;
};return true ;};func _efde (_aefd ,_bdda *Bitmap ,_abda ,_agfb int )(*Bitmap ,error ){const _aefb ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _bdda ==nil {_adf .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_g .Error (_aefb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _abda < 1||_agfb < 1{return nil ,_g .Error (_aefb ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _abda ==1&&_agfb ==1{_gae ,_bbbf :=_cdec (_aefd ,_bdda );if _bbbf !=nil {return nil ,_g .Wrap (_bbbf ,_aefb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gae ,nil ;};if _abda ==1||_agfb ==1{_fgcf :=SelCreateBrick (_agfb ,_abda ,_agfb /2,_abda /2,SelHit );_bfcb ,_gbff :=_fef (_aefd ,_bdda ,_fgcf );if _gbff !=nil {return nil ,_g .Wrap (_gbff ,_aefb ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bfcb ,nil ;};_eeadf :=SelCreateBrick (1,_abda ,0,_abda /2,SelHit );_ddeaa :=SelCreateBrick (_agfb ,1,_agfb /2,0,SelHit );_dcgc ,_egea :=_fef (nil ,_bdda ,_eeadf );if _egea !=nil {return nil ,_g .Wrap (_egea ,_aefb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_aefd ,_egea =_fef (_aefd ,_dcgc ,_ddeaa );if _egea !=nil {return nil ,_g .Wrap (_egea ,_aefb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _aefd ,nil ;};func _cebe (_ggge ,_bbba *Bitmap ,_cffg ,_fbe int )(*Bitmap ,error ){const _agcbb ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _bbba ==nil {return nil ,_g .Error (_agcbb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cffg < 1||_fbe < 1{return nil ,_g .Error (_agcbb ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _cffg ==1&&_fbe ==1{return _bbba .Copy (),nil ;};if _cffg ==1||_fbe ==1{_facbe :=SelCreateBrick (_fbe ,_cffg ,_fbe /2,_cffg /2,SelHit );var _baddb error ;_ggge ,_baddb =_acbg (_ggge ,_bbba ,_facbe );if _baddb !=nil {return nil ,_g .Wrap (_baddb ,_agcbb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ggge ,nil ;};_bede :=SelCreateBrick (1,_cffg ,0,_cffg /2,SelHit );_eccgf :=SelCreateBrick (_fbe ,1,_fbe /2,0,SelHit );_cbfd ,_fbad :=_fef (nil ,_bbba ,_bede );if _fbad !=nil {return nil ,_g .Wrap (_fbad ,_agcbb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ggge ,_fbad =_fef (_ggge ,_cbfd ,_eccgf );_fbad !=nil {return nil ,_g .Wrap (_fbad ,_agcbb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_fbad =_cgfc (_cbfd ,_ggge ,_bede );_fbad !=nil {return nil ,_g .Wrap (_fbad ,_agcbb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_fbad =_cgfc (_ggge ,_cbfd ,_eccgf );_fbad !=nil {return nil ,_g .Wrap (_fbad ,_agcbb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ggge ,nil ;};func _cadbb (_cbee ,_gbee *Bitmap ,_aaac ,_aadd int )(*Bitmap ,error ){const _cdeg ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _gbee ==nil {return nil ,_g .Error (_cdeg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _aaac < 1||_aadd < 1{return nil ,_g .Error (_cdeg ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _aaac ==1&&_aadd ==1{return _cdec (_cbee ,_gbee );};if MorphBC ==SymmetricMorphBC {_cdbb ,_dfec :=_cebe (_cbee ,_gbee ,_aaac ,_aadd );if _dfec !=nil {return nil ,_g .Wrap (_dfec ,_cdeg ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _cdbb ,nil ;};_beag :=_dcb (_aaac /2,_aadd /2);_ebff :=8*((_beag +7)/8);_gfbf ,_dbcf :=_gbee .AddBorder (_ebff ,0);if _dbcf !=nil {return nil ,_g .Wrapf (_dbcf ,_cdeg ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_ebff );
};var _daag ,_cbca *Bitmap ;if _aaac ==1||_aadd ==1{_accf :=SelCreateBrick (_aadd ,_aaac ,_aadd /2,_aaac /2,SelHit );_daag ,_dbcf =_acbg (nil ,_gfbf ,_accf );if _dbcf !=nil {return nil ,_g .Wrap (_dbcf ,_cdeg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_eddd :=SelCreateBrick (1,_aaac ,0,_aaac /2,SelHit );_ecge ,_caff :=_fef (nil ,_gfbf ,_eddd );if _caff !=nil {return nil ,_g .Wrap (_caff ,_cdeg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_eegb :=SelCreateBrick (_aadd ,1,_aadd /2,0,SelHit );_daag ,_caff =_fef (nil ,_ecge ,_eegb );if _caff !=nil {return nil ,_g .Wrap (_caff ,_cdeg ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_caff =_cgfc (_ecge ,_daag ,_eddd );_caff !=nil {return nil ,_g .Wrap (_caff ,_cdeg ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_caff =_cgfc (_daag ,_ecge ,_eegb );_caff !=nil {return nil ,_g .Wrap (_caff ,_cdeg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _cbca ,_dbcf =_daag .RemoveBorder (_ebff );_dbcf !=nil {return nil ,_g .Wrap (_dbcf ,_cdeg ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _cbee ==nil {return _cbca ,nil ;};if _ ,_dbcf =_cdec (_cbee ,_cbca );_dbcf !=nil {return nil ,_dbcf ;};return _cbee ,nil ;
};func (_eeef *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _bbfc ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _eeef ==nil {return nil ,_g .Error (_bbfc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_eeef .Values )-1{return nil ,_g .Errorf (_bbfc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _eeef .Values [i ],nil ;};func (_gbebd *BitmapsArray )AddBitmaps (bm *Bitmaps ){_gbebd .Values =append (_gbebd .Values ,bm )};
type SizeComparison int ;func (_badf *Bitmap )addPadBits ()(_adee error ){const _bbfd ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_ffgf :=_badf .Width %8;if _ffgf ==0{return nil ;};_eccd :=_badf .Width /8;
_ebe :=_d .NewReader (_badf .Data );_gea :=make ([]byte ,_badf .Height *_badf .RowStride );_dba :=_d .NewWriterMSB (_gea );_efd :=make ([]byte ,_eccd );var (_dbd int ;_fggd uint64 ;);for _dbd =0;_dbd < _badf .Height ;_dbd ++{if _ ,_adee =_ebe .Read (_efd );
_adee !=nil {return _g .Wrap (_adee ,_bbfd ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_adee =_dba .Write (_efd );_adee !=nil {return _g .Wrap (_adee ,_bbfd ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _fggd ,_adee =_ebe .ReadBits (byte (_ffgf ));
_adee !=nil {return _g .Wrap (_adee ,_bbfd ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _adee =_dba .WriteByte (byte (_fggd )<<uint (8-_ffgf ));_adee !=nil {return _g .Wrap (_adee ,_bbfd ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_badf .Data =_dba .Data ();return nil ;};func (_gddcb Points )XSorter ()func (_gcce ,_ebaa int )bool {return func (_bfaa ,_dbcaa int )bool {return _gddcb [_bfaa ].X < _gddcb [_dbcaa ].X };};func TstAddSymbol (t *_e .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_febc :=_df .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_febc );*x +=sym .Width +space ;};func (_ffac *Bitmap )nextOnPixelLow (_edec ,_agec ,_geb ,_gdefc ,_fedb int )(_cbe _df .Point ,_acca bool ,_eafc error ){const _fedc ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_afe int ;_dfee byte ;);_gfg :=_fedb *_geb ;_aeee :=_gfg +(_gdefc /8);if _dfee ,_eafc =_ffac .GetByte (_aeee );_eafc !=nil {return _cbe ,false ,_g .Wrap (_eafc ,_fedc ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _dfee !=0{_gcag :=_gdefc -(_gdefc %8)+7;for _afe =_gdefc ;_afe <=_gcag &&_afe < _edec ;_afe ++{if _ffac .GetPixel (_afe ,_fedb ){_cbe .X =_afe ;_cbe .Y =_fedb ;return _cbe ,true ,nil ;};};};_aacd :=(_gdefc /8)+1;_afe =8*_aacd ;var _bcef int ;for _aeee =_gfg +_aacd ;
_afe < _edec ;_aeee ,_afe =_aeee +1,_afe +8{if _dfee ,_eafc =_ffac .GetByte (_aeee );_eafc !=nil {return _cbe ,false ,_g .Wrap (_eafc ,_fedc ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _dfee ==0{continue ;
};for _bcef =0;_bcef < 8&&_afe < _edec ;_bcef ,_afe =_bcef +1,_afe +1{if _ffac .GetPixel (_afe ,_fedb ){_cbe .X =_afe ;_cbe .Y =_fedb ;return _cbe ,true ,nil ;};};};for _egagd :=_fedb +1;_egagd < _agec ;_egagd ++{_gfg =_egagd *_geb ;for _aeee ,_afe =_gfg ,0;
_afe < _edec ;_aeee ,_afe =_aeee +1,_afe +8{if _dfee ,_eafc =_ffac .GetByte (_aeee );_eafc !=nil {return _cbe ,false ,_g .Wrap (_eafc ,_fedc ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _dfee ==0{continue ;};
for _bcef =0;_bcef < 8&&_afe < _edec ;_bcef ,_afe =_bcef +1,_afe +1{if _ffac .GetPixel (_afe ,_egagd ){_cbe .X =_afe ;_cbe .Y =_egagd ;return _cbe ,true ,nil ;};};};};return _cbe ,false ,nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func _ebca (_degea ,_ecde *Bitmap ,_bbdf ,_decc int )(_fafbg error ){const _bbdbc ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_dbbd ,_fgcd ,_bagd ,_edcd int ;_cdcd ,_dbbfg ,_fgdb ,_dcee ,_gddac ,_aadfd ,_fdae byte ;);for _dbbd =0;_dbbd < _bbdf ;_dbbd ++{_bagd =_dbbd *_degea .RowStride ;_edcd =_dbbd *_ecde .RowStride ;for _fgcd =0;_fgcd < _decc ;_fgcd ++{_cdcd ,_fafbg =_degea .GetByte (_bagd +_fgcd );
if _fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_dbbfg ,_fafbg =_ecde .GetByte (_edcd +_fgcd );if _fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _dbbd > 0{_fgdb ,_fafbg =_degea .GetByte (_bagd -_degea .RowStride +_fgcd );if _fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"\u0069\u0020\u003e \u0030");};_cdcd |=_fgdb ;};if _fgcd > 0{_dcee ,_fafbg =_degea .GetByte (_bagd +_fgcd -1);if _fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"\u006a\u0020\u003e \u0030");
};_cdcd |=_dcee <<7;};_cdcd &=_dbbfg ;if _cdcd ==0||(^_cdcd )==0{if _fafbg =_degea .SetByte (_bagd +_fgcd ,_cdcd );_fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_fdae =_cdcd ;_cdcd =(_cdcd |(_cdcd >>1)|(_cdcd <<1))&_dbbfg ;if (_cdcd ^_fdae )==0{if _fafbg =_degea .SetByte (_bagd +_fgcd ,_cdcd );_fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _dbbd =_bbdf -1;_dbbd >=0;_dbbd --{_bagd =_dbbd *_degea .RowStride ;_edcd =_dbbd *_ecde .RowStride ;for _fgcd =_decc -1;_fgcd >=0;_fgcd --{if _cdcd ,_fafbg =_degea .GetByte (_bagd +_fgcd );_fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _dbbfg ,_fafbg =_ecde .GetByte (_edcd +_fgcd );_fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dbbd < _bbdf -1{if _gddac ,_fafbg =_degea .GetByte (_bagd +_degea .RowStride +_fgcd );
_fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_cdcd |=_gddac ;};if _fgcd < _decc -1{if _aadfd ,_fafbg =_degea .GetByte (_bagd +_fgcd +1);_fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_cdcd |=_aadfd >>7;};_cdcd &=_dbbfg ;if _cdcd ==0||(^_cdcd )==0{if _fafbg =_degea .SetByte (_bagd +_fgcd ,_cdcd );_fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_fdae =_cdcd ;_cdcd =(_cdcd |(_cdcd >>1)|(_cdcd <<1))&_dbbfg ;if (_cdcd ^_fdae )==0{if _fafbg =_degea .SetByte (_bagd +_fgcd ,_cdcd );_fafbg !=nil {return _g .Wrap (_fafbg ,_bbdbc ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_fged *Boxes )makeSizeIndicator (_dbc ,_ddac int ,_bbcg LocationFilter ,_ccdb SizeComparison )*_b .NumSlice {_ebed :=&_b .NumSlice {};var _eaba ,_bbeg ,_gegd int ;for _ ,_badd :=range *_fged {_eaba =0;_bbeg ,_gegd =_badd .Dx (),_badd .Dy ();
switch _bbcg {case LocSelectWidth :if (_ccdb ==SizeSelectIfLT &&_bbeg < _dbc )||(_ccdb ==SizeSelectIfGT &&_bbeg > _dbc )||(_ccdb ==SizeSelectIfLTE &&_bbeg <=_dbc )||(_ccdb ==SizeSelectIfGTE &&_bbeg >=_dbc ){_eaba =1;};case LocSelectHeight :if (_ccdb ==SizeSelectIfLT &&_gegd < _ddac )||(_ccdb ==SizeSelectIfGT &&_gegd > _ddac )||(_ccdb ==SizeSelectIfLTE &&_gegd <=_ddac )||(_ccdb ==SizeSelectIfGTE &&_gegd >=_ddac ){_eaba =1;
};case LocSelectIfEither :if (_ccdb ==SizeSelectIfLT &&(_gegd < _ddac ||_bbeg < _dbc ))||(_ccdb ==SizeSelectIfGT &&(_gegd > _ddac ||_bbeg > _dbc ))||(_ccdb ==SizeSelectIfLTE &&(_gegd <=_ddac ||_bbeg <=_dbc ))||(_ccdb ==SizeSelectIfGTE &&(_gegd >=_ddac ||_bbeg >=_dbc )){_eaba =1;
};case LocSelectIfBoth :if (_ccdb ==SizeSelectIfLT &&(_gegd < _ddac &&_bbeg < _dbc ))||(_ccdb ==SizeSelectIfGT &&(_gegd > _ddac &&_bbeg > _dbc ))||(_ccdb ==SizeSelectIfLTE &&(_gegd <=_ddac &&_bbeg <=_dbc ))||(_ccdb ==SizeSelectIfGTE &&(_gegd >=_ddac &&_bbeg >=_dbc )){_eaba =1;
};};_ebed .AddInt (_eaba );};return _ebed ;};func (_gcdd *Bitmap )GetByte (index int )(byte ,error ){if index > len (_gcdd .Data )-1||index < 0{return 0,_g .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _gcdd .Data [index ],nil ;};var _cbgb =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
type SelectionValue int ;func TstNSymbol (t *_e .T ,scale ...int )*Bitmap {_fdddd ,_gbgc :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_gd .NoError (t ,_gbgc );return TstGetScaledSymbol (t ,_fdddd ,scale ...);};func _bgge (_gbef *Bitmap ,_defg ,_gfdg int ,_bbfg ,_egbd int ,_cgacd RasterOperator ,_eaeg *Bitmap ,_adfe ,_ffaf int )error {var _decb ,_gfcdc ,_dbfcdd ,_fdbf int ;
if _defg < 0{_adfe -=_defg ;_bbfg +=_defg ;_defg =0;};if _adfe < 0{_defg -=_adfe ;_bbfg +=_adfe ;_adfe =0;};_decb =_defg +_bbfg -_gbef .Width ;if _decb > 0{_bbfg -=_decb ;};_gfcdc =_adfe +_bbfg -_eaeg .Width ;if _gfcdc > 0{_bbfg -=_gfcdc ;};if _gfdg < 0{_ffaf -=_gfdg ;
_egbd +=_gfdg ;_gfdg =0;};if _ffaf < 0{_gfdg -=_ffaf ;_egbd +=_ffaf ;_ffaf =0;};_dbfcdd =_gfdg +_egbd -_gbef .Height ;if _dbfcdd > 0{_egbd -=_dbfcdd ;};_fdbf =_ffaf +_egbd -_eaeg .Height ;if _fdbf > 0{_egbd -=_fdbf ;};if _bbfg <=0||_egbd <=0{return nil ;
};var _ccccb error ;switch {case _defg &7==0&&_adfe &7==0:_ccccb =_dfae (_gbef ,_defg ,_gfdg ,_bbfg ,_egbd ,_cgacd ,_eaeg ,_adfe ,_ffaf );case _defg &7==_adfe &7:_ccccb =_fgfd (_gbef ,_defg ,_gfdg ,_bbfg ,_egbd ,_cgacd ,_eaeg ,_adfe ,_ffaf );default:_ccccb =_aacdba (_gbef ,_defg ,_gfdg ,_bbfg ,_egbd ,_cgacd ,_eaeg ,_adfe ,_ffaf );
};if _ccccb !=nil {return _g .Wrap (_ccccb ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_cdbc *Bitmap )thresholdPixelSum (_eagg int )bool {var (_aeaa int ;_ffdc uint8 ;_fbca byte ;_baa int ;);_eba :=_cdbc .RowStride ;
_dgca :=uint (_cdbc .Width &0x07);if _dgca !=0{_ffdc =uint8 ((0xff<<(8-_dgca ))&0xff);_eba --;};for _bag :=0;_bag < _cdbc .Height ;_bag ++{for _baa =0;_baa < _eba ;_baa ++{_fbca =_cdbc .Data [_bag *_cdbc .RowStride +_baa ];_aeaa +=int (_cbdd [_fbca ]);
};if _dgca !=0{_fbca =_cdbc .Data [_bag *_cdbc .RowStride +_baa ]&_ffdc ;_aeaa +=int (_cbdd [_fbca ]);};if _aeaa > _eagg {return true ;};};return false ;};func TstASymbol (t *_e .T )*Bitmap {t .Helper ();_begg :=New (6,6);_gd .NoError (t ,_begg .SetPixel (1,0,1));
_gd .NoError (t ,_begg .SetPixel (2,0,1));_gd .NoError (t ,_begg .SetPixel (3,0,1));_gd .NoError (t ,_begg .SetPixel (4,0,1));_gd .NoError (t ,_begg .SetPixel (5,1,1));_gd .NoError (t ,_begg .SetPixel (1,2,1));_gd .NoError (t ,_begg .SetPixel (2,2,1));
_gd .NoError (t ,_begg .SetPixel (3,2,1));_gd .NoError (t ,_begg .SetPixel (4,2,1));_gd .NoError (t ,_begg .SetPixel (5,2,1));_gd .NoError (t ,_begg .SetPixel (0,3,1));_gd .NoError (t ,_begg .SetPixel (5,3,1));_gd .NoError (t ,_begg .SetPixel (0,4,1));
_gd .NoError (t ,_begg .SetPixel (5,4,1));_gd .NoError (t ,_begg .SetPixel (1,5,1));_gd .NoError (t ,_begg .SetPixel (2,5,1));_gd .NoError (t ,_begg .SetPixel (3,5,1));_gd .NoError (t ,_begg .SetPixel (4,5,1));_gd .NoError (t ,_begg .SetPixel (5,5,1));
return _begg ;};func _defc (_egd ,_afee int )int {if _egd < _afee {return _egd ;};return _afee ;};