//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_bc "encoding/binary";_a "github.com/stretchr/testify/require";_ddb "github.com/unidoc/unipdf/v3/common";_ag "github.com/unidoc/unipdf/v3/internal/bitwise";_dd "github.com/unidoc/unipdf/v3/internal/imageutil";_gc "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_agb "image";_e "math";_g "sort";_c "strings";_d "testing";);func (_ebcc Points )XSorter ()func (_ebbgg ,_fggf int )bool {return func (_abda ,_gfgd int )bool {return _ebcc [_abda ].X < _ebcc [_gfgd ].X };
};func (_agbb *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_agbb .Width ,Height :_agbb .Height ,RowStride :_agbb .RowStride ,Color :_agbb .Color ,Text :_agbb .Text ,BitmapNumber :_agbb .BitmapNumber ,Special :_agbb .Special ,Data :make ([]byte ,len (_agbb .Data ))};
};var MorphBC BoundaryCondition ;func _becbg (_fece *Bitmap ,_ceed ,_feda ,_eagcb ,_bbgd int ,_fgecc RasterOperator ,_dcg *Bitmap ,_eaag ,_ecbcd int )error {const _gcaa ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _fece ==nil {return _b .Error (_gcaa ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _fgecc ==PixDst {return nil ;};switch _fgecc {case PixClr ,PixSet ,PixNotDst :_ageg (_fece ,_ceed ,_feda ,_eagcb ,_bbgd ,_fgecc );
return nil ;};if _dcg ==nil {_ddb .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _b .Error (_gcaa ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gdbd :=_caf (_fece ,_ceed ,_feda ,_eagcb ,_bbgd ,_fgecc ,_dcg ,_eaag ,_ecbcd );_gdbd !=nil {return _b .Wrap (_gdbd ,_gcaa ,"");};return nil ;
};func (_gdfa *Bitmap )setBit (_eeb int ){_gdfa .Data [(_eeb >>3)]|=0x80>>uint (_eeb &7)};func (_aeag *Bitmap )equivalent (_fcbe *Bitmap )bool {if _aeag ==_fcbe {return true ;};if !_aeag .SizesEqual (_fcbe ){return false ;};_bgfdc :=_fdgg (_aeag ,_fcbe ,CmbOpXor );
_gccad :=_aeag .countPixels ();_fbdc :=int (0.25*float32 (_gccad ));if _bgfdc .thresholdPixelSum (_fbdc ){return false ;};var (_ecbdd [9][9]int ;_dfae [18][9]int ;_bfag [9][18]int ;_aba int ;_gbce int ;);_beb :=9;_afg :=_aeag .Height /_beb ;_fgac :=_aeag .Width /_beb ;
_dfgg ,_dce :=_afg /2,_fgac /2;if _afg < _fgac {_dfgg =_fgac /2;_dce =_afg /2;};_fef :=float64 (_dfgg )*float64 (_dce )*_e .Pi ;_ebceg :=int (float64 (_afg *_fgac /2)*0.9);_bff :=int (float64 (_fgac *_afg /2)*0.9);for _bfaf :=0;_bfaf < _beb ;_bfaf ++{_dbdbb :=_fgac *_bfaf +_aba ;
var _aagc int ;if _bfaf ==_beb -1{_aba =0;_aagc =_aeag .Width ;}else {_aagc =_dbdbb +_fgac ;if ((_aeag .Width -_aba )%_beb )> 0{_aba ++;_aagc ++;};};for _edf :=0;_edf < _beb ;_edf ++{_fcag :=_afg *_edf +_gbce ;var _acc int ;if _edf ==_beb -1{_gbce =0;_acc =_aeag .Height ;
}else {_acc =_fcag +_afg ;if (_aeag .Height -_gbce )%_beb > 0{_gbce ++;_acc ++;};};var _efe ,_gbeg ,_cgdd ,_bag int ;_fbgg :=(_dbdbb +_aagc )/2;_abg :=(_fcag +_acc )/2;for _gca :=_dbdbb ;_gca < _aagc ;_gca ++{for _cfcc :=_fcag ;_cfcc < _acc ;_cfcc ++{if _bgfdc .GetPixel (_gca ,_cfcc ){if _gca < _fbgg {_efe ++;
}else {_gbeg ++;};if _cfcc < _abg {_bag ++;}else {_cgdd ++;};};};};_ecbdd [_bfaf ][_edf ]=_efe +_gbeg ;_dfae [_bfaf *2][_edf ]=_efe ;_dfae [_bfaf *2+1][_edf ]=_gbeg ;_bfag [_bfaf ][_edf *2]=_bag ;_bfag [_bfaf ][_edf *2+1]=_cgdd ;};};for _acg :=0;_acg < _beb *2-1;
_acg ++{for _fdbg :=0;_fdbg < (_beb -1);_fdbg ++{var _fdba int ;for _eeeg :=0;_eeeg < 2;_eeeg ++{for _afge :=0;_afge < 2;_afge ++{_fdba +=_dfae [_acg +_eeeg ][_fdbg +_afge ];};};if _fdba > _bff {return false ;};};};for _bfb :=0;_bfb < (_beb -1);_bfb ++{for _ecda :=0;
_ecda < ((_beb *2)-1);_ecda ++{var _fdc int ;for _fadg :=0;_fadg < 2;_fadg ++{for _aafb :=0;_aafb < 2;_aafb ++{_fdc +=_bfag [_bfb +_fadg ][_ecda +_aafb ];};};if _fdc > _ebceg {return false ;};};};for _eca :=0;_eca < (_beb -2);_eca ++{for _bagg :=0;_bagg < (_beb -2);
_bagg ++{var _afe ,_ffe int ;for _gddc :=0;_gddc < 3;_gddc ++{for _cbed :=0;_cbed < 3;_cbed ++{if _gddc ==_cbed {_afe +=_ecbdd [_eca +_gddc ][_bagg +_cbed ];};if (2-_gddc )==_cbed {_ffe +=_ecbdd [_eca +_gddc ][_bagg +_cbed ];};};};if _afe > _bff ||_ffe > _bff {return false ;
};};};for _eecf :=0;_eecf < (_beb -1);_eecf ++{for _cca :=0;_cca < (_beb -1);_cca ++{var _gdb int ;for _gbgd :=0;_gbgd < 2;_gbgd ++{for _cdga :=0;_cdga < 2;_cdga ++{_gdb +=_ecbdd [_eecf +_gbgd ][_cca +_cdga ];};};if float64 (_gdb )> _fef {return false ;
};};};return true ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func _efa ()(_ecb [256]uint16 ){for _eg :=0;_eg < 256;_eg ++{if _eg &0x01!=0{_ecb [_eg ]|=0x3;};if _eg &0x02!=0{_ecb [_eg ]|=0xc;};if _eg &0x04!=0{_ecb [_eg ]|=0x30;};if _eg &0x08!=0{_ecb [_eg ]|=0xc0;
};if _eg &0x10!=0{_ecb [_eg ]|=0x300;};if _eg &0x20!=0{_ecb [_eg ]|=0xc00;};if _eg &0x40!=0{_ecb [_eg ]|=0x3000;};if _eg &0x80!=0{_ecb [_eg ]|=0xc000;};};return _ecb ;};func NewClassedPoints (points *Points ,classes _gc .IntSlice )(*ClassedPoints ,error ){const _fgda ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_b .Error (_fgda ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_b .Error (_fgda ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_cggb :=&ClassedPoints {Points :points ,IntSlice :classes };if _dbe :=_cggb .validateIntSlice ();_dbe !=nil {return nil ,_b .Wrap (_dbe ,_fgda ,"");};return _cggb ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
func Rect (x ,y ,w ,h int )(*_agb .Rectangle ,error ){const _bece ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_b .Errorf (_bece ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_b .Error (_bece ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_gece :=_agb .Rect (x ,y ,x +w ,y +h );return &_gece ,nil ;
};func _ggee (_decg ,_egcg *Bitmap ,_dbc ,_ebcg ,_bagf ,_gcgd ,_dea int ,_bgef CombinationOperator )error {var _daab int ;_adfc :=func (){_daab ++;_bagf +=_egcg .RowStride ;_gcgd +=_decg .RowStride ;_dea +=_decg .RowStride };for _daab =_dbc ;_daab < _ebcg ;
_adfc (){_gffd :=_bagf ;for _cddg :=_gcgd ;_cddg <=_dea ;_cddg ++{_gddb ,_dbfb :=_egcg .GetByte (_gffd );if _dbfb !=nil {return _dbfb ;};_gegf ,_dbfb :=_decg .GetByte (_cddg );if _dbfb !=nil {return _dbfb ;};if _dbfb =_egcg .SetByte (_gffd ,_gda (_gddb ,_gegf ,_bgef ));
_dbfb !=nil {return _dbfb ;};_gffd ++;};};return nil ;};type RasterOperator int ;func (_cbffe *Bitmap )thresholdPixelSum (_dcfg int )bool {var (_fafc int ;_bgbe uint8 ;_abff byte ;_bgfdd int ;);_fbad :=_cbffe .RowStride ;_bdc :=uint (_cbffe .Width &0x07);
if _bdc !=0{_bgbe =uint8 ((0xff<<(8-_bdc ))&0xff);_fbad --;};for _fcf :=0;_fcf < _cbffe .Height ;_fcf ++{for _bgfdd =0;_bgfdd < _fbad ;_bgfdd ++{_abff =_cbffe .Data [_fcf *_cbffe .RowStride +_bgfdd ];_fafc +=int (_ac [_abff ]);};if _bdc !=0{_abff =_cbffe .Data [_fcf *_cbffe .RowStride +_bgfdd ]&_bgbe ;
_fafc +=int (_ac [_abff ]);};if _fafc > _dcfg {return true ;};};return false ;};func _efbdd (_bcdg uint ,_fdfc byte )byte {return _fdfc >>_bcdg <<_bcdg };type Color int ;func (_ceab *Bitmap )GetVanillaData ()[]byte {if _ceab .Color ==Chocolate {_ceab .inverseData ();
};return _ceab .Data ;};func init (){for _ggag :=0;_ggag < 256;_ggag ++{_ac [_ggag ]=uint8 (_ggag &0x1)+(uint8 (_ggag >>1)&0x1)+(uint8 (_ggag >>2)&0x1)+(uint8 (_ggag >>3)&0x1)+(uint8 (_ggag >>4)&0x1)+(uint8 (_ggag >>5)&0x1)+(uint8 (_ggag >>6)&0x1)+(uint8 (_ggag >>7)&0x1);
};};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _becbg (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func TstASymbol (t *_d .T )*Bitmap {t .Helper ();_bfffd :=New (6,6);_a .NoError (t ,_bfffd .SetPixel (1,0,1));
_a .NoError (t ,_bfffd .SetPixel (2,0,1));_a .NoError (t ,_bfffd .SetPixel (3,0,1));_a .NoError (t ,_bfffd .SetPixel (4,0,1));_a .NoError (t ,_bfffd .SetPixel (5,1,1));_a .NoError (t ,_bfffd .SetPixel (1,2,1));_a .NoError (t ,_bfffd .SetPixel (2,2,1));
_a .NoError (t ,_bfffd .SetPixel (3,2,1));_a .NoError (t ,_bfffd .SetPixel (4,2,1));_a .NoError (t ,_bfffd .SetPixel (5,2,1));_a .NoError (t ,_bfffd .SetPixel (0,3,1));_a .NoError (t ,_bfffd .SetPixel (5,3,1));_a .NoError (t ,_bfffd .SetPixel (0,4,1));
_a .NoError (t ,_bfffd .SetPixel (5,4,1));_a .NoError (t ,_bfffd .SetPixel (1,5,1));_a .NoError (t ,_bfffd .SetPixel (2,5,1));_a .NoError (t ,_bfffd .SetPixel (3,5,1));_a .NoError (t ,_bfffd .SetPixel (4,5,1));_a .NoError (t ,_bfffd .SetPixel (5,5,1));
return _bfffd ;};func _geg (_ffc ,_baa *Bitmap )(*Bitmap ,error ){if _baa ==nil {return nil ,_b .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _baa ==_ffc {return _ffc ,nil ;};if _ffc ==nil {_ffc =_baa .createTemplate ();copy (_ffc .Data ,_baa .Data );return _ffc ,nil ;};_cfe :=_ffc .resizeImageData (_baa );if _cfe !=nil {return nil ,_b .Wrap (_cfe ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_ffc .Text =_baa .Text ;copy (_ffc .Data ,_baa .Data );return _ffc ,nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func _dfb (_ed ,_bbc *Bitmap ,_fcg int ,_bca []byte ,_baf int )(_dab error ){const _edg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_cdf ,_fgaa ,_dc ,_eegc ,_bac ,_eec ,_gae ,_ceb int ;_dcb ,_agbg uint32 ;_abc ,_gcg byte ;_bce uint16 ;);_agge :=make ([]byte ,4);_cbb :=make ([]byte ,4);for _dc =0;_dc < _ed .Height -1;_dc ,_eegc =_dc +2,_eegc +1{_cdf =_dc *_ed .RowStride ;_fgaa =_eegc *_bbc .RowStride ;
for _bac ,_eec =0,0;_bac < _baf ;_bac ,_eec =_bac +4,_eec +1{for _gae =0;_gae < 4;_gae ++{_ceb =_cdf +_bac +_gae ;if _ceb <=len (_ed .Data )-1&&_ceb < _cdf +_ed .RowStride {_agge [_gae ]=_ed .Data [_ceb ];}else {_agge [_gae ]=0x00;};_ceb =_cdf +_ed .RowStride +_bac +_gae ;
if _ceb <=len (_ed .Data )-1&&_ceb < _cdf +(2*_ed .RowStride ){_cbb [_gae ]=_ed .Data [_ceb ];}else {_cbb [_gae ]=0x00;};};_dcb =_bc .BigEndian .Uint32 (_agge );_agbg =_bc .BigEndian .Uint32 (_cbb );_agbg |=_dcb ;_agbg |=_agbg <<1;_agbg &=0xaaaaaaaa;_dcb =_agbg |(_agbg <<7);
_abc =byte (_dcb >>24);_gcg =byte ((_dcb >>8)&0xff);_ceb =_fgaa +_eec ;if _ceb +1==len (_bbc .Data )-1||_ceb +1>=_fgaa +_bbc .RowStride {_bbc .Data [_ceb ]=_bca [_abc ];}else {_bce =(uint16 (_bca [_abc ])<<8)|uint16 (_bca [_gcg ]);if _dab =_bbc .setTwoBytes (_ceb ,_bce );
_dab !=nil {return _b .Wrapf (_dab ,_edg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ceb );};_eec ++;};};};
return nil ;};func _gbef (_facg ,_fedf ,_baae *Bitmap )(*Bitmap ,error ){const _acbb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _fedf ==nil {return nil ,_b .Error (_acbb ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _baae ==nil {return nil ,_b .Error (_acbb ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _facg ==_baae {return nil ,_b .Error (_acbb ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_fedf .SizesEqual (_baae ){_ddb .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_acbb );
};var _bfge error ;if _facg ,_bfge =_geg (_facg ,_fedf );_bfge !=nil {return nil ,_b .Wrap (_bfge ,_acbb ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _bfge =_facg .RasterOperation (0,0,_facg .Width ,_facg .Height ,PixSrcXorDst ,_baae ,0,0);
_bfge !=nil {return nil ,_b .Wrap (_bfge ,_acbb ,"");};return _facg ,nil ;};func (_dga *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _dga .Copy (),nil ;};_bgd ,_bef :=_dga .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );
if _bef !=nil {return nil ,_b .Wrap (_bef ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _bgd ,nil ;};func (_baac Points )GetGeometry (i int )(_cbdea ,_egbbe float32 ,_gaff error ){if i > len (_baac )-1{return 0,0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_cebgb :=_baac [i ];return _cebgb .X ,_cebgb .Y ,nil ;};func TstImageBitmap ()*Bitmap {return _bgga .Copy ()};func _bafc (_caee *Bitmap ,_gaeg ,_gcbe int ,_fcce ,_dbdc int ,_ggeee RasterOperator ){var (_ceeg bool ;_dfagd bool ;_bageg int ;_bgg int ;_agag int ;
_bfbc int ;_cgb bool ;_ggcae byte ;);_dbea :=8-(_gaeg &7);_ccad :=_bfbg [_dbea ];_cfgba :=_caee .RowStride *_gcbe +(_gaeg >>3);if _fcce < _dbea {_ceeg =true ;_ccad &=_bgdff [8-_dbea +_fcce ];};if !_ceeg {_bageg =(_fcce -_dbea )>>3;if _bageg !=0{_dfagd =true ;
_bgg =_cfgba +1;};};_agag =(_gaeg +_fcce )&7;if !(_ceeg ||_agag ==0){_cgb =true ;_ggcae =_bgdff [_agag ];_bfbc =_cfgba +1+_bageg ;};var _aafe ,_ddda int ;switch _ggeee {case PixClr :for _aafe =0;_aafe < _dbdc ;_aafe ++{_caee .Data [_cfgba ]=_dcgbf (_caee .Data [_cfgba ],0x0,_ccad );
_cfgba +=_caee .RowStride ;};if _dfagd {for _aafe =0;_aafe < _dbdc ;_aafe ++{for _ddda =0;_ddda < _bageg ;_ddda ++{_caee .Data [_bgg +_ddda ]=0x0;};_bgg +=_caee .RowStride ;};};if _cgb {for _aafe =0;_aafe < _dbdc ;_aafe ++{_caee .Data [_bfbc ]=_dcgbf (_caee .Data [_bfbc ],0x0,_ggcae );
_bfbc +=_caee .RowStride ;};};case PixSet :for _aafe =0;_aafe < _dbdc ;_aafe ++{_caee .Data [_cfgba ]=_dcgbf (_caee .Data [_cfgba ],0xff,_ccad );_cfgba +=_caee .RowStride ;};if _dfagd {for _aafe =0;_aafe < _dbdc ;_aafe ++{for _ddda =0;_ddda < _bageg ;_ddda ++{_caee .Data [_bgg +_ddda ]=0xff;
};_bgg +=_caee .RowStride ;};};if _cgb {for _aafe =0;_aafe < _dbdc ;_aafe ++{_caee .Data [_bfbc ]=_dcgbf (_caee .Data [_bfbc ],0xff,_ggcae );_bfbc +=_caee .RowStride ;};};case PixNotDst :for _aafe =0;_aafe < _dbdc ;_aafe ++{_caee .Data [_cfgba ]=_dcgbf (_caee .Data [_cfgba ],^_caee .Data [_cfgba ],_ccad );
_cfgba +=_caee .RowStride ;};if _dfagd {for _aafe =0;_aafe < _dbdc ;_aafe ++{for _ddda =0;_ddda < _bageg ;_ddda ++{_caee .Data [_bgg +_ddda ]=^(_caee .Data [_bgg +_ddda ]);};_bgg +=_caee .RowStride ;};};if _cgb {for _aafe =0;_aafe < _dbdc ;_aafe ++{_caee .Data [_bfbc ]=_dcgbf (_caee .Data [_bfbc ],^_caee .Data [_bfbc ],_ggcae );
_bfbc +=_caee .RowStride ;};};};};func _egccf (_beeb ,_fbdcb *Bitmap ,_addf ,_gacc ,_gfeb ,_gebe ,_cad ,_begf ,_aeb ,_daffc int ,_ecgd CombinationOperator ,_aadg int )error {var _aeaf int ;_gcfb :=func (){_aeaf ++;_gfeb +=_fbdcb .RowStride ;_gebe +=_beeb .RowStride ;
_cad +=_beeb .RowStride };for _aeaf =_addf ;_aeaf < _gacc ;_gcfb (){var _addd uint16 ;_adfcb :=_gfeb ;for _dbb :=_gebe ;_dbb <=_cad ;_dbb ++{_aedc ,_gagf :=_fbdcb .GetByte (_adfcb );if _gagf !=nil {return _gagf ;};_dff ,_gagf :=_beeb .GetByte (_dbb );if _gagf !=nil {return _gagf ;
};_addd =(_addd |(uint16 (_dff )&0xff))<<uint (_daffc );_dff =byte (_addd >>8);if _gagf =_fbdcb .SetByte (_adfcb ,_gda (_aedc ,_dff ,_ecgd ));_gagf !=nil {return _gagf ;};_adfcb ++;_addd <<=uint (_aeb );if _dbb ==_cad {_dff =byte (_addd >>(8-uint8 (_daffc )));
if _aadg !=0{_dff =_efbdd (uint (8+_begf ),_dff );};_aedc ,_gagf =_fbdcb .GetByte (_adfcb );if _gagf !=nil {return _gagf ;};if _gagf =_fbdcb .SetByte (_adfcb ,_gda (_aedc ,_dff ,_ecgd ));_gagf !=nil {return _gagf ;};};};};return nil ;};func (_efeg *Bitmaps )makeSizeIndicator (_babb ,_abaf int ,_fdef LocationFilter ,_afea SizeComparison )(_baca *_gc .NumSlice ,_befgg error ){const _caade ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _efeg ==nil {return nil ,_b .Error (_caade ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _fdef {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_caade ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_fdef );
};switch _afea {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_b .Errorf (_caade ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_afea );
};_baca =&_gc .NumSlice {};var (_ffdd ,_ggege ,_bbfd int ;_cbbd *Bitmap ;);for _ ,_cbbd =range _efeg .Values {_ffdd =0;_ggege ,_bbfd =_cbbd .Width ,_cbbd .Height ;switch _fdef {case LocSelectWidth :if (_afea ==SizeSelectIfLT &&_ggege < _babb )||(_afea ==SizeSelectIfGT &&_ggege > _babb )||(_afea ==SizeSelectIfLTE &&_ggege <=_babb )||(_afea ==SizeSelectIfGTE &&_ggege >=_babb )||(_afea ==SizeSelectIfEQ &&_ggege ==_babb ){_ffdd =1;
};case LocSelectHeight :if (_afea ==SizeSelectIfLT &&_bbfd < _abaf )||(_afea ==SizeSelectIfGT &&_bbfd > _abaf )||(_afea ==SizeSelectIfLTE &&_bbfd <=_abaf )||(_afea ==SizeSelectIfGTE &&_bbfd >=_abaf )||(_afea ==SizeSelectIfEQ &&_bbfd ==_abaf ){_ffdd =1;
};case LocSelectIfEither :if (_afea ==SizeSelectIfLT &&(_ggege < _babb ||_bbfd < _abaf ))||(_afea ==SizeSelectIfGT &&(_ggege > _babb ||_bbfd > _abaf ))||(_afea ==SizeSelectIfLTE &&(_ggege <=_babb ||_bbfd <=_abaf ))||(_afea ==SizeSelectIfGTE &&(_ggege >=_babb ||_bbfd >=_abaf ))||(_afea ==SizeSelectIfEQ &&(_ggege ==_babb ||_bbfd ==_abaf )){_ffdd =1;
};case LocSelectIfBoth :if (_afea ==SizeSelectIfLT &&(_ggege < _babb &&_bbfd < _abaf ))||(_afea ==SizeSelectIfGT &&(_ggege > _babb &&_bbfd > _abaf ))||(_afea ==SizeSelectIfLTE &&(_ggege <=_babb &&_bbfd <=_abaf ))||(_afea ==SizeSelectIfGTE &&(_ggege >=_babb &&_bbfd >=_abaf ))||(_afea ==SizeSelectIfEQ &&(_ggege ==_babb &&_bbfd ==_abaf )){_ffdd =1;
};};_baca .AddInt (_ffdd );};return _baca ,nil ;};func _bgfgb (_gdef ,_caaef int )int {if _gdef > _caaef {return _gdef ;};return _caaef ;};func (_eac *Bitmap )SetPixel (x ,y int ,pixel byte )error {_gfe :=_eac .GetByteIndex (x ,y );if _gfe > len (_eac .Data )-1{return _b .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_gfe );
};_acb :=_eac .GetBitOffset (x );_bfg :=uint (7-_acb );_gceg :=_eac .Data [_gfe ];var _gcd byte ;if pixel ==1{_gcd =_gceg |(pixel &0x01<<_bfg );}else {_gcd =_gceg &^(1<<_bfg );};_eac .Data [_gfe ]=_gcd ;return nil ;};func (_cdag Points )GetIntX (i int )(int ,error ){if i >=len (_cdag ){return 0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_cdag [i ].X ),nil ;};func (_ggca *ClassedPoints )SortByX (){_ggca ._gefb =_ggca .xSortFunction ();_g .Sort (_ggca )};func (_fgbf *Bitmap )setAll ()error {_ecag :=_becbg (_fgbf ,0,0,_fgbf .Width ,_fgbf .Height ,PixSet ,nil ,0,0);if _ecag !=nil {return _b .Wrap (_ecag ,"\u0073\u0065\u0074\u0041\u006c\u006c","");
};return nil ;};func (_dee *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_agdc bool ,_cbff error ){const _ccfbb ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_abcf ();};_gba :=_dee .Width >>3;_ecbd :=_dee .Width &7;_adab :=byte (0xff<<uint (8-_ecbd ));var (_ade ,_gddfe ,_abfe ,_cbcfc int ;_daf byte ;);for _ade =0;_ade < _dee .Height ;_ade ++{_abfe =_dee .RowStride *_ade ;for _gddfe =0;_gddfe < _gba ;
_gddfe ++{_daf ,_cbff =_dee .GetByte (_abfe +_gddfe );if _cbff !=nil {return false ,_b .Wrap (_cbff ,_ccfbb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_cbcfc +=tab8 [_daf ];};if _ecbd !=0{_daf ,_cbff =_dee .GetByte (_abfe +_gddfe );if _cbff !=nil {return false ,_b .Wrap (_cbff ,_ccfbb ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_daf &=_adab ;_cbcfc +=tab8 [_daf ];};if _cbcfc > thresh {return true ,nil ;};};return _agdc ,nil ;};func (_gce *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _gce .removeBorderGeneral (left ,right ,top ,bot );};func TstImageBitmapInverseData ()[]byte {_ecff :=_bgga .Copy ();
_ecff .InverseData ();return _ecff .Data ;};func (_faa *Bitmap )setPadBits (_fgeb int ){_afeb :=8-_faa .Width %8;if _afeb ==8{return ;};_bbbb :=_faa .Width /8;_edfa :=_bfbg [_afeb ];if _fgeb ==0{_edfa ^=_edfa ;};var _affe int ;for _bgc :=0;_bgc < _faa .Height ;
_bgc ++{_affe =_bgc *_faa .RowStride +_bbbb ;if _fgeb ==0{_faa .Data [_affe ]&=_edfa ;}else {_faa .Data [_affe ]|=_edfa ;};};};func (_gef *Bitmap )SetPadBits (value int ){_gef .setPadBits (value )};func _cbc (_fd *Bitmap ,_dgb ...int )(_df *Bitmap ,_bba error ){const _egc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _fd ==nil {return nil ,_b .Error (_egc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_dgb )==0||len (_dgb )> 4{return nil ,_b .Error (_egc ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _dgb [0]<=0{_ddb .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_df ,_bba =_geg (nil ,_fd );if _bba !=nil {return nil ,_b .Wrap (_bba ,_egc ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _df ,nil ;};_fb :=_eaa ();_df =_fd ;for _agc ,_ece :=range _dgb {if _ece <=0{break ;};_df ,_bba =_gaf (_df ,_ece ,_fb );if _bba !=nil {return nil ,_b .Wrapf (_bba ,_egc ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_agc );
};};return _df ,nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_agb .Rectangle ;};func (_eda *Bitmap )SetDefaultPixel (){for _bcec :=range _eda .Data {_eda .Data [_bcec ]=byte (0xff);};};func _ca (_fg ,_gcb *Bitmap )(_ce error ){const _bg ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_bcf :=_gcb .RowStride ;_ec :=_fg .RowStride ;var (_bf byte ;_ab uint16 ;_cac ,_gcf ,_fge ,_ad ,_ced int ;);for _fge =0;_fge < _gcb .Height ;_fge ++{_cac =_fge *_bcf ;_gcf =2*_fge *_ec ;for _ad =0;_ad < _bcf ;_ad ++{_bf =_gcb .Data [_cac +_ad ];_ab =_afga [_bf ];
_ced =_gcf +_ad *2;if _fg .RowStride !=_gcb .RowStride *2&&(_ad +1)*2> _fg .RowStride {_ce =_fg .SetByte (_ced ,byte (_ab >>8));}else {_ce =_fg .setTwoBytes (_ced ,_ab );};if _ce !=nil {return _b .Wrap (_ce ,_bg ,"");};};for _ad =0;_ad < _ec ;_ad ++{_ced =_gcf +_ec +_ad ;
_bf =_fg .Data [_gcf +_ad ];if _ce =_fg .SetByte (_ced ,_bf );_ce !=nil {return _b .Wrapf (_ce ,_bg ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_gcf +_ad ,_gcf +_ec +_ad );
};};};return nil ;};func _dgda (_dacf ,_efgd *Bitmap ,_bbag *Selection )(*Bitmap ,error ){const _ceaa ="\u006f\u0070\u0065\u006e";var _ebff error ;_dacf ,_ebff =_fbae (_dacf ,_efgd ,_bbag );if _ebff !=nil {return nil ,_b .Wrap (_ebff ,_ceaa ,"");};_dfe ,_ebff :=_adbgf (nil ,_efgd ,_bbag );
if _ebff !=nil {return nil ,_b .Wrap (_ebff ,_ceaa ,"");};_ ,_ebff =_ebf (_dacf ,_dfe ,_bbag );if _ebff !=nil {return nil ,_b .Wrap (_ebff ,_ceaa ,"");};return _dacf ,nil ;};func (_cfbf *Bitmaps )HeightSorter ()func (_dafcc ,_dafbb int )bool {return func (_gagee ,_cgcc int )bool {_bfga :=_cfbf .Values [_gagee ].Height < _cfbf .Values [_cgcc ].Height ;
_ddb .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_cfbf .Values [_gagee ].Height ,_cfbf .Values [_cgcc ].Height ,_bfga );return _bfga ;};};func _fbae (_gdaa ,_dfccb *Bitmap ,_ebcf *Selection )(*Bitmap ,error ){const _cacf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _eabd ,_fbab int ;if _dfccb ==nil {return nil ,_b .Error (_cacf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ebcf ==nil {return nil ,_b .Error (_cacf ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_eabd =_ebcf .Width ;_fbab =_ebcf .Height ;if _eabd ==0||_fbab ==0{return nil ,_b .Error (_cacf ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _gdaa ==nil {return _dfccb .createTemplate (),nil ;};if _adcfc :=_gdaa .resizeImageData (_dfccb );
_adcfc !=nil {return nil ,_adcfc ;};return _gdaa ,nil ;};func (_fecb *Bitmap )GetByteIndex (x ,y int )int {return y *_fecb .RowStride +(x >>3)};func (_fffeb *Bitmaps )selectByIndexes (_dgba []int )(*Bitmaps ,error ){_beaa :=&Bitmaps {};for _ ,_cddc :=range _dgba {_cdbg ,_fcef :=_fffeb .GetBitmap (_cddc );
if _fcef !=nil {return nil ,_b .Wrap (_fcef ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_beaa .AddBitmap (_cdbg );};return _beaa ,nil ;};func (_dcd *Bitmap )CountPixels ()int {return _dcd .countPixels ()};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _geg (d ,s )};
func _fa (_gcfe ,_ga *Bitmap )(_fc error ){const _gd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_ecg :=_ga .RowStride ;_cd :=_gcfe .RowStride ;var _agd ,_abb ,_ee ,_bcd ,_aac int ;for _ee =0;
_ee < _ga .Height ;_ee ++{_agd =_ee *_ecg ;_abb =8*_ee *_cd ;for _bcd =0;_bcd < _ecg ;_bcd ++{if _fc =_gcfe .setEightBytes (_abb +_bcd *8,_faaf [_ga .Data [_agd +_bcd ]]);_fc !=nil {return _b .Wrap (_fc ,_gd ,"");};};for _aac =1;_aac < 8;_aac ++{for _bcd =0;
_bcd < _cd ;_bcd ++{if _fc =_gcfe .SetByte (_abb +_aac *_cd +_bcd ,_gcfe .Data [_abb +_bcd ]);_fc !=nil {return _b .Wrap (_fc ,_gd ,"");};};};};return nil ;};func (_fcfc *ClassedPoints )Len ()int {return _fcfc .IntSlice .Size ()};func (_fgge Points )Size ()int {return len (_fgge )};
func (_fac *Bitmap )setEightBytes (_cgf int ,_efg uint64 )error {_agfg :=_fac .RowStride -(_cgf %_fac .RowStride );if _fac .RowStride !=_fac .Width >>3{_agfg --;};if _agfg >=8{return _fac .setEightFullBytes (_cgf ,_efg );};return _fac .setEightPartlyBytes (_cgf ,_agfg ,_efg );
};type Boxes []*_agb .Rectangle ;func (_cdg *Bitmap )String ()string {var _aage ="\u000a";for _efbd :=0;_efbd < _cdg .Height ;_efbd ++{var _fbgf string ;for _fabd :=0;_fabd < _cdg .Width ;_fabd ++{_efag :=_cdg .GetPixel (_fabd ,_efbd );if _efag {_fbgf +="\u0031";
}else {_fbgf +="\u0030";};};_aage +=_fbgf +"\u000a";};return _aage ;};var (_bgdff =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_bfbg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_cdeb *Bitmap )Zero ()bool {_cfcd :=_cdeb .Width /8;
_adf :=_cdeb .Width &7;var _gac byte ;if _adf !=0{_gac =byte (0xff<<uint (8-_adf ));};var _dcad ,_gec ,_gcca int ;for _gec =0;_gec < _cdeb .Height ;_gec ++{_dcad =_cdeb .RowStride *_gec ;for _gcca =0;_gcca < _cfcd ;_gcca ,_dcad =_gcca +1,_dcad +1{if _cdeb .Data [_dcad ]!=0{return false ;
};};if _adf > 0{if _cdeb .Data [_dcad ]&_gac !=0{return false ;};};};return true ;};func (_aae *Bitmap )nextOnPixelLow (_ceda ,_faeg ,_eef ,_bed ,_gcac int )(_bebd _agb .Point ,_cab bool ,_egg error ){const _cacc ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_fedd int ;_adc byte ;);_dgc :=_gcac *_eef ;_fdab :=_dgc +(_bed /8);if _adc ,_egg =_aae .GetByte (_fdab );_egg !=nil {return _bebd ,false ,_b .Wrap (_egg ,_cacc ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _adc !=0{_caag :=_bed -(_bed %8)+7;for _fedd =_bed ;_fedd <=_caag &&_fedd < _ceda ;_fedd ++{if _aae .GetPixel (_fedd ,_gcac ){_bebd .X =_fedd ;_bebd .Y =_gcac ;return _bebd ,true ,nil ;};};};_agff :=(_bed /8)+1;_fedd =8*_agff ;var _aeda int ;for _fdab =_dgc +_agff ;
_fedd < _ceda ;_fdab ,_fedd =_fdab +1,_fedd +8{if _adc ,_egg =_aae .GetByte (_fdab );_egg !=nil {return _bebd ,false ,_b .Wrap (_egg ,_cacc ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _adc ==0{continue ;
};for _aeda =0;_aeda < 8&&_fedd < _ceda ;_aeda ,_fedd =_aeda +1,_fedd +1{if _aae .GetPixel (_fedd ,_gcac ){_bebd .X =_fedd ;_bebd .Y =_gcac ;return _bebd ,true ,nil ;};};};for _adac :=_gcac +1;_adac < _faeg ;_adac ++{_dgc =_adac *_eef ;for _fdab ,_fedd =_dgc ,0;
_fedd < _ceda ;_fdab ,_fedd =_fdab +1,_fedd +8{if _adc ,_egg =_aae .GetByte (_fdab );_egg !=nil {return _bebd ,false ,_b .Wrap (_egg ,_cacc ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _adc ==0{continue ;};for _aeda =0;
_aeda < 8&&_fedd < _ceda ;_aeda ,_fedd =_aeda +1,_fedd +1{if _aae .GetPixel (_fedd ,_adac ){_bebd .X =_fedd ;_bebd .Y =_adac ;return _bebd ,true ,nil ;};};};};return _bebd ,false ,nil ;};func _geegc (_gccg ,_afaa *Bitmap ,_gbad ,_bcge int )(_gafbg error ){const _adcg ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_dcec ,_ggcaf ,_dbcf ,_dbfebg int ;_cabd ,_eedg ,_fgbff ,_ggcb ,_fbggb ,_bgbff ,_bbfc ,_ebaeb byte ;);for _dcec =0;_dcec < _gbad ;_dcec ++{_dbcf =_dcec *_gccg .RowStride ;_dbfebg =_dcec *_afaa .RowStride ;for _ggcaf =0;_ggcaf < _bcge ;_ggcaf ++{if _cabd ,_gafbg =_gccg .GetByte (_dbcf +_ggcaf );
_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _eedg ,_gafbg =_afaa .GetByte (_dbfebg +_ggcaf );_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _dcec > 0{if _fgbff ,_gafbg =_gccg .GetByte (_dbcf -_gccg .RowStride +_ggcaf );_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cabd |=_fgbff |(_fgbff <<1)|(_fgbff >>1);if _ggcaf > 0{if _ebaeb ,_gafbg =_gccg .GetByte (_dbcf -_gccg .RowStride +_ggcaf -1);
_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cabd |=_ebaeb <<7;};if _ggcaf < _bcge -1{if _ebaeb ,_gafbg =_gccg .GetByte (_dbcf -_gccg .RowStride +_ggcaf +1);
_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_cabd |=_ebaeb >>7;};};if _ggcaf > 0{if _ggcb ,_gafbg =_gccg .GetByte (_dbcf +_ggcaf -1);_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u006a\u0020\u003e \u0030");
};_cabd |=_ggcb <<7;};_cabd &=_eedg ;if _cabd ==0||^_cabd ==0{if _gafbg =_gccg .SetByte (_dbcf +_ggcaf ,_cabd );_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};
};for {_bbfc =_cabd ;_cabd =(_cabd |(_cabd >>1)|(_cabd <<1))&_eedg ;if (_cabd ^_bbfc )==0{if _gafbg =_gccg .SetByte (_dbcf +_ggcaf ,_cabd );_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _dcec =_gbad -1;_dcec >=0;_dcec --{_dbcf =_dcec *_gccg .RowStride ;_dbfebg =_dcec *_afaa .RowStride ;for _ggcaf =_bcge -1;_ggcaf >=0;_ggcaf --{if _cabd ,_gafbg =_gccg .GetByte (_dbcf +_ggcaf );_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _eedg ,_gafbg =_afaa .GetByte (_dbfebg +_ggcaf );_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dcec < _gbad -1{if _fbggb ,_gafbg =_gccg .GetByte (_dbcf +_gccg .RowStride +_ggcaf );
_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_cabd |=_fbggb |(_fbggb <<1)|_fbggb >>1;if _ggcaf > 0{if _ebaeb ,_gafbg =_gccg .GetByte (_dbcf +_gccg .RowStride +_ggcaf -1);
_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_cabd |=_ebaeb <<7;};if _ggcaf < _bcge -1{if _ebaeb ,_gafbg =_gccg .GetByte (_dbcf +_gccg .RowStride +_ggcaf +1);
_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_cabd |=_ebaeb >>7;};};if _ggcaf < _bcge -1{if _bgbff ,_gafbg =_gccg .GetByte (_dbcf +_ggcaf +1);_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_cabd |=_bgbff >>7;};_cabd &=_eedg ;if _cabd ==0||(^_cabd )==0{if _gafbg =_gccg .SetByte (_dbcf +_ggcaf ,_cabd );_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_bbfc =_cabd ;
_cabd =(_cabd |(_cabd >>1)|(_cabd <<1))&_eedg ;if (_cabd ^_bbfc )==0{if _gafbg =_gccg .SetByte (_dbcf +_ggcaf ,_cabd );_gafbg !=nil {return _b .Wrap (_gafbg ,_adcg ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};var (_afga =_efa ();_bbgf =_gb ();_faaf =_ggg (););func (_dgf *Bitmap )ToImage ()_agb .Image {_ebce ,_ddd :=_dd .NewImage (_dgf .Width ,_dgf .Height ,1,1,_dgf .Data ,nil ,nil );if _ddd !=nil {_ddb .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ddd );
};return _ebce ;};func _ebf (_abcb *Bitmap ,_ffac *Bitmap ,_ecbg *Selection )(*Bitmap ,error ){var (_dcbd *Bitmap ;_bdcfb error ;);_abcb ,_bdcfb =_gdeaf (_abcb ,_ffac ,_ecbg ,&_dcbd );if _bdcfb !=nil {return nil ,_bdcfb ;};if _bdcfb =_abcb .clearAll ();
_bdcfb !=nil {return nil ,_bdcfb ;};var _bbfb SelectionValue ;for _dcaaf :=0;_dcaaf < _ecbg .Height ;_dcaaf ++{for _bab :=0;_bab < _ecbg .Width ;_bab ++{_bbfb =_ecbg .Data [_dcaaf ][_bab ];if _bbfb ==SelHit {if _bdcfb =_abcb .RasterOperation (_bab -_ecbg .Cx ,_dcaaf -_ecbg .Cy ,_ffac .Width ,_ffac .Height ,PixSrcOrDst ,_dcbd ,0,0);
_bdcfb !=nil {return nil ,_bdcfb ;};};};};return _abcb ,nil ;};func _fbfeg (_efeaf *Bitmap ,_bceb ,_baaa ,_eacc ,_cfb int ,_dgbef RasterOperator ,_dafb *Bitmap ,_aeafd ,_afa int )error {var (_feff bool ;_acef bool ;_gada int ;_fdfb int ;_baff int ;_ddfe bool ;
_dcff byte ;_cabc int ;_gbca int ;_dgad int ;_aaca ,_cbgcd int ;);_fgcb :=8-(_bceb &7);_gdae :=_bfbg [_fgcb ];_efdf :=_efeaf .RowStride *_baaa +(_bceb >>3);_ddga :=_dafb .RowStride *_afa +(_aeafd >>3);if _eacc < _fgcb {_feff =true ;_gdae &=_bgdff [8-_fgcb +_eacc ];
};if !_feff {_gada =(_eacc -_fgcb )>>3;if _gada > 0{_acef =true ;_fdfb =_efdf +1;_baff =_ddga +1;};};_cabc =(_bceb +_eacc )&7;if !(_feff ||_cabc ==0){_ddfe =true ;_dcff =_bgdff [_cabc ];_gbca =_efdf +1+_gada ;_dgad =_ddga +1+_gada ;};switch _dgbef {case PixSrc :for _aaca =0;
_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],_dafb .Data [_ddga ],_gdae );_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]=_dafb .Data [_baff +_cbgcd ];
};_fdfb +=_efeaf .RowStride ;_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],_dafb .Data [_dgad ],_dcff );_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixNotSrc :for _aaca =0;
_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],^_dafb .Data [_ddga ],_gdae );_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]=^_dafb .Data [_baff +_cbgcd ];
};_fdfb +=_efeaf .RowStride ;_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],^_dafb .Data [_dgad ],_dcff );_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixSrcOrDst :for _aaca =0;
_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],_dafb .Data [_ddga ]|_efeaf .Data [_efdf ],_gdae );_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;
_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]|=_dafb .Data [_baff +_cbgcd ];};_fdfb +=_efeaf .RowStride ;_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],_dafb .Data [_dgad ]|_efeaf .Data [_gbca ],_dcff );
_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixSrcAndDst :for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],_dafb .Data [_ddga ]&_efeaf .Data [_efdf ],_gdae );_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;
};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]&=_dafb .Data [_baff +_cbgcd ];};_fdfb +=_efeaf .RowStride ;_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],_dafb .Data [_dgad ]&_efeaf .Data [_gbca ],_dcff );
_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixSrcXorDst :for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],_dafb .Data [_ddga ]^_efeaf .Data [_efdf ],_gdae );_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;
};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]^=_dafb .Data [_baff +_cbgcd ];};_fdfb +=_efeaf .RowStride ;_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],_dafb .Data [_dgad ]^_efeaf .Data [_gbca ],_dcff );
_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixNotSrcOrDst :for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],^(_dafb .Data [_ddga ])|_efeaf .Data [_efdf ],_gdae );_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;
};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]|=^(_dafb .Data [_baff +_cbgcd ]);};_fdfb +=_efeaf .RowStride ;_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],^(_dafb .Data [_dgad ])|_efeaf .Data [_gbca ],_dcff );
_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixNotSrcAndDst :for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],^(_dafb .Data [_ddga ])&_efeaf .Data [_efdf ],_gdae );_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;
};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]&=^_dafb .Data [_baff +_cbgcd ];};_fdfb +=_efeaf .RowStride ;_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],^(_dafb .Data [_dgad ])&_efeaf .Data [_gbca ],_dcff );
_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixSrcOrNotDst :for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],_dafb .Data [_ddga ]|^(_efeaf .Data [_efdf ]),_gdae );_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;
};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]=_dafb .Data [_baff +_cbgcd ]|^(_efeaf .Data [_fdfb +_cbgcd ]);};_fdfb +=_efeaf .RowStride ;_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;
_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],_dafb .Data [_dgad ]|^(_efeaf .Data [_gbca ]),_dcff );_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixSrcAndNotDst :for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],_dafb .Data [_ddga ]&^(_efeaf .Data [_efdf ]),_gdae );
_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]=_dafb .Data [_baff +_cbgcd ]&^(_efeaf .Data [_fdfb +_cbgcd ]);};_fdfb +=_efeaf .RowStride ;
_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],_dafb .Data [_dgad ]&^(_efeaf .Data [_gbca ]),_dcff );_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixNotPixSrcOrDst :for _aaca =0;
_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],^(_dafb .Data [_ddga ]|_efeaf .Data [_efdf ]),_gdae );_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;
_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]=^(_dafb .Data [_baff +_cbgcd ]|_efeaf .Data [_fdfb +_cbgcd ]);};_fdfb +=_efeaf .RowStride ;_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],^(_dafb .Data [_dgad ]|_efeaf .Data [_gbca ]),_dcff );
_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixNotPixSrcAndDst :for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],^(_dafb .Data [_ddga ]&_efeaf .Data [_efdf ]),_gdae );_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;
};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]=^(_dafb .Data [_baff +_cbgcd ]&_efeaf .Data [_fdfb +_cbgcd ]);};_fdfb +=_efeaf .RowStride ;_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;
_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],^(_dafb .Data [_dgad ]&_efeaf .Data [_gbca ]),_dcff );_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};case PixNotPixSrcXorDst :for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_efdf ]=_dcgbf (_efeaf .Data [_efdf ],^(_dafb .Data [_ddga ]^_efeaf .Data [_efdf ]),_gdae );
_efdf +=_efeaf .RowStride ;_ddga +=_dafb .RowStride ;};if _acef {for _aaca =0;_aaca < _cfb ;_aaca ++{for _cbgcd =0;_cbgcd < _gada ;_cbgcd ++{_efeaf .Data [_fdfb +_cbgcd ]=^(_dafb .Data [_baff +_cbgcd ]^_efeaf .Data [_fdfb +_cbgcd ]);};_fdfb +=_efeaf .RowStride ;
_baff +=_dafb .RowStride ;};};if _ddfe {for _aaca =0;_aaca < _cfb ;_aaca ++{_efeaf .Data [_gbca ]=_dcgbf (_efeaf .Data [_gbca ],^(_dafb .Data [_dgad ]^_efeaf .Data [_gbca ]),_dcff );_gbca +=_efeaf .RowStride ;_dgad +=_dafb .RowStride ;};};default:_ddb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_dgbef );
return _b .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};const _acae =5000;type SelectionValue int ;func (_gabcf *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_gdga *Boxes ,_cacd error ){const _ddeb ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _gabcf ==nil {return nil ,_b .Error (_ddeb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_gabcf )==0{return _gabcf ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_ddeb ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_b .Errorf (_ddeb ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_abgg :=_gabcf .makeSizeIndicator (width ,height ,tp ,relation );_bgcb ,_cacd :=_gabcf .selectWithIndicator (_abgg );if _cacd !=nil {return nil ,_b .Wrap (_cacd ,_ddeb ,"");};return _bgcb ,nil ;};func (_gfcd *Bitmap )centroid (_gfed ,_gadf []int )(Point ,error ){_dfaa :=Point {};
_gfcd .setPadBits (0);if len (_gfed )==0{_gfed =_bbbad ();};if len (_gadf )==0{_gadf =_abcf ();};var _eagc ,_ddef ,_gaba ,_fbeb ,_gacbb ,_gcbc int ;var _ggda byte ;for _gacbb =0;_gacbb < _gfcd .Height ;_gacbb ++{_defe :=_gfcd .RowStride *_gacbb ;_fbeb =0;
for _gcbc =0;_gcbc < _gfcd .RowStride ;_gcbc ++{_ggda =_gfcd .Data [_defe +_gcbc ];if _ggda !=0{_fbeb +=_gadf [_ggda ];_eagc +=_gfed [_ggda ]+_gcbc *8*_gadf [_ggda ];};};_gaba +=_fbeb ;_ddef +=_fbeb *_gacbb ;};if _gaba !=0{_dfaa .X =float32 (_eagc )/float32 (_gaba );
_dfaa .Y =float32 (_ddef )/float32 (_gaba );};return _dfaa ,nil ;};func _gdgf (_adcb ,_feabf *Bitmap ,_cedc ,_ebgc int )(*Bitmap ,error ){const _gafa ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _feabf ==nil {return nil ,_b .Error (_gafa ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cedc < 1||_ebgc < 1{return nil ,_b .Error (_gafa ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _cedc ==1&&_ebgc ==1{return _feabf .Copy (),nil ;};if _cedc ==1||_ebgc ==1{_agfe :=SelCreateBrick (_ebgc ,_cedc ,_ebgc /2,_cedc /2,SelHit );
var _bacb error ;_adcb ,_bacb =_bfd (_adcb ,_feabf ,_agfe );if _bacb !=nil {return nil ,_b .Wrap (_bacb ,_gafa ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};
return _adcb ,nil ;};_fdea :=SelCreateBrick (1,_cedc ,0,_cedc /2,SelHit );_gbegc :=SelCreateBrick (_ebgc ,1,_ebgc /2,0,SelHit );_gcfd ,_fgec :=_ebf (nil ,_feabf ,_fdea );if _fgec !=nil {return nil ,_b .Wrap (_fgec ,_gafa ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _adcb ,_fgec =_ebf (_adcb ,_gcfd ,_gbegc );_fgec !=nil {return nil ,_b .Wrap (_fgec ,_gafa ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_fgec =_adbgf (_gcfd ,_adcb ,_fdea );_fgec !=nil {return nil ,_b .Wrap (_fgec ,_gafa ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_fgec =_adbgf (_adcb ,_gcfd ,_gbegc );_fgec !=nil {return nil ,_b .Wrap (_fgec ,_gafa ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _adcb ,nil ;};func (_eabg *ClassedPoints )SortByY (){_eabg ._gefb =_eabg .ySortFunction ();_g .Sort (_eabg )};
func _adbgf (_gegc ,_fgga *Bitmap ,_bgec *Selection )(*Bitmap ,error ){const _acbe ="\u0065\u0072\u006fd\u0065";var (_bfda error ;_ddfa *Bitmap ;);_gegc ,_bfda =_gdeaf (_gegc ,_fgga ,_bgec ,&_ddfa );if _bfda !=nil {return nil ,_b .Wrap (_bfda ,_acbe ,"");
};if _bfda =_gegc .setAll ();_bfda !=nil {return nil ,_b .Wrap (_bfda ,_acbe ,"");};var _cbaf SelectionValue ;for _ccba :=0;_ccba < _bgec .Height ;_ccba ++{for _bfeb :=0;_bfeb < _bgec .Width ;_bfeb ++{_cbaf =_bgec .Data [_ccba ][_bfeb ];if _cbaf ==SelHit {_bfda =_becbg (_gegc ,_bgec .Cx -_bfeb ,_bgec .Cy -_ccba ,_fgga .Width ,_fgga .Height ,PixSrcAndDst ,_ddfa ,0,0);
if _bfda !=nil {return nil ,_b .Wrap (_bfda ,_acbe ,"");};};};};if MorphBC ==SymmetricMorphBC {return _gegc ,nil ;};_cbde ,_gfbd ,_fdgd ,_ccfae :=_bgec .findMaxTranslations ();if _cbde > 0{if _bfda =_gegc .RasterOperation (0,0,_cbde ,_fgga .Height ,PixClr ,nil ,0,0);
_bfda !=nil {return nil ,_b .Wrap (_bfda ,_acbe ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _fdgd > 0{if _bfda =_gegc .RasterOperation (_fgga .Width -_fdgd ,0,_fdgd ,_fgga .Height ,PixClr ,nil ,0,0);_bfda !=nil {return nil ,_b .Wrap (_bfda ,_acbe ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _gfbd > 0{if _bfda =_gegc .RasterOperation (0,0,_fgga .Width ,_gfbd ,PixClr ,nil ,0,0);_bfda !=nil {return nil ,_b .Wrap (_bfda ,_acbe ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _ccfae > 0{if _bfda =_gegc .RasterOperation (0,_fgga .Height -_ccfae ,_fgga .Width ,_ccfae ,PixClr ,nil ,0,0);
_bfda !=nil {return nil ,_b .Wrap (_bfda ,_acbe ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _gegc ,nil ;};func _ggbc (_ebgg *Bitmap ,_aabc ,_cbea ,_bcffd ,_bbea int ,_gdbdf RasterOperator ,_gfbe *Bitmap ,_edcbf ,_acaf int )error {var (_gdee bool ;
_dgec bool ;_cfgf byte ;_cdbb int ;_bcdd int ;_cfbg int ;_fedca int ;_dcgb bool ;_deb int ;_bdgf int ;_cgfe int ;_cggc bool ;_afee byte ;_efgef int ;_fedb int ;_deee int ;_ebae byte ;_adacb int ;_ebgb int ;_fbgb uint ;_cbbe uint ;_dbgdf byte ;_fffg shift ;
_bfbb bool ;_aacc bool ;_caad ,_fbbgb int ;);if _edcbf &7!=0{_ebgb =8-(_edcbf &7);};if _aabc &7!=0{_bcdd =8-(_aabc &7);};if _ebgb ==0&&_bcdd ==0{_dbgdf =_bfbg [0];}else {if _bcdd > _ebgb {_fbgb =uint (_bcdd -_ebgb );}else {_fbgb =uint (8-(_ebgb -_bcdd ));
};_cbbe =8-_fbgb ;_dbgdf =_bfbg [_fbgb ];};if (_aabc &7)!=0{_gdee =true ;_cdbb =8-(_aabc &7);_cfgf =_bfbg [_cdbb ];_cfbg =_ebgg .RowStride *_cbea +(_aabc >>3);_fedca =_gfbe .RowStride *_acaf +(_edcbf >>3);_adacb =8-(_edcbf &7);if _cdbb > _adacb {_fffg =_gffb ;
if _bcffd >=_ebgb {_bfbb =true ;};}else {_fffg =_gacf ;};};if _bcffd < _cdbb {_dgec =true ;_cfgf &=_bgdff [8-_cdbb +_bcffd ];};if !_dgec {_deb =(_bcffd -_cdbb )>>3;if _deb !=0{_dcgb =true ;_bdgf =_ebgg .RowStride *_cbea +((_aabc +_bcdd )>>3);_cgfe =_gfbe .RowStride *_acaf +((_edcbf +_bcdd )>>3);
};};_efgef =(_aabc +_bcffd )&7;if !(_dgec ||_efgef ==0){_cggc =true ;_afee =_bgdff [_efgef ];_fedb =_ebgg .RowStride *_cbea +((_aabc +_bcdd )>>3)+_deb ;_deee =_gfbe .RowStride *_acaf +((_edcbf +_bcdd )>>3)+_deb ;if _efgef > int (_cbbe ){_aacc =true ;};
};switch _gdbdf {case PixSrc :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};
_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],_ebae ,_cfgf );_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );
_ebgg .Data [_bdgf +_fbbgb ]=_ebae ;};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;_caad < _bbea ;_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],_ebae ,_afee );
_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;};};case PixNotSrc :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;
};_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],^_ebae ,_cfgf );_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );
_ebgg .Data [_bdgf +_fbbgb ]=^_ebae ;};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;_caad < _bbea ;_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};
_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],^_ebae ,_afee );_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;};};case PixSrcOrDst :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );
};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],_ebae |_ebgg .Data [_cfbg ],_cfgf );_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;
_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );_ebgg .Data [_bdgf +_fbbgb ]|=_ebae ;};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;_caad < _bbea ;
_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],_ebae |_ebgg .Data [_fedb ],_afee );_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;
};};case PixSrcAndDst :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],_ebae &_ebgg .Data [_cfbg ],_cfgf );
_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );_ebgg .Data [_bdgf +_fbbgb ]&=_ebae ;
};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;_caad < _bbea ;_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],_ebae &_ebgg .Data [_fedb ],_afee );
_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;};};case PixSrcXorDst :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );};
}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],_ebae ^_ebgg .Data [_cfbg ],_cfgf );_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;_fbbgb < _deb ;
_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );_ebgg .Data [_bdgf +_fbbgb ]^=_ebae ;};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;_caad < _bbea ;_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;
if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],_ebae ^_ebgg .Data [_fedb ],_afee );_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;};};case PixNotSrcOrDst :if _gdee {for _caad =0;
_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],^_ebae |_ebgg .Data [_cfbg ],_cfgf );
_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );_ebgg .Data [_bdgf +_fbbgb ]|=^_ebae ;
};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;_caad < _bbea ;_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],^_ebae |_ebgg .Data [_fedb ],_afee );
_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;};};case PixNotSrcAndDst :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );
};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],^_ebae &_ebgg .Data [_cfbg ],_cfgf );_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;
_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );_ebgg .Data [_bdgf +_fbbgb ]&=^_ebae ;};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;_caad < _bbea ;
_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],^_ebae &_ebgg .Data [_fedb ],_afee );_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;
};};case PixSrcOrNotDst :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],_ebae |^_ebgg .Data [_cfbg ],_cfgf );
_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );_ebgg .Data [_bdgf +_fbbgb ]=_ebae |^_ebgg .Data [_bdgf +_fbbgb ];
};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;_caad < _bbea ;_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],_ebae |^_ebgg .Data [_fedb ],_afee );
_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;};};case PixSrcAndNotDst :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );
};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],_ebae &^_ebgg .Data [_cfbg ],_cfgf );_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;
_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );_ebgg .Data [_bdgf +_fbbgb ]=_ebae &^_ebgg .Data [_bdgf +_fbbgb ];};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;
_caad < _bbea ;_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],_ebae &^_ebgg .Data [_fedb ],_afee );_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;
};};case PixNotPixSrcOrDst :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],^(_ebae |_ebgg .Data [_cfbg ]),_cfgf );
_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );_ebgg .Data [_bdgf +_fbbgb ]=^(_ebae |_ebgg .Data [_bdgf +_fbbgb ]);
};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;_caad < _bbea ;_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],^(_ebae |_ebgg .Data [_fedb ]),_afee );
_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;};};case PixNotPixSrcAndDst :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );
};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],^(_ebae &_ebgg .Data [_cfbg ]),_cfgf );_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;
_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );_ebgg .Data [_bdgf +_fbbgb ]=^(_ebae &_ebgg .Data [_bdgf +_fbbgb ]);};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;
_caad < _bbea ;_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],^(_ebae &_ebgg .Data [_fedb ]),_afee );_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;
};};case PixNotPixSrcXorDst :if _gdee {for _caad =0;_caad < _bbea ;_caad ++{if _fffg ==_gffb {_ebae =_gfbe .Data [_fedca ]<<_fbgb ;if _bfbb {_ebae =_dcgbf (_ebae ,_gfbe .Data [_fedca +1]>>_cbbe ,_dbgdf );};}else {_ebae =_gfbe .Data [_fedca ]>>_cbbe ;};
_ebgg .Data [_cfbg ]=_dcgbf (_ebgg .Data [_cfbg ],^(_ebae ^_ebgg .Data [_cfbg ]),_cfgf );_cfbg +=_ebgg .RowStride ;_fedca +=_gfbe .RowStride ;};};if _dcgb {for _caad =0;_caad < _bbea ;_caad ++{for _fbbgb =0;_fbbgb < _deb ;_fbbgb ++{_ebae =_dcgbf (_gfbe .Data [_cgfe +_fbbgb ]<<_fbgb ,_gfbe .Data [_cgfe +_fbbgb +1]>>_cbbe ,_dbgdf );
_ebgg .Data [_bdgf +_fbbgb ]=^(_ebae ^_ebgg .Data [_bdgf +_fbbgb ]);};_bdgf +=_ebgg .RowStride ;_cgfe +=_gfbe .RowStride ;};};if _cggc {for _caad =0;_caad < _bbea ;_caad ++{_ebae =_gfbe .Data [_deee ]<<_fbgb ;if _aacc {_ebae =_dcgbf (_ebae ,_gfbe .Data [_deee +1]>>_cbbe ,_dbgdf );
};_ebgg .Data [_fedb ]=_dcgbf (_ebgg .Data [_fedb ],^(_ebae ^_ebgg .Data [_fedb ]),_afee );_fedb +=_ebgg .RowStride ;_deee +=_gfbe .RowStride ;};};default:_ddb .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_gdbdf );
return _b .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_fbc *Boxes )Get (i int )(*_agb .Rectangle ,error ){const _fadd ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _fbc ==nil {return nil ,_b .Error (_fadd ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_fbc )-1{return nil ,_b .Errorf (_fadd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_fbc )[i ],nil ;};func (_fcc *Bitmap )SetByte (index int ,v byte )error {if index > len (_fcc .Data )-1||index < 0{return _b .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_fcc .Data [index ]=v ;return nil ;};func (_abbc *Bitmap )nextOnPixel (_dgfg ,_cfgb int )(_gacg _agb .Point ,_dgbc bool ,_bage error ){const _eag ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_gacg ,_dgbc ,_bage =_abbc .nextOnPixelLow (_abbc .Width ,_abbc .Height ,_abbc .RowStride ,_dgfg ,_cfgb );
if _bage !=nil {return _gacg ,false ,_b .Wrap (_bage ,_eag ,"");};return _gacg ,_dgbc ,nil ;};type fillSegment struct{_gfgb int ;_fcca int ;_eaba int ;_aeec int ;};func _cacdd (_agfee *Bitmap ,_eabc int )(*Bitmap ,error ){const _cbad ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _agfee ==nil {return nil ,_b .Error (_cbad ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _eabc <=0{return nil ,_b .Error (_cbad ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _eabc ==1{_dfcf ,_cdgf :=_geg (nil ,_agfee );if _cdgf !=nil {return nil ,_b .Wrap (_cdgf ,_cbad ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _dfcf ,nil ;};_gggg ,_faae :=_bge (_agfee ,_eabc ,_eabc );if _faae !=nil {return nil ,_b .Wrap (_faae ,_cbad ,"");
};return _gggg ,nil ;};type MorphOperation int ;func (_aeff *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _agbbf ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _aeff ==nil {return nil ,_b .Error (_agbbf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_aeff .Values )-1{return nil ,_b .Errorf (_agbbf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _aeff .Values [i ],nil ;};func (_fgef *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _ebbb ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _fgef ==nil {return nil ,_b .Error (_ebbb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_fgef .Values )-1{return nil ,_b .Errorf (_ebbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fgef .Values [i ],nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);type CombinationOperator int ;func (_beae Points )GetIntY (i int )(int ,error ){if i >=len (_beae ){return 0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_beae [i ].Y ),nil ;};func TstImageBitmapData ()[]byte {return _bgga .Data };type LocationFilter int ;func (_agcaa *BitmapsArray )AddBitmaps (bm *Bitmaps ){_agcaa .Values =append (_agcaa .Values ,bm )};func TstWriteSymbols (t *_d .T ,bms *Bitmaps ,src *Bitmap ){for _ebgcb :=0;
_ebgcb < bms .Size ();_ebgcb ++{_gebg :=bms .Values [_ebgcb ];_aeeb :=bms .Boxes [_ebgcb ];_becf :=src .RasterOperation (_aeeb .Min .X ,_aeeb .Min .Y ,_gebg .Width ,_gebg .Height ,PixSrc ,_gebg ,0,0);_a .NoError (t ,_becf );};};type SizeSelection int ;
const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _bge (_cfc *Bitmap ,_cceb ,_fed int )(*Bitmap ,error ){const _bgfd ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _cfc ==nil {return nil ,_b .Error (_bgfd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cceb <=0||_fed <=0{return nil ,_b .Error (_bgfd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _cceb ==_fed {if _cceb ==1{_fab ,_cge :=_geg (nil ,_cfc );if _cge !=nil {return nil ,_b .Wrap (_cge ,_bgfd ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _fab ,nil ;};if _cceb ==2||_cceb ==4||_cceb ==8{_fca ,_fcd :=_agf (_cfc ,_cceb );
if _fcd !=nil {return nil ,_b .Wrap (_fcd ,_bgfd ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _fca ,nil ;};};_gg :=_cceb *_cfc .Width ;_cfg :=_fed *_cfc .Height ;_cb :=New (_gg ,_cfg );_cec :=_cb .RowStride ;
var (_dbd ,_cea ,_cda ,_bga ,_cdae int ;_fcb byte ;_bad error ;);for _cea =0;_cea < _cfc .Height ;_cea ++{_dbd =_fed *_cea *_cec ;for _cda =0;_cda < _cfc .Width ;_cda ++{if _dge :=_cfc .GetPixel (_cda ,_cea );_dge {_cdae =_cceb *_cda ;for _bga =0;_bga < _cceb ;
_bga ++{_cb .setBit (_dbd *8+_cdae +_bga );};};};for _bga =1;_bga < _fed ;_bga ++{_dbdf :=_dbd +_bga *_cec ;for _ggb :=0;_ggb < _cec ;_ggb ++{if _fcb ,_bad =_cb .GetByte (_dbd +_ggb );_bad !=nil {return nil ,_b .Wrapf (_bad ,_bgfd ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_bga );
};if _bad =_cb .SetByte (_dbdf +_ggb ,_fcb );_bad !=nil {return nil ,_b .Wrap (_bad ,_bgfd ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _cb ,nil ;};func (_fgg *Bitmap )clipRectangle (_aea ,_dabg *_agb .Rectangle )(_gde *Bitmap ,_efab error ){const _egbb ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _aea ==nil {return nil ,_b .Error (_egbb ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_ecdc ,_cbg :=_fgg .Width ,_fgg .Height ;_eegf ,_efab :=ClipBoxToRectangle (_aea ,_ecdc ,_cbg );if _efab !=nil {_ddb .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_efab );
return nil ,nil ;};_bdb ,_gdf :=_eegf .Min .X ,_eegf .Min .Y ;_dgae ,_cfgc :=_eegf .Max .X -_eegf .Min .X ,_eegf .Max .Y -_eegf .Min .Y ;_gde =New (_dgae ,_cfgc );_gde .Text =_fgg .Text ;if _efab =_gde .RasterOperation (0,0,_dgae ,_cfgc ,PixSrc ,_fgg ,_bdb ,_gdf );
_efab !=nil {return nil ,_b .Wrap (_efab ,_egbb ,"");};if _dabg !=nil {*_dabg =*_eegf ;};return _gde ,nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func _cfdc (_ega ,_eccb int ,_gdcdg string )*Selection {_ddecg :=&Selection {Height :_ega ,Width :_eccb ,Name :_gdcdg };
_ddecg .Data =make ([][]SelectionValue ,_ega );for _cafg :=0;_cafg < _ega ;_cafg ++{_ddecg .Data [_cafg ]=make ([]SelectionValue ,_eccb );};return _ddecg ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _eeaa (d ,s ,hSize ,vSize )};
func (_agec *Bitmaps )WidthSorter ()func (_fabcf ,_aggab int )bool {return func (_ebgca ,_gcdb int )bool {return _agec .Values [_ebgca ].Width < _agec .Values [_gcdb ].Width };};func (_eabf *ClassedPoints )YAtIndex (i int )float32 {return (*_eabf .Points )[_eabf .IntSlice [i ]].Y };
type byWidth Bitmaps ;func _cbefe (_caca *_gc .Stack )(_agfad *fillSegment ,_fgdf error ){const _cadb ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _caca ==nil {return nil ,_b .Error (_cadb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _caca .Aux ==nil {return nil ,_b .Error (_cadb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_eaaca ,_bcdf :=_caca .Pop ();if !_bcdf {return nil ,nil ;};_ffgd ,_bcdf :=_eaaca .(*fillSegment );
if !_bcdf {return nil ,_b .Error (_cadb ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_agfad =&fillSegment {_ffgd ._gfgb ,_ffgd ._fcca ,_ffgd ._eaba +_ffgd ._aeec ,_ffgd ._aeec };
_caca .Aux .Push (_ffgd );return _agfad ,nil ;};func TstFrameBitmap ()*Bitmap {return _gddce .Copy ()};func (_gadfg *Bitmaps )Size ()int {return len (_gadfg .Values )};func TstDSymbol (t *_d .T ,scale ...int )*Bitmap {_dcgc ,_edfg :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});
_a .NoError (t ,_edfg );return TstGetScaledSymbol (t ,_dcgc ,scale ...);};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func TstOSymbol (t *_d .T ,scale ...int )*Bitmap {_gecgf ,_ebgge :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_a .NoError (t ,_ebgge );
return TstGetScaledSymbol (t ,_gecgf ,scale ...);};func (_dec *Bitmap )GetPixel (x ,y int )bool {_afc :=_dec .GetByteIndex (x ,y );_eceg :=_dec .GetBitOffset (x );_ddg :=uint (7-_eceg );if _afc > len (_dec .Data )-1{_ddb .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_dec );
return false ;};if (_dec .Data [_afc ]>>_ddg )&0x01>=1{return true ;};return false ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_gbbba :=_cfdc (h ,w ,"");_gbbba .setOrigin (cy ,cx );var _bgfga ,_abbca int ;for _bgfga =0;
_bgfga < h ;_bgfga ++{for _abbca =0;_abbca < w ;_abbca ++{_gbbba .Data [_bgfga ][_abbca ]=tp ;};};return _gbbba ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _aaa ,_geac int ;_bfc :=src .RowStride -1;if x < 0{_geac =-x ;
x =0;}else if x +src .Width > dst .Width {_bfc -=src .Width +x -dst .Width ;};if y < 0{_aaa =-y ;y =0;_geac +=src .RowStride ;_bfc +=src .RowStride ;}else if y +src .Height > dst .Height {_aaa =src .Height +y -dst .Height ;};var (_dcaa int ;_eae error ;
);_fgf :=x &0x07;_ccb :=8-_fgf ;_fgcg :=src .Width &0x07;_adca :=_ccb -_fgcg ;_ded :=_ccb &0x07!=0;_dfag :=src .Width <=((_bfc -_geac )<<3)+_ccb ;_dfaee :=dst .GetByteIndex (x ,y );_dbdd :=_aaa +dst .Height ;if src .Height > _dbdd {_dcaa =_dbdd ;}else {_dcaa =src .Height ;
};switch {case !_ded :_eae =_ggee (src ,dst ,_aaa ,_dcaa ,_dfaee ,_geac ,_bfc ,op );case _dfag :_eae =_aggg (src ,dst ,_aaa ,_dcaa ,_dfaee ,_geac ,_bfc ,_adca ,_fgf ,_ccb ,op );default:_eae =_egccf (src ,dst ,_aaa ,_dcaa ,_dfaee ,_geac ,_bfc ,_adca ,_fgf ,_ccb ,op ,_fgcg );
};return _eae ;};func (_gfab *Bitmap )setEightFullBytes (_gcgcb int ,_ddcf uint64 )error {if _gcgcb +7> len (_gfab .Data )-1{return _b .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_gfab .Data [_gcgcb ]=byte ((_ddcf &0xff00000000000000)>>56);_gfab .Data [_gcgcb +1]=byte ((_ddcf &0xff000000000000)>>48);_gfab .Data [_gcgcb +2]=byte ((_ddcf &0xff0000000000)>>40);_gfab .Data [_gcgcb +3]=byte ((_ddcf &0xff00000000)>>32);_gfab .Data [_gcgcb +4]=byte ((_ddcf &0xff000000)>>24);
_gfab .Data [_gcgcb +5]=byte ((_ddcf &0xff0000)>>16);_gfab .Data [_gcgcb +6]=byte ((_ddcf &0xff00)>>8);_gfab .Data [_gcgcb +7]=byte (_ddcf &0xff);return nil ;};type Points []Point ;func (_feb *Bitmap )countPixels ()int {var (_cbgc int ;_dcf uint8 ;_gag byte ;
_dgfd int ;);_ebdf :=_feb .RowStride ;_aagg :=uint (_feb .Width &0x07);if _aagg !=0{_dcf =uint8 ((0xff<<(8-_aagg ))&0xff);_ebdf --;};for _ebdc :=0;_ebdc < _feb .Height ;_ebdc ++{for _dgfd =0;_dgfd < _ebdf ;_dgfd ++{_gag =_feb .Data [_ebdc *_feb .RowStride +_dgfd ];
_cbgc +=int (_ac [_gag ]);};if _aagg !=0{_cbgc +=int (_ac [_feb .Data [_ebdc *_feb .RowStride +_dgfd ]&_dcf ]);};};return _cbgc ;};func ClipBoxToRectangle (box *_agb .Rectangle ,wi ,hi int )(_accd *_agb .Rectangle ,_gacb error ){const _ffg ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_b .Error (_ffg ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_b .Error (_ffg ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_cbge :=*box ;_accd =&_cbge ;if _accd .Min .X < 0{_accd .Max .X +=_accd .Min .X ;_accd .Min .X =0;};if _accd .Min .Y < 0{_accd .Max .Y +=_accd .Min .Y ;_accd .Min .Y =0;};if _accd .Max .X > wi {_accd .Max .X =wi ;};if _accd .Max .Y > hi {_accd .Max .Y =hi ;
};return _accd ,nil ;};func _begc (_addg ,_gfebg *Bitmap ,_efac ,_bbcg int )(*Bitmap ,error ){const _bdda ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _gfebg ==nil {return nil ,_b .Error (_bdda ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _efac < 1||_bbcg < 1{return nil ,_b .Error (_bdda ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _efac ==1&&_bbcg ==1{return _geg (_addg ,_gfebg );};if MorphBC ==SymmetricMorphBC {_deea ,_dgcg :=_gdgf (_addg ,_gfebg ,_efac ,_bbcg );
if _dgcg !=nil {return nil ,_b .Wrap (_dgcg ,_bdda ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _deea ,nil ;};_eadc :=_bgfgb (_efac /2,_bbcg /2);_bddc :=8*((_eadc +7)/8);_acde ,_egcb :=_gfebg .AddBorder (_bddc ,0);
if _egcb !=nil {return nil ,_b .Wrapf (_egcb ,_bdda ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_bddc );};var _cceg ,_bdcf *Bitmap ;if _efac ==1||_bbcg ==1{_ace :=SelCreateBrick (_bbcg ,_efac ,_bbcg /2,_efac /2,SelHit );
_cceg ,_egcb =_bfd (nil ,_acde ,_ace );if _egcb !=nil {return nil ,_b .Wrap (_egcb ,_bdda ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_ecagg :=SelCreateBrick (1,_efac ,0,_efac /2,SelHit );
_dgfb ,_ceabd :=_ebf (nil ,_acde ,_ecagg );if _ceabd !=nil {return nil ,_b .Wrap (_ceabd ,_bdda ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_dcac :=SelCreateBrick (_bbcg ,1,_bbcg /2,0,SelHit );
_cceg ,_ceabd =_ebf (nil ,_dgfb ,_dcac );if _ceabd !=nil {return nil ,_b .Wrap (_ceabd ,_bdda ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_ceabd =_adbgf (_dgfb ,_cceg ,_ecagg );
_ceabd !=nil {return nil ,_b .Wrap (_ceabd ,_bdda ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_ceabd =_adbgf (_cceg ,_dgfb ,_dcac );_ceabd !=nil {return nil ,_b .Wrap (_ceabd ,_bdda ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _bdcf ,_egcb =_cceg .RemoveBorder (_bddc );_egcb !=nil {return nil ,_b .Wrap (_egcb ,_bdda ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _addg ==nil {return _bdcf ,nil ;};if _ ,_egcb =_geg (_addg ,_bdcf );_egcb !=nil {return nil ,_egcb ;};return _addg ,nil ;
};func (_fabdf *BitmapsArray )AddBox (box *_agb .Rectangle ){_fabdf .Boxes =append (_fabdf .Boxes ,box )};type shift int ;func (_gfaa *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_eaac *Boxes ,_bbd error ){const _bcfa ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _gfaa ==nil {return nil ,_b .Error (_bcfa ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_b .Error (_bcfa ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _eaac ,_bbd =_gfaa .connComponentsBB (connectivity );_bbd !=nil {return nil ,_b .Wrap (_bbd ,_bcfa ,"");};}else {if _eaac ,_bbd =_gfaa .connComponentsBitmapsBB (bms ,connectivity );_bbd !=nil {return nil ,_b .Wrap (_bbd ,_bcfa ,"");};
};return _eaac ,nil ;};type BoundaryCondition int ;func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_deef bool ,_ggce error ){const _fbea ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_ecae ,_cabg :=p1 .Width ,p1 .Height ;_fdaa ,_dbcca :=p3 .Width ,p3 .Height ;if _gc .Abs (_ecae -_fdaa )> maxDiffW {return false ,nil ;};if _gc .Abs (_cabg -_dbcca )> maxDiffH {return false ,nil ;};_fgfg :=int (float32 (area1 )*(1.0-rank )+0.5);_acga :=int (float32 (area3 )*(1.0-rank )+0.5);
var _gggba ,_fgbe int ;if delX >=0{_gggba =int (delX +0.5);}else {_gggba =int (delX -0.5);};if delY >=0{_fgbe =int (delY +0.5);}else {_fgbe =int (delY -0.5);};_cfd :=p1 .CreateTemplate ();if _ggce =_cfd .RasterOperation (0,0,_ecae ,_cabg ,PixSrc ,p1 ,0,0);
_ggce !=nil {return false ,_b .Wrap (_ggce ,_fbea ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ggce =_cfd .RasterOperation (_gggba ,_fgbe ,_ecae ,_cabg ,PixNotSrcAndDst ,p4 ,0,0);_ggce !=nil {return false ,_b .Wrap (_ggce ,_fbea ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_deef ,_ggce =_cfd .ThresholdPixelSum (_fgfg ,tab8 );if _ggce !=nil {return false ,_b .Wrap (_ggce ,_fbea ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _deef {return false ,nil ;};if _ggce =_cfd .RasterOperation (_gggba ,_fgbe ,_fdaa ,_dbcca ,PixSrc ,p3 ,0,0);
_ggce !=nil {return false ,_b .Wrap (_ggce ,_fbea ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ggce =_cfd .RasterOperation (0,0,_fdaa ,_dbcca ,PixNotSrcAndDst ,p2 ,0,0);_ggce !=nil {return false ,_b .Wrap (_ggce ,_fbea ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_deef ,_ggce =_cfd .ThresholdPixelSum (_acga ,tab8 );if _ggce !=nil {return false ,_b .Wrap (_ggce ,_fbea ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_deef ,nil ;};func (_cebb *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _ddab ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_cebb .IntSlice .Size (){return 0,_b .Errorf (_ddab ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_cebb .XAtIndex (i )),nil ;};func (_begfg *Bitmaps )GetBox (i int )(*_agb .Rectangle ,error ){const _ecfc ="\u0047\u0065\u0074\u0042\u006f\u0078";if _begfg ==nil {return nil ,_b .Error (_ecfc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_begfg .Boxes )-1{return nil ,_b .Errorf (_ecfc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _begfg .Boxes [i ],nil ;};type Point struct{X ,Y float32 ;
};func _aggg (_afdg ,_bead *Bitmap ,_efge ,_befcf ,_ffef ,_dde ,_cgab ,_beaf ,_eff ,_ccbd int ,_adgg CombinationOperator )error {var _abe int ;_fff :=func (){_abe ++;_ffef +=_bead .RowStride ;_dde +=_afdg .RowStride ;_cgab +=_afdg .RowStride };for _abe =_efge ;
_abe < _befcf ;_fff (){var _efdb uint16 ;_gdg :=_ffef ;for _edcc :=_dde ;_edcc <=_cgab ;_edcc ++{_fde ,_ecdb :=_bead .GetByte (_gdg );if _ecdb !=nil {return _ecdb ;};_dbcc ,_ecdb :=_afdg .GetByte (_edcc );if _ecdb !=nil {return _ecdb ;};_efdb =(_efdb |uint16 (_dbcc ))<<uint (_ccbd );
_dbcc =byte (_efdb >>8);if _edcc ==_cgab {_dbcc =_efbdd (uint (_beaf ),_dbcc );};if _ecdb =_bead .SetByte (_gdg ,_gda (_fde ,_dbcc ,_adgg ));_ecdb !=nil {return _ecdb ;};_gdg ++;_efdb <<=uint (_eff );};};return nil ;};func _afcc (_ede ,_add ,_afd *Bitmap )(*Bitmap ,error ){const _dabgg ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";
if _add ==nil {return nil ,_b .Error (_dabgg ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _afd ==nil {return nil ,_b .Error (_dabgg ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _baad error ;switch {case _ede ==_add :if _baad =_ede .RasterOperation (0,0,_add .Width ,_add .Height ,PixNotSrcAndDst ,_afd ,0,0);
_baad !=nil {return nil ,_b .Wrap (_baad ,_dabgg ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _ede ==_afd :if _baad =_ede .RasterOperation (0,0,_add .Width ,_add .Height ,PixNotSrcAndDst ,_add ,0,0);_baad !=nil {return nil ,_b .Wrap (_baad ,_dabgg ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_ede ,_baad =_geg (_ede ,_add );if _baad !=nil {return nil ,_b .Wrap (_baad ,_dabgg ,"");};if _baad =_ede .RasterOperation (0,0,_add .Width ,_add .Height ,PixNotSrcAndDst ,_afd ,0,0);_baad !=nil {return nil ,_b .Wrap (_baad ,_dabgg ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _ede ,nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _cgc ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_fdg :=_cga (width ,height );_fdg .Data =data ;
if _bgag :=((width *height )+7)>>3;len (data )< _bgag {return nil ,_b .Errorf (_cgc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_bgag );
};if _daa :=_fdg .addPadBits ();_daa !=nil {return nil ,_b .Wrap (_daa ,_cgc ,"");};return _fdg ,nil ;};func (_acf *Bitmap )setTwoBytes (_fadgb int ,_eaff uint16 )error {if _fadgb +1> len (_acf .Data )-1{return _b .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_fadgb );
};_acf .Data [_fadgb ]=byte ((_eaff &0xff00)>>8);_acf .Data [_fadgb +1]=byte (_eaff &0xff);return nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _ebf (d ,s ,sel )};func _eaa ()(_edb []byte ){_edb =make ([]byte ,256);
for _gbcc :=0;_gbcc < 256;_gbcc ++{_ddbd :=byte (_gbcc );_edb [_ddbd ]=(_ddbd &0x01)|((_ddbd &0x04)>>1)|((_ddbd &0x10)>>2)|((_ddbd &0x40)>>3)|((_ddbd &0x02)<<3)|((_ddbd &0x08)<<2)|((_ddbd &0x20)<<1)|(_ddbd &0x80);};return _edb ;};func (_ceabdg CombinationOperator )String ()string {var _abaa string ;
switch _ceabdg {case CmbOpOr :_abaa ="\u004f\u0052";case CmbOpAnd :_abaa ="\u0041\u004e\u0044";case CmbOpXor :_abaa ="\u0058\u004f\u0052";case CmbOpXNor :_abaa ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_abaa ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_abaa ="\u004e\u004f\u0054";};return _abaa ;};func _agga (_bgcbe *Bitmap ,_bffe *Bitmap ,_cagaf int )(_agfef error ){const _cbgea ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_efad :=_fbdd (_bgcbe .Height ,_bffe .Height );
_gbecd :=_fbdd (_bgcbe .RowStride ,_bffe .RowStride );switch _cagaf {case 4:_agfef =_bffd (_bgcbe ,_bffe ,_efad ,_gbecd );case 8:_agfef =_geegc (_bgcbe ,_bffe ,_efad ,_gbecd );default:return _b .Errorf (_cbgea ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_cagaf );
};if _agfef !=nil {return _b .Wrap (_agfef ,_cbgea ,"");};return nil ;};func (_bfe *Bitmap )SizesEqual (s *Bitmap )bool {if _bfe ==s {return true ;};if _bfe .Width !=s .Width ||_bfe .Height !=s .Height {return false ;};return true ;};func TstFrameBitmapData ()[]byte {return _gddce .Data };
func _bbac (_geab *Bitmap ,_fdcd ,_bfaa int ,_bacgc ,_bddcg int ,_dbcd RasterOperator ){var (_accg int ;_ageb byte ;_ggcf ,_aabf int ;_aadc int ;);_gfbb :=_bacgc >>3;_dgde :=_bacgc &7;if _dgde > 0{_ageb =_bgdff [_dgde ];};_accg =_geab .RowStride *_bfaa +(_fdcd >>3);
switch _dbcd {case PixClr :for _ggcf =0;_ggcf < _bddcg ;_ggcf ++{_aadc =_accg +_ggcf *_geab .RowStride ;for _aabf =0;_aabf < _gfbb ;_aabf ++{_geab .Data [_aadc ]=0x0;_aadc ++;};if _dgde > 0{_geab .Data [_aadc ]=_dcgbf (_geab .Data [_aadc ],0x0,_ageb );
};};case PixSet :for _ggcf =0;_ggcf < _bddcg ;_ggcf ++{_aadc =_accg +_ggcf *_geab .RowStride ;for _aabf =0;_aabf < _gfbb ;_aabf ++{_geab .Data [_aadc ]=0xff;_aadc ++;};if _dgde > 0{_geab .Data [_aadc ]=_dcgbf (_geab .Data [_aadc ],0xff,_ageb );};};case PixNotDst :for _ggcf =0;
_ggcf < _bddcg ;_ggcf ++{_aadc =_accg +_ggcf *_geab .RowStride ;for _aabf =0;_aabf < _gfbb ;_aabf ++{_geab .Data [_aadc ]=^_geab .Data [_aadc ];_aadc ++;};if _dgde > 0{_geab .Data [_aadc ]=_dcgbf (_geab .Data [_aadc ],^_geab .Data [_aadc ],_ageb );};};
};};func (_dffc *byHeight )Swap (i ,j int ){_dffc .Values [i ],_dffc .Values [j ]=_dffc .Values [j ],_dffc .Values [i ];if _dffc .Boxes !=nil {_dffc .Boxes [i ],_dffc .Boxes [j ]=_dffc .Boxes [j ],_dffc .Boxes [i ];};};func _caf (_ccgb *Bitmap ,_fgede ,_gcfab int ,_ceeb ,_bgcbd int ,_gcbf RasterOperator ,_ecge *Bitmap ,_feac ,_bbca int )error {var _defd ,_eeddg ,_edcb ,_abcc int ;
if _fgede < 0{_feac -=_fgede ;_ceeb +=_fgede ;_fgede =0;};if _feac < 0{_fgede -=_feac ;_ceeb +=_feac ;_feac =0;};_defd =_fgede +_ceeb -_ccgb .Width ;if _defd > 0{_ceeb -=_defd ;};_eeddg =_feac +_ceeb -_ecge .Width ;if _eeddg > 0{_ceeb -=_eeddg ;};if _gcfab < 0{_bbca -=_gcfab ;
_bgcbd +=_gcfab ;_gcfab =0;};if _bbca < 0{_gcfab -=_bbca ;_bgcbd +=_bbca ;_bbca =0;};_edcb =_gcfab +_bgcbd -_ccgb .Height ;if _edcb > 0{_bgcbd -=_edcb ;};_abcc =_bbca +_bgcbd -_ecge .Height ;if _abcc > 0{_bgcbd -=_abcc ;};if _ceeb <=0||_bgcbd <=0{return nil ;
};var _dadc error ;switch {case _fgede &7==0&&_feac &7==0:_dadc =_ccgdb (_ccgb ,_fgede ,_gcfab ,_ceeb ,_bgcbd ,_gcbf ,_ecge ,_feac ,_bbca );case _fgede &7==_feac &7:_dadc =_fbfeg (_ccgb ,_fgede ,_gcfab ,_ceeb ,_bgcbd ,_gcbf ,_ecge ,_feac ,_bbca );default:_dadc =_ggbc (_ccgb ,_fgede ,_gcfab ,_ceeb ,_bgcbd ,_gcbf ,_ecge ,_feac ,_bbca );
};if _dadc !=nil {return _b .Wrap (_dadc ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_efcc *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _becbg (_efcc ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_cdgb *Bitmaps )selectByIndicator (_agab *_gc .NumSlice )(_edgf *Bitmaps ,_fcae error ){const _gcag ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _cdgb ==nil {return nil ,_b .Error (_gcag ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _agab ==nil {return nil ,_b .Error (_gcag ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_cdgb .Values )==0{return _cdgb ,nil ;};if len (*_agab )!=len (_cdgb .Values ){return nil ,_b .Errorf (_gcag ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_agab ),len (_cdgb .Values ));
};var _gdgag ,_dgdc ,_agbga int ;for _dgdc =0;_dgdc < len (*_agab );_dgdc ++{if _gdgag ,_fcae =_agab .GetInt (_dgdc );_fcae !=nil {return nil ,_b .Wrap (_fcae ,_gcag ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _gdgag ==1{_agbga ++;
};};if _agbga ==len (_cdgb .Values ){return _cdgb ,nil ;};_edgf =&Bitmaps {};_fbbc :=len (_cdgb .Values )==len (_cdgb .Boxes );for _dgdc =0;_dgdc < len (*_agab );_dgdc ++{if _gdgag =int ((*_agab )[_dgdc ]);_gdgag ==0{continue ;};_edgf .Values =append (_edgf .Values ,_cdgb .Values [_dgdc ]);
if _fbbc {_edgf .Boxes =append (_edgf .Boxes ,_cdgb .Boxes [_dgdc ]);};};return _edgf ,nil ;};func _dcgbf (_fagg ,_ecbe ,_bbeab byte )byte {return (_fagg &^(_bbeab ))|(_ecbe &_bbeab )};func (_cgef *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_agcg *Bitmaps ,_cbdf *Boxes ,_dedc error ){const _fefc ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _cgef ==nil {return nil ,nil ,_b .Error (_fefc ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_b .Error (_fefc ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _cgef .Zero (){_cbdf =&Boxes {};_agcg =&Bitmaps {};return _agcg ,_cbdf ,nil ;};switch components {case ComponentConn :_agcg =&Bitmaps {};if _cbdf ,_dedc =_cgef .ConnComponents (_agcg ,8);_dedc !=nil {return nil ,nil ,_b .Wrap (_dedc ,_fefc ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_fcge ,_gagd :=MorphSequence (_cgef ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _gagd !=nil {return nil ,nil ,_b .Wrap (_gagd ,_fefc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _ddb .Log .IsLogLevel (_ddb .LogLevelTrace ){_ddb .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_fcge .String ());
};_fbde :=&Bitmaps {};_cbdf ,_gagd =_fcge .ConnComponents (_fbde ,8);if _gagd !=nil {return nil ,nil ,_b .Wrap (_gagd ,_fefc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _ddb .Log .IsLogLevel (_ddb .LogLevelTrace ){_ddb .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_fbde .String ());
};if _agcg ,_gagd =_fbde .ClipToBitmap (_cgef );_gagd !=nil {return nil ,nil ,_b .Wrap (_gagd ,_fefc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_egd :=1;
var _cbdg *Bitmap ;switch {case _cgef .XResolution <=200:_cbdg =_cgef ;case _cgef .XResolution <=400:_egd =2;_cbdg ,_dedc =_cbc (_cgef ,1,0,0,0);if _dedc !=nil {return nil ,nil ,_b .Wrap (_dedc ,_fefc ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_egd =4;_cbdg ,_dedc =_cbc (_cgef ,1,1,0,0);if _dedc !=nil {return nil ,nil ,_b .Wrap (_dedc ,_fefc ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_ecbab ,_ ,_bfac :=_ccgd (_cbdg );if _bfac !=nil {return nil ,nil ,_b .Wrap (_bfac ,_fefc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_geeg ,_bfac :=_cacdd (_ecbab ,_egd );if _bfac !=nil {return nil ,nil ,_b .Wrap (_bfac ,_fefc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_gggeb :=&Bitmaps {};if _cbdf ,_bfac =_geeg .ConnComponents (_gggeb ,4);_bfac !=nil {return nil ,nil ,_b .Wrap (_bfac ,_fefc ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _agcg ,_bfac =_gggeb .ClipToBitmap (_cgef );_bfac !=nil {return nil ,nil ,_b .Wrap (_bfac ,_fefc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_agcg ,_dedc =_agcg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _dedc !=nil {return nil ,nil ,_b .Wrap (_dedc ,_fefc ,"");};_cbdf ,_dedc =_cbdf .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _dedc !=nil {return nil ,nil ,_b .Wrap (_dedc ,_fefc ,"");};return _agcg ,_cbdf ,nil ;};const (Vanilla Color =iota ;
Chocolate ;);type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func _agf (_caa *Bitmap ,_ddc int )(*Bitmap ,error ){const _ba ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _caa ==nil {return nil ,_b .Error (_ba ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ddc ==1{return _geg (nil ,_caa );};if _ddc !=2&&_ddc !=4&&_ddc !=8{return nil ,_b .Error (_ba ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_ff :=_ddc *_caa .Width ;_cdb :=_ddc *_caa .Height ;_cf :=New (_ff ,_cdb );var _bgf error ;switch _ddc {case 2:_bgf =_ca (_cf ,_caa );case 4:_bgf =_cc (_cf ,_caa );case 8:_bgf =_fa (_cf ,_caa );};if _bgf !=nil {return nil ,_b .Wrap (_bgf ,_ba ,"");};
return _cf ,nil ;};func (_feec *Points )AddPoint (x ,y float32 ){*_feec =append (*_feec ,Point {x ,y })};func _cae (_dbdb ,_faf *Bitmap ,_bbcb int ,_ccec []byte ,_gddf int )(_afb error ){const _dad ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_gbe ,_cbfg ,_gedf ,_fdb ,_aag ,_bee ,_fda ,_dca int ;_efd ,_cdc ,_ebc ,_cde uint32 ;_ae ,_gfc byte ;_dfa uint16 ;);_cdd :=make ([]byte ,4);_gbg :=make ([]byte ,4);for _gedf =0;_gedf < _dbdb .Height -1;_gedf ,_fdb =_gedf +2,_fdb +1{_gbe =_gedf *_dbdb .RowStride ;
_cbfg =_fdb *_faf .RowStride ;for _aag ,_bee =0,0;_aag < _gddf ;_aag ,_bee =_aag +4,_bee +1{for _fda =0;_fda < 4;_fda ++{_dca =_gbe +_aag +_fda ;if _dca <=len (_dbdb .Data )-1&&_dca < _gbe +_dbdb .RowStride {_cdd [_fda ]=_dbdb .Data [_dca ];}else {_cdd [_fda ]=0x00;
};_dca =_gbe +_dbdb .RowStride +_aag +_fda ;if _dca <=len (_dbdb .Data )-1&&_dca < _gbe +(2*_dbdb .RowStride ){_gbg [_fda ]=_dbdb .Data [_dca ];}else {_gbg [_fda ]=0x00;};};_efd =_bc .BigEndian .Uint32 (_cdd );_cdc =_bc .BigEndian .Uint32 (_gbg );_ebc =_efd &_cdc ;
_ebc |=_ebc <<1;_cde =_efd |_cdc ;_cde &=_cde <<1;_cdc =_ebc &_cde ;_cdc &=0xaaaaaaaa;_efd =_cdc |(_cdc <<7);_ae =byte (_efd >>24);_gfc =byte ((_efd >>8)&0xff);_dca =_cbfg +_bee ;if _dca +1==len (_faf .Data )-1||_dca +1>=_cbfg +_faf .RowStride {if _afb =_faf .SetByte (_dca ,_ccec [_ae ]);
_afb !=nil {return _b .Wrapf (_afb ,_dad ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dca );};}else {_dfa =(uint16 (_ccec [_ae ])<<8)|uint16 (_ccec [_gfc ]);if _afb =_faf .setTwoBytes (_dca ,_dfa );_afb !=nil {return _b .Wrapf (_afb ,_dad ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dca );
};_bee ++;};};};return nil ;};func Extract (roi _agb .Rectangle ,src *Bitmap )(*Bitmap ,error ){_dbba :=New (roi .Dx (),roi .Dy ());_effd :=roi .Min .X &0x07;_bdfa :=8-_effd ;_dabb :=uint (8-_dbba .Width &0x07);_fcdc :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );
_ffcc :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_fffc :=_dbba .RowStride ==_ffcc +1-_fcdc ;var _adec int ;for _aedf :=roi .Min .Y ;_aedf < roi .Max .Y ;_aedf ++{_dbfe :=_fcdc ;_cfga :=_adec ;switch {case _fcdc ==_ffcc :_deg ,_agca :=src .GetByte (_dbfe );
if _agca !=nil {return nil ,_agca ;};_deg <<=uint (_effd );_agca =_dbba .SetByte (_cfga ,_efbdd (_dabb ,_deg ));if _agca !=nil {return nil ,_agca ;};case _effd ==0:for _beac :=_fcdc ;_beac <=_ffcc ;_beac ++{_ggge ,_bcg :=src .GetByte (_dbfe );if _bcg !=nil {return nil ,_bcg ;
};_dbfe ++;if _beac ==_ffcc &&_fffc {_ggge =_efbdd (_dabb ,_ggge );};_bcg =_dbba .SetByte (_cfga ,_ggge );if _bcg !=nil {return nil ,_bcg ;};_cfga ++;};default:_fecbe :=_dbfg (src ,_dbba ,uint (_effd ),uint (_bdfa ),_dabb ,_fcdc ,_ffcc ,_fffc ,_dbfe ,_cfga );
if _fecbe !=nil {return nil ,_fecbe ;};};_fcdc +=src .RowStride ;_ffcc +=src .RowStride ;_adec +=_dbba .RowStride ;};return _dbba ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gddbb float64 ,_feab error ){const _geead ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_b .Error (_geead ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_b .Error (_geead ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_b .Error (_geead ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_gcde ,_dfbf :=bm1 .Width ,bm1 .Height ;_bfbe ,_bfgef :=bm2 .Width ,bm2 .Height ;
_dcbg :=_bgfgc (_gcde -_bfbe );if _dcbg > maxDiffW {return 0,nil ;};_febb :=_bgfgc (_dfbf -_bfgef );if _febb > maxDiffH {return 0,nil ;};var _bddf ,_fffe int ;if delX >=0{_bddf =int (delX +0.5);}else {_bddf =int (delX -0.5);};if delY >=0{_fffe =int (delY +0.5);
}else {_fffe =int (delY -0.5);};_febbd :=_bgfgb (_fffe ,0);_eecg :=_fbdd (_bfgef +_fffe ,_dfbf );_dgdf :=bm1 .RowStride *_febbd ;_ggba :=bm2 .RowStride *(_febbd -_fffe );_aeba :=_bgfgb (_bddf ,0);_cecf :=_fbdd (_bfbe +_bddf ,_gcde );_faba :=bm2 .RowStride ;
var _cbef ,_bfeg int ;if _bddf >=8{_cbef =_bddf >>3;_dgdf +=_cbef ;_aeba -=_cbef <<3;_cecf -=_cbef <<3;_bddf &=7;}else if _bddf <=-8{_bfeg =-((_bddf +7)>>3);_ggba +=_bfeg ;_faba -=_bfeg ;_bddf +=_bfeg <<3;};if _aeba >=_cecf ||_febbd >=_eecg {return 0,nil ;
};_gdfaf :=(_cecf +7)>>3;var (_cff ,_feeb ,_afdb byte ;_aca ,_bcee ,_bfcf int ;);switch {case _bddf ==0:for _bfcf =_febbd ;_bfcf < _eecg ;_bfcf ,_dgdf ,_ggba =_bfcf +1,_dgdf +bm1 .RowStride ,_ggba +bm2 .RowStride {for _bcee =0;_bcee < _gdfaf ;_bcee ++{_afdb =bm1 .Data [_dgdf +_bcee ]&bm2 .Data [_ggba +_bcee ];
_aca +=tab [_afdb ];};};case _bddf > 0:if _faba < _gdfaf {for _bfcf =_febbd ;_bfcf < _eecg ;_bfcf ,_dgdf ,_ggba =_bfcf +1,_dgdf +bm1 .RowStride ,_ggba +bm2 .RowStride {_cff ,_feeb =bm1 .Data [_dgdf ],bm2 .Data [_ggba ]>>uint (_bddf );_afdb =_cff &_feeb ;
_aca +=tab [_afdb ];for _bcee =1;_bcee < _faba ;_bcee ++{_cff ,_feeb =bm1 .Data [_dgdf +_bcee ],(bm2 .Data [_ggba +_bcee ]>>uint (_bddf ))|(bm2 .Data [_ggba +_bcee -1]<<uint (8-_bddf ));_afdb =_cff &_feeb ;_aca +=tab [_afdb ];};_cff =bm1 .Data [_dgdf +_bcee ];
_feeb =bm2 .Data [_ggba +_bcee -1]<<uint (8-_bddf );_afdb =_cff &_feeb ;_aca +=tab [_afdb ];};}else {for _bfcf =_febbd ;_bfcf < _eecg ;_bfcf ,_dgdf ,_ggba =_bfcf +1,_dgdf +bm1 .RowStride ,_ggba +bm2 .RowStride {_cff ,_feeb =bm1 .Data [_dgdf ],bm2 .Data [_ggba ]>>uint (_bddf );
_afdb =_cff &_feeb ;_aca +=tab [_afdb ];for _bcee =1;_bcee < _gdfaf ;_bcee ++{_cff =bm1 .Data [_dgdf +_bcee ];_feeb =(bm2 .Data [_ggba +_bcee ]>>uint (_bddf ))|(bm2 .Data [_ggba +_bcee -1]<<uint (8-_bddf ));_afdb =_cff &_feeb ;_aca +=tab [_afdb ];};};};
default:if _gdfaf < _faba {for _bfcf =_febbd ;_bfcf < _eecg ;_bfcf ,_dgdf ,_ggba =_bfcf +1,_dgdf +bm1 .RowStride ,_ggba +bm2 .RowStride {for _bcee =0;_bcee < _gdfaf ;_bcee ++{_cff =bm1 .Data [_dgdf +_bcee ];_feeb =bm2 .Data [_ggba +_bcee ]<<uint (-_bddf );
_feeb |=bm2 .Data [_ggba +_bcee +1]>>uint (8+_bddf );_afdb =_cff &_feeb ;_aca +=tab [_afdb ];};};}else {for _bfcf =_febbd ;_bfcf < _eecg ;_bfcf ,_dgdf ,_ggba =_bfcf +1,_dgdf +bm1 .RowStride ,_ggba +bm2 .RowStride {for _bcee =0;_bcee < _gdfaf -1;_bcee ++{_cff =bm1 .Data [_dgdf +_bcee ];
_feeb =bm2 .Data [_ggba +_bcee ]<<uint (-_bddf );_feeb |=bm2 .Data [_ggba +_bcee +1]>>uint (8+_bddf );_afdb =_cff &_feeb ;_aca +=tab [_afdb ];};_cff =bm1 .Data [_dgdf +_bcee ];_feeb =bm2 .Data [_ggba +_bcee ]<<uint (-_bddf );_afdb =_cff &_feeb ;_aca +=tab [_afdb ];
};};};_gddbb =float64 (_aca )*float64 (_aca )/(float64 (area1 )*float64 (area2 ));return _gddbb ,nil ;};func _gbff (_gabaa *_gc .Stack ,_efacb ,_bdcfe ,_acgag ,_dadb ,_cbeg int ,_edfea *_agb .Rectangle )(_fdebc error ){const _bcga ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _gabaa ==nil {return _b .Error (_bcga ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _edfea ==nil {return _b .Error (_bcga ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_edfea .Min .X =_gc .Min (_edfea .Min .X ,_efacb );_edfea .Max .X =_gc .Max (_edfea .Max .X ,_bdcfe );_edfea .Min .Y =_gc .Min (_edfea .Min .Y ,_acgag );_edfea .Max .Y =_gc .Max (_edfea .Max .Y ,_acgag );if !(_acgag +_dadb >=0&&_acgag +_dadb <=_cbeg ){return nil ;
};if _gabaa .Aux ==nil {return _b .Error (_bcga ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _cega *fillSegment ;_adecd ,_bdfd :=_gabaa .Aux .Pop ();if _bdfd {if _cega ,_bdfd =_adecd .(*fillSegment );
!_bdfd {return _b .Error (_bcga ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_cega =&fillSegment {};
};_cega ._gfgb =_efacb ;_cega ._fcca =_bdcfe ;_cega ._eaba =_acgag ;_cega ._aeec =_dadb ;_gabaa .Push (_cega );return nil ;};type SizeComparison int ;var _ _g .Interface =&ClassedPoints {};type byHeight Bitmaps ;func (_fefg *byWidth )Swap (i ,j int ){_fefg .Values [i ],_fefg .Values [j ]=_fefg .Values [j ],_fefg .Values [i ];
if _fefg .Boxes !=nil {_fefg .Boxes [i ],_fefg .Boxes [j ]=_fefg .Boxes [j ],_fefg .Boxes [i ];};};func _gaf (_ada *Bitmap ,_bbb int ,_ccg []byte )(_dgbe *Bitmap ,_gbc error ){const _eeg ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _ada ==nil {return nil ,_b .Error (_eeg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bbb < 1||_bbb > 4{return nil ,_b .Error (_eeg ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _ada .Height <=1{return nil ,_b .Errorf (_eeg ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_ada .Height );
};_dgbe =New (_ada .Width /2,_ada .Height /2);if _ccg ==nil {_ccg =_eaa ();};_gab :=_fbdd (_ada .RowStride ,2*_dgbe .RowStride );switch _bbb {case 1:_gbc =_dfb (_ada ,_dgbe ,_bbb ,_ccg ,_gab );case 2:_gbc =_ccf (_ada ,_dgbe ,_bbb ,_ccg ,_gab );case 3:_gbc =_cae (_ada ,_dgbe ,_bbb ,_ccg ,_gab );
case 4:_gbc =_ffa (_ada ,_dgbe ,_bbb ,_ccg ,_gab );};if _gbc !=nil {return nil ,_gbc ;};return _dgbe ,nil ;};func _gda (_gbec ,_bfgb byte ,_cead CombinationOperator )byte {switch _cead {case CmbOpOr :return _bfgb |_gbec ;case CmbOpAnd :return _bfgb &_gbec ;
case CmbOpXor :return _bfgb ^_gbec ;case CmbOpXNor :return ^(_bfgb ^_gbec );case CmbOpNot :return ^(_bfgb );default:return _bfgb ;};};func Centroids (bms []*Bitmap )(*Points ,error ){_bbdd :=make ([]Point ,len (bms ));_fddf :=_bbbad ();_eafe :=_abcf ();
var _bacg error ;for _dage ,_cgg :=range bms {_bbdd [_dage ],_bacg =_cgg .centroid (_fddf ,_eafe );if _bacg !=nil {return nil ,_bacg ;};};_bgfad :=Points (_bbdd );return &_bgfad ,nil ;};func (_cccda *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _agcff ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_cccda .Values )==0{return nil ,_b .Error (_agcff ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_fgag :=&BitmapsArray {};_cccda .SortByHeight ();_dbaaa :=-1;_fgae :=-1;for _cdbag :=0;_cdbag < len (_cccda .Values );
_cdbag ++{_cdeba :=_cccda .Values [_cdbag ].Height ;if _cdeba > _dbaaa {_dbaaa =_cdeba ;_fgae ++;_fgag .Values =append (_fgag .Values ,&Bitmaps {});};_fgag .Values [_fgae ].AddBitmap (_cccda .Values [_cdbag ]);};return _fgag ,nil ;};func _gdeaf (_fgbc *Bitmap ,_egdg *Bitmap ,_cdac *Selection ,_ddgg **Bitmap )(*Bitmap ,error ){const _fcba ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _egdg ==nil {return nil ,_b .Error (_fcba ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _cdac ==nil {return nil ,_b .Error (_fcba ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_cded ,_dbfd :=_cdac .Height ,_cdac .Width ;if _cded ==0||_dbfd ==0{return nil ,_b .Error (_fcba ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _fgbc ==nil {_fgbc =_egdg .createTemplate ();
*_ddgg =_egdg ;return _fgbc ,nil ;};_fgbc .Width =_egdg .Width ;_fgbc .Height =_egdg .Height ;_fgbc .RowStride =_egdg .RowStride ;_fgbc .Color =_egdg .Color ;_fgbc .Data =make ([]byte ,_egdg .RowStride *_egdg .Height );if _fgbc ==_egdg {*_ddgg =_egdg .Copy ();
}else {*_ddgg =_egdg ;};return _fgbc ,nil ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _gda (oldByte ,newByte ,op );};func (_cag *Bitmap )InverseData (){_cag .inverseData ()};type ClassedPoints struct{*Points ;_gc .IntSlice ;
_gefb func (_adbgfe ,_dagef int )bool ;};func (_efdc *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_bfcd *Bitmaps ,_cdebd error ){const _ddccb ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _efdc ==nil {return nil ,_b .Error (_ddccb ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_ddccb ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_b .Errorf (_ddccb ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_ffbe ,_cdebd :=_efdc .makeSizeIndicator (width ,height ,tp ,relation );if _cdebd !=nil {return nil ,_b .Wrap (_cdebd ,_ddccb ,"");};_bfcd ,_cdebd =_efdc .selectByIndicator (_ffbe );if _cdebd !=nil {return nil ,_b .Wrap (_cdebd ,_ddccb ,"");};return _bfcd ,nil ;
};func _cga (_gee ,_gaa int )*Bitmap {return &Bitmap {Width :_gee ,Height :_gaa ,RowStride :(_gee +7)>>3};};var _debg =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_cgd *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _cgd .addBorderGeneral (left ,right ,top ,bot ,val );};func _caba (_ddabg *Bitmap ,_cbac *_gc .Stack ,_bfff ,_edcce ,_ccege int )(_dcfga *_agb .Rectangle ,_cgcf error ){const _dbgbg ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ddabg ==nil {return nil ,_b .Error (_dbgbg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _cbac ==nil {return nil ,_b .Error (_dbgbg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _ccege {case 4:if _dcfga ,_cgcf =_cafd (_ddabg ,_cbac ,_bfff ,_edcce );_cgcf !=nil {return nil ,_b .Wrap (_cgcf ,_dbgbg ,"");};return _dcfga ,nil ;case 8:if _dcfga ,_cgcf =_caea (_ddabg ,_cbac ,_bfff ,_edcce );_cgcf !=nil {return nil ,_b .Wrap (_cgcf ,_dbgbg ,"");
};return _dcfga ,nil ;default:return nil ,_b .Errorf (_dbgbg ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_ccege );
};};func TstPSymbol (t *_d .T )*Bitmap {t .Helper ();_fbba :=New (5,8);_a .NoError (t ,_fbba .SetPixel (0,0,1));_a .NoError (t ,_fbba .SetPixel (1,0,1));_a .NoError (t ,_fbba .SetPixel (2,0,1));_a .NoError (t ,_fbba .SetPixel (3,0,1));_a .NoError (t ,_fbba .SetPixel (4,1,1));
_a .NoError (t ,_fbba .SetPixel (0,1,1));_a .NoError (t ,_fbba .SetPixel (4,2,1));_a .NoError (t ,_fbba .SetPixel (0,2,1));_a .NoError (t ,_fbba .SetPixel (4,3,1));_a .NoError (t ,_fbba .SetPixel (0,3,1));_a .NoError (t ,_fbba .SetPixel (0,4,1));_a .NoError (t ,_fbba .SetPixel (1,4,1));
_a .NoError (t ,_fbba .SetPixel (2,4,1));_a .NoError (t ,_fbba .SetPixel (3,4,1));_a .NoError (t ,_fbba .SetPixel (0,5,1));_a .NoError (t ,_fbba .SetPixel (0,6,1));_a .NoError (t ,_fbba .SetPixel (0,7,1));return _fbba ;};func (_geaff *byHeight )Less (i ,j int )bool {return _geaff .Values [i ].Height < _geaff .Values [j ].Height };
func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_ead float64 ,_bcbf error ){const _egeb ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _ead ,_b .Error (_egeb ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _ead ,_b .Error (_egeb ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _ead ,_b .Error (_egeb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_bfce ,_aecf :=bm1 .Width ,bm1 .Height ;_bcbg ,_aaff :=bm2 .Width ,bm2 .Height ;
if _bgfgc (_bfce -_bcbg )> maxDiffW {return 0,nil ;};if _bgfgc (_aecf -_aaff )> maxDiffH {return 0,nil ;};var _abab ,_cdba int ;if delX >=0{_abab =int (delX +0.5);}else {_abab =int (delX -0.5);};if delY >=0{_cdba =int (delY +0.5);}else {_cdba =int (delY -0.5);
};_aebd :=bm1 .createTemplate ();if _bcbf =_aebd .RasterOperation (_abab ,_cdba ,_bcbg ,_aaff ,PixSrc ,bm2 ,0,0);_bcbf !=nil {return _ead ,_b .Wrap (_bcbf ,_egeb ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _bcbf =_aebd .RasterOperation (0,0,_bfce ,_aecf ,PixSrcAndDst ,bm1 ,0,0);
_bcbf !=nil {return _ead ,_b .Wrap (_bcbf ,_egeb ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_ggfe :=_aebd .countPixels ();_ead =float64 (_ggfe )*float64 (_ggfe )/(float64 (area1 )*float64 (area2 ));return _ead ,nil ;};func (_fag *Bitmap )GetBitOffset (x int )int {return x &0x07};
func (_dbff *Bitmaps )SortByWidth (){_gdcgf :=(*byWidth )(_dbff );_g .Sort (_gdcgf )};func (_cbd *Bitmap )resizeImageData (_ggeg *Bitmap )error {if _ggeg ==nil {return _b .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cbd .SizesEqual (_ggeg ){return nil ;};_cbd .Data =make ([]byte ,len (_ggeg .Data ));_cbd .Width =_ggeg .Width ;_cbd .Height =_ggeg .Height ;_cbd .RowStride =_ggeg .RowStride ;return nil ;};func (_bgagc *Bitmap )addBorderGeneral (_ecc ,_dbga ,_gfg ,_gfa int ,_cddf int )(*Bitmap ,error ){const _dgag ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _ecc < 0||_dbga < 0||_gfg < 0||_gfa < 0{return nil ,_b .Error (_dgag ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_fee ,_deed :=_bgagc .Width ,_bgagc .Height ;_dbgb :=_fee +_ecc +_dbga ;
_ebd :=_deed +_gfg +_gfa ;_dgd :=New (_dbgb ,_ebd );_dgd .Color =_bgagc .Color ;_dbgd :=PixClr ;if _cddf > 0{_dbgd =PixSet ;};_fbf :=_dgd .RasterOperation (0,0,_ecc ,_ebd ,_dbgd ,nil ,0,0);if _fbf !=nil {return nil ,_b .Wrap (_fbf ,_dgag ,"\u006c\u0065\u0066\u0074");
};_fbf =_dgd .RasterOperation (_dbgb -_dbga ,0,_dbga ,_ebd ,_dbgd ,nil ,0,0);if _fbf !=nil {return nil ,_b .Wrap (_fbf ,_dgag ,"\u0072\u0069\u0067h\u0074");};_fbf =_dgd .RasterOperation (0,0,_dbgb ,_gfg ,_dbgd ,nil ,0,0);if _fbf !=nil {return nil ,_b .Wrap (_fbf ,_dgag ,"\u0074\u006f\u0070");
};_fbf =_dgd .RasterOperation (0,_ebd -_gfa ,_dbgb ,_gfa ,_dbgd ,nil ,0,0);if _fbf !=nil {return nil ,_b .Wrap (_fbf ,_dgag ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_fbf =_dgd .RasterOperation (_ecc ,_gfg ,_fee ,_deed ,PixSrc ,_bgagc ,0,0);if _fbf !=nil {return nil ,_b .Wrap (_fbf ,_dgag ,"\u0063\u006f\u0070\u0079");
};return _dgd ,nil ;};func (_egb *Bitmap )CreateTemplate ()*Bitmap {return _egb .createTemplate ()};func (_gegff *Bitmap )connComponentsBB (_bgaf int )(_feee *Boxes ,_edfc error ){const _eage ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _bgaf !=4&&_bgaf !=8{return nil ,_b .Error (_eage ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _gegff .Zero (){return &Boxes {},nil ;
};_gegff .setPadBits (0);_aegf ,_edfc :=_geg (nil ,_gegff );if _edfc !=nil {return nil ,_b .Wrap (_edfc ,_eage ,"\u0062\u006d\u0031");};_bbce :=&_gc .Stack {};_bbce .Aux =&_gc .Stack {};_feee =&Boxes {};var (_adcc ,_eagf int ;_bfab _agb .Point ;_aacg bool ;
_dgg *_agb .Rectangle ;);for {if _bfab ,_aacg ,_edfc =_aegf .nextOnPixel (_eagf ,_adcc );_edfc !=nil {return nil ,_b .Wrap (_edfc ,_eage ,"");};if !_aacg {break ;};if _dgg ,_edfc =_caba (_aegf ,_bbce ,_bfab .X ,_bfab .Y ,_bgaf );_edfc !=nil {return nil ,_b .Wrap (_edfc ,_eage ,"");
};if _edfc =_feee .Add (_dgg );_edfc !=nil {return nil ,_b .Wrap (_edfc ,_eage ,"");};_eagf =_bfab .X ;_adcc =_bfab .Y ;};return _feee ,nil ;};func (_fgcga *Bitmap )connComponentsBitmapsBB (_ffdf *Bitmaps ,_eedb int )(_gfac *Boxes ,_bbbf error ){const _ddec ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _eedb !=4&&_eedb !=8{return nil ,_b .Error (_ddec ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _ffdf ==nil {return nil ,_b .Error (_ddec ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_ffdf .Values )> 0{return nil ,_b .Error (_ddec ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _fgcga .Zero (){return &Boxes {},nil ;
};var (_eegd ,_fdfg ,_cdeef ,_eegb *Bitmap ;);_fgcga .setPadBits (0);if _eegd ,_bbbf =_geg (nil ,_fgcga );_bbbf !=nil {return nil ,_b .Wrap (_bbbf ,_ddec ,"\u0062\u006d\u0031");};if _fdfg ,_bbbf =_geg (nil ,_fgcga );_bbbf !=nil {return nil ,_b .Wrap (_bbbf ,_ddec ,"\u0062\u006d\u0032");
};_cgde :=&_gc .Stack {};_cgde .Aux =&_gc .Stack {};_gfac =&Boxes {};var (_edfd ,_fgfb int ;_faee _agb .Point ;_abd bool ;_ecad *_agb .Rectangle ;);for {if _faee ,_abd ,_bbbf =_eegd .nextOnPixel (_edfd ,_fgfb );_bbbf !=nil {return nil ,_b .Wrap (_bbbf ,_ddec ,"");
};if !_abd {break ;};if _ecad ,_bbbf =_caba (_eegd ,_cgde ,_faee .X ,_faee .Y ,_eedb );_bbbf !=nil {return nil ,_b .Wrap (_bbbf ,_ddec ,"");};if _bbbf =_gfac .Add (_ecad );_bbbf !=nil {return nil ,_b .Wrap (_bbbf ,_ddec ,"");};if _cdeef ,_bbbf =_eegd .clipRectangle (_ecad ,nil );
_bbbf !=nil {return nil ,_b .Wrap (_bbbf ,_ddec ,"\u0062\u006d\u0033");};if _eegb ,_bbbf =_fdfg .clipRectangle (_ecad ,nil );_bbbf !=nil {return nil ,_b .Wrap (_bbbf ,_ddec ,"\u0062\u006d\u0034");};if _ ,_bbbf =_gbef (_cdeef ,_cdeef ,_eegb );_bbbf !=nil {return nil ,_b .Wrap (_bbbf ,_ddec ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _bbbf =_fdfg .RasterOperation (_ecad .Min .X ,_ecad .Min .Y ,_ecad .Dx (),_ecad .Dy (),PixSrcXorDst ,_cdeef ,0,0);_bbbf !=nil {return nil ,_b .Wrap (_bbbf ,_ddec ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};
_ffdf .AddBitmap (_cdeef );_edfd =_faee .X ;_fgfb =_faee .Y ;};_ffdf .Boxes =*_gfac ;return _gfac ,nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func (_fged *Bitmap )ClipRectangle (box *_agb .Rectangle )(_fgcda *Bitmap ,_caed *_agb .Rectangle ,_gaag error ){const _cba ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_b .Error (_cba ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_bec ,_edd :=_fged .Width ,_fged .Height ;_cdee :=_agb .Rect (0,0,_bec ,_edd );if !box .Overlaps (_cdee ){return nil ,nil ,_b .Error (_cba ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_aec :=box .Intersect (_cdee );_cbba ,_cbbb :=_aec .Min .X ,_aec .Min .Y ;_bgff ,_gcc :=_aec .Dx (),_aec .Dy ();_fgcda =New (_bgff ,_gcc );_fgcda .Text =_fged .Text ;if _gaag =_fgcda .RasterOperation (0,0,_bgff ,_gcc ,PixSrc ,_fged ,_cbba ,_cbbb );_gaag !=nil {return nil ,nil ,_b .Wrap (_gaag ,_cba ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_caed =&_aec ;return _fgcda ,_caed ,nil ;};func _eed (_beg *Bitmap ,_ge *Bitmap ,_bb int )(_ea error ){const _ef ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _bb {case 2:_ea =_ca (_beg ,_ge );
case 4:_ea =_cc (_beg ,_ge );case 8:_ea =_fa (_beg ,_ge );default:return _b .Error (_ef ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _ea !=nil {_ea =_b .Wrap (_ea ,_ef ,"");};return _ea ;};func TstCSymbol (t *_d .T )*Bitmap {t .Helper ();_fcege :=New (6,6);_a .NoError (t ,_fcege .SetPixel (1,0,1));_a .NoError (t ,_fcege .SetPixel (2,0,1));_a .NoError (t ,_fcege .SetPixel (3,0,1));
_a .NoError (t ,_fcege .SetPixel (4,0,1));_a .NoError (t ,_fcege .SetPixel (0,1,1));_a .NoError (t ,_fcege .SetPixel (5,1,1));_a .NoError (t ,_fcege .SetPixel (0,2,1));_a .NoError (t ,_fcege .SetPixel (0,3,1));_a .NoError (t ,_fcege .SetPixel (0,4,1));
_a .NoError (t ,_fcege .SetPixel (5,4,1));_a .NoError (t ,_fcege .SetPixel (1,5,1));_a .NoError (t ,_fcege .SetPixel (2,5,1));_a .NoError (t ,_fcege .SetPixel (3,5,1));_a .NoError (t ,_fcege .SetPixel (4,5,1));return _fcege ;};func (_eecc *Bitmap )addPadBits ()(_fbd error ){const _ggbe ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_gabc :=_eecc .Width %8;if _gabc ==0{return nil ;};_bfa :=_eecc .Width /8;_fae :=_ag .NewReader (_eecc .Data );_agfa :=make ([]byte ,_eecc .Height *_eecc .RowStride );_bafa :=_ag .NewWriterMSB (_agfa );_aga :=make ([]byte ,_bfa );var (_ffd int ;_fbbb uint64 ;
);for _ffd =0;_ffd < _eecc .Height ;_ffd ++{if _ ,_fbd =_fae .Read (_aga );_fbd !=nil {return _b .Wrap (_fbd ,_ggbe ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_fbd =_bafa .Write (_aga );_fbd !=nil {return _b .Wrap (_fbd ,_ggbe ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _fbbb ,_fbd =_fae .ReadBits (byte (_gabc ));_fbd !=nil {return _b .Wrap (_fbd ,_ggbe ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _fbd =_bafa .WriteByte (byte (_fbbb )<<uint (8-_gabc ));_fbd !=nil {return _b .Wrap (_fbd ,_ggbe ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_eecc .Data =_bafa .Data ();return nil ;};func TstNSymbol (t *_d .T ,scale ...int )*Bitmap {_fabe ,_degb :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_a .NoError (t ,_degb );return TstGetScaledSymbol (t ,_fabe ,scale ...);};func TstGetScaledSymbol (t *_d .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;
};if scale [0]==1{return sm ;};_cggg ,_aggcf :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_a .NoError (t ,_aggcf );return _cggg ;};func _dbfg (_gdc ,_dfge *Bitmap ,_fgd ,_gdfad ,_dacb uint ,_ffb ,_cfgaf int ,_daaa bool ,_fgde ,_efdd int )error {for _eea :=_ffb ;
_eea < _cfgaf ;_eea ++{if _fgde +1< len (_gdc .Data ){_cagd :=_eea +1==_cfgaf ;_cece ,_dae :=_gdc .GetByte (_fgde );if _dae !=nil {return _dae ;};_fgde ++;_cece <<=_fgd ;_efaa ,_dae :=_gdc .GetByte (_fgde );if _dae !=nil {return _dae ;};_efaa >>=_gdfad ;
_aefa :=_cece |_efaa ;if _cagd &&!_daaa {_aefa =_efbdd (_dacb ,_aefa );};_dae =_dfge .SetByte (_efdd ,_aefa );if _dae !=nil {return _dae ;};_efdd ++;if _cagd &&_daaa {_ggf ,_cadf :=_gdc .GetByte (_fgde );if _cadf !=nil {return _cadf ;};_ggf <<=_fgd ;_aefa =_efbdd (_dacb ,_ggf );
if _cadf =_dfge .SetByte (_efdd ,_aefa );_cadf !=nil {return _cadf ;};};continue ;};_fbfe ,_dcc :=_gdc .GetByte (_fgde );if _dcc !=nil {_ddb .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_fgde ,_dcc );
return _dcc ;};_fbfe <<=_fgd ;_fgde ++;_dcc =_dfge .SetByte (_efdd ,_fbfe );if _dcc !=nil {return _dcc ;};_efdd ++;};return nil ;};func (_gbd *Bitmaps )CountPixels ()*_gc .NumSlice {_ceede :=&_gc .NumSlice {};for _ ,_aaaa :=range _gbd .Values {_ceede .AddInt (_aaaa .CountPixels ());
};return _ceede ;};func (_addaf *Bitmaps )SortByHeight (){_eegfg :=(*byHeight )(_addaf );_g .Sort (_eegfg )};func (_aega MorphProcess )getWidthHeight ()(_ddaf ,_afegf int ){return _aega .Arguments [0],_aega .Arguments [1];};func _gb ()(_ged [256]uint32 ){for _fec :=0;
_fec < 256;_fec ++{if _fec &0x01!=0{_ged [_fec ]|=0xf;};if _fec &0x02!=0{_ged [_fec ]|=0xf0;};if _fec &0x04!=0{_ged [_fec ]|=0xf00;};if _fec &0x08!=0{_ged [_fec ]|=0xf000;};if _fec &0x10!=0{_ged [_fec ]|=0xf0000;};if _fec &0x20!=0{_ged [_fec ]|=0xf00000;
};if _fec &0x40!=0{_ged [_fec ]|=0xf000000;};if _fec &0x80!=0{_ged [_fec ]|=0xf0000000;};};return _ged ;};func (_cdfd *Bitmaps )String ()string {_face :=_c .Builder {};for _ ,_cbfb :=range _cdfd .Values {_face .WriteString (_cbfb .String ());_face .WriteRune ('\n');
};return _face .String ();};func _bffd (_dgac ,_gcbb *Bitmap ,_bdbe ,_agcge int )(_bbge error ){const _dcea ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_cggf ,_ggdg ,_bgbf ,_caagd int ;_gcgdg ,_ddbg ,_ebdd ,_dgbdd ,_gccab ,_ebgga ,_aegae byte ;
);for _cggf =0;_cggf < _bdbe ;_cggf ++{_bgbf =_cggf *_dgac .RowStride ;_caagd =_cggf *_gcbb .RowStride ;for _ggdg =0;_ggdg < _agcge ;_ggdg ++{_gcgdg ,_bbge =_dgac .GetByte (_bgbf +_ggdg );if _bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_ddbg ,_bbge =_gcbb .GetByte (_caagd +_ggdg );if _bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _cggf > 0{_ebdd ,_bbge =_dgac .GetByte (_bgbf -_dgac .RowStride +_ggdg );if _bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"\u0069\u0020\u003e \u0030");
};_gcgdg |=_ebdd ;};if _ggdg > 0{_dgbdd ,_bbge =_dgac .GetByte (_bgbf +_ggdg -1);if _bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"\u006a\u0020\u003e \u0030");};_gcgdg |=_dgbdd <<7;};_gcgdg &=_ddbg ;if _gcgdg ==0||(^_gcgdg )==0{if _bbge =_dgac .SetByte (_bgbf +_ggdg ,_gcgdg );
_bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_aegae =_gcgdg ;_gcgdg =(_gcgdg |(_gcgdg >>1)|(_gcgdg <<1))&_ddbg ;if (_gcgdg ^_aegae )==0{if _bbge =_dgac .SetByte (_bgbf +_ggdg ,_gcgdg );
_bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _cggf =_bdbe -1;_cggf >=0;_cggf --{_bgbf =_cggf *_dgac .RowStride ;_caagd =_cggf *_gcbb .RowStride ;
for _ggdg =_agcge -1;_ggdg >=0;_ggdg --{if _gcgdg ,_bbge =_dgac .GetByte (_bgbf +_ggdg );_bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _ddbg ,_bbge =_gcbb .GetByte (_caagd +_ggdg );
_bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _cggf < _bdbe -1{if _gccab ,_bbge =_dgac .GetByte (_bgbf +_dgac .RowStride +_ggdg );_bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_gcgdg |=_gccab ;};if _ggdg < _agcge -1{if _ebgga ,_bbge =_dgac .GetByte (_bgbf +_ggdg +1);_bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_gcgdg |=_ebgga >>7;
};_gcgdg &=_ddbg ;if _gcgdg ==0||(^_gcgdg )==0{if _bbge =_dgac .SetByte (_bgbf +_ggdg ,_gcgdg );_bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_aegae =_gcgdg ;_gcgdg =(_gcgdg |(_gcgdg >>1)|(_gcgdg <<1))&_ddbg ;if (_gcgdg ^_aegae )==0{if _bbge =_dgac .SetByte (_bgbf +_ggdg ,_gcgdg );_bbge !=nil {return _b .Wrap (_bbge ,_dcea ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func _cc (_ecf ,_bd *Bitmap )(_de error ){const _cce ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_bdf :=_bd .RowStride ;_cacg :=_ecf .RowStride ;_aa :=_bd .RowStride *4-_ecf .RowStride ;
var (_fgee ,_fe byte ;_db uint32 ;_cg ,_gf ,_da ,_dda ,_fgb ,_be ,_dg int ;);for _da =0;_da < _bd .Height ;_da ++{_cg =_da *_bdf ;_gf =4*_da *_cacg ;for _dda =0;_dda < _bdf ;_dda ++{_fgee =_bd .Data [_cg +_dda ];_db =_bbgf [_fgee ];_be =_gf +_dda *4;if _aa !=0&&(_dda +1)*4> _ecf .RowStride {for _fgb =_aa ;
_fgb > 0;_fgb --{_fe =byte ((_db >>uint (_fgb *8))&0xff);_dg =_be +(_aa -_fgb );if _de =_ecf .SetByte (_dg ,_fe );_de !=nil {return _b .Wrapf (_de ,_cce ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_fgb );
};};}else if _de =_ecf .setFourBytes (_be ,_db );_de !=nil {return _b .Wrap (_de ,_cce ,"");};if _de =_ecf .setFourBytes (_gf +_dda *4,_bbgf [_bd .Data [_cg +_dda ]]);_de !=nil {return _b .Wrap (_de ,_cce ,"");};};for _fgb =1;_fgb < 4;_fgb ++{for _dda =0;
_dda < _cacg ;_dda ++{if _de =_ecf .SetByte (_gf +_fgb *_cacg +_dda ,_ecf .Data [_gf +_dda ]);_de !=nil {return _b .Wrapf (_de ,_cce ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_fgb ,_dda );
};};};};return nil ;};func (_gfabf *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _adga ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _ddggf :=_gfabf .validateIntSlice ();
_ddggf !=nil {return nil ,_b .Wrap (_ddggf ,_adga ,"");};if _gfabf .IntSlice .Size ()==0{return nil ,_b .Error (_adga ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_gfabf .SortByY ();var (_ecbbd []*ClassedPoints ;
_adda int ;);_gcfa :=-1;var _ddad *ClassedPoints ;for _gcef :=0;_gcef < len (_gfabf .IntSlice );_gcef ++{_adda =int (_gfabf .YAtIndex (_gcef ));if _adda !=_gcfa {_ddad =&ClassedPoints {Points :_gfabf .Points };_gcfa =_adda ;_ecbbd =append (_ecbbd ,_ddad );
};_ddad .IntSlice =append (_ddad .IntSlice ,_gfabf .IntSlice [_gcef ]);};for _ ,_bdgc :=range _ecbbd {_bdgc .SortByX ();};return _ecbbd ,nil ;};func TstWSymbol (t *_d .T ,scale ...int )*Bitmap {_ffbg ,_cdaea :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_a .NoError (t ,_cdaea );return TstGetScaledSymbol (t ,_ffbg ,scale ...);};func (_dbgg *Bitmap )Equivalent (s *Bitmap )bool {return _dbgg .equivalent (s )};func _fbdd (_gbbb ,_affeb int )int {if _gbbb < _affeb {return _gbbb ;};return _affeb ;};func (_dggd *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _ebe ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_dggd .IntSlice .Size (){return 0,_b .Errorf (_ebe ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_dggd .YAtIndex (i )),nil ;};func (_cbbg *ClassedPoints )validateIntSlice ()error {const _bfba ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_bcc :=range _cbbg .IntSlice {if _bcc >=(_cbbg .Points .Size ()){return _b .Errorf (_bfba ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_bcc ,_cbbg .Points .Size ());
};};return nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _acd ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_aggf ,_abeb :=p1 .Width ,p1 .Height ;_afeg ,_fgca :=p3 .Width ,p3 .Height ;
if _gc .Abs (_aggf -_afeg )> maxDiffW {return false ,nil ;};if _gc .Abs (_abeb -_fgca )> maxDiffH {return false ,nil ;};_ffaa :=int (delX +_gc .Sign (delX )*0.5);_ebbg :=int (delY +_gc .Sign (delY )*0.5);var _bdbg error ;_bgbd :=p1 .CreateTemplate ();if _bdbg =_bgbd .RasterOperation (0,0,_aggf ,_abeb ,PixSrc ,p1 ,0,0);
_bdbg !=nil {return false ,_b .Wrap (_bdbg ,_acd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bdbg =_bgbd .RasterOperation (_ffaa ,_ebbg ,_aggf ,_abeb ,PixNotSrcAndDst ,p4 ,0,0);_bdbg !=nil {return false ,_b .Wrap (_bdbg ,_acd ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _bgbd .Zero (){return false ,nil ;};if _bdbg =_bgbd .RasterOperation (_ffaa ,_ebbg ,_afeg ,_fgca ,PixSrc ,p3 ,0,0);_bdbg !=nil {return false ,_b .Wrap (_bdbg ,_acd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bdbg =_bgbd .RasterOperation (0,0,_afeg ,_fgca ,PixNotSrcAndDst ,p2 ,0,0);
_bdbg !=nil {return false ,_b .Wrap (_bdbg ,_acd ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _bgbd .Zero (),nil ;};func _ffa (_abfd ,_aee *Bitmap ,_aed int ,_bcac []byte ,_afbd int )(_ddcc error ){const _bgfa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_eaf ,_bgee ,_ccfb ,_cdcc ,_dba ,_fce ,_fbb ,_fcbg int ;_dadg ,_gabf uint32 ;_dbg ,_aeg byte ;_fad uint16 ;);_gea :=make ([]byte ,4);_ecba :=make ([]byte ,4);for _ccfb =0;_ccfb < _abfd .Height -1;_ccfb ,_cdcc =_ccfb +2,_cdcc +1{_eaf =_ccfb *_abfd .RowStride ;
_bgee =_cdcc *_aee .RowStride ;for _dba ,_fce =0,0;_dba < _afbd ;_dba ,_fce =_dba +4,_fce +1{for _fbb =0;_fbb < 4;_fbb ++{_fcbg =_eaf +_dba +_fbb ;if _fcbg <=len (_abfd .Data )-1&&_fcbg < _eaf +_abfd .RowStride {_gea [_fbb ]=_abfd .Data [_fcbg ];}else {_gea [_fbb ]=0x00;
};_fcbg =_eaf +_abfd .RowStride +_dba +_fbb ;if _fcbg <=len (_abfd .Data )-1&&_fcbg < _eaf +(2*_abfd .RowStride ){_ecba [_fbb ]=_abfd .Data [_fcbg ];}else {_ecba [_fbb ]=0x00;};};_dadg =_bc .BigEndian .Uint32 (_gea );_gabf =_bc .BigEndian .Uint32 (_ecba );
_gabf &=_dadg ;_gabf &=_gabf <<1;_gabf &=0xaaaaaaaa;_dadg =_gabf |(_gabf <<7);_dbg =byte (_dadg >>24);_aeg =byte ((_dadg >>8)&0xff);_fcbg =_bgee +_fce ;if _fcbg +1==len (_aee .Data )-1||_fcbg +1>=_bgee +_aee .RowStride {_aee .Data [_fcbg ]=_bcac [_dbg ];
if _ddcc =_aee .SetByte (_fcbg ,_bcac [_dbg ]);_ddcc !=nil {return _b .Wrapf (_ddcc ,_bgfa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fcbg );};}else {_fad =(uint16 (_bcac [_dbg ])<<8)|uint16 (_bcac [_aeg ]);if _ddcc =_aee .setTwoBytes (_fcbg ,_fad );
_ddcc !=nil {return _b .Wrapf (_ddcc ,_bgfa ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fcbg );};_fce ++;};
};};return nil ;};func TstESymbol (t *_d .T ,scale ...int )*Bitmap {_eagg ,_gcbee :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_a .NoError (t ,_gcbee );return TstGetScaledSymbol (t ,_eagg ,scale ...);};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _gbb ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_aad :=_cga (width ,height );_aad .Data =data ;if len (data )< height *_aad .RowStride {return nil ,_b .Errorf (_gbb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_aad .RowStride );
};return _aad ,nil ;};func (_badd *Bitmap )And (s *Bitmap )(_gfca *Bitmap ,_eee error ){const _adb ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _badd ==nil {return nil ,_b .Error (_adb ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_b .Error (_adb ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_badd .SizesEqual (s ){_ddb .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_adb );
};if _gfca ,_eee =_geg (_gfca ,_badd );_eee !=nil {return nil ,_b .Wrap (_eee ,_adb ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _eee =_gfca .RasterOperation (0,0,_gfca .Width ,_gfca .Height ,PixSrcAndDst ,s ,0,0);
_eee !=nil {return nil ,_b .Wrap (_eee ,_adb ,"");};return _gfca ,nil ;};func (_fecg *ClassedPoints )XAtIndex (i int )float32 {return (*_fecg .Points )[_fecg .IntSlice [i ]].X };func TstVSymbol (t *_d .T ,scale ...int )*Bitmap {_dede ,_gcgac :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});
_a .NoError (t ,_gcgac );return TstGetScaledSymbol (t ,_dede ,scale ...);};type Component int ;func (_becb *Bitmap )GetChocolateData ()[]byte {if _becb .Color ==Vanilla {_becb .inverseData ();};return _becb .Data ;};type MorphProcess struct{Operation MorphOperation ;
Arguments []int ;};func TstWordBitmap (t *_d .T ,scale ...int )*Bitmap {_dadf :=1;if len (scale )> 0{_dadf =scale [0];};_aadbf :=3;_fcbb :=9+7+15+2*_aadbf ;_gccf :=5+_aadbf +5;_fcdf :=New (_fcbb *_dadf ,_gccf *_dadf );_fedg :=&Bitmaps {};var _ccdd *int ;
_aadbf *=_dadf ;_fgad :=0;_ccdd =&_fgad ;_adgd :=0;_abde :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,1*_dadf );_abde =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,_aadbf );_abde =TstISymbol (t ,scale ...);
TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,1*_dadf );_abde =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,_aadbf );_abde =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,1*_dadf );_abde =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,1*_dadf );_abde =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,0);*_ccdd =0;_adgd =5*_dadf +_aadbf ;_abde =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,1*_dadf );
_abde =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,_aadbf );_abde =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,1*_dadf );_abde =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,1*_dadf );
_abde =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,1*_dadf );_abde =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,1*_dadf );_abde =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fedg ,_abde ,_ccdd ,_adgd ,0);
TstWriteSymbols (t ,_fedg ,_fcdf );return _fcdf ;};func MakePixelSumTab8 ()[]int {return _abcf ()};func (_cagga *Bitmaps )AddBox (box *_agb .Rectangle ){_cagga .Boxes =append (_cagga .Boxes ,box )};func (_dbda *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _dbda .Copy (),nil ;
};_gaed ,_ccc :=_dbda .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _ccc !=nil {return nil ,_b .Wrap (_ccc ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _gaed ,nil ;};func _eeaa (_aafa ,_gdaf *Bitmap ,_aadf ,_fgdd int )(*Bitmap ,error ){const _bdg ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";
if _gdaf ==nil {_ddb .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_b .Error (_bdg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _aadf < 1||_fgdd < 1{return nil ,_b .Error (_bdg ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _aadf ==1&&_fgdd ==1{_aab ,_ebge :=_geg (_aafa ,_gdaf );if _ebge !=nil {return nil ,_b .Wrap (_ebge ,_bdg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};
return _aab ,nil ;};if _aadf ==1||_fgdd ==1{_bfccd :=SelCreateBrick (_fgdd ,_aadf ,_fgdd /2,_aadf /2,SelHit );_fddg ,_dfgd :=_ebf (_aafa ,_gdaf ,_bfccd );if _dfgd !=nil {return nil ,_b .Wrap (_dfgd ,_bdg ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fddg ,nil ;};_ccbdb :=SelCreateBrick (1,_aadf ,0,_aadf /2,SelHit );_gecga :=SelCreateBrick (_fgdd ,1,_fgdd /2,0,SelHit );_dbaa ,_dcadf :=_ebf (nil ,_gdaf ,_ccbdb );if _dcadf !=nil {return nil ,_b .Wrap (_dcadf ,_bdg ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_aafa ,_dcadf =_ebf (_aafa ,_dbaa ,_gecga );if _dcadf !=nil {return nil ,_b .Wrap (_dcadf ,_bdg ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _aafa ,nil ;};const (_gffb shift =iota ;_gacf ;);func _abcf ()[]int {_bbad :=make ([]int ,256);
for _bdfc :=0;_bdfc <=0xff;_bdfc ++{_acbc :=byte (_bdfc );_bbad [_acbc ]=int (_acbc &0x1)+(int (_acbc >>1)&0x1)+(int (_acbc >>2)&0x1)+(int (_acbc >>3)&0x1)+(int (_acbc >>4)&0x1)+(int (_acbc >>5)&0x1)+(int (_acbc >>6)&0x1)+(int (_acbc >>7)&0x1);};return _bbad ;
};func (_ffdee *ClassedPoints )ySortFunction ()func (_edeg int ,_ebac int )bool {return func (_faad ,_bbgg int )bool {return _ffdee .YAtIndex (_faad )< _ffdee .YAtIndex (_bbgg )};};func _bgfgc (_befc int )int {if _befc < 0{return -_befc ;};return _befc ;
};func (_cgdg *BitmapsArray )GetBox (i int )(*_agb .Rectangle ,error ){const _affbg ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _cgdg ==nil {return nil ,_b .Error (_affbg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_cgdg .Boxes )-1{return nil ,_b .Errorf (_affbg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cgdg .Boxes [i ],nil ;};func (_fgdc *ClassedPoints )Swap (i ,j int ){_fgdc .IntSlice [i ],_fgdc .IntSlice [j ]=_fgdc .IntSlice [j ],_fgdc .IntSlice [i ];
};func _cagf (_edgg *Bitmap ,_gefg ...MorphProcess )(_bcgf *Bitmap ,_fabb error ){const _adce ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _edgg ==nil {return nil ,_b .Error (_adce ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_gefg )==0{return nil ,_b .Error (_adce ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _fabb =_efec (_gefg ...);
_fabb !=nil {return nil ,_b .Wrap (_fabb ,_adce ,"");};var _acfg ,_befd ,_age int ;_bcgf =_edgg .Copy ();for _ ,_cbcbg :=range _gefg {switch _cbcbg .Operation {case MopDilation :_acfg ,_befd =_cbcbg .getWidthHeight ();_bcgf ,_fabb =DilateBrick (nil ,_bcgf ,_acfg ,_befd );
if _fabb !=nil {return nil ,_b .Wrap (_fabb ,_adce ,"");};case MopErosion :_acfg ,_befd =_cbcbg .getWidthHeight ();_bcgf ,_fabb =_fdcc (nil ,_bcgf ,_acfg ,_befd );if _fabb !=nil {return nil ,_b .Wrap (_fabb ,_adce ,"");};case MopOpening :_acfg ,_befd =_cbcbg .getWidthHeight ();
_bcgf ,_fabb =_fbgga (nil ,_bcgf ,_acfg ,_befd );if _fabb !=nil {return nil ,_b .Wrap (_fabb ,_adce ,"");};case MopClosing :_acfg ,_befd =_cbcbg .getWidthHeight ();_bcgf ,_fabb =_begc (nil ,_bcgf ,_acfg ,_befd );if _fabb !=nil {return nil ,_b .Wrap (_fabb ,_adce ,"");
};case MopRankBinaryReduction :_bcgf ,_fabb =_cbc (_bcgf ,_cbcbg .Arguments ...);if _fabb !=nil {return nil ,_b .Wrap (_fabb ,_adce ,"");};case MopReplicativeBinaryExpansion :_bcgf ,_fabb =_cacdd (_bcgf ,_cbcbg .Arguments [0]);if _fabb !=nil {return nil ,_b .Wrap (_fabb ,_adce ,"");
};case MopAddBorder :_age =_cbcbg .Arguments [0];_bcgf ,_fabb =_bcgf .AddBorder (_age ,0);if _fabb !=nil {return nil ,_b .Wrap (_fabb ,_adce ,"");};default:return nil ,_b .Error (_adce ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _age > 0{_bcgf ,_fabb =_bcgf .RemoveBorder (_age );if _fabb !=nil {return nil ,_b .Wrap (_fabb ,_adce ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _bcgf ,nil ;};func _ageg (_cada *Bitmap ,_bccf ,_gdce ,_ebdb ,_dcdb int ,_bgdc RasterOperator ){if _bccf < 0{_ebdb +=_bccf ;
_bccf =0;};_adbf :=_bccf +_ebdb -_cada .Width ;if _adbf > 0{_ebdb -=_adbf ;};if _gdce < 0{_dcdb +=_gdce ;_gdce =0;};_bgba :=_gdce +_dcdb -_cada .Height ;if _bgba > 0{_dcdb -=_bgba ;};if _ebdb <=0||_dcdb <=0{return ;};if (_bccf &7)==0{_bbac (_cada ,_bccf ,_gdce ,_ebdb ,_dcdb ,_bgdc );
}else {_bafc (_cada ,_bccf ,_gdce ,_ebdb ,_dcdb ,_bgdc );};};func (_gbace *Bitmaps )AddBitmap (bm *Bitmap ){_gbace .Values =append (_gbace .Values ,bm )};func (_gfcb *Bitmap )clearAll ()error {return _gfcb .RasterOperation (0,0,_gfcb .Width ,_gfcb .Height ,PixClr ,nil ,0,0);
};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_agb .Rectangle ;};func _caea (_deab *Bitmap ,_aggb *_gc .Stack ,_bbed ,_bcecb int )(_ebfa *_agb .Rectangle ,_dfca error ){const _fdbag ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _deab ==nil {return nil ,_b .Error (_fdbag ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _aggb ==nil {return nil ,_b .Error (_fdbag ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_feag ,_gbbf :=_deab .Width ,_deab .Height ;_eceb :=_feag -1;_gbcea :=_gbbf -1;if _bbed < 0||_bbed > _eceb ||_bcecb < 0||_bcecb > _gbcea ||!_deab .GetPixel (_bbed ,_bcecb ){return nil ,nil ;};_geag :=_agb .Rect (100000,100000,0,0);if _dfca =_gbff (_aggb ,_bbed ,_bbed ,_bcecb ,1,_gbcea ,&_geag );
_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dfca =_gbff (_aggb ,_bbed ,_bbed ,_bcecb +1,-1,_gbcea ,&_geag );_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_geag .Min .X ,_geag .Max .X =_bbed ,_bbed ;_geag .Min .Y ,_geag .Max .Y =_bcecb ,_bcecb ;var (_dbbe *fillSegment ;_gcgde int ;);for _aggb .Len ()> 0{if _dbbe ,_dfca =_cbefe (_aggb );_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"");};_bcecb =_dbbe ._eaba ;
for _bbed =_dbbe ._gfgb -1;_bbed >=0&&_deab .GetPixel (_bbed ,_bcecb );_bbed --{if _dfca =_deab .SetPixel (_bbed ,_bcecb ,0);_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _bbed >=_dbbe ._gfgb -1{for {for _bbed ++;
_bbed <=_dbbe ._fcca +1&&_bbed <=_eceb &&!_deab .GetPixel (_bbed ,_bcecb );_bbed ++{};_gcgde =_bbed ;if !(_bbed <=_dbbe ._fcca +1&&_bbed <=_eceb ){break ;};for ;_bbed <=_eceb &&_deab .GetPixel (_bbed ,_bcecb );_bbed ++{if _dfca =_deab .SetPixel (_bbed ,_bcecb ,0);
_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dfca =_gbff (_aggb ,_gcgde ,_bbed -1,_dbbe ._eaba ,_dbbe ._aeec ,_gbcea ,&_geag );_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _bbed > _dbbe ._fcca {if _dfca =_gbff (_aggb ,_dbbe ._fcca +1,_bbed -1,_dbbe ._eaba ,-_dbbe ._aeec ,_gbcea ,&_geag );_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_gcgde =_bbed +1;if _gcgde < _dbbe ._gfgb {if _dfca =_gbff (_aggb ,_gcgde ,_dbbe ._gfgb -1,_dbbe ._eaba ,-_dbbe ._aeec ,_gbcea ,&_geag );_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_bbed =_dbbe ._gfgb ;for {for ;_bbed <=_eceb &&_deab .GetPixel (_bbed ,_bcecb );_bbed ++{if _dfca =_deab .SetPixel (_bbed ,_bcecb ,0);_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dfca =_gbff (_aggb ,_gcgde ,_bbed -1,_dbbe ._eaba ,_dbbe ._aeec ,_gbcea ,&_geag );
_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bbed > _dbbe ._fcca {if _dfca =_gbff (_aggb ,_dbbe ._fcca +1,_bbed -1,_dbbe ._eaba ,-_dbbe ._aeec ,_gbcea ,&_geag );_dfca !=nil {return nil ,_b .Wrap (_dfca ,_fdbag ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _bbed ++;_bbed <=_dbbe ._fcca +1&&_bbed <=_eceb &&!_deab .GetPixel (_bbed ,_bcecb );_bbed ++{};_gcgde =_bbed ;if !(_bbed <=_dbbe ._fcca +1&&_bbed <=_eceb ){break ;};};};_geag .Max .X ++;_geag .Max .Y ++;return &_geag ,nil ;};func (_cdgd *ClassedPoints )xSortFunction ()func (_daffce int ,_caga int )bool {return func (_abdb ,_cccf int )bool {return _cdgd .XAtIndex (_abdb )< _cdgd .XAtIndex (_cccf )};
};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_dbfc *byWidth )Less (i ,j int )bool {return _dbfc .Values [i ].Width < _dbfc .Values [j ].Width };var (_gddce *Bitmap ;
_bgga *Bitmap ;);func (_geb *Bitmap )Equals (s *Bitmap )bool {if len (_geb .Data )!=len (s .Data )||_geb .Width !=s .Width ||_geb .Height !=s .Height {return false ;};for _ddac :=0;_ddac < _geb .Height ;_ddac ++{_bgb :=_ddac *_geb .RowStride ;for _dac :=0;
_dac < _geb .RowStride ;_dac ++{if _geb .Data [_bgb +_dac ]!=s .Data [_bgb +_dac ]{return false ;};};};return true ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;
);func _fdcc (_eggfa ,_gdea *Bitmap ,_acda ,_bbba int )(*Bitmap ,error ){const _gage ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _gdea ==nil {return nil ,_b .Error (_gage ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _acda < 1||_bbba < 1{return nil ,_b .Error (_gage ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _acda ==1&&_bbba ==1{_gecb ,_cadg :=_geg (_eggfa ,_gdea );if _cadg !=nil {return nil ,_b .Wrap (_cadg ,_gage ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gecb ,nil ;};if _acda ==1||_bbba ==1{_eaee :=SelCreateBrick (_bbba ,_acda ,_bbba /2,_acda /2,SelHit );_geegf ,_bgeb :=_adbgf (_eggfa ,_gdea ,_eaee );if _bgeb !=nil {return nil ,_b .Wrap (_bgeb ,_gage ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _geegf ,nil ;};_daee :=SelCreateBrick (1,_acda ,0,_acda /2,SelHit );_ddea :=SelCreateBrick (_bbba ,1,_bbba /2,0,SelHit );_dbge ,_adaa :=_adbgf (nil ,_gdea ,_daee );if _adaa !=nil {return nil ,_b .Wrap (_adaa ,_gage ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_eggfa ,_adaa =_adbgf (_eggfa ,_dbge ,_ddea );if _adaa !=nil {return nil ,_b .Wrap (_adaa ,_gage ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _eggfa ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _cagf (src ,sequence ...);
};func (_ggad MorphProcess )verify (_ggfb int ,_cbcd ,_efea *int )error {const _abcd ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _ggad .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_ggad .Arguments )!=2{return _b .Error (_abcd ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_fbcc ,_gdcd :=_ggad .getWidthHeight ();if _fbcc <=0||_gdcd <=0{return _b .Error (_abcd ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_bbe :=len (_ggad .Arguments );*_cbcd +=_bbe ;if _bbe < 1||_bbe > 4{return _b .Error (_abcd ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _fgcad :=0;_fgcad < _bbe ;_fgcad ++{if _ggad .Arguments [_fgcad ]< 1||_ggad .Arguments [_fgcad ]> 4{return _b .Error (_abcd ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_ggad .Arguments )==0{return _b .Error (_abcd ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gfabg :=_ggad .Arguments [0];if _gfabg !=2&&_gfabg !=4&&_gfabg !=8{return _b .Error (_abcd ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_cbcd -=_gcad [_gfabg /4];case MopAddBorder :if len (_ggad .Arguments )==0{return _b .Error (_abcd ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eedd :=_ggad .Arguments [0];if _ggfb > 0{return _b .Error (_abcd ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _eedd < 1{return _b .Error (_abcd ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_efea =_eedd ;};return nil ;};func _ccgd (_geeag *Bitmap )(_egge *Bitmap ,_bfcc int ,_bcb error ){const _acgf ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _geeag ==nil {return nil ,0,_b .Errorf (_acgf ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _bafe ,_gecee *Bitmap ;if _bafe ,_bcb =_geg (nil ,_geeag );_bcb !=nil {return nil ,0,_b .Wrap (_bcb ,_acgf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_bafef [13]int ;_bbda ,_gfb int ;);_cbgg :=12;_gead :=_gc .NewNumSlice (_cbgg +1);_gdag :=_gc .NewNumSlice (_cbgg +1);var _fdfe *Boxes ;for _gegfb :=0;_gegfb <=_cbgg ;_gegfb ++{if _gegfb ==0{if _gecee ,_bcb =_geg (nil ,_bafe );_bcb !=nil {return nil ,0,_b .Wrap (_bcb ,_acgf ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _gecee ,_bcb =_cagf (_bafe ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_bcb !=nil {return nil ,0,_b .Wrap (_bcb ,_acgf ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _fdfe ,_bcb =_gecee .connComponentsBB (4);
_bcb !=nil {return nil ,0,_b .Wrap (_bcb ,_acgf ,"");};_bafef [_gegfb ]=len (*_fdfe );_gead .AddInt (_bafef [_gegfb ]);switch _gegfb {case 0:_bbda =_bafef [0];default:_gfb =_bafef [_gegfb -1]-_bafef [_gegfb ];_gdag .AddInt (_gfb );};_bafe =_gecee ;};_daaab :=true ;
_geca :=2;var _befg ,_daac int ;for _abeg :=1;_abeg < len (*_gdag );_abeg ++{if _befg ,_bcb =_gead .GetInt (_abeg );_bcb !=nil {return nil ,0,_b .Wrap (_bcb ,_acgf ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _daaab &&_befg < int (0.3*float32 (_bbda )){_geca =_abeg +1;_daaab =false ;};if _gfb ,_bcb =_gdag .GetInt (_abeg );_bcb !=nil {return nil ,0,_b .Wrap (_bcb ,_acgf ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _gfb > _daac {_daac =_gfb ;};};_dabggc :=_geeag .XResolution ;if _dabggc ==0{_dabggc =150;};if _dabggc > 110{_geca ++;};if _geca < 2{_ddb .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_geca =2;};_bfcc =_geca +1;if _egge ,_bcb =_gdgf (nil ,_geeag ,_geca +1,1);_bcb !=nil {return nil ,0,_b .Wrap (_bcb ,_acgf ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _egge ,_bfcc ,nil ;
};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _ddbc ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_b .Error (_ddbc ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_b .Error (_ddbc ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_b .Error (_ddbc ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_b .Error (_ddbc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_b .Error (_ddbc ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_fabc ,_cbcb :=bm1 .Width ,bm1 .Height ;_dfcc ,_ecbb :=bm2 .Width ,bm2 .Height ;if _gc .Abs (_fabc -_dfcc )> maxDiffW {return false ,nil ;};if _gc .Abs (_cbcb -_ecbb )> maxDiffH {return false ,nil ;};_ebb :=int (delX +_gc .Sign (delX )*0.5);_fadf :=int (delY +_gc .Sign (delY )*0.5);
_adcf :=int (_e .Ceil (_e .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_gcacd :=bm2 .RowStride ;_cebg :=_bgfgb (_fadf ,0);_ccfa :=_fbdd (_ecbb +_fadf ,_cbcb );_fecc :=bm1 .RowStride *_cebg ;_ddca :=bm2 .RowStride *(_cebg -_fadf );
var _efc int ;if _ccfa <=_cbcb {_efc =downcount [_ccfa -1];};_cdce :=_bgfgb (_ebb ,0);_gggb :=_fbdd (_dfcc +_ebb ,_fabc );var _ggeb ,_bbg int ;if _ebb >=8{_ggeb =_ebb >>3;_fecc +=_ggeb ;_cdce -=_ggeb <<3;_gggb -=_ggeb <<3;_ebb &=7;}else if _ebb <=-8{_bbg =-((_ebb +7)>>3);
_ddca +=_bbg ;_gcacd -=_bbg ;_ebb +=_bbg <<3;};var (_adbg ,_bebg ,_fccg int ;_dafc ,_cdbf ,_cade byte ;);if _cdce >=_gggb ||_cebg >=_ccfa {return false ,nil ;};_cbgd :=(_gggb +7)>>3;switch {case _ebb ==0:for _bebg =_cebg ;_bebg < _ccfa ;_bebg ,_fecc ,_ddca =_bebg +1,_fecc +bm1 .RowStride ,_ddca +bm2 .RowStride {for _fccg =0;
_fccg < _cbgd ;_fccg ++{_dafc =bm1 .Data [_fecc +_fccg ]&bm2 .Data [_ddca +_fccg ];_adbg +=tab [_dafc ];};if _adbg >=_adcf {return true ,nil ;};if _cfac :=_adbg +downcount [_bebg ]-_efc ;_cfac < _adcf {return false ,nil ;};};case _ebb > 0&&_gcacd < _cbgd :for _bebg =_cebg ;
_bebg < _ccfa ;_bebg ,_fecc ,_ddca =_bebg +1,_fecc +bm1 .RowStride ,_ddca +bm2 .RowStride {_cdbf =bm1 .Data [_fecc ];_cade =bm2 .Data [_ddca ]>>uint (_ebb );_dafc =_cdbf &_cade ;_adbg +=tab [_dafc ];for _fccg =1;_fccg < _gcacd ;_fccg ++{_cdbf =bm1 .Data [_fecc +_fccg ];
_cade =bm2 .Data [_ddca +_fccg ]>>uint (_ebb )|bm2 .Data [_ddca +_fccg -1]<<uint (8-_ebb );_dafc =_cdbf &_cade ;_adbg +=tab [_dafc ];};_cdbf =bm1 .Data [_fecc +_fccg ];_cade =bm2 .Data [_ddca +_fccg -1]<<uint (8-_ebb );_dafc =_cdbf &_cade ;_adbg +=tab [_dafc ];
if _adbg >=_adcf {return true ,nil ;}else if _adbg +downcount [_bebg ]-_efc < _adcf {return false ,nil ;};};case _ebb > 0&&_gcacd >=_cbgd :for _bebg =_cebg ;_bebg < _ccfa ;_bebg ,_fecc ,_ddca =_bebg +1,_fecc +bm1 .RowStride ,_ddca +bm2 .RowStride {_cdbf =bm1 .Data [_fecc ];
_cade =bm2 .Data [_ddca ]>>uint (_ebb );_dafc =_cdbf &_cade ;_adbg +=tab [_dafc ];for _fccg =1;_fccg < _cbgd ;_fccg ++{_cdbf =bm1 .Data [_fecc +_fccg ];_cade =bm2 .Data [_ddca +_fccg ]>>uint (_ebb );_cade |=bm2 .Data [_ddca +_fccg -1]<<uint (8-_ebb );_dafc =_cdbf &_cade ;
_adbg +=tab [_dafc ];};if _adbg >=_adcf {return true ,nil ;}else if _adbg +downcount [_bebg ]-_efc < _adcf {return false ,nil ;};};case _cbgd < _gcacd :for _bebg =_cebg ;_bebg < _ccfa ;_bebg ,_fecc ,_ddca =_bebg +1,_fecc +bm1 .RowStride ,_ddca +bm2 .RowStride {for _fccg =0;
_fccg < _cbgd ;_fccg ++{_cdbf =bm1 .Data [_fecc +_fccg ];_cade =bm2 .Data [_ddca +_fccg ]<<uint (-_ebb );_cade |=bm2 .Data [_ddca +_fccg +1]>>uint (8+_ebb );_dafc =_cdbf &_cade ;_adbg +=tab [_dafc ];};if _adbg >=_adcf {return true ,nil ;}else if _ccfd :=_adbg +downcount [_bebg ]-_efc ;
_ccfd < _adcf {return false ,nil ;};};case _gcacd >=_cbgd :for _bebg =_cebg ;_bebg < _ccfa ;_bebg ,_fecc ,_ddca =_bebg +1,_fecc +bm1 .RowStride ,_ddca +bm2 .RowStride {for _fccg =0;_fccg < _cbgd ;_fccg ++{_cdbf =bm1 .Data [_fecc +_fccg ];_cade =bm2 .Data [_ddca +_fccg ]<<uint (-_ebb );
_cade |=bm2 .Data [_ddca +_fccg +1]>>uint (8+_ebb );_dafc =_cdbf &_cade ;_adbg +=tab [_dafc ];};_cdbf =bm1 .Data [_fecc +_fccg ];_cade =bm2 .Data [_ddca +_fccg ]<<uint (-_ebb );_dafc =_cdbf &_cade ;_adbg +=tab [_dafc ];if _adbg >=_adcf {return true ,nil ;
}else if _adbg +downcount [_bebg ]-_efc < _adcf {return false ,nil ;};};};_ecbbb :=float32 (_adbg )*float32 (_adbg )/(float32 (area1 )*float32 (area2 ));if _ecbbb >=scoreThreshold {_ddb .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_adbg ,_adcf ,_ecbbb ,scoreThreshold );
};return false ,nil ;};func _bfd (_cffa ,_agdb *Bitmap ,_cccd *Selection )(*Bitmap ,error ){const _abfc ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _gedd error ;if _cffa ,_gedd =_fbae (_cffa ,_agdb ,_cccd );_gedd !=nil {return nil ,_gedd ;
};_baga ,_gedd :=_ebf (nil ,_agdb ,_cccd );if _gedd !=nil {return nil ,_b .Wrap (_gedd ,_abfc ,"");};if _ ,_gedd =_adbgf (_cffa ,_baga ,_cccd );_gedd !=nil {return nil ,_b .Wrap (_gedd ,_abfc ,"");};return _cffa ,nil ;};type Bitmap struct{Width ,Height int ;
BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_dgcb *Bitmap )removeBorderGeneral (_gecg ,_bbf ,_cbfd ,_aef int )(*Bitmap ,error ){const _ggbee ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _gecg < 0||_bbf < 0||_cbfd < 0||_aef < 0{return nil ,_b .Error (_ggbee ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_beec ,_ecgg :=_dgcb .Width ,_dgcb .Height ;
_dag :=_beec -_gecg -_bbf ;_bea :=_ecgg -_cbfd -_aef ;if _dag <=0{return nil ,_b .Errorf (_ggbee ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_dag );};if _bea <=0{return nil ,_b .Errorf (_ggbee ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_bea );
};_cfa :=New (_dag ,_bea );_cfa .Color =_dgcb .Color ;_fba :=_cfa .RasterOperation (0,0,_dag ,_bea ,PixSrc ,_dgcb ,_gecg ,_cbfd );if _fba !=nil {return nil ,_b .Wrap (_fba ,_ggbee ,"");};return _cfa ,nil ;};func _bbbad ()[]int {_ffde :=make ([]int ,256);
_ffde [0]=0;_ffde [1]=7;var _babf int ;for _babf =2;_babf < 4;_babf ++{_ffde [_babf ]=_ffde [_babf -2]+6;};for _babf =4;_babf < 8;_babf ++{_ffde [_babf ]=_ffde [_babf -4]+5;};for _babf =8;_babf < 16;_babf ++{_ffde [_babf ]=_ffde [_babf -8]+4;};for _babf =16;
_babf < 32;_babf ++{_ffde [_babf ]=_ffde [_babf -16]+3;};for _babf =32;_babf < 64;_babf ++{_ffde [_babf ]=_ffde [_babf -32]+2;};for _babf =64;_babf < 128;_babf ++{_ffde [_babf ]=_ffde [_babf -64]+1;};for _babf =128;_babf < 256;_babf ++{_ffde [_babf ]=_ffde [_babf -128];
};return _ffde ;};func (_fdd *Bitmap )GetUnpaddedData ()([]byte ,error ){_def :=uint (_fdd .Width &0x07);if _def ==0{return _fdd .Data ,nil ;};_eab :=_fdd .Width *_fdd .Height ;if _eab %8!=0{_eab >>=3;_eab ++;}else {_eab >>=3;};_cdcf :=make ([]byte ,_eab );
_efb :=_ag .NewWriterMSB (_cdcf );const _gccb ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _fbe :=0;_fbe < _fdd .Height ;_fbe ++{for _geea :=0;_geea < _fdd .RowStride ;_geea ++{_fbg :=_fdd .Data [_fbe *_fdd .RowStride +_geea ];
if _geea !=_fdd .RowStride -1{_aaf :=_efb .WriteByte (_fbg );if _aaf !=nil {return nil ,_b .Wrap (_aaf ,_gccb ,"");};continue ;};for _ddf :=uint (0);_ddf < _def ;_ddf ++{_cbe :=_efb .WriteBit (int (_fbg >>(7-_ddf )&0x01));if _cbe !=nil {return nil ,_b .Wrap (_cbe ,_gccb ,"");
};};};};return _cdcf ,nil ;};func TstTSymbol (t *_d .T ,scale ...int )*Bitmap {_cgee ,_gfaae :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_a .NoError (t ,_gfaae );return TstGetScaledSymbol (t ,_cgee ,scale ...);};func _cafd (_bebgg *Bitmap ,_fgedg *_gc .Stack ,_gfbg ,_cebe int )(_cfge *_agb .Rectangle ,_bccd error ){const _ccd ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _bebgg ==nil {return nil ,_b .Error (_ccd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fgedg ==nil {return nil ,_b .Error (_ccd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_fcfg ,_dedga :=_bebgg .Width ,_bebgg .Height ;_cdebf :=_fcfg -1;_fgbfc :=_dedga -1;if _gfbg < 0||_gfbg > _cdebf ||_cebe < 0||_cebe > _fgbfc ||!_bebgg .GetPixel (_gfbg ,_cebe ){return nil ,nil ;};var _aafac *_agb .Rectangle ;_aafac ,_bccd =Rect (100000,100000,0,0);
if _bccd !=nil {return nil ,_b .Wrap (_bccd ,_ccd ,"");};if _bccd =_gbff (_fgedg ,_gfbg ,_gfbg ,_cebe ,1,_fgbfc ,_aafac );_bccd !=nil {return nil ,_b .Wrap (_bccd ,_ccd ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bccd =_gbff (_fgedg ,_gfbg ,_gfbg ,_cebe +1,-1,_fgbfc ,_aafac );
_bccd !=nil {return nil ,_b .Wrap (_bccd ,_ccd ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_aafac .Min .X ,_aafac .Max .X =_gfbg ,_gfbg ;_aafac .Min .Y ,_aafac .Max .Y =_cebe ,_cebe ;var (_dfbb *fillSegment ;
_bfef int ;);for _fgedg .Len ()> 0{if _dfbb ,_bccd =_cbefe (_fgedg );_bccd !=nil {return nil ,_b .Wrap (_bccd ,_ccd ,"");};_cebe =_dfbb ._eaba ;for _gfbg =_dfbb ._gfgb ;_gfbg >=0&&_bebgg .GetPixel (_gfbg ,_cebe );_gfbg --{if _bccd =_bebgg .SetPixel (_gfbg ,_cebe ,0);
_bccd !=nil {return nil ,_b .Wrap (_bccd ,_ccd ,"");};};if _gfbg >=_dfbb ._gfgb {for _gfbg ++;_gfbg <=_dfbb ._fcca &&_gfbg <=_cdebf &&!_bebgg .GetPixel (_gfbg ,_cebe );_gfbg ++{};_bfef =_gfbg ;if !(_gfbg <=_dfbb ._fcca &&_gfbg <=_cdebf ){continue ;};}else {_bfef =_gfbg +1;
if _bfef < _dfbb ._gfgb -1{if _bccd =_gbff (_fgedg ,_bfef ,_dfbb ._gfgb -1,_dfbb ._eaba ,-_dfbb ._aeec ,_fgbfc ,_aafac );_bccd !=nil {return nil ,_b .Wrap (_bccd ,_ccd ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_gfbg =_dfbb ._gfgb +1;};for {for ;_gfbg <=_cdebf &&_bebgg .GetPixel (_gfbg ,_cebe );_gfbg ++{if _bccd =_bebgg .SetPixel (_gfbg ,_cebe ,0);_bccd !=nil {return nil ,_b .Wrap (_bccd ,_ccd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bccd =_gbff (_fgedg ,_bfef ,_gfbg -1,_dfbb ._eaba ,_dfbb ._aeec ,_fgbfc ,_aafac );
_bccd !=nil {return nil ,_b .Wrap (_bccd ,_ccd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gfbg > _dfbb ._fcca +1{if _bccd =_gbff (_fgedg ,_dfbb ._fcca +1,_gfbg -1,_dfbb ._eaba ,-_dfbb ._aeec ,_fgbfc ,_aafac );_bccd !=nil {return nil ,_b .Wrap (_bccd ,_ccd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _gfbg ++;_gfbg <=_dfbb ._fcca &&_gfbg <=_cdebf &&!_bebgg .GetPixel (_gfbg ,_cebe );_gfbg ++{};_bfef =_gfbg ;if !(_gfbg <=_dfbb ._fcca &&_gfbg <=_cdebf ){break ;};};};_aafac .Max .X ++;_aafac .Max .Y ++;return _aafac ,nil ;};func (_faggf *Selection )findMaxTranslations ()(_ebfc ,_abccc ,_ccbda ,_ceea int ){for _fccee :=0;
_fccee < _faggf .Height ;_fccee ++{for _gbea :=0;_gbea < _faggf .Width ;_gbea ++{if _faggf .Data [_fccee ][_gbea ]==SelHit {_ebfc =_bgfgb (_ebfc ,_faggf .Cx -_gbea );_abccc =_bgfgb (_abccc ,_faggf .Cy -_fccee );_ccbda =_bgfgb (_ccbda ,_gbea -_faggf .Cx );
_ceea =_bgfgb (_ceea ,_fccee -_faggf .Cy );};};};return _ebfc ,_abccc ,_ccbda ,_ceea ;};func (_dbgde *byHeight )Len ()int {return len (_dbgde .Values )};func (_ffca *Boxes )Add (box *_agb .Rectangle )error {if _ffca ==nil {return _b .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_ffca =append (*_ffca ,box );return nil ;};func TstISymbol (t *_d .T ,scale ...int )*Bitmap {_bae ,_ceae :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_a .NoError (t ,_ceae );return TstGetScaledSymbol (t ,_bae ,scale ...);};func TstAddSymbol (t *_d .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_fceg :=_agb .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_fceg );*x +=sym .Width +space ;};func (_fcgb Points )Get (i int )(Point ,error ){if i > len (_fcgb )-1{return Point {},_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fcgb [i ],nil ;};func _ccf (_egcc ,_abf *Bitmap ,_af int ,_bcab []byte ,_aff int )(_fgc error ){const _cbf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_edc ,_ege ,_gff ,_bacc ,_dfg ,_cbce ,_gdd ,_eb int ;
_ggd ,_agcf ,_ccea ,_fdf uint32 ;_caae ,_dfc byte ;_gga uint16 ;);_fgcd :=make ([]byte ,4);_bgfg :=make ([]byte ,4);for _gff =0;_gff < _egcc .Height -1;_gff ,_bacc =_gff +2,_bacc +1{_edc =_gff *_egcc .RowStride ;_ege =_bacc *_abf .RowStride ;for _dfg ,_cbce =0,0;
_dfg < _aff ;_dfg ,_cbce =_dfg +4,_cbce +1{for _gdd =0;_gdd < 4;_gdd ++{_eb =_edc +_dfg +_gdd ;if _eb <=len (_egcc .Data )-1&&_eb < _edc +_egcc .RowStride {_fgcd [_gdd ]=_egcc .Data [_eb ];}else {_fgcd [_gdd ]=0x00;};_eb =_edc +_egcc .RowStride +_dfg +_gdd ;
if _eb <=len (_egcc .Data )-1&&_eb < _edc +(2*_egcc .RowStride ){_bgfg [_gdd ]=_egcc .Data [_eb ];}else {_bgfg [_gdd ]=0x00;};};_ggd =_bc .BigEndian .Uint32 (_fgcd );_agcf =_bc .BigEndian .Uint32 (_bgfg );_ccea =_ggd &_agcf ;_ccea |=_ccea <<1;_fdf =_ggd |_agcf ;
_fdf &=_fdf <<1;_agcf =_ccea |_fdf ;_agcf &=0xaaaaaaaa;_ggd =_agcf |(_agcf <<7);_caae =byte (_ggd >>24);_dfc =byte ((_ggd >>8)&0xff);_eb =_ege +_cbce ;if _eb +1==len (_abf .Data )-1||_eb +1>=_ege +_abf .RowStride {if _fgc =_abf .SetByte (_eb ,_bcab [_caae ]);
_fgc !=nil {return _b .Wrapf (_fgc ,_cbf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eb );};}else {_gga =(uint16 (_bcab [_caae ])<<8)|uint16 (_bcab [_dfc ]);if _fgc =_abf .setTwoBytes (_eb ,_gga );_fgc !=nil {return _b .Wrapf (_fgc ,_cbf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eb );
};_cbce ++;};};};return nil ;};func _ggg ()(_fga [256]uint64 ){for _agg :=0;_agg < 256;_agg ++{if _agg &0x01!=0{_fga [_agg ]|=0xff;};if _agg &0x02!=0{_fga [_agg ]|=0xff00;};if _agg &0x04!=0{_fga [_agg ]|=0xff0000;};if _agg &0x08!=0{_fga [_agg ]|=0xff000000;
};if _agg &0x10!=0{_fga [_agg ]|=0xff00000000;};if _agg &0x20!=0{_fga [_agg ]|=0xff0000000000;};if _agg &0x40!=0{_fga [_agg ]|=0xff000000000000;};if _agg &0x80!=0{_fga [_agg ]|=0xff00000000000000;};};return _fga ;};func (_bgdf *Bitmap )inverseData (){if _agdf :=_bgdf .RasterOperation (0,0,_bgdf .Width ,_bgdf .Height ,PixNotDst ,nil ,0,0);
_agdf !=nil {_ddb .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_agdf );};if _bgdf .Color ==Chocolate {_bgdf .Color =Vanilla ;}else {_bgdf .Color =Chocolate ;};};
func (_dgca *ClassedPoints )Less (i ,j int )bool {return _dgca ._gefb (i ,j )};func _fdgg (_bda ,_baggb *Bitmap ,_decf CombinationOperator )*Bitmap {_dace :=New (_bda .Width ,_bda .Height );for _daag :=0;_daag < len (_dace .Data );_daag ++{_dace .Data [_daag ]=_gda (_bda .Data [_daag ],_baggb .Data [_daag ],_decf );
};return _dace ;};func New (width ,height int )*Bitmap {_aege :=_cga (width ,height );_aege .Data =make ([]byte ,height *_aege .RowStride );return _aege ;};func _fbgga (_fafg ,_fdeb *Bitmap ,_eba ,_gcee int )(*Bitmap ,error ){const _gdcg ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _fdeb ==nil {return nil ,_b .Error (_gdcg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _eba < 1&&_gcee < 1{return nil ,_b .Error (_gdcg ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _eba ==1&&_gcee ==1{return _fdeb .Copy (),nil ;};if _eba ==1||_gcee ==1{var _efgc error ;_ecbc :=SelCreateBrick (_gcee ,_eba ,_gcee /2,_eba /2,SelHit );_fafg ,_efgc =_dgda (_fafg ,_fdeb ,_ecbc );if _efgc !=nil {return nil ,_b .Wrap (_efgc ,_gdcg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fafg ,nil ;};_cbec :=SelCreateBrick (1,_eba ,0,_eba /2,SelHit );_cbcea :=SelCreateBrick (_gcee ,1,_gcee /2,0,SelHit );_cegg ,_accf :=_adbgf (nil ,_fdeb ,_cbec );if _accf !=nil {return nil ,_b .Wrap (_accf ,_gdcg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_fafg ,_accf =_adbgf (_fafg ,_cegg ,_cbcea );if _accf !=nil {return nil ,_b .Wrap (_accf ,_gdcg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_accf =_ebf (_cegg ,_fafg ,_cbec );if _accf !=nil {return nil ,_b .Wrap (_accf ,_gdcg ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_accf =_ebf (_fafg ,_cegg ,_cbcea );if _accf !=nil {return nil ,_b .Wrap (_accf ,_gdcg ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _fafg ,nil ;};func init (){const _fedbe ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_gddce =New (50,40);var _fgcc error ;_gddce ,_fgcc =_gddce .AddBorder (2,1);if _fgcc !=nil {panic (_b .Wrap (_fgcc ,_fedbe ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_bgga ,_fgcc =NewWithData (50,22,_debg );if _fgcc !=nil {panic (_b .Wrap (_fgcc ,_fedbe ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};var _gcad =[5]int {1,2,3,0,4};func (_ecd *Bitmap )Copy ()*Bitmap {_cbcf :=make ([]byte ,len (_ecd .Data ));copy (_cbcf ,_ecd .Data );return &Bitmap {Width :_ecd .Width ,Height :_ecd .Height ,RowStride :_ecd .RowStride ,Data :_cbcf ,Color :_ecd .Color ,Text :_ecd .Text ,BitmapNumber :_ecd .BitmapNumber ,Special :_ecd .Special };
};func (_gge *Bitmap )GetByte (index int )(byte ,error ){if index > len (_gge .Data )-1||index < 0{return 0,_b .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _gge .Data [index ],nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_adbgg *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _ebgbg ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _adbgg ==nil {return nil ,_b .Error (_ebgbg ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_b .Error (_ebgbg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_bbcf :=len (_adbgg .Values );_fafgd :=&Bitmaps {Values :make ([]*Bitmap ,_bbcf ),Boxes :make ([]*_agb .Rectangle ,_bbcf )};var (_efgf ,_bfbd *Bitmap ;_acbf *_agb .Rectangle ;_bagdc error ;);for _dfbg :=0;_dfbg < _bbcf ;_dfbg ++{if _efgf ,_bagdc =_adbgg .GetBitmap (_dfbg );
_bagdc !=nil {return nil ,_b .Wrap (_bagdc ,_ebgbg ,"");};if _acbf ,_bagdc =_adbgg .GetBox (_dfbg );_bagdc !=nil {return nil ,_b .Wrap (_bagdc ,_ebgbg ,"");};if _bfbd ,_bagdc =s .clipRectangle (_acbf ,nil );_bagdc !=nil {return nil ,_b .Wrap (_bagdc ,_ebgbg ,"");
};if _bfbd ,_bagdc =_bfbd .And (_efgf );_bagdc !=nil {return nil ,_b .Wrap (_bagdc ,_ebgbg ,"");};_fafgd .Values [_dfbg ]=_bfbd ;_fafgd .Boxes [_dfbg ]=_acbf ;};return _fafgd ,nil ;};func (_aagb *Bitmap )setFourBytes (_bcff int ,_daga uint32 )error {if _bcff +3> len (_aagb .Data )-1{return _b .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bcff );
};_aagb .Data [_bcff ]=byte ((_daga &0xff000000)>>24);_aagb .Data [_bcff +1]=byte ((_daga &0xff0000)>>16);_aagb .Data [_bcff +2]=byte ((_daga &0xff00)>>8);_aagb .Data [_bcff +3]=byte (_daga &0xff);return nil ;};func (_cbede Points )YSorter ()func (_afba ,_fedc int )bool {return func (_fgba ,_abdd int )bool {return _cbede [_fgba ].Y < _cbede [_abdd ].Y };
};func (_gcae *Boxes )selectWithIndicator (_gcge *_gc .NumSlice )(_fbfa *Boxes ,_gcga error ){const _ccga ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _gcae ==nil {return nil ,_b .Error (_ccga ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if _gcge ==nil {return nil ,_b .Error (_ccga ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_gcge )!=len (*_gcae ){return nil ,_b .Error (_ccga ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _eacg ,_efaf int ;for _gbed :=0;_gbed < len (*_gcge );_gbed ++{if _eacg ,_gcga =_gcge .GetInt (_gbed );_gcga !=nil {return nil ,_b .Wrap (_gcga ,_ccga ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _eacg ==1{_efaf ++;
};};if _efaf ==len (*_gcae ){return _gcae ,nil ;};_ceee :=Boxes {};for _ggc :=0;_ggc < len (*_gcge );_ggc ++{_eacg =int ((*_gcge )[_ggc ]);if _eacg ==0{continue ;};_ceee =append (_ceee ,(*_gcae )[_ggc ]);};_fbfa =&_ceee ;return _fbfa ,nil ;};func (_cadae *byWidth )Len ()int {return len (_cadae .Values )};
func TstRSymbol (t *_d .T ,scale ...int )*Bitmap {_affa ,_ddce :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_a .NoError (t ,_ddce );return TstGetScaledSymbol (t ,_affa ,scale ...);};func _ccgdb (_dbag *Bitmap ,_gafb ,_ggdd ,_feddd ,_dcfd int ,_ebec RasterOperator ,_efcg *Bitmap ,_defb ,_gbag int )error {var (_cagc byte ;
_bcffb int ;_beda int ;_gcdc ,_fcgc int ;_ddcaf ,_fggfc int ;);_fcab :=_feddd >>3;_ccaa :=_feddd &7;if _ccaa > 0{_cagc =_bgdff [_ccaa ];};_bcffb =_efcg .RowStride *_gbag +(_defb >>3);_beda =_dbag .RowStride *_ggdd +(_gafb >>3);switch _ebec {case PixSrc :for _ddcaf =0;
_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]=_efcg .Data [_gcdc ];_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],_efcg .Data [_gcdc ],_cagc );
};};case PixNotSrc :for _ddcaf =0;_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]=^(_efcg .Data [_gcdc ]);_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],^_efcg .Data [_gcdc ],_cagc );
};};case PixSrcOrDst :for _ddcaf =0;_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]|=_efcg .Data [_gcdc ];_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],_efcg .Data [_gcdc ]|_dbag .Data [_fcgc ],_cagc );
};};case PixSrcAndDst :for _ddcaf =0;_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]&=_efcg .Data [_gcdc ];_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],_efcg .Data [_gcdc ]&_dbag .Data [_fcgc ],_cagc );
};};case PixSrcXorDst :for _ddcaf =0;_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]^=_efcg .Data [_gcdc ];_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],_efcg .Data [_gcdc ]^_dbag .Data [_fcgc ],_cagc );
};};case PixNotSrcOrDst :for _ddcaf =0;_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]|=^(_efcg .Data [_gcdc ]);_fcgc ++;_gcdc ++;};
if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],^(_efcg .Data [_gcdc ])|_dbag .Data [_fcgc ],_cagc );};};case PixNotSrcAndDst :for _ddcaf =0;_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;
for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]&=^(_efcg .Data [_gcdc ]);_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],^(_efcg .Data [_gcdc ])&_dbag .Data [_fcgc ],_cagc );};};case PixSrcOrNotDst :for _ddcaf =0;
_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]=_efcg .Data [_gcdc ]|^(_dbag .Data [_fcgc ]);_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],_efcg .Data [_gcdc ]|^(_dbag .Data [_fcgc ]),_cagc );
};};case PixSrcAndNotDst :for _ddcaf =0;_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]=_efcg .Data [_gcdc ]&^(_dbag .Data [_fcgc ]);
_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],_efcg .Data [_gcdc ]&^(_dbag .Data [_fcgc ]),_cagc );};};case PixNotPixSrcOrDst :for _ddcaf =0;_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;
for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]=^(_efcg .Data [_gcdc ]|_dbag .Data [_fcgc ]);_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],^(_efcg .Data [_gcdc ]|_dbag .Data [_fcgc ]),_cagc );};};case PixNotPixSrcAndDst :for _ddcaf =0;
_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]=^(_efcg .Data [_gcdc ]&_dbag .Data [_fcgc ]);_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],^(_efcg .Data [_gcdc ]&_dbag .Data [_fcgc ]),_cagc );
};};case PixNotPixSrcXorDst :for _ddcaf =0;_ddcaf < _dcfd ;_ddcaf ++{_gcdc =_bcffb +_ddcaf *_efcg .RowStride ;_fcgc =_beda +_ddcaf *_dbag .RowStride ;for _fggfc =0;_fggfc < _fcab ;_fggfc ++{_dbag .Data [_fcgc ]=^(_efcg .Data [_gcdc ]^_dbag .Data [_fcgc ]);
_fcgc ++;_gcdc ++;};if _ccaa > 0{_dbag .Data [_fcgc ]=_dcgbf (_dbag .Data [_fcgc ],^(_efcg .Data [_gcdc ]^_dbag .Data [_fcgc ]),_cagc );};};default:_ddb .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_ebec );
return _b .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_dbf *Bitmap )setEightPartlyBytes (_gcgc ,_fcdb int ,_daff uint64 )(_bcece error ){var (_cee byte ;_gebd int ;);const _cbab ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _edfe :=1;_edfe <=_fcdb ;_edfe ++{_gebd =64-_edfe *8;_cee =byte (_daff >>uint (_gebd )&0xff);_ddb .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_cee ,_gcgc ,_gcgc +_edfe -1,_fcdb ,_gebd );
if _bcece =_dbf .SetByte (_gcgc +_edfe -1,_cee );_bcece !=nil {return _b .Wrap (_bcece ,_cbab ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_adg :=_dbf .RowStride *8-_dbf .Width ;if _adg ==0{return nil ;};_gebd -=8;_cee =byte (_daff >>uint (_gebd )&0xff)<<uint (_adg );
if _bcece =_dbf .SetByte (_gcgc +_fcdb ,_cee );_bcece !=nil {return _b .Wrap (_bcece ,_cbab ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_efga *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _dbcfd ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_efga .Values )==0{return nil ,_b .Error (_dbcfd ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_ceadb :=&BitmapsArray {};_efga .SortByWidth ();_decc :=-1;_afed :=-1;for _dceag :=0;_dceag < len (_efga .Values );
_dceag ++{_caede :=_efga .Values [_dceag ].Width ;if _caede > _decc {_decc =_caede ;_afed ++;_ceadb .Values =append (_ceadb .Values ,&Bitmaps {});};_ceadb .Values [_afed ].AddBitmap (_efga .Values [_dceag ]);};return _ceadb ,nil ;};var _ac [256]uint8 ;
func (_gegb *Boxes )makeSizeIndicator (_bagd ,_bdd int ,_edbd LocationFilter ,_fea SizeComparison )*_gc .NumSlice {_afbc :=&_gc .NumSlice {};var _cagg ,_aadb ,_bde int ;for _ ,_eggf :=range *_gegb {_cagg =0;_aadb ,_bde =_eggf .Dx (),_eggf .Dy ();switch _edbd {case LocSelectWidth :if (_fea ==SizeSelectIfLT &&_aadb < _bagd )||(_fea ==SizeSelectIfGT &&_aadb > _bagd )||(_fea ==SizeSelectIfLTE &&_aadb <=_bagd )||(_fea ==SizeSelectIfGTE &&_aadb >=_bagd ){_cagg =1;
};case LocSelectHeight :if (_fea ==SizeSelectIfLT &&_bde < _bdd )||(_fea ==SizeSelectIfGT &&_bde > _bdd )||(_fea ==SizeSelectIfLTE &&_bde <=_bdd )||(_fea ==SizeSelectIfGTE &&_bde >=_bdd ){_cagg =1;};case LocSelectIfEither :if (_fea ==SizeSelectIfLT &&(_bde < _bdd ||_aadb < _bagd ))||(_fea ==SizeSelectIfGT &&(_bde > _bdd ||_aadb > _bagd ))||(_fea ==SizeSelectIfLTE &&(_bde <=_bdd ||_aadb <=_bagd ))||(_fea ==SizeSelectIfGTE &&(_bde >=_bdd ||_aadb >=_bagd )){_cagg =1;
};case LocSelectIfBoth :if (_fea ==SizeSelectIfLT &&(_bde < _bdd &&_aadb < _bagd ))||(_fea ==SizeSelectIfGT &&(_bde > _bdd &&_aadb > _bagd ))||(_fea ==SizeSelectIfLTE &&(_bde <=_bdd &&_aadb <=_bagd ))||(_fea ==SizeSelectIfGTE &&(_bde >=_bdd &&_aadb >=_bagd )){_cagg =1;
};};_afbc .AddInt (_cagg );};return _afbc ;};func (_gfd *Selection )setOrigin (_ceedd ,_bggd int ){_gfd .Cy ,_gfd .Cx =_ceedd ,_bggd };func TstWordBitmapWithSpaces (t *_d .T ,scale ...int )*Bitmap {_dada :=1;if len (scale )> 0{_dada =scale [0];};_fgab :=3;
_efdg :=9+7+15+2*_fgab +2*_fgab ;_agfd :=5+_fgab +5+2*_fgab ;_cafe :=New (_efdg *_dada ,_agfd *_dada );_eced :=&Bitmaps {};var _dade *int ;_fgab *=_dada ;_dceg :=_fgab ;_dade =&_dceg ;_bedd :=_fgab ;_bdfcc :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,1*_dada );
_bdfcc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,_fgab );_bdfcc =TstISymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,1*_dada );_bdfcc =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,_fgab );
_bdfcc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,1*_dada );_bdfcc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,1*_dada );_bdfcc =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,0);
*_dade =_fgab ;_bedd =5*_dada +_fgab ;_bdfcc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,1*_dada );_bdfcc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,_fgab );_bdfcc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,1*_dada );
_bdfcc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,1*_dada );_bdfcc =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,1*_dada );_bdfcc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,1*_dada );
_bdfcc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_eced ,_bdfcc ,_dade ,_bedd ,0);TstWriteSymbols (t ,_eced ,_cafe );return _cafe ;};func (_gaea *Points )Add (pt *Points )error {const _geaf ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _gaea ==nil {return _b .Error (_geaf ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _b .Error (_geaf ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_gaea =append (*_gaea ,*pt ...);return nil ;};func (_dbeaf *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _fcfcc ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_ebffe ,_ecdbc :=_dbeaf .selectByIndexes (idx );if _ecdbc !=nil {return nil ,_b .Wrap (_ecdbc ,_fcfcc ,"");};return _ebffe ,nil ;};func _eeag (_fdce ,_adbb ,_beea *Bitmap ,_aggc int )(*Bitmap ,error ){const _fgeg ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _adbb ==nil {return nil ,_b .Error (_fgeg ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _beea ==nil {return nil ,_b .Error (_fgeg ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _aggc !=4&&_aggc !=8{return nil ,_b .Error (_fgeg ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _cacdf error ;_fdce ,_cacdf =_geg (_fdce ,_adbb );
if _cacdf !=nil {return nil ,_b .Wrap (_cacdf ,_fgeg ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_afgf :=_adbb .createTemplate ();_beea .setPadBits (0);for _cef :=0;_cef < _acae ;_cef ++{_afgf ,_cacdf =_geg (_afgf ,_fdce );
if _cacdf !=nil {return nil ,_b .Wrapf (_cacdf ,_fgeg ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_cef );};if _cacdf =_agga (_fdce ,_beea ,_aggc );_cacdf !=nil {return nil ,_b .Wrapf (_cacdf ,_fgeg ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_cef );
};if _afgf .Equals (_fdce ){break ;};};return _fdce ,nil ;};func MakePixelCentroidTab8 ()[]int {return _bbbad ()};func _efec (_ggea ...MorphProcess )(_dedg error ){const _bgfaa ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _befa ,_gfgg int ;for _ddfc ,_dgbd :=range _ggea {if _dedg =_dgbd .verify (_ddfc ,&_befa ,&_gfgg );_dedg !=nil {return _b .Wrap (_dedg ,_bgfaa ,"");};};if _gfgg !=0&&_befa !=0{return _b .Error (_bgfaa ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};