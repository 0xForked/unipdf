//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_dbb "encoding/binary";_dd "github.com/stretchr/testify/require";_c "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_ga "github.com/unidoc/unipdf/v3/internal/imageutil";_gc "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_d "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_fg "image";_fd "math";_db "sort";_g "strings";_dg "testing";);func (_cfea *Boxes )Get (i int )(*_fg .Rectangle ,error ){const _bggg ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _cfea ==nil {return nil ,_d .Error (_bggg ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_cfea )-1{return nil ,_d .Errorf (_bggg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_cfea )[i ],nil ;};func (_fgfg Points )YSorter ()func (_aggc ,_dbdfe int )bool {return func (_ecgb ,_adfa int )bool {return _fgfg [_ecgb ].Y < _fgfg [_adfa ].Y };
};func (_ecgc *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_eca *Boxes ,_cbcc error ){const _accd ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _ecgc ==nil {return nil ,_d .Error (_accd ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_d .Error (_accd ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _eca ,_cbcc =_ecgc .connComponentsBB (connectivity );
_cbcc !=nil {return nil ,_d .Wrap (_cbcc ,_accd ,"");};}else {if _eca ,_cbcc =_ecgc .connComponentsBitmapsBB (bms ,connectivity );_cbcc !=nil {return nil ,_d .Wrap (_cbcc ,_accd ,"");};};return _eca ,nil ;};func (_ffbc *Bitmaps )selectByIndicator (_cfgg *_gc .NumSlice )(_ffdg *Bitmaps ,_faca error ){const _ddeab ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ffbc ==nil {return nil ,_d .Error (_ddeab ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _cfgg ==nil {return nil ,_d .Error (_ddeab ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_ffbc .Values )==0{return _ffbc ,nil ;};if len (*_cfgg )!=len (_ffbc .Values ){return nil ,_d .Errorf (_ddeab ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_cfgg ),len (_ffbc .Values ));
};var _edffe ,_dgbg ,_aafbf int ;for _dgbg =0;_dgbg < len (*_cfgg );_dgbg ++{if _edffe ,_faca =_cfgg .GetInt (_dgbg );_faca !=nil {return nil ,_d .Wrap (_faca ,_ddeab ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _edffe ==1{_aafbf ++;
};};if _aafbf ==len (_ffbc .Values ){return _ffbc ,nil ;};_ffdg =&Bitmaps {};_ddcfc :=len (_ffbc .Values )==len (_ffbc .Boxes );for _dgbg =0;_dgbg < len (*_cfgg );_dgbg ++{if _edffe =int ((*_cfgg )[_dgbg ]);_edffe ==0{continue ;};_ffdg .Values =append (_ffdg .Values ,_ffbc .Values [_dgbg ]);
if _ddcfc {_ffdg .Boxes =append (_ffdg .Boxes ,_ffbc .Boxes [_dgbg ]);};};return _ffdg ,nil ;};var (_acbd =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_cfec =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);type Boxes []*_fg .Rectangle ;
type ClassedPoints struct{*Points ;_gc .IntSlice ;_fgca func (_agee ,_ccee int )bool ;};func _eddb (_egda ,_egcg *Bitmap ,_ceeb CombinationOperator )*Bitmap {_ccfg :=New (_egda .Width ,_egda .Height );for _eeaf :=0;_eeaf < len (_ccfg .Data );_eeaf ++{_ccfg .Data [_eeaf ]=_egbg (_egda .Data [_eeaf ],_egcg .Data [_eeaf ],_ceeb );
};return _ccfg ;};func _gcca (_eceg *Bitmap ,_cfeae ,_cfaf ,_afdcd ,_bcge int ,_gadg RasterOperator ){if _cfeae < 0{_afdcd +=_cfeae ;_cfeae =0;};_gdd :=_cfeae +_afdcd -_eceg .Width ;if _gdd > 0{_afdcd -=_gdd ;};if _cfaf < 0{_bcge +=_cfaf ;_cfaf =0;};_adfd :=_cfaf +_bcge -_eceg .Height ;
if _adfd > 0{_bcge -=_adfd ;};if _afdcd <=0||_bcge <=0{return ;};if (_cfeae &7)==0{_eafg (_eceg ,_cfeae ,_cfaf ,_afdcd ,_bcge ,_gadg );}else {_accdb (_eceg ,_cfeae ,_cfaf ,_afdcd ,_bcge ,_gadg );};};func _gdf ()(_beb [256]uint32 ){for _gcc :=0;_gcc < 256;
_gcc ++{if _gcc &0x01!=0{_beb [_gcc ]|=0xf;};if _gcc &0x02!=0{_beb [_gcc ]|=0xf0;};if _gcc &0x04!=0{_beb [_gcc ]|=0xf00;};if _gcc &0x08!=0{_beb [_gcc ]|=0xf000;};if _gcc &0x10!=0{_beb [_gcc ]|=0xf0000;};if _gcc &0x20!=0{_beb [_gcc ]|=0xf00000;};if _gcc &0x40!=0{_beb [_gcc ]|=0xf000000;
};if _gcc &0x80!=0{_beb [_gcc ]|=0xf0000000;};};return _beb ;};func _cbfb (_daea ,_ccdba *Bitmap ,_fgaa ,_bbad int )(*Bitmap ,error ){const _dade ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _ccdba ==nil {return nil ,_d .Error (_dade ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fgaa < 1||_bbad < 1{return nil ,_d .Error (_dade ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _fgaa ==1&&_bbad ==1{_eaad ,_bbee :=_defe (_daea ,_ccdba );if _bbee !=nil {return nil ,_d .Wrap (_bbee ,_dade ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _eaad ,nil ;};if _fgaa ==1||_bbad ==1{_decd :=SelCreateBrick (_bbad ,_fgaa ,_bbad /2,_fgaa /2,SelHit );_dbdf ,_ddecc :=_deea (_daea ,_ccdba ,_decd );if _ddecc !=nil {return nil ,_d .Wrap (_ddecc ,_dade ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dbdf ,nil ;};_bgf :=SelCreateBrick (1,_fgaa ,0,_fgaa /2,SelHit );_ddfg :=SelCreateBrick (_bbad ,1,_bbad /2,0,SelHit );_fced ,_dgeg :=_deea (nil ,_ccdba ,_bgf );if _dgeg !=nil {return nil ,_d .Wrap (_dgeg ,_dade ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_daea ,_dgeg =_deea (_daea ,_fced ,_ddfg );if _dgeg !=nil {return nil ,_d .Wrap (_dgeg ,_dade ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _daea ,nil ;};var _ _db .Interface =&ClassedPoints {};type SizeSelection int ;const (PixSrc RasterOperator =0xc;
PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;
PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;
PixMask =PixSrcAndDst ;);func _dfcd (_eacc *Bitmap ,_ebad ,_gec ,_geaga ,_aaffa int ,_ggad RasterOperator ,_acgce *Bitmap ,_eafd ,_bfed int )error {var (_gggf byte ;_gdae int ;_fab int ;_fca ,_gaag int ;_bfeff ,_aefg int ;);_fgdb :=_geaga >>3;_adgf :=_geaga &7;
if _adgf > 0{_gggf =_acbd [_adgf ];};_gdae =_acgce .RowStride *_bfed +(_eafd >>3);_fab =_eacc .RowStride *_gec +(_ebad >>3);switch _ggad {case PixSrc :for _bfeff =0;_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;
for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]=_acgce .Data [_fca ];_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],_acgce .Data [_fca ],_gggf );};};case PixNotSrc :for _bfeff =0;_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;
_gaag =_fab +_bfeff *_eacc .RowStride ;for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]=^(_acgce .Data [_fca ]);_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],^_acgce .Data [_fca ],_gggf );};};case PixSrcOrDst :for _bfeff =0;
_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]|=_acgce .Data [_fca ];_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],_acgce .Data [_fca ]|_eacc .Data [_gaag ],_gggf );
};};case PixSrcAndDst :for _bfeff =0;_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]&=_acgce .Data [_fca ];_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],_acgce .Data [_fca ]&_eacc .Data [_gaag ],_gggf );
};};case PixSrcXorDst :for _bfeff =0;_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]^=_acgce .Data [_fca ];_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],_acgce .Data [_fca ]^_eacc .Data [_gaag ],_gggf );
};};case PixNotSrcOrDst :for _bfeff =0;_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]|=^(_acgce .Data [_fca ]);_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],^(_acgce .Data [_fca ])|_eacc .Data [_gaag ],_gggf );
};};case PixNotSrcAndDst :for _bfeff =0;_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]&=^(_acgce .Data [_fca ]);_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],^(_acgce .Data [_fca ])&_eacc .Data [_gaag ],_gggf );
};};case PixSrcOrNotDst :for _bfeff =0;_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]=_acgce .Data [_fca ]|^(_eacc .Data [_gaag ]);_gaag ++;
_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],_acgce .Data [_fca ]|^(_eacc .Data [_gaag ]),_gggf );};};case PixSrcAndNotDst :for _bfeff =0;_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;
for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]=_acgce .Data [_fca ]&^(_eacc .Data [_gaag ]);_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],_acgce .Data [_fca ]&^(_eacc .Data [_gaag ]),_gggf );};};case PixNotPixSrcOrDst :for _bfeff =0;
_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]=^(_acgce .Data [_fca ]|_eacc .Data [_gaag ]);_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],^(_acgce .Data [_fca ]|_eacc .Data [_gaag ]),_gggf );
};};case PixNotPixSrcAndDst :for _bfeff =0;_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]=^(_acgce .Data [_fca ]&_eacc .Data [_gaag ]);
_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],^(_acgce .Data [_fca ]&_eacc .Data [_gaag ]),_gggf );};};case PixNotPixSrcXorDst :for _bfeff =0;_bfeff < _aaffa ;_bfeff ++{_fca =_gdae +_bfeff *_acgce .RowStride ;_gaag =_fab +_bfeff *_eacc .RowStride ;
for _aefg =0;_aefg < _fgdb ;_aefg ++{_eacc .Data [_gaag ]=^(_acgce .Data [_fca ]^_eacc .Data [_gaag ]);_gaag ++;_fca ++;};if _adgf > 0{_eacc .Data [_gaag ]=_dcbd (_eacc .Data [_gaag ],^(_acgce .Data [_fca ]^_eacc .Data [_gaag ]),_gggf );};};default:_c .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_ggad );
return _d .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _dbbb (_cgd ,_dcbe *Bitmap ,_bbeb int ,_bee []byte ,_bd int )(_gee error ){const _aee ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_gbc ,_ecc ,_cdg ,_abcf ,_fdb ,_dce ,_bde ,_bbg int ;
_gcf ,_fdg uint32 ;_ac ,_fff byte ;_faa uint16 ;);_bda :=make ([]byte ,4);_bac :=make ([]byte ,4);for _cdg =0;_cdg < _cgd .Height -1;_cdg ,_abcf =_cdg +2,_abcf +1{_gbc =_cdg *_cgd .RowStride ;_ecc =_abcf *_dcbe .RowStride ;for _fdb ,_dce =0,0;_fdb < _bd ;
_fdb ,_dce =_fdb +4,_dce +1{for _bde =0;_bde < 4;_bde ++{_bbg =_gbc +_fdb +_bde ;if _bbg <=len (_cgd .Data )-1&&_bbg < _gbc +_cgd .RowStride {_bda [_bde ]=_cgd .Data [_bbg ];}else {_bda [_bde ]=0x00;};_bbg =_gbc +_cgd .RowStride +_fdb +_bde ;if _bbg <=len (_cgd .Data )-1&&_bbg < _gbc +(2*_cgd .RowStride ){_bac [_bde ]=_cgd .Data [_bbg ];
}else {_bac [_bde ]=0x00;};};_gcf =_dbb .BigEndian .Uint32 (_bda );_fdg =_dbb .BigEndian .Uint32 (_bac );_fdg |=_gcf ;_fdg |=_fdg <<1;_fdg &=0xaaaaaaaa;_gcf =_fdg |(_fdg <<7);_ac =byte (_gcf >>24);_fff =byte ((_gcf >>8)&0xff);_bbg =_ecc +_dce ;if _bbg +1==len (_dcbe .Data )-1||_bbg +1>=_ecc +_dcbe .RowStride {_dcbe .Data [_bbg ]=_bee [_ac ];
}else {_faa =(uint16 (_bee [_ac ])<<8)|uint16 (_bee [_fff ]);if _gee =_dcbe .setTwoBytes (_bbg ,_faa );_gee !=nil {return _d .Wrapf (_gee ,_aee ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bbg );
};_dce ++;};};};return nil ;};func (_fccd *BitmapsArray )GetBox (i int )(*_fg .Rectangle ,error ){const _ecce ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _fccd ==nil {return nil ,_d .Error (_ecce ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_fccd .Boxes )-1{return nil ,_d .Errorf (_ecce ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fccd .Boxes [i ],nil ;};func init (){for _acf :=0;
_acf < 256;_acf ++{_ddd [_acf ]=uint8 (_acf &0x1)+(uint8 (_acf >>1)&0x1)+(uint8 (_acf >>2)&0x1)+(uint8 (_acf >>3)&0x1)+(uint8 (_acf >>4)&0x1)+(uint8 (_acf >>5)&0x1)+(uint8 (_acf >>6)&0x1)+(uint8 (_acf >>7)&0x1);};};type MorphProcess struct{Operation MorphOperation ;
Arguments []int ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_abfc *Boxes )Add (box *_fg .Rectangle )error {if _abfc ==nil {return _d .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_abfc =append (*_abfc ,box );return nil ;};func _fbfe (_agfg uint ,_baee byte )byte {return _baee >>_agfg <<_agfg };func (_bebfa *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _gebec (_bebfa ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_bbgc *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _gddf ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _bbgc ==nil {return nil ,_d .Error (_gddf ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_bbgc .Values )-1{return nil ,_d .Errorf (_gddf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bbgc .Values [i ],nil ;};var (_gfg =_aab ();
_ddfa =_gdf ();_bafc =_agbb (););func (_eefb MorphProcess )verify (_gegb int ,_ebcf ,_cgea *int )error {const _ddbc ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _eefb .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_eefb .Arguments )!=2{return _d .Error (_ddbc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_cef ,_agcg :=_eefb .getWidthHeight ();if _cef <=0||_agcg <=0{return _d .Error (_ddbc ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_dfb :=len (_eefb .Arguments );*_ebcf +=_dfb ;if _dfb < 1||_dfb > 4{return _d .Error (_ddbc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _aabf :=0;_aabf < _dfb ;_aabf ++{if _eefb .Arguments [_aabf ]< 1||_eefb .Arguments [_aabf ]> 4{return _d .Error (_ddbc ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_eefb .Arguments )==0{return _d .Error (_ddbc ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ebccg :=_eefb .Arguments [0];if _ebccg !=2&&_ebccg !=4&&_ebccg !=8{return _d .Error (_ddbc ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_ebcf -=_bdbc [_ebccg /4];case MopAddBorder :if len (_eefb .Arguments )==0{return _d .Error (_ddbc ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dae :=_eefb .Arguments [0];if _gegb > 0{return _d .Error (_ddbc ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _dae < 1{return _d .Error (_ddbc ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_cgea =_dae ;};return nil ;};func (_daf *Bitmap )clearAll ()error {return _daf .RasterOperation (0,0,_daf .Width ,_daf .Height ,PixClr ,nil ,0,0);
};func (_bc *Bitmap )GetPixel (x ,y int )bool {_gffd :=_bc .GetByteIndex (x ,y );_bef :=_bc .GetBitOffset (x );_dgc :=uint (7-_bef );if _gffd > len (_bc .Data )-1{_c .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_bc );
return false ;};if (_bc .Data [_gffd ]>>_dgc )&0x01>=1{return true ;};return false ;};func (_ddb *Bitmap )equivalent (_dbec *Bitmap )bool {if _ddb ==_dbec {return true ;};if !_ddb .SizesEqual (_dbec ){return false ;};_dcde :=_eddb (_ddb ,_dbec ,CmbOpXor );
_agc :=_ddb .countPixels ();_ggd :=int (0.25*float32 (_agc ));if _dcde .thresholdPixelSum (_ggd ){return false ;};var (_gga [9][9]int ;_ege [18][9]int ;_fbc [9][18]int ;_cfbd int ;_aebb int ;);_cae :=9;_cbad :=_ddb .Height /_cae ;_deec :=_ddb .Width /_cae ;
_bcaa ,_fcg :=_cbad /2,_deec /2;if _cbad < _deec {_bcaa =_deec /2;_fcg =_cbad /2;};_dgeb :=float64 (_bcaa )*float64 (_fcg )*_fd .Pi ;_dec :=int (float64 (_cbad *_deec /2)*0.9);_aed :=int (float64 (_deec *_cbad /2)*0.9);for _gbce :=0;_gbce < _cae ;_gbce ++{_gfac :=_deec *_gbce +_cfbd ;
var _cff int ;if _gbce ==_cae -1{_cfbd =0;_cff =_ddb .Width ;}else {_cff =_gfac +_deec ;if ((_ddb .Width -_cfbd )%_cae )> 0{_cfbd ++;_cff ++;};};for _abe :=0;_abe < _cae ;_abe ++{_eccf :=_cbad *_abe +_aebb ;var _fea int ;if _abe ==_cae -1{_aebb =0;_fea =_ddb .Height ;
}else {_fea =_eccf +_cbad ;if (_ddb .Height -_aebb )%_cae > 0{_aebb ++;_fea ++;};};var _fccc ,_edc ,_adae ,_aeab int ;_aabe :=(_gfac +_cff )/2;_ccce :=(_eccf +_fea )/2;for _fgcdf :=_gfac ;_fgcdf < _cff ;_fgcdf ++{for _cdf :=_eccf ;_cdf < _fea ;_cdf ++{if _dcde .GetPixel (_fgcdf ,_cdf ){if _fgcdf < _aabe {_fccc ++;
}else {_edc ++;};if _cdf < _ccce {_aeab ++;}else {_adae ++;};};};};_gga [_gbce ][_abe ]=_fccc +_edc ;_ege [_gbce *2][_abe ]=_fccc ;_ege [_gbce *2+1][_abe ]=_edc ;_fbc [_gbce ][_abe *2]=_aeab ;_fbc [_gbce ][_abe *2+1]=_adae ;};};for _fdgc :=0;_fdgc < _cae *2-1;
_fdgc ++{for _egae :=0;_egae < (_cae -1);_egae ++{var _ffbg int ;for _fafb :=0;_fafb < 2;_fafb ++{for _aabd :=0;_aabd < 2;_aabd ++{_ffbg +=_ege [_fdgc +_fafb ][_egae +_aabd ];};};if _ffbg > _aed {return false ;};};};for _dbd :=0;_dbd < (_cae -1);_dbd ++{for _cdfb :=0;
_cdfb < ((_cae *2)-1);_cdfb ++{var _begg int ;for _ccge :=0;_ccge < 2;_ccge ++{for _gbd :=0;_gbd < 2;_gbd ++{_begg +=_fbc [_dbd +_ccge ][_cdfb +_gbd ];};};if _begg > _dec {return false ;};};};for _abgb :=0;_abgb < (_cae -2);_abgb ++{for _gcg :=0;_gcg < (_cae -2);
_gcg ++{var _aag ,_affe int ;for _gbdg :=0;_gbdg < 3;_gbdg ++{for _fef :=0;_fef < 3;_fef ++{if _gbdg ==_fef {_aag +=_gga [_abgb +_gbdg ][_gcg +_fef ];};if (2-_gbdg )==_fef {_affe +=_gga [_abgb +_gbdg ][_gcg +_fef ];};};};if _aag > _aed ||_affe > _aed {return false ;
};};};for _cfgf :=0;_cfgf < (_cae -1);_cfgf ++{for _cbc :=0;_cbc < (_cae -1);_cbc ++{var _edegb int ;for _abba :=0;_abba < 2;_abba ++{for _ceac :=0;_ceac < 2;_ceac ++{_edegb +=_gga [_cfgf +_abba ][_cbc +_ceac ];};};if float64 (_edegb )> _dgeb {return false ;
};};};return true ;};func _gebec (_ffe *Bitmap ,_cgb ,_efbbb ,_acdf ,_afgd int ,_ggdd RasterOperator ,_bgcg *Bitmap ,_bbgaa ,_ecbg int )error {const _geaag ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _ffe ==nil {return _d .Error (_geaag ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _ggdd ==PixDst {return nil ;};switch _ggdd {case PixClr ,PixSet ,PixNotDst :_gcca (_ffe ,_cgb ,_efbbb ,_acdf ,_afgd ,_ggdd );return nil ;};if _bgcg ==nil {_c .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _d .Error (_geaag ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _bgfe :=_edff (_ffe ,_cgb ,_efbbb ,_acdf ,_afgd ,_ggdd ,_bgcg ,_bbgaa ,_ecbg );_bgfe !=nil {return _d .Wrap (_bgfe ,_geaag ,"");};return nil ;
};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);var MorphBC BoundaryCondition ;func TstNSymbol (t *_dg .T ,scale ...int )*Bitmap {_gfbcc ,_cdfgf :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_dd .NoError (t ,_cdfgf );
return TstGetScaledSymbol (t ,_gfbcc ,scale ...);};func (_ebac *Bitmap )SizesEqual (s *Bitmap )bool {if _ebac ==s {return true ;};if _ebac .Width !=s .Width ||_ebac .Height !=s .Height {return false ;};return true ;};func (_deddf *ClassedPoints )SortByY (){_deddf ._fgca =_deddf .ySortFunction ();
_db .Sort (_deddf )};func (_debf *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _fbdae ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_ffffe ,_acbeg :=_debf .selectByIndexes (idx );
if _acbeg !=nil {return nil ,_d .Wrap (_acbeg ,_fbdae ,"");};return _ffffe ,nil ;};func _gceg (_dga ,_ead *Bitmap ,_bbb ,_cdba ,_eceeb ,_gfdd ,_gfb ,_adde ,_afdd ,_effe int ,_cdgb CombinationOperator )error {var _gccc int ;_aaab :=func (){_gccc ++;_eceeb +=_ead .RowStride ;
_gfdd +=_dga .RowStride ;_gfb +=_dga .RowStride };for _gccc =_bbb ;_gccc < _cdba ;_aaab (){var _ccfc uint16 ;_aege :=_eceeb ;for _eegf :=_gfdd ;_eegf <=_gfb ;_eegf ++{_afdde ,_fdgg :=_ead .GetByte (_aege );if _fdgg !=nil {return _fdgg ;};_acgf ,_fdgg :=_dga .GetByte (_eegf );
if _fdgg !=nil {return _fdgg ;};_ccfc =(_ccfc |uint16 (_acgf ))<<uint (_effe );_acgf =byte (_ccfc >>8);if _eegf ==_gfb {_acgf =_fbfe (uint (_adde ),_acgf );};if _fdgg =_ead .SetByte (_aege ,_egbg (_afdde ,_acgf ,_cdgb ));_fdgg !=nil {return _fdgg ;};_aege ++;
_ccfc <<=uint (_afdd );};};return nil ;};func (_adf *Bitmap )setFourBytes (_cga int ,_ecgd uint32 )error {if _cga +3> len (_adf .Data )-1{return _d .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cga );
};_adf .Data [_cga ]=byte ((_ecgd &0xff000000)>>24);_adf .Data [_cga +1]=byte ((_ecgd &0xff0000)>>16);_adf .Data [_cga +2]=byte ((_ecgd &0xff00)>>8);_adf .Data [_cga +3]=byte (_ecgd &0xff);return nil ;};func (_dcge *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_agbf bool ,_fcdd error ){const _fga ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_egegb ();};_gdbf :=_dcge .Width >>3;_eddg :=_dcge .Width &7;_edeg :=byte (0xff<<uint (8-_eddg ));var (_dfcb ,_edb ,_ddc ,_fde int ;_beaa byte ;);for _dfcb =0;_dfcb < _dcge .Height ;_dfcb ++{_ddc =_dcge .RowStride *_dfcb ;for _edb =0;
_edb < _gdbf ;_edb ++{_beaa ,_fcdd =_dcge .GetByte (_ddc +_edb );if _fcdd !=nil {return false ,_d .Wrap (_fcdd ,_fga ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_fde +=tab8 [_beaa ];};if _eddg !=0{_beaa ,_fcdd =_dcge .GetByte (_ddc +_edb );if _fcdd !=nil {return false ,_d .Wrap (_fcdd ,_fga ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_beaa &=_edeg ;_fde +=tab8 [_beaa ];};if _fde > thresh {return true ,nil ;};};return _agbf ,nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func _accdb (_eccc *Bitmap ,_dgde ,_cgee int ,_cgdb ,_ecaf int ,_fbg RasterOperator ){var (_befc bool ;
_gebac bool ;_dgab int ;_gafd int ;_dffg int ;_dcff int ;_cagae bool ;_bfgc byte ;);_eeda :=8-(_dgde &7);_cggeg :=_cfec [_eeda ];_dadf :=_eccc .RowStride *_cgee +(_dgde >>3);if _cgdb < _eeda {_befc =true ;_cggeg &=_acbd [8-_eeda +_cgdb ];};if !_befc {_dgab =(_cgdb -_eeda )>>3;
if _dgab !=0{_gebac =true ;_gafd =_dadf +1;};};_dffg =(_dgde +_cgdb )&7;if !(_befc ||_dffg ==0){_cagae =true ;_bfgc =_acbd [_dffg ];_dcff =_dadf +1+_dgab ;};var _gfba ,_dbcd int ;switch _fbg {case PixClr :for _gfba =0;_gfba < _ecaf ;_gfba ++{_eccc .Data [_dadf ]=_dcbd (_eccc .Data [_dadf ],0x0,_cggeg );
_dadf +=_eccc .RowStride ;};if _gebac {for _gfba =0;_gfba < _ecaf ;_gfba ++{for _dbcd =0;_dbcd < _dgab ;_dbcd ++{_eccc .Data [_gafd +_dbcd ]=0x0;};_gafd +=_eccc .RowStride ;};};if _cagae {for _gfba =0;_gfba < _ecaf ;_gfba ++{_eccc .Data [_dcff ]=_dcbd (_eccc .Data [_dcff ],0x0,_bfgc );
_dcff +=_eccc .RowStride ;};};case PixSet :for _gfba =0;_gfba < _ecaf ;_gfba ++{_eccc .Data [_dadf ]=_dcbd (_eccc .Data [_dadf ],0xff,_cggeg );_dadf +=_eccc .RowStride ;};if _gebac {for _gfba =0;_gfba < _ecaf ;_gfba ++{for _dbcd =0;_dbcd < _dgab ;_dbcd ++{_eccc .Data [_gafd +_dbcd ]=0xff;
};_gafd +=_eccc .RowStride ;};};if _cagae {for _gfba =0;_gfba < _ecaf ;_gfba ++{_eccc .Data [_dcff ]=_dcbd (_eccc .Data [_dcff ],0xff,_bfgc );_dcff +=_eccc .RowStride ;};};case PixNotDst :for _gfba =0;_gfba < _ecaf ;_gfba ++{_eccc .Data [_dadf ]=_dcbd (_eccc .Data [_dadf ],^_eccc .Data [_dadf ],_cggeg );
_dadf +=_eccc .RowStride ;};if _gebac {for _gfba =0;_gfba < _ecaf ;_gfba ++{for _dbcd =0;_dbcd < _dgab ;_dbcd ++{_eccc .Data [_gafd +_dbcd ]=^(_eccc .Data [_gafd +_dbcd ]);};_gafd +=_eccc .RowStride ;};};if _cagae {for _gfba =0;_gfba < _ecaf ;_gfba ++{_eccc .Data [_dcff ]=_dcbd (_eccc .Data [_dcff ],^_eccc .Data [_dcff ],_bfgc );
_dcff +=_eccc .RowStride ;};};};};type CombinationOperator int ;func _cggc (_acd ,_gcgf *Bitmap ,_ade ,_bgc ,_dff ,_beae ,_dabg ,_aeag ,_acdg ,_eag int ,_fcgg CombinationOperator ,_dabb int )error {var _bdege int ;_aaea :=func (){_bdege ++;_dff +=_gcgf .RowStride ;
_beae +=_acd .RowStride ;_dabg +=_acd .RowStride };for _bdege =_ade ;_bdege < _bgc ;_aaea (){var _bffd uint16 ;_cbg :=_dff ;for _bafg :=_beae ;_bafg <=_dabg ;_bafg ++{_eaa ,_ddf :=_gcgf .GetByte (_cbg );if _ddf !=nil {return _ddf ;};_abda ,_ddf :=_acd .GetByte (_bafg );
if _ddf !=nil {return _ddf ;};_bffd =(_bffd |(uint16 (_abda )&0xff))<<uint (_eag );_abda =byte (_bffd >>8);if _ddf =_gcgf .SetByte (_cbg ,_egbg (_eaa ,_abda ,_fcgg ));_ddf !=nil {return _ddf ;};_cbg ++;_bffd <<=uint (_acdg );if _bafg ==_dabg {_abda =byte (_bffd >>(8-uint8 (_eag )));
if _dabb !=0{_abda =_fbfe (uint (8+_aeag ),_abda );};_eaa ,_ddf =_gcgf .GetByte (_cbg );if _ddf !=nil {return _ddf ;};if _ddf =_gcgf .SetByte (_cbg ,_egbg (_eaa ,_abda ,_fcgg ));_ddf !=nil {return _ddf ;};};};};return nil ;};func TstVSymbol (t *_dg .T ,scale ...int )*Bitmap {_efgg ,_abeac :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});
_dd .NoError (t ,_abeac );return TstGetScaledSymbol (t ,_efgg ,scale ...);};func (_cebe *Bitmap )addPadBits ()(_ffb error ){const _fed ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_cfacb :=_cebe .Width %8;
if _cfacb ==0{return nil ;};_ffc :=_cebe .Width /8;_gea :=_a .NewReader (_cebe .Data );_bed :=make ([]byte ,_cebe .Height *_cebe .RowStride );_degf :=_a .NewWriterMSB (_bed );_cec :=make ([]byte ,_ffc );var (_bcc int ;_abg uint64 ;);for _bcc =0;_bcc < _cebe .Height ;
_bcc ++{if _ ,_ffb =_gea .Read (_cec );_ffb !=nil {return _d .Wrap (_ffb ,_fed ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_ffb =_degf .Write (_cec );_ffb !=nil {return _d .Wrap (_ffb ,_fed ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _abg ,_ffb =_gea .ReadBits (byte (_cfacb ));_ffb !=nil {return _d .Wrap (_ffb ,_fed ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _ffb =_degf .WriteByte (byte (_abg )<<uint (8-_cfacb ));_ffb !=nil {return _d .Wrap (_ffb ,_fed ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_cebe .Data =_degf .Data ();return nil ;};func _cgg (_gg *Bitmap ,_fda int )(*Bitmap ,error ){const _ded ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _gg ==nil {return nil ,_d .Error (_ded ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fda ==1{return _defe (nil ,_gg );};if _fda !=2&&_fda !=4&&_fda !=8{return nil ,_d .Error (_ded ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_fc :=_fda *_gg .Width ;_agb :=_fda *_gg .Height ;_dc :=New (_fc ,_agb );var _aea error ;switch _fda {case 2:_aea =_ad (_dc ,_gg );case 4:_aea =_dge (_dc ,_gg );case 8:_aea =_bbd (_dc ,_gg );};if _aea !=nil {return nil ,_d .Wrap (_aea ,_ded ,"");};return _dc ,nil ;
};func _aeee (_affg *Bitmap ,_gcffe int )(*Bitmap ,error ){const _bebf ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _affg ==nil {return nil ,_d .Error (_bebf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gcffe <=0{return nil ,_d .Error (_bebf ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _gcffe ==1{_dfegg ,_ddac :=_defe (nil ,_affg );if _ddac !=nil {return nil ,_d .Wrap (_ddac ,_bebf ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _dfegg ,nil ;};_bgfb ,_bacf :=_bbdc (_affg ,_gcffe ,_gcffe );if _bacf !=nil {return nil ,_d .Wrap (_bacf ,_bebf ,"");};return _bgfb ,nil ;};const (_fbgc shift =iota ;_bgge ;);func (_dcfb *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _dcfb .Copy (),nil ;
};_fbf ,_edgg :=_dcfb .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _edgg !=nil {return nil ,_d .Wrap (_edgg ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _fbf ,nil ;};func (_geb *Bitmap )GetByte (index int )(byte ,error ){if index > len (_geb .Data )-1||index < 0{return 0,_d .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _geb .Data [index ],nil ;};func (_gaa *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _gaa .removeBorderGeneral (left ,right ,top ,bot );};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _fbda ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_dcfg :=_aff (width ,height );_dcfg .Data =data ;if _dcae :=((width *height )+7)>>3;len (data )< _dcae {return nil ,_d .Errorf (_fbda ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_dcae );
};if _fee :=_dcfg .addPadBits ();_fee !=nil {return nil ,_d .Wrap (_fee ,_fbda ,"");};return _dcfg ,nil ;};func TstDSymbol (t *_dg .T ,scale ...int )*Bitmap {_abeb ,_aagf :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_dd .NoError (t ,_aagf );return TstGetScaledSymbol (t ,_abeb ,scale ...);
};func _gebe ()[]int {_ecd :=make ([]int ,256);_ecd [0]=0;_ecd [1]=7;var _aeda int ;for _aeda =2;_aeda < 4;_aeda ++{_ecd [_aeda ]=_ecd [_aeda -2]+6;};for _aeda =4;_aeda < 8;_aeda ++{_ecd [_aeda ]=_ecd [_aeda -4]+5;};for _aeda =8;_aeda < 16;_aeda ++{_ecd [_aeda ]=_ecd [_aeda -8]+4;
};for _aeda =16;_aeda < 32;_aeda ++{_ecd [_aeda ]=_ecd [_aeda -16]+3;};for _aeda =32;_aeda < 64;_aeda ++{_ecd [_aeda ]=_ecd [_aeda -32]+2;};for _aeda =64;_aeda < 128;_aeda ++{_ecd [_aeda ]=_ecd [_aeda -64]+1;};for _aeda =128;_aeda < 256;_aeda ++{_ecd [_aeda ]=_ecd [_aeda -128];
};return _ecd ;};func _cdcf (_dagg ,_eede *Bitmap ,_fedg ,_ebg ,_babd ,_gcgg ,_acg int ,_egb CombinationOperator )error {var _aba int ;_ggde :=func (){_aba ++;_babd +=_eede .RowStride ;_gcgg +=_dagg .RowStride ;_acg +=_dagg .RowStride };for _aba =_fedg ;
_aba < _ebg ;_ggde (){_caed :=_babd ;for _dfca :=_gcgg ;_dfca <=_acg ;_dfca ++{_ddgg ,_eaca :=_eede .GetByte (_caed );if _eaca !=nil {return _eaca ;};_dfef ,_eaca :=_dagg .GetByte (_dfca );if _eaca !=nil {return _eaca ;};if _eaca =_eede .SetByte (_caed ,_egbg (_ddgg ,_dfef ,_egb ));
_eaca !=nil {return _eaca ;};_caed ++;};};return nil ;};func _bbae (_agae ,_bbda *Bitmap ,_bdace ,_cgccf int )(_gabbg error ){const _dafd ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_dcfge ,_cbfba ,_cbeb ,_dfdg int ;
_eacbb ,_ecdb ,_bdfdb ,_dedg ,_fabf ,_fcee ,_fgbf byte ;);for _dcfge =0;_dcfge < _bdace ;_dcfge ++{_cbeb =_dcfge *_agae .RowStride ;_dfdg =_dcfge *_bbda .RowStride ;for _cbfba =0;_cbfba < _cgccf ;_cbfba ++{_eacbb ,_gabbg =_agae .GetByte (_cbeb +_cbfba );
if _gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_ecdb ,_gabbg =_bbda .GetByte (_dfdg +_cbfba );if _gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _dcfge > 0{_bdfdb ,_gabbg =_agae .GetByte (_cbeb -_agae .RowStride +_cbfba );if _gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"\u0069\u0020\u003e \u0030");};_eacbb |=_bdfdb ;};if _cbfba > 0{_dedg ,_gabbg =_agae .GetByte (_cbeb +_cbfba -1);if _gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"\u006a\u0020\u003e \u0030");
};_eacbb |=_dedg <<7;};_eacbb &=_ecdb ;if _eacbb ==0||(^_eacbb )==0{if _gabbg =_agae .SetByte (_cbeb +_cbfba ,_eacbb );_gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_fgbf =_eacbb ;_eacbb =(_eacbb |(_eacbb >>1)|(_eacbb <<1))&_ecdb ;if (_eacbb ^_fgbf )==0{if _gabbg =_agae .SetByte (_cbeb +_cbfba ,_eacbb );_gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _dcfge =_bdace -1;_dcfge >=0;_dcfge --{_cbeb =_dcfge *_agae .RowStride ;_dfdg =_dcfge *_bbda .RowStride ;for _cbfba =_cgccf -1;_cbfba >=0;_cbfba --{if _eacbb ,_gabbg =_agae .GetByte (_cbeb +_cbfba );_gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _ecdb ,_gabbg =_bbda .GetByte (_dfdg +_cbfba );_gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dcfge < _bdace -1{if _fabf ,_gabbg =_agae .GetByte (_cbeb +_agae .RowStride +_cbfba );
_gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_eacbb |=_fabf ;};if _cbfba < _cgccf -1{if _fcee ,_gabbg =_agae .GetByte (_cbeb +_cbfba +1);_gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_eacbb |=_fcee >>7;};_eacbb &=_ecdb ;if _eacbb ==0||(^_eacbb )==0{if _gabbg =_agae .SetByte (_cbeb +_cbfba ,_eacbb );_gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_fgbf =_eacbb ;_eacbb =(_eacbb |(_eacbb >>1)|(_eacbb <<1))&_ecdb ;if (_eacbb ^_fgbf )==0{if _gabbg =_agae .SetByte (_cbeb +_cbfba ,_eacbb );_gabbg !=nil {return _d .Wrap (_gabbg ,_dafd ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_eeafb *Bitmaps )Size ()int {return len (_eeafb .Values )};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _gebec (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _dcbd (_eaac ,_dgfac ,_aaae byte )byte {return (_eaac &^(_aaae ))|(_dgfac &_aaae )};func (_geee *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _badc ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _geee ==nil {return nil ,_d .Error (_badc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_geee .Values )-1{return nil ,_d .Errorf (_badc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _geee .Values [i ],nil ;};func TstESymbol (t *_dg .T ,scale ...int )*Bitmap {_afaa ,_efef :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_dd .NoError (t ,_efef );return TstGetScaledSymbol (t ,_afaa ,scale ...);};func (_cedca *ClassedPoints )ySortFunction ()func (_fbbd int ,_bacc int )bool {return func (_dfeggg ,_fbad int )bool {return _cedca .YAtIndex (_dfeggg )< _cedca .YAtIndex (_fbad )};
};func (_aade *Bitmap )nextOnPixel (_bdeg ,_bad int )(_dgfa _fg .Point ,_ebaa bool ,_bdac error ){const _aeedg ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_dgfa ,_ebaa ,_bdac =_aade .nextOnPixelLow (_aade .Width ,_aade .Height ,_aade .RowStride ,_bdeg ,_bad );
if _bdac !=nil {return _dgfa ,false ,_d .Wrap (_bdac ,_aeedg ,"");};return _dgfa ,_ebaa ,nil ;};func (_dgee *Bitmap )GetByteIndex (x ,y int )int {return y *_dgee .RowStride +(x >>3)};func TstOSymbol (t *_dg .T ,scale ...int )*Bitmap {_gdgd ,_cdbacb :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_dd .NoError (t ,_cdbacb );return TstGetScaledSymbol (t ,_gdgd ,scale ...);};type Point struct{X ,Y float32 ;};type fillSegment struct{_afbg int ;_bcea int ;_geaaa int ;_fge int ;};func _deea (_cdaa ,_gabb *Bitmap ,_caae *Selection )(*Bitmap ,error ){const _gbfa ="\u0065\u0072\u006fd\u0065";
var (_eedc error ;_bdga *Bitmap ;);_cdaa ,_eedc =_fdeb (_cdaa ,_gabb ,_caae ,&_bdga );if _eedc !=nil {return nil ,_d .Wrap (_eedc ,_gbfa ,"");};if _eedc =_cdaa .setAll ();_eedc !=nil {return nil ,_d .Wrap (_eedc ,_gbfa ,"");};var _afb SelectionValue ;for _efbaa :=0;
_efbaa < _caae .Height ;_efbaa ++{for _egfe :=0;_egfe < _caae .Width ;_egfe ++{_afb =_caae .Data [_efbaa ][_egfe ];if _afb ==SelHit {_eedc =_gebec (_cdaa ,_caae .Cx -_egfe ,_caae .Cy -_efbaa ,_gabb .Width ,_gabb .Height ,PixSrcAndDst ,_bdga ,0,0);if _eedc !=nil {return nil ,_d .Wrap (_eedc ,_gbfa ,"");
};};};};if MorphBC ==SymmetricMorphBC {return _cdaa ,nil ;};_ceecb ,_adc ,_bfg ,_ddec :=_caae .findMaxTranslations ();if _ceecb > 0{if _eedc =_cdaa .RasterOperation (0,0,_ceecb ,_gabb .Height ,PixClr ,nil ,0,0);_eedc !=nil {return nil ,_d .Wrap (_eedc ,_gbfa ,"\u0078\u0070\u0020\u003e\u0020\u0030");
};};if _bfg > 0{if _eedc =_cdaa .RasterOperation (_gabb .Width -_bfg ,0,_bfg ,_gabb .Height ,PixClr ,nil ,0,0);_eedc !=nil {return nil ,_d .Wrap (_eedc ,_gbfa ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _adc > 0{if _eedc =_cdaa .RasterOperation (0,0,_gabb .Width ,_adc ,PixClr ,nil ,0,0);
_eedc !=nil {return nil ,_d .Wrap (_eedc ,_gbfa ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _ddec > 0{if _eedc =_cdaa .RasterOperation (0,_gabb .Height -_ddec ,_gabb .Width ,_ddec ,PixClr ,nil ,0,0);_eedc !=nil {return nil ,_d .Wrap (_eedc ,_gbfa ,"\u0079\u006e\u0020\u003e\u0020\u0030");
};};return _cdaa ,nil ;};func (_bebe *byHeight )Swap (i ,j int ){_bebe .Values [i ],_bebe .Values [j ]=_bebe .Values [j ],_bebe .Values [i ];if _bebe .Boxes !=nil {_bebe .Boxes [i ],_bebe .Boxes [j ]=_bebe .Boxes [j ],_bebe .Boxes [i ];};};func (_aadef *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _effgf ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_aadef .Values )==0{return nil ,_d .Error (_effgf ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_caeba :=&BitmapsArray {};_aadef .SortByWidth ();_gbbfa :=-1;_cbag :=-1;for _bdd :=0;_bdd < len (_aadef .Values );
_bdd ++{_gddb :=_aadef .Values [_bdd ].Width ;if _gddb > _gbbfa {_gbbfa =_gddb ;_cbag ++;_caeba .Values =append (_caeba .Values ,&Bitmaps {});};_caeba .Values [_cbag ].AddBitmap (_aadef .Values [_bdd ]);};return _caeba ,nil ;};func _ggbg (_dcfa *Bitmap ,_da int ,_cda []byte )(_ecg *Bitmap ,_fba error ){const _eg ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _dcfa ==nil {return nil ,_d .Error (_eg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _da < 1||_da > 4{return nil ,_d .Error (_eg ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _dcfa .Height <=1{return nil ,_d .Errorf (_eg ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_dcfa .Height );
};_ecg =New (_dcfa .Width /2,_dcfa .Height /2);if _cda ==nil {_cda =_gfd ();};_ee :=_agdf (_dcfa .RowStride ,2*_ecg .RowStride );switch _da {case 1:_fba =_dbbb (_dcfa ,_ecg ,_da ,_cda ,_ee );case 2:_fba =_bea (_dcfa ,_ecg ,_da ,_cda ,_ee );case 3:_fba =_bga (_dcfa ,_ecg ,_da ,_cda ,_ee );
case 4:_fba =_cabb (_dcfa ,_ecg ,_da ,_cda ,_ee );};if _fba !=nil {return nil ,_fba ;};return _ecg ,nil ;};type shift int ;func (_gabc MorphProcess )getWidthHeight ()(_bbed ,_befe int ){return _gabc .Arguments [0],_gabc .Arguments [1];};func (_cecc *Bitmap )clipRectangle (_gfae ,_bdc *_fg .Rectangle )(_cdb *Bitmap ,_aac error ){const _dee ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _gfae ==nil {return nil ,_d .Error (_dee ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_facb ,_efc :=_cecc .Width ,_cecc .Height ;_fad ,_aac :=ClipBoxToRectangle (_gfae ,_facb ,_efc );if _aac !=nil {_c .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_aac );
return nil ,nil ;};_bgd ,_ddg :=_fad .Min .X ,_fad .Min .Y ;_aaff ,_gcdd :=_fad .Max .X -_fad .Min .X ,_fad .Max .Y -_fad .Min .Y ;_cdb =New (_aaff ,_gcdd );_cdb .Text =_cecc .Text ;if _aac =_cdb .RasterOperation (0,0,_aaff ,_gcdd ,PixSrc ,_cecc ,_bgd ,_ddg );
_aac !=nil {return nil ,_d .Wrap (_aac ,_dee ,"");};if _bdc !=nil {*_bdc =*_fad ;};return _cdb ,nil ;};func _cbgg (_afga ...MorphProcess )(_gbbf error ){const _dgce ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _fbaf ,_aead int ;for _cgcc ,_fefc :=range _afga {if _gbbf =_fefc .verify (_cgcc ,&_fbaf ,&_aead );_gbbf !=nil {return _d .Wrap (_gbbf ,_dgce ,"");};};if _aead !=0&&_fbaf !=0{return _d .Error (_dgce ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func (_egfae *Points )Add (pt *Points )error {const _bedg ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _egfae ==nil {return _d .Error (_bedg ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _d .Error (_bedg ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_egfae =append (*_egfae ,*pt ...);return nil ;};func _ad (_gf ,_cf *Bitmap )(_e error ){const _aa ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_cc :=_cf .RowStride ;_gcb :=_gf .RowStride ;var (_ed byte ;_b uint16 ;_bf ,_bg ,_gb ,_ae ,_gff int ;);for _gb =0;_gb < _cf .Height ;_gb ++{_bf =_gb *_cc ;_bg =2*_gb *_gcb ;for _ae =0;_ae < _cc ;_ae ++{_ed =_cf .Data [_bf +_ae ];_b =_gfg [_ed ];_gff =_bg +_ae *2;
if _gf .RowStride !=_cf .RowStride *2&&(_ae +1)*2> _gf .RowStride {_e =_gf .SetByte (_gff ,byte (_b >>8));}else {_e =_gf .setTwoBytes (_gff ,_b );};if _e !=nil {return _d .Wrap (_e ,_aa ,"");};};for _ae =0;_ae < _gcb ;_ae ++{_gff =_bg +_gcb +_ae ;_ed =_gf .Data [_bg +_ae ];
if _e =_gf .SetByte (_gff ,_ed );_e !=nil {return _d .Wrapf (_e ,_aa ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_bg +_ae ,_bg +_gcb +_ae );
};};};return nil ;};func TstAddSymbol (t *_dg .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_ffba :=_fg .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_ffba );*x +=sym .Width +space ;};func (_addbg Points )XSorter ()func (_ceaa ,_fecb int )bool {return func (_adbe ,_dac int )bool {return _addbg [_adbe ].X < _addbg [_dac ].X };
};type Bitmaps struct{Values []*Bitmap ;Boxes []*_fg .Rectangle ;};func _ada (_dgb *Bitmap ,_ccab ...int )(_add *Bitmap ,_ffa error ){const _dgg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _dgb ==nil {return nil ,_d .Error (_dgg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_ccab )==0||len (_ccab )> 4{return nil ,_d .Error (_dgg ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _ccab [0]<=0{_c .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_add ,_ffa =_defe (nil ,_dgb );if _ffa !=nil {return nil ,_d .Wrap (_ffa ,_dgg ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _add ,nil ;};_fcf :=_gfd ();_add =_dgb ;for _fbd ,_dcf :=range _ccab {if _dcf <=0{break ;};_add ,_ffa =_ggbg (_add ,_dcf ,_fcf );if _ffa !=nil {return nil ,_d .Wrapf (_ffa ,_dgg ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_fbd );
};};return _add ,nil ;};func _fffa (_dbgfc *Bitmap ,_edfe ,_eaaf ,_abab ,_gdfe int ,_ggc RasterOperator ,_geeg *Bitmap ,_bdcd ,_cagf int )error {var (_aacb bool ;_bfbf bool ;_fcdde byte ;_geab int ;_fgde int ;_adfcd int ;_ccad int ;_dedf bool ;_efag int ;
_ffcdf int ;_geba int ;_deb bool ;_fege byte ;_bdfdg int ;_eceec int ;_bagd int ;_edaac byte ;_bedd int ;_ccafd int ;_bagdb uint ;_deecb uint ;_aebfa byte ;_agec shift ;_gcbc bool ;_dfdf bool ;_edgc ,_dgbc int ;);if _bdcd &7!=0{_ccafd =8-(_bdcd &7);};if _edfe &7!=0{_fgde =8-(_edfe &7);
};if _ccafd ==0&&_fgde ==0{_aebfa =_cfec [0];}else {if _fgde > _ccafd {_bagdb =uint (_fgde -_ccafd );}else {_bagdb =uint (8-(_ccafd -_fgde ));};_deecb =8-_bagdb ;_aebfa =_cfec [_bagdb ];};if (_edfe &7)!=0{_aacb =true ;_geab =8-(_edfe &7);_fcdde =_cfec [_geab ];
_adfcd =_dbgfc .RowStride *_eaaf +(_edfe >>3);_ccad =_geeg .RowStride *_cagf +(_bdcd >>3);_bedd =8-(_bdcd &7);if _geab > _bedd {_agec =_fbgc ;if _abab >=_ccafd {_gcbc =true ;};}else {_agec =_bgge ;};};if _abab < _geab {_bfbf =true ;_fcdde &=_acbd [8-_geab +_abab ];
};if !_bfbf {_efag =(_abab -_geab )>>3;if _efag !=0{_dedf =true ;_ffcdf =_dbgfc .RowStride *_eaaf +((_edfe +_fgde )>>3);_geba =_geeg .RowStride *_cagf +((_bdcd +_fgde )>>3);};};_bdfdg =(_edfe +_abab )&7;if !(_bfbf ||_bdfdg ==0){_deb =true ;_fege =_acbd [_bdfdg ];
_eceec =_dbgfc .RowStride *_eaaf +((_edfe +_fgde )>>3)+_efag ;_bagd =_geeg .RowStride *_cagf +((_bdcd +_fgde )>>3)+_efag ;if _bdfdg > int (_deecb ){_dfdf =true ;};};switch _ggc {case PixSrc :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;
if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],_edaac ,_fcdde );_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;
_edgc < _gdfe ;_edgc ++{for _dgbc =0;_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]=_edaac ;};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;
};};if _deb {for _edgc =0;_edgc < _gdfe ;_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],_edaac ,_fege );_eceec +=_dbgfc .RowStride ;
_bagd +=_geeg .RowStride ;};};case PixNotSrc :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;
};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],^_edaac ,_fcdde );_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );
_dbgfc .Data [_ffcdf +_dgbc ]=^_edaac ;};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};};if _deb {for _edgc =0;_edgc < _gdfe ;_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );
};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],^_edaac ,_fege );_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;};};case PixSrcOrDst :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );
};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],_edaac |_dbgfc .Data [_adfcd ],_fcdde );_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;
_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]|=_edaac ;};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};};if _deb {for _edgc =0;_edgc < _gdfe ;
_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],_edaac |_dbgfc .Data [_eceec ],_fege );_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;
};};case PixSrcAndDst :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],_edaac &_dbgfc .Data [_adfcd ],_fcdde );
_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]&=_edaac ;
};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};};if _deb {for _edgc =0;_edgc < _gdfe ;_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],_edaac &_dbgfc .Data [_eceec ],_fege );
_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;};};case PixSrcXorDst :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );
};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],_edaac ^_dbgfc .Data [_adfcd ],_fcdde );_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;
_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]^=_edaac ;};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};};if _deb {for _edgc =0;_edgc < _gdfe ;
_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],_edaac ^_dbgfc .Data [_eceec ],_fege );_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;
};};case PixNotSrcOrDst :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],^_edaac |_dbgfc .Data [_adfcd ],_fcdde );
_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]|=^_edaac ;
};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};};if _deb {for _edgc =0;_edgc < _gdfe ;_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],^_edaac |_dbgfc .Data [_eceec ],_fege );
_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;};};case PixNotSrcAndDst :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );
};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],^_edaac &_dbgfc .Data [_adfcd ],_fcdde );_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;
_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]&=^_edaac ;};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};};if _deb {for _edgc =0;_edgc < _gdfe ;
_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],^_edaac &_dbgfc .Data [_eceec ],_fege );_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;
};};case PixSrcOrNotDst :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],_edaac |^_dbgfc .Data [_adfcd ],_fcdde );
_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]=_edaac |^_dbgfc .Data [_ffcdf +_dgbc ];
};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};};if _deb {for _edgc =0;_edgc < _gdfe ;_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],_edaac |^_dbgfc .Data [_eceec ],_fege );
_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;};};case PixSrcAndNotDst :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );
};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],_edaac &^_dbgfc .Data [_adfcd ],_fcdde );_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;
_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]=_edaac &^_dbgfc .Data [_ffcdf +_dgbc ];};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};};
if _deb {for _edgc =0;_edgc < _gdfe ;_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],_edaac &^_dbgfc .Data [_eceec ],_fege );
_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;};};case PixNotPixSrcOrDst :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );
};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],^(_edaac |_dbgfc .Data [_adfcd ]),_fcdde );_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;
_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]=^(_edaac |_dbgfc .Data [_ffcdf +_dgbc ]);};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};
};if _deb {for _edgc =0;_edgc < _gdfe ;_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],^(_edaac |_dbgfc .Data [_eceec ]),_fege );
_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;};};case PixNotPixSrcAndDst :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );
};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],^(_edaac &_dbgfc .Data [_adfcd ]),_fcdde );_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;
_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]=^(_edaac &_dbgfc .Data [_ffcdf +_dgbc ]);};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};
};if _deb {for _edgc =0;_edgc < _gdfe ;_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],^(_edaac &_dbgfc .Data [_eceec ]),_fege );
_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;};};case PixNotPixSrcXorDst :if _aacb {for _edgc =0;_edgc < _gdfe ;_edgc ++{if _agec ==_fbgc {_edaac =_geeg .Data [_ccad ]<<_bagdb ;if _gcbc {_edaac =_dcbd (_edaac ,_geeg .Data [_ccad +1]>>_deecb ,_aebfa );
};}else {_edaac =_geeg .Data [_ccad ]>>_deecb ;};_dbgfc .Data [_adfcd ]=_dcbd (_dbgfc .Data [_adfcd ],^(_edaac ^_dbgfc .Data [_adfcd ]),_fcdde );_adfcd +=_dbgfc .RowStride ;_ccad +=_geeg .RowStride ;};};if _dedf {for _edgc =0;_edgc < _gdfe ;_edgc ++{for _dgbc =0;
_dgbc < _efag ;_dgbc ++{_edaac =_dcbd (_geeg .Data [_geba +_dgbc ]<<_bagdb ,_geeg .Data [_geba +_dgbc +1]>>_deecb ,_aebfa );_dbgfc .Data [_ffcdf +_dgbc ]=^(_edaac ^_dbgfc .Data [_ffcdf +_dgbc ]);};_ffcdf +=_dbgfc .RowStride ;_geba +=_geeg .RowStride ;};
};if _deb {for _edgc =0;_edgc < _gdfe ;_edgc ++{_edaac =_geeg .Data [_bagd ]<<_bagdb ;if _dfdf {_edaac =_dcbd (_edaac ,_geeg .Data [_bagd +1]>>_deecb ,_aebfa );};_dbgfc .Data [_eceec ]=_dcbd (_dbgfc .Data [_eceec ],^(_edaac ^_dbgfc .Data [_eceec ]),_fege );
_eceec +=_dbgfc .RowStride ;_bagd +=_geeg .RowStride ;};};default:_c .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ggc );return _d .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _defe (d ,s )};func _baaa (_dgdcc ,_bgaa int ,_gafb string )*Selection {_bbde :=&Selection {Height :_dgdcc ,Width :_bgaa ,Name :_gafb };_bbde .Data =make ([][]SelectionValue ,_dgdcc );for _ccba :=0;
_ccba < _dgdcc ;_ccba ++{_bbde .Data [_ccba ]=make ([]SelectionValue ,_bgaa );};return _bbde ;};func (_cfee *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_ggg *Bitmaps ,_cbf *Boxes ,_gdee error ){const _eaae ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _cfee ==nil {return nil ,nil ,_d .Error (_eaae ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_d .Error (_eaae ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _cfee .Zero (){_cbf =&Boxes {};_ggg =&Bitmaps {};return _ggg ,_cbf ,nil ;};switch components {case ComponentConn :_ggg =&Bitmaps {};if _cbf ,_gdee =_cfee .ConnComponents (_ggg ,8);_gdee !=nil {return nil ,nil ,_d .Wrap (_gdee ,_eaae ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_eadf ,_aage :=MorphSequence (_cfee ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _aage !=nil {return nil ,nil ,_d .Wrap (_aage ,_eaae ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _c .Log .IsLogLevel (_c .LogLevelTrace ){_c .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_eadf .String ());
};_gffg :=&Bitmaps {};_cbf ,_aage =_eadf .ConnComponents (_gffg ,8);if _aage !=nil {return nil ,nil ,_d .Wrap (_aage ,_eaae ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _c .Log .IsLogLevel (_c .LogLevelTrace ){_c .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_gffg .String ());
};if _ggg ,_aage =_gffg .ClipToBitmap (_cfee );_aage !=nil {return nil ,nil ,_d .Wrap (_aage ,_eaae ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_bdef :=1;
var _bdb *Bitmap ;switch {case _cfee .XResolution <=200:_bdb =_cfee ;case _cfee .XResolution <=400:_bdef =2;_bdb ,_gdee =_ada (_cfee ,1,0,0,0);if _gdee !=nil {return nil ,nil ,_d .Wrap (_gdee ,_eaae ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_bdef =4;_bdb ,_gdee =_ada (_cfee ,1,1,0,0);if _gdee !=nil {return nil ,nil ,_d .Wrap (_gdee ,_eaae ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_ecad ,_ ,_gggc :=_ffd (_bdb );if _gggc !=nil {return nil ,nil ,_d .Wrap (_gggc ,_eaae ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_afad ,_gggc :=_aeee (_ecad ,_bdef );if _gggc !=nil {return nil ,nil ,_d .Wrap (_gggc ,_eaae ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_dcddc :=&Bitmaps {};if _cbf ,_gggc =_afad .ConnComponents (_dcddc ,4);_gggc !=nil {return nil ,nil ,_d .Wrap (_gggc ,_eaae ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _ggg ,_gggc =_dcddc .ClipToBitmap (_cfee );_gggc !=nil {return nil ,nil ,_d .Wrap (_gggc ,_eaae ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_ggg ,_gdee =_ggg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _gdee !=nil {return nil ,nil ,_d .Wrap (_gdee ,_eaae ,"");};_cbf ,_gdee =_cbf .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _gdee !=nil {return nil ,nil ,_d .Wrap (_gdee ,_eaae ,"");};return _ggg ,_cbf ,nil ;};func (_aafg Points )GetIntX (i int )(int ,error ){if i >=len (_aafg ){return 0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_aafg [i ].X ),nil ;};func (_cccc *Bitmap )removeBorderGeneral (_dccg ,_aeea ,_bcb ,_gdc int )(*Bitmap ,error ){const _dcgd ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _dccg < 0||_aeea < 0||_bcb < 0||_gdc < 0{return nil ,_d .Error (_dcgd ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");
};_ecfd ,_ebd :=_cccc .Width ,_cccc .Height ;_fbfd :=_ecfd -_dccg -_aeea ;_becg :=_ebd -_bcb -_gdc ;if _fbfd <=0{return nil ,_d .Errorf (_dcgd ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_fbfd );
};if _becg <=0{return nil ,_d .Errorf (_dcgd ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_becg );};_fceb :=New (_fbfd ,_becg );_fceb .Color =_cccc .Color ;_eeaa :=_fceb .RasterOperation (0,0,_fbfd ,_becg ,PixSrc ,_cccc ,_dccg ,_bcb );
if _eeaa !=nil {return nil ,_d .Wrap (_eeaa ,_dcgd ,"");};return _fceb ,nil ;};func (_ddeec *Bitmap )connComponentsBitmapsBB (_facf *Bitmaps ,_bffa int )(_eaf *Boxes ,_bce error ){const _bedea ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _bffa !=4&&_bffa !=8{return nil ,_d .Error (_bedea ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _facf ==nil {return nil ,_d .Error (_bedea ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_facf .Values )> 0{return nil ,_d .Error (_bedea ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _ddeec .Zero (){return &Boxes {},nil ;
};var (_ddcf ,_adga ,_fdag ,_bbbb *Bitmap ;);_ddeec .setPadBits (0);if _ddcf ,_bce =_defe (nil ,_ddeec );_bce !=nil {return nil ,_d .Wrap (_bce ,_bedea ,"\u0062\u006d\u0031");};if _adga ,_bce =_defe (nil ,_ddeec );_bce !=nil {return nil ,_d .Wrap (_bce ,_bedea ,"\u0062\u006d\u0032");
};_egffb :=&_gc .Stack {};_egffb .Aux =&_gc .Stack {};_eaf =&Boxes {};var (_bfdf ,_defg int ;_febf _fg .Point ;_dgea bool ;_gbceb *_fg .Rectangle ;);for {if _febf ,_dgea ,_bce =_ddcf .nextOnPixel (_bfdf ,_defg );_bce !=nil {return nil ,_d .Wrap (_bce ,_bedea ,"");
};if !_dgea {break ;};if _gbceb ,_bce =_gbbfd (_ddcf ,_egffb ,_febf .X ,_febf .Y ,_bffa );_bce !=nil {return nil ,_d .Wrap (_bce ,_bedea ,"");};if _bce =_eaf .Add (_gbceb );_bce !=nil {return nil ,_d .Wrap (_bce ,_bedea ,"");};if _fdag ,_bce =_ddcf .clipRectangle (_gbceb ,nil );
_bce !=nil {return nil ,_d .Wrap (_bce ,_bedea ,"\u0062\u006d\u0033");};if _bbbb ,_bce =_adga .clipRectangle (_gbceb ,nil );_bce !=nil {return nil ,_d .Wrap (_bce ,_bedea ,"\u0062\u006d\u0034");};if _ ,_bce =_dcbb (_fdag ,_fdag ,_bbbb );_bce !=nil {return nil ,_d .Wrap (_bce ,_bedea ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _bce =_adga .RasterOperation (_gbceb .Min .X ,_gbceb .Min .Y ,_gbceb .Dx (),_gbceb .Dy (),PixSrcXorDst ,_fdag ,0,0);_bce !=nil {return nil ,_d .Wrap (_bce ,_bedea ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_facf .AddBitmap (_fdag );_bfdf =_febf .X ;_defg =_febf .Y ;};_facf .Boxes =*_eaf ;return _eaf ,nil ;};func _agdf (_eeed ,_ebacf int )int {if _eeed < _ebacf {return _eeed ;};return _ebacf ;};func (_eef *Bitmap )setEightBytes (_bege int ,_dfgb uint64 )error {_cfaca :=_eef .RowStride -(_bege %_eef .RowStride );
if _eef .RowStride !=_eef .Width >>3{_cfaca --;};if _cfaca >=8{return _eef .setEightFullBytes (_bege ,_dfgb );};return _eef .setEightPartlyBytes (_bege ,_cfaca ,_dfgb );};func (_aafbb Points )Get (i int )(Point ,error ){if i > len (_aafbb )-1{return Point {},_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _aafbb [i ],nil ;};func (_aae *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _aae .addBorderGeneral (left ,right ,top ,bot ,val );};func _dge (_ce ,_ab *Bitmap )(_af error ){const _cca ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_abc :=_ab .RowStride ;_df :=_ce .RowStride ;_dbg :=_ab .RowStride *4-_ce .RowStride ;var (_edd ,_cfa byte ;_cg uint32 ;_bb ,_eb ,_de ,_cfg ,_ec ,_ef ,_adg int ;);for _de =0;_de < _ab .Height ;_de ++{_bb =_de *_abc ;_eb =4*_de *_df ;for _cfg =0;_cfg < _abc ;
_cfg ++{_edd =_ab .Data [_bb +_cfg ];_cg =_ddfa [_edd ];_ef =_eb +_cfg *4;if _dbg !=0&&(_cfg +1)*4> _ce .RowStride {for _ec =_dbg ;_ec > 0;_ec --{_cfa =byte ((_cg >>uint (_ec *8))&0xff);_adg =_ef +(_dbg -_ec );if _af =_ce .SetByte (_adg ,_cfa );_af !=nil {return _d .Wrapf (_af ,_cca ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ec );
};};}else if _af =_ce .setFourBytes (_ef ,_cg );_af !=nil {return _d .Wrap (_af ,_cca ,"");};if _af =_ce .setFourBytes (_eb +_cfg *4,_ddfa [_ab .Data [_bb +_cfg ]]);_af !=nil {return _d .Wrap (_af ,_cca ,"");};};for _ec =1;_ec < 4;_ec ++{for _cfg =0;_cfg < _df ;
_cfg ++{if _af =_ce .SetByte (_eb +_ec *_df +_cfg ,_ce .Data [_eb +_cfg ]);_af !=nil {return _d .Wrapf (_af ,_cca ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ec ,_cfg );
};};};};return nil ;};func (_ebba *BitmapsArray )AddBox (box *_fg .Rectangle ){_ebba .Boxes =append (_ebba .Boxes ,box )};func MakePixelCentroidTab8 ()[]int {return _gebe ()};func (_dgaa *Bitmaps )SortByHeight (){_adffc :=(*byHeight )(_dgaa );_db .Sort (_adffc )};
type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_fg .Rectangle ;};func (_gfab *Bitmaps )String ()string {_fgfd :=_g .Builder {};for _ ,_ecfa :=range _gfab .Values {_fgfd .WriteString (_ecfa .String ());_fgfd .WriteRune ('\n');};return _fgfd .String ();
};func NewClassedPoints (points *Points ,classes _gc .IntSlice )(*ClassedPoints ,error ){const _gdfb ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_d .Error (_gdfb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if classes ==nil {return nil ,_d .Error (_gdfb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_aeeb :=&ClassedPoints {Points :points ,IntSlice :classes };if _bfdd :=_aeeb .validateIntSlice ();_bfdd !=nil {return nil ,_d .Wrap (_bfdd ,_gdfb ,"");
};return _aeeb ,nil ;};func (_aadb *Bitmap )ToImage ()_fg .Image {_eeg ,_cbd :=_ga .NewImage (_aadb .Width ,_aadb .Height ,1,1,_aadb .Data ,nil ,nil );if _cbd !=nil {_c .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cbd );
};return _eeg ;};func (_bab *Bitmap )CreateTemplate ()*Bitmap {return _bab .createTemplate ()};func _aab ()(_ede [256]uint16 ){for _gda :=0;_gda < 256;_gda ++{if _gda &0x01!=0{_ede [_gda ]|=0x3;};if _gda &0x02!=0{_ede [_gda ]|=0xc;};if _gda &0x04!=0{_ede [_gda ]|=0x30;
};if _gda &0x08!=0{_ede [_gda ]|=0xc0;};if _gda &0x10!=0{_ede [_gda ]|=0x300;};if _gda &0x20!=0{_ede [_gda ]|=0xc00;};if _gda &0x40!=0{_ede [_gda ]|=0x3000;};if _gda &0x80!=0{_ede [_gda ]|=0xc000;};};return _ede ;};func (_fbdg CombinationOperator )String ()string {var _dddgf string ;
switch _fbdg {case CmbOpOr :_dddgf ="\u004f\u0052";case CmbOpAnd :_dddgf ="\u0041\u004e\u0044";case CmbOpXor :_dddgf ="\u0058\u004f\u0052";case CmbOpXNor :_dddgf ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_dddgf ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_dddgf ="\u004e\u004f\u0054";};return _dddgf ;};func (_aega *ClassedPoints )Swap (i ,j int ){_aega .IntSlice [i ],_aega .IntSlice [j ]=_aega .IntSlice [j ],_aega .IntSlice [i ];};func (_gfdcb Points )GetGeometry (i int )(_dfaf ,_fgdc float32 ,_dadeb error ){if i > len (_gfdcb )-1{return 0,0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_cbfaf :=_gfdcb [i ];return _cbfaf .X ,_cbfaf .Y ,nil ;};func _aefd (_cedgb ,_gfaa *Bitmap ,_gbgg ,_fcedc int )(_fdge error ){const _cfde ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_gddc ,_dddb ,_fedb ,_gdg int ;
_bade ,_bfcc ,_acbb ,_cebda ,_accgd ,_eegc ,_decdd ,_fafe byte ;);for _gddc =0;_gddc < _gbgg ;_gddc ++{_fedb =_gddc *_cedgb .RowStride ;_gdg =_gddc *_gfaa .RowStride ;for _dddb =0;_dddb < _fcedc ;_dddb ++{if _bade ,_fdge =_cedgb .GetByte (_fedb +_dddb );
_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _bfcc ,_fdge =_gfaa .GetByte (_gdg +_dddb );_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _gddc > 0{if _acbb ,_fdge =_cedgb .GetByte (_fedb -_cedgb .RowStride +_dddb );_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_bade |=_acbb |(_acbb <<1)|(_acbb >>1);if _dddb > 0{if _fafe ,_fdge =_cedgb .GetByte (_fedb -_cedgb .RowStride +_dddb -1);
_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_bade |=_fafe <<7;};if _dddb < _fcedc -1{if _fafe ,_fdge =_cedgb .GetByte (_fedb -_cedgb .RowStride +_dddb +1);
_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_bade |=_fafe >>7;};};if _dddb > 0{if _cebda ,_fdge =_cedgb .GetByte (_fedb +_dddb -1);_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u006a\u0020\u003e \u0030");
};_bade |=_cebda <<7;};_bade &=_bfcc ;if _bade ==0||^_bade ==0{if _fdge =_cedgb .SetByte (_fedb +_dddb ,_bade );_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};
for {_decdd =_bade ;_bade =(_bade |(_bade >>1)|(_bade <<1))&_bfcc ;if (_bade ^_decdd )==0{if _fdge =_cedgb .SetByte (_fedb +_dddb ,_bade );_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _gddc =_gbgg -1;_gddc >=0;_gddc --{_fedb =_gddc *_cedgb .RowStride ;_gdg =_gddc *_gfaa .RowStride ;for _dddb =_fcedc -1;_dddb >=0;_dddb --{if _bade ,_fdge =_cedgb .GetByte (_fedb +_dddb );_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _bfcc ,_fdge =_gfaa .GetByte (_gdg +_dddb );_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _gddc < _gbgg -1{if _accgd ,_fdge =_cedgb .GetByte (_fedb +_cedgb .RowStride +_dddb );
_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_bade |=_accgd |(_accgd <<1)|_accgd >>1;if _dddb > 0{if _fafe ,_fdge =_cedgb .GetByte (_fedb +_cedgb .RowStride +_dddb -1);
_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_bade |=_fafe <<7;};if _dddb < _fcedc -1{if _fafe ,_fdge =_cedgb .GetByte (_fedb +_cedgb .RowStride +_dddb +1);
_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_bade |=_fafe >>7;};};if _dddb < _fcedc -1{if _eegc ,_fdge =_cedgb .GetByte (_fedb +_dddb +1);_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_bade |=_eegc >>7;};_bade &=_bfcc ;if _bade ==0||(^_bade )==0{if _fdge =_cedgb .SetByte (_fedb +_dddb ,_bade );_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_decdd =_bade ;
_bade =(_bade |(_bade >>1)|(_bade <<1))&_bfcc ;if (_bade ^_decdd )==0{if _fdge =_cedgb .SetByte (_fedb +_dddb ,_bade );_fdge !=nil {return _d .Wrap (_fdge ,_cfde ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func (_fdd *Bitmap )setEightFullBytes (_geaa int ,_cabg uint64 )error {if _geaa +7> len (_fdd .Data )-1{return _d .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fdd .Data [_geaa ]=byte ((_cabg &0xff00000000000000)>>56);_fdd .Data [_geaa +1]=byte ((_cabg &0xff000000000000)>>48);_fdd .Data [_geaa +2]=byte ((_cabg &0xff0000000000)>>40);_fdd .Data [_geaa +3]=byte ((_cabg &0xff00000000)>>32);_fdd .Data [_geaa +4]=byte ((_cabg &0xff000000)>>24);
_fdd .Data [_geaa +5]=byte ((_cabg &0xff0000)>>16);_fdd .Data [_geaa +6]=byte ((_cabg &0xff00)>>8);_fdd .Data [_geaa +7]=byte (_cabg &0xff);return nil ;};func _ffed (_gcab *_gc .Stack ,_ggbb ,_bedeab ,_gaeb ,_faced ,_adea int ,_gcce *_fg .Rectangle )(_facba error ){const _dbfe ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _gcab ==nil {return _d .Error (_dbfe ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _gcce ==nil {return _d .Error (_dbfe ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_gcce .Min .X =_gc .Min (_gcce .Min .X ,_ggbb );_gcce .Max .X =_gc .Max (_gcce .Max .X ,_bedeab );_gcce .Min .Y =_gc .Min (_gcce .Min .Y ,_gaeb );_gcce .Max .Y =_gc .Max (_gcce .Max .Y ,_gaeb );if !(_gaeb +_faced >=0&&_gaeb +_faced <=_adea ){return nil ;
};if _gcab .Aux ==nil {return _d .Error (_dbfe ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _bcbc *fillSegment ;_effge ,_cfgd :=_gcab .Aux .Pop ();if _cfgd {if _bcbc ,_cfgd =_effge .(*fillSegment );
!_cfgd {return _d .Error (_dbfe ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_bcbc =&fillSegment {};
};_bcbc ._afbg =_ggbb ;_bcbc ._bcea =_bedeab ;_bcbc ._geaaa =_gaeb ;_bcbc ._fge =_faced ;_gcab .Push (_bcbc );return nil ;};func (_bdf *Bitmap )GetBitOffset (x int )int {return x &0x07};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;
MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func _eefd (_cabgc ,_aebbf *Bitmap ,_ccea ,_abga ,_dega uint ,_aeba ,_gcda int ,_ceee bool ,_acce ,_cbcb int )error {for _cege :=_aeba ;_cege < _gcda ;_cege ++{if _acce +1< len (_cabgc .Data ){_cbae :=_cege +1==_gcda ;
_fdad ,_edba :=_cabgc .GetByte (_acce );if _edba !=nil {return _edba ;};_acce ++;_fdad <<=_ccea ;_cdce ,_edba :=_cabgc .GetByte (_acce );if _edba !=nil {return _edba ;};_cdce >>=_abga ;_aecg :=_fdad |_cdce ;if _cbae &&!_ceee {_aecg =_fbfe (_dega ,_aecg );
};_edba =_aebbf .SetByte (_cbcb ,_aecg );if _edba !=nil {return _edba ;};_cbcb ++;if _cbae &&_ceee {_cdbac ,_fgdf :=_cabgc .GetByte (_acce );if _fgdf !=nil {return _fgdf ;};_cdbac <<=_ccea ;_aecg =_fbfe (_dega ,_cdbac );if _fgdf =_aebbf .SetByte (_cbcb ,_aecg );
_fgdf !=nil {return _fgdf ;};};continue ;};_gfbb ,_dgdcb :=_cabgc .GetByte (_acce );if _dgdcb !=nil {_c .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_acce ,_dgdcb );
return _dgdcb ;};_gfbb <<=_ccea ;_acce ++;_dgdcb =_aebbf .SetByte (_cbcb ,_gfbb );if _dgdcb !=nil {return _dgdcb ;};_cbcb ++;};return nil ;};func (_bfabc *ClassedPoints )Len ()int {return _bfabc .IntSlice .Size ()};func (_aeed *Bitmap )SetDefaultPixel (){for _ebae :=range _aeed .Data {_aeed .Data [_ebae ]=byte (0xff);
};};type RasterOperator int ;func (_aafb *Bitmap )setBit (_agebe int ){_aafb .Data [(_agebe >>3)]|=0x80>>uint (_agebe &7)};func _decf (_aadec *_gc .Stack )(_edef *fillSegment ,_bega error ){const _fgag ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _aadec ==nil {return nil ,_d .Error (_fgag ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _aadec .Aux ==nil {return nil ,_d .Error (_fgag ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_gcbe ,_edbd :=_aadec .Pop ();if !_edbd {return nil ,nil ;};_abaa ,_edbd :=_gcbe .(*fillSegment );if !_edbd {return nil ,_d .Error (_fgag ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_edef =&fillSegment {_abaa ._afbg ,_abaa ._bcea ,_abaa ._geaaa +_abaa ._fge ,_abaa ._fge };_aadec .Aux .Push (_abaa );return _edef ,nil ;};func _adeb (_aadf ,_dddg *Bitmap ,_aefe ,_eecg int )(*Bitmap ,error ){const _edcc ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _dddg ==nil {return nil ,_d .Error (_edcc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _aefe < 1&&_eecg < 1{return nil ,_d .Error (_edcc ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _aefe ==1&&_eecg ==1{return _dddg .Copy (),nil ;};if _aefe ==1||_eecg ==1{var _degd error ;_fbef :=SelCreateBrick (_eecg ,_aefe ,_eecg /2,_aefe /2,SelHit );_aadf ,_degd =_bbga (_aadf ,_dddg ,_fbef );if _degd !=nil {return nil ,_d .Wrap (_degd ,_edcc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _aadf ,nil ;};_bbea :=SelCreateBrick (1,_aefe ,0,_aefe /2,SelHit );_acef :=SelCreateBrick (_eecg ,1,_eecg /2,0,SelHit );_baefa ,_aefa :=_deea (nil ,_dddg ,_bbea );if _aefa !=nil {return nil ,_d .Wrap (_aefa ,_edcc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_aadf ,_aefa =_deea (_aadf ,_baefa ,_acef );if _aefa !=nil {return nil ,_d .Wrap (_aefa ,_edcc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_aefa =_bacd (_baefa ,_aadf ,_bbea );if _aefa !=nil {return nil ,_d .Wrap (_aefa ,_edcc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_aefa =_bacd (_aadf ,_baefa ,_acef );if _aefa !=nil {return nil ,_d .Wrap (_aefa ,_edcc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _aadf ,nil ;};func (_dcd *Bitmap )GetUnpaddedData ()([]byte ,error ){_ccbb :=uint (_dcd .Width &0x07);
if _ccbb ==0{return _dcd .Data ,nil ;};_aebf :=_dcd .Width *_dcd .Height ;if _aebf %8!=0{_aebf >>=3;_aebf ++;}else {_aebf >>=3;};_fce :=make ([]byte ,_aebf );_ceec :=_a .NewWriterMSB (_fce );const _bca ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
for _dfce :=0;_dfce < _dcd .Height ;_dfce ++{for _fdc :=0;_fdc < _dcd .RowStride ;_fdc ++{_aeg :=_dcd .Data [_dfce *_dcd .RowStride +_fdc ];if _fdc !=_dcd .RowStride -1{_eea :=_ceec .WriteByte (_aeg );if _eea !=nil {return nil ,_d .Wrap (_eea ,_bca ,"");
};continue ;};for _eead :=uint (0);_eead < _ccbb ;_eead ++{_baab :=_ceec .WriteBit (int (_aeg >>(7-_eead )&0x01));if _baab !=nil {return nil ,_d .Wrap (_baab ,_bca ,"");};};};};return _fce ,nil ;};func TstWSymbol (t *_dg .T ,scale ...int )*Bitmap {_aeada ,_bbgb :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_dd .NoError (t ,_bbgb );return TstGetScaledSymbol (t ,_aeada ,scale ...);};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_dbfc float64 ,_edac error ){const _geea ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _dbfc ,_d .Error (_geea ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _dbfc ,_d .Error (_geea ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _dbfc ,_d .Error (_geea ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_dccgd ,_bdff :=bm1 .Width ,bm1 .Height ;_defa ,_daacg :=bm2 .Width ,bm2 .Height ;
if _bdaeb (_dccgd -_defa )> maxDiffW {return 0,nil ;};if _bdaeb (_bdff -_daacg )> maxDiffH {return 0,nil ;};var _ffbda ,_cdbe int ;if delX >=0{_ffbda =int (delX +0.5);}else {_ffbda =int (delX -0.5);};if delY >=0{_cdbe =int (delY +0.5);}else {_cdbe =int (delY -0.5);
};_baeec :=bm1 .createTemplate ();if _edac =_baeec .RasterOperation (_ffbda ,_cdbe ,_defa ,_daacg ,PixSrc ,bm2 ,0,0);_edac !=nil {return _dbfc ,_d .Wrap (_edac ,_geea ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};if _edac =_baeec .RasterOperation (0,0,_dccgd ,_bdff ,PixSrcAndDst ,bm1 ,0,0);_edac !=nil {return _dbfc ,_d .Wrap (_edac ,_geea ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_cffg :=_baeec .countPixels ();_dbfc =float64 (_cffg )*float64 (_cffg )/(float64 (area1 )*float64 (area2 ));
return _dbfc ,nil ;};func TstFrameBitmap ()*Bitmap {return _febag .Copy ()};type Getter interface{GetBitmap ()*Bitmap ;};func _efa (_gab *Bitmap ,_ceg *Bitmap ,_ccb int )(_cge error ){const _deg ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _ccb {case 2:_cge =_ad (_gab ,_ceg );case 4:_cge =_dge (_gab ,_ceg );case 8:_cge =_bbd (_gab ,_ceg );default:return _d .Error (_deg ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _cge !=nil {_cge =_d .Wrap (_cge ,_deg ,"");};return _cge ;};func TstRSymbol (t *_dg .T ,scale ...int )*Bitmap {_dgebd ,_cecae :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_dd .NoError (t ,_cecae );return TstGetScaledSymbol (t ,_dgebd ,scale ...);
};func (_fdbb *Bitmap )countPixels ()int {var (_gfaea int ;_gebf uint8 ;_gag byte ;_fafc int ;);_edbb :=_fdbb .RowStride ;_dccf :=uint (_fdbb .Width &0x07);if _dccf !=0{_gebf =uint8 ((0xff<<(8-_dccf ))&0xff);_edbb --;};for _eegg :=0;_eegg < _fdbb .Height ;
_eegg ++{for _fafc =0;_fafc < _edbb ;_fafc ++{_gag =_fdbb .Data [_eegg *_fdbb .RowStride +_fafc ];_gfaea +=int (_ddd [_gag ]);};if _dccf !=0{_gfaea +=int (_ddd [_fdbb .Data [_eegg *_fdbb .RowStride +_fafc ]&_gebf ]);};};return _gfaea ;};func _egegb ()[]int {_fec :=make ([]int ,256);
for _dgbbf :=0;_dgbbf <=0xff;_dgbbf ++{_beab :=byte (_dgbbf );_fec [_beab ]=int (_beab &0x1)+(int (_beab >>1)&0x1)+(int (_beab >>2)&0x1)+(int (_beab >>3)&0x1)+(int (_beab >>4)&0x1)+(int (_beab >>5)&0x1)+(int (_beab >>6)&0x1)+(int (_beab >>7)&0x1);};return _fec ;
};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _ebgb ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_edaa ,_gaga :=p1 .Width ,p1 .Height ;_dggc ,_gade :=p3 .Width ,p3 .Height ;if _gc .Abs (_edaa -_dggc )> maxDiffW {return false ,nil ;
};if _gc .Abs (_gaga -_gade )> maxDiffH {return false ,nil ;};_gfbc :=int (delX +_gc .Sign (delX )*0.5);_ebaec :=int (delY +_gc .Sign (delY )*0.5);var _badd error ;_bbff :=p1 .CreateTemplate ();if _badd =_bbff .RasterOperation (0,0,_edaa ,_gaga ,PixSrc ,p1 ,0,0);
_badd !=nil {return false ,_d .Wrap (_badd ,_ebgb ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _badd =_bbff .RasterOperation (_gfbc ,_ebaec ,_edaa ,_gaga ,PixNotSrcAndDst ,p4 ,0,0);_badd !=nil {return false ,_d .Wrap (_badd ,_ebgb ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _bbff .Zero (){return false ,nil ;};if _badd =_bbff .RasterOperation (_gfbc ,_ebaec ,_dggc ,_gade ,PixSrc ,p3 ,0,0);_badd !=nil {return false ,_d .Wrap (_badd ,_ebgb ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _badd =_bbff .RasterOperation (0,0,_dggc ,_gade ,PixNotSrcAndDst ,p2 ,0,0);
_badd !=nil {return false ,_d .Wrap (_badd ,_ebgb ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _bbff .Zero (),nil ;};func (_fdagc *byWidth )Swap (i ,j int ){_fdagc .Values [i ],_fdagc .Values [j ]=_fdagc .Values [j ],_fdagc .Values [i ];if _fdagc .Boxes !=nil {_fdagc .Boxes [i ],_fdagc .Boxes [j ]=_fdagc .Boxes [j ],_fdagc .Boxes [i ];
};};func _bbd (_ea ,_dfa *Bitmap )(_gd error ){const _fa ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_bbe :=_dfa .RowStride ;_ge :=_ea .RowStride ;var _ccaa ,_ag ,_cd ,_gad ,_eac int ;for _cd =0;
_cd < _dfa .Height ;_cd ++{_ccaa =_cd *_bbe ;_ag =8*_cd *_ge ;for _gad =0;_gad < _bbe ;_gad ++{if _gd =_ea .setEightBytes (_ag +_gad *8,_bafc [_dfa .Data [_ccaa +_gad ]]);_gd !=nil {return _d .Wrap (_gd ,_fa ,"");};};for _eac =1;_eac < 8;_eac ++{for _gad =0;
_gad < _ge ;_gad ++{if _gd =_ea .SetByte (_ag +_eac *_ge +_gad ,_ea .Data [_ag +_gad ]);_gd !=nil {return _d .Wrap (_gd ,_fa ,"");};};};};return nil ;};func (_bdfd *ClassedPoints )validateIntSlice ()error {const _cbfe ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_ecgde :=range _bdfd .IntSlice {if _ecgde >=(_bdfd .Points .Size ()){return _d .Errorf (_cbfe ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_ecgde ,_bdfd .Points .Size ());
};};return nil ;};func (_bdcf *Bitmap )resizeImageData (_dbff *Bitmap )error {if _dbff ==nil {return _d .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bdcf .SizesEqual (_dbff ){return nil ;};_bdcf .Data =make ([]byte ,len (_dbff .Data ));_bdcf .Width =_dbff .Width ;_bdcf .Height =_dbff .Height ;_bdcf .RowStride =_dbff .RowStride ;return nil ;};func (_deaa *Bitmaps )CountPixels ()*_gc .NumSlice {_bgef :=&_gc .NumSlice {};
for _ ,_cgcb :=range _deaa .Values {_bgef .AddInt (_cgcb .CountPixels ());};return _bgef ;};func _fbdea (_acgb *Bitmap ,_gbbc *Bitmap ,_aace int )(_geff error ){const _aacg ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_agbd :=_agdf (_acgb .Height ,_gbbc .Height );_cbfag :=_agdf (_acgb .RowStride ,_gbbc .RowStride );switch _aace {case 4:_geff =_bbae (_acgb ,_gbbc ,_agbd ,_cbfag );case 8:_geff =_aefd (_acgb ,_gbbc ,_agbd ,_cbfag );default:return _d .Errorf (_aacg ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_aace );
};if _geff !=nil {return _d .Wrap (_geff ,_aacg ,"");};return nil ;};func (_dacb *Bitmaps )selectByIndexes (_bdfg []int )(*Bitmaps ,error ){_ffcf :=&Bitmaps {};for _ ,_bceea :=range _bdfg {_cede ,_baegc :=_dacb .GetBitmap (_bceea );if _baegc !=nil {return nil ,_d .Wrap (_baegc ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_ffcf .AddBitmap (_cede );};return _ffcf ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_egcgb float64 ,_dbc error ){const _ebcc ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_d .Error (_ebcc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_d .Error (_ebcc ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_d .Error (_ebcc ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_bbgdb ,_geec :=bm1 .Width ,bm1 .Height ;_cfd ,_acdd :=bm2 .Width ,bm2 .Height ;
_bacgf :=_bdaeb (_bbgdb -_cfd );if _bacgf > maxDiffW {return 0,nil ;};_aca :=_bdaeb (_geec -_acdd );if _aca > maxDiffH {return 0,nil ;};var _dceg ,_effc int ;if delX >=0{_dceg =int (delX +0.5);}else {_dceg =int (delX -0.5);};if delY >=0{_effc =int (delY +0.5);
}else {_effc =int (delY -0.5);};_bfef :=_eacge (_effc ,0);_bdbe :=_agdf (_acdd +_effc ,_geec );_bffc :=bm1 .RowStride *_bfef ;_cafb :=bm2 .RowStride *(_bfef -_effc );_egeg :=_eacge (_dceg ,0);_ddbd :=_agdf (_cfd +_dceg ,_bbgdb );_dfeg :=bm2 .RowStride ;
var _bacb ,_badg int ;if _dceg >=8{_bacb =_dceg >>3;_bffc +=_bacb ;_egeg -=_bacb <<3;_ddbd -=_bacb <<3;_dceg &=7;}else if _dceg <=-8{_badg =-((_dceg +7)>>3);_cafb +=_badg ;_dfeg -=_badg ;_dceg +=_badg <<3;};if _egeg >=_ddbd ||_bfef >=_bdbe {return 0,nil ;
};_fcfd :=(_ddbd +7)>>3;var (_ecec ,_gaff ,_gebd byte ;_fag ,_efgf ,_gega int ;);switch {case _dceg ==0:for _gega =_bfef ;_gega < _bdbe ;_gega ,_bffc ,_cafb =_gega +1,_bffc +bm1 .RowStride ,_cafb +bm2 .RowStride {for _efgf =0;_efgf < _fcfd ;_efgf ++{_gebd =bm1 .Data [_bffc +_efgf ]&bm2 .Data [_cafb +_efgf ];
_fag +=tab [_gebd ];};};case _dceg > 0:if _dfeg < _fcfd {for _gega =_bfef ;_gega < _bdbe ;_gega ,_bffc ,_cafb =_gega +1,_bffc +bm1 .RowStride ,_cafb +bm2 .RowStride {_ecec ,_gaff =bm1 .Data [_bffc ],bm2 .Data [_cafb ]>>uint (_dceg );_gebd =_ecec &_gaff ;
_fag +=tab [_gebd ];for _efgf =1;_efgf < _dfeg ;_efgf ++{_ecec ,_gaff =bm1 .Data [_bffc +_efgf ],(bm2 .Data [_cafb +_efgf ]>>uint (_dceg ))|(bm2 .Data [_cafb +_efgf -1]<<uint (8-_dceg ));_gebd =_ecec &_gaff ;_fag +=tab [_gebd ];};_ecec =bm1 .Data [_bffc +_efgf ];
_gaff =bm2 .Data [_cafb +_efgf -1]<<uint (8-_dceg );_gebd =_ecec &_gaff ;_fag +=tab [_gebd ];};}else {for _gega =_bfef ;_gega < _bdbe ;_gega ,_bffc ,_cafb =_gega +1,_bffc +bm1 .RowStride ,_cafb +bm2 .RowStride {_ecec ,_gaff =bm1 .Data [_bffc ],bm2 .Data [_cafb ]>>uint (_dceg );
_gebd =_ecec &_gaff ;_fag +=tab [_gebd ];for _efgf =1;_efgf < _fcfd ;_efgf ++{_ecec =bm1 .Data [_bffc +_efgf ];_gaff =(bm2 .Data [_cafb +_efgf ]>>uint (_dceg ))|(bm2 .Data [_cafb +_efgf -1]<<uint (8-_dceg ));_gebd =_ecec &_gaff ;_fag +=tab [_gebd ];};};
};default:if _fcfd < _dfeg {for _gega =_bfef ;_gega < _bdbe ;_gega ,_bffc ,_cafb =_gega +1,_bffc +bm1 .RowStride ,_cafb +bm2 .RowStride {for _efgf =0;_efgf < _fcfd ;_efgf ++{_ecec =bm1 .Data [_bffc +_efgf ];_gaff =bm2 .Data [_cafb +_efgf ]<<uint (-_dceg );
_gaff |=bm2 .Data [_cafb +_efgf +1]>>uint (8+_dceg );_gebd =_ecec &_gaff ;_fag +=tab [_gebd ];};};}else {for _gega =_bfef ;_gega < _bdbe ;_gega ,_bffc ,_cafb =_gega +1,_bffc +bm1 .RowStride ,_cafb +bm2 .RowStride {for _efgf =0;_efgf < _fcfd -1;_efgf ++{_ecec =bm1 .Data [_bffc +_efgf ];
_gaff =bm2 .Data [_cafb +_efgf ]<<uint (-_dceg );_gaff |=bm2 .Data [_cafb +_efgf +1]>>uint (8+_dceg );_gebd =_ecec &_gaff ;_fag +=tab [_gebd ];};_ecec =bm1 .Data [_bffc +_efgf ];_gaff =bm2 .Data [_cafb +_efgf ]<<uint (-_dceg );_gebd =_ecec &_gaff ;_fag +=tab [_gebd ];
};};};_egcgb =float64 (_fag )*float64 (_fag )/(float64 (area1 )*float64 (area2 ));return _egcgb ,nil ;};var (_febag *Bitmap ;_daacb *Bitmap ;);func _bdaeb (_baaf int )int {if _baaf < 0{return -_baaf ;};return _baaf ;};func _ddeb (_gbaa ,_agdg *Bitmap ,_efba ,_dea int )(*Bitmap ,error ){const _dead ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _agdg ==nil {return nil ,_d .Error (_dead ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _efba < 1||_dea < 1{return nil ,_d .Error (_dead ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _efba ==1&&_dea ==1{return _agdg .Copy (),nil ;};if _efba ==1||_dea ==1{_cgdeb :=SelCreateBrick (_dea ,_efba ,_dea /2,_efba /2,SelHit );var _gbef error ;_gbaa ,_gbef =_caab (_gbaa ,_agdg ,_cgdeb );if _gbef !=nil {return nil ,_d .Wrap (_gbef ,_dead ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gbaa ,nil ;};_bdfb :=SelCreateBrick (1,_efba ,0,_efba /2,SelHit );_feda :=SelCreateBrick (_dea ,1,_dea /2,0,SelHit );_bced ,_cceb :=_bacd (nil ,_agdg ,_bdfb );if _cceb !=nil {return nil ,_d .Wrap (_cceb ,_dead ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _gbaa ,_cceb =_bacd (_gbaa ,_bced ,_feda );_cceb !=nil {return nil ,_d .Wrap (_cceb ,_dead ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_cceb =_deea (_bced ,_gbaa ,_bdfb );_cceb !=nil {return nil ,_d .Wrap (_cceb ,_dead ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_cceb =_deea (_gbaa ,_bced ,_feda );_cceb !=nil {return nil ,_d .Wrap (_cceb ,_dead ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _gbaa ,nil ;};func (_cce *Bitmap )addBorderGeneral (_gbcf ,_eacb ,_abcd ,_efb int ,_abf int )(*Bitmap ,error ){const _cfe ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _gbcf < 0||_eacb < 0||_abcd < 0||_efb < 0{return nil ,_d .Error (_cfe ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_gced ,_baeg :=_cce .Width ,_cce .Height ;_cba :=_gced +_gbcf +_eacb ;_efgc :=_baeg +_abcd +_efb ;
_cgef :=New (_cba ,_efgc );_cgef .Color =_cce .Color ;_cfac :=PixClr ;if _abf > 0{_cfac =PixSet ;};_afa :=_cgef .RasterOperation (0,0,_gbcf ,_efgc ,_cfac ,nil ,0,0);if _afa !=nil {return nil ,_d .Wrap (_afa ,_cfe ,"\u006c\u0065\u0066\u0074");};_afa =_cgef .RasterOperation (_cba -_eacb ,0,_eacb ,_efgc ,_cfac ,nil ,0,0);
if _afa !=nil {return nil ,_d .Wrap (_afa ,_cfe ,"\u0072\u0069\u0067h\u0074");};_afa =_cgef .RasterOperation (0,0,_cba ,_abcd ,_cfac ,nil ,0,0);if _afa !=nil {return nil ,_d .Wrap (_afa ,_cfe ,"\u0074\u006f\u0070");};_afa =_cgef .RasterOperation (0,_efgc -_efb ,_cba ,_efb ,_cfac ,nil ,0,0);
if _afa !=nil {return nil ,_d .Wrap (_afa ,_cfe ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_afa =_cgef .RasterOperation (_gbcf ,_abcd ,_gced ,_baeg ,PixSrc ,_cce ,0,0);if _afa !=nil {return nil ,_d .Wrap (_afa ,_cfe ,"\u0063\u006f\u0070\u0079");};return _cgef ,nil ;
};func (_faceg *Bitmaps )makeSizeIndicator (_fdfb ,_febe int ,_aded LocationFilter ,_gbed SizeComparison )(_gbab *_gc .NumSlice ,_bddg error ){const _gbfe ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _faceg ==nil {return nil ,_d .Error (_gbfe ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _aded {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_gbfe ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_aded );
};switch _gbed {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_d .Errorf (_gbfe ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_gbed );
};_gbab =&_gc .NumSlice {};var (_ggcc ,_adfae ,_gbcee int ;_fbec *Bitmap ;);for _ ,_fbec =range _faceg .Values {_ggcc =0;_adfae ,_gbcee =_fbec .Width ,_fbec .Height ;switch _aded {case LocSelectWidth :if (_gbed ==SizeSelectIfLT &&_adfae < _fdfb )||(_gbed ==SizeSelectIfGT &&_adfae > _fdfb )||(_gbed ==SizeSelectIfLTE &&_adfae <=_fdfb )||(_gbed ==SizeSelectIfGTE &&_adfae >=_fdfb )||(_gbed ==SizeSelectIfEQ &&_adfae ==_fdfb ){_ggcc =1;
};case LocSelectHeight :if (_gbed ==SizeSelectIfLT &&_gbcee < _febe )||(_gbed ==SizeSelectIfGT &&_gbcee > _febe )||(_gbed ==SizeSelectIfLTE &&_gbcee <=_febe )||(_gbed ==SizeSelectIfGTE &&_gbcee >=_febe )||(_gbed ==SizeSelectIfEQ &&_gbcee ==_febe ){_ggcc =1;
};case LocSelectIfEither :if (_gbed ==SizeSelectIfLT &&(_adfae < _fdfb ||_gbcee < _febe ))||(_gbed ==SizeSelectIfGT &&(_adfae > _fdfb ||_gbcee > _febe ))||(_gbed ==SizeSelectIfLTE &&(_adfae <=_fdfb ||_gbcee <=_febe ))||(_gbed ==SizeSelectIfGTE &&(_adfae >=_fdfb ||_gbcee >=_febe ))||(_gbed ==SizeSelectIfEQ &&(_adfae ==_fdfb ||_gbcee ==_febe )){_ggcc =1;
};case LocSelectIfBoth :if (_gbed ==SizeSelectIfLT &&(_adfae < _fdfb &&_gbcee < _febe ))||(_gbed ==SizeSelectIfGT &&(_adfae > _fdfb &&_gbcee > _febe ))||(_gbed ==SizeSelectIfLTE &&(_adfae <=_fdfb &&_gbcee <=_febe ))||(_gbed ==SizeSelectIfGTE &&(_adfae >=_fdfb &&_gbcee >=_febe ))||(_gbed ==SizeSelectIfEQ &&(_adfae ==_fdfb &&_gbcee ==_febe )){_ggcc =1;
};};_gbab .AddInt (_ggcc );};return _gbab ,nil ;};func _bbga (_fgg ,_caaec *Bitmap ,_baefbf *Selection )(*Bitmap ,error ){const _eeb ="\u006f\u0070\u0065\u006e";var _cegdc error ;_fgg ,_cegdc =_cfbb (_fgg ,_caaec ,_baefbf );if _cegdc !=nil {return nil ,_d .Wrap (_cegdc ,_eeb ,"");
};_gbgf ,_cegdc :=_deea (nil ,_caaec ,_baefbf );if _cegdc !=nil {return nil ,_d .Wrap (_cegdc ,_eeb ,"");};_ ,_cegdc =_bacd (_fgg ,_gbgf ,_baefbf );if _cegdc !=nil {return nil ,_d .Wrap (_cegdc ,_eeb ,"");};return _fgg ,nil ;};func (_befa *Bitmap )inverseData (){if _ageb :=_befa .RasterOperation (0,0,_befa .Width ,_befa .Height ,PixNotDst ,nil ,0,0);
_ageb !=nil {_c .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ageb );};if _befa .Color ==Chocolate {_befa .Color =Vanilla ;}else {_befa .Color =Chocolate ;};};func _bacd (_afee *Bitmap ,_ffda *Bitmap ,_dbgc *Selection )(*Bitmap ,error ){var (_abcb *Bitmap ;
_geagd error ;);_afee ,_geagd =_fdeb (_afee ,_ffda ,_dbgc ,&_abcb );if _geagd !=nil {return nil ,_geagd ;};if _geagd =_afee .clearAll ();_geagd !=nil {return nil ,_geagd ;};var _ddad SelectionValue ;for _fbdf :=0;_fbdf < _dbgc .Height ;_fbdf ++{for _agcge :=0;
_agcge < _dbgc .Width ;_agcge ++{_ddad =_dbgc .Data [_fbdf ][_agcge ];if _ddad ==SelHit {if _geagd =_afee .RasterOperation (_agcge -_dbgc .Cx ,_fbdf -_dbgc .Cy ,_ffda .Width ,_ffda .Height ,PixSrcOrDst ,_abcb ,0,0);_geagd !=nil {return nil ,_geagd ;};};
};};return _afee ,nil ;};func _edff (_fbbdc *Bitmap ,_bgbb ,_fded int ,_baea ,_gbced int ,_agadf RasterOperator ,_bbfb *Bitmap ,_dcca ,_eagc int )error {var _agfd ,_cbada ,_ebcg ,_bebd int ;if _bgbb < 0{_dcca -=_bgbb ;_baea +=_bgbb ;_bgbb =0;};if _dcca < 0{_bgbb -=_dcca ;
_baea +=_dcca ;_dcca =0;};_agfd =_bgbb +_baea -_fbbdc .Width ;if _agfd > 0{_baea -=_agfd ;};_cbada =_dcca +_baea -_bbfb .Width ;if _cbada > 0{_baea -=_cbada ;};if _fded < 0{_eagc -=_fded ;_gbced +=_fded ;_fded =0;};if _eagc < 0{_fded -=_eagc ;_gbced +=_eagc ;
_eagc =0;};_ebcg =_fded +_gbced -_fbbdc .Height ;if _ebcg > 0{_gbced -=_ebcg ;};_bebd =_eagc +_gbced -_bbfb .Height ;if _bebd > 0{_gbced -=_bebd ;};if _baea <=0||_gbced <=0{return nil ;};var _cadf error ;switch {case _bgbb &7==0&&_dcca &7==0:_cadf =_dfcd (_fbbdc ,_bgbb ,_fded ,_baea ,_gbced ,_agadf ,_bbfb ,_dcca ,_eagc );
case _bgbb &7==_dcca &7:_cadf =_ecgdg (_fbbdc ,_bgbb ,_fded ,_baea ,_gbced ,_agadf ,_bbfb ,_dcca ,_eagc );default:_cadf =_fffa (_fbbdc ,_bgbb ,_fded ,_baea ,_gbced ,_agadf ,_bbfb ,_dcca ,_eagc );};if _cadf !=nil {return _d .Wrap (_cadf ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func (_ffgf *BitmapsArray )AddBitmaps (bm *Bitmaps ){_ffgf .Values =append (_ffgf .Values ,bm )};func (_cegc *ClassedPoints )Less (i ,j int )bool {return _cegc ._fgca (i ,j )};func (_edf *Bitmap )setEightPartlyBytes (_caga ,_dgbb int ,_cgc uint64 )(_bdcfb error ){var (_edegd byte ;
_gaba int ;);const _gead ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _bcd :=1;_bcd <=_dgbb ;_bcd ++{_gaba =64-_bcd *8;_edegd =byte (_cgc >>uint (_gaba )&0xff);_c .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_edegd ,_caga ,_caga +_bcd -1,_dgbb ,_gaba );
if _bdcfb =_edf .SetByte (_caga +_bcd -1,_edegd );_bdcfb !=nil {return _d .Wrap (_bdcfb ,_gead ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_afeb :=_edf .RowStride *8-_edf .Width ;if _afeb ==0{return nil ;};_gaba -=8;_edegd =byte (_cgc >>uint (_gaba )&0xff)<<uint (_afeb );
if _bdcfb =_edf .SetByte (_caga +_dgbb ,_edegd );_bdcfb !=nil {return _d .Wrap (_bdcfb ,_gead ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_age *Bitmap )CountPixels ()int {return _age .countPixels ()};func MakePixelSumTab8 ()[]int {return _egegb ()};
func (_egebb *Points )AddPoint (x ,y float32 ){*_egebb =append (*_egebb ,Point {x ,y })};func _cfbb (_fcgb ,_aabeg *Bitmap ,_eeaac *Selection )(*Bitmap ,error ){const _ddcfb ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _egfg ,_gbeb int ;if _aabeg ==nil {return nil ,_d .Error (_ddcfb ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _eeaac ==nil {return nil ,_d .Error (_ddcfb ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_egfg =_eeaac .Width ;_gbeb =_eeaac .Height ;if _egfg ==0||_gbeb ==0{return nil ,_d .Error (_ddcfb ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _fcgb ==nil {return _aabeg .createTemplate (),nil ;};if _cabd :=_fcgb .resizeImageData (_aabeg );
_cabd !=nil {return nil ,_cabd ;};return _fcgb ,nil ;};func _caab (_bfab ,_cgec *Bitmap ,_bfeg *Selection )(*Bitmap ,error ){const _bfee ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _ccfe error ;if _bfab ,_ccfe =_cfbb (_bfab ,_cgec ,_bfeg );
_ccfe !=nil {return nil ,_ccfe ;};_abcg ,_ccfe :=_bacd (nil ,_cgec ,_bfeg );if _ccfe !=nil {return nil ,_d .Wrap (_ccfe ,_bfee ,"");};if _ ,_ccfe =_deea (_bfab ,_abcg ,_bfeg );_ccfe !=nil {return nil ,_d .Wrap (_ccfe ,_bfee ,"");};return _bfab ,nil ;};
func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_abfb bool ,_gbe error ){const _cegd ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_abbfd ,_ddeee :=p1 .Width ,p1 .Height ;
_fffb ,_gcffg :=p3 .Width ,p3 .Height ;if _gc .Abs (_abbfd -_fffb )> maxDiffW {return false ,nil ;};if _gc .Abs (_ddeee -_gcffg )> maxDiffH {return false ,nil ;};_egdg :=int (float32 (area1 )*(1.0-rank )+0.5);_dfcbe :=int (float32 (area3 )*(1.0-rank )+0.5);
var _caecb ,_faae int ;if delX >=0{_caecb =int (delX +0.5);}else {_caecb =int (delX -0.5);};if delY >=0{_faae =int (delY +0.5);}else {_faae =int (delY -0.5);};_ccbd :=p1 .CreateTemplate ();if _gbe =_ccbd .RasterOperation (0,0,_abbfd ,_ddeee ,PixSrc ,p1 ,0,0);
_gbe !=nil {return false ,_d .Wrap (_gbe ,_cegd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gbe =_ccbd .RasterOperation (_caecb ,_faae ,_abbfd ,_ddeee ,PixNotSrcAndDst ,p4 ,0,0);_gbe !=nil {return false ,_d .Wrap (_gbe ,_cegd ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_abfb ,_gbe =_ccbd .ThresholdPixelSum (_egdg ,tab8 );if _gbe !=nil {return false ,_d .Wrap (_gbe ,_cegd ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _abfb {return false ,nil ;};if _gbe =_ccbd .RasterOperation (_caecb ,_faae ,_fffb ,_gcffg ,PixSrc ,p3 ,0,0);
_gbe !=nil {return false ,_d .Wrap (_gbe ,_cegd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gbe =_ccbd .RasterOperation (0,0,_fffb ,_gcffg ,PixNotSrcAndDst ,p2 ,0,0);_gbe !=nil {return false ,_d .Wrap (_gbe ,_cegd ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_abfb ,_gbe =_ccbd .ThresholdPixelSum (_dfcbe ,tab8 );if _gbe !=nil {return false ,_d .Wrap (_gbe ,_cegd ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_abfb ,nil ;};func _cbfa (_ged ,_fcef *Bitmap ,_dfgc ,_fcec int )(*Bitmap ,error ){const _agce ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _fcef ==nil {return nil ,_d .Error (_agce ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dfgc < 1||_fcec < 1{return nil ,_d .Error (_agce ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _dfgc ==1&&_fcec ==1{return _defe (_ged ,_fcef );};if MorphBC ==SymmetricMorphBC {_eeec ,_bbgde :=_ddeb (_ged ,_fcef ,_dfgc ,_fcec );if _bbgde !=nil {return nil ,_d .Wrap (_bbgde ,_agce ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _eeec ,nil ;};_fdff :=_eacge (_dfgc /2,_fcec /2);_bdg :=8*((_fdff +7)/8);_fadd ,_caea :=_fcef .AddBorder (_bdg ,0);if _caea !=nil {return nil ,_d .Wrapf (_caea ,_agce ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_bdg );
};var _cgeb ,_befb *Bitmap ;if _dfgc ==1||_fcec ==1{_begd :=SelCreateBrick (_fcec ,_dfgc ,_fcec /2,_dfgc /2,SelHit );_cgeb ,_caea =_caab (nil ,_fadd ,_begd );if _caea !=nil {return nil ,_d .Wrap (_caea ,_agce ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_dfbf :=SelCreateBrick (1,_dfgc ,0,_dfgc /2,SelHit );_dfge ,_fegcd :=_bacd (nil ,_fadd ,_dfbf );if _fegcd !=nil {return nil ,_d .Wrap (_fegcd ,_agce ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_bggbc :=SelCreateBrick (_fcec ,1,_fcec /2,0,SelHit );_cgeb ,_fegcd =_bacd (nil ,_dfge ,_bggbc );if _fegcd !=nil {return nil ,_d .Wrap (_fegcd ,_agce ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_fegcd =_deea (_dfge ,_cgeb ,_dfbf );_fegcd !=nil {return nil ,_d .Wrap (_fegcd ,_agce ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_fegcd =_deea (_cgeb ,_dfge ,_bggbc );_fegcd !=nil {return nil ,_d .Wrap (_fegcd ,_agce ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _befb ,_caea =_cgeb .RemoveBorder (_bdg );_caea !=nil {return nil ,_d .Wrap (_caea ,_agce ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _ged ==nil {return _befb ,nil ;};if _ ,_caea =_defe (_ged ,_befb );_caea !=nil {return nil ,_caea ;};return _ged ,nil ;
};func (_addbf *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _dggd ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_addbf .IntSlice .Size (){return 0,_d .Errorf (_dggd ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_addbf .XAtIndex (i )),nil ;};func _gagg (_eedd *Bitmap ,_gcaf *_gc .Stack ,_bggc ,_cgfe int )(_bgfag *_fg .Rectangle ,_edgca error ){const _afeg ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _eedd ==nil {return nil ,_d .Error (_afeg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _gcaf ==nil {return nil ,_d .Error (_afeg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_edgb ,_fadc :=_eedd .Width ,_eedd .Height ;_ceebf :=_edgb -1;_cdfc :=_fadc -1;if _bggc < 0||_bggc > _ceebf ||_cgfe < 0||_cgfe > _cdfc ||!_eedd .GetPixel (_bggc ,_cgfe ){return nil ,nil ;
};var _daefe *_fg .Rectangle ;_daefe ,_edgca =Rect (100000,100000,0,0);if _edgca !=nil {return nil ,_d .Wrap (_edgca ,_afeg ,"");};if _edgca =_ffed (_gcaf ,_bggc ,_bggc ,_cgfe ,1,_cdfc ,_daefe );_edgca !=nil {return nil ,_d .Wrap (_edgca ,_afeg ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _edgca =_ffed (_gcaf ,_bggc ,_bggc ,_cgfe +1,-1,_cdfc ,_daefe );_edgca !=nil {return nil ,_d .Wrap (_edgca ,_afeg ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_daefe .Min .X ,_daefe .Max .X =_bggc ,_bggc ;
_daefe .Min .Y ,_daefe .Max .Y =_cgfe ,_cgfe ;var (_dcfff *fillSegment ;_cccf int ;);for _gcaf .Len ()> 0{if _dcfff ,_edgca =_decf (_gcaf );_edgca !=nil {return nil ,_d .Wrap (_edgca ,_afeg ,"");};_cgfe =_dcfff ._geaaa ;for _bggc =_dcfff ._afbg ;_bggc >=0&&_eedd .GetPixel (_bggc ,_cgfe );
_bggc --{if _edgca =_eedd .SetPixel (_bggc ,_cgfe ,0);_edgca !=nil {return nil ,_d .Wrap (_edgca ,_afeg ,"");};};if _bggc >=_dcfff ._afbg {for _bggc ++;_bggc <=_dcfff ._bcea &&_bggc <=_ceebf &&!_eedd .GetPixel (_bggc ,_cgfe );_bggc ++{};_cccf =_bggc ;if !(_bggc <=_dcfff ._bcea &&_bggc <=_ceebf ){continue ;
};}else {_cccf =_bggc +1;if _cccf < _dcfff ._afbg -1{if _edgca =_ffed (_gcaf ,_cccf ,_dcfff ._afbg -1,_dcfff ._geaaa ,-_dcfff ._fge ,_cdfc ,_daefe );_edgca !=nil {return nil ,_d .Wrap (_edgca ,_afeg ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_bggc =_dcfff ._afbg +1;};for {for ;_bggc <=_ceebf &&_eedd .GetPixel (_bggc ,_cgfe );_bggc ++{if _edgca =_eedd .SetPixel (_bggc ,_cgfe ,0);_edgca !=nil {return nil ,_d .Wrap (_edgca ,_afeg ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _edgca =_ffed (_gcaf ,_cccf ,_bggc -1,_dcfff ._geaaa ,_dcfff ._fge ,_cdfc ,_daefe );
_edgca !=nil {return nil ,_d .Wrap (_edgca ,_afeg ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bggc > _dcfff ._bcea +1{if _edgca =_ffed (_gcaf ,_dcfff ._bcea +1,_bggc -1,_dcfff ._geaaa ,-_dcfff ._fge ,_cdfc ,_daefe );_edgca !=nil {return nil ,_d .Wrap (_edgca ,_afeg ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _bggc ++;_bggc <=_dcfff ._bcea &&_bggc <=_ceebf &&!_eedd .GetPixel (_bggc ,_cgfe );_bggc ++{};_cccf =_bggc ;if !(_bggc <=_dcfff ._bcea &&_bggc <=_ceebf ){break ;};};};_daefe .Max .X ++;_daefe .Max .Y ++;return _daefe ,nil ;};func _acbea (_ggddf *Bitmap ,_cagea *_gc .Stack ,_baac ,_daeae int )(_fefb *_fg .Rectangle ,_dbde error ){const _gcbga ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ggddf ==nil {return nil ,_d .Error (_gcbga ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _cagea ==nil {return nil ,_d .Error (_gcbga ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_bdgb ,_egee :=_ggddf .Width ,_ggddf .Height ;_dage :=_bdgb -1;_ebdc :=_egee -1;if _baac < 0||_baac > _dage ||_daeae < 0||_daeae > _ebdc ||!_ggddf .GetPixel (_baac ,_daeae ){return nil ,nil ;};_dabd :=_fg .Rect (100000,100000,0,0);if _dbde =_ffed (_cagea ,_baac ,_baac ,_daeae ,1,_ebdc ,&_dabd );
_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dbde =_ffed (_cagea ,_baac ,_baac ,_daeae +1,-1,_ebdc ,&_dabd );_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_dabd .Min .X ,_dabd .Max .X =_baac ,_baac ;_dabd .Min .Y ,_dabd .Max .Y =_daeae ,_daeae ;var (_gcef *fillSegment ;_dgdeg int ;);for _cagea .Len ()> 0{if _gcef ,_dbde =_decf (_cagea );_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"");};_daeae =_gcef ._geaaa ;
for _baac =_gcef ._afbg -1;_baac >=0&&_ggddf .GetPixel (_baac ,_daeae );_baac --{if _dbde =_ggddf .SetPixel (_baac ,_daeae ,0);_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _baac >=_gcef ._afbg -1{for {for _baac ++;
_baac <=_gcef ._bcea +1&&_baac <=_dage &&!_ggddf .GetPixel (_baac ,_daeae );_baac ++{};_dgdeg =_baac ;if !(_baac <=_gcef ._bcea +1&&_baac <=_dage ){break ;};for ;_baac <=_dage &&_ggddf .GetPixel (_baac ,_daeae );_baac ++{if _dbde =_ggddf .SetPixel (_baac ,_daeae ,0);
_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dbde =_ffed (_cagea ,_dgdeg ,_baac -1,_gcef ._geaaa ,_gcef ._fge ,_ebdc ,&_dabd );_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _baac > _gcef ._bcea {if _dbde =_ffed (_cagea ,_gcef ._bcea +1,_baac -1,_gcef ._geaaa ,-_gcef ._fge ,_ebdc ,&_dabd );_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_dgdeg =_baac +1;if _dgdeg < _gcef ._afbg {if _dbde =_ffed (_cagea ,_dgdeg ,_gcef ._afbg -1,_gcef ._geaaa ,-_gcef ._fge ,_ebdc ,&_dabd );_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_baac =_gcef ._afbg ;for {for ;_baac <=_dage &&_ggddf .GetPixel (_baac ,_daeae );_baac ++{if _dbde =_ggddf .SetPixel (_baac ,_daeae ,0);_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dbde =_ffed (_cagea ,_dgdeg ,_baac -1,_gcef ._geaaa ,_gcef ._fge ,_ebdc ,&_dabd );
_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _baac > _gcef ._bcea {if _dbde =_ffed (_cagea ,_gcef ._bcea +1,_baac -1,_gcef ._geaaa ,-_gcef ._fge ,_ebdc ,&_dabd );_dbde !=nil {return nil ,_d .Wrap (_dbde ,_gcbga ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _baac ++;_baac <=_gcef ._bcea +1&&_baac <=_dage &&!_ggddf .GetPixel (_baac ,_daeae );_baac ++{};_dgdeg =_baac ;if !(_baac <=_gcef ._bcea +1&&_baac <=_dage ){break ;};};};_dabd .Max .X ++;_dabd .Max .Y ++;return &_dabd ,nil ;};type byHeight Bitmaps ;
var _gage =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_gegaa *Bitmap )centroid (_cefb ,_dece []int )(Point ,error ){_eedf :=Point {};_gegaa .setPadBits (0);if len (_cefb )==0{_cefb =_gebe ();};if len (_dece )==0{_dece =_egegb ();};var _cbac ,_fgf ,_egdf ,_eddf ,_bagb ,_aadgf int ;var _edcg byte ;for _bagb =0;
_bagb < _gegaa .Height ;_bagb ++{_gcbg :=_gegaa .RowStride *_bagb ;_eddf =0;for _aadgf =0;_aadgf < _gegaa .RowStride ;_aadgf ++{_edcg =_gegaa .Data [_gcbg +_aadgf ];if _edcg !=0{_eddf +=_dece [_edcg ];_cbac +=_cefb [_edcg ]+_aadgf *8*_dece [_edcg ];};};
_egdf +=_eddf ;_fgf +=_eddf *_bagb ;};if _egdf !=0{_eedf .X =float32 (_cbac )/float32 (_egdf );_eedf .Y =float32 (_fgf )/float32 (_egdf );};return _eedf ,nil ;};func (_acca *Bitmaps )AddBox (box *_fg .Rectangle ){_acca .Boxes =append (_acca .Boxes ,box )};
func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _adfe ,_bdagc int ;_bfd :=src .RowStride -1;if x < 0{_bdagc =-x ;x =0;}else if x +src .Width > dst .Width {_bfd -=src .Width +x -dst .Width ;};if y < 0{_adfe =-y ;y =0;_bdagc +=src .RowStride ;
_bfd +=src .RowStride ;}else if y +src .Height > dst .Height {_adfe =src .Height +y -dst .Height ;};var (_caa int ;_bge error ;);_afd :=x &0x07;_efbb :=8-_afd ;_caac :=src .Width &0x07;_deeg :=_efbb -_caac ;_fcb :=_efbb &0x07!=0;_efda :=src .Width <=((_bfd -_bdagc )<<3)+_efbb ;
_cdd :=dst .GetByteIndex (x ,y );_bgea :=_adfe +dst .Height ;if src .Height > _bgea {_caa =_bgea ;}else {_caa =src .Height ;};switch {case !_fcb :_bge =_cdcf (src ,dst ,_adfe ,_caa ,_cdd ,_bdagc ,_bfd ,op );case _efda :_bge =_gceg (src ,dst ,_adfe ,_caa ,_cdd ,_bdagc ,_bfd ,_deeg ,_afd ,_efbb ,op );
default:_bge =_cggc (src ,dst ,_adfe ,_caa ,_cdd ,_bdagc ,_bfd ,_deeg ,_afd ,_efbb ,op ,_caac );};return _bge ;};func TstWordBitmap (t *_dg .T ,scale ...int )*Bitmap {_ffgd :=1;if len (scale )> 0{_ffgd =scale [0];};_abbd :=3;_cceg :=9+7+15+2*_abbd ;_fafa :=5+_abbd +5;
_dccdc :=New (_cceg *_ffgd ,_fafa *_ffgd );_gagab :=&Bitmaps {};var _cfaff *int ;_abbd *=_ffgd ;_abaf :=0;_cfaff =&_abaf ;_eaeec :=0;_fcde :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,1*_ffgd );_fcde =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,_abbd );_fcde =TstISymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,1*_ffgd );_fcde =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,_abbd );_fcde =TstNSymbol (t ,scale ...);
TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,1*_ffgd );_fcde =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,1*_ffgd );_fcde =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,0);*_cfaff =0;_eaeec =5*_ffgd +_abbd ;
_fcde =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,1*_ffgd );_fcde =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,_abbd );_fcde =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,1*_ffgd );
_fcde =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,1*_ffgd );_fcde =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,1*_ffgd );_fcde =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,1*_ffgd );
_fcde =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gagab ,_fcde ,_cfaff ,_eaeec ,0);TstWriteSymbols (t ,_gagab ,_dccdc );return _dccdc ;};func _agbb ()(_ceb [256]uint64 ){for _def :=0;_def < 256;_def ++{if _def &0x01!=0{_ceb [_def ]|=0xff;};if _def &0x02!=0{_ceb [_def ]|=0xff00;
};if _def &0x04!=0{_ceb [_def ]|=0xff0000;};if _def &0x08!=0{_ceb [_def ]|=0xff000000;};if _def &0x10!=0{_ceb [_def ]|=0xff00000000;};if _def &0x20!=0{_ceb [_def ]|=0xff0000000000;};if _def &0x40!=0{_ceb [_def ]|=0xff000000000000;};if _def &0x80!=0{_ceb [_def ]|=0xff00000000000000;
};};return _ceb ;};func _eafg (_cafe *Bitmap ,_bagc ,_eacgb int ,_fgcdff ,_fdbg int ,_ebeb RasterOperator ){var (_fbca int ;_defd byte ;_faef ,_cefa int ;_dfbe int ;);_afdf :=_fgcdff >>3;_agda :=_fgcdff &7;if _agda > 0{_defd =_acbd [_agda ];};_fbca =_cafe .RowStride *_eacgb +(_bagc >>3);
switch _ebeb {case PixClr :for _faef =0;_faef < _fdbg ;_faef ++{_dfbe =_fbca +_faef *_cafe .RowStride ;for _cefa =0;_cefa < _afdf ;_cefa ++{_cafe .Data [_dfbe ]=0x0;_dfbe ++;};if _agda > 0{_cafe .Data [_dfbe ]=_dcbd (_cafe .Data [_dfbe ],0x0,_defd );};
};case PixSet :for _faef =0;_faef < _fdbg ;_faef ++{_dfbe =_fbca +_faef *_cafe .RowStride ;for _cefa =0;_cefa < _afdf ;_cefa ++{_cafe .Data [_dfbe ]=0xff;_dfbe ++;};if _agda > 0{_cafe .Data [_dfbe ]=_dcbd (_cafe .Data [_dfbe ],0xff,_defd );};};case PixNotDst :for _faef =0;
_faef < _fdbg ;_faef ++{_dfbe =_fbca +_faef *_cafe .RowStride ;for _cefa =0;_cefa < _afdf ;_cefa ++{_cafe .Data [_dfbe ]=^_cafe .Data [_dfbe ];_dfbe ++;};if _agda > 0{_cafe .Data [_dfbe ]=_dcbd (_cafe .Data [_dfbe ],^_cafe .Data [_dfbe ],_defd );};};};
};const _degda =5000;func (_abcgb *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _adbf ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_abcgb .IntSlice .Size (){return 0,_d .Errorf (_adbf ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_abcgb .YAtIndex (i )),nil ;};func (_adgb *Bitmap )Equivalent (s *Bitmap )bool {return _adgb .equivalent (s )};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _egbg (oldByte ,newByte ,op );};const (SelDontCare SelectionValue =iota ;
SelHit ;SelMiss ;);func (_fgc *Bitmap )Equals (s *Bitmap )bool {if len (_fgc .Data )!=len (s .Data )||_fgc .Width !=s .Width ||_fgc .Height !=s .Height {return false ;};for _fbff :=0;_fbff < _fgc .Height ;_fbff ++{_afea :=_fbff *_fgc .RowStride ;for _bff :=0;
_bff < _fgc .RowStride ;_bff ++{if _fgc .Data [_afea +_bff ]!=s .Data [_afea +_bff ]{return false ;};};};return true ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _ggfd (d ,s ,hSize ,vSize )};func Extract (roi _fg .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ggaa :=New (roi .Dx (),roi .Dy ());
_addee :=roi .Min .X &0x07;_bbdf :=8-_addee ;_bfc :=uint (8-_ggaa .Width &0x07);_gagf :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_gfef :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_fdbd :=_ggaa .RowStride ==_gfef +1-_gagf ;var _ebgf int ;for _edec :=roi .Min .Y ;
_edec < roi .Max .Y ;_edec ++{_beag :=_gagf ;_fcdg :=_ebgf ;switch {case _gagf ==_gfef :_adad ,_bfac :=src .GetByte (_beag );if _bfac !=nil {return nil ,_bfac ;};_adad <<=uint (_addee );_bfac =_ggaa .SetByte (_fcdg ,_fbfe (_bfc ,_adad ));if _bfac !=nil {return nil ,_bfac ;
};case _addee ==0:for _dcaee :=_gagf ;_dcaee <=_gfef ;_dcaee ++{_bba ,_dcbg :=src .GetByte (_beag );if _dcbg !=nil {return nil ,_dcbg ;};_beag ++;if _dcaee ==_gfef &&_fdbd {_bba =_fbfe (_bfc ,_bba );};_dcbg =_ggaa .SetByte (_fcdg ,_bba );if _dcbg !=nil {return nil ,_dcbg ;
};_fcdg ++;};default:_efbc :=_eefd (src ,_ggaa ,uint (_addee ),uint (_bbdf ),_bfc ,_gagf ,_gfef ,_fdbd ,_beag ,_fcdg );if _efbc !=nil {return nil ,_efbc ;};};_gagf +=src .RowStride ;_gfef +=src .RowStride ;_ebgf +=_ggaa .RowStride ;};return _ggaa ,nil ;
};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_eedaf *Selection )setOrigin (_fdcf ,_eeaaa int ){_eedaf .Cy ,_eedaf .Cx =_fdcf ,_eeaaa };func _bbdc (_ff *Bitmap ,_ggb ,_dcb int )(*Bitmap ,error ){const _dgd ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _ff ==nil {return nil ,_d .Error (_dgd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ggb <=0||_dcb <=0{return nil ,_d .Error (_dgd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _ggb ==_dcb {if _ggb ==1{_dde ,_efad :=_defe (nil ,_ff );if _efad !=nil {return nil ,_d .Wrap (_efad ,_dgd ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _dde ,nil ;};if _ggb ==2||_ggb ==4||_ggb ==8{_cb ,_faf :=_cgg (_ff ,_ggb );
if _faf !=nil {return nil ,_d .Wrap (_faf ,_dgd ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _cb ,nil ;};};_dfe :=_ggb *_ff .Width ;_ca :=_dcb *_ff .Height ;_cgge :=New (_dfe ,_ca );_agbg :=_cgge .RowStride ;
var (_bfe ,_ecf ,_abb ,_cfb ,_be int ;_fb byte ;_fe error ;);for _ecf =0;_ecf < _ff .Height ;_ecf ++{_bfe =_dcb *_ecf *_agbg ;for _abb =0;_abb < _ff .Width ;_abb ++{if _ba :=_ff .GetPixel (_abb ,_ecf );_ba {_be =_ggb *_abb ;for _cfb =0;_cfb < _ggb ;_cfb ++{_cgge .setBit (_bfe *8+_be +_cfb );
};};};for _cfb =1;_cfb < _dcb ;_cfb ++{_cea :=_bfe +_cfb *_agbg ;for _fcd :=0;_fcd < _agbg ;_fcd ++{if _fb ,_fe =_cgge .GetByte (_bfe +_fcd );_fe !=nil {return nil ,_d .Wrapf (_fe ,_dgd ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_cfb );
};if _fe =_cgge .SetByte (_cea +_fcd ,_fb );_fe !=nil {return nil ,_d .Wrap (_fe ,_dgd ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _cgge ,nil ;};type Component int ;func (_dbfa *Bitmaps )AddBitmap (bm *Bitmap ){_dbfa .Values =append (_dbfa .Values ,bm )};
func _gbbfd (_cfbe *Bitmap ,_gafg *_gc .Stack ,_faefg ,_bdfa ,_gfed int )(_gbbb *_fg .Rectangle ,_bgfa error ){const _bafe ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _cfbe ==nil {return nil ,_d .Error (_bafe ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _gafg ==nil {return nil ,_d .Error (_bafe ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _gfed {case 4:if _gbbb ,_bgfa =_gagg (_cfbe ,_gafg ,_faefg ,_bdfa );_bgfa !=nil {return nil ,_d .Wrap (_bgfa ,_bafe ,"");
};return _gbbb ,nil ;case 8:if _gbbb ,_bgfa =_acbea (_cfbe ,_gafg ,_faefg ,_bdfa );_bgfa !=nil {return nil ,_d .Wrap (_bgfa ,_bafe ,"");};return _gbbb ,nil ;default:return nil ,_d .Errorf (_bafe ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_gfed );
};};func (_gfacd *Bitmap )connComponentsBB (_gbdc int )(_aga *Boxes ,_fdec error ){const _fcff ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _gbdc !=4&&_gbdc !=8{return nil ,_d .Error (_fcff ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _gfacd .Zero (){return &Boxes {},nil ;};_gfacd .setPadBits (0);_feba ,_fdec :=_defe (nil ,_gfacd );if _fdec !=nil {return nil ,_d .Wrap (_fdec ,_fcff ,"\u0062\u006d\u0031");};_afdc :=&_gc .Stack {};_afdc .Aux =&_gc .Stack {};_aga =&Boxes {};var (_addb ,_bede int ;
_abad _fg .Point ;_ddggc bool ;_cbcf *_fg .Rectangle ;);for {if _abad ,_ddggc ,_fdec =_feba .nextOnPixel (_bede ,_addb );_fdec !=nil {return nil ,_d .Wrap (_fdec ,_fcff ,"");};if !_ddggc {break ;};if _cbcf ,_fdec =_gbbfd (_feba ,_afdc ,_abad .X ,_abad .Y ,_gbdc );
_fdec !=nil {return nil ,_d .Wrap (_fdec ,_fcff ,"");};if _fdec =_aga .Add (_cbcf );_fdec !=nil {return nil ,_d .Wrap (_fdec ,_fcff ,"");};_bede =_abad .X ;_addb =_abad .Y ;};return _aga ,nil ;};func (_gadf *Bitmap )GetChocolateData ()[]byte {if _gadf .Color ==Vanilla {_gadf .inverseData ();
};return _gadf .Data ;};func (_aad *Bitmap )GetVanillaData ()[]byte {if _aad .Color ==Chocolate {_aad .inverseData ();};return _aad .Data ;};func (_dagd *Boxes )selectWithIndicator (_efbba *_gc .NumSlice )(_dgdc *Boxes ,_aecc error ){const _gdfg ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _dagd ==nil {return nil ,_d .Error (_gdfg ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _efbba ==nil {return nil ,_d .Error (_gdfg ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_efbba )!=len (*_dagd ){return nil ,_d .Error (_gdfg ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _cebd ,_bcgc int ;for _fdgcc :=0;_fdgcc < len (*_efbba );_fdgcc ++{if _cebd ,_aecc =_efbba .GetInt (_fdgcc );_aecc !=nil {return nil ,_d .Wrap (_aecc ,_gdfg ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _cebd ==1{_bcgc ++;
};};if _bcgc ==len (*_dagd ){return _dagd ,nil ;};_feae :=Boxes {};for _cdfg :=0;_cdfg < len (*_efbba );_cdfg ++{_cebd =int ((*_efbba )[_cdfg ]);if _cebd ==0{continue ;};_feae =append (_feae ,(*_dagd )[_cdfg ]);};_dgdc =&_feae ;return _dgdc ,nil ;};func TstFrameBitmapData ()[]byte {return _febag .Data };
func (_eacg *Bitmap )SetPixel (x ,y int ,pixel byte )error {_fbdaa :=_eacg .GetByteIndex (x ,y );if _fbdaa > len (_eacg .Data )-1{return _d .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_fbdaa );
};_gdbc :=_eacg .GetBitOffset (x );_gac :=uint (7-_gdbc );_fgcd :=_eacg .Data [_fbdaa ];var _faaa byte ;if pixel ==1{_faaa =_fgcd |(pixel &0x01<<_gac );}else {_faaa =_fgcd &^(1<<_gac );};_eacg .Data [_fbdaa ]=_faaa ;return nil ;};func (_aebg Points )Size ()int {return len (_aebg )};
func (_eddc *Bitmap )setAll ()error {_bdee :=_gebec (_eddc ,0,0,_eddc .Width ,_eddc .Height ,PixSet ,nil ,0,0);if _bdee !=nil {return _d .Wrap (_bdee ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func _ecgdg (_fgga *Bitmap ,_cgefb ,_fdga ,_fdca ,_cggd int ,_aecge RasterOperator ,_cdca *Bitmap ,_dcadg ,_cgeff int )error {var (_dcdf bool ;
_fceg bool ;_ccaaa int ;_bbadc int ;_efcc int ;_cebf bool ;_cdga byte ;_daef int ;_fffd int ;_dfee int ;_cafcf ,_ffgb int ;);_bcga :=8-(_cgefb &7);_ccgf :=_cfec [_bcga ];_fega :=_fgga .RowStride *_fdga +(_cgefb >>3);_agag :=_cdca .RowStride *_cgeff +(_dcadg >>3);
if _fdca < _bcga {_dcdf =true ;_ccgf &=_acbd [8-_bcga +_fdca ];};if !_dcdf {_ccaaa =(_fdca -_bcga )>>3;if _ccaaa > 0{_fceg =true ;_bbadc =_fega +1;_efcc =_agag +1;};};_daef =(_cgefb +_fdca )&7;if !(_dcdf ||_daef ==0){_cebf =true ;_cdga =_acbd [_daef ];
_fffd =_fega +1+_ccaaa ;_dfee =_agag +1+_ccaaa ;};switch _aecge {case PixSrc :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],_cdca .Data [_agag ],_ccgf );_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;};if _fceg {for _cafcf =0;
_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]=_cdca .Data [_efcc +_ffgb ];};_bbadc +=_fgga .RowStride ;_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],_cdca .Data [_dfee ],_cdga );
_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixNotSrc :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],^_cdca .Data [_agag ],_ccgf );_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;};if _fceg {for _cafcf =0;
_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]=^_cdca .Data [_efcc +_ffgb ];};_bbadc +=_fgga .RowStride ;_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],^_cdca .Data [_dfee ],_cdga );
_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixSrcOrDst :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],_cdca .Data [_agag ]|_fgga .Data [_fega ],_ccgf );_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;
};if _fceg {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]|=_cdca .Data [_efcc +_ffgb ];};_bbadc +=_fgga .RowStride ;_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],_cdca .Data [_dfee ]|_fgga .Data [_fffd ],_cdga );
_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixSrcAndDst :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],_cdca .Data [_agag ]&_fgga .Data [_fega ],_ccgf );_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;
};if _fceg {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]&=_cdca .Data [_efcc +_ffgb ];};_bbadc +=_fgga .RowStride ;_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],_cdca .Data [_dfee ]&_fgga .Data [_fffd ],_cdga );
_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixSrcXorDst :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],_cdca .Data [_agag ]^_fgga .Data [_fega ],_ccgf );_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;
};if _fceg {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]^=_cdca .Data [_efcc +_ffgb ];};_bbadc +=_fgga .RowStride ;_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],_cdca .Data [_dfee ]^_fgga .Data [_fffd ],_cdga );
_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixNotSrcOrDst :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],^(_cdca .Data [_agag ])|_fgga .Data [_fega ],_ccgf );_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;
};if _fceg {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]|=^(_cdca .Data [_efcc +_ffgb ]);};_bbadc +=_fgga .RowStride ;_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],^(_cdca .Data [_dfee ])|_fgga .Data [_fffd ],_cdga );
_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixNotSrcAndDst :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],^(_cdca .Data [_agag ])&_fgga .Data [_fega ],_ccgf );_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;
};if _fceg {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]&=^_cdca .Data [_efcc +_ffgb ];};_bbadc +=_fgga .RowStride ;_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],^(_cdca .Data [_dfee ])&_fgga .Data [_fffd ],_cdga );
_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixSrcOrNotDst :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],_cdca .Data [_agag ]|^(_fgga .Data [_fega ]),_ccgf );_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;
};if _fceg {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]=_cdca .Data [_efcc +_ffgb ]|^(_fgga .Data [_bbadc +_ffgb ]);};_bbadc +=_fgga .RowStride ;_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;
_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],_cdca .Data [_dfee ]|^(_fgga .Data [_fffd ]),_cdga );_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixSrcAndNotDst :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],_cdca .Data [_agag ]&^(_fgga .Data [_fega ]),_ccgf );
_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;};if _fceg {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]=_cdca .Data [_efcc +_ffgb ]&^(_fgga .Data [_bbadc +_ffgb ]);};_bbadc +=_fgga .RowStride ;
_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],_cdca .Data [_dfee ]&^(_fgga .Data [_fffd ]),_cdga );_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixNotPixSrcOrDst :for _cafcf =0;
_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],^(_cdca .Data [_agag ]|_fgga .Data [_fega ]),_ccgf );_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;};if _fceg {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;
_ffgb ++{_fgga .Data [_bbadc +_ffgb ]=^(_cdca .Data [_efcc +_ffgb ]|_fgga .Data [_bbadc +_ffgb ]);};_bbadc +=_fgga .RowStride ;_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],^(_cdca .Data [_dfee ]|_fgga .Data [_fffd ]),_cdga );
_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixNotPixSrcAndDst :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],^(_cdca .Data [_agag ]&_fgga .Data [_fega ]),_ccgf );_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;
};if _fceg {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]=^(_cdca .Data [_efcc +_ffgb ]&_fgga .Data [_bbadc +_ffgb ]);};_bbadc +=_fgga .RowStride ;_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;
_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],^(_cdca .Data [_dfee ]&_fgga .Data [_fffd ]),_cdga );_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};case PixNotPixSrcXorDst :for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fega ]=_dcbd (_fgga .Data [_fega ],^(_cdca .Data [_agag ]^_fgga .Data [_fega ]),_ccgf );
_fega +=_fgga .RowStride ;_agag +=_cdca .RowStride ;};if _fceg {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{for _ffgb =0;_ffgb < _ccaaa ;_ffgb ++{_fgga .Data [_bbadc +_ffgb ]=^(_cdca .Data [_efcc +_ffgb ]^_fgga .Data [_bbadc +_ffgb ]);};_bbadc +=_fgga .RowStride ;
_efcc +=_cdca .RowStride ;};};if _cebf {for _cafcf =0;_cafcf < _cggd ;_cafcf ++{_fgga .Data [_fffd ]=_dcbd (_fgga .Data [_fffd ],^(_cdca .Data [_dfee ]^_fgga .Data [_fffd ]),_cdga );_fffd +=_fgga .RowStride ;_dfee +=_cdca .RowStride ;};};default:_c .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_aecge );
return _d .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _cabb (_cafc ,_gcd *Bitmap ,_dba int ,_aaf []byte ,_beg int )(_edg error ){const _aeaf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_ecfc ,_ccf ,_gef ,_cee ,_dbbf ,_baef ,_ccbe ,_gdb int ;_bbgf ,_dfda uint32 ;_eae ,_gce byte ;_cegb uint16 ;);_dcg :=make ([]byte ,4);_bag :=make ([]byte ,4);for _gef =0;_gef < _cafc .Height -1;_gef ,_cee =_gef +2,_cee +1{_ecfc =_gef *_cafc .RowStride ;
_ccf =_cee *_gcd .RowStride ;for _dbbf ,_baef =0,0;_dbbf < _beg ;_dbbf ,_baef =_dbbf +4,_baef +1{for _ccbe =0;_ccbe < 4;_ccbe ++{_gdb =_ecfc +_dbbf +_ccbe ;if _gdb <=len (_cafc .Data )-1&&_gdb < _ecfc +_cafc .RowStride {_dcg [_ccbe ]=_cafc .Data [_gdb ];
}else {_dcg [_ccbe ]=0x00;};_gdb =_ecfc +_cafc .RowStride +_dbbf +_ccbe ;if _gdb <=len (_cafc .Data )-1&&_gdb < _ecfc +(2*_cafc .RowStride ){_bag [_ccbe ]=_cafc .Data [_gdb ];}else {_bag [_ccbe ]=0x00;};};_bbgf =_dbb .BigEndian .Uint32 (_dcg );_dfda =_dbb .BigEndian .Uint32 (_bag );
_dfda &=_bbgf ;_dfda &=_dfda <<1;_dfda &=0xaaaaaaaa;_bbgf =_dfda |(_dfda <<7);_eae =byte (_bbgf >>24);_gce =byte ((_bbgf >>8)&0xff);_gdb =_ccf +_baef ;if _gdb +1==len (_gcd .Data )-1||_gdb +1>=_ccf +_gcd .RowStride {_gcd .Data [_gdb ]=_aaf [_eae ];if _edg =_gcd .SetByte (_gdb ,_aaf [_eae ]);
_edg !=nil {return _d .Wrapf (_edg ,_aeaf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gdb );};}else {_cegb =(uint16 (_aaf [_eae ])<<8)|uint16 (_aaf [_gce ]);if _edg =_gcd .setTwoBytes (_gdb ,_cegb );_edg !=nil {return _d .Wrapf (_edg ,_aeaf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gdb );
};_baef ++;};};};return nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_bgb :=make ([]Point ,len (bms ));_gdfc :=_gebe ();_bbge :=_egegb ();var _afdda error ;for _bgbc ,_dafb :=range bms {_bgb [_bgbc ],_afdda =_dafb .centroid (_gdfc ,_bbge );if _afdda !=nil {return nil ,_afdda ;
};};_gfdc :=Points (_bgb );return &_gfdc ,nil ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_gfaf :=_baaa (h ,w ,"");_gfaf .setOrigin (cy ,cx );var _deddg ,_feaaf int ;for _deddg =0;_deddg < h ;_deddg ++{for _feaaf =0;_feaaf < w ;
_feaaf ++{_gfaf .Data [_deddg ][_feaaf ]=tp ;};};return _gfaf ;};func (_dgfg *Bitmaps )SortByWidth (){_fgdfe :=(*byWidth )(_dgfg );_db .Sort (_fgdfe )};func (_effg *ClassedPoints )XAtIndex (i int )float32 {return (*_effg .Points )[_effg .IntSlice [i ]].X };
func (_bedee *ClassedPoints )xSortFunction ()func (_ecae int ,_fcgbc int )bool {return func (_cbe ,_cdae int )bool {return _bedee .XAtIndex (_cbe )< _bedee .XAtIndex (_cdae )};};var _ddd [256]uint8 ;func _ggfd (_ddda ,_aef *Bitmap ,_cfbc ,_eada int )(*Bitmap ,error ){const _ebfc ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";
if _aef ==nil {_c .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_d .Error (_ebfc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _cfbc < 1||_eada < 1{return nil ,_d .Error (_ebfc ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _cfbc ==1&&_eada ==1{_adfc ,_bdcff :=_defe (_ddda ,_aef );if _bdcff !=nil {return nil ,_d .Wrap (_bdcff ,_ebfc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _adfc ,nil ;};if _cfbc ==1||_eada ==1{_ccca :=SelCreateBrick (_eada ,_cfbc ,_eada /2,_cfbc /2,SelHit );_acae ,_dfgcd :=_bacd (_ddda ,_aef ,_ccca );if _dfgcd !=nil {return nil ,_d .Wrap (_dfgcd ,_ebfc ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _acae ,nil ;};_caef :=SelCreateBrick (1,_cfbc ,0,_cfbc /2,SelHit );_gfga :=SelCreateBrick (_eada ,1,_eada /2,0,SelHit );_fdgb ,_dbcf :=_bacd (nil ,_aef ,_caef );if _dbcf !=nil {return nil ,_d .Wrap (_dbcf ,_ebfc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ddda ,_dbcf =_bacd (_ddda ,_fdgb ,_gfga );if _dbcf !=nil {return nil ,_d .Wrap (_dbcf ,_ebfc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _ddda ,nil ;};const (Vanilla Color =iota ;Chocolate ;);func TstGetScaledSymbol (t *_dg .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;
};if scale [0]==1{return sm ;};_abag ,_cdfa :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_dd .NoError (t ,_cdfa );return _abag ;};func (_gaea *Bitmaps )GetBox (i int )(*_fg .Rectangle ,error ){const _efdd ="\u0047\u0065\u0074\u0042\u006f\u0078";
if _gaea ==nil {return nil ,_d .Error (_efdd ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_gaea .Boxes )-1{return nil ,_d .Errorf (_efdd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gaea .Boxes [i ],nil ;};func TstImageBitmapData ()[]byte {return _daacb .Data };func (_dgga *byWidth )Less (i ,j int )bool {return _dgga .Values [i ].Width < _dgga .Values [j ].Width };func _bea (_afe ,_caf *Bitmap ,_eed int ,_dfc []byte ,_gfe int )(_bacg error ){const _ebc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_agf ,_cag ,_efd ,_dgf ,_dbf ,_gae ,_bae ,_fdf int ;_cab ,_ega ,_efg ,_fbb uint32 ;_bbgd ,_daa byte ;_dfg uint16 ;);_dda :=make ([]byte ,4);_gde :=make ([]byte ,4);for _efd =0;_efd < _afe .Height -1;_efd ,_dgf =_efd +2,_dgf +1{_agf =_efd *_afe .RowStride ;
_cag =_dgf *_caf .RowStride ;for _dbf ,_gae =0,0;_dbf < _gfe ;_dbf ,_gae =_dbf +4,_gae +1{for _bae =0;_bae < 4;_bae ++{_fdf =_agf +_dbf +_bae ;if _fdf <=len (_afe .Data )-1&&_fdf < _agf +_afe .RowStride {_dda [_bae ]=_afe .Data [_fdf ];}else {_dda [_bae ]=0x00;
};_fdf =_agf +_afe .RowStride +_dbf +_bae ;if _fdf <=len (_afe .Data )-1&&_fdf < _agf +(2*_afe .RowStride ){_gde [_bae ]=_afe .Data [_fdf ];}else {_gde [_bae ]=0x00;};};_cab =_dbb .BigEndian .Uint32 (_dda );_ega =_dbb .BigEndian .Uint32 (_gde );_efg =_cab &_ega ;
_efg |=_efg <<1;_fbb =_cab |_ega ;_fbb &=_fbb <<1;_ega =_efg |_fbb ;_ega &=0xaaaaaaaa;_cab =_ega |(_ega <<7);_bbgd =byte (_cab >>24);_daa =byte ((_cab >>8)&0xff);_fdf =_cag +_gae ;if _fdf +1==len (_caf .Data )-1||_fdf +1>=_cag +_caf .RowStride {if _bacg =_caf .SetByte (_fdf ,_dfc [_bbgd ]);
_bacg !=nil {return _d .Wrapf (_bacg ,_ebc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fdf );};}else {_dfg =(uint16 (_dfc [_bbgd ])<<8)|uint16 (_dfc [_daa ]);if _bacg =_caf .setTwoBytes (_fdf ,_dfg );_bacg !=nil {return _d .Wrapf (_bacg ,_ebc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fdf );
};_gae ++;};};};return nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _baefb ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_d .Error (_baefb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_d .Error (_baefb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_d .Error (_baefb ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_d .Error (_baefb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_d .Error (_baefb ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_ffcd ,_cgde :=bm1 .Width ,bm1 .Height ;_fbdag ,_abfcb :=bm2 .Width ,bm2 .Height ;if _gc .Abs (_ffcd -_fbdag )> maxDiffW {return false ,nil ;};if _gc .Abs (_cgde -_abfcb )> maxDiffH {return false ,nil ;};_fccag :=int (delX +_gc .Sign (delX )*0.5);_eeag :=int (delY +_gc .Sign (delY )*0.5);
_cbdg :=int (_fd .Ceil (_fd .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_dgeba :=bm2 .RowStride ;_feaa :=_eacge (_eeag ,0);_egeb :=_agdf (_abfcb +_eeag ,_cgde );_eeae :=bm1 .RowStride *_feaa ;_gcde :=bm2 .RowStride *(_feaa -_eeag );
var _ccfac int ;if _egeb <=_cgde {_ccfac =downcount [_egeb -1];};_dgfc :=_eacge (_fccag ,0);_afed :=_agdf (_fbdag +_fccag ,_ffcd );var _caff ,_fbe int ;if _fccag >=8{_caff =_fccag >>3;_eeae +=_caff ;_dgfc -=_caff <<3;_afed -=_caff <<3;_fccag &=7;}else if _fccag <=-8{_fbe =-((_fccag +7)>>3);
_gcde +=_fbe ;_dgeba -=_fbe ;_fccag +=_fbe <<3;};var (_dege ,_ccfb ,_cedb int ;_bbdgd ,_ddea ,_bdaa byte ;);if _dgfc >=_afed ||_feaa >=_egeb {return false ,nil ;};_afebf :=(_afed +7)>>3;switch {case _fccag ==0:for _ccfb =_feaa ;_ccfb < _egeb ;_ccfb ,_eeae ,_gcde =_ccfb +1,_eeae +bm1 .RowStride ,_gcde +bm2 .RowStride {for _cedb =0;
_cedb < _afebf ;_cedb ++{_bbdgd =bm1 .Data [_eeae +_cedb ]&bm2 .Data [_gcde +_cedb ];_dege +=tab [_bbdgd ];};if _dege >=_cbdg {return true ,nil ;};if _ffg :=_dege +downcount [_ccfb ]-_ccfac ;_ffg < _cbdg {return false ,nil ;};};case _fccag > 0&&_dgeba < _afebf :for _ccfb =_feaa ;
_ccfb < _egeb ;_ccfb ,_eeae ,_gcde =_ccfb +1,_eeae +bm1 .RowStride ,_gcde +bm2 .RowStride {_ddea =bm1 .Data [_eeae ];_bdaa =bm2 .Data [_gcde ]>>uint (_fccag );_bbdgd =_ddea &_bdaa ;_dege +=tab [_bbdgd ];for _cedb =1;_cedb < _dgeba ;_cedb ++{_ddea =bm1 .Data [_eeae +_cedb ];
_bdaa =bm2 .Data [_gcde +_cedb ]>>uint (_fccag )|bm2 .Data [_gcde +_cedb -1]<<uint (8-_fccag );_bbdgd =_ddea &_bdaa ;_dege +=tab [_bbdgd ];};_ddea =bm1 .Data [_eeae +_cedb ];_bdaa =bm2 .Data [_gcde +_cedb -1]<<uint (8-_fccag );_bbdgd =_ddea &_bdaa ;_dege +=tab [_bbdgd ];
if _dege >=_cbdg {return true ,nil ;}else if _dege +downcount [_ccfb ]-_ccfac < _cbdg {return false ,nil ;};};case _fccag > 0&&_dgeba >=_afebf :for _ccfb =_feaa ;_ccfb < _egeb ;_ccfb ,_eeae ,_gcde =_ccfb +1,_eeae +bm1 .RowStride ,_gcde +bm2 .RowStride {_ddea =bm1 .Data [_eeae ];
_bdaa =bm2 .Data [_gcde ]>>uint (_fccag );_bbdgd =_ddea &_bdaa ;_dege +=tab [_bbdgd ];for _cedb =1;_cedb < _afebf ;_cedb ++{_ddea =bm1 .Data [_eeae +_cedb ];_bdaa =bm2 .Data [_gcde +_cedb ]>>uint (_fccag );_bdaa |=bm2 .Data [_gcde +_cedb -1]<<uint (8-_fccag );
_bbdgd =_ddea &_bdaa ;_dege +=tab [_bbdgd ];};if _dege >=_cbdg {return true ,nil ;}else if _dege +downcount [_ccfb ]-_ccfac < _cbdg {return false ,nil ;};};case _afebf < _dgeba :for _ccfb =_feaa ;_ccfb < _egeb ;_ccfb ,_eeae ,_gcde =_ccfb +1,_eeae +bm1 .RowStride ,_gcde +bm2 .RowStride {for _cedb =0;
_cedb < _afebf ;_cedb ++{_ddea =bm1 .Data [_eeae +_cedb ];_bdaa =bm2 .Data [_gcde +_cedb ]<<uint (-_fccag );_bdaa |=bm2 .Data [_gcde +_cedb +1]>>uint (8+_fccag );_bbdgd =_ddea &_bdaa ;_dege +=tab [_bbdgd ];};if _dege >=_cbdg {return true ,nil ;}else if _gbdce :=_dege +downcount [_ccfb ]-_ccfac ;
_gbdce < _cbdg {return false ,nil ;};};case _dgeba >=_afebf :for _ccfb =_feaa ;_ccfb < _egeb ;_ccfb ,_eeae ,_gcde =_ccfb +1,_eeae +bm1 .RowStride ,_gcde +bm2 .RowStride {for _cedb =0;_cedb < _afebf ;_cedb ++{_ddea =bm1 .Data [_eeae +_cedb ];_bdaa =bm2 .Data [_gcde +_cedb ]<<uint (-_fccag );
_bdaa |=bm2 .Data [_gcde +_cedb +1]>>uint (8+_fccag );_bbdgd =_ddea &_bdaa ;_dege +=tab [_bbdgd ];};_ddea =bm1 .Data [_eeae +_cedb ];_bdaa =bm2 .Data [_gcde +_cedb ]<<uint (-_fccag );_bbdgd =_ddea &_bdaa ;_dege +=tab [_bbdgd ];if _dege >=_cbdg {return true ,nil ;
}else if _dege +downcount [_ccfb ]-_ccfac < _cbdg {return false ,nil ;};};};_gcbf :=float32 (_dege )*float32 (_dege )/(float32 (area1 )*float32 (area2 ));if _gcbf >=scoreThreshold {_c .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_dege ,_cbdg ,_gcbf ,scoreThreshold );
};return false ,nil ;};func TstTSymbol (t *_dg .T ,scale ...int )*Bitmap {_dbfeb ,_cacb :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_dd .NoError (t ,_cacb );return TstGetScaledSymbol (t ,_dbfeb ,scale ...);};func (_fedgf *ClassedPoints )YAtIndex (i int )float32 {return (*_fedgf .Points )[_fedgf .IntSlice [i ]].Y };
var _bdbc =[5]int {1,2,3,0,4};func (_eab *Bitmap )InverseData (){_eab .inverseData ()};func TstImageBitmap ()*Bitmap {return _daacb .Copy ()};func _egbg (_becc ,_bbdg byte ,_gbda CombinationOperator )byte {switch _gbda {case CmbOpOr :return _bbdg |_becc ;
case CmbOpAnd :return _bbdg &_becc ;case CmbOpXor :return _bbdg ^_becc ;case CmbOpXNor :return ^(_bbdg ^_becc );case CmbOpNot :return ^(_bbdg );default:return _bbdg ;};};func (_ebgc *byHeight )Less (i ,j int )bool {return _ebgc .Values [i ].Height < _ebgc .Values [j ].Height };
func (_ebdb *Selection )findMaxTranslations ()(_bbbf ,_cdbf ,_efga ,_dadb int ){for _efagb :=0;_efagb < _ebdb .Height ;_efagb ++{for _aegec :=0;_aegec < _ebdb .Width ;_aegec ++{if _ebdb .Data [_efagb ][_aegec ]==SelHit {_bbbf =_eacge (_bbbf ,_ebdb .Cx -_aegec );
_cdbf =_eacge (_cdbf ,_ebdb .Cy -_efagb );_efga =_eacge (_efga ,_aegec -_ebdb .Cx );_dadb =_eacge (_dadb ,_efagb -_ebdb .Cy );};};};return _bbbf ,_cdbf ,_efga ,_dadb ;};func New (width ,height int )*Bitmap {_egd :=_aff (width ,height );_egd .Data =make ([]byte ,height *_egd .RowStride );
return _egd ;};func (_dcbea *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _cdcb ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_dcbea .Values )==0{return nil ,_d .Error (_cdcb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_dcag :=&BitmapsArray {};_dcbea .SortByHeight ();_fefa :=-1;_fdcg :=-1;for _daff :=0;_daff < len (_dcbea .Values );_daff ++{_ecebb :=_dcbea .Values [_daff ].Height ;if _ecebb > _fefa {_fefa =_ecebb ;_fdcg ++;_dcag .Values =append (_dcag .Values ,&Bitmaps {});
};_dcag .Values [_fdcg ].AddBitmap (_dcbea .Values [_daff ]);};return _dcag ,nil ;};func (_cedg *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _cedg .Copy (),nil ;};_ddee ,_ccg :=_cedg .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );
if _ccg !=nil {return nil ,_d .Wrap (_ccg ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _ddee ,nil ;};type Color int ;func (_edfd *Bitmaps )HeightSorter ()func (_fbgb ,_dcgf int )bool {return func (_adcb ,_dedfc int )bool {_abfe :=_edfd .Values [_adcb ].Height < _edfd .Values [_dedfc ].Height ;
_c .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_edfd .Values [_adcb ].Height ,_edfd .Values [_dedfc ].Height ,_abfe );return _abfe ;};};func (_cddf *byHeight )Len ()int {return len (_cddf .Values )};
func (_bcg *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_bgcb *Boxes ,_dabbg error ){const _ccdb ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _bcg ==nil {return nil ,_d .Error (_ccdb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_bcg )==0{return _bcg ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_ccdb ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_d .Errorf (_ccdb ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_cad :=_bcg .makeSizeIndicator (width ,height ,tp ,relation );_dcdd ,_dabbg :=_bcg .selectWithIndicator (_cad );if _dabbg !=nil {return nil ,_d .Wrap (_dabbg ,_ccdb ,"");};return _dcdd ,nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;
);const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func Rect (x ,y ,w ,h int )(*_fg .Rectangle ,error ){const _gfea ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_d .Errorf (_gfea ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_d .Error (_gfea ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_abbf :=_fg .Rect (x ,y ,x +w ,y +h );return &_abbf ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _ccaf (src ,sequence ...);};func TstPSymbol (t *_dg .T )*Bitmap {t .Helper ();_bcda :=New (5,8);_dd .NoError (t ,_bcda .SetPixel (0,0,1));
_dd .NoError (t ,_bcda .SetPixel (1,0,1));_dd .NoError (t ,_bcda .SetPixel (2,0,1));_dd .NoError (t ,_bcda .SetPixel (3,0,1));_dd .NoError (t ,_bcda .SetPixel (4,1,1));_dd .NoError (t ,_bcda .SetPixel (0,1,1));_dd .NoError (t ,_bcda .SetPixel (4,2,1));
_dd .NoError (t ,_bcda .SetPixel (0,2,1));_dd .NoError (t ,_bcda .SetPixel (4,3,1));_dd .NoError (t ,_bcda .SetPixel (0,3,1));_dd .NoError (t ,_bcda .SetPixel (0,4,1));_dd .NoError (t ,_bcda .SetPixel (1,4,1));_dd .NoError (t ,_bcda .SetPixel (2,4,1));
_dd .NoError (t ,_bcda .SetPixel (3,4,1));_dd .NoError (t ,_bcda .SetPixel (0,5,1));_dd .NoError (t ,_bcda .SetPixel (0,6,1));_dd .NoError (t ,_bcda .SetPixel (0,7,1));return _bcda ;};func (_cagfb *Bitmaps )WidthSorter ()func (_addbe ,_gefbf int )bool {return func (_deba ,_edfc int )bool {return _cagfb .Values [_deba ].Width < _cagfb .Values [_edfc ].Width };
};func _defe (_gbcd ,_fdde *Bitmap )(*Bitmap ,error ){if _fdde ==nil {return nil ,_d .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fdde ==_gbcd {return _gbcd ,nil ;
};if _gbcd ==nil {_gbcd =_fdde .createTemplate ();copy (_gbcd .Data ,_fdde .Data );return _gbcd ,nil ;};_aadg :=_gbcd .resizeImageData (_fdde );if _aadg !=nil {return nil ,_d .Wrap (_aadg ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_gbcd .Text =_fdde .Text ;copy (_gbcd .Data ,_fdde .Data );return _gbcd ,nil ;};func _fdeb (_fgcb *Bitmap ,_cefbb *Bitmap ,_eagb *Selection ,_ggfb **Bitmap )(*Bitmap ,error ){const _degc ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _cefbb ==nil {return nil ,_d .Error (_degc ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _eagb ==nil {return nil ,_d .Error (_degc ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_afdcg ,_cffa :=_eagb .Height ,_eagb .Width ;if _afdcg ==0||_cffa ==0{return nil ,_d .Error (_degc ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _fgcb ==nil {_fgcb =_cefbb .createTemplate ();
*_ggfb =_cefbb ;return _fgcb ,nil ;};_fgcb .Width =_cefbb .Width ;_fgcb .Height =_cefbb .Height ;_fgcb .RowStride =_cefbb .RowStride ;_fgcb .Color =_cefbb .Color ;_fgcb .Data =make ([]byte ,_cefbb .RowStride *_cefbb .Height );if _fgcb ==_cefbb {*_ggfb =_cefbb .Copy ();
}else {*_ggfb =_cefbb ;};return _fgcb ,nil ;};type byWidth Bitmaps ;func TstASymbol (t *_dg .T )*Bitmap {t .Helper ();_gdde :=New (6,6);_dd .NoError (t ,_gdde .SetPixel (1,0,1));_dd .NoError (t ,_gdde .SetPixel (2,0,1));_dd .NoError (t ,_gdde .SetPixel (3,0,1));
_dd .NoError (t ,_gdde .SetPixel (4,0,1));_dd .NoError (t ,_gdde .SetPixel (5,1,1));_dd .NoError (t ,_gdde .SetPixel (1,2,1));_dd .NoError (t ,_gdde .SetPixel (2,2,1));_dd .NoError (t ,_gdde .SetPixel (3,2,1));_dd .NoError (t ,_gdde .SetPixel (4,2,1));
_dd .NoError (t ,_gdde .SetPixel (5,2,1));_dd .NoError (t ,_gdde .SetPixel (0,3,1));_dd .NoError (t ,_gdde .SetPixel (5,3,1));_dd .NoError (t ,_gdde .SetPixel (0,4,1));_dd .NoError (t ,_gdde .SetPixel (5,4,1));_dd .NoError (t ,_gdde .SetPixel (1,5,1));
_dd .NoError (t ,_gdde .SetPixel (2,5,1));_dd .NoError (t ,_gdde .SetPixel (3,5,1));_dd .NoError (t ,_gdde .SetPixel (4,5,1));_dd .NoError (t ,_gdde .SetPixel (5,5,1));return _gdde ;};func (_geffe *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_eacab *Bitmaps ,_eagg error ){const _bdcg ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _geffe ==nil {return nil ,_d .Error (_bdcg ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_bdcg ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_d .Errorf (_bdcg ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_addd ,_eagg :=_geffe .makeSizeIndicator (width ,height ,tp ,relation );if _eagg !=nil {return nil ,_d .Wrap (_eagg ,_bdcg ,"");};_eacab ,_eagg =_geffe .selectByIndicator (_addd );if _eagg !=nil {return nil ,_d .Wrap (_eagg ,_bdcg ,"");};return _eacab ,nil ;
};func (_bggb *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_bggb .Width ,Height :_bggb .Height ,RowStride :_bggb .RowStride ,Color :_bggb .Color ,Text :_bggb .Text ,BitmapNumber :_bggb .BitmapNumber ,Special :_bggb .Special ,Data :make ([]byte ,len (_bggb .Data ))};
};func TstISymbol (t *_dg .T ,scale ...int )*Bitmap {_beaec ,_dgfad :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_dd .NoError (t ,_dgfad );return TstGetScaledSymbol (t ,_beaec ,scale ...);};func (_gaf *Bitmap )SetPadBits (value int ){_gaf .setPadBits (value )};
func (_eafa Points )GetIntY (i int )(int ,error ){if i >=len (_eafa ){return 0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_eafa [i ].Y ),nil ;};func (_aeb *Bitmap )ClipRectangle (box *_fg .Rectangle )(_dedd *Bitmap ,_gefb *_fg .Rectangle ,_ebb error ){const _ddeg ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_d .Error (_ddeg ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};_ebab ,_gfdf :=_aeb .Width ,_aeb .Height ;_aaeb :=_fg .Rect (0,0,_ebab ,_gfdf );if !box .Overlaps (_aaeb ){return nil ,nil ,_d .Error (_ddeg ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_ccdd :=box .Intersect (_aaeb );
_defb ,_cdge :=_ccdd .Min .X ,_ccdd .Min .Y ;_afg ,_cfag :=_ccdd .Dx (),_ccdd .Dy ();_dedd =New (_afg ,_cfag );_dedd .Text =_aeb .Text ;if _ebb =_dedd .RasterOperation (0,0,_afg ,_cfag ,PixSrc ,_aeb ,_defb ,_cdge );_ebb !=nil {return nil ,nil ,_d .Wrap (_ebb ,_ddeg ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_gefb =&_ccdd ;return _dedd ,_gefb ,nil ;};func ClipBoxToRectangle (box *_fg .Rectangle ,wi ,hi int )(_eda *_fg .Rectangle ,_eaef error ){const _gfad ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_d .Error (_gfad ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_d .Error (_gfad ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_adec :=*box ;
_eda =&_adec ;if _eda .Min .X < 0{_eda .Max .X +=_eda .Min .X ;_eda .Min .X =0;};if _eda .Min .Y < 0{_eda .Max .Y +=_eda .Min .Y ;_eda .Min .Y =0;};if _eda .Max .X > wi {_eda .Max .X =wi ;};if _eda .Max .Y > hi {_eda .Max .Y =hi ;};return _eda ,nil ;};
func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _bacd (d ,s ,sel )};func (_dccdg *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _bbec ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _dccdg ==nil {return nil ,_d .Error (_bbec ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_d .Error (_bbec ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_bcee :=len (_dccdg .Values );_gbbbf :=&Bitmaps {Values :make ([]*Bitmap ,_bcee ),Boxes :make ([]*_fg .Rectangle ,_bcee )};var (_eceb ,_cgfed *Bitmap ;_aefaf *_fg .Rectangle ;_fbea error ;);for _dddc :=0;_dddc < _bcee ;_dddc ++{if _eceb ,_fbea =_dccdg .GetBitmap (_dddc );
_fbea !=nil {return nil ,_d .Wrap (_fbea ,_bbec ,"");};if _aefaf ,_fbea =_dccdg .GetBox (_dddc );_fbea !=nil {return nil ,_d .Wrap (_fbea ,_bbec ,"");};if _cgfed ,_fbea =s .clipRectangle (_aefaf ,nil );_fbea !=nil {return nil ,_d .Wrap (_fbea ,_bbec ,"");
};if _cgfed ,_fbea =_cgfed .And (_eceb );_fbea !=nil {return nil ,_d .Wrap (_fbea ,_bbec ,"");};_gbbbf .Values [_dddc ]=_cgfed ;_gbbbf .Boxes [_dddc ]=_aefaf ;};return _gbbbf ,nil ;};func _aff (_dca ,_baf int )*Bitmap {return &Bitmap {Width :_dca ,Height :_baf ,RowStride :(_dca +7)>>3};
};func _eacge (_gebfd ,_dad int )int {if _gebfd > _dad {return _gebfd ;};return _dad ;};func (_cdc *Bitmap )Copy ()*Bitmap {_egc :=make ([]byte ,len (_cdc .Data ));copy (_egc ,_cdc .Data );return &Bitmap {Width :_cdc .Width ,Height :_cdc .Height ,RowStride :_cdc .RowStride ,Data :_egc ,Color :_cdc .Color ,Text :_cdc .Text ,BitmapNumber :_cdc .BitmapNumber ,Special :_cdc .Special };
};func TstCSymbol (t *_dg .T )*Bitmap {t .Helper ();_badea :=New (6,6);_dd .NoError (t ,_badea .SetPixel (1,0,1));_dd .NoError (t ,_badea .SetPixel (2,0,1));_dd .NoError (t ,_badea .SetPixel (3,0,1));_dd .NoError (t ,_badea .SetPixel (4,0,1));_dd .NoError (t ,_badea .SetPixel (0,1,1));
_dd .NoError (t ,_badea .SetPixel (5,1,1));_dd .NoError (t ,_badea .SetPixel (0,2,1));_dd .NoError (t ,_badea .SetPixel (0,3,1));_dd .NoError (t ,_badea .SetPixel (0,4,1));_dd .NoError (t ,_badea .SetPixel (5,4,1));_dd .NoError (t ,_badea .SetPixel (1,5,1));
_dd .NoError (t ,_badea .SetPixel (2,5,1));_dd .NoError (t ,_badea .SetPixel (3,5,1));_dd .NoError (t ,_badea .SetPixel (4,5,1));return _badea ;};func (_bcbb *byWidth )Len ()int {return len (_bcbb .Values )};func _ccaf (_acde *Bitmap ,_ceca ...MorphProcess )(_ecgf *Bitmap ,_eeff error ){const _eceef ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _acde ==nil {return nil ,_d .Error (_eceef ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_ceca )==0{return nil ,_d .Error (_eceef ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _eeff =_cbgg (_ceca ...);
_eeff !=nil {return nil ,_d .Wrap (_eeff ,_eceef ,"");};var _edfg ,_cbgc ,_efgd int ;_ecgf =_acde .Copy ();for _ ,_bcbe :=range _ceca {switch _bcbe .Operation {case MopDilation :_edfg ,_cbgc =_bcbe .getWidthHeight ();_ecgf ,_eeff =DilateBrick (nil ,_ecgf ,_edfg ,_cbgc );
if _eeff !=nil {return nil ,_d .Wrap (_eeff ,_eceef ,"");};case MopErosion :_edfg ,_cbgc =_bcbe .getWidthHeight ();_ecgf ,_eeff =_cbfb (nil ,_ecgf ,_edfg ,_cbgc );if _eeff !=nil {return nil ,_d .Wrap (_eeff ,_eceef ,"");};case MopOpening :_edfg ,_cbgc =_bcbe .getWidthHeight ();
_ecgf ,_eeff =_adeb (nil ,_ecgf ,_edfg ,_cbgc );if _eeff !=nil {return nil ,_d .Wrap (_eeff ,_eceef ,"");};case MopClosing :_edfg ,_cbgc =_bcbe .getWidthHeight ();_ecgf ,_eeff =_cbfa (nil ,_ecgf ,_edfg ,_cbgc );if _eeff !=nil {return nil ,_d .Wrap (_eeff ,_eceef ,"");
};case MopRankBinaryReduction :_ecgf ,_eeff =_ada (_ecgf ,_bcbe .Arguments ...);if _eeff !=nil {return nil ,_d .Wrap (_eeff ,_eceef ,"");};case MopReplicativeBinaryExpansion :_ecgf ,_eeff =_aeee (_ecgf ,_bcbe .Arguments [0]);if _eeff !=nil {return nil ,_d .Wrap (_eeff ,_eceef ,"");
};case MopAddBorder :_efgd =_bcbe .Arguments [0];_ecgf ,_eeff =_ecgf .AddBorder (_efgd ,0);if _eeff !=nil {return nil ,_d .Wrap (_eeff ,_eceef ,"");};default:return nil ,_d .Error (_eceef ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _efgd > 0{_ecgf ,_eeff =_ecgf .RemoveBorder (_efgd );if _eeff !=nil {return nil ,_d .Wrap (_eeff ,_eceef ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _ecgf ,nil ;};type LocationFilter int ;func _bga (_egf ,_gca *Bitmap ,_feb int ,_gbf []byte ,_bgg int )(_ebe error ){const _eee ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_gbg ,_fafd ,_fgb ,_eff ,_ced ,_eba ,_bec ,_ece int ;_ccd ,_gcba ,_dag ,_ecee uint32 ;_gbb ,_aaa byte ;_dcc uint16 ;);_dfd :=make ([]byte ,4);_gfc :=make ([]byte ,4);for _fgb =0;_fgb < _egf .Height -1;_fgb ,_eff =_fgb +2,_eff +1{_gbg =_fgb *_egf .RowStride ;
_fafd =_eff *_gca .RowStride ;for _ced ,_eba =0,0;_ced < _bgg ;_ced ,_eba =_ced +4,_eba +1{for _bec =0;_bec < 4;_bec ++{_ece =_gbg +_ced +_bec ;if _ece <=len (_egf .Data )-1&&_ece < _gbg +_egf .RowStride {_dfd [_bec ]=_egf .Data [_ece ];}else {_dfd [_bec ]=0x00;
};_ece =_gbg +_egf .RowStride +_ced +_bec ;if _ece <=len (_egf .Data )-1&&_ece < _gbg +(2*_egf .RowStride ){_gfc [_bec ]=_egf .Data [_ece ];}else {_gfc [_bec ]=0x00;};};_ccd =_dbb .BigEndian .Uint32 (_dfd );_gcba =_dbb .BigEndian .Uint32 (_gfc );_dag =_ccd &_gcba ;
_dag |=_dag <<1;_ecee =_ccd |_gcba ;_ecee &=_ecee <<1;_gcba =_dag &_ecee ;_gcba &=0xaaaaaaaa;_ccd =_gcba |(_gcba <<7);_gbb =byte (_ccd >>24);_aaa =byte ((_ccd >>8)&0xff);_ece =_fafd +_eba ;if _ece +1==len (_gca .Data )-1||_ece +1>=_fafd +_gca .RowStride {if _ebe =_gca .SetByte (_ece ,_gbf [_gbb ]);
_ebe !=nil {return _d .Wrapf (_ebe ,_eee ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ece );};}else {_dcc =(uint16 (_gbf [_gbb ])<<8)|uint16 (_gbf [_aaa ]);if _ebe =_gca .setTwoBytes (_ece ,_dcc );_ebe !=nil {return _d .Wrapf (_ebe ,_eee ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ece );
};_eba ++;};};};return nil ;};func TstWordBitmapWithSpaces (t *_dg .T ,scale ...int )*Bitmap {_ffeg :=1;if len (scale )> 0{_ffeg =scale [0];};_efadf :=3;_fbafc :=9+7+15+2*_efadf +2*_efadf ;_abeaf :=5+_efadf +5+2*_efadf ;_addbc :=New (_fbafc *_ffeg ,_abeaf *_ffeg );
_bcca :=&Bitmaps {};var _ebgbf *int ;_efadf *=_ffeg ;_eecb :=_efadf ;_ebgbf =&_eecb ;_ccff :=_efadf ;_bdagg :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,1*_ffeg );_bdagg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,_efadf );
_bdagg =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,1*_ffeg );_bdagg =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,_efadf );_bdagg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,1*_ffeg );
_bdagg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,1*_ffeg );_bdagg =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,0);*_ebgbf =_efadf ;_ccff =5*_ffeg +_efadf ;_bdagg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,1*_ffeg );
_bdagg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,_efadf );_bdagg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,1*_ffeg );_bdagg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,1*_ffeg );
_bdagg =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,1*_ffeg );_bdagg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,1*_ffeg );_bdagg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bcca ,_bdagg ,_ebgbf ,_ccff ,0);
TstWriteSymbols (t ,_bcca ,_addbc );return _addbc ;};func (_faaf *Bitmap )String ()string {var _baabb ="\u000a";for _acc :=0;_acc < _faaf .Height ;_acc ++{var _ccc string ;for _cac :=0;_cac < _faaf .Width ;_cac ++{_fac :=_faaf .GetPixel (_cac ,_acc );if _fac {_ccc +="\u0031";
}else {_ccc +="\u0030";};};_baabb +=_ccc +"\u000a";};return _baabb ;};func TstImageBitmapInverseData ()[]byte {_ddbcf :=_daacb .Copy ();_ddbcf .InverseData ();return _ddbcf .Data ;};func _gfd ()(_dgbf []byte ){_dgbf =make ([]byte ,256);for _baa :=0;_baa < 256;
_baa ++{_cdac :=byte (_baa );_dgbf [_cdac ]=(_cdac &0x01)|((_cdac &0x04)>>1)|((_cdac &0x10)>>2)|((_cdac &0x40)>>3)|((_cdac &0x02)<<3)|((_cdac &0x08)<<2)|((_cdac &0x20)<<1)|(_cdac &0x80);};return _dgbf ;};func (_aec *Bitmap )Zero ()bool {_fegc :=_aec .Width /8;
_fcc :=_aec .Width &7;var _ebbb byte ;if _fcc !=0{_ebbb =byte (0xff<<uint (8-_fcc ));};var _bdag ,_gffc ,_ecb int ;for _gffc =0;_gffc < _aec .Height ;_gffc ++{_bdag =_aec .RowStride *_gffc ;for _ecb =0;_ecb < _fegc ;_ecb ,_bdag =_ecb +1,_bdag +1{if _aec .Data [_bdag ]!=0{return false ;
};};if _fcc > 0{if _aec .Data [_bdag ]&_ebbb !=0{return false ;};};};return true ;};func init (){const _fggb ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_febag =New (50,40);var _faab error ;
_febag ,_faab =_febag .AddBorder (2,1);if _faab !=nil {panic (_d .Wrap (_faab ,_fggb ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_daacb ,_faab =NewWithData (50,22,_gage );if _faab !=nil {panic (_d .Wrap (_faab ,_fggb ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};type SizeComparison int ;type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};type BoundaryCondition int ;func (_caeb *Bitmap )nextOnPixelLow (_bfa ,_gbdd ,_fae ,_dded ,_fgd int )(_ace _fg .Point ,_afc bool ,_afge error ){const _beec ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_ggf int ;_eaee byte ;);_acb :=_fgd *_fae ;_gffcb :=_acb +(_dded /8);if _eaee ,_afge =_caeb .GetByte (_gffcb );_afge !=nil {return _ace ,false ,_d .Wrap (_afge ,_beec ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _eaee !=0{_egfa :=_dded -(_dded %8)+7;for _ggf =_dded ;_ggf <=_egfa &&_ggf < _bfa ;_ggf ++{if _caeb .GetPixel (_ggf ,_fgd ){_ace .X =_ggf ;_ace .Y =_fgd ;return _ace ,true ,nil ;};};};_cfgfg :=(_dded /8)+1;_ggf =8*_cfgfg ;var _gcff int ;for _gffcb =_acb +_cfgfg ;
_ggf < _bfa ;_gffcb ,_ggf =_gffcb +1,_ggf +8{if _eaee ,_afge =_caeb .GetByte (_gffcb );_afge !=nil {return _ace ,false ,_d .Wrap (_afge ,_beec ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _eaee ==0{continue ;
};for _gcff =0;_gcff < 8&&_ggf < _bfa ;_gcff ,_ggf =_gcff +1,_ggf +1{if _caeb .GetPixel (_ggf ,_fgd ){_ace .X =_ggf ;_ace .Y =_fgd ;return _ace ,true ,nil ;};};};for _bdae :=_fgd +1;_bdae < _gbdd ;_bdae ++{_acb =_bdae *_fae ;for _gffcb ,_ggf =_acb ,0;_ggf < _bfa ;
_gffcb ,_ggf =_gffcb +1,_ggf +8{if _eaee ,_afge =_caeb .GetByte (_gffcb );_afge !=nil {return _ace ,false ,_d .Wrap (_afge ,_beec ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _eaee ==0{continue ;};for _gcff =0;
_gcff < 8&&_ggf < _bfa ;_gcff ,_ggf =_gcff +1,_ggf +1{if _caeb .GetPixel (_ggf ,_bdae ){_ace .X =_ggf ;_ace .Y =_bdae ;return _ace ,true ,nil ;};};};};return _ace ,false ,nil ;};func (_gba *Bitmap )setPadBits (_ecea int ){_ebaad :=8-_gba .Width %8;if _ebaad ==8{return ;
};_bfb :=_gba .Width /8;_efff :=_cfec [_ebaad ];if _ecea ==0{_efff ^=_efff ;};var _gge int ;for _fdbbf :=0;_fdbbf < _gba .Height ;_fdbbf ++{_gge =_fdbbf *_gba .RowStride +_bfb ;if _ecea ==0{_gba .Data [_gge ]&=_efff ;}else {_gba .Data [_gge ]|=_efff ;};
};};func TstWriteSymbols (t *_dg .T ,bms *Bitmaps ,src *Bitmap ){for _acff :=0;_acff < bms .Size ();_acff ++{_acgg :=bms .Values [_acff ];_eebe :=bms .Boxes [_acff ];_ebdf :=src .RasterOperation (_eebe .Min .X ,_eebe .Min .Y ,_acgg .Width ,_acgg .Height ,PixSrc ,_acgg ,0,0);
_dd .NoError (t ,_ebdf );};};func _feee (_ccde ,_cbdc ,_accg *Bitmap ,_ddbde int )(*Bitmap ,error ){const _gbgd ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _cbdc ==nil {return nil ,_d .Error (_gbgd ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _accg ==nil {return nil ,_d .Error (_gbgd ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ddbde !=4&&_ddbde !=8{return nil ,_d .Error (_gbgd ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _aeeea error ;_ccde ,_aeeea =_defe (_ccde ,_cbdc );if _aeeea !=nil {return nil ,_d .Wrap (_aeeea ,_gbgd ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_cbacg :=_cbdc .createTemplate ();_accg .setPadBits (0);
for _aadd :=0;_aadd < _degda ;_aadd ++{_cbacg ,_aeeea =_defe (_cbacg ,_ccde );if _aeeea !=nil {return nil ,_d .Wrapf (_aeeea ,_gbgd ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_aadd );};if _aeeea =_fbdea (_ccde ,_accg ,_ddbde );
_aeeea !=nil {return nil ,_d .Wrapf (_aeeea ,_gbgd ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_aadd );};if _cbacg .Equals (_ccde ){break ;};};return _ccde ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _ggba ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_dbe :=_aff (width ,height );_dbe .Data =data ;if len (data )< height *_dbe .RowStride {return nil ,_d .Errorf (_ggba ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_dbe .RowStride );
};return _dbe ,nil ;};type MorphOperation int ;func (_gfeb *Bitmap )SetByte (index int ,v byte )error {if index > len (_gfeb .Data )-1||index < 0{return _d .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_gfeb .Data [index ]=v ;return nil ;};func _dcbb (_ddgb ,_agbef ,_egff *Bitmap )(*Bitmap ,error ){const _efce ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _agbef ==nil {return nil ,_d .Error (_efce ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _egff ==nil {return nil ,_d .Error (_efce ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ddgb ==_egff {return nil ,_d .Error (_efce ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_agbef .SizesEqual (_egff ){_c .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_efce );
};var _dab error ;if _ddgb ,_dab =_defe (_ddgb ,_agbef );_dab !=nil {return nil ,_d .Wrap (_dab ,_efce ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _dab =_ddgb .RasterOperation (0,0,_ddgb .Width ,_ddgb .Height ,PixSrcXorDst ,_egff ,0,0);
_dab !=nil {return nil ,_d .Wrap (_dab ,_efce ,"");};return _ddgb ,nil ;};func (_affc *Boxes )makeSizeIndicator (_ecgg ,_fafbg int ,_ffbd LocationFilter ,_dfaa SizeComparison )*_gc .NumSlice {_cadc :=&_gc .NumSlice {};var _daac ,_dfcf ,_geg int ;for _ ,_ccfa :=range *_affc {_daac =0;
_dfcf ,_geg =_ccfa .Dx (),_ccfa .Dy ();switch _ffbd {case LocSelectWidth :if (_dfaa ==SizeSelectIfLT &&_dfcf < _ecgg )||(_dfaa ==SizeSelectIfGT &&_dfcf > _ecgg )||(_dfaa ==SizeSelectIfLTE &&_dfcf <=_ecgg )||(_dfaa ==SizeSelectIfGTE &&_dfcf >=_ecgg ){_daac =1;
};case LocSelectHeight :if (_dfaa ==SizeSelectIfLT &&_geg < _fafbg )||(_dfaa ==SizeSelectIfGT &&_geg > _fafbg )||(_dfaa ==SizeSelectIfLTE &&_geg <=_fafbg )||(_dfaa ==SizeSelectIfGTE &&_geg >=_fafbg ){_daac =1;};case LocSelectIfEither :if (_dfaa ==SizeSelectIfLT &&(_geg < _fafbg ||_dfcf < _ecgg ))||(_dfaa ==SizeSelectIfGT &&(_geg > _fafbg ||_dfcf > _ecgg ))||(_dfaa ==SizeSelectIfLTE &&(_geg <=_fafbg ||_dfcf <=_ecgg ))||(_dfaa ==SizeSelectIfGTE &&(_geg >=_fafbg ||_dfcf >=_ecgg )){_daac =1;
};case LocSelectIfBoth :if (_dfaa ==SizeSelectIfLT &&(_geg < _fafbg &&_dfcf < _ecgg ))||(_dfaa ==SizeSelectIfGT &&(_geg > _fafbg &&_dfcf > _ecgg ))||(_dfaa ==SizeSelectIfLTE &&(_geg <=_fafbg &&_dfcf <=_ecgg ))||(_dfaa ==SizeSelectIfGTE &&(_geg >=_fafbg &&_dfcf >=_ecgg )){_daac =1;
};};_cadc .AddInt (_daac );};return _cadc ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_fbbg *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _feeb ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _fcdgb :=_fbbg .validateIntSlice ();_fcdgb !=nil {return nil ,_d .Wrap (_fcdgb ,_feeb ,"");};if _fbbg .IntSlice .Size ()==0{return nil ,_d .Error (_feeb ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_fbbg .SortByY ();var (_fagc []*ClassedPoints ;_cedc int ;);_afgf :=-1;var _cgff *ClassedPoints ;for _gdcg :=0;_gdcg < len (_fbbg .IntSlice );_gdcg ++{_cedc =int (_fbbg .YAtIndex (_gdcg ));if _cedc !=_afgf {_cgff =&ClassedPoints {Points :_fbbg .Points };
_afgf =_cedc ;_fagc =append (_fagc ,_cgff );};_cgff .IntSlice =append (_cgff .IntSlice ,_fbbg .IntSlice [_gdcg ]);};for _ ,_efedb :=range _fagc {_efedb .SortByX ();};return _fagc ,nil ;};func (_agd *Bitmap )thresholdPixelSum (_fbde int )bool {var (_dcaf int ;
_adaa uint8 ;_geag byte ;_dccd int ;);_bcaag :=_agd .RowStride ;_face :=uint (_agd .Width &0x07);if _face !=0{_adaa =uint8 ((0xff<<(8-_face ))&0xff);_bcaag --;};for _eec :=0;_eec < _agd .Height ;_eec ++{for _dccd =0;_dccd < _bcaag ;_dccd ++{_geag =_agd .Data [_eec *_agd .RowStride +_dccd ];
_dcaf +=int (_ddd [_geag ]);};if _face !=0{_geag =_agd .Data [_eec *_agd .RowStride +_dccd ]&_adaa ;_dcaf +=int (_ddd [_geag ]);};if _dcaf > _fbde {return true ;};};return false ;};type Points []Point ;func (_fcda *Bitmap )setTwoBytes (_bcbf int ,_abd uint16 )error {if _bcbf +1> len (_fcda .Data )-1{return _d .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bcbf );
};_fcda .Data [_bcbf ]=byte ((_abd &0xff00)>>8);_fcda .Data [_bcbf +1]=byte (_abd &0xff);return nil ;};func _ffd (_cgf *Bitmap )(_ggbf *Bitmap ,_adff int ,_abea error ){const _bbf ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _cgf ==nil {return nil ,0,_d .Errorf (_bbf ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _afcd ,_bgce *Bitmap ;if _afcd ,_abea =_defe (nil ,_cgf );_abea !=nil {return nil ,0,_d .Wrap (_abea ,_bbf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_dgda [13]int ;_fcca ,_adb int ;);_fdgf :=12;_egcb :=_gc .NewNumSlice (_fdgf +1);_acgc :=_gc .NewNumSlice (_fdgf +1);var _caec *Boxes ;for _agad :=0;_agad <=_fdgf ;_agad ++{if _agad ==0{if _bgce ,_abea =_defe (nil ,_afcd );_abea !=nil {return nil ,0,_d .Wrap (_abea ,_bbf ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _bgce ,_abea =_ccaf (_afcd ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_abea !=nil {return nil ,0,_d .Wrap (_abea ,_bbf ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _caec ,_abea =_bgce .connComponentsBB (4);
_abea !=nil {return nil ,0,_d .Wrap (_abea ,_bbf ,"");};_dgda [_agad ]=len (*_caec );_egcb .AddInt (_dgda [_agad ]);switch _agad {case 0:_fcca =_dgda [0];default:_adb =_dgda [_agad -1]-_dgda [_agad ];_acgc .AddInt (_adb );};_afcd =_bgce ;};_agg :=true ;
_ebf :=2;var _eecd ,_cdaf int ;for _aecd :=1;_aecd < len (*_acgc );_aecd ++{if _eecd ,_abea =_egcb .GetInt (_aecd );_abea !=nil {return nil ,0,_d .Wrap (_abea ,_bbf ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _agg &&_eecd < int (0.3*float32 (_fcca )){_ebf =_aecd +1;_agg =false ;};if _adb ,_abea =_acgc .GetInt (_aecd );_abea !=nil {return nil ,0,_d .Wrap (_abea ,_bbf ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _adb > _cdaf {_cdaf =_adb ;
};};_cfc :=_cgf .XResolution ;if _cfc ==0{_cfc =150;};if _cfc > 110{_ebf ++;};if _ebf < 2{_c .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_ebf =2;};_adff =_ebf +1;if _ggbf ,_abea =_ddeb (nil ,_cgf ,_ebf +1,1);_abea !=nil {return nil ,0,_d .Wrap (_abea ,_bbf ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _ggbf ,_adff ,nil ;
};func _gafa (_efe ,_fdfc ,_agea *Bitmap )(*Bitmap ,error ){const _ffff ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _fdfc ==nil {return nil ,_d .Error (_ffff ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _agea ==nil {return nil ,_d .Error (_ffff ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};var _bfec error ;switch {case _efe ==_fdfc :if _bfec =_efe .RasterOperation (0,0,_fdfc .Width ,_fdfc .Height ,PixNotSrcAndDst ,_agea ,0,0);_bfec !=nil {return nil ,_d .Wrap (_bfec ,_ffff ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _efe ==_agea :if _bfec =_efe .RasterOperation (0,0,_fdfc .Width ,_fdfc .Height ,PixNotSrcAndDst ,_fdfc ,0,0);
_bfec !=nil {return nil ,_d .Wrap (_bfec ,_ffff ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_efe ,_bfec =_defe (_efe ,_fdfc );if _bfec !=nil {return nil ,_d .Wrap (_bfec ,_ffff ,"");};if _bfec =_efe .RasterOperation (0,0,_fdfc .Width ,_fdfc .Height ,PixNotSrcAndDst ,_agea ,0,0);
_bfec !=nil {return nil ,_d .Wrap (_bfec ,_ffff ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _efe ,nil ;};type SelectionValue int ;func (_gcaa *Bitmap )And (s *Bitmap )(_agbe *Bitmap ,_deff error ){const _feg ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _gcaa ==nil {return nil ,_d .Error (_feg ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_d .Error (_feg ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_gcaa .SizesEqual (s ){_c .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_feg );
};if _agbe ,_deff =_defe (_agbe ,_gcaa );_deff !=nil {return nil ,_d .Wrap (_deff ,_feg ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _deff =_agbe .RasterOperation (0,0,_agbe .Width ,_agbe .Height ,PixSrcAndDst ,s ,0,0);
_deff !=nil {return nil ,_d .Wrap (_deff ,_feg ,"");};return _agbe ,nil ;};func (_cfbdf *ClassedPoints )SortByX (){_cfbdf ._fgca =_cfbdf .xSortFunction ();_db .Sort (_cfbdf )};