//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_fe "encoding/binary";_b "github.com/stretchr/testify/require";_dg "github.com/unidoc/unipdf/v3/common";_cf "github.com/unidoc/unipdf/v3/internal/bitwise";_cd "github.com/unidoc/unipdf/v3/internal/imageutil";_d "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_f "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_fg "image";_g "math";_cc "sort";_c "strings";_bb "testing";);type Component int ;func TstGetScaledSymbol (t *_bb .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_gabcg ,_ebgf :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_b .NoError (t ,_ebgf );return _gabcg ;};func _cdf (_fae ,_gdeb *Bitmap ,_ecb ,_gefa ,_ffbdd ,_bbd ,_cagf ,_cgc ,_eccc ,_edd int ,_abaf CombinationOperator ,_abgg int )error {var _dfaa int ;_deec :=func (){_dfaa ++;_ffbdd +=_gdeb .RowStride ;_bbd +=_fae .RowStride ;_cagf +=_fae .RowStride };for _dfaa =_ecb ;_dfaa < _gefa ;_deec (){var _dcaf uint16 ;_dggf :=_ffbdd ;for _cfbd :=_bbd ;_cfbd <=_cagf ;_cfbd ++{_adff ,_dfba :=_gdeb .GetByte (_dggf );if _dfba !=nil {return _dfba ;};_baccf ,_dfba :=_fae .GetByte (_cfbd );if _dfba !=nil {return _dfba ;};_dcaf =(_dcaf |(uint16 (_baccf )&0xff))<<uint (_edd );_baccf =byte (_dcaf >>8);if _dfba =_gdeb .SetByte (_dggf ,_cbfb (_adff ,_baccf ,_abaf ));_dfba !=nil {return _dfba ;};_dggf ++;_dcaf <<=uint (_eccc );if _cfbd ==_cagf {_baccf =byte (_dcaf >>(8-uint8 (_edd )));if _abgg !=0{_baccf =_edeb (uint (8+_cgc ),_baccf );};_adff ,_dfba =_gdeb .GetByte (_dggf );if _dfba !=nil {return _dfba ;};if _dfba =_gdeb .SetByte (_dggf ,_cbfb (_adff ,_baccf ,_abaf ));_dfba !=nil {return _dfba ;};};};};return nil ;};func (_ffc *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _fefd (_ffc ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func TstWSymbol (t *_bb .T ,scale ...int )*Bitmap {_agga ,_edaga :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_b .NoError (t ,_edaga );return TstGetScaledSymbol (t ,_agga ,scale ...);};func (_eaa *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_eaa .Width ,Height :_eaa .Height ,RowStride :_eaa .RowStride ,Color :_eaa .Color ,Text :_eaa .Text ,BitmapNumber :_eaa .BitmapNumber ,Special :_eaa .Special ,Data :make ([]byte ,len (_eaa .Data ))};};func _fedd (_gfcc ,_gege ,_eadd *Bitmap ,_agdc int )(*Bitmap ,error ){const _aegc ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _gege ==nil {return nil ,_f .Error (_aegc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _eadd ==nil {return nil ,_f .Error (_aegc ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _agdc !=4&&_agdc !=8{return nil ,_f .Error (_aegc ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _gcddg error ;_gfcc ,_gcddg =_acfb (_gfcc ,_gege );if _gcddg !=nil {return nil ,_f .Wrap (_gcddg ,_aegc ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_eaacb :=_gege .createTemplate ();_eadd .setPadBits (0);for _efad :=0;_efad < _cbef ;_efad ++{_eaacb ,_gcddg =_acfb (_eaacb ,_gfcc );if _gcddg !=nil {return nil ,_f .Wrapf (_gcddg ,_aegc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_efad );};if _gcddg =_fbca (_gfcc ,_eadd ,_agdc );_gcddg !=nil {return nil ,_f .Wrapf (_gcddg ,_aegc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_efad );};if _eaacb .Equals (_gfcc ){break ;};};return _gfcc ,nil ;};func (_faee *Bitmap )connComponentsBitmapsBB (_gdbg *Bitmaps ,_geaf int )(_bbcb *Boxes ,_aadf error ){const _fff ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _geaf !=4&&_geaf !=8{return nil ,_f .Error (_fff ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _gdbg ==nil {return nil ,_f .Error (_fff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_gdbg .Values )> 0{return nil ,_f .Error (_fff ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _faee .Zero (){return &Boxes {},nil ;};var (_ccgc ,_deac ,_ccfd ,_cfgb *Bitmap ;);_faee .setPadBits (0);if _ccgc ,_aadf =_acfb (nil ,_faee );_aadf !=nil {return nil ,_f .Wrap (_aadf ,_fff ,"\u0062\u006d\u0031");};if _deac ,_aadf =_acfb (nil ,_faee );_aadf !=nil {return nil ,_f .Wrap (_aadf ,_fff ,"\u0062\u006d\u0032");};_ecg :=&_d .Stack {};_ecg .Aux =&_d .Stack {};_bbcb =&Boxes {};var (_fea ,_faf int ;_bfaa _fg .Point ;_abfe bool ;_cba *_fg .Rectangle ;);for {if _bfaa ,_abfe ,_aadf =_ccgc .nextOnPixel (_fea ,_faf );_aadf !=nil {return nil ,_f .Wrap (_aadf ,_fff ,"");};if !_abfe {break ;};if _cba ,_aadf =_dgbfg (_ccgc ,_ecg ,_bfaa .X ,_bfaa .Y ,_geaf );_aadf !=nil {return nil ,_f .Wrap (_aadf ,_fff ,"");};if _aadf =_bbcb .Add (_cba );_aadf !=nil {return nil ,_f .Wrap (_aadf ,_fff ,"");};if _ccfd ,_aadf =_ccgc .clipRectangle (_cba ,nil );_aadf !=nil {return nil ,_f .Wrap (_aadf ,_fff ,"\u0062\u006d\u0033");};if _cfgb ,_aadf =_deac .clipRectangle (_cba ,nil );_aadf !=nil {return nil ,_f .Wrap (_aadf ,_fff ,"\u0062\u006d\u0034");};if _ ,_aadf =_eab (_ccfd ,_ccfd ,_cfgb );_aadf !=nil {return nil ,_f .Wrap (_aadf ,_fff ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _aadf =_deac .RasterOperation (_cba .Min .X ,_cba .Min .Y ,_cba .Dx (),_cba .Dy (),PixSrcXorDst ,_ccfd ,0,0);_aadf !=nil {return nil ,_f .Wrap (_aadf ,_fff ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_gdbg .AddBitmap (_ccfd );_fea =_bfaa .X ;_faf =_bfaa .Y ;};_gdbg .Boxes =*_bbcb ;return _bbcb ,nil ;};func _badc (_ecge *Bitmap ,_adfdb int )(*Bitmap ,error ){const _caaf ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _ecge ==nil {return nil ,_f .Error (_caaf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _adfdb <=0{return nil ,_f .Error (_caaf ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _adfdb ==1{_acbba ,_ffeb :=_acfb (nil ,_ecge );if _ffeb !=nil {return nil ,_f .Wrap (_ffeb ,_caaf ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _acbba ,nil ;};_aeadd ,_cdgf :=_aad (_ecge ,_adfdb ,_adfdb );if _cdgf !=nil {return nil ,_f .Wrap (_cdgf ,_caaf ,"");};return _aeadd ,nil ;};func _gagc ()[]int {_gff :=make ([]int ,256);for _cbaa :=0;_cbaa <=0xff;_cbaa ++{_gcabd :=byte (_cbaa );_gff [_gcabd ]=int (_gcabd &0x1)+(int (_gcabd >>1)&0x1)+(int (_gcabd >>2)&0x1)+(int (_gcabd >>3)&0x1)+(int (_gcabd >>4)&0x1)+(int (_gcabd >>5)&0x1)+(int (_gcabd >>6)&0x1)+(int (_gcabd >>7)&0x1);};return _gff ;};func _effb (_gdg ,_ecbg *Bitmap ,_fbdc ,_aga ,_edcf ,_fcgg ,_bfd ,_ccede ,_bece ,_gcff int ,_fbcd CombinationOperator )error {var _gcaa int ;_edcd :=func (){_gcaa ++;_edcf +=_ecbg .RowStride ;_fcgg +=_gdg .RowStride ;_bfd +=_gdg .RowStride };for _gcaa =_fbdc ;_gcaa < _aga ;_edcd (){var _bcff uint16 ;_gdgg :=_edcf ;for _ggg :=_fcgg ;_ggg <=_bfd ;_ggg ++{_cbc ,_cfeb :=_ecbg .GetByte (_gdgg );if _cfeb !=nil {return _cfeb ;};_dcfd ,_cfeb :=_gdg .GetByte (_ggg );if _cfeb !=nil {return _cfeb ;};_bcff =(_bcff |uint16 (_dcfd ))<<uint (_gcff );_dcfd =byte (_bcff >>8);if _ggg ==_bfd {_dcfd =_edeb (uint (_ccede ),_dcfd );};if _cfeb =_ecbg .SetByte (_gdgg ,_cbfb (_cbc ,_dcfd ,_fbcd ));_cfeb !=nil {return _cfeb ;};_gdgg ++;_bcff <<=uint (_bece );};};return nil ;};func (_gec *Bitmap )SetPadBits (value int ){_gec .setPadBits (value )};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _fbdag (src ,sequence ...);};func _cbd (_bfbgf ,_cffe *Bitmap ,_geca *Selection )(*Bitmap ,error ){const _fgabf ="\u006f\u0070\u0065\u006e";var _aggd error ;_bfbgf ,_aggd =_ffgc (_bfbgf ,_cffe ,_geca );if _aggd !=nil {return nil ,_f .Wrap (_aggd ,_fgabf ,"");};_ccde ,_aggd :=_adga (nil ,_cffe ,_geca );if _aggd !=nil {return nil ,_f .Wrap (_aggd ,_fgabf ,"");};_ ,_aggd =_dbbf (_bfbgf ,_ccde ,_geca );if _aggd !=nil {return nil ,_f .Wrap (_aggd ,_fgabf ,"");};return _bfbgf ,nil ;};func _acfb (_eccb ,_efa *Bitmap )(*Bitmap ,error ){if _efa ==nil {return nil ,_f .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _efa ==_eccb {return _eccb ,nil ;};if _eccb ==nil {_eccb =_efa .createTemplate ();copy (_eccb .Data ,_efa .Data );return _eccb ,nil ;};_cfgc :=_eccb .resizeImageData (_efa );if _cfgc !=nil {return nil ,_f .Wrap (_cfgc ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_eccb .Text =_efa .Text ;copy (_eccb .Data ,_efa .Data );return _eccb ,nil ;};func (_gcdf *ClassedPoints )Swap (i ,j int ){_gcdf .IntSlice [i ],_gcdf .IntSlice [j ]=_gcdf .IntSlice [j ],_gcdf .IntSlice [i ];};func MakePixelCentroidTab8 ()[]int {return _febe ()};func init (){for _egfd :=0;_egfd < 256;_egfd ++{_bdc [_egfd ]=uint8 (_egfd &0x1)+(uint8 (_egfd >>1)&0x1)+(uint8 (_egfd >>2)&0x1)+(uint8 (_egfd >>3)&0x1)+(uint8 (_egfd >>4)&0x1)+(uint8 (_egfd >>5)&0x1)+(uint8 (_egfd >>6)&0x1)+(uint8 (_egfd >>7)&0x1);};};func TstCSymbol (t *_bb .T )*Bitmap {t .Helper ();_gcgf :=New (6,6);_b .NoError (t ,_gcgf .SetPixel (1,0,1));_b .NoError (t ,_gcgf .SetPixel (2,0,1));_b .NoError (t ,_gcgf .SetPixel (3,0,1));_b .NoError (t ,_gcgf .SetPixel (4,0,1));_b .NoError (t ,_gcgf .SetPixel (0,1,1));_b .NoError (t ,_gcgf .SetPixel (5,1,1));_b .NoError (t ,_gcgf .SetPixel (0,2,1));_b .NoError (t ,_gcgf .SetPixel (0,3,1));_b .NoError (t ,_gcgf .SetPixel (0,4,1));_b .NoError (t ,_gcgf .SetPixel (5,4,1));_b .NoError (t ,_gcgf .SetPixel (1,5,1));_b .NoError (t ,_gcgf .SetPixel (2,5,1));_b .NoError (t ,_gcgf .SetPixel (3,5,1));_b .NoError (t ,_gcgf .SetPixel (4,5,1));return _gcgf ;};var _ _cc .Interface =&ClassedPoints {};func (_edg *Bitmap )inverseData (){if _gaag :=_edg .RasterOperation (0,0,_edg .Width ,_edg .Height ,PixNotDst ,nil ,0,0);_gaag !=nil {_dg .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_gaag );};if _edg .Color ==Chocolate {_edg .Color =Vanilla ;}else {_edg .Color =Chocolate ;};};func _gag (_gac ,_cdd *Bitmap )(_ag error ){const _dfe ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_cfg :=_cdd .RowStride ;_gcf :=_gac .RowStride ;_fge :=_cdd .RowStride *4-_gac .RowStride ;var (_ff ,_fgd byte ;_bac uint32 ;_aa ,_dd ,_bbc ,_fgf ,_da ,_bbe ,_ede int ;);for _bbc =0;_bbc < _cdd .Height ;_bbc ++{_aa =_bbc *_cfg ;_dd =4*_bbc *_gcf ;for _fgf =0;_fgf < _cfg ;_fgf ++{_ff =_cdd .Data [_aa +_fgf ];_bac =_gccb [_ff ];_bbe =_dd +_fgf *4;if _fge !=0&&(_fgf +1)*4> _gac .RowStride {for _da =_fge ;_da > 0;_da --{_fgd =byte ((_bac >>uint (_da *8))&0xff);_ede =_bbe +(_fge -_da );if _ag =_gac .SetByte (_ede ,_fgd );_ag !=nil {return _f .Wrapf (_ag ,_dfe ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_da );};};}else if _ag =_gac .setFourBytes (_bbe ,_bac );_ag !=nil {return _f .Wrap (_ag ,_dfe ,"");};if _ag =_gac .setFourBytes (_dd +_fgf *4,_gccb [_cdd .Data [_aa +_fgf ]]);_ag !=nil {return _f .Wrap (_ag ,_dfe ,"");};};for _da =1;_da < 4;_da ++{for _fgf =0;_fgf < _gcf ;_fgf ++{if _ag =_gac .SetByte (_dd +_da *_gcf +_fgf ,_gac .Data [_dd +_fgf ]);_ag !=nil {return _f .Wrapf (_ag ,_dfe ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_da ,_fgf );};};};};return nil ;};func TstWordBitmapWithSpaces (t *_bb .T ,scale ...int )*Bitmap {_adbf :=1;if len (scale )> 0{_adbf =scale [0];};_egb :=3;_badca :=9+7+15+2*_egb +2*_egb ;_cddb :=5+_egb +5+2*_egb ;_efda :=New (_badca *_adbf ,_cddb *_adbf );_aacf :=&Bitmaps {};var _ggagf *int ;_egb *=_adbf ;_ccgf :=_egb ;_ggagf =&_ccgf ;_gegd :=_egb ;_dbcbc :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,1*_adbf );_dbcbc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,_egb );_dbcbc =TstISymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,1*_adbf );_dbcbc =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,_egb );_dbcbc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,1*_adbf );_dbcbc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,1*_adbf );_dbcbc =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,0);*_ggagf =_egb ;_gegd =5*_adbf +_egb ;_dbcbc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,1*_adbf );_dbcbc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,_egb );_dbcbc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,1*_adbf );_dbcbc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,1*_adbf );_dbcbc =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,1*_adbf );_dbcbc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,1*_adbf );_dbcbc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_aacf ,_dbcbc ,_ggagf ,_gegd ,0);TstWriteSymbols (t ,_aacf ,_efda );return _efda ;};func (_dfd *Bitmap )clipRectangle (_deba ,_ege *_fg .Rectangle )(_aee *Bitmap ,_cbbb error ){const _ffbd ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _deba ==nil {return nil ,_f .Error (_ffbd ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_bcdd ,_ffag :=_dfd .Width ,_dfd .Height ;_bgga ,_cbbb :=ClipBoxToRectangle (_deba ,_bcdd ,_ffag );if _cbbb !=nil {_dg .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_cbbb );return nil ,nil ;};_gace ,_fcfeb :=_bgga .Min .X ,_bgga .Min .Y ;_gfbe ,_dbcb :=_bgga .Max .X -_bgga .Min .X ,_bgga .Max .Y -_bgga .Min .Y ;_aee =New (_gfbe ,_dbcb );_aee .Text =_dfd .Text ;if _cbbb =_aee .RasterOperation (0,0,_gfbe ,_dbcb ,PixSrc ,_dfd ,_gace ,_fcfeb );_cbbb !=nil {return nil ,_f .Wrap (_cbbb ,_ffbd ,"");};if _ege !=nil {*_ege =*_bgga ;};return _aee ,nil ;};func (_efbb *Bitmap )Equivalent (s *Bitmap )bool {return _efbb .equivalent (s )};func _ffa (_cegg ,_ddee *Bitmap ,_cbf int ,_gfb []byte ,_cddf int )(_eba error ){const _ebdf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_cbb ,_cdcg ,_beb ,_gacdb ,_cfgf ,_abc ,_bde ,_fac int ;_eca ,_bfg ,_ccg ,_aefg uint32 ;_cef ,_bbf byte ;_ccb uint16 ;);_agc :=make ([]byte ,4);_bgd :=make ([]byte ,4);for _beb =0;_beb < _cegg .Height -1;_beb ,_gacdb =_beb +2,_gacdb +1{_cbb =_beb *_cegg .RowStride ;_cdcg =_gacdb *_ddee .RowStride ;for _cfgf ,_abc =0,0;_cfgf < _cddf ;_cfgf ,_abc =_cfgf +4,_abc +1{for _bde =0;_bde < 4;_bde ++{_fac =_cbb +_cfgf +_bde ;if _fac <=len (_cegg .Data )-1&&_fac < _cbb +_cegg .RowStride {_agc [_bde ]=_cegg .Data [_fac ];}else {_agc [_bde ]=0x00;};_fac =_cbb +_cegg .RowStride +_cfgf +_bde ;if _fac <=len (_cegg .Data )-1&&_fac < _cbb +(2*_cegg .RowStride ){_bgd [_bde ]=_cegg .Data [_fac ];}else {_bgd [_bde ]=0x00;};};_eca =_fe .BigEndian .Uint32 (_agc );_bfg =_fe .BigEndian .Uint32 (_bgd );_ccg =_eca &_bfg ;_ccg |=_ccg <<1;_aefg =_eca |_bfg ;_aefg &=_aefg <<1;_bfg =_ccg &_aefg ;_bfg &=0xaaaaaaaa;_eca =_bfg |(_bfg <<7);_cef =byte (_eca >>24);_bbf =byte ((_eca >>8)&0xff);_fac =_cdcg +_abc ;if _fac +1==len (_ddee .Data )-1||_fac +1>=_cdcg +_ddee .RowStride {if _eba =_ddee .SetByte (_fac ,_gfb [_cef ]);_eba !=nil {return _f .Wrapf (_eba ,_ebdf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fac );};}else {_ccb =(uint16 (_gfb [_cef ])<<8)|uint16 (_gfb [_bbf ]);if _eba =_ddee .setTwoBytes (_fac ,_ccb );_eba !=nil {return _f .Wrapf (_eba ,_ebdf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fac );};_abc ++;};};};return nil ;};func (_gdfa *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _dfcfd ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _fadg :=_gdfa .validateIntSlice ();_fadg !=nil {return nil ,_f .Wrap (_fadg ,_dfcfd ,"");};if _gdfa .IntSlice .Size ()==0{return nil ,_f .Error (_dfcfd ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_gdfa .SortByY ();var (_dcbe []*ClassedPoints ;_gece int ;);_baga :=-1;var _cdab *ClassedPoints ;for _fdgc :=0;_fdgc < len (_gdfa .IntSlice );_fdgc ++{_gece =int (_gdfa .YAtIndex (_fdgc ));if _gece !=_baga {_cdab =&ClassedPoints {Points :_gdfa .Points };_baga =_gece ;_dcbe =append (_dcbe ,_cdab );};_cdab .IntSlice =append (_cdab .IntSlice ,_gdfa .IntSlice [_fdgc ]);};for _ ,_cec :=range _dcbe {_cec .SortByX ();};return _dcbe ,nil ;};func TstFrameBitmapData ()[]byte {return _fccf .Data };func _edeb (_acdd uint ,_adfd byte )byte {return _adfd >>_acdd <<_acdd };const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);type shift int ;func (_adge *byHeight )Less (i ,j int )bool {return _adge .Values [i ].Height < _adge .Values [j ].Height };const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_ggcg *ClassedPoints )Less (i ,j int )bool {return _ggcg ._afaf (i ,j )};func (_deff Points )GetIntY (i int )(int ,error ){if i >=len (_deff ){return 0,_f .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_deff [i ].Y ),nil ;};func (_ebg *Bitmap )addPadBits ()(_bcd error ){const _eag ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_bdac :=_ebg .Width %8;if _bdac ==0{return nil ;};_aeba :=_ebg .Width /8;_dcec :=_cf .NewReader (_ebg .Data );_agba :=make ([]byte ,_ebg .Height *_ebg .RowStride );_egfba :=_cf .NewWriterMSB (_agba );_ecdd :=make ([]byte ,_aeba );var (_bgeb int ;_ffab uint64 ;);for _bgeb =0;_bgeb < _ebg .Height ;_bgeb ++{if _ ,_bcd =_dcec .Read (_ecdd );_bcd !=nil {return _f .Wrap (_bcd ,_eag ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_bcd =_egfba .Write (_ecdd );_bcd !=nil {return _f .Wrap (_bcd ,_eag ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _ffab ,_bcd =_dcec .ReadBits (byte (_bdac ));_bcd !=nil {return _f .Wrap (_bcd ,_eag ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _bcd =_egfba .WriteByte (byte (_ffab )<<uint (8-_bdac ));_bcd !=nil {return _f .Wrap (_bcd ,_eag ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_ebg .Data =_egfba .Data ();return nil ;};type byHeight Bitmaps ;func _dcbb (_dbdeb ,_gbcbf *Bitmap ,_gadeg ,_eegd int )(_bced error ){const _debcd ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_degd ,_eaaa ,_accac ,_bgad int ;_efbae ,_edgd ,_adbcc ,_gcfc ,_abccg ,_gdfaf ,_ceaf byte ;);for _degd =0;_degd < _gadeg ;_degd ++{_accac =_degd *_dbdeb .RowStride ;_bgad =_degd *_gbcbf .RowStride ;for _eaaa =0;_eaaa < _eegd ;_eaaa ++{_efbae ,_bced =_dbdeb .GetByte (_accac +_eaaa );if _bced !=nil {return _f .Wrap (_bced ,_debcd ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_edgd ,_bced =_gbcbf .GetByte (_bgad +_eaaa );if _bced !=nil {return _f .Wrap (_bced ,_debcd ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _degd > 0{_adbcc ,_bced =_dbdeb .GetByte (_accac -_dbdeb .RowStride +_eaaa );if _bced !=nil {return _f .Wrap (_bced ,_debcd ,"\u0069\u0020\u003e \u0030");};_efbae |=_adbcc ;};if _eaaa > 0{_gcfc ,_bced =_dbdeb .GetByte (_accac +_eaaa -1);if _bced !=nil {return _f .Wrap (_bced ,_debcd ,"\u006a\u0020\u003e \u0030");};_efbae |=_gcfc <<7;};_efbae &=_edgd ;if _efbae ==0||(^_efbae )==0{if _bced =_dbdeb .SetByte (_accac +_eaaa ,_efbae );_bced !=nil {return _f .Wrap (_bced ,_debcd ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_ceaf =_efbae ;_efbae =(_efbae |(_efbae >>1)|(_efbae <<1))&_edgd ;if (_efbae ^_ceaf )==0{if _bced =_dbdeb .SetByte (_accac +_eaaa ,_efbae );_bced !=nil {return _f .Wrap (_bced ,_debcd ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _degd =_gadeg -1;_degd >=0;_degd --{_accac =_degd *_dbdeb .RowStride ;_bgad =_degd *_gbcbf .RowStride ;for _eaaa =_eegd -1;_eaaa >=0;_eaaa --{if _efbae ,_bced =_dbdeb .GetByte (_accac +_eaaa );_bced !=nil {return _f .Wrap (_bced ,_debcd ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _edgd ,_bced =_gbcbf .GetByte (_bgad +_eaaa );_bced !=nil {return _f .Wrap (_bced ,_debcd ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _degd < _gadeg -1{if _abccg ,_bced =_dbdeb .GetByte (_accac +_dbdeb .RowStride +_eaaa );_bced !=nil {return _f .Wrap (_bced ,_debcd ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_efbae |=_abccg ;};if _eaaa < _eegd -1{if _gdfaf ,_bced =_dbdeb .GetByte (_accac +_eaaa +1);_bced !=nil {return _f .Wrap (_bced ,_debcd ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_efbae |=_gdfaf >>7;};_efbae &=_edgd ;if _efbae ==0||(^_efbae )==0{if _bced =_dbdeb .SetByte (_accac +_eaaa ,_efbae );_bced !=nil {return _f .Wrap (_bced ,_debcd ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");};continue ;};for {_ceaf =_efbae ;_efbae =(_efbae |(_efbae >>1)|(_efbae <<1))&_edgd ;if (_efbae ^_ceaf )==0{if _bced =_dbdeb .SetByte (_accac +_eaaa ,_efbae );_bced !=nil {return _f .Wrap (_bced ,_debcd ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");};break ;};};};};return nil ;};func TstESymbol (t *_bb .T ,scale ...int )*Bitmap {_ccbd ,_cfcb :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_b .NoError (t ,_cfcb );return TstGetScaledSymbol (t ,_ccbd ,scale ...);};func _afbdg (_gbbf *_d .Stack ,_bbfgc ,_bbfc ,_cede ,_egcd ,_fdfa int ,_eefb *_fg .Rectangle )(_aedcd error ){const _cdfc ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";if _gbbf ==nil {return _f .Error (_cdfc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _eefb ==nil {return _f .Error (_cdfc ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");};_eefb .Min .X =_d .Min (_eefb .Min .X ,_bbfgc );_eefb .Max .X =_d .Max (_eefb .Max .X ,_bbfc );_eefb .Min .Y =_d .Min (_eefb .Min .Y ,_cede );_eefb .Max .Y =_d .Max (_eefb .Max .Y ,_cede );if !(_cede +_egcd >=0&&_cede +_egcd <=_fdfa ){return nil ;};if _gbbf .Aux ==nil {return _f .Error (_cdfc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _bfde *fillSegment ;_ecccd ,_fcac :=_gbbf .Aux .Pop ();if _fcac {if _bfde ,_fcac =_ecccd .(*fillSegment );!_fcac {return _f .Error (_cdfc ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_bfde =&fillSegment {};};_bfde ._cgfd =_bbfgc ;_bfde ._edaf =_bbfc ;_bfde ._gdab =_cede ;_bfde ._fbaa =_egcd ;_gbbf .Push (_bfde );return nil ;};func (_eacga *Bitmaps )SortByWidth (){_cfbe :=(*byWidth )(_eacga );_cc .Sort (_cfbe )};func _ad (_aae ,_acbc int )*Bitmap {return &Bitmap {Width :_aae ,Height :_acbc ,RowStride :(_aae +7)>>3};};func _dbga (_fece *_d .Stack )(_gfgcc *fillSegment ,_cfeg error ){const _bcadg ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _fece ==nil {return nil ,_f .Error (_bcadg ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _fece .Aux ==nil {return nil ,_f .Error (_bcadg ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_ggge ,_efac :=_fece .Pop ();if !_efac {return nil ,nil ;};_cbae ,_efac :=_ggge .(*fillSegment );if !_efac {return nil ,_f .Error (_bcadg ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_gfgcc =&fillSegment {_cbae ._cgfd ,_cbae ._edaf ,_cbae ._gdab +_cbae ._fbaa ,_cbae ._fbaa };_fece .Aux .Push (_cbae );return _gfgcc ,nil ;};func (_feb *Bitmap )String ()string {var _dcf ="\u000a";for _age :=0;_age < _feb .Height ;_age ++{var _gecb string ;for _dbd :=0;_dbd < _feb .Width ;_dbd ++{_agg :=_feb .GetPixel (_dbd ,_age );if _agg {_gecb +="\u0031";}else {_gecb +="\u0030";};};_dcf +=_gecb +"\u000a";};return _dcf ;};func (_babe *ClassedPoints )YAtIndex (i int )float32 {return (*_babe .Points )[_babe .IntSlice [i ]].Y };func (_fded *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_gdbga *Bitmaps ,_gbae error ){const _feba ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _fded ==nil {return nil ,_f .Error (_feba ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_f .Errorf (_feba ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_f .Errorf (_feba ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );};_egde ,_gbae :=_fded .makeSizeIndicator (width ,height ,tp ,relation );if _gbae !=nil {return nil ,_f .Wrap (_gbae ,_feba ,"");};_gdbga ,_gbae =_fded .selectByIndicator (_egde );if _gbae !=nil {return nil ,_f .Wrap (_gbae ,_feba ,"");};return _gdbga ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func MakePixelSumTab8 ()[]int {return _gagc ()};func _bbb (_ca ,_bd *Bitmap )(_df error ){const _ge ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_ga :=_bd .RowStride ;_ba :=_ca .RowStride ;var (_gc byte ;_ed uint16 ;_fb ,_gab ,_cg ,_ef ,_a int ;);for _cg =0;_cg < _bd .Height ;_cg ++{_fb =_cg *_ga ;_gab =2*_cg *_ba ;for _ef =0;_ef < _ga ;_ef ++{_gc =_bd .Data [_fb +_ef ];_ed =_cffgg [_gc ];_a =_gab +_ef *2;if _ca .RowStride !=_bd .RowStride *2&&(_ef +1)*2> _ca .RowStride {_df =_ca .SetByte (_a ,byte (_ed >>8));}else {_df =_ca .setTwoBytes (_a ,_ed );};if _df !=nil {return _f .Wrap (_df ,_ge ,"");};};for _ef =0;_ef < _ba ;_ef ++{_a =_gab +_ba +_ef ;_gc =_ca .Data [_gab +_ef ];if _df =_ca .SetByte (_a ,_gc );_df !=nil {return _f .Wrapf (_df ,_ge ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_gab +_ef ,_gab +_ba +_ef );};};};return nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_fbbg *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _acba ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_fbbg .IntSlice .Size (){return 0,_f .Errorf (_acba ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_fbbg .XAtIndex (i )),nil ;};type RasterOperator int ;type SizeComparison int ;func (_cdca *byHeight )Len ()int {return len (_cdca .Values )};func (_fegf *ClassedPoints )Len ()int {return _fegf .IntSlice .Size ()};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_dfdf float64 ,_aceg error ){const _fgde ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";if bm1 ==nil ||bm2 ==nil {return 0,_f .Error (_fgde ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_f .Error (_fgde ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if area1 <=0||area2 <=0{return 0,_f .Error (_fgde ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_dcecc ,_eddf :=bm1 .Width ,bm1 .Height ;_gcgb ,_fdde :=bm2 .Width ,bm2 .Height ;_aagd :=_cfaga (_dcecc -_gcgb );if _aagd > maxDiffW {return 0,nil ;};_fada :=_cfaga (_eddf -_fdde );if _fada > maxDiffH {return 0,nil ;};var _eecg ,_cadd int ;if delX >=0{_eecg =int (delX +0.5);}else {_eecg =int (delX -0.5);};if delY >=0{_cadd =int (delY +0.5);}else {_cadd =int (delY -0.5);};_edbc :=_edgb (_cadd ,0);_gdfg :=_dfdb (_fdde +_cadd ,_eddf );_cdee :=bm1 .RowStride *_edbc ;_gfge :=bm2 .RowStride *(_edbc -_cadd );_dbbb :=_edgb (_eecg ,0);_abgd :=_dfdb (_gcgb +_eecg ,_dcecc );_fffb :=bm2 .RowStride ;var _bccg ,_fcfc int ;if _eecg >=8{_bccg =_eecg >>3;_cdee +=_bccg ;_dbbb -=_bccg <<3;_abgd -=_bccg <<3;_eecg &=7;}else if _eecg <=-8{_fcfc =-((_eecg +7)>>3);_gfge +=_fcfc ;_fffb -=_fcfc ;_eecg +=_fcfc <<3;};if _dbbb >=_abgd ||_edbc >=_gdfg {return 0,nil ;};_ddfg :=(_abgd +7)>>3;var (_fcc ,_aaeg ,_fbfa byte ;_ddcb ,_ggbg ,_afbd int ;);switch {case _eecg ==0:for _afbd =_edbc ;_afbd < _gdfg ;_afbd ,_cdee ,_gfge =_afbd +1,_cdee +bm1 .RowStride ,_gfge +bm2 .RowStride {for _ggbg =0;_ggbg < _ddfg ;_ggbg ++{_fbfa =bm1 .Data [_cdee +_ggbg ]&bm2 .Data [_gfge +_ggbg ];_ddcb +=tab [_fbfa ];};};case _eecg > 0:if _fffb < _ddfg {for _afbd =_edbc ;_afbd < _gdfg ;_afbd ,_cdee ,_gfge =_afbd +1,_cdee +bm1 .RowStride ,_gfge +bm2 .RowStride {_fcc ,_aaeg =bm1 .Data [_cdee ],bm2 .Data [_gfge ]>>uint (_eecg );_fbfa =_fcc &_aaeg ;_ddcb +=tab [_fbfa ];for _ggbg =1;_ggbg < _fffb ;_ggbg ++{_fcc ,_aaeg =bm1 .Data [_cdee +_ggbg ],(bm2 .Data [_gfge +_ggbg ]>>uint (_eecg ))|(bm2 .Data [_gfge +_ggbg -1]<<uint (8-_eecg ));_fbfa =_fcc &_aaeg ;_ddcb +=tab [_fbfa ];};_fcc =bm1 .Data [_cdee +_ggbg ];_aaeg =bm2 .Data [_gfge +_ggbg -1]<<uint (8-_eecg );_fbfa =_fcc &_aaeg ;_ddcb +=tab [_fbfa ];};}else {for _afbd =_edbc ;_afbd < _gdfg ;_afbd ,_cdee ,_gfge =_afbd +1,_cdee +bm1 .RowStride ,_gfge +bm2 .RowStride {_fcc ,_aaeg =bm1 .Data [_cdee ],bm2 .Data [_gfge ]>>uint (_eecg );_fbfa =_fcc &_aaeg ;_ddcb +=tab [_fbfa ];for _ggbg =1;_ggbg < _ddfg ;_ggbg ++{_fcc =bm1 .Data [_cdee +_ggbg ];_aaeg =(bm2 .Data [_gfge +_ggbg ]>>uint (_eecg ))|(bm2 .Data [_gfge +_ggbg -1]<<uint (8-_eecg ));_fbfa =_fcc &_aaeg ;_ddcb +=tab [_fbfa ];};};};default:if _ddfg < _fffb {for _afbd =_edbc ;_afbd < _gdfg ;_afbd ,_cdee ,_gfge =_afbd +1,_cdee +bm1 .RowStride ,_gfge +bm2 .RowStride {for _ggbg =0;_ggbg < _ddfg ;_ggbg ++{_fcc =bm1 .Data [_cdee +_ggbg ];_aaeg =bm2 .Data [_gfge +_ggbg ]<<uint (-_eecg );_aaeg |=bm2 .Data [_gfge +_ggbg +1]>>uint (8+_eecg );_fbfa =_fcc &_aaeg ;_ddcb +=tab [_fbfa ];};};}else {for _afbd =_edbc ;_afbd < _gdfg ;_afbd ,_cdee ,_gfge =_afbd +1,_cdee +bm1 .RowStride ,_gfge +bm2 .RowStride {for _ggbg =0;_ggbg < _ddfg -1;_ggbg ++{_fcc =bm1 .Data [_cdee +_ggbg ];_aaeg =bm2 .Data [_gfge +_ggbg ]<<uint (-_eecg );_aaeg |=bm2 .Data [_gfge +_ggbg +1]>>uint (8+_eecg );_fbfa =_fcc &_aaeg ;_ddcb +=tab [_fbfa ];};_fcc =bm1 .Data [_cdee +_ggbg ];_aaeg =bm2 .Data [_gfge +_ggbg ]<<uint (-_eecg );_fbfa =_fcc &_aaeg ;_ddcb +=tab [_fbfa ];};};};_dfdf =float64 (_ddcb )*float64 (_ddcb )/(float64 (area1 )*float64 (area2 ));return _dfdf ,nil ;};func (_gbcb *Bitmap )centroid (_fbdbg ,_ddge []int )(Point ,error ){_ebb :=Point {};_gbcb .setPadBits (0);if len (_fbdbg )==0{_fbdbg =_febe ();};if len (_ddge )==0{_ddge =_gagc ();};var _faff ,_cac ,_gcag ,_dgcd ,_abef ,_cedg int ;var _debc byte ;for _abef =0;_abef < _gbcb .Height ;_abef ++{_bdbbe :=_gbcb .RowStride *_abef ;_dgcd =0;for _cedg =0;_cedg < _gbcb .RowStride ;_cedg ++{_debc =_gbcb .Data [_bdbbe +_cedg ];if _debc !=0{_dgcd +=_ddge [_debc ];_faff +=_fbdbg [_debc ]+_cedg *8*_ddge [_debc ];};};_gcag +=_dgcd ;_cac +=_dgcd *_abef ;};if _gcag !=0{_ebb .X =float32 (_faff )/float32 (_gcag );_ebb .Y =float32 (_cac )/float32 (_gcag );};return _ebb ,nil ;};func _aad (_ae *Bitmap ,_ac ,_bbcd int )(*Bitmap ,error ){const _dfb ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _ae ==nil {return nil ,_f .Error (_dfb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ac <=0||_bbcd <=0{return nil ,_f .Error (_dfb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _ac ==_bbcd {if _ac ==1{_bc ,_egc :=_acfb (nil ,_ae );if _egc !=nil {return nil ,_f .Wrap (_egc ,_dfb ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _bc ,nil ;};if _ac ==2||_ac ==4||_ac ==8{_bg ,_eb :=_cge (_ae ,_ac );if _eb !=nil {return nil ,_f .Wrap (_eb ,_dfb ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _bg ,nil ;};};_ce :=_ac *_ae .Width ;_bae :=_bbcd *_ae .Height ;_aea :=New (_ce ,_bae );_dec :=_aea .RowStride ;var (_gcd ,_dbc ,_ebc ,_fa ,_dfbd int ;_efbe byte ;_ec error ;);for _dbc =0;_dbc < _ae .Height ;_dbc ++{_gcd =_bbcd *_dbc *_dec ;for _ebc =0;_ebc < _ae .Width ;_ebc ++{if _ea :=_ae .GetPixel (_ebc ,_dbc );_ea {_dfbd =_ac *_ebc ;for _fa =0;_fa < _ac ;_fa ++{_aea .setBit (_gcd *8+_dfbd +_fa );};};};for _fa =1;_fa < _bbcd ;_fa ++{_fab :=_gcd +_fa *_dec ;for _cff :=0;_cff < _dec ;_cff ++{if _efbe ,_ec =_aea .GetByte (_gcd +_cff );_ec !=nil {return nil ,_f .Wrapf (_ec ,_dfb ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_fa );};if _ec =_aea .SetByte (_fab +_cff ,_efbe );_ec !=nil {return nil ,_f .Wrap (_ec ,_dfb ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _aea ,nil ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_begg :=_egge (h ,w ,"");_begg .setOrigin (cy ,cx );var _dbdgf ,_cbbd int ;for _dbdgf =0;_dbdgf < h ;_dbdgf ++{for _cbbd =0;_cbbd < w ;_cbbd ++{_begg .Data [_dbdgf ][_cbbd ]=tp ;};};return _begg ;};var MorphBC BoundaryCondition ;func _gafd (_ddfb *Bitmap ,_egdd *_d .Stack ,_fgeaa ,_abfa int )(_gcgbd *_fg .Rectangle ,_bfed error ){const _gce ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _ddfb ==nil {return nil ,_f .Error (_gce ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _egdd ==nil {return nil ,_f .Error (_gce ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_cdac ,_cdcgf :=_ddfb .Width ,_ddfb .Height ;_geffg :=_cdac -1;_deacf :=_cdcgf -1;if _fgeaa < 0||_fgeaa > _geffg ||_abfa < 0||_abfa > _deacf ||!_ddfb .GetPixel (_fgeaa ,_abfa ){return nil ,nil ;};_beaf :=_fg .Rect (100000,100000,0,0);if _bfed =_afbdg (_egdd ,_fgeaa ,_fgeaa ,_abfa ,1,_deacf ,&_beaf );_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bfed =_afbdg (_egdd ,_fgeaa ,_fgeaa ,_abfa +1,-1,_deacf ,&_beaf );_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_beaf .Min .X ,_beaf .Max .X =_fgeaa ,_fgeaa ;_beaf .Min .Y ,_beaf .Max .Y =_abfa ,_abfa ;var (_ebcd *fillSegment ;_dcafa int ;);for _egdd .Len ()> 0{if _ebcd ,_bfed =_dbga (_egdd );_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"");};_abfa =_ebcd ._gdab ;for _fgeaa =_ebcd ._cgfd -1;_fgeaa >=0&&_ddfb .GetPixel (_fgeaa ,_abfa );_fgeaa --{if _bfed =_ddfb .SetPixel (_fgeaa ,_abfa ,0);_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _fgeaa >=_ebcd ._cgfd -1{for {for _fgeaa ++;_fgeaa <=_ebcd ._edaf +1&&_fgeaa <=_geffg &&!_ddfb .GetPixel (_fgeaa ,_abfa );_fgeaa ++{};_dcafa =_fgeaa ;if !(_fgeaa <=_ebcd ._edaf +1&&_fgeaa <=_geffg ){break ;};for ;_fgeaa <=_geffg &&_ddfb .GetPixel (_fgeaa ,_abfa );_fgeaa ++{if _bfed =_ddfb .SetPixel (_fgeaa ,_abfa ,0);_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bfed =_afbdg (_egdd ,_dcafa ,_fgeaa -1,_ebcd ._gdab ,_ebcd ._fbaa ,_deacf ,&_beaf );_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fgeaa > _ebcd ._edaf {if _bfed =_afbdg (_egdd ,_ebcd ._edaf +1,_fgeaa -1,_ebcd ._gdab ,-_ebcd ._fbaa ,_deacf ,&_beaf );_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};};continue ;};_dcafa =_fgeaa +1;if _dcafa < _ebcd ._cgfd {if _bfed =_afbdg (_egdd ,_dcafa ,_ebcd ._cgfd -1,_ebcd ._gdab ,-_ebcd ._fbaa ,_deacf ,&_beaf );_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_fgeaa =_ebcd ._cgfd ;for {for ;_fgeaa <=_geffg &&_ddfb .GetPixel (_fgeaa ,_abfa );_fgeaa ++{if _bfed =_ddfb .SetPixel (_fgeaa ,_abfa ,0);_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bfed =_afbdg (_egdd ,_dcafa ,_fgeaa -1,_ebcd ._gdab ,_ebcd ._fbaa ,_deacf ,&_beaf );_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fgeaa > _ebcd ._edaf {if _bfed =_afbdg (_egdd ,_ebcd ._edaf +1,_fgeaa -1,_ebcd ._gdab ,-_ebcd ._fbaa ,_deacf ,&_beaf );_bfed !=nil {return nil ,_f .Wrap (_bfed ,_gce ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _fgeaa ++;_fgeaa <=_ebcd ._edaf +1&&_fgeaa <=_geffg &&!_ddfb .GetPixel (_fgeaa ,_abfa );_fgeaa ++{};_dcafa =_fgeaa ;if !(_fgeaa <=_ebcd ._edaf +1&&_fgeaa <=_geffg ){break ;};};};_beaf .Max .X ++;_beaf .Max .Y ++;return &_beaf ,nil ;};func _dc (_fbf *Bitmap ,_efe *Bitmap ,_fd int )(_aag error ){const _cdc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _fd {case 2:_aag =_bbb (_fbf ,_efe );case 4:_aag =_gag (_fbf ,_efe );case 8:_aag =_cad (_fbf ,_efe );default:return _f .Error (_cdc ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _aag !=nil {_aag =_f .Wrap (_aag ,_cdc ,"");};return _aag ;};func (_fedf *Bitmap )resizeImageData (_gcda *Bitmap )error {if _gcda ==nil {return _f .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fedf .SizesEqual (_gcda ){return nil ;};_fedf .Data =make ([]byte ,len (_gcda .Data ));_fedf .Width =_gcda .Width ;_fedf .Height =_gcda .Height ;_fedf .RowStride =_gcda .RowStride ;return nil ;};func _becec (_ebac *Bitmap )(_gbgf *Bitmap ,_cdcd int ,_ccbf error ){const _facaf ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _ebac ==nil {return nil ,0,_f .Errorf (_facaf ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _bccab ,_ddfe *Bitmap ;if _bccab ,_ccbf =_acfb (nil ,_ebac );_ccbf !=nil {return nil ,0,_f .Wrap (_ccbf ,_facaf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_egfg [13]int ;_gadfc ,_abdbb int ;);_dece :=12;_abcg :=_d .NewNumSlice (_dece +1);_acag :=_d .NewNumSlice (_dece +1);var _gcfg *Boxes ;for _cegab :=0;_cegab <=_dece ;_cegab ++{if _cegab ==0{if _ddfe ,_ccbf =_acfb (nil ,_bccab );_ccbf !=nil {return nil ,0,_f .Wrap (_ccbf ,_facaf ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _ddfe ,_ccbf =_fbdag (_bccab ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_ccbf !=nil {return nil ,0,_f .Wrap (_ccbf ,_facaf ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _gcfg ,_ccbf =_ddfe .connComponentsBB (4);_ccbf !=nil {return nil ,0,_f .Wrap (_ccbf ,_facaf ,"");};_egfg [_cegab ]=len (*_gcfg );_abcg .AddInt (_egfg [_cegab ]);switch _cegab {case 0:_gadfc =_egfg [0];default:_abdbb =_egfg [_cegab -1]-_egfg [_cegab ];_acag .AddInt (_abdbb );};_bccab =_ddfe ;};_afag :=true ;_bga :=2;var _gead ,_dfbag int ;for _cbbe :=1;_cbbe < len (*_acag );_cbbe ++{if _gead ,_ccbf =_abcg .GetInt (_cbbe );_ccbf !=nil {return nil ,0,_f .Wrap (_ccbf ,_facaf ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _afag &&_gead < int (0.3*float32 (_gadfc )){_bga =_cbbe +1;_afag =false ;};if _abdbb ,_ccbf =_acag .GetInt (_cbbe );_ccbf !=nil {return nil ,0,_f .Wrap (_ccbf ,_facaf ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _abdbb > _dfbag {_dfbag =_abdbb ;};};_bfgc :=_ebac .XResolution ;if _bfgc ==0{_bfgc =150;};if _bfgc > 110{_bga ++;};if _bga < 2{_dg .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");_bga =2;};_cdcd =_bga +1;if _gbgf ,_ccbf =_aead (nil ,_ebac ,_bga +1,1);_ccbf !=nil {return nil ,0,_f .Wrap (_ccbf ,_facaf ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _gbgf ,_cdcd ,nil ;};func (_gdgd *Points )AddPoint (x ,y float32 ){*_gdgd =append (*_gdgd ,Point {x ,y })};func (_ccad *Bitmaps )CountPixels ()*_d .NumSlice {_abeb :=&_d .NumSlice {};for _ ,_cbffe :=range _ccad .Values {_abeb .AddInt (_cbffe .CountPixels ());};return _abeb ;};func _fbdag (_dgbc *Bitmap ,_fbgf ...MorphProcess )(_ggcd *Bitmap ,_dcfc error ){const _bdeea ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _dgbc ==nil {return nil ,_f .Error (_bdeea ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if len (_fbgf )==0{return nil ,_f .Error (_bdeea ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _dcfc =_bfbd (_fbgf ...);_dcfc !=nil {return nil ,_f .Wrap (_dcfc ,_bdeea ,"");};var _fgabd ,_cbe ,_gdfe int ;_ggcd =_dgbc .Copy ();for _ ,_cdfb :=range _fbgf {switch _cdfb .Operation {case MopDilation :_fgabd ,_cbe =_cdfb .getWidthHeight ();_ggcd ,_dcfc =DilateBrick (nil ,_ggcd ,_fgabd ,_cbe );if _dcfc !=nil {return nil ,_f .Wrap (_dcfc ,_bdeea ,"");};case MopErosion :_fgabd ,_cbe =_cdfb .getWidthHeight ();_ggcd ,_dcfc =_cafd (nil ,_ggcd ,_fgabd ,_cbe );if _dcfc !=nil {return nil ,_f .Wrap (_dcfc ,_bdeea ,"");};case MopOpening :_fgabd ,_cbe =_cdfb .getWidthHeight ();_ggcd ,_dcfc =_egg (nil ,_ggcd ,_fgabd ,_cbe );if _dcfc !=nil {return nil ,_f .Wrap (_dcfc ,_bdeea ,"");};case MopClosing :_fgabd ,_cbe =_cdfb .getWidthHeight ();_ggcd ,_dcfc =_ebda (nil ,_ggcd ,_fgabd ,_cbe );if _dcfc !=nil {return nil ,_f .Wrap (_dcfc ,_bdeea ,"");};case MopRankBinaryReduction :_ggcd ,_dcfc =_bea (_ggcd ,_cdfb .Arguments ...);if _dcfc !=nil {return nil ,_f .Wrap (_dcfc ,_bdeea ,"");};case MopReplicativeBinaryExpansion :_ggcd ,_dcfc =_badc (_ggcd ,_cdfb .Arguments [0]);if _dcfc !=nil {return nil ,_f .Wrap (_dcfc ,_bdeea ,"");};case MopAddBorder :_gdfe =_cdfb .Arguments [0];_ggcd ,_dcfc =_ggcd .AddBorder (_gdfe ,0);if _dcfc !=nil {return nil ,_f .Wrap (_dcfc ,_bdeea ,"");};default:return nil ,_f .Error (_bdeea ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");};};if _gdfe > 0{_ggcd ,_dcfc =_ggcd .RemoveBorder (_gdfe );if _dcfc !=nil {return nil ,_f .Wrap (_dcfc ,_bdeea ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _ggcd ,nil ;};func (_ddde *ClassedPoints )SortByX (){_ddde ._afaf =_ddde .xSortFunction ();_cc .Sort (_ddde )};func _gedfg (_dfebg *Bitmap ,_caea ,_facdf int ,_cabc ,_bfff int ,_acde RasterOperator ){var (_ffcb int ;_afge byte ;_dfaf ,_bddc int ;_aedc int ;);_fbfae :=_cabc >>3;_ebbb :=_cabc &7;if _ebbb > 0{_afge =_abag [_ebbb ];};_ffcb =_dfebg .RowStride *_facdf +(_caea >>3);switch _acde {case PixClr :for _dfaf =0;_dfaf < _bfff ;_dfaf ++{_aedc =_ffcb +_dfaf *_dfebg .RowStride ;for _bddc =0;_bddc < _fbfae ;_bddc ++{_dfebg .Data [_aedc ]=0x0;_aedc ++;};if _ebbb > 0{_dfebg .Data [_aedc ]=_gbfb (_dfebg .Data [_aedc ],0x0,_afge );};};case PixSet :for _dfaf =0;_dfaf < _bfff ;_dfaf ++{_aedc =_ffcb +_dfaf *_dfebg .RowStride ;for _bddc =0;_bddc < _fbfae ;_bddc ++{_dfebg .Data [_aedc ]=0xff;_aedc ++;};if _ebbb > 0{_dfebg .Data [_aedc ]=_gbfb (_dfebg .Data [_aedc ],0xff,_afge );};};case PixNotDst :for _dfaf =0;_dfaf < _bfff ;_dfaf ++{_aedc =_ffcb +_dfaf *_dfebg .RowStride ;for _bddc =0;_bddc < _fbfae ;_bddc ++{_dfebg .Data [_aedc ]=^_dfebg .Data [_aedc ];_aedc ++;};if _ebbb > 0{_dfebg .Data [_aedc ]=_gbfb (_dfebg .Data [_aedc ],^_dfebg .Data [_aedc ],_afge );};};};};const _cbef =5000;func _bea (_fdg *Bitmap ,_fgfc ...int )(_gg *Bitmap ,_dda error ){const _cfa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _fdg ==nil {return nil ,_f .Error (_cfa ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_fgfc )==0||len (_fgfc )> 4{return nil ,_f .Error (_cfa ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");};if _fgfc [0]<=0{_dg .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_gg ,_dda =_acfb (nil ,_fdg );if _dda !=nil {return nil ,_f .Wrap (_dda ,_cfa ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");};return _gg ,nil ;};_dbg :=_fdd ();_gg =_fdg ;for _dbe ,_eae :=range _fgfc {if _eae <=0{break ;};_gg ,_dda =_fef (_gg ,_eae ,_dbg );if _dda !=nil {return nil ,_f .Wrapf (_dda ,_cfa ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_dbe );};};return _gg ,nil ;};func _baf (_afbc ,_ccdc *Bitmap ,_bfec ,_acdg ,_febf uint ,_cdaf ,_dcgg int ,_degc bool ,_deeg ,_fbab int )error {for _cfgg :=_cdaf ;_cfgg < _dcgg ;_cfgg ++{if _deeg +1< len (_afbc .Data ){_gegf :=_cfgg +1==_dcgg ;_gda ,_gdde :=_afbc .GetByte (_deeg );if _gdde !=nil {return _gdde ;};_deeg ++;_gda <<=_bfec ;_dbde ,_gdde :=_afbc .GetByte (_deeg );if _gdde !=nil {return _gdde ;};_dbde >>=_acdg ;_cegbc :=_gda |_dbde ;if _gegf &&!_degc {_cegbc =_edeb (_febf ,_cegbc );};_gdde =_ccdc .SetByte (_fbab ,_cegbc );if _gdde !=nil {return _gdde ;};_fbab ++;if _gegf &&_degc {_faca ,_defg :=_afbc .GetByte (_deeg );if _defg !=nil {return _defg ;};_faca <<=_bfec ;_cegbc =_edeb (_febf ,_faca );if _defg =_ccdc .SetByte (_fbab ,_cegbc );_defg !=nil {return _defg ;};};continue ;};_gfdf ,_acgb :=_afbc .GetByte (_deeg );if _acgb !=nil {_dg .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_deeg ,_acgb );return _acgb ;};_gfdf <<=_bfec ;_deeg ++;_acgb =_ccdc .SetByte (_fbab ,_gfdf );if _acgb !=nil {return _acgb ;};_fbab ++;};return nil ;};func (_gcdd *Bitmap )addBorderGeneral (_gga ,_bdf ,_fdbf ,_dea int ,_ccbe int )(*Bitmap ,error ){const _abae ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _gga < 0||_bdf < 0||_fdbf < 0||_dea < 0{return nil ,_f .Error (_abae ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_fgdf ,_caba :=_gcdd .Width ,_gcdd .Height ;_dgdg :=_fgdf +_gga +_bdf ;_ceb :=_caba +_fdbf +_dea ;_ccd :=New (_dgdg ,_ceb );_ccd .Color =_gcdd .Color ;_baa :=PixClr ;if _ccbe > 0{_baa =PixSet ;};_bfb :=_ccd .RasterOperation (0,0,_gga ,_ceb ,_baa ,nil ,0,0);if _bfb !=nil {return nil ,_f .Wrap (_bfb ,_abae ,"\u006c\u0065\u0066\u0074");};_bfb =_ccd .RasterOperation (_dgdg -_bdf ,0,_bdf ,_ceb ,_baa ,nil ,0,0);if _bfb !=nil {return nil ,_f .Wrap (_bfb ,_abae ,"\u0072\u0069\u0067h\u0074");};_bfb =_ccd .RasterOperation (0,0,_dgdg ,_fdbf ,_baa ,nil ,0,0);if _bfb !=nil {return nil ,_f .Wrap (_bfb ,_abae ,"\u0074\u006f\u0070");};_bfb =_ccd .RasterOperation (0,_ceb -_dea ,_dgdg ,_dea ,_baa ,nil ,0,0);if _bfb !=nil {return nil ,_f .Wrap (_bfb ,_abae ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_bfb =_ccd .RasterOperation (_gga ,_fdbf ,_fgdf ,_caba ,PixSrc ,_gcdd ,0,0);if _bfb !=nil {return nil ,_f .Wrap (_bfb ,_abae ,"\u0063\u006f\u0070\u0079");};return _ccd ,nil ;};func _bbbf ()(_ebf [256]uint16 ){for _af :=0;_af < 256;_af ++{if _af &0x01!=0{_ebf [_af ]|=0x3;};if _af &0x02!=0{_ebf [_af ]|=0xc;};if _af &0x04!=0{_ebf [_af ]|=0x30;};if _af &0x08!=0{_ebf [_af ]|=0xc0;};if _af &0x10!=0{_ebf [_af ]|=0x300;};if _af &0x20!=0{_ebf [_af ]|=0xc00;};if _af &0x40!=0{_ebf [_af ]|=0x3000;};if _af &0x80!=0{_ebf [_af ]|=0xc000;};};return _ebf ;};func _gbfb (_gecgd ,_dac ,_fbdaf byte )byte {return (_gecgd &^(_fbdaf ))|(_dac &_fbdaf )};func (_cfbg *Bitmaps )GetBox (i int )(*_fg .Rectangle ,error ){const _fdbfb ="\u0047\u0065\u0074\u0042\u006f\u0078";if _cfbg ==nil {return nil ,_f .Error (_fdbfb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_cfbg .Boxes )-1{return nil ,_f .Errorf (_fdbfb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cfbg .Boxes [i ],nil ;};func _dcged (_ggda ,_cegf ,_gacea *Bitmap )(*Bitmap ,error ){const _cfb ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _cegf ==nil {return nil ,_f .Error (_cfb ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gacea ==nil {return nil ,_f .Error (_cfb ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _gcdc error ;switch {case _ggda ==_cegf :if _gcdc =_ggda .RasterOperation (0,0,_cegf .Width ,_cegf .Height ,PixNotSrcAndDst ,_gacea ,0,0);_gcdc !=nil {return nil ,_f .Wrap (_gcdc ,_cfb ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _ggda ==_gacea :if _gcdc =_ggda .RasterOperation (0,0,_cegf .Width ,_cegf .Height ,PixNotSrcAndDst ,_cegf ,0,0);_gcdc !=nil {return nil ,_f .Wrap (_gcdc ,_cfb ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_ggda ,_gcdc =_acfb (_ggda ,_cegf );if _gcdc !=nil {return nil ,_f .Wrap (_gcdc ,_cfb ,"");};if _gcdc =_ggda .RasterOperation (0,0,_cegf .Width ,_cegf .Height ,PixNotSrcAndDst ,_gacea ,0,0);_gcdc !=nil {return nil ,_f .Wrap (_gcdc ,_cfb ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _ggda ,nil ;};func (_bege *Bitmap )InverseData (){_bege .inverseData ()};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func _fef (_beg *Bitmap ,_aac int ,_fefg []byte )(_ffd *Bitmap ,_ddb error ){const _gad ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _beg ==nil {return nil ,_f .Error (_gad ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _aac < 1||_aac > 4{return nil ,_f .Error (_gad ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _beg .Height <=1{return nil ,_f .Errorf (_gad ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_beg .Height );};_ffd =New (_beg .Width /2,_beg .Height /2);if _fefg ==nil {_fefg =_fdd ();};_ffg :=_dfdb (_beg .RowStride ,2*_ffd .RowStride );switch _aac {case 1:_ddb =_eff (_beg ,_ffd ,_aac ,_fefg ,_ffg );case 2:_ddb =_ead (_beg ,_ffd ,_aac ,_fefg ,_ffg );case 3:_ddb =_ffa (_beg ,_ffd ,_aac ,_fefg ,_ffg );case 4:_ddb =_ggc (_beg ,_ffd ,_aac ,_fefg ,_ffg );};if _ddb !=nil {return nil ,_ddb ;};return _ffd ,nil ;};func _dgf (_gfbc *Bitmap ,_gfba ,_edag int ,_bfcf ,_ffcd int ,_gcaf RasterOperator ){var (_cece bool ;_fcaf bool ;_ecgaa int ;_gfcg int ;_cggf int ;_egfgd int ;_bdfc bool ;_dgdc byte ;);_faa :=8-(_gfba &7);_fbdgd :=_ebca [_faa ];_begbe :=_gfbc .RowStride *_edag +(_gfba >>3);if _bfcf < _faa {_cece =true ;_fbdgd &=_abag [8-_faa +_bfcf ];};if !_cece {_ecgaa =(_bfcf -_faa )>>3;if _ecgaa !=0{_fcaf =true ;_gfcg =_begbe +1;};};_cggf =(_gfba +_bfcf )&7;if !(_cece ||_cggf ==0){_bdfc =true ;_dgdc =_abag [_cggf ];_egfgd =_begbe +1+_ecgaa ;};var _aabb ,_daeg int ;switch _gcaf {case PixClr :for _aabb =0;_aabb < _ffcd ;_aabb ++{_gfbc .Data [_begbe ]=_gbfb (_gfbc .Data [_begbe ],0x0,_fbdgd );_begbe +=_gfbc .RowStride ;};if _fcaf {for _aabb =0;_aabb < _ffcd ;_aabb ++{for _daeg =0;_daeg < _ecgaa ;_daeg ++{_gfbc .Data [_gfcg +_daeg ]=0x0;};_gfcg +=_gfbc .RowStride ;};};if _bdfc {for _aabb =0;_aabb < _ffcd ;_aabb ++{_gfbc .Data [_egfgd ]=_gbfb (_gfbc .Data [_egfgd ],0x0,_dgdc );_egfgd +=_gfbc .RowStride ;};};case PixSet :for _aabb =0;_aabb < _ffcd ;_aabb ++{_gfbc .Data [_begbe ]=_gbfb (_gfbc .Data [_begbe ],0xff,_fbdgd );_begbe +=_gfbc .RowStride ;};if _fcaf {for _aabb =0;_aabb < _ffcd ;_aabb ++{for _daeg =0;_daeg < _ecgaa ;_daeg ++{_gfbc .Data [_gfcg +_daeg ]=0xff;};_gfcg +=_gfbc .RowStride ;};};if _bdfc {for _aabb =0;_aabb < _ffcd ;_aabb ++{_gfbc .Data [_egfgd ]=_gbfb (_gfbc .Data [_egfgd ],0xff,_dgdc );_egfgd +=_gfbc .RowStride ;};};case PixNotDst :for _aabb =0;_aabb < _ffcd ;_aabb ++{_gfbc .Data [_begbe ]=_gbfb (_gfbc .Data [_begbe ],^_gfbc .Data [_begbe ],_fbdgd );_begbe +=_gfbc .RowStride ;};if _fcaf {for _aabb =0;_aabb < _ffcd ;_aabb ++{for _daeg =0;_daeg < _ecgaa ;_daeg ++{_gfbc .Data [_gfcg +_daeg ]=^(_gfbc .Data [_gfcg +_daeg ]);};_gfcg +=_gfbc .RowStride ;};};if _bdfc {for _aabb =0;_aabb < _ffcd ;_aabb ++{_gfbc .Data [_egfgd ]=_gbfb (_gfbc .Data [_egfgd ],^_gfbc .Data [_egfgd ],_dgdc );_egfgd +=_gfbc .RowStride ;};};};};func _cbbge (_ggf ,_fdgf *Bitmap ,_cfbdb *Selection )(*Bitmap ,error ){const _dad ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _caa error ;if _ggf ,_caa =_ffgc (_ggf ,_fdgf ,_cfbdb );_caa !=nil {return nil ,_caa ;};_cgf ,_caa :=_dbbf (nil ,_fdgf ,_cfbdb );if _caa !=nil {return nil ,_f .Wrap (_caa ,_dad ,"");};if _ ,_caa =_adga (_ggf ,_cgf ,_cfbdb );_caa !=nil {return nil ,_f .Wrap (_caa ,_dad ,"");};return _ggf ,nil ;};func (_bfe *Bitmap )And (s *Bitmap )(_deg *Bitmap ,_fcd error ){const _ecd ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _bfe ==nil {return nil ,_f .Error (_ecd ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_f .Error (_ecd ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_bfe .SizesEqual (s ){_dg .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_ecd );};if _deg ,_fcd =_acfb (_deg ,_bfe );_fcd !=nil {return nil ,_f .Wrap (_fcd ,_ecd ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fcd =_deg .RasterOperation (0,0,_deg .Width ,_deg .Height ,PixSrcAndDst ,s ,0,0);_fcd !=nil {return nil ,_f .Wrap (_fcd ,_ecd ,"");};return _deg ,nil ;};func (_fgfa *Bitmap )Copy ()*Bitmap {_cfge :=make ([]byte ,len (_fgfa .Data ));copy (_cfge ,_fgfa .Data );return &Bitmap {Width :_fgfa .Width ,Height :_fgfa .Height ,RowStride :_fgfa .RowStride ,Data :_cfge ,Color :_fgfa .Color ,Text :_fgfa .Text ,BitmapNumber :_fgfa .BitmapNumber ,Special :_fgfa .Special };};func _dfdb (_bdbc ,_dge int )int {if _bdbc < _dge {return _bdbc ;};return _dge ;};func _cafd (_bfca ,_cdef *Bitmap ,_cefg ,_fdgb int )(*Bitmap ,error ){const _cbca ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _cdef ==nil {return nil ,_f .Error (_cbca ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cefg < 1||_fdgb < 1{return nil ,_f .Error (_cbca ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _cefg ==1&&_fdgb ==1{_dbgc ,_bdeg :=_acfb (_bfca ,_cdef );if _bdeg !=nil {return nil ,_f .Wrap (_bdeg ,_cbca ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _dbgc ,nil ;};if _cefg ==1||_fdgb ==1{_dceac :=SelCreateBrick (_fdgb ,_cefg ,_fdgb /2,_cefg /2,SelHit );_efef ,_fgcc :=_adga (_bfca ,_cdef ,_dceac );if _fgcc !=nil {return nil ,_f .Wrap (_fgcc ,_cbca ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _efef ,nil ;};_cccc :=SelCreateBrick (1,_cefg ,0,_cefg /2,SelHit );_ggec :=SelCreateBrick (_fdgb ,1,_fdgb /2,0,SelHit );_bged ,_cfec :=_adga (nil ,_cdef ,_cccc );if _cfec !=nil {return nil ,_f .Wrap (_cfec ,_cbca ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_bfca ,_cfec =_adga (_bfca ,_bged ,_ggec );if _cfec !=nil {return nil ,_f .Wrap (_cfec ,_cbca ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bfca ,nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func _bdda (_ecga *Bitmap ,_gebc ,_egga ,_gbga ,_bbca int ,_fcfd RasterOperator ,_baag *Bitmap ,_cddfg ,_begb int )error {var (_afbf bool ;_bgcg bool ;_ggfe int ;_bdfa int ;_gcabb int ;_cfebg bool ;_bbbg byte ;_cdbg int ;_dafb int ;_aadd int ;_abgf ,_geac int ;);_ffbda :=8-(_gebc &7);_cebb :=_ebca [_ffbda ];_aegg :=_ecga .RowStride *_egga +(_gebc >>3);_aged :=_baag .RowStride *_begb +(_cddfg >>3);if _gbga < _ffbda {_afbf =true ;_cebb &=_abag [8-_ffbda +_gbga ];};if !_afbf {_ggfe =(_gbga -_ffbda )>>3;if _ggfe > 0{_bgcg =true ;_bdfa =_aegg +1;_gcabb =_aged +1;};};_cdbg =(_gebc +_gbga )&7;if !(_afbf ||_cdbg ==0){_cfebg =true ;_bbbg =_abag [_cdbg ];_dafb =_aegg +1+_ggfe ;_aadd =_aged +1+_ggfe ;};switch _fcfd {case PixSrc :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],_baag .Data [_aged ],_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]=_baag .Data [_gcabb +_geac ];};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],_baag .Data [_aadd ],_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixNotSrc :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],^_baag .Data [_aged ],_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]=^_baag .Data [_gcabb +_geac ];};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],^_baag .Data [_aadd ],_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixSrcOrDst :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],_baag .Data [_aged ]|_ecga .Data [_aegg ],_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]|=_baag .Data [_gcabb +_geac ];};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],_baag .Data [_aadd ]|_ecga .Data [_dafb ],_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixSrcAndDst :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],_baag .Data [_aged ]&_ecga .Data [_aegg ],_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]&=_baag .Data [_gcabb +_geac ];};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],_baag .Data [_aadd ]&_ecga .Data [_dafb ],_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixSrcXorDst :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],_baag .Data [_aged ]^_ecga .Data [_aegg ],_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]^=_baag .Data [_gcabb +_geac ];};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],_baag .Data [_aadd ]^_ecga .Data [_dafb ],_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixNotSrcOrDst :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],^(_baag .Data [_aged ])|_ecga .Data [_aegg ],_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]|=^(_baag .Data [_gcabb +_geac ]);};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],^(_baag .Data [_aadd ])|_ecga .Data [_dafb ],_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixNotSrcAndDst :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],^(_baag .Data [_aged ])&_ecga .Data [_aegg ],_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]&=^_baag .Data [_gcabb +_geac ];};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],^(_baag .Data [_aadd ])&_ecga .Data [_dafb ],_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixSrcOrNotDst :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],_baag .Data [_aged ]|^(_ecga .Data [_aegg ]),_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]=_baag .Data [_gcabb +_geac ]|^(_ecga .Data [_bdfa +_geac ]);};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],_baag .Data [_aadd ]|^(_ecga .Data [_dafb ]),_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixSrcAndNotDst :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],_baag .Data [_aged ]&^(_ecga .Data [_aegg ]),_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]=_baag .Data [_gcabb +_geac ]&^(_ecga .Data [_bdfa +_geac ]);};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],_baag .Data [_aadd ]&^(_ecga .Data [_dafb ]),_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixNotPixSrcOrDst :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],^(_baag .Data [_aged ]|_ecga .Data [_aegg ]),_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]=^(_baag .Data [_gcabb +_geac ]|_ecga .Data [_bdfa +_geac ]);};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],^(_baag .Data [_aadd ]|_ecga .Data [_dafb ]),_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixNotPixSrcAndDst :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],^(_baag .Data [_aged ]&_ecga .Data [_aegg ]),_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]=^(_baag .Data [_gcabb +_geac ]&_ecga .Data [_bdfa +_geac ]);};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],^(_baag .Data [_aadd ]&_ecga .Data [_dafb ]),_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};case PixNotPixSrcXorDst :for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_aegg ]=_gbfb (_ecga .Data [_aegg ],^(_baag .Data [_aged ]^_ecga .Data [_aegg ]),_cebb );_aegg +=_ecga .RowStride ;_aged +=_baag .RowStride ;};if _bgcg {for _abgf =0;_abgf < _bbca ;_abgf ++{for _geac =0;_geac < _ggfe ;_geac ++{_ecga .Data [_bdfa +_geac ]=^(_baag .Data [_gcabb +_geac ]^_ecga .Data [_bdfa +_geac ]);};_bdfa +=_ecga .RowStride ;_gcabb +=_baag .RowStride ;};};if _cfebg {for _abgf =0;_abgf < _bbca ;_abgf ++{_ecga .Data [_dafb ]=_gbfb (_ecga .Data [_dafb ],^(_baag .Data [_aadd ]^_ecga .Data [_dafb ]),_bbbg );_dafb +=_ecga .RowStride ;_aadd +=_baag .RowStride ;};};default:_dg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_fcfd );return _f .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_caff *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_gaca *Bitmaps ,_ada *Boxes ,_eacf error ){const _egcg ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _caff ==nil {return nil ,nil ,_f .Error (_egcg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_f .Error (_egcg ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");};if _caff .Zero (){_ada =&Boxes {};_gaca =&Bitmaps {};return _gaca ,_ada ,nil ;};switch components {case ComponentConn :_gaca =&Bitmaps {};if _ada ,_eacf =_caff .ConnComponents (_gaca ,8);_eacf !=nil {return nil ,nil ,_f .Wrap (_eacf ,_egcg ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentCharacters :_bag ,_bdaga :=MorphSequence (_caff ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _bdaga !=nil {return nil ,nil ,_f .Wrap (_bdaga ,_egcg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _dg .Log .IsLogLevel (_dg .LogLevelTrace ){_dg .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_bag .String ());};_ddf :=&Bitmaps {};_ada ,_bdaga =_bag .ConnComponents (_ddf ,8);if _bdaga !=nil {return nil ,nil ,_f .Wrap (_bdaga ,_egcg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _dg .Log .IsLogLevel (_dg .LogLevelTrace ){_dg .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_ddf .String ());};if _gaca ,_bdaga =_ddf .ClipToBitmap (_caff );_bdaga !=nil {return nil ,nil ,_f .Wrap (_bdaga ,_egcg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_dfdd :=1;var _dgcc *Bitmap ;switch {case _caff .XResolution <=200:_dgcc =_caff ;case _caff .XResolution <=400:_dfdd =2;_dgcc ,_eacf =_bea (_caff ,1,0,0,0);if _eacf !=nil {return nil ,nil ,_f .Wrap (_eacf ,_egcg ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");};default:_dfdd =4;_dgcc ,_eacf =_bea (_caff ,1,1,0,0);if _eacf !=nil {return nil ,nil ,_f .Wrap (_eacf ,_egcg ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");};};_eaga ,_ ,_afg :=_becec (_dgcc );if _afg !=nil {return nil ,nil ,_f .Wrap (_afg ,_egcg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_dfae ,_afg :=_badc (_eaga ,_dfdd );if _afg !=nil {return nil ,nil ,_f .Wrap (_afg ,_egcg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_dcgga :=&Bitmaps {};if _ada ,_afg =_dfae .ConnComponents (_dcgga ,4);_afg !=nil {return nil ,nil ,_f .Wrap (_afg ,_egcg ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");};if _gaca ,_afg =_dcgga .ClipToBitmap (_caff );_afg !=nil {return nil ,nil ,_f .Wrap (_afg ,_egcg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_gaca ,_eacf =_gaca .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _eacf !=nil {return nil ,nil ,_f .Wrap (_eacf ,_egcg ,"");};_ada ,_eacf =_ada .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _eacf !=nil {return nil ,nil ,_f .Wrap (_eacf ,_egcg ,"");};return _gaca ,_ada ,nil ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func TstImageBitmapData ()[]byte {return _ebdaa .Data };func _ffgc (_bggf ,_bbfb *Bitmap ,_bcba *Selection )(*Bitmap ,error ){const _abge ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _debag ,_cfed int ;if _bbfb ==nil {return nil ,_f .Error (_abge ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _bcba ==nil {return nil ,_f .Error (_abge ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_debag =_bcba .Width ;_cfed =_bcba .Height ;if _debag ==0||_cfed ==0{return nil ,_f .Error (_abge ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _bggf ==nil {return _bbfb .createTemplate (),nil ;};if _edff :=_bggf .resizeImageData (_bbfb );_edff !=nil {return nil ,_edff ;};return _bggf ,nil ;};func (_cfecd *Selection )setOrigin (_fgca ,_cgaad int ){_cfecd .Cy ,_cfecd .Cx =_fgca ,_cgaad };func (_badd Points )GetGeometry (i int )(_feg ,_dgbbb float32 ,_dggc error ){if i > len (_badd )-1{return 0,0,_f .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_cbad :=_badd [i ];return _cbad .X ,_cbad .Y ,nil ;};func _bfbd (_baab ...MorphProcess )(_gfag error ){const _aaa ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _afdb ,_ebcb int ;for _abefd ,_cbaad :=range _baab {if _gfag =_cbaad .verify (_abefd ,&_afdb ,&_ebcb );_gfag !=nil {return _f .Wrap (_gfag ,_aaa ,"");};};if _ebcb !=0&&_afdb !=0{return _f .Error (_aaa ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");};return nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _fefd (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_egfbg *Bitmaps )Size ()int {return len (_egfbg .Values )};func (_fgcf *BitmapsArray )AddBox (box *_fg .Rectangle ){_fgcf .Boxes =append (_fgcf .Boxes ,box )};func (_ccbg *Bitmaps )WidthSorter ()func (_afeca ,_bbae int )bool {return func (_bbede ,_ffbf int )bool {return _ccbg .Values [_bbede ].Width < _ccbg .Values [_ffbf ].Width };};func _fgab (_eegc ,_fbbaa *Bitmap ,_baea ,_gbcf ,_aggb ,_cga ,_dgea int ,_cccfe CombinationOperator )error {var _eged int ;_acbd :=func (){_eged ++;_aggb +=_fbbaa .RowStride ;_cga +=_eegc .RowStride ;_dgea +=_eegc .RowStride };for _eged =_baea ;_eged < _gbcf ;_acbd (){_cbbfa :=_aggb ;for _fecb :=_cga ;_fecb <=_dgea ;_fecb ++{_fgce ,_dffd :=_fbbaa .GetByte (_cbbfa );if _dffd !=nil {return _dffd ;};_gddf ,_dffd :=_eegc .GetByte (_fecb );if _dffd !=nil {return _dffd ;};if _dffd =_fbbaa .SetByte (_cbbfa ,_cbfb (_fgce ,_gddf ,_cccfe ));_dffd !=nil {return _dffd ;};_cbbfa ++;};};return nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_eaac *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _eefab ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_eaac .IntSlice .Size (){return 0,_f .Errorf (_eefab ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_eaac .YAtIndex (i )),nil ;};func (_cffef *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _bbcc ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _cffef ==nil {return nil ,_f .Error (_bbcc ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_f .Error (_bbcc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_adddb :=len (_cffef .Values );_gffe :=&Bitmaps {Values :make ([]*Bitmap ,_adddb ),Boxes :make ([]*_fg .Rectangle ,_adddb )};var (_eefe ,_abdf *Bitmap ;_dbba *_fg .Rectangle ;_ggga error ;);for _cgfa :=0;_cgfa < _adddb ;_cgfa ++{if _eefe ,_ggga =_cffef .GetBitmap (_cgfa );_ggga !=nil {return nil ,_f .Wrap (_ggga ,_bbcc ,"");};if _dbba ,_ggga =_cffef .GetBox (_cgfa );_ggga !=nil {return nil ,_f .Wrap (_ggga ,_bbcc ,"");};if _abdf ,_ggga =s .clipRectangle (_dbba ,nil );_ggga !=nil {return nil ,_f .Wrap (_ggga ,_bbcc ,"");};if _abdf ,_ggga =_abdf .And (_eefe );_ggga !=nil {return nil ,_f .Wrap (_ggga ,_bbcc ,"");};_gffe .Values [_cgfa ]=_abdf ;_gffe .Boxes [_cgfa ]=_dbba ;};return _gffe ,nil ;};func (_agddb *ClassedPoints )SortByY (){_agddb ._afaf =_agddb .ySortFunction ();_cc .Sort (_agddb )};func (_fgedb Points )XSorter ()func (_gedf ,_gabf int )bool {return func (_bbdd ,_baeb int )bool {return _fgedb [_bbdd ].X < _fgedb [_baeb ].X };};func TstRSymbol (t *_bb .T ,scale ...int )*Bitmap {_cecd ,_fddc :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_b .NoError (t ,_fddc );return TstGetScaledSymbol (t ,_cecd ,scale ...);};func (_ageb *Bitmap )nextOnPixel (_babf ,_gfg int )(_caeg _fg .Point ,_aefe bool ,_adbb error ){const _dfa ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_caeg ,_aefe ,_adbb =_ageb .nextOnPixelLow (_ageb .Width ,_ageb .Height ,_ageb .RowStride ,_babf ,_gfg );if _adbb !=nil {return _caeg ,false ,_f .Wrap (_adbb ,_dfa ,"");};return _caeg ,_aefe ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func _ebda (_edfaa ,_fcadg *Bitmap ,_dbeeb ,_dcbfg int )(*Bitmap ,error ){const _bfba ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _fcadg ==nil {return nil ,_f .Error (_bfba ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dbeeb < 1||_dcbfg < 1{return nil ,_f .Error (_bfba ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _dbeeb ==1&&_dcbfg ==1{return _acfb (_edfaa ,_fcadg );};if MorphBC ==SymmetricMorphBC {_efbf ,_bfgdd :=_aead (_edfaa ,_fcadg ,_dbeeb ,_dcbfg );if _bfgdd !=nil {return nil ,_f .Wrap (_bfgdd ,_bfba ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _efbf ,nil ;};_cfdd :=_edgb (_dbeeb /2,_dcbfg /2);_ggag :=8*((_cfdd +7)/8);_bbbfe ,_cbgc :=_fcadg .AddBorder (_ggag ,0);if _cbgc !=nil {return nil ,_f .Wrapf (_cbgc ,_bfba ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_ggag );};var _cabe ,_ddcd *Bitmap ;if _dbeeb ==1||_dcbfg ==1{_aagc :=SelCreateBrick (_dcbfg ,_dbeeb ,_dcbfg /2,_dbeeb /2,SelHit );_cabe ,_cbgc =_cbbge (nil ,_bbbfe ,_aagc );if _cbgc !=nil {return nil ,_f .Wrap (_cbgc ,_bfba ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_afee :=SelCreateBrick (1,_dbeeb ,0,_dbeeb /2,SelHit );_cacc ,_acgc :=_dbbf (nil ,_bbbfe ,_afee );if _acgc !=nil {return nil ,_f .Wrap (_acgc ,_bfba ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_gcdb :=SelCreateBrick (_dcbfg ,1,_dcbfg /2,0,SelHit );_cabe ,_acgc =_dbbf (nil ,_cacc ,_gcdb );if _acgc !=nil {return nil ,_f .Wrap (_acgc ,_bfba ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_acgc =_adga (_cacc ,_cabe ,_afee );_acgc !=nil {return nil ,_f .Wrap (_acgc ,_bfba ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_acgc =_adga (_cabe ,_cacc ,_gcdb );_acgc !=nil {return nil ,_f .Wrap (_acgc ,_bfba ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");};};if _ddcd ,_cbgc =_cabe .RemoveBorder (_ggag );_cbgc !=nil {return nil ,_f .Wrap (_cbgc ,_bfba ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _edfaa ==nil {return _ddcd ,nil ;};if _ ,_cbgc =_acfb (_edfaa ,_ddcd );_cbgc !=nil {return nil ,_cbgc ;};return _edfaa ,nil ;};func TstPSymbol (t *_bb .T )*Bitmap {t .Helper ();_gcga :=New (5,8);_b .NoError (t ,_gcga .SetPixel (0,0,1));_b .NoError (t ,_gcga .SetPixel (1,0,1));_b .NoError (t ,_gcga .SetPixel (2,0,1));_b .NoError (t ,_gcga .SetPixel (3,0,1));_b .NoError (t ,_gcga .SetPixel (4,1,1));_b .NoError (t ,_gcga .SetPixel (0,1,1));_b .NoError (t ,_gcga .SetPixel (4,2,1));_b .NoError (t ,_gcga .SetPixel (0,2,1));_b .NoError (t ,_gcga .SetPixel (4,3,1));_b .NoError (t ,_gcga .SetPixel (0,3,1));_b .NoError (t ,_gcga .SetPixel (0,4,1));_b .NoError (t ,_gcga .SetPixel (1,4,1));_b .NoError (t ,_gcga .SetPixel (2,4,1));_b .NoError (t ,_gcga .SetPixel (3,4,1));_b .NoError (t ,_gcga .SetPixel (0,5,1));_b .NoError (t ,_gcga .SetPixel (0,6,1));_b .NoError (t ,_gcga .SetPixel (0,7,1));return _gcga ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _cbfb (oldByte ,newByte ,op );};var (_cffgg =_bbbf ();_gccb =_acg ();_gebd =_gdef (););func TstASymbol (t *_bb .T )*Bitmap {t .Helper ();_fcdgg :=New (6,6);_b .NoError (t ,_fcdgg .SetPixel (1,0,1));_b .NoError (t ,_fcdgg .SetPixel (2,0,1));_b .NoError (t ,_fcdgg .SetPixel (3,0,1));_b .NoError (t ,_fcdgg .SetPixel (4,0,1));_b .NoError (t ,_fcdgg .SetPixel (5,1,1));_b .NoError (t ,_fcdgg .SetPixel (1,2,1));_b .NoError (t ,_fcdgg .SetPixel (2,2,1));_b .NoError (t ,_fcdgg .SetPixel (3,2,1));_b .NoError (t ,_fcdgg .SetPixel (4,2,1));_b .NoError (t ,_fcdgg .SetPixel (5,2,1));_b .NoError (t ,_fcdgg .SetPixel (0,3,1));_b .NoError (t ,_fcdgg .SetPixel (5,3,1));_b .NoError (t ,_fcdgg .SetPixel (0,4,1));_b .NoError (t ,_fcdgg .SetPixel (5,4,1));_b .NoError (t ,_fcdgg .SetPixel (1,5,1));_b .NoError (t ,_fcdgg .SetPixel (2,5,1));_b .NoError (t ,_fcdgg .SetPixel (3,5,1));_b .NoError (t ,_fcdgg .SetPixel (4,5,1));_b .NoError (t ,_fcdgg .SetPixel (5,5,1));return _fcdgg ;};var (_fccf *Bitmap ;_ebdaa *Bitmap ;);func (_fbebb *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_deda *Boxes ,_dafga error ){const _bdbb ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _fbebb ==nil {return nil ,_f .Error (_bdbb ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_f .Error (_bdbb ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _deda ,_dafga =_fbebb .connComponentsBB (connectivity );_dafga !=nil {return nil ,_f .Wrap (_dafga ,_bdbb ,"");};}else {if _deda ,_dafga =_fbebb .connComponentsBitmapsBB (bms ,connectivity );_dafga !=nil {return nil ,_f .Wrap (_dafga ,_bdbb ,"");};};return _deda ,nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func TstFrameBitmap ()*Bitmap {return _fccf .Copy ()};func _fdd ()(_bda []byte ){_bda =make ([]byte ,256);for _cbff :=0;_cbff < 256;_cbff ++{_acb :=byte (_cbff );_bda [_acb ]=(_acb &0x01)|((_acb &0x04)>>1)|((_acb &0x10)>>2)|((_acb &0x40)>>3)|((_acb &0x02)<<3)|((_acb &0x08)<<2)|((_acb &0x20)<<1)|(_acb &0x80);};return _bda ;};func (_gbdd *Bitmap )ToImage ()_fg .Image {_gge ,_bge :=_cd .NewImage (_gbdd .Width ,_gbdd .Height ,1,1,_gbdd .Data ,nil ,nil );if _bge !=nil {_dg .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bge );};return _gge ;};func _eab (_acge ,_bcg ,_dfff *Bitmap )(*Bitmap ,error ){const _dcbf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _bcg ==nil {return nil ,_f .Error (_dcbf ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dfff ==nil {return nil ,_f .Error (_dcbf ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _acge ==_dfff {return nil ,_f .Error (_dcbf ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_bcg .SizesEqual (_dfff ){_dg .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_dcbf );};var _accc error ;if _acge ,_accc =_acfb (_acge ,_bcg );_accc !=nil {return nil ,_f .Wrap (_accc ,_dcbf ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _accc =_acge .RasterOperation (0,0,_acge .Width ,_acge .Height ,PixSrcXorDst ,_dfff ,0,0);_accc !=nil {return nil ,_f .Wrap (_accc ,_dcbf ,"");};return _acge ,nil ;};func (_cfca *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _gdbb ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _cfca ==nil {return nil ,_f .Error (_gdbb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_cfca .Values )-1{return nil ,_f .Errorf (_gdbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cfca .Values [i ],nil ;};func (_cbfc *Bitmap )setFourBytes (_ecadg int ,_bgdf uint32 )error {if _ecadg +3> len (_cbfc .Data )-1{return _f .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ecadg );};_cbfc .Data [_ecadg ]=byte ((_bgdf &0xff000000)>>24);_cbfc .Data [_ecadg +1]=byte ((_bgdf &0xff0000)>>16);_cbfc .Data [_ecadg +2]=byte ((_bgdf &0xff00)>>8);_cbfc .Data [_ecadg +3]=byte (_bgdf &0xff);return nil ;};func (_eec *Boxes )Add (box *_fg .Rectangle )error {if _eec ==nil {return _f .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_eec =append (*_eec ,box );return nil ;};type BoundaryCondition int ;func Extract (roi _fg .Rectangle ,src *Bitmap )(*Bitmap ,error ){_fda :=New (roi .Dx (),roi .Dy ());_dcag :=roi .Min .X &0x07;_cee :=8-_dcag ;_deee :=uint (8-_fda .Width &0x07);_cgd :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_efcb :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_eed :=_fda .RowStride ==_efcb +1-_cgd ;var _gbe int ;for _aagea :=roi .Min .Y ;_aagea < roi .Max .Y ;_aagea ++{_bgec :=_cgd ;_gbed :=_gbe ;switch {case _cgd ==_efcb :_cgbb ,_efga :=src .GetByte (_bgec );if _efga !=nil {return nil ,_efga ;};_cgbb <<=uint (_dcag );_efga =_fda .SetByte (_gbed ,_edeb (_deee ,_cgbb ));if _efga !=nil {return nil ,_efga ;};case _dcag ==0:for _abecc :=_cgd ;_abecc <=_efcb ;_abecc ++{_beacc ,_daba :=src .GetByte (_bgec );if _daba !=nil {return nil ,_daba ;};_bgec ++;if _abecc ==_efcb &&_eed {_beacc =_edeb (_deee ,_beacc );};_daba =_fda .SetByte (_gbed ,_beacc );if _daba !=nil {return nil ,_daba ;};_gbed ++;};default:_bede :=_baf (src ,_fda ,uint (_dcag ),uint (_cee ),_deee ,_cgd ,_efcb ,_eed ,_bgec ,_gbed );if _bede !=nil {return nil ,_bede ;};};_cgd +=src .RowStride ;_efcb +=src .RowStride ;_gbe +=_fda .RowStride ;};return _fda ,nil ;};func _cbfb (_baad ,_gfgd byte ,_baeac CombinationOperator )byte {switch _baeac {case CmbOpOr :return _gfgd |_baad ;case CmbOpAnd :return _gfgd &_baad ;case CmbOpXor :return _gfgd ^_baad ;case CmbOpXNor :return ^(_gfgd ^_baad );case CmbOpNot :return ^(_gfgd );default:return _gfgd ;};};func _ead (_gabb ,_geb *Bitmap ,_ace int ,_fcf []byte ,_daf int )(_gacd error ){const _gagf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_gfe ,_eef ,_aeb ,_dcg ,_cde ,_cb ,_cccf ,_dbee int ;_egf ,_bca ,_eeg ,_ebd uint32 ;_bf ,_aef byte ;_fec uint16 ;);_ffb :=make ([]byte ,4);_agb :=make ([]byte ,4);for _aeb =0;_aeb < _gabb .Height -1;_aeb ,_dcg =_aeb +2,_dcg +1{_gfe =_aeb *_gabb .RowStride ;_eef =_dcg *_geb .RowStride ;for _cde ,_cb =0,0;_cde < _daf ;_cde ,_cb =_cde +4,_cb +1{for _cccf =0;_cccf < 4;_cccf ++{_dbee =_gfe +_cde +_cccf ;if _dbee <=len (_gabb .Data )-1&&_dbee < _gfe +_gabb .RowStride {_ffb [_cccf ]=_gabb .Data [_dbee ];}else {_ffb [_cccf ]=0x00;};_dbee =_gfe +_gabb .RowStride +_cde +_cccf ;if _dbee <=len (_gabb .Data )-1&&_dbee < _gfe +(2*_gabb .RowStride ){_agb [_cccf ]=_gabb .Data [_dbee ];}else {_agb [_cccf ]=0x00;};};_egf =_fe .BigEndian .Uint32 (_ffb );_bca =_fe .BigEndian .Uint32 (_agb );_eeg =_egf &_bca ;_eeg |=_eeg <<1;_ebd =_egf |_bca ;_ebd &=_ebd <<1;_bca =_eeg |_ebd ;_bca &=0xaaaaaaaa;_egf =_bca |(_bca <<7);_bf =byte (_egf >>24);_aef =byte ((_egf >>8)&0xff);_dbee =_eef +_cb ;if _dbee +1==len (_geb .Data )-1||_dbee +1>=_eef +_geb .RowStride {if _gacd =_geb .SetByte (_dbee ,_fcf [_bf ]);_gacd !=nil {return _f .Wrapf (_gacd ,_gagf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dbee );};}else {_fec =(uint16 (_fcf [_bf ])<<8)|uint16 (_fcf [_aef ]);if _gacd =_geb .setTwoBytes (_dbee ,_fec );_gacd !=nil {return _f .Wrapf (_gacd ,_gagf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dbee );};_cb ++;};};};return nil ;};func _bfac (_ebdda *Bitmap ,_efdg *Bitmap ,_dfea *Selection ,_gaec **Bitmap )(*Bitmap ,error ){const _gabeg ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _efdg ==nil {return nil ,_f .Error (_gabeg ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _dfea ==nil {return nil ,_f .Error (_gabeg ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_dbaf ,_cagg :=_dfea .Height ,_dfea .Width ;if _dbaf ==0||_cagg ==0{return nil ,_f .Error (_gabeg ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _ebdda ==nil {_ebdda =_efdg .createTemplate ();*_gaec =_efdg ;return _ebdda ,nil ;};_ebdda .Width =_efdg .Width ;_ebdda .Height =_efdg .Height ;_ebdda .RowStride =_efdg .RowStride ;_ebdda .Color =_efdg .Color ;_ebdda .Data =make ([]byte ,_efdg .RowStride *_efdg .Height );if _ebdda ==_efdg {*_gaec =_efdg .Copy ();}else {*_gaec =_efdg ;};return _ebdda ,nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_cdeg float64 ,_bdaf error ){const _ebfc ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";if bm1 ==nil ||bm2 ==nil {return _cdeg ,_f .Error (_ebfc ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _cdeg ,_f .Error (_ebfc ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if area1 ==0||area2 ==0{return _cdeg ,_f .Error (_ebfc ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_ffe ,_agdd :=bm1 .Width ,bm1 .Height ;_agbc ,_ebdc :=bm2 .Width ,bm2 .Height ;if _cfaga (_ffe -_agbc )> maxDiffW {return 0,nil ;};if _cfaga (_agdd -_ebdc )> maxDiffH {return 0,nil ;};var _gdgac ,_cgeb int ;if delX >=0{_gdgac =int (delX +0.5);}else {_gdgac =int (delX -0.5);};if delY >=0{_cgeb =int (delY +0.5);}else {_cgeb =int (delY -0.5);};_gfaa :=bm1 .createTemplate ();if _bdaf =_gfaa .RasterOperation (_gdgac ,_cgeb ,_agbc ,_ebdc ,PixSrc ,bm2 ,0,0);_bdaf !=nil {return _cdeg ,_f .Wrap (_bdaf ,_ebfc ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _bdaf =_gfaa .RasterOperation (0,0,_ffe ,_agdd ,PixSrcAndDst ,bm1 ,0,0);_bdaf !=nil {return _cdeg ,_f .Wrap (_bdaf ,_ebfc ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_efeed :=_gfaa .countPixels ();_cdeg =float64 (_efeed )*float64 (_efeed )/(float64 (area1 )*float64 (area2 ));return _cdeg ,nil ;};func (_fgg *Bitmap )Equals (s *Bitmap )bool {if len (_fgg .Data )!=len (s .Data )||_fgg .Width !=s .Width ||_fgg .Height !=s .Height {return false ;};for _gfbd :=0;_gfbd < _fgg .Height ;_gfbd ++{_abb :=_gfbd *_fgg .RowStride ;for _dbaa :=0;_dbaa < _fgg .RowStride ;_dbaa ++{if _fgg .Data [_abb +_dbaa ]!=s .Data [_abb +_dbaa ]{return false ;};};};return true ;};func _eff (_edeg ,_fgc *Bitmap ,_gdd int ,_afb []byte ,_gea int )(_aed error ){const _cfe ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_fc ,_cfab ,_cada ,_ceg ,_ee ,_gef ,_ebff ,_bbbb int ;_fged ,_dgg uint32 ;_fdb ,_afd byte ;_fga uint16 ;);_dgb :=make ([]byte ,4);_dee :=make ([]byte ,4);for _cada =0;_cada < _edeg .Height -1;_cada ,_ceg =_cada +2,_ceg +1{_fc =_cada *_edeg .RowStride ;_cfab =_ceg *_fgc .RowStride ;for _ee ,_gef =0,0;_ee < _gea ;_ee ,_gef =_ee +4,_gef +1{for _ebff =0;_ebff < 4;_ebff ++{_bbbb =_fc +_ee +_ebff ;if _bbbb <=len (_edeg .Data )-1&&_bbbb < _fc +_edeg .RowStride {_dgb [_ebff ]=_edeg .Data [_bbbb ];}else {_dgb [_ebff ]=0x00;};_bbbb =_fc +_edeg .RowStride +_ee +_ebff ;if _bbbb <=len (_edeg .Data )-1&&_bbbb < _fc +(2*_edeg .RowStride ){_dee [_ebff ]=_edeg .Data [_bbbb ];}else {_dee [_ebff ]=0x00;};};_fged =_fe .BigEndian .Uint32 (_dgb );_dgg =_fe .BigEndian .Uint32 (_dee );_dgg |=_fged ;_dgg |=_dgg <<1;_dgg &=0xaaaaaaaa;_fged =_dgg |(_dgg <<7);_fdb =byte (_fged >>24);_afd =byte ((_fged >>8)&0xff);_bbbb =_cfab +_gef ;if _bbbb +1==len (_fgc .Data )-1||_bbbb +1>=_cfab +_fgc .RowStride {_fgc .Data [_bbbb ]=_afb [_fdb ];}else {_fga =(uint16 (_afb [_fdb ])<<8)|uint16 (_afb [_afd ]);if _aed =_fgc .setTwoBytes (_bbbb ,_fga );_aed !=nil {return _f .Wrapf (_aed ,_cfe ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bbbb );};_gef ++;};};};return nil ;};func (_facf *Bitmap )countPixels ()int {var (_ecc int ;_gbff uint8 ;_dfde byte ;_bdee int ;);_dbb :=_facf .RowStride ;_fgec :=uint (_facf .Width &0x07);if _fgec !=0{_gbff =uint8 ((0xff<<(8-_fgec ))&0xff);_dbb --;};for _gccc :=0;_gccc < _facf .Height ;_gccc ++{for _bdee =0;_bdee < _dbb ;_bdee ++{_dfde =_facf .Data [_gccc *_facf .RowStride +_bdee ];_ecc +=int (_bdc [_dfde ]);};if _fgec !=0{_ecc +=int (_bdc [_facf .Data [_gccc *_facf .RowStride +_bdee ]&_gbff ]);};};return _ecc ;};func _dag (_dcegc *Bitmap ,_agdcb *_d .Stack ,_gega ,_addb int )(_deae *_fg .Rectangle ,_ccee error ){const _cfc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _dcegc ==nil {return nil ,_f .Error (_cfc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _agdcb ==nil {return nil ,_f .Error (_cfc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_aaag ,_bfgb :=_dcegc .Width ,_dcegc .Height ;_dfgdf :=_aaag -1;_gddca :=_bfgb -1;if _gega < 0||_gega > _dfgdf ||_addb < 0||_addb > _gddca ||!_dcegc .GetPixel (_gega ,_addb ){return nil ,nil ;};var _cace *_fg .Rectangle ;_cace ,_ccee =Rect (100000,100000,0,0);if _ccee !=nil {return nil ,_f .Wrap (_ccee ,_cfc ,"");};if _ccee =_afbdg (_agdcb ,_gega ,_gega ,_addb ,1,_gddca ,_cace );_ccee !=nil {return nil ,_f .Wrap (_ccee ,_cfc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ccee =_afbdg (_agdcb ,_gega ,_gega ,_addb +1,-1,_gddca ,_cace );_ccee !=nil {return nil ,_f .Wrap (_ccee ,_cfc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_cace .Min .X ,_cace .Max .X =_gega ,_gega ;_cace .Min .Y ,_cace .Max .Y =_addb ,_addb ;var (_dffb *fillSegment ;_gded int ;);for _agdcb .Len ()> 0{if _dffb ,_ccee =_dbga (_agdcb );_ccee !=nil {return nil ,_f .Wrap (_ccee ,_cfc ,"");};_addb =_dffb ._gdab ;for _gega =_dffb ._cgfd ;_gega >=0&&_dcegc .GetPixel (_gega ,_addb );_gega --{if _ccee =_dcegc .SetPixel (_gega ,_addb ,0);_ccee !=nil {return nil ,_f .Wrap (_ccee ,_cfc ,"");};};if _gega >=_dffb ._cgfd {for _gega ++;_gega <=_dffb ._edaf &&_gega <=_dfgdf &&!_dcegc .GetPixel (_gega ,_addb );_gega ++{};_gded =_gega ;if !(_gega <=_dffb ._edaf &&_gega <=_dfgdf ){continue ;};}else {_gded =_gega +1;if _gded < _dffb ._cgfd -1{if _ccee =_afbdg (_agdcb ,_gded ,_dffb ._cgfd -1,_dffb ._gdab ,-_dffb ._fbaa ,_gddca ,_cace );_ccee !=nil {return nil ,_f .Wrap (_ccee ,_cfc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_gega =_dffb ._cgfd +1;};for {for ;_gega <=_dfgdf &&_dcegc .GetPixel (_gega ,_addb );_gega ++{if _ccee =_dcegc .SetPixel (_gega ,_addb ,0);_ccee !=nil {return nil ,_f .Wrap (_ccee ,_cfc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ccee =_afbdg (_agdcb ,_gded ,_gega -1,_dffb ._gdab ,_dffb ._fbaa ,_gddca ,_cace );_ccee !=nil {return nil ,_f .Wrap (_ccee ,_cfc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gega > _dffb ._edaf +1{if _ccee =_afbdg (_agdcb ,_dffb ._edaf +1,_gega -1,_dffb ._gdab ,-_dffb ._fbaa ,_gddca ,_cace );_ccee !=nil {return nil ,_f .Wrap (_ccee ,_cfc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _gega ++;_gega <=_dffb ._edaf &&_gega <=_dfgdf &&!_dcegc .GetPixel (_gega ,_addb );_gega ++{};_gded =_gega ;if !(_gega <=_dffb ._edaf &&_gega <=_dfgdf ){break ;};};};_cace .Max .X ++;_cace .Max .Y ++;return _cace ,nil ;};type fillSegment struct{_cgfd int ;_edaf int ;_gdab int ;_fbaa int ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);type SelectionValue int ;func (_dagf *Bitmaps )AddBox (box *_fg .Rectangle ){_dagf .Boxes =append (_dagf .Boxes ,box )};func _egge (_eacg ,_cfebe int ,_aggf string )*Selection {_cbcd :=&Selection {Height :_eacg ,Width :_cfebe ,Name :_aggf };_cbcd .Data =make ([][]SelectionValue ,_eacg );for _cdba :=0;_cdba < _eacg ;_cdba ++{_cbcd .Data [_cdba ]=make ([]SelectionValue ,_cfebe );};return _cbcd ;};func _dbbf (_cgaa *Bitmap ,_edfc *Bitmap ,_aefd *Selection )(*Bitmap ,error ){var (_eaab *Bitmap ;_bfaf error ;);_cgaa ,_bfaf =_bfac (_cgaa ,_edfc ,_aefd ,&_eaab );if _bfaf !=nil {return nil ,_bfaf ;};if _bfaf =_cgaa .clearAll ();_bfaf !=nil {return nil ,_bfaf ;};var _ebfg SelectionValue ;for _cbffd :=0;_cbffd < _aefd .Height ;_cbffd ++{for _daae :=0;_daae < _aefd .Width ;_daae ++{_ebfg =_aefd .Data [_cbffd ][_daae ];if _ebfg ==SelHit {if _bfaf =_cgaa .RasterOperation (_daae -_aefd .Cx ,_cbffd -_aefd .Cy ,_edfc .Width ,_edfc .Height ,PixSrcOrDst ,_eaab ,0,0);_bfaf !=nil {return nil ,_bfaf ;};};};};return _cgaa ,nil ;};func _cge (_db *Bitmap ,_ddc int )(*Bitmap ,error ){const _be ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _db ==nil {return nil ,_f .Error (_be ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ddc ==1{return _acfb (nil ,_db );};if _ddc !=2&&_ddc !=4&&_ddc !=8{return nil ,_f .Error (_be ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");};_gbb :=_ddc *_db .Width ;_aba :=_ddc *_db .Height ;_efb :=New (_gbb ,_aba );var _dde error ;switch _ddc {case 2:_dde =_bbb (_efb ,_db );case 4:_dde =_gag (_efb ,_db );case 8:_dde =_cad (_efb ,_db );};if _dde !=nil {return nil ,_f .Wrap (_dde ,_be ,"");};return _efb ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _gaceb ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";if bm1 ==nil {return false ,_f .Error (_gaceb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");};if bm2 ==nil {return false ,_f .Error (_gaceb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");};if area1 <=0||area2 <=0{return false ,_f .Error (_gaceb ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");};if downcount ==nil {return false ,_f .Error (_gaceb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_f .Error (_gaceb ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");};_eddff ,_defc :=bm1 .Width ,bm1 .Height ;_accd ,_fafd :=bm2 .Width ,bm2 .Height ;if _d .Abs (_eddff -_accd )> maxDiffW {return false ,nil ;};if _d .Abs (_defc -_fafd )> maxDiffH {return false ,nil ;};_gaagg :=int (delX +_d .Sign (delX )*0.5);_bccc :=int (delY +_d .Sign (delY )*0.5);_bcdb :=int (_g .Ceil (_g .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_baaa :=bm2 .RowStride ;_gbce :=_edgb (_bccc ,0);_dfeb :=_dfdb (_fafd +_bccc ,_defc );_ebea :=bm1 .RowStride *_gbce ;_bfef :=bm2 .RowStride *(_gbce -_bccc );var _bfecc int ;if _dfeb <=_defc {_bfecc =downcount [_dfeb -1];};_ccbb :=_edgb (_gaagg ,0);_cdcf :=_dfdb (_accd +_gaagg ,_eddff );var _eaea ,_ebfd int ;if _gaagg >=8{_eaea =_gaagg >>3;_ebea +=_eaea ;_ccbb -=_eaea <<3;_cdcf -=_eaea <<3;_gaagg &=7;}else if _gaagg <=-8{_ebfd =-((_gaagg +7)>>3);_bfef +=_ebfd ;_baaa -=_ebfd ;_gaagg +=_ebfd <<3;};var (_dceb ,_fgeb ,_efcfe int ;_afac ,_ebdd ,_bebd byte ;);if _ccbb >=_cdcf ||_gbce >=_dfeb {return false ,nil ;};_cfbda :=(_cdcf +7)>>3;switch {case _gaagg ==0:for _fgeb =_gbce ;_fgeb < _dfeb ;_fgeb ,_ebea ,_bfef =_fgeb +1,_ebea +bm1 .RowStride ,_bfef +bm2 .RowStride {for _efcfe =0;_efcfe < _cfbda ;_efcfe ++{_afac =bm1 .Data [_ebea +_efcfe ]&bm2 .Data [_bfef +_efcfe ];_dceb +=tab [_afac ];};if _dceb >=_bcdb {return true ,nil ;};if _ebdfb :=_dceb +downcount [_fgeb ]-_bfecc ;_ebdfb < _bcdb {return false ,nil ;};};case _gaagg > 0&&_baaa < _cfbda :for _fgeb =_gbce ;_fgeb < _dfeb ;_fgeb ,_ebea ,_bfef =_fgeb +1,_ebea +bm1 .RowStride ,_bfef +bm2 .RowStride {_ebdd =bm1 .Data [_ebea ];_bebd =bm2 .Data [_bfef ]>>uint (_gaagg );_afac =_ebdd &_bebd ;_dceb +=tab [_afac ];for _efcfe =1;_efcfe < _baaa ;_efcfe ++{_ebdd =bm1 .Data [_ebea +_efcfe ];_bebd =bm2 .Data [_bfef +_efcfe ]>>uint (_gaagg )|bm2 .Data [_bfef +_efcfe -1]<<uint (8-_gaagg );_afac =_ebdd &_bebd ;_dceb +=tab [_afac ];};_ebdd =bm1 .Data [_ebea +_efcfe ];_bebd =bm2 .Data [_bfef +_efcfe -1]<<uint (8-_gaagg );_afac =_ebdd &_bebd ;_dceb +=tab [_afac ];if _dceb >=_bcdb {return true ,nil ;}else if _dceb +downcount [_fgeb ]-_bfecc < _bcdb {return false ,nil ;};};case _gaagg > 0&&_baaa >=_cfbda :for _fgeb =_gbce ;_fgeb < _dfeb ;_fgeb ,_ebea ,_bfef =_fgeb +1,_ebea +bm1 .RowStride ,_bfef +bm2 .RowStride {_ebdd =bm1 .Data [_ebea ];_bebd =bm2 .Data [_bfef ]>>uint (_gaagg );_afac =_ebdd &_bebd ;_dceb +=tab [_afac ];for _efcfe =1;_efcfe < _cfbda ;_efcfe ++{_ebdd =bm1 .Data [_ebea +_efcfe ];_bebd =bm2 .Data [_bfef +_efcfe ]>>uint (_gaagg );_bebd |=bm2 .Data [_bfef +_efcfe -1]<<uint (8-_gaagg );_afac =_ebdd &_bebd ;_dceb +=tab [_afac ];};if _dceb >=_bcdb {return true ,nil ;}else if _dceb +downcount [_fgeb ]-_bfecc < _bcdb {return false ,nil ;};};case _cfbda < _baaa :for _fgeb =_gbce ;_fgeb < _dfeb ;_fgeb ,_ebea ,_bfef =_fgeb +1,_ebea +bm1 .RowStride ,_bfef +bm2 .RowStride {for _efcfe =0;_efcfe < _cfbda ;_efcfe ++{_ebdd =bm1 .Data [_ebea +_efcfe ];_bebd =bm2 .Data [_bfef +_efcfe ]<<uint (-_gaagg );_bebd |=bm2 .Data [_bfef +_efcfe +1]>>uint (8+_gaagg );_afac =_ebdd &_bebd ;_dceb +=tab [_afac ];};if _dceb >=_bcdb {return true ,nil ;}else if _edea :=_dceb +downcount [_fgeb ]-_bfecc ;_edea < _bcdb {return false ,nil ;};};case _baaa >=_cfbda :for _fgeb =_gbce ;_fgeb < _dfeb ;_fgeb ,_ebea ,_bfef =_fgeb +1,_ebea +bm1 .RowStride ,_bfef +bm2 .RowStride {for _efcfe =0;_efcfe < _cfbda ;_efcfe ++{_ebdd =bm1 .Data [_ebea +_efcfe ];_bebd =bm2 .Data [_bfef +_efcfe ]<<uint (-_gaagg );_bebd |=bm2 .Data [_bfef +_efcfe +1]>>uint (8+_gaagg );_afac =_ebdd &_bebd ;_dceb +=tab [_afac ];};_ebdd =bm1 .Data [_ebea +_efcfe ];_bebd =bm2 .Data [_bfef +_efcfe ]<<uint (-_gaagg );_afac =_ebdd &_bebd ;_dceb +=tab [_afac ];if _dceb >=_bcdb {return true ,nil ;}else if _dceb +downcount [_fgeb ]-_bfecc < _bcdb {return false ,nil ;};};};_cdfd :=float32 (_dceb )*float32 (_dceb )/(float32 (area1 )*float32 (area2 ));if _cdfd >=scoreThreshold {_dg .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_dceb ,_bcdb ,_cdfd ,scoreThreshold );};return false ,nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _bad ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_bcad :=_ad (width ,height );_bcad .Data =data ;if _afa :=((width *height )+7)>>3;len (data )< _afa {return nil ,_f .Errorf (_bad ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_afa );};if _geg :=_bcad .addPadBits ();_geg !=nil {return nil ,_f .Wrap (_geg ,_bad ,"");};return _bcad ,nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _beace (d ,s ,hSize ,vSize )};func (_gagb *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_eced *BitmapsArray )GetBox (i int )(*_fg .Rectangle ,error ){const _aeage ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _eced ==nil {return nil ,_f .Error (_aeage ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_eced .Boxes )-1{return nil ,_f .Errorf (_aeage ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _eced .Boxes [i ],nil ;};func (_cdbf *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _cdbf .Copy (),nil ;};_abe ,_bccd :=_cdbf .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _bccd !=nil {return nil ,_f .Wrap (_bccd ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _abe ,nil ;};var _bdc [256]uint8 ;func (_aff *Bitmap )CountPixels ()int {return _aff .countPixels ()};const (_fcdce shift =iota ;_agbcb ;);func (_fcae *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _bagd ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_gfdfb ,_aeaeg :=_fcae .selectByIndexes (idx );if _aeaeg !=nil {return nil ,_f .Wrap (_aeaeg ,_bagd ,"");};return _gfdfb ,nil ;};func _dgbfg (_acdgb *Bitmap ,_fefac *_d .Stack ,_cbdg ,_degdag ,_ecee int )(_gcccb *_fg .Rectangle ,_ecfb error ){const _cgge ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _acdgb ==nil {return nil ,_f .Error (_cgge ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fefac ==nil {return nil ,_f .Error (_cgge ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _ecee {case 4:if _gcccb ,_ecfb =_dag (_acdgb ,_fefac ,_cbdg ,_degdag );_ecfb !=nil {return nil ,_f .Wrap (_ecfb ,_cgge ,"");};return _gcccb ,nil ;case 8:if _gcccb ,_ecfb =_gafd (_acdgb ,_fefac ,_cbdg ,_degdag );_ecfb !=nil {return nil ,_f .Wrap (_ecfb ,_cgge ,"");};return _gcccb ,nil ;default:return nil ,_f .Errorf (_cgge ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_ecee );};};func TstImageBitmap ()*Bitmap {return _ebdaa .Copy ()};func TstTSymbol (t *_bb .T ,scale ...int )*Bitmap {_cadef ,_ccbgb :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_b .NoError (t ,_ccbgb );return TstGetScaledSymbol (t ,_cadef ,scale ...);};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _gaac ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_bba ,_cgef :=p1 .Width ,p1 .Height ;_dggfe ,_acac :=p3 .Width ,p3 .Height ;if _d .Abs (_bba -_dggfe )> maxDiffW {return false ,nil ;};if _d .Abs (_cgef -_acac )> maxDiffH {return false ,nil ;};_gcbd :=int (delX +_d .Sign (delX )*0.5);_ddbb :=int (delY +_d .Sign (delY )*0.5);var _addeg error ;_fccg :=p1 .CreateTemplate ();if _addeg =_fccg .RasterOperation (0,0,_bba ,_cgef ,PixSrc ,p1 ,0,0);_addeg !=nil {return false ,_f .Wrap (_addeg ,_gaac ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _addeg =_fccg .RasterOperation (_gcbd ,_ddbb ,_bba ,_cgef ,PixNotSrcAndDst ,p4 ,0,0);_addeg !=nil {return false ,_f .Wrap (_addeg ,_gaac ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _fccg .Zero (){return false ,nil ;};if _addeg =_fccg .RasterOperation (_gcbd ,_ddbb ,_dggfe ,_acac ,PixSrc ,p3 ,0,0);_addeg !=nil {return false ,_f .Wrap (_addeg ,_gaac ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _addeg =_fccg .RasterOperation (0,0,_dggfe ,_acac ,PixNotSrcAndDst ,p2 ,0,0);_addeg !=nil {return false ,_f .Wrap (_addeg ,_gaac ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _fccg .Zero (),nil ;};func (_adf *Bitmap )clearAll ()error {return _adf .RasterOperation (0,0,_adf .Width ,_adf .Height ,PixClr ,nil ,0,0);};func (_ffagf *Bitmap )setEightPartlyBytes (_fbba ,_abec int ,_acca uint64 )(_ebgc error ){var (_edb byte ;_aca int ;);const _aaga ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _baca :=1;_baca <=_abec ;_baca ++{_aca =64-_baca *8;_edb =byte (_acca >>uint (_aca )&0xff);_dg .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_edb ,_fbba ,_fbba +_baca -1,_abec ,_aca );if _ebgc =_ffagf .SetByte (_fbba +_baca -1,_edb );_ebgc !=nil {return _f .Wrap (_ebgc ,_aaga ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_dffa :=_ffagf .RowStride *8-_ffagf .Width ;if _dffa ==0{return nil ;};_aca -=8;_edb =byte (_acca >>uint (_aca )&0xff)<<uint (_dffa );if _ebgc =_ffagf .SetByte (_fbba +_abec ,_edb );_ebgc !=nil {return _f .Wrap (_ebgc ,_aaga ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_gfdd *Bitmap )setBit (_agbg int ){_gfdd .Data [(_agbg >>3)]|=0x80>>uint (_agbg &7)};func (_bfedf *byWidth )Len ()int {return len (_bfedf .Values )};func (_fcb *Bitmap )GetPixel (x ,y int )bool {_fba :=_fcb .GetByteIndex (x ,y );_fbe :=_fcb .GetBitOffset (x );_afc :=uint (7-_fbe );if _fba > len (_fcb .Data )-1{_dg .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_fcb );return false ;};if (_fcb .Data [_fba ]>>_afc )&0x01>=1{return true ;};return false ;};func TstVSymbol (t *_bb .T ,scale ...int )*Bitmap {_dbae ,_ecgd :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_b .NoError (t ,_ecgd );return TstGetScaledSymbol (t ,_dbae ,scale ...);};func _decc (_bbbe *Bitmap ,_dcdd ,_deab ,_agcf ,_ccbc int ,_gabea RasterOperator ,_bbgd *Bitmap ,_acee ,_abbe int )error {var (_afafc byte ;_fdec int ;_bee int ;_ggac ,_gcbdg int ;_gfgf ,_gefe int ;);_aebcce :=_agcf >>3;_fdbdb :=_agcf &7;if _fdbdb > 0{_afafc =_abag [_fdbdb ];};_fdec =_bbgd .RowStride *_abbe +(_acee >>3);_bee =_bbbe .RowStride *_deab +(_dcdd >>3);switch _gabea {case PixSrc :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]=_bbgd .Data [_ggac ];_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],_bbgd .Data [_ggac ],_afafc );};};case PixNotSrc :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]=^(_bbgd .Data [_ggac ]);_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],^_bbgd .Data [_ggac ],_afafc );};};case PixSrcOrDst :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]|=_bbgd .Data [_ggac ];_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],_bbgd .Data [_ggac ]|_bbbe .Data [_gcbdg ],_afafc );};};case PixSrcAndDst :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]&=_bbgd .Data [_ggac ];_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],_bbgd .Data [_ggac ]&_bbbe .Data [_gcbdg ],_afafc );};};case PixSrcXorDst :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]^=_bbgd .Data [_ggac ];_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],_bbgd .Data [_ggac ]^_bbbe .Data [_gcbdg ],_afafc );};};case PixNotSrcOrDst :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]|=^(_bbgd .Data [_ggac ]);_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],^(_bbgd .Data [_ggac ])|_bbbe .Data [_gcbdg ],_afafc );};};case PixNotSrcAndDst :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]&=^(_bbgd .Data [_ggac ]);_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],^(_bbgd .Data [_ggac ])&_bbbe .Data [_gcbdg ],_afafc );};};case PixSrcOrNotDst :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]=_bbgd .Data [_ggac ]|^(_bbbe .Data [_gcbdg ]);_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],_bbgd .Data [_ggac ]|^(_bbbe .Data [_gcbdg ]),_afafc );};};case PixSrcAndNotDst :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]=_bbgd .Data [_ggac ]&^(_bbbe .Data [_gcbdg ]);_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],_bbgd .Data [_ggac ]&^(_bbbe .Data [_gcbdg ]),_afafc );};};case PixNotPixSrcOrDst :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]=^(_bbgd .Data [_ggac ]|_bbbe .Data [_gcbdg ]);_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],^(_bbgd .Data [_ggac ]|_bbbe .Data [_gcbdg ]),_afafc );};};case PixNotPixSrcAndDst :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]=^(_bbgd .Data [_ggac ]&_bbbe .Data [_gcbdg ]);_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],^(_bbgd .Data [_ggac ]&_bbbe .Data [_gcbdg ]),_afafc );};};case PixNotPixSrcXorDst :for _gfgf =0;_gfgf < _ccbc ;_gfgf ++{_ggac =_fdec +_gfgf *_bbgd .RowStride ;_gcbdg =_bee +_gfgf *_bbbe .RowStride ;for _gefe =0;_gefe < _aebcce ;_gefe ++{_bbbe .Data [_gcbdg ]=^(_bbgd .Data [_ggac ]^_bbbe .Data [_gcbdg ]);_gcbdg ++;_ggac ++;};if _fdbdb > 0{_bbbe .Data [_gcbdg ]=_gbfb (_bbbe .Data [_gcbdg ],^(_bbgd .Data [_ggac ]^_bbbe .Data [_gcbdg ]),_afafc );};};default:_dg .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_gabea );return _f .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);var _fbcdb =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};func Centroids (bms []*Bitmap )(*Points ,error ){_fgaf :=make ([]Point ,len (bms ));_gbab :=_febe ();_deag :=_gagc ();var _bfdb error ;for _gbda ,_cgag :=range bms {_fgaf [_gbda ],_bfdb =_cgag .centroid (_gbab ,_deag );if _bfdb !=nil {return nil ,_bfdb ;};};_dabaa :=Points (_fgaf );return &_dabaa ,nil ;};func (_afbcg *Bitmaps )selectByIndexes (_badb []int )(*Bitmaps ,error ){_gabcd :=&Bitmaps {};for _ ,_aebb :=range _badb {_aggg ,_cfcf :=_afbcg .GetBitmap (_aebb );if _cfcf !=nil {return nil ,_f .Wrap (_cfcf ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_gabcd .AddBitmap (_aggg );};return _gabcd ,nil ;};func TstWordBitmap (t *_bb .T ,scale ...int )*Bitmap {_cedb :=1;if len (scale )> 0{_cedb =scale [0];};_gcaaf :=3;_fdbde :=9+7+15+2*_gcaaf ;_deaac :=5+_gcaaf +5;_dcebd :=New (_fdbde *_cedb ,_deaac *_cedb );_fdfb :=&Bitmaps {};var _fcgd *int ;_gcaaf *=_cedb ;_bdfcf :=0;_fcgd =&_bdfcf ;_addg :=0;_ecaf :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,1*_cedb );_ecaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,_gcaaf );_ecaf =TstISymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,1*_cedb );_ecaf =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,_gcaaf );_ecaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,1*_cedb );_ecaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,1*_cedb );_ecaf =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,0);*_fcgd =0;_addg =5*_cedb +_gcaaf ;_ecaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,1*_cedb );_ecaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,_gcaaf );_ecaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,1*_cedb );_ecaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,1*_cedb );_ecaf =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,1*_cedb );_ecaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,1*_cedb );_ecaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fdfb ,_ecaf ,_fcgd ,_addg ,0);TstWriteSymbols (t ,_fdfb ,_dcebd );return _dcebd ;};func (_eefbg *Bitmaps )AddBitmap (bm *Bitmap ){_eefbg .Values =append (_eefbg .Values ,bm )};func _adec (_fgced *Bitmap ,_daee ,_dffff int ,_gcdae ,_dfbdd int ,_dfgd RasterOperator ,_ecf *Bitmap ,_adfbf ,_gecg int )error {var _fbgb ,_dcgee ,_egcag ,_eagg int ;if _daee < 0{_adfbf -=_daee ;_gcdae +=_daee ;_daee =0;};if _adfbf < 0{_daee -=_adfbf ;_gcdae +=_adfbf ;_adfbf =0;};_fbgb =_daee +_gcdae -_fgced .Width ;if _fbgb > 0{_gcdae -=_fbgb ;};_dcgee =_adfbf +_gcdae -_ecf .Width ;if _dcgee > 0{_gcdae -=_dcgee ;};if _dffff < 0{_gecg -=_dffff ;_dfbdd +=_dffff ;_dffff =0;};if _gecg < 0{_dffff -=_gecg ;_dfbdd +=_gecg ;_gecg =0;};_egcag =_dffff +_dfbdd -_fgced .Height ;if _egcag > 0{_dfbdd -=_egcag ;};_eagg =_gecg +_dfbdd -_ecf .Height ;if _eagg > 0{_dfbdd -=_eagg ;};if _gcdae <=0||_dfbdd <=0{return nil ;};var _ggbgc error ;switch {case _daee &7==0&&_adfbf &7==0:_ggbgc =_decc (_fgced ,_daee ,_dffff ,_gcdae ,_dfbdd ,_dfgd ,_ecf ,_adfbf ,_gecg );case _daee &7==_adfbf &7:_ggbgc =_bdda (_fgced ,_daee ,_dffff ,_gcdae ,_dfbdd ,_dfgd ,_ecf ,_adfbf ,_gecg );default:_ggbgc =_gbcg (_fgced ,_daee ,_dffff ,_gcdae ,_dfbdd ,_dfgd ,_ecf ,_adfbf ,_gecg );};if _ggbgc !=nil {return _f .Wrap (_ggbgc ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func TstAddSymbol (t *_bb .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_fdbdf :=_fg .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_fdbdf );*x +=sym .Width +space ;};func _adga (_fgecb ,_fgdfe *Bitmap ,_dggga *Selection )(*Bitmap ,error ){const _gfegd ="\u0065\u0072\u006fd\u0065";var (_aebge error ;_efag *Bitmap ;);_fgecb ,_aebge =_bfac (_fgecb ,_fgdfe ,_dggga ,&_efag );if _aebge !=nil {return nil ,_f .Wrap (_aebge ,_gfegd ,"");};if _aebge =_fgecb .setAll ();_aebge !=nil {return nil ,_f .Wrap (_aebge ,_gfegd ,"");};var _dgcf SelectionValue ;for _faea :=0;_faea < _dggga .Height ;_faea ++{for _acbg :=0;_acbg < _dggga .Width ;_acbg ++{_dgcf =_dggga .Data [_faea ][_acbg ];if _dgcf ==SelHit {_aebge =_fefd (_fgecb ,_dggga .Cx -_acbg ,_dggga .Cy -_faea ,_fgdfe .Width ,_fgdfe .Height ,PixSrcAndDst ,_efag ,0,0);if _aebge !=nil {return nil ,_f .Wrap (_aebge ,_gfegd ,"");};};};};if MorphBC ==SymmetricMorphBC {return _fgecb ,nil ;};_gdea ,_dgba ,_dddb ,_gbbb :=_dggga .findMaxTranslations ();if _gdea > 0{if _aebge =_fgecb .RasterOperation (0,0,_gdea ,_fgdfe .Height ,PixClr ,nil ,0,0);_aebge !=nil {return nil ,_f .Wrap (_aebge ,_gfegd ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _dddb > 0{if _aebge =_fgecb .RasterOperation (_fgdfe .Width -_dddb ,0,_dddb ,_fgdfe .Height ,PixClr ,nil ,0,0);_aebge !=nil {return nil ,_f .Wrap (_aebge ,_gfegd ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _dgba > 0{if _aebge =_fgecb .RasterOperation (0,0,_fgdfe .Width ,_dgba ,PixClr ,nil ,0,0);_aebge !=nil {return nil ,_f .Wrap (_aebge ,_gfegd ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _gbbb > 0{if _aebge =_fgecb .RasterOperation (0,_fgdfe .Height -_gbbb ,_fgdfe .Width ,_gbbb ,PixClr ,nil ,0,0);_aebge !=nil {return nil ,_f .Wrap (_aebge ,_gfegd ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _fgecb ,nil ;};var _eeda =[5]int {1,2,3,0,4};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _cffc ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_dgbb :=_ad (width ,height );_dgbb .Data =data ;if len (data )< height *_dgbb .RowStride {return nil ,_f .Errorf (_cffc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_dgbb .RowStride );};return _dgbb ,nil ;};func (_acff *Bitmap )setPadBits (_bfab int ){_bgc :=8-_acff .Width %8;if _bgc ==8{return ;};_cega :=_acff .Width /8;_cdgg :=_ebca [_bgc ];if _bfab ==0{_cdgg ^=_cdgg ;};var _abdb int ;for _cccb :=0;_cccb < _acff .Height ;_cccb ++{_abdb =_cccb *_acff .RowStride +_cega ;if _bfab ==0{_acff .Data [_abdb ]&=_cdgg ;}else {_acff .Data [_abdb ]|=_cdgg ;};};};func (_gefeg *BitmapsArray )AddBitmaps (bm *Bitmaps ){_gefeg .Values =append (_gefeg .Values ,bm )};func (_bdeb *Bitmaps )makeSizeIndicator (_gdag ,_dedac int ,_aeac LocationFilter ,_adda SizeComparison )(_aaf *_d .NumSlice ,_cbga error ){const _ffgcg ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _bdeb ==nil {return nil ,_f .Error (_ffgcg ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _aeac {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_f .Errorf (_ffgcg ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_aeac );};switch _adda {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_f .Errorf (_ffgcg ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_adda );};_aaf =&_d .NumSlice {};var (_dedd ,_dcgeg ,_effbf int ;_fcggg *Bitmap ;);for _ ,_fcggg =range _bdeb .Values {_dedd =0;_dcgeg ,_effbf =_fcggg .Width ,_fcggg .Height ;switch _aeac {case LocSelectWidth :if (_adda ==SizeSelectIfLT &&_dcgeg < _gdag )||(_adda ==SizeSelectIfGT &&_dcgeg > _gdag )||(_adda ==SizeSelectIfLTE &&_dcgeg <=_gdag )||(_adda ==SizeSelectIfGTE &&_dcgeg >=_gdag )||(_adda ==SizeSelectIfEQ &&_dcgeg ==_gdag ){_dedd =1;};case LocSelectHeight :if (_adda ==SizeSelectIfLT &&_effbf < _dedac )||(_adda ==SizeSelectIfGT &&_effbf > _dedac )||(_adda ==SizeSelectIfLTE &&_effbf <=_dedac )||(_adda ==SizeSelectIfGTE &&_effbf >=_dedac )||(_adda ==SizeSelectIfEQ &&_effbf ==_dedac ){_dedd =1;};case LocSelectIfEither :if (_adda ==SizeSelectIfLT &&(_dcgeg < _gdag ||_effbf < _dedac ))||(_adda ==SizeSelectIfGT &&(_dcgeg > _gdag ||_effbf > _dedac ))||(_adda ==SizeSelectIfLTE &&(_dcgeg <=_gdag ||_effbf <=_dedac ))||(_adda ==SizeSelectIfGTE &&(_dcgeg >=_gdag ||_effbf >=_dedac ))||(_adda ==SizeSelectIfEQ &&(_dcgeg ==_gdag ||_effbf ==_dedac )){_dedd =1;};case LocSelectIfBoth :if (_adda ==SizeSelectIfLT &&(_dcgeg < _gdag &&_effbf < _dedac ))||(_adda ==SizeSelectIfGT &&(_dcgeg > _gdag &&_effbf > _dedac ))||(_adda ==SizeSelectIfLTE &&(_dcgeg <=_gdag &&_effbf <=_dedac ))||(_adda ==SizeSelectIfGTE &&(_dcgeg >=_gdag &&_effbf >=_dedac ))||(_adda ==SizeSelectIfEQ &&(_dcgeg ==_gdag &&_effbf ==_dedac )){_dedd =1;};};_aaf .AddInt (_dedd );};return _aaf ,nil ;};func (_edeae *ClassedPoints )xSortFunction ()func (_ecgf int ,_bgdb int )bool {return func (_efcg ,_efdd int )bool {return _edeae .XAtIndex (_efcg )< _edeae .XAtIndex (_efdd )};};func (_fdca *Boxes )selectWithIndicator (_faef *_d .NumSlice )(_caefa *Boxes ,_ffbe error ){const _gfdb ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _fdca ==nil {return nil ,_f .Error (_gfdb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _faef ==nil {return nil ,_f .Error (_gfdb ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_faef )!=len (*_fdca ){return nil ,_f .Error (_gfdb ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");};var _efeb ,_eeab int ;for _egfbe :=0;_egfbe < len (*_faef );_egfbe ++{if _efeb ,_ffbe =_faef .GetInt (_egfbe );_ffbe !=nil {return nil ,_f .Wrap (_ffbe ,_gfdb ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _efeb ==1{_eeab ++;};};if _eeab ==len (*_fdca ){return _fdca ,nil ;};_ggb :=Boxes {};for _cea :=0;_cea < len (*_faef );_cea ++{_efeb =int ((*_faef )[_cea ]);if _efeb ==0{continue ;};_ggb =append (_ggb ,(*_fdca )[_cea ]);};_caefa =&_ggb ;return _caefa ,nil ;};func (_dadf *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _cgda ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_dadf .Values )==0{return nil ,_f .Error (_cgda ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_aceeg :=&BitmapsArray {};_dadf .SortByHeight ();_fggc :=-1;_aegb :=-1;for _acaga :=0;_acaga < len (_dadf .Values );_acaga ++{_bfgg :=_dadf .Values [_acaga ].Height ;if _bfgg > _fggc {_fggc =_bfgg ;_aegb ++;_aceeg .Values =append (_aceeg .Values ,&Bitmaps {});};_aceeg .Values [_aegb ].AddBitmap (_dadf .Values [_acaga ]);};return _aceeg ,nil ;};func TstDSymbol (t *_bb .T ,scale ...int )*Bitmap {_gfac ,_cfbfc :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_b .NoError (t ,_cfbfc );return TstGetScaledSymbol (t ,_gfac ,scale ...);};func (_gabd Points )YSorter ()func (_gaae ,_gaeb int )bool {return func (_eagf ,_fcec int )bool {return _gabd [_eagf ].Y < _gabd [_fcec ].Y };};func _acg ()(_abd [256]uint32 ){for _cdb :=0;_cdb < 256;_cdb ++{if _cdb &0x01!=0{_abd [_cdb ]|=0xf;};if _cdb &0x02!=0{_abd [_cdb ]|=0xf0;};if _cdb &0x04!=0{_abd [_cdb ]|=0xf00;};if _cdb &0x08!=0{_abd [_cdb ]|=0xf000;};if _cdb &0x10!=0{_abd [_cdb ]|=0xf0000;};if _cdb &0x20!=0{_abd [_cdb ]|=0xf00000;};if _cdb &0x40!=0{_abd [_cdb ]|=0xf000000;};if _cdb &0x80!=0{_abd [_cdb ]|=0xf0000000;};};return _abd ;};type Color int ;func (_ffbb *Bitmap )GetVanillaData ()[]byte {if _ffbb .Color ==Chocolate {_ffbb .inverseData ();};return _ffbb .Data ;};func Rect (x ,y ,w ,h int )(*_fg .Rectangle ,error ){const _ccfg ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_f .Errorf (_ccfg ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_f .Error (_ccfg ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_aeae :=_fg .Rect (x ,y ,x +w ,y +h );return &_aeae ,nil ;};func _fefd (_cgaga *Bitmap ,_fdbc ,_becea ,_debe ,_ccaf int ,_ecddc RasterOperator ,_gaff *Bitmap ,_fcadf ,_gcfe int )error {const _caed ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _cgaga ==nil {return _f .Error (_caed ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _ecddc ==PixDst {return nil ;};switch _ecddc {case PixClr ,PixSet ,PixNotDst :_fcba (_cgaga ,_fdbc ,_becea ,_debe ,_ccaf ,_ecddc );return nil ;};if _gaff ==nil {_dg .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _f .Error (_caed ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gcddd :=_adec (_cgaga ,_fdbc ,_becea ,_debe ,_ccaf ,_ecddc ,_gaff ,_fcadf ,_gcfe );_gcddd !=nil {return _f .Wrap (_gcddd ,_caed ,"");};return nil ;};func (_ced *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _ced .addBorderGeneral (left ,right ,top ,bot ,val );};func _fbca (_eeed *Bitmap ,_ggad *Bitmap ,_bbdb int )(_bgff error ){const _cgdc ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_gafcd :=_dfdb (_eeed .Height ,_ggad .Height );_febg :=_dfdb (_eeed .RowStride ,_ggad .RowStride );switch _bbdb {case 4:_bgff =_dcbb (_eeed ,_ggad ,_gafcd ,_febg );case 8:_bgff =_degda (_eeed ,_ggad ,_gafcd ,_febg );default:return _f .Errorf (_cgdc ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_bbdb );};if _bgff !=nil {return _f .Wrap (_bgff ,_cgdc ,"");};return nil ;};func (_gbd *Bitmap )GetChocolateData ()[]byte {if _gbd .Color ==Vanilla {_gbd .inverseData ();};return _gbd .Data ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_gdfc bool ,_bef error ){const _badaa ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_cadg ,_dbgd :=p1 .Width ,p1 .Height ;_fcad ,_dgbf :=p3 .Width ,p3 .Height ;if _d .Abs (_cadg -_fcad )> maxDiffW {return false ,nil ;};if _d .Abs (_dbgd -_dgbf )> maxDiffH {return false ,nil ;};_gba :=int (float32 (area1 )*(1.0-rank )+0.5);_cffg :=int (float32 (area3 )*(1.0-rank )+0.5);var _eeec ,_ccea int ;if delX >=0{_eeec =int (delX +0.5);}else {_eeec =int (delX -0.5);};if delY >=0{_ccea =int (delY +0.5);}else {_ccea =int (delY -0.5);};_gdad :=p1 .CreateTemplate ();if _bef =_gdad .RasterOperation (0,0,_cadg ,_dbgd ,PixSrc ,p1 ,0,0);_bef !=nil {return false ,_f .Wrap (_bef ,_badaa ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bef =_gdad .RasterOperation (_eeec ,_ccea ,_cadg ,_dbgd ,PixNotSrcAndDst ,p4 ,0,0);_bef !=nil {return false ,_f .Wrap (_bef ,_badaa ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_gdfc ,_bef =_gdad .ThresholdPixelSum (_gba ,tab8 );if _bef !=nil {return false ,_f .Wrap (_bef ,_badaa ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _gdfc {return false ,nil ;};if _bef =_gdad .RasterOperation (_eeec ,_ccea ,_fcad ,_dgbf ,PixSrc ,p3 ,0,0);_bef !=nil {return false ,_f .Wrap (_bef ,_badaa ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bef =_gdad .RasterOperation (0,0,_fcad ,_dgbf ,PixNotSrcAndDst ,p2 ,0,0);_bef !=nil {return false ,_f .Wrap (_bef ,_badaa ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_gdfc ,_bef =_gdad .ThresholdPixelSum (_cffg ,tab8 );if _bef !=nil {return false ,_f .Wrap (_bef ,_badaa ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_gdfc ,nil ;};func (_fggg *Boxes )Get (i int )(*_fg .Rectangle ,error ){const _ddg ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _fggg ==nil {return nil ,_f .Error (_ddg ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_fggg )-1{return nil ,_f .Errorf (_ddg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_fggg )[i ],nil ;};func New (width ,height int )*Bitmap {_bcc :=_ad (width ,height );_bcc .Data =make ([]byte ,height *_bcc .RowStride );return _bcc ;};func TstNSymbol (t *_bb .T ,scale ...int )*Bitmap {_dgbfb ,_gagfa :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_b .NoError (t ,_gagfa );return TstGetScaledSymbol (t ,_dgbfb ,scale ...);};func _cad (_gd ,_ab *Bitmap )(_de error ){const _cae ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_fee :=_ab .RowStride ;_eg :=_gd .RowStride ;var _gf ,_cfd ,_gde ,_fbg ,_gb int ;for _gde =0;_gde < _ab .Height ;_gde ++{_gf =_gde *_fee ;_cfd =8*_gde *_eg ;for _fbg =0;_fbg < _fee ;_fbg ++{if _de =_gd .setEightBytes (_cfd +_fbg *8,_gebd [_ab .Data [_gf +_fbg ]]);_de !=nil {return _f .Wrap (_de ,_cae ,"");};};for _gb =1;_gb < 8;_gb ++{for _fbg =0;_fbg < _eg ;_fbg ++{if _de =_gd .SetByte (_cfd +_gb *_eg +_fbg ,_gd .Data [_cfd +_fbg ]);_de !=nil {return _f .Wrap (_de ,_cae ,"");};};};};return nil ;};func (_adfdc *Bitmaps )SortByHeight (){_eagfd :=(*byHeight )(_adfdc );_cc .Sort (_eagfd )};func (_cggc *ClassedPoints )ySortFunction ()func (_gbbee int ,_efcbf int )bool {return func (_dfca ,_edcdc int )bool {return _cggc .YAtIndex (_dfca )< _cggc .YAtIndex (_edcdc )};};func (_cbg *Bitmap )SetDefaultPixel (){for _bcb :=range _cbg .Data {_cbg .Data [_bcb ]=byte (0xff);};};func NewClassedPoints (points *Points ,classes _d .IntSlice )(*ClassedPoints ,error ){const _geae ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_f .Error (_geae ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_f .Error (_geae ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_dfbaa :=&ClassedPoints {Points :points ,IntSlice :classes };if _abce :=_dfbaa .validateIntSlice ();_abce !=nil {return nil ,_f .Wrap (_abce ,_geae ,"");};return _dfbaa ,nil ;};func (_fbgc *Bitmap )SetPixel (x ,y int ,pixel byte )error {_gfc :=_fbgc .GetByteIndex (x ,y );if _gfc > len (_fbgc .Data )-1{return _f .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_gfc );};_ceggf :=_fbgc .GetBitOffset (x );_gafg :=uint (7-_ceggf );_fcfe :=_fbgc .Data [_gfc ];var _bgg byte ;if pixel ==1{_bgg =_fcfe |(pixel &0x01<<_gafg );}else {_bgg =_fcfe &^(1<<_gafg );};_fbgc .Data [_gfc ]=_bgg ;return nil ;};func _gdef ()(_dba [256]uint64 ){for _ccc :=0;_ccc < 256;_ccc ++{if _ccc &0x01!=0{_dba [_ccc ]|=0xff;};if _ccc &0x02!=0{_dba [_ccc ]|=0xff00;};if _ccc &0x04!=0{_dba [_ccc ]|=0xff0000;};if _ccc &0x08!=0{_dba [_ccc ]|=0xff000000;};if _ccc &0x10!=0{_dba [_ccc ]|=0xff00000000;};if _ccc &0x20!=0{_dba [_ccc ]|=0xff0000000000;};if _ccc &0x40!=0{_dba [_ccc ]|=0xff000000000000;};if _ccc &0x80!=0{_dba [_ccc ]|=0xff00000000000000;};};return _dba ;};func (_fadad *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _fbce ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _fadad ==nil {return nil ,_f .Error (_fbce ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_fadad .Values )-1{return nil ,_f .Errorf (_fbce ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fadad .Values [i ],nil ;};func (_acfe *byHeight )Swap (i ,j int ){_acfe .Values [i ],_acfe .Values [j ]=_acfe .Values [j ],_acfe .Values [i ];if _acfe .Boxes !=nil {_acfe .Boxes [i ],_acfe .Boxes [j ]=_acfe .Boxes [j ],_acfe .Boxes [i ];};};func (_eacb *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _eacb .Copy (),nil ;};_deb ,_gbf :=_eacb .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _gbf !=nil {return nil ,_f .Wrap (_gbf ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _deb ,nil ;};func (_acc *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _acc .removeBorderGeneral (left ,right ,top ,bot );};func (_bedd *Bitmap )setAll ()error {_gbbe :=_fefd (_bedd ,0,0,_bedd .Width ,_bedd .Height ,PixSet ,nil ,0,0);if _gbbe !=nil {return _f .Wrap (_gbbe ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};type SizeSelection int ;type CombinationOperator int ;const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);type Points []Point ;func _edgb (_fdbda ,_bec int )int {if _fdbda > _bec {return _fdbda ;};return _bec ;};func _ggc (_fbd ,_gaf *Bitmap ,_gfd int ,_ded []byte ,_gee int )(_dce error ){const _gcb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_ggd ,_egd ,_agd ,_cag ,_bacc ,_fcg ,_aage ,_cab int ;_fed ,_eac uint32 ;_fdc ,_dgd byte ;_dcge uint16 ;);_face :=make ([]byte ,4);_cfag :=make ([]byte ,4);for _agd =0;_agd < _fbd .Height -1;_agd ,_cag =_agd +2,_cag +1{_ggd =_agd *_fbd .RowStride ;_egd =_cag *_gaf .RowStride ;for _bacc ,_fcg =0,0;_bacc < _gee ;_bacc ,_fcg =_bacc +4,_fcg +1{for _aage =0;_aage < 4;_aage ++{_cab =_ggd +_bacc +_aage ;if _cab <=len (_fbd .Data )-1&&_cab < _ggd +_fbd .RowStride {_face [_aage ]=_fbd .Data [_cab ];}else {_face [_aage ]=0x00;};_cab =_ggd +_fbd .RowStride +_bacc +_aage ;if _cab <=len (_fbd .Data )-1&&_cab < _ggd +(2*_fbd .RowStride ){_cfag [_aage ]=_fbd .Data [_cab ];}else {_cfag [_aage ]=0x00;};};_fed =_fe .BigEndian .Uint32 (_face );_eac =_fe .BigEndian .Uint32 (_cfag );_eac &=_fed ;_eac &=_eac <<1;_eac &=0xaaaaaaaa;_fed =_eac |(_eac <<7);_fdc =byte (_fed >>24);_dgd =byte ((_fed >>8)&0xff);_cab =_egd +_fcg ;if _cab +1==len (_gaf .Data )-1||_cab +1>=_egd +_gaf .RowStride {_gaf .Data [_cab ]=_ded [_fdc ];if _dce =_gaf .SetByte (_cab ,_ded [_fdc ]);_dce !=nil {return _f .Wrapf (_dce ,_gcb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cab );};}else {_dcge =(uint16 (_ded [_fdc ])<<8)|uint16 (_ded [_dgd ]);if _dce =_gaf .setTwoBytes (_cab ,_dcge );_dce !=nil {return _f .Wrapf (_dce ,_gcb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cab );};_fcg ++;};};};return nil ;};func (_efc *Bitmap )ClipRectangle (box *_fg .Rectangle )(_fgfcb *Bitmap ,_ecad *_fg .Rectangle ,_caef error ){const _gfa ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_f .Error (_gfa ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_gae ,_eea :=_efc .Width ,_efc .Height ;_bdcg :=_fg .Rect (0,0,_gae ,_eea );if !box .Overlaps (_bdcg ){return nil ,nil ,_f .Error (_gfa ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_efg :=box .Intersect (_bdcg );_bfa ,_caga :=_efg .Min .X ,_efg .Min .Y ;_afe ,_ffaa :=_efg .Dx (),_efg .Dy ();_fgfcb =New (_afe ,_ffaa );_fgfcb .Text =_efc .Text ;if _caef =_fgfcb .RasterOperation (0,0,_afe ,_ffaa ,PixSrc ,_efc ,_bfa ,_caga );_caef !=nil {return nil ,nil ,_f .Wrap (_caef ,_gfa ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_ecad =&_efg ;return _fgfcb ,_ecad ,nil ;};type ClassedPoints struct{*Points ;_d .IntSlice ;_afaf func (_bgfd ,_gfcb int )bool ;};func _fcba (_cggcd *Bitmap ,_feca ,_bgcd ,_cacd ,_ccccd int ,_gccd RasterOperator ){if _feca < 0{_cacd +=_feca ;_feca =0;};_aaaf :=_feca +_cacd -_cggcd .Width ;if _aaaf > 0{_cacd -=_aaaf ;};if _bgcd < 0{_ccccd +=_bgcd ;_bgcd =0;};_ecdb :=_bgcd +_ccccd -_cggcd .Height ;if _ecdb > 0{_ccccd -=_ecdb ;};if _cacd <=0||_ccccd <=0{return ;};if (_feca &7)==0{_gedfg (_cggcd ,_feca ,_bgcd ,_cacd ,_ccccd ,_gccd );}else {_dgf (_cggcd ,_feca ,_bgcd ,_cacd ,_ccccd ,_gccd );};};func (_acdge *Bitmaps )selectByIndicator (_degb *_d .NumSlice )(_fggd *Bitmaps ,_dgcg error ){const _bbfbb ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _acdge ==nil {return nil ,_f .Error (_bbfbb ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _degb ==nil {return nil ,_f .Error (_bbfbb ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_acdge .Values )==0{return _acdge ,nil ;};if len (*_degb )!=len (_acdge .Values ){return nil ,_f .Errorf (_bbfbb ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_degb ),len (_acdge .Values ));};var _ffbdg ,_cdfdf ,_bfbc int ;for _cdfdf =0;_cdfdf < len (*_degb );_cdfdf ++{if _ffbdg ,_dgcg =_degb .GetInt (_cdfdf );_dgcg !=nil {return nil ,_f .Wrap (_dgcg ,_bbfbb ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _ffbdg ==1{_bfbc ++;};};if _bfbc ==len (_acdge .Values ){return _acdge ,nil ;};_fggd =&Bitmaps {};_cabg :=len (_acdge .Values )==len (_acdge .Boxes );for _cdfdf =0;_cdfdf < len (*_degb );_cdfdf ++{if _ffbdg =int ((*_degb )[_cdfdf ]);_ffbdg ==0{continue ;};_fggd .Values =append (_fggd .Values ,_acdge .Values [_cdfdf ]);if _cabg {_fggd .Boxes =append (_fggd .Boxes ,_acdge .Boxes [_cdfdf ]);};};return _fggd ,nil ;};func ClipBoxToRectangle (box *_fg .Rectangle ,wi ,hi int )(_efd *_fg .Rectangle ,_bfgd error ){const _fbcb ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_f .Error (_fbcb ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_f .Error (_fbcb ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_efd =&(*box );if _efd .Min .X < 0{_efd .Max .X +=_efd .Min .X ;_efd .Min .X =0;};if _efd .Min .Y < 0{_efd .Max .Y +=_efd .Min .Y ;_efd .Min .Y =0;};if _efd .Max .X > wi {_efd .Max .X =wi ;};if _efd .Max .Y > hi {_efd .Max .Y =hi ;};return _efd ,nil ;};func (_bfbg *Bitmap )equivalent (_cabd *Bitmap )bool {if _bfbg ==_cabd {return true ;};if !_bfbg .SizesEqual (_cabd ){return false ;};_gdf :=_fbeb (_bfbg ,_cabd ,CmbOpXor );_dab :=_bfbg .countPixels ();_ebe :=int (0.25*float32 (_dab ));if _gdf .thresholdPixelSum (_ebe ){return false ;};var (_cdce [9][9]int ;_ddaa [18][9]int ;_aeg [9][18]int ;_aebg int ;_ged int ;);_gfbeg :=9;_abcc :=_bfbg .Height /_gfbeg ;_bdb :=_bfbg .Width /_gfbeg ;_bdg ,_efee :=_abcc /2,_bdb /2;if _abcc < _bdb {_bdg =_bdb /2;_efee =_abcc /2;};_afcf :=float64 (_bdg )*float64 (_efee )*_g .Pi ;_fbb :=int (float64 (_abcc *_bdb /2)*0.9);_afec :=int (float64 (_bdb *_abcc /2)*0.9);for _fgecd :=0;_fgecd < _gfbeg ;_fgecd ++{_bfc :=_bdb *_fgecd +_aebg ;var _cfae int ;if _fgecd ==_gfbeg -1{_aebg =0;_cfae =_bfbg .Width ;}else {_cfae =_bfc +_bdb ;if ((_bfbg .Width -_aebg )%_gfbeg )> 0{_aebg ++;_cfae ++;};};for _fabb :=0;_fabb < _gfbeg ;_fabb ++{_ddbc :=_abcc *_fabb +_ged ;var _dead int ;if _fabb ==_gfbeg -1{_ged =0;_dead =_bfbg .Height ;}else {_dead =_ddbc +_abcc ;if (_bfbg .Height -_ged )%_gfbeg > 0{_ged ++;_dead ++;};};var _fbdb ,_efca ,_efcf ,_ccf int ;_bdag :=(_bfc +_cfae )/2;_add :=(_ddbc +_dead )/2;for _fde :=_bfc ;_fde < _cfae ;_fde ++{for _ece :=_ddbc ;_ece < _dead ;_ece ++{if _gdf .GetPixel (_fde ,_ece ){if _fde < _bdag {_fbdb ++;}else {_efca ++;};if _ece < _add {_ccf ++;}else {_efcf ++;};};};};_cdce [_fgecd ][_fabb ]=_fbdb +_efca ;_ddaa [_fgecd *2][_fabb ]=_fbdb ;_ddaa [_fgecd *2+1][_fabb ]=_efca ;_aeg [_fgecd ][_fabb *2]=_ccf ;_aeg [_fgecd ][_fabb *2+1]=_efcf ;};};for _debg :=0;_debg < _gfbeg *2-1;_debg ++{for _fefa :=0;_fefa < (_gfbeg -1);_fefa ++{var _cfdf int ;for _ebad :=0;_ebad < 2;_ebad ++{for _adg :=0;_adg < 2;_adg ++{_cfdf +=_ddaa [_debg +_ebad ][_fefa +_adg ];};};if _cfdf > _afec {return false ;};};};for _dedg :=0;_dedg < (_gfbeg -1);_dedg ++{for _agea :=0;_agea < ((_gfbeg *2)-1);_agea ++{var _ebdb int ;for _ddbe :=0;_ddbe < 2;_ddbe ++{for _eegg :=0;_eegg < 2;_eegg ++{_ebdb +=_aeg [_dedg +_ddbe ][_agea +_eegg ];};};if _ebdb > _fbb {return false ;};};};for _abbg :=0;_abbg < (_gfbeg -2);_abbg ++{for _edf :=0;_edf < (_gfbeg -2);_edf ++{var _bffg ,_fbdg int ;for _cadc :=0;_cadc < 3;_cadc ++{for _gbc :=0;_gbc < 3;_gbc ++{if _cadc ==_gbc {_bffg +=_cdce [_abbg +_cadc ][_edf +_gbc ];};if (2-_cadc )==_gbc {_fbdg +=_cdce [_abbg +_cadc ][_edf +_gbc ];};};};if _bffg > _afec ||_fbdg > _afec {return false ;};};};for _def :=0;_def < (_gfbeg -1);_def ++{for _gcbb :=0;_gcbb < (_gfbeg -1);_gcbb ++{var _gafc int ;for _aageb :=0;_aageb < 2;_aageb ++{for _gebf :=0;_gebf < 2;_gebf ++{_gafc +=_cdce [_def +_aageb ][_gcbb +_gebf ];};};if float64 (_gafc )> _afcf {return false ;};};};return true ;};func (_gccg *byWidth )Less (i ,j int )bool {return _gccg .Values [i ].Width < _gccg .Values [j ].Width };type MorphOperation int ;func (_ddcc *Bitmap )GetUnpaddedData ()([]byte ,error ){_gcbc :=uint (_ddcc .Width &0x07);if _gcbc ==0{return _ddcc .Data ,nil ;};_gcg :=_ddcc .Width *_ddcc .Height ;if _gcg %8!=0{_gcg >>=3;_gcg ++;}else {_gcg >>=3;};_gaba :=make ([]byte ,_gcg );_fdbd :=_cf .NewWriterMSB (_gaba );const _cbbf ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _adb :=0;_adb < _ddcc .Height ;_adb ++{for _caf :=0;_caf < _ddcc .RowStride ;_caf ++{_bab :=_ddcc .Data [_adb *_ddcc .RowStride +_caf ];if _caf !=_ddcc .RowStride -1{_ebaf :=_fdbd .WriteByte (_bab );if _ebaf !=nil {return nil ,_f .Wrap (_ebaf ,_cbbf ,"");};continue ;};for _bded :=uint (0);_bded < _gcbc ;_bded ++{_geea :=_fdbd .WriteBit (int (_bab >>(7-_bded )&0x01));if _geea !=nil {return nil ,_f .Wrap (_geea ,_cbbf ,"");};};};};return _gaba ,nil ;};func _febe ()[]int {_gabbd :=make ([]int ,256);_gabbd [0]=0;_gabbd [1]=7;var _addeb int ;for _addeb =2;_addeb < 4;_addeb ++{_gabbd [_addeb ]=_gabbd [_addeb -2]+6;};for _addeb =4;_addeb < 8;_addeb ++{_gabbd [_addeb ]=_gabbd [_addeb -4]+5;};for _addeb =8;_addeb < 16;_addeb ++{_gabbd [_addeb ]=_gabbd [_addeb -8]+4;};for _addeb =16;_addeb < 32;_addeb ++{_gabbd [_addeb ]=_gabbd [_addeb -16]+3;};for _addeb =32;_addeb < 64;_addeb ++{_gabbd [_addeb ]=_gabbd [_addeb -32]+2;};for _addeb =64;_addeb < 128;_addeb ++{_gabbd [_addeb ]=_gabbd [_addeb -64]+1;};for _addeb =128;_addeb < 256;_addeb ++{_gabbd [_addeb ]=_gabbd [_addeb -128];};return _gabbd ;};const (Vanilla Color =iota ;Chocolate ;);func (_fdga *Points )Add (pt *Points )error {const _dfbc ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _fdga ==nil {return _f .Error (_dfbc ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _f .Error (_dfbc ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_fdga =append (*_fdga ,*pt ...);return nil ;};func TstOSymbol (t *_bb .T ,scale ...int )*Bitmap {_gaaf ,_abbgg :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_b .NoError (t ,_abbgg );return TstGetScaledSymbol (t ,_gaaf ,scale ...);};func (_egca *Bitmap )GetByteIndex (x ,y int )int {return y *_egca .RowStride +(x >>3)};type byWidth Bitmaps ;func _gbcg (_fafdf *Bitmap ,_bbfg ,_bce ,_ggeg ,_dgaf int ,_ffdbe RasterOperator ,_dcfcc *Bitmap ,_fgfac ,_ecgfe int )error {var (_dddc bool ;_ddcg bool ;_ggdf byte ;_cbcg int ;_ddgee int ;_cefga int ;_befb int ;_gedb bool ;_acfa int ;_dbbg int ;_ecgef int ;_bbdae bool ;_fgb byte ;_abcb int ;_dabd int ;_aeaeb int ;_bgde byte ;_dabc int ;_adbc int ;_bacg uint ;_eaca uint ;_aec byte ;_dcfb shift ;_dgbba bool ;_eagc bool ;_dgae ,_gfcf int ;);if _fgfac &7!=0{_adbc =8-(_fgfac &7);};if _bbfg &7!=0{_ddgee =8-(_bbfg &7);};if _adbc ==0&&_ddgee ==0{_aec =_ebca [0];}else {if _ddgee > _adbc {_bacg =uint (_ddgee -_adbc );}else {_bacg =uint (8-(_adbc -_ddgee ));};_eaca =8-_bacg ;_aec =_ebca [_bacg ];};if (_bbfg &7)!=0{_dddc =true ;_cbcg =8-(_bbfg &7);_ggdf =_ebca [_cbcg ];_cefga =_fafdf .RowStride *_bce +(_bbfg >>3);_befb =_dcfcc .RowStride *_ecgfe +(_fgfac >>3);_dabc =8-(_fgfac &7);if _cbcg > _dabc {_dcfb =_fcdce ;if _ggeg >=_adbc {_dgbba =true ;};}else {_dcfb =_agbcb ;};};if _ggeg < _cbcg {_ddcg =true ;_ggdf &=_abag [8-_cbcg +_ggeg ];};if !_ddcg {_acfa =(_ggeg -_cbcg )>>3;if _acfa !=0{_gedb =true ;_dbbg =_fafdf .RowStride *_bce +((_bbfg +_ddgee )>>3);_ecgef =_dcfcc .RowStride *_ecgfe +((_fgfac +_ddgee )>>3);};};_abcb =(_bbfg +_ggeg )&7;if !(_ddcg ||_abcb ==0){_bbdae =true ;_fgb =_abag [_abcb ];_dabd =_fafdf .RowStride *_bce +((_bbfg +_ddgee )>>3)+_acfa ;_aeaeb =_dcfcc .RowStride *_ecgfe +((_fgfac +_ddgee )>>3)+_acfa ;if _abcb > int (_eaca ){_eagc =true ;};};switch _ffdbe {case PixSrc :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],_bgde ,_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]=_bgde ;};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],_bgde ,_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixNotSrc :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],^_bgde ,_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]=^_bgde ;};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],^_bgde ,_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixSrcOrDst :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],_bgde |_fafdf .Data [_cefga ],_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]|=_bgde ;};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],_bgde |_fafdf .Data [_dabd ],_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixSrcAndDst :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],_bgde &_fafdf .Data [_cefga ],_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]&=_bgde ;};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],_bgde &_fafdf .Data [_dabd ],_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixSrcXorDst :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],_bgde ^_fafdf .Data [_cefga ],_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]^=_bgde ;};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],_bgde ^_fafdf .Data [_dabd ],_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixNotSrcOrDst :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],^_bgde |_fafdf .Data [_cefga ],_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]|=^_bgde ;};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],^_bgde |_fafdf .Data [_dabd ],_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixNotSrcAndDst :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],^_bgde &_fafdf .Data [_cefga ],_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]&=^_bgde ;};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],^_bgde &_fafdf .Data [_dabd ],_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixSrcOrNotDst :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],_bgde |^_fafdf .Data [_cefga ],_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]=_bgde |^_fafdf .Data [_dbbg +_gfcf ];};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],_bgde |^_fafdf .Data [_dabd ],_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixSrcAndNotDst :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],_bgde &^_fafdf .Data [_cefga ],_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]=_bgde &^_fafdf .Data [_dbbg +_gfcf ];};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],_bgde &^_fafdf .Data [_dabd ],_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixNotPixSrcOrDst :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],^(_bgde |_fafdf .Data [_cefga ]),_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]=^(_bgde |_fafdf .Data [_dbbg +_gfcf ]);};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],^(_bgde |_fafdf .Data [_dabd ]),_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixNotPixSrcAndDst :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],^(_bgde &_fafdf .Data [_cefga ]),_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]=^(_bgde &_fafdf .Data [_dbbg +_gfcf ]);};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],^(_bgde &_fafdf .Data [_dabd ]),_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};case PixNotPixSrcXorDst :if _dddc {for _dgae =0;_dgae < _dgaf ;_dgae ++{if _dcfb ==_fcdce {_bgde =_dcfcc .Data [_befb ]<<_bacg ;if _dgbba {_bgde =_gbfb (_bgde ,_dcfcc .Data [_befb +1]>>_eaca ,_aec );};}else {_bgde =_dcfcc .Data [_befb ]>>_eaca ;};_fafdf .Data [_cefga ]=_gbfb (_fafdf .Data [_cefga ],^(_bgde ^_fafdf .Data [_cefga ]),_ggdf );_cefga +=_fafdf .RowStride ;_befb +=_dcfcc .RowStride ;};};if _gedb {for _dgae =0;_dgae < _dgaf ;_dgae ++{for _gfcf =0;_gfcf < _acfa ;_gfcf ++{_bgde =_gbfb (_dcfcc .Data [_ecgef +_gfcf ]<<_bacg ,_dcfcc .Data [_ecgef +_gfcf +1]>>_eaca ,_aec );_fafdf .Data [_dbbg +_gfcf ]=^(_bgde ^_fafdf .Data [_dbbg +_gfcf ]);};_dbbg +=_fafdf .RowStride ;_ecgef +=_dcfcc .RowStride ;};};if _bbdae {for _dgae =0;_dgae < _dgaf ;_dgae ++{_bgde =_dcfcc .Data [_aeaeb ]<<_bacg ;if _eagc {_bgde =_gbfb (_bgde ,_dcfcc .Data [_aeaeb +1]>>_eaca ,_aec );};_fafdf .Data [_dabd ]=_gbfb (_fafdf .Data [_dabd ],^(_bgde ^_fafdf .Data [_dabd ]),_fgb );_dabd +=_fafdf .RowStride ;_aeaeb +=_dcfcc .RowStride ;};};default:_dg .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ffdbe );return _f .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};type LocationFilter int ;func (_gadf *Boxes )makeSizeIndicator (_gaab ,_bada int ,_dcc LocationFilter ,_edcde SizeComparison )*_d .NumSlice {_edce :=&_d .NumSlice {};var _acbce ,_aab ,_bcbg int ;for _ ,_dged :=range *_gadf {_acbce =0;_aab ,_bcbg =_dged .Dx (),_dged .Dy ();switch _dcc {case LocSelectWidth :if (_edcde ==SizeSelectIfLT &&_aab < _gaab )||(_edcde ==SizeSelectIfGT &&_aab > _gaab )||(_edcde ==SizeSelectIfLTE &&_aab <=_gaab )||(_edcde ==SizeSelectIfGTE &&_aab >=_gaab ){_acbce =1;};case LocSelectHeight :if (_edcde ==SizeSelectIfLT &&_bcbg < _bada )||(_edcde ==SizeSelectIfGT &&_bcbg > _bada )||(_edcde ==SizeSelectIfLTE &&_bcbg <=_bada )||(_edcde ==SizeSelectIfGTE &&_bcbg >=_bada ){_acbce =1;};case LocSelectIfEither :if (_edcde ==SizeSelectIfLT &&(_bcbg < _bada ||_aab < _gaab ))||(_edcde ==SizeSelectIfGT &&(_bcbg > _bada ||_aab > _gaab ))||(_edcde ==SizeSelectIfLTE &&(_bcbg <=_bada ||_aab <=_gaab ))||(_edcde ==SizeSelectIfGTE &&(_bcbg >=_bada ||_aab >=_gaab )){_acbce =1;};case LocSelectIfBoth :if (_edcde ==SizeSelectIfLT &&(_bcbg < _bada &&_aab < _gaab ))||(_edcde ==SizeSelectIfGT &&(_bcbg > _bada &&_aab > _gaab ))||(_edcde ==SizeSelectIfLTE &&(_bcbg <=_bada &&_aab <=_gaab ))||(_edcde ==SizeSelectIfGTE &&(_bcbg >=_bada &&_aab >=_gaab )){_acbce =1;};};_edce .AddInt (_acbce );};return _edce ;};func (_gcc *Bitmap )CreateTemplate ()*Bitmap {return _gcc .createTemplate ()};func (_dga *ClassedPoints )XAtIndex (i int )float32 {return (*_dga .Points )[_dga .IntSlice [i ]].X };func (_dgc *Bitmap )nextOnPixelLow (_ccda ,_dcd ,_bcca ,_cedc ,_agf int )(_ebfa _fg .Point ,_dcdc bool ,_abbd error ){const _bade ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_aadb int ;_bcdf byte ;);_efba :=_agf *_bcca ;_gacdf :=_efba +(_cedc /8);if _bcdf ,_abbd =_dgc .GetByte (_gacdf );_abbd !=nil {return _ebfa ,false ,_f .Wrap (_abbd ,_bade ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");};if _bcdf !=0{_cbbg :=_cedc -(_cedc %8)+7;for _aadb =_cedc ;_aadb <=_cbbg &&_aadb < _ccda ;_aadb ++{if _dgc .GetPixel (_aadb ,_agf ){_ebfa .X =_aadb ;_ebfa .Y =_agf ;return _ebfa ,true ,nil ;};};};_fcbb :=(_cedc /8)+1;_aadb =8*_fcbb ;var _ega int ;for _gacdf =_efba +_fcbb ;_aadb < _ccda ;_gacdf ,_aadb =_gacdf +1,_aadb +8{if _bcdf ,_abbd =_dgc .GetByte (_gacdf );_abbd !=nil {return _ebfa ,false ,_f .Wrap (_abbd ,_bade ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _bcdf ==0{continue ;};for _ega =0;_ega < 8&&_aadb < _ccda ;_ega ,_aadb =_ega +1,_aadb +1{if _dgc .GetPixel (_aadb ,_agf ){_ebfa .X =_aadb ;_ebfa .Y =_agf ;return _ebfa ,true ,nil ;};};};for _fbc :=_agf +1;_fbc < _dcd ;_fbc ++{_efba =_fbc *_bcca ;for _gacdf ,_aadb =_efba ,0;_aadb < _ccda ;_gacdf ,_aadb =_gacdf +1,_aadb +8{if _bcdf ,_abbd =_dgc .GetByte (_gacdf );_abbd !=nil {return _ebfa ,false ,_f .Wrap (_abbd ,_bade ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _bcdf ==0{continue ;};for _ega =0;_ega < 8&&_aadb < _ccda ;_ega ,_aadb =_ega +1,_aadb +1{if _dgc .GetPixel (_aadb ,_fbc ){_ebfa .X =_aadb ;_ebfa .Y =_fbc ;return _ebfa ,true ,nil ;};};};};return _ebfa ,false ,nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _dfcf ,_gbge int ;_gca :=src .RowStride -1;if x < 0{_gbge =-x ;x =0;}else if x +src .Width > dst .Width {_gca -=src .Width +x -dst .Width ;};if y < 0{_dfcf =-y ;y =0;_gbge +=src .RowStride ;_gca +=src .RowStride ;}else if y +src .Height > dst .Height {_dfcf =src .Height +y -dst .Height ;};var (_dcdcb int ;_dggg error ;);_ffae :=x &0x07;_daa :=8-_ffae ;_edbf :=src .Width &0x07;_aacb :=_daa -_edbf ;_dcea :=_daa &0x07!=0;_adde :=src .Width <=((_gca -_gbge )<<3)+_daa ;_gcce :=dst .GetByteIndex (x ,y );_dedf :=_dfcf +dst .Height ;if src .Height > _dedf {_dcdcb =_dedf ;}else {_dcdcb =src .Height ;};switch {case !_dcea :_dggg =_fgab (src ,dst ,_dfcf ,_dcdcb ,_gcce ,_gbge ,_gca ,op );case _adde :_dggg =_effb (src ,dst ,_dfcf ,_dcdcb ,_gcce ,_gbge ,_gca ,_aacb ,_ffae ,_daa ,op );default:_dggg =_cdf (src ,dst ,_dfcf ,_dcdcb ,_gcce ,_gbge ,_gca ,_aacb ,_ffae ,_daa ,op ,_edbf );};return _dggg ;};func _fbeb (_cfdc ,_ceab *Bitmap ,_defe CombinationOperator )*Bitmap {_cfgd :=New (_cfdc .Width ,_cfdc .Height );for _cagfb :=0;_cagfb < len (_cfgd .Data );_cagfb ++{_cfgd .Data [_cagfb ]=_cbfb (_cfdc .Data [_cagfb ],_ceab .Data [_cagfb ],_defe );};return _cfgd ;};func _beace (_afbge ,_addd *Bitmap ,_fgea ,_cgeg int )(*Bitmap ,error ){const _adfc ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _addd ==nil {_dg .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_f .Error (_adfc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _fgea < 1||_cgeg < 1{return nil ,_f .Error (_adfc ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _fgea ==1&&_cgeg ==1{_bcbb ,_bfece :=_acfb (_afbge ,_addd );if _bfece !=nil {return nil ,_f .Wrap (_bfece ,_adfc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _bcbb ,nil ;};if _fgea ==1||_cgeg ==1{_eeag :=SelCreateBrick (_cgeg ,_fgea ,_cgeg /2,_fgea /2,SelHit );_eabf ,_dgeg :=_dbbf (_afbge ,_addd ,_eeag );if _dgeg !=nil {return nil ,_f .Wrap (_dgeg ,_adfc ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _eabf ,nil ;};_cfbf :=SelCreateBrick (1,_fgea ,0,_fgea /2,SelHit );_adfb :=SelCreateBrick (_cgeg ,1,_cgeg /2,0,SelHit );_gcab ,_fbda :=_dbbf (nil ,_addd ,_cfbf );if _fbda !=nil {return nil ,_f .Wrap (_fbda ,_adfc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_afbge ,_fbda =_dbbf (_afbge ,_gcab ,_adfb );if _fbda !=nil {return nil ,_f .Wrap (_fbda ,_adfc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _afbge ,nil ;};func (_abf *Bitmap )SetByte (index int ,v byte )error {if index > len (_abf .Data )-1||index < 0{return _f .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );};_abf .Data [index ]=v ;return nil ;};func (_cefb *Bitmap )GetByte (index int )(byte ,error ){if index > len (_cefb .Data )-1||index < 0{return 0,_f .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _cefb .Data [index ],nil ;};func _aead (_eefa ,_dade *Bitmap ,_dedc ,_fdcc int )(*Bitmap ,error ){const _bgddb ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _dade ==nil {return nil ,_f .Error (_bgddb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dedc < 1||_fdcc < 1{return nil ,_f .Error (_bgddb ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _dedc ==1&&_fdcc ==1{return _dade .Copy (),nil ;};if _dedc ==1||_fdcc ==1{_gggb :=SelCreateBrick (_fdcc ,_dedc ,_fdcc /2,_dedc /2,SelHit );var _gade error ;_eefa ,_gade =_cbbge (_eefa ,_dade ,_gggb );if _gade !=nil {return nil ,_f .Wrap (_gade ,_bgddb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _eefa ,nil ;};_bbgf :=SelCreateBrick (1,_dedc ,0,_dedc /2,SelHit );_cgfb :=SelCreateBrick (_fdcc ,1,_fdcc /2,0,SelHit );_cegc ,_gaea :=_dbbf (nil ,_dade ,_bbgf );if _gaea !=nil {return nil ,_f .Wrap (_gaea ,_bgddb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _eefa ,_gaea =_dbbf (_eefa ,_cegc ,_cgfb );_gaea !=nil {return nil ,_f .Wrap (_gaea ,_bgddb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_gaea =_adga (_cegc ,_eefa ,_bbgf );_gaea !=nil {return nil ,_f .Wrap (_gaea ,_bgddb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};if _ ,_gaea =_adga (_eefa ,_cegc ,_cgfb );_gaea !=nil {return nil ,_f .Wrap (_gaea ,_bgddb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _eefa ,nil ;};func _degda (_fgdc ,_ccedg *Bitmap ,_eded ,_eadg int )(_ddec error ){const _bgfc ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_afea ,_bagag ,_gfgc ,_agbd int ;_afff ,_abefg ,_cbfa ,_agbf ,_ccae ,_fdf ,_gcafg ,_afad byte ;);for _afea =0;_afea < _eded ;_afea ++{_gfgc =_afea *_fgdc .RowStride ;_agbd =_afea *_ccedg .RowStride ;for _bagag =0;_bagag < _eadg ;_bagag ++{if _afff ,_ddec =_fgdc .GetByte (_gfgc +_bagag );_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _abefg ,_ddec =_ccedg .GetByte (_agbd +_bagag );_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _afea > 0{if _cbfa ,_ddec =_fgdc .GetByte (_gfgc -_fgdc .RowStride +_bagag );_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_afff |=_cbfa |(_cbfa <<1)|(_cbfa >>1);if _bagag > 0{if _afad ,_ddec =_fgdc .GetByte (_gfgc -_fgdc .RowStride +_bagag -1);_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_afff |=_afad <<7;};if _bagag < _eadg -1{if _afad ,_ddec =_fgdc .GetByte (_gfgc -_fgdc .RowStride +_bagag +1);_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_afff |=_afad >>7;};};if _bagag > 0{if _agbf ,_ddec =_fgdc .GetByte (_gfgc +_bagag -1);_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u006a\u0020\u003e \u0030");};_afff |=_agbf <<7;};_afff &=_abefg ;if _afff ==0||^_afff ==0{if _ddec =_fgdc .SetByte (_gfgc +_bagag ,_afff );_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_gcafg =_afff ;_afff =(_afff |(_afff >>1)|(_afff <<1))&_abefg ;if (_afff ^_gcafg )==0{if _ddec =_fgdc .SetByte (_gfgc +_bagag ,_afff );_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _afea =_eded -1;_afea >=0;_afea --{_gfgc =_afea *_fgdc .RowStride ;_agbd =_afea *_ccedg .RowStride ;for _bagag =_eadg -1;_bagag >=0;_bagag --{if _afff ,_ddec =_fgdc .GetByte (_gfgc +_bagag );_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _abefg ,_ddec =_ccedg .GetByte (_agbd +_bagag );_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _afea < _eded -1{if _ccae ,_ddec =_fgdc .GetByte (_gfgc +_fgdc .RowStride +_bagag );_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_afff |=_ccae |(_ccae <<1)|_ccae >>1;if _bagag > 0{if _afad ,_ddec =_fgdc .GetByte (_gfgc +_fgdc .RowStride +_bagag -1);_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_afff |=_afad <<7;};if _bagag < _eadg -1{if _afad ,_ddec =_fgdc .GetByte (_gfgc +_fgdc .RowStride +_bagag +1);_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");};_afff |=_afad >>7;};};if _bagag < _eadg -1{if _fdf ,_ddec =_fgdc .GetByte (_gfgc +_bagag +1);_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");};_afff |=_fdf >>7;};_afff &=_abefg ;if _afff ==0||(^_afff )==0{if _ddec =_fgdc .SetByte (_gfgc +_bagag ,_afff );_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_gcafg =_afff ;_afff =(_afff |(_afff >>1)|(_afff <<1))&_abefg ;if (_afff ^_gcafg )==0{if _ddec =_fgdc .SetByte (_gfgc +_bagag ,_afff );_ddec !=nil {return _f .Wrap (_ddec ,_bgfc ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");};break ;};};};};return nil ;};func _cfaga (_bead int )int {if _bead < 0{return -_bead ;};return _bead ;};func TstISymbol (t *_bb .T ,scale ...int )*Bitmap {_dfaaa ,_gcde :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_b .NoError (t ,_gcde );return TstGetScaledSymbol (t ,_dfaaa ,scale ...);};func (_dbbc *Bitmaps )String ()string {_geeg :=_c .Builder {};for _ ,_ccab :=range _dbbc .Values {_geeg .WriteString (_ccab .String ());_geeg .WriteRune ('\n');};return _geeg .String ();};func (_acfbd *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _cffb ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_acfbd .Values )==0{return nil ,_f .Error (_cffb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_bbed :=&BitmapsArray {};_acfbd .SortByWidth ();_ecfa :=-1;_eegcg :=-1;for _cffgb :=0;_cffgb < len (_acfbd .Values );_cffgb ++{_bcge :=_acfbd .Values [_cffgb ].Width ;if _bcge > _ecfa {_ecfa =_bcge ;_eegcg ++;_bbed .Values =append (_bbed .Values ,&Bitmaps {});};_bbed .Values [_eegcg ].AddBitmap (_acfbd .Values [_cffgb ]);};return _bbed ,nil ;};type Point struct{X ,Y float32 ;};func (_caegg Points )Size ()int {return len (_caegg )};func TstWriteSymbols (t *_bb .T ,bms *Bitmaps ,src *Bitmap ){for _dccf :=0;_dccf < bms .Size ();_dccf ++{_dfdc :=bms .Values [_dccf ];_eface :=bms .Boxes [_dccf ];_fccgf :=src .RasterOperation (_eface .Min .X ,_eface .Min .Y ,_dfdc .Width ,_dfdc .Height ,PixSrc ,_dfdc ,0,0);_b .NoError (t ,_fccgf );};};func (_gfeg *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_gdga *Boxes ,_ddgc error ){const _bggd ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _gfeg ==nil {return nil ,_f .Error (_bggd ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_gfeg )==0{return _gfeg ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_f .Errorf (_bggd ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_f .Errorf (_bggd ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );};_dgdd :=_gfeg .makeSizeIndicator (width ,height ,tp ,relation );_dbdg ,_ddgc :=_gfeg .selectWithIndicator (_dgdd );if _ddgc !=nil {return nil ,_f .Wrap (_ddgc ,_bggd ,"");};return _dbdg ,nil ;};func (_bcaf Points )Get (i int )(Point ,error ){if i > len (_bcaf )-1{return Point {},_f .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bcaf [i ],nil ;};func (_cfaf *Bitmap )setEightBytes (_ffdg int ,_fabf uint64 )error {_fad :=_cfaf .RowStride -(_ffdg %_cfaf .RowStride );if _cfaf .RowStride !=_cfaf .Width >>3{_fad --;};if _fad >=8{return _cfaf .setEightFullBytes (_ffdg ,_fabf );};return _cfaf .setEightPartlyBytes (_ffdg ,_fad ,_fabf );};func (_geff MorphProcess )getWidthHeight ()(_cdggd ,_deaa int ){return _geff .Arguments [0],_geff .Arguments [1];};func (_dafg *Bitmap )thresholdPixelSum (_eeef int )bool {var (_egdg int ;_gabe uint8 ;_dfbe byte ;_beac int ;);_gdc :=_dafg .RowStride ;_bgcf :=uint (_dafg .Width &0x07);if _bgcf !=0{_gabe =uint8 ((0xff<<(8-_bgcf ))&0xff);_gdc --;};for _acd :=0;_acd < _dafg .Height ;_acd ++{for _beac =0;_beac < _gdc ;_beac ++{_dfbe =_dafg .Data [_acd *_dafg .RowStride +_beac ];_egdg +=int (_bdc [_dfbe ]);};if _bgcf !=0{_dfbe =_dafg .Data [_acd *_dafg .RowStride +_beac ]&_gabe ;_egdg +=int (_bdc [_dfbe ]);};if _egdg > _eeef {return true ;};};return false ;};func init (){const _cbec ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_fccf =New (50,40);var _bdce error ;_fccf ,_bdce =_fccf .AddBorder (2,1);if _bdce !=nil {panic (_f .Wrap (_bdce ,_cbec ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_ebdaa ,_bdce =NewWithData (50,22,_fbcdb );if _bdce !=nil {panic (_f .Wrap (_bdce ,_cbec ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func (_egef *Bitmaps )HeightSorter ()func (_edfab ,_abafb int )bool {return func (_aacg ,_ffcg int )bool {_bafe :=_egef .Values [_aacg ].Height < _egef .Values [_ffcg ].Height ;_dg .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_egef .Values [_aacg ].Height ,_egef .Values [_ffcg ].Height ,_bafe );return _bafe ;};};func (_gafe *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_gaa bool ,_cgb error ){const _fcgb ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_gagc ();};_bff :=_gafe .Width >>3;_ggcb :=_gafe .Width &7;_aebc :=byte (0xff<<uint (8-_ggcb ));var (_gbg ,_dfc ,_eee ,_dcfa int ;_egfb byte ;);for _gbg =0;_gbg < _gafe .Height ;_gbg ++{_eee =_gafe .RowStride *_gbg ;for _dfc =0;_dfc < _bff ;_dfc ++{_egfb ,_cgb =_gafe .GetByte (_eee +_dfc );if _cgb !=nil {return false ,_f .Wrap (_cgb ,_fcgb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_dcfa +=tab8 [_egfb ];};if _ggcb !=0{_egfb ,_cgb =_gafe .GetByte (_eee +_dfc );if _cgb !=nil {return false ,_f .Wrap (_cgb ,_fcgb ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_egfb &=_aebc ;_dcfa +=tab8 [_egfb ];};if _dcfa > thresh {return true ,nil ;};};return _gaa ,nil ;};func (_gddc *ClassedPoints )validateIntSlice ()error {const _ade ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_adad :=range _gddc .IntSlice {if _adad >=(_gddc .Points .Size ()){return _f .Errorf (_ade ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_adad ,_gddc .Points .Size ());};};return nil ;};func (_fcdc *Bitmap )SizesEqual (s *Bitmap )bool {if _fcdc ==s {return true ;};if _fcdc .Width !=s .Width ||_fcdc .Height !=s .Height {return false ;};return true ;};func (_dcb *Bitmap )Zero ()bool {_ddd :=_dcb .Width /8;_cce :=_dcb .Width &7;var _fce byte ;if _cce !=0{_fce =byte (0xff<<uint (8-_cce ));};var _bgdd ,_dae ,_dca int ;for _dae =0;_dae < _dcb .Height ;_dae ++{_bgdd =_dcb .RowStride *_dae ;for _dca =0;_dca < _ddd ;_dca ,_bgdd =_dca +1,_bgdd +1{if _dcb .Data [_bgdd ]!=0{return false ;};};if _cce > 0{if _dcb .Data [_bgdd ]&_fce !=0{return false ;};};};return true ;};var (_abag =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_ebca =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_dbad *byWidth )Swap (i ,j int ){_dbad .Values [i ],_dbad .Values [j ]=_dbad .Values [j ],_dbad .Values [i ];if _dbad .Boxes !=nil {_dbad .Boxes [i ],_dbad .Boxes [j ]=_dbad .Boxes [j ],_dbad .Boxes [i ];};};type Boxes []*_fg .Rectangle ;func (_cagd *Bitmap )setTwoBytes (_cced int ,_abg uint16 )error {if _cced +1> len (_cagd .Data )-1{return _f .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cced );};_cagd .Data [_cced ]=byte ((_abg &0xff00)>>8);_cagd .Data [_cced +1]=byte (_abg &0xff);return nil ;};func _egg (_gcced ,_fecd *Bitmap ,_bdgc ,_cfggf int )(*Bitmap ,error ){const _aaee ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _fecd ==nil {return nil ,_f .Error (_aaee ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bdgc < 1&&_cfggf < 1{return nil ,_f .Error (_aaee ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _bdgc ==1&&_cfggf ==1{return _fecd .Copy (),nil ;};if _bdgc ==1||_cfggf ==1{var _eda error ;_gacdd :=SelCreateBrick (_cfggf ,_bdgc ,_cfggf /2,_bdgc /2,SelHit );_gcced ,_eda =_cbd (_gcced ,_fecd ,_gacdd );if _eda !=nil {return nil ,_f .Wrap (_eda ,_aaee ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _gcced ,nil ;};_edge :=SelCreateBrick (1,_bdgc ,0,_bdgc /2,SelHit );_cca :=SelCreateBrick (_cfggf ,1,_cfggf /2,0,SelHit );_fbgfe ,_dgdf :=_adga (nil ,_fecd ,_edge );if _dgdf !=nil {return nil ,_f .Wrap (_dgdf ,_aaee ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_gcced ,_dgdf =_adga (_gcced ,_fbgfe ,_cca );if _dgdf !=nil {return nil ,_f .Wrap (_dgdf ,_aaee ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_dgdf =_dbbf (_fbgfe ,_gcced ,_edge );if _dgdf !=nil {return nil ,_f .Wrap (_dgdf ,_aaee ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ ,_dgdf =_dbbf (_gcced ,_fbgfe ,_cca );if _dgdf !=nil {return nil ,_f .Wrap (_dgdf ,_aaee ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _gcced ,nil ;};func (_cabaa Points )GetIntX (i int )(int ,error ){if i >=len (_cabaa ){return 0,_f .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_cabaa [i ].X ),nil ;};func (_bcaa CombinationOperator )String ()string {var _gabc string ;switch _bcaa {case CmbOpOr :_gabc ="\u004f\u0052";case CmbOpAnd :_gabc ="\u0041\u004e\u0044";case CmbOpXor :_gabc ="\u0058\u004f\u0052";case CmbOpXNor :_gabc ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_gabc ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_gabc ="\u004e\u004f\u0054";};return _gabc ;};func (_cade *Bitmap )connComponentsBB (_bbda int )(_ffdb *Boxes ,_aeag error ){const _ffbdb ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _bbda !=4&&_bbda !=8{return nil ,_f .Error (_ffbdb ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _cade .Zero (){return &Boxes {},nil ;};_cade .setPadBits (0);_cefe ,_aeag :=_acfb (nil ,_cade );if _aeag !=nil {return nil ,_f .Wrap (_aeag ,_ffbdb ,"\u0062\u006d\u0031");};_gcbg :=&_d .Stack {};_gcbg .Aux =&_d .Stack {};_ffdb =&Boxes {};var (_geec ,_cbce int ;_dafc _fg .Point ;_edfa bool ;_facd *_fg .Rectangle ;);for {if _dafc ,_edfa ,_aeag =_cefe .nextOnPixel (_cbce ,_geec );_aeag !=nil {return nil ,_f .Wrap (_aeag ,_ffbdb ,"");};if !_edfa {break ;};if _facd ,_aeag =_dgbfg (_cefe ,_gcbg ,_dafc .X ,_dafc .Y ,_bbda );_aeag !=nil {return nil ,_f .Wrap (_aeag ,_ffbdb ,"");};if _aeag =_ffdb .Add (_facd );_aeag !=nil {return nil ,_f .Wrap (_aeag ,_ffbdb ,"");};_cbce =_dafc .X ;_geec =_dafc .Y ;};return _ffdb ,nil ;};func (_bbdad *Selection )findMaxTranslations ()(_bagb ,_bddb ,_fdgfb ,_cfcc int ){for _eaabd :=0;_eaabd < _bbdad .Height ;_eaabd ++{for _dcga :=0;_dcga < _bbdad .Width ;_dcga ++{if _bbdad .Data [_eaabd ][_dcga ]==SelHit {_bagb =_edgb (_bagb ,_bbdad .Cx -_dcga );_bddb =_edgb (_bddb ,_bbdad .Cy -_eaabd );_fdgfb =_edgb (_fdgfb ,_dcga -_bbdad .Cx );_cfcc =_edgb (_cfcc ,_eaabd -_bbdad .Cy );};};};return _bagb ,_bddb ,_fdgfb ,_cfcc ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _acfb (d ,s )};func (_cedcb MorphProcess )verify (_dceg int ,_bbg ,_afbg *int )error {const _egce ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _cedcb .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_cedcb .Arguments )!=2{return _f .Error (_egce ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");};_bgac ,_adaf :=_cedcb .getWidthHeight ();if _bgac <=0||_adaf <=0{return _f .Error (_egce ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");};case MopRankBinaryReduction :_gbdb :=len (_cedcb .Arguments );*_bbg +=_gbdb ;if _gbdb < 1||_gbdb > 4{return _f .Error (_egce ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");};for _afda :=0;_afda < _gbdb ;_afda ++{if _cedcb .Arguments [_afda ]< 1||_cedcb .Arguments [_afda ]> 4{return _f .Error (_egce ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");};};case MopReplicativeBinaryExpansion :if len (_cedcb .Arguments )==0{return _f .Error (_egce ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aebccb :=_cedcb .Arguments [0];if _aebccb !=2&&_aebccb !=4&&_aebccb !=8{return _f .Error (_egce ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};*_bbg -=_eeda [_aebccb /4];case MopAddBorder :if len (_cedcb .Arguments )==0{return _f .Error (_egce ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfee :=_cedcb .Arguments [0];if _dceg > 0{return _f .Error (_egce ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");};if _dfee < 1{return _f .Error (_egce ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_afbg =_dfee ;};return nil ;};func (_cda *Bitmap )setEightFullBytes (_gdb int ,_adfg uint64 )error {if _gdb +7> len (_cda .Data )-1{return _f .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_cda .Data [_gdb ]=byte ((_adfg &0xff00000000000000)>>56);_cda .Data [_gdb +1]=byte ((_adfg &0xff000000000000)>>48);_cda .Data [_gdb +2]=byte ((_adfg &0xff0000000000)>>40);_cda .Data [_gdb +3]=byte ((_adfg &0xff00000000)>>32);_cda .Data [_gdb +4]=byte ((_adfg &0xff000000)>>24);_cda .Data [_gdb +5]=byte ((_adfg &0xff0000)>>16);_cda .Data [_gdb +6]=byte ((_adfg &0xff00)>>8);_cda .Data [_gdb +7]=byte (_adfg &0xff);return nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_fg .Rectangle ;};func (_bgf *Bitmap )removeBorderGeneral (_dff ,_dbca ,_eegf ,_abca int )(*Bitmap ,error ){const _cdg ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _dff < 0||_dbca < 0||_eegf < 0||_abca < 0{return nil ,_f .Error (_cdg ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_cegb ,_bed :=_bgf .Width ,_bgf .Height ;_bcf :=_cegb -_dff -_dbca ;_bbcdb :=_bed -_eegf -_abca ;if _bcf <=0{return nil ,_f .Errorf (_cdg ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_bcf );};if _bbcdb <=0{return nil ,_f .Errorf (_cdg ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_bbcdb );};_edc :=New (_bcf ,_bbcdb );_edc .Color =_bgf .Color ;_cgg :=_edc .RasterOperation (0,0,_bcf ,_bbcdb ,PixSrc ,_bgf ,_dff ,_eegf );if _cgg !=nil {return nil ,_f .Wrap (_cgg ,_cdg ,"");};return _edc ,nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _dbbf (d ,s ,sel )};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_fg .Rectangle ;};