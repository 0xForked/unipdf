//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_a "errors";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_ba "io";_b "math";);func (_ae *tree )fill (_fbff ,_fdde ,_bfdfd int )error {_bdce :=_ae ._fdb ;for _abee :=0;_abee < _fbff ;_abee ++{_fgee :=_fbff -1-_abee ;_eag :=((_fdde >>uint (_fgee ))&1)!=0;
_edebf :=_bdce .walk (_eag );if _edebf !=nil {if _edebf ._bfcad {return _a .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_bdce =_edebf ;continue ;};_edebf =&treeNode {};if _abee ==_fbff -1{_edebf ._gfgf =_bfdfd ;_edebf ._bfcad =true ;};if _fdde ==0{_edebf ._eege =true ;};_bdce .set (_eag ,_edebf );_bdce =_edebf ;};return nil ;};func init (){_g =&treeNode {_bfcad :true ,_gfgf :_da };
_fe =&treeNode {_gfgf :_bf ,_fgg :_g };_fe ._effc =_fe ;_ga =&tree {_fdb :&treeNode {}};if _aae :=_ga .fillWithNode (12,0,_fe );_aae !=nil {panic (_aae .Error ());};if _ac :=_ga .fillWithNode (12,1,_g );_ac !=nil {panic (_ac .Error ());};_c =&tree {_fdb :&treeNode {}};
for _bd :=0;_bd < len (_gcc );_bd ++{for _ef :=0;_ef < len (_gcc [_bd ]);_ef ++{if _gaf :=_c .fill (_bd +2,int (_gcc [_bd ][_ef ]),int (_eaf [_bd ][_ef ]));_gaf !=nil {panic (_gaf .Error ());};};};if _ea :=_c .fillWithNode (12,0,_fe );_ea !=nil {panic (_ea .Error ());
};if _fd :=_c .fillWithNode (12,1,_g );_fd !=nil {panic (_fd .Error ());};_e =&tree {_fdb :&treeNode {}};for _baf :=0;_baf < len (_fee );_baf ++{for _cg :=0;_cg < len (_fee [_baf ]);_cg ++{if _fg :=_e .fill (_baf +4,int (_fee [_baf ][_cg ]),int (_aba [_baf ][_cg ]));
_fg !=nil {panic (_fg .Error ());};};};if _eb :=_e .fillWithNode (12,0,_fe );_eb !=nil {panic (_eb .Error ());};if _bdg :=_e .fillWithNode (12,1,_g );_bdg !=nil {panic (_bdg .Error ());};_ec =&tree {_fdb :&treeNode {}};if _ad :=_ec .fill (4,1,_gad );_ad !=nil {panic (_ad .Error ());
};if _eaa :=_ec .fill (3,1,_dac );_eaa !=nil {panic (_eaa .Error ());};if _ed :=_ec .fill (1,1,0);_ed !=nil {panic (_ed .Error ());};if _gd :=_ec .fill (3,3,1);_gd !=nil {panic (_gd .Error ());};if _ecb :=_ec .fill (6,3,2);_ecb !=nil {panic (_ecb .Error ());
};if _gc :=_ec .fill (7,3,3);_gc !=nil {panic (_gc .Error ());};if _gf :=_ec .fill (3,2,-1);_gf !=nil {panic (_gf .Error ());};if _acf :=_ec .fill (6,2,-2);_acf !=nil {panic (_acf .Error ());};if _ab :=_ec .fill (7,2,-3);_ab !=nil {panic (_ab .Error ());
};};func (_gege *Encoder )appendEncodedRow (_bbd ,_fca []byte ,_cbb int )[]byte {if len (_bbd )> 0&&_cbb !=0&&!_gege .EncodedByteAlign {_bbd [len (_bbd )-1]=_bbd [len (_bbd )-1]|_fca [0];_bbd =append (_bbd ,_fca [1:]...);}else {_bbd =append (_bbd ,_fca ...);
};return _bbd ;};var _fee =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func _ebf (_ecfe []byte ,_ffc ,_acdf ,_dfff int )([]byte ,int ){_fdac :=_ddda (_acdf ,_dfff );_ecfe ,_ffc =_gag (_ecfe ,_ffc ,_fdac );return _ecfe ,_ffc ;};var (_ca map[int ]code ;_fb map[int ]code ;_bda map[int ]code ;_de map[int ]code ;_eca map[int ]code ;
_eda map[int ]byte ;_gb =code {Code :1<<4,BitsWritten :12};_eg =code {Code :3<<3,BitsWritten :13};_ag =code {Code :2<<3,BitsWritten :13};_gcb =code {Code :1<<12,BitsWritten :4};_feee =code {Code :1<<13,BitsWritten :3};_gac =code {Code :1<<15,BitsWritten :1};
_abe =code {Code :3<<13,BitsWritten :3};_gdb =code {Code :3<<10,BitsWritten :6};_gff =code {Code :3<<9,BitsWritten :7};_fbg =code {Code :2<<13,BitsWritten :3};_ge =code {Code :2<<10,BitsWritten :6};_gg =code {Code :2<<9,BitsWritten :7};);var _aba =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_gga :=&Decoder {_gfg :_f .NewReader (data ),_ecg :options .Columns ,_dc :options .Rows ,_ggg :options .DamagedRowsBeforeError ,_dg :make ([]byte ,(options .Columns +7)/8),_cb :make ([]int ,options .Columns +2),_bac :make ([]int ,options .Columns +2),_cga :options .EncodedByteAligned ,_cce :options .BlackIsOne ,_fdd :options .EndOfLine ,_dd :options .EndOfBlock };
switch {case options .K ==0:_gga ._gadc =_bag ;if len (data )< 20{return nil ,_a .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_ddb :=data [:20];if _ddb [0]!=0||(_ddb [1]>>4!=1&&_ddb [1]!=1){_gga ._gadc =_cag ;
_ged :=(uint16 (_ddb [0])<<8+uint16 (_ddb [1]&0xff))>>4;for _gab :=12;_gab < 160;_gab ++{_ged =(_ged <<1)+uint16 ((_ddb [_gab /8]>>uint16 (7-(_gab %8)))&0x01);if _ged &0xfff==1{_gga ._gadc =_bag ;break ;};};};case options .K < 0:_gga ._gadc =_fcd ;case options .K > 0:_gga ._gadc =_bag ;
_gga ._acc =true ;};switch _gga ._gadc {case _cag ,_bag ,_fcd :default:return nil ,_a .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _gga ,nil ;};func init (){_ca =make (map[int ]code );_ca [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ca [1]=code {Code :2<<(5+8),BitsWritten :3};_ca [2]=code {Code :3<<(6+8),BitsWritten :2};_ca [3]=code {Code :2<<(6+8),BitsWritten :2};_ca [4]=code {Code :3<<(5+8),BitsWritten :3};
_ca [5]=code {Code :3<<(4+8),BitsWritten :4};_ca [6]=code {Code :2<<(4+8),BitsWritten :4};_ca [7]=code {Code :3<<(3+8),BitsWritten :5};_ca [8]=code {Code :5<<(2+8),BitsWritten :6};_ca [9]=code {Code :4<<(2+8),BitsWritten :6};_ca [10]=code {Code :4<<(1+8),BitsWritten :7};
_ca [11]=code {Code :5<<(1+8),BitsWritten :7};_ca [12]=code {Code :7<<(1+8),BitsWritten :7};_ca [13]=code {Code :4<<8,BitsWritten :8};_ca [14]=code {Code :7<<8,BitsWritten :8};_ca [15]=code {Code :12<<8,BitsWritten :9};_ca [16]=code {Code :5<<8|3<<6,BitsWritten :10};
_ca [17]=code {Code :6<<8,BitsWritten :10};_ca [18]=code {Code :2<<8,BitsWritten :10};_ca [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ca [20]=code {Code :13<<8,BitsWritten :11};_ca [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ca [22]=code {Code :6<<8|7<<5,BitsWritten :11};
_ca [23]=code {Code :5<<8,BitsWritten :11};_ca [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ca [25]=code {Code :3<<8,BitsWritten :11};_ca [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ca [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ca [28]=code {Code :12<<8|12<<4,BitsWritten :12};
_ca [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ca [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ca [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ca [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ca [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ca [34]=code {Code :13<<8|2<<4,BitsWritten :12};
_ca [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ca [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ca [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ca [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ca [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ca [40]=code {Code :6<<8|12<<4,BitsWritten :12};
_ca [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ca [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ca [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ca [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ca [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ca [46]=code {Code :5<<8|6<<4,BitsWritten :12};
_ca [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ca [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ca [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ca [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ca [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ca [52]=code {Code :2<<8|4<<4,BitsWritten :12};
_ca [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ca [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ca [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ca [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ca [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ca [58]=code {Code :5<<8|9<<4,BitsWritten :12};
_ca [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ca [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ca [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ca [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ca [63]=code {Code :6<<8|7<<4,BitsWritten :12};_fb =make (map[int ]code );
_fb [0]=code {Code :53<<8,BitsWritten :8};_fb [1]=code {Code :7<<(2+8),BitsWritten :6};_fb [2]=code {Code :7<<(4+8),BitsWritten :4};_fb [3]=code {Code :8<<(4+8),BitsWritten :4};_fb [4]=code {Code :11<<(4+8),BitsWritten :4};_fb [5]=code {Code :12<<(4+8),BitsWritten :4};
_fb [6]=code {Code :14<<(4+8),BitsWritten :4};_fb [7]=code {Code :15<<(4+8),BitsWritten :4};_fb [8]=code {Code :19<<(3+8),BitsWritten :5};_fb [9]=code {Code :20<<(3+8),BitsWritten :5};_fb [10]=code {Code :7<<(3+8),BitsWritten :5};_fb [11]=code {Code :8<<(3+8),BitsWritten :5};
_fb [12]=code {Code :8<<(2+8),BitsWritten :6};_fb [13]=code {Code :3<<(2+8),BitsWritten :6};_fb [14]=code {Code :52<<(2+8),BitsWritten :6};_fb [15]=code {Code :53<<(2+8),BitsWritten :6};_fb [16]=code {Code :42<<(2+8),BitsWritten :6};_fb [17]=code {Code :43<<(2+8),BitsWritten :6};
_fb [18]=code {Code :39<<(1+8),BitsWritten :7};_fb [19]=code {Code :12<<(1+8),BitsWritten :7};_fb [20]=code {Code :8<<(1+8),BitsWritten :7};_fb [21]=code {Code :23<<(1+8),BitsWritten :7};_fb [22]=code {Code :3<<(1+8),BitsWritten :7};_fb [23]=code {Code :4<<(1+8),BitsWritten :7};
_fb [24]=code {Code :40<<(1+8),BitsWritten :7};_fb [25]=code {Code :43<<(1+8),BitsWritten :7};_fb [26]=code {Code :19<<(1+8),BitsWritten :7};_fb [27]=code {Code :36<<(1+8),BitsWritten :7};_fb [28]=code {Code :24<<(1+8),BitsWritten :7};_fb [29]=code {Code :2<<8,BitsWritten :8};
_fb [30]=code {Code :3<<8,BitsWritten :8};_fb [31]=code {Code :26<<8,BitsWritten :8};_fb [32]=code {Code :27<<8,BitsWritten :8};_fb [33]=code {Code :18<<8,BitsWritten :8};_fb [34]=code {Code :19<<8,BitsWritten :8};_fb [35]=code {Code :20<<8,BitsWritten :8};
_fb [36]=code {Code :21<<8,BitsWritten :8};_fb [37]=code {Code :22<<8,BitsWritten :8};_fb [38]=code {Code :23<<8,BitsWritten :8};_fb [39]=code {Code :40<<8,BitsWritten :8};_fb [40]=code {Code :41<<8,BitsWritten :8};_fb [41]=code {Code :42<<8,BitsWritten :8};
_fb [42]=code {Code :43<<8,BitsWritten :8};_fb [43]=code {Code :44<<8,BitsWritten :8};_fb [44]=code {Code :45<<8,BitsWritten :8};_fb [45]=code {Code :4<<8,BitsWritten :8};_fb [46]=code {Code :5<<8,BitsWritten :8};_fb [47]=code {Code :10<<8,BitsWritten :8};
_fb [48]=code {Code :11<<8,BitsWritten :8};_fb [49]=code {Code :82<<8,BitsWritten :8};_fb [50]=code {Code :83<<8,BitsWritten :8};_fb [51]=code {Code :84<<8,BitsWritten :8};_fb [52]=code {Code :85<<8,BitsWritten :8};_fb [53]=code {Code :36<<8,BitsWritten :8};
_fb [54]=code {Code :37<<8,BitsWritten :8};_fb [55]=code {Code :88<<8,BitsWritten :8};_fb [56]=code {Code :89<<8,BitsWritten :8};_fb [57]=code {Code :90<<8,BitsWritten :8};_fb [58]=code {Code :91<<8,BitsWritten :8};_fb [59]=code {Code :74<<8,BitsWritten :8};
_fb [60]=code {Code :75<<8,BitsWritten :8};_fb [61]=code {Code :50<<8,BitsWritten :8};_fb [62]=code {Code :51<<8,BitsWritten :8};_fb [63]=code {Code :52<<8,BitsWritten :8};_bda =make (map[int ]code );_bda [64]=code {Code :3<<8|3<<6,BitsWritten :10};_bda [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_bda [192]=code {Code :12<<8|9<<4,BitsWritten :12};_bda [256]=code {Code :5<<8|11<<4,BitsWritten :12};_bda [320]=code {Code :3<<8|3<<4,BitsWritten :12};_bda [384]=code {Code :3<<8|4<<4,BitsWritten :12};_bda [448]=code {Code :3<<8|5<<4,BitsWritten :12};
_bda [512]=code {Code :3<<8|12<<3,BitsWritten :13};_bda [576]=code {Code :3<<8|13<<3,BitsWritten :13};_bda [640]=code {Code :2<<8|10<<3,BitsWritten :13};_bda [704]=code {Code :2<<8|11<<3,BitsWritten :13};_bda [768]=code {Code :2<<8|12<<3,BitsWritten :13};
_bda [832]=code {Code :2<<8|13<<3,BitsWritten :13};_bda [896]=code {Code :3<<8|18<<3,BitsWritten :13};_bda [960]=code {Code :3<<8|19<<3,BitsWritten :13};_bda [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_bda [1088]=code {Code :3<<8|21<<3,BitsWritten :13};
_bda [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_bda [1216]=code {Code :119<<3,BitsWritten :13};_bda [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_bda [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_bda [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_bda [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_bda [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_bda [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_bda [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_bda [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_de =make (map[int ]code );_de [64]=code {Code :27<<(3+8),BitsWritten :5};_de [128]=code {Code :18<<(3+8),BitsWritten :5};_de [192]=code {Code :23<<(2+8),BitsWritten :6};_de [256]=code {Code :55<<(1+8),BitsWritten :7};_de [320]=code {Code :54<<8,BitsWritten :8};
_de [384]=code {Code :55<<8,BitsWritten :8};_de [448]=code {Code :100<<8,BitsWritten :8};_de [512]=code {Code :101<<8,BitsWritten :8};_de [576]=code {Code :104<<8,BitsWritten :8};_de [640]=code {Code :103<<8,BitsWritten :8};_de [704]=code {Code :102<<8,BitsWritten :9};
_de [768]=code {Code :102<<8|1<<7,BitsWritten :9};_de [832]=code {Code :105<<8,BitsWritten :9};_de [896]=code {Code :105<<8|1<<7,BitsWritten :9};_de [960]=code {Code :106<<8,BitsWritten :9};_de [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_de [1088]=code {Code :107<<8,BitsWritten :9};
_de [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_de [1216]=code {Code :108<<8,BitsWritten :9};_de [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_de [1344]=code {Code :109<<8,BitsWritten :9};_de [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_de [1472]=code {Code :76<<8,BitsWritten :9};
_de [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_de [1600]=code {Code :77<<8,BitsWritten :9};_de [1664]=code {Code :24<<(2+8),BitsWritten :6};_de [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_eca =make (map[int ]code );_eca [1792]=code {Code :1<<8,BitsWritten :11};
_eca [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_eca [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_eca [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_eca [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_eca [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_eca [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_eca [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_eca [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_eca [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_eca [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_eca [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_eca [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_eda =make (map[int ]byte );_eda [0]=0xFF;_eda [1]=0xFE;_eda [2]=0xFC;_eda [3]=0xF8;_eda [4]=0xF0;_eda [5]=0xE0;_eda [6]=0xC0;_eda [7]=0x80;_eda [8]=0x00;
};func (_ff *Decoder )Read (in []byte )(int ,error ){if _ff ._bc !=nil {return 0,_ff ._bc ;};_cd :=len (in );var (_adf int ;_geb int ;);for _cd !=0{if _ff ._fdf >=_ff ._dgf {if _fda :=_ff .fetch ();_fda !=nil {_ff ._bc =_fda ;return 0,_fda ;};};if _ff ._dgf ==-1{return _adf ,_ba .EOF ;
};switch {case _cd <=_ff ._dgf -_ff ._fdf :_bg :=_ff ._dg [_ff ._fdf :_ff ._fdf +_cd ];for _ ,_fcf :=range _bg {if !_ff ._cce {_fcf =^_fcf ;};in [_geb ]=_fcf ;_geb ++;};_adf +=len (_bg );_ff ._fdf +=len (_bg );return _adf ,nil ;default:_bga :=_ff ._dg [_ff ._fdf :];
for _ ,_df :=range _bga {if !_ff ._cce {_df =^_df ;};in [_geb ]=_df ;_geb ++;};_adf +=len (_bga );_ff ._fdf +=len (_bga );_cd -=len (_bga );};};return _adf ,nil ;};func (_dff *Decoder )decodeG32D ()error {_dff ._gdg =_dff ._ggge ;_dff ._bac ,_dff ._cb =_dff ._cb ,_dff ._bac ;
_fge :=true ;var (_bba bool ;_fef int ;_eab error ;);_dff ._ggge =0;_fga :for _fef < _dff ._ecg {_dfc :=_ec ._fdb ;for {_bba ,_eab =_dff ._gfg .ReadBool ();if _eab !=nil {return _eab ;};_dfc =_dfc .walk (_bba );if _dfc ==nil {continue _fga ;};if !_dfc ._bfcad {continue ;
};switch _dfc ._gfgf {case _dac :var _fdg int ;if _fge {_fdg ,_eab =_dff .decodeRun (_e );}else {_fdg ,_eab =_dff .decodeRun (_c );};if _eab !=nil {return _eab ;};_fef +=_fdg ;_dff ._bac [_dff ._ggge ]=_fef ;_dff ._ggge ++;if _fge {_fdg ,_eab =_dff .decodeRun (_c );
}else {_fdg ,_eab =_dff .decodeRun (_e );};if _eab !=nil {return _eab ;};_fef +=_fdg ;_dff ._bac [_dff ._ggge ]=_fef ;_dff ._ggge ++;case _gad :_acg :=_dff .getNextChangingElement (_fef ,_fge )+1;if _acg >=_dff ._gdg {_fef =_dff ._ecg ;}else {_fef =_dff ._cb [_acg ];
};default:_dgfb :=_dff .getNextChangingElement (_fef ,_fge );if _dgfb >=_dff ._gdg ||_dgfb ==-1{_fef =_dff ._ecg +_dfc ._gfgf ;}else {_fef =_dff ._cb [_dgfb ]+_dfc ._gfgf ;};_dff ._bac [_dff ._ggge ]=_fef ;_dff ._ggge ++;_fge =!_fge ;};continue _fga ;};
};return nil ;};func (_ebac *Decoder )decodeRun (_abad *tree )(int ,error ){var _ede int ;_cfa :=_abad ._fdb ;for {_efa ,_cgd :=_ebac ._gfg .ReadBool ();if _cgd !=nil {return 0,_cgd ;};_cfa =_cfa .walk (_efa );if _cfa ==nil {return 0,_a .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _cfa ._bfcad {_ede +=_cfa ._gfgf ;switch {case _cfa ._gfgf >=64:_cfa =_abad ._fdb ;case _cfa ._gfgf >=0:return _ede ,nil ;default:return _ebac ._ecg ,nil ;};};};};func _gded (_bdd int ,_age bool )(code ,int ,bool ){if _bdd < 64{if _age {return _fb [_bdd ],0,true ;
};return _ca [_bdd ],0,true ;};_eae :=_bdd /64;if _eae > 40{return _eca [2560],_bdd -2560,false ;};if _eae > 27{return _eca [_eae *64],_bdd -_eae *64,false ;};if _age {return _de [_eae *64],_bdd -_eae *64,false ;};return _bda [_eae *64],_bdd -_eae *64,false ;
};type tree struct{_fdb *treeNode };var _gcc =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_egc *Decoder )fetch ()error {if _egc ._dgf ==-1{return nil ;};if _egc ._fdf < _egc ._dgf {return nil ;};_egc ._dgf =0;_bfc :=_egc .decodeRow ();if _bfc !=nil {if !_a .Is (_bfc ,_ba .EOF ){return _bfc ;};if _egc ._dgf !=0{return _bfc ;};_egc ._dgf =-1;
};_egc ._fdf =0;return nil ;};var (_dfae byte =1;_fec byte =0;);func _gedg (_eccc int )([]byte ,int ){var _dgc []byte ;for _cdb :=0;_cdb < 6;_cdb ++{_dgc ,_eccc =_gag (_dgc ,_eccc ,_gb );};return _dgc ,_eccc %8;};func (_dcf *Decoder )tryFetchRTC2D ()(_gde error ){_dcf ._gfg .Mark ();
var _deg bool ;for _bca :=0;_bca < 5;_bca ++{_deg ,_gde =_dcf .tryFetchEOL1 ();if _gde !=nil {if _a .Is (_gde ,_ba .EOF ){if _bca ==0{break ;};return _ece ;};};if _deg {continue ;};if _bca > 0{return _ece ;};break ;};if _deg {return _ba .EOF ;};_dcf ._gfg .Reset ();
return _gde ;};func _ffd (_abc int )([]byte ,int ){var _ccec []byte ;for _gdad :=0;_gdad < 6;_gdad ++{_ccec ,_abc =_gag (_ccec ,_abc ,_eg );};return _ccec ,_abc %8;};func (_dfa *Decoder )decodeRowType4 ()error {if !_dfa ._acc {return _dfa .decoderRowType41D ();
};if _dfa ._cga {_dfa ._gfg .Align ();};_dfa ._gfg .Mark ();_gcd ,_af :=_dfa .tryFetchEOL ();if _af !=nil {return _af ;};if !_gcd &&_dfa ._fdd {_dfa ._bdc ++;if _dfa ._bdc > _dfa ._ggg {return _ecf ;};_dfa ._gfg .Reset ();};if !_gcd {_dfa ._gfg .Reset ();
};_fac ,_af :=_dfa ._gfg .ReadBool ();if _af !=nil {return _af ;};if _fac {if _gcd &&_dfa ._dd {if _af =_dfa .tryFetchRTC2D ();_af !=nil {return _af ;};};_af =_dfa .decode1D ();}else {_af =_dfa .decode2D ();};if _af !=nil {return _af ;};return nil ;};func (_adab *treeNode )walk (_eaeb bool )*treeNode {if _eaeb {return _adab ._fgg ;
};return _adab ._effc ;};func _ddda (_faae ,_cbec int )code {var _gedf code ;switch _cbec -_faae {case -1:_gedf =_abe ;case -2:_gedf =_gdb ;case -3:_gedf =_gff ;case 0:_gedf =_gac ;case 1:_gedf =_fbg ;case 2:_gedf =_ge ;case 3:_gedf =_gg ;};return _gedf ;
};func _bfdf (_beb ,_aac []byte ,_cfc int )int {_fff :=_gbf (_aac ,_cfc );if _fff < len (_aac )&&(_cfc ==-1&&_aac [_fff ]==_dfae ||_cfc >=0&&_cfc < len (_beb )&&_beb [_cfc ]==_aac [_fff ]||_cfc >=len (_beb )&&_beb [_cfc -1]!=_aac [_fff ]){_fff =_gbf (_aac ,_fff );
};return _fff ;};func (_ggc *Encoder )encodeG32D (_edc [][]byte )[]byte {var _fdgc []byte ;var _acd int ;for _fbd :=0;_fbd < len (_edc );_fbd +=_ggc .K {if _ggc .Rows > 0&&!_ggc .EndOfBlock &&_fbd ==_ggc .Rows {break ;};_fbca ,_abb :=_ecd (_edc [_fbd ],_acd ,_eg );
_fdgc =_ggc .appendEncodedRow (_fdgc ,_fbca ,_acd );if _ggc .EncodedByteAlign {_abb =0;};_acd =_abb ;for _dcb :=_fbd +1;_dcb < (_fbd +_ggc .K )&&_dcb < len (_edc );_dcb ++{if _ggc .Rows > 0&&!_ggc .EndOfBlock &&_dcb ==_ggc .Rows {break ;};_edg ,_aaa :=_gag (nil ,_acd ,_ag );
var _fdfc ,_bfca ,_gbc int ;_abf :=-1;for _abf < len (_edc [_dcb ]){_fdfc =_gbf (_edc [_dcb ],_abf );_bfca =_bfdf (_edc [_dcb ],_edc [_dcb -1],_abf );_gbc =_gbf (_edc [_dcb -1],_bfca );if _gbc < _fdfc {_edg ,_aaa =_eed (_edg ,_aaa );_abf =_gbc ;}else {if _b .Abs (float64 (_bfca -_fdfc ))> 3{_edg ,_aaa ,_abf =_eeb (_edc [_dcb ],_edg ,_aaa ,_abf ,_fdfc );
}else {_edg ,_aaa =_ebf (_edg ,_aaa ,_fdfc ,_bfca );_abf =_fdfc ;};};};_fdgc =_ggc .appendEncodedRow (_fdgc ,_edg ,_acd );if _ggc .EncodedByteAlign {_aaa =0;};_acd =_aaa %8;};};if _ggc .EndOfBlock {_cbe ,_ :=_ffd (_acd );_fdgc =_ggc .appendEncodedRow (_fdgc ,_cbe ,_acd );
};return _fdgc ;};func _effd (_dddc [][]byte )[][]byte {_gdd :=make ([]byte ,len (_dddc [0]));for _ddea :=range _gdd {_gdd [_ddea ]=_dfae ;};_dddc =append (_dddc ,[]byte {});for _efab :=len (_dddc )-1;_efab > 0;_efab --{_dddc [_efab ]=_dddc [_efab -1];
};_dddc [0]=_gdd ;return _dddc ;};const (_ tiffType =iota ;_cag ;_bag ;_fcd ;);func _eaab (_bec []byte ,_fbf int ,_caa int ,_ecgf bool )([]byte ,int ){var (_fbe code ;_eff bool ;);for !_eff {_fbe ,_caa ,_eff =_gded (_caa ,_ecgf );_bec ,_fbf =_gag (_bec ,_fbf ,_fbe );
};return _bec ,_fbf ;};func _eeb (_cca ,_bfcc []byte ,_gdaa ,_fba ,_edcg int )([]byte ,int ,int ){_fbaa :=_gbf (_cca ,_edcg );_dag :=_fba >=0&&_cca [_fba ]==_dfae ||_fba ==-1;_bfcc ,_gdaa =_gag (_bfcc ,_gdaa ,_feee );var _aaaf int ;if _fba > -1{_aaaf =_edcg -_fba ;
}else {_aaaf =_edcg -_fba -1;};_bfcc ,_gdaa =_eaab (_bfcc ,_gdaa ,_aaaf ,_dag );_dag =!_dag ;_adag :=_fbaa -_edcg ;_bfcc ,_gdaa =_eaab (_bfcc ,_gdaa ,_adag ,_dag );_fba =_fbaa ;return _bfcc ,_gdaa ,_fba ;};func (_beaf *Encoder )encodeG4 (_bdgc [][]byte )[]byte {_bafa :=make ([][]byte ,len (_bdgc ));
copy (_bafa ,_bdgc );_bafa =_effd (_bafa );var _gee []byte ;var _bcf int ;for _cfe :=1;_cfe < len (_bafa );_cfe ++{if _beaf .Rows > 0&&!_beaf .EndOfBlock &&_cfe ==(_beaf .Rows +1){break ;};var _bdf []byte ;var _edeb ,_ade ,_ada int ;_dabf :=_bcf ;_cdg :=-1;
for _cdg < len (_bafa [_cfe ]){_edeb =_gbf (_bafa [_cfe ],_cdg );_ade =_bfdf (_bafa [_cfe ],_bafa [_cfe -1],_cdg );_ada =_gbf (_bafa [_cfe -1],_ade );if _ada < _edeb {_bdf ,_dabf =_gag (_bdf ,_dabf ,_gcb );_cdg =_ada ;}else {if _b .Abs (float64 (_ade -_edeb ))> 3{_bdf ,_dabf ,_cdg =_eeb (_bafa [_cfe ],_bdf ,_dabf ,_cdg ,_edeb );
}else {_bdf ,_dabf =_ebf (_bdf ,_dabf ,_edeb ,_ade );_cdg =_edeb ;};};};_gee =_beaf .appendEncodedRow (_gee ,_bdf ,_bcf );if _beaf .EncodedByteAlign {_dabf =0;};_bcf =_dabf %8;};if _beaf .EndOfBlock {_efd ,_ :=_gdf (_bcf );_gee =_beaf .appendEncodedRow (_gee ,_efd ,_bcf );
};return _gee ;};func (_dde *Decoder )decodeRowType6 ()error {if _dde ._cga {_dde ._gfg .Align ();};if _dde ._dd {_dde ._gfg .Mark ();_bgd ,_caea :=_dde .tryFetchEOL ();if _caea !=nil {return _caea ;};if _bgd {_bgd ,_caea =_dde .tryFetchEOL ();if _caea !=nil {return _caea ;
};if _bgd {return _ba .EOF ;};};_dde ._gfg .Reset ();};return _dde .decode2D ();};func _eeac (_efad ,_dega []byte ,_bddd int ,_fcg bool )int {_faa :=_gbf (_dega ,_bddd );if _faa < len (_dega )&&(_bddd ==-1&&_dega [_faa ]==_dfae ||_bddd >=0&&_bddd < len (_efad )&&_efad [_bddd ]==_dega [_faa ]||_bddd >=len (_efad )&&_fcg &&_dega [_faa ]==_dfae ||_bddd >=len (_efad )&&!_fcg &&_dega [_faa ]==_fec ){_faa =_gbf (_dega ,_faa );
};return _faa ;};func (_gadca *Encoder )encodeG31D (_gfc [][]byte )[]byte {var _fbc []byte ;_gca :=0;for _cgc :=range _gfc {if _gadca .Rows > 0&&!_gadca .EndOfBlock &&_cgc ==_gadca .Rows {break ;};_eea ,_feea :=_ecd (_gfc [_cgc ],_gca ,_gb );_fbc =_gadca .appendEncodedRow (_fbc ,_eea ,_gca );
if _gadca .EncodedByteAlign {_feea =0;};_gca =_feea ;};if _gadca .EndOfBlock {_dbb ,_ :=_gedg (_gca );_fbc =_gadca .appendEncodedRow (_fbc ,_dbb ,_gca );};return _fbc ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;
EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};type code struct{Code uint16 ;BitsWritten int ;};func (_ddd *Decoder )decoderRowType41D ()error {if _ddd ._cga {_ddd ._gfg .Align ();};_ddd ._gfg .Mark ();var (_db bool ;_ead error ;);if _ddd ._fdd {_db ,_ead =_ddd .tryFetchEOL ();
if _ead !=nil {return _ead ;};if !_db {return _ecf ;};}else {_db ,_ead =_ddd .looseFetchEOL ();if _ead !=nil {return _ead ;};};if !_db {_ddd ._gfg .Reset ();};if _db &&_ddd ._dd {_ddd ._gfg .Mark ();for _adc :=0;_adc < 5;_adc ++{_db ,_ead =_ddd .tryFetchEOL ();
if _ead !=nil {if _a .Is (_ead ,_ba .EOF ){if _adc ==0{break ;};return _ece ;};};if _db {continue ;};if _adc > 0{return _ece ;};break ;};if _db {return _ba .EOF ;};_ddd ._gfg .Reset ();};if _ead =_ddd .decode1D ();_ead !=nil {return _ead ;};return nil ;
};var _eaf =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_ecc tiffType )String ()string {switch _ecc {case _cag :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";case _bag :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";
case _fcd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _gag (_cbda []byte ,_gaga int ,_dada code )([]byte ,int ){_fbda :=0;for _fbda < _dada .BitsWritten {_fcb :=_gaga /8;
_fed :=_gaga %8;if _fcb >=len (_cbda ){_cbda =append (_cbda ,0);};_dba :=8-_fed ;_cef :=_dada .BitsWritten -_fbda ;if _dba > _cef {_dba =_cef ;};if _fbda < 8{_cbda [_fcb ]=_cbda [_fcb ]|byte (_dada .Code >>uint (8+_fed -_fbda ))&_eda [8-_dba -_fed ];}else {_cbda [_fcb ]=_cbda [_fcb ]|(byte (_dada .Code <<uint (_fbda -8))&_eda [8-_dba ])>>uint (_fed );
};_gaga +=_dba ;_fbda +=_dba ;};return _cbda ,_gaga ;};func (_geg *Encoder )Encode (pixels [][]byte )[]byte {if _geg .BlackIs1 {_dfae =0;_fec =1;}else {_dfae =1;_fec =0;};if _geg .K ==0{return _geg .encodeG31D (pixels );};if _geg .K > 0{return _geg .encodeG32D (pixels );
};if _geg .K < 0{return _geg .encodeG4 (pixels );};return nil ;};func _gdf (_bad int )([]byte ,int ){var _ggcc []byte ;for _gbee :=0;_gbee < 2;_gbee ++{_ggcc ,_bad =_gag (_ggcc ,_bad ,_gb );};return _ggcc ,_bad %8;};type DecodeOptions struct{Columns int ;
Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func _eed (_ccd []byte ,_ccbd int )([]byte ,int ){return _gag (_ccd ,_ccbd ,_gcb )};func (_bb *Decoder )decodeRowType2 ()error {if _bb ._cga {_bb ._gfg .Align ();
};if _cae :=_bb .decode1D ();_cae !=nil {return _cae ;};return nil ;};type Decoder struct{_ecg int ;_dc int ;_bfg int ;_dg []byte ;_ggg int ;_acc bool ;_cc bool ;_gbd bool ;_cce bool ;_fdd bool ;_dd bool ;_cga bool ;_dgf int ;_fdf int ;_cb []int ;_bac []int ;
_gdg int ;_ggge int ;_bdc int ;_eafb int ;_gfg *_f .Reader ;_gadc tiffType ;_bc error ;};var (_ece =_a .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_ecf =_a .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_bgc *Decoder )decode2D ()error {_bgc ._gdg =_bgc ._ggge ;_bgc ._bac ,_bgc ._cb =_bgc ._cb ,_bgc ._bac ;_fgb :=true ;var (_dgd bool ;_ce int ;_fae error ;);_bgc ._ggge =0;_bbg :for _ce < _bgc ._ecg {_egcb :=_ec ._fdb ;for {_dgd ,_fae =_bgc ._gfg .ReadBool ();
if _fae !=nil {return _fae ;};_egcb =_egcb .walk (_dgd );if _egcb ==nil {continue _bbg ;};if !_egcb ._bfcad {continue ;};switch _egcb ._gfgf {case _dac :var _adce int ;if _fgb {_adce ,_fae =_bgc .decodeRun (_e );}else {_adce ,_fae =_bgc .decodeRun (_c );
};if _fae !=nil {return _fae ;};_ce +=_adce ;_bgc ._bac [_bgc ._ggge ]=_ce ;_bgc ._ggge ++;if _fgb {_adce ,_fae =_bgc .decodeRun (_c );}else {_adce ,_fae =_bgc .decodeRun (_e );};if _fae !=nil {return _fae ;};_ce +=_adce ;_bgc ._bac [_bgc ._ggge ]=_ce ;
_bgc ._ggge ++;case _gad :_acff :=_bgc .getNextChangingElement (_ce ,_fgb )+1;if _acff >=_bgc ._gdg {_ce =_bgc ._ecg ;}else {_ce =_bgc ._cb [_acff ];};default:_gfd :=_bgc .getNextChangingElement (_ce ,_fgb );if _gfd >=_bgc ._gdg ||_gfd ==-1{_ce =_bgc ._ecg +_egcb ._gfgf ;
}else {_ce =_bgc ._cb [_gfd ]+_egcb ._gfgf ;};_bgc ._bac [_bgc ._ggge ]=_ce ;_bgc ._ggge ++;_fgb =!_fgb ;};continue _bbg ;};};return nil ;};func (_bea *Decoder )tryFetchEOL ()(bool ,error ){_ccf ,_dab :=_bea ._gfg .ReadBits (12);if _dab !=nil {return false ,_dab ;
};return _ccf ==0x1,nil ;};func _ecd (_fbb []byte ,_adfa int ,_abd code )([]byte ,int ){_dee :=true ;var _dea []byte ;_dea ,_adfa =_gag (nil ,_adfa ,_abd );_eeg :=0;var _bef int ;for _eeg < len (_fbb ){_bef ,_eeg =_deac (_fbb ,_dee ,_eeg );_dea ,_adfa =_eaab (_dea ,_adfa ,_bef ,_dee );
_dee =!_dee ;};return _dea ,_adfa %8;};var (_g *treeNode ;_fe *treeNode ;_c *tree ;_e *tree ;_ga *tree ;_ec *tree ;_da =-2000;_bf =-1000;_gad =-3000;_dac =-4000;);func _gbf (_dcbf []byte ,_dgde int )int {if _dgde >=len (_dcbf ){return _dgde ;};if _dgde < -1{_dgde =-1;
};var _dbad byte ;if _dgde > -1{_dbad =_dcbf [_dgde ];}else {_dbad =_dfae ;};_cde :=_dgde +1;for _cde < len (_dcbf ){if _dcbf [_cde ]!=_dbad {break ;};_cde ++;};return _cde ;};func (_accd *tree )fillWithNode (_deed ,_bafb int ,_bcb *treeNode )error {_edag :=_accd ._fdb ;
for _egcg :=0;_egcg < _deed ;_egcg ++{_fgc :=uint (_deed -1-_egcg );_bafd :=((_bafb >>_fgc )&1)!=0;_adac :=_edag .walk (_bafd );if _adac !=nil {if _adac ._bfcad {return _a .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_edag =_adac ;continue ;};if _egcg ==_deed -1{_adac =_bcb ;}else {_adac =&treeNode {};};if _bafb ==0{_adac ._eege =true ;};_edag .set (_bafd ,_adac );_edag =_adac ;};return nil ;};type tiffType int ;type treeNode struct{_effc *treeNode ;_fgg *treeNode ;
_gfgf int ;_eege bool ;_bfcad bool ;};func (_cbc *Decoder )getNextChangingElement (_bfd int ,_bcg bool )int {_fcc :=0;if !_bcg {_fcc =1;};_bdgb :=int (uint32 (_cbc ._eafb )&0xFFFFFFFE)+_fcc ;if _bdgb > 2{_bdgb -=2;};if _bfd ==0{return _bdgb ;};for _cad :=_bdgb ;
_cad < _cbc ._gdg ;_cad +=2{if _bfd < _cbc ._cb [_cad ]{_cbc ._eafb =_cad ;return _cad ;};};return -1;};func (_fdgf *Decoder )decode1D ()error {var (_ee int ;_bgae error ;);_be :=true ;_fdgf ._ggge =0;for {var _gbb int ;if _be {_gbb ,_bgae =_fdgf .decodeRun (_e );
}else {_gbb ,_bgae =_fdgf .decodeRun (_c );};if _bgae !=nil {return _bgae ;};_ee +=_gbb ;_fdgf ._bac [_fdgf ._ggge ]=_ee ;_fdgf ._ggge ++;_be =!_be ;if _ee >=_fdgf ._ecg {break ;};};return nil ;};func (_cbd *Decoder )decodeRow ()(_gba error ){if !_cbd ._dd &&_cbd ._dc > 0&&_cbd ._dc ==_cbd ._bfg {return _ba .EOF ;
};switch _cbd ._gadc {case _cag :_gba =_cbd .decodeRowType2 ();case _bag :_gba =_cbd .decodeRowType4 ();case _fcd :_gba =_cbd .decodeRowType6 ();};if _gba !=nil {return _gba ;};_eafe :=0;_eba :=true ;_cbd ._eafb =0;for _cdf :=0;_cdf < _cbd ._ggge ;_cdf ++{_fa :=_cbd ._ecg ;
if _cdf !=_cbd ._ggge {_fa =_cbd ._bac [_cdf ];};if _fa > _cbd ._ecg {_fa =_cbd ._ecg ;};_cgbd :=_eafe /8;for _eafe %8!=0&&_fa -_eafe > 0{var _cf byte ;if !_eba {_cf =1<<uint (7-(_eafe %8));};_cbd ._dg [_cgbd ]|=_cf ;_eafe ++;};if _eafe %8==0{_cgbd =_eafe /8;
var _ebd byte ;if !_eba {_ebd =0xff;};for _fa -_eafe > 7{_cbd ._dg [_cgbd ]=_ebd ;_eafe +=8;_cgbd ++;};};for _fa -_eafe > 0{if _eafe %8==0{_cbd ._dg [_cgbd ]=0;};var _gaca byte ;if !_eba {_gaca =1<<uint (7-(_eafe %8));};_cbd ._dg [_cgbd ]|=_gaca ;_eafe ++;
};_eba =!_eba ;};if _eafe !=_cbd ._ecg {return _a .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_cbd ._dgf =(_eafe +7)/8;_cbd ._bfg ++;return nil ;};func (_ddeg *Decoder )looseFetchEOL ()(bool ,error ){_ccb ,_edeg :=_ddeg ._gfg .ReadBits (12);if _edeg !=nil {return false ,_edeg ;};switch _ccb {case 0x1:return true ,nil ;case 0x0:for {_gda ,_dad :=_ddeg ._gfg .ReadBool ();
if _dad !=nil {return false ,_dad ;};if _gda {return true ,nil ;};};default:return false ,nil ;};};func _deac (_ggd []byte ,_ageg bool ,_fcdf int )(int ,int ){_degf :=0;for _fcdf < len (_ggd ){if _ageg {if _ggd [_fcdf ]!=_dfae {break ;};}else {if _ggd [_fcdf ]!=_fec {break ;
};};_degf ++;_fcdf ++;};return _degf ,_fcdf ;};func (_egf *treeNode )set (_bbb bool ,_cdc *treeNode ){if !_bbb {_egf ._effc =_cdc ;}else {_egf ._fgg =_cdc ;};};func (_ded *Decoder )tryFetchEOL1 ()(bool ,error ){_cba ,_cbad :=_ded ._gfg .ReadBits (13);if _cbad !=nil {return false ,_cbad ;
};return _cba ==0x3,nil ;};