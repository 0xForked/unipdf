//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_a "errors";_g "math";);func _cc (_gfe []byte ,_dgfb int )(uint16 ,int ,int ){_dbb :=_dgfb ;_aad :=_dgfb /8;_dgfb %=8;if _aad >=len (_gfe ){return 0,16,_dbb ;};_bdcb :=byte (0xFF>>uint (_dgfb ));_fgg :=uint16 ((_gfe [_aad ]&_bdcb )<<uint (_dgfb ))<<8;
_gdg :=8-_dgfb ;_aad ++;_dgfb =0;if _aad >=len (_gfe ){return _fgg >>(16-uint (_gdg )),16-_gdg ,_dbb +_gdg ;};_fgg |=uint16 (_gfe [_aad ])<<(8-uint (_gdg ));_gdg +=8;_aad ++;_dgfb =0;if _aad >=len (_gfe ){return _fgg >>(16-uint (_gdg )),16-_gdg ,_dbb +_gdg ;
};if _gdg ==16{return _fgg ,0,_dbb +_gdg ;};_cba :=16-_gdg ;_fgg |=uint16 (_gfe [_aad ]>>(8-uint (_cba )));return _fgg ,0,_dbb +16;};func _ffe (_bca []byte ,_cdf int ,_ggf bool )(int ,int ){var (_acb uint16 ;_fcfe int ;_dbe int ;);_dbe =_cdf ;_acb ,_fcfe ,_ =_cc (_bca ,_cdf );
_fbb ,_adac :=_ggfc (_acb ,_fcfe ,_ggf );if _fbb ==-1{return -1,_dbe ;};return _fbb ,_dbe +_adac .BitsWritten ;};func init (){_ed =make (map[int ]code );_ed [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ed [1]=code {Code :2<<(5+8),BitsWritten :3};_ed [2]=code {Code :3<<(6+8),BitsWritten :2};
_ed [3]=code {Code :2<<(6+8),BitsWritten :2};_ed [4]=code {Code :3<<(5+8),BitsWritten :3};_ed [5]=code {Code :3<<(4+8),BitsWritten :4};_ed [6]=code {Code :2<<(4+8),BitsWritten :4};_ed [7]=code {Code :3<<(3+8),BitsWritten :5};_ed [8]=code {Code :5<<(2+8),BitsWritten :6};
_ed [9]=code {Code :4<<(2+8),BitsWritten :6};_ed [10]=code {Code :4<<(1+8),BitsWritten :7};_ed [11]=code {Code :5<<(1+8),BitsWritten :7};_ed [12]=code {Code :7<<(1+8),BitsWritten :7};_ed [13]=code {Code :4<<8,BitsWritten :8};_ed [14]=code {Code :7<<8,BitsWritten :8};
_ed [15]=code {Code :12<<8,BitsWritten :9};_ed [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ed [17]=code {Code :6<<8,BitsWritten :10};_ed [18]=code {Code :2<<8,BitsWritten :10};_ed [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ed [20]=code {Code :13<<8,BitsWritten :11};
_ed [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ed [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ed [23]=code {Code :5<<8,BitsWritten :11};_ed [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ed [25]=code {Code :3<<8,BitsWritten :11};_ed [26]=code {Code :12<<8|10<<4,BitsWritten :12};
_ed [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ed [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ed [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ed [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ed [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ed [32]=code {Code :6<<8|10<<4,BitsWritten :12};
_ed [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ed [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ed [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ed [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ed [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ed [38]=code {Code :13<<8|6<<4,BitsWritten :12};
_ed [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ed [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ed [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ed [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ed [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ed [44]=code {Code :5<<8|4<<4,BitsWritten :12};
_ed [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ed [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ed [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ed [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ed [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ed [50]=code {Code :5<<8|2<<4,BitsWritten :12};
_ed [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ed [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ed [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ed [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ed [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ed [56]=code {Code :2<<8|8<<4,BitsWritten :12};
_ed [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ed [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ed [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ed [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ed [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ed [62]=code {Code :6<<8|6<<4,BitsWritten :12};
_ed [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ga =make (map[int ]code );_ga [0]=code {Code :53<<8,BitsWritten :8};_ga [1]=code {Code :7<<(2+8),BitsWritten :6};_ga [2]=code {Code :7<<(4+8),BitsWritten :4};_ga [3]=code {Code :8<<(4+8),BitsWritten :4};
_ga [4]=code {Code :11<<(4+8),BitsWritten :4};_ga [5]=code {Code :12<<(4+8),BitsWritten :4};_ga [6]=code {Code :14<<(4+8),BitsWritten :4};_ga [7]=code {Code :15<<(4+8),BitsWritten :4};_ga [8]=code {Code :19<<(3+8),BitsWritten :5};_ga [9]=code {Code :20<<(3+8),BitsWritten :5};
_ga [10]=code {Code :7<<(3+8),BitsWritten :5};_ga [11]=code {Code :8<<(3+8),BitsWritten :5};_ga [12]=code {Code :8<<(2+8),BitsWritten :6};_ga [13]=code {Code :3<<(2+8),BitsWritten :6};_ga [14]=code {Code :52<<(2+8),BitsWritten :6};_ga [15]=code {Code :53<<(2+8),BitsWritten :6};
_ga [16]=code {Code :42<<(2+8),BitsWritten :6};_ga [17]=code {Code :43<<(2+8),BitsWritten :6};_ga [18]=code {Code :39<<(1+8),BitsWritten :7};_ga [19]=code {Code :12<<(1+8),BitsWritten :7};_ga [20]=code {Code :8<<(1+8),BitsWritten :7};_ga [21]=code {Code :23<<(1+8),BitsWritten :7};
_ga [22]=code {Code :3<<(1+8),BitsWritten :7};_ga [23]=code {Code :4<<(1+8),BitsWritten :7};_ga [24]=code {Code :40<<(1+8),BitsWritten :7};_ga [25]=code {Code :43<<(1+8),BitsWritten :7};_ga [26]=code {Code :19<<(1+8),BitsWritten :7};_ga [27]=code {Code :36<<(1+8),BitsWritten :7};
_ga [28]=code {Code :24<<(1+8),BitsWritten :7};_ga [29]=code {Code :2<<8,BitsWritten :8};_ga [30]=code {Code :3<<8,BitsWritten :8};_ga [31]=code {Code :26<<8,BitsWritten :8};_ga [32]=code {Code :27<<8,BitsWritten :8};_ga [33]=code {Code :18<<8,BitsWritten :8};
_ga [34]=code {Code :19<<8,BitsWritten :8};_ga [35]=code {Code :20<<8,BitsWritten :8};_ga [36]=code {Code :21<<8,BitsWritten :8};_ga [37]=code {Code :22<<8,BitsWritten :8};_ga [38]=code {Code :23<<8,BitsWritten :8};_ga [39]=code {Code :40<<8,BitsWritten :8};
_ga [40]=code {Code :41<<8,BitsWritten :8};_ga [41]=code {Code :42<<8,BitsWritten :8};_ga [42]=code {Code :43<<8,BitsWritten :8};_ga [43]=code {Code :44<<8,BitsWritten :8};_ga [44]=code {Code :45<<8,BitsWritten :8};_ga [45]=code {Code :4<<8,BitsWritten :8};
_ga [46]=code {Code :5<<8,BitsWritten :8};_ga [47]=code {Code :10<<8,BitsWritten :8};_ga [48]=code {Code :11<<8,BitsWritten :8};_ga [49]=code {Code :82<<8,BitsWritten :8};_ga [50]=code {Code :83<<8,BitsWritten :8};_ga [51]=code {Code :84<<8,BitsWritten :8};
_ga [52]=code {Code :85<<8,BitsWritten :8};_ga [53]=code {Code :36<<8,BitsWritten :8};_ga [54]=code {Code :37<<8,BitsWritten :8};_ga [55]=code {Code :88<<8,BitsWritten :8};_ga [56]=code {Code :89<<8,BitsWritten :8};_ga [57]=code {Code :90<<8,BitsWritten :8};
_ga [58]=code {Code :91<<8,BitsWritten :8};_ga [59]=code {Code :74<<8,BitsWritten :8};_ga [60]=code {Code :75<<8,BitsWritten :8};_ga [61]=code {Code :50<<8,BitsWritten :8};_ga [62]=code {Code :51<<8,BitsWritten :8};_ga [63]=code {Code :52<<8,BitsWritten :8};
_b =make (map[int ]code );_b [64]=code {Code :3<<8|3<<6,BitsWritten :10};_b [128]=code {Code :12<<8|8<<4,BitsWritten :12};_b [192]=code {Code :12<<8|9<<4,BitsWritten :12};_b [256]=code {Code :5<<8|11<<4,BitsWritten :12};_b [320]=code {Code :3<<8|3<<4,BitsWritten :12};
_b [384]=code {Code :3<<8|4<<4,BitsWritten :12};_b [448]=code {Code :3<<8|5<<4,BitsWritten :12};_b [512]=code {Code :3<<8|12<<3,BitsWritten :13};_b [576]=code {Code :3<<8|13<<3,BitsWritten :13};_b [640]=code {Code :2<<8|10<<3,BitsWritten :13};_b [704]=code {Code :2<<8|11<<3,BitsWritten :13};
_b [768]=code {Code :2<<8|12<<3,BitsWritten :13};_b [832]=code {Code :2<<8|13<<3,BitsWritten :13};_b [896]=code {Code :3<<8|18<<3,BitsWritten :13};_b [960]=code {Code :3<<8|19<<3,BitsWritten :13};_b [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_b [1088]=code {Code :3<<8|21<<3,BitsWritten :13};
_b [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_b [1216]=code {Code :119<<3,BitsWritten :13};_b [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_b [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_b [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_b [1472]=code {Code :2<<8|21<<3,BitsWritten :13};
_b [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_b [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_b [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_b [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_gg =make (map[int ]code );_gg [64]=code {Code :27<<(3+8),BitsWritten :5};
_gg [128]=code {Code :18<<(3+8),BitsWritten :5};_gg [192]=code {Code :23<<(2+8),BitsWritten :6};_gg [256]=code {Code :55<<(1+8),BitsWritten :7};_gg [320]=code {Code :54<<8,BitsWritten :8};_gg [384]=code {Code :55<<8,BitsWritten :8};_gg [448]=code {Code :100<<8,BitsWritten :8};
_gg [512]=code {Code :101<<8,BitsWritten :8};_gg [576]=code {Code :104<<8,BitsWritten :8};_gg [640]=code {Code :103<<8,BitsWritten :8};_gg [704]=code {Code :102<<8,BitsWritten :9};_gg [768]=code {Code :102<<8|1<<7,BitsWritten :9};_gg [832]=code {Code :105<<8,BitsWritten :9};
_gg [896]=code {Code :105<<8|1<<7,BitsWritten :9};_gg [960]=code {Code :106<<8,BitsWritten :9};_gg [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_gg [1088]=code {Code :107<<8,BitsWritten :9};_gg [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_gg [1216]=code {Code :108<<8,BitsWritten :9};
_gg [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_gg [1344]=code {Code :109<<8,BitsWritten :9};_gg [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_gg [1472]=code {Code :76<<8,BitsWritten :9};_gg [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_gg [1600]=code {Code :77<<8,BitsWritten :9};
_gg [1664]=code {Code :24<<(2+8),BitsWritten :6};_gg [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_f =make (map[int ]code );_f [1792]=code {Code :1<<8,BitsWritten :11};_f [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_f [1920]=code {Code :1<<8|5<<5,BitsWritten :11};
_f [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_f [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_f [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_f [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_f [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_f [2304]=code {Code :1<<8|7<<4,BitsWritten :12};
_f [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_f [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_f [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_f [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_bb =make (map[int ]byte );_bb [0]=0xFF;_bb [1]=0xFE;
_bb [2]=0xFC;_bb [3]=0xF8;_bb [4]=0xF0;_bb [5]=0xE0;_bb [6]=0xC0;_bb [7]=0x80;_bb [8]=0x00;};func _cd (_fba []byte ,_ged int )(bool ,int ,error ){_bdd :=_ged ;var _gbe =false ;for _daf :=0;_daf < 6;_daf ++{_gbe ,_ged =_acac (_fba ,_ged );if !_gbe {if _daf > 1{return false ,_bdd ,_ge ;
};_ged =_bdd ;break ;};};return _gbe ,_ged ,nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func init (){for _fg ,_cg :=range _ga {_efe (_ggg ,_cg ,0,_fg );
};for _fd ,_gb :=range _gg {_efe (_ggg ,_gb ,0,_fd );};for _eff ,_fb :=range _ed {_efe (_bff ,_fb ,0,_eff );};for _gc ,_eba :=range _b {_efe (_bff ,_eba ,0,_gc );};for _ada ,_ee :=range _f {_efe (_ggg ,_ee ,0,_ada );_efe (_bff ,_ee ,0,_ada );};_efe (_fca ,_fc ,0,0);
_efe (_fca ,_fcf ,0,0);_efe (_fca ,_gf ,0,0);_efe (_fca ,_bf ,0,0);_efe (_fca ,_dg ,0,0);_efe (_fca ,_ce ,0,0);_efe (_fca ,_acd ,0,0);_efe (_fca ,_fe ,0,0);_efe (_fca ,_eb ,0,0);};func _ecd (_ffg *decodingTreeNode ,_bafc uint16 ,_gga int )(*int ,*code ){if _ffg ==nil {return nil ,nil ;
};if _gga ==16{return _ffg .RunLen ,_ffg .Code ;};_dbcb :=_add (_bafc ,_gga );_gga ++;var _cdg *int ;var _fcfb *code ;if _dbcb ==1{_cdg ,_fcfb =_ecd (_ffg .Right ,_bafc ,_gga );}else {_cdg ,_fcfb =_ecd (_ffg .Left ,_bafc ,_gga );};if _cdg ==nil {_cdg =_ffg .RunLen ;
_fcfb =_ffg .Code ;};return _cdg ,_fcfb ;};var (_ggg =&decodingTreeNode {Val :255};_bff =&decodingTreeNode {Val :255};_fca =&decodingTreeNode {Val :255};);func (_aac *Encoder )decodeRow1D (_gecg []byte ,_ae int )([]byte ,int ){var _fgc []byte ;_dbc :=true ;
var _eee int ;_eee ,_ae =_ffe (_gecg ,_ae ,_dbc );for _eee !=-1{_fgc =_ggb (_fgc ,_dbc ,_eee );if _eee < 64{if len (_fgc )>=_aac .Columns {break ;};_dbc =!_dbc ;};_eee ,_ae =_ffe (_gecg ,_ae ,_dbc );};return _fgc ,_ae ;};func _fee (_bfe ,_fa []byte ,_fgf int ,_efa bool )([]byte ,int ,error ){_ebd :=_fgf ;
var _dgdc int ;for _dgdc ,_fgf =_ffe (_bfe ,_fgf ,_efa );_dgdc !=-1;_dgdc ,_fgf =_ffe (_bfe ,_fgf ,_efa ){_fa =_ggb (_fa ,_efa ,_dgdc );if _dgdc < 64{break ;};};if _dgdc ==-1{return _fa ,_ebd ,_bd ;};return _fa ,_fgf ,nil ;};var (_ed map[int ]code ;_ga map[int ]code ;
_b map[int ]code ;_gg map[int ]code ;_f map[int ]code ;_bb map[int ]byte ;_d =code {Code :1<<4,BitsWritten :12};_c =code {Code :3<<3,BitsWritten :13};_ac =code {Code :2<<3,BitsWritten :13};_fc =code {Code :1<<12,BitsWritten :4};_fcf =code {Code :1<<13,BitsWritten :3};
_gf =code {Code :1<<15,BitsWritten :1};_bf =code {Code :3<<13,BitsWritten :3};_dg =code {Code :3<<10,BitsWritten :6};_ce =code {Code :3<<9,BitsWritten :7};_acd =code {Code :2<<13,BitsWritten :3};_fe =code {Code :2<<10,BitsWritten :6};_eb =code {Code :2<<9,BitsWritten :7};
);func _bfc (_eae []byte ,_dfdb int )(bool ,int ){_gedb :=_dfdb ;var (_fbc uint16 ;_aee int ;);_fbc ,_aee ,_dfdb =_cc (_eae ,_dfdb );if _aee > 4{return false ,_gedb ;};_fbc >>=uint (4-_aee );_fbc <<=4;if _fbc !=_d .Code {return false ,_gedb ;};return true ,_dfdb -4+_aee ;
};func _dfd (_fff uint16 ,_age int )(code ,bool ){_ ,_bcgd :=_ecd (_fca ,_fff ,_age );if _bcgd ==nil {return code {},false ;};return *_bcgd ,true ;};func _ggfc (_efd uint16 ,_bdc int ,_bdea bool )(int ,code ){var _bec *int ;var _dcb *code ;if _bdea {_bec ,_dcb =_ecd (_ggg ,_efd ,_bdc );
}else {_bec ,_dcb =_ecd (_bff ,_efd ,_bdc );};if _bec ==nil {return -1,code {};};return *_bec ,*_dcb ;};func _acac (_ceec []byte ,_dbac int )(bool ,int ){return _cbd (_ceec ,_dbac ,_c )};func _efdc (_dcbg ,_dea []byte ,_cbe int ,_gbb bool )int {_gbbg :=_ded (_dea ,_cbe );
if _gbbg < len (_dea )&&(_cbe ==-1&&_dea [_gbbg ]==_de ||_cbe >=0&&_cbe < len (_dcbg )&&_dcbg [_cbe ]==_dea [_gbbg ]||_cbe >=len (_dcbg )&&_gbb &&_dea [_gbbg ]==_de ||_cbe >=len (_dcbg )&&!_gbb &&_dea [_gbbg ]==_fdgg ){_gbbg =_ded (_dea ,_gbbg );};return _gbbg ;
};func _gdb (_bfef ,_bgbf []byte ,_fdgd ,_bbea ,_cbgc int )([]byte ,int ,int ){_dbg :=_ded (_bfef ,_cbgc );_aafd :=_bbea >=0&&_bfef [_bbea ]==_de ||_bbea ==-1;_bgbf ,_fdgd =_gdd (_bgbf ,_fdgd ,_fcf );var _bdb int ;if _bbea > -1{_bdb =_cbgc -_bbea ;}else {_bdb =_cbgc -_bbea -1;
};_bgbf ,_fdgd =_ddf (_bgbf ,_fdgd ,_bdb ,_aafd );_aafd =!_aafd ;_gaee :=_dbg -_cbgc ;_bgbf ,_fdgd =_ddf (_bgbf ,_fdgd ,_gaee ,_aafd );_bbea =_dbg ;return _bgbf ,_fdgd ,_bbea ;};func (_bgb *Encoder )encodeG4 (_acce [][]byte )[]byte {_bfcc :=make ([][]byte ,len (_acce ));
copy (_bfcc ,_acce );_bfcc =_acab (_bfcc );var _adeb []byte ;var _egbe int ;for _cfb :=1;_cfb < len (_bfcc );_cfb ++{if _bgb .Rows > 0&&!_bgb .EndOfBlock &&_cfb ==(_bgb .Rows +1){break ;};var _cdgf []byte ;var _fbac ,_feeg ,_bee int ;_dfe :=_egbe ;_ggfe :=-1;
for _ggfe < len (_bfcc [_cfb ]){_fbac =_ded (_bfcc [_cfb ],_ggfe );_feeg =_dee (_bfcc [_cfb ],_bfcc [_cfb -1],_ggfe );_bee =_ded (_bfcc [_cfb -1],_feeg );if _bee < _fbac {_cdgf ,_dfe =_gdd (_cdgf ,_dfe ,_fc );_ggfe =_bee ;}else {if _g .Abs (float64 (_feeg -_fbac ))> 3{_cdgf ,_dfe ,_ggfe =_gdb (_bfcc [_cfb ],_cdgf ,_dfe ,_ggfe ,_fbac );
}else {_cdgf ,_dfe =_gfdc (_cdgf ,_dfe ,_fbac ,_feeg );_ggfe =_fbac ;};};};_adeb =_bgb .appendEncodedRow (_adeb ,_cdgf ,_egbe );if _bgb .EncodedByteAlign {_dfe =0;};_egbe =_dfe %8;};if _bgb .EndOfBlock {_agee ,_ :=_dbacd (_egbe );_adeb =_bgb .appendEncodedRow (_adeb ,_agee ,_egbe );
};return _adeb ;};func _aba (_efbc []byte ,_bcg int )(code ,int ,bool ){var (_acg uint16 ;_gcc int ;_bfg int ;);_bfg =_bcg ;_acg ,_gcc ,_ =_cc (_efbc ,_bcg );_gcb ,_dc :=_dfd (_acg ,_gcc );if !_dc {return code {},_bfg ,false ;};return _gcb ,_bfg +_gcb .BitsWritten ,true ;
};type code struct{Code uint16 ;BitsWritten int ;};func _gdd (_geda []byte ,_cge int ,_gecf code )([]byte ,int ){_fcff :=0;for _fcff < _gecf .BitsWritten {_adca :=_cge /8;_daa :=_cge %8;if _adca >=len (_geda ){_geda =append (_geda ,0);};_ebf :=8-_daa ;
_aae :=_gecf .BitsWritten -_fcff ;if _ebf > _aae {_ebf =_aae ;};if _fcff < 8{_geda [_adca ]=_geda [_adca ]|byte (_gecf .Code >>uint (8+_daa -_fcff ))&_bb [8-_ebf -_daa ];}else {_geda [_adca ]=_geda [_adca ]|(byte (_gecf .Code <<uint (_fcff -8))&_bb [8-_ebf ])>>uint (_daa );
};_cge +=_ebf ;_fcff +=_ebf ;};return _geda ,_cge ;};func _efe (_fdc *decodingTreeNode ,_gce code ,_bdca int ,_ec int ){_gfa :=_add (_gce .Code ,_bdca );_bdca ++;if _gfa ==1{if _fdc .Right ==nil {_fdc .Right =&decodingTreeNode {Val :_gfa };};if _bdca ==_gce .BitsWritten {_fdc .Right .RunLen =&_ec ;
_fdc .Right .Code =&_gce ;}else {_efe (_fdc .Right ,_gce ,_bdca ,_ec );};}else {if _fdc .Left ==nil {_fdc .Left =&decodingTreeNode {Val :_gfa };};if _bdca ==_gce .BitsWritten {_fdc .Left .RunLen =&_ec ;_fdc .Left .Code =&_gce ;}else {_efe (_fdc .Left ,_gce ,_bdca ,_ec );
};};};func _ddf (_ddg []byte ,_acaf int ,_adc int ,_cab bool )([]byte ,int ){var (_ffd code ;_efff bool ;);for !_efff {_ffd ,_adc ,_efff =_cga (_adc ,_cab );_ddg ,_acaf =_gdd (_ddg ,_acaf ,_ffd );};return _ddg ,_acaf ;};func _aec (_gdga []byte ,_deaf int )([]byte ,int ){return _gdd (_gdga ,_deaf ,_fc )};
func _dbacd (_agdd int )([]byte ,int ){var _gbc []byte ;for _bbe :=0;_bbe < 2;_bbe ++{_gbc ,_agdd =_gdd (_gbc ,_agdd ,_d );};return _gbc ,_agdd %8;};func _dee (_dbbb ,_eag []byte ,_edb int )int {_dbcf :=_ded (_eag ,_edb );if _dbcf < len (_eag )&&(_edb ==-1&&_eag [_dbcf ]==_de ||_edb >=0&&_edb < len (_dbbb )&&_dbbb [_edb ]==_eag [_dbcf ]||_edb >=len (_dbbb )&&_dbbb [_edb -1]!=_eag [_dbcf ]){_dbcf =_ded (_eag ,_dbcf );
};return _dbcf ;};func _gaf (_cdb int )([]byte ,int ){var _eedg []byte ;for _bcb :=0;_bcb < 6;_bcb ++{_eedg ,_cdb =_gdd (_eedg ,_cdb ,_d );};return _eedg ,_cdb %8;};func (_dggg *Encoder )decodeG31D (_gac []byte )([][]byte ,error ){var _df [][]byte ;var _geg int ;
for (_geg /8)< len (_gac ){var _eed bool ;_eed ,_geg =_bfc (_gac ,_geg );if !_eed {if _dggg .EndOfLine {return nil ,_bc ;};}else {for _dfb :=0;_dfb < 5;_dfb ++{_eed ,_geg =_bfc (_gac ,_geg );if !_eed {if _dfb ==0{break ;};return nil ,_aca ;};};if _eed {break ;
};};var _be []byte ;_be ,_geg =_dggg .decodeRow1D (_gac ,_geg );if _dggg .EncodedByteAlign &&_geg %8!=0{_geg +=8-_geg %8;};_df =append (_df ,_be );if _dggg .Rows > 0&&!_dggg .EndOfBlock &&len (_df )>=_dggg .Rows {break ;};};return _df ,nil ;};func _gbd (_gad []byte ,_faee int ,_egga code )([]byte ,int ){_cbb :=true ;
var _bdaf []byte ;_bdaf ,_faee =_gdd (nil ,_faee ,_egga );_dde :=0;var _dce int ;for _dde < len (_gad ){_dce ,_dde =_dbda (_gad ,_cbb ,_dde );_bdaf ,_faee =_ddf (_bdaf ,_faee ,_dce ,_cbb );_cbb =!_cbb ;};return _bdaf ,_faee %8;};func (_gdf *Encoder )encodeG32D (_efef [][]byte )[]byte {var _dacg []byte ;
var _dbd int ;for _ggc :=0;_ggc < len (_efef );_ggc +=_gdf .K {if _gdf .Rows > 0&&!_gdf .EndOfBlock &&_ggc ==_gdf .Rows {break ;};_aaf ,_egaa :=_gbd (_efef [_ggc ],_dbd ,_c );_dacg =_gdf .appendEncodedRow (_dacg ,_aaf ,_dbd );if _gdf .EncodedByteAlign {_egaa =0;
};_dbd =_egaa ;for _egg :=_ggc +1;_egg < (_ggc +_gdf .K )&&_egg < len (_efef );_egg ++{if _gdf .Rows > 0&&!_gdf .EndOfBlock &&_egg ==_gdf .Rows {break ;};_bfgf ,_ggca :=_gdd (nil ,_dbd ,_ac );var _bcgg ,_ceg ,_cae int ;_agdc :=-1;for _agdc < len (_efef [_egg ]){_bcgg =_ded (_efef [_egg ],_agdc );
_ceg =_dee (_efef [_egg ],_efef [_egg -1],_agdc );_cae =_ded (_efef [_egg -1],_ceg );if _cae < _bcgg {_bfgf ,_ggca =_aec (_bfgf ,_ggca );_agdc =_cae ;}else {if _g .Abs (float64 (_ceg -_bcgg ))> 3{_bfgf ,_ggca ,_agdc =_gdb (_efef [_egg ],_bfgf ,_ggca ,_agdc ,_bcgg );
}else {_bfgf ,_ggca =_gfdc (_bfgf ,_ggca ,_bcgg ,_ceg );_agdc =_bcgg ;};};};_dacg =_gdf .appendEncodedRow (_dacg ,_bfgf ,_dbd );if _gdf .EncodedByteAlign {_ggca =0;};_dbd =_ggca %8;};};if _gdf .EndOfBlock {_bg ,_ :=_gggg (_dbd );_dacg =_gdf .appendEncodedRow (_dacg ,_bg ,_dbd );
};return _dacg ;};var (_de byte =1;_fdgg byte =0;);func _cgca (_cgf ,_gd []byte ,_gee int ,_gegd bool ,_ega int )([]byte ,int ,int ,error ){_bed :=_gee ;var _ade error ;_gd ,_gee ,_ade =_fee (_cgf ,_gd ,_gee ,_gegd );if _ade !=nil {return _gd ,_bed ,_ega ,_ade ;
};_gegd =!_gegd ;_gd ,_gee ,_ade =_fee (_cgf ,_gd ,_gee ,_gegd );if _ade !=nil {return _gd ,_bed ,_ega ,_ade ;};_ega =len (_gd );return _gd ,_gee ,_ega ,nil ;};func (_eg *Encoder )Decode (encoded []byte )([][]byte ,error ){if _eg .BlackIs1 {_de =0;_fdgg =1;
}else {_de =1;_fdgg =0;};if _eg .K ==0{return _eg .decodeG31D (encoded );};if _eg .K > 0{return _eg .decodeG32D (encoded );};if _eg .K < 4{return _eg .decodeG4 (encoded );};return nil ,nil ;};func _acc (_aa []byte ,_fag int )(bool ,int ,error ){_ebc :=_fag ;
var _cff bool ;_cff ,_fag =_bfc (_aa ,_fag );if _cff {_cff ,_fag =_bfc (_aa ,_fag );if _cff {return true ,_fag ,nil ;};return false ,_ebc ,_ad ;};return false ,_ebc ,nil ;};func _eda (_dgf [][]byte ,_dba []byte ,_fec bool ,_bce int )([]byte ,int ){_gfc :=_efdc (_dba ,_dgf [len (_dgf )-1],_bce ,_fec );
_bde :=_ded (_dgf [len (_dgf )-1],_gfc );if _bce ==-1{_dba =_ggb (_dba ,_fec ,_bde -_bce -1);}else {_dba =_ggb (_dba ,_fec ,_bde -_bce );};_bce =_bde ;return _dba ,_bce ;};func (_gcg *Encoder )decodeG32D (_fdb []byte )([][]byte ,error ){var (_ff [][]byte ;
_fdd int ;_ca error ;);_ba :for (_fdd /8)< len (_fdb ){var _af bool ;_af ,_fdd ,_ca =_cd (_fdb ,_fdd );if _ca !=nil {return nil ,_ca ;};if _af {break ;};_af ,_fdd =_acac (_fdb ,_fdd );if !_af {if _gcg .EndOfLine {return nil ,_bc ;};};var _fde []byte ;_fde ,_fdd =_gcg .decodeRow1D (_fdb ,_fdd );
if _gcg .EncodedByteAlign &&_fdd %8!=0{_fdd +=8-_fdd %8;};if _fde !=nil {_ff =append (_ff ,_fde );};if _gcg .Rows > 0&&!_gcg .EndOfBlock &&len (_ff )>=_gcg .Rows {break ;};for _baf :=1;_baf < _gcg .K &&(_fdd /8)< len (_fdb );_baf ++{_af ,_fdd =_cbc (_fdb ,_fdd );
if !_af {_af ,_fdd ,_ca =_cd (_fdb ,_fdd );if _ca !=nil {return nil ,_ca ;};if _af {break _ba ;}else {if _gcg .EndOfLine {return nil ,_bc ;};};};var (_db code ;_eeb bool ;);_bba :=true ;var _cf []byte ;_ab :=-1;for _db ,_fdd ,_eeb =_aba (_fdb ,_fdd );_eeb ;
_db ,_fdd ,_eeb =_aba (_fdb ,_fdd ){switch _db {case _fc :_cf ,_ab =_eda (_ff ,_cf ,_bba ,_ab );case _fcf :_cf ,_fdd ,_ab ,_ca =_cgca (_fdb ,_cf ,_fdd ,_bba ,_ab );if _ca !=nil {return nil ,_ca ;};case _gf :_cf ,_ab =_gcga (_ff ,_cf ,_bba ,_ab ,0);_bba =!_bba ;
case _bf :_cf ,_ab =_gcga (_ff ,_cf ,_bba ,_ab ,1);_bba =!_bba ;case _dg :_cf ,_ab =_gcga (_ff ,_cf ,_bba ,_ab ,2);_bba =!_bba ;case _ce :_cf ,_ab =_gcga (_ff ,_cf ,_bba ,_ab ,3);_bba =!_bba ;case _acd :_cf ,_ab =_gcga (_ff ,_cf ,_bba ,_ab ,-1);_bba =!_bba ;
case _fe :_cf ,_ab =_gcga (_ff ,_cf ,_bba ,_ab ,-2);_bba =!_bba ;case _eb :_cf ,_ab =_gcga (_ff ,_cf ,_bba ,_ab ,-3);_bba =!_bba ;};if len (_cf )>=_gcg .Columns {break ;};};if _gcg .EncodedByteAlign &&_fdd %8!=0{_fdd +=8-_fdd %8;};if _cf !=nil {_ff =append (_ff ,_cf );
};if _gcg .Rows > 0&&!_gcg .EndOfBlock &&len (_ff )>=_gcg .Rows {break _ba ;};};};return _ff ,nil ;};func _ggb (_gge []byte ,_fdef bool ,_bffa int )[]byte {if _bffa < 0{return _gge ;};_efag :=make ([]byte ,_bffa );if _fdef {for _fce :=0;_fce < len (_efag );
_fce ++{_efag [_fce ]=_de ;};}else {for _feg :=0;_feg < len (_efag );_feg ++{_efag [_feg ]=_fdgg ;};};_gge =append (_gge ,_efag ...);return _gge ;};func _dbda (_bfca []byte ,_efda bool ,_acbf int )(int ,int ){_eab :=0;for _acbf < len (_bfca ){if _efda {if _bfca [_acbf ]!=_de {break ;
};}else {if _bfca [_acbf ]!=_fdgg {break ;};};_eab ++;_acbf ++;};return _eab ,_acbf ;};var (_ad =_a .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_ge =_a .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");
_bd =_a .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_bc =_a .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_aca =_a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_dgg =_a .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _cga (_beg int ,_agg bool )(code ,int ,bool ){if _beg < 64{if _agg {return _ga [_beg ],0,true ;
};return _ed [_beg ],0,true ;};_ddec :=_beg /64;if _ddec > 40{return _f [2560],_beg -2560,false ;};if _ddec > 27{return _f [_ddec *64],_beg -_ddec *64,false ;};if _agg {return _gg [_ddec *64],_beg -_ddec *64,false ;};return _b [_ddec *64],_beg -_ddec *64,false ;
};func _add (_fbe uint16 ,_fdg int )byte {if _fdg < 8{_fbe >>=8;};_fdg %=8;_afd :=byte (0x01<<(7-uint (_fdg )));return (byte (_fbe )&_afd )>>(7-uint (_fdg ));};func _ded (_dge []byte ,_dafc int )int {if _dafc >=len (_dge ){return _dafc ;};if _dafc < -1{_dafc =-1;
};var _efefg byte ;if _dafc > -1{_efefg =_dge [_dafc ];}else {_efefg =_de ;};_efbcc :=_dafc +1;for _efbcc < len (_dge ){if _dge [_efbcc ]!=_efefg {break ;};_efbcc ++;};return _efbcc ;};func _agef (_egag ,_bbf int )code {var _edf code ;switch _bbf -_egag {case -1:_edf =_bf ;
case -2:_edf =_dg ;case -3:_edf =_ce ;case 0:_edf =_gf ;case 1:_edf =_acd ;case 2:_edf =_fe ;case 3:_edf =_eb ;};return _edf ;};func _gfdc (_agb []byte ,_bfd ,_ecb ,_cbga int )([]byte ,int ){_eaf :=_agef (_ecb ,_cbga );_agb ,_bfd =_gdd (_agb ,_bfd ,_eaf );
return _agb ,_bfd ;};func _cbc (_gaa []byte ,_cfe int )(bool ,int ){return _cbd (_gaa ,_cfe ,_ac )};func _gggg (_bbad int )([]byte ,int ){var _beec []byte ;for _feba :=0;_feba < 6;_feba ++{_beec ,_bbad =_gdd (_beec ,_bbad ,_c );};return _beec ,_bbad %8;
};func _gcga (_agd [][]byte ,_cb []byte ,_cfa bool ,_cee ,_bbg int )([]byte ,int ){_cgc :=_efdc (_cb ,_agd [len (_agd )-1],_cee ,_cfa );_gec :=_cgc +_bbg ;if _cee ==-1{_cb =_ggb (_cb ,_cfa ,_gec -_cee -1);}else {_cb =_ggb (_cb ,_cfa ,_gec -_cee );};_cee =_gec ;
return _cb ,_cee ;};func _cbd (_ccb []byte ,_eeec int ,_cfg code )(bool ,int ){_dac :=_eeec ;var (_cde uint16 ;_gfd int ;);_cde ,_gfd ,_eeec =_cc (_ccb ,_eeec );if _gfd > 3{return false ,_dac ;};_cde >>=uint (3-_gfd );_cde <<=3;if _cde !=_cfg .Code {return false ,_dac ;
};return true ,_eeec -3+_gfd ;};func (_ebe *Encoder )decodeG4 (_da []byte )([][]byte ,error ){_efb :=make ([]byte ,_ebe .Columns );for _gab :=range _efb {_efb [_gab ]=_de ;};_bda :=make ([][]byte ,1);_bda [0]=_efb ;var (_bad bool ;_abb error ;_adaf int ;
);for (_adaf /8)< len (_da ){_bad ,_adaf ,_abb =_acc (_da ,_adaf );if _abb !=nil {return nil ,_abb ;};if _bad {break ;};var (_ag code ;_ea bool ;);_dd :=true ;var _ebb []byte ;_ddb :=-1;for _ddb < _ebe .Columns {_ag ,_adaf ,_ea =_aba (_da ,_adaf );if !_ea {return nil ,_dgg ;
};switch _ag {case _fc :_ebb ,_ddb =_eda (_bda ,_ebb ,_dd ,_ddb );case _fcf :_ebb ,_adaf ,_ddb ,_abb =_cgca (_da ,_ebb ,_adaf ,_dd ,_ddb );if _abb !=nil {return nil ,_abb ;};case _gf :_ebb ,_ddb =_gcga (_bda ,_ebb ,_dd ,_ddb ,0);_dd =!_dd ;case _bf :_ebb ,_ddb =_gcga (_bda ,_ebb ,_dd ,_ddb ,1);
_dd =!_dd ;case _dg :_ebb ,_ddb =_gcga (_bda ,_ebb ,_dd ,_ddb ,2);_dd =!_dd ;case _ce :_ebb ,_ddb =_gcga (_bda ,_ebb ,_dd ,_ddb ,3);_dd =!_dd ;case _acd :_ebb ,_ddb =_gcga (_bda ,_ebb ,_dd ,_ddb ,-1);_dd =!_dd ;case _fe :_ebb ,_ddb =_gcga (_bda ,_ebb ,_dd ,_ddb ,-2);
_dd =!_dd ;case _eb :_ebb ,_ddb =_gcga (_bda ,_ebb ,_dd ,_ddb ,-3);_dd =!_dd ;};if len (_ebb )>=_ebe .Columns {break ;};};if _ebe .EncodedByteAlign &&_adaf %8!=0{_adaf +=8-_adaf %8;};_bda =append (_bda ,_ebb );if _ebe .Rows > 0&&!_ebe .EndOfBlock &&len (_bda )>=(_ebe .Rows +1){break ;
};};_bda =_bda [1:];return _bda ,nil ;};func (_gca *Encoder )Encode (pixels [][]byte )[]byte {if _gca .BlackIs1 {_de =0;_fdgg =1;}else {_de =1;_fdgg =0;};if _gca .K ==0{return _gca .encodeG31D (pixels );};if _gca .K > 0{return _gca .encodeG32D (pixels );
};if _gca .K < 0{return _gca .encodeG4 (pixels );};return nil ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func (_cbg *Encoder )appendEncodedRow (_bgf ,_eef []byte ,_ece int )[]byte {if len (_bgf )> 0&&_ece !=0&&!_cbg .EncodedByteAlign {_bgf [len (_bgf )-1]=_bgf [len (_bgf )-1]|_eef [0];
_bgf =append (_bgf ,_eef [1:]...);}else {_bgf =append (_bgf ,_eef ...);};return _bgf ;};func _acab (_edbd [][]byte )[][]byte {_gcab :=make ([]byte ,len (_edbd [0]));for _dae :=range _gcab {_gcab [_dae ]=_de ;};_edbd =append (_edbd ,[]byte {});for _cce :=len (_edbd )-1;
_cce > 0;_cce --{_edbd [_cce ]=_edbd [_cce -1];};_edbd [0]=_gcab ;return _edbd ;};func (_fae *Encoder )encodeG31D (_fddd [][]byte )[]byte {var _gae []byte ;_dgb :=0;for _dda :=range _fddd {if _fae .Rows > 0&&!_fae .EndOfBlock &&_dda ==_fae .Rows {break ;
};_dgdb ,_egb :=_gbd (_fddd [_dda ],_dgb ,_d );_gae =_fae .appendEncodedRow (_gae ,_dgdb ,_dgb );if _fae .EncodedByteAlign {_egb =0;};_dgb =_egb ;};if _fae .EndOfBlock {_bedf ,_ :=_gaf (_dgb );_gae =_fae .appendEncodedRow (_gae ,_bedf ,_dgb );};return _gae ;
};