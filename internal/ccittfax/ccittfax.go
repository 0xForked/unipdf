//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_d "errors";_e "math";);func _cf (_dbfg []byte ,_cec int )(bool ,int ,error ){_gd :=_cec ;var _efad bool ;_efad ,_cec =_eae (_dbfg ,_cec );if _efad {_efad ,_cec =_eae (_dbfg ,_cec );if _efad {return true ,_cec ,nil ;};return false ,_gd ,_eb ;};return false ,_gd ,nil ;};var (_a map[int ]code ;_dg map[int ]code ;_g map[int ]code ;_ee map[int ]code ;_bg map[int ]code ;_bd map[int ]byte ;_ac =code {Code :1<<4,BitsWritten :12};_f =code {Code :3<<3,BitsWritten :13};_ae =code {Code :2<<3,BitsWritten :13};_ab =code {Code :1<<12,BitsWritten :4};_ga =code {Code :1<<13,BitsWritten :3};_gc =code {Code :1<<15,BitsWritten :1};_c =code {Code :3<<13,BitsWritten :3};_da =code {Code :3<<10,BitsWritten :6};_gb =code {Code :3<<9,BitsWritten :7};_bf =code {Code :2<<13,BitsWritten :3};_cg =code {Code :2<<10,BitsWritten :6};_ec =code {Code :2<<9,BitsWritten :7};);func init (){_a =make (map[int ]code );_a [0]=code {Code :13<<8|3<<6,BitsWritten :10};_a [1]=code {Code :2<<(5+8),BitsWritten :3};_a [2]=code {Code :3<<(6+8),BitsWritten :2};_a [3]=code {Code :2<<(6+8),BitsWritten :2};_a [4]=code {Code :3<<(5+8),BitsWritten :3};_a [5]=code {Code :3<<(4+8),BitsWritten :4};_a [6]=code {Code :2<<(4+8),BitsWritten :4};_a [7]=code {Code :3<<(3+8),BitsWritten :5};_a [8]=code {Code :5<<(2+8),BitsWritten :6};_a [9]=code {Code :4<<(2+8),BitsWritten :6};_a [10]=code {Code :4<<(1+8),BitsWritten :7};_a [11]=code {Code :5<<(1+8),BitsWritten :7};_a [12]=code {Code :7<<(1+8),BitsWritten :7};_a [13]=code {Code :4<<8,BitsWritten :8};_a [14]=code {Code :7<<8,BitsWritten :8};_a [15]=code {Code :12<<8,BitsWritten :9};_a [16]=code {Code :5<<8|3<<6,BitsWritten :10};_a [17]=code {Code :6<<8,BitsWritten :10};_a [18]=code {Code :2<<8,BitsWritten :10};_a [19]=code {Code :12<<8|7<<5,BitsWritten :11};_a [20]=code {Code :13<<8,BitsWritten :11};_a [21]=code {Code :13<<8|4<<5,BitsWritten :11};_a [22]=code {Code :6<<8|7<<5,BitsWritten :11};_a [23]=code {Code :5<<8,BitsWritten :11};_a [24]=code {Code :2<<8|7<<5,BitsWritten :11};_a [25]=code {Code :3<<8,BitsWritten :11};_a [26]=code {Code :12<<8|10<<4,BitsWritten :12};_a [27]=code {Code :12<<8|11<<4,BitsWritten :12};_a [28]=code {Code :12<<8|12<<4,BitsWritten :12};_a [29]=code {Code :12<<8|13<<4,BitsWritten :12};_a [30]=code {Code :6<<8|8<<4,BitsWritten :12};_a [31]=code {Code :6<<8|9<<4,BitsWritten :12};_a [32]=code {Code :6<<8|10<<4,BitsWritten :12};_a [33]=code {Code :6<<8|11<<4,BitsWritten :12};_a [34]=code {Code :13<<8|2<<4,BitsWritten :12};_a [35]=code {Code :13<<8|3<<4,BitsWritten :12};_a [36]=code {Code :13<<8|4<<4,BitsWritten :12};_a [37]=code {Code :13<<8|5<<4,BitsWritten :12};_a [38]=code {Code :13<<8|6<<4,BitsWritten :12};_a [39]=code {Code :13<<8|7<<4,BitsWritten :12};_a [40]=code {Code :6<<8|12<<4,BitsWritten :12};_a [41]=code {Code :6<<8|13<<4,BitsWritten :12};_a [42]=code {Code :13<<8|10<<4,BitsWritten :12};_a [43]=code {Code :13<<8|11<<4,BitsWritten :12};_a [44]=code {Code :5<<8|4<<4,BitsWritten :12};_a [45]=code {Code :5<<8|5<<4,BitsWritten :12};_a [46]=code {Code :5<<8|6<<4,BitsWritten :12};_a [47]=code {Code :5<<8|7<<4,BitsWritten :12};_a [48]=code {Code :6<<8|4<<4,BitsWritten :12};_a [49]=code {Code :6<<8|5<<4,BitsWritten :12};_a [50]=code {Code :5<<8|2<<4,BitsWritten :12};_a [51]=code {Code :5<<8|3<<4,BitsWritten :12};_a [52]=code {Code :2<<8|4<<4,BitsWritten :12};_a [53]=code {Code :3<<8|7<<4,BitsWritten :12};_a [54]=code {Code :3<<8|8<<4,BitsWritten :12};_a [55]=code {Code :2<<8|7<<4,BitsWritten :12};_a [56]=code {Code :2<<8|8<<4,BitsWritten :12};_a [57]=code {Code :5<<8|8<<4,BitsWritten :12};_a [58]=code {Code :5<<8|9<<4,BitsWritten :12};_a [59]=code {Code :2<<8|11<<4,BitsWritten :12};_a [60]=code {Code :2<<8|12<<4,BitsWritten :12};_a [61]=code {Code :5<<8|10<<4,BitsWritten :12};_a [62]=code {Code :6<<8|6<<4,BitsWritten :12};_a [63]=code {Code :6<<8|7<<4,BitsWritten :12};_dg =make (map[int ]code );_dg [0]=code {Code :53<<8,BitsWritten :8};_dg [1]=code {Code :7<<(2+8),BitsWritten :6};_dg [2]=code {Code :7<<(4+8),BitsWritten :4};_dg [3]=code {Code :8<<(4+8),BitsWritten :4};_dg [4]=code {Code :11<<(4+8),BitsWritten :4};_dg [5]=code {Code :12<<(4+8),BitsWritten :4};_dg [6]=code {Code :14<<(4+8),BitsWritten :4};_dg [7]=code {Code :15<<(4+8),BitsWritten :4};_dg [8]=code {Code :19<<(3+8),BitsWritten :5};_dg [9]=code {Code :20<<(3+8),BitsWritten :5};_dg [10]=code {Code :7<<(3+8),BitsWritten :5};_dg [11]=code {Code :8<<(3+8),BitsWritten :5};_dg [12]=code {Code :8<<(2+8),BitsWritten :6};_dg [13]=code {Code :3<<(2+8),BitsWritten :6};_dg [14]=code {Code :52<<(2+8),BitsWritten :6};_dg [15]=code {Code :53<<(2+8),BitsWritten :6};_dg [16]=code {Code :42<<(2+8),BitsWritten :6};_dg [17]=code {Code :43<<(2+8),BitsWritten :6};_dg [18]=code {Code :39<<(1+8),BitsWritten :7};_dg [19]=code {Code :12<<(1+8),BitsWritten :7};_dg [20]=code {Code :8<<(1+8),BitsWritten :7};_dg [21]=code {Code :23<<(1+8),BitsWritten :7};_dg [22]=code {Code :3<<(1+8),BitsWritten :7};_dg [23]=code {Code :4<<(1+8),BitsWritten :7};_dg [24]=code {Code :40<<(1+8),BitsWritten :7};_dg [25]=code {Code :43<<(1+8),BitsWritten :7};_dg [26]=code {Code :19<<(1+8),BitsWritten :7};_dg [27]=code {Code :36<<(1+8),BitsWritten :7};_dg [28]=code {Code :24<<(1+8),BitsWritten :7};_dg [29]=code {Code :2<<8,BitsWritten :8};_dg [30]=code {Code :3<<8,BitsWritten :8};_dg [31]=code {Code :26<<8,BitsWritten :8};_dg [32]=code {Code :27<<8,BitsWritten :8};_dg [33]=code {Code :18<<8,BitsWritten :8};_dg [34]=code {Code :19<<8,BitsWritten :8};_dg [35]=code {Code :20<<8,BitsWritten :8};_dg [36]=code {Code :21<<8,BitsWritten :8};_dg [37]=code {Code :22<<8,BitsWritten :8};_dg [38]=code {Code :23<<8,BitsWritten :8};_dg [39]=code {Code :40<<8,BitsWritten :8};_dg [40]=code {Code :41<<8,BitsWritten :8};_dg [41]=code {Code :42<<8,BitsWritten :8};_dg [42]=code {Code :43<<8,BitsWritten :8};_dg [43]=code {Code :44<<8,BitsWritten :8};_dg [44]=code {Code :45<<8,BitsWritten :8};_dg [45]=code {Code :4<<8,BitsWritten :8};_dg [46]=code {Code :5<<8,BitsWritten :8};_dg [47]=code {Code :10<<8,BitsWritten :8};_dg [48]=code {Code :11<<8,BitsWritten :8};_dg [49]=code {Code :82<<8,BitsWritten :8};_dg [50]=code {Code :83<<8,BitsWritten :8};_dg [51]=code {Code :84<<8,BitsWritten :8};_dg [52]=code {Code :85<<8,BitsWritten :8};_dg [53]=code {Code :36<<8,BitsWritten :8};_dg [54]=code {Code :37<<8,BitsWritten :8};_dg [55]=code {Code :88<<8,BitsWritten :8};_dg [56]=code {Code :89<<8,BitsWritten :8};_dg [57]=code {Code :90<<8,BitsWritten :8};_dg [58]=code {Code :91<<8,BitsWritten :8};_dg [59]=code {Code :74<<8,BitsWritten :8};_dg [60]=code {Code :75<<8,BitsWritten :8};_dg [61]=code {Code :50<<8,BitsWritten :8};_dg [62]=code {Code :51<<8,BitsWritten :8};_dg [63]=code {Code :52<<8,BitsWritten :8};_g =make (map[int ]code );_g [64]=code {Code :3<<8|3<<6,BitsWritten :10};_g [128]=code {Code :12<<8|8<<4,BitsWritten :12};_g [192]=code {Code :12<<8|9<<4,BitsWritten :12};_g [256]=code {Code :5<<8|11<<4,BitsWritten :12};_g [320]=code {Code :3<<8|3<<4,BitsWritten :12};_g [384]=code {Code :3<<8|4<<4,BitsWritten :12};_g [448]=code {Code :3<<8|5<<4,BitsWritten :12};_g [512]=code {Code :3<<8|12<<3,BitsWritten :13};_g [576]=code {Code :3<<8|13<<3,BitsWritten :13};_g [640]=code {Code :2<<8|10<<3,BitsWritten :13};_g [704]=code {Code :2<<8|11<<3,BitsWritten :13};_g [768]=code {Code :2<<8|12<<3,BitsWritten :13};_g [832]=code {Code :2<<8|13<<3,BitsWritten :13};_g [896]=code {Code :3<<8|18<<3,BitsWritten :13};_g [960]=code {Code :3<<8|19<<3,BitsWritten :13};_g [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_g [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_g [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_g [1216]=code {Code :119<<3,BitsWritten :13};_g [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_g [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_g [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_g [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_g [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_g [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_g [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_g [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_ee =make (map[int ]code );_ee [64]=code {Code :27<<(3+8),BitsWritten :5};_ee [128]=code {Code :18<<(3+8),BitsWritten :5};_ee [192]=code {Code :23<<(2+8),BitsWritten :6};_ee [256]=code {Code :55<<(1+8),BitsWritten :7};_ee [320]=code {Code :54<<8,BitsWritten :8};_ee [384]=code {Code :55<<8,BitsWritten :8};_ee [448]=code {Code :100<<8,BitsWritten :8};_ee [512]=code {Code :101<<8,BitsWritten :8};_ee [576]=code {Code :104<<8,BitsWritten :8};_ee [640]=code {Code :103<<8,BitsWritten :8};_ee [704]=code {Code :102<<8,BitsWritten :9};_ee [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ee [832]=code {Code :105<<8,BitsWritten :9};_ee [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ee [960]=code {Code :106<<8,BitsWritten :9};_ee [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ee [1088]=code {Code :107<<8,BitsWritten :9};_ee [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ee [1216]=code {Code :108<<8,BitsWritten :9};_ee [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ee [1344]=code {Code :109<<8,BitsWritten :9};_ee [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ee [1472]=code {Code :76<<8,BitsWritten :9};_ee [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ee [1600]=code {Code :77<<8,BitsWritten :9};_ee [1664]=code {Code :24<<(2+8),BitsWritten :6};_ee [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_bg =make (map[int ]code );_bg [1792]=code {Code :1<<8,BitsWritten :11};_bg [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_bg [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_bg [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_bg [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_bg [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_bg [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_bg [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_bg [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_bg [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_bg [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_bg [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_bg [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_bd =make (map[int ]byte );_bd [0]=0xFF;_bd [1]=0xFE;_bd [2]=0xFC;_bd [3]=0xF8;_bd [4]=0xF0;_bd [5]=0xE0;_bd [6]=0xC0;_bd [7]=0x80;_bd [8]=0x00;};var (_eef =&decodingTreeNode {Val :255};_fe =&decodingTreeNode {Val :255};_aa =&decodingTreeNode {Val :255};);func _gab (_bdce [][]byte ,_afg []byte ,_bca bool ,_bfg int )([]byte ,int ){_dfg :=_dcf (_afg ,_bdce [len (_bdce )-1],_bfg ,_bca );_ag :=_gfg (_bdce [len (_bdce )-1],_dfg );if _bfg ==-1{_afg =_fce (_afg ,_bca ,_ag -_bfg -1);}else {_afg =_fce (_afg ,_bca ,_ag -_bfg );};_bfg =_ag ;return _afg ,_bfg ;};func init (){for _dd ,_gcd :=range _dg {_cbb (_eef ,_gcd ,0,_dd );};for _gae ,_aaa :=range _ee {_cbb (_eef ,_aaa ,0,_gae );};for _ef ,_de :=range _a {_cbb (_fe ,_de ,0,_ef );};for _bc ,_fa :=range _g {_cbb (_fe ,_fa ,0,_bc );};for _acf ,_bcb :=range _bg {_cbb (_eef ,_bcb ,0,_acf );_cbb (_fe ,_bcb ,0,_acf );};_cbb (_aa ,_ab ,0,0);_cbb (_aa ,_ga ,0,0);_cbb (_aa ,_gc ,0,0);_cbb (_aa ,_c ,0,0);_cbb (_aa ,_da ,0,0);_cbb (_aa ,_gb ,0,0);_cbb (_aa ,_bf ,0,0);_cbb (_aa ,_cg ,0,0);_cbb (_aa ,_ec ,0,0);};func (_fed *Encoder )decodeG31D (_fg []byte )([][]byte ,error ){var _fc [][]byte ;var _def int ;for (_def /8)< len (_fg ){var _db bool ;_db ,_def =_eae (_fg ,_def );if !_db {if _fed .EndOfLine {return nil ,_ge ;};}else {for _fgd :=0;_fgd < 5;_fgd ++{_db ,_def =_eae (_fg ,_def );if !_db {if _fgd ==0{break ;};return nil ,_bde ;};};if _db {break ;};};var _ege []byte ;_ege ,_def =_fed .decodeRow1D (_fg ,_def );if _fed .EncodedByteAlign &&_def %8!=0{_def +=8-_def %8;};_fc =append (_fc ,_ege );if _fed .Rows > 0&&!_fed .EndOfBlock &&len (_fc )>=_fed .Rows {break ;};};return _fc ,nil ;};func _dacf (_deb []byte ,_dc int ,_cfg bool )(int ,int ){var (_aea uint16 ;_bec int ;_degf int ;);_degf =_dc ;_aea ,_bec ,_ =_dba (_deb ,_dc );_cb ,_afgc :=_fda (_aea ,_bec ,_cfg );if _cb ==-1{return -1,_degf ;};return _cb ,_degf +_afgc .BitsWritten ;};func _becd (_acb [][]byte )[][]byte {_fff :=make ([]byte ,len (_acb [0]));for _dedbg :=range _fff {_fff [_dedbg ]=_cgf ;};_acb =append (_acb ,[]byte {});for _fac :=len (_acb )-1;_fac > 0;_fac --{_acb [_fac ]=_acb [_fac -1];};_acb [0]=_fff ;return _acb ;};func (_bcf *Encoder )decodeRow1D (_fcd []byte ,_fbe int )([]byte ,int ){var _dfa []byte ;_fgc :=true ;var _cdaf int ;_cdaf ,_fbe =_dacf (_fcd ,_fbe ,_fgc );for _cdaf !=-1{_dfa =_fce (_dfa ,_fgc ,_cdaf );if _cdaf < 64{if len (_dfa )>=_bcf .Columns {break ;};_fgc =!_fgc ;};_cdaf ,_fbe =_dacf (_fcd ,_fbe ,_fgc );};return _dfa ,_fbe ;};func _beb (_fad []byte ,_ecb int ,_ed int ,_begf bool )([]byte ,int ){var (_effa code ;_ffbfc bool ;);for !_ffbfc {_effa ,_ed ,_ffbfc =_agd (_ed ,_begf );_fad ,_ecb =_gfda (_fad ,_ecb ,_effa );};return _fad ,_ecb ;};func _gfda (_agca []byte ,_aaae int ,_dgbe code )([]byte ,int ){_bab :=0;for _bab < _dgbe .BitsWritten {_fecg :=_aaae /8;_efd :=_aaae %8;if _fecg >=len (_agca ){_agca =append (_agca ,0);};_ddac :=8-_efd ;_ffae :=_dgbe .BitsWritten -_bab ;if _ddac > _ffae {_ddac =_ffae ;};if _bab < 8{_agca [_fecg ]=_agca [_fecg ]|byte (_dgbe .Code >>uint (8+_efd -_bab ))&_bd [8-_ddac -_efd ];}else {_agca [_fecg ]=_agca [_fecg ]|(byte (_dgbe .Code <<uint (_bab -8))&_bd [8-_ddac ])>>uint (_efd );};_aaae +=_ddac ;_bab +=_ddac ;};return _agca ,_aaae ;};func _geb (_gca []byte ,_bfb int )(code ,int ,bool ){var (_dag uint16 ;_degg int ;_agc int ;);_agc =_bfb ;_dag ,_degg ,_ =_dba (_gca ,_bfb );_gea ,_fd :=_ebca (_dag ,_degg );if !_fd {return code {},_agc ,false ;};return _gea ,_agc +_gea .BitsWritten ,true ;};func _ebca (_ecg uint16 ,_cgg int )(code ,bool ){_ ,_bac :=_fbbd (_aa ,_ecg ,_cgg );if _bac ==nil {return code {},false ;};return *_bac ,true ;};func (_bb *Encoder )decodeG4 (_dab []byte )([][]byte ,error ){_cgb :=make ([]byte ,_bb .Columns );for _fag :=range _cgb {_cgb [_fag ]=_cgf ;};_ged :=make ([][]byte ,1);_ged [0]=_cgb ;var (_efb bool ;_dbf error ;_dac int ;);for (_dac /8)< len (_dab ){_efb ,_dac ,_dbf =_cf (_dab ,_dac );if _dbf !=nil {return nil ,_dbf ;};if _efb {break ;};var (_cd code ;_aca bool ;);_efc :=true ;var _ecd []byte ;_efa :=-1;for _efa < _bb .Columns {_cd ,_dac ,_aca =_geb (_dab ,_dac );if !_aca {return nil ,_eg ;};switch _cd {case _ab :_ecd ,_efa =_gab (_ged ,_ecd ,_efc ,_efa );case _ga :_ecd ,_dac ,_efa ,_dbf =_acdd (_dab ,_ecd ,_dac ,_efc ,_efa );if _dbf !=nil {return nil ,_dbf ;};case _gc :_ecd ,_efa =_bff (_ged ,_ecd ,_efc ,_efa ,0);_efc =!_efc ;case _c :_ecd ,_efa =_bff (_ged ,_ecd ,_efc ,_efa ,1);_efc =!_efc ;case _da :_ecd ,_efa =_bff (_ged ,_ecd ,_efc ,_efa ,2);_efc =!_efc ;case _gb :_ecd ,_efa =_bff (_ged ,_ecd ,_efc ,_efa ,3);_efc =!_efc ;case _bf :_ecd ,_efa =_bff (_ged ,_ecd ,_efc ,_efa ,-1);_efc =!_efc ;case _cg :_ecd ,_efa =_bff (_ged ,_ecd ,_efc ,_efa ,-2);_efc =!_efc ;case _ec :_ecd ,_efa =_bff (_ged ,_ecd ,_efc ,_efa ,-3);_efc =!_efc ;};if len (_ecd )>=_bb .Columns {break ;};};if _bb .EncodedByteAlign &&_dac %8!=0{_dac +=8-_dac %8;};_ged =append (_ged ,_ecd );if _bb .Rows > 0&&!_bb .EndOfBlock &&len (_ged )>=(_bb .Rows +1){break ;};};_ged =_ged [1:];return _ged ,nil ;};func _gfg (_egc []byte ,_dbcc int )int {if _dbcc >=len (_egc ){return _dbcc ;};if _dbcc < -1{_dbcc =-1;};var _bfgd byte ;if _dbcc > -1{_bfgd =_egc [_dbcc ];}else {_bfgd =_cgf ;};_bgd :=_dbcc +1;for _bgd < len (_egc ){if _egc [_bgd ]!=_bfgd {break ;};_bgd ++;};return _bgd ;};func _fbg (_ffc []byte ,_cfga int )(bool ,int ){return _ebe (_ffc ,_cfga ,_f )};func (_egd *Encoder )Decode (encoded []byte )([][]byte ,error ){if _egd .BlackIs1 {_cgf =0;_gdd =1;}else {_cgf =1;_gdd =0;};if _egd .K ==0{return _egd .decodeG31D (encoded );};if _egd .K > 0{return _egd .decodeG32D (encoded );};if _egd .K < 4{return _egd .decodeG4 (encoded );};return nil ,nil ;};func _eag (_bbe []byte ,_gaed int )(bool ,int ){return _ebe (_bbe ,_gaed ,_ae )};func _eae (_ffe []byte ,_accg int )(bool ,int ){_bdb :=_accg ;var (_bfc uint16 ;_abfb int ;);_bfc ,_abfb ,_accg =_dba (_ffe ,_accg );if _abfb > 4{return false ,_bdb ;};_bfc >>=uint (4-_abfb );_bfc <<=4;if _bfc !=_ac .Code {return false ,_bdb ;};return true ,_accg -4+_abfb ;};func _fgdb (_ffbf []byte ,_bee int ,_ddb code )([]byte ,int ){_afc :=true ;var _eaefa []byte ;_eaefa ,_bee =_gfda (nil ,_bee ,_ddb );_degc :=0;var _egf int ;for _degc < len (_ffbf ){_egf ,_degc =_effag (_ffbf ,_afc ,_degc );_eaefa ,_bee =_beb (_eaefa ,_bee ,_egf ,_afc );_afc =!_afc ;};return _eaefa ,_bee %8;};type code struct{Code uint16 ;BitsWritten int ;};func _fda (_aeb uint16 ,_ecf int ,_bbg bool )(int ,code ){var _cc *int ;var _ggf *code ;if _bbg {_cc ,_ggf =_fbbd (_eef ,_aeb ,_ecf );}else {_cc ,_ggf =_fbbd (_fe ,_aeb ,_ecf );};if _cc ==nil {return -1,code {};};return *_cc ,*_ggf ;};func _bff (_abed [][]byte ,_cgdg []byte ,_fcg bool ,_ebc ,_gfd int )([]byte ,int ){_acd :=_dcf (_cgdg ,_abed [len (_abed )-1],_ebc ,_fcg );_ba :=_acd +_gfd ;if _ebc ==-1{_cgdg =_fce (_cgdg ,_fcg ,_ba -_ebc -1);}else {_cgdg =_fce (_cgdg ,_fcg ,_ba -_ebc );};_ebc =_ba ;return _cgdg ,_ebc ;};func _cbb (_adeg *decodingTreeNode ,_fbd code ,_dda int ,_aeac int ){_dcg :=_ced (_fbd .Code ,_dda );_dda ++;if _dcg ==1{if _adeg .Right ==nil {_adeg .Right =&decodingTreeNode {Val :_dcg };};if _dda ==_fbd .BitsWritten {_adeg .Right .RunLen =&_aeac ;_adeg .Right .Code =&_fbd ;}else {_cbb (_adeg .Right ,_fbd ,_dda ,_aeac );};}else {if _adeg .Left ==nil {_adeg .Left =&decodingTreeNode {Val :_dcg };};if _dda ==_fbd .BitsWritten {_adeg .Left .RunLen =&_aeac ;_adeg .Left .Code =&_fbd ;}else {_cbb (_adeg .Left ,_fbd ,_dda ,_aeac );};};};func _bef (_bbga ,_fbbg []byte ,_bcad ,_aage ,_aaac int )([]byte ,int ,int ){_cfcg :=_gfg (_bbga ,_aaac );_feg :=_aage >=0&&_bbga [_aage ]==_cgf ||_aage ==-1;_fbbg ,_bcad =_gfda (_fbbg ,_bcad ,_ga );var _gdee int ;if _aage > -1{_gdee =_aaac -_aage ;}else {_gdee =_aaac -_aage -1;};_fbbg ,_bcad =_beb (_fbbg ,_bcad ,_gdee ,_feg );_feg =!_feg ;_eec :=_cfcg -_aaac ;_fbbg ,_bcad =_beb (_fbbg ,_bcad ,_eec ,_feg );_aage =_cfcg ;return _fbbg ,_bcad ,_aage ;};func _dgd (_cgga ,_ebd int )code {var _bafe code ;switch _ebd -_cgga {case -1:_bafe =_c ;case -2:_bafe =_da ;case -3:_bafe =_gb ;case 0:_bafe =_gc ;case 1:_bafe =_bf ;case 2:_bafe =_cg ;case 3:_bafe =_ec ;};return _bafe ;};func _fbbd (_afa *decodingTreeNode ,_baf uint16 ,_afgaa int )(*int ,*code ){if _afa ==nil {return nil ,nil ;};if _afgaa ==16{return _afa .RunLen ,_afa .Code ;};_cedd :=_ced (_baf ,_afgaa );_afgaa ++;var _bfe *int ;var _fdac *code ;if _cedd ==1{_bfe ,_fdac =_fbbd (_afa .Right ,_baf ,_afgaa );}else {_bfe ,_fdac =_fbbd (_afa .Left ,_baf ,_afgaa );};if _bfe ==nil {_bfe =_afa .RunLen ;_fdac =_afa .Code ;};return _bfe ,_fdac ;};func _effag (_gcc []byte ,_bbc bool ,_cfc int )(int ,int ){_cde :=0;for _cfc < len (_gcc ){if _bbc {if _gcc [_cfc ]!=_cgf {break ;};}else {if _gcc [_cfc ]!=_gdd {break ;};};_cde ++;_cfc ++;};return _cde ,_cfc ;};func _acdd (_efe ,_ceb []byte ,_afe int ,_acg bool ,_ff int )([]byte ,int ,int ,error ){_ddg :=_afe ;var _fba error ;_ceb ,_afe ,_fba =_deg (_efe ,_ceb ,_afe ,_acg );if _fba !=nil {return _ceb ,_ddg ,_ff ,_fba ;};_acg =!_acg ;_ceb ,_afe ,_fba =_deg (_efe ,_ceb ,_afe ,_acg );if _fba !=nil {return _ceb ,_ddg ,_ff ,_fba ;};_ff =len (_ceb );return _ceb ,_afe ,_ff ,nil ;};func (_egg *Encoder )encodeG31D (_gdb [][]byte )[]byte {var _dcb []byte ;_eed :=0;for _cbc :=range _gdb {if _egg .Rows > 0&&!_egg .EndOfBlock &&_cbc ==_egg .Rows {break ;};_aef ,_gge :=_fgdb (_gdb [_cbc ],_eed ,_ac );_dcb =_egg .appendEncodedRow (_dcb ,_aef ,_eed );if _egg .EncodedByteAlign {_gge =0;};_eed =_gge ;};if _egg .EndOfBlock {_dbfc ,_ :=_geg (_eed );_dcb =_egg .appendEncodedRow (_dcb ,_dbfc ,_eed );};return _dcb ;};func (_fbef *Encoder )Encode (pixels [][]byte )[]byte {if _fbef .BlackIs1 {_cgf =0;_gdd =1;}else {_cgf =1;_gdd =0;};if _fbef .K ==0{return _fbef .encodeG31D (pixels );};if _fbef .K > 0{return _fbef .encodeG32D (pixels );};if _fbef .K < 0{return _fbef .encodeG4 (pixels );};return nil ;};var (_eb =_d .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_gbe =_d .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_af =_d .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_ge =_d .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_bde =_d .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_eg =_d .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _geg (_afgf int )([]byte ,int ){var _fcgc []byte ;for _fga :=0;_fga < 6;_fga ++{_fcgc ,_afgf =_gfda (_fcgc ,_afgf ,_ac );};return _fcgc ,_afgf %8;};func _ca (_gcb []byte ,_fdd int )([]byte ,int ){return _gfda (_gcb ,_fdd ,_ab )};func _agd (_gcfg int ,_cce bool )(code ,int ,bool ){if _gcfg < 64{if _cce {return _dg [_gcfg ],0,true ;};return _a [_gcfg ],0,true ;};_cga :=_gcfg /64;if _cga > 40{return _bg [2560],_gcfg -2560,false ;};if _cga > 27{return _bg [_cga *64],_gcfg -_cga *64,false ;};if _cce {return _ee [_cga *64],_gcfg -_cga *64,false ;};return _g [_cga *64],_gcfg -_cga *64,false ;};func _fec (_afga []byte ,_acc int )(bool ,int ,error ){_fbb :=_acc ;var _cda =false ;for _dbce :=0;_dbce < 6;_dbce ++{_cda ,_acc =_fbg (_afga ,_acc );if !_cda {if _dbce > 1{return false ,_fbb ,_gbe ;};_acc =_fbb ;break ;};};return _cda ,_acc ,nil ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _cfa (_adb ,_aebf []byte ,_cee int )int {_dga :=_gfg (_aebf ,_cee );if _dga < len (_aebf )&&(_cee ==-1&&_aebf [_dga ]==_cgf ||_cee >=0&&_cee < len (_adb )&&_adb [_cee ]==_aebf [_dga ]||_cee >=len (_adb )&&_adb [_cee -1]!=_aebf [_dga ]){_dga =_gfg (_aebf ,_dga );};return _dga ;};func _ggeb (_ggc []byte ,_effc ,_fcga ,_abg int )([]byte ,int ){_fcf :=_dgd (_fcga ,_abg );_ggc ,_effc =_gfda (_ggc ,_effc ,_fcf );return _ggc ,_effc ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_bfed *Encoder )encodeG4 (_beg [][]byte )[]byte {_dedb :=make ([][]byte ,len (_beg ));copy (_dedb ,_beg );_dedb =_becd (_dedb );var _bdeg []byte ;var _ggg int ;for _gdbd :=1;_gdbd < len (_dedb );_gdbd ++{if _bfed .Rows > 0&&!_bfed .EndOfBlock &&_gdbd ==(_bfed .Rows +1){break ;};var _adga []byte ;var _ada ,_eff ,_fbba int ;_cdd :=_ggg ;_acgd :=-1;for _acgd < len (_dedb [_gdbd ]){_ada =_gfg (_dedb [_gdbd ],_acgd );_eff =_cfa (_dedb [_gdbd ],_dedb [_gdbd -1],_acgd );_fbba =_gfg (_dedb [_gdbd -1],_eff );if _fbba < _ada {_adga ,_cdd =_gfda (_adga ,_cdd ,_ab );_acgd =_fbba ;}else {if _e .Abs (float64 (_eff -_ada ))> 3{_adga ,_cdd ,_acgd =_bef (_dedb [_gdbd ],_adga ,_cdd ,_acgd ,_ada );}else {_adga ,_cdd =_ggeb (_adga ,_cdd ,_ada ,_eff );_acgd =_ada ;};};};_bdeg =_bfed .appendEncodedRow (_bdeg ,_adga ,_ggg );if _bfed .EncodedByteAlign {_cdd =0;};_ggg =_cdd %8;};if _bfed .EndOfBlock {_gec ,_ :=_ecgd (_ggg );_bdeg =_bfed .appendEncodedRow (_bdeg ,_gec ,_ggg );};return _bdeg ;};func _ced (_ade uint16 ,_adg int )byte {if _adg < 8{_ade >>=8;};_adg %=8;_dfga :=byte (0x01<<(7-uint (_adg )));return (byte (_ade )&_dfga )>>(7-uint (_adg ));};func _ebe (_bgb []byte ,_ceg int ,_aee code )(bool ,int ){_degb :=_ceg ;var (_bag uint16 ;_baca int ;);_bag ,_baca ,_ceg =_dba (_bgb ,_ceg );if _baca > 3{return false ,_degb ;};_bag >>=uint (3-_baca );_bag <<=3;if _bag !=_aee .Code {return false ,_degb ;};return true ,_ceg -3+_baca ;};func _dcf (_ggaa ,_fbbac []byte ,_cbe int ,_gddc bool )int {_ceca :=_gfg (_fbbac ,_cbe );if _ceca < len (_fbbac )&&(_cbe ==-1&&_fbbac [_ceca ]==_cgf ||_cbe >=0&&_cbe < len (_ggaa )&&_ggaa [_cbe ]==_fbbac [_ceca ]||_cbe >=len (_ggaa )&&_gddc &&_fbbac [_ceca ]==_cgf ||_cbe >=len (_ggaa )&&!_gddc &&_fbbac [_ceca ]==_gdd ){_ceca =_gfg (_fbbac ,_ceca );};return _ceca ;};func (_abe *Encoder )decodeG32D (_abf []byte )([][]byte ,error ){var (_gcf [][]byte ;_gg int ;_egeg error ;);_cgd :for (_gg /8)< len (_abf ){var _be bool ;_be ,_gg ,_egeg =_fec (_abf ,_gg );if _egeg !=nil {return nil ,_egeg ;};if _be {break ;};_be ,_gg =_fbg (_abf ,_gg );if !_be {if _abe .EndOfLine {return nil ,_ge ;};};var _df []byte ;_df ,_gg =_abe .decodeRow1D (_abf ,_gg );if _abe .EncodedByteAlign &&_gg %8!=0{_gg +=8-_gg %8;};if _df !=nil {_gcf =append (_gcf ,_df );};if _abe .Rows > 0&&!_abe .EndOfBlock &&len (_gcf )>=_abe .Rows {break ;};for _bdc :=1;_bdc < _abe .K &&(_gg /8)< len (_abf );_bdc ++{_be ,_gg =_eag (_abf ,_gg );if !_be {_be ,_gg ,_egeg =_fec (_abf ,_gg );if _egeg !=nil {return nil ,_egeg ;};if _be {break _cgd ;}else {if _abe .EndOfLine {return nil ,_ge ;};};};var (_ce code ;_ad bool ;);_dbc :=true ;var _afd []byte ;_gf :=-1;for _ce ,_gg ,_ad =_geb (_abf ,_gg );_ad ;_ce ,_gg ,_ad =_geb (_abf ,_gg ){switch _ce {case _ab :_afd ,_gf =_gab (_gcf ,_afd ,_dbc ,_gf );case _ga :_afd ,_gg ,_gf ,_egeg =_acdd (_abf ,_afd ,_gg ,_dbc ,_gf );if _egeg !=nil {return nil ,_egeg ;};case _gc :_afd ,_gf =_bff (_gcf ,_afd ,_dbc ,_gf ,0);_dbc =!_dbc ;case _c :_afd ,_gf =_bff (_gcf ,_afd ,_dbc ,_gf ,1);_dbc =!_dbc ;case _da :_afd ,_gf =_bff (_gcf ,_afd ,_dbc ,_gf ,2);_dbc =!_dbc ;case _gb :_afd ,_gf =_bff (_gcf ,_afd ,_dbc ,_gf ,3);_dbc =!_dbc ;case _bf :_afd ,_gf =_bff (_gcf ,_afd ,_dbc ,_gf ,-1);_dbc =!_dbc ;case _cg :_afd ,_gf =_bff (_gcf ,_afd ,_dbc ,_gf ,-2);_dbc =!_dbc ;case _ec :_afd ,_gf =_bff (_gcf ,_afd ,_dbc ,_gf ,-3);_dbc =!_dbc ;};if len (_afd )>=_abe .Columns {break ;};};if _abe .EncodedByteAlign &&_gg %8!=0{_gg +=8-_gg %8;};if _afd !=nil {_gcf =append (_gcf ,_afd );};if _abe .Rows > 0&&!_abe .EndOfBlock &&len (_gcf )>=_abe .Rows {break _cgd ;};};};return _gcf ,nil ;};var (_cgf byte =1;_gdd byte =0;);func _ecgd (_eaef int )([]byte ,int ){var _gdf []byte ;for _cfb :=0;_cfb < 2;_cfb ++{_gdf ,_eaef =_gfda (_gdf ,_eaef ,_ac );};return _gdf ,_eaef %8;};func _dba (_afgcg []byte ,_ddgb int )(uint16 ,int ,int ){_afee :=_ddgb ;_gbg :=_ddgb /8;_ddgb %=8;if _gbg >=len (_afgcg ){return 0,16,_afee ;};_eeb :=byte (0xFF>>uint (_ddgb ));_gga :=uint16 ((_afgcg [_gbg ]&_eeb )<<uint (_ddgb ))<<8;_dgc :=8-_ddgb ;_gbg ++;_ddgb =0;if _gbg >=len (_afgcg ){return _gga >>(16-uint (_dgc )),16-_dgc ,_afee +_dgc ;};_gga |=uint16 (_afgcg [_gbg ])<<(8-uint (_dgc ));_dgc +=8;_gbg ++;_ddgb =0;if _gbg >=len (_afgcg ){return _gga >>(16-uint (_dgc )),16-_dgc ,_afee +_dgc ;};if _dgc ==16{return _gga ,0,_afee +_dgc ;};_adc :=16-_dgc ;_gga |=uint16 (_afgcg [_gbg ]>>(8-uint (_adc )));return _gga ,0,_afee +16;};func _fce (_ded []byte ,_dfe bool ,_bfa int )[]byte {if _bfa < 0{return _ded ;};_ffb :=make ([]byte ,_bfa );if _dfe {for _cbf :=0;_cbf < len (_ffb );_cbf ++{_ffb [_cbf ]=_cgf ;};}else {for _bdea :=0;_bdea < len (_ffb );_bdea ++{_ffb [_bdea ]=_gdd ;};};_ded =append (_ded ,_ffb ...);return _ded ;};func _deg (_bce ,_ea []byte ,_bga int ,_fee bool )([]byte ,int ,error ){_fbae :=_bga ;var _gba int ;for _gba ,_bga =_dacf (_bce ,_bga ,_fee );_gba !=-1;_gba ,_bga =_dacf (_bce ,_bga ,_fee ){_ea =_fce (_ea ,_fee ,_gba );if _gba < 64{break ;};};if _gba ==-1{return _ea ,_fbae ,_af ;};return _ea ,_bga ,nil ;};func (_bece *Encoder )encodeG32D (_feb [][]byte )[]byte {var _adec []byte ;var _aac int ;for _gde :=0;_gde < len (_feb );_gde +=_bece .K {if _bece .Rows > 0&&!_bece .EndOfBlock &&_gde ==_bece .Rows {break ;};_fdacf ,_ddc :=_fgdb (_feb [_gde ],_aac ,_f );_adec =_bece .appendEncodedRow (_adec ,_fdacf ,_aac );if _bece .EncodedByteAlign {_ddc =0;};_aac =_ddc ;for _ffa :=_gde +1;_ffa < (_gde +_bece .K )&&_ffa < len (_feb );_ffa ++{if _bece .Rows > 0&&!_bece .EndOfBlock &&_ffa ==_bece .Rows {break ;};_dfac ,_aga :=_gfda (nil ,_aac ,_ae );var _dbad ,_fecb ,_dbb int ;_aag :=-1;for _aag < len (_feb [_ffa ]){_dbad =_gfg (_feb [_ffa ],_aag );_fecb =_cfa (_feb [_ffa ],_feb [_ffa -1],_aag );_dbb =_gfg (_feb [_ffa -1],_fecb );if _dbb < _dbad {_dfac ,_aga =_ca (_dfac ,_aga );_aag =_dbb ;}else {if _e .Abs (float64 (_fecb -_dbad ))> 3{_dfac ,_aga ,_aag =_bef (_feb [_ffa ],_dfac ,_aga ,_aag ,_dbad );}else {_dfac ,_aga =_ggeb (_dfac ,_aga ,_dbad ,_fecb );_aag =_dbad ;};};};_adec =_bece .appendEncodedRow (_adec ,_dfac ,_aac );if _bece .EncodedByteAlign {_aga =0;};_aac =_aga %8;};};if _bece .EndOfBlock {_bdca ,_ :=_gdg (_aac );_adec =_bece .appendEncodedRow (_adec ,_bdca ,_aac );};return _adec ;};func _gdg (_ega int )([]byte ,int ){var _ggd []byte ;for _feeg :=0;_feeg < 6;_feeg ++{_ggd ,_ega =_gfda (_ggd ,_ega ,_f );};return _ggd ,_ega %8;};func (_bcc *Encoder )appendEncodedRow (_adab ,_gaa []byte ,_fgaf int )[]byte {if len (_adab )> 0&&_fgaf !=0&&!_bcc .EncodedByteAlign {_adab [len (_adab )-1]=_adab [len (_adab )-1]|_gaa [0];_adab =append (_adab ,_gaa [1:]...);}else {_adab =append (_adab ,_gaa ...);};return _adab ;};