//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_c "errors";_cc "github.com/unidoc/unipdf/v3/internal/bitwise";_gb "io";_g "math";);func (_cbc *Encoder )encodeG32D (_gcf [][]byte )[]byte {var _bfba []byte ;var _fbga int ;for _bad :=0;_bad < len (_gcf );_bad +=_cbc .K {if _cbc .Rows > 0&&!_cbc .EndOfBlock &&_bad ==_cbc .Rows {break ;
};_aecf ,_bcb :=_fda (_gcf [_bad ],_fbga ,_fef );_bfba =_cbc .appendEncodedRow (_bfba ,_aecf ,_fbga );if _cbc .EncodedByteAlign {_bcb =0;};_fbga =_bcb ;for _ccf :=_bad +1;_ccf < (_bad +_cbc .K )&&_ccf < len (_gcf );_ccf ++{if _cbc .Rows > 0&&!_cbc .EndOfBlock &&_ccf ==_cbc .Rows {break ;
};_agg ,_bdfa :=_bfbaa (nil ,_fbga ,_fc );var _dfea ,_ebfc ,_ffd int ;_cac :=-1;for _cac < len (_gcf [_ccf ]){_dfea =_agc (_gcf [_ccf ],_cac );_ebfc =_dgg (_gcf [_ccf ],_gcf [_ccf -1],_cac );_ffd =_agc (_gcf [_ccf -1],_ebfc );if _ffd < _dfea {_agg ,_bdfa =_fbd (_agg ,_bdfa );
_cac =_ffd ;}else {if _g .Abs (float64 (_ebfc -_dfea ))> 3{_agg ,_bdfa ,_cac =_dff (_gcf [_ccf ],_agg ,_bdfa ,_cac ,_dfea );}else {_agg ,_bdfa =_gdc (_agg ,_bdfa ,_dfea ,_ebfc );_cac =_dfea ;};};};_bfba =_cbc .appendEncodedRow (_bfba ,_agg ,_fbga );if _cbc .EncodedByteAlign {_bdfa =0;
};_fbga =_bdfa %8;};};if _cbc .EndOfBlock {_fdbf ,_ :=_ffab (_fbga );_bfba =_cbc .appendEncodedRow (_bfba ,_fdbf ,_fbga );};return _bfba ;};func init (){_f =&treeNode {_efeb :true ,_fdcb :_ga };_d =&treeNode {_fdcb :_ccg ,_gcb :_f };_d ._eeed =_d ;_b =&tree {_cfb :&treeNode {}};
if _dg :=_b .fillWithNode (12,0,_d );_dg !=nil {panic (_dg .Error ());};if _fd :=_b .fillWithNode (12,1,_f );_fd !=nil {panic (_fd .Error ());};_e =&tree {_cfb :&treeNode {}};for _gf :=0;_gf < len (_eab );_gf ++{for _ec :=0;_ec < len (_eab [_gf ]);_ec ++{if _ge :=_e .fill (_gf +2,int (_eab [_gf ][_ec ]),int (_bf [_gf ][_ec ]));
_ge !=nil {panic (_ge .Error ());};};};if _ab :=_e .fillWithNode (12,0,_d );_ab !=nil {panic (_ab .Error ());};if _dc :=_e .fillWithNode (12,1,_f );_dc !=nil {panic (_dc .Error ());};_cd =&tree {_cfb :&treeNode {}};for _eg :=0;_eg < len (_gee );_eg ++{for _ecf :=0;
_ecf < len (_gee [_eg ]);_ecf ++{if _ba :=_cd .fill (_eg +4,int (_gee [_eg ][_ecf ]),int (_gg [_eg ][_ecf ]));_ba !=nil {panic (_ba .Error ());};};};if _gc :=_cd .fillWithNode (12,0,_d );_gc !=nil {panic (_gc .Error ());};if _cce :=_cd .fillWithNode (12,1,_f );
_cce !=nil {panic (_cce .Error ());};_cdf =&tree {_cfb :&treeNode {}};if _aae :=_cdf .fill (4,1,_gd );_aae !=nil {panic (_aae .Error ());};if _da :=_cdf .fill (3,1,_aa );_da !=nil {panic (_da .Error ());};if _eb :=_cdf .fill (1,1,0);_eb !=nil {panic (_eb .Error ());
};if _bc :=_cdf .fill (3,3,1);_bc !=nil {panic (_bc .Error ());};if _aab :=_cdf .fill (6,3,2);_aab !=nil {panic (_aab .Error ());};if _bd :=_cdf .fill (7,3,3);_bd !=nil {panic (_bd .Error ());};if _af :=_cdf .fill (3,2,-1);_af !=nil {panic (_af .Error ());
};if _ea :=_cdf .fill (6,2,-2);_ea !=nil {panic (_ea .Error ());};if _cf :=_cdf .fill (7,2,-3);_cf !=nil {panic (_cf .Error ());};};func _gca (_gcg int )([]byte ,int ){var _eca []byte ;for _ccfe :=0;_ccfe < 6;_ccfe ++{_eca ,_gcg =_bfbaa (_eca ,_gcg ,_bb );
};return _eca ,_gcg %8;};func (_dcde *Encoder )appendEncodedRow (_bfc ,_aeaa []byte ,_dbg int )[]byte {if len (_bfc )> 0&&_dbg !=0&&!_dcde .EncodedByteAlign {_bfc [len (_bfc )-1]=_bfc [len (_bfc )-1]|_aeaa [0];_bfc =append (_bfc ,_aeaa [1:]...);}else {_bfc =append (_bfc ,_aeaa ...);
};return _bfc ;};func (_afd *tree )fillWithNode (_gbae ,_cbd int ,_dfefe *treeNode )error {_bdeb :=_afd ._cfb ;for _efe :=0;_efe < _gbae ;_efe ++{_cfd :=uint (_gbae -1-_efe );_bfae :=((_cbd >>_cfd )&1)!=0;_eag :=_bdeb .walk (_bfae );if _eag !=nil {if _eag ._efeb {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_bdeb =_eag ;continue ;};if _efe ==_gbae -1{_eag =_dfefe ;}else {_eag =&treeNode {};};if _cbd ==0{_eag ._dggc =true ;};_bdeb .set (_bfae ,_eag );_bdeb =_eag ;};return nil ;};func (_aeff *Decoder )decode2D ()error {_aeff ._cceg =_aeff ._bag ;_aeff ._ccgb ,_aeff ._fa =_aeff ._fa ,_aeff ._ccgb ;
_ece :=true ;var (_fabf bool ;_bbc int ;_aee error ;);_aeff ._bag =0;_bgc :for _bbc < _aeff ._ega {_bdd :=_cdf ._cfb ;for {_fabf ,_aee =_aeff ._fce .ReadBool ();if _aee !=nil {return _aee ;};_bdd =_bdd .walk (_fabf );if _bdd ==nil {continue _bgc ;};if !_bdd ._efeb {continue ;
};switch _bdd ._fdcb {case _aa :var _cfg int ;if _ece {_cfg ,_aee =_aeff .decodeRun (_cd );}else {_cfg ,_aee =_aeff .decodeRun (_e );};if _aee !=nil {return _aee ;};_bbc +=_cfg ;_aeff ._ccgb [_aeff ._bag ]=_bbc ;_aeff ._bag ++;if _ece {_cfg ,_aee =_aeff .decodeRun (_e );
}else {_cfg ,_aee =_aeff .decodeRun (_cd );};if _aee !=nil {return _aee ;};_bbc +=_cfg ;_aeff ._ccgb [_aeff ._bag ]=_bbc ;_aeff ._bag ++;case _gd :_feg :=_aeff .getNextChangingElement (_bbc ,_ece )+1;if _feg >=_aeff ._cceg {_bbc =_aeff ._ega ;}else {_bbc =_aeff ._fa [_feg ];
};default:_bef :=_aeff .getNextChangingElement (_bbc ,_ece );if _bef >=_aeff ._cceg ||_bef ==-1{_bbc =_aeff ._ega +_bdd ._fdcb ;}else {_bbc =_aeff ._fa [_bef ]+_bdd ._fdcb ;};_aeff ._ccgb [_aeff ._bag ]=_bbc ;_aeff ._bag ++;_ece =!_ece ;};continue _bgc ;
};};return nil ;};var _bf =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_cbg *Decoder )decodeRun (_gef *tree )(int ,error ){var _baeg int ;_dca :=_gef ._cfb ;for {_eaf ,_eda :=_cbg ._fce .ReadBool ();if _eda !=nil {return 0,_eda ;};_dca =_dca .walk (_eaf );if _dca ==nil {return 0,_c .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _dca ._efeb {_baeg +=_dca ._fdcb ;switch {case _dca ._fdcb >=64:_dca =_gef ._cfb ;case _dca ._fdcb >=0:return _baeg ,nil ;default:return _cbg ._ega ,nil ;};};};};func init (){_ccb =make (map[int ]code );_ccb [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_ccb [1]=code {Code :2<<(5+8),BitsWritten :3};_ccb [2]=code {Code :3<<(6+8),BitsWritten :2};_ccb [3]=code {Code :2<<(6+8),BitsWritten :2};_ccb [4]=code {Code :3<<(5+8),BitsWritten :3};_ccb [5]=code {Code :3<<(4+8),BitsWritten :4};_ccb [6]=code {Code :2<<(4+8),BitsWritten :4};
_ccb [7]=code {Code :3<<(3+8),BitsWritten :5};_ccb [8]=code {Code :5<<(2+8),BitsWritten :6};_ccb [9]=code {Code :4<<(2+8),BitsWritten :6};_ccb [10]=code {Code :4<<(1+8),BitsWritten :7};_ccb [11]=code {Code :5<<(1+8),BitsWritten :7};_ccb [12]=code {Code :7<<(1+8),BitsWritten :7};
_ccb [13]=code {Code :4<<8,BitsWritten :8};_ccb [14]=code {Code :7<<8,BitsWritten :8};_ccb [15]=code {Code :12<<8,BitsWritten :9};_ccb [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ccb [17]=code {Code :6<<8,BitsWritten :10};_ccb [18]=code {Code :2<<8,BitsWritten :10};
_ccb [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ccb [20]=code {Code :13<<8,BitsWritten :11};_ccb [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ccb [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ccb [23]=code {Code :5<<8,BitsWritten :11};_ccb [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_ccb [25]=code {Code :3<<8,BitsWritten :11};_ccb [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ccb [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ccb [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ccb [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ccb [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_ccb [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ccb [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ccb [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ccb [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ccb [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ccb [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_ccb [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ccb [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ccb [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ccb [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ccb [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ccb [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_ccb [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ccb [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ccb [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ccb [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ccb [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ccb [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_ccb [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ccb [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ccb [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ccb [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ccb [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ccb [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_ccb [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ccb [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ccb [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ccb [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ccb [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ccb [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_ccb [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ccb [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ccb [63]=code {Code :6<<8|7<<4,BitsWritten :12};_fdf =make (map[int ]code );_fdf [0]=code {Code :53<<8,BitsWritten :8};_fdf [1]=code {Code :7<<(2+8),BitsWritten :6};
_fdf [2]=code {Code :7<<(4+8),BitsWritten :4};_fdf [3]=code {Code :8<<(4+8),BitsWritten :4};_fdf [4]=code {Code :11<<(4+8),BitsWritten :4};_fdf [5]=code {Code :12<<(4+8),BitsWritten :4};_fdf [6]=code {Code :14<<(4+8),BitsWritten :4};_fdf [7]=code {Code :15<<(4+8),BitsWritten :4};
_fdf [8]=code {Code :19<<(3+8),BitsWritten :5};_fdf [9]=code {Code :20<<(3+8),BitsWritten :5};_fdf [10]=code {Code :7<<(3+8),BitsWritten :5};_fdf [11]=code {Code :8<<(3+8),BitsWritten :5};_fdf [12]=code {Code :8<<(2+8),BitsWritten :6};_fdf [13]=code {Code :3<<(2+8),BitsWritten :6};
_fdf [14]=code {Code :52<<(2+8),BitsWritten :6};_fdf [15]=code {Code :53<<(2+8),BitsWritten :6};_fdf [16]=code {Code :42<<(2+8),BitsWritten :6};_fdf [17]=code {Code :43<<(2+8),BitsWritten :6};_fdf [18]=code {Code :39<<(1+8),BitsWritten :7};_fdf [19]=code {Code :12<<(1+8),BitsWritten :7};
_fdf [20]=code {Code :8<<(1+8),BitsWritten :7};_fdf [21]=code {Code :23<<(1+8),BitsWritten :7};_fdf [22]=code {Code :3<<(1+8),BitsWritten :7};_fdf [23]=code {Code :4<<(1+8),BitsWritten :7};_fdf [24]=code {Code :40<<(1+8),BitsWritten :7};_fdf [25]=code {Code :43<<(1+8),BitsWritten :7};
_fdf [26]=code {Code :19<<(1+8),BitsWritten :7};_fdf [27]=code {Code :36<<(1+8),BitsWritten :7};_fdf [28]=code {Code :24<<(1+8),BitsWritten :7};_fdf [29]=code {Code :2<<8,BitsWritten :8};_fdf [30]=code {Code :3<<8,BitsWritten :8};_fdf [31]=code {Code :26<<8,BitsWritten :8};
_fdf [32]=code {Code :27<<8,BitsWritten :8};_fdf [33]=code {Code :18<<8,BitsWritten :8};_fdf [34]=code {Code :19<<8,BitsWritten :8};_fdf [35]=code {Code :20<<8,BitsWritten :8};_fdf [36]=code {Code :21<<8,BitsWritten :8};_fdf [37]=code {Code :22<<8,BitsWritten :8};
_fdf [38]=code {Code :23<<8,BitsWritten :8};_fdf [39]=code {Code :40<<8,BitsWritten :8};_fdf [40]=code {Code :41<<8,BitsWritten :8};_fdf [41]=code {Code :42<<8,BitsWritten :8};_fdf [42]=code {Code :43<<8,BitsWritten :8};_fdf [43]=code {Code :44<<8,BitsWritten :8};
_fdf [44]=code {Code :45<<8,BitsWritten :8};_fdf [45]=code {Code :4<<8,BitsWritten :8};_fdf [46]=code {Code :5<<8,BitsWritten :8};_fdf [47]=code {Code :10<<8,BitsWritten :8};_fdf [48]=code {Code :11<<8,BitsWritten :8};_fdf [49]=code {Code :82<<8,BitsWritten :8};
_fdf [50]=code {Code :83<<8,BitsWritten :8};_fdf [51]=code {Code :84<<8,BitsWritten :8};_fdf [52]=code {Code :85<<8,BitsWritten :8};_fdf [53]=code {Code :36<<8,BitsWritten :8};_fdf [54]=code {Code :37<<8,BitsWritten :8};_fdf [55]=code {Code :88<<8,BitsWritten :8};
_fdf [56]=code {Code :89<<8,BitsWritten :8};_fdf [57]=code {Code :90<<8,BitsWritten :8};_fdf [58]=code {Code :91<<8,BitsWritten :8};_fdf [59]=code {Code :74<<8,BitsWritten :8};_fdf [60]=code {Code :75<<8,BitsWritten :8};_fdf [61]=code {Code :50<<8,BitsWritten :8};
_fdf [62]=code {Code :51<<8,BitsWritten :8};_fdf [63]=code {Code :52<<8,BitsWritten :8};_ac =make (map[int ]code );_ac [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ac [128]=code {Code :12<<8|8<<4,BitsWritten :12};_ac [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_ac [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ac [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ac [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ac [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ac [512]=code {Code :3<<8|12<<3,BitsWritten :13};_ac [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_ac [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ac [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ac [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ac [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ac [896]=code {Code :3<<8|18<<3,BitsWritten :13};_ac [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_ac [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ac [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ac [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ac [1216]=code {Code :119<<3,BitsWritten :13};_ac [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_ac [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_ac [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ac [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ac [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ac [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_ac [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_ac [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_dgb =make (map[int ]code );_dgb [64]=code {Code :27<<(3+8),BitsWritten :5};_dgb [128]=code {Code :18<<(3+8),BitsWritten :5};_dgb [192]=code {Code :23<<(2+8),BitsWritten :6};_dgb [256]=code {Code :55<<(1+8),BitsWritten :7};
_dgb [320]=code {Code :54<<8,BitsWritten :8};_dgb [384]=code {Code :55<<8,BitsWritten :8};_dgb [448]=code {Code :100<<8,BitsWritten :8};_dgb [512]=code {Code :101<<8,BitsWritten :8};_dgb [576]=code {Code :104<<8,BitsWritten :8};_dgb [640]=code {Code :103<<8,BitsWritten :8};
_dgb [704]=code {Code :102<<8,BitsWritten :9};_dgb [768]=code {Code :102<<8|1<<7,BitsWritten :9};_dgb [832]=code {Code :105<<8,BitsWritten :9};_dgb [896]=code {Code :105<<8|1<<7,BitsWritten :9};_dgb [960]=code {Code :106<<8,BitsWritten :9};_dgb [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_dgb [1088]=code {Code :107<<8,BitsWritten :9};_dgb [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_dgb [1216]=code {Code :108<<8,BitsWritten :9};_dgb [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_dgb [1344]=code {Code :109<<8,BitsWritten :9};_dgb [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_dgb [1472]=code {Code :76<<8,BitsWritten :9};_dgb [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_dgb [1600]=code {Code :77<<8,BitsWritten :9};_dgb [1664]=code {Code :24<<(2+8),BitsWritten :6};_dgb [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_gac =make (map[int ]code );
_gac [1792]=code {Code :1<<8,BitsWritten :11};_gac [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_gac [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_gac [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_gac [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_gac [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_gac [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_gac [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_gac [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_gac [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_gac [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_gac [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_gac [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_fe =make (map[int ]byte );_fe [0]=0xFF;_fe [1]=0xFE;_fe [2]=0xFC;_fe [3]=0xF8;_fe [4]=0xF0;_fe [5]=0xE0;_fe [6]=0xC0;_fe [7]=0x80;_fe [8]=0x00;};var (_ef =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");
_fdc =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064"););type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;
DamagedRowsBeforeError int ;};func (_baa *treeNode )walk (_gdf bool )*treeNode {if _gdf {return _baa ._gcb ;};return _baa ._eeed ;};func _fbe (_edc []byte ,_fcfg int ,_bec int ,_cafd bool )([]byte ,int ){var (_cfec code ;_bgb bool ;);for !_bgb {_cfec ,_bec ,_bgb =_fcg (_bec ,_cafd );
_edc ,_fcfg =_bfbaa (_edc ,_fcfg ,_cfec );};return _edc ,_fcfg ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_cge *Decoder )decodeRowType2 ()error {if _cge ._bee {_cge ._fce .Align ();
};if _afb :=_cge .decode1D ();_afb !=nil {return _afb ;};return nil ;};func _dgd (_gcd int )([]byte ,int ){var _cga []byte ;for _bdde :=0;_bdde < 2;_bdde ++{_cga ,_gcd =_bfbaa (_cga ,_gcd ,_bb );};return _cga ,_gcd %8;};func (_gaa *Decoder )decodeG32D ()error {_gaa ._cceg =_gaa ._bag ;
_gaa ._ccgb ,_gaa ._fa =_gaa ._fa ,_gaa ._ccgb ;_ada :=true ;var (_acd bool ;_cdg int ;_bcg error ;);_gaa ._bag =0;_gbac :for _cdg < _gaa ._ega {_caf :=_cdf ._cfb ;for {_acd ,_bcg =_gaa ._fce .ReadBool ();if _bcg !=nil {return _bcg ;};_caf =_caf .walk (_acd );
if _caf ==nil {continue _gbac ;};if !_caf ._efeb {continue ;};switch _caf ._fdcb {case _aa :var _fgg int ;if _ada {_fgg ,_bcg =_gaa .decodeRun (_cd );}else {_fgg ,_bcg =_gaa .decodeRun (_e );};if _bcg !=nil {return _bcg ;};_cdg +=_fgg ;_gaa ._ccgb [_gaa ._bag ]=_cdg ;
_gaa ._bag ++;if _ada {_fgg ,_bcg =_gaa .decodeRun (_e );}else {_fgg ,_bcg =_gaa .decodeRun (_cd );};if _bcg !=nil {return _bcg ;};_cdg +=_fgg ;_gaa ._ccgb [_gaa ._bag ]=_cdg ;_gaa ._bag ++;case _gd :_fab :=_gaa .getNextChangingElement (_cdg ,_ada )+1;
if _fab >=_gaa ._cceg {_cdg =_gaa ._ega ;}else {_cdg =_gaa ._fa [_fab ];};default:_gga :=_gaa .getNextChangingElement (_cdg ,_ada );if _gga >=_gaa ._cceg ||_gga ==-1{_cdg =_gaa ._ega +_caf ._fdcb ;}else {_cdg =_gaa ._fa [_gga ]+_caf ._fdcb ;};_gaa ._ccgb [_gaa ._bag ]=_cdg ;
_gaa ._bag ++;_ada =!_ada ;};continue _gbac ;};};return nil ;};type tree struct{_cfb *treeNode };func (_fcb *Decoder )tryFetchRTC2D ()(_fgd error ){_fcb ._fce .Mark ();var _dcc bool ;for _cec :=0;_cec < 5;_cec ++{_dcc ,_fgd =_fcb .tryFetchEOL1 ();if _fgd !=nil {if _c .Is (_fgd ,_gb .EOF ){if _cec ==0{break ;
};return _ef ;};};if _dcc {continue ;};if _cec > 0{return _ef ;};break ;};if _dcc {return _gb .EOF ;};_fcb ._fce .Reset ();return _fgd ;};func (_aefc *Encoder )encodeG4 (_aaa [][]byte )[]byte {_aebe :=make ([][]byte ,len (_aaa ));copy (_aebe ,_aaa );_aebe =_gbg (_aebe );
var _dcdf []byte ;var _daaf int ;for _acg :=1;_acg < len (_aebe );_acg ++{if _aefc .Rows > 0&&!_aefc .EndOfBlock &&_acg ==(_aefc .Rows +1){break ;};var _dec []byte ;var _eceb ,_ddeb ,_bgg int ;_dgac :=_daaf ;_ffa :=-1;for _ffa < len (_aebe [_acg ]){_eceb =_agc (_aebe [_acg ],_ffa );
_ddeb =_dgg (_aebe [_acg ],_aebe [_acg -1],_ffa );_bgg =_agc (_aebe [_acg -1],_ddeb );if _bgg < _eceb {_dec ,_dgac =_bfbaa (_dec ,_dgac ,_cg );_ffa =_bgg ;}else {if _g .Abs (float64 (_ddeb -_eceb ))> 3{_dec ,_dgac ,_ffa =_dff (_aebe [_acg ],_dec ,_dgac ,_ffa ,_eceb );
}else {_dec ,_dgac =_gdc (_dec ,_dgac ,_eceb ,_ddeb );_ffa =_eceb ;};};};_dcdf =_aefc .appendEncodedRow (_dcdf ,_dec ,_daaf );if _aefc .EncodedByteAlign {_dgac =0;};_daaf =_dgac %8;};if _aefc .EndOfBlock {_eba ,_ :=_dgd (_daaf );_dcdf =_aefc .appendEncodedRow (_dcdf ,_eba ,_daaf );
};return _dcdf ;};func (_ggff *tree )fill (_cfgg ,_fbb ,_acgff int )error {_dfbb :=_ggff ._cfb ;for _gfb :=0;_gfb < _cfgg ;_gfb ++{_aad :=_cfgg -1-_gfb ;_gged :=((_fbb >>uint (_aad ))&1)!=0;_dccb :=_dfbb .walk (_gged );if _dccb !=nil {if _dccb ._efeb {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_dfbb =_dccb ;continue ;};_dccb =&treeNode {};if _gfb ==_cfgg -1{_dccb ._fdcb =_acgff ;_dccb ._efeb =true ;};if _fbb ==0{_dccb ._dggc =true ;};_dfbb .set (_gged ,_dccb );_dfbb =_dccb ;};return nil ;};func (_dcf *Encoder )encodeG31D (_faf [][]byte )[]byte {var _fcf []byte ;
_gae :=0;for _dcga :=range _faf {if _dcf .Rows > 0&&!_dcf .EndOfBlock &&_dcga ==_dcf .Rows {break ;};_afa ,_aefb :=_fda (_faf [_dcga ],_gae ,_bb );_fcf =_dcf .appendEncodedRow (_fcf ,_afa ,_gae );if _dcf .EncodedByteAlign {_aefb =0;};_gae =_aefb ;};if _dcf .EndOfBlock {_aagb ,_ :=_gca (_gae );
_fcf =_dcf .appendEncodedRow (_fcf ,_aagb ,_gae );};return _fcf ;};var _eab =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func _dgg (_ebcb ,_afcf []byte ,_dgf int )int {_afcg :=_agc (_afcf ,_dgf );if _afcg < len (_afcf )&&(_dgf ==-1&&_afcf [_afcg ]==_dga ||_dgf >=0&&_dgf < len (_ebcb )&&_ebcb [_dgf ]==_afcf [_afcg ]||_dgf >=len (_ebcb )&&_ebcb [_dgf -1]!=_afcf [_afcg ]){_afcg =_agc (_afcf ,_afcg );
};return _afcg ;};var (_ccb map[int ]code ;_fdf map[int ]code ;_ac map[int ]code ;_dgb map[int ]code ;_gac map[int ]code ;_fe map[int ]byte ;_bb =code {Code :1<<4,BitsWritten :12};_fef =code {Code :3<<3,BitsWritten :13};_fc =code {Code :2<<3,BitsWritten :13};
_cg =code {Code :1<<12,BitsWritten :4};_bba =code {Code :1<<13,BitsWritten :3};_gcc =code {Code :1<<15,BitsWritten :1};_fg =code {Code :3<<13,BitsWritten :3};_abe =code {Code :3<<10,BitsWritten :6};_ae =code {Code :3<<9,BitsWritten :7};_ege =code {Code :2<<13,BitsWritten :3};
_ecfg =code {Code :2<<10,BitsWritten :6};_bdb =code {Code :2<<9,BitsWritten :7};);func (_gea *Decoder )getNextChangingElement (_dcd int ,_def bool )int {_dfcd :=0;if !_def {_dfcd =1;};_aaef :=int (uint32 (_gea ._fgf )&0xFFFFFFFE)+_dfcd ;if _aaef > 2{_aaef -=2;
};if _dcd ==0{return _aaef ;};for _dde :=_aaef ;_dde < _gea ._cceg ;_dde +=2{if _dcd < _gea ._fa [_dde ]{_gea ._fgf =_dde ;return _dde ;};};return -1;};func _bfbaa (_fggb []byte ,_fgcg int ,_gaad code )([]byte ,int ){_ggd :=0;for _ggd < _gaad .BitsWritten {_gaf :=_fgcg /8;
_afbb :=_fgcg %8;if _gaf >=len (_fggb ){_fggb =append (_fggb ,0);};_gcgg :=8-_afbb ;_fac :=_gaad .BitsWritten -_ggd ;if _gcgg > _fac {_gcgg =_fac ;};if _ggd < 8{_fggb [_gaf ]=_fggb [_gaf ]|byte (_gaad .Code >>uint (8+_afbb -_ggd ))&_fe [8-_gcgg -_afbb ];
}else {_fggb [_gaf ]=_fggb [_gaf ]|(byte (_gaad .Code <<uint (_ggd -8))&_fe [8-_gcgg ])>>uint (_afbb );};_fgcg +=_gcgg ;_ggd +=_gcgg ;};return _fggb ,_fgcg ;};func (_fge tiffType )String ()string {switch _fge {case _fdb :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _ca :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _fea :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};var _gg =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func (_aage *Decoder )looseFetchEOL ()(bool ,error ){_ce ,_aegf :=_aage ._fce .ReadBits (12);if _aegf !=nil {return false ,_aegf ;};switch _ce {case 0x1:return true ,nil ;case 0x0:for {_bcf ,_gff :=_aage ._fce .ReadBool ();if _gff !=nil {return false ,_gff ;
};if _bcf {return true ,nil ;};};default:return false ,nil ;};};func _agc (_fba []byte ,_afc int )int {if _afc >=len (_fba ){return _afc ;};if _afc < -1{_afc =-1;};var _bfag byte ;if _afc > -1{_bfag =_fba [_afc ];}else {_bfag =_dga ;};_eee :=_afc +1;for _eee < len (_fba ){if _fba [_eee ]!=_bfag {break ;
};_eee ++;};return _eee ;};type treeNode struct{_eeed *treeNode ;_gcb *treeNode ;_fdcb int ;_dggc bool ;_efeb bool ;};func _fbd (_geab []byte ,_fcgg int )([]byte ,int ){return _bfbaa (_geab ,_fcgg ,_cg )};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_ebf :=&Decoder {_fce :_cc .NewReader (data ),_ega :options .Columns ,_de :options .Rows ,_ff :options .DamagedRowsBeforeError ,_ad :make ([]byte ,(options .Columns +7)/8),_fa :make ([]int ,options .Columns +2),_ccgb :make ([]int ,options .Columns +2),_bee :options .EncodedByteAligned ,_bg :options .BlackIsOne ,_dcg :options .EndOfLine ,_ebg :options .EndOfBlock };
switch {case options .K ==0:_ebf ._cfe =_ca ;if len (data )< 20{return nil ,_c .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_eed :=data [:20];if _eed [0]!=0||(_eed [1]>>4!=1&&_eed [1]!=1){_ebf ._cfe =_fdb ;
_dee :=(uint16 (_eed [0])<<8+uint16 (_eed [1]&0xff))>>4;for _aag :=12;_aag < 160;_aag ++{_dee =(_dee <<1)+uint16 ((_eed [_aag /8]>>uint16 (7-(_aag %8)))&0x01);if _dee &0xfff==1{_ebf ._cfe =_ca ;break ;};};};case options .K < 0:_ebf ._cfe =_fea ;case options .K > 0:_ebf ._cfe =_ca ;
_ebf ._ecg =true ;};switch _ebf ._cfe {case _fdb ,_ca ,_fea :default:return nil ,_c .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _ebf ,nil ;};func _dff (_ggfe ,_fec []byte ,_edg ,_dffg ,_gcca int )([]byte ,int ,int ){_cba :=_agc (_ggfe ,_gcca );_fee :=_dffg >=0&&_ggfe [_dffg ]==_dga ||_dffg ==-1;_fec ,_edg =_bfbaa (_fec ,_edg ,_bba );var _eacfb int ;if _dffg > -1{_eacfb =_gcca -_dffg ;
}else {_eacfb =_gcca -_dffg -1;};_fec ,_edg =_fbe (_fec ,_edg ,_eacfb ,_fee );_fee =!_fee ;_cefd :=_cba -_gcca ;_fec ,_edg =_fbe (_fec ,_edg ,_cefd ,_fee );_dffg =_cba ;return _fec ,_edg ,_dffg ;};type tiffType int ;const (_ tiffType =iota ;_fdb ;_ca ;
_fea ;);func _gbg (_fabb [][]byte )[][]byte {_bgdb :=make ([]byte ,len (_fabb [0]));for _bfbad :=range _bgdb {_bgdb [_bfbad ]=_dga ;};_fabb =append (_fabb ,[]byte {});for _feaa :=len (_fabb )-1;_feaa > 0;_feaa --{_fabb [_feaa ]=_fabb [_feaa -1];};_fabb [0]=_bgdb ;
return _fabb ;};func _gdc (_bgac []byte ,_bbcg ,_fggc ,_ebgd int )([]byte ,int ){_bcgb :=_dfd (_fggc ,_ebgd );_bgac ,_bbcg =_bfbaa (_bgac ,_bbcg ,_bcgb );return _bgac ,_bbcg ;};func (_dfe *Decoder )tryFetchEOL ()(bool ,error ){_ddg ,_dfa :=_dfe ._fce .ReadBits (12);
if _dfa !=nil {return false ,_dfa ;};return _ddg ==0x1,nil ;};var _gee =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
type Decoder struct{_ega int ;_de int ;_db int ;_ad []byte ;_ff int ;_ecg bool ;_cb bool ;_dea bool ;_bg bool ;_dcg bool ;_ebg bool ;_bee bool ;_ee int ;_aef int ;_fa []int ;_ccgb []int ;_cceg int ;_bag int ;_bfb int ;_fgf int ;_fce *_cc .Reader ;_cfe tiffType ;
_edf error ;};func (_bed *Decoder )Read (in []byte )(int ,error ){if _bed ._edf !=nil {return 0,_bed ._edf ;};_egf :=len (in );var (_aeg int ;_aed int ;);for _egf !=0{if _bed ._aef >=_bed ._ee {if _gba :=_bed .fetch ();_gba !=nil {_bed ._edf =_gba ;return 0,_gba ;
};};if _bed ._ee ==-1{return _aeg ,_gb .EOF ;};switch {case _egf <=_bed ._ee -_bed ._aef :_dab :=_bed ._ad [_bed ._aef :_bed ._aef +_egf ];for _ ,_df :=range _dab {if !_bed ._bg {_df =^_df ;};in [_aed ]=_df ;_aed ++;};_aeg +=len (_dab );_bed ._aef +=len (_dab );
return _aeg ,nil ;default:_egd :=_bed ._ad [_bed ._aef :];for _ ,_edd :=range _egd {if !_bed ._bg {_edd =^_edd ;};in [_aed ]=_edd ;_aed ++;};_aeg +=len (_egd );_bed ._aef +=len (_egd );_egf -=len (_egd );};};return _aeg ,nil ;};func (_gacf *Decoder )tryFetchEOL1 ()(bool ,error ){_ceg ,_fgc :=_gacf ._fce .ReadBits (13);
if _fgc !=nil {return false ,_fgc ;};return _ceg ==0x3,nil ;};func (_abg *Decoder )decoderRowType41D ()error {if _abg ._bee {_abg ._fce .Align ();};_abg ._fce .Mark ();var (_dba bool ;_bdf error ;);if _abg ._dcg {_dba ,_bdf =_abg .tryFetchEOL ();if _bdf !=nil {return _bdf ;
};if !_dba {return _fdc ;};}else {_dba ,_bdf =_abg .looseFetchEOL ();if _bdf !=nil {return _bdf ;};};if !_dba {_abg ._fce .Reset ();};if _dba &&_abg ._ebg {_abg ._fce .Mark ();for _daa :=0;_daa < 5;_daa ++{_dba ,_bdf =_abg .tryFetchEOL ();if _bdf !=nil {if _c .Is (_bdf ,_gb .EOF ){if _daa ==0{break ;
};return _ef ;};};if _dba {continue ;};if _daa > 0{return _ef ;};break ;};if _dba {return _gb .EOF ;};_abg ._fce .Reset ();};if _bdf =_abg .decode1D ();_bdf !=nil {return _bdf ;};return nil ;};func (_aec *Decoder )decodeRowType4 ()error {if !_aec ._ecg {return _aec .decoderRowType41D ();
};if _aec ._bee {_aec ._fce .Align ();};_aec ._fce .Mark ();_dfb ,_egdd :=_aec .tryFetchEOL ();if _egdd !=nil {return _egdd ;};if !_dfb &&_aec ._dcg {_aec ._bfb ++;if _aec ._bfb > _aec ._ff {return _fdc ;};_aec ._fce .Reset ();};if !_dfb {_aec ._fce .Reset ();
};_bgdg ,_egdd :=_aec ._fce .ReadBool ();if _egdd !=nil {return _egdd ;};if _bgdg {if _dfb &&_aec ._ebg {if _egdd =_aec .tryFetchRTC2D ();_egdd !=nil {return _egdd ;};};_egdd =_aec .decode1D ();}else {_egdd =_aec .decode2D ();};if _egdd !=nil {return _egdd ;
};return nil ;};func _ffab (_gbf int )([]byte ,int ){var _deb []byte ;for _caa :=0;_caa < 6;_caa ++{_deb ,_gbf =_bfbaa (_deb ,_gbf ,_fef );};return _deb ,_gbf %8;};func (_bab *Decoder )fetch ()error {if _bab ._ee ==-1{return nil ;};if _bab ._aef < _bab ._ee {return nil ;
};_bab ._ee =0;_dbd :=_bab .decodeRow ();if _dbd !=nil {if !_c .Is (_dbd ,_gb .EOF ){return _dbd ;};if _bab ._ee !=0{return _dbd ;};_bab ._ee =-1;};_bab ._aef =0;return nil ;};func _fda (_abc []byte ,_cbe int ,_dcda code )([]byte ,int ){_bde :=true ;var _bga []byte ;
_bga ,_cbe =_bfbaa (nil ,_cbe ,_dcda );_aac :=0;var _bca int ;for _aac < len (_abc ){_bca ,_aac =_gcff (_abc ,_bde ,_aac );_bga ,_cbe =_fbe (_bga ,_cbe ,_bca ,_bde );_bde =!_bde ;};return _bga ,_cbe %8;};func (_fb *Decoder )decodeRowType6 ()error {if _fb ._bee {_fb ._fce .Align ();
};if _fb ._ebg {_fb ._fce .Mark ();_ebge ,_bae :=_fb .tryFetchEOL ();if _bae !=nil {return _bae ;};if _ebge {_ebge ,_bae =_fb .tryFetchEOL ();if _bae !=nil {return _bae ;};if _ebge {return _gb .EOF ;};};_fb ._fce .Reset ();};return _fb .decode2D ();};func _gcff (_ddee []byte ,_egab bool ,_ccge int )(int ,int ){_ggfg :=0;
for _ccge < len (_ddee ){if _egab {if _ddee [_ccge ]!=_dga {break ;};}else {if _ddee [_ccge ]!=_bfa {break ;};};_ggfg ++;_ccge ++;};return _ggfg ,_ccge ;};func _dfd (_bgag ,_acgf int )code {var _bdef code ;switch _acgf -_bgag {case -1:_bdef =_fg ;case -2:_bdef =_abe ;
case -3:_bdef =_ae ;case 0:_bdef =_gcc ;case 1:_bdef =_ege ;case 2:_bdef =_ecfg ;case 3:_bdef =_bdb ;};return _bdef ;};var (_dga byte =1;_bfa byte =0;);type code struct{Code uint16 ;BitsWritten int ;};var (_f *treeNode ;_d *treeNode ;_e *tree ;_cd *tree ;
_b *tree ;_cdf *tree ;_ga =-2000;_ccg =-1000;_gd =-3000;_aa =-4000;);func _fcg (_cea int ,_dfef bool )(code ,int ,bool ){if _cea < 64{if _dfef {return _fdf [_cea ],0,true ;};return _ccb [_cea ],0,true ;};_eacf :=_cea /64;if _eacf > 40{return _gac [2560],_cea -2560,false ;
};if _eacf > 27{return _gac [_eacf *64],_cea -_eacf *64,false ;};if _dfef {return _dgb [_eacf *64],_cea -_eacf *64,false ;};return _ac [_eacf *64],_cea -_eacf *64,false ;};func (_ffda *treeNode )set (_dffgc bool ,_ced *treeNode ){if !_dffgc {_ffda ._eeed =_ced ;
}else {_ffda ._gcb =_ced ;};};func (_ag *Encoder )Encode (pixels [][]byte )[]byte {if _ag .BlackIs1 {_dga =0;_bfa =1;}else {_dga =1;_bfa =0;};if _ag .K ==0{return _ag .encodeG31D (pixels );};if _ag .K > 0{return _ag .encodeG32D (pixels );};if _ag .K < 0{return _ag .encodeG4 (pixels );
};return nil ;};func (_dbe *Decoder )decode1D ()error {var (_ggf int ;_gbd error ;);_fbg :=true ;_dbe ._bag =0;for {var _dd int ;if _fbg {_dd ,_gbd =_dbe .decodeRun (_cd );}else {_dd ,_gbd =_dbe .decodeRun (_e );};if _gbd !=nil {return _gbd ;};_ggf +=_dd ;
_dbe ._ccgb [_dbe ._bag ]=_ggf ;_dbe ._bag ++;_fbg =!_fbg ;if _ggf >=_dbe ._ega {break ;};};return nil ;};func _cef (_fcfd ,_aaga []byte ,_fabe int ,_aaaf bool )int {_fcfe :=_agc (_aaga ,_fabe );if _fcfe < len (_aaga )&&(_fabe ==-1&&_aaga [_fcfe ]==_dga ||_fabe >=0&&_fabe < len (_fcfd )&&_fcfd [_fabe ]==_aaga [_fcfe ]||_fabe >=len (_fcfd )&&_aaaf &&_aaga [_fcfe ]==_dga ||_fabe >=len (_fcfd )&&!_aaaf &&_aaga [_fcfe ]==_bfa ){_fcfe =_agc (_aaga ,_fcfe );
};return _fcfe ;};func (_gge *Decoder )decodeRow ()(_ccgd error ){if !_gge ._ebg &&_gge ._de > 0&&_gge ._de ==_gge ._db {return _gb .EOF ;};switch _gge ._cfe {case _fdb :_ccgd =_gge .decodeRowType2 ();case _ca :_ccgd =_gge .decodeRowType4 ();case _fea :_ccgd =_gge .decodeRowType6 ();
};if _ccgd !=nil {return _ccgd ;};_dfc :=0;_eac :=true ;_gge ._fgf =0;for _abf :=0;_abf < _gge ._bag ;_abf ++{_cae :=_gge ._ega ;if _abf !=_gge ._bag {_cae =_gge ._ccgb [_abf ];};if _cae > _gge ._ega {_cae =_gge ._ega ;};_aea :=_dfc /8;for _dfc %8!=0&&_cae -_dfc > 0{var _ebc byte ;
if !_eac {_ebc =1<<uint (7-(_dfc %8));};_gge ._ad [_aea ]|=_ebc ;_dfc ++;};if _dfc %8==0{_aea =_dfc /8;var _ccd byte ;if !_eac {_ccd =0xff;};for _cae -_dfc > 7{_gge ._ad [_aea ]=_ccd ;_dfc +=8;_aea ++;};};for _cae -_dfc > 0{if _dfc %8==0{_gge ._ad [_aea ]=0;
};var _adg byte ;if !_eac {_adg =1<<uint (7-(_dfc %8));};_gge ._ad [_aea ]|=_adg ;_dfc ++;};_eac =!_eac ;};if _dfc !=_gge ._ega {return _c .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_gge ._ee =(_dfc +7)/8;_gge ._db ++;return nil ;};