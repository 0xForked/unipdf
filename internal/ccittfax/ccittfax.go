//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_c "errors";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_d "io";_aa "math";);func (_gfg *Decoder )tryFetchRTC2D ()(_gbb error ){_gfg ._aga .Mark ();var _aaa bool ;for _eag :=0;_eag < 5;_eag ++{_aaa ,_gbb =_gfg .tryFetchEOL1 ();
if _gbb !=nil {if _c .Is (_gbb ,_d .EOF ){if _eag ==0{break ;};return _eg ;};};if _aaa {continue ;};if _eag > 0{return _eg ;};break ;};if _aaa {return _d .EOF ;};_gfg ._aga .Reset ();return _gbb ;};func init (){_ac =&treeNode {_abbfe :true ,_gcd :_dg };
_ca =&treeNode {_gcd :_adb ,_cebf :_ac };_ca ._geab =_ca ;_g =&tree {_acb :&treeNode {}};if _ada :=_g .fillWithNode (12,0,_ca );_ada !=nil {panic (_ada .Error ());};if _gb :=_g .fillWithNode (12,1,_ac );_gb !=nil {panic (_gb .Error ());};_ad =&tree {_acb :&treeNode {}};
for _ge :=0;_ge < len (_ccb );_ge ++{for _gf :=0;_gf < len (_ccb [_ge ]);_gf ++{if _cd :=_ad .fill (_ge +2,int (_ccb [_ge ][_gf ]),int (_bg [_ge ][_gf ]));_cd !=nil {panic (_cd .Error ());};};};if _gbe :=_ad .fillWithNode (12,0,_ca );_gbe !=nil {panic (_gbe .Error ());
};if _ef :=_ad .fillWithNode (12,1,_ac );_ef !=nil {panic (_ef .Error ());};_be =&tree {_acb :&treeNode {}};for _dd :=0;_dd < len (_gc );_dd ++{for _df :=0;_df < len (_gc [_dd ]);_df ++{if _af :=_be .fill (_dd +4,int (_gc [_dd ][_df ]),int (_ab [_dd ][_df ]));
_af !=nil {panic (_af .Error ());};};};if _efc :=_be .fillWithNode (12,0,_ca );_efc !=nil {panic (_efc .Error ());};if _fg :=_be .fillWithNode (12,1,_ac );_fg !=nil {panic (_fg .Error ());};_db =&tree {_acb :&treeNode {}};if _eff :=_db .fill (4,1,_f );
_eff !=nil {panic (_eff .Error ());};if _cdc :=_db .fill (3,1,_e );_cdc !=nil {panic (_cdc .Error ());};if _gd :=_db .fill (1,1,0);_gd !=nil {panic (_gd .Error ());};if _gbc :=_db .fill (3,3,1);_gbc !=nil {panic (_gbc .Error ());};if _fd :=_db .fill (6,3,2);
_fd !=nil {panic (_fd .Error ());};if _dbc :=_db .fill (7,3,3);_dbc !=nil {panic (_dbc .Error ());};if _ed :=_db .fill (3,2,-1);_ed !=nil {panic (_ed .Error ());};if _bb :=_db .fill (6,2,-2);_bb !=nil {panic (_bb .Error ());};if _dba :=_db .fill (7,2,-3);
_dba !=nil {panic (_dba .Error ());};};type tiffType int ;func _dac (_bacc []byte ,_cbc int )([]byte ,int ){return _gdfg (_bacc ,_cbc ,_bc )};func _bde (_ggd []byte ,_fgbe ,_cbb ,_aace int )([]byte ,int ){_cfb :=_dafa (_cbb ,_aace );_ggd ,_fgbe =_gdfg (_ggd ,_fgbe ,_cfb );
return _ggd ,_fgbe ;};func _ceb (_gfb ,_bfc []byte ,_aaef ,_gbae ,_fffb int )([]byte ,int ,int ){_adag :=_bbef (_gfb ,_fffb );_eaaa :=_gbae >=0&&_gfb [_gbae ]==_abe ||_gbae ==-1;_bfc ,_aaef =_gdfg (_bfc ,_aaef ,_geb );var _gcf int ;if _gbae > -1{_gcf =_fffb -_gbae ;
}else {_gcf =_fffb -_gbae -1;};_bfc ,_aaef =_dbf (_bfc ,_aaef ,_gcf ,_eaaa );_eaaa =!_eaaa ;_acdg :=_adag -_fffb ;_bfc ,_aaef =_dbf (_bfc ,_aaef ,_acdg ,_eaaa );_gbae =_adag ;return _bfc ,_aaef ,_gbae ;};func _efb (_dbg []byte ,_dgf int ,_efba code )([]byte ,int ){_fga :=true ;
var _dbcc []byte ;_dbcc ,_dgf =_gdfg (nil ,_dgf ,_efba );_eccg :=0;var _ebee int ;for _eccg < len (_dbg ){_ebee ,_eccg =_fdac (_dbg ,_fga ,_eccg );_dbcc ,_dgf =_dbf (_dbcc ,_dgf ,_ebee ,_fga );_fga =!_fga ;};return _dbcc ,_dgf %8;};func _ddaa (_feg [][]byte )[][]byte {_bdeb :=make ([]byte ,len (_feg [0]));
for _agff :=range _bdeb {_bdeb [_agff ]=_abe ;};_feg =append (_feg ,[]byte {});for _fgd :=len (_feg )-1;_fgd > 0;_fgd --{_feg [_fgd ]=_feg [_fgd -1];};_feg [0]=_bdeb ;return _feg ;};func init (){_gea =make (map[int ]code );_gea [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_gea [1]=code {Code :2<<(5+8),BitsWritten :3};_gea [2]=code {Code :3<<(6+8),BitsWritten :2};_gea [3]=code {Code :2<<(6+8),BitsWritten :2};_gea [4]=code {Code :3<<(5+8),BitsWritten :3};_gea [5]=code {Code :3<<(4+8),BitsWritten :4};_gea [6]=code {Code :2<<(4+8),BitsWritten :4};
_gea [7]=code {Code :3<<(3+8),BitsWritten :5};_gea [8]=code {Code :5<<(2+8),BitsWritten :6};_gea [9]=code {Code :4<<(2+8),BitsWritten :6};_gea [10]=code {Code :4<<(1+8),BitsWritten :7};_gea [11]=code {Code :5<<(1+8),BitsWritten :7};_gea [12]=code {Code :7<<(1+8),BitsWritten :7};
_gea [13]=code {Code :4<<8,BitsWritten :8};_gea [14]=code {Code :7<<8,BitsWritten :8};_gea [15]=code {Code :12<<8,BitsWritten :9};_gea [16]=code {Code :5<<8|3<<6,BitsWritten :10};_gea [17]=code {Code :6<<8,BitsWritten :10};_gea [18]=code {Code :2<<8,BitsWritten :10};
_gea [19]=code {Code :12<<8|7<<5,BitsWritten :11};_gea [20]=code {Code :13<<8,BitsWritten :11};_gea [21]=code {Code :13<<8|4<<5,BitsWritten :11};_gea [22]=code {Code :6<<8|7<<5,BitsWritten :11};_gea [23]=code {Code :5<<8,BitsWritten :11};_gea [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_gea [25]=code {Code :3<<8,BitsWritten :11};_gea [26]=code {Code :12<<8|10<<4,BitsWritten :12};_gea [27]=code {Code :12<<8|11<<4,BitsWritten :12};_gea [28]=code {Code :12<<8|12<<4,BitsWritten :12};_gea [29]=code {Code :12<<8|13<<4,BitsWritten :12};_gea [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_gea [31]=code {Code :6<<8|9<<4,BitsWritten :12};_gea [32]=code {Code :6<<8|10<<4,BitsWritten :12};_gea [33]=code {Code :6<<8|11<<4,BitsWritten :12};_gea [34]=code {Code :13<<8|2<<4,BitsWritten :12};_gea [35]=code {Code :13<<8|3<<4,BitsWritten :12};_gea [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_gea [37]=code {Code :13<<8|5<<4,BitsWritten :12};_gea [38]=code {Code :13<<8|6<<4,BitsWritten :12};_gea [39]=code {Code :13<<8|7<<4,BitsWritten :12};_gea [40]=code {Code :6<<8|12<<4,BitsWritten :12};_gea [41]=code {Code :6<<8|13<<4,BitsWritten :12};_gea [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_gea [43]=code {Code :13<<8|11<<4,BitsWritten :12};_gea [44]=code {Code :5<<8|4<<4,BitsWritten :12};_gea [45]=code {Code :5<<8|5<<4,BitsWritten :12};_gea [46]=code {Code :5<<8|6<<4,BitsWritten :12};_gea [47]=code {Code :5<<8|7<<4,BitsWritten :12};_gea [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_gea [49]=code {Code :6<<8|5<<4,BitsWritten :12};_gea [50]=code {Code :5<<8|2<<4,BitsWritten :12};_gea [51]=code {Code :5<<8|3<<4,BitsWritten :12};_gea [52]=code {Code :2<<8|4<<4,BitsWritten :12};_gea [53]=code {Code :3<<8|7<<4,BitsWritten :12};_gea [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_gea [55]=code {Code :2<<8|7<<4,BitsWritten :12};_gea [56]=code {Code :2<<8|8<<4,BitsWritten :12};_gea [57]=code {Code :5<<8|8<<4,BitsWritten :12};_gea [58]=code {Code :5<<8|9<<4,BitsWritten :12};_gea [59]=code {Code :2<<8|11<<4,BitsWritten :12};_gea [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_gea [61]=code {Code :5<<8|10<<4,BitsWritten :12};_gea [62]=code {Code :6<<8|6<<4,BitsWritten :12};_gea [63]=code {Code :6<<8|7<<4,BitsWritten :12};_fgb =make (map[int ]code );_fgb [0]=code {Code :53<<8,BitsWritten :8};_fgb [1]=code {Code :7<<(2+8),BitsWritten :6};
_fgb [2]=code {Code :7<<(4+8),BitsWritten :4};_fgb [3]=code {Code :8<<(4+8),BitsWritten :4};_fgb [4]=code {Code :11<<(4+8),BitsWritten :4};_fgb [5]=code {Code :12<<(4+8),BitsWritten :4};_fgb [6]=code {Code :14<<(4+8),BitsWritten :4};_fgb [7]=code {Code :15<<(4+8),BitsWritten :4};
_fgb [8]=code {Code :19<<(3+8),BitsWritten :5};_fgb [9]=code {Code :20<<(3+8),BitsWritten :5};_fgb [10]=code {Code :7<<(3+8),BitsWritten :5};_fgb [11]=code {Code :8<<(3+8),BitsWritten :5};_fgb [12]=code {Code :8<<(2+8),BitsWritten :6};_fgb [13]=code {Code :3<<(2+8),BitsWritten :6};
_fgb [14]=code {Code :52<<(2+8),BitsWritten :6};_fgb [15]=code {Code :53<<(2+8),BitsWritten :6};_fgb [16]=code {Code :42<<(2+8),BitsWritten :6};_fgb [17]=code {Code :43<<(2+8),BitsWritten :6};_fgb [18]=code {Code :39<<(1+8),BitsWritten :7};_fgb [19]=code {Code :12<<(1+8),BitsWritten :7};
_fgb [20]=code {Code :8<<(1+8),BitsWritten :7};_fgb [21]=code {Code :23<<(1+8),BitsWritten :7};_fgb [22]=code {Code :3<<(1+8),BitsWritten :7};_fgb [23]=code {Code :4<<(1+8),BitsWritten :7};_fgb [24]=code {Code :40<<(1+8),BitsWritten :7};_fgb [25]=code {Code :43<<(1+8),BitsWritten :7};
_fgb [26]=code {Code :19<<(1+8),BitsWritten :7};_fgb [27]=code {Code :36<<(1+8),BitsWritten :7};_fgb [28]=code {Code :24<<(1+8),BitsWritten :7};_fgb [29]=code {Code :2<<8,BitsWritten :8};_fgb [30]=code {Code :3<<8,BitsWritten :8};_fgb [31]=code {Code :26<<8,BitsWritten :8};
_fgb [32]=code {Code :27<<8,BitsWritten :8};_fgb [33]=code {Code :18<<8,BitsWritten :8};_fgb [34]=code {Code :19<<8,BitsWritten :8};_fgb [35]=code {Code :20<<8,BitsWritten :8};_fgb [36]=code {Code :21<<8,BitsWritten :8};_fgb [37]=code {Code :22<<8,BitsWritten :8};
_fgb [38]=code {Code :23<<8,BitsWritten :8};_fgb [39]=code {Code :40<<8,BitsWritten :8};_fgb [40]=code {Code :41<<8,BitsWritten :8};_fgb [41]=code {Code :42<<8,BitsWritten :8};_fgb [42]=code {Code :43<<8,BitsWritten :8};_fgb [43]=code {Code :44<<8,BitsWritten :8};
_fgb [44]=code {Code :45<<8,BitsWritten :8};_fgb [45]=code {Code :4<<8,BitsWritten :8};_fgb [46]=code {Code :5<<8,BitsWritten :8};_fgb [47]=code {Code :10<<8,BitsWritten :8};_fgb [48]=code {Code :11<<8,BitsWritten :8};_fgb [49]=code {Code :82<<8,BitsWritten :8};
_fgb [50]=code {Code :83<<8,BitsWritten :8};_fgb [51]=code {Code :84<<8,BitsWritten :8};_fgb [52]=code {Code :85<<8,BitsWritten :8};_fgb [53]=code {Code :36<<8,BitsWritten :8};_fgb [54]=code {Code :37<<8,BitsWritten :8};_fgb [55]=code {Code :88<<8,BitsWritten :8};
_fgb [56]=code {Code :89<<8,BitsWritten :8};_fgb [57]=code {Code :90<<8,BitsWritten :8};_fgb [58]=code {Code :91<<8,BitsWritten :8};_fgb [59]=code {Code :74<<8,BitsWritten :8};_fgb [60]=code {Code :75<<8,BitsWritten :8};_fgb [61]=code {Code :50<<8,BitsWritten :8};
_fgb [62]=code {Code :51<<8,BitsWritten :8};_fgb [63]=code {Code :52<<8,BitsWritten :8};_cag =make (map[int ]code );_cag [64]=code {Code :3<<8|3<<6,BitsWritten :10};_cag [128]=code {Code :12<<8|8<<4,BitsWritten :12};_cag [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_cag [256]=code {Code :5<<8|11<<4,BitsWritten :12};_cag [320]=code {Code :3<<8|3<<4,BitsWritten :12};_cag [384]=code {Code :3<<8|4<<4,BitsWritten :12};_cag [448]=code {Code :3<<8|5<<4,BitsWritten :12};_cag [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_cag [576]=code {Code :3<<8|13<<3,BitsWritten :13};_cag [640]=code {Code :2<<8|10<<3,BitsWritten :13};_cag [704]=code {Code :2<<8|11<<3,BitsWritten :13};_cag [768]=code {Code :2<<8|12<<3,BitsWritten :13};_cag [832]=code {Code :2<<8|13<<3,BitsWritten :13};
_cag [896]=code {Code :3<<8|18<<3,BitsWritten :13};_cag [960]=code {Code :3<<8|19<<3,BitsWritten :13};_cag [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_cag [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_cag [1152]=code {Code :3<<8|22<<3,BitsWritten :13};
_cag [1216]=code {Code :119<<3,BitsWritten :13};_cag [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_cag [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_cag [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_cag [1472]=code {Code :2<<8|21<<3,BitsWritten :13};
_cag [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_cag [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_cag [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_cag [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_fdf =make (map[int ]code );_fdf [64]=code {Code :27<<(3+8),BitsWritten :5};
_fdf [128]=code {Code :18<<(3+8),BitsWritten :5};_fdf [192]=code {Code :23<<(2+8),BitsWritten :6};_fdf [256]=code {Code :55<<(1+8),BitsWritten :7};_fdf [320]=code {Code :54<<8,BitsWritten :8};_fdf [384]=code {Code :55<<8,BitsWritten :8};_fdf [448]=code {Code :100<<8,BitsWritten :8};
_fdf [512]=code {Code :101<<8,BitsWritten :8};_fdf [576]=code {Code :104<<8,BitsWritten :8};_fdf [640]=code {Code :103<<8,BitsWritten :8};_fdf [704]=code {Code :102<<8,BitsWritten :9};_fdf [768]=code {Code :102<<8|1<<7,BitsWritten :9};_fdf [832]=code {Code :105<<8,BitsWritten :9};
_fdf [896]=code {Code :105<<8|1<<7,BitsWritten :9};_fdf [960]=code {Code :106<<8,BitsWritten :9};_fdf [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_fdf [1088]=code {Code :107<<8,BitsWritten :9};_fdf [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_fdf [1216]=code {Code :108<<8,BitsWritten :9};
_fdf [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_fdf [1344]=code {Code :109<<8,BitsWritten :9};_fdf [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_fdf [1472]=code {Code :76<<8,BitsWritten :9};_fdf [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_fdf [1600]=code {Code :77<<8,BitsWritten :9};
_fdf [1664]=code {Code :24<<(2+8),BitsWritten :6};_fdf [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_bf =make (map[int ]code );_bf [1792]=code {Code :1<<8,BitsWritten :11};_bf [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_bf [1920]=code {Code :1<<8|5<<5,BitsWritten :11};
_bf [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_bf [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_bf [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_bf [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_bf [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_bf [2304]=code {Code :1<<8|7<<4,BitsWritten :12};
_bf [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_bf [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_bf [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_bf [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_gg =make (map[int ]byte );_gg [0]=0xFF;_gg [1]=0xFE;
_gg [2]=0xFC;_gg [3]=0xF8;_gg [4]=0xF0;_gg [5]=0xE0;_gg [6]=0xC0;_gg [7]=0x80;_gg [8]=0x00;};var _bg =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func _ceg (_bff int ,_eddef bool )(code ,int ,bool ){if _bff < 64{if _eddef {return _fgb [_bff ],0,true ;};return _gea [_bff ],0,true ;};_gdf :=_bff /64;if _gdf > 40{return _bf [2560],_bff -2560,false ;};if _gdf > 27{return _bf [_gdf *64],_bff -_gdf *64,false ;
};if _eddef {return _fdf [_gdf *64],_bff -_gdf *64,false ;};return _cag [_gdf *64],_bff -_gdf *64,false ;};func (_fca *Decoder )decode1D ()error {var (_ede int ;_eab error ;);_fe :=true ;_fca ._edd =0;for {var _eee int ;if _fe {_eee ,_eab =_fca .decodeRun (_be );
}else {_eee ,_eab =_fca .decodeRun (_ad );};if _eab !=nil {return _eab ;};_ede +=_eee ;_fca ._cf [_fca ._edd ]=_ede ;_fca ._edd ++;_fe =!_fe ;if _ede >=_fca ._dfe {break ;};};return nil ;};func _fdac (_feb []byte ,_cega bool ,_cgaf int )(int ,int ){_aec :=0;
for _cgaf < len (_feb ){if _cega {if _feb [_cgaf ]!=_abe {break ;};}else {if _feb [_cgaf ]!=_eaa {break ;};};_aec ++;_cgaf ++;};return _aec ,_cgaf ;};func (_cge *Decoder )decodeRowType4 ()error {if !_cge ._fdd {return _cge .decoderRowType41D ();};if _cge ._abb {_cge ._aga .Align ();
};_cge ._aga .Mark ();_ba ,_ade :=_cge .tryFetchEOL ();if _ade !=nil {return _ade ;};if !_ba &&_cge ._egc {_cge ._ged ++;if _cge ._ged > _cge ._dbd {return _ag ;};_cge ._aga .Reset ();};if !_ba {_cge ._aga .Reset ();};_bee ,_ade :=_cge ._aga .ReadBool ();
if _ade !=nil {return _ade ;};if _bee {if _ba &&_cge ._ea {if _ade =_cge .tryFetchRTC2D ();_ade !=nil {return _ade ;};};_ade =_cge .decode1D ();}else {_ade =_cge .decode2D ();};if _ade !=nil {return _ade ;};return nil ;};func _dafa (_gcbfd ,_ffab int )code {var _gafd code ;
switch _ffab -_gcbfd {case -1:_gafd =_dda ;case -2:_gafd =_gbed ;case -3:_gafd =_da ;case 0:_gafd =_gec ;case 1:_gafd =_gfc ;case 2:_gafd =_ga ;case 3:_gafd =_ccd ;};return _gafd ;};func (_fcb *Decoder )fetch ()error {if _fcb ._gfd ==-1{return nil ;};if _fcb ._aadb < _fcb ._gfd {return nil ;
};_fcb ._gfd =0;_gcaf :=_fcb .decodeRow ();if _gcaf !=nil {if !_c .Is (_gcaf ,_d .EOF ){return _gcaf ;};if _fcb ._gfd !=0{return _gcaf ;};_fcb ._gfd =-1;};_fcb ._aadb =0;return nil ;};func (_aac *Decoder )Read (in []byte )(int ,error ){if _aac ._abd !=nil {return 0,_aac ._abd ;
};_fgg :=len (in );var (_cab int ;_dcb int ;);for _fgg !=0{if _aac ._aadb >=_aac ._gfd {if _dad :=_aac .fetch ();_dad !=nil {_aac ._abd =_dad ;return 0,_dad ;};};if _aac ._gfd ==-1{return _cab ,_d .EOF ;};switch {case _fgg <=_aac ._gfd -_aac ._aadb :_eddb :=_aac ._acf [_aac ._aadb :_aac ._aadb +_fgg ];
for _ ,_bfe :=range _eddb {if !_aac ._ace {_bfe =^_bfe ;};in [_dcb ]=_bfe ;_dcb ++;};_cab +=len (_eddb );_aac ._aadb +=len (_eddb );return _cab ,nil ;default:_aeb :=_aac ._acf [_aac ._aadb :];for _ ,_agc :=range _aeb {if !_aac ._ace {_agc =^_agc ;};in [_dcb ]=_agc ;
_dcb ++;};_cab +=len (_aeb );_aac ._aadb +=len (_aeb );_fgg -=len (_aeb );};};return _cab ,nil ;};func (_bd *Decoder )looseFetchEOL ()(bool ,error ){_ffb ,_adbe :=_bd ._aga .ReadBits (12);if _adbe !=nil {return false ,_adbe ;};switch _ffb {case 0x1:return true ,nil ;
case 0x0:for {_eda ,_dbb :=_bd ._aga .ReadBool ();if _dbb !=nil {return false ,_dbb ;};if _eda {return true ,nil ;};};default:return false ,nil ;};};func _bbef (_cfac []byte ,_cfgd int )int {if _cfgd >=len (_cfac ){return _cfgd ;};if _cfgd < -1{_cfgd =-1;
};var _egg byte ;if _cfgd > -1{_egg =_cfac [_cfgd ];}else {_egg =_abe ;};_bbeg :=_cfgd +1;for _bbeg < len (_cfac ){if _cfac [_bbeg ]!=_egg {break ;};_bbeg ++;};return _bbeg ;};func (_cgd *Encoder )encodeG31D (_ccf [][]byte )[]byte {var _fcag []byte ;_fcd :=0;
for _deb :=range _ccf {if _cgd .Rows > 0&&!_cgd .EndOfBlock &&_deb ==_cgd .Rows {break ;};_eddbg ,_gfgd :=_efb (_ccf [_deb ],_fcd ,_bec );_fcag =_cgd .appendEncodedRow (_fcag ,_eddbg ,_fcd );if _cgd .EncodedByteAlign {_gfgd =0;};_fcd =_gfgd ;};if _cgd .EndOfBlock {_abcb ,_ :=_dfba (_fcd );
_fcag =_cgd .appendEncodedRow (_fcag ,_abcb ,_fcd );};return _fcag ;};func _dbf (_gdd []byte ,_aebf int ,_ggf int ,_fdgg bool )([]byte ,int ){var (_eac code ;_fbe bool ;);for !_fbe {_eac ,_ggf ,_fbe =_ceg (_ggf ,_fdgg );_gdd ,_aebf =_gdfg (_gdd ,_aebf ,_eac );
};return _gdd ,_aebf ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;
Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_eea :=&Decoder {_aga :_b .NewReader (data ),_dfe :options .Columns ,_egb :options .Rows ,_dbd :options .DamagedRowsBeforeError ,_acf :make ([]byte ,(options .Columns +7)/8),_bca :make ([]int ,options .Columns +2),_cf :make ([]int ,options .Columns +2),_abb :options .EncodedByteAligned ,_ace :options .BlackIsOne ,_egc :options .EndOfLine ,_ea :options .EndOfBlock };
switch {case options .K ==0:_eea ._ee =_fc ;if len (data )< 20{return nil ,_c .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_aag :=data [:20];if _aag [0]!=0||(_aag [1]>>4!=1&&_aag [1]!=1){_eea ._ee =_ce ;
_cad :=(uint16 (_aag [0])<<8+uint16 (_aag [1]&0xff))>>4;for _dcc :=12;_dcc < 160;_dcc ++{_cad =(_cad <<1)+uint16 ((_aag [_dcc /8]>>uint16 (7-(_dcc %8)))&0x01);if _cad &0xfff==1{_eea ._ee =_fc ;break ;};};};case options .K < 0:_eea ._ee =_fdb ;case options .K > 0:_eea ._ee =_fc ;
_eea ._fdd =true ;};switch _eea ._ee {case _ce ,_fc ,_fdb :default:return nil ,_c .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");};
return _eea ,nil ;};type treeNode struct{_geab *treeNode ;_cebf *treeNode ;_gcd int ;_ccfc bool ;_abbfe bool ;};func _cgf (_abbf int )([]byte ,int ){var _gae []byte ;for _beeb :=0;_beeb < 2;_beeb ++{_gae ,_abbf =_gdfg (_gae ,_abbf ,_bec );};return _gae ,_abbf %8;
};func (_adea *Decoder )tryFetchEOL ()(bool ,error ){_cef ,_cdg :=_adea ._aga .ReadBits (12);if _cdg !=nil {return false ,_cdg ;};return _cef ==0x1,nil ;};func (_dbcg *tree )fill (_fege ,_ccda ,_ddag int )error {_ffaa :=_dbcg ._acb ;for _ffg :=0;_ffg < _fege ;
_ffg ++{_fcba :=_fege -1-_ffg ;_fffbe :=((_ccda >>uint (_fcba ))&1)!=0;_fadd :=_ffaa .walk (_fffbe );if _fadd !=nil {if _fadd ._abbfe {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_ffaa =_fadd ;continue ;};_fadd =&treeNode {};if _ffg ==_fege -1{_fadd ._gcd =_ddag ;_fadd ._abbfe =true ;};if _ccda ==0{_fadd ._ccfc =true ;};_ffaa .set (_fffbe ,_fadd );_ffaa =_fadd ;};return nil ;};func (_fed *Decoder )decodeRun (_ff *tree )(int ,error ){var _baa int ;
_gab :=_ff ._acb ;for {_fae ,_cce :=_fed ._aga .ReadBool ();if _cce !=nil {return 0,_cce ;};_gab =_gab .walk (_fae );if _gab ==nil {return 0,_c .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _gab ._abbfe {_baa +=_gab ._gcd ;switch {case _gab ._gcd >=64:_gab =_ff ._acb ;case _gab ._gcd >=0:return _baa ,nil ;default:return _fed ._dfe ,nil ;};};};};func (_aeg *Encoder )appendEncodedRow (_ddd ,_eef []byte ,_baeg int )[]byte {if len (_ddd )> 0&&_baeg !=0&&!_aeg .EncodedByteAlign {_ddd [len (_ddd )-1]=_ddd [len (_ddd )-1]|_eef [0];
_ddd =append (_ddd ,_eef [1:]...);}else {_ddd =append (_ddd ,_eef ...);};return _ddd ;};var _ccb =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_fgbd *Decoder )decodeG32D ()error {_fgbd ._gca =_fgbd ._edd ;_fgbd ._cf ,_fgbd ._bca =_fgbd ._bca ,_fgbd ._cf ;_gcag :=true ;var (_agfb bool ;_ec int ;_abc error ;);_fgbd ._edd =0;_gbf :for _ec < _fgbd ._dfe {_fgc :=_db ._acb ;for {_agfb ,_abc =_fgbd ._aga .ReadBool ();
if _abc !=nil {return _abc ;};_fgc =_fgc .walk (_agfb );if _fgc ==nil {continue _gbf ;};if !_fgc ._abbfe {continue ;};switch _fgc ._gcd {case _e :var _fa int ;if _gcag {_fa ,_abc =_fgbd .decodeRun (_be );}else {_fa ,_abc =_fgbd .decodeRun (_ad );};if _abc !=nil {return _abc ;
};_ec +=_fa ;_fgbd ._cf [_fgbd ._edd ]=_ec ;_fgbd ._edd ++;if _gcag {_fa ,_abc =_fgbd .decodeRun (_ad );}else {_fa ,_abc =_fgbd .decodeRun (_be );};if _abc !=nil {return _abc ;};_ec +=_fa ;_fgbd ._cf [_fgbd ._edd ]=_ec ;_fgbd ._edd ++;case _f :_dbcb :=_fgbd .getNextChangingElement (_ec ,_gcag )+1;
if _dbcb >=_fgbd ._gca {_ec =_fgbd ._dfe ;}else {_ec =_fgbd ._bca [_dbcb ];};default:_bge :=_fgbd .getNextChangingElement (_ec ,_gcag );if _bge >=_fgbd ._gca ||_bge ==-1{_ec =_fgbd ._dfe +_fgc ._gcd ;}else {_ec =_fgbd ._bca [_bge ]+_fgc ._gcd ;};_fgbd ._cf [_fgbd ._edd ]=_ec ;
_fgbd ._edd ++;_gcag =!_gcag ;};continue _gbf ;};};return nil ;};func (_cfa *Encoder )encodeG32D (_abce [][]byte )[]byte {var _geg []byte ;var _ggca int ;for _cga :=0;_cga < len (_abce );_cga +=_cfa .K {if _cfa .Rows > 0&&!_cfa .EndOfBlock &&_cga ==_cfa .Rows {break ;
};_eabc ,_fff :=_efb (_abce [_cga ],_ggca ,_bbc );_geg =_cfa .appendEncodedRow (_geg ,_eabc ,_ggca );if _cfa .EncodedByteAlign {_fff =0;};_ggca =_fff ;for _beea :=_cga +1;_beea < (_cga +_cfa .K )&&_beea < len (_abce );_beea ++{if _cfa .Rows > 0&&!_cfa .EndOfBlock &&_beea ==_cfa .Rows {break ;
};_gfca ,_bab :=_gdfg (nil ,_ggca ,_cg );var _efe ,_edad ,_gbfe int ;_fce :=-1;for _fce < len (_abce [_beea ]){_efe =_bbef (_abce [_beea ],_fce );_edad =_gcbf (_abce [_beea ],_abce [_beea -1],_fce );_gbfe =_bbef (_abce [_beea -1],_edad );if _gbfe < _efe {_gfca ,_bab =_dac (_gfca ,_bab );
_fce =_gbfe ;}else {if _aa .Abs (float64 (_edad -_efe ))> 3{_gfca ,_bab ,_fce =_ceb (_abce [_beea ],_gfca ,_bab ,_fce ,_efe );}else {_gfca ,_bab =_bde (_gfca ,_bab ,_efe ,_edad );_fce =_efe ;};};};_geg =_cfa .appendEncodedRow (_geg ,_gfca ,_ggca );if _cfa .EncodedByteAlign {_bab =0;
};_ggca =_bab %8;};};if _cfa .EndOfBlock {_dee ,_ :=_daa (_ggca );_geg =_cfa .appendEncodedRow (_geg ,_dee ,_ggca );};return _geg ;};func (_ega *treeNode )set (_ece bool ,_fbcb *treeNode ){if !_ece {_ega ._geab =_fbcb ;}else {_ega ._cebf =_fbcb ;};};func (_dfb *Decoder )tryFetchEOL1 ()(bool ,error ){_fea ,_gge :=_dfb ._aga .ReadBits (13);
if _gge !=nil {return false ,_gge ;};return _fea ==0x3,nil ;};var (_eg =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_ag =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_ccdf *Decoder )decoderRowType41D ()error {if _ccdf ._abb {_ccdf ._aga .Align ();};_ccdf ._aga .Mark ();var (_aagg bool ;_ccde error ;);if _ccdf ._egc {_aagg ,_ccde =_ccdf .tryFetchEOL ();if _ccde !=nil {return _ccde ;};if !_aagg {return _ag ;};
}else {_aagg ,_ccde =_ccdf .looseFetchEOL ();if _ccde !=nil {return _ccde ;};};if !_aagg {_ccdf ._aga .Reset ();};if _aagg &&_ccdf ._ea {_ccdf ._aga .Mark ();for _gba :=0;_gba < 5;_gba ++{_aagg ,_ccde =_ccdf .tryFetchEOL ();if _ccde !=nil {if _c .Is (_ccde ,_d .EOF ){if _gba ==0{break ;
};return _eg ;};};if _aagg {continue ;};if _gba > 0{return _eg ;};break ;};if _aagg {return _d .EOF ;};_ccdf ._aga .Reset ();};if _ccde =_ccdf .decode1D ();_ccde !=nil {return _ccde ;};return nil ;};func (_fda *Encoder )encodeG4 (_eba [][]byte )[]byte {_gfde :=make ([][]byte ,len (_eba ));
copy (_gfde ,_eba );_gfde =_ddaa (_gfde );var _gcba []byte ;var _fba int ;for _ecd :=1;_ecd < len (_gfde );_ecd ++{if _fda .Rows > 0&&!_fda .EndOfBlock &&_ecd ==(_fda .Rows +1){break ;};var _cec []byte ;var _aea ,_ebc ,_gaa int ;_cb :=_fba ;_bae :=-1;for _bae < len (_gfde [_ecd ]){_aea =_bbef (_gfde [_ecd ],_bae );
_ebc =_gcbf (_gfde [_ecd ],_gfde [_ecd -1],_bae );_gaa =_bbef (_gfde [_ecd -1],_ebc );if _gaa < _aea {_cec ,_cb =_gdfg (_cec ,_cb ,_bc );_bae =_gaa ;}else {if _aa .Abs (float64 (_ebc -_aea ))> 3{_cec ,_cb ,_bae =_ceb (_gfde [_ecd ],_cec ,_cb ,_bae ,_aea );
}else {_cec ,_cb =_bde (_cec ,_cb ,_aea ,_ebc );_bae =_aea ;};};};_gcba =_fda .appendEncodedRow (_gcba ,_cec ,_fba );if _fda .EncodedByteAlign {_cb =0;};_fba =_cb %8;};if _fda .EndOfBlock {_ddbf ,_ :=_cgf (_fba );_gcba =_fda .appendEncodedRow (_gcba ,_ddbf ,_fba );
};return _gcba ;};func (_ggc *Decoder )decodeRow ()(_fge error ){if !_ggc ._ea &&_ggc ._egb > 0&&_ggc ._egb ==_ggc ._gcb {return _d .EOF ;};switch _ggc ._ee {case _ce :_fge =_ggc .decodeRowType2 ();case _fc :_fge =_ggc .decodeRowType4 ();case _fdb :_fge =_ggc .decodeRowType6 ();
};if _fge !=nil {return _fge ;};_egd :=0;_caf :=true ;_ggc ._dfeb =0;for _afd :=0;_afd < _ggc ._edd ;_afd ++{_agf :=_ggc ._dfe ;if _afd !=_ggc ._edd {_agf =_ggc ._cf [_afd ];};if _agf > _ggc ._dfe {_agf =_ggc ._dfe ;};_dge :=_egd /8;for _egd %8!=0&&_agf -_egd > 0{var _dfc byte ;
if !_caf {_dfc =1<<uint (7-(_egd %8));};_ggc ._acf [_dge ]|=_dfc ;_egd ++;};if _egd %8==0{_dge =_egd /8;var _cfg byte ;if !_caf {_cfg =0xff;};for _agf -_egd > 7{_ggc ._acf [_dge ]=_cfg ;_egd +=8;_dge ++;};};for _agf -_egd > 0{if _egd %8==0{_ggc ._acf [_dge ]=0;
};var _dfef byte ;if !_caf {_dfef =1<<uint (7-(_egd %8));};_ggc ._acf [_dge ]|=_dfef ;_egd ++;};_caf =!_caf ;};if _egd !=_ggc ._dfe {return _c .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_ggc ._gfd =(_egd +7)/8;_ggc ._gcb ++;return nil ;};func _gcbf (_fef ,_edg []byte ,_fdae int )int {_ffa :=_bbef (_edg ,_fdae );if _ffa < len (_edg )&&(_fdae ==-1&&_edg [_ffa ]==_abe ||_fdae >=0&&_fdae < len (_fef )&&_fef [_fdae ]==_edg [_ffa ]||_fdae >=len (_fef )&&_fef [_fdae -1]!=_edg [_ffa ]){_ffa =_bbef (_edg ,_ffa );
};return _ffa ;};func (_dfcf *Decoder )decode2D ()error {_dfcf ._gca =_dfcf ._edd ;_dfcf ._cf ,_dfcf ._bca =_dfcf ._bca ,_dfcf ._cf ;_fbc :=true ;var (_gbd bool ;_aae int ;_ddb error ;);_dfcf ._edd =0;_eb :for _aae < _dfcf ._dfe {_fdfc :=_db ._acb ;for {_gbd ,_ddb =_dfcf ._aga .ReadBool ();
if _ddb !=nil {return _ddb ;};_fdfc =_fdfc .walk (_gbd );if _fdfc ==nil {continue _eb ;};if !_fdfc ._abbfe {continue ;};switch _fdfc ._gcd {case _e :var _bef int ;if _fbc {_bef ,_ddb =_dfcf .decodeRun (_be );}else {_bef ,_ddb =_dfcf .decodeRun (_ad );};
if _ddb !=nil {return _ddb ;};_aae +=_bef ;_dfcf ._cf [_dfcf ._edd ]=_aae ;_dfcf ._edd ++;if _fbc {_bef ,_ddb =_dfcf .decodeRun (_ad );}else {_bef ,_ddb =_dfcf .decodeRun (_be );};if _ddb !=nil {return _ddb ;};_aae +=_bef ;_dfcf ._cf [_dfcf ._edd ]=_aae ;
_dfcf ._edd ++;case _f :_fdg :=_dfcf .getNextChangingElement (_aae ,_fbc )+1;if _fdg >=_dfcf ._gca {_aae =_dfcf ._dfe ;}else {_aae =_dfcf ._bca [_fdg ];};default:_dfcc :=_dfcf .getNextChangingElement (_aae ,_fbc );if _dfcc >=_dfcf ._gca ||_dfcc ==-1{_aae =_dfcf ._dfe +_fdfc ._gcd ;
}else {_aae =_dfcf ._bca [_dfcc ]+_fdfc ._gcd ;};_dfcf ._cf [_dfcf ._edd ]=_aae ;_dfcf ._edd ++;_fbc =!_fbc ;};continue _eb ;};};return nil ;};func (_aaf *Decoder )decodeRowType2 ()error {if _aaf ._abb {_aaf ._aga .Align ();};if _dgb :=_aaf .decode1D ();
_dgb !=nil {return _dgb ;};return nil ;};func (_daf *Decoder )getNextChangingElement (_ggcg int ,_cgb bool )int {_edde :=0;if !_cgb {_edde =1;};_cdd :=int (uint32 (_daf ._dfeb )&0xFFFFFFFE)+_edde ;if _cdd > 2{_cdd -=2;};if _ggcg ==0{return _cdd ;};for _ebe :=_cdd ;
_ebe < _daf ._gca ;_ebe +=2{if _ggcg < _daf ._bca [_ebe ]{_daf ._dfeb =_ebe ;return _ebe ;};};return -1;};func _gdfg (_dcd []byte ,_fgcb int ,_egbe code )([]byte ,int ){_debb :=0;for _debb < _egbe .BitsWritten {_efa :=_fgcb /8;_cadd :=_fgcb %8;if _efa >=len (_dcd ){_dcd =append (_dcd ,0);
};_cfgc :=8-_cadd ;_fcae :=_egbe .BitsWritten -_debb ;if _cfgc > _fcae {_cfgc =_fcae ;};if _debb < 8{_dcd [_efa ]=_dcd [_efa ]|byte (_egbe .Code >>uint (8+_cadd -_debb ))&_gg [8-_cfgc -_cadd ];}else {_dcd [_efa ]=_dcd [_efa ]|(byte (_egbe .Code <<uint (_debb -8))&_gg [8-_cfgc ])>>uint (_cadd );
};_fgcb +=_cfgc ;_debb +=_cfgc ;};return _dcd ,_fgcb ;};func (_fad *Decoder )decodeRowType6 ()error {if _fad ._abb {_fad ._aga .Align ();};if _fad ._ea {_fad ._aga .Mark ();_bgg ,_bbe :=_fad .tryFetchEOL ();if _bbe !=nil {return _bbe ;};if _bgg {_bgg ,_bbe =_fad .tryFetchEOL ();
if _bbe !=nil {return _bbe ;};if _bgg {return _d .EOF ;};};_fad ._aga .Reset ();};return _fad .decode2D ();};func (_aad tiffType )String ()string {switch _aad {case _ce :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _fc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _fdb :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};var (_ac *treeNode ;_ca *treeNode ;
_ad *tree ;_be *tree ;_g *tree ;_db *tree ;_dg =-2000;_adb =-1000;_f =-3000;_e =-4000;);var _ab =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _gaf (_dgbd ,_acd []byte ,_dbfe int ,_fcdf bool )int {_fee :=_bbef (_acd ,_dbfe );if _fee < len (_acd )&&(_dbfe ==-1&&_acd [_fee ]==_abe ||_dbfe >=0&&_dbfe < len (_dgbd )&&_dgbd [_dbfe ]==_acd [_fee ]||_dbfe >=len (_dgbd )&&_fcdf &&_acd [_fee ]==_abe ||_dbfe >=len (_dgbd )&&!_fcdf &&_acd [_fee ]==_eaa ){_fee =_bbef (_acd ,_fee );
};return _fee ;};type tree struct{_acb *treeNode };var (_abe byte =1;_eaa byte =0;);func _daa (_fgcf int )([]byte ,int ){var _cecd []byte ;for _ecc :=0;_ecc < 6;_ecc ++{_cecd ,_fgcf =_gdfg (_cecd ,_fgcf ,_bbc );};return _cecd ,_fgcf %8;};func (_fdbd *tree )fillWithNode (_aadc ,_dfeg int ,_eec *treeNode )error {_bbb :=_fdbd ._acb ;
for _cbbf :=0;_cbbf < _aadc ;_cbbf ++{_ddbg :=uint (_aadc -1-_cbbf );_fgf :=((_dfeg >>_ddbg )&1)!=0;_agab :=_bbb .walk (_fgf );if _agab !=nil {if _agab ._abbfe {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_bbb =_agab ;continue ;};if _cbbf ==_aadc -1{_agab =_eec ;}else {_agab =&treeNode {};};if _dfeg ==0{_agab ._ccfc =true ;};_bbb .set (_fgf ,_agab );_bbb =_agab ;};return nil ;};const (_ tiffType =iota ;_ce ;_fc ;_fdb ;);type code struct{Code uint16 ;BitsWritten int ;
};type Decoder struct{_dfe int ;_egb int ;_gcb int ;_acf []byte ;_dbd int ;_fdd bool ;_dc bool ;_fb bool ;_ace bool ;_egc bool ;_ea bool ;_abb bool ;_gfd int ;_aadb int ;_bca []int ;_cf []int ;_gca int ;_edd int ;_ged int ;_dfeb int ;_aga *_b .Reader ;
_ee tiffType ;_abd error ;};func (_de *Encoder )Encode (pixels [][]byte )[]byte {if _de .BlackIs1 {_abe =0;_eaa =1;}else {_abe =1;_eaa =0;};if _de .K ==0{return _de .encodeG31D (pixels );};if _de .K > 0{return _de .encodeG32D (pixels );};if _de .K < 0{return _de .encodeG4 (pixels );
};return nil ;};func _dfba (_gfcb int )([]byte ,int ){var _cdde []byte ;for _fbb :=0;_fbb < 6;_fbb ++{_cdde ,_gfcb =_gdfg (_cdde ,_gfcb ,_bec );};return _cdde ,_gfcb %8;};var _gc =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
var (_gea map[int ]code ;_fgb map[int ]code ;_cag map[int ]code ;_fdf map[int ]code ;_bf map[int ]code ;_gg map[int ]byte ;_bec =code {Code :1<<4,BitsWritten :12};_bbc =code {Code :3<<3,BitsWritten :13};_cg =code {Code :2<<3,BitsWritten :13};_bc =code {Code :1<<12,BitsWritten :4};
_geb =code {Code :1<<13,BitsWritten :3};_gec =code {Code :1<<15,BitsWritten :1};_dda =code {Code :3<<13,BitsWritten :3};_gbed =code {Code :3<<10,BitsWritten :6};_da =code {Code :3<<9,BitsWritten :7};_gfc =code {Code :2<<13,BitsWritten :3};_ga =code {Code :2<<10,BitsWritten :6};
_ccd =code {Code :2<<9,BitsWritten :7};);func (_ddf *treeNode )walk (_gcfa bool )*treeNode {if _gcfa {return _ddf ._cebf ;};return _ddf ._geab ;};