//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_c "errors";_b "math";);func (_gae *Encoder )encodeG4 (_gee [][]byte )[]byte {_afe :=make ([][]byte ,len (_gee ));copy (_afe ,_gee );_afe =_gga (_afe );var _cdde []byte ;var _acf int ;for _aeaa :=1;_aeaa < len (_afe );_aeaa ++{if _gae .Rows > 0&&!_gae .EndOfBlock &&_aeaa ==(_gae .Rows +1){break ;};var _edaa []byte ;var _fbgb ,_dcf ,_cfe int ;_ceab :=_acf ;_cbg :=-1;for _cbg < len (_afe [_aeaa ]){_fbgb =_bcfe (_afe [_aeaa ],_cbg );_dcf =_cfb (_afe [_aeaa ],_afe [_aeaa -1],_cbg );_cfe =_bcfe (_afe [_aeaa -1],_dcf );if _cfe < _fbgb {_edaa ,_ceab =_eaba (_edaa ,_ceab ,_ab );_cbg =_cfe ;}else {if _b .Abs (float64 (_dcf -_fbgb ))> 3{_edaa ,_ceab ,_cbg =_gccd (_afe [_aeaa ],_edaa ,_ceab ,_cbg ,_fbgb );}else {_edaa ,_ceab =_dacd (_edaa ,_ceab ,_fbgb ,_dcf );_cbg =_fbgb ;};};};_cdde =_gae .appendEncodedRow (_cdde ,_edaa ,_acf );if _gae .EncodedByteAlign {_ceab =0;};_acf =_ceab %8;};if _gae .EndOfBlock {_eca ,_ :=_bbc (_acf );_cdde =_gae .appendEncodedRow (_cdde ,_eca ,_acf );};return _cdde ;};func (_gaf *Encoder )decodeG31D (_fcc []byte )([][]byte ,error ){var _aea [][]byte ;var _bf int ;for (_bf /8)< len (_fcc ){var _ea bool ;_ea ,_bf =_adbd (_fcc ,_bf );if !_ea {if _gaf .EndOfLine {return nil ,_e ;};}else {for _de :=0;_de < 5;_de ++{_ea ,_bf =_adbd (_fcc ,_bf );if !_ea {if _de ==0{break ;};return nil ,_g ;};};if _ea {break ;};};var _agb []byte ;_agb ,_bf =_gaf .decodeRow1D (_fcc ,_bf );if _gaf .EncodedByteAlign &&_bf %8!=0{_bf +=8-_bf %8;};_aea =append (_aea ,_agb );if _gaf .Rows > 0&&!_gaf .EndOfBlock &&len (_aea )>=_gaf .Rows {break ;};};return _aea ,nil ;};func init (){_a =make (map[int ]code );_a [0]=code {Code :13<<8|3<<6,BitsWritten :10};_a [1]=code {Code :2<<(5+8),BitsWritten :3};_a [2]=code {Code :3<<(6+8),BitsWritten :2};_a [3]=code {Code :2<<(6+8),BitsWritten :2};_a [4]=code {Code :3<<(5+8),BitsWritten :3};_a [5]=code {Code :3<<(4+8),BitsWritten :4};_a [6]=code {Code :2<<(4+8),BitsWritten :4};_a [7]=code {Code :3<<(3+8),BitsWritten :5};_a [8]=code {Code :5<<(2+8),BitsWritten :6};_a [9]=code {Code :4<<(2+8),BitsWritten :6};_a [10]=code {Code :4<<(1+8),BitsWritten :7};_a [11]=code {Code :5<<(1+8),BitsWritten :7};_a [12]=code {Code :7<<(1+8),BitsWritten :7};_a [13]=code {Code :4<<8,BitsWritten :8};_a [14]=code {Code :7<<8,BitsWritten :8};_a [15]=code {Code :12<<8,BitsWritten :9};_a [16]=code {Code :5<<8|3<<6,BitsWritten :10};_a [17]=code {Code :6<<8,BitsWritten :10};_a [18]=code {Code :2<<8,BitsWritten :10};_a [19]=code {Code :12<<8|7<<5,BitsWritten :11};_a [20]=code {Code :13<<8,BitsWritten :11};_a [21]=code {Code :13<<8|4<<5,BitsWritten :11};_a [22]=code {Code :6<<8|7<<5,BitsWritten :11};_a [23]=code {Code :5<<8,BitsWritten :11};_a [24]=code {Code :2<<8|7<<5,BitsWritten :11};_a [25]=code {Code :3<<8,BitsWritten :11};_a [26]=code {Code :12<<8|10<<4,BitsWritten :12};_a [27]=code {Code :12<<8|11<<4,BitsWritten :12};_a [28]=code {Code :12<<8|12<<4,BitsWritten :12};_a [29]=code {Code :12<<8|13<<4,BitsWritten :12};_a [30]=code {Code :6<<8|8<<4,BitsWritten :12};_a [31]=code {Code :6<<8|9<<4,BitsWritten :12};_a [32]=code {Code :6<<8|10<<4,BitsWritten :12};_a [33]=code {Code :6<<8|11<<4,BitsWritten :12};_a [34]=code {Code :13<<8|2<<4,BitsWritten :12};_a [35]=code {Code :13<<8|3<<4,BitsWritten :12};_a [36]=code {Code :13<<8|4<<4,BitsWritten :12};_a [37]=code {Code :13<<8|5<<4,BitsWritten :12};_a [38]=code {Code :13<<8|6<<4,BitsWritten :12};_a [39]=code {Code :13<<8|7<<4,BitsWritten :12};_a [40]=code {Code :6<<8|12<<4,BitsWritten :12};_a [41]=code {Code :6<<8|13<<4,BitsWritten :12};_a [42]=code {Code :13<<8|10<<4,BitsWritten :12};_a [43]=code {Code :13<<8|11<<4,BitsWritten :12};_a [44]=code {Code :5<<8|4<<4,BitsWritten :12};_a [45]=code {Code :5<<8|5<<4,BitsWritten :12};_a [46]=code {Code :5<<8|6<<4,BitsWritten :12};_a [47]=code {Code :5<<8|7<<4,BitsWritten :12};_a [48]=code {Code :6<<8|4<<4,BitsWritten :12};_a [49]=code {Code :6<<8|5<<4,BitsWritten :12};_a [50]=code {Code :5<<8|2<<4,BitsWritten :12};_a [51]=code {Code :5<<8|3<<4,BitsWritten :12};_a [52]=code {Code :2<<8|4<<4,BitsWritten :12};_a [53]=code {Code :3<<8|7<<4,BitsWritten :12};_a [54]=code {Code :3<<8|8<<4,BitsWritten :12};_a [55]=code {Code :2<<8|7<<4,BitsWritten :12};_a [56]=code {Code :2<<8|8<<4,BitsWritten :12};_a [57]=code {Code :5<<8|8<<4,BitsWritten :12};_a [58]=code {Code :5<<8|9<<4,BitsWritten :12};_a [59]=code {Code :2<<8|11<<4,BitsWritten :12};_a [60]=code {Code :2<<8|12<<4,BitsWritten :12};_a [61]=code {Code :5<<8|10<<4,BitsWritten :12};_a [62]=code {Code :6<<8|6<<4,BitsWritten :12};_a [63]=code {Code :6<<8|7<<4,BitsWritten :12};_af =make (map[int ]code );_af [0]=code {Code :53<<8,BitsWritten :8};_af [1]=code {Code :7<<(2+8),BitsWritten :6};_af [2]=code {Code :7<<(4+8),BitsWritten :4};_af [3]=code {Code :8<<(4+8),BitsWritten :4};_af [4]=code {Code :11<<(4+8),BitsWritten :4};_af [5]=code {Code :12<<(4+8),BitsWritten :4};_af [6]=code {Code :14<<(4+8),BitsWritten :4};_af [7]=code {Code :15<<(4+8),BitsWritten :4};_af [8]=code {Code :19<<(3+8),BitsWritten :5};_af [9]=code {Code :20<<(3+8),BitsWritten :5};_af [10]=code {Code :7<<(3+8),BitsWritten :5};_af [11]=code {Code :8<<(3+8),BitsWritten :5};_af [12]=code {Code :8<<(2+8),BitsWritten :6};_af [13]=code {Code :3<<(2+8),BitsWritten :6};_af [14]=code {Code :52<<(2+8),BitsWritten :6};_af [15]=code {Code :53<<(2+8),BitsWritten :6};_af [16]=code {Code :42<<(2+8),BitsWritten :6};_af [17]=code {Code :43<<(2+8),BitsWritten :6};_af [18]=code {Code :39<<(1+8),BitsWritten :7};_af [19]=code {Code :12<<(1+8),BitsWritten :7};_af [20]=code {Code :8<<(1+8),BitsWritten :7};_af [21]=code {Code :23<<(1+8),BitsWritten :7};_af [22]=code {Code :3<<(1+8),BitsWritten :7};_af [23]=code {Code :4<<(1+8),BitsWritten :7};_af [24]=code {Code :40<<(1+8),BitsWritten :7};_af [25]=code {Code :43<<(1+8),BitsWritten :7};_af [26]=code {Code :19<<(1+8),BitsWritten :7};_af [27]=code {Code :36<<(1+8),BitsWritten :7};_af [28]=code {Code :24<<(1+8),BitsWritten :7};_af [29]=code {Code :2<<8,BitsWritten :8};_af [30]=code {Code :3<<8,BitsWritten :8};_af [31]=code {Code :26<<8,BitsWritten :8};_af [32]=code {Code :27<<8,BitsWritten :8};_af [33]=code {Code :18<<8,BitsWritten :8};_af [34]=code {Code :19<<8,BitsWritten :8};_af [35]=code {Code :20<<8,BitsWritten :8};_af [36]=code {Code :21<<8,BitsWritten :8};_af [37]=code {Code :22<<8,BitsWritten :8};_af [38]=code {Code :23<<8,BitsWritten :8};_af [39]=code {Code :40<<8,BitsWritten :8};_af [40]=code {Code :41<<8,BitsWritten :8};_af [41]=code {Code :42<<8,BitsWritten :8};_af [42]=code {Code :43<<8,BitsWritten :8};_af [43]=code {Code :44<<8,BitsWritten :8};_af [44]=code {Code :45<<8,BitsWritten :8};_af [45]=code {Code :4<<8,BitsWritten :8};_af [46]=code {Code :5<<8,BitsWritten :8};_af [47]=code {Code :10<<8,BitsWritten :8};_af [48]=code {Code :11<<8,BitsWritten :8};_af [49]=code {Code :82<<8,BitsWritten :8};_af [50]=code {Code :83<<8,BitsWritten :8};_af [51]=code {Code :84<<8,BitsWritten :8};_af [52]=code {Code :85<<8,BitsWritten :8};_af [53]=code {Code :36<<8,BitsWritten :8};_af [54]=code {Code :37<<8,BitsWritten :8};_af [55]=code {Code :88<<8,BitsWritten :8};_af [56]=code {Code :89<<8,BitsWritten :8};_af [57]=code {Code :90<<8,BitsWritten :8};_af [58]=code {Code :91<<8,BitsWritten :8};_af [59]=code {Code :74<<8,BitsWritten :8};_af [60]=code {Code :75<<8,BitsWritten :8};_af [61]=code {Code :50<<8,BitsWritten :8};_af [62]=code {Code :51<<8,BitsWritten :8};_af [63]=code {Code :52<<8,BitsWritten :8};_ad =make (map[int ]code );_ad [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ad [128]=code {Code :12<<8|8<<4,BitsWritten :12};_ad [192]=code {Code :12<<8|9<<4,BitsWritten :12};_ad [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ad [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ad [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ad [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ad [512]=code {Code :3<<8|12<<3,BitsWritten :13};_ad [576]=code {Code :3<<8|13<<3,BitsWritten :13};_ad [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ad [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ad [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ad [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ad [896]=code {Code :3<<8|18<<3,BitsWritten :13};_ad [960]=code {Code :3<<8|19<<3,BitsWritten :13};_ad [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ad [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ad [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ad [1216]=code {Code :119<<3,BitsWritten :13};_ad [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_ad [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_ad [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ad [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ad [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ad [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_ad [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_ad [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_ag =make (map[int ]code );_ag [64]=code {Code :27<<(3+8),BitsWritten :5};_ag [128]=code {Code :18<<(3+8),BitsWritten :5};_ag [192]=code {Code :23<<(2+8),BitsWritten :6};_ag [256]=code {Code :55<<(1+8),BitsWritten :7};_ag [320]=code {Code :54<<8,BitsWritten :8};_ag [384]=code {Code :55<<8,BitsWritten :8};_ag [448]=code {Code :100<<8,BitsWritten :8};_ag [512]=code {Code :101<<8,BitsWritten :8};_ag [576]=code {Code :104<<8,BitsWritten :8};_ag [640]=code {Code :103<<8,BitsWritten :8};_ag [704]=code {Code :102<<8,BitsWritten :9};_ag [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ag [832]=code {Code :105<<8,BitsWritten :9};_ag [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ag [960]=code {Code :106<<8,BitsWritten :9};_ag [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ag [1088]=code {Code :107<<8,BitsWritten :9};_ag [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ag [1216]=code {Code :108<<8,BitsWritten :9};_ag [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ag [1344]=code {Code :109<<8,BitsWritten :9};_ag [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ag [1472]=code {Code :76<<8,BitsWritten :9};_ag [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ag [1600]=code {Code :77<<8,BitsWritten :9};_ag [1664]=code {Code :24<<(2+8),BitsWritten :6};_ag [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_be =make (map[int ]code );_be [1792]=code {Code :1<<8,BitsWritten :11};_be [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_be [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_be [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_be [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_be [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_be [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_be [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_be [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_be [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_be [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_be [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_be [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_d =make (map[int ]byte );_d [0]=0xFF;_d [1]=0xFE;_d [2]=0xFC;_d [3]=0xF8;_d [4]=0xF0;_d [5]=0xE0;_d [6]=0xC0;_d [7]=0x80;_d [8]=0x00;};func _dcce (_caf []byte ,_fgg int ,_ffe int ,_fdd bool )([]byte ,int ){var (_efea code ;_abe bool ;);for !_abe {_efea ,_ffe ,_abe =_fcbf (_ffe ,_fdd );_caf ,_fgg =_eaba (_caf ,_fgg ,_efea );};return _caf ,_fgg ;};func _bfb (_cbe []byte ,_dbc int )(uint16 ,int ,int ){_abb :=_dbc ;_bdbf :=_dbc /8;_dbc %=8;if _bdbf >=len (_cbe ){return 0,16,_abb ;};_fcd :=byte (0xFF>>uint (_dbc ));_ead :=uint16 ((_cbe [_bdbf ]&_fcd )<<uint (_dbc ))<<8;_fea :=8-_dbc ;_bdbf ++;_dbc =0;if _bdbf >=len (_cbe ){return _ead >>(16-uint (_fea )),16-_fea ,_abb +_fea ;};_ead |=uint16 (_cbe [_bdbf ])<<(8-uint (_fea ));_fea +=8;_bdbf ++;_dbc =0;if _bdbf >=len (_cbe ){return _ead >>(16-uint (_fea )),16-_fea ,_abb +_fea ;};if _fea ==16{return _ead ,0,_abb +_fea ;};_afg :=16-_fea ;_ead |=uint16 (_cbe [_bdbf ]>>(8-uint (_afg )));return _ead ,0,_abb +16;};func init (){for _ef ,_afa :=range _af {_bab (_dg ,_afa ,0,_ef );};for _dgg ,_gc :=range _ag {_bab (_dg ,_gc ,0,_dgg );};for _fb ,_cfc :=range _a {_bab (_ga ,_cfc ,0,_fb );};for _fge ,_ac :=range _ad {_bab (_ga ,_ac ,0,_fge );};for _fff ,_aef :=range _be {_bab (_dg ,_aef ,0,_fff );_bab (_ga ,_aef ,0,_fff );};_bab (_ge ,_ab ,0,0);_bab (_ge ,_da ,0,0);_bab (_ge ,_bd ,0,0);_bab (_ge ,_bg ,0,0);_bab (_ge ,_db ,0,0);_bab (_ge ,_ae ,0,0);_bab (_ge ,_bgd ,0,0);_bab (_ge ,_bec ,0,0);_bab (_ge ,_dde ,0,0);};func (_edf *Encoder )encodeG31D (_bdg [][]byte )[]byte {var _afb []byte ;_dae :=0;for _gge :=range _bdg {if _edf .Rows > 0&&!_edf .EndOfBlock &&_gge ==_edf .Rows {break ;};_eda ,_ecd :=_feaa (_bdg [_gge ],_dae ,_dd );_afb =_edf .appendEncodedRow (_afb ,_eda ,_dae );if _edf .EncodedByteAlign {_ecd =0;};_dae =_ecd ;};if _edf .EndOfBlock {_fab ,_ :=_aebe (_dae );_afb =_edf .appendEncodedRow (_afb ,_fab ,_dae );};return _afb ;};func _fcba (_gf [][]byte ,_cd []byte ,_dad bool ,_df int )([]byte ,int ){_cgc :=_gefa (_cd ,_gf [len (_gf )-1],_df ,_dad );_cgg :=_bcfe (_gf [len (_gf )-1],_cgc );if _df ==-1{_cd =_adc (_cd ,_dad ,_cgg -_df -1);}else {_cd =_adc (_cd ,_dad ,_cgg -_df );};_df =_cgg ;return _cd ,_df ;};func _bbc (_fdf int )([]byte ,int ){var _cegd []byte ;for _cbef :=0;_cbef < 2;_cbef ++{_cegd ,_fdf =_eaba (_cegd ,_fdf ,_dd );};return _cegd ,_fdf %8;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_gac *Encoder )decodeG32D (_ce []byte )([][]byte ,error ){var (_cg [][]byte ;_fe int ;_afd error ;);_gg :for (_fe /8)< len (_ce ){var _aeb bool ;_aeb ,_fe ,_afd =_becc (_ce ,_fe );if _afd !=nil {return nil ,_afd ;};if _aeb {break ;};_aeb ,_fe =_fde (_ce ,_fe );if !_aeb {if _gac .EndOfLine {return nil ,_e ;};};var _dgc []byte ;_dgc ,_fe =_gac .decodeRow1D (_ce ,_fe );if _gac .EncodedByteAlign &&_fe %8!=0{_fe +=8-_fe %8;};if _dgc !=nil {_cg =append (_cg ,_dgc );};if _gac .Rows > 0&&!_gac .EndOfBlock &&len (_cg )>=_gac .Rows {break ;};for _bgb :=1;_bgb < _gac .K &&(_fe /8)< len (_ce );_bgb ++{_aeb ,_fe =_dbag (_ce ,_fe );if !_aeb {_aeb ,_fe ,_afd =_becc (_ce ,_fe );if _afd !=nil {return nil ,_afd ;};if _aeb {break _gg ;}else {if _gac .EndOfLine {return nil ,_e ;};};};var (_cac code ;_afae bool ;);_bb :=true ;var _gcg []byte ;_dee :=-1;for _cac ,_fe ,_afae =_ggc (_ce ,_fe );_afae ;_cac ,_fe ,_afae =_ggc (_ce ,_fe ){switch _cac {case _ab :_gcg ,_dee =_fcba (_cg ,_gcg ,_bb ,_dee );case _da :_gcg ,_fe ,_dee ,_afd =_dgd (_ce ,_gcg ,_fe ,_bb ,_dee );if _afd !=nil {return nil ,_afd ;};case _bd :_gcg ,_dee =_afab (_cg ,_gcg ,_bb ,_dee ,0);_bb =!_bb ;case _bg :_gcg ,_dee =_afab (_cg ,_gcg ,_bb ,_dee ,1);_bb =!_bb ;case _db :_gcg ,_dee =_afab (_cg ,_gcg ,_bb ,_dee ,2);_bb =!_bb ;case _ae :_gcg ,_dee =_afab (_cg ,_gcg ,_bb ,_dee ,3);_bb =!_bb ;case _bgd :_gcg ,_dee =_afab (_cg ,_gcg ,_bb ,_dee ,-1);_bb =!_bb ;case _bec :_gcg ,_dee =_afab (_cg ,_gcg ,_bb ,_dee ,-2);_bb =!_bb ;case _dde :_gcg ,_dee =_afab (_cg ,_gcg ,_bb ,_dee ,-3);_bb =!_bb ;};if len (_gcg )>=_gac .Columns {break ;};};if _gac .EncodedByteAlign &&_fe %8!=0{_fe +=8-_fe %8;};if _gcg !=nil {_cg =append (_cg ,_gcg );};if _gac .Rows > 0&&!_gac .EndOfBlock &&len (_cg )>=_gac .Rows {break _gg ;};};};return _cg ,nil ;};func _cfb (_gabd ,_gacd []byte ,_cgfc int )int {_gbg :=_bcfe (_gacd ,_cgfc );if _gbg < len (_gacd )&&(_cgfc ==-1&&_gacd [_gbg ]==_cce ||_cgfc >=0&&_cgfc < len (_gabd )&&_gabd [_cgfc ]==_gacd [_gbg ]||_cgfc >=len (_gabd )&&_gabd [_cgfc -1]!=_gacd [_gbg ]){_gbg =_bcfe (_gacd ,_gbg );};return _gbg ;};func _ddc (_ece uint16 ,_ede int )byte {if _ede < 8{_ece >>=8;};_ede %=8;_ffd :=byte (0x01<<(7-uint (_ede )));return (byte (_ece )&_ffd )>>(7-uint (_ede ));};func _edb (_ege uint16 ,_edbc int )(code ,bool ){_ ,_bdd :=_cfcg (_ge ,_ege ,_edbc );if _bdd ==nil {return code {},false ;};return *_bdd ,true ;};func _afab (_bag [][]byte ,_beb []byte ,_ec bool ,_fcb ,_gcc int )([]byte ,int ){_dag :=_gefa (_beb ,_bag [len (_bag )-1],_fcb ,_ec );_ed :=_dag +_gcc ;if _fcb ==-1{_beb =_adc (_beb ,_ec ,_ed -_fcb -1);}else {_beb =_adc (_beb ,_ec ,_ed -_fcb );};_fcb =_ed ;return _beb ,_fcb ;};func _bcfe (_ggd []byte ,_eag int )int {if _eag >=len (_ggd ){return _eag ;};if _eag < -1{_eag =-1;};var _fad byte ;if _eag > -1{_fad =_ggd [_eag ];}else {_fad =_cce ;};_gaa :=_eag +1;for _gaa < len (_ggd ){if _ggd [_gaa ]!=_fad {break ;};_gaa ++;};return _gaa ;};func _bgab (_ddcg uint16 ,_efa int ,_gef bool )(int ,code ){var _bcg *int ;var _cag *code ;if _gef {_bcg ,_cag =_cfcg (_dg ,_ddcg ,_efa );}else {_bcg ,_cag =_cfcg (_ga ,_ddcg ,_efa );};if _bcg ==nil {return -1,code {};};return *_bcg ,*_cag ;};func (_ceb *Encoder )encodeG32D (_bceb [][]byte )[]byte {var _agg []byte ;var _dbba int ;for _bdf :=0;_bdf < len (_bceb );_bdf +=_ceb .K {if _ceb .Rows > 0&&!_ceb .EndOfBlock &&_bdf ==_ceb .Rows {break ;};_cab ,_dfg :=_feaa (_bceb [_bdf ],_dbba ,_ff );_agg =_ceb .appendEncodedRow (_agg ,_cab ,_dbba );if _ceb .EncodedByteAlign {_dfg =0;};_dbba =_dfg ;for _gbb :=_bdf +1;_gbb < (_bdf +_ceb .K )&&_gbb < len (_bceb );_gbb ++{if _ceb .Rows > 0&&!_ceb .EndOfBlock &&_gbb ==_ceb .Rows {break ;};_gbcd ,_gcac :=_eaba (nil ,_dbba ,_fd );var _gcf ,_aba ,_decc int ;_acg :=-1;for _acg < len (_bceb [_gbb ]){_gcf =_bcfe (_bceb [_gbb ],_acg );_aba =_cfb (_bceb [_gbb ],_bceb [_gbb -1],_acg );_decc =_bcfe (_bceb [_gbb -1],_aba );if _decc < _gcf {_gbcd ,_gcac =_cgcfe (_gbcd ,_gcac );_acg =_decc ;}else {if _b .Abs (float64 (_aba -_gcf ))> 3{_gbcd ,_gcac ,_acg =_gccd (_bceb [_gbb ],_gbcd ,_gcac ,_acg ,_gcf );}else {_gbcd ,_gcac =_dacd (_gbcd ,_gcac ,_gcf ,_aba );_acg =_gcf ;};};};_agg =_ceb .appendEncodedRow (_agg ,_gbcd ,_dbba );if _ceb .EncodedByteAlign {_gcac =0;};_dbba =_gcac %8;};};if _ceb .EndOfBlock {_cbb ,_ :=_dcb (_dbba );_agg =_ceb .appendEncodedRow (_agg ,_cbb ,_dbba );};return _agg ;};func _caga (_ddeb []byte ,_cgf int ,_dagg code )(bool ,int ){_geff :=_cgf ;var (_daf uint16 ;_cdd int ;);_daf ,_cdd ,_cgf =_bfb (_ddeb ,_cgf );if _cdd > 3{return false ,_geff ;};_daf >>=uint (3-_cdd );_daf <<=3;if _daf !=_dagg .Code {return false ,_geff ;};return true ,_cgf -3+_cdd ;};func _bcf (_bga []byte ,_bce int ,_gfg bool )(int ,int ){var (_gd uint16 ;_cca int ;_bcef int ;);_bcef =_bce ;_gd ,_cca ,_ =_bfb (_bga ,_bce );_efd ,_eb :=_bgab (_gd ,_cca ,_gfg );if _efd ==-1{return -1,_bcef ;};return _efd ,_bcef +_eb .BitsWritten ;};func _dcb (_feg int )([]byte ,int ){var _cgcf []byte ;for _abg :=0;_abg < 6;_abg ++{_cgcf ,_feg =_eaba (_cgcf ,_feg ,_ff );};return _cgcf ,_feg %8;};func _cgda (_baf []byte ,_cdeb bool ,_bfe int )(int ,int ){_ecgc :=0;for _bfe < len (_baf ){if _cdeb {if _baf [_bfe ]!=_cce {break ;};}else {if _baf [_bfe ]!=_ffb {break ;};};_ecgc ++;_bfe ++;};return _ecgc ,_bfe ;};func (_bdb *Encoder )Decode (encoded []byte )([][]byte ,error ){if _bdb .BlackIs1 {_cce =0;_ffb =1;}else {_cce =1;_ffb =0;};if _bdb .K ==0{return _bdb .decodeG31D (encoded );};if _bdb .K > 0{return _bdb .decodeG32D (encoded );};if _bdb .K < 4{return _bdb .decodeG4 (encoded );};return nil ,nil ;};func _adbd (_fbg []byte ,_bfd int )(bool ,int ){_cde :=_bfd ;var (_dda uint16 ;_age int ;);_dda ,_age ,_bfd =_bfb (_fbg ,_bfd );if _age > 4{return false ,_cde ;};_dda >>=uint (4-_age );_dda <<=4;if _dda !=_dd .Code {return false ,_cde ;};return true ,_bfd -4+_age ;};var (_cce byte =1;_ffb byte =0;);func _adc (_eab []byte ,_gda bool ,_efe int )[]byte {if _efe < 0{return _eab ;};_adf :=make ([]byte ,_efe );if _gda {for _cec :=0;_cec < len (_adf );_cec ++{_adf [_cec ]=_cce ;};}else {for _cae :=0;_cae < len (_adf );_cae ++{_adf [_cae ]=_ffb ;};};_eab =append (_eab ,_adf ...);return _eab ;};func _gccd (_dbce ,_gcacf []byte ,_fbf ,_cgfe ,_fgd int )([]byte ,int ,int ){_abeb :=_bcfe (_dbce ,_fgd );_bfdg :=_cgfe >=0&&_dbce [_cgfe ]==_cce ||_cgfe ==-1;_gcacf ,_fbf =_eaba (_gcacf ,_fbf ,_da );var _afcc int ;if _cgfe > -1{_afcc =_fgd -_cgfe ;}else {_afcc =_fgd -_cgfe -1;};_gcacf ,_fbf =_dcce (_gcacf ,_fbf ,_afcc ,_bfdg );_bfdg =!_bfdg ;_ffbf :=_abeb -_fgd ;_gcacf ,_fbf =_dcce (_gcacf ,_fbf ,_ffbf ,_bfdg );_cgfe =_abeb ;return _gcacf ,_fbf ,_cgfe ;};func _aebe (_ebf int )([]byte ,int ){var _aed []byte ;for _gab :=0;_gab < 6;_gab ++{_aed ,_ebf =_eaba (_aed ,_ebf ,_dd );};return _aed ,_ebf %8;};func (_gefd *Encoder )appendEncodedRow (_dac ,_bgbb []byte ,_ddb int )[]byte {if len (_dac )> 0&&_ddb !=0&&!_gefd .EncodedByteAlign {_dac [len (_dac )-1]=_dac [len (_dac )-1]|_bgbb [0];_dac =append (_dac ,_bgbb [1:]...);}else {_dac =append (_dac ,_bgbb ...);};return _dac ;};func (_geb *Encoder )Encode (pixels [][]byte )[]byte {if _geb .BlackIs1 {_cce =0;_ffb =1;}else {_cce =1;_ffb =0;};if _geb .K ==0{return _geb .encodeG31D (pixels );};if _geb .K > 0{return _geb .encodeG32D (pixels );};if _geb .K < 0{return _geb .encodeG4 (pixels );};return nil ;};var (_dg =&decodingTreeNode {Val :255};_ga =&decodingTreeNode {Val :255};_ge =&decodingTreeNode {Val :255};);func _cgdc (_gbc []byte ,_ecg int )(bool ,int ,error ){_ccd :=_ecg ;var _gfe bool ;_gfe ,_ecg =_adbd (_gbc ,_ecg );if _gfe {_gfe ,_ecg =_adbd (_gbc ,_ecg );if _gfe {return true ,_ecg ,nil ;};return false ,_ccd ,_cf ;};return false ,_ccd ,nil ;};func _cgcfe (_fgbb []byte ,_afc int )([]byte ,int ){return _eaba (_fgbb ,_afc ,_ab )};func _gga (_bfeb [][]byte )[][]byte {_agf :=make ([]byte ,len (_bfeb [0]));for _bfa :=range _agf {_agf [_bfa ]=_cce ;};_bfeb =append (_bfeb ,[]byte {});for _ace :=len (_bfeb )-1;_ace > 0;_ace --{_bfeb [_ace ]=_bfeb [_ace -1];};_bfeb [0]=_agf ;return _bfeb ;};func _ggc (_dbg []byte ,_dea int )(code ,int ,bool ){var (_egf uint16 ;_eaf int ;_bcb int ;);_bcb =_dea ;_egf ,_eaf ,_ =_bfb (_dbg ,_dea );_acd ,_bff :=_edb (_egf ,_eaf );if !_bff {return code {},_bcb ,false ;};return _acd ,_bcb +_acd .BitsWritten ,true ;};func _feaa (_deec []byte ,_abf int ,_bdc code )([]byte ,int ){_gce :=true ;var _dafb []byte ;_dafb ,_abf =_eaba (nil ,_abf ,_bdc );_eff :=0;var _fbge int ;for _eff < len (_deec ){_fbge ,_eff =_cgda (_deec ,_gce ,_eff );_dafb ,_abf =_dcce (_dafb ,_abf ,_fbge ,_gce );_gce =!_gce ;};return _dafb ,_abf %8;};func _dgd (_ddg ,_ade []byte ,_dec int ,_fcf bool ,_cda int )([]byte ,int ,int ,error ){_deg :=_dec ;var _agd error ;_ade ,_dec ,_agd =_cc (_ddg ,_ade ,_dec ,_fcf );if _agd !=nil {return _ade ,_deg ,_cda ,_agd ;};_fcf =!_fcf ;_ade ,_dec ,_agd =_cc (_ddg ,_ade ,_dec ,_fcf );if _agd !=nil {return _ade ,_deg ,_cda ,_agd ;};_cda =len (_ade );return _ade ,_dec ,_cda ,nil ;};type code struct{Code uint16 ;BitsWritten int ;};func (_fgb *Encoder )decodeRow1D (_deaf []byte ,_adb int )([]byte ,int ){var _eee []byte ;_febf :=true ;var _fae int ;_fae ,_adb =_bcf (_deaf ,_adb ,_febf );for _fae !=-1{_eee =_adc (_eee ,_febf ,_fae );if _fae < 64{if len (_eee )>=_fgb .Columns {break ;};_febf =!_febf ;};_fae ,_adb =_bcf (_deaf ,_adb ,_febf );};return _eee ,_adb ;};func _bab (_cea *decodingTreeNode ,_adde code ,_cad int ,_dgge int ){_aged :=_ddc (_adde .Code ,_cad );_cad ++;if _aged ==1{if _cea .Right ==nil {_cea .Right =&decodingTreeNode {Val :_aged };};if _cad ==_adde .BitsWritten {_cea .Right .RunLen =&_dgge ;_cea .Right .Code =&_adde ;}else {_bab (_cea .Right ,_adde ,_cad ,_dgge );};}else {if _cea .Left ==nil {_cea .Left =&decodingTreeNode {Val :_aged };};if _cad ==_adde .BitsWritten {_cea .Left .RunLen =&_dgge ;_cea .Left .Code =&_adde ;}else {_bab (_cea .Left ,_adde ,_cad ,_dgge );};};};func _dacd (_cace []byte ,_bbeg ,_eccf ,_bed int )([]byte ,int ){_bedg :=_dfgf (_eccf ,_bed );_cace ,_bbeg =_eaba (_cace ,_bbeg ,_bedg );return _cace ,_bbeg ;};func _cc (_dc ,_bac []byte ,_dfb int ,_degg bool )([]byte ,int ,error ){_egd :=_dfb ;var _cgd int ;for _cgd ,_dfb =_bcf (_dc ,_dfb ,_degg );_cgd !=-1;_cgd ,_dfb =_bcf (_dc ,_dfb ,_degg ){_bac =_adc (_bac ,_degg ,_cgd );if _cgd < 64{break ;};};if _cgd ==-1{return _bac ,_egd ,_cfg ;};return _bac ,_dfb ,nil ;};func _gefa (_eea ,_fbgd []byte ,_bgg int ,_bdfa bool )int {_bdef :=_bcfe (_fbgd ,_bgg );if _bdef < len (_fbgd )&&(_bgg ==-1&&_fbgd [_bdef ]==_cce ||_bgg >=0&&_bgg < len (_eea )&&_eea [_bgg ]==_fbgd [_bdef ]||_bgg >=len (_eea )&&_bdfa &&_fbgd [_bdef ]==_cce ||_bgg >=len (_eea )&&!_bdfa &&_fbgd [_bdef ]==_ffb ){_bdef =_bcfe (_fbgd ,_bdef );};return _bdef ;};func _fde (_dcc []byte ,_gbd int )(bool ,int ){return _caga (_dcc ,_gbd ,_ff )};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};var (_cf =_c .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_ca =_c .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_cfg =_c .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_e =_c .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_g =_c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_fg =_c .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _dbag (_dcg []byte ,_beg int )(bool ,int ){return _caga (_dcg ,_beg ,_fd )};func _eaba (_daab []byte ,_gcfd int ,_fffg code )([]byte ,int ){_edef :=0;for _edef < _fffg .BitsWritten {_bae :=_gcfd /8;_fdc :=_gcfd %8;if _bae >=len (_daab ){_daab =append (_daab ,0);};_addd :=8-_fdc ;_cfga :=_fffg .BitsWritten -_edef ;if _addd > _cfga {_addd =_cfga ;};if _edef < 8{_daab [_bae ]=_daab [_bae ]|byte (_fffg .Code >>uint (8+_fdc -_edef ))&_d [8-_addd -_fdc ];}else {_daab [_bae ]=_daab [_bae ]|(byte (_fffg .Code <<uint (_edef -8))&_d [8-_addd ])>>uint (_fdc );};_gcfd +=_addd ;_edef +=_addd ;};return _daab ,_gcfd ;};func _fcbf (_ffff int ,_bde bool )(code ,int ,bool ){if _ffff < 64{if _bde {return _af [_ffff ],0,true ;};return _a [_ffff ],0,true ;};_fcbff :=_ffff /64;if _fcbff > 40{return _be [2560],_ffff -2560,false ;};if _fcbff > 27{return _be [_fcbff *64],_ffff -_fcbff *64,false ;};if _bde {return _ag [_fcbff *64],_ffff -_fcbff *64,false ;};return _ad [_fcbff *64],_ffff -_fcbff *64,false ;};func _becc (_cdg []byte ,_ee int )(bool ,int ,error ){_feb :=_ee ;var _dba =false ;for _gb :=0;_gb < 6;_gb ++{_dba ,_ee =_fde (_cdg ,_ee );if !_dba {if _gb > 1{return false ,_feb ,_ca ;};_ee =_feb ;break ;};};return _dba ,_ee ,nil ;};var (_a map[int ]code ;_af map[int ]code ;_ad map[int ]code ;_ag map[int ]code ;_be map[int ]code ;_d map[int ]byte ;_dd =code {Code :1<<4,BitsWritten :12};_ff =code {Code :3<<3,BitsWritten :13};_fd =code {Code :2<<3,BitsWritten :13};_ab =code {Code :1<<12,BitsWritten :4};_da =code {Code :1<<13,BitsWritten :3};_bd =code {Code :1<<15,BitsWritten :1};_bg =code {Code :3<<13,BitsWritten :3};_db =code {Code :3<<10,BitsWritten :6};_ae =code {Code :3<<9,BitsWritten :7};_bgd =code {Code :2<<13,BitsWritten :3};_bec =code {Code :2<<10,BitsWritten :6};_dde =code {Code :2<<9,BitsWritten :7};);func _cfcg (_fgef *decodingTreeNode ,_ecc uint16 ,_fffc int )(*int ,*code ){if _fgef ==nil {return nil ,nil ;};if _fffc ==16{return _fgef .RunLen ,_fgef .Code ;};_dadg :=_ddc (_ecc ,_fffc );_fffc ++;var _dbe *int ;var _egc *code ;if _dadg ==1{_dbe ,_egc =_cfcg (_fgef .Right ,_ecc ,_fffc );}else {_dbe ,_egc =_cfcg (_fgef .Left ,_ecc ,_fffc );};if _dbe ==nil {_dbe =_fgef .RunLen ;_egc =_fgef .Code ;};return _dbe ,_egc ;};func (_eg *Encoder )decodeG4 (_ba []byte )([][]byte ,error ){_bc :=make ([]byte ,_eg .Columns );for _daa :=range _bc {_bc [_daa ]=_cce ;};_dge :=make ([][]byte ,1);_dge [0]=_bc ;var (_cb bool ;_ceg error ;_add int ;);for (_add /8)< len (_ba ){_cb ,_add ,_ceg =_cgdc (_ba ,_add );if _ceg !=nil {return nil ,_ceg ;};if _cb {break ;};var (_fba code ;_bbe bool ;);_aa :=true ;var _gca []byte ;_fa :=-1;for _fa < _eg .Columns {_fba ,_add ,_bbe =_ggc (_ba ,_add );if !_bbe {return nil ,_fg ;};switch _fba {case _ab :_gca ,_fa =_fcba (_dge ,_gca ,_aa ,_fa );case _da :_gca ,_add ,_fa ,_ceg =_dgd (_ba ,_gca ,_add ,_aa ,_fa );if _ceg !=nil {return nil ,_ceg ;};case _bd :_gca ,_fa =_afab (_dge ,_gca ,_aa ,_fa ,0);_aa =!_aa ;case _bg :_gca ,_fa =_afab (_dge ,_gca ,_aa ,_fa ,1);_aa =!_aa ;case _db :_gca ,_fa =_afab (_dge ,_gca ,_aa ,_fa ,2);_aa =!_aa ;case _ae :_gca ,_fa =_afab (_dge ,_gca ,_aa ,_fa ,3);_aa =!_aa ;case _bgd :_gca ,_fa =_afab (_dge ,_gca ,_aa ,_fa ,-1);_aa =!_aa ;case _bec :_gca ,_fa =_afab (_dge ,_gca ,_aa ,_fa ,-2);_aa =!_aa ;case _dde :_gca ,_fa =_afab (_dge ,_gca ,_aa ,_fa ,-3);_aa =!_aa ;};if len (_gca )>=_eg .Columns {break ;};};if _eg .EncodedByteAlign &&_add %8!=0{_add +=8-_add %8;};_dge =append (_dge ,_gca );if _eg .Rows > 0&&!_eg .EndOfBlock &&len (_dge )>=(_eg .Rows +1){break ;};};_dge =_dge [1:];return _dge ,nil ;};func _dfgf (_cgcfa ,_daad int )code {var _fbad code ;switch _daad -_cgcfa {case -1:_fbad =_bg ;case -2:_fbad =_db ;case -3:_fbad =_ae ;case 0:_fbad =_bd ;case 1:_fbad =_bgd ;case 2:_fbad =_bec ;case 3:_fbad =_dde ;};return _fbad ;};