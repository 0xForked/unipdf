//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_f "errors";_ca "math";);func (_cff *Encoder )decodeRow1D (_eba []byte ,_ccd int )([]byte ,int ){var _gca []byte ;_dedg :=true ;var _cdb int ;_cdb ,_ccd =_gbe (_eba ,_ccd ,_dedg );for _cdb !=-1{_gca =_acf (_gca ,_dedg ,_cdb );
if _cdb < 64{if len (_gca )>=_cff .Columns {break ;};_dedg =!_dedg ;};_cdb ,_ccd =_gbe (_eba ,_ccd ,_dedg );};return _gca ,_ccd ;};func _eaa (_gfdf []byte ,_bdfe int ,_bgf code )(bool ,int ){_fedg :=_bdfe ;var (_eff uint16 ;_efeg int ;);_eff ,_efeg ,_bdfe =_dee (_gfdf ,_bdfe );
if _efeg > 3{return false ,_fedg ;};_eff >>=uint (3-_efeg );_eff <<=3;if _eff !=_bgf .Code {return false ,_fedg ;};return true ,_bdfe -3+_efeg ;};func init (){_e =make (map[int ]code );_e [0]=code {Code :13<<8|3<<6,BitsWritten :10};_e [1]=code {Code :2<<(5+8),BitsWritten :3};
_e [2]=code {Code :3<<(6+8),BitsWritten :2};_e [3]=code {Code :2<<(6+8),BitsWritten :2};_e [4]=code {Code :3<<(5+8),BitsWritten :3};_e [5]=code {Code :3<<(4+8),BitsWritten :4};_e [6]=code {Code :2<<(4+8),BitsWritten :4};_e [7]=code {Code :3<<(3+8),BitsWritten :5};
_e [8]=code {Code :5<<(2+8),BitsWritten :6};_e [9]=code {Code :4<<(2+8),BitsWritten :6};_e [10]=code {Code :4<<(1+8),BitsWritten :7};_e [11]=code {Code :5<<(1+8),BitsWritten :7};_e [12]=code {Code :7<<(1+8),BitsWritten :7};_e [13]=code {Code :4<<8,BitsWritten :8};
_e [14]=code {Code :7<<8,BitsWritten :8};_e [15]=code {Code :12<<8,BitsWritten :9};_e [16]=code {Code :5<<8|3<<6,BitsWritten :10};_e [17]=code {Code :6<<8,BitsWritten :10};_e [18]=code {Code :2<<8,BitsWritten :10};_e [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_e [20]=code {Code :13<<8,BitsWritten :11};_e [21]=code {Code :13<<8|4<<5,BitsWritten :11};_e [22]=code {Code :6<<8|7<<5,BitsWritten :11};_e [23]=code {Code :5<<8,BitsWritten :11};_e [24]=code {Code :2<<8|7<<5,BitsWritten :11};_e [25]=code {Code :3<<8,BitsWritten :11};
_e [26]=code {Code :12<<8|10<<4,BitsWritten :12};_e [27]=code {Code :12<<8|11<<4,BitsWritten :12};_e [28]=code {Code :12<<8|12<<4,BitsWritten :12};_e [29]=code {Code :12<<8|13<<4,BitsWritten :12};_e [30]=code {Code :6<<8|8<<4,BitsWritten :12};_e [31]=code {Code :6<<8|9<<4,BitsWritten :12};
_e [32]=code {Code :6<<8|10<<4,BitsWritten :12};_e [33]=code {Code :6<<8|11<<4,BitsWritten :12};_e [34]=code {Code :13<<8|2<<4,BitsWritten :12};_e [35]=code {Code :13<<8|3<<4,BitsWritten :12};_e [36]=code {Code :13<<8|4<<4,BitsWritten :12};_e [37]=code {Code :13<<8|5<<4,BitsWritten :12};
_e [38]=code {Code :13<<8|6<<4,BitsWritten :12};_e [39]=code {Code :13<<8|7<<4,BitsWritten :12};_e [40]=code {Code :6<<8|12<<4,BitsWritten :12};_e [41]=code {Code :6<<8|13<<4,BitsWritten :12};_e [42]=code {Code :13<<8|10<<4,BitsWritten :12};_e [43]=code {Code :13<<8|11<<4,BitsWritten :12};
_e [44]=code {Code :5<<8|4<<4,BitsWritten :12};_e [45]=code {Code :5<<8|5<<4,BitsWritten :12};_e [46]=code {Code :5<<8|6<<4,BitsWritten :12};_e [47]=code {Code :5<<8|7<<4,BitsWritten :12};_e [48]=code {Code :6<<8|4<<4,BitsWritten :12};_e [49]=code {Code :6<<8|5<<4,BitsWritten :12};
_e [50]=code {Code :5<<8|2<<4,BitsWritten :12};_e [51]=code {Code :5<<8|3<<4,BitsWritten :12};_e [52]=code {Code :2<<8|4<<4,BitsWritten :12};_e [53]=code {Code :3<<8|7<<4,BitsWritten :12};_e [54]=code {Code :3<<8|8<<4,BitsWritten :12};_e [55]=code {Code :2<<8|7<<4,BitsWritten :12};
_e [56]=code {Code :2<<8|8<<4,BitsWritten :12};_e [57]=code {Code :5<<8|8<<4,BitsWritten :12};_e [58]=code {Code :5<<8|9<<4,BitsWritten :12};_e [59]=code {Code :2<<8|11<<4,BitsWritten :12};_e [60]=code {Code :2<<8|12<<4,BitsWritten :12};_e [61]=code {Code :5<<8|10<<4,BitsWritten :12};
_e [62]=code {Code :6<<8|6<<4,BitsWritten :12};_e [63]=code {Code :6<<8|7<<4,BitsWritten :12};_d =make (map[int ]code );_d [0]=code {Code :53<<8,BitsWritten :8};_d [1]=code {Code :7<<(2+8),BitsWritten :6};_d [2]=code {Code :7<<(4+8),BitsWritten :4};_d [3]=code {Code :8<<(4+8),BitsWritten :4};
_d [4]=code {Code :11<<(4+8),BitsWritten :4};_d [5]=code {Code :12<<(4+8),BitsWritten :4};_d [6]=code {Code :14<<(4+8),BitsWritten :4};_d [7]=code {Code :15<<(4+8),BitsWritten :4};_d [8]=code {Code :19<<(3+8),BitsWritten :5};_d [9]=code {Code :20<<(3+8),BitsWritten :5};
_d [10]=code {Code :7<<(3+8),BitsWritten :5};_d [11]=code {Code :8<<(3+8),BitsWritten :5};_d [12]=code {Code :8<<(2+8),BitsWritten :6};_d [13]=code {Code :3<<(2+8),BitsWritten :6};_d [14]=code {Code :52<<(2+8),BitsWritten :6};_d [15]=code {Code :53<<(2+8),BitsWritten :6};
_d [16]=code {Code :42<<(2+8),BitsWritten :6};_d [17]=code {Code :43<<(2+8),BitsWritten :6};_d [18]=code {Code :39<<(1+8),BitsWritten :7};_d [19]=code {Code :12<<(1+8),BitsWritten :7};_d [20]=code {Code :8<<(1+8),BitsWritten :7};_d [21]=code {Code :23<<(1+8),BitsWritten :7};
_d [22]=code {Code :3<<(1+8),BitsWritten :7};_d [23]=code {Code :4<<(1+8),BitsWritten :7};_d [24]=code {Code :40<<(1+8),BitsWritten :7};_d [25]=code {Code :43<<(1+8),BitsWritten :7};_d [26]=code {Code :19<<(1+8),BitsWritten :7};_d [27]=code {Code :36<<(1+8),BitsWritten :7};
_d [28]=code {Code :24<<(1+8),BitsWritten :7};_d [29]=code {Code :2<<8,BitsWritten :8};_d [30]=code {Code :3<<8,BitsWritten :8};_d [31]=code {Code :26<<8,BitsWritten :8};_d [32]=code {Code :27<<8,BitsWritten :8};_d [33]=code {Code :18<<8,BitsWritten :8};
_d [34]=code {Code :19<<8,BitsWritten :8};_d [35]=code {Code :20<<8,BitsWritten :8};_d [36]=code {Code :21<<8,BitsWritten :8};_d [37]=code {Code :22<<8,BitsWritten :8};_d [38]=code {Code :23<<8,BitsWritten :8};_d [39]=code {Code :40<<8,BitsWritten :8};
_d [40]=code {Code :41<<8,BitsWritten :8};_d [41]=code {Code :42<<8,BitsWritten :8};_d [42]=code {Code :43<<8,BitsWritten :8};_d [43]=code {Code :44<<8,BitsWritten :8};_d [44]=code {Code :45<<8,BitsWritten :8};_d [45]=code {Code :4<<8,BitsWritten :8};_d [46]=code {Code :5<<8,BitsWritten :8};
_d [47]=code {Code :10<<8,BitsWritten :8};_d [48]=code {Code :11<<8,BitsWritten :8};_d [49]=code {Code :82<<8,BitsWritten :8};_d [50]=code {Code :83<<8,BitsWritten :8};_d [51]=code {Code :84<<8,BitsWritten :8};_d [52]=code {Code :85<<8,BitsWritten :8};
_d [53]=code {Code :36<<8,BitsWritten :8};_d [54]=code {Code :37<<8,BitsWritten :8};_d [55]=code {Code :88<<8,BitsWritten :8};_d [56]=code {Code :89<<8,BitsWritten :8};_d [57]=code {Code :90<<8,BitsWritten :8};_d [58]=code {Code :91<<8,BitsWritten :8};
_d [59]=code {Code :74<<8,BitsWritten :8};_d [60]=code {Code :75<<8,BitsWritten :8};_d [61]=code {Code :50<<8,BitsWritten :8};_d [62]=code {Code :51<<8,BitsWritten :8};_d [63]=code {Code :52<<8,BitsWritten :8};_fg =make (map[int ]code );_fg [64]=code {Code :3<<8|3<<6,BitsWritten :10};
_fg [128]=code {Code :12<<8|8<<4,BitsWritten :12};_fg [192]=code {Code :12<<8|9<<4,BitsWritten :12};_fg [256]=code {Code :5<<8|11<<4,BitsWritten :12};_fg [320]=code {Code :3<<8|3<<4,BitsWritten :12};_fg [384]=code {Code :3<<8|4<<4,BitsWritten :12};_fg [448]=code {Code :3<<8|5<<4,BitsWritten :12};
_fg [512]=code {Code :3<<8|12<<3,BitsWritten :13};_fg [576]=code {Code :3<<8|13<<3,BitsWritten :13};_fg [640]=code {Code :2<<8|10<<3,BitsWritten :13};_fg [704]=code {Code :2<<8|11<<3,BitsWritten :13};_fg [768]=code {Code :2<<8|12<<3,BitsWritten :13};_fg [832]=code {Code :2<<8|13<<3,BitsWritten :13};
_fg [896]=code {Code :3<<8|18<<3,BitsWritten :13};_fg [960]=code {Code :3<<8|19<<3,BitsWritten :13};_fg [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_fg [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_fg [1152]=code {Code :3<<8|22<<3,BitsWritten :13};
_fg [1216]=code {Code :119<<3,BitsWritten :13};_fg [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_fg [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_fg [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_fg [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_fg [1536]=code {Code :2<<8|26<<3,BitsWritten :13};
_fg [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_fg [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_fg [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_cc =make (map[int ]code );_cc [64]=code {Code :27<<(3+8),BitsWritten :5};_cc [128]=code {Code :18<<(3+8),BitsWritten :5};
_cc [192]=code {Code :23<<(2+8),BitsWritten :6};_cc [256]=code {Code :55<<(1+8),BitsWritten :7};_cc [320]=code {Code :54<<8,BitsWritten :8};_cc [384]=code {Code :55<<8,BitsWritten :8};_cc [448]=code {Code :100<<8,BitsWritten :8};_cc [512]=code {Code :101<<8,BitsWritten :8};
_cc [576]=code {Code :104<<8,BitsWritten :8};_cc [640]=code {Code :103<<8,BitsWritten :8};_cc [704]=code {Code :102<<8,BitsWritten :9};_cc [768]=code {Code :102<<8|1<<7,BitsWritten :9};_cc [832]=code {Code :105<<8,BitsWritten :9};_cc [896]=code {Code :105<<8|1<<7,BitsWritten :9};
_cc [960]=code {Code :106<<8,BitsWritten :9};_cc [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_cc [1088]=code {Code :107<<8,BitsWritten :9};_cc [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_cc [1216]=code {Code :108<<8,BitsWritten :9};_cc [1280]=code {Code :108<<8|1<<7,BitsWritten :9};
_cc [1344]=code {Code :109<<8,BitsWritten :9};_cc [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_cc [1472]=code {Code :76<<8,BitsWritten :9};_cc [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_cc [1600]=code {Code :77<<8,BitsWritten :9};_cc [1664]=code {Code :24<<(2+8),BitsWritten :6};
_cc [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_eg =make (map[int ]code );_eg [1792]=code {Code :1<<8,BitsWritten :11};_eg [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_eg [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_eg [1984]=code {Code :1<<8|2<<4,BitsWritten :12};
_eg [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_eg [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_eg [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_eg [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_eg [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_eg [2368]=code {Code :1<<8|12<<4,BitsWritten :12};
_eg [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_eg [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_eg [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ea =make (map[int ]byte );_ea [0]=0xFF;_ea [1]=0xFE;_ea [2]=0xFC;_ea [3]=0xF8;_ea [4]=0xF0;_ea [5]=0xE0;
_ea [6]=0xC0;_ea [7]=0x80;_ea [8]=0x00;};func _edg (_cda []byte ,_bbef int ,_ccaa code )([]byte ,int ){_cage :=0;for _cage < _ccaa .BitsWritten {_fegb :=_bbef /8;_cafb :=_bbef %8;if _fegb >=len (_cda ){_cda =append (_cda ,0);};_ebbg :=8-_cafb ;_cgdb :=_ccaa .BitsWritten -_cage ;
if _ebbg > _cgdb {_ebbg =_cgdb ;};if _cage < 8{_cda [_fegb ]=_cda [_fegb ]|byte (_ccaa .Code >>uint (8+_cafb -_cage ))&_ea [8-_ebbg -_cafb ];}else {_cda [_fegb ]=_cda [_fegb ]|(byte (_ccaa .Code <<uint (_cage -8))&_ea [8-_ebbg ])>>uint (_cafb );};_bbef +=_ebbg ;
_cage +=_ebbg ;};return _cda ,_bbef ;};func (_ddbf *Encoder )appendEncodedRow (_dab ,_gdg []byte ,_bgeca int )[]byte {if len (_dab )> 0&&_bgeca !=0&&!_ddbf .EncodedByteAlign {_dab [len (_dab )-1]=_dab [len (_dab )-1]|_gdg [0];_dab =append (_dab ,_gdg [1:]...);
}else {_dab =append (_dab ,_gdg ...);};return _dab ;};func init (){for _cf ,_fbd :=range _d {_cac (_gg ,_fbd ,0,_cf );};for _ge ,_ab :=range _cc {_cac (_gg ,_ab ,0,_ge );};for _fba ,_fgc :=range _e {_cac (_ee ,_fgc ,0,_fba );};for _ac ,_ecf :=range _fg {_cac (_ee ,_ecf ,0,_ac );
};for _aag ,_ba :=range _eg {_cac (_gg ,_ba ,0,_aag );_cac (_ee ,_ba ,0,_aag );};_cac (_ec ,_a ,0,0);_cac (_ec ,_aa ,0,0);_cac (_ec ,_ef ,0,0);_cac (_ec ,_dd ,0,0);_cac (_ec ,_fb ,0,0);_cac (_ec ,_ce ,0,0);_cac (_ec ,_fbf ,0,0);_cac (_ec ,_cb ,0,0);_cac (_ec ,_df ,0,0);
};func _caee (_bdfb *decodingTreeNode ,_cffc uint16 ,_ccb int )(*int ,*code ){if _bdfb ==nil {return nil ,nil ;};if _ccb ==16{return _bdfb .RunLen ,_bdfb .Code ;};_agg :=_ege (_cffc ,_ccb );_ccb ++;var _eed *int ;var _aba *code ;if _agg ==1{_eed ,_aba =_caee (_bdfb .Right ,_cffc ,_ccb );
}else {_eed ,_aba =_caee (_bdfb .Left ,_cffc ,_ccb );};if _eed ==nil {_eed =_bdfb .RunLen ;_aba =_bdfb .Code ;};return _eed ,_aba ;};func (_dfb *Encoder )decodeG4 (_ecc []byte )([][]byte ,error ){_efd :=make ([]byte ,_dfb .Columns );for _afg :=range _efd {_efd [_afg ]=_fea ;
};_fd :=make ([][]byte ,1);_fd [0]=_efd ;var (_bdg bool ;_bf error ;_gdf int ;);for (_gdf /8)< len (_ecc ){_bdg ,_gdf ,_bf =_gdda (_ecc ,_gdf );if _bf !=nil {return nil ,_bf ;};if _bdg {break ;};var (_eac code ;_aeg bool ;);_bca :=true ;var _gdbe []byte ;
_fcc :=-1;for _fcc < _dfb .Columns {_eac ,_gdf ,_aeg =_baf (_ecc ,_gdf );if !_aeg {return nil ,_ad ;};switch _eac {case _a :_gdbe ,_fcc =_bdf (_fd ,_gdbe ,_bca ,_fcc );case _aa :_gdbe ,_gdf ,_fcc ,_bf =_gbb (_ecc ,_gdbe ,_gdf ,_bca ,_fcc );if _bf !=nil {return nil ,_bf ;
};case _ef :_gdbe ,_fcc =_deb (_fd ,_gdbe ,_bca ,_fcc ,0);_bca =!_bca ;case _dd :_gdbe ,_fcc =_deb (_fd ,_gdbe ,_bca ,_fcc ,1);_bca =!_bca ;case _fb :_gdbe ,_fcc =_deb (_fd ,_gdbe ,_bca ,_fcc ,2);_bca =!_bca ;case _ce :_gdbe ,_fcc =_deb (_fd ,_gdbe ,_bca ,_fcc ,3);
_bca =!_bca ;case _fbf :_gdbe ,_fcc =_deb (_fd ,_gdbe ,_bca ,_fcc ,-1);_bca =!_bca ;case _cb :_gdbe ,_fcc =_deb (_fd ,_gdbe ,_bca ,_fcc ,-2);_bca =!_bca ;case _df :_gdbe ,_fcc =_deb (_fd ,_gdbe ,_bca ,_fcc ,-3);_bca =!_bca ;};if len (_gdbe )>=_dfb .Columns {break ;
};};if _dfb .EncodedByteAlign &&_gdf %8!=0{_gdf +=8-_gdf %8;};_fd =append (_fd ,_gdbe );if _dfb .Rows > 0&&!_dfb .EndOfBlock &&len (_fd )>=(_dfb .Rows +1){break ;};};_fd =_fd [1:];return _fd ,nil ;};func _cef (_bdd ,_dbc int )code {var _agb code ;switch _dbc -_bdd {case -1:_agb =_dd ;
case -2:_agb =_fb ;case -3:_agb =_ce ;case 0:_agb =_ef ;case 1:_agb =_fbf ;case 2:_agb =_cb ;case 3:_agb =_df ;};return _agb ;};var (_fea byte =1;_cfc byte =0;);func _cga (_gfa []byte ,_caa int )(bool ,int ){return _eaa (_gfa ,_caa ,_fe )};type decodingTreeNode struct{Val byte ;
RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _bdga (_feed uint16 ,_ded int )(code ,bool ){_ ,_dff :=_caee (_ec ,_feed ,_ded );if _dff ==nil {return code {},false ;};return *_dff ,true ;};func _baf (_gea []byte ,_edd int )(code ,int ,bool ){var (_bac uint16 ;
_ebb int ;_efc int ;);_efc =_edd ;_bac ,_ebb ,_ =_dee (_gea ,_edd );_eda ,_fca :=_bdga (_bac ,_ebb );if !_fca {return code {},_efc ,false ;};return _eda ,_efc +_eda .BitsWritten ,true ;};func _gdda (_edc []byte ,_caf int )(bool ,int ,error ){_ddc :=_caf ;
var _ffg bool ;_ffg ,_caf =_eef (_edc ,_caf );if _ffg {_ffg ,_caf =_eef (_edc ,_caf );if _ffg {return true ,_caf ,nil ;};return false ,_ddc ,_af ;};return false ,_ddc ,nil ;};func _adf (_effe int ,_fac bool )(code ,int ,bool ){if _effe < 64{if _fac {return _d [_effe ],0,true ;
};return _e [_effe ],0,true ;};_bgcg :=_effe /64;if _bgcg > 40{return _eg [2560],_effe -2560,false ;};if _bgcg > 27{return _eg [_bgcg *64],_effe -_bgcg *64,false ;};if _fac {return _cc [_bgcg *64],_effe -_bgcg *64,false ;};return _fg [_bgcg *64],_effe -_bgcg *64,false ;
};func _geb (_eggd []byte ,_gfc int ,_gfga int ,_cce bool )([]byte ,int ){var (_bea code ;_efa bool ;);for !_efa {_bea ,_gfga ,_efa =_adf (_gfga ,_cce );_eggd ,_gfc =_edg (_eggd ,_gfc ,_bea );};return _eggd ,_gfc ;};func _abd (_daf []byte ,_afa ,_fbcg ,_efgd int )([]byte ,int ){_gdee :=_cef (_fbcg ,_efgd );
_daf ,_afa =_edg (_daf ,_afa ,_gdee );return _daf ,_afa ;};func _dbd (_edf ,_agdc []byte ,_cfeb int ,_ebdc bool )int {_eab :=_fgca (_agdc ,_cfeb );if _eab < len (_agdc )&&(_cfeb ==-1&&_agdc [_eab ]==_fea ||_cfeb >=0&&_cfeb < len (_edf )&&_edf [_cfeb ]==_agdc [_eab ]||_cfeb >=len (_edf )&&_ebdc &&_agdc [_eab ]==_fea ||_cfeb >=len (_edf )&&!_ebdc &&_agdc [_eab ]==_cfc ){_eab =_fgca (_agdc ,_eab );
};return _eab ;};func _dac (_ecg []byte ,_ggfa bool ,_efedf int )(int ,int ){_adae :=0;for _efedf < len (_ecg ){if _ggfa {if _ecg [_efedf ]!=_fea {break ;};}else {if _ecg [_efedf ]!=_cfc {break ;};};_adae ++;_efedf ++;};return _adae ,_efedf ;};func _gbe (_gdbea []byte ,_bbc int ,_aege bool )(int ,int ){var (_gdbb uint16 ;
_gcb int ;_efe int ;);_efe =_bbc ;_gdbb ,_gcb ,_ =_dee (_gdbea ,_bbc );_cbb ,_ddb :=_afb (_gdbb ,_gcb ,_aege );if _cbb ==-1{return -1,_efe ;};return _cbb ,_efe +_ddb .BitsWritten ;};func _gbb (_dde ,_ga []byte ,_gfd int ,_bag bool ,_efg int )([]byte ,int ,int ,error ){_ed :=_gfd ;
var _gfg error ;_ga ,_gfd ,_gfg =_abb (_dde ,_ga ,_gfd ,_bag );if _gfg !=nil {return _ga ,_ed ,_efg ,_gfg ;};_bag =!_bag ;_ga ,_gfd ,_gfg =_abb (_dde ,_ga ,_gfd ,_bag );if _gfg !=nil {return _ga ,_ed ,_efg ,_gfg ;};_efg =len (_ga );return _ga ,_gfd ,_efg ,nil ;
};func (_gb *Encoder )Decode (encoded []byte )([][]byte ,error ){if _gb .BlackIs1 {_fea =0;_cfc =1;}else {_fea =1;_cfc =0;};if _gb .K ==0{return _gb .decodeG31D (encoded );};if _gb .K > 0{return _gb .decodeG32D (encoded );};if _gb .K < 4{return _gb .decodeG4 (encoded );
};return nil ,nil ;};func _faf (_dbee []byte ,_ggba int )([]byte ,int ){return _edg (_dbee ,_ggba ,_a )};func _acb (_ccf int )([]byte ,int ){var _gad []byte ;for _efegg :=0;_efegg < 6;_efegg ++{_gad ,_ccf =_edg (_gad ,_ccf ,_g );};return _gad ,_ccf %8;
};func _eef (_geaf []byte ,_cbbg int )(bool ,int ){_abf :=_cbbg ;var (_edaa uint16 ;_gae int ;);_edaa ,_gae ,_cbbg =_dee (_geaf ,_cbbg );if _gae > 4{return false ,_abf ;};_edaa >>=uint (4-_gae );_edaa <<=4;if _edaa !=_g .Code {return false ,_abf ;};return true ,_cbbg -4+_gae ;
};var (_e map[int ]code ;_d map[int ]code ;_fg map[int ]code ;_cc map[int ]code ;_eg map[int ]code ;_ea map[int ]byte ;_g =code {Code :1<<4,BitsWritten :12};_fe =code {Code :3<<3,BitsWritten :13};_cg =code {Code :2<<3,BitsWritten :13};_a =code {Code :1<<12,BitsWritten :4};
_aa =code {Code :1<<13,BitsWritten :3};_ef =code {Code :1<<15,BitsWritten :1};_dd =code {Code :3<<13,BitsWritten :3};_fb =code {Code :3<<10,BitsWritten :6};_ce =code {Code :3<<9,BitsWritten :7};_fbf =code {Code :2<<13,BitsWritten :3};_cb =code {Code :2<<10,BitsWritten :6};
_df =code {Code :2<<9,BitsWritten :7};);func _dbg (_fbb []byte ,_gda int )(bool ,int ){return _eaa (_fbb ,_gda ,_cg )};func (_gfdfa *Encoder )encodeG32D (_dbe [][]byte )[]byte {var _dc []byte ;var _fbc int ;for _deed :=0;_deed < len (_dbe );_deed +=_gfdfa .K {if _gfdfa .Rows > 0&&!_gfdfa .EndOfBlock &&_deed ==_gfdfa .Rows {break ;
};_feg ,_bbf :=_bfc (_dbe [_deed ],_fbc ,_fe );_dc =_gfdfa .appendEncodedRow (_dc ,_feg ,_fbc );if _gfdfa .EncodedByteAlign {_bbf =0;};_fbc =_bbf ;for _ebf :=_deed +1;_ebf < (_deed +_gfdfa .K )&&_ebf < len (_dbe );_ebf ++{if _gfdfa .Rows > 0&&!_gfdfa .EndOfBlock &&_ebf ==_gfdfa .Rows {break ;
};_ced ,_dg :=_edg (nil ,_fbc ,_cg );var _abc ,_fa ,_bed int ;_bbe :=-1;for _bbe < len (_dbe [_ebf ]){_abc =_fgca (_dbe [_ebf ],_bbe );_fa =_abfd (_dbe [_ebf ],_dbe [_ebf -1],_bbe );_bed =_fgca (_dbe [_ebf -1],_fa );if _bed < _abc {_ced ,_dg =_faf (_ced ,_dg );
_bbe =_bed ;}else {if _ca .Abs (float64 (_fa -_abc ))> 3{_ced ,_dg ,_bbe =_gdba (_dbe [_ebf ],_ced ,_dg ,_bbe ,_abc );}else {_ced ,_dg =_abd (_ced ,_dg ,_abc ,_fa );_bbe =_abc ;};};};_dc =_gfdfa .appendEncodedRow (_dc ,_ced ,_fbc );if _gfdfa .EncodedByteAlign {_dg =0;
};_fbc =_dg %8;};};if _gfdfa .EndOfBlock {_age ,_ :=_cfgd (_fbc );_dc =_gfdfa .appendEncodedRow (_dc ,_age ,_fbc );};return _dc ;};func _cac (_effb *decodingTreeNode ,_dbga code ,_abfa int ,_cgce int ){_baga :=_ege (_dbga .Code ,_abfa );_abfa ++;if _baga ==1{if _effb .Right ==nil {_effb .Right =&decodingTreeNode {Val :_baga };
};if _abfa ==_dbga .BitsWritten {_effb .Right .RunLen =&_cgce ;_effb .Right .Code =&_dbga ;}else {_cac (_effb .Right ,_dbga ,_abfa ,_cgce );};}else {if _effb .Left ==nil {_effb .Left =&decodingTreeNode {Val :_baga };};if _abfa ==_dbga .BitsWritten {_effb .Left .RunLen =&_cgce ;
_effb .Left .Code =&_dbga ;}else {_cac (_effb .Left ,_dbga ,_abfa ,_cgce );};};};func (_gag *Encoder )Encode (pixels [][]byte )[]byte {if _gag .BlackIs1 {_fea =0;_cfc =1;}else {_fea =1;_cfc =0;};if _gag .K ==0{return _gag .encodeG31D (pixels );};if _gag .K > 0{return _gag .encodeG32D (pixels );
};if _gag .K < 0{return _gag .encodeG4 (pixels );};return nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _acf (_ebd []byte ,_ggb bool ,_ada int )[]byte {if _ada < 0{return _ebd ;
};_bgd :=make ([]byte ,_ada );if _ggb {for _ead :=0;_ead < len (_bgd );_ead ++{_bgd [_ead ]=_fea ;};}else {for _fefg :=0;_fefg < len (_bgd );_fefg ++{_bgd [_fefg ]=_cfc ;};};_ebd =append (_ebd ,_bgd ...);return _ebd ;};var (_af =_f .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");
_b =_f .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_gd =_f .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");
_ff =_f .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_fc =_f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ad =_f .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););var (_gg =&decodingTreeNode {Val :255};_ee =&decodingTreeNode {Val :255};
_ec =&decodingTreeNode {Val :255};);func (_ecb *Encoder )encodeG4 (_aed [][]byte )[]byte {_bcdc :=make ([][]byte ,len (_aed ));copy (_bcdc ,_aed );_bcdc =_dgd (_bcdc );var _ggf []byte ;var _bfb int ;for _cfe :=1;_cfe < len (_bcdc );_cfe ++{if _ecb .Rows > 0&&!_ecb .EndOfBlock &&_cfe ==(_ecb .Rows +1){break ;
};var _bfg []byte ;var _fcb ,_gde ,_fga int ;_daa :=_bfb ;_ceg :=-1;for _ceg < len (_bcdc [_cfe ]){_fcb =_fgca (_bcdc [_cfe ],_ceg );_gde =_abfd (_bcdc [_cfe ],_bcdc [_cfe -1],_ceg );_fga =_fgca (_bcdc [_cfe -1],_gde );if _fga < _fcb {_bfg ,_daa =_edg (_bfg ,_daa ,_a );
_ceg =_fga ;}else {if _ca .Abs (float64 (_gde -_fcb ))> 3{_bfg ,_daa ,_ceg =_gdba (_bcdc [_cfe ],_bfg ,_daa ,_ceg ,_fcb );}else {_bfg ,_daa =_abd (_bfg ,_daa ,_fcb ,_gde );_ceg =_fcb ;};};};_ggf =_ecb .appendEncodedRow (_ggf ,_bfg ,_bfb );if _ecb .EncodedByteAlign {_daa =0;
};_bfb =_daa %8;};if _ecb .EndOfBlock {_gdab ,_ :=_cdc (_bfb );_ggf =_ecb .appendEncodedRow (_ggf ,_gdab ,_bfb );};return _ggf ;};func _da (_ddef []byte ,_eafa int )(bool ,int ,error ){_fee :=_eafa ;var _cfg =false ;for _cad :=0;_cad < 6;_cad ++{_cfg ,_eafa =_cga (_ddef ,_eafa );
if !_cfg {if _cad > 1{return false ,_fee ,_b ;};_eafa =_fee ;break ;};};return _cfg ,_eafa ,nil ;};func _abb (_cae ,_dfa []byte ,_efb int ,_gbc bool )([]byte ,int ,error ){_dec :=_efb ;var _gbba int ;for _gbba ,_efb =_gbe (_cae ,_efb ,_gbc );_gbba !=-1;
_gbba ,_efb =_gbe (_cae ,_efb ,_gbc ){_dfa =_acf (_dfa ,_gbc ,_gbba );if _gbba < 64{break ;};};if _gbba ==-1{return _dfa ,_dec ,_gd ;};return _dfa ,_efb ,nil ;};func (_cbf *Encoder )decodeG31D (_cfd []byte )([][]byte ,error ){var _de [][]byte ;var _gf int ;
for (_gf /8)< len (_cfd ){var _adb bool ;_adb ,_gf =_eef (_cfd ,_gf );if !_adb {if _cbf .EndOfLine {return nil ,_ff ;};}else {for _ae :=0;_ae < 5;_ae ++{_adb ,_gf =_eef (_cfd ,_gf );if !_adb {if _ae ==0{break ;};return nil ,_fc ;};};if _adb {break ;};};
var _cd []byte ;_cd ,_gf =_cbf .decodeRow1D (_cfd ,_gf );if _cbf .EncodedByteAlign &&_gf %8!=0{_gf +=8-_gf %8;};_de =append (_de ,_cd );if _cbf .Rows > 0&&!_cbf .EndOfBlock &&len (_de )>=_cbf .Rows {break ;};};return _de ,nil ;};func _deb (_fef [][]byte ,_gdd []byte ,_aaa bool ,_fbg ,_cbfg int )([]byte ,int ){_efdf :=_dbd (_gdd ,_fef [len (_fef )-1],_fbg ,_aaa );
_fed :=_efdf +_cbfg ;if _fbg ==-1{_gdd =_acf (_gdd ,_aaa ,_fed -_fbg -1);}else {_gdd =_acf (_gdd ,_aaa ,_fed -_fbg );};_fbg =_fed ;return _gdd ,_fbg ;};func _dgd (_ggfd [][]byte )[][]byte {_cde :=make ([]byte ,len (_ggfd [0]));for _aedc :=range _cde {_cde [_aedc ]=_fea ;
};_ggfd =append (_ggfd ,[]byte {});for _fab :=len (_ggfd )-1;_fab > 0;_fab --{_ggfd [_fab ]=_ggfd [_fab -1];};_ggfd [0]=_cde ;return _ggfd ;};func _dee (_beg []byte ,_bgc int )(uint16 ,int ,int ){_dea :=_bgc ;_bfd :=_bgc /8;_bgc %=8;if _bfd >=len (_beg ){return 0,16,_dea ;
};_efed :=byte (0xFF>>uint (_bgc ));_aaee :=uint16 ((_beg [_bfd ]&_efed )<<uint (_bgc ))<<8;_fcd :=8-_bgc ;_bfd ++;_bgc =0;if _bfd >=len (_beg ){return _aaee >>(16-uint (_fcd )),16-_fcd ,_dea +_fcd ;};_aaee |=uint16 (_beg [_bfd ])<<(8-uint (_fcd ));_fcd +=8;
_bfd ++;_bgc =0;if _bfd >=len (_beg ){return _aaee >>(16-uint (_fcd )),16-_fcd ,_dea +_fcd ;};if _fcd ==16{return _aaee ,0,_dea +_fcd ;};_egeb :=16-_fcd ;_aaee |=uint16 (_beg [_bfd ]>>(8-uint (_egeb )));return _aaee ,0,_dea +16;};func _fgca (_ebdd []byte ,_gadb int )int {if _gadb >=len (_ebdd ){return _gadb ;
};if _gadb < -1{_gadb =-1;};var _ggg byte ;if _gadb > -1{_ggg =_ebdd [_gadb ];}else {_ggg =_fea ;};_ggbc :=_gadb +1;for _ggbc < len (_ebdd ){if _ebdd [_ggbc ]!=_ggg {break ;};_ggbc ++;};return _ggbc ;};func (_gbeg *Encoder )encodeG31D (_feda [][]byte )[]byte {var _bgec []byte ;
_egb :=0;for _bege :=range _feda {if _gbeg .Rows > 0&&!_gbeg .EndOfBlock &&_bege ==_gbeg .Rows {break ;};_ffgf ,_gfgg :=_bfc (_feda [_bege ],_egb ,_g );_bgec =_gbeg .appendEncodedRow (_bgec ,_ffgf ,_egb );if _gbeg .EncodedByteAlign {_gfgg =0;};_egb =_gfgg ;
};if _gbeg .EndOfBlock {_fbgg ,_ :=_acb (_egb );_bgec =_gbeg .appendEncodedRow (_bgec ,_fbgg ,_egb );};return _bgec ;};func _ege (_cdf uint16 ,_aac int )byte {if _aac < 8{_cdf >>=8;};_aac %=8;_cgc :=byte (0x01<<(7-uint (_aac )));return (byte (_cdf )&_cgc )>>(7-uint (_aac ));
};func _bdf (_fde [][]byte ,_bg []byte ,_eaf bool ,_ag int )([]byte ,int ){_ffc :=_dbd (_bg ,_fde [len (_fde )-1],_ag ,_eaf );_eb :=_fgca (_fde [len (_fde )-1],_ffc );if _ag ==-1{_bg =_acf (_bg ,_eaf ,_eb -_ag -1);}else {_bg =_acf (_bg ,_eaf ,_eb -_ag );
};_ag =_eb ;return _bg ,_ag ;};func _cfgd (_agd int )([]byte ,int ){var _cafg []byte ;for _affd :=0;_affd < 6;_affd ++{_cafg ,_agd =_edg (_cafg ,_agd ,_fe );};return _cafg ,_agd %8;};func _gdba (_cfdfa ,_cbd []byte ,_dfd ,_edad ,_cffg int )([]byte ,int ,int ){_dffe :=_fgca (_cfdfa ,_cffg );
_bgea :=_edad >=0&&_cfdfa [_edad ]==_fea ||_edad ==-1;_cbd ,_dfd =_edg (_cbd ,_dfd ,_aa );var _fdgf int ;if _edad > -1{_fdgf =_cffg -_edad ;}else {_fdgf =_cffg -_edad -1;};_cbd ,_dfd =_geb (_cbd ,_dfd ,_fdgf ,_bgea );_bgea =!_bgea ;_gfbc :=_dffe -_cffg ;
_cbd ,_dfd =_geb (_cbd ,_dfd ,_gfbc ,_bgea );_edad =_dffe ;return _cbd ,_dfd ,_edad ;};func _bfc (_gdff []byte ,_fdg int ,_bbb code )([]byte ,int ){_gga :=true ;var _add []byte ;_add ,_fdg =_edg (nil ,_fdg ,_bbb );_ddec :=0;var _cgdc int ;for _ddec < len (_gdff ){_cgdc ,_ddec =_dac (_gdff ,_gga ,_ddec );
_add ,_fdg =_geb (_add ,_fdg ,_cgdc ,_gga );_gga =!_gga ;};return _add ,_fdg %8;};type code struct{Code uint16 ;BitsWritten int ;};func _afb (_gfdd uint16 ,_cagd int ,_be bool )(int ,code ){var _eafd *int ;var _eca *code ;if _be {_eafd ,_eca =_caee (_gg ,_gfdd ,_cagd );
}else {_eafd ,_eca =_caee (_ee ,_gfdd ,_cagd );};if _eafd ==nil {return -1,code {};};return *_eafd ,*_eca ;};func _abfd (_dca ,_cbe []byte ,_gfb int )int {_bbed :=_fgca (_cbe ,_gfb );if _bbed < len (_cbe )&&(_gfb ==-1&&_cbe [_bbed ]==_fea ||_gfb >=0&&_gfb < len (_dca )&&_dca [_gfb ]==_cbe [_bbed ]||_gfb >=len (_dca )&&_dca [_gfb -1]!=_cbe [_bbed ]){_bbed =_fgca (_cbe ,_bbed );
};return _bbed ;};func (_aff *Encoder )decodeG32D (_gc []byte )([][]byte ,error ){var (_aae [][]byte ;_bc int ;_cfdf error ;);_cca :for (_bc /8)< len (_gc ){var _aef bool ;_aef ,_bc ,_cfdf =_da (_gc ,_bc );if _cfdf !=nil {return nil ,_cfdf ;};if _aef {break ;
};_aef ,_bc =_cga (_gc ,_bc );if !_aef {if _aff .EndOfLine {return nil ,_ff ;};};var _gdb []byte ;_gdb ,_bc =_aff .decodeRow1D (_gc ,_bc );if _aff .EncodedByteAlign &&_bc %8!=0{_bc +=8-_bc %8;};if _gdb !=nil {_aae =append (_aae ,_gdb );};if _aff .Rows > 0&&!_aff .EndOfBlock &&len (_aae )>=_aff .Rows {break ;
};for _bb :=1;_bb < _aff .K &&(_bc /8)< len (_gc );_bb ++{_aef ,_bc =_dbg (_gc ,_bc );if !_aef {_aef ,_bc ,_cfdf =_da (_gc ,_bc );if _cfdf !=nil {return nil ,_cfdf ;};if _aef {break _cca ;}else {if _aff .EndOfLine {return nil ,_ff ;};};};var (_egd code ;
_bd bool ;);_cag :=true ;var _fbe []byte ;_bcd :=-1;for _egd ,_bc ,_bd =_baf (_gc ,_bc );_bd ;_egd ,_bc ,_bd =_baf (_gc ,_bc ){switch _egd {case _a :_fbe ,_bcd =_bdf (_aae ,_fbe ,_cag ,_bcd );case _aa :_fbe ,_bc ,_bcd ,_cfdf =_gbb (_gc ,_fbe ,_bc ,_cag ,_bcd );
if _cfdf !=nil {return nil ,_cfdf ;};case _ef :_fbe ,_bcd =_deb (_aae ,_fbe ,_cag ,_bcd ,0);_cag =!_cag ;case _dd :_fbe ,_bcd =_deb (_aae ,_fbe ,_cag ,_bcd ,1);_cag =!_cag ;case _fb :_fbe ,_bcd =_deb (_aae ,_fbe ,_cag ,_bcd ,2);_cag =!_cag ;case _ce :_fbe ,_bcd =_deb (_aae ,_fbe ,_cag ,_bcd ,3);
_cag =!_cag ;case _fbf :_fbe ,_bcd =_deb (_aae ,_fbe ,_cag ,_bcd ,-1);_cag =!_cag ;case _cb :_fbe ,_bcd =_deb (_aae ,_fbe ,_cag ,_bcd ,-2);_cag =!_cag ;case _df :_fbe ,_bcd =_deb (_aae ,_fbe ,_cag ,_bcd ,-3);_cag =!_cag ;};if len (_fbe )>=_aff .Columns {break ;
};};if _aff .EncodedByteAlign &&_bc %8!=0{_bc +=8-_bc %8;};if _fbe !=nil {_aae =append (_aae ,_fbe );};if _aff .Rows > 0&&!_aff .EndOfBlock &&len (_aae )>=_aff .Rows {break _cca ;};};};return _aae ,nil ;};func _cdc (_cfga int )([]byte ,int ){var _ddg []byte ;
for _edab :=0;_edab < 2;_edab ++{_ddg ,_cfga =_edg (_ddg ,_cfga ,_g );};return _ddg ,_cfga %8;};