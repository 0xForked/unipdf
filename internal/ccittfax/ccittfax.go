//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_c "errors";_ab "math";);var (_f map[int ]code ;_ff map[int ]code ;_b map[int ]code ;_ae map[int ]code ;_be map[int ]code ;_e map[int ]byte ;_fg =code {Code :1<<4,BitsWritten :12};_ec =code {Code :3<<3,BitsWritten :13};_g =code {Code :2<<3,BitsWritten :13};
_d =code {Code :1<<12,BitsWritten :4};_df =code {Code :1<<13,BitsWritten :3};_ba =code {Code :1<<15,BitsWritten :1};_bb =code {Code :3<<13,BitsWritten :3};_fb =code {Code :3<<10,BitsWritten :6};_gb =code {Code :3<<9,BitsWritten :7};_fa =code {Code :2<<13,BitsWritten :3};
_gc =code {Code :2<<10,BitsWritten :6};_cg =code {Code :2<<9,BitsWritten :7};);var (_bec =_c .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_gca =_c .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");
_ca =_c .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_bc =_c .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_gf =_c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ad =_c .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func init (){_f =make (map[int ]code );_f [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_f [1]=code {Code :2<<(5+8),BitsWritten :3};_f [2]=code {Code :3<<(6+8),BitsWritten :2};_f [3]=code {Code :2<<(6+8),BitsWritten :2};_f [4]=code {Code :3<<(5+8),BitsWritten :3};_f [5]=code {Code :3<<(4+8),BitsWritten :4};_f [6]=code {Code :2<<(4+8),BitsWritten :4};
_f [7]=code {Code :3<<(3+8),BitsWritten :5};_f [8]=code {Code :5<<(2+8),BitsWritten :6};_f [9]=code {Code :4<<(2+8),BitsWritten :6};_f [10]=code {Code :4<<(1+8),BitsWritten :7};_f [11]=code {Code :5<<(1+8),BitsWritten :7};_f [12]=code {Code :7<<(1+8),BitsWritten :7};
_f [13]=code {Code :4<<8,BitsWritten :8};_f [14]=code {Code :7<<8,BitsWritten :8};_f [15]=code {Code :12<<8,BitsWritten :9};_f [16]=code {Code :5<<8|3<<6,BitsWritten :10};_f [17]=code {Code :6<<8,BitsWritten :10};_f [18]=code {Code :2<<8,BitsWritten :10};
_f [19]=code {Code :12<<8|7<<5,BitsWritten :11};_f [20]=code {Code :13<<8,BitsWritten :11};_f [21]=code {Code :13<<8|4<<5,BitsWritten :11};_f [22]=code {Code :6<<8|7<<5,BitsWritten :11};_f [23]=code {Code :5<<8,BitsWritten :11};_f [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_f [25]=code {Code :3<<8,BitsWritten :11};_f [26]=code {Code :12<<8|10<<4,BitsWritten :12};_f [27]=code {Code :12<<8|11<<4,BitsWritten :12};_f [28]=code {Code :12<<8|12<<4,BitsWritten :12};_f [29]=code {Code :12<<8|13<<4,BitsWritten :12};_f [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_f [31]=code {Code :6<<8|9<<4,BitsWritten :12};_f [32]=code {Code :6<<8|10<<4,BitsWritten :12};_f [33]=code {Code :6<<8|11<<4,BitsWritten :12};_f [34]=code {Code :13<<8|2<<4,BitsWritten :12};_f [35]=code {Code :13<<8|3<<4,BitsWritten :12};_f [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_f [37]=code {Code :13<<8|5<<4,BitsWritten :12};_f [38]=code {Code :13<<8|6<<4,BitsWritten :12};_f [39]=code {Code :13<<8|7<<4,BitsWritten :12};_f [40]=code {Code :6<<8|12<<4,BitsWritten :12};_f [41]=code {Code :6<<8|13<<4,BitsWritten :12};_f [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_f [43]=code {Code :13<<8|11<<4,BitsWritten :12};_f [44]=code {Code :5<<8|4<<4,BitsWritten :12};_f [45]=code {Code :5<<8|5<<4,BitsWritten :12};_f [46]=code {Code :5<<8|6<<4,BitsWritten :12};_f [47]=code {Code :5<<8|7<<4,BitsWritten :12};_f [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_f [49]=code {Code :6<<8|5<<4,BitsWritten :12};_f [50]=code {Code :5<<8|2<<4,BitsWritten :12};_f [51]=code {Code :5<<8|3<<4,BitsWritten :12};_f [52]=code {Code :2<<8|4<<4,BitsWritten :12};_f [53]=code {Code :3<<8|7<<4,BitsWritten :12};_f [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_f [55]=code {Code :2<<8|7<<4,BitsWritten :12};_f [56]=code {Code :2<<8|8<<4,BitsWritten :12};_f [57]=code {Code :5<<8|8<<4,BitsWritten :12};_f [58]=code {Code :5<<8|9<<4,BitsWritten :12};_f [59]=code {Code :2<<8|11<<4,BitsWritten :12};_f [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_f [61]=code {Code :5<<8|10<<4,BitsWritten :12};_f [62]=code {Code :6<<8|6<<4,BitsWritten :12};_f [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ff =make (map[int ]code );_ff [0]=code {Code :53<<8,BitsWritten :8};_ff [1]=code {Code :7<<(2+8),BitsWritten :6};
_ff [2]=code {Code :7<<(4+8),BitsWritten :4};_ff [3]=code {Code :8<<(4+8),BitsWritten :4};_ff [4]=code {Code :11<<(4+8),BitsWritten :4};_ff [5]=code {Code :12<<(4+8),BitsWritten :4};_ff [6]=code {Code :14<<(4+8),BitsWritten :4};_ff [7]=code {Code :15<<(4+8),BitsWritten :4};
_ff [8]=code {Code :19<<(3+8),BitsWritten :5};_ff [9]=code {Code :20<<(3+8),BitsWritten :5};_ff [10]=code {Code :7<<(3+8),BitsWritten :5};_ff [11]=code {Code :8<<(3+8),BitsWritten :5};_ff [12]=code {Code :8<<(2+8),BitsWritten :6};_ff [13]=code {Code :3<<(2+8),BitsWritten :6};
_ff [14]=code {Code :52<<(2+8),BitsWritten :6};_ff [15]=code {Code :53<<(2+8),BitsWritten :6};_ff [16]=code {Code :42<<(2+8),BitsWritten :6};_ff [17]=code {Code :43<<(2+8),BitsWritten :6};_ff [18]=code {Code :39<<(1+8),BitsWritten :7};_ff [19]=code {Code :12<<(1+8),BitsWritten :7};
_ff [20]=code {Code :8<<(1+8),BitsWritten :7};_ff [21]=code {Code :23<<(1+8),BitsWritten :7};_ff [22]=code {Code :3<<(1+8),BitsWritten :7};_ff [23]=code {Code :4<<(1+8),BitsWritten :7};_ff [24]=code {Code :40<<(1+8),BitsWritten :7};_ff [25]=code {Code :43<<(1+8),BitsWritten :7};
_ff [26]=code {Code :19<<(1+8),BitsWritten :7};_ff [27]=code {Code :36<<(1+8),BitsWritten :7};_ff [28]=code {Code :24<<(1+8),BitsWritten :7};_ff [29]=code {Code :2<<8,BitsWritten :8};_ff [30]=code {Code :3<<8,BitsWritten :8};_ff [31]=code {Code :26<<8,BitsWritten :8};
_ff [32]=code {Code :27<<8,BitsWritten :8};_ff [33]=code {Code :18<<8,BitsWritten :8};_ff [34]=code {Code :19<<8,BitsWritten :8};_ff [35]=code {Code :20<<8,BitsWritten :8};_ff [36]=code {Code :21<<8,BitsWritten :8};_ff [37]=code {Code :22<<8,BitsWritten :8};
_ff [38]=code {Code :23<<8,BitsWritten :8};_ff [39]=code {Code :40<<8,BitsWritten :8};_ff [40]=code {Code :41<<8,BitsWritten :8};_ff [41]=code {Code :42<<8,BitsWritten :8};_ff [42]=code {Code :43<<8,BitsWritten :8};_ff [43]=code {Code :44<<8,BitsWritten :8};
_ff [44]=code {Code :45<<8,BitsWritten :8};_ff [45]=code {Code :4<<8,BitsWritten :8};_ff [46]=code {Code :5<<8,BitsWritten :8};_ff [47]=code {Code :10<<8,BitsWritten :8};_ff [48]=code {Code :11<<8,BitsWritten :8};_ff [49]=code {Code :82<<8,BitsWritten :8};
_ff [50]=code {Code :83<<8,BitsWritten :8};_ff [51]=code {Code :84<<8,BitsWritten :8};_ff [52]=code {Code :85<<8,BitsWritten :8};_ff [53]=code {Code :36<<8,BitsWritten :8};_ff [54]=code {Code :37<<8,BitsWritten :8};_ff [55]=code {Code :88<<8,BitsWritten :8};
_ff [56]=code {Code :89<<8,BitsWritten :8};_ff [57]=code {Code :90<<8,BitsWritten :8};_ff [58]=code {Code :91<<8,BitsWritten :8};_ff [59]=code {Code :74<<8,BitsWritten :8};_ff [60]=code {Code :75<<8,BitsWritten :8};_ff [61]=code {Code :50<<8,BitsWritten :8};
_ff [62]=code {Code :51<<8,BitsWritten :8};_ff [63]=code {Code :52<<8,BitsWritten :8};_b =make (map[int ]code );_b [64]=code {Code :3<<8|3<<6,BitsWritten :10};_b [128]=code {Code :12<<8|8<<4,BitsWritten :12};_b [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_b [256]=code {Code :5<<8|11<<4,BitsWritten :12};_b [320]=code {Code :3<<8|3<<4,BitsWritten :12};_b [384]=code {Code :3<<8|4<<4,BitsWritten :12};_b [448]=code {Code :3<<8|5<<4,BitsWritten :12};_b [512]=code {Code :3<<8|12<<3,BitsWritten :13};_b [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_b [640]=code {Code :2<<8|10<<3,BitsWritten :13};_b [704]=code {Code :2<<8|11<<3,BitsWritten :13};_b [768]=code {Code :2<<8|12<<3,BitsWritten :13};_b [832]=code {Code :2<<8|13<<3,BitsWritten :13};_b [896]=code {Code :3<<8|18<<3,BitsWritten :13};_b [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_b [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_b [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_b [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_b [1216]=code {Code :119<<3,BitsWritten :13};_b [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_b [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_b [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_b [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_b [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_b [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_b [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_b [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_ae =make (map[int ]code );_ae [64]=code {Code :27<<(3+8),BitsWritten :5};_ae [128]=code {Code :18<<(3+8),BitsWritten :5};_ae [192]=code {Code :23<<(2+8),BitsWritten :6};_ae [256]=code {Code :55<<(1+8),BitsWritten :7};_ae [320]=code {Code :54<<8,BitsWritten :8};
_ae [384]=code {Code :55<<8,BitsWritten :8};_ae [448]=code {Code :100<<8,BitsWritten :8};_ae [512]=code {Code :101<<8,BitsWritten :8};_ae [576]=code {Code :104<<8,BitsWritten :8};_ae [640]=code {Code :103<<8,BitsWritten :8};_ae [704]=code {Code :102<<8,BitsWritten :9};
_ae [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ae [832]=code {Code :105<<8,BitsWritten :9};_ae [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ae [960]=code {Code :106<<8,BitsWritten :9};_ae [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ae [1088]=code {Code :107<<8,BitsWritten :9};
_ae [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ae [1216]=code {Code :108<<8,BitsWritten :9};_ae [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ae [1344]=code {Code :109<<8,BitsWritten :9};_ae [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ae [1472]=code {Code :76<<8,BitsWritten :9};
_ae [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ae [1600]=code {Code :77<<8,BitsWritten :9};_ae [1664]=code {Code :24<<(2+8),BitsWritten :6};_ae [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_be =make (map[int ]code );_be [1792]=code {Code :1<<8,BitsWritten :11};
_be [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_be [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_be [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_be [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_be [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_be [2176]=code {Code :1<<8|5<<4,BitsWritten :12};
_be [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_be [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_be [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_be [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_be [2496]=code {Code :1<<8|14<<4,BitsWritten :12};
_be [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_e =make (map[int ]byte );_e [0]=0xFF;_e [1]=0xFE;_e [2]=0xFC;_e [3]=0xF8;_e [4]=0xF0;_e [5]=0xE0;_e [6]=0xC0;_e [7]=0x80;_e [8]=0x00;};func _gfa (_egf *decodingTreeNode ,_cge uint16 ,_fcef int )(*int ,*code ){if _egf ==nil {return nil ,nil ;
};if _fcef ==16{return _egf .RunLen ,_egf .Code ;};_dfe :=_ccf (_cge ,_fcef );_fcef ++;var _gadf *int ;var _cac *code ;if _dfe ==1{_gadf ,_cac =_gfa (_egf .Right ,_cge ,_fcef );}else {_gadf ,_cac =_gfa (_egf .Left ,_cge ,_fcef );};if _gadf ==nil {_gadf =_egf .RunLen ;
_cac =_egf .Code ;};return _gadf ,_cac ;};var (_ffe byte =1;_dfef byte =0;);func init (){for _ea ,_cf :=range _ff {_egg (_db ,_cf ,0,_ea );};for _gfc ,_ed :=range _ae {_egg (_db ,_ed ,0,_gfc );};for _cgd ,_da :=range _f {_egg (_fc ,_da ,0,_cgd );};for _eag ,_edg :=range _b {_egg (_fc ,_edg ,0,_eag );
};for _af ,_gcb :=range _be {_egg (_db ,_gcb ,0,_af );_egg (_fc ,_gcb ,0,_af );};_egg (_bd ,_d ,0,0);_egg (_bd ,_df ,0,0);_egg (_bd ,_ba ,0,0);_egg (_bd ,_bb ,0,0);_egg (_bd ,_fb ,0,0);_egg (_bd ,_gb ,0,0);_egg (_bd ,_fa ,0,0);_egg (_bd ,_gc ,0,0);_egg (_bd ,_cg ,0,0);
};func (_edgd *Encoder )encodeG4 (_dea [][]byte )[]byte {_gbgc :=make ([][]byte ,len (_dea ));copy (_gbgc ,_dea );_gbgc =_ace (_gbgc );var _gab []byte ;var _bdd int ;for _dagc :=1;_dagc < len (_gbgc );_dagc ++{if _edgd .Rows > 0&&!_edgd .EndOfBlock &&_dagc ==(_edgd .Rows +1){break ;
};var _aggb []byte ;var _dagf ,_fga ,_eace int ;_bbgg :=_bdd ;_cfd :=-1;for _cfd < len (_gbgc [_dagc ]){_dagf =_gggg (_gbgc [_dagc ],_cfd );_fga =_fgcb (_gbgc [_dagc ],_gbgc [_dagc -1],_cfd );_eace =_gggg (_gbgc [_dagc -1],_fga );if _eace < _dagf {_aggb ,_bbgg =_gcfd (_aggb ,_bbgg ,_d );
_cfd =_eace ;}else {if _ab .Abs (float64 (_fga -_dagf ))> 3{_aggb ,_bbgg ,_cfd =_cef (_gbgc [_dagc ],_aggb ,_bbgg ,_cfd ,_dagf );}else {_aggb ,_bbgg =_gfcd (_aggb ,_bbgg ,_dagf ,_fga );_cfd =_dagf ;};};};_gab =_edgd .appendEncodedRow (_gab ,_aggb ,_bdd );
if _edgd .EncodedByteAlign {_bbgg =0;};_bdd =_bbgg %8;};if _edgd .EndOfBlock {_bcag ,_ :=_gcga (_bdd );_gab =_edgd .appendEncodedRow (_gab ,_bcag ,_bdd );};return _gab ;};func _deb (_acd []byte ,_ceb bool ,_aee int )[]byte {if _aee < 0{return _acd ;};_gbgb :=make ([]byte ,_aee );
if _ceb {for _fcca :=0;_fcca < len (_gbgb );_fcca ++{_gbgb [_fcca ]=_ffe ;};}else {for _fbf :=0;_fbf < len (_gbgb );_fbf ++{_gbgb [_fbf ]=_dfef ;};};_acd =append (_acd ,_gbgb ...);return _acd ;};func _dcf (_ccd uint16 ,_gcbb int )(code ,bool ){_ ,_dg :=_gfa (_bd ,_ccd ,_gcbb );
if _dg ==nil {return code {},false ;};return *_dg ,true ;};func _cc (_ee [][]byte ,_ac []byte ,_acb bool ,_beb ,_bbg int )([]byte ,int ){_faf :=_gdb (_ac ,_ee [len (_ee )-1],_beb ,_acb );_cgg :=_faf +_bbg ;if _beb ==-1{_ac =_deb (_ac ,_acb ,_cgg -_beb -1);
}else {_ac =_deb (_ac ,_acb ,_cgg -_beb );};_beb =_cgg ;return _ac ,_beb ;};func _gcga (_cfcd int )([]byte ,int ){var _fac []byte ;for _dac :=0;_dac < 2;_dac ++{_fac ,_cfcd =_gcfd (_fac ,_cfcd ,_fg );};return _fac ,_cfcd %8;};func (_ecb *Encoder )decodeG32D (_dfa []byte )([][]byte ,error ){var (_ga [][]byte ;
_baa int ;_ag error ;);_gbc :for (_baa /8)< len (_dfa ){var _age bool ;_age ,_baa ,_ag =_bde (_dfa ,_baa );if _ag !=nil {return nil ,_ag ;};if _age {break ;};_age ,_baa =_eacb (_dfa ,_baa );if !_age {if _ecb .EndOfLine {return nil ,_bc ;};};var _bcb []byte ;
_bcb ,_baa =_ecb .decodeRow1D (_dfa ,_baa );if _ecb .EncodedByteAlign &&_baa %8!=0{_baa +=8-_baa %8;};if _bcb !=nil {_ga =append (_ga ,_bcb );};if _ecb .Rows > 0&&!_ecb .EndOfBlock &&len (_ga )>=_ecb .Rows {break ;};for _faa :=1;_faa < _ecb .K &&(_baa /8)< len (_dfa );
_faa ++{_age ,_baa =_bcc (_dfa ,_baa );if !_age {_age ,_baa ,_ag =_bde (_dfa ,_baa );if _ag !=nil {return nil ,_ag ;};if _age {break _gbc ;}else {if _ecb .EndOfLine {return nil ,_bc ;};};};var (_ef code ;_agc bool ;);_dbd :=true ;var _cga []byte ;_bag :=-1;
for _ef ,_baa ,_agc =_cgb (_dfa ,_baa );_agc ;_ef ,_baa ,_agc =_cgb (_dfa ,_baa ){switch _ef {case _d :_cga ,_bag =_bf (_ga ,_cga ,_dbd ,_bag );case _df :_cga ,_baa ,_bag ,_ag =_fbb (_dfa ,_cga ,_baa ,_dbd ,_bag );if _ag !=nil {return nil ,_ag ;};case _ba :_cga ,_bag =_cc (_ga ,_cga ,_dbd ,_bag ,0);
_dbd =!_dbd ;case _bb :_cga ,_bag =_cc (_ga ,_cga ,_dbd ,_bag ,1);_dbd =!_dbd ;case _fb :_cga ,_bag =_cc (_ga ,_cga ,_dbd ,_bag ,2);_dbd =!_dbd ;case _gb :_cga ,_bag =_cc (_ga ,_cga ,_dbd ,_bag ,3);_dbd =!_dbd ;case _fa :_cga ,_bag =_cc (_ga ,_cga ,_dbd ,_bag ,-1);
_dbd =!_dbd ;case _gc :_cga ,_bag =_cc (_ga ,_cga ,_dbd ,_bag ,-2);_dbd =!_dbd ;case _cg :_cga ,_bag =_cc (_ga ,_cga ,_dbd ,_bag ,-3);_dbd =!_dbd ;};if len (_cga )>=_ecb .Columns {break ;};};if _ecb .EncodedByteAlign &&_baa %8!=0{_baa +=8-_baa %8;};if _cga !=nil {_ga =append (_ga ,_cga );
};if _ecb .Rows > 0&&!_ecb .EndOfBlock &&len (_ga )>=_ecb .Rows {break _gbc ;};};};return _ga ,nil ;};func _fgce (_bfb []byte ,_agec bool ,_bege int )(int ,int ){_cfda :=0;for _bege < len (_bfb ){if _agec {if _bfb [_bege ]!=_ffe {break ;};}else {if _bfb [_bege ]!=_dfef {break ;
};};_cfda ++;_bege ++;};return _cfda ,_bege ;};func _ebecg (_bgf ,_aggc int )code {var _gdd code ;switch _aggc -_bgf {case -1:_gdd =_bb ;case -2:_gdd =_fb ;case -3:_gdd =_gb ;case 0:_gdd =_ba ;case 1:_gdd =_fa ;case 2:_gdd =_gc ;case 3:_gdd =_cg ;};return _gdd ;
};func _fbb (_fcc ,_fee []byte ,_cce int ,_eae bool ,_edc int )([]byte ,int ,int ,error ){_dbeg :=_cce ;var _abd error ;_fee ,_cce ,_abd =_cd (_fcc ,_fee ,_cce ,_eae );if _abd !=nil {return _fee ,_dbeg ,_edc ,_abd ;};_eae =!_eae ;_fee ,_cce ,_abd =_cd (_fcc ,_fee ,_cce ,_eae );
if _abd !=nil {return _fee ,_dbeg ,_edc ,_abd ;};_edc =len (_fee );return _fee ,_cce ,_edc ,nil ;};func (_ccc *Encoder )encodeG31D (_efa [][]byte )[]byte {var _aec []byte ;_cbc :=0;for _aged :=range _efa {if _ccc .Rows > 0&&!_ccc .EndOfBlock &&_aged ==_ccc .Rows {break ;
};_ddd ,_gba :=_fcb (_efa [_aged ],_cbc ,_fg );_aec =_ccc .appendEncodedRow (_aec ,_ddd ,_cbc );if _ccc .EncodedByteAlign {_gba =0;};_cbc =_gba ;};if _ccc .EndOfBlock {_dde ,_ :=_bda (_cbc );_aec =_ccc .appendEncodedRow (_aec ,_dde ,_cbc );};return _aec ;
};type code struct{Code uint16 ;BitsWritten int ;};func _ccf (_bfg uint16 ,_gge int )byte {if _gge < 8{_bfg >>=8;};_gge %=8;_ece :=byte (0x01<<(7-uint (_gge )));return (byte (_bfg )&_ece )>>(7-uint (_gge ));};var (_db =&decodingTreeNode {Val :255};_fc =&decodingTreeNode {Val :255};
_bd =&decodingTreeNode {Val :255};);func _bde (_aff []byte ,_dc int )(bool ,int ,error ){_eed :=_dc ;var _gbe =false ;for _cfc :=0;_cfc < 6;_cfc ++{_gbe ,_dc =_eacb (_aff ,_dc );if !_gbe {if _cfc > 1{return false ,_eed ,_gca ;};_dc =_eed ;break ;};};return _gbe ,_dc ,nil ;
};func _bcc (_ecd []byte ,_cea int )(bool ,int ){return _aebb (_ecd ,_cea ,_g )};func _cd (_adb ,_gcf []byte ,_daf int ,_agg bool )([]byte ,int ,error ){_fcgc :=_daf ;var _bg int ;for _bg ,_daf =_ccb (_adb ,_daf ,_agg );_bg !=-1;_bg ,_daf =_ccb (_adb ,_daf ,_agg ){_gcf =_deb (_gcf ,_agg ,_bg );
if _bg < 64{break ;};};if _bg ==-1{return _gcf ,_fcgc ,_ca ;};return _gcf ,_daf ,nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_cag *Encoder )Encode (pixels [][]byte )[]byte {if _cag .BlackIs1 {_ffe =0;
_dfef =1;}else {_ffe =1;_dfef =0;};if _cag .K ==0{return _cag .encodeG31D (pixels );};if _cag .K > 0{return _cag .encodeG32D (pixels );};if _cag .K < 0{return _cag .encodeG4 (pixels );};return nil ;};func _gfcd (_bggb []byte ,_gaa ,_fccd ,_bdeb int )([]byte ,int ){_cbdg :=_ebecg (_fccd ,_bdeb );
_bggb ,_gaa =_gcfd (_bggb ,_gaa ,_cbdg );return _bggb ,_gaa ;};func _egg (_ebe *decodingTreeNode ,_bbe code ,_bgc int ,_fcgd int ){_eba :=_ccf (_bbe .Code ,_bgc );_bgc ++;if _eba ==1{if _ebe .Right ==nil {_ebe .Right =&decodingTreeNode {Val :_eba };};if _bgc ==_bbe .BitsWritten {_ebe .Right .RunLen =&_fcgd ;
_ebe .Right .Code =&_bbe ;}else {_egg (_ebe .Right ,_bbe ,_bgc ,_fcgd );};}else {if _ebe .Left ==nil {_ebe .Left =&decodingTreeNode {Val :_eba };};if _bgc ==_bbe .BitsWritten {_ebe .Left .RunLen =&_fcgd ;_ebe .Left .Code =&_bbe ;}else {_egg (_ebe .Left ,_bbe ,_bgc ,_fcgd );
};};};func (_adg *Encoder )Decode (encoded []byte )([][]byte ,error ){if _adg .BlackIs1 {_ffe =0;_dfef =1;}else {_ffe =1;_dfef =0;};if _adg .K ==0{return _adg .decodeG31D (encoded );};if _adg .K > 0{return _adg .decodeG32D (encoded );};if _adg .K < 4{return _adg .decodeG4 (encoded );
};return nil ,nil ;};func (_cgc *Encoder )encodeG32D (_gbgf [][]byte )[]byte {var _bbgb []byte ;var _abb int ;for _aggd :=0;_aggd < len (_gbgf );_aggd +=_cgc .K {if _cgc .Rows > 0&&!_cgc .EndOfBlock &&_aggd ==_cgc .Rows {break ;};_ebef ,_beg :=_fcb (_gbgf [_aggd ],_abb ,_ec );
_bbgb =_cgc .appendEncodedRow (_bbgb ,_ebef ,_abb );if _cgc .EncodedByteAlign {_beg =0;};_abb =_beg ;for _bdc :=_aggd +1;_bdc < (_aggd +_cgc .K )&&_bdc < len (_gbgf );_bdc ++{if _cgc .Rows > 0&&!_cgc .EndOfBlock &&_bdc ==_cgc .Rows {break ;};_cad ,_fag :=_gcfd (nil ,_abb ,_g );
var _fbd ,_cfce ,_fde int ;_gd :=-1;for _gd < len (_gbgf [_bdc ]){_fbd =_gggg (_gbgf [_bdc ],_gd );_cfce =_fgcb (_gbgf [_bdc ],_gbgf [_bdc -1],_gd );_fde =_gggg (_gbgf [_bdc -1],_cfce );if _fde < _fbd {_cad ,_fag =_cfca (_cad ,_fag );_gd =_fde ;}else {if _ab .Abs (float64 (_cfce -_fbd ))> 3{_cad ,_fag ,_gd =_cef (_gbgf [_bdc ],_cad ,_fag ,_gd ,_fbd );
}else {_cad ,_fag =_gfcd (_cad ,_fag ,_fbd ,_cfce );_gd =_fbd ;};};};_bbgb =_cgc .appendEncodedRow (_bbgb ,_cad ,_abb );if _cgc .EncodedByteAlign {_fag =0;};_abb =_fag %8;};};if _cgc .EndOfBlock {_fgb ,_ :=_cggb (_abb );_bbgb =_cgc .appendEncodedRow (_bbgb ,_fgb ,_abb );
};return _bbgb ;};func _cfca (_cagf []byte ,_ega int )([]byte ,int ){return _gcfd (_cagf ,_ega ,_d )};func _cef (_afd ,_fgf []byte ,_fbde ,_dedc ,_aca int )([]byte ,int ,int ){_cfe :=_gggg (_afd ,_aca );_cgge :=_dedc >=0&&_afd [_dedc ]==_ffe ||_dedc ==-1;
_fgf ,_fbde =_gcfd (_fgf ,_fbde ,_df );var _egdf int ;if _dedc > -1{_egdf =_aca -_dedc ;}else {_egdf =_aca -_dedc -1;};_fgf ,_fbde =_cbd (_fgf ,_fbde ,_egdf ,_cgge );_cgge =!_cgge ;_bgg :=_cfe -_aca ;_fgf ,_fbde =_cbd (_fgf ,_fbde ,_bgg ,_cgge );_dedc =_cfe ;
return _fgf ,_fbde ,_dedc ;};func _bf (_aab [][]byte ,_gad []byte ,_fef bool ,_bed int )([]byte ,int ){_aeb :=_gdb (_gad ,_aab [len (_aab )-1],_bed ,_fef );_fge :=_gggg (_aab [len (_aab )-1],_aeb );if _bed ==-1{_gad =_deb (_gad ,_fef ,_fge -_bed -1);}else {_gad =_deb (_gad ,_fef ,_fge -_bed );
};_bed =_fge ;return _gad ,_bed ;};func _ccb (_dec []byte ,_dfc int ,_ccbc bool )(int ,int ){var (_cfb uint16 ;_eac int ;_adc int ;);_adc =_dfc ;_cfb ,_eac ,_ =_ge (_dec ,_dfc );_efe ,_ecf :=_cbb (_cfb ,_eac ,_ccbc );if _efe ==-1{return -1,_adc ;};return _efe ,_adc +_ecf .BitsWritten ;
};func (_cfa *Encoder )decodeG31D (_gcaa []byte )([][]byte ,error ){var _fgc [][]byte ;var _bcf int ;for (_bcf /8)< len (_gcaa ){var _fcg bool ;_fcg ,_bcf =_egea (_gcaa ,_bcf );if !_fcg {if _cfa .EndOfLine {return nil ,_bc ;};}else {for _dbe :=0;_dbe < 5;
_dbe ++{_fcg ,_bcf =_egea (_gcaa ,_bcf );if !_fcg {if _dbe ==0{break ;};return nil ,_gf ;};};if _fcg {break ;};};var _gce []byte ;_gce ,_bcf =_cfa .decodeRow1D (_gcaa ,_bcf );if _cfa .EncodedByteAlign &&_bcf %8!=0{_bcf +=8-_bcf %8;};_fgc =append (_fgc ,_gce );
if _cfa .Rows > 0&&!_cfa .EndOfBlock &&len (_fgc )>=_cfa .Rows {break ;};};return _fgc ,nil ;};func _gbce (_ccg []byte ,_agcb int )(bool ,int ,error ){_eg :=_agcb ;var _eb bool ;_eb ,_agcb =_egea (_ccg ,_agcb );if _eb {_eb ,_agcb =_egea (_ccg ,_agcb );
if _eb {return true ,_agcb ,nil ;};return false ,_eg ,_bec ;};return false ,_eg ,nil ;};func _eacb (_fdg []byte ,_agef int )(bool ,int ){return _aebb (_fdg ,_agef ,_ec )};func _ge (_ggb []byte ,_eec int )(uint16 ,int ,int ){_bdb :=_eec ;_acf :=_eec /8;
_eec %=8;if _acf >=len (_ggb ){return 0,16,_bdb ;};_bcd :=byte (0xFF>>uint (_eec ));_dba :=uint16 ((_ggb [_acf ]&_bcd )<<uint (_eec ))<<8;_ead :=8-_eec ;_acf ++;_eec =0;if _acf >=len (_ggb ){return _dba >>(16-uint (_ead )),16-_ead ,_bdb +_ead ;};_dba |=uint16 (_ggb [_acf ])<<(8-uint (_ead ));
_ead +=8;_acf ++;_eec =0;if _acf >=len (_ggb ){return _dba >>(16-uint (_ead )),16-_ead ,_bdb +_ead ;};if _ead ==16{return _dba ,0,_bdb +_ead ;};_ebf :=16-_ead ;_dba |=uint16 (_ggb [_acf ]>>(8-uint (_ebf )));return _dba ,0,_bdb +16;};func _fcb (_cebb []byte ,_ccca int ,_dfeb code )([]byte ,int ){_ggbg :=true ;
var _gef []byte ;_gef ,_ccca =_gcfd (nil ,_ccca ,_dfeb );_bbeg :=0;var _ddc int ;for _bbeg < len (_cebb ){_ddc ,_bbeg =_fgce (_cebb ,_ggbg ,_bbeg );_gef ,_ccca =_cbd (_gef ,_ccca ,_ddc ,_ggbg );_ggbg =!_ggbg ;};return _gef ,_ccca %8;};func _cbg (_bbed int ,_ebec bool )(code ,int ,bool ){if _bbed < 64{if _ebec {return _ff [_bbed ],0,true ;
};return _f [_bbed ],0,true ;};_fcgb :=_bbed /64;if _fcgb > 40{return _be [2560],_bbed -2560,false ;};if _fcgb > 27{return _be [_fcgb *64],_bbed -_fcgb *64,false ;};if _ebec {return _ae [_fcgb *64],_bbed -_fcgb *64,false ;};return _b [_fcgb *64],_bbed -_fcgb *64,false ;
};func _cbb (_bdec uint16 ,_efb int ,_dfb bool )(int ,code ){var _ege *int ;var _dd *code ;if _dfb {_ege ,_dd =_gfa (_db ,_bdec ,_efb );}else {_ege ,_dd =_gfa (_fc ,_bdec ,_efb );};if _ege ==nil {return -1,code {};};return *_ege ,*_dd ;};func _gggg (_dda []byte ,_cggf int )int {if _cggf >=len (_dda ){return _cggf ;
};if _cggf < -1{_cggf =-1;};var _ebc byte ;if _cggf > -1{_ebc =_dda [_cggf ];}else {_ebc =_ffe ;};_dbb :=_cggf +1;for _dbb < len (_dda ){if _dda [_dbb ]!=_ebc {break ;};_dbb ++;};return _dbb ;};func _egea (_egd []byte ,_agcba int )(bool ,int ){_gcef :=_agcba ;
var (_cgab uint16 ;_dag int ;);_cgab ,_dag ,_agcba =_ge (_egd ,_agcba );if _dag > 4{return false ,_gcef ;};_cgab >>=uint (4-_dag );_cgab <<=4;if _cgab !=_fg .Code {return false ,_gcef ;};return true ,_agcba -4+_dag ;};func _cbd (_gcc []byte ,_ffb int ,_face int ,_affa bool )([]byte ,int ){var (_egb code ;
_acde bool ;);for !_acde {_egb ,_face ,_acde =_cbg (_face ,_affa );_gcc ,_ffb =_gcfd (_gcc ,_ffb ,_egb );};return _gcc ,_ffb ;};func _aebb (_ggg []byte ,_cee int ,_geg code )(bool ,int ){_ede :=_cee ;var (_ffg uint16 ;_cca int ;);_ffg ,_cca ,_cee =_ge (_ggg ,_cee );
if _cca > 3{return false ,_ede ;};_ffg >>=uint (3-_cca );_ffg <<=3;if _ffg !=_geg .Code {return false ,_ede ;};return true ,_cee -3+_cca ;};func _bda (_fbg int )([]byte ,int ){var _bedg []byte ;for _fdc :=0;_fdc < 6;_fdc ++{_bedg ,_fbg =_gcfd (_bedg ,_fbg ,_fg );
};return _bedg ,_fbg %8;};func _gdb (_agd ,_bfc []byte ,_aeg int ,_dfed bool )int {_aag :=_gggg (_bfc ,_aeg );if _aag < len (_bfc )&&(_aeg ==-1&&_bfc [_aag ]==_ffe ||_aeg >=0&&_aeg < len (_agd )&&_agd [_aeg ]==_bfc [_aag ]||_aeg >=len (_agd )&&_dfed &&_bfc [_aag ]==_ffe ||_aeg >=len (_agd )&&!_dfed &&_bfc [_aag ]==_dfef ){_aag =_gggg (_bfc ,_aag );
};return _aag ;};func _cgb (_gfg []byte ,_efd int )(code ,int ,bool ){var (_fcga uint16 ;_fcd int ;_ecfd int ;);_ecfd =_efd ;_fcga ,_fcd ,_ =_ge (_gfg ,_efd );_def ,_gcge :=_dcf (_fcga ,_fcd );if !_gcge {return code {},_ecfd ,false ;};return _def ,_ecfd +_def .BitsWritten ,true ;
};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func (_dcc *Encoder )appendEncodedRow (_dagb ,_eedf []byte ,_ggea int )[]byte {if len (_dagb )> 0&&_ggea !=0&&!_dcc .EncodedByteAlign {_dagb [len (_dagb )-1]=_dagb [len (_dagb )-1]|_eedf [0];
_dagb =append (_dagb ,_eedf [1:]...);}else {_dagb =append (_dagb ,_eedf ...);};return _dagb ;};func (_de *Encoder )decodeG4 (_gg []byte )([][]byte ,error ){_ce :=make ([]byte ,_de .Columns );for _aa :=range _ce {_ce [_aa ]=_ffe ;};_bba :=make ([][]byte ,1);
_bba [0]=_ce ;var (_gcg bool ;_fe error ;_bca int ;);for (_bca /8)< len (_gg ){_gcg ,_bca ,_fe =_gbce (_gg ,_bca );if _fe !=nil {return nil ,_fe ;};if _gcg {break ;};var (_dbcg code ;_fd bool ;);_fda :=true ;var _fad []byte ;_cb :=-1;for _cb < _de .Columns {_dbcg ,_bca ,_fd =_cgb (_gg ,_bca );
if !_fd {return nil ,_ad ;};switch _dbcg {case _d :_fad ,_cb =_bf (_bba ,_fad ,_fda ,_cb );case _df :_fad ,_bca ,_cb ,_fe =_fbb (_gg ,_fad ,_bca ,_fda ,_cb );if _fe !=nil {return nil ,_fe ;};case _ba :_fad ,_cb =_cc (_bba ,_fad ,_fda ,_cb ,0);_fda =!_fda ;
case _bb :_fad ,_cb =_cc (_bba ,_fad ,_fda ,_cb ,1);_fda =!_fda ;case _fb :_fad ,_cb =_cc (_bba ,_fad ,_fda ,_cb ,2);_fda =!_fda ;case _gb :_fad ,_cb =_cc (_bba ,_fad ,_fda ,_cb ,3);_fda =!_fda ;case _fa :_fad ,_cb =_cc (_bba ,_fad ,_fda ,_cb ,-1);_fda =!_fda ;
case _gc :_fad ,_cb =_cc (_bba ,_fad ,_fda ,_cb ,-2);_fda =!_fda ;case _cg :_fad ,_cb =_cc (_bba ,_fad ,_fda ,_cb ,-3);_fda =!_fda ;};if len (_fad )>=_de .Columns {break ;};};if _de .EncodedByteAlign &&_bca %8!=0{_bca +=8-_bca %8;};_bba =append (_bba ,_fad );
if _de .Rows > 0&&!_de .EndOfBlock &&len (_bba )>=(_de .Rows +1){break ;};};_bba =_bba [1:];return _bba ,nil ;};func _fgcb (_gae ,_ccac []byte ,_agefg int )int {_fgd :=_gggg (_ccac ,_agefg );if _fgd < len (_ccac )&&(_agefg ==-1&&_ccac [_fgd ]==_ffe ||_agefg >=0&&_agefg < len (_gae )&&_gae [_agefg ]==_ccac [_fgd ]||_agefg >=len (_gae )&&_gae [_agefg -1]!=_ccac [_fgd ]){_fgd =_gggg (_ccac ,_fgd );
};return _fgd ;};func _cggb (_dcd int )([]byte ,int ){var _gag []byte ;for _gff :=0;_gff < 6;_gff ++{_gag ,_dcd =_gcfd (_gag ,_dcd ,_ec );};return _gag ,_dcd %8;};func _gcfd (_gea []byte ,_bac int ,_afe code )([]byte ,int ){_baaa :=0;for _baaa < _afe .BitsWritten {_fcbd :=_bac /8;
_dge :=_bac %8;if _fcbd >=len (_gea ){_gea =append (_gea ,0);};_ceeg :=8-_dge ;_gfff :=_afe .BitsWritten -_baaa ;if _ceeg > _gfff {_ceeg =_gfff ;};if _baaa < 8{_gea [_fcbd ]=_gea [_fcbd ]|byte (_afe .Code >>uint (8+_dge -_baaa ))&_e [8-_ceeg -_dge ];}else {_gea [_fcbd ]=_gea [_fcbd ]|(byte (_afe .Code <<uint (_baaa -8))&_e [8-_ceeg ])>>uint (_dge );
};_bac +=_ceeg ;_baaa +=_ceeg ;};return _gea ,_bac ;};func _ace (_affaa [][]byte )[][]byte {_cdg :=make ([]byte ,len (_affaa [0]));for _geae :=range _cdg {_cdg [_geae ]=_ffe ;};_affaa =append (_affaa ,[]byte {});for _abf :=len (_affaa )-1;_abf > 0;_abf --{_affaa [_abf ]=_affaa [_abf -1];
};_affaa [0]=_cdg ;return _affaa ;};func (_ged *Encoder )decodeRow1D (_gfcb []byte ,_ggbf int )([]byte ,int ){var _abdg []byte ;_gbg :=true ;var _efed int ;_efed ,_ggbf =_ccb (_gfcb ,_ggbf ,_gbg );for _efed !=-1{_abdg =_deb (_abdg ,_gbg ,_efed );if _efed < 64{if len (_abdg )>=_ged .Columns {break ;
};_gbg =!_gbg ;};_efed ,_ggbf =_ccb (_gfcb ,_ggbf ,_gbg );};return _abdg ,_ggbf ;};