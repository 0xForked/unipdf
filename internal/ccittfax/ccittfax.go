//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_f "errors";_ab "github.com/unidoc/unipdf/v3/internal/bitwise";_e "io";_fg "math";);func (_bgd *Decoder )decodeRowType4 ()error {if !_bgd ._dfe {return _bgd .decoderRowType41D ();};if _bgd ._ade {_bgd ._ddf .Align ();};_bgd ._ddf .Mark ();
_efe ,_cfa :=_bgd .tryFetchEOL ();if _cfa !=nil {return _cfa ;};if !_efe &&_bgd ._dbf {_bgd ._gdg ++;if _bgd ._gdg > _bgd ._afc {return _ca ;};_bgd ._ddf .Reset ();};if !_efe {_bgd ._ddf .Reset ();};_ga ,_cfa :=_bgd ._ddf .ReadBool ();if _cfa !=nil {return _cfa ;
};if _ga {if _efe &&_bgd ._fdc {if _cfa =_bgd .tryFetchRTC2D ();_cfa !=nil {return _cfa ;};};_cfa =_bgd .decode1D ();}else {_cfa =_bgd .decode2D ();};if _cfa !=nil {return _cfa ;};return nil ;};func init (){_b =&treeNode {_dgf :true ,_bbd :_ed };_bd =&treeNode {_bbd :_ea ,_gge :_b };
_bd ._dgc =_bd ;_bc =&tree {_cccf :&treeNode {}};if _bga :=_bc .fillWithNode (12,0,_bd );_bga !=nil {panic (_bga .Error ());};if _ae :=_bc .fillWithNode (12,1,_b );_ae !=nil {panic (_ae .Error ());};_bb =&tree {_cccf :&treeNode {}};for _g :=0;_g < len (_df );
_g ++{for _cc :=0;_cc < len (_df [_g ]);_cc ++{if _ff :=_bb .fill (_g +2,int (_df [_g ][_cc ]),int (_baa [_g ][_cc ]));_ff !=nil {panic (_ff .Error ());};};};if _ce :=_bb .fillWithNode (12,0,_bd );_ce !=nil {panic (_ce .Error ());};if _ffd :=_bb .fillWithNode (12,1,_b );
_ffd !=nil {panic (_ffd .Error ());};_bg =&tree {_cccf :&treeNode {}};for _fa :=0;_fa < len (_af );_fa ++{for _bf :=0;_bf < len (_af [_fa ]);_bf ++{if _cb :=_bg .fill (_fa +4,int (_af [_fa ][_bf ]),int (_bdg [_fa ][_bf ]));_cb !=nil {panic (_cb .Error ());
};};};if _d :=_bg .fillWithNode (12,0,_bd );_d !=nil {panic (_d .Error ());};if _gd :=_bg .fillWithNode (12,1,_b );_gd !=nil {panic (_gd .Error ());};_ag =&tree {_cccf :&treeNode {}};if _ge :=_ag .fill (4,1,_ad );_ge !=nil {panic (_ge .Error ());};if _ba :=_ag .fill (3,1,_bgc );
_ba !=nil {panic (_ba .Error ());};if _geg :=_ag .fill (1,1,0);_geg !=nil {panic (_geg .Error ());};if _gg :=_ag .fill (3,3,1);_gg !=nil {panic (_gg .Error ());};if _fb :=_ag .fill (6,3,2);_fb !=nil {panic (_fb .Error ());};if _ef :=_ag .fill (7,3,3);_ef !=nil {panic (_ef .Error ());
};if _ffe :=_ag .fill (3,2,-1);_ffe !=nil {panic (_ffe .Error ());};if _dc :=_ag .fill (6,2,-2);_dc !=nil {panic (_dc .Error ());};if _cg :=_ag .fill (7,2,-3);_cg !=nil {panic (_cg .Error ());};};func (_fef *Decoder )decodeRowType6 ()error {if _fef ._ade {_fef ._ddf .Align ();
};if _fef ._fdc {_fef ._ddf .Mark ();_cacc ,_aca :=_fef .tryFetchEOL ();if _aca !=nil {return _aca ;};if _cacc {_cacc ,_aca =_fef .tryFetchEOL ();if _aca !=nil {return _aca ;};if _cacc {return _e .EOF ;};};_fef ._ddf .Reset ();};return _fef .decode2D ();
};var (_gde map[int ]code ;_fd map[int ]code ;_dd map[int ]code ;_cf map[int ]code ;_cbb map[int ]code ;_eda map[int ]byte ;_eg =code {Code :1<<4,BitsWritten :12};_bcc =code {Code :3<<3,BitsWritten :13};_gef =code {Code :2<<3,BitsWritten :13};_bfc =code {Code :1<<12,BitsWritten :4};
_egf =code {Code :1<<13,BitsWritten :3};_ac =code {Code :1<<15,BitsWritten :1};_fba =code {Code :3<<13,BitsWritten :3};_cba =code {Code :3<<10,BitsWritten :6};_fc =code {Code :3<<9,BitsWritten :7};_ec =code {Code :2<<13,BitsWritten :3};_aa =code {Code :2<<10,BitsWritten :6};
_bgac =code {Code :2<<9,BitsWritten :7};);func (_cge *Decoder )decodeRow ()(_eaa error ){if !_cge ._fdc &&_cge ._gc > 0&&_cge ._gc ==_cge ._eb {return _e .EOF ;};switch _cge ._dag {case _gf :_eaa =_cge .decodeRowType2 ();case _de :_eaa =_cge .decodeRowType4 ();
case _cd :_eaa =_cge .decodeRowType6 ();};if _eaa !=nil {return _eaa ;};_ggf :=0;_gdd :=true ;_cge ._ebb =0;for _aec :=0;_aec < _cge ._fcf ;_aec ++{_gce :=_cge ._aad ;if _aec !=_cge ._fcf {_gce =_cge ._dg [_aec ];};if _gce > _cge ._aad {_gce =_cge ._aad ;
};_faa :=_ggf /8;for _ggf %8!=0&&_gce -_ggf > 0{var _ggfb byte ;if !_gdd {_ggfb =1<<uint (7-(_ggf %8));};_cge ._edb [_faa ]|=_ggfb ;_ggf ++;};if _ggf %8==0{_faa =_ggf /8;var _agbc byte ;if !_gdd {_agbc =0xff;};for _gce -_ggf > 7{_cge ._edb [_faa ]=_agbc ;
_ggf +=8;_faa ++;};};for _gce -_ggf > 0{if _ggf %8==0{_cge ._edb [_faa ]=0;};var _faab byte ;if !_gdd {_faab =1<<uint (7-(_ggf %8));};_cge ._edb [_faa ]|=_faab ;_ggf ++;};_gdd =!_gdd ;};if _ggf !=_cge ._aad {return _f .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_cge ._fgc =(_ggf +7)/8;_cge ._eb ++;return nil ;};type treeNode struct{_dgc *treeNode ;_gge *treeNode ;_bbd int ;_adg bool ;_dgf bool ;};var (_b *treeNode ;_bd *treeNode ;_bb *tree ;_bg *tree ;_bc *tree ;_ag *tree ;_ed =-2000;_ea =-1000;_ad =-3000;_bgc =-4000;
);var (_gff byte =1;_cbgd byte =0;);func init (){_gde =make (map[int ]code );_gde [0]=code {Code :13<<8|3<<6,BitsWritten :10};_gde [1]=code {Code :2<<(5+8),BitsWritten :3};_gde [2]=code {Code :3<<(6+8),BitsWritten :2};_gde [3]=code {Code :2<<(6+8),BitsWritten :2};
_gde [4]=code {Code :3<<(5+8),BitsWritten :3};_gde [5]=code {Code :3<<(4+8),BitsWritten :4};_gde [6]=code {Code :2<<(4+8),BitsWritten :4};_gde [7]=code {Code :3<<(3+8),BitsWritten :5};_gde [8]=code {Code :5<<(2+8),BitsWritten :6};_gde [9]=code {Code :4<<(2+8),BitsWritten :6};
_gde [10]=code {Code :4<<(1+8),BitsWritten :7};_gde [11]=code {Code :5<<(1+8),BitsWritten :7};_gde [12]=code {Code :7<<(1+8),BitsWritten :7};_gde [13]=code {Code :4<<8,BitsWritten :8};_gde [14]=code {Code :7<<8,BitsWritten :8};_gde [15]=code {Code :12<<8,BitsWritten :9};
_gde [16]=code {Code :5<<8|3<<6,BitsWritten :10};_gde [17]=code {Code :6<<8,BitsWritten :10};_gde [18]=code {Code :2<<8,BitsWritten :10};_gde [19]=code {Code :12<<8|7<<5,BitsWritten :11};_gde [20]=code {Code :13<<8,BitsWritten :11};_gde [21]=code {Code :13<<8|4<<5,BitsWritten :11};
_gde [22]=code {Code :6<<8|7<<5,BitsWritten :11};_gde [23]=code {Code :5<<8,BitsWritten :11};_gde [24]=code {Code :2<<8|7<<5,BitsWritten :11};_gde [25]=code {Code :3<<8,BitsWritten :11};_gde [26]=code {Code :12<<8|10<<4,BitsWritten :12};_gde [27]=code {Code :12<<8|11<<4,BitsWritten :12};
_gde [28]=code {Code :12<<8|12<<4,BitsWritten :12};_gde [29]=code {Code :12<<8|13<<4,BitsWritten :12};_gde [30]=code {Code :6<<8|8<<4,BitsWritten :12};_gde [31]=code {Code :6<<8|9<<4,BitsWritten :12};_gde [32]=code {Code :6<<8|10<<4,BitsWritten :12};_gde [33]=code {Code :6<<8|11<<4,BitsWritten :12};
_gde [34]=code {Code :13<<8|2<<4,BitsWritten :12};_gde [35]=code {Code :13<<8|3<<4,BitsWritten :12};_gde [36]=code {Code :13<<8|4<<4,BitsWritten :12};_gde [37]=code {Code :13<<8|5<<4,BitsWritten :12};_gde [38]=code {Code :13<<8|6<<4,BitsWritten :12};_gde [39]=code {Code :13<<8|7<<4,BitsWritten :12};
_gde [40]=code {Code :6<<8|12<<4,BitsWritten :12};_gde [41]=code {Code :6<<8|13<<4,BitsWritten :12};_gde [42]=code {Code :13<<8|10<<4,BitsWritten :12};_gde [43]=code {Code :13<<8|11<<4,BitsWritten :12};_gde [44]=code {Code :5<<8|4<<4,BitsWritten :12};_gde [45]=code {Code :5<<8|5<<4,BitsWritten :12};
_gde [46]=code {Code :5<<8|6<<4,BitsWritten :12};_gde [47]=code {Code :5<<8|7<<4,BitsWritten :12};_gde [48]=code {Code :6<<8|4<<4,BitsWritten :12};_gde [49]=code {Code :6<<8|5<<4,BitsWritten :12};_gde [50]=code {Code :5<<8|2<<4,BitsWritten :12};_gde [51]=code {Code :5<<8|3<<4,BitsWritten :12};
_gde [52]=code {Code :2<<8|4<<4,BitsWritten :12};_gde [53]=code {Code :3<<8|7<<4,BitsWritten :12};_gde [54]=code {Code :3<<8|8<<4,BitsWritten :12};_gde [55]=code {Code :2<<8|7<<4,BitsWritten :12};_gde [56]=code {Code :2<<8|8<<4,BitsWritten :12};_gde [57]=code {Code :5<<8|8<<4,BitsWritten :12};
_gde [58]=code {Code :5<<8|9<<4,BitsWritten :12};_gde [59]=code {Code :2<<8|11<<4,BitsWritten :12};_gde [60]=code {Code :2<<8|12<<4,BitsWritten :12};_gde [61]=code {Code :5<<8|10<<4,BitsWritten :12};_gde [62]=code {Code :6<<8|6<<4,BitsWritten :12};_gde [63]=code {Code :6<<8|7<<4,BitsWritten :12};
_fd =make (map[int ]code );_fd [0]=code {Code :53<<8,BitsWritten :8};_fd [1]=code {Code :7<<(2+8),BitsWritten :6};_fd [2]=code {Code :7<<(4+8),BitsWritten :4};_fd [3]=code {Code :8<<(4+8),BitsWritten :4};_fd [4]=code {Code :11<<(4+8),BitsWritten :4};_fd [5]=code {Code :12<<(4+8),BitsWritten :4};
_fd [6]=code {Code :14<<(4+8),BitsWritten :4};_fd [7]=code {Code :15<<(4+8),BitsWritten :4};_fd [8]=code {Code :19<<(3+8),BitsWritten :5};_fd [9]=code {Code :20<<(3+8),BitsWritten :5};_fd [10]=code {Code :7<<(3+8),BitsWritten :5};_fd [11]=code {Code :8<<(3+8),BitsWritten :5};
_fd [12]=code {Code :8<<(2+8),BitsWritten :6};_fd [13]=code {Code :3<<(2+8),BitsWritten :6};_fd [14]=code {Code :52<<(2+8),BitsWritten :6};_fd [15]=code {Code :53<<(2+8),BitsWritten :6};_fd [16]=code {Code :42<<(2+8),BitsWritten :6};_fd [17]=code {Code :43<<(2+8),BitsWritten :6};
_fd [18]=code {Code :39<<(1+8),BitsWritten :7};_fd [19]=code {Code :12<<(1+8),BitsWritten :7};_fd [20]=code {Code :8<<(1+8),BitsWritten :7};_fd [21]=code {Code :23<<(1+8),BitsWritten :7};_fd [22]=code {Code :3<<(1+8),BitsWritten :7};_fd [23]=code {Code :4<<(1+8),BitsWritten :7};
_fd [24]=code {Code :40<<(1+8),BitsWritten :7};_fd [25]=code {Code :43<<(1+8),BitsWritten :7};_fd [26]=code {Code :19<<(1+8),BitsWritten :7};_fd [27]=code {Code :36<<(1+8),BitsWritten :7};_fd [28]=code {Code :24<<(1+8),BitsWritten :7};_fd [29]=code {Code :2<<8,BitsWritten :8};
_fd [30]=code {Code :3<<8,BitsWritten :8};_fd [31]=code {Code :26<<8,BitsWritten :8};_fd [32]=code {Code :27<<8,BitsWritten :8};_fd [33]=code {Code :18<<8,BitsWritten :8};_fd [34]=code {Code :19<<8,BitsWritten :8};_fd [35]=code {Code :20<<8,BitsWritten :8};
_fd [36]=code {Code :21<<8,BitsWritten :8};_fd [37]=code {Code :22<<8,BitsWritten :8};_fd [38]=code {Code :23<<8,BitsWritten :8};_fd [39]=code {Code :40<<8,BitsWritten :8};_fd [40]=code {Code :41<<8,BitsWritten :8};_fd [41]=code {Code :42<<8,BitsWritten :8};
_fd [42]=code {Code :43<<8,BitsWritten :8};_fd [43]=code {Code :44<<8,BitsWritten :8};_fd [44]=code {Code :45<<8,BitsWritten :8};_fd [45]=code {Code :4<<8,BitsWritten :8};_fd [46]=code {Code :5<<8,BitsWritten :8};_fd [47]=code {Code :10<<8,BitsWritten :8};
_fd [48]=code {Code :11<<8,BitsWritten :8};_fd [49]=code {Code :82<<8,BitsWritten :8};_fd [50]=code {Code :83<<8,BitsWritten :8};_fd [51]=code {Code :84<<8,BitsWritten :8};_fd [52]=code {Code :85<<8,BitsWritten :8};_fd [53]=code {Code :36<<8,BitsWritten :8};
_fd [54]=code {Code :37<<8,BitsWritten :8};_fd [55]=code {Code :88<<8,BitsWritten :8};_fd [56]=code {Code :89<<8,BitsWritten :8};_fd [57]=code {Code :90<<8,BitsWritten :8};_fd [58]=code {Code :91<<8,BitsWritten :8};_fd [59]=code {Code :74<<8,BitsWritten :8};
_fd [60]=code {Code :75<<8,BitsWritten :8};_fd [61]=code {Code :50<<8,BitsWritten :8};_fd [62]=code {Code :51<<8,BitsWritten :8};_fd [63]=code {Code :52<<8,BitsWritten :8};_dd =make (map[int ]code );_dd [64]=code {Code :3<<8|3<<6,BitsWritten :10};_dd [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_dd [192]=code {Code :12<<8|9<<4,BitsWritten :12};_dd [256]=code {Code :5<<8|11<<4,BitsWritten :12};_dd [320]=code {Code :3<<8|3<<4,BitsWritten :12};_dd [384]=code {Code :3<<8|4<<4,BitsWritten :12};_dd [448]=code {Code :3<<8|5<<4,BitsWritten :12};_dd [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_dd [576]=code {Code :3<<8|13<<3,BitsWritten :13};_dd [640]=code {Code :2<<8|10<<3,BitsWritten :13};_dd [704]=code {Code :2<<8|11<<3,BitsWritten :13};_dd [768]=code {Code :2<<8|12<<3,BitsWritten :13};_dd [832]=code {Code :2<<8|13<<3,BitsWritten :13};_dd [896]=code {Code :3<<8|18<<3,BitsWritten :13};
_dd [960]=code {Code :3<<8|19<<3,BitsWritten :13};_dd [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_dd [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_dd [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_dd [1216]=code {Code :119<<3,BitsWritten :13};_dd [1280]=code {Code :2<<8|18<<3,BitsWritten :13};
_dd [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_dd [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_dd [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_dd [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_dd [1600]=code {Code :2<<8|27<<3,BitsWritten :13};
_dd [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_dd [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_cf =make (map[int ]code );_cf [64]=code {Code :27<<(3+8),BitsWritten :5};_cf [128]=code {Code :18<<(3+8),BitsWritten :5};_cf [192]=code {Code :23<<(2+8),BitsWritten :6};
_cf [256]=code {Code :55<<(1+8),BitsWritten :7};_cf [320]=code {Code :54<<8,BitsWritten :8};_cf [384]=code {Code :55<<8,BitsWritten :8};_cf [448]=code {Code :100<<8,BitsWritten :8};_cf [512]=code {Code :101<<8,BitsWritten :8};_cf [576]=code {Code :104<<8,BitsWritten :8};
_cf [640]=code {Code :103<<8,BitsWritten :8};_cf [704]=code {Code :102<<8,BitsWritten :9};_cf [768]=code {Code :102<<8|1<<7,BitsWritten :9};_cf [832]=code {Code :105<<8,BitsWritten :9};_cf [896]=code {Code :105<<8|1<<7,BitsWritten :9};_cf [960]=code {Code :106<<8,BitsWritten :9};
_cf [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_cf [1088]=code {Code :107<<8,BitsWritten :9};_cf [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_cf [1216]=code {Code :108<<8,BitsWritten :9};_cf [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_cf [1344]=code {Code :109<<8,BitsWritten :9};
_cf [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_cf [1472]=code {Code :76<<8,BitsWritten :9};_cf [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_cf [1600]=code {Code :77<<8,BitsWritten :9};_cf [1664]=code {Code :24<<(2+8),BitsWritten :6};_cf [1728]=code {Code :77<<8|1<<7,BitsWritten :9};
_cbb =make (map[int ]code );_cbb [1792]=code {Code :1<<8,BitsWritten :11};_cbb [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_cbb [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_cbb [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_cbb [2048]=code {Code :1<<8|3<<4,BitsWritten :12};
_cbb [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_cbb [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_cbb [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_cbb [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_cbb [2368]=code {Code :1<<8|12<<4,BitsWritten :12};
_cbb [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_cbb [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_cbb [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_eda =make (map[int ]byte );_eda [0]=0xFF;_eda [1]=0xFE;_eda [2]=0xFC;_eda [3]=0xF8;_eda [4]=0xF0;
_eda [5]=0xE0;_eda [6]=0xC0;_eda [7]=0x80;_eda [8]=0x00;};type Decoder struct{_aad int ;_gc int ;_eb int ;_edb []byte ;_afc int ;_dfe bool ;_ccc bool ;_da bool ;_add bool ;_dbf bool ;_fdc bool ;_ade bool ;_fgc int ;_cca int ;_gdf []int ;_dg []int ;_ddb int ;
_fcf int ;_gdg int ;_ebb int ;_ddf *_ab .Reader ;_dag tiffType ;_ddd error ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func _afe (_be []byte ,_edcf int ,_agf int ,_dfd bool )([]byte ,int ){var (_eagd code ;
_gbc bool ;);for !_gbc {_eagd ,_agf ,_gbc =_dbb (_agf ,_dfd );_be ,_edcf =_agc (_be ,_edcf ,_eagd );};return _be ,_edcf ;};func (_ece *Decoder )tryFetchRTC2D ()(_cfb error ){_ece ._ddf .Mark ();var _eeg bool ;for _geb :=0;_geb < 5;_geb ++{_eeg ,_cfb =_ece .tryFetchEOL1 ();
if _cfb !=nil {if _f .Is (_cfb ,_e .EOF ){if _geb ==0{break ;};return _db ;};};if _eeg {continue ;};if _geb > 0{return _db ;};break ;};if _eeg {return _e .EOF ;};_ece ._ddf .Reset ();return _cfb ;};const (_ tiffType =iota ;_gf ;_de ;_cd ;);func (_ceb *Decoder )decodeRun (_aggc *tree )(int ,error ){var _cgb int ;
_fae :=_aggc ._cccf ;for {_bgb ,_dfcc :=_ceb ._ddf .ReadBool ();if _dfcc !=nil {return 0,_dfcc ;};_fae =_fae .walk (_bgb );if _fae ==nil {return 0,_f .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _fae ._dgf {_cgb +=_fae ._bbd ;switch {case _fae ._bbd >=64:_fae =_aggc ._cccf ;case _fae ._bbd >=0:return _cgb ,nil ;default:return _ceb ._aad ,nil ;};};};};func _dbb (_bgf int ,_cebf bool )(code ,int ,bool ){if _bgf < 64{if _cebf {return _fd [_bgf ],0,true ;
};return _gde [_bgf ],0,true ;};_bda :=_bgf /64;if _bda > 40{return _cbb [2560],_bgf -2560,false ;};if _bda > 27{return _cbb [_bda *64],_bgf -_bda *64,false ;};if _cebf {return _cf [_bda *64],_bgf -_bda *64,false ;};return _dd [_bda *64],_bgf -_bda *64,false ;
};func _bgbd (_gfae int )([]byte ,int ){var _dcb []byte ;for _fgf :=0;_fgf < 6;_fgf ++{_dcb ,_gfae =_agc (_dcb ,_gfae ,_bcc );};return _dcb ,_gfae %8;};func (_afd *Decoder )tryFetchEOL ()(bool ,error ){_aaf ,_fbae :=_afd ._ddf .ReadBits (12);if _fbae !=nil {return false ,_fbae ;
};return _aaf ==0x1,nil ;};var _bdg =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
var _df =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_dad *Encoder )encodeG32D (_addc [][]byte )[]byte {var _acaa []byte ;var _ccf int ;for _fbb :=0;_fbb < len (_addc );_fbb +=_dad .K {if _dad .Rows > 0&&!_dad .EndOfBlock &&_fbb ==_dad .Rows {break ;};_eef ,_ccag :=_bcd (_addc [_fbb ],_ccf ,_bcc );
_acaa =_dad .appendEncodedRow (_acaa ,_eef ,_ccf );if _dad .EncodedByteAlign {_ccag =0;};_ccf =_ccag ;for _gfa :=_fbb +1;_gfa < (_fbb +_dad .K )&&_gfa < len (_addc );_gfa ++{if _dad .Rows > 0&&!_dad .EndOfBlock &&_gfa ==_dad .Rows {break ;};_dfgf ,_edaa :=_agc (nil ,_ccf ,_gef );
var _bff ,_bfa ,_gaee int ;_cfgb :=-1;for _cfgb < len (_addc [_gfa ]){_bff =_afb (_addc [_gfa ],_cfgb );_bfa =_cbc (_addc [_gfa ],_addc [_gfa -1],_cfgb );_gaee =_afb (_addc [_gfa -1],_bfa );if _gaee < _bff {_dfgf ,_edaa =_fedd (_dfgf ,_edaa );_cfgb =_gaee ;
}else {if _fg .Abs (float64 (_bfa -_bff ))> 3{_dfgf ,_edaa ,_cfgb =_bgaa (_addc [_gfa ],_dfgf ,_edaa ,_cfgb ,_bff );}else {_dfgf ,_edaa =_gbcc (_dfgf ,_edaa ,_bff ,_bfa );_cfgb =_bff ;};};};_acaa =_dad .appendEncodedRow (_acaa ,_dfgf ,_ccf );if _dad .EncodedByteAlign {_edaa =0;
};_ccf =_edaa %8;};};if _dad .EndOfBlock {_ada ,_ :=_bgbd (_ccf );_acaa =_dad .appendEncodedRow (_acaa ,_ada ,_ccf );};return _acaa ;};func (_dcge *Encoder )encodeG4 (_bcb [][]byte )[]byte {_bdc :=make ([][]byte ,len (_bcb ));copy (_bdc ,_bcb );_bdc =_bgdf (_bdc );
var _edc []byte ;var _dba int ;for _edag :=1;_edag < len (_bdc );_edag ++{if _dcge .Rows > 0&&!_dcge .EndOfBlock &&_edag ==(_dcge .Rows +1){break ;};var _eacc []byte ;var _faeb ,_gb ,_dcd int ;_gcc :=_dba ;_bfad :=-1;for _bfad < len (_bdc [_edag ]){_faeb =_afb (_bdc [_edag ],_bfad );
_gb =_cbc (_bdc [_edag ],_bdc [_edag -1],_bfad );_dcd =_afb (_bdc [_edag -1],_gb );if _dcd < _faeb {_eacc ,_gcc =_agc (_eacc ,_gcc ,_bfc );_bfad =_dcd ;}else {if _fg .Abs (float64 (_gb -_faeb ))> 3{_eacc ,_gcc ,_bfad =_bgaa (_bdc [_edag ],_eacc ,_gcc ,_bfad ,_faeb );
}else {_eacc ,_gcc =_gbcc (_eacc ,_gcc ,_faeb ,_gb );_bfad =_faeb ;};};};_edc =_dcge .appendEncodedRow (_edc ,_eacc ,_dba );if _dcge .EncodedByteAlign {_gcc =0;};_dba =_gcc %8;};if _dcge .EndOfBlock {_fag ,_ :=_gbf (_dba );_edc =_dcge .appendEncodedRow (_edc ,_fag ,_dba );
};return _edc ;};func (_bfb tiffType )String ()string {switch _bfb {case _gf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";case _de :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";
case _cd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _agc (_fccd []byte ,_efb int ,_bcdb code )([]byte ,int ){_cce :=0;for _cce < _bcdb .BitsWritten {_dbbb :=_efb /8;
_ede :=_efb %8;if _dbbb >=len (_fccd ){_fccd =append (_fccd ,0);};_bdce :=8-_ede ;_gbd :=_bcdb .BitsWritten -_cce ;if _bdce > _gbd {_bdce =_gbd ;};if _cce < 8{_fccd [_dbbb ]=_fccd [_dbbb ]|byte (_bcdb .Code >>uint (8+_ede -_cce ))&_eda [8-_bdce -_ede ];
}else {_fccd [_dbbb ]=_fccd [_dbbb ]|(byte (_bcdb .Code <<uint (_cce -8))&_eda [8-_bdce ])>>uint (_ede );};_efb +=_bdce ;_cce +=_bdce ;};return _fccd ,_efb ;};type code struct{Code uint16 ;BitsWritten int ;};func (_deb *Decoder )decoderRowType41D ()error {if _deb ._ade {_deb ._ddf .Align ();
};_deb ._ddf .Mark ();var (_eac bool ;_bad error ;);if _deb ._dbf {_eac ,_bad =_deb .tryFetchEOL ();if _bad !=nil {return _bad ;};if !_eac {return _ca ;};}else {_eac ,_bad =_deb .looseFetchEOL ();if _bad !=nil {return _bad ;};};if !_eac {_deb ._ddf .Reset ();
};if _eac &&_deb ._fdc {_deb ._ddf .Mark ();for _bgab :=0;_bgab < 5;_bgab ++{_eac ,_bad =_deb .tryFetchEOL ();if _bad !=nil {if _f .Is (_bad ,_e .EOF ){if _bgab ==0{break ;};return _db ;};};if _eac {continue ;};if _bgab > 0{return _db ;};break ;};if _eac {return _e .EOF ;
};_deb ._ddf .Reset ();};if _bad =_deb .decode1D ();_bad !=nil {return _bad ;};return nil ;};var (_db =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_ca =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func _bcd (_eec []byte ,_bcbf int ,_eebg code )([]byte ,int ){_agge :=true ;var _fff []byte ;_fff ,_bcbf =_agc (nil ,_bcbf ,_eebg );_bcg :=0;var _fcgf int ;for _bcg < len (_eec ){_fcgf ,_bcg =_bbc (_eec ,_agge ,_bcg );_fff ,_bcbf =_afe (_fff ,_bcbf ,_fcgf ,_agge );
_agge =!_agge ;};return _fff ,_bcbf %8;};func _afb (_cgab []byte ,_gdb int )int {if _gdb >=len (_cgab ){return _gdb ;};if _gdb < -1{_gdb =-1;};var _bbf byte ;if _gdb > -1{_bbf =_cgab [_gdb ];}else {_bbf =_gff ;};_cda :=_gdb +1;for _cda < len (_cgab ){if _cgab [_cda ]!=_bbf {break ;
};_cda ++;};return _cda ;};type tiffType int ;func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_agb :=&Decoder {_ddf :_ab .NewReader (data ),_aad :options .Columns ,_gc :options .Rows ,_afc :options .DamagedRowsBeforeError ,_edb :make ([]byte ,(options .Columns +7)/8),_gdf :make ([]int ,options .Columns +2),_dg :make ([]int ,options .Columns +2),_ade :options .EncodedByteAligned ,_add :options .BlackIsOne ,_dbf :options .EndOfLine ,_fdc :options .EndOfBlock };
switch {case options .K ==0:_agb ._dag =_de ;if len (data )< 20{return nil ,_f .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_eba :=data [:20];if _eba [0]!=0||(_eba [1]>>4!=1&&_eba [1]!=1){_agb ._dag =_gf ;
_dfc :=(uint16 (_eba [0])<<8+uint16 (_eba [1]&0xff))>>4;for _cab :=12;_cab < 160;_cab ++{_dfc =(_dfc <<1)+uint16 ((_eba [_cab /8]>>uint16 (7-(_cab %8)))&0x01);if _dfc &0xfff==1{_agb ._dag =_de ;break ;};};};case options .K < 0:_agb ._dag =_cd ;case options .K > 0:_agb ._dag =_de ;
_agb ._dfe =true ;};switch _agb ._dag {case _gf ,_de ,_cd :default:return nil ,_f .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");};
return _agb ,nil ;};func (_fce *Encoder )appendEncodedRow (_gba ,_dge []byte ,_cea int )[]byte {if len (_gba )> 0&&_cea !=0&&!_fce .EncodedByteAlign {_gba [len (_gba )-1]=_gba [len (_gba )-1]|_dge [0];_gba =append (_gba ,_dge [1:]...);}else {_gba =append (_gba ,_dge ...);
};return _gba ;};var _af =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func _cbc (_dbe ,_bfag []byte ,_bba int )int {_dcbd :=_afb (_bfag ,_bba );if _dcbd < len (_bfag )&&(_bba ==-1&&_bfag [_dcbd ]==_gff ||_bba >=0&&_bba < len (_dbe )&&_dbe [_bba ]==_bfag [_dcbd ]||_bba >=len (_dbe )&&_dbe [_bba -1]!=_bfag [_dcbd ]){_dcbd =_afb (_bfag ,_dcbd );
};return _dcbd ;};func (_abe *Decoder )fetch ()error {if _abe ._fgc ==-1{return nil ;};if _abe ._cca < _abe ._fgc {return nil ;};_abe ._fgc =0;_ffg :=_abe .decodeRow ();if _ffg !=nil {if !_f .Is (_ffg ,_e .EOF ){return _ffg ;};if _abe ._fgc !=0{return _ffg ;
};_abe ._fgc =-1;};_abe ._cca =0;return nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_fcg *Decoder )decodeRowType2 ()error {if _fcg ._ade {_fcg ._ddf .Align ();
};if _abed :=_fcg .decode1D ();_abed !=nil {return _abed ;};return nil ;};type tree struct{_cccf *treeNode };func _cdc (_ccfe ,_dcdd int )code {var _fab code ;switch _dcdd -_ccfe {case -1:_fab =_fba ;case -2:_fab =_cba ;case -3:_fab =_fc ;case 0:_fab =_ac ;
case 1:_fab =_ec ;case 2:_fab =_aa ;case 3:_fab =_bgac ;};return _fab ;};func _fdcf (_ege ,_aae []byte ,_bdb int ,_bffe bool )int {_adc :=_afb (_aae ,_bdb );if _adc < len (_aae )&&(_bdb ==-1&&_aae [_adc ]==_gff ||_bdb >=0&&_bdb < len (_ege )&&_ege [_bdb ]==_aae [_adc ]||_bdb >=len (_ege )&&_bffe &&_aae [_adc ]==_gff ||_bdb >=len (_ege )&&!_bffe &&_aae [_adc ]==_cbgd ){_adc =_afb (_aae ,_adc );
};return _adc ;};func (_eeb *Encoder )Encode (pixels [][]byte )[]byte {if _eeb .BlackIs1 {_gff =0;_cbgd =1;}else {_gff =1;_cbgd =0;};if _eeb .K ==0{return _eeb .encodeG31D (pixels );};if _eeb .K > 0{return _eeb .encodeG32D (pixels );};if _eeb .K < 0{return _eeb .encodeG4 (pixels );
};return nil ;};func _fedd (_fge []byte ,_edbb int )([]byte ,int ){return _agc (_fge ,_edbb ,_bfc )};func _bbc (_faebb []byte ,_ged bool ,_ffc int )(int ,int ){_cae :=0;for _ffc < len (_faebb ){if _ged {if _faebb [_ffc ]!=_gff {break ;};}else {if _faebb [_ffc ]!=_cbgd {break ;
};};_cae ++;_ffc ++;};return _cae ,_ffc ;};func (_eecc *tree )fillWithNode (_bbcf ,_bca int ,_dga *treeNode )error {_ddfc :=_eecc ._cccf ;for _agdd :=0;_agdd < _bbcf ;_agdd ++{_age :=uint (_bbcf -1-_agdd );_fbd :=((_bca >>_age )&1)!=0;_eea :=_ddfc .walk (_fbd );
if _eea !=nil {if _eea ._dgf {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");};_ddfc =_eea ;continue ;
};if _agdd ==_bbcf -1{_eea =_dga ;}else {_eea =&treeNode {};};if _bca ==0{_eea ._adg =true ;};_ddfc .set (_fbd ,_eea );_ddfc =_eea ;};return nil ;};func (_bfe *treeNode )walk (_gdc bool )*treeNode {if _gdc {return _bfe ._gge ;};return _bfe ._dgc ;};func (_dea *Decoder )looseFetchEOL ()(bool ,error ){_eag ,_agd :=_dea ._ddf .ReadBits (12);
if _agd !=nil {return false ,_agd ;};switch _eag {case 0x1:return true ,nil ;case 0x0:for {_bac ,_afaa :=_dea ._ddf .ReadBool ();if _afaa !=nil {return false ,_afaa ;};if _bac {return true ,nil ;};};default:return false ,nil ;};};func _bgaa (_cgd ,_bgg []byte ,_bcda ,_fdf ,_efbe int )([]byte ,int ,int ){_gbcf :=_afb (_cgd ,_efbe );
_gege :=_fdf >=0&&_cgd [_fdf ]==_gff ||_fdf ==-1;_bgg ,_bcda =_agc (_bgg ,_bcda ,_egf );var _cbgc int ;if _fdf > -1{_cbgc =_efbe -_fdf ;}else {_cbgc =_efbe -_fdf -1;};_bgg ,_bcda =_afe (_bgg ,_bcda ,_cbgc ,_gege );_gege =!_gege ;_edf :=_gbcf -_efbe ;_bgg ,_bcda =_afe (_bgg ,_bcda ,_edf ,_gege );
_fdf =_gbcf ;return _bgg ,_bcda ,_fdf ;};func (_efeg *Decoder )decode2D ()error {_efeg ._ddb =_efeg ._fcf ;_efeg ._dg ,_efeg ._gdf =_efeg ._gdf ,_efeg ._dg ;_ced :=true ;var (_aga bool ;_bgdc int ;_cga error ;);_efeg ._fcf =0;_aeg :for _bgdc < _efeg ._aad {_faf :=_ag ._cccf ;
for {_aga ,_cga =_efeg ._ddf .ReadBool ();if _cga !=nil {return _cga ;};_faf =_faf .walk (_aga );if _faf ==nil {continue _aeg ;};if !_faf ._dgf {continue ;};switch _faf ._bbd {case _bgc :var _ccca int ;if _ced {_ccca ,_cga =_efeg .decodeRun (_bg );}else {_ccca ,_cga =_efeg .decodeRun (_bb );
};if _cga !=nil {return _cga ;};_bgdc +=_ccca ;_efeg ._dg [_efeg ._fcf ]=_bgdc ;_efeg ._fcf ++;if _ced {_ccca ,_cga =_efeg .decodeRun (_bb );}else {_ccca ,_cga =_efeg .decodeRun (_bg );};if _cga !=nil {return _cga ;};_bgdc +=_ccca ;_efeg ._dg [_efeg ._fcf ]=_bgdc ;
_efeg ._fcf ++;case _ad :_ee :=_efeg .getNextChangingElement (_bgdc ,_ced )+1;if _ee >=_efeg ._ddb {_bgdc =_efeg ._aad ;}else {_bgdc =_efeg ._gdf [_ee ];};default:_ead :=_efeg .getNextChangingElement (_bgdc ,_ced );if _ead >=_efeg ._ddb ||_ead ==-1{_bgdc =_efeg ._aad +_faf ._bbd ;
}else {_bgdc =_efeg ._gdf [_ead ]+_faf ._bbd ;};_efeg ._dg [_efeg ._fcf ]=_bgdc ;_efeg ._fcf ++;_ced =!_ced ;};continue _aeg ;};};return nil ;};func (_fed *Decoder )decodeG32D ()error {_fed ._ddb =_fed ._fcf ;_fed ._dg ,_fed ._gdf =_fed ._gdf ,_fed ._dg ;
_bbed :=true ;var (_cgg bool ;_egb int ;_cacb error ;);_fed ._fcf =0;_cdg :for _egb < _fed ._aad {_efg :=_ag ._cccf ;for {_cgg ,_cacb =_fed ._ddf .ReadBool ();if _cacb !=nil {return _cacb ;};_efg =_efg .walk (_cgg );if _efg ==nil {continue _cdg ;};if !_efg ._dgf {continue ;
};switch _efg ._bbd {case _bgc :var _efga int ;if _bbed {_efga ,_cacb =_fed .decodeRun (_bg );}else {_efga ,_cacb =_fed .decodeRun (_bb );};if _cacb !=nil {return _cacb ;};_egb +=_efga ;_fed ._dg [_fed ._fcf ]=_egb ;_fed ._fcf ++;if _bbed {_efga ,_cacb =_fed .decodeRun (_bb );
}else {_efga ,_cacb =_fed .decodeRun (_bg );};if _cacb !=nil {return _cacb ;};_egb +=_efga ;_fed ._dg [_fed ._fcf ]=_egb ;_fed ._fcf ++;case _ad :_bae :=_fed .getNextChangingElement (_egb ,_bbed )+1;if _bae >=_fed ._ddb {_egb =_fed ._aad ;}else {_egb =_fed ._gdf [_bae ];
};default:_dcf :=_fed .getNextChangingElement (_egb ,_bbed );if _dcf >=_fed ._ddb ||_dcf ==-1{_egb =_fed ._aad +_efg ._bbd ;}else {_egb =_fed ._gdf [_dcf ]+_efg ._bbd ;};_fed ._dg [_fed ._fcf ]=_egb ;_fed ._fcf ++;_bbed =!_bbed ;};continue _cdg ;};};return nil ;
};func (_abea *Encoder )encodeG31D (_fdcg [][]byte )[]byte {var _ffda []byte ;_afge :=0;for _dcfb :=range _fdcg {if _abea .Rows > 0&&!_abea .EndOfBlock &&_dcfb ==_abea .Rows {break ;};_fbg ,_gcg :=_bcd (_fdcg [_dcfb ],_afge ,_eg );_ffda =_abea .appendEncodedRow (_ffda ,_fbg ,_afge );
if _abea .EncodedByteAlign {_gcg =0;};_afge =_gcg ;};if _abea .EndOfBlock {_cad ,_ :=_ffdg (_afge );_ffda =_abea .appendEncodedRow (_ffda ,_cad ,_afge );};return _ffda ;};func (_ggdf *treeNode )set (_bfce bool ,_baag *treeNode ){if !_bfce {_ggdf ._dgc =_baag ;
}else {_ggdf ._gge =_baag ;};};func (_cgbe *tree )fill (_gebc ,_fafd ,_fgce int )error {_dbec :=_cgbe ._cccf ;for _cfdg :=0;_cfdg < _gebc ;_cfdg ++{_gdef :=_gebc -1-_cfdg ;_ggd :=((_fafd >>uint (_gdef ))&1)!=0;_cde :=_dbec .walk (_ggd );if _cde !=nil {if _cde ._dgf {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_dbec =_cde ;continue ;};_cde =&treeNode {};if _cfdg ==_gebc -1{_cde ._bbd =_fgce ;_cde ._dgf =true ;};if _fafd ==0{_cde ._adg =true ;};_dbec .set (_ggd ,_cde );_dbec =_cde ;};return nil ;};func (_agg *Decoder )getNextChangingElement (_dab int ,_gae bool )int {_cfg :=0;
if !_gae {_cfg =1;};_deg :=int (uint32 (_agg ._ebb )&0xFFFFFFFE)+_cfg ;if _deg > 2{_deg -=2;};if _dab ==0{return _deg ;};for _ebg :=_deg ;_ebg < _agg ._ddb ;_ebg +=2{if _dab < _agg ._gdf [_ebg ]{_agg ._ebb =_ebg ;return _ebg ;};};return -1;};func (_baca *Decoder )tryFetchEOL1 ()(bool ,error ){_bgaba ,_abc :=_baca ._ddf .ReadBits (13);
if _abc !=nil {return false ,_abc ;};return _bgaba ==0x3,nil ;};func (_cac *Decoder )Read (in []byte )(int ,error ){if _cac ._ddd !=nil {return 0,_cac ._ddd ;};_ccaa :=len (in );var (_fgb int ;_cff int ;);for _ccaa !=0{if _cac ._cca >=_cac ._fgc {if _acc :=_cac .fetch ();
_acc !=nil {_cac ._ddd =_acc ;return 0,_acc ;};};if _cac ._fgc ==-1{return _fgb ,_e .EOF ;};switch {case _ccaa <=_cac ._fgc -_cac ._cca :_dda :=_cac ._edb [_cac ._cca :_cac ._cca +_ccaa ];for _ ,_gcb :=range _dda {if !_cac ._add {_gcb =^_gcb ;};in [_cff ]=_gcb ;
_cff ++;};_fgb +=len (_dda );_cac ._cca +=len (_dda );return _fgb ,nil ;default:_dagg :=_cac ._edb [_cac ._cca :];for _ ,_afa :=range _dagg {if !_cac ._add {_afa =^_afa ;};in [_cff ]=_afa ;_cff ++;};_fgb +=len (_dagg );_cac ._cca +=len (_dagg );_ccaa -=len (_dagg );
};};return _fgb ,nil ;};func _ffdg (_bacb int )([]byte ,int ){var _gee []byte ;for _dgb :=0;_dgb < 6;_dgb ++{_gee ,_bacb =_agc (_gee ,_bacb ,_eg );};return _gee ,_bacb %8;};func _gbf (_cgc int )([]byte ,int ){var _dcc []byte ;for _fcc :=0;_fcc < 2;_fcc ++{_dcc ,_cgc =_agc (_dcc ,_cgc ,_eg );
};return _dcc ,_cgc %8;};func (_afg *Decoder )decode1D ()error {var (_dfg int ;_eacd error ;);_cfd :=true ;_afg ._fcf =0;for {var _dcg int ;if _cfd {_dcg ,_eacd =_afg .decodeRun (_bg );}else {_dcg ,_eacd =_afg .decodeRun (_bb );};if _eacd !=nil {return _eacd ;
};_dfg +=_dcg ;_afg ._dg [_afg ._fcf ]=_dfg ;_afg ._fcf ++;_cfd =!_cfd ;if _dfg >=_afg ._aad {break ;};};return nil ;};var _baa =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func _bgdf (_bgfe [][]byte )[][]byte {_gcca :=make ([]byte ,len (_bgfe [0]));for _aef :=range _gcca {_gcca [_aef ]=_gff ;};_bgfe =append (_bgfe ,[]byte {});for _cacbb :=len (_bgfe )-1;_cacbb > 0;_cacbb --{_bgfe [_cacbb ]=_bgfe [_cacbb -1];};_bgfe [0]=_gcca ;
return _bgfe ;};func _gbcc (_fagb []byte ,_aac ,_degb ,_bcf int )([]byte ,int ){_gfab :=_cdc (_degb ,_bcf );_fagb ,_aac =_agc (_fagb ,_aac ,_gfab );return _fagb ,_aac ;};