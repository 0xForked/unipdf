//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_g "errors";_ca "github.com/unidoc/unipdf/v3/internal/bitwise";_c "io";_d "math";);func (_gcg *tree )fillWithNode (_abc ,_fcf int ,_agbd *treeNode )error {_aaa :=_gcg ._bbac ;for _efe :=0;_efe < _abc ;_efe ++{_ffdc :=uint (_abc -1-_efe );
_febf :=((_fcf >>_ffdc )&1)!=0;_cfb :=_aaa .walk (_febf );if _cfb !=nil {if _cfb ._fge {return _g .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_aaa =_cfb ;continue ;};if _efe ==_abc -1{_cfb =_agbd ;}else {_cfb =&treeNode {};};if _fcf ==0{_cfb ._bgff =true ;};_aaa .set (_febf ,_cfb );_aaa =_cfb ;};return nil ;};func init (){_df =&treeNode {_fge :true ,_gca :_a };_ef =&treeNode {_gca :_ae ,_dfea :_df };
_ef ._acf =_ef ;_f =&tree {_bbac :&treeNode {}};if _ff :=_f .fillWithNode (12,0,_ef );_ff !=nil {panic (_ff .Error ());};if _af :=_f .fillWithNode (12,1,_df );_af !=nil {panic (_af .Error ());};_ce =&tree {_bbac :&treeNode {}};for _ge :=0;_ge < len (_bf );
_ge ++{for _b :=0;_b < len (_bf [_ge ]);_b ++{if _bg :=_ce .fill (_ge +2,int (_bf [_ge ][_b ]),int (_fba [_ge ][_b ]));_bg !=nil {panic (_bg .Error ());};};};if _db :=_ce .fillWithNode (12,0,_ef );_db !=nil {panic (_db .Error ());};if _eda :=_ce .fillWithNode (12,1,_df );
_eda !=nil {panic (_eda .Error ());};_ed =&tree {_bbac :&treeNode {}};for _da :=0;_da < len (_be );_da ++{for _ab :=0;_ab < len (_be [_da ]);_ab ++{if _ba :=_ed .fill (_da +4,int (_be [_da ][_ab ]),int (_fe [_da ][_ab ]));_ba !=nil {panic (_ba .Error ());
};};};if _ac :=_ed .fillWithNode (12,0,_ef );_ac !=nil {panic (_ac .Error ());};if _dbc :=_ed .fillWithNode (12,1,_df );_dbc !=nil {panic (_dbc .Error ());};_dfg =&tree {_bbac :&treeNode {}};if _fd :=_dfg .fill (4,1,_de );_fd !=nil {panic (_fd .Error ());
};if _aeg :=_dfg .fill (3,1,_ec );_aeg !=nil {panic (_aeg .Error ());};if _ga :=_dfg .fill (1,1,0);_ga !=nil {panic (_ga .Error ());};if _efa :=_dfg .fill (3,3,1);_efa !=nil {panic (_efa .Error ());};if _aa :=_dfg .fill (6,3,2);_aa !=nil {panic (_aa .Error ());
};if _fb :=_dfg .fill (7,3,3);_fb !=nil {panic (_fb .Error ());};if _dd :=_dfg .fill (3,2,-1);_dd !=nil {panic (_dd .Error ());};if _ffb :=_dfg .fill (6,2,-2);_ffb !=nil {panic (_ffb .Error ());};if _aff :=_dfg .fill (7,2,-3);_aff !=nil {panic (_aff .Error ());
};};func (_bcg *Decoder )decodeG32D ()error {_bcg ._gg =_bcg ._baf ;_bcg ._fde ,_bcg ._gacf =_bcg ._gacf ,_bcg ._fde ;_faa :=true ;var (_ggd bool ;_ged int ;_edeb error ;);_bcg ._baf =0;_cdc :for _ged < _bcg ._gac {_cdb :=_dfg ._bbac ;for {_ggd ,_edeb =_bcg ._bgf .ReadBool ();
if _edeb !=nil {return _edeb ;};_cdb =_cdb .walk (_ggd );if _cdb ==nil {continue _cdc ;};if !_cdb ._fge {continue ;};switch _cdb ._gca {case _ec :var _gcd int ;if _faa {_gcd ,_edeb =_bcg .decodeRun (_ed );}else {_gcd ,_edeb =_bcg .decodeRun (_ce );};if _edeb !=nil {return _edeb ;
};_ged +=_gcd ;_bcg ._fde [_bcg ._baf ]=_ged ;_bcg ._baf ++;if _faa {_gcd ,_edeb =_bcg .decodeRun (_ce );}else {_gcd ,_edeb =_bcg .decodeRun (_ed );};if _edeb !=nil {return _edeb ;};_ged +=_gcd ;_bcg ._fde [_bcg ._baf ]=_ged ;_bcg ._baf ++;case _de :_cacg :=_bcg .getNextChangingElement (_ged ,_faa )+1;
if _cacg >=_bcg ._gg {_ged =_bcg ._gac ;}else {_ged =_bcg ._gacf [_cacg ];};default:_fac :=_bcg .getNextChangingElement (_ged ,_faa );if _fac >=_bcg ._gg ||_fac ==-1{_ged =_bcg ._gac +_cdb ._gca ;}else {_ged =_bcg ._gacf [_fac ]+_cdb ._gca ;};_bcg ._fde [_bcg ._baf ]=_ged ;
_bcg ._baf ++;_faa =!_faa ;};continue _cdc ;};};return nil ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};type Encoder struct{K int ;EndOfLine bool ;
EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_ggf *Encoder )Encode (pixels [][]byte )[]byte {if _ggf .BlackIs1 {_daea =0;_ege =1;}else {_daea =1;_ege =0;};if _ggf .K ==0{return _ggf .encodeG31D (pixels );
};if _ggf .K > 0{return _ggf .encodeG32D (pixels );};if _ggf .K < 0{return _ggf .encodeG4 (pixels );};return nil ;};func _bbc (_bedf int )([]byte ,int ){var _ggab []byte ;for _bgfa :=0;_bgfa < 6;_bgfa ++{_ggab ,_bedf =_bfff (_ggab ,_bedf ,_ee );};return _ggab ,_bedf %8;
};var _fba =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func init (){_ecb =make (map[int ]code );_ecb [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ecb [1]=code {Code :2<<(5+8),BitsWritten :3};_ecb [2]=code {Code :3<<(6+8),BitsWritten :2};_ecb [3]=code {Code :2<<(6+8),BitsWritten :2};_ecb [4]=code {Code :3<<(5+8),BitsWritten :3};
_ecb [5]=code {Code :3<<(4+8),BitsWritten :4};_ecb [6]=code {Code :2<<(4+8),BitsWritten :4};_ecb [7]=code {Code :3<<(3+8),BitsWritten :5};_ecb [8]=code {Code :5<<(2+8),BitsWritten :6};_ecb [9]=code {Code :4<<(2+8),BitsWritten :6};_ecb [10]=code {Code :4<<(1+8),BitsWritten :7};
_ecb [11]=code {Code :5<<(1+8),BitsWritten :7};_ecb [12]=code {Code :7<<(1+8),BitsWritten :7};_ecb [13]=code {Code :4<<8,BitsWritten :8};_ecb [14]=code {Code :7<<8,BitsWritten :8};_ecb [15]=code {Code :12<<8,BitsWritten :9};_ecb [16]=code {Code :5<<8|3<<6,BitsWritten :10};
_ecb [17]=code {Code :6<<8,BitsWritten :10};_ecb [18]=code {Code :2<<8,BitsWritten :10};_ecb [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ecb [20]=code {Code :13<<8,BitsWritten :11};_ecb [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ecb [22]=code {Code :6<<8|7<<5,BitsWritten :11};
_ecb [23]=code {Code :5<<8,BitsWritten :11};_ecb [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ecb [25]=code {Code :3<<8,BitsWritten :11};_ecb [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ecb [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ecb [28]=code {Code :12<<8|12<<4,BitsWritten :12};
_ecb [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ecb [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ecb [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ecb [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ecb [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ecb [34]=code {Code :13<<8|2<<4,BitsWritten :12};
_ecb [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ecb [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ecb [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ecb [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ecb [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ecb [40]=code {Code :6<<8|12<<4,BitsWritten :12};
_ecb [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ecb [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ecb [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ecb [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ecb [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ecb [46]=code {Code :5<<8|6<<4,BitsWritten :12};
_ecb [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ecb [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ecb [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ecb [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ecb [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ecb [52]=code {Code :2<<8|4<<4,BitsWritten :12};
_ecb [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ecb [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ecb [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ecb [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ecb [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ecb [58]=code {Code :5<<8|9<<4,BitsWritten :12};
_ecb [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ecb [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ecb [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ecb [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ecb [63]=code {Code :6<<8|7<<4,BitsWritten :12};_fg =make (map[int ]code );
_fg [0]=code {Code :53<<8,BitsWritten :8};_fg [1]=code {Code :7<<(2+8),BitsWritten :6};_fg [2]=code {Code :7<<(4+8),BitsWritten :4};_fg [3]=code {Code :8<<(4+8),BitsWritten :4};_fg [4]=code {Code :11<<(4+8),BitsWritten :4};_fg [5]=code {Code :12<<(4+8),BitsWritten :4};
_fg [6]=code {Code :14<<(4+8),BitsWritten :4};_fg [7]=code {Code :15<<(4+8),BitsWritten :4};_fg [8]=code {Code :19<<(3+8),BitsWritten :5};_fg [9]=code {Code :20<<(3+8),BitsWritten :5};_fg [10]=code {Code :7<<(3+8),BitsWritten :5};_fg [11]=code {Code :8<<(3+8),BitsWritten :5};
_fg [12]=code {Code :8<<(2+8),BitsWritten :6};_fg [13]=code {Code :3<<(2+8),BitsWritten :6};_fg [14]=code {Code :52<<(2+8),BitsWritten :6};_fg [15]=code {Code :53<<(2+8),BitsWritten :6};_fg [16]=code {Code :42<<(2+8),BitsWritten :6};_fg [17]=code {Code :43<<(2+8),BitsWritten :6};
_fg [18]=code {Code :39<<(1+8),BitsWritten :7};_fg [19]=code {Code :12<<(1+8),BitsWritten :7};_fg [20]=code {Code :8<<(1+8),BitsWritten :7};_fg [21]=code {Code :23<<(1+8),BitsWritten :7};_fg [22]=code {Code :3<<(1+8),BitsWritten :7};_fg [23]=code {Code :4<<(1+8),BitsWritten :7};
_fg [24]=code {Code :40<<(1+8),BitsWritten :7};_fg [25]=code {Code :43<<(1+8),BitsWritten :7};_fg [26]=code {Code :19<<(1+8),BitsWritten :7};_fg [27]=code {Code :36<<(1+8),BitsWritten :7};_fg [28]=code {Code :24<<(1+8),BitsWritten :7};_fg [29]=code {Code :2<<8,BitsWritten :8};
_fg [30]=code {Code :3<<8,BitsWritten :8};_fg [31]=code {Code :26<<8,BitsWritten :8};_fg [32]=code {Code :27<<8,BitsWritten :8};_fg [33]=code {Code :18<<8,BitsWritten :8};_fg [34]=code {Code :19<<8,BitsWritten :8};_fg [35]=code {Code :20<<8,BitsWritten :8};
_fg [36]=code {Code :21<<8,BitsWritten :8};_fg [37]=code {Code :22<<8,BitsWritten :8};_fg [38]=code {Code :23<<8,BitsWritten :8};_fg [39]=code {Code :40<<8,BitsWritten :8};_fg [40]=code {Code :41<<8,BitsWritten :8};_fg [41]=code {Code :42<<8,BitsWritten :8};
_fg [42]=code {Code :43<<8,BitsWritten :8};_fg [43]=code {Code :44<<8,BitsWritten :8};_fg [44]=code {Code :45<<8,BitsWritten :8};_fg [45]=code {Code :4<<8,BitsWritten :8};_fg [46]=code {Code :5<<8,BitsWritten :8};_fg [47]=code {Code :10<<8,BitsWritten :8};
_fg [48]=code {Code :11<<8,BitsWritten :8};_fg [49]=code {Code :82<<8,BitsWritten :8};_fg [50]=code {Code :83<<8,BitsWritten :8};_fg [51]=code {Code :84<<8,BitsWritten :8};_fg [52]=code {Code :85<<8,BitsWritten :8};_fg [53]=code {Code :36<<8,BitsWritten :8};
_fg [54]=code {Code :37<<8,BitsWritten :8};_fg [55]=code {Code :88<<8,BitsWritten :8};_fg [56]=code {Code :89<<8,BitsWritten :8};_fg [57]=code {Code :90<<8,BitsWritten :8};_fg [58]=code {Code :91<<8,BitsWritten :8};_fg [59]=code {Code :74<<8,BitsWritten :8};
_fg [60]=code {Code :75<<8,BitsWritten :8};_fg [61]=code {Code :50<<8,BitsWritten :8};_fg [62]=code {Code :51<<8,BitsWritten :8};_fg [63]=code {Code :52<<8,BitsWritten :8};_dbe =make (map[int ]code );_dbe [64]=code {Code :3<<8|3<<6,BitsWritten :10};_dbe [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_dbe [192]=code {Code :12<<8|9<<4,BitsWritten :12};_dbe [256]=code {Code :5<<8|11<<4,BitsWritten :12};_dbe [320]=code {Code :3<<8|3<<4,BitsWritten :12};_dbe [384]=code {Code :3<<8|4<<4,BitsWritten :12};_dbe [448]=code {Code :3<<8|5<<4,BitsWritten :12};
_dbe [512]=code {Code :3<<8|12<<3,BitsWritten :13};_dbe [576]=code {Code :3<<8|13<<3,BitsWritten :13};_dbe [640]=code {Code :2<<8|10<<3,BitsWritten :13};_dbe [704]=code {Code :2<<8|11<<3,BitsWritten :13};_dbe [768]=code {Code :2<<8|12<<3,BitsWritten :13};
_dbe [832]=code {Code :2<<8|13<<3,BitsWritten :13};_dbe [896]=code {Code :3<<8|18<<3,BitsWritten :13};_dbe [960]=code {Code :3<<8|19<<3,BitsWritten :13};_dbe [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_dbe [1088]=code {Code :3<<8|21<<3,BitsWritten :13};
_dbe [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_dbe [1216]=code {Code :119<<3,BitsWritten :13};_dbe [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_dbe [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_dbe [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_dbe [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_dbe [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_dbe [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_dbe [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_dbe [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_ffd =make (map[int ]code );_ffd [64]=code {Code :27<<(3+8),BitsWritten :5};_ffd [128]=code {Code :18<<(3+8),BitsWritten :5};_ffd [192]=code {Code :23<<(2+8),BitsWritten :6};_ffd [256]=code {Code :55<<(1+8),BitsWritten :7};_ffd [320]=code {Code :54<<8,BitsWritten :8};
_ffd [384]=code {Code :55<<8,BitsWritten :8};_ffd [448]=code {Code :100<<8,BitsWritten :8};_ffd [512]=code {Code :101<<8,BitsWritten :8};_ffd [576]=code {Code :104<<8,BitsWritten :8};_ffd [640]=code {Code :103<<8,BitsWritten :8};_ffd [704]=code {Code :102<<8,BitsWritten :9};
_ffd [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ffd [832]=code {Code :105<<8,BitsWritten :9};_ffd [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ffd [960]=code {Code :106<<8,BitsWritten :9};_ffd [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ffd [1088]=code {Code :107<<8,BitsWritten :9};
_ffd [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ffd [1216]=code {Code :108<<8,BitsWritten :9};_ffd [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ffd [1344]=code {Code :109<<8,BitsWritten :9};_ffd [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ffd [1472]=code {Code :76<<8,BitsWritten :9};
_ffd [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ffd [1600]=code {Code :77<<8,BitsWritten :9};_ffd [1664]=code {Code :24<<(2+8),BitsWritten :6};_ffd [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_feb =make (map[int ]code );_feb [1792]=code {Code :1<<8,BitsWritten :11};
_feb [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_feb [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_feb [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_feb [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_feb [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_feb [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_feb [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_feb [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_feb [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_feb [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_feb [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_feb [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_bga =make (map[int ]byte );_bga [0]=0xFF;_bga [1]=0xFE;_bga [2]=0xFC;_bga [3]=0xF8;_bga [4]=0xF0;_bga [5]=0xE0;_bga [6]=0xC0;_bga [7]=0x80;_bga [8]=0x00;
};func (_gbe *Decoder )Read (in []byte )(int ,error ){if _gbe ._cff !=nil {return 0,_gbe ._cff ;};_abb :=len (in );var (_edg int ;_deg int ;);for _abb !=0{if _gbe ._gb >=_gbe ._cac {if _ddd :=_gbe .fetch ();_ddd !=nil {_gbe ._cff =_ddd ;return 0,_ddd ;
};};if _gbe ._cac ==-1{return _edg ,_c .EOF ;};switch {case _abb <=_gbe ._cac -_gbe ._gb :_dca :=_gbe ._cf [_gbe ._gb :_gbe ._gb +_abb ];for _ ,_acd :=range _dca {if !_gbe ._acb {_acd =^_acd ;};in [_deg ]=_acd ;_deg ++;};_edg +=len (_dca );_gbe ._gb +=len (_dca );
return _edg ,nil ;default:_bed :=_gbe ._cf [_gbe ._gb :];for _ ,_degb :=range _bed {if !_gbe ._acb {_degb =^_degb ;};in [_deg ]=_degb ;_deg ++;};_edg +=len (_bed );_gbe ._gb +=len (_bed );_abb -=len (_bed );};};return _edg ,nil ;};func (_fccc *Decoder )tryFetchEOL ()(bool ,error ){_bff ,_gea :=_fccc ._bgf .ReadBits (12);
if _gea !=nil {return false ,_gea ;};return _bff ==0x1,nil ;};var _be =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
var (_ecb map[int ]code ;_fg map[int ]code ;_dbe map[int ]code ;_ffd map[int ]code ;_feb map[int ]code ;_bga map[int ]byte ;_cc =code {Code :1<<4,BitsWritten :12};_ee =code {Code :3<<3,BitsWritten :13};_eg =code {Code :2<<3,BitsWritten :13};_fc =code {Code :1<<12,BitsWritten :4};
_dfe =code {Code :1<<13,BitsWritten :3};_ccf =code {Code :1<<15,BitsWritten :1};_fff =code {Code :3<<13,BitsWritten :3};_deb =code {Code :3<<10,BitsWritten :6};_aad =code {Code :3<<9,BitsWritten :7};_fed =code {Code :2<<13,BitsWritten :3};_egg =code {Code :2<<10,BitsWritten :6};
_cd =code {Code :2<<9,BitsWritten :7};);func _cfge (_eeba [][]byte )[][]byte {_aae :=make ([]byte ,len (_eeba [0]));for _bde :=range _aae {_aae [_bde ]=_daea ;};_eeba =append (_eeba ,[]byte {});for _faga :=len (_eeba )-1;_faga > 0;_faga --{_eeba [_faga ]=_eeba [_faga -1];
};_eeba [0]=_aae ;return _eeba ;};type Decoder struct{_gac int ;_eeg int ;_bc int ;_cf []byte ;_bdg int ;_bfg bool ;_bb bool ;_ffa bool ;_acb bool ;_bbd bool ;_gc bool ;_gaf bool ;_cac int ;_gb int ;_gacf []int ;_fde []int ;_gg int ;_baf int ;_afa int ;
_bba int ;_bgf *_ca .Reader ;_fa tiffType ;_cff error ;};func (_cdf *Decoder )decode2D ()error {_cdf ._gg =_cdf ._baf ;_cdf ._fde ,_cdf ._gacf =_cdf ._gacf ,_cdf ._fde ;_gdg :=true ;var (_gde bool ;_bcd int ;_bgc error ;);_cdf ._baf =0;_acc :for _bcd < _cdf ._gac {_dfb :=_dfg ._bbac ;
for {_gde ,_bgc =_cdf ._bgf .ReadBool ();if _bgc !=nil {return _bgc ;};_dfb =_dfb .walk (_gde );if _dfb ==nil {continue _acc ;};if !_dfb ._fge {continue ;};switch _dfb ._gca {case _ec :var _bad int ;if _gdg {_bad ,_bgc =_cdf .decodeRun (_ed );}else {_bad ,_bgc =_cdf .decodeRun (_ce );
};if _bgc !=nil {return _bgc ;};_bcd +=_bad ;_cdf ._fde [_cdf ._baf ]=_bcd ;_cdf ._baf ++;if _gdg {_bad ,_bgc =_cdf .decodeRun (_ce );}else {_bad ,_bgc =_cdf .decodeRun (_ed );};if _bgc !=nil {return _bgc ;};_bcd +=_bad ;_cdf ._fde [_cdf ._baf ]=_bcd ;
_cdf ._baf ++;case _de :_bgcg :=_cdf .getNextChangingElement (_bcd ,_gdg )+1;if _bgcg >=_cdf ._gg {_bcd =_cdf ._gac ;}else {_bcd =_cdf ._gacf [_bgcg ];};default:_fbe :=_cdf .getNextChangingElement (_bcd ,_gdg );if _fbe >=_cdf ._gg ||_fbe ==-1{_bcd =_cdf ._gac +_dfb ._gca ;
}else {_bcd =_cdf ._gacf [_fbe ]+_dfb ._gca ;};_cdf ._fde [_cdf ._baf ]=_bcd ;_cdf ._baf ++;_gdg =!_gdg ;};continue _acc ;};};return nil ;};func (_gga *Decoder )fetch ()error {if _gga ._cac ==-1{return nil ;};if _gga ._gb < _gga ._cac {return nil ;};_gga ._cac =0;
_dfge :=_gga .decodeRow ();if _dfge !=nil {if !_g .Is (_dfge ,_c .EOF ){return _dfge ;};if _gga ._cac !=0{return _dfge ;};_gga ._cac =-1;};_gga ._gb =0;return nil ;};const (_ tiffType =iota ;_ag ;_dc ;_bd ;);func (_abd *Decoder )decodeRun (_ccd *tree )(int ,error ){var _geda int ;
_eee :=_ccd ._bbac ;for {_fcea ,_ebb :=_abd ._bgf .ReadBool ();if _ebb !=nil {return 0,_ebb ;};_eee =_eee .walk (_fcea );if _eee ==nil {return 0,_g .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _eee ._fge {_geda +=_eee ._gca ;switch {case _eee ._gca >=64:_eee =_ccd ._bbac ;case _eee ._gca >=0:return _geda ,nil ;default:return _abd ._gac ,nil ;};};};};func (_bae *Decoder )decoderRowType41D ()error {if _bae ._gaf {_bae ._bgf .Align ();};_bae ._bgf .Mark ();
_agf ,_fce :=_bae .tryFetchEOL ();if _fce !=nil {return _fce ;};if !_agf &&_bae ._bbd {return _ede ;};if !_agf {_bae ._bgf .Reset ();};if _agf &&_bae ._gc {_bae ._bgf .Mark ();for _daa :=0;_daa < 5;_daa ++{_agf ,_fce =_bae .tryFetchEOL ();if _fce !=nil {if _g .Is (_fce ,_c .EOF ){if _daa ==0{break ;
};return _bea ;};};if _agf {continue ;};if _daa > 0{return _bea ;};break ;};if _agf {return _c .EOF ;};_bae ._bgf .Reset ();};if _fce =_bae .decode1D ();_fce !=nil {return _fce ;};return nil ;};func _dbeb (_bagd int ,_fffc bool )(code ,int ,bool ){if _bagd < 64{if _fffc {return _fg [_bagd ],0,true ;
};return _ecb [_bagd ],0,true ;};_adg :=_bagd /64;if _adg > 40{return _feb [2560],_bagd -2560,false ;};if _adg > 27{return _feb [_adg *64],_bagd -_adg *64,false ;};if _fffc {return _ffd [_adg *64],_bagd -_adg *64,false ;};return _dbe [_adg *64],_bagd -_adg *64,false ;
};var (_bea =_g .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_ede =_g .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_ffe *Decoder )decodeRowType6 ()error {if _ffe ._gaf {_ffe ._bgf .Align ();};if _ffe ._gc {_ffe ._bgf .Mark ();_dad ,_ggdg :=_ffe .tryFetchEOL ();if _ggdg !=nil {return _ggdg ;};if _dad {_dad ,_ggdg =_ffe .tryFetchEOL ();if _ggdg !=nil {return _ggdg ;
};if _dad {return _c .EOF ;};};_ffe ._bgf .Reset ();};return _ffe .decode2D ();};func _cag (_aed []byte ,_dec int ,_gbf code )([]byte ,int ){_cef :=true ;var _bcfa []byte ;_bcfa ,_dec =_bfff (nil ,_dec ,_gbf );_faaa :=0;var _ggc int ;for _faaa < len (_aed ){_ggc ,_faaa =_dcc (_aed ,_cef ,_faaa );
_bcfa ,_dec =_ebe (_bcfa ,_dec ,_ggc ,_cef );_cef =!_cef ;};return _bcfa ,_dec %8;};type code struct{Code uint16 ;BitsWritten int ;};func _gec (_gfe int )([]byte ,int ){var _eec []byte ;for _bag :=0;_bag < 2;_bag ++{_eec ,_gfe =_bfff (_eec ,_gfe ,_cc );
};return _eec ,_gfe %8;};func (_degba *Encoder )encodeG4 (_bec [][]byte )[]byte {_fdda :=make ([][]byte ,len (_bec ));copy (_fdda ,_bec );_fdda =_cfge (_fdda );var _geg []byte ;var _ade int ;for _fccca :=1;_fccca < len (_fdda );_fccca ++{if _degba .Rows > 0&&!_degba .EndOfBlock &&_fccca ==(_degba .Rows +1){break ;
};var _edf []byte ;var _ecf ,_faea ,_fee int ;_afe :=_ade ;_adeb :=-1;for _adeb < len (_fdda [_fccca ]){_ecf =_eccg (_fdda [_fccca ],_adeb );_faea =_bfb (_fdda [_fccca ],_fdda [_fccca -1],_adeb );_fee =_eccg (_fdda [_fccca -1],_faea );if _fee < _ecf {_edf ,_afe =_bfff (_edf ,_afe ,_fc );
_adeb =_fee ;}else {if _d .Abs (float64 (_faea -_ecf ))> 3{_edf ,_afe ,_adeb =_afb (_fdda [_fccca ],_edf ,_afe ,_adeb ,_ecf );}else {_edf ,_afe =_bge (_edf ,_afe ,_ecf ,_faea );_adeb =_ecf ;};};};_geg =_degba .appendEncodedRow (_geg ,_edf ,_ade );if _degba .EncodedByteAlign {_afe =0;
};_ade =_afe %8;};if _degba .EndOfBlock {_cfd ,_ :=_gec (_ade );_geg =_degba .appendEncodedRow (_geg ,_cfd ,_ade );};return _geg ;};func (_bbde *Decoder )decodeRowType2 ()error {if _bbde ._gaf {_bbde ._bgf .Align ();};if _dga :=_bbde .decode1D ();_dga !=nil {return _dga ;
};return nil ;};func (_cee *Decoder )decodeRowType4 ()error {if !_cee ._bfg {return _cee .decoderRowType41D ();};if _cee ._gaf {_cee ._bgf .Align ();};_cee ._bgf .Mark ();_dae ,_bfa :=_cee .tryFetchEOL ();if _bfa !=nil {return _bfa ;};if !_dae &&_cee ._bbd {_cee ._afa ++;
if _cee ._afa > _cee ._bdg {return _ede ;};_cee ._bgf .Reset ();};if !_dae {_cee ._bgf .Reset ();};_dcb ,_bfa :=_cee ._bgf .ReadBool ();if _bfa !=nil {return _bfa ;};if _dcb {if _dae &&_cee ._gc {if _bfa =_cee .tryFetchRTC2D ();_bfa !=nil {return _bfa ;
};};_bfa =_cee .decode1D ();}else {_bfa =_cee .decode2D ();};if _bfa !=nil {return _bfa ;};return nil ;};var _fe =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _dcc (_cabb []byte ,_gdf bool ,_dac int )(int ,int ){_aga :=0;for _dac < len (_cabb ){if _gdf {if _cabb [_dac ]!=_daea {break ;};}else {if _cabb [_dac ]!=_ege {break ;};};_aga ++;_dac ++;};return _aga ,_dac ;};func _eef (_fffa ,_gag int )code {var _cda code ;
switch _gag -_fffa {case -1:_cda =_fff ;case -2:_cda =_deb ;case -3:_cda =_aad ;case 0:_cda =_ccf ;case 1:_cda =_fed ;case 2:_cda =_egg ;case 3:_cda =_cd ;};return _cda ;};func _afb (_dbf ,_bcc []byte ,_fdfc ,_efb ,_geba int )([]byte ,int ,int ){_dgdb :=_eccg (_dbf ,_geba );
_dgad :=_efb >=0&&_dbf [_efb ]==_daea ||_efb ==-1;_bcc ,_fdfc =_bfff (_bcc ,_fdfc ,_dfe );var _fdfcg int ;if _efb > -1{_fdfcg =_geba -_efb ;}else {_fdfcg =_geba -_efb -1;};_bcc ,_fdfc =_ebe (_bcc ,_fdfc ,_fdfcg ,_dgad );_dgad =!_dgad ;_ddfc :=_dgdb -_geba ;
_bcc ,_fdfc =_ebe (_bcc ,_fdfc ,_ddfc ,_dgad );_efb =_dgdb ;return _bcc ,_fdfc ,_efb ;};func (_bcgf *tree )fill (_adc ,_agb ,_ggga int )error {_gdfb :=_bcgf ._bbac ;for _egfd :=0;_egfd < _adc ;_egfd ++{_edc :=_adc -1-_egfd ;_gedg :=((_agb >>uint (_edc ))&1)!=0;
_eea :=_gdfb .walk (_gedg );if _eea !=nil {if _eea ._fge {return _g .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_gdfb =_eea ;continue ;};_eea =&treeNode {};if _egfd ==_adc -1{_eea ._gca =_ggga ;_eea ._fge =true ;};if _agb ==0{_eea ._bgff =true ;};_gdfb .set (_gedg ,_eea );_gdfb =_eea ;};return nil ;};func (_fceb *Encoder )encodeG31D (_degf [][]byte )[]byte {var _geb []byte ;
_cbc :=0;for _gfa :=range _degf {if _fceb .Rows > 0&&!_fceb .EndOfBlock &&_gfa ==_fceb .Rows {break ;};_eba ,_bega :=_cag (_degf [_gfa ],_cbc ,_cc );_geb =_fceb .appendEncodedRow (_geb ,_eba ,_cbc );if _fceb .EncodedByteAlign {_bega =0;};_cbc =_bega ;};
if _fceb .EndOfBlock {_bbaa ,_ :=_cbgf (_cbc );_geb =_fceb .appendEncodedRow (_geb ,_bbaa ,_cbc );};return _geb ;};func (_ggg *Decoder )tryFetchEOL1 ()(bool ,error ){_bgb ,_efc :=_ggg ._bgf .ReadBits (13);if _efc !=nil {return false ,_efc ;};return _bgb ==0x3,nil ;
};func _eccg (_dbg []byte ,_gfd int )int {if _gfd >=len (_dbg ){return _gfd ;};if _gfd < -1{_gfd =-1;};var _ggb byte ;if _gfd > -1{_ggb =_dbg [_gfd ];}else {_ggb =_daea ;};_gdec :=_gfd +1;for _gdec < len (_dbg ){if _dbg [_gdec ]!=_ggb {break ;};_gdec ++;
};return _gdec ;};func _bfb (_aeda ,_edad []byte ,_daab int )int {_bdd :=_eccg (_edad ,_daab );if _bdd < len (_edad )&&(_daab ==-1&&_edad [_bdd ]==_daea ||_daab >=0&&_daab < len (_aeda )&&_aeda [_daab ]==_edad [_bdd ]||_daab >=len (_aeda )&&_aeda [_daab -1]!=_edad [_bdd ]){_bdd =_eccg (_edad ,_bdd );
};return _bdd ;};func (_bcf *Decoder )decode1D ()error {var (_fab int ;_fca error ;);_cbg :=true ;_bcf ._baf =0;for {var _gge int ;if _cbg {_gge ,_fca =_bcf .decodeRun (_ed );}else {_gge ,_fca =_bcf .decodeRun (_ce );};if _fca !=nil {return _fca ;};_fab +=_gge ;
_bcf ._fde [_bcf ._baf ]=_fab ;_bcf ._baf ++;_cbg =!_cbg ;if _fab >=_bcf ._gac {break ;};};return nil ;};type tiffType int ;var (_df *treeNode ;_ef *treeNode ;_ce *tree ;_ed *tree ;_f *tree ;_dfg *tree ;_a =-2000;_ae =-1000;_de =-3000;_ec =-4000;);func (_aab *treeNode )walk (_ecbe bool )*treeNode {if _ecbe {return _aab ._dfea ;
};return _aab ._acf ;};func (_cde *treeNode )set (_fbcc bool ,_gfc *treeNode ){if !_fbcc {_cde ._acf =_gfc ;}else {_cde ._dfea =_gfc ;};};func (_beg *Decoder )tryFetchRTC2D ()(_edb error ){_beg ._bgf .Mark ();var _fdf bool ;for _eff :=0;_eff < 5;_eff ++{_fdf ,_edb =_beg .tryFetchEOL1 ();
if _edb !=nil {if _g .Is (_edb ,_c .EOF ){if _eff ==0{break ;};return _bea ;};};if _fdf {continue ;};if _eff > 0{return _bea ;};break ;};if _fdf {return _c .EOF ;};_beg ._bgf .Reset ();return _edb ;};func (_fced *Decoder )getNextChangingElement (_eb int ,_fbd bool )int {_fcc :=0;
if !_fbd {_fcc =1;};_afaa :=int (uint32 (_fced ._bba )&0xFFFFFFFE)+_fcc ;if _afaa > 2{_afaa -=2;};if _eb ==0{return _afaa ;};for _bgd :=_afaa ;_bgd < _fced ._gg ;_bgd +=2{if _eb < _fced ._gacf [_bgd ]{_fced ._bba =_bgd ;return _bgd ;};};return -1;};func (_egf tiffType )String ()string {switch _egf {case _ag :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _dc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _bd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _dff (_agg []byte ,_dfbb int )([]byte ,int ){return _bfff (_agg ,_dfbb ,_fc )};
var _bf =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
type treeNode struct{_acf *treeNode ;_dfea *treeNode ;_gca int ;_bgff bool ;_fge bool ;};type tree struct{_bbac *treeNode };func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_fef :=&Decoder {_bgf :_ca .NewReader (data ),_gac :options .Columns ,_eeg :options .Rows ,_bdg :options .DamagedRowsBeforeError ,_cf :make ([]byte ,(options .Columns +7)/8),_gacf :make ([]int ,options .Columns +2),_fde :make ([]int ,options .Columns +2),_gaf :options .EncodedByteAligned ,_acb :options .BlackIsOne ,_bbd :options .EndOfLine ,_gc :options .EndOfBlock };
switch {case options .K ==0:_fef ._fa =_dc ;if len (data )< 20{return nil ,_g .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_beb :=data [:20];if _beb [0]!=0||(_beb [1]>>4!=1&&_beb [1]!=1){_fef ._fa =_ag ;
_aee :=(uint16 (_beb [0])<<8+uint16 (_beb [1]&0xff))>>4;for _dbd :=12;_dbd < 160;_dbd ++{_aee =(_aee <<1)+uint16 ((_beb [_dbd /8]>>uint16 (7-(_dbd %8)))&0x01);if _aee &0xfff==1{_fef ._fa =_dc ;break ;};};};case options .K < 0:_fef ._fa =_bd ;case options .K > 0:_fef ._fa =_dc ;
_fef ._bfg =true ;};switch _fef ._fa {case _ag ,_dc ,_bd :default:return nil ,_g .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");};
return _fef ,nil ;};func _ebe (_gef []byte ,_gcdc int ,_daaf int ,_cfg bool )([]byte ,int ){var (_fgg code ;_ded bool ;);for !_ded {_fgg ,_daaf ,_ded =_dbeb (_daaf ,_cfg );_gef ,_gcdc =_bfff (_gef ,_gcdc ,_fgg );};return _gef ,_gcdc ;};func (_dab *Decoder )decodeRow ()(_gad error ){if !_dab ._gc &&_dab ._eeg > 0&&_dab ._eeg ==_dab ._bc {return _c .EOF ;
};switch _dab ._fa {case _ag :_gad =_dab .decodeRowType2 ();case _dc :_gad =_dab .decodeRowType4 ();case _bd :_gad =_dab .decodeRowType6 ();};if _gad !=nil {return _gad ;};_abbc :=0;_gd :=true ;_dab ._bba =0;for _ecc :=0;_ecc < _dab ._baf ;_ecc ++{_aea :=_dab ._gac ;
if _ecc !=_dab ._baf {_aea =_dab ._fde [_ecc ];};if _aea > _dab ._gac {_aea =_dab ._gac ;};_cea :=_abbc /8;for _abbc %8!=0&&_aea -_abbc > 0{var _cfa byte ;if !_gd {_cfa =1<<uint (7-(_abbc %8));};_dab ._cf [_cea ]|=_cfa ;_abbc ++;};if _abbc %8==0{_cea =_abbc /8;
var _gf byte ;if !_gd {_gf =0xff;};for _aea -_abbc > 7{_dab ._cf [_cea ]=_gf ;_abbc +=8;_cea ++;};};for _aea -_abbc > 0{if _abbc %8==0{_dab ._cf [_cea ]=0;};var _dgc byte ;if !_gd {_dgc =1<<uint (7-(_abbc %8));};_dab ._cf [_cea ]|=_dgc ;_abbc ++;};_gd =!_gd ;
};if _abbc !=_dab ._gac {return _g .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_dab ._cac =(_abbc +7)/8;_dab ._bc ++;return nil ;};func _bge (_ebce []byte ,_fda ,_ggdd ,_gba int )([]byte ,int ){_afd :=_eef (_ggdd ,_gba );_ebce ,_fda =_bfff (_ebce ,_fda ,_afd );return _ebce ,_fda ;};var (_daea byte =1;_ege byte =0;);func (_bgdd *Encoder )encodeG32D (_dgd [][]byte )[]byte {var _fdd []byte ;
var _cdfc int ;for _fae :=0;_fae < len (_dgd );_fae +=_bgdd .K {if _bgdd .Rows > 0&&!_bgdd .EndOfBlock &&_fae ==_bgdd .Rows {break ;};_ebc ,_ad :=_cag (_dgd [_fae ],_cdfc ,_ee );_fdd =_bgdd .appendEncodedRow (_fdd ,_ebc ,_cdfc );if _bgdd .EncodedByteAlign {_ad =0;
};_cdfc =_ad ;for _dcf :=_fae +1;_dcf < (_fae +_bgdd .K )&&_dcf < len (_dgd );_dcf ++{if _bgdd .Rows > 0&&!_bgdd .EndOfBlock &&_dcf ==_bgdd .Rows {break ;};_fcd ,_cae :=_bfff (nil ,_cdfc ,_eg );var _eae ,_ceeg ,_cdba int ;_gcf :=-1;for _gcf < len (_dgd [_dcf ]){_eae =_eccg (_dgd [_dcf ],_gcf );
_ceeg =_bfb (_dgd [_dcf ],_dgd [_dcf -1],_gcf );_cdba =_eccg (_dgd [_dcf -1],_ceeg );if _cdba < _eae {_fcd ,_cae =_dff (_fcd ,_cae );_gcf =_cdba ;}else {if _d .Abs (float64 (_ceeg -_eae ))> 3{_fcd ,_cae ,_gcf =_afb (_dgd [_dcf ],_fcd ,_cae ,_gcf ,_eae );
}else {_fcd ,_cae =_bge (_fcd ,_cae ,_eae ,_ceeg );_gcf =_eae ;};};};_fdd =_bgdd .appendEncodedRow (_fdd ,_fcd ,_cdfc );if _bgdd .EncodedByteAlign {_cae =0;};_cdfc =_cae %8;};};if _bgdd .EndOfBlock {_cad ,_ :=_bbc (_cdfc );_fdd =_bgdd .appendEncodedRow (_fdd ,_cad ,_cdfc );
};return _fdd ;};func (_adb *Encoder )appendEncodedRow (_age ,_cg []byte ,_edgd int )[]byte {if len (_age )> 0&&_edgd !=0&&!_adb .EncodedByteAlign {_age [len (_age )-1]=_age [len (_age )-1]|_cg [0];_age =append (_age ,_cg [1:]...);}else {_age =append (_age ,_cg ...);
};return _age ;};func _cbgf (_fbc int )([]byte ,int ){var _faf []byte ;for _ceef :=0;_ceef < 6;_ceef ++{_faf ,_fbc =_bfff (_faf ,_fbc ,_cc );};return _faf ,_fbc %8;};func _bfff (_fag []byte ,_ced int ,_gcdf code )([]byte ,int ){_eeb :=0;for _eeb < _gcdf .BitsWritten {_ebbb :=_ced /8;
_afeb :=_ced %8;if _ebbb >=len (_fag ){_fag =append (_fag ,0);};_effg :=8-_afeb ;_ffg :=_gcdf .BitsWritten -_eeb ;if _effg > _ffg {_effg =_ffg ;};if _eeb < 8{_fag [_ebbb ]=_fag [_ebbb ]|byte (_gcdf .Code >>uint (8+_afeb -_eeb ))&_bga [8-_effg -_afeb ];
}else {_fag [_ebbb ]=_fag [_ebbb ]|(byte (_gcdf .Code <<uint (_eeb -8))&_bga [8-_effg ])>>uint (_afeb );};_ced +=_effg ;_eeb +=_effg ;};return _fag ,_ced ;};func _begb (_cbgg ,_dgdd []byte ,_fbeb int ,_gbef bool )int {_egd :=_eccg (_dgdd ,_fbeb );if _egd < len (_dgdd )&&(_fbeb ==-1&&_dgdd [_egd ]==_daea ||_fbeb >=0&&_fbeb < len (_cbgg )&&_cbgg [_fbeb ]==_dgdd [_egd ]||_fbeb >=len (_cbgg )&&_gbef &&_dgdd [_egd ]==_daea ||_fbeb >=len (_cbgg )&&!_gbef &&_dgdd [_egd ]==_ege ){_egd =_eccg (_dgdd ,_egd );
};return _egd ;};