//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_d "errors";_db "math";);func (_bdg *Encoder )encodeG32D (_gbe [][]byte )[]byte {var _ega []byte ;var _bdb int ;for _gdgf :=0;_gdgf < len (_gbe );_gdgf +=_bdg .K {if _bdg .Rows > 0&&!_bdg .EndOfBlock &&_gdgf ==_bdg .Rows {break ;
};_cebd ,_bece :=_ccac (_gbe [_gdgf ],_bdb ,_gb );_ega =_bdg .appendEncodedRow (_ega ,_cebd ,_bdb );if _bdg .EncodedByteAlign {_bece =0;};_bdb =_bece ;for _ffd :=_gdgf +1;_ffd < (_gdgf +_bdg .K )&&_ffd < len (_gbe );_ffd ++{if _bdg .Rows > 0&&!_bdg .EndOfBlock &&_ffd ==_bdg .Rows {break ;
};_bef ,_gfge :=_fcc (nil ,_bdb ,_af );var _acb ,_fgb ,_gfc int ;_abb :=-1;for _abb < len (_gbe [_ffd ]){_acb =_fdeg (_gbe [_ffd ],_abb );_fgb =_dacf (_gbe [_ffd ],_gbe [_ffd -1],_abb );_gfc =_fdeg (_gbe [_ffd -1],_fgb );if _gfc < _acb {_bef ,_gfge =_fbdc (_bef ,_gfge );
_abb =_gfc ;}else {if _db .Abs (float64 (_fgb -_acb ))> 3{_bef ,_gfge ,_abb =_bcb (_gbe [_ffd ],_bef ,_gfge ,_abb ,_acb );}else {_bef ,_gfge =_dacb (_bef ,_gfge ,_acb ,_fgb );_abb =_acb ;};};};_ega =_bdg .appendEncodedRow (_ega ,_bef ,_bdb );if _bdg .EncodedByteAlign {_gfge =0;
};_bdb =_gfge %8;};};if _bdg .EndOfBlock {_dbd ,_ :=_ecf (_bdb );_ega =_bdg .appendEncodedRow (_ega ,_dbd ,_bdb );};return _ega ;};func _eda (_fcd [][]byte ,_fea []byte ,_dcc bool ,_edf ,_bfcd int )([]byte ,int ){_be :=_bce (_fea ,_fcd [len (_fcd )-1],_edf ,_dcc );
_ba :=_be +_bfcd ;if _edf ==-1{_fea =_aff (_fea ,_dcc ,_ba -_edf -1);}else {_fea =_aff (_fea ,_dcc ,_ba -_edf );};_edf =_ba ;return _fea ,_edf ;};func init (){_e =make (map[int ]code );_e [0]=code {Code :13<<8|3<<6,BitsWritten :10};_e [1]=code {Code :2<<(5+8),BitsWritten :3};
_e [2]=code {Code :3<<(6+8),BitsWritten :2};_e [3]=code {Code :2<<(6+8),BitsWritten :2};_e [4]=code {Code :3<<(5+8),BitsWritten :3};_e [5]=code {Code :3<<(4+8),BitsWritten :4};_e [6]=code {Code :2<<(4+8),BitsWritten :4};_e [7]=code {Code :3<<(3+8),BitsWritten :5};
_e [8]=code {Code :5<<(2+8),BitsWritten :6};_e [9]=code {Code :4<<(2+8),BitsWritten :6};_e [10]=code {Code :4<<(1+8),BitsWritten :7};_e [11]=code {Code :5<<(1+8),BitsWritten :7};_e [12]=code {Code :7<<(1+8),BitsWritten :7};_e [13]=code {Code :4<<8,BitsWritten :8};
_e [14]=code {Code :7<<8,BitsWritten :8};_e [15]=code {Code :12<<8,BitsWritten :9};_e [16]=code {Code :5<<8|3<<6,BitsWritten :10};_e [17]=code {Code :6<<8,BitsWritten :10};_e [18]=code {Code :2<<8,BitsWritten :10};_e [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_e [20]=code {Code :13<<8,BitsWritten :11};_e [21]=code {Code :13<<8|4<<5,BitsWritten :11};_e [22]=code {Code :6<<8|7<<5,BitsWritten :11};_e [23]=code {Code :5<<8,BitsWritten :11};_e [24]=code {Code :2<<8|7<<5,BitsWritten :11};_e [25]=code {Code :3<<8,BitsWritten :11};
_e [26]=code {Code :12<<8|10<<4,BitsWritten :12};_e [27]=code {Code :12<<8|11<<4,BitsWritten :12};_e [28]=code {Code :12<<8|12<<4,BitsWritten :12};_e [29]=code {Code :12<<8|13<<4,BitsWritten :12};_e [30]=code {Code :6<<8|8<<4,BitsWritten :12};_e [31]=code {Code :6<<8|9<<4,BitsWritten :12};
_e [32]=code {Code :6<<8|10<<4,BitsWritten :12};_e [33]=code {Code :6<<8|11<<4,BitsWritten :12};_e [34]=code {Code :13<<8|2<<4,BitsWritten :12};_e [35]=code {Code :13<<8|3<<4,BitsWritten :12};_e [36]=code {Code :13<<8|4<<4,BitsWritten :12};_e [37]=code {Code :13<<8|5<<4,BitsWritten :12};
_e [38]=code {Code :13<<8|6<<4,BitsWritten :12};_e [39]=code {Code :13<<8|7<<4,BitsWritten :12};_e [40]=code {Code :6<<8|12<<4,BitsWritten :12};_e [41]=code {Code :6<<8|13<<4,BitsWritten :12};_e [42]=code {Code :13<<8|10<<4,BitsWritten :12};_e [43]=code {Code :13<<8|11<<4,BitsWritten :12};
_e [44]=code {Code :5<<8|4<<4,BitsWritten :12};_e [45]=code {Code :5<<8|5<<4,BitsWritten :12};_e [46]=code {Code :5<<8|6<<4,BitsWritten :12};_e [47]=code {Code :5<<8|7<<4,BitsWritten :12};_e [48]=code {Code :6<<8|4<<4,BitsWritten :12};_e [49]=code {Code :6<<8|5<<4,BitsWritten :12};
_e [50]=code {Code :5<<8|2<<4,BitsWritten :12};_e [51]=code {Code :5<<8|3<<4,BitsWritten :12};_e [52]=code {Code :2<<8|4<<4,BitsWritten :12};_e [53]=code {Code :3<<8|7<<4,BitsWritten :12};_e [54]=code {Code :3<<8|8<<4,BitsWritten :12};_e [55]=code {Code :2<<8|7<<4,BitsWritten :12};
_e [56]=code {Code :2<<8|8<<4,BitsWritten :12};_e [57]=code {Code :5<<8|8<<4,BitsWritten :12};_e [58]=code {Code :5<<8|9<<4,BitsWritten :12};_e [59]=code {Code :2<<8|11<<4,BitsWritten :12};_e [60]=code {Code :2<<8|12<<4,BitsWritten :12};_e [61]=code {Code :5<<8|10<<4,BitsWritten :12};
_e [62]=code {Code :6<<8|6<<4,BitsWritten :12};_e [63]=code {Code :6<<8|7<<4,BitsWritten :12};_bg =make (map[int ]code );_bg [0]=code {Code :53<<8,BitsWritten :8};_bg [1]=code {Code :7<<(2+8),BitsWritten :6};_bg [2]=code {Code :7<<(4+8),BitsWritten :4};
_bg [3]=code {Code :8<<(4+8),BitsWritten :4};_bg [4]=code {Code :11<<(4+8),BitsWritten :4};_bg [5]=code {Code :12<<(4+8),BitsWritten :4};_bg [6]=code {Code :14<<(4+8),BitsWritten :4};_bg [7]=code {Code :15<<(4+8),BitsWritten :4};_bg [8]=code {Code :19<<(3+8),BitsWritten :5};
_bg [9]=code {Code :20<<(3+8),BitsWritten :5};_bg [10]=code {Code :7<<(3+8),BitsWritten :5};_bg [11]=code {Code :8<<(3+8),BitsWritten :5};_bg [12]=code {Code :8<<(2+8),BitsWritten :6};_bg [13]=code {Code :3<<(2+8),BitsWritten :6};_bg [14]=code {Code :52<<(2+8),BitsWritten :6};
_bg [15]=code {Code :53<<(2+8),BitsWritten :6};_bg [16]=code {Code :42<<(2+8),BitsWritten :6};_bg [17]=code {Code :43<<(2+8),BitsWritten :6};_bg [18]=code {Code :39<<(1+8),BitsWritten :7};_bg [19]=code {Code :12<<(1+8),BitsWritten :7};_bg [20]=code {Code :8<<(1+8),BitsWritten :7};
_bg [21]=code {Code :23<<(1+8),BitsWritten :7};_bg [22]=code {Code :3<<(1+8),BitsWritten :7};_bg [23]=code {Code :4<<(1+8),BitsWritten :7};_bg [24]=code {Code :40<<(1+8),BitsWritten :7};_bg [25]=code {Code :43<<(1+8),BitsWritten :7};_bg [26]=code {Code :19<<(1+8),BitsWritten :7};
_bg [27]=code {Code :36<<(1+8),BitsWritten :7};_bg [28]=code {Code :24<<(1+8),BitsWritten :7};_bg [29]=code {Code :2<<8,BitsWritten :8};_bg [30]=code {Code :3<<8,BitsWritten :8};_bg [31]=code {Code :26<<8,BitsWritten :8};_bg [32]=code {Code :27<<8,BitsWritten :8};
_bg [33]=code {Code :18<<8,BitsWritten :8};_bg [34]=code {Code :19<<8,BitsWritten :8};_bg [35]=code {Code :20<<8,BitsWritten :8};_bg [36]=code {Code :21<<8,BitsWritten :8};_bg [37]=code {Code :22<<8,BitsWritten :8};_bg [38]=code {Code :23<<8,BitsWritten :8};
_bg [39]=code {Code :40<<8,BitsWritten :8};_bg [40]=code {Code :41<<8,BitsWritten :8};_bg [41]=code {Code :42<<8,BitsWritten :8};_bg [42]=code {Code :43<<8,BitsWritten :8};_bg [43]=code {Code :44<<8,BitsWritten :8};_bg [44]=code {Code :45<<8,BitsWritten :8};
_bg [45]=code {Code :4<<8,BitsWritten :8};_bg [46]=code {Code :5<<8,BitsWritten :8};_bg [47]=code {Code :10<<8,BitsWritten :8};_bg [48]=code {Code :11<<8,BitsWritten :8};_bg [49]=code {Code :82<<8,BitsWritten :8};_bg [50]=code {Code :83<<8,BitsWritten :8};
_bg [51]=code {Code :84<<8,BitsWritten :8};_bg [52]=code {Code :85<<8,BitsWritten :8};_bg [53]=code {Code :36<<8,BitsWritten :8};_bg [54]=code {Code :37<<8,BitsWritten :8};_bg [55]=code {Code :88<<8,BitsWritten :8};_bg [56]=code {Code :89<<8,BitsWritten :8};
_bg [57]=code {Code :90<<8,BitsWritten :8};_bg [58]=code {Code :91<<8,BitsWritten :8};_bg [59]=code {Code :74<<8,BitsWritten :8};_bg [60]=code {Code :75<<8,BitsWritten :8};_bg [61]=code {Code :50<<8,BitsWritten :8};_bg [62]=code {Code :51<<8,BitsWritten :8};
_bg [63]=code {Code :52<<8,BitsWritten :8};_g =make (map[int ]code );_g [64]=code {Code :3<<8|3<<6,BitsWritten :10};_g [128]=code {Code :12<<8|8<<4,BitsWritten :12};_g [192]=code {Code :12<<8|9<<4,BitsWritten :12};_g [256]=code {Code :5<<8|11<<4,BitsWritten :12};
_g [320]=code {Code :3<<8|3<<4,BitsWritten :12};_g [384]=code {Code :3<<8|4<<4,BitsWritten :12};_g [448]=code {Code :3<<8|5<<4,BitsWritten :12};_g [512]=code {Code :3<<8|12<<3,BitsWritten :13};_g [576]=code {Code :3<<8|13<<3,BitsWritten :13};_g [640]=code {Code :2<<8|10<<3,BitsWritten :13};
_g [704]=code {Code :2<<8|11<<3,BitsWritten :13};_g [768]=code {Code :2<<8|12<<3,BitsWritten :13};_g [832]=code {Code :2<<8|13<<3,BitsWritten :13};_g [896]=code {Code :3<<8|18<<3,BitsWritten :13};_g [960]=code {Code :3<<8|19<<3,BitsWritten :13};_g [1024]=code {Code :3<<8|20<<3,BitsWritten :13};
_g [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_g [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_g [1216]=code {Code :119<<3,BitsWritten :13};_g [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_g [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_g [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_g [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_g [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_g [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_g [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_g [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_bgf =make (map[int ]code );
_bgf [64]=code {Code :27<<(3+8),BitsWritten :5};_bgf [128]=code {Code :18<<(3+8),BitsWritten :5};_bgf [192]=code {Code :23<<(2+8),BitsWritten :6};_bgf [256]=code {Code :55<<(1+8),BitsWritten :7};_bgf [320]=code {Code :54<<8,BitsWritten :8};_bgf [384]=code {Code :55<<8,BitsWritten :8};
_bgf [448]=code {Code :100<<8,BitsWritten :8};_bgf [512]=code {Code :101<<8,BitsWritten :8};_bgf [576]=code {Code :104<<8,BitsWritten :8};_bgf [640]=code {Code :103<<8,BitsWritten :8};_bgf [704]=code {Code :102<<8,BitsWritten :9};_bgf [768]=code {Code :102<<8|1<<7,BitsWritten :9};
_bgf [832]=code {Code :105<<8,BitsWritten :9};_bgf [896]=code {Code :105<<8|1<<7,BitsWritten :9};_bgf [960]=code {Code :106<<8,BitsWritten :9};_bgf [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_bgf [1088]=code {Code :107<<8,BitsWritten :9};_bgf [1152]=code {Code :107<<8|1<<7,BitsWritten :9};
_bgf [1216]=code {Code :108<<8,BitsWritten :9};_bgf [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_bgf [1344]=code {Code :109<<8,BitsWritten :9};_bgf [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_bgf [1472]=code {Code :76<<8,BitsWritten :9};_bgf [1536]=code {Code :76<<8|1<<7,BitsWritten :9};
_bgf [1600]=code {Code :77<<8,BitsWritten :9};_bgf [1664]=code {Code :24<<(2+8),BitsWritten :6};_bgf [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ea =make (map[int ]code );_ea [1792]=code {Code :1<<8,BitsWritten :11};_ea [1856]=code {Code :1<<8|4<<5,BitsWritten :11};
_ea [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ea [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ea [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ea [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_ea [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ea [2240]=code {Code :1<<8|6<<4,BitsWritten :12};
_ea [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ea [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ea [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_ea [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ea [2560]=code {Code :1<<8|15<<4,BitsWritten :12};
_a =make (map[int ]byte );_a [0]=0xFF;_a [1]=0xFE;_a [2]=0xFC;_a [3]=0xF8;_a [4]=0xF0;_a [5]=0xE0;_a [6]=0xC0;_a [7]=0x80;_a [8]=0x00;};func _bfg (_fg []byte ,_cgg int ,_ecd code )(bool ,int ){_ccc :=_cgg ;var (_eadb uint16 ;_dfb int ;);_eadb ,_dfb ,_cgg =_cafa (_fg ,_cgg );
if _dfb > 3{return false ,_ccc ;};_eadb >>=uint (3-_dfb );_eadb <<=3;if _eadb !=_ecd .Code {return false ,_ccc ;};return true ,_cgg -3+_dfb ;};func (_bgfc *Encoder )Decode (encoded []byte )([][]byte ,error ){if _bgfc .BlackIs1 {_dab =0;_aab =1;}else {_dab =1;
_aab =0;};if _bgfc .K ==0{return _bgfc .decodeG31D (encoded );};if _bgfc .K > 0{return _bgfc .decodeG32D (encoded );};if _bgfc .K < 4{return _bgfc .decodeG4 (encoded );};return nil ,nil ;};func init (){for _dg ,_agf :=range _bg {_fga (_ff ,_agf ,0,_dg );
};for _faa ,_gf :=range _bgf {_fga (_ff ,_gf ,0,_faa );};for _cc ,_dc :=range _e {_fga (_ffb ,_dc ,0,_cc );};for _cd ,_gbb :=range _g {_fga (_ffb ,_gbb ,0,_cd );};for _fbc ,_gcb :=range _ea {_fga (_ff ,_gcb ,0,_fbc );_fga (_ffb ,_gcb ,0,_fbc );};_fga (_bfc ,_ed ,0,0);
_fga (_bfc ,_f ,0,0);_fga (_bfc ,_gd ,0,0);_fga (_bfc ,_dd ,0,0);_fga (_bfc ,_fb ,0,0);_fga (_bfc ,_gc ,0,0);_fga (_bfc ,_gdc ,0,0);_fga (_bfc ,_da ,0,0);_fga (_bfc ,_gbd ,0,0);};func _dacb (_dfcg []byte ,_cag ,_ddd ,_eff int )([]byte ,int ){_feaf :=_fad (_ddd ,_eff );
_dfcg ,_cag =_fcc (_dfcg ,_cag ,_feaf );return _dfcg ,_cag ;};func (_eab *Encoder )decodeG31D (_de []byte )([][]byte ,error ){var _eg [][]byte ;var _bb int ;for (_bb /8)< len (_de ){var _gbf bool ;_gbf ,_bb =_cac (_de ,_bb );if !_gbf {if _eab .EndOfLine {return nil ,_ac ;
};}else {for _ded :=0;_ded < 5;_ded ++{_gbf ,_bb =_cac (_de ,_bb );if !_gbf {if _ded ==0{break ;};return nil ,_fa ;};};if _gbf {break ;};};var _bff []byte ;_bff ,_bb =_eab .decodeRow1D (_de ,_bb );if _eab .EncodedByteAlign &&_bb %8!=0{_bb +=8-_bb %8;};
_eg =append (_eg ,_bff );if _eab .Rows > 0&&!_eab .EndOfBlock &&len (_eg )>=_eab .Rows {break ;};};return _eg ,nil ;};func (_abbe *Encoder )appendEncodedRow (_gccf ,_cgbc []byte ,_geb int )[]byte {if len (_gccf )> 0&&_geb !=0&&!_abbe .EncodedByteAlign {_gccf [len (_gccf )-1]=_gccf [len (_gccf )-1]|_cgbc [0];
_gccf =append (_gccf ,_cgbc [1:]...);}else {_gccf =append (_gccf ,_cgbc ...);};return _gccf ;};var (_ff =&decodingTreeNode {Val :255};_ffb =&decodingTreeNode {Val :255};_bfc =&decodingTreeNode {Val :255};);type code struct{Code uint16 ;BitsWritten int ;
};func _fga (_fead *decodingTreeNode ,_bbf code ,_afc int ,_edd int ){_acab :=_fdb (_bbf .Code ,_afc );_afc ++;if _acab ==1{if _fead .Right ==nil {_fead .Right =&decodingTreeNode {Val :_acab };};if _afc ==_bbf .BitsWritten {_fead .Right .RunLen =&_edd ;
_fead .Right .Code =&_bbf ;}else {_fga (_fead .Right ,_bbf ,_afc ,_edd );};}else {if _fead .Left ==nil {_fead .Left =&decodingTreeNode {Val :_acab };};if _afc ==_bbf .BitsWritten {_fead .Left .RunLen =&_edd ;_fead .Left .Code =&_bbf ;}else {_fga (_fead .Left ,_bbf ,_afc ,_edd );
};};};func _bcb (_baa ,_cgfd []byte ,_efec ,_eba ,_ggg int )([]byte ,int ,int ){_cgec :=_fdeg (_baa ,_ggg );_cedaa :=_eba >=0&&_baa [_eba ]==_dab ||_eba ==-1;_cgfd ,_efec =_fcc (_cgfd ,_efec ,_f );var _dge int ;if _eba > -1{_dge =_ggg -_eba ;}else {_dge =_ggg -_eba -1;
};_cgfd ,_efec =_dgf (_cgfd ,_efec ,_dge ,_cedaa );_cedaa =!_cedaa ;_fcffd :=_cgec -_ggg ;_cgfd ,_efec =_dgf (_cgfd ,_efec ,_fcffd ,_cedaa );_eba =_cgec ;return _cgfd ,_efec ,_eba ;};func _efe (_cbe int )([]byte ,int ){var _aea []byte ;for _gfea :=0;_gfea < 2;
_gfea ++{_aea ,_cbe =_fcc (_aea ,_cbe ,_ag );};return _aea ,_cbe %8;};func _bc (_bcc uint16 ,_dedea int ,_edc bool )(int ,code ){var _afgd *int ;var _beg *code ;if _edc {_afgd ,_beg =_caca (_ff ,_bcc ,_dedea );}else {_afgd ,_beg =_caca (_ffb ,_bcc ,_dedea );
};if _afgd ==nil {return -1,code {};};return *_afgd ,*_beg ;};func _gfg (_dcce [][]byte ,_beb []byte ,_gcc bool ,_dad int )([]byte ,int ){_df :=_bce (_beb ,_dcce [len (_dcce )-1],_dad ,_gcc );_aa :=_fdeg (_dcce [len (_dcce )-1],_df );if _dad ==-1{_beb =_aff (_beb ,_gcc ,_aa -_dad -1);
}else {_beb =_aff (_beb ,_gcc ,_aa -_dad );};_dad =_aa ;return _beb ,_dad ;};func _ebf (_gfeg uint16 ,_ddf int )(code ,bool ){_ ,_fcg :=_caca (_bfc ,_gfeg ,_ddf );if _fcg ==nil {return code {},false ;};return *_fcg ,true ;};func _fdeg (_gac []byte ,_gcff int )int {if _gcff >=len (_gac ){return _gcff ;
};if _gcff < -1{_gcff =-1;};var _gad byte ;if _gcff > -1{_gad =_gac [_gcff ];}else {_gad =_dab ;};_gcg :=_gcff +1;for _gcg < len (_gac ){if _gac [_gcg ]!=_gad {break ;};_gcg ++;};return _gcg ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;
Left *decodingTreeNode ;Right *decodingTreeNode ;};func _gded (_gag int )([]byte ,int ){var _gcbc []byte ;for _befa :=0;_befa < 6;_befa ++{_gcbc ,_gag =_fcc (_gcbc ,_gag ,_ag );};return _gcbc ,_gag %8;};func _fbdc (_ceg []byte ,_bbb int )([]byte ,int ){return _fcc (_ceg ,_bbb ,_ed )};
func _fcff (_afg []byte ,_fdab int )(code ,int ,bool ){var (_faab uint16 ;_bfe int ;_dce int ;);_dce =_fdab ;_faab ,_bfe ,_ =_cafa (_afg ,_fdab );_ge ,_deb :=_ebf (_faab ,_bfe );if !_deb {return code {},_dce ,false ;};return _ge ,_dce +_ge .BitsWritten ,true ;
};func _cafa (_aaa []byte ,_feeg int )(uint16 ,int ,int ){_ddfb :=_feeg ;_cdf :=_feeg /8;_feeg %=8;if _cdf >=len (_aaa ){return 0,16,_ddfb ;};_abe :=byte (0xFF>>uint (_feeg ));_ccd :=uint16 ((_aaa [_cdf ]&_abe )<<uint (_feeg ))<<8;_ef :=8-_feeg ;_cdf ++;
_feeg =0;if _cdf >=len (_aaa ){return _ccd >>(16-uint (_ef )),16-_ef ,_ddfb +_ef ;};_ccd |=uint16 (_aaa [_cdf ])<<(8-uint (_ef ));_ef +=8;_cdf ++;_feeg =0;if _cdf >=len (_aaa ){return _ccd >>(16-uint (_ef )),16-_ef ,_ddfb +_ef ;};if _ef ==16{return _ccd ,0,_ddfb +_ef ;
};_fdf :=16-_ef ;_ccd |=uint16 (_aaa [_cdf ]>>(8-uint (_fdf )));return _ccd ,0,_ddfb +16;};func _eea (_aga []byte ,_ebg int )(bool ,int ){return _bfg (_aga ,_ebg ,_af )};func (_gbc *Encoder )decodeRow1D (_cgf []byte ,_bfea int )([]byte ,int ){var _gbbg []byte ;
_gcfd :=true ;var _cdd int ;_cdd ,_bfea =_cfa (_cgf ,_bfea ,_gcfd );for _cdd !=-1{_gbbg =_aff (_gbbg ,_gcfd ,_cdd );if _cdd < 64{if len (_gbbg )>=_gbc .Columns {break ;};_gcfd =!_gcfd ;};_cdd ,_bfea =_cfa (_cgf ,_bfea ,_gcfd );};return _gbbg ,_bfea ;};
func _dgg (_ffac ,_fbg []byte ,_fcf int ,_edg bool ,_caf int )([]byte ,int ,int ,error ){_ee :=_fcf ;var _ec error ;_fbg ,_fcf ,_ec =_cb (_ffac ,_fbg ,_fcf ,_edg );if _ec !=nil {return _fbg ,_ee ,_caf ,_ec ;};_edg =!_edg ;_fbg ,_fcf ,_ec =_cb (_ffac ,_fbg ,_fcf ,_edg );
if _ec !=nil {return _fbg ,_ee ,_caf ,_ec ;};_caf =len (_fbg );return _fbg ,_fcf ,_caf ,nil ;};func _bba (_gbg []byte ,_gg bool ,_bae int )(int ,int ){_gcbg :=0;for _bae < len (_gbg ){if _gg {if _gbg [_bae ]!=_dab {break ;};}else {if _gbg [_bae ]!=_aab {break ;
};};_gcbg ++;_bae ++;};return _gcbg ,_bae ;};func (_fda *Encoder )decodeG32D (_ad []byte )([][]byte ,error ){var (_fe [][]byte ;_daa int ;_fde error ;);_dea :for (_daa /8)< len (_ad ){var _dgd bool ;_dgd ,_daa ,_fde =_gfe (_ad ,_daa );if _fde !=nil {return nil ,_fde ;
};if _dgd {break ;};_dgd ,_daa =_cab (_ad ,_daa );if !_dgd {if _fda .EndOfLine {return nil ,_ac ;};};var _ffa []byte ;_ffa ,_daa =_fda .decodeRow1D (_ad ,_daa );if _fda .EncodedByteAlign &&_daa %8!=0{_daa +=8-_daa %8;};if _ffa !=nil {_fe =append (_fe ,_ffa );
};if _fda .Rows > 0&&!_fda .EndOfBlock &&len (_fe )>=_fda .Rows {break ;};for _feb :=1;_feb < _fda .K &&(_daa /8)< len (_ad );_feb ++{_dgd ,_daa =_eea (_ad ,_daa );if !_dgd {_dgd ,_daa ,_fde =_gfe (_ad ,_daa );if _fde !=nil {return nil ,_fde ;};if _dgd {break _dea ;
}else {if _fda .EndOfLine {return nil ,_ac ;};};};var (_fc code ;_faf bool ;);_cdb :=true ;var _fbb []byte ;_ead :=-1;for _fc ,_daa ,_faf =_fcff (_ad ,_daa );_faf ;_fc ,_daa ,_faf =_fcff (_ad ,_daa ){switch _fc {case _ed :_fbb ,_ead =_gfg (_fe ,_fbb ,_cdb ,_ead );
case _f :_fbb ,_daa ,_ead ,_fde =_dgg (_ad ,_fbb ,_daa ,_cdb ,_ead );if _fde !=nil {return nil ,_fde ;};case _gd :_fbb ,_ead =_eda (_fe ,_fbb ,_cdb ,_ead ,0);_cdb =!_cdb ;case _dd :_fbb ,_ead =_eda (_fe ,_fbb ,_cdb ,_ead ,1);_cdb =!_cdb ;case _fb :_fbb ,_ead =_eda (_fe ,_fbb ,_cdb ,_ead ,2);
_cdb =!_cdb ;case _gc :_fbb ,_ead =_eda (_fe ,_fbb ,_cdb ,_ead ,3);_cdb =!_cdb ;case _gdc :_fbb ,_ead =_eda (_fe ,_fbb ,_cdb ,_ead ,-1);_cdb =!_cdb ;case _da :_fbb ,_ead =_eda (_fe ,_fbb ,_cdb ,_ead ,-2);_cdb =!_cdb ;case _gbd :_fbb ,_ead =_eda (_fe ,_fbb ,_cdb ,_ead ,-3);
_cdb =!_cdb ;};if len (_fbb )>=_fda .Columns {break ;};};if _fda .EncodedByteAlign &&_daa %8!=0{_daa +=8-_daa %8;};if _fbb !=nil {_fe =append (_fe ,_fbb );};if _fda .Rows > 0&&!_fda .EndOfBlock &&len (_fe )>=_fda .Rows {break _dea ;};};};return _fe ,nil ;
};func _bce (_dfcd ,_ceda []byte ,_deded int ,_cbf bool )int {_cefb :=_fdeg (_ceda ,_deded );if _cefb < len (_ceda )&&(_deded ==-1&&_ceda [_cefb ]==_dab ||_deded >=0&&_deded < len (_dfcd )&&_dfcd [_deded ]==_ceda [_cefb ]||_deded >=len (_dfcd )&&_cbf &&_ceda [_cefb ]==_dab ||_deded >=len (_dfcd )&&!_cbf &&_ceda [_cefb ]==_aab ){_cefb =_fdeg (_ceda ,_cefb );
};return _cefb ;};func _fef (_abed [][]byte )[][]byte {_cfd :=make ([]byte ,len (_abed [0]));for _cbb :=range _cfd {_cfd [_cbb ]=_dab ;};_abed =append (_abed ,[]byte {});for _dga :=len (_abed )-1;_dga > 0;_dga --{_abed [_dga ]=_abed [_dga -1];};_abed [0]=_cfd ;
return _abed ;};func _cac (_ce []byte ,_cfg int )(bool ,int ){_febb :=_cfg ;var (_bgcf uint16 ;_ccf int ;);_bgcf ,_ccf ,_cfg =_cafa (_ce ,_cfg );if _ccf > 4{return false ,_febb ;};_bgcf >>=uint (4-_ccf );_bgcf <<=4;if _bgcf !=_ag .Code {return false ,_febb ;
};return true ,_cfg -4+_ccf ;};func (_fdaa *Encoder )encodeG31D (_gea [][]byte )[]byte {var _cca []byte ;_dca :=0;for _cdfa :=range _gea {if _fdaa .Rows > 0&&!_fdaa .EndOfBlock &&_cdfa ==_fdaa .Rows {break ;};_bec ,_aad :=_ccac (_gea [_cdfa ],_dca ,_ag );
_cca =_fdaa .appendEncodedRow (_cca ,_bec ,_dca );if _fdaa .EncodedByteAlign {_aad =0;};_dca =_aad ;};if _fdaa .EndOfBlock {_fab ,_ :=_gded (_dca );_cca =_fdaa .appendEncodedRow (_cca ,_fab ,_dca );};return _cca ;};func _fad (_fdc ,_cbfg int )code {var _dag code ;
switch _cbfg -_fdc {case -1:_dag =_dd ;case -2:_dag =_fb ;case -3:_dag =_gc ;case 0:_dag =_gd ;case 1:_dag =_gdc ;case 2:_dag =_da ;case 3:_dag =_gbd ;};return _dag ;};var (_gde =_d .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");
_c =_d .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_bf =_d .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");
_ac =_d .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_fa =_d .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ab =_d .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _fcc (_ecab []byte ,_daag int ,_bfb code )([]byte ,int ){_ced :=0;for _ced < _bfb .BitsWritten {_ggb :=_daag /8;
_cgb :=_daag %8;if _ggb >=len (_ecab ){_ecab =append (_ecab ,0);};_agdf :=8-_cgb ;_cbgg :=_bfb .BitsWritten -_ced ;if _agdf > _cbgg {_agdf =_cbgg ;};if _ced < 8{_ecab [_ggb ]=_ecab [_ggb ]|byte (_bfb .Code >>uint (8+_cgb -_ced ))&_a [8-_agdf -_cgb ];}else {_ecab [_ggb ]=_ecab [_ggb ]|(byte (_bfb .Code <<uint (_ced -8))&_a [8-_agdf ])>>uint (_cgb );
};_daag +=_agdf ;_ced +=_agdf ;};return _ecab ,_daag ;};func _cb (_dbg ,_dbf []byte ,_egd int ,_cf bool )([]byte ,int ,error ){_cdc :=_egd ;var _bgfcg int ;for _bgfcg ,_egd =_cfa (_dbg ,_egd ,_cf );_bgfcg !=-1;_bgfcg ,_egd =_cfa (_dbg ,_egd ,_cf ){_dbf =_aff (_dbf ,_cf ,_bgfcg );
if _bgfcg < 64{break ;};};if _bgfcg ==-1{return _dbf ,_cdc ,_bf ;};return _dbf ,_egd ,nil ;};func (_dcg *Encoder )encodeG4 (_dec [][]byte )[]byte {_fdef :=make ([][]byte ,len (_dec ));copy (_fdef ,_dec );_fdef =_fef (_fdef );var _dabg []byte ;var _fedb int ;
for _abg :=1;_abg < len (_fdef );_abg ++{if _dcg .Rows > 0&&!_dcg .EndOfBlock &&_abg ==(_dcg .Rows +1){break ;};var _fff []byte ;var _egc ,_eca ,_egcg int ;_gbff :=_fedb ;_daab :=-1;for _daab < len (_fdef [_abg ]){_egc =_fdeg (_fdef [_abg ],_daab );_eca =_dacf (_fdef [_abg ],_fdef [_abg -1],_daab );
_egcg =_fdeg (_fdef [_abg -1],_eca );if _egcg < _egc {_fff ,_gbff =_fcc (_fff ,_gbff ,_ed );_daab =_egcg ;}else {if _db .Abs (float64 (_eca -_egc ))> 3{_fff ,_gbff ,_daab =_bcb (_fdef [_abg ],_fff ,_gbff ,_daab ,_egc );}else {_fff ,_gbff =_dacb (_fff ,_gbff ,_egc ,_eca );
_daab =_egc ;};};};_dabg =_dcg .appendEncodedRow (_dabg ,_fff ,_fedb );if _dcg .EncodedByteAlign {_gbff =0;};_fedb =_gbff %8;};if _dcg .EndOfBlock {_fbf ,_ :=_efe (_fedb );_dabg =_dcg .appendEncodedRow (_dabg ,_fbf ,_fedb );};return _dabg ;};func _fdb (_abc uint16 ,_ebb int )byte {if _ebb < 8{_abc >>=8;
};_ebb %=8;_cge :=byte (0x01<<(7-uint (_ebb )));return (byte (_abc )&_cge )>>(7-uint (_ebb ));};func (_abef *Encoder )Encode (pixels [][]byte )[]byte {if _abef .BlackIs1 {_dab =0;_aab =1;}else {_dab =1;_aab =0;};if _abef .K ==0{return _abef .encodeG31D (pixels );
};if _abef .K > 0{return _abef .encodeG32D (pixels );};if _abef .K < 0{return _abef .encodeG4 (pixels );};return nil ;};func _dacf (_adg ,_eeac []byte ,_bgfce int )int {_egdd :=_fdeg (_eeac ,_bgfce );if _egdd < len (_eeac )&&(_bgfce ==-1&&_eeac [_egdd ]==_dab ||_bgfce >=0&&_bgfce < len (_adg )&&_adg [_bgfce ]==_eeac [_egdd ]||_bgfce >=len (_adg )&&_adg [_bgfce -1]!=_eeac [_egdd ]){_egdd =_fdeg (_eeac ,_egdd );
};return _egdd ;};func _cgd (_ae []byte ,_eada int )(bool ,int ,error ){_bga :=_eada ;var _fdd bool ;_fdd ,_eada =_cac (_ae ,_eada );if _fdd {_fdd ,_eada =_cac (_ae ,_eada );if _fdd {return true ,_eada ,nil ;};return false ,_bga ,_gde ;};return false ,_bga ,nil ;
};func _dgf (_dgc []byte ,_bfcde int ,_cef int ,_gca bool )([]byte ,int ){var (_fac code ;_cbg bool ;);for !_cbg {_fac ,_cef ,_cbg =_bgg (_cef ,_gca );_dgc ,_bfcde =_fcc (_dgc ,_bfcde ,_fac );};return _dgc ,_bfcde ;};func _cab (_dfc []byte ,_dgge int )(bool ,int ){return _bfg (_dfc ,_dgge ,_gb )};
func _bgg (_abgb int ,_abga bool )(code ,int ,bool ){if _abgb < 64{if _abga {return _bg [_abgb ],0,true ;};return _e [_abgb ],0,true ;};_cbc :=_abgb /64;if _cbc > 40{return _ea [2560],_abgb -2560,false ;};if _cbc > 27{return _ea [_cbc *64],_abgb -_cbc *64,false ;
};if _abga {return _bgf [_cbc *64],_abgb -_cbc *64,false ;};return _g [_cbc *64],_abgb -_cbc *64,false ;};func _cfa (_fed []byte ,_dbb int ,_gcf bool )(int ,int ){var (_ga uint16 ;_gfd int ;_fbe int ;);_fbe =_dbb ;_ga ,_gfd ,_ =_cafa (_fed ,_dbb );_cba ,_gda :=_bc (_ga ,_gfd ,_gcf );
if _cba ==-1{return -1,_fbe ;};return _cba ,_fbe +_gda .BitsWritten ;};func _ecf (_cbd int )([]byte ,int ){var _fbfg []byte ;for _bega :=0;_bega < 6;_bega ++{_fbfg ,_cbd =_fcc (_fbfg ,_cbd ,_gb );};return _fbfg ,_cbd %8;};func _gfe (_cg []byte ,_ddb int )(bool ,int ,error ){_bac :=_ddb ;
var _fdad =false ;for _eaba :=0;_eaba < 6;_eaba ++{_fdad ,_ddb =_cab (_cg ,_ddb );if !_fdad {if _eaba > 1{return false ,_bac ,_c ;};_ddb =_bac ;break ;};};return _fdad ,_ddb ,nil ;};var (_dab byte =1;_aab byte =0;);var (_e map[int ]code ;_bg map[int ]code ;
_g map[int ]code ;_bgf map[int ]code ;_ea map[int ]code ;_a map[int ]byte ;_ag =code {Code :1<<4,BitsWritten :12};_gb =code {Code :3<<3,BitsWritten :13};_af =code {Code :2<<3,BitsWritten :13};_ed =code {Code :1<<12,BitsWritten :4};_f =code {Code :1<<13,BitsWritten :3};
_gd =code {Code :1<<15,BitsWritten :1};_dd =code {Code :3<<13,BitsWritten :3};_fb =code {Code :3<<10,BitsWritten :6};_gc =code {Code :3<<9,BitsWritten :7};_gdc =code {Code :2<<13,BitsWritten :3};_da =code {Code :2<<10,BitsWritten :6};_gbd =code {Code :2<<9,BitsWritten :7};
);type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _aff (_dceg []byte ,_dac bool ,_ecc int )[]byte {if _ecc < 0{return _dceg ;};_bd :=make ([]byte ,_ecc );
if _dac {for _cbab :=0;_cbab < len (_bd );_cbab ++{_bd [_cbab ]=_dab ;};}else {for _efb :=0;_efb < len (_bd );_efb ++{_bd [_efb ]=_aab ;};};_dceg =append (_dceg ,_bd ...);return _dceg ;};func _ccac (_fbd []byte ,_cdda int ,_gec code )([]byte ,int ){_cacb :=true ;
var _gfed []byte ;_gfed ,_cdda =_fcc (nil ,_cdda ,_gec );_bde :=0;var _bbgd int ;for _bde < len (_fbd ){_bbgd ,_bde =_bba (_fbd ,_cacb ,_bde );_gfed ,_cdda =_dgf (_gfed ,_cdda ,_bbgd ,_cacb );_cacb =!_cacb ;};return _gfed ,_cdda %8;};func (_feg *Encoder )decodeG4 (_dde []byte )([][]byte ,error ){_ace :=make ([]byte ,_feg .Columns );
for _eb :=range _ace {_ace [_eb ]=_dab ;};_gba :=make ([][]byte ,1);_gba [0]=_ace ;var (_aca bool ;_bgc error ;_gdg int ;);for (_gdg /8)< len (_dde ){_aca ,_gdg ,_bgc =_cgd (_dde ,_gdg );if _bgc !=nil {return nil ,_bgc ;};if _aca {break ;};var (_ca code ;
_cdg bool ;);_bfca :=true ;var _fee []byte ;_bbg :=-1;for _bbg < _feg .Columns {_ca ,_gdg ,_cdg =_fcff (_dde ,_gdg );if !_cdg {return nil ,_ab ;};switch _ca {case _ed :_fee ,_bbg =_gfg (_gba ,_fee ,_bfca ,_bbg );case _f :_fee ,_gdg ,_bbg ,_bgc =_dgg (_dde ,_fee ,_gdg ,_bfca ,_bbg );
if _bgc !=nil {return nil ,_bgc ;};case _gd :_fee ,_bbg =_eda (_gba ,_fee ,_bfca ,_bbg ,0);_bfca =!_bfca ;case _dd :_fee ,_bbg =_eda (_gba ,_fee ,_bfca ,_bbg ,1);_bfca =!_bfca ;case _fb :_fee ,_bbg =_eda (_gba ,_fee ,_bfca ,_bbg ,2);_bfca =!_bfca ;case _gc :_fee ,_bbg =_eda (_gba ,_fee ,_bfca ,_bbg ,3);
_bfca =!_bfca ;case _gdc :_fee ,_bbg =_eda (_gba ,_fee ,_bfca ,_bbg ,-1);_bfca =!_bfca ;case _da :_fee ,_bbg =_eda (_gba ,_fee ,_bfca ,_bbg ,-2);_bfca =!_bfca ;case _gbd :_fee ,_bbg =_eda (_gba ,_fee ,_bfca ,_bbg ,-3);_bfca =!_bfca ;};if len (_fee )>=_feg .Columns {break ;
};};if _feg .EncodedByteAlign &&_gdg %8!=0{_gdg +=8-_gdg %8;};_gba =append (_gba ,_fee );if _feg .Rows > 0&&!_feg .EndOfBlock &&len (_gba )>=(_feg .Rows +1){break ;};};_gba =_gba [1:];return _gba ,nil ;};func _caca (_edb *decodingTreeNode ,_agg uint16 ,_gef int )(*int ,*code ){if _edb ==nil {return nil ,nil ;
};if _gef ==16{return _edb .RunLen ,_edb .Code ;};_fcdb :=_fdb (_agg ,_gef );_gef ++;var _ecg *int ;var _ceb *code ;if _fcdb ==1{_ecg ,_ceb =_caca (_edb .Right ,_agg ,_gef );}else {_ecg ,_ceb =_caca (_edb .Left ,_agg ,_gef );};if _ecg ==nil {_ecg =_edb .RunLen ;
_ceb =_edb .Code ;};return _ecg ,_ceb ;};