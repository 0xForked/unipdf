//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_c "errors";_ce "github.com/unidoc/unipdf/v3/common";_b "math";);func _fcd (_egb ,_bcf []byte ,_gce int ,_gaf bool )([]byte ,int ,error ){_addb :=_gce ;var _egg int ;for _egg ,_gce =_fbb (_egb ,_gce ,_gaf );_egg !=-1;_egg ,_gce =_fbb (_egb ,_gce ,_gaf ){_bcf =_babe (_bcf ,_gaf ,_egg );
if _egg < 64{break ;};};if _egg ==-1{return _bcf ,_addb ,_f ;};return _bcf ,_gce ,nil ;};func _eg (_afc ,_bbc []byte ,_efb int ,_fae bool ,_fgb int )([]byte ,int ,int ,error ){_ead :=_efb ;var _fbfc error ;_bbc ,_efb ,_fbfc =_fcd (_afc ,_bbc ,_efb ,_fae );
if _fbfc !=nil {return _bbc ,_ead ,_fgb ,_fbfc ;};_fae =!_fae ;_bbc ,_efb ,_fbfc =_fcd (_afc ,_bbc ,_efb ,_fae );if _fbfc !=nil {return _bbc ,_ead ,_fgb ,_fbfc ;};_fgb =len (_bbc );return _bbc ,_efb ,_fgb ,nil ;};func init (){_cg =make (map[int ]code );
_cg [0]=code {Code :13<<8|3<<6,BitsWritten :10};_cg [1]=code {Code :2<<(5+8),BitsWritten :3};_cg [2]=code {Code :3<<(6+8),BitsWritten :2};_cg [3]=code {Code :2<<(6+8),BitsWritten :2};_cg [4]=code {Code :3<<(5+8),BitsWritten :3};_cg [5]=code {Code :3<<(4+8),BitsWritten :4};
_cg [6]=code {Code :2<<(4+8),BitsWritten :4};_cg [7]=code {Code :3<<(3+8),BitsWritten :5};_cg [8]=code {Code :5<<(2+8),BitsWritten :6};_cg [9]=code {Code :4<<(2+8),BitsWritten :6};_cg [10]=code {Code :4<<(1+8),BitsWritten :7};_cg [11]=code {Code :5<<(1+8),BitsWritten :7};
_cg [12]=code {Code :7<<(1+8),BitsWritten :7};_cg [13]=code {Code :4<<8,BitsWritten :8};_cg [14]=code {Code :7<<8,BitsWritten :8};_cg [15]=code {Code :12<<8,BitsWritten :9};_cg [16]=code {Code :5<<8|3<<6,BitsWritten :10};_cg [17]=code {Code :6<<8,BitsWritten :10};
_cg [18]=code {Code :2<<8,BitsWritten :10};_cg [19]=code {Code :12<<8|7<<5,BitsWritten :11};_cg [20]=code {Code :13<<8,BitsWritten :11};_cg [21]=code {Code :13<<8|4<<5,BitsWritten :11};_cg [22]=code {Code :6<<8|7<<5,BitsWritten :11};_cg [23]=code {Code :5<<8,BitsWritten :11};
_cg [24]=code {Code :2<<8|7<<5,BitsWritten :11};_cg [25]=code {Code :3<<8,BitsWritten :11};_cg [26]=code {Code :12<<8|10<<4,BitsWritten :12};_cg [27]=code {Code :12<<8|11<<4,BitsWritten :12};_cg [28]=code {Code :12<<8|12<<4,BitsWritten :12};_cg [29]=code {Code :12<<8|13<<4,BitsWritten :12};
_cg [30]=code {Code :6<<8|8<<4,BitsWritten :12};_cg [31]=code {Code :6<<8|9<<4,BitsWritten :12};_cg [32]=code {Code :6<<8|10<<4,BitsWritten :12};_cg [33]=code {Code :6<<8|11<<4,BitsWritten :12};_cg [34]=code {Code :13<<8|2<<4,BitsWritten :12};_cg [35]=code {Code :13<<8|3<<4,BitsWritten :12};
_cg [36]=code {Code :13<<8|4<<4,BitsWritten :12};_cg [37]=code {Code :13<<8|5<<4,BitsWritten :12};_cg [38]=code {Code :13<<8|6<<4,BitsWritten :12};_cg [39]=code {Code :13<<8|7<<4,BitsWritten :12};_cg [40]=code {Code :6<<8|12<<4,BitsWritten :12};_cg [41]=code {Code :6<<8|13<<4,BitsWritten :12};
_cg [42]=code {Code :13<<8|10<<4,BitsWritten :12};_cg [43]=code {Code :13<<8|11<<4,BitsWritten :12};_cg [44]=code {Code :5<<8|4<<4,BitsWritten :12};_cg [45]=code {Code :5<<8|5<<4,BitsWritten :12};_cg [46]=code {Code :5<<8|6<<4,BitsWritten :12};_cg [47]=code {Code :5<<8|7<<4,BitsWritten :12};
_cg [48]=code {Code :6<<8|4<<4,BitsWritten :12};_cg [49]=code {Code :6<<8|5<<4,BitsWritten :12};_cg [50]=code {Code :5<<8|2<<4,BitsWritten :12};_cg [51]=code {Code :5<<8|3<<4,BitsWritten :12};_cg [52]=code {Code :2<<8|4<<4,BitsWritten :12};_cg [53]=code {Code :3<<8|7<<4,BitsWritten :12};
_cg [54]=code {Code :3<<8|8<<4,BitsWritten :12};_cg [55]=code {Code :2<<8|7<<4,BitsWritten :12};_cg [56]=code {Code :2<<8|8<<4,BitsWritten :12};_cg [57]=code {Code :5<<8|8<<4,BitsWritten :12};_cg [58]=code {Code :5<<8|9<<4,BitsWritten :12};_cg [59]=code {Code :2<<8|11<<4,BitsWritten :12};
_cg [60]=code {Code :2<<8|12<<4,BitsWritten :12};_cg [61]=code {Code :5<<8|10<<4,BitsWritten :12};_cg [62]=code {Code :6<<8|6<<4,BitsWritten :12};_cg [63]=code {Code :6<<8|7<<4,BitsWritten :12};_d =make (map[int ]code );_d [0]=code {Code :53<<8,BitsWritten :8};
_d [1]=code {Code :7<<(2+8),BitsWritten :6};_d [2]=code {Code :7<<(4+8),BitsWritten :4};_d [3]=code {Code :8<<(4+8),BitsWritten :4};_d [4]=code {Code :11<<(4+8),BitsWritten :4};_d [5]=code {Code :12<<(4+8),BitsWritten :4};_d [6]=code {Code :14<<(4+8),BitsWritten :4};
_d [7]=code {Code :15<<(4+8),BitsWritten :4};_d [8]=code {Code :19<<(3+8),BitsWritten :5};_d [9]=code {Code :20<<(3+8),BitsWritten :5};_d [10]=code {Code :7<<(3+8),BitsWritten :5};_d [11]=code {Code :8<<(3+8),BitsWritten :5};_d [12]=code {Code :8<<(2+8),BitsWritten :6};
_d [13]=code {Code :3<<(2+8),BitsWritten :6};_d [14]=code {Code :52<<(2+8),BitsWritten :6};_d [15]=code {Code :53<<(2+8),BitsWritten :6};_d [16]=code {Code :42<<(2+8),BitsWritten :6};_d [17]=code {Code :43<<(2+8),BitsWritten :6};_d [18]=code {Code :39<<(1+8),BitsWritten :7};
_d [19]=code {Code :12<<(1+8),BitsWritten :7};_d [20]=code {Code :8<<(1+8),BitsWritten :7};_d [21]=code {Code :23<<(1+8),BitsWritten :7};_d [22]=code {Code :3<<(1+8),BitsWritten :7};_d [23]=code {Code :4<<(1+8),BitsWritten :7};_d [24]=code {Code :40<<(1+8),BitsWritten :7};
_d [25]=code {Code :43<<(1+8),BitsWritten :7};_d [26]=code {Code :19<<(1+8),BitsWritten :7};_d [27]=code {Code :36<<(1+8),BitsWritten :7};_d [28]=code {Code :24<<(1+8),BitsWritten :7};_d [29]=code {Code :2<<8,BitsWritten :8};_d [30]=code {Code :3<<8,BitsWritten :8};
_d [31]=code {Code :26<<8,BitsWritten :8};_d [32]=code {Code :27<<8,BitsWritten :8};_d [33]=code {Code :18<<8,BitsWritten :8};_d [34]=code {Code :19<<8,BitsWritten :8};_d [35]=code {Code :20<<8,BitsWritten :8};_d [36]=code {Code :21<<8,BitsWritten :8};
_d [37]=code {Code :22<<8,BitsWritten :8};_d [38]=code {Code :23<<8,BitsWritten :8};_d [39]=code {Code :40<<8,BitsWritten :8};_d [40]=code {Code :41<<8,BitsWritten :8};_d [41]=code {Code :42<<8,BitsWritten :8};_d [42]=code {Code :43<<8,BitsWritten :8};
_d [43]=code {Code :44<<8,BitsWritten :8};_d [44]=code {Code :45<<8,BitsWritten :8};_d [45]=code {Code :4<<8,BitsWritten :8};_d [46]=code {Code :5<<8,BitsWritten :8};_d [47]=code {Code :10<<8,BitsWritten :8};_d [48]=code {Code :11<<8,BitsWritten :8};_d [49]=code {Code :82<<8,BitsWritten :8};
_d [50]=code {Code :83<<8,BitsWritten :8};_d [51]=code {Code :84<<8,BitsWritten :8};_d [52]=code {Code :85<<8,BitsWritten :8};_d [53]=code {Code :36<<8,BitsWritten :8};_d [54]=code {Code :37<<8,BitsWritten :8};_d [55]=code {Code :88<<8,BitsWritten :8};
_d [56]=code {Code :89<<8,BitsWritten :8};_d [57]=code {Code :90<<8,BitsWritten :8};_d [58]=code {Code :91<<8,BitsWritten :8};_d [59]=code {Code :74<<8,BitsWritten :8};_d [60]=code {Code :75<<8,BitsWritten :8};_d [61]=code {Code :50<<8,BitsWritten :8};
_d [62]=code {Code :51<<8,BitsWritten :8};_d [63]=code {Code :52<<8,BitsWritten :8};_g =make (map[int ]code );_g [64]=code {Code :3<<8|3<<6,BitsWritten :10};_g [128]=code {Code :12<<8|8<<4,BitsWritten :12};_g [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_g [256]=code {Code :5<<8|11<<4,BitsWritten :12};_g [320]=code {Code :3<<8|3<<4,BitsWritten :12};_g [384]=code {Code :3<<8|4<<4,BitsWritten :12};_g [448]=code {Code :3<<8|5<<4,BitsWritten :12};_g [512]=code {Code :3<<8|12<<3,BitsWritten :13};_g [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_g [640]=code {Code :2<<8|10<<3,BitsWritten :13};_g [704]=code {Code :2<<8|11<<3,BitsWritten :13};_g [768]=code {Code :2<<8|12<<3,BitsWritten :13};_g [832]=code {Code :2<<8|13<<3,BitsWritten :13};_g [896]=code {Code :3<<8|18<<3,BitsWritten :13};_g [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_g [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_g [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_g [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_g [1216]=code {Code :119<<3,BitsWritten :13};_g [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_g [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_g [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_g [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_g [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_g [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_g [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_g [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_ac =make (map[int ]code );_ac [64]=code {Code :27<<(3+8),BitsWritten :5};_ac [128]=code {Code :18<<(3+8),BitsWritten :5};_ac [192]=code {Code :23<<(2+8),BitsWritten :6};_ac [256]=code {Code :55<<(1+8),BitsWritten :7};_ac [320]=code {Code :54<<8,BitsWritten :8};
_ac [384]=code {Code :55<<8,BitsWritten :8};_ac [448]=code {Code :100<<8,BitsWritten :8};_ac [512]=code {Code :101<<8,BitsWritten :8};_ac [576]=code {Code :104<<8,BitsWritten :8};_ac [640]=code {Code :103<<8,BitsWritten :8};_ac [704]=code {Code :102<<8,BitsWritten :9};
_ac [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ac [832]=code {Code :105<<8,BitsWritten :9};_ac [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ac [960]=code {Code :106<<8,BitsWritten :9};_ac [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ac [1088]=code {Code :107<<8,BitsWritten :9};
_ac [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ac [1216]=code {Code :108<<8,BitsWritten :9};_ac [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ac [1344]=code {Code :109<<8,BitsWritten :9};_ac [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ac [1472]=code {Code :76<<8,BitsWritten :9};
_ac [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ac [1600]=code {Code :77<<8,BitsWritten :9};_ac [1664]=code {Code :24<<(2+8),BitsWritten :6};_ac [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ad =make (map[int ]code );_ad [1792]=code {Code :1<<8,BitsWritten :11};
_ad [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ad [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ad [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ad [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ad [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_ad [2176]=code {Code :1<<8|5<<4,BitsWritten :12};
_ad [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ad [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ad [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ad [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_ad [2496]=code {Code :1<<8|14<<4,BitsWritten :12};
_ad [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_db =make (map[int ]byte );_db [0]=0xFF;_db [1]=0xFE;_db [2]=0xFC;_db [3]=0xF8;_db [4]=0xF0;_db [5]=0xE0;_db [6]=0xC0;_db [7]=0x80;_db [8]=0x00;};var (_aad =&decodingTreeNode {Val :255};_ceg =&decodingTreeNode {Val :255};
_ga =&decodingTreeNode {Val :255};);func (_ega *Encoder )encodeG4 (_aggg [][]byte )[]byte {_gaff :=make ([][]byte ,len (_aggg ));copy (_gaff ,_aggg );_gaff =_aabf (_gaff );var _gdd []byte ;var _abae int ;for _ebc :=1;_ebc < len (_gaff );_ebc ++{if _ega .Rows > 0&&!_ega .EndOfBlock &&_ebc ==(_ega .Rows +1){break ;
};var _fff []byte ;var _ebg ,_afa ,_cacf int ;_gffd :=_abae ;_faf :=-1;for _faf < len (_gaff [_ebc ]){_ebg =_bcd (_gaff [_ebc ],_faf );_afa =_aacf (_gaff [_ebc ],_gaff [_ebc -1],_faf );_cacf =_bcd (_gaff [_ebc -1],_afa );if _cacf < _ebg {_fff ,_gffd =_gfg (_fff ,_gffd ,_aa );
_faf =_cacf ;}else {if _b .Abs (float64 (_afa -_ebg ))> 3{_fff ,_gffd ,_faf =_fgc (_gaff [_ebc ],_fff ,_gffd ,_faf ,_ebg );}else {_fff ,_gffd =_aafd (_fff ,_gffd ,_ebg ,_afa );_faf =_ebg ;};};};_gdd =_ega .appendEncodedRow (_gdd ,_fff ,_abae );if _ega .EncodedByteAlign {_gffd =0;
};_abae =_gffd %8;};if _ega .EndOfBlock {_cdf ,_ :=_fcfd (_abae );_gdd =_ega .appendEncodedRow (_gdd ,_cdf ,_abae );};return _gdd ;};func init (){for _fe ,_fg :=range _d {_bag (_aad ,_fg ,0,_fe );};for _dab ,_ace :=range _ac {_bag (_aad ,_ace ,0,_dab );
};for _ag ,_fga :=range _cg {_bag (_ceg ,_fga ,0,_ag );};for _fb ,_add :=range _g {_bag (_ceg ,_add ,0,_fb );};for _cee ,_cea :=range _ad {_bag (_aad ,_cea ,0,_cee );_bag (_ceg ,_cea ,0,_cee );};_bag (_ga ,_aa ,0,0);_bag (_ga ,_dge ,0,0);_bag (_ga ,_dca ,0,0);
_bag (_ga ,_aab ,0,0);_bag (_ga ,_bf ,0,0);_bag (_ga ,_ba ,0,0);_bag (_ga ,_e ,0,0);_bag (_ga ,_ab ,0,0);_bag (_ga ,_da ,0,0);};func (_aaf *Encoder )decodeG4 (_fbf []byte )([][]byte ,error ){_bc :=make ([]byte ,_aaf .Columns );for _ef :=range _bc {_bc [_ef ]=_gfbc ;
};_agg :=make ([][]byte ,1);_agg [0]=_bc ;var (_dgc bool ;_ada error ;_dfb int ;);for (_dfb /8)< len (_fbf ){_dgc ,_dfb ,_ada =_ffc (_fbf ,_dfb );if _ada !=nil {return nil ,_ada ;};if _dgc {break ;};var (_fec code ;_abd bool ;);_dfd :=true ;var _aac []byte ;
_dd :=-1;_aba :=true ;for _dd < _aaf .Columns {_fec ,_dfb ,_abd =_bg (_fbf ,_dfb );if !_abd {_ce .Log .Warning ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u0063i\u0074\u0074\u0066a\u0078:\u0020\u0025\u0076",_ff );
_aba =false ;break ;};switch _fec {case _aa :_aac ,_dd =_efa (_agg ,_aac ,_dfd ,_dd );case _dge :_aac ,_dfb ,_dd ,_ada =_eg (_fbf ,_aac ,_dfb ,_dfd ,_dd );if _ada !=nil {_ce .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064i\u006e\u0067\u0020\u0063c\u0069\u0074\u0074\u0066\u0061\u0078\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020\u006d\u006f\u0064\u0065\u003a\u0020\u0025\u0076",_ada );
_aba =false ;break ;};case _dca :_aac ,_dd =_bce (_agg ,_aac ,_dfd ,_dd ,0);_dfd =!_dfd ;case _aab :_aac ,_dd =_bce (_agg ,_aac ,_dfd ,_dd ,1);_dfd =!_dfd ;case _bf :_aac ,_dd =_bce (_agg ,_aac ,_dfd ,_dd ,2);_dfd =!_dfd ;case _ba :_aac ,_dd =_bce (_agg ,_aac ,_dfd ,_dd ,3);
_dfd =!_dfd ;case _e :_aac ,_dd =_bce (_agg ,_aac ,_dfd ,_dd ,-1);_dfd =!_dfd ;case _ab :_aac ,_dd =_bce (_agg ,_aac ,_dfd ,_dd ,-2);_dfd =!_dfd ;case _da :_aac ,_dd =_bce (_agg ,_aac ,_dfd ,_dd ,-3);_dfd =!_dfd ;};if len (_aac )>=_aaf .Columns {break ;
};};if !_aba {_dfb +=8-_dfb %8;continue ;};if _aaf .EncodedByteAlign &&_dfb %8!=0{_dfb +=8-_dfb %8;};_agg =append (_agg ,_aac );if _aaf .Rows > 0&&!_aaf .EndOfBlock &&len (_agg )>=(_aaf .Rows +1){break ;};};_agg =_agg [1:];return _agg ,nil ;};func (_ecc *Encoder )Encode (pixels [][]byte )[]byte {if _ecc .BlackIs1 {_gfbc =0;
_baf =1;}else {_gfbc =1;_baf =0;};if _ecc .K ==0{return _ecc .encodeG31D (pixels );};if _ecc .K > 0{return _ecc .encodeG32D (pixels );};if _ecc .K < 0{return _ecc .encodeG4 (pixels );};return nil ;};func _bcd (_acca []byte ,_cfb int )int {if _cfb >=len (_acca ){return _cfb ;
};if _cfb < -1{_cfb =-1;};var _eeb byte ;if _cfb > -1{_eeb =_acca [_cfb ];}else {_eeb =_gfbc ;};_gae :=_cfb +1;for _gae < len (_acca ){if _acca [_gae ]!=_eeb {break ;};_gae ++;};return _gae ;};func _bag (_cfe *decodingTreeNode ,_abddd code ,_cde int ,_cca int ){_eed :=_bfd (_abddd .Code ,_cde );
_cde ++;if _eed ==1{if _cfe .Right ==nil {_cfe .Right =&decodingTreeNode {Val :_eed };};if _cde ==_abddd .BitsWritten {_cfe .Right .RunLen =&_cca ;_cfe .Right .Code =&_abddd ;}else {_bag (_cfe .Right ,_abddd ,_cde ,_cca );};}else {if _cfe .Left ==nil {_cfe .Left =&decodingTreeNode {Val :_eed };
};if _cde ==_abddd .BitsWritten {_cfe .Left .RunLen =&_cca ;_cfe .Left .Code =&_abddd ;}else {_bag (_cfe .Left ,_abddd ,_cde ,_cca );};};};func _gg (_bbe int ,_bcfc bool )(code ,int ,bool ){if _bbe < 64{if _bcfc {return _d [_bbe ],0,true ;};return _cg [_bbe ],0,true ;
};_cedc :=_bbe /64;if _cedc > 40{return _ad [2560],_bbe -2560,false ;};if _cedc > 27{return _ad [_cedc *64],_bbe -_cedc *64,false ;};if _bcfc {return _ac [_cedc *64],_bbe -_cedc *64,false ;};return _g [_cedc *64],_bbe -_cedc *64,false ;};func _efa (_bfa [][]byte ,_bb []byte ,_adda bool ,_acaa int )([]byte ,int ){_faae :=_afg (_bb ,_bfa [len (_bfa )-1],_acaa ,_adda );
_bcb :=_bcd (_bfa [len (_bfa )-1],_faae );if _acaa ==-1{_bb =_babe (_bb ,_adda ,_bcb -_acaa -1);}else {_bb =_babe (_bb ,_adda ,_bcb -_acaa );};_acaa =_bcb ;return _bb ,_acaa ;};func _gcf (_cba []byte ,_cad int ,_cbd code )([]byte ,int ){_ded :=true ;var _ebca []byte ;
_ebca ,_cad =_gfg (nil ,_cad ,_cbd );_dead :=0;var _dfc int ;for _dead < len (_cba ){_dfc ,_dead =_gga (_cba ,_ded ,_dead );_ebca ,_cad =_ebd (_ebca ,_cad ,_dfc ,_ded );_ded =!_ded ;};return _ebca ,_cad %8;};type decodingTreeNode struct{Val byte ;RunLen *int ;
Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _ebd (_cef []byte ,_aabe int ,_ccaf int ,_bdfb bool )([]byte ,int ){var (_cfca code ;_gbba bool ;);for !_gbba {_cfca ,_ccaf ,_gbba =_gg (_ccaf ,_bdfb );_cef ,_aabe =_gfg (_cef ,_aabe ,_cfca );
};return _cef ,_aabe ;};func _ffc (_ddc []byte ,_bfe int )(bool ,int ,error ){_gfe :=_bfe ;var _fgae bool ;_fgae ,_bfe =_dabf (_ddc ,_bfe );if _fgae {_fgae ,_bfe =_dabf (_ddc ,_bfe );if _fgae {return true ,_bfe ,nil ;};return false ,_gfe ,_dcg ;};return false ,_gfe ,nil ;
};func _gga (_cab []byte ,_aff bool ,_efga int )(int ,int ){_fdf :=0;for _efga < len (_cab ){if _aff {if _cab [_efga ]!=_gfbc {break ;};}else {if _cab [_efga ]!=_baf {break ;};};_fdf ++;_efga ++;};return _fdf ,_efga ;};func _bg (_acc []byte ,_cgd int )(code ,int ,bool ){var (_cd uint16 ;
_bac int ;_aag int ;);_aag =_cgd ;_cd ,_bac ,_ =_fdb (_acc ,_cgd );_dea ,_adc :=_daa (_cd ,_bac );if !_adc {return code {},_aag ,false ;};return _dea ,_aag +_dea .BitsWritten ,true ;};func _beb (_fed *decodingTreeNode ,_bba uint16 ,_dgba int )(*int ,*code ){if _fed ==nil {return nil ,nil ;
};if _dgba ==16{return _fed .RunLen ,_fed .Code ;};_cgcf :=_bfd (_bba ,_dgba );_dgba ++;var _gcdd *int ;var _ced *code ;if _cgcf ==1{_gcdd ,_ced =_beb (_fed .Right ,_bba ,_dgba );}else {_gcdd ,_ced =_beb (_fed .Left ,_bba ,_dgba );};if _gcdd ==nil {_gcdd =_fed .RunLen ;
_ced =_fed .Code ;};return _gcdd ,_ced ;};func (_df *Encoder )decodeG32D (_aaba []byte )([][]byte ,error ){var (_aca [][]byte ;_dcaf int ;_eae error ;);_dac :for (_dcaf /8)< len (_aaba ){var _fa bool ;_fa ,_dcaf ,_eae =_ecf (_aaba ,_dcaf );if _eae !=nil {return nil ,_eae ;
};if _fa {break ;};_fa ,_dcaf =_fgad (_aaba ,_dcaf );if !_fa {if _df .EndOfLine {return nil ,_ea ;};};var _dgec []byte ;_dgec ,_dcaf =_df .decodeRow1D (_aaba ,_dcaf );if _df .EncodedByteAlign &&_dcaf %8!=0{_dcaf +=8-_dcaf %8;};if _dgec !=nil {_aca =append (_aca ,_dgec );
};if _df .Rows > 0&&!_df .EndOfBlock &&len (_aca )>=_df .Rows {break ;};for _fc :=1;_fc < _df .K &&(_dcaf /8)< len (_aaba );_fc ++{_fa ,_dcaf =_dcf (_aaba ,_dcaf );if !_fa {_fa ,_dcaf ,_eae =_ecf (_aaba ,_dcaf );if _eae !=nil {return nil ,_eae ;};if _fa {break _dac ;
}else {if _df .EndOfLine {return nil ,_ea ;};};};var (_cga code ;_cb bool ;);_dgb :=true ;var _aec []byte ;_de :=-1;for _cga ,_dcaf ,_cb =_bg (_aaba ,_dcaf );_cb ;_cga ,_dcaf ,_cb =_bg (_aaba ,_dcaf ){switch _cga {case _aa :_aec ,_de =_efa (_aca ,_aec ,_dgb ,_de );
case _dge :_aec ,_dcaf ,_de ,_eae =_eg (_aaba ,_aec ,_dcaf ,_dgb ,_de );if _eae !=nil {return nil ,_eae ;};case _dca :_aec ,_de =_bce (_aca ,_aec ,_dgb ,_de ,0);_dgb =!_dgb ;case _aab :_aec ,_de =_bce (_aca ,_aec ,_dgb ,_de ,1);_dgb =!_dgb ;case _bf :_aec ,_de =_bce (_aca ,_aec ,_dgb ,_de ,2);
_dgb =!_dgb ;case _ba :_aec ,_de =_bce (_aca ,_aec ,_dgb ,_de ,3);_dgb =!_dgb ;case _e :_aec ,_de =_bce (_aca ,_aec ,_dgb ,_de ,-1);_dgb =!_dgb ;case _ab :_aec ,_de =_bce (_aca ,_aec ,_dgb ,_de ,-2);_dgb =!_dgb ;case _da :_aec ,_de =_bce (_aca ,_aec ,_dgb ,_de ,-3);
_dgb =!_dgb ;};if len (_aec )>=_df .Columns {break ;};};if _df .EncodedByteAlign &&_dcaf %8!=0{_dcaf +=8-_dcaf %8;};if _aec !=nil {_aca =append (_aca ,_aec );};if _df .Rows > 0&&!_df .EndOfBlock &&len (_aca )>=_df .Rows {break _dac ;};};};return _aca ,nil ;
};var (_gfbc byte =1;_baf byte =0;);func _daa (_aeb uint16 ,_adcg int )(code ,bool ){_ ,_gdf :=_beb (_ga ,_aeb ,_adcg );if _gdf ==nil {return code {},false ;};return *_gdf ,true ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;
Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _aacf (_fag ,_bea []byte ,_ddd int )int {_cge :=_bcd (_bea ,_ddd );if _cge < len (_bea )&&(_ddd ==-1&&_bea [_cge ]==_gfbc ||_ddd >=0&&_ddd < len (_fag )&&_fag [_ddd ]==_bea [_cge ]||_ddd >=len (_fag )&&_fag [_ddd -1]!=_bea [_cge ]){_cge =_bcd (_bea ,_cge );
};return _cge ;};func (_gf *Encoder )Decode (encoded []byte )([][]byte ,error ){if _gf .BlackIs1 {_gfbc =0;_baf =1;}else {_gfbc =1;_baf =0;};if _gf .K ==0{return _gf .decodeG31D (encoded );};if _gf .K > 0{return _gf .decodeG32D (encoded );};if _gf .K < 4{return _gf .decodeG4 (encoded );
};return nil ,nil ;};func _ecf (_abdd []byte ,_ege int )(bool ,int ,error ){_dgg :=_ege ;var _aecc =false ;for _ddf :=0;_ddf < 6;_ddf ++{_aecc ,_ege =_fgad (_abdd ,_ege );if !_aecc {if _ddf > 1{return false ,_dgg ,_ca ;};_ege =_dgg ;break ;};};return _aecc ,_ege ,nil ;
};func _afe (_faff ,_bfc int )code {var _cce code ;switch _bfc -_faff {case -1:_cce =_aab ;case -2:_cce =_bf ;case -3:_cce =_ba ;case 0:_cce =_dca ;case 1:_cce =_e ;case 2:_cce =_ab ;case 3:_cce =_da ;};return _cce ;};func _fcfd (_dag int )([]byte ,int ){var _bcc []byte ;
for _gda :=0;_gda < 2;_gda ++{_bcc ,_dag =_gfg (_bcc ,_dag ,_dg );};return _bcc ,_dag %8;};func _fdb (_cgc []byte ,_efg int )(uint16 ,int ,int ){_fdbg :=_efg ;_aaa :=_efg /8;_efg %=8;if _aaa >=len (_cgc ){return 0,16,_fdbg ;};_afb :=byte (0xFF>>uint (_efg ));
_def :=uint16 ((_cgc [_aaa ]&_afb )<<uint (_efg ))<<8;_bab :=8-_efg ;_aaa ++;_efg =0;if _aaa >=len (_cgc ){return _def >>(16-uint (_bab )),16-_bab ,_fdbg +_bab ;};_def |=uint16 (_cgc [_aaa ])<<(8-uint (_bab ));_bab +=8;_aaa ++;_efg =0;if _aaa >=len (_cgc ){return _def >>(16-uint (_bab )),16-_bab ,_fdbg +_bab ;
};if _bab ==16{return _def ,0,_fdbg +_bab ;};_acb :=16-_bab ;_def |=uint16 (_cgc [_aaa ]>>(8-uint (_acb )));return _def ,0,_fdbg +16;};func (_egf *Encoder )decodeRow1D (_abg []byte ,_dee int )([]byte ,int ){var _gbf []byte ;_gee :=true ;var _cfd int ;_cfd ,_dee =_fbb (_abg ,_dee ,_gee );
for _cfd !=-1{_gbf =_babe (_gbf ,_gee ,_cfd );if _cfd < 64{if len (_gbf )>=_egf .Columns {break ;};_gee =!_gee ;};_cfd ,_dee =_fbb (_abg ,_dee ,_gee );};return _gbf ,_dee ;};var (_cg map[int ]code ;_d map[int ]code ;_g map[int ]code ;_ac map[int ]code ;
_ad map[int ]code ;_db map[int ]byte ;_dg =code {Code :1<<4,BitsWritten :12};_cf =code {Code :3<<3,BitsWritten :13};_dc =code {Code :2<<3,BitsWritten :13};_aa =code {Code :1<<12,BitsWritten :4};_dge =code {Code :1<<13,BitsWritten :3};_dca =code {Code :1<<15,BitsWritten :1};
_aab =code {Code :3<<13,BitsWritten :3};_bf =code {Code :3<<10,BitsWritten :6};_ba =code {Code :3<<9,BitsWritten :7};_e =code {Code :2<<13,BitsWritten :3};_ab =code {Code :2<<10,BitsWritten :6};_da =code {Code :2<<9,BitsWritten :7};);func _ggb (_effg []byte ,_aef int )([]byte ,int ){return _gfg (_effg ,_aef ,_aa )};
func (_fd *Encoder )decodeG31D (_ae []byte )([][]byte ,error ){var (_daba [][]byte ;_gd int ;_caa =-1;_gb bool ;);for (_gd /8)< len (_ae ){_gb ,_gd =_dabf (_ae ,_gd );if !_gb {if _fd .EndOfLine {return nil ,_ea ;};}else {for _eb :=0;_eb < 5;_eb ++{_gb ,_gd =_dabf (_ae ,_gd );
if !_gb {if _eb ==0{break ;};return nil ,_ed ;};};if _gb {break ;};};var _aga []byte ;_aga ,_gd =_fd .decodeRow1D (_ae ,_gd );if _caa ==_gd {return nil ,_acg ;};_caa =_gd ;if _fd .EncodedByteAlign &&_gd %8!=0{_gd +=8-_gd %8;};_daba =append (_daba ,_aga );
if _fd .Rows > 0&&!_fd .EndOfBlock &&len (_daba )>=_fd .Rows {break ;};};return _daba ,nil ;};func _afg (_aaac ,_gbc []byte ,_gge int ,_bbb bool )int {_dabe :=_bcd (_gbc ,_gge );if _dabe < len (_gbc )&&(_gge ==-1&&_gbc [_dabe ]==_gfbc ||_gge >=0&&_gge < len (_aaac )&&_aaac [_gge ]==_gbc [_dabe ]||_gge >=len (_aaac )&&_bbb &&_gbc [_dabe ]==_gfbc ||_gge >=len (_aaac )&&!_bbb &&_gbc [_dabe ]==_baf ){_dabe =_bcd (_gbc ,_dabe );
};return _dabe ;};func _dcf (_bgc []byte ,_dba int )(bool ,int ){return _aae (_bgc ,_dba ,_dc )};func _fgad (_ede []byte ,_fbe int )(bool ,int ){return _aae (_ede ,_fbe ,_cf )};func _babe (_ebe []byte ,_fcf bool ,_cdb int )[]byte {if _cdb < 0{return _ebe ;
};_eff :=make ([]byte ,_cdb );if _fcf {for _cec :=0;_cec < len (_eff );_cec ++{_eff [_cec ]=_gfbc ;};}else {for _faea :=0;_faea < len (_eff );_faea ++{_eff [_faea ]=_baf ;};};_ebe =append (_ebe ,_eff ...);return _ebe ;};func _aae (_bee []byte ,_bef int ,_eggb code )(bool ,int ){_edb :=_bef ;
var (_dbc uint16 ;_caaa int ;);_dbc ,_caaa ,_bef =_fdb (_bee ,_bef );if _caaa > 3{return false ,_edb ;};_dbc >>=uint (3-_caaa );_dbc <<=3;if _dbc !=_eggb .Code {return false ,_edb ;};return true ,_bef -3+_caaa ;};func _aafd (_fafc []byte ,_ffcf ,_ceag ,_dagf int )([]byte ,int ){_eacg :=_afe (_ceag ,_dagf );
_fafc ,_ffcf =_gfg (_fafc ,_ffcf ,_eacg );return _fafc ,_ffcf ;};func _gfg (_gdb []byte ,_fcdd int ,_ebcb code )([]byte ,int ){_bdd :=0;for _bdd < _ebcb .BitsWritten {_cdfe :=_fcdd /8;_dec :=_fcdd %8;if _cdfe >=len (_gdb ){_gdb =append (_gdb ,0);};_ebda :=8-_dec ;
_adf :=_ebcb .BitsWritten -_bdd ;if _ebda > _adf {_ebda =_adf ;};if _bdd < 8{_gdb [_cdfe ]=_gdb [_cdfe ]|byte (_ebcb .Code >>uint (8+_dec -_bdd ))&_db [8-_ebda -_dec ];}else {_gdb [_cdfe ]=_gdb [_cdfe ]|(byte (_ebcb .Code <<uint (_bdd -8))&_db [8-_ebda ])>>uint (_dec );
};_fcdd +=_ebda ;_bdd +=_ebda ;};return _gdb ,_fcdd ;};func _bga (_eda int )([]byte ,int ){var _ebef []byte ;for _aagd :=0;_aagd < 6;_aagd ++{_ebef ,_eda =_gfg (_ebef ,_eda ,_cf );};return _ebef ,_eda %8;};func (_gff *Encoder )encodeG31D (_ffb [][]byte )[]byte {var _bfef []byte ;
_aecb :=0;for _bad :=range _ffb {if _gff .Rows > 0&&!_gff .EndOfBlock &&_bad ==_gff .Rows {break ;};_eea ,_abgb :=_gcf (_ffb [_bad ],_aecb ,_dg );_bfef =_gff .appendEncodedRow (_bfef ,_eea ,_aecb );if _gff .EncodedByteAlign {_abgb =0;};_aecb =_abgb ;};
if _gff .EndOfBlock {_cfg ,_ :=_ddcb (_aecb );_bfef =_gff .appendEncodedRow (_bfef ,_cfg ,_aecb );};return _bfef ;};func _gfb (_fca uint16 ,_fab int ,_aggd bool )(int ,code ){var _fea *int ;var _eaed *code ;if _aggd {_fea ,_eaed =_beb (_aad ,_fca ,_fab );
}else {_fea ,_eaed =_beb (_ceg ,_fca ,_fab );};if _fea ==nil {return -1,code {};};return *_fea ,*_eaed ;};func (_ceac *Encoder )appendEncodedRow (_dcac ,_dedg []byte ,_fgef int )[]byte {if len (_dcac )> 0&&_fgef !=0&&!_ceac .EncodedByteAlign {_dcac [len (_dcac )-1]=_dcac [len (_dcac )-1]|_dedg [0];
_dcac =append (_dcac ,_dedg [1:]...);}else {_dcac =append (_dcac ,_dedg ...);};return _dcac ;};func (_fda *Encoder )encodeG32D (_bdf [][]byte )[]byte {var _cff []byte ;var _abgc int ;for _cda :=0;_cda < len (_bdf );_cda +=_fda .K {if _fda .Rows > 0&&!_fda .EndOfBlock &&_cda ==_fda .Rows {break ;
};_gdfe ,_cgb :=_gcf (_bdf [_cda ],_abgc ,_cf );_cff =_fda .appendEncodedRow (_cff ,_gdfe ,_abgc );if _fda .EncodedByteAlign {_cgb =0;};_abgc =_cgb ;for _cgf :=_cda +1;_cgf < (_cda +_fda .K )&&_cgf < len (_bdf );_cgf ++{if _fda .Rows > 0&&!_fda .EndOfBlock &&_cgf ==_fda .Rows {break ;
};_eedg ,_adb :=_gfg (nil ,_abgc ,_dc );var _cecg ,_bgg ,_bfb int ;_baa :=-1;for _baa < len (_bdf [_cgf ]){_cecg =_bcd (_bdf [_cgf ],_baa );_bgg =_aacf (_bdf [_cgf ],_bdf [_cgf -1],_baa );_bfb =_bcd (_bdf [_cgf -1],_bgg );if _bfb < _cecg {_eedg ,_adb =_ggb (_eedg ,_adb );
_baa =_bfb ;}else {if _b .Abs (float64 (_bgg -_cecg ))> 3{_eedg ,_adb ,_baa =_fgc (_bdf [_cgf ],_eedg ,_adb ,_baa ,_cecg );}else {_eedg ,_adb =_aafd (_eedg ,_adb ,_cecg ,_bgg );_baa =_cecg ;};};};_cff =_fda .appendEncodedRow (_cff ,_eedg ,_abgc );if _fda .EncodedByteAlign {_adb =0;
};_abgc =_adb %8;};};if _fda .EndOfBlock {_geda ,_ :=_bga (_abgc );_cff =_fda .appendEncodedRow (_cff ,_geda ,_abgc );};return _cff ;};type code struct{Code uint16 ;BitsWritten int ;};func _aabf (_fba [][]byte )[][]byte {_dcaff :=make ([]byte ,len (_fba [0]));
for _deab :=range _dcaff {_dcaff [_deab ]=_gfbc ;};_fba =append (_fba ,[]byte {});for _bff :=len (_fba )-1;_bff > 0;_bff --{_fba [_bff ]=_fba [_bff -1];};_fba [0]=_dcaff ;return _fba ;};func _fbb (_dbf []byte ,_ge int ,_eac bool )(int ,int ){var (_ged uint16 ;
_cac int ;_bd int ;);_bd =_ge ;_ged ,_cac ,_ =_fdb (_dbf ,_ge );_gcd ,_age :=_gfb (_ged ,_cac ,_eac );if _gcd ==-1{return -1,_bd ;};return _gcd ,_bd +_age .BitsWritten ;};func _dabf (_bfg []byte ,_adae int )(bool ,int ){_fce :=_adae ;var (_gbb uint16 ;
_aee int ;);_gbb ,_aee ,_adae =_fdb (_bfg ,_adae );if _aee > 4{return false ,_fce ;};_gbb >>=uint (4-_aee );_gbb <<=4;if _gbb !=_dg .Code {return false ,_fce ;};return true ,_adae -4+_aee ;};func _bce (_ccd [][]byte ,_af []byte ,_gba bool ,_gc ,_faa int )([]byte ,int ){_be :=_afg (_af ,_ccd [len (_ccd )-1],_gc ,_gba );
_abad :=_be +_faa ;if _gc ==-1{_af =_babe (_af ,_gba ,_abad -_gc -1);}else {_af =_babe (_af ,_gba ,_abad -_gc );};_gc =_abad ;return _af ,_gc ;};func _ddcb (_egd int )([]byte ,int ){var _aaea []byte ;for _ecb :=0;_ecb < 6;_ecb ++{_aaea ,_egd =_gfg (_aaea ,_egd ,_dg );
};return _aaea ,_egd %8;};func _bfd (_ee uint16 ,_bca int )byte {if _bca < 8{_ee >>=8;};_bca %=8;_ffcb :=byte (0x01<<(7-uint (_bca )));return (byte (_ee )&_ffcb )>>(7-uint (_bca ));};var (_dcg =_c .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");
_ca =_c .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_f =_c .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");
_ea =_c .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_ed =_c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ff =_c .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065");_acg =_c .New ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074o\u0020\u0064\u0065\u0063\u006fd\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u002c\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0069\u0067\u0068\u0074\u0020\u0062\u0065\u0020\u0062\u0072\u006f\u006b\u0065\u006e");
);func _fgc (_cadc ,_gfc []byte ,_gdde ,_gfbg ,_agea int )([]byte ,int ,int ){_acd :=_bcd (_cadc ,_agea );_dgcd :=_gfbg >=0&&_cadc [_gfbg ]==_gfbc ||_gfbg ==-1;_gfc ,_gdde =_gfg (_gfc ,_gdde ,_dge );var _beg int ;if _gfbg > -1{_beg =_agea -_gfbg ;}else {_beg =_agea -_gfbg -1;
};_gfc ,_gdde =_ebd (_gfc ,_gdde ,_beg ,_dgcd );_dgcd =!_dgcd ;_efe :=_acd -_agea ;_gfc ,_gdde =_ebd (_gfc ,_gdde ,_efe ,_dgcd );_gfbg =_acd ;return _gfc ,_gdde ,_gfbg ;};