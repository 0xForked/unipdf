//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_f "errors";_e "github.com/unidoc/unipdf/v3/common";_a "math";);func _agf (_ccg ,_bgf []byte ,_dae ,_gdbg ,_eee int )([]byte ,int ,int ){_bdbc :=_gdd (_ccg ,_eee );_fdb :=_gdbg >=0&&_ccg [_gdbg ]==_afb ||_gdbg ==-1;_bgf ,_dae =_beg (_bgf ,_dae ,_dd );
var _cfbe int ;if _gdbg > -1{_cfbe =_eee -_gdbg ;}else {_cfbe =_eee -_gdbg -1;};_bgf ,_dae =_bca (_bgf ,_dae ,_cfbe ,_fdb );_fdb =!_fdb ;_baa :=_bdbc -_eee ;_bgf ,_dae =_bca (_bgf ,_dae ,_baa ,_fdb );_gdbg =_bdbc ;return _bgf ,_dae ,_gdbg ;};func _eefd (_ggbf int )([]byte ,int ){var _dfc []byte ;
for _gdgb :=0;_gdgb < 6;_gdgb ++{_dfc ,_ggbf =_beg (_dfc ,_ggbf ,_cb );};return _dfc ,_ggbf %8;};func init (){_eg =make (map[int ]code );_eg [0]=code {Code :13<<8|3<<6,BitsWritten :10};_eg [1]=code {Code :2<<(5+8),BitsWritten :3};_eg [2]=code {Code :3<<(6+8),BitsWritten :2};
_eg [3]=code {Code :2<<(6+8),BitsWritten :2};_eg [4]=code {Code :3<<(5+8),BitsWritten :3};_eg [5]=code {Code :3<<(4+8),BitsWritten :4};_eg [6]=code {Code :2<<(4+8),BitsWritten :4};_eg [7]=code {Code :3<<(3+8),BitsWritten :5};_eg [8]=code {Code :5<<(2+8),BitsWritten :6};
_eg [9]=code {Code :4<<(2+8),BitsWritten :6};_eg [10]=code {Code :4<<(1+8),BitsWritten :7};_eg [11]=code {Code :5<<(1+8),BitsWritten :7};_eg [12]=code {Code :7<<(1+8),BitsWritten :7};_eg [13]=code {Code :4<<8,BitsWritten :8};_eg [14]=code {Code :7<<8,BitsWritten :8};
_eg [15]=code {Code :12<<8,BitsWritten :9};_eg [16]=code {Code :5<<8|3<<6,BitsWritten :10};_eg [17]=code {Code :6<<8,BitsWritten :10};_eg [18]=code {Code :2<<8,BitsWritten :10};_eg [19]=code {Code :12<<8|7<<5,BitsWritten :11};_eg [20]=code {Code :13<<8,BitsWritten :11};
_eg [21]=code {Code :13<<8|4<<5,BitsWritten :11};_eg [22]=code {Code :6<<8|7<<5,BitsWritten :11};_eg [23]=code {Code :5<<8,BitsWritten :11};_eg [24]=code {Code :2<<8|7<<5,BitsWritten :11};_eg [25]=code {Code :3<<8,BitsWritten :11};_eg [26]=code {Code :12<<8|10<<4,BitsWritten :12};
_eg [27]=code {Code :12<<8|11<<4,BitsWritten :12};_eg [28]=code {Code :12<<8|12<<4,BitsWritten :12};_eg [29]=code {Code :12<<8|13<<4,BitsWritten :12};_eg [30]=code {Code :6<<8|8<<4,BitsWritten :12};_eg [31]=code {Code :6<<8|9<<4,BitsWritten :12};_eg [32]=code {Code :6<<8|10<<4,BitsWritten :12};
_eg [33]=code {Code :6<<8|11<<4,BitsWritten :12};_eg [34]=code {Code :13<<8|2<<4,BitsWritten :12};_eg [35]=code {Code :13<<8|3<<4,BitsWritten :12};_eg [36]=code {Code :13<<8|4<<4,BitsWritten :12};_eg [37]=code {Code :13<<8|5<<4,BitsWritten :12};_eg [38]=code {Code :13<<8|6<<4,BitsWritten :12};
_eg [39]=code {Code :13<<8|7<<4,BitsWritten :12};_eg [40]=code {Code :6<<8|12<<4,BitsWritten :12};_eg [41]=code {Code :6<<8|13<<4,BitsWritten :12};_eg [42]=code {Code :13<<8|10<<4,BitsWritten :12};_eg [43]=code {Code :13<<8|11<<4,BitsWritten :12};_eg [44]=code {Code :5<<8|4<<4,BitsWritten :12};
_eg [45]=code {Code :5<<8|5<<4,BitsWritten :12};_eg [46]=code {Code :5<<8|6<<4,BitsWritten :12};_eg [47]=code {Code :5<<8|7<<4,BitsWritten :12};_eg [48]=code {Code :6<<8|4<<4,BitsWritten :12};_eg [49]=code {Code :6<<8|5<<4,BitsWritten :12};_eg [50]=code {Code :5<<8|2<<4,BitsWritten :12};
_eg [51]=code {Code :5<<8|3<<4,BitsWritten :12};_eg [52]=code {Code :2<<8|4<<4,BitsWritten :12};_eg [53]=code {Code :3<<8|7<<4,BitsWritten :12};_eg [54]=code {Code :3<<8|8<<4,BitsWritten :12};_eg [55]=code {Code :2<<8|7<<4,BitsWritten :12};_eg [56]=code {Code :2<<8|8<<4,BitsWritten :12};
_eg [57]=code {Code :5<<8|8<<4,BitsWritten :12};_eg [58]=code {Code :5<<8|9<<4,BitsWritten :12};_eg [59]=code {Code :2<<8|11<<4,BitsWritten :12};_eg [60]=code {Code :2<<8|12<<4,BitsWritten :12};_eg [61]=code {Code :5<<8|10<<4,BitsWritten :12};_eg [62]=code {Code :6<<8|6<<4,BitsWritten :12};
_eg [63]=code {Code :6<<8|7<<4,BitsWritten :12};_b =make (map[int ]code );_b [0]=code {Code :53<<8,BitsWritten :8};_b [1]=code {Code :7<<(2+8),BitsWritten :6};_b [2]=code {Code :7<<(4+8),BitsWritten :4};_b [3]=code {Code :8<<(4+8),BitsWritten :4};_b [4]=code {Code :11<<(4+8),BitsWritten :4};
_b [5]=code {Code :12<<(4+8),BitsWritten :4};_b [6]=code {Code :14<<(4+8),BitsWritten :4};_b [7]=code {Code :15<<(4+8),BitsWritten :4};_b [8]=code {Code :19<<(3+8),BitsWritten :5};_b [9]=code {Code :20<<(3+8),BitsWritten :5};_b [10]=code {Code :7<<(3+8),BitsWritten :5};
_b [11]=code {Code :8<<(3+8),BitsWritten :5};_b [12]=code {Code :8<<(2+8),BitsWritten :6};_b [13]=code {Code :3<<(2+8),BitsWritten :6};_b [14]=code {Code :52<<(2+8),BitsWritten :6};_b [15]=code {Code :53<<(2+8),BitsWritten :6};_b [16]=code {Code :42<<(2+8),BitsWritten :6};
_b [17]=code {Code :43<<(2+8),BitsWritten :6};_b [18]=code {Code :39<<(1+8),BitsWritten :7};_b [19]=code {Code :12<<(1+8),BitsWritten :7};_b [20]=code {Code :8<<(1+8),BitsWritten :7};_b [21]=code {Code :23<<(1+8),BitsWritten :7};_b [22]=code {Code :3<<(1+8),BitsWritten :7};
_b [23]=code {Code :4<<(1+8),BitsWritten :7};_b [24]=code {Code :40<<(1+8),BitsWritten :7};_b [25]=code {Code :43<<(1+8),BitsWritten :7};_b [26]=code {Code :19<<(1+8),BitsWritten :7};_b [27]=code {Code :36<<(1+8),BitsWritten :7};_b [28]=code {Code :24<<(1+8),BitsWritten :7};
_b [29]=code {Code :2<<8,BitsWritten :8};_b [30]=code {Code :3<<8,BitsWritten :8};_b [31]=code {Code :26<<8,BitsWritten :8};_b [32]=code {Code :27<<8,BitsWritten :8};_b [33]=code {Code :18<<8,BitsWritten :8};_b [34]=code {Code :19<<8,BitsWritten :8};_b [35]=code {Code :20<<8,BitsWritten :8};
_b [36]=code {Code :21<<8,BitsWritten :8};_b [37]=code {Code :22<<8,BitsWritten :8};_b [38]=code {Code :23<<8,BitsWritten :8};_b [39]=code {Code :40<<8,BitsWritten :8};_b [40]=code {Code :41<<8,BitsWritten :8};_b [41]=code {Code :42<<8,BitsWritten :8};
_b [42]=code {Code :43<<8,BitsWritten :8};_b [43]=code {Code :44<<8,BitsWritten :8};_b [44]=code {Code :45<<8,BitsWritten :8};_b [45]=code {Code :4<<8,BitsWritten :8};_b [46]=code {Code :5<<8,BitsWritten :8};_b [47]=code {Code :10<<8,BitsWritten :8};_b [48]=code {Code :11<<8,BitsWritten :8};
_b [49]=code {Code :82<<8,BitsWritten :8};_b [50]=code {Code :83<<8,BitsWritten :8};_b [51]=code {Code :84<<8,BitsWritten :8};_b [52]=code {Code :85<<8,BitsWritten :8};_b [53]=code {Code :36<<8,BitsWritten :8};_b [54]=code {Code :37<<8,BitsWritten :8};
_b [55]=code {Code :88<<8,BitsWritten :8};_b [56]=code {Code :89<<8,BitsWritten :8};_b [57]=code {Code :90<<8,BitsWritten :8};_b [58]=code {Code :91<<8,BitsWritten :8};_b [59]=code {Code :74<<8,BitsWritten :8};_b [60]=code {Code :75<<8,BitsWritten :8};
_b [61]=code {Code :50<<8,BitsWritten :8};_b [62]=code {Code :51<<8,BitsWritten :8};_b [63]=code {Code :52<<8,BitsWritten :8};_ff =make (map[int ]code );_ff [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ff [128]=code {Code :12<<8|8<<4,BitsWritten :12};_ff [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_ff [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ff [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ff [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ff [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ff [512]=code {Code :3<<8|12<<3,BitsWritten :13};_ff [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_ff [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ff [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ff [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ff [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ff [896]=code {Code :3<<8|18<<3,BitsWritten :13};_ff [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_ff [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ff [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ff [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ff [1216]=code {Code :119<<3,BitsWritten :13};_ff [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_ff [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_ff [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ff [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ff [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ff [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_ff [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_ff [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_fa =make (map[int ]code );_fa [64]=code {Code :27<<(3+8),BitsWritten :5};_fa [128]=code {Code :18<<(3+8),BitsWritten :5};_fa [192]=code {Code :23<<(2+8),BitsWritten :6};_fa [256]=code {Code :55<<(1+8),BitsWritten :7};
_fa [320]=code {Code :54<<8,BitsWritten :8};_fa [384]=code {Code :55<<8,BitsWritten :8};_fa [448]=code {Code :100<<8,BitsWritten :8};_fa [512]=code {Code :101<<8,BitsWritten :8};_fa [576]=code {Code :104<<8,BitsWritten :8};_fa [640]=code {Code :103<<8,BitsWritten :8};
_fa [704]=code {Code :102<<8,BitsWritten :9};_fa [768]=code {Code :102<<8|1<<7,BitsWritten :9};_fa [832]=code {Code :105<<8,BitsWritten :9};_fa [896]=code {Code :105<<8|1<<7,BitsWritten :9};_fa [960]=code {Code :106<<8,BitsWritten :9};_fa [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_fa [1088]=code {Code :107<<8,BitsWritten :9};_fa [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_fa [1216]=code {Code :108<<8,BitsWritten :9};_fa [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_fa [1344]=code {Code :109<<8,BitsWritten :9};_fa [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_fa [1472]=code {Code :76<<8,BitsWritten :9};_fa [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_fa [1600]=code {Code :77<<8,BitsWritten :9};_fa [1664]=code {Code :24<<(2+8),BitsWritten :6};_fa [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ee =make (map[int ]code );
_ee [1792]=code {Code :1<<8,BitsWritten :11};_ee [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ee [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ee [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ee [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ee [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_ee [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ee [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ee [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ee [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ee [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_ee [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ee [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_fae =make (map[int ]byte );_fae [0]=0xFF;_fae [1]=0xFE;_fae [2]=0xFC;_fae [3]=0xF8;_fae [4]=0xF0;_fae [5]=0xE0;_fae [6]=0xC0;_fae [7]=0x80;_fae [8]=0x00;
};func (_egbb *Encoder )encodeG32D (_gea [][]byte )[]byte {var _ffeg []byte ;var _fefd int ;for _eef :=0;_eef < len (_gea );_eef +=_egbb .K {if _egbb .Rows > 0&&!_egbb .EndOfBlock &&_eef ==_egbb .Rows {break ;};_fea ,_egec :=_eea (_gea [_eef ],_fefd ,_cb );
_ffeg =_egbb .appendEncodedRow (_ffeg ,_fea ,_fefd );if _egbb .EncodedByteAlign {_egec =0;};_fefd =_egec ;for _bec :=_eef +1;_bec < (_eef +_egbb .K )&&_bec < len (_gea );_bec ++{if _egbb .Rows > 0&&!_egbb .EndOfBlock &&_bec ==_egbb .Rows {break ;};_da ,_gga :=_beg (nil ,_fefd ,_ffa );
var _gdbb ,_bdb ,_ded int ;_bdg :=-1;for _bdg < len (_gea [_bec ]){_gdbb =_gdd (_gea [_bec ],_bdg );_bdb =_fcf (_gea [_bec ],_gea [_bec -1],_bdg );_ded =_gdd (_gea [_bec -1],_bdb );if _ded < _gdbb {_da ,_gga =_ccd (_da ,_gga );_bdg =_ded ;}else {if _a .Abs (float64 (_bdb -_gdbb ))> 3{_da ,_gga ,_bdg =_agf (_gea [_bec ],_da ,_gga ,_bdg ,_gdbb );
}else {_da ,_gga =_cdffg (_da ,_gga ,_gdbb ,_bdb );_bdg =_gdbb ;};};};_ffeg =_egbb .appendEncodedRow (_ffeg ,_da ,_fefd );if _egbb .EncodedByteAlign {_gga =0;};_fefd =_gga %8;};};if _egbb .EndOfBlock {_cdff ,_ :=_eefd (_fefd );_ffeg =_egbb .appendEncodedRow (_ffeg ,_cdff ,_fefd );
};return _ffeg ;};func _bbb (_ab []byte ,_gdg int )(uint16 ,int ,int ){_afe :=_gdg ;_ggg :=_gdg /8;_gdg %=8;if _ggg >=len (_ab ){return 0,16,_afe ;};_deb :=byte (0xFF>>uint (_gdg ));_gcbg :=uint16 ((_ab [_ggg ]&_deb )<<uint (_gdg ))<<8;_ceg :=8-_gdg ;_ggg ++;
_gdg =0;if _ggg >=len (_ab ){return _gcbg >>(16-uint (_ceg )),16-_ceg ,_afe +_ceg ;};_gcbg |=uint16 (_ab [_ggg ])<<(8-uint (_ceg ));_ceg +=8;_ggg ++;_gdg =0;if _ggg >=len (_ab ){return _gcbg >>(16-uint (_ceg )),16-_ceg ,_afe +_ceg ;};if _ceg ==16{return _gcbg ,0,_afe +_ceg ;
};_dgf :=16-_ceg ;_gcbg |=uint16 (_ab [_ggg ]>>(8-uint (_dgf )));return _gcbg ,0,_afe +16;};func init (){for _ba ,_eae :=range _b {_aff (_dda ,_eae ,0,_ba );};for _gcd ,_ege :=range _fa {_aff (_dda ,_ege ,0,_gcd );};for _add ,_db :=range _eg {_aff (_fe ,_db ,0,_add );
};for _dbe ,_aa :=range _ff {_aff (_fe ,_aa ,0,_dbe );};for _gcb ,_gb :=range _ee {_aff (_dda ,_gb ,0,_gcb );_aff (_fe ,_gb ,0,_gcb );};_aff (_bc ,_g ,0,0);_aff (_bc ,_dd ,0,0);_aff (_bc ,_bb ,0,0);_aff (_bc ,_cc ,0,0);_aff (_bc ,_ad ,0,0);_aff (_bc ,_dg ,0,0);
_aff (_bc ,_ffe ,0,0);_aff (_bc ,_fc ,0,0);_aff (_bc ,_ed ,0,0);};func _cbe (_aaa int ,_edae bool )(code ,int ,bool ){if _aaa < 64{if _edae {return _b [_aaa ],0,true ;};return _eg [_aaa ],0,true ;};_fbd :=_aaa /64;if _fbd > 40{return _ee [2560],_aaa -2560,false ;
};if _fbd > 27{return _ee [_fbd *64],_aaa -_fbd *64,false ;};if _edae {return _fa [_fbd *64],_aaa -_fbd *64,false ;};return _ff [_fbd *64],_aaa -_fbd *64,false ;};func (_edd *Encoder )encodeG4 (_agdb [][]byte )[]byte {_abbb :=make ([][]byte ,len (_agdb ));
copy (_abbb ,_agdb );_abbb =_aeed (_abbb );var _agc []byte ;var _eged int ;for _fde :=1;_fde < len (_abbb );_fde ++{if _edd .Rows > 0&&!_edd .EndOfBlock &&_fde ==(_edd .Rows +1){break ;};var _dbff []byte ;var _ecfd ,_afa ,_gbga int ;_bbbc :=_eged ;_dgg :=-1;
for _dgg < len (_abbb [_fde ]){_ecfd =_gdd (_abbb [_fde ],_dgg );_afa =_fcf (_abbb [_fde ],_abbb [_fde -1],_dgg );_gbga =_gdd (_abbb [_fde -1],_afa );if _gbga < _ecfd {_dbff ,_bbbc =_beg (_dbff ,_bbbc ,_g );_dgg =_gbga ;}else {if _a .Abs (float64 (_afa -_ecfd ))> 3{_dbff ,_bbbc ,_dgg =_agf (_abbb [_fde ],_dbff ,_bbbc ,_dgg ,_ecfd );
}else {_dbff ,_bbbc =_cdffg (_dbff ,_bbbc ,_ecfd ,_afa );_dgg =_ecfd ;};};};_agc =_edd .appendEncodedRow (_agc ,_dbff ,_eged );if _edd .EncodedByteAlign {_bbbc =0;};_eged =_bbbc %8;};if _edd .EndOfBlock {_ggda ,_ :=_abf (_eged );_agc =_edd .appendEncodedRow (_agc ,_ggda ,_eged );
};return _agc ;};func _af (_ffb uint16 ,_bge int )byte {if _bge < 8{_ffb >>=8;};_bge %=8;_fb :=byte (0x01<<(7-uint (_bge )));return (byte (_ffb )&_fb )>>(7-uint (_bge ));};func _adaf (_acc []byte ,_cee int )(bool ,int ){return _fda (_acc ,_cee ,_cb )};
func (_eabd *Encoder )appendEncodedRow (_fcaf ,_ebc []byte ,_agca int )[]byte {if len (_fcaf )> 0&&_agca !=0&&!_eabd .EncodedByteAlign {_fcaf [len (_fcaf )-1]=_fcaf [len (_fcaf )-1]|_ebc [0];_fcaf =append (_fcaf ,_ebc [1:]...);}else {_fcaf =append (_fcaf ,_ebc ...);
};return _fcaf ;};func _eacd (_bbe uint16 ,_aae int )(code ,bool ){_ ,_fcd :=_dga (_bc ,_bbe ,_aae );if _fcd ==nil {return code {},false ;};return *_fcd ,true ;};func _ca (_fec [][]byte ,_be []byte ,_babe bool ,_ggee int )([]byte ,int ){_gcbc :=_caf (_be ,_fec [len (_fec )-1],_ggee ,_babe );
_gfd :=_gdd (_fec [len (_fec )-1],_gcbc );if _ggee ==-1{_be =_caa (_be ,_babe ,_gfd -_ggee -1);}else {_be =_caa (_be ,_babe ,_gfd -_ggee );};_ggee =_gfd ;return _be ,_ggee ;};func _eea (_efg []byte ,_agdbg int ,_eca code )([]byte ,int ){_cgg :=true ;var _geg []byte ;
_geg ,_agdbg =_beg (nil ,_agdbg ,_eca );_afd :=0;var _bdd int ;for _afd < len (_efg ){_bdd ,_afd =_gba (_efg ,_cgg ,_afd );_geg ,_agdbg =_bca (_geg ,_agdbg ,_bdd ,_cgg );_cgg =!_cgg ;};return _geg ,_agdbg %8;};func _fag (_ggb []byte ,_gfbg int )(code ,int ,bool ){var (_ecb uint16 ;
_ccf int ;_ef int ;);_ef =_gfbg ;_ecb ,_ccf ,_ =_bbb (_ggb ,_gfbg );_bce ,_adg :=_eacd (_ecb ,_ccf );if !_adg {return code {},_ef ,false ;};return _bce ,_ef +_bce .BitsWritten ,true ;};var (_eg map[int ]code ;_b map[int ]code ;_ff map[int ]code ;_fa map[int ]code ;
_ee map[int ]code ;_fae map[int ]byte ;_d =code {Code :1<<4,BitsWritten :12};_cb =code {Code :3<<3,BitsWritten :13};_ffa =code {Code :2<<3,BitsWritten :13};_g =code {Code :1<<12,BitsWritten :4};_dd =code {Code :1<<13,BitsWritten :3};_bb =code {Code :1<<15,BitsWritten :1};
_cc =code {Code :3<<13,BitsWritten :3};_ad =code {Code :3<<10,BitsWritten :6};_dg =code {Code :3<<9,BitsWritten :7};_ffe =code {Code :2<<13,BitsWritten :3};_fc =code {Code :2<<10,BitsWritten :6};_ed =code {Code :2<<9,BitsWritten :7};);func _bca (_fefg []byte ,_fbf int ,_gee int ,_gce bool )([]byte ,int ){var (_gaf code ;
_cgd bool ;);for !_cgd {_gaf ,_gee ,_cgd =_cbe (_gee ,_gce );_fefg ,_fbf =_beg (_fefg ,_fbf ,_gaf );};return _fefg ,_fbf ;};func (_egb *Encoder )Decode (encoded []byte )([][]byte ,error ){if _egb .BlackIs1 {_afb =0;_dfd =1;}else {_afb =1;_dfd =0;};if _egb .K ==0{return _egb .decodeG31D (encoded );
};if _egb .K > 0{return _egb .decodeG32D (encoded );};if _egb .K < 4{return _egb .decodeG4 (encoded );};return nil ,nil ;};func _aff (_bda *decodingTreeNode ,_eda code ,_bee int ,_gecf int ){_fcgc :=_af (_eda .Code ,_bee );_bee ++;if _fcgc ==1{if _bda .Right ==nil {_bda .Right =&decodingTreeNode {Val :_fcgc };
};if _bee ==_eda .BitsWritten {_bda .Right .RunLen =&_gecf ;_bda .Right .Code =&_eda ;}else {_aff (_bda .Right ,_eda ,_bee ,_gecf );};}else {if _bda .Left ==nil {_bda .Left =&decodingTreeNode {Val :_fcgc };};if _bee ==_eda .BitsWritten {_bda .Left .RunLen =&_gecf ;
_bda .Left .Code =&_eda ;}else {_aff (_bda .Left ,_eda ,_bee ,_gecf );};};};func _dbee (_fcg []byte ,_bgg int )(bool ,int ,error ){_fce :=_bgg ;var _cce bool ;_cce ,_bgg =_dbea (_fcg ,_bgg );if _cce {_cce ,_bgg =_dbea (_fcg ,_bgg );if _cce {return true ,_bgg ,nil ;
};return false ,_fce ,_fab ;};return false ,_fce ,nil ;};func (_cg *Encoder )decodeG4 (_aag []byte )([][]byte ,error ){_acf :=make ([]byte ,_cg .Columns );for _cfg :=range _acf {_acf [_cfg ]=_afb ;};_ddae :=make ([][]byte ,1);_ddae [0]=_acf ;var (_ada bool ;
_eggb error ;_eb int ;);for (_eb /8)< len (_aag ){_ada ,_eb ,_eggb =_dbee (_aag ,_eb );if _eggb !=nil {return nil ,_eggb ;};if _ada {break ;};var (_gfb code ;_de bool ;);_fcc :=true ;var _bg []byte ;_gfc :=-1;_feb :=true ;for _gfc < _cg .Columns {_gfb ,_eb ,_de =_fag (_aag ,_eb );
if !_de {_e .Log .Warning ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u0063i\u0074\u0074\u0066a\u0078:\u0020\u0025\u0076",_egg );_feb =false ;break ;};switch _gfb {case _g :_bg ,_gfc =_ca (_ddae ,_bg ,_fcc ,_gfc );
case _dd :_bg ,_eb ,_gfc ,_eggb =_febf (_aag ,_bg ,_eb ,_fcc ,_gfc );if _eggb !=nil {_e .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064i\u006e\u0067\u0020\u0063c\u0069\u0074\u0074\u0066\u0061\u0078\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020\u006d\u006f\u0064\u0065\u003a\u0020\u0025\u0076",_eggb );
_feb =false ;break ;};case _bb :_bg ,_gfc =_dbg (_ddae ,_bg ,_fcc ,_gfc ,0);_fcc =!_fcc ;case _cc :_bg ,_gfc =_dbg (_ddae ,_bg ,_fcc ,_gfc ,1);_fcc =!_fcc ;case _ad :_bg ,_gfc =_dbg (_ddae ,_bg ,_fcc ,_gfc ,2);_fcc =!_fcc ;case _dg :_bg ,_gfc =_dbg (_ddae ,_bg ,_fcc ,_gfc ,3);
_fcc =!_fcc ;case _ffe :_bg ,_gfc =_dbg (_ddae ,_bg ,_fcc ,_gfc ,-1);_fcc =!_fcc ;case _fc :_bg ,_gfc =_dbg (_ddae ,_bg ,_fcc ,_gfc ,-2);_fcc =!_fcc ;case _ed :_bg ,_gfc =_dbg (_ddae ,_bg ,_fcc ,_gfc ,-3);_fcc =!_fcc ;};if len (_bg )>=_cg .Columns {break ;
};};if !_feb {_eb +=8-_eb %8;continue ;};if _cg .EncodedByteAlign &&_eb %8!=0{_eb +=8-_eb %8;};_ddae =append (_ddae ,_bg );if _cg .Rows > 0&&!_cg .EndOfBlock &&len (_ddae )>=(_cg .Rows +1){break ;};};_ddae =_ddae [1:];return _ddae ,nil ;};func _fda (_baf []byte ,_fef int ,_bd code )(bool ,int ){_acd :=_fef ;
var (_faba uint16 ;_efe int ;);_faba ,_efe ,_fef =_bbb (_baf ,_fef );if _efe > 3{return false ,_acd ;};_faba >>=uint (3-_efe );_faba <<=3;if _faba !=_bd .Code {return false ,_acd ;};return true ,_fef -3+_efe ;};func _aee (_cfa []byte ,_bged int )(bool ,int ){return _fda (_cfa ,_bged ,_ffa )};
type code struct{Code uint16 ;BitsWritten int ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};var (_fab =_f .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");
_fg =_f .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_gc =_f .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");
_ea =_f .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_fca =_f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_egg =_f .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _fcf (_fdd ,_dcfb []byte ,_gda int )int {_dba :=_gdd (_dcfb ,_gda );
if _dba < len (_dcfb )&&(_gda ==-1&&_dcfb [_dba ]==_afb ||_gda >=0&&_gda < len (_fdd )&&_fdd [_gda ]==_dcfb [_dba ]||_gda >=len (_fdd )&&_fdd [_gda -1]!=_dcfb [_dba ]){_dba =_gdd (_dcfb ,_dba );};return _dba ;};func _bcda (_cfc int )([]byte ,int ){var _egd []byte ;
for _eeg :=0;_eeg < 6;_eeg ++{_egd ,_cfc =_beg (_egd ,_cfc ,_d );};return _egd ,_cfc %8;};func _dga (_abc *decodingTreeNode ,_fccd uint16 ,_cge int )(*int ,*code ){if _abc ==nil {return nil ,nil ;};if _cge ==16{return _abc .RunLen ,_abc .Code ;};_gbg :=_af (_fccd ,_cge );
_cge ++;var _facd *int ;var _fcdd *code ;if _gbg ==1{_facd ,_fcdd =_dga (_abc .Right ,_fccd ,_cge );}else {_facd ,_fcdd =_dga (_abc .Left ,_fccd ,_cge );};if _facd ==nil {_facd =_abc .RunLen ;_fcdd =_abc .Code ;};return _facd ,_fcdd ;};func (_ffad *Encoder )decodeRow1D (_cgb []byte ,_fgd int )([]byte ,int ){var _gac []byte ;
_cddf :=true ;var _fdc int ;_fdc ,_fgd =_bfe (_cgb ,_fgd ,_cddf );for _fdc !=-1{_gac =_caa (_gac ,_cddf ,_fdc );if _fdc < 64{if len (_gac )>=_ffad .Columns {break ;};_cddf =!_cddf ;};_fdc ,_fgd =_bfe (_cgb ,_fgd ,_cddf );};return _gac ,_fgd ;};func (_faea *Encoder )decodeG31D (_gg []byte )([][]byte ,error ){var _gf [][]byte ;
var _bab int ;for (_bab /8)< len (_gg ){var _cd bool ;_cd ,_bab =_dbea (_gg ,_bab );if !_cd {if _faea .EndOfLine {return nil ,_ea ;};}else {for _ag :=0;_ag < 5;_ag ++{_cd ,_bab =_dbea (_gg ,_bab );if !_cd {if _ag ==0{break ;};return nil ,_fca ;};};if _cd {break ;
};};var _bf []byte ;_bf ,_bab =_faea .decodeRow1D (_gg ,_bab );if _faea .EncodedByteAlign &&_bab %8!=0{_bab +=8-_bab %8;};_gf =append (_gf ,_bf );if _faea .Rows > 0&&!_faea .EndOfBlock &&len (_gf )>=_faea .Rows {break ;};};return _gf ,nil ;};func _gba (_aec []byte ,_cbc bool ,_adda int )(int ,int ){_ddab :=0;
for _adda < len (_aec ){if _cbc {if _aec [_adda ]!=_afb {break ;};}else {if _aec [_adda ]!=_dfd {break ;};};_ddab ++;_adda ++;};return _ddab ,_adda ;};func _bfe (_bcd []byte ,_eac int ,_eab bool )(int ,int ){var (_ge uint16 ;_dcc int ;_adc int ;);_adc =_eac ;
_ge ,_dcc ,_ =_bbb (_bcd ,_eac );_aga ,_baba :=_bcb (_ge ,_dcc ,_eab );if _aga ==-1{return -1,_adc ;};return _aga ,_adc +_baba .BitsWritten ;};func (_cdb *Encoder )decodeG32D (_ggd []byte )([][]byte ,error ){var (_bba [][]byte ;_dc int ;_fad error ;);_gge :for (_dc /8)< len (_ggd ){var _faeb bool ;
_faeb ,_dc ,_fad =_agb (_ggd ,_dc );if _fad !=nil {return nil ,_fad ;};if _faeb {break ;};_faeb ,_dc =_adaf (_ggd ,_dc );if !_faeb {if _cdb .EndOfLine {return nil ,_ea ;};};var _ec []byte ;_ec ,_dc =_cdb .decodeRow1D (_ggd ,_dc );if _cdb .EncodedByteAlign &&_dc %8!=0{_dc +=8-_dc %8;
};if _ec !=nil {_bba =append (_bba ,_ec );};if _cdb .Rows > 0&&!_cdb .EndOfBlock &&len (_bba )>=_cdb .Rows {break ;};for _fd :=1;_fd < _cdb .K &&(_dc /8)< len (_ggd );_fd ++{_faeb ,_dc =_aee (_ggd ,_dc );if !_faeb {_faeb ,_dc ,_fad =_agb (_ggd ,_dc );if _fad !=nil {return nil ,_fad ;
};if _faeb {break _gge ;}else {if _cdb .EndOfLine {return nil ,_ea ;};};};var (_cf code ;_bad bool ;);_cdd :=true ;var _gbb []byte ;_dce :=-1;for _cf ,_dc ,_bad =_fag (_ggd ,_dc );_bad ;_cf ,_dc ,_bad =_fag (_ggd ,_dc ){switch _cf {case _g :_gbb ,_dce =_ca (_bba ,_gbb ,_cdd ,_dce );
case _dd :_gbb ,_dc ,_dce ,_fad =_febf (_ggd ,_gbb ,_dc ,_cdd ,_dce );if _fad !=nil {return nil ,_fad ;};case _bb :_gbb ,_dce =_dbg (_bba ,_gbb ,_cdd ,_dce ,0);_cdd =!_cdd ;case _cc :_gbb ,_dce =_dbg (_bba ,_gbb ,_cdd ,_dce ,1);_cdd =!_cdd ;case _ad :_gbb ,_dce =_dbg (_bba ,_gbb ,_cdd ,_dce ,2);
_cdd =!_cdd ;case _dg :_gbb ,_dce =_dbg (_bba ,_gbb ,_cdd ,_dce ,3);_cdd =!_cdd ;case _ffe :_gbb ,_dce =_dbg (_bba ,_gbb ,_cdd ,_dce ,-1);_cdd =!_cdd ;case _fc :_gbb ,_dce =_dbg (_bba ,_gbb ,_cdd ,_dce ,-2);_cdd =!_cdd ;case _ed :_gbb ,_dce =_dbg (_bba ,_gbb ,_cdd ,_dce ,-3);
_cdd =!_cdd ;};if len (_gbb )>=_cdb .Columns {break ;};};if _cdb .EncodedByteAlign &&_dc %8!=0{_dc +=8-_dc %8;};if _gbb !=nil {_bba =append (_bba ,_gbb );};if _cdb .Rows > 0&&!_cdb .EndOfBlock &&len (_bba )>=_cdb .Rows {break _gge ;};};};return _bba ,nil ;
};func _gdd (_efge []byte ,_bgc int )int {if _bgc >=len (_efge ){return _bgc ;};if _bgc < -1{_bgc =-1;};var _beb byte ;if _bgc > -1{_beb =_efge [_bgc ];}else {_beb =_afb ;};_dgga :=_bgc +1;for _dgga < len (_efge ){if _efge [_dgga ]!=_beb {break ;};_dgga ++;
};return _dgga ;};func (_fga *Encoder )Encode (pixels [][]byte )[]byte {if _fga .BlackIs1 {_afb =0;_dfd =1;}else {_afb =1;_dfd =0;};if _fga .K ==0{return _fga .encodeG31D (pixels );};if _fga .K > 0{return _fga .encodeG32D (pixels );};if _fga .K < 0{return _fga .encodeG4 (pixels );
};return nil ;};func _bcb (_fgf uint16 ,_dcf int ,_ecc bool )(int ,code ){var _dcg *int ;var _gfcd *code ;if _ecc {_dcg ,_gfcd =_dga (_dda ,_fgf ,_dcf );}else {_dcg ,_gfcd =_dga (_fe ,_fgf ,_dcf );};if _dcg ==nil {return -1,code {};};return *_dcg ,*_gfcd ;
};func _cdffg (_ceb []byte ,_bgfg ,_gcbd ,_dggae int )([]byte ,int ){_cbed :=_gcee (_gcbd ,_dggae );_ceb ,_bgfg =_beg (_ceb ,_bgfg ,_cbed );return _ceb ,_bgfg ;};func _agb (_dde []byte ,_bfc int )(bool ,int ,error ){_cdf :=_bfc ;var _cdfa =false ;for _dfe :=0;
_dfe < 6;_dfe ++{_cdfa ,_bfc =_adaf (_dde ,_bfc );if !_cdfa {if _dfe > 1{return false ,_cdf ,_fg ;};_bfc =_cdf ;break ;};};return _cdfa ,_bfc ,nil ;};func _febf (_eeb ,_ggeg []byte ,_cae int ,_faa bool ,_gbc int )([]byte ,int ,int ,error ){_ecf :=_cae ;
var _ga error ;_ggeg ,_cae ,_ga =_fac (_eeb ,_ggeg ,_cae ,_faa );if _ga !=nil {return _ggeg ,_ecf ,_gbc ,_ga ;};_faa =!_faa ;_ggeg ,_cae ,_ga =_fac (_eeb ,_ggeg ,_cae ,_faa );if _ga !=nil {return _ggeg ,_ecf ,_gbc ,_ga ;};_gbc =len (_ggeg );return _ggeg ,_cae ,_gbc ,nil ;
};func _beg (_adf []byte ,_egef int ,_egc code )([]byte ,int ){_ddeg :=0;for _ddeg < _egc .BitsWritten {_cegf :=_egef /8;_cddd :=_egef %8;if _cegf >=len (_adf ){_adf =append (_adf ,0);};_ddec :=8-_cddd ;_gcdb :=_egc .BitsWritten -_ddeg ;if _ddec > _gcdb {_ddec =_gcdb ;
};if _ddeg < 8{_adf [_cegf ]=_adf [_cegf ]|byte (_egc .Code >>uint (8+_cddd -_ddeg ))&_fae [8-_ddec -_cddd ];}else {_adf [_cegf ]=_adf [_cegf ]|(byte (_egc .Code <<uint (_ddeg -8))&_fae [8-_ddec ])>>uint (_cddd );};_egef +=_ddec ;_ddeg +=_ddec ;};return _adf ,_egef ;
};var (_dda =&decodingTreeNode {Val :255};_fe =&decodingTreeNode {Val :255};_bc =&decodingTreeNode {Val :255};);func _aeed (_gdbgb [][]byte )[][]byte {_bcdd :=make ([]byte ,len (_gdbgb [0]));for _fdae :=range _bcdd {_bcdd [_fdae ]=_afb ;};_gdbgb =append (_gdbgb ,[]byte {});
for _fggg :=len (_gdbgb )-1;_fggg > 0;_fggg --{_gdbgb [_fggg ]=_gdbgb [_fggg -1];};_gdbgb [0]=_bcdd ;return _gdbgb ;};func _fac (_fgb ,_cfb []byte ,_cac int ,_eaf bool )([]byte ,int ,error ){_aac :=_cac ;var _ce int ;for _ce ,_cac =_bfe (_fgb ,_cac ,_eaf );
_ce !=-1;_ce ,_cac =_bfe (_fgb ,_cac ,_eaf ){_cfb =_caa (_cfb ,_eaf ,_ce );if _ce < 64{break ;};};if _ce ==-1{return _cfb ,_aac ,_gc ;};return _cfb ,_cac ,nil ;};var (_afb byte =1;_dfd byte =0;);func _ccd (_caed []byte ,_gdaa int )([]byte ,int ){return _beg (_caed ,_gdaa ,_g )};
func _abf (_ceab int )([]byte ,int ){var _gcbcc []byte ;for _ecg :=0;_ecg < 2;_ecg ++{_gcbcc ,_ceab =_beg (_gcbcc ,_ceab ,_d );};return _gcbcc ,_ceab %8;};func _caa (_gec []byte ,_bcf bool ,_dbd int )[]byte {if _dbd < 0{return _gec ;};_cca :=make ([]byte ,_dbd );
if _bcf {for _gdb :=0;_gdb < len (_cca );_gdb ++{_cca [_gdb ]=_afb ;};}else {for _ccc :=0;_ccc < len (_cca );_ccc ++{_cca [_ccc ]=_dfd ;};};_gec =append (_gec ,_cca ...);return _gec ;};func _caf (_acfb ,_dbgc []byte ,_dgc int ,_ggc bool )int {_cgf :=_gdd (_dbgc ,_dgc );
if _cgf < len (_dbgc )&&(_dgc ==-1&&_dbgc [_cgf ]==_afb ||_dgc >=0&&_dgc < len (_acfb )&&_acfb [_dgc ]==_dbgc [_cgf ]||_dgc >=len (_acfb )&&_ggc &&_dbgc [_cgf ]==_afb ||_dgc >=len (_acfb )&&!_ggc &&_dbgc [_cgf ]==_dfd ){_cgf =_gdd (_dbgc ,_cgf );};return _cgf ;
};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _dbea (_gca []byte ,_gdf int )(bool ,int ){_fdg :=_gdf ;var (_dge uint16 ;_fagf int ;);_dge ,_fagf ,_gdf =_bbb (_gca ,_gdf );
if _fagf > 4{return false ,_fdg ;};_dge >>=uint (4-_fagf );_dge <<=4;if _dge !=_d .Code {return false ,_fdg ;};return true ,_gdf -4+_fagf ;};func _gcee (_ecba ,_agfg int )code {var _fgbe code ;switch _agfg -_ecba {case -1:_fgbe =_cc ;case -2:_fgbe =_ad ;
case -3:_fgbe =_dg ;case 0:_fgbe =_bb ;case 1:_fgbe =_ffe ;case 2:_fgbe =_fc ;case 3:_fgbe =_ed ;};return _fgbe ;};func (_cdfc *Encoder )encodeG31D (_dbf [][]byte )[]byte {var _dfee []byte ;_faf :=0;for _bga :=range _dbf {if _cdfc .Rows > 0&&!_cdfc .EndOfBlock &&_bga ==_cdfc .Rows {break ;
};_abb ,_abcb :=_eea (_dbf [_bga ],_faf ,_d );_dfee =_cdfc .appendEncodedRow (_dfee ,_abb ,_faf );if _cdfc .EncodedByteAlign {_abcb =0;};_faf =_abcb ;};if _cdfc .EndOfBlock {_fgg ,_ :=_bcda (_faf );_dfee =_cdfc .appendEncodedRow (_dfee ,_fgg ,_faf );};
return _dfee ;};func _dbg (_df [][]byte ,_agd []byte ,_ae bool ,_edc ,_gfg int )([]byte ,int ){_ddd :=_caf (_agd ,_df [len (_df )-1],_edc ,_ae );_gbbe :=_ddd +_gfg ;if _edc ==-1{_agd =_caa (_agd ,_ae ,_gbbe -_edc -1);}else {_agd =_caa (_agd ,_ae ,_gbbe -_edc );
};_edc =_gbbe ;return _agd ,_edc ;};