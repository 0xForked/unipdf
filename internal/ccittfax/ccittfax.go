//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_d "errors";_cf "github.com/unidoc/unipdf/v3/common";_b "math";);func _gga (_ggg []byte ,_cca bool ,_fge int )[]byte {if _fge < 0{return _ggg ;};_bcb :=make ([]byte ,_fge );if _cca {for _gee :=0;_gee < len (_bcb );_gee ++{_bcb [_gee ]=_cga ;
};}else {for _bed :=0;_bed < len (_bcb );_bed ++{_bcb [_bed ]=_cgb ;};};_ggg =append (_ggg ,_bcb ...);return _ggg ;};func _gda (_gf [][]byte ,_bgb []byte ,_fea bool ,_aee ,_ffb int )([]byte ,int ){_eca :=_bgc (_bgb ,_gf [len (_gf )-1],_aee ,_fea );_bda :=_eca +_ffb ;
if _aee ==-1{_bgb =_gga (_bgb ,_fea ,_bda -_aee -1);}else {_bgb =_gga (_bgb ,_fea ,_bda -_aee );};_aee =_bda ;return _bgb ,_aee ;};func init (){_e =make (map[int ]code );_e [0]=code {Code :13<<8|3<<6,BitsWritten :10};_e [1]=code {Code :2<<(5+8),BitsWritten :3};
_e [2]=code {Code :3<<(6+8),BitsWritten :2};_e [3]=code {Code :2<<(6+8),BitsWritten :2};_e [4]=code {Code :3<<(5+8),BitsWritten :3};_e [5]=code {Code :3<<(4+8),BitsWritten :4};_e [6]=code {Code :2<<(4+8),BitsWritten :4};_e [7]=code {Code :3<<(3+8),BitsWritten :5};
_e [8]=code {Code :5<<(2+8),BitsWritten :6};_e [9]=code {Code :4<<(2+8),BitsWritten :6};_e [10]=code {Code :4<<(1+8),BitsWritten :7};_e [11]=code {Code :5<<(1+8),BitsWritten :7};_e [12]=code {Code :7<<(1+8),BitsWritten :7};_e [13]=code {Code :4<<8,BitsWritten :8};
_e [14]=code {Code :7<<8,BitsWritten :8};_e [15]=code {Code :12<<8,BitsWritten :9};_e [16]=code {Code :5<<8|3<<6,BitsWritten :10};_e [17]=code {Code :6<<8,BitsWritten :10};_e [18]=code {Code :2<<8,BitsWritten :10};_e [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_e [20]=code {Code :13<<8,BitsWritten :11};_e [21]=code {Code :13<<8|4<<5,BitsWritten :11};_e [22]=code {Code :6<<8|7<<5,BitsWritten :11};_e [23]=code {Code :5<<8,BitsWritten :11};_e [24]=code {Code :2<<8|7<<5,BitsWritten :11};_e [25]=code {Code :3<<8,BitsWritten :11};
_e [26]=code {Code :12<<8|10<<4,BitsWritten :12};_e [27]=code {Code :12<<8|11<<4,BitsWritten :12};_e [28]=code {Code :12<<8|12<<4,BitsWritten :12};_e [29]=code {Code :12<<8|13<<4,BitsWritten :12};_e [30]=code {Code :6<<8|8<<4,BitsWritten :12};_e [31]=code {Code :6<<8|9<<4,BitsWritten :12};
_e [32]=code {Code :6<<8|10<<4,BitsWritten :12};_e [33]=code {Code :6<<8|11<<4,BitsWritten :12};_e [34]=code {Code :13<<8|2<<4,BitsWritten :12};_e [35]=code {Code :13<<8|3<<4,BitsWritten :12};_e [36]=code {Code :13<<8|4<<4,BitsWritten :12};_e [37]=code {Code :13<<8|5<<4,BitsWritten :12};
_e [38]=code {Code :13<<8|6<<4,BitsWritten :12};_e [39]=code {Code :13<<8|7<<4,BitsWritten :12};_e [40]=code {Code :6<<8|12<<4,BitsWritten :12};_e [41]=code {Code :6<<8|13<<4,BitsWritten :12};_e [42]=code {Code :13<<8|10<<4,BitsWritten :12};_e [43]=code {Code :13<<8|11<<4,BitsWritten :12};
_e [44]=code {Code :5<<8|4<<4,BitsWritten :12};_e [45]=code {Code :5<<8|5<<4,BitsWritten :12};_e [46]=code {Code :5<<8|6<<4,BitsWritten :12};_e [47]=code {Code :5<<8|7<<4,BitsWritten :12};_e [48]=code {Code :6<<8|4<<4,BitsWritten :12};_e [49]=code {Code :6<<8|5<<4,BitsWritten :12};
_e [50]=code {Code :5<<8|2<<4,BitsWritten :12};_e [51]=code {Code :5<<8|3<<4,BitsWritten :12};_e [52]=code {Code :2<<8|4<<4,BitsWritten :12};_e [53]=code {Code :3<<8|7<<4,BitsWritten :12};_e [54]=code {Code :3<<8|8<<4,BitsWritten :12};_e [55]=code {Code :2<<8|7<<4,BitsWritten :12};
_e [56]=code {Code :2<<8|8<<4,BitsWritten :12};_e [57]=code {Code :5<<8|8<<4,BitsWritten :12};_e [58]=code {Code :5<<8|9<<4,BitsWritten :12};_e [59]=code {Code :2<<8|11<<4,BitsWritten :12};_e [60]=code {Code :2<<8|12<<4,BitsWritten :12};_e [61]=code {Code :5<<8|10<<4,BitsWritten :12};
_e [62]=code {Code :6<<8|6<<4,BitsWritten :12};_e [63]=code {Code :6<<8|7<<4,BitsWritten :12};_a =make (map[int ]code );_a [0]=code {Code :53<<8,BitsWritten :8};_a [1]=code {Code :7<<(2+8),BitsWritten :6};_a [2]=code {Code :7<<(4+8),BitsWritten :4};_a [3]=code {Code :8<<(4+8),BitsWritten :4};
_a [4]=code {Code :11<<(4+8),BitsWritten :4};_a [5]=code {Code :12<<(4+8),BitsWritten :4};_a [6]=code {Code :14<<(4+8),BitsWritten :4};_a [7]=code {Code :15<<(4+8),BitsWritten :4};_a [8]=code {Code :19<<(3+8),BitsWritten :5};_a [9]=code {Code :20<<(3+8),BitsWritten :5};
_a [10]=code {Code :7<<(3+8),BitsWritten :5};_a [11]=code {Code :8<<(3+8),BitsWritten :5};_a [12]=code {Code :8<<(2+8),BitsWritten :6};_a [13]=code {Code :3<<(2+8),BitsWritten :6};_a [14]=code {Code :52<<(2+8),BitsWritten :6};_a [15]=code {Code :53<<(2+8),BitsWritten :6};
_a [16]=code {Code :42<<(2+8),BitsWritten :6};_a [17]=code {Code :43<<(2+8),BitsWritten :6};_a [18]=code {Code :39<<(1+8),BitsWritten :7};_a [19]=code {Code :12<<(1+8),BitsWritten :7};_a [20]=code {Code :8<<(1+8),BitsWritten :7};_a [21]=code {Code :23<<(1+8),BitsWritten :7};
_a [22]=code {Code :3<<(1+8),BitsWritten :7};_a [23]=code {Code :4<<(1+8),BitsWritten :7};_a [24]=code {Code :40<<(1+8),BitsWritten :7};_a [25]=code {Code :43<<(1+8),BitsWritten :7};_a [26]=code {Code :19<<(1+8),BitsWritten :7};_a [27]=code {Code :36<<(1+8),BitsWritten :7};
_a [28]=code {Code :24<<(1+8),BitsWritten :7};_a [29]=code {Code :2<<8,BitsWritten :8};_a [30]=code {Code :3<<8,BitsWritten :8};_a [31]=code {Code :26<<8,BitsWritten :8};_a [32]=code {Code :27<<8,BitsWritten :8};_a [33]=code {Code :18<<8,BitsWritten :8};
_a [34]=code {Code :19<<8,BitsWritten :8};_a [35]=code {Code :20<<8,BitsWritten :8};_a [36]=code {Code :21<<8,BitsWritten :8};_a [37]=code {Code :22<<8,BitsWritten :8};_a [38]=code {Code :23<<8,BitsWritten :8};_a [39]=code {Code :40<<8,BitsWritten :8};
_a [40]=code {Code :41<<8,BitsWritten :8};_a [41]=code {Code :42<<8,BitsWritten :8};_a [42]=code {Code :43<<8,BitsWritten :8};_a [43]=code {Code :44<<8,BitsWritten :8};_a [44]=code {Code :45<<8,BitsWritten :8};_a [45]=code {Code :4<<8,BitsWritten :8};_a [46]=code {Code :5<<8,BitsWritten :8};
_a [47]=code {Code :10<<8,BitsWritten :8};_a [48]=code {Code :11<<8,BitsWritten :8};_a [49]=code {Code :82<<8,BitsWritten :8};_a [50]=code {Code :83<<8,BitsWritten :8};_a [51]=code {Code :84<<8,BitsWritten :8};_a [52]=code {Code :85<<8,BitsWritten :8};
_a [53]=code {Code :36<<8,BitsWritten :8};_a [54]=code {Code :37<<8,BitsWritten :8};_a [55]=code {Code :88<<8,BitsWritten :8};_a [56]=code {Code :89<<8,BitsWritten :8};_a [57]=code {Code :90<<8,BitsWritten :8};_a [58]=code {Code :91<<8,BitsWritten :8};
_a [59]=code {Code :74<<8,BitsWritten :8};_a [60]=code {Code :75<<8,BitsWritten :8};_a [61]=code {Code :50<<8,BitsWritten :8};_a [62]=code {Code :51<<8,BitsWritten :8};_a [63]=code {Code :52<<8,BitsWritten :8};_aa =make (map[int ]code );_aa [64]=code {Code :3<<8|3<<6,BitsWritten :10};
_aa [128]=code {Code :12<<8|8<<4,BitsWritten :12};_aa [192]=code {Code :12<<8|9<<4,BitsWritten :12};_aa [256]=code {Code :5<<8|11<<4,BitsWritten :12};_aa [320]=code {Code :3<<8|3<<4,BitsWritten :12};_aa [384]=code {Code :3<<8|4<<4,BitsWritten :12};_aa [448]=code {Code :3<<8|5<<4,BitsWritten :12};
_aa [512]=code {Code :3<<8|12<<3,BitsWritten :13};_aa [576]=code {Code :3<<8|13<<3,BitsWritten :13};_aa [640]=code {Code :2<<8|10<<3,BitsWritten :13};_aa [704]=code {Code :2<<8|11<<3,BitsWritten :13};_aa [768]=code {Code :2<<8|12<<3,BitsWritten :13};_aa [832]=code {Code :2<<8|13<<3,BitsWritten :13};
_aa [896]=code {Code :3<<8|18<<3,BitsWritten :13};_aa [960]=code {Code :3<<8|19<<3,BitsWritten :13};_aa [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_aa [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_aa [1152]=code {Code :3<<8|22<<3,BitsWritten :13};
_aa [1216]=code {Code :119<<3,BitsWritten :13};_aa [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_aa [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_aa [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_aa [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_aa [1536]=code {Code :2<<8|26<<3,BitsWritten :13};
_aa [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_aa [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_aa [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_f =make (map[int ]code );_f [64]=code {Code :27<<(3+8),BitsWritten :5};_f [128]=code {Code :18<<(3+8),BitsWritten :5};
_f [192]=code {Code :23<<(2+8),BitsWritten :6};_f [256]=code {Code :55<<(1+8),BitsWritten :7};_f [320]=code {Code :54<<8,BitsWritten :8};_f [384]=code {Code :55<<8,BitsWritten :8};_f [448]=code {Code :100<<8,BitsWritten :8};_f [512]=code {Code :101<<8,BitsWritten :8};
_f [576]=code {Code :104<<8,BitsWritten :8};_f [640]=code {Code :103<<8,BitsWritten :8};_f [704]=code {Code :102<<8,BitsWritten :9};_f [768]=code {Code :102<<8|1<<7,BitsWritten :9};_f [832]=code {Code :105<<8,BitsWritten :9};_f [896]=code {Code :105<<8|1<<7,BitsWritten :9};
_f [960]=code {Code :106<<8,BitsWritten :9};_f [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_f [1088]=code {Code :107<<8,BitsWritten :9};_f [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_f [1216]=code {Code :108<<8,BitsWritten :9};_f [1280]=code {Code :108<<8|1<<7,BitsWritten :9};
_f [1344]=code {Code :109<<8,BitsWritten :9};_f [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_f [1472]=code {Code :76<<8,BitsWritten :9};_f [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_f [1600]=code {Code :77<<8,BitsWritten :9};_f [1664]=code {Code :24<<(2+8),BitsWritten :6};
_f [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_de =make (map[int ]code );_de [1792]=code {Code :1<<8,BitsWritten :11};_de [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_de [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_de [1984]=code {Code :1<<8|2<<4,BitsWritten :12};
_de [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_de [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_de [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_de [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_de [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_de [2368]=code {Code :1<<8|12<<4,BitsWritten :12};
_de [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_de [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_de [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_g =make (map[int ]byte );_g [0]=0xFF;_g [1]=0xFE;_g [2]=0xFC;_g [3]=0xF8;_g [4]=0xF0;_g [5]=0xE0;_g [6]=0xC0;
_g [7]=0x80;_g [8]=0x00;};func _dgfg (_dbb []byte ,_eeb int )int {if _eeb >=len (_dbb ){return _eeb ;};if _eeb < -1{_eeb =-1;};var _eef byte ;if _eeb > -1{_eef =_dbb [_eeb ];}else {_eef =_cga ;};_ffc :=_eeb +1;for _ffc < len (_dbb ){if _dbb [_ffc ]!=_eef {break ;
};_ffc ++;};return _ffc ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func init (){for _age ,_ed :=range _a {_fgg (_bde ,_ed ,0,_age );};for _dfc ,_ea :=range _f {_fgg (_bde ,_ea ,0,_dfc );
};for _ead ,_gd :=range _e {_fgg (_df ,_gd ,0,_ead );};for _ac ,_da :=range _aa {_fgg (_df ,_da ,0,_ac );};for _gg ,_cfc :=range _de {_fgg (_bde ,_cfc ,0,_gg );_fgg (_df ,_cfc ,0,_gg );};_fgg (_fb ,_fe ,0,0);_fgg (_fb ,_afc ,0,0);_fgg (_fb ,_cb ,0,0);_fgg (_fb ,_bb ,0,0);
_fgg (_fb ,_ge ,0,0);_fgg (_fb ,_dee ,0,0);_fgg (_fb ,_db ,0,0);_fgg (_fb ,_aac ,0,0);_fgg (_fb ,_fd ,0,0);};func _afe (_adcgb int )([]byte ,int ){var _gdf []byte ;for _ddc :=0;_ddc < 2;_ddc ++{_gdf ,_adcgb =_fbf (_gdf ,_adcgb ,_af );};return _gdf ,_adcgb %8;
};func _badf (_fec ,_gbb []byte ,_adb ,_dggg ,_aff int )([]byte ,int ,int ){_fgfg :=_dgfg (_fec ,_aff );_dab :=_dggg >=0&&_fec [_dggg ]==_cga ||_dggg ==-1;_gbb ,_adb =_fbf (_gbb ,_adb ,_afc );var _becg int ;if _dggg > -1{_becg =_aff -_dggg ;}else {_becg =_aff -_dggg -1;
};_gbb ,_adb =_efb (_gbb ,_adb ,_becg ,_dab );_dab =!_dab ;_gca :=_fgfg -_aff ;_gbb ,_adb =_efb (_gbb ,_adb ,_gca ,_dab );_dggg =_fgfg ;return _gbb ,_adb ,_dggg ;};func _cee (_caa uint16 ,_bcc int )(code ,bool ){_ ,_dce :=_ggb (_fb ,_caa ,_bcc );if _dce ==nil {return code {},false ;
};return *_dce ,true ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _fbf (_ccbf []byte ,_agf int ,_efc code )([]byte ,int ){_dca :=0;for _dca < _efc .BitsWritten {_egfb :=_agf /8;
_cgd :=_agf %8;if _egfb >=len (_ccbf ){_ccbf =append (_ccbf ,0);};_bfb :=8-_cgd ;_cac :=_efc .BitsWritten -_dca ;if _bfb > _cac {_bfb =_cac ;};if _dca < 8{_ccbf [_egfb ]=_ccbf [_egfb ]|byte (_efc .Code >>uint (8+_cgd -_dca ))&_g [8-_bfb -_cgd ];}else {_ccbf [_egfb ]=_ccbf [_egfb ]|(byte (_efc .Code <<uint (_dca -8))&_g [8-_bfb ])>>uint (_cgd );
};_agf +=_bfb ;_dca +=_bfb ;};return _ccbf ,_agf ;};var (_e map[int ]code ;_a map[int ]code ;_aa map[int ]code ;_f map[int ]code ;_de map[int ]code ;_g map[int ]byte ;_af =code {Code :1<<4,BitsWritten :12};_ab =code {Code :3<<3,BitsWritten :13};_aaf =code {Code :2<<3,BitsWritten :13};
_fe =code {Code :1<<12,BitsWritten :4};_afc =code {Code :1<<13,BitsWritten :3};_cb =code {Code :1<<15,BitsWritten :1};_bb =code {Code :3<<13,BitsWritten :3};_ge =code {Code :3<<10,BitsWritten :6};_dee =code {Code :3<<9,BitsWritten :7};_db =code {Code :2<<13,BitsWritten :3};
_aac =code {Code :2<<10,BitsWritten :6};_fd =code {Code :2<<9,BitsWritten :7};);func _cbd (_dgg []byte ,_aeed int )(bool ,int ,error ){_acc :=_aeed ;var _dde =false ;for _aga :=0;_aga < 6;_aga ++{_dde ,_aeed =_bcaa (_dgg ,_aeed );if !_dde {if _aga > 1{return false ,_acc ,_bc ;
};_aeed =_acc ;break ;};};return _dde ,_aeed ,nil ;};func _fgg (_bded *decodingTreeNode ,_adcg code ,_bdd int ,_baa int ){_add :=_cc (_adcg .Code ,_bdd );_bdd ++;if _add ==1{if _bded .Right ==nil {_bded .Right =&decodingTreeNode {Val :_add };};if _bdd ==_adcg .BitsWritten {_bded .Right .RunLen =&_baa ;
_bded .Right .Code =&_adcg ;}else {_fgg (_bded .Right ,_adcg ,_bdd ,_baa );};}else {if _bded .Left ==nil {_bded .Left =&decodingTreeNode {Val :_add };};if _bdd ==_adcg .BitsWritten {_bded .Left .RunLen =&_baa ;_bded .Left .Code =&_adcg ;}else {_fgg (_bded .Left ,_adcg ,_bdd ,_baa );
};};};func (_bdab *Encoder )Encode (pixels [][]byte )[]byte {if _bdab .BlackIs1 {_cga =0;_cgb =1;}else {_cga =1;_cgb =0;};if _bdab .K ==0{return _bdab .encodeG31D (pixels );};if _bdab .K > 0{return _bdab .encodeG32D (pixels );};if _bdab .K < 0{return _bdab .encodeG4 (pixels );
};return nil ;};func _cge (_daf ,_dedg []byte ,_gcc int )int {_bgd :=_dgfg (_dedg ,_gcc );if _bgd < len (_dedg )&&(_gcc ==-1&&_dedg [_bgd ]==_cga ||_gcc >=0&&_gcc < len (_daf )&&_daf [_gcc ]==_dedg [_bgd ]||_gcc >=len (_daf )&&_daf [_gcc -1]!=_dedg [_bgd ]){_bgd =_dgfg (_dedg ,_bgd );
};return _bgd ;};func (_bg *Encoder )decodeG32D (_ecc []byte )([][]byte ,error ){var (_ad [][]byte ;_aacc int ;_cd error ;);_dgf :for (_aacc /8)< len (_ecc ){var _ceb bool ;_ceb ,_aacc ,_cd =_cbd (_ecc ,_aacc );if _cd !=nil {return nil ,_cd ;};if _ceb {break ;
};_ceb ,_aacc =_bcaa (_ecc ,_aacc );if !_ceb {if _bg .EndOfLine {return nil ,_feg ;};};var _bgf []byte ;_bgf ,_aacc =_bg .decodeRow1D (_ecc ,_aacc );if _bg .EncodedByteAlign &&_aacc %8!=0{_aacc +=8-_aacc %8;};if _bgf !=nil {_ad =append (_ad ,_bgf );};if _bg .Rows > 0&&!_bg .EndOfBlock &&len (_ad )>=_bg .Rows {break ;
};for _dbg :=1;_dbg < _bg .K &&(_aacc /8)< len (_ecc );_dbg ++{_ceb ,_aacc =_afb (_ecc ,_aacc );if !_ceb {_ceb ,_aacc ,_cd =_cbd (_ecc ,_aacc );if _cd !=nil {return nil ,_cd ;};if _ceb {break _dgf ;}else {if _bg .EndOfLine {return nil ,_feg ;};};};var (_dfa code ;
_ae bool ;);_fa :=true ;var _eadg []byte ;_bbc :=-1;for _dfa ,_aacc ,_ae =_abe (_ecc ,_aacc );_ae ;_dfa ,_aacc ,_ae =_abe (_ecc ,_aacc ){switch _dfa {case _fe :_eadg ,_bbc =_def (_ad ,_eadg ,_fa ,_bbc );case _afc :_eadg ,_aacc ,_bbc ,_cd =_fff (_ecc ,_eadg ,_aacc ,_fa ,_bbc );
if _cd !=nil {return nil ,_cd ;};case _cb :_eadg ,_bbc =_gda (_ad ,_eadg ,_fa ,_bbc ,0);_fa =!_fa ;case _bb :_eadg ,_bbc =_gda (_ad ,_eadg ,_fa ,_bbc ,1);_fa =!_fa ;case _ge :_eadg ,_bbc =_gda (_ad ,_eadg ,_fa ,_bbc ,2);_fa =!_fa ;case _dee :_eadg ,_bbc =_gda (_ad ,_eadg ,_fa ,_bbc ,3);
_fa =!_fa ;case _db :_eadg ,_bbc =_gda (_ad ,_eadg ,_fa ,_bbc ,-1);_fa =!_fa ;case _aac :_eadg ,_bbc =_gda (_ad ,_eadg ,_fa ,_bbc ,-2);_fa =!_fa ;case _fd :_eadg ,_bbc =_gda (_ad ,_eadg ,_fa ,_bbc ,-3);_fa =!_fa ;};if len (_eadg )>=_bg .Columns {break ;
};};if _bg .EncodedByteAlign &&_aacc %8!=0{_aacc +=8-_aacc %8;};if _eadg !=nil {_ad =append (_ad ,_eadg );};if _bg .Rows > 0&&!_bg .EndOfBlock &&len (_ad )>=_bg .Rows {break _dgf ;};};};return _ad ,nil ;};func _bcaa (_fca []byte ,_edg int )(bool ,int ){return _fgf (_fca ,_edg ,_ab )};
func _fdda (_bfbfa [][]byte )[][]byte {_dbae :=make ([]byte ,len (_bfbfa [0]));for _gceg :=range _dbae {_dbae [_gceg ]=_cga ;};_bfbfa =append (_bfbfa ,[]byte {});for _bfba :=len (_bfbfa )-1;_bfba > 0;_bfba --{_bfbfa [_bfba ]=_bfbfa [_bfba -1];};_bfbfa [0]=_dbae ;
return _bfbfa ;};func _fbc (_cae int )([]byte ,int ){var _aefd []byte ;for _agcf :=0;_agcf < 6;_agcf ++{_aefd ,_cae =_fbf (_aefd ,_cae ,_ab );};return _aefd ,_cae %8;};func _abf (_bbb []byte ,_dbf ,_cdg ,_gcfd int )([]byte ,int ){_dgge :=_cgbd (_cdg ,_gcfd );
_bbb ,_dbf =_fbf (_bbb ,_dbf ,_dgge );return _bbb ,_dbf ;};func _abe (_fgd []byte ,_eda int )(code ,int ,bool ){var (_dga uint16 ;_gab int ;_fed int ;);_fed =_eda ;_dga ,_gab ,_ =_be (_fgd ,_eda );_gefb ,_adc :=_cee (_dga ,_gab );if !_adc {return code {},_fed ,false ;
};return _gefb ,_fed +_gefb .BitsWritten ,true ;};var (_bd =_d .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_bc =_d .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");
_dd =_d .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_feg =_d .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_ag =_d .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_fg =_d .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _afb (_ffe []byte ,_gdbc int )(bool ,int ){return _fgf (_ffe ,_gdbc ,_aaf )};
var (_bde =&decodingTreeNode {Val :255};_df =&decodingTreeNode {Val :255};_fb =&decodingTreeNode {Val :255};);func _ada (_dcf []byte ,_fgga int ,_ded code )([]byte ,int ){_cgf :=true ;var _bea []byte ;_bea ,_fgga =_fbf (nil ,_fgga ,_ded );_fagd :=0;var _fbg int ;
for _fagd < len (_dcf ){_fbg ,_fagd =_gebe (_dcf ,_cgf ,_fagd );_bea ,_fgga =_efb (_bea ,_fgga ,_fbg ,_cgf );_cgf =!_cgf ;};return _bea ,_fgga %8;};func _dcgg (_dgfe []byte ,_dgd int )([]byte ,int ){return _fbf (_dgfe ,_dgd ,_fe )};func (_dcec *Encoder )encodeG31D (_gcff [][]byte )[]byte {var _aad []byte ;
_daa :=0;for _caf :=range _gcff {if _dcec .Rows > 0&&!_dcec .EndOfBlock &&_caf ==_dcec .Rows {break ;};_bec ,_dfadd :=_ada (_gcff [_caf ],_daa ,_af );_aad =_dcec .appendEncodedRow (_aad ,_bec ,_daa );if _dcec .EncodedByteAlign {_dfadd =0;};_daa =_dfadd ;
};if _dcec .EndOfBlock {_dfag ,_ :=_bag (_daa );_aad =_dcec .appendEncodedRow (_aad ,_dfag ,_daa );};return _aad ;};func (_gdfc *Encoder )appendEncodedRow (_fcag ,_gdab []byte ,_efbd int )[]byte {if len (_fcag )> 0&&_efbd !=0&&!_gdfc .EncodedByteAlign {_fcag [len (_fcag )-1]=_fcag [len (_fcag )-1]|_gdab [0];
_fcag =append (_fcag ,_gdab [1:]...);}else {_fcag =append (_fcag ,_gdab ...);};return _fcag ;};func (_beb *Encoder )encodeG4 (_gggc [][]byte )[]byte {_egff :=make ([][]byte ,len (_gggc ));copy (_egff ,_gggc );_egff =_fdda (_egff );var _bbe []byte ;var _dbc int ;
for _egg :=1;_egg < len (_egff );_egg ++{if _beb .Rows > 0&&!_beb .EndOfBlock &&_egg ==(_beb .Rows +1){break ;};var _ddg []byte ;var _fedf ,_cbf ,_bbeg int ;_ef :=_dbc ;_ffbf :=-1;for _ffbf < len (_egff [_egg ]){_fedf =_dgfg (_egff [_egg ],_ffbf );_cbf =_cge (_egff [_egg ],_egff [_egg -1],_ffbf );
_bbeg =_dgfg (_egff [_egg -1],_cbf );if _bbeg < _fedf {_ddg ,_ef =_fbf (_ddg ,_ef ,_fe );_ffbf =_bbeg ;}else {if _b .Abs (float64 (_cbf -_fedf ))> 3{_ddg ,_ef ,_ffbf =_badf (_egff [_egg ],_ddg ,_ef ,_ffbf ,_fedf );}else {_ddg ,_ef =_abf (_ddg ,_ef ,_fedf ,_cbf );
_ffbf =_fedf ;};};};_bbe =_beb .appendEncodedRow (_bbe ,_ddg ,_dbc );if _beb .EncodedByteAlign {_ef =0;};_dbc =_ef %8;};if _beb .EndOfBlock {_eea ,_ :=_afe (_dbc );_bbe =_beb .appendEncodedRow (_bbe ,_eea ,_dbc );};return _bbe ;};func _cfb (_cdc uint16 ,_dcg int ,_eaef bool )(int ,code ){var _bad *int ;
var _eag *code ;if _eaef {_bad ,_eag =_ggb (_bde ,_cdc ,_dcg );}else {_bad ,_eag =_ggb (_df ,_cdc ,_dcg );};if _bad ==nil {return -1,code {};};return *_bad ,*_eag ;};var (_cga byte =1;_cgb byte =0;);func (_bdf *Encoder )decodeG4 (_dag []byte )([][]byte ,error ){_fdd :=make ([]byte ,_bdf .Columns );
for _ga :=range _fdd {_fdd [_ga ]=_cga ;};_eae :=make ([][]byte ,1);_eae [0]=_fdd ;var (_gdb bool ;_aaae error ;_cdb int ;);for (_cdb /8)< len (_dag ){_gdb ,_cdb ,_aaae =_dff (_dag ,_cdb );if _aaae !=nil {return nil ,_aaae ;};if _gdb {break ;};var (_aaab code ;
_agb bool ;);_cec :=true ;var _feb []byte ;_ffg :=-1;_dc :=true ;for _ffg < _bdf .Columns {_aaab ,_cdb ,_agb =_abe (_dag ,_cdb );if !_agb {_cf .Log .Warning ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u0063i\u0074\u0074\u0066a\u0078:\u0020\u0025\u0076",_fg );
_dc =false ;break ;};switch _aaab {case _fe :_feb ,_ffg =_def (_eae ,_feb ,_cec ,_ffg );case _afc :_feb ,_cdb ,_ffg ,_aaae =_fff (_dag ,_feb ,_cdb ,_cec ,_ffg );if _aaae !=nil {_cf .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064i\u006e\u0067\u0020\u0063c\u0069\u0074\u0074\u0066\u0061\u0078\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020\u006d\u006f\u0064\u0065\u003a\u0020\u0025\u0076",_aaae );
_dc =false ;break ;};case _cb :_feb ,_ffg =_gda (_eae ,_feb ,_cec ,_ffg ,0);_cec =!_cec ;case _bb :_feb ,_ffg =_gda (_eae ,_feb ,_cec ,_ffg ,1);_cec =!_cec ;case _ge :_feb ,_ffg =_gda (_eae ,_feb ,_cec ,_ffg ,2);_cec =!_cec ;case _dee :_feb ,_ffg =_gda (_eae ,_feb ,_cec ,_ffg ,3);
_cec =!_cec ;case _db :_feb ,_ffg =_gda (_eae ,_feb ,_cec ,_ffg ,-1);_cec =!_cec ;case _aac :_feb ,_ffg =_gda (_eae ,_feb ,_cec ,_ffg ,-2);_cec =!_cec ;case _fd :_feb ,_ffg =_gda (_eae ,_feb ,_cec ,_ffg ,-3);_cec =!_cec ;};if len (_feb )>=_bdf .Columns {break ;
};};if !_dc {_cdb +=8-_cdb %8;continue ;};if _bdf .EncodedByteAlign &&_cdb %8!=0{_cdb +=8-_cdb %8;};_eae =append (_eae ,_feb );if _bdf .Rows > 0&&!_bdf .EndOfBlock &&len (_eae )>=(_bdf .Rows +1){break ;};};_eae =_eae [1:];return _eae ,nil ;};func _def (_gec [][]byte ,_aef []byte ,_eg bool ,_dbe int )([]byte ,int ){_fad :=_bgc (_aef ,_gec [len (_gec )-1],_dbe ,_eg );
_ecg :=_dgfg (_gec [len (_gec )-1],_fad );if _dbe ==-1{_aef =_gga (_aef ,_eg ,_ecg -_dbe -1);}else {_aef =_gga (_aef ,_eg ,_ecg -_dbe );};_dbe =_ecg ;return _aef ,_dbe ;};func _dff (_eddc []byte ,_bce int )(bool ,int ,error ){_edc :=_bce ;var _geb bool ;
_geb ,_bce =_aaabc (_eddc ,_bce );if _geb {_geb ,_bce =_aaabc (_eddc ,_bce );if _geb {return true ,_bce ,nil ;};return false ,_edc ,_bd ;};return false ,_edc ,nil ;};func _cc (_ddf uint16 ,_gef int )byte {if _gef < 8{_ddf >>=8;};_gef %=8;_dbee :=byte (0x01<<(7-uint (_gef )));
return (byte (_ddf )&_dbee )>>(7-uint (_gef ));};func _bgc (_egd ,_eff []byte ,_aaca int ,_bfbf bool )int {_gfd :=_dgfg (_eff ,_aaca );if _gfd < len (_eff )&&(_aaca ==-1&&_eff [_gfd ]==_cga ||_aaca >=0&&_aaca < len (_egd )&&_egd [_aaca ]==_eff [_gfd ]||_aaca >=len (_egd )&&_bfbf &&_eff [_gfd ]==_cga ||_aaca >=len (_egd )&&!_bfbf &&_eff [_gfd ]==_cgb ){_gfd =_dgfg (_eff ,_gfd );
};return _gfd ;};func (_gdbg *Encoder )decodeRow1D (_fade []byte ,_edaa int )([]byte ,int ){var _gbf []byte ;_cg :=true ;var _aeg int ;_aeg ,_edaa =_ee (_fade ,_edaa ,_cg );for _aeg !=-1{_gbf =_gga (_gbf ,_cg ,_aeg );if _aeg < 64{if len (_gbf )>=_gdbg .Columns {break ;
};_cg =!_cg ;};_aeg ,_edaa =_ee (_fade ,_edaa ,_cg );};return _gbf ,_edaa ;};type code struct{Code uint16 ;BitsWritten int ;};func _fff (_aec ,_gc []byte ,_eac int ,_eb bool ,_bgbg int )([]byte ,int ,int ,error ){_bca :=_eac ;var _gb error ;_gc ,_eac ,_gb =_cba (_aec ,_gc ,_eac ,_eb );
if _gb !=nil {return _gc ,_bca ,_bgbg ,_gb ;};_eb =!_eb ;_gc ,_eac ,_gb =_cba (_aec ,_gc ,_eac ,_eb );if _gb !=nil {return _gc ,_bca ,_bgbg ,_gb ;};_bgbg =len (_gc );return _gc ,_eac ,_bgbg ,nil ;};func _cba (_dba ,_gad []byte ,_fdb int ,_ba bool )([]byte ,int ,error ){_cffg :=_fdb ;
var _bcd int ;for _bcd ,_fdb =_ee (_dba ,_fdb ,_ba );_bcd !=-1;_bcd ,_fdb =_ee (_dba ,_fdb ,_ba ){_gad =_gga (_gad ,_ba ,_bcd );if _bcd < 64{break ;};};if _bcd ==-1{return _gad ,_cffg ,_dd ;};return _gad ,_fdb ,nil ;};func (_dbaa *Encoder )encodeG32D (_gbd [][]byte )[]byte {var _fef []byte ;
var _bdg int ;for _bcdc :=0;_bcdc < len (_gbd );_bcdc +=_dbaa .K {if _dbaa .Rows > 0&&!_dbaa .EndOfBlock &&_bcdc ==_dbaa .Rows {break ;};_gae ,_eagg :=_ada (_gbd [_bcdc ],_bdg ,_ab );_fef =_dbaa .appendEncodedRow (_fef ,_gae ,_bdg );if _dbaa .EncodedByteAlign {_eagg =0;
};_bdg =_eagg ;for _dad :=_bcdc +1;_dad < (_bcdc +_dbaa .K )&&_dad < len (_gbd );_dad ++{if _dbaa .Rows > 0&&!_dbaa .EndOfBlock &&_dad ==_dbaa .Rows {break ;};_gce ,_fab :=_fbf (nil ,_bdg ,_aaf );var _caae ,_eaa ,_egf int ;_ggge :=-1;for _ggge < len (_gbd [_dad ]){_caae =_dgfg (_gbd [_dad ],_ggge );
_eaa =_cge (_gbd [_dad ],_gbd [_dad -1],_ggge );_egf =_dgfg (_gbd [_dad -1],_eaa );if _egf < _caae {_gce ,_fab =_dcgg (_gce ,_fab );_ggge =_egf ;}else {if _b .Abs (float64 (_eaa -_caae ))> 3{_gce ,_fab ,_ggge =_badf (_gbd [_dad ],_gce ,_fab ,_ggge ,_caae );
}else {_gce ,_fab =_abf (_gce ,_fab ,_caae ,_eaa );_ggge =_caae ;};};};_fef =_dbaa .appendEncodedRow (_fef ,_gce ,_bdg );if _dbaa .EncodedByteAlign {_fab =0;};_bdg =_fab %8;};};if _dbaa .EndOfBlock {_ebd ,_ :=_fbc (_bdg );_fef =_dbaa .appendEncodedRow (_fef ,_ebd ,_bdg );
};return _fef ;};func _cgbd (_febc ,_gdbd int )code {var _dedf code ;switch _gdbd -_febc {case -1:_dedf =_bb ;case -2:_dedf =_ge ;case -3:_dedf =_dee ;case 0:_dedf =_cb ;case 1:_dedf =_db ;case 2:_dedf =_aac ;case 3:_dedf =_fd ;};return _dedf ;};func _ggb (_ggf *decodingTreeNode ,_acf uint16 ,_eaga int )(*int ,*code ){if _ggf ==nil {return nil ,nil ;
};if _eaga ==16{return _ggf .RunLen ,_ggf .Code ;};_cbac :=_cc (_acf ,_eaga );_eaga ++;var _ace *int ;var _ddeg *code ;if _cbac ==1{_ace ,_ddeg =_ggb (_ggf .Right ,_acf ,_eaga );}else {_ace ,_ddeg =_ggb (_ggf .Left ,_acf ,_eaga );};if _ace ==nil {_ace =_ggf .RunLen ;
_ddeg =_ggf .Code ;};return _ace ,_ddeg ;};func _bag (_ebe int )([]byte ,int ){var _aae []byte ;for _aadf :=0;_aadf < 6;_aadf ++{_aae ,_ebe =_fbf (_aae ,_ebe ,_af );};return _aae ,_ebe %8;};func _aaabc (_ebb []byte ,_fc int )(bool ,int ){_cgg :=_fc ;var (_deg uint16 ;
_cbb int ;);_deg ,_cbb ,_fc =_be (_ebb ,_fc );if _cbb > 4{return false ,_cgg ;};_deg >>=uint (4-_cbb );_deg <<=4;if _deg !=_af .Code {return false ,_cgg ;};return true ,_fc -4+_cbb ;};func (_ddb *Encoder )decodeG31D (_ec []byte )([][]byte ,error ){var _edd [][]byte ;
var _cff int ;for (_cff /8)< len (_ec ){var _ff bool ;_ff ,_cff =_aaabc (_ec ,_cff );if !_ff {if _ddb .EndOfLine {return nil ,_feg ;};}else {for _ce :=0;_ce < 5;_ce ++{_ff ,_cff =_aaabc (_ec ,_cff );if !_ff {if _ce ==0{break ;};return nil ,_ag ;};};if _ff {break ;
};};var _aaa []byte ;_aaa ,_cff =_ddb .decodeRow1D (_ec ,_cff );if _ddb .EncodedByteAlign &&_cff %8!=0{_cff +=8-_cff %8;};_edd =append (_edd ,_aaa );if _ddb .Rows > 0&&!_ddb .EndOfBlock &&len (_edd )>=_ddb .Rows {break ;};};return _edd ,nil ;};func _ee (_edb []byte ,_deeb int ,_ca bool )(int ,int ){var (_ddfd uint16 ;
_agc int ;_ebc int ;);_ebc =_deeb ;_ddfd ,_agc ,_ =_be (_edb ,_deeb );_gebg ,_gcf :=_cfb (_ddfd ,_agc ,_ca );if _gebg ==-1{return -1,_ebc ;};return _gebg ,_ebc +_gcf .BitsWritten ;};func _dfaf (_cda int ,_dega bool )(code ,int ,bool ){if _cda < 64{if _dega {return _a [_cda ],0,true ;
};return _e [_cda ],0,true ;};_efa :=_cda /64;if _efa > 40{return _de [2560],_cda -2560,false ;};if _efa > 27{return _de [_efa *64],_cda -_efa *64,false ;};if _dega {return _f [_efa *64],_cda -_efa *64,false ;};return _aa [_efa *64],_cda -_efa *64,false ;
};func _efb (_ffeb []byte ,_ggd int ,_acff int ,_ggfg bool )([]byte ,int ){var (_ecd code ;_ccb bool ;);for !_ccb {_ecd ,_acff ,_ccb =_dfaf (_acff ,_ggfg );_ffeb ,_ggd =_fbf (_ffeb ,_ggd ,_ecd );};return _ffeb ,_ggd ;};func (_fee *Encoder )Decode (encoded []byte )([][]byte ,error ){if _fee .BlackIs1 {_cga =0;
_cgb =1;}else {_cga =1;_cgb =0;};if _fee .K ==0{return _fee .decodeG31D (encoded );};if _fee .K > 0{return _fee .decodeG32D (encoded );};if _fee .K < 4{return _fee .decodeG4 (encoded );};return nil ,nil ;};func _gebe (_egc []byte ,_bece bool ,_bdac int )(int ,int ){_cbc :=0;
for _bdac < len (_egc ){if _bece {if _egc [_bdac ]!=_cga {break ;};}else {if _egc [_bdac ]!=_cgb {break ;};};_cbc ++;_bdac ++;};return _cbc ,_bdac ;};func _be (_dec []byte ,_dfad int )(uint16 ,int ,int ){_gba :=_dfad ;_fag :=_dfad /8;_dfad %=8;if _fag >=len (_dec ){return 0,16,_gba ;
};_fdf :=byte (0xFF>>uint (_dfad ));_acb :=uint16 ((_dec [_fag ]&_fdf )<<uint (_dfad ))<<8;_faa :=8-_dfad ;_fag ++;_dfad =0;if _fag >=len (_dec ){return _acb >>(16-uint (_faa )),16-_faa ,_gba +_faa ;};_acb |=uint16 (_dec [_fag ])<<(8-uint (_faa ));_faa +=8;
_fag ++;_dfad =0;if _fag >=len (_dec ){return _acb >>(16-uint (_faa )),16-_faa ,_gba +_faa ;};if _faa ==16{return _acb ,0,_gba +_faa ;};_ecag :=16-_faa ;_acb |=uint16 (_dec [_fag ]>>(8-uint (_ecag )));return _acb ,0,_gba +16;};func _fgf (_aaaf []byte ,_gfa int ,_bgbd code )(bool ,int ){_gdag :=_gfa ;
var (_bf uint16 ;_afcb int ;);_bf ,_afcb ,_gfa =_be (_aaaf ,_gfa );if _afcb > 3{return false ,_gdag ;};_bf >>=uint (3-_afcb );_bf <<=3;if _bf !=_bgbd .Code {return false ,_gdag ;};return true ,_gfa -3+_afcb ;};