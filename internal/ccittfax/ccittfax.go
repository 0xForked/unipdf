//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_e "errors";_fb "math";);func _dad (_bfe ,_fea []byte ,_dbd int ,_bba bool )([]byte ,int ,error ){_gadg :=_dbd ;var _eee int ;for _eee ,_dbd =_adc (_bfe ,_dbd ,_bba );_eee !=-1;_eee ,_dbd =_adc (_bfe ,_dbd ,_bba ){_fea =_edf (_fea ,_bba ,_eee );
if _eee < 64{break ;};};if _eee ==-1{return _fea ,_gadg ,_bb ;};return _fea ,_dbd ,nil ;};func _fda (_ebd []byte ,_ecf int )(bool ,int ){return _gfe (_ebd ,_ecf ,_g )};func init (){_a =make (map[int ]code );_a [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_a [1]=code {Code :2<<(5+8),BitsWritten :3};_a [2]=code {Code :3<<(6+8),BitsWritten :2};_a [3]=code {Code :2<<(6+8),BitsWritten :2};_a [4]=code {Code :3<<(5+8),BitsWritten :3};_a [5]=code {Code :3<<(4+8),BitsWritten :4};_a [6]=code {Code :2<<(4+8),BitsWritten :4};
_a [7]=code {Code :3<<(3+8),BitsWritten :5};_a [8]=code {Code :5<<(2+8),BitsWritten :6};_a [9]=code {Code :4<<(2+8),BitsWritten :6};_a [10]=code {Code :4<<(1+8),BitsWritten :7};_a [11]=code {Code :5<<(1+8),BitsWritten :7};_a [12]=code {Code :7<<(1+8),BitsWritten :7};
_a [13]=code {Code :4<<8,BitsWritten :8};_a [14]=code {Code :7<<8,BitsWritten :8};_a [15]=code {Code :12<<8,BitsWritten :9};_a [16]=code {Code :5<<8|3<<6,BitsWritten :10};_a [17]=code {Code :6<<8,BitsWritten :10};_a [18]=code {Code :2<<8,BitsWritten :10};
_a [19]=code {Code :12<<8|7<<5,BitsWritten :11};_a [20]=code {Code :13<<8,BitsWritten :11};_a [21]=code {Code :13<<8|4<<5,BitsWritten :11};_a [22]=code {Code :6<<8|7<<5,BitsWritten :11};_a [23]=code {Code :5<<8,BitsWritten :11};_a [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_a [25]=code {Code :3<<8,BitsWritten :11};_a [26]=code {Code :12<<8|10<<4,BitsWritten :12};_a [27]=code {Code :12<<8|11<<4,BitsWritten :12};_a [28]=code {Code :12<<8|12<<4,BitsWritten :12};_a [29]=code {Code :12<<8|13<<4,BitsWritten :12};_a [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_a [31]=code {Code :6<<8|9<<4,BitsWritten :12};_a [32]=code {Code :6<<8|10<<4,BitsWritten :12};_a [33]=code {Code :6<<8|11<<4,BitsWritten :12};_a [34]=code {Code :13<<8|2<<4,BitsWritten :12};_a [35]=code {Code :13<<8|3<<4,BitsWritten :12};_a [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_a [37]=code {Code :13<<8|5<<4,BitsWritten :12};_a [38]=code {Code :13<<8|6<<4,BitsWritten :12};_a [39]=code {Code :13<<8|7<<4,BitsWritten :12};_a [40]=code {Code :6<<8|12<<4,BitsWritten :12};_a [41]=code {Code :6<<8|13<<4,BitsWritten :12};_a [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_a [43]=code {Code :13<<8|11<<4,BitsWritten :12};_a [44]=code {Code :5<<8|4<<4,BitsWritten :12};_a [45]=code {Code :5<<8|5<<4,BitsWritten :12};_a [46]=code {Code :5<<8|6<<4,BitsWritten :12};_a [47]=code {Code :5<<8|7<<4,BitsWritten :12};_a [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_a [49]=code {Code :6<<8|5<<4,BitsWritten :12};_a [50]=code {Code :5<<8|2<<4,BitsWritten :12};_a [51]=code {Code :5<<8|3<<4,BitsWritten :12};_a [52]=code {Code :2<<8|4<<4,BitsWritten :12};_a [53]=code {Code :3<<8|7<<4,BitsWritten :12};_a [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_a [55]=code {Code :2<<8|7<<4,BitsWritten :12};_a [56]=code {Code :2<<8|8<<4,BitsWritten :12};_a [57]=code {Code :5<<8|8<<4,BitsWritten :12};_a [58]=code {Code :5<<8|9<<4,BitsWritten :12};_a [59]=code {Code :2<<8|11<<4,BitsWritten :12};_a [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_a [61]=code {Code :5<<8|10<<4,BitsWritten :12};_a [62]=code {Code :6<<8|6<<4,BitsWritten :12};_a [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ae =make (map[int ]code );_ae [0]=code {Code :53<<8,BitsWritten :8};_ae [1]=code {Code :7<<(2+8),BitsWritten :6};
_ae [2]=code {Code :7<<(4+8),BitsWritten :4};_ae [3]=code {Code :8<<(4+8),BitsWritten :4};_ae [4]=code {Code :11<<(4+8),BitsWritten :4};_ae [5]=code {Code :12<<(4+8),BitsWritten :4};_ae [6]=code {Code :14<<(4+8),BitsWritten :4};_ae [7]=code {Code :15<<(4+8),BitsWritten :4};
_ae [8]=code {Code :19<<(3+8),BitsWritten :5};_ae [9]=code {Code :20<<(3+8),BitsWritten :5};_ae [10]=code {Code :7<<(3+8),BitsWritten :5};_ae [11]=code {Code :8<<(3+8),BitsWritten :5};_ae [12]=code {Code :8<<(2+8),BitsWritten :6};_ae [13]=code {Code :3<<(2+8),BitsWritten :6};
_ae [14]=code {Code :52<<(2+8),BitsWritten :6};_ae [15]=code {Code :53<<(2+8),BitsWritten :6};_ae [16]=code {Code :42<<(2+8),BitsWritten :6};_ae [17]=code {Code :43<<(2+8),BitsWritten :6};_ae [18]=code {Code :39<<(1+8),BitsWritten :7};_ae [19]=code {Code :12<<(1+8),BitsWritten :7};
_ae [20]=code {Code :8<<(1+8),BitsWritten :7};_ae [21]=code {Code :23<<(1+8),BitsWritten :7};_ae [22]=code {Code :3<<(1+8),BitsWritten :7};_ae [23]=code {Code :4<<(1+8),BitsWritten :7};_ae [24]=code {Code :40<<(1+8),BitsWritten :7};_ae [25]=code {Code :43<<(1+8),BitsWritten :7};
_ae [26]=code {Code :19<<(1+8),BitsWritten :7};_ae [27]=code {Code :36<<(1+8),BitsWritten :7};_ae [28]=code {Code :24<<(1+8),BitsWritten :7};_ae [29]=code {Code :2<<8,BitsWritten :8};_ae [30]=code {Code :3<<8,BitsWritten :8};_ae [31]=code {Code :26<<8,BitsWritten :8};
_ae [32]=code {Code :27<<8,BitsWritten :8};_ae [33]=code {Code :18<<8,BitsWritten :8};_ae [34]=code {Code :19<<8,BitsWritten :8};_ae [35]=code {Code :20<<8,BitsWritten :8};_ae [36]=code {Code :21<<8,BitsWritten :8};_ae [37]=code {Code :22<<8,BitsWritten :8};
_ae [38]=code {Code :23<<8,BitsWritten :8};_ae [39]=code {Code :40<<8,BitsWritten :8};_ae [40]=code {Code :41<<8,BitsWritten :8};_ae [41]=code {Code :42<<8,BitsWritten :8};_ae [42]=code {Code :43<<8,BitsWritten :8};_ae [43]=code {Code :44<<8,BitsWritten :8};
_ae [44]=code {Code :45<<8,BitsWritten :8};_ae [45]=code {Code :4<<8,BitsWritten :8};_ae [46]=code {Code :5<<8,BitsWritten :8};_ae [47]=code {Code :10<<8,BitsWritten :8};_ae [48]=code {Code :11<<8,BitsWritten :8};_ae [49]=code {Code :82<<8,BitsWritten :8};
_ae [50]=code {Code :83<<8,BitsWritten :8};_ae [51]=code {Code :84<<8,BitsWritten :8};_ae [52]=code {Code :85<<8,BitsWritten :8};_ae [53]=code {Code :36<<8,BitsWritten :8};_ae [54]=code {Code :37<<8,BitsWritten :8};_ae [55]=code {Code :88<<8,BitsWritten :8};
_ae [56]=code {Code :89<<8,BitsWritten :8};_ae [57]=code {Code :90<<8,BitsWritten :8};_ae [58]=code {Code :91<<8,BitsWritten :8};_ae [59]=code {Code :74<<8,BitsWritten :8};_ae [60]=code {Code :75<<8,BitsWritten :8};_ae [61]=code {Code :50<<8,BitsWritten :8};
_ae [62]=code {Code :51<<8,BitsWritten :8};_ae [63]=code {Code :52<<8,BitsWritten :8};_d =make (map[int ]code );_d [64]=code {Code :3<<8|3<<6,BitsWritten :10};_d [128]=code {Code :12<<8|8<<4,BitsWritten :12};_d [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_d [256]=code {Code :5<<8|11<<4,BitsWritten :12};_d [320]=code {Code :3<<8|3<<4,BitsWritten :12};_d [384]=code {Code :3<<8|4<<4,BitsWritten :12};_d [448]=code {Code :3<<8|5<<4,BitsWritten :12};_d [512]=code {Code :3<<8|12<<3,BitsWritten :13};_d [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_d [640]=code {Code :2<<8|10<<3,BitsWritten :13};_d [704]=code {Code :2<<8|11<<3,BitsWritten :13};_d [768]=code {Code :2<<8|12<<3,BitsWritten :13};_d [832]=code {Code :2<<8|13<<3,BitsWritten :13};_d [896]=code {Code :3<<8|18<<3,BitsWritten :13};_d [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_d [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_d [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_d [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_d [1216]=code {Code :119<<3,BitsWritten :13};_d [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_d [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_d [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_d [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_d [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_d [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_d [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_d [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_c =make (map[int ]code );_c [64]=code {Code :27<<(3+8),BitsWritten :5};_c [128]=code {Code :18<<(3+8),BitsWritten :5};_c [192]=code {Code :23<<(2+8),BitsWritten :6};_c [256]=code {Code :55<<(1+8),BitsWritten :7};_c [320]=code {Code :54<<8,BitsWritten :8};
_c [384]=code {Code :55<<8,BitsWritten :8};_c [448]=code {Code :100<<8,BitsWritten :8};_c [512]=code {Code :101<<8,BitsWritten :8};_c [576]=code {Code :104<<8,BitsWritten :8};_c [640]=code {Code :103<<8,BitsWritten :8};_c [704]=code {Code :102<<8,BitsWritten :9};
_c [768]=code {Code :102<<8|1<<7,BitsWritten :9};_c [832]=code {Code :105<<8,BitsWritten :9};_c [896]=code {Code :105<<8|1<<7,BitsWritten :9};_c [960]=code {Code :106<<8,BitsWritten :9};_c [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_c [1088]=code {Code :107<<8,BitsWritten :9};
_c [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_c [1216]=code {Code :108<<8,BitsWritten :9};_c [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_c [1344]=code {Code :109<<8,BitsWritten :9};_c [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_c [1472]=code {Code :76<<8,BitsWritten :9};
_c [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_c [1600]=code {Code :77<<8,BitsWritten :9};_c [1664]=code {Code :24<<(2+8),BitsWritten :6};_c [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_db =make (map[int ]code );_db [1792]=code {Code :1<<8,BitsWritten :11};
_db [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_db [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_db [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_db [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_db [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_db [2176]=code {Code :1<<8|5<<4,BitsWritten :12};
_db [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_db [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_db [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_db [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_db [2496]=code {Code :1<<8|14<<4,BitsWritten :12};
_db [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ab =make (map[int ]byte );_ab [0]=0xFF;_ab [1]=0xFE;_ab [2]=0xFC;_ab [3]=0xF8;_ab [4]=0xF0;_ab [5]=0xE0;_ab [6]=0xC0;_ab [7]=0x80;_ab [8]=0x00;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;
Left *decodingTreeNode ;Right *decodingTreeNode ;};func _ecac (_ecd []byte ,_bab bool ,_faf int )(int ,int ){_bbba :=0;for _faf < len (_ecd ){if _bab {if _ecd [_faf ]!=_fce {break ;};}else {if _ecd [_faf ]!=_cga {break ;};};_bbba ++;_faf ++;};return _bbba ,_faf ;
};func init (){for _aaf ,_aeb :=range _ae {_abca (_ga ,_aeb ,0,_aaf );};for _dec ,_cf :=range _c {_abca (_ga ,_cf ,0,_dec );};for _ff ,_cea :=range _a {_abca (_ggg ,_cea ,0,_ff );};for _gef ,_dag :=range _d {_abca (_ggg ,_dag ,0,_gef );};for _af ,_gd :=range _db {_abca (_ga ,_gd ,0,_af );
_abca (_ggg ,_gd ,0,_af );};_abca (_cg ,_gg ,0,0);_abca (_cg ,_da ,0,0);_abca (_cg ,_ge ,0,0);_abca (_cg ,_ac ,0,0);_abca (_cg ,_ce ,0,0);_abca (_cg ,_fbg ,0,0);_abca (_cg ,_gga ,0,0);_abca (_cg ,_b ,0,0);_abca (_cg ,_bg ,0,0);};func _geea (_aaa []byte ,_bd int )(bool ,int ){_fed :=_bd ;
var (_abb uint16 ;_bbcb int ;);_abb ,_bbcb ,_bd =_acc (_aaa ,_bd );if _bbcb > 4{return false ,_fed ;};_abb >>=uint (4-_bbcb );_abb <<=4;if _abb !=_aa .Code {return false ,_fed ;};return true ,_bd -4+_bbcb ;};func _dedf (_ceb [][]byte ,_ad []byte ,_gfb bool ,_gba int )([]byte ,int ){_cab :=_age (_ad ,_ceb [len (_ceb )-1],_gba ,_gfb );
_ega :=_eefc (_ceb [len (_ceb )-1],_cab );if _gba ==-1{_ad =_edf (_ad ,_gfb ,_ega -_gba -1);}else {_ad =_edf (_ad ,_gfb ,_ega -_gba );};_gba =_ega ;return _ad ,_gba ;};func _efe (_ffd int ,_cfc bool )(code ,int ,bool ){if _ffd < 64{if _cfc {return _ae [_ffd ],0,true ;
};return _a [_ffd ],0,true ;};_daaa :=_ffd /64;if _daaa > 40{return _db [2560],_ffd -2560,false ;};if _daaa > 27{return _db [_daaa *64],_ffd -_daaa *64,false ;};if _cfc {return _c [_daaa *64],_ffd -_daaa *64,false ;};return _d [_daaa *64],_ffd -_daaa *64,false ;
};func _gee (_eab []byte ,_fd int )(code ,int ,bool ){var (_fgb uint16 ;_dea int ;_gcd int ;);_gcd =_fd ;_fgb ,_dea ,_ =_acc (_eab ,_fd );_ccf ,_geeb :=_ccb (_fgb ,_dea );if !_geeb {return code {},_gcd ,false ;};return _ccf ,_gcd +_ccf .BitsWritten ,true ;
};func _feaa (_fabb uint16 ,_gcb int ,_fbe bool )(int ,code ){var _caab *int ;var _ace *code ;if _fbe {_caab ,_ace =_fffb (_ga ,_fabb ,_gcb );}else {_caab ,_ace =_fffb (_ggg ,_fabb ,_gcb );};if _caab ==nil {return -1,code {};};return *_caab ,*_ace ;};func _age (_edbc ,_fbbb []byte ,_cge int ,_defg bool )int {_afd :=_eefc (_fbbb ,_cge );
if _afd < len (_fbbb )&&(_cge ==-1&&_fbbb [_afd ]==_fce ||_cge >=0&&_cge < len (_edbc )&&_edbc [_cge ]==_fbbb [_afd ]||_cge >=len (_edbc )&&_defg &&_fbbb [_afd ]==_fce ||_cge >=len (_edbc )&&!_defg &&_fbbb [_afd ]==_cga ){_afd =_eefc (_fbbb ,_afd );};return _afd ;
};var (_a map[int ]code ;_ae map[int ]code ;_d map[int ]code ;_c map[int ]code ;_db map[int ]code ;_ab map[int ]byte ;_aa =code {Code :1<<4,BitsWritten :12};_eb =code {Code :3<<3,BitsWritten :13};_g =code {Code :2<<3,BitsWritten :13};_gg =code {Code :1<<12,BitsWritten :4};
_da =code {Code :1<<13,BitsWritten :3};_ge =code {Code :1<<15,BitsWritten :1};_ac =code {Code :3<<13,BitsWritten :3};_ce =code {Code :3<<10,BitsWritten :6};_fbg =code {Code :3<<9,BitsWritten :7};_gga =code {Code :2<<13,BitsWritten :3};_b =code {Code :2<<10,BitsWritten :6};
_bg =code {Code :2<<9,BitsWritten :7};);func _eaf (_facb []byte ,_afdf int )([]byte ,int ){return _aaef (_facb ,_afdf ,_gg )};func _eefc (_ffbf []byte ,_eagc int )int {if _eagc >=len (_ffbf ){return _eagc ;};if _eagc < -1{_eagc =-1;};var _gafd byte ;if _eagc > -1{_gafd =_ffbf [_eagc ];
}else {_gafd =_fce ;};_dcf :=_eagc +1;for _dcf < len (_ffbf ){if _ffbf [_dcf ]!=_gafd {break ;};_dcf ++;};return _dcf ;};func _dbe (_dac ,_efff []byte ,_cgg int )int {_bec :=_eefc (_efff ,_cgg );if _bec < len (_efff )&&(_cgg ==-1&&_efff [_bec ]==_fce ||_cgg >=0&&_cgg < len (_dac )&&_dac [_cgg ]==_efff [_bec ]||_cgg >=len (_dac )&&_dac [_cgg -1]!=_efff [_bec ]){_bec =_eefc (_efff ,_bec );
};return _bec ;};func _gdfe (_dgf ,_decd int )code {var _abcf code ;switch _decd -_dgf {case -1:_abcf =_ac ;case -2:_abcf =_ce ;case -3:_abcf =_fbg ;case 0:_abcf =_ge ;case 1:_abcf =_gga ;case 2:_abcf =_b ;case 3:_abcf =_bg ;};return _abcf ;};func (_edga *Encoder )Encode (pixels [][]byte )[]byte {if _edga .BlackIs1 {_fce =0;
_cga =1;}else {_fce =1;_cga =0;};if _edga .K ==0{return _edga .encodeG31D (pixels );};if _edga .K > 0{return _edga .encodeG32D (pixels );};if _edga .K < 0{return _edga .encodeG4 (pixels );};return nil ;};func _aae (_cad []byte ,_ged int )(bool ,int ,error ){_dadc :=_ged ;
var _gfc bool ;_gfc ,_ged =_geea (_cad ,_ged );if _gfc {_gfc ,_ged =_geea (_cad ,_ged );if _gfc {return true ,_ged ,nil ;};return false ,_dadc ,_bgc ;};return false ,_dadc ,nil ;};func _ffg (_edca []byte ,_cca int )(bool ,int ,error ){_fab :=_cca ;var _abd =false ;
for _gc :=0;_gc < 6;_gc ++{_abd ,_cca =_dab (_edca ,_cca );if !_abd {if _gc > 1{return false ,_fab ,_de ;};_cca =_fab ;break ;};};return _abd ,_cca ,nil ;};var (_fce byte =1;_cga byte =0;);type code struct{Code uint16 ;BitsWritten int ;};func (_bfd *Encoder )encodeG4 (_agbe [][]byte )[]byte {_dfb :=make ([][]byte ,len (_agbe ));
copy (_dfb ,_agbe );_dfb =_aed (_dfb );var _ecg []byte ;var _eda int ;for _ebb :=1;_ebb < len (_dfb );_ebb ++{if _bfd .Rows > 0&&!_bfd .EndOfBlock &&_ebb ==(_bfd .Rows +1){break ;};var _dgc []byte ;var _geeaa ,_egf ,_ddf int ;_fbf :=_eda ;_ddfe :=-1;for _ddfe < len (_dfb [_ebb ]){_geeaa =_eefc (_dfb [_ebb ],_ddfe );
_egf =_dbe (_dfb [_ebb ],_dfb [_ebb -1],_ddfe );_ddf =_eefc (_dfb [_ebb -1],_egf );if _ddf < _geeaa {_dgc ,_fbf =_aaef (_dgc ,_fbf ,_gg );_ddfe =_ddf ;}else {if _fb .Abs (float64 (_egf -_geeaa ))> 3{_dgc ,_fbf ,_ddfe =_agca (_dfb [_ebb ],_dgc ,_fbf ,_ddfe ,_geeaa );
}else {_dgc ,_fbf =_abbf (_dgc ,_fbf ,_geeaa ,_egf );_ddfe =_geeaa ;};};};_ecg =_bfd .appendEncodedRow (_ecg ,_dgc ,_eda );if _bfd .EncodedByteAlign {_fbf =0;};_eda =_fbf %8;};if _bfd .EndOfBlock {_dabg ,_ :=_abf (_eda );_ecg =_bfd .appendEncodedRow (_ecg ,_dabg ,_eda );
};return _ecg ;};func _edf (_decb []byte ,_gae bool ,_aafd int )[]byte {if _aafd < 0{return _decb ;};_gag :=make ([]byte ,_aafd );if _gae {for _fggb :=0;_fggb < len (_gag );_fggb ++{_gag [_fggb ]=_fce ;};}else {for _bef :=0;_bef < len (_gag );_bef ++{_gag [_bef ]=_cga ;
};};_decb =append (_decb ,_gag ...);return _decb ;};func _adc (_caa []byte ,_afeg int ,_caf bool )(int ,int ){var (_cbe uint16 ;_fac int ;_fee int ;);_fee =_afeg ;_cbe ,_fac ,_ =_acc (_caa ,_afeg );_fbb ,_ffgg :=_feaa (_cbe ,_fac ,_caf );if _fbb ==-1{return -1,_fee ;
};return _fbb ,_fee +_ffgg .BitsWritten ;};func _aaef (_dgca []byte ,_dcg int ,_fdf code )([]byte ,int ){_gbd :=0;for _gbd < _fdf .BitsWritten {_eadb :=_dcg /8;_bfda :=_dcg %8;if _eadb >=len (_dgca ){_dgca =append (_dgca ,0);};_fedc :=8-_bfda ;_dge :=_fdf .BitsWritten -_gbd ;
if _fedc > _dge {_fedc =_dge ;};if _gbd < 8{_dgca [_eadb ]=_dgca [_eadb ]|byte (_fdf .Code >>uint (8+_bfda -_gbd ))&_ab [8-_fedc -_bfda ];}else {_dgca [_eadb ]=_dgca [_eadb ]|(byte (_fdf .Code <<uint (_gbd -8))&_ab [8-_fedc ])>>uint (_bfda );};_dcg +=_fedc ;
_gbd +=_fedc ;};return _dgca ,_dcg ;};var (_ga =&decodingTreeNode {Val :255};_ggg =&decodingTreeNode {Val :255};_cg =&decodingTreeNode {Val :255};);func _agca (_egb ,_bbab []byte ,_ecb ,_geg ,_fbbd int )([]byte ,int ,int ){_dgd :=_eefc (_egb ,_fbbd );_gfa :=_geg >=0&&_egb [_geg ]==_fce ||_geg ==-1;
_bbab ,_ecb =_aaef (_bbab ,_ecb ,_da );var _gdd int ;if _geg > -1{_gdd =_fbbd -_geg ;}else {_gdd =_fbbd -_geg -1;};_bbab ,_ecb =_cdg (_bbab ,_ecb ,_gdd ,_gfa );_gfa =!_gfa ;_cebe :=_dgd -_fbbd ;_bbab ,_ecb =_cdg (_bbab ,_ecb ,_cebe ,_gfa );_geg =_dgd ;
return _bbab ,_ecb ,_geg ;};func _aed (_dfa [][]byte )[][]byte {_ffcd :=make ([]byte ,len (_dfa [0]));for _bgb :=range _ffcd {_ffcd [_bgb ]=_fce ;};_dfa =append (_dfa ,[]byte {});for _egee :=len (_dfa )-1;_egee > 0;_egee --{_dfa [_egee ]=_dfa [_egee -1];
};_dfa [0]=_ffcd ;return _dfa ;};func (_agc *Encoder )encodeG32D (_gbac [][]byte )[]byte {var _cecd []byte ;var _fef int ;for _ebgde :=0;_ebgde < len (_gbac );_ebgde +=_agc .K {if _agc .Rows > 0&&!_agc .EndOfBlock &&_ebgde ==_agc .Rows {break ;};_eef ,_agcc :=_efbb (_gbac [_ebgde ],_fef ,_eb );
_cecd =_agc .appendEncodedRow (_cecd ,_eef ,_fef );if _agc .EncodedByteAlign {_agcc =0;};_fef =_agcc ;for _cdcd :=_ebgde +1;_cdcd < (_ebgde +_agc .K )&&_cdcd < len (_gbac );_cdcd ++{if _agc .Rows > 0&&!_agc .EndOfBlock &&_cdcd ==_agc .Rows {break ;};_fdg ,_eaeb :=_aaef (nil ,_fef ,_g );
var _ebc ,_gdf ,_afg int ;_fcd :=-1;for _fcd < len (_gbac [_cdcd ]){_ebc =_eefc (_gbac [_cdcd ],_fcd );_gdf =_dbe (_gbac [_cdcd ],_gbac [_cdcd -1],_fcd );_afg =_eefc (_gbac [_cdcd -1],_gdf );if _afg < _ebc {_fdg ,_eaeb =_eaf (_fdg ,_eaeb );_fcd =_afg ;
}else {if _fb .Abs (float64 (_gdf -_ebc ))> 3{_fdg ,_eaeb ,_fcd =_agca (_gbac [_cdcd ],_fdg ,_eaeb ,_fcd ,_ebc );}else {_fdg ,_eaeb =_abbf (_fdg ,_eaeb ,_ebc ,_gdf );_fcd =_ebc ;};};};_cecd =_agc .appendEncodedRow (_cecd ,_fdg ,_fef );if _agc .EncodedByteAlign {_eaeb =0;
};_fef =_eaeb %8;};};if _agc .EndOfBlock {_bcd ,_ :=_gce (_fef );_cecd =_agc .appendEncodedRow (_cecd ,_bcd ,_fef );};return _cecd ;};func _abca (_efa *decodingTreeNode ,_ffc code ,_cgb int ,_dbf int ){_fad :=_fgg (_ffc .Code ,_cgb );_cgb ++;if _fad ==1{if _efa .Right ==nil {_efa .Right =&decodingTreeNode {Val :_fad };
};if _cgb ==_ffc .BitsWritten {_efa .Right .RunLen =&_dbf ;_efa .Right .Code =&_ffc ;}else {_abca (_efa .Right ,_ffc ,_cgb ,_dbf );};}else {if _efa .Left ==nil {_efa .Left =&decodingTreeNode {Val :_fad };};if _cgb ==_ffc .BitsWritten {_efa .Left .RunLen =&_dbf ;
_efa .Left .Code =&_ffc ;}else {_abca (_efa .Left ,_ffc ,_cgb ,_dbf );};};};func _gfe (_fca []byte ,_fff int ,_gacf code )(bool ,int ){_gea :=_fff ;var (_fbaa uint16 ;_dbc int ;);_fbaa ,_dbc ,_fff =_acc (_fca ,_fff );if _dbc > 3{return false ,_gea ;};_fbaa >>=uint (3-_dbc );
_fbaa <<=3;if _fbaa !=_gacf .Code {return false ,_gea ;};return true ,_fff -3+_dbc ;};func _efbb (_bca []byte ,_eag int ,_eaa code )([]byte ,int ){_ead :=true ;var _gcg []byte ;_gcg ,_eag =_aaef (nil ,_eag ,_eaa );_bgg :=0;var _cbbe int ;for _bgg < len (_bca ){_cbbe ,_bgg =_ecac (_bca ,_ead ,_bgg );
_gcg ,_eag =_cdg (_gcg ,_eag ,_cbbe ,_ead );_ead =!_ead ;};return _gcg ,_eag %8;};func _abf (_dabe int )([]byte ,int ){var _efb []byte ;for _ggb :=0;_ggb < 2;_ggb ++{_efb ,_dabe =_aaef (_efb ,_dabe ,_aa );};return _efb ,_dabe %8;};func _abbf (_faga []byte ,_cbee ,_dbdg ,_gbe int )([]byte ,int ){_dfg :=_gdfe (_dbdg ,_gbe );
_faga ,_cbee =_aaef (_faga ,_cbee ,_dfg );return _faga ,_cbee ;};func (_gfg *Encoder )appendEncodedRow (_bdcb ,_afa []byte ,_fdc int )[]byte {if len (_bdcb )> 0&&_fdc !=0&&!_gfg .EncodedByteAlign {_bdcb [len (_bdcb )-1]=_bdcb [len (_bdcb )-1]|_afa [0];
_bdcb =append (_bdcb ,_afa [1:]...);}else {_bdcb =append (_bdcb ,_afa ...);};return _bdcb ;};func _cdg (_gada []byte ,_fcaf int ,_gff int ,_dba bool )([]byte ,int ){var (_cbd code ;_fbgg bool ;);for !_fbgg {_cbd ,_gff ,_fbgg =_efe (_gff ,_dba );_gada ,_fcaf =_aaef (_gada ,_fcaf ,_cbd );
};return _gada ,_fcaf ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_ec *Encoder )Decode (encoded []byte )([][]byte ,error ){if _ec .BlackIs1 {_fce =0;
_cga =1;}else {_fce =1;_cga =0;};if _ec .K ==0{return _ec .decodeG31D (encoded );};if _ec .K > 0{return _ec .decodeG32D (encoded );};if _ec .K < 4{return _ec .decodeG4 (encoded );};return nil ,nil ;};func (_def *Encoder )decodeRow1D (_dc []byte ,_geff int )([]byte ,int ){var _dbbf []byte ;
_agf :=true ;var _dbdc int ;_dbdc ,_geff =_adc (_dc ,_geff ,_agf );for _dbdc !=-1{_dbbf =_edf (_dbbf ,_agf ,_dbdc );if _dbdc < 64{if len (_dbbf )>=_def .Columns {break ;};_agf =!_agf ;};_dbdc ,_geff =_adc (_dc ,_geff ,_agf );};return _dbbf ,_geff ;};func _cb (_cdc [][]byte ,_bcg []byte ,_ca bool ,_df ,_gb int )([]byte ,int ){_cac :=_age (_bcg ,_cdc [len (_cdc )-1],_df ,_ca );
_ag :=_cac +_gb ;if _df ==-1{_bcg =_edf (_bcg ,_ca ,_ag -_df -1);}else {_bcg =_edf (_bcg ,_ca ,_ag -_df );};_df =_ag ;return _bcg ,_df ;};func (_cc *Encoder )decodeG31D (_bgd []byte )([][]byte ,error ){var _fg [][]byte ;var _cgc int ;for (_cgc /8)< len (_bgd ){var _aeg bool ;
_aeg ,_cgc =_geea (_bgd ,_cgc );if !_aeg {if _cc .EndOfLine {return nil ,_bc ;};}else {for _bbc :=0;_bbc < 5;_bbc ++{_aeg ,_cgc =_geea (_bgd ,_cgc );if !_aeg {if _bbc ==0{break ;};return nil ,_ded ;};};if _aeg {break ;};};var _fgf []byte ;_fgf ,_cgc =_cc .decodeRow1D (_bgd ,_cgc );
if _cc .EncodedByteAlign &&_cgc %8!=0{_cgc +=8-_cgc %8;};_fg =append (_fg ,_fgf );if _cc .Rows > 0&&!_cc .EndOfBlock &&len (_fg )>=_cc .Rows {break ;};};return _fg ,nil ;};func (_bdb *Encoder )encodeG31D (_ggd [][]byte )[]byte {var _fge []byte ;_cbc :=0;
for _dbg :=range _ggd {if _bdb .Rows > 0&&!_bdb .EndOfBlock &&_dbg ==_bdb .Rows {break ;};_aagd ,_gaa :=_efbb (_ggd [_dbg ],_cbc ,_aa );_fge =_bdb .appendEncodedRow (_fge ,_aagd ,_cbc );if _bdb .EncodedByteAlign {_gaa =0;};_cbc =_gaa ;};if _bdb .EndOfBlock {_deg ,_ :=_ebbd (_cbc );
_fge =_bdb .appendEncodedRow (_fge ,_deg ,_cbc );};return _fge ;};func _ccb (_agb uint16 ,_fcg int )(code ,bool ){_ ,_gac :=_fffb (_cg ,_agb ,_fcg );if _gac ==nil {return code {},false ;};return *_gac ,true ;};func _fgg (_bcc uint16 ,_afe int )byte {if _afe < 8{_bcc >>=8;
};_afe %=8;_fbd :=byte (0x01<<(7-uint (_afe )));return (byte (_bcc )&_fbd )>>(7-uint (_afe ));};func _ebbd (_bgdf int )([]byte ,int ){var _ffe []byte ;for _afb :=0;_afb < 6;_afb ++{_ffe ,_bgdf =_aaef (_ffe ,_bgdf ,_aa );};return _ffe ,_bgdf %8;};func _dab (_bcfe []byte ,_dd int )(bool ,int ){return _gfe (_bcfe ,_dd ,_eb )};
func _gce (_bbb int )([]byte ,int ){var _fdd []byte ;for _aff :=0;_aff < 6;_aff ++{_fdd ,_bbb =_aaef (_fdd ,_bbb ,_eb );};return _fdd ,_bbb %8;};func _ee (_dbb ,_agd []byte ,_ffb int ,_gad bool ,_aea int )([]byte ,int ,int ,error ){_cec :=_ffb ;var _bf error ;
_agd ,_ffb ,_bf =_dad (_dbb ,_agd ,_ffb ,_gad );if _bf !=nil {return _agd ,_cec ,_aea ,_bf ;};_gad =!_gad ;_agd ,_ffb ,_bf =_dad (_dbb ,_agd ,_ffb ,_gad );if _bf !=nil {return _agd ,_cec ,_aea ,_bf ;};_aea =len (_agd );return _agd ,_ffb ,_aea ,nil ;};func (_ef *Encoder )decodeG32D (_gefa []byte )([][]byte ,error ){var (_gf [][]byte ;
_fbgb int ;_bbcd error ;);_acg :for (_fbgb /8)< len (_gefa ){var _fa bool ;_fa ,_fbgb ,_bbcd =_ffg (_gefa ,_fbgb );if _bbcd !=nil {return nil ,_bbcd ;};if _fa {break ;};_fa ,_fbgb =_dab (_gefa ,_fbgb );if !_fa {if _ef .EndOfLine {return nil ,_bc ;};};var _ebg []byte ;
_ebg ,_fbgb =_ef .decodeRow1D (_gefa ,_fbgb );if _ef .EncodedByteAlign &&_fbgb %8!=0{_fbgb +=8-_fbgb %8;};if _ebg !=nil {_gf =append (_gf ,_ebg );};if _ef .Rows > 0&&!_ef .EndOfBlock &&len (_gf )>=_ef .Rows {break ;};for _cee :=1;_cee < _ef .K &&(_fbgb /8)< len (_gefa );
_cee ++{_fa ,_fbgb =_fda (_gefa ,_fbgb );if !_fa {_fa ,_fbgb ,_bbcd =_ffg (_gefa ,_fbgb );if _bbcd !=nil {return nil ,_bbcd ;};if _fa {break _acg ;}else {if _ef .EndOfLine {return nil ,_bc ;};};};var (_ed code ;_gaf bool ;);_eg :=true ;var _eae []byte ;
_ege :=-1;for _ed ,_fbgb ,_gaf =_gee (_gefa ,_fbgb );_gaf ;_ed ,_fbgb ,_gaf =_gee (_gefa ,_fbgb ){switch _ed {case _gg :_eae ,_ege =_dedf (_gf ,_eae ,_eg ,_ege );case _da :_eae ,_fbgb ,_ege ,_bbcd =_ee (_gefa ,_eae ,_fbgb ,_eg ,_ege );if _bbcd !=nil {return nil ,_bbcd ;
};case _ge :_eae ,_ege =_cb (_gf ,_eae ,_eg ,_ege ,0);_eg =!_eg ;case _ac :_eae ,_ege =_cb (_gf ,_eae ,_eg ,_ege ,1);_eg =!_eg ;case _ce :_eae ,_ege =_cb (_gf ,_eae ,_eg ,_ege ,2);_eg =!_eg ;case _fbg :_eae ,_ege =_cb (_gf ,_eae ,_eg ,_ege ,3);_eg =!_eg ;
case _gga :_eae ,_ege =_cb (_gf ,_eae ,_eg ,_ege ,-1);_eg =!_eg ;case _b :_eae ,_ege =_cb (_gf ,_eae ,_eg ,_ege ,-2);_eg =!_eg ;case _bg :_eae ,_ege =_cb (_gf ,_eae ,_eg ,_ege ,-3);_eg =!_eg ;};if len (_eae )>=_ef .Columns {break ;};};if _ef .EncodedByteAlign &&_fbgb %8!=0{_fbgb +=8-_fbgb %8;
};if _eae !=nil {_gf =append (_gf ,_eae );};if _ef .Rows > 0&&!_ef .EndOfBlock &&len (_gf )>=_ef .Rows {break _acg ;};};};return _gf ,nil ;};var (_bgc =_e .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");
_de =_e .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_bb =_e .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");
_bc =_e .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_ded =_e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ea =_e .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func (_fga *Encoder )decodeG4 (_fe []byte )([][]byte ,error ){_dg :=make ([]byte ,_fga .Columns );
for _edc :=range _dg {_dg [_edc ]=_fce ;};_cd :=make ([][]byte ,1);_cd [0]=_dg ;var (_aef bool ;_abc error ;_ccc int ;);for (_ccc /8)< len (_fe ){_aef ,_ccc ,_abc =_aae (_fe ,_ccc );if _abc !=nil {return nil ,_abc ;};if _aef {break ;};var (_fc code ;_fba bool ;
);_eac :=true ;var _fag []byte ;_cef :=-1;for _cef < _fga .Columns {_fc ,_ccc ,_fba =_gee (_fe ,_ccc );if !_fba {return nil ,_ea ;};switch _fc {case _gg :_fag ,_cef =_dedf (_cd ,_fag ,_eac ,_cef );case _da :_fag ,_ccc ,_cef ,_abc =_ee (_fe ,_fag ,_ccc ,_eac ,_cef );
if _abc !=nil {return nil ,_abc ;};case _ge :_fag ,_cef =_cb (_cd ,_fag ,_eac ,_cef ,0);_eac =!_eac ;case _ac :_fag ,_cef =_cb (_cd ,_fag ,_eac ,_cef ,1);_eac =!_eac ;case _ce :_fag ,_cef =_cb (_cd ,_fag ,_eac ,_cef ,2);_eac =!_eac ;case _fbg :_fag ,_cef =_cb (_cd ,_fag ,_eac ,_cef ,3);
_eac =!_eac ;case _gga :_fag ,_cef =_cb (_cd ,_fag ,_eac ,_cef ,-1);_eac =!_eac ;case _b :_fag ,_cef =_cb (_cd ,_fag ,_eac ,_cef ,-2);_eac =!_eac ;case _bg :_fag ,_cef =_cb (_cd ,_fag ,_eac ,_cef ,-3);_eac =!_eac ;};if len (_fag )>=_fga .Columns {break ;
};};if _fga .EncodedByteAlign &&_ccc %8!=0{_ccc +=8-_ccc %8;};_cd =append (_cd ,_fag );if _fga .Rows > 0&&!_fga .EndOfBlock &&len (_cd )>=(_fga .Rows +1){break ;};};_cd =_cd [1:];return _cd ,nil ;};func _acc (_be []byte ,_edb int )(uint16 ,int ,int ){_cbg :=_edb ;
_eca :=_edb /8;_edb %=8;if _eca >=len (_be ){return 0,16,_cbg ;};_bcf :=byte (0xFF>>uint (_edb ));_bfb :=uint16 ((_be [_eca ]&_bcf )<<uint (_edb ))<<8;_ebgd :=8-_edb ;_eca ++;_edb =0;if _eca >=len (_be ){return _bfb >>(16-uint (_ebgd )),16-_ebgd ,_cbg +_ebgd ;
};_bfb |=uint16 (_be [_eca ])<<(8-uint (_ebgd ));_ebgd +=8;_eca ++;_edb =0;if _eca >=len (_be ){return _bfb >>(16-uint (_ebgd )),16-_ebgd ,_cbg +_ebgd ;};if _ebgd ==16{return _bfb ,0,_cbg +_ebgd ;};_edg :=16-_ebgd ;_bfb |=uint16 (_be [_eca ]>>(8-uint (_edg )));
return _bfb ,0,_cbg +16;};func _fffb (_daa *decodingTreeNode ,_acd uint16 ,_bdc int )(*int ,*code ){if _daa ==nil {return nil ,nil ;};if _bdc ==16{return _daa .RunLen ,_daa .Code ;};_aag :=_fgg (_acd ,_bdc );_bdc ++;var _bae *int ;var _dadd *code ;if _aag ==1{_bae ,_dadd =_fffb (_daa .Right ,_acd ,_bdc );
}else {_bae ,_dadd =_fffb (_daa .Left ,_acd ,_bdc );};if _bae ==nil {_bae =_daa .RunLen ;_dadd =_daa .Code ;};return _bae ,_dadd ;};