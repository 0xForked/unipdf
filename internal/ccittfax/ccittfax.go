//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_gg "errors";_a "math";);var (_ae =_gg .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_bbd =_gg .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");
_ff =_gg .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_bf =_gg .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_ef =_gg .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ec =_gg .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;
Right *decodingTreeNode ;};func init (){_f =make (map[int ]code );_f [0]=code {Code :13<<8|3<<6,BitsWritten :10};_f [1]=code {Code :2<<(5+8),BitsWritten :3};_f [2]=code {Code :3<<(6+8),BitsWritten :2};_f [3]=code {Code :2<<(6+8),BitsWritten :2};_f [4]=code {Code :3<<(5+8),BitsWritten :3};
_f [5]=code {Code :3<<(4+8),BitsWritten :4};_f [6]=code {Code :2<<(4+8),BitsWritten :4};_f [7]=code {Code :3<<(3+8),BitsWritten :5};_f [8]=code {Code :5<<(2+8),BitsWritten :6};_f [9]=code {Code :4<<(2+8),BitsWritten :6};_f [10]=code {Code :4<<(1+8),BitsWritten :7};
_f [11]=code {Code :5<<(1+8),BitsWritten :7};_f [12]=code {Code :7<<(1+8),BitsWritten :7};_f [13]=code {Code :4<<8,BitsWritten :8};_f [14]=code {Code :7<<8,BitsWritten :8};_f [15]=code {Code :12<<8,BitsWritten :9};_f [16]=code {Code :5<<8|3<<6,BitsWritten :10};
_f [17]=code {Code :6<<8,BitsWritten :10};_f [18]=code {Code :2<<8,BitsWritten :10};_f [19]=code {Code :12<<8|7<<5,BitsWritten :11};_f [20]=code {Code :13<<8,BitsWritten :11};_f [21]=code {Code :13<<8|4<<5,BitsWritten :11};_f [22]=code {Code :6<<8|7<<5,BitsWritten :11};
_f [23]=code {Code :5<<8,BitsWritten :11};_f [24]=code {Code :2<<8|7<<5,BitsWritten :11};_f [25]=code {Code :3<<8,BitsWritten :11};_f [26]=code {Code :12<<8|10<<4,BitsWritten :12};_f [27]=code {Code :12<<8|11<<4,BitsWritten :12};_f [28]=code {Code :12<<8|12<<4,BitsWritten :12};
_f [29]=code {Code :12<<8|13<<4,BitsWritten :12};_f [30]=code {Code :6<<8|8<<4,BitsWritten :12};_f [31]=code {Code :6<<8|9<<4,BitsWritten :12};_f [32]=code {Code :6<<8|10<<4,BitsWritten :12};_f [33]=code {Code :6<<8|11<<4,BitsWritten :12};_f [34]=code {Code :13<<8|2<<4,BitsWritten :12};
_f [35]=code {Code :13<<8|3<<4,BitsWritten :12};_f [36]=code {Code :13<<8|4<<4,BitsWritten :12};_f [37]=code {Code :13<<8|5<<4,BitsWritten :12};_f [38]=code {Code :13<<8|6<<4,BitsWritten :12};_f [39]=code {Code :13<<8|7<<4,BitsWritten :12};_f [40]=code {Code :6<<8|12<<4,BitsWritten :12};
_f [41]=code {Code :6<<8|13<<4,BitsWritten :12};_f [42]=code {Code :13<<8|10<<4,BitsWritten :12};_f [43]=code {Code :13<<8|11<<4,BitsWritten :12};_f [44]=code {Code :5<<8|4<<4,BitsWritten :12};_f [45]=code {Code :5<<8|5<<4,BitsWritten :12};_f [46]=code {Code :5<<8|6<<4,BitsWritten :12};
_f [47]=code {Code :5<<8|7<<4,BitsWritten :12};_f [48]=code {Code :6<<8|4<<4,BitsWritten :12};_f [49]=code {Code :6<<8|5<<4,BitsWritten :12};_f [50]=code {Code :5<<8|2<<4,BitsWritten :12};_f [51]=code {Code :5<<8|3<<4,BitsWritten :12};_f [52]=code {Code :2<<8|4<<4,BitsWritten :12};
_f [53]=code {Code :3<<8|7<<4,BitsWritten :12};_f [54]=code {Code :3<<8|8<<4,BitsWritten :12};_f [55]=code {Code :2<<8|7<<4,BitsWritten :12};_f [56]=code {Code :2<<8|8<<4,BitsWritten :12};_f [57]=code {Code :5<<8|8<<4,BitsWritten :12};_f [58]=code {Code :5<<8|9<<4,BitsWritten :12};
_f [59]=code {Code :2<<8|11<<4,BitsWritten :12};_f [60]=code {Code :2<<8|12<<4,BitsWritten :12};_f [61]=code {Code :5<<8|10<<4,BitsWritten :12};_f [62]=code {Code :6<<8|6<<4,BitsWritten :12};_f [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ad =make (map[int ]code );
_ad [0]=code {Code :53<<8,BitsWritten :8};_ad [1]=code {Code :7<<(2+8),BitsWritten :6};_ad [2]=code {Code :7<<(4+8),BitsWritten :4};_ad [3]=code {Code :8<<(4+8),BitsWritten :4};_ad [4]=code {Code :11<<(4+8),BitsWritten :4};_ad [5]=code {Code :12<<(4+8),BitsWritten :4};
_ad [6]=code {Code :14<<(4+8),BitsWritten :4};_ad [7]=code {Code :15<<(4+8),BitsWritten :4};_ad [8]=code {Code :19<<(3+8),BitsWritten :5};_ad [9]=code {Code :20<<(3+8),BitsWritten :5};_ad [10]=code {Code :7<<(3+8),BitsWritten :5};_ad [11]=code {Code :8<<(3+8),BitsWritten :5};
_ad [12]=code {Code :8<<(2+8),BitsWritten :6};_ad [13]=code {Code :3<<(2+8),BitsWritten :6};_ad [14]=code {Code :52<<(2+8),BitsWritten :6};_ad [15]=code {Code :53<<(2+8),BitsWritten :6};_ad [16]=code {Code :42<<(2+8),BitsWritten :6};_ad [17]=code {Code :43<<(2+8),BitsWritten :6};
_ad [18]=code {Code :39<<(1+8),BitsWritten :7};_ad [19]=code {Code :12<<(1+8),BitsWritten :7};_ad [20]=code {Code :8<<(1+8),BitsWritten :7};_ad [21]=code {Code :23<<(1+8),BitsWritten :7};_ad [22]=code {Code :3<<(1+8),BitsWritten :7};_ad [23]=code {Code :4<<(1+8),BitsWritten :7};
_ad [24]=code {Code :40<<(1+8),BitsWritten :7};_ad [25]=code {Code :43<<(1+8),BitsWritten :7};_ad [26]=code {Code :19<<(1+8),BitsWritten :7};_ad [27]=code {Code :36<<(1+8),BitsWritten :7};_ad [28]=code {Code :24<<(1+8),BitsWritten :7};_ad [29]=code {Code :2<<8,BitsWritten :8};
_ad [30]=code {Code :3<<8,BitsWritten :8};_ad [31]=code {Code :26<<8,BitsWritten :8};_ad [32]=code {Code :27<<8,BitsWritten :8};_ad [33]=code {Code :18<<8,BitsWritten :8};_ad [34]=code {Code :19<<8,BitsWritten :8};_ad [35]=code {Code :20<<8,BitsWritten :8};
_ad [36]=code {Code :21<<8,BitsWritten :8};_ad [37]=code {Code :22<<8,BitsWritten :8};_ad [38]=code {Code :23<<8,BitsWritten :8};_ad [39]=code {Code :40<<8,BitsWritten :8};_ad [40]=code {Code :41<<8,BitsWritten :8};_ad [41]=code {Code :42<<8,BitsWritten :8};
_ad [42]=code {Code :43<<8,BitsWritten :8};_ad [43]=code {Code :44<<8,BitsWritten :8};_ad [44]=code {Code :45<<8,BitsWritten :8};_ad [45]=code {Code :4<<8,BitsWritten :8};_ad [46]=code {Code :5<<8,BitsWritten :8};_ad [47]=code {Code :10<<8,BitsWritten :8};
_ad [48]=code {Code :11<<8,BitsWritten :8};_ad [49]=code {Code :82<<8,BitsWritten :8};_ad [50]=code {Code :83<<8,BitsWritten :8};_ad [51]=code {Code :84<<8,BitsWritten :8};_ad [52]=code {Code :85<<8,BitsWritten :8};_ad [53]=code {Code :36<<8,BitsWritten :8};
_ad [54]=code {Code :37<<8,BitsWritten :8};_ad [55]=code {Code :88<<8,BitsWritten :8};_ad [56]=code {Code :89<<8,BitsWritten :8};_ad [57]=code {Code :90<<8,BitsWritten :8};_ad [58]=code {Code :91<<8,BitsWritten :8};_ad [59]=code {Code :74<<8,BitsWritten :8};
_ad [60]=code {Code :75<<8,BitsWritten :8};_ad [61]=code {Code :50<<8,BitsWritten :8};_ad [62]=code {Code :51<<8,BitsWritten :8};_ad [63]=code {Code :52<<8,BitsWritten :8};_b =make (map[int ]code );_b [64]=code {Code :3<<8|3<<6,BitsWritten :10};_b [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_b [192]=code {Code :12<<8|9<<4,BitsWritten :12};_b [256]=code {Code :5<<8|11<<4,BitsWritten :12};_b [320]=code {Code :3<<8|3<<4,BitsWritten :12};_b [384]=code {Code :3<<8|4<<4,BitsWritten :12};_b [448]=code {Code :3<<8|5<<4,BitsWritten :12};_b [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_b [576]=code {Code :3<<8|13<<3,BitsWritten :13};_b [640]=code {Code :2<<8|10<<3,BitsWritten :13};_b [704]=code {Code :2<<8|11<<3,BitsWritten :13};_b [768]=code {Code :2<<8|12<<3,BitsWritten :13};_b [832]=code {Code :2<<8|13<<3,BitsWritten :13};_b [896]=code {Code :3<<8|18<<3,BitsWritten :13};
_b [960]=code {Code :3<<8|19<<3,BitsWritten :13};_b [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_b [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_b [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_b [1216]=code {Code :119<<3,BitsWritten :13};_b [1280]=code {Code :2<<8|18<<3,BitsWritten :13};
_b [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_b [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_b [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_b [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_b [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_b [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_b [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_e =make (map[int ]code );_e [64]=code {Code :27<<(3+8),BitsWritten :5};_e [128]=code {Code :18<<(3+8),BitsWritten :5};_e [192]=code {Code :23<<(2+8),BitsWritten :6};_e [256]=code {Code :55<<(1+8),BitsWritten :7};
_e [320]=code {Code :54<<8,BitsWritten :8};_e [384]=code {Code :55<<8,BitsWritten :8};_e [448]=code {Code :100<<8,BitsWritten :8};_e [512]=code {Code :101<<8,BitsWritten :8};_e [576]=code {Code :104<<8,BitsWritten :8};_e [640]=code {Code :103<<8,BitsWritten :8};
_e [704]=code {Code :102<<8,BitsWritten :9};_e [768]=code {Code :102<<8|1<<7,BitsWritten :9};_e [832]=code {Code :105<<8,BitsWritten :9};_e [896]=code {Code :105<<8|1<<7,BitsWritten :9};_e [960]=code {Code :106<<8,BitsWritten :9};_e [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_e [1088]=code {Code :107<<8,BitsWritten :9};_e [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_e [1216]=code {Code :108<<8,BitsWritten :9};_e [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_e [1344]=code {Code :109<<8,BitsWritten :9};_e [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_e [1472]=code {Code :76<<8,BitsWritten :9};_e [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_e [1600]=code {Code :77<<8,BitsWritten :9};_e [1664]=code {Code :24<<(2+8),BitsWritten :6};_e [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ab =make (map[int ]code );
_ab [1792]=code {Code :1<<8,BitsWritten :11};_ab [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ab [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ab [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ab [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ab [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_ab [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ab [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ab [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ab [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ab [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_ab [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ab [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_bb =make (map[int ]byte );_bb [0]=0xFF;_bb [1]=0xFE;_bb [2]=0xFC;_bb [3]=0xF8;_bb [4]=0xF0;_bb [5]=0xE0;_bb [6]=0xC0;_bb [7]=0x80;_bb [8]=0x00;};func _cfgd (_ceb ,_fbc []byte ,_gbbb int )int {_gcf :=_adfe (_fbc ,_gbbb );
if _gcf < len (_fbc )&&(_gbbb ==-1&&_fbc [_gcf ]==_abb ||_gbbb >=0&&_gbbb < len (_ceb )&&_ceb [_gbbb ]==_fbc [_gcf ]||_gbbb >=len (_ceb )&&_ceb [_gbbb -1]!=_fbc [_gcf ]){_gcf =_adfe (_fbc ,_gcf );};return _gcf ;};func _fca (_bbe ,_dfb []byte ,_gce int ,_da bool ,_fgf int )([]byte ,int ,int ,error ){_abd :=_gce ;
var _bge error ;_dfb ,_gce ,_bge =_eeg (_bbe ,_dfb ,_gce ,_da );if _bge !=nil {return _dfb ,_abd ,_fgf ,_bge ;};_da =!_da ;_dfb ,_gce ,_bge =_eeg (_bbe ,_dfb ,_gce ,_da );if _bge !=nil {return _dfb ,_abd ,_fgf ,_bge ;};_fgf =len (_dfb );return _dfb ,_gce ,_fgf ,nil ;
};func init (){for _abe ,_ga :=range _ad {_eeea (_cd ,_ga ,0,_abe );};for _agb ,_bfe :=range _e {_eeea (_cd ,_bfe ,0,_agb );};for _aea ,_fdd :=range _f {_eeea (_dd ,_fdd ,0,_aea );};for _bd ,_beb :=range _b {_eeea (_dd ,_beb ,0,_bd );};for _ggc ,_ggd :=range _ab {_eeea (_cd ,_ggd ,0,_ggc );
_eeea (_dd ,_ggd ,0,_ggc );};_eeea (_ee ,_ed ,0,0);_eeea (_ee ,_c ,0,0);_eeea (_ee ,_edd ,0,0);_eeea (_ee ,_be ,0,0);_eeea (_ee ,_gga ,0,0);_eeea (_ee ,_af ,0,0);_eeea (_ee ,_adf ,0,0);_eeea (_ee ,_df ,0,0);_eeea (_ee ,_de ,0,0);};var (_cd =&decodingTreeNode {Val :255};
_dd =&decodingTreeNode {Val :255};_ee =&decodingTreeNode {Val :255};);func (_bfc *Encoder )decodeRow1D (_def []byte ,_afca int )([]byte ,int ){var _dgd []byte ;_fdc :=true ;var _ffa int ;_ffa ,_afca =_dge (_def ,_afca ,_fdc );for _ffa !=-1{_dgd =_gab (_dgd ,_fdc ,_ffa );
if _ffa < 64{if len (_dgd )>=_bfc .Columns {break ;};_fdc =!_fdc ;};_ffa ,_afca =_dge (_def ,_afca ,_fdc );};return _dgd ,_afca ;};func _gab (_dgb []byte ,_bee bool ,_dbd int )[]byte {if _dbd < 0{return _dgb ;};_dbg :=make ([]byte ,_dbd );if _bee {for _bea :=0;
_bea < len (_dbg );_bea ++{_dbg [_bea ]=_abb ;};}else {for _ccg :=0;_ccg < len (_dbg );_ccg ++{_dbg [_ccg ]=_bfg ;};};_dgb =append (_dgb ,_dbg ...);return _dgb ;};func _eeg (_fa ,_dcdd []byte ,_fba int ,_gda bool )([]byte ,int ,error ){_fag :=_fba ;var _ge int ;
for _ge ,_fba =_dge (_fa ,_fba ,_gda );_ge !=-1;_ge ,_fba =_dge (_fa ,_fba ,_gda ){_dcdd =_gab (_dcdd ,_gda ,_ge );if _ge < 64{break ;};};if _ge ==-1{return _dcdd ,_fag ,_ff ;};return _dcdd ,_fba ,nil ;};func (_aa *Encoder )Decode (encoded []byte )([][]byte ,error ){if _aa .BlackIs1 {_abb =0;
_bfg =1;}else {_abb =1;_bfg =0;};if _aa .K ==0{return _aa .decodeG31D (encoded );};if _aa .K > 0{return _aa .decodeG32D (encoded );};if _aa .K < 4{return _aa .decodeG4 (encoded );};return nil ,nil ;};func _dcce (_ggb int ,_adg bool )(code ,int ,bool ){if _ggb < 64{if _adg {return _ad [_ggb ],0,true ;
};return _f [_ggb ],0,true ;};_fga :=_ggb /64;if _fga > 40{return _ab [2560],_ggb -2560,false ;};if _fga > 27{return _ab [_fga *64],_ggb -_fga *64,false ;};if _adg {return _e [_fga *64],_ggb -_fga *64,false ;};return _b [_fga *64],_ggb -_fga *64,false ;
};func _gfd (_bfcc []byte ,_fedc int ,_fgda int ,_gdf bool )([]byte ,int ){var (_ffcd code ;_gcb bool ;);for !_gcb {_ffcd ,_fgda ,_gcb =_dcce (_fgda ,_gdf );_bfcc ,_fedc =_fgc (_bfcc ,_fedc ,_ffcd );};return _bfcc ,_fedc ;};func _bff (_aeab []byte ,_agc int )(bool ,int ,error ){_dca :=_agc ;
var _cgc =false ;for _ecgf :=0;_ecgf < 6;_ecgf ++{_cgc ,_agc =_bcg (_aeab ,_agc );if !_cgc {if _ecgf > 1{return false ,_dca ,_bbd ;};_agc =_dca ;break ;};};return _cgc ,_agc ,nil ;};type code struct{Code uint16 ;BitsWritten int ;};func _cbf (_bae []byte ,_ac int ,_dcb code )(bool ,int ){_eede :=_ac ;
var (_fbg uint16 ;_eea int ;);_fbg ,_eea ,_ac =_ega (_bae ,_ac );if _eea > 3{return false ,_eede ;};_fbg >>=uint (3-_eea );_fbg <<=3;if _fbg !=_dcb .Code {return false ,_eede ;};return true ,_ac -3+_eea ;};func _eba (_debb ,_bfeda int )code {var _eff code ;
switch _bfeda -_debb {case -1:_eff =_be ;case -2:_eff =_gga ;case -3:_eff =_af ;case 0:_eff =_edd ;case 1:_eff =_adf ;case 2:_eff =_df ;case 3:_eff =_de ;};return _eff ;};func _adfba (_fgb [][]byte )[][]byte {_dfdb :=make ([]byte ,len (_fgb [0]));for _dbe :=range _dfdb {_dfdb [_dbe ]=_abb ;
};_fgb =append (_fgb ,[]byte {});for _cac :=len (_fgb )-1;_cac > 0;_cac --{_fgb [_cac ]=_fgb [_cac -1];};_fgb [0]=_dfdb ;return _fgb ;};func _fbe (_bade []byte ,_beg int )(bool ,int ){_egcd :=_beg ;var (_egba uint16 ;_gae int ;);_egba ,_gae ,_beg =_ega (_bade ,_beg );
if _gae > 4{return false ,_egcd ;};_egba >>=uint (4-_gae );_egba <<=4;if _egba !=_fd .Code {return false ,_egcd ;};return true ,_beg -4+_gae ;};func _gca (_fbf []byte ,_gfe int )([]byte ,int ){return _fgc (_fbf ,_gfe ,_ed )};func (_ecg *Encoder )decodeG32D (_abc []byte )([][]byte ,error ){var (_bc [][]byte ;
_bba int ;_fed error ;);_gc :for (_bba /8)< len (_abc ){var _dcc bool ;_dcc ,_bba ,_fed =_bff (_abc ,_bba );if _fed !=nil {return nil ,_fed ;};if _dcc {break ;};_dcc ,_bba =_bcg (_abc ,_bba );if !_dcc {if _ecg .EndOfLine {return nil ,_bf ;};};var _eddc []byte ;
_eddc ,_bba =_ecg .decodeRow1D (_abc ,_bba );if _ecg .EncodedByteAlign &&_bba %8!=0{_bba +=8-_bba %8;};if _eddc !=nil {_bc =append (_bc ,_eddc );};if _ecg .Rows > 0&&!_ecg .EndOfBlock &&len (_bc )>=_ecg .Rows {break ;};for _aga :=1;_aga < _ecg .K &&(_bba /8)< len (_abc );
_aga ++{_dcc ,_bba =_bdg (_abc ,_bba );if !_dcc {_dcc ,_bba ,_fed =_bff (_abc ,_bba );if _fed !=nil {return nil ,_fed ;};if _dcc {break _gc ;}else {if _ecg .EndOfLine {return nil ,_bf ;};};};var (_ce code ;_baf bool ;);_dda :=true ;var _cdf []byte ;_bbab :=-1;
for _ce ,_bba ,_baf =_dba (_abc ,_bba );_baf ;_ce ,_bba ,_baf =_dba (_abc ,_bba ){switch _ce {case _ed :_cdf ,_bbab =_bg (_bc ,_cdf ,_dda ,_bbab );case _c :_cdf ,_bba ,_bbab ,_fed =_fca (_abc ,_cdf ,_bba ,_dda ,_bbab );if _fed !=nil {return nil ,_fed ;
};case _edd :_cdf ,_bbab =_ea (_bc ,_cdf ,_dda ,_bbab ,0);_dda =!_dda ;case _be :_cdf ,_bbab =_ea (_bc ,_cdf ,_dda ,_bbab ,1);_dda =!_dda ;case _gga :_cdf ,_bbab =_ea (_bc ,_cdf ,_dda ,_bbab ,2);_dda =!_dda ;case _af :_cdf ,_bbab =_ea (_bc ,_cdf ,_dda ,_bbab ,3);
_dda =!_dda ;case _adf :_cdf ,_bbab =_ea (_bc ,_cdf ,_dda ,_bbab ,-1);_dda =!_dda ;case _df :_cdf ,_bbab =_ea (_bc ,_cdf ,_dda ,_bbab ,-2);_dda =!_dda ;case _de :_cdf ,_bbab =_ea (_bc ,_cdf ,_dda ,_bbab ,-3);_dda =!_dda ;};if len (_cdf )>=_ecg .Columns {break ;
};};if _ecg .EncodedByteAlign &&_bba %8!=0{_bba +=8-_bba %8;};if _cdf !=nil {_bc =append (_bc ,_cdf );};if _ecg .Rows > 0&&!_ecg .EndOfBlock &&len (_bc )>=_ecg .Rows {break _gc ;};};};return _bc ,nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;
Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _bdg (_bgf []byte ,_efg int )(bool ,int ){return _cbf (_bgf ,_efg ,_ba )};func _bg (_cgf [][]byte ,_cabc []byte ,_caf bool ,_bca int )([]byte ,int ){_aac :=_ffcc (_cabc ,_cgf [len (_cgf )-1],_bca ,_caf );
_agg :=_adfe (_cgf [len (_cgf )-1],_aac );if _bca ==-1{_cabc =_gab (_cabc ,_caf ,_agg -_bca -1);}else {_cabc =_gab (_cabc ,_caf ,_agg -_bca );};_bca =_agg ;return _cabc ,_bca ;};func (_abdc *Encoder )encodeG31D (_deb [][]byte )[]byte {var _dcae []byte ;
_afa :=0;for _gcge :=range _deb {if _abdc .Rows > 0&&!_abdc .EndOfBlock &&_gcge ==_abdc .Rows {break ;};_ggf ,_fcaa :=_abg (_deb [_gcge ],_afa ,_fd );_dcae =_abdc .appendEncodedRow (_dcae ,_ggf ,_afa );if _abdc .EncodedByteAlign {_fcaa =0;};_afa =_fcaa ;
};if _abdc .EndOfBlock {_cbfb ,_ :=_dce (_afa );_dcae =_abdc .appendEncodedRow (_dcae ,_cbfb ,_afa );};return _dcae ;};func _dfd (_cbd uint16 ,_fee int ,_ecb bool )(int ,code ){var _cbdd *int ;var _eed *code ;if _ecb {_cbdd ,_eed =_gffa (_cd ,_cbd ,_fee );
}else {_cbdd ,_eed =_gffa (_dd ,_cbd ,_fee );};if _cbdd ==nil {return -1,code {};};return *_cbdd ,*_eed ;};func _eeea (_fdf *decodingTreeNode ,_dgc code ,_aggb int ,_dcg int ){_dbdb :=_ded (_dgc .Code ,_aggb );_aggb ++;if _dbdb ==1{if _fdf .Right ==nil {_fdf .Right =&decodingTreeNode {Val :_dbdb };
};if _aggb ==_dgc .BitsWritten {_fdf .Right .RunLen =&_dcg ;_fdf .Right .Code =&_dgc ;}else {_eeea (_fdf .Right ,_dgc ,_aggb ,_dcg );};}else {if _fdf .Left ==nil {_fdf .Left =&decodingTreeNode {Val :_dbdb };};if _aggb ==_dgc .BitsWritten {_fdf .Left .RunLen =&_dcg ;
_fdf .Left .Code =&_dgc ;}else {_eeea (_fdf .Left ,_dgc ,_aggb ,_dcg );};};};func _gffa (_fdcg *decodingTreeNode ,_bdb uint16 ,_efef int )(*int ,*code ){if _fdcg ==nil {return nil ,nil ;};if _efef ==16{return _fdcg .RunLen ,_fdcg .Code ;};_cde :=_ded (_bdb ,_efef );
_efef ++;var _bac *int ;var _bebd *code ;if _cde ==1{_bac ,_bebd =_gffa (_fdcg .Right ,_bdb ,_efef );}else {_bac ,_bebd =_gffa (_fdcg .Left ,_bdb ,_efef );};if _bac ==nil {_bac =_fdcg .RunLen ;_bebd =_fdcg .Code ;};return _bac ,_bebd ;};func _dba (_gdg []byte ,_gef int )(code ,int ,bool ){var (_aggf uint16 ;
_dfe int ;_cc int ;);_cc =_gef ;_aggf ,_dfe ,_ =_ega (_gdg ,_gef );_gcg ,_egc :=_gb (_aggf ,_dfe );if !_egc {return code {},_cc ,false ;};return _gcg ,_cc +_gcg .BitsWritten ,true ;};func (_cf *Encoder )encodeG32D (_faed [][]byte )[]byte {var _ecd []byte ;
var _ggae int ;for _add :=0;_add < len (_faed );_add +=_cf .K {if _cf .Rows > 0&&!_cf .EndOfBlock &&_add ==_cf .Rows {break ;};_eeb ,_ffe :=_abg (_faed [_add ],_ggae ,_d );_ecd =_cf .appendEncodedRow (_ecd ,_eeb ,_ggae );if _cf .EncodedByteAlign {_ffe =0;
};_ggae =_ffe ;for _ecf :=_add +1;_ecf < (_add +_cf .K )&&_ecf < len (_faed );_ecf ++{if _cf .Rows > 0&&!_cf .EndOfBlock &&_ecf ==_cf .Rows {break ;};_ccgf ,_gbb :=_fgc (nil ,_ggae ,_ba );var _bcf ,_afce ,_fcdf int ;_dedf :=-1;for _dedf < len (_faed [_ecf ]){_bcf =_adfe (_faed [_ecf ],_dedf );
_afce =_cfgd (_faed [_ecf ],_faed [_ecf -1],_dedf );_fcdf =_adfe (_faed [_ecf -1],_afce );if _fcdf < _bcf {_ccgf ,_gbb =_gca (_ccgf ,_gbb );_dedf =_fcdf ;}else {if _a .Abs (float64 (_afce -_bcf ))> 3{_ccgf ,_gbb ,_dedf =_fcbb (_faed [_ecf ],_ccgf ,_gbb ,_dedf ,_bcf );
}else {_ccgf ,_gbb =_gaeg (_ccgf ,_gbb ,_bcf ,_afce );_dedf =_bcf ;};};};_ecd =_cf .appendEncodedRow (_ecd ,_ccgf ,_ggae );if _cf .EncodedByteAlign {_gbb =0;};_ggae =_gbb %8;};};if _cf .EndOfBlock {_gcgeb ,_ :=_cbb (_ggae );_ecd =_cf .appendEncodedRow (_ecd ,_gcgeb ,_ggae );
};return _ecd ;};func (_dg *Encoder )decodeG31D (_fc []byte )([][]byte ,error ){var _adff [][]byte ;var _fe int ;for (_fe /8)< len (_fc ){var _fg bool ;_fg ,_fe =_fbe (_fc ,_fe );if !_fg {if _dg .EndOfLine {return nil ,_bf ;};}else {for _dc :=0;_dc < 5;
_dc ++{_fg ,_fe =_fbe (_fc ,_fe );if !_fg {if _dc ==0{break ;};return nil ,_ef ;};};if _fg {break ;};};var _eb []byte ;_eb ,_fe =_dg .decodeRow1D (_fc ,_fe );if _dg .EncodedByteAlign &&_fe %8!=0{_fe +=8-_fe %8;};_adff =append (_adff ,_eb );if _dg .Rows > 0&&!_dg .EndOfBlock &&len (_adff )>=_dg .Rows {break ;
};};return _adff ,nil ;};func _cbb (_cgd int )([]byte ,int ){var _gefa []byte ;for _ege :=0;_ege < 6;_ege ++{_gefa ,_cgd =_fgc (_gefa ,_cgd ,_d );};return _gefa ,_cgd %8;};func _ea (_cab [][]byte ,_cg []byte ,_dcd bool ,_eg ,_dccd int )([]byte ,int ){_fb :=_ffcc (_cg ,_cab [len (_cab )-1],_eg ,_dcd );
_bfed :=_fb +_dccd ;if _eg ==-1{_cg =_gab (_cg ,_dcd ,_bfed -_eg -1);}else {_cg =_gab (_cg ,_dcd ,_bfed -_eg );};_eg =_bfed ;return _cg ,_eg ;};func _adfe (_gdgf []byte ,_ccb int )int {if _ccb >=len (_gdgf ){return _ccb ;};if _ccb < -1{_ccb =-1;};var _cfg byte ;
if _ccb > -1{_cfg =_gdgf [_ccb ];}else {_cfg =_abb ;};_fdg :=_ccb +1;for _fdg < len (_gdgf ){if _gdgf [_fdg ]!=_cfg {break ;};_fdg ++;};return _fdg ;};func (_efea *Encoder )Encode (pixels [][]byte )[]byte {if _efea .BlackIs1 {_abb =0;_bfg =1;}else {_abb =1;
_bfg =0;};if _efea .K ==0{return _efea .encodeG31D (pixels );};if _efea .K > 0{return _efea .encodeG32D (pixels );};if _efea .K < 0{return _efea .encodeG4 (pixels );};return nil ;};func _bdda (_cecg []byte ,_cbgg bool ,_dadc int )(int ,int ){_abeb :=0;
for _dadc < len (_cecg ){if _cbgg {if _cecg [_dadc ]!=_abb {break ;};}else {if _cecg [_dadc ]!=_bfg {break ;};};_abeb ++;_dadc ++;};return _abeb ,_dadc ;};var (_f map[int ]code ;_ad map[int ]code ;_b map[int ]code ;_e map[int ]code ;_ab map[int ]code ;
_bb map[int ]byte ;_fd =code {Code :1<<4,BitsWritten :12};_d =code {Code :3<<3,BitsWritten :13};_ba =code {Code :2<<3,BitsWritten :13};_ed =code {Code :1<<12,BitsWritten :4};_c =code {Code :1<<13,BitsWritten :3};_edd =code {Code :1<<15,BitsWritten :1};
_be =code {Code :3<<13,BitsWritten :3};_gga =code {Code :3<<10,BitsWritten :6};_af =code {Code :3<<9,BitsWritten :7};_adf =code {Code :2<<13,BitsWritten :3};_df =code {Code :2<<10,BitsWritten :6};_de =code {Code :2<<9,BitsWritten :7};);func _ded (_fgfe uint16 ,_bfee int )byte {if _bfee < 8{_fgfe >>=8;
};_bfee %=8;_afc :=byte (0x01<<(7-uint (_bfee )));return (byte (_fgfe )&_afc )>>(7-uint (_bfee ));};func _dge (_bec []byte ,_ede int ,_eac bool )(int ,int ){var (_ebf uint16 ;_cga int ;_ddd int ;);_ddd =_ede ;_ebf ,_cga ,_ =_ega (_bec ,_ede );_fgg ,_dad :=_dfd (_ebf ,_cga ,_eac );
if _fgg ==-1{return -1,_ddd ;};return _fgg ,_ddd +_dad .BitsWritten ;};func (_gffb *Encoder )appendEncodedRow (_acd ,_gbe []byte ,_fff int )[]byte {if len (_acd )> 0&&_fff !=0&&!_gffb .EncodedByteAlign {_acd [len (_acd )-1]=_acd [len (_acd )-1]|_gbe [0];
_acd =append (_acd ,_gbe [1:]...);}else {_acd =append (_acd ,_gbe ...);};return _acd ;};func _fcbb (_ggbb ,_dgfc []byte ,_ebc ,_geg ,_becb int )([]byte ,int ,int ){_gfa :=_adfe (_ggbb ,_becb );_eaf :=_geg >=0&&_ggbb [_geg ]==_abb ||_geg ==-1;_dgfc ,_ebc =_fgc (_dgfc ,_ebc ,_c );
var _egbg int ;if _geg > -1{_egbg =_becb -_geg ;}else {_egbg =_becb -_geg -1;};_dgfc ,_ebc =_gfd (_dgfc ,_ebc ,_egbg ,_eaf );_eaf =!_eaf ;_fgca :=_gfa -_becb ;_dgfc ,_ebc =_gfd (_dgfc ,_ebc ,_fgca ,_eaf );_geg =_gfa ;return _dgfc ,_ebc ,_geg ;};func _fbae (_cb []byte ,_cbg int )(bool ,int ,error ){_fcb :=_cbg ;
var _bad bool ;_bad ,_cbg =_fbe (_cb ,_cbg );if _bad {_bad ,_cbg =_fbe (_cb ,_cbg );if _bad {return true ,_cbg ,nil ;};return false ,_fcb ,_ae ;};return false ,_fcb ,nil ;};var (_abb byte =1;_bfg byte =0;);func _efgd (_fbge int )([]byte ,int ){var _beaf []byte ;
for _cef :=0;_cef < 2;_cef ++{_beaf ,_fbge =_fgc (_beaf ,_fbge ,_fd );};return _beaf ,_fbge %8;};func _gb (_egb uint16 ,_gged int )(code ,bool ){_ ,_efe :=_gffa (_ee ,_egb ,_gged );if _efe ==nil {return code {},false ;};return *_efe ,true ;};func _abg (_ade []byte ,_geb int ,_dgg code )([]byte ,int ){_ffeb :=true ;
var _deg []byte ;_deg ,_geb =_fgc (nil ,_geb ,_dgg );_cff :=0;var _dbc int ;for _cff < len (_ade ){_dbc ,_cff =_bdda (_ade ,_ffeb ,_cff );_deg ,_geb =_gfd (_deg ,_geb ,_dbc ,_ffeb );_ffeb =!_ffeb ;};return _deg ,_geb %8;};func _bcg (_gff []byte ,_fae int )(bool ,int ){return _cbf (_gff ,_fae ,_d )};
func (_fec *Encoder )decodeG4 (_fcd []byte )([][]byte ,error ){_cec :=make ([]byte ,_fec .Columns );for _bbdc :=range _cec {_cec [_bbdc ]=_abb ;};_gd :=make ([][]byte ,1);_gd [0]=_cec ;var (_agf bool ;_bafd error ;_db int ;);for (_db /8)< len (_fcd ){_agf ,_db ,_bafd =_fbae (_fcd ,_db );
if _bafd !=nil {return nil ,_bafd ;};if _agf {break ;};var (_afd code ;_fcdb bool ;);_bfd :=true ;var _ca []byte ;_gf :=-1;for _gf < _fec .Columns {_afd ,_db ,_fcdb =_dba (_fcd ,_db );if !_fcdb {return nil ,_ec ;};switch _afd {case _ed :_ca ,_gf =_bg (_gd ,_ca ,_bfd ,_gf );
case _c :_ca ,_db ,_gf ,_bafd =_fca (_fcd ,_ca ,_db ,_bfd ,_gf );if _bafd !=nil {return nil ,_bafd ;};case _edd :_ca ,_gf =_ea (_gd ,_ca ,_bfd ,_gf ,0);_bfd =!_bfd ;case _be :_ca ,_gf =_ea (_gd ,_ca ,_bfd ,_gf ,1);_bfd =!_bfd ;case _gga :_ca ,_gf =_ea (_gd ,_ca ,_bfd ,_gf ,2);
_bfd =!_bfd ;case _af :_ca ,_gf =_ea (_gd ,_ca ,_bfd ,_gf ,3);_bfd =!_bfd ;case _adf :_ca ,_gf =_ea (_gd ,_ca ,_bfd ,_gf ,-1);_bfd =!_bfd ;case _df :_ca ,_gf =_ea (_gd ,_ca ,_bfd ,_gf ,-2);_bfd =!_bfd ;case _de :_ca ,_gf =_ea (_gd ,_ca ,_bfd ,_gf ,-3);
_bfd =!_bfd ;};if len (_ca )>=_fec .Columns {break ;};};if _fec .EncodedByteAlign &&_db %8!=0{_db +=8-_db %8;};_gd =append (_gd ,_ca );if _fec .Rows > 0&&!_fec .EndOfBlock &&len (_gd )>=(_fec .Rows +1){break ;};};_gd =_gd [1:];return _gd ,nil ;};func _fgc (_ebda []byte ,_eef int ,_gfc code )([]byte ,int ){_bbc :=0;
for _bbc < _gfc .BitsWritten {_aab :=_eef /8;_ebg :=_eef %8;if _aab >=len (_ebda ){_ebda =append (_ebda ,0);};_aggd :=8-_ebg ;_daa :=_gfc .BitsWritten -_bbc ;if _aggd > _daa {_aggd =_daa ;};if _bbc < 8{_ebda [_aab ]=_ebda [_aab ]|byte (_gfc .Code >>uint (8+_ebg -_bbc ))&_bb [8-_aggd -_ebg ];
}else {_ebda [_aab ]=_ebda [_aab ]|(byte (_gfc .Code <<uint (_bbc -8))&_bb [8-_aggd ])>>uint (_ebg );};_eef +=_aggd ;_bbc +=_aggd ;};return _ebda ,_eef ;};func _ega (_dbb []byte ,_egbc int )(uint16 ,int ,int ){_adfb :=_egbc ;_dgf :=_egbc /8;_egbc %=8;if _dgf >=len (_dbb ){return 0,16,_adfb ;
};_egbd :=byte (0xFF>>uint (_egbc ));_ceg :=uint16 ((_dbb [_dgf ]&_egbd )<<uint (_egbc ))<<8;_ebd :=8-_egbc ;_dgf ++;_egbc =0;if _dgf >=len (_dbb ){return _ceg >>(16-uint (_ebd )),16-_ebd ,_adfb +_ebd ;};_ceg |=uint16 (_dbb [_dgf ])<<(8-uint (_ebd ));_ebd +=8;
_dgf ++;_egbc =0;if _dgf >=len (_dbb ){return _ceg >>(16-uint (_ebd )),16-_ebd ,_adfb +_ebd ;};if _ebd ==16{return _ceg ,0,_adfb +_ebd ;};_ffc :=16-_ebd ;_ceg |=uint16 (_dbb [_dgf ]>>(8-uint (_ffc )));return _ceg ,0,_adfb +16;};func _gaeg (_bbf []byte ,_fdcc ,_bbg ,_cdag int )([]byte ,int ){_aabb :=_eba (_bbg ,_cdag );
_bbf ,_fdcc =_fgc (_bbf ,_fdcc ,_aabb );return _bbf ,_fdcc ;};func (_aba *Encoder )encodeG4 (_abcb [][]byte )[]byte {_bgd :=make ([][]byte ,len (_abcb ));copy (_bgd ,_abcb );_bgd =_adfba (_bgd );var _efc []byte ;var _bdbc int ;for _agbf :=1;_agbf < len (_bgd );
_agbf ++{if _aba .Rows > 0&&!_aba .EndOfBlock &&_agbf ==(_aba .Rows +1){break ;};var _bed []byte ;var _fdde ,_ecfb ,_dae int ;_bgef :=_bdbc ;_bbef :=-1;for _bbef < len (_bgd [_agbf ]){_fdde =_adfe (_bgd [_agbf ],_bbef );_ecfb =_cfgd (_bgd [_agbf ],_bgd [_agbf -1],_bbef );
_dae =_adfe (_bgd [_agbf -1],_ecfb );if _dae < _fdde {_bed ,_bgef =_fgc (_bed ,_bgef ,_ed );_bbef =_dae ;}else {if _a .Abs (float64 (_ecfb -_fdde ))> 3{_bed ,_bgef ,_bbef =_fcbb (_bgd [_agbf ],_bed ,_bgef ,_bbef ,_fdde );}else {_bed ,_bgef =_gaeg (_bed ,_bgef ,_fdde ,_ecfb );
_bbef =_fdde ;};};};_efc =_aba .appendEncodedRow (_efc ,_bed ,_bdbc );if _aba .EncodedByteAlign {_bgef =0;};_bdbc =_bgef %8;};if _aba .EndOfBlock {_ddb ,_ :=_efgd (_bdbc );_efc =_aba .appendEncodedRow (_efc ,_ddb ,_bdbc );};return _efc ;};func _ffcc (_daf ,_cda []byte ,_ffb int ,_ebgg bool )int {_bedb :=_adfe (_cda ,_ffb );
if _bedb < len (_cda )&&(_ffb ==-1&&_cda [_bedb ]==_abb ||_ffb >=0&&_ffb < len (_daf )&&_daf [_ffb ]==_cda [_bedb ]||_ffb >=len (_daf )&&_ebgg &&_cda [_bedb ]==_abb ||_ffb >=len (_daf )&&!_ebgg &&_cda [_bedb ]==_bfg ){_bedb =_adfe (_cda ,_bedb );};return _bedb ;
};func _dce (_eacg int )([]byte ,int ){var _edg []byte ;for _afcae :=0;_afcae < 6;_afcae ++{_edg ,_eacg =_fgc (_edg ,_eacg ,_fd );};return _edg ,_eacg %8;};