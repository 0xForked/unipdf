//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_g "errors";_fc "math";);func (_gfeb *Encoder )Encode (pixels [][]byte )[]byte {if _gfeb .BlackIs1 {_aga =0;_acea =1;}else {_aga =1;_acea =0;};if _gfeb .K ==0{return _gfeb .encodeG31D (pixels );};if _gfeb .K > 0{return _gfeb .encodeG32D (pixels );};if _gfeb .K < 0{return _gfeb .encodeG4 (pixels );};return nil ;};func (_dge *Encoder )Decode (encoded []byte )([][]byte ,error ){if _dge .BlackIs1 {_aga =0;_acea =1;}else {_aga =1;_acea =0;};if _dge .K ==0{return _dge .decodeG31D (encoded );};if _dge .K > 0{return _dge .decodeG32D (encoded );};if _dge .K < 4{return _dge .decodeG4 (encoded );};return nil ,nil ;};func init (){_e =make (map[int ]code );_e [0]=code {Code :13<<8|3<<6,BitsWritten :10};_e [1]=code {Code :2<<(5+8),BitsWritten :3};_e [2]=code {Code :3<<(6+8),BitsWritten :2};_e [3]=code {Code :2<<(6+8),BitsWritten :2};_e [4]=code {Code :3<<(5+8),BitsWritten :3};_e [5]=code {Code :3<<(4+8),BitsWritten :4};_e [6]=code {Code :2<<(4+8),BitsWritten :4};_e [7]=code {Code :3<<(3+8),BitsWritten :5};_e [8]=code {Code :5<<(2+8),BitsWritten :6};_e [9]=code {Code :4<<(2+8),BitsWritten :6};_e [10]=code {Code :4<<(1+8),BitsWritten :7};_e [11]=code {Code :5<<(1+8),BitsWritten :7};_e [12]=code {Code :7<<(1+8),BitsWritten :7};_e [13]=code {Code :4<<8,BitsWritten :8};_e [14]=code {Code :7<<8,BitsWritten :8};_e [15]=code {Code :12<<8,BitsWritten :9};_e [16]=code {Code :5<<8|3<<6,BitsWritten :10};_e [17]=code {Code :6<<8,BitsWritten :10};_e [18]=code {Code :2<<8,BitsWritten :10};_e [19]=code {Code :12<<8|7<<5,BitsWritten :11};_e [20]=code {Code :13<<8,BitsWritten :11};_e [21]=code {Code :13<<8|4<<5,BitsWritten :11};_e [22]=code {Code :6<<8|7<<5,BitsWritten :11};_e [23]=code {Code :5<<8,BitsWritten :11};_e [24]=code {Code :2<<8|7<<5,BitsWritten :11};_e [25]=code {Code :3<<8,BitsWritten :11};_e [26]=code {Code :12<<8|10<<4,BitsWritten :12};_e [27]=code {Code :12<<8|11<<4,BitsWritten :12};_e [28]=code {Code :12<<8|12<<4,BitsWritten :12};_e [29]=code {Code :12<<8|13<<4,BitsWritten :12};_e [30]=code {Code :6<<8|8<<4,BitsWritten :12};_e [31]=code {Code :6<<8|9<<4,BitsWritten :12};_e [32]=code {Code :6<<8|10<<4,BitsWritten :12};_e [33]=code {Code :6<<8|11<<4,BitsWritten :12};_e [34]=code {Code :13<<8|2<<4,BitsWritten :12};_e [35]=code {Code :13<<8|3<<4,BitsWritten :12};_e [36]=code {Code :13<<8|4<<4,BitsWritten :12};_e [37]=code {Code :13<<8|5<<4,BitsWritten :12};_e [38]=code {Code :13<<8|6<<4,BitsWritten :12};_e [39]=code {Code :13<<8|7<<4,BitsWritten :12};_e [40]=code {Code :6<<8|12<<4,BitsWritten :12};_e [41]=code {Code :6<<8|13<<4,BitsWritten :12};_e [42]=code {Code :13<<8|10<<4,BitsWritten :12};_e [43]=code {Code :13<<8|11<<4,BitsWritten :12};_e [44]=code {Code :5<<8|4<<4,BitsWritten :12};_e [45]=code {Code :5<<8|5<<4,BitsWritten :12};_e [46]=code {Code :5<<8|6<<4,BitsWritten :12};_e [47]=code {Code :5<<8|7<<4,BitsWritten :12};_e [48]=code {Code :6<<8|4<<4,BitsWritten :12};_e [49]=code {Code :6<<8|5<<4,BitsWritten :12};_e [50]=code {Code :5<<8|2<<4,BitsWritten :12};_e [51]=code {Code :5<<8|3<<4,BitsWritten :12};_e [52]=code {Code :2<<8|4<<4,BitsWritten :12};_e [53]=code {Code :3<<8|7<<4,BitsWritten :12};_e [54]=code {Code :3<<8|8<<4,BitsWritten :12};_e [55]=code {Code :2<<8|7<<4,BitsWritten :12};_e [56]=code {Code :2<<8|8<<4,BitsWritten :12};_e [57]=code {Code :5<<8|8<<4,BitsWritten :12};_e [58]=code {Code :5<<8|9<<4,BitsWritten :12};_e [59]=code {Code :2<<8|11<<4,BitsWritten :12};_e [60]=code {Code :2<<8|12<<4,BitsWritten :12};_e [61]=code {Code :5<<8|10<<4,BitsWritten :12};_e [62]=code {Code :6<<8|6<<4,BitsWritten :12};_e [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ea =make (map[int ]code );_ea [0]=code {Code :53<<8,BitsWritten :8};_ea [1]=code {Code :7<<(2+8),BitsWritten :6};_ea [2]=code {Code :7<<(4+8),BitsWritten :4};_ea [3]=code {Code :8<<(4+8),BitsWritten :4};_ea [4]=code {Code :11<<(4+8),BitsWritten :4};_ea [5]=code {Code :12<<(4+8),BitsWritten :4};_ea [6]=code {Code :14<<(4+8),BitsWritten :4};_ea [7]=code {Code :15<<(4+8),BitsWritten :4};_ea [8]=code {Code :19<<(3+8),BitsWritten :5};_ea [9]=code {Code :20<<(3+8),BitsWritten :5};_ea [10]=code {Code :7<<(3+8),BitsWritten :5};_ea [11]=code {Code :8<<(3+8),BitsWritten :5};_ea [12]=code {Code :8<<(2+8),BitsWritten :6};_ea [13]=code {Code :3<<(2+8),BitsWritten :6};_ea [14]=code {Code :52<<(2+8),BitsWritten :6};_ea [15]=code {Code :53<<(2+8),BitsWritten :6};_ea [16]=code {Code :42<<(2+8),BitsWritten :6};_ea [17]=code {Code :43<<(2+8),BitsWritten :6};_ea [18]=code {Code :39<<(1+8),BitsWritten :7};_ea [19]=code {Code :12<<(1+8),BitsWritten :7};_ea [20]=code {Code :8<<(1+8),BitsWritten :7};_ea [21]=code {Code :23<<(1+8),BitsWritten :7};_ea [22]=code {Code :3<<(1+8),BitsWritten :7};_ea [23]=code {Code :4<<(1+8),BitsWritten :7};_ea [24]=code {Code :40<<(1+8),BitsWritten :7};_ea [25]=code {Code :43<<(1+8),BitsWritten :7};_ea [26]=code {Code :19<<(1+8),BitsWritten :7};_ea [27]=code {Code :36<<(1+8),BitsWritten :7};_ea [28]=code {Code :24<<(1+8),BitsWritten :7};_ea [29]=code {Code :2<<8,BitsWritten :8};_ea [30]=code {Code :3<<8,BitsWritten :8};_ea [31]=code {Code :26<<8,BitsWritten :8};_ea [32]=code {Code :27<<8,BitsWritten :8};_ea [33]=code {Code :18<<8,BitsWritten :8};_ea [34]=code {Code :19<<8,BitsWritten :8};_ea [35]=code {Code :20<<8,BitsWritten :8};_ea [36]=code {Code :21<<8,BitsWritten :8};_ea [37]=code {Code :22<<8,BitsWritten :8};_ea [38]=code {Code :23<<8,BitsWritten :8};_ea [39]=code {Code :40<<8,BitsWritten :8};_ea [40]=code {Code :41<<8,BitsWritten :8};_ea [41]=code {Code :42<<8,BitsWritten :8};_ea [42]=code {Code :43<<8,BitsWritten :8};_ea [43]=code {Code :44<<8,BitsWritten :8};_ea [44]=code {Code :45<<8,BitsWritten :8};_ea [45]=code {Code :4<<8,BitsWritten :8};_ea [46]=code {Code :5<<8,BitsWritten :8};_ea [47]=code {Code :10<<8,BitsWritten :8};_ea [48]=code {Code :11<<8,BitsWritten :8};_ea [49]=code {Code :82<<8,BitsWritten :8};_ea [50]=code {Code :83<<8,BitsWritten :8};_ea [51]=code {Code :84<<8,BitsWritten :8};_ea [52]=code {Code :85<<8,BitsWritten :8};_ea [53]=code {Code :36<<8,BitsWritten :8};_ea [54]=code {Code :37<<8,BitsWritten :8};_ea [55]=code {Code :88<<8,BitsWritten :8};_ea [56]=code {Code :89<<8,BitsWritten :8};_ea [57]=code {Code :90<<8,BitsWritten :8};_ea [58]=code {Code :91<<8,BitsWritten :8};_ea [59]=code {Code :74<<8,BitsWritten :8};_ea [60]=code {Code :75<<8,BitsWritten :8};_ea [61]=code {Code :50<<8,BitsWritten :8};_ea [62]=code {Code :51<<8,BitsWritten :8};_ea [63]=code {Code :52<<8,BitsWritten :8};_c =make (map[int ]code );_c [64]=code {Code :3<<8|3<<6,BitsWritten :10};_c [128]=code {Code :12<<8|8<<4,BitsWritten :12};_c [192]=code {Code :12<<8|9<<4,BitsWritten :12};_c [256]=code {Code :5<<8|11<<4,BitsWritten :12};_c [320]=code {Code :3<<8|3<<4,BitsWritten :12};_c [384]=code {Code :3<<8|4<<4,BitsWritten :12};_c [448]=code {Code :3<<8|5<<4,BitsWritten :12};_c [512]=code {Code :3<<8|12<<3,BitsWritten :13};_c [576]=code {Code :3<<8|13<<3,BitsWritten :13};_c [640]=code {Code :2<<8|10<<3,BitsWritten :13};_c [704]=code {Code :2<<8|11<<3,BitsWritten :13};_c [768]=code {Code :2<<8|12<<3,BitsWritten :13};_c [832]=code {Code :2<<8|13<<3,BitsWritten :13};_c [896]=code {Code :3<<8|18<<3,BitsWritten :13};_c [960]=code {Code :3<<8|19<<3,BitsWritten :13};_c [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_c [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_c [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_c [1216]=code {Code :119<<3,BitsWritten :13};_c [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_c [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_c [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_c [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_c [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_c [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_c [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_c [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_fcc =make (map[int ]code );_fcc [64]=code {Code :27<<(3+8),BitsWritten :5};_fcc [128]=code {Code :18<<(3+8),BitsWritten :5};_fcc [192]=code {Code :23<<(2+8),BitsWritten :6};_fcc [256]=code {Code :55<<(1+8),BitsWritten :7};_fcc [320]=code {Code :54<<8,BitsWritten :8};_fcc [384]=code {Code :55<<8,BitsWritten :8};_fcc [448]=code {Code :100<<8,BitsWritten :8};_fcc [512]=code {Code :101<<8,BitsWritten :8};_fcc [576]=code {Code :104<<8,BitsWritten :8};_fcc [640]=code {Code :103<<8,BitsWritten :8};_fcc [704]=code {Code :102<<8,BitsWritten :9};_fcc [768]=code {Code :102<<8|1<<7,BitsWritten :9};_fcc [832]=code {Code :105<<8,BitsWritten :9};_fcc [896]=code {Code :105<<8|1<<7,BitsWritten :9};_fcc [960]=code {Code :106<<8,BitsWritten :9};_fcc [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_fcc [1088]=code {Code :107<<8,BitsWritten :9};_fcc [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_fcc [1216]=code {Code :108<<8,BitsWritten :9};_fcc [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_fcc [1344]=code {Code :109<<8,BitsWritten :9};_fcc [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_fcc [1472]=code {Code :76<<8,BitsWritten :9};_fcc [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_fcc [1600]=code {Code :77<<8,BitsWritten :9};_fcc [1664]=code {Code :24<<(2+8),BitsWritten :6};_fcc [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_d =make (map[int ]code );_d [1792]=code {Code :1<<8,BitsWritten :11};_d [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_d [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_d [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_d [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_d [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_d [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_d [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_d [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_d [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_d [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_d [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_d [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_gf =make (map[int ]byte );_gf [0]=0xFF;_gf [1]=0xFE;_gf [2]=0xFC;_gf [3]=0xF8;_gf [4]=0xF0;_gf [5]=0xE0;_gf [6]=0xC0;_gf [7]=0x80;_gf [8]=0x00;};func _dae (_cb ,_afb []byte ,_bac int ,_ega bool ,_ebe int )([]byte ,int ,int ,error ){_gee :=_bac ;var _feagd error ;_afb ,_bac ,_feagd =_aa (_cb ,_afb ,_bac ,_ega );if _feagd !=nil {return _afb ,_gee ,_ebe ,_feagd ;};_ega =!_ega ;_afb ,_bac ,_feagd =_aa (_cb ,_afb ,_bac ,_ega );if _feagd !=nil {return _afb ,_gee ,_ebe ,_feagd ;};_ebe =len (_afb );return _afb ,_bac ,_ebe ,nil ;};func _geeg (_cgg ,_cceb []byte ,_daec int ,_ccec bool )int {_cbg :=_eec (_cceb ,_daec );if _cbg < len (_cceb )&&(_daec ==-1&&_cceb [_cbg ]==_aga ||_daec >=0&&_daec < len (_cgg )&&_cgg [_daec ]==_cceb [_cbg ]||_daec >=len (_cgg )&&_ccec &&_cceb [_cbg ]==_aga ||_daec >=len (_cgg )&&!_ccec &&_cceb [_cbg ]==_acea ){_cbg =_eec (_cceb ,_cbg );};return _cbg ;};func init (){for _dad ,_ecd :=range _ea {_ecdc (_ce ,_ecd ,0,_dad );};for _ef ,_gfd :=range _fcc {_ecdc (_ce ,_gfd ,0,_ef );};for _de ,_fa :=range _e {_ecdc (_fcdg ,_fa ,0,_de );};for _df ,_ge :=range _c {_ecdc (_fcdg ,_ge ,0,_df );};for _ed ,_eg :=range _d {_ecdc (_ce ,_eg ,0,_ed );_ecdc (_fcdg ,_eg ,0,_ed );};_ecdc (_cea ,_gg ,0,0);_ecdc (_cea ,_dc ,0,0);_ecdc (_cea ,_a ,0,0);_ecdc (_cea ,_eeg ,0,0);_ecdc (_cea ,_gc ,0,0);_ecdc (_cea ,_ec ,0,0);_ecdc (_cea ,_da ,0,0);_ecdc (_cea ,_dg ,0,0);_ecdc (_cea ,_ad ,0,0);};func _efce (_gag *decodingTreeNode ,_ecca uint16 ,_dfg int )(*int ,*code ){if _gag ==nil {return nil ,nil ;};if _dfg ==16{return _gag .RunLen ,_gag .Code ;};_bed :=_cff (_ecca ,_dfg );_dfg ++;var _bfe *int ;var _abfb *code ;if _bed ==1{_bfe ,_abfb =_efce (_gag .Right ,_ecca ,_dfg );}else {_bfe ,_abfb =_efce (_gag .Left ,_ecca ,_dfg );};if _bfe ==nil {_bfe =_gag .RunLen ;_abfb =_gag .Code ;};return _bfe ,_abfb ;};var (_e map[int ]code ;_ea map[int ]code ;_c map[int ]code ;_fcc map[int ]code ;_d map[int ]code ;_gf map[int ]byte ;_fcd =code {Code :1<<4,BitsWritten :12};_ee =code {Code :3<<3,BitsWritten :13};_b =code {Code :2<<3,BitsWritten :13};_gg =code {Code :1<<12,BitsWritten :4};_dc =code {Code :1<<13,BitsWritten :3};_a =code {Code :1<<15,BitsWritten :1};_eeg =code {Code :3<<13,BitsWritten :3};_gc =code {Code :3<<10,BitsWritten :6};_ec =code {Code :3<<9,BitsWritten :7};_da =code {Code :2<<13,BitsWritten :3};_dg =code {Code :2<<10,BitsWritten :6};_ad =code {Code :2<<9,BitsWritten :7};);func _adg (_aaf []byte ,_cad int )(bool ,int ){_bgd :=_cad ;var (_be uint16 ;_dccg int ;);_be ,_dccg ,_cad =_dce (_aaf ,_cad );if _dccg > 4{return false ,_bgd ;};_be >>=uint (4-_dccg );_be <<=4;if _be !=_fcd .Code {return false ,_bgd ;}else {return true ,_cad -4+_dccg ;};};func _edf (_daf []byte ,_dfdc int ,_bdgg code )([]byte ,int ){_cdg :=0;for _cdg < _bdgg .BitsWritten {_eeb :=_dfdc /8;_gage :=_dfdc %8;if _eeb >=len (_daf ){_daf =append (_daf ,0);};_afae :=8-_gage ;_dgee :=_bdgg .BitsWritten -_cdg ;if _afae > _dgee {_afae =_dgee ;};if _cdg < 8{_daf [_eeb ]=_daf [_eeb ]|byte (_bdgg .Code >>uint (8+_gage -_cdg ))&_gf [8-_afae -_gage ];}else {_daf [_eeb ]=_daf [_eeb ]|(byte (_bdgg .Code <<uint (_cdg -8))&_gf [8-_afae ])>>uint (_gage );};_dfdc +=_afae ;_cdg +=_afae ;};return _daf ,_dfdc ;};func _afe (_ceab []byte ,_bd int ,_aad bool )(int ,int ){var (_cbe uint16 ;_dfda int ;_ecgba int ;);_ecgba =_bd ;_cbe ,_dfda ,_bd =_dce (_ceab ,_bd );_agg ,_gfe :=_eca (_cbe ,_dfda ,_aad );if _agg ==-1{return -1,_ecgba ;};return _agg ,_ecgba +_gfe .BitsWritten ;};func _gbdf (_gaa []byte ,_bgdd int ,_baa code )([]byte ,int ){_faf :=true ;var _gagcg []byte ;_gagcg ,_bgdd =_edf (nil ,_bgdd ,_baa );_ffe :=0;var _babd int ;for _ffe < len (_gaa ){_babd ,_ffe =_egg (_gaa ,_faf ,_ffe );_gagcg ,_bgdd =_bea (_gagcg ,_bgdd ,_babd ,_faf );_faf =!_faf ;};return _gagcg ,_bgdd %8;};func _afa (_cga int )([]byte ,int ){var _gead []byte ;for _gce :=0;_gce < 6;_gce ++{_gead ,_cga =_edf (_gead ,_cga ,_ee );};return _gead ,_cga %8;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _db (_dbg uint16 ,_fd int )(code ,bool ){_ ,_ecf :=_efce (_cea ,_dbg ,_fd );if _ecf ==nil {return code {},false ;};return *_ecf ,true ;};var (_bb =_g .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_gb =_g .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_ae =_g .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_gfb =_g .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_fg =_g .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ac =_g .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _bfd (_cfdd [][]byte ,_faa []byte ,_ace bool ,_ab int )([]byte ,int ){_fcg :=_geeg (_faa ,_cfdd [len (_cfdd )-1],_ab ,_ace );_dca :=_eec (_cfdd [len (_cfdd )-1],_fcg );if _ab ==-1{_faa =_gebf (_faa ,_ace ,_dca -_ab -1);}else {_faa =_gebf (_faa ,_ace ,_dca -_ab );};_ab =_dca ;return _faa ,_ab ;};func _gbdfe (_fdf ,_ebeb []byte ,_gfga ,_bcfe ,_ebd int )([]byte ,int ,int ){_fbe :=_eec (_fdf ,_ebd );_acfg :=_bcfe >=0&&_fdf [_bcfe ]==_aga ||_bcfe ==-1;_ebeb ,_gfga =_edf (_ebeb ,_gfga ,_dc );var _gdec int ;if _bcfe > -1{_gdec =_ebd -_bcfe ;}else {_gdec =_ebd -_bcfe -1;};_ebeb ,_gfga =_bea (_ebeb ,_gfga ,_gdec ,_acfg );_acfg =!_acfg ;_eebc :=_fbe -_ebd ;_ebeb ,_gfga =_bea (_ebeb ,_gfga ,_eebc ,_acfg );_bcfe =_fbe ;return _ebeb ,_gfga ,_bcfe ;};func _gd (_bff [][]byte ,_dfc []byte ,_dfb bool ,_efe ,_bg int )([]byte ,int ){_afg :=_geeg (_dfc ,_bff [len (_bff )-1],_efe ,_dfb );_ede :=_afg +_bg ;if _efe ==-1{_dfc =_gebf (_dfc ,_dfb ,_ede -_efe -1);}else {_dfc =_gebf (_dfc ,_dfb ,_ede -_efe );};_efe =_ede ;return _dfc ,_efe ;};func (_edea *Encoder )decodeRow1D (_bba []byte ,_efcc int )([]byte ,int ){var _fda []byte ;_dbe :=true ;var _dda int ;_dda ,_efcc =_afe (_bba ,_efcc ,_dbe );for _dda !=-1{_fda =_gebf (_fda ,_dbe ,_dda );if _dda < 64{if len (_fda )>=_edea .Columns {break ;};_dbe =!_dbe ;};_dda ,_efcc =_afe (_bba ,_efcc ,_dbe );};return _fda ,_efcc ;};func (_fe *Encoder )decodeG31D (_acf []byte )([][]byte ,error ){var _ddf [][]byte ;var _ff int ;for (_ff /8)< len (_acf ){var _eb bool ;_eb ,_ff =_adg (_acf ,_ff );if !_eb {if _fe .EndOfLine {return nil ,_gfb ;};}else {for _ag :=0;_ag < 5;_ag ++{_eb ,_ff =_adg (_acf ,_ff );if !_eb {if _ag ==0{break ;};return nil ,_fg ;};};if _eb {break ;};};var _fac []byte ;_fac ,_ff =_fe .decodeRow1D (_acf ,_ff );if _fe .EncodedByteAlign &&_ff %8!=0{_ff +=8-_ff %8;};_ddf =append (_ddf ,_fac );if _fe .Rows > 0&&!_fe .EndOfBlock &&len (_ddf )>=_fe .Rows {break ;};};return _ddf ,nil ;};func (_ead *Encoder )encodeG4 (_gea [][]byte )[]byte {_gdg :=make ([][]byte ,len (_gea ));copy (_gdg ,_gea );_gdg =_afac (_gdg );var _dfcg []byte ;var _gfdg int ;for _fbb :=1;_fbb < len (_gdg );_fbb ++{if _ead .Rows > 0&&!_ead .EndOfBlock &&_fbb ==(_ead .Rows +1){break ;};var _afcd []byte ;var _dee ,_cge ,_dfeb int ;_ade :=_gfdg ;_ffce :=-1;for _ffce < len (_gdg [_fbb ]){_dee =_eec (_gdg [_fbb ],_ffce );_cge =_def (_gdg [_fbb ],_gdg [_fbb -1],_ffce );_dfeb =_eec (_gdg [_fbb -1],_cge );if _dfeb < _dee {_afcd ,_ade =_edf (_afcd ,_ade ,_gg );_ffce =_dfeb ;}else {if _fc .Abs (float64 (_cge -_dee ))> 3{_afcd ,_ade ,_ffce =_gbdfe (_gdg [_fbb ],_afcd ,_ade ,_ffce ,_dee );}else {_afcd ,_ade =_ceg (_afcd ,_ade ,_dee ,_cge );_ffce =_dee ;};};};_dfcg =_ead .appendEncodedRow (_dfcg ,_afcd ,_gfdg );if _ead .EncodedByteAlign {_ade =0;};_gfdg =_ade %8;};if _ead .EndOfBlock {_dac ,_ :=_afdg (_gfdg );_dfcg =_ead .appendEncodedRow (_dfcg ,_dac ,_gfdg );};return _dfcg ;};func _aef (_cg []byte ,_egd int )(bool ,int ,error ){_gca :=_egd ;var _bcg bool ;_bcg ,_egd =_adg (_cg ,_egd );if _bcg {_bcg ,_egd =_adg (_cg ,_egd );if _bcg {return true ,_egd ,nil ;}else {return false ,_gca ,_bb ;};};return false ,_gca ,nil ;};func _cfb (_aeb []byte ,_fff int )(bool ,int ){return _cce (_aeb ,_fff ,_ee )};var (_ce =&decodingTreeNode {Val :255};_fcdg =&decodingTreeNode {Val :255};_cea =&decodingTreeNode {Val :255};);func (_gbd *Encoder )encodeG31D (_dbd [][]byte )[]byte {var _cbd []byte ;_gagc :=0;for _fdee :=range _dbd {if _gbd .Rows > 0&&!_gbd .EndOfBlock &&_fdee ==_gbd .Rows {break ;};_gab ,_eab :=_gbdf (_dbd [_fdee ],_gagc ,_fcd );_cbd =_gbd .appendEncodedRow (_cbd ,_gab ,_gagc );if _gbd .EncodedByteAlign {_eab =0;};_gagc =_eab ;};if _gbd .EndOfBlock {_bcf ,_ :=_eefb (_gagc );_cbd =_gbd .appendEncodedRow (_cbd ,_bcf ,_gagc );};return _cbd ;};func _eec (_cag []byte ,_cfa int )int {if _cfa >=len (_cag ){return _cfa ;};if _cfa < -1{_cfa =-1;};var _beb byte ;if _cfa > -1{_beb =_cag [_cfa ];}else {_beb =_aga ;};_caaf :=_cfa +1;for _caaf < len (_cag ){if _cag [_caaf ]!=_beb {break ;};_caaf ++;};return _caaf ;};func (_af *Encoder )decodeG32D (_cf []byte )([][]byte ,error ){var (_ga [][]byte ;_eed int ;_ffc error ;);_geb :for (_eed /8)< len (_cf ){var _ba bool ;_ba ,_eed ,_ffc =_agf (_cf ,_eed );if _ffc !=nil {return nil ,_ffc ;};if _ba {break ;};_ba ,_eed =_cfb (_cf ,_eed );if !_ba {if _af .EndOfLine {return nil ,_gfb ;};};var _bbg []byte ;_bbg ,_eed =_af .decodeRow1D (_cf ,_eed );if _af .EncodedByteAlign &&_eed %8!=0{_eed +=8-_eed %8;};if _bbg !=nil {_ga =append (_ga ,_bbg );};if _af .Rows > 0&&!_af .EndOfBlock &&len (_ga )>=_af .Rows {break ;};for _ecg :=1;_ecg < _af .K &&(_eed /8)< len (_cf );_ecg ++{_ba ,_eed =_dfa (_cf ,_eed );if !_ba {_ba ,_eed ,_ffc =_agf (_cf ,_eed );if _ffc !=nil {return nil ,_ffc ;};if _ba {break _geb ;}else {if _af .EndOfLine {return nil ,_gfb ;};};};var (_efa code ;_gbg bool ;);_bc :=true ;var _dgb []byte ;_fea :=-1;for _efa ,_eed ,_gbg =_cdfa (_cf ,_eed );_gbg ;_efa ,_eed ,_gbg =_cdfa (_cf ,_eed ){switch _efa {case _gg :_dgb ,_fea =_bfd (_ga ,_dgb ,_bc ,_fea );case _dc :_dgb ,_eed ,_fea ,_ffc =_dae (_cf ,_dgb ,_eed ,_bc ,_fea );if _ffc !=nil {return nil ,_ffc ;};case _a :_dgb ,_fea =_gd (_ga ,_dgb ,_bc ,_fea ,0);_bc =!_bc ;case _eeg :_dgb ,_fea =_gd (_ga ,_dgb ,_bc ,_fea ,1);_bc =!_bc ;case _gc :_dgb ,_fea =_gd (_ga ,_dgb ,_bc ,_fea ,2);_bc =!_bc ;case _ec :_dgb ,_fea =_gd (_ga ,_dgb ,_bc ,_fea ,3);_bc =!_bc ;case _da :_dgb ,_fea =_gd (_ga ,_dgb ,_bc ,_fea ,-1);_bc =!_bc ;case _dg :_dgb ,_fea =_gd (_ga ,_dgb ,_bc ,_fea ,-2);_bc =!_bc ;case _ad :_dgb ,_fea =_gd (_ga ,_dgb ,_bc ,_fea ,-3);_bc =!_bc ;};if len (_dgb )>=_af .Columns {break ;};};if _af .EncodedByteAlign &&_eed %8!=0{_eed +=8-_eed %8;};if _dgb !=nil {_ga =append (_ga ,_dgb );};if _af .Rows > 0&&!_af .EndOfBlock &&len (_ga )>=_af .Rows {break _geb ;};};};return _ga ,nil ;};func _eefb (_ggf int )([]byte ,int ){var _cfc []byte ;for _bacd :=0;_bacd < 6;_bacd ++{_cfc ,_ggf =_edf (_cfc ,_ggf ,_fcd );};return _cfc ,_ggf %8;};func _agf (_fgc []byte ,_ecgb int )(bool ,int ,error ){_bfde :=_ecgb ;var _ceac =false ;for _afc :=0;_afc < 6;_afc ++{_ceac ,_ecgb =_cfb (_fgc ,_ecgb );if !_ceac {if _afc > 1{return false ,_bfde ,_gb ;}else {_ecgb =_bfde ;break ;};};};return _ceac ,_ecgb ,nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _bbcc (_edeab []byte ,_dgga int )([]byte ,int ){return _edf (_edeab ,_dgga ,_gg )};func _afac (_egfg [][]byte )[][]byte {_dgfgc :=make ([]byte ,len (_egfg [0]));for _gfgf :=range _dgfgc {_dgfgc [_gfgf ]=_aga ;};_egfg =append (_egfg ,[]byte {});for _eda :=len (_egfg )-1;_eda > 0;_eda --{_egfg [_eda ]=_egfg [_eda -1];};_egfg [0]=_dgfgc ;return _egfg ;};func _dce (_cef []byte ,_caf int )(uint16 ,int ,int ){_bad :=_caf ;_bgg :=_caf /8;_caf %=8;if _bgg >=len (_cef ){return 0,16,_bad ;};_bcc :=byte (0xFF>>uint (_caf ));_dcc :=uint16 ((_cef [_bgg ]&_bcc )<<uint (_caf ))<<8;_dag :=8-_caf ;_bgg ++;_caf =0;if _bgg >=len (_cef ){return _dcc >>(16-uint (_dag )),16-_dag ,_bad +_dag ;};_dcc |=uint16 (_cef [_bgg ])<<(8-uint (_dag ));_dag +=8;_bgg ++;_caf =0;if _bgg >=len (_cef ){return _dcc >>(16-uint (_dag )),16-_dag ,_bad +_dag ;};if _dag ==16{return _dcc ,0,_bad +_dag ;};_gaf :=16-_dag ;_dcc |=uint16 (_cef [_bgg ]>>(8-uint (_gaf )));return _dcc ,0,_bad +16;};func _aa (_cdf ,_ebf []byte ,_cec int ,_bcd bool )([]byte ,int ,error ){_ca :=_cec ;var _efc int ;for _efc ,_cec =_afe (_cdf ,_cec ,_bcd );_efc !=-1;_efc ,_cec =_afe (_cdf ,_cec ,_bcd ){_ebf =_gebf (_ebf ,_bcd ,_efc );if _efc < 64{break ;};};if _efc ==-1{return _ebf ,_ca ,_ae ;};return _ebf ,_cec ,nil ;};func (_fcdd *Encoder )encodeG32D (_ddaf [][]byte )[]byte {var _aee []byte ;var _aadb int ;for _agd :=0;_agd < len (_ddaf );_agd +=_fcdd .K {if _fcdd .Rows > 0&&!_fcdd .EndOfBlock &&_agd ==_fcdd .Rows {break ;};_abc ,_dgf :=_gbdf (_ddaf [_agd ],_aadb ,_ee );_aee =_fcdd .appendEncodedRow (_aee ,_abc ,_aadb );if _fcdd .EncodedByteAlign {_dgf =0;};_aadb =_dgf ;for _cadg :=_agd +1;_cadg < (_agd +_fcdd .K )&&_cadg < len (_ddaf );_cadg ++{if _fcdd .Rows > 0&&!_fcdd .EndOfBlock &&_cadg ==_fcdd .Rows {break ;};_bbc ,_afdc :=_edf (nil ,_aadb ,_b );var _bfg ,_daa ,_gdb int ;_gaba :=-1;for _gaba < len (_ddaf [_cadg ]){_bfg =_eec (_ddaf [_cadg ],_gaba );_daa =_def (_ddaf [_cadg ],_ddaf [_cadg -1],_gaba );_gdb =_eec (_ddaf [_cadg -1],_daa );if _gdb < _bfg {_bbc ,_afdc =_bbcc (_bbc ,_afdc );_gaba =_gdb ;}else {if _fc .Abs (float64 (_daa -_bfg ))> 3{_bbc ,_afdc ,_gaba =_gbdfe (_ddaf [_cadg ],_bbc ,_afdc ,_gaba ,_bfg );}else {_bbc ,_afdc =_ceg (_bbc ,_afdc ,_bfg ,_daa );_gaba =_bfg ;};};};_aee =_fcdd .appendEncodedRow (_aee ,_bbc ,_aadb );if _fcdd .EncodedByteAlign {_afdc =0;};_aadb =_afdc %8;};};if _fcdd .EndOfBlock {_edd ,_ :=_afa (_aadb );_aee =_fcdd .appendEncodedRow (_aee ,_edd ,_aadb );};return _aee ;};func _afdg (_bbae int )([]byte ,int ){var _dgfg []byte ;for _dgbb :=0;_dgbb < 2;_dgbb ++{_dgfg ,_bbae =_edf (_dgfg ,_bbae ,_fcd );};return _dgfg ,_bbae %8;};func _def (_fefa ,_ffcf []byte ,_cecf int )int {_ffd :=_eec (_ffcf ,_cecf );if _ffd < len (_ffcf )&&(_cecf ==-1&&_ffcf [_ffd ]==_aga ||_cecf >=0&&_cecf < len (_fefa )&&_fefa [_cecf ]==_ffcf [_ffd ]||_cecf >=len (_fefa )&&_fefa [_cecf -1]!=_ffcf [_ffd ]){_ffd =_eec (_ffcf ,_ffd );};return _ffd ;};func _egg (_ege []byte ,_bdg bool ,_cfdda int )(int ,int ){_gcaf :=0;for _cfdda < len (_ege ){if _bdg {if _ege [_cfdda ]!=_aga {break ;};}else {if _ege [_cfdda ]!=_acea {break ;};};_gcaf ++;_cfdda ++;};return _gcaf ,_cfdda ;};func _cdfa (_cecg []byte ,_gcf int )(code ,int ,bool ){var (_ada uint16 ;_gbf int ;_afea int ;);_afea =_gcf ;_ada ,_gbf ,_gcf =_dce (_cecg ,_gcf );_bdd ,_bdf :=_db (_ada ,_gbf );if !_bdf {return code {},_afea ,false ;};return _bdd ,_afea +_bdd .BitsWritten ,true ;};func _gebf (_edc []byte ,_bccf bool ,_ecc int )[]byte {if _ecc < 0{return _edc ;};_edcf :=make ([]byte ,_ecc );if _bccf {for _fb :=0;_fb < len (_edcf );_fb ++{_edcf [_fb ]=_aga ;};}else {for _fdg :=0;_fdg < len (_edcf );_fdg ++{_edcf [_fdg ]=_acea ;};};_edc =append (_edc ,_edcf ...);return _edc ;};type code struct{Code uint16 ;BitsWritten int ;};var (_aga byte =1;_acea byte =0;);func _ecdc (_gcaa *decodingTreeNode ,_efga code ,_cadf int ,_fef int ){_bef :=_cff (_efga .Code ,_cadf );_cadf ++;if _bef ==1{if _gcaa .Right ==nil {_gcaa .Right =&decodingTreeNode {Val :_bef };};if _cadf ==_efga .BitsWritten {_gcaa .Right .RunLen =&_fef ;_gcaa .Right .Code =&_efga ;}else {_ecdc (_gcaa .Right ,_efga ,_cadf ,_fef );};}else {if _gcaa .Left ==nil {_gcaa .Left =&decodingTreeNode {Val :_bef };};if _cadf ==_efga .BitsWritten {_gcaa .Left .RunLen =&_fef ;_gcaa .Left .Code =&_efga ;}else {_ecdc (_gcaa .Left ,_efga ,_cadf ,_fef );};};};func _geeb (_fdac int ,_fed bool )(code ,int ,bool ){if _fdac < 64{if _fed {return _ea [_fdac ],0,true ;}else {return _e [_fdac ],0,true ;};}else {_gde :=_fdac /64;if _gde > 40{return _d [2560],_fdac -2560,false ;};if _gde > 27{return _d [_gde *64],_fdac -_gde *64,false ;};if _fed {return _fcc [_gde *64],_fdac -_gde *64,false ;}else {return _c [_gde *64],_fdac -_gde *64,false ;};};};func (_aadbg *Encoder )appendEncodedRow (_cged ,_beac []byte ,_gbgd int )[]byte {if len (_cged )> 0&&_gbgd !=0&&!_aadbg .EncodedByteAlign {_cged [len (_cged )-1]=_cged [len (_cged )-1]|_beac [0];_cged =append (_cged ,_beac [1:]...);}else {_cged =append (_cged ,_beac ...);};return _cged ;};func _dfa (_fgcb []byte ,_efae int )(bool ,int ){return _cce (_fgcb ,_efae ,_b )};func (_faca *Encoder )decodeG4 (_adb []byte )([][]byte ,error ){_ggg :=make ([]byte ,_faca .Columns );for _cfd :=range _ggg {_ggg [_cfd ]=_aga ;};_cd :=make ([][]byte ,1);_cd [0]=_ggg ;var (_dcg bool ;_egf error ;_deb int ;);for (_deb /8)< len (_adb ){_dcg ,_deb ,_egf =_aef (_adb ,_deb );if _egf !=nil {return nil ,_egf ;};if _dcg {break ;};var (_bf code ;_feag bool ;);_dfd :=true ;var _fgb []byte ;_eef :=-1;for _eef < _faca .Columns {_bf ,_deb ,_feag =_cdfa (_adb ,_deb );if !_feag {return nil ,_ac ;};switch _bf {case _gg :_fgb ,_eef =_bfd (_cd ,_fgb ,_dfd ,_eef );case _dc :_fgb ,_deb ,_eef ,_egf =_dae (_adb ,_fgb ,_deb ,_dfd ,_eef );if _egf !=nil {return nil ,_egf ;};case _a :_fgb ,_eef =_gd (_cd ,_fgb ,_dfd ,_eef ,0);_dfd =!_dfd ;case _eeg :_fgb ,_eef =_gd (_cd ,_fgb ,_dfd ,_eef ,1);_dfd =!_dfd ;case _gc :_fgb ,_eef =_gd (_cd ,_fgb ,_dfd ,_eef ,2);_dfd =!_dfd ;case _ec :_fgb ,_eef =_gd (_cd ,_fgb ,_dfd ,_eef ,3);_dfd =!_dfd ;case _da :_fgb ,_eef =_gd (_cd ,_fgb ,_dfd ,_eef ,-1);_dfd =!_dfd ;case _dg :_fgb ,_eef =_gd (_cd ,_fgb ,_dfd ,_eef ,-2);_dfd =!_dfd ;case _ad :_fgb ,_eef =_gd (_cd ,_fgb ,_dfd ,_eef ,-3);_dfd =!_dfd ;};if len (_fgb )>=_faca .Columns {break ;};};if _faca .EncodedByteAlign &&_deb %8!=0{_deb +=8-_deb %8;};_cd =append (_cd ,_fgb );if _faca .Rows > 0&&!_faca .EndOfBlock &&len (_cd )>=(_faca .Rows +1){break ;};};_cd =_cd [1:];return _cd ,nil ;};func _bea (_badc []byte ,_gcec int ,_caa int ,_bcgb bool )([]byte ,int ){var (_acb code ;_age bool ;);for !_age {_acb ,_caa ,_age =_geeb (_caa ,_bcgb );_badc ,_gcec =_edf (_badc ,_gcec ,_acb );};return _badc ,_gcec ;};func _cff (_dfe uint16 ,_bga int )byte {if _bga < 8{_dfe >>=8;};_bga %=8;_efd :=byte (0x01<<(7-uint (_bga )));return (byte (_dfe )&_efd )>>(7-uint (_bga ));};func _gga (_gfbe ,_fdd int )code {var _ecgf code ;switch _fdd -_gfbe {case -1:_ecgf =_eeg ;case -2:_ecgf =_gc ;case -3:_ecgf =_ec ;case 0:_ecgf =_a ;case 1:_ecgf =_da ;case 2:_ecgf =_dg ;case 3:_ecgf =_ad ;};return _ecgf ;};func _eca (_adab uint16 ,_dff int ,_efdb bool )(int ,code ){var _fde *int ;var _efg *code ;if _efdb {_fde ,_efg =_efce (_ce ,_adab ,_dff );}else {_fde ,_efg =_efce (_fcdg ,_adab ,_dff );};if _fde ==nil {return -1,code {};};return *_fde ,*_efg ;};func _ceg (_aada []byte ,_aeff ,_baaa ,_bcfc int )([]byte ,int ){_gdee :=_gga (_baaa ,_bcfc );_aada ,_aeff =_edf (_aada ,_aeff ,_gdee );return _aada ,_aeff ;};func _cce (_acc []byte ,_abf int ,_cfdde code )(bool ,int ){_cde :=_abf ;var (_afd uint16 ;_dgg int ;);_afd ,_dgg ,_abf =_dce (_acc ,_abf );if _dgg > 3{return false ,_cde ;};_afd >>=uint (3-_dgg );_afd <<=3;if _afd !=_cfdde .Code {return false ,_cde ;}else {return true ,_abf -3+_dgg ;};};