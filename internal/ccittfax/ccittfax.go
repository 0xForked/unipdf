//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_e "errors";_a "math";);func (_bccb *Encoder )encodeG32D (_caf [][]byte )[]byte {var _eab []byte ;var _bccd int ;for _eaa :=0;_eaa < len (_caf );_eaa +=_bccb .K {if _bccb .Rows > 0&&!_bccb .EndOfBlock &&_eaa ==_bccb .Rows {break ;
};_ddg ,_bef :=_aedg (_caf [_eaa ],_bccd ,_eb );_eab =_bccb .appendEncodedRow (_eab ,_ddg ,_bccd );if _bccb .EncodedByteAlign {_bef =0;};_bccd =_bef ;for _ecb :=_eaa +1;_ecb < (_eaa +_bccb .K )&&_ecb < len (_caf );_ecb ++{if _bccb .Rows > 0&&!_bccb .EndOfBlock &&_ecb ==_bccb .Rows {break ;
};_bea ,_ddd :=_egf (nil ,_bccd ,_gd );var _fde ,_abc ,_cbeg int ;_eafc :=-1;for _eafc < len (_caf [_ecb ]){_fde =_gbab (_caf [_ecb ],_eafc );_abc =_acc (_caf [_ecb ],_caf [_ecb -1],_eafc );_cbeg =_gbab (_caf [_ecb -1],_abc );if _cbeg < _fde {_bea ,_ddd =_dfgb (_bea ,_ddd );
_eafc =_cbeg ;}else {if _a .Abs (float64 (_abc -_fde ))> 3{_bea ,_ddd ,_eafc =_egbb (_caf [_ecb ],_bea ,_ddd ,_eafc ,_fde );}else {_bea ,_ddd =_gcc (_bea ,_ddd ,_fde ,_abc );_eafc =_fde ;};};};_eab =_bccb .appendEncodedRow (_eab ,_bea ,_bccd );if _bccb .EncodedByteAlign {_ddd =0;
};_bccd =_ddd %8;};};if _bccb .EndOfBlock {_cgd ,_ :=_agec (_bccd );_eab =_bccb .appendEncodedRow (_eab ,_cgd ,_bccd );};return _eab ;};var (_gf =_e .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");
_ba =_e .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_cga =_e .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");
_gfb =_e .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_bb =_e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_cb =_e .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func init (){_b =make (map[int ]code );_b [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_b [1]=code {Code :2<<(5+8),BitsWritten :3};_b [2]=code {Code :3<<(6+8),BitsWritten :2};_b [3]=code {Code :2<<(6+8),BitsWritten :2};_b [4]=code {Code :3<<(5+8),BitsWritten :3};_b [5]=code {Code :3<<(4+8),BitsWritten :4};_b [6]=code {Code :2<<(4+8),BitsWritten :4};
_b [7]=code {Code :3<<(3+8),BitsWritten :5};_b [8]=code {Code :5<<(2+8),BitsWritten :6};_b [9]=code {Code :4<<(2+8),BitsWritten :6};_b [10]=code {Code :4<<(1+8),BitsWritten :7};_b [11]=code {Code :5<<(1+8),BitsWritten :7};_b [12]=code {Code :7<<(1+8),BitsWritten :7};
_b [13]=code {Code :4<<8,BitsWritten :8};_b [14]=code {Code :7<<8,BitsWritten :8};_b [15]=code {Code :12<<8,BitsWritten :9};_b [16]=code {Code :5<<8|3<<6,BitsWritten :10};_b [17]=code {Code :6<<8,BitsWritten :10};_b [18]=code {Code :2<<8,BitsWritten :10};
_b [19]=code {Code :12<<8|7<<5,BitsWritten :11};_b [20]=code {Code :13<<8,BitsWritten :11};_b [21]=code {Code :13<<8|4<<5,BitsWritten :11};_b [22]=code {Code :6<<8|7<<5,BitsWritten :11};_b [23]=code {Code :5<<8,BitsWritten :11};_b [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_b [25]=code {Code :3<<8,BitsWritten :11};_b [26]=code {Code :12<<8|10<<4,BitsWritten :12};_b [27]=code {Code :12<<8|11<<4,BitsWritten :12};_b [28]=code {Code :12<<8|12<<4,BitsWritten :12};_b [29]=code {Code :12<<8|13<<4,BitsWritten :12};_b [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_b [31]=code {Code :6<<8|9<<4,BitsWritten :12};_b [32]=code {Code :6<<8|10<<4,BitsWritten :12};_b [33]=code {Code :6<<8|11<<4,BitsWritten :12};_b [34]=code {Code :13<<8|2<<4,BitsWritten :12};_b [35]=code {Code :13<<8|3<<4,BitsWritten :12};_b [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_b [37]=code {Code :13<<8|5<<4,BitsWritten :12};_b [38]=code {Code :13<<8|6<<4,BitsWritten :12};_b [39]=code {Code :13<<8|7<<4,BitsWritten :12};_b [40]=code {Code :6<<8|12<<4,BitsWritten :12};_b [41]=code {Code :6<<8|13<<4,BitsWritten :12};_b [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_b [43]=code {Code :13<<8|11<<4,BitsWritten :12};_b [44]=code {Code :5<<8|4<<4,BitsWritten :12};_b [45]=code {Code :5<<8|5<<4,BitsWritten :12};_b [46]=code {Code :5<<8|6<<4,BitsWritten :12};_b [47]=code {Code :5<<8|7<<4,BitsWritten :12};_b [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_b [49]=code {Code :6<<8|5<<4,BitsWritten :12};_b [50]=code {Code :5<<8|2<<4,BitsWritten :12};_b [51]=code {Code :5<<8|3<<4,BitsWritten :12};_b [52]=code {Code :2<<8|4<<4,BitsWritten :12};_b [53]=code {Code :3<<8|7<<4,BitsWritten :12};_b [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_b [55]=code {Code :2<<8|7<<4,BitsWritten :12};_b [56]=code {Code :2<<8|8<<4,BitsWritten :12};_b [57]=code {Code :5<<8|8<<4,BitsWritten :12};_b [58]=code {Code :5<<8|9<<4,BitsWritten :12};_b [59]=code {Code :2<<8|11<<4,BitsWritten :12};_b [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_b [61]=code {Code :5<<8|10<<4,BitsWritten :12};_b [62]=code {Code :6<<8|6<<4,BitsWritten :12};_b [63]=code {Code :6<<8|7<<4,BitsWritten :12};_bd =make (map[int ]code );_bd [0]=code {Code :53<<8,BitsWritten :8};_bd [1]=code {Code :7<<(2+8),BitsWritten :6};
_bd [2]=code {Code :7<<(4+8),BitsWritten :4};_bd [3]=code {Code :8<<(4+8),BitsWritten :4};_bd [4]=code {Code :11<<(4+8),BitsWritten :4};_bd [5]=code {Code :12<<(4+8),BitsWritten :4};_bd [6]=code {Code :14<<(4+8),BitsWritten :4};_bd [7]=code {Code :15<<(4+8),BitsWritten :4};
_bd [8]=code {Code :19<<(3+8),BitsWritten :5};_bd [9]=code {Code :20<<(3+8),BitsWritten :5};_bd [10]=code {Code :7<<(3+8),BitsWritten :5};_bd [11]=code {Code :8<<(3+8),BitsWritten :5};_bd [12]=code {Code :8<<(2+8),BitsWritten :6};_bd [13]=code {Code :3<<(2+8),BitsWritten :6};
_bd [14]=code {Code :52<<(2+8),BitsWritten :6};_bd [15]=code {Code :53<<(2+8),BitsWritten :6};_bd [16]=code {Code :42<<(2+8),BitsWritten :6};_bd [17]=code {Code :43<<(2+8),BitsWritten :6};_bd [18]=code {Code :39<<(1+8),BitsWritten :7};_bd [19]=code {Code :12<<(1+8),BitsWritten :7};
_bd [20]=code {Code :8<<(1+8),BitsWritten :7};_bd [21]=code {Code :23<<(1+8),BitsWritten :7};_bd [22]=code {Code :3<<(1+8),BitsWritten :7};_bd [23]=code {Code :4<<(1+8),BitsWritten :7};_bd [24]=code {Code :40<<(1+8),BitsWritten :7};_bd [25]=code {Code :43<<(1+8),BitsWritten :7};
_bd [26]=code {Code :19<<(1+8),BitsWritten :7};_bd [27]=code {Code :36<<(1+8),BitsWritten :7};_bd [28]=code {Code :24<<(1+8),BitsWritten :7};_bd [29]=code {Code :2<<8,BitsWritten :8};_bd [30]=code {Code :3<<8,BitsWritten :8};_bd [31]=code {Code :26<<8,BitsWritten :8};
_bd [32]=code {Code :27<<8,BitsWritten :8};_bd [33]=code {Code :18<<8,BitsWritten :8};_bd [34]=code {Code :19<<8,BitsWritten :8};_bd [35]=code {Code :20<<8,BitsWritten :8};_bd [36]=code {Code :21<<8,BitsWritten :8};_bd [37]=code {Code :22<<8,BitsWritten :8};
_bd [38]=code {Code :23<<8,BitsWritten :8};_bd [39]=code {Code :40<<8,BitsWritten :8};_bd [40]=code {Code :41<<8,BitsWritten :8};_bd [41]=code {Code :42<<8,BitsWritten :8};_bd [42]=code {Code :43<<8,BitsWritten :8};_bd [43]=code {Code :44<<8,BitsWritten :8};
_bd [44]=code {Code :45<<8,BitsWritten :8};_bd [45]=code {Code :4<<8,BitsWritten :8};_bd [46]=code {Code :5<<8,BitsWritten :8};_bd [47]=code {Code :10<<8,BitsWritten :8};_bd [48]=code {Code :11<<8,BitsWritten :8};_bd [49]=code {Code :82<<8,BitsWritten :8};
_bd [50]=code {Code :83<<8,BitsWritten :8};_bd [51]=code {Code :84<<8,BitsWritten :8};_bd [52]=code {Code :85<<8,BitsWritten :8};_bd [53]=code {Code :36<<8,BitsWritten :8};_bd [54]=code {Code :37<<8,BitsWritten :8};_bd [55]=code {Code :88<<8,BitsWritten :8};
_bd [56]=code {Code :89<<8,BitsWritten :8};_bd [57]=code {Code :90<<8,BitsWritten :8};_bd [58]=code {Code :91<<8,BitsWritten :8};_bd [59]=code {Code :74<<8,BitsWritten :8};_bd [60]=code {Code :75<<8,BitsWritten :8};_bd [61]=code {Code :50<<8,BitsWritten :8};
_bd [62]=code {Code :51<<8,BitsWritten :8};_bd [63]=code {Code :52<<8,BitsWritten :8};_c =make (map[int ]code );_c [64]=code {Code :3<<8|3<<6,BitsWritten :10};_c [128]=code {Code :12<<8|8<<4,BitsWritten :12};_c [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_c [256]=code {Code :5<<8|11<<4,BitsWritten :12};_c [320]=code {Code :3<<8|3<<4,BitsWritten :12};_c [384]=code {Code :3<<8|4<<4,BitsWritten :12};_c [448]=code {Code :3<<8|5<<4,BitsWritten :12};_c [512]=code {Code :3<<8|12<<3,BitsWritten :13};_c [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_c [640]=code {Code :2<<8|10<<3,BitsWritten :13};_c [704]=code {Code :2<<8|11<<3,BitsWritten :13};_c [768]=code {Code :2<<8|12<<3,BitsWritten :13};_c [832]=code {Code :2<<8|13<<3,BitsWritten :13};_c [896]=code {Code :3<<8|18<<3,BitsWritten :13};_c [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_c [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_c [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_c [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_c [1216]=code {Code :119<<3,BitsWritten :13};_c [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_c [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_c [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_c [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_c [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_c [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_c [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_c [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_ae =make (map[int ]code );_ae [64]=code {Code :27<<(3+8),BitsWritten :5};_ae [128]=code {Code :18<<(3+8),BitsWritten :5};_ae [192]=code {Code :23<<(2+8),BitsWritten :6};_ae [256]=code {Code :55<<(1+8),BitsWritten :7};_ae [320]=code {Code :54<<8,BitsWritten :8};
_ae [384]=code {Code :55<<8,BitsWritten :8};_ae [448]=code {Code :100<<8,BitsWritten :8};_ae [512]=code {Code :101<<8,BitsWritten :8};_ae [576]=code {Code :104<<8,BitsWritten :8};_ae [640]=code {Code :103<<8,BitsWritten :8};_ae [704]=code {Code :102<<8,BitsWritten :9};
_ae [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ae [832]=code {Code :105<<8,BitsWritten :9};_ae [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ae [960]=code {Code :106<<8,BitsWritten :9};_ae [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ae [1088]=code {Code :107<<8,BitsWritten :9};
_ae [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ae [1216]=code {Code :108<<8,BitsWritten :9};_ae [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ae [1344]=code {Code :109<<8,BitsWritten :9};_ae [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ae [1472]=code {Code :76<<8,BitsWritten :9};
_ae [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ae [1600]=code {Code :77<<8,BitsWritten :9};_ae [1664]=code {Code :24<<(2+8),BitsWritten :6};_ae [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_fb =make (map[int ]code );_fb [1792]=code {Code :1<<8,BitsWritten :11};
_fb [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_fb [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_fb [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_fb [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_fb [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_fb [2176]=code {Code :1<<8|5<<4,BitsWritten :12};
_fb [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_fb [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_fb [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_fb [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_fb [2496]=code {Code :1<<8|14<<4,BitsWritten :12};
_fb [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_cg =make (map[int ]byte );_cg [0]=0xFF;_cg [1]=0xFE;_cg [2]=0xFC;_cg [3]=0xF8;_cg [4]=0xF0;_cg [5]=0xE0;_cg [6]=0xC0;_cg [7]=0x80;_cg [8]=0x00;};func _efd (_aabd ,_ee []byte ,_ffg int ,_bcb bool ,_cd int )([]byte ,int ,int ,error ){_fee :=_ffg ;
var _bf error ;_ee ,_ffg ,_bf =_feec (_aabd ,_ee ,_ffg ,_bcb );if _bf !=nil {return _ee ,_fee ,_cd ,_bf ;};_bcb =!_bcb ;_ee ,_ffg ,_bf =_feec (_aabd ,_ee ,_ffg ,_bcb );if _bf !=nil {return _ee ,_fee ,_cd ,_bf ;};_cd =len (_ee );return _ee ,_ffg ,_cd ,nil ;
};func _aef (_eea []byte ,_dff int ,_edf code )(bool ,int ){_aeb :=_dff ;var (_acb uint16 ;_bbd int ;);_acb ,_bbd ,_dff =_dcc (_eea ,_dff );if _bbd > 3{return false ,_aeb ;};_acb >>=uint (3-_bbd );_acb <<=3;if _acb !=_edf .Code {return false ,_aeb ;};return true ,_dff -3+_bbd ;
};func init (){for _cc ,_cbe :=range _bd {_ebe (_ad ,_cbe ,0,_cc );};for _eg ,_egg :=range _ae {_ebe (_ad ,_egg ,0,_eg );};for _fc ,_dgd :=range _b {_ebe (_aeg ,_dgd ,0,_fc );};for _fg ,_ge :=range _c {_ebe (_aeg ,_ge ,0,_fg );};for _bdc ,_ege :=range _fb {_ebe (_ad ,_ege ,0,_bdc );
_ebe (_aeg ,_ege ,0,_bdc );};_ebe (_gde ,_bg ,0,0);_ebe (_gde ,_af ,0,0);_ebe (_gde ,_bdb ,0,0);_ebe (_gde ,_bdg ,0,0);_ebe (_gde ,_d ,0,0);_ebe (_gde ,_aa ,0,0);_ebe (_gde ,_ef ,0,0);_ebe (_gde ,_gg ,0,0);_ebe (_gde ,_fd ,0,0);};func _fca (_eeb []byte ,_aaa int ,_cdfb int ,_adb bool )([]byte ,int ){var (_fgfd code ;
_dfg bool ;);for !_dfg {_fgfd ,_cdfb ,_dfg =_eede (_cdfb ,_adb );_eeb ,_aaa =_egf (_eeb ,_aaa ,_fgfd );};return _eeb ,_aaa ;};func _cdc (_bbe *decodingTreeNode ,_bdfc uint16 ,_aff int )(*int ,*code ){if _bbe ==nil {return nil ,nil ;};if _aff ==16{return _bbe .RunLen ,_bbe .Code ;
};_aecc :=_geg (_bdfc ,_aff );_aff ++;var _fba *int ;var _aga *code ;if _aecc ==1{_fba ,_aga =_cdc (_bbe .Right ,_bdfc ,_aff );}else {_fba ,_aga =_cdc (_bbe .Left ,_bdfc ,_aff );};if _fba ==nil {_fba =_bbe .RunLen ;_aga =_bbe .Code ;};return _fba ,_aga ;
};func _cfg (_gbf uint16 ,_cag int )(code ,bool ){_ ,_fgd :=_cdc (_gde ,_gbf ,_cag );if _fgd ==nil {return code {},false ;};return *_fgd ,true ;};func (_ag *Encoder )decodeG4 (_fe []byte )([][]byte ,error ){_gbg :=make ([]byte ,_ag .Columns );for _ddc :=range _gbg {_gbg [_ddc ]=_bfd ;
};_fa :=make ([][]byte ,1);_fa [0]=_gbg ;var (_aab bool ;_ce error ;_cbb int ;);for (_cbb /8)< len (_fe ){_aab ,_cbb ,_ce =_ccb (_fe ,_cbb );if _ce !=nil {return nil ,_ce ;};if _aab {break ;};var (_fag code ;_ceg bool ;);_bdgc :=true ;var _ecf []byte ;
_dce :=-1;for _dce < _ag .Columns {_fag ,_cbb ,_ceg =_cdf (_fe ,_cbb );if !_ceg {return nil ,_cb ;};switch _fag {case _bg :_ecf ,_dce =_egc (_fa ,_ecf ,_bdgc ,_dce );case _af :_ecf ,_cbb ,_dce ,_ce =_efd (_fe ,_ecf ,_cbb ,_bdgc ,_dce );if _ce !=nil {return nil ,_ce ;
};case _bdb :_ecf ,_dce =_de (_fa ,_ecf ,_bdgc ,_dce ,0);_bdgc =!_bdgc ;case _bdg :_ecf ,_dce =_de (_fa ,_ecf ,_bdgc ,_dce ,1);_bdgc =!_bdgc ;case _d :_ecf ,_dce =_de (_fa ,_ecf ,_bdgc ,_dce ,2);_bdgc =!_bdgc ;case _aa :_ecf ,_dce =_de (_fa ,_ecf ,_bdgc ,_dce ,3);
_bdgc =!_bdgc ;case _ef :_ecf ,_dce =_de (_fa ,_ecf ,_bdgc ,_dce ,-1);_bdgc =!_bdgc ;case _gg :_ecf ,_dce =_de (_fa ,_ecf ,_bdgc ,_dce ,-2);_bdgc =!_bdgc ;case _fd :_ecf ,_dce =_de (_fa ,_ecf ,_bdgc ,_dce ,-3);_bdgc =!_bdgc ;};if len (_ecf )>=_ag .Columns {break ;
};};if _ag .EncodedByteAlign &&_cbb %8!=0{_cbb +=8-_cbb %8;};_fa =append (_fa ,_ecf );if _ag .Rows > 0&&!_ag .EndOfBlock &&len (_fa )>=(_ag .Rows +1){break ;};};_fa =_fa [1:];return _fa ,nil ;};func (_cfc *Encoder )encodeG31D (_gba [][]byte )[]byte {var _fgdd []byte ;
_bbf :=0;for _fdg :=range _gba {if _cfc .Rows > 0&&!_cfc .EndOfBlock &&_fdg ==_cfc .Rows {break ;};_def ,_fbe :=_aedg (_gba [_fdg ],_bbf ,_g );_fgdd =_cfc .appendEncodedRow (_fgdd ,_def ,_bbf );if _cfc .EncodedByteAlign {_fbe =0;};_bbf =_fbe ;};if _cfc .EndOfBlock {_ced ,_ :=_fgce (_bbf );
_fgdd =_cfc .appendEncodedRow (_fgdd ,_ced ,_bbf );};return _fgdd ;};func _egc (_cef [][]byte ,_gbe []byte ,_fff bool ,_bbaa int )([]byte ,int ){_ebf :=_ffgf (_gbe ,_cef [len (_cef )-1],_bbaa ,_fff );_da :=_gbab (_cef [len (_cef )-1],_ebf );if _bbaa ==-1{_gbe =_cab (_gbe ,_fff ,_da -_bbaa -1);
}else {_gbe =_cab (_gbe ,_fff ,_da -_bbaa );};_bbaa =_da ;return _gbe ,_bbaa ;};func _gbed (_dfbe int )([]byte ,int ){var _fbeg []byte ;for _dggb :=0;_dggb < 2;_dggb ++{_fbeg ,_dfbe =_egf (_fbeg ,_dfbe ,_g );};return _fbeg ,_dfbe %8;};func _ebe (_cbg *decodingTreeNode ,_cgbf code ,_acg int ,_fdd int ){_cee :=_geg (_cgbf .Code ,_acg );
_acg ++;if _cee ==1{if _cbg .Right ==nil {_cbg .Right =&decodingTreeNode {Val :_cee };};if _acg ==_cgbf .BitsWritten {_cbg .Right .RunLen =&_fdd ;_cbg .Right .Code =&_cgbf ;}else {_ebe (_cbg .Right ,_cgbf ,_acg ,_fdd );};}else {if _cbg .Left ==nil {_cbg .Left =&decodingTreeNode {Val :_cee };
};if _acg ==_cgbf .BitsWritten {_cbg .Left .RunLen =&_fdd ;_cbg .Left .Code =&_cgbf ;}else {_ebe (_cbg .Left ,_cgbf ,_acg ,_fdd );};};};func _aedg (_dcfc []byte ,_dfc int ,_egd code )([]byte ,int ){_gce :=true ;var _adc []byte ;_adc ,_dfc =_egf (nil ,_dfc ,_egd );
_eed :=0;var _bfa int ;for _eed < len (_dcfc ){_bfa ,_eed =_bffc (_dcfc ,_gce ,_eed );_adc ,_dfc =_fca (_adc ,_dfc ,_bfa ,_gce );_gce =!_gce ;};return _adc ,_dfc %8;};func _eede (_eedea int ,_dba bool )(code ,int ,bool ){if _eedea < 64{if _dba {return _bd [_eedea ],0,true ;
};return _b [_eedea ],0,true ;};_eagc :=_eedea /64;if _eagc > 40{return _fb [2560],_eedea -2560,false ;};if _eagc > 27{return _fb [_eagc *64],_eedea -_eagc *64,false ;};if _dba {return _ae [_eagc *64],_eedea -_eagc *64,false ;};return _c [_eagc *64],_eedea -_eagc *64,false ;
};func _cdf (_bbaaa []byte ,_dea int )(code ,int ,bool ){var (_ac uint16 ;_ccg int ;_gadg int ;);_gadg =_dea ;_ac ,_ccg ,_ =_dcc (_bbaaa ,_dea );_fed ,_baf :=_cfg (_ac ,_ccg );if !_baf {return code {},_gadg ,false ;};return _fed ,_gadg +_fed .BitsWritten ,true ;
};var (_ad =&decodingTreeNode {Val :255};_aeg =&decodingTreeNode {Val :255};_gde =&decodingTreeNode {Val :255};);func _acf (_cbc uint16 ,_bbae int ,_gga bool )(int ,code ){var _be *int ;var _ccgc *code ;if _gga {_be ,_ccgc =_cdc (_ad ,_cbc ,_bbae );}else {_be ,_ccgc =_cdc (_aeg ,_cbc ,_bbae );
};if _be ==nil {return -1,code {};};return *_be ,*_ccgc ;};func _cab (_edc []byte ,_fbga bool ,_dde int )[]byte {if _dde < 0{return _edc ;};_gcd :=make ([]byte ,_dde );if _fbga {for _bff :=0;_bff < len (_gcd );_bff ++{_gcd [_bff ]=_bfd ;};}else {for _cdg :=0;
_cdg < len (_gcd );_cdg ++{_gcd [_cdg ]=_bdd ;};};_edc =append (_edc ,_gcd ...);return _edc ;};func _cgbgf (_gaa []byte ,_gea int )(bool ,int ){_ede :=_gea ;var (_bfc uint16 ;_aad int ;);_bfc ,_aad ,_gea =_dcc (_gaa ,_gea );if _aad > 4{return false ,_ede ;
};_bfc >>=uint (4-_aad );_bfc <<=4;if _bfc !=_g .Code {return false ,_ede ;};return true ,_gea -4+_aad ;};func (_fec *Encoder )Encode (pixels [][]byte )[]byte {if _fec .BlackIs1 {_bfd =0;_bdd =1;}else {_bfd =1;_bdd =0;};if _fec .K ==0{return _fec .encodeG31D (pixels );
};if _fec .K > 0{return _fec .encodeG32D (pixels );};if _fec .K < 0{return _fec .encodeG4 (pixels );};return nil ;};func (_ea *Encoder )decodeG32D (_eag []byte )([][]byte ,error ){var (_egb [][]byte ;_aec int ;_bc error ;);_cfb :for (_aec /8)< len (_eag ){var _bdf bool ;
_bdf ,_aec ,_bc =_ffd (_eag ,_aec );if _bc !=nil {return nil ,_bc ;};if _bdf {break ;};_bdf ,_aec =_ffa (_eag ,_aec );if !_bdf {if _ea .EndOfLine {return nil ,_gfb ;};};var _dd []byte ;_dd ,_aec =_ea .decodeRow1D (_eag ,_aec );if _ea .EncodedByteAlign &&_aec %8!=0{_aec +=8-_aec %8;
};if _dd !=nil {_egb =append (_egb ,_dd );};if _ea .Rows > 0&&!_ea .EndOfBlock &&len (_egb )>=_ea .Rows {break ;};for _ada :=1;_ada < _ea .K &&(_aec /8)< len (_eag );_ada ++{_bdf ,_aec =_fagb (_eag ,_aec );if !_bdf {_bdf ,_aec ,_bc =_ffd (_eag ,_aec );
if _bc !=nil {return nil ,_bc ;};if _bdf {break _cfb ;}else {if _ea .EndOfLine {return nil ,_gfb ;};};};var (_df code ;_egec bool ;);_eac :=true ;var _gb []byte ;_cgb :=-1;for _df ,_aec ,_egec =_cdf (_eag ,_aec );_egec ;_df ,_aec ,_egec =_cdf (_eag ,_aec ){switch _df {case _bg :_gb ,_cgb =_egc (_egb ,_gb ,_eac ,_cgb );
case _af :_gb ,_aec ,_cgb ,_bc =_efd (_eag ,_gb ,_aec ,_eac ,_cgb );if _bc !=nil {return nil ,_bc ;};case _bdb :_gb ,_cgb =_de (_egb ,_gb ,_eac ,_cgb ,0);_eac =!_eac ;case _bdg :_gb ,_cgb =_de (_egb ,_gb ,_eac ,_cgb ,1);_eac =!_eac ;case _d :_gb ,_cgb =_de (_egb ,_gb ,_eac ,_cgb ,2);
_eac =!_eac ;case _aa :_gb ,_cgb =_de (_egb ,_gb ,_eac ,_cgb ,3);_eac =!_eac ;case _ef :_gb ,_cgb =_de (_egb ,_gb ,_eac ,_cgb ,-1);_eac =!_eac ;case _gg :_gb ,_cgb =_de (_egb ,_gb ,_eac ,_cgb ,-2);_eac =!_eac ;case _fd :_gb ,_cgb =_de (_egb ,_gb ,_eac ,_cgb ,-3);
_eac =!_eac ;};if len (_gb )>=_ea .Columns {break ;};};if _ea .EncodedByteAlign &&_aec %8!=0{_aec +=8-_aec %8;};if _gb !=nil {_egb =append (_egb ,_gb );};if _ea .Rows > 0&&!_ea .EndOfBlock &&len (_egb )>=_ea .Rows {break _cfb ;};};};return _egb ,nil ;};
func _acc (_gadb ,_efdg []byte ,_ebda int )int {_cebf :=_gbab (_efdg ,_ebda );if _cebf < len (_efdg )&&(_ebda ==-1&&_efdg [_cebf ]==_bfd ||_ebda >=0&&_ebda < len (_gadb )&&_gadb [_ebda ]==_efdg [_cebf ]||_ebda >=len (_gadb )&&_gadb [_ebda -1]!=_efdg [_cebf ]){_cebf =_gbab (_efdg ,_cebf );
};return _cebf ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _gbab (_bbb []byte ,_afd int )int {if _afd >=len (_bbb ){return _afd ;};if _afd < -1{_afd =-1;};var _fbc byte ;if _afd > -1{_fbc =_bbb [_afd ];
}else {_fbc =_bfd ;};_cefb :=_afd +1;for _cefb < len (_bbb ){if _bbb [_cefb ]!=_fbc {break ;};_cefb ++;};return _cefb ;};func _agec (_gda int )([]byte ,int ){var _feda []byte ;for _cfaa :=0;_cfaa < 6;_cfaa ++{_feda ,_gda =_egf (_feda ,_gda ,_eb );};return _feda ,_gda %8;
};func (_ff *Encoder )decodeG31D (_dc []byte )([][]byte ,error ){var _fbf [][]byte ;var _ga int ;for (_ga /8)< len (_dc ){var _ecd bool ;_ecd ,_ga =_cgbgf (_dc ,_ga );if !_ecd {if _ff .EndOfLine {return nil ,_gfb ;};}else {for _cf :=0;_cf < 5;_cf ++{_ecd ,_ga =_cgbgf (_dc ,_ga );
if !_ecd {if _cf ==0{break ;};return nil ,_bb ;};};if _ecd {break ;};};var _fce []byte ;_fce ,_ga =_ff .decodeRow1D (_dc ,_ga );if _ff .EncodedByteAlign &&_ga %8!=0{_ga +=8-_ga %8;};_fbf =append (_fbf ,_fce );if _ff .Rows > 0&&!_ff .EndOfBlock &&len (_fbf )>=_ff .Rows {break ;
};};return _fbf ,nil ;};func _dcg (_bcd []byte ,_dfb int ,_ebd bool )(int ,int ){var (_gcf uint16 ;_gfec int ;_ebg int ;);_ebg =_dfb ;_gcf ,_gfec ,_ =_dcc (_bcd ,_dfb );_cfa ,_dcb :=_acf (_gcf ,_gfec ,_ebd );if _cfa ==-1{return -1,_ebg ;};return _cfa ,_ebg +_dcb .BitsWritten ;
};func _dcc (_aca []byte ,_bcc int )(uint16 ,int ,int ){_gff :=_bcc ;_efg :=_bcc /8;_bcc %=8;if _efg >=len (_aca ){return 0,16,_gff ;};_gae :=byte (0xFF>>uint (_bcc ));_faf :=uint16 ((_aca [_efg ]&_gae )<<uint (_bcc ))<<8;_age :=8-_bcc ;_efg ++;_bcc =0;
if _efg >=len (_aca ){return _faf >>(16-uint (_age )),16-_age ,_gff +_age ;};_faf |=uint16 (_aca [_efg ])<<(8-uint (_age ));_age +=8;_efg ++;_bcc =0;if _efg >=len (_aca ){return _faf >>(16-uint (_age )),16-_age ,_gff +_age ;};if _age ==16{return _faf ,0,_gff +_age ;
};_fab :=16-_age ;_faf |=uint16 (_aca [_efg ]>>(8-uint (_fab )));return _faf ,0,_gff +16;};type code struct{Code uint16 ;BitsWritten int ;};func _gcc (_cdd []byte ,_adf ,_fdee ,_ecde int )([]byte ,int ){_abd :=_eaag (_fdee ,_ecde );_cdd ,_adf =_egf (_cdd ,_adf ,_abd );
return _cdd ,_adf ;};func _ccb (_fcd []byte ,_cgbg int )(bool ,int ,error ){_eca :=_cgbg ;var _adg bool ;_adg ,_cgbg =_cgbgf (_fcd ,_cgbg );if _adg {_adg ,_cgbg =_cgbgf (_fcd ,_cgbg );if _adg {return true ,_cgbg ,nil ;};return false ,_eca ,_gf ;};return false ,_eca ,nil ;
};func _bffc (_fagd []byte ,_ffdc bool ,_gec int )(int ,int ){_fcae :=0;for _gec < len (_fagd ){if _ffdc {if _fagd [_gec ]!=_bfd {break ;};}else {if _fagd [_gec ]!=_bdd {break ;};};_fcae ++;_gec ++;};return _fcae ,_gec ;};func (_bfb *Encoder )encodeG4 (_dda [][]byte )[]byte {_bcdd :=make ([][]byte ,len (_dda ));
copy (_bcdd ,_dda );_bcdd =_ecg (_bcdd );var _fea []byte ;var _aadc int ;for _dcgg :=1;_dcgg < len (_bcdd );_dcgg ++{if _bfb .Rows > 0&&!_bfb .EndOfBlock &&_dcgg ==(_bfb .Rows +1){break ;};var _cbeb []byte ;var _dfa ,_bbg ,_efa int ;_dgg :=_aadc ;_bfdf :=-1;
for _bfdf < len (_bcdd [_dcgg ]){_dfa =_gbab (_bcdd [_dcgg ],_bfdf );_bbg =_acc (_bcdd [_dcgg ],_bcdd [_dcgg -1],_bfdf );_efa =_gbab (_bcdd [_dcgg -1],_bbg );if _efa < _dfa {_cbeb ,_dgg =_egf (_cbeb ,_dgg ,_bg );_bfdf =_efa ;}else {if _a .Abs (float64 (_bbg -_dfa ))> 3{_cbeb ,_dgg ,_bfdf =_egbb (_bcdd [_dcgg ],_cbeb ,_dgg ,_bfdf ,_dfa );
}else {_cbeb ,_dgg =_gcc (_cbeb ,_dgg ,_dfa ,_bbg );_bfdf =_dfa ;};};};_fea =_bfb .appendEncodedRow (_fea ,_cbeb ,_aadc );if _bfb .EncodedByteAlign {_dgg =0;};_aadc =_dgg %8;};if _bfb .EndOfBlock {_edfb ,_ :=_gbed (_aadc );_fea =_bfb .appendEncodedRow (_fea ,_edfb ,_aadc );
};return _fea ;};func _ffd (_fbg []byte ,_db int )(bool ,int ,error ){_gc :=_db ;var _bcba =false ;for _efb :=0;_efb < 6;_efb ++{_bcba ,_db =_ffa (_fbg ,_db );if !_bcba {if _efb > 1{return false ,_gc ,_ba ;};_db =_gc ;break ;};};return _bcba ,_db ,nil ;
};func _egf (_ecae []byte ,_fdc int ,_gdd code )([]byte ,int ){_daa :=0;for _daa < _gdd .BitsWritten {_dfcf :=_fdc /8;_bbfa :=_fdc %8;if _dfcf >=len (_ecae ){_ecae =append (_ecae ,0);};_dcaf :=8-_bbfa ;_eagce :=_gdd .BitsWritten -_daa ;if _dcaf > _eagce {_dcaf =_eagce ;
};if _daa < 8{_ecae [_dfcf ]=_ecae [_dfcf ]|byte (_gdd .Code >>uint (8+_bbfa -_daa ))&_cg [8-_dcaf -_bbfa ];}else {_ecae [_dfcf ]=_ecae [_dfcf ]|(byte (_gdd .Code <<uint (_daa -8))&_cg [8-_dcaf ])>>uint (_bbfa );};_fdc +=_dcaf ;_daa +=_dcaf ;};return _ecae ,_fdc ;
};func _ffgf (_ffaa ,_dcge []byte ,_bfac int ,_gabd bool )int {_abg :=_gbab (_dcge ,_bfac );if _abg < len (_dcge )&&(_bfac ==-1&&_dcge [_abg ]==_bfd ||_bfac >=0&&_bfac < len (_ffaa )&&_ffaa [_bfac ]==_dcge [_abg ]||_bfac >=len (_ffaa )&&_gabd &&_dcge [_abg ]==_bfd ||_bfac >=len (_ffaa )&&!_gabd &&_dcge [_abg ]==_bdd ){_abg =_gbab (_dcge ,_abg );
};return _abg ;};func _dfgb (_aee []byte ,_caa int )([]byte ,int ){return _egf (_aee ,_caa ,_bg )};func _egbb (_eec ,_ccge []byte ,_bdfg ,_agf ,_adcc int )([]byte ,int ,int ){_ebb :=_gbab (_eec ,_adcc );_cea :=_agf >=0&&_eec [_agf ]==_bfd ||_agf ==-1;_ccge ,_bdfg =_egf (_ccge ,_bdfg ,_af );
var _cac int ;if _agf > -1{_cac =_adcc -_agf ;}else {_cac =_adcc -_agf -1;};_ccge ,_bdfg =_fca (_ccge ,_bdfg ,_cac ,_cea );_cea =!_cea ;_cebb :=_ebb -_adcc ;_ccge ,_bdfg =_fca (_ccge ,_bdfg ,_cebb ,_cea );_agf =_ebb ;return _ccge ,_bdfg ,_agf ;};func _fagb (_adac []byte ,_gfd int )(bool ,int ){return _aef (_adac ,_gfd ,_gd )};
func _eaag (_cebbd ,_eafb int )code {var _dcbf code ;switch _eafb -_cebbd {case -1:_dcbf =_bdg ;case -2:_dcbf =_d ;case -3:_dcbf =_aa ;case 0:_dcbf =_bdb ;case 1:_dcbf =_ef ;case 2:_dcbf =_gg ;case 3:_dcbf =_fd ;};return _dcbf ;};func _feec (_ebfb ,_cba []byte ,_ebc int ,_fgb bool )([]byte ,int ,error ){_eff :=_ebc ;
var _gad int ;for _gad ,_ebc =_dcg (_ebfb ,_ebc ,_fgb );_gad !=-1;_gad ,_ebc =_dcg (_ebfb ,_ebc ,_fgb ){_cba =_cab (_cba ,_fgb ,_gad );if _gad < 64{break ;};};if _gad ==-1{return _cba ,_eff ,_cga ;};return _cba ,_ebc ,nil ;};var (_b map[int ]code ;_bd map[int ]code ;
_c map[int ]code ;_ae map[int ]code ;_fb map[int ]code ;_cg map[int ]byte ;_g =code {Code :1<<4,BitsWritten :12};_eb =code {Code :3<<3,BitsWritten :13};_gd =code {Code :2<<3,BitsWritten :13};_bg =code {Code :1<<12,BitsWritten :4};_af =code {Code :1<<13,BitsWritten :3};
_bdb =code {Code :1<<15,BitsWritten :1};_bdg =code {Code :3<<13,BitsWritten :3};_d =code {Code :3<<10,BitsWritten :6};_aa =code {Code :3<<9,BitsWritten :7};_ef =code {Code :2<<13,BitsWritten :3};_gg =code {Code :2<<10,BitsWritten :6};_fd =code {Code :2<<9,BitsWritten :7};
);func _fgce (_cdcb int )([]byte ,int ){var _bbag []byte ;for _cdcg :=0;_cdcg < 6;_cdcg ++{_bbag ,_cdcb =_egf (_bbag ,_cdcb ,_g );};return _bbag ,_cdcb %8;};func (_fga *Encoder )appendEncodedRow (_fddc ,_eae []byte ,_dec int )[]byte {if len (_fddc )> 0&&_dec !=0&&!_fga .EncodedByteAlign {_fddc [len (_fddc )-1]=_fddc [len (_fddc )-1]|_eae [0];
_fddc =append (_fddc ,_eae [1:]...);}else {_fddc =append (_fddc ,_eae ...);};return _fddc ;};func _ffa (_fcb []byte ,_cccb int )(bool ,int ){return _aef (_fcb ,_cccb ,_eb )};func _de (_gag [][]byte ,_bba []byte ,_ceb bool ,_aed ,_eaf int )([]byte ,int ){_fgc :=_ffgf (_bba ,_gag [len (_gag )-1],_aed ,_ceb );
_gfe :=_fgc +_eaf ;if _aed ==-1{_bba =_cab (_bba ,_ceb ,_gfe -_aed -1);}else {_bba =_cab (_bba ,_ceb ,_gfe -_aed );};_aed =_gfe ;return _bba ,_aed ;};func _geg (_dcf uint16 ,_ca int )byte {if _ca < 8{_dcf >>=8;};_ca %=8;_gab :=byte (0x01<<(7-uint (_ca )));
return (byte (_dcf )&_gab )>>(7-uint (_ca ));};func (_fgf *Encoder )Decode (encoded []byte )([][]byte ,error ){if _fgf .BlackIs1 {_bfd =0;_bdd =1;}else {_bfd =1;_bdd =0;};if _fgf .K ==0{return _fgf .decodeG31D (encoded );};if _fgf .K > 0{return _fgf .decodeG32D (encoded );
};if _fgf .K < 4{return _fgf .decodeG4 (encoded );};return nil ,nil ;};func _ecg (_acad [][]byte )[][]byte {_afdc :=make ([]byte ,len (_acad [0]));for _efad :=range _afdc {_afdc [_efad ]=_bfd ;};_acad =append (_acad ,[]byte {});for _ceab :=len (_acad )-1;
_ceab > 0;_ceab --{_acad [_ceab ]=_acad [_ceab -1];};_acad [0]=_afdc ;return _acad ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};var (_bfd byte =1;
_bdd byte =0;);func (_gcb *Encoder )decodeRow1D (_afe []byte ,_cegf int )([]byte ,int ){var _ed []byte ;_ccc :=true ;var _ab int ;_ab ,_cegf =_dcg (_afe ,_cegf ,_ccc );for _ab !=-1{_ed =_cab (_ed ,_ccc ,_ab );if _ab < 64{if len (_ed )>=_gcb .Columns {break ;
};_ccc =!_ccc ;};_ab ,_cegf =_dcg (_afe ,_cegf ,_ccc );};return _ed ,_cegf ;};