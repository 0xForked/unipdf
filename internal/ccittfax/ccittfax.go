//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_d "errors";_a "math";);func _gab (_gcd ,_geg []byte ,_ffe int ,_abd bool )([]byte ,int ,error ){_cg :=_ffe ;var _bfc int ;for _bfc ,_ffe =_adgd (_gcd ,_ffe ,_abd );_bfc !=-1;_bfc ,_ffe =_adgd (_gcd ,_ffe ,_abd ){_geg =_ccg (_geg ,_abd ,_bfc );if _bfc < 64{break ;};};if _bfc ==-1{return _geg ,_cg ,_cb ;};return _geg ,_ffe ,nil ;};func (_dfga *Encoder )decodeRow1D (_fad []byte ,_afb int )([]byte ,int ){var _cgg []byte ;_aecc :=true ;var _ead int ;_ead ,_afb =_adgd (_fad ,_afb ,_aecc );for _ead !=-1{_cgg =_ccg (_cgg ,_aecc ,_ead );if _ead < 64{if len (_cgg )>=_dfga .Columns {break ;};_aecc =!_aecc ;};_ead ,_afb =_adgd (_fad ,_afb ,_aecc );};return _cgg ,_afb ;};func init (){_dd =make (map[int ]code );_dd [0]=code {Code :13<<8|3<<6,BitsWritten :10};_dd [1]=code {Code :2<<(5+8),BitsWritten :3};_dd [2]=code {Code :3<<(6+8),BitsWritten :2};_dd [3]=code {Code :2<<(6+8),BitsWritten :2};_dd [4]=code {Code :3<<(5+8),BitsWritten :3};_dd [5]=code {Code :3<<(4+8),BitsWritten :4};_dd [6]=code {Code :2<<(4+8),BitsWritten :4};_dd [7]=code {Code :3<<(3+8),BitsWritten :5};_dd [8]=code {Code :5<<(2+8),BitsWritten :6};_dd [9]=code {Code :4<<(2+8),BitsWritten :6};_dd [10]=code {Code :4<<(1+8),BitsWritten :7};_dd [11]=code {Code :5<<(1+8),BitsWritten :7};_dd [12]=code {Code :7<<(1+8),BitsWritten :7};_dd [13]=code {Code :4<<8,BitsWritten :8};_dd [14]=code {Code :7<<8,BitsWritten :8};_dd [15]=code {Code :12<<8,BitsWritten :9};_dd [16]=code {Code :5<<8|3<<6,BitsWritten :10};_dd [17]=code {Code :6<<8,BitsWritten :10};_dd [18]=code {Code :2<<8,BitsWritten :10};_dd [19]=code {Code :12<<8|7<<5,BitsWritten :11};_dd [20]=code {Code :13<<8,BitsWritten :11};_dd [21]=code {Code :13<<8|4<<5,BitsWritten :11};_dd [22]=code {Code :6<<8|7<<5,BitsWritten :11};_dd [23]=code {Code :5<<8,BitsWritten :11};_dd [24]=code {Code :2<<8|7<<5,BitsWritten :11};_dd [25]=code {Code :3<<8,BitsWritten :11};_dd [26]=code {Code :12<<8|10<<4,BitsWritten :12};_dd [27]=code {Code :12<<8|11<<4,BitsWritten :12};_dd [28]=code {Code :12<<8|12<<4,BitsWritten :12};_dd [29]=code {Code :12<<8|13<<4,BitsWritten :12};_dd [30]=code {Code :6<<8|8<<4,BitsWritten :12};_dd [31]=code {Code :6<<8|9<<4,BitsWritten :12};_dd [32]=code {Code :6<<8|10<<4,BitsWritten :12};_dd [33]=code {Code :6<<8|11<<4,BitsWritten :12};_dd [34]=code {Code :13<<8|2<<4,BitsWritten :12};_dd [35]=code {Code :13<<8|3<<4,BitsWritten :12};_dd [36]=code {Code :13<<8|4<<4,BitsWritten :12};_dd [37]=code {Code :13<<8|5<<4,BitsWritten :12};_dd [38]=code {Code :13<<8|6<<4,BitsWritten :12};_dd [39]=code {Code :13<<8|7<<4,BitsWritten :12};_dd [40]=code {Code :6<<8|12<<4,BitsWritten :12};_dd [41]=code {Code :6<<8|13<<4,BitsWritten :12};_dd [42]=code {Code :13<<8|10<<4,BitsWritten :12};_dd [43]=code {Code :13<<8|11<<4,BitsWritten :12};_dd [44]=code {Code :5<<8|4<<4,BitsWritten :12};_dd [45]=code {Code :5<<8|5<<4,BitsWritten :12};_dd [46]=code {Code :5<<8|6<<4,BitsWritten :12};_dd [47]=code {Code :5<<8|7<<4,BitsWritten :12};_dd [48]=code {Code :6<<8|4<<4,BitsWritten :12};_dd [49]=code {Code :6<<8|5<<4,BitsWritten :12};_dd [50]=code {Code :5<<8|2<<4,BitsWritten :12};_dd [51]=code {Code :5<<8|3<<4,BitsWritten :12};_dd [52]=code {Code :2<<8|4<<4,BitsWritten :12};_dd [53]=code {Code :3<<8|7<<4,BitsWritten :12};_dd [54]=code {Code :3<<8|8<<4,BitsWritten :12};_dd [55]=code {Code :2<<8|7<<4,BitsWritten :12};_dd [56]=code {Code :2<<8|8<<4,BitsWritten :12};_dd [57]=code {Code :5<<8|8<<4,BitsWritten :12};_dd [58]=code {Code :5<<8|9<<4,BitsWritten :12};_dd [59]=code {Code :2<<8|11<<4,BitsWritten :12};_dd [60]=code {Code :2<<8|12<<4,BitsWritten :12};_dd [61]=code {Code :5<<8|10<<4,BitsWritten :12};_dd [62]=code {Code :6<<8|6<<4,BitsWritten :12};_dd [63]=code {Code :6<<8|7<<4,BitsWritten :12};_gc =make (map[int ]code );_gc [0]=code {Code :53<<8,BitsWritten :8};_gc [1]=code {Code :7<<(2+8),BitsWritten :6};_gc [2]=code {Code :7<<(4+8),BitsWritten :4};_gc [3]=code {Code :8<<(4+8),BitsWritten :4};_gc [4]=code {Code :11<<(4+8),BitsWritten :4};_gc [5]=code {Code :12<<(4+8),BitsWritten :4};_gc [6]=code {Code :14<<(4+8),BitsWritten :4};_gc [7]=code {Code :15<<(4+8),BitsWritten :4};_gc [8]=code {Code :19<<(3+8),BitsWritten :5};_gc [9]=code {Code :20<<(3+8),BitsWritten :5};_gc [10]=code {Code :7<<(3+8),BitsWritten :5};_gc [11]=code {Code :8<<(3+8),BitsWritten :5};_gc [12]=code {Code :8<<(2+8),BitsWritten :6};_gc [13]=code {Code :3<<(2+8),BitsWritten :6};_gc [14]=code {Code :52<<(2+8),BitsWritten :6};_gc [15]=code {Code :53<<(2+8),BitsWritten :6};_gc [16]=code {Code :42<<(2+8),BitsWritten :6};_gc [17]=code {Code :43<<(2+8),BitsWritten :6};_gc [18]=code {Code :39<<(1+8),BitsWritten :7};_gc [19]=code {Code :12<<(1+8),BitsWritten :7};_gc [20]=code {Code :8<<(1+8),BitsWritten :7};_gc [21]=code {Code :23<<(1+8),BitsWritten :7};_gc [22]=code {Code :3<<(1+8),BitsWritten :7};_gc [23]=code {Code :4<<(1+8),BitsWritten :7};_gc [24]=code {Code :40<<(1+8),BitsWritten :7};_gc [25]=code {Code :43<<(1+8),BitsWritten :7};_gc [26]=code {Code :19<<(1+8),BitsWritten :7};_gc [27]=code {Code :36<<(1+8),BitsWritten :7};_gc [28]=code {Code :24<<(1+8),BitsWritten :7};_gc [29]=code {Code :2<<8,BitsWritten :8};_gc [30]=code {Code :3<<8,BitsWritten :8};_gc [31]=code {Code :26<<8,BitsWritten :8};_gc [32]=code {Code :27<<8,BitsWritten :8};_gc [33]=code {Code :18<<8,BitsWritten :8};_gc [34]=code {Code :19<<8,BitsWritten :8};_gc [35]=code {Code :20<<8,BitsWritten :8};_gc [36]=code {Code :21<<8,BitsWritten :8};_gc [37]=code {Code :22<<8,BitsWritten :8};_gc [38]=code {Code :23<<8,BitsWritten :8};_gc [39]=code {Code :40<<8,BitsWritten :8};_gc [40]=code {Code :41<<8,BitsWritten :8};_gc [41]=code {Code :42<<8,BitsWritten :8};_gc [42]=code {Code :43<<8,BitsWritten :8};_gc [43]=code {Code :44<<8,BitsWritten :8};_gc [44]=code {Code :45<<8,BitsWritten :8};_gc [45]=code {Code :4<<8,BitsWritten :8};_gc [46]=code {Code :5<<8,BitsWritten :8};_gc [47]=code {Code :10<<8,BitsWritten :8};_gc [48]=code {Code :11<<8,BitsWritten :8};_gc [49]=code {Code :82<<8,BitsWritten :8};_gc [50]=code {Code :83<<8,BitsWritten :8};_gc [51]=code {Code :84<<8,BitsWritten :8};_gc [52]=code {Code :85<<8,BitsWritten :8};_gc [53]=code {Code :36<<8,BitsWritten :8};_gc [54]=code {Code :37<<8,BitsWritten :8};_gc [55]=code {Code :88<<8,BitsWritten :8};_gc [56]=code {Code :89<<8,BitsWritten :8};_gc [57]=code {Code :90<<8,BitsWritten :8};_gc [58]=code {Code :91<<8,BitsWritten :8};_gc [59]=code {Code :74<<8,BitsWritten :8};_gc [60]=code {Code :75<<8,BitsWritten :8};_gc [61]=code {Code :50<<8,BitsWritten :8};_gc [62]=code {Code :51<<8,BitsWritten :8};_gc [63]=code {Code :52<<8,BitsWritten :8};_b =make (map[int ]code );_b [64]=code {Code :3<<8|3<<6,BitsWritten :10};_b [128]=code {Code :12<<8|8<<4,BitsWritten :12};_b [192]=code {Code :12<<8|9<<4,BitsWritten :12};_b [256]=code {Code :5<<8|11<<4,BitsWritten :12};_b [320]=code {Code :3<<8|3<<4,BitsWritten :12};_b [384]=code {Code :3<<8|4<<4,BitsWritten :12};_b [448]=code {Code :3<<8|5<<4,BitsWritten :12};_b [512]=code {Code :3<<8|12<<3,BitsWritten :13};_b [576]=code {Code :3<<8|13<<3,BitsWritten :13};_b [640]=code {Code :2<<8|10<<3,BitsWritten :13};_b [704]=code {Code :2<<8|11<<3,BitsWritten :13};_b [768]=code {Code :2<<8|12<<3,BitsWritten :13};_b [832]=code {Code :2<<8|13<<3,BitsWritten :13};_b [896]=code {Code :3<<8|18<<3,BitsWritten :13};_b [960]=code {Code :3<<8|19<<3,BitsWritten :13};_b [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_b [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_b [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_b [1216]=code {Code :119<<3,BitsWritten :13};_b [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_b [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_b [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_b [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_b [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_b [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_b [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_b [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_gd =make (map[int ]code );_gd [64]=code {Code :27<<(3+8),BitsWritten :5};_gd [128]=code {Code :18<<(3+8),BitsWritten :5};_gd [192]=code {Code :23<<(2+8),BitsWritten :6};_gd [256]=code {Code :55<<(1+8),BitsWritten :7};_gd [320]=code {Code :54<<8,BitsWritten :8};_gd [384]=code {Code :55<<8,BitsWritten :8};_gd [448]=code {Code :100<<8,BitsWritten :8};_gd [512]=code {Code :101<<8,BitsWritten :8};_gd [576]=code {Code :104<<8,BitsWritten :8};_gd [640]=code {Code :103<<8,BitsWritten :8};_gd [704]=code {Code :102<<8,BitsWritten :9};_gd [768]=code {Code :102<<8|1<<7,BitsWritten :9};_gd [832]=code {Code :105<<8,BitsWritten :9};_gd [896]=code {Code :105<<8|1<<7,BitsWritten :9};_gd [960]=code {Code :106<<8,BitsWritten :9};_gd [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_gd [1088]=code {Code :107<<8,BitsWritten :9};_gd [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_gd [1216]=code {Code :108<<8,BitsWritten :9};_gd [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_gd [1344]=code {Code :109<<8,BitsWritten :9};_gd [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_gd [1472]=code {Code :76<<8,BitsWritten :9};_gd [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_gd [1600]=code {Code :77<<8,BitsWritten :9};_gd [1664]=code {Code :24<<(2+8),BitsWritten :6};_gd [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_bg =make (map[int ]code );_bg [1792]=code {Code :1<<8,BitsWritten :11};_bg [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_bg [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_bg [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_bg [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_bg [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_bg [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_bg [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_bg [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_bg [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_bg [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_bg [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_bg [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_bb =make (map[int ]byte );_bb [0]=0xFF;_bb [1]=0xFE;_bb [2]=0xFC;_bb [3]=0xF8;_bb [4]=0xF0;_bb [5]=0xE0;_bb [6]=0xC0;_bb [7]=0x80;_bb [8]=0x00;};func (_eaga *Encoder )encodeG4 (_dceb [][]byte )[]byte {_fcc :=make ([][]byte ,len (_dceb ));copy (_fcc ,_dceb );_fcc =_bac (_fcc );var _gcgf []byte ;var _cdg int ;for _aeag :=1;_aeag < len (_fcc );_aeag ++{if _eaga .Rows > 0&&!_eaga .EndOfBlock &&_aeag ==(_eaga .Rows +1){break ;};var _agg []byte ;var _egce ,_gcb ,_gabg int ;_egg :=_cdg ;_dcf :=-1;for _dcf < len (_fcc [_aeag ]){_egce =_fac (_fcc [_aeag ],_dcf );_gcb =_cad (_fcc [_aeag ],_fcc [_aeag -1],_dcf );_gabg =_fac (_fcc [_aeag -1],_gcb );if _gabg < _egce {_agg ,_egg =_fadb (_agg ,_egg ,_c );_dcf =_gabg ;}else {if _a .Abs (float64 (_gcb -_egce ))> 3{_agg ,_egg ,_dcf =_gegad (_fcc [_aeag ],_agg ,_egg ,_dcf ,_egce );}else {_agg ,_egg =_cdgd (_agg ,_egg ,_egce ,_gcb );_dcf =_egce ;};};};_gcgf =_eaga .appendEncodedRow (_gcgf ,_agg ,_cdg );if _eaga .EncodedByteAlign {_egg =0;};_cdg =_egg %8;};if _eaga .EndOfBlock {_cggc ,_ :=_adc (_cdg );_gcgf =_eaga .appendEncodedRow (_gcgf ,_cggc ,_cdg );};return _gcgf ;};func _bac (_cdef [][]byte )[][]byte {_aaa :=make ([]byte ,len (_cdef [0]));for _eecb :=range _aaa {_aaa [_eecb ]=_fdcf ;};_cdef =append (_cdef ,[]byte {});for _fef :=len (_cdef )-1;_fef > 0;_fef --{_cdef [_fef ]=_cdef [_fef -1];};_cdef [0]=_aaa ;return _cdef ;};func init (){for _gb ,_de :=range _gc {_faf (_ggc ,_de ,0,_gb );};for _fff ,_cc :=range _gd {_faf (_ggc ,_cc ,0,_fff );};for _ce ,_bgd :=range _dd {_faf (_ff ,_bgd ,0,_ce );};for _dfd ,_aba :=range _b {_faf (_ff ,_aba ,0,_dfd );};for _fa ,_cef :=range _bg {_faf (_ggc ,_cef ,0,_fa );_faf (_ff ,_cef ,0,_fa );};_faf (_ffa ,_c ,0,0);_faf (_ffa ,_ca ,0,0);_faf (_ffa ,_cab ,0,0);_faf (_ffa ,_ab ,0,0);_faf (_ffa ,_e ,0,0);_faf (_ffa ,_f ,0,0);_faf (_ffa ,_bf ,0,0);_faf (_ffa ,_gdf ,0,0);_faf (_ffa ,_gdb ,0,0);};func _fcb (_afgd []byte ,_cga int )(code ,int ,bool ){var (_eeg uint16 ;_dcg int ;_dbg int ;);_dbg =_cga ;_eeg ,_dcg ,_ =_ecf (_afgd ,_cga );_cgf ,_agd :=_cfc (_eeg ,_dcg );if !_agd {return code {},_dbg ,false ;};return _cgf ,_dbg +_cgf .BitsWritten ,true ;};func (_af *Encoder )decodeG31D (_be []byte )([][]byte ,error ){var _bcg [][]byte ;var _ad int ;for (_ad /8)< len (_be ){var _ee bool ;_ee ,_ad =_cde (_be ,_ad );if !_ee {if _af .EndOfLine {return nil ,_gg ;};}else {for _dg :=0;_dg < 5;_dg ++{_ee ,_ad =_cde (_be ,_ad );if !_ee {if _dg ==0{break ;};return nil ,_aec ;};};if _ee {break ;};};var _dc []byte ;_dc ,_ad =_af .decodeRow1D (_be ,_ad );if _af .EncodedByteAlign &&_ad %8!=0{_ad +=8-_ad %8;};_bcg =append (_bcg ,_dc );if _af .Rows > 0&&!_af .EndOfBlock &&len (_bcg )>=_af .Rows {break ;};};return _bcg ,nil ;};func _dba (_bdc []byte ,_abc int ,_fffd code )(bool ,int ){_bga :=_abc ;var (_dbd uint16 ;_gegb int ;);_dbd ,_gegb ,_abc =_ecf (_bdc ,_abc );if _gegb > 3{return false ,_bga ;};_dbd >>=uint (3-_gegb );_dbd <<=3;if _dbd !=_fffd .Code {return false ,_bga ;};return true ,_abc -3+_gegb ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _ecb (_eg uint16 ,_fae int ,_ba bool )(int ,code ){var _cba *int ;var _adf *code ;if _ba {_cba ,_adf =_cacb (_ggc ,_eg ,_fae );}else {_cba ,_adf =_cacb (_ff ,_eg ,_fae );};if _cba ==nil {return -1,code {};};return *_cba ,*_adf ;};func _fac (_fcf []byte ,_aeb int )int {if _aeb >=len (_fcf ){return _aeb ;};if _aeb < -1{_aeb =-1;};var _dcff byte ;if _aeb > -1{_dcff =_fcf [_aeb ];}else {_dcff =_fdcf ;};_dca :=_aeb +1;for _dca < len (_fcf ){if _fcf [_dca ]!=_dcff {break ;};_dca ++;};return _dca ;};func _fecg (_fbg []byte ,_gfeg int )([]byte ,int ){return _fadb (_fbg ,_gfeg ,_c )};type code struct{Code uint16 ;BitsWritten int ;};func _ecf (_efe []byte ,_cbfa int )(uint16 ,int ,int ){_cbgb :=_cbfa ;_gcc :=_cbfa /8;_cbfa %=8;if _gcc >=len (_efe ){return 0,16,_cbgb ;};_deg :=byte (0xFF>>uint (_cbfa ));_ddg :=uint16 ((_efe [_gcc ]&_deg )<<uint (_cbfa ))<<8;_abee :=8-_cbfa ;_gcc ++;_cbfa =0;if _gcc >=len (_efe ){return _ddg >>(16-uint (_abee )),16-_abee ,_cbgb +_abee ;};_ddg |=uint16 (_efe [_gcc ])<<(8-uint (_abee ));_abee +=8;_gcc ++;_cbfa =0;if _gcc >=len (_efe ){return _ddg >>(16-uint (_abee )),16-_abee ,_cbgb +_abee ;};if _abee ==16{return _ddg ,0,_cbgb +_abee ;};_aee :=16-_abee ;_ddg |=uint16 (_efe [_gcc ]>>(8-uint (_aee )));return _ddg ,0,_cbgb +16;};func _gegad (_ffg ,_fba []byte ,_cae ,_acc ,_fdb int )([]byte ,int ,int ){_gce :=_fac (_ffg ,_fdb );_cbgd :=_acc >=0&&_ffg [_acc ]==_fdcf ||_acc ==-1;_fba ,_cae =_fadb (_fba ,_cae ,_ca );var _fdgbd int ;if _acc > -1{_fdgbd =_fdb -_acc ;}else {_fdgbd =_fdb -_acc -1;};_fba ,_cae =_bcd (_fba ,_cae ,_fdgbd ,_cbgd );_cbgd =!_cbgd ;_eba :=_gce -_fdb ;_fba ,_cae =_bcd (_fba ,_cae ,_eba ,_cbgd );_acc =_gce ;return _fba ,_cae ,_acc ;};func _faf (_degd *decodingTreeNode ,_edc code ,_dce int ,_cge int ){_cbc :=_eac (_edc .Code ,_dce );_dce ++;if _cbc ==1{if _degd .Right ==nil {_degd .Right =&decodingTreeNode {Val :_cbc };};if _dce ==_edc .BitsWritten {_degd .Right .RunLen =&_cge ;_degd .Right .Code =&_edc ;}else {_faf (_degd .Right ,_edc ,_dce ,_cge );};}else {if _degd .Left ==nil {_degd .Left =&decodingTreeNode {Val :_cbc };};if _dce ==_edc .BitsWritten {_degd .Left .RunLen =&_cge ;_degd .Left .Code =&_edc ;}else {_faf (_degd .Left ,_edc ,_dce ,_cge );};};};func _ccg (_gde []byte ,_ccb bool ,_fgg int )[]byte {if _fgg < 0{return _gde ;};_dfge :=make ([]byte ,_fgg );if _ccb {for _egb :=0;_egb < len (_dfge );_egb ++{_dfge [_egb ]=_fdcf ;};}else {for _ed :=0;_ed < len (_dfge );_ed ++{_dfge [_ed ]=_bfe ;};};_gde =append (_gde ,_dfge ...);return _gde ;};func _cdgd (_egd []byte ,_gfd ,_adbf ,_bbc int )([]byte ,int ){_bcgf :=_dff (_adbf ,_bbc );_egd ,_gfd =_fadb (_egd ,_gfd ,_bcgf );return _egd ,_gfd ;};func _geef (_dcga int )([]byte ,int ){var _gfb []byte ;for _ddd :=0;_ddd < 6;_ddd ++{_gfb ,_dcga =_fadb (_gfb ,_dcga ,_dde );};return _gfb ,_dcga %8;};func _adgd (_bgg []byte ,_cgc int ,_dfe bool )(int ,int ){var (_gcg uint16 ;_eec int ;_cec int ;);_cec =_cgc ;_gcg ,_eec ,_ =_ecf (_bgg ,_cgc );_ebe ,_dfdb :=_ecb (_gcg ,_eec ,_dfe );if _ebe ==-1{return -1,_cec ;};return _ebe ,_cec +_dfdb .BitsWritten ;};func _bcc (_dfc [][]byte ,_cfg []byte ,_bba bool ,_gee ,_bccb int )([]byte ,int ){_cbe :=_fdda (_cfg ,_dfc [len (_dfc )-1],_gee ,_bba );_fdg :=_cbe +_bccb ;if _gee ==-1{_cfg =_ccg (_cfg ,_bba ,_fdg -_gee -1);}else {_cfg =_ccg (_cfg ,_bba ,_fdg -_gee );};_gee =_fdg ;return _cfg ,_gee ;};func (_efdf *Encoder )appendEncodedRow (_ggef ,_dggb []byte ,_ccc int )[]byte {if len (_ggef )> 0&&_ccc !=0&&!_efdf .EncodedByteAlign {_ggef [len (_ggef )-1]=_ggef [len (_ggef )-1]|_dggb [0];_ggef =append (_ggef ,_dggb [1:]...);}else {_ggef =append (_ggef ,_dggb ...);};return _ggef ;};func (_faa *Encoder )decodeG32D (_afg []byte )([][]byte ,error ){var (_bef [][]byte ;_efg int ;_fg error ;);_dfb :for (_efg /8)< len (_afg ){var _fd bool ;_fd ,_efg ,_fg =_aad (_afg ,_efg );if _fg !=nil {return nil ,_fg ;};if _fd {break ;};_fd ,_efg =_dbde (_afg ,_efg );if !_fd {if _faa .EndOfLine {return nil ,_gg ;};};var _cf []byte ;_cf ,_efg =_faa .decodeRow1D (_afg ,_efg );if _faa .EncodedByteAlign &&_efg %8!=0{_efg +=8-_efg %8;};if _cf !=nil {_bef =append (_bef ,_cf );};if _faa .Rows > 0&&!_faa .EndOfBlock &&len (_bef )>=_faa .Rows {break ;};for _eeb :=1;_eeb < _faa .K &&(_efg /8)< len (_afg );_eeb ++{_fd ,_efg =_cfe (_afg ,_efg );if !_fd {_fd ,_efg ,_fg =_aad (_afg ,_efg );if _fg !=nil {return nil ,_fg ;};if _fd {break _dfb ;}else {if _faa .EndOfLine {return nil ,_gg ;};};};var (_cac code ;_ge bool ;);_gf :=true ;var _ggcg []byte ;_adg :=-1;for _cac ,_efg ,_ge =_fcb (_afg ,_efg );_ge ;_cac ,_efg ,_ge =_fcb (_afg ,_efg ){switch _cac {case _c :_ggcg ,_adg =_aa (_bef ,_ggcg ,_gf ,_adg );case _ca :_ggcg ,_efg ,_adg ,_fg =_fdgb (_afg ,_ggcg ,_efg ,_gf ,_adg );if _fg !=nil {return nil ,_fg ;};case _cab :_ggcg ,_adg =_bcc (_bef ,_ggcg ,_gf ,_adg ,0);_gf =!_gf ;case _ab :_ggcg ,_adg =_bcc (_bef ,_ggcg ,_gf ,_adg ,1);_gf =!_gf ;case _e :_ggcg ,_adg =_bcc (_bef ,_ggcg ,_gf ,_adg ,2);_gf =!_gf ;case _f :_ggcg ,_adg =_bcc (_bef ,_ggcg ,_gf ,_adg ,3);_gf =!_gf ;case _bf :_ggcg ,_adg =_bcc (_bef ,_ggcg ,_gf ,_adg ,-1);_gf =!_gf ;case _gdf :_ggcg ,_adg =_bcc (_bef ,_ggcg ,_gf ,_adg ,-2);_gf =!_gf ;case _gdb :_ggcg ,_adg =_bcc (_bef ,_ggcg ,_gf ,_adg ,-3);_gf =!_gf ;};if len (_ggcg )>=_faa .Columns {break ;};};if _faa .EncodedByteAlign &&_efg %8!=0{_efg +=8-_efg %8;};if _ggcg !=nil {_bef =append (_bef ,_ggcg );};if _faa .Rows > 0&&!_faa .EndOfBlock &&len (_bef )>=_faa .Rows {break _dfb ;};};};return _bef ,nil ;};func _dbde (_bda []byte ,_ac int )(bool ,int ){return _dba (_bda ,_ac ,_dde )};var (_dd map[int ]code ;_gc map[int ]code ;_b map[int ]code ;_gd map[int ]code ;_bg map[int ]code ;_bb map[int ]byte ;_df =code {Code :1<<4,BitsWritten :12};_dde =code {Code :3<<3,BitsWritten :13};_bc =code {Code :2<<3,BitsWritten :13};_c =code {Code :1<<12,BitsWritten :4};_ca =code {Code :1<<13,BitsWritten :3};_cab =code {Code :1<<15,BitsWritten :1};_ab =code {Code :3<<13,BitsWritten :3};_e =code {Code :3<<10,BitsWritten :6};_f =code {Code :3<<9,BitsWritten :7};_bf =code {Code :2<<13,BitsWritten :3};_gdf =code {Code :2<<10,BitsWritten :6};_gdb =code {Code :2<<9,BitsWritten :7};);var (_fdcf byte =1;_bfe byte =0;);func _aa (_fdc [][]byte ,_ga []byte ,_eb bool ,_fb int )([]byte ,int ){_gcf :=_fdda (_ga ,_fdc [len (_fdc )-1],_fb ,_eb );_cd :=_fac (_fdc [len (_fdc )-1],_gcf );if _fb ==-1{_ga =_ccg (_ga ,_eb ,_cd -_fb -1);}else {_ga =_ccg (_ga ,_eb ,_cd -_fb );};_fb =_cd ;return _ga ,_fb ;};func (_ef *Encoder )Decode (encoded []byte )([][]byte ,error ){if _ef .BlackIs1 {_fdcf =0;_bfe =1;}else {_fdcf =1;_bfe =0;};if _ef .K ==0{return _ef .decodeG31D (encoded );};if _ef .K > 0{return _ef .decodeG32D (encoded );};if _ef .K < 4{return _ef .decodeG4 (encoded );};return nil ,nil ;};func (_dge *Encoder )decodeG4 (_cag []byte )([][]byte ,error ){_aeg :=make ([]byte ,_dge .Columns );for _befe :=range _aeg {_aeg [_befe ]=_fdcf ;};_dgg :=make ([][]byte ,1);_dgg [0]=_aeg ;var (_fc bool ;_fcg error ;_cbg int ;);for (_cbg /8)< len (_cag ){_fc ,_cbg ,_fcg =_bcgg (_cag ,_cbg );if _fcg !=nil {return nil ,_fcg ;};if _fc {break ;};var (_abe code ;_cfa bool ;);_eag :=true ;var _fe []byte ;_dfg :=-1;for _dfg < _dge .Columns {_abe ,_cbg ,_cfa =_fcb (_cag ,_cbg );if !_cfa {return nil ,_ea ;};switch _abe {case _c :_fe ,_dfg =_aa (_dgg ,_fe ,_eag ,_dfg );case _ca :_fe ,_cbg ,_dfg ,_fcg =_fdgb (_cag ,_fe ,_cbg ,_eag ,_dfg );if _fcg !=nil {return nil ,_fcg ;};case _cab :_fe ,_dfg =_bcc (_dgg ,_fe ,_eag ,_dfg ,0);_eag =!_eag ;case _ab :_fe ,_dfg =_bcc (_dgg ,_fe ,_eag ,_dfg ,1);_eag =!_eag ;case _e :_fe ,_dfg =_bcc (_dgg ,_fe ,_eag ,_dfg ,2);_eag =!_eag ;case _f :_fe ,_dfg =_bcc (_dgg ,_fe ,_eag ,_dfg ,3);_eag =!_eag ;case _bf :_fe ,_dfg =_bcc (_dgg ,_fe ,_eag ,_dfg ,-1);_eag =!_eag ;case _gdf :_fe ,_dfg =_bcc (_dgg ,_fe ,_eag ,_dfg ,-2);_eag =!_eag ;case _gdb :_fe ,_dfg =_bcc (_dgg ,_fe ,_eag ,_dfg ,-3);_eag =!_eag ;};if len (_fe )>=_dge .Columns {break ;};};if _dge .EncodedByteAlign &&_cbg %8!=0{_cbg +=8-_cbg %8;};_dgg =append (_dgg ,_fe );if _dge .Rows > 0&&!_dge .EndOfBlock &&len (_dgg )>=(_dge .Rows +1){break ;};};_dgg =_dgg [1:];return _dgg ,nil ;};func _fec (_gfca int )([]byte ,int ){var _efb []byte ;for _dae :=0;_dae < 6;_dae ++{_efb ,_gfca =_fadb (_efb ,_gfca ,_df );};return _efb ,_gfca %8;};func _feg (_cbff int ,_ade bool )(code ,int ,bool ){if _cbff < 64{if _ade {return _gc [_cbff ],0,true ;};return _dd [_cbff ],0,true ;};_dcb :=_cbff /64;if _dcb > 40{return _bg [2560],_cbff -2560,false ;};if _dcb > 27{return _bg [_dcb *64],_cbff -_dcb *64,false ;};if _ade {return _gd [_dcb *64],_cbff -_dcb *64,false ;};return _b [_dcb *64],_cbff -_dcb *64,false ;};func _dff (_aae ,_ddfe int )code {var _eace code ;switch _ddfe -_aae {case -1:_eace =_ab ;case -2:_eace =_e ;case -3:_eace =_f ;case 0:_eace =_cab ;case 1:_eace =_bf ;case 2:_eace =_gdf ;case 3:_eace =_gdb ;};return _eace ;};var (_ec =_d .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_ae =_d .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_cb =_d .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_gg =_d .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_aec =_d .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ea =_d .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _aad (_fbc []byte ,_gff int )(bool ,int ,error ){_befa :=_gff ;var _dee =false ;for _gdc :=0;_gdc < 6;_gdc ++{_dee ,_gff =_dbde (_fbc ,_gff );if !_dee {if _gdc > 1{return false ,_befa ,_ae ;};_gff =_befa ;break ;};};return _dee ,_gff ,nil ;};func _bcgg (_dgb []byte ,_ffag int )(bool ,int ,error ){_daa :=_ffag ;var _dfcf bool ;_dfcf ,_ffag =_cde (_dgb ,_ffag );if _dfcf {_dfcf ,_ffag =_cde (_dgb ,_ffag );if _dfcf {return true ,_ffag ,nil ;};return false ,_daa ,_ec ;};return false ,_daa ,nil ;};func _agb (_deb []byte ,_fda int ,_gec code )([]byte ,int ){_ede :=true ;var _ddfg []byte ;_ddfg ,_fda =_fadb (nil ,_fda ,_gec );_adb :=0;var _eee int ;for _adb < len (_deb ){_eee ,_adb =_daaf (_deb ,_ede ,_adb );_ddfg ,_fda =_bcd (_ddfg ,_fda ,_eee ,_ede );_ede =!_ede ;};return _ddfg ,_fda %8;};func _fdda (_fbcg ,_cda []byte ,_cfd int ,_ada bool )int {_bcab :=_fac (_cda ,_cfd );if _bcab < len (_cda )&&(_cfd ==-1&&_cda [_bcab ]==_fdcf ||_cfd >=0&&_cfd < len (_fbcg )&&_fbcg [_cfd ]==_cda [_bcab ]||_cfd >=len (_fbcg )&&_ada &&_cda [_bcab ]==_fdcf ||_cfd >=len (_fbcg )&&!_ada &&_cda [_bcab ]==_bfe ){_bcab =_fac (_cda ,_bcab );};return _bcab ;};func _bcd (_cee []byte ,_ebd int ,_gccd int ,_geca bool )([]byte ,int ){var (_fag code ;_gbf bool ;);for !_gbf {_fag ,_gccd ,_gbf =_feg (_gccd ,_geca );_cee ,_ebd =_fadb (_cee ,_ebd ,_fag );};return _cee ,_ebd ;};func _adc (_ced int )([]byte ,int ){var _ccfc []byte ;for _fdce :=0;_fdce < 2;_fdce ++{_ccfc ,_ced =_fadb (_ccfc ,_ced ,_df );};return _ccfc ,_ced %8;};func _cfe (_bdd []byte ,_egc int )(bool ,int ){return _dba (_bdd ,_egc ,_bc )};func (_ebg *Encoder )encodeG32D (_geb [][]byte )[]byte {var _dcc []byte ;var _gdcg int ;for _gdbd :=0;_gdbd < len (_geb );_gdbd +=_ebg .K {if _ebg .Rows > 0&&!_ebg .EndOfBlock &&_gdbd ==_ebg .Rows {break ;};_gega ,_fggg :=_agb (_geb [_gdbd ],_gdcg ,_dde );_dcc =_ebg .appendEncodedRow (_dcc ,_gega ,_gdcg );if _ebg .EncodedByteAlign {_fggg =0;};_gdcg =_fggg ;for _ecbd :=_gdbd +1;_ecbd < (_gdbd +_ebg .K )&&_ecbd < len (_geb );_ecbd ++{if _ebg .Rows > 0&&!_ebg .EndOfBlock &&_ecbd ==_ebg .Rows {break ;};_efd ,_ccf :=_fadb (nil ,_gdcg ,_bc );var _gga ,_gfe ,_gge int ;_fedf :=-1;for _fedf < len (_geb [_ecbd ]){_gga =_fac (_geb [_ecbd ],_fedf );_gfe =_cad (_geb [_ecbd ],_geb [_ecbd -1],_fedf );_gge =_fac (_geb [_ecbd -1],_gfe );if _gge < _gga {_efd ,_ccf =_fecg (_efd ,_ccf );_fedf =_gge ;}else {if _a .Abs (float64 (_gfe -_gga ))> 3{_efd ,_ccf ,_fedf =_gegad (_geb [_ecbd ],_efd ,_ccf ,_fedf ,_gga );}else {_efd ,_ccf =_cdgd (_efd ,_ccf ,_gga ,_gfe );_fedf =_gga ;};};};_dcc =_ebg .appendEncodedRow (_dcc ,_efd ,_gdcg );if _ebg .EncodedByteAlign {_ccf =0;};_gdcg =_ccf %8;};};if _ebg .EndOfBlock {_efa ,_ :=_geef (_gdcg );_dcc =_ebg .appendEncodedRow (_dcc ,_efa ,_gdcg );};return _dcc ;};func _fdgb (_ag ,_da []byte ,_aea int ,_fea bool ,_fdf int )([]byte ,int ,int ,error ){_bde :=_aea ;var _gfc error ;_da ,_aea ,_gfc =_gab (_ag ,_da ,_aea ,_fea );if _gfc !=nil {return _da ,_bde ,_fdf ,_gfc ;};_fea =!_fea ;_da ,_aea ,_gfc =_gab (_ag ,_da ,_aea ,_fea );if _gfc !=nil {return _da ,_bde ,_fdf ,_gfc ;};_fdf =len (_da );return _da ,_aea ,_fdf ,nil ;};func _eac (_agf uint16 ,_abdg int )byte {if _abdg < 8{_agf >>=8;};_abdg %=8;_gdd :=byte (0x01<<(7-uint (_abdg )));return (byte (_agf )&_gdd )>>(7-uint (_abdg ));};func _cacb (_dfgc *decodingTreeNode ,_ecg uint16 ,_aecb int )(*int ,*code ){if _dfgc ==nil {return nil ,nil ;};if _aecb ==16{return _dfgc .RunLen ,_dfgc .Code ;};_gded :=_eac (_ecg ,_aecb );_aecb ++;var _faab *int ;var _bce *code ;if _gded ==1{_faab ,_bce =_cacb (_dfgc .Right ,_ecg ,_aecb );}else {_faab ,_bce =_cacb (_dfgc .Left ,_ecg ,_aecb );};if _faab ==nil {_faab =_dfgc .RunLen ;_bce =_dfgc .Code ;};return _faab ,_bce ;};func _cde (_agdf []byte ,_dda int )(bool ,int ){_eaa :=_dda ;var (_ffb uint16 ;_bgdf int ;);_ffb ,_bgdf ,_dda =_ecf (_agdf ,_dda );if _bgdf > 4{return false ,_eaa ;};_ffb >>=uint (4-_bgdf );_ffb <<=4;if _ffb !=_df .Code {return false ,_eaa ;};return true ,_dda -4+_bgdf ;};func _cad (_fcbe ,_befc []byte ,_baf int )int {_fdd :=_fac (_befc ,_baf );if _fdd < len (_befc )&&(_baf ==-1&&_befc [_fdd ]==_fdcf ||_baf >=0&&_baf < len (_fcbe )&&_fcbe [_baf ]==_befc [_fdd ]||_baf >=len (_fcbe )&&_fcbe [_baf -1]!=_befc [_fdd ]){_fdd =_fac (_befc ,_fdd );};return _fdd ;};var (_ggc =&decodingTreeNode {Val :255};_ff =&decodingTreeNode {Val :255};_ffa =&decodingTreeNode {Val :255};);func _daaf (_geea []byte ,_bbaf bool ,_fgga int )(int ,int ){_aed :=0;for _fgga < len (_geea ){if _bbaf {if _geea [_fgga ]!=_fdcf {break ;};}else {if _geea [_fgga ]!=_bfe {break ;};};_aed ++;_fgga ++;};return _aed ,_fgga ;};func _fadb (_aab []byte ,_ecgd int ,_adcc code )([]byte ,int ){_gfcg :=0;for _gfcg < _adcc .BitsWritten {_fgb :=_ecgd /8;_adgg :=_ecgd %8;if _fgb >=len (_aab ){_aab =append (_aab ,0);};_caf :=8-_adgg ;_gdfg :=_adcc .BitsWritten -_gfcg ;if _caf > _gdfg {_caf =_gdfg ;};if _gfcg < 8{_aab [_fgb ]=_aab [_fgb ]|byte (_adcc .Code >>uint (8+_adgg -_gfcg ))&_bb [8-_caf -_adgg ];}else {_aab [_fgb ]=_aab [_fgb ]|(byte (_adcc .Code <<uint (_gfcg -8))&_bb [8-_caf ])>>uint (_adgg );};_ecgd +=_caf ;_gfcg +=_caf ;};return _aab ,_ecgd ;};func (_dbgg *Encoder )Encode (pixels [][]byte )[]byte {if _dbgg .BlackIs1 {_fdcf =0;_bfe =1;}else {_fdcf =1;_bfe =0;};if _dbgg .K ==0{return _dbgg .encodeG31D (pixels );};if _dbgg .K > 0{return _dbgg .encodeG32D (pixels );};if _dbgg .K < 0{return _dbgg .encodeG4 (pixels );};return nil ;};func _cfc (_gdfd uint16 ,_cbf int )(code ,bool ){_ ,_fed :=_cacb (_ffa ,_gdfd ,_cbf );if _fed ==nil {return code {},false ;};return *_fed ,true ;};func (_bca *Encoder )encodeG31D (_egbf [][]byte )[]byte {var _faff []byte ;_bge :=0;for _gba :=range _egbf {if _bca .Rows > 0&&!_bca .EndOfBlock &&_gba ==_bca .Rows {break ;};_ddf ,_bed :=_agb (_egbf [_gba ],_bge ,_df );_faff =_bca .appendEncodedRow (_faff ,_ddf ,_bge );if _bca .EncodedByteAlign {_bed =0;};_bge =_bed ;};if _bca .EndOfBlock {_ccga ,_ :=_fec (_bge );_faff =_bca .appendEncodedRow (_faff ,_ccga ,_bge );};return _faff ;};