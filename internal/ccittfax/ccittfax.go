//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_ff "errors";_e "github.com/unidoc/unipdf/v3/common";_d "math";);func (_bagd *Encoder )decodeRow1D (_facf []byte ,_efg int )([]byte ,int ){var _bgg []byte ;_effe :=true ;var _ced int ;_ced ,_efg =_gdd (_facf ,_efg ,_effe );for _ced !=-1{_bgg =_daae (_bgg ,_effe ,_ced );
if _ced < 64{if len (_bgg )>=_bagd .Columns {break ;};_effe =!_effe ;};_ced ,_efg =_gdd (_facf ,_efg ,_effe );};return _bgg ,_efg ;};var (_cd =&decodingTreeNode {Val :255};_ac =&decodingTreeNode {Val :255};_ad =&decodingTreeNode {Val :255};);func init (){_a =make (map[int ]code );
_a [0]=code {Code :13<<8|3<<6,BitsWritten :10};_a [1]=code {Code :2<<(5+8),BitsWritten :3};_a [2]=code {Code :3<<(6+8),BitsWritten :2};_a [3]=code {Code :2<<(6+8),BitsWritten :2};_a [4]=code {Code :3<<(5+8),BitsWritten :3};_a [5]=code {Code :3<<(4+8),BitsWritten :4};
_a [6]=code {Code :2<<(4+8),BitsWritten :4};_a [7]=code {Code :3<<(3+8),BitsWritten :5};_a [8]=code {Code :5<<(2+8),BitsWritten :6};_a [9]=code {Code :4<<(2+8),BitsWritten :6};_a [10]=code {Code :4<<(1+8),BitsWritten :7};_a [11]=code {Code :5<<(1+8),BitsWritten :7};
_a [12]=code {Code :7<<(1+8),BitsWritten :7};_a [13]=code {Code :4<<8,BitsWritten :8};_a [14]=code {Code :7<<8,BitsWritten :8};_a [15]=code {Code :12<<8,BitsWritten :9};_a [16]=code {Code :5<<8|3<<6,BitsWritten :10};_a [17]=code {Code :6<<8,BitsWritten :10};
_a [18]=code {Code :2<<8,BitsWritten :10};_a [19]=code {Code :12<<8|7<<5,BitsWritten :11};_a [20]=code {Code :13<<8,BitsWritten :11};_a [21]=code {Code :13<<8|4<<5,BitsWritten :11};_a [22]=code {Code :6<<8|7<<5,BitsWritten :11};_a [23]=code {Code :5<<8,BitsWritten :11};
_a [24]=code {Code :2<<8|7<<5,BitsWritten :11};_a [25]=code {Code :3<<8,BitsWritten :11};_a [26]=code {Code :12<<8|10<<4,BitsWritten :12};_a [27]=code {Code :12<<8|11<<4,BitsWritten :12};_a [28]=code {Code :12<<8|12<<4,BitsWritten :12};_a [29]=code {Code :12<<8|13<<4,BitsWritten :12};
_a [30]=code {Code :6<<8|8<<4,BitsWritten :12};_a [31]=code {Code :6<<8|9<<4,BitsWritten :12};_a [32]=code {Code :6<<8|10<<4,BitsWritten :12};_a [33]=code {Code :6<<8|11<<4,BitsWritten :12};_a [34]=code {Code :13<<8|2<<4,BitsWritten :12};_a [35]=code {Code :13<<8|3<<4,BitsWritten :12};
_a [36]=code {Code :13<<8|4<<4,BitsWritten :12};_a [37]=code {Code :13<<8|5<<4,BitsWritten :12};_a [38]=code {Code :13<<8|6<<4,BitsWritten :12};_a [39]=code {Code :13<<8|7<<4,BitsWritten :12};_a [40]=code {Code :6<<8|12<<4,BitsWritten :12};_a [41]=code {Code :6<<8|13<<4,BitsWritten :12};
_a [42]=code {Code :13<<8|10<<4,BitsWritten :12};_a [43]=code {Code :13<<8|11<<4,BitsWritten :12};_a [44]=code {Code :5<<8|4<<4,BitsWritten :12};_a [45]=code {Code :5<<8|5<<4,BitsWritten :12};_a [46]=code {Code :5<<8|6<<4,BitsWritten :12};_a [47]=code {Code :5<<8|7<<4,BitsWritten :12};
_a [48]=code {Code :6<<8|4<<4,BitsWritten :12};_a [49]=code {Code :6<<8|5<<4,BitsWritten :12};_a [50]=code {Code :5<<8|2<<4,BitsWritten :12};_a [51]=code {Code :5<<8|3<<4,BitsWritten :12};_a [52]=code {Code :2<<8|4<<4,BitsWritten :12};_a [53]=code {Code :3<<8|7<<4,BitsWritten :12};
_a [54]=code {Code :3<<8|8<<4,BitsWritten :12};_a [55]=code {Code :2<<8|7<<4,BitsWritten :12};_a [56]=code {Code :2<<8|8<<4,BitsWritten :12};_a [57]=code {Code :5<<8|8<<4,BitsWritten :12};_a [58]=code {Code :5<<8|9<<4,BitsWritten :12};_a [59]=code {Code :2<<8|11<<4,BitsWritten :12};
_a [60]=code {Code :2<<8|12<<4,BitsWritten :12};_a [61]=code {Code :5<<8|10<<4,BitsWritten :12};_a [62]=code {Code :6<<8|6<<4,BitsWritten :12};_a [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ef =make (map[int ]code );_ef [0]=code {Code :53<<8,BitsWritten :8};
_ef [1]=code {Code :7<<(2+8),BitsWritten :6};_ef [2]=code {Code :7<<(4+8),BitsWritten :4};_ef [3]=code {Code :8<<(4+8),BitsWritten :4};_ef [4]=code {Code :11<<(4+8),BitsWritten :4};_ef [5]=code {Code :12<<(4+8),BitsWritten :4};_ef [6]=code {Code :14<<(4+8),BitsWritten :4};
_ef [7]=code {Code :15<<(4+8),BitsWritten :4};_ef [8]=code {Code :19<<(3+8),BitsWritten :5};_ef [9]=code {Code :20<<(3+8),BitsWritten :5};_ef [10]=code {Code :7<<(3+8),BitsWritten :5};_ef [11]=code {Code :8<<(3+8),BitsWritten :5};_ef [12]=code {Code :8<<(2+8),BitsWritten :6};
_ef [13]=code {Code :3<<(2+8),BitsWritten :6};_ef [14]=code {Code :52<<(2+8),BitsWritten :6};_ef [15]=code {Code :53<<(2+8),BitsWritten :6};_ef [16]=code {Code :42<<(2+8),BitsWritten :6};_ef [17]=code {Code :43<<(2+8),BitsWritten :6};_ef [18]=code {Code :39<<(1+8),BitsWritten :7};
_ef [19]=code {Code :12<<(1+8),BitsWritten :7};_ef [20]=code {Code :8<<(1+8),BitsWritten :7};_ef [21]=code {Code :23<<(1+8),BitsWritten :7};_ef [22]=code {Code :3<<(1+8),BitsWritten :7};_ef [23]=code {Code :4<<(1+8),BitsWritten :7};_ef [24]=code {Code :40<<(1+8),BitsWritten :7};
_ef [25]=code {Code :43<<(1+8),BitsWritten :7};_ef [26]=code {Code :19<<(1+8),BitsWritten :7};_ef [27]=code {Code :36<<(1+8),BitsWritten :7};_ef [28]=code {Code :24<<(1+8),BitsWritten :7};_ef [29]=code {Code :2<<8,BitsWritten :8};_ef [30]=code {Code :3<<8,BitsWritten :8};
_ef [31]=code {Code :26<<8,BitsWritten :8};_ef [32]=code {Code :27<<8,BitsWritten :8};_ef [33]=code {Code :18<<8,BitsWritten :8};_ef [34]=code {Code :19<<8,BitsWritten :8};_ef [35]=code {Code :20<<8,BitsWritten :8};_ef [36]=code {Code :21<<8,BitsWritten :8};
_ef [37]=code {Code :22<<8,BitsWritten :8};_ef [38]=code {Code :23<<8,BitsWritten :8};_ef [39]=code {Code :40<<8,BitsWritten :8};_ef [40]=code {Code :41<<8,BitsWritten :8};_ef [41]=code {Code :42<<8,BitsWritten :8};_ef [42]=code {Code :43<<8,BitsWritten :8};
_ef [43]=code {Code :44<<8,BitsWritten :8};_ef [44]=code {Code :45<<8,BitsWritten :8};_ef [45]=code {Code :4<<8,BitsWritten :8};_ef [46]=code {Code :5<<8,BitsWritten :8};_ef [47]=code {Code :10<<8,BitsWritten :8};_ef [48]=code {Code :11<<8,BitsWritten :8};
_ef [49]=code {Code :82<<8,BitsWritten :8};_ef [50]=code {Code :83<<8,BitsWritten :8};_ef [51]=code {Code :84<<8,BitsWritten :8};_ef [52]=code {Code :85<<8,BitsWritten :8};_ef [53]=code {Code :36<<8,BitsWritten :8};_ef [54]=code {Code :37<<8,BitsWritten :8};
_ef [55]=code {Code :88<<8,BitsWritten :8};_ef [56]=code {Code :89<<8,BitsWritten :8};_ef [57]=code {Code :90<<8,BitsWritten :8};_ef [58]=code {Code :91<<8,BitsWritten :8};_ef [59]=code {Code :74<<8,BitsWritten :8};_ef [60]=code {Code :75<<8,BitsWritten :8};
_ef [61]=code {Code :50<<8,BitsWritten :8};_ef [62]=code {Code :51<<8,BitsWritten :8};_ef [63]=code {Code :52<<8,BitsWritten :8};_g =make (map[int ]code );_g [64]=code {Code :3<<8|3<<6,BitsWritten :10};_g [128]=code {Code :12<<8|8<<4,BitsWritten :12};_g [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_g [256]=code {Code :5<<8|11<<4,BitsWritten :12};_g [320]=code {Code :3<<8|3<<4,BitsWritten :12};_g [384]=code {Code :3<<8|4<<4,BitsWritten :12};_g [448]=code {Code :3<<8|5<<4,BitsWritten :12};_g [512]=code {Code :3<<8|12<<3,BitsWritten :13};_g [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_g [640]=code {Code :2<<8|10<<3,BitsWritten :13};_g [704]=code {Code :2<<8|11<<3,BitsWritten :13};_g [768]=code {Code :2<<8|12<<3,BitsWritten :13};_g [832]=code {Code :2<<8|13<<3,BitsWritten :13};_g [896]=code {Code :3<<8|18<<3,BitsWritten :13};_g [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_g [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_g [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_g [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_g [1216]=code {Code :119<<3,BitsWritten :13};_g [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_g [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_g [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_g [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_g [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_g [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_g [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_g [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_c =make (map[int ]code );_c [64]=code {Code :27<<(3+8),BitsWritten :5};_c [128]=code {Code :18<<(3+8),BitsWritten :5};_c [192]=code {Code :23<<(2+8),BitsWritten :6};_c [256]=code {Code :55<<(1+8),BitsWritten :7};_c [320]=code {Code :54<<8,BitsWritten :8};
_c [384]=code {Code :55<<8,BitsWritten :8};_c [448]=code {Code :100<<8,BitsWritten :8};_c [512]=code {Code :101<<8,BitsWritten :8};_c [576]=code {Code :104<<8,BitsWritten :8};_c [640]=code {Code :103<<8,BitsWritten :8};_c [704]=code {Code :102<<8,BitsWritten :9};
_c [768]=code {Code :102<<8|1<<7,BitsWritten :9};_c [832]=code {Code :105<<8,BitsWritten :9};_c [896]=code {Code :105<<8|1<<7,BitsWritten :9};_c [960]=code {Code :106<<8,BitsWritten :9};_c [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_c [1088]=code {Code :107<<8,BitsWritten :9};
_c [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_c [1216]=code {Code :108<<8,BitsWritten :9};_c [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_c [1344]=code {Code :109<<8,BitsWritten :9};_c [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_c [1472]=code {Code :76<<8,BitsWritten :9};
_c [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_c [1600]=code {Code :77<<8,BitsWritten :9};_c [1664]=code {Code :24<<(2+8),BitsWritten :6};_c [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ec =make (map[int ]code );_ec [1792]=code {Code :1<<8,BitsWritten :11};
_ec [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ec [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ec [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ec [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ec [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_ec [2176]=code {Code :1<<8|5<<4,BitsWritten :12};
_ec [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ec [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ec [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ec [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_ec [2496]=code {Code :1<<8|14<<4,BitsWritten :12};
_ec [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ee =make (map[int ]byte );_ee [0]=0xFF;_ee [1]=0xFE;_ee [2]=0xFC;_ee [3]=0xF8;_ee [4]=0xF0;_ee [5]=0xE0;_ee [6]=0xC0;_ee [7]=0x80;_ee [8]=0x00;};func _aebb (_ddaf ,_cdgd []byte ,_ebfb int )int {_add :=_cfaf (_cdgd ,_ebfb );
if _add < len (_cdgd )&&(_ebfb ==-1&&_cdgd [_add ]==_afa ||_ebfb >=0&&_ebfb < len (_ddaf )&&_ddaf [_ebfb ]==_cdgd [_add ]||_ebfb >=len (_ddaf )&&_ddaf [_ebfb -1]!=_cdgd [_add ]){_add =_cfaf (_cdgd ,_add );};return _add ;};func (_bgb *Encoder )Encode (pixels [][]byte )[]byte {if _bgb .BlackIs1 {_afa =0;
_gcf =1;}else {_afa =1;_gcf =0;};if _bgb .K ==0{return _bgb .encodeG31D (pixels );};if _bgb .K > 0{return _bgb .encodeG32D (pixels );};if _bgb .K < 0{return _bgb .encodeG4 (pixels );};return nil ;};func init (){for _ffd ,_bca :=range _ef {_gec (_cd ,_bca ,0,_ffd );
};for _ca ,_faf :=range _c {_gec (_cd ,_faf ,0,_ca );};for _fec ,_ecd :=range _a {_gec (_ac ,_ecd ,0,_fec );};for _cfb ,_ed :=range _g {_gec (_ac ,_ed ,0,_cfb );};for _bf ,_ecc :=range _ec {_gec (_cd ,_ecc ,0,_bf );_gec (_ac ,_ecc ,0,_bf );};_gec (_ad ,_eec ,0,0);
_gec (_ad ,_cf ,0,0);_gec (_ad ,_b ,0,0);_gec (_ad ,_ab ,0,0);_gec (_ad ,_fg ,0,0);_gec (_ad ,_fc ,0,0);_gec (_ad ,_bc ,0,0);_gec (_ad ,_cc ,0,0);_gec (_ad ,_gff ,0,0);};func (_dcg *Encoder )encodeG4 (_acf [][]byte )[]byte {_bfafe :=make ([][]byte ,len (_acf ));
copy (_bfafe ,_acf );_bfafe =_gfg (_bfafe );var _fede []byte ;var _abd int ;for _abg :=1;_abg < len (_bfafe );_abg ++{if _dcg .Rows > 0&&!_dcg .EndOfBlock &&_abg ==(_dcg .Rows +1){break ;};var _cadf []byte ;var _ggc ,_dgee ,_aadc int ;_ffb :=_abd ;_gbbe :=-1;
for _gbbe < len (_bfafe [_abg ]){_ggc =_cfaf (_bfafe [_abg ],_gbbe );_dgee =_aebb (_bfafe [_abg ],_bfafe [_abg -1],_gbbe );_aadc =_cfaf (_bfafe [_abg -1],_dgee );if _aadc < _ggc {_cadf ,_ffb =_bea (_cadf ,_ffb ,_eec );_gbbe =_aadc ;}else {if _d .Abs (float64 (_dgee -_ggc ))> 3{_cadf ,_ffb ,_gbbe =_effg (_bfafe [_abg ],_cadf ,_ffb ,_gbbe ,_ggc );
}else {_cadf ,_ffb =_cfgc (_cadf ,_ffb ,_ggc ,_dgee );_gbbe =_ggc ;};};};_fede =_dcg .appendEncodedRow (_fede ,_cadf ,_abd );if _dcg .EncodedByteAlign {_ffb =0;};_abd =_ffb %8;};if _dcg .EndOfBlock {_ebf ,_ :=_fcf (_abd );_fede =_dcg .appendEncodedRow (_fede ,_ebf ,_abd );
};return _fede ;};func _gddc (_acc []byte ,_bgf int ,_efa code )(bool ,int ){_cfge :=_bgf ;var (_bfaf uint16 ;_dacd int ;);_bfaf ,_dacd ,_bgf =_cfbf (_acc ,_bgf );if _dacd > 3{return false ,_cfge ;};_bfaf >>=uint (3-_dacd );_bfaf <<=3;if _bfaf !=_efa .Code {return false ,_cfge ;
};return true ,_bgf -3+_dacd ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_eg *Encoder )encodeG31D (_ggd [][]byte )[]byte {var _eddd []byte ;
_fge :=0;for _dbd :=range _ggd {if _eg .Rows > 0&&!_eg .EndOfBlock &&_dbd ==_eg .Rows {break ;};_bda ,_ege :=_eee (_ggd [_dbd ],_fge ,_eb );_eddd =_eg .appendEncodedRow (_eddd ,_bda ,_fge );if _eg .EncodedByteAlign {_ege =0;};_fge =_ege ;};if _eg .EndOfBlock {_acdb ,_ :=_aee (_fge );
_eddd =_eg .appendEncodedRow (_eddd ,_acdb ,_fge );};return _eddd ;};func _geb (_cea ,_effb []byte ,_gbg int ,_ga bool ,_geg int )([]byte ,int ,int ,error ){_bdd :=_gbg ;var _dac error ;_effb ,_gbg ,_dac =_dda (_cea ,_effb ,_gbg ,_ga );if _dac !=nil {return _effb ,_bdd ,_geg ,_dac ;
};_ga =!_ga ;_effb ,_gbg ,_dac =_dda (_cea ,_effb ,_gbg ,_ga );if _dac !=nil {return _effb ,_bdd ,_geg ,_dac ;};_geg =len (_effb );return _effb ,_gbg ,_geg ,nil ;};func (_bba *Encoder )decodeG32D (_bfa []byte )([][]byte ,error ){var (_fca [][]byte ;_bcd int ;
_da error ;);_fff :for (_bcd /8)< len (_bfa ){var _dfa bool ;_dfa ,_bcd ,_da =_fgg (_bfa ,_bcd );if _da !=nil {return nil ,_da ;};if _dfa {break ;};_dfa ,_bcd =_cee (_bfa ,_bcd );if !_dfa {if _bba .EndOfLine {return nil ,_cfa ;};};var _ada []byte ;_ada ,_bcd =_bba .decodeRow1D (_bfa ,_bcd );
if _bba .EncodedByteAlign &&_bcd %8!=0{_bcd +=8-_bcd %8;};if _ada !=nil {_fca =append (_fca ,_ada );};if _bba .Rows > 0&&!_bba .EndOfBlock &&len (_fca )>=_bba .Rows {break ;};for _fcb :=1;_fcb < _bba .K &&(_bcd /8)< len (_bfa );_fcb ++{_dfa ,_bcd =_bfff (_bfa ,_bcd );
if !_dfa {_dfa ,_bcd ,_da =_fgg (_bfa ,_bcd );if _da !=nil {return nil ,_da ;};if _dfa {break _fff ;}else {if _bba .EndOfLine {return nil ,_cfa ;};};};var (_bcae code ;_dee bool ;);_bbb :=true ;var _cce []byte ;_eeg :=-1;for _bcae ,_bcd ,_dee =_eaf (_bfa ,_bcd );
_dee ;_bcae ,_bcd ,_dee =_eaf (_bfa ,_bcd ){switch _bcae {case _eec :_cce ,_eeg =_bd (_fca ,_cce ,_bbb ,_eeg );case _cf :_cce ,_bcd ,_eeg ,_da =_geb (_bfa ,_cce ,_bcd ,_bbb ,_eeg );if _da !=nil {return nil ,_da ;};case _b :_cce ,_eeg =_af (_fca ,_cce ,_bbb ,_eeg ,0);
_bbb =!_bbb ;case _ab :_cce ,_eeg =_af (_fca ,_cce ,_bbb ,_eeg ,1);_bbb =!_bbb ;case _fg :_cce ,_eeg =_af (_fca ,_cce ,_bbb ,_eeg ,2);_bbb =!_bbb ;case _fc :_cce ,_eeg =_af (_fca ,_cce ,_bbb ,_eeg ,3);_bbb =!_bbb ;case _bc :_cce ,_eeg =_af (_fca ,_cce ,_bbb ,_eeg ,-1);
_bbb =!_bbb ;case _cc :_cce ,_eeg =_af (_fca ,_cce ,_bbb ,_eeg ,-2);_bbb =!_bbb ;case _gff :_cce ,_eeg =_af (_fca ,_cce ,_bbb ,_eeg ,-3);_bbb =!_bbb ;};if len (_cce )>=_bba .Columns {break ;};};if _bba .EncodedByteAlign &&_bcd %8!=0{_bcd +=8-_bcd %8;};
if _cce !=nil {_fca =append (_fca ,_cce );};if _bba .Rows > 0&&!_bba .EndOfBlock &&len (_fca )>=_bba .Rows {break _fff ;};};};return _fca ,nil ;};func _gbbc (_dbf []byte ,_gfd bool ,_ddaa int )(int ,int ){_ggb :=0;for _ddaa < len (_dbf ){if _gfd {if _dbf [_ddaa ]!=_afa {break ;
};}else {if _dbf [_ddaa ]!=_gcf {break ;};};_ggb ++;_ddaa ++;};return _ggb ,_ddaa ;};func _gfg (_dade [][]byte )[][]byte {_baf :=make ([]byte ,len (_dade [0]));for _ffdg :=range _baf {_baf [_ffdg ]=_afa ;};_dade =append (_dade ,[]byte {});for _cede :=len (_dade )-1;
_cede > 0;_cede --{_dade [_cede ]=_dade [_cede -1];};_dade [0]=_baf ;return _dade ;};func _fcf (_abcc int )([]byte ,int ){var _gecd []byte ;for _ebdb :=0;_ebdb < 2;_ebdb ++{_gecd ,_abcc =_bea (_gecd ,_abcc ,_eb );};return _gecd ,_abcc %8;};func _age (_fdda []byte ,_gccb int )([]byte ,int ){return _bea (_fdda ,_gccb ,_eec )};
func _eag (_fbe uint16 ,_agf int )(code ,bool ){_ ,_eda :=_fgc (_ad ,_fbe ,_agf );if _eda ==nil {return code {},false ;};return *_eda ,true ;};func _bfff (_cgg []byte ,_cgf int )(bool ,int ){return _gddc (_cgg ,_cgf ,_de )};func _daae (_gbdf []byte ,_aadd bool ,_fga int )[]byte {if _fga < 0{return _gbdf ;
};_dgf :=make ([]byte ,_fga );if _aadd {for _eddb :=0;_eddb < len (_dgf );_eddb ++{_dgf [_eddb ]=_afa ;};}else {for _efb :=0;_efb < len (_dgf );_efb ++{_dgf [_efb ]=_gcf ;};};_gbdf =append (_gbdf ,_dgf ...);return _gbdf ;};func _fgc (_gfbd *decodingTreeNode ,_ddca uint16 ,_edg int )(*int ,*code ){if _gfbd ==nil {return nil ,nil ;
};if _edg ==16{return _gfbd .RunLen ,_gfbd .Code ;};_aea :=_dea (_ddca ,_edg );_edg ++;var _gea *int ;var _cdc *code ;if _aea ==1{_gea ,_cdc =_fgc (_gfbd .Right ,_ddca ,_edg );}else {_gea ,_cdc =_fgc (_gfbd .Left ,_ddca ,_edg );};if _gea ==nil {_gea =_gfbd .RunLen ;
_cdc =_gfbd .Code ;};return _gea ,_cdc ;};func (_cag *Encoder )decodeG31D (_fef []byte )([][]byte ,error ){var _ae [][]byte ;var _cdg int ;for (_cdg /8)< len (_fef ){var _cdd bool ;_cdd ,_cdg =_cg (_fef ,_cdg );if !_cdd {if _cag .EndOfLine {return nil ,_cfa ;
};}else {for _bb :=0;_bb < 5;_bb ++{_cdd ,_cdg =_cg (_fef ,_cdg );if !_cdd {if _bb ==0{break ;};return nil ,_eff ;};};if _cdd {break ;};};var _ccc []byte ;_ccc ,_cdg =_cag .decodeRow1D (_fef ,_cdg );if _cag .EncodedByteAlign &&_cdg %8!=0{_cdg +=8-_cdg %8;
};_ae =append (_ae ,_ccc );if _cag .Rows > 0&&!_cag .EndOfBlock &&len (_ae )>=_cag .Rows {break ;};};return _ae ,nil ;};type code struct{Code uint16 ;BitsWritten int ;};func _aee (_cde int )([]byte ,int ){var _gdg []byte ;for _afd :=0;_afd < 6;_afd ++{_gdg ,_cde =_bea (_gdg ,_cde ,_eb );
};return _gdg ,_cde %8;};func _eeag (_fbc uint16 ,_acd int ,_bag bool )(int ,code ){var _fbg *int ;var _abc *code ;if _bag {_fbg ,_abc =_fgc (_cd ,_fbc ,_acd );}else {_fbg ,_abc =_fgc (_ac ,_fbc ,_acd );};if _fbg ==nil {return -1,code {};};return *_fbg ,*_abc ;
};func _bea (_caf []byte ,_dad int ,_gce code )([]byte ,int ){_gfdd :=0;for _gfdd < _gce .BitsWritten {_dbda :=_dad /8;_aac :=_dad %8;if _dbda >=len (_caf ){_caf =append (_caf ,0);};_dcb :=8-_aac ;_dgd :=_gce .BitsWritten -_gfdd ;if _dcb > _dgd {_dcb =_dgd ;
};if _gfdd < 8{_caf [_dbda ]=_caf [_dbda ]|byte (_gce .Code >>uint (8+_aac -_gfdd ))&_ee [8-_dcb -_aac ];}else {_caf [_dbda ]=_caf [_dbda ]|(byte (_gce .Code <<uint (_gfdd -8))&_ee [8-_dcb ])>>uint (_aac );};_dad +=_dcb ;_gfdd +=_dcb ;};return _caf ,_dad ;
};func _cee (_cae []byte ,_gaa int )(bool ,int ){return _gddc (_cae ,_gaa ,_gf )};func _bce (_fggb int )([]byte ,int ){var _aeb []byte ;for _bbg :=0;_bbg < 6;_bbg ++{_aeb ,_fggb =_bea (_aeb ,_fggb ,_gf );};return _aeb ,_fggb %8;};func _effg (_bcfc ,_gaf []byte ,_caed ,_cda ,_ebc int )([]byte ,int ,int ){_egdf :=_cfaf (_bcfc ,_ebc );
_cfgb :=_cda >=0&&_bcfc [_cda ]==_afa ||_cda ==-1;_gaf ,_caed =_bea (_gaf ,_caed ,_cf );var _bgcd int ;if _cda > -1{_bgcd =_ebc -_cda ;}else {_bgcd =_ebc -_cda -1;};_gaf ,_caed =_bddc (_gaf ,_caed ,_bgcd ,_cfgb );_cfgb =!_cfgb ;_dfb :=_egdf -_ebc ;_gaf ,_caed =_bddc (_gaf ,_caed ,_dfb ,_cfgb );
_cda =_egdf ;return _gaf ,_caed ,_cda ;};var (_afa byte =1;_gcf byte =0;);func _fgae (_cfbb ,_ged []byte ,_ecfe int ,_adgf bool )int {_cgd :=_cfaf (_ged ,_ecfe );if _cgd < len (_ged )&&(_ecfe ==-1&&_ged [_cgd ]==_afa ||_ecfe >=0&&_ecfe < len (_cfbb )&&_cfbb [_ecfe ]==_ged [_cgd ]||_ecfe >=len (_cfbb )&&_adgf &&_ged [_cgd ]==_afa ||_ecfe >=len (_cfbb )&&!_adgf &&_ged [_cgd ]==_gcf ){_cgd =_cfaf (_ged ,_cgd );
};return _cgd ;};func _cfbf (_abf []byte ,_dgef int )(uint16 ,int ,int ){_bagb :=_dgef ;_agfa :=_dgef /8;_dgef %=8;if _agfa >=len (_abf ){return 0,16,_bagb ;};_eage :=byte (0xFF>>uint (_dgef ));_gg :=uint16 ((_abf [_agfa ]&_eage )<<uint (_dgef ))<<8;_afb :=8-_dgef ;
_agfa ++;_dgef =0;if _agfa >=len (_abf ){return _gg >>(16-uint (_afb )),16-_afb ,_bagb +_afb ;};_gg |=uint16 (_abf [_agfa ])<<(8-uint (_afb ));_afb +=8;_agfa ++;_dgef =0;if _agfa >=len (_abf ){return _gg >>(16-uint (_afb )),16-_afb ,_bagb +_afb ;};if _afb ==16{return _gg ,0,_bagb +_afb ;
};_eed :=16-_afb ;_gg |=uint16 (_abf [_agfa ]>>(8-uint (_eed )));return _gg ,0,_bagb +16;};func _gdd (_bbba []byte ,_bee int ,_acg bool )(int ,int ){var (_cad uint16 ;_bgc int ;_ebb int ;);_ebb =_bee ;_cad ,_bgc ,_ =_cfbf (_bbba ,_bee );_aa ,_gbd :=_eeag (_cad ,_bgc ,_acg );
if _aa ==-1{return -1,_ebb ;};return _aa ,_ebb +_gbd .BitsWritten ;};var (_a map[int ]code ;_ef map[int ]code ;_g map[int ]code ;_c map[int ]code ;_ec map[int ]code ;_ee map[int ]byte ;_eb =code {Code :1<<4,BitsWritten :12};_gf =code {Code :3<<3,BitsWritten :13};
_de =code {Code :2<<3,BitsWritten :13};_eec =code {Code :1<<12,BitsWritten :4};_cf =code {Code :1<<13,BitsWritten :3};_b =code {Code :1<<15,BitsWritten :1};_ab =code {Code :3<<13,BitsWritten :3};_fg =code {Code :3<<10,BitsWritten :6};_fc =code {Code :3<<9,BitsWritten :7};
_bc =code {Code :2<<13,BitsWritten :3};_cc =code {Code :2<<10,BitsWritten :6};_gff =code {Code :2<<9,BitsWritten :7};);func _af (_aeg [][]byte ,_ecf []byte ,_ea bool ,_dge ,_ebd int )([]byte ,int ){_gc :=_fgae (_ecf ,_aeg [len (_aeg )-1],_dge ,_ea );_ge :=_gc +_ebd ;
if _dge ==-1{_ecf =_daae (_ecf ,_ea ,_ge -_dge -1);}else {_ecf =_daae (_ecf ,_ea ,_ge -_dge );};_dge =_ge ;return _ecf ,_dge ;};func _dda (_bfd ,_adg []byte ,_bff int ,_bfg bool )([]byte ,int ,error ){_gbb :=_bff ;var _bg int ;for _bg ,_bff =_gdd (_bfd ,_bff ,_bfg );
_bg !=-1;_bg ,_bff =_gdd (_bfd ,_bff ,_bfg ){_adg =_daae (_adg ,_bfg ,_bg );if _bg < 64{break ;};};if _bg ==-1{return _adg ,_gbb ,_dd ;};return _adg ,_bff ,nil ;};func _cg (_dfg []byte ,_dbg int )(bool ,int ){_gfb :=_dbg ;var (_ddf uint16 ;_efcc int ;);
_ddf ,_efcc ,_dbg =_cfbf (_dfg ,_dbg );if _efcc > 4{return false ,_gfb ;};_ddf >>=uint (4-_efcc );_ddf <<=4;if _ddf !=_eb .Code {return false ,_gfb ;};return true ,_dbg -4+_efcc ;};func _fgg (_ade []byte ,_dc int )(bool ,int ,error ){_ebde :=_dc ;var _fcc =false ;
for _fac :=0;_fac < 6;_fac ++{_fcc ,_dc =_cee (_ade ,_dc );if !_fcc {if _fac > 1{return false ,_ebde ,_fb ;};_dc =_ebde ;break ;};};return _fcc ,_dc ,nil ;};func (_aeac *Encoder )encodeG32D (_ffc [][]byte )[]byte {var _beb []byte ;var _gga int ;for _beeb :=0;
_beeb < len (_ffc );_beeb +=_aeac .K {if _aeac .Rows > 0&&!_aeac .EndOfBlock &&_beeb ==_aeac .Rows {break ;};_dfd ,_gcc :=_eee (_ffc [_beeb ],_gga ,_gf );_beb =_aeac .appendEncodedRow (_beb ,_dfd ,_gga );if _aeac .EncodedByteAlign {_gcc =0;};_gga =_gcc ;
for _bddg :=_beeb +1;_bddg < (_beeb +_aeac .K )&&_bddg < len (_ffc );_bddg ++{if _aeac .Rows > 0&&!_aeac .EndOfBlock &&_bddg ==_aeac .Rows {break ;};_cgfd ,_gab :=_bea (nil ,_gga ,_de );var _ffcb ,_ddcd ,_gae int ;_fefe :=-1;for _fefe < len (_ffc [_bddg ]){_ffcb =_cfaf (_ffc [_bddg ],_fefe );
_ddcd =_aebb (_ffc [_bddg ],_ffc [_bddg -1],_fefe );_gae =_cfaf (_ffc [_bddg -1],_ddcd );if _gae < _ffcb {_cgfd ,_gab =_age (_cgfd ,_gab );_fefe =_gae ;}else {if _d .Abs (float64 (_ddcd -_ffcb ))> 3{_cgfd ,_gab ,_fefe =_effg (_ffc [_bddg ],_cgfd ,_gab ,_fefe ,_ffcb );
}else {_cgfd ,_gab =_cfgc (_cgfd ,_gab ,_ffcb ,_ddcd );_fefe =_ffcb ;};};};_beb =_aeac .appendEncodedRow (_beb ,_cgfd ,_gga );if _aeac .EncodedByteAlign {_gab =0;};_gga =_gab %8;};};if _aeac .EndOfBlock {_cdf ,_ :=_bce (_gga );_beb =_aeac .appendEncodedRow (_beb ,_cdf ,_gga );
};return _beb ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _cfgc (_bebf []byte ,_aebf ,_egg ,_cdbe int )([]byte ,int ){_bfae :=_bdb (_egg ,_cdbe );_bebf ,_aebf =_bea (_bebf ,_aebf ,_bfae );
return _bebf ,_aebf ;};func (_dg *Encoder )decodeG4 (_fafb []byte )([][]byte ,error ){_cab :=make ([]byte ,_dg .Columns );for _daf :=range _cab {_cab [_daf ]=_afa ;};_bad :=make ([][]byte ,1);_bad [0]=_cab ;var (_dafb bool ;_be error ;_fd int ;);for (_fd /8)< len (_fafb ){_dafb ,_fd ,_be =_bcf (_fafb ,_fd );
if _be !=nil {return nil ,_be ;};if _dafb {break ;};var (_daa code ;_db bool ;);_eba :=true ;var _ce []byte ;_dbb :=-1;_fed :=true ;for _dbb < _dg .Columns {_daa ,_fd ,_db =_eaf (_fafb ,_fd );if !_db {_e .Log .Warning ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u0063i\u0074\u0074\u0066a\u0078:\u0020\u0025\u0076",_ba );
_fed =false ;break ;};switch _daa {case _eec :_ce ,_dbb =_bd (_bad ,_ce ,_eba ,_dbb );case _cf :_ce ,_fd ,_dbb ,_be =_geb (_fafb ,_ce ,_fd ,_eba ,_dbb );if _be !=nil {_e .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064i\u006e\u0067\u0020\u0063c\u0069\u0074\u0074\u0066\u0061\u0078\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020\u006d\u006f\u0064\u0065\u003a\u0020\u0025\u0076",_be );
_fed =false ;break ;};case _b :_ce ,_dbb =_af (_bad ,_ce ,_eba ,_dbb ,0);_eba =!_eba ;case _ab :_ce ,_dbb =_af (_bad ,_ce ,_eba ,_dbb ,1);_eba =!_eba ;case _fg :_ce ,_dbb =_af (_bad ,_ce ,_eba ,_dbb ,2);_eba =!_eba ;case _fc :_ce ,_dbb =_af (_bad ,_ce ,_eba ,_dbb ,3);
_eba =!_eba ;case _bc :_ce ,_dbb =_af (_bad ,_ce ,_eba ,_dbb ,-1);_eba =!_eba ;case _cc :_ce ,_dbb =_af (_bad ,_ce ,_eba ,_dbb ,-2);_eba =!_eba ;case _gff :_ce ,_dbb =_af (_bad ,_ce ,_eba ,_dbb ,-3);_eba =!_eba ;};if len (_ce )>=_dg .Columns {break ;};
};if !_fed {_fd +=8-_fd %8;continue ;};if _dg .EncodedByteAlign &&_fd %8!=0{_fd +=8-_fd %8;};_bad =append (_bad ,_ce );if _dg .Rows > 0&&!_dg .EndOfBlock &&len (_bad )>=(_dg .Rows +1){break ;};};_bad =_bad [1:];return _bad ,nil ;};func _bd (_ecfa [][]byte ,_dff []byte ,_gd bool ,_fbf int )([]byte ,int ){_cfg :=_fgae (_dff ,_ecfa [len (_ecfa )-1],_fbf ,_gd );
_gb :=_cfaf (_ecfa [len (_ecfa )-1],_cfg );if _fbf ==-1{_dff =_daae (_dff ,_gd ,_gb -_fbf -1);}else {_dff =_daae (_dff ,_gd ,_gb -_fbf );};_fbf =_gb ;return _dff ,_fbf ;};func (_fab *Encoder )Decode (encoded []byte )([][]byte ,error ){if _fab .BlackIs1 {_afa =0;
_gcf =1;}else {_afa =1;_gcf =0;};if _fab .K ==0{return _fab .decodeG31D (encoded );};if _fab .K > 0{return _fab .decodeG32D (encoded );};if _fab .K < 4{return _fab .decodeG4 (encoded );};return nil ,nil ;};func _bcf (_edd []byte ,_eea int )(bool ,int ,error ){_gbgb :=_eea ;
var _cdb bool ;_cdb ,_eea =_cg (_edd ,_eea );if _cdb {_cdb ,_eea =_cg (_edd ,_eea );if _cdb {return true ,_eea ,nil ;};return false ,_gbgb ,_fa ;};return false ,_gbgb ,nil ;};func _egd (_dgc int ,_dafa bool )(code ,int ,bool ){if _dgc < 64{if _dafa {return _ef [_dgc ],0,true ;
};return _a [_dgc ],0,true ;};_ggdc :=_dgc /64;if _ggdc > 40{return _ec [2560],_dgc -2560,false ;};if _ggdc > 27{return _ec [_ggdc *64],_dgc -_ggdc *64,false ;};if _dafa {return _c [_ggdc *64],_dgc -_ggdc *64,false ;};return _g [_ggdc *64],_dgc -_ggdc *64,false ;
};func _cfaf (_dbfg []byte ,_fddd int )int {if _fddd >=len (_dbfg ){return _fddd ;};if _fddd < -1{_fddd =-1;};var _aca byte ;if _fddd > -1{_aca =_dbfg [_fddd ];}else {_aca =_afa ;};_dfaa :=_fddd +1;for _dfaa < len (_dbfg ){if _dbfg [_dfaa ]!=_aca {break ;
};_dfaa ++;};return _dfaa ;};func _dea (_bddd uint16 ,_gca int )byte {if _gca < 8{_bddd >>=8;};_gca %=8;_dafc :=byte (0x01<<(7-uint (_gca )));return (byte (_bddd )&_dafc )>>(7-uint (_gca ));};func _bdb (_fda ,_agba int )code {var _aec code ;switch _agba -_fda {case -1:_aec =_ab ;
case -2:_aec =_fg ;case -3:_aec =_fc ;case 0:_aec =_b ;case 1:_aec =_bc ;case 2:_aec =_cc ;case 3:_aec =_gff ;};return _aec ;};func (_ffe *Encoder )appendEncodedRow (_edf ,_efcca []byte ,_fce int )[]byte {if len (_edf )> 0&&_fce !=0&&!_ffe .EncodedByteAlign {_edf [len (_edf )-1]=_edf [len (_edf )-1]|_efcca [0];
_edf =append (_edf ,_efcca [1:]...);}else {_edf =append (_edf ,_efcca ...);};return _edf ;};func _eaf (_gde []byte ,_fdf int )(code ,int ,bool ){var (_aad uint16 ;_dgg int ;_aed int ;);_aed =_fdf ;_aad ,_dgg ,_ =_cfbf (_gde ,_fdf );_def ,_ddc :=_eag (_aad ,_dgg );
if !_ddc {return code {},_aed ,false ;};return _def ,_aed +_def .BitsWritten ,true ;};func _eee (_bed []byte ,_acda int ,_dgfa code )([]byte ,int ){_ega :=true ;var _bdg []byte ;_bdg ,_acda =_bea (nil ,_acda ,_dgfa );_agb :=0;var _eca int ;for _agb < len (_bed ){_eca ,_agb =_gbbc (_bed ,_ega ,_agb );
_bdg ,_acda =_bddc (_bdg ,_acda ,_eca ,_ega );_ega =!_ega ;};return _bdg ,_acda %8;};var (_fa =_ff .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_fb =_ff .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");
_dd =_ff .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_cfa =_ff .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_eff =_ff .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ba =_ff .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _bddc (_fdd []byte ,_dffa int ,_cac int ,_fcfb bool )([]byte ,int ){var (_adf code ;
_bbf bool ;);for !_bbf {_adf ,_cac ,_bbf =_egd (_cac ,_fcfb );_fdd ,_dffa =_bea (_fdd ,_dffa ,_adf );};return _fdd ,_dffa ;};func _gec (_geca *decodingTreeNode ,_bage code ,_dbbg int ,_cbg int ){_dcf :=_dea (_bage .Code ,_dbbg );_dbbg ++;if _dcf ==1{if _geca .Right ==nil {_geca .Right =&decodingTreeNode {Val :_dcf };
};if _dbbg ==_bage .BitsWritten {_geca .Right .RunLen =&_cbg ;_geca .Right .Code =&_bage ;}else {_gec (_geca .Right ,_bage ,_dbbg ,_cbg );};}else {if _geca .Left ==nil {_geca .Left =&decodingTreeNode {Val :_dcf };};if _dbbg ==_bage .BitsWritten {_geca .Left .RunLen =&_cbg ;
_geca .Left .Code =&_bage ;}else {_gec (_geca .Left ,_bage ,_dbbg ,_cbg );};};};