//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_e "errors";_c "github.com/unidoc/unipdf/v3/common";_eg "math";);var (_fbg =&decodingTreeNode {Val :255};_ec =&decodingTreeNode {Val :255};_dbg =&decodingTreeNode {Val :255};);func _cde (_ebc int )([]byte ,int ){var _bae []byte ;
for _gbg :=0;_gbg < 6;_gbg ++{_bae ,_ebc =_gee (_bae ,_ebc ,_ed );};return _bae ,_ebc %8;};func init (){_b =make (map[int ]code );_b [0]=code {Code :13<<8|3<<6,BitsWritten :10};_b [1]=code {Code :2<<(5+8),BitsWritten :3};_b [2]=code {Code :3<<(6+8),BitsWritten :2};
_b [3]=code {Code :2<<(6+8),BitsWritten :2};_b [4]=code {Code :3<<(5+8),BitsWritten :3};_b [5]=code {Code :3<<(4+8),BitsWritten :4};_b [6]=code {Code :2<<(4+8),BitsWritten :4};_b [7]=code {Code :3<<(3+8),BitsWritten :5};_b [8]=code {Code :5<<(2+8),BitsWritten :6};
_b [9]=code {Code :4<<(2+8),BitsWritten :6};_b [10]=code {Code :4<<(1+8),BitsWritten :7};_b [11]=code {Code :5<<(1+8),BitsWritten :7};_b [12]=code {Code :7<<(1+8),BitsWritten :7};_b [13]=code {Code :4<<8,BitsWritten :8};_b [14]=code {Code :7<<8,BitsWritten :8};
_b [15]=code {Code :12<<8,BitsWritten :9};_b [16]=code {Code :5<<8|3<<6,BitsWritten :10};_b [17]=code {Code :6<<8,BitsWritten :10};_b [18]=code {Code :2<<8,BitsWritten :10};_b [19]=code {Code :12<<8|7<<5,BitsWritten :11};_b [20]=code {Code :13<<8,BitsWritten :11};
_b [21]=code {Code :13<<8|4<<5,BitsWritten :11};_b [22]=code {Code :6<<8|7<<5,BitsWritten :11};_b [23]=code {Code :5<<8,BitsWritten :11};_b [24]=code {Code :2<<8|7<<5,BitsWritten :11};_b [25]=code {Code :3<<8,BitsWritten :11};_b [26]=code {Code :12<<8|10<<4,BitsWritten :12};
_b [27]=code {Code :12<<8|11<<4,BitsWritten :12};_b [28]=code {Code :12<<8|12<<4,BitsWritten :12};_b [29]=code {Code :12<<8|13<<4,BitsWritten :12};_b [30]=code {Code :6<<8|8<<4,BitsWritten :12};_b [31]=code {Code :6<<8|9<<4,BitsWritten :12};_b [32]=code {Code :6<<8|10<<4,BitsWritten :12};
_b [33]=code {Code :6<<8|11<<4,BitsWritten :12};_b [34]=code {Code :13<<8|2<<4,BitsWritten :12};_b [35]=code {Code :13<<8|3<<4,BitsWritten :12};_b [36]=code {Code :13<<8|4<<4,BitsWritten :12};_b [37]=code {Code :13<<8|5<<4,BitsWritten :12};_b [38]=code {Code :13<<8|6<<4,BitsWritten :12};
_b [39]=code {Code :13<<8|7<<4,BitsWritten :12};_b [40]=code {Code :6<<8|12<<4,BitsWritten :12};_b [41]=code {Code :6<<8|13<<4,BitsWritten :12};_b [42]=code {Code :13<<8|10<<4,BitsWritten :12};_b [43]=code {Code :13<<8|11<<4,BitsWritten :12};_b [44]=code {Code :5<<8|4<<4,BitsWritten :12};
_b [45]=code {Code :5<<8|5<<4,BitsWritten :12};_b [46]=code {Code :5<<8|6<<4,BitsWritten :12};_b [47]=code {Code :5<<8|7<<4,BitsWritten :12};_b [48]=code {Code :6<<8|4<<4,BitsWritten :12};_b [49]=code {Code :6<<8|5<<4,BitsWritten :12};_b [50]=code {Code :5<<8|2<<4,BitsWritten :12};
_b [51]=code {Code :5<<8|3<<4,BitsWritten :12};_b [52]=code {Code :2<<8|4<<4,BitsWritten :12};_b [53]=code {Code :3<<8|7<<4,BitsWritten :12};_b [54]=code {Code :3<<8|8<<4,BitsWritten :12};_b [55]=code {Code :2<<8|7<<4,BitsWritten :12};_b [56]=code {Code :2<<8|8<<4,BitsWritten :12};
_b [57]=code {Code :5<<8|8<<4,BitsWritten :12};_b [58]=code {Code :5<<8|9<<4,BitsWritten :12};_b [59]=code {Code :2<<8|11<<4,BitsWritten :12};_b [60]=code {Code :2<<8|12<<4,BitsWritten :12};_b [61]=code {Code :5<<8|10<<4,BitsWritten :12};_b [62]=code {Code :6<<8|6<<4,BitsWritten :12};
_b [63]=code {Code :6<<8|7<<4,BitsWritten :12};_d =make (map[int ]code );_d [0]=code {Code :53<<8,BitsWritten :8};_d [1]=code {Code :7<<(2+8),BitsWritten :6};_d [2]=code {Code :7<<(4+8),BitsWritten :4};_d [3]=code {Code :8<<(4+8),BitsWritten :4};_d [4]=code {Code :11<<(4+8),BitsWritten :4};
_d [5]=code {Code :12<<(4+8),BitsWritten :4};_d [6]=code {Code :14<<(4+8),BitsWritten :4};_d [7]=code {Code :15<<(4+8),BitsWritten :4};_d [8]=code {Code :19<<(3+8),BitsWritten :5};_d [9]=code {Code :20<<(3+8),BitsWritten :5};_d [10]=code {Code :7<<(3+8),BitsWritten :5};
_d [11]=code {Code :8<<(3+8),BitsWritten :5};_d [12]=code {Code :8<<(2+8),BitsWritten :6};_d [13]=code {Code :3<<(2+8),BitsWritten :6};_d [14]=code {Code :52<<(2+8),BitsWritten :6};_d [15]=code {Code :53<<(2+8),BitsWritten :6};_d [16]=code {Code :42<<(2+8),BitsWritten :6};
_d [17]=code {Code :43<<(2+8),BitsWritten :6};_d [18]=code {Code :39<<(1+8),BitsWritten :7};_d [19]=code {Code :12<<(1+8),BitsWritten :7};_d [20]=code {Code :8<<(1+8),BitsWritten :7};_d [21]=code {Code :23<<(1+8),BitsWritten :7};_d [22]=code {Code :3<<(1+8),BitsWritten :7};
_d [23]=code {Code :4<<(1+8),BitsWritten :7};_d [24]=code {Code :40<<(1+8),BitsWritten :7};_d [25]=code {Code :43<<(1+8),BitsWritten :7};_d [26]=code {Code :19<<(1+8),BitsWritten :7};_d [27]=code {Code :36<<(1+8),BitsWritten :7};_d [28]=code {Code :24<<(1+8),BitsWritten :7};
_d [29]=code {Code :2<<8,BitsWritten :8};_d [30]=code {Code :3<<8,BitsWritten :8};_d [31]=code {Code :26<<8,BitsWritten :8};_d [32]=code {Code :27<<8,BitsWritten :8};_d [33]=code {Code :18<<8,BitsWritten :8};_d [34]=code {Code :19<<8,BitsWritten :8};_d [35]=code {Code :20<<8,BitsWritten :8};
_d [36]=code {Code :21<<8,BitsWritten :8};_d [37]=code {Code :22<<8,BitsWritten :8};_d [38]=code {Code :23<<8,BitsWritten :8};_d [39]=code {Code :40<<8,BitsWritten :8};_d [40]=code {Code :41<<8,BitsWritten :8};_d [41]=code {Code :42<<8,BitsWritten :8};
_d [42]=code {Code :43<<8,BitsWritten :8};_d [43]=code {Code :44<<8,BitsWritten :8};_d [44]=code {Code :45<<8,BitsWritten :8};_d [45]=code {Code :4<<8,BitsWritten :8};_d [46]=code {Code :5<<8,BitsWritten :8};_d [47]=code {Code :10<<8,BitsWritten :8};_d [48]=code {Code :11<<8,BitsWritten :8};
_d [49]=code {Code :82<<8,BitsWritten :8};_d [50]=code {Code :83<<8,BitsWritten :8};_d [51]=code {Code :84<<8,BitsWritten :8};_d [52]=code {Code :85<<8,BitsWritten :8};_d [53]=code {Code :36<<8,BitsWritten :8};_d [54]=code {Code :37<<8,BitsWritten :8};
_d [55]=code {Code :88<<8,BitsWritten :8};_d [56]=code {Code :89<<8,BitsWritten :8};_d [57]=code {Code :90<<8,BitsWritten :8};_d [58]=code {Code :91<<8,BitsWritten :8};_d [59]=code {Code :74<<8,BitsWritten :8};_d [60]=code {Code :75<<8,BitsWritten :8};
_d [61]=code {Code :50<<8,BitsWritten :8};_d [62]=code {Code :51<<8,BitsWritten :8};_d [63]=code {Code :52<<8,BitsWritten :8};_a =make (map[int ]code );_a [64]=code {Code :3<<8|3<<6,BitsWritten :10};_a [128]=code {Code :12<<8|8<<4,BitsWritten :12};_a [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_a [256]=code {Code :5<<8|11<<4,BitsWritten :12};_a [320]=code {Code :3<<8|3<<4,BitsWritten :12};_a [384]=code {Code :3<<8|4<<4,BitsWritten :12};_a [448]=code {Code :3<<8|5<<4,BitsWritten :12};_a [512]=code {Code :3<<8|12<<3,BitsWritten :13};_a [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_a [640]=code {Code :2<<8|10<<3,BitsWritten :13};_a [704]=code {Code :2<<8|11<<3,BitsWritten :13};_a [768]=code {Code :2<<8|12<<3,BitsWritten :13};_a [832]=code {Code :2<<8|13<<3,BitsWritten :13};_a [896]=code {Code :3<<8|18<<3,BitsWritten :13};_a [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_a [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_a [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_a [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_a [1216]=code {Code :119<<3,BitsWritten :13};_a [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_a [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_a [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_a [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_a [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_a [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_a [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_a [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_g =make (map[int ]code );_g [64]=code {Code :27<<(3+8),BitsWritten :5};_g [128]=code {Code :18<<(3+8),BitsWritten :5};_g [192]=code {Code :23<<(2+8),BitsWritten :6};_g [256]=code {Code :55<<(1+8),BitsWritten :7};_g [320]=code {Code :54<<8,BitsWritten :8};
_g [384]=code {Code :55<<8,BitsWritten :8};_g [448]=code {Code :100<<8,BitsWritten :8};_g [512]=code {Code :101<<8,BitsWritten :8};_g [576]=code {Code :104<<8,BitsWritten :8};_g [640]=code {Code :103<<8,BitsWritten :8};_g [704]=code {Code :102<<8,BitsWritten :9};
_g [768]=code {Code :102<<8|1<<7,BitsWritten :9};_g [832]=code {Code :105<<8,BitsWritten :9};_g [896]=code {Code :105<<8|1<<7,BitsWritten :9};_g [960]=code {Code :106<<8,BitsWritten :9};_g [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_g [1088]=code {Code :107<<8,BitsWritten :9};
_g [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_g [1216]=code {Code :108<<8,BitsWritten :9};_g [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_g [1344]=code {Code :109<<8,BitsWritten :9};_g [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_g [1472]=code {Code :76<<8,BitsWritten :9};
_g [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_g [1600]=code {Code :77<<8,BitsWritten :9};_g [1664]=code {Code :24<<(2+8),BitsWritten :6};_g [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_gb =make (map[int ]code );_gb [1792]=code {Code :1<<8,BitsWritten :11};
_gb [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_gb [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_gb [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_gb [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_gb [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_gb [2176]=code {Code :1<<8|5<<4,BitsWritten :12};
_gb [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_gb [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_gb [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_gb [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_gb [2496]=code {Code :1<<8|14<<4,BitsWritten :12};
_gb [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_gf =make (map[int ]byte );_gf [0]=0xFF;_gf [1]=0xFE;_gf [2]=0xFC;_gf [3]=0xF8;_gf [4]=0xF0;_gf [5]=0xE0;_gf [6]=0xC0;_gf [7]=0x80;_gf [8]=0x00;};func _gee (_dfgc []byte ,_egae int ,_dgg code )([]byte ,int ){_deg :=0;
for _deg < _dgg .BitsWritten {_fae :=_egae /8;_add :=_egae %8;if _fae >=len (_dfgc ){_dfgc =append (_dfgc ,0);};_deaa :=8-_add ;_bbg :=_dgg .BitsWritten -_deg ;if _deaa > _bbg {_deaa =_bbg ;};if _deg < 8{_dfgc [_fae ]=_dfgc [_fae ]|byte (_dgg .Code >>uint (8+_add -_deg ))&_gf [8-_deaa -_add ];
}else {_dfgc [_fae ]=_dfgc [_fae ]|(byte (_dgg .Code <<uint (_deg -8))&_gf [8-_deaa ])>>uint (_add );};_egae +=_deaa ;_deg +=_deaa ;};return _dfgc ,_egae ;};func _ffab (_bfg []byte ,_dbbc int )([]byte ,int ){return _gee (_bfg ,_dbbc ,_dg )};func init (){for _gbe ,_cc :=range _d {_cad (_fbg ,_cc ,0,_gbe );
};for _faf ,_ged :=range _g {_cad (_fbg ,_ged ,0,_faf );};for _aaf ,_da :=range _b {_cad (_ec ,_da ,0,_aaf );};for _deb ,_dcc :=range _a {_cad (_ec ,_dcc ,0,_deb );};for _ba ,_ffe :=range _gb {_cad (_fbg ,_ffe ,0,_ba );_cad (_ec ,_ffe ,0,_ba );};_cad (_dbg ,_dg ,0,0);
_cad (_dbg ,_ge ,0,0);_cad (_dbg ,_ea ,0,0);_cad (_dbg ,_bg ,0,0);_cad (_dbg ,_ac ,0,0);_cad (_dbg ,_gc ,0,0);_cad (_dbg ,_gg ,0,0);_cad (_dbg ,_fa ,0,0);_cad (_dbg ,_eaf ,0,0);};func (_dgf *Encoder )decodeG32D (_edb []byte )([][]byte ,error ){var (_fd [][]byte ;
_bda int ;_fag error ;);_cf :for (_bda /8)< len (_edb ){var _aab bool ;_aab ,_bda ,_fag =_fdg (_edb ,_bda );if _fag !=nil {return nil ,_fag ;};if _aab {break ;};_aab ,_bda =_eed (_edb ,_bda );if !_aab {if _dgf .EndOfLine {return nil ,_gcd ;};};var _eca []byte ;
_eca ,_bda =_dgf .decodeRow1D (_edb ,_bda );if _dgf .EncodedByteAlign &&_bda %8!=0{_bda +=8-_bda %8;};if _eca !=nil {_fd =append (_fd ,_eca );};if _dgf .Rows > 0&&!_dgf .EndOfBlock &&len (_fd )>=_dgf .Rows {break ;};for _fe :=1;_fe < _dgf .K &&(_bda /8)< len (_edb );
_fe ++{_aab ,_bda =_bde (_edb ,_bda );if !_aab {_aab ,_bda ,_fag =_fdg (_edb ,_bda );if _fag !=nil {return nil ,_fag ;};if _aab {break _cf ;}else {if _dgf .EndOfLine {return nil ,_gcd ;};};};var (_cfg code ;_fcg bool ;);_dag :=true ;var _ega []byte ;_dgfa :=-1;
for _cfg ,_bda ,_fcg =_ga (_edb ,_bda );_fcg ;_cfg ,_bda ,_fcg =_ga (_edb ,_bda ){switch _cfg {case _dg :_ega ,_dgfa =_gfb (_fd ,_ega ,_dag ,_dgfa );case _ge :_ega ,_bda ,_dgfa ,_fag =_bcd (_edb ,_ega ,_bda ,_dag ,_dgfa );if _fag !=nil {return nil ,_fag ;
};case _ea :_ega ,_dgfa =_ef (_fd ,_ega ,_dag ,_dgfa ,0);_dag =!_dag ;case _bg :_ega ,_dgfa =_ef (_fd ,_ega ,_dag ,_dgfa ,1);_dag =!_dag ;case _ac :_ega ,_dgfa =_ef (_fd ,_ega ,_dag ,_dgfa ,2);_dag =!_dag ;case _gc :_ega ,_dgfa =_ef (_fd ,_ega ,_dag ,_dgfa ,3);
_dag =!_dag ;case _gg :_ega ,_dgfa =_ef (_fd ,_ega ,_dag ,_dgfa ,-1);_dag =!_dag ;case _fa :_ega ,_dgfa =_ef (_fd ,_ega ,_dag ,_dgfa ,-2);_dag =!_dag ;case _eaf :_ega ,_dgfa =_ef (_fd ,_ega ,_dag ,_dgfa ,-3);_dag =!_dag ;};if len (_ega )>=_dgf .Columns {break ;
};};if _dgf .EncodedByteAlign &&_bda %8!=0{_bda +=8-_bda %8;};if _ega !=nil {_fd =append (_fd ,_ega );};if _dgf .Rows > 0&&!_dgf .EndOfBlock &&len (_fd )>=_dgf .Rows {break _cf ;};};};return _fd ,nil ;};func (_agd *Encoder )decodeRow1D (_eage []byte ,_dea int )([]byte ,int ){var _aae []byte ;
_bffe :=true ;var _ecg int ;_ecg ,_dea =_aad (_eage ,_dea ,_bffe );for _ecg !=-1{_aae =_ee (_aae ,_bffe ,_ecg );if _ecg < 64{if len (_aae )>=_agd .Columns {break ;};_bffe =!_bffe ;};_ecg ,_dea =_aad (_eage ,_dea ,_bffe );};return _aae ,_dea ;};func _ga (_dfb []byte ,_acdb int )(code ,int ,bool ){var (_cbc uint16 ;
_edbb int ;_ggc int ;);_ggc =_acdb ;_cbc ,_edbb ,_ =_gfbc (_dfb ,_acdb );_ce ,_cgd :=_eb (_cbc ,_edbb );if !_cgd {return code {},_ggc ,false ;};return _ce ,_ggc +_ce .BitsWritten ,true ;};func _ee (_cee []byte ,_cgf bool ,_gedd int )[]byte {if _gedd < 0{return _cee ;
};_caa :=make ([]byte ,_gedd );if _cgf {for _fagd :=0;_fagd < len (_caa );_fagd ++{_caa [_fagd ]=_gcf ;};}else {for _fcgc :=0;_fcgc < len (_caa );_fcgc ++{_caa [_fcgc ]=_gd ;};};_cee =append (_cee ,_caa ...);return _cee ;};func _acb (_ffa ,_be []byte ,_edbc int ,_gedg bool )([]byte ,int ,error ){_agf :=_edbc ;
var _fcd int ;for _fcd ,_edbc =_aad (_ffa ,_edbc ,_gedg );_fcd !=-1;_fcd ,_edbc =_aad (_ffa ,_edbc ,_gedg ){_be =_ee (_be ,_gedg ,_fcd );if _fcd < 64{break ;};};if _fcd ==-1{return _be ,_agf ,_de ;};return _be ,_edbc ,nil ;};func _bec (_acea uint16 ,_ccdd int )byte {if _ccdd < 8{_acea >>=8;
};_ccdd %=8;_fbcc :=byte (0x01<<(7-uint (_ccdd )));return (byte (_acea )&_fbcc )>>(7-uint (_ccdd ));};func _fbf (_agg []byte ,_gec int ,_gac code )(bool ,int ){_ccf :=_gec ;var (_bca uint16 ;_efe int ;);_bca ,_efe ,_gec =_gfbc (_agg ,_gec );if _efe > 3{return false ,_ccf ;
};_bca >>=uint (3-_efe );_bca <<=3;if _bca !=_gac .Code {return false ,_ccf ;};return true ,_gec -3+_efe ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _ceeae (_ccdde []byte ,_cbg ,_ccg ,_gab int )([]byte ,int ){_fda :=_gacd (_ccg ,_gab );
_ccdde ,_cbg =_gee (_ccdde ,_cbg ,_fda );return _ccdde ,_cbg ;};func (_eedf *Encoder )Encode (pixels [][]byte )[]byte {if _eedf .BlackIs1 {_gcf =0;_gd =1;}else {_gcf =1;_gd =0;};if _eedf .K ==0{return _eedf .encodeG31D (pixels );};if _eedf .K > 0{return _eedf .encodeG32D (pixels );
};if _eedf .K < 0{return _eedf .encodeG4 (pixels );};return nil ;};func _bcd (_ffg ,_ace []byte ,_aba int ,_agc bool ,_efb int )([]byte ,int ,int ,error ){_edbd :=_aba ;var _edf error ;_ace ,_aba ,_edf =_acb (_ffg ,_ace ,_aba ,_agc );if _edf !=nil {return _ace ,_edbd ,_efb ,_edf ;
};_agc =!_agc ;_ace ,_aba ,_edf =_acb (_ffg ,_ace ,_aba ,_agc );if _edf !=nil {return _ace ,_edbd ,_efb ,_edf ;};_efb =len (_ace );return _ace ,_aba ,_efb ,nil ;};func _fbc (_df []byte ,_gcbf int )(bool ,int ,error ){_bad :=_gcbf ;var _dec bool ;_dec ,_gcbf =_ecc (_df ,_gcbf );
if _dec {_dec ,_gcbf =_ecc (_df ,_gcbf );if _dec {return true ,_gcbf ,nil ;};return false ,_bad ,_cd ;};return false ,_bad ,nil ;};func _fce (_cag int ,_bbcg bool )(code ,int ,bool ){if _cag < 64{if _bbcg {return _d [_cag ],0,true ;};return _b [_cag ],0,true ;
};_fdf :=_cag /64;if _fdf > 40{return _gb [2560],_cag -2560,false ;};if _fdf > 27{return _gb [_fdf *64],_cag -_fdf *64,false ;};if _bbcg {return _g [_fdf *64],_cag -_fdf *64,false ;};return _a [_fdf *64],_cag -_fdf *64,false ;};func _gecg (_acc []byte ,_dgc int ,_faa int ,_feg bool )([]byte ,int ){var (_dffd code ;
_aff bool ;);for !_aff {_dffd ,_faa ,_aff =_fce (_faa ,_feg );_acc ,_dgc =_gee (_acc ,_dgc ,_dffd );};return _acc ,_dgc ;};func (_dac *Encoder )encodeG31D (_dbef [][]byte )[]byte {var _afb []byte ;_bee :=0;for _cgfd :=range _dbef {if _dac .Rows > 0&&!_dac .EndOfBlock &&_cgfd ==_dac .Rows {break ;
};_ecb ,_fcc :=_cgac (_dbef [_cgfd ],_bee ,_db );_afb =_dac .appendEncodedRow (_afb ,_ecb ,_bee );if _dac .EncodedByteAlign {_fcc =0;};_bee =_fcc ;};if _dac .EndOfBlock {_eaa ,_ :=_defb (_bee );_afb =_dac .appendEncodedRow (_afb ,_eaa ,_bee );};return _afb ;
};func (_cadf *Encoder )encodeG32D (_dccd [][]byte )[]byte {var _dfg []byte ;var _bade int ;for _cfba :=0;_cfba < len (_dccd );_cfba +=_cadf .K {if _cadf .Rows > 0&&!_cadf .EndOfBlock &&_cfba ==_cadf .Rows {break ;};_ggg ,_dff :=_cgac (_dccd [_cfba ],_bade ,_ed );
_dfg =_cadf .appendEncodedRow (_dfg ,_ggg ,_bade );if _cadf .EncodedByteAlign {_dff =0;};_bade =_dff ;for _bfc :=_cfba +1;_bfc < (_cfba +_cadf .K )&&_bfc < len (_dccd );_bfc ++{if _cadf .Rows > 0&&!_cadf .EndOfBlock &&_bfc ==_cadf .Rows {break ;};_geac ,_cga :=_gee (nil ,_bade ,_aa );
var _agdc ,_agdb ,_fab int ;_eaed :=-1;for _eaed < len (_dccd [_bfc ]){_agdc =_dfa (_dccd [_bfc ],_eaed );_agdb =_fdd (_dccd [_bfc ],_dccd [_bfc -1],_eaed );_fab =_dfa (_dccd [_bfc -1],_agdb );if _fab < _agdc {_geac ,_cga =_ffab (_geac ,_cga );_eaed =_fab ;
}else {if _eg .Abs (float64 (_agdb -_agdc ))> 3{_geac ,_cga ,_eaed =_cbb (_dccd [_bfc ],_geac ,_cga ,_eaed ,_agdc );}else {_geac ,_cga =_ceeae (_geac ,_cga ,_agdc ,_agdb );_eaed =_agdc ;};};};_dfg =_cadf .appendEncodedRow (_dfg ,_geac ,_bade );if _cadf .EncodedByteAlign {_cga =0;
};_bade =_cga %8;};};if _cadf .EndOfBlock {_edfb ,_ :=_cde (_bade );_dfg =_cadf .appendEncodedRow (_dfg ,_edfb ,_bade );};return _dfg ;};type code struct{Code uint16 ;BitsWritten int ;};func _eed (_ecaf []byte ,_aggg int )(bool ,int ){return _fbf (_ecaf ,_aggg ,_ed )};
func _gfbc (_fed []byte ,_acg int )(uint16 ,int ,int ){_ad :=_acg ;_ddc :=_acg /8;_acg %=8;if _ddc >=len (_fed ){return 0,16,_ad ;};_adb :=byte (0xFF>>uint (_acg ));_bede :=uint16 ((_fed [_ddc ]&_adb )<<uint (_acg ))<<8;_bdd :=8-_acg ;_ddc ++;_acg =0;if _ddc >=len (_fed ){return _bede >>(16-uint (_bdd )),16-_bdd ,_ad +_bdd ;
};_bede |=uint16 (_fed [_ddc ])<<(8-uint (_bdd ));_bdd +=8;_ddc ++;_acg =0;if _ddc >=len (_fed ){return _bede >>(16-uint (_bdd )),16-_bdd ,_ad +_bdd ;};if _bdd ==16{return _bede ,0,_ad +_bdd ;};_abd :=16-_bdd ;_bede |=uint16 (_fed [_ddc ]>>(8-uint (_abd )));
return _bede ,0,_ad +16;};func _daag (_ecf *decodingTreeNode ,_gced uint16 ,_egff int )(*int ,*code ){if _ecf ==nil {return nil ,nil ;};if _egff ==16{return _ecf .RunLen ,_ecf .Code ;};_cdd :=_bec (_gced ,_egff );_egff ++;var _gea *int ;var _gaa *code ;
if _cdd ==1{_gea ,_gaa =_daag (_ecf .Right ,_gced ,_egff );}else {_gea ,_gaa =_daag (_ecf .Left ,_gced ,_egff );};if _gea ==nil {_gea =_ecf .RunLen ;_gaa =_ecf .Code ;};return _gea ,_gaa ;};func _ecc (_egf []byte ,_ada int )(bool ,int ){_fcdf :=_ada ;var (_badg uint16 ;
_bbc int ;);_badg ,_bbc ,_ada =_gfbc (_egf ,_ada );if _bbc > 4{return false ,_fcdf ;};_badg >>=uint (4-_bbc );_badg <<=4;if _badg !=_db .Code {return false ,_fcdf ;};return true ,_ada -4+_bbc ;};func _eb (_bfa uint16 ,_cef int )(code ,bool ){_ ,_bdf :=_daag (_dbg ,_bfa ,_cef );
if _bdf ==nil {return code {},false ;};return *_bdf ,true ;};func _ef (_af [][]byte ,_bab []byte ,_faga bool ,_bce ,_daa int )([]byte ,int ){_eacg :=_eec (_bab ,_af [len (_af )-1],_bce ,_faga );_eae :=_eacg +_daa ;if _bce ==-1{_bab =_ee (_bab ,_faga ,_eae -_bce -1);
}else {_bab =_ee (_bab ,_faga ,_eae -_bce );};_bce =_eae ;return _bab ,_bce ;};func _gacd (_gbaa ,_cada int )code {var _dace code ;switch _cada -_gbaa {case -1:_dace =_bg ;case -2:_dace =_ac ;case -3:_dace =_gc ;case 0:_dace =_ea ;case 1:_dace =_gg ;case 2:_dace =_fa ;
case 3:_dace =_eaf ;};return _dace ;};func _dfa (_cded []byte ,_bfag int )int {if _bfag >=len (_cded ){return _bfag ;};if _bfag < -1{_bfag =-1;};var _ffgc byte ;if _bfag > -1{_ffgc =_cded [_bfag ];}else {_ffgc =_gcf ;};_caf :=_bfag +1;for _caf < len (_cded ){if _cded [_caf ]!=_ffgc {break ;
};_caf ++;};return _caf ;};func (_dae *Encoder )encodeG4 (_ebb [][]byte )[]byte {_cbcg :=make ([][]byte ,len (_ebb ));copy (_cbcg ,_ebb );_cbcg =_cea (_cbcg );var _fec []byte ;var _fccb int ;for _cae :=1;_cae < len (_cbcg );_cae ++{if _dae .Rows > 0&&!_dae .EndOfBlock &&_cae ==(_dae .Rows +1){break ;
};var _gbab []byte ;var _fgc ,_ddd ,_gfg int ;_cdgg :=_fccb ;_fgg :=-1;for _fgg < len (_cbcg [_cae ]){_fgc =_dfa (_cbcg [_cae ],_fgg );_ddd =_fdd (_cbcg [_cae ],_cbcg [_cae -1],_fgg );_gfg =_dfa (_cbcg [_cae -1],_ddd );if _gfg < _fgc {_gbab ,_cdgg =_gee (_gbab ,_cdgg ,_dg );
_fgg =_gfg ;}else {if _eg .Abs (float64 (_ddd -_fgc ))> 3{_gbab ,_cdgg ,_fgg =_cbb (_cbcg [_cae ],_gbab ,_cdgg ,_fgg ,_fgc );}else {_gbab ,_cdgg =_ceeae (_gbab ,_cdgg ,_fgc ,_ddd );_fgg =_fgc ;};};};_fec =_dae .appendEncodedRow (_fec ,_gbab ,_fccb );if _dae .EncodedByteAlign {_cdgg =0;
};_fccb =_cdgg %8;};if _dae .EndOfBlock {_dagc ,_ :=_cfbg (_fccb );_fec =_dae .appendEncodedRow (_fec ,_dagc ,_fccb );};return _fec ;};func _eec (_cgbc ,_abf []byte ,_bfcg int ,_ddb bool )int {_fcea :=_dfa (_abf ,_bfcg );if _fcea < len (_abf )&&(_bfcg ==-1&&_abf [_fcea ]==_gcf ||_bfcg >=0&&_bfcg < len (_cgbc )&&_cgbc [_bfcg ]==_abf [_fcea ]||_bfcg >=len (_cgbc )&&_ddb &&_abf [_fcea ]==_gcf ||_bfcg >=len (_cgbc )&&!_ddb &&_abf [_fcea ]==_gd ){_fcea =_dfa (_abf ,_fcea );
};return _fcea ;};func (_gce *Encoder )decodeG4 (_ccd []byte )([][]byte ,error ){_bf :=make ([]byte ,_gce .Columns );for _bc :=range _bf {_bf [_bc ]=_gcf ;};_acd :=make ([][]byte ,1);_acd [0]=_bf ;var (_dda bool ;_fff error ;_gba int ;);for (_gba /8)< len (_ccd ){_dda ,_gba ,_fff =_fbc (_ccd ,_gba );
if _fff !=nil {return nil ,_fff ;};if _dda {break ;};var (_dgbg code ;_bb bool ;);_bff :=true ;var _bdab []byte ;_cfb :=-1;_cg :=true ;for _cfb < _gce .Columns {_dgbg ,_gba ,_bb =_ga (_ccd ,_gba );if !_bb {_c .Log .Warning ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u0063i\u0074\u0074\u0066a\u0078:\u0020\u0025\u0076",_gcc );
_cg =false ;break ;};switch _dgbg {case _dg :_bdab ,_cfb =_gfb (_acd ,_bdab ,_bff ,_cfb );case _ge :_bdab ,_gba ,_cfb ,_fff =_bcd (_ccd ,_bdab ,_gba ,_bff ,_cfb );if _fff !=nil {_c .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064i\u006e\u0067\u0020\u0063c\u0069\u0074\u0074\u0066\u0061\u0078\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020\u006d\u006f\u0064\u0065\u003a\u0020\u0025\u0076",_fff );
_cg =false ;break ;};case _ea :_bdab ,_cfb =_ef (_acd ,_bdab ,_bff ,_cfb ,0);_bff =!_bff ;case _bg :_bdab ,_cfb =_ef (_acd ,_bdab ,_bff ,_cfb ,1);_bff =!_bff ;case _ac :_bdab ,_cfb =_ef (_acd ,_bdab ,_bff ,_cfb ,2);_bff =!_bff ;case _gc :_bdab ,_cfb =_ef (_acd ,_bdab ,_bff ,_cfb ,3);
_bff =!_bff ;case _gg :_bdab ,_cfb =_ef (_acd ,_bdab ,_bff ,_cfb ,-1);_bff =!_bff ;case _fa :_bdab ,_cfb =_ef (_acd ,_bdab ,_bff ,_cfb ,-2);_bff =!_bff ;case _eaf :_bdab ,_cfb =_ef (_acd ,_bdab ,_bff ,_cfb ,-3);_bff =!_bff ;};if len (_bdab )>=_gce .Columns {break ;
};};if !_cg {_gba +=8-_gba %8;continue ;};if _gce .EncodedByteAlign &&_gba %8!=0{_gba +=8-_gba %8;};_acd =append (_acd ,_bdab );if _gce .Rows > 0&&!_gce .EndOfBlock &&len (_acd )>=(_gce .Rows +1){break ;};};_acd =_acd [1:];return _acd ,nil ;};func _cad (_fagc *decodingTreeNode ,_ceb code ,_ceea int ,_bffed int ){_bfd :=_bec (_ceb .Code ,_ceea );
_ceea ++;if _bfd ==1{if _fagc .Right ==nil {_fagc .Right =&decodingTreeNode {Val :_bfd };};if _ceea ==_ceb .BitsWritten {_fagc .Right .RunLen =&_bffed ;_fagc .Right .Code =&_ceb ;}else {_cad (_fagc .Right ,_ceb ,_ceea ,_bffed );};}else {if _fagc .Left ==nil {_fagc .Left =&decodingTreeNode {Val :_bfd };
};if _ceea ==_ceb .BitsWritten {_fagc .Left .RunLen =&_bffed ;_fagc .Left .Code =&_ceb ;}else {_cad (_fagc .Left ,_ceb ,_ceea ,_bffed );};};};func _baef (_gbd []byte ,_gda bool ,_gbcc int )(int ,int ){_dbb :=0;for _gbcc < len (_gbd ){if _gda {if _gbd [_gbcc ]!=_gcf {break ;
};}else {if _gbd [_gbcc ]!=_gd {break ;};};_dbb ++;_gbcc ++;};return _dbb ,_gbcc ;};func _bde (_egab []byte ,_cgb int )(bool ,int ){return _fbf (_egab ,_cgb ,_aa )};func _fdg (_eff []byte ,_eag int )(bool ,int ,error ){_baf :=_eag ;var _ede =false ;for _efbd :=0;
_efbd < 6;_efbd ++{_ede ,_eag =_eed (_eff ,_eag );if !_ede {if _efbd > 1{return false ,_baf ,_bd ;};_eag =_baf ;break ;};};return _ede ,_eag ,nil ;};func (_gbb *Encoder )Decode (encoded []byte )([][]byte ,error ){if _gbb .BlackIs1 {_gcf =0;_gd =1;}else {_gcf =1;
_gd =0;};if _gbb .K ==0{return _gbb .decodeG31D (encoded );};if _gbb .K > 0{return _gbb .decodeG32D (encoded );};if _gbb .K < 4{return _gbb .decodeG4 (encoded );};return nil ,nil ;};func (_def *Encoder )decodeG31D (_acf []byte )([][]byte ,error ){var (_ab [][]byte ;
_dd int ;_fc =-1;_cb bool ;);for (_dd /8)< len (_acf ){_cb ,_dd =_ecc (_acf ,_dd );if !_cb {if _def .EndOfLine {return nil ,_gcd ;};}else {for _eac :=0;_eac < 5;_eac ++{_cb ,_dd =_ecc (_acf ,_dd );if !_cb {if _eac ==0{break ;};return nil ,_fb ;};};if _cb {break ;
};};var _ag []byte ;_ag ,_dd =_def .decodeRow1D (_acf ,_dd );if _fc ==_dd {return nil ,_dc ;};_fc =_dd ;if _def .EncodedByteAlign &&_dd %8!=0{_dd +=8-_dd %8;};_ab =append (_ab ,_ag );if _def .Rows > 0&&!_def .EndOfBlock &&len (_ab )>=_def .Rows {break ;
};};return _ab ,nil ;};func _cbb (_fefb ,_ddgc []byte ,_cgdd ,_cdb ,_effd int )([]byte ,int ,int ){_dfe :=_dfa (_fefb ,_effd );_cgbe :=_cdb >=0&&_fefb [_cdb ]==_gcf ||_cdb ==-1;_ddgc ,_cgdd =_gee (_ddgc ,_cgdd ,_ge );var _bea int ;if _cdb > -1{_bea =_effd -_cdb ;
}else {_bea =_effd -_cdb -1;};_ddgc ,_cgdd =_gecg (_ddgc ,_cgdd ,_bea ,_cgbe );_cgbe =!_cgbe ;_dgd :=_dfe -_effd ;_ddgc ,_cgdd =_gecg (_ddgc ,_cgdd ,_dgd ,_cgbe );_cdb =_dfe ;return _ddgc ,_cgdd ,_cdb ;};func _aad (_ffef []byte ,_bge int ,_daab bool )(int ,int ){var (_beb uint16 ;
_gbc int ;_aade int ;);_aade =_bge ;_beb ,_gbc ,_ =_gfbc (_ffef ,_bge );_bed ,_gcg :=_dce (_beb ,_gbc ,_daab );if _bed ==-1{return -1,_aade ;};return _bed ,_aade +_gcg .BitsWritten ;};func (_gcde *Encoder )appendEncodedRow (_cdf ,_feb []byte ,_geg int )[]byte {if len (_cdf )> 0&&_geg !=0&&!_gcde .EncodedByteAlign {_cdf [len (_cdf )-1]=_cdf [len (_cdf )-1]|_feb [0];
_cdf =append (_cdf ,_feb [1:]...);}else {_cdf =append (_cdf ,_feb ...);};return _cdf ;};func _cgac (_efg []byte ,_ae int ,_ebf code )([]byte ,int ){_dfca :=true ;var _adgd []byte ;_adgd ,_ae =_gee (nil ,_ae ,_ebf );_cgfda :=0;var _cac int ;for _cgfda < len (_efg ){_cac ,_cgfda =_baef (_efg ,_dfca ,_cgfda );
_adgd ,_ae =_gecg (_adgd ,_ae ,_cac ,_dfca );_dfca =!_dfca ;};return _adgd ,_ae %8;};func _gfb (_eacf [][]byte ,_dbe []byte ,_ddg bool ,_afd int )([]byte ,int ){_acff :=_eec (_dbe ,_eacf [len (_eacf )-1],_afd ,_ddg );_gcb :=_dfa (_eacf [len (_eacf )-1],_acff );
if _afd ==-1{_dbe =_ee (_dbe ,_ddg ,_gcb -_afd -1);}else {_dbe =_ee (_dbe ,_ddg ,_gcb -_afd );};_afd =_gcb ;return _dbe ,_afd ;};var (_cd =_e .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");
_bd =_e .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_de =_e .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");
_gcd =_e .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_fb =_e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_gcc =_e .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065");_dc =_e .New ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074o\u0020\u0064\u0065\u0063\u006fd\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u002c\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0069\u0067\u0068\u0074\u0020\u0062\u0065\u0020\u0062\u0072\u006f\u006b\u0065\u006e");
);var (_b map[int ]code ;_d map[int ]code ;_a map[int ]code ;_g map[int ]code ;_gb map[int ]code ;_gf map[int ]byte ;_db =code {Code :1<<4,BitsWritten :12};_ed =code {Code :3<<3,BitsWritten :13};_aa =code {Code :2<<3,BitsWritten :13};_dg =code {Code :1<<12,BitsWritten :4};
_ge =code {Code :1<<13,BitsWritten :3};_ea =code {Code :1<<15,BitsWritten :1};_bg =code {Code :3<<13,BitsWritten :3};_ac =code {Code :3<<10,BitsWritten :6};_gc =code {Code :3<<9,BitsWritten :7};_gg =code {Code :2<<13,BitsWritten :3};_fa =code {Code :2<<10,BitsWritten :6};
_eaf =code {Code :2<<9,BitsWritten :7};);var (_gcf byte =1;_gd byte =0;);func _defb (_eef int )([]byte ,int ){var _dcce []byte ;for _gacf :=0;_gacf < 6;_gacf ++{_dcce ,_eef =_gee (_dcce ,_eef ,_db );};return _dcce ,_eef %8;};func _cea (_bebe [][]byte )[][]byte {_gfc :=make ([]byte ,len (_bebe [0]));
for _fgga :=range _gfc {_gfc [_fgga ]=_gcf ;};_bebe =append (_bebe ,[]byte {});for _bdfb :=len (_bebe )-1;_bdfb > 0;_bdfb --{_bebe [_bdfb ]=_bebe [_bdfb -1];};_bebe [0]=_gfc ;return _bebe ;};func _cfbg (_eaged int )([]byte ,int ){var _adg []byte ;for _baba :=0;
_baba < 2;_baba ++{_adg ,_eaged =_gee (_adg ,_eaged ,_db );};return _adg ,_eaged %8;};func _dce (_cfgb uint16 ,_aac int ,_gfe bool )(int ,code ){var _fg *int ;var _cdg *code ;if _gfe {_fg ,_cdg =_daag (_fbg ,_cfgb ,_aac );}else {_fg ,_cdg =_daag (_ec ,_cfgb ,_aac );
};if _fg ==nil {return -1,code {};};return *_fg ,*_cdg ;};func _fdd (_dbed ,_bbb []byte ,_fef int )int {_bdg :=_dfa (_bbb ,_fef );if _bdg < len (_bbb )&&(_fef ==-1&&_bbb [_bdg ]==_gcf ||_fef >=0&&_fef < len (_dbed )&&_dbed [_fef ]==_bbb [_bdg ]||_fef >=len (_dbed )&&_dbed [_fef -1]!=_bbb [_bdg ]){_bdg =_dfa (_bbb ,_bdg );
};return _bdg ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};