//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_b "errors";_c "math";);func _cbaa (_dgf []byte ,_dgfg ,_aceg ,_ceag int )([]byte ,int ){_bdg :=_ddgde (_aceg ,_ceag );_dgf ,_dgfg =_aca (_dgf ,_dgfg ,_bdg );return _dgf ,_dgfg ;};func _fcc (_fag []byte ,_gbca int )([]byte ,int ){return _aca (_fag ,_gbca ,_cg )};func init (){_f =make (map[int ]code );_f [0]=code {Code :13<<8|3<<6,BitsWritten :10};_f [1]=code {Code :2<<(5+8),BitsWritten :3};_f [2]=code {Code :3<<(6+8),BitsWritten :2};_f [3]=code {Code :2<<(6+8),BitsWritten :2};_f [4]=code {Code :3<<(5+8),BitsWritten :3};_f [5]=code {Code :3<<(4+8),BitsWritten :4};_f [6]=code {Code :2<<(4+8),BitsWritten :4};_f [7]=code {Code :3<<(3+8),BitsWritten :5};_f [8]=code {Code :5<<(2+8),BitsWritten :6};_f [9]=code {Code :4<<(2+8),BitsWritten :6};_f [10]=code {Code :4<<(1+8),BitsWritten :7};_f [11]=code {Code :5<<(1+8),BitsWritten :7};_f [12]=code {Code :7<<(1+8),BitsWritten :7};_f [13]=code {Code :4<<8,BitsWritten :8};_f [14]=code {Code :7<<8,BitsWritten :8};_f [15]=code {Code :12<<8,BitsWritten :9};_f [16]=code {Code :5<<8|3<<6,BitsWritten :10};_f [17]=code {Code :6<<8,BitsWritten :10};_f [18]=code {Code :2<<8,BitsWritten :10};_f [19]=code {Code :12<<8|7<<5,BitsWritten :11};_f [20]=code {Code :13<<8,BitsWritten :11};_f [21]=code {Code :13<<8|4<<5,BitsWritten :11};_f [22]=code {Code :6<<8|7<<5,BitsWritten :11};_f [23]=code {Code :5<<8,BitsWritten :11};_f [24]=code {Code :2<<8|7<<5,BitsWritten :11};_f [25]=code {Code :3<<8,BitsWritten :11};_f [26]=code {Code :12<<8|10<<4,BitsWritten :12};_f [27]=code {Code :12<<8|11<<4,BitsWritten :12};_f [28]=code {Code :12<<8|12<<4,BitsWritten :12};_f [29]=code {Code :12<<8|13<<4,BitsWritten :12};_f [30]=code {Code :6<<8|8<<4,BitsWritten :12};_f [31]=code {Code :6<<8|9<<4,BitsWritten :12};_f [32]=code {Code :6<<8|10<<4,BitsWritten :12};_f [33]=code {Code :6<<8|11<<4,BitsWritten :12};_f [34]=code {Code :13<<8|2<<4,BitsWritten :12};_f [35]=code {Code :13<<8|3<<4,BitsWritten :12};_f [36]=code {Code :13<<8|4<<4,BitsWritten :12};_f [37]=code {Code :13<<8|5<<4,BitsWritten :12};_f [38]=code {Code :13<<8|6<<4,BitsWritten :12};_f [39]=code {Code :13<<8|7<<4,BitsWritten :12};_f [40]=code {Code :6<<8|12<<4,BitsWritten :12};_f [41]=code {Code :6<<8|13<<4,BitsWritten :12};_f [42]=code {Code :13<<8|10<<4,BitsWritten :12};_f [43]=code {Code :13<<8|11<<4,BitsWritten :12};_f [44]=code {Code :5<<8|4<<4,BitsWritten :12};_f [45]=code {Code :5<<8|5<<4,BitsWritten :12};_f [46]=code {Code :5<<8|6<<4,BitsWritten :12};_f [47]=code {Code :5<<8|7<<4,BitsWritten :12};_f [48]=code {Code :6<<8|4<<4,BitsWritten :12};_f [49]=code {Code :6<<8|5<<4,BitsWritten :12};_f [50]=code {Code :5<<8|2<<4,BitsWritten :12};_f [51]=code {Code :5<<8|3<<4,BitsWritten :12};_f [52]=code {Code :2<<8|4<<4,BitsWritten :12};_f [53]=code {Code :3<<8|7<<4,BitsWritten :12};_f [54]=code {Code :3<<8|8<<4,BitsWritten :12};_f [55]=code {Code :2<<8|7<<4,BitsWritten :12};_f [56]=code {Code :2<<8|8<<4,BitsWritten :12};_f [57]=code {Code :5<<8|8<<4,BitsWritten :12};_f [58]=code {Code :5<<8|9<<4,BitsWritten :12};_f [59]=code {Code :2<<8|11<<4,BitsWritten :12};_f [60]=code {Code :2<<8|12<<4,BitsWritten :12};_f [61]=code {Code :5<<8|10<<4,BitsWritten :12};_f [62]=code {Code :6<<8|6<<4,BitsWritten :12};_f [63]=code {Code :6<<8|7<<4,BitsWritten :12};_be =make (map[int ]code );_be [0]=code {Code :53<<8,BitsWritten :8};_be [1]=code {Code :7<<(2+8),BitsWritten :6};_be [2]=code {Code :7<<(4+8),BitsWritten :4};_be [3]=code {Code :8<<(4+8),BitsWritten :4};_be [4]=code {Code :11<<(4+8),BitsWritten :4};_be [5]=code {Code :12<<(4+8),BitsWritten :4};_be [6]=code {Code :14<<(4+8),BitsWritten :4};_be [7]=code {Code :15<<(4+8),BitsWritten :4};_be [8]=code {Code :19<<(3+8),BitsWritten :5};_be [9]=code {Code :20<<(3+8),BitsWritten :5};_be [10]=code {Code :7<<(3+8),BitsWritten :5};_be [11]=code {Code :8<<(3+8),BitsWritten :5};_be [12]=code {Code :8<<(2+8),BitsWritten :6};_be [13]=code {Code :3<<(2+8),BitsWritten :6};_be [14]=code {Code :52<<(2+8),BitsWritten :6};_be [15]=code {Code :53<<(2+8),BitsWritten :6};_be [16]=code {Code :42<<(2+8),BitsWritten :6};_be [17]=code {Code :43<<(2+8),BitsWritten :6};_be [18]=code {Code :39<<(1+8),BitsWritten :7};_be [19]=code {Code :12<<(1+8),BitsWritten :7};_be [20]=code {Code :8<<(1+8),BitsWritten :7};_be [21]=code {Code :23<<(1+8),BitsWritten :7};_be [22]=code {Code :3<<(1+8),BitsWritten :7};_be [23]=code {Code :4<<(1+8),BitsWritten :7};_be [24]=code {Code :40<<(1+8),BitsWritten :7};_be [25]=code {Code :43<<(1+8),BitsWritten :7};_be [26]=code {Code :19<<(1+8),BitsWritten :7};_be [27]=code {Code :36<<(1+8),BitsWritten :7};_be [28]=code {Code :24<<(1+8),BitsWritten :7};_be [29]=code {Code :2<<8,BitsWritten :8};_be [30]=code {Code :3<<8,BitsWritten :8};_be [31]=code {Code :26<<8,BitsWritten :8};_be [32]=code {Code :27<<8,BitsWritten :8};_be [33]=code {Code :18<<8,BitsWritten :8};_be [34]=code {Code :19<<8,BitsWritten :8};_be [35]=code {Code :20<<8,BitsWritten :8};_be [36]=code {Code :21<<8,BitsWritten :8};_be [37]=code {Code :22<<8,BitsWritten :8};_be [38]=code {Code :23<<8,BitsWritten :8};_be [39]=code {Code :40<<8,BitsWritten :8};_be [40]=code {Code :41<<8,BitsWritten :8};_be [41]=code {Code :42<<8,BitsWritten :8};_be [42]=code {Code :43<<8,BitsWritten :8};_be [43]=code {Code :44<<8,BitsWritten :8};_be [44]=code {Code :45<<8,BitsWritten :8};_be [45]=code {Code :4<<8,BitsWritten :8};_be [46]=code {Code :5<<8,BitsWritten :8};_be [47]=code {Code :10<<8,BitsWritten :8};_be [48]=code {Code :11<<8,BitsWritten :8};_be [49]=code {Code :82<<8,BitsWritten :8};_be [50]=code {Code :83<<8,BitsWritten :8};_be [51]=code {Code :84<<8,BitsWritten :8};_be [52]=code {Code :85<<8,BitsWritten :8};_be [53]=code {Code :36<<8,BitsWritten :8};_be [54]=code {Code :37<<8,BitsWritten :8};_be [55]=code {Code :88<<8,BitsWritten :8};_be [56]=code {Code :89<<8,BitsWritten :8};_be [57]=code {Code :90<<8,BitsWritten :8};_be [58]=code {Code :91<<8,BitsWritten :8};_be [59]=code {Code :74<<8,BitsWritten :8};_be [60]=code {Code :75<<8,BitsWritten :8};_be [61]=code {Code :50<<8,BitsWritten :8};_be [62]=code {Code :51<<8,BitsWritten :8};_be [63]=code {Code :52<<8,BitsWritten :8};_e =make (map[int ]code );_e [64]=code {Code :3<<8|3<<6,BitsWritten :10};_e [128]=code {Code :12<<8|8<<4,BitsWritten :12};_e [192]=code {Code :12<<8|9<<4,BitsWritten :12};_e [256]=code {Code :5<<8|11<<4,BitsWritten :12};_e [320]=code {Code :3<<8|3<<4,BitsWritten :12};_e [384]=code {Code :3<<8|4<<4,BitsWritten :12};_e [448]=code {Code :3<<8|5<<4,BitsWritten :12};_e [512]=code {Code :3<<8|12<<3,BitsWritten :13};_e [576]=code {Code :3<<8|13<<3,BitsWritten :13};_e [640]=code {Code :2<<8|10<<3,BitsWritten :13};_e [704]=code {Code :2<<8|11<<3,BitsWritten :13};_e [768]=code {Code :2<<8|12<<3,BitsWritten :13};_e [832]=code {Code :2<<8|13<<3,BitsWritten :13};_e [896]=code {Code :3<<8|18<<3,BitsWritten :13};_e [960]=code {Code :3<<8|19<<3,BitsWritten :13};_e [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_e [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_e [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_e [1216]=code {Code :119<<3,BitsWritten :13};_e [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_e [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_e [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_e [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_e [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_e [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_e [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_e [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_a =make (map[int ]code );_a [64]=code {Code :27<<(3+8),BitsWritten :5};_a [128]=code {Code :18<<(3+8),BitsWritten :5};_a [192]=code {Code :23<<(2+8),BitsWritten :6};_a [256]=code {Code :55<<(1+8),BitsWritten :7};_a [320]=code {Code :54<<8,BitsWritten :8};_a [384]=code {Code :55<<8,BitsWritten :8};_a [448]=code {Code :100<<8,BitsWritten :8};_a [512]=code {Code :101<<8,BitsWritten :8};_a [576]=code {Code :104<<8,BitsWritten :8};_a [640]=code {Code :103<<8,BitsWritten :8};_a [704]=code {Code :102<<8,BitsWritten :9};_a [768]=code {Code :102<<8|1<<7,BitsWritten :9};_a [832]=code {Code :105<<8,BitsWritten :9};_a [896]=code {Code :105<<8|1<<7,BitsWritten :9};_a [960]=code {Code :106<<8,BitsWritten :9};_a [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_a [1088]=code {Code :107<<8,BitsWritten :9};_a [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_a [1216]=code {Code :108<<8,BitsWritten :9};_a [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_a [1344]=code {Code :109<<8,BitsWritten :9};_a [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_a [1472]=code {Code :76<<8,BitsWritten :9};_a [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_a [1600]=code {Code :77<<8,BitsWritten :9};_a [1664]=code {Code :24<<(2+8),BitsWritten :6};_a [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_g =make (map[int ]code );_g [1792]=code {Code :1<<8,BitsWritten :11};_g [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_g [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_g [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_g [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_g [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_g [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_g [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_g [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_g [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_g [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_g [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_g [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_de =make (map[int ]byte );_de [0]=0xFF;_de [1]=0xFE;_de [2]=0xFC;_de [3]=0xF8;_de [4]=0xF0;_de [5]=0xE0;_de [6]=0xC0;_de [7]=0x80;_de [8]=0x00;};func (_cfg *Encoder )encodeG4 (_cgfc [][]byte )[]byte {_edc :=make ([][]byte ,len (_cgfc ));copy (_edc ,_cgfc );_edc =_dad (_edc );var _dfgf []byte ;var _dcaa int ;for _fbeb :=1;_fbeb < len (_edc );_fbeb ++{if _cfg .Rows > 0&&!_cfg .EndOfBlock &&_fbeb ==(_cfg .Rows +1){break ;};var _efed []byte ;var _gdab ,_ffc ,_gbf int ;_edae :=_dcaa ;_fce :=-1;for _fce < len (_edc [_fbeb ]){_gdab =_cdc (_edc [_fbeb ],_fce );_ffc =_fbd (_edc [_fbeb ],_edc [_fbeb -1],_fce );_gbf =_cdc (_edc [_fbeb -1],_ffc );if _gbf < _gdab {_efed ,_edae =_aca (_efed ,_edae ,_cg );_fce =_gbf ;}else {if _c .Abs (float64 (_ffc -_gdab ))> 3{_efed ,_edae ,_fce =_adeg (_edc [_fbeb ],_efed ,_edae ,_fce ,_gdab );}else {_efed ,_edae =_cbaa (_efed ,_edae ,_gdab ,_ffc );_fce =_gdab ;};};};_dfgf =_cfg .appendEncodedRow (_dfgf ,_efed ,_dcaa );if _cfg .EncodedByteAlign {_edae =0;};_dcaa =_edae %8;};if _cfg .EndOfBlock {_ceff ,_ :=_gbfg (_dcaa );_dfgf =_cfg .appendEncodedRow (_dfgf ,_ceff ,_dcaa );};return _dfgf ;};func _efc (_deg *decodingTreeNode ,_fcd uint16 ,_dea int )(*int ,*code ){if _deg ==nil {return nil ,nil ;};if _dea ==16{return _deg .RunLen ,_deg .Code ;};_geac :=_cbd (_fcd ,_dea );_dea ++;var _aga *int ;var _faa *code ;if _geac ==1{_aga ,_faa =_efc (_deg .Right ,_fcd ,_dea );}else {_aga ,_faa =_efc (_deg .Left ,_fcd ,_dea );};if _aga ==nil {_aga =_deg .RunLen ;_faa =_deg .Code ;};return _aga ,_faa ;};func init (){for _af ,_aeg :=range _be {_dcea (_ae ,_aeg ,0,_af );};for _cea ,_bgd :=range _a {_dcea (_ae ,_bgd ,0,_cea );};for _geg ,_bbe :=range _f {_dcea (_fd ,_bbe ,0,_geg );};for _ed ,_bcb :=range _e {_dcea (_fd ,_bcb ,0,_ed );};for _ab ,_cb :=range _g {_dcea (_ae ,_cb ,0,_ab );_dcea (_fd ,_cb ,0,_ab );};_dcea (_eb ,_cg ,0,0);_dcea (_eb ,_fe ,0,0);_dcea (_eb ,_gc ,0,0);_dcea (_eb ,_ce ,0,0);_dcea (_eb ,_ba ,0,0);_dcea (_eb ,_bgf ,0,0);_dcea (_eb ,_ec ,0,0);_dcea (_eb ,_cd ,0,0);_dcea (_eb ,_bb ,0,0);};func (_bcf *Encoder )decodeRow1D (_cag []byte ,_fab int )([]byte ,int ){var _ddc []byte ;_ecee :=true ;var _aagg int ;_aagg ,_fab =_adf (_cag ,_fab ,_ecee );for _aagg !=-1{_ddc =_bffe (_ddc ,_ecee ,_aagg );if _aagg < 64{if len (_ddc )>=_bcf .Columns {break ;};_ecee =!_ecee ;};_aagg ,_fab =_adf (_cag ,_fab ,_ecee );};return _ddc ,_fab ;};func _dfd (_cfe ,_cee []byte ,_dbd int ,_ace bool )([]byte ,int ,error ){_dfca :=_dbd ;var _gg int ;for _gg ,_dbd =_adf (_cfe ,_dbd ,_ace );_gg !=-1;_gg ,_dbd =_adf (_cfe ,_dbd ,_ace ){_cee =_bffe (_cee ,_ace ,_gg );if _gg < 64{break ;};};if _gg ==-1{return _cee ,_dfca ,_ad ;};return _cee ,_dbd ,nil ;};func (_ecga *Encoder )encodeG31D (_dcde [][]byte )[]byte {var _ddg []byte ;_deac :=0;for _ede :=range _dcde {if _ecga .Rows > 0&&!_ecga .EndOfBlock &&_ede ==_ecga .Rows {break ;};_dge ,_ada :=_eefc (_dcde [_ede ],_deac ,_ca );_ddg =_ecga .appendEncodedRow (_ddg ,_dge ,_deac );if _ecga .EncodedByteAlign {_ada =0;};_deac =_ada ;};if _ecga .EndOfBlock {_fbe ,_ :=_adb (_deac );_ddg =_ecga .appendEncodedRow (_ddg ,_fbe ,_deac );};return _ddg ;};func _ebb (_ga []byte ,_aag int )(bool ,int ,error ){_gef :=_aag ;var _cgf bool ;_cgf ,_aag =_fgd (_ga ,_aag );if _cgf {_cgf ,_aag =_fgd (_ga ,_aag );if _cgf {return true ,_aag ,nil ;}else {return false ,_gef ,_ac ;};};return false ,_gef ,nil ;};func _ggd (_fc []byte ,_fbg int )(uint16 ,int ,int ){_ece :=_fbg ;_fdc :=_fbg /8;_fbg %=8;if _fdc >=len (_fc ){return 0,16,_ece ;};_dcd :=byte (0xFF>>uint (_fbg ));_gdd :=uint16 ((_fc [_fdc ]&_dcd )<<uint (_fbg ))<<8;_dae :=8-_fbg ;_fdc ++;_fbg =0;if _fdc >=len (_fc ){return _gdd >>(16-uint (_dae )),16-_dae ,_ece +_dae ;};_gdd |=uint16 (_fc [_fdc ])<<(8-uint (_dae ));_dae +=8;_fdc ++;_fbg =0;if _fdc >=len (_fc ){return _gdd >>(16-uint (_dae )),16-_dae ,_ece +_dae ;};if _dae ==16{return _gdd ,0,_ece +_dae ;};_cc :=16-_dae ;_gdd |=uint16 (_fc [_fdc ]>>(8-uint (_cc )));return _gdd ,0,_ece +16;};func (_cgd *Encoder )appendEncodedRow (_cca ,_afdb []byte ,_gad int )[]byte {if len (_cca )> 0&&_gad !=0&&!_cgd .EncodedByteAlign {_cca [len (_cca )-1]=_cca [len (_cca )-1]|_afdb [0];_cca =append (_cca ,_afdb [1:]...);}else {_cca =append (_cca ,_afdb ...);};return _cca ;};func _aef (_fba ,_cfaf []byte ,_ega int ,_dgb bool )int {_gfa :=_cdc (_cfaf ,_ega );if _gfa < len (_cfaf )&&(_ega ==-1&&_cfaf [_gfa ]==_cac ||_ega >=0&&_ega < len (_fba )&&_fba [_ega ]==_cfaf [_gfa ]||_ega >=len (_fba )&&_dgb &&_cfaf [_gfa ]==_cac ||_ega >=len (_fba )&&!_dgb &&_cfaf [_gfa ]==_fdbd ){_gfa =_cdc (_cfaf ,_gfa );};return _gfa ;};func (_adg *Encoder )decodeG4 (_gbb []byte )([][]byte ,error ){_fb :=make ([]byte ,_adg .Columns );for _fgf :=range _fb {_fb [_fgf ]=_cac ;};_fdb :=make ([][]byte ,1);_fdb [0]=_fb ;var (_gbbg bool ;_dca error ;_bdf int ;);for (_bdf /8)< len (_gbb ){_gbbg ,_bdf ,_dca =_ebb (_gbb ,_bdf );if _dca !=nil {return nil ,_dca ;};if _gbbg {break ;};var (_bgc code ;_gee bool ;);_fde :=true ;var _fa []byte ;_bec :=-1;for _bec < _adg .Columns {_bgc ,_bdf ,_gee =_aec (_gbb ,_bdf );if !_gee {return nil ,_bag ;};switch _bgc {case _cg :_fa ,_bec =_ag (_fdb ,_fa ,_fde ,_bec );case _fe :_fa ,_bdf ,_bec ,_dca =_cba (_gbb ,_fa ,_bdf ,_fde ,_bec );if _dca !=nil {return nil ,_dca ;};case _gc :_fa ,_bec =_eba (_fdb ,_fa ,_fde ,_bec ,0);_fde =!_fde ;case _ce :_fa ,_bec =_eba (_fdb ,_fa ,_fde ,_bec ,1);_fde =!_fde ;case _ba :_fa ,_bec =_eba (_fdb ,_fa ,_fde ,_bec ,2);_fde =!_fde ;case _bgf :_fa ,_bec =_eba (_fdb ,_fa ,_fde ,_bec ,3);_fde =!_fde ;case _ec :_fa ,_bec =_eba (_fdb ,_fa ,_fde ,_bec ,-1);_fde =!_fde ;case _cd :_fa ,_bec =_eba (_fdb ,_fa ,_fde ,_bec ,-2);_fde =!_fde ;case _bb :_fa ,_bec =_eba (_fdb ,_fa ,_fde ,_bec ,-3);_fde =!_fde ;};if len (_fa )>=_adg .Columns {break ;};};if _adg .EncodedByteAlign &&_bdf %8!=0{_bdf +=8-_bdf %8;};_fdb =append (_fdb ,_fa );if _adg .Rows > 0&&!_adg .EndOfBlock &&len (_fdb )>=(_adg .Rows +1){break ;};};_fdb =_fdb [1:];return _fdb ,nil ;};func _cdc (_ffgb []byte ,_gdc int )int {if _gdc >=len (_ffgb ){return _gdc ;};if _gdc < -1{_gdc =-1;};var _ececd byte ;if _gdc > -1{_ececd =_ffgb [_gdc ];}else {_ececd =_cac ;};_bgef :=_gdc +1;for _bgef < len (_ffgb ){if _ffgb [_bgef ]!=_ececd {break ;};_bgef ++;};return _bgef ;};func _becd (_ddb int )([]byte ,int ){var _caf []byte ;for _afdd :=0;_afdd < 6;_afdd ++{_caf ,_ddb =_aca (_caf ,_ddb ,_bg );};return _caf ,_ddb %8;};func (_bf *Encoder )decodeG31D (_fg []byte )([][]byte ,error ){var _cf [][]byte ;var _ff int ;for (_ff /8)< len (_fg ){var _abc bool ;_abc ,_ff =_fgd (_fg ,_ff );if !_abc {if _bf .EndOfLine {return nil ,_dc ;};}else {for _bfd :=0;_bfd < 5;_bfd ++{_abc ,_ff =_fgd (_fg ,_ff );if !_abc {if _bfd ==0{break ;};return nil ,_gd ;};};if _abc {break ;};};var _gb []byte ;_gb ,_ff =_bf .decodeRow1D (_fg ,_ff );if _bf .EncodedByteAlign &&_ff %8!=0{_ff +=8-_ff %8;};_cf =append (_cf ,_gb );if _bf .Rows > 0&&!_bf .EndOfBlock &&len (_cf )>=_bf .Rows {break ;};};return _cf ,nil ;};var (_cac byte =1;_fdbd byte =0;);func _dga (_ceb []byte ,_dcg int )(bool ,int ){return _ddfg (_ceb ,_dcg ,_bg )};func _cba (_dac ,_dbg []byte ,_bff int ,_afg bool ,_bea int )([]byte ,int ,int ,error ){_eee :=_bff ;var _bfde error ;_dbg ,_bff ,_bfde =_dfd (_dac ,_dbg ,_bff ,_afg );if _bfde !=nil {return _dbg ,_eee ,_bea ,_bfde ;};_afg =!_afg ;_dbg ,_bff ,_bfde =_dfd (_dac ,_dbg ,_bff ,_afg );if _bfde !=nil {return _dbg ,_eee ,_bea ,_bfde ;};_bea =len (_dbg );return _dbg ,_bff ,_bea ,nil ;};func _eba (_aa [][]byte ,_fga []byte ,_dfc bool ,_fdf ,_ef int )([]byte ,int ){_ee :=_aef (_fga ,_aa [len (_aa )-1],_fdf ,_dfc );_fad :=_ee +_ef ;if _fdf ==-1{_fga =_bffe (_fga ,_dfc ,_fad -_fdf -1);}else {_fga =_bffe (_fga ,_dfc ,_fad -_fdf );};_fdf =_fad ;return _fga ,_fdf ;};func _gbfg (_ecec int )([]byte ,int ){var _eceec []byte ;for _gfc :=0;_gfc < 2;_gfc ++{_eceec ,_ecec =_aca (_eceec ,_ecec ,_ca );};return _eceec ,_ecec %8;};func _dfa (_bda []byte ,_faf int )(bool ,int ,error ){_cae :=_faf ;var _bfc =false ;for _edd :=0;_edd < 6;_edd ++{_bfc ,_faf =_dga (_bda ,_faf );if !_bfc {if _edd > 1{return false ,_cae ,_bdd ;}else {_faf =_cae ;break ;};};};return _bfc ,_faf ,nil ;};func _aca (_dfgfd []byte ,_gbfgd int ,_fcf code )([]byte ,int ){_ceed :=0;for _ceed < _fcf .BitsWritten {_bgeg :=_gbfgd /8;_adfc :=_gbfgd %8;if _bgeg >=len (_dfgfd ){_dfgfd =append (_dfgfd ,0);};_dfde :=8-_adfc ;_cgb :=_fcf .BitsWritten -_ceed ;if _dfde > _cgb {_dfde =_cgb ;};if _ceed < 8{_dfgfd [_bgeg ]=_dfgfd [_bgeg ]|byte (_fcf .Code >>uint (8+_adfc -_ceed ))&_de [8-_dfde -_adfc ];}else {_dfgfd [_bgeg ]=_dfgfd [_bgeg ]|(byte (_fcf .Code <<uint (_ceed -8))&_de [8-_dfde ])>>uint (_adfc );};_gbfgd +=_dfde ;_ceed +=_dfde ;};return _dfgfd ,_gbfgd ;};func _fbd (_dfdf ,_egc []byte ,_gfb int )int {_cdf :=_cdc (_egc ,_gfb );if _cdf < len (_egc )&&(_gfb ==-1&&_egc [_cdf ]==_cac ||_gfb >=0&&_gfb < len (_dfdf )&&_dfdf [_gfb ]==_egc [_cdf ]||_gfb >=len (_dfdf )&&_dfdf [_gfb -1]!=_egc [_cdf ]){_cdf =_cdc (_egc ,_cdf );};return _cdf ;};var (_ac =_b .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_bdd =_b .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_ad =_b .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_dc =_b .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_gd =_b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_bag =_b .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _edaec (_deb []byte ,_dbgd int ,_afbf int ,_gge bool )([]byte ,int ){var (_bdaa code ;_cfdf bool ;);for !_cfdf {_bdaa ,_afbf ,_cfdf =_bef (_afbf ,_gge );_deb ,_dbgd =_aca (_deb ,_dbgd ,_bdaa );};return _deb ,_dbgd ;};type code struct{Code uint16 ;BitsWritten int ;};func _dcea (_cfea *decodingTreeNode ,_ggb code ,_ggda int ,_ced int ){_gbg :=_cbd (_ggb .Code ,_ggda );_ggda ++;if _gbg ==1{if _cfea .Right ==nil {_cfea .Right =&decodingTreeNode {Val :_gbg };};if _ggda ==_ggb .BitsWritten {_cfea .Right .RunLen =&_ced ;_cfea .Right .Code =&_ggb ;}else {_dcea (_cfea .Right ,_ggb ,_ggda ,_ced );};}else {if _cfea .Left ==nil {_cfea .Left =&decodingTreeNode {Val :_gbg };};if _ggda ==_ggb .BitsWritten {_cfea .Left .RunLen =&_ced ;_cfea .Left .Code =&_ggb ;}else {_dcea (_cfea .Left ,_ggb ,_ggda ,_ced );};};};func _ddfg (_gdb []byte ,_defa int ,_gda code )(bool ,int ){_bge :=_defa ;var (_ffbc uint16 ;_ebe int ;);_ffbc ,_ebe ,_defa =_ggd (_gdb ,_defa );if _ebe > 3{return false ,_bge ;};_ffbc >>=uint (3-_ebe );_ffbc <<=3;if _ffbc !=_gda .Code {return false ,_bge ;}else {return true ,_defa -3+_ebe ;};};func _ddgde (_fbdf ,_dfbc int )code {var _aaf code ;switch _dfbc -_fbdf {case -1:_aaf =_ce ;case -2:_aaf =_ba ;case -3:_aaf =_bgf ;case 0:_aaf =_gc ;case 1:_aaf =_ec ;case 2:_aaf =_cd ;case 3:_aaf =_bb ;};return _aaf ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _bef (_eg int ,_gaa bool )(code ,int ,bool ){if _eg < 64{if _gaa {return _be [_eg ],0,true ;}else {return _f [_eg ],0,true ;};}else {_fceb :=_eg /64;if _fceb > 40{return _g [2560],_eg -2560,false ;};if _fceb > 27{return _g [_fceb *64],_eg -_fceb *64,false ;};if _gaa {return _a [_fceb *64],_eg -_fceb *64,false ;}else {return _e [_fceb *64],_eg -_fceb *64,false ;};};};func _aec (_ffbe []byte ,_eec int )(code ,int ,bool ){var (_bbg uint16 ;_gde int ;_bac int ;);_bac =_eec ;_bbg ,_gde ,_eec =_ggd (_ffbe ,_eec );_dgg ,_dee :=_afac (_bbg ,_gde );if !_dee {return code {},_bac ,false ;};return _dgg ,_bac +_dgg .BitsWritten ,true ;};var (_f map[int ]code ;_be map[int ]code ;_e map[int ]code ;_a map[int ]code ;_g map[int ]code ;_de map[int ]byte ;_ca =code {Code :1<<4,BitsWritten :12};_bg =code {Code :3<<3,BitsWritten :13};_bc =code {Code :2<<3,BitsWritten :13};_cg =code {Code :1<<12,BitsWritten :4};_fe =code {Code :1<<13,BitsWritten :3};_gc =code {Code :1<<15,BitsWritten :1};_ce =code {Code :3<<13,BitsWritten :3};_ba =code {Code :3<<10,BitsWritten :6};_bgf =code {Code :3<<9,BitsWritten :7};_ec =code {Code :2<<13,BitsWritten :3};_cd =code {Code :2<<10,BitsWritten :6};_bb =code {Code :2<<9,BitsWritten :7};);func _adb (_edaeg int )([]byte ,int ){var _cfa []byte ;for _cdd :=0;_cdd < 6;_cdd ++{_cfa ,_edaeg =_aca (_cfa ,_edaeg ,_ca );};return _cfa ,_edaeg %8;};func _gga (_ffe uint16 ,_afae int ,_gbc bool )(int ,code ){var _ecg *int ;var _ead *code ;if _gbc {_ecg ,_ead =_efc (_ae ,_ffe ,_afae );}else {_ecg ,_ead =_efc (_fd ,_ffe ,_afae );};if _ecg ==nil {return -1,code {};};return *_ecg ,*_ead ;};func (_gf *Encoder )Encode (pixels [][]byte )[]byte {if _gf .BlackIs1 {_cac =0;_fdbd =1;}else {_cac =1;_fdbd =0;};if _gf .K ==0{return _gf .encodeG31D (pixels );};if _gf .K > 0{return _gf .encodeG32D (pixels );};if _gf .K < 0{return _gf .encodeG4 (pixels );};return nil ;};func (_fdd *Encoder )Decode (encoded []byte )([][]byte ,error ){if _fdd .BlackIs1 {_cac =0;_fdbd =1;}else {_cac =1;_fdbd =0;};if _fdd .K ==0{return _fdd .decodeG31D (encoded );};if _fdd .K > 0{return _fdd .decodeG32D (encoded );};if _fdd .K < 4{return _fdd .decodeG4 (encoded );};return nil ,nil ;};func (_dcac *Encoder )encodeG32D (_ade [][]byte )[]byte {var _ebc []byte ;var _eef int ;for _fabba :=0;_fabba < len (_ade );_fabba +=_dcac .K {if _dcac .Rows > 0&&!_dcac .EndOfBlock &&_fabba ==_dcac .Rows {break ;};_eeef ,_bba :=_eefc (_ade [_fabba ],_eef ,_bg );_ebc =_dcac .appendEncodedRow (_ebc ,_eeef ,_eef );if _dcac .EncodedByteAlign {_bba =0;};_eef =_bba ;for _bab :=_fabba +1;_bab < (_fabba +_dcac .K )&&_bab < len (_ade );_bab ++{if _dcac .Rows > 0&&!_dcac .EndOfBlock &&_bab ==_dcac .Rows {break ;};_caeg ,_gfd :=_aca (nil ,_eef ,_bc );var _aee ,_edf ,_eabf int ;_ded :=-1;for _ded < len (_ade [_bab ]){_aee =_cdc (_ade [_bab ],_ded );_edf =_fbd (_ade [_bab ],_ade [_bab -1],_ded );_eabf =_cdc (_ade [_bab -1],_edf );if _eabf < _aee {_caeg ,_gfd =_fcc (_caeg ,_gfd );_ded =_eabf ;}else {if _c .Abs (float64 (_edf -_aee ))> 3{_caeg ,_gfd ,_ded =_adeg (_ade [_bab ],_caeg ,_gfd ,_ded ,_aee );}else {_caeg ,_gfd =_cbaa (_caeg ,_gfd ,_aee ,_edf );_ded =_aee ;};};};_ebc =_dcac .appendEncodedRow (_ebc ,_caeg ,_eef );if _dcac .EncodedByteAlign {_gfd =0;};_eef =_gfd %8;};};if _dcac .EndOfBlock {_ceg ,_ :=_becd (_eef );_ebc =_dcac .appendEncodedRow (_ebc ,_ceg ,_eef );};return _ebc ;};func _afc (_dfb []byte ,_gea int )(bool ,int ){return _ddfg (_dfb ,_gea ,_bc )};func _ag (_cdab [][]byte ,_ffg []byte ,_afb bool ,_efe int )([]byte ,int ){_cfd :=_aef (_ffg ,_cdab [len (_cdab )-1],_efe ,_afb );_cgc :=_cdc (_cdab [len (_cdab )-1],_cfd );if _efe ==-1{_ffg =_bffe (_ffg ,_afb ,_cgc -_efe -1);}else {_ffg =_bffe (_ffg ,_afb ,_cgc -_efe );};_efe =_cgc ;return _ffg ,_efe ;};func _afac (_fed uint16 ,_acb int )(code ,bool ){_ ,_bad :=_efc (_eb ,_fed ,_acb );if _bad ==nil {return code {},false ;};return *_bad ,true ;};func _adeg (_acd ,_cdff []byte ,_bbae ,_ggab ,_bdfb int )([]byte ,int ,int ){_dda :=_cdc (_acd ,_bdfb );_gdac :=_ggab >=0&&_acd [_ggab ]==_cac ||_ggab ==-1;_cdff ,_bbae =_aca (_cdff ,_bbae ,_fe );var _aab int ;if _ggab > -1{_aab =_bdfb -_ggab ;}else {_aab =_bdfb -_ggab -1;};_cdff ,_bbae =_edaec (_cdff ,_bbae ,_aab ,_gdac );_gdac =!_gdac ;_egcd :=_dda -_bdfb ;_cdff ,_bbae =_edaec (_cdff ,_bbae ,_egcd ,_gdac );_ggab =_dda ;return _cdff ,_bbae ,_ggab ;};func _dad (_bgg [][]byte )[][]byte {_cga :=make ([]byte ,len (_bgg [0]));for _fcef :=range _cga {_cga [_fcef ]=_cac ;};_bgg =append (_bgg ,[]byte {});for _fec :=len (_bgg )-1;_fec > 0;_fec --{_bgg [_fec ]=_bgg [_fec -1];};_bgg [0]=_cga ;return _bgg ;};func _bffe (_dacf []byte ,_fca bool ,_daf int )[]byte {if _daf < 0{return _dacf ;};_bdde :=make ([]byte ,_daf );if _fca {for _dfg :=0;_dfg < len (_bdde );_dfg ++{_bdde [_dfg ]=_cac ;};}else {for _dec :=0;_dec < len (_bdde );_dec ++{_bdde [_dec ]=_fdbd ;};};_dacf =append (_dacf ,_bdde ...);return _dacf ;};func _fgd (_bbgd []byte ,_eda int )(bool ,int ){_eeb :=_eda ;var (_fabb uint16 ;_beg int ;);_fabb ,_beg ,_eda =_ggd (_bbgd ,_eda );if _beg > 4{return false ,_eeb ;};_fabb >>=uint (4-_beg );_fabb <<=4;if _fabb !=_ca .Code {return false ,_eeb ;}else {return true ,_eda -4+_beg ;};};func _cbd (_fee uint16 ,_dd int )byte {if _dd < 8{_fee >>=8;};_dd %=8;_afa :=byte (0x01<<(7-uint (_dd )));return (byte (_fee )&_afa )>>(7-uint (_dd ));};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _adf (_bfb []byte ,_def int ,_cfeb bool )(int ,int ){var (_cbg uint16 ;_ddf int ;_afd int ;);_afd =_def ;_cbg ,_ddf ,_def =_ggd (_bfb ,_def );_bbd ,_cef :=_gga (_cbg ,_ddf ,_cfeb );if _bbd ==-1{return -1,_afd ;};return _bbd ,_afd +_cef .BitsWritten ;};func _eefc (_babc []byte ,_ffgc int ,_ddgd code )([]byte ,int ){_ecc :=true ;var _ceab []byte ;_ceab ,_ffgc =_aca (nil ,_ffgc ,_ddgd );_cedf :=0;var _fcdb int ;for _cedf < len (_babc ){_fcdb ,_cedf =_ebae (_babc ,_ecc ,_cedf );_ceab ,_ffgc =_edaec (_ceab ,_ffgc ,_fcdb ,_ecc );_ecc =!_ecc ;};return _ceab ,_ffgc %8;};var (_ae =&decodingTreeNode {Val :255};_fd =&decodingTreeNode {Val :255};_eb =&decodingTreeNode {Val :255};);func _ebae (_gca []byte ,_baf bool ,_feg int )(int ,int ){_cge :=0;for _feg < len (_gca ){if _baf {if _gca [_feg ]!=_cac {break ;};}else {if _gca [_feg ]!=_fdbd {break ;};};_cge ++;_feg ++;};return _cge ,_feg ;};func (_db *Encoder )decodeG32D (_ea []byte )([][]byte ,error ){var (_dce [][]byte ;_df int ;_bddf error ;);_dbe :for (_df /8)< len (_ea ){var _dbc bool ;_dbc ,_df ,_bddf =_dfa (_ea ,_df );if _bddf !=nil {return nil ,_bddf ;};if _dbc {break ;};_dbc ,_df =_dga (_ea ,_df );if !_dbc {if _db .EndOfLine {return nil ,_dc ;};};var _ffb []byte ;_ffb ,_df =_db .decodeRow1D (_ea ,_df );if _db .EncodedByteAlign &&_df %8!=0{_df +=8-_df %8;};if _ffb !=nil {_dce =append (_dce ,_ffb );};if _db .Rows > 0&&!_db .EndOfBlock &&len (_dce )>=_db .Rows {break ;};for _bbc :=1;_bbc < _db .K &&(_df /8)< len (_ea );_bbc ++{_dbc ,_df =_afc (_ea ,_df );if !_dbc {_dbc ,_df ,_bddf =_dfa (_ea ,_df );if _bddf !=nil {return nil ,_bddf ;};if _dbc {break _dbe ;}else {if _db .EndOfLine {return nil ,_dc ;};};};var (_cdg code ;_da bool ;);_cda :=true ;var _eab []byte ;_dg :=-1;for _cdg ,_df ,_da =_aec (_ea ,_df );_da ;_cdg ,_df ,_da =_aec (_ea ,_df ){switch _cdg {case _cg :_eab ,_dg =_ag (_dce ,_eab ,_cda ,_dg );case _fe :_eab ,_df ,_dg ,_bddf =_cba (_ea ,_eab ,_df ,_cda ,_dg );if _bddf !=nil {return nil ,_bddf ;};case _gc :_eab ,_dg =_eba (_dce ,_eab ,_cda ,_dg ,0);_cda =!_cda ;case _ce :_eab ,_dg =_eba (_dce ,_eab ,_cda ,_dg ,1);_cda =!_cda ;case _ba :_eab ,_dg =_eba (_dce ,_eab ,_cda ,_dg ,2);_cda =!_cda ;case _bgf :_eab ,_dg =_eba (_dce ,_eab ,_cda ,_dg ,3);_cda =!_cda ;case _ec :_eab ,_dg =_eba (_dce ,_eab ,_cda ,_dg ,-1);_cda =!_cda ;case _cd :_eab ,_dg =_eba (_dce ,_eab ,_cda ,_dg ,-2);_cda =!_cda ;case _bb :_eab ,_dg =_eba (_dce ,_eab ,_cda ,_dg ,-3);_cda =!_cda ;};if len (_eab )>=_db .Columns {break ;};};if _db .EncodedByteAlign &&_df %8!=0{_df +=8-_df %8;};if _eab !=nil {_dce =append (_dce ,_eab );};if _db .Rows > 0&&!_db .EndOfBlock &&len (_dce )>=_db .Rows {break _dbe ;};};};return _dce ,nil ;};