//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_c "errors";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_f "io";_e "math";);var (_bebd byte =1;_cbbf byte =0;);func init (){_ag =&treeNode {_fba :true ,_ggba :_bd };_be =&treeNode {_ggba :_d ,_ebgd :_ag };_be ._bdag =_be ;
_g =&tree {_ggf :&treeNode {}};if _ec :=_g .fillWithNode (12,0,_be );_ec !=nil {panic (_ec .Error ());};if _gg :=_g .fillWithNode (12,1,_ag );_gg !=nil {panic (_gg .Error ());};_fe =&tree {_ggf :&treeNode {}};for _bg :=0;_bg < len (_ba );_bg ++{for _bc :=0;
_bc < len (_ba [_bg ]);_bc ++{if _gd :=_fe .fill (_bg +2,int (_ba [_bg ][_bc ]),int (_cd [_bg ][_bc ]));_gd !=nil {panic (_gd .Error ());};};};if _fd :=_fe .fillWithNode (12,0,_be );_fd !=nil {panic (_fd .Error ());};if _fdc :=_fe .fillWithNode (12,1,_ag );
_fdc !=nil {panic (_fdc .Error ());};_eb =&tree {_ggf :&treeNode {}};for _ac :=0;_ac < len (_cfe );_ac ++{for _cf :=0;_cf < len (_cfe [_ac ]);_cf ++{if _fg :=_eb .fill (_ac +4,int (_cfe [_ac ][_cf ]),int (_ae [_ac ][_cf ]));_fg !=nil {panic (_fg .Error ());
};};};if _agb :=_eb .fillWithNode (12,0,_be );_agb !=nil {panic (_agb .Error ());};if _fdb :=_eb .fillWithNode (12,1,_ag );_fdb !=nil {panic (_fdb .Error ());};_ea =&tree {_ggf :&treeNode {}};if _bf :=_ea .fill (4,1,_ab );_bf !=nil {panic (_bf .Error ());
};if _fdd :=_ea .fill (3,1,_ff );_fdd !=nil {panic (_fdd .Error ());};if _fec :=_ea .fill (1,1,0);_fec !=nil {panic (_fec .Error ());};if _dg :=_ea .fill (3,3,1);_dg !=nil {panic (_dg .Error ());};if _ffe :=_ea .fill (6,3,2);_ffe !=nil {panic (_ffe .Error ());
};if _gb :=_ea .fill (7,3,3);_gb !=nil {panic (_gb .Error ());};if _ee :=_ea .fill (3,2,-1);_ee !=nil {panic (_ee .Error ());};if _ebd :=_ea .fill (6,2,-2);_ebd !=nil {panic (_ebd .Error ());};if _ge :=_ea .fill (7,2,-3);_ge !=nil {panic (_ge .Error ());
};};func (_fbb *Decoder )looseFetchEOL ()(bool ,error ){_ebg ,_ceb :=_fbb ._fbd .ReadBits (12);if _ceb !=nil {return false ,_ceb ;};switch _ebg {case 0x1:return true ,nil ;case 0x0:for {_egcd ,_aaae :=_fbb ._fbd .ReadBool ();if _aaae !=nil {return false ,_aaae ;
};if _egcd {return true ,nil ;};};default:return false ,nil ;};};var (_bgb =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_bdd =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_da *Decoder )getNextChangingElement (_daf int ,_aac bool )int {_fcb :=0;if !_aac {_fcb =1;};_eege :=int (uint32 (_da ._edf )&0xFFFFFFFE)+_fcb ;if _eege > 2{_eege -=2;};if _daf ==0{return _eege ;};for _ggcf :=_eege ;_ggcf < _da ._aec ;_ggcf +=2{if _daf < _da ._gdc [_ggcf ]{_da ._edf =_ggcf ;
return _ggcf ;};};return -1;};func (_aca *Decoder )decodeRun (_gdd *tree )(int ,error ){var _fddb int ;_cdd :=_gdd ._ggf ;for {_agc ,_gbcf :=_aca ._fbd .ReadBool ();if _gbcf !=nil {return 0,_gbcf ;};_cdd =_cdd .walk (_agc );if _cdd ==nil {return 0,_c .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _cdd ._fba {_fddb +=_cdd ._ggba ;switch {case _cdd ._ggba >=64:_cdd =_gdd ._ggf ;case _cdd ._ggba >=0:return _fddb ,nil ;default:return _aca ._bb ,nil ;};};};};type Decoder struct{_bb int ;_cbb int ;_dd int ;_gfg []byte ;_ega int ;_bcf bool ;_ggd bool ;
_ef bool ;_edcb bool ;_fgb bool ;_df bool ;_fed bool ;_bec int ;_fgd int ;_gdc []int ;_fff []int ;_aec int ;_ege int ;_fb int ;_edf int ;_fbd *_b .Reader ;_gdca tiffType ;_bfe error ;};func (_cgc *tree )fillWithNode (_bfdb ,_ebef int ,_geed *treeNode )error {_cff :=_cgc ._ggf ;
for _cfec :=0;_cfec < _bfdb ;_cfec ++{_efaf :=uint (_bfdb -1-_cfec );_dcad :=((_ebef >>_efaf )&1)!=0;_acgc :=_cff .walk (_dcad );if _acgc !=nil {if _acgc ._fba {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_cff =_acgc ;continue ;};if _cfec ==_bfdb -1{_acgc =_geed ;}else {_acgc =&treeNode {};};if _ebef ==0{_acgc ._gcc =true ;};_cff .set (_dcad ,_acgc );_cff =_acgc ;};return nil ;};func init (){_eeb =make (map[int ]code );_eeb [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_eeb [1]=code {Code :2<<(5+8),BitsWritten :3};_eeb [2]=code {Code :3<<(6+8),BitsWritten :2};_eeb [3]=code {Code :2<<(6+8),BitsWritten :2};_eeb [4]=code {Code :3<<(5+8),BitsWritten :3};_eeb [5]=code {Code :3<<(4+8),BitsWritten :4};_eeb [6]=code {Code :2<<(4+8),BitsWritten :4};
_eeb [7]=code {Code :3<<(3+8),BitsWritten :5};_eeb [8]=code {Code :5<<(2+8),BitsWritten :6};_eeb [9]=code {Code :4<<(2+8),BitsWritten :6};_eeb [10]=code {Code :4<<(1+8),BitsWritten :7};_eeb [11]=code {Code :5<<(1+8),BitsWritten :7};_eeb [12]=code {Code :7<<(1+8),BitsWritten :7};
_eeb [13]=code {Code :4<<8,BitsWritten :8};_eeb [14]=code {Code :7<<8,BitsWritten :8};_eeb [15]=code {Code :12<<8,BitsWritten :9};_eeb [16]=code {Code :5<<8|3<<6,BitsWritten :10};_eeb [17]=code {Code :6<<8,BitsWritten :10};_eeb [18]=code {Code :2<<8,BitsWritten :10};
_eeb [19]=code {Code :12<<8|7<<5,BitsWritten :11};_eeb [20]=code {Code :13<<8,BitsWritten :11};_eeb [21]=code {Code :13<<8|4<<5,BitsWritten :11};_eeb [22]=code {Code :6<<8|7<<5,BitsWritten :11};_eeb [23]=code {Code :5<<8,BitsWritten :11};_eeb [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_eeb [25]=code {Code :3<<8,BitsWritten :11};_eeb [26]=code {Code :12<<8|10<<4,BitsWritten :12};_eeb [27]=code {Code :12<<8|11<<4,BitsWritten :12};_eeb [28]=code {Code :12<<8|12<<4,BitsWritten :12};_eeb [29]=code {Code :12<<8|13<<4,BitsWritten :12};_eeb [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_eeb [31]=code {Code :6<<8|9<<4,BitsWritten :12};_eeb [32]=code {Code :6<<8|10<<4,BitsWritten :12};_eeb [33]=code {Code :6<<8|11<<4,BitsWritten :12};_eeb [34]=code {Code :13<<8|2<<4,BitsWritten :12};_eeb [35]=code {Code :13<<8|3<<4,BitsWritten :12};_eeb [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_eeb [37]=code {Code :13<<8|5<<4,BitsWritten :12};_eeb [38]=code {Code :13<<8|6<<4,BitsWritten :12};_eeb [39]=code {Code :13<<8|7<<4,BitsWritten :12};_eeb [40]=code {Code :6<<8|12<<4,BitsWritten :12};_eeb [41]=code {Code :6<<8|13<<4,BitsWritten :12};_eeb [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_eeb [43]=code {Code :13<<8|11<<4,BitsWritten :12};_eeb [44]=code {Code :5<<8|4<<4,BitsWritten :12};_eeb [45]=code {Code :5<<8|5<<4,BitsWritten :12};_eeb [46]=code {Code :5<<8|6<<4,BitsWritten :12};_eeb [47]=code {Code :5<<8|7<<4,BitsWritten :12};_eeb [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_eeb [49]=code {Code :6<<8|5<<4,BitsWritten :12};_eeb [50]=code {Code :5<<8|2<<4,BitsWritten :12};_eeb [51]=code {Code :5<<8|3<<4,BitsWritten :12};_eeb [52]=code {Code :2<<8|4<<4,BitsWritten :12};_eeb [53]=code {Code :3<<8|7<<4,BitsWritten :12};_eeb [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_eeb [55]=code {Code :2<<8|7<<4,BitsWritten :12};_eeb [56]=code {Code :2<<8|8<<4,BitsWritten :12};_eeb [57]=code {Code :5<<8|8<<4,BitsWritten :12};_eeb [58]=code {Code :5<<8|9<<4,BitsWritten :12};_eeb [59]=code {Code :2<<8|11<<4,BitsWritten :12};_eeb [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_eeb [61]=code {Code :5<<8|10<<4,BitsWritten :12};_eeb [62]=code {Code :6<<8|6<<4,BitsWritten :12};_eeb [63]=code {Code :6<<8|7<<4,BitsWritten :12};_eeg =make (map[int ]code );_eeg [0]=code {Code :53<<8,BitsWritten :8};_eeg [1]=code {Code :7<<(2+8),BitsWritten :6};
_eeg [2]=code {Code :7<<(4+8),BitsWritten :4};_eeg [3]=code {Code :8<<(4+8),BitsWritten :4};_eeg [4]=code {Code :11<<(4+8),BitsWritten :4};_eeg [5]=code {Code :12<<(4+8),BitsWritten :4};_eeg [6]=code {Code :14<<(4+8),BitsWritten :4};_eeg [7]=code {Code :15<<(4+8),BitsWritten :4};
_eeg [8]=code {Code :19<<(3+8),BitsWritten :5};_eeg [9]=code {Code :20<<(3+8),BitsWritten :5};_eeg [10]=code {Code :7<<(3+8),BitsWritten :5};_eeg [11]=code {Code :8<<(3+8),BitsWritten :5};_eeg [12]=code {Code :8<<(2+8),BitsWritten :6};_eeg [13]=code {Code :3<<(2+8),BitsWritten :6};
_eeg [14]=code {Code :52<<(2+8),BitsWritten :6};_eeg [15]=code {Code :53<<(2+8),BitsWritten :6};_eeg [16]=code {Code :42<<(2+8),BitsWritten :6};_eeg [17]=code {Code :43<<(2+8),BitsWritten :6};_eeg [18]=code {Code :39<<(1+8),BitsWritten :7};_eeg [19]=code {Code :12<<(1+8),BitsWritten :7};
_eeg [20]=code {Code :8<<(1+8),BitsWritten :7};_eeg [21]=code {Code :23<<(1+8),BitsWritten :7};_eeg [22]=code {Code :3<<(1+8),BitsWritten :7};_eeg [23]=code {Code :4<<(1+8),BitsWritten :7};_eeg [24]=code {Code :40<<(1+8),BitsWritten :7};_eeg [25]=code {Code :43<<(1+8),BitsWritten :7};
_eeg [26]=code {Code :19<<(1+8),BitsWritten :7};_eeg [27]=code {Code :36<<(1+8),BitsWritten :7};_eeg [28]=code {Code :24<<(1+8),BitsWritten :7};_eeg [29]=code {Code :2<<8,BitsWritten :8};_eeg [30]=code {Code :3<<8,BitsWritten :8};_eeg [31]=code {Code :26<<8,BitsWritten :8};
_eeg [32]=code {Code :27<<8,BitsWritten :8};_eeg [33]=code {Code :18<<8,BitsWritten :8};_eeg [34]=code {Code :19<<8,BitsWritten :8};_eeg [35]=code {Code :20<<8,BitsWritten :8};_eeg [36]=code {Code :21<<8,BitsWritten :8};_eeg [37]=code {Code :22<<8,BitsWritten :8};
_eeg [38]=code {Code :23<<8,BitsWritten :8};_eeg [39]=code {Code :40<<8,BitsWritten :8};_eeg [40]=code {Code :41<<8,BitsWritten :8};_eeg [41]=code {Code :42<<8,BitsWritten :8};_eeg [42]=code {Code :43<<8,BitsWritten :8};_eeg [43]=code {Code :44<<8,BitsWritten :8};
_eeg [44]=code {Code :45<<8,BitsWritten :8};_eeg [45]=code {Code :4<<8,BitsWritten :8};_eeg [46]=code {Code :5<<8,BitsWritten :8};_eeg [47]=code {Code :10<<8,BitsWritten :8};_eeg [48]=code {Code :11<<8,BitsWritten :8};_eeg [49]=code {Code :82<<8,BitsWritten :8};
_eeg [50]=code {Code :83<<8,BitsWritten :8};_eeg [51]=code {Code :84<<8,BitsWritten :8};_eeg [52]=code {Code :85<<8,BitsWritten :8};_eeg [53]=code {Code :36<<8,BitsWritten :8};_eeg [54]=code {Code :37<<8,BitsWritten :8};_eeg [55]=code {Code :88<<8,BitsWritten :8};
_eeg [56]=code {Code :89<<8,BitsWritten :8};_eeg [57]=code {Code :90<<8,BitsWritten :8};_eeg [58]=code {Code :91<<8,BitsWritten :8};_eeg [59]=code {Code :74<<8,BitsWritten :8};_eeg [60]=code {Code :75<<8,BitsWritten :8};_eeg [61]=code {Code :50<<8,BitsWritten :8};
_eeg [62]=code {Code :51<<8,BitsWritten :8};_eeg [63]=code {Code :52<<8,BitsWritten :8};_ed =make (map[int ]code );_ed [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ed [128]=code {Code :12<<8|8<<4,BitsWritten :12};_ed [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_ed [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ed [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ed [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ed [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ed [512]=code {Code :3<<8|12<<3,BitsWritten :13};_ed [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_ed [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ed [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ed [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ed [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ed [896]=code {Code :3<<8|18<<3,BitsWritten :13};_ed [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_ed [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ed [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ed [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ed [1216]=code {Code :119<<3,BitsWritten :13};_ed [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_ed [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_ed [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ed [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ed [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ed [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_ed [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_ed [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_bca =make (map[int ]code );_bca [64]=code {Code :27<<(3+8),BitsWritten :5};_bca [128]=code {Code :18<<(3+8),BitsWritten :5};_bca [192]=code {Code :23<<(2+8),BitsWritten :6};_bca [256]=code {Code :55<<(1+8),BitsWritten :7};
_bca [320]=code {Code :54<<8,BitsWritten :8};_bca [384]=code {Code :55<<8,BitsWritten :8};_bca [448]=code {Code :100<<8,BitsWritten :8};_bca [512]=code {Code :101<<8,BitsWritten :8};_bca [576]=code {Code :104<<8,BitsWritten :8};_bca [640]=code {Code :103<<8,BitsWritten :8};
_bca [704]=code {Code :102<<8,BitsWritten :9};_bca [768]=code {Code :102<<8|1<<7,BitsWritten :9};_bca [832]=code {Code :105<<8,BitsWritten :9};_bca [896]=code {Code :105<<8|1<<7,BitsWritten :9};_bca [960]=code {Code :106<<8,BitsWritten :9};_bca [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_bca [1088]=code {Code :107<<8,BitsWritten :9};_bca [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_bca [1216]=code {Code :108<<8,BitsWritten :9};_bca [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_bca [1344]=code {Code :109<<8,BitsWritten :9};_bca [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_bca [1472]=code {Code :76<<8,BitsWritten :9};_bca [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_bca [1600]=code {Code :77<<8,BitsWritten :9};_bca [1664]=code {Code :24<<(2+8),BitsWritten :6};_bca [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_cg =make (map[int ]code );
_cg [1792]=code {Code :1<<8,BitsWritten :11};_cg [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_cg [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_cg [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_cg [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_cg [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_cg [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_cg [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_cg [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_cg [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_cg [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_cg [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_cg [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ecd =make (map[int ]byte );_ecd [0]=0xFF;_ecd [1]=0xFE;_ecd [2]=0xFC;_ecd [3]=0xF8;_ecd [4]=0xF0;_ecd [5]=0xE0;_ecd [6]=0xC0;_ecd [7]=0x80;_ecd [8]=0x00;
};func _ffa (_ggcff ,_baa []byte ,_efd int ,_agef bool )int {_ace :=_bdaa (_baa ,_efd );if _ace < len (_baa )&&(_efd ==-1&&_baa [_ace ]==_bebd ||_efd >=0&&_efd < len (_ggcff )&&_ggcff [_efd ]==_baa [_ace ]||_efd >=len (_ggcff )&&_agef &&_baa [_ace ]==_bebd ||_efd >=len (_ggcff )&&!_agef &&_baa [_ace ]==_cbbf ){_ace =_bdaa (_baa ,_ace );
};return _ace ;};func (_gc *Decoder )Read (in []byte )(int ,error ){if _gc ._bfe !=nil {return 0,_gc ._bfe ;};_ddd :=len (in );var (_af int ;_fea int ;);for _ddd !=0{if _gc ._fgd >=_gc ._bec {if _bcac :=_gc .fetch ();_bcac !=nil {_gc ._bfe =_bcac ;return 0,_bcac ;
};};if _gc ._bec ==-1{return _af ,_f .EOF ;};switch {case _ddd <=_gc ._bec -_gc ._fgd :_ecaa :=_gc ._gfg [_gc ._fgd :_gc ._fgd +_ddd ];for _ ,_eef :=range _ecaa {if !_gc ._edcb {_eef =^_eef ;};in [_fea ]=_eef ;_fea ++;};_af +=len (_ecaa );_gc ._fgd +=len (_ecaa );
return _af ,nil ;default:_de :=_gc ._gfg [_gc ._fgd :];for _ ,_cge :=range _de {if !_gc ._edcb {_cge =^_cge ;};in [_fea ]=_cge ;_fea ++;};_af +=len (_de );_gc ._fgd +=len (_de );_ddd -=len (_de );};};return _af ,nil ;};func (_gde *Decoder )decodeG32D ()error {_gde ._aec =_gde ._ege ;
_gde ._fff ,_gde ._gdc =_gde ._gdc ,_gde ._fff ;_aad :=true ;var (_cdf bool ;_aaa int ;_bfc error ;);_gde ._ege =0;_eebg :for _aaa < _gde ._bb {_egd :=_ea ._ggf ;for {_cdf ,_bfc =_gde ._fbd .ReadBool ();if _bfc !=nil {return _bfc ;};_egd =_egd .walk (_cdf );
if _egd ==nil {continue _eebg ;};if !_egd ._fba {continue ;};switch _egd ._ggba {case _ff :var _egf int ;if _aad {_egf ,_bfc =_gde .decodeRun (_eb );}else {_egf ,_bfc =_gde .decodeRun (_fe );};if _bfc !=nil {return _bfc ;};_aaa +=_egf ;_gde ._fff [_gde ._ege ]=_aaa ;
_gde ._ege ++;if _aad {_egf ,_bfc =_gde .decodeRun (_fe );}else {_egf ,_bfc =_gde .decodeRun (_eb );};if _bfc !=nil {return _bfc ;};_aaa +=_egf ;_gde ._fff [_gde ._ege ]=_aaa ;_gde ._ege ++;case _ab :_gee :=_gde .getNextChangingElement (_aaa ,_aad )+1;
if _gee >=_gde ._aec {_aaa =_gde ._bb ;}else {_aaa =_gde ._gdc [_gee ];};default:_ecb :=_gde .getNextChangingElement (_aaa ,_aad );if _ecb >=_gde ._aec ||_ecb ==-1{_aaa =_gde ._bb +_egd ._ggba ;}else {_aaa =_gde ._gdc [_ecb ]+_egd ._ggba ;};_gde ._fff [_gde ._ege ]=_aaa ;
_gde ._ege ++;_aad =!_aad ;};continue _eebg ;};};return nil ;};func (_gbc *Decoder )fetch ()error {if _gbc ._bec ==-1{return nil ;};if _gbc ._fgd < _gbc ._bec {return nil ;};_gbc ._bec =0;_ecda :=_gbc .decodeRow ();if _ecda !=nil {if !_c .Is (_ecda ,_f .EOF ){return _ecda ;
};if _gbc ._bec !=0{return _ecda ;};_gbc ._bec =-1;};_gbc ._fgd =0;return nil ;};func _bee (_eeged int )([]byte ,int ){var _bbf []byte ;for _bfcb :=0;_bfcb < 2;_bfcb ++{_bbf ,_eeged =_fbc (_bbf ,_eeged ,_bcag );};return _bbf ,_eeged %8;};func (_bdf *Encoder )encodeG32D (_ad [][]byte )[]byte {var _cgec []byte ;
var _beg int ;for _acd :=0;_acd < len (_ad );_acd +=_bdf .K {if _bdf .Rows > 0&&!_bdf .EndOfBlock &&_acd ==_bdf .Rows {break ;};_bcd ,_cca :=_cdc (_ad [_acd ],_beg ,_aeb );_cgec =_bdf .appendEncodedRow (_cgec ,_bcd ,_beg );if _bdf .EncodedByteAlign {_cca =0;
};_beg =_cca ;for _acae :=_acd +1;_acae < (_acd +_bdf .K )&&_acae < len (_ad );_acae ++{if _bdf .Rows > 0&&!_bdf .EndOfBlock &&_acae ==_bdf .Rows {break ;};_bgdc ,_dgg :=_fbc (nil ,_beg ,_edb );var _egb ,_adc ,_gcg int ;_egbd :=-1;for _egbd < len (_ad [_acae ]){_egb =_bdaa (_ad [_acae ],_egbd );
_adc =_abfg (_ad [_acae ],_ad [_acae -1],_egbd );_gcg =_bdaa (_ad [_acae -1],_adc );if _gcg < _egb {_bgdc ,_dgg =_dagg (_bgdc ,_dgg );_egbd =_gcg ;}else {if _e .Abs (float64 (_adc -_egb ))> 3{_bgdc ,_dgg ,_egbd =_fce (_ad [_acae ],_bgdc ,_dgg ,_egbd ,_egb );
}else {_bgdc ,_dgg =_aeg (_bgdc ,_dgg ,_egb ,_adc );_egbd =_egb ;};};};_cgec =_bdf .appendEncodedRow (_cgec ,_bgdc ,_beg );if _bdf .EncodedByteAlign {_dgg =0;};_beg =_dgg %8;};};if _bdf .EndOfBlock {_efe ,_ :=_ebdd (_beg );_cgec =_bdf .appendEncodedRow (_cgec ,_efe ,_beg );
};return _cgec ;};func _bed (_fdfc ,_adf int )code {var _dfde code ;switch _adf -_fdfc {case -1:_dfde =_edc ;case -2:_dfde =_ebc ;case -3:_dfde =_eg ;case 0:_dfde =_eac ;case 1:_dfde =_abg ;case 2:_dfde =_age ;case 3:_dfde =_bgd ;};return _dfde ;};type Encoder struct{K int ;
EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};var _cfe =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func _fbdc (_fdeg [][]byte )[][]byte {_bgbd :=make ([]byte ,len (_fdeg [0]));for _bge :=range _bgbd {_bgbd [_bge ]=_bebd ;};_fdeg =append (_fdeg ,[]byte {});for _dafg :=len (_fdeg )-1;_dafg > 0;_dafg --{_fdeg [_dafg ]=_fdeg [_dafg -1];};_fdeg [0]=_bgbd ;
return _fdeg ;};func (_ggc *Decoder )decodeRowType2 ()error {if _ggc ._fed {_ggc ._fbd .Align ();};if _bfa :=_ggc .decode1D ();_bfa !=nil {return _bfa ;};return nil ;};func (_fa *Encoder )appendEncodedRow (_aeca ,_cgab []byte ,_fddbf int )[]byte {if len (_aeca )> 0&&_fddbf !=0&&!_fa .EncodedByteAlign {_aeca [len (_aeca )-1]=_aeca [len (_aeca )-1]|_cgab [0];
_aeca =append (_aeca ,_cgab [1:]...);}else {_aeca =append (_aeca ,_cgab ...);};return _aeca ;};func (_efa *Decoder )decode1D ()error {var (_bfd int ;_ce error ;);_gfe :=true ;_efa ._ege =0;for {var _fc int ;if _gfe {_fc ,_ce =_efa .decodeRun (_eb );}else {_fc ,_ce =_efa .decodeRun (_fe );
};if _ce !=nil {return _ce ;};_bfd +=_fc ;_efa ._fff [_efa ._ege ]=_bfd ;_efa ._ege ++;_gfe =!_gfe ;if _bfd >=_efa ._bb {break ;};};return nil ;};func _fbc (_dafd []byte ,_aadg int ,_cfa code )([]byte ,int ){_ede :=0;for _ede < _cfa .BitsWritten {_dfg :=_aadg /8;
_fbe :=_aadg %8;if _dfg >=len (_dafd ){_dafd =append (_dafd ,0);};_fde :=8-_fbe ;_ffc :=_cfa .BitsWritten -_ede ;if _fde > _ffc {_fde =_ffc ;};if _ede < 8{_dafd [_dfg ]=_dafd [_dfg ]|byte (_cfa .Code >>uint (8+_fbe -_ede ))&_ecd [8-_fde -_fbe ];}else {_dafd [_dfg ]=_dafd [_dfg ]|(byte (_cfa .Code <<uint (_ede -8))&_ecd [8-_fde ])>>uint (_fbe );
};_aadg +=_fde ;_ede +=_fde ;};return _dafd ,_aadg ;};var _cd =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
type tree struct{_ggf *treeNode };func _abfg (_ecg ,_eab []byte ,_deg int )int {_ded :=_bdaa (_eab ,_deg );if _ded < len (_eab )&&(_deg ==-1&&_eab [_ded ]==_bebd ||_deg >=0&&_deg < len (_ecg )&&_ecg [_deg ]==_eab [_ded ]||_deg >=len (_ecg )&&_ecg [_deg -1]!=_eab [_ded ]){_ded =_bdaa (_eab ,_ded );
};return _ded ;};func (_dbc *Decoder )decode2D ()error {_dbc ._aec =_dbc ._ege ;_dbc ._fff ,_dbc ._gdc =_dbc ._gdc ,_dbc ._fff ;_gdg :=true ;var (_cc bool ;_gdgb int ;_fdfb error ;);_dbc ._ege =0;_agbf :for _gdgb < _dbc ._bb {_cgg :=_ea ._ggf ;for {_cc ,_fdfb =_dbc ._fbd .ReadBool ();
if _fdfb !=nil {return _fdfb ;};_cgg =_cgg .walk (_cc );if _cgg ==nil {continue _agbf ;};if !_cgg ._fba {continue ;};switch _cgg ._ggba {case _ff :var _bbb int ;if _gdg {_bbb ,_fdfb =_dbc .decodeRun (_eb );}else {_bbb ,_fdfb =_dbc .decodeRun (_fe );};if _fdfb !=nil {return _fdfb ;
};_gdgb +=_bbb ;_dbc ._fff [_dbc ._ege ]=_gdgb ;_dbc ._ege ++;if _gdg {_bbb ,_fdfb =_dbc .decodeRun (_fe );}else {_bbb ,_fdfb =_dbc .decodeRun (_eb );};if _fdfb !=nil {return _fdfb ;};_gdgb +=_bbb ;_dbc ._fff [_dbc ._ege ]=_gdgb ;_dbc ._ege ++;case _ab :_dea :=_dbc .getNextChangingElement (_gdgb ,_gdg )+1;
if _dea >=_dbc ._aec {_gdgb =_dbc ._bb ;}else {_gdgb =_dbc ._gdc [_dea ];};default:_dc :=_dbc .getNextChangingElement (_gdgb ,_gdg );if _dc >=_dbc ._aec ||_dc ==-1{_gdgb =_dbc ._bb +_cgg ._ggba ;}else {_gdgb =_dbc ._gdc [_dc ]+_cgg ._ggba ;};_dbc ._fff [_dbc ._ege ]=_gdgb ;
_dbc ._ege ++;_gdg =!_gdg ;};continue _agbf ;};};return nil ;};var (_ag *treeNode ;_be *treeNode ;_fe *tree ;_eb *tree ;_g *tree ;_ea *tree ;_bd =-2000;_d =-1000;_ab =-3000;_ff =-4000;);func (_fee *Decoder )tryFetchEOL1 ()(bool ,error ){_dca ,_gcd :=_fee ._fbd .ReadBits (13);
if _gcd !=nil {return false ,_gcd ;};return _dca ==0x3,nil ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_bgg :=&Decoder {_fbd :_b .NewReader (data ),_bb :options .Columns ,_cbb :options .Rows ,_ega :options .DamagedRowsBeforeError ,_gfg :make ([]byte ,(options .Columns +7)/8),_gdc :make ([]int ,options .Columns +2),_fff :make ([]int ,options .Columns +2),_fed :options .EncodedByteAligned ,_edcb :options .BlackIsOne ,_fgb :options .EndOfLine ,_df :options .EndOfBlock };
switch {case options .K ==0:_bgg ._gdca =_abf ;if len (data )< 20{return nil ,_c .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_eea :=data [:20];if _eea [0]!=0||(_eea [1]>>4!=1&&_eea [1]!=1){_bgg ._gdca =_eca ;
_eed :=(uint16 (_eea [0])<<8+uint16 (_eea [1]&0xff))>>4;for _cfb :=12;_cfb < 160;_cfb ++{_eed =(_eed <<1)+uint16 ((_eea [_cfb /8]>>uint16 (7-(_cfb %8)))&0x01);if _eed &0xfff==1{_bgg ._gdca =_abf ;break ;};};};case options .K < 0:_bgg ._gdca =_cb ;case options .K > 0:_bgg ._gdca =_abf ;
_bgg ._bcf =true ;};switch _bgg ._gdca {case _eca ,_abf ,_cb :default:return nil ,_c .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _bgg ,nil ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_gba *Decoder )decodeRow ()(_fdf error ){if !_gba ._df &&_gba ._cbb > 0&&_gba ._cbb ==_gba ._dd {return _f .EOF ;
};switch _gba ._gdca {case _eca :_fdf =_gba .decodeRowType2 ();case _abf :_fdf =_gba .decodeRowType4 ();case _cb :_fdf =_gba .decodeRowType6 ();};if _fdf !=nil {return _fdf ;};_eefa :=0;_cgea :=true ;_gba ._edf =0;for _ageb :=0;_ageb < _gba ._ege ;_ageb ++{_db :=_gba ._bb ;
if _ageb !=_gba ._ege {_db =_gba ._fff [_ageb ];};if _db > _gba ._bb {_db =_gba ._bb ;};_cfbf :=_eefa /8;for _eefa %8!=0&&_db -_eefa > 0{var _egaf byte ;if !_cgea {_egaf =1<<uint (7-(_eefa %8));};_gba ._gfg [_cfbf ]|=_egaf ;_eefa ++;};if _eefa %8==0{_cfbf =_eefa /8;
var _gec byte ;if !_cgea {_gec =0xff;};for _db -_eefa > 7{_gba ._gfg [_cfbf ]=_gec ;_eefa +=8;_cfbf ++;};};for _db -_eefa > 0{if _eefa %8==0{_gba ._gfg [_cfbf ]=0;};var _egae byte ;if !_cgea {_egae =1<<uint (7-(_eefa %8));};_gba ._gfg [_cfbf ]|=_egae ;
_eefa ++;};_cgea =!_cgea ;};if _eefa !=_gba ._bb {return _c .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_gba ._bec =(_eefa +7)/8;_gba ._dd ++;return nil ;};func _ceg (_fgeg []byte ,_bdb bool ,_cde int )(int ,int ){_cggb :=0;for _cde < len (_fgeg ){if _bdb {if _fgeg [_cde ]!=_bebd {break ;};}else {if _fgeg [_cde ]!=_cbbf {break ;};};_cggb ++;_cde ++;};return _cggb ,_cde ;
};func _ffeg (_egcb int )([]byte ,int ){var _gca []byte ;for _egab :=0;_egab < 6;_egab ++{_gca ,_egcb =_fbc (_gca ,_egcb ,_bcag );};return _gca ,_egcb %8;};func (_ecba *Encoder )encodeG31D (_agcb [][]byte )[]byte {var _agg []byte ;_eaa :=0;for _ccf :=range _agcb {if _ecba .Rows > 0&&!_ecba .EndOfBlock &&_ccf ==_ecba .Rows {break ;
};_ecf ,_agd :=_cdc (_agcb [_ccf ],_eaa ,_bcag );_agg =_ecba .appendEncodedRow (_agg ,_ecf ,_eaa );if _ecba .EncodedByteAlign {_agd =0;};_eaa =_agd ;};if _ecba .EndOfBlock {_afg ,_ :=_ffeg (_eaa );_agg =_ecba .appendEncodedRow (_agg ,_afg ,_eaa );};return _agg ;
};func (_ddg *treeNode )set (_egac bool ,_eebf *treeNode ){if !_egac {_ddg ._bdag =_eebf ;}else {_ddg ._ebgd =_eebf ;};};func _dagg (_dfd []byte ,_gbf int )([]byte ,int ){return _fbc (_dfd ,_gbf ,_gf )};func (_aa tiffType )String ()string {switch _aa {case _eca :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _abf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _cb :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _cdc (_fcg []byte ,_edbe int ,_cedc code )([]byte ,int ){_dec :=true ;
var _ffg []byte ;_ffg ,_edbe =_fbc (nil ,_edbe ,_cedc );_dbd :=0;var _aff int ;for _dbd < len (_fcg ){_aff ,_dbd =_ceg (_fcg ,_dec ,_dbd );_ffg ,_edbe =_cgd (_ffg ,_edbe ,_aff ,_dec );_dec =!_dec ;};return _ffg ,_edbe %8;};func (_acg *Encoder )encodeG4 (_fcbc [][]byte )[]byte {_ddc :=make ([][]byte ,len (_fcbc ));
copy (_ddc ,_fcbc );_ddc =_fbdc (_ddc );var _eebe []byte ;var _adb int ;for _acdf :=1;_acdf < len (_ddc );_acdf ++{if _acg .Rows > 0&&!_acg .EndOfBlock &&_acdf ==(_acg .Rows +1){break ;};var _bac []byte ;var _ggg ,_cce ,_bebe int ;_baf :=_adb ;_dbcb :=-1;
for _dbcb < len (_ddc [_acdf ]){_ggg =_bdaa (_ddc [_acdf ],_dbcb );_cce =_abfg (_ddc [_acdf ],_ddc [_acdf -1],_dbcb );_bebe =_bdaa (_ddc [_acdf -1],_cce );if _bebe < _ggg {_bac ,_baf =_fbc (_bac ,_baf ,_gf );_dbcb =_bebe ;}else {if _e .Abs (float64 (_cce -_ggg ))> 3{_bac ,_baf ,_dbcb =_fce (_ddc [_acdf ],_bac ,_baf ,_dbcb ,_ggg );
}else {_bac ,_baf =_aeg (_bac ,_baf ,_ggg ,_cce );_dbcb =_ggg ;};};};_eebe =_acg .appendEncodedRow (_eebe ,_bac ,_adb );if _acg .EncodedByteAlign {_baf =0;};_adb =_baf %8;};if _acg .EndOfBlock {_bcagg ,_ :=_bee (_adb );_eebe =_acg .appendEncodedRow (_eebe ,_bcagg ,_adb );
};return _eebe ;};func _afa (_fdg int ,_cfbc bool )(code ,int ,bool ){if _fdg < 64{if _cfbc {return _eeg [_fdg ],0,true ;};return _eeb [_fdg ],0,true ;};_ebe :=_fdg /64;if _ebe > 40{return _cg [2560],_fdg -2560,false ;};if _ebe > 27{return _cg [_ebe *64],_fdg -_ebe *64,false ;
};if _cfbc {return _bca [_ebe *64],_fdg -_ebe *64,false ;};return _ed [_ebe *64],_fdg -_ebe *64,false ;};func _ebdd (_eefad int )([]byte ,int ){var _ca []byte ;for _acac :=0;_acac < 6;_acac ++{_ca ,_eefad =_fbc (_ca ,_eefad ,_aeb );};return _ca ,_eefad %8;
};var _ba =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
type code struct{Code uint16 ;BitsWritten int ;};type treeNode struct{_bdag *treeNode ;_ebgd *treeNode ;_ggba int ;_gcc bool ;_fba bool ;};const (_ tiffType =iota ;_eca ;_abf ;_cb ;);func _bdaa (_gbag []byte ,_cfc int )int {if _cfc >=len (_gbag ){return _cfc ;
};if _cfc < -1{_cfc =-1;};var _egef byte ;if _cfc > -1{_egef =_gbag [_cfc ];}else {_egef =_bebd ;};_geb :=_cfc +1;for _geb < len (_gbag ){if _gbag [_geb ]!=_egef {break ;};_geb ++;};return _geb ;};func (_ggb *Decoder )decodeRowType4 ()error {if !_ggb ._bcf {return _ggb .decoderRowType41D ();
};if _ggb ._fed {_ggb ._fbd .Align ();};_ggb ._fbd .Mark ();_dge ,_gac :=_ggb .tryFetchEOL ();if _gac !=nil {return _gac ;};if !_dge &&_ggb ._fgb {_ggb ._fb ++;if _ggb ._fb > _ggb ._ega {return _bdd ;};_ggb ._fbd .Reset ();};if !_dge {_ggb ._fbd .Reset ();
};_fdbb ,_gac :=_ggb ._fbd .ReadBool ();if _gac !=nil {return _gac ;};if _fdbb {if _dge &&_ggb ._df {if _gac =_ggb .tryFetchRTC2D ();_gac !=nil {return _gac ;};};_gac =_ggb .decode1D ();}else {_gac =_ggb .decode2D ();};if _gac !=nil {return _gac ;};return nil ;
};func (_bda *Encoder )Encode (pixels [][]byte )[]byte {if _bda .BlackIs1 {_bebd =0;_cbbf =1;}else {_bebd =1;_cbbf =0;};if _bda .K ==0{return _bda .encodeG31D (pixels );};if _bda .K > 0{return _bda .encodeG32D (pixels );};if _bda .K < 0{return _bda .encodeG4 (pixels );
};return nil ;};func (_cga *Decoder )decodeRowType6 ()error {if _cga ._fed {_cga ._fbd .Align ();};if _cga ._df {_cga ._fbd .Mark ();_bae ,_baed :=_cga .tryFetchEOL ();if _baed !=nil {return _baed ;};if _bae {_bae ,_baed =_cga .tryFetchEOL ();if _baed !=nil {return _baed ;
};if _bae {return _f .EOF ;};};_cga ._fbd .Reset ();};return _cga .decode2D ();};func (_aecb *Decoder )tryFetchEOL ()(bool ,error ){_gff ,_bce :=_aecb ._fbd .ReadBits (12);if _bce !=nil {return false ,_bce ;};return _gff ==0x1,nil ;};var _ae =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _cgd (_def []byte ,_cfg int ,_dcd int ,_fgc bool )([]byte ,int ){var (_gddc code ;_egcc bool ;);for !_egcc {_gddc ,_dcd ,_egcc =_afa (_dcd ,_fgc );_def ,_cfg =_fbc (_def ,_cfg ,_gddc );};return _def ,_cfg ;};func (_cgdd *tree )fill (_cef ,_eeag ,_gbe int )error {_afab :=_cgdd ._ggf ;
for _gfb :=0;_gfb < _cef ;_gfb ++{_cag :=_cef -1-_gfb ;_gefc :=((_eeag >>uint (_cag ))&1)!=0;_gfbd :=_afab .walk (_gefc );if _gfbd !=nil {if _gfbd ._fba {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_afab =_gfbd ;continue ;};_gfbd =&treeNode {};if _gfb ==_cef -1{_gfbd ._ggba =_gbe ;_gfbd ._fba =true ;};if _eeag ==0{_gfbd ._gcc =true ;};_afab .set (_gefc ,_gfbd );_afab =_gfbd ;};return nil ;};type tiffType int ;func _aeg (_abgd []byte ,_ggdd ,_dfa ,_cba int )([]byte ,int ){_ffd :=_bed (_dfa ,_cba );
_abgd ,_ggdd =_fbc (_abgd ,_ggdd ,_ffd );return _abgd ,_ggdd ;};func (_ggce *Decoder )tryFetchRTC2D ()(_dcg error ){_ggce ._fbd .Mark ();var _eba bool ;for _ebae :=0;_ebae < 5;_ebae ++{_eba ,_dcg =_ggce .tryFetchEOL1 ();if _dcg !=nil {if _c .Is (_dcg ,_f .EOF ){if _ebae ==0{break ;
};return _bgb ;};};if _eba {continue ;};if _ebae > 0{return _bgb ;};break ;};if _eba {return _f .EOF ;};_ggce ._fbd .Reset ();return _dcg ;};func (_abc *Decoder )decoderRowType41D ()error {if _abc ._fed {_abc ._fbd .Align ();};_abc ._fbd .Mark ();var (_eedd bool ;
_bea error ;);if _abc ._fgb {_eedd ,_bea =_abc .tryFetchEOL ();if _bea !=nil {return _bea ;};if !_eedd {return _bdd ;};}else {_eedd ,_bea =_abc .looseFetchEOL ();if _bea !=nil {return _bea ;};};if !_eedd {_abc ._fbd .Reset ();};if _eedd &&_abc ._df {_abc ._fbd .Mark ();
for _egc :=0;_egc < 5;_egc ++{_eedd ,_bea =_abc .tryFetchEOL ();if _bea !=nil {if _c .Is (_bea ,_f .EOF ){if _egc ==0{break ;};return _bgb ;};};if _eedd {continue ;};if _egc > 0{return _bgb ;};break ;};if _eedd {return _f .EOF ;};_abc ._fbd .Reset ();};
if _bea =_abc .decode1D ();_bea !=nil {return _bea ;};return nil ;};var (_eeb map[int ]code ;_eeg map[int ]code ;_ed map[int ]code ;_bca map[int ]code ;_cg map[int ]code ;_ecd map[int ]byte ;_bcag =code {Code :1<<4,BitsWritten :12};_aeb =code {Code :3<<3,BitsWritten :13};
_edb =code {Code :2<<3,BitsWritten :13};_gf =code {Code :1<<12,BitsWritten :4};_fgg =code {Code :1<<13,BitsWritten :3};_eac =code {Code :1<<15,BitsWritten :1};_edc =code {Code :3<<13,BitsWritten :3};_ebc =code {Code :3<<10,BitsWritten :6};_eg =code {Code :3<<9,BitsWritten :7};
_abg =code {Code :2<<13,BitsWritten :3};_age =code {Code :2<<10,BitsWritten :6};_bgd =code {Code :2<<9,BitsWritten :7};);func _fce (_gab ,_bff []byte ,_beae ,_gef ,_dda int )([]byte ,int ,int ){_abd :=_bdaa (_gab ,_dda );_fdca :=_gef >=0&&_gab [_gef ]==_bebd ||_gef ==-1;
_bff ,_beae =_fbc (_bff ,_beae ,_fgg );var _fecb int ;if _gef > -1{_fecb =_dda -_gef ;}else {_fecb =_dda -_gef -1;};_bff ,_beae =_cgd (_bff ,_beae ,_fecb ,_fdca );_fdca =!_fdca ;_bgc :=_abd -_dda ;_bff ,_beae =_cgd (_bff ,_beae ,_bgc ,_fdca );_gef =_abd ;
return _bff ,_beae ,_gef ;};func (_cbd *treeNode )walk (_fbbg bool )*treeNode {if _fbbg {return _cbd ._ebgd ;};return _cbd ._bdag ;};