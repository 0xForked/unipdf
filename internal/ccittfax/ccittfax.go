//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_a "errors";_g "math";);func (_bcb *Encoder )Encode (pixels [][]byte )[]byte {if _bcb .BlackIs1 {_gde =0;_bgd =1;}else {_gde =1;_bgd =0;};if _bcb .K ==0{return _bcb .encodeG31D (pixels );};if _bcb .K > 0{return _bcb .encodeG32D (pixels );};if _bcb .K < 0{return _bcb .encodeG4 (pixels );};return nil ;};func _gdcc (_aeaa []byte ,_eff int ,_aff code )([]byte ,int ){_afee :=0;for _afee < _aff .BitsWritten {_ffge :=_eff /8;_gcaf :=_eff %8;if _ffge >=len (_aeaa ){_aeaa =append (_aeaa ,0);};_bfa :=8-_gcaf ;_fgba :=_aff .BitsWritten -_afee ;if _bfa > _fgba {_bfa =_fgba ;};if _afee < 8{_aeaa [_ffge ]=_aeaa [_ffge ]|byte (_aff .Code >>uint (8+_gcaf -_afee ))&_fe [8-_bfa -_gcaf ];}else {_aeaa [_ffge ]=_aeaa [_ffge ]|(byte (_aff .Code <<uint (_afee -8))&_fe [8-_bfa ])>>uint (_gcaf );};_eff +=_bfa ;_afee +=_bfa ;};return _aeaa ,_eff ;};func init (){_b =make (map[int ]code );_b [0]=code {Code :13<<8|3<<6,BitsWritten :10};_b [1]=code {Code :2<<(5+8),BitsWritten :3};_b [2]=code {Code :3<<(6+8),BitsWritten :2};_b [3]=code {Code :2<<(6+8),BitsWritten :2};_b [4]=code {Code :3<<(5+8),BitsWritten :3};_b [5]=code {Code :3<<(4+8),BitsWritten :4};_b [6]=code {Code :2<<(4+8),BitsWritten :4};_b [7]=code {Code :3<<(3+8),BitsWritten :5};_b [8]=code {Code :5<<(2+8),BitsWritten :6};_b [9]=code {Code :4<<(2+8),BitsWritten :6};_b [10]=code {Code :4<<(1+8),BitsWritten :7};_b [11]=code {Code :5<<(1+8),BitsWritten :7};_b [12]=code {Code :7<<(1+8),BitsWritten :7};_b [13]=code {Code :4<<8,BitsWritten :8};_b [14]=code {Code :7<<8,BitsWritten :8};_b [15]=code {Code :12<<8,BitsWritten :9};_b [16]=code {Code :5<<8|3<<6,BitsWritten :10};_b [17]=code {Code :6<<8,BitsWritten :10};_b [18]=code {Code :2<<8,BitsWritten :10};_b [19]=code {Code :12<<8|7<<5,BitsWritten :11};_b [20]=code {Code :13<<8,BitsWritten :11};_b [21]=code {Code :13<<8|4<<5,BitsWritten :11};_b [22]=code {Code :6<<8|7<<5,BitsWritten :11};_b [23]=code {Code :5<<8,BitsWritten :11};_b [24]=code {Code :2<<8|7<<5,BitsWritten :11};_b [25]=code {Code :3<<8,BitsWritten :11};_b [26]=code {Code :12<<8|10<<4,BitsWritten :12};_b [27]=code {Code :12<<8|11<<4,BitsWritten :12};_b [28]=code {Code :12<<8|12<<4,BitsWritten :12};_b [29]=code {Code :12<<8|13<<4,BitsWritten :12};_b [30]=code {Code :6<<8|8<<4,BitsWritten :12};_b [31]=code {Code :6<<8|9<<4,BitsWritten :12};_b [32]=code {Code :6<<8|10<<4,BitsWritten :12};_b [33]=code {Code :6<<8|11<<4,BitsWritten :12};_b [34]=code {Code :13<<8|2<<4,BitsWritten :12};_b [35]=code {Code :13<<8|3<<4,BitsWritten :12};_b [36]=code {Code :13<<8|4<<4,BitsWritten :12};_b [37]=code {Code :13<<8|5<<4,BitsWritten :12};_b [38]=code {Code :13<<8|6<<4,BitsWritten :12};_b [39]=code {Code :13<<8|7<<4,BitsWritten :12};_b [40]=code {Code :6<<8|12<<4,BitsWritten :12};_b [41]=code {Code :6<<8|13<<4,BitsWritten :12};_b [42]=code {Code :13<<8|10<<4,BitsWritten :12};_b [43]=code {Code :13<<8|11<<4,BitsWritten :12};_b [44]=code {Code :5<<8|4<<4,BitsWritten :12};_b [45]=code {Code :5<<8|5<<4,BitsWritten :12};_b [46]=code {Code :5<<8|6<<4,BitsWritten :12};_b [47]=code {Code :5<<8|7<<4,BitsWritten :12};_b [48]=code {Code :6<<8|4<<4,BitsWritten :12};_b [49]=code {Code :6<<8|5<<4,BitsWritten :12};_b [50]=code {Code :5<<8|2<<4,BitsWritten :12};_b [51]=code {Code :5<<8|3<<4,BitsWritten :12};_b [52]=code {Code :2<<8|4<<4,BitsWritten :12};_b [53]=code {Code :3<<8|7<<4,BitsWritten :12};_b [54]=code {Code :3<<8|8<<4,BitsWritten :12};_b [55]=code {Code :2<<8|7<<4,BitsWritten :12};_b [56]=code {Code :2<<8|8<<4,BitsWritten :12};_b [57]=code {Code :5<<8|8<<4,BitsWritten :12};_b [58]=code {Code :5<<8|9<<4,BitsWritten :12};_b [59]=code {Code :2<<8|11<<4,BitsWritten :12};_b [60]=code {Code :2<<8|12<<4,BitsWritten :12};_b [61]=code {Code :5<<8|10<<4,BitsWritten :12};_b [62]=code {Code :6<<8|6<<4,BitsWritten :12};_b [63]=code {Code :6<<8|7<<4,BitsWritten :12};_e =make (map[int ]code );_e [0]=code {Code :53<<8,BitsWritten :8};_e [1]=code {Code :7<<(2+8),BitsWritten :6};_e [2]=code {Code :7<<(4+8),BitsWritten :4};_e [3]=code {Code :8<<(4+8),BitsWritten :4};_e [4]=code {Code :11<<(4+8),BitsWritten :4};_e [5]=code {Code :12<<(4+8),BitsWritten :4};_e [6]=code {Code :14<<(4+8),BitsWritten :4};_e [7]=code {Code :15<<(4+8),BitsWritten :4};_e [8]=code {Code :19<<(3+8),BitsWritten :5};_e [9]=code {Code :20<<(3+8),BitsWritten :5};_e [10]=code {Code :7<<(3+8),BitsWritten :5};_e [11]=code {Code :8<<(3+8),BitsWritten :5};_e [12]=code {Code :8<<(2+8),BitsWritten :6};_e [13]=code {Code :3<<(2+8),BitsWritten :6};_e [14]=code {Code :52<<(2+8),BitsWritten :6};_e [15]=code {Code :53<<(2+8),BitsWritten :6};_e [16]=code {Code :42<<(2+8),BitsWritten :6};_e [17]=code {Code :43<<(2+8),BitsWritten :6};_e [18]=code {Code :39<<(1+8),BitsWritten :7};_e [19]=code {Code :12<<(1+8),BitsWritten :7};_e [20]=code {Code :8<<(1+8),BitsWritten :7};_e [21]=code {Code :23<<(1+8),BitsWritten :7};_e [22]=code {Code :3<<(1+8),BitsWritten :7};_e [23]=code {Code :4<<(1+8),BitsWritten :7};_e [24]=code {Code :40<<(1+8),BitsWritten :7};_e [25]=code {Code :43<<(1+8),BitsWritten :7};_e [26]=code {Code :19<<(1+8),BitsWritten :7};_e [27]=code {Code :36<<(1+8),BitsWritten :7};_e [28]=code {Code :24<<(1+8),BitsWritten :7};_e [29]=code {Code :2<<8,BitsWritten :8};_e [30]=code {Code :3<<8,BitsWritten :8};_e [31]=code {Code :26<<8,BitsWritten :8};_e [32]=code {Code :27<<8,BitsWritten :8};_e [33]=code {Code :18<<8,BitsWritten :8};_e [34]=code {Code :19<<8,BitsWritten :8};_e [35]=code {Code :20<<8,BitsWritten :8};_e [36]=code {Code :21<<8,BitsWritten :8};_e [37]=code {Code :22<<8,BitsWritten :8};_e [38]=code {Code :23<<8,BitsWritten :8};_e [39]=code {Code :40<<8,BitsWritten :8};_e [40]=code {Code :41<<8,BitsWritten :8};_e [41]=code {Code :42<<8,BitsWritten :8};_e [42]=code {Code :43<<8,BitsWritten :8};_e [43]=code {Code :44<<8,BitsWritten :8};_e [44]=code {Code :45<<8,BitsWritten :8};_e [45]=code {Code :4<<8,BitsWritten :8};_e [46]=code {Code :5<<8,BitsWritten :8};_e [47]=code {Code :10<<8,BitsWritten :8};_e [48]=code {Code :11<<8,BitsWritten :8};_e [49]=code {Code :82<<8,BitsWritten :8};_e [50]=code {Code :83<<8,BitsWritten :8};_e [51]=code {Code :84<<8,BitsWritten :8};_e [52]=code {Code :85<<8,BitsWritten :8};_e [53]=code {Code :36<<8,BitsWritten :8};_e [54]=code {Code :37<<8,BitsWritten :8};_e [55]=code {Code :88<<8,BitsWritten :8};_e [56]=code {Code :89<<8,BitsWritten :8};_e [57]=code {Code :90<<8,BitsWritten :8};_e [58]=code {Code :91<<8,BitsWritten :8};_e [59]=code {Code :74<<8,BitsWritten :8};_e [60]=code {Code :75<<8,BitsWritten :8};_e [61]=code {Code :50<<8,BitsWritten :8};_e [62]=code {Code :51<<8,BitsWritten :8};_e [63]=code {Code :52<<8,BitsWritten :8};_ed =make (map[int ]code );_ed [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ed [128]=code {Code :12<<8|8<<4,BitsWritten :12};_ed [192]=code {Code :12<<8|9<<4,BitsWritten :12};_ed [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ed [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ed [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ed [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ed [512]=code {Code :3<<8|12<<3,BitsWritten :13};_ed [576]=code {Code :3<<8|13<<3,BitsWritten :13};_ed [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ed [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ed [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ed [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ed [896]=code {Code :3<<8|18<<3,BitsWritten :13};_ed [960]=code {Code :3<<8|19<<3,BitsWritten :13};_ed [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ed [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ed [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ed [1216]=code {Code :119<<3,BitsWritten :13};_ed [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_ed [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_ed [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ed [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ed [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ed [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_ed [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_ed [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_ce =make (map[int ]code );_ce [64]=code {Code :27<<(3+8),BitsWritten :5};_ce [128]=code {Code :18<<(3+8),BitsWritten :5};_ce [192]=code {Code :23<<(2+8),BitsWritten :6};_ce [256]=code {Code :55<<(1+8),BitsWritten :7};_ce [320]=code {Code :54<<8,BitsWritten :8};_ce [384]=code {Code :55<<8,BitsWritten :8};_ce [448]=code {Code :100<<8,BitsWritten :8};_ce [512]=code {Code :101<<8,BitsWritten :8};_ce [576]=code {Code :104<<8,BitsWritten :8};_ce [640]=code {Code :103<<8,BitsWritten :8};_ce [704]=code {Code :102<<8,BitsWritten :9};_ce [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ce [832]=code {Code :105<<8,BitsWritten :9};_ce [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ce [960]=code {Code :106<<8,BitsWritten :9};_ce [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ce [1088]=code {Code :107<<8,BitsWritten :9};_ce [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ce [1216]=code {Code :108<<8,BitsWritten :9};_ce [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ce [1344]=code {Code :109<<8,BitsWritten :9};_ce [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ce [1472]=code {Code :76<<8,BitsWritten :9};_ce [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ce [1600]=code {Code :77<<8,BitsWritten :9};_ce [1664]=code {Code :24<<(2+8),BitsWritten :6};_ce [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_f =make (map[int ]code );_f [1792]=code {Code :1<<8,BitsWritten :11};_f [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_f [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_f [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_f [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_f [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_f [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_f [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_f [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_f [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_f [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_f [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_f [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_fe =make (map[int ]byte );_fe [0]=0xFF;_fe [1]=0xFE;_fe [2]=0xFC;_fe [3]=0xF8;_fe [4]=0xF0;_fe [5]=0xE0;_fe [6]=0xC0;_fe [7]=0x80;_fe [8]=0x00;};func (_dde *Encoder )decodeRow1D (_ebf []byte ,_gdca int )([]byte ,int ){var _eda []byte ;_fa :=true ;var _gaf int ;_gaf ,_gdca =_bee (_ebf ,_gdca ,_fa );for _gaf !=-1{_eda =_ada (_eda ,_fa ,_gaf );if _gaf < 64{if len (_eda )>=_dde .Columns {break ;};_fa =!_fa ;};_gaf ,_gdca =_bee (_ebf ,_gdca ,_fa );};return _eda ,_gdca ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func init (){for _dc ,_ag :=range _e {_bab (_feb ,_ag ,0,_dc );};for _cgc ,_gf :=range _ce {_bab (_feb ,_gf ,0,_cgc );};for _aga ,_da :=range _b {_bab (_eab ,_da ,0,_aga );};for _ga ,_eec :=range _ed {_bab (_eab ,_eec ,0,_ga );};for _bb ,_ae :=range _f {_bab (_feb ,_ae ,0,_bb );_bab (_eab ,_ae ,0,_bb );};_bab (_ee ,_d ,0,0);_bab (_ee ,_gg ,0,0);_bab (_ee ,_cd ,0,0);_bab (_ee ,_cg ,0,0);_bab (_ee ,_ea ,0,0);_bab (_ee ,_fg ,0,0);_bab (_ee ,_fee ,0,0);_bab (_ee ,_eg ,0,0);_bab (_ee ,_bc ,0,0);};func _bab (_bfe *decodingTreeNode ,_ggbc code ,_bgb int ,_cgga int ){_adc :=_ggc (_ggbc .Code ,_bgb );_bgb ++;if _adc ==1{if _bfe .Right ==nil {_bfe .Right =&decodingTreeNode {Val :_adc };};if _bgb ==_ggbc .BitsWritten {_bfe .Right .RunLen =&_cgga ;_bfe .Right .Code =&_ggbc ;}else {_bab (_bfe .Right ,_ggbc ,_bgb ,_cgga );};}else {if _bfe .Left ==nil {_bfe .Left =&decodingTreeNode {Val :_adc };};if _bgb ==_ggbc .BitsWritten {_bfe .Left .RunLen =&_cgga ;_bfe .Left .Code =&_ggbc ;}else {_bab (_bfe .Left ,_ggbc ,_bgb ,_cgga );};};};func _gag (_dfc int )([]byte ,int ){var _gabb []byte ;for _ffc :=0;_ffc < 2;_ffc ++{_gabb ,_dfc =_gdcc (_gabb ,_dfc ,_eb );};return _gabb ,_dfc %8;};func (_dd *Encoder )decodeG32D (_ccd []byte )([][]byte ,error ){var (_ac [][]byte ;_de int ;_aea error ;);_ggg :for (_de /8)< len (_ccd ){var _bcg bool ;_bcg ,_de ,_aea =_cdc (_ccd ,_de );if _aea !=nil {return nil ,_aea ;};if _bcg {break ;};_bcg ,_de =_efb (_ccd ,_de );if !_bcg {if _dd .EndOfLine {return nil ,_ff ;};};var _aeb []byte ;_aeb ,_de =_dd .decodeRow1D (_ccd ,_de );if _dd .EncodedByteAlign &&_de %8!=0{_de +=8-_de %8;};if _aeb !=nil {_ac =append (_ac ,_aeb );};if _dd .Rows > 0&&!_dd .EndOfBlock &&len (_ac )>=_dd .Rows {break ;};for _fff :=1;_fff < _dd .K &&(_de /8)< len (_ccd );_fff ++{_bcg ,_de =_bfb (_ccd ,_de );if !_bcg {_bcg ,_de ,_aea =_cdc (_ccd ,_de );if _aea !=nil {return nil ,_aea ;};if _bcg {break _ggg ;}else {if _dd .EndOfLine {return nil ,_ff ;};};};var (_ddf code ;_db bool ;);_daf :=true ;var _cee []byte ;_eaa :=-1;for _ddf ,_de ,_db =_ccg (_ccd ,_de );_db ;_ddf ,_de ,_db =_ccg (_ccd ,_de ){switch _ddf {case _d :_cee ,_eaa =_dbd (_ac ,_cee ,_daf ,_eaa );case _gg :_cee ,_de ,_eaa ,_aea =_eccb (_ccd ,_cee ,_de ,_daf ,_eaa );if _aea !=nil {return nil ,_aea ;};case _cd :_cee ,_eaa =_gc (_ac ,_cee ,_daf ,_eaa ,0);_daf =!_daf ;case _cg :_cee ,_eaa =_gc (_ac ,_cee ,_daf ,_eaa ,1);_daf =!_daf ;case _ea :_cee ,_eaa =_gc (_ac ,_cee ,_daf ,_eaa ,2);_daf =!_daf ;case _fg :_cee ,_eaa =_gc (_ac ,_cee ,_daf ,_eaa ,3);_daf =!_daf ;case _fee :_cee ,_eaa =_gc (_ac ,_cee ,_daf ,_eaa ,-1);_daf =!_daf ;case _eg :_cee ,_eaa =_gc (_ac ,_cee ,_daf ,_eaa ,-2);_daf =!_daf ;case _bc :_cee ,_eaa =_gc (_ac ,_cee ,_daf ,_eaa ,-3);_daf =!_daf ;};if len (_cee )>=_dd .Columns {break ;};};if _dd .EncodedByteAlign &&_de %8!=0{_de +=8-_de %8;};if _cee !=nil {_ac =append (_ac ,_cee );};if _dd .Rows > 0&&!_dd .EndOfBlock &&len (_ac )>=_dd .Rows {break _ggg ;};};};return _ac ,nil ;};var (_feb =&decodingTreeNode {Val :255};_eab =&decodingTreeNode {Val :255};_ee =&decodingTreeNode {Val :255};);func _bfcb (_abg []byte ,_gfg bool ,_gdd int )(int ,int ){_efdc :=0;for _gdd < len (_abg ){if _gfg {if _abg [_gdd ]!=_gde {break ;};}else {if _abg [_gdd ]!=_bgd {break ;};};_efdc ++;_gdd ++;};return _efdc ,_gdd ;};func _ebc (_daa []byte ,_gcc int )(bool ,int ){_baf :=_gcc ;var (_efc uint16 ;_bbfd int ;);_efc ,_bbfd ,_gcc =_aec (_daa ,_gcc );if _bbfd > 4{return false ,_baf ;};_efc >>=uint (4-_bbfd );_efc <<=4;if _efc !=_eb .Code {return false ,_baf ;};return true ,_gcc -4+_bbfd ;};func _bgf (_gce uint16 ,_ced int ,_daff bool )(int ,code ){var _ccgg *int ;var _abd *code ;if _daff {_ccgg ,_abd =_adb (_feb ,_gce ,_ced );}else {_ccgg ,_abd =_adb (_eab ,_gce ,_ced );};if _ccgg ==nil {return -1,code {};};return *_ccgg ,*_abd ;};func _gceb (_dfb int ,_agg bool )(code ,int ,bool ){if _dfb < 64{if _agg {return _e [_dfb ],0,true ;};return _b [_dfb ],0,true ;};_cacg :=_dfb /64;if _cacg > 40{return _f [2560],_dfb -2560,false ;};if _cacg > 27{return _f [_cacg *64],_dfb -_cacg *64,false ;};if _agg {return _ce [_cacg *64],_dfb -_cacg *64,false ;};return _ed [_cacg *64],_dfb -_cacg *64,false ;};func _adb (_beec *decodingTreeNode ,_gcf uint16 ,_dba int )(*int ,*code ){if _beec ==nil {return nil ,nil ;};if _dba ==16{return _beec .RunLen ,_beec .Code ;};_egf :=_ggc (_gcf ,_dba );_dba ++;var _def *int ;var _dgcb *code ;if _egf ==1{_def ,_dgcb =_adb (_beec .Right ,_gcf ,_dba );}else {_def ,_dgcb =_adb (_beec .Left ,_gcf ,_dba );};if _def ==nil {_def =_beec .RunLen ;_dgcb =_beec .Code ;};return _def ,_dgcb ;};func _fbgf (_gdef []byte ,_dbf int )int {if _dbf >=len (_gdef ){return _dbf ;};if _dbf < -1{_dbf =-1;};var _aba byte ;if _dbf > -1{_aba =_gdef [_dbf ];}else {_aba =_gde ;};_beef :=_dbf +1;for _beef < len (_gdef ){if _gdef [_beef ]!=_aba {break ;};_beef ++;};return _beef ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _ccg (_dafg []byte ,_bff int )(code ,int ,bool ){var (_cbc uint16 ;_fbe int ;_agb int ;);_agb =_bff ;_cbc ,_fbe ,_ =_aec (_dafg ,_bff );_adgf ,_eaaf :=_agbf (_cbc ,_fbe );if !_eaaf {return code {},_agb ,false ;};return _adgf ,_agb +_adgf .BitsWritten ,true ;};func (_cfc *Encoder )encodeG31D (_fde [][]byte )[]byte {var _bca []byte ;_abb :=0;for _bgg :=range _fde {if _cfc .Rows > 0&&!_cfc .EndOfBlock &&_bgg ==_cfc .Rows {break ;};_gcef ,_ddg :=_bag (_fde [_bgg ],_abb ,_eb );_bca =_cfc .appendEncodedRow (_bca ,_gcef ,_abb );if _cfc .EncodedByteAlign {_ddg =0;};_abb =_ddg ;};if _cfc .EndOfBlock {_bbe ,_ :=_fcb (_abb );_bca =_cfc .appendEncodedRow (_bca ,_bbe ,_abb );};return _bca ;};type code struct{Code uint16 ;BitsWritten int ;};func _aec (_afb []byte ,_dbg int )(uint16 ,int ,int ){_adgb :=_dbg ;_dgc :=_dbg /8;_dbg %=8;if _dgc >=len (_afb ){return 0,16,_adgb ;};_gec :=byte (0xFF>>uint (_dbg ));_fbgc :=uint16 ((_afb [_dgc ]&_gec )<<uint (_dbg ))<<8;_gdfd :=8-_dbg ;_dgc ++;_dbg =0;if _dgc >=len (_afb ){return _fbgc >>(16-uint (_gdfd )),16-_gdfd ,_adgb +_gdfd ;};_fbgc |=uint16 (_afb [_dgc ])<<(8-uint (_gdfd ));_gdfd +=8;_dgc ++;_dbg =0;if _dgc >=len (_afb ){return _fbgc >>(16-uint (_gdfd )),16-_gdfd ,_adgb +_gdfd ;};if _gdfd ==16{return _fbgc ,0,_adgb +_gdfd ;};_bef :=16-_gdfd ;_fbgc |=uint16 (_afb [_dgc ]>>(8-uint (_bef )));return _fbgc ,0,_adgb +16;};func _add (_fcf ,_abc []byte ,_fadd int )int {_egdg :=_fbgf (_abc ,_fadd );if _egdg < len (_abc )&&(_fadd ==-1&&_abc [_egdg ]==_gde ||_fadd >=0&&_fadd < len (_fcf )&&_fcf [_fadd ]==_abc [_egdg ]||_fadd >=len (_fcf )&&_fcf [_fadd -1]!=_abc [_egdg ]){_egdg =_fbgf (_abc ,_egdg );};return _egdg ;};func _fcb (_eddf int )([]byte ,int ){var _dcb []byte ;for _gea :=0;_gea < 6;_gea ++{_dcb ,_eddf =_gdcc (_dcb ,_eddf ,_eb );};return _dcb ,_eddf %8;};func _efb (_baaa []byte ,_aabb int )(bool ,int ){return _bbfc (_baaa ,_aabb ,_ef )};func (_cb *Encoder )decodeG31D (_ecb []byte )([][]byte ,error ){var _fb [][]byte ;var _gge int ;for (_gge /8)< len (_ecb ){var _fgb bool ;_fgb ,_gge =_ebc (_ecb ,_gge );if !_fgb {if _cb .EndOfLine {return nil ,_ff ;};}else {for _ca :=0;_ca < 5;_ca ++{_fgb ,_gge =_ebc (_ecb ,_gge );if !_fgb {if _ca ==0{break ;};return nil ,_edc ;};};if _fgb {break ;};};var _fc []byte ;_fc ,_gge =_cb .decodeRow1D (_ecb ,_gge );if _cb .EncodedByteAlign &&_gge %8!=0{_gge +=8-_gge %8;};_fb =append (_fb ,_fc );if _cb .Rows > 0&&!_cb .EndOfBlock &&len (_fb )>=_cb .Rows {break ;};};return _fb ,nil ;};func _acgc (_agbe ,_dcbe int )code {var _gcg code ;switch _dcbe -_agbe {case -1:_gcg =_cg ;case -2:_gcg =_ea ;case -3:_gcg =_fg ;case 0:_gcg =_cd ;case 1:_gcg =_fee ;case 2:_gcg =_eg ;case 3:_gcg =_bc ;};return _gcg ;};func _bbfc (_ceb []byte ,_dff int ,_gca code )(bool ,int ){_baag :=_dff ;var (_aca uint16 ;_afe int ;);_aca ,_afe ,_dff =_aec (_ceb ,_dff );if _afe > 3{return false ,_baag ;};_aca >>=uint (3-_afe );_aca <<=3;if _aca !=_gca .Code {return false ,_baag ;};return true ,_dff -3+_afe ;};func _dbd (_egg [][]byte ,_ge []byte ,_dbb bool ,_bac int )([]byte ,int ){_cad :=_cae (_ge ,_egg [len (_egg )-1],_bac ,_dbb );_aab :=_fbgf (_egg [len (_egg )-1],_cad );if _bac ==-1{_ge =_ada (_ge ,_dbb ,_aab -_bac -1);}else {_ge =_ada (_ge ,_dbb ,_aab -_bac );};_bac =_aab ;return _ge ,_bac ;};func (_gd *Encoder )decodeG4 (_dbe []byte )([][]byte ,error ){_fcc :=make ([]byte ,_gd .Columns );for _ggga :=range _fcc {_fcc [_ggga ]=_gde ;};_dg :=make ([][]byte ,1);_dg [0]=_fcc ;var (_fga bool ;_fce error ;_cgg int ;);for (_cgg /8)< len (_dbe ){_fga ,_cgg ,_fce =_ecg (_dbe ,_cgg );if _fce !=nil {return nil ,_fce ;};if _fga {break ;};var (_gfa code ;_gdf bool ;);_gab :=true ;var _gff []byte ;_ecc :=-1;for _ecc < _gd .Columns {_gfa ,_cgg ,_gdf =_ccg (_dbe ,_cgg );if !_gdf {return nil ,_cca ;};switch _gfa {case _d :_gff ,_ecc =_dbd (_dg ,_gff ,_gab ,_ecc );case _gg :_gff ,_cgg ,_ecc ,_fce =_eccb (_dbe ,_gff ,_cgg ,_gab ,_ecc );if _fce !=nil {return nil ,_fce ;};case _cd :_gff ,_ecc =_gc (_dg ,_gff ,_gab ,_ecc ,0);_gab =!_gab ;case _cg :_gff ,_ecc =_gc (_dg ,_gff ,_gab ,_ecc ,1);_gab =!_gab ;case _ea :_gff ,_ecc =_gc (_dg ,_gff ,_gab ,_ecc ,2);_gab =!_gab ;case _fg :_gff ,_ecc =_gc (_dg ,_gff ,_gab ,_ecc ,3);_gab =!_gab ;case _fee :_gff ,_ecc =_gc (_dg ,_gff ,_gab ,_ecc ,-1);_gab =!_gab ;case _eg :_gff ,_ecc =_gc (_dg ,_gff ,_gab ,_ecc ,-2);_gab =!_gab ;case _bc :_gff ,_ecc =_gc (_dg ,_gff ,_gab ,_ecc ,-3);_gab =!_gab ;};if len (_gff )>=_gd .Columns {break ;};};if _gd .EncodedByteAlign &&_cgg %8!=0{_cgg +=8-_cgg %8;};_dg =append (_dg ,_gff );if _gd .Rows > 0&&!_gd .EndOfBlock &&len (_dg )>=(_gd .Rows +1){break ;};};_dg =_dg [1:];return _dg ,nil ;};func _ecg (_baa []byte ,_gdg int )(bool ,int ,error ){_eccbb :=_gdg ;var _bfd bool ;_bfd ,_gdg =_ebc (_baa ,_gdg );if _bfd {_bfd ,_gdg =_ebc (_baa ,_gdg );if _bfd {return true ,_gdg ,nil ;};return false ,_eccbb ,_ec ;};return false ,_eccbb ,nil ;};func _bfb (_eaafg []byte ,_fd int )(bool ,int ){return _bbfc (_eaafg ,_fd ,_ebe )};var (_b map[int ]code ;_e map[int ]code ;_ed map[int ]code ;_ce map[int ]code ;_f map[int ]code ;_fe map[int ]byte ;_eb =code {Code :1<<4,BitsWritten :12};_ef =code {Code :3<<3,BitsWritten :13};_ebe =code {Code :2<<3,BitsWritten :13};_d =code {Code :1<<12,BitsWritten :4};_gg =code {Code :1<<13,BitsWritten :3};_cd =code {Code :1<<15,BitsWritten :1};_cg =code {Code :3<<13,BitsWritten :3};_ea =code {Code :3<<10,BitsWritten :6};_fg =code {Code :3<<9,BitsWritten :7};_fee =code {Code :2<<13,BitsWritten :3};_eg =code {Code :2<<10,BitsWritten :6};_bc =code {Code :2<<9,BitsWritten :7};);func _dad (_efd []byte ,_dega int ,_gggae int ,_ffd bool )([]byte ,int ){var (_ccag code ;_acb bool ;);for !_acb {_ccag ,_gggae ,_acb =_gceb (_gggae ,_ffd );_efd ,_dega =_gdcc (_efd ,_dega ,_ccag );};return _efd ,_dega ;};var (_gde byte =1;_bgd byte =0;);func (_eeed *Encoder )appendEncodedRow (_dfed ,_ceg []byte ,_feeg int )[]byte {if len (_dfed )> 0&&_feeg !=0&&!_eeed .EncodedByteAlign {_dfed [len (_dfed )-1]=_dfed [len (_dfed )-1]|_ceg [0];_dfed =append (_dfed ,_ceg [1:]...);}else {_dfed =append (_dfed ,_ceg ...);};return _dfed ;};func _degc (_eage [][]byte )[][]byte {_eba :=make ([]byte ,len (_eage [0]));for _fbc :=range _eba {_eba [_fbc ]=_gde ;};_eage =append (_eage ,[]byte {});for _dcc :=len (_eage )-1;_dcc > 0;_dcc --{_eage [_dcc ]=_eage [_dcc -1];};_eage [0]=_eba ;return _eage ;};func _gggd (_gdfc ,_dfbf []byte ,_gbb ,_gabad ,_geed int )([]byte ,int ,int ){_ecbg :=_fbgf (_gdfc ,_geed );_geea :=_gabad >=0&&_gdfc [_gabad ]==_gde ||_gabad ==-1;_dfbf ,_gbb =_gdcc (_dfbf ,_gbb ,_gg );var _feec int ;if _gabad > -1{_feec =_geed -_gabad ;}else {_feec =_geed -_gabad -1;};_dfbf ,_gbb =_dad (_dfbf ,_gbb ,_feec ,_geea );_geea =!_geea ;_dadg :=_ecbg -_geed ;_dfbf ,_gbb =_dad (_dfbf ,_gbb ,_dadg ,_geea );_gabad =_ecbg ;return _dfbf ,_gbb ,_gabad ;};func _aaa (_geg []byte ,_dgfg ,_aee ,_geeaa int )([]byte ,int ){_acc :=_acgc (_aee ,_geeaa );_geg ,_dgfg =_gdcc (_geg ,_dgfg ,_acc );return _geg ,_dgfg ;};func _cdc (_dbef []byte ,_af int )(bool ,int ,error ){_aeae :=_af ;var _ceag =false ;for _bbf :=0;_bbf < 6;_bbf ++{_ceag ,_af =_efb (_dbef ,_af );if !_ceag {if _bbf > 1{return false ,_aeae ,_ba ;};_af =_aeae ;break ;};};return _ceag ,_af ,nil ;};func _ccda (_gbae []byte ,_feba int )([]byte ,int ){return _gdcc (_gbae ,_feba ,_d )};func _cae (_caeg ,_bd []byte ,_cfde int ,_fdb bool )int {_dfd :=_fbgf (_bd ,_cfde );if _dfd < len (_bd )&&(_cfde ==-1&&_bd [_dfd ]==_gde ||_cfde >=0&&_cfde < len (_caeg )&&_caeg [_cfde ]==_bd [_dfd ]||_cfde >=len (_caeg )&&_fdb &&_bd [_dfd ]==_gde ||_cfde >=len (_caeg )&&!_fdb &&_bd [_dfd ]==_bgd ){_dfd =_fbgf (_bd ,_dfd );};return _dfd ;};func _bee (_gdc []byte ,_egc int ,_fgbf bool )(int ,int ){var (_cac uint16 ;_agd int ;_adg int ;);_adg =_egc ;_cac ,_agd ,_ =_aec (_gdc ,_egc );_gac ,_gb :=_bgf (_cac ,_agd ,_fgbf );if _gac ==-1{return -1,_adg ;};return _gac ,_adg +_gb .BitsWritten ;};func _agbf (_fgg uint16 ,_gee int )(code ,bool ){_ ,_egd :=_adb (_ee ,_fgg ,_gee );if _egd ==nil {return code {},false ;};return *_egd ,true ;};func _abf (_fdd int )([]byte ,int ){var _ddfd []byte ;for _gdce :=0;_gdce < 6;_gdce ++{_ddfd ,_fdd =_gdcc (_ddfd ,_fdd ,_ef );};return _ddfd ,_fdd %8;};func (_bacg *Encoder )encodeG4 (_gba [][]byte )[]byte {_cfdc :=make ([][]byte ,len (_gba ));copy (_cfdc ,_gba );_cfdc =_degc (_cfdc );var _edd []byte ;var _fab int ;for _gaba :=1;_gaba < len (_cfdc );_gaba ++{if _bacg .Rows > 0&&!_bacg .EndOfBlock &&_gaba ==(_bacg .Rows +1){break ;};var _fgd []byte ;var _gbe ,_abbd ,_gbad int ;_fbeg :=_fab ;_fccd :=-1;for _fccd < len (_cfdc [_gaba ]){_gbe =_fbgf (_cfdc [_gaba ],_fccd );_abbd =_add (_cfdc [_gaba ],_cfdc [_gaba -1],_fccd );_gbad =_fbgf (_cfdc [_gaba -1],_abbd );if _gbad < _gbe {_fgd ,_fbeg =_gdcc (_fgd ,_fbeg ,_d );_fccd =_gbad ;}else {if _g .Abs (float64 (_abbd -_gbe ))> 3{_fgd ,_fbeg ,_fccd =_gggd (_cfdc [_gaba ],_fgd ,_fbeg ,_fccd ,_gbe );}else {_fgd ,_fbeg =_aaa (_fgd ,_fbeg ,_gbe ,_abbd );_fccd =_gbe ;};};};_edd =_bacg .appendEncodedRow (_edd ,_fgd ,_fab );if _bacg .EncodedByteAlign {_fbeg =0;};_fab =_fbeg %8;};if _bacg .EndOfBlock {_gdbg ,_ :=_gag (_fab );_edd =_bacg .appendEncodedRow (_edd ,_gdbg ,_fab );};return _edd ;};func (_ad *Encoder )Decode (encoded []byte )([][]byte ,error ){if _ad .BlackIs1 {_gde =0;_bgd =1;}else {_gde =1;_bgd =0;};if _ad .K ==0{return _ad .decodeG31D (encoded );};if _ad .K > 0{return _ad .decodeG32D (encoded );};if _ad .K < 4{return _ad .decodeG4 (encoded );};return nil ,nil ;};func _eccb (_ege ,_aeg []byte ,_eeb int ,_fbg bool ,_bce int )([]byte ,int ,int ,error ){_bf :=_eeb ;var _ebd error ;_aeg ,_eeb ,_ebd =_ead (_ege ,_aeg ,_eeb ,_fbg );if _ebd !=nil {return _aeg ,_bf ,_bce ,_ebd ;};_fbg =!_fbg ;_aeg ,_eeb ,_ebd =_ead (_ege ,_aeg ,_eeb ,_fbg );if _ebd !=nil {return _aeg ,_bf ,_bce ,_ebd ;};_bce =len (_aeg );return _aeg ,_eeb ,_bce ,nil ;};func _ada (_dgg []byte ,_ccc bool ,_gdb int )[]byte {if _gdb < 0{return _dgg ;};_bfc :=make ([]byte ,_gdb );if _ccc {for _eccg :=0;_eccg < len (_bfc );_eccg ++{_bfc [_eccg ]=_gde ;};}else {for _bge :=0;_bge < len (_bfc );_bge ++{_bfc [_bge ]=_bgd ;};};_dgg =append (_dgg ,_bfc ...);return _dgg ;};func _gc (_febe [][]byte ,_ab []byte ,_be bool ,_ddd ,_bg int )([]byte ,int ){_acg :=_cae (_ab ,_febe [len (_febe )-1],_ddd ,_be );_aa :=_acg +_bg ;if _ddd ==-1{_ab =_ada (_ab ,_be ,_aa -_ddd -1);}else {_ab =_ada (_ab ,_be ,_aa -_ddd );};_ddd =_aa ;return _ab ,_ddd ;};func _ggc (_ggb uint16 ,_dgf int )byte {if _dgf < 8{_ggb >>=8;};_dgf %=8;_fccc :=byte (0x01<<(7-uint (_dgf )));return (byte (_ggb )&_fccc )>>(7-uint (_dgf ));};func _ead (_cce ,_gfae []byte ,_bed int ,_df bool )([]byte ,int ,error ){_geb :=_bed ;var _ecbc int ;for _ecbc ,_bed =_bee (_cce ,_bed ,_df );_ecbc !=-1;_ecbc ,_bed =_bee (_cce ,_bed ,_df ){_gfae =_ada (_gfae ,_df ,_ecbc );if _ecbc < 64{break ;};};if _ecbc ==-1{return _gfae ,_geb ,_cc ;};return _gfae ,_bed ,nil ;};var (_ec =_a .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_ba =_a .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_cc =_a .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_ff =_a .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_edc =_a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_cca =_a .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func (_gacc *Encoder )encodeG32D (_fgf [][]byte )[]byte {var _fef []byte ;var _cfd int ;for _fad :=0;_fad < len (_fgf );_fad +=_gacc .K {if _gacc .Rows > 0&&!_gacc .EndOfBlock &&_fad ==_gacc .Rows {break ;};_fea ,_agaa :=_bag (_fgf [_fad ],_cfd ,_ef );_fef =_gacc .appendEncodedRow (_fef ,_fea ,_cfd );if _gacc .EncodedByteAlign {_agaa =0;};_cfd =_agaa ;for _deg :=_fad +1;_deg < (_fad +_gacc .K )&&_deg < len (_fgf );_deg ++{if _gacc .Rows > 0&&!_gacc .EndOfBlock &&_deg ==_gacc .Rows {break ;};_bba ,_ccdc :=_gdcc (nil ,_cfd ,_ebe );var _eag ,_edb ,_fdeg int ;_dfe :=-1;for _dfe < len (_fgf [_deg ]){_eag =_fbgf (_fgf [_deg ],_dfe );_edb =_add (_fgf [_deg ],_fgf [_deg -1],_dfe );_fdeg =_fbgf (_fgf [_deg -1],_edb );if _fdeg < _eag {_bba ,_ccdc =_ccda (_bba ,_ccdc );_dfe =_fdeg ;}else {if _g .Abs (float64 (_edb -_eag ))> 3{_bba ,_ccdc ,_dfe =_gggd (_fgf [_deg ],_bba ,_ccdc ,_dfe ,_eag );}else {_bba ,_ccdc =_aaa (_bba ,_ccdc ,_eag ,_edb );_dfe =_eag ;};};};_fef =_gacc .appendEncodedRow (_fef ,_bba ,_cfd );if _gacc .EncodedByteAlign {_ccdc =0;};_cfd =_ccdc %8;};};if _gacc .EndOfBlock {_beb ,_ :=_abf (_cfd );_fef =_gacc .appendEncodedRow (_fef ,_beb ,_cfd );};return _fef ;};func _bag (_gcb []byte ,_gdcaa int ,_dggd code )([]byte ,int ){_abe :=true ;var _ece []byte ;_ece ,_gdcaa =_gdcc (nil ,_gdcaa ,_dggd );_cacc :=0;var _ccdb int ;for _cacc < len (_gcb ){_ccdb ,_cacc =_bfcb (_gcb ,_abe ,_cacc );_ece ,_gdcaa =_dad (_ece ,_gdcaa ,_ccdb ,_abe );_abe =!_abe ;};return _ece ,_gdcaa %8;};