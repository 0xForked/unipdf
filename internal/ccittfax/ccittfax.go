//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_c "errors";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_e "io";_d "math";);var (_gc =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_egd =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func init (){_ba =&treeNode {_aaag :true ,_aaac :_eb };_f =&treeNode {_aaac :_dee ,_aabf :_ba };_f ._efag =_f ;_fe =&tree {_dcbc :&treeNode {}};if _fb :=_fe .fillWithNode (12,0,_f );_fb !=nil {panic (_fb .Error ());};if _ab :=_fe .fillWithNode (12,1,_ba );
_ab !=nil {panic (_ab .Error ());};_de =&tree {_dcbc :&treeNode {}};for _bd :=0;_bd < len (_fbe );_bd ++{for _cg :=0;_cg < len (_fbe [_bd ]);_cg ++{if _ddb :=_de .fill (_bd +2,int (_fbe [_bd ][_cg ]),int (_deeg [_bd ][_cg ]));_ddb !=nil {panic (_ddb .Error ());
};};};if _bg :=_de .fillWithNode (12,0,_f );_bg !=nil {panic (_bg .Error ());};if _bgc :=_de .fillWithNode (12,1,_ba );_bgc !=nil {panic (_bgc .Error ());};_a =&tree {_dcbc :&treeNode {}};for _df :=0;_df < len (_dge );_df ++{for _bdd :=0;_bdd < len (_dge [_df ]);
_bdd ++{if _dg :=_a .fill (_df +4,int (_dge [_df ][_bdd ]),int (_ad [_df ][_bdd ]));_dg !=nil {panic (_dg .Error ());};};};if _fea :=_a .fillWithNode (12,0,_f );_fea !=nil {panic (_fea .Error ());};if _eg :=_a .fillWithNode (12,1,_ba );_eg !=nil {panic (_eg .Error ());
};_ec =&tree {_dcbc :&treeNode {}};if _dfb :=_ec .fill (4,1,_dd );_dfb !=nil {panic (_dfb .Error ());};if _cd :=_ec .fill (3,1,_ce );_cd !=nil {panic (_cd .Error ());};if _cf :=_ec .fill (1,1,0);_cf !=nil {panic (_cf .Error ());};if _fa :=_ec .fill (3,3,1);
_fa !=nil {panic (_fa .Error ());};if _gf :=_ec .fill (6,3,2);_gf !=nil {panic (_gf .Error ());};if _fc :=_ec .fill (7,3,3);_fc !=nil {panic (_fc .Error ());};if _db :=_ec .fill (3,2,-1);_db !=nil {panic (_db .Error ());};if _deb :=_ec .fill (6,2,-2);_deb !=nil {panic (_deb .Error ());
};if _ge :=_ec .fill (7,2,-3);_ge !=nil {panic (_ge .Error ());};};func _fgg (_abf []byte ,_gcc int )([]byte ,int ){return _aede (_abf ,_gcc ,_cee )};func (_cdf *Decoder )Read (in []byte )(int ,error ){if _cdf ._fed !=nil {return 0,_cdf ._fed ;};_fba :=len (in );
var (_ff int ;_bfe int ;);for _fba !=0{if _cdf ._gac >=_cdf ._ef {if _bb :=_cdf .fetch ();_bb !=nil {_cdf ._fed =_bb ;return 0,_bb ;};};if _cdf ._ef ==-1{return _ff ,_e .EOF ;};switch {case _fba <=_cdf ._ef -_cdf ._gac :_ccb :=_cdf ._ed [_cdf ._gac :_cdf ._gac +_fba ];
for _ ,_dbe :=range _ccb {if !_cdf ._cae {_dbe =^_dbe ;};in [_bfe ]=_dbe ;_bfe ++;};_ff +=len (_ccb );_cdf ._gac +=len (_ccb );return _ff ,nil ;default:_ffb :=_cdf ._ed [_cdf ._gac :];for _ ,_fcc :=range _ffb {if !_cdf ._cae {_fcc =^_fcc ;};in [_bfe ]=_fcc ;
_bfe ++;};_ff +=len (_ffb );_cdf ._gac +=len (_ffb );_fba -=len (_ffb );};};return _ff ,nil ;};func _eaa (_dbea int )([]byte ,int ){var _gbg []byte ;for _bc :=0;_bc < 2;_bc ++{_gbg ,_dbea =_aede (_gbg ,_dbea ,_cgb );};return _gbg ,_dbea %8;};func (_cddg *Encoder )appendEncodedRow (_fbbb ,_gfcf []byte ,_ddga int )[]byte {if len (_fbbb )> 0&&_ddga !=0&&!_cddg .EncodedByteAlign {_fbbb [len (_fbbb )-1]=_fbbb [len (_fbbb )-1]|_gfcf [0];
_fbbb =append (_fbbb ,_gfcf [1:]...);}else {_fbbb =append (_fbbb ,_gfcf ...);};return _fbbb ;};var _dge =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_gec tiffType )String ()string {switch _gec {case _bfc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";case _gfe :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";
case _faa :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func init (){_ade =make (map[int ]code );_ade [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ade [1]=code {Code :2<<(5+8),BitsWritten :3};
_ade [2]=code {Code :3<<(6+8),BitsWritten :2};_ade [3]=code {Code :2<<(6+8),BitsWritten :2};_ade [4]=code {Code :3<<(5+8),BitsWritten :3};_ade [5]=code {Code :3<<(4+8),BitsWritten :4};_ade [6]=code {Code :2<<(4+8),BitsWritten :4};_ade [7]=code {Code :3<<(3+8),BitsWritten :5};
_ade [8]=code {Code :5<<(2+8),BitsWritten :6};_ade [9]=code {Code :4<<(2+8),BitsWritten :6};_ade [10]=code {Code :4<<(1+8),BitsWritten :7};_ade [11]=code {Code :5<<(1+8),BitsWritten :7};_ade [12]=code {Code :7<<(1+8),BitsWritten :7};_ade [13]=code {Code :4<<8,BitsWritten :8};
_ade [14]=code {Code :7<<8,BitsWritten :8};_ade [15]=code {Code :12<<8,BitsWritten :9};_ade [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ade [17]=code {Code :6<<8,BitsWritten :10};_ade [18]=code {Code :2<<8,BitsWritten :10};_ade [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_ade [20]=code {Code :13<<8,BitsWritten :11};_ade [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ade [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ade [23]=code {Code :5<<8,BitsWritten :11};_ade [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ade [25]=code {Code :3<<8,BitsWritten :11};
_ade [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ade [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ade [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ade [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ade [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_ade [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ade [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ade [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ade [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ade [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ade [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_ade [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ade [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ade [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ade [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ade [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ade [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_ade [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ade [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ade [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ade [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ade [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ade [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_ade [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ade [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ade [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ade [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ade [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ade [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_ade [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ade [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ade [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ade [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ade [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ade [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_ade [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ade [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ade [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ae =make (map[int ]code );_ae [0]=code {Code :53<<8,BitsWritten :8};_ae [1]=code {Code :7<<(2+8),BitsWritten :6};
_ae [2]=code {Code :7<<(4+8),BitsWritten :4};_ae [3]=code {Code :8<<(4+8),BitsWritten :4};_ae [4]=code {Code :11<<(4+8),BitsWritten :4};_ae [5]=code {Code :12<<(4+8),BitsWritten :4};_ae [6]=code {Code :14<<(4+8),BitsWritten :4};_ae [7]=code {Code :15<<(4+8),BitsWritten :4};
_ae [8]=code {Code :19<<(3+8),BitsWritten :5};_ae [9]=code {Code :20<<(3+8),BitsWritten :5};_ae [10]=code {Code :7<<(3+8),BitsWritten :5};_ae [11]=code {Code :8<<(3+8),BitsWritten :5};_ae [12]=code {Code :8<<(2+8),BitsWritten :6};_ae [13]=code {Code :3<<(2+8),BitsWritten :6};
_ae [14]=code {Code :52<<(2+8),BitsWritten :6};_ae [15]=code {Code :53<<(2+8),BitsWritten :6};_ae [16]=code {Code :42<<(2+8),BitsWritten :6};_ae [17]=code {Code :43<<(2+8),BitsWritten :6};_ae [18]=code {Code :39<<(1+8),BitsWritten :7};_ae [19]=code {Code :12<<(1+8),BitsWritten :7};
_ae [20]=code {Code :8<<(1+8),BitsWritten :7};_ae [21]=code {Code :23<<(1+8),BitsWritten :7};_ae [22]=code {Code :3<<(1+8),BitsWritten :7};_ae [23]=code {Code :4<<(1+8),BitsWritten :7};_ae [24]=code {Code :40<<(1+8),BitsWritten :7};_ae [25]=code {Code :43<<(1+8),BitsWritten :7};
_ae [26]=code {Code :19<<(1+8),BitsWritten :7};_ae [27]=code {Code :36<<(1+8),BitsWritten :7};_ae [28]=code {Code :24<<(1+8),BitsWritten :7};_ae [29]=code {Code :2<<8,BitsWritten :8};_ae [30]=code {Code :3<<8,BitsWritten :8};_ae [31]=code {Code :26<<8,BitsWritten :8};
_ae [32]=code {Code :27<<8,BitsWritten :8};_ae [33]=code {Code :18<<8,BitsWritten :8};_ae [34]=code {Code :19<<8,BitsWritten :8};_ae [35]=code {Code :20<<8,BitsWritten :8};_ae [36]=code {Code :21<<8,BitsWritten :8};_ae [37]=code {Code :22<<8,BitsWritten :8};
_ae [38]=code {Code :23<<8,BitsWritten :8};_ae [39]=code {Code :40<<8,BitsWritten :8};_ae [40]=code {Code :41<<8,BitsWritten :8};_ae [41]=code {Code :42<<8,BitsWritten :8};_ae [42]=code {Code :43<<8,BitsWritten :8};_ae [43]=code {Code :44<<8,BitsWritten :8};
_ae [44]=code {Code :45<<8,BitsWritten :8};_ae [45]=code {Code :4<<8,BitsWritten :8};_ae [46]=code {Code :5<<8,BitsWritten :8};_ae [47]=code {Code :10<<8,BitsWritten :8};_ae [48]=code {Code :11<<8,BitsWritten :8};_ae [49]=code {Code :82<<8,BitsWritten :8};
_ae [50]=code {Code :83<<8,BitsWritten :8};_ae [51]=code {Code :84<<8,BitsWritten :8};_ae [52]=code {Code :85<<8,BitsWritten :8};_ae [53]=code {Code :36<<8,BitsWritten :8};_ae [54]=code {Code :37<<8,BitsWritten :8};_ae [55]=code {Code :88<<8,BitsWritten :8};
_ae [56]=code {Code :89<<8,BitsWritten :8};_ae [57]=code {Code :90<<8,BitsWritten :8};_ae [58]=code {Code :91<<8,BitsWritten :8};_ae [59]=code {Code :74<<8,BitsWritten :8};_ae [60]=code {Code :75<<8,BitsWritten :8};_ae [61]=code {Code :50<<8,BitsWritten :8};
_ae [62]=code {Code :51<<8,BitsWritten :8};_ae [63]=code {Code :52<<8,BitsWritten :8};_ga =make (map[int ]code );_ga [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ga [128]=code {Code :12<<8|8<<4,BitsWritten :12};_ga [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_ga [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ga [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ga [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ga [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ga [512]=code {Code :3<<8|12<<3,BitsWritten :13};_ga [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_ga [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ga [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ga [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ga [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ga [896]=code {Code :3<<8|18<<3,BitsWritten :13};_ga [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_ga [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ga [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ga [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ga [1216]=code {Code :119<<3,BitsWritten :13};_ga [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_ga [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_ga [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ga [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ga [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ga [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_ga [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_ga [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_gd =make (map[int ]code );_gd [64]=code {Code :27<<(3+8),BitsWritten :5};_gd [128]=code {Code :18<<(3+8),BitsWritten :5};_gd [192]=code {Code :23<<(2+8),BitsWritten :6};_gd [256]=code {Code :55<<(1+8),BitsWritten :7};
_gd [320]=code {Code :54<<8,BitsWritten :8};_gd [384]=code {Code :55<<8,BitsWritten :8};_gd [448]=code {Code :100<<8,BitsWritten :8};_gd [512]=code {Code :101<<8,BitsWritten :8};_gd [576]=code {Code :104<<8,BitsWritten :8};_gd [640]=code {Code :103<<8,BitsWritten :8};
_gd [704]=code {Code :102<<8,BitsWritten :9};_gd [768]=code {Code :102<<8|1<<7,BitsWritten :9};_gd [832]=code {Code :105<<8,BitsWritten :9};_gd [896]=code {Code :105<<8|1<<7,BitsWritten :9};_gd [960]=code {Code :106<<8,BitsWritten :9};_gd [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_gd [1088]=code {Code :107<<8,BitsWritten :9};_gd [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_gd [1216]=code {Code :108<<8,BitsWritten :9};_gd [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_gd [1344]=code {Code :109<<8,BitsWritten :9};_gd [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_gd [1472]=code {Code :76<<8,BitsWritten :9};_gd [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_gd [1600]=code {Code :77<<8,BitsWritten :9};_gd [1664]=code {Code :24<<(2+8),BitsWritten :6};_gd [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_gbe =make (map[int ]code );
_gbe [1792]=code {Code :1<<8,BitsWritten :11};_gbe [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_gbe [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_gbe [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_gbe [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_gbe [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_gbe [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_gbe [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_gbe [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_gbe [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_gbe [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_gbe [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_gbe [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_da =make (map[int ]byte );_da [0]=0xFF;_da [1]=0xFE;_da [2]=0xFC;_da [3]=0xF8;_da [4]=0xF0;_da [5]=0xE0;_da [6]=0xC0;_da [7]=0x80;_da [8]=0x00;};func (_aecg *tree )fillWithNode (_bcd ,_daga int ,_gedf *treeNode )error {_dcab :=_aecg ._dcbc ;
for _caab :=0;_caab < _bcd ;_caab ++{_cdg :=uint (_bcd -1-_caab );_dba :=((_daga >>_cdg )&1)!=0;_acc :=_dcab .walk (_dba );if _acc !=nil {if _acc ._aaag {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_dcab =_acc ;continue ;};if _caab ==_bcd -1{_acc =_gedf ;}else {_acc =&treeNode {};};if _daga ==0{_acc ._ede =true ;};_dcab .set (_dba ,_acc );_dcab =_acc ;};return nil ;};func _gffb (_dbb []byte ,_fbae int ,_fbga code )([]byte ,int ){_bebd :=true ;var _cfg []byte ;
_cfg ,_fbae =_aede (nil ,_fbae ,_fbga );_afc :=0;var _aaaf int ;for _afc < len (_dbb ){_aaaf ,_afc =_faag (_dbb ,_bebd ,_afc );_cfg ,_fbae =_dgec (_cfg ,_fbae ,_aaaf ,_bebd );_bebd =!_bebd ;};return _cfg ,_fbae %8;};func (_dc *Decoder )decoderRowType41D ()error {if _dc ._dad {_dc ._agg .Align ();
};_dc ._agg .Mark ();var (_bggc bool ;_agd error ;);if _dc ._fab {_bggc ,_agd =_dc .tryFetchEOL ();if _agd !=nil {return _agd ;};if !_bggc {return _egd ;};}else {_bggc ,_agd =_dc .looseFetchEOL ();if _agd !=nil {return _agd ;};};if !_bggc {_dc ._agg .Reset ();
};if _bggc &&_dc ._ddgc {_dc ._agg .Mark ();for _gaeg :=0;_gaeg < 5;_gaeg ++{_bggc ,_agd =_dc .tryFetchEOL ();if _agd !=nil {if _c .Is (_agd ,_e .EOF ){if _gaeg ==0{break ;};return _gc ;};};if _bggc {continue ;};if _gaeg > 0{return _gc ;};break ;};if _bggc {return _e .EOF ;
};_dc ._agg .Reset ();};if _agd =_dc .decode1D ();_agd !=nil {return _agd ;};return nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};var _ad =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func (_adf *Encoder )encodeG32D (_ada [][]byte )[]byte {var _eba []byte ;var _edd int ;for _bdda :=0;_bdda < len (_ada );_bdda +=_adf .K {if _adf .Rows > 0&&!_adf .EndOfBlock &&_bdda ==_adf .Rows {break ;};_deea ,_dfg :=_gffb (_ada [_bdda ],_edd ,_gg );
_eba =_adf .appendEncodedRow (_eba ,_deea ,_edd );if _adf .EncodedByteAlign {_dfg =0;};_edd =_dfg ;for _fedd :=_bdda +1;_fedd < (_bdda +_adf .K )&&_fedd < len (_ada );_fedd ++{if _adf .Rows > 0&&!_adf .EndOfBlock &&_fedd ==_adf .Rows {break ;};_dcb ,_ee :=_aede (nil ,_edd ,_ddg );
var _dgce ,_acf ,_fgf int ;_gbed :=-1;for _gbed < len (_ada [_fedd ]){_dgce =_cgee (_ada [_fedd ],_gbed );_acf =_gcd (_ada [_fedd ],_ada [_fedd -1],_gbed );_fgf =_cgee (_ada [_fedd -1],_acf );if _fgf < _dgce {_dcb ,_ee =_fgg (_dcb ,_ee );_gbed =_fgf ;}else {if _d .Abs (float64 (_acf -_dgce ))> 3{_dcb ,_ee ,_gbed =_fggg (_ada [_fedd ],_dcb ,_ee ,_gbed ,_dgce );
}else {_dcb ,_ee =_cgg (_dcb ,_ee ,_dgce ,_acf );_gbed =_dgce ;};};};_eba =_adf .appendEncodedRow (_eba ,_dcb ,_edd );if _adf .EncodedByteAlign {_ee =0;};_edd =_ee %8;};};if _adf .EndOfBlock {_baagd ,_ :=_gdd (_edd );_eba =_adf .appendEncodedRow (_eba ,_baagd ,_edd );
};return _eba ;};var _deeg =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_abc *Decoder )fetch ()error {if _abc ._ef ==-1{return nil ;};if _abc ._gac < _abc ._ef {return nil ;};_abc ._ef =0;_dag :=_abc .decodeRow ();if _dag !=nil {if !_c .Is (_dag ,_e .EOF ){return _dag ;};if _abc ._ef !=0{return _dag ;};_abc ._ef =-1;
};_abc ._gac =0;return nil ;};func (_dac *Decoder )getNextChangingElement (_aeb int ,_efb bool )int {_gdb :=0;if !_efb {_gdb =1;};_eda :=int (uint32 (_dac ._efg )&0xFFFFFFFE)+_gdb ;if _eda > 2{_eda -=2;};if _aeb ==0{return _eda ;};for _cbf :=_eda ;_cbf < _dac ._bfg ;
_cbf +=2{if _aeb < _dac ._cge [_cbf ]{_dac ._efg =_cbf ;return _cbf ;};};return -1;};func _cgee (_adea []byte ,_efcc int )int {if _efcc >=len (_adea ){return _efcc ;};if _efcc < -1{_efcc =-1;};var _bed byte ;if _efcc > -1{_bed =_adea [_efcc ];}else {_bed =_deee ;
};_agdg :=_efcc +1;for _agdg < len (_adea ){if _adea [_agdg ]!=_bed {break ;};_agdg ++;};return _agdg ;};type code struct{Code uint16 ;BitsWritten int ;};func (_gdf *Encoder )Encode (pixels [][]byte )[]byte {if _gdf .BlackIs1 {_deee =0;_cdb =1;}else {_deee =1;
_cdb =0;};if _gdf .K ==0{return _gdf .encodeG31D (pixels );};if _gdf .K > 0{return _gdf .encodeG32D (pixels );};if _gdf .K < 0{return _gdf .encodeG4 (pixels );};return nil ;};func _gdd (_ebad int )([]byte ,int ){var _ffd []byte ;for _efa :=0;_efa < 6;_efa ++{_ffd ,_ebad =_aede (_ffd ,_ebad ,_gg );
};return _ffd ,_ebad %8;};func _faag (_fac []byte ,_gbb bool ,_ffa int )(int ,int ){_ged :=0;for _ffa < len (_fac ){if _gbb {if _fac [_ffa ]!=_deee {break ;};}else {if _fac [_ffa ]!=_cdb {break ;};};_ged ++;_ffa ++;};return _ged ,_ffa ;};func (_bff *Decoder )looseFetchEOL ()(bool ,error ){_faf ,_daa :=_bff ._agg .ReadBits (12);
if _daa !=nil {return false ,_daa ;};switch _faf {case 0x1:return true ,nil ;case 0x0:for {_fbbf ,_feac :=_bff ._agg .ReadBool ();if _feac !=nil {return false ,_feac ;};if _fbbf {return true ,nil ;};};default:return false ,nil ;};};func (_gda *Decoder )decodeRun (_bdb *tree )(int ,error ){var _gdgf int ;
_fd :=_bdb ._dcbc ;for {_cfe ,_egda :=_gda ._agg .ReadBool ();if _egda !=nil {return 0,_egda ;};_fd =_fd .walk (_cfe );if _fd ==nil {return 0,_c .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _fd ._aaag {_gdgf +=_fd ._aaac ;switch {case _fd ._aaac >=64:_fd =_bdb ._dcbc ;case _fd ._aaac >=0:return _gdgf ,nil ;default:return _gda ._ea ,nil ;};};};};var (_ade map[int ]code ;_ae map[int ]code ;_ga map[int ]code ;_gd map[int ]code ;_gbe map[int ]code ;
_da map[int ]byte ;_cgb =code {Code :1<<4,BitsWritten :12};_gg =code {Code :3<<3,BitsWritten :13};_ddg =code {Code :2<<3,BitsWritten :13};_cee =code {Code :1<<12,BitsWritten :4};_bdg =code {Code :1<<13,BitsWritten :3};_bf =code {Code :1<<15,BitsWritten :1};
_adg =code {Code :3<<13,BitsWritten :3};_cb =code {Code :3<<10,BitsWritten :6};_cfb =code {Code :3<<9,BitsWritten :7};_baa =code {Code :2<<13,BitsWritten :3};_gef =code {Code :2<<10,BitsWritten :6};_bgf =code {Code :2<<9,BitsWritten :7};);func _gdbd (_gbc int )([]byte ,int ){var _abeb []byte ;
for _dcac :=0;_dcac < 6;_dcac ++{_abeb ,_gbc =_aede (_abeb ,_gbc ,_cgb );};return _abeb ,_gbc %8;};func (_fagb *Decoder )tryFetchEOL1 ()(bool ,error ){_dacg ,_bac :=_fagb ._agg .ReadBits (13);if _bac !=nil {return false ,_bac ;};return _dacg ==0x3,nil ;
};func (_bad *Decoder )tryFetchEOL ()(bool ,error ){_ccg ,_fag :=_bad ._agg .ReadBits (12);if _fag !=nil {return false ,_fag ;};return _ccg ==0x1,nil ;};type Decoder struct{_ea int ;_aa int ;_bde int ;_ed []byte ;_ca int ;_gcb bool ;_cc bool ;_geg bool ;
_cae bool ;_fab bool ;_ddgc bool ;_dad bool ;_ef int ;_gac int ;_cge []int ;_bdf []int ;_bfg int ;_af int ;_gdg int ;_efg int ;_agg *_b .Reader ;_dadf tiffType ;_fed error ;};func (_bef *treeNode )set (_aega bool ,_gab *treeNode ){if !_aega {_bef ._efag =_gab ;
}else {_bef ._aabf =_gab ;};};func (_cda *Decoder )decodeRowType4 ()error {if !_cda ._gcb {return _cda .decoderRowType41D ();};if _cda ._dad {_cda ._agg .Align ();};_cda ._agg .Mark ();_eaf ,_baag :=_cda .tryFetchEOL ();if _baag !=nil {return _baag ;};
if !_eaf &&_cda ._fab {_cda ._gdg ++;if _cda ._gdg > _cda ._ca {return _egd ;};_cda ._agg .Reset ();};if !_eaf {_cda ._agg .Reset ();};_egc ,_baag :=_cda ._agg .ReadBool ();if _baag !=nil {return _baag ;};if _egc {if _eaf &&_cda ._ddgc {if _baag =_cda .tryFetchRTC2D ();
_baag !=nil {return _baag ;};};_baag =_cda .decode1D ();}else {_baag =_cda .decode2D ();};if _baag !=nil {return _baag ;};return nil ;};func _dgec (_feb []byte ,_ebe int ,_aab int ,_dab bool )([]byte ,int ){var (_bbe code ;_fgdg bool ;);for !_fgdg {_bbe ,_aab ,_fgdg =_efbc (_aab ,_dab );
_feb ,_ebe =_aede (_feb ,_ebe ,_bbe );};return _feb ,_ebe ;};type treeNode struct{_efag *treeNode ;_aabf *treeNode ;_aaac int ;_ede bool ;_aaag bool ;};func (_egg *Encoder )encodeG4 (_ddbe [][]byte )[]byte {_ebab :=make ([][]byte ,len (_ddbe ));copy (_ebab ,_ddbe );
_ebab =_agce (_ebab );var _aga []byte ;var _bge int ;for _gbf :=1;_gbf < len (_ebab );_gbf ++{if _egg .Rows > 0&&!_egg .EndOfBlock &&_gbf ==(_egg .Rows +1){break ;};var _efc []byte ;var _abca ,_fdfc ,_bbc int ;_dca :=_bge ;_fga :=-1;for _fga < len (_ebab [_gbf ]){_abca =_cgee (_ebab [_gbf ],_fga );
_fdfc =_gcd (_ebab [_gbf ],_ebab [_gbf -1],_fga );_bbc =_cgee (_ebab [_gbf -1],_fdfc );if _bbc < _abca {_efc ,_dca =_aede (_efc ,_dca ,_cee );_fga =_bbc ;}else {if _d .Abs (float64 (_fdfc -_abca ))> 3{_efc ,_dca ,_fga =_fggg (_ebab [_gbf ],_efc ,_dca ,_fga ,_abca );
}else {_efc ,_dca =_cgg (_efc ,_dca ,_abca ,_fdfc );_fga =_abca ;};};};_aga =_egg .appendEncodedRow (_aga ,_efc ,_bge );if _egg .EncodedByteAlign {_dca =0;};_bge =_dca %8;};if _egg .EndOfBlock {_bfee ,_ :=_eaa (_bge );_aga =_egg .appendEncodedRow (_aga ,_bfee ,_bge );
};return _aga ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};const (_ tiffType =iota ;_bfc ;_gfe ;_faa ;);var _fbe =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_ebg *Decoder )decode2D ()error {_ebg ._bfg =_ebg ._af ;_ebg ._bdf ,_ebg ._cge =_ebg ._cge ,_ebg ._bdf ;_ffbg :=true ;var (_cac bool ;_ffc int ;_beg error ;);_ebg ._af =0;_fge :for _ffc < _ebg ._ea {_fbd :=_ec ._dcbc ;for {_cac ,_beg =_ebg ._agg .ReadBool ();
if _beg !=nil {return _beg ;};_fbd =_fbd .walk (_cac );if _fbd ==nil {continue _fge ;};if !_fbd ._aaag {continue ;};switch _fbd ._aaac {case _ce :var _egf int ;if _ffbg {_egf ,_beg =_ebg .decodeRun (_a );}else {_egf ,_beg =_ebg .decodeRun (_de );};if _beg !=nil {return _beg ;
};_ffc +=_egf ;_ebg ._bdf [_ebg ._af ]=_ffc ;_ebg ._af ++;if _ffbg {_egf ,_beg =_ebg .decodeRun (_de );}else {_egf ,_beg =_ebg .decodeRun (_a );};if _beg !=nil {return _beg ;};_ffc +=_egf ;_ebg ._bdf [_ebg ._af ]=_ffc ;_ebg ._af ++;case _dd :_bbd :=_ebg .getNextChangingElement (_ffc ,_ffbg )+1;
if _bbd >=_ebg ._bfg {_ffc =_ebg ._ea ;}else {_ffc =_ebg ._cge [_bbd ];};default:_fff :=_ebg .getNextChangingElement (_ffc ,_ffbg );if _fff >=_ebg ._bfg ||_fff ==-1{_ffc =_ebg ._ea +_fbd ._aaac ;}else {_ffc =_ebg ._cge [_fff ]+_fbd ._aaac ;};_ebg ._bdf [_ebg ._af ]=_ffc ;
_ebg ._af ++;_ffbg =!_ffbg ;};continue _fge ;};};return nil ;};func _ggc (_gbcf ,_aggf []byte ,_eea int ,_ecc bool )int {_cec :=_cgee (_aggf ,_eea );if _cec < len (_aggf )&&(_eea ==-1&&_aggf [_cec ]==_deee ||_eea >=0&&_eea < len (_gbcf )&&_gbcf [_eea ]==_aggf [_cec ]||_eea >=len (_gbcf )&&_ecc &&_aggf [_cec ]==_deee ||_eea >=len (_gbcf )&&!_ecc &&_aggf [_cec ]==_cdb ){_cec =_cgee (_aggf ,_cec );
};return _cec ;};var (_ba *treeNode ;_f *treeNode ;_de *tree ;_a *tree ;_fe *tree ;_ec *tree ;_eb =-2000;_dee =-1000;_dd =-3000;_ce =-4000;);var (_deee byte =1;_cdb byte =0;);func (_gee *Decoder )tryFetchRTC2D ()(_ebge error ){_gee ._agg .Mark ();var _fgd bool ;
for _cdac :=0;_cdac < 5;_cdac ++{_fgd ,_ebge =_gee .tryFetchEOL1 ();if _ebge !=nil {if _c .Is (_ebge ,_e .EOF ){if _cdac ==0{break ;};return _gc ;};};if _fgd {continue ;};if _cdac > 0{return _gc ;};break ;};if _fgd {return _e .EOF ;};_gee ._agg .Reset ();
return _ebge ;};func _gdc (_efac ,_dcbg int )code {var _ffcf code ;switch _dcbg -_efac {case -1:_ffcf =_adg ;case -2:_ffcf =_cb ;case -3:_ffcf =_cfb ;case 0:_ffcf =_bf ;case 1:_ffcf =_baa ;case 2:_ffcf =_gef ;case 3:_ffcf =_bgf ;};return _ffcf ;};func (_bee *Decoder )decodeG32D ()error {_bee ._bfg =_bee ._af ;
_bee ._bdf ,_bee ._cge =_bee ._cge ,_bee ._bdf ;_aaf :=true ;var (_abe bool ;_dfa int ;_bae error ;);_bee ._af =0;_dff :for _dfa < _bee ._ea {_dffd :=_ec ._dcbc ;for {_abe ,_bae =_bee ._agg .ReadBool ();if _bae !=nil {return _bae ;};_dffd =_dffd .walk (_abe );
if _dffd ==nil {continue _dff ;};if !_dffd ._aaag {continue ;};switch _dffd ._aaac {case _ce :var _aedf int ;if _aaf {_aedf ,_bae =_bee .decodeRun (_a );}else {_aedf ,_bae =_bee .decodeRun (_de );};if _bae !=nil {return _bae ;};_dfa +=_aedf ;_bee ._bdf [_bee ._af ]=_dfa ;
_bee ._af ++;if _aaf {_aedf ,_bae =_bee .decodeRun (_de );}else {_aedf ,_bae =_bee .decodeRun (_a );};if _bae !=nil {return _bae ;};_dfa +=_aedf ;_bee ._bdf [_bee ._af ]=_dfa ;_bee ._af ++;case _dd :_cgbf :=_bee .getNextChangingElement (_dfa ,_aaf )+1;
if _cgbf >=_bee ._bfg {_dfa =_bee ._ea ;}else {_dfa =_bee ._cge [_cgbf ];};default:_ecda :=_bee .getNextChangingElement (_dfa ,_aaf );if _ecda >=_bee ._bfg ||_ecda ==-1{_dfa =_bee ._ea +_dffd ._aaac ;}else {_dfa =_bee ._cge [_ecda ]+_dffd ._aaac ;};_bee ._bdf [_bee ._af ]=_dfa ;
_bee ._af ++;_aaf =!_aaf ;};continue _dff ;};};return nil ;};func (_eab *Decoder )decodeRowType6 ()error {if _eab ._dad {_eab ._agg .Align ();};if _eab ._ddgc {_eab ._agg .Mark ();_fcg ,_cbg :=_eab .tryFetchEOL ();if _cbg !=nil {return _cbg ;};if _fcg {_fcg ,_cbg =_eab .tryFetchEOL ();
if _cbg !=nil {return _cbg ;};if _fcg {return _e .EOF ;};};_eab ._agg .Reset ();};return _eab .decode2D ();};func _cgg (_gfcc []byte ,_bgge ,_cbe ,_aadc int )([]byte ,int ){_cce :=_gdc (_cbe ,_aadc );_gfcc ,_bgge =_aede (_gfcc ,_bgge ,_cce );return _gfcc ,_bgge ;
};func (_dgb *tree )fill (_gdbde ,_daab ,_eeab int )error {_aggb :=_dgb ._dcbc ;for _cfgf :=0;_cfgf < _gdbde ;_cfgf ++{_ebcf :=_gdbde -1-_cfgf ;_aggbb :=((_daab >>uint (_ebcf ))&1)!=0;_fcd :=_aggb .walk (_aggbb );if _fcd !=nil {if _fcd ._aaag {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_aggb =_fcd ;continue ;};_fcd =&treeNode {};if _cfgf ==_gdbde -1{_fcd ._aaac =_eeab ;_fcd ._aaag =true ;};if _daab ==0{_fcd ._ede =true ;};_aggb .set (_aggbb ,_fcd );_aggb =_fcd ;};return nil ;};type tiffType int ;func (_fbg *Decoder )decodeRowType2 ()error {if _fbg ._dad {_fbg ._agg .Align ();
};if _deg :=_fbg .decode1D ();_deg !=nil {return _deg ;};return nil ;};func (_cef *Decoder )decodeRow ()(_gae error ){if !_cef ._ddgc &&_cef ._aa > 0&&_cef ._aa ==_cef ._bde {return _e .EOF ;};switch _cef ._dadf {case _bfc :_gae =_cef .decodeRowType2 ();
case _gfe :_gae =_cef .decodeRowType4 ();case _faa :_gae =_cef .decodeRowType6 ();};if _gae !=nil {return _gae ;};_aed :=0;_aaa :=true ;_cef ._efg =0;for _bgg :=0;_bgg < _cef ._af ;_bgg ++{_cad :=_cef ._ea ;if _bgg !=_cef ._af {_cad =_cef ._bdf [_bgg ];
};if _cad > _cef ._ea {_cad =_cef ._ea ;};_bda :=_aed /8;for _aed %8!=0&&_cad -_aed > 0{var _fad byte ;if !_aaa {_fad =1<<uint (7-(_aed %8));};_cef ._ed [_bda ]|=_fad ;_aed ++;};if _aed %8==0{_bda =_aed /8;var _ebc byte ;if !_aaa {_ebc =0xff;};for _cad -_aed > 7{_cef ._ed [_bda ]=_ebc ;
_aed +=8;_bda ++;};};for _cad -_aed > 0{if _aed %8==0{_cef ._ed [_bda ]=0;};var _eca byte ;if !_aaa {_eca =1<<uint (7-(_aed %8));};_cef ._ed [_bda ]|=_eca ;_aed ++;};_aaa =!_aaa ;};if _aed !=_cef ._ea {return _c .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_cef ._ef =(_aed +7)/8;_cef ._bde ++;return nil ;};func _agce (_ddbd [][]byte )[][]byte {_caa :=make ([]byte ,len (_ddbd [0]));for _fbec :=range _caa {_caa [_fbec ]=_deee ;};_ddbd =append (_ddbd ,[]byte {});for _dbba :=len (_ddbd )-1;_dbba > 0;_dbba --{_ddbd [_dbba ]=_ddbd [_dbba -1];
};_ddbd [0]=_caa ;return _ddbd ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_fbb :=&Decoder {_agg :_b .NewReader (data ),_ea :options .Columns ,_aa :options .Rows ,_ca :options .DamagedRowsBeforeError ,_ed :make ([]byte ,(options .Columns +7)/8),_cge :make ([]int ,options .Columns +2),_bdf :make ([]int ,options .Columns +2),_dad :options .EncodedByteAligned ,_cae :options .BlackIsOne ,_fab :options .EndOfLine ,_ddgc :options .EndOfBlock };
switch {case options .K ==0:_fbb ._dadf =_gfe ;if len (data )< 20{return nil ,_c .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_abg :=data [:20];if _abg [0]!=0||(_abg [1]>>4!=1&&_abg [1]!=1){_fbb ._dadf =_bfc ;
_ggf :=(uint16 (_abg [0])<<8+uint16 (_abg [1]&0xff))>>4;for _ecd :=12;_ecd < 160;_ecd ++{_ggf =(_ggf <<1)+uint16 ((_abg [_ecd /8]>>uint16 (7-(_ecd %8)))&0x01);if _ggf &0xfff==1{_fbb ._dadf =_gfe ;break ;};};};case options .K < 0:_fbb ._dadf =_faa ;case options .K > 0:_fbb ._dadf =_gfe ;
_fbb ._gcb =true ;};switch _fbb ._dadf {case _bfc ,_gfe ,_faa :default:return nil ,_c .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _fbb ,nil ;};func (_caec *Decoder )decode1D ()error {var (_cde int ;_cea error ;);_ac :=true ;_caec ._af =0;for {var _gfc int ;if _ac {_gfc ,_cea =_caec .decodeRun (_a );}else {_gfc ,_cea =_caec .decodeRun (_de );};if _cea !=nil {return _cea ;
};_cde +=_gfc ;_caec ._bdf [_caec ._af ]=_cde ;_caec ._af ++;_ac =!_ac ;if _cde >=_caec ._ea {break ;};};return nil ;};func (_bcg *treeNode )walk (_ebeb bool )*treeNode {if _ebeb {return _bcg ._aabf ;};return _bcg ._efag ;};func (_aec *Encoder )encodeG31D (_ecf [][]byte )[]byte {var _dgc []byte ;
_fbf :=0;for _beb :=range _ecf {if _aec .Rows > 0&&!_aec .EndOfBlock &&_beb ==_aec .Rows {break ;};_aba ,_fdf :=_gffb (_ecf [_beb ],_fbf ,_cgb );_dgc =_aec .appendEncodedRow (_dgc ,_aba ,_fbf );if _aec .EncodedByteAlign {_fdf =0;};_fbf =_fdf ;};if _aec .EndOfBlock {_bebe ,_ :=_gdbd (_fbf );
_dgc =_aec .appendEncodedRow (_dgc ,_bebe ,_fbf );};return _dgc ;};func _fggg (_bgd ,_bacg []byte ,_bdeg ,_dda ,_fbeb int )([]byte ,int ,int ){_add :=_cgee (_bgd ,_fbeb );_dec :=_dda >=0&&_bgd [_dda ]==_deee ||_dda ==-1;_bacg ,_bdeg =_aede (_bacg ,_bdeg ,_bdg );
var _aegb int ;if _dda > -1{_aegb =_fbeb -_dda ;}else {_aegb =_fbeb -_dda -1;};_bacg ,_bdeg =_dgec (_bacg ,_bdeg ,_aegb ,_dec );_dec =!_dec ;_fbeg :=_add -_fbeb ;_bacg ,_bdeg =_dgec (_bacg ,_bdeg ,_fbeg ,_dec );_dda =_add ;return _bacg ,_bdeg ,_dda ;};
func _efbc (_abeg int ,_cbfb bool )(code ,int ,bool ){if _abeg < 64{if _cbfb {return _ae [_abeg ],0,true ;};return _ade [_abeg ],0,true ;};_dcacf :=_abeg /64;if _dcacf > 40{return _gbe [2560],_abeg -2560,false ;};if _dcacf > 27{return _gbe [_dcacf *64],_abeg -_dcacf *64,false ;
};if _cbfb {return _gd [_dcacf *64],_abeg -_dcacf *64,false ;};return _ga [_dcacf *64],_abeg -_dcacf *64,false ;};func _aede (_eddb []byte ,_adgf int ,_ebb code )([]byte ,int ){_aeg :=0;for _aeg < _ebb .BitsWritten {_ffg :=_adgf /8;_dfbb :=_adgf %8;if _ffg >=len (_eddb ){_eddb =append (_eddb ,0);
};_fdfe :=8-_dfbb ;_cdd :=_ebb .BitsWritten -_aeg ;if _fdfe > _cdd {_fdfe =_cdd ;};if _aeg < 8{_eddb [_ffg ]=_eddb [_ffg ]|byte (_ebb .Code >>uint (8+_dfbb -_aeg ))&_da [8-_fdfe -_dfbb ];}else {_eddb [_ffg ]=_eddb [_ffg ]|(byte (_ebb .Code <<uint (_aeg -8))&_da [8-_fdfe ])>>uint (_dfbb );
};_adgf +=_fdfe ;_aeg +=_fdfe ;};return _eddb ,_adgf ;};type tree struct{_dcbc *treeNode };func _gcd (_afb ,_aad []byte ,_agc int )int {_aea :=_cgee (_aad ,_agc );if _aea < len (_aad )&&(_agc ==-1&&_aad [_aea ]==_deee ||_agc >=0&&_agc < len (_afb )&&_afb [_agc ]==_aad [_aea ]||_agc >=len (_afb )&&_afb [_agc -1]!=_aad [_aea ]){_aea =_cgee (_aad ,_aea );
};return _aea ;};