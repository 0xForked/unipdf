//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_b "errors";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_d "io";_e "math";);func _cea (_ade int )([]byte ,int ){var _abb []byte ;for _fadc :=0;_fadc < 6;_fadc ++{_abb ,_ade =_efge (_abb ,_ade ,_ebf );};return _abb ,_ade %8;
};func init (){_f =&treeNode {_fcca :true ,_acfa :_fd };_da =&treeNode {_acfa :_fe ,_ege :_f };_da ._gbce =_da ;_dg =&tree {_efdd :&treeNode {}};if _fg :=_dg .fillWithNode (12,0,_da );_fg !=nil {panic (_fg .Error ());};if _eb :=_dg .fillWithNode (12,1,_f );
_eb !=nil {panic (_eb .Error ());};_bb =&tree {_efdd :&treeNode {}};for _ba :=0;_ba < len (_ae );_ba ++{for _ea :=0;_ea < len (_ae [_ba ]);_ea ++{if _cf :=_bb .fill (_ba +2,int (_ae [_ba ][_ea ]),int (_ab [_ba ][_ea ]));_cf !=nil {panic (_cf .Error ());
};};};if _eca :=_bb .fillWithNode (12,0,_da );_eca !=nil {panic (_eca .Error ());};if _cd :=_bb .fillWithNode (12,1,_f );_cd !=nil {panic (_cd .Error ());};_ac =&tree {_efdd :&treeNode {}};for _gg :=0;_gg < len (_ag );_gg ++{for _df :=0;_df < len (_ag [_gg ]);
_df ++{if _bba :=_ac .fill (_gg +4,int (_ag [_gg ][_df ]),int (_dad [_gg ][_df ]));_bba !=nil {panic (_bba .Error ());};};};if _be :=_ac .fillWithNode (12,0,_da );_be !=nil {panic (_be .Error ());};if _fb :=_ac .fillWithNode (12,1,_f );_fb !=nil {panic (_fb .Error ());
};_de =&tree {_efdd :&treeNode {}};if _ff :=_de .fill (4,1,_ge );_ff !=nil {panic (_ff .Error ());};if _fa :=_de .fill (3,1,_ec );_fa !=nil {panic (_fa .Error ());};if _dc :=_de .fill (1,1,0);_dc !=nil {panic (_dc .Error ());};if _bf :=_de .fill (3,3,1);
_bf !=nil {panic (_bf .Error ());};if _bec :=_de .fill (6,3,2);_bec !=nil {panic (_bec .Error ());};if _ebb :=_de .fill (7,3,3);_ebb !=nil {panic (_ebb .Error ());};if _bfg :=_de .fill (3,2,-1);_bfg !=nil {panic (_bfg .Error ());};if _fbd :=_de .fill (6,2,-2);
_fbd !=nil {panic (_fbd .Error ());};if _fc :=_de .fill (7,2,-3);_fc !=nil {panic (_fc .Error ());};};func (_cff *Decoder )decodeRun (_eea *tree )(int ,error ){var _bdg int ;_aaef :=_eea ._efdd ;for {_fgb ,_efg :=_cff ._dgg .ReadBool ();if _efg !=nil {return 0,_efg ;
};_aaef =_aaef .walk (_fgb );if _aaef ==nil {return 0,_b .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};if _aaef ._fcca {_bdg +=_aaef ._acfa ;
switch {case _aaef ._acfa >=64:_aaef =_eea ._efdd ;case _aaef ._acfa >=0:return _bdg ,nil ;default:return _cff ._cfd ,nil ;};};};};func _efb (_gfag []byte ,_eeg int )([]byte ,int ){return _efge (_gfag ,_eeg ,_aa )};type DecodeOptions struct{Columns int ;
Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_aae *Decoder )decodeRowType2 ()error {if _aae ._ecb {_aae ._dgg .Align ();};if _bbf :=_aae .decode1D ();_bbf !=nil {return _bbf ;
};return nil ;};func (_cca *Decoder )decodeG32D ()error {_cca ._bd =_cca ._baf ;_cca ._ed ,_cca ._becb =_cca ._becb ,_cca ._ed ;_dbb :=true ;var (_fcde bool ;_gaf int ;_dgcg error ;);_cca ._baf =0;_bcd :for _gaf < _cca ._cfd {_ggf :=_de ._efdd ;for {_fcde ,_dgcg =_cca ._dgg .ReadBool ();
if _dgcg !=nil {return _dgcg ;};_ggf =_ggf .walk (_fcde );if _ggf ==nil {continue _bcd ;};if !_ggf ._fcca {continue ;};switch _ggf ._acfa {case _ec :var _gbd int ;if _dbb {_gbd ,_dgcg =_cca .decodeRun (_ac );}else {_gbd ,_dgcg =_cca .decodeRun (_bb );};
if _dgcg !=nil {return _dgcg ;};_gaf +=_gbd ;_cca ._ed [_cca ._baf ]=_gaf ;_cca ._baf ++;if _dbb {_gbd ,_dgcg =_cca .decodeRun (_bb );}else {_gbd ,_dgcg =_cca .decodeRun (_ac );};if _dgcg !=nil {return _dgcg ;};_gaf +=_gbd ;_cca ._ed [_cca ._baf ]=_gaf ;
_cca ._baf ++;case _ge :_afe :=_cca .getNextChangingElement (_gaf ,_dbb )+1;if _afe >=_cca ._bd {_gaf =_cca ._cfd ;}else {_gaf =_cca ._becb [_afe ];};default:_gafd :=_cca .getNextChangingElement (_gaf ,_dbb );if _gafd >=_cca ._bd ||_gafd ==-1{_gaf =_cca ._cfd +_ggf ._acfa ;
}else {_gaf =_cca ._becb [_gafd ]+_ggf ._acfa ;};_cca ._ed [_cca ._baf ]=_gaf ;_cca ._baf ++;_dbb =!_dbb ;};continue _bcd ;};};return nil ;};func (_fbb *Decoder )decodeRowType4 ()error {if !_fbb ._ded {return _fbb .decoderRowType41D ();};if _fbb ._ecb {_fbb ._dgg .Align ();
};_fbb ._dgg .Mark ();_gfe ,_adf :=_fbb .tryFetchEOL ();if _adf !=nil {return _adf ;};if !_gfe &&_fbb ._ef {_fbb ._fgg ++;if _fbb ._fgg > _fbb ._gf {return _dfd ;};_fbb ._dgg .Reset ();};if !_gfe {_fbb ._dgg .Reset ();};_deb ,_adf :=_fbb ._dgg .ReadBool ();
if _adf !=nil {return _adf ;};if _deb {if _gfe &&_fbb ._fbe {if _adf =_fbb .tryFetchRTC2D ();_adf !=nil {return _adf ;};};_adf =_fbb .decode1D ();}else {_adf =_fbb .decode2D ();};if _adf !=nil {return _adf ;};return nil ;};func init (){_cfg =make (map[int ]code );
_cfg [0]=code {Code :13<<8|3<<6,BitsWritten :10};_cfg [1]=code {Code :2<<(5+8),BitsWritten :3};_cfg [2]=code {Code :3<<(6+8),BitsWritten :2};_cfg [3]=code {Code :2<<(6+8),BitsWritten :2};_cfg [4]=code {Code :3<<(5+8),BitsWritten :3};_cfg [5]=code {Code :3<<(4+8),BitsWritten :4};
_cfg [6]=code {Code :2<<(4+8),BitsWritten :4};_cfg [7]=code {Code :3<<(3+8),BitsWritten :5};_cfg [8]=code {Code :5<<(2+8),BitsWritten :6};_cfg [9]=code {Code :4<<(2+8),BitsWritten :6};_cfg [10]=code {Code :4<<(1+8),BitsWritten :7};_cfg [11]=code {Code :5<<(1+8),BitsWritten :7};
_cfg [12]=code {Code :7<<(1+8),BitsWritten :7};_cfg [13]=code {Code :4<<8,BitsWritten :8};_cfg [14]=code {Code :7<<8,BitsWritten :8};_cfg [15]=code {Code :12<<8,BitsWritten :9};_cfg [16]=code {Code :5<<8|3<<6,BitsWritten :10};_cfg [17]=code {Code :6<<8,BitsWritten :10};
_cfg [18]=code {Code :2<<8,BitsWritten :10};_cfg [19]=code {Code :12<<8|7<<5,BitsWritten :11};_cfg [20]=code {Code :13<<8,BitsWritten :11};_cfg [21]=code {Code :13<<8|4<<5,BitsWritten :11};_cfg [22]=code {Code :6<<8|7<<5,BitsWritten :11};_cfg [23]=code {Code :5<<8,BitsWritten :11};
_cfg [24]=code {Code :2<<8|7<<5,BitsWritten :11};_cfg [25]=code {Code :3<<8,BitsWritten :11};_cfg [26]=code {Code :12<<8|10<<4,BitsWritten :12};_cfg [27]=code {Code :12<<8|11<<4,BitsWritten :12};_cfg [28]=code {Code :12<<8|12<<4,BitsWritten :12};_cfg [29]=code {Code :12<<8|13<<4,BitsWritten :12};
_cfg [30]=code {Code :6<<8|8<<4,BitsWritten :12};_cfg [31]=code {Code :6<<8|9<<4,BitsWritten :12};_cfg [32]=code {Code :6<<8|10<<4,BitsWritten :12};_cfg [33]=code {Code :6<<8|11<<4,BitsWritten :12};_cfg [34]=code {Code :13<<8|2<<4,BitsWritten :12};_cfg [35]=code {Code :13<<8|3<<4,BitsWritten :12};
_cfg [36]=code {Code :13<<8|4<<4,BitsWritten :12};_cfg [37]=code {Code :13<<8|5<<4,BitsWritten :12};_cfg [38]=code {Code :13<<8|6<<4,BitsWritten :12};_cfg [39]=code {Code :13<<8|7<<4,BitsWritten :12};_cfg [40]=code {Code :6<<8|12<<4,BitsWritten :12};_cfg [41]=code {Code :6<<8|13<<4,BitsWritten :12};
_cfg [42]=code {Code :13<<8|10<<4,BitsWritten :12};_cfg [43]=code {Code :13<<8|11<<4,BitsWritten :12};_cfg [44]=code {Code :5<<8|4<<4,BitsWritten :12};_cfg [45]=code {Code :5<<8|5<<4,BitsWritten :12};_cfg [46]=code {Code :5<<8|6<<4,BitsWritten :12};_cfg [47]=code {Code :5<<8|7<<4,BitsWritten :12};
_cfg [48]=code {Code :6<<8|4<<4,BitsWritten :12};_cfg [49]=code {Code :6<<8|5<<4,BitsWritten :12};_cfg [50]=code {Code :5<<8|2<<4,BitsWritten :12};_cfg [51]=code {Code :5<<8|3<<4,BitsWritten :12};_cfg [52]=code {Code :2<<8|4<<4,BitsWritten :12};_cfg [53]=code {Code :3<<8|7<<4,BitsWritten :12};
_cfg [54]=code {Code :3<<8|8<<4,BitsWritten :12};_cfg [55]=code {Code :2<<8|7<<4,BitsWritten :12};_cfg [56]=code {Code :2<<8|8<<4,BitsWritten :12};_cfg [57]=code {Code :5<<8|8<<4,BitsWritten :12};_cfg [58]=code {Code :5<<8|9<<4,BitsWritten :12};_cfg [59]=code {Code :2<<8|11<<4,BitsWritten :12};
_cfg [60]=code {Code :2<<8|12<<4,BitsWritten :12};_cfg [61]=code {Code :5<<8|10<<4,BitsWritten :12};_cfg [62]=code {Code :6<<8|6<<4,BitsWritten :12};_cfg [63]=code {Code :6<<8|7<<4,BitsWritten :12};_af =make (map[int ]code );_af [0]=code {Code :53<<8,BitsWritten :8};
_af [1]=code {Code :7<<(2+8),BitsWritten :6};_af [2]=code {Code :7<<(4+8),BitsWritten :4};_af [3]=code {Code :8<<(4+8),BitsWritten :4};_af [4]=code {Code :11<<(4+8),BitsWritten :4};_af [5]=code {Code :12<<(4+8),BitsWritten :4};_af [6]=code {Code :14<<(4+8),BitsWritten :4};
_af [7]=code {Code :15<<(4+8),BitsWritten :4};_af [8]=code {Code :19<<(3+8),BitsWritten :5};_af [9]=code {Code :20<<(3+8),BitsWritten :5};_af [10]=code {Code :7<<(3+8),BitsWritten :5};_af [11]=code {Code :8<<(3+8),BitsWritten :5};_af [12]=code {Code :8<<(2+8),BitsWritten :6};
_af [13]=code {Code :3<<(2+8),BitsWritten :6};_af [14]=code {Code :52<<(2+8),BitsWritten :6};_af [15]=code {Code :53<<(2+8),BitsWritten :6};_af [16]=code {Code :42<<(2+8),BitsWritten :6};_af [17]=code {Code :43<<(2+8),BitsWritten :6};_af [18]=code {Code :39<<(1+8),BitsWritten :7};
_af [19]=code {Code :12<<(1+8),BitsWritten :7};_af [20]=code {Code :8<<(1+8),BitsWritten :7};_af [21]=code {Code :23<<(1+8),BitsWritten :7};_af [22]=code {Code :3<<(1+8),BitsWritten :7};_af [23]=code {Code :4<<(1+8),BitsWritten :7};_af [24]=code {Code :40<<(1+8),BitsWritten :7};
_af [25]=code {Code :43<<(1+8),BitsWritten :7};_af [26]=code {Code :19<<(1+8),BitsWritten :7};_af [27]=code {Code :36<<(1+8),BitsWritten :7};_af [28]=code {Code :24<<(1+8),BitsWritten :7};_af [29]=code {Code :2<<8,BitsWritten :8};_af [30]=code {Code :3<<8,BitsWritten :8};
_af [31]=code {Code :26<<8,BitsWritten :8};_af [32]=code {Code :27<<8,BitsWritten :8};_af [33]=code {Code :18<<8,BitsWritten :8};_af [34]=code {Code :19<<8,BitsWritten :8};_af [35]=code {Code :20<<8,BitsWritten :8};_af [36]=code {Code :21<<8,BitsWritten :8};
_af [37]=code {Code :22<<8,BitsWritten :8};_af [38]=code {Code :23<<8,BitsWritten :8};_af [39]=code {Code :40<<8,BitsWritten :8};_af [40]=code {Code :41<<8,BitsWritten :8};_af [41]=code {Code :42<<8,BitsWritten :8};_af [42]=code {Code :43<<8,BitsWritten :8};
_af [43]=code {Code :44<<8,BitsWritten :8};_af [44]=code {Code :45<<8,BitsWritten :8};_af [45]=code {Code :4<<8,BitsWritten :8};_af [46]=code {Code :5<<8,BitsWritten :8};_af [47]=code {Code :10<<8,BitsWritten :8};_af [48]=code {Code :11<<8,BitsWritten :8};
_af [49]=code {Code :82<<8,BitsWritten :8};_af [50]=code {Code :83<<8,BitsWritten :8};_af [51]=code {Code :84<<8,BitsWritten :8};_af [52]=code {Code :85<<8,BitsWritten :8};_af [53]=code {Code :36<<8,BitsWritten :8};_af [54]=code {Code :37<<8,BitsWritten :8};
_af [55]=code {Code :88<<8,BitsWritten :8};_af [56]=code {Code :89<<8,BitsWritten :8};_af [57]=code {Code :90<<8,BitsWritten :8};_af [58]=code {Code :91<<8,BitsWritten :8};_af [59]=code {Code :74<<8,BitsWritten :8};_af [60]=code {Code :75<<8,BitsWritten :8};
_af [61]=code {Code :50<<8,BitsWritten :8};_af [62]=code {Code :51<<8,BitsWritten :8};_af [63]=code {Code :52<<8,BitsWritten :8};_ga =make (map[int ]code );_ga [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ga [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_ga [192]=code {Code :12<<8|9<<4,BitsWritten :12};_ga [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ga [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ga [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ga [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ga [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_ga [576]=code {Code :3<<8|13<<3,BitsWritten :13};_ga [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ga [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ga [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ga [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ga [896]=code {Code :3<<8|18<<3,BitsWritten :13};
_ga [960]=code {Code :3<<8|19<<3,BitsWritten :13};_ga [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ga [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ga [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ga [1216]=code {Code :119<<3,BitsWritten :13};_ga [1280]=code {Code :2<<8|18<<3,BitsWritten :13};
_ga [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_ga [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ga [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ga [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ga [1600]=code {Code :2<<8|27<<3,BitsWritten :13};
_ga [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_ga [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_def =make (map[int ]code );_def [64]=code {Code :27<<(3+8),BitsWritten :5};_def [128]=code {Code :18<<(3+8),BitsWritten :5};_def [192]=code {Code :23<<(2+8),BitsWritten :6};
_def [256]=code {Code :55<<(1+8),BitsWritten :7};_def [320]=code {Code :54<<8,BitsWritten :8};_def [384]=code {Code :55<<8,BitsWritten :8};_def [448]=code {Code :100<<8,BitsWritten :8};_def [512]=code {Code :101<<8,BitsWritten :8};_def [576]=code {Code :104<<8,BitsWritten :8};
_def [640]=code {Code :103<<8,BitsWritten :8};_def [704]=code {Code :102<<8,BitsWritten :9};_def [768]=code {Code :102<<8|1<<7,BitsWritten :9};_def [832]=code {Code :105<<8,BitsWritten :9};_def [896]=code {Code :105<<8|1<<7,BitsWritten :9};_def [960]=code {Code :106<<8,BitsWritten :9};
_def [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_def [1088]=code {Code :107<<8,BitsWritten :9};_def [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_def [1216]=code {Code :108<<8,BitsWritten :9};_def [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_def [1344]=code {Code :109<<8,BitsWritten :9};
_def [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_def [1472]=code {Code :76<<8,BitsWritten :9};_def [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_def [1600]=code {Code :77<<8,BitsWritten :9};_def [1664]=code {Code :24<<(2+8),BitsWritten :6};_def [1728]=code {Code :77<<8|1<<7,BitsWritten :9};
_ca =make (map[int ]code );_ca [1792]=code {Code :1<<8,BitsWritten :11};_ca [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ca [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ca [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ca [2048]=code {Code :1<<8|3<<4,BitsWritten :12};
_ca [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_ca [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ca [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ca [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ca [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ca [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_ca [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ca [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_cg =make (map[int ]byte );_cg [0]=0xFF;_cg [1]=0xFE;_cg [2]=0xFC;_cg [3]=0xF8;_cg [4]=0xF0;_cg [5]=0xE0;_cg [6]=0xC0;_cg [7]=0x80;_cg [8]=0x00;};func _bgbg (_fcb []byte ,_cgaa int ,_aaf int ,_dafb bool )([]byte ,int ){var (_eff code ;
_geab bool ;);for !_geab {_eff ,_aaf ,_geab =_efcc (_aaf ,_dafb );_fcb ,_cgaa =_efge (_fcb ,_cgaa ,_eff );};return _fcb ,_cgaa ;};func _fcbf (_cfda []byte ,_caae ,_bdee ,_gcg int )([]byte ,int ){_cab :=_cef (_bdee ,_gcg );_cfda ,_caae =_efge (_cfda ,_caae ,_cab );
return _cfda ,_caae ;};func (_fdc *Decoder )decode2D ()error {_fdc ._bd =_fdc ._baf ;_fdc ._ed ,_fdc ._becb =_fdc ._becb ,_fdc ._ed ;_cdc :=true ;var (_fad bool ;_cb int ;_adb error ;);_fdc ._baf =0;_gebf :for _cb < _fdc ._cfd {_ce :=_de ._efdd ;for {_fad ,_adb =_fdc ._dgg .ReadBool ();
if _adb !=nil {return _adb ;};_ce =_ce .walk (_fad );if _ce ==nil {continue _gebf ;};if !_ce ._fcca {continue ;};switch _ce ._acfa {case _ec :var _cee int ;if _cdc {_cee ,_adb =_fdc .decodeRun (_ac );}else {_cee ,_adb =_fdc .decodeRun (_bb );};if _adb !=nil {return _adb ;
};_cb +=_cee ;_fdc ._ed [_fdc ._baf ]=_cb ;_fdc ._baf ++;if _cdc {_cee ,_adb =_fdc .decodeRun (_bb );}else {_cee ,_adb =_fdc .decodeRun (_ac );};if _adb !=nil {return _adb ;};_cb +=_cee ;_fdc ._ed [_fdc ._baf ]=_cb ;_fdc ._baf ++;case _ge :_gde :=_fdc .getNextChangingElement (_cb ,_cdc )+1;
if _gde >=_fdc ._bd {_cb =_fdc ._cfd ;}else {_cb =_fdc ._becb [_gde ];};default:_dedg :=_fdc .getNextChangingElement (_cb ,_cdc );if _dedg >=_fdc ._bd ||_dedg ==-1{_cb =_fdc ._cfd +_ce ._acfa ;}else {_cb =_fdc ._becb [_dedg ]+_ce ._acfa ;};_fdc ._ed [_fdc ._baf ]=_cb ;
_fdc ._baf ++;_cdc =!_cdc ;};continue _gebf ;};};return nil ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_bad :=&Decoder {_dgg :_a .NewReader (data ),_cfd :options .Columns ,_ead :options .Rows ,_gf :options .DamagedRowsBeforeError ,_gb :make ([]byte ,(options .Columns +7)/8),_becb :make ([]int ,options .Columns +2),_ed :make ([]int ,options .Columns +2),_ecb :options .EncodedByteAligned ,_cdfa :options .BlackIsOne ,_ef :options .EndOfLine ,_fbe :options .EndOfBlock };
switch {case options .K ==0:_bad ._bg =_fbg ;if len (data )< 20{return nil ,_b .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_ebbb :=data [:20];if _ebbb [0]!=0||(_ebbb [1]>>4!=1&&_ebbb [1]!=1){_bad ._bg =_cdd ;
_afg :=(uint16 (_ebbb [0])<<8+uint16 (_ebbb [1]&0xff))>>4;for _aac :=12;_aac < 160;_aac ++{_afg =(_afg <<1)+uint16 ((_ebbb [_aac /8]>>uint16 (7-(_aac %8)))&0x01);if _afg &0xfff==1{_bad ._bg =_fbg ;break ;};};};case options .K < 0:_bad ._bg =_eba ;case options .K > 0:_bad ._bg =_fbg ;
_bad ._ded =true ;};switch _bad ._bg {case _cdd ,_fbg ,_eba :default:return nil ,_b .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _bad ,nil ;};var (_gef =_b .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_dfd =_b .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_gga *Decoder )decodeRowType6 ()error {if _gga ._ecb {_gga ._dgg .Align ();};if _gga ._fbe {_gga ._dgg .Mark ();_fgc ,_fcc :=_gga .tryFetchEOL ();if _fcc !=nil {return _fcc ;};if _fgc {_fgc ,_fcc =_gga .tryFetchEOL ();if _fcc !=nil {return _fcc ;
};if _fgc {return _d .EOF ;};};_gga ._dgg .Reset ();};return _gga .decode2D ();};func (_ace tiffType )String ()string {switch _ace {case _cdd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _fbg :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _eba :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_cfgf *Encoder )encodeG32D (_gfa [][]byte )[]byte {var _fffa []byte ;
var _aab int ;for _gfg :=0;_gfg < len (_gfa );_gfg +=_cfgf .K {if _cfgf .Rows > 0&&!_cfgf .EndOfBlock &&_gfg ==_cfgf .Rows {break ;};_faf ,_fcfe :=_debf (_gfa [_gfg ],_aab ,_ebf );_fffa =_cfgf .appendEncodedRow (_fffa ,_faf ,_aab );if _cfgf .EncodedByteAlign {_fcfe =0;
};_aab =_fcfe ;for _caa :=_gfg +1;_caa < (_gfg +_cfgf .K )&&_caa < len (_gfa );_caa ++{if _cfgf .Rows > 0&&!_cfgf .EndOfBlock &&_caa ==_cfgf .Rows {break ;};_afgc ,_fgbe :=_efge (nil ,_aab ,_agd );var _cbea ,_aca ,_acf int ;_gbge :=-1;for _gbge < len (_gfa [_caa ]){_cbea =_dfdc (_gfa [_caa ],_gbge );
_aca =_ddf (_gfa [_caa ],_gfa [_caa -1],_gbge );_acf =_dfdc (_gfa [_caa -1],_aca );if _acf < _cbea {_afgc ,_fgbe =_efb (_afgc ,_fgbe );_gbge =_acf ;}else {if _e .Abs (float64 (_aca -_cbea ))> 3{_afgc ,_fgbe ,_gbge =_bde (_gfa [_caa ],_afgc ,_fgbe ,_gbge ,_cbea );
}else {_afgc ,_fgbe =_fcbf (_afgc ,_fgbe ,_cbea ,_aca );_gbge =_cbea ;};};};_fffa =_cfgf .appendEncodedRow (_fffa ,_afgc ,_aab );if _cfgf .EncodedByteAlign {_fgbe =0;};_aab =_fgbe %8;};};if _cfgf .EndOfBlock {_gcb ,_ :=_cea (_aab );_fffa =_cfgf .appendEncodedRow (_fffa ,_gcb ,_aab );
};return _fffa ;};func (_cggf *Encoder )Encode (pixels [][]byte )[]byte {if _cggf .BlackIs1 {_caga =0;_gcd =1;}else {_caga =1;_gcd =0;};if _cggf .K ==0{return _cggf .encodeG31D (pixels );};if _cggf .K > 0{return _cggf .encodeG32D (pixels );};if _cggf .K < 0{return _cggf .encodeG4 (pixels );
};return nil ;};func (_fff *Decoder )tryFetchEOL ()(bool ,error ){_dgd ,_gbg :=_fff ._dgg .ReadBits (12);if _gbg !=nil {return false ,_gbg ;};return _dgd ==0x1,nil ;};var (_caga byte =1;_gcd byte =0;);type tiffType int ;func (_cgg *Decoder )looseFetchEOL ()(bool ,error ){_cbe ,_bfe :=_cgg ._dgg .ReadBits (12);
if _bfe !=nil {return false ,_bfe ;};switch _cbe {case 0x1:return true ,nil ;case 0x0:for {_gabb ,_ggc :=_cgg ._dgg .ReadBool ();if _ggc !=nil {return false ,_ggc ;};if _gabb {return true ,nil ;};};default:return false ,nil ;};};func (_geb *Decoder )fetch ()error {if _geb ._gcf ==-1{return nil ;
};if _geb ._fga < _geb ._gcf {return nil ;};_geb ._gcf =0;_dacf :=_geb .decodeRow ();if _dacf !=nil {if !_b .Is (_dacf ,_d .EOF ){return _dacf ;};if _geb ._gcf !=0{return _dacf ;};_geb ._gcf =-1;};_geb ._fga =0;return nil ;};func (_gea *Decoder )decodeRow ()(_bff error ){if !_gea ._fbe &&_gea ._ead > 0&&_gea ._ead ==_gea ._aba {return _d .EOF ;
};switch _gea ._bg {case _cdd :_bff =_gea .decodeRowType2 ();case _fbg :_bff =_gea .decodeRowType4 ();case _eba :_bff =_gea .decodeRowType6 ();};if _bff !=nil {return _bff ;};_aga :=0;_dgc :=true ;_gea ._gbc =0;for _ebaa :=0;_ebaa < _gea ._baf ;_ebaa ++{_aec :=_gea ._cfd ;
if _ebaa !=_gea ._baf {_aec =_gea ._ed [_ebaa ];};if _aec > _gea ._cfd {_aec =_gea ._cfd ;};_db :=_aga /8;for _aga %8!=0&&_aec -_aga > 0{var _agc byte ;if !_dgc {_agc =1<<uint (7-(_aga %8));};_gea ._gb [_db ]|=_agc ;_aga ++;};if _aga %8==0{_db =_aga /8;
var _gd byte ;if !_dgc {_gd =0xff;};for _aec -_aga > 7{_gea ._gb [_db ]=_gd ;_aga +=8;_db ++;};};for _aec -_aga > 0{if _aga %8==0{_gea ._gb [_db ]=0;};var _ccg byte ;if !_dgc {_ccg =1<<uint (7-(_aga %8));};_gea ._gb [_db ]|=_ccg ;_aga ++;};_dgc =!_dgc ;
};if _aga !=_gea ._cfd {return _b .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_gea ._gcf =(_aga +7)/8;_gea ._aba ++;return nil ;};func _ddf (_fcec ,_bbc []byte ,_gac int )int {_cfb :=_dfdc (_bbc ,_gac );if _cfb < len (_bbc )&&(_gac ==-1&&_bbc [_cfb ]==_caga ||_gac >=0&&_gac < len (_fcec )&&_fcec [_gac ]==_bbc [_cfb ]||_gac >=len (_fcec )&&_fcec [_gac -1]!=_bbc [_cfb ]){_cfb =_dfdc (_bbc ,_cfb );
};return _cfb ;};func (_gaa *Decoder )getNextChangingElement (_aff int ,_ccc bool )int {_daf :=0;if !_ccc {_daf =1;};_gdd :=int (uint32 (_gaa ._gbc )&0xFFFFFFFE)+_daf ;if _gdd > 2{_gdd -=2;};if _aff ==0{return _gdd ;};for _gbcg :=_gdd ;_gbcg < _gaa ._bd ;
_gbcg +=2{if _aff < _gaa ._becb [_gbcg ]{_gaa ._gbc =_gbcg ;return _gbcg ;};};return -1;};func _gdc (_bgcg int )([]byte ,int ){var _acfe []byte ;for _dcde :=0;_dcde < 6;_dcde ++{_acfe ,_bgcg =_efge (_acfe ,_bgcg ,_ee );};return _acfe ,_bgcg %8;};func (_fdcd *Decoder )tryFetchEOL1 ()(bool ,error ){_eg ,_gbf :=_fdcd ._dgg .ReadBits (13);
if _gbf !=nil {return false ,_gbf ;};return _eg ==0x3,nil ;};var (_f *treeNode ;_da *treeNode ;_bb *tree ;_ac *tree ;_dg *tree ;_de *tree ;_fd =-2000;_fe =-1000;_ge =-3000;_ec =-4000;);type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;
Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};type Decoder struct{_cfd int ;_ead int ;_aba int ;_gb []byte ;_gf int ;_ded bool ;_cdf bool ;_baa bool ;_cdfa bool ;_ef bool ;_fbe bool ;_ecb bool ;_gcf int ;_fga int ;_becb []int ;
_ed []int ;_bd int ;_baf int ;_fgg int ;_gbc int ;_dgg *_a .Reader ;_bg tiffType ;_fce error ;};func (_cfgd *Encoder )encodeG31D (_ega [][]byte )[]byte {var _bed []byte ;_dged :=0;for _acg :=range _ega {if _cfgd .Rows > 0&&!_cfgd .EndOfBlock &&_acg ==_cfgd .Rows {break ;
};_ggb ,_dbd :=_debf (_ega [_acg ],_dged ,_ee );_bed =_cfgd .appendEncodedRow (_bed ,_ggb ,_dged );if _cfgd .EncodedByteAlign {_dbd =0;};_dged =_dbd ;};if _cfgd .EndOfBlock {_gefe ,_ :=_gdc (_dged );_bed =_cfgd .appendEncodedRow (_bed ,_gefe ,_dged );};
return _bed ;};func _debf (_ceg []byte ,_ebfa int ,_bgb code )([]byte ,int ){_bcb :=true ;var _agb []byte ;_agb ,_ebfa =_efge (nil ,_ebfa ,_bgb );_aedb :=0;var _bce int ;for _aedb < len (_ceg ){_bce ,_aedb =_aaca (_ceg ,_bcb ,_aedb );_agb ,_ebfa =_bgbg (_agb ,_ebfa ,_bce ,_bcb );
_bcb =!_bcb ;};return _agb ,_ebfa %8;};func _ddb (_abag [][]byte )[][]byte {_ecag :=make ([]byte ,len (_abag [0]));for _bfef :=range _ecag {_ecag [_bfef ]=_caga ;};_abag =append (_abag ,[]byte {});for _gdcg :=len (_abag )-1;_gdcg > 0;_gdcg --{_abag [_gdcg ]=_abag [_gdcg -1];
};_abag [0]=_ecag ;return _abag ;};func (_ffg *Decoder )decoderRowType41D ()error {if _ffg ._ecb {_ffg ._dgg .Align ();};_ffg ._dgg .Mark ();var (_ada bool ;_abc error ;);if _ffg ._ef {_ada ,_abc =_ffg .tryFetchEOL ();if _abc !=nil {return _abc ;};if !_ada {return _dfd ;
};}else {_ada ,_abc =_ffg .looseFetchEOL ();if _abc !=nil {return _abc ;};};if !_ada {_ffg ._dgg .Reset ();};if _ada &&_ffg ._fbe {_ffg ._dgg .Mark ();for _dab :=0;_dab < 5;_dab ++{_ada ,_abc =_ffg .tryFetchEOL ();if _abc !=nil {if _b .Is (_abc ,_d .EOF ){if _dab ==0{break ;
};return _gef ;};};if _ada {continue ;};if _dab > 0{return _gef ;};break ;};if _ada {return _d .EOF ;};_ffg ._dgg .Reset ();};if _abc =_ffg .decode1D ();_abc !=nil {return _abc ;};return nil ;};var _ae =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
const (_ tiffType =iota ;_cdd ;_fbg ;_eba ;);func _efcc (_afec int ,_ffd bool )(code ,int ,bool ){if _afec < 64{if _ffd {return _af [_afec ],0,true ;};return _cfg [_afec ],0,true ;};_bag :=_afec /64;if _bag > 40{return _ca [2560],_afec -2560,false ;};if _bag > 27{return _ca [_bag *64],_afec -_bag *64,false ;
};if _ffd {return _def [_bag *64],_afec -_bag *64,false ;};return _ga [_bag *64],_afec -_bag *64,false ;};func _cef (_ebd ,_aedg int )code {var _debe code ;switch _aedg -_ebd {case -1:_debe =_cag ;case -2:_debe =_dcd ;case -3:_debe =_dac ;case 0:_debe =_cfc ;
case 1:_debe =_bc ;case 2:_debe =_gc ;case 3:_debe =_eec ;};return _debe ;};func (_geff *Decoder )tryFetchRTC2D ()(_bac error ){_geff ._dgg .Mark ();var _adfd bool ;for _aced :=0;_aced < 5;_aced ++{_adfd ,_bac =_geff .tryFetchEOL1 ();if _bac !=nil {if _b .Is (_bac ,_d .EOF ){if _aced ==0{break ;
};return _gef ;};};if _adfd {continue ;};if _aced > 0{return _gef ;};break ;};if _adfd {return _d .EOF ;};_geff ._dgg .Reset ();return _bac ;};func _afga (_bea ,_ddff []byte ,_feg int ,_efgc bool )int {_ffaf :=_dfdc (_ddff ,_feg );if _ffaf < len (_ddff )&&(_feg ==-1&&_ddff [_ffaf ]==_caga ||_feg >=0&&_feg < len (_bea )&&_bea [_feg ]==_ddff [_ffaf ]||_feg >=len (_bea )&&_efgc &&_ddff [_ffaf ]==_caga ||_feg >=len (_bea )&&!_efgc &&_ddff [_ffaf ]==_gcd ){_ffaf =_dfdc (_ddff ,_ffaf );
};return _ffaf ;};var _dad =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _efge (_dgga []byte ,_eeaf int ,_dd code )([]byte ,int ){_bgd :=0;for _bgd < _dd .BitsWritten {_gff :=_eeaf /8;_gbb :=_eeaf %8;if _gff >=len (_dgga ){_dgga =append (_dgga ,0);};_gba :=8-_gbb ;_efd :=_dd .BitsWritten -_bgd ;if _gba > _efd {_gba =_efd ;
};if _bgd < 8{_dgga [_gff ]=_dgga [_gff ]|byte (_dd .Code >>uint (8+_gbb -_bgd ))&_cg [8-_gba -_gbb ];}else {_dgga [_gff ]=_dgga [_gff ]|(byte (_dd .Code <<uint (_bgd -8))&_cg [8-_gba ])>>uint (_gbb );};_eeaf +=_gba ;_bgd +=_gba ;};return _dgga ,_eeaf ;
};func (_fag *treeNode )set (_age bool ,_aecd *treeNode ){if !_age {_fag ._gbce =_aecd ;}else {_fag ._ege =_aecd ;};};var (_cfg map[int ]code ;_af map[int ]code ;_ga map[int ]code ;_def map[int ]code ;_ca map[int ]code ;_cg map[int ]byte ;_ee =code {Code :1<<4,BitsWritten :12};
_ebf =code {Code :3<<3,BitsWritten :13};_agd =code {Code :2<<3,BitsWritten :13};_aa =code {Code :1<<12,BitsWritten :4};_dadb =code {Code :1<<13,BitsWritten :3};_cfc =code {Code :1<<15,BitsWritten :1};_cag =code {Code :3<<13,BitsWritten :3};_dcd =code {Code :3<<10,BitsWritten :6};
_dac =code {Code :3<<9,BitsWritten :7};_bc =code {Code :2<<13,BitsWritten :3};_gc =code {Code :2<<10,BitsWritten :6};_eec =code {Code :2<<9,BitsWritten :7};);type code struct{Code uint16 ;BitsWritten int ;};func _bde (_fda ,_eaf []byte ,_gdeg ,_becd ,_eeac int )([]byte ,int ,int ){_dde :=_dfdc (_fda ,_eeac );
_fae :=_becd >=0&&_fda [_becd ]==_caga ||_becd ==-1;_eaf ,_gdeg =_efge (_eaf ,_gdeg ,_dadb );var _fdg int ;if _becd > -1{_fdg =_eeac -_becd ;}else {_fdg =_eeac -_becd -1;};_eaf ,_gdeg =_bgbg (_eaf ,_gdeg ,_fdg ,_fae );_fae =!_fae ;_bdc :=_dde -_eeac ;_eaf ,_gdeg =_bgbg (_eaf ,_gdeg ,_bdc ,_fae );
_becd =_dde ;return _eaf ,_gdeg ,_becd ;};func (_bede *tree )fillWithNode (_dba ,_bgf int ,_dgb *treeNode )error {_ecc :=_bede ._efdd ;for _egac :=0;_egac < _dba ;_egac ++{_dbe :=uint (_dba -1-_egac );_agcg :=((_bgf >>_dbe )&1)!=0;_gdf :=_ecc .walk (_agcg );
if _gdf !=nil {if _gdf ._fcca {return _b .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");};_ecc =_gdf ;continue ;
};if _egac ==_dba -1{_gdf =_dgb ;}else {_gdf =&treeNode {};};if _bgf ==0{_gdf ._adg =true ;};_ecc .set (_agcg ,_gdf );_ecc =_gdf ;};return nil ;};func _aaca (_dedb []byte ,_gca bool ,_ccad int )(int ,int ){_cae :=0;for _ccad < len (_dedb ){if _gca {if _dedb [_ccad ]!=_caga {break ;
};}else {if _dedb [_ccad ]!=_gcd {break ;};};_cae ++;_ccad ++;};return _cae ,_ccad ;};type tree struct{_efdd *treeNode };func (_cad *Decoder )decode1D ()error {var (_abg int ;_daa error ;);_cadg :=true ;_cad ._baf =0;for {var _dge int ;if _cadg {_dge ,_daa =_cad .decodeRun (_ac );
}else {_dge ,_daa =_cad .decodeRun (_bb );};if _daa !=nil {return _daa ;};_abg +=_dge ;_cad ._ed [_cad ._baf ]=_abg ;_cad ._baf ++;_cadg =!_cadg ;if _abg >=_cad ._cfd {break ;};};return nil ;};func _dfdc (_ged []byte ,_baafg int )int {if _baafg >=len (_ged ){return _baafg ;
};if _baafg < -1{_baafg =-1;};var _aacc byte ;if _baafg > -1{_aacc =_ged [_baafg ];}else {_aacc =_caga ;};_bcda :=_baafg +1;for _bcda < len (_ged ){if _ged [_bcda ]!=_aacc {break ;};_bcda ++;};return _bcda ;};func (_beec *tree )fill (_cfbg ,_aeab ,_cbg int )error {_bacc :=_beec ._efdd ;
for _fee :=0;_fee < _cfbg ;_fee ++{_cce :=_cfbg -1-_fee ;_abbc :=((_aeab >>uint (_cce ))&1)!=0;_fadd :=_bacc .walk (_abbc );if _fadd !=nil {if _fadd ._fcca {return _b .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_bacc =_fadd ;continue ;};_fadd =&treeNode {};if _fee ==_cfbg -1{_fadd ._acfa =_cbg ;_fadd ._fcca =true ;};if _aeab ==0{_fadd ._adg =true ;};_bacc .set (_abbc ,_fadd );_bacc =_fadd ;};return nil ;};func (_bfc *treeNode )walk (_ede bool )*treeNode {if _ede {return _bfc ._ege ;
};return _bfc ._gbce ;};type treeNode struct{_gbce *treeNode ;_ege *treeNode ;_acfa int ;_adg bool ;_fcca bool ;};func (_bgc *Decoder )Read (in []byte )(int ,error ){if _bgc ._fce !=nil {return 0,_bgc ._fce ;};_aea :=len (in );var (_cc int ;_fcd int ;);
for _aea !=0{if _bgc ._fga >=_bgc ._gcf {if _gab :=_bgc .fetch ();_gab !=nil {_bgc ._fce =_gab ;return 0,_gab ;};};if _bgc ._gcf ==-1{return _cc ,_d .EOF ;};switch {case _aea <=_bgc ._gcf -_bgc ._fga :_fcf :=_bgc ._gb [_bgc ._fga :_bgc ._fga +_aea ];for _ ,_ad :=range _fcf {if !_bgc ._cdfa {_ad =^_ad ;
};in [_fcd ]=_ad ;_fcd ++;};_cc +=len (_fcf );_bgc ._fga +=len (_fcf );return _cc ,nil ;default:_fgd :=_bgc ._gb [_bgc ._fga :];for _ ,_agg :=range _fgd {if !_bgc ._cdfa {_agg =^_agg ;};in [_fcd ]=_agg ;_fcd ++;};_cc +=len (_fgd );_bgc ._fga +=len (_fgd );
_aea -=len (_fgd );};};return _cc ,nil ;};func _baaf (_bcf int )([]byte ,int ){var _aed []byte ;for _geag :=0;_geag < 2;_geag ++{_aed ,_bcf =_efge (_aed ,_bcf ,_ee );};return _aed ,_bcf %8;};func (_ecd *Encoder )appendEncodedRow (_bedc ,_bdb []byte ,_cde int )[]byte {if len (_bedc )> 0&&_cde !=0&&!_ecd .EncodedByteAlign {_bedc [len (_bedc )-1]=_bedc [len (_bedc )-1]|_bdb [0];
_bedc =append (_bedc ,_bdb [1:]...);}else {_bedc =append (_bedc ,_bdb ...);};return _bedc ;};var _ag =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
var _ab =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_dfda *Encoder )encodeG4 (_dag [][]byte )[]byte {_ffa :=make ([][]byte ,len (_dag ));copy (_ffa ,_dag );_ffa =_ddb (_ffa );var _dfdf []byte ;var _cfca int ;for _fggd :=1;_fggd < len (_ffa );_fggd ++{if _dfda .Rows > 0&&!_dfda .EndOfBlock &&_fggd ==(_dfda .Rows +1){break ;
};var _dbf []byte ;var _ebfd ,_gae ,_cga int ;_afb :=_cfca ;_feb :=-1;for _feb < len (_ffa [_fggd ]){_ebfd =_dfdc (_ffa [_fggd ],_feb );_gae =_ddf (_ffa [_fggd ],_ffa [_fggd -1],_feb );_cga =_dfdc (_ffa [_fggd -1],_gae );if _cga < _ebfd {_dbf ,_afb =_efge (_dbf ,_afb ,_aa );
_feb =_cga ;}else {if _e .Abs (float64 (_gae -_ebfd ))> 3{_dbf ,_afb ,_feb =_bde (_ffa [_fggd ],_dbf ,_afb ,_feb ,_ebfd );}else {_dbf ,_afb =_fcbf (_dbf ,_afb ,_ebfd ,_gae );_feb =_ebfd ;};};};_dfdf =_dfda .appendEncodedRow (_dfdf ,_dbf ,_cfca );if _dfda .EncodedByteAlign {_afb =0;
};_cfca =_afb %8;};if _dfda .EndOfBlock {_efc ,_ :=_baaf (_cfca );_dfdf =_dfda .appendEncodedRow (_dfdf ,_efc ,_cfca );};return _dfdf ;};