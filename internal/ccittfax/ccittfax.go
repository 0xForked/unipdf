//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_f "errors";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_bg "io";_ff "math";);func (_ggag *Encoder )Encode (pixels [][]byte )[]byte {if _ggag .BlackIs1 {_badd =0;_egg =1;}else {_badd =1;_egg =0;};if _ggag .K ==0{return _ggag .encodeG31D (pixels );
};if _ggag .K > 0{return _ggag .encodeG32D (pixels );};if _ggag .K < 0{return _ggag .encodeG4 (pixels );};return nil ;};func init (){_g =&treeNode {_gfa :true ,_adg :_be };_a =&treeNode {_adg :_cb ,_egddf :_g };_a ._bceg =_a ;_eg =&tree {_bcee :&treeNode {}};
if _gf :=_eg .fillWithNode (12,0,_a );_gf !=nil {panic (_gf .Error ());};if _ge :=_eg .fillWithNode (12,1,_g );_ge !=nil {panic (_ge .Error ());};_bc =&tree {_bcee :&treeNode {}};for _da :=0;_da < len (_ffff );_da ++{for _dc :=0;_dc < len (_ffff [_da ]);
_dc ++{if _eb :=_bc .fill (_da +2,int (_ffff [_da ][_dc ]),int (_gfc [_da ][_dc ]));_eb !=nil {panic (_eb .Error ());};};};if _ba :=_bc .fillWithNode (12,0,_a );_ba !=nil {panic (_ba .Error ());};if _dd :=_bc .fillWithNode (12,1,_g );_dd !=nil {panic (_dd .Error ());
};_e =&tree {_bcee :&treeNode {}};for _ab :=0;_ab < len (_ade );_ab ++{for _ga :=0;_ga < len (_ade [_ab ]);_ga ++{if _ead :=_e .fill (_ab +4,int (_ade [_ab ][_ga ]),int (_fe [_ab ][_ga ]));_ead !=nil {panic (_ead .Error ());};};};if _fg :=_e .fillWithNode (12,0,_a );
_fg !=nil {panic (_fg .Error ());};if _ffa :=_e .fillWithNode (12,1,_g );_ffa !=nil {panic (_ffa .Error ());};_ea =&tree {_bcee :&treeNode {}};if _bcd :=_ea .fill (4,1,_d );_bcd !=nil {panic (_bcd .Error ());};if _ag :=_ea .fill (3,1,_ad );_ag !=nil {panic (_ag .Error ());
};if _bd :=_ea .fill (1,1,0);_bd !=nil {panic (_bd .Error ());};if _bb :=_ea .fill (3,3,1);_bb !=nil {panic (_bb .Error ());};if _fff :=_ea .fill (6,3,2);_fff !=nil {panic (_fff .Error ());};if _dda :=_ea .fill (7,3,3);_dda !=nil {panic (_dda .Error ());
};if _beb :=_ea .fill (3,2,-1);_beb !=nil {panic (_beb .Error ());};if _ffad :=_ea .fill (6,2,-2);_ffad !=nil {panic (_ffad .Error ());};if _gc :=_ea .fill (7,2,-3);_gc !=nil {panic (_gc .Error ());};};func (_baf *Decoder )decoderRowType41D ()error {if _baf ._ef {_baf ._dg .Align ();
};_baf ._dg .Mark ();var (_gag bool ;_eed error ;);if _baf ._cg {_gag ,_eed =_baf .tryFetchEOL ();if _eed !=nil {return _eed ;};if !_gag {return _ac ;};}else {_gag ,_eed =_baf .looseFetchEOL ();if _eed !=nil {return _eed ;};};if !_gag {_baf ._dg .Reset ();
};if _gag &&_baf ._egf {_baf ._dg .Mark ();for _fbg :=0;_fbg < 5;_fbg ++{_gag ,_eed =_baf .tryFetchEOL ();if _eed !=nil {if _f .Is (_eed ,_bg .EOF ){if _fbg ==0{break ;};return _aa ;};};if _gag {continue ;};if _fbg > 0{return _aa ;};break ;};if _gag {return _bg .EOF ;
};_baf ._dg .Reset ();};if _eed =_baf .decode1D ();_eed !=nil {return _eed ;};return nil ;};var (_g *treeNode ;_a *treeNode ;_bc *tree ;_e *tree ;_eg *tree ;_ea *tree ;_be =-2000;_cb =-1000;_d =-3000;_ad =-4000;);func (_df *Decoder )decodeRowType4 ()error {if !_df ._aea {return _df .decoderRowType41D ();
};if _df ._ef {_df ._dg .Align ();};_df ._dg .Mark ();_fgg ,_dgc :=_df .tryFetchEOL ();if _dgc !=nil {return _dgc ;};if !_fgg &&_df ._cg {_df ._geg ++;if _df ._geg > _df ._gbg {return _ac ;};_df ._dg .Reset ();};if !_fgg {_df ._dg .Reset ();};_gfbb ,_dgc :=_df ._dg .ReadBool ();
if _dgc !=nil {return _dgc ;};if _gfbb {if _fgg &&_df ._egf {if _dgc =_df .tryFetchRTC2D ();_dgc !=nil {return _dgc ;};};_dgc =_df .decode1D ();}else {_dgc =_df .decode2D ();};if _dgc !=nil {return _dgc ;};return nil ;};func (_beg *Decoder )getNextChangingElement (_bad int ,_afa bool )int {_fag :=0;
if !_afa {_fag =1;};_aeag :=int (uint32 (_beg ._gga )&0xFFFFFFFE)+_fag ;if _aeag > 2{_aeag -=2;};if _bad ==0{return _aeag ;};for _feb :=_aeag ;_feb < _beg ._fae ;_feb +=2{if _bad < _beg ._fa [_feb ]{_beg ._gga =_feb ;return _feb ;};};return -1;};func (_baef *Decoder )tryFetchEOL1 ()(bool ,error ){_ged ,_bfc :=_baef ._dg .ReadBits (13);
if _bfc !=nil {return false ,_bfc ;};return _ged ==0x3,nil ;};func (_ede *treeNode )set (_ggbg bool ,_feff *treeNode ){if !_ggbg {_ede ._bceg =_feff ;}else {_ede ._egddf =_feff ;};};func init (){_gd =make (map[int ]code );_gd [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_gd [1]=code {Code :2<<(5+8),BitsWritten :3};_gd [2]=code {Code :3<<(6+8),BitsWritten :2};_gd [3]=code {Code :2<<(6+8),BitsWritten :2};_gd [4]=code {Code :3<<(5+8),BitsWritten :3};_gd [5]=code {Code :3<<(4+8),BitsWritten :4};_gd [6]=code {Code :2<<(4+8),BitsWritten :4};
_gd [7]=code {Code :3<<(3+8),BitsWritten :5};_gd [8]=code {Code :5<<(2+8),BitsWritten :6};_gd [9]=code {Code :4<<(2+8),BitsWritten :6};_gd [10]=code {Code :4<<(1+8),BitsWritten :7};_gd [11]=code {Code :5<<(1+8),BitsWritten :7};_gd [12]=code {Code :7<<(1+8),BitsWritten :7};
_gd [13]=code {Code :4<<8,BitsWritten :8};_gd [14]=code {Code :7<<8,BitsWritten :8};_gd [15]=code {Code :12<<8,BitsWritten :9};_gd [16]=code {Code :5<<8|3<<6,BitsWritten :10};_gd [17]=code {Code :6<<8,BitsWritten :10};_gd [18]=code {Code :2<<8,BitsWritten :10};
_gd [19]=code {Code :12<<8|7<<5,BitsWritten :11};_gd [20]=code {Code :13<<8,BitsWritten :11};_gd [21]=code {Code :13<<8|4<<5,BitsWritten :11};_gd [22]=code {Code :6<<8|7<<5,BitsWritten :11};_gd [23]=code {Code :5<<8,BitsWritten :11};_gd [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_gd [25]=code {Code :3<<8,BitsWritten :11};_gd [26]=code {Code :12<<8|10<<4,BitsWritten :12};_gd [27]=code {Code :12<<8|11<<4,BitsWritten :12};_gd [28]=code {Code :12<<8|12<<4,BitsWritten :12};_gd [29]=code {Code :12<<8|13<<4,BitsWritten :12};_gd [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_gd [31]=code {Code :6<<8|9<<4,BitsWritten :12};_gd [32]=code {Code :6<<8|10<<4,BitsWritten :12};_gd [33]=code {Code :6<<8|11<<4,BitsWritten :12};_gd [34]=code {Code :13<<8|2<<4,BitsWritten :12};_gd [35]=code {Code :13<<8|3<<4,BitsWritten :12};_gd [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_gd [37]=code {Code :13<<8|5<<4,BitsWritten :12};_gd [38]=code {Code :13<<8|6<<4,BitsWritten :12};_gd [39]=code {Code :13<<8|7<<4,BitsWritten :12};_gd [40]=code {Code :6<<8|12<<4,BitsWritten :12};_gd [41]=code {Code :6<<8|13<<4,BitsWritten :12};_gd [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_gd [43]=code {Code :13<<8|11<<4,BitsWritten :12};_gd [44]=code {Code :5<<8|4<<4,BitsWritten :12};_gd [45]=code {Code :5<<8|5<<4,BitsWritten :12};_gd [46]=code {Code :5<<8|6<<4,BitsWritten :12};_gd [47]=code {Code :5<<8|7<<4,BitsWritten :12};_gd [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_gd [49]=code {Code :6<<8|5<<4,BitsWritten :12};_gd [50]=code {Code :5<<8|2<<4,BitsWritten :12};_gd [51]=code {Code :5<<8|3<<4,BitsWritten :12};_gd [52]=code {Code :2<<8|4<<4,BitsWritten :12};_gd [53]=code {Code :3<<8|7<<4,BitsWritten :12};_gd [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_gd [55]=code {Code :2<<8|7<<4,BitsWritten :12};_gd [56]=code {Code :2<<8|8<<4,BitsWritten :12};_gd [57]=code {Code :5<<8|8<<4,BitsWritten :12};_gd [58]=code {Code :5<<8|9<<4,BitsWritten :12};_gd [59]=code {Code :2<<8|11<<4,BitsWritten :12};_gd [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_gd [61]=code {Code :5<<8|10<<4,BitsWritten :12};_gd [62]=code {Code :6<<8|6<<4,BitsWritten :12};_gd [63]=code {Code :6<<8|7<<4,BitsWritten :12};_gb =make (map[int ]code );_gb [0]=code {Code :53<<8,BitsWritten :8};_gb [1]=code {Code :7<<(2+8),BitsWritten :6};
_gb [2]=code {Code :7<<(4+8),BitsWritten :4};_gb [3]=code {Code :8<<(4+8),BitsWritten :4};_gb [4]=code {Code :11<<(4+8),BitsWritten :4};_gb [5]=code {Code :12<<(4+8),BitsWritten :4};_gb [6]=code {Code :14<<(4+8),BitsWritten :4};_gb [7]=code {Code :15<<(4+8),BitsWritten :4};
_gb [8]=code {Code :19<<(3+8),BitsWritten :5};_gb [9]=code {Code :20<<(3+8),BitsWritten :5};_gb [10]=code {Code :7<<(3+8),BitsWritten :5};_gb [11]=code {Code :8<<(3+8),BitsWritten :5};_gb [12]=code {Code :8<<(2+8),BitsWritten :6};_gb [13]=code {Code :3<<(2+8),BitsWritten :6};
_gb [14]=code {Code :52<<(2+8),BitsWritten :6};_gb [15]=code {Code :53<<(2+8),BitsWritten :6};_gb [16]=code {Code :42<<(2+8),BitsWritten :6};_gb [17]=code {Code :43<<(2+8),BitsWritten :6};_gb [18]=code {Code :39<<(1+8),BitsWritten :7};_gb [19]=code {Code :12<<(1+8),BitsWritten :7};
_gb [20]=code {Code :8<<(1+8),BitsWritten :7};_gb [21]=code {Code :23<<(1+8),BitsWritten :7};_gb [22]=code {Code :3<<(1+8),BitsWritten :7};_gb [23]=code {Code :4<<(1+8),BitsWritten :7};_gb [24]=code {Code :40<<(1+8),BitsWritten :7};_gb [25]=code {Code :43<<(1+8),BitsWritten :7};
_gb [26]=code {Code :19<<(1+8),BitsWritten :7};_gb [27]=code {Code :36<<(1+8),BitsWritten :7};_gb [28]=code {Code :24<<(1+8),BitsWritten :7};_gb [29]=code {Code :2<<8,BitsWritten :8};_gb [30]=code {Code :3<<8,BitsWritten :8};_gb [31]=code {Code :26<<8,BitsWritten :8};
_gb [32]=code {Code :27<<8,BitsWritten :8};_gb [33]=code {Code :18<<8,BitsWritten :8};_gb [34]=code {Code :19<<8,BitsWritten :8};_gb [35]=code {Code :20<<8,BitsWritten :8};_gb [36]=code {Code :21<<8,BitsWritten :8};_gb [37]=code {Code :22<<8,BitsWritten :8};
_gb [38]=code {Code :23<<8,BitsWritten :8};_gb [39]=code {Code :40<<8,BitsWritten :8};_gb [40]=code {Code :41<<8,BitsWritten :8};_gb [41]=code {Code :42<<8,BitsWritten :8};_gb [42]=code {Code :43<<8,BitsWritten :8};_gb [43]=code {Code :44<<8,BitsWritten :8};
_gb [44]=code {Code :45<<8,BitsWritten :8};_gb [45]=code {Code :4<<8,BitsWritten :8};_gb [46]=code {Code :5<<8,BitsWritten :8};_gb [47]=code {Code :10<<8,BitsWritten :8};_gb [48]=code {Code :11<<8,BitsWritten :8};_gb [49]=code {Code :82<<8,BitsWritten :8};
_gb [50]=code {Code :83<<8,BitsWritten :8};_gb [51]=code {Code :84<<8,BitsWritten :8};_gb [52]=code {Code :85<<8,BitsWritten :8};_gb [53]=code {Code :36<<8,BitsWritten :8};_gb [54]=code {Code :37<<8,BitsWritten :8};_gb [55]=code {Code :88<<8,BitsWritten :8};
_gb [56]=code {Code :89<<8,BitsWritten :8};_gb [57]=code {Code :90<<8,BitsWritten :8};_gb [58]=code {Code :91<<8,BitsWritten :8};_gb [59]=code {Code :74<<8,BitsWritten :8};_gb [60]=code {Code :75<<8,BitsWritten :8};_gb [61]=code {Code :50<<8,BitsWritten :8};
_gb [62]=code {Code :51<<8,BitsWritten :8};_gb [63]=code {Code :52<<8,BitsWritten :8};_bae =make (map[int ]code );_bae [64]=code {Code :3<<8|3<<6,BitsWritten :10};_bae [128]=code {Code :12<<8|8<<4,BitsWritten :12};_bae [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_bae [256]=code {Code :5<<8|11<<4,BitsWritten :12};_bae [320]=code {Code :3<<8|3<<4,BitsWritten :12};_bae [384]=code {Code :3<<8|4<<4,BitsWritten :12};_bae [448]=code {Code :3<<8|5<<4,BitsWritten :12};_bae [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_bae [576]=code {Code :3<<8|13<<3,BitsWritten :13};_bae [640]=code {Code :2<<8|10<<3,BitsWritten :13};_bae [704]=code {Code :2<<8|11<<3,BitsWritten :13};_bae [768]=code {Code :2<<8|12<<3,BitsWritten :13};_bae [832]=code {Code :2<<8|13<<3,BitsWritten :13};
_bae [896]=code {Code :3<<8|18<<3,BitsWritten :13};_bae [960]=code {Code :3<<8|19<<3,BitsWritten :13};_bae [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_bae [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_bae [1152]=code {Code :3<<8|22<<3,BitsWritten :13};
_bae [1216]=code {Code :119<<3,BitsWritten :13};_bae [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_bae [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_bae [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_bae [1472]=code {Code :2<<8|21<<3,BitsWritten :13};
_bae [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_bae [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_bae [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_bae [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_fd =make (map[int ]code );_fd [64]=code {Code :27<<(3+8),BitsWritten :5};
_fd [128]=code {Code :18<<(3+8),BitsWritten :5};_fd [192]=code {Code :23<<(2+8),BitsWritten :6};_fd [256]=code {Code :55<<(1+8),BitsWritten :7};_fd [320]=code {Code :54<<8,BitsWritten :8};_fd [384]=code {Code :55<<8,BitsWritten :8};_fd [448]=code {Code :100<<8,BitsWritten :8};
_fd [512]=code {Code :101<<8,BitsWritten :8};_fd [576]=code {Code :104<<8,BitsWritten :8};_fd [640]=code {Code :103<<8,BitsWritten :8};_fd [704]=code {Code :102<<8,BitsWritten :9};_fd [768]=code {Code :102<<8|1<<7,BitsWritten :9};_fd [832]=code {Code :105<<8,BitsWritten :9};
_fd [896]=code {Code :105<<8|1<<7,BitsWritten :9};_fd [960]=code {Code :106<<8,BitsWritten :9};_fd [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_fd [1088]=code {Code :107<<8,BitsWritten :9};_fd [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_fd [1216]=code {Code :108<<8,BitsWritten :9};
_fd [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_fd [1344]=code {Code :109<<8,BitsWritten :9};_fd [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_fd [1472]=code {Code :76<<8,BitsWritten :9};_fd [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_fd [1600]=code {Code :77<<8,BitsWritten :9};
_fd [1664]=code {Code :24<<(2+8),BitsWritten :6};_fd [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_gde =make (map[int ]code );_gde [1792]=code {Code :1<<8,BitsWritten :11};_gde [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_gde [1920]=code {Code :1<<8|5<<5,BitsWritten :11};
_gde [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_gde [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_gde [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_gde [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_gde [2240]=code {Code :1<<8|6<<4,BitsWritten :12};
_gde [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_gde [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_gde [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_gde [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_gde [2560]=code {Code :1<<8|15<<4,BitsWritten :12};
_fb =make (map[int ]byte );_fb [0]=0xFF;_fb [1]=0xFE;_fb [2]=0xFC;_fb [3]=0xF8;_fb [4]=0xF0;_fb [5]=0xE0;_fb [6]=0xC0;_fb [7]=0x80;_fb [8]=0x00;};func _bece (_eaea ,_dgg []byte ,_bgb int )int {_ffd :=_dec (_dgg ,_bgb );if _ffd < len (_dgg )&&(_bgb ==-1&&_dgg [_ffd ]==_badd ||_bgb >=0&&_bgb < len (_eaea )&&_eaea [_bgb ]==_dgg [_ffd ]||_bgb >=len (_eaea )&&_eaea [_bgb -1]!=_dgg [_ffd ]){_ffd =_dec (_dgg ,_ffd );
};return _ffd ;};var (_gd map[int ]code ;_gb map[int ]code ;_bae map[int ]code ;_fd map[int ]code ;_gde map[int ]code ;_fb map[int ]byte ;_dab =code {Code :1<<4,BitsWritten :12};_gg =code {Code :3<<3,BitsWritten :13};_gea =code {Code :2<<3,BitsWritten :13};
_ebc =code {Code :1<<12,BitsWritten :4};_cc =code {Code :1<<13,BitsWritten :3};_dce =code {Code :1<<15,BitsWritten :1};_fc =code {Code :3<<13,BitsWritten :3};_fce =code {Code :3<<10,BitsWritten :6};_bf =code {Code :3<<9,BitsWritten :7};_fgf =code {Code :2<<13,BitsWritten :3};
_bce =code {Code :2<<10,BitsWritten :6};_ca =code {Code :2<<9,BitsWritten :7};);func (_ebgc *Decoder )decodeRowType2 ()error {if _ebgc ._ef {_ebgc ._dg .Align ();};if _eda :=_ebgc .decode1D ();_eda !=nil {return _eda ;};return nil ;};type code struct{Code uint16 ;
BitsWritten int ;};func (_efg *Decoder )decode1D ()error {var (_daa int ;_cfb error ;);_cfd :=true ;_efg ._efd =0;for {var _daf int ;if _cfd {_daf ,_cfb =_efg .decodeRun (_e );}else {_daf ,_cfb =_efg .decodeRun (_bc );};if _cfb !=nil {return _cfb ;};_daa +=_daf ;
_efg ._ce [_efg ._efd ]=_daa ;_efg ._efd ++;_cfd =!_cfd ;if _daa >=_efg ._eae {break ;};};return nil ;};func _bgad (_ddg int )([]byte ,int ){var _deac []byte ;for _eab :=0;_eab < 6;_eab ++{_deac ,_ddg =_edbc (_deac ,_ddg ,_dab );};return _deac ,_ddg %8;
};func _ccd (_cfa int ,_dca bool )(code ,int ,bool ){if _cfa < 64{if _dca {return _gb [_cfa ],0,true ;};return _gd [_cfa ],0,true ;};_eedb :=_cfa /64;if _eedb > 40{return _gde [2560],_cfa -2560,false ;};if _eedb > 27{return _gde [_eedb *64],_cfa -_eedb *64,false ;
};if _dca {return _fd [_eedb *64],_cfa -_eedb *64,false ;};return _bae [_eedb *64],_cfa -_eedb *64,false ;};func (_aceg *tree )fillWithNode (_agb ,_cge int ,_eaca *treeNode )error {_eec :=_aceg ._bcee ;for _eba :=0;_eba < _agb ;_eba ++{_fcc :=uint (_agb -1-_eba );
_egddb :=((_cge >>_fcc )&1)!=0;_eeb :=_eec .walk (_egddb );if _eeb !=nil {if _eeb ._gfa {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_eec =_eeb ;continue ;};if _eba ==_agb -1{_eeb =_eaca ;}else {_eeb =&treeNode {};};if _cge ==0{_eeb ._dddb =true ;};_eec .set (_egddb ,_eeb );_eec =_eeb ;};return nil ;};func (_cea *Decoder )decodeRun (_gdc *tree )(int ,error ){var _dbe int ;_bdbb :=_gdc ._bcee ;
for {_fgdb ,_add :=_cea ._dg .ReadBool ();if _add !=nil {return 0,_add ;};_bdbb =_bdbb .walk (_fgdb );if _bdbb ==nil {return 0,_f .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _bdbb ._gfa {_dbe +=_bdbb ._adg ;switch {case _bdbb ._adg >=64:_bdbb =_gdc ._bcee ;case _bdbb ._adg >=0:return _dbe ,nil ;default:return _cea ._eae ,nil ;};};};};func (_cd *Decoder )Read (in []byte )(int ,error ){if _cd ._gab !=nil {return 0,_cd ._gab ;
};_ebg :=len (in );var (_ada int ;_gcb int ;);for _ebg !=0{if _cd ._cbd >=_cd ._ee {if _fceg :=_cd .fetch ();_fceg !=nil {_cd ._gab =_fceg ;return 0,_fceg ;};};if _cd ._ee ==-1{return _ada ,_bg .EOF ;};switch {case _ebg <=_cd ._ee -_cd ._cbd :_fgc :=_cd ._gfb [_cd ._cbd :_cd ._cbd +_ebg ];
for _ ,_fdc :=range _fgc {if !_cd ._afg {_fdc =^_fdc ;};in [_gcb ]=_fdc ;_gcb ++;};_ada +=len (_fgc );_cd ._cbd +=len (_fgc );return _ada ,nil ;default:_bab :=_cd ._gfb [_cd ._cbd :];for _ ,_abg :=range _bab {if !_cd ._afg {_abg =^_abg ;};in [_gcb ]=_abg ;
_gcb ++;};_ada +=len (_bab );_cd ._cbd +=len (_bab );_ebg -=len (_bab );};};return _ada ,nil ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_gef :=&Decoder {_dg :_c .NewReader (data ),_eae :options .Columns ,_cbg :options .Rows ,_gbg :options .DamagedRowsBeforeError ,_gfb :make ([]byte ,(options .Columns +7)/8),_fa :make ([]int ,options .Columns +2),_ce :make ([]int ,options .Columns +2),_ef :options .EncodedByteAligned ,_afg :options .BlackIsOne ,_cg :options .EndOfLine ,_egf :options .EndOfBlock };
switch {case options .K ==0:_gef ._ebf =_gba ;if len (data )< 20{return nil ,_f .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_feg :=data [:20];if _feg [0]!=0||(_feg [1]>>4!=1&&_feg [1]!=1){_gef ._ebf =_aga ;
_agc :=(uint16 (_feg [0])<<8+uint16 (_feg [1]&0xff))>>4;for _gfg :=12;_gfg < 160;_gfg ++{_agc =(_agc <<1)+uint16 ((_feg [_gfg /8]>>uint16 (7-(_gfg %8)))&0x01);if _agc &0xfff==1{_gef ._ebf =_gba ;break ;};};};case options .K < 0:_gef ._ebf =_bge ;case options .K > 0:_gef ._ebf =_gba ;
_gef ._aea =true ;};switch _gef ._ebf {case _aga ,_gba ,_bge :default:return nil ,_f .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _gef ,nil ;};var _ffff =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
type treeNode struct{_bceg *treeNode ;_egddf *treeNode ;_adg int ;_dddb bool ;_gfa bool ;};var (_badd byte =1;_egg byte =0;);func _efcg (_edcg []byte ,_fgff bool ,_eef int )(int ,int ){_dbd :=0;for _eef < len (_edcg ){if _fgff {if _edcg [_eef ]!=_badd {break ;
};}else {if _edcg [_eef ]!=_egg {break ;};};_dbd ++;_eef ++;};return _dbd ,_eef ;};func _dec (_ggg []byte ,_abd int )int {if _abd >=len (_ggg ){return _abd ;};if _abd < -1{_abd =-1;};var _deg byte ;if _abd > -1{_deg =_ggg [_abd ];}else {_deg =_badd ;};
_fbc :=_abd +1;for _fbc < len (_ggg ){if _ggg [_fbc ]!=_deg {break ;};_fbc ++;};return _fbc ;};func (_gdgf *Encoder )encodeG32D (_ffe [][]byte )[]byte {var _gad []byte ;var _effb int ;for _fec :=0;_fec < len (_ffe );_fec +=_gdgf .K {if _gdgf .Rows > 0&&!_gdgf .EndOfBlock &&_fec ==_gdgf .Rows {break ;
};_bcbd ,_cgc :=_cdb (_ffe [_fec ],_effb ,_gg );_gad =_gdgf .appendEncodedRow (_gad ,_bcbd ,_effb );if _gdgf .EncodedByteAlign {_cgc =0;};_effb =_cgc ;for _aee :=_fec +1;_aee < (_fec +_gdgf .K )&&_aee < len (_ffe );_aee ++{if _gdgf .Rows > 0&&!_gdgf .EndOfBlock &&_aee ==_gdgf .Rows {break ;
};_gffg ,_eeeg :=_edbc (nil ,_effb ,_gea );var _fgfb ,_ecbc ,_babd int ;_bga :=-1;for _bga < len (_ffe [_aee ]){_fgfb =_dec (_ffe [_aee ],_bga );_ecbc =_bece (_ffe [_aee ],_ffe [_aee -1],_bga );_babd =_dec (_ffe [_aee -1],_ecbc );if _babd < _fgfb {_gffg ,_eeeg =_adb (_gffg ,_eeeg );
_bga =_babd ;}else {if _ff .Abs (float64 (_ecbc -_fgfb ))> 3{_gffg ,_eeeg ,_bga =_aabg (_ffe [_aee ],_gffg ,_eeeg ,_bga ,_fgfb );}else {_gffg ,_eeeg =_gfda (_gffg ,_eeeg ,_fgfb ,_ecbc );_bga =_fgfb ;};};};_gad =_gdgf .appendEncodedRow (_gad ,_gffg ,_effb );
if _gdgf .EncodedByteAlign {_eeeg =0;};_effb =_eeeg %8;};};if _gdgf .EndOfBlock {_ceb ,_ :=_ddc (_effb );_gad =_gdgf .appendEncodedRow (_gad ,_ceb ,_effb );};return _gad ;};type tiffType int ;func _gdec (_gdfc ,_dabe int )code {var _egc code ;switch _dabe -_gdfc {case -1:_egc =_fc ;
case -2:_egc =_fce ;case -3:_egc =_bf ;case 0:_egc =_dce ;case 1:_egc =_fgf ;case 2:_egc =_bce ;case 3:_egc =_ca ;};return _egc ;};const (_ tiffType =iota ;_aga ;_gba ;_bge ;);func (_faef *Encoder )appendEncodedRow (_aeg ,_fece []byte ,_eea int )[]byte {if len (_aeg )> 0&&_eea !=0&&!_faef .EncodedByteAlign {_aeg [len (_aeg )-1]=_aeg [len (_aeg )-1]|_fece [0];
_aeg =append (_aeg ,_fece [1:]...);}else {_aeg =append (_aeg ,_fece ...);};return _aeg ;};var (_aa =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_ac =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func _ddc (_gdf int )([]byte ,int ){var _dde []byte ;for _gaf :=0;_gaf < 6;_gaf ++{_dde ,_gdf =_edbc (_dde ,_gdf ,_gg );};return _dde ,_gdf %8;};func (_eca *Encoder )encodeG31D (_eac [][]byte )[]byte {var _fege []byte ;_becd :=0;for _gfd :=range _eac {if _eca .Rows > 0&&!_eca .EndOfBlock &&_gfd ==_eca .Rows {break ;
};_bgc ,_aec :=_cdb (_eac [_gfd ],_becd ,_dab );_fege =_eca .appendEncodedRow (_fege ,_bgc ,_becd );if _eca .EncodedByteAlign {_aec =0;};_becd =_aec ;};if _eca .EndOfBlock {_aaae ,_ :=_bgad (_becd );_fege =_eca .appendEncodedRow (_fege ,_aaae ,_becd );
};return _fege ;};func (_cgf *Decoder )decode2D ()error {_cgf ._fae =_cgf ._efd ;_cgf ._ce ,_cgf ._fa =_cgf ._fa ,_cgf ._ce ;_bag :=true ;var (_ecg bool ;_bdb int ;_ggb error ;);_cgf ._efd =0;_db :for _bdb < _cgf ._eae {_ceg :=_ea ._bcee ;for {_ecg ,_ggb =_cgf ._dg .ReadBool ();
if _ggb !=nil {return _ggb ;};_ceg =_ceg .walk (_ecg );if _ceg ==nil {continue _db ;};if !_ceg ._gfa {continue ;};switch _ceg ._adg {case _ad :var _ffb int ;if _bag {_ffb ,_ggb =_cgf .decodeRun (_e );}else {_ffb ,_ggb =_cgf .decodeRun (_bc );};if _ggb !=nil {return _ggb ;
};_bdb +=_ffb ;_cgf ._ce [_cgf ._efd ]=_bdb ;_cgf ._efd ++;if _bag {_ffb ,_ggb =_cgf .decodeRun (_bc );}else {_ffb ,_ggb =_cgf .decodeRun (_e );};if _ggb !=nil {return _ggb ;};_bdb +=_ffb ;_cgf ._ce [_cgf ._efd ]=_bdb ;_cgf ._efd ++;case _d :_egdd :=_cgf .getNextChangingElement (_bdb ,_bag )+1;
if _egdd >=_cgf ._fae {_bdb =_cgf ._eae ;}else {_bdb =_cgf ._fa [_egdd ];};default:_gff :=_cgf .getNextChangingElement (_bdb ,_bag );if _gff >=_cgf ._fae ||_gff ==-1{_bdb =_cgf ._eae +_ceg ._adg ;}else {_bdb =_cgf ._fa [_gff ]+_ceg ._adg ;};_cgf ._ce [_cgf ._efd ]=_bdb ;
_cgf ._efd ++;_bag =!_bag ;};continue _db ;};};return nil ;};func (_eeg *Decoder )fetch ()error {if _eeg ._ee ==-1{return nil ;};if _eeg ._cbd < _eeg ._ee {return nil ;};_eeg ._ee =0;_eaf :=_eeg .decodeRow ();if _eaf !=nil {if !_f .Is (_eaf ,_bg .EOF ){return _eaf ;
};if _eeg ._ee !=0{return _eaf ;};_eeg ._ee =-1;};_eeg ._cbd =0;return nil ;};func (_edc *Decoder )decodeRow ()(_cda error ){if !_edc ._egf &&_edc ._cbg > 0&&_edc ._cbg ==_edc ._gdg {return _bg .EOF ;};switch _edc ._ebf {case _aga :_cda =_edc .decodeRowType2 ();
case _gba :_cda =_edc .decodeRowType4 ();case _bge :_cda =_edc .decodeRowType6 ();};if _cda !=nil {return _cda ;};_ccc :=0;_eff :=true ;_edc ._gga =0;for _abc :=0;_abc < _edc ._efd ;_abc ++{_ace :=_edc ._eae ;if _abc !=_edc ._efd {_ace =_edc ._ce [_abc ];
};if _ace > _edc ._eae {_ace =_edc ._eae ;};_gae :=_ccc /8;for _ccc %8!=0&&_ace -_ccc > 0{var _bec byte ;if !_eff {_bec =1<<uint (7-(_ccc %8));};_edc ._gfb [_gae ]|=_bec ;_ccc ++;};if _ccc %8==0{_gae =_ccc /8;var _becf byte ;if !_eff {_becf =0xff;};for _ace -_ccc > 7{_edc ._gfb [_gae ]=_becf ;
_ccc +=8;_gae ++;};};for _ace -_ccc > 0{if _ccc %8==0{_edc ._gfb [_gae ]=0;};var _dag byte ;if !_eff {_dag =1<<uint (7-(_ccc %8));};_edc ._gfb [_gae ]|=_dag ;_ccc ++;};_eff =!_eff ;};if _ccc !=_edc ._eae {return _f .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_edc ._ee =(_ccc +7)/8;_edc ._gdg ++;return nil ;};type Decoder struct{_eae int ;_cbg int ;_gdg int ;_gfb []byte ;_gbg int ;_aea bool ;_bced bool ;_ed bool ;_afg bool ;_cg bool ;_egf bool ;_ef bool ;_ee int ;_cbd int ;_fa []int ;_ce []int ;_fae int ;
_efd int ;_geg int ;_gga int ;_dg *_c .Reader ;_ebf tiffType ;_gab error ;};func _adb (_bbe []byte ,_cbb int )([]byte ,int ){return _edbc (_bbe ,_cbb ,_ebc )};func _cdb (_gfcb []byte ,_cee int ,_dge code )([]byte ,int ){_gcc :=true ;var _abgb []byte ;_abgb ,_cee =_edbc (nil ,_cee ,_dge );
_fgfc :=0;var _dbc int ;for _fgfc < len (_gfcb ){_dbc ,_fgfc =_efcg (_gfcb ,_gcc ,_fgfc );_abgb ,_cee =_bbc (_abgb ,_cee ,_dbc ,_gcc );_gcc =!_gcc ;};return _abgb ,_cee %8;};func (_gefa *tree )fill (_gegd ,_efff ,_dggg int )error {_fdf :=_gefa ._bcee ;
for _ddb :=0;_ddb < _gegd ;_ddb ++{_dga :=_gegd -1-_ddb ;_dae :=((_efff >>uint (_dga ))&1)!=0;_cec :=_fdf .walk (_dae );if _cec !=nil {if _cec ._gfa {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_fdf =_cec ;continue ;};_cec =&treeNode {};if _ddb ==_gegd -1{_cec ._adg =_dggg ;_cec ._gfa =true ;};if _efff ==0{_cec ._dddb =true ;};_fdf .set (_dae ,_cec );_fdf =_cec ;};return nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;
Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _dfb (_edaf int )([]byte ,int ){var _adec []byte ;for _dba :=0;_dba < 2;_dba ++{_adec ,_edaf =_edbc (_adec ,_edaf ,_dab );};return _adec ,_edaf %8;};var _ade =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
type tree struct{_bcee *treeNode };func _edbc (_bda []byte ,_agad int ,_dcg code )([]byte ,int ){_cae :=0;for _cae < _dcg .BitsWritten {_abcd :=_agad /8;_ffbe :=_agad %8;if _abcd >=len (_bda ){_bda =append (_bda ,0);};_gdcd :=8-_ffbe ;_gbd :=_dcg .BitsWritten -_cae ;
if _gdcd > _gbd {_gdcd =_gbd ;};if _cae < 8{_bda [_abcd ]=_bda [_abcd ]|byte (_dcg .Code >>uint (8+_ffbe -_cae ))&_fb [8-_gdcd -_ffbe ];}else {_bda [_abcd ]=_bda [_abcd ]|(byte (_dcg .Code <<uint (_cae -8))&_fb [8-_gdcd ])>>uint (_ffbe );};_agad +=_gdcd ;
_cae +=_gdcd ;};return _bda ,_agad ;};func (_dbf *Decoder )tryFetchRTC2D ()(_ecb error ){_dbf ._dg .Mark ();var _efc bool ;for _bfa :=0;_bfa < 5;_bfa ++{_efc ,_ecb =_dbf .tryFetchEOL1 ();if _ecb !=nil {if _f .Is (_ecb ,_bg .EOF ){if _bfa ==0{break ;};return _aa ;
};};if _efc {continue ;};if _bfa > 0{return _aa ;};break ;};if _efc {return _bg .EOF ;};_dbf ._dg .Reset ();return _ecb ;};func (_dfd *Decoder )tryFetchEOL ()(bool ,error ){_ddag ,_cad :=_dfd ._dg .ReadBits (12);if _cad !=nil {return false ,_cad ;};return _ddag ==0x1,nil ;
};func (_aaa *Decoder )decodeRowType6 ()error {if _aaa ._ef {_aaa ._dg .Align ();};if _aaa ._egf {_aaa ._dg .Mark ();_bcb ,_afc :=_aaa .tryFetchEOL ();if _afc !=nil {return _afc ;};if _bcb {_bcb ,_afc =_aaa .tryFetchEOL ();if _afc !=nil {return _afc ;};
if _bcb {return _bg .EOF ;};};_aaa ._dg .Reset ();};return _aaa .decode2D ();};func (_ddd tiffType )String ()string {switch _ddd {case _aga :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _gba :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _bge :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_aggc *Decoder )looseFetchEOL ()(bool ,error ){_bagg ,_efgf :=_aggc ._dg .ReadBits (12);
if _efgf !=nil {return false ,_efgf ;};switch _bagg {case 0x1:return true ,nil ;case 0x0:for {_eee ,_fbgc :=_aggc ._dg .ReadBool ();if _fbgc !=nil {return false ,_fbgc ;};if _eee {return true ,nil ;};};default:return false ,nil ;};};var _gfc =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func _fdb (_aecf [][]byte )[][]byte {_fbaa :=make ([]byte ,len (_aecf [0]));for _gfcbd :=range _fbaa {_fbaa [_gfcbd ]=_badd ;};_aecf =append (_aecf ,[]byte {});for _ddf :=len (_aecf )-1;_ddf > 0;_ddf --{_aecf [_ddf ]=_aecf [_ddf -1];};_aecf [0]=_fbaa ;
return _aecf ;};func (_aaag *treeNode )walk (_cfbf bool )*treeNode {if _cfbf {return _aaag ._egddf ;};return _aaag ._bceg ;};func (_ced *Encoder )encodeG4 (_dea [][]byte )[]byte {_edb :=make ([][]byte ,len (_dea ));copy (_edb ,_dea );_edb =_fdb (_edb );
var _ecd []byte ;var _fddd int ;for _feca :=1;_feca < len (_edb );_feca ++{if _ced .Rows > 0&&!_ced .EndOfBlock &&_feca ==(_ced .Rows +1){break ;};var _cbgg []byte ;var _fcb ,_bca ,_effe int ;_ebe :=_fddd ;_ffg :=-1;for _ffg < len (_edb [_feca ]){_fcb =_dec (_edb [_feca ],_ffg );
_bca =_bece (_edb [_feca ],_edb [_feca -1],_ffg );_effe =_dec (_edb [_feca -1],_bca );if _effe < _fcb {_cbgg ,_ebe =_edbc (_cbgg ,_ebe ,_ebc );_ffg =_effe ;}else {if _ff .Abs (float64 (_bca -_fcb ))> 3{_cbgg ,_ebe ,_ffg =_aabg (_edb [_feca ],_cbgg ,_ebe ,_ffg ,_fcb );
}else {_cbgg ,_ebe =_gfda (_cbgg ,_ebe ,_fcb ,_bca );_ffg =_fcb ;};};};_ecd =_ced .appendEncodedRow (_ecd ,_cbgg ,_fddd );if _ced .EncodedByteAlign {_ebe =0;};_fddd =_ebe %8;};if _ced .EndOfBlock {_fba ,_ :=_dfb (_fddd );_ecd =_ced .appendEncodedRow (_ecd ,_fba ,_fddd );
};return _ecd ;};func _gfda (_bebdd []byte ,_gccf ,_ege ,_gccd int )([]byte ,int ){_faeb :=_gdec (_ege ,_gccd );_bebdd ,_gccf =_edbc (_bebdd ,_gccf ,_faeb );return _bebdd ,_gccf ;};func _aabg (_acfb ,_beef []byte ,_baeff ,_edf ,_gbdb int )([]byte ,int ,int ){_dcb :=_dec (_acfb ,_gbdb );
_ddef :=_edf >=0&&_acfb [_edf ]==_badd ||_edf ==-1;_beef ,_baeff =_edbc (_beef ,_baeff ,_cc );var _gdcdf int ;if _edf > -1{_gdcdf =_gbdb -_edf ;}else {_gdcdf =_gbdb -_edf -1;};_beef ,_baeff =_bbc (_beef ,_baeff ,_gdcdf ,_ddef );_ddef =!_ddef ;_adbe :=_dcb -_gbdb ;
_beef ,_baeff =_bbc (_beef ,_baeff ,_adbe ,_ddef );_edf =_dcb ;return _beef ,_baeff ,_edf ;};var _fe =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _bee (_eaed ,_ebb []byte ,_bfb int ,_dfc bool )int {_faa :=_dec (_ebb ,_bfb );if _faa < len (_ebb )&&(_bfb ==-1&&_ebb [_faa ]==_badd ||_bfb >=0&&_bfb < len (_eaed )&&_eaed [_bfb ]==_ebb [_faa ]||_bfb >=len (_eaed )&&_dfc &&_ebb [_faa ]==_badd ||_bfb >=len (_eaed )&&!_dfc &&_ebb [_faa ]==_egg ){_faa =_dec (_ebb ,_faa );
};return _faa ;};func (_aab *Decoder )decodeG32D ()error {_aab ._fae =_aab ._efd ;_aab ._ce ,_aab ._fa =_aab ._fa ,_aab ._ce ;_adab :=true ;var (_egd bool ;_ec int ;_gee error ;);_aab ._efd =0;_cf :for _ec < _aab ._eae {_fceb :=_ea ._bcee ;for {_egd ,_gee =_aab ._dg .ReadBool ();
if _gee !=nil {return _gee ;};_fceb =_fceb .walk (_egd );if _fceb ==nil {continue _cf ;};if !_fceb ._gfa {continue ;};switch _fceb ._adg {case _ad :var _de int ;if _adab {_de ,_gee =_aab .decodeRun (_e );}else {_de ,_gee =_aab .decodeRun (_bc );};if _gee !=nil {return _gee ;
};_ec +=_de ;_aab ._ce [_aab ._efd ]=_ec ;_aab ._efd ++;if _adab {_de ,_gee =_aab .decodeRun (_bc );}else {_de ,_gee =_aab .decodeRun (_e );};if _gee !=nil {return _gee ;};_ec +=_de ;_aab ._ce [_aab ._efd ]=_ec ;_aab ._efd ++;case _d :_agg :=_aab .getNextChangingElement (_ec ,_adab )+1;
if _agg >=_aab ._fae {_ec =_aab ._eae ;}else {_ec =_aab ._fa [_agg ];};default:_aag :=_aab .getNextChangingElement (_ec ,_adab );if _aag >=_aab ._fae ||_aag ==-1{_ec =_aab ._eae +_fceb ._adg ;}else {_ec =_aab ._fa [_aag ]+_fceb ._adg ;};_aab ._ce [_aab ._efd ]=_ec ;
_aab ._efd ++;_adab =!_adab ;};continue _cf ;};};return nil ;};func _bbc (_eag []byte ,_fed int ,_fab int ,_acf bool )([]byte ,int ){var (_gcf code ;_aabb bool ;);for !_aabb {_gcf ,_fab ,_aabb =_ccd (_fab ,_acf );_eag ,_fed =_edbc (_eag ,_fed ,_gcf );};
return _eag ,_fed ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};