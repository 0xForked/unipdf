//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_e "errors";_c "github.com/unidoc/unipdf/v3/common";_a "math";);func (_bdf *Encoder )encodeG32D (_bggg [][]byte )[]byte {var _ddd []byte ;var _edcc int ;for _fcg :=0;_fcg < len (_bggg );_fcg +=_bdf .K {if _bdf .Rows > 0&&!_bdf .EndOfBlock &&_fcg ==_bdf .Rows {break ;
};_gbf ,_acdd :=_cdb (_bggg [_fcg ],_edcc ,_eba );_ddd =_bdf .appendEncodedRow (_ddd ,_gbf ,_edcc );if _bdf .EncodedByteAlign {_acdd =0;};_edcc =_acdd ;for _efeg :=_fcg +1;_efeg < (_fcg +_bdf .K )&&_efeg < len (_bggg );_efeg ++{if _bdf .Rows > 0&&!_bdf .EndOfBlock &&_efeg ==_bdf .Rows {break ;
};_ege ,_geef :=_dege (nil ,_edcc ,_ef );var _ace ,_fabf ,_ecce int ;_cgc :=-1;for _cgc < len (_bggg [_efeg ]){_ace =_efab (_bggg [_efeg ],_cgc );_fabf =_bfa (_bggg [_efeg ],_bggg [_efeg -1],_cgc );_ecce =_efab (_bggg [_efeg -1],_fabf );if _ecce < _ace {_ege ,_geef =_cde (_ege ,_geef );
_cgc =_ecce ;}else {if _a .Abs (float64 (_fabf -_ace ))> 3{_ege ,_geef ,_cgc =_gded (_bggg [_efeg ],_ege ,_geef ,_cgc ,_ace );}else {_ege ,_geef =_ead (_ege ,_geef ,_ace ,_fabf );_cgc =_ace ;};};};_ddd =_bdf .appendEncodedRow (_ddd ,_ege ,_edcc );if _bdf .EncodedByteAlign {_geef =0;
};_edcc =_geef %8;};};if _bdf .EndOfBlock {_abea ,_ :=_fabc (_edcc );_ddd =_bdf .appendEncodedRow (_ddd ,_abea ,_edcc );};return _ddd ;};func _bbc (_adeb []byte ,_dba int ,_eabc code )(bool ,int ){_eacc :=_dba ;var (_gcb uint16 ;_cec int ;);_gcb ,_cec ,_dba =_gc (_adeb ,_dba );
if _cec > 3{return false ,_eacc ;};_gcb >>=uint (3-_cec );_gcb <<=3;if _gcb !=_eabc .Code {return false ,_eacc ;};return true ,_dba -3+_cec ;};func init (){_d =make (map[int ]code );_d [0]=code {Code :13<<8|3<<6,BitsWritten :10};_d [1]=code {Code :2<<(5+8),BitsWritten :3};
_d [2]=code {Code :3<<(6+8),BitsWritten :2};_d [3]=code {Code :2<<(6+8),BitsWritten :2};_d [4]=code {Code :3<<(5+8),BitsWritten :3};_d [5]=code {Code :3<<(4+8),BitsWritten :4};_d [6]=code {Code :2<<(4+8),BitsWritten :4};_d [7]=code {Code :3<<(3+8),BitsWritten :5};
_d [8]=code {Code :5<<(2+8),BitsWritten :6};_d [9]=code {Code :4<<(2+8),BitsWritten :6};_d [10]=code {Code :4<<(1+8),BitsWritten :7};_d [11]=code {Code :5<<(1+8),BitsWritten :7};_d [12]=code {Code :7<<(1+8),BitsWritten :7};_d [13]=code {Code :4<<8,BitsWritten :8};
_d [14]=code {Code :7<<8,BitsWritten :8};_d [15]=code {Code :12<<8,BitsWritten :9};_d [16]=code {Code :5<<8|3<<6,BitsWritten :10};_d [17]=code {Code :6<<8,BitsWritten :10};_d [18]=code {Code :2<<8,BitsWritten :10};_d [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_d [20]=code {Code :13<<8,BitsWritten :11};_d [21]=code {Code :13<<8|4<<5,BitsWritten :11};_d [22]=code {Code :6<<8|7<<5,BitsWritten :11};_d [23]=code {Code :5<<8,BitsWritten :11};_d [24]=code {Code :2<<8|7<<5,BitsWritten :11};_d [25]=code {Code :3<<8,BitsWritten :11};
_d [26]=code {Code :12<<8|10<<4,BitsWritten :12};_d [27]=code {Code :12<<8|11<<4,BitsWritten :12};_d [28]=code {Code :12<<8|12<<4,BitsWritten :12};_d [29]=code {Code :12<<8|13<<4,BitsWritten :12};_d [30]=code {Code :6<<8|8<<4,BitsWritten :12};_d [31]=code {Code :6<<8|9<<4,BitsWritten :12};
_d [32]=code {Code :6<<8|10<<4,BitsWritten :12};_d [33]=code {Code :6<<8|11<<4,BitsWritten :12};_d [34]=code {Code :13<<8|2<<4,BitsWritten :12};_d [35]=code {Code :13<<8|3<<4,BitsWritten :12};_d [36]=code {Code :13<<8|4<<4,BitsWritten :12};_d [37]=code {Code :13<<8|5<<4,BitsWritten :12};
_d [38]=code {Code :13<<8|6<<4,BitsWritten :12};_d [39]=code {Code :13<<8|7<<4,BitsWritten :12};_d [40]=code {Code :6<<8|12<<4,BitsWritten :12};_d [41]=code {Code :6<<8|13<<4,BitsWritten :12};_d [42]=code {Code :13<<8|10<<4,BitsWritten :12};_d [43]=code {Code :13<<8|11<<4,BitsWritten :12};
_d [44]=code {Code :5<<8|4<<4,BitsWritten :12};_d [45]=code {Code :5<<8|5<<4,BitsWritten :12};_d [46]=code {Code :5<<8|6<<4,BitsWritten :12};_d [47]=code {Code :5<<8|7<<4,BitsWritten :12};_d [48]=code {Code :6<<8|4<<4,BitsWritten :12};_d [49]=code {Code :6<<8|5<<4,BitsWritten :12};
_d [50]=code {Code :5<<8|2<<4,BitsWritten :12};_d [51]=code {Code :5<<8|3<<4,BitsWritten :12};_d [52]=code {Code :2<<8|4<<4,BitsWritten :12};_d [53]=code {Code :3<<8|7<<4,BitsWritten :12};_d [54]=code {Code :3<<8|8<<4,BitsWritten :12};_d [55]=code {Code :2<<8|7<<4,BitsWritten :12};
_d [56]=code {Code :2<<8|8<<4,BitsWritten :12};_d [57]=code {Code :5<<8|8<<4,BitsWritten :12};_d [58]=code {Code :5<<8|9<<4,BitsWritten :12};_d [59]=code {Code :2<<8|11<<4,BitsWritten :12};_d [60]=code {Code :2<<8|12<<4,BitsWritten :12};_d [61]=code {Code :5<<8|10<<4,BitsWritten :12};
_d [62]=code {Code :6<<8|6<<4,BitsWritten :12};_d [63]=code {Code :6<<8|7<<4,BitsWritten :12};_db =make (map[int ]code );_db [0]=code {Code :53<<8,BitsWritten :8};_db [1]=code {Code :7<<(2+8),BitsWritten :6};_db [2]=code {Code :7<<(4+8),BitsWritten :4};
_db [3]=code {Code :8<<(4+8),BitsWritten :4};_db [4]=code {Code :11<<(4+8),BitsWritten :4};_db [5]=code {Code :12<<(4+8),BitsWritten :4};_db [6]=code {Code :14<<(4+8),BitsWritten :4};_db [7]=code {Code :15<<(4+8),BitsWritten :4};_db [8]=code {Code :19<<(3+8),BitsWritten :5};
_db [9]=code {Code :20<<(3+8),BitsWritten :5};_db [10]=code {Code :7<<(3+8),BitsWritten :5};_db [11]=code {Code :8<<(3+8),BitsWritten :5};_db [12]=code {Code :8<<(2+8),BitsWritten :6};_db [13]=code {Code :3<<(2+8),BitsWritten :6};_db [14]=code {Code :52<<(2+8),BitsWritten :6};
_db [15]=code {Code :53<<(2+8),BitsWritten :6};_db [16]=code {Code :42<<(2+8),BitsWritten :6};_db [17]=code {Code :43<<(2+8),BitsWritten :6};_db [18]=code {Code :39<<(1+8),BitsWritten :7};_db [19]=code {Code :12<<(1+8),BitsWritten :7};_db [20]=code {Code :8<<(1+8),BitsWritten :7};
_db [21]=code {Code :23<<(1+8),BitsWritten :7};_db [22]=code {Code :3<<(1+8),BitsWritten :7};_db [23]=code {Code :4<<(1+8),BitsWritten :7};_db [24]=code {Code :40<<(1+8),BitsWritten :7};_db [25]=code {Code :43<<(1+8),BitsWritten :7};_db [26]=code {Code :19<<(1+8),BitsWritten :7};
_db [27]=code {Code :36<<(1+8),BitsWritten :7};_db [28]=code {Code :24<<(1+8),BitsWritten :7};_db [29]=code {Code :2<<8,BitsWritten :8};_db [30]=code {Code :3<<8,BitsWritten :8};_db [31]=code {Code :26<<8,BitsWritten :8};_db [32]=code {Code :27<<8,BitsWritten :8};
_db [33]=code {Code :18<<8,BitsWritten :8};_db [34]=code {Code :19<<8,BitsWritten :8};_db [35]=code {Code :20<<8,BitsWritten :8};_db [36]=code {Code :21<<8,BitsWritten :8};_db [37]=code {Code :22<<8,BitsWritten :8};_db [38]=code {Code :23<<8,BitsWritten :8};
_db [39]=code {Code :40<<8,BitsWritten :8};_db [40]=code {Code :41<<8,BitsWritten :8};_db [41]=code {Code :42<<8,BitsWritten :8};_db [42]=code {Code :43<<8,BitsWritten :8};_db [43]=code {Code :44<<8,BitsWritten :8};_db [44]=code {Code :45<<8,BitsWritten :8};
_db [45]=code {Code :4<<8,BitsWritten :8};_db [46]=code {Code :5<<8,BitsWritten :8};_db [47]=code {Code :10<<8,BitsWritten :8};_db [48]=code {Code :11<<8,BitsWritten :8};_db [49]=code {Code :82<<8,BitsWritten :8};_db [50]=code {Code :83<<8,BitsWritten :8};
_db [51]=code {Code :84<<8,BitsWritten :8};_db [52]=code {Code :85<<8,BitsWritten :8};_db [53]=code {Code :36<<8,BitsWritten :8};_db [54]=code {Code :37<<8,BitsWritten :8};_db [55]=code {Code :88<<8,BitsWritten :8};_db [56]=code {Code :89<<8,BitsWritten :8};
_db [57]=code {Code :90<<8,BitsWritten :8};_db [58]=code {Code :91<<8,BitsWritten :8};_db [59]=code {Code :74<<8,BitsWritten :8};_db [60]=code {Code :75<<8,BitsWritten :8};_db [61]=code {Code :50<<8,BitsWritten :8};_db [62]=code {Code :51<<8,BitsWritten :8};
_db [63]=code {Code :52<<8,BitsWritten :8};_dd =make (map[int ]code );_dd [64]=code {Code :3<<8|3<<6,BitsWritten :10};_dd [128]=code {Code :12<<8|8<<4,BitsWritten :12};_dd [192]=code {Code :12<<8|9<<4,BitsWritten :12};_dd [256]=code {Code :5<<8|11<<4,BitsWritten :12};
_dd [320]=code {Code :3<<8|3<<4,BitsWritten :12};_dd [384]=code {Code :3<<8|4<<4,BitsWritten :12};_dd [448]=code {Code :3<<8|5<<4,BitsWritten :12};_dd [512]=code {Code :3<<8|12<<3,BitsWritten :13};_dd [576]=code {Code :3<<8|13<<3,BitsWritten :13};_dd [640]=code {Code :2<<8|10<<3,BitsWritten :13};
_dd [704]=code {Code :2<<8|11<<3,BitsWritten :13};_dd [768]=code {Code :2<<8|12<<3,BitsWritten :13};_dd [832]=code {Code :2<<8|13<<3,BitsWritten :13};_dd [896]=code {Code :3<<8|18<<3,BitsWritten :13};_dd [960]=code {Code :3<<8|19<<3,BitsWritten :13};_dd [1024]=code {Code :3<<8|20<<3,BitsWritten :13};
_dd [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_dd [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_dd [1216]=code {Code :119<<3,BitsWritten :13};_dd [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_dd [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_dd [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_dd [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_dd [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_dd [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_dd [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_dd [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_eg =make (map[int ]code );_eg [64]=code {Code :27<<(3+8),BitsWritten :5};_eg [128]=code {Code :18<<(3+8),BitsWritten :5};_eg [192]=code {Code :23<<(2+8),BitsWritten :6};_eg [256]=code {Code :55<<(1+8),BitsWritten :7};_eg [320]=code {Code :54<<8,BitsWritten :8};
_eg [384]=code {Code :55<<8,BitsWritten :8};_eg [448]=code {Code :100<<8,BitsWritten :8};_eg [512]=code {Code :101<<8,BitsWritten :8};_eg [576]=code {Code :104<<8,BitsWritten :8};_eg [640]=code {Code :103<<8,BitsWritten :8};_eg [704]=code {Code :102<<8,BitsWritten :9};
_eg [768]=code {Code :102<<8|1<<7,BitsWritten :9};_eg [832]=code {Code :105<<8,BitsWritten :9};_eg [896]=code {Code :105<<8|1<<7,BitsWritten :9};_eg [960]=code {Code :106<<8,BitsWritten :9};_eg [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_eg [1088]=code {Code :107<<8,BitsWritten :9};
_eg [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_eg [1216]=code {Code :108<<8,BitsWritten :9};_eg [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_eg [1344]=code {Code :109<<8,BitsWritten :9};_eg [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_eg [1472]=code {Code :76<<8,BitsWritten :9};
_eg [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_eg [1600]=code {Code :77<<8,BitsWritten :9};_eg [1664]=code {Code :24<<(2+8),BitsWritten :6};_eg [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_eb =make (map[int ]code );_eb [1792]=code {Code :1<<8,BitsWritten :11};
_eb [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_eb [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_eb [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_eb [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_eb [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_eb [2176]=code {Code :1<<8|5<<4,BitsWritten :12};
_eb [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_eb [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_eb [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_eb [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_eb [2496]=code {Code :1<<8|14<<4,BitsWritten :12};
_eb [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_f =make (map[int ]byte );_f [0]=0xFF;_f [1]=0xFE;_f [2]=0xFC;_f [3]=0xF8;_f [4]=0xF0;_f [5]=0xE0;_f [6]=0xC0;_f [7]=0x80;_f [8]=0x00;};func _gded (_dae ,_dfcf []byte ,_efcc ,_fde ,_gdg int )([]byte ,int ,int ){_bff :=_efab (_dae ,_gdg );
_egfc :=_fde >=0&&_dae [_fde ]==_edc ||_fde ==-1;_dfcf ,_efcc =_dege (_dfcf ,_efcc ,_ec );var _gaag int ;if _fde > -1{_gaag =_gdg -_fde ;}else {_gaag =_gdg -_fde -1;};_dfcf ,_efcc =_gcc (_dfcf ,_efcc ,_gaag ,_egfc );_egfc =!_egfc ;_gdc :=_bff -_gdg ;_dfcf ,_efcc =_gcc (_dfcf ,_efcc ,_gdc ,_egfc );
_fde =_bff ;return _dfcf ,_efcc ,_fde ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func init (){for _age ,_de :=range _db {_ecf (_ge ,_de ,0,_age );};for _ddc ,_cce :=range _eg {_ecf (_ge ,_cce ,0,_ddc );
};for _bed ,_ad :=range _d {_ecf (_cd ,_ad ,0,_bed );};for _aa ,_gf :=range _dd {_ecf (_cd ,_gf ,0,_aa );};for _ed ,_bee :=range _eb {_ecf (_ge ,_bee ,0,_ed );_ecf (_cd ,_bee ,0,_ed );};_ecf (_cf ,_df ,0,0);_ecf (_cf ,_ec ,0,0);_ecf (_cf ,_fb ,0,0);_ecf (_cf ,_egb ,0,0);
_ecf (_cf ,_bg ,0,0);_ecf (_cf ,_ca ,0,0);_ecf (_cf ,_dfc ,0,0);_ecf (_cf ,_g ,0,0);_ecf (_cf ,_gd ,0,0);};func _efdf (_gbd []byte ,_feb int )(bool ,int ){_fbbc :=_feb ;var (_cgd uint16 ;_dfde int ;);_cgd ,_dfde ,_feb =_gc (_gbd ,_feb );if _dfde > 4{return false ,_fbbc ;
};_cgd >>=uint (4-_dfde );_cgd <<=4;if _cgd !=_ea .Code {return false ,_fbbc ;};return true ,_feb -4+_dfde ;};func (_gga *Encoder )appendEncodedRow (_bae ,_eegg []byte ,_dad int )[]byte {if len (_bae )> 0&&_dad !=0&&!_gga .EncodedByteAlign {_bae [len (_bae )-1]=_bae [len (_bae )-1]|_eegg [0];
_bae =append (_bae ,_eegg [1:]...);}else {_bae =append (_bae ,_eegg ...);};return _bae ;};func _egfe (_caaa []byte ,_gfc bool ,_dea int )(int ,int ){_gefb :=0;for _dea < len (_caaa ){if _gfc {if _caaa [_dea ]!=_edc {break ;};}else {if _caaa [_dea ]!=_gfd {break ;
};};_gefb ++;_dea ++;};return _gefb ,_dea ;};func (_ega *Encoder )decodeG31D (_fg []byte )([][]byte ,error ){var _gdf [][]byte ;var _dac int ;for (_dac /8)< len (_fg ){var _gab bool ;_gab ,_dac =_efdf (_fg ,_dac );if !_gab {if _ega .EndOfLine {return nil ,_eac ;
};}else {for _bc :=0;_bc < 5;_bc ++{_gab ,_dac =_efdf (_fg ,_dac );if !_gab {if _bc ==0{break ;};return nil ,_ab ;};};if _gab {break ;};};var _egf []byte ;_egf ,_dac =_ega .decodeRow1D (_fg ,_dac );if _ega .EncodedByteAlign &&_dac %8!=0{_dac +=8-_dac %8;
};_gdf =append (_gdf ,_egf );if _ega .Rows > 0&&!_ega .EndOfBlock &&len (_gdf )>=_ega .Rows {break ;};};return _gdf ,nil ;};func _dcd (_fd uint16 ,_fdd int ,_bbd bool )(int ,code ){var _ccc *int ;var _eff *code ;if _bbd {_ccc ,_eff =_egc (_ge ,_fd ,_fdd );
}else {_ccc ,_eff =_egc (_cd ,_fd ,_fdd );};if _ccc ==nil {return -1,code {};};return *_ccc ,*_eff ;};func _ecf (_afd *decodingTreeNode ,_begb code ,_gbc int ,_acac int ){_egd :=_dce (_begb .Code ,_gbc );_gbc ++;if _egd ==1{if _afd .Right ==nil {_afd .Right =&decodingTreeNode {Val :_egd };
};if _gbc ==_begb .BitsWritten {_afd .Right .RunLen =&_acac ;_afd .Right .Code =&_begb ;}else {_ecf (_afd .Right ,_begb ,_gbc ,_acac );};}else {if _afd .Left ==nil {_afd .Left =&decodingTreeNode {Val :_egd };};if _gbc ==_begb .BitsWritten {_afd .Left .RunLen =&_acac ;
_afd .Left .Code =&_begb ;}else {_ecf (_afd .Left ,_begb ,_gbc ,_acac );};};};func _efab (_fac []byte ,_aged int )int {if _aged >=len (_fac ){return _aged ;};if _aged < -1{_aged =-1;};var _baef byte ;if _aged > -1{_baef =_fac [_aged ];}else {_baef =_edc ;
};_feed :=_aged +1;for _feed < len (_fac ){if _fac [_feed ]!=_baef {break ;};_feed ++;};return _feed ;};func (_dcde *Encoder )encodeG31D (_cgeg [][]byte )[]byte {var _fga []byte ;_abb :=0;for _ffc :=range _cgeg {if _dcde .Rows > 0&&!_dcde .EndOfBlock &&_ffc ==_dcde .Rows {break ;
};_ddb ,_cgdg :=_cdb (_cgeg [_ffc ],_abb ,_ea );_fga =_dcde .appendEncodedRow (_fga ,_ddb ,_abb );if _dcde .EncodedByteAlign {_cgdg =0;};_abb =_cgdg ;};if _dcde .EndOfBlock {_bgc ,_ :=_fcag (_abb );_fga =_dcde .appendEncodedRow (_fga ,_bgc ,_abb );};return _fga ;
};func _bcc (_bad []byte ,_fbb int )(bool ,int ,error ){_bcg :=_fbb ;var _cegb bool ;_cegb ,_fbb =_efdf (_bad ,_fbb );if _cegb {_cegb ,_fbb =_efdf (_bad ,_fbb );if _cegb {return true ,_fbb ,nil ;};return false ,_bcg ,_eab ;};return false ,_bcg ,nil ;};
func _egc (_fee *decodingTreeNode ,_ggd uint16 ,_aeg int )(*int ,*code ){if _fee ==nil {return nil ,nil ;};if _aeg ==16{return _fee .RunLen ,_fee .Code ;};_eccb :=_dce (_ggd ,_aeg );_aeg ++;var _cge *int ;var _fec *code ;if _eccb ==1{_cge ,_fec =_egc (_fee .Right ,_ggd ,_aeg );
}else {_cge ,_fec =_egc (_fee .Left ,_ggd ,_aeg );};if _cge ==nil {_cge =_fee .RunLen ;_fec =_fee .Code ;};return _cge ,_fec ;};func _gcc (_ggg []byte ,_geg int ,_dge int ,_aae bool )([]byte ,int ){var (_efa code ;_acb bool ;);for !_acb {_efa ,_dge ,_acb =_dee (_dge ,_aae );
_ggg ,_geg =_dege (_ggg ,_geg ,_efa );};return _ggg ,_geg ;};func _gc (_abee []byte ,_gabf int )(uint16 ,int ,int ){_fba :=_gabf ;_gfa :=_gabf /8;_gabf %=8;if _gfa >=len (_abee ){return 0,16,_fba ;};_bde :=byte (0xFF>>uint (_gabf ));_bfb :=uint16 ((_abee [_gfa ]&_bde )<<uint (_gabf ))<<8;
_aabe :=8-_gabf ;_gfa ++;_gabf =0;if _gfa >=len (_abee ){return _bfb >>(16-uint (_aabe )),16-_aabe ,_fba +_aabe ;};_bfb |=uint16 (_abee [_gfa ])<<(8-uint (_aabe ));_aabe +=8;_gfa ++;_gabf =0;if _gfa >=len (_abee ){return _bfb >>(16-uint (_aabe )),16-_aabe ,_fba +_aabe ;
};if _aabe ==16{return _bfb ,0,_fba +_aabe ;};_afc :=16-_aabe ;_bfb |=uint16 (_abee [_gfa ]>>(8-uint (_afc )));return _bfb ,0,_fba +16;};func _bb (_dfd [][]byte ,_aaf []byte ,_ffe bool ,_cadd int )([]byte ,int ){_add :=_adg (_aaf ,_dfd [len (_dfd )-1],_cadd ,_ffe );
_fc :=_efab (_dfd [len (_dfd )-1],_add );if _cadd ==-1{_aaf =_dab (_aaf ,_ffe ,_fc -_cadd -1);}else {_aaf =_dab (_aaf ,_ffe ,_fc -_cadd );};_cadd =_fc ;return _aaf ,_cadd ;};var (_edc byte =1;_gfd byte =0;);func _fa (_bcf [][]byte ,_efd []byte ,_aef bool ,_ggb ,_gef int )([]byte ,int ){_ce :=_adg (_efd ,_bcf [len (_bcf )-1],_ggb ,_aef );
_fgba :=_ce +_gef ;if _ggb ==-1{_efd =_dab (_efd ,_aef ,_fgba -_ggb -1);}else {_efd =_dab (_efd ,_aef ,_fgba -_ggb );};_ggb =_fgba ;return _efd ,_ggb ;};func _gfe (_gb []byte ,_cda int )(bool ,int ,error ){_ba :=_cda ;var _adda =false ;for _dacg :=0;_dacg < 6;
_dacg ++{_adda ,_cda =_efda (_gb ,_cda );if !_adda {if _dacg > 1{return false ,_ba ,_be ;};_cda =_ba ;break ;};};return _adda ,_cda ,nil ;};func _bfa (_cega ,_ded []byte ,_fce int )int {_cgcb :=_efab (_ded ,_fce );if _cgcb < len (_ded )&&(_fce ==-1&&_ded [_cgcb ]==_edc ||_fce >=0&&_fce < len (_cega )&&_cega [_fce ]==_ded [_cgcb ]||_fce >=len (_cega )&&_cega [_fce -1]!=_ded [_cgcb ]){_cgcb =_efab (_ded ,_cgcb );
};return _cgcb ;};func _ee (_dcee []byte ,_gea int ,_edd bool )(int ,int ){var (_ged uint16 ;_bcef int ;_beg int ;);_beg =_gea ;_ged ,_bcef ,_ =_gc (_dcee ,_gea );_fca ,_fbd :=_dcd (_ged ,_bcef ,_edd );if _fca ==-1{return -1,_beg ;};return _fca ,_beg +_fbd .BitsWritten ;
};func (_ddg *Encoder )decodeG4 (_cg []byte )([][]byte ,error ){_fgb :=make ([]byte ,_ddg .Columns );for _cdd :=range _fgb {_fgb [_cdd ]=_edc ;};_bgf :=make ([][]byte ,1);_bgf [0]=_fgb ;var (_fgf bool ;_gg error ;_gee int ;);for (_gee /8)< len (_cg ){_fgf ,_gee ,_gg =_bcc (_cg ,_gee );
if _gg !=nil {return nil ,_gg ;};if _fgf {break ;};var (_bce code ;_aad bool ;);_ede :=true ;var _aca []byte ;_dc :=-1;_edb :=true ;for _dc < _ddg .Columns {_bce ,_gee ,_aad =_efe (_cg ,_gee );if !_aad {_c .Log .Warning ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u0063i\u0074\u0074\u0066a\u0078:\u0020\u0025\u0076",_ag );
_edb =false ;break ;};switch _bce {case _df :_aca ,_dc =_bb (_bgf ,_aca ,_ede ,_dc );case _ec :_aca ,_gee ,_dc ,_gg =_dg (_cg ,_aca ,_gee ,_ede ,_dc );if _gg !=nil {_c .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064i\u006e\u0067\u0020\u0063c\u0069\u0074\u0074\u0066\u0061\u0078\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020\u006d\u006f\u0064\u0065\u003a\u0020\u0025\u0076",_gg );
_edb =false ;break ;};case _fb :_aca ,_dc =_fa (_bgf ,_aca ,_ede ,_dc ,0);_ede =!_ede ;case _egb :_aca ,_dc =_fa (_bgf ,_aca ,_ede ,_dc ,1);_ede =!_ede ;case _bg :_aca ,_dc =_fa (_bgf ,_aca ,_ede ,_dc ,2);_ede =!_ede ;case _ca :_aca ,_dc =_fa (_bgf ,_aca ,_ede ,_dc ,3);
_ede =!_ede ;case _dfc :_aca ,_dc =_fa (_bgf ,_aca ,_ede ,_dc ,-1);_ede =!_ede ;case _g :_aca ,_dc =_fa (_bgf ,_aca ,_ede ,_dc ,-2);_ede =!_ede ;case _gd :_aca ,_dc =_fa (_bgf ,_aca ,_ede ,_dc ,-3);_ede =!_ede ;};if len (_aca )>=_ddg .Columns {break ;};
};if !_edb {_gee +=8-_gee %8;continue ;};if _ddg .EncodedByteAlign &&_gee %8!=0{_gee +=8-_gee %8;};_bgf =append (_bgf ,_aca );if _ddg .Rows > 0&&!_ddg .EndOfBlock &&len (_bgf )>=(_ddg .Rows +1){break ;};};_bgf =_bgf [1:];return _bgf ,nil ;};func (_ecafd *Encoder )decodeRow1D (_fbad []byte ,_gfg int )([]byte ,int ){var _efcd []byte ;
_gce :=true ;var _gaa int ;_gaa ,_gfg =_ee (_fbad ,_gfg ,_gce );for _gaa !=-1{_efcd =_dab (_efcd ,_gce ,_gaa );if _gaa < 64{if len (_efcd )>=_ecafd .Columns {break ;};_gce =!_gce ;};_gaa ,_gfg =_ee (_fbad ,_gfg ,_gce );};return _efcd ,_gfg ;};func _cde (_dggf []byte ,_baf int )([]byte ,int ){return _dege (_dggf ,_baf ,_df )};
func _dcg (_dfcb ,_gbb int )code {var _gad code ;switch _gbb -_dfcb {case -1:_gad =_egb ;case -2:_gad =_bg ;case -3:_gad =_ca ;case 0:_gad =_fb ;case 1:_gad =_dfc ;case 2:_gad =_g ;case 3:_gad =_gd ;};return _gad ;};func _dege (_gba []byte ,_ccd int ,_bbb code )([]byte ,int ){_gcd :=0;
for _gcd < _bbb .BitsWritten {_fed :=_ccd /8;_cbc :=_ccd %8;if _fed >=len (_gba ){_gba =append (_gba ,0);};_eaa :=8-_cbc ;_cbb :=_bbb .BitsWritten -_gcd ;if _eaa > _cbb {_eaa =_cbb ;};if _gcd < 8{_gba [_fed ]=_gba [_fed ]|byte (_bbb .Code >>uint (8+_cbc -_gcd ))&_f [8-_eaa -_cbc ];
}else {_gba [_fed ]=_gba [_fed ]|(byte (_bbb .Code <<uint (_gcd -8))&_f [8-_eaa ])>>uint (_cbc );};_ccd +=_eaa ;_gcd +=_eaa ;};return _gba ,_ccd ;};func _cdb (_adde []byte ,_abae int ,_feec code )([]byte ,int ){_bab :=true ;var _dbb []byte ;_dbb ,_abae =_dege (nil ,_abae ,_feec );
_bbg :=0;var _efg int ;for _bbg < len (_adde ){_efg ,_bbg =_egfe (_adde ,_bab ,_bbg );_dbb ,_abae =_gcc (_dbb ,_abae ,_efg ,_bab );_bab =!_bab ;};return _dbb ,_abae %8;};func _dab (_gag []byte ,_beb bool ,_dgd int )[]byte {if _dgd < 0{return _gag ;};_eeg :=make ([]byte ,_dgd );
if _beb {for _ecc :=0;_ecc < len (_eeg );_ecc ++{_eeg [_ecc ]=_edc ;};}else {for _ecd :=0;_ecd < len (_eeg );_ecd ++{_eeg [_ecd ]=_gfd ;};};_gag =append (_gag ,_eeg ...);return _gag ;};func _bdc (_cba ,_deg []byte ,_acd int ,_dff bool )([]byte ,int ,error ){_fe :=_acd ;
var _eca int ;for _eca ,_acd =_ee (_cba ,_acd ,_dff );_eca !=-1;_eca ,_acd =_ee (_cba ,_acd ,_dff ){_deg =_dab (_deg ,_dff ,_eca );if _eca < 64{break ;};};if _eca ==-1{return _deg ,_fe ,_ff ;};return _deg ,_acd ,nil ;};func _fcag (_bdg int )([]byte ,int ){var _efec []byte ;
for _ffd :=0;_ffd < 6;_ffd ++{_efec ,_bdg =_dege (_efec ,_bdg ,_ea );};return _efec ,_bdg %8;};func _dee (_ece int ,_dbf bool )(code ,int ,bool ){if _ece < 64{if _dbf {return _db [_ece ],0,true ;};return _d [_ece ],0,true ;};_egee :=_ece /64;if _egee > 40{return _eb [2560],_ece -2560,false ;
};if _egee > 27{return _eb [_egee *64],_ece -_egee *64,false ;};if _dbf {return _eg [_egee *64],_ece -_egee *64,false ;};return _dd [_egee *64],_ece -_egee *64,false ;};func _fbfaf (_cfd []byte ,_fbbb int )(bool ,int ){return _bbc (_cfd ,_fbbb ,_ef )};
func (_ga *Encoder )Decode (encoded []byte )([][]byte ,error ){if _ga .BlackIs1 {_edc =0;_gfd =1;}else {_edc =1;_gfd =0;};if _ga .K ==0{return _ga .decodeG31D (encoded );};if _ga .K > 0{return _ga .decodeG32D (encoded );};if _ga .K < 4{return _ga .decodeG4 (encoded );
};return nil ,nil ;};func _efda (_cef []byte ,_dfb int )(bool ,int ){return _bbc (_cef ,_dfb ,_eba )};type code struct{Code uint16 ;BitsWritten int ;};var (_d map[int ]code ;_db map[int ]code ;_dd map[int ]code ;_eg map[int ]code ;_eb map[int ]code ;_f map[int ]byte ;
_ea =code {Code :1<<4,BitsWritten :12};_eba =code {Code :3<<3,BitsWritten :13};_ef =code {Code :2<<3,BitsWritten :13};_df =code {Code :1<<12,BitsWritten :4};_ec =code {Code :1<<13,BitsWritten :3};_fb =code {Code :1<<15,BitsWritten :1};_egb =code {Code :3<<13,BitsWritten :3};
_bg =code {Code :3<<10,BitsWritten :6};_ca =code {Code :3<<9,BitsWritten :7};_dfc =code {Code :2<<13,BitsWritten :3};_g =code {Code :2<<10,BitsWritten :6};_gd =code {Code :2<<9,BitsWritten :7};);func _efe (_cdc []byte ,_dgg int )(code ,int ,bool ){var (_aafg uint16 ;
_ebg int ;_fag int ;);_fag =_dgg ;_aafg ,_ebg ,_ =_gc (_cdc ,_dgg );_fbfa ,_geaa :=_eef (_aafg ,_ebg );if !_geaa {return code {},_fag ,false ;};return _fbfa ,_fag +_fbfa .BitsWritten ,true ;};var (_eab =_e .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");
_be =_e .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_ff =_e .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");
_eac =_e .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_ab =_e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ag =_e .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _ead (_gaf []byte ,_fgdg ,_bbdg ,_aebg int )([]byte ,int ){_gdd :=_dcg (_bbdg ,_aebg );
_gaf ,_fgdg =_dege (_gaf ,_fgdg ,_gdd );return _gaf ,_fgdg ;};func (_aba *Encoder )encodeG4 (_edf [][]byte )[]byte {_gde :=make ([][]byte ,len (_edf ));copy (_gde ,_edf );_gde =_baefe (_gde );var _egg []byte ;var _caa int ;for _bgb :=1;_bgb < len (_gde );
_bgb ++{if _aba .Rows > 0&&!_aba .EndOfBlock &&_bgb ==(_aba .Rows +1){break ;};var _egfg []byte ;var _bebg ,_bdbb ,_gda int ;_cfc :=_caa ;_fbc :=-1;for _fbc < len (_gde [_bgb ]){_bebg =_efab (_gde [_bgb ],_fbc );_bdbb =_bfa (_gde [_bgb ],_gde [_bgb -1],_fbc );
_gda =_efab (_gde [_bgb -1],_bdbb );if _gda < _bebg {_egfg ,_cfc =_dege (_egfg ,_cfc ,_df );_fbc =_gda ;}else {if _a .Abs (float64 (_bdbb -_bebg ))> 3{_egfg ,_cfc ,_fbc =_gded (_gde [_bgb ],_egfg ,_cfc ,_fbc ,_bebg );}else {_egfg ,_cfc =_ead (_egfg ,_cfc ,_bebg ,_bdbb );
_fbc =_bebg ;};};};_egg =_aba .appendEncodedRow (_egg ,_egfg ,_caa );if _aba .EncodedByteAlign {_cfc =0;};_caa =_cfc %8;};if _aba .EndOfBlock {_agc ,_ :=_dgc (_caa );_egg =_aba .appendEncodedRow (_egg ,_agc ,_caa );};return _egg ;};func (_aea *Encoder )Encode (pixels [][]byte )[]byte {if _aea .BlackIs1 {_edc =0;
_gfd =1;}else {_edc =1;_gfd =0;};if _aea .K ==0{return _aea .encodeG31D (pixels );};if _aea .K > 0{return _aea .encodeG32D (pixels );};if _aea .K < 0{return _aea .encodeG4 (pixels );};return nil ;};func _dg (_ggbc ,_ceg []byte ,_fab int ,_cb bool ,_af int )([]byte ,int ,int ,error ){_ade :=_fab ;
var _bbf error ;_ceg ,_fab ,_bbf =_bdc (_ggbc ,_ceg ,_fab ,_cb );if _bbf !=nil {return _ceg ,_ade ,_af ,_bbf ;};_cb =!_cb ;_ceg ,_fab ,_bbf =_bdc (_ggbc ,_ceg ,_fab ,_cb );if _bbf !=nil {return _ceg ,_ade ,_af ,_bbf ;};_af =len (_ceg );return _ceg ,_fab ,_af ,nil ;
};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _eef (_cca uint16 ,_fbg int )(code ,bool ){_ ,_abg :=_egc (_cf ,_cca ,_fbg );if _abg ==nil {return code {},false ;
};return *_abg ,true ;};func _fabc (_feca int )([]byte ,int ){var _dbd []byte ;for _bdec :=0;_bdec < 6;_bdec ++{_dbd ,_feca =_dege (_dbd ,_feca ,_eba );};return _dbd ,_feca %8;};var (_ge =&decodingTreeNode {Val :255};_cd =&decodingTreeNode {Val :255};_cf =&decodingTreeNode {Val :255};
);func _baefe (_ceb [][]byte )[][]byte {_deeb :=make ([]byte ,len (_ceb [0]));for _fea :=range _deeb {_deeb [_fea ]=_edc ;};_ceb =append (_ceb ,[]byte {});for _dag :=len (_ceb )-1;_dag > 0;_dag --{_ceb [_dag ]=_ceb [_dag -1];};_ceb [0]=_deeb ;return _ceb ;
};func (_bf *Encoder )decodeG32D (_ac []byte )([][]byte ,error ){var (_acf [][]byte ;_fbf int ;_ae error ;);_bgg :for (_fbf /8)< len (_ac ){var _bd bool ;_bd ,_fbf ,_ae =_gfe (_ac ,_fbf );if _ae !=nil {return nil ,_ae ;};if _bd {break ;};_bd ,_fbf =_efda (_ac ,_fbf );
if !_bd {if _bf .EndOfLine {return nil ,_eac ;};};var _abd []byte ;_abd ,_fbf =_bf .decodeRow1D (_ac ,_fbf );if _bf .EncodedByteAlign &&_fbf %8!=0{_fbf +=8-_fbf %8;};if _abd !=nil {_acf =append (_acf ,_abd );};if _bf .Rows > 0&&!_bf .EndOfBlock &&len (_acf )>=_bf .Rows {break ;
};for _bdb :=1;_bdb < _bf .K &&(_fbf /8)< len (_ac );_bdb ++{_bd ,_fbf =_fbfaf (_ac ,_fbf );if !_bd {_bd ,_fbf ,_ae =_gfe (_ac ,_fbf );if _ae !=nil {return nil ,_ae ;};if _bd {break _bgg ;}else {if _bf .EndOfLine {return nil ,_eac ;};};};var (_cad code ;
_eaf bool ;);_acc :=true ;var _aab []byte ;_efc :=-1;for _cad ,_fbf ,_eaf =_efe (_ac ,_fbf );_eaf ;_cad ,_fbf ,_eaf =_efe (_ac ,_fbf ){switch _cad {case _df :_aab ,_efc =_bb (_acf ,_aab ,_acc ,_efc );case _ec :_aab ,_fbf ,_efc ,_ae =_dg (_ac ,_aab ,_fbf ,_acc ,_efc );
if _ae !=nil {return nil ,_ae ;};case _fb :_aab ,_efc =_fa (_acf ,_aab ,_acc ,_efc ,0);_acc =!_acc ;case _egb :_aab ,_efc =_fa (_acf ,_aab ,_acc ,_efc ,1);_acc =!_acc ;case _bg :_aab ,_efc =_fa (_acf ,_aab ,_acc ,_efc ,2);_acc =!_acc ;case _ca :_aab ,_efc =_fa (_acf ,_aab ,_acc ,_efc ,3);
_acc =!_acc ;case _dfc :_aab ,_efc =_fa (_acf ,_aab ,_acc ,_efc ,-1);_acc =!_acc ;case _g :_aab ,_efc =_fa (_acf ,_aab ,_acc ,_efc ,-2);_acc =!_acc ;case _gd :_aab ,_efc =_fa (_acf ,_aab ,_acc ,_efc ,-3);_acc =!_acc ;};if len (_aab )>=_bf .Columns {break ;
};};if _bf .EncodedByteAlign &&_fbf %8!=0{_fbf +=8-_fbf %8;};if _aab !=nil {_acf =append (_acf ,_aab );};if _bf .Rows > 0&&!_bf .EndOfBlock &&len (_acf )>=_bf .Rows {break _bgg ;};};};return _acf ,nil ;};func _dgc (_egbg int )([]byte ,int ){var _fagb []byte ;
for _eafg :=0;_eafg < 2;_eafg ++{_fagb ,_egbg =_dege (_fagb ,_egbg ,_ea );};return _fagb ,_egbg %8;};func _dce (_dca uint16 ,_cfb int )byte {if _cfb < 8{_dca >>=8;};_cfb %=8;_ecaf :=byte (0x01<<(7-uint (_cfb )));return (byte (_dca )&_ecaf )>>(7-uint (_cfb ));
};func _adg (_fgd ,_fagc []byte ,_fbcb int ,_aeb bool )int {_cddg :=_efab (_fagc ,_fbcb );if _cddg < len (_fagc )&&(_fbcb ==-1&&_fagc [_cddg ]==_edc ||_fbcb >=0&&_fbcb < len (_fgd )&&_fgd [_fbcb ]==_fagc [_cddg ]||_fbcb >=len (_fgd )&&_aeb &&_fagc [_cddg ]==_edc ||_fbcb >=len (_fgd )&&!_aeb &&_fagc [_cddg ]==_gfd ){_cddg =_efab (_fagc ,_cddg );
};return _cddg ;};