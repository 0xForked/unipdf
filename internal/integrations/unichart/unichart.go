//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package unichart ;import (_c "bytes";_gf "fmt";_cd "github.com/unidoc/unichart/render";_e "github.com/unidoc/unipdf/v3/common";_da "github.com/unidoc/unipdf/v3/contentstream";_gc "github.com/unidoc/unipdf/v3/contentstream/draw";_ed "github.com/unidoc/unipdf/v3/core";
_ff "github.com/unidoc/unipdf/v3/model";_ge "image/color";_f "io";_d "math";);func (_dg *Renderer )QuadCurveTo (cx ,cy ,x ,y int ){_dg ._fg .Add_v (float64 (x ),float64 (y ),float64 (cx ),float64 (cy ));};func (_ce *Renderer )SetStrokeWidth (width float64 ){_ce ._edd =width ;
_ce ._fg .Add_w (width )};func (_eeb *Renderer )SetClassName (name string ){};func (_dab *Renderer )SetFontSize (size float64 ){_dab ._cde =size };func NewRenderer (cc *_da .ContentCreator ,res *_ff .PdfPageResources )func (int ,int )(_cd .Renderer ,error ){return func (_cb ,_gg int )(_cd .Renderer ,error ){_bd :=&Renderer {_ec :_cb ,_dac :_gg ,_a :72,_fg :cc ,_de :res ,_cg :map[*_ff .PdfFont ]_ed .PdfObjectName {}};
_bd .ResetStyle ();return _bd ,nil ;};};func (_dcd *Renderer )SetFillColor (color _ge .Color ){_dcd ._ad =color ;_fb ,_ac ,_bg ,_ :=_dbc (color );_dcd ._fg .Add_rg (_fb ,_ac ,_bg );};func _beb (_aca float64 )float64 {return _aca *_d .Pi /180.0};func (_eee *Renderer )Fill (){_eee ._fg .Add_f ()};
func (_fc *Renderer )SetFontColor (color _ge .Color ){_fc ._ga =color };func (_ca *Renderer )ResetStyle (){_ca .SetFillColor (_ge .Black );_ca .SetStrokeColor (_ge .Transparent );_ca .SetStrokeWidth (0);_ca .SetFont (_ff .DefaultFont ());_ca .SetFontColor (_ge .Black );
_ca .SetFontSize (12);_ca .SetTextRotation (0);};func (_cc *Renderer )Close (){_cc ._fg .Add_h ()};type Renderer struct{_ec int ;_dac int ;_a float64 ;_fg *_da .ContentCreator ;_de *_ff .PdfPageResources ;_ad _ge .Color ;_b _ge .Color ;_edd float64 ;_ae *_ff .PdfFont ;
_cde float64 ;_ga _ge .Color ;_be float64 ;_cg map[*_ff .PdfFont ]_ed .PdfObjectName ;};func (_dgda *Renderer )getTextWidth (_afa string )float64 {var _dce float64 ;for _ ,_dgdb :=range _afa {_gfa ,_eaa :=_dgda ._ae .GetRuneMetrics (_dgdb );if !_eaa {_e .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074e\u0064 \u0072u\u006e\u0065\u0020\u0025\u0076\u0020\u0069\u006e\u0020\u0066\u006f\u006e\u0074",_dgdb );
};_dce +=_gfa .Wx ;};return _dgda ._cde *_dce /1000.0;};func _eba (_bgc float64 )float64 {return _bgc *180/_d .Pi };func (_fgb *Renderer )ClearTextRotation (){_fgb ._be =0};func _dbc (_cgbg _ge .Color )(float64 ,float64 ,float64 ,float64 ){_bcf ,_eec ,_ccdc ,_dcef :=_fde (_cgbg );
return float64 (_bcf )/255,float64 (_eec )/255,float64 (_ccdc )/255,float64 (_dcef )/255;};func _ecfb (_fad string ,_cf int ,_eed func (_ed .PdfObjectName )bool )_ed .PdfObjectName {_gbf :=_ed .PdfObjectName (_gf .Sprintf ("\u0025\u0073\u0025\u0064",_fad ,_cf ));
for _gacc :=_cf ;_eed (_gbf );{_gacc ++;_gbf =_ed .PdfObjectName (_gf .Sprintf ("\u0025\u0073\u0025\u0064",_fad ,_gacc ));};return _gbf ;};func (_gd *Renderer )MoveTo (x ,y int ){_gd ._fg .Add_m (float64 (x ),float64 (y ))};func (_gb *Renderer )Stroke (){_gb ._fg .Add_S ()};
func (_fea *Renderer )wrapText (_ef string )[]string {var (_dcdb []string ;_gce []rune ;);for _ ,_egb :=range _ef {if _egb =='\n'{_dcdb =append (_dcdb ,string (_gce ));_gce =[]rune {};continue ;};_gce =append (_gce ,_egb );};if len (_gce )> 0{_dcdb =append (_dcdb ,string (_gce ));
};return _dcdb ;};func (_gea *Renderer )ArcTo (cx ,cy int ,rx ,ry ,startAngle ,deltaAngle float64 ){startAngle =_eba (2.0*_d .Pi -startAngle );deltaAngle =_eba (-deltaAngle );_daf ,_adc :=deltaAngle ,1;if _d .Abs (deltaAngle )> 90.0{_adc =int (_d .Ceil (_d .Abs (deltaAngle )/90.0));
_daf =deltaAngle /float64 (_adc );};var (_dge =_beb (_daf /2);_fa =_d .Abs (4.0/3.0*(1.0-_d .Cos (_dge ))/_d .Sin (_dge ));_faf =float64 (cx );_dag =float64 (cy ););for _bgg :=0;_bgg < _adc ;_bgg ++{_eef :=_beb (startAngle +float64 (_bgg )*_daf );_dgd :=_beb (startAngle +float64 (_bgg +1)*_daf );
_def :=_d .Cos (_eef );_abe :=_d .Cos (_dgd );_deg :=_d .Sin (_eef );_fba :=_d .Sin (_dgd );var _edf []float64 ;if _daf > 0{_edf =[]float64 {_faf +rx *_def ,_dag -ry *_deg ,_faf +rx *(_def -_fa *_deg ),_dag -ry *(_deg +_fa *_def ),_faf +rx *(_abe +_fa *_fba ),_dag -ry *(_fba -_fa *_abe ),_faf +rx *_abe ,_dag -ry *_fba };
}else {_edf =[]float64 {_faf +rx *_def ,_dag -ry *_deg ,_faf +rx *(_def +_fa *_deg ),_dag -ry *(_deg -_fa *_def ),_faf +rx *(_abe -_fa *_fba ),_dag -ry *(_fba +_fa *_abe ),_faf +rx *_abe ,_dag -ry *_fba };};if _bgg ==0{_gea ._fg .Add_l (_edf [0],_edf [1]);
};_gea ._fg .Add_c (_edf [2],_edf [3],_edf [4],_edf [5],_edf [6],_edf [7]);};};func (_ab *Renderer )LineTo (x ,y int ){_ab ._fg .Add_l (float64 (x ),float64 (y ))};func (_ccc *Renderer )Text (text string ,x ,y int ){_ccc ._fg .Add_q ();_ccc .SetFont (_ccc ._ae );
_gda ,_dbd ,_cbc ,_ :=_dbc (_ccc ._ga );_ccc ._fg .Add_rg (_gda ,_dbd ,_cbc );_ccc ._fg .Translate (float64 (x ),float64 (y )).Scale (1,-1);if _dae :=_ccc ._be ;_dae !=0{_ccc ._fg .RotateDeg (_dae );};_ccc ._fg .Add_BT ().Add_TL (_ccc ._cde );var (_gec =_ccc ._ae .Encoder ();
_ffd =_ccc .wrapText (text );_gdc =len (_ffd ););for _fd ,_geb :=range _ffd {_ccc ._fg .Add_TJ (_ed .MakeStringFromBytes (_gec .Encode (_geb )));if _fd !=_gdc -1{_ccc ._fg .Add_Tstar ();};};_ccc ._fg .Add_ET ();_ccc ._fg .Add_Q ();};func (_db *Renderer )Circle (radius float64 ,x ,y int ){_cdg :=radius ;
if _aea :=_db ._edd ;_aea !=0{_cdg -=_aea /2;};_ba :=_cdg *0.551784;_dee :=_gc .CubicBezierPath {Curves :[]_gc .CubicBezierCurve {_gc .NewCubicBezierCurve (-_cdg ,0,-_cdg ,_ba ,-_ba ,_cdg ,0,_cdg ),_gc .NewCubicBezierCurve (0,_cdg ,_ba ,_cdg ,_cdg ,_ba ,_cdg ,0),_gc .NewCubicBezierCurve (_cdg ,0,_cdg ,-_ba ,_ba ,-_cdg ,0,-_cdg ),_gc .NewCubicBezierCurve (0,-_cdg ,-_ba ,-_cdg ,-_cdg ,-_ba ,-_cdg ,0)}};
if _gcb :=_db ._edd ;_gcb !=0{_dee =_dee .Offset (_gcb /2,_gcb /2);};_dee =_dee .Offset (float64 (x ),float64 (y ));_gc .DrawBezierPathWithCreator (_dee ,_db ._fg );};func (_aa *Renderer )SetStrokeDashArray (dashArray []float64 ){_bf :=make ([]int64 ,len (dashArray ));
for _ceg ,_eg :=range dashArray {_bf [_ceg ]=int64 (_eg );};_aa ._fg .Add_d (_bf ,0);};func (_ee *Renderer )SetDPI (dpi float64 ){_ee ._a =dpi };func (_gac *Renderer )SetStrokeColor (color _ge .Color ){_gac ._b =color ;_eb ,_dc ,_ded ,_ :=_dbc (color );
_gac ._fg .Add_RG (_eb ,_dc ,_ded );};func (_dd *Renderer )SetFont (font _cd .Font ){_cgb ,_gdg :=font .(*_ff .PdfFont );if !_gdg {_e .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065");
return ;};_ecf ,_gdg :=_dd ._cg [_cgb ];if !_gdg {_ecf =_ecfb ("\u0046\u006f\u006e\u0074",1,_dd ._de .HasFontByName );if _ffg :=_dd ._de .SetFontByName (_ecf ,_cgb .ToPdfObject ());_ffg !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0064d\u0020\u0066\u006f\u006e\u0074\u0020\u0025\u0076\u0020\u0074\u006f\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073",_cgb );
};_dd ._cg [_cgb ]=_ecf ;};_dd ._fg .Add_Tf (_ecf ,_dd ._cde );_dd ._ae =_cgb ;};func _fde (_bb _ge .Color )(uint8 ,uint8 ,uint8 ,uint8 ){_cba ,_bfad ,_cbg ,_bbd :=_bb .RGBA ();return uint8 (_cba >>8),uint8 (_bfad >>8),uint8 (_cbg >>8),uint8 (_bbd >>8);
};func (_bag *Renderer )SetTextRotation (radians float64 ){_bag ._be =_eba (-radians )};func (_fe *Renderer )FillStroke (){_fe ._fg .Add_B ()};func (_cdd *Renderer )GetDPI ()float64 {return _cdd ._a };func (_df *Renderer )Save (w _f .Writer )error {if w ==nil {return nil ;
};_ ,_bef :=_f .Copy (w ,_c .NewBuffer (_df ._fg .Bytes ()));return _bef ;};func (_gdgd *Renderer )MeasureText (text string )_cd .Box {_dga :=_gdgd ._cde ;_feg ,_aff :=_gdgd ._ae .GetFontDescriptor ();if _aff !=nil {_e .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u0066\u006fn\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
}else {_eeec ,_bc :=_feg .GetCapHeight ();if _bc !=nil {_e .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0067\u0065\u0074\u0020f\u006f\u006e\u0074\u0020\u0063\u0061\u0070\u0020\u0068\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_bc );
}else {_dga =_eeec /1000.0*_gdgd ._cde ;};};var (_ccd =0.0;_ddb =_gdgd .wrapText (text ););for _ ,_ea :=range _ddb {if _gfe :=_gdgd .getTextWidth (_ea );_gfe > _ccd {_ccd =_gfe ;};};_deef :=_cd .NewBox (0,0,int (_ccd ),int (_dga ));if _caf :=_gdgd ._be ;
_caf !=0{_deef =_deef .Corners ().Rotate (_caf ).Box ();};return _deef ;};