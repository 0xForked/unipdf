//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package unichart ;import (_e "bytes";_ec "fmt";_ecc "github.com/unidoc/unichart/render";_g "github.com/unidoc/unipdf/v3/common";_ag "github.com/unidoc/unipdf/v3/contentstream";_a "github.com/unidoc/unipdf/v3/contentstream/draw";_fb "github.com/unidoc/unipdf/v3/core";
_ge "github.com/unidoc/unipdf/v3/model";_ce "image/color";_f "io";_cf "math";);func (_db *Renderer )ClearTextRotation (){_db ._bd =0};func (_edf *Renderer )wrapText (_cd string )[]string {var (_dcg []string ;_ffe []rune ;);for _ ,_dcb :=range _cd {if _dcb =='\n'{_dcg =append (_dcg ,string (_ffe ));
_ffe =[]rune {};continue ;};_ffe =append (_ffe ,_dcb );};if len (_ffe )> 0{_dcg =append (_dcg ,string (_ffe ));};return _dcg ;};func _dca (_eed _ce .Color )(float64 ,float64 ,float64 ,float64 ){_acf ,_bab ,_dfdeb ,_bb :=_geb (_eed );return float64 (_acf )/255,float64 (_bab )/255,float64 (_dfdeb )/255,float64 (_bb )/255;
};func (_gg *Renderer )SetClassName (name string ){};func (_fd *Renderer )SetStrokeDashArray (dashArray []float64 ){_ged :=make ([]int64 ,len (dashArray ));for _agg ,_de :=range dashArray {_ged [_agg ]=int64 (_de );};_fd ._b .Add_d (_ged ,0);};type Renderer struct{_geg int ;
_ae int ;_cg float64 ;_b *_ag .ContentCreator ;_ea *_ge .PdfPageResources ;_gd _ce .Color ;_cfg _ce .Color ;_cb float64 ;_af *_ge .PdfFont ;_gc float64 ;_ga _ce .Color ;_bd float64 ;_ac map[*_ge .PdfFont ]_fb .PdfObjectName ;};func (_dfc *Renderer )SetFontSize (size float64 ){_dfc ._gc =size };
func (_cfd *Renderer )FillStroke (){_cfd ._b .Add_B ()};func (_dg *Renderer )QuadCurveTo (cx ,cy ,x ,y int ){_dg ._b .Add_v (float64 (x ),float64 (y ),float64 (cx ),float64 (cy ));};func NewRenderer (cc *_ag .ContentCreator ,res *_ge .PdfPageResources )func (int ,int )(_ecc .Renderer ,error ){return func (_ed ,_d int )(_ecc .Renderer ,error ){_ba :=&Renderer {_geg :_ed ,_ae :_d ,_cg :72,_b :cc ,_ea :res ,_ac :map[*_ge .PdfFont ]_fb .PdfObjectName {}};
_ba .ResetStyle ();return _ba ,nil ;};};func (_ab *Renderer )Close (){_ab ._b .Add_h ()};func _geb (_dbf _ce .Color )(uint8 ,uint8 ,uint8 ,uint8 ){_ee ,_ffd ,_deef ,_geda :=_dbf .RGBA ();return uint8 (_ee >>8),uint8 (_ffd >>8),uint8 (_deef >>8),uint8 (_geda >>8);
};func _gee (_fe float64 )float64 {return _fe *180/_cf .Pi };func (_agc *Renderer )SetFont (font _ecc .Font ){_ad ,_ca :=font .(*_ge .PdfFont );if !_ca {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065");
return ;};_afe ,_ca :=_agc ._ac [_ad ];if !_ca {_afe =_gecd ("\u0046\u006f\u006e\u0074",1,_agc ._ea .HasFontByName );if _dfd :=_agc ._ea .SetFontByName (_afe ,_ad .ToPdfObject ());_dfd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0064d\u0020\u0066\u006f\u006e\u0074\u0020\u0025\u0076\u0020\u0074\u006f\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073",_ad );
};_agc ._ac [_ad ]=_afe ;};_agc ._b .Add_Tf (_afe ,_agc ._gc );_agc ._af =_ad ;};func (_edg *Renderer )GetDPI ()float64 {return _edg ._cg };func (_dee *Renderer )Stroke (){_dee ._b .Add_S ()};func (_gcf *Renderer )Fill (){_gcf ._b .Add_f ()};func (_aef *Renderer )Circle (radius float64 ,x ,y int ){_gb :=radius ;
if _eaf :=_aef ._cb ;_eaf !=0{_gb -=_eaf /2;};_fdfg :=_gb *0.551784;_agb :=_a .CubicBezierPath {Curves :[]_a .CubicBezierCurve {_a .NewCubicBezierCurve (-_gb ,0,-_gb ,_fdfg ,-_fdfg ,_gb ,0,_gb ),_a .NewCubicBezierCurve (0,_gb ,_fdfg ,_gb ,_gb ,_fdfg ,_gb ,0),_a .NewCubicBezierCurve (_gb ,0,_gb ,-_fdfg ,_fdfg ,-_gb ,0,-_gb ),_a .NewCubicBezierCurve (0,-_gb ,-_fdfg ,-_gb ,-_gb ,-_fdfg ,-_gb ,0)}};
if _cee :=_aef ._cb ;_cee !=0{_agb =_agb .Offset (_cee /2,_cee /2);};_agb =_agb .Offset (float64 (x ),float64 (y ));_a .DrawBezierPathWithCreator (_agb ,_aef ._b );};func (_afc *Renderer )ResetStyle (){_afc .SetFillColor (_ce .Black );_afc .SetStrokeColor (_ce .Transparent );
_afc .SetStrokeWidth (0);_afc .SetFont (_ge .DefaultFont ());_afc .SetFontColor (_ce .Black );_afc .SetFontSize (12);_afc .SetTextRotation (0);};func (_bdc *Renderer )LineTo (x ,y int ){_bdc ._b .Add_l (float64 (x ),float64 (y ))};func (_bae *Renderer )SetFillColor (color _ce .Color ){_bae ._gd =color ;
_ff ,_df ,_fba ,_ :=_dca (color );_bae ._b .Add_rg (_ff ,_df ,_fba );};func _gecd (_bgd string ,_fca int ,_dag func (_fb .PdfObjectName )bool )_fb .PdfObjectName {_eca :=_fb .PdfObjectName (_ec .Sprintf ("\u0025\u0073\u0025\u0064",_bgd ,_fca ));for _dcd :=_fca ;
_dag (_eca );{_dcd ++;_eca =_fb .PdfObjectName (_ec .Sprintf ("\u0025\u0073\u0025\u0064",_bgd ,_dcd ));};return _eca ;};func (_abf *Renderer )getTextWidth (_aa string )float64 {var _edfe float64 ;for _ ,_edc :=range _aa {_adce ,_ded :=_abf ._af .GetRuneMetrics (_edc );
if !_ded {_g .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074e\u0064 \u0072u\u006e\u0065\u0020\u0025\u0076\u0020\u0069\u006e\u0020\u0066\u006f\u006e\u0074",_edc );};_edfe +=_adce .Wx ;};return _abf ._gc *_edfe /1000.0;
};func (_bg *Renderer )ArcTo (cx ,cy int ,rx ,ry ,startAngle ,deltaAngle float64 ){startAngle =_gee (2.0*_cf .Pi -startAngle );deltaAngle =_gee (-deltaAngle );_ef ,_aggd :=deltaAngle ,1;if _cf .Abs (deltaAngle )> 90.0{_aggd =int (_cf .Ceil (_cf .Abs (deltaAngle )/90.0));
_ef =deltaAngle /float64 (_aggd );};var (_gec =_ggce (_ef /2);_edgf =_cf .Abs (4.0/3.0*(1.0-_cf .Cos (_gec ))/_cf .Sin (_gec ));_eb =float64 (cx );_bdd =float64 (cy ););for _ega :=0;_ega < _aggd ;_ega ++{_gccg :=_ggce (startAngle +float64 (_ega )*_ef );
_dc :=_ggce (startAngle +float64 (_ega +1)*_ef );_fdf :=_cf .Cos (_gccg );_ecg :=_cf .Cos (_dc );_gda :=_cf .Sin (_gccg );_eac :=_cf .Sin (_dc );var _bdg []float64 ;if _ef > 0{_bdg =[]float64 {_eb +rx *_fdf ,_bdd -ry *_gda ,_eb +rx *(_fdf -_edgf *_gda ),_bdd -ry *(_gda +_edgf *_fdf ),_eb +rx *(_ecg +_edgf *_eac ),_bdd -ry *(_eac -_edgf *_ecg ),_eb +rx *_ecg ,_bdd -ry *_eac };
}else {_bdg =[]float64 {_eb +rx *_fdf ,_bdd -ry *_gda ,_eb +rx *(_fdf +_edgf *_gda ),_bdd -ry *(_gda -_edgf *_fdf ),_eb +rx *(_ecg -_edgf *_eac ),_bdd -ry *(_eac +_edgf *_ecg ),_eb +rx *_ecg ,_bdd -ry *_eac };};if _ega ==0{_bg ._b .Add_l (_bdg [0],_bdg [1]);
};_bg ._b .Add_c (_bdg [2],_bdg [3],_bdg [4],_bdg [5],_bdg [6],_bdg [7]);};};func (_fff *Renderer )MeasureText (text string )_ecc .Box {_efd :=_fff ._gc ;_gdb ,_be :=_fff ._af .GetFontDescriptor ();if _be !=nil {_g .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u0066\u006fn\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
}else {_dae ,_bgg :=_gdb .GetCapHeight ();if _bgg !=nil {_g .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0067\u0065\u0074\u0020f\u006f\u006e\u0074\u0020\u0063\u0061\u0070\u0020\u0068\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_bgg );
}else {_efd =_dae /1000.0*_fff ._gc ;};};var (_ecdg =0.0;_gef =_fff .wrapText (text ););for _ ,_def :=range _gef {if _eaca :=_fff .getTextWidth (_def );_eaca > _ecdg {_ecdg =_eaca ;};};_ggc :=_ecc .NewBox (0,0,int (_ecdg ),int (_efd ));if _dfde :=_fff ._bd ;
_dfde !=0{_ggc =_ggc .Corners ().Rotate (_dfde ).Box ();};return _ggc ;};func (_acac *Renderer )Save (w _f .Writer )error {if w ==nil {return nil ;};_ ,_cba :=_f .Copy (w ,_e .NewBuffer (_acac ._b .Bytes ()));return _cba ;};func (_fg *Renderer )SetFontColor (color _ce .Color ){_fg ._ga =color };
func (_fbd *Renderer )SetStrokeWidth (width float64 ){_fbd ._cb =width ;_fbd ._b .Add_w (width )};func _ggce (_dcf float64 )float64 {return _dcf *_cf .Pi /180.0};func (_gdg *Renderer )SetStrokeColor (color _ce .Color ){_gdg ._cfg =color ;_fa ,_gcc ,_gaa ,_ :=_dca (color );
_gdg ._b .Add_RG (_fa ,_gcc ,_gaa );};func (_fdd *Renderer )SetTextRotation (radians float64 ){_fdd ._bd =_gee (-radians )};func (_bdgg *Renderer )Text (text string ,x ,y int ){_bdgg ._b .Add_q ();_bdgg .SetFont (_bdgg ._af );_ecd ,_aca ,_eae ,_ :=_dca (_bdgg ._ga );
_bdgg ._b .Add_rg (_ecd ,_aca ,_eae );_bdgg ._b .Translate (float64 (x ),float64 (y )).Scale (1,-1);if _eaa :=_bdgg ._bd ;_eaa !=0{_bdgg ._b .RotateDeg (_eaa );};_bdgg ._b .Add_BT ().Add_TL (_bdgg ._gc );var (_dd =_bdgg ._af .Encoder ();_bc =_bdgg .wrapText (text );
_bag =len (_bc ););for _gf ,_da :=range _bc {_bdgg ._b .Add_TJ (_fb .MakeStringFromBytes (_dd .Encode (_da )));if _gf !=_bag -1{_bdgg ._b .Add_Tstar ();};};_bdgg ._b .Add_ET ();_bdgg ._b .Add_Q ();};func (_ece *Renderer )SetDPI (dpi float64 ){_ece ._cg =dpi };
func (_gdd *Renderer )MoveTo (x ,y int ){_gdd ._b .Add_m (float64 (x ),float64 (y ))};