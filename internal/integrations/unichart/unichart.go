//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package unichart ;import (_f "bytes";_b "fmt";_fge "github.com/unidoc/unichart/render";_g "github.com/unidoc/unipdf/v3/common";_dc "github.com/unidoc/unipdf/v3/contentstream";_d "github.com/unidoc/unipdf/v3/contentstream/draw";_fc "github.com/unidoc/unipdf/v3/core";
_fgg "github.com/unidoc/unipdf/v3/model";_bf "image/color";_fg "io";_c "math";);type Renderer struct{_e int ;_fd int ;_ef float64 ;_be *_dc .ContentCreator ;_ca *_fgg .PdfPageResources ;_fcb _bf .Color ;_aa _bf .Color ;_ac float64 ;_ad *_fgg .PdfFont ;
_gc float64 ;_bfb _bf .Color ;_eb float64 ;_fa map[*_fgg .PdfFont ]_fc .PdfObjectName ;};func (_cae *Renderer )SetStrokeWidth (width float64 ){_cae ._ac =width ;_cae ._be .Add_w (width )};func (_cg *Renderer )ClearTextRotation (){_cg ._eb =0};func _feg (_dea _bf .Color )(uint8 ,uint8 ,uint8 ,uint8 ){_dcg ,_cd ,_gge ,_ggb :=_dea .RGBA ();
return uint8 (_dcg >>8),uint8 (_cd >>8),uint8 (_gge >>8),uint8 (_ggb >>8);};func (_bfe *Renderer )Text (text string ,x ,y int ){_bfe ._be .Add_q ();_bfe .SetFont (_bfe ._ad );_gea ,_abb ,_caeg ,_ :=_caf (_bfe ._bfb );_bfe ._be .Add_rg (_gea ,_abb ,_caeg );
_bfe ._be .Translate (float64 (x ),float64 (y )).Scale (1,-1);if _gdc :=_bfe ._eb ;_gdc !=0{_bfe ._be .RotateDeg (_gdc );};_bfe ._be .Add_BT ().Add_TL (_bfe ._gc );var (_bcf =_bfe ._ad .Encoder ();_ccg =_bfe .wrapText (text );_gff =len (_ccg ););for _bb ,_fcf :=range _ccg {_bfe ._be .Add_TJ (_fc .MakeStringFromBytes (_bcf .Encode (_fcf )));
if _bb !=_gff -1{_bfe ._be .Add_Tstar ();};};_bfe ._be .Add_ET ();_bfe ._be .Add_Q ();};func _bba (_ffc string ,_ggf int ,_dba func (_fc .PdfObjectName )bool )_fc .PdfObjectName {_aec :=_fc .PdfObjectName (_b .Sprintf ("\u0025\u0073\u0025\u0064",_ffc ,_ggf ));
for _aafa :=_ggf ;_dba (_aec );{_aafa ++;_aec =_fc .PdfObjectName (_b .Sprintf ("\u0025\u0073\u0025\u0064",_ffc ,_aafa ));};return _aec ;};func _gfa (_cea float64 )float64 {return _cea *_c .Pi /180.0};func (_bfc *Renderer )SetFont (font _fge .Font ){_cb ,_aeb :=font .(*_fgg .PdfFont );
if !_aeb {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065");return ;};_bgc ,_aeb :=_bfc ._fa [_cb ];if !_aeb {_bgc =_bba ("\u0046\u006f\u006e\u0074",1,_bfc ._ca .HasFontByName );
if _fgd :=_bfc ._ca .SetFontByName (_bgc ,_cb .ToPdfObject ());_fgd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0064d\u0020\u0066\u006f\u006e\u0074\u0020\u0025\u0076\u0020\u0074\u006f\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073",_cb );
};_bfc ._fa [_cb ]=_bgc ;};_bfc ._be .Add_Tf (_bgc ,_bfc ._gc );_bfc ._ad =_cb ;};func (_efe *Renderer )SetFontSize (size float64 ){_efe ._gc =size };func (_aae *Renderer )MoveTo (x ,y int ){_aae ._be .Add_m (float64 (x ),float64 (y ))};func (_acd *Renderer )SetStrokeColor (color _bf .Color ){_acd ._aa =color ;
_ab ,_ed ,_gd ,_ :=_caf (color );_acd ._be .Add_RG (_ab ,_ed ,_gd );};func (_gga *Renderer )MeasureText (text string )_fge .Box {_bece :=_gga ._gc ;_ce ,_bfd :=_gga ._ad .GetFontDescriptor ();if _bfd !=nil {_g .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u0066\u006fn\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
}else {_dg ,_abbb :=_ce .GetCapHeight ();if _abbb !=nil {_g .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0067\u0065\u0074\u0020f\u006f\u006e\u0074\u0020\u0063\u0061\u0070\u0020\u0068\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_abbb );
}else {_bece =_dg /1000.0*_gga ._gc ;};};var (_fdc =0.0;_gcdg =_gga .wrapText (text ););for _ ,_aaf :=range _gcdg {if _gaf :=_gga .getTextWidth (_aaf );_gaf > _fdc {_fdc =_gaf ;};};_bgdd :=_fge .NewBox (0,0,int (_fdc ),int (_bece ));if _efed :=_gga ._eb ;
_efed !=0{_bgdd =_bgdd .Corners ().Rotate (_efed ).Box ();};return _bgdd ;};func _aac (_bce float64 )float64 {return _bce *180/_c .Pi };func (_ae *Renderer )ArcTo (cx ,cy int ,rx ,ry ,startAngle ,deltaAngle float64 ){startAngle =_aac (2.0*_c .Pi -startAngle );
deltaAngle =_aac (-deltaAngle );_fgf ,_faf :=deltaAngle ,1;if _c .Abs (deltaAngle )> 90.0{_faf =int (_c .Ceil (_c .Abs (deltaAngle )/90.0));_fgf =deltaAngle /float64 (_faf );};var (_bgb =_gfa (_fgf /2);_gb =_c .Abs (4.0/3.0*(1.0-_c .Cos (_bgb ))/_c .Sin (_bgb ));
_db =float64 (cx );_ge =float64 (cy ););for _gcd :=0;_gcd < _faf ;_gcd ++{_ba :=_gfa (startAngle +float64 (_gcd )*_fgf );_ec :=_gfa (startAngle +float64 (_gcd +1)*_fgf );_de :=_c .Cos (_ba );_dbe :=_c .Cos (_ec );_cca :=_c .Sin (_ba );_ga :=_c .Sin (_ec );
var _bee []float64 ;if _fgf > 0{_bee =[]float64 {_db +rx *_de ,_ge -ry *_cca ,_db +rx *(_de -_gb *_cca ),_ge -ry *(_cca +_gb *_de ),_db +rx *(_dbe +_gb *_ga ),_ge -ry *(_ga -_gb *_dbe ),_db +rx *_dbe ,_ge -ry *_ga };}else {_bee =[]float64 {_db +rx *_de ,_ge -ry *_cca ,_db +rx *(_de +_gb *_cca ),_ge -ry *(_cca -_gb *_de ),_db +rx *(_dbe -_gb *_ga ),_ge -ry *(_ga +_gb *_dbe ),_db +rx *_dbe ,_ge -ry *_ga };
};if _gcd ==0{_ae ._be .Add_l (_bee [0],_bee [1]);};_ae ._be .Add_c (_bee [2],_bee [3],_bee [4],_bee [5],_bee [6],_bee [7]);};};func (_bad *Renderer )FillStroke (){_bad ._be .Add_B ()};func (_bg *Renderer )SetDPI (dpi float64 ){_bg ._ef =dpi };func (_ded *Renderer )Circle (radius float64 ,x ,y int ){_adg :=radius ;
if _df :=_ded ._ac ;_df !=0{_adg -=_df /2;};_fdf :=_adg *0.551784;_adc :=_d .CubicBezierPath {Curves :[]_d .CubicBezierCurve {_d .NewCubicBezierCurve (-_adg ,0,-_adg ,_fdf ,-_fdf ,_adg ,0,_adg ),_d .NewCubicBezierCurve (0,_adg ,_fdf ,_adg ,_adg ,_fdf ,_adg ,0),_d .NewCubicBezierCurve (_adg ,0,_adg ,-_fdf ,_fdf ,-_adg ,0,-_adg ),_d .NewCubicBezierCurve (0,-_adg ,-_fdf ,-_adg ,-_adg ,-_fdf ,-_adg ,0)}};
if _dbf :=_ded ._ac ;_dbf !=0{_adc =_adc .Offset (_dbf /2,_dbf /2);};_adc =_adc .Offset (float64 (x ),float64 (y ));_d .DrawBezierPathWithCreator (_adc ,_ded ._be );};func (_badd *Renderer )SetFontColor (color _bf .Color ){_badd ._bfb =color };func (_bec *Renderer )Fill (){_bec ._be .Add_f ()};
func (_eg *Renderer )Stroke (){_eg ._be .Add_S ()};func (_da *Renderer )getTextWidth (_ddc string )float64 {var _deb float64 ;for _ ,_acfc :=range _ddc {_gdb ,_aef :=_da ._ad .GetRuneMetrics (_acfc );if !_aef {_g .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074e\u0064 \u0072u\u006e\u0065\u0020\u0025\u0076\u0020\u0069\u006e\u0020\u0066\u006f\u006e\u0074",_acfc );
};_deb +=_gdb .Wx ;};return _da ._gc *_deb /1000.0;};func (_eda *Renderer )LineTo (x ,y int ){_eda ._be .Add_l (float64 (x ),float64 (y ))};func (_acf *Renderer )ResetStyle (){_acf .SetFillColor (_bf .Black );_acf .SetStrokeColor (_bf .Transparent );_acf .SetStrokeWidth (0);
_acf .SetFont (_fgg .DefaultFont ());_acf .SetFontColor (_bf .Black );_acf .SetFontSize (12);_acf .SetTextRotation (0);};func (_aca *Renderer )SetClassName (name string ){};func (_gbg *Renderer )Close (){_gbg ._be .Add_h ()};func (_cf *Renderer )SetFillColor (color _bf .Color ){_cf ._fcb =color ;
_ag ,_gf ,_gg ,_ :=_caf (color );_cf ._be .Add_rg (_ag ,_gf ,_gg );};func (_aaa *Renderer )SetStrokeDashArray (dashArray []float64 ){_bgd :=make ([]int64 ,len (dashArray ));for _ggc ,_beg :=range dashArray {_bgd [_ggc ]=int64 (_beg );};_aaa ._be .Add_d (_bgd ,0);
};func (_cc *Renderer )QuadCurveTo (cx ,cy ,x ,y int ){_cc ._be .Add_v (float64 (x ),float64 (y ),float64 (cx ),float64 (cy ));};func (_egb *Renderer )wrapText (_adgb string )[]string {var (_gfb []string ;_edaa []rune ;);for _ ,_gec :=range _adgb {if _gec =='\n'{_gfb =append (_gfb ,string (_edaa ));
_edaa =[]rune {};continue ;};_edaa =append (_edaa ,_gec );};if len (_edaa )> 0{_gfb =append (_gfb ,string (_edaa ));};return _gfb ;};func (_fe *Renderer )GetDPI ()float64 {return _fe ._ef };func _caf (_fga _bf .Color )(float64 ,float64 ,float64 ,float64 ){_agb ,_fea ,_dgb ,_ceg :=_feg (_fga );
return float64 (_agb )/255,float64 (_fea )/255,float64 (_dgb )/255,float64 (_ceg )/255;};func (_cfg *Renderer )SetTextRotation (radians float64 ){_cfg ._eb =_aac (-radians )};func NewRenderer (cc *_dc .ContentCreator ,res *_fgg .PdfPageResources )func (int ,int )(_fge .Renderer ,error ){return func (_efa ,_bc int )(_fge .Renderer ,error ){_dd :=&Renderer {_e :_efa ,_fd :_bc ,_ef :72,_be :cc ,_ca :res ,_fa :map[*_fgg .PdfFont ]_fc .PdfObjectName {}};
_dd .ResetStyle ();return _dd ,nil ;};};func (_dedc *Renderer )Save (w _fg .Writer )error {if w ==nil {return nil ;};_ ,_ff :=_fg .Copy (w ,_f .NewBuffer (_dedc ._be .Bytes ()));return _ff ;};