//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package unichart ;import (_b "bytes";_ga "fmt";_ce "github.com/unidoc/unichart/render";_cd "github.com/unidoc/unipdf/v3/common";_eb "github.com/unidoc/unipdf/v3/contentstream";_gd "github.com/unidoc/unipdf/v3/contentstream/draw";_a "github.com/unidoc/unipdf/v3/core";
_ee "github.com/unidoc/unipdf/v3/model";_c "image/color";_e "io";_bf "math";);func (_bfd *Renderer )SetFontSize (size float64 ){_bfd ._fb =size };func (_bg *Renderer )Close (){_bg ._d .Add_h ()};func (_cc *Renderer )Text (text string ,x ,y int ){_cc ._d .Add_q ();
_cc .SetFont (_cc ._ebg );_bcc ,_afb ,_fda ,_ :=_gda (_cc ._gg );_cc ._d .Add_rg (_bcc ,_afb ,_fda );_cc ._d .Translate (float64 (x ),float64 (y )).Scale (1,-1);if _fg :=_cc ._aba ;_fg !=0{_cc ._d .RotateDeg (_fg );};_cc ._d .Add_BT ().Add_TL (_cc ._fb );
var (_ea =_cc ._ebg .Encoder ();_cab =_cc .wrapText (text );_ead =len (_cab ););for _daf ,_bde :=range _cab {_cc ._d .Add_TJ (_a .MakeStringFromBytes (_ea .Encode (_bde )));if _daf !=_ead -1{_cc ._d .Add_Tstar ();};};_cc ._d .Add_ET ();_cc ._d .Add_Q ();
};type Renderer struct{_af int ;_ab int ;_ac float64 ;_d *_eb .ContentCreator ;_gb *_ee .PdfPageResources ;_df _c .Color ;_ed _c .Color ;_f float64 ;_ebg *_ee .PdfFont ;_fb float64 ;_gg _c .Color ;_aba float64 ;_cf map[*_ee .PdfFont ]_a .PdfObjectName ;
};func (_faa *Renderer )SetFont (font _ce .Font ){_ff ,_db :=font .(*_ee .PdfFont );if !_db {_cd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065");return ;
};_cgg ,_db :=_faa ._cf [_ff ];if !_db {_cgg =_bdf ("\u0046\u006f\u006e\u0074",1,_faa ._gb .HasFontByName );if _dg :=_faa ._gb .SetFontByName (_cgg ,_ff .ToPdfObject ());_dg !=nil {_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0064d\u0020\u0066\u006f\u006e\u0074\u0020\u0025\u0076\u0020\u0074\u006f\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073",_ff );
};_faa ._cf [_ff ]=_cgg ;};_faa ._d .Add_Tf (_cgg ,_faa ._fb );_faa ._ebg =_ff ;};func (_cb *Renderer )SetStrokeDashArray (dashArray []float64 ){_bfbg :=make ([]int64 ,len (dashArray ));for _cg ,_ca :=range dashArray {_bfbg [_cg ]=int64 (_ca );};_cb ._d .Add_d (_bfbg ,0);
};func (_ace *Renderer )SetClassName (name string ){};func NewRenderer (cc *_eb .ContentCreator ,res *_ee .PdfPageResources )func (int ,int )(_ce .Renderer ,error ){return func (_gdb ,_bfb int )(_ce .Renderer ,error ){_gdf :=&Renderer {_af :_gdb ,_ab :_bfb ,_ac :72,_d :cc ,_gb :res ,_cf :map[*_ee .PdfFont ]_a .PdfObjectName {}};
_gdf .ResetStyle ();return _gdf ,nil ;};};func (_de *Renderer )LineTo (x ,y int ){_de ._d .Add_l (float64 (x ),float64 (y ))};func _egd (_egdd _c .Color )(uint8 ,uint8 ,uint8 ,uint8 ){_dcg ,_aga ,_bbe ,_agc :=_egdd .RGBA ();return uint8 (_dcg >>8),uint8 (_aga >>8),uint8 (_bbe >>8),uint8 (_agc >>8);
};func (_acb *Renderer )SetTextRotation (radians float64 ){_acb ._aba =_bda (-radians )};func (_dec *Renderer )QuadCurveTo (cx ,cy ,x ,y int ){_dec ._d .Add_v (float64 (x ),float64 (y ),float64 (cx ),float64 (cy ));};func (_gdd *Renderer )Stroke (){_gdd ._d .Add_S ()};
func (_cbb *Renderer )Save (w _e .Writer )error {if w ==nil {return nil ;};_ ,_bab :=_e .Copy (w ,_b .NewBuffer (_cbb ._d .Bytes ()));return _bab ;};func (_fa *Renderer )SetStrokeWidth (width float64 ){_fa ._f =width ;_fa ._d .Add_w (width )};func (_bc *Renderer )SetDPI (dpi float64 ){_bc ._ac =dpi };
func (_ceg *Renderer )ResetStyle (){_ceg .SetFillColor (_c .Black );_ceg .SetStrokeColor (_c .Transparent );_ceg .SetStrokeWidth (0);_ceg .SetFont (_ee .DefaultFont ());_ceg .SetFontColor (_c .Black );_ceg .SetFontSize (12);_ceg .SetTextRotation (0);};
func (_gdde *Renderer )MeasureText (text string )_ce .Box {_fbc :=_gdde ._fb ;_dd ,_ef :=_gdde ._ebg .GetFontDescriptor ();if _ef !=nil {_cd .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u0066\u006fn\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
}else {_gea ,_gge :=_dd .GetCapHeight ();if _gge !=nil {_cd .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0067\u0065\u0074\u0020f\u006f\u006e\u0074\u0020\u0063\u0061\u0070\u0020\u0068\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_gge );
}else {_fbc =_gea /1000.0*_gdde ._fb ;};};var (_fdd =0.0;_ede =_gdde .wrapText (text ););for _ ,_efb :=range _ede {if _cfa :=_gdde .getTextWidth (_efb );_cfa > _fdd {_fdd =_cfa ;};};_bb :=_ce .NewBox (0,0,int (_fdd ),int (_fbc ));if _bag :=_gdde ._aba ;
_bag !=0{_bb =_bb .Corners ().Rotate (_bag ).Box ();};return _bb ;};func (_da *Renderer )GetDPI ()float64 {return _da ._ac };func (_eea *Renderer )SetFontColor (color _c .Color ){_eea ._gg =color };func (_ffd *Renderer )getTextWidth (_gc string )float64 {var _dfe float64 ;
for _ ,_bdec :=range _gc {_ecg ,_ad :=_ffd ._ebg .GetRuneMetrics (_bdec );if !_ad {_cd .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074e\u0064 \u0072u\u006e\u0065\u0020\u0025\u0076\u0020\u0069\u006e\u0020\u0066\u006f\u006e\u0074",_bdec );
};_dfe +=_ecg .Wx ;};return _ffd ._fb *_dfe /1000.0;};func (_bfba *Renderer )FillStroke (){_bfba ._d .Add_B ()};func (_bd *Renderer )MoveTo (x ,y int ){_bd ._d .Add_m (float64 (x ),float64 (y ))};func (_gf *Renderer )ArcTo (cx ,cy int ,rx ,ry ,startAngle ,deltaAngle float64 ){startAngle =_bda (2.0*_bf .Pi -startAngle );
deltaAngle =_bda (-deltaAngle );_fdf ,_cdc :=deltaAngle ,1;if _bf .Abs (deltaAngle )> 90.0{_cdc =int (_bf .Ceil (_bf .Abs (deltaAngle )/90.0));_fdf =deltaAngle /float64 (_cdc );};var (_bce =_eae (_fdf /2);_fdc =_bf .Abs (4.0/3.0*(1.0-_bf .Cos (_bce ))/_bf .Sin (_bce ));
_deb =float64 (cx );_ec =float64 (cy ););for _dac :=0;_dac < _cdc ;_dac ++{_acea :=_eae (startAngle +float64 (_dac )*_fdf );_geg :=_eae (startAngle +float64 (_dac +1)*_fdf );_dfg :=_bf .Cos (_acea );_gag :=_bf .Cos (_geg );_acec :=_bf .Sin (_acea );_cbc :=_bf .Sin (_geg );
var _ag []float64 ;if _fdf > 0{_ag =[]float64 {_deb +rx *_dfg ,_ec -ry *_acec ,_deb +rx *(_dfg -_fdc *_acec ),_ec -ry *(_acec +_fdc *_dfg ),_deb +rx *(_gag +_fdc *_cbc ),_ec -ry *(_cbc -_fdc *_gag ),_deb +rx *_gag ,_ec -ry *_cbc };}else {_ag =[]float64 {_deb +rx *_dfg ,_ec -ry *_acec ,_deb +rx *(_dfg +_fdc *_acec ),_ec -ry *(_acec -_fdc *_dfg ),_deb +rx *(_gag -_fdc *_cbc ),_ec -ry *(_cbc +_fdc *_gag ),_deb +rx *_gag ,_ec -ry *_cbc };
};if _dac ==0{_gf ._d .Add_l (_ag [0],_ag [1]);};_gf ._d .Add_c (_ag [2],_ag [3],_ag [4],_ag [5],_ag [6],_ag [7]);};};func (_abab *Renderer )ClearTextRotation (){_abab ._aba =0};func _bdf (_bbc string ,_ggf int ,_acf func (_a .PdfObjectName )bool )_a .PdfObjectName {_def :=_a .PdfObjectName (_ga .Sprintf ("\u0025\u0073\u0025\u0064",_bbc ,_ggf ));
for _gbec :=_ggf ;_acf (_def );{_gbec ++;_def =_a .PdfObjectName (_ga .Sprintf ("\u0025\u0073\u0025\u0064",_bbc ,_gbec ));};return _def ;};func (_gbe *Renderer )Fill (){_gbe ._d .Add_f ()};func _gda (_agd _c .Color )(float64 ,float64 ,float64 ,float64 ){_gab ,_faag ,_acd ,_ggd :=_egd (_agd );
return float64 (_gab )/255,float64 (_faag )/255,float64 (_acd )/255,float64 (_ggd )/255;};func (_gbf *Renderer )wrapText (_ccb string )[]string {var (_gdda []string ;_eg []rune ;);for _ ,_dce :=range _ccb {if _dce =='\n'{_gdda =append (_gdda ,string (_eg ));
_eg =[]rune {};continue ;};_eg =append (_eg ,_dce );};if len (_eg )> 0{_gdda =append (_gdda ,string (_eg ));};return _gdda ;};func _bda (_faf float64 )float64 {return _faf *180/_bf .Pi };func _eae (_cfae float64 )float64 {return _cfae *_bf .Pi /180.0};
func (_fdff *Renderer )Circle (radius float64 ,x ,y int ){_cbf :=radius ;if _fc :=_fdff ._f ;_fc !=0{_cbf -=_fc /2;};_aaf :=_cbf *0.551784;_bac :=_gd .CubicBezierPath {Curves :[]_gd .CubicBezierCurve {_gd .NewCubicBezierCurve (-_cbf ,0,-_cbf ,_aaf ,-_aaf ,_cbf ,0,_cbf ),_gd .NewCubicBezierCurve (0,_cbf ,_aaf ,_cbf ,_cbf ,_aaf ,_cbf ,0),_gd .NewCubicBezierCurve (_cbf ,0,_cbf ,-_aaf ,_aaf ,-_cbf ,0,-_cbf ),_gd .NewCubicBezierCurve (0,-_cbf ,-_aaf ,-_cbf ,-_cbf ,-_aaf ,-_cbf ,0)}};
if _cbg :=_fdff ._f ;_cbg !=0{_bac =_bac .Offset (_cbg /2,_cbg /2);};_bac =_bac .Offset (float64 (x ),float64 (y ));_gd .DrawBezierPathWithCreator (_bac ,_fdff ._d );};func (_ba *Renderer )SetStrokeColor (color _c .Color ){_ba ._ed =color ;_fbg ,_ge ,_baf ,_ :=_gda (color );
_ba ._d .Add_RG (_fbg ,_ge ,_baf );};func (_dc *Renderer )SetFillColor (color _c .Color ){_dc ._df =color ;_dcd ,_aa ,_bfg ,_ :=_gda (color );_dc ._d .Add_rg (_dcd ,_aa ,_bfg );};