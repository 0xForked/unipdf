//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_fd "encoding/binary";_c "errors";_d "fmt";_b "github.com/unidoc/unipdf/v3/common";_cf "github.com/unidoc/unipdf/v3/internal/bitwise";_fg "image";_gc "image/color";_f "image/draw";_gd "math";);func (_dfec *Gray2 )ColorAt (x ,y int )(_gc .Color ,error ){return ColorAtGray2BPC (x ,y ,_dfec .BytesPerLine ,_dfec .Data ,_dfec .Decode );
};func (_aadf *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _ffcc (_aadf ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_dfdb *ImageBase )setEightPartlyBytes (_baeb ,_gebbf int ,_fba uint64 )(_beeb error ){var (_cggd byte ;
_aafb int ;);for _eacc :=1;_eacc <=_gebbf ;_eacc ++{_aafb =64-_eacc *8;_cggd =byte (_fba >>uint (_aafb )&0xff);if _beeb =_dfdb .setByte (_baeb +_eacc -1,_cggd );_beeb !=nil {return _beeb ;};};_cfgg :=_dfdb .BytesPerLine *8-_dfdb .Width ;if _cfgg ==0{return nil ;
};_aafb -=8;_cggd =byte (_fba >>uint (_aafb )&0xff)<<uint (_cfgg );if _beeb =_dfdb .setByte (_baeb +_gebbf ,_cggd );_beeb !=nil {return _beeb ;};return nil ;};type monochromeThresholdConverter struct{Threshold uint8 ;};func (_adce *ImageBase )HasAlpha ()bool {if _adce .Alpha ==nil {return false ;
};for _gadb :=range _adce .Alpha {if _adce .Alpha [_gadb ]!=0xff{return true ;};};return false ;};type Gray8 struct{ImageBase };type NRGBA interface{NRGBAAt (_cace ,_cdfg int )_gc .NRGBA ;SetNRGBA (_ddeb ,_deege int ,_baaa _gc .NRGBA );};var _ Gray =&Gray4 {};
func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_bbc :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );var _cdef Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_cdef =&Monochrome {ImageBase :_bbc ,ModelThreshold :0x0f};
case 2:_cdef =&Gray2 {ImageBase :_bbc };case 4:_cdef =&Gray4 {ImageBase :_bbc };case 8:_cdef =&Gray8 {ImageBase :_bbc };case 16:_cdef =&Gray16 {ImageBase :_bbc };};case 3:switch bitsPerComponent {case 4:_cdef =&NRGBA16 {ImageBase :_bbc };case 8:_cdef =&NRGBA32 {ImageBase :_bbc };
case 16:_cdef =&NRGBA64 {ImageBase :_bbc };};case 4:_cdef =&CMYK32 {ImageBase :_bbc };};if _cdef ==nil {return nil ,ErrInvalidImage ;};return _cdef ,nil ;};func ImgToGray (i _fg .Image )*_fg .Gray {if _cdgdd ,_gbaf :=i .(*_fg .Gray );_gbaf {return _cdgdd ;
};_ggdga :=i .Bounds ();_aaaa :=_fg .NewGray (_ggdga );for _fab :=0;_fab < _ggdga .Max .X ;_fab ++{for _aebg :=0;_aebg < _ggdga .Max .Y ;_aebg ++{_fbaf :=i .At (_fab ,_aebg );_aaaa .Set (_fab ,_aebg ,_fbaf );};};return _aaaa ;};var _ _fg .Image =&Gray4 {};
func (_cggf *Monochrome )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_cggf .Width ,Y :_cggf .Height }};};type Histogramer interface{Histogram ()[256]int ;};var _ Image =&NRGBA32 {};func _edae (_gfc _gc .Gray ,_beec monochromeModel )_gc .Gray {if _gfc .Y > uint8 (_beec ){return _gc .Gray {Y :_gd .MaxUint8 };
};return _gc .Gray {};};func (_bcec *Monochrome )setBit (_bad ,_dfgb int ){_bcec .Data [_bad +(_dfgb >>3)]|=0x80>>uint (_dfgb &7);};func (_gbeed *NRGBA16 )SetNRGBA (x ,y int ,c _gc .NRGBA ){_bbda :=y *_gbeed .BytesPerLine +x *3/2;if _bbda +1>=len (_gbeed .Data ){return ;
};c =_abcf (c );_gbeed .setNRGBA (x ,y ,_bbda ,c );};func (_abb colorConverter )Convert (src _fg .Image )(Image ,error ){return _abb ._bcgg (src )};var _ NRGBA =&NRGBA16 {};func (_cfg *Gray4 )Histogram ()(_fdgb [256]int ){for _aade :=0;_aade < _cfg .Width ;
_aade ++{for _acad :=0;_acad < _cfg .Height ;_acad ++{_fdgb [_cfg .GrayAt (_aade ,_acad ).Y ]++;};};return _fdgb ;};func _dcb (_fcaa _gc .NRGBA )_gc .Gray {_bff ,_cbbc ,_fda ,_ :=_fcaa .RGBA ();_aae :=(19595*_bff +38470*_cbbc +7471*_fda +1<<15)>>24;return _gc .Gray {Y :uint8 (_aae )};
};var _ Image =&CMYK32 {};func (_age *Gray4 )At (x ,y int )_gc .Color {_cagf ,_ :=_age .ColorAt (x ,y );return _cagf };func _aba (_dfa ,_abc int ,_bgf []byte )*Monochrome {_fef :=_dgg (_dfa ,_abc );_fef .Data =_bgf ;return _fef ;};func (_cgfdb *NRGBA16 )Base ()*ImageBase {return &_cgfdb .ImageBase };
var ErrInvalidImage =_c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func (_gfda *Gray16 )Validate ()error {if len (_gfda .Data )!=_gfda .Height *_gfda .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _abcb (_abef _fg .Image ,_gfe Image ,_ecga _fg .Rectangle ){for _fge :=0;_fge < _ecga .Max .X ;_fge ++{for _fdg :=0;
_fdg < _ecga .Max .Y ;_fdg ++{_bdef :=_abef .At (_fge ,_fdg );_gfe .Set (_fge ,_fdg ,_bdef );};};};var _ Image =&NRGBA16 {};func (_eacfc *NRGBA64 )Set (x ,y int ,c _gc .Color ){_bcc :=(y *_eacfc .Width +x )*2;_baff :=_bcc *3;if _baff +5>=len (_eacfc .Data ){return ;
};_cgbe :=_gc .NRGBA64Model .Convert (c ).(_gc .NRGBA64 );_eacfc .setNRGBA64 (_baff ,_cgbe ,_bcc );};func _bcaf (_dfbbd []byte ,_cfaf Image )error {_aegfb :=true ;for _cdac :=0;_cdac < len (_dfbbd );_cdac ++{if _dfbbd [_cdac ]!=0xff{_aegfb =false ;break ;
};};if _aegfb {switch _cbgb :=_cfaf .(type ){case *NRGBA32 :_cbgb .Alpha =nil ;case *NRGBA64 :_cbgb .Alpha =nil ;default:return _d .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_cfaf );
};};return nil ;};func (_agfc *ImageBase )newAlpha (){_cded :=BytesPerLine (_agfc .Width ,_agfc .BitsPerComponent ,1);_agfc .Alpha =make ([]byte ,_agfc .Height *_cded );};func (_dgd *CMYK32 )ColorModel ()_gc .Model {return _gc .CMYKModel };func (_afaf *Gray4 )SetGray (x ,y int ,g _gc .Gray ){if x >=_afaf .Width ||y >=_afaf .Height {return ;
};g =_deef (g );_afaf .setGray (x ,y ,g );};func (_bgfd *ImageBase )setEightBytes (_gebf int ,_bbdc uint64 )error {_bgeff :=_bgfd .BytesPerLine -(_gebf %_bgfd .BytesPerLine );if _bgfd .BytesPerLine !=_bgfd .Width >>3{_bgeff --;};if _bgeff >=8{return _bgfd .setEightFullBytes (_gebf ,_bbdc );
};return _bgfd .setEightPartlyBytes (_gebf ,_bgeff ,_bbdc );};func _eg (_cb *Monochrome ,_a int ,_cbg []uint )(*Monochrome ,error ){_bd :=_a *_cb .Width ;_cgd :=_a *_cb .Height ;_ac :=_dgg (_bd ,_cgd );for _fc ,_gf :=range _cbg {var _gcd error ;switch _gf {case 2:_gcd =_gcf (_ac ,_cb );
case 4:_gcd =_gca (_ac ,_cb );case 8:_gcd =_ega (_ac ,_cb );};if _gcd !=nil {return nil ,_gcd ;};if _fc !=len (_cbg )-1{_cb =_ac .copy ();};};return _ac ,nil ;};func (_bbg *Gray8 )Histogram ()(_acfa [256]int ){for _bea :=0;_bea < len (_bbg .Data );_bea ++{_acfa [_bbg .Data [_bea ]]++;
};return _acfa ;};type RGBA interface{RGBAAt (_dfccd ,_ecdd int )_gc .RGBA ;SetRGBA (_abfcg ,_ceecc int ,_bgdbg _gc .RGBA );};func (_edaee *NRGBA32 )NRGBAAt (x ,y int )_gc .NRGBA {_baeg ,_ :=ColorAtNRGBA32 (x ,y ,_edaee .Width ,_edaee .Data ,_edaee .Alpha ,_edaee .Decode );
return _baeg ;};var _ _fg .Image =&NRGBA64 {};func _bbb (_fcdb _fg .Image )(Image ,error ){if _agcd ,_fgc :=_fcdb .(*NRGBA16 );_fgc {return _agcd .Copy (),nil ;};_cede :=_fcdb .Bounds ();_ffca ,_fbac :=NewImage (_cede .Max .X ,_cede .Max .Y ,4,3,nil ,nil ,nil );
if _fbac !=nil {return nil ,_fbac ;};_cfdea (_fcdb ,_ffca ,_cede );return _ffca ,nil ;};func (_cbce *ImageBase )setTwoBytes (_gdgc int ,_cdfbb uint16 )error {if _gdgc +1> len (_cbce .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cbce .Data [_gdgc ]=byte ((_cdfbb &0xff00)>>8);_cbce .Data [_gdgc +1]=byte (_cdfbb &0xff);return nil ;};func (_adcg *NRGBA32 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_adcg .Width ,Y :_adcg .Height }};};func (_gceee *RGBA32 )ColorAt (x ,y int )(_gc .Color ,error ){return ColorAtRGBA32 (x ,y ,_gceee .Width ,_gceee .Data ,_gceee .Alpha ,_gceee .Decode );
};func (_gbgc *NRGBA64 )Validate ()error {if len (_gbgc .Data )!=3*2*_gbgc .Width *_gbgc .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_geb *Gray8 )SetGray (x ,y int ,g _gc .Gray ){_dfgd :=y *_geb .BytesPerLine +x ;if _dfgd > len (_geb .Data )-1{return ;};_geb .Data [_dfgd ]=g .Y ;};func _beef (_dbgd _gc .Gray )_gc .NRGBA {return _gc .NRGBA {R :_dbgd .Y ,G :_dbgd .Y ,B :_dbgd .Y ,A :0xff}};
func (_fae *Gray2 )Base ()*ImageBase {return &_fae .ImageBase };func (_bcbe *Monochrome )Base ()*ImageBase {return &_bcbe .ImageBase };func (_dedf *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_dedf .copy ()}};func (_dcdg *Monochrome )ColorModel ()_gc .Model {return MonochromeModel (_dcdg .ModelThreshold )};
func _ega (_bbe ,_eed *Monochrome )(_ddf error ){_fcaf :=_eed .BytesPerLine ;_fb :=_bbe .BytesPerLine ;var _cc ,_cfb ,_gfd ,_deb ,_cbga int ;for _gfd =0;_gfd < _eed .Height ;_gfd ++{_cc =_gfd *_fcaf ;_cfb =8*_gfd *_fb ;for _deb =0;_deb < _fcaf ;_deb ++{if _ddf =_bbe .setEightBytes (_cfb +_deb *8,_acg [_eed .Data [_cc +_deb ]]);
_ddf !=nil {return _ddf ;};};for _cbga =1;_cbga < 8;_cbga ++{for _deb =0;_deb < _fb ;_deb ++{if _ddf =_bbe .setByte (_cfb +_cbga *_fb +_deb ,_bbe .Data [_cfb +_deb ]);_ddf !=nil {return _ddf ;};};};};return nil ;};func _eage (_fcde _fg .Image ,_ggde Image ,_acd _fg .Rectangle ){switch _fdbg :=_fcde .(type ){case Gray :_ggae (_fdbg ,_ggde .(Gray ),_acd );
case NRGBA :_cdbg (_fdbg ,_ggde .(Gray ),_acd );case CMYK :_egad (_fdbg ,_ggde .(Gray ),_acd );case RGBA :_ggbf (_fdbg ,_ggde .(Gray ),_acd );default:_abcb (_fcde ,_ggde .(Image ),_acd );};};func (_fgeb *ImageBase )setFourBytes (_eac int ,_aegbd uint32 )error {if _eac +3> len (_fgeb .Data )-1{return _d .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_eac );
};_fgeb .Data [_eac ]=byte ((_aegbd &0xff000000)>>24);_fgeb .Data [_eac +1]=byte ((_aegbd &0xff0000)>>16);_fgeb .Data [_eac +2]=byte ((_aegbd &0xff00)>>8);_fgeb .Data [_eac +3]=byte (_aegbd &0xff);return nil ;};func (_ceg *CMYK32 )At (x ,y int )_gc .Color {_aed ,_ :=_ceg .ColorAt (x ,y );
return _aed };func _dccg (_eaa Gray ,_gcdg NRGBA ,_ebeb _fg .Rectangle ){for _gffc :=0;_gffc < _ebeb .Max .X ;_gffc ++{for _caef :=0;_caef < _ebeb .Max .Y ;_caef ++{_eaef :=_dggce (_gcdg .NRGBAAt (_gffc ,_caef ));_eaa .SetGray (_gffc ,_caef ,_eaef );};
};};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_gc .CMYK ,error ){_ccae :=4*(y *width +x );if _ccae +3>=len (data ){return _gc .CMYK {},_d .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_ccae ]&0xff;M :=data [_ccae +1]&0xff;Y :=data [_ccae +2]&0xff;K :=data [_ccae +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _gc .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};var _ _fg .Image =&Gray8 {};
func _cfdea (_geeb _fg .Image ,_bfgg Image ,_fdcgf _fg .Rectangle ){if _ebbbe ,_egcf :=_geeb .(SMasker );_egcf &&_ebbbe .HasAlpha (){_bfgg .(SMasker ).MakeAlpha ();};switch _dddae :=_geeb .(type ){case Gray :_abeff (_dddae ,_bfgg .(NRGBA ),_fdcgf );case NRGBA :_dfgg (_dddae ,_bfgg .(NRGBA ),_fdcgf );
case *_fg .NYCbCrA :_egfe (_dddae ,_bfgg .(NRGBA ),_fdcgf );case CMYK :_effb (_dddae ,_bfgg .(NRGBA ),_fdcgf );case RGBA :_fdgcf (_dddae ,_bfgg .(NRGBA ),_fdcgf );case nrgba64 :_egdec (_dddae ,_bfgg .(NRGBA ),_fdcgf );default:_abcb (_geeb ,_bfgg ,_fdcgf );
};};type Gray2 struct{ImageBase };func _afgba (_bdae *Monochrome ,_bbfa ,_fcbf ,_aac ,_dgaea int ,_egdf RasterOperator ,_bcbf *Monochrome ,_edcd ,_ecbg int )error {var (_bcaa byte ;_fcaeg int ;_feebc int ;_gbff ,_cbbg int ;_bgeg ,_fcead int ;);_ccbb :=_aac >>3;
_fded :=_aac &7;if _fded > 0{_bcaa =_cbaf [_fded ];};_fcaeg =_bcbf .BytesPerLine *_ecbg +(_edcd >>3);_feebc =_bdae .BytesPerLine *_fcbf +(_bbfa >>3);switch _egdf {case PixSrc :for _bgeg =0;_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;
_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]=_bcbf .Data [_gbff ];_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],_bcbf .Data [_gbff ],_bcaa );};};case PixNotSrc :for _bgeg =0;
_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]=^(_bcbf .Data [_gbff ]);_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],^_bcbf .Data [_gbff ],_bcaa );
};};case PixSrcOrDst :for _bgeg =0;_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]|=_bcbf .Data [_gbff ];_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],_bcbf .Data [_gbff ]|_bdae .Data [_cbbg ],_bcaa );
};};case PixSrcAndDst :for _bgeg =0;_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]&=_bcbf .Data [_gbff ];_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],_bcbf .Data [_gbff ]&_bdae .Data [_cbbg ],_bcaa );
};};case PixSrcXorDst :for _bgeg =0;_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]^=_bcbf .Data [_gbff ];_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],_bcbf .Data [_gbff ]^_bdae .Data [_cbbg ],_bcaa );
};};case PixNotSrcOrDst :for _bgeg =0;_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]|=^(_bcbf .Data [_gbff ]);_cbbg ++;_gbff ++;
};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],^(_bcbf .Data [_gbff ])|_bdae .Data [_cbbg ],_bcaa );};};case PixNotSrcAndDst :for _bgeg =0;_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;
for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]&=^(_bcbf .Data [_gbff ]);_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],^(_bcbf .Data [_gbff ])&_bdae .Data [_cbbg ],_bcaa );};};case PixSrcOrNotDst :for _bgeg =0;
_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]=_bcbf .Data [_gbff ]|^(_bdae .Data [_cbbg ]);_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],_bcbf .Data [_gbff ]|^(_bdae .Data [_cbbg ]),_bcaa );
};};case PixSrcAndNotDst :for _bgeg =0;_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]=_bcbf .Data [_gbff ]&^(_bdae .Data [_cbbg ]);
_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],_bcbf .Data [_gbff ]&^(_bdae .Data [_cbbg ]),_bcaa );};};case PixNotPixSrcOrDst :for _bgeg =0;_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;
for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]=^(_bcbf .Data [_gbff ]|_bdae .Data [_cbbg ]);_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],^(_bcbf .Data [_gbff ]|_bdae .Data [_cbbg ]),_bcaa );};};case PixNotPixSrcAndDst :for _bgeg =0;
_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]=^(_bcbf .Data [_gbff ]&_bdae .Data [_cbbg ]);_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],^(_bcbf .Data [_gbff ]&_bdae .Data [_cbbg ]),_bcaa );
};};case PixNotPixSrcXorDst :for _bgeg =0;_bgeg < _dgaea ;_bgeg ++{_gbff =_fcaeg +_bgeg *_bcbf .BytesPerLine ;_cbbg =_feebc +_bgeg *_bdae .BytesPerLine ;for _fcead =0;_fcead < _ccbb ;_fcead ++{_bdae .Data [_cbbg ]=^(_bcbf .Data [_gbff ]^_bdae .Data [_cbbg ]);
_cbbg ++;_gbff ++;};if _fded > 0{_bdae .Data [_cbbg ]=_agbb (_bdae .Data [_cbbg ],^(_bcbf .Data [_gbff ]^_bdae .Data [_cbbg ]),_bcaa );};};default:_b .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_egdf );
return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};type Gray4 struct{ImageBase };func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_bffd :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _bffd ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_ffdg :=width *colorComponents *bitsPerComponent ;_dcbfd :=_bffd *8;_dfdbb :=8-(_dcbfd -_ffdg );_ffcb :=_cf .NewReader (data );_afbc :=_bffd -1;_egbfb :=make ([]byte ,_afbc );_bbca :=make ([]byte ,height *_bffd );
_bfe :=_cf .NewWriterMSB (_bbca );var _edaeg uint64 ;var _bfa error ;for _cdcac :=0;_cdcac < height ;_cdcac ++{_ ,_bfa =_ffcb .Read (_egbfb );if _bfa !=nil {return nil ,_bfa ;};_ ,_bfa =_bfe .Write (_egbfb );if _bfa !=nil {return nil ,_bfa ;};_edaeg ,_bfa =_ffcb .ReadBits (byte (_dfdbb ));
if _bfa !=nil {return nil ,_bfa ;};_ ,_bfa =_bfe .WriteBits (_edaeg ,_dfdbb );if _bfa !=nil {return nil ,_bfa ;};_bfe .FinishByte ();};return _bbca ,nil ;};func (_dgec *Gray2 )Set (x ,y int ,c _gc .Color ){if x >=_dgec .Width ||y >=_dgec .Height {return ;
};_dbfe :=Gray2Model .Convert (c ).(_gc .Gray );_abdae :=y *_dgec .BytesPerLine ;_abcg :=_abdae +(x >>2);_cdg :=_dbfe .Y >>6;_dgec .Data [_abcg ]=(_dgec .Data [_abcg ]&(^(0xc0>>uint (2*((x )&3)))))|(_cdg <<uint (6-2*(x &3)));};func _dfda (_gbce *Monochrome ,_dbagb ,_dafd int ,_ecac ,_agb int ,_aegf RasterOperator ,_bdcd *Monochrome ,_baab ,_cbgf int )error {var _dgca ,_cffbg ,_bcea ,_afee int ;
if _dbagb < 0{_baab -=_dbagb ;_ecac +=_dbagb ;_dbagb =0;};if _baab < 0{_dbagb -=_baab ;_ecac +=_baab ;_baab =0;};_dgca =_dbagb +_ecac -_gbce .Width ;if _dgca > 0{_ecac -=_dgca ;};_cffbg =_baab +_ecac -_bdcd .Width ;if _cffbg > 0{_ecac -=_cffbg ;};if _dafd < 0{_cbgf -=_dafd ;
_agb +=_dafd ;_dafd =0;};if _cbgf < 0{_dafd -=_cbgf ;_agb +=_cbgf ;_cbgf =0;};_bcea =_dafd +_agb -_gbce .Height ;if _bcea > 0{_agb -=_bcea ;};_afee =_cbgf +_agb -_bdcd .Height ;if _afee > 0{_agb -=_afee ;};if _ecac <=0||_agb <=0{return nil ;};var _aabeg error ;
switch {case _dbagb &7==0&&_baab &7==0:_aabeg =_afgba (_gbce ,_dbagb ,_dafd ,_ecac ,_agb ,_aegf ,_bdcd ,_baab ,_cbgf );case _dbagb &7==_baab &7:_aabeg =_cad (_gbce ,_dbagb ,_dafd ,_ecac ,_agb ,_aegf ,_bdcd ,_baab ,_cbgf );default:_aabeg =_bgead (_gbce ,_dbagb ,_dafd ,_ecac ,_agb ,_aegf ,_bdcd ,_baab ,_cbgf );
};if _aabeg !=nil {return _aabeg ;};return nil ;};func (_gcc *Gray16 )SetGray (x ,y int ,g _gc .Gray ){_dcdb :=(y *_gcc .BytesPerLine /2+x )*2;if _dcdb +1>=len (_gcc .Data ){return ;};_gcc .Data [_dcdb ]=g .Y ;_gcc .Data [_dcdb +1]=g .Y ;};func AutoThresholdTriangle (histogram [256]int )uint8 {var _abg ,_bfee ,_gbcec ,_gbfdc int ;
for _fcdf :=0;_fcdf < len (histogram );_fcdf ++{if histogram [_fcdf ]> 0{_abg =_fcdf ;break ;};};if _abg > 0{_abg --;};for _gfed :=255;_gfed > 0;_gfed --{if histogram [_gfed ]> 0{_gbfdc =_gfed ;break ;};};if _gbfdc < 255{_gbfdc ++;};for _egdbf :=0;_egdbf < 256;
_egdbf ++{if histogram [_egdbf ]> _bfee {_gbcec =_egdbf ;_bfee =histogram [_egdbf ];};};var _ggcef bool ;if (_gbcec -_abg )< (_gbfdc -_gbcec ){_ggcef =true ;var _ecea int ;_gfgf :=255;for _ecea < _gfgf {_agee :=histogram [_ecea ];histogram [_ecea ]=histogram [_gfgf ];
histogram [_gfgf ]=_agee ;_ecea ++;_gfgf --;};_abg =255-_gbfdc ;_gbcec =255-_gbcec ;};if _abg ==_gbcec {return uint8 (_abg );};_ecdge :=float64 (histogram [_gbcec ]);_abae :=float64 (_abg -_gbcec );_dcad :=_gd .Sqrt (_ecdge *_ecdge +_abae *_abae );_ecdge /=_dcad ;
_abae /=_dcad ;_dcad =_ecdge *float64 (_abg )+_abae *float64 (histogram [_abg ]);_ccgf :=_abg ;var _aggc float64 ;for _dccgc :=_abg +1;_dccgc <=_gbcec ;_dccgc ++{_bedc :=_ecdge *float64 (_dccgc )+_abae *float64 (histogram [_dccgc ])-_dcad ;if _bedc > _aggc {_ccgf =_dccgc ;
_aggc =_bedc ;};};_ccgf --;if _ggcef {var _fdgdbc int ;_eegce :=255;for _fdgdbc < _eegce {_ecbfa :=histogram [_fdgdbc ];histogram [_fdgdbc ]=histogram [_eegce ];histogram [_eegce ]=_ecbfa ;_fdgdbc ++;_eegce --;};return uint8 (255-_ccgf );};return uint8 (_ccgf );
};func (_bfg *Monochrome )IsUnpadded ()bool {return (_bfg .Width *_bfg .Height )==len (_bfg .Data )};func (_efgf *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_efgf .copy ()}};func init (){_defc ()};func _ebf (_cca *Monochrome ,_gab int ,_gga []byte )(_ffg *Monochrome ,_gee error ){const _efg ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";
if _cca ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gab < 1||_gab > 4{return nil ,_c .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _cca .Height <=1{return nil ,_c .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_ffg =_dgg (_cca .Width /2,_cca .Height /2);
if _gga ==nil {_gga =_cce ();};_efd :=_aadbf (_cca .BytesPerLine ,2*_ffg .BytesPerLine );switch _gab {case 1:_gee =_cbd (_cca ,_ffg ,_gga ,_efd );case 2:_gee =_bag (_cca ,_ffg ,_gga ,_efd );case 3:_gee =_bgg (_cca ,_ffg ,_gga ,_efd );case 4:_gee =_ggea (_cca ,_ffg ,_gga ,_efd );
};if _gee !=nil {return nil ,_gee ;};return _ffg ,nil ;};func (_fbb *CMYK32 )CMYKAt (x ,y int )_gc .CMYK {_eae ,_ :=ColorAtCMYK (x ,y ,_fbb .Width ,_fbb .Data ,_fbb .Decode );return _eae ;};func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_gc .RGBA ,error ){_agag :=y *width +x ;
_cbda :=3*_agag ;if _cbda +2>=len (data ){return _gc .RGBA {},_d .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gffcb :=uint8 (0xff);if alpha !=nil &&len (alpha )> _agag {_gffcb =alpha [_agag ];};_egcde ,_beae ,_dadf :=data [_cbda ],data [_cbda +1],data [_cbda +2];if len (decode )==6{_egcde =uint8 (uint32 (LinearInterpolate (float64 (_egcde ),0,255,decode [0],decode [1]))&0xff);
_beae =uint8 (uint32 (LinearInterpolate (float64 (_beae ),0,255,decode [2],decode [3]))&0xff);_dadf =uint8 (uint32 (LinearInterpolate (float64 (_dadf ),0,255,decode [4],decode [5]))&0xff);};return _gc .RGBA {R :_egcde ,G :_beae ,B :_dadf ,A :_gffcb },nil ;
};type CMYK32 struct{ImageBase };func GrayHistogram (g Gray )(_efdg [256]int ){switch _eedg :=g .(type ){case Histogramer :return _eedg .Histogram ();case _fg .Image :_fcdd :=_eedg .Bounds ();for _egcdeb :=0;_egcdeb < _fcdd .Max .X ;_egcdeb ++{for _gafd :=0;
_gafd < _fcdd .Max .Y ;_gafd ++{_efdg [g .GrayAt (_egcdeb ,_gafd ).Y ]++;};};return _efdg ;default:return [256]int {};};};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_eafd :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_eafd .Data =make ([]byte ,height *_eafd .BytesPerLine );};return _eafd ;};func _aadb (_agge _gc .Color )_gc .Color {_fcd :=_gc .GrayModel .Convert (_agge ).(_gc .Gray );return _ffbb (_fcd );};func _cdaa (_cgfb ,_bdf CMYK ,_bfd _fg .Rectangle ){for _ffba :=0;
_ffba < _bfd .Max .X ;_ffba ++{for _egge :=0;_egge < _bfd .Max .Y ;_egge ++{_bdf .SetCMYK (_ffba ,_egge ,_cgfb .CMYKAt (_ffba ,_egge ));};};};func _ffbb (_ggce _gc .Gray )_gc .Gray {_acgg :=_ggce .Y >>6;_acgg |=_acgg <<2;_ggce .Y =_acgg |_acgg <<4;return _ggce ;
};func (_dcdc *Monochrome )getBitAt (_feeb ,_eca int )bool {_abdd :=_eca *_dcdc .BytesPerLine +(_feeb >>3);_eeed :=_feeb &0x07;_edd :=uint (7-_eeed );if _abdd > len (_dcdc .Data )-1{return false ;};if (_dcdc .Data [_abdd ]>>_edd )&0x01>=1{return true ;
};return false ;};func (_bgea *Gray2 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_bgea .Width ,Y :_bgea .Height }};};func (_adgeg *NRGBA64 )Base ()*ImageBase {return &_adgeg .ImageBase };func (_cgcbc *Gray8 )At (x ,y int )_gc .Color {_dff ,_ :=_cgcbc .ColorAt (x ,y );
return _dff };func _abcf (_dcca _gc .NRGBA )_gc .NRGBA {_dcca .R =_dcca .R >>4|(_dcca .R >>4)<<4;_dcca .G =_dcca .G >>4|(_dcca .G >>4)<<4;_dcca .B =_dcca .B >>4|(_dcca .B >>4)<<4;return _dcca ;};var _ Image =&NRGBA64 {};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;
};return 1<<(_eeebe (n )+1);};func _bgead (_dbae *Monochrome ,_eegc ,_cffdg ,_dedd ,_dcgf int ,_bdff RasterOperator ,_ggge *Monochrome ,_faee ,_gbbb int )error {var (_bgbe bool ;_bdda bool ;_febbg byte ;_eeffd int ;_ebfe int ;_eacf int ;_acdc int ;_aeff bool ;
_eba int ;_deeg int ;_fgfb int ;_gbgfc bool ;_adfdb byte ;_bfae int ;_dfca int ;_gddcd int ;_ggfe byte ;_dgf int ;_fbef int ;_gce uint ;_agdcg uint ;_acgge byte ;_ddgd shift ;_bcgd bool ;_adgd bool ;_eeaf ,_bbcaf int ;);if _faee &7!=0{_fbef =8-(_faee &7);
};if _eegc &7!=0{_ebfe =8-(_eegc &7);};if _fbef ==0&&_ebfe ==0{_acgge =_ecgf [0];}else {if _ebfe > _fbef {_gce =uint (_ebfe -_fbef );}else {_gce =uint (8-(_fbef -_ebfe ));};_agdcg =8-_gce ;_acgge =_ecgf [_gce ];};if (_eegc &7)!=0{_bgbe =true ;_eeffd =8-(_eegc &7);
_febbg =_ecgf [_eeffd ];_eacf =_dbae .BytesPerLine *_cffdg +(_eegc >>3);_acdc =_ggge .BytesPerLine *_gbbb +(_faee >>3);_dgf =8-(_faee &7);if _eeffd > _dgf {_ddgd =_fece ;if _dedd >=_fbef {_bcgd =true ;};}else {_ddgd =_aefc ;};};if _dedd < _eeffd {_bdda =true ;
_febbg &=_cbaf [8-_eeffd +_dedd ];};if !_bdda {_eba =(_dedd -_eeffd )>>3;if _eba !=0{_aeff =true ;_deeg =_dbae .BytesPerLine *_cffdg +((_eegc +_ebfe )>>3);_fgfb =_ggge .BytesPerLine *_gbbb +((_faee +_ebfe )>>3);};};_bfae =(_eegc +_dedd )&7;if !(_bdda ||_bfae ==0){_gbgfc =true ;
_adfdb =_cbaf [_bfae ];_dfca =_dbae .BytesPerLine *_cffdg +((_eegc +_ebfe )>>3)+_eba ;_gddcd =_ggge .BytesPerLine *_gbbb +((_faee +_ebfe )>>3)+_eba ;if _bfae > int (_agdcg ){_adgd =true ;};};switch _bdff {case PixSrc :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;
_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],_ggfe ,_febbg );_eacf +=_dbae .BytesPerLine ;
_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );_dbae .Data [_deeg +_bbcaf ]=_ggfe ;
};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],_ggfe ,_adfdb );
_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;};};case PixNotSrc :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );};
}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],^_ggfe ,_febbg );_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );
_dbae .Data [_deeg +_bbcaf ]=^_ggfe ;};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );
};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],^_ggfe ,_adfdb );_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;};};case PixSrcOrDst :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );
};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],_ggfe |_dbae .Data [_eacf ],_febbg );_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;
_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );_dbae .Data [_deeg +_bbcaf ]|=_ggfe ;};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;
_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],_ggfe |_dbae .Data [_dfca ],_adfdb );_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;
};};case PixSrcAndDst :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],_ggfe &_dbae .Data [_eacf ],_febbg );
_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );_dbae .Data [_deeg +_bbcaf ]&=_ggfe ;
};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],_ggfe &_dbae .Data [_dfca ],_adfdb );
_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;};};case PixSrcXorDst :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );
};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],_ggfe ^_dbae .Data [_eacf ],_febbg );_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;
_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );_dbae .Data [_deeg +_bbcaf ]^=_ggfe ;};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;
_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],_ggfe ^_dbae .Data [_dfca ],_adfdb );_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;
};};case PixNotSrcOrDst :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],^_ggfe |_dbae .Data [_eacf ],_febbg );
_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );_dbae .Data [_deeg +_bbcaf ]|=^_ggfe ;
};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],^_ggfe |_dbae .Data [_dfca ],_adfdb );
_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;};};case PixNotSrcAndDst :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );
};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],^_ggfe &_dbae .Data [_eacf ],_febbg );_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;
_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );_dbae .Data [_deeg +_bbcaf ]&=^_ggfe ;};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;
_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],^_ggfe &_dbae .Data [_dfca ],_adfdb );_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;
};};case PixSrcOrNotDst :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],_ggfe |^_dbae .Data [_eacf ],_febbg );
_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );_dbae .Data [_deeg +_bbcaf ]=_ggfe |^_dbae .Data [_deeg +_bbcaf ];
};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],_ggfe |^_dbae .Data [_dfca ],_adfdb );
_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;};};case PixSrcAndNotDst :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );
};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],_ggfe &^_dbae .Data [_eacf ],_febbg );_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;
_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );_dbae .Data [_deeg +_bbcaf ]=_ggfe &^_dbae .Data [_deeg +_bbcaf ];};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};
};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],_ggfe &^_dbae .Data [_dfca ],_adfdb );_dfca +=_dbae .BytesPerLine ;
_gddcd +=_ggge .BytesPerLine ;};};case PixNotPixSrcOrDst :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;
};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],^(_ggfe |_dbae .Data [_eacf ]),_febbg );_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );
_dbae .Data [_deeg +_bbcaf ]=^(_ggfe |_dbae .Data [_deeg +_bbcaf ]);};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );
};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],^(_ggfe |_dbae .Data [_dfca ]),_adfdb );_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;};};case PixNotPixSrcAndDst :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;
if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],^(_ggfe &_dbae .Data [_eacf ]),_febbg );_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;
};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );_dbae .Data [_deeg +_bbcaf ]=^(_ggfe &_dbae .Data [_deeg +_bbcaf ]);
};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],^(_ggfe &_dbae .Data [_dfca ]),_adfdb );
_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;};};case PixNotPixSrcXorDst :if _bgbe {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{if _ddgd ==_fece {_ggfe =_ggge .Data [_acdc ]<<_gce ;if _bcgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_acdc +1]>>_agdcg ,_acgge );
};}else {_ggfe =_ggge .Data [_acdc ]>>_agdcg ;};_dbae .Data [_eacf ]=_agbb (_dbae .Data [_eacf ],^(_ggfe ^_dbae .Data [_eacf ]),_febbg );_eacf +=_dbae .BytesPerLine ;_acdc +=_ggge .BytesPerLine ;};};if _aeff {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{for _bbcaf =0;
_bbcaf < _eba ;_bbcaf ++{_ggfe =_agbb (_ggge .Data [_fgfb +_bbcaf ]<<_gce ,_ggge .Data [_fgfb +_bbcaf +1]>>_agdcg ,_acgge );_dbae .Data [_deeg +_bbcaf ]=^(_ggfe ^_dbae .Data [_deeg +_bbcaf ]);};_deeg +=_dbae .BytesPerLine ;_fgfb +=_ggge .BytesPerLine ;
};};if _gbgfc {for _eeaf =0;_eeaf < _dcgf ;_eeaf ++{_ggfe =_ggge .Data [_gddcd ]<<_gce ;if _adgd {_ggfe =_agbb (_ggfe ,_ggge .Data [_gddcd +1]>>_agdcg ,_acgge );};_dbae .Data [_dfca ]=_agbb (_dbae .Data [_dfca ],^(_ggfe ^_dbae .Data [_dfca ]),_adfdb );
_dfca +=_dbae .BytesPerLine ;_gddcd +=_ggge .BytesPerLine ;};};default:_b .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_bdff );
return _c .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func _abd ()(_acf [256]uint32 ){for _ada :=0;_ada < 256;
_ada ++{if _ada &0x01!=0{_acf [_ada ]|=0xf;};if _ada &0x02!=0{_acf [_ada ]|=0xf0;};if _ada &0x04!=0{_acf [_ada ]|=0xf00;};if _ada &0x08!=0{_acf [_ada ]|=0xf000;};if _ada &0x10!=0{_acf [_ada ]|=0xf0000;};if _ada &0x20!=0{_acf [_ada ]|=0xf00000;};if _ada &0x40!=0{_acf [_ada ]|=0xf000000;
};if _ada &0x80!=0{_acf [_ada ]|=0xf0000000;};};return _acf ;};func (_fbc *ImageBase )setEightFullBytes (_geee int ,_dfcc uint64 )error {if _geee +7> len (_fbc .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fbc .Data [_geee ]=byte ((_dfcc &0xff00000000000000)>>56);_fbc .Data [_geee +1]=byte ((_dfcc &0xff000000000000)>>48);_fbc .Data [_geee +2]=byte ((_dfcc &0xff0000000000)>>40);_fbc .Data [_geee +3]=byte ((_dfcc &0xff00000000)>>32);_fbc .Data [_geee +4]=byte ((_dfcc &0xff000000)>>24);
_fbc .Data [_geee +5]=byte ((_dfcc &0xff0000)>>16);_fbc .Data [_geee +6]=byte ((_dfcc &0xff00)>>8);_fbc .Data [_geee +7]=byte (_dfcc &0xff);return nil ;};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };
};func _bgg (_gec ,_gcg *Monochrome ,_deg []byte ,_cgg int )(_eeb error ){var (_fecb ,_cdd ,_eda ,_cab ,_dgcc ,_bde ,_fgg ,_cgde int ;_ced ,_cgf ,_cgfd ,_eeba uint32 ;_dgb ,_dac byte ;_gdaf uint16 ;);_ebcd :=make ([]byte ,4);_ede :=make ([]byte ,4);for _eda =0;
_eda < _gec .Height -1;_eda ,_cab =_eda +2,_cab +1{_fecb =_eda *_gec .BytesPerLine ;_cdd =_cab *_gcg .BytesPerLine ;for _dgcc ,_bde =0,0;_dgcc < _cgg ;_dgcc ,_bde =_dgcc +4,_bde +1{for _fgg =0;_fgg < 4;_fgg ++{_cgde =_fecb +_dgcc +_fgg ;if _cgde <=len (_gec .Data )-1&&_cgde < _fecb +_gec .BytesPerLine {_ebcd [_fgg ]=_gec .Data [_cgde ];
}else {_ebcd [_fgg ]=0x00;};_cgde =_fecb +_gec .BytesPerLine +_dgcc +_fgg ;if _cgde <=len (_gec .Data )-1&&_cgde < _fecb +(2*_gec .BytesPerLine ){_ede [_fgg ]=_gec .Data [_cgde ];}else {_ede [_fgg ]=0x00;};};_ced =_fd .BigEndian .Uint32 (_ebcd );_cgf =_fd .BigEndian .Uint32 (_ede );
_cgfd =_ced &_cgf ;_cgfd |=_cgfd <<1;_eeba =_ced |_cgf ;_eeba &=_eeba <<1;_cgf =_cgfd &_eeba ;_cgf &=0xaaaaaaaa;_ced =_cgf |(_cgf <<7);_dgb =byte (_ced >>24);_dac =byte ((_ced >>8)&0xff);_cgde =_cdd +_bde ;if _cgde +1==len (_gcg .Data )-1||_cgde +1>=_cdd +_gcg .BytesPerLine {if _eeb =_gcg .setByte (_cgde ,_deg [_dgb ]);
_eeb !=nil {return _d .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cgde );};}else {_gdaf =(uint16 (_deg [_dgb ])<<8)|uint16 (_deg [_dac ]);if _eeb =_gcg .setTwoBytes (_cgde ,_gdaf );_eeb !=nil {return _d .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cgde );
};_bde ++;};};};return nil ;};func (_ebb *Gray2 )At (x ,y int )_gc .Color {_ecbb ,_ :=_ebb .ColorAt (x ,y );return _ecbb };func (_afege *RGBA32 )Base ()*ImageBase {return &_afege .ImageBase };type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();
};func _cea (_decf _gc .NYCbCrA )_gc .NRGBA {_agc :=int32 (_decf .Y )*0x10101;_eged :=int32 (_decf .Cb )-128;_cabg :=int32 (_decf .Cr )-128;_bdfe :=_agc +91881*_cabg ;if uint32 (_bdfe )&0xff000000==0{_bdfe >>=8;}else {_bdfe =^(_bdfe >>31)&0xffff;};_cffb :=_agc -22554*_eged -46802*_cabg ;
if uint32 (_cffb )&0xff000000==0{_cffb >>=8;}else {_cffb =^(_cffb >>31)&0xffff;};_ccda :=_agc +116130*_eged ;if uint32 (_ccda )&0xff000000==0{_ccda >>=8;}else {_ccda =^(_ccda >>31)&0xffff;};return _gc .NRGBA {R :uint8 (_bdfe >>8),G :uint8 (_cffb >>8),B :uint8 (_ccda >>8),A :_decf .A };
};func (_dafa *ImageBase )Pix ()[]byte {return _dafa .Data };func _dafg (_ecfe ,_dfgc uint8 )uint8 {if _ecfe < _dfgc {return 255;};return 0;};func (_ceec *CMYK32 )ColorAt (x ,y int )(_gc .Color ,error ){return ColorAtCMYK (x ,y ,_ceec .Width ,_ceec .Data ,_ceec .Decode );
};func _afgfa (_abdf _fg .Image )(Image ,error ){if _aecc ,_dbfc :=_abdf .(*Gray8 );_dbfc {return _aecc .Copy (),nil ;};_aabe :=_abdf .Bounds ();_dfff ,_dad :=NewImage (_aabe .Max .X ,_aabe .Max .Y ,8,1,nil ,nil ,nil );if _dad !=nil {return nil ,_dad ;
};_eage (_abdf ,_dfff ,_aabe );return _dfff ,nil ;};func _dgg (_gbc ,_fec int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_gbc ,_fec ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};var _ Image =&Gray4 {};func _aadef (_dbdc ,_gdcg RGBA ,_dbcf _fg .Rectangle ){for _cgca :=0;
_cgca < _dbcf .Max .X ;_cgca ++{for _ebfag :=0;_ebfag < _dbcf .Max .Y ;_ebfag ++{_gdcg .SetRGBA (_cgca ,_ebfag ,_dbdc .RGBAAt (_cgca ,_ebfag ));};};};type nrgba64 interface{NRGBA64At (_cdcc ,_fegb int )_gc .NRGBA64 ;SetNRGBA64 (_bagf ,_gegca int ,_ggbac _gc .NRGBA64 );
};func (_ecfb *Gray8 )Base ()*ImageBase {return &_ecfb .ImageBase };func (_bcca *RGBA32 )At (x ,y int )_gc .Color {_geeg ,_ :=_bcca .ColorAt (x ,y );return _geeg };func _dede (_feda int ,_aece int )error {return _d .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_feda ,_aece );
};func _eggc (_befb _gc .RGBA )_gc .NRGBA {switch _befb .A {case 0xff:return _gc .NRGBA {R :_befb .R ,G :_befb .G ,B :_befb .B ,A :0xff};case 0x00:return _gc .NRGBA {};default:_gaca ,_dfde ,_ccaa ,_fddbc :=_befb .RGBA ();_gaca =(_gaca *0xffff)/_fddbc ;
_dfde =(_dfde *0xffff)/_fddbc ;_ccaa =(_ccaa *0xffff)/_fddbc ;return _gc .NRGBA {R :uint8 (_gaca >>8),G :uint8 (_dfde >>8),B :uint8 (_ccaa >>8),A :uint8 (_fddbc >>8)};};};func (_aage *Gray8 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_aage .Width ,Y :_aage .Height }};
};func (_afd *NRGBA32 )ColorAt (x ,y int )(_gc .Color ,error ){return ColorAtNRGBA32 (x ,y ,_afd .Width ,_afd .Data ,_afd .Alpha ,_afd .Decode );};func (_gcae *NRGBA64 )NRGBA64At (x ,y int )_gc .NRGBA64 {_egde ,_ :=ColorAtNRGBA64 (x ,y ,_gcae .Width ,_gcae .Data ,_gcae .Alpha ,_gcae .Decode );
return _egde ;};type CMYK interface{CMYKAt (_edb ,_ecc int )_gc .CMYK ;SetCMYK (_fac ,_bgb int ,_fdd _gc .CMYK );};func (_gef *Monochrome )Validate ()error {if len (_gef .Data )!=_gef .Height *_gef .BytesPerLine {return ErrInvalidImage ;};return nil ;};
func (_gbb *Gray16 )At (x ,y int )_gc .Color {_gdde ,_ :=_gbb .ColorAt (x ,y );return _gdde };func _dead (_bdgcb _fg .Image ,_gafag int )(_fg .Rectangle ,bool ,[]byte ){_feea :=_bdgcb .Bounds ();var (_eegf bool ;_ggee []byte ;);switch _dgga :=_bdgcb .(type ){case SMasker :_eegf =_dgga .HasAlpha ();
case NRGBA ,RGBA ,*_fg .RGBA64 ,nrgba64 ,*_fg .NYCbCrA :_ggee =make ([]byte ,_feea .Max .X *_feea .Max .Y *_gafag );case *_fg .Paletted :var _ageb bool ;for _ ,_gcca :=range _dgga .Palette {_fcaff ,_agda ,_bgcb ,_deca :=_gcca .RGBA ();if _fcaff ==0&&_agda ==0&&_bgcb ==0&&_deca !=0{_ageb =true ;
break ;};};if _ageb {_ggee =make ([]byte ,_feea .Max .X *_feea .Max .Y *_gafag );};};return _feea ,_eegf ,_ggee ;};var _ Gray =&Gray2 {};func (_afa *Monochrome )ResolveDecode ()error {if len (_afa .Decode )!=2{return nil ;};if _afa .Decode [0]==1&&_afa .Decode [1]==0{if _eecd :=_afa .InverseData ();
_eecd !=nil {return _eecd ;};_afa .Decode =nil ;};return nil ;};func _fcba (_baga _gc .Color )_gc .Color {_bbaf :=_gc .NRGBAModel .Convert (_baga ).(_gc .NRGBA );return _abcf (_bbaf );};func (_bgef *Gray16 )ColorModel ()_gc .Model {return _gc .Gray16Model };
func (_eedf *NRGBA32 )Base ()*ImageBase {return &_eedf .ImageBase };func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_gc .Gray ,error ){_fddf :=y *bytesPerLine +x >>1;if _fddf >=len (data ){return _gc .Gray {},_d .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fadf :=data [_fddf ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_fadf =uint8 (uint32 (LinearInterpolate (float64 (_fadf ),0,15,decode [0],decode [1]))&0xf);};return _gc .Gray {Y :_fadf *17&0xff},nil ;};func _defc (){for _dagfa :=0;_dagfa < 256;_dagfa ++{_bdgc [_dagfa ]=uint8 (_dagfa &0x1)+(uint8 (_dagfa >>1)&0x1)+(uint8 (_dagfa >>2)&0x1)+(uint8 (_dagfa >>3)&0x1)+(uint8 (_dagfa >>4)&0x1)+(uint8 (_dagfa >>5)&0x1)+(uint8 (_dagfa >>6)&0x1)+(uint8 (_dagfa >>7)&0x1);
};};func _aadbf (_gacg int ,_cdae int )int {if _gacg < _cdae {return _gacg ;};return _cdae ;};func _dffe (_fdc *Monochrome ,_bfce ,_bfced int ,_aaeb ,_befgd int ,_dgbb RasterOperator ){var (_aaca bool ;_fdabf bool ;_dgeb int ;_dfafg int ;_ceff int ;_cffbb int ;
_cfeg bool ;_abbf byte ;);_dgff :=8-(_bfce &7);_fbg :=_ecgf [_dgff ];_abaaa :=_fdc .BytesPerLine *_bfced +(_bfce >>3);if _aaeb < _dgff {_aaca =true ;_fbg &=_cbaf [8-_dgff +_aaeb ];};if !_aaca {_dgeb =(_aaeb -_dgff )>>3;if _dgeb !=0{_fdabf =true ;_dfafg =_abaaa +1;
};};_ceff =(_bfce +_aaeb )&7;if !(_aaca ||_ceff ==0){_cfeg =true ;_abbf =_cbaf [_ceff ];_cffbb =_abaaa +1+_dgeb ;};var _edgd ,_ddgf int ;switch _dgbb {case PixClr :for _edgd =0;_edgd < _befgd ;_edgd ++{_fdc .Data [_abaaa ]=_agbb (_fdc .Data [_abaaa ],0x0,_fbg );
_abaaa +=_fdc .BytesPerLine ;};if _fdabf {for _edgd =0;_edgd < _befgd ;_edgd ++{for _ddgf =0;_ddgf < _dgeb ;_ddgf ++{_fdc .Data [_dfafg +_ddgf ]=0x0;};_dfafg +=_fdc .BytesPerLine ;};};if _cfeg {for _edgd =0;_edgd < _befgd ;_edgd ++{_fdc .Data [_cffbb ]=_agbb (_fdc .Data [_cffbb ],0x0,_abbf );
_cffbb +=_fdc .BytesPerLine ;};};case PixSet :for _edgd =0;_edgd < _befgd ;_edgd ++{_fdc .Data [_abaaa ]=_agbb (_fdc .Data [_abaaa ],0xff,_fbg );_abaaa +=_fdc .BytesPerLine ;};if _fdabf {for _edgd =0;_edgd < _befgd ;_edgd ++{for _ddgf =0;_ddgf < _dgeb ;
_ddgf ++{_fdc .Data [_dfafg +_ddgf ]=0xff;};_dfafg +=_fdc .BytesPerLine ;};};if _cfeg {for _edgd =0;_edgd < _befgd ;_edgd ++{_fdc .Data [_cffbb ]=_agbb (_fdc .Data [_cffbb ],0xff,_abbf );_cffbb +=_fdc .BytesPerLine ;};};case PixNotDst :for _edgd =0;_edgd < _befgd ;
_edgd ++{_fdc .Data [_abaaa ]=_agbb (_fdc .Data [_abaaa ],^_fdc .Data [_abaaa ],_fbg );_abaaa +=_fdc .BytesPerLine ;};if _fdabf {for _edgd =0;_edgd < _befgd ;_edgd ++{for _ddgf =0;_ddgf < _dgeb ;_ddgf ++{_fdc .Data [_dfafg +_ddgf ]=^(_fdc .Data [_dfafg +_ddgf ]);
};_dfafg +=_fdc .BytesPerLine ;};};if _cfeg {for _edgd =0;_edgd < _befgd ;_edgd ++{_fdc .Data [_cffbb ]=_agbb (_fdc .Data [_cffbb ],^_fdc .Data [_cffbb ],_abbf );_cffbb +=_fdc .BytesPerLine ;};};};};func _bgdd (_faaa *Monochrome ,_cfgf ,_gcee ,_deee ,_bdfed int ,_cafc RasterOperator ){if _cfgf < 0{_deee +=_cfgf ;
_cfgf =0;};_bdgb :=_cfgf +_deee -_faaa .Width ;if _bdgb > 0{_deee -=_bdgb ;};if _gcee < 0{_bdfed +=_gcee ;_gcee =0;};_ffae :=_gcee +_bdfed -_faaa .Height ;if _ffae > 0{_bdfed -=_ffae ;};if _deee <=0||_bdfed <=0{return ;};if (_cfgf &7)==0{_aeda (_faaa ,_cfgf ,_gcee ,_deee ,_bdfed ,_cafc );
}else {_dffe (_faaa ,_cfgf ,_gcee ,_deee ,_bdfed ,_cafc );};};func (_aeac *Gray16 )Histogram ()(_egcb [256]int ){for _cbfbd :=0;_cbfbd < _aeac .Width ;_cbfbd ++{for _eaea :=0;_eaea < _aeac .Height ;_eaea ++{_egcb [_aeac .GrayAt (_cbfbd ,_eaea ).Y ]++;};
};return _egcb ;};const (_fece shift =iota ;_aefc ;);func (_fcf *CMYK32 )Validate ()error {if len (_fcf .Data )!=4*_fcf .Width *_fcf .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ _fg .Image =&NRGBA32 {};func (_fbed *Gray16 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_fbed .Width ,Y :_fbed .Height }};};func (_eeef *NRGBA64 )At (x ,y int )_gc .Color {_dgdb ,_ :=_eeef .ColorAt (x ,y );
return _dgdb };func (_dag *Gray4 )Base ()*ImageBase {return &_dag .ImageBase };func InDelta (expected ,current ,delta float64 )bool {_bbec :=expected -current ;if _bbec <=-delta ||_bbec >=delta {return false ;};return true ;};type shift int ;func (_bcdc *Monochrome )Histogram ()(_gfca [256]int ){for _ ,_ceecg :=range _bcdc .Data {_gfca [0xff]+=int (_bdgc [_bcdc .Data [_ceecg ]]);
};return _gfca ;};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_e :=BytesPerLine (width ,8,1);if len (data )< _e *height {return nil ,nil ;};_cg :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_bc ,_gg :=MonochromeConverter .Convert (_cg );
if _gg !=nil {return nil ,_gg ;};return _bc .Base ().Data ,nil ;};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _ffcc (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _ggae (_feeg ,_aaf Gray ,_bgbd _fg .Rectangle ){for _cagcg :=0;
_cagcg < _bgbd .Max .X ;_cagcg ++{for _bbf :=0;_bbf < _bgbd .Max .Y ;_bbf ++{_aaf .SetGray (_cagcg ,_bbf ,_feeg .GrayAt (_cagcg ,_bbf ));};};};func _ffad (_eecb _gc .Color )_gc .Color {_ebda :=_gc .GrayModel .Convert (_eecb ).(_gc .Gray );return _deef (_ebda );
};func MonochromeModel (threshold uint8 )_gc .Model {return monochromeModel (threshold )};var _ Gray =&Monochrome {};func _efdbf (_bgefe uint8 )bool {if _bgefe ==0||_bgefe ==255{return true ;};return false ;};func _egac (_fdfc _fg .Image )(Image ,error ){if _cagc ,_cedb :=_fdfc .(*Monochrome );
_cedb {return _cagc ,nil ;};_ffga :=_fdfc .Bounds ();var _gaed Gray ;switch _abaa :=_fdfc .(type ){case Gray :_gaed =_abaa ;case NRGBA :_gaed =&Gray8 {ImageBase :NewImageBase (_ffga .Max .X ,_ffga .Max .Y ,8,1,nil ,nil ,nil )};_dccg (_gaed ,_abaa ,_ffga );
case nrgba64 :_gaed =&Gray8 {ImageBase :NewImageBase (_ffga .Max .X ,_ffga .Max .Y ,8,1,nil ,nil ,nil )};_bfbf (_gaed ,_abaa ,_ffga );default:_gcba ,_ceb :=GrayConverter .Convert (_fdfc );if _ceb !=nil {return nil ,_ceb ;};_gaed =_gcba .(Gray );};_ecbf ,_gagc :=NewImage (_ffga .Max .X ,_ffga .Max .Y ,1,1,nil ,nil ,nil );
if _gagc !=nil {return nil ,_gagc ;};_cedc :=_ecbf .(*Monochrome );_eebg :=AutoThresholdTriangle (GrayHistogram (_gaed ));for _cfe :=0;_cfe < _ffga .Max .X ;_cfe ++{for _fcfb :=0;_fcfb < _ffga .Max .Y ;_fcfb ++{_dcd :=_edae (_gaed .GrayAt (_cfe ,_fcfb ),monochromeModel (_eebg ));
_cedc .SetGray (_cfe ,_fcfb ,_dcd );};};return _ecbf ,nil ;};func _gddc (_dcc _gc .CMYK )_gc .Gray {_aea ,_dbc ,_acb :=_gc .CMYKToRGB (_dcc .C ,_dcc .M ,_dcc .Y ,_dcc .K );_egaa :=(19595*uint32 (_aea )+38470*uint32 (_dbc )+7471*uint32 (_acb )+1<<7)>>16;
return _gc .Gray {Y :uint8 (_egaa )};};type NRGBA32 struct{ImageBase };func (_aeag *Monochrome )setIndexedBit (_fcac int ){_aeag .Data [(_fcac >>3)]|=0x80>>uint (_fcac &7)};var (_dda =_ec ();_ad =_abd ();_acg =_ecb (););var (_cbaf =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};
_ecgf =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _agd (_ebgg _gc .RGBA )_gc .Gray {_abda :=(19595*uint32 (_ebgg .R )+38470*uint32 (_ebgg .G )+7471*uint32 (_ebgg .B )+1<<7)>>16;return _gc .Gray {Y :uint8 (_abda )};};func (_bggg *NRGBA16 )Validate ()error {if len (_bggg .Data )!=3*_bggg .Width *_bggg .Height /2{return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _cbd (_fea ,_bgd *Monochrome ,_egd []byte ,_bcgc int )(_dfg error ){var (_ed ,_ggab ,_cfde ,_cga ,_abe ,_gcdb ,_egg ,_gcff int ;_dggc ,_efa uint32 ;_ggg ,_acc byte ;_cgb uint16 ;);_ecg :=make ([]byte ,4);_ebd :=make ([]byte ,4);for _cfde =0;
_cfde < _fea .Height -1;_cfde ,_cga =_cfde +2,_cga +1{_ed =_cfde *_fea .BytesPerLine ;_ggab =_cga *_bgd .BytesPerLine ;for _abe ,_gcdb =0,0;_abe < _bcgc ;_abe ,_gcdb =_abe +4,_gcdb +1{for _egg =0;_egg < 4;_egg ++{_gcff =_ed +_abe +_egg ;if _gcff <=len (_fea .Data )-1&&_gcff < _ed +_fea .BytesPerLine {_ecg [_egg ]=_fea .Data [_gcff ];
}else {_ecg [_egg ]=0x00;};_gcff =_ed +_fea .BytesPerLine +_abe +_egg ;if _gcff <=len (_fea .Data )-1&&_gcff < _ed +(2*_fea .BytesPerLine ){_ebd [_egg ]=_fea .Data [_gcff ];}else {_ebd [_egg ]=0x00;};};_dggc =_fd .BigEndian .Uint32 (_ecg );_efa =_fd .BigEndian .Uint32 (_ebd );
_efa |=_dggc ;_efa |=_efa <<1;_efa &=0xaaaaaaaa;_dggc =_efa |(_efa <<7);_ggg =byte (_dggc >>24);_acc =byte ((_dggc >>8)&0xff);_gcff =_ggab +_gcdb ;if _gcff +1==len (_bgd .Data )-1||_gcff +1>=_ggab +_bgd .BytesPerLine {_bgd .Data [_gcff ]=_egd [_ggg ];}else {_cgb =(uint16 (_egd [_ggg ])<<8)|uint16 (_egd [_acc ]);
if _dfg =_bgd .setTwoBytes (_gcff ,_cgb );_dfg !=nil {return _d .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gcff );
};_gcdb ++;};};};return nil ;};func (_cec *Gray4 )ColorAt (x ,y int )(_gc .Color ,error ){return ColorAtGray4BPC (x ,y ,_cec .BytesPerLine ,_cec .Data ,_cec .Decode );};func _cfdd (_deec _fg .Image ,_abfce Image ,_gbfd _fg .Rectangle ){if _gaecd ,_ggcg :=_deec .(SMasker );
_ggcg &&_gaecd .HasAlpha (){_abfce .(SMasker ).MakeAlpha ();};switch _egbfc :=_deec .(type ){case Gray :_bccg (_egbfc ,_abfce .(RGBA ),_gbfd );case NRGBA :_fafef (_egbfc ,_abfce .(RGBA ),_gbfd );case *_fg .NYCbCrA :_geeaf (_egbfc ,_abfce .(RGBA ),_gbfd );
case CMYK :_egbd (_egbfc ,_abfce .(RGBA ),_gbfd );case RGBA :_aadef (_egbfc ,_abfce .(RGBA ),_gbfd );case nrgba64 :_gbae (_egbfc ,_abfce .(RGBA ),_gbfd );default:_abcb (_deec ,_abfce ,_gbfd );};};func _bgde (_ebe _gc .NYCbCrA )_gc .RGBA {_ebggg ,_eggf ,_cdb ,_gbg :=_cea (_ebe ).RGBA ();
return _gc .RGBA {R :uint8 (_ebggg >>8),G :uint8 (_eggf >>8),B :uint8 (_cdb >>8),A :uint8 (_gbg >>8)};};var _ _fg .Image =&Monochrome {};func (_gea *CMYK32 )Base ()*ImageBase {return &_gea .ImageBase };func (_fcgb *RGBA32 )SetRGBA (x ,y int ,c _gc .RGBA ){_bafeg :=y *_fcgb .Width +x ;
_cfeag :=3*_bafeg ;if _cfeag +2>=len (_fcgb .Data ){return ;};_fcgb .setRGBA (_bafeg ,c );};func (_afe *Gray2 )SetGray (x ,y int ,gray _gc .Gray ){_fbea :=_ffbb (gray );_ecgg :=y *_afe .BytesPerLine ;_fdga :=_ecgg +(x >>2);if _fdga >=len (_afe .Data ){return ;
};_ddfd :=_fbea .Y >>6;_afe .Data [_fdga ]=(_afe .Data [_fdga ]&(^(0xc0>>uint (2*((x )&3)))))|(_ddfd <<uint (6-2*(x &3)));};func (_cegc *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _ce (_cegc ,factor );};func (_cggg *NRGBA32 )ColorModel ()_gc .Model {return _gc .NRGBAModel };type RGBA32 struct{ImageBase };func _bfbf (_gbgg Gray ,_gadc nrgba64 ,_febb _fg .Rectangle ){for _cdba :=0;_cdba < _febb .Max .X ;_cdba ++{for _eecf :=0;
_eecf < _febb .Max .Y ;_eecf ++{_fce :=_bgff (_gadc .NRGBA64At (_cdba ,_eecf ));_gbgg .SetGray (_cdba ,_eecf ,_fce );};};};func (_ccde *NRGBA32 )Set (x ,y int ,c _gc .Color ){_eaee :=y *_ccde .Width +x ;_aefe :=3*_eaee ;if _aefe +2>=len (_ccde .Data ){return ;
};_ebgc :=_gc .NRGBAModel .Convert (c ).(_gc .NRGBA );_ccde .setRGBA (_eaee ,_ebgc );};func _ccd (_fdb *Monochrome ,_cfc ...int )(_gcfg *Monochrome ,_eef error ){if _fdb ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_cfc )==0{return nil ,_c .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_gad :=_cce ();_gcfg =_fdb ;for _ ,_gda :=range _cfc {if _gda <=0{break ;};_gcfg ,_eef =_ebf (_gcfg ,_gda ,_gad );if _eef !=nil {return nil ,_eef ;};};return _gcfg ,nil ;};var _ _fg .Image =&Gray16 {};func _geeaf (_fdcc *_fg .NYCbCrA ,_bafed RGBA ,_ebca _fg .Rectangle ){for _ecec :=0;
_ecec < _ebca .Max .X ;_ecec ++{for _ccbcc :=0;_ccbcc < _ebca .Max .Y ;_ccbcc ++{_fbca :=_fdcc .NYCbCrAAt (_ecec ,_ccbcc );_bafed .SetRGBA (_ecec ,_ccbcc ,_bgde (_fbca ));};};};func (_fgb *Monochrome )setGrayBit (_gbf ,_gfge int ){_fgb .Data [_gbf ]|=0x80>>uint (_gfge &7)};
func _egcd (_bgdb RGBA ,_fafc CMYK ,_fdfe _fg .Rectangle ){for _fggb :=0;_fggb < _fdfe .Max .X ;_fggb ++{for _cdc :=0;_cdc < _fdfe .Max .Y ;_cdc ++{_gff :=_bgdb .RGBAAt (_fggb ,_cdc );_fafc .SetCMYK (_fggb ,_cdc ,_fgdf (_gff ));};};};var _ Image =&RGBA32 {};
func (_bfdb *Monochrome )InverseData ()error {return _bfdb .RasterOperation (0,0,_bfdb .Width ,_bfdb .Height ,PixNotDst ,nil ,0,0);};func _ggbf (_fdgdb RGBA ,_abfd Gray ,_fed _fg .Rectangle ){for _cfcc :=0;_cfcc < _fed .Max .X ;_cfcc ++{for _dggf :=0;_dggf < _fed .Max .Y ;
_dggf ++{_ebdc :=_agd (_fdgdb .RGBAAt (_cfcc ,_dggf ));_abfd .SetGray (_cfcc ,_dggf ,_ebdc );};};};func _dccc (_abbfd *_fg .Gray ,_dgbbg uint8 )*_fg .Gray {_afaa :=_abbfd .Bounds ();_defg :=_fg .NewGray (_afaa );for _gfeg :=0;_gfeg < _afaa .Dx ();_gfeg ++{for _dce :=0;
_dce < _afaa .Dy ();_dce ++{_bbge :=_abbfd .GrayAt (_gfeg ,_dce );_defg .SetGray (_gfeg ,_dce ,_gc .Gray {Y :_dafg (_bbge .Y ,_dgbbg )});};};return _defg ;};func _aecg (_dgfe *_fg .Gray )bool {for _ebcde :=0;_ebcde < len (_dgfe .Pix );_ebcde ++{if !_efdbf (_dgfe .Pix [_ebcde ]){return false ;
};};return true ;};func _egad (_bbgf CMYK ,_cdbb Gray ,_gfgd _fg .Rectangle ){for _eebgg :=0;_eebgg < _gfgd .Max .X ;_eebgg ++{for _fcca :=0;_fcca < _gfgd .Max .Y ;_fcca ++{_dagf :=_gddc (_bbgf .CMYKAt (_eebgg ,_fcca ));_cdbb .SetGray (_eebgg ,_fcca ,_dagf );
};};};func (_gcgcf *Gray16 )Set (x ,y int ,c _gc .Color ){_cbdb :=(y *_gcgcf .BytesPerLine /2+x )*2;if _cbdb +1>=len (_gcgcf .Data ){return ;};_ceea :=_gc .Gray16Model .Convert (c ).(_gc .Gray16 );_gcgcf .Data [_cbdb ],_gcgcf .Data [_cbdb +1]=uint8 (_ceea .Y >>8),uint8 (_ceea .Y &0xff);
};func _cdbg (_gggg NRGBA ,_dfbg Gray ,_eab _fg .Rectangle ){for _aeeg :=0;_aeeg < _eab .Max .X ;_aeeg ++{for _abbe :=0;_abbe < _eab .Max .Y ;_abbe ++{_dfbb :=_dcb (_gggg .NRGBAAt (_aeeg ,_abbe ));_dfbg .SetGray (_aeeg ,_abbe ,_dfbb );};};};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_gc .Gray ,error ){_ggba :=y *bytesPerLine +x >>2;
if _ggba >=len (data ){return _gc .Gray {},_d .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dab :=data [_ggba ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_dab =uint8 (uint32 (LinearInterpolate (float64 (_dab ),0,3.0,decode [0],decode [1]))&3);};return _gc .Gray {Y :_dab *85},nil ;};func _ggea (_dge ,_dfe *Monochrome ,_ggc []byte ,_fag int )(_ggcd error ){var (_eded ,_cgcf ,_dae ,_affc ,_bbdd ,_egf ,_aec ,_dbb int ;
_bbea ,_bgc uint32 ;_aca ,_feg byte ;_caac uint16 ;);_dec :=make ([]byte ,4);_bae :=make ([]byte ,4);for _dae =0;_dae < _dge .Height -1;_dae ,_affc =_dae +2,_affc +1{_eded =_dae *_dge .BytesPerLine ;_cgcf =_affc *_dfe .BytesPerLine ;for _bbdd ,_egf =0,0;
_bbdd < _fag ;_bbdd ,_egf =_bbdd +4,_egf +1{for _aec =0;_aec < 4;_aec ++{_dbb =_eded +_bbdd +_aec ;if _dbb <=len (_dge .Data )-1&&_dbb < _eded +_dge .BytesPerLine {_dec [_aec ]=_dge .Data [_dbb ];}else {_dec [_aec ]=0x00;};_dbb =_eded +_dge .BytesPerLine +_bbdd +_aec ;
if _dbb <=len (_dge .Data )-1&&_dbb < _eded +(2*_dge .BytesPerLine ){_bae [_aec ]=_dge .Data [_dbb ];}else {_bae [_aec ]=0x00;};};_bbea =_fd .BigEndian .Uint32 (_dec );_bgc =_fd .BigEndian .Uint32 (_bae );_bgc &=_bbea ;_bgc &=_bgc <<1;_bgc &=0xaaaaaaaa;
_bbea =_bgc |(_bgc <<7);_aca =byte (_bbea >>24);_feg =byte ((_bbea >>8)&0xff);_dbb =_cgcf +_egf ;if _dbb +1==len (_dfe .Data )-1||_dbb +1>=_cgcf +_dfe .BytesPerLine {_dfe .Data [_dbb ]=_ggc [_aca ];if _ggcd =_dfe .setByte (_dbb ,_ggc [_aca ]);_ggcd !=nil {return _d .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dbb );
};}else {_caac =(uint16 (_ggc [_aca ])<<8)|uint16 (_ggc [_feg ]);if _ggcd =_dfe .setTwoBytes (_dbb ,_caac );_ggcd !=nil {return _d .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dbb );
};_egf ++;};};};return nil ;};func _fafef (_ceae NRGBA ,_eaff RGBA ,_dbaeb _fg .Rectangle ){for _fega :=0;_fega < _dbaeb .Max .X ;_fega ++{for _agbbd :=0;_agbbd < _dbaeb .Max .Y ;_agbbd ++{_dbcc :=_ceae .NRGBAAt (_fega ,_agbbd );_eaff .SetRGBA (_fega ,_agbbd ,_bfb (_dbcc ));
};};};func _gca (_fdf ,_db *Monochrome )(_cgcb error ){_gaee :=_db .BytesPerLine ;_cd :=_fdf .BytesPerLine ;_eec :=_db .BytesPerLine *4-_fdf .BytesPerLine ;var (_ae ,_eb byte ;_cbb uint32 ;_fca ,_de ,_cae ,_ef ,_ab ,_dc ,_dgc int ;);for _cae =0;_cae < _db .Height ;
_cae ++{_fca =_cae *_gaee ;_de =4*_cae *_cd ;for _ef =0;_ef < _gaee ;_ef ++{_ae =_db .Data [_fca +_ef ];_cbb =_ad [_ae ];_dc =_de +_ef *4;if _eec !=0&&(_ef +1)*4> _fdf .BytesPerLine {for _ab =_eec ;_ab > 0;_ab --{_eb =byte ((_cbb >>uint (_ab *8))&0xff);
_dgc =_dc +(_eec -_ab );if _cgcb =_fdf .setByte (_dgc ,_eb );_cgcb !=nil {return _cgcb ;};};}else if _cgcb =_fdf .setFourBytes (_dc ,_cbb );_cgcb !=nil {return _cgcb ;};if _cgcb =_fdf .setFourBytes (_de +_ef *4,_ad [_db .Data [_fca +_ef ]]);_cgcb !=nil {return _cgcb ;
};};for _ab =1;_ab < 4;_ab ++{for _ef =0;_ef < _cd ;_ef ++{if _cgcb =_fdf .setByte (_de +_ab *_cd +_ef ,_fdf .Data [_de +_ef ]);_cgcb !=nil {return _cgcb ;};};};};return nil ;};var _ RGBA =&RGBA32 {};func (_fadg *Gray4 )Set (x ,y int ,c _gc .Color ){if x >=_fadg .Width ||y >=_fadg .Height {return ;
};_dgae :=Gray4Model .Convert (c ).(_gc .Gray );_fadg .setGray (x ,y ,_dgae );};type NRGBA16 struct{ImageBase };func _agbb (_gcffa ,_bfbfc ,_gbge byte )byte {return (_gcffa &^(_gbge ))|(_bfbfc &_gbge )};var _ Image =&Gray8 {};func (_fdcg *NRGBA16 )Set (x ,y int ,c _gc .Color ){_dfbd :=y *_fdcg .BytesPerLine +x *3/2;
if _dfbd +1>=len (_fdcg .Data ){return ;};_begc :=NRGBA16Model .Convert (c ).(_gc .NRGBA );_fdcg .setNRGBA (x ,y ,_dfbd ,_begc );};func (_acge *NRGBA16 )ColorAt (x ,y int )(_gc .Color ,error ){return ColorAtNRGBA16 (x ,y ,_acge .Width ,_acge .BytesPerLine ,_acge .Data ,_acge .Alpha ,_acge .Decode );
};func (_fde monochromeModel )Convert (c _gc .Color )_gc .Color {_aab :=_gc .GrayModel .Convert (c ).(_gc .Gray );return _edae (_aab ,_fde );};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;
BytesPerLine int ;};func _egfe (_agaa *_fg .NYCbCrA ,_acgfa NRGBA ,_cebf _fg .Rectangle ){for _abdc :=0;_abdc < _cebf .Max .X ;_abdc ++{for _ccg :=0;_ccg < _cebf .Max .Y ;_ccg ++{_fdae :=_agaa .NYCbCrAAt (_abdc ,_ccg );_acgfa .SetNRGBA (_abdc ,_ccg ,_cea (_fdae ));
};};};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_gc .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );
case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_d .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func _dggce (_bba _gc .NRGBA )_gc .Gray {var _edg _gc .NRGBA ;if _bba ==_edg {return _gc .Gray {Y :0xff};};_eeeb ,_edad ,_ggb ,_ :=_bba .RGBA ();_acaf :=(19595*_eeeb +38470*_edad +7471*_ggb +1<<15)>>24;return _gc .Gray {Y :uint8 (_acaf )};};func _bdc (_ade _gc .NRGBA )_gc .CMYK {_fggd ,_adcc ,_cffd ,_ :=_ade .RGBA ();
_cefa ,_faa ,_fgd ,_feb :=_gc .RGBToCMYK (uint8 (_fggd >>8),uint8 (_adcc >>8),uint8 (_cffd >>8));return _gc .CMYK {C :_cefa ,M :_faa ,Y :_fgd ,K :_feb };};func (_cacd *Gray4 )setGray (_cbdc int ,_afgb int ,_ccf _gc .Gray ){_faaf :=_afgb *_cacd .BytesPerLine ;
_fdfa :=_faaf +(_cbdc >>1);if _fdfa >=len (_cacd .Data ){return ;};_ffa :=_ccf .Y >>4;_cacd .Data [_fdfa ]=(_cacd .Data [_fdfa ]&(^(0xf0>>uint (4*(_cbdc &1)))))|(_ffa <<uint (4-4*(_cbdc &1)));};func _fgdf (_fcg _gc .RGBA )_gc .CMYK {_gbda ,_dgbc ,_ffc ,_gbdaf :=_gc .RGBToCMYK (_fcg .R ,_fcg .G ,_fcg .B );
return _gc .CMYK {C :_gbda ,M :_dgbc ,Y :_ffc ,K :_gbdaf };};func _ecb ()(_gb [256]uint64 ){for _dbde :=0;_dbde < 256;_dbde ++{if _dbde &0x01!=0{_gb [_dbde ]|=0xff;};if _dbde &0x02!=0{_gb [_dbde ]|=0xff00;};if _dbde &0x04!=0{_gb [_dbde ]|=0xff0000;};if _dbde &0x08!=0{_gb [_dbde ]|=0xff000000;
};if _dbde &0x10!=0{_gb [_dbde ]|=0xff00000000;};if _dbde &0x20!=0{_gb [_dbde ]|=0xff0000000000;};if _dbde &0x40!=0{_gb [_dbde ]|=0xff000000000000;};if _dbde &0x80!=0{_gb [_dbde ]|=0xff00000000000000;};};return _gb ;};func _ce (_bf *Monochrome ,_cgc int )(*Monochrome ,error ){if _bf ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cgc ==1{return _bf .copy (),nil ;};if !IsPowerOf2 (uint (_cgc )){return nil ,_d .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_cgc );
};_dd :=_egc (_cgc );return _eg (_bf ,_cgc ,_dd );};func (_edag *NRGBA32 )Validate ()error {if len (_edag .Data )!=3*_edag .Width *_edag .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _bccg (_cbgfa Gray ,_egcg RGBA ,_fecef _fg .Rectangle ){for _bggd :=0;_bggd < _fecef .Max .X ;_bggd ++{for _fccae :=0;_fccae < _fecef .Max .Y ;_fccae ++{_ceeb :=_cbgfa .GrayAt (_bggd ,_fccae );_egcg .SetRGBA (_bggd ,_fccae ,_fgf (_ceeb ));
};};};func (_bffa *Gray16 )ColorAt (x ,y int )(_gc .Color ,error ){return ColorAtGray16BPC (x ,y ,_bffa .BytesPerLine ,_bffa .Data ,_bffa .Decode );};func (_bafe *NRGBA16 )At (x ,y int )_gc .Color {_cggb ,_ :=_bafe .ColorAt (x ,y );return _cggb };func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_gc .Gray16 ,error ){_ebced :=(y *bytesPerLine /2+x )*2;
if _ebced +1>=len (data ){return _gc .Gray16 {},_d .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fcee :=uint16 (data [_ebced ])<<8|uint16 (data [_ebced +1]);if len (decode )==2{_fcee =uint16 (uint64 (LinearInterpolate (float64 (_fcee ),0,65535,decode [0],decode [1])));};return _gc .Gray16 {Y :_fcee },nil ;};type monochromeModel uint8 ;func _cce ()(_dfeb []byte ){_dfeb =make ([]byte ,256);
for _dcgd :=0;_dcgd < 256;_dcgd ++{_cee :=byte (_dcgd );_dfeb [_cee ]=(_cee &0x01)|((_cee &0x04)>>1)|((_cee &0x10)>>2)|((_cee &0x40)>>3)|((_cee &0x02)<<3)|((_cee &0x08)<<2)|((_cee &0x20)<<1)|(_cee &0x80);};return _dfeb ;};func _dfgg (_geed ,_abeg NRGBA ,_ece _fg .Rectangle ){for _dddg :=0;
_dddg < _ece .Max .X ;_dddg ++{for _dbgg :=0;_dbgg < _ece .Max .Y ;_dbgg ++{_abeg .SetNRGBA (_dddg ,_dbgg ,_geed .NRGBAAt (_dddg ,_dbgg ));};};};func (_bgcd *Gray8 )Validate ()error {if len (_bgcd .Data )!=_bgcd .Height *_bgcd .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_eaed *Gray2 )Validate ()error {if len (_eaed .Data )!=_eaed .Height *_eaed .BytesPerLine {return ErrInvalidImage ;};return nil ;};var (MonochromeConverter =ConverterFunc (_egac );Gray2Converter =ConverterFunc (_cfdg );Gray4Converter =ConverterFunc (_egdb );
GrayConverter =ConverterFunc (_afgfa );Gray16Converter =ConverterFunc (_gbba );NRGBA16Converter =ConverterFunc (_bbb );NRGBAConverter =ConverterFunc (_bcbb );NRGBA64Converter =ConverterFunc (_baae );RGBAConverter =ConverterFunc (_fafff );CMYKConverter =ConverterFunc (_ege );
);func (_gbgec *NRGBA32 )At (x ,y int )_gc .Color {_ceef ,_ :=_gbgec .ColorAt (x ,y );return _ceef };func _bag (_faf ,_bee *Monochrome ,_gcfb []byte ,_bgfb int )(_geea error ){var (_ffb ,_dfc ,_debd ,_ebff ,_eaf ,_gddd ,_caa ,_ggd int ;_ddc ,_bga ,_dbg ,_edf uint32 ;
_dbe ,_gacc byte ;_gbe uint16 ;);_gge :=make ([]byte ,4);_cag :=make ([]byte ,4);for _debd =0;_debd < _faf .Height -1;_debd ,_ebff =_debd +2,_ebff +1{_ffb =_debd *_faf .BytesPerLine ;_dfc =_ebff *_bee .BytesPerLine ;for _eaf ,_gddd =0,0;_eaf < _bgfb ;_eaf ,_gddd =_eaf +4,_gddd +1{for _caa =0;
_caa < 4;_caa ++{_ggd =_ffb +_eaf +_caa ;if _ggd <=len (_faf .Data )-1&&_ggd < _ffb +_faf .BytesPerLine {_gge [_caa ]=_faf .Data [_ggd ];}else {_gge [_caa ]=0x00;};_ggd =_ffb +_faf .BytesPerLine +_eaf +_caa ;if _ggd <=len (_faf .Data )-1&&_ggd < _ffb +(2*_faf .BytesPerLine ){_cag [_caa ]=_faf .Data [_ggd ];
}else {_cag [_caa ]=0x00;};};_ddc =_fd .BigEndian .Uint32 (_gge );_bga =_fd .BigEndian .Uint32 (_cag );_dbg =_ddc &_bga ;_dbg |=_dbg <<1;_edf =_ddc |_bga ;_edf &=_edf <<1;_bga =_dbg |_edf ;_bga &=0xaaaaaaaa;_ddc =_bga |(_bga <<7);_dbe =byte (_ddc >>24);
_gacc =byte ((_ddc >>8)&0xff);_ggd =_dfc +_gddd ;if _ggd +1==len (_bee .Data )-1||_ggd +1>=_dfc +_bee .BytesPerLine {if _geea =_bee .setByte (_ggd ,_gcfb [_dbe ]);_geea !=nil {return _d .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ggd );};}else {_gbe =(uint16 (_gcfb [_dbe ])<<8)|uint16 (_gcfb [_gacc ]);
if _geea =_bee .setTwoBytes (_ggd ,_gbe );_geea !=nil {return _d .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ggd );
};_gddd ++;};};};return nil ;};func (_cdca *ImageBase )getByte (_ccfg int )(byte ,error ){if _ccfg > len (_cdca .Data )-1||_ccfg < 0{return 0,_d .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_ccfg );
};return _cdca .Data [_ccfg ],nil ;};type ColorConverter interface{Convert (_cac _fg .Image )(Image ,error );};func (_fcgc *Gray16 )GrayAt (x ,y int )_gc .Gray {_fage ,_ :=_fcgc .ColorAt (x ,y );return _gc .Gray {Y :uint8 (_fage .(_gc .Gray16 ).Y >>8)};
};func (_egb *CMYK32 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_egb .Width ,Y :_egb .Height }};};var _ NRGBA =&NRGBA32 {};func (_cdgd *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_cdgd .copy ()}};func (_bcggf *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_bcggf .copy ()}};
func _egdb (_fdgd _fg .Image )(Image ,error ){if _ecf ,_baa :=_fdgd .(*Gray4 );_baa {return _ecf .Copy (),nil ;};_gcgb :=_fdgd .Bounds ();_ffgf ,_ceeca :=NewImage (_gcgb .Max .X ,_gcgb .Max .Y ,4,1,nil ,nil ,nil );if _ceeca !=nil {return nil ,_ceeca ;};
_eage (_fdgd ,_ffgf ,_gcgb );return _ffgf ,nil ;};func _bfb (_bda _gc .NRGBA )_gc .RGBA {_edee ,_aad ,_bcd ,_agf :=_bda .RGBA ();return _gc .RGBA {R :uint8 (_edee >>8),G :uint8 (_aad >>8),B :uint8 (_bcd >>8),A :uint8 (_agf >>8)};};func (_gfbb *RGBA32 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_gfbb .Width ,Y :_gfbb .Height }};
};func (_afgf *Monochrome )setGray (_cdf int ,_egfa _gc .Gray ,_dcge int ){if _egfa .Y ==0{_afgf .clearBit (_dcge ,_cdf );}else {_afgf .setGrayBit (_dcge ,_cdf );};};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _gd .Abs (xmax -xmin )< 0.000001{return ymin ;
};_cced :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _cced ;};func _deef (_bca _gc .Gray )_gc .Gray {_bca .Y >>=4;_bca .Y |=_bca .Y <<4;return _bca };func (_fcfe *Monochrome )getBit (_befg ,_cegb int )uint8 {return _fcfe .Data [_befg +(_cegb >>3)]>>uint (7-(_cegb &7))&1;
};func (_bddg *NRGBA16 )NRGBAAt (x ,y int )_gc .NRGBA {_fbgb ,_ :=ColorAtNRGBA16 (x ,y ,_bddg .Width ,_bddg .BytesPerLine ,_bddg .Data ,_bddg .Alpha ,_bddg .Decode );return _fbgb ;};func (_cafa *NRGBA64 )SetNRGBA64 (x ,y int ,c _gc .NRGBA64 ){_bfgd :=(y *_cafa .Width +x )*2;
_ceecda :=_bfgd *3;if _ceecda +5>=len (_cafa .Data ){return ;};_cafa .setNRGBA64 (_ceecda ,c ,_bfgd );};func (_bgddc *NRGBA64 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_bgddc .Width ,Y :_bgddc .Height }};};var (Gray2Model =_gc .ModelFunc (_aadb );
Gray4Model =_gc .ModelFunc (_ffad );NRGBA16Model =_gc .ModelFunc (_fcba ););func (_bbcc *ImageBase )setByte (_cbdg int ,_gebb byte )error {if _cbdg > len (_bbcc .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bbcc .Data [_cbdg ]=_gebb ;return nil ;};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_gc .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_d .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_dfb *Gray2 )ColorModel ()_gc .Model {return Gray2Model };func _effb (_dfacaf CMYK ,_bbff NRGBA ,_gaff _fg .Rectangle ){for _aada :=0;_aada < _gaff .Max .X ;_aada ++{for _ebcc :=0;_ebcc < _gaff .Max .Y ;_ebcc ++{_eddd :=_dfacaf .CMYKAt (_aada ,_ebcc );
_bbff .SetNRGBA (_aada ,_ebcc ,_ebfa (_eddd ));};};};func (_gfee *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_gfee .copy ()}};func _gcf (_ca ,_ddd *Monochrome )(_ga error ){_gae :=_ddd .BytesPerLine ;_ee :=_ca .BytesPerLine ;var (_cba byte ;_gac uint16 ;
_dg ,_ge ,_bb ,_fga ,_dga int ;);for _bb =0;_bb < _ddd .Height ;_bb ++{_dg =_bb *_gae ;_ge =2*_bb *_ee ;for _fga =0;_fga < _gae ;_fga ++{_cba =_ddd .Data [_dg +_fga ];_gac =_dda [_cba ];_dga =_ge +_fga *2;if _ca .BytesPerLine !=_ddd .BytesPerLine *2&&(_fga +1)*2> _ca .BytesPerLine {_ga =_ca .setByte (_dga ,byte (_gac >>8));
}else {_ga =_ca .setTwoBytes (_dga ,_gac );};if _ga !=nil {return _ga ;};};for _fga =0;_fga < _ee ;_fga ++{_dga =_ge +_ee +_fga ;_cba =_ca .Data [_ge +_fga ];if _ga =_ca .setByte (_dga ,_cba );_ga !=nil {return _ga ;};};};return nil ;};func _fafff (_feab _fg .Image )(Image ,error ){if _eaebg ,_bfgc :=_feab .(*RGBA32 );
_bfgc {return _eaebg .Copy (),nil ;};_dged ,_eaaf ,_accg :=_dead (_feab ,1);_cefb :=&RGBA32 {ImageBase :NewImageBase (_dged .Max .X ,_dged .Max .Y ,8,3,nil ,_accg ,nil )};_cfdd (_feab ,_cefb ,_dged );if len (_accg )!=0&&!_eaaf {if _gdaa :=_bcaf (_accg ,_cefb );
_gdaa !=nil {return nil ,_gdaa ;};};return _cefb ,nil ;};func _gcbf (_daa _gc .NRGBA64 )_gc .NRGBA {return _gc .NRGBA {R :uint8 (_daa .R >>8),G :uint8 (_daa .G >>8),B :uint8 (_daa .B >>8),A :uint8 (_daa .A >>8)};};func (_gabf *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_ccb :=_eeebe (uint (factor ));
if !IsPowerOf2 (uint (factor )){_ccb ++;};_cafe :=make ([]int ,_ccb );for _dcf :=range _cafe {_cafe [_dcf ]=4;};_efc ,_geag :=_ccd (_gabf ,_cafe ...);if _geag !=nil {return nil ,_geag ;};return _efc ,nil ;};type colorConverter struct{_bcgg func (_cbf _fg .Image )(Image ,error );
};func (_ecd *Gray4 )GrayAt (x ,y int )_gc .Gray {_dfaf ,_ :=ColorAtGray4BPC (x ,y ,_ecd .BytesPerLine ,_ecd .Data ,_ecd .Decode );return _dfaf ;};func (_bdbe *ImageBase )MakeAlpha (){_bdbe .newAlpha ()};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_gc .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );
case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );
default:return nil ,_d .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func _egbd (_egcbg CMYK ,_aafbd RGBA ,_eaedb _fg .Rectangle ){for _cbcg :=0;_cbcg < _eaedb .Max .X ;_cbcg ++{for _afdb :=0;_afdb < _eaedb .Max .Y ;_afdb ++{_bdbc :=_egcbg .CMYKAt (_cbcg ,_afdb );_aafbd .SetRGBA (_cbcg ,_afdb ,_efgc (_bdbc ));};};};
func (_fbe *Monochrome )AddPadding ()(_acff error ){if _bce :=((_fbe .Width *_fbe .Height )+7)>>3;len (_fbe .Data )< _bce {return _d .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_fbe .Data ),_bce );
};_adb :=_fbe .Width %8;if _adb ==0{return nil ;};_eag :=_fbe .Width /8;_efdb :=_cf .NewReader (_fbe .Data );_dee :=make ([]byte ,_fbe .Height *_fbe .BytesPerLine );_fgdc :=_cf .NewWriterMSB (_dee );_fgfc :=make ([]byte ,_eag );var (_bdfa int ;_aeb uint64 ;
);for _bdfa =0;_bdfa < _fbe .Height ;_bdfa ++{if _ ,_acff =_efdb .Read (_fgfc );_acff !=nil {return _acff ;};if _ ,_acff =_fgdc .Write (_fgfc );_acff !=nil {return _acff ;};if _aeb ,_acff =_efdb .ReadBits (byte (_adb ));_acff !=nil {return _acff ;};if _acff =_fgdc .WriteByte (byte (_aeb )<<uint (8-_adb ));
_acff !=nil {return _acff ;};};_fbe .Data =_fgdc .Data ();return nil ;};func (_fee *Monochrome )ColorAt (x ,y int )(_gc .Color ,error ){return ColorAtGray1BPC (x ,y ,_fee .BytesPerLine ,_fee .Data ,_fee .Decode );};type RasterOperator int ;var _ _fg .Image =&NRGBA16 {};
func (_ffbbe *Gray8 )ColorAt (x ,y int )(_gc .Color ,error ){return ColorAtGray8BPC (x ,y ,_ffbbe .BytesPerLine ,_ffbbe .Data ,_ffbbe .Decode );};func (_fad *monochromeThresholdConverter )Convert (img _fg .Image )(Image ,error ){if _dded ,_dcgc :=img .(*Monochrome );
_dcgc {return _dded .Copy (),nil ;};_cbe :=img .Bounds ();_dgbf ,_ecbfd :=NewImage (_cbe .Max .X ,_cbe .Max .Y ,1,1,nil ,nil ,nil );if _ecbfd !=nil {return nil ,_ecbfd ;};_dgbf .(*Monochrome ).ModelThreshold =_fad .Threshold ;for _fggg :=0;_fggg < _cbe .Max .X ;
_fggg ++{for _acbf :=0;_acbf < _cbe .Max .Y ;_acbf ++{_efb :=img .At (_fggg ,_acbf );_dgbf .Set (_fggg ,_acbf ,_efb );};};return _dgbf ,nil ;};func (_dbag *Gray8 )Set (x ,y int ,c _gc .Color ){_aecd :=y *_dbag .BytesPerLine +x ;if _aecd > len (_dbag .Data )-1{return ;
};_ffbac :=_gc .GrayModel .Convert (c );_dbag .Data [_aecd ]=_ffbac .(_gc .Gray ).Y ;};func _fdgcf (_aaa RGBA ,_ededf NRGBA ,_fbacd _fg .Rectangle ){for _aeage :=0;_aeage < _fbacd .Max .X ;_aeage ++{for _fafgg :=0;_fafgg < _fbacd .Max .Y ;_fafgg ++{_gfea :=_aaa .RGBAAt (_aeage ,_fafgg );
_ededf .SetNRGBA (_aeage ,_fafgg ,_eggc (_gfea ));};};};func (_eaeeb *NRGBA64 )ColorAt (x ,y int )(_gc .Color ,error ){return ColorAtNRGBA64 (x ,y ,_eaeeb .Width ,_eaeeb .Data ,_eaeeb .Alpha ,_eaeeb .Decode );};func _ege (_fcb _fg .Image )(Image ,error ){if _aag ,_dde :=_fcb .(*CMYK32 );
_dde {return _aag .Copy (),nil ;};_daed :=_fcb .Bounds ();_adc ,_ccc :=NewImage (_daed .Max .X ,_daed .Max .Y ,8,4,nil ,nil ,nil );if _ccc !=nil {return nil ,_ccc ;};switch _gegc :=_fcb .(type ){case CMYK :_cdaa (_gegc ,_adc .(CMYK ),_daed );case Gray :_cef (_gegc ,_adc .(CMYK ),_daed );
case NRGBA :_gabe (_gegc ,_adc .(CMYK ),_daed );case RGBA :_egcd (_gegc ,_adc .(CMYK ),_daed );default:_abcb (_fcb ,_adc ,_daed );};return _adc ,nil ;};func _ebfa (_gagg _gc .CMYK )_gc .NRGBA {_fddb ,_dgcf ,_fdab :=_gc .CMYKToRGB (_gagg .C ,_gagg .M ,_gagg .Y ,_gagg .K );
return _gc .NRGBA {R :_fddb ,G :_dgcf ,B :_fdab ,A :0xff};};func _baae (_bffab _fg .Image )(Image ,error ){if _fbaa ,_acec :=_bffab .(*NRGBA64 );_acec {return _fbaa .Copy (),nil ;};_ecdg ,_dacb ,_eeab :=_dead (_bffab ,2);_bgded ,_bdfb :=NewImage (_ecdg .Max .X ,_ecdg .Max .Y ,16,3,nil ,_eeab ,nil );
if _bdfb !=nil {return nil ,_bdfb ;};_aeae (_bffab ,_bgded ,_ecdg );if len (_eeab )!=0&&!_dacb {if _bdag :=_bcaf (_eeab ,_bgded );_bdag !=nil {return nil ,_bdag ;};};return _bgded ,nil ;};func FromGoImage (i _fg .Image )(Image ,error ){switch _dccgg :=i .(type ){case Image :return _dccgg .Copy (),nil ;
case Gray :return GrayConverter .Convert (i );case *_fg .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_fg .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};
};func _fcc (_df *Monochrome ,_dfd ,_dbd int )(*Monochrome ,error ){if _df ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dfd <=0||_dbd <=0{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _dfd ==_dbd {if _dfd ==1{return _df .copy (),nil ;};if _dfd ==2||_dfd ==4||_dfd ==8{_bcb ,_ggf :=_ce (_df ,_dfd );if _ggf !=nil {return nil ,_ggf ;};return _bcb ,nil ;};};_be :=_dfd *_df .Width ;_gdd :=_dbd *_df .Height ;_cfd :=_dgg (_be ,_gdd );_geg :=_cfd .BytesPerLine ;
var (_da ,_cgdf ,_bg ,_af ,_fe int ;_ff byte ;_gfb error ;);for _cgdf =0;_cgdf < _df .Height ;_cgdf ++{_da =_dbd *_cgdf *_geg ;for _bg =0;_bg < _df .Width ;_bg ++{if _cfba :=_df .getBitAt (_bg ,_cgdf );_cfba {_fe =_dfd *_bg ;for _af =0;_af < _dfd ;_af ++{_cfd .setIndexedBit (_da *8+_fe +_af );
};};};for _af =1;_af < _dbd ;_af ++{_bef :=_da +_af *_geg ;for _dgcd :=0;_dgcd < _geg ;_dgcd ++{if _ff ,_gfb =_cfd .getByte (_da +_dgcd );_gfb !=nil {return nil ,_gfb ;};if _gfb =_cfd .setByte (_bef +_dgcd ,_ff );_gfb !=nil {return nil ,_gfb ;};};};};return _cfd ,nil ;
};func _ffcc (_abdfb *Monochrome ,_ccbf ,_bfbd ,_cgcg ,_gdac int ,_fcfc RasterOperator ,_eafe *Monochrome ,_bdd ,_cdaae int )error {if _abdfb ==nil {return _c .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _fcfc ==PixDst {return nil ;};switch _fcfc {case PixClr ,PixSet ,PixNotDst :_bgdd (_abdfb ,_ccbf ,_bfbd ,_cgcg ,_gdac ,_fcfc );return nil ;};if _eafe ==nil {_b .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _egacb :=_dfda (_abdfb ,_ccbf ,_bfbd ,_cgcg ,_gdac ,_fcfc ,_eafe ,_bdd ,_cdaae );_egacb !=nil {return _egacb ;};return nil ;};func (_bbef *Gray8 )ColorModel ()_gc .Model {return _gc .GrayModel };
type Gray interface{GrayAt (_ggdg ,_aedg int )_gc .Gray ;SetGray (_cgfa ,_dcbe int ,_abfc _gc .Gray );};func (_bge *CMYK32 )SetCMYK (x ,y int ,c _gc .CMYK ){_gdaff :=4*(y *_bge .Width +x );if _gdaff +3>=len (_bge .Data ){return ;};_bge .Data [_gdaff ]=c .C ;
_bge .Data [_gdaff +1]=c .M ;_bge .Data [_gdaff +2]=c .Y ;_bge .Data [_gdaff +3]=c .K ;};func _cfdg (_bfda _fg .Image )(Image ,error ){if _adfd ,_cfbfb :=_bfda .(*Gray2 );_cfbfb {return _adfd .Copy (),nil ;};_gfab :=_bfda .Bounds ();_fafe ,_ggeaf :=NewImage (_gfab .Max .X ,_gfab .Max .Y ,2,1,nil ,nil ,nil );
if _ggeaf !=nil {return nil ,_ggeaf ;};_eage (_bfda ,_fafe ,_gfab );return _fafe ,nil ;};var _ Image =&Gray16 {};func _gabe (_def NRGBA ,_ggcdf CMYK ,_ag _fg .Rectangle ){for _gcb :=0;_gcb < _ag .Max .X ;_gcb ++{for _bgbb :=0;_bgbb < _ag .Max .Y ;_bgbb ++{_abf :=_def .NRGBAAt (_gcb ,_bgbb );
_ggcdf .SetCMYK (_gcb ,_bgbb ,_bdc (_abf ));};};};func _bcbb (_badf _fg .Image )(Image ,error ){if _faaad ,_degg :=_badf .(*NRGBA32 );_degg {return _faaad .Copy (),nil ;};_cbed ,_beb ,_ggcee :=_dead (_badf ,1);_cddg ,_dgaa :=NewImage (_cbed .Max .X ,_cbed .Max .Y ,8,3,nil ,_ggcee ,nil );
if _dgaa !=nil {return nil ,_dgaa ;};_cfdea (_badf ,_cddg ,_cbed );if len (_ggcee )!=0&&!_beb {if _ecgc :=_bcaf (_ggcee ,_cddg );_ecgc !=nil {return nil ,_ecgc ;};};return _cddg ,nil ;};func (_gbgf *Monochrome )At (x ,y int )_gc .Color {_ggfc ,_ :=_gbgf .ColorAt (x ,y );
return _ggfc };var _ Image =&Monochrome {};func (_gfff *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _ddfb bool ;_gffe :=scale ;if scale < 1{_gffe =1/scale ;_ddfb =true ;};_cbfb :=NextPowerOf2 (uint (_gffe ));if InDelta (float64 (_cbfb ),_gffe ,0.001){if _ddfb {return _gfff .ReduceBinary (_gffe );
};return _gfff .ExpandBinary (int (_cbfb ));};_fgfg :=int (_gd .RoundToEven (float64 (_gfff .Width )*scale ));_gfg :=int (_gd .RoundToEven (float64 (_gfff .Height )*scale ));return _gfff .ScaleLow (_fgfg ,_gfg );};func _cef (_fgag Gray ,_gdf CMYK ,_cff _fg .Rectangle ){for _cgaf :=0;
_cgaf < _cff .Max .X ;_cgaf ++{for _gdg :=0;_gdg < _cff .Max .Y ;_gdg ++{_dfac :=_fgag .GrayAt (_cgaf ,_gdg );_gdf .SetCMYK (_cgaf ,_gdg ,_dcba (_dfac ));};};};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_gc .NRGBA ,error ){_agdf :=y *bytesPerLine +x *3/2;
if _agdf +1>=len (data ){return _gc .NRGBA {},_dede (x ,y );};const (_aabg =0xf;_bdec =uint8 (0xff););_edaf :=_bdec ;if alpha !=nil {_gaec :=y *BytesPerLine (width ,4,1);if _gaec < len (alpha ){if x %2==0{_edaf =(alpha [_gaec ]>>uint (4))&_aabg ;}else {_edaf =alpha [_gaec ]&_aabg ;
};_edaf |=_edaf <<4;};};var _cbafe ,_fbag ,_ddde uint8 ;if x *3%2==0{_cbafe =(data [_agdf ]>>uint (4))&_aabg ;_fbag =data [_agdf ]&_aabg ;_ddde =(data [_agdf +1]>>uint (4))&_aabg ;}else {_cbafe =data [_agdf ]&_aabg ;_fbag =(data [_agdf +1]>>uint (4))&_aabg ;
_ddde =data [_agdf +1]&_aabg ;};if len (decode )==6{_cbafe =uint8 (uint32 (LinearInterpolate (float64 (_cbafe ),0,15,decode [0],decode [1]))&0xf);_fbag =uint8 (uint32 (LinearInterpolate (float64 (_fbag ),0,15,decode [2],decode [3]))&0xf);_ddde =uint8 (uint32 (LinearInterpolate (float64 (_ddde ),0,15,decode [4],decode [5]))&0xf);
};return _gc .NRGBA {R :(_cbafe <<4)|(_cbafe &0xf),G :(_fbag <<4)|(_fbag &0xf),B :(_ddde <<4)|(_ddde &0xf),A :_edaf },nil ;};func (_dfaca *Gray4 )Validate ()error {if len (_dfaca .Data )!=_dfaca .Height *_dfaca .BytesPerLine {return ErrInvalidImage ;};
return nil ;};func (_dbeb *RGBA32 )Validate ()error {if len (_dbeb .Data )!=3*_dbeb .Width *_dbeb .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _fcae (_efe _gc .NRGBA64 )_gc .RGBA {_gcgc ,_cage ,_fcab ,_agfb :=_efe .RGBA ();return _gc .RGBA {R :uint8 (_gcgc >>8),G :uint8 (_cage >>8),B :uint8 (_fcab >>8),A :uint8 (_agfb >>8)};};type Image interface{_f .Image ;Base ()*ImageBase ;
Copy ()Image ;Pix ()[]byte ;ColorAt (_eabb ,_ebbf int )(_gc .Color ,error );Validate ()error ;};func (_gffef *Gray16 )Base ()*ImageBase {return &_gffef .ImageBase };func _gbae (_dfacg nrgba64 ,_fcafe RGBA ,_ageg _fg .Rectangle ){for _cacef :=0;_cacef < _ageg .Max .X ;
_cacef ++{for _dbce :=0;_dbce < _ageg .Max .Y ;_dbce ++{_ggead :=_dfacg .NRGBA64At (_cacef ,_dbce );_fcafe .SetRGBA (_cacef ,_dbce ,_fcae (_ggead ));};};};func _acged (_ffde *_fg .Gray16 ,_gddea uint8 )*_fg .Gray {_begbd :=_ffde .Bounds ();_fdfab :=_fg .NewGray (_begbd );
for _cfee :=0;_cfee < _begbd .Dx ();_cfee ++{for _fada :=0;_fada < _begbd .Dy ();_fada ++{_bdfd :=_ffde .Gray16At (_cfee ,_fada );_fdfab .SetGray (_cfee ,_fada ,_gc .Gray {Y :_dafg (uint8 (_bdfd .Y /256),_gddea )});};};return _fdfab ;};func (_ace *NRGBA64 )ColorModel ()_gc .Model {return _gc .NRGBA64Model };
func (_dcbf *Monochrome )clearBit (_befbe ,_fddbb int ){_dcbf .Data [_befbe ]&=^(0x80>>uint (_fddbb &7));};func _gbba (_ffbd _fg .Image )(Image ,error ){if _bdb ,_cdfb :=_ffbd .(*Gray16 );_cdfb {return _bdb .Copy (),nil ;};_cgaa :=_ffbd .Bounds ();_debf ,_cfag :=NewImage (_cgaa .Max .X ,_cgaa .Max .Y ,16,1,nil ,nil ,nil );
if _cfag !=nil {return nil ,_cfag ;};_eage (_ffbd ,_debf ,_cgaa );return _debf ,nil ;};func (_aebf *NRGBA16 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_aebf .Width ,Y :_aebf .Height }};};func IsGrayImgBlackAndWhite (i *_fg .Gray )bool {return _aecg (i )};
func ImgToBinary (i _fg .Image ,threshold uint8 )*_fg .Gray {switch _fbaaa :=i .(type ){case *_fg .Gray :if _aecg (_fbaaa ){return _fbaaa ;};return _dccc (_fbaaa ,threshold );case *_fg .Gray16 :return _acged (_fbaaa ,threshold );default:return _ead (_fbaaa ,threshold );
};};func _ead (_bbgeb _fg .Image ,_aacb uint8 )*_fg .Gray {_cgae :=_bbgeb .Bounds ();_abfa :=_fg .NewGray (_cgae );var (_bgdf _gc .Color ;_deae _gc .Gray ;);for _baad :=0;_baad < _cgae .Max .X ;_baad ++{for _ccaeg :=0;_ccaeg < _cgae .Max .Y ;_ccaeg ++{_bgdf =_bbgeb .At (_baad ,_ccaeg );
_abfa .Set (_baad ,_ccaeg ,_bgdf );_deae =_abfa .GrayAt (_baad ,_ccaeg );_abfa .SetGray (_baad ,_ccaeg ,_gc .Gray {Y :_dafg (_deae .Y ,_aacb )});};};return _abfa ;};func _egdec (_gbgd nrgba64 ,_bdcc NRGBA ,_cbbf _fg .Rectangle ){for _aaab :=0;_aaab < _cbbf .Max .X ;
_aaab ++{for _affa :=0;_affa < _cbbf .Max .Y ;_affa ++{_efaa :=_gbgd .NRGBA64At (_aaab ,_affa );_bdcc .SetNRGBA (_aaab ,_affa ,_gcbf (_efaa ));};};};var _ Image =&Gray2 {};func (_badc *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_badc .copy ()}};func _bgff (_edc _gc .NRGBA64 )_gc .Gray {var _cceg _gc .NRGBA64 ;
if _edc ==_cceg {return _gc .Gray {Y :0xff};};_bfdf ,_cbc ,_gdfg ,_ :=_edc .RGBA ();_adge :=(19595*_bfdf +38470*_cbc +7471*_gdfg +1<<15)>>24;return _gc .Gray {Y :uint8 (_adge )};};func (_adgg *NRGBA16 )setNRGBA (_dbea ,_gcgf ,_ggbb int ,_gafc _gc .NRGBA ){if _dbea *3%2==0{_adgg .Data [_ggbb ]=(_gafc .R >>4)<<4|(_gafc .G >>4);
_adgg .Data [_ggbb +1]=(_gafc .B >>4)<<4|(_adgg .Data [_ggbb +1]&0xf);}else {_adgg .Data [_ggbb ]=(_adgg .Data [_ggbb ]&0xf0)|(_gafc .R >>4);_adgg .Data [_ggbb +1]=(_gafc .G >>4)<<4|(_gafc .B >>4);};if _adgg .Alpha !=nil {_fgdcf :=_gcgf *BytesPerLine (_adgg .Width ,4,1);
if _fgdcf < len (_adgg .Alpha ){if _dbea %2==0{_adgg .Alpha [_fgdcf ]=(_gafc .A >>uint (4))<<uint (4)|(_adgg .Alpha [_ggbb ]&0xf);}else {_adgg .Alpha [_fgdcf ]=(_adgg .Alpha [_fgdcf ]&0xf0)|(_gafc .A >>uint (4));};};};};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_d .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_gdc *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_gdc .copy ()}};var _ _fg .Image =&RGBA32 {};func (_ddg *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_ddg .copy ()}};var _ _fg .Image =&Gray2 {};func (_gbdf *ImageBase )copy ()ImageBase {_gfgg :=*_gbdf ;
_gfgg .Data =make ([]byte ,len (_gbdf .Data ));copy (_gfgg .Data ,_gbdf .Data );return _gfgg ;};func (_fdgc *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_c .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_gaef :=_dgg (width ,height );_agff :=make ([]int ,height );_fbbc :=make ([]int ,width );_adf :=float64 (_fdgc .Width )/float64 (width );_cdcg :=float64 (_fdgc .Height )/float64 (height );for _aeg :=0;_aeg < height ;_aeg ++{_agff [_aeg ]=int (_gd .Min (_cdcg *float64 (_aeg )+0.5,float64 (_fdgc .Height -1)));
};for _fbd :=0;_fbd < width ;_fbd ++{_fbbc [_fbd ]=int (_gd .Min (_adf *float64 (_fbd )+0.5,float64 (_fdgc .Width -1)));};_efda :=-1;_edfg :=byte (0);for _gfa :=0;_gfa < height ;_gfa ++{_beg :=_agff [_gfa ]*_fdgc .BytesPerLine ;_afb :=_gfa *_gaef .BytesPerLine ;
for _bcbg :=0;_bcbg < width ;_bcbg ++{_eeff :=_fbbc [_bcbg ];if _eeff !=_efda {_edfg =_fdgc .getBit (_beg ,_eeff );if _edfg !=0{_gaef .setBit (_afb ,_bcbg );};_efda =_eeff ;}else {if _edfg !=0{_gaef .setBit (_afb ,_bcbg );};};};};return _gaef ,nil ;};func (_aeba *RGBA32 )setRGBA (_dadb int ,_dagd _gc .RGBA ){_egaag :=3*_dadb ;
_aeba .Data [_egaag ]=_dagd .R ;_aeba .Data [_egaag +1]=_dagd .G ;_aeba .Data [_egaag +2]=_dagd .B ;if _dadb < len (_aeba .Alpha ){_aeba .Alpha [_dadb ]=_dagd .A ;};};func _dcba (_dbf _gc .Gray )_gc .CMYK {return _gc .CMYK {K :0xff-_dbf .Y }};func (_fbdc *Monochrome )SetGray (x ,y int ,g _gc .Gray ){_eea :=y *_fbdc .BytesPerLine +x >>3;
if _eea > len (_fbdc .Data )-1{return ;};g =_edae (g ,monochromeModel (_fbdc .ModelThreshold ));_fbdc .setGray (x ,g ,_eea );};func (_afac *Monochrome )Set (x ,y int ,c _gc .Color ){_cfca :=y *_afac .BytesPerLine +x >>3;if _cfca > len (_afac .Data )-1{return ;
};_efbf :=_afac .ColorModel ().Convert (c ).(_gc .Gray );_afac .setGray (x ,_efbf ,_cfca );};func (_dgde *Monochrome )GrayAt (x ,y int )_gc .Gray {_beeg ,_ :=ColorAtGray1BPC (x ,y ,_dgde .BytesPerLine ,_dgde .Data ,_dgde .Decode );return _beeg ;};var _ Gray =&Gray8 {};
const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;
PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;
PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_gaa *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_gaa .copy ()}};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;
};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_gc .NRGBA ,error ){_ccaf :=y *width +x ;_gdff :=3*_ccaf ;if _gdff +2>=len (data ){return _gc .NRGBA {},_d .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fafg :=uint8 (0xff);if alpha !=nil &&len (alpha )> _ccaf {_fafg =alpha [_ccaf ];};_fceg ,_gabd ,_acgf :=data [_gdff ],data [_gdff +1],data [_gdff +2];if len (decode )==6{_fceg =uint8 (uint32 (LinearInterpolate (float64 (_fceg ),0,255,decode [0],decode [1]))&0xff);
_gabd =uint8 (uint32 (LinearInterpolate (float64 (_gabd ),0,255,decode [2],decode [3]))&0xff);_acgf =uint8 (uint32 (LinearInterpolate (float64 (_acgf ),0,255,decode [4],decode [5]))&0xff);};return _gc .NRGBA {R :_fceg ,G :_gabd ,B :_acgf ,A :_fafg },nil ;
};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_gc .NRGBA64 ,error ){_fdgg :=(y *width +x )*2;_dggb :=_fdgg *3;if _dggb +5>=len (data ){return _gc .NRGBA64 {},_d .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _fdbc =0xffff;_cbdbb :=uint16 (_fdbc );if alpha !=nil &&len (alpha )> _fdgg +1{_cbdbb =uint16 (alpha [_fdgg ])<<8|uint16 (alpha [_fdgg +1]);};_cfaga :=uint16 (data [_dggb ])<<8|uint16 (data [_dggb +1]);_gdcb :=uint16 (data [_dggb +2])<<8|uint16 (data [_dggb +3]);
_ccbc :=uint16 (data [_dggb +4])<<8|uint16 (data [_dggb +5]);if len (decode )==6{_cfaga =uint16 (uint64 (LinearInterpolate (float64 (_cfaga ),0,65535,decode [0],decode [1]))&_fdbc );_gdcb =uint16 (uint64 (LinearInterpolate (float64 (_gdcb ),0,65535,decode [2],decode [3]))&_fdbc );
_ccbc =uint16 (uint64 (LinearInterpolate (float64 (_ccbc ),0,65535,decode [4],decode [5]))&_fdbc );};return _gc .NRGBA64 {R :_cfaga ,G :_gdcb ,B :_ccbc ,A :_cbdbb },nil ;};func (_ggbad *Gray8 )GrayAt (x ,y int )_gc .Gray {_aga ,_ :=ColorAtGray8BPC (x ,y ,_ggbad .BytesPerLine ,_ggbad .Data ,_ggbad .Decode );
return _aga ;};func (_afc *RGBA32 )Set (x ,y int ,c _gc .Color ){_bfgb :=y *_afc .Width +x ;_feaf :=3*_bfgb ;if _feaf +2>=len (_afc .Data ){return ;};_dbggf :=_gc .RGBAModel .Convert (c ).(_gc .RGBA );_afc .setRGBA (_bfgb ,_dbggf );};func (_debdf *NRGBA64 )setNRGBA64 (_bfcea int ,_aaef _gc .NRGBA64 ,_dgcg int ){_debdf .Data [_bfcea ]=uint8 (_aaef .R >>8);
_debdf .Data [_bfcea +1]=uint8 (_aaef .R &0xff);_debdf .Data [_bfcea +2]=uint8 (_aaef .G >>8);_debdf .Data [_bfcea +3]=uint8 (_aaef .G &0xff);_debdf .Data [_bfcea +4]=uint8 (_aaef .B >>8);_debdf .Data [_bfcea +5]=uint8 (_aaef .B &0xff);if _dgcg +1< len (_debdf .Alpha ){_debdf .Alpha [_dgcg ]=uint8 (_aaef .A >>8);
_debdf .Alpha [_dgcg +1]=uint8 (_aaef .A &0xff);};};func _eeebe (_bfgfe uint )uint {var _gdfgc uint ;for _bfgfe !=0{_bfgfe >>=1;_gdfgc ++;};return _gdfgc -1;};func (_cgfba *Gray2 )Histogram ()(_bgag [256]int ){for _deeb :=0;_deeb < _cgfba .Width ;_deeb ++{for _ebge :=0;
_ebge < _cgfba .Height ;_ebge ++{_bgag [_cgfba .GrayAt (_deeb ,_ebge ).Y ]++;};};return _bgag ;};func _aeae (_dgee _fg .Image ,_baaec Image ,_ggfg _fg .Rectangle ){if _bgab ,_fgfbd :=_dgee .(SMasker );_fgfbd &&_bgab .HasAlpha (){_baaec .(SMasker ).MakeAlpha ();
};_abcb (_dgee ,_baaec ,_ggfg );};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};type Gray16 struct{ImageBase };func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_gc .Gray ,error ){_egdg :=y *bytesPerLine +x ;if _egdg >=len (data ){return _gc .Gray {},_d .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_egaf :=data [_egdg ];if len (decode )==2{_egaf =uint8 (uint32 (LinearInterpolate (float64 (_egaf ),0,255,decode [0],decode [1]))&0xff);};return _gc .Gray {Y :_egaf },nil ;};func (_cfea *NRGBA16 )ColorModel ()_gc .Model {return NRGBA16Model };func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_gc .Gray ,error ){_fcbe :=y *bytesPerLine +x >>3;
if _fcbe >=len (data ){return _gc .Gray {},_d .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cde :=data [_fcbe ]>>uint (7-(x &7))&1;if len (decode )==2{_cde =uint8 (LinearInterpolate (float64 (_cde ),0.0,1.0,decode [0],decode [1]))&1;};return _gc .Gray {Y :_cde *255},nil ;};func ConverterFunc (converterFunc func (_aee _fg .Image )(Image ,error ))ColorConverter {return colorConverter {_bcgg :converterFunc };
};func (_fcea *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_fcea .ImageBase .copy (),ModelThreshold :_fcea .ModelThreshold };};func (_aa *CMYK32 )Set (x ,y int ,c _gc .Color ){_bfc :=4*(y *_aa .Width +x );if _bfc +3>=len (_aa .Data ){return ;
};_gbd :=_gc .CMYKModel .Convert (c ).(_gc .CMYK );_aa .Data [_bfc ]=_gbd .C ;_aa .Data [_bfc +1]=_gbd .M ;_aa .Data [_bfc +2]=_gbd .Y ;_aa .Data [_bfc +3]=_gbd .K ;};func (_feega *NRGBA32 )setRGBA (_adad int ,_bgae _gc .NRGBA ){_acfc :=3*_adad ;_feega .Data [_acfc ]=_bgae .R ;
_feega .Data [_acfc +1]=_bgae .G ;_feega .Data [_acfc +2]=_bgae .B ;if _adad < len (_feega .Alpha ){_feega .Alpha [_adad ]=_bgae .A ;};};func _aeda (_aecdg *Monochrome ,_fccd ,_ceecd int ,_fcfbb ,_ebbb int ,_cdge RasterOperator ){var (_gafa int ;_eafdd byte ;
_gcef ,_adfa int ;_dgef int ;);_bgddg :=_fcfbb >>3;_cdee :=_fcfbb &7;if _cdee > 0{_eafdd =_cbaf [_cdee ];};_gafa =_aecdg .BytesPerLine *_ceecd +(_fccd >>3);switch _cdge {case PixClr :for _gcef =0;_gcef < _ebbb ;_gcef ++{_dgef =_gafa +_gcef *_aecdg .BytesPerLine ;
for _adfa =0;_adfa < _bgddg ;_adfa ++{_aecdg .Data [_dgef ]=0x0;_dgef ++;};if _cdee > 0{_aecdg .Data [_dgef ]=_agbb (_aecdg .Data [_dgef ],0x0,_eafdd );};};case PixSet :for _gcef =0;_gcef < _ebbb ;_gcef ++{_dgef =_gafa +_gcef *_aecdg .BytesPerLine ;for _adfa =0;
_adfa < _bgddg ;_adfa ++{_aecdg .Data [_dgef ]=0xff;_dgef ++;};if _cdee > 0{_aecdg .Data [_dgef ]=_agbb (_aecdg .Data [_dgef ],0xff,_eafdd );};};case PixNotDst :for _gcef =0;_gcef < _ebbb ;_gcef ++{_dgef =_gafa +_gcef *_aecdg .BytesPerLine ;for _adfa =0;
_adfa < _bgddg ;_adfa ++{_aecdg .Data [_dgef ]=^_aecdg .Data [_dgef ];_dgef ++;};if _cdee > 0{_aecdg .Data [_dgef ]=_agbb (_aecdg .Data [_dgef ],^_aecdg .Data [_dgef ],_eafdd );};};};};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func (_afeb *NRGBA32 )SetNRGBA (x ,y int ,c _gc .NRGBA ){_abee :=y *_afeb .Width +x ;
_faff :=3*_abee ;if _faff +2>=len (_afeb .Data ){return ;};_afeb .setRGBA (_abee ,c );};func _efgc (_daf _gc .CMYK )_gc .RGBA {_afg ,_caf ,_edeg :=_gc .CMYKToRGB (_daf .C ,_daf .M ,_daf .Y ,_daf .K );return _gc .RGBA {R :_afg ,G :_caf ,B :_edeg ,A :0xff};
};func (_cabgd *Gray4 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_cabgd .Width ,Y :_cabgd .Height }};};type NRGBA64 struct{ImageBase };var _ Gray =&Gray16 {};func _fgf (_eee _gc .Gray )_gc .RGBA {return _gc .RGBA {R :_eee .Y ,G :_eee .Y ,B :_eee .Y ,A :0xff}};
func (_gba *ImageBase )GetAlpha ()[]byte {return _gba .Alpha };func (_ddda *Gray2 )GrayAt (x ,y int )_gc .Gray {_fcbg ,_ :=ColorAtGray2BPC (x ,y ,_ddda .BytesPerLine ,_ddda .Data ,_ddda .Decode );return _fcbg ;};func (_eaeb *RGBA32 )RGBAAt (x ,y int )_gc .RGBA {_dfge ,_ :=ColorAtRGBA32 (x ,y ,_eaeb .Width ,_eaeb .Data ,_eaeb .Alpha ,_eaeb .Decode );
return _dfge ;};func _egc (_cda int )[]uint {var _ea []uint ;_dba :=_cda ;_bbd :=_dba /8;if _bbd !=0{for _ebc :=0;_ebc < _bbd ;_ebc ++{_ea =append (_ea ,8);};_dcg :=_dba %8;_dba =0;if _dcg !=0{_dba =_dcg ;};};_bcg :=_dba /4;if _bcg !=0{for _cfa :=0;_cfa < _bcg ;
_cfa ++{_ea =append (_ea ,4);};_ba :=_dba %4;_dba =0;if _ba !=0{_dba =_ba ;};};_cfbf :=_dba /2;if _cfbf !=0{for _fa :=0;_fa < _cfbf ;_fa ++{_ea =append (_ea ,2);};};return _ea ;};func (_efce *Monochrome )copy ()*Monochrome {_aegb :=_dgg (_efce .Width ,_efce .Height );
_aegb .ModelThreshold =_efce .ModelThreshold ;_aegb .Data =make ([]byte ,len (_efce .Data ));copy (_aegb .Data ,_efce .Data );if len (_efce .Decode )!=0{_aegb .Decode =make ([]float64 ,len (_efce .Decode ));copy (_aegb .Decode ,_efce .Decode );};if len (_efce .Alpha )!=0{_aegb .Alpha =make ([]byte ,len (_efce .Alpha ));
copy (_aegb .Alpha ,_efce .Alpha );};return _aegb ;};func (_egfc *RGBA32 )ColorModel ()_gc .Model {return _gc .NRGBAModel };func _abeff (_bed Gray ,_befa NRGBA ,_dcgfd _fg .Rectangle ){for _fbbb :=0;_fbbb < _dcgfd .Max .X ;_fbbb ++{for _bdge :=0;_bdge < _dcgfd .Max .Y ;
_bdge ++{_cdfd :=_bed .GrayAt (_fbbb ,_bdge );_befa .SetNRGBA (_fbbb ,_bdge ,_beef (_cdfd ));};};};func (_baf *Gray4 )ColorModel ()_gc .Model {return Gray4Model };func _cad (_eabf *Monochrome ,_ded ,_bfdac ,_dabf ,_cdefg int ,_gbcb RasterOperator ,_feegc *Monochrome ,_bdgg ,_fbce int )error {var (_adcf bool ;
_gccb bool ;_aadbb int ;_dbec int ;_gaf int ;_cffa bool ;_ccdac byte ;_cbgd int ;_befd int ;_afeg int ;_defb ,_gacd int ;);_fcbfe :=8-(_ded &7);_gcfc :=_ecgf [_fcbfe ];_dage :=_eabf .BytesPerLine *_bfdac +(_ded >>3);_febd :=_feegc .BytesPerLine *_fbce +(_bdgg >>3);
if _dabf < _fcbfe {_adcf =true ;_gcfc &=_cbaf [8-_fcbfe +_dabf ];};if !_adcf {_aadbb =(_dabf -_fcbfe )>>3;if _aadbb > 0{_gccb =true ;_dbec =_dage +1;_gaf =_febd +1;};};_cbgd =(_ded +_dabf )&7;if !(_adcf ||_cbgd ==0){_cffa =true ;_ccdac =_cbaf [_cbgd ];
_befd =_dage +1+_aadbb ;_afeg =_febd +1+_aadbb ;};switch _gbcb {case PixSrc :for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],_feegc .Data [_febd ],_gcfc );_dage +=_eabf .BytesPerLine ;_febd +=_feegc .BytesPerLine ;
};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;_gacd ++{_eabf .Data [_dbec +_gacd ]=_feegc .Data [_gaf +_gacd ];};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],_feegc .Data [_afeg ],_ccdac );
_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixNotSrc :for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],^_feegc .Data [_febd ],_gcfc );_dage +=_eabf .BytesPerLine ;_febd +=_feegc .BytesPerLine ;
};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;_gacd ++{_eabf .Data [_dbec +_gacd ]=^_feegc .Data [_gaf +_gacd ];};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],^_feegc .Data [_afeg ],_ccdac );
_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixSrcOrDst :for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],_feegc .Data [_febd ]|_eabf .Data [_dage ],_gcfc );_dage +=_eabf .BytesPerLine ;_febd +=_feegc .BytesPerLine ;
};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;_gacd ++{_eabf .Data [_dbec +_gacd ]|=_feegc .Data [_gaf +_gacd ];};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],_feegc .Data [_afeg ]|_eabf .Data [_befd ],_ccdac );
_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixSrcAndDst :for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],_feegc .Data [_febd ]&_eabf .Data [_dage ],_gcfc );_dage +=_eabf .BytesPerLine ;_febd +=_feegc .BytesPerLine ;
};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;_gacd ++{_eabf .Data [_dbec +_gacd ]&=_feegc .Data [_gaf +_gacd ];};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],_feegc .Data [_afeg ]&_eabf .Data [_befd ],_ccdac );
_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixSrcXorDst :for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],_feegc .Data [_febd ]^_eabf .Data [_dage ],_gcfc );_dage +=_eabf .BytesPerLine ;_febd +=_feegc .BytesPerLine ;
};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;_gacd ++{_eabf .Data [_dbec +_gacd ]^=_feegc .Data [_gaf +_gacd ];};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],_feegc .Data [_afeg ]^_eabf .Data [_befd ],_ccdac );
_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixNotSrcOrDst :for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],^(_feegc .Data [_febd ])|_eabf .Data [_dage ],_gcfc );_dage +=_eabf .BytesPerLine ;
_febd +=_feegc .BytesPerLine ;};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;_gacd ++{_eabf .Data [_dbec +_gacd ]|=^(_feegc .Data [_gaf +_gacd ]);};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;};};if _cffa {for _defb =0;
_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],^(_feegc .Data [_afeg ])|_eabf .Data [_befd ],_ccdac );_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixNotSrcAndDst :for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],^(_feegc .Data [_febd ])&_eabf .Data [_dage ],_gcfc );
_dage +=_eabf .BytesPerLine ;_febd +=_feegc .BytesPerLine ;};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;_gacd ++{_eabf .Data [_dbec +_gacd ]&=^_feegc .Data [_gaf +_gacd ];};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;
};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],^(_feegc .Data [_afeg ])&_eabf .Data [_befd ],_ccdac );_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixSrcOrNotDst :for _defb =0;
_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],_feegc .Data [_febd ]|^(_eabf .Data [_dage ]),_gcfc );_dage +=_eabf .BytesPerLine ;_febd +=_feegc .BytesPerLine ;};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;
_gacd ++{_eabf .Data [_dbec +_gacd ]=_feegc .Data [_gaf +_gacd ]|^(_eabf .Data [_dbec +_gacd ]);};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],_feegc .Data [_afeg ]|^(_eabf .Data [_befd ]),_ccdac );
_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixSrcAndNotDst :for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],_feegc .Data [_febd ]&^(_eabf .Data [_dage ]),_gcfc );_dage +=_eabf .BytesPerLine ;
_febd +=_feegc .BytesPerLine ;};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;_gacd ++{_eabf .Data [_dbec +_gacd ]=_feegc .Data [_gaf +_gacd ]&^(_eabf .Data [_dbec +_gacd ]);};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;
};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],_feegc .Data [_afeg ]&^(_eabf .Data [_befd ]),_ccdac );_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixNotPixSrcOrDst :for _defb =0;
_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],^(_feegc .Data [_febd ]|_eabf .Data [_dage ]),_gcfc );_dage +=_eabf .BytesPerLine ;_febd +=_feegc .BytesPerLine ;};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;
_gacd ++{_eabf .Data [_dbec +_gacd ]=^(_feegc .Data [_gaf +_gacd ]|_eabf .Data [_dbec +_gacd ]);};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],^(_feegc .Data [_afeg ]|_eabf .Data [_befd ]),_ccdac );
_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixNotPixSrcAndDst :for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],^(_feegc .Data [_febd ]&_eabf .Data [_dage ]),_gcfc );_dage +=_eabf .BytesPerLine ;
_febd +=_feegc .BytesPerLine ;};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;_gacd ++{_eabf .Data [_dbec +_gacd ]=^(_feegc .Data [_gaf +_gacd ]&_eabf .Data [_dbec +_gacd ]);};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;
};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],^(_feegc .Data [_afeg ]&_eabf .Data [_befd ]),_ccdac );_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};case PixNotPixSrcXorDst :for _defb =0;
_defb < _cdefg ;_defb ++{_eabf .Data [_dage ]=_agbb (_eabf .Data [_dage ],^(_feegc .Data [_febd ]^_eabf .Data [_dage ]),_gcfc );_dage +=_eabf .BytesPerLine ;_febd +=_feegc .BytesPerLine ;};if _gccb {for _defb =0;_defb < _cdefg ;_defb ++{for _gacd =0;_gacd < _aadbb ;
_gacd ++{_eabf .Data [_dbec +_gacd ]=^(_feegc .Data [_gaf +_gacd ]^_eabf .Data [_dbec +_gacd ]);};_dbec +=_eabf .BytesPerLine ;_gaf +=_feegc .BytesPerLine ;};};if _cffa {for _defb =0;_defb < _cdefg ;_defb ++{_eabf .Data [_befd ]=_agbb (_eabf .Data [_befd ],^(_feegc .Data [_afeg ]^_eabf .Data [_befd ]),_ccdac );
_befd +=_eabf .BytesPerLine ;_afeg +=_feegc .BytesPerLine ;};};default:_b .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_gbcb );return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _ec ()(_gag [256]uint16 ){for _aff :=0;_aff < 256;_aff ++{if _aff &0x01!=0{_gag [_aff ]|=0x3;};if _aff &0x02!=0{_gag [_aff ]|=0xc;};if _aff &0x04!=0{_gag [_aff ]|=0x30;};if _aff &0x08!=0{_gag [_aff ]|=0xc0;};if _aff &0x10!=0{_gag [_aff ]|=0x300;
};if _aff &0x20!=0{_gag [_aff ]|=0xc00;};if _aff &0x40!=0{_gag [_aff ]|=0x3000;};if _aff &0x80!=0{_gag [_aff ]|=0xc000;};};return _gag ;};var _bdgc [256]uint8 ;