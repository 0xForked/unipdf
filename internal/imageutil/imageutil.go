//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_fg "encoding/binary";_b "errors";_gb "fmt";_aa "github.com/unidoc/unipdf/v3/common";_fa "github.com/unidoc/unipdf/v3/internal/bitwise";_g "image";_a "image/color";_f "image/draw";_d "math";);func (_feed *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_feed .copy ()}};
func (_gab *ImageBase )setEightBytes (_cfcb int ,_afbf uint64 )error {_cbgf :=_gab .BytesPerLine -(_cfcb %_gab .BytesPerLine );if _gab .BytesPerLine !=_gab .Width >>3{_cbgf --;};if _cbgf >=8{return _gab .setEightFullBytes (_cfcb ,_afbf );};return _gab .setEightPartlyBytes (_cfcb ,_cbgf ,_afbf );
};func (_dab *Gray4 )Set (x ,y int ,c _a .Color ){if x >=_dab .Width ||y >=_dab .Height {return ;};_caf :=Gray4Model .Convert (c ).(_a .Gray );_dab .setGray (x ,y ,_caf );};func _gfd (_agefg _g .Image )(Image ,error ){if _dfagg ,_egecg :=_agefg .(*RGBA32 );
_egecg {return _dfagg .Copy (),nil ;};_fegf ,_gefg ,_fade :=_ddca (_agefg ,1);_decb :=&RGBA32 {ImageBase :NewImageBase (_fegf .Max .X ,_fegf .Max .Y ,8,3,nil ,_fade ,nil )};_bbcc (_agefg ,_decb ,_fegf );if len (_fade )!=0&&!_gefg {if _bbgad :=_gcbb (_fade ,_decb );
_bbgad !=nil {return nil ,_bbgad ;};};return _decb ,nil ;};func (_bdagc *Monochrome )GrayAt (x ,y int )_a .Gray {_cba ,_ :=ColorAtGray1BPC (x ,y ,_bdagc .BytesPerLine ,_bdagc .Data ,_bdagc .Decode );return _cba ;};func (_cgf *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _dgab bool ;
_eac :=scale ;if scale < 1{_eac =1/scale ;_dgab =true ;};_ddce :=NextPowerOf2 (uint (_eac ));if InDelta (float64 (_ddce ),_eac ,0.001){if _dgab {return _cgf .ReduceBinary (_eac );};return _cgf .ExpandBinary (int (_ddce ));};_faeg :=int (_d .RoundToEven (float64 (_cgf .Width )*scale ));
_bbb :=int (_d .RoundToEven (float64 (_cgf .Height )*scale ));return _cgf .ScaleLow (_faeg ,_bbb );};var _ Image =&NRGBA32 {};func (_daa colorConverter )Convert (src _g .Image )(Image ,error ){return _daa ._bbe (src )};func (_eaeb *ImageBase )setFourBytes (_dfaa int ,_ceag uint32 )error {if _dfaa +3> len (_eaeb .Data )-1{return _gb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_dfaa );
};_eaeb .Data [_dfaa ]=byte ((_ceag &0xff000000)>>24);_eaeb .Data [_dfaa +1]=byte ((_ceag &0xff0000)>>16);_eaeb .Data [_dfaa +2]=byte ((_ceag &0xff00)>>8);_eaeb .Data [_dfaa +3]=byte (_ceag &0xff);return nil ;};func (_ecfe *CMYK32 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_ecfe .Width ,Y :_ecfe .Height }};
};type ColorConverter interface{Convert (_dgdd _g .Image )(Image ,error );};func (_acce *Gray8 )Set (x ,y int ,c _a .Color ){_eccg :=y *_acce .BytesPerLine +x ;if _eccg > len (_acce .Data )-1{return ;};_ggaa :=_a .GrayModel .Convert (c );_acce .Data [_eccg ]=_ggaa .(_a .Gray ).Y ;
};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_decfg (n )+1);};var _ Image =&Gray4 {};func (_cdda *Gray8 )Histogram ()(_fgbb [256]int ){for _ddee :=0;_ddee < len (_cdda .Data );_ddee ++{_fgbb [_cdda .Data [_ddee ]]++;};return _fgbb ;
};func _eegb (_ggd _a .Color )_a .Color {_bfc :=_a .GrayModel .Convert (_ggd ).(_a .Gray );return _gec (_bfc )};func (_cddg *Monochrome )getBitAt (_eaac ,_edb int )bool {_dde :=_edb *_cddg .BytesPerLine +(_eaac >>3);_gdfb :=_eaac &0x07;_caaee :=uint (7-_gdfb );
if _dde > len (_cddg .Data )-1{return false ;};if (_cddg .Data [_dde ]>>_caaee )&0x01>=1{return true ;};return false ;};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func (_egfc *Gray16 )Histogram ()(_dgbe [256]int ){for _fffb :=0;
_fffb < _egfc .Width ;_fffb ++{for _cgfa :=0;_cgfa < _egfc .Height ;_cgfa ++{_dgbe [_egfc .GrayAt (_fffb ,_cgfa ).Y ]++;};};return _dgbe ;};func _eeae (_cbec RGBA ,_eaae NRGBA ,_bbbee _g .Rectangle ){for _eeec :=0;_eeec < _bbbee .Max .X ;_eeec ++{for _dcag :=0;
_dcag < _bbbee .Max .Y ;_dcag ++{_ggga :=_cbec .RGBAAt (_eeec ,_dcag );_eaae .SetNRGBA (_eeec ,_dcag ,_aed (_ggga ));};};};func _bcf (_ccf ,_gbcf *Monochrome ,_acg []byte ,_fefe int )(_ccbg error ){var (_cb ,_ecd ,_fda ,_fcde ,_cea ,_bgb ,_acge ,_bfd int ;
_cdf ,_dfe ,_ffcb ,_bgd uint32 ;_ddc ,_gae byte ;_egf uint16 ;);_fdgb :=make ([]byte ,4);_aag :=make ([]byte ,4);for _fda =0;_fda < _ccf .Height -1;_fda ,_fcde =_fda +2,_fcde +1{_cb =_fda *_ccf .BytesPerLine ;_ecd =_fcde *_gbcf .BytesPerLine ;for _cea ,_bgb =0,0;
_cea < _fefe ;_cea ,_bgb =_cea +4,_bgb +1{for _acge =0;_acge < 4;_acge ++{_bfd =_cb +_cea +_acge ;if _bfd <=len (_ccf .Data )-1&&_bfd < _cb +_ccf .BytesPerLine {_fdgb [_acge ]=_ccf .Data [_bfd ];}else {_fdgb [_acge ]=0x00;};_bfd =_cb +_ccf .BytesPerLine +_cea +_acge ;
if _bfd <=len (_ccf .Data )-1&&_bfd < _cb +(2*_ccf .BytesPerLine ){_aag [_acge ]=_ccf .Data [_bfd ];}else {_aag [_acge ]=0x00;};};_cdf =_fg .BigEndian .Uint32 (_fdgb );_dfe =_fg .BigEndian .Uint32 (_aag );_ffcb =_cdf &_dfe ;_ffcb |=_ffcb <<1;_bgd =_cdf |_dfe ;
_bgd &=_bgd <<1;_dfe =_ffcb &_bgd ;_dfe &=0xaaaaaaaa;_cdf =_dfe |(_dfe <<7);_ddc =byte (_cdf >>24);_gae =byte ((_cdf >>8)&0xff);_bfd =_ecd +_bgb ;if _bfd +1==len (_gbcf .Data )-1||_bfd +1>=_ecd +_gbcf .BytesPerLine {if _ccbg =_gbcf .setByte (_bfd ,_acg [_ddc ]);
_ccbg !=nil {return _gb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bfd );};}else {_egf =(uint16 (_acg [_ddc ])<<8)|uint16 (_acg [_gae ]);if _ccbg =_gbcf .setTwoBytes (_bfd ,_egf );_ccbg !=nil {return _gb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bfd );
};_bgb ++;};};};return nil ;};func GrayHistogram (g Gray )(_ecac [256]int ){switch _faeb :=g .(type ){case Histogramer :return _faeb .Histogram ();case _g .Image :_eaba :=_faeb .Bounds ();for _ffccb :=0;_ffccb < _eaba .Max .X ;_ffccb ++{for _bdagb :=0;
_bdagb < _eaba .Max .Y ;_bdagb ++{_ecac [g .GrayAt (_ffccb ,_bdagb ).Y ]++;};};return _ecac ;default:return [256]int {};};};var (_aeb =_da ();_ffcf =_afa ();_fea =_ge (););func (_gdd *Gray2 )Validate ()error {if len (_gdd .Data )!=_gdd .Height *_gdd .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_a .Gray ,error ){_ccaf :=y *bytesPerLine +x ;if _ccaf >=len (data ){return _a .Gray {},_gb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fcaf :=data [_ccaf ];if len (decode )==2{_fcaf =uint8 (uint32 (LinearInterpolate (float64 (_fcaf ),0,255,decode [0],decode [1]))&0xff);};return _a .Gray {Y :_fcaf },nil ;};func (_daabe *Gray4 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_daabe .Width ,Y :_daabe .Height }};
};func _cfc (_eedg _a .Gray )_a .Gray {_eedg .Y >>=4;_eedg .Y |=_eedg .Y <<4;return _eedg };func (_cfbd *ImageBase )newAlpha (){_ffag :=BytesPerLine (_cfbd .Width ,_cfbd .BitsPerComponent ,1);_cfbd .Alpha =make ([]byte ,_cfbd .Height *_ffag );};func (_cbge *ImageBase )GetAlpha ()[]byte {return _cbge .Alpha };
func (_cgba *RGBA32 )RGBAAt (x ,y int )_a .RGBA {_eebg ,_ :=ColorAtRGBA32 (x ,y ,_cgba .Width ,_cgba .Data ,_cgba .Alpha ,_cgba .Decode );return _eebg ;};func (_egd *Gray2 )At (x ,y int )_a .Color {_beda ,_ :=_egd .ColorAt (x ,y );return _beda };func (_cgac *Gray16 )SetGray (x ,y int ,g _a .Gray ){_ccaa :=(y *_cgac .BytesPerLine /2+x )*2;
if _ccaa +1>=len (_cgac .Data ){return ;};_cgac .Data [_ccaa ]=g .Y ;_cgac .Data [_ccaa +1]=g .Y ;};func _cfg (_affc RGBA ,_cgfc Gray ,_adba _g .Rectangle ){for _bbdf :=0;_bbdf < _adba .Max .X ;_bbdf ++{for _dcdff :=0;_dcdff < _adba .Max .Y ;_dcdff ++{_dcgd :=_cdga (_affc .RGBAAt (_bbdf ,_dcdff ));
_cgfc .SetGray (_bbdf ,_dcdff ,_dcgd );};};};var _ Image =&Gray8 {};func _dcaa (_abb ,_acdb NRGBA ,_face _g .Rectangle ){for _dgee :=0;_dgee < _face .Max .X ;_dgee ++{for _bcaf :=0;_bcaf < _face .Max .Y ;_bcaf ++{_acdb .SetNRGBA (_dgee ,_bcaf ,_abb .NRGBAAt (_dgee ,_bcaf ));
};};};var _ Image =&CMYK32 {};func _bcbg (_ebg _a .NRGBA )_a .Gray {_abaf ,_edd ,_bac ,_ :=_ebg .RGBA ();_aaf :=(19595*_abaf +38470*_edd +7471*_bac +1<<15)>>24;return _a .Gray {Y :uint8 (_aaf )};};func _cdace (_bbcf nrgba64 ,_cgef RGBA ,_bfeg _g .Rectangle ){for _gcbbf :=0;
_gcbbf < _bfeg .Max .X ;_gcbbf ++{for _ccgd :=0;_ccgd < _bfeg .Max .Y ;_ccgd ++{_dbaf :=_bbcf .NRGBA64At (_gcbbf ,_ccgd );_cgef .SetRGBA (_gcbbf ,_ccgd ,_dbf (_dbaf ));};};};func (_bccd *RGBA32 )Validate ()error {if len (_bccd .Data )!=3*_bccd .Width *_bccd .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_ege *Monochrome )copy ()*Monochrome {_efg :=_eeg (_ege .Width ,_ege .Height );_efg .ModelThreshold =_ege .ModelThreshold ;_efg .Data =make ([]byte ,len (_ege .Data ));copy (_efg .Data ,_ege .Data );if len (_ege .Decode )!=0{_efg .Decode =make ([]float64 ,len (_ege .Decode ));
copy (_efg .Decode ,_ege .Decode );};if len (_ege .Alpha )!=0{_efg .Alpha =make ([]byte ,len (_ege .Alpha ));copy (_efg .Alpha ,_ege .Alpha );};return _efg ;};var _ _g .Image =&Monochrome {};func _dcg (_geae RGBA ,_dga CMYK ,_gcac _g .Rectangle ){for _fdc :=0;
_fdc < _gcac .Max .X ;_fdc ++{for _cbb :=0;_cbb < _gcac .Max .Y ;_cbb ++{_bfa :=_geae .RGBAAt (_fdc ,_cbb );_dga .SetCMYK (_fdc ,_cbb ,_bdag (_bfa ));};};};func _ffbd (_efabc *Monochrome ,_gagf ,_geaf ,_aaae ,_fbb int ,_gfbg RasterOperator ,_bbca *Monochrome ,_cggb ,_adcc int )error {var (_badc byte ;
_bffb int ;_abf int ;_ebae ,_gdca int ;_gbecb ,_aegbc int ;);_fdad :=_aaae >>3;_ded :=_aaae &7;if _ded > 0{_badc =_eaga [_ded ];};_bffb =_bbca .BytesPerLine *_adcc +(_cggb >>3);_abf =_efabc .BytesPerLine *_geaf +(_gagf >>3);switch _gfbg {case PixSrc :for _gbecb =0;
_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]=_bbca .Data [_ebae ];_gdca ++;_ebae ++;};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],_bbca .Data [_ebae ],_badc );
};};case PixNotSrc :for _gbecb =0;_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]=^(_bbca .Data [_ebae ]);_gdca ++;_ebae ++;};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],^_bbca .Data [_ebae ],_badc );
};};case PixSrcOrDst :for _gbecb =0;_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]|=_bbca .Data [_ebae ];_gdca ++;_ebae ++;};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],_bbca .Data [_ebae ]|_efabc .Data [_gdca ],_badc );
};};case PixSrcAndDst :for _gbecb =0;_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]&=_bbca .Data [_ebae ];_gdca ++;_ebae ++;};
if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],_bbca .Data [_ebae ]&_efabc .Data [_gdca ],_badc );};};case PixSrcXorDst :for _gbecb =0;_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;
for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]^=_bbca .Data [_ebae ];_gdca ++;_ebae ++;};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],_bbca .Data [_ebae ]^_efabc .Data [_gdca ],_badc );};};case PixNotSrcOrDst :for _gbecb =0;
_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]|=^(_bbca .Data [_ebae ]);_gdca ++;_ebae ++;};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],^(_bbca .Data [_ebae ])|_efabc .Data [_gdca ],_badc );
};};case PixNotSrcAndDst :for _gbecb =0;_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]&=^(_bbca .Data [_ebae ]);_gdca ++;_ebae ++;
};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],^(_bbca .Data [_ebae ])&_efabc .Data [_gdca ],_badc );};};case PixSrcOrNotDst :for _gbecb =0;_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;
for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]=_bbca .Data [_ebae ]|^(_efabc .Data [_gdca ]);_gdca ++;_ebae ++;};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],_bbca .Data [_ebae ]|^(_efabc .Data [_gdca ]),_badc );};};case PixSrcAndNotDst :for _gbecb =0;
_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]=_bbca .Data [_ebae ]&^(_efabc .Data [_gdca ]);_gdca ++;_ebae ++;};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],_bbca .Data [_ebae ]&^(_efabc .Data [_gdca ]),_badc );
};};case PixNotPixSrcOrDst :for _gbecb =0;_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]=^(_bbca .Data [_ebae ]|_efabc .Data [_gdca ]);
_gdca ++;_ebae ++;};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],^(_bbca .Data [_ebae ]|_efabc .Data [_gdca ]),_badc );};};case PixNotPixSrcAndDst :for _gbecb =0;_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;
for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]=^(_bbca .Data [_ebae ]&_efabc .Data [_gdca ]);_gdca ++;_ebae ++;};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],^(_bbca .Data [_ebae ]&_efabc .Data [_gdca ]),_badc );};};case PixNotPixSrcXorDst :for _gbecb =0;
_gbecb < _fbb ;_gbecb ++{_ebae =_bffb +_gbecb *_bbca .BytesPerLine ;_gdca =_abf +_gbecb *_efabc .BytesPerLine ;for _aegbc =0;_aegbc < _fdad ;_aegbc ++{_efabc .Data [_gdca ]=^(_bbca .Data [_ebae ]^_efabc .Data [_gdca ]);_gdca ++;_ebae ++;};if _ded > 0{_efabc .Data [_gdca ]=_fdca (_efabc .Data [_gdca ],^(_bbca .Data [_ebae ]^_efabc .Data [_gdca ]),_badc );
};};default:_aa .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_gfbg );return _b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _bdag (_dcc _a .RGBA )_a .CMYK {_bbdg ,_aafd ,_abg ,_gba :=_a .RGBToCMYK (_dcc .R ,_dcc .G ,_dcc .B );return _a .CMYK {C :_bbdg ,M :_aafd ,Y :_abg ,K :_gba };};func _cdc (_bgda Gray ,_ebfc CMYK ,_dag _g .Rectangle ){for _efa :=0;_efa < _dag .Max .X ;
_efa ++{for _bba :=0;_bba < _dag .Max .Y ;_bba ++{_ceb :=_bgda .GrayAt (_efa ,_bba );_ebfc .SetCMYK (_efa ,_bba ,_agd (_ceb ));};};};func (_gbg *Gray4 )ColorModel ()_a .Model {return Gray4Model };func _eddbe (_aac _a .Color )_a .Color {_daff :=_a .GrayModel .Convert (_aac ).(_a .Gray );
return _cfc (_daff );};func ImgToBinary (i _g .Image ,threshold uint8 )*_g .Gray {switch _cfec :=i .(type ){case *_g .Gray :if _edfge (_cfec ){return _cfec ;};return _ffff (_cfec ,threshold );case *_g .Gray16 :return _cecd (_cfec ,threshold );default:return _accad (_cfec ,threshold );
};};type Gray4 struct{ImageBase };func _gec (_gccd _a .Gray )_a .Gray {_dcdd :=_gccd .Y >>6;_dcdd |=_dcdd <<2;_gccd .Y =_dcdd |_dcdd <<4;return _gccd ;};func (_cefa *Monochrome )ColorModel ()_a .Model {return MonochromeModel (_cefa .ModelThreshold )};func (_bggb *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_bggb .ImageBase .copy (),ModelThreshold :_bggb .ModelThreshold };
};func _gg (_efdg int )[]uint {var _baf []uint ;_afc :=_efdg ;_eaa :=_afc /8;if _eaa !=0{for _aae :=0;_aae < _eaa ;_aae ++{_baf =append (_baf ,8);};_ccb :=_afc %8;_afc =0;if _ccb !=0{_afc =_ccb ;};};_abd :=_afc /4;if _abd !=0{for _ad :=0;_ad < _abd ;_ad ++{_baf =append (_baf ,4);
};_cccc :=_afc %4;_afc =0;if _cccc !=0{_afc =_cccc ;};};_dgf :=_afc /2;if _dgf !=0{for _bdee :=0;_bdee < _dgf ;_bdee ++{_baf =append (_baf ,2);};};return _baf ;};var _ Image =&Gray16 {};func (_bbf *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_b .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_acca :=_eeg (width ,height );_fege :=make ([]int ,height );_eefe :=make ([]int ,width );_gdfa :=float64 (_bbf .Width )/float64 (width );_dgad :=float64 (_bbf .Height )/float64 (height );for _fefb :=0;_fefb < height ;_fefb ++{_fege [_fefb ]=int (_d .Min (_dgad *float64 (_fefb )+0.5,float64 (_bbf .Height -1)));
};for _acfa :=0;_acfa < width ;_acfa ++{_eefe [_acfa ]=int (_d .Min (_gdfa *float64 (_acfa )+0.5,float64 (_bbf .Width -1)));};_gadf :=-1;_fbge :=byte (0);for _fefd :=0;_fefd < height ;_fefd ++{_fbag :=_fege [_fefd ]*_bbf .BytesPerLine ;_cfdeg :=_fefd *_acca .BytesPerLine ;
for _dcac :=0;_dcac < width ;_dcac ++{_ccbcf :=_eefe [_dcac ];if _ccbcf !=_gadf {_fbge =_bbf .getBit (_fbag ,_ccbcf );if _fbge !=0{_acca .setBit (_cfdeg ,_dcac );};_gadf =_ccbcf ;}else {if _fbge !=0{_acca .setBit (_cfdeg ,_dcac );};};};};return _acca ,nil ;
};func _dfa (_acc *Monochrome ,_eff int ,_bgg []byte )(_aea *Monochrome ,_gdc error ){const _gca ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";if _acc ==nil {return nil ,_b .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _eff < 1||_eff > 4{return nil ,_b .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _acc .Height <=1{return nil ,_b .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");
};_aea =_eeg (_acc .Width /2,_acc .Height /2);if _bgg ==nil {_bgg =_agbb ();};_aeg :=_ggad (_acc .BytesPerLine ,2*_aea .BytesPerLine );switch _eff {case 1:_gdc =_add (_acc ,_aea ,_bgg ,_aeg );case 2:_gdc =_gfe (_acc ,_aea ,_bgg ,_aeg );case 3:_gdc =_bcf (_acc ,_aea ,_bgg ,_aeg );
case 4:_gdc =_bggc (_acc ,_aea ,_bgg ,_aeg );};if _gdc !=nil {return nil ,_gdc ;};return _aea ,nil ;};var _ NRGBA =&NRGBA16 {};func _befb (_gde *Monochrome ,_ddedf ,_ebfd ,_cafd ,_abda int ,_cfded RasterOperator ,_cfef *Monochrome ,_geaea ,_bfe int )error {var (_efbad bool ;
_gcbe bool ;_gcbf int ;_bdcf int ;_fgcc int ;_babg bool ;_cadf byte ;_dfbbd int ;_ccgb int ;_bbeg int ;_cggga ,_gbcfe int ;);_gcdcd :=8-(_ddedf &7);_dbaaa :=_bbbe [_gcdcd ];_bbga :=_gde .BytesPerLine *_ebfd +(_ddedf >>3);_dddg :=_cfef .BytesPerLine *_bfe +(_geaea >>3);
if _cafd < _gcdcd {_efbad =true ;_dbaaa &=_eaga [8-_gcdcd +_cafd ];};if !_efbad {_gcbf =(_cafd -_gcdcd )>>3;if _gcbf > 0{_gcbe =true ;_bdcf =_bbga +1;_fgcc =_dddg +1;};};_dfbbd =(_ddedf +_cafd )&7;if !(_efbad ||_dfbbd ==0){_babg =true ;_cadf =_eaga [_dfbbd ];
_ccgb =_bbga +1+_gcbf ;_bbeg =_dddg +1+_gcbf ;};switch _cfded {case PixSrc :for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],_cfef .Data [_dddg ],_dbaaa );_bbga +=_gde .BytesPerLine ;_dddg +=_cfef .BytesPerLine ;};
if _gcbe {for _cggga =0;_cggga < _abda ;_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]=_cfef .Data [_fgcc +_gbcfe ];};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;};};if _babg {for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],_cfef .Data [_bbeg ],_cadf );
_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;};};case PixNotSrc :for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],^_cfef .Data [_dddg ],_dbaaa );_bbga +=_gde .BytesPerLine ;_dddg +=_cfef .BytesPerLine ;
};if _gcbe {for _cggga =0;_cggga < _abda ;_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]=^_cfef .Data [_fgcc +_gbcfe ];};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;};};if _babg {for _cggga =0;_cggga < _abda ;
_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],^_cfef .Data [_bbeg ],_cadf );_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;};};case PixSrcOrDst :for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],_cfef .Data [_dddg ]|_gde .Data [_bbga ],_dbaaa );
_bbga +=_gde .BytesPerLine ;_dddg +=_cfef .BytesPerLine ;};if _gcbe {for _cggga =0;_cggga < _abda ;_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]|=_cfef .Data [_fgcc +_gbcfe ];};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;
};};if _babg {for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],_cfef .Data [_bbeg ]|_gde .Data [_ccgb ],_cadf );_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;};};case PixSrcAndDst :for _cggga =0;_cggga < _abda ;
_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],_cfef .Data [_dddg ]&_gde .Data [_bbga ],_dbaaa );_bbga +=_gde .BytesPerLine ;_dddg +=_cfef .BytesPerLine ;};if _gcbe {for _cggga =0;_cggga < _abda ;_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]&=_cfef .Data [_fgcc +_gbcfe ];
};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;};};if _babg {for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],_cfef .Data [_bbeg ]&_gde .Data [_ccgb ],_cadf );_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;
};};case PixSrcXorDst :for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],_cfef .Data [_dddg ]^_gde .Data [_bbga ],_dbaaa );_bbga +=_gde .BytesPerLine ;_dddg +=_cfef .BytesPerLine ;};if _gcbe {for _cggga =0;_cggga < _abda ;
_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]^=_cfef .Data [_fgcc +_gbcfe ];};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;};};if _babg {for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],_cfef .Data [_bbeg ]^_gde .Data [_ccgb ],_cadf );
_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;};};case PixNotSrcOrDst :for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],^(_cfef .Data [_dddg ])|_gde .Data [_bbga ],_dbaaa );_bbga +=_gde .BytesPerLine ;_dddg +=_cfef .BytesPerLine ;
};if _gcbe {for _cggga =0;_cggga < _abda ;_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]|=^(_cfef .Data [_fgcc +_gbcfe ]);};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;};};if _babg {for _cggga =0;_cggga < _abda ;
_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],^(_cfef .Data [_bbeg ])|_gde .Data [_ccgb ],_cadf );_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;};};case PixNotSrcAndDst :for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],^(_cfef .Data [_dddg ])&_gde .Data [_bbga ],_dbaaa );
_bbga +=_gde .BytesPerLine ;_dddg +=_cfef .BytesPerLine ;};if _gcbe {for _cggga =0;_cggga < _abda ;_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]&=^_cfef .Data [_fgcc +_gbcfe ];};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;
};};if _babg {for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],^(_cfef .Data [_bbeg ])&_gde .Data [_ccgb ],_cadf );_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;};};case PixSrcOrNotDst :for _cggga =0;_cggga < _abda ;
_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],_cfef .Data [_dddg ]|^(_gde .Data [_bbga ]),_dbaaa );_bbga +=_gde .BytesPerLine ;_dddg +=_cfef .BytesPerLine ;};if _gcbe {for _cggga =0;_cggga < _abda ;_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]=_cfef .Data [_fgcc +_gbcfe ]|^(_gde .Data [_bdcf +_gbcfe ]);
};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;};};if _babg {for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],_cfef .Data [_bbeg ]|^(_gde .Data [_ccgb ]),_cadf );_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;
};};case PixSrcAndNotDst :for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],_cfef .Data [_dddg ]&^(_gde .Data [_bbga ]),_dbaaa );_bbga +=_gde .BytesPerLine ;_dddg +=_cfef .BytesPerLine ;};if _gcbe {for _cggga =0;_cggga < _abda ;
_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]=_cfef .Data [_fgcc +_gbcfe ]&^(_gde .Data [_bdcf +_gbcfe ]);};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;};};if _babg {for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],_cfef .Data [_bbeg ]&^(_gde .Data [_ccgb ]),_cadf );
_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;};};case PixNotPixSrcOrDst :for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],^(_cfef .Data [_dddg ]|_gde .Data [_bbga ]),_dbaaa );_bbga +=_gde .BytesPerLine ;
_dddg +=_cfef .BytesPerLine ;};if _gcbe {for _cggga =0;_cggga < _abda ;_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]=^(_cfef .Data [_fgcc +_gbcfe ]|_gde .Data [_bdcf +_gbcfe ]);};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;
};};if _babg {for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],^(_cfef .Data [_bbeg ]|_gde .Data [_ccgb ]),_cadf );_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;};};case PixNotPixSrcAndDst :for _cggga =0;
_cggga < _abda ;_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],^(_cfef .Data [_dddg ]&_gde .Data [_bbga ]),_dbaaa );_bbga +=_gde .BytesPerLine ;_dddg +=_cfef .BytesPerLine ;};if _gcbe {for _cggga =0;_cggga < _abda ;_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;
_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]=^(_cfef .Data [_fgcc +_gbcfe ]&_gde .Data [_bdcf +_gbcfe ]);};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;};};if _babg {for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],^(_cfef .Data [_bbeg ]&_gde .Data [_ccgb ]),_cadf );
_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;};};case PixNotPixSrcXorDst :for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_bbga ]=_fdca (_gde .Data [_bbga ],^(_cfef .Data [_dddg ]^_gde .Data [_bbga ]),_dbaaa );_bbga +=_gde .BytesPerLine ;
_dddg +=_cfef .BytesPerLine ;};if _gcbe {for _cggga =0;_cggga < _abda ;_cggga ++{for _gbcfe =0;_gbcfe < _gcbf ;_gbcfe ++{_gde .Data [_bdcf +_gbcfe ]=^(_cfef .Data [_fgcc +_gbcfe ]^_gde .Data [_bdcf +_gbcfe ]);};_bdcf +=_gde .BytesPerLine ;_fgcc +=_cfef .BytesPerLine ;
};};if _babg {for _cggga =0;_cggga < _abda ;_cggga ++{_gde .Data [_ccgb ]=_fdca (_gde .Data [_ccgb ],^(_cfef .Data [_bbeg ]^_gde .Data [_ccgb ]),_cadf );_ccgb +=_gde .BytesPerLine ;_bbeg +=_cfef .BytesPerLine ;};};default:_aa .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_cfded );
return _b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_bfbe *Monochrome )Set (x ,y int ,c _a .Color ){_defa :=y *_bfbe .BytesPerLine +x >>3;
if _defa > len (_bfbe .Data )-1{return ;};_edga :=_bfbe .ColorModel ().Convert (c ).(_a .Gray );_bfbe .setGray (x ,_edga ,_defa );};func (_feg *CMYK32 )ColorModel ()_a .Model {return _a .CMYKModel };func _gece (_dbgbb _g .Image ,_dfeg Image ,_dcfg _g .Rectangle ){if _gdee ,_acacf :=_dbgbb .(SMasker );
_acacf &&_gdee .HasAlpha (){_dfeg .(SMasker ).MakeAlpha ();};switch _ggfb :=_dbgbb .(type ){case Gray :_cffg (_ggfb ,_dfeg .(NRGBA ),_dcfg );case NRGBA :_dcaa (_ggfb ,_dfeg .(NRGBA ),_dcfg );case *_g .NYCbCrA :_adff (_ggfb ,_dfeg .(NRGBA ),_dcfg );case CMYK :_ccaff (_ggfb ,_dfeg .(NRGBA ),_dcfg );
case RGBA :_eeae (_ggfb ,_dfeg .(NRGBA ),_dcfg );case nrgba64 :_fedb (_ggfb ,_dfeg .(NRGBA ),_dcfg );default:_bcb (_dbgbb ,_dfeg ,_dcfg );};};func (_edee *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_dfdd :=_decfg (uint (factor ));if !IsPowerOf2 (uint (factor )){_dfdd ++;
};_fbde :=make ([]int ,_dfdd );for _cace :=range _fbde {_fbde [_cace ]=4;};_bfdd ,_gcg :=_ce (_edee ,_fbde ...);if _gcg !=nil {return nil ,_gcg ;};return _bfdd ,nil ;};func _fbcf (_gbad _g .Image )(Image ,error ){if _bcac ,_fgfd :=_gbad .(*Gray16 );_fgfd {return _bcac .Copy (),nil ;
};_eegbf :=_gbad .Bounds ();_bggf ,_gcdc :=NewImage (_eegbf .Max .X ,_eegbf .Max .Y ,16,1,nil ,nil ,nil );if _gcdc !=nil {return nil ,_gcdc ;};_gbece (_gbad ,_bggf ,_eegbf );return _bggf ,nil ;};func (_gcd *Monochrome )InverseData ()error {return _gcd .RasterOperation (0,0,_gcd .Width ,_gcd .Height ,PixNotDst ,nil ,0,0);
};func (_bdg *CMYK32 )At (x ,y int )_a .Color {_bge ,_ :=_bdg .ColorAt (x ,y );return _bge };func _ccaff (_deaef CMYK ,_affb NRGBA ,_dgabga _g .Rectangle ){for _bece :=0;_bece < _dgabga .Max .X ;_bece ++{for _cagc :=0;_cagc < _dgabga .Max .Y ;_cagc ++{_fbbf :=_deaef .CMYKAt (_bece ,_cagc );
_affb .SetNRGBA (_bece ,_cagc ,_daf (_fbbf ));};};};var _ Image =&Gray2 {};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _da ()(_bf [256]uint16 ){for _edaf :=0;_edaf < 256;_edaf ++{if _edaf &0x01!=0{_bf [_edaf ]|=0x3;};if _edaf &0x02!=0{_bf [_edaf ]|=0xc;
};if _edaf &0x04!=0{_bf [_edaf ]|=0x30;};if _edaf &0x08!=0{_bf [_edaf ]|=0xc0;};if _edaf &0x10!=0{_bf [_edaf ]|=0x300;};if _edaf &0x20!=0{_bf [_edaf ]|=0xc00;};if _edaf &0x40!=0{_bf [_edaf ]|=0x3000;};if _edaf &0x80!=0{_bf [_edaf ]|=0xc000;};};return _bf ;
};func init (){_cgfb ()};func (_bacc *NRGBA16 )Base ()*ImageBase {return &_bacc .ImageBase };func _eeg (_bcc ,_bff int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_bcc ,_bff ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};func (_fbed *Gray2 )ColorAt (x ,y int )(_a .Color ,error ){return ColorAtGray2BPC (x ,y ,_fbed .BytesPerLine ,_fbed .Data ,_fbed .Decode );
};func (_feae *Monochrome )Validate ()error {if len (_feae .Data )!=_feae .Height *_feae .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_gadg *NRGBA32 )ColorModel ()_a .Model {return _a .NRGBAModel };func (_abge *ImageBase )setTwoBytes (_dad int ,_bgdec uint16 )error {if _dad +1> len (_abge .Data )-1{return _b .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_abge .Data [_dad ]=byte ((_bgdec &0xff00)>>8);_abge .Data [_dad +1]=byte (_bgdec &0xff);return nil ;};func (_bgf *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_bgf .copy ()}};func _ggad (_defb int ,_bdebf int )int {if _defb < _bdebf {return _defb ;
};return _bdebf ;};func (_deb *monochromeThresholdConverter )Convert (img _g .Image )(Image ,error ){if _adg ,_fgf :=img .(*Monochrome );_fgf {return _adg .Copy (),nil ;};_gcae :=img .Bounds ();_aegb ,_baec :=NewImage (_gcae .Max .X ,_gcae .Max .Y ,1,1,nil ,nil ,nil );
if _baec !=nil {return nil ,_baec ;};_aegb .(*Monochrome ).ModelThreshold =_deb .Threshold ;for _fbf :=0;_fbf < _gcae .Max .X ;_fbf ++{for _gdbf :=0;_gdbf < _gcae .Max .Y ;_gdbf ++{_dbaa :=img .At (_fbf ,_gdbf );_aegb .Set (_fbf ,_gdbf ,_dbaa );};};return _aegb ,nil ;
};func _adff (_eece *_g .NYCbCrA ,_bbad NRGBA ,_bdfd _g .Rectangle ){for _bgaf :=0;_bgaf < _bdfd .Max .X ;_bgaf ++{for _gfgag :=0;_gfgag < _bdfd .Max .Y ;_gfgag ++{_bdebe :=_eece .NYCbCrAAt (_bgaf ,_gfgag );_bbad .SetNRGBA (_bgaf ,_gfgag ,_degb (_bdebe ));
};};};func _ffab (_afgd *Monochrome ,_ddgg ,_fcgf int ,_beca ,_dfff int ,_bfddb RasterOperator ){var (_dbgbc int ;_dbcba byte ;_cab ,_ggfd int ;_gfaf int ;);_abfe :=_beca >>3;_ddgd :=_beca &7;if _ddgd > 0{_dbcba =_eaga [_ddgd ];};_dbgbc =_afgd .BytesPerLine *_fcgf +(_ddgg >>3);
switch _bfddb {case PixClr :for _cab =0;_cab < _dfff ;_cab ++{_gfaf =_dbgbc +_cab *_afgd .BytesPerLine ;for _ggfd =0;_ggfd < _abfe ;_ggfd ++{_afgd .Data [_gfaf ]=0x0;_gfaf ++;};if _ddgd > 0{_afgd .Data [_gfaf ]=_fdca (_afgd .Data [_gfaf ],0x0,_dbcba );
};};case PixSet :for _cab =0;_cab < _dfff ;_cab ++{_gfaf =_dbgbc +_cab *_afgd .BytesPerLine ;for _ggfd =0;_ggfd < _abfe ;_ggfd ++{_afgd .Data [_gfaf ]=0xff;_gfaf ++;};if _ddgd > 0{_afgd .Data [_gfaf ]=_fdca (_afgd .Data [_gfaf ],0xff,_dbcba );};};case PixNotDst :for _cab =0;
_cab < _dfff ;_cab ++{_gfaf =_dbgbc +_cab *_afgd .BytesPerLine ;for _ggfd =0;_ggfd < _abfe ;_ggfd ++{_afgd .Data [_gfaf ]=^_afgd .Data [_gfaf ];_gfaf ++;};if _ddgd > 0{_afgd .Data [_gfaf ]=_fdca (_afgd .Data [_gfaf ],^_afgd .Data [_gfaf ],_dbcba );};};
};};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _d .Abs (xmax -xmin )< 0.000001{return ymin ;};_cdbc :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _cdbc ;};func _cecd (_cfdee *_g .Gray16 ,_eabf uint8 )*_g .Gray {_geedf :=_cfdee .Bounds ();
_ggfbe :=_g .NewGray (_geedf );for _ggag :=0;_ggag < _geedf .Dx ();_ggag ++{for _edca :=0;_edca < _geedf .Dy ();_edca ++{_bbba :=_cfdee .Gray16At (_ggag ,_edca );_ggfbe .SetGray (_ggag ,_edca ,_a .Gray {Y :_cgfe (uint8 (_bbba .Y /256),_eabf )});};};return _ggfbe ;
};func (_aacf *NRGBA64 )Base ()*ImageBase {return &_aacf .ImageBase };func (_ggec *NRGBA16 )setNRGBA (_degaa ,_geb ,_ccgfb int ,_fbda _a .NRGBA ){if _degaa *3%2==0{_ggec .Data [_ccgfb ]=(_fbda .R >>4)<<4|(_fbda .G >>4);_ggec .Data [_ccgfb +1]=(_fbda .B >>4)<<4|(_ggec .Data [_ccgfb +1]&0xf);
}else {_ggec .Data [_ccgfb ]=(_ggec .Data [_ccgfb ]&0xf0)|(_fbda .R >>4);_ggec .Data [_ccgfb +1]=(_fbda .G >>4)<<4|(_fbda .B >>4);};if _ggec .Alpha !=nil {_efcaf :=_geb *BytesPerLine (_ggec .Width ,4,1);if _efcaf < len (_ggec .Alpha ){if _degaa %2==0{_ggec .Alpha [_efcaf ]=(_fbda .A >>uint (4))<<uint (4)|(_ggec .Alpha [_ccgfb ]&0xf);
}else {_ggec .Alpha [_efcaf ]=(_ggec .Alpha [_efcaf ]&0xf0)|(_fbda .A >>uint (4));};};};};func _gcbb (_abgg []byte ,_ccbe Image )error {_dccd :=true ;for _ccea :=0;_ccea < len (_abgg );_ccea ++{if _abgg [_ccea ]!=0xff{_dccd =false ;break ;};};if _dccd {switch _gddg :=_ccbe .(type ){case *NRGBA32 :_gddg .Alpha =nil ;
case *NRGBA64 :_gddg .Alpha =nil ;default:return _gb .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_ccbe );
};};return nil ;};func (_dfbb *ImageBase )setEightPartlyBytes (_dbgd ,_fbeff int ,_fcb uint64 )(_cce error ){var (_eede byte ;_dbda int ;);for _bcfg :=1;_bcfg <=_fbeff ;_bcfg ++{_dbda =64-_bcfg *8;_eede =byte (_fcb >>uint (_dbda )&0xff);if _cce =_dfbb .setByte (_dbgd +_bcfg -1,_eede );
_cce !=nil {return _cce ;};};_cddc :=_dfbb .BytesPerLine *8-_dfbb .Width ;if _cddc ==0{return nil ;};_dbda -=8;_eede =byte (_fcb >>uint (_dbda )&0xff)<<uint (_cddc );if _cce =_dfbb .setByte (_dbgd +_fbeff ,_eede );_cce !=nil {return _cce ;};return nil ;
};var _ _g .Image =&NRGBA32 {};func _afa ()(_ffa [256]uint32 ){for _ee :=0;_ee < 256;_ee ++{if _ee &0x01!=0{_ffa [_ee ]|=0xf;};if _ee &0x02!=0{_ffa [_ee ]|=0xf0;};if _ee &0x04!=0{_ffa [_ee ]|=0xf00;};if _ee &0x08!=0{_ffa [_ee ]|=0xf000;};if _ee &0x10!=0{_ffa [_ee ]|=0xf0000;
};if _ee &0x20!=0{_ffa [_ee ]|=0xf00000;};if _ee &0x40!=0{_ffa [_ee ]|=0xf000000;};if _ee &0x80!=0{_ffa [_ee ]|=0xf0000000;};};return _ffa ;};var _ Gray =&Gray2 {};func (_gaea *RGBA32 )Base ()*ImageBase {return &_gaea .ImageBase };func (_bgfgc *NRGBA32 )SetNRGBA (x ,y int ,c _a .NRGBA ){_ccgg :=y *_bgfgc .Width +x ;
_becf :=3*_ccgg ;if _becf +2>=len (_bgfgc .Data ){return ;};_bgfgc .setRGBA (_ccgg ,c );};func (_daed *RGBA32 )At (x ,y int )_a .Color {_defag ,_ :=_daed .ColorAt (x ,y );return _defag };type shift int ;var (MonochromeConverter =ConverterFunc (_cefe );
Gray2Converter =ConverterFunc (_beff );Gray4Converter =ConverterFunc (_eca );GrayConverter =ConverterFunc (_fcdea );Gray16Converter =ConverterFunc (_fbcf );NRGBA16Converter =ConverterFunc (_aded );NRGBAConverter =ConverterFunc (_dcdb );NRGBA64Converter =ConverterFunc (_gaa );
RGBAConverter =ConverterFunc (_gfd );CMYKConverter =ConverterFunc (_fcge ););func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_gdgfe :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_gdgfe .Data =make ([]byte ,height *_gdgfe .BytesPerLine );};return _gdgfe ;};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_a .Gray16 ,error ){_bbed :=(y *bytesPerLine /2+x )*2;if _bbed +1>=len (data ){return _a .Gray16 {},_gb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cfda :=uint16 (data [_bbed ])<<8|uint16 (data [_bbed +1]);if len (decode )==2{_cfda =uint16 (uint64 (LinearInterpolate (float64 (_cfda ),0,65535,decode [0],decode [1])));};return _a .Gray16 {Y :_cfda },nil ;};func (_gfac *ImageBase )Pix ()[]byte {return _gfac .Data };
func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_a .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );
case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_gb .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func (_eefa *Gray16 )Validate ()error {if len (_eefa .Data )!=_eefa .Height *_eefa .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_cde *Monochrome )Histogram ()(_dbce [256]int ){for _ ,_dfc :=range _cde .Data {_dbce [0xff]+=int (_aedf [_cde .Data [_dfc ]]);
};return _dbce ;};var _ _g .Image =&Gray8 {};func (_edagc *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _efea (_edagc ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_abab *NRGBA32 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_abab .Width ,Y :_abab .Height }};
};func (_bcba *NRGBA32 )Set (x ,y int ,c _a .Color ){_abcg :=y *_bcba .Width +x ;_aadaf :=3*_abcg ;if _aadaf +2>=len (_bcba .Data ){return ;};_agba :=_a .NRGBAModel .Convert (c ).(_a .NRGBA );_bcba .setRGBA (_abcg ,_agba );};func (_ceeg *RGBA32 )ColorModel ()_a .Model {return _a .NRGBAModel };
func _fd (_ec *Monochrome ,_dd int ,_bee []uint )(*Monochrome ,error ){_ag :=_dd *_ec .Width ;_ca :=_dd *_ec .Height ;_cac :=_eeg (_ag ,_ca );for _fdd ,_ff :=range _bee {var _agc error ;switch _ff {case 2:_agc =_faf (_cac ,_ec );case 4:_agc =_cc (_cac ,_ec );
case 8:_agc =_gdf (_cac ,_ec );};if _agc !=nil {return nil ,_agc ;};if _fdd !=len (_bee )-1{_ec =_cac .copy ();};};return _cac ,nil ;};var _ Image =&NRGBA64 {};type CMYK interface{CMYKAt (_ddfg ,_cgee int )_a .CMYK ;SetCMYK (_ebc ,_fggb int ,_dfd _a .CMYK );
};func (_ddaf *ImageBase )MakeAlpha (){_ddaf .newAlpha ()};func _dbcb (_dfge _a .Gray ,_cbf monochromeModel )_a .Gray {if _dfge .Y > uint8 (_cbf ){return _a .Gray {Y :_d .MaxUint8 };};return _a .Gray {};};func (_fccf *ImageBase )setByte (_eeba int ,_gefd byte )error {if _eeba > len (_fccf .Data )-1{return _b .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fccf .Data [_eeba ]=_gefd ;return nil ;};func _be (_fb *Monochrome ,_ef int )(*Monochrome ,error ){if _fb ==nil {return nil ,_b .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ef ==1{return _fb .copy (),nil ;
};if !IsPowerOf2 (uint (_ef )){return nil ,_gb .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_ef );};_gag :=_gg (_ef );
return _fd (_fb ,_ef ,_gag );};func _cc (_dg ,_edf *Monochrome )(_gc error ){_dbd :=_edf .BytesPerLine ;_cg :=_dg .BytesPerLine ;_fde :=_edf .BytesPerLine *4-_dg .BytesPerLine ;var (_ba ,_gd byte ;_dc uint32 ;_deg ,_fag ,_eb ,_age ,_ecf ,_ea ,_eda int ;
);for _eb =0;_eb < _edf .Height ;_eb ++{_deg =_eb *_dbd ;_fag =4*_eb *_cg ;for _age =0;_age < _dbd ;_age ++{_ba =_edf .Data [_deg +_age ];_dc =_ffcf [_ba ];_ea =_fag +_age *4;if _fde !=0&&(_age +1)*4> _dg .BytesPerLine {for _ecf =_fde ;_ecf > 0;_ecf --{_gd =byte ((_dc >>uint (_ecf *8))&0xff);
_eda =_ea +(_fde -_ecf );if _gc =_dg .setByte (_eda ,_gd );_gc !=nil {return _gc ;};};}else if _gc =_dg .setFourBytes (_ea ,_dc );_gc !=nil {return _gc ;};if _gc =_dg .setFourBytes (_fag +_age *4,_ffcf [_edf .Data [_deg +_age ]]);_gc !=nil {return _gc ;
};};for _ecf =1;_ecf < 4;_ecf ++{for _age =0;_age < _cg ;_age ++{if _gc =_dg .setByte (_fag +_ecf *_cg +_age ,_dg .Data [_fag +_age ]);_gc !=nil {return _gc ;};};};};return nil ;};func (_dbea *NRGBA64 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_dbea .Width ,Y :_dbea .Height }};
};func _abdf (_eaf _a .NRGBA )_a .RGBA {_edag ,_abde ,_gdg ,_gff :=_eaf .RGBA ();return _a .RGBA {R :uint8 (_edag >>8),G :uint8 (_abde >>8),B :uint8 (_gdg >>8),A :uint8 (_gff >>8)};};var _ _g .Image =&Gray16 {};func (_ade *Monochrome )ColorAt (x ,y int )(_a .Color ,error ){return ColorAtGray1BPC (x ,y ,_ade .BytesPerLine ,_ade .Data ,_ade .Decode );
};func (_cebg *Gray4 )setGray (_dcbg int ,_fbcb int ,_efbf _a .Gray ){_ecb :=_fbcb *_cebg .BytesPerLine ;_cga :=_ecb +(_dcbg >>1);if _cga >=len (_cebg .Data ){return ;};_cggg :=_efbf .Y >>4;_cebg .Data [_cga ]=(_cebg .Data [_cga ]&(^(0xf0>>uint (4*(_dcbg &1)))))|(_cggg <<uint (4-4*(_dcbg &1)));
};func _cdbe (_gga _a .NRGBA )_a .Gray {var _efdc _a .NRGBA ;if _gga ==_efdc {return _a .Gray {Y :0xff};};_eed ,_afd ,_efca ,_ :=_gga .RGBA ();_bbec :=(19595*_eed +38470*_afd +7471*_efca +1<<15)>>24;return _a .Gray {Y :uint8 (_bbec )};};func _afae (_ddfd Gray ,_ebe nrgba64 ,_dbfb _g .Rectangle ){for _cfde :=0;
_cfde < _dbfb .Max .X ;_cfde ++{for _beba :=0;_beba < _dbfb .Max .Y ;_beba ++{_afe :=_gbe (_ebe .NRGBA64At (_cfde ,_beba ));_ddfd .SetGray (_cfde ,_beba ,_afe );};};};func _dead (_caab *Monochrome ,_fffd ,_afag ,_dbe ,_cbgd int ,_eggg RasterOperator ){if _fffd < 0{_dbe +=_fffd ;
_fffd =0;};_ebgf :=_fffd +_dbe -_caab .Width ;if _ebgf > 0{_dbe -=_ebgf ;};if _afag < 0{_cbgd +=_afag ;_afag =0;};_dfaad :=_afag +_cbgd -_caab .Height ;if _dfaad > 0{_cbgd -=_dfaad ;};if _dbe <=0||_cbgd <=0{return ;};if (_fffd &7)==0{_ffab (_caab ,_fffd ,_afag ,_dbe ,_cbgd ,_eggg );
}else {_dafb (_caab ,_fffd ,_afag ,_dbe ,_cbgd ,_eggg );};};var (_eaga =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_bbbe =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_cdac *Gray16 )Base ()*ImageBase {return &_cdac .ImageBase };
func _agd (_cee _a .Gray )_a .CMYK {return _a .CMYK {K :0xff-_cee .Y }};func (_afg *Monochrome )setBit (_feeg ,_aff int ){_afg .Data [_feeg +(_aff >>3)]|=0x80>>uint (_aff &7)};func (_cbdb *Gray4 )At (x ,y int )_a .Color {_gdgf ,_ :=_cbdb .ColorAt (x ,y );
return _gdgf };func _fdcf (_egdc _a .Color )_a .Color {_ddab :=_a .NRGBAModel .Convert (_egdc ).(_a .NRGBA );return _gebf (_ddab );};func _fcdea (_gadb _g .Image )(Image ,error ){if _aaeg ,_ebb :=_gadb .(*Gray8 );_ebb {return _aaeg .Copy (),nil ;};_gbgf :=_gadb .Bounds ();
_fbdb ,_cgdb :=NewImage (_gbgf .Max .X ,_gbgf .Max .Y ,8,1,nil ,nil ,nil );if _cgdb !=nil {return nil ,_cgdb ;};_gbece (_gadb ,_fbdb ,_gbgf );return _fbdb ,nil ;};func _ebdc (_ccbc _a .CMYK )_a .RGBA {_cece ,_bfdg ,_bfbd :=_a .CMYKToRGB (_ccbc .C ,_ccbc .M ,_ccbc .Y ,_ccbc .K );
return _a .RGBA {R :_cece ,G :_bfdg ,B :_bfbd ,A :0xff};};func (_fgcce *NRGBA64 )Validate ()error {if len (_fgcce .Data )!=3*2*_fgcce .Width *_fgcce .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _gdf (_eg ,_af *Monochrome )(_bde error ){_cf :=_af .BytesPerLine ;_baa :=_eg .BytesPerLine ;var _df ,_cdb ,_caa ,_ffc ,_dea int ;for _caa =0;_caa < _af .Height ;_caa ++{_df =_caa *_cf ;_cdb =8*_caa *_baa ;for _ffc =0;_ffc < _cf ;_ffc ++{if _bde =_eg .setEightBytes (_cdb +_ffc *8,_fea [_af .Data [_df +_ffc ]]);
_bde !=nil {return _bde ;};};for _dea =1;_dea < 8;_dea ++{for _ffc =0;_ffc < _baa ;_ffc ++{if _bde =_eg .setByte (_cdb +_dea *_baa +_ffc ,_eg .Data [_cdb +_ffc ]);_bde !=nil {return _bde ;};};};};return nil ;};func _eca (_bbbg _g .Image )(Image ,error ){if _ccbb ,_ccfb :=_bbbg .(*Gray4 );
_ccfb {return _ccbb .Copy (),nil ;};_fgac :=_bbbg .Bounds ();_gdbe ,_ddd :=NewImage (_fgac .Max .X ,_fgac .Max .Y ,4,1,nil ,nil ,nil );if _ddd !=nil {return nil ,_ddd ;};_gbece (_bbbg ,_gdbe ,_fgac );return _gdbe ,nil ;};func (_bgac *ImageBase )HasAlpha ()bool {if _bgac .Alpha ==nil {return false ;
};for _dgbf :=range _bgac .Alpha {if _bgac .Alpha [_dgbf ]!=0xff{return true ;};};return false ;};type Gray8 struct{ImageBase };func (_bcga *Gray16 )Set (x ,y int ,c _a .Color ){_cffa :=(y *_bcga .BytesPerLine /2+x )*2;if _cffa +1>=len (_bcga .Data ){return ;
};_dcdf :=_a .Gray16Model .Convert (c ).(_a .Gray16 );_bcga .Data [_cffa ],_bcga .Data [_cffa +1]=uint8 (_dcdf .Y >>8),uint8 (_dcdf .Y &0xff);};func _bcb (_fbdf _g .Image ,_gad Image ,_ggb _g .Rectangle ){for _aegd :=0;_aegd < _ggb .Max .X ;_aegd ++{for _baed :=0;
_baed < _ggb .Max .Y ;_baed ++{_fce :=_fbdf .At (_aegd ,_baed );_gad .Set (_aegd ,_baed ,_fce );};};};func _aec (_aebf _a .CMYK )_a .Gray {_feaf ,_fbeg ,_eedb :=_a .CMYKToRGB (_aebf .C ,_aebf .M ,_aebf .Y ,_aebf .K );_adb :=(19595*uint32 (_feaf )+38470*uint32 (_fbeg )+7471*uint32 (_eedb )+1<<7)>>16;
return _a .Gray {Y :uint8 (_adb )};};func (_cada *Gray16 )ColorAt (x ,y int )(_a .Color ,error ){return ColorAtGray16BPC (x ,y ,_cada .BytesPerLine ,_cada .Data ,_cada .Decode );};func (_bcgf *NRGBA64 )SetNRGBA64 (x ,y int ,c _a .NRGBA64 ){_gefc :=(y *_bcgf .Width +x )*2;
_ddef :=_gefc *3;if _ddef +5>=len (_bcgf .Data ){return ;};_bcgf .setNRGBA64 (_ddef ,c ,_gefc );};func (_dda *Monochrome )setGray (_abdc int ,_aggd _a .Gray ,_dfce int ){if _aggd .Y ==0{_dda .clearBit (_dfce ,_abdc );}else {_dda .setGrayBit (_dfce ,_abdc );
};};func _aded (_addg _g .Image )(Image ,error ){if _eaebg ,_bgec :=_addg .(*NRGBA16 );_bgec {return _eaebg .Copy (),nil ;};_cdca :=_addg .Bounds ();_aegba ,_bgfg :=NewImage (_cdca .Max .X ,_cdca .Max .Y ,4,3,nil ,nil ,nil );if _bgfg !=nil {return nil ,_bgfg ;
};_gece (_addg ,_aegba ,_cdca );return _aegba ,nil ;};func (_bbfe *Monochrome )setIndexedBit (_eeca int ){_bbfe .Data [(_eeca >>3)]|=0x80>>uint (_eeca &7)};func (_eeaf *Gray2 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_eeaf .Width ,Y :_eeaf .Height }};
};func (_fccg *Gray16 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_fccg .Width ,Y :_fccg .Height }};};func (_acbc *NRGBA16 )At (x ,y int )_a .Color {_cagg ,_ :=_acbc .ColorAt (x ,y );return _cagg };func _bggc (_decc ,_adc *Monochrome ,_cge []byte ,_efbd int )(_beea error ){var (_eag ,_bca ,_dgbg ,_gfa ,_bfb ,_bade ,_gbd ,_gfb int ;
_cgc ,_ebf uint32 ;_bbd ,_ede byte ;_dgg uint16 ;);_bef :=make ([]byte ,4);_fbef :=make ([]byte ,4);for _dgbg =0;_dgbg < _decc .Height -1;_dgbg ,_gfa =_dgbg +2,_gfa +1{_eag =_dgbg *_decc .BytesPerLine ;_bca =_gfa *_adc .BytesPerLine ;for _bfb ,_bade =0,0;
_bfb < _efbd ;_bfb ,_bade =_bfb +4,_bade +1{for _gbd =0;_gbd < 4;_gbd ++{_gfb =_eag +_bfb +_gbd ;if _gfb <=len (_decc .Data )-1&&_gfb < _eag +_decc .BytesPerLine {_bef [_gbd ]=_decc .Data [_gfb ];}else {_bef [_gbd ]=0x00;};_gfb =_eag +_decc .BytesPerLine +_bfb +_gbd ;
if _gfb <=len (_decc .Data )-1&&_gfb < _eag +(2*_decc .BytesPerLine ){_fbef [_gbd ]=_decc .Data [_gfb ];}else {_fbef [_gbd ]=0x00;};};_cgc =_fg .BigEndian .Uint32 (_bef );_ebf =_fg .BigEndian .Uint32 (_fbef );_ebf &=_cgc ;_ebf &=_ebf <<1;_ebf &=0xaaaaaaaa;
_cgc =_ebf |(_ebf <<7);_bbd =byte (_cgc >>24);_ede =byte ((_cgc >>8)&0xff);_gfb =_bca +_bade ;if _gfb +1==len (_adc .Data )-1||_gfb +1>=_bca +_adc .BytesPerLine {_adc .Data [_gfb ]=_cge [_bbd ];if _beea =_adc .setByte (_gfb ,_cge [_bbd ]);_beea !=nil {return _gb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gfb );
};}else {_dgg =(uint16 (_cge [_bbd ])<<8)|uint16 (_cge [_ede ]);if _beea =_adc .setTwoBytes (_gfb ,_dgg );_beea !=nil {return _gb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gfb );
};_bade ++;};};};return nil ;};func _cdga (_fbdfd _a .RGBA )_a .Gray {_bffe :=(19595*uint32 (_fbdfd .R )+38470*uint32 (_fbdfd .G )+7471*uint32 (_fbdfd .B )+1<<7)>>16;return _a .Gray {Y :uint8 (_bffe )};};func _agef (_fbd ,_fgga int ,_cdd []byte )*Monochrome {_dfg :=_eeg (_fbd ,_fgga );
_dfg .Data =_cdd ;return _dfg ;};var _ Gray =&Monochrome {};func (_gffg *Gray16 )At (x ,y int )_a .Color {_afdf ,_ :=_gffg .ColorAt (x ,y );return _afdf };func (_egea *Gray4 )ColorAt (x ,y int )(_a .Color ,error ){return ColorAtGray4BPC (x ,y ,_egea .BytesPerLine ,_egea .Data ,_egea .Decode );
};func (_aebd *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_aebd .copy ()}};func (_gcbc *ImageBase )getByte (_fccd int )(byte ,error ){if _fccd > len (_gcbc .Data )-1||_fccd < 0{return 0,_gb .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_fccd );
};return _gcbc .Data [_fccd ],nil ;};func (_gfbb *Gray4 )Histogram ()(_cdaf [256]int ){for _beaa :=0;_beaa < _gfbb .Width ;_beaa ++{for _ebab :=0;_ebab < _gfbb .Height ;_ebab ++{_cdaf [_gfbb .GrayAt (_beaa ,_ebab ).Y ]++;};};return _cdaf ;};type RasterOperator int ;
func (_gce *Gray8 )Validate ()error {if len (_gce .Data )!=_gce .Height *_gce .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_gfbd *Gray8 )Base ()*ImageBase {return &_gfbd .ImageBase };func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _efea (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _dce (_fffe _a .NRGBA64 )_a .NRGBA {return _a .NRGBA {R :uint8 (_fffe .R >>8),G :uint8 (_fffe .G >>8),B :uint8 (_fffe .B >>8),A :uint8 (_fffe .A >>8)};};func (_ecg *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_ecg .copy ()}};func (_gacc *NRGBA32 )setRGBA (_eddf int ,_baac _a .NRGBA ){_efge :=3*_eddf ;
_gacc .Data [_efge ]=_baac .R ;_gacc .Data [_efge +1]=_baac .G ;_gacc .Data [_efge +2]=_baac .B ;if _eddf < len (_gacc .Alpha ){_gacc .Alpha [_eddf ]=_baac .A ;};};func MonochromeModel (threshold uint8 )_a .Model {return monochromeModel (threshold )};func _daf (_efaa _a .CMYK )_a .NRGBA {_fgae ,_aaff ,_edge :=_a .CMYKToRGB (_efaa .C ,_efaa .M ,_efaa .Y ,_efaa .K );
return _a .NRGBA {R :_fgae ,G :_aaff ,B :_edge ,A :0xff};};func (_defba *NRGBA16 )NRGBAAt (x ,y int )_a .NRGBA {_ggg ,_ :=ColorAtNRGBA16 (x ,y ,_defba .Width ,_defba .BytesPerLine ,_defba .Data ,_defba .Alpha ,_defba .Decode );return _ggg ;};func (_gdfc *Gray8 )At (x ,y int )_a .Color {_gcb ,_ :=_gdfc .ColorAt (x ,y );
return _gcb };func (_aada *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _be (_aada ,factor );};var ErrInvalidImage =_b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_a .CMYK ,error ){_egga :=4*(y *width +x );if _egga +3>=len (data ){return _a .CMYK {},_gb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_egga ]&0xff;M :=data [_egga +1]&0xff;Y :=data [_egga +2]&0xff;K :=data [_egga +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _a .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func _ecaf (_ddfce *Monochrome ,_gbag ,_edgea int ,_abdfd ,_agea int ,_efba RasterOperator ,_ggdd *Monochrome ,_bbaff ,_ccdc int )error {var _ccec ,_dded ,_afef ,_afdfc int ;
if _gbag < 0{_bbaff -=_gbag ;_abdfd +=_gbag ;_gbag =0;};if _bbaff < 0{_gbag -=_bbaff ;_abdfd +=_bbaff ;_bbaff =0;};_ccec =_gbag +_abdfd -_ddfce .Width ;if _ccec > 0{_abdfd -=_ccec ;};_dded =_bbaff +_abdfd -_ggdd .Width ;if _dded > 0{_abdfd -=_dded ;};if _edgea < 0{_ccdc -=_edgea ;
_agea +=_edgea ;_edgea =0;};if _ccdc < 0{_edgea -=_ccdc ;_agea +=_ccdc ;_ccdc =0;};_afef =_edgea +_agea -_ddfce .Height ;if _afef > 0{_agea -=_afef ;};_afdfc =_ccdc +_agea -_ggdd .Height ;if _afdfc > 0{_agea -=_afdfc ;};if _abdfd <=0||_agea <=0{return nil ;
};var _ccba error ;switch {case _gbag &7==0&&_bbaff &7==0:_ccba =_ffbd (_ddfce ,_gbag ,_edgea ,_abdfd ,_agea ,_efba ,_ggdd ,_bbaff ,_ccdc );case _gbag &7==_bbaff &7:_ccba =_befb (_ddfce ,_gbag ,_edgea ,_abdfd ,_agea ,_efba ,_ggdd ,_bbaff ,_ccdc );default:_ccba =_cgga (_ddfce ,_gbag ,_edgea ,_abdfd ,_agea ,_efba ,_ggdd ,_bbaff ,_ccdc );
};if _ccba !=nil {return _ccba ;};return nil ;};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_gbc :=BytesPerLine (width ,8,1);if len (data )< _gbc *height {return nil ,nil ;};_fae :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};
_ga ,_c :=MonochromeConverter .Convert (_fae );if _c !=nil {return nil ,_c ;};return _ga .Base ().Data ,nil ;};type NRGBA interface{NRGBAAt (_dgcgc ,_abc int )_a .NRGBA ;SetNRGBA (_gcbef ,_cfdg int ,_fdcg _a .NRGBA );};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_gb .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_bdfg *Gray8 )ColorModel ()_a .Model {return _a .GrayModel };func _gbece (_ceaa _g .Image ,_bdbd Image ,_bccf _g .Rectangle ){switch _bceb :=_ceaa .(type ){case Gray :_fbga (_bceb ,_bdbd .(Gray ),_bccf );case NRGBA :_dae (_bceb ,_bdbd .(Gray ),_bccf );
case CMYK :_gdda (_bceb ,_bdbd .(Gray ),_bccf );case RGBA :_cfg (_bceb ,_bdbd .(Gray ),_bccf );default:_bcb (_ceaa ,_bdbd ,_bccf );};};type CMYK32 struct{ImageBase };func _cefe (_eaagd _g .Image )(Image ,error ){if _cfd ,_gfc :=_eaagd .(*Monochrome );_gfc {return _cfd ,nil ;
};_gef :=_eaagd .Bounds ();var _fdbab Gray ;switch _aced :=_eaagd .(type ){case Gray :_fdbab =_aced ;case NRGBA :_fdbab =&Gray8 {ImageBase :NewImageBase (_gef .Max .X ,_gef .Max .Y ,8,1,nil ,nil ,nil )};_edef (_fdbab ,_aced ,_gef );case nrgba64 :_fdbab =&Gray8 {ImageBase :NewImageBase (_gef .Max .X ,_gef .Max .Y ,8,1,nil ,nil ,nil )};
_afae (_fdbab ,_aced ,_gef );default:_abe ,_daab :=GrayConverter .Convert (_eaagd );if _daab !=nil {return nil ,_daab ;};_fdbab =_abe .(Gray );};_dac ,_bebf :=NewImage (_gef .Max .X ,_gef .Max .Y ,1,1,nil ,nil ,nil );if _bebf !=nil {return nil ,_bebf ;
};_ged :=_dac .(*Monochrome );_badf :=AutoThresholdTriangle (GrayHistogram (_fdbab ));for _dbg :=0;_dbg < _gef .Max .X ;_dbg ++{for _fee :=0;_fee < _gef .Max .Y ;_fee ++{_edeb :=_dbcb (_fdbab .GrayAt (_dbg ,_fee ),monochromeModel (_badf ));_ged .SetGray (_dbg ,_fee ,_edeb );
};};return _dac ,nil ;};var _aedf [256]uint8 ;func _ffff (_cacc *_g .Gray ,_egggc uint8 )*_g .Gray {_aeggf :=_cacc .Bounds ();_bgdb :=_g .NewGray (_aeggf );for _cbafg :=0;_cbafg < _aeggf .Dx ();_cbafg ++{for _fgaeb :=0;_fgaeb < _aeggf .Dy ();_fgaeb ++{_aecf :=_cacc .GrayAt (_cbafg ,_fgaeb );
_bgdb .SetGray (_cbafg ,_fgaeb ,_a .Gray {Y :_cgfe (_aecf .Y ,_egggc )});};};return _bgdb ;};func _fedb (_bdde nrgba64 ,_eefb NRGBA ,_dee _g .Rectangle ){for _gefdf :=0;_gefdf < _dee .Max .X ;_gefdf ++{for _cfdd :=0;_cfdd < _dee .Max .Y ;_cfdd ++{_eecf :=_bdde .NRGBA64At (_gefdf ,_cfdd );
_eefb .SetNRGBA (_gefdf ,_cfdd ,_dce (_eecf ));};};};func _cegee (_dbdb uint8 )bool {if _dbdb ==0||_dbdb ==255{return true ;};return false ;};func (_ecga *NRGBA32 )Validate ()error {if len (_ecga .Data )!=3*_ecga .Width *_ecga .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_cebb *Gray4 )Validate ()error {if len (_cebb .Data )!=_cebb .Height *_cebb .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _ccc (_egc *Monochrome ,_ab ,_dgb int )(*Monochrome ,error ){if _egc ==nil {return nil ,_b .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _ab <=0||_dgb <=0{return nil ,_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _ab ==_dgb {if _ab ==1{return _egc .copy (),nil ;};if _ab ==2||_ab ==4||_ab ==8{_bad ,_gcf :=_be (_egc ,_ab );
if _gcf !=nil {return nil ,_gcf ;};return _bad ,nil ;};};_dbc :=_ab *_egc .Width ;_bdb :=_dgb *_egc .Height ;_beef :=_eeg (_dbc ,_bdb );_cfe :=_beef .BytesPerLine ;var (_bg ,_aba ,_fgb ,_ae ,_fc int ;_agb byte ;_ega error ;);for _aba =0;_aba < _egc .Height ;
_aba ++{_bg =_dgb *_aba *_cfe ;for _fgb =0;_fgb < _egc .Width ;_fgb ++{if _ebd :=_egc .getBitAt (_fgb ,_aba );_ebd {_fc =_ab *_fgb ;for _ae =0;_ae < _ab ;_ae ++{_beef .setIndexedBit (_bg *8+_fc +_ae );};};};for _ae =1;_ae < _dgb ;_ae ++{_gcc :=_bg +_ae *_cfe ;
for _dgc :=0;_dgc < _cfe ;_dgc ++{if _agb ,_ega =_beef .getByte (_bg +_dgc );_ega !=nil {return nil ,_ega ;};if _ega =_beef .setByte (_gcc +_dgc ,_agb );_ega !=nil {return nil ,_ega ;};};};};return _beef ,nil ;};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_a .NRGBA ,error ){_dgce :=y *bytesPerLine +x *3/2;
if _dgce +1>=len (data ){return _a .NRGBA {},_ddac (x ,y );};const (_efbdb =0xf;_fgcf =uint8 (0xff););_cggbd :=_fgcf ;if alpha !=nil {_egfd :=y *BytesPerLine (width ,4,1);if _egfd < len (alpha ){if x %2==0{_cggbd =(alpha [_egfd ]>>uint (4))&_efbdb ;}else {_cggbd =alpha [_egfd ]&_efbdb ;
};_cggbd |=_cggbd <<4;};};var _deaa ,_cdbb ,_aeag uint8 ;if x *3%2==0{_deaa =(data [_dgce ]>>uint (4))&_efbdb ;_cdbb =data [_dgce ]&_efbdb ;_aeag =(data [_dgce +1]>>uint (4))&_efbdb ;}else {_deaa =data [_dgce ]&_efbdb ;_cdbb =(data [_dgce +1]>>uint (4))&_efbdb ;
_aeag =data [_dgce +1]&_efbdb ;};if len (decode )==6{_deaa =uint8 (uint32 (LinearInterpolate (float64 (_deaa ),0,15,decode [0],decode [1]))&0xf);_cdbb =uint8 (uint32 (LinearInterpolate (float64 (_cdbb ),0,15,decode [2],decode [3]))&0xf);_aeag =uint8 (uint32 (LinearInterpolate (float64 (_aeag ),0,15,decode [4],decode [5]))&0xf);
};return _a .NRGBA {R :(_deaa <<4)|(_deaa &0xf),G :(_cdbb <<4)|(_cdbb &0xf),B :(_aeag <<4)|(_aeag &0xf),A :_cggbd },nil ;};func (_egce *NRGBA16 )Set (x ,y int ,c _a .Color ){_gbfcc :=y *_egce .BytesPerLine +x *3/2;if _gbfcc +1>=len (_egce .Data ){return ;
};_agefb :=NRGBA16Model .Convert (c ).(_a .NRGBA );_egce .setNRGBA (x ,y ,_gbfcc ,_agefb );};func _fdca (_fdgcc ,_ffe ,_acad byte )byte {return (_fdgcc &^(_acad ))|(_ffe &_acad )};func (_fec *Gray2 )Set (x ,y int ,c _a .Color ){if x >=_fec .Width ||y >=_fec .Height {return ;
};_cefb :=Gray2Model .Convert (c ).(_a .Gray );_dcf :=y *_fec .BytesPerLine ;_baee :=_dcf +(x >>2);_cege :=_cefb .Y >>6;_fec .Data [_baee ]=(_fec .Data [_baee ]&(^(0xc0>>uint (2*((x )&3)))))|(_cege <<uint (6-2*(x &3)));};func _dcdb (_ebdf _g .Image )(Image ,error ){if _cgaa ,_eegba :=_ebdf .(*NRGBA32 );
_eegba {return _cgaa .Copy (),nil ;};_adgd ,_bbfd ,_gdgg :=_ddca (_ebdf ,1);_abeb ,_fbcg :=NewImage (_adgd .Max .X ,_adgd .Max .Y ,8,3,nil ,_gdgg ,nil );if _fbcg !=nil {return nil ,_fbcg ;};_gece (_ebdf ,_abeb ,_adgd );if len (_gdgg )!=0&&!_bbfd {if _acaac :=_gcbb (_gdgg ,_abeb );
_acaac !=nil {return nil ,_acaac ;};};return _abeb ,nil ;};func (_afaa *Gray8 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_afaa .Width ,Y :_afaa .Height }};};type Gray2 struct{ImageBase };func (_accaa *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_accaa .copy ()}};
func _cbd (_agee ,_fdgf CMYK ,_degf _g .Rectangle ){for _fad :=0;_fad < _degf .Max .X ;_fad ++{for _cff :=0;_cff < _degf .Max .Y ;_cff ++{_fdgf .SetCMYK (_fad ,_cff ,_agee .CMYKAt (_fad ,_cff ));};};};func (_fggc *CMYK32 )Base ()*ImageBase {return &_fggc .ImageBase };
type Gray16 struct{ImageBase };func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_a .NRGBA64 ,error ){_faad :=(y *width +x )*2;_dfcd :=_faad *3;if _dfcd +5>=len (data ){return _a .NRGBA64 {},_gb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _gaeb =0xffff;_dgabg :=uint16 (_gaeb );if alpha !=nil &&len (alpha )> _faad +1{_dgabg =uint16 (alpha [_faad ])<<8|uint16 (alpha [_faad +1]);};_fgaa :=uint16 (data [_dfcd ])<<8|uint16 (data [_dfcd +1]);_edfg :=uint16 (data [_dfcd +2])<<8|uint16 (data [_dfcd +3]);
_bgcf :=uint16 (data [_dfcd +4])<<8|uint16 (data [_dfcd +5]);if len (decode )==6{_fgaa =uint16 (uint64 (LinearInterpolate (float64 (_fgaa ),0,65535,decode [0],decode [1]))&_gaeb );_edfg =uint16 (uint64 (LinearInterpolate (float64 (_edfg ),0,65535,decode [2],decode [3]))&_gaeb );
_bgcf =uint16 (uint64 (LinearInterpolate (float64 (_bgcf ),0,65535,decode [4],decode [5]))&_gaeb );};return _a .NRGBA64 {R :_fgaa ,G :_edfg ,B :_bgcf ,A :_dgabg },nil ;};var _ _g .Image =&NRGBA64 {};var _ _g .Image =&RGBA32 {};func (_baff *NRGBA64 )NRGBA64At (x ,y int )_a .NRGBA64 {_bcd ,_ :=ColorAtNRGBA64 (x ,y ,_baff .Width ,_baff .Data ,_baff .Alpha ,_baff .Decode );
return _bcd ;};func _ebed (_dgdg *_g .NYCbCrA ,_bdfa RGBA ,_aeca _g .Rectangle ){for _edegc :=0;_edegc < _aeca .Max .X ;_edegc ++{for _fegg :=0;_fegg < _aeca .Max .Y ;_fegg ++{_fbfb :=_dgdg .NYCbCrAAt (_edegc ,_fegg );_bdfa .SetRGBA (_edegc ,_fegg ,_cgd (_fbfb ));
};};};func _eae (_faea _a .Gray )_a .NRGBA {return _a .NRGBA {R :_faea .Y ,G :_faea .Y ,B :_faea .Y ,A :0xff}};func (_eedba *Monochrome )Base ()*ImageBase {return &_eedba .ImageBase };type Histogramer interface{Histogram ()[256]int ;};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_egb :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _egb ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_dcad :=width *colorComponents *bitsPerComponent ;_ccac :=_egb *8;_efe :=8-(_ccac -_dcad );_cgfcb :=_fa .NewReader (data );_aabd :=_egb -1;_cfca :=make ([]byte ,_aabd );_bbg :=make ([]byte ,height *_egb );
_afea :=_fa .NewWriterMSB (_bbg );var _dacb uint64 ;var _ffbb error ;for _ggea :=0;_ggea < height ;_ggea ++{_ ,_ffbb =_cgfcb .Read (_cfca );if _ffbb !=nil {return nil ,_ffbb ;};_ ,_ffbb =_afea .Write (_cfca );if _ffbb !=nil {return nil ,_ffbb ;};_dacb ,_ffbb =_cgfcb .ReadBits (byte (_efe ));
if _ffbb !=nil {return nil ,_ffbb ;};_ ,_ffbb =_afea .WriteBits (_dacb ,_efe );if _ffbb !=nil {return nil ,_ffbb ;};_afea .FinishByte ();};return _bbg ,nil ;};func (_fagfc *NRGBA16 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_fagfc .Width ,Y :_fagfc .Height }};
};func (_gffe *Gray4 )GrayAt (x ,y int )_a .Gray {_ggaf ,_ :=ColorAtGray4BPC (x ,y ,_gffe .BytesPerLine ,_gffe .Data ,_gffe .Decode );return _ggaf ;};func (_fcab *CMYK32 )CMYKAt (x ,y int )_a .CMYK {_dff ,_ :=ColorAtCMYK (x ,y ,_fcab .Width ,_fcab .Data ,_fcab .Decode );
return _dff ;};func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_a .RGBA ,error ){_dffgb :=y *width +x ;_aaafa :=3*_dffgb ;if _aaafa +2>=len (data ){return _a .RGBA {},_gb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cdeb :=uint8 (0xff);if alpha !=nil &&len (alpha )> _dffgb {_cdeb =alpha [_dffgb ];};_dbae ,_eddfg ,_beee :=data [_aaafa ],data [_aaafa +1],data [_aaafa +2];if len (decode )==6{_dbae =uint8 (uint32 (LinearInterpolate (float64 (_dbae ),0,255,decode [0],decode [1]))&0xff);
_eddfg =uint8 (uint32 (LinearInterpolate (float64 (_eddfg ),0,255,decode [2],decode [3]))&0xff);_beee =uint8 (uint32 (LinearInterpolate (float64 (_beee ),0,255,decode [4],decode [5]))&0xff);};return _a .RGBA {R :_dbae ,G :_eddfg ,B :_beee ,A :_cdeb },nil ;
};func (_ggafe *NRGBA64 )At (x ,y int )_a .Color {_dfcc ,_ :=_ggafe .ColorAt (x ,y );return _dfcc };func _beff (_eee _g .Image )(Image ,error ){if _bgeb ,_aga :=_eee .(*Gray2 );_aga {return _bgeb .Copy (),nil ;};_gfca :=_eee .Bounds ();_cbg ,_gdga :=NewImage (_gfca .Max .X ,_gfca .Max .Y ,2,1,nil ,nil ,nil );
if _gdga !=nil {return nil ,_gdga ;};_gbece (_eee ,_cbg ,_gfca );return _cbg ,nil ;};func _gdgaf (_efed ,_gaaa RGBA ,_bgge _g .Rectangle ){for _acee :=0;_acee < _bgge .Max .X ;_acee ++{for _cdfb :=0;_cdfb < _bgge .Max .Y ;_cdfb ++{_gaaa .SetRGBA (_acee ,_cdfb ,_efed .RGBAAt (_acee ,_cdfb ));
};};};func _acgfd (_caac NRGBA ,_addd RGBA ,_fcee _g .Rectangle ){for _badae :=0;_badae < _fcee .Max .X ;_badae ++{for _efgd :=0;_efgd < _fcee .Max .Y ;_efgd ++{_dgdc :=_caac .NRGBAAt (_badae ,_efgd );_addd .SetRGBA (_badae ,_efgd ,_abdf (_dgdc ));};};
};func (_ggcd *NRGBA16 )ColorModel ()_a .Model {return NRGBA16Model };func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_bebe :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _bdeb Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_bdeb =&Monochrome {ImageBase :_bebe ,ModelThreshold :0x0f};case 2:_bdeb =&Gray2 {ImageBase :_bebe };case 4:_bdeb =&Gray4 {ImageBase :_bebe };case 8:_bdeb =&Gray8 {ImageBase :_bebe };
case 16:_bdeb =&Gray16 {ImageBase :_bebe };};case 3:switch bitsPerComponent {case 4:_bdeb =&NRGBA16 {ImageBase :_bebe };case 8:_bdeb =&NRGBA32 {ImageBase :_bebe };case 16:_bdeb =&NRGBA64 {ImageBase :_bebe };};case 4:_bdeb =&CMYK32 {ImageBase :_bebe };};
if _bdeb ==nil {return nil ,ErrInvalidImage ;};return _bdeb ,nil ;};func (_efec *RGBA32 )SetRGBA (x ,y int ,c _a .RGBA ){_geed :=y *_efec .Width +x ;_eagag :=3*_geed ;if _eagag +2>=len (_efec .Data ){return ;};_efec .setRGBA (_geed ,c );};func _dae (_cdaa NRGBA ,_fggf Gray ,_cbbe _g .Rectangle ){for _fab :=0;
_fab < _cbbe .Max .X ;_fab ++{for _gccc :=0;_gccc < _cbbe .Max .Y ;_gccc ++{_dddc :=_bcbg (_cdaa .NRGBAAt (_fab ,_gccc ));_fggf .SetGray (_fab ,_gccc ,_dddc );};};};func FromGoImage (i _g .Image )(Image ,error ){switch _ccccg :=i .(type ){case Image :return _ccccg .Copy (),nil ;
case Gray :return GrayConverter .Convert (i );case *_g .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_g .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};
type Gray interface{GrayAt (_eage ,_ggc int )_a .Gray ;SetGray (_eddb ,_fcc int ,_bcg _a .Gray );};func (_gbfa *RGBA32 )Set (x ,y int ,c _a .Color ){_agcg :=y *_gbfa .Width +x ;_aecg :=3*_agcg ;if _aecg +2>=len (_gbfa .Data ){return ;};_ebcd :=_a .RGBAModel .Convert (c ).(_a .RGBA );
_gbfa .setRGBA (_agcg ,_ebcd );};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func (_dbeb *RGBA32 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_dbeb .Width ,Y :_dbeb .Height }};};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_a .Gray ,error ){_bgca :=y *bytesPerLine +x >>2;
if _bgca >=len (data ){return _a .Gray {},_gb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_adf :=data [_bgca ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_adf =uint8 (uint32 (LinearInterpolate (float64 (_adf ),0,3.0,decode [0],decode [1]))&3);};return _a .Gray {Y :_adf *85},nil ;};func (_gcad *Gray8 )GrayAt (x ,y int )_a .Gray {_bdc ,_ :=ColorAtGray8BPC (x ,y ,_gcad .BytesPerLine ,_gcad .Data ,_gcad .Decode );
return _bdc ;};func _ce (_fgg *Monochrome ,_gbf ...int )(_cfa *Monochrome ,_cda error ){if _fgg ==nil {return nil ,_b .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_gbf )==0{return nil ,_b .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_fdf :=_agbb ();_cfa =_fgg ;for _ ,_ceg :=range _gbf {if _ceg <=0{break ;};_cfa ,_cda =_dfa (_cfa ,_ceg ,_fdf );if _cda !=nil {return nil ,_cda ;};};return _cfa ,nil ;};func ImgToGray (i _g .Image )*_g .Gray {if _agae ,_feef :=i .(*_g .Gray );_feef {return _agae ;
};_cbag :=i .Bounds ();_efcae :=_g .NewGray (_cbag );for _geea :=0;_geea < _cbag .Max .X ;_geea ++{for _befa :=0;_befa < _cbag .Max .Y ;_befa ++{_becd :=i .At (_geea ,_befa );_efcae .Set (_geea ,_befa ,_becd );};};return _efcae ;};func _gdda (_ddeb CMYK ,_dabf Gray ,_ada _g .Rectangle ){for _fdcb :=0;
_fdcb < _ada .Max .X ;_fdcb ++{for _cbaf :=0;_cbaf < _ada .Max .Y ;_cbaf ++{_cdee :=_aec (_ddeb .CMYKAt (_fdcb ,_cbaf ));_dabf .SetGray (_fdcb ,_cbaf ,_cdee );};};};func (_cad *Monochrome )getBit (_acaa ,_fdfg int )uint8 {return _cad .Data [_acaa +(_fdfg >>3)]>>uint (7-(_fdfg &7))&1;
};func _dafb (_gbfc *Monochrome ,_cbbg ,_agage int ,_gaba ,_dbdca int ,_ggfc RasterOperator ){var (_bag bool ;_fadb bool ;_gcgg int ;_fgbg int ;_fcdc int ;_gecb int ;_bfbde bool ;_bdad byte ;);_agfg :=8-(_cbbg &7);_ggdc :=_bbbe [_agfg ];_ebbf :=_gbfc .BytesPerLine *_agage +(_cbbg >>3);
if _gaba < _agfg {_bag =true ;_ggdc &=_eaga [8-_agfg +_gaba ];};if !_bag {_gcgg =(_gaba -_agfg )>>3;if _gcgg !=0{_fadb =true ;_fgbg =_ebbf +1;};};_fcdc =(_cbbg +_gaba )&7;if !(_bag ||_fcdc ==0){_bfbde =true ;_bdad =_eaga [_fcdc ];_gecb =_ebbf +1+_gcgg ;
};var _bcgc ,_cfaa int ;switch _ggfc {case PixClr :for _bcgc =0;_bcgc < _dbdca ;_bcgc ++{_gbfc .Data [_ebbf ]=_fdca (_gbfc .Data [_ebbf ],0x0,_ggdc );_ebbf +=_gbfc .BytesPerLine ;};if _fadb {for _bcgc =0;_bcgc < _dbdca ;_bcgc ++{for _cfaa =0;_cfaa < _gcgg ;
_cfaa ++{_gbfc .Data [_fgbg +_cfaa ]=0x0;};_fgbg +=_gbfc .BytesPerLine ;};};if _bfbde {for _bcgc =0;_bcgc < _dbdca ;_bcgc ++{_gbfc .Data [_gecb ]=_fdca (_gbfc .Data [_gecb ],0x0,_bdad );_gecb +=_gbfc .BytesPerLine ;};};case PixSet :for _bcgc =0;_bcgc < _dbdca ;
_bcgc ++{_gbfc .Data [_ebbf ]=_fdca (_gbfc .Data [_ebbf ],0xff,_ggdc );_ebbf +=_gbfc .BytesPerLine ;};if _fadb {for _bcgc =0;_bcgc < _dbdca ;_bcgc ++{for _cfaa =0;_cfaa < _gcgg ;_cfaa ++{_gbfc .Data [_fgbg +_cfaa ]=0xff;};_fgbg +=_gbfc .BytesPerLine ;};
};if _bfbde {for _bcgc =0;_bcgc < _dbdca ;_bcgc ++{_gbfc .Data [_gecb ]=_fdca (_gbfc .Data [_gecb ],0xff,_bdad );_gecb +=_gbfc .BytesPerLine ;};};case PixNotDst :for _bcgc =0;_bcgc < _dbdca ;_bcgc ++{_gbfc .Data [_ebbf ]=_fdca (_gbfc .Data [_ebbf ],^_gbfc .Data [_ebbf ],_ggdc );
_ebbf +=_gbfc .BytesPerLine ;};if _fadb {for _bcgc =0;_bcgc < _dbdca ;_bcgc ++{for _cfaa =0;_cfaa < _gcgg ;_cfaa ++{_gbfc .Data [_fgbg +_cfaa ]=^(_gbfc .Data [_fgbg +_cfaa ]);};_fgbg +=_gbfc .BytesPerLine ;};};if _bfbde {for _bcgc =0;_bcgc < _dbdca ;_bcgc ++{_gbfc .Data [_gecb ]=_fdca (_gbfc .Data [_gecb ],^_gbfc .Data [_gecb ],_bdad );
_gecb +=_gbfc .BytesPerLine ;};};};};func (_defe *Gray2 )ColorModel ()_a .Model {return Gray2Model };func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};func (_cca *CMYK32 )Validate ()error {if len (_cca .Data )!=4*_cca .Width *_cca .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ Image =&RGBA32 {};func _dbf (_eeb _a .NRGBA64 )_a .RGBA {_bda ,_ffbg ,_fagf ,_edgb :=_eeb .RGBA ();return _a .RGBA {R :uint8 (_bda >>8),G :uint8 (_ffbg >>8),B :uint8 (_fagf >>8),A :uint8 (_edgb >>8)};};type monochromeThresholdConverter struct{Threshold uint8 ;
};func (_fdfea *NRGBA64 )setNRGBA64 (_deaae int ,_efbc _a .NRGBA64 ,_gdfd int ){_fdfea .Data [_deaae ]=uint8 (_efbc .R >>8);_fdfea .Data [_deaae +1]=uint8 (_efbc .R &0xff);_fdfea .Data [_deaae +2]=uint8 (_efbc .G >>8);_fdfea .Data [_deaae +3]=uint8 (_efbc .G &0xff);
_fdfea .Data [_deaae +4]=uint8 (_efbc .B >>8);_fdfea .Data [_deaae +5]=uint8 (_efbc .B &0xff);if _gdfd +1< len (_fdfea .Alpha ){_fdfea .Alpha [_gdfd ]=uint8 (_efbc .A >>8);_fdfea .Alpha [_gdfd +1]=uint8 (_efbc .A &0xff);};};func _gfe (_ccd ,_efb *Monochrome ,_dfb []byte ,_fbe int )(_bae error ){var (_cgb ,_cdg ,_def ,_bea ,_cef ,_edg ,_efc ,_dgd int ;
_aegg ,_bce ,_afb ,_fca uint32 ;_gea ,_dgcg byte ;_dca uint16 ;);_aab :=make ([]byte ,4);_fdg :=make ([]byte ,4);for _def =0;_def < _ccd .Height -1;_def ,_bea =_def +2,_bea +1{_cgb =_def *_ccd .BytesPerLine ;_cdg =_bea *_efb .BytesPerLine ;for _cef ,_edg =0,0;
_cef < _fbe ;_cef ,_edg =_cef +4,_edg +1{for _efc =0;_efc < 4;_efc ++{_dgd =_cgb +_cef +_efc ;if _dgd <=len (_ccd .Data )-1&&_dgd < _cgb +_ccd .BytesPerLine {_aab [_efc ]=_ccd .Data [_dgd ];}else {_aab [_efc ]=0x00;};_dgd =_cgb +_ccd .BytesPerLine +_cef +_efc ;
if _dgd <=len (_ccd .Data )-1&&_dgd < _cgb +(2*_ccd .BytesPerLine ){_fdg [_efc ]=_ccd .Data [_dgd ];}else {_fdg [_efc ]=0x00;};};_aegg =_fg .BigEndian .Uint32 (_aab );_bce =_fg .BigEndian .Uint32 (_fdg );_afb =_aegg &_bce ;_afb |=_afb <<1;_fca =_aegg |_bce ;
_fca &=_fca <<1;_bce =_afb |_fca ;_bce &=0xaaaaaaaa;_aegg =_bce |(_bce <<7);_gea =byte (_aegg >>24);_dgcg =byte ((_aegg >>8)&0xff);_dgd =_cdg +_edg ;if _dgd +1==len (_efb .Data )-1||_dgd +1>=_cdg +_efb .BytesPerLine {if _bae =_efb .setByte (_dgd ,_dfb [_gea ]);
_bae !=nil {return _gb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dgd );};}else {_dca =(uint16 (_dfb [_gea ])<<8)|uint16 (_dfb [_dgcg ]);if _bae =_efb .setTwoBytes (_dgd ,_dca );_bae !=nil {return _gb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dgd );
};_edg ++;};};};return nil ;};var _ _g .Image =&Gray4 {};type nrgba64 interface{NRGBA64At (_efcadc ,_agbac int )_a .NRGBA64 ;SetNRGBA64 (_dgff ,_dacd int ,_faa _a .NRGBA64 );};func _fcge (_dbba _g .Image )(Image ,error ){if _gbfe ,_beb :=_dbba .(*CMYK32 );
_beb {return _gbfe .Copy (),nil ;};_afbd :=_dbba .Bounds ();_fgbf ,_aaa :=NewImage (_afbd .Max .X ,_afbd .Max .Y ,8,4,nil ,nil ,nil );if _aaa !=nil {return nil ,_aaa ;};switch _dbbd :=_dbba .(type ){case CMYK :_cbd (_dbbd ,_fgbf .(CMYK ),_afbd );case Gray :_cdc (_dbbd ,_fgbf .(CMYK ),_afbd );
case NRGBA :_dfag (_dbbd ,_fgbf .(CMYK ),_afbd );case RGBA :_dcg (_dbbd ,_fgbf .(CMYK ),_afbd );default:_bcb (_dbba ,_fgbf ,_afbd );};return _fgbf ,nil ;};func InDelta (expected ,current ,delta float64 )bool {_bfbag :=expected -current ;if _bfbag <=-delta ||_bfbag >=delta {return false ;
};return true ;};func (_dcab *RGBA32 )setRGBA (_ebff int ,_dbfba _a .RGBA ){_deddg :=3*_ebff ;_dcab .Data [_deddg ]=_dbfba .R ;_dcab .Data [_deddg +1]=_dbfba .G ;_dcab .Data [_deddg +2]=_dbfba .B ;if _ebff < len (_dcab .Alpha ){_dcab .Alpha [_ebff ]=_dbfba .A ;
};};func _fbga (_edagd ,_eacc Gray ,_aaaf _g .Rectangle ){for _bgag :=0;_bgag < _aaaf .Max .X ;_bgag ++{for _efcad :=0;_efcad < _aaaf .Max .Y ;_efcad ++{_eacc .SetGray (_bgag ,_efcad ,_edagd .GrayAt (_bgag ,_efcad ));};};};func (_geec *NRGBA32 )NRGBAAt (x ,y int )_a .NRGBA {_cegg ,_ :=ColorAtNRGBA32 (x ,y ,_geec .Width ,_geec .Data ,_geec .Alpha ,_geec .Decode );
return _cegg ;};type colorConverter struct{_bbe func (_ffb _g .Image )(Image ,error );};func IsGrayImgBlackAndWhite (i *_g .Gray )bool {return _edfge (i )};func AutoThresholdTriangle (histogram [256]int )uint8 {var _fcfe ,_egbb ,_gceg ,_gcea int ;for _fcgfe :=0;
_fcgfe < len (histogram );_fcgfe ++{if histogram [_fcgfe ]> 0{_fcfe =_fcgfe ;break ;};};if _fcfe > 0{_fcfe --;};for _cgdd :=255;_cgdd > 0;_cgdd --{if histogram [_cgdd ]> 0{_gcea =_cgdd ;break ;};};if _gcea < 255{_gcea ++;};for _fagd :=0;_fagd < 256;_fagd ++{if histogram [_fagd ]> _egbb {_gceg =_fagd ;
_egbb =histogram [_fagd ];};};var _fgge bool ;if (_gceg -_fcfe )< (_gcea -_gceg ){_fgge =true ;var _dfdc int ;_ccce :=255;for _dfdc < _ccce {_ecfc :=histogram [_dfdc ];histogram [_dfdc ]=histogram [_ccce ];histogram [_ccce ]=_ecfc ;_dfdc ++;_ccce --;};
_fcfe =255-_gcea ;_gceg =255-_gceg ;};if _fcfe ==_gceg {return uint8 (_fcfe );};_egca :=float64 (histogram [_gceg ]);_dffa :=float64 (_fcfe -_gceg );_cfdf :=_d .Sqrt (_egca *_egca +_dffa *_dffa );_egca /=_cfdf ;_dffa /=_cfdf ;_cfdf =_egca *float64 (_fcfe )+_dffa *float64 (histogram [_fcfe ]);
_daae :=_fcfe ;var _cccd float64 ;for _ecdg :=_fcfe +1;_ecdg <=_gceg ;_ecdg ++{_beced :=_egca *float64 (_ecdg )+_dffa *float64 (histogram [_ecdg ])-_cfdf ;if _beced > _cccd {_daae =_ecdg ;_cccd =_beced ;};};_daae --;if _fgge {var _bfca int ;_faaf :=255;
for _bfca < _faaf {_fbbfd :=histogram [_bfca ];histogram [_bfca ]=histogram [_faaf ];histogram [_faaf ]=_fbbfd ;_bfca ++;_faaf --;};return uint8 (255-_daae );};return uint8 (_daae );};func _gdcg (_ecc _a .Gray )_a .RGBA {return _a .RGBA {R :_ecc .Y ,G :_ecc .Y ,B :_ecc .Y ,A :0xff}};
func (_eaaf *Monochrome )ResolveDecode ()error {if len (_eaaf .Decode )!=2{return nil ;};if _eaaf .Decode [0]==1&&_eaaf .Decode [1]==0{if _gdcf :=_eaaf .InverseData ();_gdcf !=nil {return _gdcf ;};_eaaf .Decode =nil ;};return nil ;};func (_bbaf *ImageBase )copy ()ImageBase {_egec :=*_bbaf ;
_egec .Data =make ([]byte ,len (_bbaf .Data ));copy (_egec .Data ,_bbaf .Data );return _egec ;};func _cgfe (_dbga ,_ebbc uint8 )uint8 {if _dbga < _ebbc {return 255;};return 0;};func (_feaec *Gray4 )SetGray (x ,y int ,g _a .Gray ){if x >=_feaec .Width ||y >=_feaec .Height {return ;
};g =_cfc (g );_feaec .setGray (x ,y ,g );};func (_dgbeg *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_dgbeg .copy ()}};var _ Image =&NRGBA16 {};func _aed (_bab _a .RGBA )_a .NRGBA {switch _bab .A {case 0xff:return _a .NRGBA {R :_bab .R ,G :_bab .G ,B :_bab .B ,A :0xff};
case 0x00:return _a .NRGBA {};default:_bgde ,_fage ,_deccb ,_cacd :=_bab .RGBA ();_bgde =(_bgde *0xffff)/_cacd ;_fage =(_fage *0xffff)/_cacd ;_deccb =(_deccb *0xffff)/_cacd ;return _a .NRGBA {R :uint8 (_bgde >>8),G :uint8 (_fage >>8),B :uint8 (_deccb >>8),A :uint8 (_cacd >>8)};
};};func (_acb *Gray4 )Base ()*ImageBase {return &_acb .ImageBase };func (_dcce *NRGBA32 )Base ()*ImageBase {return &_dcce .ImageBase };func (_baca *Monochrome )IsUnpadded ()bool {return (_baca .Width *_baca .Height )==len (_baca .Data )};type ImageBase struct{Width ,Height int ;
BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func (_ddfad *Gray16 )ColorModel ()_a .Model {return _a .Gray16Model };func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_a .NRGBA ,error ){_abdca :=y *width +x ;
_abcb :=3*_abdca ;if _abcb +2>=len (data ){return _a .NRGBA {},_gb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_egfgc :=uint8 (0xff);if alpha !=nil &&len (alpha )> _abdca {_egfgc =alpha [_abdca ];};_dgac ,_dcdg ,_gbb :=data [_abcb ],data [_abcb +1],data [_abcb +2];if len (decode )==6{_dgac =uint8 (uint32 (LinearInterpolate (float64 (_dgac ),0,255,decode [0],decode [1]))&0xff);
_dcdg =uint8 (uint32 (LinearInterpolate (float64 (_dcdg ),0,255,decode [2],decode [3]))&0xff);_gbb =uint8 (uint32 (LinearInterpolate (float64 (_gbb ),0,255,decode [4],decode [5]))&0xff);};return _a .NRGBA {R :_dgac ,G :_dcdg ,B :_gbb ,A :_egfgc },nil ;
};func _gfec (_eef _a .NRGBA )_a .CMYK {_fba ,_dgfg ,_fdgc ,_ :=_eef .RGBA ();_bbc ,_dfdf ,_efab ,_fcff :=_a .RGBToCMYK (uint8 (_fba >>8),uint8 (_dgfg >>8),uint8 (_fdgc >>8));return _a .CMYK {C :_bbc ,M :_dfdf ,Y :_efab ,K :_fcff };};func (_cfb *Gray16 )GrayAt (x ,y int )_a .Gray {_fcae ,_ :=_cfb .ColorAt (x ,y );
return _a .Gray {Y :uint8 (_fcae .(_a .Gray16 ).Y >>8)};};func _dfag (_dbdc NRGBA ,_acgf CMYK ,_deca _g .Rectangle ){for _cdbd :=0;_cdbd < _deca .Max .X ;_cdbd ++{for _bec :=0;_bec < _deca .Max .Y ;_bec ++{_bgc :=_dbdc .NRGBAAt (_cdbd ,_bec );_acgf .SetCMYK (_cdbd ,_bec ,_gfec (_bgc ));
};};};func (_abfc *NRGBA64 )Set (x ,y int ,c _a .Color ){_fegeb :=(y *_abfc .Width +x )*2;_bbfc :=_fegeb *3;if _bbfc +5>=len (_abfc .Data ){return ;};_fcgd :=_a .NRGBA64Model .Convert (c ).(_a .NRGBA64 );_abfc .setNRGBA64 (_bbfc ,_fcgd ,_fegeb );};var _ Gray =&Gray8 {};
func (_fcg *CMYK32 )ColorAt (x ,y int )(_a .Color ,error ){return ColorAtCMYK (x ,y ,_fcg .Width ,_fcg .Data ,_fcg .Decode );};func (_dafa *ImageBase )setEightFullBytes (_cccb int ,_agf uint64 )error {if _cccb +7> len (_dafa .Data )-1{return _b .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dafa .Data [_cccb ]=byte ((_agf &0xff00000000000000)>>56);_dafa .Data [_cccb +1]=byte ((_agf &0xff000000000000)>>48);_dafa .Data [_cccb +2]=byte ((_agf &0xff0000000000)>>40);_dafa .Data [_cccb +3]=byte ((_agf &0xff00000000)>>32);_dafa .Data [_cccb +4]=byte ((_agf &0xff000000)>>24);
_dafa .Data [_cccb +5]=byte ((_agf &0xff0000)>>16);_dafa .Data [_cccb +6]=byte ((_agf &0xff00)>>8);_dafa .Data [_cccb +7]=byte (_agf &0xff);return nil ;};func (_ffcfc *Gray2 )Histogram ()(_acfb [256]int ){for _beg :=0;_beg < _ffcfc .Width ;_beg ++{for _acac :=0;
_acac < _ffcfc .Height ;_acac ++{_acfb [_ffcfc .GrayAt (_beg ,_acac ).Y ]++;};};return _acfb ;};func (_eea *Monochrome )SetGray (x ,y int ,g _a .Gray ){_fdfe :=y *_eea .BytesPerLine +x >>3;if _fdfe > len (_eea .Data )-1{return ;};g =_dbcb (g ,monochromeModel (_eea .ModelThreshold ));
_eea .setGray (x ,g ,_fdfe );};var _ RGBA =&RGBA32 {};func (_dafbd *NRGBA32 )At (x ,y int )_a .Color {_gdbec ,_ :=_dafbd .ColorAt (x ,y );return _gdbec };func _add (_ccg ,_aca *Monochrome ,_gf []byte ,_fdb int )(_fdba error ){var (_ddfc ,_cegc ,_fbg ,_fef ,_egg ,_bed ,_fcd ,_fdde int ;
_bb ,_cfag uint32 ;_eec ,_cec byte ;_dgca uint16 ;);_cggd :=make ([]byte ,4);_aad :=make ([]byte ,4);for _fbg =0;_fbg < _ccg .Height -1;_fbg ,_fef =_fbg +2,_fef +1{_ddfc =_fbg *_ccg .BytesPerLine ;_cegc =_fef *_aca .BytesPerLine ;for _egg ,_bed =0,0;_egg < _fdb ;
_egg ,_bed =_egg +4,_bed +1{for _fcd =0;_fcd < 4;_fcd ++{_fdde =_ddfc +_egg +_fcd ;if _fdde <=len (_ccg .Data )-1&&_fdde < _ddfc +_ccg .BytesPerLine {_cggd [_fcd ]=_ccg .Data [_fdde ];}else {_cggd [_fcd ]=0x00;};_fdde =_ddfc +_ccg .BytesPerLine +_egg +_fcd ;
if _fdde <=len (_ccg .Data )-1&&_fdde < _ddfc +(2*_ccg .BytesPerLine ){_aad [_fcd ]=_ccg .Data [_fdde ];}else {_aad [_fcd ]=0x00;};};_bb =_fg .BigEndian .Uint32 (_cggd );_cfag =_fg .BigEndian .Uint32 (_aad );_cfag |=_bb ;_cfag |=_cfag <<1;_cfag &=0xaaaaaaaa;
_bb =_cfag |(_cfag <<7);_eec =byte (_bb >>24);_cec =byte ((_bb >>8)&0xff);_fdde =_cegc +_bed ;if _fdde +1==len (_aca .Data )-1||_fdde +1>=_cegc +_aca .BytesPerLine {_aca .Data [_fdde ]=_gf [_eec ];}else {_dgca =(uint16 (_gf [_eec ])<<8)|uint16 (_gf [_cec ]);
if _fdba =_aca .setTwoBytes (_fdde ,_dgca );_fdba !=nil {return _gb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fdde );
};_bed ++;};};};return nil ;};func _edef (_gdcc Gray ,_decf NRGBA ,_defd _g .Rectangle ){for _ddge :=0;_ddge < _defd .Max .X ;_ddge ++{for _gac :=0;_gac < _defd .Max .Y ;_gac ++{_fefed :=_cdbe (_decf .NRGBAAt (_ddge ,_gac ));_gdcc .SetGray (_ddge ,_gac ,_fefed );
};};};type NRGBA64 struct{ImageBase };func (_acf *CMYK32 )SetCMYK (x ,y int ,c _a .CMYK ){_gge :=4*(y *_acf .Width +x );if _gge +3>=len (_acf .Data ){return ;};_acf .Data [_gge ]=c .C ;_acf .Data [_gge +1]=c .M ;_acf .Data [_gge +2]=c .Y ;_acf .Data [_gge +3]=c .K ;
};func (_gdgc *Monochrome )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_gdgc .Width ,Y :_gdgc .Height }};};var (Gray2Model =_a .ModelFunc (_eegb );Gray4Model =_a .ModelFunc (_eddbe );NRGBA16Model =_a .ModelFunc (_fdcf ););func (_fcf *CMYK32 )Set (x ,y int ,c _a .Color ){_bcaag :=4*(y *_fcf .Width +x );
if _bcaag +3>=len (_fcf .Data ){return ;};_gfg :=_a .CMYKModel .Convert (c ).(_a .CMYK );_fcf .Data [_bcaag ]=_gfg .C ;_fcf .Data [_bcaag +1]=_gfg .M ;_fcf .Data [_bcaag +2]=_gfg .Y ;_fcf .Data [_bcaag +3]=_gfg .K ;};func _eebgd (_bfdggg Gray ,_fcdd RGBA ,_bdcc _g .Rectangle ){for _cfae :=0;
_cfae < _bdcc .Max .X ;_cfae ++{for _eeaea :=0;_eeaea < _bdcc .Max .Y ;_eeaea ++{_cbgg :=_bfdggg .GrayAt (_cfae ,_eeaea );_fcdd .SetRGBA (_cfae ,_eeaea ,_gdcg (_cbgg ));};};};type monochromeModel uint8 ;func (_gee *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_gee .copy ()}};
func (_baded *RGBA32 )ColorAt (x ,y int )(_a .Color ,error ){return ColorAtRGBA32 (x ,y ,_baded .Width ,_baded .Data ,_baded .Alpha ,_baded .Decode );};var _ _g .Image =&Gray2 {};var _ Image =&Monochrome {};func (_abef *Gray2 )GrayAt (x ,y int )_a .Gray {_ebdcc ,_ :=ColorAtGray2BPC (x ,y ,_abef .BytesPerLine ,_abef .Data ,_abef .Decode );
return _ebdcc ;};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_a .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );
case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_gb .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};const (_ecbe shift =iota ;_fafa ;);func _degb (_eegd _a .NYCbCrA )_a .NRGBA {_dege :=int32 (_eegd .Y )*0x10101;_ddg :=int32 (_eegd .Cb )-128;_ebfg :=int32 (_eegd .Cr )-128;_caae :=_dege +91881*_ebfg ;if uint32 (_caae )&0xff000000==0{_caae >>=8;}else {_caae =^(_caae >>31)&0xffff;
};_bdf :=_dege -22554*_ddg -46802*_ebfg ;if uint32 (_bdf )&0xff000000==0{_bdf >>=8;}else {_bdf =^(_bdf >>31)&0xffff;};_fbdff :=_dege +116130*_ddg ;if uint32 (_fbdff )&0xff000000==0{_fbdff >>=8;}else {_fbdff =^(_fbdff >>31)&0xffff;};return _a .NRGBA {R :uint8 (_caae >>8),G :uint8 (_bdf >>8),B :uint8 (_fbdff >>8),A :_eegd .A };
};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_a .Gray ,error ){_eba :=y *bytesPerLine +x >>3;if _eba >=len (data ){return _a .Gray {},_gb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dcbb :=data [_eba ]>>uint (7-(x &7))&1;if len (decode )==2{_dcbb =uint8 (LinearInterpolate (float64 (_dcbb ),0.0,1.0,decode [0],decode [1]))&1;};return _a .Gray {Y :_dcbb *255},nil ;};func _gebf (_dfed _a .NRGBA )_a .NRGBA {_dfed .R =_dfed .R >>4|(_dfed .R >>4)<<4;
_dfed .G =_dfed .G >>4|(_dfed .G >>4)<<4;_dfed .B =_dfed .B >>4|(_dfed .B >>4)<<4;return _dfed ;};func (_aecb *Monochrome )clearBit (_bada ,_cag int ){_aecb .Data [_bada ]&=^(0x80>>uint (_cag &7))};func (_fbgb *Monochrome )setGrayBit (_fbdg ,_bdd int ){_fbgb .Data [_fbdg ]|=0x80>>uint (_bdd &7)};
func _cgga (_dced *Monochrome ,_egfg ,_ccda ,_dfdg ,_dcfd int ,_afeg RasterOperator ,_aede *Monochrome ,_fgag ,_eefd int )error {var (_dega bool ;_fdec bool ;_bbbb byte ;_bdce int ;_cbe int ;_ebeg int ;_ffcc int ;_cfga bool ;_dbcc int ;_ebee int ;_ceceb int ;
_ffd bool ;_befg byte ;_accf int ;_bbfg int ;_agda int ;_ccfe byte ;_bggbe int ;_cefg int ;_eab uint ;_dedg uint ;_gecc byte ;_cfagb shift ;_fcfb bool ;_ffdf bool ;_dedd ,_bdbf int ;);if _fgag &7!=0{_cefg =8-(_fgag &7);};if _egfg &7!=0{_cbe =8-(_egfg &7);
};if _cefg ==0&&_cbe ==0{_gecc =_bbbe [0];}else {if _cbe > _cefg {_eab =uint (_cbe -_cefg );}else {_eab =uint (8-(_cefg -_cbe ));};_dedg =8-_eab ;_gecc =_bbbe [_eab ];};if (_egfg &7)!=0{_dega =true ;_bdce =8-(_egfg &7);_bbbb =_bbbe [_bdce ];_ebeg =_dced .BytesPerLine *_ccda +(_egfg >>3);
_ffcc =_aede .BytesPerLine *_eefd +(_fgag >>3);_bggbe =8-(_fgag &7);if _bdce > _bggbe {_cfagb =_ecbe ;if _dfdg >=_cefg {_fcfb =true ;};}else {_cfagb =_fafa ;};};if _dfdg < _bdce {_fdec =true ;_bbbb &=_eaga [8-_bdce +_dfdg ];};if !_fdec {_dbcc =(_dfdg -_bdce )>>3;
if _dbcc !=0{_cfga =true ;_ebee =_dced .BytesPerLine *_ccda +((_egfg +_cbe )>>3);_ceceb =_aede .BytesPerLine *_eefd +((_fgag +_cbe )>>3);};};_accf =(_egfg +_dfdg )&7;if !(_fdec ||_accf ==0){_ffd =true ;_befg =_eaga [_accf ];_bbfg =_dced .BytesPerLine *_ccda +((_egfg +_cbe )>>3)+_dbcc ;
_agda =_aede .BytesPerLine *_eefd +((_fgag +_cbe )>>3)+_dbcc ;if _accf > int (_dedg ){_ffdf =true ;};};switch _afeg {case PixSrc :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );
};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],_ccfe ,_bbbb );_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );
_dced .Data [_ebee +_bdbf ]=_ccfe ;};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;_dedd < _dcfd ;_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );};
_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],_ccfe ,_befg );_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;};};case PixNotSrc :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );
};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],^_ccfe ,_bbbb );_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );
_dced .Data [_ebee +_bdbf ]=^_ccfe ;};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;_dedd < _dcfd ;_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );
};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],^_ccfe ,_befg );_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;};};case PixSrcOrDst :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );
};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],_ccfe |_dced .Data [_ebeg ],_bbbb );_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;
_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );_dced .Data [_ebee +_bdbf ]|=_ccfe ;};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;_dedd < _dcfd ;
_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],_ccfe |_dced .Data [_bbfg ],_befg );_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;
};};case PixSrcAndDst :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],_ccfe &_dced .Data [_ebeg ],_bbbb );
_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );_dced .Data [_ebee +_bdbf ]&=_ccfe ;
};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;_dedd < _dcfd ;_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],_ccfe &_dced .Data [_bbfg ],_befg );
_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;};};case PixSrcXorDst :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );
};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],_ccfe ^_dced .Data [_ebeg ],_bbbb );_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;
_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );_dced .Data [_ebee +_bdbf ]^=_ccfe ;};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;_dedd < _dcfd ;
_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],_ccfe ^_dced .Data [_bbfg ],_befg );_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;
};};case PixNotSrcOrDst :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],^_ccfe |_dced .Data [_ebeg ],_bbbb );
_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );_dced .Data [_ebee +_bdbf ]|=^_ccfe ;
};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;_dedd < _dcfd ;_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],^_ccfe |_dced .Data [_bbfg ],_befg );
_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;};};case PixNotSrcAndDst :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );
};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],^_ccfe &_dced .Data [_ebeg ],_bbbb );_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;
_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );_dced .Data [_ebee +_bdbf ]&=^_ccfe ;};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;_dedd < _dcfd ;
_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],^_ccfe &_dced .Data [_bbfg ],_befg );_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;
};};case PixSrcOrNotDst :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],_ccfe |^_dced .Data [_ebeg ],_bbbb );
_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );_dced .Data [_ebee +_bdbf ]=_ccfe |^_dced .Data [_ebee +_bdbf ];
};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;_dedd < _dcfd ;_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],_ccfe |^_dced .Data [_bbfg ],_befg );
_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;};};case PixSrcAndNotDst :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );
};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],_ccfe &^_dced .Data [_ebeg ],_bbbb );_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;
_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );_dced .Data [_ebee +_bdbf ]=_ccfe &^_dced .Data [_ebee +_bdbf ];};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;
_dedd < _dcfd ;_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],_ccfe &^_dced .Data [_bbfg ],_befg );_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;
};};case PixNotPixSrcOrDst :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],^(_ccfe |_dced .Data [_ebeg ]),_bbbb );
_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );_dced .Data [_ebee +_bdbf ]=^(_ccfe |_dced .Data [_ebee +_bdbf ]);
};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;_dedd < _dcfd ;_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],^(_ccfe |_dced .Data [_bbfg ]),_befg );
_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;};};case PixNotPixSrcAndDst :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );
};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],^(_ccfe &_dced .Data [_ebeg ]),_bbbb );_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;
_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );_dced .Data [_ebee +_bdbf ]=^(_ccfe &_dced .Data [_ebee +_bdbf ]);};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};
if _ffd {for _dedd =0;_dedd < _dcfd ;_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],^(_ccfe &_dced .Data [_bbfg ]),_befg );_bbfg +=_dced .BytesPerLine ;
_agda +=_aede .BytesPerLine ;};};case PixNotPixSrcXorDst :if _dega {for _dedd =0;_dedd < _dcfd ;_dedd ++{if _cfagb ==_ecbe {_ccfe =_aede .Data [_ffcc ]<<_eab ;if _fcfb {_ccfe =_fdca (_ccfe ,_aede .Data [_ffcc +1]>>_dedg ,_gecc );};}else {_ccfe =_aede .Data [_ffcc ]>>_dedg ;
};_dced .Data [_ebeg ]=_fdca (_dced .Data [_ebeg ],^(_ccfe ^_dced .Data [_ebeg ]),_bbbb );_ebeg +=_dced .BytesPerLine ;_ffcc +=_aede .BytesPerLine ;};};if _cfga {for _dedd =0;_dedd < _dcfd ;_dedd ++{for _bdbf =0;_bdbf < _dbcc ;_bdbf ++{_ccfe =_fdca (_aede .Data [_ceceb +_bdbf ]<<_eab ,_aede .Data [_ceceb +_bdbf +1]>>_dedg ,_gecc );
_dced .Data [_ebee +_bdbf ]=^(_ccfe ^_dced .Data [_ebee +_bdbf ]);};_ebee +=_dced .BytesPerLine ;_ceceb +=_aede .BytesPerLine ;};};if _ffd {for _dedd =0;_dedd < _dcfd ;_dedd ++{_ccfe =_aede .Data [_agda ]<<_eab ;if _ffdf {_ccfe =_fdca (_ccfe ,_aede .Data [_agda +1]>>_dedg ,_gecc );
};_dced .Data [_bbfg ]=_fdca (_dced .Data [_bbfg ],^(_ccfe ^_dced .Data [_bbfg ]),_befg );_bbfg +=_dced .BytesPerLine ;_agda +=_aede .BytesPerLine ;};};default:_aa .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_afeg );
return _b .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};type Image interface{_f .Image ;Base ()*ImageBase ;
Copy ()Image ;Pix ()[]byte ;ColorAt (_gaeg ,_dgbb int )(_a .Color ,error );Validate ()error ;};type NRGBA32 struct{ImageBase };func _gbe (_fdbg _a .NRGBA64 )_a .Gray {var _cdbg _a .NRGBA64 ;if _fdbg ==_cdbg {return _a .Gray {Y :0xff};};_gbec ,_eaag ,_ffaa ,_ :=_fdbg .RGBA ();
_gcce :=(19595*_gbec +38470*_eaag +7471*_ffaa +1<<15)>>24;return _a .Gray {Y :uint8 (_gcce )};};func _faf (_bd ,_ac *Monochrome )(_db error ){_agg :=_ac .BytesPerLine ;_ed :=_bd .BytesPerLine ;var (_efd byte ;_cd uint16 ;_fe ,_de ,_dec ,_bc ,_fbc int ;
);for _dec =0;_dec < _ac .Height ;_dec ++{_fe =_dec *_agg ;_de =2*_dec *_ed ;for _bc =0;_bc < _agg ;_bc ++{_efd =_ac .Data [_fe +_bc ];_cd =_aeb [_efd ];_fbc =_de +_bc *2;if _bd .BytesPerLine !=_ac .BytesPerLine *2&&(_bc +1)*2> _bd .BytesPerLine {_db =_bd .setByte (_fbc ,byte (_cd >>8));
}else {_db =_bd .setTwoBytes (_fbc ,_cd );};if _db !=nil {return _db ;};};for _bc =0;_bc < _ed ;_bc ++{_fbc =_de +_ed +_bc ;_efd =_bd .Data [_de +_bc ];if _db =_bd .setByte (_fbc ,_efd );_db !=nil {return _db ;};};};return nil ;};func (_gcggb *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_gcggb .copy ()}};
type NRGBA16 struct{ImageBase };func (_acd *Gray2 )Base ()*ImageBase {return &_acd .ImageBase };func (_gaf *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_gaf .copy ()}};func _accad (_bgbf _g .Image ,_ead uint8 )*_g .Gray {_bgaga :=_bgbf .Bounds ();_dafbc :=_g .NewGray (_bgaga );
var (_bgcfg _a .Color ;_acab _a .Gray ;);for _cbae :=0;_cbae < _bgaga .Max .X ;_cbae ++{for _egee :=0;_egee < _bgaga .Max .Y ;_egee ++{_bgcfg =_bgbf .At (_cbae ,_egee );_dafbc .Set (_cbae ,_egee ,_bgcfg );_acab =_dafbc .GrayAt (_cbae ,_egee );_dafbc .SetGray (_cbae ,_egee ,_a .Gray {Y :_cgfe (_acab .Y ,_ead )});
};};return _dafbc ;};func (_ddae *NRGBA64 )ColorModel ()_a .Model {return _a .NRGBA64Model };func (_eefac *NRGBA16 )Validate ()error {if len (_eefac .Data )!=3*_eefac .Width *_eefac .Height /2{return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_dgge *Gray8 )SetGray (x ,y int ,g _a .Gray ){_gcde :=y *_dgge .BytesPerLine +x ;if _gcde > len (_dgge .Data )-1{return ;};_dgge .Data [_gcde ]=g .Y ;};func (_fbedg *Gray2 )SetGray (x ,y int ,gray _a .Gray ){_defg :=_gec (gray );_fed :=y *_fbedg .BytesPerLine ;
_bfba :=_fed +(x >>2);if _bfba >=len (_fbedg .Data ){return ;};_gddb :=_defg .Y >>6;_fbedg .Data [_bfba ]=(_fbedg .Data [_bfba ]&(^(0xc0>>uint (2*((x )&3)))))|(_gddb <<uint (6-2*(x &3)));};func _afac (_fedd _g .Image ,_dbcee Image ,_fbcbf _g .Rectangle ){if _ggfe ,_agdb :=_fedd .(SMasker );
_agdb &&_ggfe .HasAlpha (){_dbcee .(SMasker ).MakeAlpha ();};_bcb (_fedd ,_dbcee ,_fbcbf );};func _cgfb (){for _ccgf :=0;_ccgf < 256;_ccgf ++{_aedf [_ccgf ]=uint8 (_ccgf &0x1)+(uint8 (_ccgf >>1)&0x1)+(uint8 (_ccgf >>2)&0x1)+(uint8 (_ccgf >>3)&0x1)+(uint8 (_ccgf >>4)&0x1)+(uint8 (_ccgf >>5)&0x1)+(uint8 (_ccgf >>6)&0x1)+(uint8 (_ccgf >>7)&0x1);
};};func _ddac (_eebaf int ,_deae int )error {return _gb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_eebaf ,_deae );
};func ConverterFunc (converterFunc func (_aeac _g .Image )(Image ,error ))ColorConverter {return colorConverter {_bbe :converterFunc };};func (_aade *NRGBA16 )ColorAt (x ,y int )(_a .Color ,error ){return ColorAtNRGBA16 (x ,y ,_aade .Width ,_aade .BytesPerLine ,_aade .Data ,_aade .Alpha ,_aade .Decode );
};func (_bga monochromeModel )Convert (c _a .Color )_a .Color {_cdgb :=_a .GrayModel .Convert (c ).(_a .Gray );return _dbcb (_cdgb ,_bga );};func _cffg (_cdcg Gray ,_cddac NRGBA ,_cbgb _g .Rectangle ){for _efef :=0;_efef < _cbgb .Max .X ;_efef ++{for _gefde :=0;
_gefde < _cbgb .Max .Y ;_gefde ++{_cfagd :=_cdcg .GrayAt (_efef ,_gefde );_cddac .SetNRGBA (_efef ,_gefde ,_eae (_cfagd ));};};};func _efea (_gfga *Monochrome ,_fcgg ,_ggafg ,_dafg ,_aabc int ,_fccff RasterOperator ,_ggca *Monochrome ,_gdce ,_bacd int )error {if _gfga ==nil {return _b .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _fccff ==PixDst {return nil ;};switch _fccff {case PixClr ,PixSet ,PixNotDst :_dead (_gfga ,_fcgg ,_ggafg ,_dafg ,_aabc ,_fccff );return nil ;};if _ggca ==nil {_aa .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _b .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _afee :=_ecaf (_gfga ,_fcgg ,_ggafg ,_dafg ,_aabc ,_fccff ,_ggca ,_gdce ,_bacd );_afee !=nil {return _afee ;};return nil ;};func (_ecdd *NRGBA32 )ColorAt (x ,y int )(_a .Color ,error ){return ColorAtNRGBA32 (x ,y ,_ecdd .Width ,_ecdd .Data ,_ecdd .Alpha ,_ecdd .Decode );
};var _ _g .Image =&NRGBA16 {};func _ddca (_cbee _g .Image ,_gcbd int )(_g .Rectangle ,bool ,[]byte ){_cdeee :=_cbee .Bounds ();var (_ebeb bool ;_gbac []byte ;);switch _ebgd :=_cbee .(type ){case SMasker :_ebeb =_ebgd .HasAlpha ();case NRGBA ,RGBA ,*_g .RGBA64 ,nrgba64 ,*_g .NYCbCrA :_gbac =make ([]byte ,_cdeee .Max .X *_cdeee .Max .Y *_gcbd );
case *_g .Paletted :var _gdab bool ;for _ ,_ece :=range _ebgd .Palette {_dcfb ,_ccca ,_bbgf ,_ecfa :=_ece .RGBA ();if _dcfb ==0&&_ccca ==0&&_bbgf ==0&&_ecfa !=0{_gdab =true ;break ;};};if _gdab {_gbac =make ([]byte ,_cdeee .Max .X *_cdeee .Max .Y *_gcbd );
};};return _cdeee ,_ebeb ,_gbac ;};func (_geg *Monochrome )At (x ,y int )_a .Color {_agbf ,_ :=_geg .ColorAt (x ,y );return _agbf };func (_gccgf *NRGBA16 )SetNRGBA (x ,y int ,c _a .NRGBA ){_fbec :=y *_gccgf .BytesPerLine +x *3/2;if _fbec +1>=len (_gccgf .Data ){return ;
};c =_gebf (c );_gccgf .setNRGBA (x ,y ,_fbec ,c );};var _ NRGBA =&NRGBA32 {};type RGBA interface{RGBAAt (_fdef ,_fdgg int )_a .RGBA ;SetRGBA (_cdcd ,_gbde int ,_abaa _a .RGBA );};func (_dbgg *Gray8 )ColorAt (x ,y int )(_a .Color ,error ){return ColorAtGray8BPC (x ,y ,_dbgg .BytesPerLine ,_dbgg .Data ,_dbgg .Decode );
};func (_bgba *Monochrome )AddPadding ()(_dgcad error ){if _ddfa :=((_bgba .Width *_bgba .Height )+7)>>3;len (_bgba .Data )< _ddfa {return _gb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_bgba .Data ),_ddfa );
};_eafc :=_bgba .Width %8;if _eafc ==0{return nil ;};_aaed :=_bgba .Width /8;_aebb :=_fa .NewReader (_bgba .Data );_ccbf :=make ([]byte ,_bgba .Height *_bgba .BytesPerLine );_ccab :=_fa .NewWriterMSB (_ccbf );_ebce :=make ([]byte ,_aaed );var (_edeg int ;
_agbc uint64 ;);for _edeg =0;_edeg < _bgba .Height ;_edeg ++{if _ ,_dgcad =_aebb .Read (_ebce );_dgcad !=nil {return _dgcad ;};if _ ,_dgcad =_ccab .Write (_ebce );_dgcad !=nil {return _dgcad ;};if _agbc ,_dgcad =_aebb .ReadBits (byte (_eafc ));_dgcad !=nil {return _dgcad ;
};if _dgcad =_ccab .WriteByte (byte (_agbc )<<uint (8-_eafc ));_dgcad !=nil {return _dgcad ;};};_bgba .Data =_ccab .Data ();return nil ;};func (_agbe *NRGBA64 )ColorAt (x ,y int )(_a .Color ,error ){return ColorAtNRGBA64 (x ,y ,_agbe .Width ,_agbe .Data ,_agbe .Alpha ,_agbe .Decode );
};var _ Gray =&Gray4 {};func _agbb ()(_fga []byte ){_fga =make ([]byte ,256);for _dbb :=0;_dbb < 256;_dbb ++{_bcaa :=byte (_dbb );_fga [_bcaa ]=(_bcaa &0x01)|((_bcaa &0x04)>>1)|((_bcaa &0x10)>>2)|((_bcaa &0x40)>>3)|((_bcaa &0x02)<<3)|((_bcaa &0x08)<<2)|((_bcaa &0x20)<<1)|(_bcaa &0x80);
};return _fga ;};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func _gaa (_adgg _g .Image )(Image ,error ){if _baea ,_fadd :=_adgg .(*NRGBA64 );_fadd {return _baea .Copy (),nil ;};_gbcfd ,_fegb ,_ggdg :=_ddca (_adgg ,2);_bafc ,_fgdb :=NewImage (_gbcfd .Max .X ,_gbcfd .Max .Y ,16,3,nil ,_ggdg ,nil );
if _fgdb !=nil {return nil ,_fgdb ;};_afac (_adgg ,_bafc ,_gbcfd );if len (_ggdg )!=0&&!_fegb {if _fcca :=_gcbb (_ggdg ,_bafc );_fcca !=nil {return nil ,_fcca ;};};return _bafc ,nil ;};func _bbcc (_aebeg _g .Image ,_egdbc Image ,_feegd _g .Rectangle ){if _fabd ,_bfdgg :=_aebeg .(SMasker );
_bfdgg &&_fabd .HasAlpha (){_egdbc .(SMasker ).MakeAlpha ();};switch _faab :=_aebeg .(type ){case Gray :_eebgd (_faab ,_egdbc .(RGBA ),_feegd );case NRGBA :_acgfd (_faab ,_egdbc .(RGBA ),_feegd );case *_g .NYCbCrA :_ebed (_faab ,_egdbc .(RGBA ),_feegd );
case CMYK :_ddceb (_faab ,_egdbc .(RGBA ),_feegd );case RGBA :_gdgaf (_faab ,_egdbc .(RGBA ),_feegd );case nrgba64 :_cdace (_faab ,_egdbc .(RGBA ),_feegd );default:_bcb (_aebeg ,_egdbc ,_feegd );};};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_a .Gray ,error ){_bdff :=y *bytesPerLine +x >>1;
if _bdff >=len (data ){return _a .Gray {},_gb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_agcb :=data [_bdff ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_agcb =uint8 (uint32 (LinearInterpolate (float64 (_agcb ),0,15,decode [0],decode [1]))&0xf);};return _a .Gray {Y :_agcb *17&0xff},nil ;};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;
};func _decfg (_aabe uint )uint {var _ddfb uint ;for _aabe !=0{_aabe >>=1;_ddfb ++;};return _ddfb -1;};func _ge ()(_cae [256]uint64 ){for _cgg :=0;_cgg < 256;_cgg ++{if _cgg &0x01!=0{_cae [_cgg ]|=0xff;};if _cgg &0x02!=0{_cae [_cgg ]|=0xff00;};if _cgg &0x04!=0{_cae [_cgg ]|=0xff0000;
};if _cgg &0x08!=0{_cae [_cgg ]|=0xff000000;};if _cgg &0x10!=0{_cae [_cgg ]|=0xff00000000;};if _cgg &0x20!=0{_cae [_cgg ]|=0xff0000000000;};if _cgg &0x40!=0{_cae [_cgg ]|=0xff000000000000;};if _cgg &0x80!=0{_cae [_cgg ]|=0xff00000000000000;};};return _cae ;
};type RGBA32 struct{ImageBase };func _edfge (_ecacc *_g .Gray )bool {for _gfcab :=0;_gfcab < len (_ecacc .Pix );_gfcab ++{if !_cegee (_ecacc .Pix [_gfcab ]){return false ;};};return true ;};func _ddceb (_gbecg CMYK ,_adad RGBA ,_cdbbf _g .Rectangle ){for _edc :=0;
_edc < _cdbbf .Max .X ;_edc ++{for _ddec :=0;_ddec < _cdbbf .Max .Y ;_ddec ++{_afead :=_gbecg .CMYKAt (_edc ,_ddec );_adad .SetRGBA (_edc ,_ddec ,_ebdc (_afead ));};};};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_a .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_gb .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func _cgd (_ebcc _a .NYCbCrA )_a .RGBA {_bffg ,_cebc ,_dcd ,_cggf :=_degb (_ebcc ).RGBA ();return _a .RGBA {R :uint8 (_bffg >>8),G :uint8 (_cebc >>8),B :uint8 (_dcd >>8),A :uint8 (_cggf >>8)};};var _ Gray =&Gray16 {};