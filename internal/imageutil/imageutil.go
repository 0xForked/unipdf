//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_c "encoding/binary";_a "errors";_fe "fmt";_fa "github.com/unidoc/unipdf/v3/common";_cg "github.com/unidoc/unipdf/v3/internal/bitwise";_g "image";_ag "image/color";_f "image/draw";_bd "math";);func AutoThresholdTriangle (histogram [256]int )uint8 {var _gcbf ,_ebeb ,_fcgfc ,_fdef int ;
for _abb :=0;_abb < len (histogram );_abb ++{if histogram [_abb ]> 0{_gcbf =_abb ;break ;};};if _gcbf > 0{_gcbf --;};for _cfcg :=255;_cfcg > 0;_cfcg --{if histogram [_cfcg ]> 0{_fdef =_cfcg ;break ;};};if _fdef < 255{_fdef ++;};for _gfabe :=0;_gfabe < 256;
_gfabe ++{if histogram [_gfabe ]> _ebeb {_fcgfc =_gfabe ;_ebeb =histogram [_gfabe ];};};var _gegf bool ;if (_fcgfc -_gcbf )< (_fdef -_fcgfc ){_gegf =true ;var _gbfda int ;_fadb :=255;for _gbfda < _fadb {_bcgg :=histogram [_gbfda ];histogram [_gbfda ]=histogram [_fadb ];
histogram [_fadb ]=_bcgg ;_gbfda ++;_fadb --;};_gcbf =255-_fdef ;_fcgfc =255-_fcgfc ;};if _gcbf ==_fcgfc {return uint8 (_gcbf );};_gaefd :=float64 (histogram [_fcgfc ]);_fgcc :=float64 (_gcbf -_fcgfc );_cbadf :=_bd .Sqrt (_gaefd *_gaefd +_fgcc *_fgcc );
_gaefd /=_cbadf ;_fgcc /=_cbadf ;_cbadf =_gaefd *float64 (_gcbf )+_fgcc *float64 (histogram [_gcbf ]);_becbc :=_gcbf ;var _dbdb float64 ;for _fffc :=_gcbf +1;_fffc <=_fcgfc ;_fffc ++{_bcfe :=_gaefd *float64 (_fffc )+_fgcc *float64 (histogram [_fffc ])-_cbadf ;
if _bcfe > _dbdb {_becbc =_fffc ;_dbdb =_bcfe ;};};_becbc --;if _gegf {var _dcgff int ;_dfagc :=255;for _dcgff < _dfagc {_aebb :=histogram [_dcgff ];histogram [_dcgff ]=histogram [_dfagc ];histogram [_dfagc ]=_aebb ;_dcgff ++;_dfagc --;};return uint8 (255-_becbc );
};return uint8 (_becbc );};var _ Image =&Gray2 {};func _fbcg (_fff _ag .CMYK )_ag .NRGBA {_fcf ,_baec ,_cbc :=_ag .CMYKToRGB (_fff .C ,_fff .M ,_fff .Y ,_fff .K );return _ag .NRGBA {R :_fcf ,G :_baec ,B :_cbc ,A :0xff};};func (_cbg *Gray16 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_cbg .Width ,Y :_cbg .Height }};
};func _cgf (_dab ,_fad *Monochrome ,_eeg []byte ,_dac int )(_dbb error ){var (_cfa ,_geb ,_gcfa ,_fdge ,_dbaf ,_afa ,_cefd ,_afga int ;_aec ,_eeb ,_dagf ,_dg uint32 ;_bgf ,_cag byte ;_def uint16 ;);_cdbe :=make ([]byte ,4);_eed :=make ([]byte ,4);for _gcfa =0;
_gcfa < _dab .Height -1;_gcfa ,_fdge =_gcfa +2,_fdge +1{_cfa =_gcfa *_dab .BytesPerLine ;_geb =_fdge *_fad .BytesPerLine ;for _dbaf ,_afa =0,0;_dbaf < _dac ;_dbaf ,_afa =_dbaf +4,_afa +1{for _cefd =0;_cefd < 4;_cefd ++{_afga =_cfa +_dbaf +_cefd ;if _afga <=len (_dab .Data )-1&&_afga < _cfa +_dab .BytesPerLine {_cdbe [_cefd ]=_dab .Data [_afga ];
}else {_cdbe [_cefd ]=0x00;};_afga =_cfa +_dab .BytesPerLine +_dbaf +_cefd ;if _afga <=len (_dab .Data )-1&&_afga < _cfa +(2*_dab .BytesPerLine ){_eed [_cefd ]=_dab .Data [_afga ];}else {_eed [_cefd ]=0x00;};};_aec =_c .BigEndian .Uint32 (_cdbe );_eeb =_c .BigEndian .Uint32 (_eed );
_dagf =_aec &_eeb ;_dagf |=_dagf <<1;_dg =_aec |_eeb ;_dg &=_dg <<1;_eeb =_dagf |_dg ;_eeb &=0xaaaaaaaa;_aec =_eeb |(_eeb <<7);_bgf =byte (_aec >>24);_cag =byte ((_aec >>8)&0xff);_afga =_geb +_afa ;if _afga +1==len (_fad .Data )-1||_afga +1>=_geb +_fad .BytesPerLine {if _dbb =_fad .setByte (_afga ,_eeg [_bgf ]);
_dbb !=nil {return _fe .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_afga );};}else {_def =(uint16 (_eeg [_bgf ])<<8)|uint16 (_eeg [_cag ]);if _dbb =_fad .setTwoBytes (_afga ,_def );_dbb !=nil {return _fe .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_afga );
};_afa ++;};};};return nil ;};func _dgbb (_cefcc _ag .Gray )_ag .Gray {_aga :=_cefcc .Y >>6;_aga |=_aga <<2;_cefcc .Y =_aga |_aga <<4;return _cefcc ;};var _ Gray =&Gray4 {};func (_dbac *Monochrome )GrayAt (x ,y int )_ag .Gray {_aabbb ,_ :=ColorAtGray1BPC (x ,y ,_dbac .BytesPerLine ,_dbac .Data ,_dbac .Decode );
return _aabbb ;};func _bgfg (_becc _ag .Color )_ag .Color {_cdbca :=_ag .GrayModel .Convert (_becc ).(_ag .Gray );return _dfag (_cdbca );};func _d (_fag *Monochrome ,_fb int )(*Monochrome ,error ){if _fag ==nil {return nil ,_a .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fb ==1{return _fag .copy (),nil ;};if !IsPowerOf2 (uint (_fb )){return nil ,_fe .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_fb );
};_ff :=_afe (_fb );return _df (_fag ,_fb ,_ff );};type CMYK interface{CMYKAt (_efb ,_bff int )_ag .CMYK ;SetCMYK (_dcb ,_caf int ,_cab _ag .CMYK );};func (_ccea *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_a .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_feef :=_ddg (width ,height );_dgc :=make ([]int ,height );_beb :=make ([]int ,width );_feb :=float64 (_ccea .Width )/float64 (width );_aad :=float64 (_ccea .Height )/float64 (height );for _cgea :=0;_cgea < height ;_cgea ++{_dgc [_cgea ]=int (_bd .Min (_aad *float64 (_cgea )+0.5,float64 (_ccea .Height -1)));
};for _dcbf :=0;_dcbf < width ;_dcbf ++{_beb [_dcbf ]=int (_bd .Min (_feb *float64 (_dcbf )+0.5,float64 (_ccea .Width -1)));};_gab :=-1;_gge :=byte (0);for _deged :=0;_deged < height ;_deged ++{_cbbf :=_dgc [_deged ]*_ccea .BytesPerLine ;_fbgd :=_deged *_feef .BytesPerLine ;
for _cfg :=0;_cfg < width ;_cfg ++{_gecf :=_beb [_cfg ];if _gecf !=_gab {_gge =_ccea .getBit (_cbbf ,_gecf );if _gge !=0{_feef .setBit (_fbgd ,_cfg );};_gab =_gecf ;}else {if _gge !=0{_feef .setBit (_fbgd ,_cfg );};};};};return _feef ,nil ;};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_ag .Gray ,error ){_becbf :=y *bytesPerLine +x ;
if _becbf >=len (data ){return _ag .Gray {},_fe .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cdcb :=data [_becbf ];if len (decode )==2{_cdcb =uint8 (uint32 (LinearInterpolate (float64 (_cdcb ),0,255,decode [0],decode [1]))&0xff);};return _ag .Gray {Y :_cdcb },nil ;};func (_cgca *Monochrome )Set (x ,y int ,c _ag .Color ){_fece :=y *_cgca .BytesPerLine +x >>3;
if _fece > len (_cgca .Data )-1{return ;};_bcf :=_cgca .ColorModel ().Convert (c ).(_ag .Gray );_cgca .setGray (x ,_bcf ,_fece );};func (_agff *CMYK32 )At (x ,y int )_ag .Color {_dfcd ,_ :=_agff .ColorAt (x ,y );return _dfcd };func _bef (_ece _ag .Gray )_ag .NRGBA {return _ag .NRGBA {R :_ece .Y ,G :_ece .Y ,B :_ece .Y ,A :0xff}};
func (_dgge *NRGBA32 )ColorAt (x ,y int )(_ag .Color ,error ){return ColorAtNRGBA32 (x ,y ,_dgge .Width ,_dgge .Data ,_dgge .Alpha ,_dgge .Decode );};var _ _g .Image =&NRGBA16 {};var (Gray2Model =_ag .ModelFunc (_eggf );Gray4Model =_ag .ModelFunc (_bgfg );
NRGBA16Model =_ag .ModelFunc (_bbaga ););type Gray interface{GrayAt (_ebge ,_cgae int )_ag .Gray ;SetGray (_gdf ,_cbee int ,_bacd _ag .Gray );};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _ebae (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_ddca *Gray4 )Histogram ()(_aeac [256]int ){for _cace :=0;_cace < _ddca .Width ;_cace ++{for _cbag :=0;_cbag < _ddca .Height ;_cbag ++{_aeac [_ddca .GrayAt (_cace ,_cbag ).Y ]++;};};return _aeac ;};func _bdcf (_cage _ag .RGBA )_ag .CMYK {_caa ,_dbafe ,_bed ,_cegf :=_ag .RGBToCMYK (_cage .R ,_cage .G ,_cage .B );
return _ag .CMYK {C :_caa ,M :_dbafe ,Y :_bed ,K :_cegf };};func _cefe (_gdgc _g .Image )(Image ,error ){if _cfbe ,_cgfg :=_gdgc .(*Gray8 );_cgfg {return _cfbe .Copy (),nil ;};_agfe :=_gdgc .Bounds ();_ageb ,_abgf :=NewImage (_agfe .Max .X ,_agfe .Max .Y ,8,1,nil ,nil ,nil );
if _abgf !=nil {return nil ,_abgf ;};_eabc (_gdgc ,_ageb ,_agfe );return _ageb ,nil ;};func (_eada *Gray8 )GrayAt (x ,y int )_ag .Gray {_aggc ,_ :=ColorAtGray8BPC (x ,y ,_eada .BytesPerLine ,_eada .Data ,_eada .Decode );return _aggc ;};type Gray4 struct{ImageBase };
func (_gcfb *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_gcfb .copy ()}};func _eede (_cbce *_g .NYCbCrA ,_ddfae RGBA ,_abadd _g .Rectangle ){for _fedae :=0;_fedae < _abadd .Max .X ;_fedae ++{for _eagbg :=0;_eagbg < _abadd .Max .Y ;_eagbg ++{_dffg :=_cbce .NYCbCrAAt (_fedae ,_eagbg );
_ddfae .SetRGBA (_fedae ,_eagbg ,_cea (_dffg ));};};};var _ _g .Image =&Gray2 {};func (_cfafa *Gray8 )Base ()*ImageBase {return &_cfafa .ImageBase };func (_dcfa *Monochrome )Histogram ()(_dcc [256]int ){for _ ,_cbab :=range _dcfa .Data {_dcc [0xff]+=int (_dagg [_dcfa .Data [_cbab ]]);
};return _dcc ;};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_ag .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );
case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_fe .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_ddb *Gray2 )GrayAt (x ,y int )_ag .Gray {_adafg ,_ :=ColorAtGray2BPC (x ,y ,_ddb .BytesPerLine ,_ddb .Data ,_ddb .Decode );return _adafg ;};func _gef (_agda _ag .Gray )_ag .RGBA {return _ag .RGBA {R :_agda .Y ,G :_agda .Y ,B :_agda .Y ,A :0xff}};
func _ddg (_abf ,_fbba int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_abf ,_fbba ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};func (_ccbb *ImageBase )newAlpha (){_daab :=BytesPerLine (_ccbb .Width ,_ccbb .BitsPerComponent ,1);_ccbb .Alpha =make ([]byte ,_ccbb .Height *_daab );
};func (_egfa *RGBA32 )Base ()*ImageBase {return &_egfa .ImageBase };func (_cade *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_cade .copy ()}};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_ab :=BytesPerLine (width ,8,1);
if len (data )< _ab *height {return nil ,nil ;};_cf :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_gb ,_aa :=MonochromeConverter .Convert (_cf );if _aa !=nil {return nil ,_aa ;};return _gb .Base ().Data ,nil ;};func _eef (_eda _ag .NRGBA )_ag .Gray {var _eaeg _ag .NRGBA ;
if _eda ==_eaeg {return _ag .Gray {Y :0xff};};_gcg ,_fba ,_fdf ,_ :=_eda .RGBA ();_dffa :=(19595*_gcg +38470*_fba +7471*_fdf +1<<15)>>24;return _ag .Gray {Y :uint8 (_dffa )};};type NRGBA64 struct{ImageBase };func (_ggfd *Gray2 )Set (x ,y int ,c _ag .Color ){if x >=_ggfd .Width ||y >=_ggfd .Height {return ;
};_degeg :=Gray2Model .Convert (c ).(_ag .Gray );_ffbd :=y *_ggfd .BytesPerLine ;_aea :=_ffbd +(x >>2);_defd :=_degeg .Y >>6;_ggfd .Data [_aea ]=(_ggfd .Data [_aea ]&(^(0xc0>>uint (2*((x )&3)))))|(_defd <<uint (6-2*(x &3)));};var _ NRGBA =&NRGBA16 {};func (_bfge *Monochrome )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_bfge .Width ,Y :_bfge .Height }};
};func _ceb (_gfde _ag .CMYK )_ag .Gray {_bbg ,_eefe ,_cbb :=_ag .CMYKToRGB (_gfde .C ,_gfde .M ,_gfde .Y ,_gfde .K );_cgcf :=(19595*uint32 (_bbg )+38470*uint32 (_eefe )+7471*uint32 (_cbb )+1<<7)>>16;return _ag .Gray {Y :uint8 (_cgcf )};};var (_gcce =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};
_abded =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_fgcg *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _cefcg bool ;_edfa :=scale ;if scale < 1{_edfa =1/scale ;_cefcg =true ;};_ebdb :=NextPowerOf2 (uint (_edfa ));if InDelta (float64 (_ebdb ),_edfa ,0.001){if _cefcg {return _fgcg .ReduceBinary (_edfa );
};return _fgcg .ExpandBinary (int (_ebdb ));};_fga :=int (_bd .RoundToEven (float64 (_fgcg .Width )*scale ));_gfcda :=int (_bd .RoundToEven (float64 (_fgcg .Height )*scale ));return _fgcg .ScaleLow (_fga ,_gfcda );};func (_gfb *Monochrome )Validate ()error {if len (_gfb .Data )!=_gfb .Height *_gfb .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_fgae *NRGBA32 )SetNRGBA (x ,y int ,c _ag .NRGBA ){_gaf :=y *_fgae .Width +x ;_egedg :=3*_gaf ;if _egedg +2>=len (_fgae .Data ){return ;};_fgae .setRGBA (_gaf ,c );};func (_ffea *Monochrome )ResolveDecode ()error {if len (_ffea .Decode )!=2{return nil ;
};if _ffea .Decode [0]==1&&_ffea .Decode [1]==0{if _gfdfc :=_ffea .InverseData ();_gfdfc !=nil {return _gfdfc ;};_ffea .Decode =nil ;};return nil ;};func _bfce (_decf int ,_edab int )error {return _fe .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_decf ,_edab );
};func _dgeb (_ddcc *Monochrome ,_eafd ,_ecba ,_gfbe ,_bcfb int ,_fedf RasterOperator ,_ccbc *Monochrome ,_ggee ,_ebaeg int )error {var (_acd bool ;_dbbg bool ;_aaad int ;_cfdd int ;_fccg int ;_ggbc bool ;_cbac byte ;_eec int ;_baae int ;_cebge int ;_cdae ,_baaec int ;
);_efbfb :=8-(_eafd &7);_cddb :=_abded [_efbfb ];_bffge :=_ddcc .BytesPerLine *_ecba +(_eafd >>3);_bggc :=_ccbc .BytesPerLine *_ebaeg +(_ggee >>3);if _gfbe < _efbfb {_acd =true ;_cddb &=_gcce [8-_efbfb +_gfbe ];};if !_acd {_aaad =(_gfbe -_efbfb )>>3;if _aaad > 0{_dbbg =true ;
_cfdd =_bffge +1;_fccg =_bggc +1;};};_eec =(_eafd +_gfbe )&7;if !(_acd ||_eec ==0){_ggbc =true ;_cbac =_gcce [_eec ];_baae =_bffge +1+_aaad ;_cebge =_bggc +1+_aaad ;};switch _fedf {case PixSrc :for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],_ccbc .Data [_bggc ],_cddb );
_bffge +=_ddcc .BytesPerLine ;_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]=_ccbc .Data [_fccg +_baaec ];};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;
};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],_ccbc .Data [_cebge ],_cbac );_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};case PixNotSrc :for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],^_ccbc .Data [_bggc ],_cddb );
_bffge +=_ddcc .BytesPerLine ;_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]=^_ccbc .Data [_fccg +_baaec ];};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;
};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],^_ccbc .Data [_cebge ],_cbac );_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};case PixSrcOrDst :for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],_ccbc .Data [_bggc ]|_ddcc .Data [_bffge ],_cddb );
_bffge +=_ddcc .BytesPerLine ;_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]|=_ccbc .Data [_fccg +_baaec ];};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;
};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],_ccbc .Data [_cebge ]|_ddcc .Data [_baae ],_cbac );_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};case PixSrcAndDst :for _cdae =0;_cdae < _bcfb ;
_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],_ccbc .Data [_bggc ]&_ddcc .Data [_bffge ],_cddb );_bffge +=_ddcc .BytesPerLine ;_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]&=_ccbc .Data [_fccg +_baaec ];
};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],_ccbc .Data [_cebge ]&_ddcc .Data [_baae ],_cbac );_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;
};};case PixSrcXorDst :for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],_ccbc .Data [_bggc ]^_ddcc .Data [_bffge ],_cddb );_bffge +=_ddcc .BytesPerLine ;_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;
_cdae ++{for _baaec =0;_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]^=_ccbc .Data [_fccg +_baaec ];};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],_ccbc .Data [_cebge ]^_ddcc .Data [_baae ],_cbac );
_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};case PixNotSrcOrDst :for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],^(_ccbc .Data [_bggc ])|_ddcc .Data [_bffge ],_cddb );_bffge +=_ddcc .BytesPerLine ;
_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]|=^(_ccbc .Data [_fccg +_baaec ]);};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;};};if _ggbc {for _cdae =0;
_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],^(_ccbc .Data [_cebge ])|_ddcc .Data [_baae ],_cbac );_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};case PixNotSrcAndDst :for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],^(_ccbc .Data [_bggc ])&_ddcc .Data [_bffge ],_cddb );
_bffge +=_ddcc .BytesPerLine ;_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]&=^_ccbc .Data [_fccg +_baaec ];};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;
};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],^(_ccbc .Data [_cebge ])&_ddcc .Data [_baae ],_cbac );_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};case PixSrcOrNotDst :for _cdae =0;
_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],_ccbc .Data [_bggc ]|^(_ddcc .Data [_bffge ]),_cddb );_bffge +=_ddcc .BytesPerLine ;_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;
_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]=_ccbc .Data [_fccg +_baaec ]|^(_ddcc .Data [_cfdd +_baaec ]);};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],_ccbc .Data [_cebge ]|^(_ddcc .Data [_baae ]),_cbac );
_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};case PixSrcAndNotDst :for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],_ccbc .Data [_bggc ]&^(_ddcc .Data [_bffge ]),_cddb );_bffge +=_ddcc .BytesPerLine ;
_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]=_ccbc .Data [_fccg +_baaec ]&^(_ddcc .Data [_cfdd +_baaec ]);};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;
};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],_ccbc .Data [_cebge ]&^(_ddcc .Data [_baae ]),_cbac );_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};case PixNotPixSrcOrDst :for _cdae =0;
_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],^(_ccbc .Data [_bggc ]|_ddcc .Data [_bffge ]),_cddb );_bffge +=_ddcc .BytesPerLine ;_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;
_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]=^(_ccbc .Data [_fccg +_baaec ]|_ddcc .Data [_cfdd +_baaec ]);};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],^(_ccbc .Data [_cebge ]|_ddcc .Data [_baae ]),_cbac );
_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};case PixNotPixSrcAndDst :for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],^(_ccbc .Data [_bggc ]&_ddcc .Data [_bffge ]),_cddb );_bffge +=_ddcc .BytesPerLine ;
_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]=^(_ccbc .Data [_fccg +_baaec ]&_ddcc .Data [_cfdd +_baaec ]);};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;
};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],^(_ccbc .Data [_cebge ]&_ddcc .Data [_baae ]),_cbac );_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};case PixNotPixSrcXorDst :for _cdae =0;
_cdae < _bcfb ;_cdae ++{_ddcc .Data [_bffge ]=_gddce (_ddcc .Data [_bffge ],^(_ccbc .Data [_bggc ]^_ddcc .Data [_bffge ]),_cddb );_bffge +=_ddcc .BytesPerLine ;_bggc +=_ccbc .BytesPerLine ;};if _dbbg {for _cdae =0;_cdae < _bcfb ;_cdae ++{for _baaec =0;
_baaec < _aaad ;_baaec ++{_ddcc .Data [_cfdd +_baaec ]=^(_ccbc .Data [_fccg +_baaec ]^_ddcc .Data [_cfdd +_baaec ]);};_cfdd +=_ddcc .BytesPerLine ;_fccg +=_ccbc .BytesPerLine ;};};if _ggbc {for _cdae =0;_cdae < _bcfb ;_cdae ++{_ddcc .Data [_baae ]=_gddce (_ddcc .Data [_baae ],^(_ccbc .Data [_cebge ]^_ddcc .Data [_baae ]),_cbac );
_baae +=_ddcc .BytesPerLine ;_cebge +=_ccbc .BytesPerLine ;};};default:_fa .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_fedf );return _a .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _aabc (_eagb _g .Image )(Image ,error ){if _efce ,_egfd :=_eagb .(*NRGBA64 );_egfd {return _efce .Copy (),nil ;};_fdffb ,_dgf ,_aaga :=_bbf (_eagb ,2);_acdc ,_cgga :=NewImage (_fdffb .Max .X ,_fdffb .Max .Y ,16,3,nil ,_aaga ,nil );
if _cgga !=nil {return nil ,_cgga ;};_gafe (_eagb ,_acdc ,_fdffb );if len (_aaga )!=0&&!_dgf {if _bebc :=_gbcf (_aaga ,_acdc );_bebc !=nil {return nil ,_bebc ;};};return _acdc ,nil ;};func (_efgf *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_deggg :=_geee (uint (factor ));
if !IsPowerOf2 (uint (factor )){_deggg ++;};_befd :=make ([]int ,_deggg );for _eggb :=range _befd {_befd [_eggb ]=4;};_cfag ,_cageg :=_gga (_efgf ,_befd ...);if _cageg !=nil {return nil ,_cageg ;};return _cfag ,nil ;};func _gddce (_edgg ,_adgc ,_gdbe byte )byte {return (_edgg &^(_gdbe ))|(_adgc &_gdbe )};
func MonochromeModel (threshold uint8 )_ag .Model {return monochromeModel (threshold )};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_ag .CMYK ,error ){_gfa :=4*(y *width +x );if _gfa +3>=len (data ){return _ag .CMYK {},_fe .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_gfa ]&0xff;M :=data [_gfa +1]&0xff;Y :=data [_gfa +2]&0xff;K :=data [_gfa +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _ag .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_ecee *Gray8 )At (x ,y int )_ag .Color {_abgb ,_ :=_ecee .ColorAt (x ,y );
return _abgb };func (_eeea *NRGBA32 )Set (x ,y int ,c _ag .Color ){_dgae :=y *_eeea .Width +x ;_aba :=3*_dgae ;if _aba +2>=len (_eeea .Data ){return ;};_cdcba :=_ag .NRGBAModel .Convert (c ).(_ag .NRGBA );_eeea .setRGBA (_dgae ,_cdcba );};func _daa (_adb ,_aag *Monochrome ,_dbf []byte ,_dbbf int )(_aef error ){var (_dca ,_aagd ,_dce ,_ef ,_fbe ,_edff ,_agga ,_adg int ;
_dae ,_aeb uint32 ;_cbe ,_gfd byte ;_dgg uint16 ;);_cff :=make ([]byte ,4);_cbf :=make ([]byte ,4);for _dce =0;_dce < _adb .Height -1;_dce ,_ef =_dce +2,_ef +1{_dca =_dce *_adb .BytesPerLine ;_aagd =_ef *_aag .BytesPerLine ;for _fbe ,_edff =0,0;_fbe < _dbbf ;
_fbe ,_edff =_fbe +4,_edff +1{for _agga =0;_agga < 4;_agga ++{_adg =_dca +_fbe +_agga ;if _adg <=len (_adb .Data )-1&&_adg < _dca +_adb .BytesPerLine {_cff [_agga ]=_adb .Data [_adg ];}else {_cff [_agga ]=0x00;};_adg =_dca +_adb .BytesPerLine +_fbe +_agga ;
if _adg <=len (_adb .Data )-1&&_adg < _dca +(2*_adb .BytesPerLine ){_cbf [_agga ]=_adb .Data [_adg ];}else {_cbf [_agga ]=0x00;};};_dae =_c .BigEndian .Uint32 (_cff );_aeb =_c .BigEndian .Uint32 (_cbf );_aeb &=_dae ;_aeb &=_aeb <<1;_aeb &=0xaaaaaaaa;_dae =_aeb |(_aeb <<7);
_cbe =byte (_dae >>24);_gfd =byte ((_dae >>8)&0xff);_adg =_aagd +_edff ;if _adg +1==len (_aag .Data )-1||_adg +1>=_aagd +_aag .BytesPerLine {_aag .Data [_adg ]=_dbf [_cbe ];if _aef =_aag .setByte (_adg ,_dbf [_cbe ]);_aef !=nil {return _fe .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_adg );
};}else {_dgg =(uint16 (_dbf [_cbe ])<<8)|uint16 (_dbf [_gfd ]);if _aef =_aag .setTwoBytes (_adg ,_dgg );_aef !=nil {return _fe .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_adg );
};_edff ++;};};};return nil ;};type RasterOperator int ;func (_cadc *Gray2 )Histogram ()(_bfc [256]int ){for _befa :=0;_befa < _cadc .Width ;_befa ++{for _eff :=0;_eff < _cadc .Height ;_eff ++{_bfc [_cadc .GrayAt (_befa ,_eff ).Y ]++;};};return _bfc ;};
func (_cdbaa *ImageBase )setFourBytes (_cebg int ,_dcbac uint32 )error {if _cebg +3> len (_cdbaa .Data )-1{return _fe .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cebg );
};_cdbaa .Data [_cebg ]=byte ((_dcbac &0xff000000)>>24);_cdbaa .Data [_cebg +1]=byte ((_dcbac &0xff0000)>>16);_cdbaa .Data [_cebg +2]=byte ((_dcbac &0xff00)>>8);_cdbaa .Data [_cebg +3]=byte (_dcbac &0xff);return nil ;};func (_ddd *Gray2 )ColorModel ()_ag .Model {return Gray2Model };
type shift int ;type RGBA interface{RGBAAt (_bdgf ,_aecg int )_ag .RGBA ;SetRGBA (_ggdf ,_gade int ,_gbf _ag .RGBA );};func (_gbba *Gray2 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_gbba .Width ,Y :_gbba .Height }};};func _fbed (_cfbf RGBA ,_eaee CMYK ,_ddec _g .Rectangle ){for _fbfb :=0;
_fbfb < _ddec .Max .X ;_fbfb ++{for _afc :=0;_afc < _ddec .Max .Y ;_afc ++{_ccbd :=_cfbf .RGBAAt (_fbfb ,_afc );_eaee .SetCMYK (_fbfb ,_afc ,_bdcf (_ccbd ));};};};func _cffb (_feec ,_cbfc Gray ,_ebda _g .Rectangle ){for _gfe :=0;_gfe < _ebda .Max .X ;_gfe ++{for _baa :=0;
_baa < _ebda .Max .Y ;_baa ++{_cbfc .SetGray (_gfe ,_baa ,_feec .GrayAt (_gfe ,_baa ));};};};func init (){_dfad ()};func _aage ()(_fgba []byte ){_fgba =make ([]byte ,256);for _gccd :=0;_gccd < 256;_gccd ++{_gac :=byte (_gccd );_fgba [_gac ]=(_gac &0x01)|((_gac &0x04)>>1)|((_gac &0x10)>>2)|((_gac &0x40)>>3)|((_gac &0x02)<<3)|((_gac &0x08)<<2)|((_gac &0x20)<<1)|(_gac &0x80);
};return _fgba ;};func (_cbad *Monochrome )setGray (_bcff int ,_gaef _ag .Gray ,_bgfe int ){if _gaef .Y ==0{_cbad .clearBit (_bgfe ,_bcff );}else {_cbad .setGrayBit (_bgfe ,_bcff );};};func _dbcc (_aeae *_g .NYCbCrA ,_cfbee NRGBA ,_egb _g .Rectangle ){for _acg :=0;
_acg < _egb .Max .X ;_acg ++{for _bfbg :=0;_bfbg < _egb .Max .Y ;_bfbg ++{_dea :=_aeae .NYCbCrAAt (_acg ,_bfbg );_cfbee .SetNRGBA (_acg ,_bfbg ,_dbaa (_dea ));};};};func (_gcdbe *NRGBA64 )ColorAt (x ,y int )(_ag .Color ,error ){return ColorAtNRGBA64 (x ,y ,_gcdbe .Width ,_gcdbe .Data ,_gcdbe .Alpha ,_gcdbe .Decode );
};func (_ffeaf *NRGBA64 )setNRGBA64 (_ecda int ,_dacg _ag .NRGBA64 ,_dbca int ){_ffeaf .Data [_ecda ]=uint8 (_dacg .R >>8);_ffeaf .Data [_ecda +1]=uint8 (_dacg .R &0xff);_ffeaf .Data [_ecda +2]=uint8 (_dacg .G >>8);_ffeaf .Data [_ecda +3]=uint8 (_dacg .G &0xff);
_ffeaf .Data [_ecda +4]=uint8 (_dacg .B >>8);_ffeaf .Data [_ecda +5]=uint8 (_dacg .B &0xff);if _dbca +1< len (_ffeaf .Alpha ){_ffeaf .Alpha [_dbca ]=uint8 (_dacg .A >>8);_ffeaf .Alpha [_dbca +1]=uint8 (_dacg .A &0xff);};};var _ _g .Image =&Gray4 {};type Monochrome struct{ImageBase ;
ModelThreshold uint8 ;};func _daf (_agd ,_ecg *Monochrome ,_faa []byte ,_bbea int )(_bbc error ){var (_fdad ,_bea ,_agf ,_cgb ,_aaa ,_acbe ,_gaa ,_cggb int ;_agb ,_gaab uint32 ;_ecd ,_bfb byte ;_ae uint16 ;);_ccf :=make ([]byte ,4);_bab :=make ([]byte ,4);
for _agf =0;_agf < _agd .Height -1;_agf ,_cgb =_agf +2,_cgb +1{_fdad =_agf *_agd .BytesPerLine ;_bea =_cgb *_ecg .BytesPerLine ;for _aaa ,_acbe =0,0;_aaa < _bbea ;_aaa ,_acbe =_aaa +4,_acbe +1{for _gaa =0;_gaa < 4;_gaa ++{_cggb =_fdad +_aaa +_gaa ;if _cggb <=len (_agd .Data )-1&&_cggb < _fdad +_agd .BytesPerLine {_ccf [_gaa ]=_agd .Data [_cggb ];
}else {_ccf [_gaa ]=0x00;};_cggb =_fdad +_agd .BytesPerLine +_aaa +_gaa ;if _cggb <=len (_agd .Data )-1&&_cggb < _fdad +(2*_agd .BytesPerLine ){_bab [_gaa ]=_agd .Data [_cggb ];}else {_bab [_gaa ]=0x00;};};_agb =_c .BigEndian .Uint32 (_ccf );_gaab =_c .BigEndian .Uint32 (_bab );
_gaab |=_agb ;_gaab |=_gaab <<1;_gaab &=0xaaaaaaaa;_agb =_gaab |(_gaab <<7);_ecd =byte (_agb >>24);_bfb =byte ((_agb >>8)&0xff);_cggb =_bea +_acbe ;if _cggb +1==len (_ecg .Data )-1||_cggb +1>=_bea +_ecg .BytesPerLine {_ecg .Data [_cggb ]=_faa [_ecd ];}else {_ae =(uint16 (_faa [_ecd ])<<8)|uint16 (_faa [_bfb ]);
if _bbc =_ecg .setTwoBytes (_cggb ,_ae );_bbc !=nil {return _fe .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cggb );
};_acbe ++;};};};return nil ;};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;
case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;};case 4:return CMYKConverter ,nil ;};
return nil ,_fe .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_cgdg *RGBA32 )setRGBA (_fegc int ,_fbee _ag .RGBA ){_fgfd :=3*_fegc ;_cgdg .Data [_fgfd ]=_fbee .R ;_cgdg .Data [_fgfd +1]=_fbee .G ;_cgdg .Data [_fgfd +2]=_fbee .B ;if _fegc < len (_cgdg .Alpha ){_cgdg .Alpha [_fegc ]=_fbee .A ;};};func (_ffcc *ImageBase )MakeAlpha (){_ffcc .newAlpha ()};
func (_dcfe *NRGBA32 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_dcfe .Width ,Y :_dcfe .Height }};};func (_ccda *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_ccda .copy ()}};func (_fbbb *CMYK32 )SetCMYK (x ,y int ,c _ag .CMYK ){_bda :=4*(y *_fbbb .Width +x );
if _bda +3>=len (_fbbb .Data ){return ;};_fbbb .Data [_bda ]=c .C ;_fbbb .Data [_bda +1]=c .M ;_fbbb .Data [_bda +2]=c .Y ;_fbbb .Data [_bda +3]=c .K ;};func (_cadb *ImageBase )Pix ()[]byte {return _cadb .Data };func (_efaf *Gray16 )Base ()*ImageBase {return &_efaf .ImageBase };
func _gfad (_gba _ag .NRGBA )_ag .CMYK {_abd ,_cec ,_eadd ,_ :=_gba .RGBA ();_dge ,_gcge ,_gdgd ,_fef :=_ag .RGBToCMYK (uint8 (_abd >>8),uint8 (_cec >>8),uint8 (_eadd >>8));return _ag .CMYK {C :_dge ,M :_gcge ,Y :_gdgd ,K :_fef };};func _geee (_eged uint )uint {var _ffeab uint ;
for _eged !=0{_eged >>=1;_ffeab ++;};return _ffeab -1;};var _ Image =&NRGBA32 {};func _dbd (_cdf _ag .NRGBA64 )_ag .RGBA {_dafe ,_cefc ,_cccf ,_degg :=_cdf .RGBA ();return _ag .RGBA {R :uint8 (_dafe >>8),G :uint8 (_cefc >>8),B :uint8 (_cccf >>8),A :uint8 (_degg >>8)};
};var _ _g .Image =&Gray16 {};func _gfed (_cadf _g .Image )(Image ,error ){if _fafa ,_gccdf :=_cadf .(*NRGBA16 );_gccdf {return _fafa .Copy (),nil ;};_aaacc :=_cadf .Bounds ();_adce ,_bccb :=NewImage (_aaacc .Max .X ,_aaacc .Max .Y ,4,3,nil ,nil ,nil );
if _bccb !=nil {return nil ,_bccb ;};_gffb (_cadf ,_adce ,_aaacc );return _adce ,nil ;};func _gffb (_bbbf _g .Image ,_aefb Image ,_cfcf _g .Rectangle ){if _bbcff ,_ebgfb :=_bbbf .(SMasker );_ebgfb &&_bbcff .HasAlpha (){_aefb .(SMasker ).MakeAlpha ();};
switch _eadf :=_bbbf .(type ){case Gray :_bcg (_eadf ,_aefb .(NRGBA ),_cfcf );case NRGBA :_febd (_eadf ,_aefb .(NRGBA ),_cfcf );case *_g .NYCbCrA :_dbcc (_eadf ,_aefb .(NRGBA ),_cfcf );case CMYK :_fdfe (_eadf ,_aefb .(NRGBA ),_cfcf );case RGBA :_fgbf (_eadf ,_aefb .(NRGBA ),_cfcf );
case nrgba64 :_edage (_eadf ,_aefb .(NRGBA ),_cfcf );default:_acbee (_bbbf ,_aefb ,_cfcf );};};func _gga (_cfdf *Monochrome ,_bc ...int )(_abcc *Monochrome ,_bad error ){if _cfdf ==nil {return nil ,_a .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_bc )==0{return nil ,_a .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_fae :=_aage ();_abcc =_cfdf ;for _ ,_acc :=range _bc {if _acc <=0{break ;};_abcc ,_bad =_eea (_abcc ,_acc ,_fae );if _bad !=nil {return nil ,_bad ;};};return _abcc ,nil ;};func _cfdc (_edb *Monochrome ,_cbcf ,_fdb ,_abdgc ,_gfcg int ,_edcg RasterOperator ,_baff *Monochrome ,_bbaa ,_beag int )error {var (_gbdc bool ;
_efd bool ;_cgdc byte ;_dccc int ;_agfc int ;_fefda int ;_ecgb int ;_ebfce bool ;_dcgc int ;_cacec int ;_dgeff int ;_cafe bool ;_bfcb byte ;_ecde int ;_dbbac int ;_bafe int ;_cbacd byte ;_gdcf int ;_gfca int ;_ebfec uint ;_gcgce uint ;_effb byte ;_bebd shift ;
_cgff bool ;_ffda bool ;_gbab ,_dfdc int ;);if _bbaa &7!=0{_gfca =8-(_bbaa &7);};if _cbcf &7!=0{_agfc =8-(_cbcf &7);};if _gfca ==0&&_agfc ==0{_effb =_abded [0];}else {if _agfc > _gfca {_ebfec =uint (_agfc -_gfca );}else {_ebfec =uint (8-(_gfca -_agfc ));
};_gcgce =8-_ebfec ;_effb =_abded [_ebfec ];};if (_cbcf &7)!=0{_gbdc =true ;_dccc =8-(_cbcf &7);_cgdc =_abded [_dccc ];_fefda =_edb .BytesPerLine *_fdb +(_cbcf >>3);_ecgb =_baff .BytesPerLine *_beag +(_bbaa >>3);_gdcf =8-(_bbaa &7);if _dccc > _gdcf {_bebd =_eaaf ;
if _abdgc >=_gfca {_cgff =true ;};}else {_bebd =_fcb ;};};if _abdgc < _dccc {_efd =true ;_cgdc &=_gcce [8-_dccc +_abdgc ];};if !_efd {_dcgc =(_abdgc -_dccc )>>3;if _dcgc !=0{_ebfce =true ;_cacec =_edb .BytesPerLine *_fdb +((_cbcf +_agfc )>>3);_dgeff =_baff .BytesPerLine *_beag +((_bbaa +_agfc )>>3);
};};_ecde =(_cbcf +_abdgc )&7;if !(_efd ||_ecde ==0){_cafe =true ;_bfcb =_gcce [_ecde ];_dbbac =_edb .BytesPerLine *_fdb +((_cbcf +_agfc )>>3)+_dcgc ;_bafe =_baff .BytesPerLine *_beag +((_bbaa +_agfc )>>3)+_dcgc ;if _ecde > int (_gcgce ){_ffda =true ;};
};switch _edcg {case PixSrc :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;
};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],_cbacd ,_cgdc );_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );
_edb .Data [_cacec +_dfdc ]=_cbacd ;};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;};};if _cafe {for _gbab =0;_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );
};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],_cbacd ,_bfcb );_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;};};case PixNotSrc :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );
};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],^_cbacd ,_cgdc );_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;_dfdc < _dcgc ;
_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );_edb .Data [_cacec +_dfdc ]=^_cbacd ;};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;};};if _cafe {for _gbab =0;_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;
if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],^_cbacd ,_bfcb );_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;};};case PixSrcOrDst :if _gbdc {for _gbab =0;_gbab < _gfcg ;
_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],_cbacd |_edb .Data [_fefda ],_cgdc );
_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );_edb .Data [_cacec +_dfdc ]|=_cbacd ;
};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;};};if _cafe {for _gbab =0;_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],_cbacd |_edb .Data [_dbbac ],_bfcb );
_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;};};case PixSrcAndDst :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );
};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],_cbacd &_edb .Data [_fefda ],_cgdc );_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;
_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );_edb .Data [_cacec +_dfdc ]&=_cbacd ;};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;};};if _cafe {for _gbab =0;_gbab < _gfcg ;
_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],_cbacd &_edb .Data [_dbbac ],_bfcb );_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;
};};case PixSrcXorDst :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],_cbacd ^_edb .Data [_fefda ],_cgdc );
_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );_edb .Data [_cacec +_dfdc ]^=_cbacd ;
};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;};};if _cafe {for _gbab =0;_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],_cbacd ^_edb .Data [_dbbac ],_bfcb );
_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;};};case PixNotSrcOrDst :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );
};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],^_cbacd |_edb .Data [_fefda ],_cgdc );_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;
_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );_edb .Data [_cacec +_dfdc ]|=^_cbacd ;};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;};};if _cafe {for _gbab =0;
_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],^_cbacd |_edb .Data [_dbbac ],_bfcb );_dbbac +=_edb .BytesPerLine ;
_bafe +=_baff .BytesPerLine ;};};case PixNotSrcAndDst :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;
};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],^_cbacd &_edb .Data [_fefda ],_cgdc );_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );
_edb .Data [_cacec +_dfdc ]&=^_cbacd ;};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;};};if _cafe {for _gbab =0;_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );
};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],^_cbacd &_edb .Data [_dbbac ],_bfcb );_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;};};case PixSrcOrNotDst :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;
if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],_cbacd |^_edb .Data [_fefda ],_cgdc );_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;
};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );_edb .Data [_cacec +_dfdc ]=_cbacd |^_edb .Data [_cacec +_dfdc ];
};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;};};if _cafe {for _gbab =0;_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],_cbacd |^_edb .Data [_dbbac ],_bfcb );
_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;};};case PixSrcAndNotDst :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );
};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],_cbacd &^_edb .Data [_fefda ],_cgdc );_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;
_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );_edb .Data [_cacec +_dfdc ]=_cbacd &^_edb .Data [_cacec +_dfdc ];};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;
};};if _cafe {for _gbab =0;_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],_cbacd &^_edb .Data [_dbbac ],_bfcb );
_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;};};case PixNotPixSrcOrDst :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );
};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],^(_cbacd |_edb .Data [_fefda ]),_cgdc );_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;
_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );_edb .Data [_cacec +_dfdc ]=^(_cbacd |_edb .Data [_cacec +_dfdc ]);};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;
};};if _cafe {for _gbab =0;_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],^(_cbacd |_edb .Data [_dbbac ]),_bfcb );
_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;};};case PixNotPixSrcAndDst :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );
};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],^(_cbacd &_edb .Data [_fefda ]),_cgdc );_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;
_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );_edb .Data [_cacec +_dfdc ]=^(_cbacd &_edb .Data [_cacec +_dfdc ]);};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;
};};if _cafe {for _gbab =0;_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],^(_cbacd &_edb .Data [_dbbac ]),_bfcb );
_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;};};case PixNotPixSrcXorDst :if _gbdc {for _gbab =0;_gbab < _gfcg ;_gbab ++{if _bebd ==_eaaf {_cbacd =_baff .Data [_ecgb ]<<_ebfec ;if _cgff {_cbacd =_gddce (_cbacd ,_baff .Data [_ecgb +1]>>_gcgce ,_effb );
};}else {_cbacd =_baff .Data [_ecgb ]>>_gcgce ;};_edb .Data [_fefda ]=_gddce (_edb .Data [_fefda ],^(_cbacd ^_edb .Data [_fefda ]),_cgdc );_fefda +=_edb .BytesPerLine ;_ecgb +=_baff .BytesPerLine ;};};if _ebfce {for _gbab =0;_gbab < _gfcg ;_gbab ++{for _dfdc =0;
_dfdc < _dcgc ;_dfdc ++{_cbacd =_gddce (_baff .Data [_dgeff +_dfdc ]<<_ebfec ,_baff .Data [_dgeff +_dfdc +1]>>_gcgce ,_effb );_edb .Data [_cacec +_dfdc ]=^(_cbacd ^_edb .Data [_cacec +_dfdc ]);};_cacec +=_edb .BytesPerLine ;_dgeff +=_baff .BytesPerLine ;
};};if _cafe {for _gbab =0;_gbab < _gfcg ;_gbab ++{_cbacd =_baff .Data [_bafe ]<<_ebfec ;if _ffda {_cbacd =_gddce (_cbacd ,_baff .Data [_bafe +1]>>_gcgce ,_effb );};_edb .Data [_dbbac ]=_gddce (_edb .Data [_dbbac ],^(_cbacd ^_edb .Data [_dbbac ]),_bfcb );
_dbbac +=_edb .BytesPerLine ;_bafe +=_baff .BytesPerLine ;};};default:_fa .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_edcg );
return _a .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};var _ Image =&Gray16 {};func (_ade *ImageBase )setEightFullBytes (_acf int ,_fcdb uint64 )error {if _acf +7> len (_ade .Data )-1{return _a .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ade .Data [_acf ]=byte ((_fcdb &0xff00000000000000)>>56);_ade .Data [_acf +1]=byte ((_fcdb &0xff000000000000)>>48);_ade .Data [_acf +2]=byte ((_fcdb &0xff0000000000)>>40);_ade .Data [_acf +3]=byte ((_fcdb &0xff00000000)>>32);_ade .Data [_acf +4]=byte ((_fcdb &0xff000000)>>24);
_ade .Data [_acf +5]=byte ((_fcdb &0xff0000)>>16);_ade .Data [_acf +6]=byte ((_fcdb &0xff00)>>8);_ade .Data [_acf +7]=byte (_fcdb &0xff);return nil ;};func _bacgg (_cbec _ag .NRGBA )_ag .Gray {_eeeg ,_efe ,_egf ,_ :=_cbec .RGBA ();_aacg :=(19595*_eeeg +38470*_efe +7471*_egf +1<<15)>>24;
return _ag .Gray {Y :uint8 (_aacg )};};func (_gadc *Gray8 )Validate ()error {if len (_gadc .Data )!=_gadc .Height *_gadc .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_ced *Gray4 )Base ()*ImageBase {return &_ced .ImageBase };func _feceb (_ebaec CMYK ,_gdae RGBA ,_dacbc _g .Rectangle ){for _cfgg :=0;
_cfgg < _dacbc .Max .X ;_cfgg ++{for _cadee :=0;_cadee < _dacbc .Max .Y ;_cadee ++{_ebfdc :=_ebaec .CMYKAt (_cfgg ,_cadee );_gdae .SetRGBA (_cfgg ,_cadee ,_bfdb (_ebfdc ));};};};func _gbcf (_dad []byte ,_fdfce Image )error {_aegba :=true ;for _bgff :=0;
_bgff < len (_dad );_bgff ++{if _dad [_bgff ]!=0xff{_aegba =false ;break ;};};if _aegba {switch _cbgg :=_fdfce .(type ){case *NRGBA32 :_cbgg .Alpha =nil ;case *NRGBA64 :_cbgg .Alpha =nil ;default:return _fe .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_fdfce );
};};return nil ;};func _bbaga (_ceda _ag .Color )_ag .Color {_ceff :=_ag .NRGBAModel .Convert (_ceda ).(_ag .NRGBA );return _gda (_ceff );};var _ Image =&Monochrome {};func (_cdbc *Monochrome )getBit (_dfe ,_cecb int )uint8 {return _cdbc .Data [_dfe +(_cecb >>3)]>>uint (7-(_cecb &7))&1;
};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_ag .NRGBA ,error ){_bfcee :=y *width +x ;_ffage :=3*_bfcee ;if _ffage +2>=len (data ){return _ag .NRGBA {},_fe .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_badg :=uint8 (0xff);if alpha !=nil &&len (alpha )> _bfcee {_badg =alpha [_bfcee ];};_gcb ,_baab ,_eaec :=data [_ffage ],data [_ffage +1],data [_ffage +2];if len (decode )==6{_gcb =uint8 (uint32 (LinearInterpolate (float64 (_gcb ),0,255,decode [0],decode [1]))&0xff);
_baab =uint8 (uint32 (LinearInterpolate (float64 (_baab ),0,255,decode [2],decode [3]))&0xff);_eaec =uint8 (uint32 (LinearInterpolate (float64 (_eaec ),0,255,decode [4],decode [5]))&0xff);};return _ag .NRGBA {R :_gcb ,G :_baab ,B :_eaec ,A :_badg },nil ;
};const (_eaaf shift =iota ;_fcb ;);func (_bdec *NRGBA16 )ColorModel ()_ag .Model {return NRGBA16Model };func (_cccb *NRGBA64 )At (x ,y int )_ag .Color {_ebaa ,_ :=_cccb .ColorAt (x ,y );return _ebaa };func _cbdf ()(_dde [256]uint32 ){for _dfa :=0;_dfa < 256;
_dfa ++{if _dfa &0x01!=0{_dde [_dfa ]|=0xf;};if _dfa &0x02!=0{_dde [_dfa ]|=0xf0;};if _dfa &0x04!=0{_dde [_dfa ]|=0xf00;};if _dfa &0x08!=0{_dde [_dfa ]|=0xf000;};if _dfa &0x10!=0{_dde [_dfa ]|=0xf0000;};if _dfa &0x20!=0{_dde [_dfa ]|=0xf00000;};if _dfa &0x40!=0{_dde [_dfa ]|=0xf000000;
};if _dfa &0x80!=0{_dde [_dfa ]|=0xf0000000;};};return _dde ;};var _ Image =&RGBA32 {};func (_edgge *NRGBA64 )NRGBA64At (x ,y int )_ag .NRGBA64 {_feaa ,_ :=ColorAtNRGBA64 (x ,y ,_edgge .Width ,_edgge .Data ,_edgge .Alpha ,_edgge .Decode );return _feaa ;
};func (_fbgc *CMYK32 )CMYKAt (x ,y int )_ag .CMYK {_cgab ,_ :=ColorAtCMYK (x ,y ,_fbgc .Width ,_fbgc .Data ,_fbgc .Decode );return _cgab ;};func (_ebgg *Monochrome )Base ()*ImageBase {return &_ebgg .ImageBase };func (_dbec *Gray16 )Set (x ,y int ,c _ag .Color ){_bfag :=(y *_dbec .BytesPerLine /2+x )*2;
if _bfag +1>=len (_dbec .Data ){return ;};_fbafe :=_ag .Gray16Model .Convert (c ).(_ag .Gray16 );_dbec .Data [_bfag ],_dbec .Data [_bfag +1]=uint8 (_fbafe .Y >>8),uint8 (_fbafe .Y &0xff);};func (_gadcg *RGBA32 )SetRGBA (x ,y int ,c _ag .RGBA ){_afff :=y *_gadcg .Width +x ;
_bcbf :=3*_afff ;if _bcbf +2>=len (_gadcg .Data ){return ;};_gadcg .setRGBA (_afff ,c );};func (_ecbab *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_ecbab .copy ()}};func (_fbbf *Gray2 )ColorAt (x ,y int )(_ag .Color ,error ){return ColorAtGray2BPC (x ,y ,_fbbf .BytesPerLine ,_fbbf .Data ,_fbbf .Decode );
};func (_bfceed *RGBA32 )Set (x ,y int ,c _ag .Color ){_bcce :=y *_bfceed .Width +x ;_dacbf :=3*_bcce ;if _dacbf +2>=len (_bfceed .Data ){return ;};_edcf :=_ag .RGBAModel .Convert (c ).(_ag .RGBA );_bfceed .setRGBA (_bcce ,_edcf );};func _bfdb (_efg _ag .CMYK )_ag .RGBA {_gcag ,_dbge ,_ceg :=_ag .CMYKToRGB (_efg .C ,_efg .M ,_efg .Y ,_efg .K );
return _ag .RGBA {R :_gcag ,G :_dbge ,B :_ceg ,A :0xff};};func (_fgbb *NRGBA64 )Base ()*ImageBase {return &_fgbb .ImageBase };func _afbc (_aebaa *_g .Gray16 ,_bce uint8 )*_g .Gray {_abfd :=_aebaa .Bounds ();_ccdb :=_g .NewGray (_abfd );for _agbd :=0;_agbd < _abfd .Dx ();
_agbd ++{for _dcgfff :=0;_dcgfff < _abfd .Dy ();_dcgfff ++{_ddae :=_aebaa .Gray16At (_agbd ,_dcgfff );_ccdb .SetGray (_agbd ,_dcgfff ,_ag .Gray {Y :_dcef (uint8 (_ddae .Y /256),_bce )});};};return _ccdb ;};func (_cebb *Gray16 )At (x ,y int )_ag .Color {_gcgbe ,_ :=_cebb .ColorAt (x ,y );
return _gcgbe };func (_bebe *Gray4 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_bebe .Width ,Y :_bebe .Height }};};func _gad (_bfa ,_edf *Monochrome ,_aab []byte ,_gca int )(_fgb error ){var (_afea ,_cfb ,_aca ,_bacg ,_abe ,_egg ,_fdc ,_ddc int ;
_fabg ,_fada ,_cfae ,_aed uint32 ;_cfcc ,_bace byte ;_gaeb uint16 ;);_bfg :=make ([]byte ,4);_dff :=make ([]byte ,4);for _aca =0;_aca < _bfa .Height -1;_aca ,_bacg =_aca +2,_bacg +1{_afea =_aca *_bfa .BytesPerLine ;_cfb =_bacg *_edf .BytesPerLine ;for _abe ,_egg =0,0;
_abe < _gca ;_abe ,_egg =_abe +4,_egg +1{for _fdc =0;_fdc < 4;_fdc ++{_ddc =_afea +_abe +_fdc ;if _ddc <=len (_bfa .Data )-1&&_ddc < _afea +_bfa .BytesPerLine {_bfg [_fdc ]=_bfa .Data [_ddc ];}else {_bfg [_fdc ]=0x00;};_ddc =_afea +_bfa .BytesPerLine +_abe +_fdc ;
if _ddc <=len (_bfa .Data )-1&&_ddc < _afea +(2*_bfa .BytesPerLine ){_dff [_fdc ]=_bfa .Data [_ddc ];}else {_dff [_fdc ]=0x00;};};_fabg =_c .BigEndian .Uint32 (_bfg );_fada =_c .BigEndian .Uint32 (_dff );_cfae =_fabg &_fada ;_cfae |=_cfae <<1;_aed =_fabg |_fada ;
_aed &=_aed <<1;_fada =_cfae &_aed ;_fada &=0xaaaaaaaa;_fabg =_fada |(_fada <<7);_cfcc =byte (_fabg >>24);_bace =byte ((_fabg >>8)&0xff);_ddc =_cfb +_egg ;if _ddc +1==len (_edf .Data )-1||_ddc +1>=_cfb +_edf .BytesPerLine {if _fgb =_edf .setByte (_ddc ,_aab [_cfcc ]);
_fgb !=nil {return _fe .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ddc );};}else {_gaeb =(uint16 (_aab [_cfcc ])<<8)|uint16 (_aab [_bace ]);if _fgb =_edf .setTwoBytes (_ddc ,_gaeb );_fgb !=nil {return _fe .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ddc );
};_egg ++;};};};return nil ;};func _aged (_bggbg _g .Image ,_abafa Image ,_dbfg _g .Rectangle ){if _fcgcg ,_ccg :=_bggbg .(SMasker );_ccg &&_fcgcg .HasAlpha (){_abafa .(SMasker ).MakeAlpha ();};switch _ecf :=_bggbg .(type ){case Gray :_adcb (_ecf ,_abafa .(RGBA ),_dbfg );
case NRGBA :_gbec (_ecf ,_abafa .(RGBA ),_dbfg );case *_g .NYCbCrA :_eede (_ecf ,_abafa .(RGBA ),_dbfg );case CMYK :_feceb (_ecf ,_abafa .(RGBA ),_dbfg );case RGBA :_ebfd (_ecf ,_abafa .(RGBA ),_dbfg );case nrgba64 :_ebfg (_ecf ,_abafa .(RGBA ),_dbfg );
default:_acbee (_bggbg ,_abafa ,_dbfg );};};func (_daad *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_daad .copy ()}};func _efcf (_bbb _ag .Gray )_ag .CMYK {return _ag .CMYK {K :0xff-_bbb .Y }};func _cddf (_debf *Monochrome ,_cffbg ,_dccb int ,_ecef ,_dcad int ,_cggc RasterOperator ){var (_fagc int ;
_cfce byte ;_faea ,_edbg int ;_fggc int ;);_afcd :=_ecef >>3;_dcgd :=_ecef &7;if _dcgd > 0{_cfce =_gcce [_dcgd ];};_fagc =_debf .BytesPerLine *_dccb +(_cffbg >>3);switch _cggc {case PixClr :for _faea =0;_faea < _dcad ;_faea ++{_fggc =_fagc +_faea *_debf .BytesPerLine ;
for _edbg =0;_edbg < _afcd ;_edbg ++{_debf .Data [_fggc ]=0x0;_fggc ++;};if _dcgd > 0{_debf .Data [_fggc ]=_gddce (_debf .Data [_fggc ],0x0,_cfce );};};case PixSet :for _faea =0;_faea < _dcad ;_faea ++{_fggc =_fagc +_faea *_debf .BytesPerLine ;for _edbg =0;
_edbg < _afcd ;_edbg ++{_debf .Data [_fggc ]=0xff;_fggc ++;};if _dcgd > 0{_debf .Data [_fggc ]=_gddce (_debf .Data [_fggc ],0xff,_cfce );};};case PixNotDst :for _faea =0;_faea < _dcad ;_faea ++{_fggc =_fagc +_faea *_debf .BytesPerLine ;for _edbg =0;_edbg < _afcd ;
_edbg ++{_debf .Data [_fggc ]=^_debf .Data [_fggc ];_fggc ++;};if _dcgd > 0{_debf .Data [_fggc ]=_gddce (_debf .Data [_fggc ],^_debf .Data [_fggc ],_cfce );};};};};func _fda ()(_ffa [256]uint16 ){for _bdb :=0;_bdb < 256;_bdb ++{if _bdb &0x01!=0{_ffa [_bdb ]|=0x3;
};if _bdb &0x02!=0{_ffa [_bdb ]|=0xc;};if _bdb &0x04!=0{_ffa [_bdb ]|=0x30;};if _bdb &0x08!=0{_ffa [_bdb ]|=0xc0;};if _bdb &0x10!=0{_ffa [_bdb ]|=0x300;};if _bdb &0x20!=0{_ffa [_bdb ]|=0xc00;};if _bdb &0x40!=0{_ffa [_bdb ]|=0x3000;};if _bdb &0x80!=0{_ffa [_bdb ]|=0xc000;
};};return _ffa ;};func (_defa *ImageBase )HasAlpha ()bool {if _defa .Alpha ==nil {return false ;};for _ddcef :=range _defa .Alpha {if _defa .Alpha [_ddcef ]!=0xff{return true ;};};return false ;};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_ag .Gray16 ,error ){_gagf :=(y *bytesPerLine /2+x )*2;
if _gagf +1>=len (data ){return _ag .Gray16 {},_fe .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bbdd :=uint16 (data [_gagf ])<<8|uint16 (data [_gagf +1]);if len (decode )==2{_bbdd =uint16 (uint64 (LinearInterpolate (float64 (_bbdd ),0,65535,decode [0],decode [1])));};return _ag .Gray16 {Y :_bbdd },nil ;};var (MonochromeConverter =ConverterFunc (_fee );
Gray2Converter =ConverterFunc (_gdba );Gray4Converter =ConverterFunc (_bdeg );GrayConverter =ConverterFunc (_cefe );Gray16Converter =ConverterFunc (_dagab );NRGBA16Converter =ConverterFunc (_gfed );NRGBAConverter =ConverterFunc (_eadg );NRGBA64Converter =ConverterFunc (_aabc );
RGBAConverter =ConverterFunc (_afag );CMYKConverter =ConverterFunc (_eee ););func _ede (_dbe NRGBA ,_faed CMYK ,_edg _g .Rectangle ){for _gadf :=0;_gadf < _edg .Max .X ;_gadf ++{for _gff :=0;_gff < _edg .Max .Y ;_gff ++{_afgb :=_dbe .NRGBAAt (_gadf ,_gff );
_faed .SetCMYK (_gadf ,_gff ,_gfad (_afgb ));};};};func _fee (_bbd _g .Image )(Image ,error ){if _ddce ,_cfe :=_bbd .(*Monochrome );_cfe {return _ddce ,nil ;};_eegd :=_bbd .Bounds ();var _dbdg Gray ;switch _aabg :=_bbd .(type ){case Gray :_dbdg =_aabg ;
case NRGBA :_dbdg =&Gray8 {ImageBase :NewImageBase (_eegd .Max .X ,_eegd .Max .Y ,8,1,nil ,nil ,nil )};_bfga (_dbdg ,_aabg ,_eegd );case nrgba64 :_dbdg =&Gray8 {ImageBase :NewImageBase (_eegd .Max .X ,_eegd .Max .Y ,8,1,nil ,nil ,nil )};_cdcf (_dbdg ,_aabg ,_eegd );
default:_cfea ,_ada :=GrayConverter .Convert (_bbd );if _ada !=nil {return nil ,_ada ;};_dbdg =_cfea .(Gray );};_efa ,_fgbe :=NewImage (_eegd .Max .X ,_eegd .Max .Y ,1,1,nil ,nil ,nil );if _fgbe !=nil {return nil ,_fgbe ;};_cfbb :=_efa .(*Monochrome );
_eabd :=AutoThresholdTriangle (GrayHistogram (_dbdg ));for _fcgf :=0;_fcgf < _eegd .Max .X ;_fcgf ++{for _fgc :=0;_fgc < _eegd .Max .Y ;_fgc ++{_bee :=_faag (_dbdg .GrayAt (_fcgf ,_fgc ),monochromeModel (_eabd ));_cfbb .SetGray (_fcgf ,_fgc ,_bee );};};
return _efa ,nil ;};var _ _g .Image =&Monochrome {};var ErrInvalidImage =_a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func (_dffb *Gray8 )ColorModel ()_ag .Model {return _ag .GrayModel };func _cea (_cbef _ag .NYCbCrA )_ag .RGBA {_adf ,_aedd ,_bcb ,_edfe :=_dbaa (_cbef ).RGBA ();return _ag .RGBA {R :uint8 (_adf >>8),G :uint8 (_aedd >>8),B :uint8 (_bcb >>8),A :uint8 (_edfe >>8)};
};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_geee (n )+1);};type Gray8 struct{ImageBase };func (_egade *NRGBA16 )At (x ,y int )_ag .Color {_bcfa ,_ :=_egade .ColorAt (x ,y );return _bcfa };type monochromeThresholdConverter struct{Threshold uint8 ;
};func (_cfaf *Gray4 )Set (x ,y int ,c _ag .Color ){if x >=_cfaf .Width ||y >=_cfaf .Height {return ;};_ggd :=Gray4Model .Convert (c ).(_ag .Gray );_cfaf .setGray (x ,y ,_ggd );};func _bec (_eaf _ag .NRGBA64 )_ag .Gray {var _gag _ag .NRGBA64 ;if _eaf ==_gag {return _ag .Gray {Y :0xff};
};_gaeg ,_ace ,_bffg ,_ :=_eaf .RGBA ();_cggf :=(19595*_gaeg +38470*_ace +7471*_bffg +1<<15)>>24;return _ag .Gray {Y :uint8 (_cggf )};};func (_ecgd *CMYK32 )Set (x ,y int ,c _ag .Color ){_bgc :=4*(y *_ecgd .Width +x );if _bgc +3>=len (_ecgd .Data ){return ;
};_ege :=_ag .CMYKModel .Convert (c ).(_ag .CMYK );_ecgd .Data [_bgc ]=_ege .C ;_ecgd .Data [_bgc +1]=_ege .M ;_ecgd .Data [_bgc +2]=_ege .Y ;_ecgd .Data [_bgc +3]=_ege .K ;};func (_faf *Gray2 )Validate ()error {if len (_faf .Data )!=_faf .Height *_faf .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func _dfag (_dafg _ag .Gray )_ag .Gray {_dafg .Y >>=4;_dafg .Y |=_dafg .Y <<4;return _dafg };func _dagab (_fcc _g .Image )(Image ,error ){if _eacga ,_faad :=_fcc .(*Gray16 );_faad {return _eacga .Copy (),nil ;};_ggbf :=_fcc .Bounds ();_bfdg ,_ddgb :=NewImage (_ggbf .Max .X ,_ggbf .Max .Y ,16,1,nil ,nil ,nil );
if _ddgb !=nil {return nil ,_ddgb ;};_eabc (_fcc ,_bfdg ,_ggbf );return _bfdg ,nil ;};func (_dgb colorConverter )Convert (src _g .Image )(Image ,error ){return _dgb ._abca (src )};type ColorConverter interface{Convert (_abeb _g .Image )(Image ,error );
};func (_fcgce *Gray16 )GrayAt (x ,y int )_ag .Gray {_bcc ,_ :=_fcgce .ColorAt (x ,y );return _ag .Gray {Y :uint8 (_bcc .(_ag .Gray16 ).Y >>8)};};func (_eege *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_eege .copy ()}};type NRGBA16 struct{ImageBase };
func (_cgba *Gray16 )Histogram ()(_eaddb [256]int ){for _faagf :=0;_faagf < _cgba .Width ;_faagf ++{for _abdg :=0;_abdg < _cgba .Height ;_abdg ++{_eaddb [_cgba .GrayAt (_faagf ,_abdg ).Y ]++;};};return _eaddb ;};func _ebae (_fbge *Monochrome ,_gbag ,_gddc ,_aadf ,_abgg int ,_ccfcg RasterOperator ,_aaca *Monochrome ,_bfdf ,_dfda int )error {if _fbge ==nil {return _a .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _ccfcg ==PixDst {return nil ;};switch _ccfcg {case PixClr ,PixSet ,PixNotDst :_gegd (_fbge ,_gbag ,_gddc ,_aadf ,_abgg ,_ccfcg );return nil ;};if _aaca ==nil {_fa .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _a .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _deeg :=_gcef (_fbge ,_gbag ,_gddc ,_aadf ,_abgg ,_ccfcg ,_aaca ,_bfdf ,_dfda );_deeg !=nil {return _deeg ;};return nil ;};var _ Image =&NRGBA64 {};
func ImgToBinary (i _g .Image ,threshold uint8 )*_g .Gray {switch _babd :=i .(type ){case *_g .Gray :if _gdce (_babd ){return _babd ;};return _cfcb (_babd ,threshold );case *_g .Gray16 :return _afbc (_babd ,threshold );default:return _dbef (_babd ,threshold );
};};func (_fgg *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_fgg .ImageBase .copy (),ModelThreshold :_fgg .ModelThreshold };};func (_becb *Monochrome )setBit (_efcc ,_ebfb int ){_becb .Data [_efcc +(_ebfb >>3)]|=0x80>>uint (_ebfb &7);};func _eab (_daga _ag .NRGBA )_ag .RGBA {_fcd ,_fbd ,_gec ,_daeg :=_daga .RGBA ();
return _ag .RGBA {R :uint8 (_fcd >>8),G :uint8 (_fbd >>8),B :uint8 (_gec >>8),A :uint8 (_daeg >>8)};};func (_gdb *monochromeThresholdConverter )Convert (img _g .Image )(Image ,error ){if _aeg ,_gfdf :=img .(*Monochrome );_gfdf {return _aeg .Copy (),nil ;
};_aefg :=img .Bounds ();_ecgdb ,_add :=NewImage (_aefg .Max .X ,_aefg .Max .Y ,1,1,nil ,nil ,nil );if _add !=nil {return nil ,_add ;};_ecgdb .(*Monochrome ).ModelThreshold =_gdb .Threshold ;for _eacg :=0;_eacg < _aefg .Max .X ;_eacg ++{for _fdec :=0;_fdec < _aefg .Max .Y ;
_fdec ++{_gbb :=img .At (_eacg ,_fdec );_ecgdb .Set (_eacg ,_fdec ,_gbb );};};return _ecgdb ,nil ;};var _dagg [256]uint8 ;var _ Gray =&Gray8 {};func _gcef (_cafc *Monochrome ,_caggf ,_ccdfg int ,_cfaef ,_fcef int ,_acbb RasterOperator ,_cgcag *Monochrome ,_fcea ,_aebda int )error {var _gdbfc ,_badc ,_aada ,_gdcc int ;
if _caggf < 0{_fcea -=_caggf ;_cfaef +=_caggf ;_caggf =0;};if _fcea < 0{_caggf -=_fcea ;_cfaef +=_fcea ;_fcea =0;};_gdbfc =_caggf +_cfaef -_cafc .Width ;if _gdbfc > 0{_cfaef -=_gdbfc ;};_badc =_fcea +_cfaef -_cgcag .Width ;if _badc > 0{_cfaef -=_badc ;
};if _ccdfg < 0{_aebda -=_ccdfg ;_fcef +=_ccdfg ;_ccdfg =0;};if _aebda < 0{_ccdfg -=_aebda ;_fcef +=_aebda ;_aebda =0;};_aada =_ccdfg +_fcef -_cafc .Height ;if _aada > 0{_fcef -=_aada ;};_gdcc =_aebda +_fcef -_cgcag .Height ;if _gdcc > 0{_fcef -=_gdcc ;
};if _cfaef <=0||_fcef <=0{return nil ;};var _eca error ;switch {case _caggf &7==0&&_fcea &7==0:_eca =_dbeb (_cafc ,_caggf ,_ccdfg ,_cfaef ,_fcef ,_acbb ,_cgcag ,_fcea ,_aebda );case _caggf &7==_fcea &7:_eca =_dgeb (_cafc ,_caggf ,_ccdfg ,_cfaef ,_fcef ,_acbb ,_cgcag ,_fcea ,_aebda );
default:_eca =_cfdc (_cafc ,_caggf ,_ccdfg ,_cfaef ,_fcef ,_acbb ,_cgcag ,_fcea ,_aebda );};if _eca !=nil {return _eca ;};return nil ;};func (_cdg *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_fe .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _d (_cdg ,factor );};func (_cgfgg *NRGBA32 )ColorModel ()_ag .Model {return _ag .NRGBAModel };func _eabc (_ecb _g .Image ,_deec Image ,_eccb _g .Rectangle ){switch _affc :=_ecb .(type ){case Gray :_cffb (_affc ,_deec .(Gray ),_eccb );case NRGBA :_fedc (_affc ,_deec .(Gray ),_eccb );
case CMYK :_eeeb (_affc ,_deec .(Gray ),_eccb );case RGBA :_bdg (_affc ,_deec .(Gray ),_eccb );default:_acbee (_ecb ,_deec .(Image ),_eccb );};};func (_cagb *ImageBase )setByte (_fea int ,_defdd byte )error {if _fea > len (_cagb .Data )-1{return _a .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cagb .Data [_fea ]=_defdd ;return nil ;};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_ag .NRGBA64 ,error ){_dbeg :=(y *width +x )*2;_cebf :=_dbeg *3;if _cebf +5>=len (data ){return _ag .NRGBA64 {},_fe .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _bdff =0xffff;_fdbg :=uint16 (_bdff );if alpha !=nil &&len (alpha )> _dbeg +1{_fdbg =uint16 (alpha [_dbeg ])<<8|uint16 (alpha [_dbeg +1]);};_bfdgg :=uint16 (data [_cebf ])<<8|uint16 (data [_cebf +1]);_aadad :=uint16 (data [_cebf +2])<<8|uint16 (data [_cebf +3]);
_agcg :=uint16 (data [_cebf +4])<<8|uint16 (data [_cebf +5]);if len (decode )==6{_bfdgg =uint16 (uint64 (LinearInterpolate (float64 (_bfdgg ),0,65535,decode [0],decode [1]))&_bdff );_aadad =uint16 (uint64 (LinearInterpolate (float64 (_aadad ),0,65535,decode [2],decode [3]))&_bdff );
_agcg =uint16 (uint64 (LinearInterpolate (float64 (_agcg ),0,65535,decode [4],decode [5]))&_bdff );};return _ag .NRGBA64 {R :_bfdgg ,G :_aadad ,B :_agcg ,A :_fdbg },nil ;};func _eea (_bac *Monochrome ,_cce int ,_gdg []byte )(_cfc *Monochrome ,_gae error ){const _agg ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";
if _bac ==nil {return nil ,_a .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cce < 1||_cce > 4{return nil ,_a .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _bac .Height <=1{return nil ,_a .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_cfc =_ddg (_bac .Width /2,_bac .Height /2);
if _gdg ==nil {_gdg =_aage ();};_ddf :=_begb (_bac .BytesPerLine ,2*_cfc .BytesPerLine );switch _cce {case 1:_gae =_daf (_bac ,_cfc ,_gdg ,_ddf );case 2:_gae =_cgf (_bac ,_cfc ,_gdg ,_ddf );case 3:_gae =_gad (_bac ,_cfc ,_gdg ,_ddf );case 4:_gae =_daa (_bac ,_cfc ,_gdg ,_ddf );
};if _gae !=nil {return nil ,_gae ;};return _cfc ,nil ;};func (_dda *Monochrome )At (x ,y int )_ag .Color {_ebgf ,_ :=_dda .ColorAt (x ,y );return _ebgf };type RGBA32 struct{ImageBase };func _eaga (_eac _ag .RGBA )_ag .Gray {_aabb :=(19595*uint32 (_eac .R )+38470*uint32 (_eac .G )+7471*uint32 (_eac .B )+1<<7)>>16;
return _ag .Gray {Y :uint8 (_aabb )};};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;
PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _cfcb (_gdga *_g .Gray ,_febc uint8 )*_g .Gray {_bgccb :=_gdga .Bounds ();_ebfgb :=_g .NewGray (_bgccb );for _ebfgg :=0;_ebfgg < _bgccb .Dx ();
_ebfgg ++{for _acaf :=0;_acaf < _bgccb .Dy ();_acaf ++{_dbda :=_gdga .GrayAt (_ebfgg ,_acaf );_ebfgb .SetGray (_ebfgg ,_acaf ,_ag .Gray {Y :_dcef (_dbda .Y ,_febc )});};};return _ebfgb ;};func (_cde *ImageBase )setEightPartlyBytes (_cgfa ,_fadd int ,_fbag uint64 )(_abde error ){var (_fgbd byte ;
_aaaa int ;);for _baf :=1;_baf <=_fadd ;_baf ++{_aaaa =64-_baf *8;_fgbd =byte (_fbag >>uint (_aaaa )&0xff);if _abde =_cde .setByte (_cgfa +_baf -1,_fgbd );_abde !=nil {return _abde ;};};_dbc :=_cde .BytesPerLine *8-_cde .Width ;if _dbc ==0{return nil ;
};_aaaa -=8;_fgbd =byte (_fbag >>uint (_aaaa )&0xff)<<uint (_dbc );if _abde =_cde .setByte (_cgfa +_fadd ,_fgbd );_abde !=nil {return _abde ;};return nil ;};func (_bgcd *NRGBA16 )Validate ()error {if len (_bgcd .Data )!=3*_bgcd .Width *_bgcd .Height /2{return _a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _agffd (_adagb *Monochrome ,_adc ,_deccf int ,_egc ,_abfb int ,_adff RasterOperator ){var (_fdgd bool ;_dacc bool ;_dfbb int ;_ageg int ;_bgcc int ;_bebgg int ;_gfee bool ;_gacg byte ;);_gbdf :=8-(_adc &7);_caeb :=_abded [_gbdf ];_gdgda :=_adagb .BytesPerLine *_deccf +(_adc >>3);
if _egc < _gbdf {_fdgd =true ;_caeb &=_gcce [8-_gbdf +_egc ];};if !_fdgd {_dfbb =(_egc -_gbdf )>>3;if _dfbb !=0{_dacc =true ;_ageg =_gdgda +1;};};_bgcc =(_adc +_egc )&7;if !(_fdgd ||_bgcc ==0){_gfee =true ;_gacg =_gcce [_bgcc ];_bebgg =_gdgda +1+_dfbb ;
};var _gea ,_adgf int ;switch _adff {case PixClr :for _gea =0;_gea < _abfb ;_gea ++{_adagb .Data [_gdgda ]=_gddce (_adagb .Data [_gdgda ],0x0,_caeb );_gdgda +=_adagb .BytesPerLine ;};if _dacc {for _gea =0;_gea < _abfb ;_gea ++{for _adgf =0;_adgf < _dfbb ;
_adgf ++{_adagb .Data [_ageg +_adgf ]=0x0;};_ageg +=_adagb .BytesPerLine ;};};if _gfee {for _gea =0;_gea < _abfb ;_gea ++{_adagb .Data [_bebgg ]=_gddce (_adagb .Data [_bebgg ],0x0,_gacg );_bebgg +=_adagb .BytesPerLine ;};};case PixSet :for _gea =0;_gea < _abfb ;
_gea ++{_adagb .Data [_gdgda ]=_gddce (_adagb .Data [_gdgda ],0xff,_caeb );_gdgda +=_adagb .BytesPerLine ;};if _dacc {for _gea =0;_gea < _abfb ;_gea ++{for _adgf =0;_adgf < _dfbb ;_adgf ++{_adagb .Data [_ageg +_adgf ]=0xff;};_ageg +=_adagb .BytesPerLine ;
};};if _gfee {for _gea =0;_gea < _abfb ;_gea ++{_adagb .Data [_bebgg ]=_gddce (_adagb .Data [_bebgg ],0xff,_gacg );_bebgg +=_adagb .BytesPerLine ;};};case PixNotDst :for _gea =0;_gea < _abfb ;_gea ++{_adagb .Data [_gdgda ]=_gddce (_adagb .Data [_gdgda ],^_adagb .Data [_gdgda ],_caeb );
_gdgda +=_adagb .BytesPerLine ;};if _dacc {for _gea =0;_gea < _abfb ;_gea ++{for _adgf =0;_adgf < _dfbb ;_adgf ++{_adagb .Data [_ageg +_adgf ]=^(_adagb .Data [_ageg +_adgf ]);};_ageg +=_adagb .BytesPerLine ;};};if _gfee {for _gea =0;_gea < _abfb ;_gea ++{_adagb .Data [_bebgg ]=_gddce (_adagb .Data [_bebgg ],^_adagb .Data [_bebgg ],_gacg );
_bebgg +=_adagb .BytesPerLine ;};};};};func (_geg *CMYK32 )Base ()*ImageBase {return &_geg .ImageBase };var _ Image =&CMYK32 {};func _gaee (_eade _ag .RGBA )_ag .NRGBA {switch _eade .A {case 0xff:return _ag .NRGBA {R :_eade .R ,G :_eade .G ,B :_eade .B ,A :0xff};
case 0x00:return _ag .NRGBA {};default:_ebd ,_edfc ,_gbe ,_dacb :=_eade .RGBA ();_ebd =(_ebd *0xffff)/_dacb ;_edfc =(_edfc *0xffff)/_dacb ;_gbe =(_gbe *0xffff)/_dacb ;return _ag .NRGBA {R :uint8 (_ebd >>8),G :uint8 (_edfc >>8),B :uint8 (_gbe >>8),A :uint8 (_dacb >>8)};
};};func _fdfe (_fbfc CMYK ,_bccgd NRGBA ,_fecf _g .Rectangle ){for _gceg :=0;_gceg < _fecf .Max .X ;_gceg ++{for _cgce :=0;_cgce < _fecf .Max .Y ;_cgce ++{_cbda :=_fbfc .CMYKAt (_gceg ,_cgce );_bccgd .SetNRGBA (_gceg ,_cgce ,_fbcg (_cbda ));};};};func _gegd (_gecg *Monochrome ,_cfba ,_deed ,_fadc ,_efea int ,_aggg RasterOperator ){if _cfba < 0{_fadc +=_cfba ;
_cfba =0;};_deccg :=_cfba +_fadc -_gecg .Width ;if _deccg > 0{_fadc -=_deccg ;};if _deed < 0{_efea +=_deed ;_deed =0;};_cee :=_deed +_efea -_gecg .Height ;if _cee > 0{_efea -=_cee ;};if _fadc <=0||_efea <=0{return ;};if (_cfba &7)==0{_cddf (_gecg ,_cfba ,_deed ,_fadc ,_efea ,_aggg );
}else {_agffd (_gecg ,_cfba ,_deed ,_fadc ,_efea ,_aggg );};};func (_fbff *ImageBase )setTwoBytes (_edfcb int ,_bebg uint16 )error {if _edfcb +1> len (_fbff .Data )-1{return _a .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fbff .Data [_edfcb ]=byte ((_bebg &0xff00)>>8);_fbff .Data [_edfcb +1]=byte (_bebg &0xff);return nil ;};func _fdag (_egd Gray ,_abed CMYK ,_ebfc _g .Rectangle ){for _ebg :=0;_ebg < _ebfc .Max .X ;_ebg ++{for _dfcf :=0;_dfcf < _ebfc .Max .Y ;_dfcf ++{_bdc :=_egd .GrayAt (_ebg ,_dfcf );
_abed .SetCMYK (_ebg ,_dfcf ,_efcf (_bdc ));};};};func ConverterFunc (converterFunc func (_gaaa _g .Image )(Image ,error ))ColorConverter {return colorConverter {_abca :converterFunc };};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_ag .NRGBA ,error ){_bag :=y *bytesPerLine +x *3/2;
if _bag +1>=len (data ){return _ag .NRGBA {},_bfce (x ,y );};const (_gdca =0xf;_aeddb =uint8 (0xff););_fbbfg :=_aeddb ;if alpha !=nil {_fcgfd :=y *BytesPerLine (width ,4,1);if _fcgfd < len (alpha ){if x %2==0{_fbbfg =(alpha [_fcgfd ]>>uint (4))&_gdca ;
}else {_fbbfg =alpha [_fcgfd ]&_gdca ;};_fbbfg |=_fbbfg <<4;};};var _begbg ,_befb ,_agaec uint8 ;if x *3%2==0{_begbg =(data [_bag ]>>uint (4))&_gdca ;_befb =data [_bag ]&_gdca ;_agaec =(data [_bag +1]>>uint (4))&_gdca ;}else {_begbg =data [_bag ]&_gdca ;
_befb =(data [_bag +1]>>uint (4))&_gdca ;_agaec =data [_bag +1]&_gdca ;};if len (decode )==6{_begbg =uint8 (uint32 (LinearInterpolate (float64 (_begbg ),0,15,decode [0],decode [1]))&0xf);_befb =uint8 (uint32 (LinearInterpolate (float64 (_befb ),0,15,decode [2],decode [3]))&0xf);
_agaec =uint8 (uint32 (LinearInterpolate (float64 (_agaec ),0,15,decode [4],decode [5]))&0xf);};return _ag .NRGBA {R :(_begbg <<4)|(_begbg &0xf),G :(_befb <<4)|(_befb &0xf),B :(_agaec <<4)|(_agaec &0xf),A :_fbbfg },nil ;};func (_ccac *Gray4 )GrayAt (x ,y int )_ag .Gray {_caba ,_ :=ColorAtGray4BPC (x ,y ,_ccac .BytesPerLine ,_ccac .Data ,_ccac .Decode );
return _caba ;};func (_bfgee *RGBA32 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_bfgee .Width ,Y :_bfgee .Height }};};func (_caga *NRGBA16 )Set (x ,y int ,c _ag .Color ){_agfa :=y *_caga .BytesPerLine +x *3/2;if _agfa +1>=len (_caga .Data ){return ;
};_aecc :=NRGBA16Model .Convert (c ).(_ag .NRGBA );_caga .setNRGBA (x ,y ,_agfa ,_aecc );};type Image interface{_f .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_eceb ,_fbdd int )(_ag .Color ,error );Validate ()error ;};func _ebfd (_ffgbd ,_fege RGBA ,_cbecd _g .Rectangle ){for _ebaf :=0;
_ebaf < _cbecd .Max .X ;_ebaf ++{for _ccebg :=0;_ccebg < _cbecd .Max .Y ;_ccebg ++{_fege .SetRGBA (_ebaf ,_ccebg ,_ffgbd .RGBAAt (_ebaf ,_ccebg ));};};};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;
};func _gdba (_acca _g .Image )(Image ,error ){if _bgb ,_eadef :=_acca .(*Gray2 );_eadef {return _bgb .Copy (),nil ;};_dfb :=_acca .Bounds ();_gdfe ,_egad :=NewImage (_dfb .Max .X ,_dfb .Max .Y ,2,1,nil ,nil ,nil );if _egad !=nil {return nil ,_egad ;};
_eabc (_acca ,_gdfe ,_dfb );return _gdfe ,nil ;};func (_dfcg *RGBA32 )At (x ,y int )_ag .Color {_eace ,_ :=_dfcg .ColorAt (x ,y );return _eace };func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func (_bbag *Gray16 )ColorModel ()_ag .Model {return _ag .Gray16Model };
var _ Image =&Gray8 {};func (_acec *NRGBA16 )SetNRGBA (x ,y int ,c _ag .NRGBA ){_defg :=y *_acec .BytesPerLine +x *3/2;if _defg +1>=len (_acec .Data ){return ;};c =_gda (c );_acec .setNRGBA (x ,y ,_defg ,c );};func (_fagb *NRGBA32 )At (x ,y int )_ag .Color {_faeae ,_ :=_fagb .ColorAt (x ,y );
return _faeae };func _eee (_cgc _g .Image )(Image ,error ){if _fgf ,_cbdd :=_cgc .(*CMYK32 );_cbdd {return _fgf .Copy (),nil ;};_cffa :=_cgc .Bounds ();_bae ,_bca :=NewImage (_cffa .Max .X ,_cffa .Max .Y ,8,4,nil ,nil ,nil );if _bca !=nil {return nil ,_bca ;
};switch _deeb :=_cgc .(type ){case CMYK :_fdd (_deeb ,_bae .(CMYK ),_cffa );case Gray :_fdag (_deeb ,_bae .(CMYK ),_cffa );case NRGBA :_ede (_deeb ,_bae .(CMYK ),_cffa );case RGBA :_fbed (_deeb ,_bae .(CMYK ),_cffa );default:_acbee (_cgc ,_bae ,_cffa );
};return _bae ,nil ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_ag .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_fe .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func (_bbcf *NRGBA16 )Base ()*ImageBase {return &_bbcf .ImageBase };func (_afdg *NRGBA64 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_afdg .Width ,Y :_afdg .Height }};};func (_affb *NRGBA64 )Validate ()error {if len (_affb .Data )!=3*2*_affb .Width *_affb .Height {return _a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_aaac *Gray2 )At (x ,y int )_ag .Color {_cbea ,_ :=_aaac .ColorAt (x ,y );return _cbea };func _adcb (_ecbg Gray ,_gada RGBA ,_aagb _g .Rectangle ){for _ddaa :=0;_ddaa < _aagb .Max .X ;_ddaa ++{for _bbef :=0;_bbef < _aagb .Max .Y ;
_bbef ++{_gbfd :=_ecbg .GrayAt (_ddaa ,_bbef );_gada .SetRGBA (_ddaa ,_bbef ,_gef (_gbfd ));};};};func (_efbb *RGBA32 )ColorAt (x ,y int )(_ag .Color ,error ){return ColorAtRGBA32 (x ,y ,_efbb .Width ,_efbb .Data ,_efbb .Alpha ,_efbb .Decode );};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_ebeef :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_ebeef .Data =make ([]byte ,height *_ebeef .BytesPerLine );};return _ebeef ;};func _dbaa (_eeed _ag .NYCbCrA )_ag .NRGBA {_cdd :=int32 (_eeed .Y )*0x10101;_edcc :=int32 (_eeed .Cb )-128;_cac :=int32 (_eeed .Cr )-128;_cbed :=_cdd +91881*_cac ;
if uint32 (_cbed )&0xff000000==0{_cbed >>=8;}else {_cbed =^(_cbed >>31)&0xffff;};_cge :=_cdd -22554*_edcc -46802*_cac ;if uint32 (_cge )&0xff000000==0{_cge >>=8;}else {_cge =^(_cge >>31)&0xffff;};_gcac :=_cdd +116130*_edcc ;if uint32 (_gcac )&0xff000000==0{_gcac >>=8;
}else {_gcac =^(_gcac >>31)&0xffff;};return _ag .NRGBA {R :uint8 (_cbed >>8),G :uint8 (_cge >>8),B :uint8 (_gcac >>8),A :_eeed .A };};func (_cfgc *Monochrome )clearBit (_cfgcc ,_dec int ){_cfgc .Data [_cfgcc ]&=^(0x80>>uint (_dec &7))};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_gbbg :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _fdgb Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_fdgb =&Monochrome {ImageBase :_gbbg ,ModelThreshold :0x0f};case 2:_fdgb =&Gray2 {ImageBase :_gbbg };case 4:_fdgb =&Gray4 {ImageBase :_gbbg };case 8:_fdgb =&Gray8 {ImageBase :_gbbg };
case 16:_fdgb =&Gray16 {ImageBase :_gbbg };};case 3:switch bitsPerComponent {case 4:_fdgb =&NRGBA16 {ImageBase :_gbbg };case 8:_fdgb =&NRGBA32 {ImageBase :_gbbg };case 16:_fdgb =&NRGBA64 {ImageBase :_gbbg };};case 4:_fdgb =&CMYK32 {ImageBase :_gbbg };};
if _fdgb ==nil {return nil ,ErrInvalidImage ;};return _fdgb ,nil ;};func _bbf (_abedg _g .Image ,_afbg int )(_g .Rectangle ,bool ,[]byte ){_ccab :=_abedg .Bounds ();var (_bcd bool ;_aecgg []byte ;);switch _bebdd :=_abedg .(type ){case SMasker :_bcd =_bebdd .HasAlpha ();
case NRGBA ,RGBA ,*_g .RGBA64 ,nrgba64 ,*_g .NYCbCrA :_aecgg =make ([]byte ,_ccab .Max .X *_ccab .Max .Y *_afbg );case *_g .Paletted :var _cdef bool ;for _ ,_abaf :=range _bebdd .Palette {_eecd ,_bge ,_dfcac ,_adgde :=_abaf .RGBA ();if _eecd ==0&&_bge ==0&&_dfcac ==0&&_adgde !=0{_cdef =true ;
break ;};};if _cdef {_aecgg =make ([]byte ,_ccab .Max .X *_ccab .Max .Y *_afbg );};};return _ccab ,_bcd ,_aecgg ;};func (_cceb *RGBA32 )ColorModel ()_ag .Model {return _ag .NRGBAModel };func _dfad (){for _bfed :=0;_bfed < 256;_bfed ++{_dagg [_bfed ]=uint8 (_bfed &0x1)+(uint8 (_bfed >>1)&0x1)+(uint8 (_bfed >>2)&0x1)+(uint8 (_bfed >>3)&0x1)+(uint8 (_bfed >>4)&0x1)+(uint8 (_bfed >>5)&0x1)+(uint8 (_bfed >>6)&0x1)+(uint8 (_bfed >>7)&0x1);
};};func (_baag *NRGBA64 )Set (x ,y int ,c _ag .Color ){_becba :=(y *_baag .Width +x )*2;_adad :=_becba *3;if _adad +5>=len (_baag .Data ){return ;};_fcff :=_ag .NRGBA64Model .Convert (c ).(_ag .NRGBA64 );_baag .setNRGBA64 (_adad ,_fcff ,_becba );};func _fgbf (_cbdb RGBA ,_dgdg NRGBA ,_aagc _g .Rectangle ){for _cceac :=0;
_cceac < _aagc .Max .X ;_cceac ++{for _bgcdc :=0;_bgcdc < _aagc .Max .Y ;_bgcdc ++{_bbagg :=_cbdb .RGBAAt (_cceac ,_bgcdc );_dgdg .SetNRGBA (_cceac ,_bgcdc ,_gaee (_bbagg ));};};};var _ Image =&Gray4 {};func (_gbaf *NRGBA16 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_gbaf .Width ,Y :_gbaf .Height }};
};func (_gdbf *Gray16 )SetGray (x ,y int ,g _ag .Gray ){_aebc :=(y *_gdbf .BytesPerLine /2+x )*2;if _aebc +1>=len (_gdbf .Data ){return ;};_gdbf .Data [_aebc ]=g .Y ;_gdbf .Data [_aebc +1]=g .Y ;};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_ag .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_fe .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func _eeeb (_abcab CMYK ,_eggc Gray ,_gacc _g .Rectangle ){for _aegb :=0;_aegb < _gacc .Max .X ;_aegb ++{for _dcgf :=0;_dcgf < _gacc .Max .Y ;_dcgf ++{_bbgb :=_ceb (_abcab .CMYKAt (_aegb ,_dcgf ));_eggc .SetGray (_aegb ,_dcgf ,_bbgb );};};};func _ebfg (_fdeb nrgba64 ,_ddaac RGBA ,_addc _g .Rectangle ){for _bfff :=0;
_bfff < _addc .Max .X ;_bfff ++{for _bcdf :=0;_bcdf < _addc .Max .Y ;_bcdf ++{_edffe :=_fdeb .NRGBA64At (_bfff ,_bcdf );_ddaac .SetRGBA (_bfff ,_bcdf ,_dbd (_edffe ));};};};func (_faeb *Monochrome )setGrayBit (_cca ,_adaf int ){_faeb .Data [_cca ]|=0x80>>uint (_adaf &7)};
func (_gfdd *NRGBA16 )NRGBAAt (x ,y int )_ag .NRGBA {_bbbd ,_ :=ColorAtNRGBA16 (x ,y ,_gfdd .Width ,_gfdd .BytesPerLine ,_gfdd .Data ,_gfdd .Alpha ,_gfdd .Decode );return _bbbd ;};func (_dffbb *NRGBA32 )Validate ()error {if len (_dffbb .Data )!=3*_dffbb .Width *_dffbb .Height {return _a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_ccdf :=BytesPerLine (width ,bitsPerComponent ,colorComponents );if _ccdf ==width *colorComponents *bitsPerComponent /8{return data ,nil ;
};_dddc :=width *colorComponents *bitsPerComponent ;_bgdd :=_ccdf *8;_gaad :=8-(_bgdd -_dddc );_dbcd :=_cg .NewReader (data );_fcec :=_ccdf -1;_aaef :=make ([]byte ,_fcec );_dgde :=make ([]byte ,height *_ccdf );_adea :=_cg .NewWriterMSB (_dgde );var _gce uint64 ;
var _feca error ;for _geeg :=0;_geeg < height ;_geeg ++{_ ,_feca =_dbcd .Read (_aaef );if _feca !=nil {return nil ,_feca ;};_ ,_feca =_adea .Write (_aaef );if _feca !=nil {return nil ,_feca ;};_gce ,_feca =_dbcd .ReadBits (byte (_gaad ));if _feca !=nil {return nil ,_feca ;
};_ ,_feca =_adea .WriteBits (_gce ,_gaad );if _feca !=nil {return nil ,_feca ;};_adea .FinishByte ();};return _dgde ,nil ;};func _gbec (_gccdb NRGBA ,_agaa RGBA ,_ddcaf _g .Rectangle ){for _aaf :=0;_aaf < _ddcaf .Max .X ;_aaf ++{for _badd :=0;_badd < _ddcaf .Max .Y ;
_badd ++{_dbae :=_gccdb .NRGBAAt (_aaf ,_badd );_agaa .SetRGBA (_aaf ,_badd ,_eab (_dbae ));};};};func (_ffgb *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _ebae (_ffgb ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _fed (_ge ,_ec *Monochrome )(_cfd error ){_cc :=_ec .BytesPerLine ;_db :=_ge .BytesPerLine ;var (_eag byte ;_eg uint16 ;_dee ,_fd ,_dba ,_ccd ,_ad int ;);for _dba =0;_dba < _ec .Height ;_dba ++{_dee =_dba *_cc ;_fd =2*_dba *_db ;for _ccd =0;_ccd < _cc ;
_ccd ++{_eag =_ec .Data [_dee +_ccd ];_eg =_af [_eag ];_ad =_fd +_ccd *2;if _ge .BytesPerLine !=_ec .BytesPerLine *2&&(_ccd +1)*2> _ge .BytesPerLine {_cfd =_ge .setByte (_ad ,byte (_eg >>8));}else {_cfd =_ge .setTwoBytes (_ad ,_eg );};if _cfd !=nil {return _cfd ;
};};for _ccd =0;_ccd < _db ;_ccd ++{_ad =_fd +_db +_ccd ;_eag =_ge .Data [_fd +_ccd ];if _cfd =_ge .setByte (_ad ,_eag );_cfd !=nil {return _cfd ;};};};return nil ;};func (_ffab *ImageBase )GetAlpha ()[]byte {return _ffab .Alpha };func (_ebgc *Monochrome )copy ()*Monochrome {_bgdc :=_ddg (_ebgc .Width ,_ebgc .Height );
_bgdc .ModelThreshold =_ebgc .ModelThreshold ;_bgdc .Data =make ([]byte ,len (_ebgc .Data ));copy (_bgdc .Data ,_ebgc .Data );if len (_ebgc .Decode )!=0{_bgdc .Decode =make ([]float64 ,len (_ebgc .Decode ));copy (_bgdc .Decode ,_ebgc .Decode );};if len (_ebgc .Alpha )!=0{_bgdc .Alpha =make ([]byte ,len (_ebgc .Alpha ));
copy (_bgdc .Alpha ,_ebgc .Alpha );};return _bgdc ;};var _ Gray =&Monochrome {};func (_eecc *NRGBA32 )Base ()*ImageBase {return &_eecc .ImageBase };var (_af =_fda ();_eaa =_cbdf ();_fbc =_ggb (););func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_ag .RGBA ,error ){_fddf :=y *width +x ;
_dgcg :=3*_fddf ;if _dgcg +2>=len (data ){return _ag .RGBA {},_fe .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ffabe :=uint8 (0xff);if alpha !=nil &&len (alpha )> _fddf {_ffabe =alpha [_fddf ];};_afge ,_ffcg ,_ebdbb :=data [_dgcg ],data [_dgcg +1],data [_dgcg +2];if len (decode )==6{_afge =uint8 (uint32 (LinearInterpolate (float64 (_afge ),0,255,decode [0],decode [1]))&0xff);
_ffcg =uint8 (uint32 (LinearInterpolate (float64 (_ffcg ),0,255,decode [2],decode [3]))&0xff);_ebdbb =uint8 (uint32 (LinearInterpolate (float64 (_ebdbb ),0,255,decode [4],decode [5]))&0xff);};return _ag .RGBA {R :_afge ,G :_ffcg ,B :_ebdbb ,A :_ffabe },nil ;
};func _bfga (_fce Gray ,_cagg NRGBA ,_edgc _g .Rectangle ){for _ded :=0;_ded < _edgc .Max .X ;_ded ++{for _fbgb :=0;_fbgb < _edgc .Max .Y ;_fbgb ++{_afcc :=_eef (_cagg .NRGBAAt (_ded ,_fbgb ));_fce .SetGray (_ded ,_fbgb ,_afcc );};};};func (_gdc *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_gdc .copy ()}};
var _ _g .Image =&NRGBA32 {};func (_bfgb *Monochrome )getBitAt (_gfg ,_cadac int )bool {_dga :=_cadac *_bfgb .BytesPerLine +(_gfg >>3);_gdfd :=_gfg &0x07;_acbg :=uint (7-_gdfd );if _dga > len (_bfgb .Data )-1{return false ;};if (_bfgb .Data [_dga ]>>_acbg )&0x01>=1{return true ;
};return false ;};func _ggb ()(_cad [256]uint64 ){for _bb :=0;_bb < 256;_bb ++{if _bb &0x01!=0{_cad [_bb ]|=0xff;};if _bb &0x02!=0{_cad [_bb ]|=0xff00;};if _bb &0x04!=0{_cad [_bb ]|=0xff0000;};if _bb &0x08!=0{_cad [_bb ]|=0xff000000;};if _bb &0x10!=0{_cad [_bb ]|=0xff00000000;
};if _bb &0x20!=0{_cad [_bb ]|=0xff0000000000;};if _bb &0x40!=0{_cad [_bb ]|=0xff000000000000;};if _bb &0x80!=0{_cad [_bb ]|=0xff00000000000000;};};return _cad ;};func (_ccfc *CMYK32 )Validate ()error {if len (_ccfc .Data )!=4*_ccfc .Width *_ccfc .Height {return _a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_eafb *Monochrome )AddPadding ()(_efbe error ){if _adbd :=((_eafb .Width *_eafb .Height )+7)>>3;len (_eafb .Data )< _adbd {return _fe .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_eafb .Data ),_adbd );
};_aefe :=_eafb .Width %8;if _aefe ==0{return nil ;};_ggf :=_eafb .Width /8;_eead :=_cg .NewReader (_eafb .Data );_gdee :=make ([]byte ,_eafb .Height *_eafb .BytesPerLine );_ebee :=_cg .NewWriterMSB (_gdee );_fge :=make ([]byte ,_ggf );var (_gdd int ;_egfc uint64 ;
);for _gdd =0;_gdd < _eafb .Height ;_gdd ++{if _ ,_efbe =_eead .Read (_fge );_efbe !=nil {return _efbe ;};if _ ,_efbe =_ebee .Write (_fge );_efbe !=nil {return _efbe ;};if _egfc ,_efbe =_eead .ReadBits (byte (_aefe ));_efbe !=nil {return _efbe ;};if _efbe =_ebee .WriteByte (byte (_egfc )<<uint (8-_aefe ));
_efbe !=nil {return _efbe ;};};_eafb .Data =_ebee .Data ();return nil ;};func _cd (_dc ,_ca *Monochrome )(_cdc error ){_fbb :=_ca .BytesPerLine ;_aae :=_dc .BytesPerLine ;_cb :=_ca .BytesPerLine *4-_dc .BytesPerLine ;var (_abc ,_fg byte ;_bf uint32 ;_ed ,_fc ,_eae ,_dd ,_da ,_gg ,_dag int ;
);for _eae =0;_eae < _ca .Height ;_eae ++{_ed =_eae *_fbb ;_fc =4*_eae *_aae ;for _dd =0;_dd < _fbb ;_dd ++{_abc =_ca .Data [_ed +_dd ];_bf =_eaa [_abc ];_gg =_fc +_dd *4;if _cb !=0&&(_dd +1)*4> _dc .BytesPerLine {for _da =_cb ;_da > 0;_da --{_fg =byte ((_bf >>uint (_da *8))&0xff);
_dag =_gg +(_cb -_da );if _cdc =_dc .setByte (_dag ,_fg );_cdc !=nil {return _cdc ;};};}else if _cdc =_dc .setFourBytes (_gg ,_bf );_cdc !=nil {return _cdc ;};if _cdc =_dc .setFourBytes (_fc +_dd *4,_eaa [_ca .Data [_ed +_dd ]]);_cdc !=nil {return _cdc ;
};};for _da =1;_da < 4;_da ++{for _dd =0;_dd < _aae ;_dd ++{if _cdc =_dc .setByte (_fc +_da *_aae +_dd ,_dc .Data [_fc +_dd ]);_cdc !=nil {return _cdc ;};};};};return nil ;};func (_adgd *Gray4 )Validate ()error {if len (_adgd .Data )!=_adgd .Height *_adgd .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_ega *Monochrome )ColorModel ()_ag .Model {return MonochromeModel (_ega .ModelThreshold )};func _cdcf (_cbedc Gray ,_adfd nrgba64 ,_aff _g .Rectangle ){for _gfcd :=0;_gfcd < _aff .Max .X ;_gfcd ++{for _efcd :=0;_efcd < _aff .Max .Y ;
_efcd ++{_bba :=_bec (_adfd .NRGBA64At (_gfcd ,_efcd ));_cbedc .SetGray (_gfcd ,_efcd ,_bba );};};};func (_febf *Monochrome )SetGray (x ,y int ,g _ag .Gray ){_adag :=y *_febf .BytesPerLine +x >>3;if _adag > len (_febf .Data )-1{return ;};g =_faag (g ,monochromeModel (_febf .ModelThreshold ));
_febf .setGray (x ,g ,_adag );};func (_bggd *CMYK32 )ColorModel ()_ag .Model {return _ag .CMYKModel };func _cba (_be ,_gcf int ,_ddga []byte )*Monochrome {_ccb :=_ddg (_be ,_gcf );_ccb .Data =_ddga ;return _ccb ;};func _acbee (_bfd _g .Image ,_dbgf Image ,_cfaa _g .Rectangle ){for _cfbda :=0;
_cfbda < _cfaa .Max .X ;_cfbda ++{for _efc :=0;_efc < _cfaa .Max .Y ;_efc ++{_aaea :=_bfd .At (_cfbda ,_efc );_dbgf .Set (_cfbda ,_efc ,_aaea );};};};func (_eaeb *ImageBase )setEightBytes (_edfaa int ,_abff uint64 )error {_dgga :=_eaeb .BytesPerLine -(_edfaa %_eaeb .BytesPerLine );
if _eaeb .BytesPerLine !=_eaeb .Width >>3{_dgga --;};if _dgga >=8{return _eaeb .setEightFullBytes (_edfaa ,_abff );};return _eaeb .setEightPartlyBytes (_edfaa ,_dgga ,_abff );};type Gray16 struct{ImageBase };func (_aedda *NRGBA32 )setRGBA (_gaea int ,_ggaa _ag .NRGBA ){_gbc :=3*_gaea ;
_aedda .Data [_gbc ]=_ggaa .R ;_aedda .Data [_gbc +1]=_ggaa .G ;_aedda .Data [_gbc +2]=_ggaa .B ;if _gaea < len (_aedda .Alpha ){_aedda .Alpha [_gaea ]=_ggaa .A ;};};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_ag .Gray ,error ){_bacf :=y *bytesPerLine +x >>1;
if _bacf >=len (data ){return _ag .Gray {},_fe .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_aabgg :=data [_bacf ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_aabgg =uint8 (uint32 (LinearInterpolate (float64 (_aabgg ),0,15,decode [0],decode [1]))&0xf);};return _ag .Gray {Y :_aabgg *17&0xff},nil ;};type Histogramer interface{Histogram ()[256]int ;
};type NRGBA interface{NRGBAAt (_dfca ,_efeb int )_ag .NRGBA ;SetNRGBA (_ddecc ,_agc int ,_ddccb _ag .NRGBA );};func _faagd (_caaa uint8 )bool {if _caaa ==0||_caaa ==255{return true ;};return false ;};func _eadg (_bbda _g .Image )(Image ,error ){if _efdb ,_cgabd :=_bbda .(*NRGBA32 );
_cgabd {return _efdb .Copy (),nil ;};_fgd ,_fbac ,_bgcb :=_bbf (_bbda ,1);_fbgdc ,_deef :=NewImage (_fgd .Max .X ,_fgd .Max .Y ,8,3,nil ,_bgcb ,nil );if _deef !=nil {return nil ,_deef ;};_gffb (_bbda ,_fbgdc ,_fgd );if len (_bgcb )!=0&&!_fbac {if _geefa :=_gbcf (_bgcb ,_fbgdc );
_geefa !=nil {return nil ,_geefa ;};};return _fbgdc ,nil ;};func _febd (_aebe ,_ceeb NRGBA ,_cbbgf _g .Rectangle ){for _ggad :=0;_ggad < _cbbgf .Max .X ;_ggad ++{for _cgeg :=0;_cgeg < _cbbgf .Max .Y ;_cgeg ++{_ceeb .SetNRGBA (_ggad ,_cgeg ,_aebe .NRGBAAt (_ggad ,_cgeg ));
};};};func (_dbba *Monochrome )setIndexedBit (_geef int ){_dbba .Data [(_geef >>3)]|=0x80>>uint (_geef &7)};func _eeab (_bggb _ag .NRGBA64 )_ag .NRGBA {return _ag .NRGBA {R :uint8 (_bggb .R >>8),G :uint8 (_bggb .G >>8),B :uint8 (_bggb .B >>8),A :uint8 (_bggb .A >>8)};
};var _ RGBA =&RGBA32 {};func _fedc (_efgfb NRGBA ,_fefd Gray ,_adbg _g .Rectangle ){for _cead :=0;_cead < _adbg .Max .X ;_cead ++{for _fdff :=0;_fdff < _adbg .Max .Y ;_fdff ++{_beab :=_bacgg (_efgfb .NRGBAAt (_cead ,_fdff ));_fefd .SetGray (_cead ,_fdff ,_beab );
};};};func (_bbdf *RGBA32 )RGBAAt (x ,y int )_ag .RGBA {_gfdg ,_ :=ColorAtRGBA32 (x ,y ,_bbdf .Width ,_bbdf .Data ,_bbdf .Alpha ,_bbdf .Decode );return _gfdg ;};func _afe (_gde int )[]uint {var _afg []uint ;_bbe :=_gde ;_fec :=_bbe /8;if _fec !=0{for _fdgg :=0;
_fdgg < _fec ;_fdgg ++{_afg =append (_afg ,8);};_bgg :=_bbe %8;_bbe =0;if _bgg !=0{_bbe =_bgg ;};};_cga :=_bbe /4;if _cga !=0{for _ba :=0;_ba < _cga ;_ba ++{_afg =append (_afg ,4);};_ga :=_bbe %4;_bbe =0;if _ga !=0{_bbe =_ga ;};};_ffb :=_bbe /2;if _ffb !=0{for _ebf :=0;
_ebf < _ffb ;_ebf ++{_afg =append (_afg ,2);};};return _afg ;};func _begb (_eceg int ,_ffag int )int {if _eceg < _ffag {return _eceg ;};return _ffag ;};var _ Gray =&Gray2 {};type NRGBA32 struct{ImageBase };func (_egee *Gray16 )ColorAt (x ,y int )(_ag .Color ,error ){return ColorAtGray16BPC (x ,y ,_egee .BytesPerLine ,_egee .Data ,_egee .Decode );
};func _bcg (_aeaf Gray ,_cbabb NRGBA ,_edeb _g .Rectangle ){for _debd :=0;_debd < _edeb .Max .X ;_debd ++{for _dbdd :=0;_dbdd < _edeb .Max .Y ;_dbdd ++{_cfcfa :=_aeaf .GrayAt (_debd ,_dbdd );_cbabb .SetNRGBA (_debd ,_dbdd ,_bef (_cfcfa ));};};};func (_aebd *Monochrome )InverseData ()error {return _aebd .RasterOperation (0,0,_aebd .Width ,_aebd .Height ,PixNotDst ,nil ,0,0);
};func (_afb *NRGBA16 )ColorAt (x ,y int )(_ag .Color ,error ){return ColorAtNRGBA16 (x ,y ,_afb .Width ,_afb .BytesPerLine ,_afb .Data ,_afb .Alpha ,_afb .Decode );};func ImgToGray (i _g .Image )*_g .Gray {if _cfge ,_gbg :=i .(*_g .Gray );_gbg {return _cfge ;
};_fadbd :=i .Bounds ();_efgfa :=_g .NewGray (_fadbd );for _efad :=0;_efad < _fadbd .Max .X ;_efad ++{for _ffgd :=0;_ffgd < _fadbd .Max .Y ;_ffgd ++{_agce :=i .At (_efad ,_ffgd );_efgfa .Set (_efad ,_ffgd ,_agce );};};return _efgfa ;};type Gray2 struct{ImageBase };
func (_edd *Gray2 )SetGray (x ,y int ,gray _ag .Gray ){_dffab :=_dgbb (gray );_cbbg :=y *_edd .BytesPerLine ;_fdfc :=_cbbg +(x >>2);if _fdfc >=len (_edd .Data ){return ;};_bde :=_dffab .Y >>6;_edd .Data [_fdfc ]=(_edd .Data [_fdfc ]&(^(0xc0>>uint (2*((x )&3)))))|(_bde <<uint (6-2*(x &3)));
};func (_ebc *CMYK32 )ColorAt (x ,y int )(_ag .Color ,error ){return ColorAtCMYK (x ,y ,_ebc .Width ,_ebc .Data ,_ebc .Decode );};func (_egeg *RGBA32 )Validate ()error {if len (_egeg .Data )!=3*_egeg .Width *_egeg .Height {return _a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_eagg *Gray2 )Base ()*ImageBase {return &_eagg .ImageBase };type colorConverter struct{_abca func (_aac _g .Image )(Image ,error );};func (_dgd *Gray4 )ColorModel ()_ag .Model {return Gray4Model };type SMasker interface{HasAlpha ()bool ;
GetAlpha ()[]byte ;MakeAlpha ();};type monochromeModel uint8 ;func (_fced *ImageBase )getByte (_cdba int )(byte ,error ){if _cdba > len (_fced .Data )-1||_cdba < 0{return 0,_fe .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_cdba );
};return _fced .Data [_cdba ],nil ;};func (_ebe *Monochrome )IsUnpadded ()bool {return (_ebe .Width *_ebe .Height )==len (_ebe .Data )};func (_fbea *NRGBA64 )ColorModel ()_ag .Model {return _ag .NRGBA64Model };func (_ebdga *Gray8 )Histogram ()(_ged [256]int ){for _adae :=0;
_adae < len (_ebdga .Data );_adae ++{_ged [_ebdga .Data [_adae ]]++;};return _ged ;};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_ag .Gray ,error ){_afeag :=y *bytesPerLine +x >>3;if _afeag >=len (data ){return _ag .Gray {},_fe .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dcfad :=data [_afeag ]>>uint (7-(x &7))&1;if len (decode )==2{_dcfad =uint8 (LinearInterpolate (float64 (_dcfad ),0.0,1.0,decode [0],decode [1]))&1;};return _ag .Gray {Y :_dcfad *255},nil ;};func (_afd *Gray4 )At (x ,y int )_ag .Color {_gcdb ,_ :=_afd .ColorAt (x ,y );
return _gcdb };func (_ebdg *Gray8 )ColorAt (x ,y int )(_ag .Color ,error ){return ColorAtGray8BPC (x ,y ,_ebdg .BytesPerLine ,_ebdg .Data ,_ebdg .Decode );};func InDelta (expected ,current ,delta float64 )bool {_gged :=expected -current ;if _gged <=-delta ||_gged >=delta {return false ;
};return true ;};func (_aedf *NRGBA64 )SetNRGBA64 (x ,y int ,c _ag .NRGBA64 ){_caaba :=(y *_aedf .Width +x )*2;_badcf :=_caaba *3;if _badcf +5>=len (_aedf .Data ){return ;};_aedf .setNRGBA64 (_badcf ,c ,_caaba );};func (_edag *Monochrome )ColorAt (x ,y int )(_ag .Color ,error ){return ColorAtGray1BPC (x ,y ,_edag .BytesPerLine ,_edag .Data ,_edag .Decode );
};func _gafe (_gdff _g .Image ,_abad Image ,_afcdc _g .Rectangle ){if _fffd ,_fcge :=_gdff .(SMasker );_fcge &&_fffd .HasAlpha (){_abad .(SMasker ).MakeAlpha ();};_acbee (_gdff ,_abad ,_afcdc );};func _edage (_egae nrgba64 ,_gage NRGBA ,_dbee _g .Rectangle ){for _dfdce :=0;
_dfdce < _dbee .Max .X ;_dfdce ++{for _fecff :=0;_fecff < _dbee .Max .Y ;_fecff ++{_decd :=_egae .NRGBA64At (_dfdce ,_fecff );_gage .SetNRGBA (_dfdce ,_fecff ,_eeab (_decd ));};};};func (_gfab monochromeModel )Convert (c _ag .Color )_ag .Color {_gace :=_ag .GrayModel .Convert (c ).(_ag .Gray );
return _faag (_gace ,_gfab );};type nrgba64 interface{NRGBA64At (_efcfa ,_fcecd int )_ag .NRGBA64 ;SetNRGBA64 (_gdgdc ,_fcfc int ,_deba _ag .NRGBA64 );};func _afag (_fccgd _g .Image )(Image ,error ){if _agaf ,_cffg :=_fccgd .(*RGBA32 );_cffg {return _agaf .Copy (),nil ;
};_bfae ,_cadcb ,_egca :=_bbf (_fccgd ,1);_ggfe :=&RGBA32 {ImageBase :NewImageBase (_bfae .Max .X ,_bfae .Max .Y ,8,3,nil ,_egca ,nil )};_aged (_fccgd ,_ggfe ,_bfae );if len (_egca )!=0&&!_cadcb {if _deea :=_gbcf (_egca ,_ggfe );_deea !=nil {return nil ,_deea ;
};};return _ggfe ,nil ;};func _gda (_gagb _ag .NRGBA )_ag .NRGBA {_gagb .R =_gagb .R >>4|(_gagb .R >>4)<<4;_gagb .G =_gagb .G >>4|(_gagb .G >>4)<<4;_gagb .B =_gagb .B >>4|(_gagb .B >>4)<<4;return _gagb ;};func _df (_fbf *Monochrome ,_bg int ,_ce []uint )(*Monochrome ,error ){_e :=_bg *_fbf .Width ;
_ffd :=_bg *_fbf .Height ;_de :=_ddg (_e ,_ffd );for _gc ,_ea :=range _ce {var _deg error ;switch _ea {case 2:_deg =_fed (_de ,_fbf );case 4:_deg =_cd (_de ,_fbf );case 8:_deg =_cef (_de ,_fbf );};if _deg !=nil {return nil ,_deg ;};if _gc !=len (_ce )-1{_fbf =_de .copy ();
};};return _de ,nil ;};func (_bdag *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_bdag .copy ()}};func (_aceb *Gray8 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_aceb .Width ,Y :_aceb .Height }};};var _ Gray =&Gray16 {};func _gdce (_dbdad *_g .Gray )bool {for _adceb :=0;
_adceb < len (_dbdad .Pix );_adceb ++{if !_faagd (_dbdad .Pix [_adceb ]){return false ;};};return true ;};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func _dbeb (_ffbg *Monochrome ,_fafc ,_fbagb ,_edda ,_gacce int ,_bgcf RasterOperator ,_fbbd *Monochrome ,_eega ,_cbdfa int )error {var (_fcece byte ;
_abfc int ;_agaed int ;_acbd ,_defe int ;_cefcca ,_bfda int ;);_eccf :=_edda >>3;_deb :=_edda &7;if _deb > 0{_fcece =_gcce [_deb ];};_abfc =_fbbd .BytesPerLine *_cbdfa +(_eega >>3);_agaed =_ffbg .BytesPerLine *_fbagb +(_fafc >>3);switch _bgcf {case PixSrc :for _cefcca =0;
_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]=_fbbd .Data [_acbd ];_defe ++;_acbd ++;};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],_fbbd .Data [_acbd ],_fcece );
};};case PixNotSrc :for _cefcca =0;_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]=^(_fbbd .Data [_acbd ]);_defe ++;_acbd ++;
};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],^_fbbd .Data [_acbd ],_fcece );};};case PixSrcOrDst :for _cefcca =0;_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;for _bfda =0;
_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]|=_fbbd .Data [_acbd ];_defe ++;_acbd ++;};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],_fbbd .Data [_acbd ]|_ffbg .Data [_defe ],_fcece );};};case PixSrcAndDst :for _cefcca =0;_cefcca < _gacce ;
_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]&=_fbbd .Data [_acbd ];_defe ++;_acbd ++;};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],_fbbd .Data [_acbd ]&_ffbg .Data [_defe ],_fcece );
};};case PixSrcXorDst :for _cefcca =0;_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]^=_fbbd .Data [_acbd ];_defe ++;_acbd ++;
};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],_fbbd .Data [_acbd ]^_ffbg .Data [_defe ],_fcece );};};case PixNotSrcOrDst :for _cefcca =0;_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;
for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]|=^(_fbbd .Data [_acbd ]);_defe ++;_acbd ++;};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],^(_fbbd .Data [_acbd ])|_ffbg .Data [_defe ],_fcece );};};case PixNotSrcAndDst :for _cefcca =0;
_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]&=^(_fbbd .Data [_acbd ]);_defe ++;_acbd ++;};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],^(_fbbd .Data [_acbd ])&_ffbg .Data [_defe ],_fcece );
};};case PixSrcOrNotDst :for _cefcca =0;_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]=_fbbd .Data [_acbd ]|^(_ffbg .Data [_defe ]);
_defe ++;_acbd ++;};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],_fbbd .Data [_acbd ]|^(_ffbg .Data [_defe ]),_fcece );};};case PixSrcAndNotDst :for _cefcca =0;_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;
for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]=_fbbd .Data [_acbd ]&^(_ffbg .Data [_defe ]);_defe ++;_acbd ++;};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],_fbbd .Data [_acbd ]&^(_ffbg .Data [_defe ]),_fcece );};};case PixNotPixSrcOrDst :for _cefcca =0;
_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]=^(_fbbd .Data [_acbd ]|_ffbg .Data [_defe ]);_defe ++;_acbd ++;};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],^(_fbbd .Data [_acbd ]|_ffbg .Data [_defe ]),_fcece );
};};case PixNotPixSrcAndDst :for _cefcca =0;_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]=^(_fbbd .Data [_acbd ]&_ffbg .Data [_defe ]);
_defe ++;_acbd ++;};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],^(_fbbd .Data [_acbd ]&_ffbg .Data [_defe ]),_fcece );};};case PixNotPixSrcXorDst :for _cefcca =0;_cefcca < _gacce ;_cefcca ++{_acbd =_abfc +_cefcca *_fbbd .BytesPerLine ;
_defe =_agaed +_cefcca *_ffbg .BytesPerLine ;for _bfda =0;_bfda < _eccf ;_bfda ++{_ffbg .Data [_defe ]=^(_fbbd .Data [_acbd ]^_ffbg .Data [_defe ]);_defe ++;_acbd ++;};if _deb > 0{_ffbg .Data [_defe ]=_gddce (_ffbg .Data [_defe ],^(_fbbd .Data [_acbd ]^_ffbg .Data [_defe ]),_fcece );
};};default:_fa .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_bgcf );return _a .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_afeae *NRGBA32 )NRGBAAt (x ,y int )_ag .NRGBA {_fbbbe ,_ :=ColorAtNRGBA32 (x ,y ,_afeae .Width ,_afeae .Data ,_afeae .Alpha ,_afeae .Decode );return _fbbbe ;};func (_cege *Gray4 )SetGray (x ,y int ,g _ag .Gray ){if x >=_cege .Width ||y >=_cege .Height {return ;
};g =_dfag (g );_cege .setGray (x ,y ,g );};var _ NRGBA =&NRGBA32 {};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _bd .Abs (xmax -xmin )< 0.000001{return ymin ;};_adde :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _adde ;
};func _dcef (_dcbb ,_cbbd uint8 )uint8 {if _dcbb < _cbbd {return 255;};return 0;};func _dbef (_fbfbc _g .Image ,_effc uint8 )*_g .Gray {_ffca :=_fbfbc .Bounds ();_agaff :=_g .NewGray (_ffca );var (_dafc _ag .Color ;_afaa _ag .Gray ;);for _dbgb :=0;_dbgb < _ffca .Max .X ;
_dbgb ++{for _ebdgaf :=0;_ebdgaf < _ffca .Max .Y ;_ebdgaf ++{_dafc =_fbfbc .At (_dbgb ,_ebdgaf );_agaff .Set (_dbgb ,_ebdgaf ,_dafc );_afaa =_agaff .GrayAt (_dbgb ,_ebdgaf );_agaff .SetGray (_dbgb ,_ebdgaf ,_ag .Gray {Y :_dcef (_afaa .Y ,_effc )});};};
return _agaff ;};func FromGoImage (i _g .Image )(Image ,error ){switch _cabe :=i .(type ){case Image :return _cabe .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_g .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );
case *_g .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};type CMYK32 struct{ImageBase };var _ _g .Image =&NRGBA64 {};func (_gbda *NRGBA16 )setNRGBA (_fggf ,_fbce ,_gdbd int ,_ecegb _ag .NRGBA ){if _fggf *3%2==0{_gbda .Data [_gdbd ]=(_ecegb .R >>4)<<4|(_ecegb .G >>4);
_gbda .Data [_gdbd +1]=(_ecegb .B >>4)<<4|(_gbda .Data [_gdbd +1]&0xf);}else {_gbda .Data [_gdbd ]=(_gbda .Data [_gdbd ]&0xf0)|(_ecegb .R >>4);_gbda .Data [_gdbd +1]=(_ecegb .G >>4)<<4|(_ecegb .B >>4);};if _gbda .Alpha !=nil {_dddf :=_fbce *BytesPerLine (_gbda .Width ,4,1);
if _dddf < len (_gbda .Alpha ){if _fggf %2==0{_gbda .Alpha [_dddf ]=(_ecegb .A >>uint (4))<<uint (4)|(_gbda .Alpha [_gdbd ]&0xf);}else {_gbda .Alpha [_dddf ]=(_gbda .Alpha [_dddf ]&0xf0)|(_ecegb .A >>uint (4));};};};};func IsGrayImgBlackAndWhite (i *_g .Gray )bool {return _gdce (i )};
func (_cadg *Gray4 )ColorAt (x ,y int )(_ag .Color ,error ){return ColorAtGray4BPC (x ,y ,_cadg .BytesPerLine ,_cadg .Data ,_cadg .Decode );};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_ag .Gray ,error ){_ddde :=y *bytesPerLine +x >>2;
if _ddde >=len (data ){return _ag .Gray {},_fe .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fadf :=data [_ddde ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_fadf =uint8 (uint32 (LinearInterpolate (float64 (_fadf ),0,3.0,decode [0],decode [1]))&3);};return _ag .Gray {Y :_fadf *85},nil ;};func _cef (_ead ,_dfc *Monochrome )(_degb error ){_gd :=_dfc .BytesPerLine ;
_cgd :=_ead .BytesPerLine ;var _cbd ,_ac ,_fdg ,_feg ,_cda int ;for _fdg =0;_fdg < _dfc .Height ;_fdg ++{_cbd =_fdg *_gd ;_ac =8*_fdg *_cgd ;for _feg =0;_feg < _gd ;_feg ++{if _degb =_ead .setEightBytes (_ac +_feg *8,_fbc [_dfc .Data [_cbd +_feg ]]);_degb !=nil {return _degb ;
};};for _cda =1;_cda < 8;_cda ++{for _feg =0;_feg < _cgd ;_feg ++{if _degb =_ead .setByte (_ac +_cda *_cgd +_feg ,_ead .Data [_ac +_feg ]);_degb !=nil {return _degb ;};};};};return nil ;};func _eggf (_gfcb _ag .Color )_ag .Color {_adfa :=_ag .GrayModel .Convert (_gfcb ).(_ag .Gray );
return _dgbb (_adfa );};func (_fefg *Gray8 )Set (x ,y int ,c _ag .Color ){_ffg :=y *_fefg .BytesPerLine +x ;if _ffg > len (_fefg .Data )-1{return ;};_age :=_ag .GrayModel .Convert (c );_fefg .Data [_ffg ]=_age .(_ag .Gray ).Y ;};func (_gcgcf *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_gcgcf .copy ()}};
func (_ggge *ImageBase )copy ()ImageBase {_bdea :=*_ggge ;_bdea .Data =make ([]byte ,len (_ggge .Data ));copy (_bdea .Data ,_ggge .Data );return _bdea ;};var _ _g .Image =&RGBA32 {};func _bdg (_dgef RGBA ,_feda Gray ,_efga _g .Rectangle ){for _bccg :=0;
_bccg < _efga .Max .X ;_bccg ++{for _ffdc :=0;_ffdc < _efga .Max .Y ;_ffdc ++{_egdc :=_eaga (_dgef .RGBAAt (_bccg ,_ffdc ));_feda .SetGray (_bccg ,_ffdc ,_egdc );};};};func _gee (_gbd *Monochrome ,_eb ,_ggg int )(*Monochrome ,error ){if _gbd ==nil {return nil ,_a .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _eb <=0||_ggg <=0{return nil ,_a .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _eb ==_ggg {if _eb ==1{return _gbd .copy (),nil ;};if _eb ==2||_eb ==4||_eb ==8{_bdf ,_fab :=_d (_gbd ,_eb );
if _fab !=nil {return nil ,_fab ;};return _bdf ,nil ;};};_ccc :=_eb *_gbd .Width ;_gcc :=_ggg *_gbd .Height ;_ffe :=_ddg (_ccc ,_gcc );_cdb :=_ffe .BytesPerLine ;var (_acb ,_fde ,_gf ,_gcd ,_cgg int ;_ebb byte ;_dbg error ;);for _fde =0;_fde < _gbd .Height ;
_fde ++{_acb =_ggg *_fde *_cdb ;for _gf =0;_gf < _gbd .Width ;_gf ++{if _edc :=_gbd .getBitAt (_gf ,_fde );_edc {_cgg =_eb *_gf ;for _gcd =0;_gcd < _eb ;_gcd ++{_ffe .setIndexedBit (_acb *8+_cgg +_gcd );};};};for _gcd =1;_gcd < _ggg ;_gcd ++{_ee :=_acb +_gcd *_cdb ;
for _cae :=0;_cae < _cdb ;_cae ++{if _ebb ,_dbg =_ffe .getByte (_acb +_cae );_dbg !=nil {return nil ,_dbg ;};if _dbg =_ffe .setByte (_ee +_cae ,_ebb );_dbg !=nil {return nil ,_dbg ;};};};};return _ffe ,nil ;};func GrayHistogram (g Gray )(_bggce [256]int ){switch _gedb :=g .(type ){case Histogramer :return _gedb .Histogram ();
case _g .Image :_fecebe :=_gedb .Bounds ();for _gcfg :=0;_gcfg < _fecebe .Max .X ;_gcfg ++{for _ddaf :=0;_ddaf < _fecebe .Max .Y ;_ddaf ++{_bggce [g .GrayAt (_gcfg ,_ddaf ).Y ]++;};};return _bggce ;default:return [256]int {};};};func _bdeg (_gbed _g .Image )(Image ,error ){if _ggae ,_eddd :=_gbed .(*Gray4 );
_eddd {return _ggae .Copy (),nil ;};_dded :=_gbed .Bounds ();_faac ,_feee :=NewImage (_dded .Max .X ,_dded .Max .Y ,4,1,nil ,nil ,nil );if _feee !=nil {return nil ,_feee ;};_eabc (_gbed ,_faac ,_dded );return _faac ,nil ;};func _faag (_gefa _ag .Gray ,_gffa monochromeModel )_ag .Gray {if _gefa .Y > uint8 (_gffa ){return _ag .Gray {Y :_bd .MaxUint8 };
};return _ag .Gray {};};func (_fbaf *Gray4 )setGray (_fecb int ,_gcfd int ,_beg _ag .Gray ){_egab :=_gcfd *_fbaf .BytesPerLine ;_abdd :=_egab +(_fecb >>1);if _abdd >=len (_fbaf .Data ){return ;};_eebd :=_beg .Y >>4;_fbaf .Data [_abdd ]=(_fbaf .Data [_abdd ]&(^(0xf0>>uint (4*(_fecb &1)))))|(_eebd <<uint (4-4*(_fecb &1)));
};func (_fbg *CMYK32 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_fbg .Width ,Y :_fbg .Height }};};var _ Image =&NRGBA16 {};func (_beec *Gray16 )Validate ()error {if len (_beec .Data )!=_beec .Height *_beec .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_fbca *Gray8 )SetGray (x ,y int ,g _ag .Gray ){_ccde :=y *_fbca .BytesPerLine +x ;if _ccde > len (_fbca .Data )-1{return ;};_fbca .Data [_ccde ]=g .Y ;};func _fdd (_fcgc ,_gfc CMYK ,_dege _g .Rectangle ){for _dfd :=0;_dfd < _dege .Max .X ;
_dfd ++{for _cfbd :=0;_cfbd < _dege .Max .Y ;_cfbd ++{_gfc .SetCMYK (_dfd ,_cfbd ,_fcgc .CMYKAt (_dfd ,_cfbd ));};};};var _ _g .Image =&Gray8 {};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };
};