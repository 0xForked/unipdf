//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_ad "encoding/binary";_d "errors";_f "fmt";_ab "github.com/unidoc/unipdf/v3/common";_ae "github.com/unidoc/unipdf/v3/internal/bitwise";_a "image";_g "image/color";_ef "image/draw";_c "math";);func _dcc (_fgb _g .NRGBA )_g .CMYK {_gfad ,_fafd ,_agcd ,_ :=_fgb .RGBA ();
_afeb ,_fcdcg ,_gdg ,_ffbb :=_g .RGBToCMYK (uint8 (_gfad >>8),uint8 (_fafd >>8),uint8 (_agcd >>8));return _g .CMYK {C :_afeb ,M :_fcdcg ,Y :_gdg ,K :_ffbb };};func _bed (_daf ,_faa *Monochrome ,_gbg []byte ,_cef int )(_gad error ){var (_dgd ,_dgb ,_ead ,_ge ,_bdd ,_dgda ,_baee ,_ceb int ;
_fefg ,_gbd uint32 ;_fgc ,_efeb byte ;_gge uint16 ;);_fcg :=make ([]byte ,4);_ede :=make ([]byte ,4);for _ead =0;_ead < _daf .Height -1;_ead ,_ge =_ead +2,_ge +1{_dgd =_ead *_daf .BytesPerLine ;_dgb =_ge *_faa .BytesPerLine ;for _bdd ,_dgda =0,0;_bdd < _cef ;
_bdd ,_dgda =_bdd +4,_dgda +1{for _baee =0;_baee < 4;_baee ++{_ceb =_dgd +_bdd +_baee ;if _ceb <=len (_daf .Data )-1&&_ceb < _dgd +_daf .BytesPerLine {_fcg [_baee ]=_daf .Data [_ceb ];}else {_fcg [_baee ]=0x00;};_ceb =_dgd +_daf .BytesPerLine +_bdd +_baee ;
if _ceb <=len (_daf .Data )-1&&_ceb < _dgd +(2*_daf .BytesPerLine ){_ede [_baee ]=_daf .Data [_ceb ];}else {_ede [_baee ]=0x00;};};_fefg =_ad .BigEndian .Uint32 (_fcg );_gbd =_ad .BigEndian .Uint32 (_ede );_gbd |=_fefg ;_gbd |=_gbd <<1;_gbd &=0xaaaaaaaa;
_fefg =_gbd |(_gbd <<7);_fgc =byte (_fefg >>24);_efeb =byte ((_fefg >>8)&0xff);_ceb =_dgb +_dgda ;if _ceb +1==len (_faa .Data )-1||_ceb +1>=_dgb +_faa .BytesPerLine {_faa .Data [_ceb ]=_gbg [_fgc ];}else {_gge =(uint16 (_gbg [_fgc ])<<8)|uint16 (_gbg [_efeb ]);
if _gad =_faa .setTwoBytes (_ceb ,_gge );_gad !=nil {return _f .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ceb );
};_dgda ++;};};};return nil ;};const (_ffbc shift =iota ;_egce ;);func (_fgca *NRGBA32 )At (x ,y int )_g .Color {_degd ,_ :=_fgca .ColorAt (x ,y );return _degd };func (_dfbf *Monochrome )Histogram ()(_ade [256]int ){for _ ,_fegf :=range _dfbf .Data {_ade [0xff]+=int (_ggcg [_dfbf .Data [_fegf ]]);
};return _ade ;};func (_ece *Monochrome )IsUnpadded ()bool {return (_ece .Width *_ece .Height )==len (_ece .Data )};func _eadf (_faff _g .NRGBA64 )_g .NRGBA {return _g .NRGBA {R :uint8 (_faff .R >>8),G :uint8 (_faff .G >>8),B :uint8 (_faff .B >>8),A :uint8 (_faff .A >>8)};
};var _ Image =&Monochrome {};func (_fce *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _fdeg bool ;_gbfe :=scale ;if scale < 1{_gbfe =1/scale ;_fdeg =true ;};_ddad :=NextPowerOf2 (uint (_gbfe ));if InDelta (float64 (_ddad ),_gbfe ,0.001){if _fdeg {return _fce .ReduceBinary (_gbfe );
};return _fce .ExpandBinary (int (_ddad ));};_ccb :=int (_c .RoundToEven (float64 (_fce .Width )*scale ));_dbdbc :=int (_c .RoundToEven (float64 (_fce .Height )*scale ));return _fce .ScaleLow (_ccb ,_dbdbc );};var _ Image =&Gray4 {};func _ded ()(_bce [256]uint64 ){for _ggb :=0;
_ggb < 256;_ggb ++{if _ggb &0x01!=0{_bce [_ggb ]|=0xff;};if _ggb &0x02!=0{_bce [_ggb ]|=0xff00;};if _ggb &0x04!=0{_bce [_ggb ]|=0xff0000;};if _ggb &0x08!=0{_bce [_ggb ]|=0xff000000;};if _ggb &0x10!=0{_bce [_ggb ]|=0xff00000000;};if _ggb &0x20!=0{_bce [_ggb ]|=0xff0000000000;
};if _ggb &0x40!=0{_bce [_ggb ]|=0xff000000000000;};if _ggb &0x80!=0{_bce [_ggb ]|=0xff00000000000000;};};return _bce ;};type monochromeThresholdConverter struct{Threshold uint8 ;};func (_bdf *Monochrome )GrayAt (x ,y int )_g .Gray {_aabg ,_ :=ColorAtGray1BPC (x ,y ,_bdf .BytesPerLine ,_bdf .Data ,_bdf .Decode );
return _aabg ;};type NRGBA64 struct{ImageBase };func _db (_ee ,_afc *Monochrome )(_dg error ){_abb :=_afc .BytesPerLine ;_gf :=_ee .BytesPerLine ;var (_dde byte ;_ege uint16 ;_egd ,_cg ,_afg ,_egg ,_gfa int ;);for _afg =0;_afg < _afc .Height ;_afg ++{_egd =_afg *_abb ;
_cg =2*_afg *_gf ;for _egg =0;_egg < _abb ;_egg ++{_dde =_afc .Data [_egd +_egg ];_ege =_dfb [_dde ];_gfa =_cg +_egg *2;if _ee .BytesPerLine !=_afc .BytesPerLine *2&&(_egg +1)*2> _ee .BytesPerLine {_dg =_ee .setByte (_gfa ,byte (_ege >>8));}else {_dg =_ee .setTwoBytes (_gfa ,_ege );
};if _dg !=nil {return _dg ;};};for _egg =0;_egg < _gf ;_egg ++{_gfa =_cg +_gf +_egg ;_dde =_ee .Data [_cg +_egg ];if _dg =_ee .setByte (_gfa ,_dde );_dg !=nil {return _dg ;};};};return nil ;};func (_dec *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_dec .copy ()}};
func (_fcga *ImageBase )getByte (_ccba int )(byte ,error ){if _ccba > len (_fcga .Data )-1||_ccba < 0{return 0,_f .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_ccba );};
return _fcga .Data [_ccba ],nil ;};func (_dcb *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_dcb .copy ()}};var _ Gray =&Monochrome {};func _fgdd (_fdg Gray ,_aafe CMYK ,_acea _a .Rectangle ){for _cgbf :=0;_cgbf < _acea .Max .X ;_cgbf ++{for _eefa :=0;
_eefa < _acea .Max .Y ;_eefa ++{_cbdd :=_fdg .GrayAt (_cgbf ,_eefa );_aafe .SetCMYK (_cgbf ,_eefa ,_aegc (_cbdd ));};};};func _ecg (_bbc ,_ccg *Monochrome ,_gaf []byte ,_bcb int )(_ebe error ){var (_bee ,_efd ,_eeb ,_ecb ,_age ,_egc ,_bcd ,_dbg int ;_gdb ,_fbf ,_fbc ,_ffcb uint32 ;
_deg ,_cbd byte ;_acf uint16 ;);_fde :=make ([]byte ,4);_bbd :=make ([]byte ,4);for _eeb =0;_eeb < _bbc .Height -1;_eeb ,_ecb =_eeb +2,_ecb +1{_bee =_eeb *_bbc .BytesPerLine ;_efd =_ecb *_ccg .BytesPerLine ;for _age ,_egc =0,0;_age < _bcb ;_age ,_egc =_age +4,_egc +1{for _bcd =0;
_bcd < 4;_bcd ++{_dbg =_bee +_age +_bcd ;if _dbg <=len (_bbc .Data )-1&&_dbg < _bee +_bbc .BytesPerLine {_fde [_bcd ]=_bbc .Data [_dbg ];}else {_fde [_bcd ]=0x00;};_dbg =_bee +_bbc .BytesPerLine +_age +_bcd ;if _dbg <=len (_bbc .Data )-1&&_dbg < _bee +(2*_bbc .BytesPerLine ){_bbd [_bcd ]=_bbc .Data [_dbg ];
}else {_bbd [_bcd ]=0x00;};};_gdb =_ad .BigEndian .Uint32 (_fde );_fbf =_ad .BigEndian .Uint32 (_bbd );_fbc =_gdb &_fbf ;_fbc |=_fbc <<1;_ffcb =_gdb |_fbf ;_ffcb &=_ffcb <<1;_fbf =_fbc &_ffcb ;_fbf &=0xaaaaaaaa;_gdb =_fbf |(_fbf <<7);_deg =byte (_gdb >>24);
_cbd =byte ((_gdb >>8)&0xff);_dbg =_efd +_egc ;if _dbg +1==len (_ccg .Data )-1||_dbg +1>=_efd +_ccg .BytesPerLine {if _ebe =_ccg .setByte (_dbg ,_gaf [_deg ]);_ebe !=nil {return _f .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dbg );};}else {_acf =(uint16 (_gaf [_deg ])<<8)|uint16 (_gaf [_cbd ]);
if _ebe =_ccg .setTwoBytes (_dbg ,_acf );_ebe !=nil {return _f .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dbg );
};_egc ++;};};};return nil ;};func IsGrayImgBlackAndWhite (i *_a .Gray )bool {return _gecbf (i )};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray16 ,error ){_fddd :=(y *bytesPerLine /2+x )*2;if _fddd +1>=len (data ){return _g .Gray16 {},_f .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dgc :=uint16 (data [_fddd ])<<8|uint16 (data [_fddd +1]);if len (decode )==2{_dgc =uint16 (uint64 (LinearInterpolate (float64 (_dgc ),0,65535,decode [0],decode [1])));};return _g .Gray16 {Y :_dgc },nil ;};func _gafee (_gfcdc _a .Image ,_egdb int )(_a .Rectangle ,bool ,[]byte ){_edda :=_gfcdc .Bounds ();
var (_fdfg bool ;_dedc []byte ;);switch _adfc :=_gfcdc .(type ){case SMasker :_fdfg =_adfc .HasAlpha ();case NRGBA ,RGBA ,*_a .RGBA64 ,nrgba64 ,*_a .NYCbCrA :_dedc =make ([]byte ,_edda .Max .X *_edda .Max .Y *_egdb );case *_a .Paletted :var _fcgda bool ;
for _ ,_baegc :=range _adfc .Palette {_febb ,_fgfb ,_ddceg ,_dgcb :=_baegc .RGBA ();if _febb ==0&&_fgfb ==0&&_ddceg ==0&&_dgcb !=0{_fcgda =true ;break ;};};if _fcgda {_dedc =make ([]byte ,_edda .Max .X *_edda .Max .Y *_egdb );};};return _edda ,_fdfg ,_dedc ;
};func (_dgaf *NRGBA16 )Set (x ,y int ,c _g .Color ){_gfaf :=y *_dgaf .BytesPerLine +x *3/2;if _gfaf +1>=len (_dgaf .Data ){return ;};_aagg :=NRGBA16Model .Convert (c ).(_g .NRGBA );_dgaf .setNRGBA (x ,y ,_gfaf ,_aagg );};var (MonochromeConverter =ConverterFunc (_baaa );
Gray2Converter =ConverterFunc (_agdb );Gray4Converter =ConverterFunc (_agfa );GrayConverter =ConverterFunc (_aacbb );Gray16Converter =ConverterFunc (_dgbc );NRGBA16Converter =ConverterFunc (_cafa );NRGBAConverter =ConverterFunc (_fdbe );NRGBA64Converter =ConverterFunc (_gcccc );
CMYKConverter =ConverterFunc (_fddc ););type RasterOperator int ;type Gray16 struct{ImageBase };func _agae (){for _gfgc :=0;_gfgc < 256;_gfgc ++{_ggcg [_gfgc ]=uint8 (_gfgc &0x1)+(uint8 (_gfgc >>1)&0x1)+(uint8 (_gfgc >>2)&0x1)+(uint8 (_gfgc >>3)&0x1)+(uint8 (_gfgc >>4)&0x1)+(uint8 (_gfgc >>5)&0x1)+(uint8 (_gfgc >>6)&0x1)+(uint8 (_gfgc >>7)&0x1);
};};func (_fada *ImageBase )copy ()ImageBase {_caga :=*_fada ;_caga .Data =make ([]byte ,len (_fada .Data ));copy (_caga .Data ,_fada .Data );return _caga ;};func _fee (_eeef Gray ,_gcgd NRGBA ,_cbea _a .Rectangle ){for _decad :=0;_decad < _cbea .Max .X ;
_decad ++{for _gfdb :=0;_gfdb < _cbea .Max .Y ;_gfdb ++{_ffba :=_eeef .GrayAt (_decad ,_gfdb );_gcgd .SetNRGBA (_decad ,_gfdb ,_ffbf (_ffba ));};};};func (_gfgg *Gray8 )GrayAt (x ,y int )_g .Gray {_aeff ,_ :=ColorAtGray8BPC (x ,y ,_gfgg .BytesPerLine ,_gfgg .Data ,_gfgg .Decode );
return _aeff ;};type monochromeModel uint8 ;func (_fbaaf *NRGBA16 )Bounds ()_a .Rectangle {return _a .Rectangle {Max :_a .Point {X :_fbaaf .Width ,Y :_fbaaf .Height }};};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_eea :=y *bytesPerLine +x >>1;
if _eea >=len (data ){return _g .Gray {},_f .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gcgb :=data [_eea ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_gcgb =uint8 (uint32 (LinearInterpolate (float64 (_gcgb ),0,15,decode [0],decode [1]))&0xf);};return _g .Gray {Y :_gcgb *17&0xff},nil ;};func (_def *Monochrome )At (x ,y int )_g .Color {_ddaa ,_ :=_def .ColorAt (x ,y );
return _ddaa };func _gaea (_abbcd *_a .Gray16 ,_cbcad uint8 )*_a .Gray {_eafd :=_abbcd .Bounds ();_dfga :=_a .NewGray (_eafd );for _cffe :=0;_cffe < _eafd .Dx ();_cffe ++{for _gaebg :=0;_gaebg < _eafd .Dy ();_gaebg ++{_bbce :=_abbcd .Gray16At (_cffe ,_gaebg );
_dfga .SetGray (_cffe ,_gaebg ,_g .Gray {Y :_gecd (uint8 (_bbce .Y /256),_cbcad )});};};return _dfga ;};func _gabf (_dce uint )uint {var _ggdd uint ;for _dce !=0{_dce >>=1;_ggdd ++;};return _ggdd -1;};func _dga (_cfge _g .RGBA )_g .Gray {_cdgda :=(19595*uint32 (_cfge .R )+38470*uint32 (_cfge .G )+7471*uint32 (_cfge .B )+1<<7)>>16;
return _g .Gray {Y :uint8 (_cdgda )};};type nrgba64 interface{NRGBA64At (_gcfb ,_ggaff int )_g .NRGBA64 ;SetNRGBA64 (_gcdc ,_ecgg int ,_ffga _g .NRGBA64 );};func (_abfa *ImageBase )MakeAlpha (){_abfa .newAlpha ()};func (_ffe *ImageBase )setEightFullBytes (_fedd int ,_dgge uint64 )error {if _fedd +7> len (_ffe .Data )-1{return _d .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ffe .Data [_fedd ]=byte ((_dgge &0xff00000000000000)>>56);_ffe .Data [_fedd +1]=byte ((_dgge &0xff000000000000)>>48);_ffe .Data [_fedd +2]=byte ((_dgge &0xff0000000000)>>40);_ffe .Data [_fedd +3]=byte ((_dgge &0xff00000000)>>32);_ffe .Data [_fedd +4]=byte ((_dgge &0xff000000)>>24);
_ffe .Data [_fedd +5]=byte ((_dgge &0xff0000)>>16);_ffe .Data [_fedd +6]=byte ((_dgge &0xff00)>>8);_ffe .Data [_fedd +7]=byte (_dgge &0xff);return nil ;};var _ _a .Image =&Gray2 {};func (_cbddf colorConverter )Convert (src _a .Image )(Image ,error ){return _cbddf ._afbe (src )};
func FromGoImage (i _a .Image )(Image ,error ){switch _bacb :=i .(type ){case Image :return _bacb .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_a .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );
case *_a .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};func (_ddea *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_ddea .copy ()}};func (_cde *Monochrome )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray1BPC (x ,y ,_cde .BytesPerLine ,_cde .Data ,_cde .Decode );
};var _ _a .Image =&NRGBA64 {};func _aacbb (_dfg _a .Image )(Image ,error ){if _afgd ,_babb :=_dfg .(*Gray8 );_babb {return _afgd .Copy (),nil ;};_dea :=_dfg .Bounds ();_abcd ,_dfbe :=NewImage (_dea .Max .X ,_dea .Max .Y ,8,1,nil ,nil ,nil );if _dfbe !=nil {return nil ,_dfbe ;
};_cgd (_dfg ,_abcd ,_dea );return _abcd ,nil ;};func (_aad *CMYK32 )Set (x ,y int ,c _g .Color ){_cae :=4*(y *_aad .Width +x );if _cae +3>=len (_aad .Data ){return ;};_bfb :=_g .CMYKModel .Convert (c ).(_g .CMYK );_aad .Data [_cae ]=_bfb .C ;_aad .Data [_cae +1]=_bfb .M ;
_aad .Data [_cae +2]=_bfb .Y ;_aad .Data [_cae +3]=_bfb .K ;};func (_aceb *Gray8 )At (x ,y int )_g .Color {_gcfa ,_ :=_aceb .ColorAt (x ,y );return _gcfa };func _affb (_cbce *Monochrome ,_gcafe ,_ffg ,_acca ,_abag int ,_gecg RasterOperator ,_feaab *Monochrome ,_bgfc ,_fbfec int )error {var (_afbc byte ;
_gaaa int ;_bcdd int ;_dggee ,_deag int ;_fac ,_adb int ;);_dfdgd :=_acca >>3;_beaa :=_acca &7;if _beaa > 0{_afbc =_fcdd [_beaa ];};_gaaa =_feaab .BytesPerLine *_fbfec +(_bgfc >>3);_bcdd =_cbce .BytesPerLine *_ffg +(_gcafe >>3);switch _gecg {case PixSrc :for _fac =0;
_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]=_feaab .Data [_dggee ];_deag ++;_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],_feaab .Data [_dggee ],_afbc );
};};case PixNotSrc :for _fac =0;_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]=^(_feaab .Data [_dggee ]);_deag ++;_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],^_feaab .Data [_dggee ],_afbc );
};};case PixSrcOrDst :for _fac =0;_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]|=_feaab .Data [_dggee ];_deag ++;_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],_feaab .Data [_dggee ]|_cbce .Data [_deag ],_afbc );
};};case PixSrcAndDst :for _fac =0;_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]&=_feaab .Data [_dggee ];_deag ++;_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],_feaab .Data [_dggee ]&_cbce .Data [_deag ],_afbc );
};};case PixSrcXorDst :for _fac =0;_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]^=_feaab .Data [_dggee ];_deag ++;_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],_feaab .Data [_dggee ]^_cbce .Data [_deag ],_afbc );
};};case PixNotSrcOrDst :for _fac =0;_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]|=^(_feaab .Data [_dggee ]);_deag ++;_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],^(_feaab .Data [_dggee ])|_cbce .Data [_deag ],_afbc );
};};case PixNotSrcAndDst :for _fac =0;_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]&=^(_feaab .Data [_dggee ]);_deag ++;_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],^(_feaab .Data [_dggee ])&_cbce .Data [_deag ],_afbc );
};};case PixSrcOrNotDst :for _fac =0;_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]=_feaab .Data [_dggee ]|^(_cbce .Data [_deag ]);_deag ++;
_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],_feaab .Data [_dggee ]|^(_cbce .Data [_deag ]),_afbc );};};case PixSrcAndNotDst :for _fac =0;_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;
for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]=_feaab .Data [_dggee ]&^(_cbce .Data [_deag ]);_deag ++;_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],_feaab .Data [_dggee ]&^(_cbce .Data [_deag ]),_afbc );};};case PixNotPixSrcOrDst :for _fac =0;
_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]=^(_feaab .Data [_dggee ]|_cbce .Data [_deag ]);_deag ++;_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],^(_feaab .Data [_dggee ]|_cbce .Data [_deag ]),_afbc );
};};case PixNotPixSrcAndDst :for _fac =0;_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]=^(_feaab .Data [_dggee ]&_cbce .Data [_deag ]);_deag ++;
_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],^(_feaab .Data [_dggee ]&_cbce .Data [_deag ]),_afbc );};};case PixNotPixSrcXorDst :for _fac =0;_fac < _abag ;_fac ++{_dggee =_gaaa +_fac *_feaab .BytesPerLine ;_deag =_bcdd +_fac *_cbce .BytesPerLine ;
for _adb =0;_adb < _dfdgd ;_adb ++{_cbce .Data [_deag ]=^(_feaab .Data [_dggee ]^_cbce .Data [_deag ]);_deag ++;_dggee ++;};if _beaa > 0{_cbce .Data [_deag ]=_fgddb (_cbce .Data [_deag ],^(_feaab .Data [_dggee ]^_cbce .Data [_deag ]),_afbc );};};default:_ab .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_gecg );
return _d .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_fbdg *NRGBA64 )SetNRGBA64 (x ,y int ,c _g .NRGBA64 ){_fgbc :=(y *_fbdg .Width +x )*2;
_efa :=_fgbc *3;if _efa +5>=len (_fbdg .Data ){return ;};_fbdg .setNRGBA64 (_efa ,c ,_fgbc );};func (_gafc *Gray2 )ColorModel ()_g .Model {return Gray2Model };func (_bbbc *NRGBA64 )ColorModel ()_g .Model {return _g .NRGBA64Model };func (_gadc *Gray16 )Validate ()error {if len (_gadc .Data )!=_gadc .Height *_gadc .BytesPerLine {return ErrInvalidImage ;
};return nil ;};var (Gray2Model =_g .ModelFunc (_edeb );Gray4Model =_g .ModelFunc (_egeb );NRGBA16Model =_g .ModelFunc (_bbae ););func _cbda (_cbe _g .NYCbCrA )_g .NRGBA {_cdd :=int32 (_cbe .Y )*0x10101;_cege :=int32 (_cbe .Cb )-128;_dfbca :=int32 (_cbe .Cr )-128;
_dbe :=_cdd +91881*_dfbca ;if uint32 (_dbe )&0xff000000==0{_dbe >>=8;}else {_dbe =^(_dbe >>31)&0xffff;};_cbc :=_cdd -22554*_cege -46802*_dfbca ;if uint32 (_cbc )&0xff000000==0{_cbc >>=8;}else {_cbc =^(_cbc >>31)&0xffff;};_agd :=_cdd +116130*_cege ;if uint32 (_agd )&0xff000000==0{_agd >>=8;
}else {_agd =^(_agd >>31)&0xffff;};return _g .NRGBA {R :uint8 (_dbe >>8),G :uint8 (_cbc >>8),B :uint8 (_agd >>8),A :_cbe .A };};func (_cfc *Monochrome )SetGray (x ,y int ,g _g .Gray ){_bfea :=y *_cfc .BytesPerLine +x >>3;if _bfea > len (_cfc .Data )-1{return ;
};g =_eece (g ,monochromeModel (_cfc .ModelThreshold ));_cfc .setGray (x ,g ,_bfea );};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func _aef (_gecc Gray ,_gab nrgba64 ,_aebe _a .Rectangle ){for _dfdg :=0;
_dfdg < _aebe .Max .X ;_dfdg ++{for _bbe :=0;_bbe < _aebe .Max .Y ;_bbe ++{_eagd :=_fge (_gab .NRGBA64At (_dfdg ,_bbe ));_gecc .SetGray (_dfdg ,_bbe ,_eagd );};};};func _dbbf (_baac _g .NRGBA )_g .Gray {var _gfcd _g .NRGBA ;if _baac ==_gfcd {return _g .Gray {Y :0xff};
};_cgccd ,_eeec ,_fdge ,_ :=_baac .RGBA ();_ggag :=(19595*_cgccd +38470*_eeec +7471*_fdge +1<<15)>>24;return _g .Gray {Y :uint8 (_ggag )};};func _fdf (_baa *Monochrome ,_feg ,_ebc int )(*Monochrome ,error ){if _baa ==nil {return nil ,_d .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _feg <=0||_ebc <=0{return nil ,_d .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _feg ==_ebc {if _feg ==1{return _baa .copy (),nil ;};
if _feg ==2||_feg ==4||_feg ==8{_beb ,_aeg :=_ff (_baa ,_feg );if _aeg !=nil {return nil ,_aeg ;};return _beb ,nil ;};};_cac :=_feg *_baa .Width ;_bc :=_ebc *_baa .Height ;_eee :=_adf (_cac ,_bc );_fc :=_eee .BytesPerLine ;var (_aaf ,_bb ,_caca ,_cgc ,_gfg int ;
_ddec byte ;_adg error ;);for _bb =0;_bb < _baa .Height ;_bb ++{_aaf =_ebc *_bb *_fc ;for _caca =0;_caca < _baa .Width ;_caca ++{if _ccc :=_baa .getBitAt (_caca ,_bb );_ccc {_gfg =_feg *_caca ;for _cgc =0;_cgc < _feg ;_cgc ++{_eee .setIndexedBit (_aaf *8+_gfg +_cgc );
};};};for _cgc =1;_cgc < _ebc ;_cgc ++{_fae :=_aaf +_cgc *_fc ;for _de :=0;_de < _fc ;_de ++{if _ddec ,_adg =_eee .getByte (_aaf +_de );_adg !=nil {return nil ,_adg ;};if _adg =_eee .setByte (_fae +_de ,_ddec );_adg !=nil {return nil ,_adg ;};};};};return _eee ,nil ;
};type Gray interface{GrayAt (_acb ,_fdec int )_g .Gray ;SetGray (_egac ,_afdb int ,_acbe _g .Gray );};func init (){_agae ()};func (_gbed *NRGBA32 )SetNRGBA (x ,y int ,c _g .NRGBA ){_ecad :=y *_gbed .Width +x ;_egfd :=3*_ecad ;if _egfd +2>=len (_gbed .Data ){return ;
};_gbed .setRGBA (_ecad ,c );};func (_gfaa *Monochrome )Validate ()error {if len (_gfaa .Data )!=_gfaa .Height *_gfaa .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_egee *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_f .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _ff (_egee ,factor );};func (_befd *NRGBA16 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA16 (x ,y ,_befd .Width ,_befd .BytesPerLine ,_befd .Data ,_befd .Alpha ,_befd .Decode );};func (_cbec *Gray2 )Histogram ()(_baca [256]int ){for _aafgd :=0;
_aafgd < _cbec .Width ;_aafgd ++{for _bdb :=0;_bdb < _cbec .Height ;_bdb ++{_baca [_cbec .GrayAt (_aafgd ,_bdb ).Y ]++;};};return _baca ;};func (_cfcd *Gray16 )SetGray (x ,y int ,g _g .Gray ){_fbfg :=(y *_cfcd .BytesPerLine /2+x )*2;if _fbfg +1>=len (_cfcd .Data ){return ;
};_cfcd .Data [_fbfg ]=g .Y ;_cfcd .Data [_fbfg +1]=g .Y ;};func (_afbf *Monochrome )copy ()*Monochrome {_afeba :=_adf (_afbf .Width ,_afbf .Height );_afeba .ModelThreshold =_afbf .ModelThreshold ;_afeba .Data =make ([]byte ,len (_afbf .Data ));copy (_afeba .Data ,_afbf .Data );
if len (_afbf .Decode )!=0{_afeba .Decode =make ([]float64 ,len (_afbf .Decode ));copy (_afeba .Decode ,_afbf .Decode );};if len (_afbf .Alpha )!=0{_afeba .Alpha =make ([]byte ,len (_afbf .Alpha ));copy (_afeba .Alpha ,_afbf .Alpha );};return _afeba ;};
func (_dabb *Gray8 )Histogram ()(_dedf [256]int ){for _defab :=0;_defab < len (_dabb .Data );_defab ++{_dedf [_dabb .Data [_defab ]]++;};return _dedf ;};func _agf (_ebee Gray ,_bcec NRGBA ,_debe _a .Rectangle ){for _fcgd :=0;_fcgd < _debe .Max .X ;_fcgd ++{for _acg :=0;
_acg < _debe .Max .Y ;_acg ++{_edc :=_dbbf (_bcec .NRGBAAt (_fcgd ,_acg ));_ebee .SetGray (_fcgd ,_acg ,_edc );};};};func (_edcd *ImageBase )setTwoBytes (_cbaf int ,_befe uint16 )error {if _cbaf +1> len (_edcd .Data )-1{return _d .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_edcd .Data [_cbaf ]=byte ((_befe &0xff00)>>8);_edcd .Data [_cbaf +1]=byte (_befe &0xff);return nil ;};func (_bebf *Gray8 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray8BPC (x ,y ,_bebf .BytesPerLine ,_bebf .Data ,_bebf .Decode );};func (_fdca *NRGBA64 )Set (x ,y int ,c _g .Color ){_gaae :=(y *_fdca .Width +x )*2;
_bdcg :=_gaae *3;if _bdcg +5>=len (_fdca .Data ){return ;};_gddg :=_g .NRGBA64Model .Convert (c ).(_g .NRGBA64 );_fdca .setNRGBA64 (_bdcg ,_gddg ,_gaae );};var (_dfb =_eef ();_ed =_ec ();_abbf =_ded (););type Image interface{_ef .Image ;Base ()*ImageBase ;
Copy ()Image ;Pix ()[]byte ;ColorAt (_dca ,_bage int )(_g .Color ,error );Validate ()error ;};func (_debf *Monochrome )ResolveDecode ()error {if len (_debf .Decode )!=2{return nil ;};if _debf .Decode [0]==1&&_debf .Decode [1]==0{if _eec :=_debf .InverseData ();
_eec !=nil {return _eec ;};_debf .Decode =nil ;};return nil ;};var _ _a .Image =&Monochrome {};func (_fcbb *Gray8 )ColorModel ()_g .Model {return _g .GrayModel };func (_ggg *CMYK32 )CMYKAt (x ,y int )_g .CMYK {_fggd ,_ :=ColorAtCMYK (x ,y ,_ggg .Width ,_ggg .Data ,_ggg .Decode );
return _fggd ;};func (_ebbc *Gray16 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray16BPC (x ,y ,_ebbc .BytesPerLine ,_ebbc .Data ,_ebbc .Decode );};func _fage (_aeec *Monochrome ,_dbfc ,_fdfd ,_bcf ,_abef int ,_bfaea RasterOperator ,_afcf *Monochrome ,_aafc ,_bde int )error {var (_bfdcb bool ;
_degg bool ;_abcdb int ;_dbda int ;_fcdgc int ;_gade bool ;_bgeb byte ;_ffda int ;_aabf int ;_dbdc int ;_cffc ,_fcgg int ;);_cfca :=8-(_dbfc &7);_gaba :=_cfeb [_cfca ];_bdff :=_aeec .BytesPerLine *_fdfd +(_dbfc >>3);_gggc :=_afcf .BytesPerLine *_bde +(_aafc >>3);
if _bcf < _cfca {_bfdcb =true ;_gaba &=_fcdd [8-_cfca +_bcf ];};if !_bfdcb {_abcdb =(_bcf -_cfca )>>3;if _abcdb > 0{_degg =true ;_dbda =_bdff +1;_fcdgc =_gggc +1;};};_ffda =(_dbfc +_bcf )&7;if !(_bfdcb ||_ffda ==0){_gade =true ;_bgeb =_fcdd [_ffda ];_aabf =_bdff +1+_abcdb ;
_dbdc =_gggc +1+_abcdb ;};switch _bfaea {case PixSrc :for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],_afcf .Data [_gggc ],_gaba );_bdff +=_aeec .BytesPerLine ;_gggc +=_afcf .BytesPerLine ;};if _degg {for _cffc =0;
_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]=_afcf .Data [_fcdgc +_fcgg ];};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],_afcf .Data [_dbdc ],_bgeb );
_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};case PixNotSrc :for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],^_afcf .Data [_gggc ],_gaba );_bdff +=_aeec .BytesPerLine ;_gggc +=_afcf .BytesPerLine ;
};if _degg {for _cffc =0;_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]=^_afcf .Data [_fcdgc +_fcgg ];};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],^_afcf .Data [_dbdc ],_bgeb );
_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};case PixSrcOrDst :for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],_afcf .Data [_gggc ]|_aeec .Data [_bdff ],_gaba );_bdff +=_aeec .BytesPerLine ;_gggc +=_afcf .BytesPerLine ;
};if _degg {for _cffc =0;_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]|=_afcf .Data [_fcdgc +_fcgg ];};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],_afcf .Data [_dbdc ]|_aeec .Data [_aabf ],_bgeb );
_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};case PixSrcAndDst :for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],_afcf .Data [_gggc ]&_aeec .Data [_bdff ],_gaba );_bdff +=_aeec .BytesPerLine ;_gggc +=_afcf .BytesPerLine ;
};if _degg {for _cffc =0;_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]&=_afcf .Data [_fcdgc +_fcgg ];};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],_afcf .Data [_dbdc ]&_aeec .Data [_aabf ],_bgeb );
_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};case PixSrcXorDst :for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],_afcf .Data [_gggc ]^_aeec .Data [_bdff ],_gaba );_bdff +=_aeec .BytesPerLine ;_gggc +=_afcf .BytesPerLine ;
};if _degg {for _cffc =0;_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]^=_afcf .Data [_fcdgc +_fcgg ];};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],_afcf .Data [_dbdc ]^_aeec .Data [_aabf ],_bgeb );
_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};case PixNotSrcOrDst :for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],^(_afcf .Data [_gggc ])|_aeec .Data [_bdff ],_gaba );_bdff +=_aeec .BytesPerLine ;
_gggc +=_afcf .BytesPerLine ;};if _degg {for _cffc =0;_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]|=^(_afcf .Data [_fcdgc +_fcgg ]);};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;};};if _gade {for _cffc =0;
_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],^(_afcf .Data [_dbdc ])|_aeec .Data [_aabf ],_bgeb );_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};case PixNotSrcAndDst :for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],^(_afcf .Data [_gggc ])&_aeec .Data [_bdff ],_gaba );
_bdff +=_aeec .BytesPerLine ;_gggc +=_afcf .BytesPerLine ;};if _degg {for _cffc =0;_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]&=^_afcf .Data [_fcdgc +_fcgg ];};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;
};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],^(_afcf .Data [_dbdc ])&_aeec .Data [_aabf ],_bgeb );_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};case PixSrcOrNotDst :for _cffc =0;_cffc < _abef ;
_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],_afcf .Data [_gggc ]|^(_aeec .Data [_bdff ]),_gaba );_bdff +=_aeec .BytesPerLine ;_gggc +=_afcf .BytesPerLine ;};if _degg {for _cffc =0;_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]=_afcf .Data [_fcdgc +_fcgg ]|^(_aeec .Data [_dbda +_fcgg ]);
};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],_afcf .Data [_dbdc ]|^(_aeec .Data [_aabf ]),_bgeb );_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;
};};case PixSrcAndNotDst :for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],_afcf .Data [_gggc ]&^(_aeec .Data [_bdff ]),_gaba );_bdff +=_aeec .BytesPerLine ;_gggc +=_afcf .BytesPerLine ;};if _degg {for _cffc =0;_cffc < _abef ;
_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]=_afcf .Data [_fcdgc +_fcgg ]&^(_aeec .Data [_dbda +_fcgg ]);};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],_afcf .Data [_dbdc ]&^(_aeec .Data [_aabf ]),_bgeb );
_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};case PixNotPixSrcOrDst :for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],^(_afcf .Data [_gggc ]|_aeec .Data [_bdff ]),_gaba );_bdff +=_aeec .BytesPerLine ;
_gggc +=_afcf .BytesPerLine ;};if _degg {for _cffc =0;_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]=^(_afcf .Data [_fcdgc +_fcgg ]|_aeec .Data [_dbda +_fcgg ]);};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;
};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],^(_afcf .Data [_dbdc ]|_aeec .Data [_aabf ]),_bgeb );_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};case PixNotPixSrcAndDst :for _cffc =0;
_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],^(_afcf .Data [_gggc ]&_aeec .Data [_bdff ]),_gaba );_bdff +=_aeec .BytesPerLine ;_gggc +=_afcf .BytesPerLine ;};if _degg {for _cffc =0;_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;
_fcgg ++{_aeec .Data [_dbda +_fcgg ]=^(_afcf .Data [_fcdgc +_fcgg ]&_aeec .Data [_dbda +_fcgg ]);};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],^(_afcf .Data [_dbdc ]&_aeec .Data [_aabf ]),_bgeb );
_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};case PixNotPixSrcXorDst :for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_bdff ]=_fgddb (_aeec .Data [_bdff ],^(_afcf .Data [_gggc ]^_aeec .Data [_bdff ]),_gaba );_bdff +=_aeec .BytesPerLine ;
_gggc +=_afcf .BytesPerLine ;};if _degg {for _cffc =0;_cffc < _abef ;_cffc ++{for _fcgg =0;_fcgg < _abcdb ;_fcgg ++{_aeec .Data [_dbda +_fcgg ]=^(_afcf .Data [_fcdgc +_fcgg ]^_aeec .Data [_dbda +_fcgg ]);};_dbda +=_aeec .BytesPerLine ;_fcdgc +=_afcf .BytesPerLine ;
};};if _gade {for _cffc =0;_cffc < _abef ;_cffc ++{_aeec .Data [_aabf ]=_fgddb (_aeec .Data [_aabf ],^(_afcf .Data [_dbdc ]^_aeec .Data [_aabf ]),_bgeb );_aabf +=_aeec .BytesPerLine ;_dbdc +=_afcf .BytesPerLine ;};};default:_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_bfaea );
return _d .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_cfb *Gray4 )Set (x ,y int ,c _g .Color ){if x >=_cfb .Width ||y >=_cfb .Height {return ;
};_ccbb :=Gray4Model .Convert (c ).(_g .Gray );_cfb .setGray (x ,y ,_ccbb );};func (_ecdd *Gray16 )ColorModel ()_g .Model {return _g .Gray16Model };func _dgbc (_abbfe _a .Image )(Image ,error ){if _aafga ,_gece :=_abbfe .(*Gray16 );_gece {return _aafga .Copy (),nil ;
};_bbf :=_abbfe .Bounds ();_afbg ,_cbee :=NewImage (_bbf .Max .X ,_bbf .Max .Y ,16,1,nil ,nil ,nil );if _cbee !=nil {return nil ,_cbee ;};_cgd (_abbfe ,_afbg ,_bbf );return _afbg ,nil ;};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();
};func _gdgc (_beae NRGBA ,_aedgd Gray ,_ddac _a .Rectangle ){for _cacc :=0;_cacc < _ddac .Max .X ;_cacc ++{for _cbad :=0;_cbad < _ddac .Max .Y ;_cbad ++{_adgc :=_befc (_beae .NRGBAAt (_cacc ,_cbad ));_aedgd .SetGray (_cacc ,_cbad ,_adgc );};};};func (_fgab *Gray4 )ColorModel ()_g .Model {return Gray4Model };
func _gecd (_dede ,_gabfa uint8 )uint8 {if _dede < _gabfa {return 255;};return 0;};func (_bcg *Gray16 )GrayAt (x ,y int )_g .Gray {_cagd ,_ :=_bcg .ColorAt (x ,y );return _g .Gray {Y :uint8 (_cagd .(_g .Gray16 ).Y >>8)};};func _cgd (_bgcb _a .Image ,_cdf Image ,_ffd _a .Rectangle ){switch _eecc :=_bgcb .(type ){case Gray :_bbb (_eecc ,_cdf .(Gray ),_ffd );
case NRGBA :_gdgc (_eecc ,_cdf .(Gray ),_ffd );case CMYK :_cccf (_eecc ,_cdf .(Gray ),_ffd );case RGBA :_gcaf (_eecc ,_cdf .(Gray ),_ffd );default:_afa (_bgcb ,_cdf .(Image ),_ffd );};};func (_fdea *Gray4 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray4BPC (x ,y ,_fdea .BytesPerLine ,_fdea .Data ,_fdea .Decode );
};var _ Gray =&Gray16 {};func (_bbg *Monochrome )Base ()*ImageBase {return &_bbg .ImageBase };func (_acga monochromeModel )Convert (c _g .Color )_g .Color {_bfad :=_g .GrayModel .Convert (c ).(_g .Gray );return _eece (_bfad ,_acga );};func (_eecg *Monochrome )setBit (_ebb ,_dcca int ){_eecg .Data [_ebb +(_dcca >>3)]|=0x80>>uint (_dcca &7);
};func _ffbaa (_ggeff *_a .Gray ,_dddb uint8 )*_a .Gray {_fbgd :=_ggeff .Bounds ();_agdff :=_a .NewGray (_fbgd );for _aagaa :=0;_aagaa < _fbgd .Dx ();_aagaa ++{for _deaba :=0;_deaba < _fbgd .Dy ();_deaba ++{_fffd :=_ggeff .GrayAt (_aagaa ,_deaba );_agdff .SetGray (_aagaa ,_deaba ,_g .Gray {Y :_gecd (_fffd .Y ,_dddb )});
};};return _agdff ;};func _bacc (_gddf CMYK ,_adgcb NRGBA ,_ceac _a .Rectangle ){for _fdbd :=0;_fdbd < _ceac .Max .X ;_fdbd ++{for _cega :=0;_cega < _ceac .Max .Y ;_cega ++{_deacb :=_gddf .CMYKAt (_fdbd ,_cega );_adgcb .SetNRGBA (_fdbd ,_cega ,_dac (_deacb ));
};};};var _ Image =&CMYK32 {};type NRGBA32 struct{ImageBase };var _ NRGBA =&NRGBA32 {};func _agfa (_dgg _a .Image )(Image ,error ){if _cffb ,_defb :=_dgg .(*Gray4 );_defb {return _cffb .Copy (),nil ;};_bbee :=_dgg .Bounds ();_cbcc ,_fbfe :=NewImage (_bbee .Max .X ,_bbee .Max .Y ,4,1,nil ,nil ,nil );
if _fbfe !=nil {return nil ,_fbfe ;};_cgd (_dgg ,_cbcc ,_bbee );return _cbcc ,nil ;};type shift int ;func (_edg *ImageBase )Pix ()[]byte {return _edg .Data };func _cccf (_dcg CMYK ,_afcg Gray ,_gebg _a .Rectangle ){for _ceff :=0;_ceff < _gebg .Max .X ;
_ceff ++{for _dgdc :=0;_dgdc < _gebg .Max .Y ;_dgdc ++{_fag :=_cgbc (_dcg .CMYKAt (_ceff ,_dgdc ));_afcg .SetGray (_ceff ,_dgdc ,_fag );};};};var _ Gray =&Gray2 {};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_dcce :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_dcce .Data =make ([]byte ,height *_dcce .BytesPerLine );};return _dcce ;};func _bgf (_dba ,_ggce *Monochrome ,_aac []byte ,_dfa int )(_bad error ){var (_aacb ,_dab ,_gfc ,_afdd ,_fcfg ,_baeg ,_eefc ,_dda int ;_efg ,_dee uint32 ;_bfa ,_bfe byte ;
_dfd uint16 ;);_abd :=make ([]byte ,4);_ddaf :=make ([]byte ,4);for _gfc =0;_gfc < _dba .Height -1;_gfc ,_afdd =_gfc +2,_afdd +1{_aacb =_gfc *_dba .BytesPerLine ;_dab =_afdd *_ggce .BytesPerLine ;for _fcfg ,_baeg =0,0;_fcfg < _dfa ;_fcfg ,_baeg =_fcfg +4,_baeg +1{for _eefc =0;
_eefc < 4;_eefc ++{_dda =_aacb +_fcfg +_eefc ;if _dda <=len (_dba .Data )-1&&_dda < _aacb +_dba .BytesPerLine {_abd [_eefc ]=_dba .Data [_dda ];}else {_abd [_eefc ]=0x00;};_dda =_aacb +_dba .BytesPerLine +_fcfg +_eefc ;if _dda <=len (_dba .Data )-1&&_dda < _aacb +(2*_dba .BytesPerLine ){_ddaf [_eefc ]=_dba .Data [_dda ];
}else {_ddaf [_eefc ]=0x00;};};_efg =_ad .BigEndian .Uint32 (_abd );_dee =_ad .BigEndian .Uint32 (_ddaf );_dee &=_efg ;_dee &=_dee <<1;_dee &=0xaaaaaaaa;_efg =_dee |(_dee <<7);_bfa =byte (_efg >>24);_bfe =byte ((_efg >>8)&0xff);_dda =_dab +_baeg ;if _dda +1==len (_ggce .Data )-1||_dda +1>=_dab +_ggce .BytesPerLine {_ggce .Data [_dda ]=_aac [_bfa ];
if _bad =_ggce .setByte (_dda ,_aac [_bfa ]);_bad !=nil {return _f .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dda );};}else {_dfd =(uint16 (_aac [_bfa ])<<8)|uint16 (_aac [_bfe ]);if _bad =_ggce .setTwoBytes (_dda ,_dfd );_bad !=nil {return _f .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dda );
};_baeg ++;};};};return nil ;};func (_efff *NRGBA64 )NRGBA64At (x ,y int )_g .NRGBA64 {_eacd ,_ :=ColorAtNRGBA64 (x ,y ,_efff .Width ,_efff .Data ,_efff .Alpha ,_efff .Decode );return _eacd ;};func InDelta (expected ,current ,delta float64 )bool {_adcc :=expected -current ;
if _adcc <=-delta ||_adcc >=delta {return false ;};return true ;};func _bfac (_ecc _g .RGBA )_g .NRGBA {switch _ecc .A {case 0xff:return _g .NRGBA {R :_ecc .R ,G :_ecc .G ,B :_ecc .B ,A :0xff};case 0x00:return _g .NRGBA {};default:_gef ,_fcfd ,_fff ,_eefag :=_ecc .RGBA ();
_gef =(_gef *0xffff)/_eefag ;_fcfd =(_fcfd *0xffff)/_eefag ;_fff =(_fff *0xffff)/_eefag ;return _g .NRGBA {R :uint8 (_gef >>8),G :uint8 (_fcfd >>8),B :uint8 (_fff >>8),A :uint8 (_eefag >>8)};};};func _gcccc (_cfaf _a .Image )(Image ,error ){if _agad ,_eaad :=_cfaf .(*NRGBA64 );
_eaad {return _agad .Copy (),nil ;};_ffgf ,_aefd ,_dace :=_gafee (_cfaf ,2);_dfbg ,_eagb :=NewImage (_ffgf .Max .X ,_ffgf .Max .Y ,16,3,nil ,_dace ,nil );if _eagb !=nil {return nil ,_eagb ;};_febf (_cfaf ,_dfbg ,_ffgf );if len (_dace )!=0&&!_aefd {if _eddb :=_aeag (_dace ,_dfbg );
_eddb !=nil {return nil ,_eddb ;};};return _dfbg ,nil ;};var _ NRGBA =&NRGBA16 {};var _ Gray =&Gray8 {};func _fede (_bab RGBA ,_bbcf CMYK ,_ddd _a .Rectangle ){for _gbf :=0;_gbf < _ddd .Max .X ;_gbf ++{for _gbc :=0;_gbc < _ddd .Max .Y ;_gbc ++{_bcdb :=_bab .RGBAAt (_gbf ,_gbc );
_bbcf .SetCMYK (_gbf ,_gbc ,_cdgdd (_bcdb ));};};};func (_ggf *Gray2 )GrayAt (x ,y int )_g .Gray {_agcg ,_ :=ColorAtGray2BPC (x ,y ,_ggf .BytesPerLine ,_ggf .Data ,_ggf .Decode );return _agcg ;};func (_afdf *Gray8 )Validate ()error {if len (_afdf .Data )!=_afdf .Height *_afdf .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func _aegc (_eag _g .Gray )_g .CMYK {return _g .CMYK {K :0xff-_eag .Y }};func (_egde *Gray16 )Set (x ,y int ,c _g .Color ){_cbed :=(y *_egde .BytesPerLine /2+x )*2;if _cbed +1>=len (_egde .Data ){return ;};_gdf :=_g .Gray16Model .Convert (c ).(_g .Gray16 );
_egde .Data [_cbed ],_egde .Data [_cbed +1]=uint8 (_gdf .Y >>8),uint8 (_gdf .Y &0xff);};type NRGBA interface{NRGBAAt (_baead ,_bbac int )_g .NRGBA ;SetNRGBA (_caab ,_cgaf int ,_cbbf _g .NRGBA );};func _daga (_fbfd int ,_fega int )error {return _f .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_fbfd ,_fega );
};func (_abe *Gray2 )At (x ,y int )_g .Color {_afbec ,_ :=_abe .ColorAt (x ,y );return _afbec };func (_bcad *NRGBA32 )ColorModel ()_g .Model {return _g .NRGBAModel };type Gray8 struct{ImageBase };func (_ddfc *NRGBA32 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA32 (x ,y ,_ddfc .Width ,_ddfc .Data ,_ddfc .Alpha ,_ddfc .Decode );
};func (_ggbg *CMYK32 )ColorModel ()_g .Model {return _g .CMYKModel };func (_bbab *Gray4 )At (x ,y int )_g .Color {_dcf ,_ :=_bbab .ColorAt (x ,y );return _dcf };func ImgToBinary (i _a .Image ,threshold uint8 )*_a .Gray {switch _dagd :=i .(type ){case *_a .Gray :if _gecbf (_dagd ){return _dagd ;
};return _ffbaa (_dagd ,threshold );case *_a .Gray16 :return _gaea (_dagd ,threshold );default:return _agcac (_dagd ,threshold );};};type NRGBA16 struct{ImageBase };var ErrInvalidImage =_d .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_caeb :=y *bytesPerLine +x >>2;if _caeb >=len (data ){return _g .Gray {},_f .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fcee :=data [_caeb ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_fcee =uint8 (uint32 (LinearInterpolate (float64 (_fcee ),0,3.0,decode [0],decode [1]))&3);};return _g .Gray {Y :_fcee *85},nil ;};func (_bddf *Monochrome )setIndexedBit (_geea int ){_bddf .Data [(_geea >>3)]|=0x80>>uint (_geea &7)};
type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};var _ Image =&NRGBA32 {};func (_gbe *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_d .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_bag :=_adf (width ,height );_aaff :=make ([]int ,height );_bcde :=make ([]int ,width );_ebea :=float64 (_gbe .Width )/float64 (width );_fdc :=float64 (_gbe .Height )/float64 (height );for _cfab :=0;_cfab < height ;_cfab ++{_aaff [_cfab ]=int (_c .Min (_fdc *float64 (_cfab )+0.5,float64 (_gbe .Height -1)));
};for _cdda :=0;_cdda < width ;_cdda ++{_bcde [_cdda ]=int (_c .Min (_ebea *float64 (_cdda )+0.5,float64 (_gbe .Width -1)));};_gacc :=-1;_bfdc :=byte (0);for _effe :=0;_effe < height ;_effe ++{_gag :=_aaff [_effe ]*_gbe .BytesPerLine ;_afff :=_effe *_bag .BytesPerLine ;
for _aaga :=0;_aaga < width ;_aaga ++{_bagc :=_bcde [_aaga ];if _bagc !=_gacc {_bfdc =_gbe .getBit (_gag ,_bagc );if _bfdc !=0{_bag .setBit (_afff ,_aaga );};_gacc =_bagc ;}else {if _bfdc !=0{_bag .setBit (_afff ,_aaga );};};};};return _bag ,nil ;};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;
};return 1<<(_gabf (n )+1);};func (_gdbb *Gray8 )Bounds ()_a .Rectangle {return _a .Rectangle {Max :_a .Point {X :_gdbb .Width ,Y :_gdbb .Height }};};var _ _a .Image =&Gray8 {};func _ecba ()(_fea []byte ){_fea =make ([]byte ,256);for _bebb :=0;_bebb < 256;
_bebb ++{_acee :=byte (_bebb );_fea [_acee ]=(_acee &0x01)|((_acee &0x04)>>1)|((_acee &0x10)>>2)|((_acee &0x40)>>3)|((_acee &0x02)<<3)|((_acee &0x08)<<2)|((_acee &0x20)<<1)|(_acee &0x80);};return _fea ;};func _cdba (_da *Monochrome ,_eae int ,_ecf []byte )(_deb *Monochrome ,_cad error ){const _ccd ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";
if _da ==nil {return nil ,_d .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _eae < 1||_eae > 4{return nil ,_d .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _da .Height <=1{return nil ,_d .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_deb =_adf (_da .Width /2,_da .Height /2);
if _ecf ==nil {_ecf =_ecba ();};_dbd :=_gafcd (_da .BytesPerLine ,2*_deb .BytesPerLine );switch _eae {case 1:_cad =_bed (_da ,_deb ,_ecf ,_dbd );case 2:_cad =_fggf (_da ,_deb ,_ecf ,_dbd );case 3:_cad =_ecg (_da ,_deb ,_ecf ,_dbd );case 4:_cad =_bgf (_da ,_deb ,_ecf ,_dbd );
};if _cad !=nil {return nil ,_cad ;};return _deb ,nil ;};func (_fefe *CMYK32 )SetCMYK (x ,y int ,c _g .CMYK ){_gcb :=4*(y *_fefe .Width +x );if _gcb +3>=len (_fefe .Data ){return ;};_fefe .Data [_gcb ]=c .C ;_fefe .Data [_gcb +1]=c .M ;_fefe .Data [_gcb +2]=c .Y ;
_fefe .Data [_gcb +3]=c .K ;};func (_ccag *Gray16 )Histogram ()(_gbcd [256]int ){for _gffa :=0;_gffa < _ccag .Width ;_gffa ++{for _ggab :=0;_ggab < _ccag .Height ;_ggab ++{_gbcd [_ccag .GrayAt (_gffa ,_ggab ).Y ]++;};};return _gbcd ;};type CMYK interface{CMYKAt (_aacd ,_gce int )_g .CMYK ;
SetCMYK (_fdag ,_cfg int ,_aegb _g .CMYK );};func _ff (_af *Monochrome ,_fa int )(*Monochrome ,error ){if _af ==nil {return nil ,_d .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fa ==1{return _af .copy (),nil ;
};if !IsPowerOf2 (uint (_fa )){return nil ,_f .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_fa );};_bg :=_ffb (_fa );
return _ac (_af ,_fa ,_bg );};func (_cadc *Gray16 )At (x ,y int )_g .Color {_acgg ,_ :=_cadc .ColorAt (x ,y );return _acgg };func _aadg (_fca _g .Gray )_g .Gray {_bcea :=_fca .Y >>6;_bcea |=_bcea <<2;_fca .Y =_bcea |_bcea <<4;return _fca ;};type Gray2 struct{ImageBase };
func (_dbb *CMYK32 )Base ()*ImageBase {return &_dbb .ImageBase };func (_dag *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _dae (_dag ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _fdbe (_deff _a .Image )(Image ,error ){if _fcdcb ,_eba :=_deff .(*NRGBA32 );
_eba {return _fcdcb .Copy (),nil ;};_dcbe ,_baeadb ,_geac :=_gafee (_deff ,1);_bdga ,_efgf :=NewImage (_dcbe .Max .X ,_dcbe .Max .Y ,8,3,nil ,_geac ,nil );if _efgf !=nil {return nil ,_efgf ;};_efb (_deff ,_bdga ,_dcbe );if len (_geac )!=0&&!_baeadb {if _fced :=_aeag (_geac ,_bdga );
_fced !=nil {return nil ,_fced ;};};return _bdga ,nil ;};func GrayHistogram (g Gray )(_dagb [256]int ){switch _egceg :=g .(type ){case Histogramer :return _egceg .Histogram ();case _a .Image :_ebeae :=_egceg .Bounds ();for _fgda :=0;_fgda < _ebeae .Max .X ;
_fgda ++{for _fffc :=0;_fffc < _ebeae .Max .Y ;_fffc ++{_dagb [g .GrayAt (_fgda ,_fffc ).Y ]++;};};return _dagb ;default:return [256]int {};};};func _cgbc (_bca _g .CMYK )_g .Gray {_bea ,_dcdc ,_bfeg :=_g .CMYKToRGB (_bca .C ,_bca .M ,_bca .Y ,_bca .K );
_dfe :=(19595*uint32 (_bea )+38470*uint32 (_dcdc )+7471*uint32 (_bfeg )+1<<7)>>16;return _g .Gray {Y :uint8 (_dfe )};};var _ Image =&Gray8 {};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_bfg :=y *bytesPerLine +x ;
if _bfg >=len (data ){return _g .Gray {},_f .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fbgf :=data [_bfg ];if len (decode )==2{_fbgf =uint8 (uint32 (LinearInterpolate (float64 (_fbgf ),0,255,decode [0],decode [1]))&0xff);};return _g .Gray {Y :_fbgf },nil ;};func _baaa (_cccc _a .Image )(Image ,error ){if _bfbg ,_bbdd :=_cccc .(*Monochrome );
_bbdd {return _bfbg ,nil ;};_cegc :=_cccc .Bounds ();var _gec Gray ;switch _ddde :=_cccc .(type ){case Gray :_gec =_ddde ;case NRGBA :_gec =&Gray8 {ImageBase :NewImageBase (_cegc .Max .X ,_cegc .Max .Y ,8,1,nil ,nil ,nil )};_agf (_gec ,_ddde ,_cegc );case nrgba64 :_gec =&Gray8 {ImageBase :NewImageBase (_cegc .Max .X ,_cegc .Max .Y ,8,1,nil ,nil ,nil )};
_aef (_gec ,_ddde ,_cegc );default:_bgb ,_eaf :=GrayConverter .Convert (_cccc );if _eaf !=nil {return nil ,_eaf ;};_gec =_bgb .(Gray );};_cedb ,_aff :=NewImage (_cegc .Max .X ,_cegc .Max .Y ,1,1,nil ,nil ,nil );if _aff !=nil {return nil ,_aff ;};_bacd :=_cedb .(*Monochrome );
_dbf :=AutoThresholdTriangle (GrayHistogram (_gec ));for _fbb :=0;_fbb < _cegc .Max .X ;_fbb ++{for _dfec :=0;_dfec < _cegc .Max .Y ;_dfec ++{_fdacc :=_eece (_gec .GrayAt (_fbb ,_dfec ),monochromeModel (_dbf ));_bacd .SetGray (_fbb ,_dfec ,_fdacc );};};
return _cedb ,nil ;};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_cbcg :=BytesPerLine (width ,bitsPerComponent ,colorComponents );if _cbcg ==width *colorComponents *bitsPerComponent /8{return data ,nil ;
};_fgefb :=width *colorComponents *bitsPerComponent ;_gcbg :=_cbcg *8;_ddadc :=8-(_gcbg -_fgefb );_fceef :=_ae .NewReader (data );_fcdff :=_cbcg -1;_adccg :=make ([]byte ,_fcdff );_gbee :=make ([]byte ,height *_cbcg );_geda :=_ae .NewWriterMSB (_gbee );
var _bbdc uint64 ;var _bfae error ;for _fbef :=0;_fbef < height ;_fbef ++{_ ,_bfae =_fceef .Read (_adccg );if _bfae !=nil {return nil ,_bfae ;};_ ,_bfae =_geda .Write (_adccg );if _bfae !=nil {return nil ,_bfae ;};_bbdc ,_bfae =_fceef .ReadBits (byte (_ddadc ));
if _bfae !=nil {return nil ,_bfae ;};_ ,_bfae =_geda .WriteBits (_bbdc ,_ddadc );if _bfae !=nil {return nil ,_bfae ;};_geda .FinishByte ();};return _gbee ,nil ;};func (_dfba *Monochrome )Set (x ,y int ,c _g .Color ){_gee :=y *_dfba .BytesPerLine +x >>3;
if _gee > len (_dfba .Data )-1{return ;};_agegc :=_dfba .ColorModel ().Convert (c ).(_g .Gray );_dfba .setGray (x ,_agegc ,_gee );};var _ _a .Image =&Gray4 {};var _ Image =&Gray2 {};type RGBA interface{RGBAAt (_bcecc ,_abbe int )_g .RGBA ;SetRGBA (_eadb ,_gaeb int ,_ccca _g .RGBA );
};func (_cdg *CMYK32 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtCMYK (x ,y ,_cdg .Width ,_cdg .Data ,_cdg .Decode );};var _ggcg [256]uint8 ;func (_bddb *ImageBase )setEightPartlyBytes (_fbbe ,_dcdce int ,_aeeb uint64 )(_ebfa error ){var (_afded byte ;
_fecd int ;);for _eada :=1;_eada <=_dcdce ;_eada ++{_fecd =64-_eada *8;_afded =byte (_aeeb >>uint (_fecd )&0xff);if _ebfa =_bddb .setByte (_fbbe +_eada -1,_afded );_ebfa !=nil {return _ebfa ;};};_caf :=_bddb .BytesPerLine *8-_bddb .Width ;if _caf ==0{return nil ;
};_fecd -=8;_afded =byte (_aeeb >>uint (_fecd )&0xff)<<uint (_caf );if _ebfa =_bddb .setByte (_fbbe +_dcdce ,_afded );_ebfa !=nil {return _ebfa ;};return nil ;};func _baf (_gfab ,_cfe int ,_bdg []byte )*Monochrome {_ace :=_adf (_gfab ,_cfe );_ace .Data =_bdg ;
return _ace ;};func AutoThresholdTriangle (histogram [256]int )uint8 {var _fgdg ,_gfgf ,_acece ,_cacbc int ;for _bcgge :=0;_bcgge < len (histogram );_bcgge ++{if histogram [_bcgge ]> 0{_fgdg =_bcgge ;break ;};};if _fgdg > 0{_fgdg --;};for _eacg :=255;_eacg > 0;
_eacg --{if histogram [_eacg ]> 0{_cacbc =_eacg ;break ;};};if _cacbc < 255{_cacbc ++;};for _ecgb :=0;_ecgb < 256;_ecgb ++{if histogram [_ecgb ]> _gfgf {_acece =_ecgb ;_gfgf =histogram [_ecgb ];};};var _dddcg bool ;if (_acece -_fgdg )< (_cacbc -_acece ){_dddcg =true ;
var _deace int ;_bgea :=255;for _deace < _bgea {_cfbd :=histogram [_deace ];histogram [_deace ]=histogram [_bgea ];histogram [_bgea ]=_cfbd ;_deace ++;_bgea --;};_fgdg =255-_cacbc ;_acece =255-_acece ;};if _fgdg ==_acece {return uint8 (_fgdg );};_bec :=float64 (histogram [_acece ]);
_dcfg :=float64 (_fgdg -_acece );_dgca :=_c .Sqrt (_bec *_bec +_dcfg *_dcfg );_bec /=_dgca ;_dcfg /=_dgca ;_dgca =_bec *float64 (_fgdg )+_dcfg *float64 (histogram [_fgdg ]);_cec :=_fgdg ;var _bdbe float64 ;for _fgecg :=_fgdg +1;_fgecg <=_acece ;_fgecg ++{_dfag :=_bec *float64 (_fgecg )+_dcfg *float64 (histogram [_fgecg ])-_dgca ;
if _dfag > _bdbe {_cec =_fgecg ;_bdbe =_dfag ;};};_cec --;if _dddcg {var _ffeg int ;_edab :=255;for _ffeg < _edab {_cdc :=histogram [_ffeg ];histogram [_ffeg ]=histogram [_edab ];histogram [_edab ]=_cdc ;_ffeg ++;_edab --;};return uint8 (255-_cec );};return uint8 (_cec );
};func (_cedbb *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_cedbb .copy ()}};func _bbb (_afde ,_cebc Gray ,_fdcf _a .Rectangle ){for _fbbc :=0;_fbbc < _fdcf .Max .X ;_fbbc ++{for _bff :=0;_bff < _fdcf .Max .Y ;_bff ++{_cebc .SetGray (_fbbc ,_bff ,_afde .GrayAt (_fbbc ,_bff ));
};};};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _dae (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _cdgdd (_gff _g .RGBA )_g .CMYK {_cbb ,_gcf ,_agcb ,_gcc :=_g .RGBToCMYK (_gff .R ,_gff .G ,_gff .B );
return _g .CMYK {C :_cbb ,M :_gcf ,Y :_agcb ,K :_gcc };};func (_ffbbc *Monochrome )setGrayBit (_baea ,_egf int ){_ffbbc .Data [_baea ]|=0x80>>uint (_egf &7)};func (_dabe *ImageBase )setByte (_fcaa int ,_gaed byte )error {if _fcaa > len (_dabe .Data )-1{return _d .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dabe .Data [_fcaa ]=_gaed ;return nil ;};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA ,error ){_fgfd :=y *width +x ;_badc :=3*_fgfd ;if _badc +2>=len (data ){return _g .NRGBA {},_f .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ccef :=uint8 (0xff);if alpha !=nil &&len (alpha )> _fgfd {_ccef =alpha [_fgfd ];};_edge ,_dff ,_gfef :=data [_badc ],data [_badc +1],data [_badc +2];if len (decode )==6{_edge =uint8 (uint32 (LinearInterpolate (float64 (_edge ),0,255,decode [0],decode [1]))&0xff);
_dff =uint8 (uint32 (LinearInterpolate (float64 (_dff ),0,255,decode [2],decode [3]))&0xff);_gfef =uint8 (uint32 (LinearInterpolate (float64 (_gfef ),0,255,decode [4],decode [5]))&0xff);};return _g .NRGBA {R :_edge ,G :_dff ,B :_gfef ,A :_ccef },nil ;};
func (_acec *Gray4 )GrayAt (x ,y int )_g .Gray {_cgbfa ,_ :=ColorAtGray4BPC (x ,y ,_acec .BytesPerLine ,_acec .Data ,_acec .Decode );return _cgbfa ;};func (_dacgd *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_dacgd .copy ()}};func (_fdaf *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_fdaf .copy ()}};
func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_gadg :=y *bytesPerLine +x >>3;if _gadg >=len (data ){return _g .Gray {},_f .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fcb :=data [_gadg ]>>uint (7-(x &7))&1;if len (decode )==2{_fcb =uint8 (LinearInterpolate (float64 (_fcb ),0.0,1.0,decode [0],decode [1]))&1;};return _g .Gray {Y :_fcb *255},nil ;};func (_acecc *NRGBA32 )Set (x ,y int ,c _g .Color ){_ddfe :=y *_acecc .Width +x ;
_cgfa :=3*_ddfe ;if _cgfa +2>=len (_acecc .Data ){return ;};_dccg :=_g .NRGBAModel .Convert (c ).(_g .NRGBA );_acecc .setRGBA (_ddfe ,_dccg );};func _ffb (_agcf int )[]uint {var _dfbc []uint ;_cgcc :=_agcf ;_gac :=_cgcc /8;if _gac !=0{for _cdb :=0;_cdb < _gac ;
_cdb ++{_dfbc =append (_dfbc ,8);};_bf :=_cgcc %8;_cgcc =0;if _bf !=0{_cgcc =_bf ;};};_edb :=_cgcc /4;if _edb !=0{for _abbc :=0;_abbc < _edb ;_abbc ++{_dfbc =append (_dfbc ,4);};_fgd :=_cgcc %4;_cgcc =0;if _fgd !=0{_cgcc =_fgd ;};};_ceg :=_cgcc /2;if _ceg !=0{for _bd :=0;
_bd < _ceg ;_bd ++{_dfbc =append (_dfbc ,2);};};return _dfbc ;};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _c .Abs (xmax -xmin )< 0.000001{return ymin ;};_gaee :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _gaee ;};const (PixSrc RasterOperator =0xc;
PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;
PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;
PixMask =PixSrcAndDst ;);func _dac (_fdac _g .CMYK )_g .NRGBA {_dcd ,_efdc ,_efde :=_g .CMYKToRGB (_fdac .C ,_fdac .M ,_fdac .Y ,_fdac .K );return _g .NRGBA {R :_dcd ,G :_efdc ,B :_efde ,A :0xff};};func (_fecg *Gray4 )setGray (_ecgd int ,_edcc int ,_cba _g .Gray ){_fgef :=_edcc *_fecg .BytesPerLine ;
_accf :=_fgef +(_ecgd >>1);if _accf >=len (_fecg .Data ){return ;};_dacg :=_cba .Y >>4;_fecg .Data [_accf ]=(_fecg .Data [_accf ]&(^(0xf0>>uint (4*(_ecgd &1)))))|(_dacg <<uint (4-4*(_ecgd &1)));};var _ Image =&NRGBA16 {};func _agdb (_ebef _a .Image )(Image ,error ){if _adeg ,_ddaag :=_ebef .(*Gray2 );
_ddaag {return _adeg .Copy (),nil ;};_aedg :=_ebef .Bounds ();_bfda ,_dddcc :=NewImage (_aedg .Max .X ,_aedg .Max .Y ,2,1,nil ,nil ,nil );if _dddcc !=nil {return nil ,_dddcc ;};_cgd (_ebef ,_bfda ,_aedg );return _bfda ,nil ;};func _fbaag (_dccaf *_a .NYCbCrA ,_gfcdf NRGBA ,_edbeg _a .Rectangle ){for _aedc :=0;
_aedc < _edbeg .Max .X ;_aedc ++{for _edce :=0;_edce < _edbeg .Max .Y ;_edce ++{_agdbd :=_dccaf .NYCbCrAAt (_aedc ,_edce );_gfcdf .SetNRGBA (_aedc ,_edce ,_cbda (_agdbd ));};};};func (_agbc *Gray2 )Base ()*ImageBase {return &_agbc .ImageBase };func (_edfg *Monochrome )clearBit (_cbca ,_aafg int ){_edfg .Data [_cbca ]&=^(0x80>>uint (_aafg &7))};
func _fgddb (_edbd ,_afdbc ,_egb byte )byte {return (_edbd &^(_egb ))|(_afdbc &_egb )};func _ce (_gd ,_be *Monochrome )(_cgf error ){_aa :=_be .BytesPerLine ;_ba :=_gd .BytesPerLine ;_ga :=_be .BytesPerLine *4-_gd .BytesPerLine ;var (_bae ,_ca byte ;_cd uint32 ;
_cc ,_fg ,_gga ,_fd ,_efe ,_fdd ,_ea int ;);for _gga =0;_gga < _be .Height ;_gga ++{_cc =_gga *_aa ;_fg =4*_gga *_ba ;for _fd =0;_fd < _aa ;_fd ++{_bae =_be .Data [_cc +_fd ];_cd =_ed [_bae ];_fdd =_fg +_fd *4;if _ga !=0&&(_fd +1)*4> _gd .BytesPerLine {for _efe =_ga ;
_efe > 0;_efe --{_ca =byte ((_cd >>uint (_efe *8))&0xff);_ea =_fdd +(_ga -_efe );if _cgf =_gd .setByte (_ea ,_ca );_cgf !=nil {return _cgf ;};};}else if _cgf =_gd .setFourBytes (_fdd ,_cd );_cgf !=nil {return _cgf ;};if _cgf =_gd .setFourBytes (_fg +_fd *4,_ed [_be .Data [_cc +_fd ]]);
_cgf !=nil {return _cgf ;};};for _efe =1;_efe < 4;_efe ++{for _fd =0;_fd < _ba ;_fd ++{if _cgf =_gd .setByte (_fg +_efe *_ba +_fd ,_gd .Data [_fg +_fd ]);_cgf !=nil {return _cgf ;};};};};return nil ;};func (_ggd *Gray16 )Base ()*ImageBase {return &_ggd .ImageBase };
func ConverterFunc (converterFunc func (_gaa _a .Image )(Image ,error ))ColorConverter {return colorConverter {_afbe :converterFunc };};func (_fbgc *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_fbgc .copy ()}};func _eece (_abf _g .Gray ,_ddcd monochromeModel )_g .Gray {if _abf .Y > uint8 (_ddcd ){return _g .Gray {Y :_c .MaxUint8 };
};return _g .Gray {};};func _dae (_bbfa *Monochrome ,_gbae ,_efdeb ,_gffg ,_eegc int ,_fadd RasterOperator ,_baeae *Monochrome ,_fgdbg ,_feba int )error {if _bbfa ==nil {return _d .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _fadd ==PixDst {return nil ;};switch _fadd {case PixClr ,PixSet ,PixNotDst :_baaea (_bbfa ,_gbae ,_efdeb ,_gffg ,_eegc ,_fadd );return nil ;};if _baeae ==nil {_ab .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _d .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _dcbc :=_fgcf (_bbfa ,_gbae ,_efdeb ,_gffg ,_eegc ,_fadd ,_baeae ,_fgdbg ,_feba );_dcbc !=nil {return _dcbc ;};return nil ;};func _ggaf (_aca ,_acc *Monochrome )(_cgg error ){_cf :=_acc .BytesPerLine ;
_fed :=_aca .BytesPerLine ;var _fb ,_cee ,_gc ,_ega ,_fef int ;for _gc =0;_gc < _acc .Height ;_gc ++{_fb =_gc *_cf ;_cee =8*_gc *_fed ;for _ega =0;_ega < _cf ;_ega ++{if _cgg =_aca .setEightBytes (_cee +_ega *8,_abbf [_acc .Data [_fb +_ega ]]);_cgg !=nil {return _cgg ;
};};for _fef =1;_fef < 8;_fef ++{for _ega =0;_ega < _fed ;_ega ++{if _cgg =_aca .setByte (_cee +_fef *_fed +_ega ,_aca .Data [_cee +_ega ]);_cgg !=nil {return _cgg ;};};};};return nil ;};var _ Gray =&Gray4 {};func _ac (_fe *Monochrome ,_acd int ,_afd []uint )(*Monochrome ,error ){_ag :=_acd *_fe .Width ;
_gb :=_acd *_fe .Height ;_dd :=_adf (_ag ,_gb );for _agg ,_gg :=range _afd {var _agb error ;switch _gg {case 2:_agb =_db (_dd ,_fe );case 4:_agb =_ce (_dd ,_fe );case 8:_agb =_ggaf (_dd ,_fe );};if _agb !=nil {return nil ,_agb ;};if _agg !=len (_afd )-1{_fe =_dd .copy ();
};};return _dd ,nil ;};func (_cdgc *CMYK32 )At (x ,y int )_g .Color {_aggg ,_ :=_cdgc .ColorAt (x ,y );return _aggg };func (_ffce *NRGBA16 )Validate ()error {if len (_ffce .Data )!=3*_ffce .Width *_ffce .Height /2{return _d .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ Image =&Gray16 {};func _cafa (_gde _a .Image )(Image ,error ){if _dcbg ,_cffg :=_gde .(*NRGBA16 );_cffg {return _dcbg .Copy (),nil ;};_adge :=_gde .Bounds ();_eeeb ,_ddce :=NewImage (_adge .Max .X ,_adge .Max .Y ,4,3,nil ,nil ,nil );
if _ddce !=nil {return nil ,_ddce ;};_efb (_gde ,_eeeb ,_adge );return _eeeb ,nil ;};func (_bebc *NRGBA32 )Validate ()error {if len (_bebc .Data )!=3*_bebc .Width *_bebc .Height {return _d .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _edeb (_agdd _g .Color )_g .Color {_cdbg :=_g .GrayModel .Convert (_agdd ).(_g .Gray );return _aadg (_cdbg );};func _aeag (_gffd []byte ,_cdgcd Image )error {_ccae :=true ;for _gaagf :=0;_gaagf < len (_gffd );_gaagf ++{if _gffd [_gaagf ]!=0xff{_ccae =false ;
break ;};};if _ccae {switch _fbcc :=_cdgcd .(type ){case *NRGBA32 :_fbcc .Alpha =nil ;case *NRGBA64 :_fbcc .Alpha =nil ;default:return _f .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_cdgcd );
};};return nil ;};func (_acggg *Gray16 )Bounds ()_a .Rectangle {return _a .Rectangle {Max :_a .Point {X :_acggg .Width ,Y :_acggg .Height }};};func (_gbbd *NRGBA16 )NRGBAAt (x ,y int )_g .NRGBA {_gccc ,_ :=ColorAtNRGBA16 (x ,y ,_gbbd .Width ,_gbbd .BytesPerLine ,_gbbd .Data ,_gbbd .Alpha ,_gbbd .Decode );
return _gccc ;};func _ddg (_cga *Monochrome ,_aee ...int )(_cgb *Monochrome ,_edf error ){if _cga ==nil {return nil ,_d .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};
if len (_aee )==0{return nil ,_d .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_faeg :=_ecba ();_cgb =_cga ;for _ ,_fefc :=range _aee {if _fefc <=0{break ;};_cgb ,_edf =_cdba (_cgb ,_fefc ,_faeg );if _edf !=nil {return nil ,_edf ;};};return _cgb ,nil ;};func (_afdfc *NRGBA16 )SetNRGBA (x ,y int ,c _g .NRGBA ){_dfgb :=y *_afdfc .BytesPerLine +x *3/2;
if _dfgb +1>=len (_afdfc .Data ){return ;};c =_aacbag (c );_afdfc .setNRGBA (x ,y ,_dfgb ,c );};func (_bbde *NRGBA32 )setRGBA (_bbda int ,_ebcad _g .NRGBA ){_bfaa :=3*_bbda ;_bbde .Data [_bfaa ]=_ebcad .R ;_bbde .Data [_bfaa +1]=_ebcad .G ;_bbde .Data [_bfaa +2]=_ebcad .B ;
if _bbda < len (_bbde .Alpha ){_bbde .Alpha [_bbda ]=_ebcad .A ;};};func _fddc (_afdc _a .Image )(Image ,error ){if _fcdc ,_dc :=_afdc .(*CMYK32 );_dc {return _fcdc .Copy (),nil ;};_afb :=_afdc .Bounds ();_cdbb ,_ageg :=NewImage (_afb .Max .X ,_afb .Max .Y ,8,4,nil ,nil ,nil );
if _ageg !=nil {return nil ,_ageg ;};switch _gcec :=_afdc .(type ){case CMYK :_dbdb (_gcec ,_cdbb .(CMYK ),_afb );case Gray :_fgdd (_gcec ,_cdbb .(CMYK ),_afb );case NRGBA :_ddc (_gcec ,_cdbb .(CMYK ),_afb );case RGBA :_fede (_gcec ,_cdbb .(CMYK ),_afb );
default:_afa (_afdc ,_cdbb ,_afb );};return _cdbb ,nil ;};func (_dbab *Monochrome )ColorModel ()_g .Model {return MonochromeModel (_dbab .ModelThreshold )};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA ,error ){_aeffa :=y *bytesPerLine +x *3/2;
if _aeffa +1>=len (data ){return _g .NRGBA {},_daga (x ,y );};const (_ebd =0xf;_gfbe =uint8 (0xff););_deee :=_gfbe ;if alpha !=nil {_abeg :=y *BytesPerLine (width ,4,1);if _abeg < len (alpha ){if x %2==0{_deee =(alpha [_abeg ]>>uint (4))&_ebd ;}else {_deee =alpha [_abeg ]&_ebd ;
};_deee |=_deee <<4;};};var _gaga ,_eab ,_efdd uint8 ;if x *3%2==0{_gaga =(data [_aeffa ]>>uint (4))&_ebd ;_eab =data [_aeffa ]&_ebd ;_efdd =(data [_aeffa +1]>>uint (4))&_ebd ;}else {_gaga =data [_aeffa ]&_ebd ;_eab =(data [_aeffa +1]>>uint (4))&_ebd ;
_efdd =data [_aeffa +1]&_ebd ;};if len (decode )==6{_gaga =uint8 (uint32 (LinearInterpolate (float64 (_gaga ),0,15,decode [0],decode [1]))&0xf);_eab =uint8 (uint32 (LinearInterpolate (float64 (_eab ),0,15,decode [2],decode [3]))&0xf);_efdd =uint8 (uint32 (LinearInterpolate (float64 (_efdd ),0,15,decode [4],decode [5]))&0xf);
};return _g .NRGBA {R :(_gaga <<4)|(_gaga &0xf),G :(_eab <<4)|(_eab &0xf),B :(_efdd <<4)|(_efdd &0xf),A :_deee },nil ;};func (_baag *Gray2 )SetGray (x ,y int ,gray _g .Gray ){_gfgb :=_aadg (gray );_faega :=y *_baag .BytesPerLine ;_cadf :=_faega +(x >>2);
if _cadf >=len (_baag .Data ){return ;};_effd :=_gfgb .Y >>6;_baag .Data [_cadf ]=(_baag .Data [_cadf ]&(^(0xc0>>uint (2*((x )&3)))))|(_effd <<uint (6-2*(x &3)));};func _agcac (_ggcea _a .Image ,_ccccfb uint8 )*_a .Gray {_cedbf :=_ggcea .Bounds ();_ddfg :=_a .NewGray (_cedbf );
var (_bdfg _g .Color ;_ggee _g .Gray ;);for _ebae :=0;_ebae < _cedbf .Max .X ;_ebae ++{for _gdcd :=0;_gdcd < _cedbf .Max .Y ;_gdcd ++{_bdfg =_ggcea .At (_ebae ,_gdcd );_ddfg .Set (_ebae ,_gdcd ,_bdfg );_ggee =_ddfg .GrayAt (_ebae ,_gdcd );_ddfg .SetGray (_ebae ,_gdcd ,_g .Gray {Y :_gecd (_ggee .Y ,_ccccfb )});
};};return _ddfg ;};func _baaea (_dgf *Monochrome ,_geff ,_eca ,_befa ,_bfag int ,_fgcdb RasterOperator ){if _geff < 0{_befa +=_geff ;_geff =0;};_cccbc :=_geff +_befa -_dgf .Width ;if _cccbc > 0{_befa -=_cccbc ;};if _eca < 0{_bfag +=_eca ;_eca =0;};_afcc :=_eca +_bfag -_dgf .Height ;
if _afcc > 0{_bfag -=_afcc ;};if _befa <=0||_bfag <=0{return ;};if (_geff &7)==0{_facd (_dgf ,_geff ,_eca ,_befa ,_bfag ,_fgcdb );}else {_abfd (_dgf ,_geff ,_eca ,_befa ,_bfag ,_fgcdb );};};func MonochromeModel (threshold uint8 )_g .Model {return monochromeModel (threshold )};
func (_acfa *monochromeThresholdConverter )Convert (img _a .Image )(Image ,error ){if _dfae ,_dbc :=img .(*Monochrome );_dbc {return _dfae .Copy (),nil ;};_fbg :=img .Bounds ();_bgc ,_ebf :=NewImage (_fbg .Max .X ,_fbg .Max .Y ,1,1,nil ,nil ,nil );if _ebf !=nil {return nil ,_ebf ;
};_bgc .(*Monochrome ).ModelThreshold =_acfa .Threshold ;for _geb :=0;_geb < _fbg .Max .X ;_geb ++{for _geg :=0;_geg < _fbg .Max .Y ;_geg ++{_fgdb :=img .At (_geb ,_geg );_bgc .Set (_geb ,_geg ,_fgdb );};};return _bgc ,nil ;};func (_ddgdc *Gray4 )Bounds ()_a .Rectangle {return _a .Rectangle {Max :_a .Point {X :_ddgdc .Width ,Y :_ddgdc .Height }};
};var _ _a .Image =&NRGBA32 {};func _feed (_agab RGBA ,_abad NRGBA ,_ggef _a .Rectangle ){for _gfgcg :=0;_gfgcg < _ggef .Max .X ;_gfgcg ++{for _aagd :=0;_aagd < _ggef .Max .Y ;_aagd ++{_gebd :=_agab .RGBAAt (_gfgcg ,_aagd );_abad .SetNRGBA (_gfgcg ,_aagd ,_bfac (_gebd ));
};};};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA64 ,error ){_ebba :=(y *width +x )*2;_gddb :=_ebba *3;if _gddb +5>=len (data ){return _g .NRGBA64 {},_f .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _ggaba =0xffff;_afdg :=uint16 (_ggaba );if alpha !=nil &&len (alpha )> _ebba +1{_afdg =uint16 (alpha [_ebba ])<<8|uint16 (alpha [_ebba +1]);};_bfegf :=uint16 (data [_gddb ])<<8|uint16 (data [_gddb +1]);_ccbaf :=uint16 (data [_gddb +2])<<8|uint16 (data [_gddb +3]);
_bedd :=uint16 (data [_gddb +4])<<8|uint16 (data [_gddb +5]);if len (decode )==6{_bfegf =uint16 (uint64 (LinearInterpolate (float64 (_bfegf ),0,65535,decode [0],decode [1]))&_ggaba );_ccbaf =uint16 (uint64 (LinearInterpolate (float64 (_ccbaf ),0,65535,decode [2],decode [3]))&_ggaba );
_bedd =uint16 (uint64 (LinearInterpolate (float64 (_bedd ),0,65535,decode [4],decode [5]))&_ggaba );};return _g .NRGBA64 {R :_bfegf ,G :_ccbaf ,B :_bedd ,A :_afdg },nil ;};func _efb (_ecbab _a .Image ,_cgcg Image ,_gfcb _a .Rectangle ){if _bgcf ,_eccb :=_ecbab .(SMasker );
_eccb &&_bgcf .HasAlpha (){_cgcg .(SMasker ).MakeAlpha ();};switch _dbge :=_ecbab .(type ){case Gray :_fee (_dbge ,_cgcg .(NRGBA ),_gfcb );case NRGBA :_gda (_dbge ,_cgcg .(NRGBA ),_gfcb );case *_a .NYCbCrA :_fbaag (_dbge ,_cgcg .(NRGBA ),_gfcb );case CMYK :_bacc (_dbge ,_cgcg .(NRGBA ),_gfcb );
case RGBA :_feed (_dbge ,_cgcg .(NRGBA ),_gfcb );case nrgba64 :_bfdbc (_dbge ,_cgcg .(NRGBA ),_gfcb );default:_afa (_ecbab ,_cgcg ,_gfcb );};};func (_cca *Gray2 )Validate ()error {if len (_cca .Data )!=_cca .Height *_cca .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_fege *ImageBase )setFourBytes (_adc int ,_bfc uint32 )error {if _adc +3> len (_fege .Data )-1{return _f .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_adc );
};_fege .Data [_adc ]=byte ((_bfc &0xff000000)>>24);_fege .Data [_adc +1]=byte ((_bfc &0xff0000)>>16);_fege .Data [_adc +2]=byte ((_bfc &0xff00)>>8);_fege .Data [_adc +3]=byte (_bfc &0xff);return nil ;};func (_bfff *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_bfff .copy ()}};
func ImgToGray (i _a .Image )*_a .Gray {if _fccb ,_efgfb :=i .(*_a .Gray );_efgfb {return _fccb ;};_cfafd :=i .Bounds ();_fgfe :=_a .NewGray (_cfafd );for _cdfd :=0;_cdfd < _cfafd .Max .X ;_cdfd ++{for _gegb :=0;_gegb < _cfafd .Max .Y ;_gegb ++{_dcdfc :=i .At (_cdfd ,_gegb );
_fgfe .Set (_cdfd ,_gegb ,_dcdfc );};};return _fgfe ;};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_acda :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _dgcc Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_dgcc =&Monochrome {ImageBase :_acda ,ModelThreshold :0x0f};case 2:_dgcc =&Gray2 {ImageBase :_acda };case 4:_dgcc =&Gray4 {ImageBase :_acda };case 8:_dgcc =&Gray8 {ImageBase :_acda };
case 16:_dgcc =&Gray16 {ImageBase :_acda };};case 3:switch bitsPerComponent {case 4:_dgcc =&NRGBA16 {ImageBase :_acda };case 8:_dgcc =&NRGBA32 {ImageBase :_acda };case 16:_dgcc =&NRGBA64 {ImageBase :_acda };};case 4:_dgcc =&CMYK32 {ImageBase :_acda };};
if _dgcc ==nil {return nil ,ErrInvalidImage ;};return _dgcc ,nil ;};func _ec ()(_agc [256]uint32 ){for _fcd :=0;_fcd < 256;_fcd ++{if _fcd &0x01!=0{_agc [_fcd ]|=0xf;};if _fcd &0x02!=0{_agc [_fcd ]|=0xf0;};if _fcd &0x04!=0{_agc [_fcd ]|=0xf00;};if _fcd &0x08!=0{_agc [_fcd ]|=0xf000;
};if _fcd &0x10!=0{_agc [_fcd ]|=0xf0000;};if _fcd &0x20!=0{_agc [_fcd ]|=0xf00000;};if _fcd &0x40!=0{_agc [_fcd ]|=0xf000000;};if _fcd &0x80!=0{_agc [_fcd ]|=0xf0000000;};};return _agc ;};func _bda (_cccb *Monochrome ,_egad ,_egcb ,_ebedb ,_bfbfd int ,_cafc RasterOperator ,_fefgd *Monochrome ,_acad ,_cebd int )error {var (_bbcc bool ;
_ceda bool ;_afddd byte ;_bcgg int ;_ccaf int ;_ccbe int ;_bfdb int ;_adba bool ;_cgff int ;_dcgb int ;_fagd int ;_cfbe bool ;_gfae byte ;_dbad int ;_bcdc int ;_dbcg int ;_eefb byte ;_bgff int ;_cgda int ;_aacba uint ;_cddc uint ;_ggdg byte ;_dge shift ;
_dgee bool ;_gbb bool ;_egca ,_dfca int ;);if _acad &7!=0{_cgda =8-(_acad &7);};if _egad &7!=0{_ccaf =8-(_egad &7);};if _cgda ==0&&_ccaf ==0{_ggdg =_cfeb [0];}else {if _ccaf > _cgda {_aacba =uint (_ccaf -_cgda );}else {_aacba =uint (8-(_cgda -_ccaf ));
};_cddc =8-_aacba ;_ggdg =_cfeb [_aacba ];};if (_egad &7)!=0{_bbcc =true ;_bcgg =8-(_egad &7);_afddd =_cfeb [_bcgg ];_ccbe =_cccb .BytesPerLine *_egcb +(_egad >>3);_bfdb =_fefgd .BytesPerLine *_cebd +(_acad >>3);_bgff =8-(_acad &7);if _bcgg > _bgff {_dge =_ffbc ;
if _ebedb >=_cgda {_dgee =true ;};}else {_dge =_egce ;};};if _ebedb < _bcgg {_ceda =true ;_afddd &=_fcdd [8-_bcgg +_ebedb ];};if !_ceda {_cgff =(_ebedb -_bcgg )>>3;if _cgff !=0{_adba =true ;_dcgb =_cccb .BytesPerLine *_egcb +((_egad +_ccaf )>>3);_fagd =_fefgd .BytesPerLine *_cebd +((_acad +_ccaf )>>3);
};};_dbad =(_egad +_ebedb )&7;if !(_ceda ||_dbad ==0){_cfbe =true ;_gfae =_fcdd [_dbad ];_bcdc =_cccb .BytesPerLine *_egcb +((_egad +_ccaf )>>3)+_cgff ;_dbcg =_fefgd .BytesPerLine *_cebd +((_acad +_ccaf )>>3)+_cgff ;if _dbad > int (_cddc ){_gbb =true ;
};};switch _cafc {case PixSrc :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;
};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],_eefb ,_afddd );_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );
_cccb .Data [_dcgb +_dfca ]=_eefb ;};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};if _cfbe {for _egca =0;_egca < _bfbfd ;_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );
};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],_eefb ,_gfae );_bcdc +=_cccb .BytesPerLine ;_dbcg +=_fefgd .BytesPerLine ;};};case PixNotSrc :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );
};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],^_eefb ,_afddd );_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;_dfca < _cgff ;
_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );_cccb .Data [_dcgb +_dfca ]=^_eefb ;};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};if _cfbe {for _egca =0;_egca < _bfbfd ;_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;
if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],^_eefb ,_gfae );_bcdc +=_cccb .BytesPerLine ;_dbcg +=_fefgd .BytesPerLine ;};};case PixSrcOrDst :if _bbcc {for _egca =0;_egca < _bfbfd ;
_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],_eefb |_cccb .Data [_ccbe ],_afddd );
_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );_cccb .Data [_dcgb +_dfca ]|=_eefb ;
};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};if _cfbe {for _egca =0;_egca < _bfbfd ;_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],_eefb |_cccb .Data [_bcdc ],_gfae );
_bcdc +=_cccb .BytesPerLine ;_dbcg +=_fefgd .BytesPerLine ;};};case PixSrcAndDst :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );
};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],_eefb &_cccb .Data [_ccbe ],_afddd );_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;
_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );_cccb .Data [_dcgb +_dfca ]&=_eefb ;};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};if _cfbe {for _egca =0;_egca < _bfbfd ;
_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],_eefb &_cccb .Data [_bcdc ],_gfae );_bcdc +=_cccb .BytesPerLine ;_dbcg +=_fefgd .BytesPerLine ;
};};case PixSrcXorDst :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],_eefb ^_cccb .Data [_ccbe ],_afddd );
_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );_cccb .Data [_dcgb +_dfca ]^=_eefb ;
};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};if _cfbe {for _egca =0;_egca < _bfbfd ;_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],_eefb ^_cccb .Data [_bcdc ],_gfae );
_bcdc +=_cccb .BytesPerLine ;_dbcg +=_fefgd .BytesPerLine ;};};case PixNotSrcOrDst :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );
};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],^_eefb |_cccb .Data [_ccbe ],_afddd );_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;
_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );_cccb .Data [_dcgb +_dfca ]|=^_eefb ;};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};if _cfbe {for _egca =0;_egca < _bfbfd ;
_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],^_eefb |_cccb .Data [_bcdc ],_gfae );_bcdc +=_cccb .BytesPerLine ;_dbcg +=_fefgd .BytesPerLine ;
};};case PixNotSrcAndDst :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],^_eefb &_cccb .Data [_ccbe ],_afddd );
_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );_cccb .Data [_dcgb +_dfca ]&=^_eefb ;
};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};if _cfbe {for _egca =0;_egca < _bfbfd ;_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],^_eefb &_cccb .Data [_bcdc ],_gfae );
_bcdc +=_cccb .BytesPerLine ;_dbcg +=_fefgd .BytesPerLine ;};};case PixSrcOrNotDst :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );
};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],_eefb |^_cccb .Data [_ccbe ],_afddd );_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;
_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );_cccb .Data [_dcgb +_dfca ]=_eefb |^_cccb .Data [_dcgb +_dfca ];};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};
if _cfbe {for _egca =0;_egca < _bfbfd ;_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],_eefb |^_cccb .Data [_bcdc ],_gfae );_bcdc +=_cccb .BytesPerLine ;
_dbcg +=_fefgd .BytesPerLine ;};};case PixSrcAndNotDst :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;
};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],_eefb &^_cccb .Data [_ccbe ],_afddd );_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );
_cccb .Data [_dcgb +_dfca ]=_eefb &^_cccb .Data [_dcgb +_dfca ];};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};if _cfbe {for _egca =0;_egca < _bfbfd ;_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );
};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],_eefb &^_cccb .Data [_bcdc ],_gfae );_bcdc +=_cccb .BytesPerLine ;_dbcg +=_fefgd .BytesPerLine ;};};case PixNotPixSrcOrDst :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;
if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],^(_eefb |_cccb .Data [_ccbe ]),_afddd );_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;
};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );_cccb .Data [_dcgb +_dfca ]=^(_eefb |_cccb .Data [_dcgb +_dfca ]);
};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};if _cfbe {for _egca =0;_egca < _bfbfd ;_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],^(_eefb |_cccb .Data [_bcdc ]),_gfae );
_bcdc +=_cccb .BytesPerLine ;_dbcg +=_fefgd .BytesPerLine ;};};case PixNotPixSrcAndDst :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );
};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],^(_eefb &_cccb .Data [_ccbe ]),_afddd );_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;
_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );_cccb .Data [_dcgb +_dfca ]=^(_eefb &_cccb .Data [_dcgb +_dfca ]);};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};
};if _cfbe {for _egca =0;_egca < _bfbfd ;_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],^(_eefb &_cccb .Data [_bcdc ]),_gfae );_bcdc +=_cccb .BytesPerLine ;
_dbcg +=_fefgd .BytesPerLine ;};};case PixNotPixSrcXorDst :if _bbcc {for _egca =0;_egca < _bfbfd ;_egca ++{if _dge ==_ffbc {_eefb =_fefgd .Data [_bfdb ]<<_aacba ;if _dgee {_eefb =_fgddb (_eefb ,_fefgd .Data [_bfdb +1]>>_cddc ,_ggdg );};}else {_eefb =_fefgd .Data [_bfdb ]>>_cddc ;
};_cccb .Data [_ccbe ]=_fgddb (_cccb .Data [_ccbe ],^(_eefb ^_cccb .Data [_ccbe ]),_afddd );_ccbe +=_cccb .BytesPerLine ;_bfdb +=_fefgd .BytesPerLine ;};};if _adba {for _egca =0;_egca < _bfbfd ;_egca ++{for _dfca =0;_dfca < _cgff ;_dfca ++{_eefb =_fgddb (_fefgd .Data [_fagd +_dfca ]<<_aacba ,_fefgd .Data [_fagd +_dfca +1]>>_cddc ,_ggdg );
_cccb .Data [_dcgb +_dfca ]=^(_eefb ^_cccb .Data [_dcgb +_dfca ]);};_dcgb +=_cccb .BytesPerLine ;_fagd +=_fefgd .BytesPerLine ;};};if _cfbe {for _egca =0;_egca < _bfbfd ;_egca ++{_eefb =_fefgd .Data [_dbcg ]<<_aacba ;if _gbb {_eefb =_fgddb (_eefb ,_fefgd .Data [_dbcg +1]>>_cddc ,_ggdg );
};_cccb .Data [_bcdc ]=_fgddb (_cccb .Data [_bcdc ],^(_eefb ^_cccb .Data [_bcdc ]),_gfae );_bcdc +=_cccb .BytesPerLine ;_dbcg +=_fefgd .BytesPerLine ;};};default:_ab .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_cafc );
return _d .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};var _ _a .Image =&Gray16 {};func (_dbbc *Monochrome )setGray (_ddf int ,_ecge _g .Gray ,_dccc int ){if _ecge .Y ==0{_dbbc .clearBit (_dccc ,_ddf );
}else {_dbbc .setGrayBit (_dccc ,_ddf );};};func _gecbf (_aeee *_a .Gray )bool {for _gaedd :=0;_gaedd < len (_aeee .Pix );_gaedd ++{if !_gfcc (_aeee .Pix [_gaedd ]){return false ;};};return true ;};func (_accac *NRGBA64 )Bounds ()_a .Rectangle {return _a .Rectangle {Max :_a .Point {X :_accac .Width ,Y :_accac .Height }};
};func _adf (_fec ,_ecff int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_fec ,_ecff ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};func (_aggeb *Gray8 )Set (x ,y int ,c _g .Color ){_baae :=y *_aggeb .BytesPerLine +x ;if _baae > len (_aggeb .Data )-1{return ;
};_gfe :=_g .GrayModel .Convert (c );_aggeb .Data [_baae ]=_gfe .(_g .Gray ).Y ;};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};type Gray4 struct{ImageBase };func (_gba *Gray4 )Base ()*ImageBase {return &_gba .ImageBase };func (_edfb *NRGBA32 )NRGBAAt (x ,y int )_g .NRGBA {_acaeb ,_ :=ColorAtNRGBA32 (x ,y ,_edfb .Width ,_edfb .Data ,_edfb .Alpha ,_edfb .Decode );
return _acaeb ;};func (_abbg *Gray8 )SetGray (x ,y int ,g _g .Gray ){_fgeb :=y *_abbg .BytesPerLine +x ;if _fgeb > len (_abbg .Data )-1{return ;};_abbg .Data [_fgeb ]=g .Y ;};var _ Image =&NRGBA64 {};func _bfdbc (_gdga nrgba64 ,_bdfa NRGBA ,_bcdcd _a .Rectangle ){for _eggg :=0;
_eggg < _bcdcd .Max .X ;_eggg ++{for _bdged :=0;_bdged < _bcdcd .Max .Y ;_bdged ++{_agacf :=_gdga .NRGBA64At (_eggg ,_bdged );_bdfa .SetNRGBA (_eggg ,_bdged ,_eadf (_agacf ));};};};func (_eebc *Monochrome )getBit (_gfga ,_bge int )uint8 {return _eebc .Data [_gfga +(_bge >>3)]>>uint (7-(_bge &7))&1;
};type CMYK32 struct{ImageBase };func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_eb :=BytesPerLine (width ,8,1);if len (data )< _eb *height {return nil ,nil ;};_eg :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};
_b ,_df :=MonochromeConverter .Convert (_eg );if _df !=nil {return nil ,_df ;};return _b .Base ().Data ,nil ;};func _fgcf (_fgae *Monochrome ,_fgff ,_afaf int ,_fddg ,_gafg int ,_fgcg RasterOperator ,_edcb *Monochrome ,_ggga ,_aacf int )error {var _eaca ,_bdbc ,_ffa ,_bcdbd int ;
if _fgff < 0{_ggga -=_fgff ;_fddg +=_fgff ;_fgff =0;};if _ggga < 0{_fgff -=_ggga ;_fddg +=_ggga ;_ggga =0;};_eaca =_fgff +_fddg -_fgae .Width ;if _eaca > 0{_fddg -=_eaca ;};_bdbc =_ggga +_fddg -_edcb .Width ;if _bdbc > 0{_fddg -=_bdbc ;};if _afaf < 0{_aacf -=_afaf ;
_gafg +=_afaf ;_afaf =0;};if _aacf < 0{_afaf -=_aacf ;_gafg +=_aacf ;_aacf =0;};_ffa =_afaf +_gafg -_fgae .Height ;if _ffa > 0{_gafg -=_ffa ;};_bcdbd =_aacf +_gafg -_edcb .Height ;if _bcdbd > 0{_gafg -=_bcdbd ;};if _fddg <=0||_gafg <=0{return nil ;};var _dgdg error ;
switch {case _fgff &7==0&&_ggga &7==0:_dgdg =_affb (_fgae ,_fgff ,_afaf ,_fddg ,_gafg ,_fgcg ,_edcb ,_ggga ,_aacf );case _fgff &7==_ggga &7:_dgdg =_fage (_fgae ,_fgff ,_afaf ,_fddg ,_gafg ,_fgcg ,_edcb ,_ggga ,_aacf );default:_dgdg =_bda (_fgae ,_fgff ,_afaf ,_fddg ,_gafg ,_fgcg ,_edcb ,_ggga ,_aacf );
};if _dgdg !=nil {return _dgdg ;};return nil ;};func (_aaba *NRGBA64 )At (x ,y int )_g .Color {_fcef ,_ :=_aaba .ColorAt (x ,y );return _fcef };func _gda (_ecbd ,_bddd NRGBA ,_agce _a .Rectangle ){for _ccgdf :=0;_ccgdf < _agce .Max .X ;_ccgdf ++{for _fgebe :=0;
_fgebe < _agce .Max .Y ;_fgebe ++{_bddd .SetNRGBA (_ccgdf ,_fgebe ,_ecbd .NRGBAAt (_ccgdf ,_fgebe ));};};};func (_gea *ImageBase )setEightBytes (_dcdf int ,_fcdf uint64 )error {_abg :=_gea .BytesPerLine -(_dcdf %_gea .BytesPerLine );if _gea .BytesPerLine !=_gea .Width >>3{_abg --;
};if _abg >=8{return _gea .setEightFullBytes (_dcdf ,_fcdf );};return _gea .setEightPartlyBytes (_dcdf ,_abg ,_fcdf );};func (_gae *ImageBase )GetAlpha ()[]byte {return _gae .Alpha };func (_afe *CMYK32 )Validate ()error {if len (_afe .Data )!=4*_afe .Width *_afe .Height {return _d .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_eeba *Gray2 )Bounds ()_a .Rectangle {return _a .Rectangle {Max :_a .Point {X :_eeba .Width ,Y :_eeba .Height }};};type colorConverter struct{_afbe func (_feb _a .Image )(Image ,error );};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };
};func _fdcg (_gbfc _g .Gray )_g .Gray {_gbfc .Y >>=4;_gbfc .Y |=_gbfc .Y <<4;return _gbfc };func _befc (_bgd _g .NRGBA )_g .Gray {_ddb ,_fba ,_fgad ,_ :=_bgd .RGBA ();_bfee :=(19595*_ddb +38470*_fba +7471*_fgad +1<<15)>>24;return _g .Gray {Y :uint8 (_bfee )};
};func (_bbdb *Monochrome )Bounds ()_a .Rectangle {return _a .Rectangle {Max :_a .Point {X :_bbdb .Width ,Y :_bbdb .Height }};};func _gcaf (_efc RGBA ,_cab Gray ,_aedgf _a .Rectangle ){for _ffcc :=0;_ffcc < _aedgf .Max .X ;_ffcc ++{for _bga :=0;_bga < _aedgf .Max .Y ;
_bga ++{_afaa :=_dga (_efc .RGBAAt (_ffcc ,_bga ));_cab .SetGray (_ffcc ,_bga ,_afaa );};};};func (_bccf *Gray2 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray2BPC (x ,y ,_bccf .BytesPerLine ,_bccf .Data ,_bccf .Decode );};func _dbdb (_bba ,_edea CMYK ,_ebca _a .Rectangle ){for _gdd :=0;
_gdd < _ebca .Max .X ;_gdd ++{for _afca :=0;_afca < _ebca .Max .Y ;_afca ++{_edea .SetCMYK (_gdd ,_afca ,_bba .CMYKAt (_gdd ,_afca ));};};};func (_fgcd *Gray4 )Histogram ()(_defa [256]int ){for _aabge :=0;_aabge < _fgcd .Width ;_aabge ++{for _dfde :=0;
_dfde < _fgcd .Height ;_dfde ++{_defa [_fgcd .GrayAt (_aabge ,_dfde ).Y ]++;};};return _defa ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_g .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_f .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func (_baegcg *NRGBA64 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA64 (x ,y ,_baegcg .Width ,_baegcg .Data ,_baegcg .Alpha ,_baegcg .Decode );};func _fggf (_bgg ,_aeb *Monochrome ,_cefe []byte ,_fda int )(_fad error ){var (_dfc ,_aab ,_fcdg ,_cfea ,_dgbd ,_bcc ,_ffc ,_fdb int ;
_ged ,_agge ,_gfabe ,_fcf uint32 ;_ecfa ,_fga byte ;_cb uint16 ;);_caa :=make ([]byte ,4);_fcgb :=make ([]byte ,4);for _fcdg =0;_fcdg < _bgg .Height -1;_fcdg ,_cfea =_fcdg +2,_cfea +1{_dfc =_fcdg *_bgg .BytesPerLine ;_aab =_cfea *_aeb .BytesPerLine ;for _dgbd ,_bcc =0,0;
_dgbd < _fda ;_dgbd ,_bcc =_dgbd +4,_bcc +1{for _ffc =0;_ffc < 4;_ffc ++{_fdb =_dfc +_dgbd +_ffc ;if _fdb <=len (_bgg .Data )-1&&_fdb < _dfc +_bgg .BytesPerLine {_caa [_ffc ]=_bgg .Data [_fdb ];}else {_caa [_ffc ]=0x00;};_fdb =_dfc +_bgg .BytesPerLine +_dgbd +_ffc ;
if _fdb <=len (_bgg .Data )-1&&_fdb < _dfc +(2*_bgg .BytesPerLine ){_fcgb [_ffc ]=_bgg .Data [_fdb ];}else {_fcgb [_ffc ]=0x00;};};_ged =_ad .BigEndian .Uint32 (_caa );_agge =_ad .BigEndian .Uint32 (_fcgb );_gfabe =_ged &_agge ;_gfabe |=_gfabe <<1;_fcf =_ged |_agge ;
_fcf &=_fcf <<1;_agge =_gfabe |_fcf ;_agge &=0xaaaaaaaa;_ged =_agge |(_agge <<7);_ecfa =byte (_ged >>24);_fga =byte ((_ged >>8)&0xff);_fdb =_aab +_bcc ;if _fdb +1==len (_aeb .Data )-1||_fdb +1>=_aab +_aeb .BytesPerLine {if _fad =_aeb .setByte (_fdb ,_cefe [_ecfa ]);
_fad !=nil {return _f .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fdb );};}else {_cb =(uint16 (_cefe [_ecfa ])<<8)|uint16 (_cefe [_fga ]);if _fad =_aeb .setTwoBytes (_fdb ,_cb );_fad !=nil {return _f .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fdb );
};_bcc ++;};};};return nil ;};func (_ggcf *Monochrome )InverseData ()error {return _ggcf .RasterOperation (0,0,_ggcf .Width ,_ggcf .Height ,PixNotDst ,nil ,0,0);};func (_ddab *NRGBA64 )setNRGBA64 (_gceg int ,_dfeb _g .NRGBA64 ,_cbac int ){_ddab .Data [_gceg ]=uint8 (_dfeb .R >>8);
_ddab .Data [_gceg +1]=uint8 (_dfeb .R &0xff);_ddab .Data [_gceg +2]=uint8 (_dfeb .G >>8);_ddab .Data [_gceg +3]=uint8 (_dfeb .G &0xff);_ddab .Data [_gceg +4]=uint8 (_dfeb .B >>8);_ddab .Data [_gceg +5]=uint8 (_dfeb .B &0xff);if _cbac +1< len (_ddab .Alpha ){_ddab .Alpha [_cbac ]=uint8 (_dfeb .A >>8);
_ddab .Alpha [_cbac +1]=uint8 (_dfeb .A &0xff);};};func _egeb (_fbd _g .Color )_g .Color {_fafe :=_g .GrayModel .Convert (_fbd ).(_g .Gray );return _fdcg (_fafe );};func _aacbag (_bgbe _g .NRGBA )_g .NRGBA {_bgbe .R =_bgbe .R >>4|(_bgbe .R >>4)<<4;_bgbe .G =_bgbe .G >>4|(_bgbe .G >>4)<<4;
_bgbe .B =_bgbe .B >>4|(_bgbe .B >>4)<<4;return _bgbe ;};func _bbae (_agac _g .Color )_g .Color {_fdce :=_g .NRGBAModel .Convert (_agac ).(_g .NRGBA );return _aacbag (_fdce );};var _ _a .Image =&NRGBA16 {};func _eef ()(_fbe [256]uint16 ){for _ggc :=0;_ggc < 256;
_ggc ++{if _ggc &0x01!=0{_fbe [_ggc ]|=0x3;};if _ggc &0x02!=0{_fbe [_ggc ]|=0xc;};if _ggc &0x04!=0{_fbe [_ggc ]|=0x30;};if _ggc &0x08!=0{_fbe [_ggc ]|=0xc0;};if _ggc &0x10!=0{_fbe [_ggc ]|=0x300;};if _ggc &0x20!=0{_fbe [_ggc ]|=0xc00;};if _ggc &0x40!=0{_fbe [_ggc ]|=0x3000;
};if _ggc &0x80!=0{_fbe [_ggc ]|=0xc000;};};return _fbe ;};func _abfd (_cfgg *Monochrome ,_ccccf ,_befb int ,_eceg ,_ddeac int ,_bdgb RasterOperator ){var (_aegce bool ;_cgge bool ;_fgebd int ;_acff int ;_deaa int ;_egacc int ;_acbg bool ;_ggec byte ;);
_ddee :=8-(_ccccf &7);_deca :=_cfeb [_ddee ];_gaff :=_cfgg .BytesPerLine *_befb +(_ccccf >>3);if _eceg < _ddee {_aegce =true ;_deca &=_fcdd [8-_ddee +_eceg ];};if !_aegce {_fgebd =(_eceg -_ddee )>>3;if _fgebd !=0{_cgge =true ;_acff =_gaff +1;};};_deaa =(_ccccf +_eceg )&7;
if !(_aegce ||_deaa ==0){_acbg =true ;_ggec =_fcdd [_deaa ];_egacc =_gaff +1+_fgebd ;};var _defc ,_dcae int ;switch _bdgb {case PixClr :for _defc =0;_defc < _ddeac ;_defc ++{_cfgg .Data [_gaff ]=_fgddb (_cfgg .Data [_gaff ],0x0,_deca );_gaff +=_cfgg .BytesPerLine ;
};if _cgge {for _defc =0;_defc < _ddeac ;_defc ++{for _dcae =0;_dcae < _fgebd ;_dcae ++{_cfgg .Data [_acff +_dcae ]=0x0;};_acff +=_cfgg .BytesPerLine ;};};if _acbg {for _defc =0;_defc < _ddeac ;_defc ++{_cfgg .Data [_egacc ]=_fgddb (_cfgg .Data [_egacc ],0x0,_ggec );
_egacc +=_cfgg .BytesPerLine ;};};case PixSet :for _defc =0;_defc < _ddeac ;_defc ++{_cfgg .Data [_gaff ]=_fgddb (_cfgg .Data [_gaff ],0xff,_deca );_gaff +=_cfgg .BytesPerLine ;};if _cgge {for _defc =0;_defc < _ddeac ;_defc ++{for _dcae =0;_dcae < _fgebd ;
_dcae ++{_cfgg .Data [_acff +_dcae ]=0xff;};_acff +=_cfgg .BytesPerLine ;};};if _acbg {for _defc =0;_defc < _ddeac ;_defc ++{_cfgg .Data [_egacc ]=_fgddb (_cfgg .Data [_egacc ],0xff,_ggec );_egacc +=_cfgg .BytesPerLine ;};};case PixNotDst :for _defc =0;
_defc < _ddeac ;_defc ++{_cfgg .Data [_gaff ]=_fgddb (_cfgg .Data [_gaff ],^_cfgg .Data [_gaff ],_deca );_gaff +=_cfgg .BytesPerLine ;};if _cgge {for _defc =0;_defc < _ddeac ;_defc ++{for _dcae =0;_dcae < _fgebd ;_dcae ++{_cfgg .Data [_acff +_dcae ]=^(_cfgg .Data [_acff +_dcae ]);
};_acff +=_cfgg .BytesPerLine ;};};if _acbg {for _defc =0;_defc < _ddeac ;_defc ++{_cfgg .Data [_egacc ]=_fgddb (_cfgg .Data [_egacc ],^_cfgg .Data [_egacc ],_ggec );_egacc +=_cfgg .BytesPerLine ;};};};};func (_fcbf *NRGBA16 )ColorModel ()_g .Model {return NRGBA16Model };
func _facd (_gfee *Monochrome ,_ggcd ,_egag int ,_ffbe ,_fcgdg int ,_aeaa RasterOperator ){var (_eebg int ;_agdf byte ;_ccgd ,_ada int ;_aade int ;);_fbba :=_ffbe >>3;_gffge :=_ffbe &7;if _gffge > 0{_agdf =_fcdd [_gffge ];};_eebg =_gfee .BytesPerLine *_egag +(_ggcd >>3);
switch _aeaa {case PixClr :for _ccgd =0;_ccgd < _fcgdg ;_ccgd ++{_aade =_eebg +_ccgd *_gfee .BytesPerLine ;for _ada =0;_ada < _fbba ;_ada ++{_gfee .Data [_aade ]=0x0;_aade ++;};if _gffge > 0{_gfee .Data [_aade ]=_fgddb (_gfee .Data [_aade ],0x0,_agdf );
};};case PixSet :for _ccgd =0;_ccgd < _fcgdg ;_ccgd ++{_aade =_eebg +_ccgd *_gfee .BytesPerLine ;for _ada =0;_ada < _fbba ;_ada ++{_gfee .Data [_aade ]=0xff;_aade ++;};if _gffge > 0{_gfee .Data [_aade ]=_fgddb (_gfee .Data [_aade ],0xff,_agdf );};};case PixNotDst :for _ccgd =0;
_ccgd < _fcgdg ;_ccgd ++{_aade =_eebg +_ccgd *_gfee .BytesPerLine ;for _ada =0;_ada < _fbba ;_ada ++{_gfee .Data [_aade ]=^_gfee .Data [_aade ];_aade ++;};if _gffge > 0{_gfee .Data [_aade ]=_fgddb (_gfee .Data [_aade ],^_gfee .Data [_aade ],_agdf );};};
};};func (_eagdc *ImageBase )newAlpha (){_fbaa :=BytesPerLine (_eagdc .Width ,_eagdc .BitsPerComponent ,1);_eagdc .Alpha =make ([]byte ,_eagdc .Height *_fbaa );};func (_egagg *NRGBA32 )Base ()*ImageBase {return &_egagg .ImageBase };func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_f .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_bcaa *NRGBA64 )Base ()*ImageBase {return &_bcaa .ImageBase };func (_cea *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_aag :=_gabf (uint (factor ));if !IsPowerOf2 (uint (factor )){_aag ++;};_cda :=make ([]int ,_aag );for _bcaf :=range _cda {_cda [_bcaf ]=4;
};_eaa ,_aggf :=_ddg (_cea ,_cda ...);if _aggf !=nil {return nil ,_aggf ;};return _eaa ,nil ;};func _febf (_gcgf _a .Image ,_bfcf Image ,_bcbd _a .Rectangle ){if _ggfb ,_agca :=_gcgf .(SMasker );_agca &&_ggfb .HasAlpha (){_bfcf .(SMasker ).MakeAlpha ();
};_afa (_gcgf ,_bfcf ,_bcbd );};var (_fcdd =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_cfeb =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_fab *Monochrome )AddPadding ()(_fcgf error ){if _bafd :=((_fab .Width *_fab .Height )+7)>>3;
len (_fab .Data )< _bafd {return _f .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_fab .Data ),_bafd );
};_eac :=_fab .Width %8;if _eac ==0{return nil ;};_gca :=_fab .Width /8;_cfad :=_ae .NewReader (_fab .Data );_ebfb :=make ([]byte ,_fab .Height *_fab .BytesPerLine );_fgcc :=_ae .NewWriterMSB (_ebfb );_fgec :=make ([]byte ,_gca );var (_fddb int ;_ddgf uint64 ;
);for _fddb =0;_fddb < _fab .Height ;_fddb ++{if _ ,_fcgf =_cfad .Read (_fgec );_fcgf !=nil {return _fcgf ;};if _ ,_fcgf =_fgcc .Write (_fgec );_fcgf !=nil {return _fcgf ;};if _ddgf ,_fcgf =_cfad .ReadBits (byte (_eac ));_fcgf !=nil {return _fcgf ;};if _fcgf =_fgcc .WriteByte (byte (_ddgf )<<uint (8-_eac ));
_fcgf !=nil {return _fcgf ;};};_fab .Data =_fgcc .Data ();return nil ;};type Histogramer interface{Histogram ()[256]int ;};func (_aaa *Gray4 )Validate ()error {if len (_aaa .Data )!=_aaa .Height *_aaa .BytesPerLine {return ErrInvalidImage ;};return nil ;
};func _ffbf (_faf _g .Gray )_g .NRGBA {return _g .NRGBA {R :_faf .Y ,G :_faf .Y ,B :_faf .Y ,A :0xff}};func (_dfce *Monochrome )getBitAt (_dafe ,_bdge int )bool {_gafe :=_bdge *_dfce .BytesPerLine +(_dafe >>3);_beg :=_dafe &0x07;_caea :=uint (7-_beg );
if _gafe > len (_dfce .Data )-1{return false ;};if (_dfce .Data [_gafe ]>>_caea )&0x01>=1{return true ;};return false ;};func (_dbfcd *NRGBA16 )At (x ,y int )_g .Color {_aceg ,_ :=_dbfcd .ColorAt (x ,y );return _aceg };func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );
case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );
default:return nil ,_f .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func _ddc (_dedg NRGBA ,_eadd CMYK ,_cfa _a .Rectangle ){for _eeg :=0;_eeg < _cfa .Max .X ;_eeg ++{for _aeea :=0;_aeea < _cfa .Max .Y ;_aeea ++{_faaa :=_dedg .NRGBAAt (_eeg ,_aeea );_eadd .SetCMYK (_eeg ,_aeea ,_dcc (_faaa ));};};};func (_acbec *NRGBA32 )Bounds ()_a .Rectangle {return _a .Rectangle {Max :_a .Point {X :_acbec .Width ,Y :_acbec .Height }};
};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_g .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );
case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_f .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_aga *CMYK32 )Bounds ()_a .Rectangle {return _a .Rectangle {Max :_a .Point {X :_aga .Width ,Y :_aga .Height }};};type ColorConverter interface{Convert (_cggg _a .Image )(Image ,error );};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};
func (_aea *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_aea .ImageBase .copy (),ModelThreshold :_aea .ModelThreshold };};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_g .CMYK ,error ){_bef :=4*(y *width +x );if _bef +3>=len (data ){return _g .CMYK {},_f .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_bef ]&0xff;M :=data [_bef +1]&0xff;Y :=data [_bef +2]&0xff;K :=data [_bef +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _g .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_dcbf *Gray4 )SetGray (x ,y int ,g _g .Gray ){if x >=_dcbf .Width ||y >=_dcbf .Height {return ;
};g =_fdcg (g );_dcbf .setGray (x ,y ,g );};func _gafcd (_fgf int ,_cgfb int )int {if _fgf < _cgfb {return _fgf ;};return _cgfb ;};func (_debb *NRGBA64 )Validate ()error {if len (_debb .Data )!=3*2*_debb .Width *_debb .Height {return _d .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_deab *NRGBA16 )setNRGBA (_ebeb ,_dagg ,_geee int ,_gfb _g .NRGBA ){if _ebeb *3%2==0{_deab .Data [_geee ]=(_gfb .R >>4)<<4|(_gfb .G >>4);_deab .Data [_geee +1]=(_gfb .B >>4)<<4|(_deab .Data [_geee +1]&0xf);}else {_deab .Data [_geee ]=(_deab .Data [_geee ]&0xf0)|(_gfb .R >>4);
_deab .Data [_geee +1]=(_gfb .G >>4)<<4|(_gfb .B >>4);};if _deab .Alpha !=nil {_edbec :=_dagg *BytesPerLine (_deab .Width ,4,1);if _edbec < len (_deab .Alpha ){if _ebeb %2==0{_deab .Alpha [_edbec ]=(_gfb .A >>uint (4))<<uint (4)|(_deab .Alpha [_geee ]&0xf);
}else {_deab .Alpha [_edbec ]=(_deab .Alpha [_edbec ]&0xf0)|(_gfb .A >>uint (4));};};};};func (_gcd *Gray2 )Set (x ,y int ,c _g .Color ){if x >=_gcd .Width ||y >=_gcd .Height {return ;};_aded :=Gray2Model .Convert (c ).(_g .Gray );_dfac :=y *_gcd .BytesPerLine ;
_aed :=_dfac +(x >>2);_gcg :=_aded .Y >>6;_gcd .Data [_aed ]=(_gcd .Data [_aed ]&(^(0xc0>>uint (2*((x )&3)))))|(_gcg <<uint (6-2*(x &3)));};func _gfcc (_bcecd uint8 )bool {if _bcecd ==0||_bcecd ==255{return true ;};return false ;};func (_fafc *NRGBA16 )Base ()*ImageBase {return &_fafc .ImageBase };
func (_eddg *Gray8 )Base ()*ImageBase {return &_eddg .ImageBase };func (_fbga *ImageBase )HasAlpha ()bool {if _fbga .Alpha ==nil {return false ;};for _gdc :=range _fbga .Alpha {if _fbga .Alpha [_gdc ]!=0xff{return true ;};};return false ;};func _afa (_aacg _a .Image ,_cdgd Image ,_fefcf _a .Rectangle ){for _edeae :=0;
_edeae < _fefcf .Max .X ;_edeae ++{for _eda :=0;_eda < _fefcf .Max .Y ;_eda ++{_bggf :=_aacg .At (_edeae ,_eda );_cdgd .Set (_edeae ,_eda ,_bggf );};};};func _fge (_aba _g .NRGBA64 )_g .Gray {var _ecd _g .NRGBA64 ;if _aba ==_ecd {return _g .Gray {Y :0xff};
};_abcg ,_acae ,_ced ,_ :=_aba .RGBA ();_ddgd :=(19595*_abcg +38470*_acae +7471*_ced +1<<15)>>24;return _g .Gray {Y :uint8 (_ddgd )};};