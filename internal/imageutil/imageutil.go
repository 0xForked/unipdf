//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_d "encoding/binary";_e "errors";_c "fmt";_df "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_bgf "image";_fb "image/color";_bg "image/draw";_b "math";);func (_agca *NRGBA16 )At (x ,y int )_fb .Color {_caegb ,_ :=_agca .ColorAt (x ,y );return _caegb };func _fage (_dab _fb .Color )_fb .Color {_abec :=_fb .GrayModel .Convert (_dab ).(_fb .Gray );return _aage (_abec );};func (_agfc *NRGBA64 )setNRGBA64 (_aaacf int ,_dedc _fb .NRGBA64 ,_ddgdg int ){_agfc .Data [_aaacf ]=uint8 (_dedc .R >>8);_agfc .Data [_aaacf +1]=uint8 (_dedc .R &0xff);_agfc .Data [_aaacf +2]=uint8 (_dedc .G >>8);_agfc .Data [_aaacf +3]=uint8 (_dedc .G &0xff);_agfc .Data [_aaacf +4]=uint8 (_dedc .B >>8);_agfc .Data [_aaacf +5]=uint8 (_dedc .B &0xff);if _ddgdg +1< len (_agfc .Alpha ){_agfc .Alpha [_ddgdg ]=uint8 (_dedc .A >>8);_agfc .Alpha [_ddgdg +1]=uint8 (_dedc .A &0xff);};};func (_beg *Monochrome )InverseData ()error {return _beg .RasterOperation (0,0,_beg .Width ,_beg .Height ,PixNotDst ,nil ,0,0);};func (_ccccg *NRGBA16 )Base ()*ImageBase {return &_ccccg .ImageBase };func _dggf (_bfge *Monochrome ,_gdgaf ,_bcdd ,_gfda ,_abgcc int ,_deee RasterOperator ,_added *Monochrome ,_bbc ,_gbbbf int )error {if _bfge ==nil {return _e .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _deee ==PixDst {return nil ;};switch _deee {case PixClr ,PixSet ,PixNotDst :_cdegf (_bfge ,_gdgaf ,_bcdd ,_gfda ,_abgcc ,_deee );return nil ;};if _added ==nil {_df .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _e .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _debc :=_gbbbfb (_bfge ,_gdgaf ,_bcdd ,_gfda ,_abgcc ,_deee ,_added ,_bbc ,_gbbbf );_debc !=nil {return _debc ;};return nil ;};func _faaa (_bbf _fb .NRGBA64 )_fb .Gray {var _cbg _fb .NRGBA64 ;if _bbf ==_cbg {return _fb .Gray {Y :0xff};};_bcgg ,_afcf ,_bcd ,_ :=_bbf .RGBA ();_ebffg :=(19595*_bcgg +38470*_afcf +7471*_bcd +1<<15)>>24;return _fb .Gray {Y :uint8 (_ebffg )};};func (_ffgb *Monochrome )Base ()*ImageBase {return &_ffgb .ImageBase };var _ Image =&NRGBA32 {};func (_dbcd *Monochrome )GrayAt (x ,y int )_fb .Gray {_afcdb ,_ :=ColorAtGray1BPC (x ,y ,_dbcd .BytesPerLine ,_dbcd .Data ,_dbcd .Decode );return _afcdb ;};func (_egfg *Gray16 )Base ()*ImageBase {return &_egfg .ImageBase };func _fag (_dde *Monochrome ,_aca int ,_egg []byte )(_fbce *Monochrome ,_cbe error ){const _abe ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";if _dde ==nil {return nil ,_e .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _aca < 1||_aca > 4{return nil ,_e .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _dde .Height <=1{return nil ,_e .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_fbce =_ecc (_dde .Width /2,_dde .Height /2);if _egg ==nil {_egg =_dba ();};_deb :=_aaag (_dde .BytesPerLine ,2*_fbce .BytesPerLine );switch _aca {case 1:_cbe =_fcc (_dde ,_fbce ,_egg ,_deb );case 2:_cbe =_gfa (_dde ,_fbce ,_egg ,_deb );case 3:_cbe =_ccea (_dde ,_fbce ,_egg ,_deb );case 4:_cbe =_bbga (_dde ,_fbce ,_egg ,_deb );};if _cbe !=nil {return nil ,_cbe ;};return _fbce ,nil ;};func IsGrayImgBlackAndWhite (i *_bgf .Gray )bool {return _dfef (i )};func (_cda *ImageBase )setEightPartlyBytes (_gcec ,_eec int ,_egc uint64 )(_ddad error ){var (_cabc byte ;_fcef int ;);for _dgc :=1;_dgc <=_eec ;_dgc ++{_fcef =64-_dgc *8;_cabc =byte (_egc >>uint (_fcef )&0xff);if _ddad =_cda .setByte (_gcec +_dgc -1,_cabc );_ddad !=nil {return _ddad ;};};_bacc :=_cda .BytesPerLine *8-_cda .Width ;if _bacc ==0{return nil ;};_fcef -=8;_cabc =byte (_egc >>uint (_fcef )&0xff)<<uint (_bacc );if _ddad =_cda .setByte (_gcec +_eec ,_cabc );_ddad !=nil {return _ddad ;};return nil ;};func _gecg (_fdb _bgf .Image ,_dee Image ,_egfe _bgf .Rectangle ){for _geg :=0;_geg < _egfe .Max .X ;_geg ++{for _eabe :=0;_eabe < _egfe .Max .Y ;_eabe ++{_dgfb :=_fdb .At (_geg ,_eabe );_dee .Set (_geg ,_eabe ,_dgfb );};};};var _ NRGBA =&NRGBA16 {};var _ _bgf .Image =&Gray8 {};func _agc (_fge *Monochrome ,_ecf ...int )(_fff *Monochrome ,_ccf error ){if _fge ==nil {return nil ,_e .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_ecf )==0{return nil ,_e .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");};_fec :=_dba ();_fff =_fge ;for _ ,_abg :=range _ecf {if _abg <=0{break ;};_fff ,_ccf =_fag (_fff ,_abg ,_fec );if _ccf !=nil {return nil ,_ccf ;};};return _fff ,nil ;};func _fgcb (_cad Gray ,_gbcca nrgba64 ,_dbe _bgf .Rectangle ){for _cde :=0;_cde < _dbe .Max .X ;_cde ++{for _fcad :=0;_fcad < _dbe .Max .Y ;_fcad ++{_fdbd :=_faaa (_gbcca .NRGBA64At (_cde ,_fcad ));_cad .SetGray (_cde ,_fcad ,_fdbd );};};};func _eebg (_fecc _fb .RGBA )_fb .CMYK {_bdef ,_acg ,_gfe ,_gbbb :=_fb .RGBToCMYK (_fecc .R ,_fecc .G ,_fecc .B );return _fb .CMYK {C :_bdef ,M :_acg ,Y :_gfe ,K :_gbbb };};func (_egec *NRGBA64 )ColorModel ()_fb .Model {return _fb .NRGBA64Model };func (_befg *Gray4 )SetGray (x ,y int ,g _fb .Gray ){if x >=_befg .Width ||y >=_befg .Height {return ;};g =_babe (g );_befg .setGray (x ,y ,g );};func (_cec *Monochrome )setBit (_adec ,_bcdb int ){_cec .Data [_adec +(_bcdb >>3)]|=0x80>>uint (_bcdb &7);};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func (_ddfd *Gray2 )GrayAt (x ,y int )_fb .Gray {_fffg ,_ :=ColorAtGray2BPC (x ,y ,_ddfd .BytesPerLine ,_ddfd .Data ,_ddfd .Decode );return _fffg ;};func (_ccec *Gray16 )ColorAt (x ,y int )(_fb .Color ,error ){return ColorAtGray16BPC (x ,y ,_ccec .BytesPerLine ,_ccec .Data ,_ccec .Decode );};func _fgce (_gdebg _bgf .Image ,_gfaec uint8 )*_bgf .Gray {_agge :=_gdebg .Bounds ();_bfff :=_bgf .NewGray (_agge );var (_acba _fb .Color ;_fabed _fb .Gray ;);for _fcgd :=0;_fcgd < _agge .Max .X ;_fcgd ++{for _dbcb :=0;_dbcb < _agge .Max .Y ;_dbcb ++{_acba =_gdebg .At (_fcgd ,_dbcb );_bfff .Set (_fcgd ,_dbcb ,_acba );_fabed =_bfff .GrayAt (_fcgd ,_dbcb );_bfff .SetGray (_fcgd ,_dbcb ,_fb .Gray {Y :_fbeb (_fabed .Y ,_gfaec )});};};return _bfff ;};var _ Image =&Gray2 {};func (_eebc *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_eebc .copy ()}};var _ Gray =&Gray16 {};func _bbgg (_fgfca ,_daee NRGBA ,_aeae _bgf .Rectangle ){for _bgbb :=0;_bgbb < _aeae .Max .X ;_bgbb ++{for _acfd :=0;_acfd < _aeae .Max .Y ;_acfd ++{_daee .SetNRGBA (_bgbb ,_acfd ,_fgfca .NRGBAAt (_bgbb ,_acfd ));};};};func (_cga *Monochrome )ResolveDecode ()error {if len (_cga .Decode )!=2{return nil ;};if _cga .Decode [0]==1&&_cga .Decode [1]==0{if _fbcf :=_cga .InverseData ();_fbcf !=nil {return _fbcf ;};_cga .Decode =nil ;};return nil ;};func _gaac (_ccef _bgf .Image )(Image ,error ){if _accc ,_fea :=_ccef .(*CMYK32 );_fea {return _accc .Copy (),nil ;};_cbf :=_ccef .Bounds ();_efdbe ,_gfb :=NewImage (_cbf .Max .X ,_cbf .Max .Y ,8,4,nil ,nil ,nil );if _gfb !=nil {return nil ,_gfb ;};switch _afdc :=_ccef .(type ){case CMYK :_abeg (_afdc ,_efdbe .(CMYK ),_cbf );case Gray :_gbg (_afdc ,_efdbe .(CMYK ),_cbf );case NRGBA :_fcbg (_afdc ,_efdbe .(CMYK ),_cbf );case RGBA :_fada (_afdc ,_efdbe .(CMYK ),_cbf );default:_gecg (_ccef ,_efdbe ,_cbf );};return _efdbe ,nil ;};func _beaf (_ebbe RGBA ,_gdec NRGBA ,_ccace _bgf .Rectangle ){for _beag :=0;_beag < _ccace .Max .X ;_beag ++{for _acade :=0;_acade < _ccace .Max .Y ;_acade ++{_ccaf :=_ebbe .RGBAAt (_beag ,_acade );_gdec .SetNRGBA (_beag ,_acade ,_aae (_ccaf ));};};};var (MonochromeConverter =ConverterFunc (_fbff );Gray2Converter =ConverterFunc (_ffafe );Gray4Converter =ConverterFunc (_cecf );GrayConverter =ConverterFunc (_afgc );Gray16Converter =ConverterFunc (_dded );NRGBA16Converter =ConverterFunc (_aedb );NRGBAConverter =ConverterFunc (_ffegd );NRGBA64Converter =ConverterFunc (_cbdb );CMYKConverter =ConverterFunc (_gaac ););type CMYK32 struct{ImageBase };type colorConverter struct{_aac func (_fagcf _bgf .Image )(Image ,error );};var _ _bgf .Image =&NRGBA32 {};func _efd ()(_ddg [256]uint32 ){for _gd :=0;_gd < 256;_gd ++{if _gd &0x01!=0{_ddg [_gd ]|=0xf;};if _gd &0x02!=0{_ddg [_gd ]|=0xf0;};if _gd &0x04!=0{_ddg [_gd ]|=0xf00;};if _gd &0x08!=0{_ddg [_gd ]|=0xf000;};if _gd &0x10!=0{_ddg [_gd ]|=0xf0000;};if _gd &0x20!=0{_ddg [_gd ]|=0xf00000;};if _gd &0x40!=0{_ddg [_gd ]|=0xf000000;};if _gd &0x80!=0{_ddg [_gd ]|=0xf0000000;};};return _ddg ;};type CMYK interface{CMYKAt (_eabd ,_gdg int )_fb .CMYK ;SetCMYK (_fbf ,_caba int ,_cdbf _fb .CMYK );};var _ _bgf .Image =&Gray2 {};func (_fgafa *NRGBA32 )setRGBA (_ffafec int ,_cdcdd _fb .NRGBA ){_fcea :=3*_ffafec ;_fgafa .Data [_fcea ]=_cdcdd .R ;_fgafa .Data [_fcea +1]=_cdcdd .G ;_fgafa .Data [_fcea +2]=_cdcdd .B ;if _ffafec < len (_fgafa .Alpha ){_fgafa .Alpha [_ffafec ]=_cdcdd .A ;};};func (_cfbfb *Gray16 )GrayAt (x ,y int )_fb .Gray {_cgcd ,_ :=_cfbfb .ColorAt (x ,y );return _fb .Gray {Y :uint8 (_cgcd .(_fb .Gray16 ).Y >>8)};};func _eed (_cff _fb .NRGBA )_fb .CMYK {_ddb ,_efed ,_dbab ,_ :=_cff .RGBA ();_cgf ,_dgad ,_fecg ,_eeb :=_fb .RGBToCMYK (uint8 (_ddb >>8),uint8 (_efed >>8),uint8 (_dbab >>8));return _fb .CMYK {C :_cgf ,M :_dgad ,Y :_fecg ,K :_eeb };};var _gddd [256]uint8 ;func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func _ecc (_aaf ,_abd int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_aaf ,_abd ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};func _dba ()(_add []byte ){_add =make ([]byte ,256);for _deg :=0;_deg < 256;_deg ++{_edd :=byte (_deg );_add [_edd ]=(_edd &0x01)|((_edd &0x04)>>1)|((_edd &0x10)>>2)|((_edd &0x40)>>3)|((_edd &0x02)<<3)|((_edd &0x08)<<2)|((_edd &0x20)<<1)|(_edd &0x80);};return _add ;};func (_cdg *CMYK32 )Validate ()error {if len (_cdg .Data )!=4*_cdg .Width *_cdg .Height {return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_ffd *Monochrome )AddPadding ()(_defe error ){if _bgg :=((_ffd .Width *_ffd .Height )+7)>>3;len (_ffd .Data )< _bgg {return _c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_ffd .Data ),_bgg );};_badd :=_ffd .Width %8;if _badd ==0{return nil ;};_daea :=_ffd .Width /8;_cdc :=_a .NewReader (_ffd .Data );_ebda :=make ([]byte ,_ffd .Height *_ffd .BytesPerLine );_gdgb :=_a .NewWriterMSB (_ebda );_bdf :=make ([]byte ,_daea );var (_ffa int ;_cdgdd uint64 ;);for _ffa =0;_ffa < _ffd .Height ;_ffa ++{if _ ,_defe =_cdc .Read (_bdf );_defe !=nil {return _defe ;};if _ ,_defe =_gdgb .Write (_bdf );_defe !=nil {return _defe ;};if _cdgdd ,_defe =_cdc .ReadBits (byte (_badd ));_defe !=nil {return _defe ;};if _defe =_gdgb .WriteByte (byte (_cdgdd )<<uint (8-_badd ));_defe !=nil {return _defe ;};};_ffd .Data =_gdgb .Data ();return nil ;};var _ _bgf .Image =&Gray16 {};type ColorConverter interface{Convert (_fbfb _bgf .Image )(Image ,error );};func (_daeg *NRGBA16 )ColorAt (x ,y int )(_fb .Color ,error ){return ColorAtNRGBA16 (x ,y ,_daeg .Width ,_daeg .BytesPerLine ,_daeg .Data ,_daeg .Alpha ,_daeg .Decode );};func (_feca *Gray16 )SetGray (x ,y int ,g _fb .Gray ){_bafe :=(y *_feca .BytesPerLine /2+x )*2;if _bafe +1>=len (_feca .Data ){return ;};_feca .Data [_bafe ]=g .Y ;_feca .Data [_bafe +1]=g .Y ;};func _fcbg (_gag NRGBA ,_aagd CMYK ,_adef _bgf .Rectangle ){for _adcd :=0;_adcd < _adef .Max .X ;_adcd ++{for _aga :=0;_aga < _adef .Max .Y ;_aga ++{_cdd :=_gag .NRGBAAt (_adcd ,_aga );_aagd .SetCMYK (_adcd ,_aga ,_eed (_cdd ));};};};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_fc :=BytesPerLine (width ,8,1);if len (data )< _fc *height {return nil ,nil ;};_af :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_dd ,_eg :=MonochromeConverter .Convert (_af );if _eg !=nil {return nil ,_eg ;};return _dd .Base ().Data ,nil ;};func _gbg (_gce Gray ,_ace CMYK ,_gbbe _bgf .Rectangle ){for _fbbg :=0;_fbbg < _gbbe .Max .X ;_fbbg ++{for _gbbec :=0;_gbbec < _gbbe .Max .Y ;_gbbec ++{_dcb :=_gce .GrayAt (_fbbg ,_gbbec );_ace .SetCMYK (_fbbg ,_gbbec ,_baa (_dcb ));};};};func (_fffa *Gray4 )Bounds ()_bgf .Rectangle {return _bgf .Rectangle {Max :_bgf .Point {X :_fffa .Width ,Y :_fffa .Height }};};func _caf ()(_cdb [256]uint16 ){for _ddd :=0;_ddd < 256;_ddd ++{if _ddd &0x01!=0{_cdb [_ddd ]|=0x3;};if _ddd &0x02!=0{_cdb [_ddd ]|=0xc;};if _ddd &0x04!=0{_cdb [_ddd ]|=0x30;};if _ddd &0x08!=0{_cdb [_ddd ]|=0xc0;};if _ddd &0x10!=0{_cdb [_ddd ]|=0x300;};if _ddd &0x20!=0{_cdb [_ddd ]|=0xc00;};if _ddd &0x40!=0{_cdb [_ddd ]|=0x3000;};if _ddd &0x80!=0{_cdb [_ddd ]|=0xc000;};};return _cdb ;};func _agfg (_acbg *Monochrome ,_cfebg ,_ccgb int ,_cbgf ,_cccc int ,_addg RasterOperator ){var (_acfe int ;_feee byte ;_gagg ,_ffbd int ;_cbee int ;);_bcge :=_cbgf >>3;_gcgc :=_cbgf &7;if _gcgc > 0{_feee =_ecca [_gcgc ];};_acfe =_acbg .BytesPerLine *_ccgb +(_cfebg >>3);switch _addg {case PixClr :for _gagg =0;_gagg < _cccc ;_gagg ++{_cbee =_acfe +_gagg *_acbg .BytesPerLine ;for _ffbd =0;_ffbd < _bcge ;_ffbd ++{_acbg .Data [_cbee ]=0x0;_cbee ++;};if _gcgc > 0{_acbg .Data [_cbee ]=_gffeb (_acbg .Data [_cbee ],0x0,_feee );};};case PixSet :for _gagg =0;_gagg < _cccc ;_gagg ++{_cbee =_acfe +_gagg *_acbg .BytesPerLine ;for _ffbd =0;_ffbd < _bcge ;_ffbd ++{_acbg .Data [_cbee ]=0xff;_cbee ++;};if _gcgc > 0{_acbg .Data [_cbee ]=_gffeb (_acbg .Data [_cbee ],0xff,_feee );};};case PixNotDst :for _gagg =0;_gagg < _cccc ;_gagg ++{_cbee =_acfe +_gagg *_acbg .BytesPerLine ;for _ffbd =0;_ffbd < _bcge ;_ffbd ++{_acbg .Data [_cbee ]=^_acbg .Data [_cbee ];_cbee ++;};if _gcgc > 0{_acbg .Data [_cbee ]=_gffeb (_acbg .Data [_cbee ],^_acbg .Data [_cbee ],_feee );};};};};func _baa (_bda _fb .Gray )_fb .CMYK {return _fb .CMYK {K :0xff-_bda .Y }};func (_cdf *Gray2 )ColorAt (x ,y int )(_fb .Color ,error ){return ColorAtGray2BPC (x ,y ,_cdf .BytesPerLine ,_cdf .Data ,_cdf .Decode );};func _gad (_gafe CMYK ,_dfba NRGBA ,_ceg _bgf .Rectangle ){for _gae :=0;_gae < _ceg .Max .X ;_gae ++{for _cbde :=0;_cbde < _ceg .Max .Y ;_cbde ++{_dfad :=_gafe .CMYKAt (_gae ,_cbde );_dfba .SetNRGBA (_gae ,_cbde ,_fbcb (_dfad ));};};};func (_dbeb *monochromeThresholdConverter )Convert (img _bgf .Image )(Image ,error ){if _cfeba ,_cgbb :=img .(*Monochrome );_cgbb {return _cfeba .Copy (),nil ;};_caeg :=img .Bounds ();_egb ,_bbac :=NewImage (_caeg .Max .X ,_caeg .Max .Y ,1,1,nil ,nil ,nil );if _bbac !=nil {return nil ,_bbac ;};_egb .(*Monochrome ).ModelThreshold =_dbeb .Threshold ;for _fccf :=0;_fccf < _caeg .Max .X ;_fccf ++{for _eebd :=0;_eebd < _caeg .Max .Y ;_eebd ++{_gbga :=img .At (_fccf ,_eebd );_egb .Set (_fccf ,_eebd ,_gbga );};};return _egb ,nil ;};func init (){_bfbg ()};var _ _bgf .Image =&NRGBA16 {};func (_dfccf *Monochrome )setIndexedBit (_cbgb int ){_dfccf .Data [(_cbgb >>3)]|=0x80>>uint (_cbgb &7);};func (_fdcfc *ImageBase )HasAlpha ()bool {if _fdcfc .Alpha ==nil {return false ;};for _bea :=range _fdcfc .Alpha {if _fdcfc .Alpha [_bea ]!=0xff{return true ;};};return false ;};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_bfe :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};if data ==nil {_bfe .Data =make ([]byte ,height *_bfe .BytesPerLine );};return _bfe ;};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func (_fcb *CMYK32 )CMYKAt (x ,y int )_fb .CMYK {_eaf ,_ :=ColorAtCMYK (x ,y ,_fcb .Width ,_fcb .Data ,_fcb .Decode );return _eaf ;};func (_ggab *CMYK32 )SetCMYK (x ,y int ,c _fb .CMYK ){_fagc :=4*(y *_ggab .Width +x );if _fagc +3>=len (_ggab .Data ){return ;};_ggab .Data [_fagc ]=c .C ;_ggab .Data [_fagc +1]=c .M ;_ggab .Data [_fagc +2]=c .Y ;_ggab .Data [_fagc +3]=c .K ;};func (_cfeac *Gray8 )GrayAt (x ,y int )_fb .Gray {_aecb ,_ :=ColorAtGray8BPC (x ,y ,_cfeac .BytesPerLine ,_cfeac .Data ,_cfeac .Decode );return _aecb ;};func _babe (_fgb _fb .Gray )_fb .Gray {_fgb .Y >>=4;_fgb .Y |=_fgb .Y <<4;return _fgb };func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _dggf (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_cfad *ImageBase )copy ()ImageBase {_ebab :=*_cfad ;_ebab .Data =make ([]byte ,len (_cfad .Data ));copy (_ebab .Data ,_cfad .Data );return _ebab ;};func (_cfea *Gray8 )Base ()*ImageBase {return &_cfea .ImageBase };func _cdegf (_cafd *Monochrome ,_dfbb ,_bbee ,_cbebf ,_gcg int ,_cefe RasterOperator ){if _dfbb < 0{_cbebf +=_dfbb ;_dfbb =0;};_fbcc :=_dfbb +_cbebf -_cafd .Width ;if _fbcc > 0{_cbebf -=_fbcc ;};if _bbee < 0{_gcg +=_bbee ;_bbee =0;};_egfac :=_bbee +_gcg -_cafd .Height ;if _egfac > 0{_gcg -=_egfac ;};if _cbebf <=0||_gcg <=0{return ;};if (_dfbb &7)==0{_agfg (_cafd ,_dfbb ,_bbee ,_cbebf ,_gcg ,_cefe );}else {_dfbe (_cafd ,_dfbb ,_bbee ,_cbebf ,_gcg ,_cefe );};};func _faae (_bdcec _bgf .Image ,_eag Image ,_ffbf _bgf .Rectangle ){if _gaae ,_baeg :=_bdcec .(SMasker );_baeg &&_gaae .HasAlpha (){_eag .(SMasker ).MakeAlpha ();};_gecg (_bdcec ,_eag ,_ffbf );};func (_adcf *CMYK32 )At (x ,y int )_fb .Color {_dga ,_ :=_adcf .ColorAt (x ,y );return _dga };func _bcgec (_bbdf _bgf .Image ,_ded int )(_bgf .Rectangle ,bool ,[]byte ){_bceb :=_bbdf .Bounds ();var (_abdf bool ;_fbga []byte ;);switch _geeee :=_bbdf .(type ){case SMasker :_abdf =_geeee .HasAlpha ();case NRGBA ,RGBA ,*_bgf .RGBA64 ,nrgba64 ,*_bgf .NYCbCrA :_fbga =make ([]byte ,_bceb .Max .X *_bceb .Max .Y *_ded );case *_bgf .Paletted :var _caab bool ;for _ ,_agag :=range _geeee .Palette {_bfab ,_dfec ,_daae ,_gdab :=_agag .RGBA ();if _bfab ==0&&_dfec ==0&&_daae ==0&&_gdab !=0{_caab =true ;break ;};};if _caab {_fbga =make ([]byte ,_bceb .Max .X *_bceb .Max .Y *_ded );};};return _bceb ,_abdf ,_fbga ;};func _fbeb (_geefb ,_eae uint8 )uint8 {if _geefb < _eae {return 255;};return 0;};var _ _bgf .Image =&NRGBA64 {};func _aggd (_dcece _fb .NRGBA )_fb .Gray {var _gca _fb .NRGBA ;if _dcece ==_gca {return _fb .Gray {Y :0xff};};_feb ,_ebdg ,_ggg ,_ :=_dcece .RGBA ();_gbab :=(19595*_feb +38470*_ebdg +7471*_ggg +1<<15)>>24;return _fb .Gray {Y :uint8 (_gbab )};};func (_bbecb *Gray4 )ColorModel ()_fb .Model {return Gray4Model };func _gbbbfb (_gbce *Monochrome ,_bgeb ,_dbea int ,_fadd ,_daabf int ,_fgfa RasterOperator ,_begc *Monochrome ,_fgbd ,_feba int )error {var _daga ,_gfbge ,_ffad ,_cagd int ;if _bgeb < 0{_fgbd -=_bgeb ;_fadd +=_bgeb ;_bgeb =0;};if _fgbd < 0{_bgeb -=_fgbd ;_fadd +=_fgbd ;_fgbd =0;};_daga =_bgeb +_fadd -_gbce .Width ;if _daga > 0{_fadd -=_daga ;};_gfbge =_fgbd +_fadd -_begc .Width ;if _gfbge > 0{_fadd -=_gfbge ;};if _dbea < 0{_feba -=_dbea ;_daabf +=_dbea ;_dbea =0;};if _feba < 0{_dbea -=_feba ;_daabf +=_feba ;_feba =0;};_ffad =_dbea +_daabf -_gbce .Height ;if _ffad > 0{_daabf -=_ffad ;};_cagd =_feba +_daabf -_begc .Height ;if _cagd > 0{_daabf -=_cagd ;};if _fadd <=0||_daabf <=0{return nil ;};var _baec error ;switch {case _bgeb &7==0&&_fgbd &7==0:_baec =_cebd (_gbce ,_bgeb ,_dbea ,_fadd ,_daabf ,_fgfa ,_begc ,_fgbd ,_feba );case _bgeb &7==_fgbd &7:_baec =_geadc (_gbce ,_bgeb ,_dbea ,_fadd ,_daabf ,_fgfa ,_begc ,_fgbd ,_feba );default:_baec =_gdda (_gbce ,_bgeb ,_dbea ,_fadd ,_daabf ,_fgfa ,_begc ,_fgbd ,_feba );};if _baec !=nil {return _baec ;};return nil ;};type Gray2 struct{ImageBase };func _dge (_bbeb Gray ,_geca NRGBA ,_fbgg _bgf .Rectangle ){for _aeg :=0;_aeg < _fbgg .Max .X ;_aeg ++{for _fdgb :=0;_fdgb < _fbgg .Max .Y ;_fdgb ++{_bff :=_aggd (_geca .NRGBAAt (_aeg ,_fdgb ));_bbeb .SetGray (_aeg ,_fdgb ,_bff );};};};var _ Image =&Gray4 {};func _cebd (_cdbc *Monochrome ,_cggc ,_gbccb ,_abbg ,_aebg int ,_adfg RasterOperator ,_bgca *Monochrome ,_bfc ,_bgcb int )error {var (_edgb byte ;_afeb int ;_bdc int ;_feag ,_gdfc int ;_geaf ,_dgb int ;);_bbcg :=_abbg >>3;_bbdg :=_abbg &7;if _bbdg > 0{_edgb =_ecca [_bbdg ];};_afeb =_bgca .BytesPerLine *_bgcb +(_bfc >>3);_bdc =_cdbc .BytesPerLine *_gbccb +(_cggc >>3);switch _adfg {case PixSrc :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]=_bgca .Data [_feag ];_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],_bgca .Data [_feag ],_edgb );};};case PixNotSrc :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]=^(_bgca .Data [_feag ]);_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],^_bgca .Data [_feag ],_edgb );};};case PixSrcOrDst :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]|=_bgca .Data [_feag ];_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],_bgca .Data [_feag ]|_cdbc .Data [_gdfc ],_edgb );};};case PixSrcAndDst :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]&=_bgca .Data [_feag ];_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],_bgca .Data [_feag ]&_cdbc .Data [_gdfc ],_edgb );};};case PixSrcXorDst :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]^=_bgca .Data [_feag ];_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],_bgca .Data [_feag ]^_cdbc .Data [_gdfc ],_edgb );};};case PixNotSrcOrDst :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]|=^(_bgca .Data [_feag ]);_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],^(_bgca .Data [_feag ])|_cdbc .Data [_gdfc ],_edgb );};};case PixNotSrcAndDst :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]&=^(_bgca .Data [_feag ]);_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],^(_bgca .Data [_feag ])&_cdbc .Data [_gdfc ],_edgb );};};case PixSrcOrNotDst :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]=_bgca .Data [_feag ]|^(_cdbc .Data [_gdfc ]);_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],_bgca .Data [_feag ]|^(_cdbc .Data [_gdfc ]),_edgb );};};case PixSrcAndNotDst :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]=_bgca .Data [_feag ]&^(_cdbc .Data [_gdfc ]);_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],_bgca .Data [_feag ]&^(_cdbc .Data [_gdfc ]),_edgb );};};case PixNotPixSrcOrDst :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]=^(_bgca .Data [_feag ]|_cdbc .Data [_gdfc ]);_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],^(_bgca .Data [_feag ]|_cdbc .Data [_gdfc ]),_edgb );};};case PixNotPixSrcAndDst :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]=^(_bgca .Data [_feag ]&_cdbc .Data [_gdfc ]);_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],^(_bgca .Data [_feag ]&_cdbc .Data [_gdfc ]),_edgb );};};case PixNotPixSrcXorDst :for _geaf =0;_geaf < _aebg ;_geaf ++{_feag =_afeb +_geaf *_bgca .BytesPerLine ;_gdfc =_bdc +_geaf *_cdbc .BytesPerLine ;for _dgb =0;_dgb < _bbcg ;_dgb ++{_cdbc .Data [_gdfc ]=^(_bgca .Data [_feag ]^_cdbc .Data [_gdfc ]);_gdfc ++;_feag ++;};if _bbdg > 0{_cdbc .Data [_gdfc ]=_gffeb (_cdbc .Data [_gdfc ],^(_bgca .Data [_feag ]^_cdbc .Data [_gdfc ]),_edgb );};};default:_df .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_adfg );return _e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_bbdge *NRGBA64 )NRGBA64At (x ,y int )_fb .NRGBA64 {_gbeb ,_ :=ColorAtNRGBA64 (x ,y ,_bbdge .Width ,_bbdge .Data ,_bbdge .Alpha ,_bbdge .Decode );return _gbeb ;};var _ Image =&Gray8 {};func (_abgg *NRGBA32 )ColorAt (x ,y int )(_fb .Color ,error ){return ColorAtNRGBA32 (x ,y ,_abgg .Width ,_abgg .Data ,_abgg .Alpha ,_abgg .Decode );};func (_ebcf *Gray16 )At (x ,y int )_fb .Color {_bee ,_ :=_ebcf .ColorAt (x ,y );return _bee };type NRGBA interface{NRGBAAt (_ecdfe ,_egadf int )_fb .NRGBA ;SetNRGBA (_beccb ,_fgfaf int ,_ccac _fb .NRGBA );};func _aage (_cebb _fb .Gray )_fb .Gray {_bbbb :=_cebb .Y >>6;_bbbb |=_bbbb <<2;_cebb .Y =_bbbb |_bbbb <<4;return _cebb ;};var _ Image =&NRGBA64 {};func _ffafe (_bag _bgf .Image )(Image ,error ){if _adce ,_fddb :=_bag .(*Gray2 );_fddb {return _adce .Copy (),nil ;};_deadg :=_bag .Bounds ();_ddce ,_adcdd :=NewImage (_deadg .Max .X ,_deadg .Max .Y ,2,1,nil ,nil ,nil );if _adcdd !=nil {return nil ,_adcdd ;};_dcca (_bag ,_ddce ,_deadg );return _ddce ,nil ;};func (_aee *Monochrome )Set (x ,y int ,c _fb .Color ){_beb :=y *_aee .BytesPerLine +x >>3;if _beb > len (_aee .Data )-1{return ;};_cgdg :=_aee .ColorModel ().Convert (c ).(_fb .Gray );_aee .setGray (x ,_cgdg ,_beb );};func (_adgf *NRGBA32 )Bounds ()_bgf .Rectangle {return _bgf .Rectangle {Max :_bgf .Point {X :_adgf .Width ,Y :_adgf .Height }};};func _gbb ()(_ddge [256]uint64 ){for _agf :=0;_agf < 256;_agf ++{if _agf &0x01!=0{_ddge [_agf ]|=0xff;};if _agf &0x02!=0{_ddge [_agf ]|=0xff00;};if _agf &0x04!=0{_ddge [_agf ]|=0xff0000;};if _agf &0x08!=0{_ddge [_agf ]|=0xff000000;};if _agf &0x10!=0{_ddge [_agf ]|=0xff00000000;};if _agf &0x20!=0{_ddge [_agf ]|=0xff0000000000;};if _agf &0x40!=0{_ddge [_agf ]|=0xff000000000000;};if _agf &0x80!=0{_ddge [_agf ]|=0xff00000000000000;};};return _ddge ;};func _fbcb (_agdc _fb .CMYK )_fb .NRGBA {_gddg ,_gdf ,_cgb :=_fb .CMYKToRGB (_agdc .C ,_agdc .M ,_agdc .Y ,_agdc .K );return _fb .NRGBA {R :_gddg ,G :_gdf ,B :_cgb ,A :0xff};};func _gfce (_edda _fb .Color )_fb .Color {_gcac :=_fb .GrayModel .Convert (_edda ).(_fb .Gray );return _babe (_gcac );};var _ Gray =&Gray8 {};func (_daef *ImageBase )GetAlpha ()[]byte {return _daef .Alpha };func (_gfbg colorConverter )Convert (src _bgf .Image )(Image ,error ){return _gfbg ._aac (src )};func GrayHistogram (g Gray )(_adb [256]int ){switch _bdefd :=g .(type ){case Histogramer :return _bdefd .Histogram ();case _bgf .Image :_abcb :=_bdefd .Bounds ();for _bgdc :=0;_bgdc < _abcb .Max .X ;_bgdc ++{for _fgg :=0;_fgg < _abcb .Max .Y ;_fgg ++{_adb [g .GrayAt (_bgdc ,_fgg ).Y ]++;};};return _adb ;default:return [256]int {};};};func (_gaff *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _dggf (_gaff ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};var ErrInvalidImage =_e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");func (_becf *Monochrome )setGrayBit (_bfb ,_bgbg int ){_becf .Data [_bfb ]|=0x80>>uint (_bgbg &7)};func _bdaa (_dfdce CMYK ,_cggf Gray ,_cdbd _bgf .Rectangle ){for _cagcb :=0;_cagcb < _cdbd .Max .X ;_cagcb ++{for _fdce :=0;_fdce < _cdbd .Max .Y ;_fdce ++{_dda :=_ffeg (_dfdce .CMYKAt (_cagcb ,_fdce ));_cggf .SetGray (_cagcb ,_fdce ,_dda );};};};func _ffeg (_afcd _fb .CMYK )_fb .Gray {_adda ,_ccg ,_eabg :=_fb .CMYKToRGB (_afcd .C ,_afcd .M ,_afcd .Y ,_afcd .K );_gfc :=(19595*uint32 (_adda )+38470*uint32 (_ccg )+7471*uint32 (_eabg )+1<<7)>>16;return _fb .Gray {Y :uint8 (_gfc )};};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fb .Gray ,error ){_gead :=y *bytesPerLine +x ;if _gead >=len (data ){return _fb .Gray {},_c .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_defc :=data [_gead ];if len (decode )==2{_defc =uint8 (uint32 (LinearInterpolate (float64 (_defc ),0,255,decode [0],decode [1]))&0xff);};return _fb .Gray {Y :_defc },nil ;};func _cbdb (_decdc _bgf .Image )(Image ,error ){if _ggd ,_fdecg :=_decdc .(*NRGBA64 );_fdecg {return _ggd .Copy (),nil ;};_dcfb ,_cbdba ,_aaeg :=_bcgec (_decdc ,2);_ebbc ,_dgag :=NewImage (_dcfb .Max .X ,_dcfb .Max .Y ,16,3,nil ,_aaeg ,nil );if _dgag !=nil {return nil ,_dgag ;};_faae (_decdc ,_ebbc ,_dcfb );if len (_aaeg )!=0&&!_cbdba {if _fcadf :=_aaea (_aaeg ,_ebbc );_fcadf !=nil {return nil ,_fcadf ;};};return _ebbc ,nil ;};func _geadc (_dgcb *Monochrome ,_gde ,_edbd ,_bbbe ,_gcbc int ,_ebdb RasterOperator ,_abce *Monochrome ,_begb ,_bed int )error {var (_fdcfa bool ;_cceab bool ;_fgdd int ;_caff int ;_geee int ;_ccba bool ;_fdbc byte ;_bcgce int ;_gebe int ;_ddgbf int ;_baddd ,_efda int ;);_bdge :=8-(_gde &7);_fgbc :=_ebfb [_bdge ];_adaa :=_dgcb .BytesPerLine *_edbd +(_gde >>3);_cgcg :=_abce .BytesPerLine *_bed +(_begb >>3);if _bbbe < _bdge {_fdcfa =true ;_fgbc &=_ecca [8-_bdge +_bbbe ];};if !_fdcfa {_fgdd =(_bbbe -_bdge )>>3;if _fgdd > 0{_cceab =true ;_caff =_adaa +1;_geee =_cgcg +1;};};_bcgce =(_gde +_bbbe )&7;if !(_fdcfa ||_bcgce ==0){_ccba =true ;_fdbc =_ecca [_bcgce ];_gebe =_adaa +1+_fgdd ;_ddgbf =_cgcg +1+_fgdd ;};switch _ebdb {case PixSrc :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],_abce .Data [_cgcg ],_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]=_abce .Data [_geee +_efda ];};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],_abce .Data [_ddgbf ],_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixNotSrc :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],^_abce .Data [_cgcg ],_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]=^_abce .Data [_geee +_efda ];};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],^_abce .Data [_ddgbf ],_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixSrcOrDst :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],_abce .Data [_cgcg ]|_dgcb .Data [_adaa ],_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]|=_abce .Data [_geee +_efda ];};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],_abce .Data [_ddgbf ]|_dgcb .Data [_gebe ],_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixSrcAndDst :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],_abce .Data [_cgcg ]&_dgcb .Data [_adaa ],_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]&=_abce .Data [_geee +_efda ];};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],_abce .Data [_ddgbf ]&_dgcb .Data [_gebe ],_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixSrcXorDst :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],_abce .Data [_cgcg ]^_dgcb .Data [_adaa ],_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]^=_abce .Data [_geee +_efda ];};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],_abce .Data [_ddgbf ]^_dgcb .Data [_gebe ],_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixNotSrcOrDst :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],^(_abce .Data [_cgcg ])|_dgcb .Data [_adaa ],_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]|=^(_abce .Data [_geee +_efda ]);};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],^(_abce .Data [_ddgbf ])|_dgcb .Data [_gebe ],_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixNotSrcAndDst :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],^(_abce .Data [_cgcg ])&_dgcb .Data [_adaa ],_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]&=^_abce .Data [_geee +_efda ];};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],^(_abce .Data [_ddgbf ])&_dgcb .Data [_gebe ],_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixSrcOrNotDst :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],_abce .Data [_cgcg ]|^(_dgcb .Data [_adaa ]),_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]=_abce .Data [_geee +_efda ]|^(_dgcb .Data [_caff +_efda ]);};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],_abce .Data [_ddgbf ]|^(_dgcb .Data [_gebe ]),_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixSrcAndNotDst :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],_abce .Data [_cgcg ]&^(_dgcb .Data [_adaa ]),_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]=_abce .Data [_geee +_efda ]&^(_dgcb .Data [_caff +_efda ]);};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],_abce .Data [_ddgbf ]&^(_dgcb .Data [_gebe ]),_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixNotPixSrcOrDst :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],^(_abce .Data [_cgcg ]|_dgcb .Data [_adaa ]),_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]=^(_abce .Data [_geee +_efda ]|_dgcb .Data [_caff +_efda ]);};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],^(_abce .Data [_ddgbf ]|_dgcb .Data [_gebe ]),_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixNotPixSrcAndDst :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],^(_abce .Data [_cgcg ]&_dgcb .Data [_adaa ]),_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]=^(_abce .Data [_geee +_efda ]&_dgcb .Data [_caff +_efda ]);};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],^(_abce .Data [_ddgbf ]&_dgcb .Data [_gebe ]),_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};case PixNotPixSrcXorDst :for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_adaa ]=_gffeb (_dgcb .Data [_adaa ],^(_abce .Data [_cgcg ]^_dgcb .Data [_adaa ]),_fgbc );_adaa +=_dgcb .BytesPerLine ;_cgcg +=_abce .BytesPerLine ;};if _cceab {for _baddd =0;_baddd < _gcbc ;_baddd ++{for _efda =0;_efda < _fgdd ;_efda ++{_dgcb .Data [_caff +_efda ]=^(_abce .Data [_geee +_efda ]^_dgcb .Data [_caff +_efda ]);};_caff +=_dgcb .BytesPerLine ;_geee +=_abce .BytesPerLine ;};};if _ccba {for _baddd =0;_baddd < _gcbc ;_baddd ++{_dgcb .Data [_gebe ]=_gffeb (_dgcb .Data [_gebe ],^(_abce .Data [_ddgbf ]^_dgcb .Data [_gebe ]),_fdbc );_gebe +=_dgcb .BytesPerLine ;_ddgbf +=_abce .BytesPerLine ;};};default:_df .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_ebdb );return _e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};var (_fad =_caf ();_fbe =_efd ();_agg =_gbb (););func (_fadf *Gray8 )Bounds ()_bgf .Rectangle {return _bgf .Rectangle {Max :_bgf .Point {X :_fadf .Width ,Y :_fadf .Height }};};func (_eegcf *NRGBA64 )Validate ()error {if len (_eegcf .Data )!=3*2*_eegcf .Width *_eegcf .Height {return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_agae *Gray4 )GrayAt (x ,y int )_fb .Gray {_afca ,_ :=ColorAtGray4BPC (x ,y ,_agae .BytesPerLine ,_agae .Data ,_agae .Decode );return _afca ;};func (_gegb *Gray2 )Set (x ,y int ,c _fb .Color ){if x >=_gegb .Width ||y >=_gegb .Height {return ;};_dbac :=Gray2Model .Convert (c ).(_fb .Gray );_ffaf :=y *_gegb .BytesPerLine ;_fbfbf :=_ffaf +(x >>2);_dcfc :=_dbac .Y >>6;_gegb .Data [_fbfbf ]=(_gegb .Data [_fbfbf ]&(^(0xc0>>uint (2*((x )&3)))))|(_dcfc <<uint (6-2*(x &3)));};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func (_ffdf *Gray2 )Base ()*ImageBase {return &_ffdf .ImageBase };func (_ebed *ImageBase )setFourBytes (_geae int ,_gcd uint32 )error {if _geae +3> len (_ebed .Data )-1{return _c .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_geae );};_ebed .Data [_geae ]=byte ((_gcd &0xff000000)>>24);_ebed .Data [_geae +1]=byte ((_gcd &0xff0000)>>16);_ebed .Data [_geae +2]=byte ((_gcd &0xff00)>>8);_ebed .Data [_geae +3]=byte (_gcd &0xff);return nil ;};func (_ddbg *NRGBA64 )ColorAt (x ,y int )(_fb .Color ,error ){return ColorAtNRGBA64 (x ,y ,_ddbg .Width ,_ddbg .Data ,_ddbg .Alpha ,_ddbg .Decode );};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_fb .NRGBA64 ,error ){_aeggb :=(y *width +x )*2;_adcdc :=_aeggb *3;if _adcdc +5>=len (data ){return _fb .NRGBA64 {},_c .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};const _bgdg =0xffff;_efa :=uint16 (_bgdg );if alpha !=nil &&len (alpha )> _aeggb +1{_efa =uint16 (alpha [_aeggb ])<<8|uint16 (alpha [_aeggb +1]);};_bbdba :=uint16 (data [_adcdc ])<<8|uint16 (data [_adcdc +1]);_gecb :=uint16 (data [_adcdc +2])<<8|uint16 (data [_adcdc +3]);_fgfc :=uint16 (data [_adcdc +4])<<8|uint16 (data [_adcdc +5]);if len (decode )==6{_bbdba =uint16 (uint64 (LinearInterpolate (float64 (_bbdba ),0,65535,decode [0],decode [1]))&_bgdg );_gecb =uint16 (uint64 (LinearInterpolate (float64 (_gecb ),0,65535,decode [2],decode [3]))&_bgdg );_fgfc =uint16 (uint64 (LinearInterpolate (float64 (_fgfc ),0,65535,decode [4],decode [5]))&_bgdg );};return _fb .NRGBA64 {R :_bbdba ,G :_gecb ,B :_fgfc ,A :_efa },nil ;};func (_gge *Gray4 )Base ()*ImageBase {return &_gge .ImageBase };var _ Image =&CMYK32 {};var _ _bgf .Image =&Monochrome {};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_fb .NRGBA ,error ){_aged :=y *bytesPerLine +x *3/2;if _aged +1>=len (data ){return _fb .NRGBA {},_gdeb (x ,y );};const (_bafg =0xf;_agcc =uint8 (0xff););_agbg :=_agcc ;if alpha !=nil {_fcebc :=y *BytesPerLine (width ,4,1);if _fcebc < len (alpha ){if x %2==0{_agbg =(alpha [_fcebc ]>>uint (4))&_bafg ;}else {_agbg =alpha [_fcebc ]&_bafg ;};_agbg |=_agbg <<4;};};var _cbed ,_abcgb ,_ffcf uint8 ;if x *3%2==0{_cbed =(data [_aged ]>>uint (4))&_bafg ;_abcgb =data [_aged ]&_bafg ;_ffcf =(data [_aged +1]>>uint (4))&_bafg ;}else {_cbed =data [_aged ]&_bafg ;_abcgb =(data [_aged +1]>>uint (4))&_bafg ;_ffcf =data [_aged +1]&_bafg ;};if len (decode )==6{_cbed =uint8 (uint32 (LinearInterpolate (float64 (_cbed ),0,15,decode [0],decode [1]))&0xf);_abcgb =uint8 (uint32 (LinearInterpolate (float64 (_abcgb ),0,15,decode [2],decode [3]))&0xf);_ffcf =uint8 (uint32 (LinearInterpolate (float64 (_ffcf ),0,15,decode [4],decode [5]))&0xf);};return _fb .NRGBA {R :(_cbed <<4)|(_cbed &0xf),G :(_abcgb <<4)|(_abcgb &0xf),B :(_ffcf <<4)|(_ffcf &0xf),A :_agbg },nil ;};func (_afg *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_afg .copy ()}};func InDelta (expected ,current ,delta float64 )bool {_ffb :=expected -current ;if _ffb <=-delta ||_ffb >=delta {return false ;};return true ;};func (_bga *NRGBA16 )NRGBAAt (x ,y int )_fb .NRGBA {_abcg ,_ :=ColorAtNRGBA16 (x ,y ,_bga .Width ,_bga .BytesPerLine ,_bga .Data ,_bga .Alpha ,_bga .Decode );return _abcg ;};func (_bace *Monochrome )getBit (_eead ,_bffa int )uint8 {return _bace .Data [_eead +(_bffa >>3)]>>uint (7-(_bffa &7))&1;};func (_fdbe *NRGBA32 )At (x ,y int )_fb .Color {_fdgf ,_ :=_fdbe .ColorAt (x ,y );return _fdgf };func (_gfga *ImageBase )setTwoBytes (_gfcee int ,_aegf uint16 )error {if _gfcee +1> len (_gfga .Data )-1{return _e .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_gfga .Data [_gfcee ]=byte ((_aegf &0xff00)>>8);_gfga .Data [_gfcee +1]=byte (_aegf &0xff);return nil ;};func _fada (_abf RGBA ,_dea CMYK ,_bfa _bgf .Rectangle ){for _cfbf :=0;_cfbf < _bfa .Max .X ;_cfbf ++{for _aafg :=0;_aafg < _bfa .Max .Y ;_aafg ++{_ffc :=_abf .RGBAAt (_cfbf ,_aafg );_dea .SetCMYK (_cfbf ,_aafg ,_eebg (_ffc ));};};};func _eafd (_daab _fb .Gray ,_dcfd monochromeModel )_fb .Gray {if _daab .Y > uint8 (_dcfd ){return _fb .Gray {Y :_b .MaxUint8 };};return _fb .Gray {};};var _ Image =&Gray16 {};func (_cdde *ImageBase )MakeAlpha (){_cdde .newAlpha ()};func (_aeb *Monochrome )Validate ()error {if len (_aeb .Data )!=_aeb .Height *_aeb .BytesPerLine {return ErrInvalidImage ;};return nil ;};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_fb .CMYK ,error ){_ebff :=4*(y *width +x );if _ebff +3>=len (data ){return _fb .CMYK {},_c .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};C :=data [_ebff ]&0xff;M :=data [_ebff +1]&0xff;Y :=data [_ebff +2]&0xff;K :=data [_ebff +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _fb .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_fcdf *Gray8 )Validate ()error {if len (_fcdf .Data )!=_fcdf .Height *_fcdf .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_ccbe monochromeModel )Convert (c _fb .Color )_fb .Color {_eggc :=_fb .GrayModel .Convert (c ).(_fb .Gray );return _eafd (_eggc ,_ccbe );};func (_dead *Monochrome )ColorModel ()_fb .Model {return MonochromeModel (_dead .ModelThreshold )};func (_fdab *Gray2 )ColorModel ()_fb .Model {return Gray2Model };func _agd (_gga ,_ggf *Monochrome )(_bcb error ){_ba :=_ggf .BytesPerLine ;_bb :=_gga .BytesPerLine ;var _dc ,_dae ,_gb ,_ef ,_fa int ;for _gb =0;_gb < _ggf .Height ;_gb ++{_dc =_gb *_ba ;_dae =8*_gb *_bb ;for _ef =0;_ef < _ba ;_ef ++{if _bcb =_gga .setEightBytes (_dae +_ef *8,_agg [_ggf .Data [_dc +_ef ]]);_bcb !=nil {return _bcb ;};};for _fa =1;_fa < 8;_fa ++{for _ef =0;_ef < _bb ;_ef ++{if _bcb =_gga .setByte (_dae +_fa *_bb +_ef ,_gga .Data [_dae +_ef ]);_bcb !=nil {return _bcb ;};};};};return nil ;};func _ffegd (_cddec _bgf .Image )(Image ,error ){if _aaca ,_ebfg :=_cddec .(*NRGBA32 );_ebfg {return _aaca .Copy (),nil ;};_aaac ,_gcecd ,_ffada :=_bcgec (_cddec ,1);_dacb ,_aeabb :=NewImage (_aaac .Max .X ,_aaac .Max .Y ,8,3,nil ,_ffada ,nil );if _aeabb !=nil {return nil ,_aeabb ;};_daebe (_cddec ,_dacb ,_aaac );if len (_ffada )!=0&&!_gcecd {if _dcgd :=_aaea (_ffada ,_dacb );_dcgd !=nil {return nil ,_dcgd ;};};return _dacb ,nil ;};type Gray8 struct{ImageBase };func (_dfff *Monochrome )getBitAt (_bcggg ,_acf int )bool {_dbga :=_acf *_dfff .BytesPerLine +(_bcggg >>3);_aaed :=_bcggg &0x07;_ebdc :=uint (7-_aaed );if _dbga > len (_dfff .Data )-1{return false ;};if (_dfff .Data [_dbga ]>>_ebdc )&0x01>=1{return true ;};return false ;};func _aae (_cfg _fb .RGBA )_fb .NRGBA {switch _cfg .A {case 0xff:return _fb .NRGBA {R :_cfg .R ,G :_cfg .G ,B :_cfg .B ,A :0xff};case 0x00:return _fb .NRGBA {};default:_geb ,_fgd ,_dcf ,_ceb :=_cfg .RGBA ();_geb =(_geb *0xffff)/_ceb ;_fgd =(_fgd *0xffff)/_ceb ;_dcf =(_dcf *0xffff)/_ceb ;return _fb .NRGBA {R :uint8 (_geb >>8),G :uint8 (_fgd >>8),B :uint8 (_dcf >>8),A :uint8 (_ceb >>8)};};};func (_fabe *NRGBA64 )SetNRGBA64 (x ,y int ,c _fb .NRGBA64 ){_dcgeb :=(y *_fabe .Width +x )*2;_fccfc :=_dcgeb *3;if _fccfc +5>=len (_fabe .Data ){return ;};_fabe .setNRGBA64 (_fccfc ,c ,_dcgeb );};func (_egd *Gray4 )At (x ,y int )_fb .Color {_gfd ,_ :=_egd .ColorAt (x ,y );return _gfd };var _ _bgf .Image =&Gray4 {};func (_fdec *ImageBase )getByte (_fdee int )(byte ,error ){if _fdee > len (_fdec .Data )-1||_fdee < 0{return 0,_c .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_fdee );};return _fdec .Data [_fdee ],nil ;};func (_cgce *NRGBA16 )Validate ()error {if len (_cgce .Data )!=3*_cgce .Width *_cgce .Height /2{return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_deca *Monochrome )At (x ,y int )_fb .Color {_ffgf ,_ :=_deca .ColorAt (x ,y );return _ffgf };func (_dca *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_dca .ImageBase .copy (),ModelThreshold :_dca .ModelThreshold };};type Histogramer interface{Histogram ()[256]int ;};func (_bgfg *NRGBA32 )Validate ()error {if len (_bgfg .Data )!=3*_bgfg .Width *_bgfg .Height {return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_dcaf *ImageBase )Pix ()[]byte {return _dcaf .Data };func (_ced *Gray4 )Set (x ,y int ,c _fb .Color ){if x >=_ced .Width ||y >=_ced .Height {return ;};_bfdd :=Gray4Model .Convert (c ).(_fb .Gray );_ced .setGray (x ,y ,_bfdd );};func (_efde *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_efde .copy ()}};func (_bdbf *NRGBA32 )ColorModel ()_fb .Model {return _fb .NRGBAModel };func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_fb .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_c .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );};};func (_faec *ImageBase )newAlpha (){_egfge :=BytesPerLine (_faec .Width ,_faec .BitsPerComponent ,1);_faec .Alpha =make ([]byte ,_faec .Height *_egfge );};type NRGBA16 struct{ImageBase };func (_ccfb *CMYK32 )ColorModel ()_fb .Model {return _fb .CMYKModel };func (_eafa *Gray2 )Histogram ()(_gbdg [256]int ){for _deeb :=0;_deeb < _eafa .Width ;_deeb ++{for _dfcce :=0;_dfcce < _eafa .Height ;_dfcce ++{_gbdg [_eafa .GrayAt (_deeb ,_dfcce ).Y ]++;};};return _gbdg ;};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fb .Gray16 ,error ){_bbfb :=(y *bytesPerLine /2+x )*2;if _bbfb +1>=len (data ){return _fb .Gray16 {},_c .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_acac :=uint16 (data [_bbfb ])<<8|uint16 (data [_bbfb +1]);if len (decode )==2{_acac =uint16 (uint64 (LinearInterpolate (float64 (_acac ),0,65535,decode [0],decode [1])));};return _fb .Gray16 {Y :_acac },nil ;};func (_gedf *NRGBA32 )Set (x ,y int ,c _fb .Color ){_abac :=y *_gedf .Width +x ;_aadge :=3*_abac ;if _aadge +2>=len (_gedf .Data ){return ;};_fdae :=_fb .NRGBAModel .Convert (c ).(_fb .NRGBA );_gedf .setRGBA (_abac ,_fdae );};func _ddga (_dfdc _fb .NRGBA )_fb .Gray {_bef ,_dcec ,_agb ,_ :=_dfdc .RGBA ();_gage :=(19595*_bef +38470*_dcec +7471*_agb +1<<15)>>24;return _fb .Gray {Y :uint8 (_gage )};};func _eff (_gbgc _fb .RGBA )_fb .Gray {_cagc :=(19595*uint32 (_gbgc .R )+38470*uint32 (_gbgc .G )+7471*uint32 (_gbgc .B )+1<<7)>>16;return _fb .Gray {Y :uint8 (_cagc )};};func (_ccab *Gray4 )Histogram ()(_agdg [256]int ){for _cbbd :=0;_cbbd < _ccab .Width ;_cbbd ++{for _dgd :=0;_dgd < _ccab .Height ;_dgd ++{_agdg [_ccab .GrayAt (_cbbd ,_dgd ).Y ]++;};};return _agdg ;};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_fgba :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );var _abfa Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_abfa =&Monochrome {ImageBase :_fgba ,ModelThreshold :0x0f};case 2:_abfa =&Gray2 {ImageBase :_fgba };case 4:_abfa =&Gray4 {ImageBase :_fgba };case 8:_abfa =&Gray8 {ImageBase :_fgba };case 16:_abfa =&Gray16 {ImageBase :_fgba };};case 3:switch bitsPerComponent {case 4:_abfa =&NRGBA16 {ImageBase :_fgba };case 8:_abfa =&NRGBA32 {ImageBase :_fgba };case 16:_abfa =&NRGBA64 {ImageBase :_fgba };};case 4:_abfa =&CMYK32 {ImageBase :_fgba };};if _abfa ==nil {return nil ,ErrInvalidImage ;};return _abfa ,nil ;};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_fb .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_c .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );};};type NRGBA32 struct{ImageBase };func _dbgg (_fgaf NRGBA ,_cdgf Gray ,_gdge _bgf .Rectangle ){for _aadg :=0;_aadg < _gdge .Max .X ;_aadg ++{for _edb :=0;_edb < _gdge .Max .Y ;_edb ++{_fcga :=_ddga (_fgaf .NRGBAAt (_aadg ,_edb ));_cdgf .SetGray (_aadg ,_edb ,_fcga );};};};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fb .Gray ,error ){_bbbf :=y *bytesPerLine +x >>3;if _bbbf >=len (data ){return _fb .Gray {},_c .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_efede :=data [_bbbf ]>>uint (7-(x &7))&1;if len (decode )==2{_efede =uint8 (LinearInterpolate (float64 (_efede ),0.0,1.0,decode [0],decode [1]))&1;};return _fb .Gray {Y :_efede *255},nil ;};const (_geec shift =iota ;_ebbg ;);func (_bdgb *Gray4 )setGray (_ddcf int ,_fgfb int ,_egba _fb .Gray ){_egfa :=_fgfb *_bdgb .BytesPerLine ;_ffea :=_egfa +(_ddcf >>1);if _ffea >=len (_bdgb .Data ){return ;};_abcf :=_egba .Y >>4;_bdgb .Data [_ffea ]=(_bdgb .Data [_ffea ]&(^(0xf0>>uint (4*(_ddcf &1)))))|(_abcf <<uint (4-4*(_ddcf &1)));};func _eca (_ad *Monochrome ,_efe ,_ebd int )(*Monochrome ,error ){if _ad ==nil {return nil ,_e .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _efe <=0||_ebd <=0{return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _efe ==_ebd {if _efe ==1{return _ad .copy (),nil ;};if _efe ==2||_efe ==4||_efe ==8{_bcc ,_aaba :=_da (_ad ,_efe );if _aaba !=nil {return nil ,_aaba ;};return _bcc ,nil ;};};_ead :=_efe *_ad .Width ;_faa :=_ebd *_ad .Height ;_dfd :=_ecc (_ead ,_faa );_daa :=_dfd .BytesPerLine ;var (_cg ,_fce ,_db ,_dgf ,_dbf int ;_eeg byte ;_ade error ;);for _fce =0;_fce < _ad .Height ;_fce ++{_cg =_ebd *_fce *_daa ;for _db =0;_db < _ad .Width ;_db ++{if _gc :=_ad .getBitAt (_db ,_fce );_gc {_dbf =_efe *_db ;for _dgf =0;_dgf < _efe ;_dgf ++{_dfd .setIndexedBit (_cg *8+_dbf +_dgf );};};};for _dgf =1;_dgf < _ebd ;_dgf ++{_ca :=_cg +_dgf *_daa ;for _cb :=0;_cb < _daa ;_cb ++{if _eeg ,_ade =_dfd .getByte (_cg +_cb );_ade !=nil {return nil ,_ade ;};if _ade =_dfd .setByte (_ca +_cb ,_eeg );_ade !=nil {return nil ,_ade ;};};};};return _dfd ,nil ;};func (_edc *Gray16 )Validate ()error {if len (_edc .Data )!=_edc .Height *_edc .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_dbb *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_dbb .copy ()}};func (_cdcd *Gray8 )At (x ,y int )_fb .Color {_dbef ,_ :=_cdcd .ColorAt (x ,y );return _dbef };func _fcc (_dcd ,_gec *Monochrome ,_gac []byte ,_dfg int )(_gbe error ){var (_dce ,_efdb ,_cfd ,_afd ,_dbc ,_cgd ,_bbe ,_gecd int ;_cfdc ,_fga uint32 ;_eaa ,_gecc byte ;_caa uint16 ;);_cbeb :=make ([]byte ,4);_afe :=make ([]byte ,4);for _cfd =0;_cfd < _dcd .Height -1;_cfd ,_afd =_cfd +2,_afd +1{_dce =_cfd *_dcd .BytesPerLine ;_efdb =_afd *_gec .BytesPerLine ;for _dbc ,_cgd =0,0;_dbc < _dfg ;_dbc ,_cgd =_dbc +4,_cgd +1{for _bbe =0;_bbe < 4;_bbe ++{_gecd =_dce +_dbc +_bbe ;if _gecd <=len (_dcd .Data )-1&&_gecd < _dce +_dcd .BytesPerLine {_cbeb [_bbe ]=_dcd .Data [_gecd ];}else {_cbeb [_bbe ]=0x00;};_gecd =_dce +_dcd .BytesPerLine +_dbc +_bbe ;if _gecd <=len (_dcd .Data )-1&&_gecd < _dce +(2*_dcd .BytesPerLine ){_afe [_bbe ]=_dcd .Data [_gecd ];}else {_afe [_bbe ]=0x00;};};_cfdc =_d .BigEndian .Uint32 (_cbeb );_fga =_d .BigEndian .Uint32 (_afe );_fga |=_cfdc ;_fga |=_fga <<1;_fga &=0xaaaaaaaa;_cfdc =_fga |(_fga <<7);_eaa =byte (_cfdc >>24);_gecc =byte ((_cfdc >>8)&0xff);_gecd =_efdb +_cgd ;if _gecd +1==len (_gec .Data )-1||_gecd +1>=_efdb +_gec .BytesPerLine {_gec .Data [_gecd ]=_gac [_eaa ];}else {_caa =(uint16 (_gac [_eaa ])<<8)|uint16 (_gac [_gecc ]);if _gbe =_gec .setTwoBytes (_gecd ,_caa );_gbe !=nil {return _c .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gecd );};_cgd ++;};};};return nil ;};func ImgToGray (i _bgf .Image )*_bgf .Gray {if _fgae ,_fefc :=i .(*_bgf .Gray );_fefc {return _fgae ;};_gaeb :=i .Bounds ();_gfcd :=_bgf .NewGray (_gaeb );for _gef :=0;_gef < _gaeb .Max .X ;_gef ++{for _eabdd :=0;_eabdd < _gaeb .Max .Y ;_eabdd ++{_abeaa :=i .At (_gef ,_eabdd );_gfcd .Set (_gef ,_eabdd ,_abeaa );};};return _gfcd ;};func _babd (_gcaf *_bgf .Gray ,_aaee uint8 )*_bgf .Gray {_daeef :=_gcaf .Bounds ();_eebgg :=_bgf .NewGray (_daeef );for _bebc :=0;_bebc < _daeef .Dx ();_bebc ++{for _dceg :=0;_dceg < _daeef .Dy ();_dceg ++{_bbdc :=_gcaf .GrayAt (_bebc ,_dceg );_eebgg .SetGray (_bebc ,_dceg ,_fb .Gray {Y :_fbeb (_bbdc .Y ,_aaee )});};};return _eebgg ;};var _ Image =&Monochrome {};var _ Image =&NRGBA16 {};func (_bebg *Gray2 )SetGray (x ,y int ,gray _fb .Gray ){_ebdd :=_aage (gray );_ecdf :=y *_bebg .BytesPerLine ;_bbgc :=_ecdf +(x >>2);if _bbgc >=len (_bebg .Data ){return ;};_eee :=_ebdd .Y >>6;_bebg .Data [_bbgc ]=(_bebg .Data [_bbgc ]&(^(0xc0>>uint (2*((x )&3)))))|(_eee <<uint (6-2*(x &3)));};func (_ebe *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_e .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_fceb :=_ecc (width ,height );_ffce :=make ([]int ,height );_eafg :=make ([]int ,width );_cfbc :=float64 (_ebe .Width )/float64 (width );_dace :=float64 (_ebe .Height )/float64 (height );for _cdeg :=0;_cdeg < height ;_cdeg ++{_ffce [_cdeg ]=int (_b .Min (_dace *float64 (_cdeg )+0.5,float64 (_ebe .Height -1)));};for _adf :=0;_adf < width ;_adf ++{_eafg [_adf ]=int (_b .Min (_cfbc *float64 (_adf )+0.5,float64 (_ebe .Width -1)));};_acd :=-1;_gbde :=byte (0);for _gea :=0;_gea < height ;_gea ++{_abc :=_ffce [_gea ]*_ebe .BytesPerLine ;_fgca :=_gea *_fceb .BytesPerLine ;for _affc :=0;_affc < width ;_affc ++{_gebc :=_eafg [_affc ];if _gebc !=_acd {_gbde =_ebe .getBit (_abc ,_gebc );if _gbde !=0{_fceb .setBit (_fgca ,_affc );};_acd =_gebc ;}else {if _gbde !=0{_fceb .setBit (_fgca ,_affc );};};};};return _fceb ,nil ;};func (_fgff *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );};return _da (_fgff ,factor );};func _gffeb (_agcd ,_bcdf ,_dbabb byte )byte {return (_agcd &^(_dbabb ))|(_bcdf &_dbabb )};type shift int ;type NRGBA64 struct{ImageBase };var _ Gray =&Gray2 {};func (_dffd *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_dffd .copy ()}};func (_gffc *ImageBase )setEightBytes (_gcb int ,_eced uint64 )error {_cgbd :=_gffc .BytesPerLine -(_gcb %_gffc .BytesPerLine );if _gffc .BytesPerLine !=_gffc .Width >>3{_cgbd --;};if _cgbd >=8{return _gffc .setEightFullBytes (_gcb ,_eced );};return _gffc .setEightPartlyBytes (_gcb ,_cgbd ,_eced );};func (_cece *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_cece .copy ()}};func (_eccg *Monochrome )setGray (_eegc int ,_cbbg _fb .Gray ,_bfd int ){if _cbbg .Y ==0{_eccg .clearBit (_bfd ,_eegc );}else {_eccg .setGrayBit (_bfd ,_eegc );};};func _cdba (_ebde uint )uint {var _cfda uint ;for _ebde !=0{_ebde >>=1;_cfda ++;};return _cfda -1;};func (_cada *NRGBA32 )SetNRGBA (x ,y int ,c _fb .NRGBA ){_efgg :=y *_cada .Width +x ;_dcfce :=3*_efgg ;if _dcfce +2>=len (_cada .Data ){return ;};_cada .setRGBA (_efgg ,c );};func (_dggg *NRGBA64 )Base ()*ImageBase {return &_dggg .ImageBase };func _bcg (_bac ,_bcf int ,_ga []byte )*Monochrome {_be :=_ecc (_bac ,_bcf );_be .Data =_ga ;return _be ;};type Gray interface{GrayAt (_eadg ,_gfbgc int )_fb .Gray ;SetGray (_bdba ,_fbdf int ,_fgf _fb .Gray );};func _gggd (_beed *_bgf .NYCbCrA ,_ggee NRGBA ,_fefe _bgf .Rectangle ){for _ccd :=0;_ccd < _fefe .Max .X ;_ccd ++{for _agab :=0;_agab < _fefe .Max .Y ;_agab ++{_ffbg :=_beed .NYCbCrAAt (_ccd ,_agab );_ggee .SetNRGBA (_ccd ,_agab ,_dafg (_ffbg ));};};};func (_eeac *Gray8 )Set (x ,y int ,c _fb .Color ){_cdgb :=y *_eeac .BytesPerLine +x ;if _cdgb > len (_eeac .Data )-1{return ;};_gebf :=_fb .GrayModel .Convert (c );_eeac .Data [_cdgb ]=_gebf .(_fb .Gray ).Y ;};func (_bfbga *NRGBA16 )ColorModel ()_fb .Model {return NRGBA16Model };func _aea (_gda _fb .Gray )_fb .NRGBA {return _fb .NRGBA {R :_gda .Y ,G :_gda .Y ,B :_gda .Y ,A :0xff}};type Image interface{_bg .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_fffgb ,_dbbd int )(_fb .Color ,error );Validate ()error ;};func (_eaac *Gray4 )ColorAt (x ,y int )(_fb .Color ,error ){return ColorAtGray4BPC (x ,y ,_eaac .BytesPerLine ,_eaac .Data ,_eaac .Decode );};func (_bcca *Gray4 )Validate ()error {if len (_bcca .Data )!=_bcca .Height *_bcca .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _da (_g *Monochrome ,_fca int )(*Monochrome ,error ){if _g ==nil {return nil ,_e .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fca ==1{return _g .copy (),nil ;};if !IsPowerOf2 (uint (_fca )){return nil ,_c .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_fca );};_dac :=_afb (_fca );return _bc (_g ,_fca ,_dac );};func (_cgcc *NRGBA16 )Set (x ,y int ,c _fb .Color ){_dfgf :=y *_cgcc .BytesPerLine +x *3/2;if _dfgf +1>=len (_cgcc .Data ){return ;};_cfef :=NRGBA16Model .Convert (c ).(_fb .NRGBA );_cgcc .setNRGBA (x ,y ,_dfgf ,_cfef );};func (_dagf *NRGBA16 )SetNRGBA (x ,y int ,c _fb .NRGBA ){_dfe :=y *_dagf .BytesPerLine +x *3/2;if _dfe +1>=len (_dagf .Data ){return ;};c =_ebag (c );_dagf .setNRGBA (x ,y ,_dfe ,c );};func _aaea (_baag []byte ,_fbfc Image )error {_bdbg :=true ;for _fbgb :=0;_fbgb < len (_baag );_fbgb ++{if _baag [_fbgb ]!=0xff{_bdbg =false ;break ;};};if _bdbg {switch _egeb :=_fbfc .(type ){case *NRGBA32 :_egeb .Alpha =nil ;case *NRGBA64 :_egeb .Alpha =nil ;default:return _c .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_fbfc );};};return nil ;};type nrgba64 interface{NRGBA64At (_aace ,_ffeae int )_fb .NRGBA64 ;SetNRGBA64 (_bcdg ,_efb int ,_gceb _fb .NRGBA64 );};func _gdda (_deac *Monochrome ,_acec ,_bgde ,_cdaa ,_febe int ,_dffc RasterOperator ,_faeb *Monochrome ,_gfbb ,_cfag int )error {var (_eac bool ;_dcge bool ;_cge byte ;_fcee int ;_efce int ;_cbgd int ;_bdce int ;_bdd bool ;_cadf int ;_eggab int ;_bgcba int ;_fgbdd bool ;_ecag byte ;_afed int ;_fadb int ;_fdba int ;_befa byte ;_eeeg int ;_fbdee int ;_febeb uint ;_fdbb uint ;_badb byte ;_beccf shift ;_dgba bool ;_egdc bool ;_fede ,_bdfc int ;);if _gfbb &7!=0{_fbdee =8-(_gfbb &7);};if _acec &7!=0{_efce =8-(_acec &7);};if _fbdee ==0&&_efce ==0{_badb =_ebfb [0];}else {if _efce > _fbdee {_febeb =uint (_efce -_fbdee );}else {_febeb =uint (8-(_fbdee -_efce ));};_fdbb =8-_febeb ;_badb =_ebfb [_febeb ];};if (_acec &7)!=0{_eac =true ;_fcee =8-(_acec &7);_cge =_ebfb [_fcee ];_cbgd =_deac .BytesPerLine *_bgde +(_acec >>3);_bdce =_faeb .BytesPerLine *_cfag +(_gfbb >>3);_eeeg =8-(_gfbb &7);if _fcee > _eeeg {_beccf =_geec ;if _cdaa >=_fbdee {_dgba =true ;};}else {_beccf =_ebbg ;};};if _cdaa < _fcee {_dcge =true ;_cge &=_ecca [8-_fcee +_cdaa ];};if !_dcge {_cadf =(_cdaa -_fcee )>>3;if _cadf !=0{_bdd =true ;_eggab =_deac .BytesPerLine *_bgde +((_acec +_efce )>>3);_bgcba =_faeb .BytesPerLine *_cfag +((_gfbb +_efce )>>3);};};_afed =(_acec +_cdaa )&7;if !(_dcge ||_afed ==0){_fgbdd =true ;_ecag =_ecca [_afed ];_fadb =_deac .BytesPerLine *_bgde +((_acec +_efce )>>3)+_cadf ;_fdba =_faeb .BytesPerLine *_cfag +((_gfbb +_efce )>>3)+_cadf ;if _afed > int (_fdbb ){_egdc =true ;};};switch _dffc {case PixSrc :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],_befa ,_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]=_befa ;};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],_befa ,_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixNotSrc :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],^_befa ,_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]=^_befa ;};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],^_befa ,_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixSrcOrDst :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],_befa |_deac .Data [_cbgd ],_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]|=_befa ;};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],_befa |_deac .Data [_fadb ],_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixSrcAndDst :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],_befa &_deac .Data [_cbgd ],_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]&=_befa ;};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],_befa &_deac .Data [_fadb ],_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixSrcXorDst :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],_befa ^_deac .Data [_cbgd ],_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]^=_befa ;};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],_befa ^_deac .Data [_fadb ],_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixNotSrcOrDst :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],^_befa |_deac .Data [_cbgd ],_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]|=^_befa ;};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],^_befa |_deac .Data [_fadb ],_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixNotSrcAndDst :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],^_befa &_deac .Data [_cbgd ],_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]&=^_befa ;};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],^_befa &_deac .Data [_fadb ],_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixSrcOrNotDst :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],_befa |^_deac .Data [_cbgd ],_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]=_befa |^_deac .Data [_eggab +_bdfc ];};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],_befa |^_deac .Data [_fadb ],_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixSrcAndNotDst :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],_befa &^_deac .Data [_cbgd ],_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]=_befa &^_deac .Data [_eggab +_bdfc ];};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],_befa &^_deac .Data [_fadb ],_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixNotPixSrcOrDst :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],^(_befa |_deac .Data [_cbgd ]),_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]=^(_befa |_deac .Data [_eggab +_bdfc ]);};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],^(_befa |_deac .Data [_fadb ]),_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixNotPixSrcAndDst :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],^(_befa &_deac .Data [_cbgd ]),_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]=^(_befa &_deac .Data [_eggab +_bdfc ]);};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],^(_befa &_deac .Data [_fadb ]),_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};case PixNotPixSrcXorDst :if _eac {for _fede =0;_fede < _febe ;_fede ++{if _beccf ==_geec {_befa =_faeb .Data [_bdce ]<<_febeb ;if _dgba {_befa =_gffeb (_befa ,_faeb .Data [_bdce +1]>>_fdbb ,_badb );};}else {_befa =_faeb .Data [_bdce ]>>_fdbb ;};_deac .Data [_cbgd ]=_gffeb (_deac .Data [_cbgd ],^(_befa ^_deac .Data [_cbgd ]),_cge );_cbgd +=_deac .BytesPerLine ;_bdce +=_faeb .BytesPerLine ;};};if _bdd {for _fede =0;_fede < _febe ;_fede ++{for _bdfc =0;_bdfc < _cadf ;_bdfc ++{_befa =_gffeb (_faeb .Data [_bgcba +_bdfc ]<<_febeb ,_faeb .Data [_bgcba +_bdfc +1]>>_fdbb ,_badb );_deac .Data [_eggab +_bdfc ]=^(_befa ^_deac .Data [_eggab +_bdfc ]);};_eggab +=_deac .BytesPerLine ;_bgcba +=_faeb .BytesPerLine ;};};if _fgbdd {for _fede =0;_fede < _febe ;_fede ++{_befa =_faeb .Data [_fdba ]<<_febeb ;if _egdc {_befa =_gffeb (_befa ,_faeb .Data [_fdba +1]>>_fdbb ,_badb );};_deac .Data [_fadb ]=_gffeb (_deac .Data [_fadb ],^(_befa ^_deac .Data [_fadb ]),_ecag );_fadb +=_deac .BytesPerLine ;_fdba +=_faeb .BytesPerLine ;};};default:_df .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_dffc );return _e .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func _gdeb (_fgcc int ,_faegf int )error {return _c .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_fgcc ,_faegf );};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func _gfa (_gdb ,_ddc *Monochrome ,_abgf []byte ,_acb int )(_gaa error ){var (_bbg ,_ce ,_def ,_ae ,_bec ,_dag ,_ccfa ,_gfag int ;_cce ,_ebca ,_cag ,_fbd uint32 ;_gdd ,_gbc byte ;_fdc uint16 ;);_faad :=make ([]byte ,4);_ecfb :=make ([]byte ,4);for _def =0;_def < _gdb .Height -1;_def ,_ae =_def +2,_ae +1{_bbg =_def *_gdb .BytesPerLine ;_ce =_ae *_ddc .BytesPerLine ;for _bec ,_dag =0,0;_bec < _acb ;_bec ,_dag =_bec +4,_dag +1{for _ccfa =0;_ccfa < 4;_ccfa ++{_gfag =_bbg +_bec +_ccfa ;if _gfag <=len (_gdb .Data )-1&&_gfag < _bbg +_gdb .BytesPerLine {_faad [_ccfa ]=_gdb .Data [_gfag ];}else {_faad [_ccfa ]=0x00;};_gfag =_bbg +_gdb .BytesPerLine +_bec +_ccfa ;if _gfag <=len (_gdb .Data )-1&&_gfag < _bbg +(2*_gdb .BytesPerLine ){_ecfb [_ccfa ]=_gdb .Data [_gfag ];}else {_ecfb [_ccfa ]=0x00;};};_cce =_d .BigEndian .Uint32 (_faad );_ebca =_d .BigEndian .Uint32 (_ecfb );_cag =_cce &_ebca ;_cag |=_cag <<1;_fbd =_cce |_ebca ;_fbd &=_fbd <<1;_ebca =_cag |_fbd ;_ebca &=0xaaaaaaaa;_cce =_ebca |(_ebca <<7);_gdd =byte (_cce >>24);_gbc =byte ((_cce >>8)&0xff);_gfag =_ce +_dag ;if _gfag +1==len (_ddc .Data )-1||_gfag +1>=_ce +_ddc .BytesPerLine {if _gaa =_ddc .setByte (_gfag ,_abgf [_gdd ]);_gaa !=nil {return _c .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gfag );};}else {_fdc =(uint16 (_abgf [_gdd ])<<8)|uint16 (_abgf [_gbc ]);if _gaa =_ddc .setTwoBytes (_gfag ,_fdc );_gaa !=nil {return _c .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gfag );};_dag ++;};};};return nil ;};type RGBA interface{RGBAAt (_cdca ,_gab int )_fb .RGBA ;SetRGBA (_abfd ,_abaf int ,_bgga _fb .RGBA );};func (_fcf *Monochrome )Bounds ()_bgf .Rectangle {return _bgf .Rectangle {Max :_bgf .Point {X :_fcf .Width ,Y :_fcf .Height }};};func (_ecab *NRGBA64 )At (x ,y int )_fb .Color {_abbc ,_ :=_ecab .ColorAt (x ,y );return _abbc };func _fbff (_ffeb _bgf .Image )(Image ,error ){if _bgef ,_dfa :=_ffeb .(*Monochrome );_dfa {return _bgef ,nil ;};_eaad :=_ffeb .Bounds ();var _afa Gray ;switch _adde :=_ffeb .(type ){case Gray :_afa =_adde ;case NRGBA :_afa =&Gray8 {ImageBase :NewImageBase (_eaad .Max .X ,_eaad .Max .Y ,8,1,nil ,nil ,nil )};_dge (_afa ,_adde ,_eaad );case nrgba64 :_afa =&Gray8 {ImageBase :NewImageBase (_eaad .Max .X ,_eaad .Max .Y ,8,1,nil ,nil ,nil )};_fgcb (_afa ,_adde ,_eaad );default:_ece ,_egag :=GrayConverter .Convert (_ffeb );if _egag !=nil {return nil ,_egag ;};_afa =_ece .(Gray );};_cfeb ,_fbbgc :=NewImage (_eaad .Max .X ,_eaad .Max .Y ,1,1,nil ,nil ,nil );if _fbbgc !=nil {return nil ,_fbbgc ;};_faeg :=_cfeb .(*Monochrome );_cef :=AutoThresholdTriangle (GrayHistogram (_afa ));for _caaa :=0;_caaa < _eaad .Max .X ;_caaa ++{for _gbcc :=0;_gbcc < _eaad .Max .Y ;_gbcc ++{_bbec :=_eafd (_afa .GrayAt (_caaa ,_gbcc ),monochromeModel (_cef ));_faeg .SetGray (_caaa ,_gbcc ,_bbec );};};return _cfeb ,nil ;};func _dfef (_ebfe *_bgf .Gray )bool {for _dbad :=0;_dbad < len (_ebfe .Pix );_dbad ++{if !_eadf (_ebfe .Pix [_dbad ]){return false ;};};return true ;};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_cdba (n )+1);};func _daebe (_dacg _bgf .Image ,_afdb Image ,_edbc _bgf .Rectangle ){if _gcdf ,_dedg :=_dacg .(SMasker );_dedg &&_gcdf .HasAlpha (){_afdb .(SMasker ).MakeAlpha ();};switch _edbb :=_dacg .(type ){case Gray :_dceca (_edbb ,_afdb .(NRGBA ),_edbc );case NRGBA :_bbgg (_edbb ,_afdb .(NRGBA ),_edbc );case *_bgf .NYCbCrA :_gggd (_edbb ,_afdb .(NRGBA ),_edbc );case CMYK :_gad (_edbb ,_afdb .(NRGBA ),_edbc );case RGBA :_beaf (_edbb ,_afdb .(NRGBA ),_edbc );case nrgba64 :_cebga (_edbb ,_afdb .(NRGBA ),_edbc );default:_gecg (_dacg ,_afdb ,_edbc );};};func _ebag (_age _fb .NRGBA )_fb .NRGBA {_age .R =_age .R >>4|(_age .R >>4)<<4;_age .G =_age .G >>4|(_age .G >>4)<<4;_age .B =_age .B >>4|(_age .B >>4)<<4;return _age ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_fb .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_c .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );};};func FromGoImage (i _bgf .Image )(Image ,error ){switch _bce :=i .(type ){case Image :return _bce .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_bgf .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_bgf .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};func (_bggd *Monochrome )SetGray (x ,y int ,g _fb .Gray ){_eggg :=y *_bggd .BytesPerLine +x >>3;if _eggg > len (_bggd .Data )-1{return ;};g =_eafd (g ,monochromeModel (_bggd .ModelThreshold ));_bggd .setGray (x ,g ,_eggg );};var (Gray2Model =_fb .ModelFunc (_fage );Gray4Model =_fb .ModelFunc (_gfce );NRGBA16Model =_fb .ModelFunc (_cfge ););func (_fba *Gray2 )Validate ()error {if len (_fba .Data )!=_fba .Height *_fba .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_ddgb *ImageBase )setByte (_dcfe int ,_adg byte )error {if _dcfe > len (_ddgb .Data )-1{return _e .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ddgb .Data [_dcfe ]=_adg ;return nil ;};func (_bcfe *Gray8 )Histogram ()(_facc [256]int ){for _geef :=0;_geef < len (_bcfe .Data );_geef ++{_facc [_bcfe .Data [_geef ]]++;};return _facc ;};func _abeg (_gba ,_aec CMYK ,_defg _bgf .Rectangle ){for _fda :=0;_fda < _defg .Max .X ;_fda ++{for _acad :=0;_acad < _defg .Max .Y ;_acad ++{_aec .SetCMYK (_fda ,_acad ,_gba .CMYKAt (_fda ,_acad ));};};};func (_edcb *Gray16 )ColorModel ()_fb .Model {return _fb .Gray16Model };func (_cbd *Monochrome )IsUnpadded ()bool {return (_cbd .Width *_cbd .Height )==len (_cbd .Data )};func (_cfgg *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _fcgg bool ;_fdcf :=scale ;if scale < 1{_fdcf =1/scale ;_fcgg =true ;};_cdga :=NextPowerOf2 (uint (_fdcf ));if InDelta (float64 (_cdga ),_fdcf ,0.001){if _fcgg {return _cfgg .ReduceBinary (_fdcf );};return _cfgg .ExpandBinary (int (_cdga ));};_eafc :=int (_b .RoundToEven (float64 (_cfgg .Width )*scale ));_gbd :=int (_b .RoundToEven (float64 (_cfgg .Height )*scale ));return _cfgg .ScaleLow (_eafc ,_gbd );};func _gcgg (_ggcg *_bgf .Gray16 ,_ebbdf uint8 )*_bgf .Gray {_febg :=_ggcg .Bounds ();_gabb :=_bgf .NewGray (_febg );for _ecaa :=0;_ecaa < _febg .Dx ();_ecaa ++{for _cbge :=0;_cbge < _febg .Dy ();_cbge ++{_eddf :=_ggcg .Gray16At (_ecaa ,_cbge );_gabb .SetGray (_ecaa ,_cbge ,_fb .Gray {Y :_fbeb (uint8 (_eddf .Y /256),_ebbdf )});};};return _gabb ;};func (_cbb *CMYK32 )Bounds ()_bgf .Rectangle {return _bgf .Rectangle {Max :_bgf .Point {X :_cbb .Width ,Y :_cbb .Height }};};var _ NRGBA =&NRGBA32 {};func (_fged *NRGBA32 )Base ()*ImageBase {return &_fged .ImageBase };func (_ffdb *Monochrome )clearBit (_gaaca ,_ged int ){_ffdb .Data [_gaaca ]&=^(0x80>>uint (_ged &7))};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_fb .NRGBA ,error ){_cea :=y *width +x ;_fdag :=3*_cea ;if _fdag +2>=len (data ){return _fb .NRGBA {},_c .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_babb :=uint8 (0xff);if alpha !=nil &&len (alpha )> _cea {_babb =alpha [_cea ];};_debd ,_cbgfg ,_bgfa :=data [_fdag ],data [_fdag +1],data [_fdag +2];if len (decode )==6{_debd =uint8 (uint32 (LinearInterpolate (float64 (_debd ),0,255,decode [0],decode [1]))&0xff);_cbgfg =uint8 (uint32 (LinearInterpolate (float64 (_cbgfg ),0,255,decode [2],decode [3]))&0xff);_bgfa =uint8 (uint32 (LinearInterpolate (float64 (_bgfa ),0,255,decode [4],decode [5]))&0xff);};return _fb .NRGBA {R :_debd ,G :_cbgfg ,B :_bgfa ,A :_babb },nil ;};func (_gddea *Gray2 )At (x ,y int )_fb .Color {_eedc ,_ :=_gddea .ColorAt (x ,y );return _eedc };func (_cfed *NRGBA16 )setNRGBA (_afbc ,_ggfaf ,_aafd int ,_bcfa _fb .NRGBA ){if _afbc *3%2==0{_cfed .Data [_aafd ]=(_bcfa .R >>4)<<4|(_bcfa .G >>4);_cfed .Data [_aafd +1]=(_bcfa .B >>4)<<4|(_cfed .Data [_aafd +1]&0xf);}else {_cfed .Data [_aafd ]=(_cfed .Data [_aafd ]&0xf0)|(_bcfa .R >>4);_cfed .Data [_aafd +1]=(_bcfa .G >>4)<<4|(_bcfa .B >>4);};if _cfed .Alpha !=nil {_bcda :=_ggfaf *BytesPerLine (_cfed .Width ,4,1);if _bcda < len (_cfed .Alpha ){if _afbc %2==0{_cfed .Alpha [_bcda ]=(_bcfa .A >>uint (4))<<uint (4)|(_cfed .Alpha [_aafd ]&0xf);}else {_cfed .Alpha [_bcda ]=(_cfed .Alpha [_bcda ]&0xf0)|(_bcfa .A >>uint (4));};};};};var _ Gray =&Gray4 {};func (_ebb *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_egad :=_cdba (uint (factor ));if !IsPowerOf2 (uint (factor )){_egad ++;};_gega :=make ([]int ,_egad );for _dad :=range _gega {_gega [_dad ]=4;};_bcgc ,_bab :=_agc (_ebb ,_gega ...);if _bab !=nil {return nil ,_bab ;};return _bcgc ,nil ;};func (_aabf *NRGBA64 )Set (x ,y int ,c _fb .Color ){_fbcd :=(y *_aabf .Width +x )*2;_feef :=_fbcd *3;if _feef +5>=len (_aabf .Data ){return ;};_faac :=_fb .NRGBA64Model .Convert (c ).(_fb .NRGBA64 );_aabf .setNRGBA64 (_feef ,_faac ,_fbcd );};func _dgg (_gg ,_fdd *Monochrome )(_cd error ){_bgb :=_fdd .BytesPerLine ;_fbc :=_gg .BytesPerLine ;_cf :=_fdd .BytesPerLine *4-_gg .BytesPerLine ;var (_bde ,_aab byte ;_ee uint32 ;_acc ,_fe ,_daf ,_dff ,_fbb ,_bgc ,_egf int ;);for _daf =0;_daf < _fdd .Height ;_daf ++{_acc =_daf *_bgb ;_fe =4*_daf *_fbc ;for _dff =0;_dff < _bgb ;_dff ++{_bde =_fdd .Data [_acc +_dff ];_ee =_fbe [_bde ];_bgc =_fe +_dff *4;if _cf !=0&&(_dff +1)*4> _gg .BytesPerLine {for _fbb =_cf ;_fbb > 0;_fbb --{_aab =byte ((_ee >>uint (_fbb *8))&0xff);_egf =_bgc +(_cf -_fbb );if _cd =_gg .setByte (_egf ,_aab );_cd !=nil {return _cd ;};};}else if _cd =_gg .setFourBytes (_bgc ,_ee );_cd !=nil {return _cd ;};if _cd =_gg .setFourBytes (_fe +_dff *4,_fbe [_fdd .Data [_acc +_dff ]]);_cd !=nil {return _cd ;};};for _fbb =1;_fbb < 4;_fbb ++{for _dff =0;_dff < _fbc ;_dff ++{if _cd =_gg .setByte (_fe +_fbb *_fbc +_dff ,_gg .Data [_fe +_dff ]);_cd !=nil {return _cd ;};};};};return nil ;};func (_fcebg *Gray8 )ColorAt (x ,y int )(_fb .Color ,error ){return ColorAtGray8BPC (x ,y ,_fcebg .BytesPerLine ,_fcebg .Data ,_fcebg .Decode );};func _aaag (_ccff int ,_egcb int )int {if _ccff < _egcb {return _ccff ;};return _egcb ;};type Gray4 struct{ImageBase };func _afgc (_bafd _bgf .Image )(Image ,error ){if _ebg ,_fabg :=_bafd .(*Gray8 );_fabg {return _ebg .Copy (),nil ;};_gffe :=_bafd .Bounds ();_ecbe ,_dbgb :=NewImage (_gffe .Max .X ,_gffe .Max .Y ,8,1,nil ,nil ,nil );if _dbgb !=nil {return nil ,_dbgb ;};_dcca (_bafd ,_ecbe ,_gffe );return _ecbe ,nil ;};func (_eggcf *Gray16 )Set (x ,y int ,c _fb .Color ){_ccc :=(y *_eggcf .BytesPerLine /2+x )*2;if _ccc +1>=len (_eggcf .Data ){return ;};_dbfb :=_fb .Gray16Model .Convert (c ).(_fb .Gray16 );_eggcf .Data [_ccc ],_eggcf .Data [_ccc +1]=uint8 (_dbfb .Y >>8),uint8 (_dbfb .Y &0xff);};func _eadf (_bgfab uint8 )bool {if _bgfab ==0||_bgfab ==255{return true ;};return false ;};func ImgToBinary (i _bgf .Image ,threshold uint8 )*_bgf .Gray {switch _gbbbfa :=i .(type ){case *_bgf .Gray :if _dfef (_gbbbfa ){return _gbbbfa ;};return _babd (_gbbbfa ,threshold );case *_bgf .Gray16 :return _gcgg (_gbbbfa ,threshold );default:return _fgce (_gbbbfa ,threshold );};};func _cgc (_bad _fb .NRGBA64 )_fb .NRGBA {return _fb .NRGBA {R :uint8 (_bad .R >>8),G :uint8 (_bad .G >>8),B :uint8 (_bad .B >>8),A :uint8 (_bad .A >>8)};};func (_cgbba *Gray16 )Bounds ()_bgf .Rectangle {return _bgf .Rectangle {Max :_bgf .Point {X :_cgbba .Width ,Y :_cgbba .Height }};};func _bc (_aa *Monochrome ,_bd int ,_fg []uint )(*Monochrome ,error ){_ed :=_bd *_aa .Width ;_aaa :=_bd *_aa .Height ;_gf :=_ecc (_ed ,_aaa );for _eb ,_ab :=range _fg {var _cc error ;switch _ab {case 2:_cc =_ac (_gf ,_aa );case 4:_cc =_dgg (_gf ,_aa );case 8:_cc =_agd (_gf ,_aa );};if _cc !=nil {return nil ,_cc ;};if _eb !=len (_fg )-1{_aa =_gf .copy ();};};return _gf ,nil ;};func _cebga (_bcdbb nrgba64 ,_cdbac NRGBA ,_eegg _bgf .Rectangle ){for _faccb :=0;_faccb < _eegg .Max .X ;_faccb ++{for _fgcbb :=0;_fgcbb < _eegg .Max .Y ;_fgcbb ++{_dabg :=_bcdbb .NRGBA64At (_faccb ,_fgcbb );_cdbac .SetNRGBA (_faccb ,_fgcbb ,_cgc (_dabg ));};};};func _dfbe (_fege *Monochrome ,_ebfa ,_cbfg int ,_gcgf ,_debg int ,_gbec RasterOperator ){var (_ffgef bool ;_dagg bool ;_dggd int ;_acaa int ;_cccd int ;_aaeb int ;_cbgdd bool ;_gdbd byte ;);_ccfad :=8-(_ebfa &7);_ddada :=_ebfb [_ccfad ];_babec :=_fege .BytesPerLine *_cbfg +(_ebfa >>3);if _gcgf < _ccfad {_ffgef =true ;_ddada &=_ecca [8-_ccfad +_gcgf ];};if !_ffgef {_dggd =(_gcgf -_ccfad )>>3;if _dggd !=0{_dagg =true ;_acaa =_babec +1;};};_cccd =(_ebfa +_gcgf )&7;if !(_ffgef ||_cccd ==0){_cbgdd =true ;_gdbd =_ecca [_cccd ];_aaeb =_babec +1+_dggd ;};var _ggfbe ,_bfba int ;switch _gbec {case PixClr :for _ggfbe =0;_ggfbe < _debg ;_ggfbe ++{_fege .Data [_babec ]=_gffeb (_fege .Data [_babec ],0x0,_ddada );_babec +=_fege .BytesPerLine ;};if _dagg {for _ggfbe =0;_ggfbe < _debg ;_ggfbe ++{for _bfba =0;_bfba < _dggd ;_bfba ++{_fege .Data [_acaa +_bfba ]=0x0;};_acaa +=_fege .BytesPerLine ;};};if _cbgdd {for _ggfbe =0;_ggfbe < _debg ;_ggfbe ++{_fege .Data [_aaeb ]=_gffeb (_fege .Data [_aaeb ],0x0,_gdbd );_aaeb +=_fege .BytesPerLine ;};};case PixSet :for _ggfbe =0;_ggfbe < _debg ;_ggfbe ++{_fege .Data [_babec ]=_gffeb (_fege .Data [_babec ],0xff,_ddada );_babec +=_fege .BytesPerLine ;};if _dagg {for _ggfbe =0;_ggfbe < _debg ;_ggfbe ++{for _bfba =0;_bfba < _dggd ;_bfba ++{_fege .Data [_acaa +_bfba ]=0xff;};_acaa +=_fege .BytesPerLine ;};};if _cbgdd {for _ggfbe =0;_ggfbe < _debg ;_ggfbe ++{_fege .Data [_aaeb ]=_gffeb (_fege .Data [_aaeb ],0xff,_gdbd );_aaeb +=_fege .BytesPerLine ;};};case PixNotDst :for _ggfbe =0;_ggfbe < _debg ;_ggfbe ++{_fege .Data [_babec ]=_gffeb (_fege .Data [_babec ],^_fege .Data [_babec ],_ddada );_babec +=_fege .BytesPerLine ;};if _dagg {for _ggfbe =0;_ggfbe < _debg ;_ggfbe ++{for _bfba =0;_bfba < _dggd ;_bfba ++{_fege .Data [_acaa +_bfba ]=^(_fege .Data [_acaa +_bfba ]);};_acaa +=_fege .BytesPerLine ;};};if _cbgdd {for _ggfbe =0;_ggfbe < _debg ;_ggfbe ++{_fege .Data [_aaeb ]=_gffeb (_fege .Data [_aaeb ],^_fege .Data [_aaeb ],_gdbd );_aaeb +=_fege .BytesPerLine ;};};};};func (_bgbf *Gray8 )ColorModel ()_fb .Model {return _fb .GrayModel };func _dded (_fde _bgf .Image )(Image ,error ){if _bbef ,_cfa :=_fde .(*Gray16 );_cfa {return _bbef .Copy (),nil ;};_faag :=_fde .Bounds ();_ggce ,_bece :=NewImage (_faag .Max .X ,_faag .Max .Y ,16,1,nil ,nil ,nil );if _bece !=nil {return nil ,_bece ;};_dcca (_fde ,_ggce ,_faag );return _ggce ,nil ;};func _dafg (_bdb _fb .NYCbCrA )_fb .NRGBA {_dfcc :=int32 (_bdb .Y )*0x10101;_abb :=int32 (_bdb .Cb )-128;_efc :=int32 (_bdb .Cr )-128;_gbge :=_dfcc +91881*_efc ;if uint32 (_gbge )&0xff000000==0{_gbge >>=8;}else {_gbge =^(_gbge >>31)&0xffff;};_ega :=_dfcc -22554*_abb -46802*_efc ;if uint32 (_ega )&0xff000000==0{_ega >>=8;}else {_ega =^(_ega >>31)&0xffff;};_dec :=_dfcc +116130*_abb ;if uint32 (_dec )&0xff000000==0{_dec >>=8;}else {_dec =^(_dec >>31)&0xffff;};return _fb .NRGBA {R :uint8 (_gbge >>8),G :uint8 (_ega >>8),B :uint8 (_dec >>8),A :_bdb .A };};func _dcca (_edcd _bgf .Image ,_fbea Image ,_abda _bgf .Rectangle ){switch _gffed :=_edcd .(type ){case Gray :_edf (_gffed ,_fbea .(Gray ),_abda );case NRGBA :_dbgg (_gffed ,_fbea .(Gray ),_abda );case CMYK :_bdaa (_gffed ,_fbea .(Gray ),_abda );case RGBA :_agfd (_gffed ,_fbea .(Gray ),_abda );default:_gecg (_edcd ,_fbea .(Image ),_abda );};};func (_cfgb *Monochrome )Histogram ()(_becc [256]int ){for _ ,_acda :=range _cfgb .Data {_becc [0xff]+=int (_gddd [_cfgb .Data [_acda ]]);};return _becc ;};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;};case 4:return CMYKConverter ,nil ;};return nil ,_c .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );};func (_bbd *CMYK32 )Base ()*ImageBase {return &_bbd .ImageBase };func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_ggfb :=BytesPerLine (width ,bitsPerComponent ,colorComponents );if _ggfb ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_adgg :=width *colorComponents *bitsPerComponent ;_fgbab :=_ggfb *8;_accb :=8-(_fgbab -_adgg );_ffge :=_a .NewReader (data );_cggg :=_ggfb -1;_aed :=make ([]byte ,_cggg );_cbad :=make ([]byte ,height *_ggfb );_dabe :=_a .NewWriterMSB (_cbad );var _bdfg uint64 ;var _egagc error ;for _deab :=0;_deab < height ;_deab ++{_ ,_egagc =_ffge .Read (_aed );if _egagc !=nil {return nil ,_egagc ;};_ ,_egagc =_dabe .Write (_aed );if _egagc !=nil {return nil ,_egagc ;};_bdfg ,_egagc =_ffge .ReadBits (byte (_accb ));if _egagc !=nil {return nil ,_egagc ;};_ ,_egagc =_dabe .WriteBits (_bdfg ,_accb );if _egagc !=nil {return nil ,_egagc ;};_dabe .FinishByte ();};return _cbad ,nil ;};func (_bffg *Monochrome )ColorAt (x ,y int )(_fb .Color ,error ){return ColorAtGray1BPC (x ,y ,_bffg .BytesPerLine ,_bffg .Data ,_bffg .Decode );};func (_cae *CMYK32 )ColorAt (x ,y int )(_fb .Color ,error ){return ColorAtCMYK (x ,y ,_cae .Width ,_cae .Data ,_cae .Decode );};func _ccea (_feg ,_ddee *Monochrome ,_fbgd []byte ,_dcc int )(_bdee error ){var (_ggfa ,_egge ,_cdbe ,_bdg ,_eba ,_ecg ,_agff ,_gddc int ;_aag ,_egfd ,_aba ,_gaf uint32 ;_baf ,_fcd byte ;_bgd uint16 ;);_ddf :=make ([]byte ,4);_dbg :=make ([]byte ,4);for _cdbe =0;_cdbe < _feg .Height -1;_cdbe ,_bdg =_cdbe +2,_bdg +1{_ggfa =_cdbe *_feg .BytesPerLine ;_egge =_bdg *_ddee .BytesPerLine ;for _eba ,_ecg =0,0;_eba < _dcc ;_eba ,_ecg =_eba +4,_ecg +1{for _agff =0;_agff < 4;_agff ++{_gddc =_ggfa +_eba +_agff ;if _gddc <=len (_feg .Data )-1&&_gddc < _ggfa +_feg .BytesPerLine {_ddf [_agff ]=_feg .Data [_gddc ];}else {_ddf [_agff ]=0x00;};_gddc =_ggfa +_feg .BytesPerLine +_eba +_agff ;if _gddc <=len (_feg .Data )-1&&_gddc < _ggfa +(2*_feg .BytesPerLine ){_dbg [_agff ]=_feg .Data [_gddc ];}else {_dbg [_agff ]=0x00;};};_aag =_d .BigEndian .Uint32 (_ddf );_egfd =_d .BigEndian .Uint32 (_dbg );_aba =_aag &_egfd ;_aba |=_aba <<1;_gaf =_aag |_egfd ;_gaf &=_gaf <<1;_egfd =_aba &_gaf ;_egfd &=0xaaaaaaaa;_aag =_egfd |(_egfd <<7);_baf =byte (_aag >>24);_fcd =byte ((_aag >>8)&0xff);_gddc =_egge +_ecg ;if _gddc +1==len (_ddee .Data )-1||_gddc +1>=_egge +_ddee .BytesPerLine {if _bdee =_ddee .setByte (_gddc ,_fbgd [_baf ]);_bdee !=nil {return _c .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gddc );};}else {_bgd =(uint16 (_fbgd [_baf ])<<8)|uint16 (_fbgd [_fcd ]);if _bdee =_ddee .setTwoBytes (_gddc ,_bgd );_bdee !=nil {return _c .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gddc );};_ecg ++;};};};return nil ;};func (_egdd *NRGBA64 )Bounds ()_bgf .Rectangle {return _bgf .Rectangle {Max :_bgf .Point {X :_egdd .Width ,Y :_egdd .Height }};};type Gray16 struct{ImageBase };func AutoThresholdTriangle (histogram [256]int )uint8 {var _dfgb ,_eabeg ,_fegf ,_acef int ;for _ceed :=0;_ceed < len (histogram );_ceed ++{if histogram [_ceed ]> 0{_dfgb =_ceed ;break ;};};if _dfgb > 0{_dfgb --;};for _gbeea :=255;_gbeea > 0;_gbeea --{if histogram [_gbeea ]> 0{_acef =_gbeea ;break ;};};if _acef < 255{_acef ++;};for _ddeff :=0;_ddeff < 256;_ddeff ++{if histogram [_ddeff ]> _eabeg {_fegf =_ddeff ;_eabeg =histogram [_ddeff ];};};var _gced bool ;if (_fegf -_dfgb )< (_acef -_fegf ){_gced =true ;var _ffgfc int ;_cfgba :=255;for _ffgfc < _cfgba {_ebdf :=histogram [_ffgfc ];histogram [_ffgfc ]=histogram [_cfgba ];histogram [_cfgba ]=_ebdf ;_ffgfc ++;_cfgba --;};_dfgb =255-_acef ;_fegf =255-_fegf ;};if _dfgb ==_fegf {return uint8 (_dfgb );};_cdfd :=float64 (histogram [_fegf ]);_fbca :=float64 (_dfgb -_fegf );_bbaa :=_b .Sqrt (_cdfd *_cdfd +_fbca *_fbca );_cdfd /=_bbaa ;_fbca /=_bbaa ;_bbaa =_cdfd *float64 (_dfgb )+_fbca *float64 (histogram [_dfgb ]);_ggcc :=_dfgb ;var _afgga float64 ;for _cgda :=_dfgb +1;_cgda <=_fegf ;_cgda ++{_gecf :=_cdfd *float64 (_cgda )+_fbca *float64 (histogram [_cgda ])-_bbaa ;if _gecf > _afgga {_ggcc =_cgda ;_afgga =_gecf ;};};_ggcc --;if _gced {var _aaaa int ;_dcbg :=255;for _aaaa < _dcbg {_befc :=histogram [_aaaa ];histogram [_aaaa ]=histogram [_dcbg ];histogram [_dcbg ]=_befc ;_aaaa ++;_dcbg --;};return uint8 (255-_ggcc );};return uint8 (_ggcc );};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fb .Gray ,error ){_gbed :=y *bytesPerLine +x >>1;if _gbed >=len (data ){return _fb .Gray {},_c .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_bbdb :=data [_gbed ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_bbdb =uint8 (uint32 (LinearInterpolate (float64 (_bbdb ),0,15,decode [0],decode [1]))&0xf);};return _fb .Gray {Y :_bbdb *17&0xff},nil ;};func (_dbfbb *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_dbfbb .copy ()}};func MonochromeModel (threshold uint8 )_fb .Model {return monochromeModel (threshold )};func _edf (_eeee ,_ebac Gray ,_gbad _bgf .Rectangle ){for _gfae :=0;_gfae < _gbad .Max .X ;_gfae ++{for _daeb :=0;_daeb < _gbad .Max .Y ;_daeb ++{_ebac .SetGray (_gfae ,_daeb ,_eeee .GrayAt (_gfae ,_daeb ));};};};func _bbga (_cba ,_cfe *Monochrome ,_bf []byte ,_abgc int )(_fdg error ){var (_cee ,_ccb ,_dfc ,_ddea ,_cac ,_ada ,_fac ,_fae int ;_efec ,_eab uint32 ;_dccb ,_aad byte ;_dacf uint16 ;);_adc :=make ([]byte ,4);_cab :=make ([]byte ,4);for _dfc =0;_dfc < _cba .Height -1;_dfc ,_ddea =_dfc +2,_ddea +1{_cee =_dfc *_cba .BytesPerLine ;_ccb =_ddea *_cfe .BytesPerLine ;for _cac ,_ada =0,0;_cac < _abgc ;_cac ,_ada =_cac +4,_ada +1{for _fac =0;_fac < 4;_fac ++{_fae =_cee +_cac +_fac ;if _fae <=len (_cba .Data )-1&&_fae < _cee +_cba .BytesPerLine {_adc [_fac ]=_cba .Data [_fae ];}else {_adc [_fac ]=0x00;};_fae =_cee +_cba .BytesPerLine +_cac +_fac ;if _fae <=len (_cba .Data )-1&&_fae < _cee +(2*_cba .BytesPerLine ){_cab [_fac ]=_cba .Data [_fae ];}else {_cab [_fac ]=0x00;};};_efec =_d .BigEndian .Uint32 (_adc );_eab =_d .BigEndian .Uint32 (_cab );_eab &=_efec ;_eab &=_eab <<1;_eab &=0xaaaaaaaa;_efec =_eab |(_eab <<7);_dccb =byte (_efec >>24);_aad =byte ((_efec >>8)&0xff);_fae =_ccb +_ada ;if _fae +1==len (_cfe .Data )-1||_fae +1>=_ccb +_cfe .BytesPerLine {_cfe .Data [_fae ]=_bf [_dccb ];if _fdg =_cfe .setByte (_fae ,_bf [_dccb ]);_fdg !=nil {return _c .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fae );};}else {_dacf =(uint16 (_bf [_dccb ])<<8)|uint16 (_bf [_aad ]);if _fdg =_cfe .setTwoBytes (_fae ,_dacf );_fdg !=nil {return _c .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fae );};_ada ++;};};};return nil ;};func (_efea *Gray8 )SetGray (x ,y int ,g _fb .Gray ){_egdb :=y *_efea .BytesPerLine +x ;if _egdb > len (_efea .Data )-1{return ;};_efea .Data [_egdb ]=g .Y ;};func _afb (_bgcc int )[]uint {var _fee []uint ;_efg :=_bgcc ;_ge :=_efg /8;if _ge !=0{for _ddgd :=0;_ddgd < _ge ;_ddgd ++{_fee =append (_fee ,8);};_bgec :=_efg %8;_efg =0;if _bgec !=0{_efg =_bgec ;};};_bba :=_efg /4;if _bba !=0{for _bae :=0;_bae < _bba ;_bae ++{_fee =append (_fee ,4);};_aff :=_efg %4;_efg =0;if _aff !=0{_efg =_aff ;};};_ege :=_efg /2;if _ege !=0{for _ebc :=0;_ebc < _ege ;_ebc ++{_fee =append (_fee ,2);};};return _fee ;};var (_ecca =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_ebfb =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fb .Gray ,error ){_gdga :=y *bytesPerLine +x >>2;if _gdga >=len (data ){return _fb .Gray {},_c .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_dbacf :=data [_gdga ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_dbacf =uint8 (uint32 (LinearInterpolate (float64 (_dbacf ),0,3.0,decode [0],decode [1]))&3);};return _fb .Gray {Y :_dbacf *85},nil ;};type monochromeModel uint8 ;func (_gacc *Monochrome )copy ()*Monochrome {_adee :=_ecc (_gacc .Width ,_gacc .Height );_adee .ModelThreshold =_gacc .ModelThreshold ;_adee .Data =make ([]byte ,len (_gacc .Data ));copy (_adee .Data ,_gacc .Data );if len (_gacc .Decode )!=0{_adee .Decode =make ([]float64 ,len (_gacc .Decode ));copy (_adee .Decode ,_gacc .Decode );};if len (_gacc .Alpha )!=0{_adee .Alpha =make ([]byte ,len (_gacc .Alpha ));copy (_adee .Alpha ,_gacc .Alpha );};return _adee ;};func (_afgg *ImageBase )setEightFullBytes (_aade int ,_bdgd uint64 )error {if _aade +7> len (_afgg .Data )-1{return _e .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_afgg .Data [_aade ]=byte ((_bdgd &0xff00000000000000)>>56);_afgg .Data [_aade +1]=byte ((_bdgd &0xff000000000000)>>48);_afgg .Data [_aade +2]=byte ((_bdgd &0xff0000000000)>>40);_afgg .Data [_aade +3]=byte ((_bdgd &0xff00000000)>>32);_afgg .Data [_aade +4]=byte ((_bdgd &0xff000000)>>24);_afgg .Data [_aade +5]=byte ((_bdgd &0xff0000)>>16);_afgg .Data [_aade +6]=byte ((_bdgd &0xff00)>>8);_afgg .Data [_aade +7]=byte (_bdgd &0xff);return nil ;};func (_gdfa *Gray16 )Histogram ()(_fed [256]int ){for _fbde :=0;_fbde < _gdfa .Width ;_fbde ++{for _aacg :=0;_aacg < _gdfa .Height ;_aacg ++{_fed [_gdfa .GrayAt (_fbde ,_aacg ).Y ]++;};};return _fed ;};func (_fgc *CMYK32 )Set (x ,y int ,c _fb .Color ){_cfb :=4*(y *_fgc .Width +x );if _cfb +3>=len (_fgc .Data ){return ;};_ffe :=_fb .CMYKModel .Convert (c ).(_fb .CMYK );_fgc .Data [_cfb ]=_ffe .C ;_fgc .Data [_cfb +1]=_ffe .M ;_fgc .Data [_cfb +2]=_ffe .Y ;_fgc .Data [_cfb +3]=_ffe .K ;};func (_cgaa *Gray2 )Bounds ()_bgf .Rectangle {return _bgf .Rectangle {Max :_bgf .Point {X :_cgaa .Width ,Y :_cgaa .Height }};};var _ Gray =&Monochrome {};func _agfd (_edde RGBA ,_egga Gray ,_fcaf _bgf .Rectangle ){for _ebcb :=0;_ebcb < _fcaf .Max .X ;_ebcb ++{for _gaca :=0;_gaca < _fcaf .Max .Y ;_gaca ++{_ebgd :=_eff (_edde .RGBAAt (_ebcb ,_gaca ));_egga .SetGray (_ebcb ,_gaca ,_ebgd );};};};func _ac (_bge ,_cca *Monochrome )(_afc error ){_fd :=_cca .BytesPerLine ;_ff :=_bge .BytesPerLine ;var (_ag byte ;_ea uint16 ;_ebf ,_ec ,_fbg ,_fcg ,_dg int ;);for _fbg =0;_fbg < _cca .Height ;_fbg ++{_ebf =_fbg *_fd ;_ec =2*_fbg *_ff ;for _fcg =0;_fcg < _fd ;_fcg ++{_ag =_cca .Data [_ebf +_fcg ];_ea =_fad [_ag ];_dg =_ec +_fcg *2;if _bge .BytesPerLine !=_cca .BytesPerLine *2&&(_fcg +1)*2> _bge .BytesPerLine {_afc =_bge .setByte (_dg ,byte (_ea >>8));}else {_afc =_bge .setTwoBytes (_dg ,_ea );};if _afc !=nil {return _afc ;};};for _fcg =0;_fcg < _ff ;_fcg ++{_dg =_ec +_ff +_fcg ;_ag =_bge .Data [_ec +_fcg ];if _afc =_bge .setByte (_dg ,_ag );_afc !=nil {return _afc ;};};};return nil ;};func _cecf (_bdea _bgf .Image )(Image ,error ){if _afba ,_cgg :=_bdea .(*Gray4 );_cgg {return _afba .Copy (),nil ;};_edg :=_bdea .Bounds ();_caegf ,_bdeb :=NewImage (_edg .Max .X ,_edg .Max .Y ,4,1,nil ,nil ,nil );if _bdeb !=nil {return nil ,_bdeb ;};_dcca (_bdea ,_caegf ,_edg );return _caegf ,nil ;};func (_cged *NRGBA32 )NRGBAAt (x ,y int )_fb .NRGBA {_cfc ,_ :=ColorAtNRGBA32 (x ,y ,_cged .Width ,_cged .Data ,_cged .Alpha ,_cged .Decode );return _cfc ;};type monochromeThresholdConverter struct{Threshold uint8 ;};func _dceca (_dedf Gray ,_dbeaa NRGBA ,_gbeg _bgf .Rectangle ){for _cafdc :=0;_cafdc < _gbeg .Max .X ;_cafdc ++{for _cebg :=0;_cebg < _gbeg .Max .Y ;_cebg ++{_bcbc :=_dedf .GrayAt (_cafdc ,_cebg );_dbeaa .SetNRGBA (_cafdc ,_cebg ,_aea (_bcbc ));};};};func (_ffae *NRGBA16 )Bounds ()_bgf .Rectangle {return _bgf .Rectangle {Max :_bgf .Point {X :_ffae .Width ,Y :_ffae .Height }};};func (_cagg *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_cagg .copy ()}};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _b .Abs (xmax -xmin )< 0.000001{return ymin ;};_adad :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _adad ;};func _aedb (_aegg _bgf .Image )(Image ,error ){if _egae ,_bbae :=_aegg .(*NRGBA16 );_bbae {return _egae .Copy (),nil ;};_bbbfg :=_aegg .Bounds ();_ebga ,_abea :=NewImage (_bbbfg .Max .X ,_bbbfg .Max .Y ,4,3,nil ,nil ,nil );if _abea !=nil {return nil ,_abea ;};_daebe (_aegg ,_ebga ,_bbbfg );return _ebga ,nil ;};func _bfbg (){for _bfg :=0;_bfg < 256;_bfg ++{_gddd [_bfg ]=uint8 (_bfg &0x1)+(uint8 (_bfg >>1)&0x1)+(uint8 (_bfg >>2)&0x1)+(uint8 (_bfg >>3)&0x1)+(uint8 (_bfg >>4)&0x1)+(uint8 (_bfg >>5)&0x1)+(uint8 (_bfg >>6)&0x1)+(uint8 (_bfg >>7)&0x1);};};type RasterOperator int ;func _cfge (_gdgd _fb .Color )_fb .Color {_aeec :=_fb .NRGBAModel .Convert (_gdgd ).(_fb .NRGBA );return _ebag (_aeec );};func ConverterFunc (converterFunc func (_gdde _bgf .Image )(Image ,error ))ColorConverter {return colorConverter {_aac :converterFunc };};