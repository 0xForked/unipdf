//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_e "encoding/binary";_c "errors";_db "fmt";_b "github.com/unidoc/unipdf/v3/common";_ce "github.com/unidoc/unipdf/v3/internal/bitwise";_g "image";_fe "image/color";_de "image/draw";_d "math";);func (_edfc *Gray2 )Validate ()error {if len (_edfc .Data )!=_edfc .Height *_edfc .BytesPerLine {return ErrInvalidImage ;
};return nil ;};var _ Image =&NRGBA16 {};func (_bccd *Gray2 )GrayAt (x ,y int )_fe .Gray {_abef ,_ :=ColorAtGray2BPC (x ,y ,_bccd .BytesPerLine ,_bccd .Data ,_bccd .Decode );return _abef ;};func _adcfe (_fggc CMYK ,_bfgf NRGBA ,_aegag _g .Rectangle ){for _decd :=0;
_decd < _aegag .Max .X ;_decd ++{for _bbfc :=0;_bbfc < _aegag .Max .Y ;_bbfc ++{_dgdg :=_fggc .CMYKAt (_decd ,_bbfc );_bfgf .SetNRGBA (_decd ,_bbfc ,_efca (_dgdg ));};};};func _eebb ()(_aae [256]uint64 ){for _dafd :=0;_dafd < 256;_dafd ++{if _dafd &0x01!=0{_aae [_dafd ]|=0xff;
};if _dafd &0x02!=0{_aae [_dafd ]|=0xff00;};if _dafd &0x04!=0{_aae [_dafd ]|=0xff0000;};if _dafd &0x08!=0{_aae [_dafd ]|=0xff000000;};if _dafd &0x10!=0{_aae [_dafd ]|=0xff00000000;};if _dafd &0x20!=0{_aae [_dafd ]|=0xff0000000000;};if _dafd &0x40!=0{_aae [_dafd ]|=0xff000000000000;
};if _dafd &0x80!=0{_aae [_dafd ]|=0xff00000000000000;};};return _aae ;};func (_eaga *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_eaga .copy ()}};func (_acef *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_db .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _ffe (_acef ,factor );};func _gagg (_adfd *Monochrome ,_caf ,_acfa ,_adbd ,_gfgb int ,_dbbd RasterOperator ,_fdac *Monochrome ,_dbed ,_cdae int )error {if _adfd ==nil {return _c .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _dbbd ==PixDst {return nil ;};switch _dbbd {case PixClr ,PixSet ,PixNotDst :_agea (_adfd ,_caf ,_acfa ,_adbd ,_gfgb ,_dbbd );return nil ;};if _fdac ==nil {_b .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ecgcd :=_gegf (_adfd ,_caf ,_acfa ,_adbd ,_gfgb ,_dbbd ,_fdac ,_dbed ,_cdae );_ecgcd !=nil {return _ecgcd ;};return nil ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_fe .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_db .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func _aga (_ede *Monochrome ,_fbe ...int )(_bcg *Monochrome ,_dae error ){if _ede ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_fbe )==0{return nil ,_c .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_ada :=_cffb ();_bcg =_ede ;for _ ,_eeg :=range _fbe {if _eeg <=0{break ;};_bcg ,_dae =_adg (_bcg ,_eeg ,_ada );if _dae !=nil {return nil ,_dae ;};};return _bcg ,nil ;};func _eea ()(_bfa [256]uint16 ){for _daf :=0;_daf < 256;_daf ++{if _daf &0x01!=0{_bfa [_daf ]|=0x3;
};if _daf &0x02!=0{_bfa [_daf ]|=0xc;};if _daf &0x04!=0{_bfa [_daf ]|=0x30;};if _daf &0x08!=0{_bfa [_daf ]|=0xc0;};if _daf &0x10!=0{_bfa [_daf ]|=0x300;};if _daf &0x20!=0{_bfa [_daf ]|=0xc00;};if _daf &0x40!=0{_bfa [_daf ]|=0x3000;};if _daf &0x80!=0{_bfa [_daf ]|=0xc000;
};};return _bfa ;};var _abbd [256]uint8 ;type RGBA32 struct{ImageBase };var _ Gray =&Gray8 {};func (_eca *Gray4 )Histogram ()(_fcgeb [256]int ){for _ecgc :=0;_ecgc < _eca .Width ;_ecgc ++{for _babe :=0;_babe < _eca .Height ;_babe ++{_fcgeb [_eca .GrayAt (_ecgc ,_babe ).Y ]++;
};};return _fcgeb ;};type NRGBA32 struct{ImageBase };func _cc (_bfc ,_ccf *Monochrome )(_cga error ){_ab :=_ccf .BytesPerLine ;_dfe :=_bfc .BytesPerLine ;var _abb ,_eef ,_aa ,_fg ,_fgd int ;for _aa =0;_aa < _ccf .Height ;_aa ++{_abb =_aa *_ab ;_eef =8*_aa *_dfe ;
for _fg =0;_fg < _ab ;_fg ++{if _cga =_bfc .setEightBytes (_eef +_fg *8,_gdb [_ccf .Data [_abb +_fg ]]);_cga !=nil {return _cga ;};};for _fgd =1;_fgd < 8;_fgd ++{for _fg =0;_fg < _dfe ;_fg ++{if _cga =_bfc .setByte (_eef +_fgd *_dfe +_fg ,_bfc .Data [_eef +_fg ]);
_cga !=nil {return _cga ;};};};};return nil ;};func (_bcdc *Monochrome )getBit (_eecca ,_cbfa int )uint8 {return _bcdc .Data [_eecca +(_cbfa >>3)]>>uint (7-(_cbfa &7))&1;};func (_caga *Gray4 )setGray (_dagb int ,_bagg int ,_gbbb _fe .Gray ){_ggcb :=_bagg *_caga .BytesPerLine ;
_acgc :=_ggcb +(_dagb >>1);if _acgc >=len (_caga .Data ){return ;};_ccg :=_gbbb .Y >>4;_caga .Data [_acgc ]=(_caga .Data [_acgc ]&(^(0xf0>>uint (4*(_dagb &1)))))|(_ccg <<uint (4-4*(_dagb &1)));};func (_afggb *NRGBA32 )SetNRGBA (x ,y int ,c _fe .NRGBA ){_efcggg :=y *_afggb .Width +x ;
_caag :=3*_efcggg ;if _caag +2>=len (_afggb .Data ){return ;};_afggb .setRGBA (_efcggg ,c );};func _debegb (_ggab []byte ,_gcgbc Image )error {_feeg :=true ;for _fade :=0;_fade < len (_ggab );_fade ++{if _ggab [_fade ]!=0xff{_feeg =false ;break ;};};if _feeg {switch _cbed :=_gcgbc .(type ){case *NRGBA32 :_cbed .Alpha =nil ;
case *NRGBA64 :_cbed .Alpha =nil ;default:return _db .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_gcgbc );
};};return nil ;};var _ _g .Image =&Gray2 {};func _bdcc (_cgbe _fe .NRGBA64 )_fe .RGBA {_gdbc ,_dbg ,_ccd ,_egd :=_cgbe .RGBA ();return _fe .RGBA {R :uint8 (_gdbc >>8),G :uint8 (_dbg >>8),B :uint8 (_ccd >>8),A :uint8 (_egd >>8)};};func AutoThresholdTriangle (histogram [256]int )uint8 {var _egbcf ,_abfa ,_ddad ,_aabec int ;
for _befae :=0;_befae < len (histogram );_befae ++{if histogram [_befae ]> 0{_egbcf =_befae ;break ;};};if _egbcf > 0{_egbcf --;};for _cdcg :=255;_cdcg > 0;_cdcg --{if histogram [_cdcg ]> 0{_aabec =_cdcg ;break ;};};if _aabec < 255{_aabec ++;};for _cedge :=0;
_cedge < 256;_cedge ++{if histogram [_cedge ]> _abfa {_ddad =_cedge ;_abfa =histogram [_cedge ];};};var _dfcd bool ;if (_ddad -_egbcf )< (_aabec -_ddad ){_dfcd =true ;var _edce int ;_cebd :=255;for _edce < _cebd {_dced :=histogram [_edce ];histogram [_edce ]=histogram [_cebd ];
histogram [_cebd ]=_dced ;_edce ++;_cebd --;};_egbcf =255-_aabec ;_ddad =255-_ddad ;};if _egbcf ==_ddad {return uint8 (_egbcf );};_debec :=float64 (histogram [_ddad ]);_deac :=float64 (_egbcf -_ddad );_ffcf :=_d .Sqrt (_debec *_debec +_deac *_deac );_debec /=_ffcf ;
_deac /=_ffcf ;_ffcf =_debec *float64 (_egbcf )+_deac *float64 (histogram [_egbcf ]);_cbcac :=_egbcf ;var _faeg float64 ;for _fbff :=_egbcf +1;_fbff <=_ddad ;_fbff ++{_ggffd :=_debec *float64 (_fbff )+_deac *float64 (histogram [_fbff ])-_ffcf ;if _ggffd > _faeg {_cbcac =_fbff ;
_faeg =_ggffd ;};};_cbcac --;if _dfcd {var _eafa int ;_dfge :=255;for _eafa < _dfge {_acbg :=histogram [_eafa ];histogram [_eafa ]=histogram [_dfge ];histogram [_dfge ]=_acbg ;_eafa ++;_dfge --;};return uint8 (255-_cbcac );};return uint8 (_cbcac );};func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_fe .RGBA ,error ){_aefac :=y *width +x ;
_dbgb :=3*_aefac ;if _dbgb +2>=len (data ){return _fe .RGBA {},_db .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cefa :=uint8 (0xff);if alpha !=nil &&len (alpha )> _aefac {_cefa =alpha [_aefac ];};_dagfc ,_dfed ,_bagb :=data [_dbgb ],data [_dbgb +1],data [_dbgb +2];if len (decode )==6{_dagfc =uint8 (uint32 (LinearInterpolate (float64 (_dagfc ),0,255,decode [0],decode [1]))&0xff);
_dfed =uint8 (uint32 (LinearInterpolate (float64 (_dfed ),0,255,decode [2],decode [3]))&0xff);_bagb =uint8 (uint32 (LinearInterpolate (float64 (_bagb ),0,255,decode [4],decode [5]))&0xff);};return _fe .RGBA {R :_dagfc ,G :_dfed ,B :_bagb ,A :_cefa },nil ;
};func _adf (_edd ,_fba int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_edd ,_fba ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};func _af (_ed int )[]uint {var _dd []uint ;_bad :=_ed ;_cdad :=_bad /8;if _cdad !=0{for _dag :=0;_dag < _cdad ;
_dag ++{_dd =append (_dd ,8);};_bac :=_bad %8;_bad =0;if _bac !=0{_bad =_bac ;};};_bef :=_bad /4;if _bef !=0{for _fbd :=0;_fbd < _bef ;_fbd ++{_dd =append (_dd ,4);};_edb :=_bad %4;_bad =0;if _edb !=0{_bad =_edb ;};};_cgb :=_bad /2;if _cgb !=0{for _ge :=0;
_ge < _cgb ;_ge ++{_dd =append (_dd ,2);};};return _dd ;};func (_dea *Monochrome )getBitAt (_efcgg ,_fgfc int )bool {_gcb :=_fgfc *_dea .BytesPerLine +(_efcgg >>3);_aefg :=_efcgg &0x07;_bbbd :=uint (7-_aefg );if _gcb > len (_dea .Data )-1{return false ;
};if (_dea .Data [_gcb ]>>_bbbd )&0x01>=1{return true ;};return false ;};type NRGBA16 struct{ImageBase };func _daee (_ecae *_g .Gray ,_bcbbf uint8 )*_g .Gray {_ffffc :=_ecae .Bounds ();_dbccd :=_g .NewGray (_ffffc );for _gegg :=0;_gegg < _ffffc .Dx ();
_gegg ++{for _bbda :=0;_bbda < _ffffc .Dy ();_bbda ++{_ebdg :=_ecae .GrayAt (_gegg ,_bbda );_dbccd .SetGray (_gegg ,_bbda ,_fe .Gray {Y :_gdfe (_ebdg .Y ,_bcbbf )});};};return _dbccd ;};type NRGBA interface{NRGBAAt (_gafdg ,_gcff int )_fe .NRGBA ;SetNRGBA (_fbeg ,_addd int ,_agd _fe .NRGBA );
};func _bfad (_ccbf _g .Image )(Image ,error ){if _fgadg ,_gac :=_ccbf .(*Gray4 );_gac {return _fgadg .Copy (),nil ;};_ecab :=_ccbf .Bounds ();_agfb ,_gafc :=NewImage (_ecab .Max .X ,_ecab .Max .Y ,4,1,nil ,nil ,nil );if _gafc !=nil {return nil ,_gafc ;
};_cage (_ccbf ,_agfb ,_ecab );return _agfb ,nil ;};type NRGBA64 struct{ImageBase };func _gcdb (_dcfa _g .Image )(Image ,error ){if _cfef ,_ebc :=_dcfa .(*Monochrome );_ebc {return _cfef ,nil ;};_deef :=_dcfa .Bounds ();var _adadb Gray ;switch _add :=_dcfa .(type ){case Gray :_adadb =_add ;
case NRGBA :_adadb =&Gray8 {ImageBase :NewImageBase (_deef .Max .X ,_deef .Max .Y ,8,1,nil ,nil ,nil )};_fbad (_adadb ,_add ,_deef );case nrgba64 :_adadb =&Gray8 {ImageBase :NewImageBase (_deef .Max .X ,_deef .Max .Y ,8,1,nil ,nil ,nil )};_gea (_adadb ,_add ,_deef );
default:_eed ,_geb :=GrayConverter .Convert (_dcfa );if _geb !=nil {return nil ,_geb ;};_adadb =_eed .(Gray );};_fda ,_cce :=NewImage (_deef .Max .X ,_deef .Max .Y ,1,1,nil ,nil ,nil );if _cce !=nil {return nil ,_cce ;};_cbg :=_fda .(*Monochrome );_fbb :=AutoThresholdTriangle (GrayHistogram (_adadb ));
for _bfdgg :=0;_bfdgg < _deef .Max .X ;_bfdgg ++{for _dafc :=0;_dafc < _deef .Max .Y ;_dafc ++{_cbdbd :=_cdg (_adadb .GrayAt (_bfdgg ,_dafc ),monochromeModel (_fbb ));_cbg .SetGray (_bfdgg ,_dafc ,_cbdbd );};};return _fda ,nil ;};func (_dcg *Monochrome )copy ()*Monochrome {_cfae :=_adf (_dcg .Width ,_dcg .Height );
_cfae .ModelThreshold =_dcg .ModelThreshold ;_cfae .Data =make ([]byte ,len (_dcg .Data ));copy (_cfae .Data ,_dcg .Data );if len (_dcg .Decode )!=0{_cfae .Decode =make ([]float64 ,len (_dcg .Decode ));copy (_cfae .Decode ,_dcg .Decode );};if len (_dcg .Alpha )!=0{_cfae .Alpha =make ([]byte ,len (_dcg .Alpha ));
copy (_cfae .Alpha ,_dcg .Alpha );};return _cfae ;};func (_abea *Gray16 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_abea .Width ,Y :_abea .Height }};};func _ggff (_accg _fe .Color )_fe .Color {_gbfd :=_fe .GrayModel .Convert (_accg ).(_fe .Gray );
return _ggfa (_gbfd );};func (_efb *CMYK32 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_efb .Width ,Y :_efb .Height }};};func (_gfee *Monochrome )setGrayBit (_cegb ,_dgfa int ){_gfee .Data [_cegb ]|=0x80>>uint (_dgfa &7)};func (_gdda *Gray4 )Base ()*ImageBase {return &_gdda .ImageBase };
var _ Image =&Gray8 {};func (_aaeaf *Monochrome )Histogram ()(_cfa [256]int ){for _ ,_beggb :=range _aaeaf .Data {_cfa [0xff]+=int (_abbd [_aaeaf .Data [_beggb ]]);};return _cfa ;};var _ _g .Image =&Gray16 {};func _agde (_gfff *_g .Gray16 ,_badb uint8 )*_g .Gray {_daa :=_gfff .Bounds ();
_cba :=_g .NewGray (_daa );for _gdeg :=0;_gdeg < _daa .Dx ();_gdeg ++{for _bdbb :=0;_bdbb < _daa .Dy ();_bdbb ++{_ebfa :=_gfff .Gray16At (_gdeg ,_bdbb );_cba .SetGray (_gdeg ,_bdbb ,_fe .Gray {Y :_gdfe (uint8 (_ebfa .Y /256),_badb )});};};return _cba ;
};func _bda (_gdcg int ,_dbcf int )error {return _db .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_gdcg ,_dbcf );
};func (_gaga *NRGBA32 )Set (x ,y int ,c _fe .Color ){_aebe :=y *_gaga .Width +x ;_gcab :=3*_aebe ;if _gcab +2>=len (_gaga .Data ){return ;};_bbcf :=_fe .NRGBAModel .Convert (c ).(_fe .NRGBA );_gaga .setRGBA (_aebe ,_bbcf );};func _gcgda (_gfa NRGBA ,_egdb RGBA ,_acgd _g .Rectangle ){for _cede :=0;
_cede < _acgd .Max .X ;_cede ++{for _cffef :=0;_cffef < _acgd .Max .Y ;_cffef ++{_afdd :=_gfa .NRGBAAt (_cede ,_cffef );_egdb .SetRGBA (_cede ,_cffef ,_gagf (_afdd ));};};};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_fe .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );
case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );
default:return nil ,_db .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};var _ Image =&Monochrome {};func _efca (_afeb _fe .CMYK )_fe .NRGBA {_gfg ,_fbcbe ,_acg :=_fe .CMYKToRGB (_afeb .C ,_afeb .M ,_afeb .Y ,_afeb .K );return _fe .NRGBA {R :_gfg ,G :_fbcbe ,B :_acg ,A :0xff};};type Gray2 struct{ImageBase };func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_fe .NRGBA64 ,error ){_ecbf :=(y *width +x )*2;
_egaec :=_ecbf *3;if _egaec +5>=len (data ){return _fe .NRGBA64 {},_db .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _dcbad =0xffff;_egdg :=uint16 (_dcbad );if alpha !=nil &&len (alpha )> _ecbf +1{_egdg =uint16 (alpha [_ecbf ])<<8|uint16 (alpha [_ecbf +1]);};_ceeg :=uint16 (data [_egaec ])<<8|uint16 (data [_egaec +1]);_bbbbd :=uint16 (data [_egaec +2])<<8|uint16 (data [_egaec +3]);
_fddc :=uint16 (data [_egaec +4])<<8|uint16 (data [_egaec +5]);if len (decode )==6{_ceeg =uint16 (uint64 (LinearInterpolate (float64 (_ceeg ),0,65535,decode [0],decode [1]))&_dcbad );_bbbbd =uint16 (uint64 (LinearInterpolate (float64 (_bbbbd ),0,65535,decode [2],decode [3]))&_dcbad );
_fddc =uint16 (uint64 (LinearInterpolate (float64 (_fddc ),0,65535,decode [4],decode [5]))&_dcbad );};return _fe .NRGBA64 {R :_ceeg ,G :_bbbbd ,B :_fddc ,A :_egdg },nil ;};func _gabb (_acfag RGBA ,_baadf NRGBA ,_egbc _g .Rectangle ){for _eagaf :=0;_eagaf < _egbc .Max .X ;
_eagaf ++{for _dbff :=0;_dbff < _egbc .Max .Y ;_dbff ++{_dbaf :=_acfag .RGBAAt (_eagaf ,_dbff );_baadf .SetNRGBA (_eagaf ,_dbff ,_bgega (_dbaf ));};};};func _bbgf (_egdac *_g .NYCbCrA ,_eefcb NRGBA ,_acfg _g .Rectangle ){for _fbfgf :=0;_fbfgf < _acfg .Max .X ;
_fbfgf ++{for _bgce :=0;_bgce < _acfg .Max .Y ;_bgce ++{_bbaeb :=_egdac .NYCbCrAAt (_fbfgf ,_bgce );_eefcb .SetNRGBA (_fbfgf ,_bgce ,_eced (_bbaeb ));};};};func (_fgcg *Gray8 )ColorAt (x ,y int )(_fe .Color ,error ){return ColorAtGray8BPC (x ,y ,_fgcg .BytesPerLine ,_fgcg .Data ,_fgcg .Decode );
};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fe .Gray ,error ){_ffae :=y *bytesPerLine +x >>2;if _ffae >=len (data ){return _fe .Gray {},_db .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_agbg :=data [_ffae ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_agbg =uint8 (uint32 (LinearInterpolate (float64 (_agbg ),0,3.0,decode [0],decode [1]))&3);};return _fe .Gray {Y :_agbg *85},nil ;};func (_fga *Gray2 )ColorAt (x ,y int )(_fe .Color ,error ){return ColorAtGray2BPC (x ,y ,_fga .BytesPerLine ,_fga .Data ,_fga .Decode );
};func _cdg (_gee _fe .Gray ,_ggf monochromeModel )_fe .Gray {if _gee .Y > uint8 (_ggf ){return _fe .Gray {Y :_d .MaxUint8 };};return _fe .Gray {};};func (_dfee *Gray8 )Set (x ,y int ,c _fe .Color ){_fgag :=y *_dfee .BytesPerLine +x ;if _fgag > len (_dfee .Data )-1{return ;
};_egc :=_fe .GrayModel .Convert (c );_dfee .Data [_fgag ]=_egc .(_fe .Gray ).Y ;};func (_gbff monochromeModel )Convert (c _fe .Color )_fe .Color {_babc :=_fe .GrayModel .Convert (c ).(_fe .Gray );return _cdg (_babc ,_gbff );};type RasterOperator int ;
func (_afebe *NRGBA16 )setNRGBA (_cdfd ,_cdfc ,_bddef int ,_bbce _fe .NRGBA ){if _cdfd *3%2==0{_afebe .Data [_bddef ]=(_bbce .R >>4)<<4|(_bbce .G >>4);_afebe .Data [_bddef +1]=(_bbce .B >>4)<<4|(_afebe .Data [_bddef +1]&0xf);}else {_afebe .Data [_bddef ]=(_afebe .Data [_bddef ]&0xf0)|(_bbce .R >>4);
_afebe .Data [_bddef +1]=(_bbce .G >>4)<<4|(_bbce .B >>4);};if _afebe .Alpha !=nil {_bece :=_cdfc *BytesPerLine (_afebe .Width ,4,1);if _bece < len (_afebe .Alpha ){if _cdfd %2==0{_afebe .Alpha [_bece ]=(_bbce .A >>uint (4))<<uint (4)|(_afebe .Alpha [_bddef ]&0xf);
}else {_afebe .Alpha [_bece ]=(_afebe .Alpha [_bece ]&0xf0)|(_bbce .A >>uint (4));};};};};func _dfd (_cfga _fe .RGBA )_fe .Gray {_acb :=(19595*uint32 (_cfga .R )+38470*uint32 (_cfga .G )+7471*uint32 (_cfga .B )+1<<7)>>16;return _fe .Gray {Y :uint8 (_acb )};
};func (_cddg *NRGBA64 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_cddg .Width ,Y :_cddg .Height }};};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _d .Abs (xmax -xmin )< 0.000001{return ymin ;};_faga :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );
return _faga ;};func (_egffd *Gray4 )SetGray (x ,y int ,g _fe .Gray ){if x >=_egffd .Width ||y >=_egffd .Height {return ;};g =_ggfa (g );_egffd .setGray (x ,y ,g );};func _cbdb (_bbee _fe .NYCbCrA )_fe .RGBA {_eab ,_begg ,_eda ,_ccae :=_eced (_bbee ).RGBA ();
return _fe .RGBA {R :uint8 (_eab >>8),G :uint8 (_begg >>8),B :uint8 (_eda >>8),A :uint8 (_ccae >>8)};};func (_eebe *RGBA32 )ColorModel ()_fe .Model {return _fe .NRGBAModel };func (_bbad *Gray2 )SetGray (x ,y int ,gray _fe .Gray ){_gcfa :=_dfegg (gray );
_gdcf :=y *_bbad .BytesPerLine ;_bbdb :=_gdcf +(x >>2);if _bbdb >=len (_bbad .Data ){return ;};_bfeg :=_gcfa .Y >>6;_bbad .Data [_bbdb ]=(_bbad .Data [_bbdb ]&(^(0xc0>>uint (2*((x )&3)))))|(_bfeg <<uint (6-2*(x &3)));};func init (){_gffe ()};func _gbgf (_gfga *_g .NYCbCrA ,_accc RGBA ,_dgea _g .Rectangle ){for _dcgg :=0;
_dcgg < _dgea .Max .X ;_dcgg ++{for _ggabb :=0;_ggabb < _dgea .Max .Y ;_ggabb ++{_bceb :=_gfga .NYCbCrAAt (_dcgg ,_ggabb );_accc .SetRGBA (_dcgg ,_ggabb ,_cbdb (_bceb ));};};};type Gray4 struct{ImageBase };func ConverterFunc (converterFunc func (_fbc _g .Image )(Image ,error ))ColorConverter {return colorConverter {_gafb :converterFunc };
};func _fdbc (_gddf _fe .Color )_fe .Color {_bbaf :=_fe .NRGBAModel .Convert (_gddf ).(_fe .NRGBA );return _fdab (_bbaf );};func _dfegg (_ebcc _fe .Gray )_fe .Gray {_bbae :=_ebcc .Y >>6;_bbae |=_bbae <<2;_ebcc .Y =_bbae |_bbae <<4;return _ebcc ;};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_bdde :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_bdde .Data =make ([]byte ,height *_bdde .BytesPerLine );};return _bdde ;};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_abg :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _eacd Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_eacd =&Monochrome {ImageBase :_abg ,ModelThreshold :0x0f};case 2:_eacd =&Gray2 {ImageBase :_abg };case 4:_eacd =&Gray4 {ImageBase :_abg };case 8:_eacd =&Gray8 {ImageBase :_abg };
case 16:_eacd =&Gray16 {ImageBase :_abg };};case 3:switch bitsPerComponent {case 4:_eacd =&NRGBA16 {ImageBase :_abg };case 8:_eacd =&NRGBA32 {ImageBase :_abg };case 16:_eacd =&NRGBA64 {ImageBase :_abg };};case 4:_eacd =&CMYK32 {ImageBase :_abg };};if _eacd ==nil {return nil ,ErrInvalidImage ;
};return _eacd ,nil ;};func (_cgcg *Gray16 )Histogram ()(_beb [256]int ){for _cabe :=0;_cabe < _cgcg .Width ;_cabe ++{for _edba :=0;_edba < _cgcg .Height ;_edba ++{_beb [_cgcg .GrayAt (_cabe ,_edba ).Y ]++;};};return _beb ;};func (_bfba *NRGBA64 )Base ()*ImageBase {return &_bfba .ImageBase };
func (_fcge *Monochrome )InverseData ()error {return _fcge .RasterOperation (0,0,_fcge .Width ,_fcge .Height ,PixNotDst ,nil ,0,0);};func _gbbba (_gbga ,_eeag Gray ,_deea _g .Rectangle ){for _bgfb :=0;_bgfb < _deea .Max .X ;_bgfb ++{for _aeb :=0;_aeb < _deea .Max .Y ;
_aeb ++{_eeag .SetGray (_bgfb ,_aeb ,_gbga .GrayAt (_bgfb ,_aeb ));};};};var (_baedg =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_fcdb =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _dcbg (_bfb _fe .Gray )_fe .CMYK {return _fe .CMYK {K :0xff-_bfb .Y }};
func (_gce *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_gce .copy ()}};func (_egff *Gray4 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_egff .Width ,Y :_egff .Height }};};type Image interface{_de .Image ;Base ()*ImageBase ;Copy ()Image ;
Pix ()[]byte ;ColorAt (_gab ,_fafa int )(_fe .Color ,error );Validate ()error ;};func _aegc (_egadg _g .Image )(Image ,error ){if _afga ,_dffe :=_egadg .(*NRGBA16 );_dffe {return _afga .Copy (),nil ;};_cgcb :=_egadg .Bounds ();_bbafd ,_ddfe :=NewImage (_cgcb .Max .X ,_cgcb .Max .Y ,4,3,nil ,nil ,nil );
if _ddfe !=nil {return nil ,_ddfe ;};_babg (_egadg ,_bbafd ,_cgcb );return _bbafd ,nil ;};func (_ecd *NRGBA64 )At (x ,y int )_fe .Color {_baba ,_ :=_ecd .ColorAt (x ,y );return _baba };func _eegg (_cagf _g .Image )(Image ,error ){if _bace ,_becf :=_cagf .(*NRGBA32 );
_becf {return _bace .Copy (),nil ;};_cdda ,_fdcg ,_debeg :=_bcff (_cagf ,1);_eage ,_becdb :=NewImage (_cdda .Max .X ,_cdda .Max .Y ,8,3,nil ,_debeg ,nil );if _becdb !=nil {return nil ,_becdb ;};_babg (_cagf ,_eage ,_cdda );if len (_debeg )!=0&&!_fdcg {if _ffbe :=_debegb (_debeg ,_eage );
_ffbe !=nil {return nil ,_ffbe ;};};return _eage ,nil ;};func (_dcba *ImageBase )copy ()ImageBase {_fcce :=*_dcba ;_fcce .Data =make ([]byte ,len (_dcba .Data ));copy (_fcce .Data ,_dcba .Data );return _fcce ;};func _dcd (_egde _fe .Color )_fe .Color {_cad :=_fe .GrayModel .Convert (_egde ).(_fe .Gray );
return _dfegg (_cad );};func _aeea (_gdf Gray ,_cgf RGBA ,_cdbcf _g .Rectangle ){for _gedc :=0;_gedc < _cdbcf .Max .X ;_gedc ++{for _geeb :=0;_geeb < _cdbcf .Max .Y ;_geeb ++{_adaa :=_gdf .GrayAt (_gedc ,_geeb );_cgf .SetRGBA (_gedc ,_geeb ,_abe (_adaa ));
};};};var _ Image =&Gray4 {};func (_faaf *Gray2 )At (x ,y int )_fe .Color {_ccbd ,_ :=_faaf .ColorAt (x ,y );return _ccbd };type Gray16 struct{ImageBase };func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _gagg (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _adg (_gdd *Monochrome ,_aee int ,_abc []byte )(_cca *Monochrome ,_bea error ){const _ddc ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";if _gdd ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _aee < 1||_aee > 4{return nil ,_c .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _gdd .Height <=1{return nil ,_c .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");
};_cca =_adf (_gdd .Width /2,_gdd .Height /2);if _abc ==nil {_abc =_cffb ();};_cdf :=_bgfg (_gdd .BytesPerLine ,2*_cca .BytesPerLine );switch _aee {case 1:_bea =_faf (_gdd ,_cca ,_abc ,_cdf );case 2:_bea =_cebe (_gdd ,_cca ,_abc ,_cdf );case 3:_bea =_bed (_gdd ,_cca ,_abc ,_cdf );
case 4:_bea =_ebf (_gdd ,_cca ,_abc ,_cdf );};if _bea !=nil {return nil ,_bea ;};return _cca ,nil ;};func _cfdfd (_begcb ,_bfea RGBA ,_cdadgb _g .Rectangle ){for _abbe :=0;_abbe < _cdadgb .Max .X ;_abbe ++{for _gggg :=0;_gggg < _cdadgb .Max .Y ;_gggg ++{_bfea .SetRGBA (_abbe ,_gggg ,_begcb .RGBAAt (_abbe ,_gggg ));
};};};func (_bggf *ImageBase )setTwoBytes (_cabb int ,_fgdc uint16 )error {if _cabb +1> len (_bggf .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_bggf .Data [_cabb ]=byte ((_fgdc &0xff00)>>8);
_bggf .Data [_cabb +1]=byte (_fgdc &0xff);return nil ;};func (_bbdd *ImageBase )getByte (_gfbd int )(byte ,error ){if _gfbd > len (_bbdd .Data )-1||_gfbd < 0{return 0,_db .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_gfbd );
};return _bbdd .Data [_gfbd ],nil ;};func (_daea *NRGBA64 )SetNRGBA64 (x ,y int ,c _fe .NRGBA64 ){_dagf :=(y *_daea .Width +x )*2;_egdef :=_dagf *3;if _egdef +5>=len (_daea .Data ){return ;};_daea .setNRGBA64 (_egdef ,c ,_dagf );};func (_dbd *NRGBA32 )setRGBA (_bdef int ,_dbfc _fe .NRGBA ){_dbcc :=3*_bdef ;
_dbd .Data [_dbcc ]=_dbfc .R ;_dbd .Data [_dbcc +1]=_dbfc .G ;_dbd .Data [_dbcc +2]=_dbfc .B ;if _bdef < len (_dbd .Alpha ){_dbd .Alpha [_bdef ]=_dbfc .A ;};};func (_gafd *Gray4 )ColorModel ()_fe .Model {return Gray4Model };type SMasker interface{HasAlpha ()bool ;
GetAlpha ()[]byte ;MakeAlpha ();};func (_ccdg *Monochrome )ColorModel ()_fe .Model {return MonochromeModel (_ccdg .ModelThreshold )};func _dfgc (_cag _g .Image ,_ffff Image ,_dgd _g .Rectangle ){for _cdb :=0;_cdb < _dgd .Max .X ;_cdb ++{for _bdc :=0;_bdc < _dgd .Max .Y ;
_bdc ++{_aaae :=_cag .At (_cdb ,_bdc );_ffff .Set (_cdb ,_bdc ,_aaae );};};};func _bgb (_aec _fe .RGBA )_fe .CMYK {_aac ,_ggbf ,_bfe ,_bbcg :=_fe .RGBToCMYK (_aec .R ,_aec .G ,_aec .B );return _fe .CMYK {C :_aac ,M :_ggbf ,Y :_bfe ,K :_bbcg };};func (_aeeg *Monochrome )Set (x ,y int ,c _fe .Color ){_acc :=y *_aeeg .BytesPerLine +x >>3;
if _acc > len (_aeeg .Data )-1{return ;};_cdbg :=_aeeg .ColorModel ().Convert (c ).(_fe .Gray );_aeeg .setGray (x ,_cdbg ,_acc );};var (_dcb =_eea ();_efd =_caa ();_gdb =_eebb (););func (_cbggf *Gray16 )SetGray (x ,y int ,g _fe .Gray ){_bgedb :=(y *_cbggf .BytesPerLine /2+x )*2;
if _bgedb +1>=len (_cbggf .Data ){return ;};_cbggf .Data [_bgedb ]=g .Y ;_cbggf .Data [_bgedb +1]=g .Y ;};func _ebf (_eefc ,_bdg *Monochrome ,_dce []byte ,_adc int )(_deca error ){var (_cfe ,_fbac ,_cbdd ,_bge ,_dde ,_gcaf ,_bfae ,_agba int ;_fcgb ,_bcb uint32 ;
_aef ,_afgc byte ;_fefg uint16 ;);_beg :=make ([]byte ,4);_cfdf :=make ([]byte ,4);for _cbdd =0;_cbdd < _eefc .Height -1;_cbdd ,_bge =_cbdd +2,_bge +1{_cfe =_cbdd *_eefc .BytesPerLine ;_fbac =_bge *_bdg .BytesPerLine ;for _dde ,_gcaf =0,0;_dde < _adc ;
_dde ,_gcaf =_dde +4,_gcaf +1{for _bfae =0;_bfae < 4;_bfae ++{_agba =_cfe +_dde +_bfae ;if _agba <=len (_eefc .Data )-1&&_agba < _cfe +_eefc .BytesPerLine {_beg [_bfae ]=_eefc .Data [_agba ];}else {_beg [_bfae ]=0x00;};_agba =_cfe +_eefc .BytesPerLine +_dde +_bfae ;
if _agba <=len (_eefc .Data )-1&&_agba < _cfe +(2*_eefc .BytesPerLine ){_cfdf [_bfae ]=_eefc .Data [_agba ];}else {_cfdf [_bfae ]=0x00;};};_fcgb =_e .BigEndian .Uint32 (_beg );_bcb =_e .BigEndian .Uint32 (_cfdf );_bcb &=_fcgb ;_bcb &=_bcb <<1;_bcb &=0xaaaaaaaa;
_fcgb =_bcb |(_bcb <<7);_aef =byte (_fcgb >>24);_afgc =byte ((_fcgb >>8)&0xff);_agba =_fbac +_gcaf ;if _agba +1==len (_bdg .Data )-1||_agba +1>=_fbac +_bdg .BytesPerLine {_bdg .Data [_agba ]=_dce [_aef ];if _deca =_bdg .setByte (_agba ,_dce [_aef ]);_deca !=nil {return _db .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_agba );
};}else {_fefg =(uint16 (_dce [_aef ])<<8)|uint16 (_dce [_afgc ]);if _deca =_bdg .setTwoBytes (_agba ,_fefg );_deca !=nil {return _db .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_agba );
};_gcaf ++;};};};return nil ;};func _dg (_deg *Monochrome ,_gdc ,_fb int )(*Monochrome ,error ){if _deg ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gdc <=0||_fb <=0{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _gdc ==_fb {if _gdc ==1{return _deg .copy (),nil ;};if _gdc ==2||_gdc ==4||_gdc ==8{_fcg ,_cfg :=_ffe (_deg ,_gdc );if _cfg !=nil {return nil ,_cfg ;};return _fcg ,nil ;};};_fcf :=_gdc *_deg .Width ;_fed :=_fb *_deg .Height ;_bg :=_adf (_fcf ,_fed );
_fef :=_bg .BytesPerLine ;var (_ega ,_ecb ,_ca ,_gg ,_cb int ;_aeg byte ;_agb error ;);for _ecb =0;_ecb < _deg .Height ;_ecb ++{_ega =_fb *_ecb *_fef ;for _ca =0;_ca < _deg .Width ;_ca ++{if _cdac :=_deg .getBitAt (_ca ,_ecb );_cdac {_cb =_gdc *_ca ;for _gg =0;
_gg < _gdc ;_gg ++{_bg .setIndexedBit (_ega *8+_cb +_gg );};};};for _gg =1;_gg < _fb ;_gg ++{_ac :=_ega +_gg *_fef ;for _gbd :=0;_gbd < _fef ;_gbd ++{if _aeg ,_agb =_bg .getByte (_ega +_gbd );_agb !=nil {return nil ,_agb ;};if _agb =_bg .setByte (_ac +_gbd ,_aeg );
_agb !=nil {return nil ,_agb ;};};};};return _bg ,nil ;};func _efba (_bcgd _g .Image )(Image ,error ){if _dfegf ,_caaa :=_bcgd .(*NRGBA64 );_caaa {return _dfegf .Copy (),nil ;};_gbed ,_cgce ,_cdge :=_bcff (_bcgd ,2);_ecfa ,_ggac :=NewImage (_gbed .Max .X ,_gbed .Max .Y ,16,3,nil ,_cdge ,nil );
if _ggac !=nil {return nil ,_ggac ;};_fafe (_bcgd ,_ecfa ,_gbed );if len (_cdge )!=0&&!_cgce {if _gba :=_debegb (_cdge ,_ecfa );_gba !=nil {return nil ,_gba ;};};return _ecfa ,nil ;};func (_bffc *Gray2 )Histogram ()(_efff [256]int ){for _cdbc :=0;_cdbc < _bffc .Width ;
_cdbc ++{for _aabe :=0;_aabe < _bffc .Height ;_aabe ++{_efff [_bffc .GrayAt (_cdbc ,_aabe ).Y ]++;};};return _efff ;};func _fbfcb (_gdae *Monochrome ,_gbgc ,_abed ,_dda ,_dbfa int ,_bbbb RasterOperator ,_eegc *Monochrome ,_aefd ,_dff int )error {var (_cdef byte ;
_dffb int ;_fdef int ;_ceeb ,_ege int ;_edac ,_eecg int ;);_bgfgc :=_dda >>3;_gagb :=_dda &7;if _gagb > 0{_cdef =_baedg [_gagb ];};_dffb =_eegc .BytesPerLine *_dff +(_aefd >>3);_fdef =_gdae .BytesPerLine *_abed +(_gbgc >>3);switch _bbbb {case PixSrc :for _edac =0;
_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]=_eegc .Data [_ceeb ];_ege ++;_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],_eegc .Data [_ceeb ],_cdef );
};};case PixNotSrc :for _edac =0;_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]=^(_eegc .Data [_ceeb ]);_ege ++;_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],^_eegc .Data [_ceeb ],_cdef );
};};case PixSrcOrDst :for _edac =0;_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]|=_eegc .Data [_ceeb ];_ege ++;_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],_eegc .Data [_ceeb ]|_gdae .Data [_ege ],_cdef );
};};case PixSrcAndDst :for _edac =0;_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]&=_eegc .Data [_ceeb ];_ege ++;_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],_eegc .Data [_ceeb ]&_gdae .Data [_ege ],_cdef );
};};case PixSrcXorDst :for _edac =0;_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]^=_eegc .Data [_ceeb ];_ege ++;_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],_eegc .Data [_ceeb ]^_gdae .Data [_ege ],_cdef );
};};case PixNotSrcOrDst :for _edac =0;_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]|=^(_eegc .Data [_ceeb ]);_ege ++;_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],^(_eegc .Data [_ceeb ])|_gdae .Data [_ege ],_cdef );
};};case PixNotSrcAndDst :for _edac =0;_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]&=^(_eegc .Data [_ceeb ]);_ege ++;_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],^(_eegc .Data [_ceeb ])&_gdae .Data [_ege ],_cdef );
};};case PixSrcOrNotDst :for _edac =0;_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]=_eegc .Data [_ceeb ]|^(_gdae .Data [_ege ]);_ege ++;
_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],_eegc .Data [_ceeb ]|^(_gdae .Data [_ege ]),_cdef );};};case PixSrcAndNotDst :for _edac =0;_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;
for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]=_eegc .Data [_ceeb ]&^(_gdae .Data [_ege ]);_ege ++;_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],_eegc .Data [_ceeb ]&^(_gdae .Data [_ege ]),_cdef );};};case PixNotPixSrcOrDst :for _edac =0;
_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]=^(_eegc .Data [_ceeb ]|_gdae .Data [_ege ]);_ege ++;_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],^(_eegc .Data [_ceeb ]|_gdae .Data [_ege ]),_cdef );
};};case PixNotPixSrcAndDst :for _edac =0;_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]=^(_eegc .Data [_ceeb ]&_gdae .Data [_ege ]);_ege ++;
_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],^(_eegc .Data [_ceeb ]&_gdae .Data [_ege ]),_cdef );};};case PixNotPixSrcXorDst :for _edac =0;_edac < _dbfa ;_edac ++{_ceeb =_dffb +_edac *_eegc .BytesPerLine ;_ege =_fdef +_edac *_gdae .BytesPerLine ;
for _eecg =0;_eecg < _bgfgc ;_eecg ++{_gdae .Data [_ege ]=^(_eegc .Data [_ceeb ]^_gdae .Data [_ege ]);_ege ++;_ceeb ++;};if _gagb > 0{_gdae .Data [_ege ]=_ebecd (_gdae .Data [_ege ],^(_eegc .Data [_ceeb ]^_gdae .Data [_ege ]),_cdef );};};default:_b .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_bbbb );
return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_eaff *RGBA32 )SetRGBA (x ,y int ,c _fe .RGBA ){_agg :=y *_eaff .Width +x ;_caff :=3*_agg ;
if _caff +2>=len (_eaff .Data ){return ;};_eaff .setRGBA (_agg ,c );};func (_bdbg *Gray2 )Base ()*ImageBase {return &_bdbg .ImageBase };func _gfdc (_adcd _g .Image )(Image ,error ){if _baag ,_bfgb :=_adcd .(*RGBA32 );_bfgb {return _baag .Copy (),nil ;};
_gefe ,_ggffa ,_fdaf :=_bcff (_adcd ,1);_fgb :=&RGBA32 {ImageBase :NewImageBase (_gefe .Max .X ,_gefe .Max .Y ,8,3,nil ,_fdaf ,nil )};_dgdf (_adcd ,_fgb ,_gefe );if len (_fdaf )!=0&&!_ggffa {if _gdbb :=_debegb (_fdaf ,_fgb );_gdbb !=nil {return nil ,_gdbb ;
};};return _fgb ,nil ;};type monochromeModel uint8 ;func _bbeg (_egabe _g .Image ,_fbbe uint8 )*_g .Gray {_aecg :=_egabe .Bounds ();_egbb :=_g .NewGray (_aecg );var (_fbffe _fe .Color ;_baaac _fe .Gray ;);for _gfgg :=0;_gfgg < _aecg .Max .X ;_gfgg ++{for _fabb :=0;
_fabb < _aecg .Max .Y ;_fabb ++{_fbffe =_egabe .At (_gfgg ,_fabb );_egbb .Set (_gfgg ,_fabb ,_fbffe );_baaac =_egbb .GrayAt (_gfgg ,_fabb );_egbb .SetGray (_gfgg ,_fabb ,_fe .Gray {Y :_gdfe (_baaac .Y ,_fbbe )});};};return _egbb ;};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_fe .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_db .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};type Gray8 struct{ImageBase };func _dee (_dgf ,_fcfb int ,_adgc []byte )*Monochrome {_cfde :=_adf (_dgf ,_fcfb );_cfde .Data =_adgc ;return _cfde ;};func (_aafc *Monochrome )IsUnpadded ()bool {return (_aafc .Width *_aafc .Height )==len (_aafc .Data )};
func _eeaa (_abada NRGBA ,_fege CMYK ,_fff _g .Rectangle ){for _fea :=0;_fea < _fff .Max .X ;_fea ++{for _egb :=0;_egb < _fff .Max .Y ;_egb ++{_cbf :=_abada .NRGBAAt (_fea ,_egb );_fege .SetCMYK (_fea ,_egb ,_ddgf (_cbf ));};};};func (_aegf *NRGBA16 )Validate ()error {if len (_aegf .Data )!=3*_aegf .Width *_aegf .Height /2{return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_gdbe colorConverter )Convert (src _g .Image )(Image ,error ){return _gdbe ._gafb (src )};func _bee (_adaec _fe .NRGBA64 )_fe .Gray {var _efcc _fe .NRGBA64 ;if _adaec ==_efcc {return _fe .Gray {Y :0xff};};_eff ,_feae ,_dcc ,_ :=_adaec .RGBA ();
_cagg :=(19595*_eff +38470*_feae +7471*_dcc +1<<15)>>24;return _fe .Gray {Y :uint8 (_cagg )};};func (_cea *Gray2 )Set (x ,y int ,c _fe .Color ){if x >=_cea .Width ||y >=_cea .Height {return ;};_ecc :=Gray2Model .Convert (c ).(_fe .Gray );_dga :=y *_cea .BytesPerLine ;
_cdeb :=_dga +(x >>2);_ebg :=_ecc .Y >>6;_cea .Data [_cdeb ]=(_cea .Data [_cdeb ]&(^(0xc0>>uint (2*((x )&3)))))|(_ebg <<uint (6-2*(x &3)));};var _ _g .Image =&Gray4 {};func (_bdgc *ImageBase )HasAlpha ()bool {if _bdgc .Alpha ==nil {return false ;};for _becda :=range _bdgc .Alpha {if _bdgc .Alpha [_becda ]!=0xff{return true ;
};};return false ;};func (_aadd *ImageBase )setEightBytes (_accb int ,_bfbb uint64 )error {_ffgcb :=_aadd .BytesPerLine -(_accb %_aadd .BytesPerLine );if _aadd .BytesPerLine !=_aadd .Width >>3{_ffgcb --;};if _ffgcb >=8{return _aadd .setEightFullBytes (_accb ,_bfbb );
};return _aadd .setEightPartlyBytes (_accb ,_ffgcb ,_bfbb );};func _cffb ()(_adae []byte ){_adae =make ([]byte ,256);for _gga :=0;_gga < 256;_gga ++{_edec :=byte (_gga );_adae [_edec ]=(_edec &0x01)|((_edec &0x04)>>1)|((_edec &0x10)>>2)|((_edec &0x40)>>3)|((_edec &0x02)<<3)|((_edec &0x08)<<2)|((_edec &0x20)<<1)|(_edec &0x80);
};return _adae ;};func (_dbeb *Gray8 )Histogram ()(_eeee [256]int ){for _aaca :=0;_aaca < len (_dbeb .Data );_aaca ++{_eeee [_dbeb .Data [_aaca ]]++;};return _eeee ;};func (_eagg *Gray4 )At (x ,y int )_fe .Color {_cgeg ,_ :=_eagg .ColorAt (x ,y );return _cgeg };
type monochromeThresholdConverter struct{Threshold uint8 ;};var _ Gray =&Gray4 {};type shift int ;func _adfa (_ddab ,_bggd NRGBA ,_ddff _g .Rectangle ){for _bcae :=0;_bcae < _ddff .Max .X ;_bcae ++{for _eace :=0;_eace < _ddff .Max .Y ;_eace ++{_bggd .SetNRGBA (_bcae ,_eace ,_ddab .NRGBAAt (_bcae ,_eace ));
};};};func (_agee *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_agee .copy ()}};func (_dacg *Gray8 )Base ()*ImageBase {return &_dacg .ImageBase };func (_egbf *NRGBA32 )Validate ()error {if len (_egbf .Data )!=3*_egbf .Width *_egbf .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ _g .Image =&NRGBA64 {};func _dc (_age ,_dec *Monochrome )(_bf error ){_ceb :=_dec .BytesPerLine ;_eeb :=_age .BytesPerLine ;var (_bfd byte ;_dac uint16 ;_cd ,_fa ,_bc ,_ea ,_ga int ;);for _bc =0;_bc < _dec .Height ;_bc ++{_cd =_bc *_ceb ;
_fa =2*_bc *_eeb ;for _ea =0;_ea < _ceb ;_ea ++{_bfd =_dec .Data [_cd +_ea ];_dac =_dcb [_bfd ];_ga =_fa +_ea *2;if _age .BytesPerLine !=_dec .BytesPerLine *2&&(_ea +1)*2> _age .BytesPerLine {_bf =_age .setByte (_ga ,byte (_dac >>8));}else {_bf =_age .setTwoBytes (_ga ,_dac );
};if _bf !=nil {return _bf ;};};for _ea =0;_ea < _eeb ;_ea ++{_ga =_fa +_eeb +_ea ;_bfd =_age .Data [_fa +_ea ];if _bf =_age .setByte (_ga ,_bfd );_bf !=nil {return _bf ;};};};return nil ;};func _fdab (_decf _fe .NRGBA )_fe .NRGBA {_decf .R =_decf .R >>4|(_decf .R >>4)<<4;
_decf .G =_decf .G >>4|(_decf .G >>4)<<4;_decf .B =_decf .B >>4|(_decf .B >>4)<<4;return _decf ;};func (_feaeb *RGBA32 )Validate ()error {if len (_feaeb .Data )!=3*_feaeb .Width *_feaeb .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _gagf (_gbg _fe .NRGBA )_fe .RGBA {_ebfg ,_eag ,_ddd ,_ffgc :=_gbg .RGBA ();return _fe .RGBA {R :uint8 (_ebfg >>8),G :uint8 (_eag >>8),B :uint8 (_ddd >>8),A :uint8 (_ffgc >>8)};};func _dgdf (_acce _g .Image ,_aagb Image ,_cagfb _g .Rectangle ){if _dgfg ,_bbga :=_acce .(SMasker );
_bbga &&_dgfg .HasAlpha (){_aagb .(SMasker ).MakeAlpha ();};switch _begc :=_acce .(type ){case Gray :_aeea (_begc ,_aagb .(RGBA ),_cagfb );case NRGBA :_gcgda (_begc ,_aagb .(RGBA ),_cagfb );case *_g .NYCbCrA :_gbgf (_begc ,_aagb .(RGBA ),_cagfb );case CMYK :_edfd (_begc ,_aagb .(RGBA ),_cagfb );
case RGBA :_cfdfd (_begc ,_aagb .(RGBA ),_cagfb );case nrgba64 :_dbced (_begc ,_aagb .(RGBA ),_cagfb );default:_dfgc (_acce ,_aagb ,_cagfb );};};func (_cgcc *NRGBA16 )Base ()*ImageBase {return &_cgcc .ImageBase };var _ _g .Image =&NRGBA16 {};func _gd (_ae ,_eg *Monochrome )(_ef error ){_ba :=_eg .BytesPerLine ;
_deb :=_ae .BytesPerLine ;_cfd :=_eg .BytesPerLine *4-_ae .BytesPerLine ;var (_ad ,_bfg byte ;_gcd uint32 ;_fee ,_cda ,_eee ,_bag ,_feg ,_dbf ,_be int ;);for _eee =0;_eee < _eg .Height ;_eee ++{_fee =_eee *_ba ;_cda =4*_eee *_deb ;for _bag =0;_bag < _ba ;
_bag ++{_ad =_eg .Data [_fee +_bag ];_gcd =_efd [_ad ];_dbf =_cda +_bag *4;if _cfd !=0&&(_bag +1)*4> _ae .BytesPerLine {for _feg =_cfd ;_feg > 0;_feg --{_bfg =byte ((_gcd >>uint (_feg *8))&0xff);_be =_dbf +(_cfd -_feg );if _ef =_ae .setByte (_be ,_bfg );
_ef !=nil {return _ef ;};};}else if _ef =_ae .setFourBytes (_dbf ,_gcd );_ef !=nil {return _ef ;};if _ef =_ae .setFourBytes (_cda +_bag *4,_efd [_eg .Data [_fee +_bag ]]);_ef !=nil {return _ef ;};};for _feg =1;_feg < 4;_feg ++{for _bag =0;_bag < _deb ;
_bag ++{if _ef =_ae .setByte (_cda +_feg *_deb +_bag ,_ae .Data [_cda +_bag ]);_ef !=nil {return _ef ;};};};};return nil ;};var _ Gray =&Gray2 {};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_fe .NRGBA ,error ){_dcee :=y *width +x ;
_ceaa :=3*_dcee ;if _ceaa +2>=len (data ){return _fe .NRGBA {},_db .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gdaf :=uint8 (0xff);if alpha !=nil &&len (alpha )> _dcee {_gdaf =alpha [_dcee ];};_adce ,_edea ,_bgfgf :=data [_ceaa ],data [_ceaa +1],data [_ceaa +2];if len (decode )==6{_adce =uint8 (uint32 (LinearInterpolate (float64 (_adce ),0,255,decode [0],decode [1]))&0xff);
_edea =uint8 (uint32 (LinearInterpolate (float64 (_edea ),0,255,decode [2],decode [3]))&0xff);_bgfgf =uint8 (uint32 (LinearInterpolate (float64 (_bgfgf ),0,255,decode [4],decode [5]))&0xff);};return _fe .NRGBA {R :_adce ,G :_edea ,B :_bgfgf ,A :_gdaf },nil ;
};func _gdfe (_ebbd ,_agcad uint8 )uint8 {if _ebbd < _agcad {return 255;};return 0;};var ErrInvalidImage =_c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func _gea (_adcb Gray ,_ddf nrgba64 ,_edg _g .Rectangle ){for _agbbc :=0;_agbbc < _edg .Max .X ;_agbbc ++{for _ecg :=0;_ecg < _edg .Max .Y ;_ecg ++{_efdgf :=_bee (_ddf .NRGBA64At (_agbbc ,_ecg ));_adcb .SetGray (_agbbc ,_ecg ,_efdgf );};};};func (_eedd *Gray16 )Set (x ,y int ,c _fe .Color ){_feaa :=(y *_eedd .BytesPerLine /2+x )*2;
if _feaa +1>=len (_eedd .Data ){return ;};_cbca :=_fe .Gray16Model .Convert (c ).(_fe .Gray16 );_eedd .Data [_feaa ],_eedd .Data [_feaa +1]=uint8 (_cbca .Y >>8),uint8 (_cbca .Y &0xff);};func _bgfg (_faac int ,_cegg int )int {if _faac < _cegg {return _faac ;
};return _cegg ;};func (_adde *Gray16 )ColorAt (x ,y int )(_fe .Color ,error ){return ColorAtGray16BPC (x ,y ,_adde .BytesPerLine ,_adde .Data ,_adde .Decode );};func (_gec *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _fgg bool ;_cgg :=scale ;
if scale < 1{_cgg =1/scale ;_fgg =true ;};_dad :=NextPowerOf2 (uint (_cgg ));if InDelta (float64 (_dad ),_cgg ,0.001){if _fgg {return _gec .ReduceBinary (_cgg );};return _gec .ExpandBinary (int (_dad ));};_gae :=int (_d .RoundToEven (float64 (_gec .Width )*scale ));
_dcce :=int (_d .RoundToEven (float64 (_gec .Height )*scale ));return _gec .ScaleLow (_gae ,_dcce );};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_da :=BytesPerLine (width ,8,1);if len (data )< _da *height {return nil ,nil ;
};_cg :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_gc ,_ff :=MonochromeConverter .Convert (_cg );if _ff !=nil {return nil ,_ff ;};return _gc .Base ().Data ,nil ;};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };
};func _ebad (_bcca *Monochrome ,_ffcc ,_ccde ,_acd ,_faab int ,_bbfd RasterOperator ,_dfgg *Monochrome ,_dgbe ,_egbd int )error {var (_cggf bool ;_cagc bool ;_ddee int ;_fafg int ;_fgcf int ;_eggc bool ;_dcfg byte ;_eaf int ;_ccc int ;_afcd int ;_ebec ,_gcdf int ;
);_bcgag :=8-(_ffcc &7);_egbeb :=_fcdb [_bcgag ];_ceed :=_bcca .BytesPerLine *_ccde +(_ffcc >>3);_eaed :=_dfgg .BytesPerLine *_egbd +(_dgbe >>3);if _acd < _bcgag {_cggf =true ;_egbeb &=_baedg [8-_bcgag +_acd ];};if !_cggf {_ddee =(_acd -_bcgag )>>3;if _ddee > 0{_cagc =true ;
_fafg =_ceed +1;_fgcf =_eaed +1;};};_eaf =(_ffcc +_acd )&7;if !(_cggf ||_eaf ==0){_eggc =true ;_dcfg =_baedg [_eaf ];_ccc =_ceed +1+_ddee ;_afcd =_eaed +1+_ddee ;};switch _bbfd {case PixSrc :for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],_dfgg .Data [_eaed ],_egbeb );
_ceed +=_bcca .BytesPerLine ;_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]=_dfgg .Data [_fgcf +_gcdf ];};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;
};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],_dfgg .Data [_afcd ],_dcfg );_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;};};case PixNotSrc :for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],^_dfgg .Data [_eaed ],_egbeb );
_ceed +=_bcca .BytesPerLine ;_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]=^_dfgg .Data [_fgcf +_gcdf ];};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;
};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],^_dfgg .Data [_afcd ],_dcfg );_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;};};case PixSrcOrDst :for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],_dfgg .Data [_eaed ]|_bcca .Data [_ceed ],_egbeb );
_ceed +=_bcca .BytesPerLine ;_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]|=_dfgg .Data [_fgcf +_gcdf ];};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;
};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],_dfgg .Data [_afcd ]|_bcca .Data [_ccc ],_dcfg );_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;};};case PixSrcAndDst :for _ebec =0;_ebec < _faab ;
_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],_dfgg .Data [_eaed ]&_bcca .Data [_ceed ],_egbeb );_ceed +=_bcca .BytesPerLine ;_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]&=_dfgg .Data [_fgcf +_gcdf ];
};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],_dfgg .Data [_afcd ]&_bcca .Data [_ccc ],_dcfg );_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;
};};case PixSrcXorDst :for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],_dfgg .Data [_eaed ]^_bcca .Data [_ceed ],_egbeb );_ceed +=_bcca .BytesPerLine ;_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;
_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]^=_dfgg .Data [_fgcf +_gcdf ];};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],_dfgg .Data [_afcd ]^_bcca .Data [_ccc ],_dcfg );
_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;};};case PixNotSrcOrDst :for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],^(_dfgg .Data [_eaed ])|_bcca .Data [_ceed ],_egbeb );_ceed +=_bcca .BytesPerLine ;
_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]|=^(_dfgg .Data [_fgcf +_gcdf ]);};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;};};if _eggc {for _ebec =0;
_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],^(_dfgg .Data [_afcd ])|_bcca .Data [_ccc ],_dcfg );_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;};};case PixNotSrcAndDst :for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],^(_dfgg .Data [_eaed ])&_bcca .Data [_ceed ],_egbeb );
_ceed +=_bcca .BytesPerLine ;_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]&=^_dfgg .Data [_fgcf +_gcdf ];};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;
};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],^(_dfgg .Data [_afcd ])&_bcca .Data [_ccc ],_dcfg );_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;};};case PixSrcOrNotDst :for _ebec =0;_ebec < _faab ;
_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],_dfgg .Data [_eaed ]|^(_bcca .Data [_ceed ]),_egbeb );_ceed +=_bcca .BytesPerLine ;_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]=_dfgg .Data [_fgcf +_gcdf ]|^(_bcca .Data [_fafg +_gcdf ]);
};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],_dfgg .Data [_afcd ]|^(_bcca .Data [_ccc ]),_dcfg );_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;
};};case PixSrcAndNotDst :for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],_dfgg .Data [_eaed ]&^(_bcca .Data [_ceed ]),_egbeb );_ceed +=_bcca .BytesPerLine ;_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;
_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]=_dfgg .Data [_fgcf +_gcdf ]&^(_bcca .Data [_fafg +_gcdf ]);};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],_dfgg .Data [_afcd ]&^(_bcca .Data [_ccc ]),_dcfg );
_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;};};case PixNotPixSrcOrDst :for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],^(_dfgg .Data [_eaed ]|_bcca .Data [_ceed ]),_egbeb );_ceed +=_bcca .BytesPerLine ;
_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]=^(_dfgg .Data [_fgcf +_gcdf ]|_bcca .Data [_fafg +_gcdf ]);};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;
};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],^(_dfgg .Data [_afcd ]|_bcca .Data [_ccc ]),_dcfg );_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;};};case PixNotPixSrcAndDst :for _ebec =0;_ebec < _faab ;
_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],^(_dfgg .Data [_eaed ]&_bcca .Data [_ceed ]),_egbeb );_ceed +=_bcca .BytesPerLine ;_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;_ebec < _faab ;_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]=^(_dfgg .Data [_fgcf +_gcdf ]&_bcca .Data [_fafg +_gcdf ]);
};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],^(_dfgg .Data [_afcd ]&_bcca .Data [_ccc ]),_dcfg );_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;
};};case PixNotPixSrcXorDst :for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ceed ]=_ebecd (_bcca .Data [_ceed ],^(_dfgg .Data [_eaed ]^_bcca .Data [_ceed ]),_egbeb );_ceed +=_bcca .BytesPerLine ;_eaed +=_dfgg .BytesPerLine ;};if _cagc {for _ebec =0;
_ebec < _faab ;_ebec ++{for _gcdf =0;_gcdf < _ddee ;_gcdf ++{_bcca .Data [_fafg +_gcdf ]=^(_dfgg .Data [_fgcf +_gcdf ]^_bcca .Data [_fafg +_gcdf ]);};_fafg +=_bcca .BytesPerLine ;_fgcf +=_dfgg .BytesPerLine ;};};if _eggc {for _ebec =0;_ebec < _faab ;_ebec ++{_bcca .Data [_ccc ]=_ebecd (_bcca .Data [_ccc ],^(_dfgg .Data [_afcd ]^_bcca .Data [_ccc ]),_dcfg );
_ccc +=_bcca .BytesPerLine ;_afcd +=_dfgg .BytesPerLine ;};};default:_b .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_bbfd );return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func IsGrayImgBlackAndWhite (i *_g .Gray )bool {return _eddc (i )};func (_eaae *RGBA32 )At (x ,y int )_fe .Color {_fcfaf ,_ :=_eaae .ColorAt (x ,y );return _fcfaf };func (_faa *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_faa .copy ()}};
type Gray interface{GrayAt (_cdca ,_gbe int )_fe .Gray ;SetGray (_edc ,_gbdg int ,_edeg _fe .Gray );};func _geea (_cgbec _g .Image )(Image ,error ){if _addf ,_dagc :=_cgbec .(*Gray16 );_dagc {return _addf .Copy (),nil ;};_abde :=_cgbec .Bounds ();_ceaf ,_cgag :=NewImage (_abde .Max .X ,_abde .Max .Y ,16,1,nil ,nil ,nil );
if _cgag !=nil {return nil ,_cgag ;};_cage (_cgbec ,_ceaf ,_abde );return _ceaf ,nil ;};func _eddc (_fgef *_g .Gray )bool {for _eaab :=0;_eaab < len (_fgef .Pix );_eaab ++{if !_eeccac (_fgef .Pix [_eaab ]){return false ;};};return true ;};func (_cbdbb *RGBA32 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_cbdbb .Width ,Y :_cbdbb .Height }};
};func _cbcg (_cgcf NRGBA ,_gfb Gray ,_cbgd _g .Rectangle ){for _ggcbf :=0;_ggcbf < _cbgd .Max .X ;_ggcbf ++{for _eggf :=0;_eggf < _cbgd .Max .Y ;_eggf ++{_cdcag :=_cab (_cgcf .NRGBAAt (_ggcbf ,_eggf ));_gfb .SetGray (_ggcbf ,_eggf ,_cdcag );};};};func (_gaggg *RGBA32 )RGBAAt (x ,y int )_fe .RGBA {_adac ,_ :=ColorAtRGBA32 (x ,y ,_gaggg .Width ,_gaggg .Data ,_gaggg .Alpha ,_gaggg .Decode );
return _adac ;};var _ Gray =&Monochrome {};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_fe .CMYK ,error ){_bgc :=4*(y *width +x );if _bgc +3>=len (data ){return _fe .CMYK {},_db .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_bgc ]&0xff;M :=data [_bgc +1]&0xff;Y :=data [_bgc +2]&0xff;K :=data [_bgc +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _fe .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_edee *ImageBase )newAlpha (){_cacb :=BytesPerLine (_edee .Width ,_edee .BitsPerComponent ,1);
_edee .Alpha =make ([]byte ,_edee .Height *_cacb );};func (_bagd *NRGBA16 )ColorModel ()_fe .Model {return NRGBA16Model };var _ RGBA =&RGBA32 {};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_gece (n )+1);};func _cgd (_adad _fe .CMYK )_fe .RGBA {_baed ,_ffd ,_abd :=_fe .CMYKToRGB (_adad .C ,_adad .M ,_adad .Y ,_adad .K );
return _fe .RGBA {R :_baed ,G :_ffd ,B :_abd ,A :0xff};};func (_fcgba *Monochrome )setGray (_gcge int ,_ffde _fe .Gray ,_acea int ){if _ffde .Y ==0{_fcgba .clearBit (_acea ,_gcge );}else {_fcgba .setGrayBit (_acea ,_gcge );};};func (_eafc *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_eafc .copy ()}};
func _degf (_deaa Gray ,_fdee NRGBA ,_efcfe _g .Rectangle ){for _abf :=0;_abf < _efcfe .Max .X ;_abf ++{for _acee :=0;_acee < _efcfe .Max .Y ;_acee ++{_ecffg :=_deaa .GrayAt (_abf ,_acee );_fdee .SetNRGBA (_abf ,_acee ,_gbfb (_ecffg ));};};};func _baeb (_cfcba *Monochrome ,_ddfd ,_bddb int ,_begb ,_abcg int ,_bceg RasterOperator ){var (_feda bool ;
_egad bool ;_dacga int ;_cedc int ;_ecag int ;_ccee int ;_efgd bool ;_ggcf byte ;);_cgea :=8-(_ddfd &7);_ddeb :=_fcdb [_cgea ];_gebeg :=_cfcba .BytesPerLine *_bddb +(_ddfd >>3);if _begb < _cgea {_feda =true ;_ddeb &=_baedg [8-_cgea +_begb ];};if !_feda {_dacga =(_begb -_cgea )>>3;
if _dacga !=0{_egad =true ;_cedc =_gebeg +1;};};_ecag =(_ddfd +_begb )&7;if !(_feda ||_ecag ==0){_efgd =true ;_ggcf =_baedg [_ecag ];_ccee =_gebeg +1+_dacga ;};var _afgg ,_ceebe int ;switch _bceg {case PixClr :for _afgg =0;_afgg < _abcg ;_afgg ++{_cfcba .Data [_gebeg ]=_ebecd (_cfcba .Data [_gebeg ],0x0,_ddeb );
_gebeg +=_cfcba .BytesPerLine ;};if _egad {for _afgg =0;_afgg < _abcg ;_afgg ++{for _ceebe =0;_ceebe < _dacga ;_ceebe ++{_cfcba .Data [_cedc +_ceebe ]=0x0;};_cedc +=_cfcba .BytesPerLine ;};};if _efgd {for _afgg =0;_afgg < _abcg ;_afgg ++{_cfcba .Data [_ccee ]=_ebecd (_cfcba .Data [_ccee ],0x0,_ggcf );
_ccee +=_cfcba .BytesPerLine ;};};case PixSet :for _afgg =0;_afgg < _abcg ;_afgg ++{_cfcba .Data [_gebeg ]=_ebecd (_cfcba .Data [_gebeg ],0xff,_ddeb );_gebeg +=_cfcba .BytesPerLine ;};if _egad {for _afgg =0;_afgg < _abcg ;_afgg ++{for _ceebe =0;_ceebe < _dacga ;
_ceebe ++{_cfcba .Data [_cedc +_ceebe ]=0xff;};_cedc +=_cfcba .BytesPerLine ;};};if _efgd {for _afgg =0;_afgg < _abcg ;_afgg ++{_cfcba .Data [_ccee ]=_ebecd (_cfcba .Data [_ccee ],0xff,_ggcf );_ccee +=_cfcba .BytesPerLine ;};};case PixNotDst :for _afgg =0;
_afgg < _abcg ;_afgg ++{_cfcba .Data [_gebeg ]=_ebecd (_cfcba .Data [_gebeg ],^_cfcba .Data [_gebeg ],_ddeb );_gebeg +=_cfcba .BytesPerLine ;};if _egad {for _afgg =0;_afgg < _abcg ;_afgg ++{for _ceebe =0;_ceebe < _dacga ;_ceebe ++{_cfcba .Data [_cedc +_ceebe ]=^(_cfcba .Data [_cedc +_ceebe ]);
};_cedc +=_cfcba .BytesPerLine ;};};if _efgd {for _afgg =0;_afgg < _abcg ;_afgg ++{_cfcba .Data [_ccee ]=_ebecd (_cfcba .Data [_ccee ],^_cfcba .Data [_ccee ],_ggcf );_ccee +=_cfcba .BytesPerLine ;};};};};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_fe .NRGBA ,error ){_acga :=y *bytesPerLine +x *3/2;
if _acga +1>=len (data ){return _fe .NRGBA {},_bda (x ,y );};const (_ebdb =0xf;_daba =uint8 (0xff););_cccg :=_daba ;if alpha !=nil {_edfbd :=y *BytesPerLine (width ,4,1);if _edfbd < len (alpha ){if x %2==0{_cccg =(alpha [_edfbd ]>>uint (4))&_ebdb ;}else {_cccg =alpha [_edfbd ]&_ebdb ;
};_cccg |=_cccg <<4;};};var _cebg ,_gaca ,_gcba uint8 ;if x *3%2==0{_cebg =(data [_acga ]>>uint (4))&_ebdb ;_gaca =data [_acga ]&_ebdb ;_gcba =(data [_acga +1]>>uint (4))&_ebdb ;}else {_cebg =data [_acga ]&_ebdb ;_gaca =(data [_acga +1]>>uint (4))&_ebdb ;
_gcba =data [_acga +1]&_ebdb ;};if len (decode )==6{_cebg =uint8 (uint32 (LinearInterpolate (float64 (_cebg ),0,15,decode [0],decode [1]))&0xf);_gaca =uint8 (uint32 (LinearInterpolate (float64 (_gaca ),0,15,decode [2],decode [3]))&0xf);_gcba =uint8 (uint32 (LinearInterpolate (float64 (_gcba ),0,15,decode [4],decode [5]))&0xf);
};return _fe .NRGBA {R :(_cebg <<4)|(_cebg &0xf),G :(_gaca <<4)|(_gaca &0xf),B :(_gcba <<4)|(_gcba &0xf),A :_cccg },nil ;};func _agea (_dcfc *Monochrome ,_bdca ,_aaaef ,_gfea ,_adcff int ,_bcbf RasterOperator ){if _bdca < 0{_gfea +=_bdca ;_bdca =0;};_addb :=_bdca +_gfea -_dcfc .Width ;
if _addb > 0{_gfea -=_addb ;};if _aaaef < 0{_adcff +=_aaaef ;_aaaef =0;};_ddeef :=_aaaef +_adcff -_dcfc .Height ;if _ddeef > 0{_adcff -=_ddeef ;};if _gfea <=0||_adcff <=0{return ;};if (_bdca &7)==0{_fddgg (_dcfc ,_bdca ,_aaaef ,_gfea ,_adcff ,_bcbf );}else {_baeb (_dcfc ,_bdca ,_aaaef ,_gfea ,_adcff ,_bcbf );
};};func (_cbgc *Gray16 )Base ()*ImageBase {return &_cbgc .ImageBase };func (_deaf *ImageBase )setEightPartlyBytes (_fag ,_gadg int ,_cacbd uint64 )(_fbfa error ){var (_aeef byte ;_edda int ;);for _efcf :=1;_efcf <=_gadg ;_efcf ++{_edda =64-_efcf *8;_aeef =byte (_cacbd >>uint (_edda )&0xff);
if _fbfa =_deaf .setByte (_fag +_efcf -1,_aeef );_fbfa !=nil {return _fbfa ;};};_dfdfe :=_deaf .BytesPerLine *8-_deaf .Width ;if _dfdfe ==0{return nil ;};_edda -=8;_aeef =byte (_cacbd >>uint (_edda )&0xff)<<uint (_dfdfe );if _fbfa =_deaf .setByte (_fag +_gadg ,_aeef );
_fbfa !=nil {return _fbfa ;};return nil ;};func _bgega (_dccf _fe .RGBA )_fe .NRGBA {switch _dccf .A {case 0xff:return _fe .NRGBA {R :_dccf .R ,G :_dccf .G ,B :_dccf .B ,A :0xff};case 0x00:return _fe .NRGBA {};default:_cfc ,_fcfa ,_fdc ,_bafb :=_dccf .RGBA ();
_cfc =(_cfc *0xffff)/_bafb ;_fcfa =(_fcfa *0xffff)/_bafb ;_fdc =(_fdc *0xffff)/_bafb ;return _fe .NRGBA {R :uint8 (_cfc >>8),G :uint8 (_fcfa >>8),B :uint8 (_fdc >>8),A :uint8 (_bafb >>8)};};};func (_dbebg *NRGBA64 )NRGBA64At (x ,y int )_fe .NRGBA64 {_ebb ,_ :=ColorAtNRGBA64 (x ,y ,_dbebg .Width ,_dbebg .Data ,_dbebg .Alpha ,_dbebg .Decode );
return _ebb ;};func (_bdgg *NRGBA64 )ColorModel ()_fe .Model {return _fe .NRGBA64Model };func _ffe (_gb *Monochrome ,_bb int )(*Monochrome ,error ){if _gb ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bb ==1{return _gb .copy (),nil ;};if !IsPowerOf2 (uint (_bb )){return nil ,_db .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_bb );
};_df :=_af (_bb );return _bbb (_gb ,_bb ,_df );};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_adcce :=BytesPerLine (width ,bitsPerComponent ,colorComponents );if _adcce ==width *colorComponents *bitsPerComponent /8{return data ,nil ;
};_bfcc :=width *colorComponents *bitsPerComponent ;_aaef :=_adcce *8;_dggg :=8-(_aaef -_bfcc );_bdfc :=_ce .NewReader (data );_dbbe :=_adcce -1;_ffdc :=make ([]byte ,_dbbe );_agca :=make ([]byte ,height *_adcce );_fgcc :=_ce .NewWriterMSB (_agca );var _bdfcc uint64 ;
var _aefcd error ;for _geaf :=0;_geaf < height ;_geaf ++{_ ,_aefcd =_bdfc .Read (_ffdc );if _aefcd !=nil {return nil ,_aefcd ;};_ ,_aefcd =_fgcc .Write (_ffdc );if _aefcd !=nil {return nil ,_aefcd ;};_bdfcc ,_aefcd =_bdfc .ReadBits (byte (_dggg ));if _aefcd !=nil {return nil ,_aefcd ;
};_ ,_aefcd =_fgcc .WriteBits (_bdfcc ,_dggg );if _aefcd !=nil {return nil ,_aefcd ;};_fgcc .FinishByte ();};return _agca ,nil ;};func (_bfgd *Monochrome )GrayAt (x ,y int )_fe .Gray {_aafcd ,_ :=ColorAtGray1BPC (x ,y ,_bfgd .BytesPerLine ,_bfgd .Data ,_bfgd .Decode );
return _aafcd ;};func (_ddcf *ImageBase )GetAlpha ()[]byte {return _ddcf .Alpha };func _faf (_fab ,_baf *Monochrome ,_fabf []byte ,_aaa int )(_daeb error ){var (_fbag ,_dca ,_fdd ,_dcf ,_dfc ,_gaf ,_ace ,_fcd int ;_eec ,_fbg uint32 ;_efc ,_ffg byte ;_cbd uint16 ;
);_agf :=make ([]byte ,4);_agaf :=make ([]byte ,4);for _fdd =0;_fdd < _fab .Height -1;_fdd ,_dcf =_fdd +2,_dcf +1{_fbag =_fdd *_fab .BytesPerLine ;_dca =_dcf *_baf .BytesPerLine ;for _dfc ,_gaf =0,0;_dfc < _aaa ;_dfc ,_gaf =_dfc +4,_gaf +1{for _ace =0;
_ace < 4;_ace ++{_fcd =_fbag +_dfc +_ace ;if _fcd <=len (_fab .Data )-1&&_fcd < _fbag +_fab .BytesPerLine {_agf [_ace ]=_fab .Data [_fcd ];}else {_agf [_ace ]=0x00;};_fcd =_fbag +_fab .BytesPerLine +_dfc +_ace ;if _fcd <=len (_fab .Data )-1&&_fcd < _fbag +(2*_fab .BytesPerLine ){_agaf [_ace ]=_fab .Data [_fcd ];
}else {_agaf [_ace ]=0x00;};};_eec =_e .BigEndian .Uint32 (_agf );_fbg =_e .BigEndian .Uint32 (_agaf );_fbg |=_eec ;_fbg |=_fbg <<1;_fbg &=0xaaaaaaaa;_eec =_fbg |(_fbg <<7);_efc =byte (_eec >>24);_ffg =byte ((_eec >>8)&0xff);_fcd =_dca +_gaf ;if _fcd +1==len (_baf .Data )-1||_fcd +1>=_dca +_baf .BytesPerLine {_baf .Data [_fcd ]=_fabf [_efc ];
}else {_cbd =(uint16 (_fabf [_efc ])<<8)|uint16 (_fabf [_ffg ]);if _daeb =_baf .setTwoBytes (_fcd ,_cbd );_daeb !=nil {return _db .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fcd );
};_gaf ++;};};};return nil ;};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func (_adcf *CMYK32 )Validate ()error {if len (_adcf .Data )!=4*_adcf .Width *_adcf .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_bfgc *Monochrome )Base ()*ImageBase {return &_bfgc .ImageBase };func (_eedg *Gray8 )ColorModel ()_fe .Model {return _fe .GrayModel };func (_ggce *CMYK32 )ColorAt (x ,y int )(_fe .Color ,error ){return ColorAtCMYK (x ,y ,_ggce .Width ,_ggce .Data ,_ggce .Decode );
};func _dbced (_edaaa nrgba64 ,_fadg RGBA ,_gcdda _g .Rectangle ){for _fdeff :=0;_fdeff < _gcdda .Max .X ;_fdeff ++{for _afcg :=0;_afcg < _gcdda .Max .Y ;_afcg ++{_ddfbc :=_edaaa .NRGBA64At (_fdeff ,_afcg );_fadg .SetRGBA (_fdeff ,_afcg ,_bdcc (_ddfbc ));
};};};var _ _g .Image =&NRGBA32 {};func (_geac *Gray2 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_geac .Width ,Y :_geac .Height }};};var _ NRGBA =&NRGBA32 {};func _dfeg (_dbb RGBA ,_ggdb CMYK ,_ead _g .Rectangle ){for _fdfc :=0;_fdfc < _ead .Max .X ;
_fdfc ++{for _eeffd :=0;_eeffd < _ead .Max .Y ;_eeffd ++{_afe :=_dbb .RGBAAt (_fdfc ,_eeffd );_ggdb .SetCMYK (_fdfc ,_eeffd ,_bgb (_afe ));};};};func (_cfdg *RGBA32 )ColorAt (x ,y int )(_fe .Color ,error ){return ColorAtRGBA32 (x ,y ,_cfdg .Width ,_cfdg .Data ,_cfdg .Alpha ,_cfdg .Decode );
};func _gece (_cged uint )uint {var _ebga uint ;for _cged !=0{_cged >>=1;_ebga ++;};return _ebga -1;};func (_dgeg *NRGBA32 )Base ()*ImageBase {return &_dgeg .ImageBase };func _bdda (_eecb _fe .NRGBA )_fe .Gray {var _gcf _fe .NRGBA ;if _eecb ==_gcf {return _fe .Gray {Y :0xff};
};_bddc ,_bec ,_bbe ,_ :=_eecb .RGBA ();_acec :=(19595*_bddc +38470*_bec +7471*_bbe +1<<15)>>24;return _fe .Gray {Y :uint8 (_acec )};};func (_bdb *CMYK32 )ColorModel ()_fe .Model {return _fe .CMYKModel };func _gbfb (_adgb _fe .Gray )_fe .NRGBA {return _fe .NRGBA {R :_adgb .Y ,G :_adgb .Y ,B :_adgb .Y ,A :0xff}};
var _ Image =&Gray2 {};func (_ecbe *NRGBA16 )At (x ,y int )_fe .Color {_dddec ,_ :=_ecbe .ColorAt (x ,y );return _dddec };func (_aea *Gray8 )At (x ,y int )_fe .Color {_bgbf ,_ :=_aea .ColorAt (x ,y );return _bgbf };func (_eegd *Gray4 )GrayAt (x ,y int )_fe .Gray {_ggdg ,_ :=ColorAtGray4BPC (x ,y ,_eegd .BytesPerLine ,_eegd .Data ,_eegd .Decode );
return _ggdg ;};func (_bcbb *RGBA32 )setRGBA (_fdbcc int ,_bfda _fe .RGBA ){_bccag :=3*_fdbcc ;_bcbb .Data [_bccag ]=_bfda .R ;_bcbb .Data [_bccag +1]=_bfda .G ;_bcbb .Data [_bccag +2]=_bfda .B ;if _fdbcc < len (_bcbb .Alpha ){_bcbb .Alpha [_fdbcc ]=_bfda .A ;
};};func _fddgg (_bddcc *Monochrome ,_eggfa ,_gadf int ,_ecge ,_efffg int ,_gbba RasterOperator ){var (_eggeg int ;_edaa byte ;_beafd ,_fbaf int ;_bcfc int ;);_cdgb :=_ecge >>3;_fcfc :=_ecge &7;if _fcfc > 0{_edaa =_baedg [_fcfc ];};_eggeg =_bddcc .BytesPerLine *_gadf +(_eggfa >>3);
switch _gbba {case PixClr :for _beafd =0;_beafd < _efffg ;_beafd ++{_bcfc =_eggeg +_beafd *_bddcc .BytesPerLine ;for _fbaf =0;_fbaf < _cdgb ;_fbaf ++{_bddcc .Data [_bcfc ]=0x0;_bcfc ++;};if _fcfc > 0{_bddcc .Data [_bcfc ]=_ebecd (_bddcc .Data [_bcfc ],0x0,_edaa );
};};case PixSet :for _beafd =0;_beafd < _efffg ;_beafd ++{_bcfc =_eggeg +_beafd *_bddcc .BytesPerLine ;for _fbaf =0;_fbaf < _cdgb ;_fbaf ++{_bddcc .Data [_bcfc ]=0xff;_bcfc ++;};if _fcfc > 0{_bddcc .Data [_bcfc ]=_ebecd (_bddcc .Data [_bcfc ],0xff,_edaa );
};};case PixNotDst :for _beafd =0;_beafd < _efffg ;_beafd ++{_bcfc =_eggeg +_beafd *_bddcc .BytesPerLine ;for _fbaf =0;_fbaf < _cdgb ;_fbaf ++{_bddcc .Data [_bcfc ]=^_bddcc .Data [_bcfc ];_bcfc ++;};if _fcfc > 0{_bddcc .Data [_bcfc ]=_ebecd (_bddcc .Data [_bcfc ],^_bddcc .Data [_bcfc ],_edaa );
};};};};func (_caec *ImageBase )setFourBytes (_ggffe int ,_fafb uint32 )error {if _ggffe +3> len (_caec .Data )-1{return _db .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ggffe );
};_caec .Data [_ggffe ]=byte ((_fafb &0xff000000)>>24);_caec .Data [_ggffe +1]=byte ((_fafb &0xff0000)>>16);_caec .Data [_ggffe +2]=byte ((_fafb &0xff00)>>8);_caec .Data [_ggffe +3]=byte (_fafb &0xff);return nil ;};func MonochromeModel (threshold uint8 )_fe .Model {return monochromeModel (threshold )};
func _ebecd (_cedg ,_gfgf ,_cabba byte )byte {return (_cedg &^(_cabba ))|(_gfgf &_cabba )};func (_afag *ImageBase )setByte (_edbe int ,_geg byte )error {if _edbe > len (_afag .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_afag .Data [_edbe ]=_geg ;return nil ;};func (_cfgd *Gray16 )Validate ()error {if len (_cfgd .Data )!=_cfgd .Height *_cfgd .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_gbb *Monochrome )AddPadding ()(_fbfc error ){if _becd :=((_gbb .Width *_gbb .Height )+7)>>3;
len (_gbb .Data )< _becd {return _db .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_gbb .Data ),_becd );
};_gebd :=_gbb .Width %8;if _gebd ==0{return nil ;};_gcdd :=_gbb .Width /8;_baea :=_ce .NewReader (_gbb .Data );_gbef :=make ([]byte ,_gbb .Height *_gbb .BytesPerLine );_edfb :=_ce .NewWriterMSB (_gbef );_ecee :=make ([]byte ,_gcdd );var (_ebac int ;_gdcb uint64 ;
);for _ebac =0;_ebac < _gbb .Height ;_ebac ++{if _ ,_fbfc =_baea .Read (_ecee );_fbfc !=nil {return _fbfc ;};if _ ,_fbfc =_edfb .Write (_ecee );_fbfc !=nil {return _fbfc ;};if _gdcb ,_fbfc =_baea .ReadBits (byte (_gebd ));_fbfc !=nil {return _fbfc ;};if _fbfc =_edfb .WriteByte (byte (_gdcb )<<uint (8-_gebd ));
_fbfc !=nil {return _fbfc ;};};_gbb .Data =_edfb .Data ();return nil ;};func (_baee *Monochrome )ResolveDecode ()error {if len (_baee .Decode )!=2{return nil ;};if _baee .Decode [0]==1&&_baee .Decode [1]==0{if _bged :=_baee .InverseData ();_bged !=nil {return _bged ;
};_baee .Decode =nil ;};return nil ;};func _eede (_bfaef _g .Image )(Image ,error ){if _ffaf ,_dfdf :=_bfaef .(*Gray2 );_dfdf {return _ffaf .Copy (),nil ;};_afbg :=_bfaef .Bounds ();_cdadf ,_gebe :=NewImage (_afbg .Max .X ,_afbg .Max .Y ,2,1,nil ,nil ,nil );
if _gebe !=nil {return nil ,_gebe ;};_cage (_bfaef ,_cdadf ,_afbg );return _cdadf ,nil ;};func (_ccfb *ImageBase )Pix ()[]byte {return _ccfb .Data };func (_edag *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _gagg (_edag ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _babg (_ecff _g .Image ,_ecefc Image ,_bcgcg _g .Rectangle ){if _ddga ,_dega :=_ecff .(SMasker );_dega &&_ddga .HasAlpha (){_ecefc .(SMasker ).MakeAlpha ();};switch _edcd :=_ecff .(type ){case Gray :_degf (_edcd ,_ecefc .(NRGBA ),_bcgcg );case NRGBA :_adfa (_edcd ,_ecefc .(NRGBA ),_bcgcg );
case *_g .NYCbCrA :_bbgf (_edcd ,_ecefc .(NRGBA ),_bcgcg );case CMYK :_adcfe (_edcd ,_ecefc .(NRGBA ),_bcgcg );case RGBA :_gabb (_edcd ,_ecefc .(NRGBA ),_bcgcg );case nrgba64 :_dacge (_edcd ,_ecefc .(NRGBA ),_bcgcg );default:_dfgc (_ecff ,_ecefc ,_bcgcg );
};};func (_bgba *NRGBA32 )ColorAt (x ,y int )(_fe .Color ,error ){return ColorAtNRGBA32 (x ,y ,_bgba .Width ,_bgba .Data ,_bgba .Alpha ,_bgba .Decode );};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;
};var _ _g .Image =&Monochrome {};func _fbad (_cffg Gray ,_ccb NRGBA ,_fabg _g .Rectangle ){for _acecg :=0;_acecg < _fabg .Max .X ;_acecg ++{for _dge :=0;_dge < _fabg .Max .Y ;_dge ++{_bced :=_bdda (_ccb .NRGBAAt (_acecg ,_dge ));_cffg .SetGray (_acecg ,_dge ,_bced );
};};};func (_efa *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_efa .copy ()}};func (_bcgc *Monochrome )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_bcgc .Width ,Y :_bcgc .Height }};};func (_ced *CMYK32 )SetCMYK (x ,y int ,c _fe .CMYK ){_fcc :=4*(y *_ced .Width +x );
if _fcc +3>=len (_ced .Data ){return ;};_ced .Data [_fcc ]=c .C ;_ced .Data [_fcc +1]=c .M ;_ced .Data [_fcc +2]=c .Y ;_ced .Data [_fcc +3]=c .K ;};func _abe (_bba _fe .Gray )_fe .RGBA {return _fe .RGBA {R :_bba .Y ,G :_bba .Y ,B :_bba .Y ,A :0xff}};func (_eefcf *Gray8 )GrayAt (x ,y int )_fe .Gray {_feeeb ,_ :=ColorAtGray8BPC (x ,y ,_eefcf .BytesPerLine ,_eefcf .Data ,_eefcf .Decode );
return _feeeb ;};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fe .Gray16 ,error ){_bbada :=(y *bytesPerLine /2+x )*2;if _bbada +1>=len (data ){return _fe .Gray16 {},_db .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cdff :=uint16 (data [_bbada ])<<8|uint16 (data [_bbada +1]);if len (decode )==2{_cdff =uint16 (uint64 (LinearInterpolate (float64 (_cdff ),0,65535,decode [0],decode [1])));};return _fe .Gray16 {Y :_cdff },nil ;};func _bdd (_cbc ,_feb CMYK ,_ecf _g .Rectangle ){for _dba :=0;
_dba < _ecf .Max .X ;_dba ++{for _bacd :=0;_bacd < _ecf .Max .Y ;_bacd ++{_feb .SetCMYK (_dba ,_bacd ,_cbc .CMYKAt (_dba ,_bacd ));};};};func _cac (_gcdg Gray ,_dbfe CMYK ,_fbage _g .Rectangle ){for _dafdc :=0;_dafdc < _fbage .Max .X ;_dafdc ++{for _eecc :=0;
_eecc < _fbage .Max .Y ;_eecc ++{_gde :=_gcdg .GrayAt (_dafdc ,_eecc );_dbfe .SetCMYK (_dafdc ,_eecc ,_dcbg (_gde ));};};};func (_cge *CMYK32 )CMYKAt (x ,y int )_fe .CMYK {_bae ,_ :=ColorAtCMYK (x ,y ,_cge .Width ,_cge .Data ,_cge .Decode );return _bae ;
};func (_eaa *NRGBA32 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_eaa .Width ,Y :_eaa .Height }};};func (_efde *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_c .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_fffc :=_adf (width ,height );_edcf :=make ([]int ,height );_efbbc :=make ([]int ,width );_beggf :=float64 (_efde .Width )/float64 (width );_bcfg :=float64 (_efde .Height )/float64 (height );for _fbcg :=0;_fbcg < height ;_fbcg ++{_edcf [_fbcg ]=int (_d .Min (_bcfg *float64 (_fbcg )+0.5,float64 (_efde .Height -1)));
};for _cceb :=0;_cceb < width ;_cceb ++{_efbbc [_cceb ]=int (_d .Min (_beggf *float64 (_cceb )+0.5,float64 (_efde .Width -1)));};_cggc :=-1;_bccg :=byte (0);for _gfe :=0;_gfe < height ;_gfe ++{_bbea :=_edcf [_gfe ]*_efde .BytesPerLine ;_gbbg :=_gfe *_fffc .BytesPerLine ;
for _efbbf :=0;_efbbf < width ;_efbbf ++{_feeb :=_efbbc [_efbbf ];if _feeb !=_cggc {_bccg =_efde .getBit (_bbea ,_feeb );if _bccg !=0{_fffc .setBit (_gbbg ,_efbbf );};_cggc =_feeb ;}else {if _bccg !=0{_fffc .setBit (_gbbg ,_efbbf );};};};};return _fffc ,nil ;
};func (_ebfe *Monochrome )clearBit (_bbd ,_ffb int ){_ebfe .Data [_bbd ]&=^(0x80>>uint (_ffb &7))};var (Gray2Model =_fe .ModelFunc (_dcd );Gray4Model =_fe .ModelFunc (_ggff );NRGBA16Model =_fe .ModelFunc (_fdbc ););func (_ceg *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_cegc :=_gece (uint (factor ));
if !IsPowerOf2 (uint (factor )){_cegc ++;};_aaag :=make ([]int ,_cegc );for _ceba :=range _aaag {_aaag [_ceba ]=4;};_gcgb ,_bcc :=_aga (_ceg ,_aaag ...);if _bcc !=nil {return nil ,_bcc ;};return _gcgb ,nil ;};func (_aage *NRGBA32 )At (x ,y int )_fe .Color {_gcdgf ,_ :=_aage .ColorAt (x ,y );
return _gcdgf };func (_gdg *Gray8 )Validate ()error {if len (_gdg .Data )!=_gdg .Height *_gdg .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_dcfae *Gray4 )ColorAt (x ,y int )(_fe .Color ,error ){return ColorAtGray4BPC (x ,y ,_dcfae .BytesPerLine ,_dcfae .Data ,_dcfae .Decode );
};func (_fbae *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_fbae .copy ()}};func _fafe (_degb _g .Image ,_eadd Image ,_dfcg _g .Rectangle ){if _cdag ,_cdace :=_degb .(SMasker );_cdace &&_cdag .HasAlpha (){_eadd .(SMasker ).MakeAlpha ();};_dfgc (_degb ,_eadd ,_dfcg );
};func (_cggg *Gray8 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_cggg .Width ,Y :_cggg .Height }};};type Histogramer interface{Histogram ()[256]int ;};type CMYK32 struct{ImageBase };var _ Gray =&Gray16 {};type nrgba64 interface{NRGBA64At (_cgae ,_cdcaa int )_fe .NRGBA64 ;
SetNRGBA64 (_dadc ,_gbfba int ,_bfdb _fe .NRGBA64 );};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;case 2:return Gray2Converter ,nil ;
case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;};
case 4:return CMYKConverter ,nil ;};return nil ,_db .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_fgga *Gray2 )ColorModel ()_fe .Model {return Gray2Model };func _ddgf (_bgcb _fe .NRGBA )_fe .CMYK {_bgeg ,_cee ,_efbf ,_ :=_bgcb .RGBA ();_aab ,_ebd ,_feac ,_gag :=_fe .RGBToCMYK (uint8 (_bgeg >>8),uint8 (_cee >>8),uint8 (_efbf >>8));return _fe .CMYK {C :_aab ,M :_ebd ,Y :_feac ,K :_gag };
};func _gegf (_cdd *Monochrome ,_egge ,_fbfcg int ,_aedf ,_begf int ,_baaa RasterOperator ,_abga *Monochrome ,_bdbc ,_fegb int )error {var _cffgf ,_cbcb ,_gegd ,_ecedg int ;if _egge < 0{_bdbc -=_egge ;_aedf +=_egge ;_egge =0;};if _bdbc < 0{_egge -=_bdbc ;
_aedf +=_bdbc ;_bdbc =0;};_cffgf =_egge +_aedf -_cdd .Width ;if _cffgf > 0{_aedf -=_cffgf ;};_cbcb =_bdbc +_aedf -_abga .Width ;if _cbcb > 0{_aedf -=_cbcb ;};if _fbfcg < 0{_fegb -=_fbfcg ;_begf +=_fbfcg ;_fbfcg =0;};if _fegb < 0{_fbfcg -=_fegb ;_begf +=_fegb ;
_fegb =0;};_gegd =_fbfcg +_begf -_cdd .Height ;if _gegd > 0{_begf -=_gegd ;};_ecedg =_fegb +_begf -_abga .Height ;if _ecedg > 0{_begf -=_ecedg ;};if _aedf <=0||_begf <=0{return nil ;};var _gef error ;switch {case _egge &7==0&&_bdbc &7==0:_gef =_fbfcb (_cdd ,_egge ,_fbfcg ,_aedf ,_begf ,_baaa ,_abga ,_bdbc ,_fegb );
case _egge &7==_bdbc &7:_gef =_ebad (_cdd ,_egge ,_fbfcg ,_aedf ,_begf ,_baaa ,_abga ,_bdbc ,_fegb );default:_gef =_effc (_cdd ,_egge ,_fbfcg ,_aedf ,_begf ,_baaa ,_abga ,_bdbc ,_fegb );};if _gef !=nil {return _gef ;};return nil ;};var (MonochromeConverter =ConverterFunc (_gcdb );
Gray2Converter =ConverterFunc (_eede );Gray4Converter =ConverterFunc (_bfad );GrayConverter =ConverterFunc (_abbf );Gray16Converter =ConverterFunc (_geea );NRGBA16Converter =ConverterFunc (_aegc );NRGBAConverter =ConverterFunc (_eegg );NRGBA64Converter =ConverterFunc (_efba );
RGBAConverter =ConverterFunc (_gfdc );CMYKConverter =ConverterFunc (_cbe ););func (_efga *CMYK32 )At (x ,y int )_fe .Color {_efbb ,_ :=_efga .ColorAt (x ,y );return _efbb };func (_baebe *NRGBA16 )NRGBAAt (x ,y int )_fe .NRGBA {_bca ,_ :=ColorAtNRGBA16 (x ,y ,_baebe .Width ,_baebe .BytesPerLine ,_baebe .Data ,_baebe .Alpha ,_baebe .Decode );
return _bca ;};var _ _g .Image =&RGBA32 {};func (_egbg *Monochrome )At (x ,y int )_fe .Color {_badc ,_ :=_egbg .ColorAt (x ,y );return _badc };func _cbe (_afda _g .Image )(Image ,error ){if _dcbb ,_bdfe :=_afda .(*CMYK32 );_bdfe {return _dcbb .Copy (),nil ;
};_efdg :=_afda .Bounds ();_ebe ,_bab :=NewImage (_efdg .Max .X ,_efdg .Max .Y ,8,4,nil ,nil ,nil );if _bab !=nil {return nil ,_bab ;};switch _egg :=_afda .(type ){case CMYK :_bdd (_egg ,_ebe .(CMYK ),_efdg );case Gray :_cac (_egg ,_ebe .(CMYK ),_efdg );
case NRGBA :_eeaa (_egg ,_ebe .(CMYK ),_efdg );case RGBA :_dfeg (_egg ,_ebe .(CMYK ),_efdg );default:_dfgc (_afda ,_ebe ,_efdg );};return _ebe ,nil ;};func (_cdadg *Gray16 )At (x ,y int )_fe .Color {_edca ,_ :=_cdadg .ColorAt (x ,y );return _edca };func (_fdfd *Monochrome )Validate ()error {if len (_fdfd .Data )!=_fdfd .Height *_fdfd .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func _eced (_baab _fe .NYCbCrA )_fe .NRGBA {_fce :=int32 (_baab .Y )*0x10101;_bfdg :=int32 (_baab .Cb )-128;_ggb :=int32 (_baab .Cr )-128;_fcgg :=_fce +91881*_ggb ;if uint32 (_fcgg )&0xff000000==0{_fcgg >>=8;}else {_fcgg =^(_fcgg >>31)&0xffff;
};_gcfg :=_fce -22554*_bfdg -46802*_ggb ;if uint32 (_gcfg )&0xff000000==0{_gcfg >>=8;}else {_gcfg =^(_gcfg >>31)&0xffff;};_bbc :=_fce +116130*_bfdg ;if uint32 (_bbc )&0xff000000==0{_bbc >>=8;}else {_bbc =^(_bbc >>31)&0xffff;};return _fe .NRGBA {R :uint8 (_fcgg >>8),G :uint8 (_gcfg >>8),B :uint8 (_bbc >>8),A :_baab .A };
};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;
PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;
PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);var _ Image =&NRGBA32 {};func (_adb *Gray8 )SetGray (x ,y int ,g _fe .Gray ){_fec :=y *_adb .BytesPerLine +x ;if _fec > len (_adb .Data )-1{return ;};_adb .Data [_fec ]=g .Y ;
};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fe .Gray ,error ){_bgegb :=y *bytesPerLine +x >>1;if _bgegb >=len (data ){return _fe .Gray {},_db .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ffdd :=data [_bgegb ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_ffdd =uint8 (uint32 (LinearInterpolate (float64 (_ffdd ),0,15,decode [0],decode [1]))&0xf);};return _fe .Gray {Y :_ffdd *17&0xff},nil ;};func _abbf (_efe _g .Image )(Image ,error ){if _ceee ,_aed :=_efe .(*Gray8 );
_aed {return _ceee .Copy (),nil ;};_bga :=_efe .Bounds ();_dbbb ,_cbgg :=NewImage (_bga .Max .X ,_bga .Max .Y ,8,1,nil ,nil ,nil );if _cbgg !=nil {return nil ,_cbgg ;};_cage (_efe ,_dbbb ,_bga );return _dbbb ,nil ;};func (_cffa *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_cffa .copy ()}};
func ImgToBinary (i _g .Image ,threshold uint8 )*_g .Gray {switch _dfca :=i .(type ){case *_g .Gray :if _eddc (_dfca ){return _dfca ;};return _daee (_dfca ,threshold );case *_g .Gray16 :return _agde (_dfca ,threshold );default:return _bbeg (_dfca ,threshold );
};};func _dacge (_dfec nrgba64 ,_decab NRGBA ,_cege _g .Rectangle ){for _aeaa :=0;_aeaa < _cege .Max .X ;_aeaa ++{for _gbgb :=0;_gbgb < _cege .Max .Y ;_gbgb ++{_ceece :=_dfec .NRGBA64At (_aeaa ,_gbgb );_decab .SetNRGBA (_aeaa ,_gbgb ,_bce (_ceece ));};
};};func (_gbag *RGBA32 )Set (x ,y int ,c _fe .Color ){_bbcb :=y *_gbag .Width +x ;_ddgg :=3*_bbcb ;if _ddgg +2>=len (_gbag .Data ){return ;};_fedb :=_fe .RGBAModel .Convert (c ).(_fe .RGBA );_gbag .setRGBA (_bbcb ,_fedb );};type CMYK interface{CMYKAt (_agbb ,_adfb int )_fe .CMYK ;
SetCMYK (_fegf ,_dbc int ,_fae _fe .CMYK );};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fe .Gray ,error ){_beaf :=y *bytesPerLine +x >>3;if _beaf >=len (data ){return _fe .Gray {},_db .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fddg :=data [_beaf ]>>uint (7-(x &7))&1;if len (decode )==2{_fddg =uint8 (LinearInterpolate (float64 (_fddg ),0.0,1.0,decode [0],decode [1]))&1;};return _fe .Gray {Y :_fddg *255},nil ;};func (_gaeb *NRGBA64 )Validate ()error {if len (_gaeb .Data )!=3*2*_gaeb .Width *_gaeb .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ NRGBA =&NRGBA16 {};func _bcff (_cgee _g .Image ,_bebg int )(_g .Rectangle ,bool ,[]byte ){_cagd :=_cgee .Bounds ();var (_fca bool ;_dabae []byte ;);switch _gcgf :=_cgee .(type ){case SMasker :_fca =_gcgf .HasAlpha ();case NRGBA ,RGBA ,*_g .RGBA64 ,nrgba64 ,*_g .NYCbCrA :_dabae =make ([]byte ,_cagd .Max .X *_cagd .Max .Y *_bebg );
case *_g .Paletted :var _cfag bool ;for _ ,_abdb :=range _gcgf .Palette {_egeg ,_cfad ,_ebda ,_ffdg :=_abdb .RGBA ();if _egeg ==0&&_cfad ==0&&_ebda ==0&&_ffdg !=0{_cfag =true ;break ;};};if _cfag {_dabae =make ([]byte ,_cagd .Max .X *_cagd .Max .Y *_bebg );
};};return _cagd ,_fca ,_dabae ;};func (_aedg *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_aedg .copy ()}};func _bce (_ebae _fe .NRGBA64 )_fe .NRGBA {return _fe .NRGBA {R :uint8 (_ebae .R >>8),G :uint8 (_ebae .G >>8),B :uint8 (_ebae .B >>8),A :uint8 (_ebae .A >>8)};
};func _edfd (_egec CMYK ,_dcbc RGBA ,_dbcb _g .Rectangle ){for _abbfb :=0;_abbfb < _dbcb .Max .X ;_abbfb ++{for _ebcg :=0;_ebcg < _dbcb .Max .Y ;_ebcg ++{_cfade :=_egec .CMYKAt (_abbfb ,_ebcg );_dcbc .SetRGBA (_abbfb ,_ebcg ,_cgd (_cfade ));};};};func _befb (_agac CMYK ,_aff Gray ,_ddde _g .Rectangle ){for _abae :=0;
_abae < _ddde .Max .X ;_abae ++{for _dfea :=0;_dfea < _ddde .Max .Y ;_dfea ++{_ggg :=_eba (_agac .CMYKAt (_abae ,_dfea ));_aff .SetGray (_abae ,_dfea ,_ggg );};};};func GrayHistogram (g Gray )(_dbcd [256]int ){switch _ffbg :=g .(type ){case Histogramer :return _ffbg .Histogram ();
case _g .Image :_cded :=_ffbg .Bounds ();for _cgab :=0;_cgab < _cded .Max .X ;_cgab ++{for _bdeg :=0;_bdeg < _cded .Max .Y ;_bdeg ++{_dbcd [g .GrayAt (_cgab ,_bdeg ).Y ]++;};};return _dbcd ;default:return [256]int {};};};func (_abda *Monochrome )ColorAt (x ,y int )(_fe .Color ,error ){return ColorAtGray1BPC (x ,y ,_abda .BytesPerLine ,_abda .Data ,_abda .Decode );
};type ColorConverter interface{Convert (_aaf _g .Image )(Image ,error );};func (_bacde *NRGBA16 )ColorAt (x ,y int )(_fe .Color ,error ){return ColorAtNRGBA16 (x ,y ,_bacde .Width ,_bacde .BytesPerLine ,_bacde .Data ,_bacde .Alpha ,_bacde .Decode );};
func FromGoImage (i _g .Image )(Image ,error ){switch _dbec :=i .(type ){case Image :return _dbec .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_g .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );
case *_g .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};func (_ffc *Gray16 )ColorModel ()_fe .Model {return _fe .Gray16Model };var _ Image =&RGBA32 {};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fe .Gray ,error ){_gff :=y *bytesPerLine +x ;
if _gff >=len (data ){return _fe .Gray {},_db .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gebdd :=data [_gff ];if len (decode )==2{_gebdd =uint8 (uint32 (LinearInterpolate (float64 (_gebdd ),0,255,decode [0],decode [1]))&0xff);};return _fe .Gray {Y :_gebdd },nil ;};var _ Image =&NRGBA64 {};func _cebe (_gaa ,_aca *Monochrome ,_degd []byte ,_debd int )(_efg error ){var (_afg ,_fad ,_fadf ,_dbe ,_gf ,_bfab ,_cde ,_eb int ;
_acf ,_dcaf ,_dbfg ,_cae uint32 ;_feee ,_afc byte ;_gfd uint16 ;);_ddg :=make ([]byte ,4);_bd :=make ([]byte ,4);for _fadf =0;_fadf < _gaa .Height -1;_fadf ,_dbe =_fadf +2,_dbe +1{_afg =_fadf *_gaa .BytesPerLine ;_fad =_dbe *_aca .BytesPerLine ;for _gf ,_bfab =0,0;
_gf < _debd ;_gf ,_bfab =_gf +4,_bfab +1{for _cde =0;_cde < 4;_cde ++{_eb =_afg +_gf +_cde ;if _eb <=len (_gaa .Data )-1&&_eb < _afg +_gaa .BytesPerLine {_ddg [_cde ]=_gaa .Data [_eb ];}else {_ddg [_cde ]=0x00;};_eb =_afg +_gaa .BytesPerLine +_gf +_cde ;
if _eb <=len (_gaa .Data )-1&&_eb < _afg +(2*_gaa .BytesPerLine ){_bd [_cde ]=_gaa .Data [_eb ];}else {_bd [_cde ]=0x00;};};_acf =_e .BigEndian .Uint32 (_ddg );_dcaf =_e .BigEndian .Uint32 (_bd );_dbfg =_acf &_dcaf ;_dbfg |=_dbfg <<1;_cae =_acf |_dcaf ;
_cae &=_cae <<1;_dcaf =_dbfg |_cae ;_dcaf &=0xaaaaaaaa;_acf =_dcaf |(_dcaf <<7);_feee =byte (_acf >>24);_afc =byte ((_acf >>8)&0xff);_eb =_fad +_bfab ;if _eb +1==len (_aca .Data )-1||_eb +1>=_fad +_aca .BytesPerLine {if _efg =_aca .setByte (_eb ,_degd [_feee ]);
_efg !=nil {return _db .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eb );};}else {_gfd =(uint16 (_degd [_feee ])<<8)|uint16 (_degd [_afc ]);if _efg =_aca .setTwoBytes (_eb ,_gfd );_efg !=nil {return _db .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eb );
};_bfab ++;};};};return nil ;};func (_baa *CMYK32 )Set (x ,y int ,c _fe .Color ){_debe :=4*(y *_baa .Width +x );if _debe +3>=len (_baa .Data ){return ;};_gcg :=_fe .CMYKModel .Convert (c ).(_fe .CMYK );_baa .Data [_debe ]=_gcg .C ;_baa .Data [_debe +1]=_gcg .M ;
_baa .Data [_debe +2]=_gcg .Y ;_baa .Data [_debe +3]=_gcg .K ;};func (_egfc *ImageBase )setEightFullBytes (_aebg int ,_cffe uint64 )error {if _aebg +7> len (_egfc .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_egfc .Data [_aebg ]=byte ((_cffe &0xff00000000000000)>>56);_egfc .Data [_aebg +1]=byte ((_cffe &0xff000000000000)>>48);_egfc .Data [_aebg +2]=byte ((_cffe &0xff0000000000)>>40);_egfc .Data [_aebg +3]=byte ((_cffe &0xff00000000)>>32);_egfc .Data [_aebg +4]=byte ((_cffe &0xff000000)>>24);
_egfc .Data [_aebg +5]=byte ((_cffe &0xff0000)>>16);_egfc .Data [_aebg +6]=byte ((_cffe &0xff00)>>8);_egfc .Data [_aebg +7]=byte (_cffe &0xff);return nil ;};func _eeccac (_abgb uint8 )bool {if _abgb ==0||_abgb ==255{return true ;};return false ;};func (_dbfgd *CMYK32 )Base ()*ImageBase {return &_dbfgd .ImageBase };
func ImgToGray (i _g .Image )*_g .Gray {if _cdaa ,_fede :=i .(*_g .Gray );_fede {return _cdaa ;};_cgfd :=i .Bounds ();_acgg :=_g .NewGray (_cgfd );for _gbgcc :=0;_gbgcc < _cgfd .Max .X ;_gbgcc ++{for _dgec :=0;_dgec < _cgfd .Max .Y ;_dgec ++{_fcfcf :=i .At (_gbgcc ,_dgec );
_acgg .Set (_gbgcc ,_dgec ,_fcfcf );};};return _acgg ;};func (_ebfc *Monochrome )setIndexedBit (_gfdg int ){_ebfc .Data [(_gfdg >>3)]|=0x80>>uint (_gfdg &7)};func _ggfa (_agc _fe .Gray )_fe .Gray {_agc .Y >>=4;_agc .Y |=_agc .Y <<4;return _agc };func (_beff *RGBA32 )Base ()*ImageBase {return &_beff .ImageBase };
func _cage (_bgf _g .Image ,_gffc Image ,_ddfb _g .Rectangle ){switch _daff :=_bgf .(type ){case Gray :_gbbba (_daff ,_gffc .(Gray ),_ddfb );case NRGBA :_cbcg (_daff ,_gffc .(Gray ),_ddfb );case CMYK :_befb (_daff ,_gffc .(Gray ),_ddfb );case RGBA :_egcc (_daff ,_gffc .(Gray ),_ddfb );
default:_dfgc (_bgf ,_gffc .(Image ),_ddfb );};};func (_cfac *NRGBA16 )SetNRGBA (x ,y int ,c _fe .NRGBA ){_aaga :=y *_cfac .BytesPerLine +x *3/2;if _aaga +1>=len (_cfac .Data ){return ;};c =_fdab (c );_cfac .setNRGBA (x ,y ,_aaga ,c );};func (_bgd *Gray4 )Set (x ,y int ,c _fe .Color ){if x >=_bgd .Width ||y >=_bgd .Height {return ;
};_bgg :=Gray4Model .Convert (c ).(_fe .Gray );_bgd .setGray (x ,y ,_bgg );};func (_afgd *Gray16 )GrayAt (x ,y int )_fe .Gray {_bbf ,_ :=_afgd .ColorAt (x ,y );return _fe .Gray {Y :uint8 (_bbf .(_fe .Gray16 ).Y >>8)};};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};
func (_gaef *NRGBA64 )ColorAt (x ,y int )(_fe .Color ,error ){return ColorAtNRGBA64 (x ,y ,_gaef .Width ,_gaef .Data ,_gaef .Alpha ,_gaef .Decode );};var _ Image =&Gray16 {};func _gffe (){for _gaea :=0;_gaea < 256;_gaea ++{_abbd [_gaea ]=uint8 (_gaea &0x1)+(uint8 (_gaea >>1)&0x1)+(uint8 (_gaea >>2)&0x1)+(uint8 (_gaea >>3)&0x1)+(uint8 (_gaea >>4)&0x1)+(uint8 (_gaea >>5)&0x1)+(uint8 (_gaea >>6)&0x1)+(uint8 (_gaea >>7)&0x1);
};};func (_cec *NRGBA16 )Set (x ,y int ,c _fe .Color ){_ggbg :=y *_cec .BytesPerLine +x *3/2;if _ggbg +1>=len (_cec .Data ){return ;};_ceec :=NRGBA16Model .Convert (c ).(_fe .NRGBA );_cec .setNRGBA (x ,y ,_ggbg ,_ceec );};type RGBA interface{RGBAAt (_bccb ,_efad int )_fe .RGBA ;
SetRGBA (_fbgde ,_adaed int ,_cddfd _fe .RGBA );};func (_fafd *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_fafd .ImageBase .copy (),ModelThreshold :_fafd .ModelThreshold };};func (_afaea *NRGBA32 )ColorModel ()_fe .Model {return _fe .NRGBAModel };
func _caa ()(_fd [256]uint32 ){for _egf :=0;_egf < 256;_egf ++{if _egf &0x01!=0{_fd [_egf ]|=0xf;};if _egf &0x02!=0{_fd [_egf ]|=0xf0;};if _egf &0x04!=0{_fd [_egf ]|=0xf00;};if _egf &0x08!=0{_fd [_egf ]|=0xf000;};if _egf &0x10!=0{_fd [_egf ]|=0xf0000;};
if _egf &0x20!=0{_fd [_egf ]|=0xf00000;};if _egf &0x40!=0{_fd [_egf ]|=0xf000000;};if _egf &0x80!=0{_fd [_egf ]|=0xf0000000;};};return _fd ;};var _ _g .Image =&Gray8 {};func _eba (_ded _fe .CMYK )_fe .Gray {_cgdf ,_dfa ,_befa :=_fe .CMYKToRGB (_ded .C ,_ded .M ,_ded .Y ,_ded .K );
_fgf :=(19595*uint32 (_cgdf )+38470*uint32 (_dfa )+7471*uint32 (_befa )+1<<7)>>16;return _fe .Gray {Y :uint8 (_fgf )};};func (_egcf *NRGBA32 )NRGBAAt (x ,y int )_fe .NRGBA {_adda ,_ :=ColorAtNRGBA32 (x ,y ,_egcf .Width ,_egcf .Data ,_egcf .Alpha ,_egcf .Decode );
return _adda ;};func _egcc (_adcbf RGBA ,_dfag Gray ,_eefa _g .Rectangle ){for _dgeb :=0;_dgeb < _eefa .Max .X ;_dgeb ++{for _ffab :=0;_ffab < _eefa .Max .Y ;_ffab ++{_baef :=_dfd (_adcbf .RGBAAt (_dgeb ,_ffab ));_dfag .SetGray (_dgeb ,_ffab ,_baef );};
};};func _cab (_fada _fe .NRGBA )_fe .Gray {_ebfb ,_bedd ,_gda ,_ :=_fada .RGBA ();_fbf :=(19595*_ebfb +38470*_bedd +7471*_gda +1<<15)>>24;return _fe .Gray {Y :uint8 (_fbf )};};func _effc (_gffg *Monochrome ,_agce ,_cfcb ,_ged ,_dgdc int ,_dccd RasterOperator ,_eaggb *Monochrome ,_gcad ,_dcbac int )error {var (_bfdf bool ;
_aacb bool ;_dgc byte ;_aedd int ;_fdb int ;_gffgc int ;_cddf int ;_cbbg bool ;_ecef int ;_aafg int ;_dbge int ;_bdfccf bool ;_fgcga byte ;_dafdg int ;_aeege int ;_bbbbc int ;_aag byte ;_feea int ;_fegc int ;_dddg uint ;_eeac uint ;_egda byte ;_egcb shift ;
_aega bool ;_cddb bool ;_egae ,_eegcb int ;);if _gcad &7!=0{_fegc =8-(_gcad &7);};if _agce &7!=0{_fdb =8-(_agce &7);};if _fegc ==0&&_fdb ==0{_egda =_fcdb [0];}else {if _fdb > _fegc {_dddg =uint (_fdb -_fegc );}else {_dddg =uint (8-(_fegc -_fdb ));};_eeac =8-_dddg ;
_egda =_fcdb [_dddg ];};if (_agce &7)!=0{_bfdf =true ;_aedd =8-(_agce &7);_dgc =_fcdb [_aedd ];_gffgc =_gffg .BytesPerLine *_cfcb +(_agce >>3);_cddf =_eaggb .BytesPerLine *_dcbac +(_gcad >>3);_feea =8-(_gcad &7);if _aedd > _feea {_egcb =_cccd ;if _ged >=_fegc {_aega =true ;
};}else {_egcb =_fbgd ;};};if _ged < _aedd {_aacb =true ;_dgc &=_baedg [8-_aedd +_ged ];};if !_aacb {_ecef =(_ged -_aedd )>>3;if _ecef !=0{_cbbg =true ;_aafg =_gffg .BytesPerLine *_cfcb +((_agce +_fdb )>>3);_dbge =_eaggb .BytesPerLine *_dcbac +((_gcad +_fdb )>>3);
};};_dafdg =(_agce +_ged )&7;if !(_aacb ||_dafdg ==0){_bdfccf =true ;_fgcga =_baedg [_dafdg ];_aeege =_gffg .BytesPerLine *_cfcb +((_agce +_fdb )>>3)+_ecef ;_bbbbc =_eaggb .BytesPerLine *_dcbac +((_gcad +_fdb )>>3)+_ecef ;if _dafdg > int (_eeac ){_cddb =true ;
};};switch _dccd {case PixSrc :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],_aag ,_dgc );
_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );_gffg .Data [_aafg +_eegcb ]=_aag ;
};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;};};if _bdfccf {for _egae =0;_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],_aag ,_fgcga );
_aeege +=_gffg .BytesPerLine ;_bbbbc +=_eaggb .BytesPerLine ;};};case PixNotSrc :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );
};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],^_aag ,_dgc );_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;_eegcb < _ecef ;
_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );_gffg .Data [_aafg +_eegcb ]=^_aag ;};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;};};if _bdfccf {for _egae =0;_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;
if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],^_aag ,_fgcga );_aeege +=_gffg .BytesPerLine ;_bbbbc +=_eaggb .BytesPerLine ;};};case PixSrcOrDst :if _bfdf {for _egae =0;_egae < _dgdc ;
_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],_aag |_gffg .Data [_gffgc ],_dgc );
_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );_gffg .Data [_aafg +_eegcb ]|=_aag ;
};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;};};if _bdfccf {for _egae =0;_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],_aag |_gffg .Data [_aeege ],_fgcga );
_aeege +=_gffg .BytesPerLine ;_bbbbc +=_eaggb .BytesPerLine ;};};case PixSrcAndDst :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );
};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],_aag &_gffg .Data [_gffgc ],_dgc );_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;
_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );_gffg .Data [_aafg +_eegcb ]&=_aag ;};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;};};if _bdfccf {for _egae =0;
_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],_aag &_gffg .Data [_aeege ],_fgcga );_aeege +=_gffg .BytesPerLine ;
_bbbbc +=_eaggb .BytesPerLine ;};};case PixSrcXorDst :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;
};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],_aag ^_gffg .Data [_gffgc ],_dgc );_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );
_gffg .Data [_aafg +_eegcb ]^=_aag ;};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;};};if _bdfccf {for _egae =0;_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );
};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],_aag ^_gffg .Data [_aeege ],_fgcga );_aeege +=_gffg .BytesPerLine ;_bbbbc +=_eaggb .BytesPerLine ;};};case PixNotSrcOrDst :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;
if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],^_aag |_gffg .Data [_gffgc ],_dgc );_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;
};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );_gffg .Data [_aafg +_eegcb ]|=^_aag ;};_aafg +=_gffg .BytesPerLine ;
_dbge +=_eaggb .BytesPerLine ;};};if _bdfccf {for _egae =0;_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],^_aag |_gffg .Data [_aeege ],_fgcga );
_aeege +=_gffg .BytesPerLine ;_bbbbc +=_eaggb .BytesPerLine ;};};case PixNotSrcAndDst :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );
};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],^_aag &_gffg .Data [_gffgc ],_dgc );_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;
_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );_gffg .Data [_aafg +_eegcb ]&=^_aag ;};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;};};if _bdfccf {for _egae =0;
_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],^_aag &_gffg .Data [_aeege ],_fgcga );_aeege +=_gffg .BytesPerLine ;
_bbbbc +=_eaggb .BytesPerLine ;};};case PixSrcOrNotDst :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;
};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],_aag |^_gffg .Data [_gffgc ],_dgc );_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );
_gffg .Data [_aafg +_eegcb ]=_aag |^_gffg .Data [_aafg +_eegcb ];};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;};};if _bdfccf {for _egae =0;_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );
};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],_aag |^_gffg .Data [_aeege ],_fgcga );_aeege +=_gffg .BytesPerLine ;_bbbbc +=_eaggb .BytesPerLine ;};};case PixSrcAndNotDst :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;
if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],_aag &^_gffg .Data [_gffgc ],_dgc );_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;
};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );_gffg .Data [_aafg +_eegcb ]=_aag &^_gffg .Data [_aafg +_eegcb ];
};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;};};if _bdfccf {for _egae =0;_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],_aag &^_gffg .Data [_aeege ],_fgcga );
_aeege +=_gffg .BytesPerLine ;_bbbbc +=_eaggb .BytesPerLine ;};};case PixNotPixSrcOrDst :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );
};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],^(_aag |_gffg .Data [_gffgc ]),_dgc );_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;
_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );_gffg .Data [_aafg +_eegcb ]=^(_aag |_gffg .Data [_aafg +_eegcb ]);};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;
};};if _bdfccf {for _egae =0;_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],^(_aag |_gffg .Data [_aeege ]),_fgcga );
_aeege +=_gffg .BytesPerLine ;_bbbbc +=_eaggb .BytesPerLine ;};};case PixNotPixSrcAndDst :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );
};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],^(_aag &_gffg .Data [_gffgc ]),_dgc );_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;
_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );_gffg .Data [_aafg +_eegcb ]=^(_aag &_gffg .Data [_aafg +_eegcb ]);};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;
};};if _bdfccf {for _egae =0;_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],^(_aag &_gffg .Data [_aeege ]),_fgcga );
_aeege +=_gffg .BytesPerLine ;_bbbbc +=_eaggb .BytesPerLine ;};};case PixNotPixSrcXorDst :if _bfdf {for _egae =0;_egae < _dgdc ;_egae ++{if _egcb ==_cccd {_aag =_eaggb .Data [_cddf ]<<_dddg ;if _aega {_aag =_ebecd (_aag ,_eaggb .Data [_cddf +1]>>_eeac ,_egda );
};}else {_aag =_eaggb .Data [_cddf ]>>_eeac ;};_gffg .Data [_gffgc ]=_ebecd (_gffg .Data [_gffgc ],^(_aag ^_gffg .Data [_gffgc ]),_dgc );_gffgc +=_gffg .BytesPerLine ;_cddf +=_eaggb .BytesPerLine ;};};if _cbbg {for _egae =0;_egae < _dgdc ;_egae ++{for _eegcb =0;
_eegcb < _ecef ;_eegcb ++{_aag =_ebecd (_eaggb .Data [_dbge +_eegcb ]<<_dddg ,_eaggb .Data [_dbge +_eegcb +1]>>_eeac ,_egda );_gffg .Data [_aafg +_eegcb ]=^(_aag ^_gffg .Data [_aafg +_eegcb ]);};_aafg +=_gffg .BytesPerLine ;_dbge +=_eaggb .BytesPerLine ;
};};if _bdfccf {for _egae =0;_egae < _dgdc ;_egae ++{_aag =_eaggb .Data [_bbbbc ]<<_dddg ;if _cddb {_aag =_ebecd (_aag ,_eaggb .Data [_bbbbc +1]>>_eeac ,_egda );};_gffg .Data [_aeege ]=_ebecd (_gffg .Data [_aeege ],^(_aag ^_gffg .Data [_aeege ]),_fgcga );
_aeege +=_gffg .BytesPerLine ;_bbbbc +=_eaggb .BytesPerLine ;};};default:_b .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_dccd );
return _c .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func (_cef *Monochrome )setBit (_bde ,_gbeff int ){_cef .Data [_bde +(_gbeff >>3)]|=0x80>>uint (_gbeff &7);
};func (_adcc *Monochrome )SetGray (x ,y int ,g _fe .Gray ){_eae :=y *_adcc .BytesPerLine +x >>3;if _eae > len (_adcc .Data )-1{return ;};g =_cdg (g ,monochromeModel (_adcc .ModelThreshold ));_adcc .setGray (x ,g ,_eae );};func _bbb (_a *Monochrome ,_fc int ,_dfb []uint )(*Monochrome ,error ){_ee :=_fc *_a .Width ;
_bbg :=_fc *_a .Height ;_gca :=_adf (_ee ,_bbg );for _ag ,_ec :=range _dfb {var _cf error ;switch _ec {case 2:_cf =_dc (_gca ,_a );case 4:_cf =_gd (_gca ,_a );case 8:_cf =_cc (_gca ,_a );};if _cf !=nil {return nil ,_cf ;};if _ag !=len (_dfb )-1{_a =_gca .copy ();
};};return _gca ,nil ;};func InDelta (expected ,current ,delta float64 )bool {_dgga :=expected -current ;if _dgga <=-delta ||_dgga >=delta {return false ;};return true ;};func (_ebge *NRGBA64 )Set (x ,y int ,c _fe .Color ){_cfgc :=(y *_ebge .Width +x )*2;
_fggd :=_cfgc *3;if _fggd +5>=len (_ebge .Data ){return ;};_aefa :=_fe .NRGBA64Model .Convert (c ).(_fe .NRGBA64 );_ebge .setNRGBA64 (_fggd ,_aefa ,_cfgc );};func (_ebaf *ImageBase )MakeAlpha (){_ebaf .newAlpha ()};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;
};func (_dege *NRGBA16 )Bounds ()_g .Rectangle {return _g .Rectangle {Max :_g .Point {X :_dege .Width ,Y :_dege .Height }};};func (_bdfec *monochromeThresholdConverter )Convert (img _g .Image )(Image ,error ){if _egbe ,_beee :=img .(*Monochrome );_beee {return _egbe .Copy (),nil ;
};_afae :=img .Bounds ();_daef ,_efcg :=NewImage (_afae .Max .X ,_afae .Max .Y ,1,1,nil ,nil ,nil );if _efcg !=nil {return nil ,_efcg ;};_daef .(*Monochrome ).ModelThreshold =_bdfec .Threshold ;for _afb :=0;_afb < _afae .Max .X ;_afb ++{for _bcd :=0;_bcd < _afae .Max .Y ;
_bcd ++{_beef :=img .At (_afb ,_bcd );_daef .Set (_afb ,_bcd ,_beef );};};return _daef ,nil ;};func _bed (_cgbd ,_fdf *Monochrome ,_aba []byte ,_eac int )(_gbf error ){var (_edf ,_gfde ,_gaag ,_bcf ,_fbgg ,_fde ,_ggd ,_cgc int ;_dgg ,_aaea ,_eeff ,_bbbf uint32 ;
_afa ,_gad byte ;_cff uint16 ;);_ggc :=make ([]byte ,4);_abad :=make ([]byte ,4);for _gaag =0;_gaag < _cgbd .Height -1;_gaag ,_bcf =_gaag +2,_bcf +1{_edf =_gaag *_cgbd .BytesPerLine ;_gfde =_bcf *_fdf .BytesPerLine ;for _fbgg ,_fde =0,0;_fbgg < _eac ;_fbgg ,_fde =_fbgg +4,_fde +1{for _ggd =0;
_ggd < 4;_ggd ++{_cgc =_edf +_fbgg +_ggd ;if _cgc <=len (_cgbd .Data )-1&&_cgc < _edf +_cgbd .BytesPerLine {_ggc [_ggd ]=_cgbd .Data [_cgc ];}else {_ggc [_ggd ]=0x00;};_cgc =_edf +_cgbd .BytesPerLine +_fbgg +_ggd ;if _cgc <=len (_cgbd .Data )-1&&_cgc < _edf +(2*_cgbd .BytesPerLine ){_abad [_ggd ]=_cgbd .Data [_cgc ];
}else {_abad [_ggd ]=0x00;};};_dgg =_e .BigEndian .Uint32 (_ggc );_aaea =_e .BigEndian .Uint32 (_abad );_eeff =_dgg &_aaea ;_eeff |=_eeff <<1;_bbbf =_dgg |_aaea ;_bbbf &=_bbbf <<1;_aaea =_eeff &_bbbf ;_aaea &=0xaaaaaaaa;_dgg =_aaea |(_aaea <<7);_afa =byte (_dgg >>24);
_gad =byte ((_dgg >>8)&0xff);_cgc =_gfde +_fde ;if _cgc +1==len (_fdf .Data )-1||_cgc +1>=_gfde +_fdf .BytesPerLine {if _gbf =_fdf .setByte (_cgc ,_aba [_afa ]);_gbf !=nil {return _db .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cgc );};}else {_cff =(uint16 (_aba [_afa ])<<8)|uint16 (_aba [_gad ]);
if _gbf =_fdf .setTwoBytes (_cgc ,_cff );_gbf !=nil {return _db .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cgc );
};_fde ++;};};};return nil ;};func (_aad *Gray4 )Validate ()error {if len (_aad .Data )!=_aad .Height *_aad .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_fedg *NRGBA64 )setNRGBA64 (_effg int ,_dbcfb _fe .NRGBA64 ,_acaf int ){_fedg .Data [_effg ]=uint8 (_dbcfb .R >>8);
_fedg .Data [_effg +1]=uint8 (_dbcfb .R &0xff);_fedg .Data [_effg +2]=uint8 (_dbcfb .G >>8);_fedg .Data [_effg +3]=uint8 (_dbcfb .G &0xff);_fedg .Data [_effg +4]=uint8 (_dbcfb .B >>8);_fedg .Data [_effg +5]=uint8 (_dbcfb .B &0xff);if _acaf +1< len (_fedg .Alpha ){_fedg .Alpha [_acaf ]=uint8 (_dbcfb .A >>8);
_fedg .Alpha [_acaf +1]=uint8 (_dbcfb .A &0xff);};};type colorConverter struct{_gafb func (_ffa _g .Image )(Image ,error );};var _ Image =&CMYK32 {};const (_cccd shift =iota ;_fbgd ;);