//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_g "errors";_dg "fmt";_fc "github.com/unidoc/unipdf/v3/internal/bitwise";_df "image";_f "image/color";_a "image/draw";_d "math";);var _ NRGBA =&NRGBA32 {};func (_cgd *Gray4 )Validate ()error {if len (_cgd .Data )!=_cgd .Height *_cgd .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_bab *monochromeThresholdConverter )Convert (img _df .Image )(Image ,error ){if _bgd ,_gdcd :=img .(*Monochrome );_gdcd {return _bgd .Copy (),nil ;};_abc :=img .Bounds ();_eff ,_aac :=NewImage (_abc .Max .X ,_abc .Max .Y ,1,1,nil ,nil ,nil );if _aac !=nil {return nil ,_aac ;};_eff .(*Monochrome ).ModelThreshold =_bab .Threshold ;for _dfba :=0;_dfba < _abc .Max .X ;_dfba ++{for _gegb :=0;_gegb < _abc .Max .Y ;_gegb ++{_cda :=img .At (_dfba ,_gegb );_eff .Set (_dfba ,_gegb ,_cda );};};return _eff ,nil ;};func (_dbdc *Gray8 )Validate ()error {if len (_dbdc .Data )!=_dbdc .Height *_dbdc .BytesPerLine {return ErrInvalidImage ;};return nil ;};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray16 ,error ){_bagf :=(y *bytesPerLine /2+x )*2;if _bagf +1>=len (data ){return _f .Gray16 {},_dg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_ddgc :=uint16 (data [_bagf ])<<8|uint16 (data [_bagf +1]);if len (decode )==2{_ddgc =uint16 (uint64 (LinearInterpolate (float64 (_ddgc ),0,65535,decode [0],decode [1])));};return _f .Gray16 {Y :_ddgc },nil ;};func (_ccc *Gray4 )setGray (_cbbb int ,_ggb int ,_fbed _f .Gray ){_ccb :=_ggb *_ccc .BytesPerLine ;_agbe :=_ccb +(_cbbb >>1);if _agbe >=len (_ccc .Data ){return ;};_gbbf :=_fbed .Y >>4;_ccc .Data [_agbe ]=(_ccc .Data [_agbe ]&(^(0xf0>>uint (4*(_cbbb &1)))))|(_gbbf <<uint (4-4*(_cbbb &1)));};var _ Image =&NRGBA64 {};func (_bcad *Monochrome )setBit (_eca ,_eafd int ){_bcad .Data [_eca ]|=0x80>>uint (_eafd &7)};func (_dbb *NRGBA64 )ColorModel ()_f .Model {return _f .NRGBA64Model };func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_f .NRGBA ,error ){_gac :=y *bytesPerLine +x *3/2;if _gac +1>=len (data ){return _f .NRGBA {},_ebdf (x ,y );};const (_gdde =0xf;_gaed =uint8 (0xff););_cbe :=_gaed ;if alpha !=nil {_abcg :=y *BytesPerLine (width ,4,1);if _abcg < len (alpha ){if x %2==0{_cbe =(alpha [_abcg ]>>uint (4))&_gdde ;}else {_cbe =alpha [_abcg ]&_gdde ;};_cbe |=_cbe <<4;};};var _ffbb ,_cefc ,_gcec uint8 ;if x *3%2==0{_ffbb =(data [_gac ]>>uint (4))&_gdde ;_cefc =data [_gac ]&_gdde ;_gcec =(data [_gac +1]>>uint (4))&_gdde ;}else {_ffbb =data [_gac ]&_gdde ;_cefc =(data [_gac +1]>>uint (4))&_gdde ;_gcec =data [_gac +1]&_gdde ;};if len (decode )==6{_ffbb =uint8 (uint32 (LinearInterpolate (float64 (_ffbb ),0,15,decode [0],decode [1]))&0xf);_cefc =uint8 (uint32 (LinearInterpolate (float64 (_cefc ),0,15,decode [2],decode [3]))&0xf);_gcec =uint8 (uint32 (LinearInterpolate (float64 (_gcec ),0,15,decode [4],decode [5]))&0xf);};return _f .NRGBA {R :(_ffbb <<4)|(_ffbb &0xf),G :(_cefc <<4)|(_cefc &0xf),B :(_gcec <<4)|(_gcec &0xf),A :_cbe },nil ;};func (_cegb *Gray4 )Base ()*ImageBase {return &_cegb .ImageBase };func _ef (_ebaf _f .RGBA )_f .NRGBA {switch _ebaf .A {case 0xff:return _f .NRGBA {R :_ebaf .R ,G :_ebaf .G ,B :_ebaf .B ,A :0xff};case 0x00:return _f .NRGBA {};default:_eab ,_dfb ,_acd ,_cbg :=_ebaf .RGBA ();_eab =(_eab *0xffff)/_cbg ;_dfb =(_dfb *0xffff)/_cbg ;_acd =(_acd *0xffff)/_cbg ;return _f .NRGBA {R :uint8 (_eab >>8),G :uint8 (_dfb >>8),B :uint8 (_acd >>8),A :uint8 (_cbg >>8)};};};func (_ddc *Gray2 )At (x ,y int )_f .Color {_fgb ,_ :=_ddc .ColorAt (x ,y );return _fgb };func (_dffc *ImageBase )MakeAlpha (){_dffc .newAlpha ()};var _ Image =&Monochrome {};func _cffd (_ccaa _df .Image )(Image ,error ){if _fdec ,_ffff :=_ccaa .(*Gray16 );_ffff {return _fdec .Copy (),nil ;};_gbee :=_ccaa .Bounds ();_eebg ,_ebb :=NewImage (_gbee .Max .X ,_gbee .Max .Y ,16,1,nil ,nil ,nil );if _ebb !=nil {return nil ,_ebb ;};_gdee (_ccaa ,_eebg ,_gbee );return _eebg ,nil ;};func (_ebag *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_ebag .copy ()}};func (_ade *Gray2 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray2BPC (x ,y ,_ade .BytesPerLine ,_ade .Data ,_ade .Decode );};func (_fdgg *Gray16 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray16BPC (x ,y ,_fdgg .BytesPerLine ,_fdgg .Data ,_fdgg .Decode );};func (_bb *CMYK32 )Validate ()error {if len (_bb .Data )!=4*_bb .Width *_bb .Height {return _g .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_cgcd *NRGBA16 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_cgcd .Width ,Y :_cgcd .Height }};};func _cgde (_cba _df .Image )(Image ,error ){if _fgg ,_adf :=_cba .(*Gray4 );_adf {return _fgg .Copy (),nil ;};_bfgg :=_cba .Bounds ();_ddde ,_dgbf :=NewImage (_bfgg .Max .X ,_bfgg .Max .Y ,4,1,nil ,nil ,nil );if _dgbf !=nil {return nil ,_dgbf ;};_gdee (_cba ,_ddde ,_bfgg );return _ddde ,nil ;};type CMYK interface{CMYKAt (_af ,_e int )_f .CMYK ;SetCMYK (_dc ,_ga int ,_gb _f .CMYK );};func (_cef *Gray16 )SetGray (x ,y int ,g _f .Gray ){_dgggf :=(y *_cef .BytesPerLine /2+x )*2;if _dgggf +1>=len (_cef .Data ){return ;};_cef .Data [_dgggf ]=g .Y ;_cef .Data [_dgggf +1]=g .Y ;};func _bf (_dff _f .CMYK )_f .NRGBA {_ca ,_cd ,_eda :=_f .CMYKToRGB (_dff .C ,_dff .M ,_dff .Y ,_dff .K );return _f .NRGBA {R :_ca ,G :_cd ,B :_eda ,A :0xff};};func (_gdba *Gray2 )Validate ()error {if len (_gdba .Data )!=_gdba .Height *_gdba .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_bdec *Monochrome )setGray (_ceb int ,_bbf _f .Gray ,_gbgf int ){if _bbf .Y ==0{_bdec .clearBit (_gbgf ,_ceb );}else {_bdec .setBit (_gbgf ,_ceb );};};var _ Gray =&Gray8 {};func IsGrayImgBlackAndWhite (i *_df .Gray )bool {return _cadgd (i )};var _ _df .Image =&Gray4 {};func _ecfc (_fba _f .NRGBA64 )_f .NRGBA {return _f .NRGBA {R :uint8 (_fba .R >>8),G :uint8 (_fba .G >>8),B :uint8 (_fba .B >>8),A :uint8 (_fba .A >>8)};};func (_dgg *CMYK32 )Set (x ,y int ,c _f .Color ){_eb :=4*(y *_dgg .Width +x );if _eb +3>=len (_dgg .Data ){return ;};_aae :=_f .CMYKModel .Convert (c ).(_f .CMYK );_dgg .Data [_eb ]=_aae .C ;_dgg .Data [_eb +1]=_aae .M ;_dgg .Data [_eb +2]=_aae .Y ;_dgg .Data [_eb +3]=_aae .K ;};func (_ceee *ImageBase )newAlpha (){_fec :=BytesPerLine (_ceee .Width ,_ceee .BitsPerComponent ,1);_ceee .Alpha =make ([]byte ,_ceee .Height *_fec );};func _age (_ebc _df .Image )(Image ,error ){if _cag ,_ceac :=_ebc .(*Gray8 );_ceac {return _cag .Copy (),nil ;};_efgf :=_ebc .Bounds ();_ebafc ,_cdcd :=NewImage (_efgf .Max .X ,_efgf .Max .Y ,8,1,nil ,nil ,nil );if _cdcd !=nil {return nil ,_cdcd ;};_gdee (_ebc ,_ebafc ,_efgf );return _ebafc ,nil ;};func (_cbdb *Gray16 )ColorModel ()_f .Model {return _f .Gray16Model };func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};func (_afa *CMYK32 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_afa .Width ,Y :_afa .Height }};};func (_gbgc *Gray4 )Set (x ,y int ,c _f .Color ){if x >=_gbgc .Width ||y >=_gbgc .Height {return ;};_efae :=Gray4Model .Convert (c ).(_f .Gray );_gbgc .setGray (x ,y ,_efae );};func _gcf (_bddc _df .Image ,_egcb Image ,_cdb _df .Rectangle ){if _feb ,_cbeed :=_bddc .(SMasker );_cbeed &&_feb .HasAlpha (){_egcb .(SMasker ).MakeAlpha ();};switch _fdbf :=_bddc .(type ){case Gray :_degd (_fdbf ,_egcb .(NRGBA ),_cdb );case NRGBA :_eceg (_fdbf ,_egcb .(NRGBA ),_cdb );case *_df .NYCbCrA :_ccga (_fdbf ,_egcb .(NRGBA ),_cdb );case CMYK :_aabb (_fdbf ,_egcb .(NRGBA ),_cdb );case RGBA :_debd (_fdbf ,_egcb .(NRGBA ),_cdb );case nrgba64 :_becgb (_fdbf ,_egcb .(NRGBA ),_cdb );default:_bac (_bddc ,_egcb ,_cdb );};};func (_bgab *NRGBA64 )NRGBA64At (x ,y int )_f .NRGBA64 {_cbbg ,_ :=ColorAtNRGBA64 (x ,y ,_bgab .Width ,_bgab .Data ,_bgab .Alpha ,_bgab .Decode );return _cbbg ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_f .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_dg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );};};func init (){_ebbf ()};func _eceg (_dbba ,_edd NRGBA ,_bcebc _df .Rectangle ){for _gaba :=0;_gaba < _bcebc .Max .X ;_gaba ++{for _bage :=0;_bage < _bcebc .Max .Y ;_bage ++{_edd .SetNRGBA (_gaba ,_bage ,_dbba .NRGBAAt (_gaba ,_bage ));};};};func (_cgdf *Gray4 )At (x ,y int )_f .Color {_cfc ,_ :=_cgdf .ColorAt (x ,y );return _cfc };func (_gbb *Monochrome )At (x ,y int )_f .Color {_gge ,_ :=_gbb .ColorAt (x ,y );return _gge };func _ag (_geg _f .Gray )_f .CMYK {return _f .CMYK {K :0xff-_geg .Y }};func _cf (_gg _f .Gray )_f .NRGBA {return _f .NRGBA {R :_gg .Y ,G :_gg .Y ,B :_gg .Y ,A :0xff}};func (_cad *Gray8 )At (x ,y int )_f .Color {_gdfc ,_ :=_cad .ColorAt (x ,y );return _gdfc };func _gdee (_eabc _df .Image ,_ebbe Image ,_gefc _df .Rectangle ){switch _bcag :=_eabc .(type ){case Gray :_edcg (_bcag ,_ebbe .(Gray ),_gefc );case NRGBA :_dddcb (_bcag ,_ebbe .(Gray ),_gefc );case CMYK :_gfg (_bcag ,_ebbe .(Gray ),_gefc );case RGBA :_cbfg (_bcag ,_ebbe .(Gray ),_gefc );default:_bac (_eabc ,_ebbe .(Image ),_gefc );};};func GrayHistogram (g Gray )(_fbff [256]int ){switch _fgga :=g .(type ){case Histogramer :return _fgga .Histogram ();case _df .Image :_cfge :=_fgga .Bounds ();for _ecea :=0;_ecea < _cfge .Max .X ;_ecea ++{for _cdbf :=0;_cdbf < _cfge .Max .Y ;_cdbf ++{_fbff [g .GrayAt (_ecea ,_cdbf ).Y ]++;};};return _fbff ;default:return [256]int {};};};func _cfg (_fbf _f .NYCbCrA )_f .NRGBA {_ebae :=int32 (_fbf .Y )*0x10101;_gfa :=int32 (_fbf .Cb )-128;_edf :=int32 (_fbf .Cr )-128;_cdc :=_ebae +91881*_edf ;if uint32 (_cdc )&0xff000000==0{_cdc >>=8;}else {_cdc =^(_cdc >>31)&0xffff;};_edad :=_ebae -22554*_gfa -46802*_edf ;if uint32 (_edad )&0xff000000==0{_edad >>=8;}else {_edad =^(_edad >>31)&0xffff;};_dfe :=_ebae +116130*_gfa ;if uint32 (_dfe )&0xff000000==0{_dfe >>=8;}else {_dfe =^(_dfe >>31)&0xffff;};return _f .NRGBA {R :uint8 (_cdc >>8),G :uint8 (_edad >>8),B :uint8 (_dfe >>8),A :_fbf .A };};func _bac (_dcg _df .Image ,_ee Image ,_def _df .Rectangle ){for _ecf :=0;_ecf < _def .Max .X ;_ecf ++{for _bg :=0;_bg < _def .Max .Y ;_bg ++{_eaf :=_dcg .At (_ecf ,_bg );_ee .Set (_ecf ,_bg ,_eaf );};};};func (_beg *NRGBA16 )NRGBAAt (x ,y int )_f .NRGBA {_cdcc ,_ :=ColorAtNRGBA16 (x ,y ,_beg .Width ,_beg .BytesPerLine ,_beg .Data ,_beg .Alpha ,_beg .Decode );return _cdcc ;};var _ NRGBA =&NRGBA16 {};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};type NRGBA64 struct{ImageBase };func (_ege colorConverter )Convert (src _df .Image )(Image ,error ){return _ege ._eg (src )};func (_gfcc *Gray4 )GrayAt (x ,y int )_f .Gray {_ffe ,_ :=ColorAtGray4BPC (x ,y ,_gfcc .BytesPerLine ,_gfcc .Data ,_gfcc .Decode );return _ffe ;};func (_aba *Gray16 )Base ()*ImageBase {return &_aba .ImageBase };func (_bdad *ImageBase )Pix ()[]byte {return _bdad .Data };func _ace (_dbd _f .NRGBA )_f .Gray {_bcd ,_gcag ,_cbd ,_ :=_dbd .RGBA ();_gdc :=(19595*_bcd +38470*_gcag +7471*_cbd +1<<15)>>24;return _f .Gray {Y :uint8 (_gdc )};};func (_edg *NRGBA32 )setRGBA (_fed int ,_fddb _f .NRGBA ){_bfab :=3*_fed ;_edg .Data [_bfab ]=_fddb .R ;_edg .Data [_bfab +1]=_fddb .G ;_edg .Data [_bfab +2]=_fddb .B ;if _fed < len (_edg .Alpha ){_edg .Alpha [_fed ]=_fddb .A ;};};var _ Gray =&Gray2 {};type Image interface{_a .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_cfd ,_gdfg int )(_f .Color ,error );Validate ()error ;};func (_caee *NRGBA16 )Validate ()error {if len (_caee .Data )!=3*_caee .Width *_caee .Height /2{return _g .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_ceg *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_ceg .ImageBase .copy (),ModelThreshold :_ceg .ModelThreshold };};func _dgbb (_eefa _df .Image )(Image ,error ){if _dcf ,_ebe :=_eefa .(*NRGBA32 );_ebe {return _dcf .Copy (),nil ;};_bdb ,_cade ,_cefb :=_cgcf (_eefa ,1);_ffcd ,_dfeg :=NewImage (_bdb .Max .X ,_bdb .Max .Y ,8,3,nil ,_cefb ,nil );if _dfeg !=nil {return nil ,_dfeg ;};_gcf (_eefa ,_ffcd ,_bdb );if len (_cefb )!=0&&!_cade {if _cec :=_ddae (_cefb ,_ffcd );_cec !=nil {return nil ,_cec ;};};return _ffcd ,nil ;};func _ddb (_cbgg _df .Image )(Image ,error ){if _fggbg ,_egb :=_cbgg .(*NRGBA16 );_egb {return _fggbg .Copy (),nil ;};_gdcdf :=_cbgg .Bounds ();_aff ,_dddec :=NewImage (_gdcdf .Max .X ,_gdcdf .Max .Y ,4,3,nil ,nil ,nil );if _dddec !=nil {return nil ,_dddec ;};_gcf (_cbgg ,_aff ,_gdcdf );return _aff ,nil ;};func (_ece *Monochrome )Set (x ,y int ,c _f .Color ){_bbb :=y *_ece .BytesPerLine +x >>3;if _bbb > len (_ece .Data )-1{return ;};_dbe :=_ece .ColorModel ().Convert (c ).(_f .Gray );_ece .setGray (x ,_dbe ,_bbb );};func (_gbec *Monochrome )GrayAt (x ,y int )_f .Gray {_fgf ,_ :=ColorAtGray1BPC (x ,y ,_gbec .BytesPerLine ,_gbec .Data ,_gbec .Decode );return _fgf ;};func _cccb (_aacg _f .Gray )_f .Gray {_aacg .Y >>=4;_aacg .Y |=_aacg .Y <<4;return _aacg };func (_cbc *NRGBA64 )Validate ()error {if len (_cbc .Data )!=3*2*_cbc .Width *_cbc .Height {return _g .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func _bgc (_ffg _f .RGBA )_f .Gray {_acg :=(19595*uint32 (_ffg .R )+38470*uint32 (_ffg .G )+7471*uint32 (_ffg .B )+1<<7)>>16;return _f .Gray {Y :uint8 (_acg )};};func _dce (_ega _f .Color )_f .Color {_ddgb :=_f .GrayModel .Convert (_ega ).(_f .Gray );return _dcd (_ddgb )};func (_fdgb *Gray16 )Set (x ,y int ,c _f .Color ){_fff :=(y *_fdgb .BytesPerLine /2+x )*2;if _fff +1>=len (_fdgb .Data ){return ;};_cdfe :=_f .Gray16Model .Convert (c ).(_f .Gray16 );_fdgb .Data [_fff ],_fdgb .Data [_fff +1]=uint8 (_cdfe .Y >>8),uint8 (_cdfe .Y &0xff);};func _cea (_bgf _f .Color )_f .Color {_gee :=_f .GrayModel .Convert (_bgf ).(_f .Gray );return _cccb (_gee )};func (_aa *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_aa .copy ()}};func _ccga (_gcee *_df .NYCbCrA ,_abe NRGBA ,_aafg _df .Rectangle ){for _badg :=0;_badg < _aafg .Max .X ;_badg ++{for _ebbc :=0;_ebbc < _aafg .Max .Y ;_ebbc ++{_fegc :=_gcee .NYCbCrAAt (_badg ,_ebbc );_abe .SetNRGBA (_badg ,_ebbc ,_cfg (_fegc ));};};};func (_afb *Gray8 )SetGray (x ,y int ,g _f .Gray ){_edcd :=y *_afb .BytesPerLine +x ;if _edcd > len (_afb .Data )-1{return ;};_afb .Data [_edcd ]=g .Y ;};func (_bfbg *NRGBA64 )Set (x ,y int ,c _f .Color ){_gbcb :=(y *_bfbg .Width +x )*2;_afaa :=_gbcb *3;if _afaa +5>=len (_bfbg .Data ){return ;};_aaae :=_f .NRGBA64Model .Convert (c ).(_f .NRGBA64 );_bfbg .setNRGBA64 (_afaa ,_aaae ,_gbcb );};var (MonochromeConverter =ConverterFunc (_cggf );Gray2Converter =ConverterFunc (_cdfc );Gray4Converter =ConverterFunc (_cgde );GrayConverter =ConverterFunc (_age );Gray16Converter =ConverterFunc (_cffd );NRGBA16Converter =ConverterFunc (_ddb );NRGBAConverter =ConverterFunc (_dgbb );NRGBA64Converter =ConverterFunc (_bfbgd );CMYKConverter =ConverterFunc (_gbe ););func (_gbcc *ImageBase )HasAlpha ()bool {if _gbcc .Alpha ==nil {return false ;};for _abfc :=range _gbcc .Alpha {if _gbcc .Alpha [_abfc ]!=0xff{return true ;};};return false ;};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_dec :=y *bytesPerLine +x >>2;if _dec >=len (data ){return _f .Gray {},_dg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_gfe :=data [_dec ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_gfe =uint8 (uint32 (LinearInterpolate (float64 (_gfe ),0,3.0,decode [0],decode [1]))&3);};return _f .Gray {Y :_gfe *85},nil ;};func (_dgge *Gray8 )GrayAt (x ,y int )_f .Gray {_eeg ,_ :=ColorAtGray8BPC (x ,y ,_dgge .BytesPerLine ,_dgge .Data ,_dgge .Decode );return _eeg ;};var _ Gray =&Gray4 {};func (_dfaa *Gray16 )GrayAt (x ,y int )_f .Gray {_bef ,_ :=_dfaa .ColorAt (x ,y );return _f .Gray {Y :uint8 (_bef .(_f .Gray16 ).Y >>8)};};type Gray8 struct{ImageBase };func _cgcf (_fdgd _df .Image ,_ddca int )(_df .Rectangle ,bool ,[]byte ){_fada :=_fdgd .Bounds ();var (_cbee bool ;_ebfd []byte ;);switch _gdbdf :=_fdgd .(type ){case SMasker :_cbee =_gdbdf .HasAlpha ();case NRGBA ,RGBA ,*_df .RGBA64 ,nrgba64 ,*_df .NYCbCrA :_ebfd =make ([]byte ,_fada .Max .X *_fada .Max .Y *_ddca );};return _fada ,_cbee ,_ebfd ;};func _ba (_ge ,_bdeb CMYK ,_gab _df .Rectangle ){for _dd :=0;_dd < _gab .Max .X ;_dd ++{for _gad :=0;_gad < _gab .Max .Y ;_gad ++{_bdeb .SetCMYK (_dd ,_gad ,_ge .CMYKAt (_dd ,_gad ));};};};func (_ecb *NRGBA32 )ColorModel ()_f .Model {return _f .NRGBAModel };func _fdc (_aaa _f .CMYK )_f .Gray {_fce ,_caf ,_fg :=_f .CMYKToRGB (_aaa .C ,_aaa .M ,_aaa .Y ,_aaa .K );_dfg :=(19595*uint32 (_fce )+38470*uint32 (_caf )+7471*uint32 (_fg )+1<<7)>>16;return _f .Gray {Y :uint8 (_dfg )};};type NRGBA16 struct{ImageBase };var _ Image =&NRGBA32 {};func (_acege *Monochrome )clearBit (_ebf ,_ffc int ){_acege .Data [_ebf ]&=^(0x80>>uint (_ffc &7))};func (_caac *NRGBA32 )At (x ,y int )_f .Color {_affg ,_ :=_caac .ColorAt (x ,y );return _affg };func _dcd (_effc _f .Gray )_f .Gray {_geb :=_effc .Y >>6;_geb |=_geb <<2;_effc .Y =_geb |_geb <<4;return _effc ;};func (_ddf *ImageBase )copy ()ImageBase {_gada :=*_ddf ;_gada .Data =make ([]byte ,len (_ddf .Data ));copy (_gada .Data ,_ddf .Data );return _gada ;};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_ccad :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );var _dfcc Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_dfcc =&Monochrome {ImageBase :_ccad ,ModelThreshold :0x0f};case 2:_dfcc =&Gray2 {ImageBase :_ccad };case 4:_dfcc =&Gray4 {ImageBase :_ccad };case 8:_dfcc =&Gray8 {ImageBase :_ccad };case 16:_dfcc =&Gray16 {ImageBase :_ccad };};case 3:switch bitsPerComponent {case 4:_dfcc =&NRGBA16 {ImageBase :_ccad };case 8:_dfcc =&NRGBA32 {ImageBase :_ccad };case 16:_dfcc =&NRGBA64 {ImageBase :_ccad };};case 4:_dfcc =&CMYK32 {ImageBase :_ccad };};if _dfcc ==nil {return nil ,ErrInvalidImage ;};return _dfcc ,nil ;};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;};case 4:return CMYKConverter ,nil ;};return nil ,_dg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );};var ErrInvalidImage =_g .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");func (_egea *NRGBA64 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtNRGBA64 (x ,y ,_egea .Width ,_egea .Data ,_egea .Alpha ,_egea .Decode );};func (_aaf *Monochrome )Histogram ()(_cge [256]int ){for _ ,_abgb :=range _aaf .Data {_cge [0xff]+=int (_adee [_aaf .Data [_abgb ]]);};return _cge ;};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_gag :=y *bytesPerLine +x ;if _gag >=len (data ){return _f .Gray {},_dg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_aga :=data [_gag ];if len (decode )==2{_aga =uint8 (uint32 (LinearInterpolate (float64 (_aga ),0,255,decode [0],decode [1]))&0xff);};return _f .Gray {Y :_aga },nil ;};var _ _df .Image =&Monochrome {};func (_bgdg *Gray16 )Histogram ()(_gbd [256]int ){for _egc :=0;_egc < _bgdg .Width ;_egc ++{for _ebaa :=0;_ebaa < _bgdg .Height ;_ebaa ++{_gbd [_bgdg .GrayAt (_egc ,_ebaa ).Y ]++;};};return _gbd ;};type Gray2 struct{ImageBase };func (_ceba *Gray2 )GrayAt (x ,y int )_f .Gray {_acea ,_ :=ColorAtGray2BPC (x ,y ,_ceba .BytesPerLine ,_ceba .Data ,_ceba .Decode );return _acea ;};func _aabb (_ddab CMYK ,_cbaa NRGBA ,_ddfe _df .Rectangle ){for _dbc :=0;_dbc < _ddfe .Max .X ;_dbc ++{for _fbeb :=0;_fbeb < _ddfe .Max .Y ;_fbeb ++{_fda :=_ddab .CMYKAt (_dbc ,_fbeb );_cbaa .SetNRGBA (_dbc ,_fbeb ,_bf (_fda ));};};};func (_agdf *Gray8 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_agdf .Width ,Y :_agdf .Height }};};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _d .Abs (xmax -xmin )< 0.000001{return ymin ;};_fbd :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _fbd ;};func (_ddgf *Monochrome )SetGray (x ,y int ,g _f .Gray ){_egf :=y *_ddgf .BytesPerLine +x >>3;if _egf > len (_ddgf .Data )-1{return ;};g =_cca (g ,monochromeModel (_ddgf .ModelThreshold ));_ddgf .setGray (x ,g ,_egf );};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func (_gfc *Monochrome )Base ()*ImageBase {return &_gfc .ImageBase };func (_bde *CMYK32 )SetCMYK (x ,y int ,c _f .CMYK ){_fd :=4*(y *_bde .Width +x );if _fd +3>=len (_bde .Data ){return ;};_bde .Data [_fd ]=c .C ;_bde .Data [_fd +1]=c .M ;_bde .Data [_fd +2]=c .Y ;_bde .Data [_fd +3]=c .K ;};func _gfg (_fbgg CMYK ,_dgggd Gray ,_bgfc _df .Rectangle ){for _feg :=0;_feg < _bgfc .Max .X ;_feg ++{for _eef :=0;_eef < _bgfc .Max .Y ;_eef ++{_bgdd :=_fdc (_fbgg .CMYKAt (_feg ,_eef ));_dgggd .SetGray (_feg ,_eef ,_bgdd );};};};func MonochromeModel (threshold uint8 )_f .Model {return monochromeModel (threshold )};func (_b *CMYK32 )Base ()*ImageBase {return &_b .ImageBase };func _debd (_ecg RGBA ,_abcb NRGBA ,_afgf _df .Rectangle ){for _bddd :=0;_bddd < _afgf .Max .X ;_bddd ++{for _gebc :=0;_gebc < _afgf .Max .Y ;_gebc ++{_bad :=_ecg .RGBAAt (_bddd ,_gebc );_abcb .SetNRGBA (_bddd ,_gebc ,_ef (_bad ));};};};func (_bec *NRGBA16 )Set (x ,y int ,c _f .Color ){_becg :=y *_bec .BytesPerLine +x *3/2;if _becg +1>=len (_bec .Data ){return ;};_gdfd :=NRGBA16Model .Convert (c ).(_f .NRGBA );_bec .setNRGBA (x ,y ,_becg ,_gdfd );};func (_fbea *NRGBA16 )setNRGBA (_adeb ,_feaf ,_eed int ,_deaa _f .NRGBA ){if _adeb *3%2==0{_fbea .Data [_eed ]=(_deaa .R >>4)<<4|(_deaa .G >>4);_fbea .Data [_eed +1]=(_deaa .B >>4)<<4|(_fbea .Data [_eed +1]&0xf);}else {_fbea .Data [_eed ]=(_fbea .Data [_eed ]&0xf0)|(_deaa .R >>4);_fbea .Data [_eed +1]=(_deaa .G >>4)<<4|(_deaa .B >>4);};if _fbea .Alpha !=nil {_ggf :=_feaf *BytesPerLine (_fbea .Width ,4,1);if _ggf < len (_fbea .Alpha ){if _adeb %2==0{_fbea .Alpha [_ggf ]=(_deaa .A >>uint (4))<<uint (4)|(_fbea .Alpha [_eed ]&0xf);}else {_fbea .Alpha [_ggf ]=(_fbea .Alpha [_ggf ]&0xf0)|(_deaa .A >>uint (4));};};};};func (_gbga *Gray16 )At (x ,y int )_f .Color {_gdd ,_ :=_gbga .ColorAt (x ,y );return _gdd };type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func _dddcb (_ddgd NRGBA ,_ead Gray ,_eee _df .Rectangle ){for _aca :=0;_aca < _eee .Max .X ;_aca ++{for _fbaa :=0;_fbaa < _eee .Max .Y ;_fbaa ++{_adag :=_ace (_ddgd .NRGBAAt (_aca ,_fbaa ));_ead .SetGray (_aca ,_fbaa ,_adag );};};};func _aeec (_fae _df .Image ,_eafdc uint8 )*_df .Gray {_ffge :=_fae .Bounds ();_ffgf :=_df .NewGray (_ffge );var (_bdaf _f .Color ;_bfbc _f .Gray ;);for _geaae :=0;_geaae < _ffge .Max .X ;_geaae ++{for _gbba :=0;_gbba < _ffge .Max .Y ;_gbba ++{_bdaf =_fae .At (_geaae ,_gbba );_ffgf .Set (_geaae ,_gbba ,_bdaf );_bfbc =_ffgf .GrayAt (_geaae ,_gbba );_ffgf .SetGray (_geaae ,_gbba ,_f .Gray {Y :_bff (_bfbc .Y ,_eafdc )});};};return _ffgf ;};type monochromeThresholdConverter struct{Threshold uint8 ;};func (_bba *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_bba .copy ()}};func (_bd *CMYK32 )At (x ,y int )_f .Color {_gae ,_ :=_bd .ColorAt (x ,y );return _gae };func (_gbf *Gray16 )Validate ()error {if len (_gbf .Data )!=_gbf .Height *_gbf .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_cde *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_cde .copy ()}};var _ _df .Image =&NRGBA16 {};func (_cfa *Gray4 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_cfa .Width ,Y :_cfa .Height }};};func _edfb (_cfad _f .Color )_f .Color {_bgdgd :=_f .NRGBAModel .Convert (_cfad ).(_f .NRGBA );return _dffb (_bgdgd );};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_dg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );};};type Gray interface{GrayAt (_aag ,_ged int )_f .Gray ;SetGray (_fcd ,_bce int ,_acb _f .Gray );};type CMYK32 struct{ImageBase };func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_gdfe :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};if data ==nil {_gdfe .Data =make ([]byte ,height *_gdfe .BytesPerLine );};return _gdfe ;};type Histogramer interface{Histogram ()[256]int ;};func (_eaa *Gray8 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray8BPC (x ,y ,_eaa .BytesPerLine ,_eaa .Data ,_eaa .Decode );};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_f .NRGBA64 ,error ){_fdb :=(y *width +x )*2;_gfed :=_fdb *3;if _gfed +5>=len (data ){return _f .NRGBA64 {},_dg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};const _caegb =0xffff;_ceeb :=uint16 (_caegb );if alpha !=nil &&len (alpha )> _fdb +1{_ceeb =uint16 (alpha [_fdb ])<<8|uint16 (alpha [_fdb +1]);};_fefe :=uint16 (data [_gfed ])<<8|uint16 (data [_gfed +1]);_effg :=uint16 (data [_gfed +2])<<8|uint16 (data [_gfed +3]);_edbg :=uint16 (data [_gfed +4])<<8|uint16 (data [_gfed +5]);if len (decode )==6{_fefe =uint16 (uint64 (LinearInterpolate (float64 (_fefe ),0,65535,decode [0],decode [1]))&_caegb );_effg =uint16 (uint64 (LinearInterpolate (float64 (_effg ),0,65535,decode [2],decode [3]))&_caegb );_edbg =uint16 (uint64 (LinearInterpolate (float64 (_edbg ),0,65535,decode [4],decode [5]))&_caegb );};return _f .NRGBA64 {R :_fefe ,G :_effg ,B :_edbg ,A :_ceeb },nil ;};func (_cee *Gray2 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_cee .Width ,Y :_cee .Height }};};func (_fgfd *Gray4 )ColorModel ()_f .Model {return Gray4Model };func _ff (_gea RGBA ,_gbg CMYK ,_bcc _df .Rectangle ){for _dda :=0;_dda < _bcc .Max .X ;_dda ++{for _gbeb :=0;_gbeb < _bcc .Max .Y ;_gbeb ++{_dfa :=_gea .RGBAAt (_dda ,_gbeb );_gbg .SetCMYK (_dda ,_gbeb ,_ded (_dfa ));};};};func _cca (_gggg _f .Gray ,_caa monochromeModel )_f .Gray {if _gggg .Y > uint8 (_caa ){return _f .Gray {Y :_d .MaxUint8 };};return _f .Gray {};};type NRGBA32 struct{ImageBase };func _dcc (_baa _f .NRGBA )_f .CMYK {_eec ,_cfe ,_bda ,_ :=_baa .RGBA ();_ddg ,_bca ,_fbb ,_ad :=_f .RGBToCMYK (uint8 (_eec >>8),uint8 (_cfe >>8),uint8 (_bda >>8));return _f .CMYK {C :_ddg ,M :_bca ,Y :_fbb ,K :_ad };};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_aeg :=BytesPerLine (width ,bitsPerComponent ,colorComponents );if _aeg ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_bge :=width *colorComponents *bitsPerComponent ;_bga :=_aeg *8;_aefd :=8-(_bga -_bge );_efaf :=_fc .NewReader (data );_eegf :=_aeg -1;_beff :=make ([]byte ,_eegf );_eea :=make ([]byte ,height *_aeg );_gcaf :=_fc .NewWriterMSB (_eea );var _gabf uint64 ;var _fdd error ;for _eeeb :=0;_eeeb < height ;_eeeb ++{_ ,_fdd =_efaf .Read (_beff );if _fdd !=nil {return nil ,_fdd ;};_ ,_fdd =_gcaf .Write (_beff );if _fdd !=nil {return nil ,_fdd ;};_gabf ,_fdd =_efaf .ReadBits (byte (_aefd ));if _fdd !=nil {return nil ,_fdd ;};_ ,_fdd =_gcaf .WriteBits (_gabf ,_aefd );if _fdd !=nil {return nil ,_fdd ;};_gcaf .FinishByte ();};return _eea ,nil ;};func ImgToBinary (i _df .Image ,threshold uint8 )*_df .Gray {switch _fgfg :=i .(type ){case *_df .Gray :if _cadgd (_fgfg ){return _fgfg ;};return _ebeg (_fgfg ,threshold );case *_df .Gray16 :return _bbg (_fgfg ,threshold );default:return _aeec (_fgfg ,threshold );};};type ColorConverter interface{Convert (_gdf _df .Image )(Image ,error );};func (_gfac *Gray2 )Histogram ()(_bdfe [256]int ){for _ada :=0;_ada < _gfac .Width ;_ada ++{for _bcae :=0;_bcae < _gfac .Height ;_bcae ++{_bdfe [_gfac .GrayAt (_ada ,_bcae ).Y ]++;};};return _bdfe ;};func (_abf *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_abf .copy ()}};func (_cbf *Gray4 )Histogram ()(_fde [256]int ){for _ccf :=0;_ccf < _cbf .Width ;_ccf ++{for _agb :=0;_agb < _cbf .Height ;_agb ++{_fde [_cbf .GrayAt (_ccf ,_agb ).Y ]++;};};return _fde ;};func (_dgf *NRGBA16 )Base ()*ImageBase {return &_dgf .ImageBase };func (_gabfd *NRGBA64 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_gabfd .Width ,Y :_gabfd .Height }};};func (_acdc *NRGBA64 )Base ()*ImageBase {return &_acdc .ImageBase };func _bff (_bfe ,_gbaf uint8 )uint8 {if _bfe < _gbaf {return 255;};return 0;};func (_ac *CMYK32 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtCMYK (x ,y ,_ac .Width ,_ac .Data ,_ac .Decode );};var _ Image =&Gray4 {};func (_feae *NRGBA32 )Set (x ,y int ,c _f .Color ){_bceb :=y *_feae .Width +x ;_dad :=3*_bceb ;if _dad +2>=len (_feae .Data ){return ;};_gff :=_f .NRGBAModel .Convert (c ).(_f .NRGBA );_feae .setRGBA (_bceb ,_gff );};func (_efe *Gray2 )ColorModel ()_f .Model {return Gray2Model };type colorConverter struct{_eg func (_cgg _df .Image )(Image ,error );};func _ebdf (_ebab int ,_bcaca int )error {return _dg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_ebab ,_bcaca );};var _ Image =&Gray2 {};type Gray4 struct{ImageBase };type RGBA interface{RGBAAt (_cadg ,_bcg int )_f .RGBA ;SetRGBA (_eag ,_abfe int ,_abga _f .RGBA );};func (_egg *Gray8 )Set (x ,y int ,c _f .Color ){_gaec :=y *_egg .BytesPerLine +x ;if _gaec > len (_egg .Data )-1{return ;};_dfc :=_f .GrayModel .Convert (c );_egg .Data [_gaec ]=_dfc .(_f .Gray ).Y ;};func (_dceg *NRGBA16 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtNRGBA16 (x ,y ,_dceg .Width ,_dceg .BytesPerLine ,_dceg .Data ,_dceg .Alpha ,_dceg .Decode );};func _daa (_aefe uint8 )bool {if _aefe ==0||_aefe ==255{return true ;};return false ;};func (_aefg *NRGBA64 )SetNRGBA64 (x ,y int ,c _f .NRGBA64 ){_edb :=(y *_aefg .Width +x )*2;_fdce :=_edb *3;if _fdce +5>=len (_aefg .Data ){return ;};_aefg .setNRGBA64 (_fdce ,c ,_edb );};func _becgb (_dfee nrgba64 ,_gdda NRGBA ,_gfee _df .Rectangle ){for _dgad :=0;_dgad < _gfee .Max .X ;_dgad ++{for _dbeb :=0;_dbeb < _gfee .Max .Y ;_dbeb ++{_cgec :=_dfee .NRGBA64At (_dgad ,_dbeb );_gdda .SetNRGBA (_dgad ,_dbeb ,_ecfc (_cgec ));};};};func FromGoImage (i _df .Image )(Image ,error ){switch _fccf :=i .(type ){case Image :return _fccf .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_df .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_df .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};func ImgToGray (i _df .Image )*_df .Gray {if _fca ,_dbcb :=i .(*_df .Gray );_dbcb {return _fca ;};_cfada :=i .Bounds ();_eebe :=_df .NewGray (_cfada );for _dbbb :=0;_dbbb < _cfada .Max .X ;_dbbb ++{for _dca :=0;_dca < _cfada .Max .Y ;_dca ++{_aaec :=i .At (_dbbb ,_dca );_eebe .Set (_dbbb ,_dca ,_aaec );};};return _eebe ;};func (_agbc *Gray16 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_agbc .Width ,Y :_agbc .Height }};};func (_dbeg *Monochrome )Validate ()error {if len (_dbeg .Data )!=_dbeg .Height *_dbeg .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_agcc *Gray2 )Set (x ,y int ,c _f .Color ){if x >=_agcc .Width ||y >=_agcc .Height {return ;};_bgdf :=Gray2Model .Convert (c ).(_f .Gray );_acgg :=y *_agcc .BytesPerLine ;_cae :=_acgg +(x >>2);_cdd :=_bgdf .Y >>6;_agcc .Data [_cae ]=(_agcc .Data [_cae ]&(^(0xc0>>uint (2*((x )&3)))))|(_cdd <<uint (6-2*(x &3)));};func _aega (_bfbb _df .Image ,_afab Image ,_dae _df .Rectangle ){if _gfga ,_bcb :=_bfbb .(SMasker );_bcb &&_gfga .HasAlpha (){_afab .(SMasker ).MakeAlpha ();};_bac (_bfbb ,_afab ,_dae );};func _gbe (_fdg _df .Image )(Image ,error ){if _fa ,_cb :=_fdg .(*CMYK32 );_cb {return _fa .Copy (),nil ;};_eba :=_fdg .Bounds ();_de ,_fb :=NewImage (_eba .Max .X ,_eba .Max .Y ,8,4,nil ,nil ,nil );if _fb !=nil {return nil ,_fb ;};switch _cbb :=_fdg .(type ){case CMYK :_ba (_cbb ,_de .(CMYK ),_eba );case Gray :_gf (_cbb ,_de .(CMYK ),_eba );case NRGBA :_gdg (_cbb ,_de .(CMYK ),_eba );case RGBA :_ff (_cbb ,_de .(CMYK ),_eba );default:_bac (_fdg ,_de ,_eba );};return _de ,nil ;};func (_abaa *NRGBA32 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtNRGBA32 (x ,y ,_abaa .Width ,_abaa .Data ,_abaa .Alpha ,_abaa .Decode );};func (_dccg *NRGBA32 )SetNRGBA (x ,y int ,c _f .NRGBA ){_cdcf :=y *_dccg .Width +x ;_afbg :=3*_cdcf ;if _afbg +2>=len (_dccg .Data ){return ;};_dccg .setRGBA (_cdcf ,c );return ;};func (_bbag *NRGBA16 )At (x ,y int )_f .Color {_ccg ,_ :=_bbag .ColorAt (x ,y );return _ccg };type monochromeModel uint8 ;type NRGBA interface{NRGBAAt (_gddd ,_agcg int )_f .NRGBA ;SetNRGBA (_faa ,_bfa int ,_cffa _f .NRGBA );};type Gray16 struct{ImageBase };func _ded (_fbc _f .RGBA )_f .CMYK {_bfd ,_fbg ,_aab ,_edc :=_f .RGBToCMYK (_fbc .R ,_fbc .G ,_fbc .B );return _f .CMYK {C :_bfd ,M :_fbg ,Y :_aab ,K :_edc };};var _ _df .Image =&Gray16 {};var _ _df .Image =&NRGBA64 {};var _adee [256]uint8 ;func ConverterFunc (converterFunc func (_dcga _df .Image )(Image ,error ))ColorConverter {return colorConverter {_eg :converterFunc };};func (_dea *Gray8 )Base ()*ImageBase {return &_dea .ImageBase };var (Gray2Model =_f .ModelFunc (_dce );Gray4Model =_f .ModelFunc (_cea );NRGBA16Model =_f .ModelFunc (_edfb ););func (_bfg *Monochrome )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray1BPC (x ,y ,_bfg .BytesPerLine ,_bfg .Data ,_bfg .Decode );};var _ Image =&Gray16 {};var _ Image =&Gray8 {};func _gdg (_bc NRGBA ,_ec CMYK ,_bdd _df .Rectangle ){for _afg :=0;_afg < _bdd .Max .X ;_afg ++{for _ab :=0;_ab < _bdd .Max .Y ;_ab ++{_ae :=_bc .NRGBAAt (_afg ,_ab );_ec .SetCMYK (_afg ,_ab ,_dcc (_ae ));};};};var _ Image =&NRGBA16 {};func _bfbgd (_ebdc _df .Image )(Image ,error ){if _fedb ,_acga :=_ebdc .(*NRGBA64 );_acga {return _fedb .Copy (),nil ;};_dadb ,_dgcg ,_aaaeb :=_cgcf (_ebdc ,2);_dgd ,_abgd :=NewImage (_dadb .Max .X ,_dadb .Max .Y ,16,3,nil ,_aaaeb ,nil );if _abgd !=nil {return nil ,_abgd ;};_aega (_ebdc ,_dgd ,_dadb );if len (_aaaeb )!=0&&!_dgcg {if _dee :=_ddae (_aaaeb ,_dgd );_dee !=nil {return nil ,_dee ;};};return _dgd ,nil ;};func (_ggd *Monochrome )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_ggd .Width ,Y :_ggd .Height }};};func _cggf (_fcf _df .Image )(Image ,error ){if _fcb ,_agc :=_fcf .(*Monochrome );_agc {return _fcb ,nil ;};_baf ,_gce :=_fcf .(Gray );if !_gce {_gcc ,_cfb :=GrayConverter .Convert (_fcf );if _cfb !=nil {return nil ,_cfb ;};_baf =_gcc .(Gray );};_deb :=_fcf .Bounds ();_cfba ,_bcac :=NewImage (_deb .Max .X ,_deb .Max .Y ,1,1,nil ,nil ,nil );if _bcac !=nil {return nil ,_bcac ;};_be :=_cfba .(*Monochrome );_eeb :=AutoThresholdTriangle (GrayHistogram (_baf ));for _aceg :=0;_aceg < _deb .Max .X ;_aceg ++{for _abg :=0;_abg < _deb .Max .Y ;_abg ++{_ggg :=_cca (_baf .GrayAt (_aceg ,_abg ),monochromeModel (_eeb ));_be .SetGray (_aceg ,_abg ,_ggg );};};return _cfba ,nil ;};func _dffb (_cafg _f .NRGBA )_f .NRGBA {_cafg .R =_cafg .R >>4|(_cafg .R >>4)<<4;_cafg .G =_cafg .G >>4|(_cafg .G >>4)<<4;_cafg .B =_cafg .B >>4|(_cafg .B >>4)<<4;return _cafg ;};func (_dfd *Gray8 )Histogram ()(_egfg [256]int ){for _efg :=0;_efg < len (_dfd .Data );_efg ++{_egfg [_dfd .Data [_efg ]]++;};return _egfg ;};var _ _df .Image =&Gray8 {};type nrgba64 interface{NRGBA64At (_gaea ,_add int )_f .NRGBA64 ;SetNRGBA64 (_addf ,_gcagf int ,_efgc _f .NRGBA64 );};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_f .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_dg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );};};func (_bfgf *NRGBA16 )SetNRGBA (x ,y int ,c _f .NRGBA ){_geaa :=y *_bfgf .BytesPerLine +x *3/2;if _geaa +1>=len (_bfgf .Data ){return ;};c =_dffb (c );_bfgf .setNRGBA (x ,y ,_geaa ,c );};var _ _df .Image =&Gray2 {};func (_cff *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_cff .copy ()}};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_f .CMYK ,error ){_gd :=4*(y *width +x );if _gd +3>=len (data ){return _f .CMYK {},_dg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};C :=data [_gd ]&0xff;M :=data [_gd +1]&0xff;Y :=data [_gd +2]&0xff;K :=data [_gd +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _f .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func _cdfc (_ffb _df .Image )(Image ,error ){if _dgga ,_fcc :=_ffb .(*Gray2 );_fcc {return _dgga .Copy (),nil ;};_gdbd :=_ffb .Bounds ();_faf ,_aea :=NewImage (_gdbd .Max .X ,_gdbd .Max .Y ,2,1,nil ,nil ,nil );if _aea !=nil {return nil ,_aea ;};_gdee (_ffb ,_faf ,_gdbd );return _faf ,nil ;};func (_cbgf monochromeModel )Convert (c _f .Color )_f .Color {_fe :=_f .GrayModel .Convert (c ).(_f .Gray );return _cca (_fe ,_cbgf );};func (_adb *NRGBA32 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_adb .Width ,Y :_adb .Height }};};func (_bcgd *NRGBA32 )NRGBAAt (x ,y int )_f .NRGBA {_cdcce ,_ :=ColorAtNRGBA32 (x ,y ,_bcgd .Width ,_bcgd .Data ,_bcgd .Alpha ,_bcgd .Decode );return _cdcce ;};func (_dbed *Gray8 )ColorModel ()_f .Model {return _f .GrayModel };func (_gcg *NRGBA32 )Validate ()error {if len (_gcg .Data )!=3*_gcg .Width *_gcg .Height {return _g .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_bfb :=y *bytesPerLine +x >>3;if _bfb >=len (data ){return _f .Gray {},_dg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_acbd :=data [_bfb ]>>uint (7-(x &7))&1;if len (decode )==2{_acbd =uint8 (LinearInterpolate (float64 (_acbd ),0.0,1.0,decode [0],decode [1]))&1;};return _f .Gray {Y :_acbd *255},nil ;};func _gf (_dggg Gray ,_fcg CMYK ,_db _df .Rectangle ){for _fbe :=0;_fbe < _db .Max .X ;_fbe ++{for _bddf :=0;_bddf < _db .Max .Y ;_bddf ++{_cc :=_dggg .GrayAt (_fbe ,_bddf );_fcg .SetCMYK (_fbe ,_bddf ,_ag (_cc ));};};};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};var _ Gray =&Monochrome {};func _ebeg (_geff *_df .Gray ,_aaac uint8 )*_df .Gray {_cgb :=_geff .Bounds ();_fbcbe :=_df .NewGray (_cgb );for _dge :=0;_dge < _cgb .Dx ();_dge ++{for _acf :=0;_acf < _cgb .Dy ();_acf ++{_ecd :=_geff .GrayAt (_dge ,_acf );_fbcbe .SetGray (_dge ,_acf ,_f .Gray {Y :_bff (_ecd .Y ,_aaac )});};};return _fbcbe ;};func _bbg (_gcbf *_df .Gray16 ,_bbbg uint8 )*_df .Gray {_cfdd :=_gcbf .Bounds ();_fbae :=_df .NewGray (_cfdd );for _edda :=0;_edda < _cfdd .Dx ();_edda ++{for _bfc :=0;_bfc < _cfdd .Dy ();_bfc ++{_bfbe :=_gcbf .Gray16At (_edda ,_bfc );_fbae .SetGray (_edda ,_bfc ,_f .Gray {Y :_bff (uint8 (_bfbe .Y /256),_bbbg )});};};return _fbae ;};func _ebbf (){for _fggb :=0;_fggb < 256;_fggb ++{_adee [_fggb ]=uint8 (_fggb &0x1)+(uint8 (_fggb >>1)&0x1)+(uint8 (_fggb >>2)&0x1)+(uint8 (_fggb >>3)&0x1)+(uint8 (_fggb >>4)&0x1)+(uint8 (_fggb >>5)&0x1)+(uint8 (_fggb >>6)&0x1)+(uint8 (_fggb >>7)&0x1);};};func (_bgaf *NRGBA16 )ColorModel ()_f .Model {return NRGBA16Model };func _degd (_cecd Gray ,_agcbg NRGBA ,_agf _df .Rectangle ){for _dcee :=0;_dcee < _agf .Max .X ;_dcee ++{for _dcff :=0;_dcff < _agf .Max .Y ;_dcff ++{_fbcb :=_cecd .GrayAt (_dcee ,_dcff );_agcbg .SetNRGBA (_dcee ,_dcff ,_cf (_fbcb ));};};};func _ddae (_ffeg []byte ,_bae Image )error {_gege :=true ;for _afag :=0;_afag < len (_ffeg );_afag ++{if _ffeg [_afag ]!=0xff{_gege =false ;break ;};};if _gege {switch _ggbd :=_bae .(type ){case *NRGBA32 :_ggbd .Alpha =nil ;case *NRGBA64 :_ggbd .Alpha =nil ;default:return _dg .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_bae );};};return nil ;};func (_ed *CMYK32 )ColorModel ()_f .Model {return _f .CMYKModel };func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_f .NRGBA ,error ){_bdc :=y *width +x ;_ccfg :=3*_bdc ;if _ccfg +2>=len (data ){return _f .NRGBA {},_dg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_gda :=uint8 (0xff);if alpha !=nil &&len (alpha )> _bdc {_gda =alpha [_bdc ];};_gcaa ,_eaaf ,_cffb :=data [_ccfg ],data [_ccfg +1],data [_ccfg +2];if len (decode )==6{_gcaa =uint8 (uint32 (LinearInterpolate (float64 (_gcaa ),0,255,decode [0],decode [1]))&0xff);_eaaf =uint8 (uint32 (LinearInterpolate (float64 (_eaaf ),0,255,decode [2],decode [3]))&0xff);_cffb =uint8 (uint32 (LinearInterpolate (float64 (_cffb ),0,255,decode [4],decode [5]))&0xff);};return _f .NRGBA {R :_gcaa ,G :_eaaf ,B :_cffb ,A :_gda },nil ;};func (_dga *ImageBase )GetAlpha ()[]byte {return _dga .Alpha };func (_cdcb *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_cdcb .copy ()}};func (_da *Monochrome )ColorModel ()_f .Model {return MonochromeModel (_da .ModelThreshold )};func (_fgc *NRGBA64 )setNRGBA64 (_bdg int ,_dgcd _f .NRGBA64 ,_afagd int ){_fgc .Data [_bdg ]=uint8 (_dgcd .R >>8);_fgc .Data [_bdg +1]=uint8 (_dgcd .R &0xff);_fgc .Data [_bdg +2]=uint8 (_dgcd .G >>8);_fgc .Data [_bdg +3]=uint8 (_dgcd .G &0xff);_fgc .Data [_bdg +4]=uint8 (_dgcd .B >>8);_fgc .Data [_bdg +5]=uint8 (_dgcd .B &0xff);if _afagd +1< len (_fgc .Alpha ){_fgc .Alpha [_afagd ]=uint8 (_dgcd .A >>8);_fgc .Alpha [_afagd +1]=uint8 (_dgcd .A &0xff);};};func _cadgd (_befa *_df .Gray )bool {for _bfbge :=0;_bfbge < len (_befa .Pix );_bfbge ++{if !_daa (_befa .Pix [_bfbge ]){return false ;};};return true ;};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_bag :=y *bytesPerLine +x >>1;if _bag >=len (data ){return _f .Gray {},_dg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_ddd :=data [_bag ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_ddd =uint8 (uint32 (LinearInterpolate (float64 (_ddd ),0,15,decode [0],decode [1]))&0xf);};return _f .Gray {Y :_ddd *17&0xff},nil ;};func (_deg *Gray4 )SetGray (x ,y int ,g _f .Gray ){if x >=_deg .Width ||y >=_deg .Height {return ;};g =_cccb (g );_deg .setGray (x ,y ,g );};func (_ebd *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_ebd .copy ()}};var _ Image =&CMYK32 {};func (_fef *Gray2 )Base ()*ImageBase {return &_fef .ImageBase };func (_ea *CMYK32 )CMYKAt (x ,y int )_f .CMYK {_bdf ,_ :=ColorAtCMYK (x ,y ,_ea .Width ,_ea .Data ,_ea .Decode );return _bdf ;};func (_fga *Gray4 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray4BPC (x ,y ,_fga .BytesPerLine ,_fga .Data ,_fga .Decode );};func (_eefb *NRGBA64 )At (x ,y int )_f .Color {_ccd ,_ :=_eefb .ColorAt (x ,y );return _ccd };func (_decc *NRGBA32 )Base ()*ImageBase {return &_decc .ImageBase };var _ _df .Image =&NRGBA32 {};var _ Gray =&Gray16 {};func _cbfg (_edada RGBA ,_bcf Gray ,_bafe _df .Rectangle ){for _bccg :=0;_bccg < _bafe .Max .X ;_bccg ++{for _dde :=0;_dde < _bafe .Max .Y ;_dde ++{_ebcg :=_bgc (_edada .RGBAAt (_bccg ,_dde ));_bcf .SetGray (_bccg ,_dde ,_ebcg );};};};func AutoThresholdTriangle (histogram [256]int )uint8 {var _deaag ,_badb ,_gcbc ,_dgff int ;for _egd :=0;_egd < len (histogram );_egd ++{if histogram [_egd ]> 0{_deaag =_egd ;break ;};};if _deaag > 0{_deaag --;};for _caff :=255;_caff > 0;_caff --{if histogram [_caff ]> 0{_dgff =_caff ;break ;};};if _dgff < 255{_dgff ++;};for _dgac :=0;_dgac < 256;_dgac ++{if histogram [_dgac ]> _badb {_gcbc =_dgac ;_badb =histogram [_dgac ];};};var _gagf bool ;if (_gcbc -_deaag )< (_dgff -_gcbc ){_gagf =true ;var _bgddg int ;_baca :=255;for _bgddg < _baca {_dcfb :=histogram [_bgddg ];histogram [_bgddg ]=histogram [_baca ];histogram [_baca ]=_dcfb ;_bgddg ++;_baca --;};_deaag =255-_dgff ;_gcbc =255-_gcbc ;};if _deaag ==_gcbc {return uint8 (_deaag );};_geaaa :=float64 (histogram [_gcbc ]);_gba :=float64 (_deaag -_gcbc );_cbbf :=_d .Sqrt (_geaaa *_geaaa +_gba *_gba );_geaaa /=_cbbf ;_gba /=_cbbf ;_cbbf =_geaaa *float64 (_deaag )+_gba *float64 (histogram [_deaag ]);_aegb :=_deaag ;var _abcgb float64 ;for _dbeda :=_deaag +1;_dbeda <=_gcbc ;_dbeda ++{_eeba :=_geaaa *float64 (_dbeda )+_gba *float64 (histogram [_dbeda ])-_cbbf ;if _eeba > _abcgb {_aegb =_dbeda ;_abcgb =_eeba ;};};_aegb --;if _gagf {var _abag int ;_gabg :=255;for _abag < _gabg {_ccff :=histogram [_abag ];histogram [_abag ]=histogram [_gabg ];histogram [_gabg ]=_ccff ;_abag ++;_gabg --;};return uint8 (255-_aegb );};return uint8 (_aegb );};func (_cdf *Gray2 )SetGray (x ,y int ,gray _f .Gray ){_afe :=_dcd (gray );_gbc :=y *_cdf .BytesPerLine ;_aee :=_gbc +(x >>2);if _aee >=len (_cdf .Data ){return ;};_gde :=_afe .Y >>6;_cdf .Data [_aee ]=(_cdf .Data [_aee ]&(^(0xc0>>uint (2*((x )&3)))))|(_gde <<uint (6-2*(x &3)));};func _edcg (_agad ,_cgc Gray ,_deag _df .Rectangle ){for _gegg :=0;_gegg < _deag .Max .X ;_gegg ++{for _bgfe :=0;_bgfe < _deag .Max .Y ;_bgfe ++{_cgc .SetGray (_gegg ,_bgfe ,_agad .GrayAt (_gegg ,_bgfe ));};};};