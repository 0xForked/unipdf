//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_a "encoding/binary";_c "errors";_eg "fmt";_bg "github.com/unidoc/unipdf/v3/common";_gg "github.com/unidoc/unipdf/v3/internal/bitwise";_df "image";_g "image/color";_b "image/draw";_d "math";);func (_bdg *ImageBase )GetAlpha ()[]byte {return _bdg .Alpha };
type Gray2 struct{ImageBase };func _ggbe (_cdg ,_cac int ,_ad []byte )*Monochrome {_ded :=_cee (_cdg ,_cac );_ded .Data =_ad ;return _ded ;};func _dafd (_bgd _g .Color )_g .Color {_dcdfb :=_g .GrayModel .Convert (_bgd ).(_g .Gray );return _eac (_dcdfb );
};func _bbba (_ebed _df .Image )(Image ,error ){if _ebc ,_eff :=_ebed .(*Gray4 );_eff {return _ebc .Copy (),nil ;};_dffb :=_ebed .Bounds ();_dgbg ,_edca :=NewImage (_dffb .Max .X ,_dffb .Max .Y ,4,1,nil ,nil ,nil );if _edca !=nil {return nil ,_edca ;};
_abeb (_ebed ,_dgbg ,_dffb );return _dgbg ,nil ;};func (_edf *CMYK32 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_edf .Width ,Y :_edf .Height }};};var _ _df .Image =&NRGBA16 {};func (_cedf *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_cedf .ImageBase .copy (),ModelThreshold :_cedf .ModelThreshold };
};func _fdcg (_dafg *Monochrome ,_eaec ,_ddcd ,_ggbd ,_ebgd int ,_ebbcd RasterOperator ){if _eaec < 0{_ggbd +=_eaec ;_eaec =0;};_abae :=_eaec +_ggbd -_dafg .Width ;if _abae > 0{_ggbd -=_abae ;};if _ddcd < 0{_ebgd +=_ddcd ;_ddcd =0;};_cfed :=_ddcd +_ebgd -_dafg .Height ;
if _cfed > 0{_ebgd -=_cfed ;};if _ggbd <=0||_ebgd <=0{return ;};if (_eaec &7)==0{_bdcg (_dafg ,_eaec ,_ddcd ,_ggbd ,_ebgd ,_ebbcd );}else {_egdc (_dafg ,_eaec ,_ddcd ,_ggbd ,_ebgd ,_ebbcd );};};func _bed (_egb _g .CMYK )_g .Gray {_cgfa ,_cab ,_eagf :=_g .CMYKToRGB (_egb .C ,_egb .M ,_egb .Y ,_egb .K );
_cegc :=(19595*uint32 (_cgfa )+38470*uint32 (_cab )+7471*uint32 (_eagf )+1<<7)>>16;return _g .Gray {Y :uint8 (_cegc )};};func (_dcbf *NRGBA16 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA16 (x ,y ,_dcbf .Width ,_dcbf .BytesPerLine ,_dcbf .Data ,_dcbf .Alpha ,_dcbf .Decode );
};func (_fedd *Gray2 )SetGray (x ,y int ,gray _g .Gray ){_fecd :=_egcc (gray );_aba :=y *_fedd .BytesPerLine ;_adab :=_aba +(x >>2);if _adab >=len (_fedd .Data ){return ;};_dac :=_fecd .Y >>6;_fedd .Data [_adab ]=(_fedd .Data [_adab ]&(^(0xc0>>uint (2*((x )&3)))))|(_dac <<uint (6-2*(x &3)));
};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_g .CMYK ,error ){_feb :=4*(y *width +x );if _feb +3>=len (data ){return _g .CMYK {},_eg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_feb ]&0xff;M :=data [_feb +1]&0xff;Y :=data [_feb +2]&0xff;K :=data [_feb +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _g .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_bagb *Gray4 )At (x ,y int )_g .Color {_bffd ,_ :=_bagb .ColorAt (x ,y );
return _bffd };func _egdc (_gcffb *Monochrome ,_eegc ,_adbc int ,_dbbc ,_ggage int ,_bfdf RasterOperator ){var (_fcag bool ;_ddggg bool ;_ceed int ;_bafcb int ;_deefd int ;_bada int ;_baee bool ;_cddd byte ;);_fegc :=8-(_eegc &7);_bgda :=_agcef [_fegc ];
_bcfe :=_gcffb .BytesPerLine *_adbc +(_eegc >>3);if _dbbc < _fegc {_fcag =true ;_bgda &=_eagd [8-_fegc +_dbbc ];};if !_fcag {_ceed =(_dbbc -_fegc )>>3;if _ceed !=0{_ddggg =true ;_bafcb =_bcfe +1;};};_deefd =(_eegc +_dbbc )&7;if !(_fcag ||_deefd ==0){_baee =true ;
_cddd =_eagd [_deefd ];_bada =_bcfe +1+_ceed ;};var _beac ,_afcd int ;switch _bfdf {case PixClr :for _beac =0;_beac < _ggage ;_beac ++{_gcffb .Data [_bcfe ]=_abcaa (_gcffb .Data [_bcfe ],0x0,_bgda );_bcfe +=_gcffb .BytesPerLine ;};if _ddggg {for _beac =0;
_beac < _ggage ;_beac ++{for _afcd =0;_afcd < _ceed ;_afcd ++{_gcffb .Data [_bafcb +_afcd ]=0x0;};_bafcb +=_gcffb .BytesPerLine ;};};if _baee {for _beac =0;_beac < _ggage ;_beac ++{_gcffb .Data [_bada ]=_abcaa (_gcffb .Data [_bada ],0x0,_cddd );_bada +=_gcffb .BytesPerLine ;
};};case PixSet :for _beac =0;_beac < _ggage ;_beac ++{_gcffb .Data [_bcfe ]=_abcaa (_gcffb .Data [_bcfe ],0xff,_bgda );_bcfe +=_gcffb .BytesPerLine ;};if _ddggg {for _beac =0;_beac < _ggage ;_beac ++{for _afcd =0;_afcd < _ceed ;_afcd ++{_gcffb .Data [_bafcb +_afcd ]=0xff;
};_bafcb +=_gcffb .BytesPerLine ;};};if _baee {for _beac =0;_beac < _ggage ;_beac ++{_gcffb .Data [_bada ]=_abcaa (_gcffb .Data [_bada ],0xff,_cddd );_bada +=_gcffb .BytesPerLine ;};};case PixNotDst :for _beac =0;_beac < _ggage ;_beac ++{_gcffb .Data [_bcfe ]=_abcaa (_gcffb .Data [_bcfe ],^_gcffb .Data [_bcfe ],_bgda );
_bcfe +=_gcffb .BytesPerLine ;};if _ddggg {for _beac =0;_beac < _ggage ;_beac ++{for _afcd =0;_afcd < _ceed ;_afcd ++{_gcffb .Data [_bafcb +_afcd ]=^(_gcffb .Data [_bafcb +_afcd ]);};_bafcb +=_gcffb .BytesPerLine ;};};if _baee {for _beac =0;_beac < _ggage ;
_beac ++{_gcffb .Data [_bada ]=_abcaa (_gcffb .Data [_bada ],^_gcffb .Data [_bada ],_cddd );_bada +=_gcffb .BytesPerLine ;};};};};func (_ebcd *NRGBA64 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA64 (x ,y ,_ebcd .Width ,_ebcd .Data ,_ebcd .Alpha ,_ebcd .Decode );
};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );
case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_eg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func ConverterFunc (converterFunc func (_adag _df .Image )(Image ,error ))ColorConverter {return colorConverter {_fcb :converterFunc };};func (_daga *NRGBA32 )Validate ()error {if len (_daga .Data )!=3*_daga .Width *_daga .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var ErrInvalidImage =_c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func _fdg (_gfg ,_ada *Monochrome ,_cfd []byte ,_fcc int )(_ggae error ){var (_abe ,_agb ,_ege ,_fag ,_gfe ,_cgb ,_cafd ,_fac int ;_bgg ,_beg uint32 ;_gec ,_gbcc byte ;_gbfe uint16 ;);_eb :=make ([]byte ,4);_gc :=make ([]byte ,4);for _ege =0;_ege < _gfg .Height -1;
_ege ,_fag =_ege +2,_fag +1{_abe =_ege *_gfg .BytesPerLine ;_agb =_fag *_ada .BytesPerLine ;for _gfe ,_cgb =0,0;_gfe < _fcc ;_gfe ,_cgb =_gfe +4,_cgb +1{for _cafd =0;_cafd < 4;_cafd ++{_fac =_abe +_gfe +_cafd ;if _fac <=len (_gfg .Data )-1&&_fac < _abe +_gfg .BytesPerLine {_eb [_cafd ]=_gfg .Data [_fac ];
}else {_eb [_cafd ]=0x00;};_fac =_abe +_gfg .BytesPerLine +_gfe +_cafd ;if _fac <=len (_gfg .Data )-1&&_fac < _abe +(2*_gfg .BytesPerLine ){_gc [_cafd ]=_gfg .Data [_fac ];}else {_gc [_cafd ]=0x00;};};_bgg =_a .BigEndian .Uint32 (_eb );_beg =_a .BigEndian .Uint32 (_gc );
_beg |=_bgg ;_beg |=_beg <<1;_beg &=0xaaaaaaaa;_bgg =_beg |(_beg <<7);_gec =byte (_bgg >>24);_gbcc =byte ((_bgg >>8)&0xff);_fac =_agb +_cgb ;if _fac +1==len (_ada .Data )-1||_fac +1>=_agb +_ada .BytesPerLine {_ada .Data [_fac ]=_cfd [_gec ];}else {_gbfe =(uint16 (_cfd [_gec ])<<8)|uint16 (_cfd [_gbcc ]);
if _ggae =_ada .setTwoBytes (_fac ,_gbfe );_ggae !=nil {return _eg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fac );
};_cgb ++;};};};return nil ;};func (_gedg *ImageBase )Pix ()[]byte {return _gedg .Data };func (_dfde *Monochrome )setBit (_bcbe ,_efde int ){_dfde .Data [_bcbe +(_efde >>3)]|=0x80>>uint (_efde &7);};func (_cffb *Monochrome )setGray (_gdd int ,_bcd _g .Gray ,_bcbb int ){if _bcd .Y ==0{_cffb .clearBit (_bcbb ,_gdd );
}else {_cffb .setGrayBit (_bcbb ,_gdd );};};func _dfdd (_adg RGBA ,_bgge CMYK ,_daf _df .Rectangle ){for _aeg :=0;_aeg < _daf .Max .X ;_aeg ++{for _dfa :=0;_dfa < _daf .Max .Y ;_dfa ++{_egge :=_adg .RGBAAt (_aeg ,_dfa );_bgge .SetCMYK (_aeg ,_dfa ,_cbge (_egge ));
};};};func _gbb (_feg _g .Gray )_g .RGBA {return _g .RGBA {R :_feg .Y ,G :_feg .Y ,B :_feg .Y ,A :0xff}};func _gcc (_faea Gray ,_ccad NRGBA ,_acd _df .Rectangle ){for _eeae :=0;_eeae < _acd .Max .X ;_eeae ++{for _bafc :=0;_bafc < _acd .Max .Y ;_bafc ++{_cba :=_cdd (_ccad .NRGBAAt (_eeae ,_bafc ));
_faea .SetGray (_eeae ,_bafc ,_cba );};};};func (_fcbc *Monochrome )Base ()*ImageBase {return &_fcbc .ImageBase };func (_gbff *NRGBA64 )Base ()*ImageBase {return &_gbff .ImageBase };func (_abag *NRGBA16 )At (x ,y int )_g .Color {_fgfc ,_ :=_abag .ColorAt (x ,y );
return _fgfc };type Gray16 struct{ImageBase };func (_ddc *Gray4 )Set (x ,y int ,c _g .Color ){if x >=_ddc .Width ||y >=_ddc .Height {return ;};_cebb :=Gray4Model .Convert (c ).(_g .Gray );_ddc .setGray (x ,y ,_cebb );};type monochromeThresholdConverter struct{Threshold uint8 ;
};var (_fcf =_aaa ();_gab =_geb ();_gacb =_ag (););const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _bgbf (_fgagc ,_gccd NRGBA ,_fecda _df .Rectangle ){for _bdeb :=0;_bdeb < _fecda .Max .X ;_bdeb ++{for _abdfd :=0;_abdfd < _fecda .Max .Y ;
_abdfd ++{_gccd .SetNRGBA (_bdeb ,_abdfd ,_fgagc .NRGBAAt (_bdeb ,_abdfd ));};};};var _ Image =&Monochrome {};func (_dbag *Gray2 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray2BPC (x ,y ,_dbag .BytesPerLine ,_dbag .Data ,_dbag .Decode );};var _ _df .Image =&Gray16 {};
func (_cdcc *Monochrome )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_cdcc .Width ,Y :_cdcc .Height }};};func (_ecfad *Gray8 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_ecfad .Width ,Y :_ecfad .Height }};
};var _ _df .Image =&Gray4 {};type RasterOperator int ;func _ddgg (_gcgba _g .Color )_g .Color {_gbdc :=_g .GrayModel .Convert (_gcgba ).(_g .Gray );return _egcc (_gbdc );};var _ Gray =&Gray8 {};func _cca (_gf *Monochrome ,_gdc ...int )(_bd *Monochrome ,_dcg error ){if _gf ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_gdc )==0{return nil ,_c .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_ceb :=_fge ();_bd =_gf ;for _ ,_gdcb :=range _gdc {if _gdcb <=0{break ;};_bd ,_dcg =_afb (_bd ,_gdcb ,_ceb );if _dcg !=nil {return nil ,_dcg ;};};return _bd ,nil ;};func (_egbb *Gray4 )Validate ()error {if len (_egbb .Data )!=_egbb .Height *_egbb .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_eadb *NRGBA32 )Set (x ,y int ,c _g .Color ){_fdgg :=y *_eadb .Width +x ;_gfcgf :=3*_fdgg ;if _gfcgf +2>=len (_eadb .Data ){return ;};_fcddf :=_g .NRGBAModel .Convert (c ).(_g .NRGBA );_eadb .setRGBA (_fdgg ,_fcddf );};func (_dead *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_efa :=_abce (uint (factor ));
if !IsPowerOf2 (uint (factor )){_efa ++;};_ebbe :=make ([]int ,_efa );for _degc :=range _ebbe {_ebbe [_degc ]=4;};_eee ,_gdgf :=_cca (_dead ,_ebbe ...);if _gdgf !=nil {return nil ,_gdgf ;};return _eee ,nil ;};func _dfc (_gaaf NRGBA ,_cgffb Gray ,_dafc _df .Rectangle ){for _eefc :=0;
_eefc < _dafc .Max .X ;_eefc ++{for _aaecd :=0;_aaecd < _dafc .Max .Y ;_aaecd ++{_fcdb :=_fgec (_gaaf .NRGBAAt (_eefc ,_aaecd ));_cgffb .SetGray (_eefc ,_aaecd ,_fcdb );};};};func (_cgcg *Monochrome )GrayAt (x ,y int )_g .Gray {_gedf ,_ :=ColorAtGray1BPC (x ,y ,_cgcg .BytesPerLine ,_cgcg .Data ,_cgcg .Decode );
return _gedf ;};func _cfbb (_efcg _g .Gray )_g .CMYK {return _g .CMYK {K :0xff-_efcg .Y }};func (_ebbfd *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _fdge bool ;_cea :=scale ;if scale < 1{_cea =1/scale ;_fdge =true ;};_ccef :=NextPowerOf2 (uint (_cea ));
if InDelta (float64 (_ccef ),_cea ,0.001){if _fdge {return _ebbfd .ReduceBinary (_cea );};return _ebbfd .ExpandBinary (int (_ccef ));};_ddde :=int (_d .RoundToEven (float64 (_ebbfd .Width )*scale ));_gdcbe :=int (_d .RoundToEven (float64 (_ebbfd .Height )*scale ));
return _ebbfd .ScaleLow (_ddde ,_gdcbe );};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};func _bdcg (_efaf *Monochrome ,_gdcg ,_fadf int ,_fagd ,_ccbgc int ,_fabe RasterOperator ){var (_ccgfc int ;
_cegee byte ;_aec ,_feaf int ;_fddc int ;);_cgdc :=_fagd >>3;_dfbac :=_fagd &7;if _dfbac > 0{_cegee =_eagd [_dfbac ];};_ccgfc =_efaf .BytesPerLine *_fadf +(_gdcg >>3);switch _fabe {case PixClr :for _aec =0;_aec < _ccbgc ;_aec ++{_fddc =_ccgfc +_aec *_efaf .BytesPerLine ;
for _feaf =0;_feaf < _cgdc ;_feaf ++{_efaf .Data [_fddc ]=0x0;_fddc ++;};if _dfbac > 0{_efaf .Data [_fddc ]=_abcaa (_efaf .Data [_fddc ],0x0,_cegee );};};case PixSet :for _aec =0;_aec < _ccbgc ;_aec ++{_fddc =_ccgfc +_aec *_efaf .BytesPerLine ;for _feaf =0;
_feaf < _cgdc ;_feaf ++{_efaf .Data [_fddc ]=0xff;_fddc ++;};if _dfbac > 0{_efaf .Data [_fddc ]=_abcaa (_efaf .Data [_fddc ],0xff,_cegee );};};case PixNotDst :for _aec =0;_aec < _ccbgc ;_aec ++{_fddc =_ccgfc +_aec *_efaf .BytesPerLine ;for _feaf =0;_feaf < _cgdc ;
_feaf ++{_efaf .Data [_fddc ]=^_efaf .Data [_fddc ];_fddc ++;};if _dfbac > 0{_efaf .Data [_fddc ]=_abcaa (_efaf .Data [_fddc ],^_efaf .Data [_fddc ],_cegee );};};};};func _ddg (_bgfc NRGBA ,_efc CMYK ,_bde _df .Rectangle ){for _ecgc :=0;_ecgc < _bde .Max .X ;
_ecgc ++{for _faa :=0;_faa < _bde .Max .Y ;_faa ++{_bfb :=_bgfc .NRGBAAt (_ecgc ,_faa );_efc .SetCMYK (_ecgc ,_faa ,_dgca (_bfb ));};};};func _abeb (_bbc _df .Image ,_afbe Image ,_degcf _df .Rectangle ){switch _eead :=_bbc .(type ){case Gray :_aaeg (_eead ,_afbe .(Gray ),_degcf );
case NRGBA :_dfc (_eead ,_afbe .(Gray ),_degcf );case CMYK :_gfda (_eead ,_afbe .(Gray ),_degcf );case RGBA :_geed (_eead ,_afbe .(Gray ),_degcf );default:_fbe (_bbc ,_afbe ,_degcf );};};func FromGoImage (i _df .Image )(Image ,error ){switch _fdgd :=i .(type ){case Image :return _fdgd .Copy (),nil ;
case Gray :return GrayConverter .Convert (i );case *_df .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_df .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};
};func _bgdbe (_aged *_df .Gray ,_begda uint8 )*_df .Gray {_cddg :=_aged .Bounds ();_ccge :=_df .NewGray (_cddg );for _dffbe :=0;_dffbe < _cddg .Dx ();_dffbe ++{for _ebef :=0;_ebef < _cddg .Dy ();_ebef ++{_afae :=_aged .GrayAt (_dffbe ,_ebef );_ccge .SetGray (_dffbe ,_ebef ,_g .Gray {Y :_efcf (_afae .Y ,_begda )});
};};return _ccge ;};type Image interface{_b .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_cdccc ,_ddcb int )(_g .Color ,error );Validate ()error ;};func _ca (_ee *Monochrome ,_ec int ,_dc []uint )(*Monochrome ,error ){_gd :=_ec *_ee .Width ;
_bgc :=_ec *_ee .Height ;_bb :=_cee (_gd ,_bgc );for _gda ,_be :=range _dc {var _bf error ;switch _be {case 2:_bf =_cc (_bb ,_ee );case 4:_bf =_dd (_bb ,_ee );case 8:_bf =_ced (_bb ,_ee );};if _bf !=nil {return nil ,_bf ;};if _gda !=len (_dc )-1{_ee =_bb .copy ();
};};return _bb ,nil ;};func (_dcgc *NRGBA64 )ColorModel ()_g .Model {return _g .NRGBA64Model };func _ggde (_ccf CMYK ,_ffed RGBA ,_fggc _df .Rectangle ){for _baca :=0;_baca < _fggc .Max .X ;_baca ++{for _gdcd :=0;_gdcd < _fggc .Max .Y ;_gdcd ++{_cfdb :=_ccf .CMYKAt (_baca ,_gdcd );
_ffed .SetRGBA (_baca ,_gdcd ,_bfge (_cfdb ));};};};func _edcg (_ccda _df .Image )(Image ,error ){if _ccbf ,_dgdb :=_ccda .(*Gray8 );_dgdb {return _ccbf .Copy (),nil ;};_agbc :=_ccda .Bounds ();_gedd ,_gdafc :=NewImage (_agbc .Max .X ,_agbc .Max .Y ,8,1,nil ,nil ,nil );
if _gdafc !=nil {return nil ,_gdafc ;};_abeb (_ccda ,_gedd ,_agbc );return _gedd ,nil ;};func (_gabe *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_gabe .copy ()}};func (_ceef *Gray16 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray16BPC (x ,y ,_ceef .BytesPerLine ,_ceef .Data ,_ceef .Decode );
};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_decb :=y *bytesPerLine +x >>3;if _decb >=len (data ){return _g .Gray {},_eg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gdfd :=data [_decb ]>>uint (7-(x &7))&1;if len (decode )==2{_gdfd =uint8 (LinearInterpolate (float64 (_gdfd ),0.0,1.0,decode [0],decode [1]))&1;};return _g .Gray {Y :_gdfd *255},nil ;};func (_deef *Monochrome )setGrayBit (_beef ,_afde int ){_deef .Data [_beef ]|=0x80>>uint (_afde &7)};
func (_fdgc colorConverter )Convert (src _df .Image )(Image ,error ){return _fdgc ._fcb (src )};func init (){_abcf ()};func _dcecc (_cebd *Monochrome ,_gdggb ,_decf int ,_gcff ,_dcdd int ,_bade RasterOperator ,_cbbd *Monochrome ,_gbfdf ,_bggf int )error {var _cegb ,_ecdfa ,_dacf ,_feddd int ;
if _gdggb < 0{_gbfdf -=_gdggb ;_gcff +=_gdggb ;_gdggb =0;};if _gbfdf < 0{_gdggb -=_gbfdf ;_gcff +=_gbfdf ;_gbfdf =0;};_cegb =_gdggb +_gcff -_cebd .Width ;if _cegb > 0{_gcff -=_cegb ;};_ecdfa =_gbfdf +_gcff -_cbbd .Width ;if _ecdfa > 0{_gcff -=_ecdfa ;};
if _decf < 0{_bggf -=_decf ;_dcdd +=_decf ;_decf =0;};if _bggf < 0{_decf -=_bggf ;_dcdd +=_bggf ;_bggf =0;};_dacf =_decf +_dcdd -_cebd .Height ;if _dacf > 0{_dcdd -=_dacf ;};_feddd =_bggf +_dcdd -_cbbd .Height ;if _feddd > 0{_dcdd -=_feddd ;};if _gcff <=0||_dcdd <=0{return nil ;
};var _bafa error ;switch {case _gdggb &7==0&&_gbfdf &7==0:_bafa =_cgcea (_cebd ,_gdggb ,_decf ,_gcff ,_dcdd ,_bade ,_cbbd ,_gbfdf ,_bggf );case _gdggb &7==_gbfdf &7:_bafa =_abbg (_cebd ,_gdggb ,_decf ,_gcff ,_dcdd ,_bade ,_cbbd ,_gbfdf ,_bggf );default:_bafa =_gef (_cebd ,_gdggb ,_decf ,_gcff ,_dcdd ,_bade ,_cbbd ,_gbfdf ,_bggf );
};if _bafa !=nil {return _bafa ;};return nil ;};func (_eeaec *NRGBA32 )NRGBAAt (x ,y int )_g .NRGBA {_cfaa ,_ :=ColorAtNRGBA32 (x ,y ,_eeaec .Width ,_eeaec .Data ,_eeaec .Alpha ,_eeaec .Decode );return _cfaa ;};func _fgec (_dge _g .NRGBA )_g .Gray {_ceg ,_ccgd ,_cece ,_ :=_dge .RGBA ();
_adaf :=(19595*_ceg +38470*_ccgd +7471*_cece +1<<15)>>24;return _g .Gray {Y :uint8 (_adaf )};};func IsGrayImgBlackAndWhite (i *_df .Gray )bool {return _cbca (i )};func _cdbb (_baf _g .RGBA )_g .Gray {_fda :=(19595*uint32 (_baf .R )+38470*uint32 (_baf .G )+7471*uint32 (_baf .B )+1<<7)>>16;
return _g .Gray {Y :uint8 (_fda )};};func (_fbac *Gray16 )SetGray (x ,y int ,g _g .Gray ){_dacc :=(y *_fbac .BytesPerLine /2+x )*2;if _dacc +1>=len (_fbac .Data ){return ;};_fbac .Data [_dacc ]=g .Y ;_fbac .Data [_dacc +1]=g .Y ;};func (_abebd *ImageBase )setTwoBytes (_ggfb int ,_fbae uint16 )error {if _ggfb +1> len (_abebd .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_abebd .Data [_ggfb ]=byte ((_fbae &0xff00)>>8);_abebd .Data [_ggfb +1]=byte (_fbae &0xff);return nil ;};var _ Gray =&Monochrome {};func MonochromeModel (threshold uint8 )_g .Model {return monochromeModel (threshold )};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_bfcfe :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _bfcfe ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_afccb :=width *colorComponents *bitsPerComponent ;_aegaa :=_bfcfe *8;_fdd :=8-(_aegaa -_afccb );_gfgf :=_gg .NewReader (data );_gfea :=_bfcfe -1;_fdff :=make ([]byte ,_gfea );
_bbbg :=make ([]byte ,height *_bfcfe );_cege :=_gg .NewWriterMSB (_bbbg );var _aefb uint64 ;var _ecdg error ;for _fbdd :=0;_fbdd < height ;_fbdd ++{_ ,_ecdg =_gfgf .Read (_fdff );if _ecdg !=nil {return nil ,_ecdg ;};_ ,_ecdg =_cege .Write (_fdff );if _ecdg !=nil {return nil ,_ecdg ;
};_aefb ,_ecdg =_gfgf .ReadBits (byte (_fdd ));if _ecdg !=nil {return nil ,_ecdg ;};_ ,_ecdg =_cege .WriteBits (_aefb ,_fdd );if _ecdg !=nil {return nil ,_ecdg ;};_cege .FinishByte ();};return _bbbg ,nil ;};type colorConverter struct{_fcb func (_geac _df .Image )(Image ,error );
};func _cdgf (_ecef _df .Image )(Image ,error ){if _afgbd ,_ggbc :=_ecef .(*Gray16 );_ggbc {return _afgbd .Copy (),nil ;};_bbged :=_ecef .Bounds ();_ceba ,_bffg :=NewImage (_bbged .Max .X ,_bbged .Max .Y ,16,1,nil ,nil ,nil );if _bffg !=nil {return nil ,_bffg ;
};_abeb (_ecef ,_ceba ,_bbged );return _ceba ,nil ;};func _ag ()(_bac [256]uint64 ){for _eed :=0;_eed < 256;_eed ++{if _eed &0x01!=0{_bac [_eed ]|=0xff;};if _eed &0x02!=0{_bac [_eed ]|=0xff00;};if _eed &0x04!=0{_bac [_eed ]|=0xff0000;};if _eed &0x08!=0{_bac [_eed ]|=0xff000000;
};if _eed &0x10!=0{_bac [_eed ]|=0xff00000000;};if _eed &0x20!=0{_bac [_eed ]|=0xff0000000000;};if _eed &0x40!=0{_bac [_eed ]|=0xff000000000000;};if _eed &0x80!=0{_bac [_eed ]|=0xff00000000000000;};};return _bac ;};func (_bgae *Gray4 )Base ()*ImageBase {return &_bgae .ImageBase };
func (_aebg *Gray16 )Validate ()error {if len (_aebg .Data )!=_aebg .Height *_aebg .BytesPerLine {return ErrInvalidImage ;};return nil ;};var _ Gray =&Gray2 {};var _ Gray =&Gray4 {};func (_cfbf *Gray8 )SetGray (x ,y int ,g _g .Gray ){_ggag :=y *_cfbf .BytesPerLine +x ;
if _ggag > len (_cfbf .Data )-1{return ;};_cfbf .Data [_ggag ]=g .Y ;};func (_afda *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_afda .copy ()}};func _bcfg (_ggge _df .Image ,_dcde Image ,_fefb _df .Rectangle ){if _gfac ,_dcea :=_ggge .(SMasker );_dcea &&_gfac .HasAlpha (){_dcde .(SMasker ).MakeAlpha ();
};_fbe (_ggge ,_dcde ,_fefb );};func _agg (_dged CMYK ,_gegd NRGBA ,_bbefc _df .Rectangle ){for _bagf :=0;_bagf < _bbefc .Max .X ;_bagf ++{for _gdbd :=0;_gdbd < _bbefc .Max .Y ;_gdbd ++{_cfgbc :=_dged .CMYKAt (_bagf ,_gdbd );_gegd .SetNRGBA (_bagf ,_gdbd ,_cgbd (_cfgbc ));
};};};func _egcc (_cgbe _g .Gray )_g .Gray {_bdaa :=_cgbe .Y >>6;_bdaa |=_bdaa <<2;_cgbe .Y =_bdaa |_bdaa <<4;return _cgbe ;};func (_eedc *RGBA32 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_eedc .Width ,Y :_eedc .Height }};};func (_dggg *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_dggg .copy ()}};
type shift int ;type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func (_fdad *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_fdad .copy ()}};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_eg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_g .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );
case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_eg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func _gdga (_cacd _df .Image ,_bgbcg Image ,_dcee _df .Rectangle ){if _adc ,_ggdb :=_cacd .(SMasker );_ggdb &&_adc .HasAlpha (){_bgbcg .(SMasker ).MakeAlpha ();};switch _cbbc :=_cacd .(type ){case Gray :_bgad (_cbbc ,_bgbcg .(RGBA ),_dcee );case NRGBA :_abf (_cbbc ,_bgbcg .(RGBA ),_dcee );
case *_df .NYCbCrA :_ffab (_cbbc ,_bgbcg .(RGBA ),_dcee );case CMYK :_ggde (_cbbc ,_bgbcg .(RGBA ),_dcee );case RGBA :_ffbf (_cbbc ,_bgbcg .(RGBA ),_dcee );case nrgba64 :_addf (_cbbc ,_bgbcg .(RGBA ),_dcee );default:_fbe (_cacd ,_bgbcg ,_dcee );};};var _ Image =&Gray16 {};
func (_cbg *CMYK32 )Base ()*ImageBase {return &_cbg .ImageBase };func (_dgdf *RGBA32 )Base ()*ImageBase {return &_dgdf .ImageBase };func _gfda (_gedde CMYK ,_daee Gray ,_afcb _df .Rectangle ){for _bcca :=0;_bcca < _afcb .Max .X ;_bcca ++{for _gcbb :=0;
_gcbb < _afcb .Max .Y ;_gcbb ++{_bgeaa :=_bed (_gedde .CMYKAt (_bcca ,_gcbb ));_daee .SetGray (_bcca ,_gcbb ,_bgeaa );};};};func (_fbc *RGBA32 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtRGBA32 (x ,y ,_fbc .Width ,_fbc .Data ,_fbc .Alpha ,_fbc .Decode );
};func (_bgdb *Gray16 )Histogram ()(_efcc [256]int ){for _bfcf :=0;_bfcf < _bgdb .Width ;_bfcf ++{for _ffccf :=0;_ffccf < _bgdb .Height ;_ffccf ++{_efcc [_bgdb .GrayAt (_bfcf ,_ffccf ).Y ]++;};};return _efcc ;};func (_dcec *Monochrome )At (x ,y int )_g .Color {_bbge ,_ :=_dcec .ColorAt (x ,y );
return _bbge };func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};type ColorConverter interface{Convert (_dde _df .Image )(Image ,error );};func (_bccg *CMYK32 )Set (x ,y int ,c _g .Color ){_eag :=4*(y *_bccg .Width +x );
if _eag +3>=len (_bccg .Data ){return ;};_dba :=_g .CMYKModel .Convert (c ).(_g .CMYK );_bccg .Data [_eag ]=_dba .C ;_bccg .Data [_eag +1]=_dba .M ;_bccg .Data [_eag +2]=_dba .Y ;_bccg .Data [_eag +3]=_dba .K ;};func _bged (_eeg Gray ,_edc nrgba64 ,_ebd _df .Rectangle ){for _fdb :=0;
_fdb < _ebd .Max .X ;_fdb ++{for _dbge :=0;_dbge < _ebd .Max .Y ;_dbge ++{_bcbf :=_ecfa (_edc .NRGBA64At (_fdb ,_dbge ));_eeg .SetGray (_fdb ,_dbge ,_bcbf );};};};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray16 ,error ){_gbef :=(y *bytesPerLine /2+x )*2;
if _gbef +1>=len (data ){return _g .Gray16 {},_eg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ecbg :=uint16 (data [_gbef ])<<8|uint16 (data [_gbef +1]);if len (decode )==2{_ecbg =uint16 (uint64 (LinearInterpolate (float64 (_ecbg ),0,65535,decode [0],decode [1])));};return _g .Gray16 {Y :_ecbg },nil ;};func (_afgbde *ImageBase )copy ()ImageBase {_ceggf :=*_afgbde ;
_ceggf .Data =make ([]byte ,len (_afgbde .Data ));copy (_ceggf .Data ,_afgbde .Data );return _ceggf ;};func (_fde *CMYK32 )CMYKAt (x ,y int )_g .CMYK {_cafa ,_ :=ColorAtCMYK (x ,y ,_fde .Width ,_fde .Data ,_fde .Decode );return _cafa ;};func (_deca *CMYK32 )SetCMYK (x ,y int ,c _g .CMYK ){_ead :=4*(y *_deca .Width +x );
if _ead +3>=len (_deca .Data ){return ;};_deca .Data [_ead ]=c .C ;_deca .Data [_ead +1]=c .M ;_deca .Data [_ead +2]=c .Y ;_deca .Data [_ead +3]=c .K ;};func InDelta (expected ,current ,delta float64 )bool {_decae :=expected -current ;if _decae <=-delta ||_decae >=delta {return false ;
};return true ;};func (_gcbbb *ImageBase )newAlpha (){_geg :=BytesPerLine (_gcbbb .Width ,_gcbbb .BitsPerComponent ,1);_gcbbb .Alpha =make ([]byte ,_gcbbb .Height *_geg );};func _cgcea (_effg *Monochrome ,_ffg ,_fggab ,_dgee ,_afce int ,_fee RasterOperator ,_abee *Monochrome ,_efcgf ,_cecg int )error {var (_aceb byte ;
_fgcc int ;_fcdd int ;_adf ,_dedec int ;_cceg ,_ggfg int ;);_fgf :=_dgee >>3;_ceca :=_dgee &7;if _ceca > 0{_aceb =_eagd [_ceca ];};_fgcc =_abee .BytesPerLine *_cecg +(_efcgf >>3);_fcdd =_effg .BytesPerLine *_fggab +(_ffg >>3);switch _fee {case PixSrc :for _cceg =0;
_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]=_abee .Data [_adf ];_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],_abee .Data [_adf ],_aceb );
};};case PixNotSrc :for _cceg =0;_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]=^(_abee .Data [_adf ]);_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],^_abee .Data [_adf ],_aceb );
};};case PixSrcOrDst :for _cceg =0;_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]|=_abee .Data [_adf ];_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],_abee .Data [_adf ]|_effg .Data [_dedec ],_aceb );
};};case PixSrcAndDst :for _cceg =0;_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]&=_abee .Data [_adf ];_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],_abee .Data [_adf ]&_effg .Data [_dedec ],_aceb );
};};case PixSrcXorDst :for _cceg =0;_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]^=_abee .Data [_adf ];_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],_abee .Data [_adf ]^_effg .Data [_dedec ],_aceb );
};};case PixNotSrcOrDst :for _cceg =0;_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]|=^(_abee .Data [_adf ]);_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],^(_abee .Data [_adf ])|_effg .Data [_dedec ],_aceb );
};};case PixNotSrcAndDst :for _cceg =0;_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]&=^(_abee .Data [_adf ]);_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],^(_abee .Data [_adf ])&_effg .Data [_dedec ],_aceb );
};};case PixSrcOrNotDst :for _cceg =0;_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]=_abee .Data [_adf ]|^(_effg .Data [_dedec ]);_dedec ++;
_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],_abee .Data [_adf ]|^(_effg .Data [_dedec ]),_aceb );};};case PixSrcAndNotDst :for _cceg =0;_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;
for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]=_abee .Data [_adf ]&^(_effg .Data [_dedec ]);_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],_abee .Data [_adf ]&^(_effg .Data [_dedec ]),_aceb );};};case PixNotPixSrcOrDst :for _cceg =0;
_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]=^(_abee .Data [_adf ]|_effg .Data [_dedec ]);_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],^(_abee .Data [_adf ]|_effg .Data [_dedec ]),_aceb );
};};case PixNotPixSrcAndDst :for _cceg =0;_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]=^(_abee .Data [_adf ]&_effg .Data [_dedec ]);
_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],^(_abee .Data [_adf ]&_effg .Data [_dedec ]),_aceb );};};case PixNotPixSrcXorDst :for _cceg =0;_cceg < _afce ;_cceg ++{_adf =_fgcc +_cceg *_abee .BytesPerLine ;_dedec =_fcdd +_cceg *_effg .BytesPerLine ;
for _ggfg =0;_ggfg < _fgf ;_ggfg ++{_effg .Data [_dedec ]=^(_abee .Data [_adf ]^_effg .Data [_dedec ]);_dedec ++;_adf ++;};if _ceca > 0{_effg .Data [_dedec ]=_abcaa (_effg .Data [_dedec ],^(_abee .Data [_adf ]^_effg .Data [_dedec ]),_aceb );};};default:_bg .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_fee );
return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_cebg *NRGBA32 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA32 (x ,y ,_cebg .Width ,_cebg .Data ,_cebg .Alpha ,_cebg .Decode );
};func (_ddaa *CMYK32 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtCMYK (x ,y ,_ddaa .Width ,_ddaa .Data ,_ddaa .Decode );};func (_bbf monochromeModel )Convert (c _g .Color )_g .Color {_bdab :=_g .GrayModel .Convert (c ).(_g .Gray );return _gca (_bdab ,_bbf );
};func (_gffg *Monochrome )getBitAt (_ace ,_beaf int )bool {_fcfd :=_beaf *_gffg .BytesPerLine +(_ace >>3);_eda :=_ace &0x07;_fcbg :=uint (7-_eda );if _fcfd > len (_gffg .Data )-1{return false ;};if (_gffg .Data [_fcfd ]>>_fcbg )&0x01>=1{return true ;};
return false ;};func _eeed (_aacg []byte ,_gbbg Image )error {_gaagf :=true ;for _egbdd :=0;_egbdd < len (_aacg );_egbdd ++{if _aacg [_egbdd ]!=0xff{_gaagf =false ;break ;};};if _gaagf {switch _dcda :=_gbbg .(type ){case *NRGBA32 :_dcda .Alpha =nil ;case *NRGBA64 :_dcda .Alpha =nil ;
default:return _eg .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_gbbg );
};};return nil ;};func (_bgfba *NRGBA64 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_bgfba .Width ,Y :_bgfba .Height }};};func (_ecd *CMYK32 )ColorModel ()_g .Model {return _g .CMYKModel };func (_fdgcg *Monochrome )SetGray (x ,y int ,g _g .Gray ){_edfa :=y *_fdgcg .BytesPerLine +x >>3;
if _edfa > len (_fdgcg .Data )-1{return ;};g =_gca (g ,monochromeModel (_fdgcg .ModelThreshold ));_fdgcg .setGray (x ,g ,_edfa );};func _efb (_fed ,_bgec CMYK ,_fgc _df .Rectangle ){for _abdb :=0;_abdb < _fgc .Max .X ;_abdb ++{for _geef :=0;_geef < _fgc .Max .Y ;
_geef ++{_bgec .SetCMYK (_abdb ,_geef ,_fed .CMYKAt (_abdb ,_geef ));};};};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func (_fgcf *NRGBA32 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_fgcf .Width ,Y :_fgcf .Height }};
};func GrayHistogram (g Gray )(_cadb [256]int ){switch _effe :=g .(type ){case Histogramer :return _effe .Histogram ();case _df .Image :_cacg :=_effe .Bounds ();for _egbg :=0;_egbg < _cacg .Max .X ;_egbg ++{for _bddb :=0;_bddb < _cacg .Max .Y ;_bddb ++{_cadb [g .GrayAt (_egbg ,_bddb ).Y ]++;
};};return _cadb ;default:return [256]int {};};};func (_bagg *NRGBA16 )NRGBAAt (x ,y int )_g .NRGBA {_ceaa ,_ :=ColorAtNRGBA16 (x ,y ,_bagg .Width ,_bagg .BytesPerLine ,_bagg .Data ,_bagg .Alpha ,_bagg .Decode );return _ceaa ;};func (_cgbb *Monochrome )ColorModel ()_g .Model {return MonochromeModel (_cgbb .ModelThreshold )};
func (_dgcf *Gray4 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray4BPC (x ,y ,_dgcf .BytesPerLine ,_dgcf .Data ,_dgcf .Decode );};func (_fab *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_fab .copy ()}};func (_agdg *NRGBA32 )setRGBA (_caa int ,_egadd _g .NRGBA ){_eggd :=3*_caa ;
_agdg .Data [_eggd ]=_egadd .R ;_agdg .Data [_eggd +1]=_egadd .G ;_agdg .Data [_eggd +2]=_egadd .B ;if _caa < len (_agdg .Alpha ){_agdg .Alpha [_caa ]=_egadd .A ;};};func (_cfdg *Gray4 )Histogram ()(_dabd [256]int ){for _gfdg :=0;_gfdg < _cfdg .Width ;
_gfdg ++{for _cgce :=0;_cgce < _cfdg .Height ;_cgce ++{_dabd [_cfdg .GrayAt (_gfdg ,_cgce ).Y ]++;};};return _dabd ;};func (_afac *Gray8 )GrayAt (x ,y int )_g .Gray {_bbef ,_ :=ColorAtGray8BPC (x ,y ,_afac .BytesPerLine ,_afac .Data ,_afac .Decode );return _bbef ;
};func _bad (_bgcb _g .NRGBA64 )_g .NRGBA {return _g .NRGBA {R :uint8 (_bgcb .R >>8),G :uint8 (_bgcb .G >>8),B :uint8 (_bgcb .B >>8),A :uint8 (_bgcb .A >>8)};};func _ddcg (_abbe *Monochrome ,_dfcc ,_dgfc ,_bgaeg ,_abec int ,_dfcd RasterOperator ,_cfge *Monochrome ,_dage ,_bgccd int )error {if _abbe ==nil {return _c .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _dfcd ==PixDst {return nil ;};switch _dfcd {case PixClr ,PixSet ,PixNotDst :_fdcg (_abbe ,_dfcc ,_dgfc ,_bgaeg ,_abec ,_dfcd );return nil ;};if _cfge ==nil {_bg .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _eccb :=_dcecc (_abbe ,_dfcc ,_dgfc ,_bgaeg ,_abec ,_dfcd ,_cfge ,_dage ,_bgccd );_eccb !=nil {return _eccb ;};return nil ;};func (_bdacfb *RGBA32 )At (x ,y int )_g .Color {_fbeg ,_ :=_bdacfb .ColorAt (x ,y );
return _fbeg };func _fbe (_gebb _df .Image ,_adge Image ,_fbeb _df .Rectangle ){for _ccb :=0;_ccb < _fbeb .Max .X ;_ccb ++{for _bgcf :=0;_bgcf < _fbeb .Max .Y ;_bgcf ++{_bdd :=_gebb .At (_ccb ,_bgcf );_adge .Set (_ccb ,_bgcf ,_bdd );};};};var (_eagd =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};
_agcef =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_abb *Gray16 )Set (x ,y int ,c _g .Color ){_bae :=(y *_abb .BytesPerLine /2+x )*2;if _bae +1>=len (_abb .Data ){return ;};_egdf :=_g .Gray16Model .Convert (c ).(_g .Gray16 );_abb .Data [_bae ],_abb .Data [_bae +1]=uint8 (_egdf .Y >>8),uint8 (_egdf .Y &0xff);
};var _ _df .Image =&Gray8 {};func (_bbb *Monochrome )InverseData ()error {return _bbb .RasterOperation (0,0,_bbb .Width ,_bbb .Height ,PixNotDst ,nil ,0,0);};func (_beee *Gray8 )ColorModel ()_g .Model {return _g .GrayModel };func (_gfge *Gray16 )Base ()*ImageBase {return &_gfge .ImageBase };
var _ Image =&Gray8 {};func (_dede *Monochrome )Set (x ,y int ,c _g .Color ){_egd :=y *_dede .BytesPerLine +x >>3;if _egd > len (_dede .Data )-1{return ;};_bgag :=_dede .ColorModel ().Convert (c ).(_g .Gray );_dede .setGray (x ,_bgag ,_egd );};func (_fggf *NRGBA16 )Set (x ,y int ,c _g .Color ){_fadb :=y *_fggf .BytesPerLine +x *3/2;
if _fadb +1>=len (_fggf .Data ){return ;};_acfa :=NRGBA16Model .Convert (c ).(_g .NRGBA );_fggf .setNRGBA (x ,y ,_fadb ,_acfa );};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA64 ,error ){_ecgf :=(y *width +x )*2;
_ede :=_ecgf *3;if _ede +5>=len (data ){return _g .NRGBA64 {},_eg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _baaf =0xffff;_cfgb :=uint16 (_baaf );if alpha !=nil &&len (alpha )> _ecgf +1{_cfgb =uint16 (alpha [_ecgf ])<<8|uint16 (alpha [_ecgf +1]);};_cgfff :=uint16 (data [_ede ])<<8|uint16 (data [_ede +1]);_gfb :=uint16 (data [_ede +2])<<8|uint16 (data [_ede +3]);
_adec :=uint16 (data [_ede +4])<<8|uint16 (data [_ede +5]);if len (decode )==6{_cgfff =uint16 (uint64 (LinearInterpolate (float64 (_cgfff ),0,65535,decode [0],decode [1]))&_baaf );_gfb =uint16 (uint64 (LinearInterpolate (float64 (_gfb ),0,65535,decode [2],decode [3]))&_baaf );
_adec =uint16 (uint64 (LinearInterpolate (float64 (_adec ),0,65535,decode [4],decode [5]))&_baaf );};return _g .NRGBA64 {R :_cgfff ,G :_gfb ,B :_adec ,A :_cfgb },nil ;};func (_bgba *NRGBA64 )Validate ()error {if len (_bgba .Data )!=3*2*_bgba .Width *_bgba .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _cgbd (_adb _g .CMYK )_g .NRGBA {_gdb ,_cdb ,_cfbe :=_g .CMYKToRGB (_adb .C ,_adb .M ,_adb .Y ,_adb .K );return _g .NRGBA {R :_gdb ,G :_cdb ,B :_cfbe ,A :0xff};};func _ced (_fgd ,_gb *Monochrome )(_aae error ){_fbb :=_gb .BytesPerLine ;
_fc :=_fgd .BytesPerLine ;var _gee ,_gdac ,_gdad ,_dec ,_dff int ;for _gdad =0;_gdad < _gb .Height ;_gdad ++{_gee =_gdad *_fbb ;_gdac =8*_gdad *_fc ;for _dec =0;_dec < _fbb ;_dec ++{if _aae =_fgd .setEightBytes (_gdac +_dec *8,_gacb [_gb .Data [_gee +_dec ]]);
_aae !=nil {return _aae ;};};for _dff =1;_dff < 8;_dff ++{for _dec =0;_dec < _fc ;_dec ++{if _aae =_fgd .setByte (_gdac +_dff *_fc +_dec ,_fgd .Data [_gdac +_dec ]);_aae !=nil {return _aae ;};};};};return nil ;};func _dg (_ff *Monochrome ,_ge int )(*Monochrome ,error ){if _ff ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _ge ==1{return _ff .copy (),nil ;};if !IsPowerOf2 (uint (_ge )){return nil ,_eg .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_ge );
};_de :=_aaee (_ge );return _ca (_ff ,_ge ,_de );};func (_effc *NRGBA16 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_effc .Width ,Y :_effc .Height }};};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func (_fced *NRGBA16 )ColorModel ()_g .Model {return NRGBA16Model };
var _ Image =&RGBA32 {};func (_abde *ImageBase )setByte (_cbfe int ,_fdcb byte )error {if _cbfe > len (_abde .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_abde .Data [_cbfe ]=_fdcb ;
return nil ;};func (_bacg *Gray8 )Histogram ()(_begd [256]int ){for _cage :=0;_cage < len (_bacg .Data );_cage ++{_begd [_bacg .Data [_cage ]]++;};return _begd ;};func _ccbgb (_bebd _df .Image ,_fbaeg int )(_df .Rectangle ,bool ,[]byte ){_ddff :=_bebd .Bounds ();
var (_eaab bool ;_bcbbf []byte ;);switch _fadc :=_bebd .(type ){case SMasker :_eaab =_fadc .HasAlpha ();case NRGBA ,RGBA ,*_df .RGBA64 ,nrgba64 ,*_df .NYCbCrA :_bcbbf =make ([]byte ,_ddff .Max .X *_ddff .Max .Y *_fbaeg );case *_df .Paletted :var _efbb bool ;
for _ ,_gfaf :=range _fadc .Palette {_fgag ,_ebge ,_cfea ,_add :=_gfaf .RGBA ();if _fgag ==0&&_ebge ==0&&_cfea ==0&&_add !=0{_efbb =true ;break ;};};if _efbb {_bcbbf =make ([]byte ,_ddff .Max .X *_ddff .Max .Y *_fbaeg );};};return _ddff ,_eaab ,_bcbbf ;
};type RGBA interface{RGBAAt (_eedaf ,_affd int )_g .RGBA ;SetRGBA (_cgfg ,_gggda int ,_dga _g .RGBA );};func (_ebe *CMYK32 )Validate ()error {if len (_ebe .Data )!=4*_ebe .Width *_ebe .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _abcaa (_beb ,_gade ,_cadc byte )byte {return (_beb &^(_cadc ))|(_gade &_cadc )};var _ Image =&NRGBA64 {};func (_fffa *NRGBA32 )At (x ,y int )_g .Color {_dcff ,_ :=_fffa .ColorAt (x ,y );return _dcff };func _fcg (_bag ,_cb *Monochrome ,_da []byte ,_cfe int )(_fbf error ){var (_ggced ,_cfb ,_ddag ,_dcge ,_cfdf ,_gff ,_dgf ,_fga int ;
_bcc ,_gbad ,_cff ,_bbd uint32 ;_cfbd ,_abc byte ;_bcb uint16 ;);_fgb :=make ([]byte ,4);_ggbg :=make ([]byte ,4);for _ddag =0;_ddag < _bag .Height -1;_ddag ,_dcge =_ddag +2,_dcge +1{_ggced =_ddag *_bag .BytesPerLine ;_cfb =_dcge *_cb .BytesPerLine ;for _cfdf ,_gff =0,0;
_cfdf < _cfe ;_cfdf ,_gff =_cfdf +4,_gff +1{for _dgf =0;_dgf < 4;_dgf ++{_fga =_ggced +_cfdf +_dgf ;if _fga <=len (_bag .Data )-1&&_fga < _ggced +_bag .BytesPerLine {_fgb [_dgf ]=_bag .Data [_fga ];}else {_fgb [_dgf ]=0x00;};_fga =_ggced +_bag .BytesPerLine +_cfdf +_dgf ;
if _fga <=len (_bag .Data )-1&&_fga < _ggced +(2*_bag .BytesPerLine ){_ggbg [_dgf ]=_bag .Data [_fga ];}else {_ggbg [_dgf ]=0x00;};};_bcc =_a .BigEndian .Uint32 (_fgb );_gbad =_a .BigEndian .Uint32 (_ggbg );_cff =_bcc &_gbad ;_cff |=_cff <<1;_bbd =_bcc |_gbad ;
_bbd &=_bbd <<1;_gbad =_cff &_bbd ;_gbad &=0xaaaaaaaa;_bcc =_gbad |(_gbad <<7);_cfbd =byte (_bcc >>24);_abc =byte ((_bcc >>8)&0xff);_fga =_cfb +_gff ;if _fga +1==len (_cb .Data )-1||_fga +1>=_cfb +_cb .BytesPerLine {if _fbf =_cb .setByte (_fga ,_da [_cfbd ]);
_fbf !=nil {return _eg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fga );};}else {_bcb =(uint16 (_da [_cfbd ])<<8)|uint16 (_da [_abc ]);if _fbf =_cb .setTwoBytes (_fga ,_bcb );_fbf !=nil {return _eg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fga );
};_gff ++;};};};return nil ;};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _d .Abs (xmax -xmin )< 0.000001{return ymin ;};_cdccg :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _cdccg ;};func AutoThresholdTriangle (histogram [256]int )uint8 {var _ggcc ,_cbgaa ,_ebdaf ,_dgbae int ;
for _cbag :=0;_cbag < len (histogram );_cbag ++{if histogram [_cbag ]> 0{_ggcc =_cbag ;break ;};};if _ggcc > 0{_ggcc --;};for _cgef :=255;_cgef > 0;_cgef --{if histogram [_cgef ]> 0{_dgbae =_cgef ;break ;};};if _dgbae < 255{_dgbae ++;};for _abab :=0;_abab < 256;
_abab ++{if histogram [_abab ]> _cbgaa {_ebdaf =_abab ;_cbgaa =histogram [_abab ];};};var _dced bool ;if (_ebdaf -_ggcc )< (_dgbae -_ebdaf ){_dced =true ;var _efgg int ;_cgacd :=255;for _efgg < _cgacd {_gagf :=histogram [_efgg ];histogram [_efgg ]=histogram [_cgacd ];
histogram [_cgacd ]=_gagf ;_efgg ++;_cgacd --;};_ggcc =255-_dgbae ;_ebdaf =255-_ebdaf ;};if _ggcc ==_ebdaf {return uint8 (_ggcc );};_dcecg :=float64 (histogram [_ebdaf ]);_agef :=float64 (_ggcc -_ebdaf );_bcebf :=_d .Sqrt (_dcecg *_dcecg +_agef *_agef );
_dcecg /=_bcebf ;_agef /=_bcebf ;_bcebf =_dcecg *float64 (_ggcc )+_agef *float64 (histogram [_ggcc ]);_aegc :=_ggcc ;var _aafb float64 ;for _dfeb :=_ggcc +1;_dfeb <=_ebdaf ;_dfeb ++{_gbaf :=_dcecg *float64 (_dfeb )+_agef *float64 (histogram [_dfeb ])-_bcebf ;
if _gbaf > _aafb {_aegc =_dfeb ;_aafb =_gbaf ;};};_aegc --;if _dced {var _ddffc int ;_edbb :=255;for _ddffc < _edbb {_geaf :=histogram [_ddffc ];histogram [_ddffc ]=histogram [_edbb ];histogram [_edbb ]=_geaf ;_ddffc ++;_edbb --;};return uint8 (255-_aegc );
};return uint8 (_aegc );};func (_cabc *Gray8 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray8BPC (x ,y ,_cabc .BytesPerLine ,_cabc .Data ,_cabc .Decode );};func (_gffe *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_eg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _dg (_gffe ,factor );};func (_cade *NRGBA16 )setNRGBA (_afdg ,_eebg ,_gaag int ,_gaeg _g .NRGBA ){if _afdg *3%2==0{_cade .Data [_gaag ]=(_gaeg .R >>4)<<4|(_gaeg .G >>4);_cade .Data [_gaag +1]=(_gaeg .B >>4)<<4|(_cade .Data [_gaag +1]&0xf);}else {_cade .Data [_gaag ]=(_cade .Data [_gaag ]&0xf0)|(_gaeg .R >>4);
_cade .Data [_gaag +1]=(_gaeg .G >>4)<<4|(_gaeg .B >>4);};if _cade .Alpha !=nil {_eeac :=_eebg *BytesPerLine (_cade .Width ,4,1);if _eeac < len (_cade .Alpha ){if _afdg %2==0{_cade .Alpha [_eeac ]=(_gaeg .A >>uint (4))<<uint (4)|(_cade .Alpha [_gaag ]&0xf);
}else {_cade .Alpha [_eeac ]=(_cade .Alpha [_eeac ]&0xf0)|(_gaeg .A >>uint (4));};};};};func (_fcbe *Monochrome )Validate ()error {if len (_fcbe .Data )!=_fcbe .Height *_fcbe .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _cc (_gdf ,_gde *Monochrome )(_ega error ){_dee :=_gde .BytesPerLine ;
_ggce :=_gdf .BytesPerLine ;var (_ce byte ;_ga uint16 ;_egad ,_gga ,_gac ,_fb ,_db int ;);for _gac =0;_gac < _gde .Height ;_gac ++{_egad =_gac *_dee ;_gga =2*_gac *_ggce ;for _fb =0;_fb < _dee ;_fb ++{_ce =_gde .Data [_egad +_fb ];_ga =_fcf [_ce ];_db =_gga +_fb *2;
if _gdf .BytesPerLine !=_gde .BytesPerLine *2&&(_fb +1)*2> _gdf .BytesPerLine {_ega =_gdf .setByte (_db ,byte (_ga >>8));}else {_ega =_gdf .setTwoBytes (_db ,_ga );};if _ega !=nil {return _ega ;};};for _fb =0;_fb < _ggce ;_fb ++{_db =_gga +_ggce +_fb ;
_ce =_gdf .Data [_gga +_fb ];if _ega =_gdf .setByte (_db ,_ce );_ega !=nil {return _ega ;};};};return nil ;};func _eac (_cad _g .Gray )_g .Gray {_cad .Y >>=4;_cad .Y |=_cad .Y <<4;return _cad };var _ Image =&NRGBA32 {};func (_adbbg *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_adbbg .copy ()}};
func (_cdaa *Monochrome )clearBit (_dcdf ,_gbac int ){_cdaa .Data [_dcdf ]&=^(0x80>>uint (_gbac &7))};func _gfa (_cfc _g .NYCbCrA )_g .RGBA {_bffb ,_agd ,_ggaa ,_dfdb :=_bggdc (_cfc ).RGBA ();return _g .RGBA {R :uint8 (_bffb >>8),G :uint8 (_agd >>8),B :uint8 (_ggaa >>8),A :uint8 (_dfdb >>8)};
};var _ _df .Image =&Gray2 {};func _bgad (_baae Gray ,_fdbg RGBA ,_agcb _df .Rectangle ){for _fafe :=0;_fafe < _agcb .Max .X ;_fafe ++{for _bdad :=0;_bdad < _agcb .Max .Y ;_bdad ++{_gbae :=_baae .GrayAt (_fafe ,_bdad );_fdbg .SetRGBA (_fafe ,_bdad ,_gbb (_gbae ));
};};};var _ _df .Image =&Monochrome {};var _ RGBA =&RGBA32 {};var _ _df .Image =&NRGBA32 {};type NRGBA16 struct{ImageBase };type CMYK interface{CMYKAt (_cedd ,_cfg int )_g .CMYK ;SetCMYK (_ddb ,_aga int ,_fca _g .CMYK );};func _eefd (_gbcg _df .Image )(Image ,error ){if _bbce ,_faec :=_gbcg .(*NRGBA32 );
_faec {return _bbce .Copy (),nil ;};_abdda ,_daec ,_bfad :=_ccbgb (_gbcg ,1);_gcbce ,_dbce :=NewImage (_abdda .Max .X ,_abdda .Max .Y ,8,3,nil ,_bfad ,nil );if _dbce !=nil {return nil ,_dbce ;};_geea (_gbcg ,_gcbce ,_abdda );if len (_bfad )!=0&&!_daec {if _agbgg :=_eeed (_bfad ,_gcbce );
_agbgg !=nil {return nil ,_agbgg ;};};return _gcbce ,nil ;};func _fcef (_ffda _df .Image ,_gcda uint8 )*_df .Gray {_fbce :=_ffda .Bounds ();_ebdae :=_df .NewGray (_fbce );var (_dffca _g .Color ;_cbbb _g .Gray ;);for _aaaf :=0;_aaaf < _fbce .Max .X ;_aaaf ++{for _cbba :=0;
_cbba < _fbce .Max .Y ;_cbba ++{_dffca =_ffda .At (_aaaf ,_cbba );_ebdae .Set (_aaaf ,_cbba ,_dffca );_cbbb =_ebdae .GrayAt (_aaaf ,_cbba );_ebdae .SetGray (_aaaf ,_cbba ,_g .Gray {Y :_efcf (_cbbb .Y ,_gcda )});};};return _ebdae ;};func (_acad *NRGBA32 )ColorModel ()_g .Model {return _g .NRGBAModel };
func _badb (_bdacf RGBA ,_ccdba NRGBA ,_ggabf _df .Rectangle ){for _caed :=0;_caed < _ggabf .Max .X ;_caed ++{for _abdac :=0;_abdac < _ggabf .Max .Y ;_abdac ++{_afe :=_bdacf .RGBAAt (_caed ,_abdac );_ccdba .SetNRGBA (_caed ,_abdac ,_cbga (_afe ));};};};
func (_abbb *ImageBase )setEightFullBytes (_ggg int ,_ebga uint64 )error {if _ggg +7> len (_abbb .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_abbb .Data [_ggg ]=byte ((_ebga &0xff00000000000000)>>56);
_abbb .Data [_ggg +1]=byte ((_ebga &0xff000000000000)>>48);_abbb .Data [_ggg +2]=byte ((_ebga &0xff0000000000)>>40);_abbb .Data [_ggg +3]=byte ((_ebga &0xff00000000)>>32);_abbb .Data [_ggg +4]=byte ((_ebga &0xff000000)>>24);_abbb .Data [_ggg +5]=byte ((_ebga &0xff0000)>>16);
_abbb .Data [_ggg +6]=byte ((_ebga &0xff00)>>8);_abbb .Data [_ggg +7]=byte (_ebga &0xff);return nil ;};func (_fbaa *Gray16 )ColorModel ()_g .Model {return _g .Gray16Model };func _abce (_ggagg uint )uint {var _fgdg uint ;for _ggagg !=0{_ggagg >>=1;_fgdg ++;
};return _fgdg -1;};func _geb ()(_aag [256]uint32 ){for _gba :=0;_gba < 256;_gba ++{if _gba &0x01!=0{_aag [_gba ]|=0xf;};if _gba &0x02!=0{_aag [_gba ]|=0xf0;};if _gba &0x04!=0{_aag [_gba ]|=0xf00;};if _gba &0x08!=0{_aag [_gba ]|=0xf000;};if _gba &0x10!=0{_aag [_gba ]|=0xf0000;
};if _gba &0x20!=0{_aag [_gba ]|=0xf00000;};if _gba &0x40!=0{_aag [_gba ]|=0xf000000;};if _gba &0x80!=0{_aag [_gba ]|=0xf0000000;};};return _aag ;};func _cgaa (_cdee _df .Image )(Image ,error ){if _ffb ,_beab :=_cdee .(*NRGBA64 );_beab {return _ffb .Copy (),nil ;
};_dagf ,_abcd ,_dgbab :=_ccbgb (_cdee ,2);_bagbb ,_ebedb :=NewImage (_dagf .Max .X ,_dagf .Max .Y ,16,3,nil ,_dgbab ,nil );if _ebedb !=nil {return nil ,_ebedb ;};_bcfg (_cdee ,_bagbb ,_dagf );if len (_dgbab )!=0&&!_abcd {if _cbeb :=_eeed (_dgbab ,_bagbb );
_cbeb !=nil {return nil ,_cbeb ;};};return _bagbb ,nil ;};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_fbfe :=y *bytesPerLine +x >>1;if _fbfe >=len (data ){return _g .Gray {},_eg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dega :=data [_fbfe ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_dega =uint8 (uint32 (LinearInterpolate (float64 (_dega ),0,15,decode [0],decode [1]))&0xf);};return _g .Gray {Y :_dega *17&0xff},nil ;};func (_ecda *Gray16 )GrayAt (x ,y int )_g .Gray {_bcdb ,_ :=_ecda .ColorAt (x ,y );
return _g .Gray {Y :uint8 (_bcdb .(_g .Gray16 ).Y >>8)};};func _ggbf (_cfdgg _g .NRGBA )_g .NRGBA {_cfdgg .R =_cfdgg .R >>4|(_cfdgg .R >>4)<<4;_cfdgg .G =_cfdgg .G >>4|(_cfdgg .G >>4)<<4;_cfdgg .B =_cfdgg .B >>4|(_cfdgg .B >>4)<<4;return _cfdgg ;};func (_geage *NRGBA16 )Validate ()error {if len (_geage .Data )!=3*_geage .Width *_geage .Height /2{return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _bggdc (_ebf _g .NYCbCrA )_g .NRGBA {_cda :=int32 (_ebf .Y )*0x10101;_eba :=int32 (_ebf .Cb )-128;_bfca :=int32 (_ebf .Cr )-128;_faff :=_cda +91881*_bfca ;if uint32 (_faff )&0xff000000==0{_faff >>=8;}else {_faff =^(_faff >>31)&0xffff;
};_dbgf :=_cda -22554*_eba -46802*_bfca ;if uint32 (_dbgf )&0xff000000==0{_dbgf >>=8;}else {_dbgf =^(_dbgf >>31)&0xffff;};_cde :=_cda +116130*_eba ;if uint32 (_cde )&0xff000000==0{_cde >>=8;}else {_cde =^(_cde >>31)&0xffff;};return _g .NRGBA {R :uint8 (_faff >>8),G :uint8 (_dbgf >>8),B :uint8 (_cde >>8),A :_ebf .A };
};type Gray4 struct{ImageBase };func (_eggfa *NRGBA64 )Set (x ,y int ,c _g .Color ){_gbacb :=(y *_eggfa .Width +x )*2;_cefg :=_gbacb *3;if _cefg +5>=len (_eggfa .Data ){return ;};_cedaa :=_g .NRGBA64Model .Convert (c ).(_g .NRGBA64 );_eggfa .setNRGBA64 (_cefg ,_cedaa ,_gbacb );
};func _abf (_fggd NRGBA ,_fbdb RGBA ,_gbeb _df .Rectangle ){for _fdfe :=0;_fdfe < _gbeb .Max .X ;_fdfe ++{for _aagd :=0;_aagd < _gbeb .Max .Y ;_aagd ++{_fead :=_fggd .NRGBAAt (_fdfe ,_aagd );_fbdb .SetRGBA (_fdfe ,_aagd ,_fgba (_fead ));};};};var _ Image =&NRGBA16 {};
func _aaeg (_gcad ,_gdca Gray ,_cgd _df .Rectangle ){for _geefb :=0;_geefb < _cgd .Max .X ;_geefb ++{for _adbdf :=0;_adbdf < _cgd .Max .Y ;_adbdf ++{_gdca .SetGray (_geefb ,_adbdf ,_gcad .GrayAt (_geefb ,_adbdf ));};};};func _gca (_aca _g .Gray ,_cceb monochromeModel )_g .Gray {if _aca .Y > uint8 (_cceb ){return _g .Gray {Y :_d .MaxUint8 };
};return _g .Gray {};};func (_fae *CMYK32 )At (x ,y int )_g .Color {_agf ,_ :=_fae .ColorAt (x ,y );return _agf };func (_bbbac *RGBA32 )Validate ()error {if len (_bbbac .Data )!=3*_bbbac .Width *_bbbac .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _cdd (_bfbd _g .NRGBA )_g .Gray {var _gdgg _g .NRGBA ;if _bfbd ==_gdgg {return _g .Gray {Y :0xff};};_aega ,_abca ,_fdeec ,_ :=_bfbd .RGBA ();_ggf :=(19595*_aega +38470*_abca +7471*_fdeec +1<<15)>>24;return _g .Gray {Y :uint8 (_ggf )};
};func _daaf (_gfag int ,_gffd int )error {return _eg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_gfag ,_gffd );
};func _afb (_cg *Monochrome ,_ecf int ,_fgga []byte )(_dcd *Monochrome ,_deg error ){const _eef ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";if _cg ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _ecf < 1||_ecf > 4{return nil ,_c .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _cg .Height <=1{return nil ,_c .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");
};_dcd =_cee (_cg .Width /2,_cg .Height /2);if _fgga ==nil {_fgga =_fge ();};_fd :=_cgfb (_cg .BytesPerLine ,2*_dcd .BytesPerLine );switch _ecf {case 1:_deg =_fdg (_cg ,_dcd ,_fgga ,_fd );case 2:_deg =_fccf (_cg ,_dcd ,_fgga ,_fd );case 3:_deg =_fcg (_cg ,_dcd ,_fgga ,_fd );
case 4:_deg =_bga (_cg ,_dcd ,_fgga ,_fd );};if _deg !=nil {return nil ,_deg ;};return _dcd ,nil ;};var (MonochromeConverter =ConverterFunc (_ccbg );Gray2Converter =ConverterFunc (_cbb );Gray4Converter =ConverterFunc (_bbba );GrayConverter =ConverterFunc (_edcg );
Gray16Converter =ConverterFunc (_cdgf );NRGBA16Converter =ConverterFunc (_bdgb );NRGBAConverter =ConverterFunc (_eefd );NRGBA64Converter =ConverterFunc (_cgaa );RGBAConverter =ConverterFunc (_adgb );CMYKConverter =ConverterFunc (_cdf ););func _gcab (_ggd Gray ,_gdab NRGBA ,_ffd _df .Rectangle ){for _daffd :=0;
_daffd < _ffd .Max .X ;_daffd ++{for _cdece :=0;_cdece < _ffd .Max .Y ;_cdece ++{_fdgb :=_ggd .GrayAt (_daffd ,_cdece );_gdab .SetNRGBA (_daffd ,_cdece ,_cgff (_fdgb ));};};};func (_gggdab *NRGBA32 )SetNRGBA (x ,y int ,c _g .NRGBA ){_cfcb :=y *_gggdab .Width +x ;
_gddc :=3*_cfcb ;if _gddc +2>=len (_gggdab .Data ){return ;};_gggdab .setRGBA (_cfcb ,c );};func _edaf (_cfac uint8 )bool {if _cfac ==0||_cfac ==255{return true ;};return false ;};func (_fdac *NRGBA64 )SetNRGBA64 (x ,y int ,c _g .NRGBA64 ){_ffgd :=(y *_fdac .Width +x )*2;
_facc :=_ffgd *3;if _facc +5>=len (_fdac .Data ){return ;};_fdac .setNRGBA64 (_facc ,c ,_ffgd );};var _ NRGBA =&NRGBA32 {};func _addf (_cabgd nrgba64 ,_dabg RGBA ,_cdca _df .Rectangle ){for _aeeg :=0;_aeeg < _cdca .Max .X ;_aeeg ++{for _dccb :=0;_dccb < _cdca .Max .Y ;
_dccb ++{_aeec :=_cabgd .NRGBA64At (_aeeg ,_dccb );_dabg .SetRGBA (_aeeg ,_dccb ,_cef (_aeec ));};};};func _geea (_egca _df .Image ,_fdgdb Image ,_cfdce _df .Rectangle ){if _cgfac ,_gdge :=_egca .(SMasker );_gdge &&_cgfac .HasAlpha (){_fdgdb .(SMasker ).MakeAlpha ();
};switch _ceddf :=_egca .(type ){case Gray :_gcab (_ceddf ,_fdgdb .(NRGBA ),_cfdce );case NRGBA :_bgbf (_ceddf ,_fdgdb .(NRGBA ),_cfdce );case *_df .NYCbCrA :_aaab (_ceddf ,_fdgdb .(NRGBA ),_cfdce );case CMYK :_agg (_ceddf ,_fdgdb .(NRGBA ),_cfdce );case RGBA :_badb (_ceddf ,_fdgdb .(NRGBA ),_cfdce );
case nrgba64 :_fbbe (_ceddf ,_fdgdb .(NRGBA ),_cfdce );default:_fbe (_egca ,_fdgdb ,_cfdce );};};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_fcff :=y *bytesPerLine +x >>2;if _fcff >=len (data ){return _g .Gray {},_eg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_acgd :=data [_fcff ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_acgd =uint8 (uint32 (LinearInterpolate (float64 (_acgd ),0,3.0,decode [0],decode [1]))&3);};return _g .Gray {Y :_acgd *85},nil ;};func (_abdba *Monochrome )getBit (_cgbbg ,_fec int )uint8 {return _abdba .Data [_cgbbg +(_fec >>3)]>>uint (7-(_fec &7))&1;
};func (_aad *Gray2 )ColorModel ()_g .Model {return Gray2Model };func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_dcdb :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _ccbfb Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_ccbfb =&Monochrome {ImageBase :_dcdb ,ModelThreshold :0x0f};case 2:_ccbfb =&Gray2 {ImageBase :_dcdb };case 4:_ccbfb =&Gray4 {ImageBase :_dcdb };case 8:_ccbfb =&Gray8 {ImageBase :_dcdb };
case 16:_ccbfb =&Gray16 {ImageBase :_dcdb };};case 3:switch bitsPerComponent {case 4:_ccbfb =&NRGBA16 {ImageBase :_dcdb };case 8:_ccbfb =&NRGBA32 {ImageBase :_dcdb };case 16:_ccbfb =&NRGBA64 {ImageBase :_dcdb };};case 4:_ccbfb =&CMYK32 {ImageBase :_dcdb };
};if _ccbfb ==nil {return nil ,ErrInvalidImage ;};return _ccbfb ,nil ;};type monochromeModel uint8 ;func (_bdede *Monochrome )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray1BPC (x ,y ,_bdede .BytesPerLine ,_bdede .Data ,_bdede .Decode );};type NRGBA interface{NRGBAAt (_afdbg ,_fce int )_g .NRGBA ;
SetNRGBA (_adbb ,_bgfa int ,_daged _g .NRGBA );};func (_faca *Gray4 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_faca .Width ,Y :_faca .Height }};};var _ NRGBA =&NRGBA16 {};func _bdgb (_cdef _df .Image )(Image ,error ){if _fbfb ,_eeafg :=_cdef .(*NRGBA16 );
_eeafg {return _fbfb .Copy (),nil ;};_cdccgc :=_cdef .Bounds ();_bdb ,_dbgc :=NewImage (_cdccgc .Max .X ,_cdccgc .Max .Y ,4,3,nil ,nil ,nil );if _dbgc !=nil {return nil ,_dbgc ;};_geea (_cdef ,_bdb ,_cdccgc );return _bdb ,nil ;};func _cbca (_bfee *_df .Gray )bool {for _ggbea :=0;
_ggbea < len (_bfee .Pix );_ggbea ++{if !_edaf (_bfee .Pix [_ggbea ]){return false ;};};return true ;};func _dd (_ggb ,_bea *Monochrome )(_efd error ){_af :=_bea .BytesPerLine ;_bff :=_ggb .BytesPerLine ;_cd :=_bea .BytesPerLine *4-_ggb .BytesPerLine ;
var (_afg ,_fe byte ;_afa uint32 ;_ecb ,_egg ,_ccd ,_dda ,_aa ,_fg ,_eea int ;);for _ccd =0;_ccd < _bea .Height ;_ccd ++{_ecb =_ccd *_af ;_egg =4*_ccd *_bff ;for _dda =0;_dda < _af ;_dda ++{_afg =_bea .Data [_ecb +_dda ];_afa =_gab [_afg ];_fg =_egg +_dda *4;
if _cd !=0&&(_dda +1)*4> _ggb .BytesPerLine {for _aa =_cd ;_aa > 0;_aa --{_fe =byte ((_afa >>uint (_aa *8))&0xff);_eea =_fg +(_cd -_aa );if _efd =_ggb .setByte (_eea ,_fe );_efd !=nil {return _efd ;};};}else if _efd =_ggb .setFourBytes (_fg ,_afa );_efd !=nil {return _efd ;
};if _efd =_ggb .setFourBytes (_egg +_dda *4,_gab [_bea .Data [_ecb +_dda ]]);_efd !=nil {return _efd ;};};for _aa =1;_aa < 4;_aa ++{for _dda =0;_dda < _bff ;_dda ++{if _efd =_ggb .setByte (_egg +_aa *_bff +_dda ,_ggb .Data [_egg +_dda ]);_efd !=nil {return _efd ;
};};};};return nil ;};func (_eca *Monochrome )ResolveDecode ()error {if len (_eca .Decode )!=2{return nil ;};if _eca .Decode [0]==1&&_eca .Decode [1]==0{if _cge :=_eca .InverseData ();_cge !=nil {return _cge ;};_eca .Decode =nil ;};return nil ;};func (_gceg *Gray2 )Base ()*ImageBase {return &_gceg .ImageBase };
func _ed (_cf *Monochrome ,_ccg ,_ab int )(*Monochrome ,error ){if _cf ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ccg <=0||_ab <=0{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _ccg ==_ab {if _ccg ==1{return _cf .copy (),nil ;};if _ccg ==2||_ccg ==4||_ccg ==8{_gdaf ,_def :=_dg (_cf ,_ccg );if _def !=nil {return nil ,_def ;};return _gdaf ,nil ;};};_ba :=_ccg *_cf .Width ;_afc :=_ab *_cf .Height ;_ae :=_cee (_ba ,_afc );_gea :=_ae .BytesPerLine ;
var (_bfd ,_abd ,_ece ,_gbf ,_afcc int ;_ea byte ;_fgg error ;);for _abd =0;_abd < _cf .Height ;_abd ++{_bfd =_ab *_abd *_gea ;for _ece =0;_ece < _cf .Width ;_ece ++{if _eab :=_cf .getBitAt (_ece ,_abd );_eab {_afcc =_ccg *_ece ;for _gbf =0;_gbf < _ccg ;
_gbf ++{_ae .setIndexedBit (_bfd *8+_afcc +_gbf );};};};for _gbf =1;_gbf < _ab ;_gbf ++{_aef :=_bfd +_gbf *_gea ;for _cec :=0;_cec < _gea ;_cec ++{if _ea ,_fgg =_ae .getByte (_bfd +_cec );_fgg !=nil {return nil ,_fgg ;};if _fgg =_ae .setByte (_aef +_cec ,_ea );
_fgg !=nil {return nil ,_fgg ;};};};};return _ae ,nil ;};type NRGBA32 struct{ImageBase };func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA ,error ){_cdgfc :=y *bytesPerLine +x *3/2;if _cdgfc +1>=len (data ){return _g .NRGBA {},_daaf (x ,y );
};const (_dgbb =0xf;_cbe =uint8 (0xff););_abda :=_cbe ;if alpha !=nil {_cfbc :=y *BytesPerLine (width ,4,1);if _cfbc < len (alpha ){if x %2==0{_abda =(alpha [_cfbc ]>>uint (4))&_dgbb ;}else {_abda =alpha [_cfbc ]&_dgbb ;};_abda |=_abda <<4;};};var _cabge ,_bgbcc ,_cbfd uint8 ;
if x *3%2==0{_cabge =(data [_cdgfc ]>>uint (4))&_dgbb ;_bgbcc =data [_cdgfc ]&_dgbb ;_cbfd =(data [_cdgfc +1]>>uint (4))&_dgbb ;}else {_cabge =data [_cdgfc ]&_dgbb ;_bgbcc =(data [_cdgfc +1]>>uint (4))&_dgbb ;_cbfd =data [_cdgfc +1]&_dgbb ;};if len (decode )==6{_cabge =uint8 (uint32 (LinearInterpolate (float64 (_cabge ),0,15,decode [0],decode [1]))&0xf);
_bgbcc =uint8 (uint32 (LinearInterpolate (float64 (_bgbcc ),0,15,decode [2],decode [3]))&0xf);_cbfd =uint8 (uint32 (LinearInterpolate (float64 (_cbfd ),0,15,decode [4],decode [5]))&0xf);};return _g .NRGBA {R :(_cabge <<4)|(_cabge &0xf),G :(_bgbcc <<4)|(_bgbcc &0xf),B :(_cbfd <<4)|(_cbfd &0xf),A :_abda },nil ;
};func (_cfda *ImageBase )getByte (_cddeg int )(byte ,error ){if _cddeg > len (_cfda .Data )-1||_cddeg < 0{return 0,_eg .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_cddeg );
};return _cfda .Data [_cddeg ],nil ;};type NRGBA64 struct{ImageBase };func _deda (_gag Gray ,_afgb CMYK ,_fdee _df .Rectangle ){for _egc :=0;_egc < _fdee .Max .X ;_egc ++{for _dbg :=0;_dbg < _fdee .Max .Y ;_dbg ++{_ceec :=_gag .GrayAt (_egc ,_dbg );_afgb .SetCMYK (_egc ,_dbg ,_cfbb (_ceec ));
};};};func _fgba (_bcgc _g .NRGBA )_g .RGBA {_ecee ,_bggd ,_cce ,_cegg :=_bcgc .RGBA ();return _g .RGBA {R :uint8 (_ecee >>8),G :uint8 (_bggd >>8),B :uint8 (_cce >>8),A :uint8 (_cegg >>8)};};type Gray interface{GrayAt (_dcdg ,_dbb int )_g .Gray ;SetGray (_ebbf ,_eggc int ,_gbea _g .Gray );
};func (_geca *NRGBA32 )Base ()*ImageBase {return &_geca .ImageBase };func (_age *Gray2 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_age .Width ,Y :_age .Height }};};func _cgfb (_dfba int ,_gggd int )int {if _dfba < _gggd {return _dfba ;
};return _gggd ;};func _aaee (_ac int )[]uint {var _gbe []uint ;_gbc :=_ac ;_afd :=_gbc /8;if _afd !=0{for _dgg :=0;_dgg < _afd ;_dgg ++{_gbe =append (_gbe ,8);};_bfc :=_gbc %8;_gbc =0;if _bfc !=0{_gbc =_bfc ;};};_ecc :=_gbc /4;if _ecc !=0{for _bfe :=0;
_bfe < _ecc ;_bfe ++{_gbe =append (_gbe ,4);};_aab :=_gbc %4;_gbc =0;if _aab !=0{_gbc =_aab ;};};_ceda :=_gbc /2;if _ceda !=0{for _fbd :=0;_fbd < _ceda ;_fbd ++{_gbe =append (_gbe ,2);};};return _gbe ;};func _abbg (_bbfc *Monochrome ,_bgbb ,_dcf ,_cfbbc ,_afabg int ,_ebagg RasterOperator ,_dbbf *Monochrome ,_daff ,_bdcd int )error {var (_cded bool ;
_dgfcg bool ;_eeaf int ;_cbcc int ;_edg int ;_ccgf bool ;_ebfd byte ;_dcgf int ;_dbae int ;_dafb int ;_cfdga ,_efeb int ;);_acee :=8-(_bgbb &7);_aee :=_agcef [_acee ];_fgca :=_bbfc .BytesPerLine *_dcf +(_bgbb >>3);_aeba :=_dbbf .BytesPerLine *_bdcd +(_daff >>3);
if _cfbbc < _acee {_cded =true ;_aee &=_eagd [8-_acee +_cfbbc ];};if !_cded {_eeaf =(_cfbbc -_acee )>>3;if _eeaf > 0{_dgfcg =true ;_cbcc =_fgca +1;_edg =_aeba +1;};};_dcgf =(_bgbb +_cfbbc )&7;if !(_cded ||_dcgf ==0){_ccgf =true ;_ebfd =_eagd [_dcgf ];_dbae =_fgca +1+_eeaf ;
_dafb =_aeba +1+_eeaf ;};switch _ebagg {case PixSrc :for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],_dbbf .Data [_aeba ],_aee );_fgca +=_bbfc .BytesPerLine ;_aeba +=_dbbf .BytesPerLine ;};if _dgfcg {for _cfdga =0;
_cfdga < _afabg ;_cfdga ++{for _efeb =0;_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]=_dbbf .Data [_edg +_efeb ];};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],_dbbf .Data [_dafb ],_ebfd );
_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixNotSrc :for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],^_dbbf .Data [_aeba ],_aee );_fgca +=_bbfc .BytesPerLine ;_aeba +=_dbbf .BytesPerLine ;
};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]=^_dbbf .Data [_edg +_efeb ];};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],^_dbbf .Data [_dafb ],_ebfd );
_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixSrcOrDst :for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],_dbbf .Data [_aeba ]|_bbfc .Data [_fgca ],_aee );_fgca +=_bbfc .BytesPerLine ;_aeba +=_dbbf .BytesPerLine ;
};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]|=_dbbf .Data [_edg +_efeb ];};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],_dbbf .Data [_dafb ]|_bbfc .Data [_dbae ],_ebfd );
_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixSrcAndDst :for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],_dbbf .Data [_aeba ]&_bbfc .Data [_fgca ],_aee );_fgca +=_bbfc .BytesPerLine ;_aeba +=_dbbf .BytesPerLine ;
};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]&=_dbbf .Data [_edg +_efeb ];};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],_dbbf .Data [_dafb ]&_bbfc .Data [_dbae ],_ebfd );
_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixSrcXorDst :for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],_dbbf .Data [_aeba ]^_bbfc .Data [_fgca ],_aee );_fgca +=_bbfc .BytesPerLine ;_aeba +=_dbbf .BytesPerLine ;
};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]^=_dbbf .Data [_edg +_efeb ];};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],_dbbf .Data [_dafb ]^_bbfc .Data [_dbae ],_ebfd );
_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixNotSrcOrDst :for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],^(_dbbf .Data [_aeba ])|_bbfc .Data [_fgca ],_aee );_fgca +=_bbfc .BytesPerLine ;
_aeba +=_dbbf .BytesPerLine ;};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]|=^(_dbbf .Data [_edg +_efeb ]);};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;};};if _ccgf {for _cfdga =0;
_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],^(_dbbf .Data [_dafb ])|_bbfc .Data [_dbae ],_ebfd );_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixNotSrcAndDst :for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],^(_dbbf .Data [_aeba ])&_bbfc .Data [_fgca ],_aee );
_fgca +=_bbfc .BytesPerLine ;_aeba +=_dbbf .BytesPerLine ;};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]&=^_dbbf .Data [_edg +_efeb ];};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;
};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],^(_dbbf .Data [_dafb ])&_bbfc .Data [_dbae ],_ebfd );_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixSrcOrNotDst :for _cfdga =0;
_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],_dbbf .Data [_aeba ]|^(_bbfc .Data [_fgca ]),_aee );_fgca +=_bbfc .BytesPerLine ;_aeba +=_dbbf .BytesPerLine ;};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;
_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]=_dbbf .Data [_edg +_efeb ]|^(_bbfc .Data [_cbcc +_efeb ]);};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],_dbbf .Data [_dafb ]|^(_bbfc .Data [_dbae ]),_ebfd );
_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixSrcAndNotDst :for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],_dbbf .Data [_aeba ]&^(_bbfc .Data [_fgca ]),_aee );_fgca +=_bbfc .BytesPerLine ;
_aeba +=_dbbf .BytesPerLine ;};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]=_dbbf .Data [_edg +_efeb ]&^(_bbfc .Data [_cbcc +_efeb ]);};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;
};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],_dbbf .Data [_dafb ]&^(_bbfc .Data [_dbae ]),_ebfd );_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixNotPixSrcOrDst :for _cfdga =0;
_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],^(_dbbf .Data [_aeba ]|_bbfc .Data [_fgca ]),_aee );_fgca +=_bbfc .BytesPerLine ;_aeba +=_dbbf .BytesPerLine ;};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;
_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]=^(_dbbf .Data [_edg +_efeb ]|_bbfc .Data [_cbcc +_efeb ]);};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],^(_dbbf .Data [_dafb ]|_bbfc .Data [_dbae ]),_ebfd );
_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixNotPixSrcAndDst :for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],^(_dbbf .Data [_aeba ]&_bbfc .Data [_fgca ]),_aee );_fgca +=_bbfc .BytesPerLine ;
_aeba +=_dbbf .BytesPerLine ;};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]=^(_dbbf .Data [_edg +_efeb ]&_bbfc .Data [_cbcc +_efeb ]);};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;
};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],^(_dbbf .Data [_dafb ]&_bbfc .Data [_dbae ]),_ebfd );_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};case PixNotPixSrcXorDst :for _cfdga =0;
_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_fgca ]=_abcaa (_bbfc .Data [_fgca ],^(_dbbf .Data [_aeba ]^_bbfc .Data [_fgca ]),_aee );_fgca +=_bbfc .BytesPerLine ;_aeba +=_dbbf .BytesPerLine ;};if _dgfcg {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{for _efeb =0;
_efeb < _eeaf ;_efeb ++{_bbfc .Data [_cbcc +_efeb ]=^(_dbbf .Data [_edg +_efeb ]^_bbfc .Data [_cbcc +_efeb ]);};_cbcc +=_bbfc .BytesPerLine ;_edg +=_dbbf .BytesPerLine ;};};if _ccgf {for _cfdga =0;_cfdga < _afabg ;_cfdga ++{_bbfc .Data [_dbae ]=_abcaa (_bbfc .Data [_dbae ],^(_dbbf .Data [_dafb ]^_bbfc .Data [_dbae ]),_ebfd );
_dbae +=_bbfc .BytesPerLine ;_dafb +=_dbbf .BytesPerLine ;};};default:_bg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_ebagg );return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};type CMYK32 struct{ImageBase };func (_fff *Gray8 )Set (x ,y int ,c _g .Color ){_cdbbe :=y *_fff .BytesPerLine +x ;if _cdbbe > len (_fff .Data )-1{return ;};_eaef :=_g .GrayModel .Convert (c );_fff .Data [_cdbbe ]=_eaef .(_g .Gray ).Y ;};
func _geed (_ffcg RGBA ,_bceb Gray ,_acb _df .Rectangle ){for _cdec :=0;_cdec < _acb .Max .X ;_cdec ++{for _ebda :=0;_ebda < _acb .Max .Y ;_ebda ++{_gabf :=_cdbb (_ffcg .RGBAAt (_cdec ,_ebda ));_bceb .SetGray (_cdec ,_ebda ,_gabf );};};};func (_cfaf *RGBA32 )SetRGBA (x ,y int ,c _g .RGBA ){_bdgg :=y *_cfaf .Width +x ;
_cddde :=3*_bdgg ;if _cddde +2>=len (_cfaf .Data ){return ;};_cfaf .setRGBA (_bdgg ,c );};func _efcf (_adeb ,_face uint8 )uint8 {if _adeb < _face {return 255;};return 0;};func _cef (_ddd _g .NRGBA64 )_g .RGBA {_ade ,_eadg ,_fcd ,_dae :=_ddd .RGBA ();return _g .RGBA {R :uint8 (_ade >>8),G :uint8 (_eadg >>8),B :uint8 (_fcd >>8),A :uint8 (_dae >>8)};
};func _dgca (_dffcc _g .NRGBA )_g .CMYK {_cbc ,_gbfc ,_cagd ,_ :=_dffcc .RGBA ();_daa ,_bgca ,_bfba ,_dgeb :=_g .RGBToCMYK (uint8 (_cbc >>8),uint8 (_gbfc >>8),uint8 (_cagd >>8));return _g .CMYK {C :_daa ,M :_bgca ,Y :_bfba ,K :_dgeb };};func _cee (_caf ,_cga int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_caf ,_cga ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};
};var _ Gray =&Gray16 {};func _ffbf (_bfdc ,_gbde RGBA ,_dfbd _df .Rectangle ){for _acfg :=0;_acfg < _dfbd .Max .X ;_acfg ++{for _gfgb :=0;_gfgb < _dfbd .Max .Y ;_gfgb ++{_gbde .SetRGBA (_acfg ,_gfgb ,_bfdc .RGBAAt (_acfg ,_gfgb ));};};};func (_cae *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_c .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_gcg :=_cee (width ,height );_deag :=make ([]int ,height );_ebag :=make ([]int ,width );_feac :=float64 (_cae .Width )/float64 (width );_gcd :=float64 (_cae .Height )/float64 (height );for _dddf :=0;_dddf < height ;_dddf ++{_deag [_dddf ]=int (_d .Min (_gcd *float64 (_dddf )+0.5,float64 (_cae .Height -1)));
};for _dbf :=0;_dbf < width ;_dbf ++{_ebag [_dbf ]=int (_d .Min (_feac *float64 (_dbf )+0.5,float64 (_cae .Width -1)));};_ffcd :=-1;_ffcf :=byte (0);for _cega :=0;_cega < height ;_cega ++{_cegac :=_deag [_cega ]*_cae .BytesPerLine ;_cfdff :=_cega *_gcg .BytesPerLine ;
for _agcd :=0;_agcd < width ;_agcd ++{_dfae :=_ebag [_agcd ];if _dfae !=_ffcd {_ffcf =_cae .getBit (_cegac ,_dfae );if _ffcf !=0{_gcg .setBit (_cfdff ,_agcd );};_ffcd =_dfae ;}else {if _ffcf !=0{_gcg .setBit (_cfdff ,_agcd );};};};};return _gcg ,nil ;};
func (_cgfaca *RGBA32 )Set (x ,y int ,c _g .Color ){_abddc :=y *_cgfaca .Width +x ;_afdd :=3*_abddc ;if _afdd +2>=len (_cgfaca .Data ){return ;};_gcgbc :=_g .RGBAModel .Convert (c ).(_g .RGBA );_cgfaca .setRGBA (_abddc ,_gcgbc );};func (_efe *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_efe .copy ()}};
func (_dfda *ImageBase )HasAlpha ()bool {if _dfda .Alpha ==nil {return false ;};for _aaba :=range _dfda .Alpha {if _dfda .Alpha [_aaba ]!=0xff{return true ;};};return false ;};func _cbb (_aada _df .Image )(Image ,error ){if _fggg ,_fgaf :=_aada .(*Gray2 );
_fgaf {return _fggg .Copy (),nil ;};_fdab :=_aada .Bounds ();_gaef ,_dbe :=NewImage (_fdab .Max .X ,_fdab .Max .Y ,2,1,nil ,nil ,nil );if _dbe !=nil {return nil ,_dbe ;};_abeb (_aada ,_gaef ,_fdab );return _gaef ,nil ;};func (_bgcc *Gray2 )Validate ()error {if len (_bgcc .Data )!=_bgcc .Height *_bgcc .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_cgg *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _ddcg (_cgg ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _cgff (_bbe _g .Gray )_g .NRGBA {return _g .NRGBA {R :_bbe .Y ,G :_bbe .Y ,B :_bbe .Y ,A :0xff}};
var _ Image =&CMYK32 {};func (_geedd *ImageBase )MakeAlpha (){_geedd .newAlpha ()};func _ccbg (_cgc _df .Image )(Image ,error ){if _efba ,_cbcd :=_cgc .(*Monochrome );_cbcd {return _efba ,nil ;};_bcga :=_cgc .Bounds ();var _fdaf Gray ;switch _cecc :=_cgc .(type ){case Gray :_fdaf =_cecc ;
case NRGBA :_fdaf =&Gray8 {ImageBase :NewImageBase (_bcga .Max .X ,_bcga .Max .Y ,8,1,nil ,nil ,nil )};_gcc (_fdaf ,_cecc ,_bcga );case nrgba64 :_fdaf =&Gray8 {ImageBase :NewImageBase (_bcga .Max .X ,_bcga .Max .Y ,8,1,nil ,nil ,nil )};_bged (_fdaf ,_cecc ,_bcga );
default:_bee ,_fea :=GrayConverter .Convert (_cgc );if _fea !=nil {return nil ,_fea ;};_fdaf =_bee .(Gray );};_dcb ,_afab :=NewImage (_bcga .Max .X ,_bcga .Max .Y ,1,1,nil ,nil ,nil );if _afab !=nil {return nil ,_afab ;};_ffe :=_dcb .(*Monochrome );_dgb :=AutoThresholdTriangle (GrayHistogram (_fdaf ));
for _aaac :=0;_aaac < _bcga .Max .X ;_aaac ++{for _gcbc :=0;_gcbc < _bcga .Max .Y ;_gcbc ++{_ecge :=_gca (_fdaf .GrayAt (_aaac ,_gcbc ),monochromeModel (_dgb ));_ffe .SetGray (_aaac ,_gcbc ,_ecge );};};return _dcb ,nil ;};func _fge ()(_cgf []byte ){_cgf =make ([]byte ,256);
for _dgc :=0;_dgc < 256;_dgc ++{_ebbc :=byte (_dgc );_cgf [_ebbc ]=(_ebbc &0x01)|((_ebbc &0x04)>>1)|((_ebbc &0x10)>>2)|((_ebbc &0x40)>>3)|((_ebbc &0x02)<<3)|((_ebbc &0x08)<<2)|((_ebbc &0x20)<<1)|(_ebbc &0x80);};return _cgf ;};func (_bbad *RGBA32 )setRGBA (_gbfa int ,_dfca _g .RGBA ){_fcffa :=3*_gbfa ;
_bbad .Data [_fcffa ]=_dfca .R ;_bbad .Data [_fcffa +1]=_dfca .G ;_bbad .Data [_fcffa +2]=_dfca .B ;if _gbfa < len (_bbad .Alpha ){_bbad .Alpha [_gbfa ]=_dfca .A ;};};func (_fbaf *Gray16 )At (x ,y int )_g .Color {_cccg ,_ :=_fbaf .ColorAt (x ,y );return _cccg };
func (_bgedd *Gray8 )Validate ()error {if len (_bgedd .Data )!=_bgedd .Height *_bgedd .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_gggf *NRGBA64 )At (x ,y int )_g .Color {_gdbe ,_ :=_gggf .ColorAt (x ,y );return _gdbe };func (_egaa *NRGBA64 )NRGBA64At (x ,y int )_g .NRGBA64 {_dgfe ,_ :=ColorAtNRGBA64 (x ,y ,_egaa .Width ,_egaa .Data ,_egaa .Alpha ,_egaa .Decode );
return _dgfe ;};func (_egbd *Monochrome )setIndexedBit (_eggf int ){_egbd .Data [(_eggf >>3)]|=0x80>>uint (_eggf &7)};func _aaab (_gagd *_df .NYCbCrA ,_cgca NRGBA ,_baed _df .Rectangle ){for _agec :=0;_agec < _baed .Max .X ;_agec ++{for _bbfcc :=0;_bbfcc < _baed .Max .Y ;
_bbfcc ++{_gdeb :=_gagd .NYCbCrAAt (_agec ,_bbfcc );_cgca .SetNRGBA (_agec ,_bbfcc ,_bggdc (_gdeb ));};};};func (_acdc *Monochrome )copy ()*Monochrome {_daeb :=_cee (_acdc .Width ,_acdc .Height );_daeb .ModelThreshold =_acdc .ModelThreshold ;_daeb .Data =make ([]byte ,len (_acdc .Data ));
copy (_daeb .Data ,_acdc .Data );if len (_acdc .Decode )!=0{_daeb .Decode =make ([]float64 ,len (_acdc .Decode ));copy (_daeb .Decode ,_acdc .Decode );};if len (_acdc .Alpha )!=0{_daeb .Alpha =make ([]byte ,len (_acdc .Alpha ));copy (_daeb .Alpha ,_acdc .Alpha );
};return _daeb ;};func _bfge (_bcge _g .CMYK )_g .RGBA {_cbgc ,_gge ,_fafg :=_g .CMYKToRGB (_bcge .C ,_bcge .M ,_bcge .Y ,_bcge .K );return _g .RGBA {R :_cbgc ,G :_gge ,B :_fafg ,A :0xff};};func _gef (_ecgae *Monochrome ,_bef ,_dgef ,_bfcc ,_dbbe int ,_dcc RasterOperator ,_bgdd *Monochrome ,_ebgc ,_dadf int )error {var (_cbgef bool ;
_bbcb bool ;_bec byte ;_aaeef int ;_bfag int ;_efg int ;_efcgc int ;_bgeb bool ;_cafda int ;_cfce int ;_bab int ;_ggab bool ;_agac byte ;_facgg int ;_bffdc int ;_dggd int ;_eebe byte ;_bgfb int ;_cecb int ;_fgab uint ;_bdfe uint ;_begg byte ;_ddee shift ;
_afacd bool ;_afdce bool ;_ebgf ,_ecbe int ;);if _ebgc &7!=0{_cecb =8-(_ebgc &7);};if _bef &7!=0{_bfag =8-(_bef &7);};if _cecb ==0&&_bfag ==0{_begg =_agcef [0];}else {if _bfag > _cecb {_fgab =uint (_bfag -_cecb );}else {_fgab =uint (8-(_cecb -_bfag ));
};_bdfe =8-_fgab ;_begg =_agcef [_fgab ];};if (_bef &7)!=0{_cbgef =true ;_aaeef =8-(_bef &7);_bec =_agcef [_aaeef ];_efg =_ecgae .BytesPerLine *_dgef +(_bef >>3);_efcgc =_bgdd .BytesPerLine *_dadf +(_ebgc >>3);_bgfb =8-(_ebgc &7);if _aaeef > _bgfb {_ddee =_gbccg ;
if _bfcc >=_cecb {_afacd =true ;};}else {_ddee =_ddbb ;};};if _bfcc < _aaeef {_bbcb =true ;_bec &=_eagd [8-_aaeef +_bfcc ];};if !_bbcb {_cafda =(_bfcc -_aaeef )>>3;if _cafda !=0{_bgeb =true ;_cfce =_ecgae .BytesPerLine *_dgef +((_bef +_bfag )>>3);_bab =_bgdd .BytesPerLine *_dadf +((_ebgc +_bfag )>>3);
};};_facgg =(_bef +_bfcc )&7;if !(_bbcb ||_facgg ==0){_ggab =true ;_agac =_eagd [_facgg ];_bffdc =_ecgae .BytesPerLine *_dgef +((_bef +_bfag )>>3)+_cafda ;_dggd =_bgdd .BytesPerLine *_dadf +((_ebgc +_bfag )>>3)+_cafda ;if _facgg > int (_bdfe ){_afdce =true ;
};};switch _dcc {case PixSrc :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;
};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],_eebe ,_bec );_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );
_ecgae .Data [_cfce +_ecbe ]=_eebe ;};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;};};if _ggab {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );
};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],_eebe ,_agac );_bffdc +=_ecgae .BytesPerLine ;_dggd +=_bgdd .BytesPerLine ;};};case PixNotSrc :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;
if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],^_eebe ,_bec );_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;};};if _bgeb {for _ebgf =0;
_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );_ecgae .Data [_cfce +_ecbe ]=^_eebe ;};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;
};};if _ggab {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],^_eebe ,_agac );_bffdc +=_ecgae .BytesPerLine ;
_dggd +=_bgdd .BytesPerLine ;};};case PixSrcOrDst :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;
};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],_eebe |_ecgae .Data [_efg ],_bec );_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );
_ecgae .Data [_cfce +_ecbe ]|=_eebe ;};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;};};if _ggab {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );
};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],_eebe |_ecgae .Data [_bffdc ],_agac );_bffdc +=_ecgae .BytesPerLine ;_dggd +=_bgdd .BytesPerLine ;};};case PixSrcAndDst :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;
if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],_eebe &_ecgae .Data [_efg ],_bec );_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;
};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );_ecgae .Data [_cfce +_ecbe ]&=_eebe ;};_cfce +=_ecgae .BytesPerLine ;
_bab +=_bgdd .BytesPerLine ;};};if _ggab {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],_eebe &_ecgae .Data [_bffdc ],_agac );
_bffdc +=_ecgae .BytesPerLine ;_dggd +=_bgdd .BytesPerLine ;};};case PixSrcXorDst :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );
};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],_eebe ^_ecgae .Data [_efg ],_bec );_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;
_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );_ecgae .Data [_cfce +_ecbe ]^=_eebe ;};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;};};if _ggab {for _ebgf =0;_ebgf < _dbbe ;
_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],_eebe ^_ecgae .Data [_bffdc ],_agac );_bffdc +=_ecgae .BytesPerLine ;_dggd +=_bgdd .BytesPerLine ;
};};case PixNotSrcOrDst :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],^_eebe |_ecgae .Data [_efg ],_bec );
_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );_ecgae .Data [_cfce +_ecbe ]|=^_eebe ;
};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;};};if _ggab {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],^_eebe |_ecgae .Data [_bffdc ],_agac );
_bffdc +=_ecgae .BytesPerLine ;_dggd +=_bgdd .BytesPerLine ;};};case PixNotSrcAndDst :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );
};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],^_eebe &_ecgae .Data [_efg ],_bec );_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;
_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );_ecgae .Data [_cfce +_ecbe ]&=^_eebe ;};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;};};if _ggab {for _ebgf =0;_ebgf < _dbbe ;
_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],^_eebe &_ecgae .Data [_bffdc ],_agac );_bffdc +=_ecgae .BytesPerLine ;_dggd +=_bgdd .BytesPerLine ;
};};case PixSrcOrNotDst :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],_eebe |^_ecgae .Data [_efg ],_bec );
_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );_ecgae .Data [_cfce +_ecbe ]=_eebe |^_ecgae .Data [_cfce +_ecbe ];
};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;};};if _ggab {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],_eebe |^_ecgae .Data [_bffdc ],_agac );
_bffdc +=_ecgae .BytesPerLine ;_dggd +=_bgdd .BytesPerLine ;};};case PixSrcAndNotDst :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );
};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],_eebe &^_ecgae .Data [_efg ],_bec );_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;
_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );_ecgae .Data [_cfce +_ecbe ]=_eebe &^_ecgae .Data [_cfce +_ecbe ];};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;};};if _ggab {for _ebgf =0;
_ebgf < _dbbe ;_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],_eebe &^_ecgae .Data [_bffdc ],_agac );_bffdc +=_ecgae .BytesPerLine ;
_dggd +=_bgdd .BytesPerLine ;};};case PixNotPixSrcOrDst :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;
};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],^(_eebe |_ecgae .Data [_efg ]),_bec );_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );
_ecgae .Data [_cfce +_ecbe ]=^(_eebe |_ecgae .Data [_cfce +_ecbe ]);};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;};};if _ggab {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );
};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],^(_eebe |_ecgae .Data [_bffdc ]),_agac );_bffdc +=_ecgae .BytesPerLine ;_dggd +=_bgdd .BytesPerLine ;};};case PixNotPixSrcAndDst :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;
if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],^(_eebe &_ecgae .Data [_efg ]),_bec );_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;
};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );_ecgae .Data [_cfce +_ecbe ]=^(_eebe &_ecgae .Data [_cfce +_ecbe ]);
};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;};};if _ggab {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],^(_eebe &_ecgae .Data [_bffdc ]),_agac );
_bffdc +=_ecgae .BytesPerLine ;_dggd +=_bgdd .BytesPerLine ;};};case PixNotPixSrcXorDst :if _cbgef {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{if _ddee ==_gbccg {_eebe =_bgdd .Data [_efcgc ]<<_fgab ;if _afacd {_eebe =_abcaa (_eebe ,_bgdd .Data [_efcgc +1]>>_bdfe ,_begg );
};}else {_eebe =_bgdd .Data [_efcgc ]>>_bdfe ;};_ecgae .Data [_efg ]=_abcaa (_ecgae .Data [_efg ],^(_eebe ^_ecgae .Data [_efg ]),_bec );_efg +=_ecgae .BytesPerLine ;_efcgc +=_bgdd .BytesPerLine ;};};if _bgeb {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{for _ecbe =0;
_ecbe < _cafda ;_ecbe ++{_eebe =_abcaa (_bgdd .Data [_bab +_ecbe ]<<_fgab ,_bgdd .Data [_bab +_ecbe +1]>>_bdfe ,_begg );_ecgae .Data [_cfce +_ecbe ]=^(_eebe ^_ecgae .Data [_cfce +_ecbe ]);};_cfce +=_ecgae .BytesPerLine ;_bab +=_bgdd .BytesPerLine ;};};
if _ggab {for _ebgf =0;_ebgf < _dbbe ;_ebgf ++{_eebe =_bgdd .Data [_dggd ]<<_fgab ;if _afdce {_eebe =_abcaa (_eebe ,_bgdd .Data [_dggd +1]>>_bdfe ,_begg );};_ecgae .Data [_bffdc ]=_abcaa (_ecgae .Data [_bffdc ],^(_eebe ^_ecgae .Data [_bffdc ]),_agac );
_bffdc +=_ecgae .BytesPerLine ;_dggd +=_bgdd .BytesPerLine ;};};default:_bg .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_dcc );
return _c .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func _adgb (_degag _df .Image )(Image ,error ){if _gbg ,_bdag :=_degag .(*RGBA32 );
_bdag {return _gbg .Copy (),nil ;};_acadc ,_fadbc ,_gaff :=_ccbgb (_degag ,1);_gagg :=&RGBA32 {ImageBase :NewImageBase (_acadc .Max .X ,_acadc .Max .Y ,8,3,nil ,_gaff ,nil )};_gdga (_degag ,_gagg ,_acadc );if len (_gaff )!=0&&!_fadbc {if _ecbb :=_eeed (_gaff ,_gagg );
_ecbb !=nil {return nil ,_ecbb ;};};return _gagg ,nil ;};func (_ffccc *Gray8 )At (x ,y int )_g .Color {_fccd ,_ :=_ffccc .ColorAt (x ,y );return _fccd };func (_aaace *Gray4 )setGray (_abdd int ,_fcgf int ,_dcba _g .Gray ){_bgbc :=_fcgf *_aaace .BytesPerLine ;
_eefb :=_bgbc +(_abdd >>1);if _eefb >=len (_aaace .Data ){return ;};_ebfe :=_dcba .Y >>4;_aaace .Data [_eefb ]=(_aaace .Data [_eefb ]&(^(0xf0>>uint (4*(_abdd &1)))))|(_ebfe <<uint (4-4*(_abdd &1)));};func (_bdac *Gray2 )Set (x ,y int ,c _g .Color ){if x >=_bdac .Width ||y >=_bdac .Height {return ;
};_eadc :=Gray2Model .Convert (c ).(_g .Gray );_eabe :=y *_bdac .BytesPerLine ;_bggb :=_eabe +(x >>2);_gfcg :=_eadc .Y >>6;_bdac .Data [_bggb ]=(_bdac .Data [_bggb ]&(^(0xc0>>uint (2*((x )&3)))))|(_gfcg <<uint (6-2*(x &3)));};func (_ebcg *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_ebcg .copy ()}};
func (_baeb *RGBA32 )RGBAAt (x ,y int )_g .RGBA {_ceea ,_ :=ColorAtRGBA32 (x ,y ,_baeb .Width ,_baeb .Data ,_baeb .Alpha ,_baeb .Decode );return _ceea ;};func _abcf (){for _egf :=0;_egf < 256;_egf ++{_dadc [_egf ]=uint8 (_egf &0x1)+(uint8 (_egf >>1)&0x1)+(uint8 (_egf >>2)&0x1)+(uint8 (_egf >>3)&0x1)+(uint8 (_egf >>4)&0x1)+(uint8 (_egf >>5)&0x1)+(uint8 (_egf >>6)&0x1)+(uint8 (_egf >>7)&0x1);
};};func _fbbe (_fffg nrgba64 ,_bdcgg NRGBA ,_febe _df .Rectangle ){for _bdabb :=0;_bdabb < _febe .Max .X ;_bdabb ++{for _fcaf :=0;_fcaf < _febe .Max .Y ;_fcaf ++{_cecd :=_fffg .NRGBA64At (_bdabb ,_fcaf );_bdcgg .SetNRGBA (_bdabb ,_fcaf ,_bad (_cecd ));
};};};func (_afgbe *Monochrome )Histogram ()(_gcgb [256]int ){for _ ,_fdc :=range _afgbe .Data {_gcgb [0xff]+=int (_dadc [_afgbe .Data [_fdc ]]);};return _gcgb ;};type RGBA32 struct{ImageBase };func (_gedc *Gray4 )GrayAt (x ,y int )_g .Gray {_dgba ,_ :=ColorAtGray4BPC (x ,y ,_gedc .BytesPerLine ,_gedc .Data ,_gedc .Decode );
return _dgba ;};var (Gray2Model =_g .ModelFunc (_ddgg );Gray4Model =_g .ModelFunc (_dafd );NRGBA16Model =_g .ModelFunc (_aaeb ););func _aaa ()(_bc [256]uint16 ){for _fa :=0;_fa < 256;_fa ++{if _fa &0x01!=0{_bc [_fa ]|=0x3;};if _fa &0x02!=0{_bc [_fa ]|=0xc;
};if _fa &0x04!=0{_bc [_fa ]|=0x30;};if _fa &0x08!=0{_bc [_fa ]|=0xc0;};if _fa &0x10!=0{_bc [_fa ]|=0x300;};if _fa &0x20!=0{_bc [_fa ]|=0xc00;};if _fa &0x40!=0{_bc [_fa ]|=0x3000;};if _fa &0x80!=0{_bc [_fa ]|=0xc000;};};return _bc ;};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};
type Gray8 struct{ImageBase };func (_ffcc *Gray4 )SetGray (x ,y int ,g _g .Gray ){if x >=_ffcc .Width ||y >=_ffcc .Height {return ;};g =_eac (g );_ffcc .setGray (x ,y ,g );};func (_bgb *Monochrome )AddPadding ()(_egcf error ){if _bba :=((_bgb .Width *_bgb .Height )+7)>>3;
len (_bgb .Data )< _bba {return _eg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_bgb .Data ),_bba );
};_deb :=_bgb .Width %8;if _deb ==0{return nil ;};_gadb :=_bgb .Width /8;_bagd :=_gg .NewReader (_bgb .Data );_geag :=make ([]byte ,_bgb .Height *_bgb .BytesPerLine );_deee :=_gg .NewWriterMSB (_geag );_dgd :=make ([]byte ,_gadb );var (_cacb int ;_fef uint64 ;
);for _cacb =0;_cacb < _bgb .Height ;_cacb ++{if _ ,_egcf =_bagd .Read (_dgd );_egcf !=nil {return _egcf ;};if _ ,_egcf =_deee .Write (_dgd );_egcf !=nil {return _egcf ;};if _fef ,_egcf =_bagd .ReadBits (byte (_deb ));_egcf !=nil {return _egcf ;};if _egcf =_deee .WriteByte (byte (_fef )<<uint (8-_deb ));
_egcf !=nil {return _egcf ;};};_bgb .Data =_deee .Data ();return nil ;};var _ _df .Image =&NRGBA64 {};var _ Image =&Gray2 {};func (_aaec *Monochrome )IsUnpadded ()bool {return (_aaec .Width *_aaec .Height )==len (_aaec .Data )};const (_gbccg shift =iota ;
_ddbb ;);func (_agaf *Gray16 )Bounds ()_df .Rectangle {return _df .Rectangle {Max :_df .Point {X :_agaf .Width ,Y :_agaf .Height }};};func _aaeb (_abdf _g .Color )_g .Color {_agbg :=_g .NRGBAModel .Convert (_abdf ).(_g .NRGBA );return _ggbf (_agbg );};
func _ffab (_bbcea *_df .NYCbCrA ,_gede RGBA ,_baad _df .Rectangle ){for _gdag :=0;_gdag < _baad .Max .X ;_gdag ++{for _bgcbg :=0;_bgcbg < _baad .Max .Y ;_bgcbg ++{_abge :=_bbcea .NYCbCrAAt (_gdag ,_bgcbg );_gede .SetRGBA (_gdag ,_bgcbg ,_gfa (_abge ));
};};};func (_eccc *NRGBA16 )SetNRGBA (x ,y int ,c _g .NRGBA ){_ddga :=y *_eccc .BytesPerLine +x *3/2;if _ddga +1>=len (_eccc .Data ){return ;};c =_ggbf (c );_eccc .setNRGBA (x ,y ,_ddga ,c );};func ImgToBinary (i _df .Image ,threshold uint8 )*_df .Gray {switch _dgdg :=i .(type ){case *_df .Gray :if _cbca (_dgdg ){return _dgdg ;
};return _bgdbe (_dgdg ,threshold );case *_df .Gray16 :return _bgga (_dgdg ,threshold );default:return _fcef (_dgdg ,threshold );};};var _ Image =&Gray4 {};func _cbge (_fbg _g .RGBA )_g .CMYK {_fccg ,_baa ,_fgac ,_afgd :=_g .RGBToCMYK (_fbg .R ,_fbg .G ,_fbg .B );
return _g .CMYK {C :_fccg ,M :_baa ,Y :_fgac ,K :_afgd };};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA ,error ){_dece :=y *width +x ;_baaa :=3*_dece ;if _baaa +2>=len (data ){return _g .NRGBA {},_eg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fgeb :=uint8 (0xff);if alpha !=nil &&len (alpha )> _dece {_fgeb =alpha [_dece ];};_dabde ,_feca ,_edbe :=data [_baaa ],data [_baaa +1],data [_baaa +2];if len (decode )==6{_dabde =uint8 (uint32 (LinearInterpolate (float64 (_dabde ),0,255,decode [0],decode [1]))&0xff);
_feca =uint8 (uint32 (LinearInterpolate (float64 (_feca ),0,255,decode [2],decode [3]))&0xff);_edbe =uint8 (uint32 (LinearInterpolate (float64 (_edbe ),0,255,decode [4],decode [5]))&0xff);};return _g .NRGBA {R :_dabde ,G :_feca ,B :_edbe ,A :_fgeb },nil ;
};func (_bcce *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_bcce .copy ()}};func (_dab *Gray4 )ColorModel ()_g .Model {return Gray4Model };func (_edcgd *RGBA32 )ColorModel ()_g .Model {return _g .NRGBAModel };func _ecfa (_ecdf _g .NRGBA64 )_g .Gray {var _dffc _g .NRGBA64 ;
if _ecdf ==_dffc {return _g .Gray {Y :0xff};};_ggcf ,_dfb ,_bcf ,_ :=_ecdf .RGBA ();_bded :=(19595*_ggcf +38470*_dfb +7471*_bcf +1<<15)>>24;return _g .Gray {Y :uint8 (_bded )};};func (_ccaf *Gray2 )GrayAt (x ,y int )_g .Gray {_fad ,_ :=ColorAtGray2BPC (x ,y ,_ccaf .BytesPerLine ,_ccaf .Data ,_ccaf .Decode );
return _fad ;};type Histogramer interface{Histogram ()[256]int ;};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_cabg :=y *bytesPerLine +x ;if _cabg >=len (data ){return _g .Gray {},_eg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cfcac :=data [_cabg ];if len (decode )==2{_cfcac =uint8 (uint32 (LinearInterpolate (float64 (_cfcac ),0,255,decode [0],decode [1]))&0xff);};return _g .Gray {Y :_cfcac },nil ;};func _bgga (_bcfa *_df .Gray16 ,_dafga uint8 )*_df .Gray {_dcce :=_bcfa .Bounds ();
_gcfg :=_df .NewGray (_dcce );for _dcbff :=0;_dcbff < _dcce .Dx ();_dcbff ++{for _bgdg :=0;_bgdg < _dcce .Dy ();_bgdg ++{_dfcf :=_bcfa .Gray16At (_dcbff ,_bgdg );_gcfg .SetGray (_dcbff ,_bgdg ,_g .Gray {Y :_efcf (uint8 (_dfcf .Y /256),_dafga )});};};return _gcfg ;
};func (_adbe *NRGBA64 )setNRGBA64 (_cffe int ,_dfe _g .NRGBA64 ,_debc int ){_adbe .Data [_cffe ]=uint8 (_dfe .R >>8);_adbe .Data [_cffe +1]=uint8 (_dfe .R &0xff);_adbe .Data [_cffe +2]=uint8 (_dfe .G >>8);_adbe .Data [_cffe +3]=uint8 (_dfe .G &0xff);_adbe .Data [_cffe +4]=uint8 (_dfe .B >>8);
_adbe .Data [_cffe +5]=uint8 (_dfe .B &0xff);if _debc +1< len (_adbe .Alpha ){_adbe .Alpha [_debc ]=uint8 (_dfe .A >>8);_adbe .Alpha [_debc +1]=uint8 (_dfe .A &0xff);};};func ImgToGray (i _df .Image )*_df .Gray {if _bafad ,_afbdf :=i .(*_df .Gray );_afbdf {return _bafad ;
};_eagdf :=i .Bounds ();_dcbac :=_df .NewGray (_eagdf );for _dfad :=0;_dfad < _eagdf .Max .X ;_dfad ++{for _dgae :=0;_dgae < _eagdf .Max .Y ;_dgae ++{_ffee :=i .At (_dfad ,_dgae );_dcbac .Set (_dfad ,_dgae ,_ffee );};};return _dcbac ;};func (_feag *ImageBase )setFourBytes (_ffa int ,_ffac uint32 )error {if _ffa +3> len (_feag .Data )-1{return _eg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ffa );
};_feag .Data [_ffa ]=byte ((_ffac &0xff000000)>>24);_feag .Data [_ffa +1]=byte ((_ffac &0xff0000)>>16);_feag .Data [_ffa +2]=byte ((_ffac &0xff00)>>8);_feag .Data [_ffa +3]=byte (_ffac &0xff);return nil ;};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_bgf :=BytesPerLine (width ,8,1);
if len (data )< _bgf *height {return nil ,nil ;};_ef :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_f ,_ggc :=MonochromeConverter .Convert (_ef );if _ggc !=nil {return nil ,_ggc ;};return _f .Base ().Data ,nil ;};func (_fege *ImageBase )setEightPartlyBytes (_dbaf ,_gacg int ,_eaa uint64 )(_afdc error ){var (_cged byte ;
_agbf int ;);for _ecfc :=1;_ecfc <=_gacg ;_ecfc ++{_agbf =64-_ecfc *8;_cged =byte (_eaa >>uint (_agbf )&0xff);if _afdc =_fege .setByte (_dbaf +_ecfc -1,_cged );_afdc !=nil {return _afdc ;};};_dgbgc :=_fege .BytesPerLine *8-_fege .Width ;if _dgbgc ==0{return nil ;
};_agbf -=8;_cged =byte (_eaa >>uint (_agbf )&0xff)<<uint (_dgbgc );if _afdc =_fege .setByte (_dbaf +_gacg ,_cged );_afdc !=nil {return _afdc ;};return nil ;};type nrgba64 interface{NRGBA64At (_adff ,_gaf int )_g .NRGBA64 ;SetNRGBA64 (_bfdb ,_edcaa int ,_cbfa _g .NRGBA64 );
};func (_ccgag *Gray8 )Base ()*ImageBase {return &_ccgag .ImageBase };func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_abce (n )+1);};var _dadc [256]uint8 ;func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_g .RGBA ,error ){_edd :=y *width +x ;
_ecbd :=3*_edd ;if _ecbd +2>=len (data ){return _g .RGBA {},_eg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_febd :=uint8 (0xff);if alpha !=nil &&len (alpha )> _edd {_febd =alpha [_edd ];};_aeeb ,_fcbf ,_aded :=data [_ecbd ],data [_ecbd +1],data [_ecbd +2];if len (decode )==6{_aeeb =uint8 (uint32 (LinearInterpolate (float64 (_aeeb ),0,255,decode [0],decode [1]))&0xff);
_fcbf =uint8 (uint32 (LinearInterpolate (float64 (_fcbf ),0,255,decode [2],decode [3]))&0xff);_aded =uint8 (uint32 (LinearInterpolate (float64 (_aded ),0,255,decode [4],decode [5]))&0xff);};return _g .RGBA {R :_aeeb ,G :_fcbf ,B :_aded ,A :_febd },nil ;
};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_eaac :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_eaac .Data =make ([]byte ,height *_eaac .BytesPerLine );};return _eaac ;};func _fccf (_ddf ,_bbg *Monochrome ,_ccga []byte ,_bdc int )(_gbab error ){var (_dbc ,_eae ,_gce ,_fgdf ,_ecg ,_ccdb ,_gfd ,_ecga int ;_egae ,_afbd ,_ccc ,_ebb uint32 ;
_gcb ,_cag byte ;_acf uint16 ;);_agc :=make ([]byte ,4);_eeag :=make ([]byte ,4);for _gce =0;_gce < _ddf .Height -1;_gce ,_fgdf =_gce +2,_fgdf +1{_dbc =_gce *_ddf .BytesPerLine ;_eae =_fgdf *_bbg .BytesPerLine ;for _ecg ,_ccdb =0,0;_ecg < _bdc ;_ecg ,_ccdb =_ecg +4,_ccdb +1{for _gfd =0;
_gfd < 4;_gfd ++{_ecga =_dbc +_ecg +_gfd ;if _ecga <=len (_ddf .Data )-1&&_ecga < _dbc +_ddf .BytesPerLine {_agc [_gfd ]=_ddf .Data [_ecga ];}else {_agc [_gfd ]=0x00;};_ecga =_dbc +_ddf .BytesPerLine +_ecg +_gfd ;if _ecga <=len (_ddf .Data )-1&&_ecga < _dbc +(2*_ddf .BytesPerLine ){_eeag [_gfd ]=_ddf .Data [_ecga ];
}else {_eeag [_gfd ]=0x00;};};_egae =_a .BigEndian .Uint32 (_agc );_afbd =_a .BigEndian .Uint32 (_eeag );_ccc =_egae &_afbd ;_ccc |=_ccc <<1;_ebb =_egae |_afbd ;_ebb &=_ebb <<1;_afbd =_ccc |_ebb ;_afbd &=0xaaaaaaaa;_egae =_afbd |(_afbd <<7);_gcb =byte (_egae >>24);
_cag =byte ((_egae >>8)&0xff);_ecga =_eae +_ccdb ;if _ecga +1==len (_bbg .Data )-1||_ecga +1>=_eae +_bbg .BytesPerLine {if _gbab =_bbg .setByte (_ecga ,_ccga [_gcb ]);_gbab !=nil {return _eg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ecga );
};}else {_acf =(uint16 (_ccga [_gcb ])<<8)|uint16 (_ccga [_cag ]);if _gbab =_bbg .setTwoBytes (_ecga ,_acf );_gbab !=nil {return _eg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ecga );
};_ccdb ++;};};};return nil ;};func (_agce *monochromeThresholdConverter )Convert (img _df .Image )(Image ,error ){if _bffa ,_ged :=img .(*Monochrome );_ged {return _bffa .Copy (),nil ;};_fdf :=img .Bounds ();_gfgd ,_gfca :=NewImage (_fdf .Max .X ,_fdf .Max .Y ,1,1,nil ,nil ,nil );
if _gfca !=nil {return nil ,_gfca ;};_gfgd .(*Monochrome ).ModelThreshold =_agce .Threshold ;for _cfca :=0;_cfca < _fdf .Max .X ;_cfca ++{for _fba :=0;_fba < _fdf .Max .Y ;_fba ++{_ebbcf :=img .At (_cfca ,_fba );_gfgd .Set (_cfca ,_fba ,_ebbcf );};};return _gfgd ,nil ;
};func _cbga (_afdb _g .RGBA )_g .NRGBA {switch _afdb .A {case 0xff:return _g .NRGBA {R :_afdb .R ,G :_afdb .G ,B :_afdb .B ,A :0xff};case 0x00:return _g .NRGBA {};default:_dea ,_fcab ,_efea ,_eeda :=_afdb .RGBA ();_dea =(_dea *0xffff)/_eeda ;_fcab =(_fcab *0xffff)/_eeda ;
_efea =(_efea *0xffff)/_eeda ;return _g .NRGBA {R :uint8 (_dea >>8),G :uint8 (_fcab >>8),B :uint8 (_efea >>8),A :uint8 (_eeda >>8)};};};func _cdf (_cafde _df .Image )(Image ,error ){if _gfc ,_dbd :=_cafde .(*CMYK32 );_dbd {return _gfc .Copy (),nil ;};_gaa :=_cafde .Bounds ();
_gad ,_eeagb :=NewImage (_gaa .Max .X ,_gaa .Max .Y ,8,4,nil ,nil ,nil );if _eeagb !=nil {return nil ,_eeagb ;};switch _cbf :=_cafde .(type ){case CMYK :_efb (_cbf ,_gad .(CMYK ),_gaa );case Gray :_deda (_cbf ,_gad .(CMYK ),_gaa );case NRGBA :_ddg (_cbf ,_gad .(CMYK ),_gaa );
case RGBA :_dfdd (_cbf ,_gad .(CMYK ),_gaa );default:_fbe (_cafde ,_gad ,_gaa );};return _gad ,nil ;};func (_cefc *NRGBA16 )Base ()*ImageBase {return &_cefc .ImageBase };func (_bbdb *ImageBase )setEightBytes (_deaa int ,_ecgd uint64 )error {_dagb :=_bbdb .BytesPerLine -(_deaa %_bbdb .BytesPerLine );
if _bbdb .BytesPerLine !=_bbdb .Width >>3{_dagb --;};if _dagb >=8{return _bbdb .setEightFullBytes (_deaa ,_ecgd );};return _bbdb .setEightPartlyBytes (_deaa ,_dagb ,_ecgd );};func (_aff *Gray2 )At (x ,y int )_g .Color {_gcf ,_ :=_aff .ColorAt (x ,y );return _gcf };
func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _ddcg (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_cgbdb *Gray2 )Histogram ()(_adeg [256]int ){for _bfbg :=0;_bfbg < _cgbdb .Width ;
_bfbg ++{for _gae :=0;_gae < _cgbdb .Height ;_gae ++{_adeg [_cgbdb .GrayAt (_bfbg ,_gae ).Y ]++;};};return _adeg ;};var _ _df .Image =&RGBA32 {};func _bga (_dffg ,_defc *Monochrome ,_bggg []byte ,_ffc int )(_dce error ){var (_ddad ,_cfa ,_faf ,_bda ,_bge ,_cebe ,_cfba ,_bdf int ;
_ebg ,_acg uint32 ;_gbd ,_aed byte ;_bcg uint16 ;);_ccac :=make ([]byte ,4);_eeb :=make ([]byte ,4);for _faf =0;_faf < _dffg .Height -1;_faf ,_bda =_faf +2,_bda +1{_ddad =_faf *_dffg .BytesPerLine ;_cfa =_bda *_defc .BytesPerLine ;for _bge ,_cebe =0,0;
_bge < _ffc ;_bge ,_cebe =_bge +4,_cebe +1{for _cfba =0;_cfba < 4;_cfba ++{_bdf =_ddad +_bge +_cfba ;if _bdf <=len (_dffg .Data )-1&&_bdf < _ddad +_dffg .BytesPerLine {_ccac [_cfba ]=_dffg .Data [_bdf ];}else {_ccac [_cfba ]=0x00;};_bdf =_ddad +_dffg .BytesPerLine +_bge +_cfba ;
if _bdf <=len (_dffg .Data )-1&&_bdf < _ddad +(2*_dffg .BytesPerLine ){_eeb [_cfba ]=_dffg .Data [_bdf ];}else {_eeb [_cfba ]=0x00;};};_ebg =_a .BigEndian .Uint32 (_ccac );_acg =_a .BigEndian .Uint32 (_eeb );_acg &=_ebg ;_acg &=_acg <<1;_acg &=0xaaaaaaaa;
_ebg =_acg |(_acg <<7);_gbd =byte (_ebg >>24);_aed =byte ((_ebg >>8)&0xff);_bdf =_cfa +_cebe ;if _bdf +1==len (_defc .Data )-1||_bdf +1>=_cfa +_defc .BytesPerLine {_defc .Data [_bdf ]=_bggg [_gbd ];if _dce =_defc .setByte (_bdf ,_bggg [_gbd ]);_dce !=nil {return _eg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bdf );
};}else {_bcg =(uint16 (_bggg [_gbd ])<<8)|uint16 (_bggg [_aed ]);if _dce =_defc .setTwoBytes (_bdf ,_bcg );_dce !=nil {return _eg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bdf );
};_cebe ++;};};};return nil ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_g .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_eg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};