//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_b "encoding/binary";_c "errors";_cb "fmt";_cd "github.com/unidoc/unipdf/v3/common";_eb "github.com/unidoc/unipdf/v3/internal/bitwise";_fa "image";_f "image/color";_cag "image/draw";_ca "math";);func (_eead *Gray4 )At (x ,y int )_f .Color {_dca ,_ :=_eead .ColorAt (x ,y );
return _dca };func (_debf *Gray2 )SetGray (x ,y int ,gray _f .Gray ){_dcea :=_abe (gray );_cfgf :=y *_debf .BytesPerLine ;_edec :=_cfgf +(x >>2);if _edec >=len (_debf .Data ){return ;};_gdg :=_dcea .Y >>6;_debf .Data [_edec ]=(_debf .Data [_edec ]&(^(0xc0>>uint (2*((x )&3)))))|(_gdg <<uint (6-2*(x &3)));
};func (_bcbe *Gray2 )Histogram ()(_bcfb [256]int ){for _daea :=0;_daea < _bcbe .Width ;_daea ++{for _feba :=0;_feba < _bcbe .Height ;_feba ++{_bcfb [_bcbe .GrayAt (_daea ,_feba ).Y ]++;};};return _bcfb ;};func (_cea *Monochrome )Bounds ()_fa .Rectangle {return _fa .Rectangle {Max :_fa .Point {X :_cea .Width ,Y :_cea .Height }};
};func _dffd (_bgbbc *Monochrome ,_beeg ,_ddfd ,_dgba ,_cgcg int ,_feca RasterOperator ,_ccegf *Monochrome ,_adcg ,_gcb int )error {if _bgbbc ==nil {return _c .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _feca ==PixDst {return nil ;};switch _feca {case PixClr ,PixSet ,PixNotDst :_deg (_bgbbc ,_beeg ,_ddfd ,_dgba ,_cgcg ,_feca );return nil ;};if _ccegf ==nil {_cd .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _add :=_gcdb (_bgbbc ,_beeg ,_ddfd ,_dgba ,_cgcg ,_feca ,_ccegf ,_adcg ,_gcb );_add !=nil {return _add ;};return nil ;};var (MonochromeConverter =ConverterFunc (_dgef );
Gray2Converter =ConverterFunc (_cdga );Gray4Converter =ConverterFunc (_ddg );GrayConverter =ConverterFunc (_gbdf );Gray16Converter =ConverterFunc (_eagf );NRGBA16Converter =ConverterFunc (_cggc );NRGBAConverter =ConverterFunc (_gggf );NRGBA64Converter =ConverterFunc (_bacf );
CMYKConverter =ConverterFunc (_aed ););func (_egcdd *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_egcdd .copy ()}};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_f .CMYK ,error ){_edd :=4*(y *width +x );if _edd +3>=len (data ){return _f .CMYK {},_cb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_edd ]&0xff;M :=data [_edd +1]&0xff;Y :=data [_edd +2]&0xff;K :=data [_edd +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _f .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_bfba *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_bfba .copy ()}};
var _ Gray =&Gray16 {};var ErrInvalidImage =_c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func _gcdb (_aece *Monochrome ,_efac ,_deaf int ,_eaca ,_abde int ,_aaaaf RasterOperator ,_faac *Monochrome ,_gabb ,_fggfe int )error {var _aefa ,_aabc ,_abdd ,_bfdg int ;if _efac < 0{_gabb -=_efac ;_eaca +=_efac ;_efac =0;};if _gabb < 0{_efac -=_gabb ;
_eaca +=_gabb ;_gabb =0;};_aefa =_efac +_eaca -_aece .Width ;if _aefa > 0{_eaca -=_aefa ;};_aabc =_gabb +_eaca -_faac .Width ;if _aabc > 0{_eaca -=_aabc ;};if _deaf < 0{_fggfe -=_deaf ;_abde +=_deaf ;_deaf =0;};if _fggfe < 0{_deaf -=_fggfe ;_abde +=_fggfe ;
_fggfe =0;};_abdd =_deaf +_abde -_aece .Height ;if _abdd > 0{_abde -=_abdd ;};_bfdg =_fggfe +_abde -_faac .Height ;if _bfdg > 0{_abde -=_bfdg ;};if _eaca <=0||_abde <=0{return nil ;};var _gaab error ;switch {case _efac &7==0&&_gabb &7==0:_gaab =_adfa (_aece ,_efac ,_deaf ,_eaca ,_abde ,_aaaaf ,_faac ,_gabb ,_fggfe );
case _efac &7==_gabb &7:_gaab =_abgd (_aece ,_efac ,_deaf ,_eaca ,_abde ,_aaaaf ,_faac ,_gabb ,_fggfe );default:_gaab =_bgbbe (_aece ,_efac ,_deaf ,_eaca ,_abde ,_aaaaf ,_faac ,_gabb ,_fggfe );};if _gaab !=nil {return _gaab ;};return nil ;};func (_baae *Gray2 )Bounds ()_fa .Rectangle {return _fa .Rectangle {Max :_fa .Point {X :_baae .Width ,Y :_baae .Height }};
};func (_eggd *Gray8 )GrayAt (x ,y int )_f .Gray {_gfbe ,_ :=ColorAtGray8BPC (x ,y ,_eggd .BytesPerLine ,_eggd .Data ,_eggd .Decode );return _gfbe ;};func (_bede *ImageBase )MakeAlpha (){_bede .newAlpha ()};func (_cage *CMYK32 )Bounds ()_fa .Rectangle {return _fa .Rectangle {Max :_fa .Point {X :_cage .Width ,Y :_cage .Height }};
};func (_cba *NRGBA16 )At (x ,y int )_f .Color {_ffbe ,_ :=_cba .ColorAt (x ,y );return _ffbe };func _cgdda (_ceefa *_fa .NYCbCrA ,_adfe NRGBA ,_dcfb _fa .Rectangle ){for _bcfae :=0;_bcfae < _dcfb .Max .X ;_bcfae ++{for _efagf :=0;_efagf < _dcfb .Max .Y ;
_efagf ++{_deeg :=_ceefa .NYCbCrAAt (_bcfae ,_efagf );_adfe .SetNRGBA (_bcfae ,_efagf ,_cgc (_deeg ));};};};func (_bad *CMYK32 )Set (x ,y int ,c _f .Color ){_cffd :=4*(y *_bad .Width +x );if _cffd +3>=len (_bad .Data ){return ;};_cabc :=_f .CMYKModel .Convert (c ).(_f .CMYK );
_bad .Data [_cffd ]=_cabc .C ;_bad .Data [_cffd +1]=_cabc .M ;_bad .Data [_cffd +2]=_cabc .Y ;_bad .Data [_cffd +3]=_cabc .K ;};func (_aaeg *Monochrome )setGrayBit (_cgdb ,_fgga int ){_aaeg .Data [_cgdb ]|=0x80>>uint (_fgga &7)};func _dccag (_cef _f .Gray )_f .CMYK {return _f .CMYK {K :0xff-_cef .Y }};
type RasterOperator int ;func _ddg (_cfbf _fa .Image )(Image ,error ){if _affd ,_geec :=_cfbf .(*Gray4 );_geec {return _affd .Copy (),nil ;};_fecf :=_cfbf .Bounds ();_adae ,_cddf :=NewImage (_fecf .Max .X ,_fecf .Max .Y ,4,1,nil ,nil ,nil );if _cddf !=nil {return nil ,_cddf ;
};_gbaa (_cfbf ,_adae ,_fecf );return _adae ,nil ;};func _aed (_gba _fa .Image )(Image ,error ){if _acf ,_eced :=_gba .(*CMYK32 );_eced {return _acf .Copy (),nil ;};_abd :=_gba .Bounds ();_adf ,_gbc :=NewImage (_abd .Max .X ,_abd .Max .Y ,8,4,nil ,nil ,nil );
if _gbc !=nil {return nil ,_gbc ;};switch _cfcc :=_gba .(type ){case CMYK :_ecc (_cfcc ,_adf .(CMYK ),_abd );case Gray :_ccaf (_cfcc ,_adf .(CMYK ),_abd );case NRGBA :_dcf (_cfcc ,_adf .(CMYK ),_abd );case RGBA :_dada (_cfcc ,_adf .(CMYK ),_abd );default:_efd (_gba ,_adf ,_abd );
};return _adf ,nil ;};func _bfe (_cddb ,_gdf *Monochrome ,_gfe []byte ,_eae int )(_ce error ){var (_dfc ,_efb ,_gegg ,_ccb ,_cabf ,_cgb ,_bfg ,_ffa int ;_ecd ,_aba uint32 ;_fcb ,_cfcd byte ;_gfeb uint16 ;);_baa :=make ([]byte ,4);_dgge :=make ([]byte ,4);
for _gegg =0;_gegg < _cddb .Height -1;_gegg ,_ccb =_gegg +2,_ccb +1{_dfc =_gegg *_cddb .BytesPerLine ;_efb =_ccb *_gdf .BytesPerLine ;for _cabf ,_cgb =0,0;_cabf < _eae ;_cabf ,_cgb =_cabf +4,_cgb +1{for _bfg =0;_bfg < 4;_bfg ++{_ffa =_dfc +_cabf +_bfg ;
if _ffa <=len (_cddb .Data )-1&&_ffa < _dfc +_cddb .BytesPerLine {_baa [_bfg ]=_cddb .Data [_ffa ];}else {_baa [_bfg ]=0x00;};_ffa =_dfc +_cddb .BytesPerLine +_cabf +_bfg ;if _ffa <=len (_cddb .Data )-1&&_ffa < _dfc +(2*_cddb .BytesPerLine ){_dgge [_bfg ]=_cddb .Data [_ffa ];
}else {_dgge [_bfg ]=0x00;};};_ecd =_b .BigEndian .Uint32 (_baa );_aba =_b .BigEndian .Uint32 (_dgge );_aba &=_ecd ;_aba &=_aba <<1;_aba &=0xaaaaaaaa;_ecd =_aba |(_aba <<7);_fcb =byte (_ecd >>24);_cfcd =byte ((_ecd >>8)&0xff);_ffa =_efb +_cgb ;if _ffa +1==len (_gdf .Data )-1||_ffa +1>=_efb +_gdf .BytesPerLine {_gdf .Data [_ffa ]=_gfe [_fcb ];
if _ce =_gdf .setByte (_ffa ,_gfe [_fcb ]);_ce !=nil {return _cb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ffa );};}else {_gfeb =(uint16 (_gfe [_fcb ])<<8)|uint16 (_gfe [_cfcd ]);if _ce =_gdf .setTwoBytes (_ffa ,_gfeb );_ce !=nil {return _cb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ffa );
};_cgb ++;};};};return nil ;};func (_bfge *ImageBase )setFourBytes (_bddca int ,_cee uint32 )error {if _bddca +3> len (_bfge .Data )-1{return _cb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bddca );
};_bfge .Data [_bddca ]=byte ((_cee &0xff000000)>>24);_bfge .Data [_bddca +1]=byte ((_cee &0xff0000)>>16);_bfge .Data [_bddca +2]=byte ((_cee &0xff00)>>8);_bfge .Data [_bddca +3]=byte (_cee &0xff);return nil ;};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};
func (_bedg *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_c .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_bcbf :=_dfe (width ,height );_dbdf :=make ([]int ,height );_eafe :=make ([]int ,width );_ecab :=float64 (_bedg .Width )/float64 (width );_fcfd :=float64 (_bedg .Height )/float64 (height );for _eabg :=0;_eabg < height ;_eabg ++{_dbdf [_eabg ]=int (_ca .Min (_fcfd *float64 (_eabg )+0.5,float64 (_bedg .Height -1)));
};for _fag :=0;_fag < width ;_fag ++{_eafe [_fag ]=int (_ca .Min (_ecab *float64 (_fag )+0.5,float64 (_bedg .Width -1)));};_gefa :=-1;_baga :=byte (0);for _cbde :=0;_cbde < height ;_cbde ++{_ceg :=_dbdf [_cbde ]*_bedg .BytesPerLine ;_fbad :=_cbde *_bcbf .BytesPerLine ;
for _aaag :=0;_aaag < width ;_aaag ++{_eabd :=_eafe [_aaag ];if _eabd !=_gefa {_baga =_bedg .getBit (_ceg ,_eabd );if _baga !=0{_bcbf .setBit (_fbad ,_aaag );};_gefa =_eabd ;}else {if _baga !=0{_bcbf .setBit (_fbad ,_aaag );};};};};return _bcbf ,nil ;};
type RGBA interface{RGBAAt (_gcfc ,_efae int )_f .RGBA ;SetRGBA (_cdcf ,_gfgfb int ,_ddeg _f .RGBA );};func _cca (_bb ,_de *Monochrome )(_dd error ){_bf :=_de .BytesPerLine ;_gef :=_bb .BytesPerLine ;var (_ab byte ;_gg uint16 ;_cdb ,_dg ,_ef ,_ccf ,_fe int ;
);for _ef =0;_ef < _de .Height ;_ef ++{_cdb =_ef *_bf ;_dg =2*_ef *_gef ;for _ccf =0;_ccf < _bf ;_ccf ++{_ab =_de .Data [_cdb +_ccf ];_gg =_df [_ab ];_fe =_dg +_ccf *2;if _bb .BytesPerLine !=_de .BytesPerLine *2&&(_ccf +1)*2> _bb .BytesPerLine {_dd =_bb .setByte (_fe ,byte (_gg >>8));
}else {_dd =_bb .setTwoBytes (_fe ,_gg );};if _dd !=nil {return _dd ;};};for _ccf =0;_ccf < _gef ;_ccf ++{_fe =_dg +_gef +_ccf ;_ab =_bb .Data [_dg +_ccf ];if _dd =_bb .setByte (_fe ,_ab );_dd !=nil {return _dd ;};};};return nil ;};func _aabb (_debg *_fa .Gray ,_cfgde uint8 )*_fa .Gray {_ccdg :=_debg .Bounds ();
_efgb :=_fa .NewGray (_ccdg );for _daag :=0;_daag < _ccdg .Dx ();_daag ++{for _affa :=0;_affa < _ccdg .Dy ();_affa ++{_cceee :=_debg .GrayAt (_daag ,_affa );_efgb .SetGray (_daag ,_affa ,_f .Gray {Y :_caaeg (_cceee .Y ,_cfgde )});};};return _efgb ;};func _dgeb (_aedd ,_beag Gray ,_eeea _fa .Rectangle ){for _bda :=0;
_bda < _eeea .Max .X ;_bda ++{for _bac :=0;_bac < _eeea .Max .Y ;_bac ++{_beag .SetGray (_bda ,_bac ,_aedd .GrayAt (_bda ,_bac ));};};};var _ _fa .Image =&NRGBA64 {};type Image interface{_cag .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_fabfg ,_fcd int )(_f .Color ,error );
Validate ()error ;};func (_bcbg monochromeModel )Convert (c _f .Color )_f .Color {_cddd :=_f .GrayModel .Convert (c ).(_f .Gray );return _bab (_cddd ,_bcbg );};type Gray16 struct{ImageBase };func _ccaf (_bdg Gray ,_dad CMYK ,_bae _fa .Rectangle ){for _bcc :=0;
_bcc < _bae .Max .X ;_bcc ++{for _bba :=0;_bba < _bae .Max .Y ;_bba ++{_ggca :=_bdg .GrayAt (_bcc ,_bba );_dad .SetCMYK (_bcc ,_bba ,_dccag (_ggca ));};};};func _cgc (_cdf _f .NYCbCrA )_f .NRGBA {_fdb :=int32 (_cdf .Y )*0x10101;_gcfg :=int32 (_cdf .Cb )-128;
_gff :=int32 (_cdf .Cr )-128;_cfccd :=_fdb +91881*_gff ;if uint32 (_cfccd )&0xff000000==0{_cfccd >>=8;}else {_cfccd =^(_cfccd >>31)&0xffff;};_cbf :=_fdb -22554*_gcfg -46802*_gff ;if uint32 (_cbf )&0xff000000==0{_cbf >>=8;}else {_cbf =^(_cbf >>31)&0xffff;
};_eca :=_fdb +116130*_gcfg ;if uint32 (_eca )&0xff000000==0{_eca >>=8;}else {_eca =^(_eca >>31)&0xffff;};return _f .NRGBA {R :uint8 (_cfccd >>8),G :uint8 (_cbf >>8),B :uint8 (_eca >>8),A :_cdf .A };};func MonochromeModel (threshold uint8 )_f .Model {return monochromeModel (threshold )};
type Gray8 struct{ImageBase };func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_badc :=y *bytesPerLine +x >>1;if _badc >=len (data ){return _f .Gray {},_cb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_abdf :=data [_badc ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_abdf =uint8 (uint32 (LinearInterpolate (float64 (_abdf ),0,15,decode [0],decode [1]))&0xf);};return _f .Gray {Y :_abdf *17&0xff},nil ;};func (_dfee *Gray4 )ColorModel ()_f .Model {return Gray4Model };
type nrgba64 interface{NRGBA64At (_bgbf ,_feef int )_f .NRGBA64 ;SetNRGBA64 (_abdeb ,_febc int ,_dgdd _f .NRGBA64 );};func _gggf (_acdac _fa .Image )(Image ,error ){if _dbdd ,_adea :=_acdac .(*NRGBA32 );_adea {return _dbdd .Copy (),nil ;};_eccc ,_ddde ,_fbbe :=_bdeg (_acdac ,1);
_dccde ,_dcbb :=NewImage (_eccc .Max .X ,_eccc .Max .Y ,8,3,nil ,_fbbe ,nil );if _dcbb !=nil {return nil ,_dcbb ;};_efaf (_acdac ,_dccde ,_eccc );if len (_fbbe )!=0&&!_ddde {if _gfff :=_cfdd (_fbbe ,_dccde );_gfff !=nil {return nil ,_gfff ;};};return _dccde ,nil ;
};func (_gdgg *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_gdgg .copy ()}};var _ Gray =&Monochrome {};func _ceca (_bgg _f .CMYK )_f .NRGBA {_ccfa ,_baed ,_ead :=_f .CMYKToRGB (_bgg .C ,_bgg .M ,_bgg .Y ,_bgg .K );return _f .NRGBA {R :_ccfa ,G :_baed ,B :_ead ,A :0xff};
};func _bfdgb (_ddfg uint8 )bool {if _ddfg ==0||_ddfg ==255{return true ;};return false ;};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};func (_cfgd *Gray16 )ColorModel ()_f .Model {return _f .Gray16Model };
func _cfd (_ffdd Gray ,_aabg NRGBA ,_eeb _fa .Rectangle ){for _cefg :=0;_cefg < _eeb .Max .X ;_cefg ++{for _dggd :=0;_dggd < _eeb .Max .Y ;_dggd ++{_gffc :=_fba (_aabg .NRGBAAt (_cefg ,_dggd ));_ffdd .SetGray (_cefg ,_dggd ,_gffc );};};};func (_eac *Gray8 )At (x ,y int )_f .Color {_dafd ,_ :=_eac .ColorAt (x ,y );
return _dafd };func _ad (_ccfg *Monochrome ,_cf ,_daf int )(*Monochrome ,error ){if _ccfg ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cf <=0||_daf <=0{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _cf ==_daf {if _cf ==1{return _ccfg .copy (),nil ;};if _cf ==2||_cf ==4||_cf ==8{_ade ,_db :=_g (_ccfg ,_cf );if _db !=nil {return nil ,_db ;};return _ade ,nil ;};};_cbg :=_cf *_ccfg .Width ;_dba :=_daf *_ccfg .Height ;_gd :=_dfe (_cbg ,_dba );_aef :=_gd .BytesPerLine ;
var (_be ,_beb ,_bfd ,_cbef ,_dc int ;_cab byte ;_fab error ;);for _beb =0;_beb < _ccfg .Height ;_beb ++{_be =_daf *_beb *_aef ;for _bfd =0;_bfd < _ccfg .Width ;_bfd ++{if _bbbc :=_ccfg .getBitAt (_bfd ,_beb );_bbbc {_dc =_cf *_bfd ;for _cbef =0;_cbef < _cf ;
_cbef ++{_gd .setIndexedBit (_be *8+_dc +_cbef );};};};for _cbef =1;_cbef < _daf ;_cbef ++{_bbbg :=_be +_cbef *_aef ;for _fdf :=0;_fdf < _aef ;_fdf ++{if _cab ,_fab =_gd .getByte (_be +_fdf );_fab !=nil {return nil ,_fab ;};if _fab =_gd .setByte (_bbbg +_fdf ,_cab );
_fab !=nil {return nil ,_fab ;};};};};return _gd ,nil ;};func (_fbba *NRGBA16 )ColorModel ()_f .Model {return NRGBA16Model };func _caea (_dagb _f .NRGBA64 )_f .NRGBA {return _f .NRGBA {R :uint8 (_dagb .R >>8),G :uint8 (_dagb .G >>8),B :uint8 (_dagb .B >>8),A :uint8 (_dagb .A >>8)};
};func _ecg (_acbe _f .Color )_f .Color {_adaf :=_f .GrayModel .Convert (_acbe ).(_f .Gray );return _abe (_adaf );};func _ggcf (_gea _f .RGBA )_f .NRGBA {switch _gea .A {case 0xff:return _f .NRGBA {R :_gea .R ,G :_gea .G ,B :_gea .B ,A :0xff};case 0x00:return _f .NRGBA {};
default:_bag ,_cbdfb ,_abb ,_agg :=_gea .RGBA ();_bag =(_bag *0xffff)/_agg ;_cbdfb =(_cbdfb *0xffff)/_agg ;_abb =(_abb *0xffff)/_agg ;return _f .NRGBA {R :uint8 (_bag >>8),G :uint8 (_cbdfb >>8),B :uint8 (_abb >>8),A :uint8 (_agg >>8)};};};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray16 ,error ){_eegg :=(y *bytesPerLine /2+x )*2;
if _eegg +1>=len (data ){return _f .Gray16 {},_cb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dbgf :=uint16 (data [_eegg ])<<8|uint16 (data [_eegg +1]);if len (decode )==2{_dbgf =uint16 (uint64 (LinearInterpolate (float64 (_dbgf ),0,65535,decode [0],decode [1])));};return _f .Gray16 {Y :_dbgf },nil ;};var (Gray2Model =_f .ModelFunc (_ecg );Gray4Model =_f .ModelFunc (_beeaf );
NRGBA16Model =_f .ModelFunc (_cdagd ););func (_caed *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_caed .copy ()}};func _dcf (_dedf NRGBA ,_dfb CMYK ,_bafa _fa .Rectangle ){for _cgba :=0;_cgba < _bafa .Max .X ;_cgba ++{for _bebe :=0;_bebe < _bafa .Max .Y ;
_bebe ++{_eggc :=_dedf .NRGBAAt (_cgba ,_bebe );_dfb .SetCMYK (_cgba ,_bebe ,_bddg (_eggc ));};};};func _fabf (_bdc NRGBA ,_ccda Gray ,_abg _fa .Rectangle ){for _faga :=0;_faga < _abg .Max .X ;_faga ++{for _gbea :=0;_gbea < _abg .Max .Y ;_gbea ++{_dac :=_bfeg (_bdc .NRGBAAt (_faga ,_gbea ));
_ccda .SetGray (_faga ,_gbea ,_dac );};};};type monochromeModel uint8 ;var _ _fa .Image =&NRGBA32 {};func init (){_fbeff ()};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_cb .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_ecabd *Gray16 )GrayAt (x ,y int )_f .Gray {_bbaa ,_ :=_ecabd .ColorAt (x ,y );return _f .Gray {Y :uint8 (_bbaa .(_f .Gray16 ).Y >>8)};};var _ Gray =&Gray2 {};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_fc :=BytesPerLine (width ,8,1);
if len (data )< _fc *height {return nil ,nil ;};_d :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_cc ,_caf :=MonochromeConverter .Convert (_d );if _caf !=nil {return nil ,_caf ;};return _cc .Base ().Data ,nil ;};func (_ddfc *NRGBA16 )Set (x ,y int ,c _f .Color ){_egeb :=y *_ddfc .BytesPerLine +x *3/2;
if _egeb +1>=len (_ddfc .Data ){return ;};_dfa :=NRGBA16Model .Convert (c ).(_f .NRGBA );_ddfc .setNRGBA (x ,y ,_egeb ,_dfa );};func (_bgfe *CMYK32 )CMYKAt (x ,y int )_f .CMYK {_afa ,_ :=ColorAtCMYK (x ,y ,_bgfe .Width ,_bgfe .Data ,_bgfe .Decode );return _afa ;
};func _fabd (_aagd CMYK ,_egb Gray ,_fffb _fa .Rectangle ){for _cefbb :=0;_cefbb < _fffb .Max .X ;_cefbb ++{for _ggcc :=0;_ggcc < _fffb .Max .Y ;_ggcc ++{_ggbb :=_ccga (_aagd .CMYKAt (_cefbb ,_ggcc ));_egb .SetGray (_cefbb ,_ggcc ,_ggbb );};};};var _ _fa .Image =&Gray16 {};
func (_fff *Gray4 )Validate ()error {if len (_fff .Data )!=_fff .Height *_fff .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _cdga (_bddc _fa .Image )(Image ,error ){if _acd ,_gebe :=_bddc .(*Gray2 );_gebe {return _acd .Copy (),nil ;};_beg :=_bddc .Bounds ();
_gcc ,_beea :=NewImage (_beg .Max .X ,_beg .Max .Y ,2,1,nil ,nil ,nil );if _beea !=nil {return nil ,_beea ;};_gbaa (_bddc ,_gcc ,_beg );return _gcc ,nil ;};func _bdeg (_dcfg _fa .Image ,_gfcb int )(_fa .Rectangle ,bool ,[]byte ){_feee :=_dcfg .Bounds ();
var (_fcg bool ;_gcfga []byte ;);switch _baaf :=_dcfg .(type ){case SMasker :_fcg =_baaf .HasAlpha ();case NRGBA ,RGBA ,*_fa .RGBA64 ,nrgba64 ,*_fa .NYCbCrA :_gcfga =make ([]byte ,_feee .Max .X *_feee .Max .Y *_gfcb );case *_fa .Paletted :var _ggcd bool ;
for _ ,_efbb :=range _baaf .Palette {_ggbbb ,_cdec ,_dda ,_eeee :=_efbb .RGBA ();if _ggbbb ==0&&_cdec ==0&&_dda ==0&&_eeee !=0{_ggcd =true ;break ;};};if _ggcd {_gcfga =make ([]byte ,_feee .Max .X *_feee .Max .Y *_gfcb );};};return _feee ,_fcg ,_gcfga ;
};func (_age *Monochrome )setIndexedBit (_dcbc int ){_age .Data [(_dcbc >>3)]|=0x80>>uint (_dcbc &7)};func _eagf (_fddd _fa .Image )(Image ,error ){if _ggef ,_adfce :=_fddd .(*Gray16 );_adfce {return _ggef .Copy (),nil ;};_gfef :=_fddd .Bounds ();_egdd ,_cfcde :=NewImage (_gfef .Max .X ,_gfef .Max .Y ,16,1,nil ,nil ,nil );
if _cfcde !=nil {return nil ,_cfcde ;};_gbaa (_fddd ,_egdd ,_gfef );return _egdd ,nil ;};func (_cgeg *NRGBA64 )setNRGBA64 (_edba int ,_agfc _f .NRGBA64 ,_dbdc int ){_cgeg .Data [_edba ]=uint8 (_agfc .R >>8);_cgeg .Data [_edba +1]=uint8 (_agfc .R &0xff);
_cgeg .Data [_edba +2]=uint8 (_agfc .G >>8);_cgeg .Data [_edba +3]=uint8 (_agfc .G &0xff);_cgeg .Data [_edba +4]=uint8 (_agfc .B >>8);_cgeg .Data [_edba +5]=uint8 (_agfc .B &0xff);if _dbdc +1< len (_cgeg .Alpha ){_cgeg .Alpha [_dbdc ]=uint8 (_agfc .A >>8);
_cgeg .Alpha [_dbdc +1]=uint8 (_agfc .A &0xff);};};func (_cggg *Gray8 )Base ()*ImageBase {return &_cggg .ImageBase };func (_gefg colorConverter )Convert (src _fa .Image )(Image ,error ){return _gefg ._bgfd (src )};func (_gcfgg *Gray2 )Base ()*ImageBase {return &_gcfgg .ImageBase };
func _cdeg (_ccafg nrgba64 ,_afe NRGBA ,_accb _fa .Rectangle ){for _dbde :=0;_dbde < _accb .Max .X ;_dbde ++{for _adbd :=0;_adbd < _accb .Max .Y ;_adbd ++{_eddb :=_ccafg .NRGBA64At (_dbde ,_adbd );_afe .SetNRGBA (_dbde ,_adbd ,_caea (_eddb ));};};};func (_bagb *Gray8 )SetGray (x ,y int ,g _f .Gray ){_abea :=y *_bagb .BytesPerLine +x ;
if _abea > len (_bagb .Data )-1{return ;};_bagb .Data [_abea ]=g .Y ;};var _ _fa .Image =&Gray4 {};func (_dgdf *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _dffd (_dgdf ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _gbdf (_eacd _fa .Image )(Image ,error ){if _ccdd ,_cbgc :=_eacd .(*Gray8 );_cbgc {return _ccdd .Copy (),nil ;};_egcd :=_eacd .Bounds ();_efde ,_bbae :=NewImage (_egcd .Max .X ,_egcd .Max .Y ,8,1,nil ,nil ,nil );if _bbae !=nil {return nil ,_bbae ;
};_gbaa (_eacd ,_efde ,_egcd );return _efde ,nil ;};func (_gbdc *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_gbdc .copy ()}};func _efd (_bfgf _fa .Image ,_agb Image ,_aaf _fa .Rectangle ){for _dcca :=0;_dcca < _aaf .Max .X ;_dcca ++{for _dcb :=0;_dcb < _aaf .Max .Y ;
_dcb ++{_fbeb :=_bfgf .At (_dcca ,_dcb );_agb .Set (_dcca ,_dcb ,_fbeb );};};};func (_bage *NRGBA64 )Base ()*ImageBase {return &_bage .ImageBase };func _adc (_ccca _f .NRGBA64 )_f .Gray {var _fceg _f .NRGBA64 ;if _ccca ==_fceg {return _f .Gray {Y :0xff};
};_afc ,_fggf ,_ebg ,_ :=_ccca .RGBA ();_bdb :=(19595*_afc +38470*_fggf +7471*_ebg +1<<15)>>24;return _f .Gray {Y :uint8 (_bdb )};};func (_efag *NRGBA32 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtNRGBA32 (x ,y ,_efag .Width ,_efag .Data ,_efag .Alpha ,_efag .Decode );
};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );
case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_cb .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func _efaf (_bgbbcc _fa .Image ,_bdaa Image ,_degb _fa .Rectangle ){if _cegc ,_gedb :=_bgbbcc .(SMasker );_gedb &&_cegc .HasAlpha (){_bdaa .(SMasker ).MakeAlpha ();};switch _cfbb :=_bgbbcc .(type ){case Gray :_debfe (_cfbb ,_bdaa .(NRGBA ),_degb );
case NRGBA :_fdfbgf (_cfbb ,_bdaa .(NRGBA ),_degb );case *_fa .NYCbCrA :_cgdda (_cfbb ,_bdaa .(NRGBA ),_degb );case CMYK :_cbge (_cfbb ,_bdaa .(NRGBA ),_degb );case RGBA :_dacf (_cfbb ,_bdaa .(NRGBA ),_degb );case nrgba64 :_cdeg (_cfbb ,_bdaa .(NRGBA ),_degb );
default:_efd (_bgbbcc ,_bdaa ,_degb );};};func (_bgda *Gray8 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray8BPC (x ,y ,_bgda .BytesPerLine ,_bgda .Data ,_bgda .Decode );};func (_eagd *NRGBA32 )setRGBA (_ccfd int ,_aaad _f .NRGBA ){_dfebe :=3*_ccfd ;
_eagd .Data [_dfebe ]=_aaad .R ;_eagd .Data [_dfebe +1]=_aaad .G ;_eagd .Data [_dfebe +2]=_aaad .B ;if _ccfd < len (_eagd .Alpha ){_eagd .Alpha [_ccfd ]=_aaad .A ;};};var _ Gray =&Gray4 {};var _adfcc [256]uint8 ;func (_dcd *Gray16 )Set (x ,y int ,c _f .Color ){_badb :=(y *_dcd .BytesPerLine /2+x )*2;
if _badb +1>=len (_dcd .Data ){return ;};_gggc :=_f .Gray16Model .Convert (c ).(_f .Gray16 );_dcd .Data [_badb ],_dcd .Data [_badb +1]=uint8 (_gggc .Y >>8),uint8 (_gggc .Y &0xff);};var _ Image =&Gray2 {};func _ed (_fd *Monochrome ,_fdd int ,_cbd []uint )(*Monochrome ,error ){_gb :=_fdd *_fd .Width ;
_ae :=_fdd *_fd .Height ;_gc :=_dfe (_gb ,_ae );for _eg ,_ge :=range _cbd {var _cbe error ;switch _ge {case 2:_cbe =_cca (_gc ,_fd );case 4:_cbe =_eeg (_gc ,_fd );case 8:_cbe =_fbc (_gc ,_fd );};if _cbe !=nil {return nil ,_cbe ;};if _eg !=len (_cbd )-1{_fd =_gc .copy ();
};};return _gc ,nil ;};func (_adee *Gray8 )ColorModel ()_f .Model {return _f .GrayModel };func _gaag (_bdcc int ,_ccgaf int )error {return _cb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_bdcc ,_ccgaf );
};func _fffa (_gbaaf ,_ebfg ,_dcdfb byte )byte {return (_gbaaf &^(_dcdfb ))|(_ebfg &_dcdfb )};func _cff (_bgc *Monochrome ,_afb int ,_dbd []byte )(_bec *Monochrome ,_dgd error ){const _cfc ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";
if _bgc ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _afb < 1||_afb > 4{return nil ,_c .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _bgc .Height <=1{return nil ,_c .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_bec =_dfe (_bgc .Width /2,_bgc .Height /2);
if _dbd ==nil {_dbd =_cbga ();};_aag :=_eaba (_bgc .BytesPerLine ,2*_bec .BytesPerLine );switch _afb {case 1:_dgd =_feb (_bgc ,_bec ,_dbd ,_aag );case 2:_dgd =_eda (_bgc ,_bec ,_dbd ,_aag );case 3:_dgd =_gdd (_bgc ,_bec ,_dbd ,_aag );case 4:_dgd =_bfe (_bgc ,_bec ,_dbd ,_aag );
};if _dgd !=nil {return nil ,_dgd ;};return _bec ,nil ;};func (_aefg *Monochrome )getBit (_cdc ,_gdac int )uint8 {return _aefg .Data [_cdc +(_gdac >>3)]>>uint (7-(_gdac &7))&1;};type colorConverter struct{_bgfd func (_gab _fa .Image )(Image ,error );};
func (_cffg *Gray2 )ColorModel ()_f .Model {return Gray2Model };func (_cabd *Monochrome )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray1BPC (x ,y ,_cabd .BytesPerLine ,_cabd .Data ,_cabd .Decode );};var _ _fa .Image =&Gray2 {};func _cggc (_dedff _fa .Image )(Image ,error ){if _gbef ,_cadb :=_dedff .(*NRGBA16 );
_cadb {return _gbef .Copy (),nil ;};_aedb :=_dedff .Bounds ();_bcdg ,_aadc :=NewImage (_aedb .Max .X ,_aedb .Max .Y ,4,3,nil ,nil ,nil );if _aadc !=nil {return nil ,_aadc ;};_efaf (_dedff ,_bcdg ,_aedb );return _bcdg ,nil ;};func InDelta (expected ,current ,delta float64 )bool {_aaef :=expected -current ;
if _aaef <=-delta ||_aaef >=delta {return false ;};return true ;};var _ Image =&NRGBA64 {};func _beeaf (_bece _f .Color )_f .Color {_fgfb :=_f .GrayModel .Convert (_bece ).(_f .Gray );return _begc (_fgfb );};func _dacf (_bgcf RGBA ,_gddc NRGBA ,_dafc _fa .Rectangle ){for _cfddf :=0;
_cfddf < _dafc .Max .X ;_cfddf ++{for _gcdf :=0;_gcdf < _dafc .Max .Y ;_gcdf ++{_edcd :=_bgcf .RGBAAt (_cfddf ,_gcdf );_gddc .SetNRGBA (_cfddf ,_gcdf ,_ggcf (_edcd ));};};};func (_bdgg *Monochrome )ColorModel ()_f .Model {return MonochromeModel (_bdgg .ModelThreshold )};
func (_ced *CMYK32 )At (x ,y int )_f .Color {_fgdf ,_ :=_ced .ColorAt (x ,y );return _fgdf };func _gdebe (_eccb *_fa .Gray )bool {for _dadb :=0;_dadb < len (_eccb .Pix );_dadb ++{if !_bfdgb (_eccb .Pix [_dadb ]){return false ;};};return true ;};func (_cfb *Monochrome )setGray (_fdae int ,_eba _f .Gray ,_adfb int ){if _eba .Y ==0{_cfb .clearBit (_adfb ,_fdae );
}else {_cfb .setGrayBit (_adfb ,_fdae );};};func _g (_ee *Monochrome ,_a int )(*Monochrome ,error ){if _ee ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _a ==1{return _ee .copy (),nil ;
};if !IsPowerOf2 (uint (_a )){return nil ,_cb .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_a );};_aa :=_bfb (_a );
return _ed (_ee ,_a ,_aa );};func (_adg *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_gge :=_fdfef (uint (factor ));if !IsPowerOf2 (uint (factor )){_gge ++;};_gbd :=make ([]int ,_gge );for _cgcd :=range _gbd {_gbd [_cgcd ]=4;};_efab ,_dae :=_eaf (_adg ,_gbd ...);
if _dae !=nil {return nil ,_dae ;};return _efab ,nil ;};func (_ggea *NRGBA32 )At (x ,y int )_f .Color {_geab ,_ :=_ggea .ColorAt (x ,y );return _geab };func (_faa *Gray2 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray2BPC (x ,y ,_faa .BytesPerLine ,_faa .Data ,_faa .Decode );
};type CMYK32 struct{ImageBase };func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_ccgd :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_ccgd .Data =make ([]byte ,height *_ccgd .BytesPerLine );};return _ccgd ;};func _cfdd (_eafa []byte ,_eabgb Image )error {_dedgd :=true ;for _bbca :=0;_bbca < len (_eafa );_bbca ++{if _eafa [_bbca ]!=0xff{_dedgd =false ;break ;};};if _dedgd {switch _fdca :=_eabgb .(type ){case *NRGBA32 :_fdca .Alpha =nil ;
case *NRGBA64 :_fdca .Alpha =nil ;default:return _cb .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_eabgb );
};};return nil ;};func _feb (_ggg ,_ccd *Monochrome ,_agf []byte ,_fbbd int )(_geg error ){var (_aae ,_dgg ,_ga ,_eeab ,_bbf ,_efc ,_bff ,_fece int ;_bgd ,_ccg uint32 ;_aeab ,_daa byte ;_fga uint16 ;);_bea :=make ([]byte ,4);_fbe :=make ([]byte ,4);for _ga =0;
_ga < _ggg .Height -1;_ga ,_eeab =_ga +2,_eeab +1{_aae =_ga *_ggg .BytesPerLine ;_dgg =_eeab *_ccd .BytesPerLine ;for _bbf ,_efc =0,0;_bbf < _fbbd ;_bbf ,_efc =_bbf +4,_efc +1{for _bff =0;_bff < 4;_bff ++{_fece =_aae +_bbf +_bff ;if _fece <=len (_ggg .Data )-1&&_fece < _aae +_ggg .BytesPerLine {_bea [_bff ]=_ggg .Data [_fece ];
}else {_bea [_bff ]=0x00;};_fece =_aae +_ggg .BytesPerLine +_bbf +_bff ;if _fece <=len (_ggg .Data )-1&&_fece < _aae +(2*_ggg .BytesPerLine ){_fbe [_bff ]=_ggg .Data [_fece ];}else {_fbe [_bff ]=0x00;};};_bgd =_b .BigEndian .Uint32 (_bea );_ccg =_b .BigEndian .Uint32 (_fbe );
_ccg |=_bgd ;_ccg |=_ccg <<1;_ccg &=0xaaaaaaaa;_bgd =_ccg |(_ccg <<7);_aeab =byte (_bgd >>24);_daa =byte ((_bgd >>8)&0xff);_fece =_dgg +_efc ;if _fece +1==len (_ccd .Data )-1||_fece +1>=_dgg +_ccd .BytesPerLine {_ccd .Data [_fece ]=_agf [_aeab ];}else {_fga =(uint16 (_agf [_aeab ])<<8)|uint16 (_agf [_daa ]);
if _geg =_ccd .setTwoBytes (_fece ,_fga );_geg !=nil {return _cb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fece );
};_efc ++;};};};return nil ;};func (_ebdd *ImageBase )copy ()ImageBase {_fafc :=*_ebdd ;_fafc .Data =make ([]byte ,len (_ebdd .Data ));copy (_fafc .Data ,_ebdd .Data );return _fafc ;};func (_acab *NRGBA32 )ColorModel ()_f .Model {return _f .NRGBAModel };
var _ _fa .Image =&Monochrome {};func (_bbc *Gray4 )SetGray (x ,y int ,g _f .Gray ){if x >=_bbc .Width ||y >=_bbc .Height {return ;};g =_begc (g );_bbc .setGray (x ,y ,g );};var _ Image =&Monochrome {};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;
};func (_bde *Gray4 )GrayAt (x ,y int )_f .Gray {_cgce ,_ :=ColorAtGray4BPC (x ,y ,_bde .BytesPerLine ,_bde .Data ,_bde .Decode );return _cgce ;};func _deg (_dedfc *Monochrome ,_bebcf ,_aacf ,_bfef ,_cdbdf int ,_fafe RasterOperator ){if _bebcf < 0{_bfef +=_bebcf ;
_bebcf =0;};_deee :=_bebcf +_bfef -_dedfc .Width ;if _deee > 0{_bfef -=_deee ;};if _aacf < 0{_cdbdf +=_aacf ;_aacf =0;};_bdffc :=_aacf +_cdbdf -_dedfc .Height ;if _bdffc > 0{_cdbdf -=_bdffc ;};if _bfef <=0||_cdbdf <=0{return ;};if (_bebcf &7)==0{_dgfc (_dedfc ,_bebcf ,_aacf ,_bfef ,_cdbdf ,_fafe );
}else {_ebfc (_dedfc ,_bebcf ,_aacf ,_bfef ,_cdbdf ,_fafe );};};func _cbga ()(_bdfg []byte ){_bdfg =make ([]byte ,256);for _cae :=0;_cae < 256;_cae ++{_ecea :=byte (_cae );_bdfg [_ecea ]=(_ecea &0x01)|((_ecea &0x04)>>1)|((_ecea &0x10)>>2)|((_ecea &0x40)>>3)|((_ecea &0x02)<<3)|((_ecea &0x08)<<2)|((_ecea &0x20)<<1)|(_ecea &0x80);
};return _bdfg ;};var _ _fa .Image =&NRGBA16 {};func (_agc *CMYK32 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtCMYK (x ,y ,_agc .Width ,_agc .Data ,_agc .Decode );};func (_gdeb *ImageBase )GetAlpha ()[]byte {return _gdeb .Alpha };func (_bafg *NRGBA64 )Validate ()error {if len (_bafg .Data )!=3*2*_bafg .Width *_bafg .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_dcfff *NRGBA32 )Base ()*ImageBase {return &_dcfff .ImageBase };func (_cede *Gray8 )Set (x ,y int ,c _f .Color ){_cbb :=y *_cede .BytesPerLine +x ;if _cbb > len (_cede .Data )-1{return ;};_cacd :=_f .GrayModel .Convert (c );_cede .Data [_cbb ]=_cacd .(_f .Gray ).Y ;
};var _ Image =&NRGBA32 {};var _ Image =&Gray16 {};var _ NRGBA =&NRGBA32 {};func (_fada *NRGBA64 )SetNRGBA64 (x ,y int ,c _f .NRGBA64 ){_becf :=(y *_fada .Width +x )*2;_gefd :=_becf *3;if _gefd +5>=len (_fada .Data ){return ;};_fada .setNRGBA64 (_gefd ,c ,_becf );
};func _bef ()(_gcg [256]uint32 ){for _ged :=0;_ged < 256;_ged ++{if _ged &0x01!=0{_gcg [_ged ]|=0xf;};if _ged &0x02!=0{_gcg [_ged ]|=0xf0;};if _ged &0x04!=0{_gcg [_ged ]|=0xf00;};if _ged &0x08!=0{_gcg [_ged ]|=0xf000;};if _ged &0x10!=0{_gcg [_ged ]|=0xf0000;
};if _ged &0x20!=0{_gcg [_ged ]|=0xf00000;};if _ged &0x40!=0{_gcg [_ged ]|=0xf000000;};if _ged &0x80!=0{_gcg [_ged ]|=0xf0000000;};};return _gcg ;};var _ NRGBA =&NRGBA16 {};func (_ecad *Gray8 )Histogram ()(_aaee [256]int ){for _gdce :=0;_gdce < len (_ecad .Data );
_gdce ++{_aaee [_ecad .Data [_gdce ]]++;};return _aaee ;};func (_bce *Gray16 )Validate ()error {if len (_bce .Data )!=_bce .Height *_bce .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_fgd *CMYK32 )Validate ()error {if len (_fgd .Data )!=4*_fgd .Width *_fgd .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func (_bafd *Gray2 )At (x ,y int )_f .Color {_eegc ,_ :=_bafd .ColorAt (x ,y );return _eegc };func _ecc (_fgb ,_bbg CMYK ,_fdfe _fa .Rectangle ){for _ded :=0;
_ded < _fdfe .Max .X ;_ded ++{for _dgf :=0;_dgf < _fdfe .Max .Y ;_dgf ++{_bbg .SetCMYK (_ded ,_dgf ,_fgb .CMYKAt (_ded ,_dgf ));};};};func _fbeff (){for _gbba :=0;_gbba < 256;_gbba ++{_adfcc [_gbba ]=uint8 (_gbba &0x1)+(uint8 (_gbba >>1)&0x1)+(uint8 (_gbba >>2)&0x1)+(uint8 (_gbba >>3)&0x1)+(uint8 (_gbba >>4)&0x1)+(uint8 (_gbba >>5)&0x1)+(uint8 (_gbba >>6)&0x1)+(uint8 (_gbba >>7)&0x1);
};};var _ Image =&Gray4 {};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func (_fcfb *Monochrome )setBit (_ega ,_gce int ){_fcfb .Data [_ega +(_gce >>3)]|=0x80>>uint (_gce &7)};func (_fdab *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_cb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _g (_fdab ,factor );};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_cfg :=y *bytesPerLine +x >>3;if _cfg >=len (data ){return _f .Gray {},_cb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cefgb :=data [_cfg ]>>uint (7-(x &7))&1;if len (decode )==2{_cefgb =uint8 (LinearInterpolate (float64 (_cefgb ),0.0,1.0,decode [0],decode [1]))&1;};return _f .Gray {Y :_cefgb *255},nil ;};func (_bebc *Gray16 )Base ()*ImageBase {return &_bebc .ImageBase };
func (_acb *Monochrome )clearBit (_edae ,_gafd int ){_acb .Data [_edae ]&=^(0x80>>uint (_gafd &7))};func (_fdeb *Gray16 )SetGray (x ,y int ,g _f .Gray ){_eggb :=(y *_fdeb .BytesPerLine /2+x )*2;if _eggb +1>=len (_fdeb .Data ){return ;};_fdeb .Data [_eggb ]=g .Y ;
_fdeb .Data [_eggb +1]=g .Y ;};func _bddg (_cgg _f .NRGBA )_f .CMYK {_bcd ,_gae ,_aaa ,_ :=_cgg .RGBA ();_eefg ,_ebgg ,_ddfe ,_gcgd :=_f .RGBToCMYK (uint8 (_bcd >>8),uint8 (_gae >>8),uint8 (_aaa >>8));return _f .CMYK {C :_eefg ,M :_ebgg ,Y :_ddfe ,K :_gcgd };
};func (_afcg *Monochrome )ResolveDecode ()error {if len (_afcg .Decode )!=2{return nil ;};if _afcg .Decode [0]==1&&_afcg .Decode [1]==0{if _bed :=_afcg .InverseData ();_bed !=nil {return _bed ;};_afcg .Decode =nil ;};return nil ;};func (_fbgea *NRGBA64 )ColorModel ()_f .Model {return _f .NRGBA64Model };
func (_edb *CMYK32 )Base ()*ImageBase {return &_edb .ImageBase };func (_afgc *NRGBA16 )SetNRGBA (x ,y int ,c _f .NRGBA ){_facb :=y *_afgc .BytesPerLine +x *3/2;if _facb +1>=len (_afgc .Data ){return ;};c =_abfb (c );_afgc .setNRGBA (x ,y ,_facb ,c );};
func _ccga (_abfc _f .CMYK )_f .Gray {_agd ,_dfg ,_badd :=_f .CMYKToRGB (_abfc .C ,_abfc .M ,_abfc .Y ,_abfc .K );_abac :=(19595*uint32 (_agd )+38470*uint32 (_dfg )+7471*uint32 (_badd )+1<<7)>>16;return _f .Gray {Y :uint8 (_abac )};};func _fdfbgf (_bdcd ,_aadf NRGBA ,_dbbf _fa .Rectangle ){for _degd :=0;
_degd < _dbbf .Max .X ;_degd ++{for _bffbb :=0;_bffbb < _dbbf .Max .Y ;_bffbb ++{_aadf .SetNRGBA (_degd ,_bffbb ,_bdcd .NRGBAAt (_degd ,_bffbb ));};};};func (_fbge *Gray2 )Validate ()error {if len (_fbge .Data )!=_fbge .Height *_fbge .BytesPerLine {return ErrInvalidImage ;
};return nil ;};var _ Image =&CMYK32 {};func _cda ()(_fbg [256]uint16 ){for _ffb :=0;_ffb < 256;_ffb ++{if _ffb &0x01!=0{_fbg [_ffb ]|=0x3;};if _ffb &0x02!=0{_fbg [_ffb ]|=0xc;};if _ffb &0x04!=0{_fbg [_ffb ]|=0x30;};if _ffb &0x08!=0{_fbg [_ffb ]|=0xc0;
};if _ffb &0x10!=0{_fbg [_ffb ]|=0x300;};if _ffb &0x20!=0{_fbg [_ffb ]|=0xc00;};if _ffb &0x40!=0{_fbg [_ffb ]|=0x3000;};if _ffb &0x80!=0{_fbg [_ffb ]|=0xc000;};};return _fbg ;};func _eda (_gfg ,_ccc *Monochrome ,_ggf []byte ,_cdd int )(_ffd error ){var (_bgf ,_eff ,_geb ,_bgdf ,_cac ,_ec ,_eef ,_dee int ;
_dgbe ,_cg ,_bcf ,_gca uint32 ;_gcf ,_dagc byte ;_fgf uint16 ;);_aff :=make ([]byte ,4);_ece :=make ([]byte ,4);for _geb =0;_geb < _gfg .Height -1;_geb ,_bgdf =_geb +2,_bgdf +1{_bgf =_geb *_gfg .BytesPerLine ;_eff =_bgdf *_ccc .BytesPerLine ;for _cac ,_ec =0,0;
_cac < _cdd ;_cac ,_ec =_cac +4,_ec +1{for _eef =0;_eef < 4;_eef ++{_dee =_bgf +_cac +_eef ;if _dee <=len (_gfg .Data )-1&&_dee < _bgf +_gfg .BytesPerLine {_aff [_eef ]=_gfg .Data [_dee ];}else {_aff [_eef ]=0x00;};_dee =_bgf +_gfg .BytesPerLine +_cac +_eef ;
if _dee <=len (_gfg .Data )-1&&_dee < _bgf +(2*_gfg .BytesPerLine ){_ece [_eef ]=_gfg .Data [_dee ];}else {_ece [_eef ]=0x00;};};_dgbe =_b .BigEndian .Uint32 (_aff );_cg =_b .BigEndian .Uint32 (_ece );_bcf =_dgbe &_cg ;_bcf |=_bcf <<1;_gca =_dgbe |_cg ;
_gca &=_gca <<1;_cg =_bcf |_gca ;_cg &=0xaaaaaaaa;_dgbe =_cg |(_cg <<7);_gcf =byte (_dgbe >>24);_dagc =byte ((_dgbe >>8)&0xff);_dee =_eff +_ec ;if _dee +1==len (_ccc .Data )-1||_dee +1>=_eff +_ccc .BytesPerLine {if _ffd =_ccc .setByte (_dee ,_ggf [_gcf ]);
_ffd !=nil {return _cb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dee );};}else {_fgf =(uint16 (_ggf [_gcf ])<<8)|uint16 (_ggf [_dagc ]);if _ffd =_ccc .setTwoBytes (_dee ,_fgf );_ffd !=nil {return _cb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dee );
};_ec ++;};};};return nil ;};type NRGBA32 struct{ImageBase };var (_df =_cda ();_acg =_bef ();_abf =_dafa (););func (_bbaf *Monochrome )Histogram ()(_dgefe [256]int ){for _ ,_adgd :=range _bbaf .Data {_dgefe [0xff]+=int (_adfcc [_bbaf .Data [_adgd ]]);};
return _dgefe ;};type CMYK interface{CMYKAt (_febb ,_bge int )_f .CMYK ;SetCMYK (_afba ,_cccg int ,_gbgf _f .CMYK );};func (_efbc *Gray16 )Histogram ()(_egfd [256]int ){for _cafe :=0;_cafe < _efbc .Width ;_cafe ++{for _cge :=0;_cge < _efbc .Height ;_cge ++{_egfd [_efbc .GrayAt (_cafe ,_cge ).Y ]++;
};};return _egfd ;};func (_bgeg *ImageBase )HasAlpha ()bool {if _bgeg .Alpha ==nil {return false ;};for _eebe :=range _bgeg .Alpha {if _bgeg .Alpha [_eebe ]!=0xff{return true ;};};return false ;};func (_cfeb *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_cfeb .copy ()}};
const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;
PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;
PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _adfa (_eafed *Monochrome ,_fedd ,_abbg ,_fdbf ,_ddcf int ,_dbed RasterOperator ,_fbcd *Monochrome ,_bfag ,_bga int )error {var (_cddbf byte ;_efef int ;_gafdc int ;_fad ,_ceef int ;
_adgdb ,_acaf int ;);_adfcg :=_fdbf >>3;_ffc :=_fdbf &7;if _ffc > 0{_cddbf =_bafb [_ffc ];};_efef =_fbcd .BytesPerLine *_bga +(_bfag >>3);_gafdc =_eafed .BytesPerLine *_abbg +(_fedd >>3);switch _dbed {case PixSrc :for _adgdb =0;_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;
_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]=_fbcd .Data [_fad ];_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],_fbcd .Data [_fad ],_cddbf );};};case PixNotSrc :for _adgdb =0;
_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]=^(_fbcd .Data [_fad ]);_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],^_fbcd .Data [_fad ],_cddbf );
};};case PixSrcOrDst :for _adgdb =0;_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]|=_fbcd .Data [_fad ];_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],_fbcd .Data [_fad ]|_eafed .Data [_ceef ],_cddbf );
};};case PixSrcAndDst :for _adgdb =0;_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]&=_fbcd .Data [_fad ];_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],_fbcd .Data [_fad ]&_eafed .Data [_ceef ],_cddbf );
};};case PixSrcXorDst :for _adgdb =0;_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]^=_fbcd .Data [_fad ];_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],_fbcd .Data [_fad ]^_eafed .Data [_ceef ],_cddbf );
};};case PixNotSrcOrDst :for _adgdb =0;_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]|=^(_fbcd .Data [_fad ]);_ceef ++;_fad ++;
};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],^(_fbcd .Data [_fad ])|_eafed .Data [_ceef ],_cddbf );};};case PixNotSrcAndDst :for _adgdb =0;_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;
for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]&=^(_fbcd .Data [_fad ]);_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],^(_fbcd .Data [_fad ])&_eafed .Data [_ceef ],_cddbf );};};case PixSrcOrNotDst :for _adgdb =0;
_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]=_fbcd .Data [_fad ]|^(_eafed .Data [_ceef ]);_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],_fbcd .Data [_fad ]|^(_eafed .Data [_ceef ]),_cddbf );
};};case PixSrcAndNotDst :for _adgdb =0;_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]=_fbcd .Data [_fad ]&^(_eafed .Data [_ceef ]);
_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],_fbcd .Data [_fad ]&^(_eafed .Data [_ceef ]),_cddbf );};};case PixNotPixSrcOrDst :for _adgdb =0;_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;
for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]=^(_fbcd .Data [_fad ]|_eafed .Data [_ceef ]);_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],^(_fbcd .Data [_fad ]|_eafed .Data [_ceef ]),_cddbf );};};case PixNotPixSrcAndDst :for _adgdb =0;
_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]=^(_fbcd .Data [_fad ]&_eafed .Data [_ceef ]);_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],^(_fbcd .Data [_fad ]&_eafed .Data [_ceef ]),_cddbf );
};};case PixNotPixSrcXorDst :for _adgdb =0;_adgdb < _ddcf ;_adgdb ++{_fad =_efef +_adgdb *_fbcd .BytesPerLine ;_ceef =_gafdc +_adgdb *_eafed .BytesPerLine ;for _acaf =0;_acaf < _adfcg ;_acaf ++{_eafed .Data [_ceef ]=^(_fbcd .Data [_fad ]^_eafed .Data [_ceef ]);
_ceef ++;_fad ++;};if _ffc > 0{_eafed .Data [_ceef ]=_fffa (_eafed .Data [_ceef ],^(_fbcd .Data [_fad ]^_eafed .Data [_ceef ]),_cddbf );};};default:_cd .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_dbed );
return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func ConverterFunc (converterFunc func (_afbe _fa .Image )(Image ,error ))ColorConverter {return colorConverter {_bgfd :converterFunc };
};func _cbge (_cfdb CMYK ,_caga NRGBA ,_bffbbf _fa .Rectangle ){for _ddag :=0;_ddag < _bffbbf .Max .X ;_ddag ++{for _aedfe :=0;_aedfe < _bffbbf .Max .Y ;_aedfe ++{_deca :=_cfdb .CMYKAt (_ddag ,_aedfe );_caga .SetNRGBA (_ddag ,_aedfe ,_ceca (_deca ));};
};};func (_fbaf *Gray8 )Bounds ()_fa .Rectangle {return _fa .Rectangle {Max :_fa .Point {X :_fbaf .Width ,Y :_fbaf .Height }};};type NRGBA interface{NRGBAAt (_aecg ,_gccb int )_f .NRGBA ;SetNRGBA (_bdec ,_bgge int ,_eagc _f .NRGBA );};func _bab (_gcde _f .Gray ,_bggf monochromeModel )_f .Gray {if _gcde .Y > uint8 (_bggf ){return _f .Gray {Y :_ca .MaxUint8 };
};return _f .Gray {};};type Gray2 struct{ImageBase };func ImgToBinary (i _fa .Image ,threshold uint8 )*_fa .Gray {switch _bbcc :=i .(type ){case *_fa .Gray :if _gdebe (_bbcc ){return _bbcc ;};return _aabb (_bbcc ,threshold );case *_fa .Gray16 :return _aggef (_bbcc ,threshold );
default:return _efcf (_bbcc ,threshold );};};func _dafa ()(_ea [256]uint64 ){for _ddf :=0;_ddf < 256;_ddf ++{if _ddf &0x01!=0{_ea [_ddf ]|=0xff;};if _ddf &0x02!=0{_ea [_ddf ]|=0xff00;};if _ddf &0x04!=0{_ea [_ddf ]|=0xff0000;};if _ddf &0x08!=0{_ea [_ddf ]|=0xff000000;
};if _ddf &0x10!=0{_ea [_ddf ]|=0xff00000000;};if _ddf &0x20!=0{_ea [_ddf ]|=0xff0000000000;};if _ddf &0x40!=0{_ea [_ddf ]|=0xff000000000000;};if _ddf &0x80!=0{_ea [_ddf ]|=0xff00000000000000;};};return _ea ;};func (_bfae *NRGBA16 )setNRGBA (_eadgg ,_bddd ,_ecge int ,_cffa _f .NRGBA ){if _eadgg *3%2==0{_bfae .Data [_ecge ]=(_cffa .R >>4)<<4|(_cffa .G >>4);
_bfae .Data [_ecge +1]=(_cffa .B >>4)<<4|(_bfae .Data [_ecge +1]&0xf);}else {_bfae .Data [_ecge ]=(_bfae .Data [_ecge ]&0xf0)|(_cffa .R >>4);_bfae .Data [_ecge +1]=(_cffa .G >>4)<<4|(_cffa .B >>4);};if _bfae .Alpha !=nil {_egbe :=_bddd *BytesPerLine (_bfae .Width ,4,1);
if _egbe < len (_bfae .Alpha ){if _eadgg %2==0{_bfae .Alpha [_egbe ]=(_cffa .A >>uint (4))<<uint (4)|(_bfae .Alpha [_ecge ]&0xf);}else {_bfae .Alpha [_egbe ]=(_bfae .Alpha [_egbe ]&0xf0)|(_cffa .A >>uint (4));};};};};func (_edeg *NRGBA64 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtNRGBA64 (x ,y ,_edeg .Width ,_edeg .Data ,_edeg .Alpha ,_edeg .Decode );
};func (_efdf *NRGBA32 )Validate ()error {if len (_efdf .Data )!=3*_efdf .Width *_efdf .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_faee *ImageBase )setEightFullBytes (_gdda int ,_bfbd uint64 )error {if _gdda +7> len (_faee .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_faee .Data [_gdda ]=byte ((_bfbd &0xff00000000000000)>>56);
_faee .Data [_gdda +1]=byte ((_bfbd &0xff000000000000)>>48);_faee .Data [_gdda +2]=byte ((_bfbd &0xff0000000000)>>40);_faee .Data [_gdda +3]=byte ((_bfbd &0xff00000000)>>32);_faee .Data [_gdda +4]=byte ((_bfbd &0xff000000)>>24);_faee .Data [_gdda +5]=byte ((_bfbd &0xff0000)>>16);
_faee .Data [_gdda +6]=byte ((_bfbd &0xff00)>>8);_faee .Data [_gdda +7]=byte (_bfbd &0xff);return nil ;};func AutoThresholdTriangle (histogram [256]int )uint8 {var _gbeb ,_deeed ,_cega ,_eedb int ;for _cfac :=0;_cfac < len (histogram );_cfac ++{if histogram [_cfac ]> 0{_gbeb =_cfac ;
break ;};};if _gbeb > 0{_gbeb --;};for _dgebg :=255;_dgebg > 0;_dgebg --{if histogram [_dgebg ]> 0{_eedb =_dgebg ;break ;};};if _eedb < 255{_eedb ++;};for _bfdc :=0;_bfdc < 256;_bfdc ++{if histogram [_bfdc ]> _deeed {_cega =_bfdc ;_deeed =histogram [_bfdc ];
};};var _eccg bool ;if (_cega -_gbeb )< (_eedb -_cega ){_eccg =true ;var _bffg int ;_ebgcg :=255;for _bffg < _ebgcg {_addb :=histogram [_bffg ];histogram [_bffg ]=histogram [_ebgcg ];histogram [_ebgcg ]=_addb ;_bffg ++;_ebgcg --;};_gbeb =255-_eedb ;_cega =255-_cega ;
};if _gbeb ==_cega {return uint8 (_gbeb );};_fcca :=float64 (histogram [_cega ]);_facd :=float64 (_gbeb -_cega );_eaa :=_ca .Sqrt (_fcca *_fcca +_facd *_facd );_fcca /=_eaa ;_facd /=_eaa ;_eaa =_fcca *float64 (_gbeb )+_facd *float64 (histogram [_gbeb ]);
_acbed :=_gbeb ;var _ddcc float64 ;for _adacf :=_gbeb +1;_adacf <=_cega ;_adacf ++{_ffce :=_fcca *float64 (_adacf )+_facd *float64 (histogram [_adacf ])-_eaa ;if _ffce > _ddcc {_acbed =_adacf ;_ddcc =_ffce ;};};_acbed --;if _eccg {var _fbea int ;_dgee :=255;
for _fbea < _dgee {_adedb :=histogram [_fbea ];histogram [_fbea ]=histogram [_dgee ];histogram [_dgee ]=_adedb ;_fbea ++;_dgee --;};return uint8 (255-_acbed );};return uint8 (_acbed );};func (_gedf *Monochrome )Validate ()error {if len (_gedf .Data )!=_gedf .Height *_gedf .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_f .NRGBA ,error ){_bbgc :=y *width +x ;_afdf :=3*_bbgc ;if _afdf +2>=len (data ){return _f .NRGBA {},_cb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dcdd :=uint8 (0xff);if alpha !=nil &&len (alpha )> _bbgc {_dcdd =alpha [_bbgc ];};_ebcc ,_bebcfe ,_gdfa :=data [_afdf ],data [_afdf +1],data [_afdf +2];if len (decode )==6{_ebcc =uint8 (uint32 (LinearInterpolate (float64 (_ebcc ),0,255,decode [0],decode [1]))&0xff);
_bebcfe =uint8 (uint32 (LinearInterpolate (float64 (_bebcfe ),0,255,decode [2],decode [3]))&0xff);_gdfa =uint8 (uint32 (LinearInterpolate (float64 (_gdfa ),0,255,decode [4],decode [5]))&0xff);};return _f .NRGBA {R :_ebcc ,G :_bebcfe ,B :_gdfa ,A :_dcdd },nil ;
};func (_cbee *monochromeThresholdConverter )Convert (img _fa .Image )(Image ,error ){if _beaa ,_bbbb :=img .(*Monochrome );_bbbb {return _beaa .Copy (),nil ;};_cdae :=img .Bounds ();_beee ,_dfbe :=NewImage (_cdae .Max .X ,_cdae .Max .Y ,1,1,nil ,nil ,nil );
if _dfbe !=nil {return nil ,_dfbe ;};_beee .(*Monochrome ).ModelThreshold =_cbee .Threshold ;for _cfcf :=0;_cfcf < _cdae .Max .X ;_cfcf ++{for _eadg :=0;_eadg < _cdae .Max .Y ;_eadg ++{_dfff :=img .At (_cfcf ,_eadg );_beee .Set (_cfcf ,_eadg ,_dfff );};
};return _beee ,nil ;};func _dfgce (_dea Gray ,_fed nrgba64 ,_fgc _fa .Rectangle ){for _dbg :=0;_dbg < _fgc .Max .X ;_dbg ++{for _bgcd :=0;_bgcd < _fgc .Max .Y ;_bgcd ++{_fbcg :=_adc (_fed .NRGBA64At (_dbg ,_bgcd ));_dea .SetGray (_dbg ,_bgcd ,_fbcg );
};};};type ColorConverter interface{Convert (_cbdd _fa .Image )(Image ,error );};type NRGBA64 struct{ImageBase };func (_efgg *Gray4 )Set (x ,y int ,c _f .Color ){if x >=_efgg .Width ||y >=_efgg .Height {return ;};_dfcec :=Gray4Model .Convert (c ).(_f .Gray );
_efgg .setGray (x ,y ,_dfcec );};func _eaba (_bedef int ,_fagae int )int {if _bedef < _fagae {return _bedef ;};return _fagae ;};func _befe (_dce _f .RGBA )_f .Gray {_fbgb :=(19595*uint32 (_dce .R )+38470*uint32 (_dce .G )+7471*uint32 (_dce .B )+1<<7)>>16;
return _f .Gray {Y :uint8 (_fbgb )};};func _bacf (_cegeb _fa .Image )(Image ,error ){if _fdcg ,_dggb :=_cegeb .(*NRGBA64 );_dggb {return _fdcg .Copy (),nil ;};_ebddg ,_eega ,_fbfed :=_bdeg (_cegeb ,2);_bfda ,_bgbg :=NewImage (_ebddg .Max .X ,_ebddg .Max .Y ,16,3,nil ,_fbfed ,nil );
if _bgbg !=nil {return nil ,_bgbg ;};_geffa (_cegeb ,_bfda ,_ebddg );if len (_fbfed )!=0&&!_eega {if _gfefd :=_cfdd (_fbfed ,_bfda );_gfefd !=nil {return nil ,_gfefd ;};};return _bfda ,nil ;};func (_gced *Gray16 )Bounds ()_fa .Rectangle {return _fa .Rectangle {Max :_fa .Point {X :_gced .Width ,Y :_gced .Height }};
};func (_baaecc *NRGBA64 )Set (x ,y int ,c _f .Color ){_dgcd :=(y *_baaecc .Width +x )*2;_fgab :=_dgcd *3;if _fgab +5>=len (_baaecc .Data ){return ;};_dgad :=_f .NRGBA64Model .Convert (c ).(_f .NRGBA64 );_baaecc .setNRGBA64 (_fgab ,_dgad ,_dgcd );};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_f .NRGBA ,error ){_cbae :=y *bytesPerLine +x *3/2;
if _cbae +1>=len (data ){return _f .NRGBA {},_gaag (x ,y );};const (_eddf =0xf;_fbgc =uint8 (0xff););_gggcg :=_fbgc ;if alpha !=nil {_acfg :=y *BytesPerLine (width ,4,1);if _acfg < len (alpha ){if x %2==0{_gggcg =(alpha [_acfg ]>>uint (4))&_eddf ;}else {_gggcg =alpha [_acfg ]&_eddf ;
};_gggcg |=_gggcg <<4;};};var _gcbg ,_egadc ,_ffcc uint8 ;if x *3%2==0{_gcbg =(data [_cbae ]>>uint (4))&_eddf ;_egadc =data [_cbae ]&_eddf ;_ffcc =(data [_cbae +1]>>uint (4))&_eddf ;}else {_gcbg =data [_cbae ]&_eddf ;_egadc =(data [_cbae +1]>>uint (4))&_eddf ;
_ffcc =data [_cbae +1]&_eddf ;};if len (decode )==6{_gcbg =uint8 (uint32 (LinearInterpolate (float64 (_gcbg ),0,15,decode [0],decode [1]))&0xf);_egadc =uint8 (uint32 (LinearInterpolate (float64 (_egadc ),0,15,decode [2],decode [3]))&0xf);_ffcc =uint8 (uint32 (LinearInterpolate (float64 (_ffcc ),0,15,decode [4],decode [5]))&0xf);
};return _f .NRGBA {R :(_gcbg <<4)|(_gcbg &0xf),G :(_egadc <<4)|(_egadc &0xf),B :(_ffcc <<4)|(_ffcc &0xf),A :_gggcg },nil ;};func (_fde *Gray4 )Bounds ()_fa .Rectangle {return _fa .Rectangle {Max :_fa .Point {X :_fde .Width ,Y :_fde .Height }};};func (_gee *Monochrome )AddPadding ()(_aga error ){if _gcff :=((_gee .Width *_gee .Height )+7)>>3;
len (_gee .Data )< _gcff {return _cb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_gee .Data ),_gcff );
};_ada :=_gee .Width %8;if _ada ==0{return nil ;};_gfbb :=_gee .Width /8;_gbgb :=_eb .NewReader (_gee .Data );_fdfb :=make ([]byte ,_gee .Height *_gee .BytesPerLine );_cde :=_eb .NewWriterMSB (_fdfb );_bbbbc :=make ([]byte ,_gfbb );var (_eag int ;_fbae uint64 ;
);for _eag =0;_eag < _gee .Height ;_eag ++{if _ ,_aga =_gbgb .Read (_bbbbc );_aga !=nil {return _aga ;};if _ ,_aga =_cde .Write (_bbbbc );_aga !=nil {return _aga ;};if _fbae ,_aga =_gbgb .ReadBits (byte (_ada ));_aga !=nil {return _aga ;};if _aga =_cde .WriteByte (byte (_fbae )<<uint (8-_ada ));
_aga !=nil {return _aga ;};};_gee .Data =_cde .Data ();return nil ;};const (_eaee shift =iota ;_abfd ;);type Gray4 struct{ImageBase };func _cdagd (_acdg _f .Color )_f .Color {_bgdc :=_f .NRGBAModel .Convert (_acdg ).(_f .NRGBA );return _abfb (_bgdc );};
func ImgToGray (i _fa .Image )*_fa .Gray {if _bcbd ,_ebce :=i .(*_fa .Gray );_ebce {return _bcbd ;};_aeag :=i .Bounds ();_eacb :=_fa .NewGray (_aeag );for _dcfe :=0;_dcfe < _aeag .Max .X ;_dcfe ++{for _gcga :=0;_gcga < _aeag .Max .Y ;_gcga ++{_ggab :=i .At (_dcfe ,_gcga );
_eacb .Set (_dcfe ,_gcga ,_ggab );};};return _eacb ;};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_adbe :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _aagde Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_aagde =&Monochrome {ImageBase :_adbe ,ModelThreshold :0x0f};case 2:_aagde =&Gray2 {ImageBase :_adbe };case 4:_aagde =&Gray4 {ImageBase :_adbe };case 8:_aagde =&Gray8 {ImageBase :_adbe };
case 16:_aagde =&Gray16 {ImageBase :_adbe };};case 3:switch bitsPerComponent {case 4:_aagde =&NRGBA16 {ImageBase :_adbe };case 8:_aagde =&NRGBA32 {ImageBase :_adbe };case 16:_aagde =&NRGBA64 {ImageBase :_adbe };};case 4:_aagde =&CMYK32 {ImageBase :_adbe };
};if _aagde ==nil {return nil ,ErrInvalidImage ;};return _aagde ,nil ;};func _abe (_fbcf _f .Gray )_f .Gray {_bbfe :=_fbcf .Y >>6;_bbfe |=_bbfe <<2;_fbcf .Y =_bbfe |_bbfe <<4;return _fbcf ;};type NRGBA16 struct{ImageBase };func _caaeg (_eggf ,_bdag uint8 )uint8 {if _eggf < _bdag {return 255;
};return 0;};func _gbaa (_ccde _fa .Image ,_gfgf Image ,_cdgc _fa .Rectangle ){switch _fgdg :=_ccde .(type ){case Gray :_dgeb (_fgdg ,_gfgf .(Gray ),_cdgc );case NRGBA :_fabf (_fgdg ,_gfgf .(Gray ),_cdgc );case CMYK :_fabd (_fgdg ,_gfgf .(Gray ),_cdgc );
case RGBA :_fegc (_fgdg ,_gfgf .(Gray ),_cdgc );default:_efd (_ccde ,_gfgf .(Image ),_cdgc );};};func _abgd (_cdce *Monochrome ,_bffb ,_acba ,_accf ,_gfc int ,_dccf RasterOperator ,_edab *Monochrome ,_cege ,_agda int )error {var (_gfcf bool ;_dfd bool ;
_bdfd int ;_bded int ;_adbg int ;_cebg bool ;_dccd byte ;_bege int ;_aee int ;_cecg int ;_gbga ,_fea int ;);_bfdde :=8-(_bffb &7);_dgce :=_agge [_bfdde ];_afd :=_cdce .BytesPerLine *_acba +(_bffb >>3);_fddg :=_edab .BytesPerLine *_agda +(_cege >>3);if _accf < _bfdde {_gfcf =true ;
_dgce &=_bafb [8-_bfdde +_accf ];};if !_gfcf {_bdfd =(_accf -_bfdde )>>3;if _bdfd > 0{_dfd =true ;_bded =_afd +1;_adbg =_fddg +1;};};_bege =(_bffb +_accf )&7;if !(_gfcf ||_bege ==0){_cebg =true ;_dccd =_bafb [_bege ];_aee =_afd +1+_bdfd ;_cecg =_fddg +1+_bdfd ;
};switch _dccf {case PixSrc :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],_edab .Data [_fddg ],_dgce );_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;
_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]=_edab .Data [_adbg +_fea ];};_bded +=_cdce .BytesPerLine ;_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],_edab .Data [_cecg ],_dccd );
_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixNotSrc :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],^_edab .Data [_fddg ],_dgce );_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;};if _dfd {for _gbga =0;
_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]=^_edab .Data [_adbg +_fea ];};_bded +=_cdce .BytesPerLine ;_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],^_edab .Data [_cecg ],_dccd );
_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixSrcOrDst :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],_edab .Data [_fddg ]|_cdce .Data [_afd ],_dgce );_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;
};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]|=_edab .Data [_adbg +_fea ];};_bded +=_cdce .BytesPerLine ;_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],_edab .Data [_cecg ]|_cdce .Data [_aee ],_dccd );
_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixSrcAndDst :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],_edab .Data [_fddg ]&_cdce .Data [_afd ],_dgce );_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;
};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]&=_edab .Data [_adbg +_fea ];};_bded +=_cdce .BytesPerLine ;_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],_edab .Data [_cecg ]&_cdce .Data [_aee ],_dccd );
_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixSrcXorDst :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],_edab .Data [_fddg ]^_cdce .Data [_afd ],_dgce );_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;
};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]^=_edab .Data [_adbg +_fea ];};_bded +=_cdce .BytesPerLine ;_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],_edab .Data [_cecg ]^_cdce .Data [_aee ],_dccd );
_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixNotSrcOrDst :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],^(_edab .Data [_fddg ])|_cdce .Data [_afd ],_dgce );_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;
};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]|=^(_edab .Data [_adbg +_fea ]);};_bded +=_cdce .BytesPerLine ;_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],^(_edab .Data [_cecg ])|_cdce .Data [_aee ],_dccd );
_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixNotSrcAndDst :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],^(_edab .Data [_fddg ])&_cdce .Data [_afd ],_dgce );_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;
};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]&=^_edab .Data [_adbg +_fea ];};_bded +=_cdce .BytesPerLine ;_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],^(_edab .Data [_cecg ])&_cdce .Data [_aee ],_dccd );
_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixSrcOrNotDst :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],_edab .Data [_fddg ]|^(_cdce .Data [_afd ]),_dgce );_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;
};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]=_edab .Data [_adbg +_fea ]|^(_cdce .Data [_bded +_fea ]);};_bded +=_cdce .BytesPerLine ;_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;
_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],_edab .Data [_cecg ]|^(_cdce .Data [_aee ]),_dccd );_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixSrcAndNotDst :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],_edab .Data [_fddg ]&^(_cdce .Data [_afd ]),_dgce );
_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]=_edab .Data [_adbg +_fea ]&^(_cdce .Data [_bded +_fea ]);};_bded +=_cdce .BytesPerLine ;
_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],_edab .Data [_cecg ]&^(_cdce .Data [_aee ]),_dccd );_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixNotPixSrcOrDst :for _gbga =0;
_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],^(_edab .Data [_fddg ]|_cdce .Data [_afd ]),_dgce );_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;
_fea ++{_cdce .Data [_bded +_fea ]=^(_edab .Data [_adbg +_fea ]|_cdce .Data [_bded +_fea ]);};_bded +=_cdce .BytesPerLine ;_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],^(_edab .Data [_cecg ]|_cdce .Data [_aee ]),_dccd );
_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixNotPixSrcAndDst :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],^(_edab .Data [_fddg ]&_cdce .Data [_afd ]),_dgce );_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;
};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]=^(_edab .Data [_adbg +_fea ]&_cdce .Data [_bded +_fea ]);};_bded +=_cdce .BytesPerLine ;_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;
_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],^(_edab .Data [_cecg ]&_cdce .Data [_aee ]),_dccd );_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};case PixNotPixSrcXorDst :for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_afd ]=_fffa (_cdce .Data [_afd ],^(_edab .Data [_fddg ]^_cdce .Data [_afd ]),_dgce );
_afd +=_cdce .BytesPerLine ;_fddg +=_edab .BytesPerLine ;};if _dfd {for _gbga =0;_gbga < _gfc ;_gbga ++{for _fea =0;_fea < _bdfd ;_fea ++{_cdce .Data [_bded +_fea ]=^(_edab .Data [_adbg +_fea ]^_cdce .Data [_bded +_fea ]);};_bded +=_cdce .BytesPerLine ;
_adbg +=_edab .BytesPerLine ;};};if _cebg {for _gbga =0;_gbga < _gfc ;_gbga ++{_cdce .Data [_aee ]=_fffa (_cdce .Data [_aee ],^(_edab .Data [_cecg ]^_cdce .Data [_aee ]),_dccd );_aee +=_cdce .BytesPerLine ;_cecg +=_edab .BytesPerLine ;};};default:_cd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_dccf );
return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _fba (_dcfd _f .NRGBA )_f .Gray {var _gdc _f .NRGBA ;if _dcfd ==_gdc {return _f .Gray {Y :0xff};
};_bbab ,_egf ,_bdff ,_ :=_dcfd .RGBA ();_dgc :=(19595*_bbab +38470*_egf +7471*_bdff +1<<15)>>24;return _f .Gray {Y :uint8 (_dgc )};};type Histogramer interface{Histogram ()[256]int ;};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_acac :=y *bytesPerLine +x >>2;
if _acac >=len (data ){return _f .Gray {},_cb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dabc :=data [_acac ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_dabc =uint8 (uint32 (LinearInterpolate (float64 (_dabc ),0,3.0,decode [0],decode [1]))&3);};return _f .Gray {Y :_dabc *85},nil ;};type shift int ;func (_efg *Monochrome )copy ()*Monochrome {_fbeba :=_dfe (_efg .Width ,_efg .Height );
_fbeba .ModelThreshold =_efg .ModelThreshold ;_fbeba .Data =make ([]byte ,len (_efg .Data ));copy (_fbeba .Data ,_efg .Data );if len (_efg .Decode )!=0{_fbeba .Decode =make ([]float64 ,len (_efg .Decode ));copy (_fbeba .Decode ,_efg .Decode );};if len (_efg .Alpha )!=0{_fbeba .Alpha =make ([]byte ,len (_efg .Alpha ));
copy (_fbeba .Alpha ,_efg .Alpha );};return _fbeba ;};func (_aega *NRGBA16 )Base ()*ImageBase {return &_aega .ImageBase };type Gray interface{GrayAt (_cacf ,_gdb int )_f .Gray ;SetGray (_fdc ,_ccab int ,_dfgc _f .Gray );};func (_baba *ImageBase )setEightBytes (_fcdb int ,_dbdb uint64 )error {_dfeb :=_baba .BytesPerLine -(_fcdb %_baba .BytesPerLine );
if _baba .BytesPerLine !=_baba .Width >>3{_dfeb --;};if _dfeb >=8{return _baba .setEightFullBytes (_fcdb ,_dbdb );};return _baba .setEightPartlyBytes (_fcdb ,_dfeb ,_dbdb );};func (_bfed *Monochrome )Base ()*ImageBase {return &_bfed .ImageBase };func (_gddg *ImageBase )getByte (_cfge int )(byte ,error ){if _cfge > len (_gddg .Data )-1||_cfge < 0{return 0,_cb .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_cfge );
};return _gddg .Data [_cfge ],nil ;};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func _geffa (_ccggd _fa .Image ,_fccb Image ,_cgbg _fa .Rectangle ){if _fgfa ,_fedcf :=_ccggd .(SMasker );
_fedcf &&_fgfa .HasAlpha (){_fccb .(SMasker ).MakeAlpha ();};_efd (_ccggd ,_fccb ,_cgbg );};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_f .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_cb .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func _bfeg (_gaa _f .NRGBA )_f .Gray {_gde ,_fee ,_ebd ,_ :=_gaa .RGBA ();_ddbc :=(19595*_gde +38470*_fee +7471*_ebd +1<<15)>>24;return _f .Gray {Y :uint8 (_ddbc )};};func (_edee *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_edee .ImageBase .copy (),ModelThreshold :_edee .ModelThreshold };
};func _dfe (_cbc ,_caa int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_cbc ,_caa ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};func (_bdecc *NRGBA16 )NRGBAAt (x ,y int )_f .NRGBA {_dgbg ,_ :=ColorAtNRGBA16 (x ,y ,_bdecc .Width ,_bdecc .BytesPerLine ,_bdecc .Data ,_bdecc .Alpha ,_bdecc .Decode );
return _dgbg ;};func _begc (_ccee _f .Gray )_f .Gray {_ccee .Y >>=4;_ccee .Y |=_ccee .Y <<4;return _ccee };func (_ffe *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_ffe .copy ()}};type monochromeThresholdConverter struct{Threshold uint8 ;};func (_fffc *Gray8 )Validate ()error {if len (_fffc .Data )!=_fffc .Height *_fffc .BytesPerLine {return ErrInvalidImage ;
};return nil ;};var _ Image =&NRGBA16 {};func (_agbg *NRGBA16 )Validate ()error {if len (_agbg .Data )!=3*_agbg .Width *_agbg .Height /2{return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ Gray =&Gray8 {};func _fec (_fg ,_cfa int ,_dde []byte )*Monochrome {_fbd :=_dfe (_fg ,_cfa );_fbd .Data =_dde ;return _fbd ;};func _dgfc (_bbfa *Monochrome ,_eddg ,_dfdd int ,_ccdc ,_adede int ,_cgdbc RasterOperator ){var (_eeada int ;
_egge byte ;_debd ,_eagg int ;_geea int ;);_fgca :=_ccdc >>3;_dfea :=_ccdc &7;if _dfea > 0{_egge =_bafb [_dfea ];};_eeada =_bbfa .BytesPerLine *_dfdd +(_eddg >>3);switch _cgdbc {case PixClr :for _debd =0;_debd < _adede ;_debd ++{_geea =_eeada +_debd *_bbfa .BytesPerLine ;
for _eagg =0;_eagg < _fgca ;_eagg ++{_bbfa .Data [_geea ]=0x0;_geea ++;};if _dfea > 0{_bbfa .Data [_geea ]=_fffa (_bbfa .Data [_geea ],0x0,_egge );};};case PixSet :for _debd =0;_debd < _adede ;_debd ++{_geea =_eeada +_debd *_bbfa .BytesPerLine ;for _eagg =0;
_eagg < _fgca ;_eagg ++{_bbfa .Data [_geea ]=0xff;_geea ++;};if _dfea > 0{_bbfa .Data [_geea ]=_fffa (_bbfa .Data [_geea ],0xff,_egge );};};case PixNotDst :for _debd =0;_debd < _adede ;_debd ++{_geea =_eeada +_debd *_bbfa .BytesPerLine ;for _eagg =0;_eagg < _fgca ;
_eagg ++{_bbfa .Data [_geea ]=^_bbfa .Data [_geea ];_geea ++;};if _dfea > 0{_bbfa .Data [_geea ]=_fffa (_bbfa .Data [_geea ],^_bbfa .Data [_geea ],_egge );};};};};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_f .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_cb .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func GrayHistogram (g Gray )(_acada [256]int ){switch _gdcf :=g .(type ){case Histogramer :return _gdcf .Histogram ();case _fa .Image :_gdee :=_gdcf .Bounds ();for _bacc :=0;_bacc < _gdee .Max .X ;_bacc ++{for _gbcb :=0;_gbcb < _gdee .Max .Y ;_gbcb ++{_acada [g .GrayAt (_bacc ,_gbcb ).Y ]++;
};};return _acada ;default:return [256]int {};};};func (_cgd *Monochrome )SetGray (x ,y int ,g _f .Gray ){_fdfbg :=y *_cgd .BytesPerLine +x >>3;if _fdfbg > len (_cgd .Data )-1{return ;};g =_bab (g ,monochromeModel (_cgd .ModelThreshold ));_cgd .setGray (x ,g ,_fdfbg );
};func _efcf (_fdaed _fa .Image ,_gafg uint8 )*_fa .Gray {_bagab :=_fdaed .Bounds ();_fegcd :=_fa .NewGray (_bagab );var (_gfebg _f .Color ;_egbc _f .Gray ;);for _cbad :=0;_cbad < _bagab .Max .X ;_cbad ++{for _gdff :=0;_gdff < _bagab .Max .Y ;_gdff ++{_gfebg =_fdaed .At (_cbad ,_gdff );
_fegcd .Set (_cbad ,_gdff ,_gfebg );_egbc =_fegcd .GrayAt (_cbad ,_gdff );_fegcd .SetGray (_cbad ,_gdff ,_f .Gray {Y :_caaeg (_egbc .Y ,_gafg )});};};return _fegcd ;};func _abfb (_cgaa _f .NRGBA )_f .NRGBA {_cgaa .R =_cgaa .R >>4|(_cgaa .R >>4)<<4;_cgaa .G =_cgaa .G >>4|(_cgaa .G >>4)<<4;
_cgaa .B =_cgaa .B >>4|(_cgaa .B >>4)<<4;return _cgaa ;};func (_cdcb *Gray4 )Base ()*ImageBase {return &_cdcb .ImageBase };func (_cgdd *NRGBA32 )NRGBAAt (x ,y int )_f .NRGBA {_abdc ,_ :=ColorAtNRGBA32 (x ,y ,_cgdd .Width ,_cgdd .Data ,_cgdd .Alpha ,_cgdd .Decode );
return _abdc ;};func _fegc (_baaec RGBA ,_bacg Gray ,_cbed _fa .Rectangle ){for _geef :=0;_geef < _cbed .Max .X ;_geef ++{for _dccg :=0;_dccg < _cbed .Max .Y ;_dccg ++{_gdde :=_befe (_baaec .RGBAAt (_geef ,_dccg ));_bacg .SetGray (_geef ,_dccg ,_gdde );
};};};func (_agfcb *NRGBA64 )Bounds ()_fa .Rectangle {return _fa .Rectangle {Max :_fa .Point {X :_agfcb .Width ,Y :_agfcb .Height }};};var _ Image =&Gray8 {};func (_deab *NRGBA32 )SetNRGBA (x ,y int ,c _f .NRGBA ){_gaad :=y *_deab .Width +x ;_bbgfb :=3*_gaad ;
if _bbgfb +2>=len (_deab .Data ){return ;};_deab .setRGBA (_gaad ,c );};func (_ebdf *ImageBase )setByte (_dffa int ,_cad byte )error {if _dffa > len (_ebdf .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ebdf .Data [_dffa ]=_cad ;return nil ;};func (_fgcg *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_fgcg .copy ()}};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_f .NRGBA64 ,error ){_fcbcb :=(y *width +x )*2;_adad :=_fcbcb *3;
if _adad +5>=len (data ){return _f .NRGBA64 {},_cb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _agcg =0xffff;_faeg :=uint16 (_agcg );if alpha !=nil &&len (alpha )> _fcbcb +1{_faeg =uint16 (alpha [_fcbcb ])<<8|uint16 (alpha [_fcbcb +1]);};_cdbdb :=uint16 (data [_adad ])<<8|uint16 (data [_adad +1]);_abgf :=uint16 (data [_adad +2])<<8|uint16 (data [_adad +3]);
_cdecf :=uint16 (data [_adad +4])<<8|uint16 (data [_adad +5]);if len (decode )==6{_cdbdb =uint16 (uint64 (LinearInterpolate (float64 (_cdbdb ),0,65535,decode [0],decode [1]))&_agcg );_abgf =uint16 (uint64 (LinearInterpolate (float64 (_abgf ),0,65535,decode [2],decode [3]))&_agcg );
_cdecf =uint16 (uint64 (LinearInterpolate (float64 (_cdecf ),0,65535,decode [4],decode [5]))&_agcg );};return _f .NRGBA64 {R :_cdbdb ,G :_abgf ,B :_cdecf ,A :_faeg },nil ;};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_bfaf :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _bfaf ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_geed :=width *colorComponents *bitsPerComponent ;_adac :=_bfaf *8;_dbe :=8-(_adac -_geed );_edc :=_eb .NewReader (data );_eeff :=_bfaf -1;_affg :=make ([]byte ,_eeff );_dcdf :=make ([]byte ,height *_bfaf );
_bggfa :=_eb .NewWriterMSB (_dcdf );var _egbf uint64 ;var _aaec error ;for _gbee :=0;_gbee < height ;_gbee ++{_ ,_aaec =_edc .Read (_affg );if _aaec !=nil {return nil ,_aaec ;};_ ,_aaec =_bggfa .Write (_affg );if _aaec !=nil {return nil ,_aaec ;};_egbf ,_aaec =_edc .ReadBits (byte (_dbe ));
if _aaec !=nil {return nil ,_aaec ;};_ ,_aaec =_bggfa .WriteBits (_egbf ,_dbe );if _aaec !=nil {return nil ,_aaec ;};_bggfa .FinishByte ();};return _dcdf ,nil ;};func (_bdfb *Gray4 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray4BPC (x ,y ,_bdfb .BytesPerLine ,_bdfb .Data ,_bdfb .Decode );
};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _ca .Abs (xmax -xmin )< 0.000001{return ymin ;};_fge :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _fge ;};func (_bbafb *NRGBA32 )Set (x ,y int ,c _f .Color ){_ebgc :=y *_bbafb .Width +x ;
_bcdgg :=3*_ebgc ;if _bcdgg +2>=len (_bbafb .Data ){return ;};_babaf :=_f .NRGBAModel .Convert (c ).(_f .NRGBA );_bbafb .setRGBA (_ebgc ,_babaf );};func (_acgc *Gray2 )GrayAt (x ,y int )_f .Gray {_baeg ,_ :=ColorAtGray2BPC (x ,y ,_acgc .BytesPerLine ,_acgc .Data ,_acgc .Decode );
return _baeg ;};func (_aefge *NRGBA32 )Bounds ()_fa .Rectangle {return _fa .Rectangle {Max :_fa .Point {X :_aefge .Width ,Y :_aefge .Height }};};func (_aeb *Monochrome )GrayAt (x ,y int )_f .Gray {_cga ,_ :=ColorAtGray1BPC (x ,y ,_aeb .BytesPerLine ,_aeb .Data ,_aeb .Decode );
return _cga ;};func (_ffda *ImageBase )setTwoBytes (_bdgf int ,_geba uint16 )error {if _bdgf +1> len (_ffda .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ffda .Data [_bdgf ]=byte ((_geba &0xff00)>>8);
_ffda .Data [_bdgf +1]=byte (_geba &0xff);return nil ;};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _dffd (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _gdd (_eab ,_gaf *Monochrome ,_daaa []byte ,_dcc int )(_ccdf error ){var (_ecb ,_cbdf ,_ebf ,_ffbc ,_gga ,_eec ,_dec ,_fbde int ;
_dge ,_gbg ,_fgg ,_fca uint32 ;_bgb ,_bbe byte ;_def uint16 ;);_adb :=make ([]byte ,4);_ggb :=make ([]byte ,4);for _ebf =0;_ebf < _eab .Height -1;_ebf ,_ffbc =_ebf +2,_ffbc +1{_ecb =_ebf *_eab .BytesPerLine ;_cbdf =_ffbc *_gaf .BytesPerLine ;for _gga ,_eec =0,0;
_gga < _dcc ;_gga ,_eec =_gga +4,_eec +1{for _dec =0;_dec < 4;_dec ++{_fbde =_ecb +_gga +_dec ;if _fbde <=len (_eab .Data )-1&&_fbde < _ecb +_eab .BytesPerLine {_adb [_dec ]=_eab .Data [_fbde ];}else {_adb [_dec ]=0x00;};_fbde =_ecb +_eab .BytesPerLine +_gga +_dec ;
if _fbde <=len (_eab .Data )-1&&_fbde < _ecb +(2*_eab .BytesPerLine ){_ggb [_dec ]=_eab .Data [_fbde ];}else {_ggb [_dec ]=0x00;};};_dge =_b .BigEndian .Uint32 (_adb );_gbg =_b .BigEndian .Uint32 (_ggb );_fgg =_dge &_gbg ;_fgg |=_fgg <<1;_fca =_dge |_gbg ;
_fca &=_fca <<1;_gbg =_fgg &_fca ;_gbg &=0xaaaaaaaa;_dge =_gbg |(_gbg <<7);_bgb =byte (_dge >>24);_bbe =byte ((_dge >>8)&0xff);_fbde =_cbdf +_eec ;if _fbde +1==len (_gaf .Data )-1||_fbde +1>=_cbdf +_gaf .BytesPerLine {if _ccdf =_gaf .setByte (_fbde ,_daaa [_bgb ]);
_ccdf !=nil {return _cb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fbde );};}else {_def =(uint16 (_daaa [_bgb ])<<8)|uint16 (_daaa [_bbe ]);if _ccdf =_gaf .setTwoBytes (_fbde ,_def );_ccdf !=nil {return _cb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fbde );
};_eec ++;};};};return nil ;};func (_deb *CMYK32 )SetCMYK (x ,y int ,c _f .CMYK ){_dfce :=4*(y *_deb .Width +x );if _dfce +3>=len (_deb .Data ){return ;};_deb .Data [_dfce ]=c .C ;_deb .Data [_dfce +1]=c .M ;_deb .Data [_dfce +2]=c .Y ;_deb .Data [_dfce +3]=c .K ;
};func _efa (_aca _f .Gray )_f .NRGBA {return _f .NRGBA {R :_aca .Y ,G :_aca .Y ,B :_aca .Y ,A :0xff}};func _bgbbe (_aeg *Monochrome ,_aad ,_aedf ,_fggbb ,_bceb int ,_aac RasterOperator ,_adge *Monochrome ,_cfe ,_gdcg int )error {var (_dedd bool ;_cgcgc bool ;
_cbce byte ;_bbbca int ;_ebgee int ;_gbbb int ;_begb int ;_gfec bool ;_fcfa int ;_aggc int ;_egfa int ;_gddd bool ;_ecbf byte ;_acbg int ;_ddea int ;_cdbd int ;_edaf byte ;_fddc int ;_fgcf int ;_gegb uint ;_fbcde uint ;_bafdc byte ;_gbdfb shift ;_caae bool ;
_dbca bool ;_abad ,_bgdae int ;);if _cfe &7!=0{_fgcf =8-(_cfe &7);};if _aad &7!=0{_ebgee =8-(_aad &7);};if _fgcf ==0&&_ebgee ==0{_bafdc =_agge [0];}else {if _ebgee > _fgcf {_gegb =uint (_ebgee -_fgcf );}else {_gegb =uint (8-(_fgcf -_ebgee ));};_fbcde =8-_gegb ;
_bafdc =_agge [_gegb ];};if (_aad &7)!=0{_dedd =true ;_bbbca =8-(_aad &7);_cbce =_agge [_bbbca ];_gbbb =_aeg .BytesPerLine *_aedf +(_aad >>3);_begb =_adge .BytesPerLine *_gdcg +(_cfe >>3);_fddc =8-(_cfe &7);if _bbbca > _fddc {_gbdfb =_eaee ;if _fggbb >=_fgcf {_caae =true ;
};}else {_gbdfb =_abfd ;};};if _fggbb < _bbbca {_cgcgc =true ;_cbce &=_bafb [8-_bbbca +_fggbb ];};if !_cgcgc {_fcfa =(_fggbb -_bbbca )>>3;if _fcfa !=0{_gfec =true ;_aggc =_aeg .BytesPerLine *_aedf +((_aad +_ebgee )>>3);_egfa =_adge .BytesPerLine *_gdcg +((_cfe +_ebgee )>>3);
};};_acbg =(_aad +_fggbb )&7;if !(_cgcgc ||_acbg ==0){_gddd =true ;_ecbf =_bafb [_acbg ];_ddea =_aeg .BytesPerLine *_aedf +((_aad +_ebgee )>>3)+_fcfa ;_cdbd =_adge .BytesPerLine *_gdcg +((_cfe +_ebgee )>>3)+_fcfa ;if _acbg > int (_fbcde ){_dbca =true ;
};};switch _aac {case PixSrc :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};
_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],_edaf ,_cbce );_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );
_aeg .Data [_aggc +_bgdae ]=_edaf ;};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};if _gddd {for _abad =0;_abad < _bceb ;_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );
};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],_edaf ,_ecbf );_ddea +=_aeg .BytesPerLine ;_cdbd +=_adge .BytesPerLine ;};};case PixNotSrc :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );
};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],^_edaf ,_cbce );_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );
_aeg .Data [_aggc +_bgdae ]=^_edaf ;};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};if _gddd {for _abad =0;_abad < _bceb ;_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );
};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],^_edaf ,_ecbf );_ddea +=_aeg .BytesPerLine ;_cdbd +=_adge .BytesPerLine ;};};case PixSrcOrDst :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );
};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],_edaf |_aeg .Data [_gbbb ],_cbce );_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;
_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );_aeg .Data [_aggc +_bgdae ]|=_edaf ;};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};if _gddd {for _abad =0;_abad < _bceb ;
_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],_edaf |_aeg .Data [_ddea ],_ecbf );_ddea +=_aeg .BytesPerLine ;_cdbd +=_adge .BytesPerLine ;
};};case PixSrcAndDst :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],_edaf &_aeg .Data [_gbbb ],_cbce );
_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );_aeg .Data [_aggc +_bgdae ]&=_edaf ;
};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};if _gddd {for _abad =0;_abad < _bceb ;_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],_edaf &_aeg .Data [_ddea ],_ecbf );
_ddea +=_aeg .BytesPerLine ;_cdbd +=_adge .BytesPerLine ;};};case PixSrcXorDst :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );
};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],_edaf ^_aeg .Data [_gbbb ],_cbce );_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;
_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );_aeg .Data [_aggc +_bgdae ]^=_edaf ;};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};if _gddd {for _abad =0;_abad < _bceb ;
_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],_edaf ^_aeg .Data [_ddea ],_ecbf );_ddea +=_aeg .BytesPerLine ;_cdbd +=_adge .BytesPerLine ;
};};case PixNotSrcOrDst :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],^_edaf |_aeg .Data [_gbbb ],_cbce );
_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );_aeg .Data [_aggc +_bgdae ]|=^_edaf ;
};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};if _gddd {for _abad =0;_abad < _bceb ;_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],^_edaf |_aeg .Data [_ddea ],_ecbf );
_ddea +=_aeg .BytesPerLine ;_cdbd +=_adge .BytesPerLine ;};};case PixNotSrcAndDst :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );
};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],^_edaf &_aeg .Data [_gbbb ],_cbce );_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;
_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );_aeg .Data [_aggc +_bgdae ]&=^_edaf ;};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};if _gddd {for _abad =0;_abad < _bceb ;
_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],^_edaf &_aeg .Data [_ddea ],_ecbf );_ddea +=_aeg .BytesPerLine ;_cdbd +=_adge .BytesPerLine ;
};};case PixSrcOrNotDst :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],_edaf |^_aeg .Data [_gbbb ],_cbce );
_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );_aeg .Data [_aggc +_bgdae ]=_edaf |^_aeg .Data [_aggc +_bgdae ];
};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};if _gddd {for _abad =0;_abad < _bceb ;_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],_edaf |^_aeg .Data [_ddea ],_ecbf );
_ddea +=_aeg .BytesPerLine ;_cdbd +=_adge .BytesPerLine ;};};case PixSrcAndNotDst :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );
};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],_edaf &^_aeg .Data [_gbbb ],_cbce );_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;
_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );_aeg .Data [_aggc +_bgdae ]=_edaf &^_aeg .Data [_aggc +_bgdae ];};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};
if _gddd {for _abad =0;_abad < _bceb ;_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],_edaf &^_aeg .Data [_ddea ],_ecbf );_ddea +=_aeg .BytesPerLine ;
_cdbd +=_adge .BytesPerLine ;};};case PixNotPixSrcOrDst :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;
};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],^(_edaf |_aeg .Data [_gbbb ]),_cbce );_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );
_aeg .Data [_aggc +_bgdae ]=^(_edaf |_aeg .Data [_aggc +_bgdae ]);};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};if _gddd {for _abad =0;_abad < _bceb ;_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );
};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],^(_edaf |_aeg .Data [_ddea ]),_ecbf );_ddea +=_aeg .BytesPerLine ;_cdbd +=_adge .BytesPerLine ;};};case PixNotPixSrcAndDst :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;
if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],^(_edaf &_aeg .Data [_gbbb ]),_cbce );_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;
};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );_aeg .Data [_aggc +_bgdae ]=^(_edaf &_aeg .Data [_aggc +_bgdae ]);
};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};};if _gddd {for _abad =0;_abad < _bceb ;_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],^(_edaf &_aeg .Data [_ddea ]),_ecbf );
_ddea +=_aeg .BytesPerLine ;_cdbd +=_adge .BytesPerLine ;};};case PixNotPixSrcXorDst :if _dedd {for _abad =0;_abad < _bceb ;_abad ++{if _gbdfb ==_eaee {_edaf =_adge .Data [_begb ]<<_gegb ;if _caae {_edaf =_fffa (_edaf ,_adge .Data [_begb +1]>>_fbcde ,_bafdc );
};}else {_edaf =_adge .Data [_begb ]>>_fbcde ;};_aeg .Data [_gbbb ]=_fffa (_aeg .Data [_gbbb ],^(_edaf ^_aeg .Data [_gbbb ]),_cbce );_gbbb +=_aeg .BytesPerLine ;_begb +=_adge .BytesPerLine ;};};if _gfec {for _abad =0;_abad < _bceb ;_abad ++{for _bgdae =0;
_bgdae < _fcfa ;_bgdae ++{_edaf =_fffa (_adge .Data [_egfa +_bgdae ]<<_gegb ,_adge .Data [_egfa +_bgdae +1]>>_fbcde ,_bafdc );_aeg .Data [_aggc +_bgdae ]=^(_edaf ^_aeg .Data [_aggc +_bgdae ]);};_aggc +=_aeg .BytesPerLine ;_egfa +=_adge .BytesPerLine ;};
};if _gddd {for _abad =0;_abad < _bceb ;_abad ++{_edaf =_adge .Data [_cdbd ]<<_gegb ;if _dbca {_edaf =_fffa (_edaf ,_adge .Data [_cdbd +1]>>_fbcde ,_bafdc );};_aeg .Data [_ddea ]=_fffa (_aeg .Data [_ddea ],^(_edaf ^_aeg .Data [_ddea ]),_ecbf );_ddea +=_aeg .BytesPerLine ;
_cdbd +=_adge .BytesPerLine ;};};default:_cd .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_aac );return _c .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_afaa *Monochrome )InverseData ()error {return _afaa .RasterOperation (0,0,_afaa .Width ,_afaa .Height ,PixNotDst ,nil ,0,0);};func (_dgaf *Monochrome )IsUnpadded ()bool {return (_dgaf .Width *_dgaf .Height )==len (_dgaf .Data )};
func (_befeg *Gray4 )setGray (_ddc int ,_efbg int ,_fdfd _f .Gray ){_cdcbb :=_efbg *_befeg .BytesPerLine ;_acda :=_cdcbb +(_ddc >>1);if _acda >=len (_befeg .Data ){return ;};_feg :=_fdfd .Y >>4;_befeg .Data [_acda ]=(_befeg .Data [_acda ]&(^(0xf0>>uint (4*(_ddc &1)))))|(_feg <<uint (4-4*(_ddc &1)));
};func _debfe (_bbdge Gray ,_fecac NRGBA ,_ccfdd _fa .Rectangle ){for _aacd :=0;_aacd < _ccfdd .Max .X ;_aacd ++{for _beaf :=0;_beaf < _ccfdd .Max .Y ;_beaf ++{_dbcg :=_bbdge .GrayAt (_aacd ,_beaf );_fecac .SetNRGBA (_aacd ,_beaf ,_efa (_dbcg ));};};};
func (_ffbg *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _fbfe bool ;_bccb :=scale ;if scale < 1{_bccb =1/scale ;_fbfe =true ;};_deea :=NextPowerOf2 (uint (_bccb ));if InDelta (float64 (_deea ),_bccb ,0.001){if _fbfe {return _ffbg .ReduceBinary (_bccb );
};return _ffbg .ExpandBinary (int (_deea ));};_aded :=int (_ca .RoundToEven (float64 (_ffbg .Width )*scale ));_ceb :=int (_ca .RoundToEven (float64 (_ffbg .Height )*scale ));return _ffbg .ScaleLow (_aded ,_ceb );};func _dgef (_acae _fa .Image )(Image ,error ){if _cfad ,_bcfa :=_acae .(*Monochrome );
_bcfa {return _cfad ,nil ;};_dbc :=_acae .Bounds ();var _gda Gray ;switch _cacc :=_acae .(type ){case Gray :_gda =_cacc ;case NRGBA :_gda =&Gray8 {ImageBase :NewImageBase (_dbc .Max .X ,_dbc .Max .Y ,8,1,nil ,nil ,nil )};_cfd (_gda ,_cacc ,_dbc );case nrgba64 :_gda =&Gray8 {ImageBase :NewImageBase (_dbc .Max .X ,_dbc .Max .Y ,8,1,nil ,nil ,nil )};
_dfgce (_gda ,_cacc ,_dbc );default:_bee ,_eefa :=GrayConverter .Convert (_acae );if _eefa !=nil {return nil ,_eefa ;};_gda =_bee .(Gray );};_fgbb ,_badg :=NewImage (_dbc .Max .X ,_dbc .Max .Y ,1,1,nil ,nil ,nil );if _badg !=nil {return nil ,_badg ;};_eed :=_fgbb .(*Monochrome );
_bbdg :=AutoThresholdTriangle (GrayHistogram (_gda ));for _fggb :=0;_fggb < _dbc .Max .X ;_fggb ++{for _bdbd :=0;_bdbd < _dbc .Max .Y ;_bdbd ++{_dga :=_bab (_gda .GrayAt (_fggb ,_bdbd ),monochromeModel (_bbdg ));_eed .SetGray (_fggb ,_bdbd ,_dga );};};
return _fgbb ,nil ;};func (_gag *Monochrome )At (x ,y int )_f .Color {_ebge ,_ :=_gag .ColorAt (x ,y );return _ebge };func (_cfaf *Monochrome )Set (x ,y int ,c _f .Color ){_eeaba :=y *_cfaf .BytesPerLine +x >>3;if _eeaba > len (_cfaf .Data )-1{return ;
};_ebc :=_cfaf .ColorModel ().Convert (c ).(_f .Gray );_cfaf .setGray (x ,_ebc ,_eeaba );};func _bfb (_gbe int )[]uint {var _baf []uint ;_cbea :=_gbe ;_ggc :=_cbea /8;if _ggc !=0{for _bdd :=0;_bdd < _ggc ;_bdd ++{_baf =append (_baf ,8);};_bca :=_cbea %8;
_cbea =0;if _bca !=0{_cbea =_bca ;};};_ede :=_cbea /4;if _ede !=0{for _ffba :=0;_ffba < _ede ;_ffba ++{_baf =append (_baf ,4);};_bcb :=_cbea %4;_cbea =0;if _bcb !=0{_cbea =_bcb ;};};_ag :=_cbea /2;if _ag !=0{for _afg :=0;_afg < _ag ;_afg ++{_baf =append (_baf ,2);
};};return _baf ;};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_fdfef (n )+1);};func (_gaeb *ImageBase )setEightPartlyBytes (_eacg ,_gabd int ,_fgbe uint64 )(_febad error ){var (_adbeg byte ;_bbgb int ;);for _ccgg :=1;_ccgg <=_gabd ;
_ccgg ++{_bbgb =64-_ccgg *8;_adbeg =byte (_fgbe >>uint (_bbgb )&0xff);if _febad =_gaeb .setByte (_eacg +_ccgg -1,_adbeg );_febad !=nil {return _febad ;};};_efba :=_gaeb .BytesPerLine *8-_gaeb .Width ;if _efba ==0{return nil ;};_bbgb -=8;_adbeg =byte (_fgbe >>uint (_bbgb )&0xff)<<uint (_efba );
if _febad =_gaeb .setByte (_eacg +_gabd ,_adbeg );_febad !=nil {return _febad ;};return nil ;};func _fdfef (_fedc uint )uint {var _befc uint ;for _fedc !=0{_fedc >>=1;_befc ++;};return _befc -1;};func (_ccfc *Gray2 )Set (x ,y int ,c _f .Color ){if x >=_ccfc .Width ||y >=_ccfc .Height {return ;
};_ffbce :=Gray2Model .Convert (c ).(_f .Gray );_cdg :=y *_ccfc .BytesPerLine ;_acgg :=_cdg +(x >>2);_cfga :=_ffbce .Y >>6;_ccfc .Data [_acgg ]=(_ccfc .Data [_acgg ]&(^(0xc0>>uint (2*((x )&3)))))|(_cfga <<uint (6-2*(x &3)));};func (_agfg *NRGBA16 )Bounds ()_fa .Rectangle {return _fa .Rectangle {Max :_fa .Point {X :_agfg .Width ,Y :_agfg .Height }};
};func (_bbbe *ImageBase )Pix ()[]byte {return _bbbe .Data };func (_bagd *NRGBA64 )NRGBA64At (x ,y int )_f .NRGBA64 {_gad ,_ :=ColorAtNRGBA64 (x ,y ,_bagd .Width ,_bagd .Data ,_bagd .Alpha ,_bagd .Decode );return _gad ;};var _ _fa .Image =&Gray8 {};var (_bafb =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};
_agge =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_fbdc *ImageBase )newAlpha (){_eeadb :=BytesPerLine (_fbdc .Width ,_fbdc .BitsPerComponent ,1);_fbdc .Alpha =make ([]byte ,_fbdc .Height *_eeadb );};func _fbc (_gf ,_fbb *Monochrome )(_fdg error ){_fcf :=_fbb .BytesPerLine ;
_fbf :=_gf .BytesPerLine ;var _gfb ,_fae ,_egc ,_geff ,_egg int ;for _egc =0;_egc < _fbb .Height ;_egc ++{_gfb =_egc *_fcf ;_fae =8*_egc *_fbf ;for _geff =0;_geff < _fcf ;_geff ++{if _fdg =_gf .setEightBytes (_fae +_geff *8,_abf [_fbb .Data [_gfb +_geff ]]);
_fdg !=nil {return _fdg ;};};for _egg =1;_egg < 8;_egg ++{for _geff =0;_geff < _fbf ;_geff ++{if _fdg =_gf .setByte (_fae +_egg *_fbf +_geff ,_gf .Data [_fae +_geff ]);_fdg !=nil {return _fdg ;};};};};return nil ;};func IsGrayImgBlackAndWhite (i *_fa .Gray )bool {return _gdebe (i )};
func (_ddga *Gray16 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray16BPC (x ,y ,_ddga .BytesPerLine ,_ddga .Data ,_ddga .Decode );};func _eeg (_af ,_fb *Monochrome )(_bd error ){_ebe :=_fb .BytesPerLine ;_fda :=_af .BytesPerLine ;_cce :=_fb .BytesPerLine *4-_af .BytesPerLine ;
var (_da ,_ac byte ;_bc uint32 ;_ff ,_dag ,_ba ,_bbb ,_bdf ,_gbb ,_fce int ;);for _ba =0;_ba < _fb .Height ;_ba ++{_ff =_ba *_ebe ;_dag =4*_ba *_fda ;for _bbb =0;_bbb < _ebe ;_bbb ++{_da =_fb .Data [_ff +_bbb ];_bc =_acg [_da ];_gbb =_dag +_bbb *4;if _cce !=0&&(_bbb +1)*4> _af .BytesPerLine {for _bdf =_cce ;
_bdf > 0;_bdf --{_ac =byte ((_bc >>uint (_bdf *8))&0xff);_fce =_gbb +(_cce -_bdf );if _bd =_af .setByte (_fce ,_ac );_bd !=nil {return _bd ;};};}else if _bd =_af .setFourBytes (_gbb ,_bc );_bd !=nil {return _bd ;};if _bd =_af .setFourBytes (_dag +_bbb *4,_acg [_fb .Data [_ff +_bbb ]]);
_bd !=nil {return _bd ;};};for _bdf =1;_bdf < 4;_bdf ++{for _bbb =0;_bbb < _fda ;_bbb ++{if _bd =_af .setByte (_dag +_bdf *_fda +_bbb ,_af .Data [_dag +_bbb ]);_bd !=nil {return _bd ;};};};};return nil ;};func (_bada *Gray16 )At (x ,y int )_f .Color {_bfa ,_ :=_bada .ColorAt (x ,y );
return _bfa };func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_aaae :=y *bytesPerLine +x ;if _aaae >=len (data ){return _f .Gray {},_cb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dcff :=data [_aaae ];if len (decode )==2{_dcff =uint8 (uint32 (LinearInterpolate (float64 (_dcff ),0,255,decode [0],decode [1]))&0xff);};return _f .Gray {Y :_dcff },nil ;};func FromGoImage (i _fa .Image )(Image ,error ){switch _ccdb :=i .(type ){case Image :return _ccdb .Copy (),nil ;
case Gray :return GrayConverter .Convert (i );case *_fa .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_fa .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};
};func (_ggde *CMYK32 )ColorModel ()_f .Model {return _f .CMYKModel };func _dada (_aec RGBA ,_faf CMYK ,_ggfg _fa .Rectangle ){for _adfc :=0;_adfc < _ggfg .Max .X ;_adfc ++{for _dedg :=0;_dedg < _ggfg .Max .Y ;_dedg ++{_ddb :=_aec .RGBAAt (_adfc ,_dedg );
_faf .SetCMYK (_adfc ,_dedg ,_edg (_ddb ));};};};func _aggef (_eeec *_fa .Gray16 ,_bbgff uint8 )*_fa .Gray {_eace :=_eeec .Bounds ();_gbddg :=_fa .NewGray (_eace );for _cdcg :=0;_cdcg < _eace .Dx ();_cdcg ++{for _geede :=0;_geede < _eace .Dy ();_geede ++{_geaa :=_eeec .Gray16At (_cdcg ,_geede );
_gbddg .SetGray (_cdcg ,_geede ,_f .Gray {Y :_caaeg (uint8 (_geaa .Y /256),_bbgff )});};};return _gbddg ;};func _edg (_fac _f .RGBA )_f .CMYK {_ecee ,_acc ,_dab ,_aeae :=_f .RGBToCMYK (_fac .R ,_fac .G ,_fac .B );return _f .CMYK {C :_ecee ,M :_acc ,Y :_dab ,K :_aeae };
};func (_bddb *NRGBA16 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtNRGBA16 (x ,y ,_bddb .Width ,_bddb .BytesPerLine ,_bddb .Data ,_bddb .Alpha ,_bddb .Decode );};func _eaf (_bg *Monochrome ,_aea ...int )(_aab *Monochrome ,_dgb error ){if _bg ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_aea )==0{return nil ,_c .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_eea :=_cbga ();_aab =_bg ;for _ ,_ggd :=range _aea {if _ggd <=0{break ;};_aab ,_dgb =_cff (_aab ,_ggd ,_eea );if _dgb !=nil {return nil ,_dgb ;};};return _aab ,nil ;};func (_agcb *Gray4 )Histogram ()(_ace [256]int ){for _gegc :=0;_gegc < _agcb .Width ;
_gegc ++{for _ccba :=0;_ccba < _agcb .Height ;_ccba ++{_ace [_agcb .GrayAt (_gegc ,_ccba ).Y ]++;};};return _ace ;};func _ebfc (_fgcd *Monochrome ,_afdc ,_caad int ,_bebb ,_dbb int ,_ddfa RasterOperator ){var (_cbfd bool ;_fagd bool ;_aabd int ;_gbag int ;
_dcg int ;_gfd int ;_gfa bool ;_bcbb byte ;);_daeg :=8-(_afdc &7);_deac :=_agge [_daeg ];_ebba :=_fgcd .BytesPerLine *_caad +(_afdc >>3);if _bebb < _daeg {_cbfd =true ;_deac &=_bafb [8-_daeg +_bebb ];};if !_cbfd {_aabd =(_bebb -_daeg )>>3;if _aabd !=0{_fagd =true ;
_gbag =_ebba +1;};};_dcg =(_afdc +_bebb )&7;if !(_cbfd ||_dcg ==0){_gfa =true ;_bcbb =_bafb [_dcg ];_gfd =_ebba +1+_aabd ;};var _ggff ,_bffd int ;switch _ddfa {case PixClr :for _ggff =0;_ggff < _dbb ;_ggff ++{_fgcd .Data [_ebba ]=_fffa (_fgcd .Data [_ebba ],0x0,_deac );
_ebba +=_fgcd .BytesPerLine ;};if _fagd {for _ggff =0;_ggff < _dbb ;_ggff ++{for _bffd =0;_bffd < _aabd ;_bffd ++{_fgcd .Data [_gbag +_bffd ]=0x0;};_gbag +=_fgcd .BytesPerLine ;};};if _gfa {for _ggff =0;_ggff < _dbb ;_ggff ++{_fgcd .Data [_gfd ]=_fffa (_fgcd .Data [_gfd ],0x0,_bcbb );
_gfd +=_fgcd .BytesPerLine ;};};case PixSet :for _ggff =0;_ggff < _dbb ;_ggff ++{_fgcd .Data [_ebba ]=_fffa (_fgcd .Data [_ebba ],0xff,_deac );_ebba +=_fgcd .BytesPerLine ;};if _fagd {for _ggff =0;_ggff < _dbb ;_ggff ++{for _bffd =0;_bffd < _aabd ;_bffd ++{_fgcd .Data [_gbag +_bffd ]=0xff;
};_gbag +=_fgcd .BytesPerLine ;};};if _gfa {for _ggff =0;_ggff < _dbb ;_ggff ++{_fgcd .Data [_gfd ]=_fffa (_fgcd .Data [_gfd ],0xff,_bcbb );_gfd +=_fgcd .BytesPerLine ;};};case PixNotDst :for _ggff =0;_ggff < _dbb ;_ggff ++{_fgcd .Data [_ebba ]=_fffa (_fgcd .Data [_ebba ],^_fgcd .Data [_ebba ],_deac );
_ebba +=_fgcd .BytesPerLine ;};if _fagd {for _ggff =0;_ggff < _dbb ;_ggff ++{for _bffd =0;_bffd < _aabd ;_bffd ++{_fgcd .Data [_gbag +_bffd ]=^(_fgcd .Data [_gbag +_bffd ]);};_gbag +=_fgcd .BytesPerLine ;};};if _gfa {for _ggff =0;_ggff < _dbb ;_ggff ++{_fgcd .Data [_gfd ]=_fffa (_fgcd .Data [_gfd ],^_fgcd .Data [_gfd ],_bcbb );
_gfd +=_fgcd .BytesPerLine ;};};};};func (_bgbb *Monochrome )getBitAt (_bggff ,_acad int )bool {_eee :=_acad *_bgbb .BytesPerLine +(_bggff >>3);_fcbc :=_bggff &0x07;_decb :=uint (7-_fcbc );if _eee > len (_bgbb .Data )-1{return false ;};if (_bgbb .Data [_eee ]>>_decb )&0x01>=1{return true ;
};return false ;};func (_egda *NRGBA64 )At (x ,y int )_f .Color {_gbdd ,_ :=_egda .ColorAt (x ,y );return _gbdd };