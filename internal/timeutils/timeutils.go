//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_a "errors";_f "fmt";_d "regexp";_g "strconv";_b "time";);var _ag =_d .MustCompile ("\u005c\u0073\u002a\u0044\u005c\u0073\u002a:\u005c\u0073\u002a\u0028\u005c\u0064\u007b\u0034\u007d\u0029\u0028\u005c\u0064\u007b2\u007d)\u0028\u005c\u0064\u007b\u0032\u007d)\u0028\u005c\u0064\u007b\u0032\u007d\u0029(\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005b\u002b\u002d\u005a\u005d\u0029\u003f\u0028\u005cd\u007b\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032\u007d)\u003f");
func ParsePdfTime (pdfTime string )(_b .Time ,error ){_ba :=_ag .FindAllStringSubmatch (pdfTime ,1);if len (_ba )< 1{if len (pdfTime )> 0&&pdfTime [0]!='D'{pdfTime =_f .Sprintf ("\u0044\u003a\u0025\u0073",pdfTime );return ParsePdfTime (pdfTime );};return _b .Time {},_f .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );
};if len (_ba [0])!=10{return _b .Time {},_a .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_bc ,_ :=_g .ParseInt (_ba [0][1],10,32);_dfg ,_ :=_g .ParseInt (_ba [0][2],10,32);_fd ,_ :=_g .ParseInt (_ba [0][3],10,32);_af ,_ :=_g .ParseInt (_ba [0][4],10,32);_bfe ,_ :=_g .ParseInt (_ba [0][5],10,32);_ef ,_ :=_g .ParseInt (_ba [0][6],10,32);var (_fe byte ;
_bab int64 ;_eec int64 ;);if len (_ba [0][7])> 0{_fe =_ba [0][7][0];}else {_fe ='+';};if len (_ba [0][8])> 0{_bab ,_ =_g .ParseInt (_ba [0][8],10,32);}else {_bab =0;};if len (_ba [0][9])> 0{_eec ,_ =_g .ParseInt (_ba [0][9],10,32);}else {_eec =0;};_eee :=int (_bab *60*60+_eec *60);
switch _fe {case '-':_eee =-_eee ;case 'Z':_eee =0;};_db :=_f .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_fe ,_bab ,_eec );_dc :=_b .FixedZone (_db ,_eee );return _b .Date (int (_bc ),_b .Month (_dfg ),int (_fd ),int (_af ),int (_bfe ),int (_ef ),0,_dc ),nil ;
};func FormatPdfTime (in _b .Time )string {_ee :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_dg ,_ :=_g .ParseInt (_ee [1:3],10,32);_ga ,_ :=_g .ParseInt (_ee [4:6],10,32);_ff :=int64 (in .Year ());_gc :=int64 (in .Month ());_gag :=int64 (in .Day ());
_bf :=int64 (in .Hour ());_de :=int64 (in .Minute ());_gf :=int64 (in .Second ());_be :=_ee [0];return _f .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_ff ,_gc ,_gag ,_bf ,_de ,_gf ,_be ,_dg ,_ga );
};