//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_fg "errors";_d "fmt";_fa "regexp";_b "strconv";_c "time";);var _bde =_fa .MustCompile ("\u005c\u0073\u002a\u0044\u005c\u0073\u002a:\u005c\u0073\u002a\u0028\u005c\u0064\u007b\u0034\u007d\u0029\u0028\u005c\u0064\u007b2\u007d)\u0028\u005c\u0064\u007b\u0032\u007d)\u0028\u005c\u0064\u007b\u0032\u007d\u0029(\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005b\u002b\u002d\u005a\u005d\u0029\u003f\u0028\u005cd\u007b\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032\u007d)\u003f");
func FormatPdfTime (in _c .Time )string {_de :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_e ,_ :=_b .ParseInt (_de [1:3],10,32);_a ,_ :=_b .ParseInt (_de [4:6],10,32);_af :=int64 (in .Year ());_be :=int64 (in .Month ());_cg :=int64 (in .Day ());
_cc :=int64 (in .Hour ());_fgb :=int64 (in .Minute ());_fe :=int64 (in .Second ());_ba :=_de [0];return _d .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_af ,_be ,_cg ,_cc ,_fgb ,_fe ,_ba ,_e ,_a );
};func ParsePdfTime (pdfTime string )(_c .Time ,error ){_bd :=_bde .FindAllStringSubmatch (pdfTime ,1);if len (_bd )< 1{return _c .Time {},_d .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );
};if len (_bd [0])!=10{return _c .Time {},_fg .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_ad ,_ :=_b .ParseInt (_bd [0][1],10,32);_egd ,_ :=_b .ParseInt (_bd [0][2],10,32);_g ,_ :=_b .ParseInt (_bd [0][3],10,32);_ca ,_ :=_b .ParseInt (_bd [0][4],10,32);_ga ,_ :=_b .ParseInt (_bd [0][5],10,32);_ge ,_ :=_b .ParseInt (_bd [0][6],10,32);var (_bda byte ;
_adg int64 ;_dg int64 ;);if len (_bd [0][7])> 0{_bda =_bd [0][7][0];}else {_bda ='+';};if len (_bd [0][8])> 0{_adg ,_ =_b .ParseInt (_bd [0][8],10,32);}else {_adg =0;};if len (_bd [0][9])> 0{_dg ,_ =_b .ParseInt (_bd [0][9],10,32);}else {_dg =0;};_cgf :=int (_adg *60*60+_dg *60);
switch _bda {case '-':_cgf =-_cgf ;case 'Z':_cgf =0;};_df :=_d .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_bda ,_adg ,_dg );_fb :=_c .FixedZone (_df ,_cgf );return _c .Date (int (_ad ),_c .Month (_egd ),int (_g ),int (_ca ),int (_ga ),int (_ge ),0,_fb ),nil ;
};