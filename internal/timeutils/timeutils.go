//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_c "errors";_g "fmt";_f "regexp";_ef "strconv";_a "time";);var _af =_f .MustCompile ("\u005c\u0073\u002a\u0044\u005c\u0073\u002a:\u005c\u0073\u002a\u0028\u005c\u0064\u007b\u0034\u007d\u0029\u0028\u005c\u0064\u007b2\u007d)\u0028\u005c\u0064\u007b\u0032\u007d)\u0028\u005c\u0064\u007b\u0032\u007d\u0029(\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005b\u002b\u002d\u005a\u005d\u0029\u003f\u0028\u005cd\u007b\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032\u007d)\u003f");
func FormatPdfTime (in _a .Time )string {_ed :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_ea ,_ :=_ef .ParseInt (_ed [1:3],10,32);_edb ,_ :=_ef .ParseInt (_ed [4:6],10,32);_ge :=int64 (in .Year ());_dc :=int64 (in .Month ());_da :=int64 (in .Day ());
_fa :=int64 (in .Hour ());_cc :=int64 (in .Minute ());_gc :=int64 (in .Second ());_dca :=_ed [0];return _g .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_ge ,_dc ,_da ,_fa ,_cc ,_gc ,_dca ,_ea ,_edb );
};func ParsePdfTime (pdfTime string )(_a .Time ,error ){_aa :=_af .FindAllStringSubmatch (pdfTime ,1);if len (_aa )< 1{if len (pdfTime )> 0&&pdfTime [0]!='D'{pdfTime =_g .Sprintf ("\u0044\u003a\u0025\u0073",pdfTime );return ParsePdfTime (pdfTime );};return _a .Time {},_g .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );
};if len (_aa [0])!=10{return _a .Time {},_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_dd ,_ :=_ef .ParseInt (_aa [0][1],10,32);_faa ,_ :=_ef .ParseInt (_aa [0][2],10,32);_cce ,_ :=_ef .ParseInt (_aa [0][3],10,32);_gg ,_ :=_ef .ParseInt (_aa [0][4],10,32);_gbb ,_ :=_ef .ParseInt (_aa [0][5],10,32);_fg ,_ :=_ef .ParseInt (_aa [0][6],10,32);
var (_ce byte ;_de int64 ;_dg int64 ;);if len (_aa [0][7])> 0{_ce =_aa [0][7][0];}else {_ce ='+';};if len (_aa [0][8])> 0{_de ,_ =_ef .ParseInt (_aa [0][8],10,32);}else {_de =0;};if len (_aa [0][9])> 0{_dg ,_ =_ef .ParseInt (_aa [0][9],10,32);}else {_dg =0;
};_ba :=int (_de *60*60+_dg *60);switch _ce {case '-':_ba =-_ba ;case 'Z':_ba =0;};_ae :=_g .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_ce ,_de ,_dg );_dae :=_a .FixedZone (_ae ,_ba );return _a .Date (int (_dd ),_a .Month (_faa ),int (_cce ),int (_gg ),int (_gbb ),int (_fg ),0,_dae ),nil ;
};