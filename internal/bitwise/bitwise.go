//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitwise ;import (_e "encoding/binary";_g "errors";_ae "github.com/unidoc/unipdf/v3/common";_gg "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "io";);func (_aeg *BufferedWriter )WriteByte (bt byte )error {if _aeg ._fd > len (_aeg ._eb )-1||(_aeg ._fd ==len (_aeg ._eb )-1&&_aeg ._f !=0){_aeg .expandIfNeeded (1);};_aeg .writeByte (bt );return nil ;};func (_ggf *Reader )ReadBool ()(bool ,error ){return _ggf .readBool ()};func (_ddd *BufferedWriter )writeFullBytes (_ef []byte )int {_fgf :=copy (_ddd ._eb [_ddd .fullOffset ():],_ef );_ddd ._fd +=_fgf ;return _fgf ;};func (_bdc *SubstreamReader )ReadUint32 ()(uint32 ,error ){_gfab :=make ([]byte ,4);_ ,_daa :=_bdc .Read (_gfab );if _daa !=nil {return 0,_daa ;};return _e .BigEndian .Uint32 (_gfab ),nil ;};func (_ceg *Writer )byteCapacity ()int {_aage :=len (_ceg ._fdb )-_ceg ._fbe ;if _ceg ._dec !=0{_aage --;};return _aage ;};func (_fc *BufferedWriter )FinishByte (){if _fc ._f ==0{return ;};_fc ._f =0;_fc ._fd ++;};func (_gag *SubstreamReader )readBool ()(_cg bool ,_dgg error ){if _gag ._ddb ==0{_gag ._gabd ,_dgg =_gag .readBufferByte ();if _dgg !=nil {return false ,_dgg ;};_cg =(_gag ._gabd &0x80)!=0;_gag ._gabd ,_gag ._ddb =_gag ._gabd &0x7f,7;return _cg ,nil ;};_gag ._ddb --;_cg =(_gag ._gabd &(1<<_gag ._ddb ))!=0;_gag ._gabd &=1<<_gag ._ddb -1;return _cg ,nil ;};func BufferedMSB ()*BufferedWriter {return &BufferedWriter {_db :true }};func (_ee *BufferedWriter )Reset (){_ee ._eb =_ee ._eb [:0];_ee ._fd =0;_ee ._f =0};func (_aca *Writer )Write (p []byte )(int ,error ){if len (p )> _aca .byteCapacity (){return 0,_d .EOF ;};for _ ,_cde :=range p {if _bcgb :=_aca .writeByte (_cde );_bcgb !=nil {return 0,_bcgb ;};};return len (p ),nil ;};func (_gfa *BufferedWriter )Write (d []byte )(int ,error ){_gfa .expandIfNeeded (len (d ));if _gfa ._f ==0{return _gfa .writeFullBytes (d ),nil ;};return _gfa .writeShiftedBytes (d ),nil ;};type BitWriter interface{WriteBit (_abf int )error ;WriteBits (_dg uint64 ,_geb int )(_ade int ,_ggd error );FinishByte ();SkipBits (_gcg int )error ;};type BinaryWriter interface{BitWriter ;_d .Writer ;_d .ByteWriter ;Data ()[]byte ;};func (_ed *Reader )BitPosition ()int {return int (_ed ._bce )};var _ BinaryWriter =&Writer {};func (_fdf *Reader )ConsumeRemainingBits (){if _fdf ._bce !=0{_ ,_beg :=_fdf .ReadBits (_fdf ._bce );if _beg !=nil {_ae .Log .Debug ("\u0043\u006f\u006e\u0073\u0075\u006d\u0065\u0052\u0065\u006da\u0069\u006e\u0069\u0067\u0042\u0069\u0074s\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_beg );};};};func (_fde *BufferedWriter )tryGrowByReslice (_ce int )bool {if _ged :=len (_fde ._eb );_ce <=cap (_fde ._eb )-_ged {_fde ._eb =_fde ._eb [:_ged +_ce ];return true ;};return false ;};var (_ _d .Reader =&Reader {};_ _d .ByteReader =&Reader {};_ _d .Seeker =&Reader {};_ StreamReader =&Reader {};);var _ _d .Writer =&BufferedWriter {};func (_bef *BufferedWriter )WriteBit (bit int )error {if bit !=1&&bit !=0{return _gg .Errorf ("\u0042\u0075\u0066fe\u0072\u0065\u0064\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065\u0042\u0069\u0074","\u0062\u0069\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u006du\u0073\u0074\u0020\u0062e\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u007d\u0020\u0062\u0075\u0074\u0020\u0069\u0073\u003a\u0020\u0025\u0064",bit );};if len (_bef ._eb )-1< _bef ._fd {_bef .expandIfNeeded (1);};_ge :=_bef ._f ;if _bef ._db {_ge =7-_bef ._f ;};_bef ._eb [_bef ._fd ]|=byte (uint16 (bit <<_ge )&0xff);_bef ._f ++;if _bef ._f ==8{_bef ._fd ++;_bef ._f =0;};return nil ;};func (_cff *Reader )ReadUint32 ()(uint32 ,error ){_cbb :=make ([]byte ,4);_ ,_bdf :=_cff .Read (_cbb );if _bdf !=nil {return 0,_bdf ;};return _e .BigEndian .Uint32 (_cbb ),nil ;};var _ _d .ByteWriter =&BufferedWriter {};func (_adg *Reader )ReadBit ()(_ecg int ,_cbg error ){_dfg ,_cbg :=_adg .readBool ();if _cbg !=nil {return 0,_cbg ;};if _dfg {_ecg =1;};return _ecg ,nil ;};func (_eda *Reader )Read (p []byte )(_agc int ,_ca error ){if _eda ._bce ==0{return _eda .read (p );};for ;_agc < len (p );_agc ++{if p [_agc ],_ca =_eda .readUnalignedByte ();_ca !=nil {return 0,_ca ;};};return _agc ,nil ;};func (_b *BufferedWriter )Data ()[]byte {return _b ._eb };func (_fgd *BufferedWriter )expandIfNeeded (_fe int ){if !_fgd .tryGrowByReslice (_fe ){_fgd .grow (_fe );};};var _ BinaryWriter =&BufferedWriter {};const (_c =64;_ga =int (^uint (0)>>1););type SubstreamReader struct{_gaf uint64 ;_dgb StreamReader ;_gaee uint64 ;_dfd uint64 ;_cba []byte ;_acd uint64 ;_cad uint64 ;_gabd byte ;_ddb byte ;_gcf uint64 ;_bec byte ;};func (_ebb *SubstreamReader )ReadBit ()(_cffg int ,_dfdba error ){_feg ,_dfdba :=_ebb .readBool ();if _dfdba !=nil {return 0,_dfdba ;};if _feg {_cffg =1;};return _cffg ,nil ;};func _bbg (_eae ,_dbg uint64 )uint64 {if _eae < _dbg {return _eae ;};return _dbg ;};func (_ffb *SubstreamReader )Reset (){_ffb ._gaf =_ffb ._gcf ;_ffb ._ddb =_ffb ._bec };func (_ad *BufferedWriter )byteCapacity ()int {_bb :=len (_ad ._eb )-_ad ._fd ;if _ad ._f !=0{_bb --;};return _bb ;};func (_befd *SubstreamReader )Mark (){_befd ._gcf =_befd ._gaf ;_befd ._bec =_befd ._ddb };func (_aec *BufferedWriter )Len ()int {return _aec .byteCapacity ()};type BufferedWriter struct{_eb []byte ;_f uint8 ;_fd int ;_db bool ;};func (_eaff *SubstreamReader )readBufferByte ()(byte ,error ){if _eaff ._gaf >=_eaff ._dfd {return 0,_d .EOF ;};if _eaff ._gaf >=_eaff ._cad ||_eaff ._gaf < _eaff ._acd {if _gdc :=_eaff .fillBuffer ();_gdc !=nil {return 0,_gdc ;};};_eec :=_eaff ._cba [_eaff ._gaf -_eaff ._acd ];_eaff ._gaf ++;return _eec ,nil ;};func (_faa *Writer )ResetBit (){_faa ._dec =0};func (_beb *BufferedWriter )WriteBits (bits uint64 ,number int )(_ff int ,_fcc error ){const _fg ="\u0042u\u0066\u0066\u0065\u0072e\u0064\u0057\u0072\u0069\u0074e\u0072.\u0057r\u0069\u0074\u0065\u0072\u0042\u0069\u0074s";if number < 0||number > 64{return 0,_gg .Errorf (_fg ,"\u0062i\u0074\u0073 \u006e\u0075\u006db\u0065\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020r\u0061\u006e\u0067\u0065\u0020\u003c\u0030\u002c\u0036\u0034\u003e,\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",number );};_dc :=number /8;if _dc > 0{_fgg :=number -_dc *8;for _ea :=_dc -1;_ea >=0;_ea --{_bc :=byte ((bits >>uint (_ea *8+_fgg ))&0xff);if _fcc =_beb .WriteByte (_bc );_fcc !=nil {return _ff ,_gg .Wrapf (_fcc ,_fg ,"\u0062\u0079\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_dc -_ea +1);};};number -=_dc *8;if number ==0{return _dc ,nil ;};};var _gfg int ;for _ffd :=0;_ffd < number ;_ffd ++{if _beb ._db {_gfg =int ((bits >>uint (number -1-_ffd ))&0x1);}else {_gfg =int (bits &0x1);bits >>=1;};if _fcc =_beb .WriteBit (_gfg );_fcc !=nil {return _ff ,_gg .Wrapf (_fcc ,_fg ,"\u0062i\u0074\u003a\u0020\u0025\u0064",_ffd );};};return _dc ,nil ;};func (_ddc *Reader )Length ()uint64 {return uint64 (len (_ddc ._cd ))};func (_ebf *Reader )readBool ()(_fed bool ,_egb error ){if _ebf ._bce ==0{_ebf ._gfgf ,_egb =_ebf .readBufferByte ();if _egb !=nil {return false ,_egb ;};_fed =(_ebf ._gfgf &0x80)!=0;_ebf ._gfgf ,_ebf ._bce =_ebf ._gfgf &0x7f,7;return _fed ,nil ;};_ebf ._bce --;_fed =(_ebf ._gfgf &(1<<_ebf ._bce ))!=0;_ebf ._gfgf &=1<<_ebf ._bce -1;return _fed ,nil ;};func (_ba *Reader )readBufferByte ()(byte ,error ){if _ba ._cf >=int64 (len (_ba ._cd )){return 0,_d .EOF ;};_ba ._ffc =-1;_cae :=_ba ._cd [_ba ._cf ];_ba ._cf ++;_ba ._fec =int (_cae );return _cae ,nil ;};func NewSubstreamReader (r StreamReader ,offset ,length uint64 )(*SubstreamReader ,error ){if r ==nil {return nil ,_g .New ("\u0072o\u006ft\u0020\u0072\u0065\u0061\u0064e\u0072\u0020i\u0073\u0020\u006e\u0069\u006c");};_ae .Log .Trace ("\u004e\u0065\u0077\u0053\u0075\u0062\u0073\u0074r\u0065\u0061\u006dRe\u0061\u0064\u0065\u0072\u0020\u0061t\u0020\u006f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0064\u0020\u0077\u0069\u0074h\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064",offset ,length );return &SubstreamReader {_dgb :r ,_gaee :offset ,_dfd :length ,_cba :make ([]byte ,length )},nil ;};func NewWriterMSB (data []byte )*Writer {return &Writer {_fdb :data ,_dea :true }};func (_def *SubstreamReader )fillBuffer ()error {if uint64 (_def ._dgb .StreamPosition ())!=_def ._gaf +_def ._gaee {_ ,_ecb :=_def ._dgb .Seek (int64 (_def ._gaf +_def ._gaee ),_d .SeekStart );if _ecb !=nil {return _ecb ;};};_def ._acd =_def ._gaf ;_begf :=_bbg (uint64 (len (_def ._cba )),_def ._dfd -_def ._gaf );_dab :=make ([]byte ,_begf );_fccb ,_ecbf :=_def ._dgb .Read (_dab );if _ecbf !=nil {return _ecbf ;};for _bcg :=uint64 (0);_bcg < _begf ;_bcg ++{_def ._cba [_bcg ]=_dab [_bcg ];};_def ._cad =_def ._acd +uint64 (_fccb );return nil ;};func (_eeb *Writer )UseMSB ()bool {return _eeb ._dea };func (_ffbc *SubstreamReader )StreamPosition ()int64 {return int64 (_ffbc ._gaf )};func (_gba *SubstreamReader )Align ()(_edg byte ){_edg =_gba ._ddb ;_gba ._ddb =0;return _edg };func (_ffa *SubstreamReader )Length ()uint64 {return _ffa ._dfd };func (_gdb *SubstreamReader )ReadByte ()(byte ,error ){if _gdb ._ddb ==0{return _gdb .readBufferByte ();};return _gdb .readUnalignedByte ();};func (_acc *Reader )readUnalignedByte ()(_ebea byte ,_egd error ){_ecc :=_acc ._bce ;_ebea =_acc ._gfgf <<(8-_ecc );_acc ._gfgf ,_egd =_acc .readBufferByte ();if _egd !=nil {return 0,_egd ;};_ebea |=_acc ._gfgf >>_ecc ;_acc ._gfgf &=1<<_ecc -1;return _ebea ,nil ;};func (_gbe *SubstreamReader )Seek (offset int64 ,whence int )(int64 ,error ){switch whence {case _d .SeekStart :_gbe ._gaf =uint64 (offset );case _d .SeekCurrent :_gbe ._gaf +=uint64 (offset );case _d .SeekEnd :_gbe ._gaf =_gbe ._dfd +uint64 (offset );default:return 0,_g .New ("\u0072\u0065\u0061d\u0065\u0072\u002e\u0053\u0075\u0062\u0073\u0074\u0072\u0065\u0061\u006d\u0052\u0065\u0061\u0064\u0065\u0072\u002e\u0053\u0065\u0065\u006b\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0077\u0068\u0065\u006e\u0063\u0065");};_gbe ._ddb =0;return int64 (_gbe ._gaf ),nil ;};func (_efc *BufferedWriter )writeShiftedBytes (_fa []byte )int {for _ ,_bbb :=range _fa {_efc .writeByte (_bbb );};return len (_fa );};func NewReader (data []byte )*Reader {return &Reader {_cd :data }};func (_aa *SubstreamReader )ReadBits (n byte )(_ecd uint64 ,_baf error ){if n < _aa ._ddb {_deb :=_aa ._ddb -n ;_ecd =uint64 (_aa ._gabd >>_deb );_aa ._gabd &=1<<_deb -1;_aa ._ddb =_deb ;return _ecd ,nil ;};if n > _aa ._ddb {if _aa ._ddb > 0{_ecd =uint64 (_aa ._gabd );n -=_aa ._ddb ;};var _gee byte ;for n >=8{_gee ,_baf =_aa .readBufferByte ();if _baf !=nil {return 0,_baf ;};_ecd =_ecd <<8+uint64 (_gee );n -=8;};if n > 0{if _aa ._gabd ,_baf =_aa .readBufferByte ();_baf !=nil {return 0,_baf ;};_efe :=8-n ;_ecd =_ecd <<n +uint64 (_aa ._gabd >>_efe );_aa ._gabd &=1<<_efe -1;_aa ._ddb =_efe ;}else {_aa ._ddb =0;};return _ecd ,nil ;};_aa ._ddb =0;return uint64 (_aa ._gabd ),nil ;};func (_ead *SubstreamReader )BitPosition ()int {return int (_ead ._ddb )};func NewWriter (data []byte )*Writer {return &Writer {_fdb :data }};type Writer struct{_fdb []byte ;_dec uint8 ;_fbe int ;_dea bool ;};func (_egg *Writer )WriteByte (c byte )error {return _egg .writeByte (c )};func (_da *SubstreamReader )ReadBool ()(bool ,error ){return _da .readBool ()};func (_fcd *Reader )Mark (){_fcd ._aege =_fcd ._cf ;_fcd ._gca =_fcd ._bce };func (_ffdd *Reader )Reset (){_ffdd ._cf =_ffdd ._aege ;_ffdd ._bce =_ffdd ._gca };func (_gb *Reader )Seek (offset int64 ,whence int )(int64 ,error ){_gb ._ffc =-1;var _dbe int64 ;switch whence {case _d .SeekStart :_dbe =offset ;case _d .SeekCurrent :_dbe =_gb ._cf +offset ;case _d .SeekEnd :_dbe =int64 (len (_gb ._cd ))+offset ;default:return 0,_g .New ("\u0072\u0065\u0061de\u0072\u002e\u0052\u0065\u0061\u0064\u0065\u0072\u002eS\u0065e\u006b:\u0020i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0068\u0065\u006e\u0063\u0065");};if _dbe < 0{return 0,_g .New ("\u0072\u0065a\u0064\u0065\u0072\u002eR\u0065\u0061d\u0065\u0072\u002e\u0053\u0065\u0065\u006b\u003a \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u006f\u006e");};_gb ._cf =_dbe ;_gb ._bce =0;return _dbe ,nil ;};func (_edad *Reader )StreamPosition ()int64 {return _edad ._cf };func (_gfb *SubstreamReader )readUnalignedByte ()(_aag byte ,_aagc error ){_dcg :=_gfb ._ddb ;_aag =_gfb ._gabd <<(8-_dcg );_gfb ._gabd ,_aagc =_gfb .readBufferByte ();if _aagc !=nil {return 0,_aagc ;};_aag |=_gfb ._gabd >>_dcg ;_gfb ._gabd &=1<<_dcg -1;return _aag ,nil ;};func (_ab *BufferedWriter )writeByte (_bba byte ){switch {case _ab ._f ==0:_ab ._eb [_ab ._fd ]=_bba ;_ab ._fd ++;case _ab ._db :_ab ._eb [_ab ._fd ]|=_bba >>_ab ._f ;_ab ._fd ++;_ab ._eb [_ab ._fd ]=byte (uint16 (_bba )<<(8-_ab ._f )&0xff);default:_ab ._eb [_ab ._fd ]|=byte (uint16 (_bba )<<_ab ._f &0xff);_ab ._fd ++;_ab ._eb [_ab ._fd ]=_bba >>(8-_ab ._f );};};func (_dac *Writer )FinishByte (){if _dac ._dec ==0{return ;};_dac ._dec =0;_dac ._fbe ++;};func (_agf *Reader )ReadByte ()(byte ,error ){if _agf ._bce ==0{return _agf .readBufferByte ();};return _agf .readUnalignedByte ();};func (_fff *Writer )WriteBit (bit int )error {switch bit {case 0,1:return _fff .writeBit (uint8 (bit ));};return _gg .Error ("\u0057\u0072\u0069\u0074\u0065\u0042\u0069\u0074","\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0062\u0069\u0074\u0020v\u0061\u006c\u0075\u0065");};type StreamReader interface{_d .Reader ;_d .ByteReader ;_d .Seeker ;Align ()byte ;BitPosition ()int ;Mark ();Length ()uint64 ;ReadBit ()(int ,error );ReadBits (_ac byte )(uint64 ,error );ReadBool ()(bool ,error );ReadUint32 ()(uint32 ,error );Reset ();StreamPosition ()int64 ;};func (_abaa *Writer )writeBit (_gce uint8 )error {if len (_abaa ._fdb )-1< _abaa ._fbe {return _d .EOF ;};_dge :=_abaa ._dec ;if _abaa ._dea {_dge =7-_abaa ._dec ;};_abaa ._fdb [_abaa ._fbe ]|=byte (uint16 (_gce <<_dge )&0xff);_abaa ._dec ++;if _abaa ._dec ==8{_abaa ._fbe ++;_abaa ._dec =0;};return nil ;};func (_bf *SubstreamReader )Offset ()uint64 {return _bf ._gaee };func (_edd *Writer )Data ()[]byte {return _edd ._fdb };type Reader struct{_cd []byte ;_gfgf byte ;_bce byte ;_cf int64 ;_fec int ;_ffc int ;_aege int64 ;_gca byte ;};func (_aeb *Reader )ReadBits (n byte )(_acg uint64 ,_fbc error ){if n < _aeb ._bce {_aef :=_aeb ._bce -n ;_acg =uint64 (_aeb ._gfgf >>_aef );_aeb ._gfgf &=1<<_aef -1;_aeb ._bce =_aef ;return _acg ,nil ;};if n > _aeb ._bce {if _aeb ._bce > 0{_acg =uint64 (_aeb ._gfgf );n -=_aeb ._bce ;};for n >=8{_eg ,_agcc :=_aeb .readBufferByte ();if _agcc !=nil {return 0,_agcc ;};_acg =_acg <<8+uint64 (_eg );n -=8;};if n > 0{if _aeb ._gfgf ,_fbc =_aeb .readBufferByte ();_fbc !=nil {return 0,_fbc ;};_fad :=8-n ;_acg =_acg <<n +uint64 (_aeb ._gfgf >>_fad );_aeb ._gfgf &=1<<_fad -1;_aeb ._bce =_fad ;}else {_aeb ._bce =0;};return _acg ,nil ;};_aeb ._bce =0;return uint64 (_aeb ._gfgf ),nil ;};func (_dacc *Writer )WriteBits (bits uint64 ,number int )(_gebd int ,_eadb error ){const _efg ="\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065r\u0042\u0069\u0074\u0073";if number < 0||number > 64{return 0,_gg .Errorf (_efg ,"\u0062i\u0074\u0073 \u006e\u0075\u006db\u0065\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020r\u0061\u006e\u0067\u0065\u0020\u003c\u0030\u002c\u0036\u0034\u003e,\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",number );};if number ==0{return 0,nil ;};_fcb :=number /8;if _fcb > 0{_aff :=number -_fcb *8;for _ggfa :=_fcb -1;_ggfa >=0;_ggfa --{_efd :=byte ((bits >>uint (_ggfa *8+_aff ))&0xff);if _eadb =_dacc .WriteByte (_efd );_eadb !=nil {return _gebd ,_gg .Wrapf (_eadb ,_efg ,"\u0062\u0079\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_fcb -_ggfa +1);};};number -=_fcb *8;if number ==0{return _fcb ,nil ;};};var _fge int ;for _edaf :=0;_edaf < number ;_edaf ++{if _dacc ._dea {_fge =int ((bits >>uint (number -1-_edaf ))&0x1);}else {_fge =int (bits &0x1);bits >>=1;};if _eadb =_dacc .WriteBit (_fge );_eadb !=nil {return _gebd ,_gg .Wrapf (_eadb ,_efg ,"\u0062i\u0074\u003a\u0020\u0025\u0064",_edaf );};};return _fcb ,nil ;};func (_gff *Reader )read (_cfg []byte )(int ,error ){if _gff ._cf >=int64 (len (_gff ._cd )){return 0,_d .EOF ;};_gff ._ffc =-1;_gedf :=copy (_cfg ,_gff ._cd [_gff ._cf :]);_gff ._cf +=int64 (_gedf );return _gedf ,nil ;};func (_cc *BufferedWriter )SkipBits (skip int )error {if skip ==0{return nil ;};_af :=int (_cc ._f )+skip ;if _af >=0&&_af < 8{_cc ._f =uint8 (_af );return nil ;};_af =int (_cc ._f )+_cc ._fd *8+skip ;if _af < 0{return _gg .Errorf ("\u0057r\u0069t\u0065\u0072\u002e\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ebe :=_af /8;_df :=_af %8;_cc ._f =uint8 (_df );if _de :=_ebe -_cc ._fd ;_de > 0&&len (_cc ._eb )-1< _ebe {if _cc ._f !=0{_de ++;};_cc .expandIfNeeded (_de );};_cc ._fd =_ebe ;return nil ;};func (_dcf *BufferedWriter )fullOffset ()int {_dbd :=_dcf ._fd ;if _dcf ._f !=0{_dbd ++;};return _dbd ;};func (_dfdb *SubstreamReader )Read (b []byte )(_ebd int ,_eaf error ){if _dfdb ._gaf >=_dfdb ._dfd {_ae .Log .Trace ("\u0053\u0074\u0072e\u0061\u006d\u0050\u006fs\u003a\u0020\u0027\u0025\u0064\u0027\u0020>\u003d\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027",_dfdb ._gaf ,_dfdb ._dfd );return 0,_d .EOF ;};for ;_ebd < len (b );_ebd ++{if b [_ebd ],_eaf =_dfdb .readUnalignedByte ();_eaf !=nil {if _eaf ==_d .EOF {return _ebd ,nil ;};return 0,_eaf ;};};return _ebd ,nil ;};func (_dee *Writer )SkipBits (skip int )error {const _dbda ="\u0057r\u0069t\u0065\u0072\u002e\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073";if skip ==0{return nil ;};_gffc :=int (_dee ._dec )+skip ;if _gffc >=0&&_gffc < 8{_dee ._dec =uint8 (_gffc );return nil ;};_gffc =int (_dee ._dec )+_dee ._fbe *8+skip ;if _gffc < 0{return _gg .Errorf (_dbda ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_gcad :=_gffc /8;_bg :=_gffc %8;_ae .Log .Trace ("\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073");_ae .Log .Trace ("\u0042\u0069\u0074\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0042\u0079\u0074\u0065\u0049n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0046\u0075\u006c\u006c\u0042\u0069\u0074\u0073\u003a\u0020'\u0025\u0064\u0027\u002c\u0020\u004c\u0065\u006e\u003a\u0020\u0027\u0025\u0064\u0027,\u0020\u0043\u0061p\u003a\u0020\u0027\u0025\u0064\u0027",_dee ._dec ,_dee ._fbe ,int (_dee ._dec )+(_dee ._fbe )*8,len (_dee ._fdb ),cap (_dee ._fdb ));_ae .Log .Trace ("S\u006b\u0069\u0070\u003a\u0020\u0027%\u0064\u0027\u002c\u0020\u0064\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062i\u0074\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025d\u0027",skip ,_gffc ,_bg );_dee ._dec =uint8 (_bg );if _cbbd :=_gcad -_dee ._fbe ;_cbbd > 0&&len (_dee ._fdb )-1< _gcad {_ae .Log .Trace ("\u0042\u0079\u0074e\u0044\u0069\u0066\u0066\u003a\u0020\u0025\u0064",_cbbd );return _gg .Errorf (_dbda ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_dee ._fbe =_gcad ;_ae .Log .Trace ("\u0042\u0069\u0074I\u006e\u0064\u0065\u0078:\u0020\u0027\u0025\u0064\u0027\u002c\u0020B\u0079\u0074\u0065\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027",_dee ._dec ,_dee ._fbe );return nil ;};func (_eed *BufferedWriter )grow (_fb int ){if _eed ._eb ==nil &&_fb < _c {_eed ._eb =make ([]byte ,_fb ,_c );return ;};_cb :=len (_eed ._eb );if _eed ._f !=0{_cb ++;};_gae :=cap (_eed ._eb );switch {case _fb <=_gae /2-_cb :_ae .Log .Trace ("\u005b\u0042\u0075\u0066\u0066\u0065r\u0065\u0064\u0057\u0072\u0069t\u0065\u0072\u005d\u0020\u0067\u0072o\u0077\u0020\u002d\u0020\u0072e\u0073\u006c\u0069\u0063\u0065\u0020\u006f\u006e\u006c\u0079\u002e\u0020L\u0065\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0043\u0061\u0070\u003a\u0020'\u0025\u0064\u0027\u002c\u0020\u006e\u003a\u0020'\u0025\u0064\u0027",len (_eed ._eb ),cap (_eed ._eb ),_fb );_ae .Log .Trace ("\u0020\u006e\u0020\u003c\u003d\u0020\u0063\u0020\u002f\u0020\u0032\u0020\u002d\u006d\u002e \u0043:\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u006d\u003a\u0020\u0027\u0025\u0064\u0027",_gae ,_cb );copy (_eed ._eb ,_eed ._eb [_eed .fullOffset ():]);case _gae > _ga -_gae -_fb :_ae .Log .Error ("\u0042\u0055F\u0046\u0045\u0052 \u0074\u006f\u006f\u0020\u006c\u0061\u0072\u0067\u0065");return ;default:_gc :=make ([]byte ,2*_gae +_fb );copy (_gc ,_eed ._eb );_eed ._eb =_gc ;};_eed ._eb =_eed ._eb [:_cb +_fb ];};func (_cdf *Reader )Align ()(_cca byte ){_cca =_cdf ._bce ;_cdf ._bce =0;return _cca };func (_gd *BufferedWriter )ResetBitIndex (){_gd ._f =0};func (_adgc *Writer )writeByte (_gafa byte )error {if _adgc ._fbe > len (_adgc ._fdb )-1{return _d .EOF ;};if _adgc ._fbe ==len (_adgc ._fdb )-1&&_adgc ._dec !=0{return _d .EOF ;};if _adgc ._dec ==0{_adgc ._fdb [_adgc ._fbe ]=_gafa ;_adgc ._fbe ++;return nil ;};if _adgc ._dea {_adgc ._fdb [_adgc ._fbe ]|=_gafa >>_adgc ._dec ;_adgc ._fbe ++;_adgc ._fdb [_adgc ._fbe ]=byte (uint16 (_gafa )<<(8-_adgc ._dec )&0xff);}else {_adgc ._fdb [_adgc ._fbe ]|=byte (uint16 (_gafa )<<_adgc ._dec &0xff);_adgc ._fbe ++;_adgc ._fdb [_adgc ._fbe ]=_gafa >>(8-_adgc ._dec );};return nil ;};