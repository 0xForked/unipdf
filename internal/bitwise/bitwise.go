//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitwise ;import (_f "encoding/binary";_d "errors";_fb "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_a "io";);func (_acf *Reader )Read (p []byte )(_ddg int ,_dbfd error ){if _acf ._eec ==0{return _acf .read (p );};for ;_ddg < len (p );_ddg ++{if p [_ddg ],_dbfd =_acf .readUnalignedByte ();_dbfd !=nil {return 0,_dbfd ;};};return _ddg ,nil ;};func (_da *BufferedWriter )byteCapacity ()int {_fec :=len (_da ._e )-_da ._dd ;if _da ._df !=0{_fec --;};return _fec ;};var _ _a .Writer =&BufferedWriter {};func (_gd *BufferedWriter )expandIfNeeded (_bc int ){if !_gd .tryGrowByReslice (_bc ){_gd .grow (_bc );};};func (_beb *SubstreamReader )ReadUint32 ()(uint32 ,error ){_dbfc :=make ([]byte ,4);_ ,_deg :=_beb .Read (_dbfc );if _deg !=nil {return 0,_deg ;};return _f .BigEndian .Uint32 (_dbfc ),nil ;};func (_fbg *Reader )ReadBit ()(_cgg int ,_aa error ){_gaa ,_aa :=_fbg .readBool ();if _aa !=nil {return 0,_aa ;};if _gaa {_cgg =1;};return _cgg ,nil ;};func (_fac *Reader )ReadUint32 ()(uint32 ,error ){_cgga :=make ([]byte ,4);_ ,_acd :=_fac .Read (_cgga );if _acd !=nil {return 0,_acd ;};return _f .BigEndian .Uint32 (_cgga ),nil ;};func (_ed *BufferedWriter )writeByte (_eed byte ){switch {case _ed ._df ==0:_ed ._e [_ed ._dd ]=_eed ;_ed ._dd ++;case _ed ._ad :_ed ._e [_ed ._dd ]|=_eed >>_ed ._df ;_ed ._dd ++;_ed ._e [_ed ._dd ]=byte (uint16 (_eed )<<(8-_ed ._df )&0xff);default:_ed ._e [_ed ._dd ]|=byte (uint16 (_eed )<<_ed ._df &0xff);_ed ._dd ++;_ed ._e [_ed ._dd ]=_eed >>(8-_ed ._df );};};type BufferedWriter struct{_e []byte ;_df uint8 ;_dd int ;_ad bool ;};func (_dc *BufferedWriter )Write (d []byte )(int ,error ){_dc .expandIfNeeded (len (d ));if _dc ._df ==0{return _dc .writeFullBytes (d ),nil ;};return _dc .writeShiftedBytes (d ),nil ;};func (_eg *BufferedWriter )Reset (){_eg ._e =_eg ._e [:0];_eg ._dd =0;_eg ._df =0};func NewReader (data []byte )*Reader {return &Reader {_ffgf :data }};type SubstreamReader struct{_fda uint64 ;_efe StreamReader ;_agb uint64 ;_cca uint64 ;_efgg []byte ;_dgf uint64 ;_bb uint64 ;_dfd byte ;_aba byte ;_dge uint64 ;_cdcd byte ;};func (_ac *BufferedWriter )SkipBits (skip int )error {if skip ==0{return nil ;};_fa :=int (_ac ._df )+skip ;if _fa >=0&&_fa < 8{_ac ._df =uint8 (_fa );return nil ;};_fa =int (_ac ._df )+_ac ._dd *8+skip ;if _fa < 0{return _g .Errorf ("\u0057r\u0069t\u0065\u0072\u002e\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ec :=_fa /8;_ddf :=_fa %8;_ac ._df =uint8 (_ddf );if _ee :=_ec -_ac ._dd ;_ee > 0&&len (_ac ._e )-1< _ec {if _ac ._df !=0{_ee ++;};_ac .expandIfNeeded (_ee );};_ac ._dd =_ec ;return nil ;};const (_gg =64;_cd =int (^uint (0)>>1););type BitWriter interface{WriteBit (_dad int )error ;WriteBits (_def uint64 ,_db int )(_bd int ,_ag error );FinishByte ();SkipBits (_egca int )error ;};func (_dfe *Reader )ConsumeRemainingBits (){if _dfe ._eec !=0{_ ,_ccd :=_dfe .ReadBits (_dfe ._eec );if _ccd !=nil {_fb .Log .Debug ("\u0043\u006f\u006e\u0073\u0075\u006d\u0065\u0052\u0065\u006da\u0069\u006e\u0069\u0067\u0042\u0069\u0074s\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ccd );};};};func (_dca *SubstreamReader )Length ()uint64 {return _dca ._cca };func BufferedMSB ()*BufferedWriter {return &BufferedWriter {_ad :true }};func (_bg *BufferedWriter )writeFullBytes (_cb []byte )int {_gb :=copy (_bg ._e [_bg .fullOffset ():],_cb );_bg ._dd +=_gb ;return _gb ;};var _ BinaryWriter =&Writer {};func (_ef *Reader )BitPosition ()int {return int (_ef ._eec )};func _afc (_gad ,_fgec uint64 )uint64 {if _gad < _fgec {return _gad ;};return _fgec ;};func (_edca *Writer )Write (p []byte )(int ,error ){if len (p )> _edca .byteCapacity (){return 0,_a .EOF ;};for _ ,_ccc :=range p {if _ebf :=_edca .writeByte (_ccc );_ebf !=nil {return 0,_ebf ;};};return len (p ),nil ;};func (_baf *Reader )Seek (offset int64 ,whence int )(int64 ,error ){_baf ._ded =-1;var _abc int64 ;switch whence {case _a .SeekStart :_abc =offset ;case _a .SeekCurrent :_abc =_baf ._gcc +offset ;case _a .SeekEnd :_abc =int64 (len (_baf ._ffgf ))+offset ;default:return 0,_d .New ("\u0072\u0065\u0061de\u0072\u002e\u0052\u0065\u0061\u0064\u0065\u0072\u002eS\u0065e\u006b:\u0020i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0068\u0065\u006e\u0063\u0065");};if _abc < 0{return 0,_d .New ("\u0072\u0065a\u0064\u0065\u0072\u002eR\u0065\u0061d\u0065\u0072\u002e\u0053\u0065\u0065\u006b\u003a \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u006f\u006e");};_baf ._gcc =_abc ;_baf ._eec =0;return _abc ,nil ;};type StreamReader interface{_a .Reader ;_a .ByteReader ;_a .Seeker ;Align ()byte ;BitPosition ()int ;Mark ();Length ()uint64 ;ReadBit ()(int ,error );ReadBits (_eba byte )(uint64 ,error );ReadBool ()(bool ,error );ReadUint32 ()(uint32 ,error );Reset ();StreamPosition ()int64 ;};type Reader struct{_ffgf []byte ;_cga byte ;_eec byte ;_gcc int64 ;_bf int ;_ded int ;_cgb int64 ;_fd byte ;};func (_eag *Reader )Mark (){_eag ._cgb =_eag ._gcc ;_eag ._fd =_eag ._eec };func (_fg *BufferedWriter )Len ()int {return _fg .byteCapacity ()};func (_ge *Reader )ReadBits (n byte )(_dbe uint64 ,_fggf error ){if n < _ge ._eec {_eedg :=_ge ._eec -n ;_dbe =uint64 (_ge ._cga >>_eedg );_ge ._cga &=1<<_eedg -1;_ge ._eec =_eedg ;return _dbe ,nil ;};if n > _ge ._eec {if _ge ._eec > 0{_dbe =uint64 (_ge ._cga );n -=_ge ._eec ;};for n >=8{_dbc ,_cdd :=_ge .readBufferByte ();if _cdd !=nil {return 0,_cdd ;};_dbe =_dbe <<8+uint64 (_dbc );n -=8;};if n > 0{if _ge ._cga ,_fggf =_ge .readBufferByte ();_fggf !=nil {return 0,_fggf ;};_efg :=8-n ;_dbe =_dbe <<n +uint64 (_ge ._cga >>_efg );_ge ._cga &=1<<_efg -1;_ge ._eec =_efg ;}else {_ge ._eec =0;};return _dbe ,nil ;};_ge ._eec =0;return uint64 (_ge ._cga ),nil ;};func (_dfag *SubstreamReader )Reset (){_dfag ._fda =_dfag ._dge ;_dfag ._aba =_dfag ._cdcd };func (_cda *Reader )readBufferByte ()(byte ,error ){if _cda ._gcc >=int64 (len (_cda ._ffgf )){return 0,_a .EOF ;};_cda ._ded =-1;_efa :=_cda ._ffgf [_cda ._gcc ];_cda ._gcc ++;_cda ._bf =int (_efa );return _efa ,nil ;};func (_eage *Reader )StreamPosition ()int64 {return _eage ._gcc };func (_edc *Reader )ReadByte ()(byte ,error ){if _edc ._eec ==0{return _edc .readBufferByte ();};return _edc .readUnalignedByte ();};func (_gf *BufferedWriter )Data ()[]byte {return _gf ._e };func (_fgbe *Writer )SkipBits (skip int )error {const _gce ="\u0057r\u0069t\u0065\u0072\u002e\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073";if skip ==0{return nil ;};_gbeg :=int (_fgbe ._gbg )+skip ;if _gbeg >=0&&_gbeg < 8{_fgbe ._gbg =uint8 (_gbeg );return nil ;};_gbeg =int (_fgbe ._gbg )+_fgbe ._aabc *8+skip ;if _gbeg < 0{return _g .Errorf (_gce ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_afa :=_gbeg /8;_aga :=_gbeg %8;_fb .Log .Trace ("\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073");_fb .Log .Trace ("\u0042\u0069\u0074\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0042\u0079\u0074\u0065\u0049n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0046\u0075\u006c\u006c\u0042\u0069\u0074\u0073\u003a\u0020'\u0025\u0064\u0027\u002c\u0020\u004c\u0065\u006e\u003a\u0020\u0027\u0025\u0064\u0027,\u0020\u0043\u0061p\u003a\u0020\u0027\u0025\u0064\u0027",_fgbe ._gbg ,_fgbe ._aabc ,int (_fgbe ._gbg )+(_fgbe ._aabc )*8,len (_fgbe ._eadf ),cap (_fgbe ._eadf ));_fb .Log .Trace ("S\u006b\u0069\u0070\u003a\u0020\u0027%\u0064\u0027\u002c\u0020\u0064\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062i\u0074\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025d\u0027",skip ,_gbeg ,_aga );_fgbe ._gbg =uint8 (_aga );if _gfea :=_afa -_fgbe ._aabc ;_gfea > 0&&len (_fgbe ._eadf )-1< _afa {_fb .Log .Trace ("\u0042\u0079\u0074e\u0044\u0069\u0066\u0066\u003a\u0020\u0025\u0064",_gfea );return _g .Errorf (_gce ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_fgbe ._aabc =_afa ;_fb .Log .Trace ("\u0042\u0069\u0074I\u006e\u0064\u0065\u0078:\u0020\u0027\u0025\u0064\u0027\u002c\u0020B\u0079\u0074\u0065\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027",_fgbe ._gbg ,_fgbe ._aabc );return nil ;};func (_cf *BufferedWriter )ResetBitIndex (){_cf ._df =0};func (_fcf *SubstreamReader )readBool ()(_ffdb bool ,_gee error ){if _fcf ._aba ==0{_fcf ._dfd ,_gee =_fcf .readBufferByte ();if _gee !=nil {return false ,_gee ;};_ffdb =(_fcf ._dfd &0x80)!=0;_fcf ._dfd ,_fcf ._aba =_fcf ._dfd &0x7f,7;return _ffdb ,nil ;};_fcf ._aba --;_ffdb =(_fcf ._dfd &(1<<_fcf ._aba ))!=0;_fcf ._dfd &=1<<_fcf ._aba -1;return _ffdb ,nil ;};func (_daa *SubstreamReader )fillBuffer ()error {if uint64 (_daa ._efe .StreamPosition ())!=_daa ._fda +_daa ._agb {_ ,_fgb :=_daa ._efe .Seek (int64 (_daa ._fda +_daa ._agb ),_a .SeekStart );if _fgb !=nil {return _fgb ;};};_daa ._dgf =uint64 (_daa ._fda );_bfb :=_afc (uint64 (len (_daa ._efgg )),_daa ._cca -_daa ._fda );_fdc :=make ([]byte ,_bfb );_cag ,_ffd :=_daa ._efe .Read (_fdc );if _ffd !=nil {return _ffd ;};for _deb :=uint64 (0);_deb < _bfb ;_deb ++{_daa ._efgg [_deb ]=_fdc [_deb ];};_daa ._bb =_daa ._dgf +uint64 (_cag );return nil ;};func (_aad *SubstreamReader )BitPosition ()int {return int (_aad ._aba )};func (_acc *SubstreamReader )Offset ()uint64 {return _acc ._agb };var _ _a .ByteWriter =&BufferedWriter {};func (_de *BufferedWriter )grow (_dfa int ){if _de ._e ==nil &&_dfa < _gg {_de ._e =make ([]byte ,_dfa ,_gg );return ;};_af :=len (_de ._e );if _de ._df !=0{_af ++;};_gdd :=cap (_de ._e );switch {case _dfa <=_gdd /2-_af :_fb .Log .Trace ("\u005b\u0042\u0075\u0066\u0066\u0065r\u0065\u0064\u0057\u0072\u0069t\u0065\u0072\u005d\u0020\u0067\u0072o\u0077\u0020\u002d\u0020\u0072e\u0073\u006c\u0069\u0063\u0065\u0020\u006f\u006e\u006c\u0079\u002e\u0020L\u0065\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0043\u0061\u0070\u003a\u0020'\u0025\u0064\u0027\u002c\u0020\u006e\u003a\u0020'\u0025\u0064\u0027",len (_de ._e ),cap (_de ._e ),_dfa );_fb .Log .Trace ("\u0020\u006e\u0020\u003c\u003d\u0020\u0063\u0020\u002f\u0020\u0032\u0020\u002d\u006d\u002e \u0043:\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u006d\u003a\u0020\u0027\u0025\u0064\u0027",_gdd ,_af );copy (_de ._e ,_de ._e [_de .fullOffset ():]);case _gdd > _cd -_gdd -_dfa :_fb .Log .Error ("\u0042\u0055F\u0046\u0045\u0052 \u0074\u006f\u006f\u0020\u006c\u0061\u0072\u0067\u0065");return ;default:_faa :=make ([]byte ,2*_gdd +_dfa );copy (_faa ,_de ._e );_de ._e =_faa ;};_de ._e =_de ._e [:_af +_dfa ];};var (_ _a .Reader =&Reader {};_ _a .ByteReader =&Reader {};_ _a .Seeker =&Reader {};_ StreamReader =&Reader {};);func (_fcb *Writer )byteCapacity ()int {_fgc :=len (_fcb ._eadf )-_fcb ._aabc ;if _fcb ._gbg !=0{_fgc --;};return _fgc ;};func (_aaa *SubstreamReader )Read (b []byte )(_bbc int ,_ecd error ){if _aaa ._fda >=_aaa ._cca {_fb .Log .Trace ("\u0053\u0074\u0072e\u0061\u006d\u0050\u006fs\u003a\u0020\u0027\u0025\u0064\u0027\u0020>\u003d\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027",_aaa ._fda ,_aaa ._cca );return 0,_a .EOF ;};for ;_bbc < len (b );_bbc ++{if b [_bbc ],_ecd =_aaa .readUnalignedByte ();_ecd !=nil {if _ecd ==_a .EOF {return _bbc ,nil ;};return 0,_ecd ;};};return _bbc ,nil ;};func (_afe *Writer )ResetBit (){_afe ._gbg =0};type Writer struct{_eadf []byte ;_gbg uint8 ;_aabc int ;_aae bool ;};func (_fgge *BufferedWriter )writeShiftedBytes (_ead []byte )int {for _ ,_ca :=range _ead {_fgge .writeByte (_ca );};return len (_ead );};func (_ce *Reader )Align ()(_dga byte ){_dga =_ce ._eec ;_ce ._eec =0;return _dga };func (_bgd *SubstreamReader )Align ()(_acef byte ){_acef =_bgd ._aba ;_bgd ._aba =0;return _acef };func (_ffa *SubstreamReader )StreamPosition ()int64 {return int64 (_ffa ._fda )};func (_ab *BufferedWriter )fullOffset ()int {_cg :=_ab ._dd ;if _ab ._df !=0{_cg ++;};return _cg ;};func (_ggb *BufferedWriter )tryGrowByReslice (_be int )bool {if _gbe :=len (_ggb ._e );_be <=cap (_ggb ._e )-_gbe {_ggb ._e =_ggb ._e [:_gbe +_be ];return true ;};return false ;};func (_cc *BufferedWriter )WriteBit (bit int )error {if bit !=1&&bit !=0{return _g .Errorf ("\u0042\u0075\u0066fe\u0072\u0065\u0064\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065\u0042\u0069\u0074","\u0062\u0069\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u006du\u0073\u0074\u0020\u0062e\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u007d\u0020\u0062\u0075\u0074\u0020\u0069\u0073\u003a\u0020\u0025\u0064",bit );};if len (_cc ._e )-1< _cc ._dd {_cc .expandIfNeeded (1);};_egc :=_cc ._df ;if _cc ._ad {_egc =7-_cc ._df ;};_cc ._e [_cc ._dd ]|=byte (uint16 (bit <<_egc )&0xff);_cc ._df ++;if _cc ._df ==8{_cc ._dd ++;_cc ._df =0;};return nil ;};func (_dg *BufferedWriter )FinishByte (){if _dg ._df ==0{return ;};_dg ._df =0;_dg ._dd ++;};func (_bcb *Reader )readBool ()(_gef bool ,_ebg error ){if _bcb ._eec ==0{_bcb ._cga ,_ebg =_bcb .readBufferByte ();if _ebg !=nil {return false ,_ebg ;};_gef =(_bcb ._cga &0x80)!=0;_bcb ._cga ,_bcb ._eec =_bcb ._cga &0x7f,7;return _gef ,nil ;};_bcb ._eec --;_gef =(_bcb ._cga &(1<<_bcb ._eec ))!=0;_bcb ._cga &=1<<_bcb ._eec -1;return _gef ,nil ;};func NewSubstreamReader (r StreamReader ,offset ,length uint64 )(*SubstreamReader ,error ){if r ==nil {return nil ,_d .New ("\u0072o\u006ft\u0020\u0072\u0065\u0061\u0064e\u0072\u0020i\u0073\u0020\u006e\u0069\u006c");};_fb .Log .Trace ("\u004e\u0065\u0077\u0053\u0075\u0062\u0073\u0074r\u0065\u0061\u006dRe\u0061\u0064\u0065\u0072\u0020\u0061t\u0020\u006f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0064\u0020\u0077\u0069\u0074h\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064",offset ,length );return &SubstreamReader {_efe :r ,_agb :offset ,_cca :length ,_efgg :make ([]byte ,length )},nil ;};type BinaryWriter interface{BitWriter ;_a .Writer ;_a .ByteWriter ;Data ()[]byte ;};func (_cdb *Writer )UseMSB ()bool {return _cdb ._aae };func (_fdf *SubstreamReader )ReadBool ()(bool ,error ){return _fdf .readBool ()};func (_fge *SubstreamReader )ReadBit ()(_fc int ,_cgd error ){_afg ,_cgd :=_fge .readBool ();if _cgd !=nil {return 0,_cgd ;};if _afg {_fc =1;};return _fc ,nil ;};func (_fgg *BufferedWriter )WriteBits (bits uint64 ,number int )(_gc int ,_b error ){const _ddd ="\u0042u\u0066\u0066\u0065\u0072e\u0064\u0057\u0072\u0069\u0074e\u0072.\u0057r\u0069\u0074\u0065\u0072\u0042\u0069\u0074s";if number < 0||number > 64{return 0,_g .Errorf (_ddd ,"\u0062i\u0074\u0073 \u006e\u0075\u006db\u0065\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020r\u0061\u006e\u0067\u0065\u0020\u003c\u0030\u002c\u0036\u0034\u003e,\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",number );};_eb :=number /8;if _eb > 0{_ffg :=number -_eb *8;for _ea :=_eb -1;_ea >=0;_ea --{_ebe :=byte ((bits >>uint (_ea *8+_ffg ))&0xff);if _b =_fgg .WriteByte (_ebe );_b !=nil {return _gc ,_g .Wrapf (_b ,_ddd ,"\u0062\u0079\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_eb -_ea +1);};};number -=_eb *8;if number ==0{return _eb ,nil ;};};var _ba int ;for _fag :=0;_fag < number ;_fag ++{if _fgg ._ad {_ba =int ((bits >>uint (number -1-_fag ))&0x1);}else {_ba =int (bits &0x1);bits >>=1;};if _b =_fgg .WriteBit (_ba );_b !=nil {return _gc ,_g .Wrapf (_b ,_ddd ,"\u0062i\u0074\u003a\u0020\u0025\u0064",_fag );};};return _eb ,nil ;};func (_fcc *Writer )WriteBits (bits uint64 ,number int )(_degc int ,_aaae error ){const _cfge ="\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065r\u0042\u0069\u0074\u0073";if number < 0||number > 64{return 0,_g .Errorf (_cfge ,"\u0062i\u0074\u0073 \u006e\u0075\u006db\u0065\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020r\u0061\u006e\u0067\u0065\u0020\u003c\u0030\u002c\u0036\u0034\u003e,\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",number );};if number ==0{return 0,nil ;};_gea :=number /8;if _gea > 0{_dde :=number -_gea *8;for _bbg :=_gea -1;_bbg >=0;_bbg --{_fbcd :=byte ((bits >>uint (_bbg *8+_dde ))&0xff);if _aaae =_fcc .WriteByte (_fbcd );_aaae !=nil {return _degc ,_g .Wrapf (_aaae ,_cfge ,"\u0062\u0079\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_gea -_bbg +1);};};number -=_gea *8;if number ==0{return _gea ,nil ;};};var _cfgb int ;for _egf :=0;_egf < number ;_egf ++{if _fcc ._aae {_cfgb =int ((bits >>uint (number -1-_egf ))&0x1);}else {_cfgb =int (bits &0x1);bits >>=1;};if _aaae =_fcc .WriteBit (_cfgb );_aaae !=nil {return _degc ,_g .Wrapf (_aaae ,_cfge ,"\u0062i\u0074\u003a\u0020\u0025\u0064",_egf );};};return _gea ,nil ;};func (_ccb *Writer )writeBit (_dgfc uint8 )error {if len (_ccb ._eadf )-1< _ccb ._aabc {return _a .EOF ;};_bbb :=_ccb ._gbg ;if _ccb ._aae {_bbb =7-_ccb ._gbg ;};_ccb ._eadf [_ccb ._aabc ]|=byte (uint16 (_dgfc <<_bbb )&0xff);_ccb ._gbg ++;if _ccb ._gbg ==8{_ccb ._aabc ++;_ccb ._gbg =0;};return nil ;};func (_ace *Reader )Reset (){_ace ._gcc =_ace ._cgb ;_ace ._eec =_ace ._fd };func (_gga *SubstreamReader )readUnalignedByte ()(_gbd byte ,_cdda error ){_cee :=_gga ._aba ;_gbd =_gga ._dfd <<(8-_cee );_gga ._dfd ,_cdda =_gga .readBufferByte ();if _cdda !=nil {return 0,_cdda ;};_gbd |=_gga ._dfd >>_cee ;_gga ._dfd &=1<<_cee -1;return _gbd ,nil ;};func (_ggf *Writer )WriteBit (bit int )error {switch bit {case 0,1:return _ggf .writeBit (uint8 (bit ));};return _g .Error ("\u0057\u0072\u0069\u0074\u0065\u0042\u0069\u0074","\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0062\u0069\u0074\u0020v\u0061\u006c\u0075\u0065");};func (_bba *SubstreamReader )ReadByte ()(byte ,error ){if _bba ._aba ==0{return _bba .readBufferByte ();};return _bba .readUnalignedByte ();};func (_fbc *SubstreamReader )Seek (offset int64 ,whence int )(int64 ,error ){switch whence {case _a .SeekStart :_fbc ._fda =uint64 (offset );case _a .SeekCurrent :_fbc ._fda +=uint64 (offset );case _a .SeekEnd :_fbc ._fda =_fbc ._cca +uint64 (offset );default:return 0,_d .New ("\u0072\u0065\u0061d\u0065\u0072\u002e\u0053\u0075\u0062\u0073\u0074\u0072\u0065\u0061\u006d\u0052\u0065\u0061\u0064\u0065\u0072\u002e\u0053\u0065\u0065\u006b\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0077\u0068\u0065\u006e\u0063\u0065");};_fbc ._aba =0;return int64 (_fbc ._fda ),nil ;};func NewWriter (data []byte )*Writer {return &Writer {_eadf :data }};func (_fae *SubstreamReader )Mark (){_fae ._dge =_fae ._fda ;_fae ._cdcd =_fae ._aba };func (_ffc *Reader )read (_bga []byte )(int ,error ){if _ffc ._gcc >=int64 (len (_ffc ._ffgf )){return 0,_a .EOF ;};_ffc ._ded =-1;_fdb :=copy (_bga ,_ffc ._ffgf [_ffc ._gcc :]);_ffc ._gcc +=int64 (_fdb );return _fdb ,nil ;};func (_dcbc *Writer )WriteByte (c byte )error {return _dcbc .writeByte (c )};func (_aef *Writer )FinishByte (){if _aef ._gbg ==0{return ;};_aef ._gbg =0;_aef ._aabc ++;};var _ BinaryWriter =&BufferedWriter {};func (_afb *Reader )ReadBool ()(bool ,error ){return _afb .readBool ()};func NewWriterMSB (data []byte )*Writer {return &Writer {_eadf :data ,_aae :true }};func (_fggd *SubstreamReader )readBufferByte ()(byte ,error ){if _fggd ._fda >=_fggd ._cca {return 0,_a .EOF ;};if _fggd ._fda >=_fggd ._bb ||_fggd ._fda < _fggd ._dgf {if _cbf :=_fggd .fillBuffer ();_cbf !=nil {return 0,_cbf ;};};_ae :=_fggd ._efgg [_fggd ._fda -_fggd ._dgf ];_fggd ._fda ++;return _ae ,nil ;};func (_caa *Writer )writeByte (_cbeb byte )error {if _caa ._aabc > len (_caa ._eadf )-1{return _a .EOF ;};if _caa ._aabc ==len (_caa ._eadf )-1&&_caa ._gbg !=0{return _a .EOF ;};if _caa ._gbg ==0{_caa ._eadf [_caa ._aabc ]=_cbeb ;_caa ._aabc ++;return nil ;};if _caa ._aae {_caa ._eadf [_caa ._aabc ]|=_cbeb >>_caa ._gbg ;_caa ._aabc ++;_caa ._eadf [_caa ._aabc ]=byte (uint16 (_cbeb )<<(8-_caa ._gbg )&0xff);}else {_caa ._eadf [_caa ._aabc ]|=byte (uint16 (_cbeb )<<_caa ._gbg &0xff);_caa ._aabc ++;_caa ._eadf [_caa ._aabc ]=_cbeb >>(8-_caa ._gbg );};return nil ;};func (_fea *Writer )Data ()[]byte {return _fea ._eadf };func (_gff *Reader )Length ()uint64 {return uint64 (len (_gff ._ffgf ))};func (_cae *SubstreamReader )ReadBits (n byte )(_cfg uint64 ,_ece error ){if n < _cae ._aba {_bea :=_cae ._aba -n ;_cfg =uint64 (_cae ._dfd >>_bea );_cae ._dfd &=1<<_bea -1;_cae ._aba =_bea ;return _cfg ,nil ;};if n > _cae ._aba {if _cae ._aba > 0{_cfg =uint64 (_cae ._dfd );n -=_cae ._aba ;};var _gfb byte ;for n >=8{_gfb ,_ece =_cae .readBufferByte ();if _ece !=nil {return 0,_ece ;};_cfg =_cfg <<8+uint64 (_gfb );n -=8;};if n > 0{if _cae ._dfd ,_ece =_cae .readBufferByte ();_ece !=nil {return 0,_ece ;};_fca :=8-n ;_cfg =_cfg <<n +uint64 (_cae ._dfd >>_fca );_cae ._dfd &=1<<_fca -1;_cae ._aba =_fca ;}else {_cae ._aba =0;};return _cfg ,nil ;};_cae ._aba =0;return uint64 (_cae ._dfd ),nil ;};func (_dcb *BufferedWriter )WriteByte (bt byte )error {if _dcb ._dd > len (_dcb ._e )-1||(_dcb ._dd ==len (_dcb ._e )-1&&_dcb ._df !=0){_dcb .expandIfNeeded (1);};_dcb .writeByte (bt );return nil ;};func (_cad *Reader )readUnalignedByte ()(_dgb byte ,_fbgc error ){_aab :=_cad ._eec ;_dgb =_cad ._cga <<(8-_aab );_cad ._cga ,_fbgc =_cad .readBufferByte ();if _fbgc !=nil {return 0,_fbgc ;};_dgb |=_cad ._cga >>_aab ;_cad ._cga &=1<<_aab -1;return _dgb ,nil ;};