//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_cd "bufio";_ag "bytes";_c "encoding/hex";_fc "errors";_e "fmt";_be "github.com/unidoc/unipdf/v3/common";_ee "github.com/unidoc/unipdf/v3/core";_fg "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_ea "io";_cg "sort";_b "strconv";_ff "strings";_a "unicode/utf16";);func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_bef ,_cea :=cmap .BytesToCharcodes (data );if !_cea {_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );return "",0;};_cfe :=make ([]string ,len (_bef ));var _bdd []CharCode ;for _ge ,_eg :=range _bef {_afd ,_bbc :=cmap ._fef [_eg ];if !_bbc {_bdd =append (_bdd ,_eg );_afd =MissingCodeString ;};_cfe [_ge ]=_afd ;};_bcd :=_ff .Join (_cfe ,"");if len (_bdd )> 0{_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_bef ,len (_bdd ),_bdd ,_bcd ,cmap );};return _bcd ,len (_bdd );};type charRange struct{_cb CharCode ;_d CharCode ;};type cmapFloat struct{_eedf float64 };func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _fae ,_faf :=cmap ._fef [code ];_faf {return _fae ,true ;};return MissingCodeString ,false ;};func _ffg (_gfd string )rune {_gfdc :=[]rune (_gfd );return _gfdc [len (_gfdc )-1]};func _dd (_bae bool )*CMap {_ebc :=16;if _bae {_ebc =8;};return &CMap {_fe :_ebc ,_eb :make (map[CharCode ]CharCode ),_bf :make (map[CharCode ]CharCode ),_fef :make (map[CharCode ]string ),_fcf :make (map[string ]CharCode )};};func (cmap *CMap )parseCodespaceRange ()error {for {_bcg ,_bgd :=cmap .parseObject ();if _bgd !=nil {if _bgd ==_ea .EOF {break ;};return _bgd ;};_dbb ,_aga :=_bcg .(cmapHexString );if !_aga {if _gbg ,_fac :=_bcg .(cmapOperand );_fac {if _gbg .Operand ==_ade {return nil ;};return _fc .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_bcg ,_bgd =cmap .parseObject ();if _bgd !=nil {if _bgd ==_ea .EOF {break ;};return _bgd ;};_abd ,_aga :=_bcg .(cmapHexString );if !_aga {return _fc .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_dbb ._cec )!=len (_abd ._cec ){return _fc .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_cgg :=_bfbf (_dbb );_ffbd :=_bfbf (_abd );if _ffbd < _cgg {_be .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_cgg ,_ffbd );return ErrBadCMap ;};_eba :=_abd ._afc ;_gfea :=Codespace {NumBytes :_eba ,Low :_cgg ,High :_ffbd };cmap ._ga =append (cmap ._ga ,_gfea );_be .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_cgg ,_ffbd );};if len (cmap ._ga )==0{_be .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_bgcb *cMapParser )parseName ()(cmapName ,error ){_afa :="";_edfg :=false ;for {_dac ,_cefg :=_bgcb ._fgf .Peek (1);if _cefg ==_ea .EOF {break ;};if _cefg !=nil {return cmapName {_afa },_cefg ;};if !_edfg {if _dac [0]=='/'{_edfg =true ;_bgcb ._fgf .ReadByte ();}else {_be .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_dac ,_dac );return cmapName {_afa },_e .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_dac [0]);};}else {if _ee .IsWhiteSpace (_dac [0]){break ;}else if (_dac [0]=='/')||(_dac [0]=='[')||(_dac [0]=='(')||(_dac [0]==']')||(_dac [0]=='<')||(_dac [0]=='>'){break ;}else if _dac [0]=='#'{_fagd ,_dbgf :=_bgcb ._fgf .Peek (3);if _dbgf !=nil {return cmapName {_afa },_dbgf ;};_bgcb ._fgf .Discard (3);_baa ,_dbgf :=_c .DecodeString (string (_fagd [1:3]));if _dbgf !=nil {return cmapName {_afa },_dbgf ;};_afa +=string (_baa );}else {_gbge ,_ :=_bgcb ._fgf .ReadByte ();_afa +=string (_gbge );};};};return cmapName {_afa },nil ;};func _gcc ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )matchCode (_ec []byte )(_dbfc CharCode ,_aa int ,_dag bool ){for _ffe :=0;_ffe < _ce ;_ffe ++{if _ffe < len (_ec ){_dbfc =_dbfc <<8|CharCode (_ec [_ffe ]);_aa ++;};_dag =cmap .inCodespace (_dbfc ,_ffe +1);if _dag {return _dbfc ,_aa ,true ;};};_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_ec ,string (_ec ),cmap );return 0,0,false ;};func (_fcd *cMapParser )parseString ()(cmapString ,error ){_fcd ._fgf .ReadByte ();_fbgb :=_ag .Buffer {};_gfdf :=1;for {_abe ,_bfba :=_fcd ._fgf .Peek (1);if _bfba !=nil {return cmapString {_fbgb .String ()},_bfba ;};if _abe [0]=='\\'{_fcd ._fgf .ReadByte ();_fbd ,_aad :=_fcd ._fgf .ReadByte ();if _aad !=nil {return cmapString {_fbgb .String ()},_aad ;};if _ee .IsOctalDigit (_fbd ){_gdg ,_ggbe :=_fcd ._fgf .Peek (2);if _ggbe !=nil {return cmapString {_fbgb .String ()},_ggbe ;};var _fbc []byte ;_fbc =append (_fbc ,_fbd );for _ ,_eeaf :=range _gdg {if _ee .IsOctalDigit (_eeaf ){_fbc =append (_fbc ,_eeaf );}else {break ;};};_fcd ._fgf .Discard (len (_fbc )-1);_be .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_fbc );_fabf ,_ggbe :=_b .ParseUint (string (_fbc ),8,32);if _ggbe !=nil {return cmapString {_fbgb .String ()},_ggbe ;};_fbgb .WriteByte (byte (_fabf ));continue ;};switch _fbd {case 'n':_fbgb .WriteByte ('\n');case 'r':_fbgb .WriteByte ('\r');case 't':_fbgb .WriteByte ('\t');case 'b':_fbgb .WriteByte ('\b');case 'f':_fbgb .WriteByte ('\f');case '(':_fbgb .WriteByte ('(');case ')':_fbgb .WriteByte (')');case '\\':_fbgb .WriteByte ('\\');};continue ;}else if _abe [0]=='('{_gfdf ++;}else if _abe [0]==')'{_gfdf --;if _gfdf ==0{_fcd ._fgf .ReadByte ();break ;};};_fdfa ,_ :=_fcd ._fgf .ReadByte ();_fbgb .WriteByte (_fdfa );};return cmapString {_fbgb .String ()},nil ;};type cMapParser struct{_fgf *_cd .Reader };type cmapString struct{String string ;};func _adgg (_bgg ,_cdd int )int {if _bgg < _cdd {return _bgg ;};return _cdd ;};type cmapOperand struct{Operand string ;};func (cmap *CMap )parseSystemInfo ()error {_bce :=false ;_egag :=false ;_gfa :="";_fcg :=false ;_eef :=CIDSystemInfo {};for _ddgd :=0;_ddgd < 50&&!_fcg ;_ddgd ++{_egfe ,_bff :=cmap .parseObject ();if _bff !=nil {return _bff ;};switch _ccfg :=_egfe .(type ){case cmapDict :_gaeb :=_ccfg .Dict ;_bgf ,_fbff :=_gaeb ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_fbff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_aebb ,_fbff :=_bgf .(cmapString );if !_fbff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_eef .Registry =_aebb .String ;_bgf ,_fbff =_gaeb ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_fbff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_aebb ,_fbff =_bgf .(cmapString );if !_fbff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_eef .Ordering =_aebb .String ;_gc ,_fbff :=_gaeb ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_fbff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_baec ,_fbff :=_gc .(cmapInt );if !_fbff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_eef .Supplement =int (_baec ._aebf );_fcg =true ;case cmapOperand :switch _ccfg .Operand {case "\u0062\u0065\u0067i\u006e":_bce =true ;case "\u0065\u006e\u0064":_fcg =true ;case "\u0064\u0065\u0066":_egag =false ;};case cmapName :if _bce {_gfa =_ccfg .Name ;_egag =true ;};case cmapString :if _egag {switch _gfa {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_eef .Registry =_ccfg .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_eef .Ordering =_ccfg .String ;};};case cmapInt :if _egag {switch _gfa {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_eef .Supplement =int (_ccfg ._aebf );};};};};if !_fcg {_be .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");return ErrBadCMap ;};cmap ._bad =_eef ;return nil ;};type cmapName struct{Name string ;};func NewCIDSystemInfo (obj _ee .PdfObject )(_da CIDSystemInfo ,_g error ){_cf ,_cba :=_ee .GetDict (obj );if !_cba {return CIDSystemInfo {},_ee .ErrTypeError ;};_cff ,_cba :=_ee .GetStringVal (_cf .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_cba {return CIDSystemInfo {},_ee .ErrTypeError ;};_df ,_cba :=_ee .GetStringVal (_cf .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_cba {return CIDSystemInfo {},_ee .ErrTypeError ;};_bd ,_cba :=_ee .GetIntVal (_cf .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_cba {return CIDSystemInfo {},_ee .ErrTypeError ;};return CIDSystemInfo {Registry :_cff ,Ordering :_df ,Supplement :_bd },nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_afda ,_eac :=cmap ._fcf [s ];return _afda ,_eac ;};func _dbcf (_bbg string )string {_gaa :=[]rune (_bbg );_feg :=make ([]string ,len (_gaa ));for _ffb ,_edf :=range _gaa {_feg [_ffb ]=_e .Sprintf ("\u0025\u0030\u0034\u0078",_edf );};return _e .Sprintf ("\u003c\u0025\u0073\u003e",_ff .Join (_feg ,""));};func (cmap *CMap )Stream ()(*_ee .PdfObjectStream ,error ){if cmap ._gf !=nil {return cmap ._gf ,nil ;};_ced ,_fdbc :=_ee .MakeStream (cmap .Bytes (),_ee .NewFlateEncoder ());if _fdbc !=nil {return nil ,_fdbc ;};cmap ._gf =_ced ;return cmap ._gf ,nil ;};type CharCode uint32 ;func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_gb :=_eaa (name );if _gb !=nil {return nil ,_gb ;};if cmap ._fa ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_acb ,_gb :=_eaa (cmap ._fa );if _gb !=nil {return nil ,_gb ;};for _cbf ,_fdd :=range _acb ._eb {if _ ,_fdb :=cmap ._eb [_cbf ];!_fdb {cmap ._eb [_cbf ]=_fdd ;};};for _ ,_bfa :=range _acb ._ga {cmap ._ga =append (cmap ._ga ,_bfa );};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )Type ()int {return cmap ._cc };func _bfbf (_gge cmapHexString )CharCode {_eaef :=CharCode (0);for _ ,_ebdc :=range _gge ._cec {_eaef <<=8;_eaef |=CharCode (_ebdc );};return _eaef ;};func (cmap *CMap )toBfData ()string {if len (cmap ._fef )==0{return "";};_dbg :=make ([]CharCode ,0,len (cmap ._fef ));for _ddd :=range cmap ._fef {_dbg =append (_dbg ,_ddd );};_cg .Slice (_dbg ,func (_edb ,_deg int )bool {return _dbg [_edb ]< _dbg [_deg ]});var _ggg []charRange ;_ggc :=charRange {_dbg [0],_dbg [0]};_gbd :=cmap ._fef [_dbg [0]];for _ ,_dc :=range _dbg [1:]{_gga :=cmap ._fef [_dc ];if _dc ==_ggc ._d +1&&_ffg (_gga )==_ffg (_gbd )+1{_ggc ._d =_dc ;}else {_ggg =append (_ggg ,_ggc );_ggc ._cb ,_ggc ._d =_dc ,_dc ;};_gbd =_gga ;};_ggg =append (_ggg ,_ggc );var _cef []CharCode ;var _fge []fbRange ;for _ ,_ffd :=range _ggg {if _ffd ._cb ==_ffd ._d {_cef =append (_cef ,_ffd ._cb );}else {_fge =append (_fge ,fbRange {_ac :_ffd ._cb ,_eeg :_ffd ._d ,_bg :cmap ._fef [_ffd ._cb ]});};};_be .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_ggg ),len (_cef ),len (_fge ));var _cee []string ;if len (_cef )> 0{_dfc :=(len (_cef )+_dfb -1)/_dfb ;for _geg :=0;_geg < _dfc ;_geg ++{_ebg :=_adgg (len (_cef )-_geg *_dfb ,_dfb );_cee =append (_cee ,_e .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_ebg ));for _bgc :=0;_bgc < _ebg ;_bgc ++{_eca :=_cef [_geg *_dfb +_bgc ];_fgd :=cmap ._fef [_eca ];_cee =append (_cee ,_e .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_eca ,_dbcf (_fgd )));};_cee =append (_cee ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_fge )> 0{_dcd :=(len (_fge )+_dfb -1)/_dfb ;for _gbf :=0;_gbf < _dcd ;_gbf ++{_fddg :=_adgg (len (_fge )-_gbf *_dfb ,_dfb );_cee =append (_cee ,_e .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_fddg ));for _bfb :=0;_bfb < _fddg ;_bfb ++{_cfb :=_fge [_gbf *_dfb +_bfb ];_cee =append (_cee ,_e .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_cfb ._ac ,_cfb ._eeg ,_dbcf (_cfb ._bg )));};_cee =append (_cee ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _ff .Join (_cee ,"\u000a");};const (_dfb =100;_edbc ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";_gdf ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";);func IsPredefinedCMap (name string )bool {return _fg .AssetExists (name )};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (cmap *CMap )computeInverseMappings (){for _eae ,_beb :=range cmap ._eb {if _db ,_dff :=cmap ._bf [_beb ];!_dff ||(_dff &&_db > _eae ){cmap ._bf [_beb ]=_eae ;};};for _ab ,_dg :=range cmap ._fef {if _bc ,_gg :=cmap ._fcf [_dg ];!_gg ||(_gg &&_bc > _ab ){cmap ._fcf [_dg ]=_ab ;};};_cg .Slice (cmap ._ga ,func (_dae ,_dbc int )bool {return cmap ._ga [_dae ].Low < cmap ._ga [_dbc ].Low });};func (_ggdb *cMapParser )parseObject ()(cmapObject ,error ){_ggdb .skipSpaces ();for {_gegg ,_ggcd :=_ggdb ._fgf .Peek (2);if _ggcd !=nil {return nil ,_ggcd ;};if _gegg [0]=='%'{_ggdb .parseComment ();_ggdb .skipSpaces ();continue ;}else if _gegg [0]=='/'{_feb ,_ggcdb :=_ggdb .parseName ();return _feb ,_ggcdb ;}else if _gegg [0]=='('{_dcba ,_afg :=_ggdb .parseString ();return _dcba ,_afg ;}else if _gegg [0]=='['{_begd ,_bfd :=_ggdb .parseArray ();return _begd ,_bfd ;}else if (_gegg [0]=='<')&&(_gegg [1]=='<'){_bcec ,_ceea :=_ggdb .parseDict ();return _bcec ,_ceea ;}else if _gegg [0]=='<'{_eed ,_gab :=_ggdb .parseHexString ();return _eed ,_gab ;}else if _ee .IsDecimalDigit (_gegg [0])||(_gegg [0]=='-'&&_ee .IsDecimalDigit (_gegg [1])){_dbe ,_aag :=_ggdb .parseNumber ();if _aag !=nil {return nil ,_aag ;};return _dbe ,nil ;}else {_cce ,_gfff :=_ggdb .parseOperand ();if _gfff !=nil {return nil ,_gfff ;};return _cce ,nil ;};};};func (_fafe *cMapParser )parseArray ()(cmapArray ,error ){_eagg :=cmapArray {};_eagg .Array =[]cmapObject {};_fafe ._fgf .ReadByte ();for {_fafe .skipSpaces ();_def ,_dbd :=_fafe ._fgf .Peek (1);if _dbd !=nil {return _eagg ,_dbd ;};if _def [0]==']'{_fafe ._fgf .ReadByte ();break ;};_dgf ,_dbd :=_fafe .parseObject ();if _dbd !=nil {return _eagg ,_dbd ;};_eagg .Array =append (_eagg .Array ,_dgf );};return _eagg ,nil ;};func (cmap *CMap )parseBfchar ()error {for {_caa ,_ace :=cmap .parseObject ();if _ace !=nil {if _ace ==_ea .EOF {break ;};return _ace ;};var _ffgc CharCode ;switch _dbcfc :=_caa .(type ){case cmapOperand :if _dbcfc .Operand ==_dde {return nil ;};return _fc .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_ffgc =_bfbf (_dbcfc );default:return _fc .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_caa ,_ace =cmap .parseObject ();if _ace !=nil {if _ace ==_ea .EOF {break ;};return _ace ;};var _ggaf []rune ;switch _eabd :=_caa .(type ){case cmapOperand :if _eabd .Operand ==_dde {return nil ;};_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_eabd );return ErrBadCMap ;case cmapHexString :_ggaf =_cdfd (_eabd );case cmapName :_be .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_eabd );_ggaf =[]rune {MissingCodeRune };default:_be .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_caa );return ErrBadCMap ;};cmap ._fef [_ffgc ]=string (_ggaf );};return nil ;};func (_gbe *cMapParser )parseOperand ()(cmapOperand ,error ){_cefb :=cmapOperand {};_dbda :=_ag .Buffer {};for {_daf ,_afac :=_gbe ._fgf .Peek (1);if _afac !=nil {if _afac ==_ea .EOF {break ;};return _cefb ,_afac ;};if _ee .IsDelimiter (_daf [0]){break ;};if _ee .IsWhiteSpace (_daf [0]){break ;};_bab ,_ :=_gbe ._fgf .ReadByte ();_dbda .WriteByte (_bab );};if _dbda .Len ()==0{return _cefb ,_e .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_cefb .Operand =_dbda .String ();return _cefb ,nil ;};func _accge (_facg cmapHexString )rune {_beeb :=_cdfd (_facg );if _afbg :=len (_beeb );_afbg ==0{_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_facg );return MissingCodeRune ;};if len (_beeb )> 1{_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_facg ,_beeb );};return _beeb [0];};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};const (_dbfg ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_fca ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_ggde ="\u0065n\u0064\u0063\u006d\u0061\u0070";_aebe ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_ade ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_dcb ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_dde ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_fff ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_bee ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_dbgg ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_agg ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_gffa ="\u0075s\u0065\u0063\u006d\u0061\u0070";_gee ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_cbd ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_cfa ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )String ()string {_fbb :=cmap ._bad ;_egfd :=[]string {_e .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._fe ),_e .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._cc )};if cmap ._ba !=""{_egfd =append (_egfd ,_e .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._ba ));};if cmap ._fa !=""{_egfd =append (_egfd ,_e .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._fa ));};_egfd =append (_egfd ,_e .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_fbb .String ()));if len (cmap ._ga )> 0{_egfd =append (_egfd ,_e .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._ga )));};if len (cmap ._fef )> 0{_egfd =append (_egfd ,_e .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._fef )));};return _e .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._eec ,_ff .Join (_egfd ,"\u0020"));};type CMap struct{*cMapParser ;_eec string ;_fe int ;_cc int ;_ba string ;_fa string ;_bad CIDSystemInfo ;_ga []Codespace ;_eb map[CharCode ]CharCode ;_bf map[CharCode ]CharCode ;_fef map[CharCode ]string ;_fcf map[string ]CharCode ;_bfc []byte ;_gf *_ee .PdfObjectStream ;};func (_dbca *cMapParser )skipSpaces ()(int ,error ){_eff :=0;for {_eaae ,_aege :=_dbca ._fgf .Peek (1);if _aege !=nil {return 0,_aege ;};if _ee .IsWhiteSpace (_eaae [0]){_dbca ._fgf .ReadByte ();_eff ++;}else {break ;};};return _eff ,nil ;};func (cmap *CMap )parseBfrange ()error {for {var _aea CharCode ;_bbb ,_cffg :=cmap .parseObject ();if _cffg !=nil {if _cffg ==_ea .EOF {break ;};return _cffg ;};switch _cac :=_bbb .(type ){case cmapOperand :if _cac .Operand ==_bee {return nil ;};return _fc .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_aea =_bfbf (_cac );default:return _fc .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _dea CharCode ;_bbb ,_cffg =cmap .parseObject ();if _cffg !=nil {if _cffg ==_ea .EOF {break ;};return _cffg ;};switch _egad :=_bbb .(type ){case cmapOperand :_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006d\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");return ErrBadCMap ;case cmapHexString :_dea =_bfbf (_egad );default:_be .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_bbb );return ErrBadCMap ;};_bbb ,_cffg =cmap .parseObject ();if _cffg !=nil {if _cffg ==_ea .EOF {break ;};return _cffg ;};switch _gba :=_bbb .(type ){case cmapArray :if len (_gba .Array )!=int (_dea -_aea )+1{_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");return ErrBadCMap ;};for _egd :=_aea ;_egd <=_dea ;_egd ++{_adgb :=_gba .Array [_egd -_aea ];_cbb ,_ede :=_adgb .(cmapHexString );if !_ede {return _fc .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");};_dfd :=_cdfd (_cbb );cmap ._fef [_egd ]=string (_dfd );};case cmapHexString :_cab :=_cdfd (_gba );_bebf :=len (_cab );for _aab :=_aea ;_aab <=_dea ;_aab ++{cmap ._fef [_aab ]=string (_cab );_cab [_bebf -1]++;};default:_be .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_bbb );return ErrBadCMap ;};};return nil ;};type cmapArray struct{Array []cmapObject ;};func _eaca (_aaf []byte )*cMapParser {_dca :=cMapParser {};_fag :=_ag .NewBuffer (_aaf );_dca ._fgf =_cd .NewReader (_fag );return &_dca ;};func (_cgd *cMapParser )parseHexString ()(cmapHexString ,error ){_cgd ._fgf .ReadByte ();_afbc :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_bege :=_ag .Buffer {};for {_cgd .skipSpaces ();_bbce ,_fcb :=_cgd ._fgf .Peek (1);if _fcb !=nil {return cmapHexString {},_fcb ;};if _bbce [0]=='>'{_cgd ._fgf .ReadByte ();break ;};_ggcf ,_ :=_cgd ._fgf .ReadByte ();if _ag .IndexByte (_afbc ,_ggcf )>=0{_bege .WriteByte (_ggcf );};};if _bege .Len ()%2==1{_be .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_bege .String ());_bege .WriteByte ('0');};_dbea :=_bege .Len ()/2;_bcca ,_ :=_c .DecodeString (_bege .String ());return cmapHexString {_afc :_dbea ,_cec :_bcca },nil ;};func (cmap *CMap )parse ()error {var _efg cmapObject ;for {_fea ,_cdf :=cmap .parseObject ();if _cdf !=nil {if _cdf ==_ea .EOF {break ;};_be .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_cdf );return _cdf ;};switch _ddfc :=_fea .(type ){case cmapOperand :_ecc :=_ddfc ;switch _ecc .Operand {case _aebe :_fcc :=cmap .parseCodespaceRange ();if _fcc !=nil {return _fcc ;};case _dbgg :_cfd :=cmap .parseCIDRange ();if _cfd !=nil {return _cfd ;};case _dcb :_adg :=cmap .parseBfchar ();if _adg !=nil {return _adg ;};case _fff :_fdg :=cmap .parseBfrange ();if _fdg !=nil {return _fdg ;};case _gffa :if _efg ==nil {_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_eag ,_dce :=_efg .(cmapName );if !_dce {_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_efg );return ErrBadCMap ;};cmap ._fa =_eag .Name ;case _dbfg :_dgc :=cmap .parseSystemInfo ();if _dgc !=nil {return _dgc ;};};case cmapName :_fga :=_ddfc ;switch _fga .Name {case _dbfg :_agb :=cmap .parseSystemInfo ();if _agb !=nil {return _agb ;};case _gee :_bebc :=cmap .parseName ();if _bebc !=nil {return _bebc ;};case _cbd :_eea :=cmap .parseType ();if _eea !=nil {return _eea ;};case _cfa :_beg :=cmap .parseVersion ();if _beg !=nil {return _beg ;};};};_efg =_fea ;};return nil ;};func (_bge *cMapParser )parseComment ()(string ,error ){var _faab _ag .Buffer ;_ ,_ebd :=_bge .skipSpaces ();if _ebd !=nil {return _faab .String (),_ebd ;};_dced :=true ;for {_cacd ,_acfa :=_bge ._fgf .Peek (1);if _acfa !=nil {_be .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_acfa );return _faab .String (),_acfa ;};if _dced &&_cacd [0]!='%'{return _faab .String (),ErrBadCMapComment ;};_dced =false ;if (_cacd [0]!='\r')&&(_cacd [0]!='\n'){_bfg ,_ :=_bge ._fgf .ReadByte ();_faab .WriteByte (_bfg );}else {break ;};};return _faab .String (),nil ;};func _eaa (_eaac string )(*CMap ,error ){_ddg ,_cbc :=_fg .Asset (_eaac );if _cbc !=nil {return nil ,_cbc ;};return LoadCmapFromDataCID (_ddg );};func _cdfd (_cccc cmapHexString )[]rune {if len (_cccc ._cec )==1{return []rune {rune (_cccc ._cec [0])};};_dgb :=_cccc ._cec ;if len (_dgb )%2!=0{_dgb =append (_dgb ,0);_be .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_cccc ,_dgb );};_cefgc :=len (_dgb )>>1;_aegg :=make ([]uint16 ,_cefgc );for _gfg :=0;_gfg < _cefgc ;_gfg ++{_aegg [_gfg ]=uint16 (_dgb [_gfg <<1])<<8+uint16 (_dgb [_gfg <<1+1]);};_badb :=_a .Decode (_aegg );return _badb ;};func (_dcf *cMapParser )parseNumber ()(cmapObject ,error ){_gbc ,_bfe :=_ee .ParseNumber (_dcf ._fgf );if _bfe !=nil {return nil ,_bfe ;};switch _bfga :=_gbc .(type ){case *_ee .PdfObjectFloat :return cmapFloat {float64 (*_bfga )},nil ;case *_ee .PdfObjectInteger :return cmapInt {int64 (*_bfga )},nil ;};return nil ,_e .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_gbc );};var (ErrBadCMap =_fc .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_fc .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_fc .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););type cmapObject interface{};func (cmap *CMap )Bytes ()[]byte {_be .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._bfc )> 0{return cmap ._bfc ;};cmap ._bfc =[]byte (_ff .Join ([]string {_edbc ,cmap .toBfData (),_gdf },"\u000a"));return cmap ._bfc ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_eegd ,_gad :=cmap ._eb [code ];return _eegd ,_gad ;};func (cmap *CMap )parseVersion ()error {_bebg :="";_efb :=false ;for _fbf :=0;_fbf < 3&&!_efb ;_fbf ++{_dgd ,_dgca :=cmap .parseObject ();if _dgca !=nil {return _dgca ;};switch _aeb :=_dgd .(type ){case cmapOperand :switch _aeb .Operand {case "\u0064\u0065\u0066":_efb =true ;default:_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_dgd );return ErrBadCMap ;};case cmapInt :_bebg =_e .Sprintf ("\u0025\u0064",_aeb ._aebf );case cmapFloat :_bebg =_e .Sprintf ("\u0025\u0066",_aeb ._eedf );case cmapString :_bebg =_aeb .String ;default:_be .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_dgd );};};cmap ._ba =_bebg ;return nil ;};func (cmap *CMap )inCodespace (_gfe CharCode ,_ed int )bool {for _ ,_accg :=range cmap ._ga {if _accg .Low <=_gfe &&_gfe <=_accg .High &&_ed ==_accg .NumBytes {return true ;};};return false ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _dbf []CharCode ;if cmap ._fe ==8{for _ ,_ggd :=range data {_dbf =append (_dbf ,CharCode (_ggd ));};return _dbf ,true ;};for _fde :=0;_fde < len (data );{_acc ,_aeg ,_gd :=cmap .matchCode (data [_fde :]);if !_gd {_be .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_fde ,data ,string (data ));return _dbf ,false ;};_dbf =append (_dbf ,_acc );_fde +=_aeg ;};return _dbf ,true ;};const (_ce =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (_accc *cMapParser )parseDict ()(cmapDict ,error ){_be .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_ggda :=_gcc ();_gcd ,_ :=_accc ._fgf .ReadByte ();if _gcd !='<'{return _ggda ,ErrBadCMapDict ;};_gcd ,_ =_accc ._fgf .ReadByte ();if _gcd !='<'{return _ggda ,ErrBadCMapDict ;};for {_accc .skipSpaces ();_ege ,_cfgb :=_accc ._fgf .Peek (2);if _cfgb !=nil {return _ggda ,_cfgb ;};if (_ege [0]=='>')&&(_ege [1]=='>'){_accc ._fgf .ReadByte ();_accc ._fgf .ReadByte ();break ;};_fddga ,_cfgb :=_accc .parseName ();_be .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_fddga .Name );if _cfgb !=nil {_be .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_cfgb );return _ggda ,_cfgb ;};_accc .skipSpaces ();_cgge ,_cfgb :=_accc .parseObject ();if _cfgb !=nil {return _ggda ,_cfgb ;};_ggda .Dict [_fddga .Name ]=_cgge ;_accc .skipSpaces ();_ege ,_cfgb =_accc ._fgf .Peek (3);if _cfgb !=nil {return _ggda ,_cfgb ;};if string (_ege )=="\u0064\u0065\u0066"{_accc ._fgf .Discard (3);};};return _ggda ,nil ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_be .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );cmap :=_dd (isSimple );cmap .cMapParser =_eaca (data );_cfg :=cmap .parse ();if _cfg !=nil {return nil ,_cfg ;};if len (cmap ._ga )==0{if cmap ._fa !=""{return cmap ,nil ;};_be .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )Name ()string {return cmap ._eec };func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_egf ,_cffc :=cmap ._bf [cid ];return _egf ,_cffc ;};type cmapInt struct{_aebf int64 };func (cmap *CMap )NBits ()int {return cmap ._fe };type cmapHexString struct{_afc int ;_cec []byte ;};type cmapDict struct{Dict map[string ]cmapObject ;};func (_fb *CIDSystemInfo )String ()string {return _e .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_fb .Registry ,_fb .Ordering ,_fb .Supplement );};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_fd :=make (map[CharCode ]string ,len (codeToRune ));for _ef ,_ae :=range codeToRune {_fd [_ef ]=string (_ae );};cmap :=&CMap {_eec :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_cc :2,_fe :16,_bad :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_ga :[]Codespace {{Low :0,High :0xffff}},_fef :_fd ,_fcf :make (map[string ]CharCode ,len (codeToRune )),_eb :make (map[CharCode ]CharCode ,len (codeToRune )),_bf :make (map[CharCode ]CharCode ,len (codeToRune ))};cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )parseType ()error {_dcdg :=0;_ccc :=false ;for _bcf :=0;_bcf < 3&&!_ccc ;_bcf ++{_faa ,_acf :=cmap .parseObject ();if _acf !=nil {return _acf ;};switch _cgc :=_faa .(type ){case cmapOperand :switch _cgc .Operand {case "\u0064\u0065\u0066":_ccc =true ;default:_be .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_faa );return ErrBadCMap ;};case cmapInt :_dcdg =int (_cgc ._aebf );};};cmap ._cc =_dcdg ;return nil ;};func (cmap *CMap )parseCIDRange ()error {for {_egaa ,_fda :=cmap .parseObject ();if _fda !=nil {if _fda ==_ea .EOF {break ;};return _fda ;};_dfa ,_fdf :=_egaa .(cmapHexString );if !_fdf {if _dceg ,_cbg :=_egaa .(cmapOperand );_cbg {if _dceg .Operand ==_agg {return nil ;};return _fc .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_eab :=_bfbf (_dfa );_egaa ,_fda =cmap .parseObject ();if _fda !=nil {if _fda ==_ea .EOF {break ;};return _fda ;};_ffbdf ,_fdf :=_egaa .(cmapHexString );if !_fdf {return _fc .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};if len (_dfa ._cec )!=len (_ffbdf ._cec ){return _fc .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_ebad :=_bfbf (_ffbdf );if _eab > _ebad {_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_eab ,_ebad );return ErrBadCMap ;};_egaa ,_fda =cmap .parseObject ();if _fda !=nil {if _fda ==_ea .EOF {break ;};return _fda ;};_bag ,_fdf :=_egaa .(cmapInt );if !_fdf {return _fc .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _bag ._aebf < 0{return _fc .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_aba :=_bag ._aebf ;for _gff :=_eab ;_gff <=_ebad ;_gff ++{cmap ._eb [_gff ]=CharCode (_aba );_aba ++;};_be .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_eab ,_ebad ,_bag ._aebf );};return nil ;};type fbRange struct{_ac CharCode ;_eeg CharCode ;_bg string ;};func (cmap *CMap )parseName ()error {_cdbg :="";_egg :=false ;for _dcc :=0;_dcc < 20&&!_egg ;_dcc ++{_bga ,_dddc :=cmap .parseObject ();if _dddc !=nil {return _dddc ;};switch _fccg :=_bga .(type ){case cmapOperand :switch _fccg .Operand {case "\u0064\u0065\u0066":_egg =true ;default:_be .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_bga ,_cdbg );if _cdbg !=""{_cdbg =_e .Sprintf ("\u0025\u0073\u0020%\u0073",_cdbg ,_fccg .Operand );};_be .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_cdbg );};case cmapName :_cdbg =_fccg .Name ;};};if !_egg {_be .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._eec =_cdbg ;return nil ;};