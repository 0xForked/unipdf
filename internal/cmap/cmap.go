//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_g "bufio";_aa "bytes";_fc "encoding/hex";_de "errors";_c "fmt";_dd "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/core";_gf "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_d "io";_ef "sort";_a "strconv";
_cg "strings";_e "unicode/utf16";);type CMap struct{*cMapParser ;_cgc string ;_bd int ;_feb int ;_fa string ;_ee string ;_ce CIDSystemInfo ;_eee []Codespace ;_cfd map[CharCode ]CharCode ;_afe map[CharCode ]CharCode ;_efd map[CharCode ]string ;_bf map[string ]CharCode ;
_ca []byte ;_fd *_b .PdfObjectStream ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_dd .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_aad (isSimple );cmap .cMapParser =_agfb (data );_df :=cmap .parse ();if _df !=nil {return nil ,_df ;};if len (cmap ._eee )==0{if cmap ._ee !=""{return cmap ,nil ;};_dd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func _ecag (_ggb string )rune {_ace :=[]rune (_ggb );return _ace [len (_ace )-1]};func (cmap *CMap )Stream ()(*_b .PdfObjectStream ,error ){if cmap ._fd !=nil {return cmap ._fd ,nil ;
};_bdb ,_eef :=_b .MakeStream (cmap .Bytes (),_b .NewFlateEncoder ());if _eef !=nil {return nil ,_eef ;};cmap ._fd =_bdb ;return cmap ._fd ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_aba ,_abc :=cmap ._bf [s ];return _aba ,_abc ;
};func (_ggde *cMapParser )parseArray ()(cmapArray ,error ){_gfc :=cmapArray {};_gfc .Array =[]cmapObject {};_ggde ._cbd .ReadByte ();for {_ggde .skipSpaces ();_ecbec ,_aacd :=_ggde ._cbd .Peek (1);if _aacd !=nil {return _gfc ,_aacd ;};if _ecbec [0]==']'{_ggde ._cbd .ReadByte ();
break ;};_afecf ,_aacd :=_ggde .parseObject ();if _aacd !=nil {return _gfc ,_aacd ;};_gfc .Array =append (_gfc .Array ,_afecf );};return _gfc ,nil ;};func (cmap *CMap )Type ()int {return cmap ._feb };type CIDSystemInfo struct{Registry string ;Ordering string ;
Supplement int ;};func NewCIDSystemInfo (obj _b .PdfObject )(_eg CIDSystemInfo ,_ge error ){_be ,_bg :=_b .GetDict (obj );if !_bg {return CIDSystemInfo {},_b .ErrTypeError ;};_eb ,_bg :=_b .GetStringVal (_be .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_bg {return CIDSystemInfo {},_b .ErrTypeError ;};_db ,_bg :=_b .GetStringVal (_be .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_bg {return CIDSystemInfo {},_b .ErrTypeError ;};_af ,_bg :=_b .GetIntVal (_be .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_bg {return CIDSystemInfo {},_b .ErrTypeError ;};return CIDSystemInfo {Registry :_eb ,Ordering :_db ,Supplement :_af },nil ;};type cmapDict struct{Dict map[string ]cmapObject ;};func _adgf (_efff cmapHexString )[]rune {if len (_efff ._deae )==1{return []rune {rune (_efff ._deae [0])};
};_bdgb :=_efff ._deae ;if len (_bdgb )%2!=0{_bdgb =append (_bdgb ,0);_dd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_efff ,_bdgb );
};_ffg :=len (_bdgb )>>1;_cac :=make ([]uint16 ,_ffg );for _gdbd :=0;_gdbd < _ffg ;_gdbd ++{_cac [_gdbd ]=uint16 (_bdgb [_gdbd <<1])<<8+uint16 (_bdgb [_gdbd <<1+1]);};_ece :=_e .Decode (_cac );return _ece ;};type fbRange struct{_fg CharCode ;_cf CharCode ;
_cc string ;};type charRange struct{_gc CharCode ;_fe CharCode ;};func (cmap *CMap )computeInverseMappings (){for _efa ,_fb :=range cmap ._cfd {if _ggf ,_bdg :=cmap ._afe [_fb ];!_bdg ||(_bdg &&_ggf > _efa ){cmap ._afe [_fb ]=_efa ;};};for _faa ,_gaba :=range cmap ._efd {if _dcf ,_caf :=cmap ._bf [_gaba ];
!_caf ||(_caf &&_dcf > _faa ){cmap ._bf [_gaba ]=_faa ;};};_ef .Slice (cmap ._eee ,func (_bgf ,_afd int )bool {return cmap ._eee [_bgf ].Low < cmap ._eee [_afd ].Low });};func (_aacef *cMapParser )parseName ()(cmapName ,error ){_ecbe :="";_cccd :=false ;
for {_ecfc ,_gda :=_aacef ._cbd .Peek (1);if _gda ==_d .EOF {break ;};if _gda !=nil {return cmapName {_ecbe },_gda ;};if !_cccd {if _ecfc [0]=='/'{_cccd =true ;_aacef ._cbd .ReadByte ();}else {_dd .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_ecfc ,_ecfc );
return cmapName {_ecbe },_c .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_ecfc [0]);};}else {if _b .IsWhiteSpace (_ecfc [0]){break ;}else if (_ecfc [0]=='/')||(_ecfc [0]=='[')||(_ecfc [0]=='(')||(_ecfc [0]==']')||(_ecfc [0]=='<')||(_ecfc [0]=='>'){break ;
}else if _ecfc [0]=='#'{_beda ,_egaa :=_aacef ._cbd .Peek (3);if _egaa !=nil {return cmapName {_ecbe },_egaa ;};_aacef ._cbd .Discard (3);_abf ,_egaa :=_fc .DecodeString (string (_beda [1:3]));if _egaa !=nil {return cmapName {_ecbe },_egaa ;};_ecbe +=string (_abf );
}else {_bag ,_ :=_aacef ._cbd .ReadByte ();_ecbe +=string (_bag );};};};return cmapName {_ecbe },nil ;};func (cmap *CMap )NBits ()int {return cmap ._bd };type cmapFloat struct{_gfd float64 };func (_eec *cMapParser )parseHexString ()(cmapHexString ,error ){_eec ._cbd .ReadByte ();
_cgbc :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_cedb :=_aa .Buffer {};for {_eec .skipSpaces ();_cea ,_adf :=_eec ._cbd .Peek (1);if _adf !=nil {return cmapHexString {},_adf ;
};if _cea [0]=='>'{_eec ._cbd .ReadByte ();break ;};_bfdd ,_ :=_eec ._cbd .ReadByte ();if _aa .IndexByte (_cgbc ,_bfdd )>=0{_cedb .WriteByte (_bfdd );};};if _cedb .Len ()%2==1{_dd .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_cedb .String ());
_cedb .WriteByte ('0');};_cgba :=_cedb .Len ()/2;_dae ,_ :=_fc .DecodeString (_cedb .String ());return cmapHexString {_cbcdd :_cgba ,_deae :_dae },nil ;};func (cmap *CMap )parseName ()error {_cdb :="";_ebd :=false ;for _aaa :=0;_aaa < 20&&!_ebd ;_aaa ++{_fcf ,_dcge :=cmap .parseObject ();
if _dcge !=nil {return _dcge ;};switch _fbcc :=_fcf .(type ){case cmapOperand :switch _fbcc .Operand {case "\u0064\u0065\u0066":_ebd =true ;default:_dd .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_fcf ,_cdb );
if _cdb !=""{_cdb =_c .Sprintf ("\u0025\u0073\u0020%\u0073",_cdb ,_fbcc .Operand );};_dd .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_cdb );
};case cmapName :_cdb =_fbcc .Name ;};};if !_ebd {_dd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._cgc =_cdb ;return nil ;};func (cmap *CMap )parseSystemInfo ()error {_gb :=false ;
_dded :=false ;_fbf :="";_efcg :=false ;_dafd :=CIDSystemInfo {};for _eac :=0;_eac < 50&&!_efcg ;_eac ++{_febb ,_dce :=cmap .parseObject ();if _dce !=nil {return _dce ;};switch _eba :=_febb .(type ){case cmapDict :_fde :=_eba .Dict ;_afae ,_fecf :=_fde ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];
if !_fecf {_dd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_afbb ,_fecf :=_afae .(cmapString );if !_fecf {_dd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_dafd .Registry =_afbb .String ;_afae ,_fecf =_fde ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_fecf {_dd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_afbb ,_fecf =_afae .(cmapString );if !_fecf {_dd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dafd .Ordering =_afbb .String ;
_fca ,_fecf :=_fde ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_fecf {_dd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;
};_ccb ,_fecf :=_fca .(cmapInt );if !_fecf {_dd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dafd .Supplement =int (_ccb ._fba );_efcg =true ;
case cmapOperand :switch _eba .Operand {case "\u0062\u0065\u0067i\u006e":_gb =true ;case "\u0065\u006e\u0064":_efcg =true ;case "\u0064\u0065\u0066":_dded =false ;};case cmapName :if _gb {_fbf =_eba .Name ;_dded =true ;};case cmapString :if _dded {switch _fbf {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_dafd .Registry =_eba .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_dafd .Ordering =_eba .String ;};};case cmapInt :if _dded {switch _fbf {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_dafd .Supplement =int (_eba ._fba );};};};};if !_efcg {_dd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._ce =_dafd ;return nil ;};func (_gbd *cMapParser )parseDict ()(cmapDict ,error ){_dd .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_gaag :=_degf ();_bae ,_ :=_gbd ._cbd .ReadByte ();
if _bae !='<'{return _gaag ,ErrBadCMapDict ;};_bae ,_ =_gbd ._cbd .ReadByte ();if _bae !='<'{return _gaag ,ErrBadCMapDict ;};for {_gbd .skipSpaces ();_bcb ,_efe :=_gbd ._cbd .Peek (2);if _efe !=nil {return _gaag ,_efe ;};if (_bcb [0]=='>')&&(_bcb [1]=='>'){_gbd ._cbd .ReadByte ();
_gbd ._cbd .ReadByte ();break ;};_efgd ,_efe :=_gbd .parseName ();_dd .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_efgd .Name );if _efe !=nil {_dd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_efe );
return _gaag ,_efe ;};_gbd .skipSpaces ();_bcce ,_efe :=_gbd .parseObject ();if _efe !=nil {return _gaag ,_efe ;};_gaag .Dict [_efgd .Name ]=_bcce ;_gbd .skipSpaces ();_bcb ,_efe =_gbd ._cbd .Peek (3);if _efe !=nil {return _gaag ,_efe ;};if string (_bcb )=="\u0064\u0065\u0066"{_gbd ._cbd .Discard (3);
};};return _gaag ,nil ;};func (cmap *CMap )parseType ()error {_afb :=0;_aca :=false ;for _fcdf :=0;_fcdf < 3&&!_aca ;_fcdf ++{_feg ,_bdge :=cmap .parseObject ();if _bdge !=nil {return _bdge ;};switch _acc :=_feg .(type ){case cmapOperand :switch _acc .Operand {case "\u0064\u0065\u0066":_aca =true ;
default:_dd .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_feg );return ErrBadCMap ;};case cmapInt :_afb =int (_acc ._fba );
};};cmap ._feb =_afb ;return nil ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};type CharCode uint32 ;type cmapInt struct{_fba int64 };func _afa (_bgd string )string {_ea :=[]rune (_bgd );_gea :=make ([]string ,len (_ea ));for _fgbb ,_baf :=range _ea {_gea [_fgbb ]=_c .Sprintf ("\u0025\u0030\u0034\u0078",_baf );
};return _c .Sprintf ("\u003c\u0025\u0073\u003e",_cg .Join (_gea ,""));};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_cdf ,_cgg :=cmap ._afe [cid ];return _cdf ,_cgg ;};func (cmap *CMap )parseBfchar ()error {for {_ecd ,_gca :=cmap .parseObject ();
if _gca !=nil {if _gca ==_d .EOF {break ;};return _gca ;};var _eeeb CharCode ;switch _fdb :=_ecd .(type ){case cmapOperand :if _fdb .Operand ==_cbcd {return nil ;};return _de .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_eeeb =_dgac (_fdb );default:return _de .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_ecd ,_gca =cmap .parseObject ();if _gca !=nil {if _gca ==_d .EOF {break ;};return _gca ;};var _gcgb []rune ;
switch _gcba :=_ecd .(type ){case cmapOperand :if _gcba .Operand ==_cbcd {return nil ;};_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_gcba );
return ErrBadCMap ;case cmapHexString :_gcgb =_adgf (_gcba );case cmapName :_dd .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_gcba );_gcgb =[]rune {MissingCodeRune };
default:_dd .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_ecd );return ErrBadCMap ;};cmap ._efd [_eeeb ]=string (_gcgb );};return nil ;};var (ErrBadCMap =_de .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");
ErrBadCMapComment =_de .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_de .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);const (_egf =100;_edf ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_daa ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);type cmapOperand struct{Operand string ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_geg :=_ege (name );if _geg !=nil {return nil ,_geg ;};if cmap ._ee ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_dgg ,_geg :=_ege (cmap ._ee );
if _geg !=nil {return nil ,_geg ;};for _efdf ,_bdc :=range _dgg ._cfd {if _ ,_fea :=cmap ._cfd [_efdf ];!_fea {cmap ._cfd [_efdf ]=_bdc ;};};cmap ._eee =append (cmap ._eee ,_dgg ._eee ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (_fga *cMapParser )parseString ()(cmapString ,error ){_fga ._cbd .ReadByte ();
_gcag :=_aa .Buffer {};_ecga :=1;for {_efg ,_agb :=_fga ._cbd .Peek (1);if _agb !=nil {return cmapString {_gcag .String ()},_agb ;};if _efg [0]=='\\'{_fga ._cbd .ReadByte ();_gafe ,_acee :=_fga ._cbd .ReadByte ();if _acee !=nil {return cmapString {_gcag .String ()},_acee ;
};if _b .IsOctalDigit (_gafe ){_gegf ,_bec :=_fga ._cbd .Peek (2);if _bec !=nil {return cmapString {_gcag .String ()},_bec ;};var _bcd []byte ;_bcd =append (_bcd ,_gafe );for _ ,_dbcg :=range _gegf {if _b .IsOctalDigit (_dbcg ){_bcd =append (_bcd ,_dbcg );
}else {break ;};};_fga ._cbd .Discard (len (_bcd )-1);_dd .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_bcd );_geb ,_bec :=_a .ParseUint (string (_bcd ),8,32);if _bec !=nil {return cmapString {_gcag .String ()},_bec ;
};_gcag .WriteByte (byte (_geb ));continue ;};switch _gafe {case 'n':_gcag .WriteByte ('\n');case 'r':_gcag .WriteByte ('\r');case 't':_gcag .WriteByte ('\t');case 'b':_gcag .WriteByte ('\b');case 'f':_gcag .WriteByte ('\f');case '(':_gcag .WriteByte ('(');
case ')':_gcag .WriteByte (')');case '\\':_gcag .WriteByte ('\\');};continue ;}else if _efg [0]=='('{_ecga ++;}else if _efg [0]==')'{_ecga --;if _ecga ==0{_fga ._cbd .ReadByte ();break ;};};_bffb ,_ :=_fga ._cbd .ReadByte ();_gcag .WriteByte (_bffb );};
return cmapString {_gcag .String ()},nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};type cMapParser struct{_cbd *_g .Reader };func (_badb *cMapParser )parseComment ()(string ,error ){var _adg _aa .Buffer ;
_ ,_gagf :=_badb .skipSpaces ();if _gagf !=nil {return _adg .String (),_gagf ;};_gae :=true ;for {_gdbc ,_ecf :=_badb ._cbd .Peek (1);if _ecf !=nil {_dd .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_ecf );
return _adg .String (),_ecf ;};if _gae &&_gdbc [0]!='%'{return _adg .String (),ErrBadCMapComment ;};_gae =false ;if (_gdbc [0]!='\r')&&(_gdbc [0]!='\n'){_cafc ,_ :=_badb ._cbd .ReadByte ();_adg .WriteByte (_cafc );}else {break ;};};return _adg .String (),nil ;
};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_gd :=make (map[CharCode ]string ,len (codeToRune ));for _ga ,_ced :=range codeToRune {_gd [_ga ]=string (_ced );};cmap :=&CMap {_cgc :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_feb :2,_bd :16,_ce :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_eee :[]Codespace {{Low :0,High :0xffff}},_efd :_gd ,_bf :make (map[string ]CharCode ,len (codeToRune )),_cfd :make (map[CharCode ]CharCode ,len (codeToRune )),_afe :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (_ec *CIDSystemInfo )String ()string {return _c .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_ec .Registry ,_ec .Ordering ,_ec .Supplement );};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _gec ,_cd :=cmap ._efd [code ];
_cd {return _gec ,true ;};return MissingCodeString ,false ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _cdd []CharCode ;if cmap ._bd ==8{for _ ,_abd :=range data {_cdd =append (_cdd ,CharCode (_abd ));};return _cdd ,true ;
};for _gfg :=0;_gfg < len (data );{_dbf ,_dcg ,_fgc :=cmap .matchCode (data [_gfg :]);if !_fgc {_dd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_gfg ,data ,string (data ));
return _cdd ,false ;};_cdd =append (_cdd ,_dbf );_gfg +=_dcg ;};return _cdd ,true ;};func (_febc *cMapParser )skipSpaces ()(int ,error ){_caaf :=0;for {_cgcg ,_bbd :=_febc ._cbd .Peek (1);if _bbd !=nil {return 0,_bbd ;};if _b .IsWhiteSpace (_cgcg [0]){_febc ._cbd .ReadByte ();
_caaf ++;}else {break ;};};return _caaf ,nil ;};func (cmap *CMap )matchCode (_ed []byte )(_cbg CharCode ,_eca int ,_dcd bool ){for _fgb :=0;_fgb < _dc ;_fgb ++{if _fgb < len (_ed ){_cbg =_cbg <<8|CharCode (_ed [_fgb ]);_eca ++;};_dcd =cmap .inCodespace (_cbg ,_fgb +1);
if _dcd {return _cbg ,_eca ,true ;};};_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_ed ,string (_ed ),cmap );
return 0,0,false ;};func (_gee *cMapParser )parseNumber ()(cmapObject ,error ){_dcc ,_dad :=_b .ParseNumber (_gee ._cbd );if _dad !=nil {return nil ,_dad ;};switch _aagb :=_dcc .(type ){case *_b .PdfObjectFloat :return cmapFloat {float64 (*_aagb )},nil ;
case *_b .PdfObjectInteger :return cmapInt {int64 (*_aagb )},nil ;};return nil ,_c .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_dcc );};type cmapName struct{Name string ;
};func _ddb (_ddgg ,_ddbf int )int {if _ddgg < _ddbf {return _ddgg ;};return _ddbf ;};func (cmap *CMap )parse ()error {var _caa cmapObject ;for {_bef ,_bab :=cmap .parseObject ();if _bab !=nil {if _bab ==_d .EOF {break ;};_dd .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_bab );
return _bab ;};switch _efc :=_bef .(type ){case cmapOperand :_bbf :=_efc ;switch _bbf .Operand {case _egab :_cggb :=cmap .parseCodespaceRange ();if _cggb !=nil {return _cggb ;};case _deg :_fbc :=cmap .parseCIDRange ();if _fbc !=nil {return _fbc ;};case _dbc :_bbb :=cmap .parseBfchar ();
if _bbb !=nil {return _bbb ;};case _gcd :_bbfb :=cmap .parseBfrange ();if _bbfb !=nil {return _bbfb ;};case _fae :if _caa ==nil {_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_ebg ,_age :=_caa .(cmapName );if !_age {_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_caa );
return ErrBadCMap ;};cmap ._ee =_ebg .Name ;case _daaa :_fec :=cmap .parseSystemInfo ();if _fec !=nil {return _fec ;};};case cmapName :_dfad :=_efc ;switch _dfad .Name {case _daaa :_gag :=cmap .parseSystemInfo ();if _gag !=nil {return _gag ;};case _fbgg :_ddg :=cmap .parseName ();
if _ddg !=nil {return _ddg ;};case _beag :_egc :=cmap .parseType ();if _egc !=nil {return _egc ;};case _gcf :_bad :=cmap .parseVersion ();if _bad !=nil {return _bad ;};};};_caa =_bef ;};return nil ;};func (_baa *cMapParser )parseOperand ()(cmapOperand ,error ){_cgbe :=cmapOperand {};
_dafc :=_aa .Buffer {};for {_bgdd ,_aceg :=_baa ._cbd .Peek (1);if _aceg !=nil {if _aceg ==_d .EOF {break ;};return _cgbe ,_aceg ;};if _b .IsDelimiter (_bgdd [0]){break ;};if _b .IsWhiteSpace (_bgdd [0]){break ;};_bgea ,_ :=_baa ._cbd .ReadByte ();_dafc .WriteByte (_bgea );
};if _dafc .Len ()==0{return _cgbe ,_c .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_cgbe .Operand =_dafc .String ();return _cgbe ,nil ;};func (cmap *CMap )parseVersion ()error {_cde :="";
_ceg :=false ;for _cca :=0;_cca < 3&&!_ceg ;_cca ++{_ccac ,_dga :=cmap .parseObject ();if _dga !=nil {return _dga ;};switch _cbc :=_ccac .(type ){case cmapOperand :switch _cbc .Operand {case "\u0064\u0065\u0066":_ceg =true ;default:_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_ccac );
return ErrBadCMap ;};case cmapInt :_cde =_c .Sprintf ("\u0025\u0064",_cbc ._fba );case cmapFloat :_cde =_c .Sprintf ("\u0025\u0066",_cbc ._gfd );case cmapString :_cde =_cbc .String ;default:_dd .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_ccac );
};};cmap ._fa =_cde ;return nil ;};func _gcgc (_dced cmapHexString )rune {_eeec :=_adgf (_dced );if _fdbe :=len (_eeec );_fdbe ==0{_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_dced );
return MissingCodeRune ;};if len (_eeec )> 1{_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_dced ,_eeec );
};return _eeec [0];};type cmapObject interface{};func (cmap *CMap )toBfData ()string {if len (cmap ._efd )==0{return "";};_bb :=make ([]CharCode ,0,len (cmap ._efd ));for _cad :=range cmap ._efd {_bb =append (_bb ,_cad );};_ef .Slice (_bb ,func (_dde ,_acb int )bool {return _bb [_dde ]< _bb [_acb ]});
var _dbb []charRange ;_ggc :=charRange {_bb [0],_bb [0]};_fac :=cmap ._efd [_bb [0]];for _ ,_gcb :=range _bb [1:]{_ba :=cmap ._efd [_gcb ];if _gcb ==_ggc ._fe +1&&_ecag (_ba )==_ecag (_fac )+1{_ggc ._fe =_gcb ;}else {_dbb =append (_dbb ,_ggc );_ggc ._gc ,_ggc ._fe =_gcb ,_gcb ;
};_fac =_ba ;};_dbb =append (_dbb ,_ggc );var _bbg []CharCode ;var _bea []fbRange ;for _ ,_cfc :=range _dbb {if _cfc ._gc ==_cfc ._fe {_bbg =append (_bbg ,_cfc ._gc );}else {_bea =append (_bea ,fbRange {_fg :_cfc ._gc ,_cf :_cfc ._fe ,_cc :cmap ._efd [_cfc ._gc ]});
};};_dd .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_dbb ),len (_bbg ),len (_bea ));var _cdfe []string ;if len (_bbg )> 0{_ada :=(len (_bbg )+_egf -1)/_egf ;
for _bff :=0;_bff < _ada ;_bff ++{_gecf :=_ddb (len (_bbg )-_bff *_egf ,_egf );_cdfe =append (_cdfe ,_c .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_gecf ));for _gfgf :=0;_gfgf < _gecf ;_gfgf ++{_fce :=_bbg [_bff *_egf +_gfgf ];
_ade :=cmap ._efd [_fce ];_cdfe =append (_cdfe ,_c .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_fce ,_afa (_ade )));};_cdfe =append (_cdfe ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_bea )> 0{_dfb :=(len (_bea )+_egf -1)/_egf ;
for _dcfe :=0;_dcfe < _dfb ;_dcfe ++{_bfe :=_ddb (len (_bea )-_dcfe *_egf ,_egf );_cdfe =append (_cdfe ,_c .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_bfe ));for _afec :=0;_afec < _bfe ;_afec ++{_dbbc :=_bea [_dcfe *_egf +_afec ];
_cdfe =append (_cdfe ,_c .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_dbbc ._fg ,_dbbc ._cf ,_afa (_dbbc ._cc )));};_cdfe =append (_cdfe ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};
};return _cg .Join (_cdfe ,"\u000a");};func IsPredefinedCMap (name string )bool {return _gf .AssetExists (name )};func (cmap *CMap )parseCIDRange ()error {for {_eab ,_egg :=cmap .parseObject ();if _egg !=nil {if _egg ==_d .EOF {break ;};return _egg ;};
_cdbf ,_fdd :=_eab .(cmapHexString );if !_fdd {if _bfd ,_aace :=_eab .(cmapOperand );_aace {if _bfd .Operand ==_fcbd {return nil ;};return _de .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_cfe :=_dgac (_cdbf );_eab ,_egg =cmap .parseObject ();if _egg !=nil {if _egg ==_d .EOF {break ;};return _egg ;};_fbe ,_fdd :=_eab .(cmapHexString );if !_fdd {return _de .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_cdbf ._deae )!=len (_fbe ._deae ){return _de .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_fcag :=_dgac (_fbe );
if _cfe > _fcag {_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_cfe ,_fcag );
return ErrBadCMap ;};_eab ,_egg =cmap .parseObject ();if _egg !=nil {if _egg ==_d .EOF {break ;};return _egg ;};_ecb ,_fdd :=_eab .(cmapInt );if !_fdd {return _de .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ecb ._fba < 0{return _de .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_cdea :=_ecb ._fba ;for _dda :=_cfe ;_dda <=_fcag ;_dda ++{cmap ._cfd [_dda ]=CharCode (_cdea );
_cdea ++;};_dd .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_cfe ,_fcag ,_ecb ._fba );};return nil ;};func (cmap *CMap )Name ()string {return cmap ._cgc };
func (cmap *CMap )String ()string {_bfb :=cmap ._ce ;_cb :=[]string {_c .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._bd ),_c .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._feb )};if cmap ._fa !=""{_cb =append (_cb ,_c .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._fa ));
};if cmap ._ee !=""{_cb =append (_cb ,_c .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._ee ));};_cb =append (_cb ,_c .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_bfb .String ()));
if len (cmap ._eee )> 0{_cb =append (_cb ,_c .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._eee )));};if len (cmap ._efd )> 0{_cb =append (_cb ,_c .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._efd )));
};return _c .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._cgc ,_cg .Join (_cb ,"\u0020"));};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_ac ,_ccc :=cmap ._cfd [code ];return _ac ,_ccc ;};func (cmap *CMap )parseBfrange ()error {for {var _fcb CharCode ;
_ggcg ,_aff :=cmap .parseObject ();if _aff !=nil {if _aff ==_d .EOF {break ;};return _aff ;};switch _gaf :=_ggcg .(type ){case cmapOperand :if _gaf .Operand ==_bcc {return nil ;};return _de .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_fcb =_dgac (_gaf );default:return _de .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _gbe CharCode ;_ggcg ,_aff =cmap .parseObject ();if _aff !=nil {if _aff ==_d .EOF {break ;};return _aff ;
};switch _ccd :=_ggcg .(type ){case cmapOperand :_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_gbe =_dgac (_ccd );default:_dd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_ggcg );return ErrBadCMap ;};_ggcg ,_aff =cmap .parseObject ();
if _aff !=nil {if _aff ==_d .EOF {break ;};return _aff ;};switch _fed :=_ggcg .(type ){case cmapArray :if len (_fed .Array )!=int (_gbe -_fcb )+1{_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _dfg :=_fcb ;_dfg <=_gbe ;_dfg ++{_aeec :=_fed .Array [_dfg -_fcb ];_fdeb ,_ede :=_aeec .(cmapHexString );if !_ede {return _de .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_gaa :=_adgf (_fdeb );cmap ._efd [_dfg ]=string (_gaa );};case cmapHexString :_ega :=_adgf (_fed );_ecg :=len (_ega );for _dafg :=_fcb ;_dafg <=_gbe ;_dafg ++{cmap ._efd [_dafg ]=string (_ega );if _ecg > 0{_ega [_ecg -1]++;}else {_dd .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_dafg );
};};default:_dd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_ggcg );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )parseCodespaceRange ()error {for {_gggb ,_ggcb :=cmap .parseObject ();
if _ggcb !=nil {if _ggcb ==_d .EOF {break ;};return _ggcb ;};_bbbe ,_bgba :=_gggb .(cmapHexString );if !_bgba {if _ggd ,_ebf :=_gggb .(cmapOperand );_ebf {if _ggd .Operand ==_agf {return nil ;};return _de .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_gggb ,_ggcb =cmap .parseObject ();if _ggcb !=nil {if _ggcb ==_d .EOF {break ;};return _ggcb ;};_acbc ,_bgba :=_gggb .(cmapHexString );if !_bgba {return _de .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_bbbe ._deae )!=len (_acbc ._deae ){return _de .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_aee :=_dgac (_bbbe );_afbc :=_dgac (_acbc );if _afbc < _aee {_dd .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_aee ,_afbc );
return ErrBadCMap ;};_gege :=_acbc ._cbcdd ;_adb :=Codespace {NumBytes :_gege ,Low :_aee ,High :_afbc };cmap ._eee =append (cmap ._eee ,_adb );_dd .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_aee ,_afbc );
};if len (cmap ._eee )==0{_dd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_facf *cMapParser )parseObject ()(cmapObject ,error ){_facf .skipSpaces ();
for {_bdba ,_effa :=_facf ._cbd .Peek (2);if _effa !=nil {return nil ,_effa ;};if _bdba [0]=='%'{_facf .parseComment ();_facf .skipSpaces ();continue ;}else if _bdba [0]=='/'{_gfa ,_ddfe :=_facf .parseName ();return _gfa ,_ddfe ;}else if _bdba [0]=='('{_fgg ,_fad :=_facf .parseString ();
return _fgg ,_fad ;}else if _bdba [0]=='['{_bgfe ,_eacd :=_facf .parseArray ();return _bgfe ,_eacd ;}else if (_bdba [0]=='<')&&(_bdba [1]=='<'){_cag ,_bcg :=_facf .parseDict ();return _cag ,_bcg ;}else if _bdba [0]=='<'{_afg ,_faee :=_facf .parseHexString ();
return _afg ,_faee ;}else if _b .IsDecimalDigit (_bdba [0])||(_bdba [0]=='-'&&_b .IsDecimalDigit (_bdba [1])){_egaf ,_cgb :=_facf .parseNumber ();if _cgb !=nil {return nil ,_cgb ;};return _egaf ,nil ;}else {_acg ,_cbcb :=_facf .parseOperand ();if _cbcb !=nil {return nil ,_cbcb ;
};return _acg ,nil ;};};};func _aad (_ab bool )*CMap {_dg :=16;if _ab {_dg =8;};return &CMap {_bd :_dg ,_cfd :make (map[CharCode ]CharCode ),_afe :make (map[CharCode ]CharCode ),_efd :make (map[CharCode ]string ),_bf :make (map[string ]CharCode )};};func _dgac (_eeee cmapHexString )CharCode {_fbea :=CharCode (0);
for _ ,_bdbac :=range _eeee ._deae {_fbea <<=8;_fbea |=CharCode (_bdbac );};return _fbea ;};type cmapHexString struct{_cbcdd int ;_deae []byte ;};func _agfb (_cefc []byte )*cMapParser {_bgc :=cMapParser {};_dgd :=_aa .NewBuffer (_cefc );_bgc ._cbd =_g .NewReader (_dgd );
return &_bgc ;};const (_daaa ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_bgdf ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_ecge ="\u0065n\u0064\u0063\u006d\u0061\u0070";_egab ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_agf ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_dbc ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_cbcd ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_gcd ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_bcc ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_deg ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_fcbd ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_fae ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_fbgg ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_beag ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_gcf ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);const (_dc =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune );
);func (cmap *CMap )inCodespace (_eefd CharCode ,_daf int )bool {for _ ,_cfa :=range cmap ._eee {if _cfa .Low <=_eefd &&_eefd <=_cfa .High &&_daf ==_cfa .NumBytes {return true ;};};return false ;};func (cmap *CMap )Bytes ()[]byte {_dd .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._ca )> 0{return cmap ._ca ;};cmap ._ca =[]byte (_cg .Join ([]string {_edf ,cmap .toBfData (),_daa },"\u000a"));return cmap ._ca ;};type cmapString struct{String string ;};func _ege (_gab string )(*CMap ,error ){_dba ,_gcg :=_gf .Asset (_gab );
if _gcg !=nil {return nil ,_gcg ;};return LoadCmapFromDataCID (_dba );};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_faf ,_dbg :=cmap .BytesToCharcodes (data );if !_dbg {_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_fge :=make ([]string ,len (_faf ));var _ebe []CharCode ;for _bdd ,_da :=range _faf {_bc ,_ebb :=cmap ._efd [_da ];if !_ebb {_ebe =append (_ebe ,_da );_bc =MissingCodeString ;};_fge [_bdd ]=_bc ;};_dea :=_cg .Join (_fge ,"");if len (_ebe )> 0{_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_faf ,len (_ebe ),_ebe ,_dea ,cmap );
};return _dea ,len (_ebe );};func _degf ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};type cmapArray struct{Array []cmapObject ;};