//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_a "bufio";_fb "bytes";_b "encoding/hex";_g "errors";_e "fmt";_bec "github.com/unidoc/unipdf/v3/common";_eg "github.com/unidoc/unipdf/v3/core";_bc "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_be "io";_ce "sort";_f "strconv";
_cc "strings";_ca "unicode/utf16";);type CharCode uint32 ;func (_febb *cMapParser )parseOperand ()(cmapOperand ,error ){_ddba :=cmapOperand {};_ecga :=_fb .Buffer {};for {_dba ,_cca :=_febb ._fea .Peek (1);if _cca !=nil {if _cca ==_be .EOF {break ;};return _ddba ,_cca ;
};if _eg .IsDelimiter (_dba [0]){break ;};if _eg .IsWhiteSpace (_dba [0]){break ;};_bac ,_ :=_febb ._fea .ReadByte ();_ecga .WriteByte (_bac );};if _ecga .Len ()==0{return _ddba ,_e .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_ddba .Operand =_ecga .String ();return _ddba ,nil ;};type CMap struct{*cMapParser ;_ab string ;_ba int ;_fe int ;_cef string ;_fd string ;_fef CIDSystemInfo ;_ggg []Codespace ;_caf map[CharCode ]CharCode ;_ae map[CharCode ]CharCode ;_faa map[CharCode ]string ;
_aga map[string ]CharCode ;_de []byte ;_cb *_eg .PdfObjectStream ;};func (cmap *CMap )Type ()int {return cmap ._fe };type cmapInt struct{_deeb int64 };func (cmap *CMap )parseCIDRange ()error {for {_gdc ,_dgd :=cmap .parseObject ();if _dgd !=nil {if _dgd ==_be .EOF {break ;
};return _dgd ;};_dggb ,_gdca :=_gdc .(cmapHexString );if !_gdca {if _gac ,_cbgf :=_gdc .(cmapOperand );_cbgf {if _gac .Operand ==_bcef {return nil ;};return _g .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_ecg :=_aggb (_dggb );_gdc ,_dgd =cmap .parseObject ();if _dgd !=nil {if _dgd ==_be .EOF {break ;};return _dgd ;};_bbaa ,_gdca :=_gdc .(cmapHexString );if !_gdca {return _g .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_dggb ._bacg )!=len (_bbaa ._bacg ){return _g .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_eaab :=_aggb (_bbaa );
if _ecg > _eaab {_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_ecg ,_eaab );
return ErrBadCMap ;};_gdc ,_dgd =cmap .parseObject ();if _dgd !=nil {if _dgd ==_be .EOF {break ;};return _dgd ;};_feb ,_gdca :=_gdc .(cmapInt );if !_gdca {return _g .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _feb ._deeb < 0{return _g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_aba :=_feb ._deeb ;for _gdce :=_ecg ;_gdce <=_eaab ;_gdce ++{cmap ._caf [_gdce ]=CharCode (_aba );
_aba ++;};_bec .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_ecg ,_eaab ,_feb ._deeb );};return nil ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_bed ,_ccb :=cmap ._caf [code ];
return _bed ,_ccb ;};func (_ecgd *cMapParser )parseComment ()(string ,error ){var _dca _fb .Buffer ;_ ,_fdgg :=_ecgd .skipSpaces ();if _fdgg !=nil {return _dca .String (),_fdgg ;};_gae :=true ;for {_bbad ,_gba :=_ecgd ._fea .Peek (1);if _gba !=nil {_bec .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_gba );
return _dca .String (),_gba ;};if _gae &&_bbad [0]!='%'{return _dca .String (),ErrBadCMapComment ;};_gae =false ;if (_bbad [0]!='\r')&&(_bbad [0]!='\n'){_ebdd ,_ :=_ecgd ._fea .ReadByte ();_dca .WriteByte (_ebdd );}else {break ;};};return _dca .String (),nil ;
};func (cmap *CMap )parseType ()error {_ebe :=0;_beaa :=false ;for _eacd :=0;_eacd < 3&&!_beaa ;_eacd ++{_cac ,_bdec :=cmap .parseObject ();if _bdec !=nil {return _bdec ;};switch _abea :=_cac .(type ){case cmapOperand :switch _abea .Operand {case "\u0064\u0065\u0066":_beaa =true ;
default:_bec .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_cac );return ErrBadCMap ;};case cmapInt :_ebe =int (_abea ._deeb );
};};cmap ._fe =_ebe ;return nil ;};type fbRange struct{_ccd CharCode ;_d CharCode ;_gc string ;};func IsPredefinedCMap (name string )bool {return _bc .AssetExists (name )};func (cmap *CMap )parseCodespaceRange ()error {for {_ed ,_egegc :=cmap .parseObject ();
if _egegc !=nil {if _egegc ==_be .EOF {break ;};return _egegc ;};_gdb ,_bcg :=_ed .(cmapHexString );if !_bcg {if _ebd ,_bgg :=_ed .(cmapOperand );_bgg {if _ebd .Operand ==_fbea {return nil ;};return _g .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_ed ,_egegc =cmap .parseObject ();if _egegc !=nil {if _egegc ==_be .EOF {break ;};return _egegc ;};_bgf ,_bcg :=_ed .(cmapHexString );if !_bcg {return _g .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_gdb ._bacg )!=len (_bgf ._bacg ){return _g .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_fcfe :=_aggb (_gdb );_ggd :=_aggb (_bgf );if _ggd < _fcfe {_bec .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_fcfe ,_ggd );
return ErrBadCMap ;};_dgff :=_bgf ._aac ;_aeda :=Codespace {NumBytes :_dgff ,Low :_fcfe ,High :_ggd };cmap ._ggg =append (cmap ._ggg ,_aeda );_bec .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_fcfe ,_ggd );
};if len (cmap ._ggg )==0{_bec .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_gcdaa *cMapParser )parseHexString ()(cmapHexString ,error ){_gcdaa ._fea .ReadByte ();
_agb :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_aef :=_fb .Buffer {};for {_gcdaa .skipSpaces ();_deab ,_beaf :=_gcdaa ._fea .Peek (1);if _beaf !=nil {return cmapHexString {},_beaf ;
};if _deab [0]=='>'{_gcdaa ._fea .ReadByte ();break ;};_abdd ,_ :=_gcdaa ._fea .ReadByte ();if _fb .IndexByte (_agb ,_abdd )>=0{_aef .WriteByte (_abdd );};};if _aef .Len ()%2==1{_bec .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_aef .String ());
_aef .WriteByte ('0');};_gcge :=_aef .Len ()/2;_dcbf ,_ :=_b .DecodeString (_aef .String ());return cmapHexString {_aac :_gcge ,_bacg :_dcbf },nil ;};func (cmap *CMap )matchCode (_cfec []byte )(_cec CharCode ,_beb int ,_dbg bool ){for _age :=0;_age < _ccg ;
_age ++{if _age < len (_cfec ){_cec =_cec <<8|CharCode (_cfec [_age ]);_beb ++;};_dbg =cmap .inCodespace (_cec ,_age +1);if _dbg {return _cec ,_beb ,true ;};};_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_cfec ,string (_cfec ),cmap );
return 0,0,false ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _ccga []CharCode ;if cmap ._ba ==8{for _ ,_egeg :=range data {_ccga =append (_ccga ,CharCode (_egeg ));};return _ccga ,true ;};for _gcd :=0;_gcd < len (data );
{_dc ,_egc ,_bdf :=cmap .matchCode (data [_gcd :]);if !_bdf {_bec .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_gcd ,data ,string (data ));
return _ccga ,false ;};_ccga =append (_ccga ,_dc );_gcd +=_egc ;};return _ccga ,true ;};func (cmap *CMap )computeInverseMappings (){for _gga ,_bd :=range cmap ._caf {if _aa ,_gf :=cmap ._ae [_bd ];!_gf ||(_gf &&_aa > _gga ){cmap ._ae [_bd ]=_gga ;};};for _fc ,_fefcf :=range cmap ._faa {if _fefb ,_aec :=cmap ._aga [_fefcf ];
!_aec ||(_aec &&_fefb > _fc ){cmap ._aga [_fefcf ]=_fc ;};};_ce .Slice (cmap ._ggg ,func (_bdd ,_bf int )bool {return cmap ._ggg [_bdd ].Low < cmap ._ggg [_bf ].Low });};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};const (_gda =100;
_fdg ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_bdff ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (cmap *CMap )parseName ()error {_cbe :="";_gfe :=false ;for _gfb :=0;_gfb < 20&&!_gfe ;_gfb ++{_dea ,_egda :=cmap .parseObject ();if _egda !=nil {return _egda ;};switch _abe :=_dea .(type ){case cmapOperand :switch _abe .Operand {case "\u0064\u0065\u0066":_gfe =true ;
default:_bec .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_dea ,_cbe );
if _cbe !=""{_cbe =_e .Sprintf ("\u0025\u0073\u0020%\u0073",_cbe ,_abe .Operand );};_bec .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_cbe );
};case cmapName :_cbe =_abe .Name ;};};if !_gfe {_bec .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._ab =_cbe ;return nil ;};func (cmap *CMap )parseSystemInfo ()error {_add :=false ;
_daab :=false ;_cgb :="";_afa :=false ;_bga :=CIDSystemInfo {};for _dafd :=0;_dafd < 50&&!_afa ;_dafd ++{_bca ,_dfa :=cmap .parseObject ();if _dfa !=nil {return _dfa ;};switch _abfa :=_bca .(type ){case cmapDict :_faaf :=_abfa .Dict ;_bee ,_fbe :=_faaf ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];
if !_fbe {_bec .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ge ,_fbe :=_bee .(cmapString );if !_fbe {_bec .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_bga .Registry =_ge .String ;_bee ,_fbe =_faaf ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_fbe {_bec .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_ge ,_fbe =_bee .(cmapString );if !_fbe {_bec .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bga .Ordering =_ge .String ;_dbfe ,_fbe :=_faaf ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_fbe {_bec .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_eag ,_fbe :=_dbfe .(cmapInt );if !_fbe {_bec .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_bga .Supplement =int (_eag ._deeb );_afa =true ;case cmapOperand :switch _abfa .Operand {case "\u0062\u0065\u0067i\u006e":_add =true ;case "\u0065\u006e\u0064":_afa =true ;case "\u0064\u0065\u0066":_daab =false ;};case cmapName :if _add {_cgb =_abfa .Name ;
_daab =true ;};case cmapString :if _daab {switch _cgb {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_bga .Registry =_abfa .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_bga .Ordering =_abfa .String ;};};case cmapInt :if _daab {switch _cgb {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_bga .Supplement =int (_abfa ._deeb );
};};};};if !_afa {_bec .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._fef =_bga ;return nil ;};type cmapOperand struct{Operand string ;};type charRange struct{_ccc CharCode ;_bea CharCode ;};func (_adag *cMapParser )parseName ()(cmapName ,error ){_afec :="";_cbae :=false ;for {_aagb ,_adf :=_adag ._fea .Peek (1);
if _adf ==_be .EOF {break ;};if _adf !=nil {return cmapName {_afec },_adf ;};if !_cbae {if _aagb [0]=='/'{_cbae =true ;_adag ._fea .ReadByte ();}else {_bec .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_aagb ,_aagb );
return cmapName {_afec },_e .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_aagb [0]);};}else {if _eg .IsWhiteSpace (_aagb [0]){break ;}else if (_aagb [0]=='/')||(_aagb [0]=='[')||(_aagb [0]=='(')||(_aagb [0]==']')||(_aagb [0]=='<')||(_aagb [0]=='>'){break ;
}else if _aagb [0]=='#'{_cde ,_fde :=_adag ._fea .Peek (3);if _fde !=nil {return cmapName {_afec },_fde ;};_adag ._fea .Discard (3);_dfe ,_fde :=_b .DecodeString (string (_cde [1:3]));if _fde !=nil {return cmapName {_afec },_fde ;};_afec +=string (_dfe );
}else {_feeb ,_ :=_adag ._fea .ReadByte ();_afec +=string (_feeb );};};};return cmapName {_afec },nil ;};func NewCIDSystemInfo (obj _eg .PdfObject )(_cf CIDSystemInfo ,_fa error ){_gg ,_egd :=_eg .GetDict (obj );if !_egd {return CIDSystemInfo {},_eg .ErrTypeError ;
};_ff ,_egd :=_eg .GetStringVal (_gg .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_egd {return CIDSystemInfo {},_eg .ErrTypeError ;};_af ,_egd :=_eg .GetStringVal (_gg .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_egd {return CIDSystemInfo {},_eg .ErrTypeError ;
};_ag ,_egd :=_eg .GetIntVal (_gg .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_egd {return CIDSystemInfo {},_eg .ErrTypeError ;};return CIDSystemInfo {Registry :_ff ,Ordering :_af ,Supplement :_ag },nil ;};func _bae (_cba bool )*CMap {_dd :=16;
if _cba {_dd =8;};return &CMap {_ba :_dd ,_caf :make (map[CharCode ]CharCode ),_ae :make (map[CharCode ]CharCode ),_faa :make (map[CharCode ]string ),_aga :make (map[string ]CharCode )};};func _aggb (_aabc cmapHexString )CharCode {_fagg :=CharCode (0);
for _ ,_fac :=range _aabc ._bacg {_fagg <<=8;_fagg |=CharCode (_fac );};return _fagg ;};func (cmap *CMap )parseBfrange ()error {for {var _bcgc CharCode ;_cegf ,_abcg :=cmap .parseObject ();if _abcg !=nil {if _abcg ==_be .EOF {break ;};return _abcg ;};switch _fdd :=_cegf .(type ){case cmapOperand :if _fdd .Operand ==_bdfd {return nil ;
};return _g .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_bcgc =_aggb (_fdd );default:return _g .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _dfg CharCode ;_cegf ,_abcg =cmap .parseObject ();if _abcg !=nil {if _abcg ==_be .EOF {break ;};return _abcg ;};switch _dda :=_cegf .(type ){case cmapOperand :_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_dfg =_aggb (_dda );default:_bec .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cegf );return ErrBadCMap ;};_cegf ,_abcg =cmap .parseObject ();
if _abcg !=nil {if _abcg ==_be .EOF {break ;};return _abcg ;};switch _ggf :=_cegf .(type ){case cmapArray :if len (_ggf .Array )!=int (_dfg -_bcgc )+1{_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _gec :=_bcgc ;_gec <=_dfg ;_gec ++{_eda :=_ggf .Array [_gec -_bcgc ];_eagf ,_ageb :=_eda .(cmapHexString );if !_ageb {return _g .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_gea :=_fdc (_eagf );cmap ._faa [_gec ]=string (_gea );};case cmapHexString :_eea :=_fdc (_ggf );_cfef :=len (_eea );for _gce :=_bcgc ;_gce <=_dfg ;_gce ++{cmap ._faa [_gce ]=string (_eea );if _cfef > 0{_eea [_cfef -1]++;}else {_bec .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_gce );
};};default:_bec .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cegf );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )Name ()string {return cmap ._ab };func (_bff *cMapParser )parseDict ()(cmapDict ,error ){_bec .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_acgb :=_eaeb ();_ebdf ,_ :=_bff ._fea .ReadByte ();if _ebdf !='<'{return _acgb ,ErrBadCMapDict ;};_ebdf ,_ =_bff ._fea .ReadByte ();if _ebdf !='<'{return _acgb ,ErrBadCMapDict ;};for {_bff .skipSpaces ();_dabe ,_feebf :=_bff ._fea .Peek (2);if _feebf !=nil {return _acgb ,_feebf ;
};if (_dabe [0]=='>')&&(_dabe [1]=='>'){_bff ._fea .ReadByte ();_bff ._fea .ReadByte ();break ;};_efbd ,_feebf :=_bff .parseName ();_bec .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_efbd .Name );if _feebf !=nil {_bec .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_feebf );
return _acgb ,_feebf ;};_bff .skipSpaces ();_ffe ,_feebf :=_bff .parseObject ();if _feebf !=nil {return _acgb ,_feebf ;};_acgb .Dict [_efbd .Name ]=_ffe ;_bff .skipSpaces ();_dabe ,_feebf =_bff ._fea .Peek (3);if _feebf !=nil {return _acgb ,_feebf ;};if string (_dabe )=="\u0064\u0065\u0066"{_bff ._fea .Discard (3);
};};return _acgb ,nil ;};var (ErrBadCMap =_g .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_g .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););type cmapFloat struct{_edc float64 };func _ege (_dbc string )(*CMap ,error ){_fec ,_gge :=_bc .Asset (_dbc );if _gge !=nil {return nil ,_gge ;};return LoadCmapFromDataCID (_fec );
};func _eaeb ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_bec .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_bae (isSimple );cmap .cMapParser =_bcec (data );_da :=cmap .parse ();if _da !=nil {return nil ,_da ;};if len (cmap ._ggg )==0{if cmap ._fd !=""{return cmap ,nil ;};_bec .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func _bdc (_fbb string )rune {_bce :=[]rune (_fbb );return _bce [len (_bce )-1]};func (_cfgb *cMapParser )parseString ()(cmapString ,error ){_cfgb ._fea .ReadByte ();_becb :=_fb .Buffer {};
_gdac :=1;for {_bgb ,_ebee :=_cfgb ._fea .Peek (1);if _ebee !=nil {return cmapString {_becb .String ()},_ebee ;};if _bgb [0]=='\\'{_cfgb ._fea .ReadByte ();_ece ,_gffe :=_cfgb ._fea .ReadByte ();if _gffe !=nil {return cmapString {_becb .String ()},_gffe ;
};if _eg .IsOctalDigit (_ece ){_bdb ,_cbaf :=_cfgb ._fea .Peek (2);if _cbaf !=nil {return cmapString {_becb .String ()},_cbaf ;};var _afab []byte ;_afab =append (_afab ,_ece );for _ ,_ebec :=range _bdb {if _eg .IsOctalDigit (_ebec ){_afab =append (_afab ,_ebec );
}else {break ;};};_cfgb ._fea .Discard (len (_afab )-1);_bec .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_afab );_fedb ,_cbaf :=_f .ParseUint (string (_afab ),8,32);if _cbaf !=nil {return cmapString {_becb .String ()},_cbaf ;
};_becb .WriteByte (byte (_fedb ));continue ;};switch _ece {case 'n':_becb .WriteByte ('\n');case 'r':_becb .WriteByte ('\r');case 't':_becb .WriteByte ('\t');case 'b':_becb .WriteByte ('\b');case 'f':_becb .WriteByte ('\f');case '(':_becb .WriteByte ('(');
case ')':_becb .WriteByte (')');case '\\':_becb .WriteByte ('\\');};continue ;}else if _bgb [0]=='('{_gdac ++;}else if _bgb [0]==')'{_gdac --;if _gdac ==0{_cfgb ._fea .ReadByte ();break ;};};_efa ,_ :=_cfgb ._fea .ReadByte ();_becb .WriteByte (_efa );};
return cmapString {_becb .String ()},nil ;};type cmapString struct{String string ;};type cmapArray struct{Array []cmapObject ;};func (_afb *CIDSystemInfo )String ()string {return _e .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_afb .Registry ,_afb .Ordering ,_afb .Supplement );
};func (_feg *cMapParser )parseArray ()(cmapArray ,error ){_baff :=cmapArray {};_baff .Array =[]cmapObject {};_feg ._fea .ReadByte ();for {_feg .skipSpaces ();_aeef ,_bggd :=_feg ._fea .Peek (1);if _bggd !=nil {return _baff ,_bggd ;};if _aeef [0]==']'{_feg ._fea .ReadByte ();
break ;};_ebf ,_bggd :=_feg .parseObject ();if _bggd !=nil {return _baff ,_bggd ;};_baff .Array =append (_baff .Array ,_ebf );};return _baff ,nil ;};func (_ggc *cMapParser )parseObject ()(cmapObject ,error ){_ggc .skipSpaces ();for {_cccd ,_cdc :=_ggc ._fea .Peek (2);
if _cdc !=nil {return nil ,_cdc ;};if _cccd [0]=='%'{_ggc .parseComment ();_ggc .skipSpaces ();continue ;}else if _cccd [0]=='/'{_cfaa ,_adc :=_ggc .parseName ();return _cfaa ,_adc ;}else if _cccd [0]=='('{_cbf ,_deba :=_ggc .parseString ();return _cbf ,_deba ;
}else if _cccd [0]=='['{_bbbf ,_ddg :=_ggc .parseArray ();return _bbbf ,_ddg ;}else if (_cccd [0]=='<')&&(_cccd [1]=='<'){_dga ,_eggb :=_ggc .parseDict ();return _dga ,_eggb ;}else if _cccd [0]=='<'{_cgc ,_fbac :=_ggc .parseHexString ();return _cgc ,_fbac ;
}else if _eg .IsDecimalDigit (_cccd [0])||(_cccd [0]=='-'&&_eg .IsDecimalDigit (_cccd [1])){_eeg ,_fag :=_ggc .parseNumber ();if _fag !=nil {return nil ,_fag ;};return _eeg ,nil ;}else {_gad ,_adg :=_ggc .parseOperand ();if _adg !=nil {return nil ,_adg ;
};return _gad ,nil ;};};};func _gff (_dde string )string {_cdf :=[]rune (_dde );_egee :=make ([]string ,len (_cdf ));for _dgg ,_ec :=range _cdf {_egee [_dgg ]=_e .Sprintf ("\u0025\u0030\u0034\u0078",_ec );};return _e .Sprintf ("\u003c\u0025\u0073\u003e",_cc .Join (_egee ,""));
};func (cmap *CMap )parseBfchar ()error {for {_gfa ,_aaba :=cmap .parseObject ();if _aaba !=nil {if _aaba ==_be .EOF {break ;};return _aaba ;};var _cfa CharCode ;switch _eaf :=_gfa .(type ){case cmapOperand :if _eaf .Operand ==_efb {return nil ;};return _g .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_cfa =_aggb (_eaf );default:return _g .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_gfa ,_aaba =cmap .parseObject ();if _aaba !=nil {if _aaba ==_be .EOF {break ;};return _aaba ;};var _cefb []rune ;
switch _ace :=_gfa .(type ){case cmapOperand :if _ace .Operand ==_efb {return nil ;};_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_ace );
return ErrBadCMap ;case cmapHexString :_cefb =_fdc (_ace );case cmapName :_bec .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_ace );_cefb =[]rune {MissingCodeRune };
default:_bec .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_gfa );return ErrBadCMap ;};cmap ._faa [_cfa ]=string (_cefb );};return nil ;};func (_dcg *cMapParser )parseNumber ()(cmapObject ,error ){_gdcc ,_gdg :=_eg .ParseNumber (_dcg ._fea );
if _gdg !=nil {return nil ,_gdg ;};switch _edd :=_gdcc .(type ){case *_eg .PdfObjectFloat :return cmapFloat {float64 (*_edd )},nil ;case *_eg .PdfObjectInteger :return cmapInt {int64 (*_edd )},nil ;};return nil ,_e .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_gdcc );
};func (cmap *CMap )String ()string {_aeg :=cmap ._fef ;_ded :=[]string {_e .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ba ),_e .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._fe )};if cmap ._cef !=""{_ded =append (_ded ,_e .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._cef ));
};if cmap ._fd !=""{_ded =append (_ded ,_e .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._fd ));};_ded =append (_ded ,_e .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_aeg .String ()));
if len (cmap ._ggg )> 0{_ded =append (_ded ,_e .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._ggg )));};if len (cmap ._faa )> 0{_ded =append (_ded ,_e .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._faa )));
};return _e .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._ab ,_cc .Join (_ded ,"\u0020"));};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};const (_gcb ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";
_dbcb ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_gb ="\u0065n\u0064\u0063\u006d\u0061\u0070";_fbaf ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_fbea ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";
_daabe ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_efb ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_bbb ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_bdfd ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_cgf ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_bcef ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_faf ="\u0075s\u0065\u0063\u006d\u0061\u0070";_gceb ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";
_dab ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_fca ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_baf ,_bb :=cmap .BytesToCharcodes (data );if !_bb {_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_daf :=make ([]string ,len (_baf ));var _fda []CharCode ;for _dg ,_dac :=range _baf {_abc ,_gd :=cmap ._faa [_dac ];if !_gd {_fda =append (_fda ,_dac );_abc =MissingCodeString ;};_daf [_dg ]=_abc ;};_gfg :=_cc .Join (_daf ,"");if len (_fda )> 0{_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_baf ,len (_fda ),_fda ,_gfg ,cmap );
};return _gfg ,len (_fda );};type cmapHexString struct{_aac int ;_bacg []byte ;};func (cmap *CMap )Bytes ()[]byte {_bec .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._de )> 0{return cmap ._de ;};cmap ._de =[]byte (_cc .Join ([]string {_fdg ,cmap .toBfData (),_bdff },"\u000a"));return cmap ._de ;};type cMapParser struct{_fea *_a .Reader };func _fdc (_adde cmapHexString )[]rune {if len (_adde ._bacg )==1{return []rune {rune (_adde ._bacg [0])};
};_gdgd :=_adde ._bacg ;if len (_gdgd )%2!=0{_gdgd =append (_gdgd ,0);_bec .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_adde ,_gdgd );
};_cbd :=len (_gdgd )>>1;_gcf :=make ([]uint16 ,_cbd );for _eee :=0;_eee < _cbd ;_eee ++{_gcf [_eee ]=uint16 (_gdgd [_eee <<1])<<8+uint16 (_gdgd [_eee <<1+1]);};_fff :=_ca .Decode (_gcf );return _fff ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_daa ,_ad :=cmap ._ae [cid ];
return _daa ,_ad ;};func (cmap *CMap )parse ()error {var _ffg cmapObject ;for {_gdag ,_fcc :=cmap .parseObject ();if _fcc !=nil {if _fcc ==_be .EOF {break ;};_bec .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_fcc );
return _fcc ;};switch _bad :=_gdag .(type ){case cmapOperand :_fee :=_bad ;switch _fee .Operand {case _fbaf :_aeca :=cmap .parseCodespaceRange ();if _aeca !=nil {return _aeca ;};case _cgf :_gcda :=cmap .parseCIDRange ();if _gcda !=nil {return _gcda ;};
case _daabe :_aaga :=cmap .parseBfchar ();if _aaga !=nil {return _aaga ;};case _bbb :_cbab :=cmap .parseBfrange ();if _cbab !=nil {return _cbab ;};case _faf :if _ffg ==nil {_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_feca ,_eff :=_ffg .(cmapName );if !_eff {_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_ffg );
return ErrBadCMap ;};cmap ._fd =_feca .Name ;case _gcb :_ade :=cmap .parseSystemInfo ();if _ade !=nil {return _ade ;};};case cmapName :_cbb :=_bad ;switch _cbb .Name {case _gcb :_ceg :=cmap .parseSystemInfo ();if _ceg !=nil {return _ceg ;};case _gceb :_bdeb :=cmap .parseName ();
if _bdeb !=nil {return _bdeb ;};case _dab :_cefd :=cmap .parseType ();if _cefd !=nil {return _cefd ;};case _fca :_cgd :=cmap .parseVersion ();if _cgd !=nil {return _cgd ;};};};_ffg =_gdag ;};return nil ;};func (cmap *CMap )parseVersion ()error {_dgf :="";
_deb :=false ;for _cege :=0;_cege < 3&&!_deb ;_cege ++{_abde ,_dcb :=cmap .parseObject ();if _dcb !=nil {return _dcb ;};switch _cfd :=_abde .(type ){case cmapOperand :switch _cfd .Operand {case "\u0064\u0065\u0066":_deb =true ;default:_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_abde );
return ErrBadCMap ;};case cmapInt :_dgf =_e .Sprintf ("\u0025\u0064",_cfd ._deeb );case cmapFloat :_dgf =_e .Sprintf ("\u0025\u0066",_cfd ._edc );case cmapString :_dgf =_cfd .String ;default:_bec .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_abde );
};};cmap ._cef =_dgf ;return nil ;};const (_ccg =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_agg :=make (map[CharCode ]string ,len (codeToRune ));for _fefc ,_aee :=range codeToRune {_agg [_fefc ]=string (_aee );
};cmap :=&CMap {_ab :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_fe :2,_ba :16,_fef :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_ggg :[]Codespace {{Low :0,High :0xffff}},_faa :_agg ,_aga :make (map[string ]CharCode ,len (codeToRune )),_caf :make (map[CharCode ]CharCode ,len (codeToRune )),_ae :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};type cmapObject interface{};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_abg ,_bcc :=cmap ._aga [s ];return _abg ,_bcc ;};type cmapDict struct{Dict map[string ]cmapObject ;};type cmapName struct{Name string ;
};func (_acg *cMapParser )skipSpaces ()(int ,error ){_dad :=0;for {_cda ,_caa :=_acg ._fea .Peek (1);if _caa !=nil {return 0,_caa ;};if _eg .IsWhiteSpace (_cda [0]){_acg ._fea .ReadByte ();_dad ++;}else {break ;};};return _dad ,nil ;};func _acfd (_adgd ,_dbbf int )int {if _adgd < _dbbf {return _adgd ;
};return _dbbf ;};func (cmap *CMap )inCodespace (_dee CharCode ,_dcd int )bool {for _ ,_bede :=range cmap ._ggg {if _bede .Low <=_dee &&_dee <=_bede .High &&_dcd ==_bede .NumBytes {return true ;};};return false ;};type CIDSystemInfo struct{Registry string ;
Ordering string ;Supplement int ;};func (cmap *CMap )toBfData ()string {if len (cmap ._faa )==0{return "";};_ga :=make ([]CharCode ,0,len (cmap ._faa ));for _fcf :=range cmap ._faa {_ga =append (_ga ,_fcf );};_ce .Slice (_ga ,func (_ada ,_ee int )bool {return _ga [_ada ]< _ga [_ee ]});
var _gcg []charRange ;_eac :=charRange {_ga [0],_ga [0]};_gdf :=cmap ._faa [_ga [0]];for _ ,_ffb :=range _ga [1:]{_bde :=cmap ._faa [_ffb ];if _ffb ==_eac ._bea +1&&_bdc (_bde )==_bdc (_gdf )+1{_eac ._bea =_ffb ;}else {_gcg =append (_gcg ,_eac );_eac ._ccc ,_eac ._bea =_ffb ,_ffb ;
};_gdf =_bde ;};_gcg =append (_gcg ,_eac );var _aagc []CharCode ;var _acc []fbRange ;for _ ,_bbag :=range _gcg {if _bbag ._ccc ==_bbag ._bea {_aagc =append (_aagc ,_bbag ._ccc );}else {_acc =append (_acc ,fbRange {_ccd :_bbag ._ccc ,_d :_bbag ._bea ,_gc :cmap ._faa [_bbag ._ccc ]});
};};_bec .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_gcg ),len (_aagc ),len (_acc ));var _aad []string ;if len (_aagc )> 0{_eed :=(len (_aagc )+_gda -1)/_gda ;
for _baa :=0;_baa < _eed ;_baa ++{_aed :=_acfd (len (_aagc )-_baa *_gda ,_gda );_aad =append (_aad ,_e .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_aed ));for _aeb :=0;_aeb < _aed ;_aeb ++{_ddd :=_aagc [_baa *_gda +_aeb ];
_fdf :=cmap ._faa [_ddd ];_aad =append (_aad ,_e .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_ddd ,_gff (_fdf )));};_aad =append (_aad ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_acc )> 0{_dbb :=(len (_acc )+_gda -1)/_gda ;
for _cffb :=0;_cffb < _dbb ;_cffb ++{_cbg :=_acfd (len (_acc )-_cffb *_gda ,_gda );_aad =append (_aad ,_e .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_cbg ));for _fbd :=0;_fbd < _cbg ;_fbd ++{_df :=_acc [_cffb *_gda +_fbd ];
_aad =append (_aad ,_e .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_df ._ccd ,_df ._d ,_gff (_df ._gc )));};_aad =append (_aad ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _cc .Join (_aad ,"\u000a");
};func (cmap *CMap )Stream ()(*_eg .PdfObjectStream ,error ){if cmap ._cb !=nil {return cmap ._cb ,nil ;};_eae ,_eb :=_eg .MakeStream (cmap .Bytes (),_eg .NewFlateEncoder ());if _eb !=nil {return nil ,_eb ;};cmap ._cb =_eae ;return cmap ._cb ,nil ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _dbcc ,_ef :=cmap ._faa [code ];
_ef {return _dbcc ,true ;};return MissingCodeString ,false ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_db :=_ege (name );if _db !=nil {return nil ,_db ;};if cmap ._fd ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_dbf ,_db :=_ege (cmap ._fd );
if _db !=nil {return nil ,_db ;};for _bg ,_ac :=range _dbf ._caf {if _ ,_cff :=cmap ._caf [_bg ];!_cff {cmap ._caf [_bg ]=_ac ;};};cmap ._ggg =append (cmap ._ggg ,_dbf ._ggg ...);cmap .computeInverseMappings ();return cmap ,nil ;};func _bcec (_dfd []byte )*cMapParser {_acf :=cMapParser {};
_gdd :=_fb .NewBuffer (_dfd );_acf ._fea =_a .NewReader (_gdd );return &_acf ;};func _aggbf (_eaecb cmapHexString )rune {_cdce :=_fdc (_eaecb );if _dbe :=len (_cdce );_dbe ==0{_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_eaecb );
return MissingCodeRune ;};if len (_cdce )> 1{_bec .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_eaecb ,_cdce );
};return _cdce [0];};func (cmap *CMap )NBits ()int {return cmap ._ba };