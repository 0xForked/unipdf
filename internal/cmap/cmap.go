//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_fc "bufio";_c "bytes";_d "encoding/hex";_ea "errors";_f "fmt";_ead "github.com/unidoc/unipdf/v3/common";_gg "github.com/unidoc/unipdf/v3/core";_dg "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_a "io";_ba "sort";_g "strconv";
_b "strings";_ef "unicode/utf16";);func NewCIDSystemInfo (obj _gg .PdfObject )(_dd CIDSystemInfo ,_da error ){_gbg ,_aa :=_gg .GetDict (obj );if !_aa {return CIDSystemInfo {},_gg .ErrTypeError ;};_gc ,_aa :=_gg .GetStringVal (_gbg .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_aa {return CIDSystemInfo {},_gg .ErrTypeError ;};_eab ,_aa :=_gg .GetStringVal (_gbg .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_aa {return CIDSystemInfo {},_gg .ErrTypeError ;};_daa ,_aa :=_gg .GetIntVal (_gbg .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_aa {return CIDSystemInfo {},_gg .ErrTypeError ;};return CIDSystemInfo {Registry :_gc ,Ordering :_eab ,Supplement :_daa },nil ;};const (_fce ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_bec ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";
_acgf ="\u0065n\u0064\u0063\u006d\u0061\u0070";_dfd ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_fceb ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";
_egga ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_fee ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_ecc ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_baad ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_cbab ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_agd ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_dgc ="\u0075s\u0065\u0063\u006d\u0061\u0070";_eegg ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";
_fgd ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_beca ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (_cef *cMapParser )parseString ()(cmapString ,error ){_cef ._bcc .ReadByte ();_afge :=_c .Buffer {};_feg :=1;for {_aed ,_bgb :=_cef ._bcc .Peek (1);
if _bgb !=nil {return cmapString {_afge .String ()},_bgb ;};if _aed [0]=='\\'{_cef ._bcc .ReadByte ();_acd ,_eee :=_cef ._bcc .ReadByte ();if _eee !=nil {return cmapString {_afge .String ()},_eee ;};if _gg .IsOctalDigit (_acd ){_cddg ,_afd :=_cef ._bcc .Peek (2);
if _afd !=nil {return cmapString {_afge .String ()},_afd ;};var _dbaee []byte ;_dbaee =append (_dbaee ,_acd );for _ ,_abce :=range _cddg {if _gg .IsOctalDigit (_abce ){_dbaee =append (_dbaee ,_abce );}else {break ;};};_cef ._bcc .Discard (len (_dbaee )-1);
_ead .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_dbaee );_egc ,_afd :=_g .ParseUint (string (_dbaee ),8,32);if _afd !=nil {return cmapString {_afge .String ()},_afd ;};_afge .WriteByte (byte (_egc ));
continue ;};switch _acd {case 'n':_afge .WriteByte ('\n');case 'r':_afge .WriteByte ('\r');case 't':_afge .WriteByte ('\t');case 'b':_afge .WriteByte ('\b');case 'f':_afge .WriteByte ('\f');case '(':_afge .WriteByte ('(');case ')':_afge .WriteByte (')');
case '\\':_afge .WriteByte ('\\');};continue ;}else if _aed [0]=='('{_feg ++;}else if _aed [0]==')'{_feg --;if _feg ==0{_cef ._bcc .ReadByte ();break ;};};_cefa ,_ :=_cef ._bcc .ReadByte ();_afge .WriteByte (_cefa );};return cmapString {_afge .String ()},nil ;
};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_bae :=_ce (name );if _bae !=nil {return nil ,_bae ;};if cmap ._bb ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_eg ,_bae :=_ce (cmap ._bb );if _bae !=nil {return nil ,_bae ;};for _cg ,_bfd :=range _eg ._ag {if _ ,_dde :=cmap ._ag [_cg ];
!_dde {cmap ._ag [_cg ]=_bfd ;};};cmap ._baab =append (cmap ._baab ,_eg ._baab ...);cmap .computeInverseMappings ();return cmap ,nil ;};const (_bfc =100;_eaa ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_ebe ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);type cmapOperand struct{Operand string ;};func (cmap *CMap )inCodespace (_aef CharCode ,_gee int )bool {for _ ,_fed :=range cmap ._baab {if _fed .Low <=_aef &&_aef <=_fed .High &&_gee ==_fed .NumBytes {return true ;};};return false ;};const (_bd =4;MissingCodeRune ='\ufffd';
MissingCodeString =string (MissingCodeRune ););func (_aec *cMapParser )skipSpaces ()(int ,error ){_dcd :=0;for {_eef ,_bfa :=_aec ._bcc .Peek (1);if _bfa !=nil {return 0,_bfa ;};if _gg .IsWhiteSpace (_eef [0]){_aec ._bcc .ReadByte ();_dcd ++;}else {break ;
};};return _dcd ,nil ;};func (cmap *CMap )parseVersion ()error {_fdb :="";_bfge :=false ;for _gge :=0;_gge < 3&&!_bfge ;_gge ++{_eaad ,_ggbcc :=cmap .parseObject ();if _ggbcc !=nil {return _ggbcc ;};switch _aceb :=_eaad .(type ){case cmapOperand :switch _aceb .Operand {case "\u0064\u0065\u0066":_bfge =true ;
default:_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_eaad );
return ErrBadCMap ;};case cmapInt :_fdb =_f .Sprintf ("\u0025\u0064",_aceb ._bgg );case cmapFloat :_fdb =_f .Sprintf ("\u0025\u0066",_aceb ._ffbge );case cmapString :_fdb =_aceb .String ;default:_ead .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_eaad );
};};cmap ._ff =_fdb ;return nil ;};type cmapInt struct{_bgg int64 };func (cmap *CMap )parseType ()error {_ccgg :=0;_bbde :=false ;for _cfe :=0;_cfe < 3&&!_bbde ;_cfe ++{_cede ,_fedc :=cmap .parseObject ();if _fedc !=nil {return _fedc ;};switch _ddf :=_cede .(type ){case cmapOperand :switch _ddf .Operand {case "\u0064\u0065\u0066":_bbde =true ;
default:_ead .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_cede );return ErrBadCMap ;};case cmapInt :_ccgg =int (_ddf ._bgg );
};};cmap ._fde =_ccgg ;return nil ;};type charRange struct{_bc CharCode ;_baa CharCode ;};type CharCode uint32 ;func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_gea ,_aad :=cmap ._ggb [s ];return _gea ,_aad ;};var (ErrBadCMap =_ea .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");
ErrBadCMapComment =_ea .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_ea .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func (cmap *CMap )String ()string {_ddg :=cmap ._cad ;_abd :=[]string {_f .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._fe ),_f .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._fde )};if cmap ._ff !=""{_abd =append (_abd ,_f .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._ff ));
};if cmap ._bb !=""{_abd =append (_abd ,_f .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._bb ));};_abd =append (_abd ,_f .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_ddg .String ()));
if len (cmap ._baab )> 0{_abd =append (_abd ,_f .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._baab )));};if len (cmap ._db )> 0{_abd =append (_abd ,_f .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._db )));
};return _f .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._cf ,_b .Join (_abd ,"\u0020"));};func (_cfa *cMapParser )parseComment ()(string ,error ){var _edge _c .Buffer ;_ ,_gfbg :=_cfa .skipSpaces ();if _gfbg !=nil {return _edge .String (),_gfbg ;
};_defd :=true ;for {_cgc ,_feb :=_cfa ._bcc .Peek (1);if _feb !=nil {_ead .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_feb );return _edge .String (),_feb ;};if _defd &&_cgc [0]!='%'{return _edge .String (),ErrBadCMapComment ;
};_defd =false ;if (_cgc [0]!='\r')&&(_cgc [0]!='\n'){_agc ,_ :=_cfa ._bcc .ReadByte ();_edge .WriteByte (_agc );}else {break ;};};return _edge .String (),nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};
func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_bbf ,_ddd :=cmap ._bbd [cid ];return _bbf ,_ddd ;};type cmapObject interface{};type fbRange struct{_ca CharCode ;_df CharCode ;_gb string ;};type Codespace struct{NumBytes int ;Low CharCode ;
High CharCode ;};func _afg (_ddb string )rune {_fcc :=[]rune (_ddb );return _fcc [len (_fcc )-1]};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_dda :=make (map[CharCode ]string ,len (codeToRune ));for _bfg ,_be :=range codeToRune {_dda [_bfg ]=string (_be );
};cmap :=&CMap {_cf :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_fde :2,_fe :16,_cad :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_baab :[]Codespace {{Low :0,High :0xffff}},_db :_dda ,_ggb :make (map[string ]CharCode ,len (codeToRune )),_ag :make (map[CharCode ]CharCode ,len (codeToRune )),_bbd :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )parseBfrange ()error {for {var _fa CharCode ;_cdfd ,_ggd :=cmap .parseObject ();if _ggd !=nil {if _ggd ==_a .EOF {break ;};return _ggd ;};switch _egfb :=_cdfd .(type ){case cmapOperand :if _egfb .Operand ==_baad {return nil ;
};return _ea .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_fa =_gfbf (_egfb );default:return _ea .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _egfd CharCode ;_cdfd ,_ggd =cmap .parseObject ();if _ggd !=nil {if _ggd ==_a .EOF {break ;};return _ggd ;};switch _ddfd :=_cdfd .(type ){case cmapOperand :_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_egfd =_gfbf (_ddfd );default:_ead .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cdfd );return ErrBadCMap ;};_cdfd ,_ggd =cmap .parseObject ();
if _ggd !=nil {if _ggd ==_a .EOF {break ;};return _ggd ;};switch _afaf :=_cdfd .(type ){case cmapArray :if len (_afaf .Array )!=int (_egfd -_fa )+1{_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _fffd :=_fa ;_fffd <=_egfd ;_fffd ++{_ecd :=_afaf .Array [_fffd -_fa ];_ccfb ,_cff :=_ecd .(cmapHexString );if !_cff {return _ea .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_eed :=_dcgb (_ccfb );cmap ._db [_fffd ]=string (_eed );};case cmapHexString :_cbd :=_dcgb (_afaf );_acgb :=len (_cbd );for _fcf :=_fa ;_fcf <=_egfd ;_fcf ++{cmap ._db [_fcf ]=string (_cbd );if _acgb > 0{_cbd [_acgb -1]++;}else {_ead .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_fcf );
};};default:_ead .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cdfd );return ErrBadCMap ;};};return nil ;};func _gdef (_gbfe cmapHexString )rune {_ddc :=_dcgb (_gbfe );
if _cfb :=len (_ddc );_cfb ==0{_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_gbfe );
return MissingCodeRune ;};if len (_ddc )> 1{_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_gbfe ,_ddc );
};return _ddc [0];};func _ed (_ffb bool )*CMap {_gcd :=16;if _ffb {_gcd =8;};return &CMap {_fe :_gcd ,_ag :make (map[CharCode ]CharCode ),_bbd :make (map[CharCode ]CharCode ),_db :make (map[CharCode ]string ),_ggb :make (map[string ]CharCode )};};func _efa (_ddga string )string {_caa :=[]rune (_ddga );
_afa :=make ([]string ,len (_caa ));for _gda ,_baed :=range _caa {_afa [_gda ]=_f .Sprintf ("\u0025\u0030\u0034\u0078",_baed );};return _f .Sprintf ("\u003c\u0025\u0073\u003e",_b .Join (_afa ,""));};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _dgb ,_egf :=cmap ._db [code ];
_egf {return _dgb ,true ;};return MissingCodeString ,false ;};func (_fdf *cMapParser )parseName ()(cmapName ,error ){_ebf :="";_cddd :=false ;for {_fcg ,_gbdd :=_fdf ._bcc .Peek (1);if _gbdd ==_a .EOF {break ;};if _gbdd !=nil {return cmapName {_ebf },_gbdd ;
};if !_cddd {if _fcg [0]=='/'{_cddd =true ;_fdf ._bcc .ReadByte ();}else {_ead .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_fcg ,_fcg );
return cmapName {_ebf },_f .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_fcg [0]);};}else {if _gg .IsWhiteSpace (_fcg [0]){break ;}else if (_fcg [0]=='/')||(_fcg [0]=='[')||(_fcg [0]=='(')||(_fcg [0]==']')||(_fcg [0]=='<')||(_fcg [0]=='>'){break ;
}else if _fcg [0]=='#'{_dddb ,_acf :=_fdf ._bcc .Peek (3);if _acf !=nil {return cmapName {_ebf },_acf ;};_fdf ._bcc .Discard (3);_aeca ,_acf :=_d .DecodeString (string (_dddb [1:3]));if _acf !=nil {return cmapName {_ebf },_acf ;};_ebf +=string (_aeca );
}else {_gcc ,_ :=_fdf ._bcc .ReadByte ();_ebf +=string (_gcc );};};};return cmapName {_ebf },nil ;};func (cmap *CMap )NBits ()int {return cmap ._fe };func _efed ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func IsPredefinedCMap (name string )bool {return _dg .AssetExists (name )};
func (cmap *CMap )parseSystemInfo ()error {_deeb :=false ;_abec :=false ;_bfbe :="";_gce :=false ;_cecd :=CIDSystemInfo {};for _adb :=0;_adb < 50&&!_gce ;_adb ++{_eaaa ,_ded :=cmap .parseObject ();if _ded !=nil {return _ded ;};switch _cfed :=_eaaa .(type ){case cmapDict :_cab :=_cfed .Dict ;
_fda ,_edg :=_cab ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_edg {_ead .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_efac ,_edg :=_fda .(cmapString );
if !_edg {_ead .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cecd .Registry =_efac .String ;_fda ,_edg =_cab ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];
if !_edg {_ead .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_efac ,_edg =_fda .(cmapString );if !_edg {_ead .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_cecd .Ordering =_efac .String ;_bad ,_edg :=_cab ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_edg {_ead .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_gceb ,_edg :=_bad .(cmapInt );if !_edg {_ead .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cecd .Supplement =int (_gceb ._bgg );
_gce =true ;case cmapOperand :switch _cfed .Operand {case "\u0062\u0065\u0067i\u006e":_deeb =true ;case "\u0065\u006e\u0064":_gce =true ;case "\u0064\u0065\u0066":_abec =false ;};case cmapName :if _deeb {_bfbe =_cfed .Name ;_abec =true ;};case cmapString :if _abec {switch _bfbe {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_cecd .Registry =_cfed .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_cecd .Ordering =_cfed .String ;};};case cmapInt :if _abec {switch _bfbe {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_cecd .Supplement =int (_cfed ._bgg );};};};};if !_gce {_ead .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._cad =_cecd ;return nil ;};func (cmap *CMap )toBfData ()string {if len (cmap ._db )==0{return "";};_abe :=make ([]CharCode ,0,len (cmap ._db ));for _efd :=range cmap ._db {_abe =append (_abe ,_efd );};_ba .Slice (_abe ,func (_edc ,_dbdd int )bool {return _abe [_edc ]< _abe [_dbdd ]});
var _abc []charRange ;_gbd :=charRange {_abe [0],_abe [0]};_gfb :=cmap ._db [_abe [0]];for _ ,_gad :=range _abe [1:]{_dcg :=cmap ._db [_gad ];if _gad ==_gbd ._baa +1&&_afg (_dcg )==_afg (_gfb )+1{_gbd ._baa =_gad ;}else {_abc =append (_abc ,_gbd );_gbd ._bc ,_gbd ._baa =_gad ,_gad ;
};_gfb =_dcg ;};_abc =append (_abc ,_gbd );var _cec []CharCode ;var _gdd []fbRange ;for _ ,_ceb :=range _abc {if _ceb ._bc ==_ceb ._baa {_cec =append (_cec ,_ceb ._bc );}else {_gdd =append (_gdd ,fbRange {_ca :_ceb ._bc ,_df :_ceb ._baa ,_gb :cmap ._db [_ceb ._bc ]});
};};_ead .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_abc ),len (_cec ),len (_gdd ));var _cbg []string ;if len (_cec )> 0{_gbgd :=(len (_cec )+_bfc -1)/_bfc ;
for _fdc :=0;_fdc < _gbgd ;_fdc ++{_cgg :=_gacf (len (_cec )-_fdc *_bfc ,_bfc );_cbg =append (_cbg ,_f .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_cgg ));for _ccge :=0;_ccge < _cgg ;_ccge ++{_fef :=_cec [_fdc *_bfc +_ccge ];
_cdcg :=cmap ._db [_fef ];_cbg =append (_cbg ,_f .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_fef ,_efa (_cdcg )));};_cbg =append (_cbg ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_gdd )> 0{_dcgf :=(len (_gdd )+_bfc -1)/_bfc ;
for _egg :=0;_egg < _dcgf ;_egg ++{_ggbc :=_gacf (len (_gdd )-_egg *_bfc ,_bfc );_cbg =append (_cbg ,_f .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_ggbc ));for _bbfa :=0;_bbfa < _ggbc ;_bbfa ++{_ace :=_gdd [_egg *_bfc +_bbfa ];
_cbg =append (_cbg ,_f .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_ace ._ca ,_ace ._df ,_efa (_ace ._gb )));};_cbg =append (_cbg ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _b .Join (_cbg ,"\u000a");
};type cmapHexString struct{_acbg int ;_fefb []byte ;};func (_cae *cMapParser )parseOperand ()(cmapOperand ,error ){_bdec :=cmapOperand {};_gga :=_c .Buffer {};for {_gbe ,_dab :=_cae ._bcc .Peek (1);if _dab !=nil {if _dab ==_a .EOF {break ;};return _bdec ,_dab ;
};if _gg .IsDelimiter (_gbe [0]){break ;};if _gg .IsWhiteSpace (_gbe [0]){break ;};_fcce ,_ :=_cae ._bcc .ReadByte ();_gga .WriteByte (_fcce );};if _gga .Len ()==0{return _bdec ,_f .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_bdec .Operand =_gga .String ();return _bdec ,nil ;};type CMap struct{*cMapParser ;_cf string ;_fe int ;_fde int ;_ff string ;_bb string ;_cad CIDSystemInfo ;_baab []Codespace ;_ag map[CharCode ]CharCode ;_bbd map[CharCode ]CharCode ;_db map[CharCode ]string ;
_ggb map[string ]CharCode ;_cd []byte ;_bf *_gg .PdfObjectStream ;};type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_dbab ,_bba :=cmap .BytesToCharcodes (data );if !_bba {_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_bfdd :=make ([]string ,len (_dbab ));var _ga []CharCode ;for _ec ,_fg :=range _dbab {_gd ,_dbae :=cmap ._db [_fg ];if !_dbae {_ga =append (_ga ,_fg );_gd =MissingCodeString ;};_bfdd [_ec ]=_gd ;};_dbd :=_b .Join (_bfdd ,"");if len (_ga )> 0{_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_dbab ,len (_ga ),_ga ,_dbd ,cmap );
};return _dbd ,len (_ga );};func (cmap *CMap )parse ()error {var _efg cmapObject ;for {_cggb ,_eadd :=cmap .parseObject ();if _eadd !=nil {if _eadd ==_a .EOF {break ;};_ead .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_eadd );
return _eadd ;};switch _bfbg :=_cggb .(type ){case cmapOperand :_baef :=_bfbg ;switch _baef .Operand {case _dfd :_aab :=cmap .parseCodespaceRange ();if _aab !=nil {return _aab ;};case _cbab :_bgec :=cmap .parseCIDRange ();if _bgec !=nil {return _bgec ;
};case _egga :_cge :=cmap .parseBfchar ();if _cge !=nil {return _cge ;};case _ecc :_eeg :=cmap .parseBfrange ();if _eeg !=nil {return _eeg ;};case _dgc :if _efg ==nil {_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_cgb ,_ccgc :=_efg .(cmapName );if !_ccgc {_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_efg );
return ErrBadCMap ;};cmap ._bb =_cgb .Name ;case _fce :_dfg :=cmap .parseSystemInfo ();if _dfg !=nil {return _dfg ;};};case cmapName :_bde :=_bfbg ;switch _bde .Name {case _fce :_ced :=cmap .parseSystemInfo ();if _ced !=nil {return _ced ;};case _eegg :_ebc :=cmap .parseName ();
if _ebc !=nil {return _ebc ;};case _fgd :_cebb :=cmap .parseType ();if _cebb !=nil {return _cebb ;};case _beca :_gfga :=cmap .parseVersion ();if _gfga !=nil {return _gfga ;};};};_efg =_cggb ;};return nil ;};type CIDSystemInfo struct{Registry string ;Ordering string ;
Supplement int ;};func _gacf (_aceg ,_efgd int )int {if _aceg < _efgd {return _aceg ;};return _efgd ;};func (cmap *CMap )parseCIDRange ()error {for {_gddd ,_acg :=cmap .parseObject ();if _acg !=nil {if _acg ==_a .EOF {break ;};return _acg ;};_babc ,_eade :=_gddd .(cmapHexString );
if !_eade {if _bbg ,_caac :=_gddd .(cmapOperand );_caac {if _bbg .Operand ==_agd {return nil ;};return _ea .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_cdf :=_gfbf (_babc );_gddd ,_acg =cmap .parseObject ();if _acg !=nil {if _acg ==_a .EOF {break ;};return _acg ;};_abcb ,_eade :=_gddd .(cmapHexString );if !_eade {return _ea .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_babc ._fefb )!=len (_abcb ._fefb ){return _ea .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_gae :=_gfbf (_abcb );
if _cdf > _gae {_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_cdf ,_gae );
return ErrBadCMap ;};_gddd ,_acg =cmap .parseObject ();if _acg !=nil {if _acg ==_a .EOF {break ;};return _acg ;};_dfefb ,_eade :=_gddd .(cmapInt );if !_eade {return _ea .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _dfefb ._bgg < 0{return _ea .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_ebd :=_dfefb ._bgg ;for _fffa :=_cdf ;_fffa <=_gae ;_fffa ++{cmap ._ag [_fffa ]=CharCode (_ebd );
_ebd ++;};_ead .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_cdf ,_gae ,_dfefb ._bgg );};return nil ;};func (cmap *CMap )Type ()int {return cmap ._fde };
func (cmap *CMap )Name ()string {return cmap ._cf };func (_fd *CIDSystemInfo )String ()string {return _f .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_fd .Registry ,_fd .Ordering ,_fd .Supplement );};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _cea []CharCode ;
if cmap ._fe ==8{for _ ,_bgc :=range data {_cea =append (_cea ,CharCode (_bgc ));};return _cea ,true ;};for _gfg :=0;_gfg < len (data );{_abf ,_fgb ,_ee :=cmap .matchCode (data [_gfg :]);if !_ee {_ead .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_gfg ,data ,string (data ));
return _cea ,false ;};_cea =append (_cea ,_abf );_gfg +=_fgb ;};return _cea ,true ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_bed ,_bbb :=cmap ._ag [code ];return _bed ,_bbb ;};func (cmap *CMap )computeInverseMappings (){for _ccf ,_cag :=range cmap ._ag {if _cb ,_gf :=cmap ._bbd [_cag ];
!_gf ||(_gf &&_cb > _ccf ){cmap ._bbd [_cag ]=_ccf ;};};for _cfc ,_dbg :=range cmap ._db {if _fff ,_ad :=cmap ._ggb [_dbg ];!_ad ||(_ad &&_fff > _cfc ){cmap ._ggb [_dbg ]=_cfc ;};};_ba .Slice (cmap ._baab ,func (_dba ,_bab int )bool {return cmap ._baab [_dba ].Low < cmap ._baab [_bab ].Low });
};func (_cadf *cMapParser )parseHexString ()(cmapHexString ,error ){_cadf ._bcc .ReadByte ();_bfab :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_ada :=_c .Buffer {};for {_cadf .skipSpaces ();
_bdf ,_geab :=_cadf ._bcc .Peek (1);if _geab !=nil {return cmapHexString {},_geab ;};if _bdf [0]=='>'{_cadf ._bcc .ReadByte ();break ;};_fec ,_ :=_cadf ._bcc .ReadByte ();if _c .IndexByte (_bfab ,_fec )>=0{_ada .WriteByte (_fec );};};if _ada .Len ()%2==1{_ead .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_ada .String ());
_ada .WriteByte ('0');};_baee :=_ada .Len ()/2;_gff ,_ :=_d .DecodeString (_ada .String ());return cmapHexString {_acbg :_baee ,_fefb :_gff },nil ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_ead .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_ed (isSimple );cmap .cMapParser =_ege (data );_af :=cmap .parse ();if _af !=nil {return nil ,_af ;};if len (cmap ._baab )==0{if cmap ._bb !=""{return cmap ,nil ;};_ead .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseCodespaceRange ()error {for {_efb ,_abda :=cmap .parseObject ();if _abda !=nil {if _abda ==_a .EOF {break ;};return _abda ;};_ddaa ,_cfcd :=_efb .(cmapHexString );
if !_cfcd {if _efda ,_adf :=_efb .(cmapOperand );_adf {if _efda .Operand ==_fceb {return nil ;};return _ea .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_efb ,_abda =cmap .parseObject ();if _abda !=nil {if _abda ==_a .EOF {break ;
};return _abda ;};_dfc ,_cfcd :=_efb .(cmapHexString );if !_cfcd {return _ea .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_ddaa ._fefb )!=len (_dfc ._fefb ){return _ea .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_cce :=_gfbf (_ddaa );_geg :=_gfbf (_dfc );if _geg < _cce {_ead .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_cce ,_geg );
return ErrBadCMap ;};_gec :=_dfc ._acbg ;_ccd :=Codespace {NumBytes :_gec ,Low :_cce ,High :_geg };cmap ._baab =append (cmap ._baab ,_ccd );_ead .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_cce ,_geg );
};if len (cmap ._baab )==0{_ead .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )parseName ()error {_ged :="";
_cdca :=false ;for _bef :=0;_bef < 20&&!_cdca ;_bef ++{_gfc ,_dee :=cmap .parseObject ();if _dee !=nil {return _dee ;};switch _ebed :=_gfc .(type ){case cmapOperand :switch _ebed .Operand {case "\u0064\u0065\u0066":_cdca =true ;default:_ead .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_gfc ,_ged );
if _ged !=""{_ged =_f .Sprintf ("\u0025\u0073\u0020%\u0073",_ged ,_ebed .Operand );};_ead .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_ged );
};case cmapName :_ged =_ebed .Name ;};};if !_cdca {_ead .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._cf =_ged ;return nil ;};type cmapFloat struct{_ffbge float64 };
func (cmap *CMap )Bytes ()[]byte {_ead .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._cd )> 0{return cmap ._cd ;};cmap ._cd =[]byte (_b .Join ([]string {_eaa ,cmap .toBfData (),_ebe },"\u000a"));
return cmap ._cd ;};func (_gcb *cMapParser )parseObject ()(cmapObject ,error ){_gcb .skipSpaces ();for {_efc ,_bgecg :=_gcb ._bcc .Peek (2);if _bgecg !=nil {return nil ,_bgecg ;};if _efc [0]=='%'{_gcb .parseComment ();_gcb .skipSpaces ();continue ;}else if _efc [0]=='/'{_aae ,_cfec :=_gcb .parseName ();
return _aae ,_cfec ;}else if _efc [0]=='('{_dbf ,_geaf :=_gcb .parseString ();return _dbf ,_geaf ;}else if _efc [0]=='['{_fcb ,_gaa :=_gcb .parseArray ();return _fcb ,_gaa ;}else if (_efc [0]=='<')&&(_efc [1]=='<'){_fgaf ,_cecg :=_gcb .parseDict ();return _fgaf ,_cecg ;
}else if _efc [0]=='<'{_ccff ,_gdeg :=_gcb .parseHexString ();return _ccff ,_gdeg ;}else if _gg .IsDecimalDigit (_efc [0])||(_efc [0]=='-'&&_gg .IsDecimalDigit (_efc [1])){_efe ,_dgd :=_gcb .parseNumber ();if _dgd !=nil {return nil ,_dgd ;};return _efe ,nil ;
}else {_acc ,_efcd :=_gcb .parseOperand ();if _efcd !=nil {return nil ,_efcd ;};return _acc ,nil ;};};};type cmapString struct{String string ;};type cmapName struct{Name string ;};func _gfbf (_dca cmapHexString )CharCode {_edgg :=CharCode (0);for _ ,_eeb :=range _dca ._fefb {_edgg <<=8;
_edgg |=CharCode (_eeb );};return _edgg ;};func (_fgdf *cMapParser )parseNumber ()(cmapObject ,error ){_fbc ,_fded :=_gg .ParseNumber (_fgdf ._bcc );if _fded !=nil {return nil ,_fded ;};switch _aff :=_fbc .(type ){case *_gg .PdfObjectFloat :return cmapFloat {float64 (*_aff )},nil ;
case *_gg .PdfObjectInteger :return cmapInt {int64 (*_aff )},nil ;};return nil ,_f .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fbc );};func _ege (_fffe []byte )*cMapParser {_geb :=cMapParser {};
_deg :=_c .NewBuffer (_fffe );_geb ._bcc =_fc .NewReader (_deg );return &_geb ;};type cmapArray struct{Array []cmapObject ;};func (_fefg *cMapParser )parseArray ()(cmapArray ,error ){_cde :=cmapArray {};_cde .Array =[]cmapObject {};_fefg ._bcc .ReadByte ();
for {_fefg .skipSpaces ();_gca ,_add :=_fefg ._bcc .Peek (1);if _add !=nil {return _cde ,_add ;};if _gca [0]==']'{_fefg ._bcc .ReadByte ();break ;};_cfg ,_add :=_fefg .parseObject ();if _add !=nil {return _cde ,_add ;};_cde .Array =append (_cde .Array ,_cfg );
};return _cde ,nil ;};func _ce (_dfe string )(*CMap ,error ){_cdc ,_dfef :=_dg .Asset (_dfe );if _dfef !=nil {return nil ,_dfef ;};return LoadCmapFromDataCID (_cdc );};func (cmap *CMap )matchCode (_def []byte )(_bea CharCode ,_cdd int ,_eb bool ){for _cba :=0;
_cba < _bd ;_cba ++{if _cba < len (_def ){_bea =_bea <<8|CharCode (_def [_cba ]);_cdd ++;};_eb =cmap .inCodespace (_bea ,_cba +1);if _eb {return _bea ,_cdd ,true ;};};_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_def ,string (_def ),cmap );
return 0,0,false ;};func _dcgb (_cgcb cmapHexString )[]rune {if len (_cgcb ._fefb )==1{return []rune {rune (_cgcb ._fefb [0])};};_cadb :=_cgcb ._fefb ;if len (_cadb )%2!=0{_cadb =append (_cadb ,0);_ead .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_cgcb ,_cadb );
};_acde :=len (_cadb )>>1;_eec :=make ([]uint16 ,_acde );for _ggg :=0;_ggg < _acde ;_ggg ++{_eec [_ggg ]=uint16 (_cadb [_ggg <<1])<<8+uint16 (_cadb [_ggg <<1+1]);};_fcec :=_ef .Decode (_eec );return _fcec ;};type cMapParser struct{_bcc *_fc .Reader };func (cmap *CMap )parseBfchar ()error {for {_cbf ,_ffbg :=cmap .parseObject ();
if _ffbg !=nil {if _ffbg ==_a .EOF {break ;};return _ffbg ;};var _bbc CharCode ;switch _eadeg :=_cbf .(type ){case cmapOperand :if _eadeg .Operand ==_fee {return nil ;};return _ea .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_bbc =_gfbf (_eadeg );default:return _ea .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_cbf ,_ffbg =cmap .parseObject ();if _ffbg !=nil {if _ffbg ==_a .EOF {break ;};return _ffbg ;};var _ccc []rune ;
switch _bbbd :=_cbf .(type ){case cmapOperand :if _bbbd .Operand ==_fee {return nil ;};_ead .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_bbbd );
return ErrBadCMap ;case cmapHexString :_ccc =_dcgb (_bbbd );case cmapName :_ead .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_bbbd );_ccc =[]rune {MissingCodeRune };
default:_ead .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_cbf );return ErrBadCMap ;};cmap ._db [_bbc ]=string (_ccc );};return nil ;};func (_aag *cMapParser )parseDict ()(cmapDict ,error ){_ead .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_fegc :=_efed ();_efcdb ,_ :=_aag ._bcc .ReadByte ();if _efcdb !='<'{return _fegc ,ErrBadCMapDict ;};_efcdb ,_ =_aag ._bcc .ReadByte ();if _efcdb !='<'{return _fegc ,ErrBadCMapDict ;};for {_aag .skipSpaces ();_bfaa ,_dfdb :=_aag ._bcc .Peek (2);if _dfdb !=nil {return _fegc ,_dfdb ;
};if (_bfaa [0]=='>')&&(_bfaa [1]=='>'){_aag ._bcc .ReadByte ();_aag ._bcc .ReadByte ();break ;};_gacc ,_dfdb :=_aag .parseName ();_ead .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_gacc .Name );if _dfdb !=nil {_ead .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_dfdb );
return _fegc ,_dfdb ;};_aag .skipSpaces ();_fegg ,_dfdb :=_aag .parseObject ();if _dfdb !=nil {return _fegc ,_dfdb ;};_fegc .Dict [_gacc .Name ]=_fegg ;_aag .skipSpaces ();_bfaa ,_dfdb =_aag ._bcc .Peek (3);if _dfdb !=nil {return _fegc ,_dfdb ;};if string (_bfaa )=="\u0064\u0065\u0066"{_aag ._bcc .Discard (3);
};};return _fegc ,nil ;};func (cmap *CMap )Stream ()(*_gg .PdfObjectStream ,error ){if cmap ._bf !=nil {return cmap ._bf ,nil ;};_eda ,_bfb :=_gg .MakeStream (cmap .Bytes (),_gg .NewFlateEncoder ());if _bfb !=nil {return nil ,_bfb ;};cmap ._bf =_eda ;return cmap ._bf ,nil ;
};