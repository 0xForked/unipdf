//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_d "bufio";_bc "bytes";_ac "encoding/hex";_af "errors";_b "fmt";_acf "github.com/unidoc/unipdf/v3/common";_eg "github.com/unidoc/unipdf/v3/core";_acg "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_e "io";_dg "sort";_a "strconv";_afd "strings";_be "unicode/utf16";);func (cmap *CMap )parseBfchar ()error {for {_eba ,_fgec :=cmap .parseObject ();if _fgec !=nil {if _fgec ==_e .EOF {break ;};return _fgec ;};var _ece CharCode ;switch _accc :=_eba .(type ){case cmapOperand :if _accc .Operand ==_edb {return nil ;};return _af .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_ece =_cef (_accc );default:return _af .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_eba ,_fgec =cmap .parseObject ();if _fgec !=nil {if _fgec ==_e .EOF {break ;};return _fgec ;};var _cafa []rune ;switch _ddf :=_eba .(type ){case cmapOperand :if _ddf .Operand ==_edb {return nil ;};_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_ddf );return ErrBadCMap ;case cmapHexString :_cafa =_gdf (_ddf );case cmapName :_acf .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_ddf );_cafa =[]rune {MissingCodeRune };default:_acf .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_eba );return ErrBadCMap ;};cmap ._cg [_ece ]=string (_cafa );};return nil ;};const (_c =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););type cmapInt struct{_caec int64 };func _cca (_fcf []byte )*cMapParser {_ege :=cMapParser {};_bcgbbb :=_bc .NewBuffer (_fcf );_ege ._ageg =_d .NewReader (_bcgbbb );return &_ege ;};func (cmap *CMap )String ()string {_feb :=cmap ._gf ;_ddg :=[]string {_b .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._de ),_b .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._da )};if cmap ._gc !=""{_ddg =append (_ddg ,_b .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._gc ));};if cmap ._ab !=""{_ddg =append (_ddg ,_b .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._ab ));};_ddg =append (_ddg ,_b .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_feb .String ()));if len (cmap ._cdd )> 0{_ddg =append (_ddg ,_b .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._cdd )));};if len (cmap ._cg )> 0{_ddg =append (_ddg ,_b .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._cg )));};return _b .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._fe ,_afd .Join (_ddg ,"\u0020"));};func (_gcde *cMapParser )skipSpaces ()(int ,error ){_edbg :=0;for {_gdg ,_dec :=_gcde ._ageg .Peek (1);if _dec !=nil {return 0,_dec ;};if _eg .IsWhiteSpace (_gdg [0]){_gcde ._ageg .ReadByte ();_edbg ++;}else {break ;};};return _edbg ,nil ;};type cmapArray struct{Array []cmapObject ;};type cmapHexString struct{_aef int ;_dag []byte ;};func IsPredefinedCMap (name string )bool {return _acg .AssetExists (name )};func (cmap *CMap )inCodespace (_bff CharCode ,_ceg int )bool {for _ ,_ebe :=range cmap ._cdd {if _ebe .Low <=_bff &&_bff <=_ebe .High &&_ceg ==_ebe .NumBytes {return true ;};};return false ;};type cmapFloat struct{_fbdf float64 };func (cmap *CMap )parseBfrange ()error {for {var _cae CharCode ;_bfa ,_cff :=cmap .parseObject ();if _cff !=nil {if _cff ==_e .EOF {break ;};return _cff ;};switch _bcd :=_bfa .(type ){case cmapOperand :if _bcd .Operand ==_dgg {return nil ;};return _af .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_cae =_cef (_bcd );default:return _af .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _dbcc CharCode ;_bfa ,_cff =cmap .parseObject ();if _cff !=nil {if _cff ==_e .EOF {break ;};return _cff ;};switch _edef :=_bfa .(type ){case cmapOperand :_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");return ErrBadCMap ;case cmapHexString :_dbcc =_cef (_edef );default:_acf .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_bfa );return ErrBadCMap ;};_bfa ,_cff =cmap .parseObject ();if _cff !=nil {if _cff ==_e .EOF {break ;};return _cff ;};switch _gda :=_bfa .(type ){case cmapArray :if len (_gda .Array )!=int (_dbcc -_cae )+1{_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");return ErrBadCMap ;};for _bbaf :=_cae ;_bbaf <=_dbcc ;_bbaf ++{_cce :=_gda .Array [_bbaf -_cae ];_faea ,_cfcc :=_cce .(cmapHexString );if !_cfcc {return _af .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");};_fca :=_gdf (_faea );cmap ._cg [_bbaf ]=string (_fca );};case cmapHexString :_gagdg :=_gdf (_gda );_cgbf :=len (_gagdg );for _cbga :=_cae ;_cbga <=_dbcc ;_cbga ++{cmap ._cg [_cbga ]=string (_gagdg );_gagdg [_cgbf -1]++;};default:_acf .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_bfa );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )Stream ()(*_eg .PdfObjectStream ,error ){if cmap ._ce !=nil {return cmap ._ce ,nil ;};_cfc ,_bcgb :=_eg .MakeStream (cmap .Bytes (),_eg .NewFlateEncoder ());if _bcgb !=nil {return nil ,_bcgb ;};cmap ._ce =_cfc ;return cmap ._ce ,nil ;};func (_bfge *cMapParser )parseNumber ()(cmapObject ,error ){_gbfe ,_eggg :=_eg .ParseNumber (_bfge ._ageg );if _eggg !=nil {return nil ,_eggg ;};switch _ggd :=_gbfe .(type ){case *_eg .PdfObjectFloat :return cmapFloat {float64 (*_ggd )},nil ;case *_eg .PdfObjectInteger :return cmapInt {int64 (*_ggd )},nil ;};return nil ,_b .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_gbfe );};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_ecc ,_dbf :=cmap .BytesToCharcodes (data );if !_dbf {_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );return "",0;};_abf :=make ([]string ,len (_ecc ));var _bf []CharCode ;for _aa ,_ag :=range _ecc {_bec ,_gec :=cmap ._cg [_ag ];if !_gec {_bf =append (_bf ,_ag );_bec =MissingCodeString ;};_abf [_aa ]=_bec ;};_bfe :=_afd .Join (_abf ,"");if len (_bf )> 0{_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_ecc ,len (_bf ),_bf ,_bfe ,cmap );};return _bfe ,len (_bf );};func (cmap *CMap )Bytes ()[]byte {_acf .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._eae )> 0{return cmap ._eae ;};cmap ._eae =[]byte (_afd .Join ([]string {_gd ,cmap .toBfData (),_faaa },"\u000a"));return cmap ._eae ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_dgbf :=_eec (name );if _dgbf !=nil {return nil ,_dgbf ;};if cmap ._ab ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_dgc ,_dgbf :=_eec (cmap ._ab );if _dgbf !=nil {return nil ,_dgbf ;};for _egff ,_fd :=range _dgc ._gg {if _ ,_fg :=cmap ._gg [_egff ];!_fg {cmap ._gg [_egff ]=_fd ;};};cmap ._cdd =append (cmap ._cdd ,_dgc ._cdd ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_dfc ,_aec :=cmap ._deb [cid ];return _dfc ,_aec ;};func _ecad (_dgda ,_bfac int )int {if _dgda < _bfac {return _dgda ;};return _bfac ;};func (cmap *CMap )parseType ()error {_gab :=0;_aaf :=false ;for _fge :=0;_fge < 3&&!_aaf ;_fge ++{_fdb ,_gaed :=cmap .parseObject ();if _gaed !=nil {return _gaed ;};switch _gegfa :=_fdb .(type ){case cmapOperand :switch _gegfa .Operand {case "\u0064\u0065\u0066":_aaf =true ;default:_acf .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_fdb );return ErrBadCMap ;};case cmapInt :_gab =int (_gegfa ._caec );};};cmap ._da =_gab ;return nil ;};func (_acb *CIDSystemInfo )String ()string {return _b .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_acb .Registry ,_acb .Ordering ,_acb .Supplement );};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func NewCIDSystemInfo (obj _eg .PdfObject )(_dgb CIDSystemInfo ,_fb error ){_ca ,_ae :=_eg .GetDict (obj );if !_ae {return CIDSystemInfo {},_eg .ErrTypeError ;};_dd ,_ae :=_eg .GetStringVal (_ca .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_ae {return CIDSystemInfo {},_eg .ErrTypeError ;};_g ,_ae :=_eg .GetStringVal (_ca .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_ae {return CIDSystemInfo {},_eg .ErrTypeError ;};_gb ,_ae :=_eg .GetIntVal (_ca .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_ae {return CIDSystemInfo {},_eg .ErrTypeError ;};return CIDSystemInfo {Registry :_dd ,Ordering :_g ,Supplement :_gb },nil ;};func (_bgad *cMapParser )parseArray ()(cmapArray ,error ){_ccd :=cmapArray {};_ccd .Array =[]cmapObject {};_bgad ._ageg .ReadByte ();for {_bgad .skipSpaces ();_abgg ,_edga :=_bgad ._ageg .Peek (1);if _edga !=nil {return _ccd ,_edga ;};if _abgg [0]==']'{_bgad ._ageg .ReadByte ();break ;};_bfbd ,_edga :=_bgad .parseObject ();if _edga !=nil {return _ccd ,_edga ;};_ccd .Array =append (_ccd .Array ,_bfbd );};return _ccd ,nil ;};func _eec (_ec string )(*CMap ,error ){_bea ,_ge :=_acg .Asset (_ec );if _ge !=nil {return nil ,_ge ;};return LoadCmapFromDataCID (_bea );};func (_faec *cMapParser )parseObject ()(cmapObject ,error ){_faec .skipSpaces ();for {_eggf ,_cgc :=_faec ._ageg .Peek (2);if _cgc !=nil {return nil ,_cgc ;};if _eggf [0]=='%'{_faec .parseComment ();_faec .skipSpaces ();continue ;}else if _eggf [0]=='/'{_fgag ,_eabc :=_faec .parseName ();return _fgag ,_eabc ;}else if _eggf [0]=='('{_gbf ,_gcd :=_faec .parseString ();return _gbf ,_gcd ;}else if _eggf [0]=='['{_gccd ,_bbab :=_faec .parseArray ();return _gccd ,_bbab ;}else if (_eggf [0]=='<')&&(_eggf [1]=='<'){_bfg ,_cbfc :=_faec .parseDict ();return _bfg ,_cbfc ;}else if _eggf [0]=='<'{_gefd ,_gdag :=_faec .parseHexString ();return _gefd ,_gdag ;}else if _eg .IsDecimalDigit (_eggf [0])||(_eggf [0]=='-'&&_eg .IsDecimalDigit (_eggf [1])){_dfed ,_agb :=_faec .parseNumber ();if _agb !=nil {return nil ,_agb ;};return _dfed ,nil ;}else {_abgf ,_fgd :=_faec .parseOperand ();if _fgd !=nil {return nil ,_fgd ;};return _abgf ,nil ;};};};type cmapString struct{String string ;};func (cmap *CMap )matchCode (_fdd []byte )(_fdf CharCode ,_gae int ,_cc bool ){for _ggb :=0;_ggb < _c ;_ggb ++{if _ggb < len (_fdd ){_fdf =_fdf <<8|CharCode (_fdd [_ggb ]);_gae ++;};_cc =cmap .inCodespace (_fdf ,_ggb +1);if _cc {return _fdf ,_gae ,true ;};};_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_fdd ,string (_fdd ),cmap );return 0,0,false ;};type cMapParser struct{_ageg *_d .Reader };const (_bbad =100;_gd ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";_faaa ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";);func (cmap *CMap )parse ()error {var _acgf cmapObject ;for {_ffb ,_ba :=cmap .parseObject ();if _ba !=nil {if _ba ==_e .EOF {break ;};_acf .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_ba );return _ba ;};switch _edd :=_ffb .(type ){case cmapOperand :_bcf :=_edd ;switch _bcf .Operand {case _fcg :_bdb :=cmap .parseCodespaceRange ();if _bdb !=nil {return _bdb ;};case _aeb :_gdc :=cmap .parseCIDRange ();if _gdc !=nil {return _gdc ;};case _eab :_baa :=cmap .parseBfchar ();if _baa !=nil {return _baa ;};case _dc :_bce :=cmap .parseBfrange ();if _bce !=nil {return _bce ;};case _ggg :if _acgf ==nil {_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_caf ,_dbgg :=_acgf .(cmapName );if !_dbgg {_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_acgf );return ErrBadCMap ;};cmap ._ab =_caf .Name ;case _fdg :_fae :=cmap .parseSystemInfo ();if _fae !=nil {return _fae ;};};case cmapName :_dfcb :=_edd ;switch _dfcb .Name {case _fdg :_edg :=cmap .parseSystemInfo ();if _edg !=nil {return _edg ;};case _aabc :_ceb :=cmap .parseName ();if _ceb !=nil {return _ceb ;};case _dbga :_bgb :=cmap .parseType ();if _bgb !=nil {return _bgb ;};case _agc :_fee :=cmap .parseVersion ();if _fee !=nil {return _fee ;};};};_acgf =_ffb ;};return nil ;};func (cmap *CMap )parseVersion ()error {_gfga :="";_gage :=false ;for _ebc :=0;_ebc < 3&&!_gage ;_ebc ++{_gge ,_gea :=cmap .parseObject ();if _gea !=nil {return _gea ;};switch _adb :=_gge .(type ){case cmapOperand :switch _adb .Operand {case "\u0064\u0065\u0066":_gage =true ;default:_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_gge );return ErrBadCMap ;};case cmapInt :_gfga =_b .Sprintf ("\u0025\u0064",_adb ._caec );case cmapFloat :_gfga =_b .Sprintf ("\u0025\u0066",_adb ._fbdf );case cmapString :_gfga =_adb .String ;default:_acf .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_gge );};};cmap ._gc =_gfga ;return nil ;};func _egfbb ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_gef ,_bbc :=cmap ._ddd [s ];return _gef ,_bbc ;};type CMap struct{*cMapParser ;_fe string ;_de int ;_da int ;_gc string ;_ab string ;_gf CIDSystemInfo ;_cdd []Codespace ;_gg map[CharCode ]CharCode ;_deb map[CharCode ]CharCode ;_cg map[CharCode ]string ;_ddd map[string ]CharCode ;_eae []byte ;_ce *_eg .PdfObjectStream ;};type cmapOperand struct{Operand string ;};func (cmap *CMap )parseCodespaceRange ()error {for {_gegfd ,_ace :=cmap .parseObject ();if _ace !=nil {if _ace ==_e .EOF {break ;};return _ace ;};_ada ,_acff :=_gegfd .(cmapHexString );if !_acff {if _egg ,_fag :=_gegfd .(cmapOperand );_fag {if _egg .Operand ==_cadf {return nil ;};return _af .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_gegfd ,_ace =cmap .parseObject ();if _ace !=nil {if _ace ==_e .EOF {break ;};return _ace ;};_gaege ,_acff :=_gegfd .(cmapHexString );if !_acff {return _af .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_ada ._dag )!=len (_gaege ._dag ){return _af .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_afc :=_cef (_ada );_dda :=_cef (_gaege );if _dda < _afc {_acf .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_afc ,_dda );return ErrBadCMap ;};_bga :=_gaege ._aef ;_gagd :=Codespace {NumBytes :_bga ,Low :_afc ,High :_dda };cmap ._cdd =append (cmap ._cdd ,_gagd );_acf .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_afc ,_dda );};if len (cmap ._cdd )==0{_acf .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )toBfData ()string {if len (cmap ._cg )==0{return "";};_fcd :=make ([]CharCode ,0,len (cmap ._cg ));for _fbg :=range cmap ._cg {_fcd =append (_fcd ,_fbg );};_dg .Slice (_fcd ,func (_egc ,_egfb int )bool {return _fcd [_egc ]< _fcd [_egfb ]});var _dbg []charRange ;_eccc :=charRange {_fcd [0],_fcd [0]};_agf :=cmap ._cg [_fcd [0]];for _ ,_cad :=range _fcd [1:]{_gegf :=cmap ._cg [_cad ];if _cad ==_eccc ._cd +1&&_bd (_gegf )==_bd (_agf )+1{_eccc ._cd =_cad ;}else {_dbg =append (_dbg ,_eccc );_eccc ._bb ,_eccc ._cd =_cad ,_cad ;};_agf =_gegf ;};_dbg =append (_dbg ,_eccc );var _dde []CharCode ;var _abb []fbRange ;for _ ,_debc :=range _dbg {if _debc ._bb ==_debc ._cd {_dde =append (_dde ,_debc ._bb );}else {_abb =append (_abb ,fbRange {_ea :_debc ._bb ,_df :_debc ._cd ,_bcg :cmap ._cg [_debc ._bb ]});};};_acf .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_dbg ),len (_dde ),len (_abb ));var _ede []string ;if len (_dde )> 0{_egdc :=(len (_dde )+_bbad -1)/_bbad ;for _gegd :=0;_gegd < _egdc ;_gegd ++{_gfc :=_ecad (len (_dde )-_gegd *_bbad ,_bbad );_ede =append (_ede ,_b .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_gfc ));for _afb :=0;_afb < _gfc ;_afb ++{_fbc :=_dde [_gegd *_bbad +_afb ];_ggbf :=cmap ._cg [_fbc ];_ede =append (_ede ,_b .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_fbc ,_faa (_ggbf )));};_ede =append (_ede ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_abb )> 0{_eff :=(len (_abb )+_bbad -1)/_bbad ;for _fed :=0;_fed < _eff ;_fed ++{_cgg :=_ecad (len (_abb )-_fed *_bbad ,_bbad );_ede =append (_ede ,_b .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_cgg ));for _aad :=0;_aad < _cgg ;_aad ++{_fea :=_abb [_fed *_bbad +_aad ];_ede =append (_ede ,_b .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_fea ._ea ,_fea ._df ,_faa (_fea ._bcg )));};_ede =append (_ede ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _afd .Join (_ede ,"\u000a");};type cmapName struct{Name string ;};const (_fdg ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_cbf ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_bdg ="\u0065n\u0064\u0063\u006d\u0061\u0070";_fcg ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_cadf ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_eab ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_edb ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_dc ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_dgg ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_aeb ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_fba ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_ggg ="\u0075s\u0065\u0063\u006d\u0061\u0070";_aabc ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_dbga ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_agc ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )NBits ()int {return cmap ._de };func (_dcdc *cMapParser )parseName ()(cmapName ,error ){_ebf :="";_cgbc :=false ;for {_ddgg ,_cee :=_dcdc ._ageg .Peek (1);if _cee ==_e .EOF {break ;};if _cee !=nil {return cmapName {_ebf },_cee ;};if !_cgbc {if _ddgg [0]=='/'{_cgbc =true ;_dcdc ._ageg .ReadByte ();}else {_acf .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_ddgg ,_ddgg );return cmapName {_ebf },_b .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_ddgg [0]);};}else {if _eg .IsWhiteSpace (_ddgg [0]){break ;}else if (_ddgg [0]=='/')||(_ddgg [0]=='[')||(_ddgg [0]=='(')||(_ddgg [0]==']')||(_ddgg [0]=='<')||(_ddgg [0]=='>'){break ;}else if _ddgg [0]=='#'{_cgef ,_bgg :=_dcdc ._ageg .Peek (3);if _bgg !=nil {return cmapName {_ebf },_bgg ;};_dcdc ._ageg .Discard (3);_edaf ,_bgg :=_ac .DecodeString (string (_cgef [1:3]));if _bgg !=nil {return cmapName {_ebf },_bgg ;};_ebf +=string (_edaf );}else {_aeae ,_ :=_dcdc ._ageg .ReadByte ();_ebf +=string (_aeae );};};};return cmapName {_ebf },nil ;};type charRange struct{_bb CharCode ;_cd CharCode ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_bg :=make (map[CharCode ]string ,len (codeToRune ));for _fa ,_cf :=range codeToRune {_bg [_fa ]=string (_cf );};cmap :=&CMap {_fe :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_da :2,_de :16,_gf :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_cdd :[]Codespace {{Low :0,High :0xffff}},_cg :_bg ,_ddd :make (map[string ]CharCode ,len (codeToRune )),_gg :make (map[CharCode ]CharCode ,len (codeToRune )),_deb :make (map[CharCode ]CharCode ,len (codeToRune ))};cmap .computeInverseMappings ();return cmap ;};type CharCode uint32 ;func _cef (_efd cmapHexString )CharCode {_febg :=CharCode (0);for _ ,_cgcc :=range _efd ._dag {_febg <<=8;_febg |=CharCode (_cgcc );};return _febg ;};func (_ffbf *cMapParser )parseString ()(cmapString ,error ){_ffbf ._ageg .ReadByte ();_dbb :=_bc .Buffer {};_cdf :=1;for {_acfd ,_fbbc :=_ffbf ._ageg .Peek (1);if _fbbc !=nil {return cmapString {_dbb .String ()},_fbbc ;};if _acfd [0]=='\\'{_ffbf ._ageg .ReadByte ();_bda ,_caef :=_ffbf ._ageg .ReadByte ();if _caef !=nil {return cmapString {_dbb .String ()},_caef ;};if _eg .IsOctalDigit (_bda ){_gaeda ,_faba :=_ffbf ._ageg .Peek (2);if _faba !=nil {return cmapString {_dbb .String ()},_faba ;};var _afbg []byte ;_afbg =append (_afbg ,_bda );for _ ,_bggc :=range _gaeda {if _eg .IsOctalDigit (_bggc ){_afbg =append (_afbg ,_bggc );}else {break ;};};_ffbf ._ageg .Discard (len (_afbg )-1);_acf .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_afbg );_bde ,_faba :=_a .ParseUint (string (_afbg ),8,32);if _faba !=nil {return cmapString {_dbb .String ()},_faba ;};_dbb .WriteByte (byte (_bde ));continue ;};switch _bda {case 'n':_dbb .WriteByte ('\n');case 'r':_dbb .WriteByte ('\r');case 't':_dbb .WriteByte ('\t');case 'b':_dbb .WriteByte ('\b');case 'f':_dbb .WriteByte ('\f');case '(':_dbb .WriteByte ('(');case ')':_dbb .WriteByte (')');case '\\':_dbb .WriteByte ('\\');};continue ;}else if _acfd [0]=='('{_cdf ++;}else if _acfd [0]==')'{_cdf --;if _cdf ==0{_ffbf ._ageg .ReadByte ();break ;};};_cab ,_ :=_ffbf ._ageg .ReadByte ();_dbb .WriteByte (_cab );};return cmapString {_dbb .String ()},nil ;};func (_gaaf *cMapParser )parseHexString ()(cmapHexString ,error ){_gaaf ._ageg .ReadByte ();_gca :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_cgbb :=_bc .Buffer {};for {_gaaf .skipSpaces ();_dce ,_cggd :=_gaaf ._ageg .Peek (1);if _cggd !=nil {return cmapHexString {},_cggd ;};if _dce [0]=='>'{_gaaf ._ageg .ReadByte ();break ;};_baf ,_ :=_gaaf ._ageg .ReadByte ();if _bc .IndexByte (_gca ,_baf )>=0{_cgbb .WriteByte (_baf );};};if _cgbb .Len ()%2==1{_acf .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_cgbb .String ());_cgbb .WriteByte ('0');};_cda :=_cgbb .Len ()/2;_bbee ,_ :=_ac .DecodeString (_cgbb .String ());return cmapHexString {_aef :_cda ,_dag :_bbee },nil ;};type cmapObject interface{};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _ecac ,_dbc :=cmap ._cg [code ];_dbc {return _ecac ,true ;};return MissingCodeString ,false ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (cmap *CMap )Name ()string {return cmap ._fe };func _bd (_gccb string )rune {_dfd :=[]rune (_gccb );return _dfd [len (_dfd )-1]};func (_bbcf *cMapParser )parseOperand ()(cmapOperand ,error ){_ggfg :=cmapOperand {};_fabf :=_bc .Buffer {};for {_abe ,_eeefc :=_bbcf ._ageg .Peek (1);if _eeefc !=nil {if _eeefc ==_e .EOF {break ;};return _ggfg ,_eeefc ;};if _eg .IsDelimiter (_abe [0]){break ;};if _eg .IsWhiteSpace (_abe [0]){break ;};_acgc ,_ :=_bbcf ._ageg .ReadByte ();_fabf .WriteByte (_acgc );};if _fabf .Len ()==0{return _ggfg ,_b .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_ggfg .Operand =_fabf .String ();return _ggfg ,nil ;};func (cmap *CMap )parseCIDRange ()error {for {_agg ,_bgbd :=cmap .parseObject ();if _bgbd !=nil {if _bgbd ==_e .EOF {break ;};return _bgbd ;};_feag ,_fbd :=_agg .(cmapHexString );if !_fbd {if _gaa ,_ddbe :=_agg .(cmapOperand );_ddbe {if _gaa .Operand ==_fba {return nil ;};return _af .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_afca :=_cef (_feag );_agg ,_bgbd =cmap .parseObject ();if _bgbd !=nil {if _bgbd ==_e .EOF {break ;};return _bgbd ;};_dbac ,_fbd :=_agg .(cmapHexString );if !_fbd {return _af .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};if len (_feag ._dag )!=len (_dbac ._dag ){return _af .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_ccg :=_cef (_dbac );if _afca > _ccg {_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_afca ,_ccg );return ErrBadCMap ;};_agg ,_bgbd =cmap .parseObject ();if _bgbd !=nil {if _bgbd ==_e .EOF {break ;};return _bgbd ;};_cgag ,_fbd :=_agg .(cmapInt );if !_fbd {return _af .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _cgag ._caec < 0{return _af .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_aff :=_cgag ._caec ;for _bffg :=_afca ;_bffg <=_ccg ;_bffg ++{cmap ._gg [_bffg ]=CharCode (_aff );_aff ++;};_acf .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_afca ,_ccg ,_cgag ._caec );};return nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _egd []CharCode ;if cmap ._de ==8{for _ ,_aea :=range data {_egd =append (_egd ,CharCode (_aea ));};return _egd ,true ;};for _fgf :=0;_fgf < len (data );{_dgdg ,_fab ,_gff :=cmap .matchCode (data [_fgf :]);if !_gff {_acf .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_fgf ,data ,string (data ));return _egd ,false ;};_egd =append (_egd ,_dgdg );_fgf +=_fab ;};return _egd ,true ;};func _dddb (_aebg cmapHexString )rune {_cbfd :=_gdf (_aebg );if _abee :=len (_cbfd );_abee ==0{_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_aebg );return MissingCodeRune ;};if len (_cbfd )> 1{_acf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_aebg ,_cbfd );};return _cbfd [0];};func _gdf (_bdd cmapHexString )[]rune {if len (_bdd ._dag )==1{return []rune {rune (_bdd ._dag [0])};};_bdc :=_bdd ._dag ;if len (_bdc )%2!=0{_bdc =append (_bdc ,0);_acf .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_bdd ,_bdc );};_ecb :=len (_bdc )>>1;_acgg :=make ([]uint16 ,_ecb );for _eed :=0;_eed < _ecb ;_eed ++{_acgg [_eed ]=uint16 (_bdc [_eed <<1])<<8+uint16 (_bdc [_eed <<1+1]);};_aace :=_be .Decode (_acgg );return _aace ;};func _faa (_bfb string )string {_gcce :=[]rune (_bfb );_dge :=make ([]string ,len (_gcce ));for _dab ,_cged :=range _gcce {_dge [_dab ]=_b .Sprintf ("\u0025\u0030\u0034\u0078",_cged );};return _b .Sprintf ("\u003c\u0025\u0073\u003e",_afd .Join (_dge ,""));};type cmapDict struct{Dict map[string ]cmapObject ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_acf .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );cmap :=_ef (isSimple );cmap .cMapParser =_cca (data );_abg :=cmap .parse ();if _abg !=nil {return nil ,_abg ;};if len (cmap ._cdd )==0{if cmap ._ab !=""{return cmap ,nil ;};_acf .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};type fbRange struct{_ea CharCode ;_df CharCode ;_bcg string ;};func _ef (_ad bool )*CMap {_gcc :=16;if _ad {_gcc =8;};return &CMap {_de :_gcc ,_gg :make (map[CharCode ]CharCode ),_deb :make (map[CharCode ]CharCode ),_cg :make (map[CharCode ]string ),_ddd :make (map[string ]CharCode )};};func (_eaf *cMapParser )parseDict ()(cmapDict ,error ){_acf .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_dcdb :=_egfbb ();_abfa ,_ :=_eaf ._ageg .ReadByte ();if _abfa !='<'{return _dcdb ,ErrBadCMapDict ;};_abfa ,_ =_eaf ._ageg .ReadByte ();if _abfa !='<'{return _dcdb ,ErrBadCMapDict ;};for {_eaf .skipSpaces ();_gfe ,_aacb :=_eaf ._ageg .Peek (2);if _aacb !=nil {return _dcdb ,_aacb ;};if (_gfe [0]=='>')&&(_gfe [1]=='>'){_eaf ._ageg .ReadByte ();_eaf ._ageg .ReadByte ();break ;};_fgfd ,_aacb :=_eaf .parseName ();_acf .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_fgfd .Name );if _aacb !=nil {_acf .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_aacb );return _dcdb ,_aacb ;};_eaf .skipSpaces ();_bbg ,_aacb :=_eaf .parseObject ();if _aacb !=nil {return _dcdb ,_aacb ;};_dcdb .Dict [_fgfd .Name ]=_bbg ;_eaf .skipSpaces ();_gfe ,_aacb =_eaf ._ageg .Peek (3);if _aacb !=nil {return _dcdb ,_aacb ;};if string (_gfe )=="\u0064\u0065\u0066"{_eaf ._ageg .Discard (3);};};return _dcdb ,nil ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_fc ,_aac :=cmap ._gg [code ];return _fc ,_aac ;};func (cmap *CMap )computeInverseMappings (){for _eee ,_fgc :=range cmap ._gg {if _gee ,_bcga :=cmap ._deb [_fgc ];!_bcga ||(_bcga &&_gee > _eee ){cmap ._deb [_fgc ]=_eee ;};};for _fgb ,_dea :=range cmap ._cg {if _fdc ,_efc :=cmap ._ddd [_dea ];!_efc ||(_efc &&_fdc > _fgb ){cmap ._ddd [_dea ]=_fgb ;};};_dg .Slice (cmap ._cdd ,func (_fga ,_db int )bool {return cmap ._cdd [_fga ].Low < cmap ._cdd [_db ].Low });};func (cmap *CMap )Type ()int {return cmap ._da };func (cmap *CMap )parseName ()error {_aeg :="";_gaeg :=false ;for _gfg :=0;_gfg < 20&&!_gaeg ;_gfg ++{_bcgbb ,_cac :=cmap .parseObject ();if _cac !=nil {return _cac ;};switch _dfg :=_bcgbb .(type ){case cmapOperand :switch _dfg .Operand {case "\u0064\u0065\u0066":_gaeg =true ;default:_acf .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_bcgbb ,_aeg );if _aeg !=""{_aeg =_b .Sprintf ("\u0025\u0073\u0020%\u0073",_aeg ,_dfg .Operand );};_acf .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_aeg );};case cmapName :_aeg =_dfg .Name ;};};if !_gaeg {_acf .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._fe =_aeg ;return nil ;};func (_cafc *cMapParser )parseComment ()(string ,error ){var _dfb _bc .Buffer ;_ ,_fbgg :=_cafc .skipSpaces ();if _fbgg !=nil {return _dfb .String (),_fbgg ;};_fdcg :=true ;for {_dcd ,_gegg :=_cafc ._ageg .Peek (1);if _gegg !=nil {_acf .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_gegg );return _dfb .String (),_gegg ;};if _fdcg &&_dcd [0]!='%'{return _dfb .String (),ErrBadCMapComment ;};_fdcg =false ;if (_dcd [0]!='\r')&&(_dcd [0]!='\n'){_fda ,_ :=_cafc ._ageg .ReadByte ();_dfb .WriteByte (_fda );}else {break ;};};return _dfb .String (),nil ;};var (ErrBadCMap =_af .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_af .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_af .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (cmap *CMap )parseSystemInfo ()error {_gefa :=false ;_cfa :=false ;_ddb :="";_gegb :=false ;_cga :=CIDSystemInfo {};for _aae :=0;_aae < 50&&!_gegb ;_aae ++{_abfc ,_cddc :=cmap .parseObject ();if _cddc !=nil {return _cddc ;};switch _fgcg :=_abfc .(type ){case cmapDict :_cb :=_fgcg .Dict ;_bad ,_dgcb :=_cb ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_dgcb {_acf .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gba ,_dgcb :=_bad .(cmapString );if !_dgcb {_acf .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cga .Registry =_gba .String ;_bad ,_dgcb =_cb ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_dgcb {_acf .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gba ,_dgcb =_bad .(cmapString );if !_dgcb {_acf .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cga .Ordering =_gba .String ;_bgf ,_dgcb :=_cb ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_dgcb {_acf .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cbg ,_dgcb :=_bgf .(cmapInt );if !_dgcb {_acf .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cga .Supplement =int (_cbg ._caec );_gegb =true ;case cmapOperand :switch _fgcg .Operand {case "\u0062\u0065\u0067i\u006e":_gefa =true ;case "\u0065\u006e\u0064":_gegb =true ;case "\u0064\u0065\u0066":_cfa =false ;};case cmapName :if _gefa {_ddb =_fgcg .Name ;_cfa =true ;};case cmapString :if _cfa {switch _ddb {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_cga .Registry =_fgcg .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_cga .Ordering =_fgcg .String ;};};case cmapInt :if _cfa {switch _ddb {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_cga .Supplement =int (_fgcg ._caec );};};};};if !_gegb {_acf .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");return ErrBadCMap ;};cmap ._gf =_cga ;return nil ;};