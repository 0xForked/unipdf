//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_b "bufio";_gc "bytes";_gb "encoding/hex";_dae "errors";_f "fmt";_bd "github.com/unidoc/unipdf/v3/common";_bbc "github.com/unidoc/unipdf/v3/core";_ff "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_da "io";_e "sort";_g "strconv";
_bb "strings";_d "unicode/utf16";);func (cmap *CMap )parseVersion ()error {_faa :="";_bag :=false ;for _aeed :=0;_aeed < 3&&!_bag ;_aeed ++{_gaae ,_fef :=cmap .parseObject ();if _fef !=nil {return _fef ;};switch _geb :=_gaae .(type ){case cmapOperand :switch _geb .Operand {case "\u0064\u0065\u0066":_bag =true ;
default:_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_gaae );
return ErrBadCMap ;};case cmapInt :_faa =_f .Sprintf ("\u0025\u0064",_geb ._cgbeg );case cmapFloat :_faa =_f .Sprintf ("\u0025\u0066",_geb ._daed );case cmapString :_faa =_geb .String ;default:_bd .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_gaae );
};};cmap ._fga =_faa ;return nil ;};func (cmap *CMap )String ()string {_dde :=cmap ._dac ;_cd :=[]string {_f .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ddc ),_f .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._fge )};if cmap ._fga !=""{_cd =append (_cd ,_f .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._fga ));
};if cmap ._ggb !=""{_cd =append (_cd ,_f .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._ggb ));};_cd =append (_cd ,_f .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_dde .String ()));
if len (cmap ._ad )> 0{_cd =append (_cd ,_f .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._ad )));};if len (cmap ._de )> 0{_cd =append (_cd ,_f .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._de )));
};return _f .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._cf ,_bb .Join (_cd ,"\u0020"));};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _gec ,_efec :=cmap ._de [code ];_efec {return _gec ,true ;
};return MissingCodeString ,false ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_baeg ,_ddd :=cmap ._eg [cid ];return _baeg ,_ddd ;};func _ef (_cec string )(*CMap ,error ){_ge ,_cb :=_ff .Asset (_cec );if _cb !=nil {return nil ,_cb ;
};return LoadCmapFromDataCID (_ge );};func _acbe (_bbda ,_bbce int )int {if _bbda < _bbce {return _bbda ;};return _bbce ;};const (_gg =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )Name ()string {return cmap ._cf };
func IsPredefinedCMap (name string )bool {return _ff .AssetExists (name )};func (cmap *CMap )parseWMode ()error {var _ecbb int ;_ebg :=false ;for _aae :=0;_aae < 3&&!_ebg ;_aae ++{_dag ,_bbd :=cmap .parseObject ();if _bbd !=nil {return _bbd ;};switch _fbc :=_dag .(type ){case cmapOperand :switch _fbc .Operand {case "\u0064\u0065\u0066":_ebg =true ;
default:_bd .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_dag );return ErrBadCMap ;};case cmapInt :_ecbb =int (_fbc ._cgbeg );
};};cmap ._ce =integer {_bfe :true ,_abab :_ecbb };return nil ;};type cmapOperand struct{Operand string ;};func _cabc (_ebb cmapHexString )CharCode {_cebd :=CharCode (0);for _ ,_deb :=range _ebb ._abae {_cebd <<=8;_cebd |=CharCode (_deb );};return _cebd ;
};func (_bfg *cMapParser )parseArray ()(cmapArray ,error ){_afb :=cmapArray {};_afb .Array =[]cmapObject {};_bfg ._fbde .ReadByte ();for {_bfg .skipSpaces ();_edd ,_edae :=_bfg ._fbde .Peek (1);if _edae !=nil {return _afb ,_edae ;};if _edd [0]==']'{_bfg ._fbde .ReadByte ();
break ;};_bgdg ,_edae :=_bfg .parseObject ();if _edae !=nil {return _afb ,_edae ;};_afb .Array =append (_afb .Array ,_bgdg );};return _afb ,nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _baa []CharCode ;if cmap ._ddc ==8{for _ ,_efa :=range data {_baa =append (_baa ,CharCode (_efa ));
};return _baa ,true ;};for _cfa :=0;_cfa < len (data );{_fea ,_ebc ,_gdd :=cmap .matchCode (data [_cfa :]);if !_gdd {_bd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_cfa ,data ,string (data ));
return _baa ,false ;};_baa =append (_baa ,_fea );_cfa +=_ebc ;};return _baa ,true ;};type cmapName struct{Name string ;};func (cmap *CMap )parseType ()error {_egec :=0;_bbg :=false ;for _acb :=0;_acb < 3&&!_bbg ;_acb ++{_gfa ,_caf :=cmap .parseObject ();
if _caf !=nil {return _caf ;};switch _eed :=_gfa .(type ){case cmapOperand :switch _eed .Operand {case "\u0064\u0065\u0066":_bbg =true ;default:_bd .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_gfa );
return ErrBadCMap ;};case cmapInt :_egec =int (_eed ._cgbeg );};};cmap ._fge =_egec ;return nil ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func _fdc (_dcfa string )string {_fdf :=[]rune (_dcfa );_ecb :=make ([]string ,len (_fdf ));
for _db ,_ecg :=range _fdf {_ecb [_db ]=_f .Sprintf ("\u0025\u0030\u0034\u0078",_ecg );};return _f .Sprintf ("\u003c\u0025\u0073\u003e",_bb .Join (_ecb ,""));};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_bd .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_bcc (isSimple );cmap .cMapParser =_efb (data );_bcf :=cmap .parse ();if _bcf !=nil {return nil ,_bcf ;};if len (cmap ._ad )==0{if cmap ._ggb !=""{return cmap ,nil ;};_bd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseCIDRange ()error {for {_dda ,_gfe :=cmap .parseObject ();if _gfe !=nil {if _gfe ==_da .EOF {break ;};return _gfe ;};_fcd ,_gac :=_dda .(cmapHexString );
if !_gac {if _cgcc ,_ede :=_dda .(cmapOperand );_ede {if _cgcc .Operand ==_gbbd {return nil ;};return _dae .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_eec :=_cabc (_fcd );_dda ,_gfe =cmap .parseObject ();if _gfe !=nil {if _gfe ==_da .EOF {break ;};return _gfe ;};_bcaf ,_gac :=_dda .(cmapHexString );if !_gac {return _dae .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_fcd ._abae )!=len (_bcaf ._abae ){return _dae .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_bdc :=_cabc (_bcaf );
if _eec > _bdc {_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_eec ,_bdc );
return ErrBadCMap ;};_dda ,_gfe =cmap .parseObject ();if _gfe !=nil {if _gfe ==_da .EOF {break ;};return _gfe ;};_gfc ,_gac :=_dda .(cmapInt );if !_gac {return _dae .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _gfc ._cgbeg < 0{return _dae .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_eff :=_gfc ._cgbeg ;for _dfeb :=_eec ;_dfeb <=_bdc ;_dfeb ++{cmap ._ca [_dfeb ]=CharCode (_eff );
_eff ++;};_bd .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_eec ,_bdc ,_gfc ._cgbeg );};return nil ;};func (cmap *CMap )Type ()int {return cmap ._fge };
func (_fead *cMapParser )parseDict ()(cmapDict ,error ){_bd .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_ddef :=_cgade ();_dgb ,_ :=_fead ._fbde .ReadByte ();if _dgb !='<'{return _ddef ,ErrBadCMapDict ;
};_dgb ,_ =_fead ._fbde .ReadByte ();if _dgb !='<'{return _ddef ,ErrBadCMapDict ;};for {_fead .skipSpaces ();_bbea ,_cfgb :=_fead ._fbde .Peek (2);if _cfgb !=nil {return _ddef ,_cfgb ;};if (_bbea [0]=='>')&&(_bbea [1]=='>'){_fead ._fbde .ReadByte ();_fead ._fbde .ReadByte ();
break ;};_feg ,_cfgb :=_fead .parseName ();_bd .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_feg .Name );if _cfgb !=nil {_bd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_cfgb );
return _ddef ,_cfgb ;};_fead .skipSpaces ();_cgdb ,_cfgb :=_fead .parseObject ();if _cfgb !=nil {return _ddef ,_cfgb ;};_ddef .Dict [_feg .Name ]=_cgdb ;_fead .skipSpaces ();_bbea ,_cfgb =_fead ._fbde .Peek (3);if _cfgb !=nil {return _ddef ,_cfgb ;};if string (_bbea )=="\u0064\u0065\u0066"{_fead ._fbde .Discard (3);
};};return _ddef ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_af ,_adf :=cmap ._fbd [s ];return _af ,_adf };func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_gbb :=_ef (name );if _gbb !=nil {return nil ,_gbb ;};if cmap ._ggb ==""{cmap .computeInverseMappings ();
return cmap ,nil ;};_bdd ,_gbb :=_ef (cmap ._ggb );if _gbb !=nil {return nil ,_gbb ;};for _fd ,_ee :=range _bdd ._ca {if _ ,_bdbd :=cmap ._ca [_fd ];!_bdbd {cmap ._ca [_fd ]=_ee ;};};cmap ._ad =append (cmap ._ad ,_bdd ._ad ...);cmap .computeInverseMappings ();
return cmap ,nil ;};func (_fda *cMapParser )parseName ()(cmapName ,error ){_aef :="";_adbc :=false ;for {_gcgf ,_eeca :=_fda ._fbde .Peek (1);if _eeca ==_da .EOF {break ;};if _eeca !=nil {return cmapName {_aef },_eeca ;};if !_adbc {if _gcgf [0]=='/'{_adbc =true ;
_fda ._fbde .ReadByte ();}else {_bd .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_gcgf ,_gcgf );return cmapName {_aef },_f .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_gcgf [0]);
};}else {if _bbc .IsWhiteSpace (_gcgf [0]){break ;}else if (_gcgf [0]=='/')||(_gcgf [0]=='[')||(_gcgf [0]=='(')||(_gcgf [0]==']')||(_gcgf [0]=='<')||(_gcgf [0]=='>'){break ;}else if _gcgf [0]=='#'{_bdba ,_fdaf :=_fda ._fbde .Peek (3);if _fdaf !=nil {return cmapName {_aef },_fdaf ;
};_fda ._fbde .Discard (3);_aeg ,_fdaf :=_gb .DecodeString (string (_bdba [1:3]));if _fdaf !=nil {return cmapName {_aef },_fdaf ;};_aef +=string (_aeg );}else {_bfd ,_ :=_fda ._fbde .ReadByte ();_aef +=string (_bfd );};};};return cmapName {_aef },nil ;
};type cmapInt struct{_cgbeg int64 };type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};const (_ffd ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_bda ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";
_cdd ="\u0065n\u0064\u0063\u006d\u0061\u0070";_add ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_ddba ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";
_gag ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_cae ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_gfd ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_dfec ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_edea ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_gbbd ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_ddde ="\u0075s\u0065\u0063\u006d\u0061\u0070";_abc ="\u0057\u004d\u006fd\u0065";_abbb ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";
_egcc ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_ggdg ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )parse ()error {var _edb cmapObject ;for {_cea ,_gcg :=cmap .parseObject ();if _gcg !=nil {if _gcg ==_da .EOF {break ;
};_bd .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_gcg );return _gcg ;};switch _abfc :=_cea .(type ){case cmapOperand :_dfe :=_abfc ;switch _dfe .Operand {case _add :_eac :=cmap .parseCodespaceRange ();
if _eac !=nil {return _eac ;};case _edea :_dcff :=cmap .parseCIDRange ();if _dcff !=nil {return _dcff ;};case _gag :_bbb :=cmap .parseBfchar ();if _bbb !=nil {return _bbb ;};case _gfd :_dgg :=cmap .parseBfrange ();if _dgg !=nil {return _dgg ;};case _ddde :if _edb ==nil {_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_gbf ,_fed :=_edb .(cmapName );if !_fed {_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_edb );
return ErrBadCMap ;};cmap ._ggb =_gbf .Name ;case _ffd :_ggd :=cmap .parseSystemInfo ();if _ggd !=nil {return _ggd ;};};case cmapName :_aff :=_abfc ;switch _aff .Name {case _ffd :_afae :=cmap .parseSystemInfo ();if _afae !=nil {return _afae ;};case _abbb :_gbfe :=cmap .parseName ();
if _gbfe !=nil {return _gbfe ;};case _egcc :_dbe :=cmap .parseType ();if _dbe !=nil {return _dbe ;};case _ggdg :_fc :=cmap .parseVersion ();if _fc !=nil {return _fc ;};case _abc :if _gcg =cmap .parseWMode ();_gcg !=nil {return _gcg ;};};};_edb =_cea ;};
return nil ;};type cMapParser struct{_fbde *_b .Reader };func (cmap *CMap )NBits ()int {return cmap ._ddc };func (cmap *CMap )parseSystemInfo ()error {_bgd :=false ;_geab :=false ;_abb :="";_dacc :=false ;_aad :=CIDSystemInfo {};for _cgbe :=0;_cgbe < 50&&!_dacc ;
_cgbe ++{_dbc ,_ggf :=cmap .parseObject ();if _ggf !=nil {return _ggf ;};switch _fcf :=_dbc .(type ){case cmapDict :_dfg :=_fcf .Dict ;_aagg ,_dfa :=_dfg ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_dfa {_bd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_cgd ,_dfa :=_aagg .(cmapString );if !_dfa {_bd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_aad .Registry =_cgd .String ;
_aagg ,_dfa =_dfg ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_dfa {_bd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cgd ,_dfa =_aagg .(cmapString );
if !_dfa {_bd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_aad .Ordering =_cgd .String ;_def ,_dfa :=_dfg ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_dfa {_bd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gceg ,_dfa :=_def .(cmapInt );if !_dfa {_bd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_aad .Supplement =int (_gceg ._cgbeg );_dacc =true ;case cmapOperand :switch _fcf .Operand {case "\u0062\u0065\u0067i\u006e":_bgd =true ;case "\u0065\u006e\u0064":_dacc =true ;case "\u0064\u0065\u0066":_geab =false ;};case cmapName :if _bgd {_abb =_fcf .Name ;
_geab =true ;};case cmapString :if _geab {switch _abb {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_aad .Registry =_fcf .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_aad .Ordering =_fcf .String ;};};case cmapInt :if _geab {switch _abb {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_aad .Supplement =int (_fcf ._cgbeg );
};};};};if !_dacc {_bd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._dac =_aad ;return nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};type CharCode uint32 ;func (cmap *CMap )parseCodespaceRange ()error {for {_bad ,_efea :=cmap .parseObject ();
if _efea !=nil {if _efea ==_da .EOF {break ;};return _efea ;};_bgg ,_aaee :=_bad .(cmapHexString );if !_aaee {if _faac ,_egbc :=_bad .(cmapOperand );_egbc {if _faac .Operand ==_ddba {return nil ;};return _dae .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_bad ,_efea =cmap .parseObject ();if _efea !=nil {if _efea ==_da .EOF {break ;};return _efea ;};_bcg ,_aaee :=_bad .(cmapHexString );if !_aaee {return _dae .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_bgg ._abae )!=len (_bcg ._abae ){return _dae .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_cgc :=_cabc (_bgg );_fdcb :=_cabc (_bcg );if _fdcb < _cgc {_bd .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_cgc ,_fdcb );
return ErrBadCMap ;};_dbf :=_bcg ._bcag ;_gae :=Codespace {NumBytes :_dbf ,Low :_cgc ,High :_fdcb };cmap ._ad =append (cmap ._ad ,_gae );_bd .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_cgc ,_fdcb );
};if len (cmap ._ad )==0{_bd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._ce ._abab ,cmap ._ce ._bfe };
var (ErrBadCMap =_dae .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_dae .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_dae .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func _efb (_eebe []byte )*cMapParser {_gbab :=cMapParser {};_dbg :=_gc .NewBuffer (_eebe );_gbab ._fbde =_b .NewReader (_dbg );return &_gbab ;};func (_cca *cMapParser )parseOperand ()(cmapOperand ,error ){_daf :=cmapOperand {};_cfea :=_gc .Buffer {};
for {_egg ,_fab :=_cca ._fbde .Peek (1);if _fab !=nil {if _fab ==_da .EOF {break ;};return _daf ,_fab ;};if _bbc .IsDelimiter (_egg [0]){break ;};if _bbc .IsWhiteSpace (_egg [0]){break ;};_dafg ,_ :=_cca ._fbde .ReadByte ();_cfea .WriteByte (_dafg );};
if _cfea .Len ()==0{return _daf ,_f .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_daf .Operand =_cfea .String ();return _daf ,nil ;};func _deg (_cab string )rune {_fbg :=[]rune (_cab );
return _fbg [len (_fbg )-1]};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_bc :=make (map[CharCode ]string ,len (codeToRune ));for _ade ,_bce :=range codeToRune {_bc [_ade ]=string (_bce );};cmap :=&CMap {_cf :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_fge :2,_ddc :16,_dac :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_ad :[]Codespace {{Low :0,High :0xffff}},_de :_bc ,_fbd :make (map[string ]CharCode ,len (codeToRune )),_ca :make (map[CharCode ]CharCode ,len (codeToRune )),_eg :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_eb ,_bae :=cmap ._ca [code ];return _eb ,_bae ;};type fbRange struct{_fe CharCode ;_fg CharCode ;_be string ;};func _cgade ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};
func (cmap *CMap )matchCode (_dg []byte )(_afa CharCode ,_egf int ,_cag bool ){for _fba :=0;_fba < _gg ;_fba ++{if _fba < len (_dg ){_afa =_afa <<8|CharCode (_dg [_fba ]);_egf ++;};_cag =cmap .inCodespace (_afa ,_fba +1);if _cag {return _afa ,_egf ,true ;
};};_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_dg ,string (_dg ),cmap );
return 0,0,false ;};func (cmap *CMap )parseName ()error {_abfa :="";_eefg :=false ;for _dddg :=0;_dddg < 20&&!_eefg ;_dddg ++{_aee ,_ceb :=cmap .parseObject ();if _ceb !=nil {return _ceb ;};switch _fgb :=_aee .(type ){case cmapOperand :switch _fgb .Operand {case "\u0064\u0065\u0066":_eefg =true ;
default:_bd .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_aee ,_abfa );
if _abfa !=""{_abfa =_f .Sprintf ("\u0025\u0073\u0020%\u0073",_abfa ,_fgb .Operand );};_bd .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_abfa );
};case cmapName :_abfa =_fgb .Name ;};};if !_eefg {_bd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._cf =_abfa ;return nil ;};func (_bage *cMapParser )parseNumber ()(cmapObject ,error ){_aaggf ,_dfag :=_bbc .ParseNumber (_bage ._fbde );
if _dfag !=nil {return nil ,_dfag ;};switch _ffa :=_aaggf .(type ){case *_bbc .PdfObjectFloat :return cmapFloat {float64 (*_ffa )},nil ;case *_bbc .PdfObjectInteger :return cmapInt {int64 (*_ffa )},nil ;};return nil ,_f .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_aaggf );
};type cmapObject interface{};type charRange struct{_dd CharCode ;_aa CharCode ;};func (cmap *CMap )Stream ()(*_bbc .PdfObjectStream ,error ){if cmap ._ggg !=nil {return cmap ._ggg ,nil ;};_bac ,_caa :=_bbc .MakeStream (cmap .Bytes (),_bbc .NewFlateEncoder ());
if _caa !=nil {return nil ,_caa ;};cmap ._ggg =_bac ;return cmap ._ggg ,nil ;};type cmapString struct{String string ;};func (_cdc *cMapParser )parseComment ()(string ,error ){var _gdcd _gc .Buffer ;_ ,_gebb :=_cdc .skipSpaces ();if _gebb !=nil {return _gdcd .String (),_gebb ;
};_ggga :=true ;for {_cbd ,_cfaf :=_cdc ._fbde .Peek (1);if _cfaf !=nil {_bd .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_cfaf );return _gdcd .String (),_cfaf ;};if _ggga &&_cbd [0]!='%'{return _gdcd .String (),ErrBadCMapComment ;
};_ggga =false ;if (_cbd [0]!='\r')&&(_cbd [0]!='\n'){_eeae ,_ :=_cdc ._fbde .ReadByte ();_gdcd .WriteByte (_eeae );}else {break ;};};return _gdcd .String (),nil ;};func _gdgc (_daeg cmapHexString )[]rune {if len (_daeg ._abae )==1{return []rune {rune (_daeg ._abae [0])};
};_acd :=_daeg ._abae ;if len (_acd )%2!=0{_acd =append (_acd ,0);_bd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_daeg ,_acd );
};_gdbc :=len (_acd )>>1;_bccf :=make ([]uint16 ,_gdbc );for _dcce :=0;_dcce < _gdbc ;_dcce ++{_bccf [_dcce ]=uint16 (_acd [_dcce <<1])<<8+uint16 (_acd [_dcce <<1+1]);};_gdeg :=_d .Decode (_bccf );return _gdeg ;};func (_ead *cMapParser )parseObject ()(cmapObject ,error ){_ead .skipSpaces ();
for {_gde ,_bdcb :=_ead ._fbde .Peek (2);if _bdcb !=nil {return nil ,_bdcb ;};if _gde [0]=='%'{_ead .parseComment ();_ead .skipSpaces ();continue ;}else if _gde [0]=='/'{_daa ,_gbbf :=_ead .parseName ();return _daa ,_gbbf ;}else if _gde [0]=='('{_cee ,_afaeb :=_ead .parseString ();
return _cee ,_afaeb ;}else if _gde [0]=='['{_dggd ,_bdcd :=_ead .parseArray ();return _dggd ,_bdcd ;}else if (_gde [0]=='<')&&(_gde [1]=='<'){_fefc ,_fcc :=_ead .parseDict ();return _fefc ,_fcc ;}else if _gde [0]=='<'{_bdg ,_dacg :=_ead .parseHexString ();
return _bdg ,_dacg ;}else if _bbc .IsDecimalDigit (_gde [0])||(_gde [0]=='-'&&_bbc .IsDecimalDigit (_gde [1])){_cga ,_fgde :=_ead .parseNumber ();if _fgde !=nil {return nil ,_fgde ;};return _cga ,nil ;}else {_gdgf ,_gdec :=_ead .parseOperand ();if _gdec !=nil {return nil ,_gdec ;
};return _gdgf ,nil ;};};};func (_bgf *cMapParser )parseString ()(cmapString ,error ){_bgf ._fbde .ReadByte ();_cbee :=_gc .Buffer {};_age :=1;for {_ccg ,_ceba :=_bgf ._fbde .Peek (1);if _ceba !=nil {return cmapString {_cbee .String ()},_ceba ;};if _ccg [0]=='\\'{_bgf ._fbde .ReadByte ();
_bgb ,_bace :=_bgf ._fbde .ReadByte ();if _bace !=nil {return cmapString {_cbee .String ()},_bace ;};if _bbc .IsOctalDigit (_bgb ){_ggbe ,_ggc :=_bgf ._fbde .Peek (2);if _ggc !=nil {return cmapString {_cbee .String ()},_ggc ;};var _fff []byte ;_fff =append (_fff ,_bgb );
for _ ,_agg :=range _ggbe {if _bbc .IsOctalDigit (_agg ){_fff =append (_fff ,_agg );}else {break ;};};_bgf ._fbde .Discard (len (_fff )-1);_bd .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_fff );
_addb ,_ggc :=_g .ParseUint (string (_fff ),8,32);if _ggc !=nil {return cmapString {_cbee .String ()},_ggc ;};_cbee .WriteByte (byte (_addb ));continue ;};switch _bgb {case 'n':_cbee .WriteByte ('\n');case 'r':_cbee .WriteByte ('\r');case 't':_cbee .WriteByte ('\t');
case 'b':_cbee .WriteByte ('\b');case 'f':_cbee .WriteByte ('\f');case '(':_cbee .WriteByte ('(');case ')':_cbee .WriteByte (')');case '\\':_cbee .WriteByte ('\\');};continue ;}else if _ccg [0]=='('{_age ++;}else if _ccg [0]==')'{_age --;if _age ==0{_bgf ._fbde .ReadByte ();
break ;};};_cedf ,_ :=_bgf ._fbde .ReadByte ();_cbee .WriteByte (_cedf );};return cmapString {_cbee .String ()},nil ;};func (cmap *CMap )parseBfrange ()error {for {var _gdc CharCode ;_bgdf ,_fbaa :=cmap .parseObject ();if _fbaa !=nil {if _fbaa ==_da .EOF {break ;
};return _fbaa ;};switch _gfg :=_bgdf .(type ){case cmapOperand :if _gfg .Operand ==_dfec {return nil ;};return _dae .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_gdc =_cabc (_gfg );
default:return _dae .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _cad CharCode ;_bgdf ,_fbaa =cmap .parseObject ();if _fbaa !=nil {if _fbaa ==_da .EOF {break ;};return _fbaa ;};switch _dfd :=_bgdf .(type ){case cmapOperand :_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_cad =_cabc (_dfd );if _cad > 0xffff{_cad =0xffff;};default:_bd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_bgdf );return ErrBadCMap ;
};_bgdf ,_fbaa =cmap .parseObject ();if _fbaa !=nil {if _fbaa ==_da .EOF {break ;};return _fbaa ;};switch _fdd :=_bgdf .(type ){case cmapArray :if len (_fdd .Array )!=int (_cad -_gdc )+1{_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _eaf :=_gdc ;_eaf <=_cad ;_eaf ++{_eaa :=_fdd .Array [_eaf -_gdc ];_aeeg ,_fdff :=_eaa .(cmapHexString );if !_fdff {return _dae .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_cfae :=_gdgc (_aeeg );cmap ._de [_eaf ]=string (_cfae );};case cmapHexString :_gab :=_gdgc (_fdd );_ecc :=len (_gab );for _dce :=_gdc ;_dce <=_cad ;_dce ++{cmap ._de [_dce ]=string (_gab );if _ecc > 0{_gab [_ecc -1]++;}else {_bd .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_dce );
};if _dce ==1<<32-1{break ;};};default:_bd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_bgdf );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )computeInverseMappings (){for _dcg ,_gea :=range cmap ._ca {if _gga ,_bf :=cmap ._eg [_gea ];
!_bf ||(_bf &&_gga > _dcg ){cmap ._eg [_gea ]=_dcg ;};};for _bg ,_fa :=range cmap ._de {if _aca ,_ga :=cmap ._fbd [_fa ];!_ga ||(_ga &&_aca > _bg ){cmap ._fbd [_fa ]=_bg ;};};_e .Slice (cmap ._ad ,func (_bde ,_gdg int )bool {return cmap ._ad [_bde ].Low < cmap ._ad [_gdg ].Low });
};type cmapHexString struct{_bcag int ;_abae []byte ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._dac };func (_dfda *cMapParser )parseHexString ()(cmapHexString ,error ){_dfda ._fbde .ReadByte ();_cfe :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_aba :=_gc .Buffer {};for {_dfda .skipSpaces ();_edaa ,_cgad :=_dfda ._fbde .Peek (1);if _cgad !=nil {return cmapHexString {},_cgad ;};if _edaa [0]=='>'{_dfda ._fbde .ReadByte ();break ;};_fdfa ,_ :=_dfda ._fbde .ReadByte ();if _gc .IndexByte (_cfe ,_fdfa )>=0{_aba .WriteByte (_fdfa );
};};if _aba .Len ()%2==1{_bd .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_aba .String ());_aba .WriteByte ('0');};_addd :=_aba .Len ()/2;
_bfda ,_ :=_gb .DecodeString (_aba .String ());return cmapHexString {_bcag :_addd ,_abae :_bfda },nil ;};type integer struct{_bfe bool ;_abab int ;};func (cmap *CMap )toBfData ()string {if len (cmap ._de )==0{return "";};_dca :=make ([]CharCode ,0,len (cmap ._de ));
for _edg :=range cmap ._de {_dca =append (_dca ,_edg );};_e .Slice (_dca ,func (_cbf ,_gdb int )bool {return _dca [_cbf ]< _dca [_gdb ]});var _ae []charRange ;_cbe :=charRange {_dca [0],_dca [0]};_adb :=cmap ._de [_dca [0]];for _ ,_edgd :=range _dca [1:]{_fgf :=cmap ._de [_edgd ];
if _edgd ==_cbe ._aa +1&&_deg (_fgf )==_deg (_adb )+1{_cbe ._aa =_edgd ;}else {_ae =append (_ae ,_cbe );_cbe ._dd ,_cbe ._aa =_edgd ,_edgd ;};_adb =_fgf ;};_ae =append (_ae ,_cbe );var _cgb []CharCode ;var _dcc []fbRange ;for _ ,_egb :=range _ae {if _egb ._dd ==_egb ._aa {_cgb =append (_cgb ,_egb ._dd );
}else {_dcc =append (_dcc ,fbRange {_fe :_egb ._dd ,_fg :_egb ._aa ,_be :cmap ._de [_egb ._dd ]});};};_bd .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_ae ),len (_cgb ),len (_dcc ));
var _gba []string ;if len (_cgb )> 0{_gbe :=(len (_cgb )+_dfc -1)/_dfc ;for _abf :=0;_abf < _gbe ;_abf ++{_fgaf :=_acbe (len (_cgb )-_abf *_dfc ,_dfc );_gba =append (_gba ,_f .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_fgaf ));
for _ec :=0;_ec < _fgaf ;_ec ++{_eca :=_cgb [_abf *_dfc +_ec ];_agd :=cmap ._de [_eca ];_gba =append (_gba ,_f .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_eca ,_fdc (_agd )));};_gba =append (_gba ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_dcc )> 0{_gdf :=(len (_dcc )+_dfc -1)/_dfc ;for _gad :=0;_gad < _gdf ;_gad ++{_fbf :=_acbe (len (_dcc )-_gad *_dfc ,_dfc );_gba =append (_gba ,_f .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_fbf ));
for _gaa :=0;_gaa < _fbf ;_gaa ++{_gge :=_dcc [_gad *_dfc +_gaa ];_gba =append (_gba ,_f .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_gge ._fe ,_gge ._fg ,_fdc (_gge ._be )));};_gba =append (_gba ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _bb .Join (_gba ,"\u000a");};type CMap struct{*cMapParser ;_cf string ;_ddc int ;_fge int ;_fga string ;_ggb string ;_dac CIDSystemInfo ;_ad []Codespace ;_ca map[CharCode ]CharCode ;_eg map[CharCode ]CharCode ;_de map[CharCode ]string ;_fbd map[string ]CharCode ;
_cfg []byte ;_ggg *_bbc .PdfObjectStream ;_ce integer ;};func _bcc (_bcce bool )*CMap {_ddf :=16;if _bcce {_ddf =8;};return &CMap {_ddc :_ddf ,_ca :make (map[CharCode ]CharCode ),_eg :make (map[CharCode ]CharCode ),_de :make (map[CharCode ]string ),_fbd :make (map[string ]CharCode )};
};func (cmap *CMap )Bytes ()[]byte {_bd .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._cfg )> 0{return cmap ._cfg ;};cmap ._cfg =[]byte (_bb .Join ([]string {_bfbf ,cmap .toBfData (),_aeb },"\u000a"));
return cmap ._cfg ;};const (_dfc =100;_bfbf ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_aeb ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func _bccb (_fggb cmapHexString )rune {_gfca :=_gdgc (_fggb );if _dfgc :=len (_gfca );_dfgc ==0{_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_fggb );
return MissingCodeRune ;};if len (_gfca )> 1{_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_fggb ,_gfca );
};return _gfca [0];};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_efe ,_eeb :=cmap .BytesToCharcodes (data );if !_eeb {_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_cc :=make ([]string ,len (_efe ));var _adg []CharCode ;for _efg ,_ea :=range _efe {_dcf ,_eab :=cmap ._de [_ea ];if !_eab {_adg =append (_adg ,_ea );_dcf =MissingCodeString ;};_cc [_efg ]=_dcf ;};_bfb :=_bb .Join (_cc ,"");if len (_adg )> 0{_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_efe ,len (_adg ),_adg ,_bfb ,cmap );
};return _bfb ,len (_adg );};func (_fbcb *cMapParser )skipSpaces ()(int ,error ){_fgfd :=0;for {_ecaa ,_gfga :=_fbcb ._fbde .Peek (1);if _gfga !=nil {return 0,_gfga ;};if _bbc .IsWhiteSpace (_ecaa [0]){_fbcb ._fbde .ReadByte ();_fgfd ++;}else {break ;};
};return _fgfd ,nil ;};type cmapArray struct{Array []cmapObject ;};func NewCIDSystemInfo (obj _bbc .PdfObject )(_ab CIDSystemInfo ,_fb error ){_c ,_df :=_bbc .GetDict (obj );if !_df {return CIDSystemInfo {},_bbc .ErrTypeError ;};_gd ,_df :=_bbc .GetStringVal (_c .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_df {return CIDSystemInfo {},_bbc .ErrTypeError ;};_ed ,_df :=_bbc .GetStringVal (_c .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_df {return CIDSystemInfo {},_bbc .ErrTypeError ;};_fgc ,_df :=_bbc .GetIntVal (_c .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_df {return CIDSystemInfo {},_bbc .ErrTypeError ;};return CIDSystemInfo {Registry :_gd ,Ordering :_ed ,Supplement :_fgc },nil ;};func (cmap *CMap )parseBfchar ()error {for {_cbc ,_bcgd :=cmap .parseObject ();if _bcgd !=nil {if _bcgd ==_da .EOF {break ;
};return _bcgd ;};var _ccb CharCode ;switch _ccbe :=_cbc .(type ){case cmapOperand :if _ccbe .Operand ==_cae {return nil ;};return _dae .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_ccb =_cabc (_ccbe );
default:return _dae .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_cbc ,_bcgd =cmap .parseObject ();if _bcgd !=nil {if _bcgd ==_da .EOF {break ;};return _bcgd ;};var _bcga []rune ;switch _bdbc :=_cbc .(type ){case cmapOperand :if _bdbc .Operand ==_cae {return nil ;
};_bd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_bdbc );return ErrBadCMap ;case cmapHexString :_bcga =_gdgc (_bdbc );
case cmapName :_bd .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_bdbc );_bcga =[]rune {MissingCodeRune };default:_bd .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_cbc );
return ErrBadCMap ;};cmap ._de [_ccb ]=string (_bcga );};return nil ;};func (_aaf *CIDSystemInfo )String ()string {return _f .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_aaf .Registry ,_aaf .Ordering ,_aaf .Supplement );};type cmapDict struct{Dict map[string ]cmapObject ;
};type cmapFloat struct{_daed float64 };func (cmap *CMap )inCodespace (_gce CharCode ,_egc int )bool {for _ ,_dgd :=range cmap ._ad {if _dgd .Low <=_gce &&_gce <=_dgd .High &&_egc ==_dgd .NumBytes {return true ;};};return false ;};