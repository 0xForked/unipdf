//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_b "bufio";_cf "bytes";_c "encoding/hex";_gc "errors";_a "fmt";_be "github.com/unidoc/unipdf/v3/common";_ee "github.com/unidoc/unipdf/v3/core";_ae "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_ac "io";_e "sort";_d "strconv";
_fb "strings";_g "unicode/utf16";);func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_gd ,_fcbf :=cmap ._bbf [cid ];return _gd ,_fcbf ;};func (_dcge *cMapParser )skipSpaces ()(int ,error ){_bgc :=0;for {_dgcd ,_cad :=_dcge ._cgb .Peek (1);
if _cad !=nil {return 0,_cad ;};if _ee .IsWhiteSpace (_dgcd [0]){_dcge ._cgb .ReadByte ();_bgc ++;}else {break ;};};return _bgc ,nil ;};func _dag (_gcfd cmapHexString )rune {_fagc :=_bea (_gcfd );if _bgdg :=len (_fagc );_bgdg ==0{_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_gcfd );
return MissingCodeRune ;};if len (_fagc )> 1{_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_gcfd ,_fagc );
};return _fagc [0];};func _bea (_bbfa cmapHexString )[]rune {if len (_bbfa ._bfcg )==1{return []rune {rune (_bbfa ._bfcg [0])};};_dce :=_bbfa ._bfcg ;if len (_dce )%2!=0{_dce =append (_dce ,0);_be .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_bbfa ,_dce );
};_cfaa :=len (_dce )>>1;_eda :=make ([]uint16 ,_cfaa );for _acd :=0;_acd < _cfaa ;_acd ++{_eda [_acd ]=uint16 (_dce [_acd <<1])<<8+uint16 (_dce [_acd <<1+1]);};_badd :=_g .Decode (_eda );return _badd ;};type cmapDict struct{Dict map[string ]cmapObject ;
};func (cmap *CMap )parseCodespaceRange ()error {for {_cdgc ,_afg :=cmap .parseObject ();if _afg !=nil {if _afg ==_ac .EOF {break ;};return _afg ;};_fbae ,_edgd :=_cdgc .(cmapHexString );if !_edgd {if _gecf ,_fge :=_cdgc .(cmapOperand );_fge {if _gecf .Operand ==_afad {return nil ;
};return _gc .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_cdgc ,_afg =cmap .parseObject ();if _afg !=nil {if _afg ==_ac .EOF {break ;};return _afg ;};_bcc ,_edgd :=_cdgc .(cmapHexString );if !_edgd {return _gc .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");
};if len (_fbae ._bfcg )!=len (_bcc ._bfcg ){return _gc .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_gga :=_egb (_fbae );
_cfac :=_egb (_bcc );if _cfac < _gga {_be .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_gga ,_cfac );
return ErrBadCMap ;};_cccg :=_bcc ._ggga ;_gac :=Codespace {NumBytes :_cccg ,Low :_gga ,High :_cfac };cmap ._bb =append (cmap ._bb ,_gac );_be .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_gga ,_cfac );
};if len (cmap ._bb )==0{_be .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func _ebc (_fa string )(*CMap ,error ){_ca ,_acb :=_ae .Asset (_fa );
if _acb !=nil {return nil ,_acb ;};return LoadCmapFromDataCID (_ca );};func _cfg (_egg []byte )*cMapParser {_aaf :=cMapParser {};_cdgb :=_cf .NewBuffer (_egg );_aaf ._cgb =_b .NewReader (_cdgb );return &_aaf ;};type cmapFloat struct{_eae float64 };type cmapString struct{String string ;
};func (cmap *CMap )toBfData ()string {if len (cmap ._gb )==0{return "";};_bbe :=make ([]CharCode ,0,len (cmap ._gb ));for _bde :=range cmap ._gb {_bbe =append (_bbe ,_bde );};_e .Slice (_bbe ,func (_acbb ,_eca int )bool {return _bbe [_acbb ]< _bbe [_eca ]});
var _fgg []charRange ;_cbgd :=charRange {_bbe [0],_bbe [0]};_bgb :=cmap ._gb [_bbe [0]];for _ ,_cbe :=range _bbe [1:]{_feg :=cmap ._gb [_cbe ];if _cbe ==_cbgd ._eec +1&&_aga (_feg )==_aga (_bgb )+1{_cbgd ._eec =_cbe ;}else {_fgg =append (_fgg ,_cbgd );
_cbgd ._bag ,_cbgd ._eec =_cbe ,_cbe ;};_bgb =_feg ;};_fgg =append (_fgg ,_cbgd );var _feae []CharCode ;var _dgf []fbRange ;for _ ,_dge :=range _fgg {if _dge ._bag ==_dge ._eec {_feae =append (_feae ,_dge ._bag );}else {_dgf =append (_dgf ,fbRange {_aa :_dge ._bag ,_cg :_dge ._eec ,_fc :cmap ._gb [_dge ._bag ]});
};};_be .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_fgg ),len (_feae ),len (_dgf ));var _bcf []string ;if len (_feae )> 0{_gcab :=(len (_feae )+_ebbc -1)/_ebbc ;
for _aea :=0;_aea < _gcab ;_aea ++{_aba :=_cabgb (len (_feae )-_aea *_ebbc ,_ebbc );_bcf =append (_bcf ,_a .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_aba ));for _fae :=0;_fae < _aba ;_fae ++{_aca :=_feae [_aea *_ebbc +_fae ];
_aed :=cmap ._gb [_aca ];_bcf =append (_bcf ,_a .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_aca ,_fdd (_aed )));};_bcf =append (_bcf ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_dgf )> 0{_bdd :=(len (_dgf )+_ebbc -1)/_ebbc ;
for _fegc :=0;_fegc < _bdd ;_fegc ++{_ede :=_cabgb (len (_dgf )-_fegc *_ebbc ,_ebbc );_bcf =append (_bcf ,_a .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_ede ));for _bbd :=0;_bbd < _ede ;_bbd ++{_bac :=_dgf [_fegc *_ebbc +_bbd ];
_bcf =append (_bcf ,_a .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_bac ._aa ,_bac ._cg ,_fdd (_bac ._fc )));};_bcf =append (_bcf ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _fb .Join (_bcf ,"\u000a");
};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _fd ,_cdaf :=cmap ._gb [code ];_cdaf {return _fd ,true ;};return MissingCodeString ,false ;};type cMapParser struct{_cgb *_b .Reader };func (cmap *CMap )String ()string {_fba :=cmap ._ab ;
_eaf :=[]string {_a .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._dc ),_a .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._dfa )};if cmap ._ef !=""{_eaf =append (_eaf ,_a .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._ef ));
};if cmap ._ce !=""{_eaf =append (_eaf ,_a .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._ce ));};_eaf =append (_eaf ,_a .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_fba .String ()));
if len (cmap ._bb )> 0{_eaf =append (_eaf ,_a .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._bb )));};if len (cmap ._gb )> 0{_eaf =append (_eaf ,_a .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._gb )));
};return _a .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._df ,_fb .Join (_eaf ,"\u0020"));};func (_ccf *CIDSystemInfo )String ()string {return _a .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_ccf .Registry ,_ccf .Ordering ,_ccf .Supplement );
};type CharCode uint32 ;func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_be .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_efe (isSimple );cmap .cMapParser =_cfg (data );_fca :=cmap .parse ();if _fca !=nil {return nil ,_fca ;};if len (cmap ._bb )==0{if cmap ._ce !=""{return cmap ,nil ;};_be .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseCIDRange ()error {for {_ade ,_ebe :=cmap .parseObject ();if _ebe !=nil {if _ebe ==_ac .EOF {break ;};return _ebe ;};_bgg ,_fdg :=_ade .(cmapHexString );
if !_fdg {if _bga ,_acff :=_ade .(cmapOperand );_acff {if _bga .Operand ==_cdf {return nil ;};return _gc .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_cgc :=_egb (_bgg );_ade ,_ebe =cmap .parseObject ();if _ebe !=nil {if _ebe ==_ac .EOF {break ;};return _ebe ;};_baee ,_fdg :=_ade .(cmapHexString );if !_fdg {return _gc .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_bgg ._bfcg )!=len (_baee ._bfcg ){return _gc .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_gdc :=_egb (_baee );
if _cgc > _gdc {_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_cgc ,_gdc );
return ErrBadCMap ;};_ade ,_ebe =cmap .parseObject ();if _ebe !=nil {if _ebe ==_ac .EOF {break ;};return _ebe ;};_bcff ,_fdg :=_ade .(cmapInt );if !_fdg {return _gc .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _bcff ._bddg < 0{return _gc .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_agb :=_bcff ._bddg ;for _fee :=_cgc ;_fee <=_gdc ;_fee ++{cmap ._db [_fee ]=CharCode (_agb );
_agb ++;};_be .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_cgc ,_gdc ,_bcff ._bddg );};return nil ;};func (_bda *cMapParser )parseOperand ()(cmapOperand ,error ){_cdga :=cmapOperand {};
_bebd :=_cf .Buffer {};for {_dba ,_cdgcg :=_bda ._cgb .Peek (1);if _cdgcg !=nil {if _cdgcg ==_ac .EOF {break ;};return _cdga ,_cdgcg ;};if _ee .IsDelimiter (_dba [0]){break ;};if _ee .IsWhiteSpace (_dba [0]){break ;};_ffg ,_ :=_bda ._cgb .ReadByte ();_bebd .WriteByte (_ffg );
};if _bebd .Len ()==0{return _cdga ,_a .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_cdga .Operand =_bebd .String ();return _cdga ,nil ;};func (cmap *CMap )Bytes ()[]byte {_be .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._cb )> 0{return cmap ._cb ;};cmap ._cb =[]byte (_fb .Join ([]string {_ccb ,cmap .toBfData (),_daf },"\u000a"));return cmap ._cb ;};func _cabgb (_aeb ,_dde int )int {if _aeb < _dde {return _aeb ;};return _dde ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_ga :=make (map[CharCode ]string ,len (codeToRune ));
for _ceb ,_fcc :=range codeToRune {_ga [_ceb ]=string (_fcc );};cmap :=&CMap {_df :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_dfa :2,_dc :16,_ab :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_bb :[]Codespace {{Low :0,High :0xffff}},_gb :_ga ,_ea :make (map[string ]CharCode ,len (codeToRune )),_db :make (map[CharCode ]CharCode ,len (codeToRune )),_bbf :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};type cmapInt struct{_bddg int64 };func (cmap *CMap )Name ()string {return cmap ._df };func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_ebb ,_fcb :=cmap ._ea [s ];return _ebb ,_fcb ;};type cmapName struct{Name string ;
};func (_ggad *cMapParser )parseName ()(cmapName ,error ){_eged :="";_gcbb :=false ;for {_adeb ,_bbfg :=_ggad ._cgb .Peek (1);if _bbfg ==_ac .EOF {break ;};if _bbfg !=nil {return cmapName {_eged },_bbfg ;};if !_gcbb {if _adeb [0]=='/'{_gcbb =true ;_ggad ._cgb .ReadByte ();
}else {_be .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_adeb ,_adeb );return cmapName {_eged },_a .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_adeb [0]);
};}else {if _ee .IsWhiteSpace (_adeb [0]){break ;}else if (_adeb [0]=='/')||(_adeb [0]=='[')||(_adeb [0]=='(')||(_adeb [0]==']')||(_adeb [0]=='<')||(_adeb [0]=='>'){break ;}else if _adeb [0]=='#'{_fgdd ,_fgfd :=_ggad ._cgb .Peek (3);if _fgfd !=nil {return cmapName {_eged },_fgfd ;
};_ggad ._cgb .Discard (3);_daaa ,_fgfd :=_c .DecodeString (string (_fgdd [1:3]));if _fgfd !=nil {return cmapName {_eged },_fgfd ;};_eged +=string (_daaa );}else {_fbgf ,_ :=_ggad ._cgb .ReadByte ();_eged +=string (_fbgf );};};};return cmapName {_eged },nil ;
};func (_baeb *cMapParser )parseHexString ()(cmapHexString ,error ){_baeb ._cgb .ReadByte ();_cabg :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_gae :=_cf .Buffer {};
for {_baeb .skipSpaces ();_ecgc ,_aag :=_baeb ._cgb .Peek (1);if _aag !=nil {return cmapHexString {},_aag ;};if _ecgc [0]=='>'{_baeb ._cgb .ReadByte ();break ;};_bfe ,_ :=_baeb ._cgb .ReadByte ();if _cf .IndexByte (_cabg ,_bfe )>=0{_gae .WriteByte (_bfe );
};};if _gae .Len ()%2==1{_be .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_gae .String ());_gae .WriteByte ('0');};_gdb :=_gae .Len ()/2;
_cba ,_ :=_c .DecodeString (_gae .String ());return cmapHexString {_ggga :_gdb ,_bfcg :_cba },nil ;};func (cmap *CMap )Stream ()(*_ee .PdfObjectStream ,error ){if cmap ._eb !=nil {return cmap ._eb ,nil ;};_dfaa ,_dea :=_ee .MakeStream (cmap .Bytes (),_ee .NewFlateEncoder ());
if _dea !=nil {return nil ,_dea ;};cmap ._eb =_dfaa ;return cmap ._eb ,nil ;};func _fdd (_dbc string )string {_cbc :=[]rune (_dbc );_bfbf :=make ([]string ,len (_cbc ));for _bcd ,_edg :=range _cbc {_bfbf [_bcd ]=_a .Sprintf ("\u0025\u0030\u0034\u0078",_edg );
};return _a .Sprintf ("\u003c\u0025\u0073\u003e",_fb .Join (_bfbf ,""));};func (cmap *CMap )NBits ()int {return cmap ._dc };func (cmap *CMap )parseType ()error {_aff :=0;_gaf :=false ;for _dec :=0;_dec < 3&&!_gaf ;_dec ++{_eg ,_fgf :=cmap .parseObject ();
if _fgf !=nil {return _fgf ;};switch _ecg :=_eg .(type ){case cmapOperand :switch _ecg .Operand {case "\u0064\u0065\u0066":_gaf =true ;default:_be .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_eg );
return ErrBadCMap ;};case cmapInt :_aff =int (_ecg ._bddg );};};cmap ._dfa =_aff ;return nil ;};func (cmap *CMap )parseBfchar ()error {for {_cdgg ,_efed :=cmap .parseObject ();if _efed !=nil {if _efed ==_ac .EOF {break ;};return _efed ;};var _gcabd CharCode ;
switch _gfe :=_cdgg .(type ){case cmapOperand :if _gfe .Operand ==_ggf {return nil ;};return _gc .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_gcabd =_egb (_gfe );default:return _gc .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_cdgg ,_efed =cmap .parseObject ();if _efed !=nil {if _efed ==_ac .EOF {break ;};return _efed ;};var _ffcd []rune ;switch _fdbf :=_cdgg .(type ){case cmapOperand :if _fdbf .Operand ==_ggf {return nil ;};_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_fdbf );
return ErrBadCMap ;case cmapHexString :_ffcd =_bea (_fdbf );case cmapName :_be .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_fdbf );_ffcd =[]rune {MissingCodeRune };
default:_be .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_cdgg );return ErrBadCMap ;};cmap ._gb [_gcabd ]=string (_ffcd );};return nil ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._ab };
func (cmap *CMap )parseVersion ()error {_ffa :="";_dbca :=false ;for _eafd :=0;_eafd < 3&&!_dbca ;_eafd ++{_cbb ,_bcb :=cmap .parseObject ();if _bcb !=nil {return _bcb ;};switch _cag :=_cbb .(type ){case cmapOperand :switch _cag .Operand {case "\u0064\u0065\u0066":_dbca =true ;
default:_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_cbb );
return ErrBadCMap ;};case cmapInt :_ffa =_a .Sprintf ("\u0025\u0064",_cag ._bddg );case cmapFloat :_ffa =_a .Sprintf ("\u0025\u0066",_cag ._eae );case cmapString :_ffa =_cag .String ;default:_be .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_cbb );
};};cmap ._ef =_ffa ;return nil ;};func NewCIDSystemInfo (obj _ee .PdfObject )(_af CIDSystemInfo ,_cd error ){_ff ,_cc :=_ee .GetDict (obj );if !_cc {return CIDSystemInfo {},_ee .ErrTypeError ;};_ffb ,_cc :=_ee .GetStringVal (_ff .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_cc {return CIDSystemInfo {},_ee .ErrTypeError ;};_bd ,_cc :=_ee .GetStringVal (_ff .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_cc {return CIDSystemInfo {},_ee .ErrTypeError ;};_da ,_cc :=_ee .GetIntVal (_ff .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_cc {return CIDSystemInfo {},_ee .ErrTypeError ;};return CIDSystemInfo {Registry :_ffb ,Ordering :_bd ,Supplement :_da },nil ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (cmap *CMap )Type ()int {return cmap ._dfa };
func _efe (_dff bool )*CMap {_dd :=16;if _dff {_dd =8;};return &CMap {_dc :_dd ,_db :make (map[CharCode ]CharCode ),_bbf :make (map[CharCode ]CharCode ),_gb :make (map[CharCode ]string ),_ea :make (map[string ]CharCode )};};func (_ega *cMapParser )parseNumber ()(cmapObject ,error ){_gfbf ,_edee :=_ee .ParseNumber (_ega ._cgb );
if _edee !=nil {return nil ,_edee ;};switch _bgfd :=_gfbf .(type ){case *_ee .PdfObjectFloat :return cmapFloat {float64 (*_bgfd )},nil ;case *_ee .PdfObjectInteger :return cmapInt {int64 (*_bgfd )},nil ;};return nil ,_a .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_gfbf );
};const (_edgf ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_gaa ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_dgc ="\u0065n\u0064\u0063\u006d\u0061\u0070";_dbb ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_afad ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_aded ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_ggf ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_aec ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_aee ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_ffd ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_cdf ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_gbb ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_ffae ="\u0057\u004d\u006fd\u0065";_bbef ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_gbae ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_aegg ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )matchCode (_gf []byte )(_fbc CharCode ,_gbc int ,_cce bool ){for _ffc :=0;
_ffc < _ba ;_ffc ++{if _ffc < len (_gf ){_fbc =_fbc <<8|CharCode (_gf [_ffc ]);_gbc ++;};_cce =cmap .inCodespace (_fbc ,_ffc +1);if _cce {return _fbc ,_gbc ,true ;};};_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_gf ,string (_gf ),cmap );
return 0,0,false ;};type cmapObject interface{};type integer struct{_gee bool ;_fccb int ;};const (_ebbc =100;_ccb ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_daf ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);var (ErrBadCMap =_gc .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_gc .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_gc .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func _aga (_ece string )rune {_abe :=[]rune (_ece );return _abe [len (_abe )-1]};type cmapArray struct{Array []cmapObject ;};func (_gage *cMapParser )parseDict ()(cmapDict ,error ){_be .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_edgg :=_abbd ();_fccf ,_ :=_gage ._cgb .ReadByte ();if _fccf !='<'{return _edgg ,ErrBadCMapDict ;};_fccf ,_ =_gage ._cgb .ReadByte ();if _fccf !='<'{return _edgg ,ErrBadCMapDict ;};for {_gage .skipSpaces ();_aafb ,_adcf :=_gage ._cgb .Peek (2);if _adcf !=nil {return _edgg ,_adcf ;
};if (_aafb [0]=='>')&&(_aafb [1]=='>'){_gage ._cgb .ReadByte ();_gage ._cgb .ReadByte ();break ;};_adef ,_adcf :=_gage .parseName ();_be .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_adef .Name );if _adcf !=nil {_be .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_adcf );
return _edgg ,_adcf ;};_gage .skipSpaces ();_ecd ,_adcf :=_gage .parseObject ();if _adcf !=nil {return _edgg ,_adcf ;};_edgg .Dict [_adef .Name ]=_ecd ;_gage .skipSpaces ();_aafb ,_adcf =_gage ._cgb .Peek (3);if _adcf !=nil {return _edgg ,_adcf ;};if string (_aafb )=="\u0064\u0065\u0066"{_gage ._cgb .Discard (3);
};};return _edgg ,nil ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};const (_ba =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune );
);func IsPredefinedCMap (name string )bool {return _ae .AssetExists (name )};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_cae ,_bdg :=cmap ._db [code ];return _cae ,_bdg ;};func (_ffe *cMapParser )parseComment ()(string ,error ){var _edf _cf .Buffer ;
_ ,_bgbe :=_ffe .skipSpaces ();if _bgbe !=nil {return _edf .String (),_bgbe ;};_fcf :=true ;for {_geg ,_ggg :=_ffe ._cgb .Peek (1);if _ggg !=nil {_be .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_ggg );
return _edf .String (),_ggg ;};if _fcf &&_geg [0]!='%'{return _edf .String (),ErrBadCMapComment ;};_fcf =false ;if (_geg [0]!='\r')&&(_geg [0]!='\n'){_bacf ,_ :=_ffe ._cgb .ReadByte ();_edf .WriteByte (_bacf );}else {break ;};};return _edf .String (),nil ;
};func (cmap *CMap )parseBfrange ()error {for {var _adg CharCode ;_ccfc ,_fdaf :=cmap .parseObject ();if _fdaf !=nil {if _fdaf ==_ac .EOF {break ;};return _fdaf ;};switch _abg :=_ccfc .(type ){case cmapOperand :if _abg .Operand ==_aee {return nil ;};return _gc .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_adg =_egb (_abg );default:return _gc .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _bbgb CharCode ;_ccfc ,_fdaf =cmap .parseObject ();if _fdaf !=nil {if _fdaf ==_ac .EOF {break ;};return _fdaf ;
};switch _dfe :=_ccfc .(type ){case cmapOperand :_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_bbgb =_egb (_dfe );if _bbgb > 0xffff{_bbgb =0xffff;};default:_be .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_ccfc );return ErrBadCMap ;
};_ccfc ,_fdaf =cmap .parseObject ();if _fdaf !=nil {if _fdaf ==_ac .EOF {break ;};return _fdaf ;};switch _edef :=_ccfc .(type ){case cmapArray :if len (_edef .Array )!=int (_bbgb -_adg )+1{_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _fab :=_adg ;_fab <=_bbgb ;_fab ++{_agbc :=_edef .Array [_fab -_adg ];_adb ,_gfb :=_agbc .(cmapHexString );if !_gfb {return _gc .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_cbga :=_bea (_adb );cmap ._gb [_fab ]=string (_cbga );};case cmapHexString :_afa :=_bea (_edef );_eag :=len (_afa );for _faba :=_adg ;_faba <=_bbgb ;_faba ++{cmap ._gb [_faba ]=string (_afa );if _eag > 0{_afa [_eag -1]++;}else {_be .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_faba );
};if _faba ==1<<32-1{break ;};};default:_be .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_ccfc );return ErrBadCMap ;};};return nil ;};type charRange struct{_bag CharCode ;
_eec CharCode ;};type cmapOperand struct{Operand string ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._abb ._fccb ,cmap ._abb ._gee };func (cmap *CMap )parseSystemInfo ()error {_eab :=false ;_cagc :=false ;_ecb :="";_abc :=false ;_agaa :=CIDSystemInfo {};
for _eba :=0;_eba < 50&&!_abc ;_eba ++{_efg ,_fag :=cmap .parseObject ();if _fag !=nil {return _fag ;};switch _babb :=_efg .(type ){case cmapDict :_feb :=_babb .Dict ;_cbcb ,_fff :=_feb ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_fff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_ggc ,_fff :=_cbcb .(cmapString );if !_fff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_agaa .Registry =_ggc .String ;
_cbcb ,_fff =_feb ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_fff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ggc ,_fff =_cbcb .(cmapString );
if !_fff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_agaa .Ordering =_ggc .String ;_dffg ,_fff :=_feb ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_fff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ffce ,_fff :=_dffg .(cmapInt );if !_fff {_be .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_agaa .Supplement =int (_ffce ._bddg );_abc =true ;case cmapOperand :switch _babb .Operand {case "\u0062\u0065\u0067i\u006e":_eab =true ;case "\u0065\u006e\u0064":_abc =true ;case "\u0064\u0065\u0066":_cagc =false ;};case cmapName :if _eab {_ecb =_babb .Name ;
_cagc =true ;};case cmapString :if _cagc {switch _ecb {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_agaa .Registry =_babb .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_agaa .Ordering =_babb .String ;};};case cmapInt :if _cagc {switch _ecb {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_agaa .Supplement =int (_babb ._bddg );
};};};};if !_abc {_be .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._ab =_agaa ;return nil ;};type cmapHexString struct{_ggga int ;_bfcg []byte ;};func (cmap *CMap )parseName ()error {_efc :="";_gfdc :=false ;for _bffd :=0;_bffd < 20&&!_gfdc ;_bffd ++{_cac ,_fda :=cmap .parseObject ();if _fda !=nil {return _fda ;
};switch _gfc :=_cac .(type ){case cmapOperand :switch _gfc .Operand {case "\u0064\u0065\u0066":_gfdc =true ;default:_be .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_cac ,_efc );
if _efc !=""{_efc =_a .Sprintf ("\u0025\u0073\u0020%\u0073",_efc ,_gfc .Operand );};_be .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_efc );
};case cmapName :_efc =_gfc .Name ;};};if !_gfdc {_be .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._df =_efc ;return nil ;};type fbRange struct{_aa CharCode ;
_cg CharCode ;_fc string ;};func (_cbea *cMapParser )parseArray ()(cmapArray ,error ){_agc :=cmapArray {};_agc .Array =[]cmapObject {};_cbea ._cgb .ReadByte ();for {_cbea .skipSpaces ();_bcbc ,_bbgc :=_cbea ._cgb .Peek (1);if _bbgc !=nil {return _agc ,_bbgc ;
};if _bcbc [0]==']'{_cbea ._cgb .ReadByte ();break ;};_gdeb ,_bbgc :=_cbea .parseObject ();if _bbgc !=nil {return _agc ,_bbgc ;};_agc .Array =append (_agc .Array ,_gdeb );};return _agc ,nil ;};func _abbd ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};
func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_cea :=_ebc (name );if _cea !=nil {return nil ,_cea ;};if cmap ._ce ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_cda ,_cea :=_ebc (cmap ._ce );if _cea !=nil {return nil ,_cea ;};for _dg ,_fe :=range _cda ._db {if _ ,_eea :=cmap ._db [_dg ];
!_eea {cmap ._db [_dg ]=_fe ;};};cmap ._bb =append (cmap ._bb ,_cda ._bb ...);cmap .computeInverseMappings ();return cmap ,nil ;};type CMap struct{*cMapParser ;_df string ;_dc int ;_dfa int ;_ef string ;_ce string ;_ab CIDSystemInfo ;_bb []Codespace ;_db map[CharCode ]CharCode ;
_bbf map[CharCode ]CharCode ;_gb map[CharCode ]string ;_ea map[string ]CharCode ;_cb []byte ;_eb *_ee .PdfObjectStream ;_abb integer ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _eeg []CharCode ;if cmap ._dc ==8{for _ ,_bfb :=range data {_eeg =append (_eeg ,CharCode (_bfb ));
};return _eeg ,true ;};for _gba :=0;_gba < len (data );{_fgd ,_daa ,_ecc :=cmap .matchCode (data [_gba :]);if !_ecc {_be .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_gba ,data ,string (data ));
return _eeg ,false ;};_eeg =append (_eeg ,_fgd );_gba +=_daa ;};return _eeg ,true ;};func (cmap *CMap )computeInverseMappings (){for _bdc ,_fg :=range cmap ._db {if _dcb ,_aeg :=cmap ._bbf [_fg ];!_aeg ||(_aeg &&_dcb > _bdc ){cmap ._bbf [_fg ]=_bdc ;};
};for _ge ,_cge :=range cmap ._gb {if _cef ,_bg :=cmap ._ea [_cge ];!_bg ||(_bg &&_cef > _ge ){cmap ._ea [_cge ]=_ge ;};};_e .Slice (cmap ._bb ,func (_bf ,_bff int )bool {return cmap ._bb [_bf ].Low < cmap ._bb [_bff ].Low });};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_bab ,_cbg :=cmap .BytesToCharcodes (data );
if !_cbg {_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_cec :=make ([]string ,len (_bab ));var _bfa []CharCode ;for _ad ,_gag :=range _bab {_bad ,_fga :=cmap ._gb [_gag ];if !_fga {_bfa =append (_bfa ,_gag );_bad =MissingCodeString ;};_cec [_ad ]=_bad ;};_gcf :=_fb .Join (_cec ,"");if len (_bfa )> 0{_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_bab ,len (_bfa ),_bfa ,_gcf ,cmap );
};return _gcf ,len (_bfa );};func _egb (_afadg cmapHexString )CharCode {_fggf :=CharCode (0);for _ ,_gbge :=range _afadg ._bfcg {_fggf <<=8;_fggf |=CharCode (_gbge );};return _fggf ;};func (cmap *CMap )inCodespace (_gff CharCode ,_ag int )bool {for _ ,_edb :=range cmap ._bb {if _edb .Low <=_gff &&_gff <=_edb .High &&_ag ==_edb .NumBytes {return true ;
};};return false ;};func (_fgaf *cMapParser )parseString ()(cmapString ,error ){_fgaf ._cgb .ReadByte ();_bedg :=_cf .Buffer {};_gdfe :=1;for {_dad ,_bfga :=_fgaf ._cgb .Peek (1);if _bfga !=nil {return cmapString {_bedg .String ()},_bfga ;};if _dad [0]=='\\'{_fgaf ._cgb .ReadByte ();
_gcca ,_add :=_fgaf ._cgb .ReadByte ();if _add !=nil {return cmapString {_bedg .String ()},_add ;};if _ee .IsOctalDigit (_gcca ){_efcf ,_gafa :=_fgaf ._cgb .Peek (2);if _gafa !=nil {return cmapString {_bedg .String ()},_gafa ;};var _adf []byte ;_adf =append (_adf ,_gcca );
for _ ,_gdg :=range _efcf {if _ee .IsOctalDigit (_gdg ){_adf =append (_adf ,_gdg );}else {break ;};};_fgaf ._cgb .Discard (len (_adf )-1);_be .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_adf );
_adff ,_gafa :=_d .ParseUint (string (_adf ),8,32);if _gafa !=nil {return cmapString {_bedg .String ()},_gafa ;};_bedg .WriteByte (byte (_adff ));continue ;};switch _gcca {case 'n':_bedg .WriteByte ('\n');case 'r':_bedg .WriteByte ('\r');case 't':_bedg .WriteByte ('\t');
case 'b':_bedg .WriteByte ('\b');case 'f':_bedg .WriteByte ('\f');case '(':_bedg .WriteByte ('(');case ')':_bedg .WriteByte (')');case '\\':_bedg .WriteByte ('\\');};continue ;}else if _dad [0]=='('{_gdfe ++;}else if _dad [0]==')'{_gdfe --;if _gdfe ==0{_fgaf ._cgb .ReadByte ();
break ;};};_fgef ,_ :=_fgaf ._cgb .ReadByte ();_bedg .WriteByte (_fgef );};return cmapString {_bedg .String ()},nil ;};func (cmap *CMap )parseWMode ()error {var _faec int ;_bgf :=false ;for _afb :=0;_afb < 3&&!_bgf ;_afb ++{_gcc ,_ebf :=cmap .parseObject ();
if _ebf !=nil {return _ebf ;};switch _ecf :=_gcc .(type ){case cmapOperand :switch _ecf .Operand {case "\u0064\u0065\u0066":_bgf =true ;default:_be .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_gcc );
return ErrBadCMap ;};case cmapInt :_faec =int (_ecf ._bddg );};};cmap ._abb =integer {_gee :true ,_fccb :_faec };return nil ;};func (_ddb *cMapParser )parseObject ()(cmapObject ,error ){_ddb .skipSpaces ();for {_afc ,_ege :=_ddb ._cgb .Peek (2);if _ege !=nil {return nil ,_ege ;
};if _afc [0]=='%'{_ddb .parseComment ();_ddb .skipSpaces ();continue ;}else if _afc [0]=='/'{_eac ,_bfc :=_ddb .parseName ();return _eac ,_bfc ;}else if _afc [0]=='('{_bdda ,_bdf :=_ddb .parseString ();return _bdda ,_bdf ;}else if _afc [0]=='['{_abcf ,_dcf :=_ddb .parseArray ();
return _abcf ,_dcf ;}else if (_afc [0]=='<')&&(_afc [1]=='<'){_bdce ,_bcdb :=_ddb .parseDict ();return _bdce ,_bcdb ;}else if _afc [0]=='<'{_cab ,_dgg :=_ddb .parseHexString ();return _cab ,_dgg ;}else if _ee .IsDecimalDigit (_afc [0])||(_afc [0]=='-'&&_ee .IsDecimalDigit (_afc [1])){_bed ,_fdde :=_ddb .parseNumber ();
if _fdde !=nil {return nil ,_fdde ;};return _bed ,nil ;}else {_ffbg ,_acg :=_ddb .parseOperand ();if _acg !=nil {return nil ,_acg ;};return _ffbg ,nil ;};};};func (cmap *CMap )parse ()error {var _ceae cmapObject ;for {_eccd ,_cfa :=cmap .parseObject ();
if _cfa !=nil {if _cfa ==_ac .EOF {break ;};_be .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_cfa );return _cfa ;};switch _bega :=_eccd .(type ){case cmapOperand :_aad :=_bega ;
switch _aad .Operand {case _dbb :_gdf :=cmap .parseCodespaceRange ();if _gdf !=nil {return _gdf ;};case _ffd :_eaff :=cmap .parseCIDRange ();if _eaff !=nil {return _eaff ;};case _aded :_bgd :=cmap .parseBfchar ();if _bgd !=nil {return _bgd ;};case _aec :_gec :=cmap .parseBfrange ();
if _gec !=nil {return _gec ;};case _gbb :if _ceae ==nil {_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_fac ,_cebc :=_ceae .(cmapName );
if !_cebc {_be .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_ceae );return ErrBadCMap ;};cmap ._ce =_fac .Name ;
case _edgf :_cdg :=cmap .parseSystemInfo ();if _cdg !=nil {return _cdg ;};};case cmapName :_fbg :=_bega ;switch _fbg .Name {case _edgf :_eff :=cmap .parseSystemInfo ();if _eff !=nil {return _eff ;};case _bbef :_cgd :=cmap .parseName ();if _cgd !=nil {return _cgd ;
};case _gbae :_gfd :=cmap .parseType ();if _gfd !=nil {return _gfd ;};case _aegg :_dcg :=cmap .parseVersion ();if _dcg !=nil {return _dcg ;};case _ffae :if _cfa =cmap .parseWMode ();_cfa !=nil {return _cfa ;};};};_ceae =_eccd ;};return nil ;};