//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_cc "bufio";_ad "bytes";_e "encoding/hex";_cb "errors";_a "fmt";_d "github.com/unidoc/unipdf/v3/common";_gd "github.com/unidoc/unipdf/v3/core";_ga "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_ba "io";_af "sort";_g "strconv";
_f "strings";_c "unicode/utf16";);func (_fegd *cMapParser )parseHexString ()(cmapHexString ,error ){_fegd ._ggg .ReadByte ();_gcdd :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_afac :=_ad .Buffer {};for {_fegd .skipSpaces ();_eaa ,_adb :=_fegd ._ggg .Peek (1);if _adb !=nil {return cmapHexString {},_adb ;};if _eaa [0]=='>'{_fegd ._ggg .ReadByte ();break ;};_fbg ,_ :=_fegd ._ggg .ReadByte ();if _ad .IndexByte (_gcdd ,_fbg )>=0{_afac .WriteByte (_fbg );
};};if _afac .Len ()%2==1{_d .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_afac .String ());_afac .WriteByte ('0');};_ccbb :=_afac .Len ()/2;
_bgag ,_ :=_e .DecodeString (_afac .String ());return cmapHexString {_abag :_ccbb ,_edddb :_bgag },nil ;};func (cmap *CMap )String ()string {_fbfd :=cmap ._ag ;_dgec :=[]string {_a .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._fab ),_a .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._gcf )};
if cmap ._dc !=""{_dgec =append (_dgec ,_a .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._dc ));};if cmap ._bg !=""{_dgec =append (_dgec ,_a .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._bg ));
};_dgec =append (_dgec ,_a .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_fbfd .String ()));if len (cmap ._cea )> 0{_dgec =append (_dgec ,_a .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._cea )));
};if len (cmap ._ac )> 0{_dgec =append (_dgec ,_a .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._ac )));};return _a .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._ca ,_f .Join (_dgec ,"\u0020"));
};func (cmap *CMap )parseType ()error {_eae :=0;_gcfb :=false ;for _bcd :=0;_bcd < 3&&!_gcfb ;_bcd ++{_fec ,_dcc :=cmap .parseObject ();if _dcc !=nil {return _dcc ;};switch _ccef :=_fec .(type ){case cmapOperand :switch _ccef .Operand {case "\u0064\u0065\u0066":_gcfb =true ;
default:_d .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_fec );return ErrBadCMap ;};case cmapInt :_eae =int (_ccef ._ebe );
};};cmap ._gcf =_eae ;return nil ;};var (ErrBadCMap =_cb .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_cb .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_cb .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););type cmapString struct{String string ;};func (cmap *CMap )parseName ()error {_dag :="";_fcg :=false ;for _cgb :=0;_cgb < 20&&!_fcg ;_cgb ++{_dce ,_ecf :=cmap .parseObject ();
if _ecf !=nil {return _ecf ;};switch _gbf :=_dce .(type ){case cmapOperand :switch _gbf .Operand {case "\u0064\u0065\u0066":_fcg =true ;default:_d .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_dce ,_dag );
if _dag !=""{_dag =_a .Sprintf ("\u0025\u0073\u0020%\u0073",_dag ,_gbf .Operand );};_d .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_dag );
};case cmapName :_dag =_gbf .Name ;};};if !_fcg {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._ca =_dag ;return nil ;};func (_babb *cMapParser )parseDict ()(cmapDict ,error ){_d .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_dfdga :=_bbb ();_dbae ,_ :=_babb ._ggg .ReadByte ();if _dbae !='<'{return _dfdga ,ErrBadCMapDict ;};_dbae ,_ =_babb ._ggg .ReadByte ();if _dbae !='<'{return _dfdga ,ErrBadCMapDict ;};for {_babb .skipSpaces ();_defd ,_acca :=_babb ._ggg .Peek (2);if _acca !=nil {return _dfdga ,_acca ;
};if (_defd [0]=='>')&&(_defd [1]=='>'){_babb ._ggg .ReadByte ();_babb ._ggg .ReadByte ();break ;};_dggg ,_acca :=_babb .parseName ();_d .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_dggg .Name );if _acca !=nil {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_acca );
return _dfdga ,_acca ;};_babb .skipSpaces ();_acaa ,_acca :=_babb .parseObject ();if _acca !=nil {return _dfdga ,_acca ;};_dfdga .Dict [_dggg .Name ]=_acaa ;_babb .skipSpaces ();_defd ,_acca =_babb ._ggg .Peek (3);if _acca !=nil {return _dfdga ,_acca ;
};if string (_defd )=="\u0064\u0065\u0066"{_babb ._ggg .Discard (3);};};return _dfdga ,nil ;};type integer struct{_gbg bool ;_cga int ;};func _dge (_egc bool )*CMap {_fbf :=16;if _egc {_fbf =8;};return &CMap {_fab :_fbf ,_dg :make (map[CharCode ]CharCode ),_bfc :make (map[CharCode ]CharCode ),_ac :make (map[CharCode ]string ),_ef :make (map[string ]CharCode )};
};func _eac (_afb string )string {_ade :=[]rune (_afb );_gfa :=make ([]string ,len (_ade ));for _db ,_ccba :=range _ade {_gfa [_db ]=_a .Sprintf ("\u0025\u0030\u0034\u0078",_ccba );};return _a .Sprintf ("\u003c\u0025\u0073\u003e",_f .Join (_gfa ,""));};
func (cmap *CMap )parseCodespaceRange ()error {for {_efc ,_gfaa :=cmap .parseObject ();if _gfaa !=nil {if _gfaa ==_ba .EOF {break ;};return _gfaa ;};_acc ,_bfaf :=_efc .(cmapHexString );if !_bfaf {if _egcd ,_fafbb :=_efc .(cmapOperand );_fafbb {if _egcd .Operand ==_efaa {return nil ;
};return _cb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_efc ,_gfaa =cmap .parseObject ();if _gfaa !=nil {if _gfaa ==_ba .EOF {break ;};return _gfaa ;};_dcb ,_bfaf :=_efc .(cmapHexString );if !_bfaf {return _cb .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");
};if len (_acc ._edddb )!=len (_dcb ._edddb ){return _cb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_caf :=_aegc (_acc );
_dgg :=_aegc (_dcb );if _dgg < _caf {_d .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_caf ,_dgg );
return ErrBadCMap ;};_dfd :=_dcb ._abag ;_eefg :=Codespace {NumBytes :_dfd ,Low :_caf ,High :_dgg };cmap ._cea =append (cmap ._cea ,_eefg );_d .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_caf ,_dgg );
};if len (cmap ._cea )==0{_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_ege *cMapParser )parseOperand ()(cmapOperand ,error ){_beaa :=cmapOperand {};
_caaf :=_ad .Buffer {};for {_gceb ,_efad :=_ege ._ggg .Peek (1);if _efad !=nil {if _efad ==_ba .EOF {break ;};return _beaa ,_efad ;};if _gd .IsDelimiter (_gceb [0]){break ;};if _gd .IsWhiteSpace (_gceb [0]){break ;};_abd ,_ :=_ege ._ggg .ReadByte ();_caaf .WriteByte (_abd );
};if _caaf .Len ()==0{return _beaa ,_a .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_beaa .Operand =_caaf .String ();return _beaa ,nil ;};func (cmap *CMap )parseSystemInfo ()error {_ebf :=false ;
_bfda :=false ;_fga :="";_aabc :=false ;_cdg :=CIDSystemInfo {};for _fgea :=0;_fgea < 50&&!_aabc ;_fgea ++{_bdd ,_dga :=cmap .parseObject ();if _dga !=nil {return _dga ;};switch _ead :=_bdd .(type ){case cmapDict :_dfa :=_ead .Dict ;_eed ,_bad :=_dfa ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];
if !_bad {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gdg ,_bad :=_eed .(cmapString );if !_bad {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_cdg .Registry =_gdg .String ;_eed ,_bad =_dfa ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_bad {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_gdg ,_bad =_eed .(cmapString );if !_bad {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cdg .Ordering =_gdg .String ;_abf ,_bad :=_dfa ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_bad {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_agg ,_bad :=_abf .(cmapInt );if !_bad {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_cdg .Supplement =int (_agg ._ebe );_aabc =true ;case cmapOperand :switch _ead .Operand {case "\u0062\u0065\u0067i\u006e":_ebf =true ;case "\u0065\u006e\u0064":_aabc =true ;case "\u0064\u0065\u0066":_bfda =false ;};case cmapName :if _ebf {_fga =_ead .Name ;
_bfda =true ;};case cmapString :if _bfda {switch _fga {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_cdg .Registry =_ead .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_cdg .Ordering =_ead .String ;};};case cmapInt :if _bfda {switch _fga {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_cdg .Supplement =int (_ead ._ebe );
};};};};if !_aabc {_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._ag =_cdg ;return nil ;};func (cmap *CMap )NBits ()int {return cmap ._fab };func (cmap *CMap )parseCIDRange ()error {for {_dbg ,_bbc :=cmap .parseObject ();if _bbc !=nil {if _bbc ==_ba .EOF {break ;};return _bbc ;};_ddc ,_ffe :=_dbg .(cmapHexString );
if !_ffe {if _faed ,_bddg :=_dbg .(cmapOperand );_bddg {if _faed .Operand ==_abgd {return nil ;};return _cb .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_gada :=_aegc (_ddc );_dbg ,_bbc =cmap .parseObject ();if _bbc !=nil {if _bbc ==_ba .EOF {break ;};return _bbc ;};_eec ,_ffe :=_dbg .(cmapHexString );if !_ffe {return _cb .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_ddc ._edddb )!=len (_eec ._edddb ){return _cb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_gabf :=_aegc (_eec );
if _gada > _gabf {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_gada ,_gabf );
return ErrBadCMap ;};_dbg ,_bbc =cmap .parseObject ();if _bbc !=nil {if _bbc ==_ba .EOF {break ;};return _bbc ;};_ddf ,_ffe :=_dbg .(cmapInt );if !_ffe {return _cb .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ddf ._ebe < 0{return _cb .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_cafd :=_ddf ._ebe ;for _cbd :=_gada ;_cbd <=_gabf ;_cbd ++{cmap ._dg [_cbd ]=CharCode (_cafd );
_cafd ++;};_d .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_gada ,_gabf ,_ddf ._ebe );};return nil ;};func (_fgf *cMapParser )parseName ()(cmapName ,error ){_aegg :="";
_dfdf :=false ;for {_de ,_bgf :=_fgf ._ggg .Peek (1);if _bgf ==_ba .EOF {break ;};if _bgf !=nil {return cmapName {_aegg },_bgf ;};if !_dfdf {if _de [0]=='/'{_dfdf =true ;_fgf ._ggg .ReadByte ();}else {_d .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_de ,_de );
return cmapName {_aegg },_a .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_de [0]);};}else {if _gd .IsWhiteSpace (_de [0]){break ;}else if (_de [0]=='/')||(_de [0]=='[')||(_de [0]=='(')||(_de [0]==']')||(_de [0]=='<')||(_de [0]=='>'){break ;
}else if _de [0]=='#'{_gdac ,_ffed :=_fgf ._ggg .Peek (3);if _ffed !=nil {return cmapName {_aegg },_ffed ;};_fgf ._ggg .Discard (3);_dbcd ,_ffed :=_e .DecodeString (string (_gdac [1:3]));if _ffed !=nil {return cmapName {_aegg },_ffed ;};_aegg +=string (_dbcd );
}else {_ffede ,_ :=_fgf ._ggg .ReadByte ();_aegg +=string (_ffede );};};};return cmapName {_aegg },nil ;};func (_eaeb *cMapParser )parseComment ()(string ,error ){var _dfff _ad .Buffer ;_ ,_eaed :=_eaeb .skipSpaces ();if _eaed !=nil {return _dfff .String (),_eaed ;
};_bfdd :=true ;for {_bba ,_bga :=_eaeb ._ggg .Peek (1);if _bga !=nil {_d .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_bga );return _dfff .String (),_bga ;};if _bfdd &&_bba [0]!='%'{return _dfff .String (),ErrBadCMapComment ;
};_bfdd =false ;if (_bba [0]!='\r')&&(_bba [0]!='\n'){_bede ,_ :=_eaeb ._ggg .ReadByte ();_dfff .WriteByte (_bede );}else {break ;};};return _dfff .String (),nil ;};type cmapObject interface{};type fbRange struct{_bc CharCode ;_ce CharCode ;_eg string ;
};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_cd :=make (map[CharCode ]string ,len (codeToRune ));for _dcf ,_cbg :=range codeToRune {_cd [_dcf ]=string (_cbg );};cmap :=&CMap {_ca :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_gcf :2,_fab :16,_ag :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_cea :[]Codespace {{Low :0,High :0xffff}},_ac :_cd ,_ef :make (map[string ]CharCode ,len (codeToRune )),_dg :make (map[CharCode ]CharCode ,len (codeToRune )),_bfc :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )inCodespace (_cac CharCode ,_ega int )bool {for _ ,_cg :=range cmap ._cea {if _cg .Low <=_cac &&_cac <=_cg .High &&_ega ==_cg .NumBytes {return true ;};};return false ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_afd ,_bgc :=cmap ._bfc [cid ];
return _afd ,_bgc ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_d .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_dge (isSimple );cmap .cMapParser =_age (data );_fbe :=cmap .parse ();if _fbe !=nil {return nil ,_fbe ;};if len (cmap ._cea )==0{if cmap ._bg !=""{return cmap ,nil ;};_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )Type ()int {return cmap ._gcf };func (cmap *CMap )parseBfchar ()error {for {_bgcb ,_fgg :=cmap .parseObject ();
if _fgg !=nil {if _fgg ==_ba .EOF {break ;};return _fgg ;};var _feg CharCode ;switch _ffd :=_bgcb .(type ){case cmapOperand :if _ffd .Operand ==_dfab {return nil ;};return _cb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_feg =_aegc (_ffd );default:return _cb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_bgcb ,_fgg =cmap .parseObject ();if _fgg !=nil {if _fgg ==_ba .EOF {break ;};return _fgg ;};var _ceb []rune ;
switch _cafc :=_bgcb .(type ){case cmapOperand :if _cafc .Operand ==_dfab {return nil ;};_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_cafc );
return ErrBadCMap ;case cmapHexString :_ceb =_aae (_cafc );case cmapName :_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_cafc );_ceb =[]rune {MissingCodeRune };
default:_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_bgcb );return ErrBadCMap ;};cmap ._ac [_feg ]=string (_ceb );};return nil ;};func _bce (_eca string )rune {_adge :=[]rune (_eca );
return _adge [len (_adge )-1]};type charRange struct{_adf CharCode ;_eb CharCode ;};func (cmap *CMap )parseVersion ()error {_fac :="";_ebdf :=false ;for _abgc :=0;_abgc < 3&&!_ebdf ;_abgc ++{_agce ,_cad :=cmap .parseObject ();if _cad !=nil {return _cad ;
};switch _gg :=_agce .(type ){case cmapOperand :switch _gg .Operand {case "\u0064\u0065\u0066":_ebdf =true ;default:_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_agce );
return ErrBadCMap ;};case cmapInt :_fac =_a .Sprintf ("\u0025\u0064",_gg ._ebe );case cmapFloat :_fac =_a .Sprintf ("\u0025\u0066",_gg ._baba );case cmapString :_fac =_gg .String ;default:_d .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_agce );
};};cmap ._dc =_fac ;return nil ;};func (cmap *CMap )Bytes ()[]byte {_d .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._ge )> 0{return cmap ._ge ;};
cmap ._ge =[]byte (_f .Join ([]string {_faec ,cmap .toBfData (),_abg },"\u000a"));return cmap ._ge ;};type CharCode uint32 ;func (cmap *CMap )Stream ()(*_gd .PdfObjectStream ,error ){if cmap ._ccb !=nil {return cmap ._ccb ,nil ;};_bdb ,_cce :=_gd .MakeStream (cmap .Bytes (),_gd .NewFlateEncoder ());
if _cce !=nil {return nil ,_cce ;};cmap ._ccb =_bdb ;return cmap ._ccb ,nil ;};type cmapName struct{Name string ;};type cmapDict struct{Dict map[string ]cmapObject ;};func IsPredefinedCMap (name string )bool {return _ga .AssetExists (name )};func (cmap *CMap )parseWMode ()error {var _aeg int ;
_eeb :=false ;for _afda :=0;_afda < 3&&!_eeb ;_afda ++{_gbbg ,_cgd :=cmap .parseObject ();if _cgd !=nil {return _cgd ;};switch _dbc :=_gbbg .(type ){case cmapOperand :switch _dbc .Operand {case "\u0064\u0065\u0066":_eeb =true ;default:_d .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_gbbg );
return ErrBadCMap ;};case cmapInt :_aeg =int (_dbc ._ebe );};};cmap ._ea =integer {_gbg :true ,_cga :_aeg };return nil ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._ag };type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;
};type cMapParser struct{_ggg *_cc .Reader };func (_ccda *cMapParser )parseString ()(cmapString ,error ){_ccda ._ggg .ReadByte ();_ccbc :=_ad .Buffer {};_acg :=1;for {_gagd ,_acf :=_ccda ._ggg .Peek (1);if _acf !=nil {return cmapString {_ccbc .String ()},_acf ;
};if _gagd [0]=='\\'{_ccda ._ggg .ReadByte ();_dba ,_gcae :=_ccda ._ggg .ReadByte ();if _gcae !=nil {return cmapString {_ccbc .String ()},_gcae ;};if _gd .IsOctalDigit (_dba ){_dad ,_daaa :=_ccda ._ggg .Peek (2);if _daaa !=nil {return cmapString {_ccbc .String ()},_daaa ;
};var _def []byte ;_def =append (_def ,_dba );for _ ,_ebfb :=range _dad {if _gd .IsOctalDigit (_ebfb ){_def =append (_def ,_ebfb );}else {break ;};};_ccda ._ggg .Discard (len (_def )-1);_d .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_def );
_gadg ,_daaa :=_g .ParseUint (string (_def ),8,32);if _daaa !=nil {return cmapString {_ccbc .String ()},_daaa ;};_ccbc .WriteByte (byte (_gadg ));continue ;};switch _dba {case 'n':_ccbc .WriteByte ('\n');case 'r':_ccbc .WriteByte ('\r');case 't':_ccbc .WriteByte ('\t');
case 'b':_ccbc .WriteByte ('\b');case 'f':_ccbc .WriteByte ('\f');case '(':_ccbc .WriteByte ('(');case ')':_ccbc .WriteByte (')');case '\\':_ccbc .WriteByte ('\\');};continue ;}else if _gagd [0]=='('{_acg ++;}else if _gagd [0]==')'{_acg --;if _acg ==0{_ccda ._ggg .ReadByte ();
break ;};};_bgfe ,_ :=_ccda ._ggg .ReadByte ();_ccbc .WriteByte (_bgfe );};return cmapString {_ccbc .String ()},nil ;};const (_fa =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func _ffdd (_adgg ,_ggf int )int {if _adgg < _ggf {return _adgg ;
};return _ggf ;};type cmapHexString struct{_abag int ;_edddb []byte ;};func (cmap *CMap )Name ()string {return cmap ._ca };func (cmap *CMap )WMode ()(int ,bool ){return cmap ._ea ._cga ,cmap ._ea ._gbg };func (cmap *CMap )computeInverseMappings (){for _gdd ,_bfe :=range cmap ._dg {if _dcdf ,_bcf :=cmap ._bfc [_bfe ];
!_bcf ||(_bcf &&_dcdf > _gdd ){cmap ._bfc [_bfe ]=_gdd ;};};for _cf ,_gda :=range cmap ._ac {if _bdcg ,_dgb :=cmap ._ef [_gda ];!_dgb ||(_dgb &&_bdcg > _cf ){cmap ._ef [_gda ]=_cf ;};};_af .Slice (cmap ._cea ,func (_fe ,_adg int )bool {return cmap ._cea [_fe ].Low < cmap ._cea [_adg ].Low });
};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_faf ,_fafb :=cmap .BytesToCharcodes (data );if !_fafb {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_ccd :=make ([]string ,len (_faf ));var _gca []CharCode ;for _ab ,_fc :=range _faf {_ec ,_gb :=cmap ._ac [_fc ];if !_gb {_gca =append (_gca ,_fc );_ec =MissingCodeString ;};_ccd [_ab ]=_ec ;};_agd :=_f .Join (_ccd ,"");if len (_gca )> 0{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_faf ,len (_gca ),_gca ,_agd ,cmap );
};return _agd ,len (_gca );};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _bcg []CharCode ;if cmap ._fab ==8{for _ ,_efa :=range data {_bcg =append (_bcg ,CharCode (_efa ));};return _bcg ,true ;};for _dd :=0;_dd < len (data );
{_ee ,_afdg ,_afa :=cmap .matchCode (data [_dd :]);if !_afa {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_dd ,data ,string (data ));
return _bcg ,false ;};_bcg =append (_bcg ,_ee );_dd +=_afdg ;};return _bcg ,true ;};func (_bf *CIDSystemInfo )String ()string {return _a .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_bf .Registry ,_bf .Ordering ,_bf .Supplement );
};func (cmap *CMap )matchCode (_cdf []byte )(_aa CharCode ,_fde int ,_ede bool ){for _gag :=0;_gag < _fa ;_gag ++{if _gag < len (_cdf ){_aa =_aa <<8|CharCode (_cdf [_gag ]);_fde ++;};_ede =cmap .inCodespace (_aa ,_gag +1);if _ede {return _aa ,_fde ,true ;
};};_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_cdf ,string (_cdf ),cmap );
return 0,0,false ;};const (_ae =100;_faec ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_abg ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func _aae (_agef cmapHexString )[]rune {if len (_agef ._edddb )==1{return []rune {rune (_agef ._edddb [0])};};_fffd :=_agef ._edddb ;if len (_fffd )%2!=0{_fffd =append (_fffd ,0);_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_agef ,_fffd );
};_cbdd :=len (_fffd )>>1;_bcgg :=make ([]uint16 ,_cbdd );for _gegf :=0;_gegf < _cbdd ;_gegf ++{_bcgg [_gegf ]=uint16 (_fffd [_gegf <<1])<<8+uint16 (_fffd [_gegf <<1+1]);};_edg :=_c .Decode (_bcgg );return _edg ;};type cmapOperand struct{Operand string ;
};const (_aca ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_dfdg ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_abac ="\u0065n\u0064\u0063\u006d\u0061\u0070";_abcf ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_efaa ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_dfe ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_dfab ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_gga ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_efe ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_baee ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_abgd ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_bcb ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_dae ="\u0057\u004d\u006fd\u0065";_caac ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_bcff ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_gcdcg ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _bdg ,_fbfb :=cmap ._ac [code ];
_fbfb {return _bdg ,true ;};return MissingCodeString ,false ;};func (_ecd *cMapParser )parseArray ()(cmapArray ,error ){_gba :=cmapArray {};_gba .Array =[]cmapObject {};_ecd ._ggg .ReadByte ();for {_ecd .skipSpaces ();_cge ,_dcda :=_ecd ._ggg .Peek (1);
if _dcda !=nil {return _gba ,_dcda ;};if _cge [0]==']'{_ecd ._ggg .ReadByte ();break ;};_gbbd ,_dcda :=_ecd .parseObject ();if _dcda !=nil {return _gba ,_dcda ;};_gba .Array =append (_gba .Array ,_gbbd );};return _gba ,nil ;};type cmapFloat struct{_baba float64 };
func (cmap *CMap )toBfData ()string {if len (cmap ._ac )==0{return "";};_aga :=make ([]CharCode ,0,len (cmap ._ac ));for _ccg :=range cmap ._ac {_aga =append (_aga ,_ccg );};_af .Slice (_aga ,func (_eef ,_cbb int )bool {return _aga [_eef ]< _aga [_cbb ]});
var _dde []charRange ;_bcc :=charRange {_aga [0],_aga [0]};_adgf :=cmap ._ac [_aga [0]];for _ ,_dgc :=range _aga [1:]{_eab :=cmap ._ac [_dgc ];if _dgc ==_bcc ._eb +1&&_bce (_eab )==_bce (_adgf )+1{_bcc ._eb =_dgc ;}else {_dde =append (_dde ,_bcc );_bcc ._adf ,_bcc ._eb =_dgc ,_dgc ;
};_adgf =_eab ;};_dde =append (_dde ,_bcc );var _gfe []CharCode ;var _gea []fbRange ;for _ ,_bdaf :=range _dde {if _bdaf ._adf ==_bdaf ._eb {_gfe =append (_gfe ,_bdaf ._adf );}else {_gea =append (_gea ,fbRange {_bc :_bdaf ._adf ,_ce :_bdaf ._eb ,_eg :cmap ._ac [_bdaf ._adf ]});
};};_d .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_dde ),len (_gfe ),len (_gea ));var _eee []string ;if len (_gfe )> 0{_cfc :=(len (_gfe )+_ae -1)/_ae ;
for _acd :=0;_acd < _cfc ;_acd ++{_bdbc :=_ffdd (len (_gfe )-_acd *_ae ,_ae );_eee =append (_eee ,_a .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_bdbc ));for _egae :=0;_egae < _bdbc ;_egae ++{_cec :=_gfe [_acd *_ae +_egae ];
_egcf :=cmap ._ac [_cec ];_eee =append (_eee ,_a .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_cec ,_eac (_egcf )));};_eee =append (_eee ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_gea )> 0{_agbd :=(len (_gea )+_ae -1)/_ae ;
for _egd :=0;_egd < _agbd ;_egd ++{_gbe :=_ffdd (len (_gea )-_egd *_ae ,_ae );_eee =append (_eee ,_a .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_gbe ));for _be :=0;_be < _gbe ;_be ++{_df :=_gea [_egd *_ae +_be ];
_eee =append (_eee ,_a .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_df ._bc ,_df ._ce ,_eac (_df ._eg )));};_eee =append (_eee ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _f .Join (_eee ,"\u000a");
};func (cmap *CMap )parse ()error {var _gec cmapObject ;for {_caa ,_ddb :=cmap .parseObject ();if _ddb !=nil {if _ddb ==_ba .EOF {break ;};_d .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_ddb );
return _ddb ;};switch _agc :=_caa .(type ){case cmapOperand :_bfce :=_agc ;switch _bfce .Operand {case _abcf :_cfcd :=cmap .parseCodespaceRange ();if _cfcd !=nil {return _cfcd ;};case _baee :_ffa :=cmap .parseCIDRange ();if _ffa !=nil {return _ffa ;};case _dfe :_eea :=cmap .parseBfchar ();
if _eea !=nil {return _eea ;};case _gga :_aab :=cmap .parseBfrange ();if _aab !=nil {return _aab ;};case _bcb :if _gec ==nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_eeg ,_eff :=_gec .(cmapName );if !_eff {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_gec );
return ErrBadCMap ;};cmap ._bg =_eeg .Name ;case _aca :_addc :=cmap .parseSystemInfo ();if _addc !=nil {return _addc ;};};case cmapName :_dff :=_agc ;switch _dff .Name {case _aca :_bea :=cmap .parseSystemInfo ();if _bea !=nil {return _bea ;};case _caac :_bac :=cmap .parseName ();
if _bac !=nil {return _bac ;};case _bcff :_bec :=cmap .parseType ();if _bec !=nil {return _bec ;};case _gcdcg :_gfae :=cmap .parseVersion ();if _gfae !=nil {return _gfae ;};case _dae :if _ddb =cmap .parseWMode ();_ddb !=nil {return _ddb ;};};};_gec =_caa ;
};return nil ;};func _ebc (_agbc cmapHexString )rune {_aggf :=_aae (_agbc );if _effg :=len (_aggf );_effg ==0{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_agbc );
return MissingCodeRune ;};if len (_aggf )> 1{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_agbc ,_aggf );
};return _aggf [0];};type CMap struct{*cMapParser ;_ca string ;_fab int ;_gcf int ;_dc string ;_bg string ;_ag CIDSystemInfo ;_cea []Codespace ;_dg map[CharCode ]CharCode ;_bfc map[CharCode ]CharCode ;_ac map[CharCode ]string ;_ef map[string ]CharCode ;
_ge []byte ;_ccb *_gd .PdfObjectStream ;_ea integer ;};func (cmap *CMap )parseBfrange ()error {for {var _ecg CharCode ;_bag ,_afg :=cmap .parseObject ();if _afg !=nil {if _afg ==_ba .EOF {break ;};return _afg ;};switch _baa :=_bag .(type ){case cmapOperand :if _baa .Operand ==_efe {return nil ;
};return _cb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_ecg =_aegc (_baa );default:return _cb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _bedd CharCode ;_bag ,_afg =cmap .parseObject ();if _afg !=nil {if _afg ==_ba .EOF {break ;};return _afg ;};switch _aaa :=_bag .(type ){case cmapOperand :_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_bedd =_aegc (_aaa );if _bedd > 0xffff{_bedd =0xffff;};default:_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_bag );return ErrBadCMap ;
};_bag ,_afg =cmap .parseObject ();if _afg !=nil {if _afg ==_ba .EOF {break ;};return _afg ;};switch _cfa :=_bag .(type ){case cmapArray :if len (_cfa .Array )!=int (_bedd -_ecg )+1{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _gcdc :=_ecg ;_gcdc <=_bedd ;_gcdc ++{_bbd :=_cfa .Array [_gcdc -_ecg ];_ccf ,_abgb :=_bbd .(cmapHexString );if !_abgb {return _cb .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_dfc :=_aae (_ccf );cmap ._ac [_gcdc ]=string (_dfc );};case cmapHexString :_fgge :=_aae (_cfa );_dac :=len (_fgge );for _aed :=_ecg ;_aed <=_bedd ;_aed ++{cmap ._ac [_aed ]=string (_fgge );if _dac > 0{_fgge [_dac -1]++;}else {_d .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_aed );
};if _aed ==1<<32-1{break ;};};default:_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_bag );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_daf ,_bfed :=cmap ._dg [code ];
return _daf ,_bfed ;};type cmapInt struct{_ebe int64 };func NewCIDSystemInfo (obj _gd .PdfObject )(_da CIDSystemInfo ,_fg error ){_bd ,_gc :=_gd .GetDict (obj );if !_gc {return CIDSystemInfo {},_gd .ErrTypeError ;};_bdc ,_gc :=_gd .GetStringVal (_bd .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_gc {return CIDSystemInfo {},_gd .ErrTypeError ;};_ff ,_gc :=_gd .GetStringVal (_bd .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_gc {return CIDSystemInfo {},_gd .ErrTypeError ;};_fff ,_gc :=_gd .GetIntVal (_bd .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_gc {return CIDSystemInfo {},_gd .ErrTypeError ;};return CIDSystemInfo {Registry :_bdc ,Ordering :_ff ,Supplement :_fff },nil ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (_efg *cMapParser )parseNumber ()(cmapObject ,error ){_gdbd ,_cdfe :=_gd .ParseNumber (_efg ._ggg );
if _cdfe !=nil {return nil ,_cdfe ;};switch _cbf :=_gdbd .(type ){case *_gd .PdfObjectFloat :return cmapFloat {float64 (*_cbf )},nil ;case *_gd .PdfObjectInteger :return cmapInt {int64 (*_cbf )},nil ;};return nil ,_a .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_gdbd );
};func _bbb ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_bda ,_gab :=cmap ._ef [s ];return _bda ,_gab ;};func _bgd (_efd string )(*CMap ,error ){_bab ,_gf :=_ga .Asset (_efd );
if _gf !=nil {return nil ,_gf ;};return LoadCmapFromDataCID (_bab );};func _aegc (_geb cmapHexString )CharCode {_dee :=CharCode (0);for _ ,_dfg :=range _geb ._edddb {_dee <<=8;_dee |=CharCode (_dfg );};return _dee ;};func _age (_fcgg []byte )*cMapParser {_dbgf :=cMapParser {};
_fba :=_ad .NewBuffer (_fcgg );_dbgf ._ggg =_cc .NewReader (_fba );return &_dbgf ;};func (_ffda *cMapParser )skipSpaces ()(int ,error ){_agf :=0;for {_cde ,_gage :=_ffda ._ggg .Peek (1);if _gage !=nil {return 0,_gage ;};if _gd .IsWhiteSpace (_cde [0]){_ffda ._ggg .ReadByte ();
_agf ++;}else {break ;};};return _agf ,nil ;};type cmapArray struct{Array []cmapObject ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_fd :=_bgd (name );if _fd !=nil {return nil ,_fd ;};if cmap ._bg ==""{cmap .computeInverseMappings ();
return cmap ,nil ;};_ed ,_fd :=_bgd (cmap ._bg );if _fd !=nil {return nil ,_fd ;};for _dca ,_gce :=range _ed ._dg {if _ ,_geg :=cmap ._dg [_dca ];!_geg {cmap ._dg [_dca ]=_gce ;};};cmap ._cea =append (cmap ._cea ,_ed ._cea ...);cmap .computeInverseMappings ();
return cmap ,nil ;};func (_aedf *cMapParser )parseObject ()(cmapObject ,error ){_aedf .skipSpaces ();for {_fbeg ,_daa :=_aedf ._ggg .Peek (2);if _daa !=nil {return nil ,_daa ;};if _fbeg [0]=='%'{_aedf .parseComment ();_aedf .skipSpaces ();continue ;}else if _fbeg [0]=='/'{_gdb ,_dfb :=_aedf .parseName ();
return _gdb ,_dfb ;}else if _fbeg [0]=='('{_fdca ,_egb :=_aedf .parseString ();return _fdca ,_egb ;}else if _fbeg [0]=='['{_baf ,_feff :=_aedf .parseArray ();return _baf ,_feff ;}else if (_fbeg [0]=='<')&&(_fbeg [1]=='<'){_adda ,_gdgg :=_aedf .parseDict ();
return _adda ,_gdgg ;}else if _fbeg [0]=='<'{_egcfe ,_bbf :=_aedf .parseHexString ();return _egcfe ,_bbf ;}else if _gd .IsDecimalDigit (_fbeg [0])||(_fbeg [0]=='-'&&_gd .IsDecimalDigit (_fbeg [1])){_bdba ,_fece :=_aedf .parseNumber ();if _fece !=nil {return nil ,_fece ;
};return _bdba ,nil ;}else {_dgbe ,_edf :=_aedf .parseOperand ();if _edf !=nil {return nil ,_edf ;};return _dgbe ,nil ;};};};