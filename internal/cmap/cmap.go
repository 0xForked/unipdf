//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_ed "bufio";_b "bytes";_aa "encoding/hex";_g "errors";_d "fmt";_c "github.com/unidoc/unipdf/v3/common";_ad "github.com/unidoc/unipdf/v3/core";_ff "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_bf "io";_dc "sort";_ec "strconv";
_f "strings";_e "unicode/utf16";);func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_ffb ,_gb :=cmap .BytesToCharcodes (data );if !_gb {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_cd :=make ([]string ,len (_ffb ));var _bdg []CharCode ;for _gcc ,_ggf :=range _ffb {_cdb ,_bgf :=cmap ._cf [_ggf ];if !_bgf {_bdg =append (_bdg ,_ggf );_cdb =MissingCodeString ;};_cd [_gcc ]=_cdb ;};_fac :=_f .Join (_cd ,"");if len (_bdg )> 0{_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_ffb ,len (_bdg ),_bdg ,_fac ,cmap );
};return _fac ,len (_bdg );};func _gfac (_ccg cmapHexString )CharCode {_ggbe :=CharCode (0);for _ ,_dbef :=range _ccg ._cgc {_ggbe <<=8;_ggbe |=CharCode (_dbef );};return _ggbe ;};func (cmap *CMap )parseBfrange ()error {for {var _caaf CharCode ;_cee ,_cdf :=cmap .parseObject ();
if _cdf !=nil {if _cdf ==_bf .EOF {break ;};return _cdf ;};switch _gce :=_cee .(type ){case cmapOperand :if _gce .Operand ==_ggc {return nil ;};return _g .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_caaf =_gfac (_gce );default:return _g .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _agb CharCode ;_cee ,_cdf =cmap .parseObject ();if _cdf !=nil {if _cdf ==_bf .EOF {break ;};return _cdf ;
};switch _gbf :=_cee .(type ){case cmapOperand :_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");return ErrBadCMap ;
case cmapHexString :_agb =_gfac (_gbf );if _agb > 0xffff{_agb =0xffff;};default:_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cee );return ErrBadCMap ;};_cee ,_cdf =cmap .parseObject ();
if _cdf !=nil {if _cdf ==_bf .EOF {break ;};return _cdf ;};switch _deg :=_cee .(type ){case cmapArray :if len (_deg .Array )!=int (_agb -_caaf )+1{_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _fec :=_caaf ;_fec <=_agb ;_fec ++{_beg :=_deg .Array [_fec -_caaf ];_efa ,_fge :=_beg .(cmapHexString );if !_fge {return _g .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_ccb :=_fce (_efa );cmap ._cf [_fec ]=string (_ccb );};case cmapHexString :_begg :=_fce (_deg );_cae :=len (_begg );for _egd :=_caaf ;_egd <=_agb ;_egd ++{cmap ._cf [_egd ]=string (_begg );if _cae > 0{_begg [_cae -1]++;}else {_c .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_egd );
};if _egd ==1<<32-1{break ;};};default:_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cee );return ErrBadCMap ;};};return nil ;};const (_gee =100;_dfe ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_ceac ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (cmap *CMap )Bytes ()[]byte {_c .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._af )> 0{return cmap ._af ;};cmap ._af =[]byte (_f .Join ([]string {_dfe ,cmap .toBfData (),_ceac },"\u000a"));
return cmap ._af ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._cgg ._dceb ,cmap ._cgg ._gdc };type integer struct{_gdc bool ;_dceb int ;};type cmapObject interface{};type charRange struct{_ca CharCode ;_fb CharCode ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _db ,_df :=cmap ._cf [code ];
_df {return _db ,true ;};return MissingCodeString ,false ;};func (cmap *CMap )Type ()int {return cmap ._adg };func _eg (_ae bool )*CMap {_bg :=16;if _ae {_bg =8;};return &CMap {_dcbe :_bg ,_bd :make (map[CharCode ]CharCode ),_ga :make (map[CharCode ]CharCode ),_cf :make (map[CharCode ]string ),_cb :make (map[string ]CharCode )};
};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_fa :=_be (name );if _fa !=nil {return nil ,_fa ;};if cmap ._fe ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_dg ,_fa :=_be (cmap ._fe );if _fa !=nil {return nil ,_fa ;};for _bcf ,_gae :=range _dg ._bd {if _ ,_fc :=cmap ._bd [_bcf ];
!_fc {cmap ._bd [_bcf ]=_gae ;};};cmap ._gda =append (cmap ._gda ,_dg ._gda ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseCodespaceRange ()error {for {_dfa ,_gge :=cmap .parseObject ();if _gge !=nil {if _gge ==_bf .EOF {break ;
};return _gge ;};_gfe ,_dbce :=_dfa .(cmapHexString );if !_dbce {if _edf ,_bae :=_dfa .(cmapOperand );_bae {if _edf .Operand ==_gdfe {return nil ;};return _g .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_dfa ,_gge =cmap .parseObject ();if _gge !=nil {if _gge ==_bf .EOF {break ;};return _gge ;};_aegf ,_dbce :=_dfa .(cmapHexString );if !_dbce {return _g .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_gfe ._cgc )!=len (_aegf ._cgc ){return _g .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_deed :=_gfac (_gfe );_acd :=_gfac (_aegf );if _acd < _deed {_c .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_deed ,_acd );
return ErrBadCMap ;};_eecc :=_aegf ._fgcc ;_dda :=Codespace {NumBytes :_eecc ,Low :_deed ,High :_acd };cmap ._gda =append (cmap ._gda ,_dda );_c .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_deed ,_acd );
};if len (cmap ._gda )==0{_c .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )parseCIDRange ()error {for {_cfdg ,_aee :=cmap .parseObject ();
if _aee !=nil {if _aee ==_bf .EOF {break ;};return _aee ;};_cfg ,_cege :=_cfdg .(cmapHexString );if !_cege {if _ebbe ,_cefc :=_cfdg .(cmapOperand );_cefc {if _ebbe .Operand ==_ebe {return nil ;};return _g .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_gfde :=_gfac (_cfg );_cfdg ,_aee =cmap .parseObject ();if _aee !=nil {if _aee ==_bf .EOF {break ;};return _aee ;};_daf ,_cege :=_cfdg .(cmapHexString );if !_cege {return _g .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_cfg ._cgc )!=len (_daf ._cgc ){return _g .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_ece :=_gfac (_daf );
if _gfde > _ece {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_gfde ,_ece );
return ErrBadCMap ;};_cfdg ,_aee =cmap .parseObject ();if _aee !=nil {if _aee ==_bf .EOF {break ;};return _aee ;};_gcdf ,_cege :=_cfdg .(cmapInt );if !_cege {return _g .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _gcdf ._dgfb < 0{return _g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_cefcg :=_gcdf ._dgfb ;for _gbb :=_gfde ;_gbb <=_ece ;_gbb ++{cmap ._bd [_gbb ]=CharCode (_cefcg );
_cefcg ++;};_c .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_gfde ,_ece ,_gcdf ._dgfb );};return nil ;};type CIDSystemInfo struct{Registry string ;
Ordering string ;Supplement int ;};func (cmap *CMap )inCodespace (_bcec CharCode ,_eec int )bool {for _ ,_edd :=range cmap ._gda {if _edd .Low <=_bcec &&_bcec <=_edd .High &&_eec ==_edd .NumBytes {return true ;};};return false ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_gcd ,_dcf :=cmap ._bd [code ];
return _gcd ,_dcf ;};type cmapDict struct{Dict map[string ]cmapObject ;};func (_fbe *cMapParser )parseOperand ()(cmapOperand ,error ){_facc :=cmapOperand {};_gacb :=_b .Buffer {};for {_ebf ,_ecba :=_fbe ._afdf .Peek (1);if _ecba !=nil {if _ecba ==_bf .EOF {break ;
};return _facc ,_ecba ;};if _ad .IsDelimiter (_ebf [0]){break ;};if _ad .IsWhiteSpace (_ebf [0]){break ;};_dgf ,_ :=_fbe ._afdf .ReadByte ();_gacb .WriteByte (_dgf );};if _gacb .Len ()==0{return _facc ,_d .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_facc .Operand =_gacb .String ();return _facc ,nil ;};func (_aga *cMapParser )parseObject ()(cmapObject ,error ){_aga .skipSpaces ();for {_baeg ,_efgg :=_aga ._afdf .Peek (2);if _efgg !=nil {return nil ,_efgg ;};if _baeg [0]=='%'{_aga .parseComment ();
_aga .skipSpaces ();continue ;}else if _baeg [0]=='/'{_bgef ,_gfa :=_aga .parseName ();return _bgef ,_gfa ;}else if _baeg [0]=='('{_degc ,_cdfa :=_aga .parseString ();return _degc ,_cdfa ;}else if _baeg [0]=='['{_edfa ,_agee :=_aga .parseArray ();return _edfa ,_agee ;
}else if (_baeg [0]=='<')&&(_baeg [1]=='<'){_dafe ,_ffa :=_aga .parseDict ();return _dafe ,_ffa ;}else if _baeg [0]=='<'{_fda ,_cdc :=_aga .parseHexString ();return _fda ,_cdc ;}else if _ad .IsDecimalDigit (_baeg [0])||(_baeg [0]=='-'&&_ad .IsDecimalDigit (_baeg [1])){_aba ,_fad :=_aga .parseNumber ();
if _fad !=nil {return nil ,_fad ;};return _aba ,nil ;}else {_efgb ,_daa :=_aga .parseOperand ();if _daa !=nil {return nil ,_daa ;};return _efgb ,nil ;};};};type CharCode uint32 ;func (cmap *CMap )parseSystemInfo ()error {_cgb :=false ;_efdb :=false ;_febe :="";
_age :=false ;_ccdf :=CIDSystemInfo {};for _dggg :=0;_dggg < 50&&!_age ;_dggg ++{_fbb ,_fcc :=cmap .parseObject ();if _fcc !=nil {return _fcc ;};switch _dba :=_fbb .(type ){case cmapDict :_dgc :=_dba .Dict ;_agc ,_befg :=_dgc ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];
if !_befg {_c .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fba ,_befg :=_agc .(cmapString );if !_befg {_c .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_ccdf .Registry =_fba .String ;_agc ,_befg =_dgc ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_befg {_c .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_fba ,_befg =_agc .(cmapString );if !_befg {_c .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ccdf .Ordering =_fba .String ;
_ddef ,_befg :=_dgc ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_befg {_c .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;
};_ggfc ,_befg :=_ddef .(cmapInt );if !_befg {_c .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ccdf .Supplement =int (_ggfc ._dgfb );_age =true ;
case cmapOperand :switch _dba .Operand {case "\u0062\u0065\u0067i\u006e":_cgb =true ;case "\u0065\u006e\u0064":_age =true ;case "\u0064\u0065\u0066":_efdb =false ;};case cmapName :if _cgb {_febe =_dba .Name ;_efdb =true ;};case cmapString :if _efdb {switch _febe {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_ccdf .Registry =_dba .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_ccdf .Ordering =_dba .String ;};};case cmapInt :if _efdb {switch _febe {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_ccdf .Supplement =int (_dba ._dgfb );};};};};if !_age {_c .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._gf =_ccdf ;return nil ;};func _bbe (_efg []byte )*cMapParser {_bbag :=cMapParser {};_cbcd :=_b .NewBuffer (_efg );_bbag ._afdf =_ed .NewReader (_cbcd );return &_bbag ;};func (cmap *CMap )parseType ()error {_ffe :=0;_fea :=false ;
for _dgdb :=0;_dgdb < 3&&!_fea ;_dgdb ++{_dee ,_gbda :=cmap .parseObject ();if _gbda !=nil {return _gbda ;};switch _dea :=_dee .(type ){case cmapOperand :switch _dea .Operand {case "\u0064\u0065\u0066":_fea =true ;default:_c .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_dee );
return ErrBadCMap ;};case cmapInt :_ffe =int (_dea ._dgfb );};};cmap ._adg =_ffe ;return nil ;};func (cmap *CMap )Name ()string {return cmap ._cgd };func (cmap *CMap )computeInverseMappings (){for _gdf ,_egc :=range cmap ._bd {if _gc ,_bed :=cmap ._ga [_egc ];
!_bed ||(_bed &&_gc > _gdf ){cmap ._ga [_egc ]=_gdf ;};};for _ba ,_ebc :=range cmap ._cf {if _cgdf ,_edg :=cmap ._cb [_ebc ];!_edg ||(_edg &&_cgdf > _ba ){cmap ._cb [_ebc ]=_ba ;};};_dc .Slice (cmap ._gda ,func (_gac ,_fgf int )bool {return cmap ._gda [_gac ].Low < cmap ._gda [_fgf ].Low });
};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_c .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_eg (isSimple );cmap .cMapParser =_bbe (data );_ecc :=cmap .parse ();if _ecc !=nil {return nil ,_ecc ;};if len (cmap ._gda )==0{if cmap ._fe !=""{return cmap ,nil ;};_c .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func IsPredefinedCMap (name string )bool {return _ff .AssetExists (name )};type cmapInt struct{_dgfb int64 };type cmapFloat struct{_bad float64 };func (cmap *CMap )parseBfchar ()error {for {_cbe ,_acb :=cmap .parseObject ();
if _acb !=nil {if _acb ==_bf .EOF {break ;};return _acb ;};var _cgeb CharCode ;switch _bdgbf :=_cbe .(type ){case cmapOperand :if _bdgbf .Operand ==_ddb {return nil ;};return _g .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_cgeb =_gfac (_bdgbf );default:return _g .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_cbe ,_acb =cmap .parseObject ();if _acb !=nil {if _acb ==_bf .EOF {break ;};return _acb ;};var _gfc []rune ;
switch _eddf :=_cbe .(type ){case cmapOperand :if _eddf .Operand ==_ddb {return nil ;};_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_eddf );
return ErrBadCMap ;case cmapHexString :_gfc =_fce (_eddf );case cmapName :_c .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_eddf );_gfc =[]rune {MissingCodeRune };
default:_c .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_cbe );return ErrBadCMap ;};cmap ._cf [_cgeb ]=string (_gfc );};return nil ;};func (cmap *CMap )parseName ()error {_ffba :="";
_ecb :=false ;for _caag :=0;_caag < 20&&!_ecb ;_caag ++{_eccd ,_aced :=cmap .parseObject ();if _aced !=nil {return _aced ;};switch _cag :=_eccd .(type ){case cmapOperand :switch _cag .Operand {case "\u0064\u0065\u0066":_ecb =true ;default:_c .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_eccd ,_ffba );
if _ffba !=""{_ffba =_d .Sprintf ("\u0025\u0073\u0020%\u0073",_ffba ,_cag .Operand );};_c .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_ffba );
};case cmapName :_ffba =_cag .Name ;};};if !_ecb {_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._cgd =_ffba ;return nil ;};type cmapHexString struct{_fgcc int ;
_cgc []byte ;};type CMap struct{*cMapParser ;_cgd string ;_dcbe int ;_adg int ;_de string ;_fe string ;_gf CIDSystemInfo ;_gda []Codespace ;_bd map[CharCode ]CharCode ;_ga map[CharCode ]CharCode ;_cf map[CharCode ]string ;_cb map[string ]CharCode ;_af []byte ;
_bda *_ad .PdfObjectStream ;_cgg integer ;};func (_ecfe *cMapParser )skipSpaces ()(int ,error ){_fga :=0;for {_aaed ,_dae :=_ecfe ._afdf .Peek (1);if _dae !=nil {return 0,_dae ;};if _ad .IsWhiteSpace (_aaed [0]){_ecfe ._afdf .ReadByte ();_fga ++;}else {break ;
};};return _fga ,nil ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._gf };func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _ggb []CharCode ;if cmap ._dcbe ==8{for _ ,_efc :=range data {_ggb =append (_ggb ,CharCode (_efc ));
};return _ggb ,true ;};for _ee :=0;_ee < len (data );{_dgd ,_dcfd ,_bfb :=cmap .matchCode (data [_ee :]);if !_bfb {_c .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_ee ,data ,string (data ));
return _ggb ,false ;};_ggb =append (_ggb ,_dgd );_ee +=_dcfd ;};return _ggb ,true ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_dga ,_aed :=cmap ._ga [cid ];return _dga ,_aed ;};func _fca (_dfb string )string {_afd :=[]rune (_dfb );
_eea :=make ([]string ,len (_afd ));for _abc ,_adc :=range _afd {_eea [_abc ]=_d .Sprintf ("\u0025\u0030\u0034\u0078",_adc );};return _d .Sprintf ("\u003c\u0025\u0073\u003e",_f .Join (_eea ,""));};func (cmap *CMap )parseVersion ()error {_fgc :="";_beb :=false ;
for _bba :=0;_bba < 3&&!_beb ;_bba ++{_cfef ,_dca :=cmap .parseObject ();if _dca !=nil {return _dca ;};switch _gdb :=_cfef .(type ){case cmapOperand :switch _gdb .Operand {case "\u0064\u0065\u0066":_beb =true ;default:_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_cfef );
return ErrBadCMap ;};case cmapInt :_fgc =_d .Sprintf ("\u0025\u0064",_gdb ._dgfb );case cmapFloat :_fgc =_d .Sprintf ("\u0025\u0066",_gdb ._bad );case cmapString :_fgc =_gdb .String ;default:_c .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_cfef );
};};cmap ._de =_fgc ;return nil ;};const (_fgg ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_afeb ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_ecd ="\u0065n\u0064\u0063\u006d\u0061\u0070";_ageb ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_gdfe ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_baf ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_ddb ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_ggg ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_ggc ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_gec ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_ebe ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_bcee ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_faed ="\u0057\u004d\u006fd\u0065";_aab ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_cbee ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_fcfc ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func _ddba (_feccb cmapHexString )rune {_gccf :=_fce (_feccb );
if _ageea :=len (_gccf );_ageea ==0{_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_feccb );
return MissingCodeRune ;};if len (_gccf )> 1{_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_feccb ,_gccf );
};return _gccf [0];};const (_ecf =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )parse ()error {var _gaeg cmapObject ;for {_da ,_gacc :=cmap .parseObject ();if _gacc !=nil {if _gacc ==_bf .EOF {break ;};_c .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_gacc );
return _gacc ;};switch _gcdg :=_da .(type ){case cmapOperand :_aac :=_gcdg ;switch _aac .Operand {case _ageb :_adgg :=cmap .parseCodespaceRange ();if _adgg !=nil {return _adgg ;};case _gec :_fbc :=cmap .parseCIDRange ();if _fbc !=nil {return _fbc ;};case _baf :_cgdb :=cmap .parseBfchar ();
if _cgdb !=nil {return _cgdb ;};case _ggg :_afbg :=cmap .parseBfrange ();if _afbg !=nil {return _afbg ;};case _bcee :if _gaeg ==nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_aeg ,_fcae :=_gaeg .(cmapName );if !_fcae {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_gaeg );
return ErrBadCMap ;};cmap ._fe =_aeg .Name ;case _fgg :_ceacg :=cmap .parseSystemInfo ();if _ceacg !=nil {return _ceacg ;};};case cmapName :_geec :=_gcdg ;switch _geec .Name {case _fgg :_cgdd :=cmap .parseSystemInfo ();if _cgdd !=nil {return _cgdd ;};case _aab :_fgd :=cmap .parseName ();
if _fgd !=nil {return _fgd ;};case _cbee :_cbac :=cmap .parseType ();if _cbac !=nil {return _cbac ;};case _fcfc :_ggd :=cmap .parseVersion ();if _ggd !=nil {return _ggd ;};case _faed :if _gacc =cmap .parseWMode ();_gacc !=nil {return _gacc ;};};};_gaeg =_da ;
};return nil ;};func (_ebg *cMapParser )parseComment ()(string ,error ){var _fgab _b .Buffer ;_ ,_dcee :=_ebg .skipSpaces ();if _dcee !=nil {return _fgab .String (),_dcee ;};_cad :=true ;for {_abe ,_ffc :=_ebg ._afdf .Peek (1);if _ffc !=nil {_c .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_ffc );
return _fgab .String (),_ffc ;};if _cad &&_abe [0]!='%'{return _fgab .String (),ErrBadCMapComment ;};_cad =false ;if (_abe [0]!='\r')&&(_abe [0]!='\n'){_ege ,_ :=_ebg ._afdf .ReadByte ();_fgab .WriteByte (_ege );}else {break ;};};return _fgab .String (),nil ;
};func (_bag *cMapParser )parseName ()(cmapName ,error ){_gbe :="";_ebgd :=false ;for {_aegg ,_cgae :=_bag ._afdf .Peek (1);if _cgae ==_bf .EOF {break ;};if _cgae !=nil {return cmapName {_gbe },_cgae ;};if !_ebgd {if _aegg [0]=='/'{_ebgd =true ;_bag ._afdf .ReadByte ();
}else {_c .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_aegg ,_aegg );return cmapName {_gbe },_d .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_aegg [0]);
};}else {if _ad .IsWhiteSpace (_aegg [0]){break ;}else if (_aegg [0]=='/')||(_aegg [0]=='[')||(_aegg [0]=='(')||(_aegg [0]==']')||(_aegg [0]=='<')||(_aegg [0]=='>'){break ;}else if _aegg [0]=='#'{_ffdd ,_gecb :=_bag ._afdf .Peek (3);if _gecb !=nil {return cmapName {_gbe },_gecb ;
};_bag ._afdf .Discard (3);_edb ,_gecb :=_aa .DecodeString (string (_ffdd [1:3]));if _gecb !=nil {return cmapName {_gbe },_gecb ;};_gbe +=string (_edb );}else {_dcc ,_ :=_bag ._afdf .ReadByte ();_gbe +=string (_dcc );};};};return cmapName {_gbe },nil ;
};func (cmap *CMap )Stream ()(*_ad .PdfObjectStream ,error ){if cmap ._bda !=nil {return cmap ._bda ,nil ;};_adfd ,_ebb :=_ad .MakeStream (cmap .Bytes (),_ad .NewFlateEncoder ());if _ebb !=nil {return nil ,_ebb ;};cmap ._bda =_adfd ;return cmap ._bda ,nil ;
};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func _ddf (_gfb string )rune {_gbd :=[]rune (_gfb );return _gbd [len (_gbd )-1]};func NewCIDSystemInfo (obj _ad .PdfObject )(_cg CIDSystemInfo ,_ce error ){_cga ,_bfg :=_ad .GetDict (obj );
if !_bfg {return CIDSystemInfo {},_ad .ErrTypeError ;};_dcb ,_bfg :=_ad .GetStringVal (_cga .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_bfg {return CIDSystemInfo {},_ad .ErrTypeError ;};_bc ,_bfg :=_ad .GetStringVal (_cga .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));
if !_bfg {return CIDSystemInfo {},_ad .ErrTypeError ;};_gd ,_bfg :=_ad .GetIntVal (_cga .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_bfg {return CIDSystemInfo {},_ad .ErrTypeError ;};return CIDSystemInfo {Registry :_dcb ,Ordering :_bc ,Supplement :_gd },nil ;
};type cmapString struct{String string ;};var (ErrBadCMap =_g .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_g .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (_ggef *cMapParser )parseDict ()(cmapDict ,error ){_c .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_dcbg :=_bdf ();_acg ,_ :=_ggef ._afdf .ReadByte ();if _acg !='<'{return _dcbg ,ErrBadCMapDict ;};_acg ,_ =_ggef ._afdf .ReadByte ();if _acg !='<'{return _dcbg ,ErrBadCMapDict ;};for {_ggef .skipSpaces ();_gece ,_bbc :=_ggef ._afdf .Peek (2);if _bbc !=nil {return _dcbg ,_bbc ;
};if (_gece [0]=='>')&&(_gece [1]=='>'){_ggef ._afdf .ReadByte ();_ggef ._afdf .ReadByte ();break ;};_eab ,_bbc :=_ggef .parseName ();_c .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_eab .Name );if _bbc !=nil {_c .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_bbc );
return _dcbg ,_bbc ;};_ggef .skipSpaces ();_gaf ,_bbc :=_ggef .parseObject ();if _bbc !=nil {return _dcbg ,_bbc ;};_dcbg .Dict [_eab .Name ]=_gaf ;_ggef .skipSpaces ();_gece ,_bbc =_ggef ._afdf .Peek (3);if _bbc !=nil {return _dcbg ,_bbc ;};if string (_gece )=="\u0064\u0065\u0066"{_ggef ._afdf .Discard (3);
};};return _dcbg ,nil ;};func (_bede *cMapParser )parseString ()(cmapString ,error ){_bede ._afdf .ReadByte ();_eceb :=_b .Buffer {};_aaf :=1;for {_bgefc ,_ccda :=_bede ._afdf .Peek (1);if _ccda !=nil {return cmapString {_eceb .String ()},_ccda ;};if _bgefc [0]=='\\'{_bede ._afdf .ReadByte ();
_gfg ,_cagb :=_bede ._afdf .ReadByte ();if _cagb !=nil {return cmapString {_eceb .String ()},_cagb ;};if _ad .IsOctalDigit (_gfg ){_ceaa ,_dfbg :=_bede ._afdf .Peek (2);if _dfbg !=nil {return cmapString {_eceb .String ()},_dfbg ;};var _cefb []byte ;_cefb =append (_cefb ,_gfg );
for _ ,_ega :=range _ceaa {if _ad .IsOctalDigit (_ega ){_cefb =append (_cefb ,_ega );}else {break ;};};_bede ._afdf .Discard (len (_cefb )-1);_c .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_cefb );
_aegfc ,_dfbg :=_ec .ParseUint (string (_cefb ),8,32);if _dfbg !=nil {return cmapString {_eceb .String ()},_dfbg ;};_eceb .WriteByte (byte (_aegfc ));continue ;};switch _gfg {case 'n':_eceb .WriteByte ('\n');case 'r':_eceb .WriteByte ('\r');case 't':_eceb .WriteByte ('\t');
case 'b':_eceb .WriteByte ('\b');case 'f':_eceb .WriteByte ('\f');case '(':_eceb .WriteByte ('(');case ')':_eceb .WriteByte (')');case '\\':_eceb .WriteByte ('\\');};continue ;}else if _bgefc [0]=='('{_aaf ++;}else if _bgefc [0]==')'{_aaf --;if _aaf ==0{_bede ._afdf .ReadByte ();
break ;};};_ccf ,_ :=_bede ._afdf .ReadByte ();_eceb .WriteByte (_ccf );};return cmapString {_eceb .String ()},nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )parseWMode ()error {var _cfb int ;
_fcf :=false ;for _cge :=0;_cge < 3&&!_fcf ;_cge ++{_feb ,_dbc :=cmap .parseObject ();if _dbc !=nil {return _dbc ;};switch _fdg :=_feb .(type ){case cmapOperand :switch _fdg .Operand {case "\u0064\u0065\u0066":_fcf =true ;default:_c .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_feb );
return ErrBadCMap ;};case cmapInt :_cfb =int (_fdg ._dgfb );};};cmap ._cgg =integer {_gdc :true ,_dceb :_cfb };return nil ;};type cmapName struct{Name string ;};func _eccf (_aegb ,_ecab int )int {if _aegb < _ecab {return _aegb ;};return _ecab ;};type cMapParser struct{_afdf *_ed .Reader };
func (cmap *CMap )toBfData ()string {if len (cmap ._cf )==0{return "";};_ccd :=make ([]CharCode ,0,len (cmap ._cf ));for _dbe :=range cmap ._cf {_ccd =append (_ccd ,_dbe );};_dc .Slice (_ccd ,func (_dde ,_egb int )bool {return _ccd [_dde ]< _ccd [_egb ]});
var _cbb []charRange ;_ccc :=charRange {_ccd [0],_ccd [0]};_cbf :=cmap ._cf [_ccd [0]];for _ ,_dgg :=range _ccd [1:]{_ab :=cmap ._cf [_dgg ];if _dgg ==_ccc ._fb +1&&_ddf (_ab )==_ddf (_cbf )+1{_ccc ._fb =_dgg ;}else {_cbb =append (_cbb ,_ccc );_ccc ._ca ,_ccc ._fb =_dgg ,_dgg ;
};_cbf =_ab ;};_cbb =append (_cbb ,_ccc );var _abf []CharCode ;var _ede []fbRange ;for _ ,_bff :=range _cbb {if _bff ._ca ==_bff ._fb {_abf =append (_abf ,_bff ._ca );}else {_ede =append (_ede ,fbRange {_eb :_bff ._ca ,_ge :_bff ._fb ,_ef :cmap ._cf [_bff ._ca ]});
};};_c .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_cbb ),len (_abf ),len (_ede ));var _faea []string ;if len (_abf )> 0{_bcg :=(len (_abf )+_gee -1)/_gee ;
for _bddc :=0;_bddc < _bcg ;_bddc ++{_ace :=_eccf (len (_abf )-_bddc *_gee ,_gee );_faea =append (_faea ,_d .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_ace ));for _aae :=0;_aae < _ace ;_aae ++{_gea :=_abf [_bddc *_gee +_aae ];
_geg :=cmap ._cf [_gea ];_faea =append (_faea ,_d .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_gea ,_fca (_geg )));};_faea =append (_faea ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_ede )> 0{_cfda :=(len (_ede )+_gee -1)/_gee ;
for _bge :=0;_bge < _cfda ;_bge ++{_ea :=_eccf (len (_ede )-_bge *_gee ,_gee );_faea =append (_faea ,_d .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_ea ));for _adee :=0;_adee < _ea ;_adee ++{_dgaf :=_ede [_bge *_gee +_adee ];
_faea =append (_faea ,_d .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_dgaf ._eb ,_dgaf ._ge ,_fca (_dgaf ._ef )));};_faea =append (_faea ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};
};return _f .Join (_faea ,"\u000a");};func (cmap *CMap )NBits ()int {return cmap ._dcbe };type cmapOperand struct{Operand string ;};func _be (_efe string )(*CMap ,error ){_fdc ,_gg :=_ff .Asset (_efe );if _gg !=nil {return nil ,_gg ;};return LoadCmapFromDataCID (_fdc );
};func (_bb *CIDSystemInfo )String ()string {return _d .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_bb .Registry ,_bb .Ordering ,_bb .Supplement );};type fbRange struct{_eb CharCode ;_ge CharCode ;_ef string ;};func (_dbd *cMapParser )parseArray ()(cmapArray ,error ){_acc :=cmapArray {};
_acc .Array =[]cmapObject {};_dbd ._afdf .ReadByte ();for {_dbd .skipSpaces ();_abef ,_edee :=_dbd ._afdf .Peek (1);if _edee !=nil {return _acc ,_edee ;};if _abef [0]==']'{_dbd ._afdf .ReadByte ();break ;};_bfgc ,_edee :=_dbd .parseObject ();if _edee !=nil {return _acc ,_edee ;
};_acc .Array =append (_acc .Array ,_bfgc );};return _acc ,nil ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_ceg :=make (map[CharCode ]string ,len (codeToRune ));for _ecg ,_afb :=range codeToRune {_ceg [_ecg ]=string (_afb );};cmap :=&CMap {_cgd :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_adg :2,_dcbe :16,_gf :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_gda :[]Codespace {{Low :0,High :0xffff}},_cf :_ceg ,_cb :make (map[string ]CharCode ,len (codeToRune )),_bd :make (map[CharCode ]CharCode ,len (codeToRune )),_ga :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};type cmapArray struct{Array []cmapObject ;};func _bdf ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )matchCode (_bfbd []byte )(_ecfb CharCode ,_fde int ,_cba bool ){for _efd :=0;
_efd < _ecf ;_efd ++{if _efd < len (_bfbd ){_ecfb =_ecfb <<8|CharCode (_bfbd [_efd ]);_fde ++;};_cba =cmap .inCodespace (_ecfb ,_efd +1);if _cba {return _ecfb ,_fde ,true ;};};_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_bfbd ,string (_bfbd ),cmap );
return 0,0,false ;};func (_dge *cMapParser )parseHexString ()(cmapHexString ,error ){_dge ._afdf .ReadByte ();_cccg :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_bdga :=_b .Buffer {};
for {_dge .skipSpaces ();_afbf ,_afda :=_dge ._afdf .Peek (1);if _afda !=nil {return cmapHexString {},_afda ;};if _afbf [0]=='>'{_dge ._afdf .ReadByte ();break ;};_cac ,_ :=_dge ._afdf .ReadByte ();if _b .IndexByte (_cccg ,_cac )>=0{_bdga .WriteByte (_cac );
};};if _bdga .Len ()%2==1{_c .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_bdga .String ());_bdga .WriteByte ('0');};_deeg :=_bdga .Len ()/2;
_fecc ,_ :=_aa .DecodeString (_bdga .String ());return cmapHexString {_fgcc :_deeg ,_cgc :_fecc },nil ;};func (cmap *CMap )String ()string {_dce :=cmap ._gf ;_caf :=[]string {_d .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._dcbe ),_d .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._adg )};
if cmap ._de !=""{_caf =append (_caf ,_d .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._de ));};if cmap ._fe !=""{_caf =append (_caf ,_d .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._fe ));
};_caf =append (_caf ,_d .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_dce .String ()));if len (cmap ._gda )> 0{_caf =append (_caf ,_d .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._gda )));
};if len (cmap ._cf )> 0{_caf =append (_caf ,_d .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._cf )));};return _d .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._cgd ,_f .Join (_caf ,"\u0020"));
};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_caa ,_ade :=cmap ._cb [s ];return _caa ,_ade ;};func (_fdad *cMapParser )parseNumber ()(cmapObject ,error ){_ebbb ,_eac :=_ad .ParseNumber (_fdad ._afdf );if _eac !=nil {return nil ,_eac ;};
switch _fgfg :=_ebbb .(type ){case *_ad .PdfObjectFloat :return cmapFloat {float64 (*_fgfg )},nil ;case *_ad .PdfObjectInteger :return cmapInt {int64 (*_fgfg )},nil ;};return nil ,_d .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_ebbb );
};func _fce (_cdg cmapHexString )[]rune {if len (_cdg ._cgc )==1{return []rune {rune (_cdg ._cgc [0])};};_bec :=_cdg ._cgc ;if len (_bec )%2!=0{_bec =append (_bec ,0);_c .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_cdg ,_bec );
};_ecbf :=len (_bec )>>1;_ecbc :=make ([]uint16 ,_ecbf );for _aeb :=0;_aeb < _ecbf ;_aeb ++{_ecbc [_aeb ]=uint16 (_bec [_aeb <<1])<<8+uint16 (_bec [_aeb <<1+1]);};_gcg :=_e .Decode (_ecbc );return _gcg ;};