//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_aa "bufio";_a "bytes";_d "encoding/hex";_bcb "errors";_b "fmt";_ae "github.com/unidoc/unipdf/v3/common";_bca "github.com/unidoc/unipdf/v3/core";_fdd "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_e "io";_fd "sort";_bc "strconv";_gf "strings";_f "unicode/utf16";);type charRange struct{_ff CharCode ;_be CharCode ;};func _cadc (_fbea ,_eeec int )int {if _fbea < _eeec {return _fbea ;};return _eeec ;};type fbRange struct{_ac CharCode ;_eg CharCode ;_aag string ;};func (_dc *CIDSystemInfo )String ()string {return _b .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_dc .Registry ,_dc .Ordering ,_dc .Supplement );};func (cmap *CMap )parseBfrange ()error {for {var _efe CharCode ;_eega ,_cdd :=cmap .parseObject ();if _cdd !=nil {if _cdd ==_e .EOF {break ;};return _cdd ;};switch _dbae :=_eega .(type ){case cmapOperand :if _dbae .Operand ==_dbff {return nil ;};return _bcb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_efe =_bagd (_dbae );default:return _bcb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _aaf CharCode ;_eega ,_cdd =cmap .parseObject ();if _cdd !=nil {if _cdd ==_e .EOF {break ;};return _cdd ;};switch _agge :=_eega .(type ){case cmapOperand :_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006d\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");return ErrBadCMap ;case cmapHexString :_aaf =_bagd (_agge );default:_ae .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_eega );return ErrBadCMap ;};_eega ,_cdd =cmap .parseObject ();if _cdd !=nil {if _cdd ==_e .EOF {break ;};return _cdd ;};switch _cef :=_eega .(type ){case cmapArray :if len (_cef .Array )!=int (_aaf -_efe )+1{_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");return ErrBadCMap ;};for _fgcb :=_efe ;_fgcb <=_aaf ;_fgcb ++{_ggb :=_cef .Array [_fgcb -_efe ];_gae ,_egc :=_ggb .(cmapHexString );if !_egc {return _bcb .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");};_fbb :=_gaefc (_gae );cmap ._ffe [_fgcb ]=string (_fbb );};case cmapHexString :_fffd :=_gaefc (_cef );_aed :=len (_fffd );for _gaef :=_efe ;_gaef <=_aaf ;_gaef ++{cmap ._ffe [_gaef ]=string (_fffd );_fffd [_aed -1]++;};default:_ae .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_eega );return ErrBadCMap ;};};return nil ;};func (_eedg *cMapParser )parseDict ()(cmapDict ,error ){_ae .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_eac :=_ddg ();_adag ,_ :=_eedg ._ffa .ReadByte ();if _adag !='<'{return _eac ,ErrBadCMapDict ;};_adag ,_ =_eedg ._ffa .ReadByte ();if _adag !='<'{return _eac ,ErrBadCMapDict ;};for {_eedg .skipSpaces ();_bag ,_dcgg :=_eedg ._ffa .Peek (2);if _dcgg !=nil {return _eac ,_dcgg ;};if (_bag [0]=='>')&&(_bag [1]=='>'){_eedg ._ffa .ReadByte ();_eedg ._ffa .ReadByte ();break ;};_ddda ,_dcgg :=_eedg .parseName ();_ae .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_ddda .Name );if _dcgg !=nil {_ae .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_dcgg );return _eac ,_dcgg ;};_eedg .skipSpaces ();_gbdf ,_dcgg :=_eedg .parseObject ();if _dcgg !=nil {return _eac ,_dcgg ;};_eac .Dict [_ddda .Name ]=_gbdf ;_eedg .skipSpaces ();_bag ,_dcgg =_eedg ._ffa .Peek (3);if _dcgg !=nil {return _eac ,_dcgg ;};if string (_bag )=="\u0064\u0065\u0066"{_eedg ._ffa .Discard (3);};};return _eac ,nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )Type ()int {return cmap ._ed };func (cmap *CMap )parseType ()error {_ege :=0;_afda :=false ;for _bfcb :=0;_bfcb < 3&&!_afda ;_bfcb ++{_bafb ,_bef :=cmap .parseObject ();if _bef !=nil {return _bef ;};switch _de :=_bafb .(type ){case cmapOperand :switch _de .Operand {case "\u0064\u0065\u0066":_afda =true ;default:_ae .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_bafb );return ErrBadCMap ;};case cmapInt :_ege =int (_de ._efgd );};};cmap ._ed =_ege ;return nil ;};func _bagd (_babf cmapHexString )CharCode {_cc :=CharCode (0);for _ ,_bbeb :=range _babf ._efab {_cc <<=8;_cc |=CharCode (_bbeb );};return _cc ;};const (_gdb =100;_egg ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";_faa ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";);const (_eeee ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_gage ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_gbg ="\u0065n\u0064\u0063\u006d\u0061\u0070";_cfcb ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_dgc ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_cgd ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_dcf ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_dee ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_dbff ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_gfc ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_fea ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_cde ="\u0075s\u0065\u0063\u006d\u0061\u0070";_dac ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_ddd ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_aba ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )parseName ()error {_afa :="";_dcd :=false ;for _dag :=0;_dag < 20&&!_dcd ;_dag ++{_cbg ,_eaf :=cmap .parseObject ();if _eaf !=nil {return _eaf ;};switch _bcf :=_cbg .(type ){case cmapOperand :switch _bcf .Operand {case "\u0064\u0065\u0066":_dcd =true ;default:_ae .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_cbg ,_afa );if _afa !=""{_afa =_b .Sprintf ("\u0025\u0073\u0020%\u0073",_afa ,_bcf .Operand );};_ae .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_afa );};case cmapName :_afa =_bcf .Name ;};};if !_dcd {_ae .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._bf =_afa ;return nil ;};func (cmap *CMap )NBits ()int {return cmap ._ega };type CMap struct{*cMapParser ;_bf string ;_ega int ;_ed int ;_db string ;_cdc string ;_afe CIDSystemInfo ;_ce []Codespace ;_fcb map[CharCode ]CharCode ;_ec map[CharCode ]CharCode ;_ffe map[CharCode ]string ;_ecd map[string ]CharCode ;_aeb []byte ;_bfe *_bca .PdfObjectStream ;};func (cmap *CMap )parseCodespaceRange ()error {for {_eeg ,_gfa :=cmap .parseObject ();if _gfa !=nil {if _gfa ==_e .EOF {break ;};return _gfa ;};_dadb ,_dbac :=_eeg .(cmapHexString );if !_dbac {if _bcfc ,_cfbd :=_eeg .(cmapOperand );_cfbd {if _bcfc .Operand ==_dgc {return nil ;};return _bcb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_eeg ,_gfa =cmap .parseObject ();if _gfa !=nil {if _gfa ==_e .EOF {break ;};return _gfa ;};_geb ,_dbac :=_eeg .(cmapHexString );if !_dbac {return _bcb .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_dadb ._efab )!=len (_geb ._efab ){return _bcb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_bgg :=_bagd (_dadb );_eab :=_bagd (_geb );if _eab < _bgg {_ae .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_bgg ,_eab );return ErrBadCMap ;};_afag :=_geb ._ggef ;_fcbb :=Codespace {NumBytes :_afag ,Low :_bgg ,High :_eab };cmap ._ce =append (cmap ._ce ,_fcbb );_ae .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_bgg ,_eab );};if len (cmap ._ce )==0{_ae .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};type cmapArray struct{Array []cmapObject ;};func _ddg ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_cda :=_fddb (name );if _cda !=nil {return nil ,_cda ;};if cmap ._cdc ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_bg ,_cda :=_fddb (cmap ._cdc );if _cda !=nil {return nil ,_cda ;};for _gg ,_fe :=range _bg ._fcb {if _ ,_bbf :=cmap ._fcb [_gg ];!_bbf {cmap ._fcb [_gg ]=_fe ;};};for _ ,_beg :=range _bg ._ce {cmap ._ce =append (cmap ._ce ,_beg );};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseVersion ()error {_dfbd :="";_gab :=false ;for _bee :=0;_bee < 3&&!_gab ;_bee ++{_beac ,_aef :=cmap .parseObject ();if _aef !=nil {return _aef ;};switch _bbe :=_beac .(type ){case cmapOperand :switch _bbe .Operand {case "\u0064\u0065\u0066":_gab =true ;default:_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_beac );return ErrBadCMap ;};case cmapInt :_dfbd =_b .Sprintf ("\u0025\u0064",_bbe ._efgd );case cmapFloat :_dfbd =_b .Sprintf ("\u0025\u0066",_bbe ._gce );case cmapString :_dfbd =_bbe .String ;default:_ae .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_beac );};};cmap ._db =_dfbd ;return nil ;};func _ba (_ecf bool )*CMap {_cdb :=16;if _ecf {_cdb =8;};return &CMap {_ega :_cdb ,_fcb :make (map[CharCode ]CharCode ),_ec :make (map[CharCode ]CharCode ),_ffe :make (map[CharCode ]string ),_ecd :make (map[string ]CharCode )};};func (_fefa *cMapParser )parseArray ()(cmapArray ,error ){_eedd :=cmapArray {};_eedd .Array =[]cmapObject {};_fefa ._ffa .ReadByte ();for {_fefa .skipSpaces ();_fdee ,_gfcc :=_fefa ._ffa .Peek (1);if _gfcc !=nil {return _eedd ,_gfcc ;};if _fdee [0]==']'{_fefa ._ffa .ReadByte ();break ;};_dddf ,_gfcc :=_fefa .parseObject ();if _gfcc !=nil {return _eedd ,_gfcc ;};_eedd .Array =append (_eedd .Array ,_dddf );};return _eedd ,nil ;};func (cmap *CMap )Bytes ()[]byte {_ae .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._aeb )> 0{return cmap ._aeb ;};cmap ._aeb =[]byte (_gf .Join ([]string {_egg ,cmap .toBfData (),_faa },"\u000a"));return cmap ._aeb ;};func (cmap *CMap )parseBfchar ()error {for {_beda ,_debb :=cmap .parseObject ();if _debb !=nil {if _debb ==_e .EOF {break ;};return _debb ;};var _abb CharCode ;switch _bcec :=_beda .(type ){case cmapOperand :if _bcec .Operand ==_dcf {return nil ;};return _bcb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_abb =_bagd (_bcec );default:return _bcb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_beda ,_debb =cmap .parseObject ();if _debb !=nil {if _debb ==_e .EOF {break ;};return _debb ;};var _ddee []rune ;switch _abde :=_beda .(type ){case cmapOperand :if _abde .Operand ==_dcf {return nil ;};_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_abde );return ErrBadCMap ;case cmapHexString :_ddee =_gaefc (_abde );case cmapName :_ae .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_abde );_ddee =[]rune {MissingCodeRune };default:_ae .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_beda );return ErrBadCMap ;};cmap ._ffe [_abb ]=string (_ddee );};return nil ;};type CharCode uint32 ;func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_ae .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );cmap :=_ba (isSimple );cmap .cMapParser =_feed (data );_dd :=cmap .parse ();if _dd !=nil {return nil ,_dd ;};if len (cmap ._ce )==0{if cmap ._cdc !=""{return cmap ,nil ;};_ae .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parse ()error {var _dfg cmapObject ;for {_fac ,_bfg :=cmap .parseObject ();if _bfg !=nil {if _bfg ==_e .EOF {break ;};_ae .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_bfg );return _bfg ;};switch _dgae :=_fac .(type ){case cmapOperand :_fab :=_dgae ;switch _fab .Operand {case _cfcb :_cbc :=cmap .parseCodespaceRange ();if _cbc !=nil {return _cbc ;};case _gfc :_aff :=cmap .parseCIDRange ();if _aff !=nil {return _aff ;};case _cgd :_cga :=cmap .parseBfchar ();if _cga !=nil {return _cga ;};case _dee :_cac :=cmap .parseBfrange ();if _cac !=nil {return _cac ;};case _cde :if _dfg ==nil {_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_dbf ,_bceb :=_dfg .(cmapName );if !_bceb {_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_dfg );return ErrBadCMap ;};cmap ._cdc =_dbf .Name ;case _eeee :_bfgd :=cmap .parseSystemInfo ();if _bfgd !=nil {return _bfgd ;};};case cmapName :_cge :=_dgae ;switch _cge .Name {case _eeee :_bed :=cmap .parseSystemInfo ();if _bed !=nil {return _bed ;};case _dac :_fba :=cmap .parseName ();if _fba !=nil {return _fba ;};case _ddd :_bcde :=cmap .parseType ();if _bcde !=nil {return _bcde ;};case _aba :_fccf :=cmap .parseVersion ();if _fccf !=nil {return _fccf ;};};};_dfg =_fac ;};return nil ;};func _cab (_dbaa string )rune {_gbf :=[]rune (_dbaa );return _gbf [len (_gbf )-1]};type cmapInt struct{_efgd int64 };func NewCIDSystemInfo (obj _bca .PdfObject )(_ag CIDSystemInfo ,_fc error ){_ef ,_af :=_bca .GetDict (obj );if !_af {return CIDSystemInfo {},_bca .ErrTypeError ;};_ad ,_af :=_bca .GetStringVal (_ef .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_af {return CIDSystemInfo {},_bca .ErrTypeError ;};_bb ,_af :=_bca .GetStringVal (_ef .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_af {return CIDSystemInfo {},_bca .ErrTypeError ;};_cd ,_af :=_bca .GetIntVal (_ef .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_af {return CIDSystemInfo {},_bca .ErrTypeError ;};return CIDSystemInfo {Registry :_ad ,Ordering :_bb ,Supplement :_cd },nil ;};func (_gge *cMapParser )parseHexString ()(cmapHexString ,error ){_gge ._ffa .ReadByte ();_fddbf :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_fcf :=_a .Buffer {};for {_gge .skipSpaces ();_bgfdd ,_dcfa :=_gge ._ffa .Peek (1);if _dcfa !=nil {return cmapHexString {},_dcfa ;};if _bgfdd [0]=='>'{_gge ._ffa .ReadByte ();break ;};_gfcg ,_ :=_gge ._ffa .ReadByte ();if _a .IndexByte (_fddbf ,_gfcg )>=0{_fcf .WriteByte (_gfcg );};};if _fcf .Len ()%2==1{_ae .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_fcf .String ());_fcf .WriteByte ('0');};_ade :=_fcf .Len ()/2;_baec ,_ :=_d .DecodeString (_fcf .String ());return cmapHexString {_ggef :_ade ,_efab :_baec },nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_cdf ,_cb :=cmap ._ecd [s ];return _cdf ,_cb };func (cmap *CMap )parseCIDRange ()error {for {_add ,_bdg :=cmap .parseObject ();if _bdg !=nil {if _bdg ==_e .EOF {break ;};return _bdg ;};_deb ,_agc :=_add .(cmapHexString );if !_agc {if _eec ,_baa :=_add .(cmapOperand );_baa {if _eec .Operand ==_fea {return nil ;};return _bcb .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_dcaa :=_bagd (_deb );_add ,_bdg =cmap .parseObject ();if _bdg !=nil {if _bdg ==_e .EOF {break ;};return _bdg ;};_adf ,_agc :=_add .(cmapHexString );if !_agc {return _bcb .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};if len (_deb ._efab )!=len (_adf ._efab ){return _bcb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_gde :=_bagd (_adf );if _dcaa > _gde {_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_dcaa ,_gde );return ErrBadCMap ;};_add ,_bdg =cmap .parseObject ();if _bdg !=nil {if _bdg ==_e .EOF {break ;};return _bdg ;};_bae ,_agc :=_add .(cmapInt );if !_agc {return _bcb .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _bae ._efgd < 0{return _bcb .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_eaa :=_bae ._efgd ;for _abd :=_dcaa ;_abd <=_gde ;_abd ++{cmap ._fcb [_abd ]=CharCode (_eaa );_eaa ++;};_ae .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_dcaa ,_gde ,_bae ._efgd );};return nil ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_bd ,_ca :=cmap .BytesToCharcodes (data );if !_ca {_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );return "",0;};_dbd :=make ([]string ,len (_bd ));var _aee []CharCode ;for _bda ,_bfa :=range _bd {_bbc ,_fee :=cmap ._ffe [_bfa ];if !_fee {_aee =append (_aee ,_bfa );_bbc =MissingCodeString ;};_dbd [_bda ]=_bbc ;};_bcd :=_gf .Join (_dbd ,"");if len (_aee )> 0{_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_bd ,len (_aee ),_aee ,_bcd ,cmap );};return _bcd ,len (_aee );};func (_gfd *cMapParser )parseString ()(cmapString ,error ){_gfd ._ffa .ReadByte ();_dafg :=_a .Buffer {};_aefa :=1;for {_eegb ,_aeac :=_gfd ._ffa .Peek (1);if _aeac !=nil {return cmapString {_dafg .String ()},_aeac ;};if _eegb [0]=='\\'{_gfd ._ffa .ReadByte ();_befb ,_bgfd :=_gfd ._ffa .ReadByte ();if _bgfd !=nil {return cmapString {_dafg .String ()},_bgfd ;};if _bca .IsOctalDigit (_befb ){_caag ,_fga :=_gfd ._ffa .Peek (2);if _fga !=nil {return cmapString {_dafg .String ()},_fga ;};var _bbgc []byte ;_bbgc =append (_bbgc ,_befb );for _ ,_faf :=range _caag {if _bca .IsOctalDigit (_faf ){_bbgc =append (_bbgc ,_faf );}else {break ;};};_gfd ._ffa .Discard (len (_bbgc )-1);_ae .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_bbgc );_aede ,_fga :=_bc .ParseUint (string (_bbgc ),8,32);if _fga !=nil {return cmapString {_dafg .String ()},_fga ;};_dafg .WriteByte (byte (_aede ));continue ;};switch _befb {case 'n':_dafg .WriteByte ('\n');case 'r':_dafg .WriteByte ('\r');case 't':_dafg .WriteByte ('\t');case 'b':_dafg .WriteByte ('\b');case 'f':_dafg .WriteByte ('\f');case '(':_dafg .WriteByte ('(');case ')':_dafg .WriteByte (')');case '\\':_dafg .WriteByte ('\\');};continue ;}else if _eegb [0]=='('{_aefa ++;}else if _eegb [0]==')'{_aefa --;if _aefa ==0{_gfd ._ffa .ReadByte ();break ;};};_gad ,_ :=_gfd ._ffa .ReadByte ();_dafg .WriteByte (_gad );};return cmapString {_dafg .String ()},nil ;};type cMapParser struct{_ffa *_aa .Reader };func IsPredefinedCMap (name string )bool {return _fdd .AssetExists (name )};type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_caa ,_dde :=cmap ._fcb [code ];return _caa ,_dde ;};func (_fag *cMapParser )skipSpaces ()(int ,error ){_cdbc :=0;for {_bcbc ,_abe :=_fag ._ffa .Peek (1);if _abe !=nil {return 0,_abe ;};if _bca .IsWhiteSpace (_bcbc [0]){_fag ._ffa .ReadByte ();_cdbc ++;}else {break ;};};return _cdbc ,nil ;};var (ErrBadCMap =_bcb .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_bcb .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_bcb .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_ffgb ,_fcc :=cmap ._ec [cid ];return _ffgb ,_fcc ;};func _ace (_fge string )string {_dca :=[]rune (_fge );_efa :=make ([]string ,len (_dca ));for _gd ,_cgb :=range _dca {_efa [_gd ]=_b .Sprintf ("\u0025\u0030\u0034\u0078",_cgb );};return _b .Sprintf ("\u003c\u0025\u0073\u003e",_gf .Join (_efa ,""));};func (cmap *CMap )computeInverseMappings (){for _dg ,_bff :=range cmap ._fcb {if _dge ,_fg :=cmap ._ec [_bff ];!_fg ||(_fg &&_dge > _dg ){cmap ._ec [_bff ]=_dg ;};};for _fb ,_dce :=range cmap ._ffe {if _fbc ,_eff :=cmap ._ecd [_dce ];!_eff ||(_eff &&_fbc > _fb ){cmap ._ecd [_dce ]=_fb ;};};_fd .Slice (cmap ._ce ,func (_bgf ,_ceb int )bool {return cmap ._ce [_bgf ].Low < cmap ._ce [_ceb ].Low });};type cmapOperand struct{Operand string ;};func (_egf *cMapParser )parseComment ()(string ,error ){var _ffgc _a .Buffer ;_ ,_cee :=_egf .skipSpaces ();if _cee !=nil {return _ffgc .String (),_cee ;};_egaf :=true ;for {_dcb ,_fef :=_egf ._ffa .Peek (1);if _fef !=nil {_ae .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_fef );return _ffgc .String (),_fef ;};if _egaf &&_dcb [0]!='%'{return _ffgc .String (),ErrBadCMapComment ;};_egaf =false ;if (_dcb [0]!='\r')&&(_dcb [0]!='\n'){_edad ,_ :=_egf ._ffa .ReadByte ();_ffgc .WriteByte (_edad );}else {break ;};};return _ffgc .String (),nil ;};func (_abdd *cMapParser )parseName ()(cmapName ,error ){_efg :="";_cgda :=false ;for {_edae ,_fgb :=_abdd ._ffa .Peek (1);if _fgb ==_e .EOF {break ;};if _fgb !=nil {return cmapName {_efg },_fgb ;};if !_cgda {if _edae [0]=='/'{_cgda =true ;_abdd ._ffa .ReadByte ();}else {_ae .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_edae ,_edae );return cmapName {_efg },_b .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_edae [0]);};}else {if _bca .IsWhiteSpace (_edae [0]){break ;}else if (_edae [0]=='/')||(_edae [0]=='[')||(_edae [0]=='(')||(_edae [0]==']')||(_edae [0]=='<')||(_edae [0]=='>'){break ;}else if _edae [0]=='#'{_bbb ,_aaga :=_abdd ._ffa .Peek (3);if _aaga !=nil {return cmapName {_efg },_aaga ;};_abdd ._ffa .Discard (3);_gaf ,_aaga :=_d .DecodeString (string (_bbb [1:3]));if _aaga !=nil {return cmapName {_efg },_aaga ;};_efg +=string (_gaf );}else {_bfb ,_ :=_abdd ._ffa .ReadByte ();_efg +=string (_bfb );};};};return cmapName {_efg },nil ;};func (cmap *CMap )Name ()string {return cmap ._bf };func (cmap *CMap )toBfData ()string {if len (cmap ._ffe )==0{return "";};_bcc :=make ([]CharCode ,0,len (cmap ._ffe ));for _bge :=range cmap ._ffe {_bcc =append (_bcc ,_bge );};_fd .Slice (_bcc ,func (_cfg ,_bad int )bool {return _bcc [_cfg ]< _bcc [_bad ]});var _ea []charRange ;_baf :=charRange {_bcc [0],_bcc [0]};_dbb :=cmap ._ffe [_bcc [0]];for _ ,_adc :=range _bcc [1:]{_bce :=cmap ._ffe [_adc ];if _adc ==_baf ._be +1&&_cab (_bce )==_cab (_dbb )+1{_baf ._be =_adc ;}else {_ea =append (_ea ,_baf );_baf ._ff ,_baf ._be =_adc ,_adc ;};_dbb =_bce ;};_ea =append (_ea ,_baf );var _becf []CharCode ;var _bab []fbRange ;for _ ,_dad :=range _ea {if _dad ._ff ==_dad ._be {_becf =append (_becf ,_dad ._ff );}else {_bab =append (_bab ,fbRange {_ac :_dad ._ff ,_eg :_dad ._be ,_aag :cmap ._ffe [_dad ._ff ]});};};_ae .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_ea ),len (_becf ),len (_bab ));var _acf []string ;if len (_becf )> 0{_cg :=(len (_becf )+_gdb -1)/_gdb ;for _gggd :=0;_gggd < _cg ;_gggd ++{_gef :=_cadc (len (_becf )-_gggd *_gdb ,_gdb );_acf =append (_acf ,_b .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_gef ));for _begg :=0;_begg < _gef ;_begg ++{_eed :=_becf [_gggd *_gdb +_begg ];_gcfe :=cmap ._ffe [_eed ];_acf =append (_acf ,_b .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_eed ,_ace (_gcfe )));};_acf =append (_acf ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_bab )> 0{_dbcg :=(len (_bab )+_gdb -1)/_gdb ;for _ede :=0;_ede < _dbcg ;_ede ++{_dcc :=_cadc (len (_bab )-_ede *_gdb ,_gdb );_acf =append (_acf ,_b .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_dcc ));for _gea :=0;_gea < _dcc ;_gea ++{_ddeg :=_bab [_ede *_gdb +_gea ];_acf =append (_acf ,_b .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_ddeg ._ac ,_ddeg ._eg ,_ace (_ddeg ._aag )));};_acf =append (_acf ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _gf .Join (_acf ,"\u000a");};type cmapFloat struct{_gce float64 };func _feed (_aad []byte )*cMapParser {_age :=cMapParser {};_cabd :=_a .NewBuffer (_aad );_age ._ffa =_aa .NewReader (_cabd );return &_age ;};type cmapName struct{Name string ;};type cmapHexString struct{_ggef int ;_efab []byte ;};func (cmap *CMap )Stream ()(*_bca .PdfObjectStream ,error ){if cmap ._bfe !=nil {return cmap ._bfe ,nil ;};_cbe ,_ab :=_bca .MakeStream (cmap .Bytes (),_bca .NewFlateEncoder ());if _ab !=nil {return nil ,_ab ;};cmap ._bfe =_cbe ;return cmap ._bfe ,nil ;};type cmapString struct{String string ;};type cmapObject interface{};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (cmap *CMap )inCodespace (_cfc CharCode ,_gca int )bool {for _ ,_cad :=range cmap ._ce {if _cad .Low <=_cfc &&_cfc <=_cad .High &&_gca ==_cad .NumBytes {return true ;};};return false ;};func (_eedf *cMapParser )parseOperand ()(cmapOperand ,error ){_edea :=cmapOperand {};_dgad :=_a .Buffer {};for {_gded ,_dgge :=_eedf ._ffa .Peek (1);if _dgge !=nil {if _dgge ==_e .EOF {break ;};return _edea ,_dgge ;};if _bca .IsDelimiter (_gded [0]){break ;};if _bca .IsWhiteSpace (_gded [0]){break ;};_bdaf ,_ :=_eedf ._ffa .ReadByte ();_dgad .WriteByte (_bdaf );};if _dgad .Len ()==0{return _edea ,_b .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_edea .Operand =_dgad .String ();return _edea ,nil ;};const (_c =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )parseSystemInfo ()error {_eeea :=false ;_fff :=false ;_fcbg :="";_edc :=false ;_cfb :=CIDSystemInfo {};for _bbg :=0;_bbg < 50&&!_edc ;_bbg ++{_befg ,_dae :=cmap .parseObject ();if _dae !=nil {return _dae ;};switch _ffc :=_befg .(type ){case cmapDict :_fdb :=_ffc .Dict ;_ebe ,_cedb :=_fdb ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_cedb {_ae .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ggf ,_cedb :=_ebe .(cmapString );if !_cedb {_ae .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cfb .Registry =_ggf .String ;_ebe ,_cedb =_fdb ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_cedb {_ae .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ggf ,_cedb =_ebe .(cmapString );if !_cedb {_ae .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cfb .Ordering =_ggf .String ;_eae ,_cedb :=_fdb ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_cedb {_ae .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gag ,_cedb :=_eae .(cmapInt );if !_cedb {_ae .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cfb .Supplement =int (_gag ._efgd );_edc =true ;case cmapOperand :switch _ffc .Operand {case "\u0062\u0065\u0067i\u006e":_eeea =true ;case "\u0065\u006e\u0064":_edc =true ;case "\u0064\u0065\u0066":_fff =false ;};case cmapName :if _eeea {_fcbg =_ffc .Name ;_fff =true ;};case cmapString :if _fff {switch _fcbg {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_cfb .Registry =_ffc .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_cfb .Ordering =_ffc .String ;};};case cmapInt :if _fff {switch _fcbg {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_cfb .Supplement =int (_ffc ._efgd );};};};};if !_edc {_ae .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");return ErrBadCMap ;};cmap ._afe =_cfb ;return nil ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _eb ,_cfa :=cmap ._ffe [code ];_cfa {return _eb ,true ;};return MissingCodeString ,false ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func _gaefc (_eecd cmapHexString )[]rune {if len (_eecd ._efab )==1{return []rune {rune (_eecd ._efab [0])};};_fbbe :=_eecd ._efab ;if len (_fbbe )%2!=0{_fbbe =append (_fbbe ,0);_ae .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_eecd ,_fbbe );};_bdd :=len (_fbbe )>>1;_bga :=make ([]uint16 ,_bdd );for _cddb :=0;_cddb < _bdd ;_cddb ++{_bga [_cddb ]=uint16 (_fbbe [_cddb <<1])<<8+uint16 (_fbbe [_cddb <<1+1]);};_fffa :=_f .Decode (_bga );return _fffa ;};func (cmap *CMap )matchCode (_dga []byte )(_dbc CharCode ,_ecfe int ,_gcf bool ){for _ga :=0;_ga < _c ;_ga ++{if _ga < len (_dga ){_dbc =_dbc <<8|CharCode (_dga [_ga ]);_ecfe ++;};_gcf =cmap .inCodespace (_dbc ,_ga +1);if _gcf {return _dbc ,_ecfe ,true ;};};_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_dga ,string (_dga ),cmap );return 0,0,false ;};func (_gdf *cMapParser )parseNumber ()(cmapObject ,error ){_aca ,_ffca :=_bca .ParseNumber (_gdf ._ffa );if _ffca !=nil {return nil ,_ffca ;};switch _fbe :=_aca .(type ){case *_bca .PdfObjectFloat :return cmapFloat {float64 (*_fbe )},nil ;case *_bca .PdfObjectInteger :return cmapInt {int64 (*_fbe )},nil ;};return nil ,_b .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_aca );};func _fddb (_ecb string )(*CMap ,error ){_cec ,_dcg :=_fdd .Asset (_ecb );if _dcg !=nil {return nil ,_dcg ;};return LoadCmapFromDataCID (_cec );};func (cmap *CMap )String ()string {_fgfa :=cmap ._afe ;_fgd :=[]string {_b .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ega ),_b .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._ed )};if cmap ._db !=""{_fgd =append (_fgd ,_b .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._db ));};if cmap ._cdc !=""{_fgd =append (_fgd ,_b .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._cdc ));};_fgd =append (_fgd ,_b .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_fgfa .String ()));if len (cmap ._ce )> 0{_fgd =append (_fgd ,_b .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._ce )));};if len (cmap ._ffe )> 0{_fgd =append (_fgd ,_b .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._ffe )));};return _b .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._bf ,_gf .Join (_fgd ,"\u0020"));};func _deg (_fgbb cmapHexString )rune {_fcd :=_gaefc (_fgbb );if _egdg :=len (_fcd );_egdg ==0{_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_fgbb );return MissingCodeRune ;};if len (_fcd )> 1{_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_fgbb ,_fcd );};return _fcd [0];};func (_beef *cMapParser )parseObject ()(cmapObject ,error ){_beef .skipSpaces ();for {_fec ,_fdde :=_beef ._ffa .Peek (2);if _fdde !=nil {return nil ,_fdde ;};if _fec [0]=='%'{_beef .parseComment ();_beef .skipSpaces ();continue ;}else if _fec [0]=='/'{_afaa ,_abg :=_beef .parseName ();return _afaa ,_abg ;}else if _fec [0]=='('{_afdd ,_eda :=_beef .parseString ();return _afdd ,_eda ;}else if _fec [0]=='['{_bba ,_gcaa :=_beef .parseArray ();return _bba ,_gcaa ;}else if (_fec [0]=='<')&&(_fec [1]=='<'){_dccd ,_aea :=_beef .parseDict ();return _dccd ,_aea ;}else if _fec [0]=='<'{_dab ,_cbgc :=_beef .parseHexString ();return _dab ,_cbgc ;}else if _bca .IsDecimalDigit (_fec [0])||(_fec [0]=='-'&&_bca .IsDecimalDigit (_fec [1])){_bbd ,_eecf :=_beef .parseNumber ();if _eecf !=nil {return nil ,_eecf ;};return _bbd ,nil ;}else {_cacc ,_ggc :=_beef .parseOperand ();if _ggc !=nil {return nil ,_ggc ;};return _cacc ,nil ;};};};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_ced :=make (map[CharCode ]string ,len (codeToRune ));for _ge ,_ee :=range codeToRune {_ced [_ge ]=string (_ee );};cmap :=&CMap {_bf :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_ed :2,_ega :16,_afe :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_ce :[]Codespace {{Low :0,High :0xffff}},_ffe :_ced ,_ecd :make (map[string ]CharCode ,len (codeToRune )),_fcb :make (map[CharCode ]CharCode ,len (codeToRune )),_ec :make (map[CharCode ]CharCode ,len (codeToRune ))};cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _ece []CharCode ;if cmap ._ega ==8{for _ ,_fgc :=range data {_ece =append (_ece ,CharCode (_fgc ));};return _ece ,true ;};for _dba :=0;_dba < len (data );{_bea ,_fcbd ,_bac :=cmap .matchCode (data [_dba :]);if !_bac {_ae .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_dba ,data ,string (data ));return _ece ,false ;};_ece =append (_ece ,_bea );_dba +=_fcbd ;};return _ece ,true ;};