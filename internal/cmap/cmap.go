//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_gf "bufio";_ag "bytes";_gd "encoding/hex";_gb "errors";_c "fmt";_d "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/core";_da "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_gdb "io";_cb "sort";_e "strconv";_cg "strings";_a "unicode/utf16";);func (cmap *CMap )Stream ()(*_b .PdfObjectStream ,error ){if cmap ._acab !=nil {return cmap ._acab ,nil ;};_fed ,_fga :=_b .MakeStream (cmap .Bytes (),_b .NewFlateEncoder ());if _fga !=nil {return nil ,_fga ;};cmap ._acab =_fed ;return cmap ._acab ,nil ;};func (cmap *CMap )parseType ()error {_gded :=0;_def :=false ;for _cffa :=0;_cffa < 3&&!_def ;_cffa ++{_aee ,_ffe :=cmap .parseObject ();if _ffe !=nil {return _ffe ;};switch _gdc :=_aee .(type ){case cmapOperand :switch _gdc .Operand {case "\u0064\u0065\u0066":_def =true ;default:_d .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_aee );return ErrBadCMap ;};case cmapInt :_gded =int (_gdc ._gddc );};};cmap ._aa =_gded ;return nil ;};func _db (_gdeg string )rune {_debc :=[]rune (_gdeg );return _debc [len (_debc )-1]};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_cff ,_fbg :=cmap .BytesToCharcodes (data );if !_fbg {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );return "",0;};_gde :=make ([]string ,len (_cff ));var _gdec []CharCode ;for _ga ,_cgd :=range _cff {_gcc ,_fec :=cmap ._cc [_cgd ];if !_fec {_gdec =append (_gdec ,_cgd );_gcc =MissingCodeString ;};_gde [_ga ]=_gcc ;};_bbe :=_cg .Join (_gde ,"");if len (_gdec )> 0{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_cff ,len (_gdec ),_gdec ,_bbe ,cmap );};return _bbe ,len (_gdec );};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_gfdc ,_dab :=cmap ._daa [code ];return _gfdc ,_dab ;};func (cmap *CMap )parseVersion ()error {_dcg :="";_bage :=false ;for _afd :=0;_afd < 3&&!_bage ;_afd ++{_ccb ,_abf :=cmap .parseObject ();if _abf !=nil {return _abf ;};switch _gdcc :=_ccb .(type ){case cmapOperand :switch _gdcc .Operand {case "\u0064\u0065\u0066":_bage =true ;default:_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_ccb );return ErrBadCMap ;};case cmapInt :_dcg =_c .Sprintf ("\u0025\u0064",_gdcc ._gddc );case cmapFloat :_dcg =_c .Sprintf ("\u0025\u0066",_gdcc ._afcac );case cmapString :_dcg =_gdcc .String ;default:_d .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_ccb );};};cmap ._egc =_dcg ;return nil ;};func (_fbbd *cMapParser )parseOperand ()(cmapOperand ,error ){_gff :=cmapOperand {};_ccaf :=_ag .Buffer {};for {_gdbd ,_abcc :=_fbbd ._abdg .Peek (1);if _abcc !=nil {if _abcc ==_gdb .EOF {break ;};return _gff ,_abcc ;};if _b .IsDelimiter (_gdbd [0]){break ;};if _b .IsWhiteSpace (_gdbd [0]){break ;};_ebf ,_ :=_fbbd ._abdg .ReadByte ();_ccaf .WriteByte (_ebf );};if _ccaf .Len ()==0{return _gff ,_c .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_gff .Operand =_ccaf .String ();return _gff ,nil ;};type cmapName struct{Name string ;};func (cmap *CMap )parse ()error {var _dce cmapObject ;for {_cbef ,_eag :=cmap .parseObject ();if _eag !=nil {if _eag ==_gdb .EOF {break ;};_d .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_eag );return _eag ;};switch _acg :=_cbef .(type ){case cmapOperand :_adbg :=_acg ;switch _adbg .Operand {case _cbbc :_fgaf :=cmap .parseCodespaceRange ();if _fgaf !=nil {return _fgaf ;};case _fge :_abd :=cmap .parseCIDRange ();if _abd !=nil {return _abd ;};case _dea :_bddc :=cmap .parseBfchar ();if _bddc !=nil {return _bddc ;};case _ebac :_fba :=cmap .parseBfrange ();if _fba !=nil {return _fba ;};case _bfg :if _dce ==nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_abg ,_be :=_dce .(cmapName );if !_be {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_dce );return ErrBadCMap ;};cmap ._gfg =_abg .Name ;case _dae :_gdd :=cmap .parseSystemInfo ();if _gdd !=nil {return _gdd ;};};case cmapName :_afa :=_acg ;switch _afa .Name {case _dae :_fgf :=cmap .parseSystemInfo ();if _fgf !=nil {return _fgf ;};case _dcgec :_cde :=cmap .parseName ();if _cde !=nil {return _cde ;};case _eafg :_bbb :=cmap .parseType ();if _bbb !=nil {return _bbb ;};case _ebb :_acc :=cmap .parseVersion ();if _acc !=nil {return _acc ;};};};_dce =_cbef ;};return nil ;};func (cmap *CMap )computeInverseMappings (){for _gbd ,_fe :=range cmap ._daa {if _gbe ,_gec :=cmap ._aca [_fe ];!_gec ||(_gec &&_gbe > _gbd ){cmap ._aca [_fe ]=_gbd ;};};for _cf ,_faa :=range cmap ._cc {if _fbb ,_edf :=cmap ._gfd [_faa ];!_edf ||(_edf &&_fbb > _cf ){cmap ._gfd [_faa ]=_cf ;};};_cb .Slice (cmap ._ee ,func (_fc ,_cbe int )bool {return cmap ._ee [_fc ].Low < cmap ._ee [_cbe ].Low });};type charRange struct{_ed CharCode ;_ea CharCode ;};func (cmap *CMap )parseCodespaceRange ()error {for {_ffc ,_ec :=cmap .parseObject ();if _ec !=nil {if _ec ==_gdb .EOF {break ;};return _ec ;};_adg ,_edab :=_ffc .(cmapHexString );if !_edab {if _fag ,_bcg :=_ffc .(cmapOperand );_bcg {if _fag .Operand ==_fgdg {return nil ;};return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_ffc ,_ec =cmap .parseObject ();if _ec !=nil {if _ec ==_gdb .EOF {break ;};return _ec ;};_eacg ,_edab :=_ffc .(cmapHexString );if !_edab {return _gb .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_adg ._gbaa )!=len (_eacg ._gbaa ){return _gb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_dac :=_abdab (_adg );_fcabe :=_abdab (_eacg );if _fcabe < _dac {_d .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_dac ,_fcabe );return ErrBadCMap ;};_dfeg :=_eacg ._eddc ;_aac :=Codespace {NumBytes :_dfeg ,Low :_dac ,High :_fcabe };cmap ._ee =append (cmap ._ee ,_aac );_d .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_dac ,_fcabe );};if len (cmap ._ee )==0{_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )Name ()string {return cmap ._dc };func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_ab :=_dcf (name );if _ab !=nil {return nil ,_ab ;};if cmap ._gfg ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_fa ,_ab :=_dcf (cmap ._gfg );if _ab !=nil {return nil ,_ab ;};for _ced ,_bbgg :=range _fa ._daa {if _ ,_ceg :=cmap ._daa [_ced ];!_ceg {cmap ._daa [_ced ]=_bbgg ;};};cmap ._ee =append (cmap ._ee ,_fa ._ee ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseCIDRange ()error {for {_ca ,_fce :=cmap .parseObject ();if _fce !=nil {if _fce ==_gdb .EOF {break ;};return _fce ;};_eba ,_dcge :=_ca .(cmapHexString );if !_dcge {if _eaf ,_caf :=_ca .(cmapOperand );_caf {if _eaf .Operand ==_dff {return nil ;};return _gb .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_dgac :=_abdab (_eba );_ca ,_fce =cmap .parseObject ();if _fce !=nil {if _fce ==_gdb .EOF {break ;};return _fce ;};_aga ,_dcge :=_ca .(cmapHexString );if !_dcge {return _gb .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};if len (_eba ._gbaa )!=len (_aga ._gbaa ){return _gb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_bef :=_abdab (_aga );if _dgac > _bef {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_dgac ,_bef );return ErrBadCMap ;};_ca ,_fce =cmap .parseObject ();if _fce !=nil {if _fce ==_gdb .EOF {break ;};return _fce ;};_gdbe ,_dcge :=_ca .(cmapInt );if !_dcge {return _gb .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _gdbe ._gddc < 0{return _gb .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_dbeg :=_gdbe ._gddc ;for _eacef :=_dgac ;_eacef <=_bef ;_eacef ++{cmap ._daa [_eacef ]=CharCode (_dbeg );_dbeg ++;};_d .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_dgac ,_bef ,_gdbe ._gddc );};return nil ;};type cmapInt struct{_gddc int64 };func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_d .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );cmap :=_bac (isSimple );cmap .cMapParser =_ggf (data );_bf :=cmap .parse ();if _bf !=nil {return nil ,_bf ;};if len (cmap ._ee )==0{if cmap ._gfg !=""{return cmap ,nil ;};_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _afb []CharCode ;if cmap ._gg ==8{for _ ,_aadd :=range data {_afb =append (_afb ,CharCode (_aadd ));};return _afb ,true ;};for _agb :=0;_agb < len (data );{_aed ,_badc ,_ebg :=cmap .matchCode (data [_agb :]);if !_ebg {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_agb ,data ,string (data ));return _afb ,false ;};_afb =append (_afb ,_aed );_agb +=_badc ;};return _afb ,true ;};func (cmap *CMap )parseName ()error {_dbcb :="";_ff :=false ;for _eace :=0;_eace < 20&&!_ff ;_eace ++{_cge ,_beb :=cmap .parseObject ();if _beb !=nil {return _beb ;};switch _ade :=_cge .(type ){case cmapOperand :switch _ade .Operand {case "\u0064\u0065\u0066":_ff =true ;default:_d .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_cge ,_dbcb );if _dbcb !=""{_dbcb =_c .Sprintf ("\u0025\u0073\u0020%\u0073",_dbcb ,_ade .Operand );};_d .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_dbcb );};case cmapName :_dbcb =_ade .Name ;};};if !_ff {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._dc =_dbcb ;return nil ;};func _edc (_adbe cmapHexString )rune {_fcfc :=_efd (_adbe );if _edb :=len (_fcfc );_edb ==0{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_adbe );return MissingCodeRune ;};if len (_fcfc )> 1{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_adbe ,_fcfc );};return _fcfc [0];};func (_aafg *cMapParser )parseComment ()(string ,error ){var _ggadc _ag .Buffer ;_ ,_eee :=_aafg .skipSpaces ();if _eee !=nil {return _ggadc .String (),_eee ;};_cafa :=true ;for {_gdgf ,_ggc :=_aafg ._abdg .Peek (1);if _ggc !=nil {_d .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_ggc );return _ggadc .String (),_ggc ;};if _cafa &&_gdgf [0]!='%'{return _ggadc .String (),ErrBadCMapComment ;};_cafa =false ;if (_gdgf [0]!='\r')&&(_gdgf [0]!='\n'){_cag ,_ :=_aafg ._abdg .ReadByte ();_ggadc .WriteByte (_cag );}else {break ;};};return _ggadc .String (),nil ;};func (_daf *CIDSystemInfo )String ()string {return _c .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_daf .Registry ,_daf .Ordering ,_daf .Supplement );};func (_efg *cMapParser )parseString ()(cmapString ,error ){_efg ._abdg .ReadByte ();_defc :=_ag .Buffer {};_badef :=1;for {_fbf ,_aafa :=_efg ._abdg .Peek (1);if _aafa !=nil {return cmapString {_defc .String ()},_aafa ;};if _fbf [0]=='\\'{_efg ._abdg .ReadByte ();_cgg ,_dced :=_efg ._abdg .ReadByte ();if _dced !=nil {return cmapString {_defc .String ()},_dced ;};if _b .IsOctalDigit (_cgg ){_cfb ,_aeed :=_efg ._abdg .Peek (2);if _aeed !=nil {return cmapString {_defc .String ()},_aeed ;};var _eaae []byte ;_eaae =append (_eaae ,_cgg );for _ ,_eaab :=range _cfb {if _b .IsOctalDigit (_eaab ){_eaae =append (_eaae ,_eaab );}else {break ;};};_efg ._abdg .Discard (len (_eaae )-1);_d .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_eaae );_agd ,_aeed :=_e .ParseUint (string (_eaae ),8,32);if _aeed !=nil {return cmapString {_defc .String ()},_aeed ;};_defc .WriteByte (byte (_agd ));continue ;};switch _cgg {case 'n':_defc .WriteByte ('\n');case 'r':_defc .WriteByte ('\r');case 't':_defc .WriteByte ('\t');case 'b':_defc .WriteByte ('\b');case 'f':_defc .WriteByte ('\f');case '(':_defc .WriteByte ('(');case ')':_defc .WriteByte (')');case '\\':_defc .WriteByte ('\\');};continue ;}else if _fbf [0]=='('{_badef ++;}else if _fbf [0]==')'{_badef --;if _badef ==0{_efg ._abdg .ReadByte ();break ;};};_bcb ,_ :=_efg ._abdg .ReadByte ();_defc .WriteByte (_bcb );};return cmapString {_defc .String ()},nil ;};func _bac (_aae bool )*CMap {_bbg :=16;if _aae {_bbg =8;};return &CMap {_gg :_bbg ,_daa :make (map[CharCode ]CharCode ),_aca :make (map[CharCode ]CharCode ),_cc :make (map[CharCode ]string ),_gfd :make (map[string ]CharCode )};};type cmapObject interface{};type cmapHexString struct{_eddc int ;_gbaa []byte ;};type CMap struct{*cMapParser ;_dc string ;_gg int ;_aa int ;_egc string ;_gfg string ;_ce CIDSystemInfo ;_ee []Codespace ;_daa map[CharCode ]CharCode ;_aca map[CharCode ]CharCode ;_cc map[CharCode ]string ;_gfd map[string ]CharCode ;_afc []byte ;_acab *_b .PdfObjectStream ;};type cmapArray struct{Array []cmapObject ;};func _dcf (_cegf string )(*CMap ,error ){_eac ,_ef :=_da .Asset (_cegf );if _ef !=nil {return nil ,_ef ;};return LoadCmapFromDataCID (_eac );};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};const (_dga =100;_bcf ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";_dbc ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";);func (_deag *cMapParser )parseName ()(cmapName ,error ){_adc :="";_eea :=false ;for {_ccg ,_cac :=_deag ._abdg .Peek (1);if _cac ==_gdb .EOF {break ;};if _cac !=nil {return cmapName {_adc },_cac ;};if !_eea {if _ccg [0]=='/'{_eea =true ;_deag ._abdg .ReadByte ();}else {_d .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_ccg ,_ccg );return cmapName {_adc },_c .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_ccg [0]);};}else {if _b .IsWhiteSpace (_ccg [0]){break ;}else if (_ccg [0]=='/')||(_ccg [0]=='[')||(_ccg [0]=='(')||(_ccg [0]==']')||(_ccg [0]=='<')||(_ccg [0]=='>'){break ;}else if _ccg [0]=='#'{_bddcd ,_edag :=_deag ._abdg .Peek (3);if _edag !=nil {return cmapName {_adc },_edag ;};_deag ._abdg .Discard (3);_abda ,_edag :=_gd .DecodeString (string (_bddcd [1:3]));if _edag !=nil {return cmapName {_adc },_edag ;};_adc +=string (_abda );}else {_abdb ,_ :=_deag ._abdg .ReadByte ();_adc +=string (_abdb );};};};return cmapName {_adc },nil ;};func NewCIDSystemInfo (obj _b .PdfObject )(_bb CIDSystemInfo ,_dd error ){_f ,_gc :=_b .GetDict (obj );if !_gc {return CIDSystemInfo {},_b .ErrTypeError ;};_edd ,_gc :=_b .GetStringVal (_f .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_gc {return CIDSystemInfo {},_b .ErrTypeError ;};_bbc ,_gc :=_b .GetStringVal (_f .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_gc {return CIDSystemInfo {},_b .ErrTypeError ;};_af ,_gc :=_b .GetIntVal (_f .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_gc {return CIDSystemInfo {},_b .ErrTypeError ;};return CIDSystemInfo {Registry :_edd ,Ordering :_bbc ,Supplement :_af },nil ;};type cMapParser struct{_abdg *_gf .Reader };func _abdab (_bdg cmapHexString )CharCode {_cfe :=CharCode (0);for _ ,_aeg :=range _bdg ._gbaa {_cfe <<=8;_cfe |=CharCode (_aeg );};return _cfe ;};func _ggf (_fee []byte )*cMapParser {_eec :=cMapParser {};_aaf :=_ag .NewBuffer (_fee );_eec ._abdg =_gf .NewReader (_aaf );return &_eec ;};func (cmap *CMap )parseBfchar ()error {for {_cecc ,_efb :=cmap .parseObject ();if _efb !=nil {if _efb ==_gdb .EOF {break ;};return _efb ;};var _cbd CharCode ;switch _gddb :=_cecc .(type ){case cmapOperand :if _gddb .Operand ==_eaa {return nil ;};return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_cbd =_abdab (_gddb );default:return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_cecc ,_efb =cmap .parseObject ();if _efb !=nil {if _efb ==_gdb .EOF {break ;};return _efb ;};var _bgfb []rune ;switch _ege :=_cecc .(type ){case cmapOperand :if _ege .Operand ==_eaa {return nil ;};_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_ege );return ErrBadCMap ;case cmapHexString :_bgfb =_efd (_ege );case cmapName :_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_ege );_bgfb =[]rune {MissingCodeRune };default:_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_cecc );return ErrBadCMap ;};cmap ._cc [_cbd ]=string (_bgfb );};return nil ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_dee :=make (map[CharCode ]string ,len (codeToRune ));for _ge ,_gge :=range codeToRune {_dee [_ge ]=string (_gge );};cmap :=&CMap {_dc :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_aa :2,_gg :16,_ce :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_ee :[]Codespace {{Low :0,High :0xffff}},_cc :_dee ,_gfd :make (map[string ]CharCode ,len (codeToRune )),_daa :make (map[CharCode ]CharCode ,len (codeToRune )),_aca :make (map[CharCode ]CharCode ,len (codeToRune ))};cmap .computeInverseMappings ();return cmap ;};func (_dfc *cMapParser )skipSpaces ()(int ,error ){_bfge :=0;for {_fcb ,_fcfd :=_dfc ._abdg .Peek (1);if _fcfd !=nil {return 0,_fcfd ;};if _b .IsWhiteSpace (_fcb [0]){_dfc ._abdg .ReadByte ();_bfge ++;}else {break ;};};return _bfge ,nil ;};var (ErrBadCMap =_gb .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_gb .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_gb .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (cmap *CMap )NBits ()int {return cmap ._gg };func (_bgd *cMapParser )parseArray ()(cmapArray ,error ){_bab :=cmapArray {};_bab .Array =[]cmapObject {};_bgd ._abdg .ReadByte ();for {_bgd .skipSpaces ();_dbf ,_aadg :=_bgd ._abdg .Peek (1);if _aadg !=nil {return _bab ,_aadg ;};if _dbf [0]==']'{_bgd ._abdg .ReadByte ();break ;};_gbfg ,_aadg :=_bgd .parseObject ();if _aadg !=nil {return _bab ,_aadg ;};_bab .Array =append (_bab .Array ,_gbfg );};return _bab ,nil ;};func _efd (_cae cmapHexString )[]rune {if len (_cae ._gbaa )==1{return []rune {rune (_cae ._gbaa [0])};};_ceaf :=_cae ._gbaa ;if len (_ceaf )%2!=0{_ceaf =append (_ceaf ,0);_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_cae ,_ceaf );};_ecg :=len (_ceaf )>>1;_afdf :=make ([]uint16 ,_ecg );for _agab :=0;_agab < _ecg ;_agab ++{_afdf [_agab ]=uint16 (_ceaf [_agab <<1])<<8+uint16 (_ceaf [_agab <<1+1]);};_bcc :=_a .Decode (_afdf );return _bcc ;};func (_ggag *cMapParser )parseDict ()(cmapDict ,error ){_d .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_bffd :=_daef ();_agg ,_ :=_ggag ._abdg .ReadByte ();if _agg !='<'{return _bffd ,ErrBadCMapDict ;};_agg ,_ =_ggag ._abdg .ReadByte ();if _agg !='<'{return _bffd ,ErrBadCMapDict ;};for {_ggag .skipSpaces ();_eef ,_eeae :=_ggag ._abdg .Peek (2);if _eeae !=nil {return _bffd ,_eeae ;};if (_eef [0]=='>')&&(_eef [1]=='>'){_ggag ._abdg .ReadByte ();_ggag ._abdg .ReadByte ();break ;};_dgef ,_eeae :=_ggag .parseName ();_d .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_dgef .Name );if _eeae !=nil {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_eeae );return _bffd ,_eeae ;};_ggag .skipSpaces ();_fgab ,_eeae :=_ggag .parseObject ();if _eeae !=nil {return _bffd ,_eeae ;};_bffd .Dict [_dgef .Name ]=_fgab ;_ggag .skipSpaces ();_eef ,_eeae =_ggag ._abdg .Peek (3);if _eeae !=nil {return _bffd ,_eeae ;};if string (_eef )=="\u0064\u0065\u0066"{_ggag ._abdg .Discard (3);};};return _bffd ,nil ;};type cmapFloat struct{_afcac float64 };type cmapDict struct{Dict map[string ]cmapObject ;};func (_deg *cMapParser )parseNumber ()(cmapObject ,error ){_bea ,_bfgd :=_b .ParseNumber (_deg ._abdg );if _bfgd !=nil {return nil ,_bfgd ;};switch _eed :=_bea .(type ){case *_b .PdfObjectFloat :return cmapFloat {float64 (*_eed )},nil ;case *_b .PdfObjectInteger :return cmapInt {int64 (*_eed )},nil ;};return nil ,_c .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bea );};const (_dae ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_gae ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_bff ="\u0065n\u0064\u0063\u006d\u0061\u0070";_cbbc ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_fgdg ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_dea ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_eaa ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_ebac ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_fcg ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_fge ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_dff ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_bfg ="\u0075s\u0065\u0063\u006d\u0061\u0070";_dcgec ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_eafg ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_ebb ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )inCodespace (_ddf CharCode ,_fgd int )bool {for _ ,_gbdf :=range cmap ._ee {if _gbdf .Low <=_ddf &&_ddf <=_gbdf .High &&_fgd ==_gbdf .NumBytes {return true ;};};return false ;};func (cmap *CMap )toBfData ()string {if len (cmap ._cc )==0{return "";};_ccc :=make ([]CharCode ,0,len (cmap ._cc ));for _bbcf :=range cmap ._cc {_ccc =append (_ccc ,_bbcf );};_cb .Slice (_ccc ,func (_cea ,_ad int )bool {return _ccc [_cea ]< _ccc [_ad ]});var _egda []charRange ;_cd :=charRange {_ccc [0],_ccc [0]};_ccd :=cmap ._cc [_ccc [0]];for _ ,_fd :=range _ccc [1:]{_gga :=cmap ._cc [_fd ];if _fd ==_cd ._ea +1&&_db (_gga )==_db (_ccd )+1{_cd ._ea =_fd ;}else {_egda =append (_egda ,_cd );_cd ._ed ,_cd ._ea =_fd ,_fd ;};_ccd =_gga ;};_egda =append (_egda ,_cd );var _fdg []CharCode ;var _bg []fbRange ;for _ ,_bgf :=range _egda {if _bgf ._ed ==_bgf ._ea {_fdg =append (_fdg ,_bgf ._ed );}else {_bg =append (_bg ,fbRange {_ac :_bgf ._ed ,_ba :_bgf ._ea ,_de :cmap ._cc [_bgf ._ed ]});};};_d .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_egda ),len (_fdg ),len (_bg ));var _bbeb []string ;if len (_fdg )> 0{_ggb :=(len (_fdg )+_dga -1)/_dga ;for _fbbb :=0;_fbbb < _ggb ;_fbbb ++{_fca :=_age (len (_fdg )-_fbbb *_dga ,_dga );_bbeb =append (_bbeb ,_c .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_fca ));for _dg :=0;_dg < _fca ;_dg ++{_baf :=_fdg [_fbbb *_dga +_dg ];_gdf :=cmap ._cc [_baf ];_bbeb =append (_bbeb ,_c .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_baf ,_ebd (_gdf )));};_bbeb =append (_bbeb ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_bg )> 0{_fcab :=(len (_bg )+_dga -1)/_dga ;for _cec :=0;_cec < _fcab ;_cec ++{_gbae :=_age (len (_bg )-_cec *_dga ,_dga );_bbeb =append (_bbeb ,_c .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_gbae ));for _aedg :=0;_aedg < _gbae ;_aedg ++{_dcb :=_bg [_cec *_dga +_aedg ];_bbeb =append (_bbeb ,_c .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_dcb ._ac ,_dcb ._ba ,_ebd (_dcb ._de )));};_bbeb =append (_bbeb ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _cg .Join (_bbeb ,"\u000a");};const (_eg =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););type cmapString struct{String string ;};func (cmap *CMap )matchCode (_bcd []byte )(_gca CharCode ,_ddgc int ,_afbg bool ){for _df :=0;_df < _eg ;_df ++{if _df < len (_bcd ){_gca =_gca <<8|CharCode (_bcd [_df ]);_ddgc ++;};_afbg =cmap .inCodespace (_gca ,_df +1);if _afbg {return _gca ,_ddgc ,true ;};};_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_bcd ,string (_bcd ),cmap );return 0,0,false ;};type fbRange struct{_ac CharCode ;_ba CharCode ;_de string ;};func _age (_efgd ,_cdc int )int {if _efgd < _cdc {return _efgd ;};return _cdc ;};func (cmap *CMap )Type ()int {return cmap ._aa };type cmapOperand struct{Operand string ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_fcf ,_deb :=cmap ._aca [cid ];return _fcf ,_deb ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_daad ,_bad :=cmap ._gfd [s ];return _daad ,_bad ;};func (_fdc *cMapParser )parseHexString ()(cmapHexString ,error ){_fdc ._abdg .ReadByte ();_aacd :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_cdee :=_ag .Buffer {};for {_fdc .skipSpaces ();_bagf ,_acge :=_fdc ._abdg .Peek (1);if _acge !=nil {return cmapHexString {},_acge ;};if _bagf [0]=='>'{_fdc ._abdg .ReadByte ();break ;};_dbaf ,_ :=_fdc ._abdg .ReadByte ();if _ag .IndexByte (_aacd ,_dbaf )>=0{_cdee .WriteByte (_dbaf );};};if _cdee .Len ()%2==1{_d .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_cdee .String ());_cdee .WriteByte ('0');};_ddfd :=_cdee .Len ()/2;_fda ,_ :=_gd .DecodeString (_cdee .String ());return cmapHexString {_eddc :_ddfd ,_gbaa :_fda },nil ;};func (cmap *CMap )parseSystemInfo ()error {_bdf :=false ;_bade :=false ;_fgdf :="";_cgeg :=false ;_dbe :=CIDSystemInfo {};for _bba :=0;_bba < 50&&!_cgeg ;_bba ++{_dbd ,_gce :=cmap .parseObject ();if _gce !=nil {return _gce ;};switch _ggea :=_dbd .(type ){case cmapDict :_dba :=_ggea .Dict ;_bdb ,_baded :=_dba ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_baded {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dcc ,_baded :=_bdb .(cmapString );if !_baded {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dbe .Registry =_dcc .String ;_bdb ,_baded =_dba ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_baded {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dcc ,_baded =_bdb .(cmapString );if !_baded {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dbe .Ordering =_dcc .String ;_agc ,_baded :=_dba ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_baded {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ggad ,_baded :=_agc .(cmapInt );if !_baded {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dbe .Supplement =int (_ggad ._gddc );_cgeg =true ;case cmapOperand :switch _ggea .Operand {case "\u0062\u0065\u0067i\u006e":_bdf =true ;case "\u0065\u006e\u0064":_cgeg =true ;case "\u0064\u0065\u0066":_bade =false ;};case cmapName :if _bdf {_fgdf =_ggea .Name ;_bade =true ;};case cmapString :if _bade {switch _fgdf {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_dbe .Registry =_ggea .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_dbe .Ordering =_ggea .String ;};};case cmapInt :if _bade {switch _fgdf {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_dbe .Supplement =int (_ggea ._gddc );};};};};if !_cgeg {_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");return ErrBadCMap ;};cmap ._ce =_dbe ;return nil ;};func (cmap *CMap )parseBfrange ()error {for {var _ebaf CharCode ;_ffg ,_fgfe :=cmap .parseObject ();if _fgfe !=nil {if _fgfe ==_gdb .EOF {break ;};return _fgfe ;};switch _acd :=_ffg .(type ){case cmapOperand :if _acd .Operand ==_fcg {return nil ;};return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_ebaf =_abdab (_acd );default:return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _cede CharCode ;_ffg ,_fgfe =cmap .parseObject ();if _fgfe !=nil {if _fgfe ==_gdb .EOF {break ;};return _fgfe ;};switch _bcgg :=_ffg .(type ){case cmapOperand :_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");return ErrBadCMap ;case cmapHexString :_cede =_abdab (_bcgg );default:_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_ffg );return ErrBadCMap ;};_ffg ,_fgfe =cmap .parseObject ();if _fgfe !=nil {if _fgfe ==_gdb .EOF {break ;};return _fgfe ;};switch _fac :=_ffg .(type ){case cmapArray :if len (_fac .Array )!=int (_cede -_ebaf )+1{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");return ErrBadCMap ;};for _defd :=_ebaf ;_defd <=_cede ;_defd ++{_gfdcb :=_fac .Array [_defd -_ebaf ];_faf ,_dbg :=_gfdcb .(cmapHexString );if !_dbg {return _gb .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");};_dafc :=_efd (_faf );cmap ._cc [_defd ]=string (_dafc );};case cmapHexString :_acb :=_efd (_fac );_cdf :=len (_acb );for _egdd :=_ebaf ;_egdd <=_cede ;_egdd ++{cmap ._cc [_egdd ]=string (_acb );if _cdf > 0{_acb [_cdf -1]++;}else {_d .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_egdd );};};default:_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_ffg );return ErrBadCMap ;};};return nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (_gbb *cMapParser )parseObject ()(cmapObject ,error ){_gbb .skipSpaces ();for {_abdf ,_dfb :=_gbb ._abdg .Peek (2);if _dfb !=nil {return nil ,_dfb ;};if _abdf [0]=='%'{_gbb .parseComment ();_gbb .skipSpaces ();continue ;}else if _abdf [0]=='/'{_abcf ,_egbb :=_gbb .parseName ();return _abcf ,_egbb ;}else if _abdf [0]=='('{_bed ,_cgc :=_gbb .parseString ();return _bed ,_cgc ;}else if _abdf [0]=='['{_ffee ,_gac :=_gbb .parseArray ();return _ffee ,_gac ;}else if (_abdf [0]=='<')&&(_abdf [1]=='<'){_abb ,_fad :=_gbb .parseDict ();return _abb ,_fad ;}else if _abdf [0]=='<'{_acbb ,_fde :=_gbb .parseHexString ();return _acbb ,_fde ;}else if _b .IsDecimalDigit (_abdf [0])||(_abdf [0]=='-'&&_b .IsDecimalDigit (_abdf [1])){_add ,_daab :=_gbb .parseNumber ();if _daab !=nil {return nil ,_daab ;};return _add ,nil ;}else {_cca ,_gecd :=_gbb .parseOperand ();if _gecd !=nil {return nil ,_gecd ;};return _cca ,nil ;};};};func (cmap *CMap )Bytes ()[]byte {_d .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._afc )> 0{return cmap ._afc ;};cmap ._afc =[]byte (_cg .Join ([]string {_bcf ,cmap .toBfData (),_dbc },"\u000a"));return cmap ._afc ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _bag ,_egf :=cmap ._cc [code ];_egf {return _bag ,true ;};return MissingCodeString ,false ;};func _ebd (_dge string )string {_gbee :=[]rune (_dge );_fbc :=make ([]string ,len (_gbee ));for _eda ,_dfe :=range _gbee {_fbc [_eda ]=_c .Sprintf ("\u0025\u0030\u0034\u0078",_dfe );};return _c .Sprintf ("\u003c\u0025\u0073\u003e",_cg .Join (_fbc ,""));};func _daef ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func IsPredefinedCMap (name string )bool {return _da .AssetExists (name )};type CharCode uint32 ;func (cmap *CMap )String ()string {_cbb :=cmap ._ce ;_ddg :=[]string {_c .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._gg ),_c .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._aa )};if cmap ._egc !=""{_ddg =append (_ddg ,_c .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._egc ));};if cmap ._gfg !=""{_ddg =append (_ddg ,_c .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._gfg ));};_ddg =append (_ddg ,_c .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_cbb .String ()));if len (cmap ._ee )> 0{_ddg =append (_ddg ,_c .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._ee )));};if len (cmap ._cc )> 0{_ddg =append (_ddg ,_c .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._cc )));};return _c .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._dc ,_cg .Join (_ddg ,"\u0020"));};