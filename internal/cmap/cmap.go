//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_f "bufio";_b "bytes";_cac "encoding/hex";_cd "errors";_ca "fmt";_d "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/core";_db "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_gb "io";_ad "sort";_g "strconv";
_ae "strings";_a "unicode/utf16";);func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_bcg ,_fdee :=cmap ._bfe [code ];return _bcg ,_fdee ;};func (cmap *CMap )inCodespace (_geg CharCode ,_efg int )bool {for _ ,_bbb :=range cmap ._fbb {if _bbb .Low <=_geg &&_geg <=_bbb .High &&_efg ==_bbb .NumBytes {return true ;
};};return false ;};func _def (_ecdc cmapHexString )CharCode {_gaed :=CharCode (0);for _ ,_gacf :=range _ecdc ._cbge {_gaed <<=8;_gaed |=CharCode (_gacf );};return _gaed ;};func (cmap *CMap )Bytes ()[]byte {_d .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._ega )> 0{return cmap ._ega ;};cmap ._ega =[]byte (_ae .Join ([]string {_gfe ,cmap .toBfData (),_gfbg },"\u000a"));return cmap ._ega ;};func (_bg *CIDSystemInfo )String ()string {return _ca .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_bg .Registry ,_bg .Ordering ,_bg .Supplement );
};func _caf (_aba string )(*CMap ,error ){_fbbc ,_dce :=_db .Asset (_aba );if _dce !=nil {return nil ,_dce ;};return LoadCmapFromDataCID (_fbbc );};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};type cmapArray struct{Array []cmapObject ;
};func (cmap *CMap )parseType ()error {_efb :=0;_ecg :=false ;for _egg :=0;_egg < 3&&!_ecg ;_egg ++{_edd ,_aaa :=cmap .parseObject ();if _aaa !=nil {return _aaa ;};switch _ag :=_edd .(type ){case cmapOperand :switch _ag .Operand {case "\u0064\u0065\u0066":_ecg =true ;
default:_d .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_edd );return ErrBadCMap ;};case cmapInt :_efb =int (_ag ._ebe );};
};cmap ._bc =_efb ;return nil ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_cae :=make (map[CharCode ]string ,len (codeToRune ));for _aac ,_da :=range codeToRune {_cae [_aac ]=string (_da );};cmap :=&CMap {_bf :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_bc :2,_dd :16,_fd :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_fbb :[]Codespace {{Low :0,High :0xffff}},_aa :_cae ,_af :make (map[string ]CharCode ,len (codeToRune )),_bfe :make (map[CharCode ]CharCode ,len (codeToRune )),_dbd :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};type cmapInt struct{_ebe int64 };func (_cef *cMapParser )parseComment ()(string ,error ){var _geag _b .Buffer ;_ ,_bda :=_cef .skipSpaces ();if _bda !=nil {return _geag .String (),_bda ;};_edgd :=true ;for {_gff ,_dfg :=_cef ._eeb .Peek (1);
if _dfg !=nil {_d .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_dfg );return _geag .String (),_dfg ;};if _edgd &&_gff [0]!='%'{return _geag .String (),ErrBadCMapComment ;};_edgd =false ;
if (_gff [0]!='\r')&&(_gff [0]!='\n'){_ebad ,_ :=_cef ._eeb .ReadByte ();_geag .WriteByte (_ebad );}else {break ;};};return _geag .String (),nil ;};func (cmap *CMap )matchCode (_bec []byte )(_abc CharCode ,_gad int ,_dfb bool ){for _bae :=0;_bae < _gba ;
_bae ++{if _bae < len (_bec ){_abc =_abc <<8|CharCode (_bec [_bae ]);_gad ++;};_dfb =cmap .inCodespace (_abc ,_bae +1);if _dfb {return _abc ,_gad ,true ;};};_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_bec ,string (_bec ),cmap );
return 0,0,false ;};func _cfa (_gaec ,_baff int )int {if _gaec < _baff {return _gaec ;};return _baff ;};func (_ebg *cMapParser )parseHexString ()(cmapHexString ,error ){_ebg ._eeb .ReadByte ();_cbfb :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_dfag :=_b .Buffer {};for {_ebg .skipSpaces ();_eecd ,_egb :=_ebg ._eeb .Peek (1);if _egb !=nil {return cmapHexString {},_egb ;};if _eecd [0]=='>'{_ebg ._eeb .ReadByte ();break ;};_bcfd ,_ :=_ebg ._eeb .ReadByte ();if _b .IndexByte (_cbfb ,_bcfd )>=0{_dfag .WriteByte (_bcfd );
};};if _dfag .Len ()%2==1{_d .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_dfag .String ());_dfag .WriteByte ('0');};_bffg :=_dfag .Len ()/2;
_ebc ,_ :=_cac .DecodeString (_dfag .String ());return cmapHexString {_edda :_bffg ,_cbge :_ebc },nil ;};func (cmap *CMap )parse ()error {var _baf cmapObject ;for {_dec ,_fgc :=cmap .parseObject ();if _fgc !=nil {if _fgc ==_gb .EOF {break ;};_d .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_fgc );
return _fgc ;};switch _cbf :=_dec .(type ){case cmapOperand :_cfc :=_cbf ;switch _cfc .Operand {case _cag :_dg :=cmap .parseCodespaceRange ();if _dg !=nil {return _dg ;};case _cbda :_dacf :=cmap .parseCIDRange ();if _dacf !=nil {return _dacf ;};case _eede :_dca :=cmap .parseBfchar ();
if _dca !=nil {return _dca ;};case _eae :_baad :=cmap .parseBfrange ();if _baad !=nil {return _baad ;};case _cgf :if _baf ==nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_acf ,_aae :=_baf .(cmapName );if !_aae {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_baf );
return ErrBadCMap ;};cmap ._fa =_acf .Name ;case _bdb :_bac :=cmap .parseSystemInfo ();if _bac !=nil {return _bac ;};};case cmapName :_ddee :=_cbf ;switch _ddee .Name {case _bdb :_cec :=cmap .parseSystemInfo ();if _cec !=nil {return _cec ;};case _face :_dff :=cmap .parseName ();
if _dff !=nil {return _dff ;};case _fad :_gc :=cmap .parseType ();if _gc !=nil {return _gc ;};case _gcg :_faed :=cmap .parseVersion ();if _faed !=nil {return _faed ;};case _ggg :if _fgc =cmap .parseWMode ();_fgc !=nil {return _fgc ;};};};_baf =_dec ;};
return nil ;};type cmapFloat struct{_bfa float64 };func (cmap *CMap )parseBfchar ()error {for {_efe ,_gead :=cmap .parseObject ();if _gead !=nil {if _gead ==_gb .EOF {break ;};return _gead ;};var _aagc CharCode ;switch _ecc :=_efe .(type ){case cmapOperand :if _ecc .Operand ==_cbba {return nil ;
};return _cd .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_aagc =_def (_ecc );default:return _cd .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_efe ,_gead =cmap .parseObject ();if _gead !=nil {if _gead ==_gb .EOF {break ;};return _gead ;};var _agd []rune ;switch _fcf :=_efe .(type ){case cmapOperand :if _fcf .Operand ==_cbba {return nil ;};_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_fcf );
return ErrBadCMap ;case cmapHexString :_agd =_gfbb (_fcf );case cmapName :_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_fcf );_agd =[]rune {MissingCodeRune };
default:_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_efe );return ErrBadCMap ;};cmap ._aa [_aagc ]=string (_agd );};return nil ;};const (_adeb =100;
_gfe ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_gfbg ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (cmap *CMap )computeInverseMappings (){for _ff ,_ef :=range cmap ._bfe {if _be ,_aage :=cmap ._dbd [_ef ];!_aage ||(_aage &&_be > _ff ){cmap ._dbd [_ef ]=_ff ;};};for _egf ,_bce :=range cmap ._aa {if _cdg ,_gd :=cmap ._af [_bce ];!_gd ||(_gd &&_cdg > _egf ){cmap ._af [_bce ]=_egf ;
};};_ad .Slice (cmap ._fbb ,func (_fbc ,_aec int )bool {return cmap ._fbb [_fbc ].Low < cmap ._fbb [_aec ].Low });};func IsPredefinedCMap (name string )bool {return _db .AssetExists (name )};type CMap struct{*cMapParser ;_bf string ;_dd int ;_bc int ;_ba string ;
_fa string ;_fd CIDSystemInfo ;_fbb []Codespace ;_bfe map[CharCode ]CharCode ;_dbd map[CharCode ]CharCode ;_aa map[CharCode ]string ;_af map[string ]CharCode ;_ega []byte ;_baa *_e .PdfObjectStream ;_ebb integer ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_ffg ,_dac :=cmap ._dbd [cid ];
return _ffg ,_dac ;};func (_ebgd *cMapParser )parseDict ()(cmapDict ,error ){_d .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_fgee :=_abdg ();_gef ,_ :=_ebgd ._eeb .ReadByte ();if _gef !='<'{return _fgee ,ErrBadCMapDict ;
};_gef ,_ =_ebgd ._eeb .ReadByte ();if _gef !='<'{return _fgee ,ErrBadCMapDict ;};for {_ebgd .skipSpaces ();_dbc ,_eedd :=_ebgd ._eeb .Peek (2);if _eedd !=nil {return _fgee ,_eedd ;};if (_dbc [0]=='>')&&(_dbc [1]=='>'){_ebgd ._eeb .ReadByte ();_ebgd ._eeb .ReadByte ();
break ;};_dffba ,_eedd :=_ebgd .parseName ();_d .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_dffba .Name );if _eedd !=nil {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_eedd );
return _fgee ,_eedd ;};_ebgd .skipSpaces ();_gacc ,_eedd :=_ebgd .parseObject ();if _eedd !=nil {return _fgee ,_eedd ;};_fgee .Dict [_dffba .Name ]=_gacc ;_ebgd .skipSpaces ();_dbc ,_eedd =_ebgd ._eeb .Peek (3);if _eedd !=nil {return _fgee ,_eedd ;};if string (_dbc )=="\u0064\u0065\u0066"{_ebgd ._eeb .Discard (3);
};};return _fgee ,nil ;};func (cmap *CMap )toBfData ()string {if len (cmap ._aa )==0{return "";};_bade :=make ([]CharCode ,0,len (cmap ._aa ));for _ebd :=range cmap ._aa {_bade =append (_bade ,_ebd );};_ad .Slice (_bade ,func (_ee ,_feb int )bool {return _bade [_ee ]< _bade [_feb ]});
var _fba []charRange ;_eec :=charRange {_bade [0],_bade [0]};_ebbf :=cmap ._aa [_bade [0]];for _ ,_abe :=range _bade [1:]{_eed :=cmap ._aa [_abe ];if _abe ==_eec ._ab +1&&_edb (_eed )==_edb (_ebbf )+1{_eec ._ab =_abe ;}else {_fba =append (_fba ,_eec );
_eec ._fb ,_eec ._ab =_abe ,_abe ;};_ebbf =_eed ;};_fba =append (_fba ,_eec );var _fae []CharCode ;var _cee []fbRange ;for _ ,_eaf :=range _fba {if _eaf ._fb ==_eaf ._ab {_fae =append (_fae ,_eaf ._fb );}else {_cee =append (_cee ,fbRange {_fe :_eaf ._fb ,_bd :_eaf ._ab ,_ga :cmap ._aa [_eaf ._fb ]});
};};_d .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_fba ),len (_fae ),len (_cee ));var _efc []string ;if len (_fae )> 0{_dcc :=(len (_fae )+_adeb -1)/_adeb ;
for _aca :=0;_aca < _dcc ;_aca ++{_bdd :=_cfa (len (_fae )-_aca *_adeb ,_adeb );_efc =append (_efc ,_ca .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_bdd ));for _ebbb :=0;_ebbb < _bdd ;_ebbb ++{_abce :=_fae [_aca *_adeb +_ebbb ];
_cbd :=cmap ._aa [_abce ];_efc =append (_efc ,_ca .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_abce ,_cg (_cbd )));};_efc =append (_efc ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_cee )> 0{_afd :=(len (_cee )+_adeb -1)/_adeb ;
for _gea :=0;_gea < _afd ;_gea ++{_eea :=_cfa (len (_cee )-_gea *_adeb ,_adeb );_efc =append (_efc ,_ca .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_eea ));for _aaf :=0;_aaf < _eea ;_aaf ++{_caa :=_cee [_gea *_adeb +_aaf ];
_efc =append (_efc ,_ca .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_caa ._fe ,_caa ._bd ,_cg (_caa ._ga )));};_efc =append (_efc ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _ae .Join (_efc ,"\u000a");
};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._fd };type integer struct{_ggd bool ;_fedg int ;};type fbRange struct{_fe CharCode ;_bd CharCode ;_ga string ;};func _fef (_aef bool )*CMap {_ec :=16;if _aef {_ec =8;};return &CMap {_dd :_ec ,_bfe :make (map[CharCode ]CharCode ),_dbd :make (map[CharCode ]CharCode ),_aa :make (map[CharCode ]string ),_af :make (map[string ]CharCode )};
};func _edb (_egd string )rune {_eafb :=[]rune (_egd );return _eafb [len (_eafb )-1]};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_d .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_fef (isSimple );cmap .cMapParser =_dda (data );_fde :=cmap .parse ();if _fde !=nil {return nil ,_fde ;};if len (cmap ._fbb )==0{if cmap ._fa !=""{return cmap ,nil ;};_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};type CharCode uint32 ;func (cmap *CMap )String ()string {_fec :=cmap ._fd ;_abf :=[]string {_ca .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._dd ),_ca .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._bc )};
if cmap ._ba !=""{_abf =append (_abf ,_ca .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._ba ));};if cmap ._fa !=""{_abf =append (_abf ,_ca .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._fa ));
};_abf =append (_abf ,_ca .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_fec .String ()));if len (cmap ._fbb )> 0{_abf =append (_abf ,_ca .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._fbb )));
};if len (cmap ._aa )> 0{_abf =append (_abf ,_ca .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._aa )));};return _ca .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._bf ,_ae .Join (_abf ,"\u0020"));
};func (cmap *CMap )parseSystemInfo ()error {_fcce :=false ;_aacg :=false ;_ddg :="";_fca :=false ;_gcb :=CIDSystemInfo {};for _fbce :=0;_fbce < 50&&!_fca ;_fbce ++{_cabf ,_ceeb :=cmap .parseObject ();if _ceeb !=nil {return _ceeb ;};switch _cafe :=_cabf .(type ){case cmapDict :_dgg :=_cafe .Dict ;
_dggb ,_dcb :=_dgg ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_dcb {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ccbf ,_dcb :=_dggb .(cmapString );
if !_dcb {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gcb .Registry =_ccbf .String ;_dggb ,_dcb =_dgg ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];
if !_dcb {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ccbf ,_dcb =_dggb .(cmapString );if !_dcb {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_gcb .Ordering =_ccbf .String ;_gae ,_dcb :=_dgg ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_dcb {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_ffc ,_dcb :=_gae .(cmapInt );if !_dcb {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gcb .Supplement =int (_ffc ._ebe );
_fca =true ;case cmapOperand :switch _cafe .Operand {case "\u0062\u0065\u0067i\u006e":_fcce =true ;case "\u0065\u006e\u0064":_fca =true ;case "\u0064\u0065\u0066":_aacg =false ;};case cmapName :if _fcce {_ddg =_cafe .Name ;_aacg =true ;};case cmapString :if _aacg {switch _ddg {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_gcb .Registry =_cafe .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_gcb .Ordering =_cafe .String ;};};case cmapInt :if _aacg {switch _ddg {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_gcb .Supplement =int (_cafe ._ebe );};};};};if !_fca {_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._fd =_gcb ;return nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _dde []CharCode ;if cmap ._dd ==8{for _ ,_aee :=range data {_dde =append (_dde ,CharCode (_aee ));};return _dde ,true ;};for _ed :=0;
_ed < len (data );{_fgf ,_gab ,_aeca :=cmap .matchCode (data [_ed :]);if !_aeca {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_ed ,data ,string (data ));
return _dde ,false ;};_dde =append (_dde ,_fgf );_ed +=_gab ;};return _dde ,true ;};type cMapParser struct{_eeb *_f .Reader };type cmapOperand struct{Operand string ;};func (_fea *cMapParser )parseNumber ()(cmapObject ,error ){_aggc ,_agb :=_e .ParseNumber (_fea ._eeb );
if _agb !=nil {return nil ,_agb ;};switch _gbf :=_aggc .(type ){case *_e .PdfObjectFloat :return cmapFloat {float64 (*_gbf )},nil ;case *_e .PdfObjectInteger :return cmapInt {int64 (*_gbf )},nil ;};return nil ,_ca .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_aggc );
};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (cmap *CMap )parseBfrange ()error {for {var _adg CharCode ;_agdc ,_daec :=cmap .parseObject ();if _daec !=nil {if _daec ==_gb .EOF {break ;};return _daec ;};switch _fbbf :=_agdc .(type ){case cmapOperand :if _fbbf .Operand ==_ggf {return nil ;
};return _cd .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_adg =_def (_fbbf );default:return _cd .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _abd CharCode ;_agdc ,_daec =cmap .parseObject ();if _daec !=nil {if _daec ==_gb .EOF {break ;};return _daec ;};switch _dga :=_agdc .(type ){case cmapOperand :_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_abd =_def (_dga );default:_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_agdc );return ErrBadCMap ;};_agdc ,_daec =cmap .parseObject ();
if _daec !=nil {if _daec ==_gb .EOF {break ;};return _daec ;};switch _ceg :=_agdc .(type ){case cmapArray :if len (_ceg .Array )!=int (_abd -_adg )+1{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _bfg :=_adg ;_bfg <=_abd ;_bfg ++{_ffa :=_ceg .Array [_bfg -_adg ];_febb ,_aeb :=_ffa .(cmapHexString );if !_aeb {return _cd .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_dcbe :=_gfbb (_febb );cmap ._aa [_bfg ]=string (_dcbe );};case cmapHexString :_dbdf :=_gfbb (_ceg );_ffab :=len (_dbdf );for _gaf :=_adg ;_gaf <=_abd ;_gaf ++{cmap ._aa [_gaf ]=string (_dbdf );if _ffab > 0{_dbdf [_ffab -1]++;}else {_d .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_gaf );
};};default:_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_agdc );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )parseCIDRange ()error {for {_edba ,_fddd :=cmap .parseObject ();
if _fddd !=nil {if _fddd ==_gb .EOF {break ;};return _fddd ;};_aggb ,_cad :=_edba .(cmapHexString );if !_cad {if _fcg ,_bceb :=_edba .(cmapOperand );_bceb {if _fcg .Operand ==_agf {return nil ;};return _cd .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_dae :=_def (_aggb );_edba ,_fddd =cmap .parseObject ();if _fddd !=nil {if _fddd ==_gb .EOF {break ;};return _fddd ;};_egaa ,_cad :=_edba .(cmapHexString );if !_cad {return _cd .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_aggb ._cbge )!=len (_egaa ._cbge ){return _cd .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_fded :=_def (_egaa );
if _dae > _fded {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_dae ,_fded );
return ErrBadCMap ;};_edba ,_fddd =cmap .parseObject ();if _fddd !=nil {if _fddd ==_gb .EOF {break ;};return _fddd ;};_cbg ,_cad :=_edba .(cmapInt );if !_cad {return _cd .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _cbg ._ebe < 0{return _cd .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_efa :=_cbg ._ebe ;for _gdg :=_dae ;_gdg <=_fded ;_gdg ++{cmap ._bfe [_gdg ]=CharCode (_efa );
_efa ++;};_d .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_dae ,_fded ,_cbg ._ebe );};return nil ;};func (_cbdd *cMapParser )parseString ()(cmapString ,error ){_cbdd ._eeb .ReadByte ();
_eedg :=_b .Buffer {};_aedb :=1;for {_ddgd ,_fbcg :=_cbdd ._eeb .Peek (1);if _fbcg !=nil {return cmapString {_eedg .String ()},_fbcg ;};if _ddgd [0]=='\\'{_cbdd ._eeb .ReadByte ();_bdbg ,_dffb :=_cbdd ._eeb .ReadByte ();if _dffb !=nil {return cmapString {_eedg .String ()},_dffb ;
};if _e .IsOctalDigit (_bdbg ){_gbg ,_baaa :=_cbdd ._eeb .Peek (2);if _baaa !=nil {return cmapString {_eedg .String ()},_baaa ;};var _ddab []byte ;_ddab =append (_ddab ,_bdbg );for _ ,_fee :=range _gbg {if _e .IsOctalDigit (_fee ){_ddab =append (_ddab ,_fee );
}else {break ;};};_cbdd ._eeb .Discard (len (_ddab )-1);_d .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_ddab );_gabe ,_baaa :=_g .ParseUint (string (_ddab ),8,32);if _baaa !=nil {return cmapString {_eedg .String ()},_baaa ;
};_eedg .WriteByte (byte (_gabe ));continue ;};switch _bdbg {case 'n':_eedg .WriteByte ('\n');case 'r':_eedg .WriteByte ('\r');case 't':_eedg .WriteByte ('\t');case 'b':_eedg .WriteByte ('\b');case 'f':_eedg .WriteByte ('\f');case '(':_eedg .WriteByte ('(');
case ')':_eedg .WriteByte (')');case '\\':_eedg .WriteByte ('\\');};continue ;}else if _ddgd [0]=='('{_aedb ++;}else if _ddgd [0]==')'{_aedb --;if _aedb ==0{_cbdd ._eeb .ReadByte ();break ;};};_agge ,_ :=_cbdd ._eeb .ReadByte ();_eedg .WriteByte (_agge );
};return cmapString {_eedg .String ()},nil ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _ddd ,_cfg :=cmap ._aa [code ];_cfg {return _ddd ,true ;};return MissingCodeString ,false ;};func (_cbef *cMapParser )parseObject ()(cmapObject ,error ){_cbef .skipSpaces ();
for {_fecdb ,_efeg :=_cbef ._eeb .Peek (2);if _efeg !=nil {return nil ,_efeg ;};if _fecdb [0]=='%'{_cbef .parseComment ();_cbef .skipSpaces ();continue ;}else if _fecdb [0]=='/'{_dgcc ,_fgag :=_cbef .parseName ();return _dgcc ,_fgag ;}else if _fecdb [0]=='('{_ccf ,_agff :=_cbef .parseString ();
return _ccf ,_agff ;}else if _fecdb [0]=='['{_cdac ,_dcg :=_cbef .parseArray ();return _cdac ,_dcg ;}else if (_fecdb [0]=='<')&&(_fecdb [1]=='<'){_fdc ,_bge :=_cbef .parseDict ();return _fdc ,_bge ;}else if _fecdb [0]=='<'{_edg ,_eee :=_cbef .parseHexString ();
return _edg ,_eee ;}else if _e .IsDecimalDigit (_fecdb [0])||(_fecdb [0]=='-'&&_e .IsDecimalDigit (_fecdb [1])){_gcf ,_ffb :=_cbef .parseNumber ();if _ffb !=nil {return nil ,_ffb ;};return _gcf ,nil ;}else {_eac ,_fda :=_cbef .parseOperand ();if _fda !=nil {return nil ,_fda ;
};return _eac ,nil ;};};};var (ErrBadCMap =_cd .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_cd .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_cd .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (_aageb *cMapParser )parseArray ()(cmapArray ,error ){_ccbb :=cmapArray {};_ccbb .Array =[]cmapObject {};_aageb ._eeb .ReadByte ();for {_aageb .skipSpaces ();
_cfce ,_ecd :=_aageb ._eeb .Peek (1);if _ecd !=nil {return _ccbb ,_ecd ;};if _cfce [0]==']'{_aageb ._eeb .ReadByte ();break ;};_abg ,_ecd :=_aageb .parseObject ();if _ecd !=nil {return _ccbb ,_ecd ;};_ccbb .Array =append (_ccbb .Array ,_abg );};return _ccbb ,nil ;
};type cmapHexString struct{_edda int ;_cbge []byte ;};func (cmap *CMap )Stream ()(*_e .PdfObjectStream ,error ){if cmap ._baa !=nil {return cmap ._baa ,nil ;};_acg ,_bed :=_e .MakeStream (cmap .Bytes (),_e .NewFlateEncoder ());if _bed !=nil {return nil ,_bed ;
};cmap ._baa =_acg ;return cmap ._baa ,nil ;};func (cmap *CMap )Name ()string {return cmap ._bf };type cmapString struct{String string ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_feg ,_caeb :=cmap .BytesToCharcodes (data );
if !_caeb {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_ge :=make ([]string ,len (_feg ));var _aed []CharCode ;for _cb ,_de :=range _feg {_fg ,_egff :=cmap ._aa [_de ];if !_egff {_aed =append (_aed ,_de );_fg =MissingCodeString ;};_ge [_cb ]=_fg ;};_bb :=_ae .Join (_ge ,"");if len (_aed )> 0{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_feg ,len (_aed ),_aed ,_bb ,cmap );
};return _bb ,len (_aed );};func _abdg ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (_afec *cMapParser )parseOperand ()(cmapOperand ,error ){_badf :=cmapOperand {};_gdf :=_b .Buffer {};for {_dfcc ,_gbc :=_afec ._eeb .Peek (1);if _gbc !=nil {if _gbc ==_gb .EOF {break ;
};return _badf ,_gbc ;};if _e .IsDelimiter (_dfcc [0]){break ;};if _e .IsWhiteSpace (_dfcc [0]){break ;};_fbf ,_ :=_afec ._eeb .ReadByte ();_gdf .WriteByte (_fbf );};if _gdf .Len ()==0{return _badf ,_ca .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_badf .Operand =_gdf .String ();return _badf ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_cbe ,_bad :=cmap ._af [s ];return _cbe ,_bad ;};func (_cagf *cMapParser )parseName ()(cmapName ,error ){_abag :="";_gfbe :=false ;for {_gdge ,_dddc :=_cagf ._eeb .Peek (1);
if _dddc ==_gb .EOF {break ;};if _dddc !=nil {return cmapName {_abag },_dddc ;};if !_gfbe {if _gdge [0]=='/'{_gfbe =true ;_cagf ._eeb .ReadByte ();}else {_d .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_gdge ,_gdge );
return cmapName {_abag },_ca .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_gdge [0]);};}else {if _e .IsWhiteSpace (_gdge [0]){break ;}else if (_gdge [0]=='/')||(_gdge [0]=='[')||(_gdge [0]=='(')||(_gdge [0]==']')||(_gdge [0]=='<')||(_gdge [0]=='>'){break ;
}else if _gdge [0]=='#'{_faf ,_cagd :=_cagf ._eeb .Peek (3);if _cagd !=nil {return cmapName {_abag },_cagd ;};_cagf ._eeb .Discard (3);_efbc ,_cagd :=_cac .DecodeString (string (_faf [1:3]));if _cagd !=nil {return cmapName {_abag },_cagd ;};_abag +=string (_efbc );
}else {_dgca ,_ :=_cagf ._eeb .ReadByte ();_abag +=string (_dgca );};};};return cmapName {_abag },nil ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._ebb ._fedg ,cmap ._ebb ._ggd };type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;
};func _feba (_cga cmapHexString )rune {_ebdf :=_gfbb (_cga );if _egag :=len (_ebdf );_egag ==0{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_cga );
return MissingCodeRune ;};if len (_ebdf )> 1{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_cga ,_ebdf );
};return _ebdf [0];};type charRange struct{_fb CharCode ;_ab CharCode ;};func (cmap *CMap )parseWMode ()error {var _abeg int ;_bbc :=false ;for _gdc :=0;_gdc < 3&&!_bbc ;_gdc ++{_cgd ,_cda :=cmap .parseObject ();if _cda !=nil {return _cda ;};switch _abac :=_cgd .(type ){case cmapOperand :switch _abac .Operand {case "\u0064\u0065\u0066":_bbc =true ;
default:_d .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_cgd );return ErrBadCMap ;};case cmapInt :_abeg =int (_abac ._ebe );
};};cmap ._ebb =integer {_ggd :true ,_fedg :_abeg };return nil ;};func (cmap *CMap )Type ()int {return cmap ._bc };type cmapObject interface{};func (cmap *CMap )NBits ()int {return cmap ._dd };func _gfbb (_baaf cmapHexString )[]rune {if len (_baaf ._cbge )==1{return []rune {rune (_baaf ._cbge [0])};
};_daa :=_baaf ._cbge ;if len (_daa )%2!=0{_daa =append (_daa ,0);_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_baaf ,_daa );
};_ccba :=len (_daa )>>1;_agga :=make ([]uint16 ,_ccba );for _dcedf :=0;_dcedf < _ccba ;_dcedf ++{_agga [_dcedf ]=uint16 (_daa [_dcedf <<1])<<8+uint16 (_daa [_dcedf <<1+1]);};_acga :=_a .Decode (_agga );return _acga ;};const (_gba =4;MissingCodeRune ='\ufffd';
MissingCodeString =string (MissingCodeRune ););func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_fac :=_caf (name );if _fac !=nil {return nil ,_fac ;};if cmap ._fa ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_cc ,_fac :=_caf (cmap ._fa );
if _fac !=nil {return nil ,_fac ;};for _cf ,_aag :=range _cc ._bfe {if _ ,_gg :=cmap ._bfe [_cf ];!_gg {cmap ._bfe [_cf ]=_aag ;};};cmap ._fbb =append (cmap ._fbb ,_cc ._fbb ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseName ()error {_ggc :="";
_baec :=false ;for _acd :=0;_acd < 20&&!_baec ;_acd ++{_fecd ,_fcc :=cmap .parseObject ();if _fcc !=nil {return _fcc ;};switch _cfe :=_fecd .(type ){case cmapOperand :switch _cfe .Operand {case "\u0064\u0065\u0066":_baec =true ;default:_d .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_fecd ,_ggc );
if _ggc !=""{_ggc =_ca .Sprintf ("\u0025\u0073\u0020%\u0073",_ggc ,_cfe .Operand );};_d .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_ggc );
};case cmapName :_ggc =_cfe .Name ;};};if !_baec {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._bf =_ggc ;return nil ;};func NewCIDSystemInfo (obj _e .PdfObject )(_ea CIDSystemInfo ,_bde error ){_ade ,_gf :=_e .GetDict (obj );
if !_gf {return CIDSystemInfo {},_e .ErrTypeError ;};_eb ,_gf :=_e .GetStringVal (_ade .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_gf {return CIDSystemInfo {},_e .ErrTypeError ;};_dc ,_gf :=_e .GetStringVal (_ade .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));
if !_gf {return CIDSystemInfo {},_e .ErrTypeError ;};_eg ,_gf :=_e .GetIntVal (_ade .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_gf {return CIDSystemInfo {},_e .ErrTypeError ;};return CIDSystemInfo {Registry :_eb ,Ordering :_dc ,Supplement :_eg },nil ;
};func (cmap *CMap )parseVersion ()error {_fgb :="";_cafc :=false ;for _becb :=0;_becb < 3&&!_cafc ;_becb ++{_cbb ,_fgd :=cmap .parseObject ();if _fgd !=nil {return _fgd ;};switch _cab :=_cbb .(type ){case cmapOperand :switch _cab .Operand {case "\u0064\u0065\u0066":_cafc =true ;
default:_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_cbb );
return ErrBadCMap ;};case cmapInt :_fgb =_ca .Sprintf ("\u0025\u0064",_cab ._ebe );case cmapFloat :_fgb =_ca .Sprintf ("\u0025\u0066",_cab ._bfa );case cmapString :_fgb =_cab .String ;default:_d .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_cbb );
};};cmap ._ba =_fgb ;return nil ;};func (_dgb *cMapParser )skipSpaces ()(int ,error ){_cbbe :=0;for {_fdca ,_eddb :=_dgb ._eeb .Peek (1);if _eddb !=nil {return 0,_eddb ;};if _e .IsWhiteSpace (_fdca [0]){_dgb ._eeb .ReadByte ();_cbbe ++;}else {break ;};
};return _cbbe ,nil ;};const (_bdb ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_acge ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_eecc ="\u0065n\u0064\u0063\u006d\u0061\u0070";_cag ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_ede ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_eede ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_cbba ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_eae ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_ggf ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_cbda ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_agf ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_cgf ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_ggg ="\u0057\u004d\u006fd\u0065";_face ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_fad ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_gcg ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);type cmapName struct{Name string ;
};func _cg (_dfa string )string {_bgd :=[]rune (_dfa );_fdd :=make ([]string ,len (_bgd ));for _fgg ,_ccb :=range _bgd {_fdd [_fgg ]=_ca .Sprintf ("\u0025\u0030\u0034\u0078",_ccb );};return _ca .Sprintf ("\u003c\u0025\u0073\u003e",_ae .Join (_fdd ,""));
};func (cmap *CMap )parseCodespaceRange ()error {for {_gac ,_fddc :=cmap .parseObject ();if _fddc !=nil {if _fddc ==_gb .EOF {break ;};return _fddc ;};_bddd ,_bafe :=_gac .(cmapHexString );if !_bafe {if _gaef ,_dea :=_gac .(cmapOperand );_dea {if _gaef .Operand ==_ede {return nil ;
};return _cd .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_gac ,_fddc =cmap .parseObject ();if _fddc !=nil {if _fddc ==_gb .EOF {break ;};return _fddc ;};_dcf ,_bafe :=_gac .(cmapHexString );if !_bafe {return _cd .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");
};if len (_bddd ._cbge )!=len (_dcf ._cbge ){return _cd .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_bgg :=_def (_bddd );
_ceef :=_def (_dcf );if _ceef < _bgg {_d .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_bgg ,_ceef );
return ErrBadCMap ;};_bcd :=_dcf ._edda ;_fga :=Codespace {NumBytes :_bcd ,Low :_bgg ,High :_ceef };cmap ._fbb =append (cmap ._fbb ,_fga );_d .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_bgg ,_ceef );
};if len (cmap ._fbb )==0{_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};type cmapDict struct{Dict map[string ]cmapObject ;
};func _dda (_dab []byte )*cMapParser {_fgec :=cMapParser {};_edee :=_b .NewBuffer (_dab );_fgec ._eeb =_f .NewReader (_edee );return &_fgec ;};