//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_g "bufio";_eb "bytes";_c "encoding/hex";_ed "errors";_f "fmt";_d "github.com/unidoc/unipdf/v3/common";_cb "github.com/unidoc/unipdf/v3/core";_dc "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_ga "io";_b "sort";_ee "strconv";
_ff "strings";_a "unicode/utf16";);type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (_gf *CIDSystemInfo )String ()string {return _f .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_gf .Registry ,_gf .Ordering ,_gf .Supplement );
};func _gfc (_ecde ,_bcc int )int {if _ecde < _bcc {return _ecde ;};return _bcc ;};type cmapName struct{Name string ;};func IsPredefinedCMap (name string )bool {return _dc .AssetExists (name )};func (cmap *CMap )Type ()int {return cmap ._aae };func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_ce :=make (map[CharCode ]string ,len (codeToRune ));
for _cee ,_bcg :=range codeToRune {_ce [_cee ]=string (_bcg );};cmap :=&CMap {_df :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_aae :2,_dca :16,_gg :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_ea :[]Codespace {{Low :0,High :0xffff}},_bea :_ce ,_cc :make (map[string ]CharCode ,len (codeToRune )),_bc :make (map[CharCode ]CharCode ,len (codeToRune )),_ggd :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (_dgca *cMapParser )parseHexString ()(cmapHexString ,error ){_dgca ._fbc .ReadByte ();_gfbe :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_dgd :=_eb .Buffer {};for {_dgca .skipSpaces ();_caa ,_ac :=_dgca ._fbc .Peek (1);if _ac !=nil {return cmapHexString {},_ac ;};if _caa [0]=='>'{_dgca ._fbc .ReadByte ();break ;};_gee ,_ :=_dgca ._fbc .ReadByte ();if _eb .IndexByte (_gfbe ,_gee )>=0{_dgd .WriteByte (_gee );
};};if _dgd .Len ()%2==1{_d .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_dgd .String ());_dgd .WriteByte ('0');};_cab :=_dgd .Len ()/2;
_gadf ,_ :=_c .DecodeString (_dgd .String ());return cmapHexString {_eff :_cab ,_egg :_gadf },nil ;};func _fdcb (_ebfb string )string {_fcf :=[]rune (_ebfb );_adfg :=make ([]string ,len (_fcf ));for _edec ,_ged :=range _fcf {_adfg [_edec ]=_f .Sprintf ("\u0025\u0030\u0034\u0078",_ged );
};return _f .Sprintf ("\u003c\u0025\u0073\u003e",_ff .Join (_adfg ,""));};func (cmap *CMap )Name ()string {return cmap ._df };func (cmap *CMap )parseWMode ()error {var _gbb int ;_fgg :=false ;for _gef :=0;_gef < 3&&!_fgg ;_gef ++{_bgc ,_gcd :=cmap .parseObject ();
if _gcd !=nil {return _gcd ;};switch _bfcc :=_bgc .(type ){case cmapOperand :switch _bfcc .Operand {case "\u0064\u0065\u0066":_fgg =true ;default:_d .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_bgc );
return ErrBadCMap ;};case cmapInt :_gbb =int (_bfcc ._gcca );};};cmap ._fab =integer {_fabfg :true ,_def :_gbb };return nil ;};func (cmap *CMap )parseBfrange ()error {for {var _eaba CharCode ;_edbe ,_gag :=cmap .parseObject ();if _gag !=nil {if _gag ==_ga .EOF {break ;
};return _gag ;};switch _cce :=_edbe .(type ){case cmapOperand :if _cce .Operand ==_eeb {return nil ;};return _ed .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_eaba =_ecg (_cce );
default:return _ed .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _fgf CharCode ;_edbe ,_gag =cmap .parseObject ();if _gag !=nil {if _gag ==_ga .EOF {break ;};return _gag ;};switch _abf :=_edbe .(type ){case cmapOperand :_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_fgf =_ecg (_abf );if _fgf > 0xffff{_fgf =0xffff;};default:_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_edbe );return ErrBadCMap ;
};_edbe ,_gag =cmap .parseObject ();if _gag !=nil {if _gag ==_ga .EOF {break ;};return _gag ;};switch _gagg :=_edbe .(type ){case cmapArray :if len (_gagg .Array )!=int (_fgf -_eaba )+1{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _dec :=_eaba ;_dec <=_fgf ;_dec ++{_bac :=_gagg .Array [_dec -_eaba ];_bce ,_fdcbc :=_bac .(cmapHexString );if !_fdcbc {return _ed .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_fea :=_gda (_bce );cmap ._bea [_dec ]=string (_fea );};case cmapHexString :_fcg :=_gda (_gagg );_cae :=len (_fcg );for _ggb :=_eaba ;_ggb <=_fgf ;_ggb ++{cmap ._bea [_ggb ]=string (_fcg );if _cae > 0{_fcg [_cae -1]++;}else {_d .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_ggb );
};if _ggb ==1<<32-1{break ;};};default:_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_edbe );return ErrBadCMap ;};};return nil ;};func _fga (_eaa string )(*CMap ,error ){_dg ,_eede :=_dc .Asset (_eaa );
if _eede !=nil {return nil ,_eede ;};return LoadCmapFromDataCID (_dg );};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_bfed ,_aga :=cmap .BytesToCharcodes (data );if !_aga {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_bd :=make ([]string ,len (_bfed ));var _cbb []CharCode ;for _bg ,_gb :=range _bfed {_bgg ,_ecf :=cmap ._bea [_gb ];if !_ecf {_cbb =append (_cbb ,_gb );_bgg =MissingCodeString ;};_bd [_bg ]=_bgg ;};_da :=_ff .Join (_bd ,"");if len (_cbb )> 0{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_bfed ,len (_cbb ),_cbb ,_da ,cmap );
};return _da ,len (_cbb );};type fbRange struct{_bb CharCode ;_ad CharCode ;_ge string ;};func _ccaa ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )parseBfchar ()error {for {_aed ,_ffg :=cmap .parseObject ();if _ffg !=nil {if _ffg ==_ga .EOF {break ;
};return _ffg ;};var _dgea CharCode ;switch _adge :=_aed .(type ){case cmapOperand :if _adge .Operand ==_add {return nil ;};return _ed .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_dgea =_ecg (_adge );
default:return _ed .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_aed ,_ffg =cmap .parseObject ();if _ffg !=nil {if _ffg ==_ga .EOF {break ;};return _ffg ;};var _dbb []rune ;switch _ffc :=_aed .(type ){case cmapOperand :if _ffc .Operand ==_add {return nil ;
};_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_ffc );return ErrBadCMap ;case cmapHexString :_dbb =_gda (_ffc );
case cmapName :_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_ffc );_dbb =[]rune {MissingCodeRune };default:_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_aed );
return ErrBadCMap ;};cmap ._bea [_dgea ]=string (_dbb );};return nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _dge []CharCode ;if cmap ._dca ==8{for _ ,_bec :=range data {_dge =append (_dge ,CharCode (_bec ));};return _dge ,true ;
};for _dfc :=0;_dfc < len (data );{_adf ,_gfb ,_edf :=cmap .matchCode (data [_dfc :]);if !_edf {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_dfc ,data ,string (data ));
return _dge ,false ;};_dge =append (_dge ,_adf );_dfc +=_gfb ;};return _dge ,true ;};func (cmap *CMap )Bytes ()[]byte {_d .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._db )> 0{return cmap ._db ;};cmap ._db =[]byte (_ff .Join ([]string {_fdd ,cmap .toBfData (),_agb },"\u000a"));return cmap ._db ;};func NewCIDSystemInfo (obj _cb .PdfObject )(_fg CIDSystemInfo ,_bf error ){_fa ,_bfe :=_cb .GetDict (obj );
if !_bfe {return CIDSystemInfo {},_cb .ErrTypeError ;};_fc ,_bfe :=_cb .GetStringVal (_fa .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_bfe {return CIDSystemInfo {},_cb .ErrTypeError ;};_aa ,_bfe :=_cb .GetStringVal (_fa .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));
if !_bfe {return CIDSystemInfo {},_cb .ErrTypeError ;};_bfd ,_bfe :=_cb .GetIntVal (_fa .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_bfe {return CIDSystemInfo {},_cb .ErrTypeError ;};return CIDSystemInfo {Registry :_fc ,Ordering :_aa ,Supplement :_bfd },nil ;
};const (_gefg ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_ddg ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_dff ="\u0065n\u0064\u0063\u006d\u0061\u0070";_ccae ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_fecc ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_fcc ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_add ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_bacg ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_eeb ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_bbbc ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_cdbf ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_gdf ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_fff ="\u0057\u004d\u006fd\u0065";_gacd ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_bedg ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_gfbf ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);type cMapParser struct{_fbc *_g .Reader };
func _ecg (_ggf cmapHexString )CharCode {_bfg :=CharCode (0);for _ ,_ceba :=range _ggf ._egg {_bfg <<=8;_bfg |=CharCode (_ceba );};return _bfg ;};func _fbg (_dga string )rune {_eec :=[]rune (_dga );return _eec [len (_eec )-1]};func _gda (_dae cmapHexString )[]rune {if len (_dae ._egg )==1{return []rune {rune (_dae ._egg [0])};
};_dfd :=_dae ._egg ;if len (_dfd )%2!=0{_dfd =append (_dfd ,0);_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_dae ,_dfd );
};_babd :=len (_dfd )>>1;_gba :=make ([]uint16 ,_babd );for _eef :=0;_eef < _babd ;_eef ++{_gba [_eef ]=uint16 (_dfd [_eef <<1])<<8+uint16 (_dfd [_eef <<1+1]);};_dagf :=_a .Decode (_gba );return _dagf ;};func (cmap *CMap )parseName ()error {_ade :="";_afc :=false ;
for _cfe :=0;_cfe < 20&&!_afc ;_cfe ++{_bfc ,_aac :=cmap .parseObject ();if _aac !=nil {return _aac ;};switch _gbe :=_bfc .(type ){case cmapOperand :switch _gbe .Operand {case "\u0064\u0065\u0066":_afc =true ;default:_d .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_bfc ,_ade );
if _ade !=""{_ade =_f .Sprintf ("\u0025\u0073\u0020%\u0073",_ade ,_gbe .Operand );};_d .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_ade );
};case cmapName :_ade =_gbe .Name ;};};if !_afc {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._df =_ade ;return nil ;};func (cmap *CMap )inCodespace (_cbdd CharCode ,_fae int )bool {for _ ,_bbc :=range cmap ._ea {if _bbc .Low <=_cbdd &&_cbdd <=_bbc .High &&_fae ==_bbc .NumBytes {return true ;
};};return false ;};func (cmap *CMap )parseType ()error {_adgc :=0;_eedec :=false ;for _bdca :=0;_bdca < 3&&!_eedec ;_bdca ++{_efg ,_bba :=cmap .parseObject ();if _bba !=nil {return _bba ;};switch _cca :=_efg .(type ){case cmapOperand :switch _cca .Operand {case "\u0064\u0065\u0066":_eedec =true ;
default:_d .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_efg );return ErrBadCMap ;};case cmapInt :_adgc =int (_cca ._gcca );
};};cmap ._aae =_adgc ;return nil ;};func (cmap *CMap )String ()string {_gc :=cmap ._gg ;_bde :=[]string {_f .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._dca ),_f .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._aae )};if cmap ._eg !=""{_bde =append (_bde ,_f .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._eg ));
};if cmap ._dd !=""{_bde =append (_bde ,_f .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._dd ));};_bde =append (_bde ,_f .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_gc .String ()));
if len (cmap ._ea )> 0{_bde =append (_bde ,_f .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._ea )));};if len (cmap ._bea )> 0{_bde =append (_bde ,_f .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._bea )));
};return _f .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._df ,_ff .Join (_bde ,"\u0020"));};type charRange struct{_dcg CharCode ;_gaf CharCode ;};func (cmap *CMap )computeInverseMappings (){for _ede ,_ccf :=range cmap ._bc {if _cbe ,_egd :=cmap ._ggd [_ccf ];
!_egd ||(_egd &&_cbe > _ede ){cmap ._ggd [_ccf ]=_ede ;};};for _adg ,_ebb :=range cmap ._bea {if _cbg ,_agg :=cmap ._cc [_ebb ];!_agg ||(_agg &&_cbg > _adg ){cmap ._cc [_ebb ]=_adg ;};};_b .Slice (cmap ._ea ,func (_cf ,_fd int )bool {return cmap ._ea [_cf ].Low < cmap ._ea [_fd ].Low });
};func (_egfb *cMapParser )parseArray ()(cmapArray ,error ){_egb :=cmapArray {};_egb .Array =[]cmapObject {};_egfb ._fbc .ReadByte ();for {_egfb .skipSpaces ();_abfg ,_agaf :=_egfb ._fbc .Peek (1);if _agaf !=nil {return _egb ,_agaf ;};if _abfg [0]==']'{_egfb ._fbc .ReadByte ();
break ;};_fddb ,_agaf :=_egfb .parseObject ();if _agaf !=nil {return _egb ,_agaf ;};_egb .Array =append (_egb .Array ,_fddb );};return _egb ,nil ;};type integer struct{_fabfg bool ;_def int ;};const (_bfa =100;_fdd ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_agb ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_gab ,_ead :=cmap ._cc [s ];return _gab ,_ead ;};func (_ddb *cMapParser )parseOperand ()(cmapOperand ,error ){_ddec :=cmapOperand {};_bbcb :=_eb .Buffer {};for {_gfea ,_acb :=_ddb ._fbc .Peek (1);
if _acb !=nil {if _acb ==_ga .EOF {break ;};return _ddec ,_acb ;};if _cb .IsDelimiter (_gfea [0]){break ;};if _cb .IsWhiteSpace (_gfea [0]){break ;};_cfgd ,_ :=_ddb ._fbc .ReadByte ();_bbcb .WriteByte (_cfgd );};if _bbcb .Len ()==0{return _ddec ,_f .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_ddec .Operand =_bbcb .String ();return _ddec ,nil ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_gaa ,_aef :=cmap ._bc [code ];return _gaa ,_aef ;};type CMap struct{*cMapParser ;_df string ;_dca int ;_aae int ;_eg string ;_dd string ;
_gg CIDSystemInfo ;_ea []Codespace ;_bc map[CharCode ]CharCode ;_ggd map[CharCode ]CharCode ;_bea map[CharCode ]string ;_cc map[string ]CharCode ;_db []byte ;_ae *_cb .PdfObjectStream ;_fab integer ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};
var (ErrBadCMap =_ed .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_ed .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_ed .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);type cmapHexString struct{_eff int ;_egg []byte ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_af ,_cge :=cmap ._ggd [cid ];return _af ,_cge ;};type cmapInt struct{_gcca int64 };func (_cgb *cMapParser )skipSpaces ()(int ,error ){_aba :=0;
for {_bfcd ,_bfdd :=_cgb ._fbc .Peek (1);if _bfdd !=nil {return 0,_bfdd ;};if _cb .IsWhiteSpace (_bfcd [0]){_cgb ._fbc .ReadByte ();_aba ++;}else {break ;};};return _aba ,nil ;};func (cmap *CMap )parseCodespaceRange ()error {for {_cgde ,_cgc :=cmap .parseObject ();
if _cgc !=nil {if _cgc ==_ga .EOF {break ;};return _cgc ;};_dbc ,_ccd :=_cgde .(cmapHexString );if !_ccd {if _geb ,_fec :=_cgde .(cmapOperand );_fec {if _geb .Operand ==_fecc {return nil ;};return _ed .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_cgde ,_cgc =cmap .parseObject ();if _cgc !=nil {if _cgc ==_ga .EOF {break ;};return _cgc ;};_dbcg ,_ccd :=_cgde .(cmapHexString );if !_ccd {return _ed .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_dbc ._egg )!=len (_dbcg ._egg ){return _ed .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_gdda :=_ecg (_dbc );_bcga :=_ecg (_dbcg );if _bcga < _gdda {_d .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_gdda ,_bcga );
return ErrBadCMap ;};_efc :=_dbcg ._eff ;_ccfea :=Codespace {NumBytes :_efc ,Low :_gdda ,High :_bcga };cmap ._ea =append (cmap ._ea ,_ccfea );_d .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_gdda ,_bcga );
};if len (cmap ._ea )==0{_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._fab ._def ,cmap ._fab ._fabfg };
type cmapOperand struct{Operand string ;};type cmapArray struct{Array []cmapObject ;};func (_dce *cMapParser )parseName ()(cmapName ,error ){_cef :="";_fege :=false ;for {_gca ,_bgd :=_dce ._fbc .Peek (1);if _bgd ==_ga .EOF {break ;};if _bgd !=nil {return cmapName {_cef },_bgd ;
};if !_fege {if _gca [0]=='/'{_fege =true ;_dce ._fbc .ReadByte ();}else {_d .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_gca ,_gca );
return cmapName {_cef },_f .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_gca [0]);};}else {if _cb .IsWhiteSpace (_gca [0]){break ;}else if (_gca [0]=='/')||(_gca [0]=='[')||(_gca [0]=='(')||(_gca [0]==']')||(_gca [0]=='<')||(_gca [0]=='>'){break ;
}else if _gca [0]=='#'{_dffe ,_bab :=_dce ._fbc .Peek (3);if _bab !=nil {return cmapName {_cef },_bab ;};_dce ._fbc .Discard (3);_gdb ,_bab :=_c .DecodeString (string (_dffe [1:3]));if _bab !=nil {return cmapName {_cef },_bab ;};_cef +=string (_gdb );}else {_fbca ,_ :=_dce ._fbc .ReadByte ();
_cef +=string (_fbca );};};};return cmapName {_cef },nil ;};func (cmap *CMap )NBits ()int {return cmap ._dca };func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _aeg ,_ab :=cmap ._bea [code ];_ab {return _aeg ,true ;};return MissingCodeString ,false ;
};func _bed (_gff bool )*CMap {_cg :=16;if _gff {_cg =8;};return &CMap {_dca :_cg ,_bc :make (map[CharCode ]CharCode ),_ggd :make (map[CharCode ]CharCode ),_bea :make (map[CharCode ]string ),_cc :make (map[string ]CharCode )};};func (cmap *CMap )parseSystemInfo ()error {_gce :=false ;
_ffba :=false ;_dcf :="";_afab :=false ;_adff :=CIDSystemInfo {};for _dbde :=0;_dbde < 50&&!_afab ;_dbde ++{_dac ,_ddd :=cmap .parseObject ();if _ddd !=nil {return _ddd ;};switch _eee :=_dac .(type ){case cmapDict :_aadd :=_eee .Dict ;_gcea ,_eedee :=_aadd ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];
if !_eedee {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dfb ,_eedee :=_gcea .(cmapString );if !_eedee {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_adff .Registry =_dfb .String ;_gcea ,_eedee =_aadd ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_eedee {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_dfb ,_eedee =_gcea .(cmapString );if !_eedee {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_adff .Ordering =_dfb .String ;
_ccg ,_eedee :=_aadd ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_eedee {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;
};_eeef ,_eedee :=_ccg .(cmapInt );if !_eedee {_d .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_adff .Supplement =int (_eeef ._gcca );_afab =true ;
case cmapOperand :switch _eee .Operand {case "\u0062\u0065\u0067i\u006e":_gce =true ;case "\u0065\u006e\u0064":_afab =true ;case "\u0064\u0065\u0066":_ffba =false ;};case cmapName :if _gce {_dcf =_eee .Name ;_ffba =true ;};case cmapString :if _ffba {switch _dcf {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_adff .Registry =_eee .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_adff .Ordering =_eee .String ;};};case cmapInt :if _ffba {switch _dcf {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_adff .Supplement =int (_eee ._gcca );};};};};if !_afab {_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._gg =_adff ;return nil ;};func (_bbbe *cMapParser )parseString ()(cmapString ,error ){_bbbe ._fbc .ReadByte ();_efd :=_eb .Buffer {};_cdef :=1;for {_gcfd ,_agf :=_bbbe ._fbc .Peek (1);if _agf !=nil {return cmapString {_efd .String ()},_agf ;
};if _gcfd [0]=='\\'{_bbbe ._fbc .ReadByte ();_dgg ,_bacc :=_bbbe ._fbc .ReadByte ();if _bacc !=nil {return cmapString {_efd .String ()},_bacc ;};if _cb .IsOctalDigit (_dgg ){_bceg ,_cea :=_bbbe ._fbc .Peek (2);if _cea !=nil {return cmapString {_efd .String ()},_cea ;
};var _dcac []byte ;_dcac =append (_dcac ,_dgg );for _ ,_fcff :=range _bceg {if _cb .IsOctalDigit (_fcff ){_dcac =append (_dcac ,_fcff );}else {break ;};};_bbbe ._fbc .Discard (len (_dcac )-1);_d .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_dcac );
_ddc ,_cea :=_ee .ParseUint (string (_dcac ),8,32);if _cea !=nil {return cmapString {_efd .String ()},_cea ;};_efd .WriteByte (byte (_ddc ));continue ;};switch _dgg {case 'n':_efd .WriteByte ('\n');case 'r':_efd .WriteByte ('\r');case 't':_efd .WriteByte ('\t');
case 'b':_efd .WriteByte ('\b');case 'f':_efd .WriteByte ('\f');case '(':_efd .WriteByte ('(');case ')':_efd .WriteByte (')');case '\\':_efd .WriteByte ('\\');};continue ;}else if _gcfd [0]=='('{_cdef ++;}else if _gcfd [0]==')'{_cdef --;if _cdef ==0{_bbbe ._fbc .ReadByte ();
break ;};};_cff ,_ :=_bbbe ._fbc .ReadByte ();_efd .WriteByte (_cff );};return cmapString {_efd .String ()},nil ;};const (_be =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););type cmapObject interface{};func (_ffe *cMapParser )parseDict ()(cmapDict ,error ){_d .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_egbe :=_ccaa ();_dcd ,_ :=_ffe ._fbc .ReadByte ();if _dcd !='<'{return _egbe ,ErrBadCMapDict ;};_dcd ,_ =_ffe ._fbc .ReadByte ();if _dcd !='<'{return _egbe ,ErrBadCMapDict ;};for {_ffe .skipSpaces ();_dbfe ,_bda :=_ffe ._fbc .Peek (2);if _bda !=nil {return _egbe ,_bda ;
};if (_dbfe [0]=='>')&&(_dbfe [1]=='>'){_ffe ._fbc .ReadByte ();_ffe ._fbc .ReadByte ();break ;};_bbbd ,_bda :=_ffe .parseName ();_d .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_bbbd .Name );if _bda !=nil {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_bda );
return _egbe ,_bda ;};_ffe .skipSpaces ();_bcd ,_bda :=_ffe .parseObject ();if _bda !=nil {return _egbe ,_bda ;};_egbe .Dict [_bbbd .Name ]=_bcd ;_ffe .skipSpaces ();_dbfe ,_bda =_ffe ._fbc .Peek (3);if _bda !=nil {return _egbe ,_bda ;};if string (_dbfe )=="\u0064\u0065\u0066"{_ffe ._fbc .Discard (3);
};};return _egbe ,nil ;};type CharCode uint32 ;func (_cbea *cMapParser )parseNumber ()(cmapObject ,error ){_beb ,_bgcb :=_cb .ParseNumber (_cbea ._fbc );if _bgcb !=nil {return nil ,_bgcb ;};switch _ecbc :=_beb .(type ){case *_cb .PdfObjectFloat :return cmapFloat {float64 (*_ecbc )},nil ;
case *_cb .PdfObjectInteger :return cmapInt {int64 (*_ecbc )},nil ;};return nil ,_f .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_beb );};func (_gbeb *cMapParser )parseObject ()(cmapObject ,error ){_gbeb .skipSpaces ();
for {_gcfb ,_adeg :=_gbeb ._fbc .Peek (2);if _adeg !=nil {return nil ,_adeg ;};if _gcfb [0]=='%'{_gbeb .parseComment ();_gbeb .skipSpaces ();continue ;}else if _gcfb [0]=='/'{_abfc ,_ecb :=_gbeb .parseName ();return _abfc ,_ecb ;}else if _gcfb [0]=='('{_bbde ,_gdee :=_gbeb .parseString ();
return _bbde ,_gdee ;}else if _gcfb [0]=='['{_dgag ,_agc :=_gbeb .parseArray ();return _dgag ,_agc ;}else if (_gcfb [0]=='<')&&(_gcfb [1]=='<'){_abd ,_dacc :=_gbeb .parseDict ();return _abd ,_dacc ;}else if _gcfb [0]=='<'{_gfg ,_cgdd :=_gbeb .parseHexString ();
return _gfg ,_cgdd ;}else if _cb .IsDecimalDigit (_gcfb [0])||(_gcfb [0]=='-'&&_cb .IsDecimalDigit (_gcfb [1])){_ddf ,_efeg :=_gbeb .parseNumber ();if _efeg !=nil {return nil ,_efeg ;};return _ddf ,nil ;}else {_abfa ,_fad :=_gbeb .parseOperand ();if _fad !=nil {return nil ,_fad ;
};return _abfa ,nil ;};};};type cmapDict struct{Dict map[string ]cmapObject ;};func (_ffgg *cMapParser )parseComment ()(string ,error ){var _gfbg _eb .Buffer ;_ ,_cfg :=_ffgg .skipSpaces ();if _cfg !=nil {return _gfbg .String (),_cfg ;};_eca :=true ;for {_bff ,_gfa :=_ffgg ._fbc .Peek (1);
if _gfa !=nil {_d .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_gfa );return _gfbg .String (),_gfa ;};if _eca &&_bff [0]!='%'{return _gfbg .String (),ErrBadCMapComment ;};_eca =false ;if (_bff [0]!='\r')&&(_bff [0]!='\n'){_cbde ,_ :=_ffgg ._fbc .ReadByte ();
_gfbg .WriteByte (_cbde );}else {break ;};};return _gfbg .String (),nil ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_d .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_bed (isSimple );cmap .cMapParser =_fegd (data );_eag :=cmap .parse ();if _eag !=nil {return nil ,_eag ;};if len (cmap ._ea )==0{if cmap ._dd !=""{return cmap ,nil ;};_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseVersion ()error {_dde :="";_aad :=false ;for _bdcae :=0;_bdcae < 3&&!_aad ;_bdcae ++{_eaad ,_fbf :=cmap .parseObject ();if _fbf !=nil {return _fbf ;};switch _dgc :=_eaad .(type ){case cmapOperand :switch _dgc .Operand {case "\u0064\u0065\u0066":_aad =true ;
default:_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_eaad );
return ErrBadCMap ;};case cmapInt :_dde =_f .Sprintf ("\u0025\u0064",_dgc ._gcca );case cmapFloat :_dde =_f .Sprintf ("\u0025\u0066",_dgc ._dcc );case cmapString :_dde =_dgc .String ;default:_d .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_eaad );
};};cmap ._eg =_dde ;return nil ;};type cmapString struct{String string ;};func _fegd (_ggab []byte )*cMapParser {_ceb :=cMapParser {};_egdc :=_eb .NewBuffer (_ggab );_ceb ._fbc =_g .NewReader (_egdc );return &_ceb ;};type cmapFloat struct{_dcc float64 };
func _dbge (_bbg cmapHexString )rune {_bgce :=_gda (_bbg );if _ggbb :=len (_bgce );_ggbb ==0{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_bbg );
return MissingCodeRune ;};if len (_bgce )> 1{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_bbg ,_bgce );
};return _bgce [0];};func (cmap *CMap )matchCode (_bee []byte )(_fb CharCode ,_gbg int ,_dbg bool ){for _adgf :=0;_adgf < _be ;_adgf ++{if _adgf < len (_bee ){_fb =_fb <<8|CharCode (_bee [_adgf ]);_gbg ++;};_dbg =cmap .inCodespace (_fb ,_adgf +1);if _dbg {return _fb ,_gbg ,true ;
};};_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_bee ,string (_bee ),cmap );
return 0,0,false ;};func (cmap *CMap )parse ()error {var _feg cmapObject ;for {_gdd ,_dgb :=cmap .parseObject ();if _dgb !=nil {if _dgb ==_ga .EOF {break ;};_d .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_dgb );
return _dgb ;};switch _bag :=_gdd .(type ){case cmapOperand :_eadg :=_bag ;switch _eadg .Operand {case _ccae :_gad :=cmap .parseCodespaceRange ();if _gad !=nil {return _gad ;};case _bbbc :_cde :=cmap .parseCIDRange ();if _cde !=nil {return _cde ;};case _fcc :_ffb :=cmap .parseBfchar ();
if _ffb !=nil {return _ffb ;};case _bacg :_cbc :=cmap .parseBfrange ();if _cbc !=nil {return _cbc ;};case _gdf :if _feg ==nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_adb ,_ffd :=_feg .(cmapName );if !_ffd {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_feg );
return ErrBadCMap ;};cmap ._dd =_adb .Name ;case _gefg :_cdg :=cmap .parseSystemInfo ();if _cdg !=nil {return _cdg ;};};case cmapName :_ebbe :=_bag ;switch _ebbe .Name {case _gefg :_dba :=cmap .parseSystemInfo ();if _dba !=nil {return _dba ;};case _gacd :_cbf :=cmap .parseName ();
if _cbf !=nil {return _cbf ;};case _bedg :_aeb :=cmap .parseType ();if _aeb !=nil {return _aeb ;};case _gfbf :_gfbd :=cmap .parseVersion ();if _gfbd !=nil {return _gfbd ;};case _fff :if _dgb =cmap .parseWMode ();_dgb !=nil {return _dgb ;};};};_feg =_gdd ;
};return nil ;};func (cmap *CMap )Stream ()(*_cb .PdfObjectStream ,error ){if cmap ._ae !=nil {return cmap ._ae ,nil ;};_fabf ,_fdc :=_cb .MakeStream (cmap .Bytes (),_cb .NewFlateEncoder ());if _fdc !=nil {return nil ,_fdc ;};cmap ._ae =_fabf ;return cmap ._ae ,nil ;
};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_bbb :=_fga (name );if _bbb !=nil {return nil ,_bbb ;};if cmap ._dd ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_edb ,_bbb :=_fga (cmap ._dd );if _bbb !=nil {return nil ,_bbb ;};
for _eed ,_bfb :=range _edb ._bc {if _ ,_ec :=cmap ._bc [_eed ];!_ec {cmap ._bc [_eed ]=_bfb ;};};cmap ._ea =append (cmap ._ea ,_edb ._ea ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._gg };
func (cmap *CMap )toBfData ()string {if len (cmap ._bea )==0{return "";};_aab :=make ([]CharCode ,0,len (cmap ._bea ));for _dcgg :=range cmap ._bea {_aab =append (_aab ,_dcgg );};_b .Slice (_aab ,func (_gd ,_egf int )bool {return _aab [_gd ]< _aab [_egf ]});
var _gfe []charRange ;_fbb :=charRange {_aab [0],_aab [0]};_ecd :=cmap ._bea [_aab [0]];for _ ,_gfba :=range _aab [1:]{_fbe :=cmap ._bea [_gfba ];if _gfba ==_fbb ._gaf +1&&_fbg (_fbe )==_fbg (_ecd )+1{_fbb ._gaf =_gfba ;}else {_gfe =append (_gfe ,_fbb );
_fbb ._dcg ,_fbb ._gaf =_gfba ,_gfba ;};_ecd =_fbe ;};_gfe =append (_gfe ,_fbb );var _ca []CharCode ;var _ef []fbRange ;for _ ,_eab :=range _gfe {if _eab ._dcg ==_eab ._gaf {_ca =append (_ca ,_eab ._dcg );}else {_ef =append (_ef ,fbRange {_bb :_eab ._dcg ,_ad :_eab ._gaf ,_ge :cmap ._bea [_eab ._dcg ]});
};};_d .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_gfe ),len (_ca ),len (_ef ));var _cd []string ;if len (_ca )> 0{_cdb :=(len (_ca )+_bfa -1)/_bfa ;
for _bbdb :=0;_bbdb < _cdb ;_bbdb ++{_gde :=_gfc (len (_ca )-_bbdb *_bfa ,_bfa );_cd =append (_cd ,_f .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_gde ));for _egfd :=0;_egfd < _gde ;_egfd ++{_ccfe :=_ca [_bbdb *_bfa +_egfd ];
_fe :=cmap ._bea [_ccfe ];_cd =append (_cd ,_f .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_ccfe ,_fdcb (_fe )));};_cd =append (_cd ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_ef )> 0{_gac :=(len (_ef )+_bfa -1)/_bfa ;for _abc :=0;
_abc < _gac ;_abc ++{_fdf :=_gfc (len (_ef )-_abc *_bfa ,_bfa );_cd =append (_cd ,_f .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_fdf ));for _aege :=0;_aege < _fdf ;_aege ++{_eea :=_ef [_abc *_bfa +_aege ];
_cd =append (_cd ,_f .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_eea ._bb ,_eea ._ad ,_fdcb (_eea ._ge )));};_cd =append (_cd ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _ff .Join (_cd ,"\u000a");
};func (cmap *CMap )parseCIDRange ()error {for {_fbec ,_afac :=cmap .parseObject ();if _afac !=nil {if _afac ==_ga .EOF {break ;};return _afac ;};_bad ,_aebd :=_fbec .(cmapHexString );if !_aebd {if _bcf ,_dcae :=_fbec .(cmapOperand );_dcae {if _bcf .Operand ==_cdbf {return nil ;
};return _ed .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_bbba :=_ecg (_bad );
_fbec ,_afac =cmap .parseObject ();if _afac !=nil {if _afac ==_ga .EOF {break ;};return _afac ;};_de ,_aebd :=_fbec .(cmapHexString );if !_aebd {return _ed .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_bad ._egg )!=len (_de ._egg ){return _ed .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_bbdd :=_ecg (_de );
if _bbba > _bbdd {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_bbba ,_bbdd );
return ErrBadCMap ;};_fbec ,_afac =cmap .parseObject ();if _afac !=nil {if _afac ==_ga .EOF {break ;};return _afac ;};_aeac ,_aebd :=_fbec .(cmapInt );if !_aebd {return _ed .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _aeac ._gcca < 0{return _ed .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_bggg :=_aeac ._gcca ;for _gcf :=_bbba ;_gcf <=_bbdd ;_gcf ++{cmap ._bc [_gcf ]=CharCode (_bggg );
_bggg ++;};_d .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_bbba ,_bbdd ,_aeac ._gcca );};return nil ;};