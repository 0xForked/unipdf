//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_aa "bytes";_b "crypto/aes";_a "crypto/cipher";_gc "crypto/md5";_ce "crypto/rand";_bc "crypto/rc4";_gb "crypto/sha256";_eg "crypto/sha512";_ac "encoding/binary";_cb "errors";_bd "fmt";_de "github.com/unidoc/unipdf/v3/common";_c "hash";_e "io";_d "math";);func (_cec stdHandlerR4 )alg3 (R int ,_cge ,_cee []byte )([]byte ,error ){var _dd []byte ;if len (_cee )> 0{_dd =_cec .alg3Key (R ,_cee );}else {_dd =_cec .alg3Key (R ,_cge );};_aca ,_aeg :=_bc .NewCipher (_dd );if _aeg !=nil {return nil ,_cb .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_dbc :=_cec .paddedPass (_cge );_dfc :=make ([]byte ,len (_dbc ));_aca .XORKeyStream (_dfc ,_dbc );if R >=3{_ed :=make ([]byte ,len (_dd ));for _gfg :=0;_gfg < 19;_gfg ++{for _gca :=0;_gca < len (_dd );_gca ++{_ed [_gca ]=_dd [_gca ]^byte (_gfg +1);};_bee ,_ca :=_bc .NewCipher (_ed );if _ca !=nil {return nil ,_cb .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_bee .XORKeyStream (_dfc ,_dfc );};};return _dfc ,nil ;};

// Authenticate implements StdHandler interface.
func (_bcc stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_de .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");_ebf ,_ebc :=_bcc .alg7 (d ,pass );if _ebc !=nil {return nil ,0,_ebc ;};if _ebf !=nil {_de .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _ebf ,PermOwner ,nil ;};_de .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_ebf ,_ebc =_bcc .alg6 (d ,pass );if _ebc !=nil {return nil ,0,_ebc ;};if _ebf !=nil {_de .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _ebf ,d .P ,nil ;};return nil ,0,nil ;};type stdHandlerR4 struct{Length int ;ID0 string ;};func (_gbe *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_gbe ._eb !=0{_de .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");return ;};if len (dst )< len (src ){_de .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");return ;};for len (src )> 0{_gbe ._bb .Encrypt (dst ,src [:_gbe ._eb ]);src =src [_gbe ._eb :];dst =dst [_gbe ._eb :];};};func _bcf (_agd ,_cba ,_dfbg []byte )([]byte ,error ){var (_ff ,_fe ,_fggf _c .Hash ;);_ff =_gb .New ();_ccg :=make ([]byte ,64);_ddfd :=_ff ;_ddfd .Write (_agd );K :=_ddfd .Sum (_ccg [:0]);_edc :=make ([]byte ,64*(127+64+48));_ebg :=func (_fca int )([]byte ,error ){_deca :=len (_cba )+len (K )+len (_dfbg );_gaf :=_edc [:_deca ];_gdb :=copy (_gaf ,_cba );_gdb +=copy (_gaf [_gdb :],K [:]);_gdb +=copy (_gaf [_gdb :],_dfbg );if _gdb !=_deca {_de .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");return nil ,_cb .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_edc [:_deca *64];_eea (K1 ,_deca );_fgcf ,_da :=_adc (K [0:16]);if _da !=nil {return nil ,_da ;};_efe :=_a .NewCBCEncrypter (_fgcf ,K [16:32]);_efe .CryptBlocks (K1 ,K1 );E :=K1 ;_efd :=0;for _agde :=0;_agde < 16;_agde ++{_efd +=int (E [_agde ]%3);};var _ffa _c .Hash ;switch _efd %3{case 0:_ffa =_ff ;case 1:if _fe ==nil {_fe =_eg .New384 ();};_ffa =_fe ;case 2:if _fggf ==nil {_fggf =_eg .New ();};_ffa =_fggf ;};_ffa .Reset ();_ffa .Write (E );K =_ffa .Sum (_ccg [:0]);return E ,nil ;};for _bec :=0;;{E ,_gfdd :=_ebg (_bec );if _gfdd !=nil {return nil ,_gfdd ;};_aad :=uint8 (E [len (E )-1]);_bec ++;if _bec >=64&&_aad <=uint8 (_bec -32){break ;};};return K [:32],nil ;};type ecb struct{_bb _a .Block ;_eb int ;};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func (_fb stdHandlerR4 )alg6 (_cgea *StdEncryptDict ,_bag []byte )([]byte ,error ){var (_acf []byte ;_baa error ;);_gcg :=_fb .alg2 (_cgea ,_bag );if _cgea .R ==2{_acf ,_baa =_fb .alg4 (_gcg ,_bag );}else if _cgea .R >=3{_acf ,_baa =_fb .alg5 (_gcg ,_bag );}else {return nil ,_cb .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _baa !=nil {return nil ,_baa ;};_de .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_acf ),string (_cgea .U ));_gbd :=_acf ;_bce :=_cgea .U ;if _cgea .R >=3{if len (_gbd )> 16{_gbd =_gbd [0:16];};if len (_bce )> 16{_bce =_bce [0:16];};};if !_aa .Equal (_gbd ,_bce ){return nil ,nil ;};return _gcg ,nil ;};func _dg (_cg _a .Block )*ecb {return &ecb {_bb :_cg ,_eb :_cg .BlockSize ()}};func (_gg errInvalidField )Error ()string {return _bd .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_gg .Func ,_gg .Field ,_gg .Exp ,_gg .Got );};func (_ggf stdHandlerR6 )alg11 (_egd *StdEncryptDict ,_ffe []byte )([]byte ,error ){if _bgf :=_be ("\u0061\u006c\u00671\u0031","\u0055",48,_egd .U );_bgf !=nil {return nil ,_bgf ;};_gfc :=make ([]byte ,len (_ffe )+8);_eceb :=copy (_gfc ,_ffe );_eceb +=copy (_gfc [_eceb :],_egd .U [32:40]);_cbc ,_dcf :=_ggf .alg2b (_egd .R ,_gfc ,_ffe ,nil );if _dcf !=nil {return nil ,_dcf ;};_cbc =_cbc [:32];if !_aa .Equal (_cbc ,_egd .U [:32]){return nil ,nil ;};return _cbc ,nil ;};

// Allowed checks if a set of permissions can be granted.
func (_ec Permissions )Allowed (p2 Permissions )bool {return _ec &p2 ==p2 };var _ StdHandler =stdHandlerR4 {};func (_ffee stdHandlerR6 )alg13 (_gdc *StdEncryptDict ,_fff []byte )error {if _agea :=_be ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_fff );_agea !=nil {return _agea ;};if _dcb :=_be ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_gdc .Perms );_dcb !=nil {return _dcb ;};_gcb :=make ([]byte ,16);copy (_gcb ,_gdc .Perms [:16]);_dfbd ,_bda :=_b .NewCipher (_fff [:32]);if _bda !=nil {return _bda ;};_abf :=_cgd (_dfbd );_abf .CryptBlocks (_gcb ,_gcb );if !_aa .Equal (_gcb [9:12],[]byte ("\u0061\u0064\u0062")){return _cb .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_fgf :=Permissions (_ac .LittleEndian .Uint32 (_gcb [0:4]));if _fgf !=_gdc .P {return _cb .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");};_daa :=true ;if _gcb [8]=='T'{_daa =true ;}else if _gcb [8]=='F'{_daa =false ;}else {return _cb .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};if _daa !=_gdc .EncryptMetadata {return _cb .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");};return nil ;};func (_cfc stdHandlerR6 )alg2b (R int ,_bgb ,_fge ,_ecd []byte )([]byte ,error ){if R ==5{return _bgg (_bgb );};return _bcf (_bgb ,_fge ,_ecd );};func (_cfb stdHandlerR4 )alg4 (_fgc []byte ,_dbf []byte )([]byte ,error ){_bg ,_fce :=_bc .NewCipher (_fgc );if _fce !=nil {return nil ,_cb .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_bac :=[]byte (_ece );_geb :=make ([]byte ,len (_bac ));_bg .XORKeyStream (_geb ,_bac );return _geb ,nil ;};func (_dac stdHandlerR6 )alg8 (_bcea *StdEncryptDict ,_cgedg []byte ,_eba []byte )error {if _fed :=_be ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_cgedg );_fed !=nil {return _fed ;};var _edcf [16]byte ;if _ ,_bdc :=_e .ReadFull (_ce .Reader ,_edcf [:]);_bdc !=nil {return _bdc ;};_dfd :=_edcf [0:8];_age :=_edcf [8:16];_dcg :=make ([]byte ,len (_eba )+len (_dfd ));_fef :=copy (_dcg ,_eba );_fef +=copy (_dcg [_fef :],_dfd );_agce ,_gdd :=_dac .alg2b (_bcea .R ,_dcg ,_eba ,nil );if _gdd !=nil {return _gdd ;};U :=make ([]byte ,len (_agce )+len (_dfd )+len (_age ));_fef =copy (U ,_agce [:32]);_fef +=copy (U [_fef :],_dfd );_fef +=copy (U [_fef :],_age );_bcea .U =U ;_fef =len (_eba );_fef +=copy (_dcg [_fef :],_age );_agce ,_gdd =_dac .alg2b (_bcea .R ,_dcg ,_eba ,nil );if _gdd !=nil {return _gdd ;};_add ,_gdd :=_adc (_agce [:32]);if _gdd !=nil {return _gdd ;};_aea :=make ([]byte ,_b .BlockSize );_dff :=_a .NewCBCEncrypter (_add ,_aea );UE :=make ([]byte ,32);_dff .CryptBlocks (UE ,_cgedg [:32]);_bcea .UE =UE ;return nil ;};var _ StdHandler =stdHandlerR6 {};func (_ae *ecbEncrypter )BlockSize ()int {return _ae ._eb };func _be (_cfg ,_gd string ,_gbb int ,_f []byte )error {if len (_f )< _gbb {return errInvalidField {Func :_cfg ,Field :_gd ,Exp :_gbb ,Got :len (_f )};};return nil ;};func (_df stdHandlerR4 )alg2 (_eag *StdEncryptDict ,_bbg []byte )[]byte {_de .Log .Trace ("\u0061\u006c\u0067\u0032");_bf :=_df .paddedPass (_bbg );_bfd :=_gc .New ();_bfd .Write (_bf );_bfd .Write (_eag .O );var _fc [4]byte ;_ac .LittleEndian .PutUint32 (_fc [:],uint32 (_eag .P ));_bfd .Write (_fc [:]);_de .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_fc );_bfd .Write ([]byte (_df .ID0 ));_de .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_eag .R ,_eag .EncryptMetadata );if (_eag .R >=4)&&!_eag .EncryptMetadata {_bfd .Write ([]byte {0xff,0xff,0xff,0xff});};_gde :=_bfd .Sum (nil );if _eag .R >=3{_bfd =_gc .New ();for _gf :=0;_gf < 50;_gf ++{_bfd .Reset ();_bfd .Write (_gde [0:_df .Length /8]);_gde =_bfd .Sum (nil );};};if _eag .R >=3{return _gde [0:_df .Length /8];};return _gde [0:5];};func _cgd (_ea _a .Block )_a .BlockMode {return (*ecbDecrypter )(_dg (_ea ))};func _eea (_cfbg []byte ,_gefe int ){_agc :=_gefe ;for _agc < len (_cfbg ){copy (_cfbg [_agc :],_cfbg [:_agc ]);_agc *=2;};};const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););func (_afe stdHandlerR6 )alg2a (_aag *StdEncryptDict ,_cd []byte )([]byte ,Permissions ,error ){if _dfb :=_be ("\u0061\u006c\u00672\u0061","\u004f",48,_aag .O );_dfb !=nil {return nil ,0,_dfb ;};if _gfd :=_be ("\u0061\u006c\u00672\u0061","\u0055",48,_aag .U );_gfd !=nil {return nil ,0,_gfd ;};if len (_cd )> 127{_cd =_cd [:127];};_ee ,_ccc :=_afe .alg12 (_aag ,_cd );if _ccc !=nil {return nil ,0,_ccc ;};var (_bcg []byte ;_cea []byte ;_aegd []byte ;);var _cged Permissions ;if len (_ee )!=0{_cged =PermOwner ;_aac :=make ([]byte ,len (_cd )+8+48);_fbg :=copy (_aac ,_cd );_fbg +=copy (_aac [_fbg :],_aag .O [40:48]);_fbg +=copy (_aac [_fbg :],_aag .U [0:48]);_bcg =_aac ;_cea =_aag .OE ;_aegd =_aag .U [0:48];}else {_ee ,_ccc =_afe .alg11 (_aag ,_cd );if _ccc ==nil &&len (_ee )==0{_ee ,_ccc =_afe .alg11 (_aag ,[]byte (""));};if _ccc !=nil {return nil ,0,_ccc ;}else if len (_ee )==0{return nil ,0,nil ;};_cged =_aag .P ;_bgd :=make ([]byte ,len (_cd )+8);_gffd :=copy (_bgd ,_cd );_gffd +=copy (_bgd [_gffd :],_aag .U [40:48]);_bcg =_bgd ;_cea =_aag .UE ;_aegd =nil ;};if _gef :=_be ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_cea );_gef !=nil {return nil ,0,_gef ;};_cea =_cea [:32];_cfd ,_ccc :=_afe .alg2b (_aag .R ,_bcg ,_cd ,_aegd );if _ccc !=nil {return nil ,0,_ccc ;};_aace ,_ccc :=_b .NewCipher (_cfd [:32]);if _ccc !=nil {return nil ,0,_ccc ;};_ddc :=make ([]byte ,_b .BlockSize );_acc :=_a .NewCBCDecrypter (_aace ,_ddc );_eec :=make ([]byte ,32);_acc .CryptBlocks (_eec ,_cea );if _aag .R ==5{return _eec ,_cged ,nil ;};_ccc =_afe .alg13 (_aag ,_eec );if _ccc !=nil {return nil ,0,_ccc ;};return _eec ,_cged ,nil ;};func _adc (_gag []byte )(_a .Block ,error ){_cgg ,_egag :=_b .NewCipher (_gag );if _egag !=nil {_de .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_egag );return nil ,_egag ;};return _cgg ,nil ;};

// Authenticate implements StdHandler interface.
func (_fa stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _fa .alg2a (d ,pass );};func (_ddfb stdHandlerR6 )alg12 (_cbe *StdEncryptDict ,_aec []byte )([]byte ,error ){if _dcd :=_be ("\u0061\u006c\u00671\u0032","\u0055",48,_cbe .U );_dcd !=nil {return nil ,_dcd ;};if _gba :=_be ("\u0061\u006c\u00671\u0032","\u004f",48,_cbe .O );_gba !=nil {return nil ,_gba ;};_fgdb :=make ([]byte ,len (_aec )+8+48);_dgd :=copy (_fgdb ,_aec );_dgd +=copy (_fgdb [_dgd :],_cbe .O [32:40]);_dgd +=copy (_fgdb [_dgd :],_cbe .U [0:48]);_bbe ,_adb :=_ddfb .alg2b (_cbe .R ,_fgdb ,_aec ,_cbe .U [0:48]);if _adb !=nil {return nil ,_adb ;};_bbe =_bbe [:32];if !_aa .Equal (_bbe ,_cbe .O [:32]){return nil ,nil ;};return _bbe ,nil ;};

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_gad stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_fcd :=_gad .alg3 (d .R ,upass ,opass );if _fcd !=nil {_de .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_fcd );return nil ,_fcd ;};d .O =O ;_de .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_bbgg :=_gad .alg2 (d ,upass );U ,_fcd :=_gad .alg5 (_bbgg ,upass );if _fcd !=nil {_de .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_fcd );return nil ,_fcd ;};d .U =U ;_de .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _bbgg ,nil ;};func _bgg (_acfe []byte )([]byte ,error ){_cdf :=_gb .New ();_cdf .Write (_acfe );return _cdf .Sum (nil ),nil ;};func _cf (_ab _a .Block )_a .BlockMode {return (*ecbEncrypter )(_dg (_ab ))};func (_ecee stdHandlerR4 )alg5 (_abe []byte ,_ceg []byte )([]byte ,error ){_adfd :=_gc .New ();_adfd .Write ([]byte (_ece ));_adfd .Write ([]byte (_ecee .ID0 ));_ef :=_adfd .Sum (nil );_de .Log .Trace ("\u0061\u006c\u0067\u0035");_de .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_abe );_de .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_ecee .ID0 );if len (_ef )!=16{return nil ,_cb .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");};_agf ,_af :=_bc .NewCipher (_abe );if _af !=nil {return nil ,_cb .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_dde :=make ([]byte ,16);_agf .XORKeyStream (_dde ,_ef );_gea :=make ([]byte ,len (_abe ));for _fgcg :=0;_fgcg < 19;_fgcg ++{for _gff :=0;_gff < len (_abe );_gff ++{_gea [_gff ]=_abe [_gff ]^byte (_fgcg +1);};_agf ,_af =_bc .NewCipher (_gea );if _af !=nil {return nil ,_cb .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_agf .XORKeyStream (_dde ,_dde );_de .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_fgcg ,_gea );_de .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_fgcg ,_dde );};_eab :=make ([]byte ,32);for _bdg :=0;_bdg < 16;_bdg ++{_eab [_bdg ]=_dde [_bdg ];};_ ,_af =_ce .Read (_eab [16:32]);if _af !=nil {return nil ,_cb .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");};return _eab ,nil ;};type ecbEncrypter ecb ;

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_ga *StdEncryptDict ,_ba ,_bbd []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_bcb *StdEncryptDict ,_ge []byte )([]byte ,Permissions ,error );};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};func (_fga stdHandlerR4 )alg7 (_fd *StdEncryptDict ,_ddf []byte )([]byte ,error ){_eff :=_fga .alg3Key (_fd .R ,_ddf );_ggg :=make ([]byte ,len (_fd .O ));if _fd .R ==2{_fdb ,_aba :=_bc .NewCipher (_eff );if _aba !=nil {return nil ,_cb .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_fdb .XORKeyStream (_ggg ,_fd .O );}else if _fd .R >=3{_dfg :=append ([]byte {},_fd .O ...);for _dgc :=0;_dgc < 20;_dgc ++{_bcba :=append ([]byte {},_eff ...);for _cab :=0;_cab < len (_eff );_cab ++{_bcba [_cab ]^=byte (19-_dgc );};_dec ,_dce :=_bc .NewCipher (_bcba );if _dce !=nil {return nil ,_cb .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_dec .XORKeyStream (_ggg ,_dfg );_dfg =append ([]byte {},_ggg ...);};}else {return nil ,_cb .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};_cc ,_dgf :=_fga .alg6 (_fd ,_ggg );if _dgf !=nil {return nil ,nil ;};return _cc ,nil ;};func (_eed stdHandlerR6 )alg9 (_fgd *StdEncryptDict ,_fgea []byte ,_dbd []byte )error {if _agcg :=_be ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_fgea );_agcg !=nil {return _agcg ;};if _bbb :=_be ("\u0061\u006c\u0067\u0039","\u0055",48,_fgd .U );_bbb !=nil {return _bbb ;};var _ada [16]byte ;if _ ,_afa :=_e .ReadFull (_ce .Reader ,_ada [:]);_afa !=nil {return _afa ;};_aab :=_ada [0:8];_agff :=_ada [8:16];_fbgf :=_fgd .U [:48];_dba :=make ([]byte ,len (_dbd )+len (_aab )+len (_fbgf ));_eeae :=copy (_dba ,_dbd );_eeae +=copy (_dba [_eeae :],_aab );_eeae +=copy (_dba [_eeae :],_fbgf );_fcf ,_egg :=_eed .alg2b (_fgd .R ,_dba ,_dbd ,_fbgf );if _egg !=nil {return _egg ;};O :=make ([]byte ,len (_fcf )+len (_aab )+len (_agff ));_eeae =copy (O ,_fcf [:32]);_eeae +=copy (O [_eeae :],_aab );_eeae +=copy (O [_eeae :],_agff );_fgd .O =O ;_eeae =len (_dbd );_eeae +=copy (_dba [_eeae :],_agff );_fcf ,_egg =_eed .alg2b (_fgd .R ,_dba ,_dbd ,_fbgf );if _egg !=nil {return _egg ;};_eabd ,_egg :=_adc (_fcf [:32]);if _egg !=nil {return _egg ;};_ade :=make ([]byte ,_b .BlockSize );_edf :=_a .NewCBCEncrypter (_eabd ,_ade );OE :=make ([]byte ,32);_edf .CryptBlocks (OE ,_fgea [:32]);_fgd .OE =OE ;return nil ;};func (_gagb stdHandlerR6 )alg10 (_bacc *StdEncryptDict ,_cdfb []byte )error {if _cggd :=_be ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_cdfb );_cggd !=nil {return _cggd ;};_ddd :=uint64 (uint32 (_bacc .P ))|(_d .MaxUint32 <<32);Perms :=make ([]byte ,16);_ac .LittleEndian .PutUint64 (Perms [:8],_ddd );if _bacc .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");if _ ,_fcfe :=_e .ReadFull (_ce .Reader ,Perms [12:16]);_fcfe !=nil {return _fcfe ;};_cca ,_adg :=_adc (_cdfb [:32]);if _adg !=nil {return _adg ;};_efc :=_cf (_cca );_efc .CryptBlocks (Perms ,Perms );_bacc .Perms =Perms [:16];return nil ;};type stdHandlerR6 struct{};const (PermOwner =Permissions (_d .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););const _ece ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";func (_ace stdHandlerR4 )alg3Key (R int ,_ega []byte )[]byte {_ecg :=_gc .New ();_adf :=_ace .paddedPass (_ega );_ecg .Write (_adf );if R >=3{for _cgdf :=0;_cgdf < 50;_cgdf ++{_fg :=_ecg .Sum (nil );_ecg =_gc .New ();_ecg .Write (_fg );};};_bab :=_ecg .Sum (nil );if R ==2{_bab =_bab [0:5];}else {_bab =_bab [0:_ace .Length /8];};return _bab ;};func (_ad *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_ad ._eb !=0{_de .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");return ;};if len (dst )< len (src ){_de .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");return ;};for len (src )> 0{_ad ._bb .Decrypt (dst ,src [:_ad ._eb ]);src =src [_ad ._eb :];dst =dst [_ad ._eb :];};};func (stdHandlerR4 )paddedPass (_db []byte )[]byte {_gbee :=make ([]byte ,32);_gcc :=copy (_gbee ,_db );for ;_gcc < 32;_gcc ++{_gbee [_gcc ]=_ece [_gcc -len (_db )];};return _gbee ;};func (_ag *ecbDecrypter )BlockSize ()int {return _ag ._eb };type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;};type ecbDecrypter ecb ;

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_dea stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_abb :=make ([]byte ,32);if _ ,_cfcd :=_e .ReadFull (_ce .Reader ,_abb );_cfcd !=nil {return nil ,_cfcd ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;d .Perms =nil ;if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _fgfa :=_dea .alg8 (d ,_abb ,upass );_fgfa !=nil {return nil ,_fgfa ;};if _acd :=_dea .alg9 (d ,_abb ,opass );_acd !=nil {return nil ,_acd ;};if d .R ==5{return _abb ,nil ;};if _ebd :=_dea .alg10 (d ,_abb );_ebd !=nil {return nil ,_ebd ;};return _abb ,nil ;};