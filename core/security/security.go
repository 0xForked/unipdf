//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_b "bytes";_gd "crypto/aes";_f "crypto/cipher";_fd "crypto/md5";_ae "crypto/rand";_c "crypto/rc4";_g "crypto/sha256";_e "crypto/sha512";_fe "encoding/binary";_fb "errors";_cf "fmt";_eb "github.com/unidoc/unipdf/v3/common";_ad "hash";
_af "io";_d "math";);func _aa (_fdf _f .Block )_f .BlockMode {return (*ecbEncrypter )(_eg (_fdf ))};func _fg (_bc ,_ca string ,_dcg int ,_gb []byte )error {if len (_gb )< _dcg {return errInvalidField {Func :_bc ,Field :_ca ,Exp :_dcg ,Got :len (_gb )};
};return nil ;};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};func (_dba stdHandlerR6 )alg12 (_ffaa *StdEncryptDict ,_agd []byte )([]byte ,error ){if _cddb :=_fg ("\u0061\u006c\u00671\u0032","\u0055",48,_ffaa .U );
_cddb !=nil {return nil ,_cddb ;};if _cge :=_fg ("\u0061\u006c\u00671\u0032","\u004f",48,_ffaa .O );_cge !=nil {return nil ,_cge ;};_gded :=make ([]byte ,len (_agd )+8+48);_ddb :=copy (_gded ,_agd );_ddb +=copy (_gded [_ddb :],_ffaa .O [32:40]);_ddb +=copy (_gded [_ddb :],_ffaa .U [0:48]);
_ecdd ,_cda :=_dba .alg2b (_ffaa .R ,_gded ,_agd ,_ffaa .U [0:48]);if _cda !=nil {return nil ,_cda ;};_ecdd =_ecdd [:32];if !_b .Equal (_ecdd ,_ffaa .O [:32]){return nil ,nil ;};return _ecdd ,nil ;};type stdHandlerR6 struct{};func (_gff *ecbDecrypter )BlockSize ()int {return _gff ._ac };
const (PermOwner =Permissions (_d .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);
PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););type ecb struct{_gf _f .Block ;_ac int ;};func _eg (_aed _f .Block )*ecb {return &ecb {_gf :_aed ,_ac :_aed .BlockSize ()}};type stdHandlerR4 struct{Length int ;ID0 string ;
};func _ddd (_gad ,_cgf ,_adg []byte )([]byte ,error ){var (_cbf ,_deb ,_cbbd _ad .Hash ;);_cbf =_g .New ();_ab :=make ([]byte ,64);_ade :=_cbf ;_ade .Write (_gad );K :=_ade .Sum (_ab [:0]);_ggb :=make ([]byte ,64*(127+64+48));_cagd :=func (_bb int )([]byte ,error ){_fge :=len (_cgf )+len (K )+len (_adg );
_bea :=_ggb [:_fge ];_add :=copy (_bea ,_cgf );_add +=copy (_bea [_add :],K [:]);_add +=copy (_bea [_add :],_adg );if _add !=_fge {_eb .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_fb .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_ggb [:_fge *64];_dfed (K1 ,_fge );_gcc ,_bdb :=_cec (K [0:16]);if _bdb !=nil {return nil ,_bdb ;};_ebd :=_f .NewCBCEncrypter (_gcc ,K [16:32]);_ebd .CryptBlocks (K1 ,K1 );
E :=K1 ;_eac :=0;for _ffec :=0;_ffec < 16;_ffec ++{_eac +=int (E [_ffec ]%3);};var _ef _ad .Hash ;switch _eac %3{case 0:_ef =_cbf ;case 1:if _deb ==nil {_deb =_e .New384 ();};_ef =_deb ;case 2:if _cbbd ==nil {_cbbd =_e .New ();};_ef =_cbbd ;};_ef .Reset ();
_ef .Write (E );K =_ef .Sum (_ab [:0]);return E ,nil ;};for _aeb :=0;;{E ,_dfedb :=_cagd (_aeb );if _dfedb !=nil {return nil ,_dfedb ;};_debe :=E [len (E )-1];_aeb ++;if _aeb >=64&&_debe <=uint8 (_aeb -32){break ;};};return K [:32],nil ;};func (_de *ecbEncrypter )BlockSize ()int {return _de ._ac };


// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_gdb stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_ccd :=_gdb .alg3 (d .R ,upass ,opass );if _ccd !=nil {_eb .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_ccd );
return nil ,_ccd ;};d .O =O ;_eb .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_fea :=_gdb .alg2 (d ,upass );U ,_ccd :=_gdb .alg5 (_fea ,upass );if _ccd !=nil {_eb .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_ccd );
return nil ,_ccd ;};d .U =U ;_eb .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _fea ,nil ;};

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;func (_bcf stdHandlerR6 )alg9 (_dcc *StdEncryptDict ,_ffecc []byte ,_gaf []byte )error {if _ecf :=_fg ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_ffecc );_ecf !=nil {return _ecf ;};if _ced :=_fg ("\u0061\u006c\u0067\u0039","\u0055",48,_dcc .U );
_ced !=nil {return _ced ;};var _gec [16]byte ;if _ ,_ffa :=_af .ReadFull (_ae .Reader ,_gec [:]);_ffa !=nil {return _ffa ;};_caee :=_gec [0:8];_cebg :=_gec [8:16];_dde :=_dcc .U [:48];_beaa :=make ([]byte ,len (_gaf )+len (_caee )+len (_dde ));_gac :=copy (_beaa ,_gaf );
_gac +=copy (_beaa [_gac :],_caee );_gac +=copy (_beaa [_gac :],_dde );_bedb ,_fgg :=_bcf .alg2b (_dcc .R ,_beaa ,_gaf ,_dde );if _fgg !=nil {return _fgg ;};O :=make ([]byte ,len (_bedb )+len (_caee )+len (_cebg ));_gac =copy (O ,_bedb [:32]);_gac +=copy (O [_gac :],_caee );
_gac +=copy (O [_gac :],_cebg );_dcc .O =O ;_gac =len (_gaf );_gac +=copy (_beaa [_gac :],_cebg );_bedb ,_fgg =_bcf .alg2b (_dcc .R ,_beaa ,_gaf ,_dde );if _fgg !=nil {return _fgg ;};_afa ,_fgg :=_cec (_bedb [:32]);if _fgg !=nil {return _fgg ;};_gfa :=make ([]byte ,_gd .BlockSize );
_acg :=_f .NewCBCEncrypter (_afa ,_gfa );OE :=make ([]byte ,32);_acg .CryptBlocks (OE ,_ffecc [:32]);_dcc .OE =OE ;return nil ;};func (_daf stdHandlerR6 )alg10 (_agc *StdEncryptDict ,_cad []byte )error {if _ddg :=_fg ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_cad );
_ddg !=nil {return _ddg ;};_beg :=uint64 (uint32 (_agc .P ))|(_d .MaxUint32 <<32);Perms :=make ([]byte ,16);_fe .LittleEndian .PutUint64 (Perms [:8],_beg );if _agc .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");
if _ ,_cbbe :=_af .ReadFull (_ae .Reader ,Perms [12:16]);_cbbe !=nil {return _cbbe ;};_fa ,_efa :=_cec (_cad [:32]);if _efa !=nil {return _efa ;};_eba :=_aa (_fa );_eba .CryptBlocks (Perms ,Perms );_agc .Perms =Perms [:16];return nil ;};var _ StdHandler =stdHandlerR6 {};
func (_cafg stdHandlerR4 )alg6 (_aaf *StdEncryptDict ,_acfg []byte )([]byte ,error ){var (_edb []byte ;_cfg error ;);_gbf :=_cafg .alg2 (_aaf ,_acfg );if _aaf .R ==2{_edb ,_cfg =_cafg .alg4 (_gbf ,_acfg );}else if _aaf .R >=3{_edb ,_cfg =_cafg .alg5 (_gbf ,_acfg );
}else {return nil ,_fb .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _cfg !=nil {return nil ,_cfg ;};_eb .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_edb ),string (_aaf .U ));
_cbc :=_edb ;_gga :=_aaf .U ;if _aaf .R >=3{if len (_cbc )> 16{_cbc =_cbc [0:16];};if len (_gga )> 16{_gga =_gga [0:16];};};if !_b .Equal (_cbc ,_gga ){return nil ,nil ;};return _gbf ,nil ;};func (_fff stdHandlerR4 )alg3Key (R int ,_caf []byte )[]byte {_ec :=_fd .New ();
_fbg :=_fff .paddedPass (_caf );_ec .Write (_fbg );if R >=3{for _dg :=0;_dg < 50;_dg ++{_baf :=_ec .Sum (nil );_ec =_fd .New ();_ec .Write (_baf );};};_ea :=_ec .Sum (nil );if R ==2{_ea =_ea [0:5];}else {_ea =_ea [0:_fff .Length /8];};return _ea ;};func (_efb stdHandlerR6 )alg8 (_acbc *StdEncryptDict ,_fgae []byte ,_cgd []byte )error {if _cdd :=_fg ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_fgae );
_cdd !=nil {return _cdd ;};var _cbd [16]byte ;if _ ,_cgfa :=_af .ReadFull (_ae .Reader ,_cbd [:]);_cgfa !=nil {return _cgfa ;};_gef :=_cbd [0:8];_gba :=_cbd [8:16];_aca :=make ([]byte ,len (_cgd )+len (_gef ));_bbb :=copy (_aca ,_cgd );copy (_aca [_bbb :],_gef );
_aaff ,_afd :=_efb .alg2b (_acbc .R ,_aca ,_cgd ,nil );if _afd !=nil {return _afd ;};U :=make ([]byte ,len (_aaff )+len (_gef )+len (_gba ));_bbb =copy (U ,_aaff [:32]);_bbb +=copy (U [_bbb :],_gef );copy (U [_bbb :],_gba );_acbc .U =U ;_bbb =len (_cgd );
copy (_aca [_bbb :],_gba );_aaff ,_afd =_efb .alg2b (_acbc .R ,_aca ,_cgd ,nil );if _afd !=nil {return _afd ;};_agg ,_afd :=_cec (_aaff [:32]);if _afd !=nil {return _afd ;};_bfd :=make ([]byte ,_gd .BlockSize );_bef :=_f .NewCBCEncrypter (_agg ,_bfd );
UE :=make ([]byte ,32);_bef .CryptBlocks (UE ,_fgae [:32]);_acbc .UE =UE ;return nil ;};var _ StdHandler =stdHandlerR4 {};func _ded (_ba _f .Block )_f .BlockMode {return (*ecbDecrypter )(_eg (_ba ))};func (_dda stdHandlerR6 )alg11 (_aaec *StdEncryptDict ,_gdd []byte )([]byte ,error ){if _fc :=_fg ("\u0061\u006c\u00671\u0031","\u0055",48,_aaec .U );
_fc !=nil {return nil ,_fc ;};_gace :=make ([]byte ,len (_gdd )+8);_ecd :=copy (_gace ,_gdd );_ecd +=copy (_gace [_ecd :],_aaec .U [32:40]);_eee ,_bbd :=_dda .alg2b (_aaec .R ,_gace ,_gdd ,nil );if _bbd !=nil {return nil ,_bbd ;};_eee =_eee [:32];if !_b .Equal (_eee ,_aaec .U [:32]){return nil ,nil ;
};return _eee ,nil ;};func (_cag stdHandlerR4 )alg3 (R int ,_fbf ,_eeb []byte )([]byte ,error ){var _ga []byte ;if len (_eeb )> 0{_ga =_cag .alg3Key (R ,_eeb );}else {_ga =_cag .alg3Key (R ,_fbf );};_df ,_gfe :=_c .NewCipher (_ga );if _gfe !=nil {return nil ,_fb .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_gfc :=_cag .paddedPass (_fbf );_agb :=make ([]byte ,len (_gfc ));_df .XORKeyStream (_agb ,_gfc );if R >=3{_dad :=make ([]byte ,len (_ga ));for _ecg :=0;_ecg < 19;_ecg ++{for _dcf :=0;_dcf < len (_ga );_dcf ++{_dad [_dcf ]=_ga [_dcf ]^byte (_ecg +1);
};_be ,_bg :=_c .NewCipher (_dad );if _bg !=nil {return nil ,_fb .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_be .XORKeyStream (_agb ,_agb );};};return _agb ,nil ;};func _dfed (_ege []byte ,_dgd int ){_eaf :=_dgd ;
for _eaf < len (_ege ){copy (_ege [_eaf :],_ege [:_eaf ]);_eaf *=2;};};func (_cba stdHandlerR4 )alg5 (_bed []byte ,_ffe []byte )([]byte ,error ){_fga :=_fd .New ();_fga .Write ([]byte (_cb ));_fga .Write ([]byte (_cba .ID0 ));_dae :=_fga .Sum (nil );_eb .Log .Trace ("\u0061\u006c\u0067\u0035");
_eb .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_bed );_eb .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_cba .ID0 );if len (_dae )!=16{return nil ,_fb .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");
};_aag ,_ceb :=_c .NewCipher (_bed );if _ceb !=nil {return nil ,_fb .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_aab :=make ([]byte ,16);_aag .XORKeyStream (_aab ,_dae );_gag :=make ([]byte ,len (_bed ));
for _aga :=0;_aga < 19;_aga ++{for _acb :=0;_acb < len (_bed );_acb ++{_gag [_acb ]=_bed [_acb ]^byte (_aga +1);};_aag ,_ceb =_c .NewCipher (_gag );if _ceb !=nil {return nil ,_fb .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_aag .XORKeyStream (_aab ,_aab );_eb .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_aga ,_gag );_eb .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_aga ,_aab );
};_bfa :=make ([]byte ,32);for _ebf :=0;_ebf < 16;_ebf ++{_bfa [_ebf ]=_aab [_ebf ];};_ ,_ceb =_ae .Read (_bfa [16:32]);if _ceb !=nil {return nil ,_fb .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _bfa ,nil ;};type ecbEncrypter ecb ;type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func (_ffg stdHandlerR4 )alg7 (_bde *StdEncryptDict ,_ffea []byte )([]byte ,error ){_ccg :=_ffg .alg3Key (_bde .R ,_ffea );_bdec :=make ([]byte ,len (_bde .O ));
if _bde .R ==2{_fffb ,_dd :=_c .NewCipher (_ccg );if _dd !=nil {return nil ,_fb .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_fffb .XORKeyStream (_bdec ,_bde .O );}else if _bde .R >=3{_acbg :=append ([]byte {},_bde .O ...);
for _dcgc :=0;_dcgc < 20;_dcgc ++{_cbb :=append ([]byte {},_ccg ...);for _gagc :=0;_gagc < len (_ccg );_gagc ++{_cbb [_gagc ]^=byte (19-_dcgc );};_daa ,_db :=_c .NewCipher (_cbb );if _db !=nil {return nil ,_fb .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_daa .XORKeyStream (_bdec ,_acbg );_acbg =append ([]byte {},_bdec ...);};}else {return nil ,_fb .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};_bage ,_cdc :=_ffg .alg6 (_bde ,_bdec );if _cdc !=nil {return nil ,nil ;};return _bage ,nil ;};func (_eda errInvalidField )Error ()string {return _cf .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_eda .Func ,_eda .Field ,_eda .Exp ,_eda .Got );
};func (_bac stdHandlerR4 )alg4 (_gde []byte ,_afe []byte )([]byte ,error ){_fbb ,_fgf :=_c .NewCipher (_gde );if _fgf !=nil {return nil ,_fb .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_bd :=[]byte (_cb );
_gc :=make ([]byte ,len (_bd ));_fbb .XORKeyStream (_gc ,_bd );return _gc ,nil ;};func (stdHandlerR4 )paddedPass (_gfg []byte )[]byte {_gbg :=make ([]byte ,32);_ce :=copy (_gbg ,_gfg );for ;_ce < 32;_ce ++{_gbg [_ce ]=_cb [_ce -len (_gfg )];};return _gbg ;
};func (_gdf stdHandlerR6 )alg13 (_ddf *StdEncryptDict ,_dbe []byte )error {if _bgg :=_fg ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_dbe );_bgg !=nil {return _bgg ;};if _egd :=_fg ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_ddf .Perms );
_egd !=nil {return _egd ;};_eeg :=make ([]byte ,16);copy (_eeg ,_ddf .Perms [:16]);_bfb ,_fgc :=_gd .NewCipher (_dbe [:32]);if _fgc !=nil {return _fgc ;};_feg :=_ded (_bfb );_feg .CryptBlocks (_eeg ,_eeg );if !_b .Equal (_eeg [9:12],[]byte ("\u0061\u0064\u0062")){return _fb .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_aac :=Permissions (_fe .LittleEndian .Uint32 (_eeg [0:4]));if _aac !=_ddf .P {return _fb .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _bad bool ;if _eeg [8]=='T'{_bad =true ;}else if _eeg [8]=='F'{_bad =false ;}else {return _fb .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _bad !=_ddf .EncryptMetadata {return _fb .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););

// Authenticate implements StdHandler interface.
func (_dbfd stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _dbfd .alg2a (d ,pass );};const _cb ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";
type ecbDecrypter ecb ;

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_dccc stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_ada :=make ([]byte ,32);if _ ,_gdfa :=_af .ReadFull (_ae .Reader ,_ada );_gdfa !=nil {return nil ,_gdfa ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;
d .Perms =nil ;if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _fgda :=_dccc .alg8 (d ,_ada ,upass );_fgda !=nil {return nil ,_fgda ;};if _bbg :=_dccc .alg9 (d ,_ada ,opass );_bbg !=nil {return nil ,_bbg ;};if d .R ==5{return _ada ,nil ;
};if _egdc :=_dccc .alg10 (d ,_ada );_egdc !=nil {return nil ,_egdc ;};return _ada ,nil ;};func (_aae *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_aae ._ac !=0{_eb .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_eb .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_aae ._gf .Encrypt (dst ,src [:_aae ._ac ]);src =src [_aae ._ac :];dst =dst [_aae ._ac :];};};func (_age stdHandlerR6 )alg2b (R int ,_fbga ,_cgfd ,_adb []byte )([]byte ,error ){if R ==5{return _gce (_fbga );};return _ddd (_fbga ,_cgfd ,_adb );
};func (_fgd stdHandlerR6 )alg2a (_fdfg *StdEncryptDict ,_dbd []byte )([]byte ,Permissions ,error ){if _cagf :=_fg ("\u0061\u006c\u00672\u0061","\u004f",48,_fdfg .O );_cagf !=nil {return nil ,0,_cagf ;};if _bdc :=_fg ("\u0061\u006c\u00672\u0061","\u0055",48,_fdfg .U );
_bdc !=nil {return nil ,0,_bdc ;};if len (_dbd )> 127{_dbd =_dbd [:127];};_dfe ,_fbd :=_fgd .alg12 (_fdfg ,_dbd );if _fbd !=nil {return nil ,0,_fbd ;};var (_dcfb []byte ;_cdb []byte ;_cage []byte ;);var _cac Permissions ;if len (_dfe )!=0{_cac =PermOwner ;
_ebe :=make ([]byte ,len (_dbd )+8+48);_aea :=copy (_ebe ,_dbd );_aea +=copy (_ebe [_aea :],_fdfg .O [40:48]);copy (_ebe [_aea :],_fdfg .U [0:48]);_dcfb =_ebe ;_cdb =_fdfg .OE ;_cage =_fdfg .U [0:48];}else {_dfe ,_fbd =_fgd .alg11 (_fdfg ,_dbd );if _fbd ==nil &&len (_dfe )==0{_dfe ,_fbd =_fgd .alg11 (_fdfg ,[]byte (""));
};if _fbd !=nil {return nil ,0,_fbd ;}else if len (_dfe )==0{return nil ,0,nil ;};_cac =_fdfg .P ;_fdg :=make ([]byte ,len (_dbd )+8);_cacb :=copy (_fdg ,_dbd );copy (_fdg [_cacb :],_fdfg .U [40:48]);_dcfb =_fdg ;_cdb =_fdfg .UE ;_cage =nil ;};if _bge :=_fg ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_cdb );
_bge !=nil {return nil ,0,_bge ;};_cdb =_cdb [:32];_eea ,_fbd :=_fgd .alg2b (_fdfg .R ,_dcfb ,_dbd ,_cage );if _fbd !=nil {return nil ,0,_fbd ;};_dbg ,_fbd :=_gd .NewCipher (_eea [:32]);if _fbd !=nil {return nil ,0,_fbd ;};_ggf :=make ([]byte ,_gd .BlockSize );
_dfg :=_f .NewCBCDecrypter (_dbg ,_ggf );_egg :=make ([]byte ,32);_dfg .CryptBlocks (_egg ,_cdb );if _fdfg .R ==5{return _egg ,_cac ,nil ;};_fbd =_fgd .alg13 (_fdfg ,_egg );if _fbd !=nil {return nil ,0,_fbd ;};return _egg ,_cac ,nil ;};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};func _cec (_cee []byte )(_f .Block ,error ){_ddc ,_dbf :=_gd .NewCipher (_cee );if _dbf !=nil {_eb .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_dbf );
return nil ,_dbf ;};return _ddc ,nil ;};

// Authenticate implements StdHandler interface.
func (_gbd stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_eb .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_bfe ,_cae :=_gbd .alg7 (d ,pass );if _cae !=nil {return nil ,0,_cae ;};if _bfe !=nil {_eb .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _bfe ,PermOwner ,nil ;
};_eb .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_bfe ,_cae =_gbd .alg6 (d ,pass );if _cae !=nil {return nil ,0,_cae ;
};if _bfe !=nil {_eb .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _bfe ,d .P ,nil ;};return nil ,0,nil ;};func (_bf stdHandlerR4 )alg2 (_cc *StdEncryptDict ,_ee []byte )[]byte {_eb .Log .Trace ("\u0061\u006c\u0067\u0032");
_ggc :=_bf .paddedPass (_ee );_ag :=_fd .New ();_ag .Write (_ggc );_ag .Write (_cc .O );var _gge [4]byte ;_fe .LittleEndian .PutUint32 (_gge [:],uint32 (_cc .P ));_ag .Write (_gge [:]);_eb .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_gge );
_ag .Write ([]byte (_bf .ID0 ));_eb .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_cc .R ,_cc .EncryptMetadata );
if (_cc .R >=4)&&!_cc .EncryptMetadata {_ag .Write ([]byte {0xff,0xff,0xff,0xff});};_cd :=_ag .Sum (nil );if _cc .R >=3{_ag =_fd .New ();for _ff :=0;_ff < 50;_ff ++{_ag .Reset ();_ag .Write (_cd [0:_bf .Length /8]);_cd =_ag .Sum (nil );};};if _cc .R >=3{return _cd [0:_bf .Length /8];
};return _cd [0:5];};func (_bag *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_bag ._ac !=0{_eb .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_eb .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_bag ._gf .Decrypt (dst ,src [:_bag ._ac ]);src =src [_bag ._ac :];dst =dst [_bag ._ac :];};};

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_ed *StdEncryptDict ,_cg ,_acf []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_edg *StdEncryptDict ,_dc []byte )([]byte ,Permissions ,error );};func _gce (_ega []byte )([]byte ,error ){_aec :=_g .New ();_aec .Write (_ega );return _aec .Sum (nil ),nil };

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;

// Allowed checks if a set of permissions can be granted.
func (_gg Permissions )Allowed (p2 Permissions )bool {return _gg &p2 ==p2 };