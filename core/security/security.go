//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_ggd "bytes";_gd "crypto/aes";_f "crypto/cipher";_bf "crypto/md5";_bd "crypto/rand";_c "crypto/rc4";_gg "crypto/sha256";_g "crypto/sha512";_df "encoding/binary";_e "errors";_dg "fmt";_cc "github.com/unidoc/unipdf/v3/common";_a "hash";
_d "io";_cb "math";);const (PermOwner =Permissions (_cb .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);
PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););func (_fb stdHandlerR4 )alg5 (_feg []byte ,_bg []byte )([]byte ,error ){_fcf :=_bf .New ();_fcf .Write ([]byte (_ffa ));_fcf .Write ([]byte (_fb .ID0 ));_bed :=_fcf .Sum (nil );
_cc .Log .Trace ("\u0061\u006c\u0067\u0035");_cc .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_feg );_cc .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_fb .ID0 );if len (_bed )!=16{return nil ,_e .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");
};_gff ,_ac :=_c .NewCipher (_feg );if _ac !=nil {return nil ,_e .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_bee :=make ([]byte ,16);_gff .XORKeyStream (_bee ,_bed );_gef :=make ([]byte ,len (_feg ));for _dce :=0;
_dce < 19;_dce ++{for _gda :=0;_gda < len (_feg );_gda ++{_gef [_gda ]=_feg [_gda ]^byte (_dce +1);};_gff ,_ac =_c .NewCipher (_gef );if _ac !=nil {return nil ,_e .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_gff .XORKeyStream (_bee ,_bee );_cc .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_dce ,_gef );_cc .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_dce ,_bee );
};_cg :=make ([]byte ,32);for _fba :=0;_fba < 16;_fba ++{_cg [_fba ]=_bee [_fba ];};_ ,_ac =_bd .Read (_cg [16:32]);if _ac !=nil {return nil ,_e .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _cg ,nil ;};type ecbEncrypter ecb ;func _ddc (_fdg ,_ef string ,_fdc int ,_gdd []byte )error {if len (_gdd )< _fdc {return errInvalidField {Func :_fdg ,Field :_ef ,Exp :_fdc ,Got :len (_gdd )};};return nil ;};func (_cab errInvalidField )Error ()string {return _dg .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_cab .Func ,_cab .Field ,_cab .Exp ,_cab .Got );
};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func (_cbd *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_cbd ._ed !=0{_cc .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_cc .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_cbd ._be .Encrypt (dst ,src [:_cbd ._ed ]);src =src [_cbd ._ed :];dst =dst [_cbd ._ed :];};};func (_ce *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_ce ._ed !=0{_cc .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_cc .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_ce ._be .Decrypt (dst ,src [:_ce ._ed ]);src =src [_ce ._ed :];dst =dst [_ce ._ed :];};};

// Authenticate implements StdHandler interface.
func (_ade stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_cc .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_eee ,_acf :=_ade .alg7 (d ,pass );if _acf !=nil {return nil ,0,_acf ;};if _eee !=nil {_cc .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _eee ,PermOwner ,nil ;
};_cc .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_eee ,_acf =_ade .alg6 (d ,pass );if _acf !=nil {return nil ,0,_acf ;
};if _eee !=nil {_cc .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _eee ,d .P ,nil ;};return nil ,0,nil ;};const _ffa ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";


// Authenticate implements StdHandler interface.
func (_afbd stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _afbd .alg2a (d ,pass );};func _ff (_fc _f .Block )*ecb {return &ecb {_be :_fc ,_ed :_fc .BlockSize ()}};func (_geg stdHandlerR6 )alg10 (_gcea *StdEncryptDict ,_acb []byte )error {if _egb :=_ddc ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_acb );
_egb !=nil {return _egb ;};_bbfc :=uint64 (uint32 (_gcea .P ))|(_cb .MaxUint32 <<32);Perms :=make ([]byte ,16);_df .LittleEndian .PutUint64 (Perms [:8],_bbfc );if _gcea .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");
if _ ,_edcf :=_d .ReadFull (_bd .Reader ,Perms [12:16]);_edcf !=nil {return _edcf ;};_decc ,_bcad :=_gbd (_acb [:32]);if _bcad !=nil {return _bcad ;};_beg :=_ec (_decc );_beg .CryptBlocks (Perms ,Perms );_gcea .Perms =Perms [:16];return nil ;};func (_cdb stdHandlerR4 )alg7 (_gcee *StdEncryptDict ,_ccdb []byte )([]byte ,error ){_fec :=_cdb .alg3Key (_gcee .R ,_ccdb );
_bbc :=make ([]byte ,len (_gcee .O ));if _gcee .R ==2{_fff ,_cgb :=_c .NewCipher (_fec );if _cgb !=nil {return nil ,_e .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_fff .XORKeyStream (_bbc ,_gcee .O );}else if _gcee .R >=3{_bcf :=append ([]byte {},_gcee .O ...);
for _egf :=0;_egf < 20;_egf ++{_fdag :=append ([]byte {},_fec ...);for _fa :=0;_fa < len (_fec );_fa ++{_fdag [_fa ]^=byte (19-_egf );};_edbb ,_ebd :=_c .NewCipher (_fdag );if _ebd !=nil {return nil ,_e .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_edbb .XORKeyStream (_bbc ,_bcf );_bcf =append ([]byte {},_bbc ...);};}else {return nil ,_e .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};_cae ,_ad :=_cdb .alg6 (_gcee ,_bbc );if _ad !=nil {return nil ,nil ;};return _cae ,nil ;};func (_db stdHandlerR6 )alg11 (_cdd *StdEncryptDict ,_ead []byte )([]byte ,error ){if _abb :=_ddc ("\u0061\u006c\u00671\u0031","\u0055",48,_cdd .U );
_abb !=nil {return nil ,_abb ;};_aa :=make ([]byte ,len (_ead )+8);_fbc :=copy (_aa ,_ead );_fbc +=copy (_aa [_fbc :],_cdd .U [32:40]);_ced ,_fac :=_db .alg2b (_cdd .R ,_aa ,_ead ,nil );if _fac !=nil {return nil ,_fac ;};_ced =_ced [:32];if !_ggd .Equal (_ced ,_cdd .U [:32]){return nil ,nil ;
};return _ced ,nil ;};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};func (_fdgd stdHandlerR4 )alg6 (_bge *StdEncryptDict ,_gfe []byte )([]byte ,error ){var (_agd []byte ;_dfb error ;);_beda :=_fdgd .alg2 (_bge ,_gfe );
if _bge .R ==2{_agd ,_dfb =_fdgd .alg4 (_beda ,_gfe );}else if _bge .R >=3{_agd ,_dfb =_fdgd .alg5 (_beda ,_gfe );}else {return nil ,_e .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _dfb !=nil {return nil ,_dfb ;};_cc .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_agd ),string (_bge .U ));
_bfg :=_agd ;_abg :=_bge .U ;if _bge .R >=3{if len (_bfg )> 16{_bfg =_bfg [0:16];};if len (_abg )> 16{_abg =_abg [0:16];};};if !_ggd .Equal (_bfg ,_abg ){return nil ,nil ;};return _beda ,nil ;};func (_gde stdHandlerR6 )alg12 (_abed *StdEncryptDict ,_afd []byte )([]byte ,error ){if _fbbg :=_ddc ("\u0061\u006c\u00671\u0032","\u0055",48,_abed .U );
_fbbg !=nil {return nil ,_fbbg ;};if _bfbcd :=_ddc ("\u0061\u006c\u00671\u0032","\u004f",48,_abed .O );_bfbcd !=nil {return nil ,_bfbcd ;};_dea :=make ([]byte ,len (_afd )+8+48);_bdf :=copy (_dea ,_afd );_bdf +=copy (_dea [_bdf :],_abed .O [32:40]);_bdf +=copy (_dea [_bdf :],_abed .U [0:48]);
_aad ,_fdf :=_gde .alg2b (_abed .R ,_dea ,_afd ,_abed .U [0:48]);if _fdf !=nil {return nil ,_fdf ;};_aad =_aad [:32];if !_ggd .Equal (_aad ,_abed .O [:32]){return nil ,nil ;};return _aad ,nil ;};

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_gf *StdEncryptDict ,_dd ,_dc []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_ag *StdEncryptDict ,_beb []byte )([]byte ,Permissions ,error );};func (_ea stdHandlerR6 )alg2a (_dde *StdEncryptDict ,_ebb []byte )([]byte ,Permissions ,error ){if _deb :=_ddc ("\u0061\u006c\u00672\u0061","\u004f",48,_dde .O );_deb !=nil {return nil ,0,_deb ;
};if _cegf :=_ddc ("\u0061\u006c\u00672\u0061","\u0055",48,_dde .U );_cegf !=nil {return nil ,0,_cegf ;};if len (_ebb )> 127{_ebb =_ebb [:127];};_fea ,_bbf :=_ea .alg12 (_dde ,_ebb );if _bbf !=nil {return nil ,0,_bbf ;};var (_egc []byte ;_dfa []byte ;_af []byte ;
);var _dec Permissions ;if len (_fea )!=0{_dec =PermOwner ;_cbg :=make ([]byte ,len (_ebb )+8+48);_bcc :=copy (_cbg ,_ebb );_bcc +=copy (_cbg [_bcc :],_dde .O [40:48]);copy (_cbg [_bcc :],_dde .U [0:48]);_egc =_cbg ;_dfa =_dde .OE ;_af =_dde .U [0:48];
}else {_fea ,_bbf =_ea .alg11 (_dde ,_ebb );if _bbf ==nil &&len (_fea )==0{_fea ,_bbf =_ea .alg11 (_dde ,[]byte (""));};if _bbf !=nil {return nil ,0,_bbf ;}else if len (_fea )==0{return nil ,0,nil ;};_dec =_dde .P ;_baa :=make ([]byte ,len (_ebb )+8);_cfc :=copy (_baa ,_ebb );
copy (_baa [_cfc :],_dde .U [40:48]);_egc =_baa ;_dfa =_dde .UE ;_af =nil ;};if _fgb :=_ddc ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_dfa );_fgb !=nil {return nil ,0,_fgb ;};_dfa =_dfa [:32];_eced ,_bbf :=_ea .alg2b (_dde .R ,_egc ,_ebb ,_af );
if _bbf !=nil {return nil ,0,_bbf ;};_dga ,_bbf :=_gd .NewCipher (_eced [:32]);if _bbf !=nil {return nil ,0,_bbf ;};_ecg :=make ([]byte ,_gd .BlockSize );_gbf :=_f .NewCBCDecrypter (_dga ,_ecg );_eab :=make ([]byte ,32);_gbf .CryptBlocks (_eab ,_dfa );
if _dde .R ==5{return _eab ,_dec ,nil ;};_bbf =_ea .alg13 (_dde ,_eab );if _bbf !=nil {return nil ,0,_bbf ;};return _eab ,_dec ,nil ;};func (stdHandlerR4 )paddedPass (_cd []byte )[]byte {_edb :=make ([]byte ,32);_ecc :=copy (_edb ,_cd );for ;_ecc < 32;
_ecc ++{_edb [_ecc ]=_ffa [_ecc -len (_cd )];};return _edb ;};func (_ffc stdHandlerR4 )alg3Key (R int ,_fcg []byte )[]byte {_cf :=_bf .New ();_fe :=_ffc .paddedPass (_fcg );_cf .Write (_fe );if R >=3{for _ceg :=0;_ceg < 50;_ceg ++{_ab :=_cf .Sum (nil );
_cf =_bf .New ();_cf .Write (_ab );};};_dgd :=_cf .Sum (nil );if R ==2{_dgd =_dgd [0:5];}else {_dgd =_dgd [0:_ffc .Length /8];};return _dgd ;};func _fd (_eg _f .Block )_f .BlockMode {return (*ecbDecrypter )(_ff (_eg ))};func _ec (_gb _f .Block )_f .BlockMode {return (*ecbEncrypter )(_ff (_gb ))};
type ecbDecrypter ecb ;func (_ecf stdHandlerR4 )alg3 (R int ,_bb ,_aga []byte )([]byte ,error ){var _fda []byte ;if len (_aga )> 0{_fda =_ecf .alg3Key (R ,_aga );}else {_fda =_ecf .alg3Key (R ,_bb );};_bc ,_egg :=_c .NewCipher (_fda );if _egg !=nil {return nil ,_e .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_gc :=_ecf .paddedPass (_bb );_bfb :=make ([]byte ,len (_gc ));_bc .XORKeyStream (_bfb ,_gc );if R >=3{_efd :=make ([]byte ,len (_fda ));for _gce :=0;_gce < 19;_gce ++{for _ffd :=0;_ffd < len (_fda );_ffd ++{_efd [_ffd ]=_fda [_ffd ]^byte (_gce +1);};
_ebc ,_fdae :=_c .NewCipher (_efd );if _fdae !=nil {return nil ,_e .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_ebc .XORKeyStream (_bfb ,_bfb );};};return _bfb ,nil ;};type ecb struct{_be _f .Block ;_ed int ;
};

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;var _ StdHandler =stdHandlerR6 {};func _gbd (_ga []byte )(_f .Block ,error ){_cdbd ,_aca :=_gd .NewCipher (_ga );if _aca !=nil {_cc .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_aca );
return nil ,_aca ;};return _cdbd ,nil ;};func (_cbdc stdHandlerR6 )alg8 (_faf *StdEncryptDict ,_cgda []byte ,_abe []byte )error {if _gfba :=_ddc ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_cgda );_gfba !=nil {return _gfba ;};var _dgf [16]byte ;
if _ ,_eba :=_d .ReadFull (_bd .Reader ,_dgf [:]);_eba !=nil {return _eba ;};_eabd :=_dgf [0:8];_gfg :=_dgf [8:16];_faff :=make ([]byte ,len (_abe )+len (_eabd ));_dcb :=copy (_faff ,_abe );copy (_faff [_dcb :],_eabd );_cfcg ,_efa :=_cbdc .alg2b (_faf .R ,_faff ,_abe ,nil );
if _efa !=nil {return _efa ;};U :=make ([]byte ,len (_cfcg )+len (_eabd )+len (_gfg ));_dcb =copy (U ,_cfcg [:32]);_dcb +=copy (U [_dcb :],_eabd );copy (U [_dcb :],_gfg );_faf .U =U ;_dcb =len (_abe );copy (_faff [_dcb :],_gfg );_cfcg ,_efa =_cbdc .alg2b (_faf .R ,_faff ,_abe ,nil );
if _efa !=nil {return _efa ;};_fbb ,_efa :=_gbd (_cfcg [:32]);if _efa !=nil {return _efa ;};_aeg :=make ([]byte ,_gd .BlockSize );_gbc :=_f .NewCBCEncrypter (_fbb ,_aeg );UE :=make ([]byte ,32);_gbc .CryptBlocks (UE ,_cgda [:32]);_faf .UE =UE ;return nil ;
};func (_ca *ecbEncrypter )BlockSize ()int {return _ca ._ed };

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_ffg stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_cbb :=_ffg .alg3 (d .R ,upass ,opass );if _cbb !=nil {_cc .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_cbb );
return nil ,_cbb ;};d .O =O ;_cc .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_ece :=_ffg .alg2 (d ,upass );U ,_cbb :=_ffg .alg5 (_ece ,upass );if _cbb !=nil {_cc .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_cbb );
return nil ,_cbb ;};d .U =U ;_cc .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _ece ,nil ;};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};func (_de stdHandlerR4 )alg4 (_bfbc []byte ,_ae []byte )([]byte ,error ){_edc ,_fg :=_c .NewCipher (_bfbc );if _fg !=nil {return nil ,_e .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_eff :=[]byte (_ffa );_da :=make ([]byte ,len (_eff ));_edc .XORKeyStream (_da ,_eff );return _da ,nil ;};type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;};func (_dcf stdHandlerR6 )alg2b (R int ,_cce ,_afb ,_decg []byte )([]byte ,error ){if R ==5{return _agf (_cce );
};return _gdad (_cce ,_afb ,_decg );};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_cbga stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_gab :=make ([]byte ,32);if _ ,_fag :=_d .ReadFull (_bd .Reader ,_gab );_fag !=nil {return nil ,_fag ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;d .Perms =nil ;
if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _bfde :=_cbga .alg8 (d ,_gab ,upass );_bfde !=nil {return nil ,_bfde ;};if _ebbg :=_cbga .alg9 (d ,_gab ,opass );_ebbg !=nil {return nil ,_ebbg ;};if d .R ==5{return _gab ,nil ;
};if _ffba :=_cbga .alg10 (d ,_gab );_ffba !=nil {return nil ,_ffba ;};return _gab ,nil ;};func (_gefg stdHandlerR6 )alg13 (_acfg *StdEncryptDict ,_gceb []byte )error {if _fcfe :=_ddc ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_gceb );_fcfe !=nil {return _fcfe ;
};if _cca :=_ddc ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_acfg .Perms );_cca !=nil {return _cca ;};_bgec :=make ([]byte ,16);copy (_bgec ,_acfg .Perms [:16]);_gec ,_afg :=_gd .NewCipher (_gceb [:32]);if _afg !=nil {return _afg ;};_ccfc :=_fd (_gec );
_ccfc .CryptBlocks (_bgec ,_bgec );if !_ggd .Equal (_bgec [9:12],[]byte ("\u0061\u0064\u0062")){return _e .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_daa :=Permissions (_df .LittleEndian .Uint32 (_bgec [0:4]));if _daa !=_acfg .P {return _e .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _gfdg bool ;if _bgec [8]=='T'{_gfdg =true ;}else if _bgec [8]=='F'{_gfdg =false ;}else {return _e .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _gfdg !=_acfg .EncryptMetadata {return _e .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};var _ StdHandler =stdHandlerR4 {};func (_ba *ecbDecrypter )BlockSize ()int {return _ba ._ed };func _agf (_dge []byte )([]byte ,error ){_bca :=_gg .New ();_bca .Write (_dge );return _bca .Sum (nil ),nil ;};type stdHandlerR4 struct{Length int ;
ID0 string ;};func _cgd (_agb []byte ,_cec int ){_fdce :=_cec ;for _fdce < len (_agb ){copy (_agb [_fdce :],_agb [:_fdce ]);_fdce *=2;};};func (_gdg stdHandlerR4 )alg2 (_ee *StdEncryptDict ,_ge []byte )[]byte {_cc .Log .Trace ("\u0061\u006c\u0067\u0032");
_eb :=_gdg .paddedPass (_ge );_gfb :=_bf .New ();_gfb .Write (_eb );_gfb .Write (_ee .O );var _ccf [4]byte ;_df .LittleEndian .PutUint32 (_ccf [:],uint32 (_ee .P ));_gfb .Write (_ccf [:]);_cc .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_ccf );
_gfb .Write ([]byte (_gdg .ID0 ));_cc .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_ee .R ,_ee .EncryptMetadata );
if (_ee .R >=4)&&!_ee .EncryptMetadata {_gfb .Write ([]byte {0xff,0xff,0xff,0xff});};_ccd :=_gfb .Sum (nil );if _ee .R >=3{_gfb =_bf .New ();for _dgg :=0;_dgg < 50;_dgg ++{_gfb .Reset ();_gfb .Write (_ccd [0:_gdg .Length /8]);_ccd =_gfb .Sum (nil );};};
if _ee .R >=3{return _ccd [0:_gdg .Length /8];};return _ccd [0:5];};type stdHandlerR6 struct{};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;func (_eae stdHandlerR6 )alg9 (_cag *StdEncryptDict ,_fcbc []byte ,_cdba []byte )error {if _eaf :=_ddc ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_fcbc );_eaf !=nil {return _eaf ;};if _baef :=_ddc ("\u0061\u006c\u0067\u0039","\u0055",48,_cag .U );
_baef !=nil {return _baef ;};var _cdf [16]byte ;if _ ,_cbc :=_d .ReadFull (_bd .Reader ,_cdf [:]);_cbc !=nil {return _cbc ;};_ffb :=_cdf [0:8];_afa :=_cdf [8:16];_bebb :=_cag .U [:48];_bdc :=make ([]byte ,len (_cdba )+len (_ffb )+len (_bebb ));_cde :=copy (_bdc ,_cdba );
_cde +=copy (_bdc [_cde :],_ffb );_cde +=copy (_bdc [_cde :],_bebb );_fdb ,_agdf :=_eae .alg2b (_cag .R ,_bdc ,_cdba ,_bebb );if _agdf !=nil {return _agdf ;};O :=make ([]byte ,len (_fdb )+len (_ffb )+len (_afa ));_cde =copy (O ,_fdb [:32]);_cde +=copy (O [_cde :],_ffb );
_cde +=copy (O [_cde :],_afa );_cag .O =O ;_cde =len (_cdba );_cde +=copy (_bdc [_cde :],_afa );_fdb ,_agdf =_eae .alg2b (_cag .R ,_bdc ,_cdba ,_bebb );if _agdf !=nil {return _agdf ;};_bfd ,_agdf :=_gbd (_fdb [:32]);if _agdf !=nil {return _agdf ;};_cac :=make ([]byte ,_gd .BlockSize );
_ega :=_f .NewCBCEncrypter (_bfd ,_cac );OE :=make ([]byte ,32);_ega .CryptBlocks (OE ,_fcbc [:32]);_cag .OE =OE ;return nil ;};

// Allowed checks if a set of permissions can be granted.
func (_cea Permissions )Allowed (p2 Permissions )bool {return _cea &p2 ==p2 };const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););func _gdad (_efg ,_gffg ,_ebe []byte )([]byte ,error ){var (_aed ,_bab ,_cff _a .Hash ;
);_aed =_gg .New ();_add :=make ([]byte ,64);_efc :=_aed ;_efc .Write (_efg );K :=_efc .Sum (_add [:0]);_eeg :=make ([]byte ,64*(127+64+48));_cdc :=func (_gggc int )([]byte ,error ){_bfe :=len (_gffg )+len (K )+len (_ebe );_adc :=_eeg [:_bfe ];_adf :=copy (_adc ,_gffg );
_adf +=copy (_adc [_adf :],K [:]);_adf +=copy (_adc [_adf :],_ebe );if _adf !=_bfe {_cc .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_e .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_eeg [:_bfe *64];_cgd (K1 ,_bfe );_adfe ,_aeb :=_gbd (K [0:16]);if _aeb !=nil {return nil ,_aeb ;};_bae :=_f .NewCBCEncrypter (_adfe ,K [16:32]);_bae .CryptBlocks (K1 ,K1 );
E :=K1 ;_gdc :=0;for _gcg :=0;_gcg < 16;_gcg ++{_gdc +=int (E [_gcg ]%3);};var _cfb _a .Hash ;switch _gdc %3{case 0:_cfb =_aed ;case 1:if _bab ==nil {_bab =_g .New384 ();};_cfb =_bab ;case 2:if _cff ==nil {_cff =_g .New ();};_cfb =_cff ;};_cfb .Reset ();
_cfb .Write (E );K =_cfb .Sum (_add [:0]);return E ,nil ;};for _ebca :=0;;{E ,_ffe :=_cdc (_ebca );if _ffe !=nil {return nil ,_ffe ;};_gfd :=E [len (E )-1];_ebca ++;if _ebca >=64&&_gfd <=uint8 (_ebca -32){break ;};};return K [:32],nil ;};