//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_ge "bytes";_bf "crypto/aes";_d "crypto/cipher";_fa "crypto/md5";_ag "crypto/rand";_c "crypto/rc4";_a "crypto/sha256";_f "crypto/sha512";_ac "encoding/binary";_bc "errors";_bd "fmt";_e "github.com/unidoc/unipdf/v3/common";_ga "hash";
_b "io";_dg "math";);func _caf (_bdg []byte )([]byte ,error ){_bef :=_a .New ();_bef .Write (_bdg );return _bef .Sum (nil ),nil };const _fac ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";


// Allowed checks if a set of permissions can be granted.
func (_bca Permissions )Allowed (p2 Permissions )bool {return _bca &p2 ==p2 };type ecbDecrypter ecb ;func (_aad stdHandlerR6 )alg12 (_gcb *StdEncryptDict ,_ebe []byte )([]byte ,error ){if _fbb :=_efd ("\u0061\u006c\u00671\u0032","\u0055",48,_gcb .U );_fbb !=nil {return nil ,_fbb ;
};if _bfaf :=_efd ("\u0061\u006c\u00671\u0032","\u004f",48,_gcb .O );_bfaf !=nil {return nil ,_bfaf ;};_aeg :=make ([]byte ,len (_ebe )+8+48);_dgd :=copy (_aeg ,_ebe );_dgd +=copy (_aeg [_dgd :],_gcb .O [32:40]);_dgd +=copy (_aeg [_dgd :],_gcb .U [0:48]);
_bfab ,_cbb :=_aad .alg2b (_gcb .R ,_aeg ,_ebe ,_gcb .U [0:48]);if _cbb !=nil {return nil ,_cbb ;};_bfab =_bfab [:32];if !_ge .Equal (_bfab ,_gcb .O [:32]){return nil ,nil ;};return _bfab ,nil ;};func (_agbc stdHandlerR6 )alg13 (_fab *StdEncryptDict ,_dfg []byte )error {if _cdb :=_efd ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_dfg );
_cdb !=nil {return _cdb ;};if _gbe :=_efd ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_fab .Perms );_gbe !=nil {return _gbe ;};_fbgg :=make ([]byte ,16);copy (_fbgg ,_fab .Perms [:16]);_dcb ,_fbf :=_bf .NewCipher (_dfg [:32]);if _fbf !=nil {return _fbf ;
};_bbg :=_bfg (_dcb );_bbg .CryptBlocks (_fbgg ,_fbgg );if !_ge .Equal (_fbgg [9:12],[]byte ("\u0061\u0064\u0062")){return _bc .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_dcd :=Permissions (_ac .LittleEndian .Uint32 (_fbgg [0:4]));if _dcd !=_fab .P {return _bc .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _eda bool ;if _fbgg [8]=='T'{_eda =true ;}else if _fbgg [8]=='F'{_eda =false ;}else {return _bc .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _eda !=_fab .EncryptMetadata {return _bc .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};func (_abb stdHandlerR6 )alg8 (_feb *StdEncryptDict ,_bbc []byte ,_gbb []byte )error {if _bccc :=_efd ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_bbc );_bccc !=nil {return _bccc ;};var _efcf [16]byte ;if _ ,_fba :=_b .ReadFull (_ag .Reader ,_efcf [:]);
_fba !=nil {return _fba ;};_ded :=_efcf [0:8];_ebg :=_efcf [8:16];_ccaa :=make ([]byte ,len (_gbb )+len (_ded ));_aca :=copy (_ccaa ,_gbb );copy (_ccaa [_aca :],_ded );_ddg ,_gad :=_abb .alg2b (_feb .R ,_ccaa ,_gbb ,nil );if _gad !=nil {return _gad ;};
U :=make ([]byte ,len (_ddg )+len (_ded )+len (_ebg ));_aca =copy (U ,_ddg [:32]);_aca +=copy (U [_aca :],_ded );copy (U [_aca :],_ebg );_feb .U =U ;_aca =len (_gbb );copy (_ccaa [_aca :],_ebg );_ddg ,_gad =_abb .alg2b (_feb .R ,_ccaa ,_gbb ,nil );if _gad !=nil {return _gad ;
};_eff ,_gad :=_fadb (_ddg [:32]);if _gad !=nil {return _gad ;};_bgc :=make ([]byte ,_bf .BlockSize );_dad :=_d .NewCBCEncrypter (_eff ,_bgc );UE :=make ([]byte ,32);_dad .CryptBlocks (UE ,_bbc [:32]);_feb .UE =UE ;return nil ;};

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_fc *StdEncryptDict ,_fe ,_gea []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_dfa *StdEncryptDict ,_feg []byte )([]byte ,Permissions ,error );};func (_fcg stdHandlerR4 )alg7 (_gab *StdEncryptDict ,_bdea []byte )([]byte ,error ){_fbe :=_fcg .alg3Key (_gab .R ,_bdea );_edg :=make ([]byte ,len (_gab .O ));if _gab .R ==2{_gfa ,_fae :=_c .NewCipher (_fbe );
if _fae !=nil {return nil ,_bc .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_gfa .XORKeyStream (_edg ,_gab .O );}else if _gab .R >=3{_de :=append ([]byte {},_gab .O ...);for _dfag :=0;_dfag < 20;_dfag ++{_efc :=append ([]byte {},_fbe ...);
for _ec :=0;_ec < len (_fbe );_ec ++{_efc [_ec ]^=byte (19-_dfag );};_gac ,_bb :=_c .NewCipher (_efc );if _bb !=nil {return nil ,_bc .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_gac .XORKeyStream (_edg ,_de );
_de =append ([]byte {},_edg ...);};}else {return nil ,_bc .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};_fdd ,_ecb :=_fcg .alg6 (_gab ,_edg );if _ecb !=nil {return nil ,nil ;};return _fdd ,nil ;};func _gga (_da _d .Block )_d .BlockMode {return (*ecbEncrypter )(_bfe (_da ))};
func (_fb *ecbDecrypter )BlockSize ()int {return _fb ._gg };func (stdHandlerR4 )paddedPass (_gf []byte )[]byte {_ae :=make ([]byte ,32);_dc :=copy (_ae ,_gf );for ;_dc < 32;_dc ++{_ae [_dc ]=_fac [_dc -len (_gf )];};return _ae ;};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func (_egd stdHandlerR6 )alg11 (_dbge *StdEncryptDict ,_dfd []byte )([]byte ,error ){if _bdgd :=_efd ("\u0061\u006c\u00671\u0031","\u0055",48,_dbge .U );
_bdgd !=nil {return nil ,_bdgd ;};_cdeb :=make ([]byte ,len (_dfd )+8);_bcd :=copy (_cdeb ,_dfd );_bcd +=copy (_cdeb [_bcd :],_dbge .U [32:40]);_bea ,_cac :=_egd .alg2b (_dbge .R ,_cdeb ,_dfd ,nil );if _cac !=nil {return nil ,_cac ;};_bea =_bea [:32];if !_ge .Equal (_bea ,_dbge .U [:32]){return nil ,nil ;
};return _bea ,nil ;};type stdHandlerR4 struct{Length int ;ID0 string ;};func _cef (_dbg []byte ,_bcb int ){_ccd :=_bcb ;for _ccd < len (_dbg ){copy (_dbg [_ccd :],_dbg [:_ccd ]);_ccd *=2;};};

// Authenticate implements StdHandler interface.
func (_bad stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_e .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_ddb ,_fad :=_bad .alg7 (d ,pass );if _fad !=nil {return nil ,0,_fad ;};if _ddb !=nil {_e .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _ddb ,PermOwner ,nil ;
};_e .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_ddb ,_fad =_bad .alg6 (d ,pass );if _fad !=nil {return nil ,0,_fad ;
};if _ddb !=nil {_e .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _ddb ,d .P ,nil ;};return nil ,0,nil ;};type ecb struct{_fag _d .Block ;_gg int ;};func _bfg (_ef _d .Block )_d .BlockMode {return (*ecbDecrypter )(_bfe (_ef ))};


// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_dgg stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_bcg :=_dgg .alg3 (d .R ,upass ,opass );if _bcg !=nil {_e .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_bcg );
return nil ,_bcg ;};d .O =O ;_e .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_dba :=_dgg .alg2 (d ,upass );U ,_bcg :=_dgg .alg5 (_dba ,upass );if _bcg !=nil {_e .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_bcg );
return nil ,_bcg ;};d .U =U ;_e .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _dba ,nil ;};type stdHandlerR6 struct{};var _ StdHandler =stdHandlerR6 {};func (_fbc stdHandlerR4 )alg2 (_gag *StdEncryptDict ,_dd []byte )[]byte {_e .Log .Trace ("\u0061\u006c\u0067\u0032");
_gff :=_fbc .paddedPass (_dd );_fg :=_fa .New ();_fg .Write (_gff );_fg .Write (_gag .O );var _fd [4]byte ;_ac .LittleEndian .PutUint32 (_fd [:],uint32 (_gag .P ));_fg .Write (_fd [:]);_e .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_fd );
_fg .Write ([]byte (_fbc .ID0 ));_e .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_gag .R ,_gag .EncryptMetadata );
if (_gag .R >=4)&&!_gag .EncryptMetadata {_fg .Write ([]byte {0xff,0xff,0xff,0xff});};_cf :=_fg .Sum (nil );if _gag .R >=3{_fg =_fa .New ();for _baa :=0;_baa < 50;_baa ++{_fg .Reset ();_fg .Write (_cf [0:_fbc .Length /8]);_cf =_fg .Sum (nil );};};if _gag .R >=3{return _cf [0:_fbc .Length /8];
};return _cf [0:5];};const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););var _ StdHandler =stdHandlerR4 {};

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_bffa stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_cdac :=make ([]byte ,32);if _ ,_gdc :=_b .ReadFull (_ag .Reader ,_cdac );_gdc !=nil {return nil ,_gdc ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;d .Perms =nil ;
if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _gade :=_bffa .alg8 (d ,_cdac ,upass );_gade !=nil {return nil ,_gade ;};if _aebd :=_bffa .alg9 (d ,_cdac ,opass );_aebd !=nil {return nil ,_aebd ;};if d .R ==5{return _cdac ,nil ;
};if _ceb :=_bffa .alg10 (d ,_cdac );_ceb !=nil {return nil ,_ceb ;};return _cdac ,nil ;};func (_dbe stdHandlerR4 )alg3Key (R int ,_gfc []byte )[]byte {_eg :=_fa .New ();_ad :=_dbe .paddedPass (_gfc );_eg .Write (_ad );if R >=3{for _dbb :=0;_dbb < 50;_dbb ++{_agb :=_eg .Sum (nil );
_eg =_fa .New ();_eg .Write (_agb );};};_cfb :=_eg .Sum (nil );if R ==2{_cfb =_cfb [0:5];}else {_cfb =_cfb [0:_dbe .Length /8];};return _cfb ;};func (_cd *ecbEncrypter )BlockSize ()int {return _cd ._gg };func (_cdc *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_cdc ._gg !=0{_e .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_e .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_cdc ._fag .Encrypt (dst ,src [:_cdc ._gg ]);src =src [_cdc ._gg :];dst =dst [_cdc ._gg :];};};func _fadb (_faf []byte )(_d .Block ,error ){_faed ,_cca :=_bf .NewCipher (_faf );if _cca !=nil {_e .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_cca );
return nil ,_cca ;};return _faed ,nil ;};func (_df *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_df ._gg !=0{_e .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_e .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_df ._fag .Decrypt (dst ,src [:_df ._gg ]);src =src [_df ._gg :];dst =dst [_df ._gg :];};};type ecbEncrypter ecb ;func _bfe (_ba _d .Block )*ecb {return &ecb {_fag :_ba ,_gg :_ba .BlockSize ()}};type errInvalidField struct{Func string ;
Field string ;Exp int ;Got int ;};func (_bde stdHandlerR4 )alg6 (_edd *StdEncryptDict ,_egg []byte )([]byte ,error ){var (_bda []byte ;_dgeg error ;);_gb :=_bde .alg2 (_edd ,_egg );if _edd .R ==2{_bda ,_dgeg =_bde .alg4 (_gb ,_egg );}else if _edd .R >=3{_bda ,_dgeg =_bde .alg5 (_gb ,_egg );
}else {return nil ,_bc .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _dgeg !=nil {return nil ,_dgeg ;};_e .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_bda ),string (_edd .U ));
_eddf :=_bda ;_ggc :=_edd .U ;if _edd .R >=3{if len (_eddf )> 16{_eddf =_eddf [0:16];};if len (_ggc )> 16{_ggc =_ggc [0:16];};};if !_ge .Equal (_eddf ,_ggc ){return nil ,nil ;};return _gb ,nil ;};func (_eddc stdHandlerR6 )alg10 (_gbbb *StdEncryptDict ,_fbae []byte )error {if _fdf :=_efd ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_fbae );
_fdf !=nil {return _fdf ;};_bge :=uint64 (uint32 (_gbbb .P ))|(_dg .MaxUint32 <<32);Perms :=make ([]byte ,16);_ac .LittleEndian .PutUint64 (Perms [:8],_bge );if _gbbb .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");
if _ ,_ggbc :=_b .ReadFull (_ag .Reader ,Perms [12:16]);_ggbc !=nil {return _ggbc ;};_eggd ,_dea :=_fadb (_fbae [:32]);if _dea !=nil {return _dea ;};_afa :=_gga (_eggd );_afa .CryptBlocks (Perms ,Perms );_gbbb .Perms =Perms [:16];return nil ;};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};func (_cc stdHandlerR4 )alg4 (_cgd []byte ,_daa []byte )([]byte ,error ){_agbe ,_dcc :=_c .NewCipher (_cgd );if _dcc !=nil {return nil ,_bc .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_facc :=[]byte (_fac );_cee :=make ([]byte ,len (_facc ));_agbe .XORKeyStream (_cee ,_facc );return _cee ,nil ;};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;

// Authenticate implements StdHandler interface.
func (_fbaa stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _fbaa .alg2a (d ,pass );};func (_ca errInvalidField )Error ()string {return _bd .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_ca .Func ,_ca .Field ,_ca .Exp ,_ca .Got );
};func (_gba stdHandlerR6 )alg2b (R int ,_abe ,_badg ,_cce []byte )([]byte ,error ){if R ==5{return _caf (_abe );};return _eed (_abe ,_badg ,_cce );};func _eed (_eeg ,_cfe ,_ggg []byte )([]byte ,error ){var (_agf ,_bcgc ,_eca _ga .Hash ;);_agf =_a .New ();
_fff :=make ([]byte ,64);_gbc :=_agf ;_gbc .Write (_eeg );K :=_gbc .Sum (_fff [:0]);_daaa :=make ([]byte ,64*(127+64+48));_cfaf :=func (_agc int )([]byte ,error ){_bg :=len (_cfe )+len (K )+len (_ggg );_cae :=_daaa [:_bg ];_abg :=copy (_cae ,_cfe );_abg +=copy (_cae [_abg :],K [:]);
_abg +=copy (_cae [_abg :],_ggg );if _abg !=_bg {_e .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_bc .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_daaa [:_bg *64];_cef (K1 ,_bg );_dec ,_ggd :=_fadb (K [0:16]);if _ggd !=nil {return nil ,_ggd ;};_aee :=_d .NewCBCEncrypter (_dec ,K [16:32]);_aee .CryptBlocks (K1 ,K1 );
E :=K1 ;_dggd :=0;for _fce :=0;_fce < 16;_fce ++{_dggd +=int (E [_fce ]%3);};var _eggf _ga .Hash ;switch _dggd %3{case 0:_eggf =_agf ;case 1:if _bcgc ==nil {_bcgc =_f .New384 ();};_eggf =_bcgc ;case 2:if _eca ==nil {_eca =_f .New ();};_eggf =_eca ;};_eggf .Reset ();
_eggf .Write (E );K =_eggf .Sum (_fff [:0]);return E ,nil ;};for _bfd :=0;;{E ,_fdb :=_cfaf (_bfd );if _fdb !=nil {return nil ,_fdb ;};_cfg :=E [len (E )-1];_bfd ++;if _bfd >=64&&_cfg <=uint8 (_bfd -32){break ;};};return K [:32],nil ;};func (_aeb stdHandlerR4 )alg3 (R int ,_gc ,_cdfe []byte )([]byte ,error ){var _ged []byte ;
if len (_cdfe )> 0{_ged =_aeb .alg3Key (R ,_cdfe );}else {_ged =_aeb .alg3Key (R ,_gc );};_cg ,_gedf :=_c .NewCipher (_ged );if _gedf !=nil {return nil ,_bc .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_cgc :=_aeb .paddedPass (_gc );
_baf :=make ([]byte ,len (_cgc ));_cg .XORKeyStream (_baf ,_cgc );if R >=3{_gd :=make ([]byte ,len (_ged ));for _dae :=0;_dae < 19;_dae ++{for _ee :=0;_ee < len (_ged );_ee ++{_gd [_ee ]=_ged [_ee ]^byte (_dae +1);};_aec ,_cea :=_c .NewCipher (_gd );if _cea !=nil {return nil ,_bc .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_aec .XORKeyStream (_baf ,_baf );};};return _baf ,nil ;};func (_aea stdHandlerR6 )alg2a (_edc *StdEncryptDict ,_af []byte )([]byte ,Permissions ,error ){if _dff :=_efd ("\u0061\u006c\u00672\u0061","\u004f",48,_edc .O );_dff !=nil {return nil ,0,_dff ;
};if _fbg :=_efd ("\u0061\u006c\u00672\u0061","\u0055",48,_edc .U );_fbg !=nil {return nil ,0,_fbg ;};if len (_af )> 127{_af =_af [:127];};_aa ,_cda :=_aea .alg12 (_edc ,_af );if _cda !=nil {return nil ,0,_cda ;};var (_cgcf []byte ;_fbgd []byte ;_ddc []byte ;
);var _bfgb Permissions ;if len (_aa )!=0{_bfgb =PermOwner ;_efe :=make ([]byte ,len (_af )+8+48);_beg :=copy (_efe ,_af );_beg +=copy (_efe [_beg :],_edc .O [40:48]);copy (_efe [_beg :],_edc .U [0:48]);_cgcf =_efe ;_fbgd =_edc .OE ;_ddc =_edc .U [0:48];
}else {_aa ,_cda =_aea .alg11 (_edc ,_af );if _cda ==nil &&len (_aa )==0{_aa ,_cda =_aea .alg11 (_edc ,[]byte (""));};if _cda !=nil {return nil ,0,_cda ;}else if len (_aa )==0{return nil ,0,nil ;};_bfgb =_edc .P ;_fagg :=make ([]byte ,len (_af )+8);_gfe :=copy (_fagg ,_af );
copy (_fagg [_gfe :],_edc .U [40:48]);_cgcf =_fagg ;_fbgd =_edc .UE ;_ddc =nil ;};if _efa :=_efd ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_fbgd );_efa !=nil {return nil ,0,_efa ;};_fbgd =_fbgd [:32];_cdd ,_cda :=_aea .alg2b (_edc .R ,_cgcf ,_af ,_ddc );
if _cda !=nil {return nil ,0,_cda ;};_bff ,_cda :=_bf .NewCipher (_cdd [:32]);if _cda !=nil {return nil ,0,_cda ;};_ced :=make ([]byte ,_bf .BlockSize );_cb :=_d .NewCBCDecrypter (_bff ,_ced );_ab :=make ([]byte ,32);_cb .CryptBlocks (_ab ,_fbgd );if _edc .R ==5{return _ab ,_bfgb ,nil ;
};_cda =_aea .alg13 (_edc ,_ab );if _cda !=nil {return nil ,0,_cda ;};return _ab ,_bfgb ,nil ;};const (PermOwner =Permissions (_dg .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);
PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););func (_bcgd stdHandlerR6 )alg9 (_efac *StdEncryptDict ,_cde []byte ,_bfa []byte )error {if _fege :=_efd ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_cde );
_fege !=nil {return _fege ;};if _fgd :=_efd ("\u0061\u006c\u0067\u0039","\u0055",48,_efac .U );_fgd !=nil {return _fgd ;};var _ecc [16]byte ;if _ ,_begc :=_b .ReadFull (_ag .Reader ,_ecc [:]);_begc !=nil {return _begc ;};_ade :=_ecc [0:8];_ebgb :=_ecc [8:16];
_bce :=_efac .U [:48];_eec :=make ([]byte ,len (_bfa )+len (_ade )+len (_bce ));_bfeg :=copy (_eec ,_bfa );_bfeg +=copy (_eec [_bfeg :],_ade );_bfeg +=copy (_eec [_bfeg :],_bce );_afd ,_ffd :=_bcgd .alg2b (_efac .R ,_eec ,_bfa ,_bce );if _ffd !=nil {return _ffd ;
};O :=make ([]byte ,len (_afd )+len (_ade )+len (_ebgb ));_bfeg =copy (O ,_afd [:32]);_bfeg +=copy (O [_bfeg :],_ade );_bfeg +=copy (O [_bfeg :],_ebgb );_efac .O =O ;_bfeg =len (_bfa );_bfeg +=copy (_eec [_bfeg :],_ebgb );_afd ,_ffd =_bcgd .alg2b (_efac .R ,_eec ,_bfa ,_bce );
if _ffd !=nil {return _ffd ;};_gce ,_ffd :=_fadb (_afd [:32]);if _ffd !=nil {return _ffd ;};_gffd :=make ([]byte ,_bf .BlockSize );_gfee :=_d .NewCBCEncrypter (_gce ,_gffd );OE :=make ([]byte ,32);_gfee .CryptBlocks (OE ,_cde [:32]);_efac .OE =OE ;return nil ;
};func (_dge stdHandlerR4 )alg5 (_gcd []byte ,_bcc []byte )([]byte ,error ){_gfb :=_fa .New ();_gfb .Write ([]byte (_fac ));_gfb .Write ([]byte (_dge .ID0 ));_fegf :=_gfb .Sum (nil );_e .Log .Trace ("\u0061\u006c\u0067\u0035");_e .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_gcd );
_e .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_dge .ID0 );if len (_fegf )!=16{return nil ,_bc .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");};_be ,_cfa :=_c .NewCipher (_gcd );
if _cfa !=nil {return nil ,_bc .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_ea :=make ([]byte ,16);_be .XORKeyStream (_ea ,_fegf );_ed :=make ([]byte ,len (_gcd ));for _ff :=0;_ff < 19;_ff ++{for _acg :=0;
_acg < len (_gcd );_acg ++{_ed [_acg ]=_gcd [_acg ]^byte (_ff +1);};_be ,_cfa =_c .NewCipher (_ed );if _cfa !=nil {return nil ,_bc .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_be .XORKeyStream (_ea ,_ea );
_e .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_ff ,_ed );_e .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_ff ,_ea );};_eb :=make ([]byte ,32);
for _ceed :=0;_ceed < 16;_ceed ++{_eb [_ceed ]=_ea [_ceed ];};_ ,_cfa =_ag .Read (_eb [16:32]);if _cfa !=nil {return nil ,_bc .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _eb ,nil ;};func _efd (_cdf ,_db string ,_ggb int ,_geg []byte )error {if len (_geg )< _ggb {return errInvalidField {Func :_cdf ,Field :_db ,Exp :_ggb ,Got :len (_geg )};};return nil ;};