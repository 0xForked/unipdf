//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package fonts ;import (_dg "bytes";_gg "encoding/binary";_a "errors";_ce "fmt";_bf "github.com/unidoc/unipdf/v3/common";_gb "github.com/unidoc/unipdf/v3/core";_de "github.com/unidoc/unipdf/v3/internal/cmap";_fe "github.com/unidoc/unipdf/v3/internal/textencoding";
_cd "golang.org/x/xerrors";_cg "io";_b "os";_g "regexp";_d "sort";_e "strings";_f "sync";);func _cbc ()StdFont {_cce :=_fe .NewZapfDingbatsEncoder ();_aea :=Descriptor {Name :ZapfDingbatsName ,Family :string (ZapfDingbatsName ),Weight :FontWeightMedium ,Flags :0x0004,BBox :[4]float64 {-1,-143,981,820},ItalicAngle :0,Ascent :0,Descent :0,CapHeight :0,XHeight :0,StemV :90,StemH :28};
return NewStdFontWithEncoding (_aea ,_bacd ,_cce );};var _aee *RuneCharSafeMap ;func _fac (){_gcc =MakeRuneCharSafeMap (len (_ac ));_aee =MakeRuneCharSafeMap (len (_ac ));_eec =MakeRuneCharSafeMap (len (_ac ));_gac =MakeRuneCharSafeMap (len (_ac ));for _gf ,_fba :=range _ac {_gcc .Write (_fba ,CharMetrics {Wx :float64 (_gacb [_gf ])});
_aee .Write (_fba ,CharMetrics {Wx :float64 (_def [_gf ])});_eec .Write (_fba ,CharMetrics {Wx :float64 (_gfa [_gf ])});_gac .Write (_fba ,CharMetrics {Wx :float64 (_cdc [_gf ])});};};type Font interface{Encoder ()_fe .TextEncoder ;GetRuneMetrics (_dec rune )(CharMetrics ,bool );
};func (_aeaf *TtfType )String ()string {return _ce .Sprintf ("\u0046\u004fN\u0054\u005f\u0046\u0049\u004cE\u0032\u007b\u0025\u0023\u0071 \u0055\u006e\u0069\u0074\u0073\u0050\u0065\u0072\u0045\u006d\u003d\u0025\u0064\u0020\u0042\u006f\u006c\u0064\u003d\u0025\u0074\u0020\u0049\u0074\u0061\u006c\u0069\u0063\u0041\u006e\u0067\u006c\u0065\u003d\u0025\u0066\u0020"+"\u0043\u0061pH\u0065\u0069\u0067h\u0074\u003d\u0025\u0064 Ch\u0061rs\u003d\u0025\u0064\u0020\u0047\u006c\u0079ph\u004e\u0061\u006d\u0065\u0073\u003d\u0025d\u007d",_aeaf .PostScriptName ,_aeaf .UnitsPerEm ,_aeaf .Bold ,_aeaf .ItalicAngle ,_aeaf .CapHeight ,len (_aeaf .Chars ),len (_aeaf .GlyphNames ));
};func (_ede *ttfParser )Parse ()(TtfType ,error ){_bca ,_egf :=_ede .ReadStr (4);if _egf !=nil {return TtfType {},_egf ;};if _bca =="\u004f\u0054\u0054\u004f"{return TtfType {},_cd .Errorf ("\u0066\u006f\u006e\u0074s\u0020\u0062\u0061\u0073\u0065\u0064\u0020\u006f\u006e \u0050\u006f\u0073\u0074\u0053\u0063\u0072\u0069\u0070\u0074\u0020\u006f\u0075\u0074\u006c\u0069\u006e\u0065s\u0020\u0061\u0072\u0065\u0020n\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0028\u0025\u0077\u0029",_gb .ErrNotSupported );
};if _bca !="\u0000\u0001\u0000\u0000"&&_bca !="\u0074\u0072\u0075\u0065"{_bf .Log .Debug ("\u0055n\u0072\u0065c\u006f\u0067\u006ei\u007a\u0065\u0064\u0020\u0054\u0072\u0075e\u0054\u0079\u0070\u0065\u0020\u0066i\u006c\u0065\u0020\u0066\u006f\u0072\u006d\u0061\u0074\u002e\u0020v\u0065\u0072\u0073\u0069\u006f\u006e\u003d\u0025\u0071",_bca );
};_adb :=int (_ede .ReadUShort ());_ede .Skip (3*2);_ede ._gdc =make (map[string ]uint32 );var _dbgf string ;for _daf :=0;_daf < _adb ;_daf ++{_dbgf ,_egf =_ede .ReadStr (4);if _egf !=nil {return TtfType {},_egf ;};_ede .Skip (4);_cbg :=_ede .ReadULong ();
_ede .Skip (4);_ede ._gdc [_dbgf ]=_cbg ;};_bf .Log .Trace (_bfd (_ede ._gdc ));if _egf =_ede .ParseComponents ();_egf !=nil {return TtfType {},_egf ;};return _ede ._cde ,nil ;};func _ada ()StdFont {_ggf .Do (_feb );_gd :=Descriptor {Name :CourierName ,Family :string (CourierName ),Weight :FontWeightMedium ,Flags :0x0021,BBox :[4]float64 {-23,-250,715,805},ItalicAngle :0,Ascent :629,Descent :-157,CapHeight :562,XHeight :426,StemV :51,StemH :51};
return NewStdFont (_gd ,_dgd );};func (_fad *TtfType )MakeEncoder ()(_fe .SimpleEncoder ,error ){_fbe :=make (map[_fe .CharCode ]GlyphName );for _gaf :=_fe .CharCode (0);_gaf <=256;_gaf ++{_abc :=rune (_gaf );_dff ,_ccc :=_fad .Chars [_abc ];if !_ccc {continue ;
};var _cee GlyphName ;if int (_dff )>=0&&int (_dff )< len (_fad .GlyphNames ){_cee =_fad .GlyphNames [_dff ];}else {_cff :=rune (_dff );if _gge ,_agb :=_fe .RuneToGlyph (_cff );_agb {_cee =_gge ;};};if _cee !=""{_fbe [_gaf ]=_cee ;};};if len (_fbe )==0{_bf .Log .Debug ("WA\u0052\u004eI\u004e\u0047\u003a\u0020\u005a\u0065\u0072\u006f\u0020l\u0065\u006e\u0067\u0074\u0068\u0020\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065\u0020\u0065\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u002e\u0020\u0074\u0074\u0066=\u0025s\u0020\u0043\u0068\u0061\u0072\u0073\u003d\u005b%\u00200\u0032\u0078]",_fad ,_fad .Chars );
};return _fe .NewCustomSimpleTextEncoder (_fbe ,nil );};const (HelveticaName =StdFontName ("\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a");HelveticaBoldName =StdFontName ("\u0048\u0065\u006c\u0076\u0065\u0074\u0069\u0063\u0061-\u0042\u006f\u006c\u0064");
HelveticaObliqueName =StdFontName ("\u0048\u0065\u006c\u0076\u0065\u0074\u0069\u0063\u0061\u002d\u004f\u0062l\u0069\u0071\u0075\u0065");HelveticaBoldObliqueName =StdFontName ("H\u0065\u006c\u0076\u0065ti\u0063a\u002d\u0042\u006f\u006c\u0064O\u0062\u006c\u0069\u0071\u0075\u0065");
);var _def =[]int16 {722,1000,722,722,722,722,722,722,722,722,722,667,722,722,722,722,722,722,722,612,667,667,667,667,667,667,667,667,667,722,500,611,778,778,778,778,389,389,389,389,389,389,389,389,500,778,778,667,667,667,667,667,944,722,722,722,722,722,778,1000,778,778,778,778,778,778,778,778,611,778,722,722,722,722,556,556,556,556,556,667,667,667,611,722,722,722,722,722,722,722,722,722,722,1000,722,722,722,722,667,667,667,667,500,500,500,500,333,500,722,500,500,833,500,500,581,520,500,930,500,556,278,220,394,394,333,333,333,220,350,444,444,333,444,444,333,500,333,333,250,250,747,500,556,500,500,672,556,400,333,570,500,333,278,444,444,444,444,444,444,444,500,1000,444,1000,500,444,570,500,333,333,333,556,500,556,500,500,167,500,500,500,556,333,570,549,500,500,333,333,556,333,333,278,278,278,278,278,278,278,333,556,556,278,278,394,278,570,549,570,494,278,833,333,570,556,570,556,556,556,556,500,549,556,500,500,500,500,500,722,333,500,500,500,500,750,750,300,300,330,500,500,556,540,333,333,494,1000,250,250,1000,570,570,556,500,500,555,500,500,500,333,333,333,278,444,444,549,444,444,747,333,389,389,389,389,389,500,333,500,500,278,250,500,600,333,416,333,556,500,750,300,333,1000,500,300,556,556,556,556,556,556,556,500,556,556,500,722,500,500,500,500,500,444,444,444,444,500};
func (_cc *RuneCharSafeMap )Copy ()*RuneCharSafeMap {_deb :=MakeRuneCharSafeMap (_cc .Length ());_cc .Range (func (_fef rune ,_ad CharMetrics )(_ggd bool ){_deb ._ggg [_fef ]=_ad ;return false });return _deb ;};func (_afe *ttfParser )readByte ()(_efgg uint8 ){_gg .Read (_afe ._geb ,_gg .BigEndian ,&_efgg );
return _efgg ;};var _bcc =&RuneCharSafeMap {_ggg :map[rune ]CharMetrics {' ':{Wx :250},'!':{Wx :333},'#':{Wx :500},'%':{Wx :833},'&':{Wx :778},'(':{Wx :333},')':{Wx :333},'+':{Wx :549},',':{Wx :250},'.':{Wx :250},'/':{Wx :278},'0':{Wx :500},'1':{Wx :500},'2':{Wx :500},'3':{Wx :500},'4':{Wx :500},'5':{Wx :500},'6':{Wx :500},'7':{Wx :500},'8':{Wx :500},'9':{Wx :500},':':{Wx :278},';':{Wx :278},'<':{Wx :549},'=':{Wx :549},'>':{Wx :549},'?':{Wx :444},'[':{Wx :333},']':{Wx :333},'_':{Wx :500},'{':{Wx :480},'|':{Wx :200},'}':{Wx :480},'¬':{Wx :713},'°':{Wx :400},'±':{Wx :549},'µ':{Wx :576},'×':{Wx :549},'÷':{Wx :549},'ƒ':{Wx :500},'Α':{Wx :722},'Β':{Wx :667},'Γ':{Wx :603},'Ε':{Wx :611},'Ζ':{Wx :611},'Η':{Wx :722},'Θ':{Wx :741},'Ι':{Wx :333},'Κ':{Wx :722},'Λ':{Wx :686},'Μ':{Wx :889},'Ν':{Wx :722},'Ξ':{Wx :645},'Ο':{Wx :722},'Π':{Wx :768},'Ρ':{Wx :556},'Σ':{Wx :592},'Τ':{Wx :611},'Υ':{Wx :690},'Φ':{Wx :763},'Χ':{Wx :722},'Ψ':{Wx :795},'α':{Wx :631},'β':{Wx :549},'γ':{Wx :411},'δ':{Wx :494},'ε':{Wx :439},'ζ':{Wx :494},'η':{Wx :603},'θ':{Wx :521},'ι':{Wx :329},'κ':{Wx :549},'λ':{Wx :549},'ν':{Wx :521},'ξ':{Wx :493},'ο':{Wx :549},'π':{Wx :549},'ρ':{Wx :549},'ς':{Wx :439},'σ':{Wx :603},'τ':{Wx :439},'υ':{Wx :576},'φ':{Wx :521},'χ':{Wx :549},'ψ':{Wx :686},'ω':{Wx :686},'ϑ':{Wx :631},'ϒ':{Wx :620},'ϕ':{Wx :603},'ϖ':{Wx :713},'•':{Wx :460},'…':{Wx :1000},'′':{Wx :247},'″':{Wx :411},'⁄':{Wx :167},'€':{Wx :750},'ℑ':{Wx :686},'℘':{Wx :987},'ℜ':{Wx :795},'Ω':{Wx :768},'ℵ':{Wx :823},'←':{Wx :987},'↑':{Wx :603},'→':{Wx :987},'↓':{Wx :603},'↔':{Wx :1042},'↵':{Wx :658},'⇐':{Wx :987},'⇑':{Wx :603},'⇒':{Wx :987},'⇓':{Wx :603},'⇔':{Wx :1042},'∀':{Wx :713},'∂':{Wx :494},'∃':{Wx :549},'∅':{Wx :823},'∆':{Wx :612},'∇':{Wx :713},'∈':{Wx :713},'∉':{Wx :713},'∋':{Wx :439},'∏':{Wx :823},'∑':{Wx :713},'−':{Wx :549},'∗':{Wx :500},'√':{Wx :549},'∝':{Wx :713},'∞':{Wx :713},'∠':{Wx :768},'∧':{Wx :603},'∨':{Wx :603},'∩':{Wx :768},'∪':{Wx :768},'∫':{Wx :274},'∴':{Wx :863},'∼':{Wx :549},'≅':{Wx :549},'≈':{Wx :549},'≠':{Wx :549},'≡':{Wx :549},'≤':{Wx :549},'≥':{Wx :549},'⊂':{Wx :713},'⊃':{Wx :713},'⊄':{Wx :713},'⊆':{Wx :713},'⊇':{Wx :713},'⊕':{Wx :768},'⊗':{Wx :768},'⊥':{Wx :658},'⋅':{Wx :250},'⌠':{Wx :686},'⌡':{Wx :686},'〈':{Wx :329},'〉':{Wx :329},'◊':{Wx :494},'♠':{Wx :753},'♣':{Wx :753},'♥':{Wx :753},'♦':{Wx :753},'\uf6d9':{Wx :790},'\uf6da':{Wx :790},'\uf6db':{Wx :890},'\uf8e5':{Wx :500},'\uf8e6':{Wx :603},'\uf8e7':{Wx :1000},'\uf8e8':{Wx :790},'\uf8e9':{Wx :790},'\uf8ea':{Wx :786},'\uf8eb':{Wx :384},'\uf8ec':{Wx :384},'\uf8ed':{Wx :384},'\uf8ee':{Wx :384},'\uf8ef':{Wx :384},'\uf8f0':{Wx :384},'\uf8f1':{Wx :494},'\uf8f2':{Wx :494},'\uf8f3':{Wx :494},'\uf8f4':{Wx :494},'\uf8f5':{Wx :686},'\uf8f6':{Wx :384},'\uf8f7':{Wx :384},'\uf8f8':{Wx :384},'\uf8f9':{Wx :384},'\uf8fa':{Wx :384},'\uf8fb':{Wx :384},'\uf8fc':{Wx :494},'\uf8fd':{Wx :494},'\uf8fe':{Wx :494},'\uf8ff':{Wx :790}}};
func (_cad StdFont )ToPdfObject ()_gb .PdfObject {_aae :=_gb .MakeDict ();_aae .Set ("\u0054\u0079\u0070\u0065",_gb .MakeName ("\u0046\u006f\u006e\u0074"));_aae .Set ("\u0053u\u0062\u0074\u0079\u0070\u0065",_gb .MakeName ("\u0054\u0079\u0070e\u0031"));
_aae .Set ("\u0042\u0061\u0073\u0065\u0046\u006f\u006e\u0074",_gb .MakeName (_cad .Name ()));_aae .Set ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067",_cad ._bd .ToPdfObject ());return _gb .MakeIndirectObject (_aae );};func (_ag CharMetrics )String ()string {return _ce .Sprintf ("<\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u003e",_ag .Wx ,_ag .Wy );
};var _ef *RuneCharSafeMap ;const (SymbolName =StdFontName ("\u0053\u0079\u006d\u0062\u006f\u006c");ZapfDingbatsName =StdFontName ("\u005a\u0061\u0070f\u0044\u0069\u006e\u0067\u0062\u0061\u0074\u0073"););func (_cfc StdFont )Descriptor ()Descriptor {return _cfc ._aec };
var _gac *RuneCharSafeMap ;func (_cgcb *ttfParser )ReadShort ()(_baec int16 ){_gg .Read (_cgcb ._geb ,_gg .BigEndian ,&_baec );return _baec ;};func _ece ()StdFont {_aeae .Do (_fac );_ffa :=Descriptor {Name :TimesBoldItalicName ,Family :_geg ,Weight :FontWeightBold ,Flags :0x0060,BBox :[4]float64 {-200,-218,996,921},ItalicAngle :-15,Ascent :683,Descent :-217,CapHeight :669,XHeight :462,StemV :121,StemH :42};
return NewStdFont (_ffa ,_eec );};func (_ba StdFont )Encoder ()_fe .TextEncoder {return _ba ._bd };func NewFontFile2FromPdfObject (obj _gb .PdfObject )(TtfType ,error ){obj =_gb .TraceToDirectObject (obj );_gae ,_addf :=obj .(*_gb .PdfObjectStream );if !_addf {_bf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u006f\u006e\u0074\u0046\u0069\u006c\u0065\u0032\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072e\u0061\u006d \u0028\u0025\u0054\u0029",obj );
return TtfType {},_gb .ErrTypeError ;};_bcg ,_caa :=_gb .DecodeStream (_gae );if _caa !=nil {return TtfType {},_caa ;};_dfbe :=ttfParser {_geb :_dg .NewReader (_bcg )};return _dfbe .Parse ();};func (_ae *fontMap )read (_dd StdFontName )(func ()StdFont ,bool ){_ae .Lock ();
defer _ae .Unlock ();_ca ,_ed :=_ae ._cb [_dd ];return _ca ,_ed ;};func _fge ()StdFont {_ggf .Do (_feb );_bfg :=Descriptor {Name :CourierBoldName ,Family :string (CourierName ),Weight :FontWeightBold ,Flags :0x0021,BBox :[4]float64 {-113,-250,749,801},ItalicAngle :0,Ascent :629,Descent :-157,CapHeight :562,XHeight :439,StemV :106,StemH :84};
return NewStdFont (_bfg ,_ef );};func _dee ()StdFont {_dcg .Do (_af );_efc :=Descriptor {Name :HelveticaName ,Family :string (HelveticaName ),Weight :FontWeightMedium ,Flags :0x0020,BBox :[4]float64 {-166,-225,1000,931},ItalicAngle :0,Ascent :718,Descent :-207,CapHeight :718,XHeight :523,StemV :88,StemH :76};
return NewStdFont (_efc ,_bbce );};func (_dfb *TtfType )NewEncoder ()_fe .TextEncoder {return _fe .NewTrueTypeFontEncoder (_dfb .Chars )};func (_agfe *ttfParser )parseCmapFormat0 ()error {_cebd ,_cgc :=_agfe .ReadStr (256);if _cgc !=nil {return _cgc ;};
_dae :=[]byte (_cebd );_bf .Log .Trace ("\u0070a\u0072\u0073e\u0043\u006d\u0061p\u0046\u006f\u0072\u006d\u0061\u0074\u0030:\u0020\u0025\u0073\u000a\u0064\u0061t\u0061\u0053\u0074\u0072\u003d\u0025\u002b\u0071\u000a\u0064\u0061t\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d",_agfe ._cde .String (),_cebd ,_dae );
for _gee ,_fbcd :=range _dae {_agfe ._cde .Chars [rune (_gee )]=GID (_fbcd );};return nil ;};var _ac =[]rune {'A','Æ','Á','Ă','Â','Ä','À','Ā','Ą','Å','Ã','B','C','Ć','Č','Ç','D','Ď','Đ','∆','E','É','Ě','Ê','Ë','Ė','È','Ē','Ę','Ð','€','F','G','Ğ','Ģ','H','I','Í','Î','Ï','İ','Ì','Ī','Į','J','K','Ķ','L','Ĺ','Ľ','Ļ','Ł','M','N','Ń','Ň','Ņ','Ñ','O','Œ','Ó','Ô','Ö','Ò','Ő','Ō','Ø','Õ','P','Q','R','Ŕ','Ř','Ŗ','S','Ś','Š','Ş','Ș','T','Ť','Ţ','Þ','U','Ú','Û','Ü','Ù','Ű','Ū','Ų','Ů','V','W','X','Y','Ý','Ÿ','Z','Ź','Ž','Ż','a','á','ă','â','´','ä','æ','à','ā','&','ą','å','^','~','*','@','ã','b','\\','|','{','}','[',']','˘','¦','•','c','ć','ˇ','č','ç','¸','¢','ˆ',':',',','\uf6c3','©','¤','d','†','‡','ď','đ','°','¨','÷','$','˙','ı','e','é','ě','ê','ë','ė','è','8','…','ē','—','–','ę','=','ð','!','¡','f','ﬁ','5','ﬂ','ƒ','4','⁄','g','ğ','ģ','ß','`','>','≥','«','»','‹','›','h','˝','-','i','í','î','ï','ì','ī','į','j','k','ķ','l','ĺ','ľ','ļ','<','≤','¬','◊','ł','m','¯','−','µ','×','n','ń','ň','ņ','9','≠','ñ','#','o','ó','ô','ö','œ','˛','ò','ő','ō','1','½','¼','¹','ª','º','ø','õ','p','¶','(',')','∂','%','.','·','‰','+','±','q','?','¿','"','„','“','”','‘','’','‚','\'','r','ŕ','√','ř','ŗ','®','˚','s','ś','š','ş','ș','§',';','7','6','/',' ','£','∑','t','ť','ţ','þ','3','¾','³','˜','™','2','²','u','ú','û','ü','ù','ű','ū','_','ų','ů','v','w','x','y','ý','ÿ','¥','z','ź','ž','ż','0'};
func _dgg ()StdFont {_ggf .Do (_feb );_cec :=Descriptor {Name :CourierBoldObliqueName ,Family :string (CourierName ),Weight :FontWeightBold ,Flags :0x0061,BBox :[4]float64 {-57,-250,869,801},ItalicAngle :-12,Ascent :629,Descent :-157,CapHeight :562,XHeight :439,StemV :106,StemH :84};
return NewStdFont (_cec ,_bc );};var _bbce *RuneCharSafeMap ;func (_cdf *RuneCharSafeMap )Range (f func (_ced rune ,_gbf CharMetrics )(_fg bool )){_cdf ._df .RLock ();defer _cdf ._df .RUnlock ();for _gc ,_dcf :=range _cdf ._ggg {if f (_gc ,_dcf ){break ;
};};};func init (){RegisterStdFont (CourierName ,_ada ,"\u0043\u006f\u0075\u0072\u0069\u0065\u0072\u0043\u006f\u0075\u0072\u0069e\u0072\u004e\u0065\u0077","\u0043\u006f\u0075\u0072\u0069\u0065\u0072\u004e\u0065\u0077");RegisterStdFont (CourierBoldName ,_fge ,"\u0043o\u0075r\u0069\u0065\u0072\u004e\u0065\u0077\u002c\u0042\u006f\u006c\u0064");
RegisterStdFont (CourierObliqueName ,_fb ,"\u0043\u006f\u0075\u0072\u0069\u0065\u0072\u004e\u0065\u0077\u002c\u0049t\u0061\u006c\u0069\u0063");RegisterStdFont (CourierBoldObliqueName ,_dgg ,"C\u006f\u0075\u0072\u0069er\u004ee\u0077\u002c\u0042\u006f\u006cd\u0049\u0074\u0061\u006c\u0069\u0063");
};func _af (){_bbce =MakeRuneCharSafeMap (len (_ac ));_aag =MakeRuneCharSafeMap (len (_ac ));for _aac ,_egb :=range _ac {_bbce .Write (_egb ,CharMetrics {Wx :float64 (_bbe [_aac ])});_aag .Write (_egb ,CharMetrics {Wx :float64 (_aaf [_aac ])});};_db =_bbce .Copy ();
_fcg =_aag .Copy ();};func _eae ()StdFont {_aeae .Do (_fac );_gad :=Descriptor {Name :TimesItalicName ,Family :_geg ,Weight :FontWeightMedium ,Flags :0x0060,BBox :[4]float64 {-169,-217,1010,883},ItalicAngle :-15.5,Ascent :683,Descent :-217,CapHeight :653,XHeight :441,StemV :76,StemH :32};
return NewStdFont (_gad ,_gac );};func _eg ()StdFont {_dcg .Do (_af );_deea :=Descriptor {Name :HelveticaObliqueName ,Family :string (HelveticaName ),Weight :FontWeightMedium ,Flags :0x0060,BBox :[4]float64 {-170,-225,1116,931},ItalicAngle :-12,Ascent :718,Descent :-207,CapHeight :718,XHeight :523,StemV :88,StemH :76};
return NewStdFont (_deea ,_db );};var _eec *RuneCharSafeMap ;var _aeae _f .Once ;type GlyphName =_fe .GlyphName ;func TtfParseFile (fileStr string )(TtfType ,error ){_agbc ,_bacb :=_b .Open (fileStr );if _bacb !=nil {return TtfType {},_bacb ;};defer _agbc .Close ();
return TtfParse (_agbc );};func (_cdg *RuneCharSafeMap )Write (b rune ,r CharMetrics ){_cdg ._df .Lock ();defer _cdg ._df .Unlock ();_cdg ._ggg [b ]=r ;};func (_ge StdFont )Name ()string {return string (_ge ._aec .Name )};func _fb ()StdFont {_ggf .Do (_feb );
_bde :=Descriptor {Name :CourierObliqueName ,Family :string (CourierName ),Weight :FontWeightMedium ,Flags :0x0061,BBox :[4]float64 {-27,-250,849,805},ItalicAngle :-12,Ascent :629,Descent :-157,CapHeight :562,XHeight :426,StemV :51,StemH :51};return NewStdFont (_bde ,_cgg );
};const (_geg ="\u0054\u0069\u006de\u0073";TimesRomanName =StdFontName ("T\u0069\u006d\u0065\u0073\u002d\u0052\u006f\u006d\u0061\u006e");TimesBoldName =StdFontName ("\u0054\u0069\u006d\u0065\u0073\u002d\u0042\u006f\u006c\u0064");TimesItalicName =StdFontName ("\u0054\u0069\u006de\u0073\u002d\u0049\u0074\u0061\u006c\u0069\u0063");
TimesBoldItalicName =StdFontName ("\u0054\u0069m\u0065\u0073\u002dB\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063"););func init (){RegisterStdFont (HelveticaName ,_dee ,"\u0041\u0072\u0069a\u006c");RegisterStdFont (HelveticaBoldName ,_fd ,"\u0041\u0072\u0069\u0061\u006c\u002c\u0042\u006f\u006c\u0064");
RegisterStdFont (HelveticaObliqueName ,_eg ,"\u0041\u0072\u0069a\u006c\u002c\u0049\u0074\u0061\u006c\u0069\u0063");RegisterStdFont (HelveticaBoldObliqueName ,_bdd ,"\u0041\u0072i\u0061\u006c\u002cB\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063");
};func (_bcf *ttfParser )ParseHmtx ()error {if _aab :=_bcf .Seek ("\u0068\u006d\u0074\u0078");_aab !=nil {return _aab ;};_bcf ._cde .Widths =make ([]uint16 ,0,8);for _gec :=uint16 (0);_gec < _bcf ._dgc ;_gec ++{_bcf ._cde .Widths =append (_bcf ._cde .Widths ,_bcf .ReadUShort ());
_bcf .Skip (2);};if _bcf ._dgc < _bcf ._fbae &&_bcf ._dgc > 0{_cga :=_bcf ._cde .Widths [_bcf ._dgc -1];for _agf :=_bcf ._dgc ;_agf < _bcf ._fbae ;_agf ++{_bcf ._cde .Widths =append (_bcf ._cde .Widths ,_cga );};};return nil ;};func _bg ()StdFont {_dbg :=_fe .NewSymbolEncoder ();
_daa :=Descriptor {Name :SymbolName ,Family :string (SymbolName ),Weight :FontWeightMedium ,Flags :0x0004,BBox :[4]float64 {-180,-293,1090,1010},ItalicAngle :0,Ascent :0,Descent :0,CapHeight :0,XHeight :0,StemV :85,StemH :92};return NewStdFontWithEncoding (_daa ,_bcc ,_dbg );
};func (_ccbd *ttfParser )Skip (n int ){_ccbd ._geb .Seek (int64 (n ),_cg .SeekCurrent )};type TtfType struct{UnitsPerEm uint16 ;PostScriptName string ;Bold bool ;ItalicAngle float64 ;IsFixedPitch bool ;TypoAscender int16 ;TypoDescender int16 ;UnderlinePosition int16 ;
UnderlineThickness int16 ;Xmin ,Ymin ,Xmax ,Ymax int16 ;CapHeight int16 ;Widths []uint16 ;Chars map[rune ]GID ;GlyphNames []GlyphName ;};func (_becc *ttfParser )ReadULong ()(_ecee uint32 ){_gg .Read (_becc ._geb ,_gg .BigEndian ,&_ecee );return _ecee ;
};func (_cfa *ttfParser )ParseMaxp ()error {if _febc :=_cfa .Seek ("\u006d\u0061\u0078\u0070");_febc !=nil {return _febc ;};_cfa .Skip (4);_cfa ._fbae =_cfa .ReadUShort ();return nil ;};const (CourierName =StdFontName ("\u0043o\u0075\u0072\u0069\u0065\u0072");
CourierBoldName =StdFontName ("\u0043\u006f\u0075r\u0069\u0065\u0072\u002d\u0042\u006f\u006c\u0064");CourierObliqueName =StdFontName ("\u0043o\u0075r\u0069\u0065\u0072\u002d\u004f\u0062\u006c\u0069\u0071\u0075\u0065");CourierBoldObliqueName =StdFontName ("\u0043\u006f\u0075\u0072ie\u0072\u002d\u0042\u006f\u006c\u0064\u004f\u0062\u006c\u0069\u0071\u0075\u0065");
);func (_cf *RuneCharSafeMap )Read (b rune )(CharMetrics ,bool ){_cf ._df .RLock ();defer _cf ._df .RUnlock ();_dc ,_adc :=_cf ._ggg [b ];return _dc ,_adc ;};func (_baea *ttfParser )Read32Fixed ()float64 {_aabd :=float64 (_baea .ReadShort ());_fdg :=float64 (_baea .ReadUShort ())/65536.0;
return _aabd +_fdg ;};var _aaf =[]int16 {722,1000,722,722,722,722,722,722,722,722,722,722,722,722,722,722,722,722,722,612,667,667,667,667,667,667,667,667,667,722,556,611,778,778,778,722,278,278,278,278,278,278,278,278,556,722,722,611,611,611,611,611,833,722,722,722,722,722,778,1000,778,778,778,778,778,778,778,778,667,778,722,722,722,722,667,667,667,667,667,611,611,611,667,722,722,722,722,722,722,722,722,722,667,944,667,667,667,667,611,611,611,611,556,556,556,556,333,556,889,556,556,722,556,556,584,584,389,975,556,611,278,280,389,389,333,333,333,280,350,556,556,333,556,556,333,556,333,333,278,250,737,556,611,556,556,743,611,400,333,584,556,333,278,556,556,556,556,556,556,556,556,1000,556,1000,556,556,584,611,333,333,333,611,556,611,556,556,167,611,611,611,611,333,584,549,556,556,333,333,611,333,333,278,278,278,278,278,278,278,278,556,556,278,278,400,278,584,549,584,494,278,889,333,584,611,584,611,611,611,611,556,549,611,556,611,611,611,611,944,333,611,611,611,556,834,834,333,370,365,611,611,611,556,333,333,494,889,278,278,1000,584,584,611,611,611,474,500,500,500,278,278,278,238,389,389,549,389,389,737,333,556,556,556,556,556,556,333,556,556,278,278,556,600,333,389,333,611,556,834,333,333,1000,556,333,611,611,611,611,611,611,611,556,611,611,556,778,556,556,556,556,556,500,500,500,500,556};
var _dcg _f .Once ;var _bacd =&RuneCharSafeMap {_ggg :map[rune ]CharMetrics {' ':{Wx :278},'→':{Wx :838},'↔':{Wx :1016},'↕':{Wx :458},'①':{Wx :788},'②':{Wx :788},'③':{Wx :788},'④':{Wx :788},'⑤':{Wx :788},'⑥':{Wx :788},'⑦':{Wx :788},'⑧':{Wx :788},'⑨':{Wx :788},'⑩':{Wx :788},'■':{Wx :761},'▲':{Wx :892},'▼':{Wx :892},'◆':{Wx :788},'●':{Wx :791},'◗':{Wx :438},'★':{Wx :816},'☎':{Wx :719},'☛':{Wx :960},'☞':{Wx :939},'♠':{Wx :626},'♣':{Wx :776},'♥':{Wx :694},'♦':{Wx :595},'✁':{Wx :974},'✂':{Wx :961},'✃':{Wx :974},'✄':{Wx :980},'✆':{Wx :789},'✇':{Wx :790},'✈':{Wx :791},'✉':{Wx :690},'✌':{Wx :549},'✍':{Wx :855},'✎':{Wx :911},'✏':{Wx :933},'✐':{Wx :911},'✑':{Wx :945},'✒':{Wx :974},'✓':{Wx :755},'✔':{Wx :846},'✕':{Wx :762},'✖':{Wx :761},'✗':{Wx :571},'✘':{Wx :677},'✙':{Wx :763},'✚':{Wx :760},'✛':{Wx :759},'✜':{Wx :754},'✝':{Wx :494},'✞':{Wx :552},'✟':{Wx :537},'✠':{Wx :577},'✡':{Wx :692},'✢':{Wx :786},'✣':{Wx :788},'✤':{Wx :788},'✥':{Wx :790},'✦':{Wx :793},'✧':{Wx :794},'✩':{Wx :823},'✪':{Wx :789},'✫':{Wx :841},'✬':{Wx :823},'✭':{Wx :833},'✮':{Wx :816},'✯':{Wx :831},'✰':{Wx :923},'✱':{Wx :744},'✲':{Wx :723},'✳':{Wx :749},'✴':{Wx :790},'✵':{Wx :792},'✶':{Wx :695},'✷':{Wx :776},'✸':{Wx :768},'✹':{Wx :792},'✺':{Wx :759},'✻':{Wx :707},'✼':{Wx :708},'✽':{Wx :682},'✾':{Wx :701},'✿':{Wx :826},'❀':{Wx :815},'❁':{Wx :789},'❂':{Wx :789},'❃':{Wx :707},'❄':{Wx :687},'❅':{Wx :696},'❆':{Wx :689},'❇':{Wx :786},'❈':{Wx :787},'❉':{Wx :713},'❊':{Wx :791},'❋':{Wx :785},'❍':{Wx :873},'❏':{Wx :762},'❐':{Wx :762},'❑':{Wx :759},'❒':{Wx :759},'❖':{Wx :784},'❘':{Wx :138},'❙':{Wx :277},'❚':{Wx :415},'❛':{Wx :392},'❜':{Wx :392},'❝':{Wx :668},'❞':{Wx :668},'❡':{Wx :732},'❢':{Wx :544},'❣':{Wx :544},'❤':{Wx :910},'❥':{Wx :667},'❦':{Wx :760},'❧':{Wx :760},'❶':{Wx :788},'❷':{Wx :788},'❸':{Wx :788},'❹':{Wx :788},'❺':{Wx :788},'❻':{Wx :788},'❼':{Wx :788},'❽':{Wx :788},'❾':{Wx :788},'❿':{Wx :788},'➀':{Wx :788},'➁':{Wx :788},'➂':{Wx :788},'➃':{Wx :788},'➄':{Wx :788},'➅':{Wx :788},'➆':{Wx :788},'➇':{Wx :788},'➈':{Wx :788},'➉':{Wx :788},'➊':{Wx :788},'➋':{Wx :788},'➌':{Wx :788},'➍':{Wx :788},'➎':{Wx :788},'➏':{Wx :788},'➐':{Wx :788},'➑':{Wx :788},'➒':{Wx :788},'➓':{Wx :788},'➔':{Wx :894},'➘':{Wx :748},'➙':{Wx :924},'➚':{Wx :748},'➛':{Wx :918},'➜':{Wx :927},'➝':{Wx :928},'➞':{Wx :928},'➟':{Wx :834},'➠':{Wx :873},'➡':{Wx :828},'➢':{Wx :924},'➣':{Wx :924},'➤':{Wx :917},'➥':{Wx :930},'➦':{Wx :931},'➧':{Wx :463},'➨':{Wx :883},'➩':{Wx :836},'➪':{Wx :836},'➫':{Wx :867},'➬':{Wx :867},'➭':{Wx :696},'➮':{Wx :696},'➯':{Wx :874},'➱':{Wx :874},'➲':{Wx :760},'➳':{Wx :946},'➴':{Wx :771},'➵':{Wx :865},'➶':{Wx :771},'➷':{Wx :888},'➸':{Wx :967},'➹':{Wx :888},'➺':{Wx :831},'➻':{Wx :873},'➼':{Wx :927},'➽':{Wx :970},'➾':{Wx :918},'\uf8d7':{Wx :390},'\uf8d8':{Wx :390},'\uf8d9':{Wx :317},'\uf8da':{Wx :317},'\uf8db':{Wx :276},'\uf8dc':{Wx :276},'\uf8dd':{Wx :509},'\uf8de':{Wx :509},'\uf8df':{Wx :410},'\uf8e0':{Wx :410},'\uf8e1':{Wx :234},'\uf8e2':{Wx :234},'\uf8e3':{Wx :334},'\uf8e4':{Wx :334}}};
func (_dbc *ttfParser )parseCmapFormat12 ()error {_beca :=_dbc .ReadULong ();_bf .Log .Trace ("\u0070\u0061\u0072se\u0043\u006d\u0061\u0070\u0046\u006f\u0072\u006d\u0061t\u00312\u003a \u0025s\u0020\u006e\u0075\u006d\u0047\u0072\u006f\u0075\u0070\u0073\u003d\u0025\u0064",_dbc ._cde .String (),_beca );
for _bbfca :=uint32 (0);_bbfca < _beca ;_bbfca ++{_ffce :=_dbc .ReadULong ();_age :=_dbc .ReadULong ();_ceg :=_dbc .ReadULong ();if _ffce > 0x0010FFFF||(0xD800<=_ffce &&_ffce <=0xDFFF){return _a .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0068\u0061\u0072\u0061c\u0074\u0065\u0072\u0073\u0020\u0063\u006f\u0064\u0065\u0073");
};if _age < _ffce ||_age > 0x0010FFFF||(0xD800<=_age &&_age <=0xDFFF){return _a .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0068\u0061\u0072\u0061c\u0074\u0065\u0072\u0073\u0020\u0063\u006f\u0064\u0065\u0073");};for _agdd :=_ffce ;_agdd <=_age ;
_agdd ++{if _agdd > 0x10FFFF{_bf .Log .Debug ("\u0046\u006fr\u006d\u0061\u0074\u0020\u0031\u0032\u0020\u0063\u006d\u0061\u0070\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0062\u0065\u0079\u006f\u006e\u0064\u0020\u0055\u0043\u0053\u002d\u0034");
};_dbc ._cde .Chars [rune (_agdd )]=GID (_ceg );_ceg ++;};};return nil ;};func init (){RegisterStdFont (SymbolName ,_bg ,"\u0053\u0079\u006d\u0062\u006f\u006c\u002c\u0049\u0074\u0061\u006c\u0069\u0063","S\u0079\u006d\u0062\u006f\u006c\u002c\u0042\u006f\u006c\u0064","\u0053\u0079\u006d\u0062\u006f\u006c\u002c\u0042\u006f\u006c\u0064\u0049t\u0061\u006c\u0069\u0063");
RegisterStdFont (ZapfDingbatsName ,_cbc );};var _db *RuneCharSafeMap ;var _gfa =[]int16 {667,944,667,667,667,667,667,667,667,667,667,667,667,667,667,667,722,722,722,612,667,667,667,667,667,667,667,667,667,722,500,667,722,722,722,778,389,389,389,389,389,389,389,389,500,667,667,611,611,611,611,611,889,722,722,722,722,722,722,944,722,722,722,722,722,722,722,722,611,722,667,667,667,667,556,556,556,556,556,611,611,611,611,722,722,722,722,722,722,722,722,722,667,889,667,611,611,611,611,611,611,611,500,500,500,500,333,500,722,500,500,778,500,500,570,570,500,832,500,500,278,220,348,348,333,333,333,220,350,444,444,333,444,444,333,500,333,333,250,250,747,500,500,500,500,608,500,400,333,570,500,333,278,444,444,444,444,444,444,444,500,1000,444,1000,500,444,570,500,389,389,333,556,500,556,500,500,167,500,500,500,500,333,570,549,500,500,333,333,556,333,333,278,278,278,278,278,278,278,278,500,500,278,278,382,278,570,549,606,494,278,778,333,606,576,570,556,556,556,556,500,549,556,500,500,500,500,500,722,333,500,500,500,500,750,750,300,266,300,500,500,500,500,333,333,494,833,250,250,1000,570,570,500,500,500,555,500,500,500,333,333,333,278,389,389,549,389,389,747,333,389,389,389,389,389,500,333,500,500,278,250,500,600,278,366,278,500,500,750,300,333,1000,500,300,556,556,556,556,556,556,556,500,556,556,444,667,500,444,444,444,500,389,389,389,389,500};
func (_dcda *ttfParser )ParseHead ()error {if _dca :=_dcda .Seek ("\u0068\u0065\u0061\u0064");_dca !=nil {return _dca ;};_dcda .Skip (3*4);_bec :=_dcda .ReadULong ();if _bec !=0x5F0F3CF5{_bf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0049\u006e\u0063\u006fr\u0072e\u0063\u0074\u0020\u006d\u0061\u0067\u0069\u0063\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u002e\u0020\u0046\u006fn\u0074\u0020\u006d\u0061\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0069\u0073\u0070\u006c\u0061\u0079\u0020\u0063\u006f\u0072\u0072\u0065\u0063t\u006c\u0079\u002e\u0020\u0025\u0073",_dcda );
};_dcda .Skip (2);_dcda ._cde .UnitsPerEm =_dcda .ReadUShort ();_dcda .Skip (2*8);_dcda ._cde .Xmin =_dcda .ReadShort ();_dcda ._cde .Ymin =_dcda .ReadShort ();_dcda ._cde .Xmax =_dcda .ReadShort ();_dcda ._cde .Ymax =_dcda .ReadShort ();return nil ;};
func (_fgc StdFont )GetMetricsTable ()*RuneCharSafeMap {return _fgc ._bbf };var _bb =&fontMap {_cb :make (map[StdFontName ]func ()StdFont )};func init (){RegisterStdFont (TimesRomanName ,_ff ,"\u0054\u0069\u006d\u0065\u0073\u004e\u0065\u0077\u0052\u006f\u006d\u0061\u006e","\u0054\u0069\u006de\u0073");
RegisterStdFont (TimesBoldName ,_ffc ,"\u0054i\u006de\u0073\u004e\u0065\u0077\u0052o\u006d\u0061n\u002c\u0042\u006f\u006c\u0064","\u0054\u0069\u006d\u0065\u0073\u002c\u0042\u006f\u006c\u0064");RegisterStdFont (TimesItalicName ,_eae ,"T\u0069m\u0065\u0073\u004e\u0065\u0077\u0052\u006f\u006da\u006e\u002c\u0049\u0074al\u0069\u0063","\u0054\u0069\u006de\u0073\u002c\u0049\u0074\u0061\u006c\u0069\u0063");
RegisterStdFont (TimesBoldItalicName ,_ece ,"\u0054i\u006d\u0065\u0073\u004e\u0065\u0077\u0052\u006f\u006d\u0061\u006e,\u0042\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063","\u0054\u0069m\u0065\u0073\u002cB\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063");
};func NewStdFontByName (name StdFontName )(StdFont ,bool ){_add ,_eac :=_bb .read (name );if !_eac {return StdFont {},false ;};return _add (),true ;};func NewStdFontWithEncoding (desc Descriptor ,metrics *RuneCharSafeMap ,encoder _fe .TextEncoder )StdFont {var _bbfc rune =0xA0;
if _ ,_fa :=metrics .Read (_bbfc );!_fa {_da ,_ :=metrics .Read (0x20);metrics .Write (_bbfc ,_da );};return StdFont {_aec :desc ,_bbf :metrics ,_bd :encoder };};func MakeRuneCharSafeMap (length int )*RuneCharSafeMap {return &RuneCharSafeMap {_ggg :make (map[rune ]CharMetrics ,length )};
};var _gacb =[]int16 {722,889,722,722,722,722,722,722,722,722,722,667,667,667,667,667,722,722,722,612,611,611,611,611,611,611,611,611,611,722,500,556,722,722,722,722,333,333,333,333,333,333,333,333,389,722,722,611,611,611,611,611,889,722,722,722,722,722,722,889,722,722,722,722,722,722,722,722,556,722,667,667,667,667,556,556,556,556,556,611,611,611,556,722,722,722,722,722,722,722,722,722,722,944,722,722,722,722,611,611,611,611,444,444,444,444,333,444,667,444,444,778,444,444,469,541,500,921,444,500,278,200,480,480,333,333,333,200,350,444,444,333,444,444,333,500,333,278,250,250,760,500,500,500,500,588,500,400,333,564,500,333,278,444,444,444,444,444,444,444,500,1000,444,1000,500,444,564,500,333,333,333,556,500,556,500,500,167,500,500,500,500,333,564,549,500,500,333,333,500,333,333,278,278,278,278,278,278,278,278,500,500,278,278,344,278,564,549,564,471,278,778,333,564,500,564,500,500,500,500,500,549,500,500,500,500,500,500,722,333,500,500,500,500,750,750,300,276,310,500,500,500,453,333,333,476,833,250,250,1000,564,564,500,444,444,408,444,444,444,333,333,333,180,333,333,453,333,333,760,333,389,389,389,389,389,500,278,500,500,278,250,500,600,278,326,278,500,500,750,300,333,980,500,300,500,500,500,500,500,500,500,500,500,500,500,722,500,500,500,500,500,444,444,444,444,500};
const (FontWeightMedium FontWeight =iota ;FontWeightBold ;FontWeightRoman ;);var _fcg *RuneCharSafeMap ;func IsStdFont (name StdFontName )bool {_ ,_ec :=_bb .read (name );return _ec };type FontWeight int ;func (_agd *fontMap )write (_ea StdFontName ,_fc func ()StdFont ){_agd .Lock ();
defer _agd .Unlock ();_agd ._cb [_ea ]=_fc ;};var _bc *RuneCharSafeMap ;var _bbe =[]int16 {667,1000,667,667,667,667,667,667,667,667,667,667,722,722,722,722,722,722,722,612,667,667,667,667,667,667,667,667,667,722,556,611,778,778,778,722,278,278,278,278,278,278,278,278,500,667,667,556,556,556,556,556,833,722,722,722,722,722,778,1000,778,778,778,778,778,778,778,778,667,778,722,722,722,722,667,667,667,667,667,611,611,611,667,722,722,722,722,722,722,722,722,722,667,944,667,667,667,667,611,611,611,611,556,556,556,556,333,556,889,556,556,667,556,556,469,584,389,1015,556,556,278,260,334,334,278,278,333,260,350,500,500,333,500,500,333,556,333,278,278,250,737,556,556,556,556,643,556,400,333,584,556,333,278,556,556,556,556,556,556,556,556,1000,556,1000,556,556,584,556,278,333,278,500,556,500,556,556,167,556,556,556,611,333,584,549,556,556,333,333,556,333,333,222,278,278,278,278,278,222,222,500,500,222,222,299,222,584,549,584,471,222,833,333,584,556,584,556,556,556,556,556,549,556,556,556,556,556,556,944,333,556,556,556,556,834,834,333,370,365,611,556,556,537,333,333,476,889,278,278,1000,584,584,556,556,611,355,333,333,333,222,222,222,191,333,333,453,333,333,737,333,500,500,500,500,500,556,278,556,556,278,278,556,600,278,317,278,556,556,834,333,333,1000,556,333,556,556,556,556,556,556,556,556,556,556,500,722,500,500,500,500,556,500,500,500,500,556};
func (_gdg *ttfParser )ParseComponents ()error {if _gafc :=_gdg .ParseHead ();_gafc !=nil {return _gafc ;};if _aca :=_gdg .ParseHhea ();_aca !=nil {return _aca ;};if _cdcd :=_gdg .ParseMaxp ();_cdcd !=nil {return _cdcd ;};if _gddc :=_gdg .ParseHmtx ();
_gddc !=nil {return _gddc ;};if _ ,_dga :=_gdg ._gdc ["\u006e\u0061\u006d\u0065"];_dga {if _bbfe :=_gdg .ParseName ();_bbfe !=nil {return _bbfe ;};};if _ ,_gab :=_gdg ._gdc ["\u004f\u0053\u002f\u0032"];_gab {if _afd :=_gdg .ParseOS2 ();_afd !=nil {return _afd ;
};};if _ ,_gbb :=_gdg ._gdc ["\u0070\u006f\u0073\u0074"];_gbb {if _ggeb :=_gdg .ParsePost ();_ggeb !=nil {return _ggeb ;};};if _ ,_gfb :=_gdg ._gdc ["\u0063\u006d\u0061\u0070"];_gfb {if _fga :=_gdg .ParseCmap ();_fga !=nil {return _fga ;};};return nil ;
};type StdFontName string ;type fontMap struct{_f .Mutex ;_cb map[StdFontName ]func ()StdFont ;};func (_efg *ttfParser )parseCmapFormat6 ()error {_gfe :=int (_efg .ReadUShort ());_eace :=int (_efg .ReadUShort ());_bf .Log .Trace ("p\u0061\u0072\u0073\u0065\u0043\u006d\u0061\u0070\u0046o\u0072\u006d\u0061\u0074\u0036\u003a\u0020%s\u0020\u0066\u0069\u0072s\u0074\u0043\u006f\u0064\u0065\u003d\u0025\u0064\u0020en\u0074\u0072y\u0043\u006f\u0075\u006e\u0074\u003d\u0025\u0064",_efg ._cde .String (),_gfe ,_eace );
for _cea :=0;_cea < _eace ;_cea ++{_bbcc :=GID (_efg .ReadUShort ());_efg ._cde .Chars [rune (_cea +_gfe )]=_bbcc ;};return nil ;};func NewStdFont (desc Descriptor ,metrics *RuneCharSafeMap )StdFont {return NewStdFontWithEncoding (desc ,metrics ,_fe .NewStandardEncoder ());
};func (_ab *RuneCharSafeMap )Length ()int {_ab ._df .RLock ();defer _ab ._df .RUnlock ();return len (_ab ._ggg );};func _fd ()StdFont {_dcg .Do (_af );_aef :=Descriptor {Name :HelveticaBoldName ,Family :string (HelveticaName ),Weight :FontWeightBold ,Flags :0x0020,BBox :[4]float64 {-170,-228,1003,962},ItalicAngle :0,Ascent :718,Descent :-207,CapHeight :718,XHeight :532,StemV :140,StemH :118};
return NewStdFont (_aef ,_aag );};var _bcab =[]GlyphName {"\u002en\u006f\u0074\u0064\u0065\u0066","\u002e\u006e\u0075l\u006c","\u006e\u006fn\u006d\u0061\u0072k\u0069\u006e\u0067\u0072\u0065\u0074\u0075\u0072\u006e","\u0073\u0070\u0061c\u0065","\u0065\u0078\u0063\u006c\u0061\u006d","\u0071\u0075\u006f\u0074\u0065\u0064\u0062\u006c","\u006e\u0075\u006d\u0062\u0065\u0072\u0073\u0069\u0067\u006e","\u0064\u006f\u006c\u006c\u0061\u0072","\u0070e\u0072\u0063\u0065\u006e\u0074","\u0061m\u0070\u0065\u0072\u0073\u0061\u006ed","q\u0075\u006f\u0074\u0065\u0073\u0069\u006e\u0067\u006c\u0065","\u0070a\u0072\u0065\u006e\u006c\u0065\u0066t","\u0070\u0061\u0072\u0065\u006e\u0072\u0069\u0067\u0068\u0074","\u0061\u0073\u0074\u0065\u0072\u0069\u0073\u006b","\u0070\u006c\u0075\u0073","\u0063\u006f\u006dm\u0061","\u0068\u0079\u0070\u0068\u0065\u006e","\u0070\u0065\u0072\u0069\u006f\u0064","\u0073\u006c\u0061s\u0068","\u007a\u0065\u0072\u006f","\u006f\u006e\u0065","\u0074\u0077\u006f","\u0074\u0068\u0072e\u0065","\u0066\u006f\u0075\u0072","\u0066\u0069\u0076\u0065","\u0073\u0069\u0078","\u0073\u0065\u0076e\u006e","\u0065\u0069\u0067h\u0074","\u006e\u0069\u006e\u0065","\u0063\u006f\u006co\u006e","\u0073e\u006d\u0069\u0063\u006f\u006c\u006fn","\u006c\u0065\u0073\u0073","\u0065\u0071\u0075a\u006c","\u0067r\u0065\u0061\u0074\u0065\u0072","\u0071\u0075\u0065\u0073\u0074\u0069\u006f\u006e","\u0061\u0074","\u0041","\u0042","\u0043","\u0044","\u0045","\u0046","\u0047","\u0048","\u0049","\u004a","\u004b","\u004c","\u004d","\u004e","\u004f","\u0050","\u0051","\u0052","\u0053","\u0054","\u0055","\u0056","\u0057","\u0058","\u0059","\u005a","b\u0072\u0061\u0063\u006b\u0065\u0074\u006c\u0065\u0066\u0074","\u0062a\u0063\u006b\u0073\u006c\u0061\u0073h","\u0062\u0072\u0061c\u006b\u0065\u0074\u0072\u0069\u0067\u0068\u0074","a\u0073\u0063\u0069\u0069\u0063\u0069\u0072\u0063\u0075\u006d","\u0075\u006e\u0064\u0065\u0072\u0073\u0063\u006f\u0072\u0065","\u0067\u0072\u0061v\u0065","\u0061","\u0062","\u0063","\u0064","\u0065","\u0066","\u0067","\u0068","\u0069","\u006a","\u006b","\u006c","\u006d","\u006e","\u006f","\u0070","\u0071","\u0072","\u0073","\u0074","\u0075","\u0076","\u0077","\u0078","\u0079","\u007a","\u0062r\u0061\u0063\u0065\u006c\u0065\u0066t","\u0062\u0061\u0072","\u0062\u0072\u0061\u0063\u0065\u0072\u0069\u0067\u0068\u0074","\u0061\u0073\u0063\u0069\u0069\u0074\u0069\u006c\u0064\u0065","\u0041d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0041\u0072\u0069n\u0067","\u0043\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0045\u0061\u0063\u0075\u0074\u0065","\u004e\u0074\u0069\u006c\u0064\u0065","\u004fd\u0069\u0065\u0072\u0065\u0073\u0069s","\u0055d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0061\u0061\u0063\u0075\u0074\u0065","\u0061\u0067\u0072\u0061\u0076\u0065","a\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0061d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0061\u0074\u0069\u006c\u0064\u0065","\u0061\u0072\u0069n\u0067","\u0063\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0065\u0061\u0063\u0075\u0074\u0065","\u0065\u0067\u0072\u0061\u0076\u0065","e\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0065d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0069\u0061\u0063\u0075\u0074\u0065","\u0069\u0067\u0072\u0061\u0076\u0065","i\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0069d\u0069\u0065\u0072\u0065\u0073\u0069s","\u006e\u0074\u0069\u006c\u0064\u0065","\u006f\u0061\u0063\u0075\u0074\u0065","\u006f\u0067\u0072\u0061\u0076\u0065","o\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u006fd\u0069\u0065\u0072\u0065\u0073\u0069s","\u006f\u0074\u0069\u006c\u0064\u0065","\u0075\u0061\u0063\u0075\u0074\u0065","\u0075\u0067\u0072\u0061\u0076\u0065","u\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0075d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0064\u0061\u0067\u0067\u0065\u0072","\u0064\u0065\u0067\u0072\u0065\u0065","\u0063\u0065\u006e\u0074","\u0073\u0074\u0065\u0072\u006c\u0069\u006e\u0067","\u0073e\u0063\u0074\u0069\u006f\u006e","\u0062\u0075\u006c\u006c\u0065\u0074","\u0070a\u0072\u0061\u0067\u0072\u0061\u0070h","\u0067\u0065\u0072\u006d\u0061\u006e\u0064\u0062\u006c\u0073","\u0072\u0065\u0067\u0069\u0073\u0074\u0065\u0072\u0065\u0064","\u0063o\u0070\u0079\u0072\u0069\u0067\u0068t","\u0074r\u0061\u0064\u0065\u006d\u0061\u0072k","\u0061\u0063\u0075t\u0065","\u0064\u0069\u0065\u0072\u0065\u0073\u0069\u0073","\u006e\u006f\u0074\u0065\u0071\u0075\u0061\u006c","\u0041\u0045","\u004f\u0073\u006c\u0061\u0073\u0068","\u0069\u006e\u0066\u0069\u006e\u0069\u0074\u0079","\u0070l\u0075\u0073\u006d\u0069\u006e\u0075s","\u006ce\u0073\u0073\u0065\u0071\u0075\u0061l","\u0067\u0072\u0065a\u0074\u0065\u0072\u0065\u0071\u0075\u0061\u006c","\u0079\u0065\u006e","\u006d\u0075","p\u0061\u0072\u0074\u0069\u0061\u006c\u0064\u0069\u0066\u0066","\u0073u\u006d\u006d\u0061\u0074\u0069\u006fn","\u0070r\u006f\u0064\u0075\u0063\u0074","\u0070\u0069","\u0069\u006e\u0074\u0065\u0067\u0072\u0061\u006c","o\u0072\u0064\u0066\u0065\u006d\u0069\u006e\u0069\u006e\u0065","\u006f\u0072\u0064m\u0061\u0073\u0063\u0075\u006c\u0069\u006e\u0065","\u004f\u006d\u0065g\u0061","\u0061\u0065","\u006f\u0073\u006c\u0061\u0073\u0068","\u0071\u0075\u0065s\u0074\u0069\u006f\u006e\u0064\u006f\u0077\u006e","\u0065\u0078\u0063\u006c\u0061\u006d\u0064\u006f\u0077\u006e","\u006c\u006f\u0067\u0069\u0063\u0061\u006c\u006e\u006f\u0074","\u0072a\u0064\u0069\u0063\u0061\u006c","\u0066\u006c\u006f\u0072\u0069\u006e","a\u0070\u0070\u0072\u006f\u0078\u0065\u0071\u0075\u0061\u006c","\u0044\u0065\u006ct\u0061","\u0067\u0075\u0069\u006c\u006c\u0065\u006d\u006f\u0074\u006c\u0065\u0066\u0074","\u0067\u0075\u0069\u006c\u006c\u0065\u006d\u006f\u0074r\u0069\u0067\u0068\u0074","\u0065\u006c\u006c\u0069\u0070\u0073\u0069\u0073","\u006e\u006fn\u0062\u0072\u0065a\u006b\u0069\u006e\u0067\u0073\u0070\u0061\u0063\u0065","\u0041\u0067\u0072\u0061\u0076\u0065","\u0041\u0074\u0069\u006c\u0064\u0065","\u004f\u0074\u0069\u006c\u0064\u0065","\u004f\u0045","\u006f\u0065","\u0065\u006e\u0064\u0061\u0073\u0068","\u0065\u006d\u0064\u0061\u0073\u0068","\u0071\u0075\u006ft\u0065\u0064\u0062\u006c\u006c\u0065\u0066\u0074","\u0071\u0075\u006f\u0074\u0065\u0064\u0062\u006c\u0072\u0069\u0067\u0068\u0074","\u0071u\u006f\u0074\u0065\u006c\u0065\u0066t","\u0071\u0075\u006f\u0074\u0065\u0072\u0069\u0067\u0068\u0074","\u0064\u0069\u0076\u0069\u0064\u0065","\u006co\u007a\u0065\u006e\u0067\u0065","\u0079d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0059d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e","\u0063\u0075\u0072\u0072\u0065\u006e\u0063\u0079","\u0067\u0075\u0069\u006c\u0073\u0069\u006e\u0067\u006c\u006c\u0065\u0066\u0074","\u0067\u0075\u0069\u006c\u0073\u0069\u006e\u0067\u006cr\u0069\u0067\u0068\u0074","\u0066\u0069","\u0066\u006c","\u0064a\u0067\u0067\u0065\u0072\u0064\u0062l","\u0070\u0065\u0072\u0069\u006f\u0064\u0063\u0065\u006et\u0065\u0072\u0065\u0064","\u0071\u0075\u006f\u0074\u0065\u0073\u0069\u006e\u0067l\u0062\u0061\u0073\u0065","\u0071\u0075\u006ft\u0065\u0064\u0062\u006c\u0062\u0061\u0073\u0065","p\u0065\u0072\u0074\u0068\u006f\u0075\u0073\u0061\u006e\u0064","A\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","E\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0041\u0061\u0063\u0075\u0074\u0065","\u0045d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0045\u0067\u0072\u0061\u0076\u0065","\u0049\u0061\u0063\u0075\u0074\u0065","I\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0049d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0049\u0067\u0072\u0061\u0076\u0065","\u004f\u0061\u0063\u0075\u0074\u0065","O\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0061\u0070\u0070l\u0065","\u004f\u0067\u0072\u0061\u0076\u0065","\u0055\u0061\u0063\u0075\u0074\u0065","U\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0055\u0067\u0072\u0061\u0076\u0065","\u0064\u006f\u0074\u006c\u0065\u0073\u0073\u0069","\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0074\u0069\u006cd\u0065","\u006d\u0061\u0063\u0072\u006f\u006e","\u0062\u0072\u0065v\u0065","\u0064o\u0074\u0061\u0063\u0063\u0065\u006et","\u0072\u0069\u006e\u0067","\u0063e\u0064\u0069\u006c\u006c\u0061","\u0068\u0075\u006eg\u0061\u0072\u0075\u006d\u006c\u0061\u0075\u0074","\u006f\u0067\u006f\u006e\u0065\u006b","\u0063\u0061\u0072o\u006e","\u004c\u0073\u006c\u0061\u0073\u0068","\u006c\u0073\u006c\u0061\u0073\u0068","\u0053\u0063\u0061\u0072\u006f\u006e","\u0073\u0063\u0061\u0072\u006f\u006e","\u005a\u0063\u0061\u0072\u006f\u006e","\u007a\u0063\u0061\u0072\u006f\u006e","\u0062r\u006f\u006b\u0065\u006e\u0062\u0061r","\u0045\u0074\u0068","\u0065\u0074\u0068","\u0059\u0061\u0063\u0075\u0074\u0065","\u0079\u0061\u0063\u0075\u0074\u0065","\u0054\u0068\u006fr\u006e","\u0074\u0068\u006fr\u006e","\u006d\u0069\u006eu\u0073","\u006d\u0075\u006c\u0074\u0069\u0070\u006c\u0079","o\u006e\u0065\u0073\u0075\u0070\u0065\u0072\u0069\u006f\u0072","t\u0077\u006f\u0073\u0075\u0070\u0065\u0072\u0069\u006f\u0072","\u0074\u0068\u0072\u0065\u0065\u0073\u0075\u0070\u0065\u0072\u0069\u006f\u0072","\u006fn\u0065\u0068\u0061\u006c\u0066","\u006f\u006e\u0065\u0071\u0075\u0061\u0072\u0074\u0065\u0072","\u0074\u0068\u0072\u0065\u0065\u0071\u0075\u0061\u0072\u0074\u0065\u0072\u0073","\u0066\u0072\u0061n\u0063","\u0047\u0062\u0072\u0065\u0076\u0065","\u0067\u0062\u0072\u0065\u0076\u0065","\u0049\u0064\u006f\u0074\u0061\u0063\u0063\u0065\u006e\u0074","\u0053\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0073\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0043\u0061\u0063\u0075\u0074\u0065","\u0063\u0061\u0063\u0075\u0074\u0065","\u0043\u0063\u0061\u0072\u006f\u006e","\u0063\u0063\u0061\u0072\u006f\u006e","\u0064\u0063\u0072\u006f\u0061\u0074"};
type RuneCharSafeMap struct{_ggg map[rune ]CharMetrics ;_df _f .RWMutex ;};func (_bbb *ttfParser )parseCmapVersion (_agbf int64 )error {_bf .Log .Trace ("p\u0061\u0072\u0073\u0065\u0043\u006da\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e\u003a \u006f\u0066\u0066s\u0065t\u003d\u0025\u0064",_agbf );
if _bbb ._cde .Chars ==nil {_bbb ._cde .Chars =make (map[rune ]GID );};_bbb ._geb .Seek (int64 (_bbb ._gdc ["\u0063\u006d\u0061\u0070"])+_agbf ,_cg .SeekStart );var _deec ,_eca uint32 ;_badg :=_bbb .ReadUShort ();if _badg < 8{_deec =uint32 (_bbb .ReadUShort ());
_eca =uint32 (_bbb .ReadUShort ());}else {_bbb .ReadUShort ();_deec =_bbb .ReadULong ();_eca =_bbb .ReadULong ();};_bf .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u0043m\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0020\u0066\u006f\u0072\u006d\u0061\u0074\u003d\u0025\u0064 \u006c\u0065\u006e\u0067\u0074\u0068\u003d\u0025\u0064\u0020\u006c\u0061\u006e\u0067u\u0061g\u0065\u003d\u0025\u0064",_badg ,_deec ,_eca );
switch _badg {case 0:return _bbb .parseCmapFormat0 ();case 6:return _bbb .parseCmapFormat6 ();case 12:return _bbb .parseCmapFormat12 ();default:_bf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063m\u0061\u0070\u0020\u0066\u006f\u0072\u006da\u0074\u003d\u0025\u0064",_badg );
return nil ;};};func (_abcg *ttfParser )ParseOS2 ()error {if _bef :=_abcg .Seek ("\u004f\u0053\u002f\u0032");_bef !=nil {return _bef ;};_gddd :=_abcg .ReadUShort ();_abcg .Skip (4*2);_abcg .Skip (11*2+10+4*4+4);_gfg :=_abcg .ReadUShort ();_abcg ._cde .Bold =(_gfg &32)!=0;
_abcg .Skip (2*2);_abcg ._cde .TypoAscender =_abcg .ReadShort ();_abcg ._cde .TypoDescender =_abcg .ReadShort ();if _gddd >=2{_abcg .Skip (3*2+2*4+2);_abcg ._cde .CapHeight =_abcg .ReadShort ();}else {_abcg ._cde .CapHeight =0;};return nil ;};func (_gcg *ttfParser )ParseHhea ()error {if _bfbf :=_gcg .Seek ("\u0068\u0068\u0065\u0061");
_bfbf !=nil {return _bfbf ;};_gcg .Skip (4+15*2);_gcg ._dgc =_gcg .ReadUShort ();return nil ;};var _aag *RuneCharSafeMap ;type StdFont struct{_aec Descriptor ;_bbf *RuneCharSafeMap ;_bd _fe .TextEncoder ;};var _gcc *RuneCharSafeMap ;func _bfd (_bfb map[string ]uint32 )string {var _gdd []string ;
for _dcfc :=range _bfb {_gdd =append (_gdd ,_dcfc );};_d .Slice (_gdd ,func (_cfb ,_eff int )bool {return _bfb [_gdd [_cfb ]]< _bfb [_gdd [_eff ]]});_be :=[]string {_ce .Sprintf ("\u0054\u0072\u0075\u0065Ty\u0070\u0065\u0020\u0074\u0061\u0062\u006c\u0065\u0073\u003a\u0020\u0025\u0064",len (_bfb ))};
for _ ,_dcd :=range _gdd {_be =append (_be ,_ce .Sprintf ("\u0009%\u0071\u0020\u0025\u0035\u0064",_dcd ,_bfb [_dcd ]));};return _e .Join (_be ,"\u000a");};var _ggf _f .Once ;func (_eacd *ttfParser )ReadSByte ()(_bae int8 ){_gg .Read (_eacd ._geb ,_gg .BigEndian ,&_bae );
return _bae ;};type ttfParser struct{_cde TtfType ;_geb _cg .ReadSeeker ;_gdc map[string ]uint32 ;_dgc uint16 ;_fbae uint16 ;};type Descriptor struct{Name StdFontName ;Family string ;Weight FontWeight ;Flags uint ;BBox [4]float64 ;ItalicAngle float64 ;
Ascent float64 ;Descent float64 ;CapHeight float64 ;XHeight float64 ;StemV float64 ;StemH float64 ;};func (_baf *ttfParser )Seek (tag string )error {_cedf ,_aecg :=_baf ._gdc [tag ];if !_aecg {return _ce .Errorf ("\u0074\u0061\u0062\u006ce \u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0073",tag );
};_baf ._geb .Seek (int64 (_cedf ),_cg .SeekStart );return nil ;};func (_fee *ttfParser )ParseCmap ()error {var _gbge int64 ;if _cab :=_fee .Seek ("\u0063\u006d\u0061\u0070");_cab !=nil {return _cab ;};_bf .Log .Trace ("\u0050a\u0072\u0073\u0065\u0043\u006d\u0061p");
_fee .ReadUShort ();_cbfc :=int (_fee .ReadUShort ());_bfa :=int64 (0);_eda :=int64 (0);_aabb :=int64 (0);for _fgb :=0;_fgb < _cbfc ;_fgb ++{_fgg :=_fee .ReadUShort ();_gdbf :=_fee .ReadUShort ();_gbge =int64 (_fee .ReadULong ());if _fgg ==3&&_gdbf ==1{_eda =_gbge ;
}else if _fgg ==3&&_gdbf ==10{_aabb =_gbge ;}else if _fgg ==1&&_gdbf ==0{_bfa =_gbge ;};};if _bfa !=0{if _bgcb :=_fee .parseCmapVersion (_bfa );_bgcb !=nil {return _bgcb ;};};if _eda !=0{if _cggc :=_fee .parseCmapSubtable31 (_eda );_cggc !=nil {return _cggc ;
};};if _aabb !=0{if _acc :=_fee .parseCmapVersion (_aabb );_acc !=nil {return _acc ;};};if _eda ==0&&_bfa ==0&&_aabb ==0{_bf .Log .Debug ("\u0074\u0074\u0066P\u0061\u0072\u0073\u0065\u0072\u002e\u0050\u0061\u0072\u0073\u0065\u0043\u006d\u0061\u0070\u002e\u0020\u004e\u006f\u0020\u0033\u0031\u002c\u0020\u0031\u0030\u002c\u0020\u00331\u0030\u0020\u0074\u0061\u0062\u006c\u0065\u002e");
};return nil ;};var _ Font =StdFont {};type CharMetrics struct{Wx float64 ;Wy float64 ;};func (_cba *ttfParser )parseCmapSubtable31 (_ebc int64 )error {_ddga :=make ([]rune ,0,8);_bdg :=make ([]rune ,0,8);_acf :=make ([]int16 ,0,8);_fbd :=make ([]uint16 ,0,8);
_cba ._cde .Chars =make (map[rune ]GID );_cba ._geb .Seek (int64 (_cba ._gdc ["\u0063\u006d\u0061\u0070"])+_ebc ,_cg .SeekStart );_bag :=_cba .ReadUShort ();if _bag !=4{return _cd .Errorf ("u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0073\u0075\u0062t\u0061\u0062\u006c\u0065\u0020\u0066\u006fr\u006d\u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0028\u0025w\u0029",_bag ,_gb .ErrNotSupported );
};_cba .Skip (2*2);_efcb :=int (_cba .ReadUShort ()/2);_cba .Skip (3*2);for _gea :=0;_gea < _efcb ;_gea ++{_bdg =append (_bdg ,rune (_cba .ReadUShort ()));};_cba .Skip (2);for _gbgbe :=0;_gbgbe < _efcb ;_gbgbe ++{_ddga =append (_ddga ,rune (_cba .ReadUShort ()));
};for _acg :=0;_acg < _efcb ;_acg ++{_acf =append (_acf ,_cba .ReadShort ());};_gfd ,_ :=_cba ._geb .Seek (int64 (0),_cg .SeekCurrent );for _ebg :=0;_ebg < _efcb ;_ebg ++{_fbd =append (_fbd ,_cba .ReadUShort ());};for _fcf :=0;_fcf < _efcb ;_fcf ++{_ccb :=_ddga [_fcf ];
_dba :=_bdg [_fcf ];_adde :=_acf [_fcf ];_fbc :=_fbd [_fcf ];if _fbc > 0{_cba ._geb .Seek (_gfd +2*int64 (_fcf )+int64 (_fbc ),_cg .SeekStart );};for _gggd :=_ccb ;_gggd <=_dba ;_gggd ++{if _gggd ==0xFFFF{break ;};var _ecg int32 ;if _fbc > 0{_ecg =int32 (_cba .ReadUShort ());
if _ecg > 0{_ecg +=int32 (_adde );};}else {_ecg =_gggd +int32 (_adde );};if _ecg >=65536{_ecg -=65536;};if _ecg > 0{_cba ._cde .Chars [_gggd ]=GID (_ecg );};};};return nil ;};func (_bbd *ttfParser )ParseName ()error {if _cbgb :=_bbd .Seek ("\u006e\u0061\u006d\u0065");
_cbgb !=nil {return _cbgb ;};_fcge ,_ :=_bbd ._geb .Seek (0,_cg .SeekCurrent );_bbd ._cde .PostScriptName ="";_bbd .Skip (2);_ecea :=_bbd .ReadUShort ();_bcfb :=_bbd .ReadUShort ();for _ffb :=uint16 (0);_ffb < _ecea &&_bbd ._cde .PostScriptName =="";_ffb ++{_bbd .Skip (3*2);
_gabe :=_bbd .ReadUShort ();_ccd :=_bbd .ReadUShort ();_ace :=_bbd .ReadUShort ();if _gabe ==6{_bbd ._geb .Seek (_fcge +int64 (_bcfb )+int64 (_ace ),_cg .SeekStart );_bdeb ,_fbde :=_bbd .ReadStr (int (_ccd ));if _fbde !=nil {return _fbde ;};_bdeb =_e .Replace (_bdeb ,"\u0000","",-1);
_dad ,_fbde :=_g .Compile ("\u005b\u0028\u0029\u007b\u007d\u003c\u003e\u0020\u002f%\u005b\u005c\u005d\u005d");if _fbde !=nil {return _fbde ;};_bbd ._cde .PostScriptName =_dad .ReplaceAllString (_bdeb ,"");};};if _bbd ._cde .PostScriptName ==""{_bf .Log .Debug ("\u0050a\u0072\u0073e\u004e\u0061\u006de\u003a\u0020\u0054\u0068\u0065\u0020\u006ea\u006d\u0065\u0020\u0050\u006f\u0073t\u0053\u0063\u0072\u0069\u0070\u0074\u0020\u0077\u0061\u0073\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e");
};return nil ;};func _feb (){const _gbgb =600;_dgd =MakeRuneCharSafeMap (len (_ac ));for _ ,_cfgd :=range _ac {_dgd .Write (_cfgd ,CharMetrics {Wx :_gbgb });};_ef =_dgd .Copy ();_bc =_dgd .Copy ();_cgg =_dgd .Copy ();};var _dgd *RuneCharSafeMap ;func (_fdc *ttfParser )ParsePost ()error {if _edd :=_fdc .Seek ("\u0070\u006f\u0073\u0074");
_edd !=nil {return _edd ;};_ddd :=_fdc .Read32Fixed ();_fdc ._cde .ItalicAngle =_fdc .Read32Fixed ();_fdc ._cde .UnderlinePosition =_fdc .ReadShort ();_fdc ._cde .UnderlineThickness =_fdc .ReadShort ();_fdc ._cde .IsFixedPitch =_fdc .ReadULong ()!=0;_fdc .ReadULong ();
_fdc .ReadULong ();_fdc .ReadULong ();_fdc .ReadULong ();_bf .Log .Trace ("\u0050a\u0072\u0073\u0065\u0050\u006f\u0073\u0074\u003a\u0020\u0066\u006fr\u006d\u0061\u0074\u0054\u0079\u0070\u0065\u003d\u0025\u0066",_ddd );switch _ddd {case 1.0:_fdc ._cde .GlyphNames =_bcab ;
case 2.0:_becb :=int (_fdc .ReadUShort ());_fdea :=make ([]int ,_becb );_fdc ._cde .GlyphNames =make ([]GlyphName ,_becb );_gaa :=-1;for _fdb :=0;_fdb < _becb ;_fdb ++{_cfe :=int (_fdc .ReadUShort ());_fdea [_fdb ]=_cfe ;if _cfe <=0x7fff&&_cfe > _gaa {_gaa =_cfe ;
};};var _eeb []GlyphName ;if _gaa >=len (_bcab ){_eeb =make ([]GlyphName ,_gaa -len (_bcab )+1);for _fed :=0;_fed < _gaa -len (_bcab )+1;_fed ++{_aga :=int (_fdc .readByte ());_cag ,_edea :=_fdc .ReadStr (_aga );if _edea !=nil {return _edea ;};_eeb [_fed ]=GlyphName (_cag );
};};for _fedg :=0;_fedg < _becb ;_fedg ++{_fce :=_fdea [_fedg ];if _fce < len (_bcab ){_fdc ._cde .GlyphNames [_fedg ]=_bcab [_fce ];}else if _fce >=len (_bcab )&&_fce <=32767{_fdc ._cde .GlyphNames [_fedg ]=_eeb [_fce -len (_bcab )];}else {_fdc ._cde .GlyphNames [_fedg ]="\u002e\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064";
};};case 2.5:_bed :=make ([]int ,_fdc ._fbae );for _cggd :=0;_cggd < len (_bed );_cggd ++{_aba :=int (_fdc .ReadSByte ());_bed [_cggd ]=_cggd +1+_aba ;};_fdc ._cde .GlyphNames =make ([]GlyphName ,len (_bed ));for _cbb :=0;_cbb < len (_fdc ._cde .GlyphNames );
_cbb ++{_cfba :=_bcab [_bed [_cbb ]];_fdc ._cde .GlyphNames [_cbb ]=_cfba ;};case 3.0:_bf .Log .Debug ("\u004e\u006f\u0020\u0050\u006f\u0073t\u0053\u0063\u0072i\u0070\u0074\u0020n\u0061\u006d\u0065\u0020\u0069\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0020is\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u002e");
default:_bf .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020f\u006fr\u006d\u0061\u0074\u0054\u0079\u0070\u0065=\u0025\u0066",_ddd );};return nil ;};func (_aaed *ttfParser )parseCmapSubtable10 (_aad int64 )error {if _aaed ._cde .Chars ==nil {_aaed ._cde .Chars =make (map[rune ]GID );
};_aaed ._geb .Seek (int64 (_aaed ._gdc ["\u0063\u006d\u0061\u0070"])+_aad ,_cg .SeekStart );var _cge ,_ggee uint32 ;_dbga :=_aaed .ReadUShort ();if _dbga < 8{_cge =uint32 (_aaed .ReadUShort ());_ggee =uint32 (_aaed .ReadUShort ());}else {_aaed .ReadUShort ();
_cge =_aaed .ReadULong ();_ggee =_aaed .ReadULong ();};_bf .Log .Trace ("\u0070\u0061r\u0073\u0065\u0043\u006d\u0061p\u0053\u0075\u0062\u0074\u0061b\u006c\u0065\u0031\u0030\u003a\u0020\u0066\u006f\u0072\u006d\u0061\u0074\u003d\u0025\u0064\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003d\u0025\u0064\u0020\u006c\u0061\u006e\u0067\u0075\u0061\u0067\u0065\u003d\u0025\u0064",_dbga ,_cge ,_ggee );
if _dbga !=0{return _a .New ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006d\u0061p\u0020s\u0075\u0062\u0074\u0061\u0062\u006c\u0065\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_aeg ,_eacg :=_aaed .ReadStr (256);
if _eacg !=nil {return _eacg ;};_bad :=[]byte (_aeg );for _gegf ,_bgb :=range _bad {_aaed ._cde .Chars [rune (_gegf )]=GID (_bgb );if _bgb !=0{_ce .Printf ("\u0009\u0030\u0078\u002502\u0078\u0020\u279e\u0020\u0030\u0078\u0025\u0030\u0032\u0078\u003d\u0025\u0063\u000a",_gegf ,_bgb ,rune (_bgb ));
};};return nil ;};func (_cdb StdFont )GetRuneMetrics (r rune )(CharMetrics ,bool ){_aa ,_bbc :=_cdb ._bbf .Read (r );return _aa ,_bbc ;};func RegisterStdFont (name StdFontName ,fnc func ()StdFont ,aliases ...StdFontName ){if _ ,_cfg :=_bb .read (name );
_cfg {panic ("\u0066o\u006e\u0074\u0020\u0061l\u0072\u0065\u0061\u0064\u0079 \u0072e\u0067i\u0073\u0074\u0065\u0072\u0065\u0064\u003a "+string (name ));};_bb .write (name ,fnc );for _ ,_fcd :=range aliases {RegisterStdFont (_fcd ,fnc );};};func (_fcec *ttfParser )ReadStr (length int )(string ,error ){_gbgbf :=make ([]byte ,length );
_cgec ,_ffca :=_fcec ._geb .Read (_gbgbf );if _ffca !=nil {return "",_ffca ;}else if _cgec !=length {return "",_ce .Errorf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0072\u0065\u0061\u0064\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073",length );
};return string (_gbgbf ),nil ;};func (_aaa *ttfParser )ReadUShort ()(_gce uint16 ){_gg .Read (_aaa ._geb ,_gg .BigEndian ,&_gce );return _gce ;};func _ff ()StdFont {_aeae .Do (_fac );_cedb :=Descriptor {Name :TimesRomanName ,Family :_geg ,Weight :FontWeightRoman ,Flags :0x0020,BBox :[4]float64 {-168,-218,1000,898},ItalicAngle :0,Ascent :683,Descent :-217,CapHeight :662,XHeight :450,StemV :84,StemH :28};
return NewStdFont (_cedb ,_gcc );};func (_gdb *TtfType )MakeToUnicode ()*_de .CMap {_fec :=make (map[_de .CharCode ]rune );if len (_gdb .GlyphNames )==0{return _de .NewToUnicodeCMap (_fec );};for _acb ,_bgc :=range _gdb .Chars {_afg :=_de .CharCode (_acb );
_afc :=_gdb .GlyphNames [_bgc ];_bdb ,_fbea :=_fe .GlyphToRune (_afc );if !_fbea {_bf .Log .Debug ("\u004e\u006f \u0072\u0075\u006e\u0065\u002e\u0020\u0063\u006f\u0064\u0065\u003d\u0030\u0078\u0025\u0030\u0034\u0078\u0020\u0067\u006c\u0079\u0070h=\u0025\u0071",_acb ,_afc );
_bdb =_fe .MissingCodeRune ;};_fec [_afg ]=_bdb ;};return _de .NewToUnicodeCMap (_fec );};func _bdd ()StdFont {_dcg .Do (_af );_bce :=Descriptor {Name :HelveticaBoldObliqueName ,Family :string (HelveticaName ),Weight :FontWeightBold ,Flags :0x0060,BBox :[4]float64 {-174,-228,1114,962},ItalicAngle :-12,Ascent :718,Descent :-207,CapHeight :718,XHeight :532,StemV :140,StemH :118};
return NewStdFont (_bce ,_fcg );};var _cdc =[]int16 {611,889,611,611,611,611,611,611,611,611,611,611,667,667,667,667,722,722,722,612,611,611,611,611,611,611,611,611,611,722,500,611,722,722,722,722,333,333,333,333,333,333,333,333,444,667,667,556,556,611,556,556,833,667,667,667,667,667,722,944,722,722,722,722,722,722,722,722,611,722,611,611,611,611,500,500,500,500,500,556,556,556,611,722,722,722,722,722,722,722,722,722,611,833,611,556,556,556,556,556,556,556,500,500,500,500,333,500,667,500,500,778,500,500,422,541,500,920,500,500,278,275,400,400,389,389,333,275,350,444,444,333,444,444,333,500,333,333,250,250,760,500,500,500,500,544,500,400,333,675,500,333,278,444,444,444,444,444,444,444,500,889,444,889,500,444,675,500,333,389,278,500,500,500,500,500,167,500,500,500,500,333,675,549,500,500,333,333,500,333,333,278,278,278,278,278,278,278,278,444,444,278,278,300,278,675,549,675,471,278,722,333,675,500,675,500,500,500,500,500,549,500,500,500,500,500,500,667,333,500,500,500,500,750,750,300,276,310,500,500,500,523,333,333,476,833,250,250,1000,675,675,500,500,500,420,556,556,556,333,333,333,214,389,389,453,389,389,760,333,389,389,389,389,389,500,333,500,500,278,250,500,600,278,300,278,500,500,750,300,333,980,500,300,500,500,500,500,500,500,500,500,500,500,444,667,444,444,444,444,500,389,389,389,389,500};
var _cgg *RuneCharSafeMap ;type GID =_fe .GID ;func TtfParse (r _cg .ReadSeeker )(TtfType ,error ){_ddg :=&ttfParser {_geb :r };return _ddg .Parse ()};func _ffc ()StdFont {_aeae .Do (_fac );_fde :=Descriptor {Name :TimesBoldName ,Family :_geg ,Weight :FontWeightBold ,Flags :0x0020,BBox :[4]float64 {-168,-218,1000,935},ItalicAngle :0,Ascent :683,Descent :-217,CapHeight :676,XHeight :461,StemV :139,StemH :44};
return NewStdFont (_fde ,_aee );};