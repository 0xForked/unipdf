//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_a "bytes";_b "crypto";_af "crypto/x509";_fa "encoding/asn1";_cd "encoding/pem";_bc "errors";_ac "fmt";_cg "github.com/unidoc/timestamp";_e "github.com/unidoc/unipdf/v3/common";_ad "golang.org/x/crypto/ocsp";_g "io";_fd "io/ioutil";
_c "net/http";_ab "time";);

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_dag *TimestampClient )GetEncodedToken (serverURL string ,req *_cg .Request )([]byte ,error ){if serverURL ==""{return nil ,_ac .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_ac .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_gb ,_gae :=req .Marshal ();if _gae !=nil {return nil ,_gae ;
};_cdg ,_gae :=_c .NewRequest ("\u0050\u004f\u0053\u0054",serverURL ,_a .NewBuffer (_gb ));if _gae !=nil {return nil ,_gae ;};_cdg .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065","a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079");
if _dag .BeforeHTTPRequest !=nil {if _fg :=_dag .BeforeHTTPRequest (_cdg );_fg !=nil {return nil ,_fg ;};};_gc :=_dag .HTTPClient ;if _gc ==nil {_gc =_bga ();};_bce ,_gae :=_gc .Do (_cdg );if _gae !=nil {return nil ,_gae ;};defer _bce .Body .Close ();_cb ,_gae :=_fd .ReadAll (_bce .Body );
if _gae !=nil {return nil ,_gae ;};if _bce .StatusCode !=_c .StatusOK {return nil ,_ac .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_bce .StatusCode );
};var _dg struct{Version _fa .RawValue ;Content _fa .RawValue ;};if _ ,_gae =_fa .Unmarshal (_cb ,&_dg );_gae !=nil {return nil ,_gae ;};return _dg .Content .FullBytes ,nil ;};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _g .Reader ,opts *_cg .RequestOptions )(*_cg .Request ,error ){if opts ==nil {opts =&_cg .RequestOptions {};};if opts .Hash ==0{opts .Hash =_b .SHA256 ;};if !opts .Hash .Available (){return nil ,_af .ErrUnsupportedAlgorithm ;
};_acc :=opts .Hash .New ();if _ ,_gfc :=_g .Copy (_acc ,body );_gfc !=nil {return nil ,_gfc ;};return &_cg .Request {HashAlgorithm :opts .Hash ,HashedMessage :_acc .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;

// Callbacks.
BeforeHTTPRequest func (_db *_c .Request )error ;};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_bga ()}};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_bga ()}};

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_bga ()}};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_cgc *CertClient )IsCA (cert *_af .Certificate )bool {return cert .IsCA &&_a .Equal (cert .RawIssuer ,cert .RawSubject );};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_bgc *CRLClient )MakeRequest (serverURL string ,cert *_af .Certificate )([]byte ,error ){if _bgc .HTTPClient ==nil {_bgc .HTTPClient =_bga ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_bc .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_ae ,_cce :=_bgc .HTTPClient .Get (serverURL );if _cce !=nil {return nil ,_cce ;};defer _ae .Body .Close ();_da ,_cce :=_fd .ReadAll (_ae .Body );if _cce !=nil {return nil ,_cce ;};if _bee ,_ :=_cd .Decode (_da );
_bee !=nil {_da =_bee .Bytes ;};return _da ,nil ;};

// GetIssuer retrieves the issuer of the provided certificate.
func (_ff *CertClient )GetIssuer (cert *_af .Certificate )(*_af .Certificate ,error ){for _ ,_gd :=range cert .IssuingCertificateURL {_bb ,_gg :=_ff .Get (_gd );if _gg !=nil {_e .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_gg );
continue ;};return _bb ,nil ;};return nil ,_ac .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// Get retrieves the certificate at the specified URL.
func (_cc *CertClient )Get (url string )(*_af .Certificate ,error ){if _cc .HTTPClient ==nil {_cc .HTTPClient =_bga ();};_cdd ,_cf :=_cc .HTTPClient .Get (url );if _cf !=nil {return nil ,_cf ;};defer _cdd .Body .Close ();_be ,_cf :=_fd .ReadAll (_cdd .Body );
if _cf !=nil {return nil ,_cf ;};if _ef ,_ :=_cd .Decode (_be );_ef !=nil {_be =_ef .Bytes ;};_cdb ,_cf :=_af .ParseCertificate (_be );if _cf !=nil {return nil ,_cf ;};return _cdb ,nil ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;};func _bga ()*_c .Client {return &_c .Client {Timeout :5*_ab .Second }};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_gf *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_af .Certificate )(*_ad .Response ,[]byte ,error ){if _gf .HTTPClient ==nil {_gf .HTTPClient =_bga ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_bc .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_ggd ,_ca :=_ad .CreateRequest (cert ,issuer ,&_ad .RequestOptions {Hash :_gf .Hash });if _ca !=nil {return nil ,nil ,_ca ;};_eb ,_ca :=_gf .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_a .NewReader (_ggd ));
if _ca !=nil {return nil ,nil ,_ca ;};defer _eb .Body .Close ();_fc ,_ca :=_fd .ReadAll (_eb .Body );if _ca !=nil {return nil ,nil ,_ca ;};if _bf ,_ :=_cd .Decode (_fc );_bf !=nil {_fc =_bf .Bytes ;};_bcd ,_ca :=_ad .ParseResponseForCert (_fc ,cert ,issuer );
if _ca !=nil {return nil ,nil ,_ca ;};return _bcd ,_fc ,nil ;};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_bga (),Hash :_b .SHA1 }};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _b .Hash ;};