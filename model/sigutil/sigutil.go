//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_a "bytes";_e "crypto";_ag "crypto/x509";_aa "encoding/asn1";_c "encoding/pem";_f "errors";_ec "fmt";_gc "github.com/unidoc/timestamp";_b "github.com/unidoc/unipdf/v3/common";_ef "golang.org/x/crypto/ocsp";_gd "io";_gf "io/ioutil";
_eg "net/http";_g "time";);

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_cf ()}};

// GetIssuer retrieves the issuer of the provided certificate.
func (_ff *CertClient )GetIssuer (cert *_ag .Certificate )(*_ag .Certificate ,error ){for _ ,_ed :=range cert .IssuingCertificateURL {_bb ,_cbf :=_ff .Get (_ed );if _cbf !=nil {_b .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_cbf );
continue ;};return _bb ,nil ;};return nil ,_ec .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_cf ()}};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_fa *CRLClient )MakeRequest (serverURL string ,cert *_ag .Certificate )([]byte ,error ){if _fa .HTTPClient ==nil {_fa .HTTPClient =_cf ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_f .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_da ,_fb :=_fa .HTTPClient .Get (serverURL );if _fb !=nil {return nil ,_fb ;};defer _da .Body .Close ();_fbf ,_fb :=_gf .ReadAll (_da .Body );if _fb !=nil {return nil ,_fb ;};if _agg ,_ :=_c .Decode (_fbf );
_agg !=nil {_fbf =_agg .Bytes ;};return _fbf ,nil ;};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_cg *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_ag .Certificate )(*_ef .Response ,[]byte ,error ){if _cg .HTTPClient ==nil {_cg .HTTPClient =_cf ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_f .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_bf ,_ce :=_ef .CreateRequest (cert ,issuer ,&_ef .RequestOptions {Hash :_cg .Hash });if _ce !=nil {return nil ,nil ,_ce ;};_df ,_ce :=_cg .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_a .NewReader (_bf ));
if _ce !=nil {return nil ,nil ,_ce ;};defer _df .Body .Close ();_ee ,_ce :=_gf .ReadAll (_df .Body );if _ce !=nil {return nil ,nil ,_ce ;};if _gdc ,_ :=_c .Decode (_ee );_gdc !=nil {_ee =_gdc .Bytes ;};_fc ,_ce :=_ef .ParseResponseForCert (_ee ,cert ,issuer );
if _ce !=nil {return nil ,nil ,_ce ;};return _fc ,_ee ,nil ;};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_cf (),Hash :_e .SHA1 }};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _gd .Reader ,opts *_gc .RequestOptions )(*_gc .Request ,error ){if opts ==nil {opts =&_gc .RequestOptions {};};if opts .Hash ==0{opts .Hash =_e .SHA256 ;};if !opts .Hash .Available (){return nil ,_ag .ErrUnsupportedAlgorithm ;
};_be :=opts .Hash .New ();if _ ,_bcb :=_gd .Copy (_be ,body );_bcb !=nil {return nil ,_bcb ;};return &_gc .Request {HashAlgorithm :opts .Hash ,HashedMessage :_be .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_cf ()}};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_gdb *TimestampClient )GetEncodedToken (serverURL string ,req *_gc .Request )([]byte ,error ){if serverURL ==""{return nil ,_ec .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_ec .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_ge ,_bcf :=req .Marshal ();if _bcf !=nil {return nil ,_bcf ;
};_gfe ,_bcf :=_eg .NewRequest ("\u0050\u004f\u0053\u0054",serverURL ,_a .NewBuffer (_ge ));if _bcf !=nil {return nil ,_bcf ;};_gfe .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065","a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079");
if _gdb .BeforeHTTPRequest !=nil {if _dfd :=_gdb .BeforeHTTPRequest (_gfe );_dfd !=nil {return nil ,_dfd ;};};_cc :=_gdb .HTTPClient ;if _cc ==nil {_cc =_cf ();};_ffd ,_bcf :=_cc .Do (_gfe );if _bcf !=nil {return nil ,_bcf ;};defer _ffd .Body .Close ();
_dfeg ,_bcf :=_gf .ReadAll (_ffd .Body );if _bcf !=nil {return nil ,_bcf ;};if _ffd .StatusCode !=_eg .StatusOK {return nil ,_ec .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_ffd .StatusCode );
};var _cbb struct{Version _aa .RawValue ;Content _aa .RawValue ;};if _ ,_bcf =_aa .Unmarshal (_dfeg ,&_cbb );_bcf !=nil {return nil ,_bcf ;};return _cbb .Content .FullBytes ,nil ;};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eg .Client ;

// Callbacks.
BeforeHTTPRequest func (_cgb *_eg .Request )error ;};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_bbf *CertClient )IsCA (cert *_ag .Certificate )bool {return cert .IsCA &&_a .Equal (cert .RawIssuer ,cert .RawSubject );};func _cf ()*_eg .Client {return &_eg .Client {Timeout :5*_g .Second }};

// Get retrieves the certificate at the specified URL.
func (_ga *CertClient )Get (url string )(*_ag .Certificate ,error ){if _ga .HTTPClient ==nil {_ga .HTTPClient =_cf ();};_cd ,_efc :=_ga .HTTPClient .Get (url );if _efc !=nil {return nil ,_efc ;};defer _cd .Body .Close ();_cb ,_efc :=_gf .ReadAll (_cd .Body );
if _efc !=nil {return nil ,_efc ;};if _cbg ,_ :=_c .Decode (_cb );_cbg !=nil {_cb =_cbg .Bytes ;};_dg ,_efc :=_ag .ParseCertificate (_cb );if _efc !=nil {return nil ,_efc ;};return _dg ,nil ;};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eg .Client ;};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eg .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _e .Hash ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eg .Client ;};