//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_b "bytes";_ab "crypto";_d "crypto/x509";_aa "encoding/asn1";_gc "encoding/pem";_f "errors";_bd "fmt";_cc "github.com/unidoc/timestamp";_fe "github.com/unidoc/unipdf/v3/common";_fg "golang.org/x/crypto/ocsp";_c "io";_gd "io/ioutil";
_e "net/http";_g "time";);

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_bfd ()}};

// GetIssuer retrieves the issuer of the provided certificate.
func (_gdc *CertClient )GetIssuer (cert *_d .Certificate )(*_d .Certificate ,error ){for _ ,_cb :=range cert .IssuingCertificateURL {_ac ,_ae :=_gdc .Get (_cb );if _ae !=nil {_fe .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_ae );
continue ;};return _ac ,nil ;};return nil ,_bd .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_bfd ()}};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_e .Client ;};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_e .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _ab .Hash ;};func _bfd ()*_e .Client {return &_e .Client {Timeout :5*_g .Second }};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_bfd (),Hash :_ab .SHA1 }};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _c .Reader ,opts *_cc .RequestOptions )(*_cc .Request ,error ){if opts ==nil {opts =&_cc .RequestOptions {};};if opts .Hash ==0{opts .Hash =_ab .SHA256 ;};if !opts .Hash .Available (){return nil ,_d .ErrUnsupportedAlgorithm ;
};_cag :=opts .Hash .New ();if _ ,_bga :=_c .Copy (_cag ,body );_bga !=nil {return nil ,_bga ;};return &_cc .Request {HashAlgorithm :opts .Hash ,HashedMessage :_cag .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_gdcc *TimestampClient )GetEncodedToken (serverURL string ,req *_cc .Request )([]byte ,error ){if serverURL ==""{return nil ,_bd .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_bd .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_gde ,_ec :=req .Marshal ();if _ec !=nil {return nil ,_ec ;
};_ef :=_gdcc .HTTPClient ;if _ef ==nil {_ef =_bfd ();};_af ,_ec :=_ef .Post (serverURL ,"a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079",_b .NewBuffer (_gde ));
if _ec !=nil {return nil ,_ec ;};defer _af .Body .Close ();_bf ,_ec :=_gd .ReadAll (_af .Body );if _ec !=nil {return nil ,_ec ;};if _af .StatusCode !=_e .StatusOK {return nil ,_bd .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_af .StatusCode );
};var _bc struct{Version _aa .RawValue ;Content _aa .RawValue ;};if _ ,_ec =_aa .Unmarshal (_bf ,&_bc );_ec !=nil {return nil ,_ec ;};return _bc .Content .FullBytes ,nil ;};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_bda *CRLClient )MakeRequest (serverURL string ,cert *_d .Certificate )([]byte ,error ){if _bda .HTTPClient ==nil {_bda .HTTPClient =_bfd ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_f .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_dd ,_cd :=_bda .HTTPClient .Get (serverURL );if _cd !=nil {return nil ,_cd ;};defer _dd .Body .Close ();_cf ,_cd :=_gd .ReadAll (_dd .Body );if _cd !=nil {return nil ,_cd ;};if _aae ,_ :=_gc .Decode (_cf );
_aae !=nil {_cf =_aae .Bytes ;};return _cf ,nil ;};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_bfd ()}};

// Get retrieves the certificate at the specified URL.
func (_ee *CertClient )Get (url string )(*_d .Certificate ,error ){if _ee .HTTPClient ==nil {_ee .HTTPClient =_bfd ();};_bg ,_abd :=_ee .HTTPClient .Get (url );if _abd !=nil {return nil ,_abd ;};defer _bg .Body .Close ();_ff ,_abd :=_gd .ReadAll (_bg .Body );
if _abd !=nil {return nil ,_abd ;};if _db ,_ :=_gc .Decode (_ff );_db !=nil {_ff =_db .Bytes ;};_gg ,_abd :=_d .ParseCertificate (_ff );if _abd !=nil {return nil ,_abd ;};return _gg ,nil ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_e .Client ;};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_e .Client ;};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_dbf *CertClient )IsCA (cert *_d .Certificate )bool {return cert .IsCA &&_b .Equal (cert .RawIssuer ,cert .RawSubject );};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_ca *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_d .Certificate )(*_fg .Response ,[]byte ,error ){if _ca .HTTPClient ==nil {_ca .HTTPClient =_bfd ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_f .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_ffb ,_fef :=_fg .CreateRequest (cert ,issuer ,&_fg .RequestOptions {Hash :_ca .Hash });if _fef !=nil {return nil ,nil ,_fef ;};_aef ,_fef :=_ca .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_b .NewReader (_ffb ));
if _fef !=nil {return nil ,nil ,_fef ;};defer _aef .Body .Close ();_deb ,_fef :=_gd .ReadAll (_aef .Body );if _fef !=nil {return nil ,nil ,_fef ;};if _cbb ,_ :=_gc .Decode (_deb );_cbb !=nil {_deb =_cbb .Bytes ;};_ba ,_fef :=_fg .ParseResponseForCert (_deb ,cert ,issuer );
if _fef !=nil {return nil ,nil ,_fef ;};return _ba ,_deb ,nil ;};