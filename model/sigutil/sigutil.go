//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_c "bytes";_ea "crypto";_cd "crypto/x509";_bf "encoding/pem";_a "errors";_b "fmt";_bd "github.com/unidoc/unipdf/v3/common";_ga "golang.org/x/crypto/ocsp";_ee "io/ioutil";_af "net/http";_g "time";);

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_beg (),Hash :_ea .SHA1 }};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_ad *CRLClient )MakeRequest (serverURL string ,cert *_cd .Certificate )([]byte ,error ){if _ad .HTTPClient ==nil {_ad .HTTPClient =_beg ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_a .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");};serverURL =cert .CRLDistributionPoints [0];};_cbb ,_d :=_ad .HTTPClient .Get (serverURL );if _d !=nil {return nil ,_d ;};defer _cbb .Body .Close ();_ed ,_d :=_ee .ReadAll (_cbb .Body );if _d !=nil {return nil ,_d ;};if _eda ,_ :=_bf .Decode (_ed );_eda !=nil {_ed =_eda .Bytes ;};return _ed ,nil ;};func _beg ()*_af .Client {return &_af .Client {Timeout :5*_g .Second }};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_beg ()}};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_af .Client ;};

// GetIssuer retrieves the issuer of the provided certificate.
func (_ab *CertClient )GetIssuer (cert *_cd .Certificate )(*_cd .Certificate ,error ){for _ ,_bdgc :=range cert .IssuingCertificateURL {_fc ,_gd :=_ab .Get (_bdgc );if _gd !=nil {_bd .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_gd );continue ;};return _fc ,nil ;};return nil ,_b .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// Get retrieves the certificate at the specified URL.
func (_cb *CertClient )Get (url string )(*_cd .Certificate ,error ){if _cb .HTTPClient ==nil {_cb .HTTPClient =_beg ();};_ca ,_gc :=_cb .HTTPClient .Get (url );if _gc !=nil {return nil ,_gc ;};defer _ca .Body .Close ();_f ,_gc :=_ee .ReadAll (_ca .Body );if _gc !=nil {return nil ,_gc ;};if _gg ,_ :=_bf .Decode (_f );_gg !=nil {_f =_gg .Bytes ;};_bdg ,_gc :=_cd .ParseCertificate (_f );if _gc !=nil {return nil ,_gc ;};return _bdg ,nil ;};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_beg ()}};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_eb *CertClient )IsCA (cert *_cd .Certificate )bool {return cert .IsCA &&_c .Equal (cert .RawIssuer ,cert .RawSubject );};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_fd *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_cd .Certificate )(*_ga .Response ,[]byte ,error ){if _fd .HTTPClient ==nil {_fd .HTTPClient =_beg ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_a .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");};serverURL =cert .OCSPServer [0];};_de ,_ff :=_ga .CreateRequest (cert ,issuer ,&_ga .RequestOptions {Hash :_fd .Hash });if _ff !=nil {return nil ,nil ,_ff ;};_fde ,_ff :=_fd .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_c .NewReader (_de ));if _ff !=nil {return nil ,nil ,_ff ;};defer _fde .Body .Close ();_ce ,_ff :=_ee .ReadAll (_fde .Body );if _ff !=nil {return nil ,nil ,_ff ;};if _cef ,_ :=_bf .Decode (_ce );_cef !=nil {_ce =_cef .Bytes ;};_gb ,_ff :=_ga .ParseResponseForCert (_ce ,cert ,issuer );if _ff !=nil {return nil ,nil ,_ff ;};return _gb ,_ce ,nil ;};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_af .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _ea .Hash ;};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_af .Client ;};