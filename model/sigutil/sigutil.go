//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_fb "bytes";_a "crypto";_ef "crypto/x509";_ba "encoding/asn1";_eg "encoding/pem";_b "errors";_d "fmt";_bab "github.com/unidoc/timestamp";_bc "github.com/unidoc/unipdf/v3/common";_cf "golang.org/x/crypto/ocsp";_e "io";_fe "io/ioutil";
_c "net/http";_fa "time";);

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_ada ()}};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;};func _ada ()*_c .Client {return &_c .Client {Timeout :5*_fa .Second }};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_eb *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_ef .Certificate )(*_cf .Response ,[]byte ,error ){if _eb .HTTPClient ==nil {_eb .HTTPClient =_ada ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_b .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_eeg ,_ff :=_cf .CreateRequest (cert ,issuer ,&_cf .RequestOptions {Hash :_eb .Hash });if _ff !=nil {return nil ,nil ,_ff ;};_cbf ,_ff :=_eb .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_fb .NewReader (_eeg ));
if _ff !=nil {return nil ,nil ,_ff ;};defer _cbf .Body .Close ();_fac ,_ff :=_fe .ReadAll (_cbf .Body );if _ff !=nil {return nil ,nil ,_ff ;};if _fbg ,_ :=_eg .Decode (_fac );_fbg !=nil {_fac =_fbg .Bytes ;};_ed ,_ff :=_cf .ParseResponseForCert (_fac ,cert ,issuer );
if _ff !=nil {return nil ,nil ,_ff ;};return _ed ,_fac ,nil ;};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_ea *CRLClient )MakeRequest (serverURL string ,cert *_ef .Certificate )([]byte ,error ){if _ea .HTTPClient ==nil {_ea .HTTPClient =_ada ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_b .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_ee ,_bge :=_ea .HTTPClient .Get (serverURL );if _bge !=nil {return nil ,_bge ;};defer _ee .Body .Close ();_dd ,_bge :=_fe .ReadAll (_ee .Body );if _bge !=nil {return nil ,_bge ;};if _gd ,_ :=_eg .Decode (_dd );
_gd !=nil {_dd =_gd .Bytes ;};return _dd ,nil ;};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _a .Hash ;};

// GetIssuer retrieves the issuer of the provided certificate.
func (_af *CertClient )GetIssuer (cert *_ef .Certificate )(*_ef .Certificate ,error ){for _ ,_afc :=range cert .IssuingCertificateURL {_cb ,_cg :=_af .Get (_afc );if _cg !=nil {_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_cg );
continue ;};return _cb ,nil ;};return nil ,_d .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_ada (),Hash :_a .SHA1 }};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;};

// Get retrieves the certificate at the specified URL.
func (_faa *CertClient )Get (url string )(*_ef .Certificate ,error ){if _faa .HTTPClient ==nil {_faa .HTTPClient =_ada ();};_fg ,_g :=_faa .HTTPClient .Get (url );if _g !=nil {return nil ,_g ;};defer _fg .Body .Close ();_cc ,_g :=_fe .ReadAll (_fg .Body );
if _g !=nil {return nil ,_g ;};if _aa ,_ :=_eg .Decode (_cc );_aa !=nil {_cc =_aa .Bytes ;};_bg ,_g :=_ef .ParseCertificate (_cc );if _g !=nil {return nil ,_g ;};return _bg ,nil ;};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_ada ()}};

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_ada ()}};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_gf *CertClient )IsCA (cert *_ef .Certificate )bool {return cert .IsCA &&_fb .Equal (cert .RawIssuer ,cert .RawSubject );};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_dc *TimestampClient )GetEncodedToken (serverURL string ,req *_bab .Request )([]byte ,error ){if serverURL ==""{return nil ,_d .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_d .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_gg ,_bdc :=req .Marshal ();if _bdc !=nil {return nil ,_bdc ;
};_gc :=_dc .HTTPClient ;if _gc ==nil {_gc =_ada ();};_edd ,_bdc :=_gc .Post (serverURL ,"a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079",_fb .NewBuffer (_gg ));
if _bdc !=nil {return nil ,_bdc ;};defer _edd .Body .Close ();_ac ,_bdc :=_fe .ReadAll (_edd .Body );if _bdc !=nil {return nil ,_bdc ;};if _edd .StatusCode !=_c .StatusOK {return nil ,_d .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_edd .StatusCode );
};var _bgbe struct{Version _ba .RawValue ;Content _ba .RawValue ;};if _ ,_bdc =_ba .Unmarshal (_ac ,&_bgbe );_bdc !=nil {return nil ,_bdc ;};return _bgbe .Content .FullBytes ,nil ;};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _e .Reader ,opts *_bab .RequestOptions )(*_bab .Request ,error ){if opts ==nil {opts =&_bab .RequestOptions {};};if opts .Hash ==0{opts .Hash =_a .SHA256 ;};if !opts .Hash .Available (){return nil ,_ef .ErrUnsupportedAlgorithm ;
};_aff :=opts .Hash .New ();if _ ,_ce :=_e .Copy (_aff ,body );_ce !=nil {return nil ,_ce ;};return &_bab .Request {HashAlgorithm :opts .Hash ,HashedMessage :_aff .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;};