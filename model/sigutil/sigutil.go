//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_c "bytes";_a "crypto";_cc "crypto/x509";_cf "encoding/asn1";_aa "encoding/pem";_ea "errors";_eb "fmt";_d "github.com/unidoc/timestamp";_ee "github.com/unidoc/unipdf/v3/common";_dc "golang.org/x/crypto/ocsp";_f "io";_gf "io/ioutil";
_g "net/http";_e "time";);

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_fcb ()}};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_g .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _a .Hash ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_g .Client ;};

// GetIssuer retrieves the issuer of the provided certificate.
func (_cd *CertClient )GetIssuer (cert *_cc .Certificate )(*_cc .Certificate ,error ){for _ ,_df :=range cert .IssuingCertificateURL {_be ,_ecc :=_cd .Get (_df );if _ecc !=nil {_ee .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_ecc );
continue ;};return _be ,nil ;};return nil ,_eb .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// Get retrieves the certificate at the specified URL.
func (_ca *CertClient )Get (url string )(*_cc .Certificate ,error ){if _ca .HTTPClient ==nil {_ca .HTTPClient =_fcb ();};_ab ,_ec :=_ca .HTTPClient .Get (url );if _ec !=nil {return nil ,_ec ;};defer _ab .Body .Close ();_gg ,_ec :=_gf .ReadAll (_ab .Body );
if _ec !=nil {return nil ,_ec ;};if _ef ,_ :=_aa .Decode (_gg );_ef !=nil {_gg =_ef .Bytes ;};_ac ,_ec :=_cc .ParseCertificate (_gg );if _ec !=nil {return nil ,_ec ;};return _ac ,nil ;};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_bc *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_cc .Certificate )(*_dc .Response ,[]byte ,error ){if _bc .HTTPClient ==nil {_bc .HTTPClient =_fcb ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_ea .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_fa ,_dfa :=_dc .CreateRequest (cert ,issuer ,&_dc .RequestOptions {Hash :_bc .Hash });if _dfa !=nil {return nil ,nil ,_dfa ;};_ccb ,_dfa :=_bc .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_c .NewReader (_fa ));
if _dfa !=nil {return nil ,nil ,_dfa ;};defer _ccb .Body .Close ();_gfe ,_dfa :=_gf .ReadAll (_ccb .Body );if _dfa !=nil {return nil ,nil ,_dfa ;};if _bg ,_ :=_aa .Decode (_gfe );_bg !=nil {_gfe =_bg .Bytes ;};_beg ,_dfa :=_dc .ParseResponseForCert (_gfe ,cert ,issuer );
if _dfa !=nil {return nil ,nil ,_dfa ;};return _beg ,_gfe ,nil ;};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_g .Client ;

// Callbacks.
BeforeHTTPRequest func (_bec *_g .Request )error ;};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_gad *TimestampClient )GetEncodedToken (serverURL string ,req *_d .Request )([]byte ,error ){if serverURL ==""{return nil ,_eb .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_eb .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_dfb ,_deb :=req .Marshal ();if _deb !=nil {return nil ,_deb ;
};_cab ,_deb :=_g .NewRequest ("\u0050\u004f\u0053\u0054",serverURL ,_c .NewBuffer (_dfb ));if _deb !=nil {return nil ,_deb ;};_cab .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065","a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079");
if _gad .BeforeHTTPRequest !=nil {if _ge :=_gad .BeforeHTTPRequest (_cab );_ge !=nil {return nil ,_ge ;};};_geb :=_gad .HTTPClient ;if _geb ==nil {_geb =_fcb ();};_dd ,_deb :=_geb .Do (_cab );if _deb !=nil {return nil ,_deb ;};defer _dd .Body .Close ();
_bb ,_deb :=_gf .ReadAll (_dd .Body );if _deb !=nil {return nil ,_deb ;};if _dd .StatusCode !=_g .StatusOK {return nil ,_eb .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_dd .StatusCode );
};var _da struct{Version _cf .RawValue ;Content _cf .RawValue ;};if _ ,_deb =_cf .Unmarshal (_bb ,&_da );_deb !=nil {return nil ,_deb ;};return _da .Content .FullBytes ,nil ;};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _f .Reader ,opts *_d .RequestOptions )(*_d .Request ,error ){if opts ==nil {opts =&_d .RequestOptions {};};if opts .Hash ==0{opts .Hash =_a .SHA256 ;};if !opts .Hash .Available (){return nil ,_cc .ErrUnsupportedAlgorithm ;
};_gc :=opts .Hash .New ();if _ ,_gfb :=_f .Copy (_gc ,body );_gfb !=nil {return nil ,_gfb ;};return &_d .Request {HashAlgorithm :opts .Hash ,HashedMessage :_gc .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};func _fcb ()*_g .Client {return &_g .Client {Timeout :5*_e .Second }};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_fcb ()}};

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_fcb ()}};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_cb *CRLClient )MakeRequest (serverURL string ,cert *_cc .Certificate )([]byte ,error ){if _cb .HTTPClient ==nil {_cb .HTTPClient =_fcb ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_ea .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_fd ,_de :=_cb .HTTPClient .Get (serverURL );if _de !=nil {return nil ,_de ;};defer _fd .Body .Close ();_fc ,_de :=_gf .ReadAll (_fd .Body );if _de !=nil {return nil ,_de ;};if _ga ,_ :=_aa .Decode (_fc );
_ga !=nil {_fc =_ga .Bytes ;};return _fc ,nil ;};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_fcb (),Hash :_a .SHA1 }};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_g .Client ;};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_cfa *CertClient )IsCA (cert *_cc .Certificate )bool {return cert .IsCA &&_c .Equal (cert .RawIssuer ,cert .RawSubject );};