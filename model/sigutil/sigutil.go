//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_g "bytes";_d "crypto";_ba "crypto/x509";_a "encoding/asn1";_c "encoding/pem";_dg "errors";_dd "fmt";_ac "github.com/unidoc/timestamp";_ee "github.com/unidoc/unipdf/v3/common";_ce "golang.org/x/crypto/ocsp";_fb "io";_b "io/ioutil";
_eg "net/http";_f "time";);

// Get retrieves the certificate at the specified URL.
func (_fg *CertClient )Get (url string )(*_ba .Certificate ,error ){if _fg .HTTPClient ==nil {_fg .HTTPClient =_bdf ();};_fe ,_ge :=_fg .HTTPClient .Get (url );if _ge !=nil {return nil ,_ge ;};defer _fe .Body .Close ();_ad ,_ge :=_b .ReadAll (_fe .Body );
if _ge !=nil {return nil ,_ge ;};if _dde ,_ :=_c .Decode (_ad );_dde !=nil {_ad =_dde .Bytes ;};_aa ,_ge :=_ba .ParseCertificate (_ad );if _ge !=nil {return nil ,_ge ;};return _aa ,nil ;};func _bdf ()*_eg .Client {return &_eg .Client {Timeout :5*_f .Second }};


// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_ec *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_ba .Certificate )(*_ce .Response ,[]byte ,error ){if _ec .HTTPClient ==nil {_ec .HTTPClient =_bdf ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_dg .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_gf ,_efd :=_ce .CreateRequest (cert ,issuer ,&_ce .RequestOptions {Hash :_ec .Hash });if _efd !=nil {return nil ,nil ,_efd ;};_ae ,_efd :=_ec .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_g .NewReader (_gf ));
if _efd !=nil {return nil ,nil ,_efd ;};defer _ae .Body .Close ();_feg ,_efd :=_b .ReadAll (_ae .Body );if _efd !=nil {return nil ,nil ,_efd ;};if _dc ,_ :=_c .Decode (_feg );_dc !=nil {_feg =_dc .Bytes ;};_da ,_efd :=_ce .ParseResponseForCert (_feg ,cert ,issuer );
if _efd !=nil {return nil ,nil ,_efd ;};return _da ,_feg ,nil ;};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_af *CertClient )IsCA (cert *_ba .Certificate )bool {return cert .IsCA &&_g .Equal (cert .RawIssuer ,cert .RawSubject );};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_bdf (),Hash :_d .SHA1 }};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_bdf ()}};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_adf *CRLClient )MakeRequest (serverURL string ,cert *_ba .Certificate )([]byte ,error ){if _adf .HTTPClient ==nil {_adf .HTTPClient =_bdf ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_dg .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_cg ,_fef :=_adf .HTTPClient .Get (serverURL );if _fef !=nil {return nil ,_fef ;};defer _cg .Body .Close ();_fed ,_fef :=_b .ReadAll (_cg .Body );if _fef !=nil {return nil ,_fef ;};if _gaa ,_ :=_c .Decode (_fed );
_gaa !=nil {_fed =_gaa .Bytes ;};return _fed ,nil ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eg .Client ;};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_eeg *TimestampClient )GetEncodedToken (serverURL string ,req *_ac .Request )([]byte ,error ){if serverURL ==""{return nil ,_dd .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_dd .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_gea ,_gab :=req .Marshal ();if _gab !=nil {return nil ,_gab ;
};_de ,_gab :=_eg .NewRequest ("\u0050\u004f\u0053\u0054",serverURL ,_g .NewBuffer (_gea ));if _gab !=nil {return nil ,_gab ;};_de .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065","a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079");
if _eeg .BeforeHTTPRequest !=nil {if _ccf :=_eeg .BeforeHTTPRequest (_de );_ccf !=nil {return nil ,_ccf ;};};_bd :=_eeg .HTTPClient ;if _bd ==nil {_bd =_bdf ();};_gc ,_gab :=_bd .Do (_de );if _gab !=nil {return nil ,_gab ;};defer _gc .Body .Close ();_ddb ,_gab :=_b .ReadAll (_gc .Body );
if _gab !=nil {return nil ,_gab ;};if _gc .StatusCode !=_eg .StatusOK {return nil ,_dd .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_gc .StatusCode );
};var _db struct{Version _a .RawValue ;Content _a .RawValue ;};if _ ,_gab =_a .Unmarshal (_ddb ,&_db );_gab !=nil {return nil ,_gab ;};return _db .Content .FullBytes ,nil ;};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _fb .Reader ,opts *_ac .RequestOptions )(*_ac .Request ,error ){if opts ==nil {opts =&_ac .RequestOptions {};};if opts .Hash ==0{opts .Hash =_d .SHA256 ;};if !opts .Hash .Available (){return nil ,_ba .ErrUnsupportedAlgorithm ;
};_gg :=opts .Hash .New ();if _ ,_gb :=_fb .Copy (_gg ,body );_gb !=nil {return nil ,_gb ;};return &_ac .Request {HashAlgorithm :opts .Hash ,HashedMessage :_gg .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eg .Client ;};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eg .Client ;

// Callbacks.
BeforeHTTPRequest func (_addc *_eg .Request )error ;};

// GetIssuer retrieves the issuer of the provided certificate.
func (_cc *CertClient )GetIssuer (cert *_ba .Certificate )(*_ba .Certificate ,error ){for _ ,_ef :=range cert .IssuingCertificateURL {_eb ,_ed :=_cc .Get (_ef );if _ed !=nil {_ee .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_ed );
continue ;};return _eb ,nil ;};return nil ,_dd .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_bdf ()}};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_bdf ()}};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eg .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _d .Hash ;};