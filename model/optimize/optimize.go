//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_gb "bytes";_d "crypto/md5";_f "errors";_c "github.com/unidoc/unipdf/v3/common";_acg "github.com/unidoc/unipdf/v3/contentstream";_cb "github.com/unidoc/unipdf/v3/core";_eb "github.com/unidoc/unipdf/v3/extractor";_dd "github.com/unidoc/unipdf/v3/internal/imageutil";
_b "github.com/unidoc/unipdf/v3/internal/textencoding";_aa "github.com/unidoc/unipdf/v3/model";_ac "github.com/unidoc/unitype";_g "golang.org/x/image/draw";_a "math";);

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fad *ObjectStreams )Optimize (objects []_cb .PdfObject )(_fbgd []_cb .PdfObject ,_cfbd error ){_afec :=&_cb .PdfObjectStreams {};_aacc :=make ([]_cb .PdfObject ,0,len (objects ));for _ ,_fcgef :=range objects {if _ggba ,_cdcaf :=_fcgef .(*_cb .PdfIndirectObject );
_cdcaf &&_ggba .GenerationNumber ==0{_afec .Append (_fcgef );}else {_aacc =append (_aacc ,_fcgef );};};if _afec .Len ()==0{return _aacc ,nil ;};_fbgd =make ([]_cb .PdfObject ,0,len (_aacc )+_afec .Len ()+1);if _afec .Len ()> 1{_fbgd =append (_fbgd ,_afec );
};_fbgd =append (_fbgd ,_afec .Elements ()...);_fbgd =append (_fbgd ,_aacc ...);return _fbgd ,nil ;};func _gaf (_dgbd _cb .PdfObject )[]content {if _dgbd ==nil {return nil ;};_ccd ,_edad :=_cb .GetArray (_dgbd );if !_edad {_c .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _caf []content ;for _ ,_fgga :=range _ccd .Elements (){_cgd ,_edab :=_cb .GetDict (_fgga );if !_edab {_c .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_bfd ,_edab :=_cb .GetDict (_cgd .Get ("\u0041\u0050"));if !_edab {_c .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_fgcc :=_cb .TraceToDirectObject (_bfd .Get ("\u004e"));
if _fgcc ==nil {_c .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _fdd *_cb .PdfObjectStream ;switch _cfe :=_fgcc .(type ){case *_cb .PdfObjectDictionary :_fbe ,_abe :=_cb .GetName (_cgd .Get ("\u0041\u0053"));
if !_abe {_c .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_fdd ,_abe =_cb .GetStream (_cfe .Get (*_fbe ));if !_abe {_c .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_cb .PdfObjectStream :_fdd =_cfe ;};if _fdd ==nil {_c .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_bdfc ,_ace :=_aa .NewXObjectFormFromStream (_fdd );if _ace !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ace );
continue ;};_dcc ,_ace :=_bdfc .GetContentStream ();if _ace !=nil {_c .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_ace );continue ;};_caf =append (_caf ,content {_agd :string (_dcc ),_dbb :_bdfc .Resources });
};return _caf ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eec *CleanFonts )Optimize (objects []_cb .PdfObject )(_eefb []_cb .PdfObject ,_ggb error ){var _bc map[*_cb .PdfObjectStream ]struct{};if _eec .Subset {var _edcbe error ;_bc ,_edcbe =_gff (objects );if _edcbe !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_edcbe );
return nil ,_edcbe ;};};for _ ,_dac :=range objects {_gee ,_fgcg :=_cb .GetStream (_dac );if !_fgcg {continue ;};if _ ,_egdf :=_bc [_gee ];_egdf {continue ;};_ged ,_ff :=_cb .NewEncoderFromStream (_gee );if _ff !=nil {_c .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_ff );
continue ;};_aef ,_ff :=_ged .DecodeStream (_gee );if _ff !=nil {_c .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_ff );
continue ;};if len (_aef )< 4{continue ;};_dgb :=string (_aef [:4]);if _dgb =="\u004f\u0054\u0054\u004f"{continue ;};if _dgb !="\u0000\u0001\u0000\u0000"&&_dgb !="\u0074\u0072\u0075\u0065"{continue ;};_fec ,_ff :=_ac .Parse (_gb .NewReader (_aef ));if _ff !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ff );
continue ;};_ff =_fec .Optimize ();if _ff !=nil {_c .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_ff );continue ;};var _bgg _gb .Buffer ;
_ff =_fec .Write (&_bgg );if _ff !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ff );continue ;
};if _bgg .Len ()> len (_aef ){_c .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_ggfb ,_ff :=_cb .MakeStream (_bgg .Bytes (),_cb .NewFlateEncoder ());if _ff !=nil {continue ;};*_gee =*_ggfb ;_gee .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_cb .MakeInteger (int64 (_bgg .Len ())));};return objects ,nil ;};type imageModifications struct{Scale float64 ;
Encoding _cb .StreamEncoder ;};func _add (_aeeg []_cb .PdfObject ,_afdd map[_cb .PdfObject ]_cb .PdfObject ){if len (_afdd )==0{return ;};for _ddge ,_gbcg :=range _aeeg {if _cdd ,_dcce :=_afdd [_gbcg ];_dcce {_aeeg [_ddge ]=_cdd ;continue ;};_afdd [_gbcg ]=_gbcg ;
switch _geeeg :=_gbcg .(type ){case *_cb .PdfObjectArray :_bef :=make ([]_cb .PdfObject ,_geeeg .Len ());copy (_bef ,_geeeg .Elements ());_add (_bef ,_afdd );for _afaf ,_bgfa :=range _bef {_geeeg .Set (_afaf ,_bgfa );};case *_cb .PdfObjectStreams :_add (_geeeg .Elements (),_afdd );
case *_cb .PdfObjectStream :_edae :=[]_cb .PdfObject {_geeeg .PdfObjectDictionary };_add (_edae ,_afdd );_geeeg .PdfObjectDictionary =_edae [0].(*_cb .PdfObjectDictionary );case *_cb .PdfObjectDictionary :_efa :=_geeeg .Keys ();_abca :=make ([]_cb .PdfObject ,len (_efa ));
for _ccgd ,_dfbc :=range _efa {_abca [_ccgd ]=_geeeg .Get (_dfbc );};_add (_abca ,_afdd );for _bbc ,_dccad :=range _efa {_geeeg .Set (_dccad ,_abca [_bbc ]);};case *_cb .PdfIndirectObject :_dbdf :=[]_cb .PdfObject {_geeeg .PdfObject };_add (_dbdf ,_afdd );
_geeeg .PdfObject =_dbdf [0];};};};func _abea (_bbf []_cb .PdfObject )[]*imageInfo {_aacd :=_cb .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_gage :=make (map[*_cb .PdfObjectStream ]struct{});var _fcd []*imageInfo ;for _ ,_eagd :=range _bbf {_cgf ,_cgc :=_cb .GetStream (_eagd );
if !_cgc {continue ;};if _ ,_dbe :=_gage [_cgf ];_dbe {continue ;};_gage [_cgf ]=struct{}{};_def :=_cgf .PdfObjectDictionary .Get (_aacd );_bac ,_cgc :=_cb .GetName (_def );if !_cgc ||string (*_bac )!="\u0049\u006d\u0061g\u0065"{continue ;};_aea :=&imageInfo {Stream :_cgf ,BitsPerComponent :8};
if _egda ,_fbgf :=_cb .GetIntVal (_cgf .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_fbgf {_aea .BitsPerComponent =_egda ;};if _gbe ,_dacg :=_cb .GetIntVal (_cgf .Get ("\u0057\u0069\u0064t\u0068"));_dacg {_aea .Width =_gbe ;
};if _age ,_abcc :=_cb .GetIntVal (_cgf .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_abcc {_aea .Height =_age ;};_ccf ,_cdcc :=_aa .NewPdfColorspaceFromPdfObject (_cgf .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _cdcc !=nil {_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cdcc );
continue ;};if _ccf ==nil {_adb ,_ccg :=_cb .GetName (_cgf .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _ccg {switch _adb .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_ccf =_aa .NewPdfColorspaceDeviceGray ();
_aea .BitsPerComponent =1;};};};switch _ega :=_ccf .(type ){case *_aa .PdfColorspaceDeviceRGB :_aea .ColorComponents =3;case *_aa .PdfColorspaceDeviceGray :_aea .ColorComponents =1;default:_c .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_ega );
continue ;};_fcd =append (_fcd ,_aea );};return _fcd ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cgcb *Image )Optimize (objects []_cb .PdfObject )(_feeb []_cb .PdfObject ,_afe error ){if _cgcb .ImageQuality <=0{return objects ,nil ;};_geee :=_abea (objects );if len (_geee )==0{return objects ,nil ;};_defc :=make (map[_cb .PdfObject ]_cb .PdfObject );
_gdf :=make (map[_cb .PdfObject ]struct{});for _ ,_ebgg :=range _geee {_eege :=_ebgg .Stream .Get ("\u0053\u004d\u0061s\u006b");_gdf [_eege ]=struct{}{};};for _acc ,_deef :=range _geee {_ffd :=_deef .Stream ;if _ ,_ffgcb :=_gdf [_ffd ];_ffgcb {continue ;
};_ddg ,_ece :=_aa .NewXObjectImageFromStream (_ffd );if _ece !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ece );continue ;};switch _ddg .Filter .(type ){case *_cb .JBIG2Encoder :continue ;case *_cb .CCITTFaxEncoder :continue ;
};_ceda ,_ece :=_ddg .ToImage ();if _ece !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ece );continue ;};_geb :=_cb .NewDCTEncoder ();_geb .ColorComponents =_ceda .ColorComponents ;_geb .Quality =_cgcb .ImageQuality ;
_geb .BitsPerComponent =_deef .BitsPerComponent ;_geb .Width =_deef .Width ;_geb .Height =_deef .Height ;_cdf ,_ece :=_geb .EncodeBytes (_ceda .Data );if _ece !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ece );
continue ;};var _eaacd _cb .StreamEncoder ;_eaacd =_geb ;{_agge :=_cb .NewFlateEncoder ();_gceg :=_cb .NewMultiEncoder ();_gceg .AddEncoder (_agge );_gceg .AddEncoder (_geb );_bed ,_aegf :=_gceg .EncodeBytes (_ceda .Data );if _aegf !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_aegf );
continue ;};if len (_bed )< len (_cdf ){_c .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_cdf ),len (_bed ),len (_ffd .Stream ));
_cdf =_bed ;_eaacd =_gceg ;};};_cacba :=len (_ffd .Stream );if _cacba < len (_cdf ){continue ;};_dbf :=&_cb .PdfObjectStream {Stream :_cdf };_dbf .PdfObjectReference =_ffd .PdfObjectReference ;_dbf .PdfObjectDictionary =_cb .MakeDict ();_dbf .Merge (_ffd .PdfObjectDictionary );
_dbf .Merge (_eaacd .MakeStreamDict ());_dbf .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_cb .MakeInteger (int64 (len (_cdf ))));_defc [_ffd ]=_dbf ;_geee [_acc ].Stream =_dbf ;};_feeb =make ([]_cb .PdfObject ,len (objects ));copy (_feeb ,objects );_add (_feeb ,_defc );
return _feeb ,nil ;};func _gc (_eg *_acg .ContentStreamOperations )*_acg .ContentStreamOperations {if _eg ==nil {return nil ;};_gfe :=_acg .ContentStreamOperations {};for _ ,_bf :=range *_eg {switch _bf .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_bf .Params )==6{if _ee ,_dee :=_cb .GetNumbersAsFloat (_bf .Params );_dee ==nil {if _ee [0]==1&&_ee [1]==0&&_ee [2]==0&&_ee [3]==1{_bf =&_acg .ContentStreamOperation {Params :[]_cb .PdfObject {_bf .Params [4],_bf .Params [5]},Operand :"\u0054\u0064"};
};};};};_gfe =append (_gfe ,_bf );};return &_gfe ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bca *ImagePPI )Optimize (objects []_cb .PdfObject )(_acgg []_cb .PdfObject ,_cbc error ){if _bca .ImageUpperPPI <=0{return objects ,nil ;};_ecbd :=_abea (objects );if len (_ecbd )==0{return objects ,nil ;};_ggbg :=make (map[_cb .PdfObject ]struct{});
for _ ,_dgc :=range _ecbd {_ffc :=_dgc .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_ggbg [_ffc ]=struct{}{};};_eceg :=make (map[*_cb .PdfObjectStream ]*imageInfo );for _ ,_bcgg :=range _ecbd {_eceg [_bcgg .Stream ]=_bcgg ;};var _gcgc *_cb .PdfObjectDictionary ;
for _ ,_fcge :=range objects {if _fae ,_cde :=_cb .GetDict (_fcge );_gcgc ==nil &&_cde {if _fdg ,_edf :=_cb .GetName (_fae .Get ("\u0054\u0079\u0070\u0065"));_edf &&*_fdg =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_gcgc =_fae ;};};};if _gcgc ==nil {return objects ,nil ;
};_decc ,_fbbd :=_cb .GetDict (_gcgc .Get ("\u0050\u0061\u0067e\u0073"));if !_fbbd {return objects ,nil ;};_afee ,_dcaa :=_cb .GetArray (_decc .Get ("\u004b\u0069\u0064\u0073"));if !_dcaa {return objects ,nil ;};for _ ,_bad :=range _afee .Elements (){_gfdf :=make (map[string ]*imageInfo );
_fcbd ,_bdfa :=_cb .GetDict (_bad );if !_bdfa {continue ;};_eefg ,_ :=_cgdc (_fcbd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_eefg )==0{continue ;};_fdge ,_geag :=_cb .GetDict (_fcbd .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_geag {continue ;};_egb ,_gdfa :=_aa .NewPdfPageResourcesFromDict (_fdge );if _gdfa !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_gdfa );
continue ;};_ecc ,_fbgaa :=_cb .GetDict (_fdge .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_fbgaa {continue ;};_aadf :=_ecc .Keys ();for _ ,_edaa :=range _aadf {if _cae ,_ebddd :=_cb .GetStream (_ecc .Get (_edaa ));_ebddd {if _bbdd ,_adc :=_eceg [_cae ];
_adc {_gfdf [string (_edaa )]=_bbdd ;};};};_ecbg :=_acg .NewContentStreamParser (_eefg );_eeb ,_gdfa :=_ecbg .Parse ();if _gdfa !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gdfa );continue ;};_bdc :=_acg .NewContentStreamProcessor (*_eeb );
_bdc .AddHandler (_acg .HandlerConditionEnumAllOperands ,"",func (_ceea *_acg .ContentStreamOperation ,_dbfa _acg .GraphicsState ,_degd *_aa .PdfPageResources )error {switch _ceea .Operand {case "\u0044\u006f":if len (_ceea .Params )!=1{_c .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_cfb ,_abee :=_cb .GetName (_ceea .Params [0]);if !_abee {_c .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _ebc ,_fbfg :=_gfdf [string (*_cfb )];_fbfg {_bffd :=_dbfa .CTM .ScalingFactorX ();_beb :=_dbfa .CTM .ScalingFactorY ();_dacb ,_fcac :=_bffd /72.0,_beb /72.0;_bfg ,_abgc :=float64 (_ebc .Width )/_dacb ,float64 (_ebc .Height )/_fcac ;if _dacb ==0||_fcac ==0{_bfg =72.0;
_abgc =72.0;};_ebc .PPI =_a .Max (_ebc .PPI ,_bfg );_ebc .PPI =_a .Max (_ebc .PPI ,_abgc );};};return nil ;});_gdfa =_bdc .Process (_egb );if _gdfa !=nil {_c .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_gdfa );
continue ;};};for _ ,_dfe :=range _ecbd {if _ ,_fff :=_ggbg [_dfe .Stream ];_fff {continue ;};if _dfe .PPI <=_bca .ImageUpperPPI {continue ;};_dgcc ,_efga :=_aa .NewXObjectImageFromStream (_dfe .Stream );if _efga !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_efga );
continue ;};var _cdce imageModifications ;_cdce .Scale =_bca .ImageUpperPPI /_dfe .PPI ;if _dfe .BitsPerComponent ==1&&_dfe .ColorComponents ==1{_cba :=_a .Round (_dfe .PPI /_bca .ImageUpperPPI );_bbb :=_dd .NextPowerOf2 (uint (_cba ));if _dd .InDelta (float64 (_bbb ),1/_cdce .Scale ,0.3){_cdce .Scale =float64 (1)/float64 (_bbb );
};if _ ,_cbcf :=_dgcc .Filter .(*_cb .JBIG2Encoder );!_cbcf {_cdce .Encoding =_cb .NewJBIG2Encoder ();};};if _efga =_edbg (_dgcc ,_cdce );_efga !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_efga );
continue ;};_cdce .Encoding =nil ;if _bffg ,_ffcc :=_cb .GetStream (_dfe .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_ffcc {_gde ,_dcb :=_aa .NewXObjectImageFromStream (_bffg );if _dcb !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dcb );
continue ;};if _dcb =_edbg (_gde ,_cdce );_dcb !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dcb );continue ;};};};return objects ,nil ;};func _aaa (_be *_cb .PdfObjectStream )error {_bg ,_df :=_cb .DecodeStream (_be );
if _df !=nil {return _df ;};_deb :=_acg .NewContentStreamParser (string (_bg ));_abg ,_df :=_deb .Parse ();if _df !=nil {return _df ;};_abg =_gc (_abg );_ed :=_abg .Bytes ();if len (_ed )>=len (_bg ){return nil ;};_eda ,_df :=_cb .MakeStream (_abg .Bytes (),_cb .NewFlateEncoder ());
if _df !=nil {return _df ;};_be .Stream =_eda .Stream ;_be .Merge (_eda .PdfObjectDictionary );return nil ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gfc *CombineIdenticalIndirectObjects )Optimize (objects []_cb .PdfObject )(_fda []_cb .PdfObject ,_fceg error ){_fdgd (objects );_gab :=make (map[_cb .PdfObject ]_cb .PdfObject );_bbeg :=make (map[_cb .PdfObject ]struct{});_ggg :=make (map[string ][]*_cb .PdfIndirectObject );
for _ ,_agbe :=range objects {_ebdb ,_fcb :=_agbe .(*_cb .PdfIndirectObject );if !_fcb {continue ;};if _gcdb ,_ccc :=_ebdb .PdfObject .(*_cb .PdfObjectDictionary );_ccc {if _fbaa ,_bgf :=_gcdb .Get ("\u0054\u0079\u0070\u0065").(*_cb .PdfObjectName );_bgf &&*_fbaa =="\u0050\u0061\u0067\u0065"{continue ;
};_bfc :=_d .New ();_bfc .Write ([]byte (_gcdb .WriteString ()));_feeg :=string (_bfc .Sum (nil ));_ggg [_feeg ]=append (_ggg [_feeg ],_ebdb );};};for _ ,_fbf :=range _ggg {if len (_fbf )< 2{continue ;};_dga :=_fbf [0];for _ebga :=1;_ebga < len (_fbf );
_ebga ++{_agg :=_fbf [_ebga ];_gab [_agg ]=_dga ;_bbeg [_agg ]=struct{}{};};};_fda =make ([]_cb .PdfObject ,0,len (objects )-len (_bbeg ));for _ ,_bcg :=range objects {if _ ,_fde :=_bbeg [_bcg ];_fde {continue ;};_fda =append (_fda ,_bcg );};_add (_fda ,_gab );
return _fda ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gaec *CompressStreams )Optimize (objects []_cb .PdfObject )(_bfda []_cb .PdfObject ,_egfa error ){_bfda =make ([]_cb .PdfObject ,len (objects ));copy (_bfda ,objects );for _ ,_abc :=range objects {_gge ,_gfa :=_cb .GetStream (_abc );if !_gfa {continue ;
};if _fcec :=_gge .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_fcec !=nil {if _ ,_aeg :=_cb .GetName (_fcec );_aeg {continue ;};if _agc ,_afd :=_cb .GetArray (_fcec );_afd &&_agc .Len ()> 0{continue ;};};_fbbc :=_cb .NewFlateEncoder ();var _cfaa []byte ;
_cfaa ,_egfa =_fbbc .EncodeBytes (_gge .Stream );if _egfa !=nil {return _bfda ,_egfa ;};_bcc :=_fbbc .MakeStreamDict ();if len (_cfaa )+len (_bcc .WriteString ())< len (_gge .Stream ){_gge .Stream =_cfaa ;_gge .PdfObjectDictionary .Merge (_bcc );_gge .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_cb .MakeInteger (int64 (len (_gge .Stream ))));
};};return _bfda ,nil ;};func _edbg (_bfb *_aa .XObjectImage ,_cfef imageModifications )error {_bfa ,_cfg :=_bfb .ToImage ();if _cfg !=nil {return _cfg ;};if _cfef .Scale !=0{_bfa ,_cfg =_adf (_bfa ,_cfef .Scale );if _cfg !=nil {return _cfg ;};};if _cfef .Encoding !=nil {_bfb .Filter =_cfef .Encoding ;
};_bfb .Decode =nil ;switch _ccfb :=_bfb .Filter .(type ){case *_cb .FlateEncoder :if _ccfb .Predictor !=1&&_ccfb .Predictor !=11{_ccfb .Predictor =1;};};if _cfg =_bfb .SetImage (_bfa ,nil );_cfg !=nil {_c .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_cfg );
return _cfg ;};_bfb .ToPdfObject ();return nil ;};func _bcgd (_cedb []_cb .PdfObject )objectStructure {_bedd :=objectStructure {};_cce :=false ;for _ ,_ddfb :=range _cedb {switch _deed :=_ddfb .(type ){case *_cb .PdfIndirectObject :_dda ,_aeff :=_cb .GetDict (_deed );
if !_aeff {continue ;};_dgg ,_aeff :=_cb .GetName (_dda .Get ("\u0054\u0079\u0070\u0065"));if !_aeff {continue ;};switch _dgg .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_bedd ._bbed =_dda ;_cce =true ;};};if _cce {break ;};};if !_cce {return _bedd ;
};_dbdg ,_bgad :=_cb .GetDict (_bedd ._bbed .Get ("\u0050\u0061\u0067e\u0073"));if !_bgad {return _bedd ;};_bedd ._bedb =_dbdg ;_feb ,_bgad :=_cb .GetArray (_dbdg .Get ("\u004b\u0069\u0064\u0073"));if !_bgad {return _bedd ;};for _ ,_gabf :=range _feb .Elements (){_ffcg ,_fed :=_cb .GetIndirect (_gabf );
if !_fed {break ;};_bedd ._gebg =append (_bedd ._gebg ,_ffcg );};return _bedd ;};func _afaa (_faf *_cb .PdfObjectStream ,_acf []rune ,_fcg []_ac .GlyphIndex )error {_faf ,_bfe :=_cb .GetStream (_faf );if !_bfe {_c .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _f .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gd ,_fgg :=_cb .DecodeStream (_faf );if _fgg !=nil {_c .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_fgg );
return _fgg ;};_bff ,_fgg :=_ac .Parse (_gb .NewReader (_gd ));if _fgg !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_faf .Stream ));
return _fgg ;};_fdc :=_fcg ;if len (_acf )> 0{_fca :=_bff .LookupRunes (_acf );_fdc =append (_fdc ,_fca ...);};_bff ,_fgg =_bff .SubsetKeepIndices (_fdc );if _fgg !=nil {_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_fgg );
return _fgg ;};var _bbd _gb .Buffer ;_fgg =_bff .Write (&_bbd );if _fgg !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_fgg );return _fgg ;};if _bbd .Len ()> len (_gd ){_c .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_ecg ,_fgg :=_cb .MakeStream (_bbd .Bytes (),_cb .NewFlateEncoder ());if _fgg !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_fgg );return _fgg ;
};*_faf =*_ecg ;_faf .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_cb .MakeInteger (int64 (_bbd .Len ())));return nil ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_fd []_aa .Optimizer };

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};type objectStructure struct{_bbed *_cb .PdfObjectDictionary ;_bedb *_cb .PdfObjectDictionary ;_gebg []*_cb .PdfIndirectObject ;};type content struct{_agd string ;_dbb *_aa .PdfPageResources ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _cgdc (_gaee _cb .PdfObject )(_cag string ,_affg []_cb .PdfObject ){var _ded _gb .Buffer ;switch _fecf :=_gaee .(type ){case *_cb .PdfIndirectObject :_affg =append (_affg ,_fecf );_gaee =_fecf .PdfObject ;
};switch _bab :=_gaee .(type ){case *_cb .PdfObjectStream :if _edaf ,_bea :=_cb .DecodeStream (_bab );_bea ==nil {_ded .Write (_edaf );_affg =append (_affg ,_bab );};case *_cb .PdfObjectArray :for _ ,_ffe :=range _bab .Elements (){switch _cgcc :=_ffe .(type ){case *_cb .PdfObjectStream :if _fef ,_acee :=_cb .DecodeStream (_cgcc );
_acee ==nil {_ded .Write (_fef );_affg =append (_affg ,_cgcc );};};};};return _ded .String (),_affg ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cc *CleanContentstream )Optimize (objects []_cb .PdfObject )(_ea []_cb .PdfObject ,_gca error ){_deec :=map[*_cb .PdfObjectStream ]struct{}{};var _cea []*_cb .PdfObjectStream ;_ced :=func (_egd *_cb .PdfObjectStream ){if _ ,_dc :=_deec [_egd ];!_dc {_deec [_egd ]=struct{}{};
_cea =append (_cea ,_egd );};};_gfea :=map[_cb .PdfObject ]bool {};_gcag :=map[_cb .PdfObject ]bool {};for _ ,_dfd :=range objects {switch _ef :=_dfd .(type ){case *_cb .PdfIndirectObject :switch _ege :=_ef .PdfObject .(type ){case *_cb .PdfObjectDictionary :if _geg ,_dg :=_cb .GetName (_ege .Get ("\u0054\u0079\u0070\u0065"));
!_dg ||_geg .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _eaa ,_fc :=_cb .GetStream (_ege .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_fc {_ced (_eaa );}else if _egf ,_cd :=_cb .GetArray (_ege .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_cd {var _eea []*_cb .PdfObjectStream ;for _ ,_ebg :=range _egf .Elements (){if _gea ,_fb :=_cb .GetStream (_ebg );_fb {_eea =append (_eea ,_gea );};};if len (_eea )> 0{var _edb _gb .Buffer ;for _ ,_dfa :=range _eea {if _gg ,_bd :=_cb .DecodeStream (_dfa );
_bd ==nil {_edb .Write (_gg );};_gfea [_dfa ]=true ;};_egg ,_ga :=_cb .MakeStream (_edb .Bytes (),_cb .NewFlateEncoder ());if _ga !=nil {return nil ,_ga ;};_gcag [_egg ]=true ;_ege .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_egg );_ced (_egg );
};};};case *_cb .PdfObjectStream :if _gcg ,_agb :=_cb .GetName (_ef .Get ("\u0054\u0079\u0070\u0065"));!_agb ||_gcg .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _aad ,_gad :=_cb .GetName (_ef .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_gad ||_aad .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_ced (_ef );};};for _ ,_fgc :=range _cea {_gca =_aaa (_fgc );if _gca !=nil {return nil ,_gca ;};};_ea =nil ;for _ ,_fa :=range objects {if _gfea [_fa ]{continue ;};_ea =append (_ea ,_fa );
};for _fdb :=range _gcag {_ea =append (_ea ,_fdb );};return _ea ,nil ;};func _gff (_gga []_cb .PdfObject )(_gac map[*_cb .PdfObjectStream ]struct{},_gbd error ){_gac =map[*_cb .PdfObjectStream ]struct{}{};_dec :=map[*_aa .PdfFont ]struct{}{};_edcb :=_bcgd (_gga );
for _ ,_daa :=range _edcb ._gebg {_efg ,_bdf :=_cb .GetDict (_daa .PdfObject );if !_bdf {continue ;};_cfd ,_bdf :=_cb .GetDict (_efg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_bdf {continue ;};_db ,_ :=_cgdc (_efg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_fbg ,_aac :=_aa .NewPdfPageResourcesFromDict (_cfd );if _aac !=nil {return nil ,_aac ;};_deg :=[]content {{_agd :_db ,_dbb :_fbg }};_gcb :=_gaf (_efg .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _gcb !=nil {_deg =append (_deg ,_gcb ...);};for _ ,_fcf :=range _deg {_dbd ,_afa :=_eb .NewFromContents (_fcf ._agd ,_fcf ._dbb );
if _afa !=nil {return nil ,_afa ;};_bbe ,_ ,_ ,_afa :=_dbd .ExtractPageText ();if _afa !=nil {return nil ,_afa ;};for _ ,_ec :=range _bbe .Marks ().Elements (){if _ec .Font ==nil {continue ;};if _ ,_dbg :=_dec [_ec .Font ];!_dbg {_dec [_ec .Font ]=struct{}{};
};};};};_bgb :=map[*_cb .PdfObjectStream ][]*_aa .PdfFont {};for _cbf :=range _dec {_cg :=_cbf .FontDescriptor ();if _cg ==nil ||_cg .FontFile2 ==nil {continue ;};_eaad ,_gce :=_cb .GetStream (_cg .FontFile2 );if !_gce {continue ;};_bgb [_eaad ]=append (_bgb [_eaad ],_cbf );
};for _fdf :=range _bgb {var _ggf []rune ;var _cac []_ac .GlyphIndex ;for _ ,_dgf :=range _bgb [_fdf ]{switch _eeg :=_dgf .Encoder ().(type ){case *_b .IdentityEncoder :_gbg :=_eeg .RegisteredRunes ();_agbb :=make ([]_ac .GlyphIndex ,len (_gbg ));for _ae ,_caa :=range _gbg {_agbb [_ae ]=_ac .GlyphIndex (_caa );
};_cac =append (_cac ,_agbb ...);case *_b .TrueTypeFontEncoder :_gef :=_eeg .RegisteredRunes ();_ggf =append (_ggf ,_gef ...);case _b .SimpleEncoder :_dag :=_eeg .Charcodes ();for _ ,_dca :=range _dag {_cga ,_ceb :=_eeg .CharcodeToRune (_dca );if !_ceb {_c .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_dca );
continue ;};_ggf =append (_ggf ,_cga );};};};_gbd =_afaa (_fdf ,_ggf ,_cac );if _gbd !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_gbd );
return nil ,_gbd ;};_gac [_fdf ]=struct{}{};};return _gac ,nil ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _adf (_agcf *_aa .Image ,_daf float64 )(*_aa .Image ,error ){_dcca ,_aee :=_agcf .ToGoImage ();if _aee !=nil {return nil ,_aee ;};var _ecb _dd .Image ;_cdca ,_edg :=_dcca .(*_dd .Monochrome );if _edg {if _aee =_cdca .ResolveDecode ();
_aee !=nil {return nil ,_aee ;};_ecb ,_aee =_cdca .Scale (_daf );if _aee !=nil {return nil ,_aee ;};}else {_aeed :=int (_a .RoundToEven (float64 (_agcf .Width )*_daf ));_bcgf :=int (_a .RoundToEven (float64 (_agcf .Height )*_daf ));_ecb ,_aee =_dd .NewImage (_aeed ,_bcgf ,int (_agcf .BitsPerComponent ),_agcf .ColorComponents ,nil ,nil ,nil );
if _aee !=nil {return nil ,_aee ;};_g .CatmullRom .Scale (_ecb ,_ecb .Bounds (),_dcca ,_dcca .Bounds (),_g .Over ,&_g .Options {});};_fafb :=_ecb .Base ();_aed :=&_aa .Image {Width :int64 (_fafb .Width ),Height :int64 (_fafb .Height ),BitsPerComponent :int64 (_fafb .BitsPerComponent ),ColorComponents :_fafb .ColorComponents ,Data :_fafb .Data };
_aed .SetDecode (_fafb .Decode );_aed .SetAlpha (_fafb .Alpha );return _aed ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gfg *CombineDuplicateStreams )Optimize (objects []_cb .PdfObject )(_dfg []_cb .PdfObject ,_cee error ){_cgdb :=make (map[_cb .PdfObject ]_cb .PdfObject );_feg :=make (map[_cb .PdfObject ]struct{});_edag :=make (map[string ][]*_cb .PdfObjectStream );
for _ ,_bbea :=range objects {if _gaeb ,_gcaa :=_bbea .(*_cb .PdfObjectStream );_gcaa {_agf :=_d .New ();_agf .Write (_gaeb .Stream );_agf .Write ([]byte (_gaeb .PdfObjectDictionary .WriteString ()));_fbb :=string (_agf .Sum (nil ));_edag [_fbb ]=append (_edag [_fbb ],_gaeb );
};};for _ ,_fbga :=range _edag {if len (_fbga )< 2{continue ;};_bga :=_fbga [0];for _aff :=1;_aff < len (_fbga );_aff ++{_fegd :=_fbga [_aff ];_cgdb [_fegd ]=_bga ;_feg [_fegd ]=struct{}{};};};_dfg =make ([]_cb .PdfObject ,0,len (objects )-len (_feg ));
for _ ,_cca :=range objects {if _ ,_cacb :=_feg [_cca ];_cacb {continue ;};_dfg =append (_dfg ,_cca );};_add (_dfg ,_cgdb );return _dfg ,nil ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_cb .PdfObjectStream ;PPI float64 ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_dbbb :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_dbbb .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_dbbb .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_edac :=new (ImagePPI );
_edac .ImageUpperPPI =options .ImageUpperPPI ;_dbbb .Append (_edac );};if options .ImageQuality > 0{_accd :=new (Image );_accd .ImageQuality =options .ImageQuality ;_dbbb .Append (_accd );};if options .CombineDuplicateDirectObjects {_dbbb .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_dbbb .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_dbbb .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_dbbb .Append (new (ObjectStreams ));
};if options .CompressStreams {_dbbb .Append (new (CompressStreams ));};return _dbbb ;};func _fdgd (_cdb []_cb .PdfObject ){for _cbab ,_bbfc :=range _cdb {switch _fagd :=_bbfc .(type ){case *_cb .PdfIndirectObject :_fagd .ObjectNumber =int64 (_cbab +1);
_fagd .GenerationNumber =0;case *_cb .PdfObjectStream :_fagd .ObjectNumber =int64 (_cbab +1);_fagd .GenerationNumber =0;case *_cb .PdfObjectStreams :_fagd .ObjectNumber =int64 (_cbab +1);_fagd .GenerationNumber =0;};};};

// Append appends optimizers to the chain.
func (_ag *Chain )Append (optimizers ..._aa .Optimizer ){_ag ._fd =append (_ag ._fd ,optimizers ...)};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ge *Chain )Optimize (objects []_cb .PdfObject )(_ce []_cb .PdfObject ,_ca error ){_fg :=objects ;for _ ,_de :=range _ge ._fd {_ab ,_bb :=_de .Optimize (_fg );if _bb !=nil {_c .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_bb );
continue ;};_fg =_ab ;};return _fg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ade *CombineDuplicateDirectObjects )Optimize (objects []_cb .PdfObject )(_ddf []_cb .PdfObject ,_ebd error ){_fdgd (objects );_gbc :=make (map[string ][]*_cb .PdfObjectDictionary );var _fce func (_fee *_cb .PdfObjectDictionary );_fce =func (_cdc *_cb .PdfObjectDictionary ){for _ ,_fab :=range _cdc .Keys (){_dfdc :=_cdc .Get (_fab );
if _eed ,_ba :=_dfdc .(*_cb .PdfObjectDictionary );_ba {_fag :=_d .New ();_fag .Write ([]byte (_eed .WriteString ()));_caca :=string (_fag .Sum (nil ));_gbc [_caca ]=append (_gbc [_caca ],_eed );_fce (_eed );};};};for _ ,_gffc :=range objects {_dea ,_fga :=_gffc .(*_cb .PdfIndirectObject );
if !_fga {continue ;};if _dce ,_cef :=_dea .PdfObject .(*_cb .PdfObjectDictionary );_cef {_fce (_dce );};};_fdba :=make ([]_cb .PdfObject ,0,len (_gbc ));_bbg :=make (map[_cb .PdfObject ]_cb .PdfObject );for _ ,_ffg :=range _gbc {if len (_ffg )< 2{continue ;
};_egfb :=_cb .MakeDict ();_egfb .Merge (_ffg [0]);_fba :=_cb .MakeIndirectObject (_egfb );_fdba =append (_fdba ,_fba );for _gag :=0;_gag < len (_ffg );_gag ++{_eff :=_ffg [_gag ];_bbg [_eff ]=_fba ;};};_ddf =make ([]_cb .PdfObject ,len (objects ));copy (_ddf ,objects );
_ddf =append (_fdba ,_ddf ...);_add (_ddf ,_bbg );return _ddf ,nil ;};