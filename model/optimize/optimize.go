//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_a "bytes";_fe "crypto/md5";_bd "errors";_ce "fmt";_de "github.com/unidoc/unipdf/v3/common";_cb "github.com/unidoc/unipdf/v3/contentstream";_f "github.com/unidoc/unipdf/v3/core";_fb "github.com/unidoc/unipdf/v3/extractor";_bc "github.com/unidoc/unipdf/v3/internal/textencoding";_gf "github.com/unidoc/unipdf/v3/model";_cec "github.com/unidoc/unitype";_b "golang.org/x/image/draw";_d "image";_c "math";);type content struct{_bggb string ;_daf *_gf .PdfPageResources ;};func _eaga (_gaed []_f .PdfObject )objectStructure {_fefc :=objectStructure {};_aeb :=false ;for _ ,_bbdc :=range _gaed {switch _daec :=_bbdc .(type ){case *_f .PdfIndirectObject :_bbb ,_faegc :=_f .GetDict (_daec );if !_faegc {continue ;};_fbeb ,_faegc :=_f .GetName (_bbb .Get ("\u0054\u0079\u0070\u0065"));if !_faegc {continue ;};switch _fbeb .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_fefc ._afaf =_bbb ;_aeb =true ;};};if _aeb {break ;};};if !_aeb {return _fefc ;};_cfa ,_debc :=_f .GetDict (_fefc ._afaf .Get ("\u0050\u0061\u0067e\u0073"));if !_debc {return _fefc ;};_fefc ._baeb =_cfa ;_bead ,_debc :=_f .GetArray (_cfa .Get ("\u004b\u0069\u0064\u0073"));if !_debc {return _fefc ;};for _ ,_eeaf :=range _bead .Elements (){_eeca ,_dcdg :=_f .GetIndirect (_eeaf );if !_dcdg {break ;};_fefc ._ccgg =append (_fefc ._ccgg ,_eeca );};return _fefc ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};func _ggcc (_fadg []_f .PdfObject )[]*imageInfo {_deb :=_f .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_bec :=make (map[*_f .PdfObjectStream ]struct{});var _dda error ;var _afec []*imageInfo ;for _ ,_aaed :=range _fadg {_ggg ,_aded :=_f .GetStream (_aaed );if !_aded {continue ;};if _ ,_cca :=_bec [_ggg ];_cca {continue ;};_bec [_ggg ]=struct{}{};_eca :=_ggg .PdfObjectDictionary .Get (_deb );_ccb ,_aded :=_f .GetName (_eca );if !_aded ||string (*_ccb )!="\u0049\u006d\u0061g\u0065"{continue ;};_cgd :=&imageInfo {BitsPerComponent :8,Stream :_ggg };if _cgd .ColorSpace ,_dda =_gf .DetermineColorspaceNameFromPdfObject (_ggg .PdfObjectDictionary .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));_dda !=nil {_de .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0073",_dda );continue ;};if _bdag ,_ecda :=_f .GetIntVal (_ggg .PdfObjectDictionary .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_ecda {_cgd .BitsPerComponent =_bdag ;};if _gfg ,_bdb :=_f .GetIntVal (_ggg .PdfObjectDictionary .Get ("\u0057\u0069\u0064t\u0068"));_bdb {_cgd .Width =_gfg ;};if _afa ,_ffcc :=_f .GetIntVal (_ggg .PdfObjectDictionary .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_ffcc {_cgd .Height =_afa ;};switch _cgd .ColorSpace {case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_cgd .ColorComponents =3;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_cgd .ColorComponents =1;default:_de .Log .Warning ("\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_cgd .ColorSpace );continue ;};_afec =append (_afec ,_cgd );};return _afec ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};func _dddf (_ead *_f .PdfObjectStream ,_egf float64 )error {_fddb ,_eag :=_gf .NewXObjectImageFromStream (_ead );if _eag !=nil {return _eag ;};_dbe ,_eag :=_fddb .ToImage ();if _eag !=nil {return _eag ;};_eade ,_eag :=_dbe .ToGoImage ();if _eag !=nil {return _eag ;};_agbe :=int (_c .RoundToEven (float64 (_dbe .Width )*_egf ));_befa :=int (_c .RoundToEven (float64 (_dbe .Height )*_egf ));_abcg :=_d .Rect (0,0,_agbe ,_befa );var _ccg _b .Image ;var _dafb func (_d .Image )(*_gf .Image ,error );switch _fddb .ColorSpace .String (){case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_ccg =_d .NewRGBA (_abcg );_dafb =_gf .ImageHandling .NewImageFromGoImage ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_ccg =_d .NewGray (_abcg );_dafb =_gf .ImageHandling .NewGrayImageFromGoImage ;default:return _ce .Errorf ("\u006f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_fddb .ColorSpace .String ());};_b .CatmullRom .Scale (_ccg ,_ccg .Bounds (),_eade ,_eade .Bounds (),_b .Over ,&_b .Options {});if _dbe ,_eag =_dafb (_ccg );_eag !=nil {return _eag ;};_gcb :=_f .MakeDict ();_gcb .Set ("\u0051u\u0061\u006c\u0069\u0074\u0079",_f .MakeInteger (100));_gcb .Set ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr",_f .MakeInteger (1));_fddb .Filter .UpdateParams (_gcb );if _eag =_fddb .SetImage (_dbe ,nil );_eag !=nil {return _eag ;};_fddb .ToPdfObject ();return nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};func _gg (_def *_f .PdfObjectStream )error {_e ,_dg :=_f .DecodeStream (_def );if _dg !=nil {return _dg ;};_cdc :=_cb .NewContentStreamParser (string (_e ));_cdb ,_dg :=_cdc .Parse ();if _dg !=nil {return _dg ;};_cdb =_gd (_cdb );_ab :=_cdb .Bytes ();if len (_ab )>=len (_e ){return nil ;};_cc ,_dg :=_f .MakeStream (_cdb .Bytes (),_f .NewFlateEncoder ());if _dg !=nil {return _dg ;};_def .Stream =_cc .Stream ;_def .Merge (_cc .PdfObjectDictionary );return nil ;};func _bfc (_gbbe _f .PdfObject )[]content {if _gbbe ==nil {return nil ;};_afba ,_cbg :=_f .GetArray (_gbbe );if !_cbg {_de .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _efa []content ;for _ ,_edc :=range _afba .Elements (){_fda ,_dfg :=_f .GetDict (_edc );if !_dfg {_de .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_bbcb ,_dfg :=_f .GetDict (_fda .Get ("\u0041\u0050"));if !_dfg {_de .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_ced :=_f .TraceToDirectObject (_bbcb .Get ("\u004e"));if _ced ==nil {_de .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _eef *_f .PdfObjectStream ;switch _gff :=_ced .(type ){case *_f .PdfObjectDictionary :_dbfc ,_bfd :=_f .GetName (_fda .Get ("\u0041\u0053"));if !_bfd {_de .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_eef ,_bfd =_f .GetStream (_gff .Get (*_dbfc ));if !_bfd {_de .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_f .PdfObjectStream :_eef =_gff ;};if _eef ==nil {_de .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_cfe ,_bcfb :=_gf .NewXObjectFormFromStream (_eef );if _bcfb !=nil {_de .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_bcfb );continue ;};_fge ,_bcfb :=_cfe .GetContentStream ();if _bcfb !=nil {_de .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_bcfb );continue ;};_efa =append (_efa ,content {_bggb :string (_fge ),_daf :_cfe .Resources });};return _efa ;};func _affb (_aaae []_f .PdfObject ,_cdg map[_f .PdfObject ]_f .PdfObject ){if len (_cdg )==0{return ;};for _ccae ,_gcd :=range _aaae {if _fdfg ,_babaf :=_cdg [_gcd ];_babaf {_aaae [_ccae ]=_fdfg ;continue ;};_cdg [_gcd ]=_gcd ;switch _bdc :=_gcd .(type ){case *_f .PdfObjectArray :_abf :=make ([]_f .PdfObject ,_bdc .Len ());copy (_abf ,_bdc .Elements ());_affb (_abf ,_cdg );for _bffa ,_abcd :=range _abf {_bdc .Set (_bffa ,_abcd );};case *_f .PdfObjectStreams :_affb (_bdc .Elements (),_cdg );case *_f .PdfObjectStream :_ceab :=[]_f .PdfObject {_bdc .PdfObjectDictionary };_affb (_ceab ,_cdg );_bdc .PdfObjectDictionary =_ceab [0].(*_f .PdfObjectDictionary );case *_f .PdfObjectDictionary :_bfa :=_bdc .Keys ();_ddc :=make ([]_f .PdfObject ,len (_bfa ));for _cge ,_edf :=range _bfa {_ddc [_cge ]=_bdc .Get (_edf );};_affb (_ddc ,_cdg );for _cgge ,_gcf :=range _bfa {_bdc .Set (_gcf ,_ddc [_cgge ]);};case *_f .PdfIndirectObject :_ccgc :=[]_f .PdfObject {_bdc .PdfObject };_affb (_ccgc ,_cdg );_bdc .PdfObject =_ccgc [0];};};};func _gd (_af *_cb .ContentStreamOperations )*_cb .ContentStreamOperations {if _af ==nil {return nil ;};_fa :=_cb .ContentStreamOperations {};for _ ,_bf :=range *_af {switch _bf .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_bf .Params )==6{if _gb ,_cd :=_f .GetNumbersAsFloat (_bf .Params );_cd ==nil {if _gb [0]==1&&_gb [1]==0&&_gb [2]==0&&_gb [3]==1{_bf =&_cb .ContentStreamOperation {Params :[]_f .PdfObject {_bf .Params [4],_bf .Params [5]},Operand :"\u0054\u0064"};};};};};_fa =append (_fa ,_bf );};return &_fa ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cebe *ImagePPI )Optimize (objects []_f .PdfObject )(_cacb []_f .PdfObject ,_facf error ){if _cebe .ImageUpperPPI <=0{return objects ,nil ;};_faebd :=_ggcc (objects );if len (_faebd )==0{return objects ,nil ;};_ffg :=make (map[_f .PdfObject ]struct{});for _ ,_daa :=range _faebd {_gab :=_daa .Stream .PdfObjectDictionary .Get (_f .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_ffg [_gab ]=struct{}{};};_fccf :=make (map[*_f .PdfObjectStream ]*imageInfo );for _ ,_bagc :=range _faebd {_fccf [_bagc .Stream ]=_bagc ;};var _fdbf *_f .PdfObjectDictionary ;for _ ,_eed :=range objects {if _daed ,_dgea :=_f .GetDict (_eed );_fdbf ==nil &&_dgea {if _fgee ,_agbd :=_f .GetName (_daed .Get (_f .PdfObjectName ("\u0054\u0079\u0070\u0065")));_agbd &&*_fgee =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_fdbf =_daed ;};};};if _fdbf ==nil {return objects ,nil ;};_ebae ,_dgbc :=_f .GetDict (_fdbf .Get (_f .PdfObjectName ("\u0050\u0061\u0067e\u0073")));if !_dgbc {return objects ,nil ;};_ffa ,_gddf :=_f .GetArray (_ebae .Get (_f .PdfObjectName ("\u004b\u0069\u0064\u0073")));if !_gddf {return objects ,nil ;};_cff :=make (map[string ]*imageInfo );for _ ,_aea :=range _ffa .Elements (){_fcbe ,_ada :=_f .GetDict (_aea );if !_ada {continue ;};_gded ,_ffdd :=_f .GetArray (_fcbe .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if !_ffdd {continue ;};_acf ,_ede :=_f .GetDict (_fcbe .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_ede {continue ;};_gba ,_dedg :=_f .GetDict (_acf .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_dedg {continue ;};_dcd :=_gba .Keys ();for _ ,_ccbg :=range _dcd {if _acfc ,_daaf :=_f .GetStream (_gba .Get (_ccbg ));_daaf {if _gfgc ,_gea :=_fccf [_acfc ];_gea {_cff [string (_ccbg )]=_gfgc ;};};};for _ ,_dddg :=range _gded .Elements (){if _cffc ,_bbdf :=_f .GetStream (_dddg );_bbdf {_ggf ,_fcd :=_f .NewEncoderFromStream (_cffc );if _fcd !=nil {return nil ,_fcd ;};_eab ,_fcd :=_ggf .DecodeStream (_cffc );if _fcd !=nil {return nil ,_fcd ;};_febe :=_cb .NewContentStreamParser (string (_eab ));_gdfd ,_fcd :=_febe .Parse ();if _fcd !=nil {return nil ,_fcd ;};_afg ,_dgc :=1.0,1.0;for _ ,_fdg :=range *_gdfd {if _fdg .Operand =="\u0051"{_afg ,_dgc =1.0,1.0;};if _fdg .Operand =="\u0063\u006d"&&len (_fdg .Params )==6{if _cde ,_acfe :=_f .GetFloatVal (_fdg .Params [0]);_acfe {_afg =_afg *_cde ;};if _aedf ,_acfa :=_f .GetFloatVal (_fdg .Params [3]);_acfa {_dgc =_dgc *_aedf ;};if _efgg ,_cgg :=_f .GetIntVal (_fdg .Params [0]);_cgg {_afg =_afg *float64 (_efgg );};if _bfg ,_beg :=_f .GetIntVal (_fdg .Params [3]);_beg {_dgc =_dgc *float64 (_bfg );};};if _fdg .Operand =="\u0044\u006f"&&len (_fdg .Params )==1{_bdaa ,_fcbg :=_f .GetName (_fdg .Params [0]);if !_fcbg {continue ;};if _ebb ,_gfca :=_cff [string (*_bdaa )];_gfca {_fce ,_aagg :=_afg /72.0,_dgc /72.0;_fgc ,_ceee :=float64 (_ebb .Width )/_fce ,float64 (_ebb .Height )/_aagg ;if _fce ==0||_aagg ==0{_fgc =72.0;_ceee =72.0;};_ebb .PPI =_c .Max (_ebb .PPI ,_fgc );_ebb .PPI =_c .Max (_ebb .PPI ,_ceee );};};};};};};for _ ,_gdb :=range _faebd {if _ ,_bafb :=_ffg [_gdb .Stream ];_bafb {continue ;};if _gdb .PPI <=_cebe .ImageUpperPPI {continue ;};_fcef :=_cebe .ImageUpperPPI /_gdb .PPI ;if _aba :=_dddf (_gdb .Stream ,_fcef );_aba !=nil {_de .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_aba );}else {if _cggd ,_fcec :=_f .GetStream (_gdb .Stream .PdfObjectDictionary .Get (_f .PdfObjectName ("\u0053\u004d\u0061s\u006b")));_fcec {if _gef :=_dddf (_cggd ,_fcef );_gef !=nil {return nil ,_gef ;};};};};return objects ,nil ;};type imageInfo struct{ColorSpace _f .PdfObjectName ;BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_f .PdfObjectStream ;PPI float64 ;};func _dgfa (_abcf *_f .PdfObjectStream ,_dbba []rune ,_abg []_cec .GlyphIndex )error {_abcf ,_dbf :=_f .GetStream (_abcf );if !_dbf {_de .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");return _bd .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_aeed ,_gbe :=_f .DecodeStream (_abcf );if _gbe !=nil {_de .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_gbe );return _gbe ;};_bef ,_gbe :=_cec .Parse (_a .NewReader (_aeed ));if _gbe !=nil {_de .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_abcf .Stream ));return _gbe ;};_afb :=_abg ;if len (_dbba )> 0{_gbdc :=_bef .LookupRunes (_dbba );_afb =append (_afb ,_gbdc ...);};_bef ,_gbe =_bef .SubsetKeepIndices (_afb );if _gbe !=nil {_de .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_gbe );return _gbe ;};var _agb _a .Buffer ;_gbe =_bef .Write (&_agb );if _gbe !=nil {_de .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_gbe );return _gbe ;};if _agb .Len ()> len (_aeed ){_de .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");return nil ;};_gce ,_gbe :=_f .MakeStream (_agb .Bytes (),_f .NewFlateEncoder ());if _gbe !=nil {_de .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_gbe );return _gbe ;};*_abcf =*_gce ;_abcf .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_f .MakeInteger (int64 (_agb .Len ())));return nil ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;};type objectStructure struct{_afaf *_f .PdfObjectDictionary ;_baeb *_f .PdfObjectDictionary ;_ccgg []*_f .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_egc *CombineDuplicateStreams )Optimize (objects []_f .PdfObject )(_eefc []_f .PdfObject ,_ddd error ){_gfc :=make (map[_f .PdfObject ]_f .PdfObject );_gfcc :=make (map[_f .PdfObject ]struct{});_efb :=make (map[string ][]*_f .PdfObjectStream );for _ ,_dae :=range objects {if _bgf ,_ggd :=_dae .(*_f .PdfObjectStream );_ggd {_gfb :=_fe .New ();_gfb .Write (_bgf .Stream );_cfg :=string (_gfb .Sum (nil ));_efb [_cfg ]=append (_efb [_cfg ],_bgf );};};for _ ,_gfbd :=range _efb {if len (_gfbd )< 2{continue ;};_adbb :=_gfbd [0];for _dce :=1;_dce < len (_gfbd );_dce ++{_cea :=_gfbd [_dce ];_gfc [_cea ]=_adbb ;_gfcc [_cea ]=struct{}{};};};_eefc =make ([]_f .PdfObject ,0,len (objects )-len (_gfcc ));for _ ,_gbc :=range objects {if _ ,_fcab :=_gfcc [_gbc ];_fcab {continue ;};_eefc =append (_eefc ,_gbc );};_affb (_eefc ,_gfc );return _eefc ,nil ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_bfga :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_bfga .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_bfga .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_fcg :=new (ImagePPI );_fcg .ImageUpperPPI =options .ImageUpperPPI ;_bfga .Append (_fcg );};if options .ImageQuality > 0{_cda :=new (Image );_cda .ImageQuality =options .ImageQuality ;_bfga .Append (_cda );};if options .CombineDuplicateDirectObjects {_bfga .Append (new (CombineDuplicateDirectObjects ));};if options .CombineDuplicateStreams {_bfga .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_bfga .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_bfga .Append (new (ObjectStreams ));};if options .CompressStreams {_bfga .Append (new (CompressStreams ));};return _bfga ;};

// Append appends optimizers to the chain.
func (_fea *Chain )Append (optimizers ..._gf .Optimizer ){_fea ._bb =append (_fea ._bb ,optimizers ...)};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aff *CombineIdenticalIndirectObjects )Optimize (objects []_f .PdfObject )(_bebb []_f .PdfObject ,_ace error ){_ccd (objects );_gbeg :=make (map[_f .PdfObject ]_f .PdfObject );_bcdf :=make (map[_f .PdfObject ]struct{});_agbg :=make (map[string ][]*_f .PdfIndirectObject );for _ ,_dbg :=range objects {_dfe ,_dbbc :=_dbg .(*_f .PdfIndirectObject );if !_dbbc {continue ;};if _fcbb ,_aca :=_dfe .PdfObject .(*_f .PdfObjectDictionary );_aca {if _aag ,_ceb :=_fcbb .Get ("\u0054\u0079\u0070\u0065").(*_f .PdfObjectName );_ceb &&*_aag =="\u0050\u0061\u0067\u0065"{continue ;};_gae :=_fe .New ();_gae .Write ([]byte (_fcbb .WriteString ()));_ebd :=string (_gae .Sum (nil ));_agbg [_ebd ]=append (_agbg [_ebd ],_dfe );};};for _ ,_ecf :=range _agbg {if len (_ecf )< 2{continue ;};_cac :=_ecf [0];for _cecd :=1;_cecd < len (_ecf );_cecd ++{_bea :=_ecf [_cecd ];_gbeg [_bea ]=_cac ;_bcdf [_bea ]=struct{}{};};};_bebb =make ([]_f .PdfObject ,0,len (objects )-len (_bcdf ));for _ ,_fdb :=range objects {if _ ,_gbdd :=_bcdf [_fdb ];_gbdd {continue ;};_bebb =append (_bebb ,_fdb );};_affb (_bebb ,_gbeg );return _bebb ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bgda *Image )Optimize (objects []_f .PdfObject )(_aac []_f .PdfObject ,_eec error ){if _bgda .ImageQuality <=0{return objects ,nil ;};_bab :=_ggcc (objects );if len (_bab )==0{return objects ,nil ;};_aad :=make (map[_f .PdfObject ]_f .PdfObject );_afc :=make (map[_f .PdfObject ]struct{});for _ ,_bdbe :=range _bab {_fga :=_bdbe .Stream .PdfObjectDictionary .Get (_f .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_afc [_fga ]=struct{}{};};for _gdd ,_fcce :=range _bab {_bfbg :=_fcce .Stream ;if _ ,_fcceb :=_afc [_bfbg ];_fcceb {continue ;};_baba ,_gbf :=_f .NewEncoderFromStream (_bfbg );if _gbf !=nil {_de .Log .Warning ("\u0045\u0072\u0072\u006f\u0072 \u0067\u0065\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_dbc ,_gbf :=_baba .DecodeStream (_bfbg );if _gbf !=nil {_de .Log .Warning ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0074\u0068e\u0020i\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_gcad :=_f .NewDCTEncoder ();_gcad .ColorComponents =_fcce .ColorComponents ;_gcad .Quality =_bgda .ImageQuality ;_gcad .BitsPerComponent =_fcce .BitsPerComponent ;_gcad .Width =_fcce .Width ;_gcad .Height =_fcce .Height ;_adbc ,_gbf :=_gcad .EncodeBytes (_dbc );if _gbf !=nil {_de .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gbf );return nil ,_gbf ;};var _bde _f .StreamEncoder ;_bde =_gcad ;{_ceag :=_f .NewFlateEncoder ();_dgfb :=_f .NewMultiEncoder ();_dgfb .AddEncoder (_ceag );_dgfb .AddEncoder (_gcad );_edb ,_fef :=_dgfb .EncodeBytes (_dbc );if _fef !=nil {return nil ,_fef ;};if len (_edb )< len (_adbc ){_de .Log .Debug ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_adbc ),len (_edb ),len (_bfbg .Stream ));_adbc =_edb ;_bde =_dgfb ;};};_bbf :=len (_bfbg .Stream );if _bbf < len (_adbc ){continue ;};_dbgg :=&_f .PdfObjectStream {Stream :_adbc };_dbgg .PdfObjectReference =_bfbg .PdfObjectReference ;_dbgg .PdfObjectDictionary =_f .MakeDict ();_dbgg .Merge (_bfbg .PdfObjectDictionary );_dbgg .Merge (_bde .MakeStreamDict ());_dbgg .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_f .MakeInteger (int64 (len (_adbc ))));_aad [_bfbg ]=_dbgg ;_bab [_gdd ].Stream =_dbgg ;};_aac =make ([]_f .PdfObject ,len (objects ));copy (_aac ,objects );_affb (_aac ,_aad );return _aac ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gebd *CompressStreams )Optimize (objects []_f .PdfObject )(_bcfa []_f .PdfObject ,_bcfe error ){_bcfa =make ([]_f .PdfObject ,len (objects ));copy (_bcfa ,objects );for _ ,_aedg :=range objects {_ddg ,_bgb :=_f .GetStream (_aedg );if !_bgb {continue ;};if _ffb :=_ddg .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_ffb !=nil {if _ ,_ebdd :=_f .GetName (_ffb );_ebdd {continue ;};if _bff ,_cg :=_f .GetArray (_ffb );_cg &&_bff .Len ()> 0{continue ;};};_ebde :=_f .NewFlateEncoder ();var _gca []byte ;_gca ,_bcfe =_ebde .EncodeBytes (_ddg .Stream );if _bcfe !=nil {return _bcfa ,_bcfe ;};_ggc :=_ebde .MakeStreamDict ();if len (_gca )+len (_ggc .WriteString ())< len (_ddg .Stream ){_ddg .Stream =_gca ;_ddg .PdfObjectDictionary .Merge (_ggc );_ddg .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_f .MakeInteger (int64 (len (_ddg .Stream ))));};};return _bcfa ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};func _ccd (_aadc []_f .PdfObject ){for _aec ,_aaac :=range _aadc {switch _bdfd :=_aaac .(type ){case *_f .PdfIndirectObject :_bdfd .ObjectNumber =int64 (_aec +1);_bdfd .GenerationNumber =0;case *_f .PdfObjectStream :_bdfd .ObjectNumber =int64 (_aec +1);_bdfd .GenerationNumber =0;case *_f .PdfObjectStreams :_bdfd .ObjectNumber =int64 (_aec +1);_bdfd .GenerationNumber =0;};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cag *CombineDuplicateDirectObjects )Optimize (objects []_f .PdfObject )(_ade []_f .PdfObject ,_gafd error ){_ccd (objects );_fcf :=make (map[string ][]*_f .PdfObjectDictionary );var _aaeg func (_cfef *_f .PdfObjectDictionary );_aaeg =func (_edd *_f .PdfObjectDictionary ){for _ ,_fac :=range _edd .Keys (){_eea :=_edd .Get (_fac );if _ecd ,_eba :=_eea .(*_f .PdfObjectDictionary );_eba {_gfe :=_fe .New ();_gfe .Write ([]byte (_ecd .WriteString ()));_bbe :=string (_gfe .Sum (nil ));_fcf [_bbe ]=append (_fcf [_bbe ],_ecd );_aaeg (_ecd );};};};for _ ,_edg :=range objects {_aeg ,_dfde :=_edg .(*_f .PdfIndirectObject );if !_dfde {continue ;};if _cbc ,_aabc :=_aeg .PdfObject .(*_f .PdfObjectDictionary );_aabc {_aaeg (_cbc );};};_afe :=make ([]_f .PdfObject ,0,len (_fcf ));_gfdf :=make (map[_f .PdfObject ]_f .PdfObject );for _ ,_ged :=range _fcf {if len (_ged )< 2{continue ;};_ceea :=_f .MakeDict ();_ceea .Merge (_ged [0]);_fbcc :=_f .MakeIndirectObject (_ceea );_afe =append (_afe ,_fbcc );for _dgef :=0;_dgef < len (_ged );_dgef ++{_fcc :=_ged [_dgef ];_gfdf [_fcc ]=_fbcc ;};};_ade =make ([]_f .PdfObject ,len (objects ));copy (_ade ,objects );_ade =append (_afe ,_ade ...);_affb (_ade ,_gfdf );return _ade ,nil ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _aee (_dbb []_f .PdfObject )(_dd map[*_f .PdfObjectStream ]struct{},_ceec error ){_dd =map[*_f .PdfObjectStream ]struct{}{};_df :=map[*_gf .PdfFont ]struct{}{};_bdg :=_eaga (_dbb );for _ ,_aa :=range _bdg ._ccgg {_gbb ,_gbd :=_f .GetDict (_aa .PdfObject );if !_gbd {continue ;};_ge ,_gbd :=_f .GetDict (_gbb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_gbd {continue ;};_bca ,_ :=_bbgb (_gbb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_aae ,_dfd :=_gf .NewPdfPageResourcesFromDict (_ge );if _dfd !=nil {return nil ,_dfd ;};_bda :=[]content {{_bggb :_bca ,_daf :_aae }};_ad :=_bfc (_gbb .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _ad !=nil {_bda =append (_bda ,_ad ...);};for _ ,_gdf :=range _bda {_bcb ,_beb :=_fb .NewFromContents (_gdf ._bggb ,_gdf ._daf );if _beb !=nil {return nil ,_beb ;};_fbe ,_ ,_ ,_beb :=_bcb .ExtractPageText ();if _beb !=nil {return nil ,_beb ;};for _ ,_geb :=range _fbe .Marks ().Elements (){if _geb .Font ==nil {continue ;};if _ ,_adc :=_df [_geb .Font ];!_adc {_df [_geb .Font ]=struct{}{};};};};};_fd :=map[*_f .PdfObjectStream ][]*_gf .PdfFont {};for _dcg :=range _df {_aab :=_dcg .FontDescriptor ();if _aab ==nil ||_aab .FontFile2 ==nil {continue ;};_bbc ,_faeg :=_f .GetStream (_aab .FontFile2 );if !_faeg {continue ;};_fd [_bbc ]=append (_fd [_bbc ],_dcg );};for _fag :=range _fd {var _aaa []rune ;var _efd []_cec .GlyphIndex ;for _ ,_cba :=range _fd [_fag ]{switch _dge :=_cba .Encoder ().(type ){case *_bc .IdentityEncoder :_gc :=_dge .RegisteredRunes ();_ag :=make ([]_cec .GlyphIndex ,len (_gc ));for _faa ,_eg :=range _gc {_ag [_faa ]=_cec .GlyphIndex (_eg );};_efd =append (_efd ,_ag ...);case *_bc .TrueTypeFontEncoder :_bgg :=_dge .RegisteredRunes ();_aaa =append (_aaa ,_bgg ...);case _bc .SimpleEncoder :_fcb :=_dge .Charcodes ();for _ ,_fdf :=range _fcb {_adb ,_abc :=_dge .CharcodeToRune (_fdf );if !_abc {_de .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_fdf );continue ;};_aaa =append (_aaa ,_adb );};};};_ceec =_dgfa (_fag ,_aaa ,_efd );if _ceec !=nil {_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_ceec );return nil ,_ceec ;};_dd [_fag ]=struct{}{};};return _dd ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ega *CleanFonts )Optimize (objects []_f .PdfObject )(_fg []_f .PdfObject ,_ed error ){var _ca map[*_f .PdfObjectStream ]struct{};if _ega .Subset {var _da error ;_ca ,_da =_aee (objects );if _da !=nil {return nil ,_da ;};};for _ ,_bbd :=range objects {_gcg ,_gag :=_f .GetStream (_bbd );if !_gag {continue ;};if _ ,_ddb :=_ca [_gcg ];_ddb {continue ;};_faeb ,_ee :=_f .NewEncoderFromStream (_gcg );if _ee !=nil {_de .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_ee );continue ;};_eae ,_ee :=_faeb .DecodeStream (_gcg );if _ee !=nil {_de .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_ee );continue ;};if len (_eae )< 4{continue ;};_fbee :=string (_eae [:4]);if _fbee =="\u004f\u0054\u0054\u004f"{continue ;};if _fbee !="\u0000\u0001\u0000\u0000"&&_fbee !="\u0074\u0072\u0075\u0065"{continue ;};_bdd ,_ee :=_cec .Parse (_a .NewReader (_eae ));if _ee !=nil {_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ee );continue ;};_ee =_bdd .Optimize ();if _ee !=nil {continue ;};var _bcbf _a .Buffer ;_ee =_bdd .Write (&_bcbf );if _ee !=nil {_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ee );continue ;};if _bcbf .Len ()> len (_eae ){_de .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");continue ;};_eac ,_ee :=_f .MakeStream (_bcbf .Bytes (),_f .NewFlateEncoder ());if _ee !=nil {continue ;};*_gcg =*_eac ;_gcg .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_f .MakeInteger (int64 (_bcbf .Len ())));};return objects ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ef *CleanContentstream )Optimize (objects []_f .PdfObject )(_fc []_f .PdfObject ,_db error ){_cf :=map[*_f .PdfObjectStream ]struct{}{};var _dcc []*_f .PdfObjectStream ;_dgf :=func (_fbc *_f .PdfObjectStream ){if _ ,_efg :=_cf [_fbc ];!_efg {_cf [_fbc ]=struct{}{};_dcc =append (_dcc ,_fbc );};};for _ ,_be :=range objects {switch _fbcb :=_be .(type ){case *_f .PdfIndirectObject :switch _ded :=_fbcb .PdfObject .(type ){case *_f .PdfObjectDictionary :if _baa ,_feg :=_f .GetName (_ded .Get ("\u0054\u0079\u0070\u0065"));!_feg ||_baa .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _cee ,_ga :=_f .GetStream (_ded .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ga {_dgf (_cee );}else if _bag ,_eb :=_f .GetArray (_ded .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_eb {for _ ,_cdbb :=range _bag .Elements (){if _bgd ,_fed :=_f .GetStream (_cdbb );_fed {_dgf (_bgd );};};};};case *_f .PdfObjectStream :if _dede ,_ae :=_f .GetName (_fbcb .Get ("\u0054\u0079\u0070\u0065"));!_ae ||_dede .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _gaf ,_bga :=_f .GetName (_fbcb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));!_bga ||_gaf .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_dgf (_fbcb );};};for _ ,_ea :=range _dcc {_db =_gg (_ea );if _db !=nil {return nil ,_db ;};};return objects ,nil ;};func _bbgb (_aaf _f .PdfObject )(_eeafa string ,_bee []_f .PdfObject ){var _caa _a .Buffer ;switch _aeea :=_aaf .(type ){case *_f .PdfIndirectObject :_bee =append (_bee ,_aeea );_aaf =_aeea .PdfObject ;};switch _fgca :=_aaf .(type ){case *_f .PdfObjectStream :if _aedd ,_eecb :=_f .DecodeStream (_fgca );_eecb ==nil {_caa .Write (_aedd );_bee =append (_bee ,_fgca );};case *_f .PdfObjectArray :for _ ,_gagc :=range _fgca .Elements (){switch _beab :=_gagc .(type ){case *_f .PdfObjectStream :if _agc ,_fdbg :=_f .DecodeStream (_beab );_fdbg ==nil {_caa .Write (_agc );_bee =append (_bee ,_beab );};};};};return _caa .String (),_bee ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eefe *ObjectStreams )Optimize (objects []_f .PdfObject )(_fece []_f .PdfObject ,_caca error ){_gfdff :=&_f .PdfObjectStreams {};_cggg :=make ([]_f .PdfObject ,0,len (objects ));for _ ,_dbd :=range objects {if _fdff ,_eeag :=_dbd .(*_f .PdfIndirectObject );_eeag &&_fdff .GenerationNumber ==0{_gfdff .Append (_dbd );}else {_cggg =append (_cggg ,_dbd );};};if _gfdff .Len ()==0{return _cggg ,nil ;};_fece =make ([]_f .PdfObject ,0,len (_cggg )+_gfdff .Len ()+1);if _gfdff .Len ()> 1{_fece =append (_fece ,_gfdff );};_fece =append (_fece ,_gfdff .Elements ()...);_fece =append (_fece ,_cggg ...);return _fece ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_bb []_gf .Optimizer };

// Optimize optimizes PDF objects to decrease PDF size.
func (_bcf *Chain )Optimize (objects []_f .PdfObject )(_ac []_f .PdfObject ,_ba error ){_ac =objects ;for _ ,_dc :=range _bcf ._bb {_ac ,_ba =_dc .Optimize (_ac );if _ba !=nil {return _ac ,_ba ;};};return _ac ,nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};