//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_fd "bytes";_fg "crypto/md5";_e "errors";_f "github.com/unidoc/unipdf/v3/common";_fb "github.com/unidoc/unipdf/v3/contentstream";_fa "github.com/unidoc/unipdf/v3/core";_a "github.com/unidoc/unipdf/v3/extractor";_gg "github.com/unidoc/unipdf/v3/internal/imageutil";
_d "github.com/unidoc/unipdf/v3/internal/textencoding";_fde "github.com/unidoc/unipdf/v3/model";_gf "github.com/unidoc/unitype";_b "golang.org/x/image/draw";_bb "math";);type objectStructure struct{_ddfg *_fa .PdfObjectDictionary ;_aecc *_fa .PdfObjectDictionary ;
_dfbd []*_fa .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_acee *CombineIdenticalIndirectObjects )Optimize (objects []_fa .PdfObject )(_fbd []_fa .PdfObject ,_bag error ){_ega (objects );_efd :=make (map[_fa .PdfObject ]_fa .PdfObject );_gfb :=make (map[_fa .PdfObject ]struct{});_cca :=make (map[string ][]*_fa .PdfIndirectObject );
for _ ,_gac :=range objects {_abg ,_dde :=_gac .(*_fa .PdfIndirectObject );if !_dde {continue ;};if _fddg ,_ecfc :=_abg .PdfObject .(*_fa .PdfObjectDictionary );_ecfc {if _dbd ,_dcf :=_fddg .Get ("\u0054\u0079\u0070\u0065").(*_fa .PdfObjectName );_dcf &&*_dbd =="\u0050\u0061\u0067\u0065"{continue ;
};_befe :=_fg .New ();_befe .Write ([]byte (_fddg .WriteString ()));_daeb :=string (_befe .Sum (nil ));_cca [_daeb ]=append (_cca [_daeb ],_abg );};};for _ ,_dfec :=range _cca {if len (_dfec )< 2{continue ;};_bgf :=_dfec [0];for _fdeg :=1;_fdeg < len (_dfec );
_fdeg ++{_aggdb :=_dfec [_fdeg ];_efd [_aggdb ]=_bgf ;_gfb [_aggdb ]=struct{}{};};};_fbd =make ([]_fa .PdfObject ,0,len (objects )-len (_gfb ));for _ ,_gbcb :=range objects {if _ ,_bfbg :=_gfb [_gbcb ];_bfbg {continue ;};_fbd =append (_fbd ,_gbcb );};_ddfc (_fbd ,_efd );
return _fbd ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gff *CleanContentstream )Optimize (objects []_fa .PdfObject )(_ag []_fa .PdfObject ,_ca error ){_dab :=map[*_fa .PdfObjectStream ]struct{}{};var _fga []*_fa .PdfObjectStream ;_gec :=func (_dae *_fa .PdfObjectStream ){if _ ,_agc :=_dab [_dae ];!_agc {_dab [_dae ]=struct{}{};
_fga =append (_fga ,_dae );};};_be :=map[_fa .PdfObject ]bool {};_cg :=map[_fa .PdfObject ]bool {};for _ ,_agg :=range objects {switch _ec :=_agg .(type ){case *_fa .PdfIndirectObject :switch _bcg :=_ec .PdfObject .(type ){case *_fa .PdfObjectDictionary :if _db ,_ea :=_fa .GetName (_bcg .Get ("\u0054\u0079\u0070\u0065"));
!_ea ||_db .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _bde ,_gdb :=_fa .GetStream (_bcg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_gdb {_gec (_bde );}else if _cbd ,_ff :=_fa .GetArray (_bcg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_ff {var _aab []*_fa .PdfObjectStream ;for _ ,_dbf :=range _cbd .Elements (){if _aee ,_cbe :=_fa .GetStream (_dbf );_cbe {_aab =append (_aab ,_aee );};};if len (_aab )> 0{var _cga _fd .Buffer ;for _ ,_ad :=range _aab {if _dfd ,_fff :=_fa .DecodeStream (_ad );
_fff ==nil {_cga .Write (_dfd );};_be [_ad ]=true ;};_gef ,_bdb :=_fa .MakeStream (_cga .Bytes (),_fa .NewFlateEncoder ());if _bdb !=nil {return nil ,_bdb ;};_cg [_gef ]=true ;_bcg .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_gef );_gec (_gef );
};};};case *_fa .PdfObjectStream :if _fgde ,_eg :=_fa .GetName (_ec .Get ("\u0054\u0079\u0070\u0065"));!_eg ||_fgde .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _gffd ,_bee :=_fa .GetName (_ec .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_bee ||_gffd .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_gec (_ec );};};for _ ,_bf :=range _fga {_ca =_aef (_bf );if _ca !=nil {return nil ,_ca ;};};_ag =nil ;for _ ,_fc :=range objects {if _be [_fc ]{continue ;};_ag =append (_ag ,_fc );};for _bed :=range _cg {_ag =append (_ag ,_bed );
};return _ag ,nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bcae *Image )Optimize (objects []_fa .PdfObject )(_cacd []_fa .PdfObject ,_aadf error ){if _bcae .ImageQuality <=0{return objects ,nil ;};_ecga :=_eab (objects );if len (_ecga )==0{return objects ,nil ;};_edf :=make (map[_fa .PdfObject ]_fa .PdfObject );
_baa :=make (map[_fa .PdfObject ]struct{});for _ ,_cffb :=range _ecga {_gad :=_cffb .Stream .Get ("\u0053\u004d\u0061s\u006b");_baa [_gad ]=struct{}{};};for _ggab ,_gefe :=range _ecga {_bfa :=_gefe .Stream ;if _ ,_bgg :=_baa [_bfa ];_bgg {continue ;};_fae ,_befg :=_fde .NewXObjectImageFromStream (_bfa );
if _befg !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_befg );continue ;};switch _fae .Filter .(type ){case *_fa .JBIG2Encoder :continue ;case *_fa .CCITTFaxEncoder :continue ;};_eaaa ,_befg :=_fae .ToImage ();if _befg !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_befg );
continue ;};_bgc :=_fa .NewDCTEncoder ();_bgc .ColorComponents =_eaaa .ColorComponents ;_bgc .Quality =_bcae .ImageQuality ;_bgc .BitsPerComponent =_gefe .BitsPerComponent ;_bgc .Width =_gefe .Width ;_bgc .Height =_gefe .Height ;_faea ,_befg :=_bgc .EncodeBytes (_eaaa .Data );
if _befg !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_befg );continue ;};var _ggd _fa .StreamEncoder ;_ggd =_bgc ;{_afe :=_fa .NewFlateEncoder ();_aeaa :=_fa .NewMultiEncoder ();_aeaa .AddEncoder (_afe );_aeaa .AddEncoder (_bgc );
_eef ,_gfd :=_aeaa .EncodeBytes (_eaaa .Data );if _gfd !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gfd );continue ;};if len (_eef )< len (_faea ){_f .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_faea ),len (_eef ),len (_bfa .Stream ));
_faea =_eef ;_ggd =_aeaa ;};};_egd :=len (_bfa .Stream );if _egd < len (_faea ){continue ;};_cedg :=&_fa .PdfObjectStream {Stream :_faea };_cedg .PdfObjectReference =_bfa .PdfObjectReference ;_cedg .PdfObjectDictionary =_fa .MakeDict ();_cedg .Merge (_bfa .PdfObjectDictionary );
_cedg .Merge (_ggd .MakeStreamDict ());_cedg .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_fa .MakeInteger (int64 (len (_faea ))));_edf [_bfa ]=_cedg ;_ecga [_ggab ].Stream =_cedg ;};_cacd =make ([]_fa .PdfObject ,len (objects ));copy (_cacd ,objects );
_ddfc (_cacd ,_edf );return _cacd ,nil ;};

// Append appends optimizers to the chain.
func (_bc *Chain )Append (optimizers ..._fde .Optimizer ){_bc ._da =append (_bc ._da ,optimizers ...)};func _eebd (_ggcb _fa .PdfObject )(_adff string ,_aecd []_fa .PdfObject ){var _fcba _fd .Buffer ;switch _dcde :=_ggcb .(type ){case *_fa .PdfIndirectObject :_aecd =append (_aecd ,_dcde );
_ggcb =_dcde .PdfObject ;};switch _bbad :=_ggcb .(type ){case *_fa .PdfObjectStream :if _fbdba ,_ddda :=_fa .DecodeStream (_bbad );_ddda ==nil {_fcba .Write (_fbdba );_aecd =append (_aecd ,_bbad );};case *_fa .PdfObjectArray :for _ ,_ecbe :=range _bbad .Elements (){switch _dgfe :=_ecbe .(type ){case *_fa .PdfObjectStream :if _cdg ,_fgfg :=_fa .DecodeStream (_dgfe );
_fgfg ==nil {_fcba .Write (_cdg );_aecd =append (_aecd ,_dgfe );};};};};return _fcba .String (),_aecd ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};func _aggd (_adb _fa .PdfObject )[]content {if _adb ==nil {return nil ;};_cbb ,_ecd :=_fa .GetArray (_adb );if !_ecd {_f .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;
};var _gaf []content ;for _ ,_ced :=range _cbb .Elements (){_aga ,_eeb :=_fa .GetDict (_ced );if !_eeb {_f .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_cbeed ,_eeb :=_fa .GetDict (_aga .Get ("\u0041\u0050"));if !_eeb {_f .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_dag :=_fa .TraceToDirectObject (_cbeed .Get ("\u004e"));
if _dag ==nil {_f .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _aac *_fa .PdfObjectStream ;switch _bbfb :=_dag .(type ){case *_fa .PdfObjectDictionary :_dcg ,_cdb :=_fa .GetName (_aga .Get ("\u0041\u0053"));
if !_cdb {_f .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_aac ,_cdb =_fa .GetStream (_bbfb .Get (*_dcg ));if !_cdb {_f .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_fa .PdfObjectStream :_aac =_bbfb ;};if _aac ==nil {_f .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_dge ,_cbbc :=_fde .NewXObjectFormFromStream (_aac );if _cbbc !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cbbc );
continue ;};_aeed ,_cbbc :=_dge .GetContentStream ();if _cbbc !=nil {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_cbbc );continue ;};_gaf =append (_gaf ,content {_fbg :string (_aeed ),_eeg :_dge .Resources });
};return _gaf ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ac *Chain )Optimize (objects []_fa .PdfObject )(_bbf []_fa .PdfObject ,_gb error ){_c :=objects ;for _ ,_cc :=range _ac ._da {_ed ,_dac :=_cc .Optimize (_c );if _dac !=nil {_f .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_dac );
continue ;};_c =_ed ;};return _c ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cbdad *ObjectStreams )Optimize (objects []_fa .PdfObject )(_dbg []_fa .PdfObject ,_bbd error ){_adbc :=&_fa .PdfObjectStreams {};_cfb :=make ([]_fa .PdfObject ,0,len (objects ));for _ ,_dgge :=range objects {if _fcbg ,_ggc :=_dgge .(*_fa .PdfIndirectObject );
_ggc &&_fcbg .GenerationNumber ==0{_adbc .Append (_dgge );}else {_cfb =append (_cfb ,_dgge );};};if _adbc .Len ()==0{return _cfb ,nil ;};_dbg =make ([]_fa .PdfObject ,0,len (_cfb )+_adbc .Len ()+1);if _adbc .Len ()> 1{_dbg =append (_dbg ,_adbc );};_dbg =append (_dbg ,_adbc .Elements ()...);
_dbg =append (_dbg ,_cfb ...);return _dbg ,nil ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _bfff (_feea []_fa .PdfObject )objectStructure {_dabf :=objectStructure {};_bded :=false ;for _ ,_daea :=range _feea {switch _feb :=_daea .(type ){case *_fa .PdfIndirectObject :_dbfc ,_bdga :=_fa .GetDict (_feb );if !_bdga {continue ;
};_abe ,_bdga :=_fa .GetName (_dbfc .Get ("\u0054\u0079\u0070\u0065"));if !_bdga {continue ;};switch _abe .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_dabf ._ddfg =_dbfc ;_bded =true ;};};if _bded {break ;};};if !_bded {return _dabf ;};_acd ,_cgcc :=_fa .GetDict (_dabf ._ddfg .Get ("\u0050\u0061\u0067e\u0073"));
if !_cgcc {return _dabf ;};_dabf ._aecc =_acd ;_ege ,_cgcc :=_fa .GetArray (_acd .Get ("\u004b\u0069\u0064\u0073"));if !_cgcc {return _dabf ;};for _ ,_fcbfb :=range _ege .Elements (){_cbae ,_edfa :=_fa .GetIndirect (_fcbfb );if !_edfa {break ;};_dabf ._dfbd =append (_dabf ._dfbd ,_cbae );
};return _dabf ;};func _aef (_af *_fa .PdfObjectStream )error {_df ,_bd :=_fa .DecodeStream (_af );if _bd !=nil {return _bd ;};_ge :=_fb .NewContentStreamParser (string (_df ));_fdg ,_bd :=_ge .Parse ();if _bd !=nil {return _bd ;};_fdg =_gd (_fdg );_eb :=_fdg .Bytes ();
if len (_eb )>=len (_df ){return nil ;};_ga ,_bd :=_fa .MakeStream (_fdg .Bytes (),_fa .NewFlateEncoder ());if _bd !=nil {return _bd ;};_af .Stream =_ga .Stream ;_af .Merge (_ga .PdfObjectDictionary );return nil ;};type imageInfo struct{BitsPerComponent int ;
ColorComponents int ;Width int ;Height int ;Stream *_fa .PdfObjectStream ;PPI float64 ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dgf *CleanFonts )Optimize (objects []_fa .PdfObject )(_dbe []_fa .PdfObject ,_bea error ){var _bdd map[*_fa .PdfObjectStream ]struct{};if _dgf .Subset {var _dfeg error ;_bdd ,_dfeg =_gag (objects );if _dfeg !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_dfeg );
return nil ,_dfeg ;};};for _ ,_bcge :=range objects {_eaag ,_bdg :=_fa .GetStream (_bcge );if !_bdg {continue ;};if _ ,_aad :=_bdd [_eaag ];_aad {continue ;};_cde ,_cab :=_fa .NewEncoderFromStream (_eaag );if _cab !=nil {_f .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_cab );
continue ;};_ecc ,_cab :=_cde .DecodeStream (_eaag );if _cab !=nil {_f .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_cab );
continue ;};if len (_ecc )< 4{continue ;};_bgbg :=string (_ecc [:4]);if _bgbg =="\u004f\u0054\u0054\u004f"{continue ;};if _bgbg !="\u0000\u0001\u0000\u0000"&&_bgbg !="\u0074\u0072\u0075\u0065"{continue ;};_fca ,_cab :=_gf .Parse (_fd .NewReader (_ecc ));
if _cab !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cab );continue ;};_cab =_fca .Optimize ();
if _cab !=nil {_f .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_cab );continue ;};var _cee _fd .Buffer ;_cab =_fca .Write (&_cee );
if _cab !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cab );continue ;};if _cee .Len ()> len (_ecc ){_f .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_eaae ,_cab :=_fa .MakeStream (_cee .Bytes (),_fa .NewFlateEncoder ());if _cab !=nil {continue ;};*_eaag =*_eaae ;_eaag .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_fa .MakeInteger (int64 (_cee .Len ())));};return objects ,nil ;};func _ega (_fcf []_fa .PdfObject ){for _cfeb ,_fafag :=range _fcf {switch _degd :=_fafag .(type ){case *_fa .PdfIndirectObject :_degd .ObjectNumber =int64 (_cfeb +1);
_degd .GenerationNumber =0;case *_fa .PdfObjectStream :_degd .ObjectNumber =int64 (_cfeb +1);_degd .GenerationNumber =0;case *_fa .PdfObjectStreams :_degd .ObjectNumber =int64 (_cfeb +1);_degd .GenerationNumber =0;};};};func _afg (_fcb *_fde .XObjectImage ,_fgfa imageModifications )error {_efaa ,_cda :=_fcb .ToImage ();
if _cda !=nil {return _cda ;};if _fgfa .Scale !=0{_efaa ,_cda =_aeb (_efaa ,_fgfa .Scale );if _cda !=nil {return _cda ;};};if _fgfa .Encoding !=nil {_fcb .Filter =_fgfa .Encoding ;};_fcb .Decode =nil ;switch _adf :=_fcb .Filter .(type ){case *_fa .FlateEncoder :if _adf .Predictor !=1&&_adf .Predictor !=11{_adf .Predictor =1;
};};if _cda =_fcb .SetImage (_efaa ,nil );_cda !=nil {_f .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_cda );return _cda ;};_fcb .ToPdfObject ();return nil ;
};func _gag (_bdc []_fa .PdfObject )(_aec map[*_fa .PdfObjectStream ]struct{},_fad error ){_aec =map[*_fa .PdfObjectStream ]struct{}{};_afb :=map[*_fde .PdfFont ]struct{}{};_ce :=_bfff (_bdc );for _ ,_ffff :=range _ce ._dfbd {_aag ,_fdgc :=_fa .GetDict (_ffff .PdfObject );
if !_fdgc {continue ;};_abc ,_fdgc :=_fa .GetDict (_aag .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_fdgc {continue ;};_cbde ,_ :=_eebd (_aag .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ebg ,_bef :=_fde .NewPdfPageResourcesFromDict (_abc );
if _bef !=nil {return nil ,_bef ;};_aca :=[]content {{_fbg :_cbde ,_eeg :_ebg }};_ggbg :=_aggd (_aag .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _ggbg !=nil {_aca =append (_aca ,_ggbg ...);};for _ ,_dg :=range _aca {_eaa ,_bgb :=_a .NewFromContents (_dg ._fbg ,_dg ._eeg );
if _bgb !=nil {return nil ,_bgb ;};_de ,_ ,_ ,_bgb :=_eaa .ExtractPageText ();if _bgb !=nil {return nil ,_bgb ;};for _ ,_fdgb :=range _de .Marks ().Elements (){if _fdgb .Font ==nil {continue ;};if _ ,_ef :=_afb [_fdgb .Font ];!_ef {_afb [_fdgb .Font ]=struct{}{};
};};};};_cf :=map[*_fa .PdfObjectStream ][]*_fde .PdfFont {};for _bdcc :=range _afb {_eba :=_bdcc .FontDescriptor ();if _eba ==nil ||_eba .FontFile2 ==nil {continue ;};_eec ,_fbc :=_fa .GetStream (_eba .FontFile2 );if !_fbc {continue ;};_cf [_eec ]=append (_cf [_eec ],_bdcc );
};for _fag :=range _cf {var _ba []rune ;var _gc []_gf .GlyphIndex ;for _ ,_efc :=range _cf [_fag ]{switch _ccg :=_efc .Encoder ().(type ){case *_d .IdentityEncoder :_edg :=_ccg .RegisteredRunes ();_gca :=make ([]_gf .GlyphIndex ,len (_edg ));for _fgag ,_geca :=range _edg {_gca [_fgag ]=_gf .GlyphIndex (_geca );
};_gc =append (_gc ,_gca ...);case *_d .TrueTypeFontEncoder :_dfe :=_ccg .RegisteredRunes ();_ba =append (_ba ,_dfe ...);case _d .SimpleEncoder :_efcb :=_ccg .Charcodes ();for _ ,_fgb :=range _efcb {_ebgd ,_beea :=_ccg .CharcodeToRune (_fgb );if !_beea {_f .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_fgb );
continue ;};_ba =append (_ba ,_ebgd );};};};_fad =_cfe (_fag ,_ba ,_gc );if _fad !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_fad );
return nil ,_fad ;};_aec [_fag ]=struct{}{};};return _aec ,nil ;};type imageModifications struct{Scale float64 ;Encoding _fa .StreamEncoder ;};func _ddfc (_ggda []_fa .PdfObject ,_geg map[_fa .PdfObject ]_fa .PdfObject ){if len (_geg )==0{return ;};for _eeab ,_fac :=range _ggda {if _bae ,_ccag :=_geg [_fac ];
_ccag {_ggda [_eeab ]=_bae ;continue ;};_geg [_fac ]=_fac ;switch _ddg :=_fac .(type ){case *_fa .PdfObjectArray :_fdee :=make ([]_fa .PdfObject ,_ddg .Len ());copy (_fdee ,_ddg .Elements ());_ddfc (_fdee ,_geg );for _aadbc ,_cbfe :=range _fdee {_ddg .Set (_aadbc ,_cbfe );
};case *_fa .PdfObjectStreams :_ddfc (_ddg .Elements (),_geg );case *_fa .PdfObjectStream :_aedc :=[]_fa .PdfObject {_ddg .PdfObjectDictionary };_ddfc (_aedc ,_geg );_ddg .PdfObjectDictionary =_aedc [0].(*_fa .PdfObjectDictionary );case *_fa .PdfObjectDictionary :_bafg :=_ddg .Keys ();
_ccb :=make ([]_fa .PdfObject ,len (_bafg ));for _gbd ,_bba :=range _bafg {_ccb [_gbd ]=_ddg .Get (_bba );};_ddfc (_ccb ,_geg );for _gfff ,_cedf :=range _bafg {_ddg .Set (_cedf ,_ccb [_gfff ]);};case *_fa .PdfIndirectObject :_aefd :=[]_fa .PdfObject {_ddg .PdfObject };
_ddfc (_aefd ,_geg );_ddg .PdfObject =_aefd [0];};};};func _gd (_ae *_fb .ContentStreamOperations )*_fb .ContentStreamOperations {if _ae ==nil {return nil ;};_dc :=_fb .ContentStreamOperations {};for _ ,_aa :=range *_ae {switch _aa .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_aa .Params )==6{if _cd ,_edd :=_fa .GetNumbersAsFloat (_aa .Params );_edd ==nil {if _cd [0]==1&&_cd [1]==0&&_cd [2]==0&&_cd [3]==1{_aa =&_fb .ContentStreamOperation {Params :[]_fa .PdfObject {_aa .Params [4],_aa .Params [5]},Operand :"\u0054\u0064"};
};};};};_dc =append (_dc ,_aa );};return &_dc ;};func _eab (_daf []_fa .PdfObject )[]*imageInfo {_ggbgg :=_fa .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_dbb :=make (map[*_fa .PdfObjectStream ]struct{});var _aggg []*imageInfo ;for _ ,_abcc :=range _daf {_cfcc ,_gbfb :=_fa .GetStream (_abcc );
if !_gbfb {continue ;};if _ ,_dec :=_dbb [_cfcc ];_dec {continue ;};_dbb [_cfcc ]=struct{}{};_ffc :=_cfcc .PdfObjectDictionary .Get (_ggbgg );_eca ,_gbfb :=_fa .GetName (_ffc );if !_gbfb ||string (*_eca )!="\u0049\u006d\u0061g\u0065"{continue ;};_fgba :=&imageInfo {Stream :_cfcc ,BitsPerComponent :8};
if _gdg ,_feg :=_fa .GetIntVal (_cfcc .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_feg {_fgba .BitsPerComponent =_gdg ;};if _ecfca ,_daff :=_fa .GetIntVal (_cfcc .Get ("\u0057\u0069\u0064t\u0068"));_daff {_fgba .Width =_ecfca ;
};if _dcaf ,_aea :=_fa .GetIntVal (_cfcc .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_aea {_fgba .Height =_dcaf ;};_efde ,_def :=_fde .NewPdfColorspaceFromPdfObject (_cfcc .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _def !=nil {_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_def );
continue ;};if _efde ==nil {_fge ,_dfee :=_fa .GetName (_cfcc .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _dfee {switch _fge .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_efde =_fde .NewPdfColorspaceDeviceGray ();
_fgba .BitsPerComponent =1;};};};switch _ddc :=_efde .(type ){case *_fde .PdfColorspaceDeviceRGB :_fgba .ColorComponents =3;case *_fde .PdfColorspaceDeviceGray :_fgba .ColorComponents =1;default:_f .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_ddc );
continue ;};_aggg =append (_aggg ,_fgba );};return _aggg ;};type content struct{_fbg string ;_eeg *_fde .PdfPageResources ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_fdef :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_fdef .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_fdef .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_dgeb :=new (ImagePPI );
_dgeb .ImageUpperPPI =options .ImageUpperPPI ;_fdef .Append (_dgeb );};if options .ImageQuality > 0{_eage :=new (Image );_eage .ImageQuality =options .ImageQuality ;_fdef .Append (_eage );};if options .CombineDuplicateDirectObjects {_fdef .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_fdef .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_fdef .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_fdef .Append (new (ObjectStreams ));
};if options .CompressStreams {_fdef .Append (new (CompressStreams ));};return _fdef ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ebgdb *CompressStreams )Optimize (objects []_fa .PdfObject )(_bcaa []_fa .PdfObject ,_eaaf error ){_bcaa =make ([]_fa .PdfObject ,len (objects ));copy (_bcaa ,objects );for _ ,_bff :=range objects {_ceb ,_egc :=_fa .GetStream (_bff );if !_egc {continue ;
};if _dcd :=_ceb .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_dcd !=nil {if _ ,_efa :=_fa .GetName (_dcd );_efa {continue ;};if _gbe ,_fgc :=_fa .GetArray (_dcd );_fgc &&_gbe .Len ()> 0{continue ;};};_ada :=_fa .NewFlateEncoder ();var _bagg []byte ;_bagg ,_eaaf =_ada .EncodeBytes (_ceb .Stream );
if _eaaf !=nil {return _bcaa ,_eaaf ;};_ebe :=_ada .MakeStreamDict ();if len (_bagg )+len (_ebe .WriteString ())< len (_ceb .Stream ){_ceb .Stream =_bagg ;_ceb .PdfObjectDictionary .Merge (_ebe );_ceb .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_fa .MakeInteger (int64 (len (_ceb .Stream ))));
};};return _bcaa ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dcfa *ImagePPI )Optimize (objects []_fa .PdfObject )(_bbc []_fa .PdfObject ,_cgbc error ){if _dcfa .ImageUpperPPI <=0{return objects ,nil ;};_fgg :=_eab (objects );if len (_fgg )==0{return objects ,nil ;};_edgfc :=make (map[_fa .PdfObject ]struct{});
for _ ,_eead :=range _fgg {_dff :=_eead .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_edgfc [_dff ]=struct{}{};};_fcbf :=make (map[*_fa .PdfObjectStream ]*imageInfo );for _ ,_dcff :=range _fgg {_fcbf [_dcff .Stream ]=_dcff ;};var _fdcg *_fa .PdfObjectDictionary ;
for _ ,_deff :=range objects {if _bfd ,_gbfc :=_fa .GetDict (_deff );_fdcg ==nil &&_gbfc {if _dfcc ,_gdge :=_fa .GetName (_bfd .Get ("\u0054\u0079\u0070\u0065"));_gdge &&*_dfcc =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_fdcg =_bfd ;};};};if _fdcg ==nil {return objects ,nil ;
};_cag ,_fdb :=_fa .GetDict (_fdcg .Get ("\u0050\u0061\u0067e\u0073"));if !_fdb {return objects ,nil ;};_cbba ,_cbeb :=_fa .GetArray (_cag .Get ("\u004b\u0069\u0064\u0073"));if !_cbeb {return objects ,nil ;};for _ ,_fdba :=range _cbba .Elements (){_gba :=make (map[string ]*imageInfo );
_ccf ,_dce :=_fa .GetDict (_fdba );if !_dce {continue ;};_gbad ,_ :=_eebd (_ccf .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_gbad )==0{continue ;};_aed ,_fbab :=_fa .GetDict (_ccf .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_fbab {continue ;};_dbea ,_gda :=_fde .NewPdfPageResourcesFromDict (_aed );if _gda !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_gda );
continue ;};_fbaf ,_fdbf :=_fa .GetDict (_aed .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_fdbf {continue ;};_bbce :=_fbaf .Keys ();for _ ,_gbb :=range _bbce {if _fbdb ,_bdeb :=_fa .GetStream (_fbaf .Get (_gbb ));_bdeb {if _eegb ,_bcff :=_fcbf [_fbdb ];
_bcff {_gba [string (_gbb )]=_eegb ;};};};_gea :=_fb .NewContentStreamParser (_gbad );_abbc ,_gda :=_gea .Parse ();if _gda !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gda );continue ;};_bdbg :=_fb .NewContentStreamProcessor (*_abbc );
_bdbg .AddHandler (_fb .HandlerConditionEnumAllOperands ,"",func (_gbcg *_fb .ContentStreamOperation ,_dgc _fb .GraphicsState ,_adc *_fde .PdfPageResources )error {switch _gbcg .Operand {case "\u0044\u006f":if len (_gbcg .Params )!=1{_f .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_eaad ,_acc :=_fa .GetName (_gbcg .Params [0]);if !_acc {_f .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _gcc ,_fggg :=_gba [string (*_eaad )];_fggg {_eda :=_dgc .CTM .ScalingFactorX ();_ead :=_dgc .CTM .ScalingFactorY ();_ffb ,_ggdf :=_eda /72.0,_ead /72.0;_bebd ,_eabb :=float64 (_gcc .Width )/_ffb ,float64 (_gcc .Height )/_ggdf ;if _ffb ==0||_ggdf ==0{_bebd =72.0;
_eabb =72.0;};_gcc .PPI =_bb .Max (_gcc .PPI ,_bebd );_gcc .PPI =_bb .Max (_gcc .PPI ,_eabb );};};return nil ;});_gda =_bdbg .Process (_dbea );if _gda !=nil {_f .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_gda );
continue ;};};for _ ,_bdbge :=range _fgg {if _ ,_cad :=_edgfc [_bdbge .Stream ];_cad {continue ;};if _bdbge .PPI <=_dcfa .ImageUpperPPI {continue ;};_acce ,_eccde :=_fde .NewXObjectImageFromStream (_bdbge .Stream );if _eccde !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_eccde );
continue ;};var _bfe imageModifications ;_bfe .Scale =_dcfa .ImageUpperPPI /_bdbge .PPI ;if _bdbge .BitsPerComponent ==1&&_bdbge .ColorComponents ==1{_cbda :=_bb .Round (_bdbge .PPI /_dcfa .ImageUpperPPI );_dfg :=_gg .NextPowerOf2 (uint (_cbda ));if _gg .InDelta (float64 (_dfg ),1/_bfe .Scale ,0.3){_bfe .Scale =float64 (1)/float64 (_dfg );
};if _ ,_fbae :=_acce .Filter .(*_fa .JBIG2Encoder );!_fbae {_bfe .Encoding =_fa .NewJBIG2Encoder ();};};if _eccde =_afg (_acce ,_bfe );_eccde !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_eccde );
continue ;};_bfe .Encoding =nil ;if _afba ,_cgc :=_fa .GetStream (_bdbge .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_cgc {_ggea ,_ggf :=_fde .NewXObjectImageFromStream (_afba );if _ggf !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ggf );
continue ;};if _ggf =_afg (_ggea ,_bfe );_ggf !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ggf );continue ;};};};return objects ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_da []_fde .Optimizer };

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bfb *CombineDuplicateStreams )Optimize (objects []_fa .PdfObject )(_gdc []_fa .PdfObject ,_bga error ){_cbed :=make (map[_fa .PdfObject ]_fa .PdfObject );_bdcg :=make (map[_fa .PdfObject ]struct{});_cgb :=make (map[string ][]*_fa .PdfObjectStream );
for _ ,_fee :=range objects {if _eea ,_cbbb :=_fee .(*_fa .PdfObjectStream );_cbbb {_deea :=_fg .New ();_deea .Write (_eea .Stream );_deea .Write ([]byte (_eea .PdfObjectDictionary .WriteString ()));_acg :=string (_deea .Sum (nil ));_cgb [_acg ]=append (_cgb [_acg ],_eea );
};};for _ ,_ffa :=range _cgb {if len (_ffa )< 2{continue ;};_cfc :=_ffa [0];for _gbc :=1;_gbc < len (_ffa );_gbc ++{_bgad :=_ffa [_gbc ];_cbed [_bgad ]=_cfc ;_bdcg [_bgad ]=struct{}{};};};_gdc =make ([]_fa .PdfObject ,0,len (objects )-len (_bdcg ));for _ ,_bca :=range objects {if _ ,_aeg :=_bdcg [_bca ];
_aeg {continue ;};_gdc =append (_gdc ,_bca );};_ddfc (_gdc ,_cbed );return _gdc ,nil ;};func _aeb (_dfb *_fde .Image ,_deeb float64 )(*_fde .Image ,error ){_ceed ,_acf :=_dfb .ToGoImage ();if _acf !=nil {return nil ,_acf ;};var _edff _gg .Image ;_gfbf ,_cbedg :=_ceed .(*_gg .Monochrome );
if _cbedg {if _acf =_gfbf .ResolveDecode ();_acf !=nil {return nil ,_acf ;};_edff ,_acf =_gfbf .Scale (_deeb );if _acf !=nil {return nil ,_acf ;};}else {_efab :=int (_bb .RoundToEven (float64 (_dfb .Width )*_deeb ));_bbfd :=int (_bb .RoundToEven (float64 (_dfb .Height )*_deeb ));
_edff ,_acf =_gg .NewImage (_efab ,_bbfd ,int (_dfb .BitsPerComponent ),_dfb .ColorComponents ,nil ,nil ,nil );if _acf !=nil {return nil ,_acf ;};_b .CatmullRom .Scale (_edff ,_edff .Bounds (),_ceed ,_ceed .Bounds (),_b .Over ,&_b .Options {});};_fafa :=_edff .Base ();
_ecb :=&_fde .Image {Width :int64 (_fafa .Width ),Height :int64 (_fafa .Height ),BitsPerComponent :int64 (_fafa .BitsPerComponent ),ColorComponents :_fafa .ColorComponents ,Data :_fafa .Data };_ecb .SetDecode (_fafa .Decode );_ecb .SetAlpha (_fafa .Alpha );
return _ecb ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_baf *CombineDuplicateDirectObjects )Optimize (objects []_fa .PdfObject )(_cdc []_fa .PdfObject ,_ddd error ){_ega (objects );_eff :=make (map[string ][]*_fa .PdfObjectDictionary );var _gfc func (_ace *_fa .PdfObjectDictionary );_gfc =func (_agca *_fa .PdfObjectDictionary ){for _ ,_ddf :=range _agca .Keys (){_dda :=_agca .Get (_ddf );
if _dga ,_ceeb :=_dda .(*_fa .PdfObjectDictionary );_ceeb {_beb :=_fg .New ();_beb .Write ([]byte (_dga .WriteString ()));_gbf :=string (_beb .Sum (nil ));_eff [_gbf ]=append (_eff [_gbf ],_dga );_gfc (_dga );};};};for _ ,_bfg :=range objects {_abb ,_aadb :=_bfg .(*_fa .PdfIndirectObject );
if !_aadb {continue ;};if _cac ,_fea :=_abb .PdfObject .(*_fa .PdfObjectDictionary );_fea {_gfc (_cac );};};_ade :=make ([]_fa .PdfObject ,0,len (_eff ));_fdc :=make (map[_fa .PdfObject ]_fa .PdfObject );for _ ,_eag :=range _eff {if len (_eag )< 2{continue ;
};_fba :=_fa .MakeDict ();_fba .Merge (_eag [0]);_fdde :=_fa .MakeIndirectObject (_fba );_ade =append (_ade ,_fdde );for _ecg :=0;_ecg < len (_eag );_ecg ++{_beae :=_eag [_ecg ];_fdc [_beae ]=_fdde ;};};_cdc =make ([]_fa .PdfObject ,len (objects ));copy (_cdc ,objects );
_cdc =append (_ade ,_cdc ...);_ddfc (_cdc ,_fdc );return _cdc ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};func _cfe (_fgff *_fa .PdfObjectStream ,_faff []rune ,_agd []_gf .GlyphIndex )error {_fgff ,_fab :=_fa .GetStream (_fgff );if !_fab {_f .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _e .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_edgf ,_dca :=_fa .DecodeStream (_fgff );if _dca !=nil {_f .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_dca );
return _dca ;};_bcb ,_dca :=_gf .Parse (_fd .NewReader (_edgf ));if _dca !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_fgff .Stream ));
return _dca ;};_dfc :=_agd ;if len (_faff )> 0{_fdd :=_bcb .LookupRunes (_faff );_dfc =append (_dfc ,_fdd ...);};_bcb ,_dca =_bcb .SubsetKeepIndices (_dfc );if _dca !=nil {_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_dca );
return _dca ;};var _gcb _fd .Buffer ;_dca =_bcb .Write (&_gcb );if _dca !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_dca );return _dca ;};if _gcb .Len ()> len (_edgf ){_f .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_age ,_dca :=_fa .MakeStream (_gcb .Bytes (),_fa .NewFlateEncoder ());if _dca !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_dca );return _dca ;
};*_fgff =*_age ;_fgff .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_fa .MakeInteger (int64 (_gcb .Len ())));return nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};