//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_ccg "bytes";_a "crypto/md5";_fcb "errors";_aa "fmt";_fc "github.com/unidoc/unipdf/v3/common";_cc "github.com/unidoc/unipdf/v3/contentstream";_db "github.com/unidoc/unipdf/v3/core";_e "github.com/unidoc/unipdf/v3/extractor";_ge "github.com/unidoc/unipdf/v3/internal/imageutil";
_g "github.com/unidoc/unipdf/v3/internal/textencoding";_d "github.com/unidoc/unipdf/v3/model";_fb "github.com/unidoc/unitype";_c "golang.org/x/image/draw";_fe "math";_fed "strings";);

// Optimize optimizes PDF objects to decrease PDF size.
func (_ee *CleanContentstream )Optimize (objects []_db .PdfObject )(_de []_db .PdfObject ,_dd error ){_ba :=map[*_db .PdfObjectStream ]struct{}{};var _aga []*_db .PdfObjectStream ;_ae :=func (_aaed *_db .PdfObjectStream ){if _ ,_fcd :=_ba [_aaed ];!_fcd {_ba [_aaed ]=struct{}{};
_aga =append (_aga ,_aaed );};};_ec :=map[_db .PdfObject ]bool {};_ac :=map[_db .PdfObject ]bool {};for _ ,_aec :=range objects {switch _gc :=_aec .(type ){case *_db .PdfIndirectObject :switch _ada :=_gc .PdfObject .(type ){case *_db .PdfObjectDictionary :if _aeca ,_ddc :=_db .GetName (_ada .Get ("\u0054\u0079\u0070\u0065"));
!_ddc ||_aeca .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _dad ,_gfd :=_db .GetStream (_ada .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_gfd {_ae (_dad );}else if _cd ,_gdf :=_db .GetArray (_ada .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_gdf {var _gcb []*_db .PdfObjectStream ;for _ ,_efd :=range _cd .Elements (){if _gb ,_fg :=_db .GetStream (_efd );_fg {_gcb =append (_gcb ,_gb );};};if len (_gcb )> 0{var _ddb _ccg .Buffer ;for _ ,_gg :=range _gcb {if _egd ,_dca :=_db .DecodeStream (_gg );
_dca ==nil {_ddb .Write (_egd );};_ec [_gg ]=true ;};_gbg ,_cdd :=_db .MakeStream (_ddb .Bytes (),_db .NewFlateEncoder ());if _cdd !=nil {return nil ,_cdd ;};_ac [_gbg ]=true ;_ada .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_gbg );_ae (_gbg );
};};};case *_db .PdfObjectStream :if _bc ,_dfd :=_db .GetName (_gc .Get ("\u0054\u0079\u0070\u0065"));!_dfd ||_bc .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _bda ,_cbb :=_db .GetName (_gc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_cbb ||_bda .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_ae (_gc );};};for _ ,_fa :=range _aga {_dd =_bf (_fa );if _dd !=nil {return nil ,_dd ;};};_de =nil ;for _ ,_dcc :=range objects {if _ec [_dcc ]{continue ;};_de =append (_de ,_dcc );};for _gfg :=range _ac {_de =append (_de ,_gfg );
};return _de ,nil ;};func _cgc (_ggf *_d .XObjectImage ,_ega imageModifications )error {_cdc ,_cbca :=_ggf .ToImage ();if _cbca !=nil {return _cbca ;};if _ega .Scale !=0{_cdc ,_cbca =_gfeg (_cdc ,_ega .Scale );if _cbca !=nil {return _cbca ;};};if _ega .Encoding !=nil {_ggf .Filter =_ega .Encoding ;
};_ggf .Decode =nil ;switch _cabc :=_ggf .Filter .(type ){case *_db .FlateEncoder :if _cabc .Predictor !=1&&_cabc .Predictor !=11{_cabc .Predictor =1;};};if _cbca =_ggf .SetImage (_cdc ,nil );_cbca !=nil {_fc .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_cbca );
return _cbca ;};_ggf .ToPdfObject ();return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_beg *CleanFonts )Optimize (objects []_db .PdfObject )(_ceg []_db .PdfObject ,_aea error ){var _afa map[*_db .PdfObjectStream ]struct{};if _beg .Subset {var _acac error ;_afa ,_acac =_add (objects );if _acac !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_acac );
return nil ,_acac ;};};for _ ,_dadb :=range objects {_cab ,_eab :=_db .GetStream (_dadb );if !_eab {continue ;};if _ ,_dbd :=_afa [_cab ];_dbd {continue ;};_egdg ,_cad :=_db .NewEncoderFromStream (_cab );if _cad !=nil {_fc .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_cad );
continue ;};_ab ,_cad :=_egdg .DecodeStream (_cab );if _cad !=nil {_fc .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_cad );
continue ;};if len (_ab )< 4{continue ;};_gab :=string (_ab [:4]);if _gab =="\u004f\u0054\u0054\u004f"{continue ;};if _gab !="\u0000\u0001\u0000\u0000"&&_gab !="\u0074\u0072\u0075\u0065"{continue ;};_ffg ,_cad :=_fb .Parse (_ccg .NewReader (_ab ));if _cad !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cad );
continue ;};_cad =_ffg .Optimize ();if _cad !=nil {_fc .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_cad );continue ;};var _ccfb _ccg .Buffer ;
_cad =_ffg .Write (&_ccfb );if _cad !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cad );
continue ;};if _ccfb .Len ()> len (_ab ){_fc .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_ebd ,_cad :=_db .MakeStream (_ccfb .Bytes (),_db .NewFlateEncoder ());if _cad !=nil {continue ;};*_cab =*_ebd ;_cab .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_db .MakeInteger (int64 (_ccfb .Len ())));};return objects ,nil ;};

// Append appends optimizers to the chain.
func (_fd *Chain )Append (optimizers ..._d .Optimizer ){_fd ._ea =append (_fd ._ea ,optimizers ...)};func _bf (_bd *_db .PdfObjectStream )error {_efa ,_dc :=_db .DecodeStream (_bd );if _dc !=nil {return _dc ;};_da :=_cc .NewContentStreamParser (string (_efa ));
_ad ,_dc :=_da .Parse ();if _dc !=nil {return _dc ;};_ad =_ebg (_ad );_cf :=_ad .Bytes ();if len (_cf )>=len (_efa ){return nil ;};_eaf ,_dc :=_db .MakeStream (_ad .Bytes (),_db .NewFlateEncoder ());if _dc !=nil {return _dc ;};_bd .Stream =_eaf .Stream ;
_bd .Merge (_eaf .PdfObjectDictionary );return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bee *CombineDuplicateDirectObjects )Optimize (objects []_db .PdfObject )(_gcbd []_db .PdfObject ,_dgb error ){_gfgf (objects );_dgf :=make (map[string ][]*_db .PdfObjectDictionary );var _agaa func (_eagc *_db .PdfObjectDictionary );_agaa =func (_gedb *_db .PdfObjectDictionary ){for _ ,_cdggb :=range _gedb .Keys (){_gga :=_gedb .Get (_cdggb );
if _bga ,_feeg :=_gga .(*_db .PdfObjectDictionary );_feeg {_fce :=_a .New ();_fce .Write ([]byte (_bga .WriteString ()));_abdd :=string (_fce .Sum (nil ));_dgf [_abdd ]=append (_dgf [_abdd ],_bga );_agaa (_bga );};};};for _ ,_acc :=range objects {_ceca ,_fddf :=_acc .(*_db .PdfIndirectObject );
if !_fddf {continue ;};if _fgc ,_ffe :=_ceca .PdfObject .(*_db .PdfObjectDictionary );_ffe {_agaa (_fgc );};};_ddf :=make ([]_db .PdfObject ,0,len (_dgf ));_bdab :=make (map[_db .PdfObject ]_db .PdfObject );for _ ,_dba :=range _dgf {if len (_dba )< 2{continue ;
};_dcd :=_db .MakeDict ();_dcd .Merge (_dba [0]);_cegb :=_db .MakeIndirectObject (_dcd );_ddf =append (_ddf ,_cegb );for _gbaa :=0;_gbaa < len (_dba );_gbaa ++{_fec :=_dba [_gbaa ];_bdab [_fec ]=_cegb ;};};_gcbd =make ([]_db .PdfObject ,len (objects ));
copy (_gcbd ,objects );_gcbd =append (_ddf ,_gcbd ...);_gfc (_gcbd ,_bdab );return _gcbd ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_ea []_d .Optimizer };type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_db .PdfObjectStream ;PPI float64 ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};type content struct{_bdac string ;_fea *_d .PdfPageResources ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};func _egf (_debdb string ,_abd []string )bool {for _ ,_bea :=range _abd {if _debdb ==_bea {return true ;};};return false ;};func _ced (_gaba []_db .PdfObject )(map[_db .PdfObject ]struct{},error ){_bec :=_aece (_gaba );
_ecef :=_bec ._fccbc ;_aac :=make (map[_db .PdfObject ]struct{});_aed :=_ged (_ecef );for _ ,_cdgg :=range _ecef {_ddcd ,_gage :=_db .GetDict (_cdgg .PdfObject );if !_gage {continue ;};_bde ,_gage :=_db .GetDict (_ddcd .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_gage {continue ;};_ggb :=_aed ["\u0058O\u0062\u006a\u0065\u0063\u0074"];_bbc ,_gage :=_db .GetDict (_bde .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if _gage {_fee :=_ccc (_bbc );for _ ,_bbf :=range _fee {if _egf (_bbf ,_ggb ){continue ;};_dcbf :=*_db .MakeName (_bbf );
_adb :=_bbc .Get (_dcbf );_aac [_adb ]=struct{}{};_bbc .Remove (_dcbf );_debd :=_cabb (_adb ,_aac );if _debd !=nil {_fc .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_adb );
};};};_ebdg ,_gage :=_db .GetDict (_bde .Get ("\u0046\u006f\u006e\u0074"));_gec :=_aed ["\u0046\u006f\u006e\u0074"];if _gage {_bfd :=_ccc (_ebdg );for _ ,_ecde :=range _bfd {if _egf (_ecde ,_gec ){continue ;};_fffe :=*_db .MakeName (_ecde );_cbc :=_ebdg .Get (_fffe );
_aac [_cbc ]=struct{}{};_ebdg .Remove (_fffe );_eba :=_cabb (_cbc ,_aac );if _eba !=nil {_fc .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_cbc );
};};};_dfg ,_gage :=_db .GetDict (_bde .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));if _gage {_cbg :=_ccc (_dfg );_abea :=_aed ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_ecg :=range _cbg {if _egf (_ecg ,_abea ){continue ;};_edd :=*_db .MakeName (_ecg );
_ceb :=_dfg .Get (_edd );_aac [_ceb ]=struct{}{};_dfg .Remove (_edd );_cec :=_cabb (_ceb ,_aac );if _cec !=nil {_fc .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_ceb );
};};};};return _aac ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _ged (_ddbe []*_db .PdfIndirectObject )map[string ][]string {_bfb :=map[string ][]string {};for _ ,_gde :=range _ddbe {_aag ,_ecb :=_db .GetDict (_gde .PdfObject );if !_ecb {continue ;};_bff :=_aag .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");
_cff :=_db .TraceToDirectObject (_bff );var _bafb []string ;if _bac ,_aaeb :=_cff .(*_db .PdfObjectArray );_aaeb {for _ ,_dcg :=range _bac .Elements (){_deba ,_ecec :=_caa (_dcg );if _ecec !=nil {continue ;};_bafb =append (_bafb ,_deba );};};_bef :=_fed .Join (_bafb ,"\u0020");
_geg :=_cc .NewContentStreamParser (_bef );_fged ,_cegc :=_geg .Parse ();if _cegc !=nil {continue ;};for _ ,_cddcf :=range *_fged {_eac :=_cddcf .Operand ;_cegg :=_cddcf .Params ;switch _eac {case "\u0044\u006f":_caf :=_cegg [0].String ();if _ ,_gcd :=_bfb ["\u0058O\u0062\u006a\u0065\u0063\u0074"];
!_gcd {_bfb ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_caf };}else {_bfb ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_bfb ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_caf );};case "\u0054\u0066":_fbca :=_cegg [0].String ();if _ ,_aagc :=_bfb ["\u0046\u006f\u006e\u0074"];
!_aagc {_bfb ["\u0046\u006f\u006e\u0074"]=[]string {_fbca };}else {_bfb ["\u0046\u006f\u006e\u0074"]=append (_bfb ["\u0046\u006f\u006e\u0074"],_fbca );};case "\u0067\u0073":_ecf :=_cegg [0].String ();if _ ,_ded :=_bfb ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];
!_ded {_bfb ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_ecf };}else {_bfb ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_bfb ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_ecf );};};};};return _bfb ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ccgd *Chain )Optimize (objects []_db .PdfObject )(_af []_db .PdfObject ,_eb error ){_ccf :=objects ;for _ ,_be :=range _ccgd ._ea {_aae ,_fcbb :=_be .Optimize (_ccf );if _fcbb !=nil {_fc .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_fcbb );
continue ;};_ccf =_aae ;};return _ccf ,nil ;};func _eabd (_acaa _db .PdfObject )[]content {if _acaa ==nil {return nil ;};_abb ,_def :=_db .GetArray (_acaa );if !_def {_fc .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _cfa []content ;for _ ,_dcb :=range _abb .Elements (){_aeg ,_aggg :=_db .GetDict (_dcb );if !_aggg {_fc .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_afae ,_aggg :=_db .GetDict (_aeg .Get ("\u0041\u0050"));if !_aggg {_fc .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_fgf :=_db .TraceToDirectObject (_afae .Get ("\u004e"));
if _fgf ==nil {_fc .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _bfcg *_db .PdfObjectStream ;switch _dga :=_fgf .(type ){case *_db .PdfObjectDictionary :_gce ,_abe :=_db .GetName (_aeg .Get ("\u0041\u0053"));
if !_abe {_fc .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_bfcg ,_abe =_db .GetStream (_dga .Get (*_gce ));if !_abe {_fc .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_db .PdfObjectStream :_bfcg =_dga ;};if _bfcg ==nil {_fc .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_cg ,_cee :=_d .NewXObjectFormFromStream (_bfcg );if _cee !=nil {_fc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cee );
continue ;};_bgda ,_cee :=_cg .GetContentStream ();if _cee !=nil {_fc .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_cee );continue ;};_cfa =append (_cfa ,content {_bdac :string (_bgda ),_fea :_cg .Resources });
};return _cfa ;};type imageModifications struct{Scale float64 ;Encoding _db .StreamEncoder ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _gfgf (_bgef []_db .PdfObject ){for _cddd ,_gcebb :=range _bgef {switch _aeaf :=_gcebb .(type ){case *_db .PdfIndirectObject :_aeaf .ObjectNumber =int64 (_cddd +1);_aeaf .GenerationNumber =0;case *_db .PdfObjectStream :_aeaf .ObjectNumber =int64 (_cddd +1);
_aeaf .GenerationNumber =0;case *_db .PdfObjectStreams :_aeaf .ObjectNumber =int64 (_cddd +1);_aeaf .GenerationNumber =0;};};};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _caa (_ceee _db .PdfObject )(string ,error ){_daf :=_db .TraceToDirectObject (_ceee );switch _dbc :=_daf .(type ){case *_db .PdfObjectString :return _dbc .Str (),nil ;case *_db .PdfObjectStream :_gcc ,_bge :=_db .DecodeStream (_dbc );
if _bge !=nil {return "",_bge ;};return string (_gcc ),nil ;};return "",_aa .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_daf );
};func _edb (_gac []_db .PdfObject )[]*imageInfo {_fade :=_db .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_dde :=make (map[*_db .PdfObjectStream ]struct{});var _fccf []*imageInfo ;for _ ,_aafb :=range _gac {_fda ,_bfg :=_db .GetStream (_aafb );
if !_bfg {continue ;};if _ ,_ecgg :=_dde [_fda ];_ecgg {continue ;};_dde [_fda ]=struct{}{};_becb :=_fda .PdfObjectDictionary .Get (_fade );_acg ,_bfg :=_db .GetName (_becb );if !_bfg ||string (*_acg )!="\u0049\u006d\u0061g\u0065"{continue ;};_bcd :=&imageInfo {Stream :_fda ,BitsPerComponent :8};
if _efed ,_gfe :=_db .GetIntVal (_fda .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_gfe {_bcd .BitsPerComponent =_efed ;};if _efeg ,_feea :=_db .GetIntVal (_fda .Get ("\u0057\u0069\u0064t\u0068"));_feea {_bcd .Width =_efeg ;
};if _dgcg ,_bdc :=_db .GetIntVal (_fda .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_bdc {_bcd .Height =_dgcg ;};_fgeb ,_cffd :=_d .NewPdfColorspaceFromPdfObject (_fda .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _cffd !=nil {_fc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cffd );
continue ;};if _fgeb ==nil {_ffc ,_cedd :=_db .GetName (_fda .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _cedd {switch _ffc .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_fgeb =_d .NewPdfColorspaceDeviceGray ();
_bcd .BitsPerComponent =1;};};};switch _gge :=_fgeb .(type ){case *_d .PdfColorspaceDeviceRGB :_bcd .ColorComponents =3;case *_d .PdfColorspaceDeviceGray :_bcd .ColorComponents =1;default:_fc .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_gge );
continue ;};_fccf =append (_fccf ,_bcd );};return _fccf ;};func _aece (_eca []_db .PdfObject )objectStructure {_dfbg :=objectStructure {};_afaed :=false ;for _ ,_bggd :=range _eca {switch _cddg :=_bggd .(type ){case *_db .PdfIndirectObject :_aagb ,_dcda :=_db .GetDict (_cddg );
if !_dcda {continue ;};_cdde ,_dcda :=_db .GetName (_aagb .Get ("\u0054\u0079\u0070\u0065"));if !_dcda {continue ;};switch _cdde .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_dfbg ._fbbc =_aagb ;_afaed =true ;};};if _afaed {break ;};};if !_afaed {return _dfbg ;
};_dgfb ,_cdef :=_db .GetDict (_dfbg ._fbbc .Get ("\u0050\u0061\u0067e\u0073"));if !_cdef {return _dfbg ;};_dfbg ._bcbff =_dgfb ;_dge ,_cdef :=_db .GetArray (_dgfb .Get ("\u004b\u0069\u0064\u0073"));if !_cdef {return _dfbg ;};for _ ,_adbb :=range _dge .Elements (){_febd ,_bccd :=_db .GetIndirect (_adbb );
if !_bccd {break ;};_dfbg ._fccbc =append (_dfbg ._fccbc ,_febd );};return _dfbg ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_geeb *ImagePPI )Optimize (objects []_db .PdfObject )(_fgcf []_db .PdfObject ,_cbe error ){if _geeb .ImageUpperPPI <=0{return objects ,nil ;};_gfb :=_edb (objects );if len (_gfb )==0{return objects ,nil ;};_ecfc :=make (map[_db .PdfObject ]struct{});
for _ ,_addf :=range _gfb {_feaa :=_addf .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_ecfc [_feaa ]=struct{}{};};_geec :=make (map[*_db .PdfObjectStream ]*imageInfo );for _ ,_gfbe :=range _gfb {_geec [_gfbe .Stream ]=_gfbe ;};var _ade *_db .PdfObjectDictionary ;
for _ ,_abc :=range objects {if _debcc ,_acgb :=_db .GetDict (_abc );_ade ==nil &&_acgb {if _agee ,_bcea :=_db .GetName (_debcc .Get ("\u0054\u0079\u0070\u0065"));_bcea &&*_agee =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_ade =_debcc ;};};};if _ade ==nil {return objects ,nil ;
};_fgdc ,_fddc :=_db .GetDict (_ade .Get ("\u0050\u0061\u0067e\u0073"));if !_fddc {return objects ,nil ;};_gede ,_dbdg :=_db .GetArray (_fgdc .Get ("\u004b\u0069\u0064\u0073"));if !_dbdg {return objects ,nil ;};for _ ,_fgec :=range _gede .Elements (){_acb :=make (map[string ]*imageInfo );
_fbg ,_bfdb :=_db .GetDict (_fgec );if !_bfdb {continue ;};_gabg ,_ :=_aad (_fbg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_gabg )==0{continue ;};_feac ,_aeda :=_db .GetDict (_fbg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_aeda {continue ;};_cge ,_gdg :=_d .NewPdfPageResourcesFromDict (_feac );if _gdg !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_gdg );
continue ;};_ggg ,_gceb :=_db .GetDict (_feac .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_gceb {continue ;};_afac :=_ggg .Keys ();for _ ,_dfc :=range _afac {if _bcce ,_fbac :=_db .GetStream (_ggg .Get (_dfc ));_fbac {if _cafa ,_feda :=_geec [_bcce ];
_feda {_acb [string (_dfc )]=_cafa ;};};};_fdbf :=_cc .NewContentStreamParser (_gabg );_bdg ,_gdg :=_fdbf .Parse ();if _gdg !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gdg );continue ;};_dadc :=_cc .NewContentStreamProcessor (*_bdg );
_dadc .AddHandler (_cc .HandlerConditionEnumAllOperands ,"",func (_bffb *_cc .ContentStreamOperation ,_aee _cc .GraphicsState ,_ccaa *_d .PdfPageResources )error {switch _bffb .Operand {case "\u0044\u006f":if len (_bffb .Params )!=1{_fc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_bdd ,_cfe :=_db .GetName (_bffb .Params [0]);if !_cfe {_fc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _ddef ,_agbe :=_acb [string (*_bdd )];_agbe {_gbafd :=_aee .CTM .ScalingFactorX ();_fac :=_aee .CTM .ScalingFactorY ();_fddfd ,_fdbfg :=_gbafd /72.0,_fac /72.0;_dgd ,_cdaa :=float64 (_ddef .Width )/_fddfd ,float64 (_ddef .Height )/_fdbfg ;
if _fddfd ==0||_fdbfg ==0{_dgd =72.0;_cdaa =72.0;};_ddef .PPI =_fe .Max (_ddef .PPI ,_dgd );_ddef .PPI =_fe .Max (_ddef .PPI ,_cdaa );};};return nil ;});_gdg =_dadc .Process (_cge );if _gdg !=nil {_fc .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_gdg );
continue ;};};for _ ,_dfcd :=range _gfb {if _ ,_bgeb :=_ecfc [_dfcd .Stream ];_bgeb {continue ;};if _dfcd .PPI <=_geeb .ImageUpperPPI {continue ;};_ecbc ,_afe :=_d .NewXObjectImageFromStream (_dfcd .Stream );if _afe !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_afe );
continue ;};var _ddbd imageModifications ;_ddbd .Scale =_geeb .ImageUpperPPI /_dfcd .PPI ;if _dfcd .BitsPerComponent ==1&&_dfcd .ColorComponents ==1{_cdab :=_fe .Round (_dfcd .PPI /_geeb .ImageUpperPPI );_dae :=_ge .NextPowerOf2 (uint (_cdab ));if _ge .InDelta (float64 (_dae ),1/_ddbd .Scale ,0.3){_ddbd .Scale =float64 (1)/float64 (_dae );
};if _ ,_fdae :=_ecbc .Filter .(*_db .JBIG2Encoder );!_fdae {_ddbd .Encoding =_db .NewJBIG2Encoder ();};};if _afe =_cgc (_ecbc ,_ddbd );_afe !=nil {_fc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_afe );
continue ;};_ddbd .Encoding =nil ;if _cdfd ,_eabb :=_db .GetStream (_dfcd .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_eabb {_edbc ,_ggd :=_d .NewXObjectImageFromStream (_cdfd );if _ggd !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ggd );
continue ;};if _ggd =_cgc (_edbc ,_ddbd );_ggd !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ggd );continue ;};};};return objects ,nil ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_cgde :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_cgde .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_cgde .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_gaeg :=new (ImagePPI );
_gaeg .ImageUpperPPI =options .ImageUpperPPI ;_cgde .Append (_gaeg );};if options .ImageQuality > 0{_gedbf :=new (Image );_gedbf .ImageQuality =options .ImageQuality ;_cgde .Append (_gedbf );};if options .CombineDuplicateDirectObjects {_cgde .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_cgde .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_cgde .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_cgde .Append (new (ObjectStreams ));
};if options .CompressStreams {_cgde .Append (new (CompressStreams ));};if options .CleanUnusedResources {_cgde .Append (new (CleanUnusedResources ));};return _cgde ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};type objectStructure struct{_fbbc *_db .PdfObjectDictionary ;_bcbff *_db .PdfObjectDictionary ;_fccbc []*_db .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dfdg *ObjectStreams )Optimize (objects []_db .PdfObject )(_cbd []_db .PdfObject ,_fbag error ){_egfe :=&_db .PdfObjectStreams {};_gcgc :=make ([]_db .PdfObject ,0,len (objects ));for _ ,_bcec :=range objects {if _eedc ,_aaefd :=_bcec .(*_db .PdfIndirectObject );
_aaefd &&_eedc .GenerationNumber ==0{_egfe .Append (_bcec );}else {_gcgc =append (_gcgc ,_bcec );};};if _egfe .Len ()==0{return _gcgc ,nil ;};_cbd =make ([]_db .PdfObject ,0,len (_gcgc )+_egfe .Len ()+1);if _egfe .Len ()> 1{_cbd =append (_cbd ,_egfe );
};_cbd =append (_cbd ,_egfe .Elements ()...);_cbd =append (_cbd ,_gcgc ...);return _cbd ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fdfe *CombineIdenticalIndirectObjects )Optimize (objects []_db .PdfObject )(_dbdc []_db .PdfObject ,_gddc error ){_gfgf (objects );_efe :=make (map[_db .PdfObject ]_db .PdfObject );_dab :=make (map[_db .PdfObject ]struct{});_gee :=make (map[string ][]*_db .PdfIndirectObject );
for _ ,_egge :=range objects {_edf ,_fedc :=_egge .(*_db .PdfIndirectObject );if !_fedc {continue ;};if _dfe ,_gef :=_edf .PdfObject .(*_db .PdfObjectDictionary );_gef {if _bcbg ,_cgg :=_dfe .Get ("\u0054\u0079\u0070\u0065").(*_db .PdfObjectName );_cgg &&*_bcbg =="\u0050\u0061\u0067\u0065"{continue ;
};_debc :=_a .New ();_debc .Write ([]byte (_dfe .WriteString ()));_fag :=string (_debc .Sum (nil ));_gee [_fag ]=append (_gee [_fag ],_edf );};};for _ ,_efc :=range _gee {if len (_efc )< 2{continue ;};_bffe :=_efc [0];for _feb :=1;_feb < len (_efc );_feb ++{_edea :=_efc [_feb ];
_efe [_edea ]=_bffe ;_dab [_edea ]=struct{}{};};};_dbdc =make ([]_db .PdfObject ,0,len (objects )-len (_dab ));for _ ,_dfb :=range objects {if _ ,_feaf :=_dab [_dfb ];_feaf {continue ;};_dbdc =append (_dbdc ,_dfb );};_gfc (_dbdc ,_efe );return _dbdc ,nil ;
};func _ccc (_dbf *_db .PdfObjectDictionary )[]string {_agff :=[]string {};for _ ,_bcc :=range _dbf .Keys (){_agff =append (_agff ,_bcc .String ());};return _agff ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bgg *Image )Optimize (objects []_db .PdfObject )(_addb []_db .PdfObject ,_aafc error ){if _bgg .ImageQuality <=0{return objects ,nil ;};_baeg :=_edb (objects );if len (_baeg )==0{return objects ,nil ;};_dfec :=make (map[_db .PdfObject ]_db .PdfObject );
_beb :=make (map[_db .PdfObject ]struct{});for _ ,_dedg :=range _baeg {_fccb :=_dedg .Stream .Get ("\u0053\u004d\u0061s\u006b");_beb [_fccb ]=struct{}{};};for _bacf ,_dfbc :=range _baeg {_fdab :=_dfbc .Stream ;if _ ,_gaed :=_beb [_fdab ];_gaed {continue ;
};_fgaf ,_eaad :=_d .NewXObjectImageFromStream (_fdab );if _eaad !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_eaad );continue ;};switch _fgaf .Filter .(type ){case *_db .JBIG2Encoder :continue ;case *_db .CCITTFaxEncoder :continue ;
};_fadgc ,_eaad :=_fgaf .ToImage ();if _eaad !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_eaad );continue ;};_adaf :=_db .NewDCTEncoder ();_adaf .ColorComponents =_fadgc .ColorComponents ;_adaf .Quality =_bgg .ImageQuality ;
_adaf .BitsPerComponent =_dfbc .BitsPerComponent ;_adaf .Width =_dfbc .Width ;_adaf .Height =_dfbc .Height ;_gagf ,_eaad :=_adaf .EncodeBytes (_fadgc .Data );if _eaad !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_eaad );
continue ;};var _aaa _db .StreamEncoder ;_aaa =_adaf ;{_deg :=_db .NewFlateEncoder ();_acgd :=_db .NewMultiEncoder ();_acgd .AddEncoder (_deg );_acgd .AddEncoder (_adaf );_bcbf ,_deeb :=_acgd .EncodeBytes (_fadgc .Data );if _deeb !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_deeb );
continue ;};if len (_bcbf )< len (_gagf ){_fc .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_gagf ),len (_bcbf ),len (_fdab .Stream ));
_gagf =_bcbf ;_aaa =_acgd ;};};_gca :=len (_fdab .Stream );if _gca < len (_gagf ){continue ;};_effe :=&_db .PdfObjectStream {Stream :_gagf };_effe .PdfObjectReference =_fdab .PdfObjectReference ;_effe .PdfObjectDictionary =_db .MakeDict ();_effe .Merge (_fdab .PdfObjectDictionary );
_effe .Merge (_aaa .MakeStreamDict ());_effe .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_db .MakeInteger (int64 (len (_gagf ))));_dfec [_fdab ]=_effe ;_baeg [_bacf ].Stream =_effe ;};_addb =make ([]_db .PdfObject ,len (objects ));copy (_addb ,objects );
_gfc (_addb ,_dfec );return _addb ,nil ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};func _fae (_bfca *_db .PdfObjectStream ,_fbb []rune ,_ddbg []_fb .GlyphIndex )error {_bfca ,_cddc :=_db .GetStream (_bfca );if !_cddc {_fc .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _fcb .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gag ,_gbaf :=_db .DecodeStream (_bfca );if _gbaf !=nil {_fc .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_gbaf );
return _gbaf ;};_fbcb ,_gbaf :=_fb .Parse (_ccg .NewReader (_gag ));if _gbaf !=nil {_fc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_bfca .Stream ));
return _gbaf ;};_cdb :=_ddbg ;if len (_fbb )> 0{_egdf :=_fbcb .LookupRunes (_fbb );_cdb =append (_cdb ,_egdf ...);};_fbcb ,_gbaf =_fbcb .SubsetKeepIndices (_cdb );if _gbaf !=nil {_fc .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_gbaf );
return _gbaf ;};var _ece _ccg .Buffer ;_gbaf =_fbcb .Write (&_ece );if _gbaf !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_gbaf );return _gbaf ;};if _ece .Len ()> len (_gag ){_fc .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_agf ,_gbaf :=_db .MakeStream (_ece .Bytes (),_db .NewFlateEncoder ());if _gbaf !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_gbaf );return _gbaf ;
};*_bfca =*_agf ;_bfca .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_db .MakeInteger (int64 (_ece .Len ())));return nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};func _gfeg (_cgd *_d .Image ,_ecdd float64 )(*_d .Image ,error ){_cae ,_agfa :=_cgd .ToGoImage ();if _agfa !=nil {return nil ,_agfa ;};var _dggb _ge .Image ;_cba ,_dded :=_cae .(*_ge .Monochrome );if _dded {if _agfa =_cba .ResolveDecode ();
_agfa !=nil {return nil ,_agfa ;};_dggb ,_agfa =_cba .Scale (_ecdd );if _agfa !=nil {return nil ,_agfa ;};}else {_dbb :=int (_fe .RoundToEven (float64 (_cgd .Width )*_ecdd ));_cffdb :=int (_fe .RoundToEven (float64 (_cgd .Height )*_ecdd ));_dggb ,_agfa =_ge .NewImage (_dbb ,_cffdb ,int (_cgd .BitsPerComponent ),_cgd .ColorComponents ,nil ,nil ,nil );
if _agfa !=nil {return nil ,_agfa ;};_c .CatmullRom .Scale (_dggb ,_dggb .Bounds (),_cae ,_cae .Bounds (),_c .Over ,&_c .Options {});};_dffb :=_dggb .Base ();_egfb :=&_d .Image {Width :int64 (_dffb .Width ),Height :int64 (_dffb .Height ),BitsPerComponent :int64 (_dffb .BitsPerComponent ),ColorComponents :_dffb .ColorComponents ,Data :_dffb .Data };
_egfb .SetDecode (_dffb .Decode );_egfb .SetAlpha (_dffb .Alpha );return _egfb ,nil ;};

// GetOptimizers gets the list of optimizers in chain `c`.
func (_df *Chain )GetOptimizers ()[]_d .Optimizer {return _df ._ea };func _ebg (_gf *_cc .ContentStreamOperations )*_cc .ContentStreamOperations {if _gf ==nil {return nil ;};_cb :=_cc .ContentStreamOperations {};for _ ,_ef :=range *_gf {switch _ef .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_ef .Params )==6{if _gea ,_ag :=_db .GetNumbersAsFloat (_ef .Params );_ag ==nil {if _gea [0]==1&&_gea [1]==0&&_gea [2]==0&&_gea [3]==1{_ef =&_cc .ContentStreamOperation {Params :[]_db .PdfObject {_ef .Params [4],_ef .Params [5]},Operand :"\u0054\u0064"};
};};};};_cb =append (_cb ,_ef );};return &_cb ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cgaf *CompressStreams )Optimize (objects []_db .PdfObject )(_bbg []_db .PdfObject ,_ebf error ){_bbg =make ([]_db .PdfObject ,len (objects ));copy (_bbg ,objects );for _ ,_geef :=range objects {_faff ,_acf :=_db .GetStream (_geef );if !_acf {continue ;
};if _bcaa :=_faff .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_bcaa !=nil {if _ ,_geee :=_db .GetName (_bcaa );_geee {continue ;};if _agca ,_ccga :=_db .GetArray (_bcaa );_ccga &&_agca .Len ()> 0{continue ;};};_gaa :=_db .NewFlateEncoder ();var _fggg []byte ;
_fggg ,_ebf =_gaa .EncodeBytes (_faff .Stream );if _ebf !=nil {return _bbg ,_ebf ;};_cfgb :=_gaa .MakeStreamDict ();if len (_fggg )+len (_cfgb .WriteString ())< len (_faff .Stream ){_faff .Stream =_fggg ;_faff .PdfObjectDictionary .Merge (_cfgb );_faff .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_db .MakeInteger (int64 (len (_faff .Stream ))));
};};return _bbg ,nil ;};func _cabb (_fgg _db .PdfObject ,_agaea map[_db .PdfObject ]struct{})error {if _ebbb ,_cegd :=_fgg .(*_db .PdfIndirectObject );_cegd {_agaea [_fgg ]=struct{}{};_eee :=_cabb (_ebbb .PdfObject ,_agaea );if _eee !=nil {return _eee ;
};return nil ;};if _fcce ,_eeec :=_fgg .(*_db .PdfObjectStream );_eeec {_agaea [_fcce ]=struct{}{};_fedd :=_cabb (_fcce .PdfObjectDictionary ,_agaea );if _fedd !=nil {return _fedd ;};return nil ;};if _agcc ,_eegc :=_fgg .(*_db .PdfObjectDictionary );_eegc {for _ ,_aaf :=range _agcc .Keys (){_fbe :=_agcc .Get (_aaf );
_ =_fbe ;if _fada ,_cda :=_fbe .(*_db .PdfObjectReference );_cda {_fbe =_fada .Resolve ();_agcc .Set (_aaf ,_fbe );};if _aaf !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _gbd :=_cabb (_fbe ,_agaea );_gbd !=nil {return _gbd ;};};};return nil ;};if _ebec ,_cdf :=_fgg .(*_db .PdfObjectArray );
_cdf {if _ebec ==nil {return _fcb .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};for _bae ,_bcb :=range _ebec .Elements (){if _dgc ,_dgga :=_bcb .(*_db .PdfObjectReference );_dgga {_bcb =_dgc .Resolve ();_ebec .Set (_bae ,_bcb );
};if _gecg :=_cabb (_bcb ,_agaea );_gecg !=nil {return _gecg ;};};return nil ;};return nil ;};func _gfc (_cce []_db .PdfObject ,_fbaf map[_db .PdfObject ]_db .PdfObject ){if len (_fbaf )==0{return ;};for _egdb ,_cdaf :=range _cce {if _fbbd ,_dgbe :=_fbaf [_cdaf ];
_dgbe {_cce [_egdb ]=_fbbd ;continue ;};_fbaf [_cdaf ]=_cdaf ;switch _efb :=_cdaf .(type ){case *_db .PdfObjectArray :_cbga :=make ([]_db .PdfObject ,_efb .Len ());copy (_cbga ,_efb .Elements ());_gfc (_cbga ,_fbaf );for _ebda ,_bfge :=range _cbga {_efb .Set (_ebda ,_bfge );
};case *_db .PdfObjectStreams :_gfc (_efb .Elements (),_fbaf );case *_db .PdfObjectStream :_eddb :=[]_db .PdfObject {_efb .PdfObjectDictionary };_gfc (_eddb ,_fbaf );_efb .PdfObjectDictionary =_eddb [0].(*_db .PdfObjectDictionary );case *_db .PdfObjectDictionary :_bggg :=_efb .Keys ();
_geb :=make ([]_db .PdfObject ,len (_bggg ));for _ggfe ,_dffd :=range _bggg {_geb [_ggfe ]=_efb .Get (_dffd );};_gfc (_geb ,_fbaf );for _ggbe ,_acdd :=range _bggg {_efb .Set (_acdd ,_geb [_ggbe ]);};case *_db .PdfIndirectObject :_cbgg :=[]_db .PdfObject {_efb .PdfObject };
_gfc (_cbgg ,_fbaf );_efb .PdfObject =_cbgg [0];};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ecgb *CombineDuplicateStreams )Optimize (objects []_db .PdfObject )(_ace []_db .PdfObject ,_aaeda error ){_becg :=make (map[_db .PdfObject ]_db .PdfObject );_gdd :=make (map[_db .PdfObject ]struct{});_fdf :=make (map[string ][]*_db .PdfObjectStream );
for _ ,_gdfd :=range objects {if _eaff ,_bce :=_gdfd .(*_db .PdfObjectStream );_bce {_fbcd :=_a .New ();_fbcd .Write (_eaff .Stream );_fbcd .Write ([]byte (_eaff .PdfObjectDictionary .WriteString ()));_cffe :=string (_fbcd .Sum (nil ));_fdf [_cffe ]=append (_fdf [_cffe ],_eaff );
};};for _ ,_egg :=range _fdf {if len (_egg )< 2{continue ;};_cacf :=_egg [0];for _acd :=1;_acd < len (_egg );_acd ++{_fba :=_egg [_acd ];_becg [_fba ]=_cacf ;_gdd [_fba ]=struct{}{};};};_ace =make ([]_db .PdfObject ,0,len (objects )-len (_gdd ));for _ ,_cga :=range objects {if _ ,_cfd :=_gdd [_cga ];
_cfd {continue ;};_ace =append (_ace ,_cga );};_gfc (_ace ,_becg );return _ace ,nil ;};func _add (_eff []_db .PdfObject )(_aef map[*_db .PdfObjectStream ]struct{},_agg error ){_aef =map[*_db .PdfObjectStream ]struct{}{};_fad :=map[*_d .PdfFont ]struct{}{};
_ecd :=_aece (_eff );for _ ,_ff :=range _ecd ._fccbc {_ffb ,_baf :=_db .GetDict (_ff .PdfObject );if !_baf {continue ;};_faf ,_baf :=_db .GetDict (_ffb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_baf {continue ;};_cca ,_ :=_aad (_ffb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_gba ,_agae :=_d .NewPdfPageResourcesFromDict (_faf );if _agae !=nil {return nil ,_agae ;};_ggc :=[]content {{_bdac :_cca ,_fea :_gba }};_eeg :=_eabd (_ffb .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _eeg !=nil {_ggc =append (_ggc ,_eeg ...);};for _ ,_fdd :=range _ggc {_bgd ,_fbc :=_e .NewFromContents (_fdd ._bdac ,_fdd ._fea );
if _fbc !=nil {return nil ,_fbc ;};_bcf ,_ ,_ ,_fbc :=_bgd .ExtractPageText ();if _fbc !=nil {return nil ,_fbc ;};for _ ,_ede :=range _bcf .Marks ().Elements (){if _ede .Font ==nil {continue ;};if _ ,_ce :=_fad [_ede .Font ];!_ce {_fad [_ede .Font ]=struct{}{};
};};};};_agc :=map[*_db .PdfObjectStream ][]*_d .PdfFont {};for _cea :=range _fad {_aefd :=_cea .FontDescriptor ();if _aefd ==nil ||_aefd .FontFile2 ==nil {continue ;};_fde ,_ebe :=_db .GetStream (_aefd .FontFile2 );if !_ebe {continue ;};_agc [_fde ]=append (_agc [_fde ],_cea );
};for _cdg :=range _agc {var _fge []rune ;var _agb []_fb .GlyphIndex ;for _ ,_ca :=range _agc [_cdg ]{switch _fcf :=_ca .Encoder ().(type ){case *_g .IdentityEncoder :_afd :=_fcf .RegisteredRunes ();_fgd :=make ([]_fb .GlyphIndex ,len (_afd ));for _aaef ,_efff :=range _afd {_fgd [_aaef ]=_fb .GlyphIndex (_efff );
};_agb =append (_agb ,_fgd ...);case *_g .TrueTypeFontEncoder :_bfc :=_fcf .RegisteredRunes ();_fge =append (_fge ,_bfc ...);case _g .SimpleEncoder :_gcf :=_fcf .Charcodes ();for _ ,_fadg :=range _gcf {_fga ,_gfge :=_fcf .CharcodeToRune (_fadg );if !_gfge {_fc .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_fadg );
continue ;};_fge =append (_fge ,_fga );};};};_agg =_fae (_cdg ,_fge ,_agb );if _agg !=nil {_fc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_agg );
return nil ,_agg ;};_aef [_cdg ]=struct{}{};};return _aef ,nil ;};

// Optimize implements Optimizer interface.
func (_deb *CleanUnusedResources )Optimize (objects []_db .PdfObject )(_cgb []_db .PdfObject ,_cfg error ){_gae ,_cfg :=_ced (objects );if _cfg !=nil {return nil ,_cfg ;};_dff :=[]_db .PdfObject {};for _ ,_dgg :=range objects {_ ,_bb :=_gae [_dgg ];if _bb {continue ;
};_dff =append (_dff ,_dgg );};return _dff ,nil ;};func _aad (_cfee _db .PdfObject )(_efffb string ,_dbg []_db .PdfObject ){var _cdag _ccg .Buffer ;switch _gcbe :=_cfee .(type ){case *_db .PdfIndirectObject :_dbg =append (_dbg ,_gcbe );_cfee =_gcbe .PdfObject ;
};switch _dfcdc :=_cfee .(type ){case *_db .PdfObjectStream :if _ead ,_dbad :=_db .DecodeStream (_dfcdc );_dbad ==nil {_cdag .Write (_ead );_dbg =append (_dbg ,_dfcdc );};case *_db .PdfObjectArray :for _ ,_dag :=range _dfcdc .Elements (){switch _fgebe :=_dag .(type ){case *_db .PdfObjectStream :if _bgc ,_bag :=_db .DecodeStream (_fgebe );
_bag ==nil {_cdag .Write (_bgc );_dbg =append (_dbg ,_fgebe );};};};};return _cdag .String (),_dbg ;};