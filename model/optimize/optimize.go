//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_adc "bytes";_f "crypto/md5";_bg "errors";_ga "github.com/unidoc/unipdf/v3/common";_gg "github.com/unidoc/unipdf/v3/contentstream";_gb "github.com/unidoc/unipdf/v3/core";_ad "github.com/unidoc/unipdf/v3/extractor";_a "github.com/unidoc/unipdf/v3/internal/imageutil";
_bed "github.com/unidoc/unipdf/v3/internal/textencoding";_c "github.com/unidoc/unipdf/v3/model";_e "github.com/unidoc/unitype";_b "golang.org/x/image/draw";_be "math";);

// Append appends optimizers to the chain.
func (_ea *Chain )Append (optimizers ..._c .Optimizer ){_ea ._d =append (_ea ._d ,optimizers ...)};func _cgb (_ddf []_gb .PdfObject )[]*imageInfo {_dae :=_gb .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_gec :=make (map[*_gb .PdfObjectStream ]struct{});
var _ecc []*imageInfo ;for _ ,_bggg :=range _ddf {_gfc ,_acdeg :=_gb .GetStream (_bggg );if !_acdeg {continue ;};if _ ,_febg :=_gec [_gfc ];_febg {continue ;};_gec [_gfc ]=struct{}{};_gfg :=_gfc .PdfObjectDictionary .Get (_dae );_ggc ,_acdeg :=_gb .GetName (_gfg );
if !_acdeg ||string (*_ggc )!="\u0049\u006d\u0061g\u0065"{continue ;};_fef :=&imageInfo {Stream :_gfc ,BitsPerComponent :8};if _eacf ,_gdfac :=_gb .GetIntVal (_gfc .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));
_gdfac {_fef .BitsPerComponent =_eacf ;};if _febf ,_fbab :=_gb .GetIntVal (_gfc .Get ("\u0057\u0069\u0064t\u0068"));_fbab {_fef .Width =_febf ;};if _cegf ,_ebff :=_gb .GetIntVal (_gfc .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_ebff {_fef .Height =_cegf ;
};_bbb ,_fcd :=_c .NewPdfColorspaceFromPdfObject (_gfc .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _fcd !=nil {_ga .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fcd );continue ;};if _bbb ==nil {_ece ,_ccc :=_gb .GetName (_gfc .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));
if _ccc {switch _ece .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_bbb =_c .NewPdfColorspaceDeviceGray ();_fef .BitsPerComponent =1;};};
};switch _caba :=_bbb .(type ){case *_c .PdfColorspaceDeviceRGB :_fef .ColorComponents =3;case *_c .PdfColorspaceDeviceGray :_fef .ColorComponents =1;default:_ga .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_caba );
continue ;};_ecc =append (_ecc ,_fef );};return _ecc ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ddgc *CombineDuplicateDirectObjects )Optimize (objects []_gb .PdfObject )(_fgab []_gb .PdfObject ,_acg error ){_gaac (objects );_efcb :=make (map[string ][]*_gb .PdfObjectDictionary );var _geed func (_gaeb *_gb .PdfObjectDictionary );_geed =func (_dgg *_gb .PdfObjectDictionary ){for _ ,_fcf :=range _dgg .Keys (){_ggb :=_dgg .Get (_fcf );
if _ffeg ,_daa :=_ggb .(*_gb .PdfObjectDictionary );_daa {_bae :=_f .New ();_bae .Write ([]byte (_ffeg .WriteString ()));_caf :=string (_bae .Sum (nil ));_efcb [_caf ]=append (_efcb [_caf ],_ffeg );_geed (_ffeg );};};};for _ ,_ege :=range objects {_gdc ,_bbe :=_ege .(*_gb .PdfIndirectObject );
if !_bbe {continue ;};if _ace ,_bgfd :=_gdc .PdfObject .(*_gb .PdfObjectDictionary );_bgfd {_geed (_ace );};};_gaf :=make ([]_gb .PdfObject ,0,len (_efcb ));_cab :=make (map[_gb .PdfObject ]_gb .PdfObject );for _ ,_ddae :=range _efcb {if len (_ddae )< 2{continue ;
};_edbf :=_gb .MakeDict ();_edbf .Merge (_ddae [0]);_gfd :=_gb .MakeIndirectObject (_edbf );_gaf =append (_gaf ,_gfd );for _dbba :=0;_dbba < len (_ddae );_dbba ++{_faff :=_ddae [_dbba ];_cab [_faff ]=_gfd ;};};_fgab =make ([]_gb .PdfObject ,len (objects ));
copy (_fgab ,objects );_fgab =append (_gaf ,_fgab ...);_gfgc (_fgab ,_cab );return _fgab ,nil ;};func _gcdb (_cdb *_c .XObjectImage ,_efaf imageModifications )error {_gfac ,_ecdgf :=_cdb .ToImage ();if _ecdgf !=nil {return _ecdgf ;};if _efaf .Scale !=0{_gfac ,_ecdgf =_fec (_gfac ,_efaf .Scale );
if _ecdgf !=nil {return _ecdgf ;};};if _efaf .Encoding !=nil {_cdb .Filter =_efaf .Encoding ;};_cdb .Decode =nil ;switch _dcg :=_cdb .Filter .(type ){case *_gb .FlateEncoder :if _dcg .Predictor !=1&&_dcg .Predictor !=11{_dcg .Predictor =1;};};if _ecdgf =_cdb .SetImage (_gfac ,nil );
_ecdgf !=nil {_ga .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_ecdgf );return _ecdgf ;};_cdb .ToPdfObject ();return nil ;};func _efa (_gf *_gb .PdfObjectStream ,_dfbb []rune ,_ecb []_e .GlyphIndex )error {_gf ,_ccd :=_gb .GetStream (_gf );
if !_ccd {_ga .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _bg .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_dbb ,_bab :=_gb .DecodeStream (_gf );if _bab !=nil {_ga .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_bab );
return _bab ;};_gcc ,_bab :=_e .Parse (_adc .NewReader (_dbb ));if _bab !=nil {_ga .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_gf .Stream ));
return _bab ;};_fcg :=_ecb ;if len (_dfbb )> 0{_gaab :=_gcc .LookupRunes (_dfbb );_fcg =append (_fcg ,_gaab ...);};_gcc ,_bab =_gcc .SubsetKeepIndices (_fcg );if _bab !=nil {_ga .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_bab );
return _bab ;};var _afd _adc .Buffer ;_bab =_gcc .Write (&_afd );if _bab !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_bab );return _bab ;};if _afd .Len ()> len (_dbb ){_ga .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_feb ,_bab :=_gb .MakeStream (_afd .Bytes (),_gb .NewFlateEncoder ());if _bab !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_bab );return _bab ;
};*_gf =*_feb ;_gf .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_gb .MakeInteger (int64 (_afd .Len ())));return nil ;};func _gad (_acba []_gb .PdfObject )objectStructure {_gddg :=objectStructure {};_gfba :=false ;for _ ,_fgfd :=range _acba {switch _dcad :=_fgfd .(type ){case *_gb .PdfIndirectObject :_bafb ,_ecea :=_gb .GetDict (_dcad );
if !_ecea {continue ;};_gebe ,_ecea :=_gb .GetName (_bafb .Get ("\u0054\u0079\u0070\u0065"));if !_ecea {continue ;};switch _gebe .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_gddg ._ffea =_bafb ;_gfba =true ;};};if _gfba {break ;};};if !_gfba {return _gddg ;
};_fff ,_bgeb :=_gb .GetDict (_gddg ._ffea .Get ("\u0050\u0061\u0067e\u0073"));if !_bgeb {return _gddg ;};_gddg ._abae =_fff ;_ccbd ,_bgeb :=_gb .GetArray (_fff .Get ("\u004b\u0069\u0064\u0073"));if !_bgeb {return _gddg ;};for _ ,_gcb :=range _ccbd .Elements (){_age ,_daf :=_gb .GetIndirect (_gcb );
if !_daf {break ;};_gddg ._eag =append (_gddg ._eag ,_age );};return _gddg ;};type imageModifications struct{Scale float64 ;Encoding _gb .StreamEncoder ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};func _dddad (_fbf _gb .PdfObject )(_aed string ,_ebgd []_gb .PdfObject ){var _dgccb _adc .Buffer ;switch _acag :=_fbf .(type ){case *_gb .PdfIndirectObject :_ebgd =append (_ebgd ,_acag );_fbf =_acag .PdfObject ;};switch _dggf :=_fbf .(type ){case *_gb .PdfObjectStream :if _dabb ,_egd :=_gb .DecodeStream (_dggf );
_egd ==nil {_dgccb .Write (_dabb );_ebgd =append (_ebgd ,_dggf );};case *_gb .PdfObjectArray :for _ ,_gfcd :=range _dggf .Elements (){switch _bfb :=_gfcd .(type ){case *_gb .PdfObjectStream :if _ada ,_agb :=_gb .DecodeStream (_bfb );_agb ==nil {_dgccb .Write (_ada );
_ebgd =append (_ebgd ,_bfb );};};};};return _dgccb .String (),_ebgd ;};func _eb (_gabc *_gg .ContentStreamOperations )*_gg .ContentStreamOperations {if _gabc ==nil {return nil ;};_gaa :=_gg .ContentStreamOperations {};for _ ,_ce :=range *_gabc {switch _ce .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_ce .Params )==6{if _gac ,_aff :=_gb .GetNumbersAsFloat (_ce .Params );_aff ==nil {if _gac [0]==1&&_gac [1]==0&&_gac [2]==0&&_gac [3]==1{_ce =&_gg .ContentStreamOperation {Params :[]_gb .PdfObject {_ce .Params [4],_ce .Params [5]},Operand :"\u0054\u0064"};
};};};};_gaa =append (_gaa ,_ce );};return &_gaa ;};func _bgg (_ca []_gb .PdfObject )(_beg map[*_gb .PdfObjectStream ]struct{},_bd error ){_beg =map[*_gb .PdfObjectStream ]struct{}{};_aef :=map[*_c .PdfFont ]struct{}{};_abg :=_gad (_ca );for _ ,_gce :=range _abg ._eag {_afa ,_gabe :=_gb .GetDict (_gce .PdfObject );
if !_gabe {continue ;};_ebf ,_gabe :=_gb .GetDict (_afa .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_gabe {continue ;};_bgf ,_ :=_dddad (_afa .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_afac ,_cd :=_c .NewPdfPageResourcesFromDict (_ebf );
if _cd !=nil {return nil ,_cd ;};_fed :=[]content {{_ccde :_bgf ,_edg :_afac }};_aee :=_aec (_afa .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _aee !=nil {_fed =append (_fed ,_aee ...);};for _ ,_ecdd :=range _fed {_fga ,_ecdg :=_ad .NewFromContents (_ecdd ._ccde ,_ecdd ._edg );
if _ecdg !=nil {return nil ,_ecdg ;};_dfb ,_ ,_ ,_ecdg :=_fga .ExtractPageText ();if _ecdg !=nil {return nil ,_ecdg ;};for _ ,_ccg :=range _dfb .Marks ().Elements (){if _ccg .Font ==nil {continue ;};if _ ,_dbc :=_aef [_ccg .Font ];!_dbc {_aef [_ccg .Font ]=struct{}{};
};};};};_bb :=map[*_gb .PdfObjectStream ][]*_c .PdfFont {};for _cad :=range _aef {_afag :=_cad .FontDescriptor ();if _afag ==nil ||_afag .FontFile2 ==nil {continue ;};_gdgc ,_ac :=_gb .GetStream (_afag .FontFile2 );if !_ac {continue ;};_bb [_gdgc ]=append (_bb [_gdgc ],_cad );
};for _ebg :=range _bb {var _gae []rune ;var _edd []_e .GlyphIndex ;for _ ,_ba :=range _bb [_ebg ]{switch _ffe :=_ba .Encoder ().(type ){case *_bed .IdentityEncoder :_acb :=_ffe .RegisteredRunes ();_gcdg :=make ([]_e .GlyphIndex ,len (_acb ));for _fa ,_cec :=range _acb {_gcdg [_fa ]=_e .GlyphIndex (_cec );
};_edd =append (_edd ,_gcdg ...);case *_bed .TrueTypeFontEncoder :_dcc :=_ffe .RegisteredRunes ();_gae =append (_gae ,_dcc ...);case _bed .SimpleEncoder :_afc :=_ffe .Charcodes ();for _ ,_gdf :=range _afc {_aae ,_fd :=_ffe .CharcodeToRune (_gdf );if !_fd {_ga .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_gdf );
continue ;};_gae =append (_gae ,_aae );};};};_bd =_efa (_ebg ,_gae ,_edd );if _bd !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_bd );
return nil ,_bd ;};_beg [_ebg ]=struct{}{};};return _beg ,nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_d []_c .Optimizer };func _fec (_egcd *_c .Image ,_gda float64 )(*_c .Image ,error ){_gddb ,_bce :=_egcd .ToGoImage ();if _bce !=nil {return nil ,_bce ;};var _efbg _a .Image ;_aba ,_afe :=_gddb .(*_a .Monochrome );if _afe {if _bce =_aba .ResolveDecode ();
_bce !=nil {return nil ,_bce ;};_efbg ,_bce =_aba .Scale (_gda );if _bce !=nil {return nil ,_bce ;};}else {_gaef :=int (_be .RoundToEven (float64 (_egcd .Width )*_gda ));_dccab :=int (_be .RoundToEven (float64 (_egcd .Height )*_gda ));_efbg ,_bce =_a .NewImage (_gaef ,_dccab ,int (_egcd .BitsPerComponent ),_egcd .ColorComponents ,nil ,nil ,nil );
if _bce !=nil {return nil ,_bce ;};_b .CatmullRom .Scale (_efbg ,_efbg .Bounds (),_gddb ,_gddb .Bounds (),_b .Over ,&_b .Options {});};_dde :=_efbg .Base ();_baa :=&_c .Image {Width :int64 (_dde .Width ),Height :int64 (_dde .Height ),BitsPerComponent :int64 (_dde .BitsPerComponent ),ColorComponents :_dde .ColorComponents ,Data :_dde .Data };
_baa .SetDecode (_dde .Decode );_baa .SetAlpha (_dde .Alpha );return _baa ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_acef *ObjectStreams )Optimize (objects []_gb .PdfObject )(_geee []_gb .PdfObject ,_bdb error ){_cfa :=&_gb .PdfObjectStreams {};_acgc :=make ([]_gb .PdfObject ,0,len (objects ));for _ ,_eef :=range objects {if _dba ,_daba :=_eef .(*_gb .PdfIndirectObject );
_daba &&_dba .GenerationNumber ==0{_cfa .Append (_eef );}else {_acgc =append (_acgc ,_eef );};};if _cfa .Len ()==0{return _acgc ,nil ;};_geee =make ([]_gb .PdfObject ,0,len (_acgc )+_cfa .Len ()+1);if _cfa .Len ()> 1{_geee =append (_geee ,_cfa );};_geee =append (_geee ,_cfa .Elements ()...);
_geee =append (_geee ,_acgc ...);return _geee ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _gaac (_abe []_gb .PdfObject ){for _cadd ,_aaaf :=range _abe {switch _bacg :=_aaaf .(type ){case *_gb .PdfIndirectObject :_bacg .ObjectNumber =int64 (_cadd +1);_bacg .GenerationNumber =0;case *_gb .PdfObjectStream :_bacg .ObjectNumber =int64 (_cadd +1);
_bacg .GenerationNumber =0;case *_gb .PdfObjectStreams :_bacg .ObjectNumber =int64 (_cadd +1);_bacg .GenerationNumber =0;};};};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bge *CombineDuplicateStreams )Optimize (objects []_gb .PdfObject )(_efaa []_gb .PdfObject ,_deb error ){_gdgd :=make (map[_gb .PdfObject ]_gb .PdfObject );_efaaf :=make (map[_gb .PdfObject ]struct{});_fee :=make (map[string ][]*_gb .PdfObjectStream );
for _ ,_abfc :=range objects {if _cb ,_efb :=_abfc .(*_gb .PdfObjectStream );_efb {_gca :=_f .New ();_gca .Write (_cb .Stream );_gca .Write ([]byte (_cb .PdfObjectDictionary .WriteString ()));_eba :=string (_gca .Sum (nil ));_fee [_eba ]=append (_fee [_eba ],_cb );
};};for _ ,_cea :=range _fee {if len (_cea )< 2{continue ;};_acde :=_cea [0];for _dgcd :=1;_dgcd < len (_cea );_dgcd ++{_ag :=_cea [_dgcd ];_gdgd [_ag ]=_acde ;_efaaf [_ag ]=struct{}{};};};_efaa =make ([]_gb .PdfObject ,0,len (objects )-len (_efaaf ));
for _ ,_dcca :=range objects {if _ ,_fgf :=_efaaf [_dcca ];_fgf {continue ;};_efaa =append (_efaa ,_dcca );};_gfgc (_efaa ,_gdgd );return _efaa ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};type content struct{_ccde string ;_edg *_c .PdfPageResources ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dca *CombineIdenticalIndirectObjects )Optimize (objects []_gb .PdfObject )(_bgc []_gb .PdfObject ,_dff error ){_gaac (objects );_fdg :=make (map[_gb .PdfObject ]_gb .PdfObject );_ecdf :=make (map[_gb .PdfObject ]struct{});_ecde :=make (map[string ][]*_gb .PdfIndirectObject );
for _ ,_bac :=range objects {_dcb ,_geec :=_bac .(*_gb .PdfIndirectObject );if !_geec {continue ;};if _fba ,_gba :=_dcb .PdfObject .(*_gb .PdfObjectDictionary );_gba {if _ggg ,_bfg :=_fba .Get ("\u0054\u0079\u0070\u0065").(*_gb .PdfObjectName );_bfg &&*_ggg =="\u0050\u0061\u0067\u0065"{continue ;
};_cfc :=_f .New ();_cfc .Write ([]byte (_fba .WriteString ()));_aeb :=string (_cfc .Sum (nil ));_ecde [_aeb ]=append (_ecde [_aeb ],_dcb );};};for _ ,_geb :=range _ecde {if len (_geb )< 2{continue ;};_cfb :=_geb [0];for _ggd :=1;_ggd < len (_geb );_ggd ++{_aaa :=_geb [_ggd ];
_fdg [_aaa ]=_cfb ;_ecdf [_aaa ]=struct{}{};};};_bgc =make ([]_gb .PdfObject ,0,len (objects )-len (_ecdf ));for _ ,_aca :=range objects {if _ ,_gegg :=_ecdf [_aca ];_gegg {continue ;};_bgc =append (_bgc ,_aca );};_gfgc (_bgc ,_fdg );return _bgc ,nil ;
};func _aec (_eac _gb .PdfObject )[]content {if _eac ==nil {return nil ;};_acd ,_face :=_gb .GetArray (_eac );if !_face {_ga .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;
};var _dcf []content ;for _ ,_efc :=range _acd .Elements (){_bf ,_egc :=_gb .GetDict (_efc );if !_egc {_ga .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_efca ,_egc :=_gb .GetDict (_bf .Get ("\u0041\u0050"));if !_egc {_ga .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_ccge :=_gb .TraceToDirectObject (_efca .Get ("\u004e"));
if _ccge ==nil {_ga .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _gbe *_gb .PdfObjectStream ;switch _eaa :=_ccge .(type ){case *_gb .PdfObjectDictionary :_cdf ,_eca :=_gb .GetName (_bf .Get ("\u0041\u0053"));
if !_eca {_ga .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_gbe ,_eca =_gb .GetStream (_eaa .Get (*_cdf ));if !_eca {_ga .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_gb .PdfObjectStream :_gbe =_eaa ;};if _gbe ==nil {_ga .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_bcfe ,_ebec :=_c .NewXObjectFormFromStream (_gbe );if _ebec !=nil {_ga .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ebec );
continue ;};_aagd ,_ebec :=_bcfe .GetContentStream ();if _ebec !=nil {_ga .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_ebec );continue ;};_dcf =append (_dcf ,content {_ccde :string (_aagd ),_edg :_bcfe .Resources });
};return _dcf ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_dcfg :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_dcfg .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_dcfg .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_bccc :=new (ImagePPI );
_bccc .ImageUpperPPI =options .ImageUpperPPI ;_dcfg .Append (_bccc );};if options .ImageQuality > 0{_eec :=new (Image );_eec .ImageQuality =options .ImageQuality ;_dcfg .Append (_eec );};if options .CombineDuplicateDirectObjects {_dcfg .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_dcfg .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_dcfg .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_dcfg .Append (new (ObjectStreams ));
};if options .CompressStreams {_dcfg .Append (new (CompressStreams ));};return _dcfg ;};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_gb .PdfObjectStream ;PPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eab *Chain )Optimize (objects []_gb .PdfObject )(_dc []_gb .PdfObject ,_aa error ){_af :=objects ;for _ ,_gab :=range _eab ._d {_ef ,_cg :=_gab .Optimize (_af );if _cg !=nil {_ga .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_cg );
continue ;};_af =_ef ;};return _af ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dd *CleanContentstream )Optimize (objects []_gb .PdfObject )(_gee []_gb .PdfObject ,_ed error ){_ec :=map[*_gb .PdfObjectStream ]struct{}{};var _fg []*_gb .PdfObjectStream ;_geg :=func (_bcdb *_gb .PdfObjectStream ){if _ ,_fge :=_ec [_bcdb ];!_fge {_ec [_bcdb ]=struct{}{};
_fg =append (_fg ,_bcdb );};};_fb :=map[_gb .PdfObject ]bool {};_ee :=map[_gb .PdfObject ]bool {};for _ ,_cc :=range objects {switch _df :=_cc .(type ){case *_gb .PdfIndirectObject :switch _ebd :=_df .PdfObject .(type ){case *_gb .PdfObjectDictionary :if _gdg ,_fc :=_gb .GetName (_ebd .Get ("\u0054\u0079\u0070\u0065"));
!_fc ||_gdg .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _ggf ,_eg :=_gb .GetStream (_ebd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_eg {_geg (_ggf );}else if _dcd ,_ecd :=_gb .GetArray (_ebd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_ecd {var _de []*_gb .PdfObjectStream ;for _ ,_dg :=range _dcd .Elements (){if _da ,_ccb :=_gb .GetStream (_dg );_ccb {_de =append (_de ,_da );};};if len (_de )> 0{var _fgc _adc .Buffer ;for _ ,_dbg :=range _de {if _dfc ,_bcc :=_gb .DecodeStream (_dbg );
_bcc ==nil {_fgc .Write (_dfc );};_fb [_dbg ]=true ;};_gcf ,_dgc :=_gb .MakeStream (_fgc .Bytes (),_gb .NewFlateEncoder ());if _dgc !=nil {return nil ,_dgc ;};_ee [_gcf ]=true ;_ebd .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_gcf );_geg (_gcf );
};};};case *_gb .PdfObjectStream :if _gcd ,_ab :=_gb .GetName (_df .Get ("\u0054\u0079\u0070\u0065"));!_ab ||_gcd .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _cf ,_dbd :=_gb .GetName (_df .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_dbd ||_cf .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_geg (_df );};};for _ ,_dcec :=range _fg {_ed =_gd (_dcec );if _ed !=nil {return nil ,_ed ;};};_gee =nil ;for _ ,_gde :=range objects {if _fb [_gde ]{continue ;};_gee =append (_gee ,_gde );
};for _dgcc :=range _ee {_gee =append (_gee ,_dgcc );};return _gee ,nil ;};func _gfgc (_gfgg []_gb .PdfObject ,_cgbd map[_gb .PdfObject ]_gb .PdfObject ){if len (_cgbd )==0{return ;};for _ded ,_gbeb :=range _gfgg {if _bfa ,_def :=_cgbd [_gbeb ];_def {_gfgg [_ded ]=_bfa ;
continue ;};_cgbd [_gbeb ]=_gbeb ;switch _afga :=_gbeb .(type ){case *_gb .PdfObjectArray :_badc :=make ([]_gb .PdfObject ,_afga .Len ());copy (_badc ,_afga .Elements ());_gfgc (_badc ,_cgbd );for _badb ,_bdac :=range _badc {_afga .Set (_badb ,_bdac );
};case *_gb .PdfObjectStreams :_gfgc (_afga .Elements (),_cgbd );case *_gb .PdfObjectStream :_gaag :=[]_gb .PdfObject {_afga .PdfObjectDictionary };_gfgc (_gaag ,_cgbd );_afga .PdfObjectDictionary =_gaag [0].(*_gb .PdfObjectDictionary );case *_gb .PdfObjectDictionary :_ccbb :=_afga .Keys ();
_dee :=make ([]_gb .PdfObject ,len (_ccbb ));for _ebee ,_abcc :=range _ccbb {_dee [_ebee ]=_afga .Get (_abcc );};_gfgc (_dee ,_cgbd );for _cfe ,_cbca :=range _ccbb {_afga .Set (_cbca ,_dee [_cfe ]);};case *_gb .PdfIndirectObject :_fafc :=[]_gb .PdfObject {_afga .PdfObject };
_gfgc (_fafc ,_cgbd );_afga .PdfObject =_fafc [0];};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ebe *CleanFonts )Optimize (objects []_gb .PdfObject )(_bea []_gb .PdfObject ,_bde error ){var _cecf map[*_gb .PdfObjectStream ]struct{};if _ebe .Subset {var _eff error ;_cecf ,_eff =_bgg (objects );if _eff !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_eff );
return nil ,_eff ;};};for _ ,_bbd :=range objects {_fgb ,_dda :=_gb .GetStream (_bbd );if !_dda {continue ;};if _ ,_ggec :=_cecf [_fgb ];_ggec {continue ;};_fac ,_febd :=_gb .NewEncoderFromStream (_fgb );if _febd !=nil {_ga .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_febd );
continue ;};_dab ,_febd :=_fac .DecodeStream (_fgb );if _febd !=nil {_ga .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_febd );
continue ;};if len (_dab )< 4{continue ;};_beb :=string (_dab [:4]);if _beb =="\u004f\u0054\u0054\u004f"{continue ;};if _beb !="\u0000\u0001\u0000\u0000"&&_beb !="\u0074\u0072\u0075\u0065"{continue ;};_abf ,_febd :=_e .Parse (_adc .NewReader (_dab ));if _febd !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_febd );
continue ;};_febd =_abf .Optimize ();if _febd !=nil {_ga .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_febd );continue ;
};var _faf _adc .Buffer ;_febd =_abf .Write (&_faf );if _febd !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_febd );
continue ;};if _faf .Len ()> len (_dab ){_ga .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_aag ,_febd :=_gb .MakeStream (_faf .Bytes (),_gb .NewFlateEncoder ());if _febd !=nil {continue ;};*_fgb =*_aag ;_fgb .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_gb .MakeInteger (int64 (_faf .Len ())));};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fad *CompressStreams )Optimize (objects []_gb .PdfObject )(_afg []_gb .PdfObject ,_gcg error ){_afg =make ([]_gb .PdfObject ,len (objects ));copy (_afg ,objects );for _ ,_gfb :=range objects {_fde ,_gbaf :=_gb .GetStream (_gfb );if !_gbaf {continue ;
};if _ddd :=_fde .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_ddd !=nil {if _ ,_dfa :=_gb .GetName (_ddd );_dfa {continue ;};if _ebed ,_dfff :=_gb .GetArray (_ddd );_dfff &&_ebed .Len ()> 0{continue ;};};_gcgd :=_gb .NewFlateEncoder ();var _bgb []byte ;
_bgb ,_gcg =_gcgd .EncodeBytes (_fde .Stream );if _gcg !=nil {return _afg ,_gcg ;};_gff :=_gcgd .MakeStreamDict ();if len (_bgb )+len (_gff .WriteString ())< len (_fde .Stream ){_fde .Stream =_bgb ;_fde .PdfObjectDictionary .Merge (_gff );_fde .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_gb .MakeInteger (int64 (len (_fde .Stream ))));
};};return _afg ,nil ;};type objectStructure struct{_ffea *_gb .PdfObjectDictionary ;_abae *_gb .PdfObjectDictionary ;_eag []*_gb .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gaff *Image )Optimize (objects []_gb .PdfObject )(_bba []_gb .PdfObject ,_fgag error ){if _gaff .ImageQuality <=0{return objects ,nil ;};_beca :=_cgb (objects );if len (_beca )==0{return objects ,nil ;};_ddda :=make (map[_gb .PdfObject ]_gb .PdfObject );
_baec :=make (map[_gb .PdfObject ]struct{});for _ ,_gdd :=range _beca {_gfa :=_gdd .Stream .Get ("\u0053\u004d\u0061s\u006b");_baec [_gfa ]=struct{}{};};for _caff ,_faa :=range _beca {_ccdd :=_faa .Stream ;if _ ,_dac :=_baec [_ccdd ];_dac {continue ;};
_dffa ,_gabb :=_c .NewXObjectImageFromStream (_ccdd );if _gabb !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gabb );continue ;};switch _dffa .Filter .(type ){case *_gb .JBIG2Encoder :continue ;case *_gb .CCITTFaxEncoder :continue ;
};_fgcd ,_gabb :=_dffa .ToImage ();if _gabb !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gabb );continue ;};_bdf :=_gb .NewDCTEncoder ();_bdf .ColorComponents =_fgcd .ColorComponents ;_bdf .Quality =_gaff .ImageQuality ;
_bdf .BitsPerComponent =_faa .BitsPerComponent ;_bdf .Width =_faa .Width ;_bdf .Height =_faa .Height ;_fbd ,_gabb :=_bdf .EncodeBytes (_fgcd .Data );if _gabb !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gabb );
continue ;};var _cefb _gb .StreamEncoder ;_cefb =_bdf ;{_feee :=_gb .NewFlateEncoder ();_ffa :=_gb .NewMultiEncoder ();_ffa .AddEncoder (_feee );_ffa .AddEncoder (_bdf );_dabf ,_cbc :=_ffa .EncodeBytes (_fgcd .Data );if _cbc !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cbc );
continue ;};if len (_dabf )< len (_fbd ){_ga .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_fbd ),len (_dabf ),len (_ccdd .Stream ));
_fbd =_dabf ;_cefb =_ffa ;};};_dgce :=len (_ccdd .Stream );if _dgce < len (_fbd ){continue ;};_gafc :=&_gb .PdfObjectStream {Stream :_fbd };_gafc .PdfObjectReference =_ccdd .PdfObjectReference ;_gafc .PdfObjectDictionary =_gb .MakeDict ();_gafc .Merge (_ccdd .PdfObjectDictionary );
_gafc .Merge (_cefb .MakeStreamDict ());_gafc .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_gb .MakeInteger (int64 (len (_fbd ))));_ddda [_ccdd ]=_gafc ;_beca [_caff ].Stream =_gafc ;};_bba =make ([]_gb .PdfObject ,len (objects ));copy (_bba ,objects );
_gfgc (_bba ,_ddda );return _bba ,nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};func _gd (_fe *_gb .PdfObjectStream )error {_dce ,_bc :=_gb .DecodeStream (_fe );if _bc !=nil {return _bc ;};_ff :=_gg .NewContentStreamParser (string (_dce ));_bcd ,_bc :=_ff .Parse ();if _bc !=nil {return _bc ;
};_bcd =_eb (_bcd );_gbd :=_bcd .Bytes ();if len (_gbd )>=len (_dce ){return nil ;};_gc ,_bc :=_gb .MakeStream (_bcd .Bytes (),_gb .NewFlateEncoder ());if _bc !=nil {return _bc ;};_fe .Stream =_gc .Stream ;_fe .Merge (_gc .PdfObjectDictionary );return nil ;
};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gfff *ImagePPI )Optimize (objects []_gb .PdfObject )(_abfb []_gb .PdfObject ,_gga error ){if _gfff .ImageUpperPPI <=0{return objects ,nil ;};_ffc :=_cgb (objects );if len (_ffc )==0{return objects ,nil ;};_fbaa :=make (map[_gb .PdfObject ]struct{});
for _ ,_ddeg :=range _ffc {_egca :=_ddeg .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_fbaa [_egca ]=struct{}{};};_eacfg :=make (map[*_gb .PdfObjectStream ]*imageInfo );for _ ,_edgf :=range _ffc {_eacfg [_edgf .Stream ]=_edgf ;};var _cgd *_gb .PdfObjectDictionary ;
for _ ,_bgcc :=range objects {if _gagb ,_fada :=_gb .GetDict (_bgcc );_cgd ==nil &&_fada {if _fgd ,_bda :=_gb .GetName (_gagb .Get ("\u0054\u0079\u0070\u0065"));_bda &&*_fgd =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_cgd =_gagb ;};};};if _cgd ==nil {return objects ,nil ;
};_cee ,_bfgf :=_gb .GetDict (_cgd .Get ("\u0050\u0061\u0067e\u0073"));if !_bfgf {return objects ,nil ;};_gef ,_efg :=_gb .GetArray (_cee .Get ("\u004b\u0069\u0064\u0073"));if !_efg {return objects ,nil ;};for _ ,_aac :=range _gef .Elements (){_cbcb :=make (map[string ]*imageInfo );
_gaabd ,_geba :=_gb .GetDict (_aac );if !_geba {continue ;};_fbgd ,_ :=_dddad (_gaabd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_fbgd )==0{continue ;};_cbd ,_cdfd :=_gb .GetDict (_gaabd .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_cdfd {continue ;};_cfg ,_bdc :=_c .NewPdfPageResourcesFromDict (_cbd );if _bdc !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_bdc );
continue ;};_dabc ,_acgb :=_gb .GetDict (_cbd .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_acgb {continue ;};_cbcbg :=_dabc .Keys ();for _ ,_dcab :=range _cbcbg {if _gced ,_cdg :=_gb .GetStream (_dabc .Get (_dcab ));_cdg {if _gea ,_fbc :=_eacfg [_gced ];
_fbc {_cbcb [string (_dcab )]=_gea ;};};};_bcb :=_gg .NewContentStreamParser (_fbgd );_eaad ,_bdc :=_bcb .Parse ();if _bdc !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bdc );continue ;};_dcga :=_gg .NewContentStreamProcessor (*_eaad );
_dcga .AddHandler (_gg .HandlerConditionEnumAllOperands ,"",func (_gfdg *_gg .ContentStreamOperation ,_eddd _gg .GraphicsState ,_bga *_c .PdfPageResources )error {switch _gfdg .Operand {case "\u0044\u006f":if len (_gfdg .Params )!=1{_ga .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_dbge ,_fcfc :=_gb .GetName (_gfdg .Params [0]);if !_fcfc {_ga .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _begg ,_dec :=_cbcb [string (*_dbge )];_dec {_abc :=_eddd .CTM .ScalingFactorX ();_dcaf :=_eddd .CTM .ScalingFactorY ();_afea ,_egg :=_abc /72.0,_dcaf /72.0;_cba ,_gafe :=float64 (_begg .Width )/_afea ,float64 (_begg .Height )/_egg ;if _afea ==0||_egg ==0{_cba =72.0;
_gafe =72.0;};_begg .PPI =_be .Max (_begg .PPI ,_cba );_begg .PPI =_be .Max (_begg .PPI ,_gafe );};};return nil ;});_bdc =_dcga .Process (_cfg );if _bdc !=nil {_ga .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_bdc );
continue ;};};for _ ,_egga :=range _ffc {if _ ,_efac :=_fbaa [_egga .Stream ];_efac {continue ;};if _egga .PPI <=_gfff .ImageUpperPPI {continue ;};_fgfb ,_ggfa :=_c .NewXObjectImageFromStream (_egga .Stream );if _ggfa !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ggfa );
continue ;};var _dcgab imageModifications ;_dcgab .Scale =_gfff .ImageUpperPPI /_egga .PPI ;if _egga .BitsPerComponent ==1&&_egga .ColorComponents ==1{_bee :=_be .Round (_egga .PPI /_gfff .ImageUpperPPI );_gcag :=_a .NextPowerOf2 (uint (_bee ));if _a .InDelta (float64 (_gcag ),1/_dcgab .Scale ,0.3){_dcgab .Scale =float64 (1)/float64 (_gcag );
};if _ ,_bbab :=_fgfb .Filter .(*_gb .JBIG2Encoder );!_bbab {_dcgab .Encoding =_gb .NewJBIG2Encoder ();};};if _ggfa =_gcdb (_fgfb ,_dcgab );_ggfa !=nil {_ga .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_ggfa );
continue ;};_dcgab .Encoding =nil ;if _gaec ,_geag :=_gb .GetStream (_egga .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_geag {_bad ,_ebae :=_c .NewXObjectImageFromStream (_gaec );if _ebae !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ebae );
continue ;};if _ebae =_gcdb (_bad ,_dcgab );_ebae !=nil {_ga .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ebae );continue ;};};};return objects ,nil ;};