//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_af "bytes";_fg "crypto/md5";_c "errors";_d "github.com/unidoc/unipdf/v3/common";_ff "github.com/unidoc/unipdf/v3/contentstream";_add "github.com/unidoc/unipdf/v3/core";_fe "github.com/unidoc/unipdf/v3/extractor";_fc "github.com/unidoc/unipdf/v3/internal/imageutil";
_ad "github.com/unidoc/unipdf/v3/internal/textencoding";_dc "github.com/unidoc/unipdf/v3/model";_df "github.com/unidoc/unitype";_f "golang.org/x/image/draw";_a "math";);type imageModifications struct{Scale float64 ;Encoding _add .StreamEncoder ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cad *CleanFonts )Optimize (objects []_add .PdfObject )(_eee []_add .PdfObject ,_eda error ){var _cff map[*_add .PdfObjectStream ]struct{};if _cad .Subset {var _fbbb error ;_cff ,_fbbb =_bdf (objects );if _fbbb !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_fbbb );
return nil ,_fbbb ;};};for _ ,_egc :=range objects {_ecaf ,_dg :=_add .GetStream (_egc );if !_dg {continue ;};if _ ,_cag :=_cff [_ecaf ];_cag {continue ;};_gfc ,_gcd :=_add .NewEncoderFromStream (_ecaf );if _gcd !=nil {_d .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_gcd );
continue ;};_cbe ,_gcd :=_gfc .DecodeStream (_ecaf );if _gcd !=nil {_d .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_gcd );
continue ;};if len (_cbe )< 4{continue ;};_gbe :=string (_cbe [:4]);if _gbe =="\u004f\u0054\u0054\u004f"{continue ;};if _gbe !="\u0000\u0001\u0000\u0000"&&_gbe !="\u0074\u0072\u0075\u0065"{continue ;};_gg ,_gcd :=_df .Parse (_af .NewReader (_cbe ));if _gcd !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_gcd );
continue ;};_gcd =_gg .Optimize ();if _gcd !=nil {_d .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_gcd );continue ;};var _dcc _af .Buffer ;
_gcd =_gg .Write (&_dcc );if _gcd !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_gcd );continue ;
};if _dcc .Len ()> len (_cbe ){_d .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_gdc ,_gcd :=_add .MakeStream (_dcc .Bytes (),_add .NewFlateEncoder ());if _gcd !=nil {continue ;};*_ecaf =*_gdc ;_ecaf .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_add .MakeInteger (int64 (_dcc .Len ())));};return objects ,nil ;};func _dfa (_fb *_add .PdfObjectStream )error {_fa ,_fce :=_add .DecodeStream (_fb );
if _fce !=nil {return _fce ;};_acdc :=_ff .NewContentStreamParser (string (_fa ));_aa ,_fce :=_acdc .Parse ();if _fce !=nil {return _fce ;};_aa =_ed (_aa );_bf :=_aa .Bytes ();if len (_bf )>=len (_fa ){return nil ;};_fee ,_fce :=_add .MakeStream (_aa .Bytes (),_add .NewFlateEncoder ());
if _fce !=nil {return _fce ;};_fb .Stream =_fee .Stream ;_fb .Merge (_fee .PdfObjectDictionary );return nil ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gee *CompressStreams )Optimize (objects []_add .PdfObject )(_baa []_add .PdfObject ,_beg error ){_baa =make ([]_add .PdfObject ,len (objects ));copy (_baa ,objects );for _ ,_fgae :=range objects {_ffb ,_fgc :=_add .GetStream (_fgae );if !_fgc {continue ;
};if _dfbe :=_ffb .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_dfbe !=nil {if _ ,_dba :=_add .GetName (_dfbe );_dba {continue ;};if _bdgc ,_bege :=_add .GetArray (_dfbe );_bege &&_bdgc .Len ()> 0{continue ;};};_dgeg :=_add .NewFlateEncoder ();var _ade []byte ;
_ade ,_beg =_dgeg .EncodeBytes (_ffb .Stream );if _beg !=nil {return _baa ,_beg ;};_bgfb :=_dgeg .MakeStreamDict ();if len (_ade )+len (_bgfb .WriteString ())< len (_ffb .Stream ){_ffb .Stream =_ade ;_ffb .PdfObjectDictionary .Merge (_bgfb );_ffb .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_add .MakeInteger (int64 (len (_ffb .Stream ))));
};};return _baa ,nil ;};func _gdde (_efe []_add .PdfObject )objectStructure {_geaf :=objectStructure {};_bed :=false ;for _ ,_cdg :=range _efe {switch _baadg :=_cdg .(type ){case *_add .PdfIndirectObject :_degg ,_gbcc :=_add .GetDict (_baadg );if !_gbcc {continue ;
};_efcc ,_gbcc :=_add .GetName (_degg .Get ("\u0054\u0079\u0070\u0065"));if !_gbcc {continue ;};switch _efcc .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_geaf ._cfeb =_degg ;_bed =true ;};};if _bed {break ;};};if !_bed {return _geaf ;};_ccdb ,_acf :=_add .GetDict (_geaf ._cfeb .Get ("\u0050\u0061\u0067e\u0073"));
if !_acf {return _geaf ;};_geaf ._efd =_ccdb ;_ebg ,_acf :=_add .GetArray (_ccdb .Get ("\u004b\u0069\u0064\u0073"));if !_acf {return _geaf ;};for _ ,_cada :=range _ebg .Elements (){_cffdg ,_afgf :=_add .GetIndirect (_cada );if !_afgf {break ;};_geaf ._ecd =append (_geaf ._ecd ,_cffdg );
};return _geaf ;};func _adg (_dgag *_dc .Image ,_fba float64 )(*_dc .Image ,error ){_baad ,_fadf :=_dgag .ToGoImage ();if _fadf !=nil {return nil ,_fadf ;};var _gec _fc .Image ;_fbe ,_dae :=_baad .(*_fc .Monochrome );if _dae {if _fadf =_fbe .ResolveDecode ();
_fadf !=nil {return nil ,_fadf ;};_gec ,_fadf =_fbe .Scale (_fba );if _fadf !=nil {return nil ,_fadf ;};}else {_gbb :=int (_a .RoundToEven (float64 (_dgag .Width )*_fba ));_cfc :=int (_a .RoundToEven (float64 (_dgag .Height )*_fba ));_gec ,_fadf =_fc .NewImage (_gbb ,_cfc ,int (_dgag .BitsPerComponent ),_dgag .ColorComponents ,nil ,nil ,nil );
if _fadf !=nil {return nil ,_fadf ;};_f .CatmullRom .Scale (_gec ,_gec .Bounds (),_baad ,_baad .Bounds (),_f .Over ,&_f .Options {});};_caff :=_gec .Base ();_fdf :=&_dc .Image {Width :int64 (_caff .Width ),Height :int64 (_caff .Height ),BitsPerComponent :int64 (_caff .BitsPerComponent ),ColorComponents :_caff .ColorComponents ,Data :_caff .Data };
_fdf .SetDecode (_caff .Decode );_fdf .SetAlpha (_caff .Alpha );return _fdf ,nil ;};func _ceb (_deec []_add .PdfObject )[]*imageInfo {_eaba :=_add .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_bdc :=make (map[*_add .PdfObjectStream ]struct{});
var _cab []*imageInfo ;for _ ,_abc :=range _deec {_efg ,_gdbd :=_add .GetStream (_abc );if !_gdbd {continue ;};if _ ,_dgfa :=_bdc [_efg ];_dgfa {continue ;};_bdc [_efg ]=struct{}{};_adec :=_efg .PdfObjectDictionary .Get (_eaba );_cce ,_gdbd :=_add .GetName (_adec );
if !_gdbd ||string (*_cce )!="\u0049\u006d\u0061g\u0065"{continue ;};_caf :=&imageInfo {Stream :_efg ,BitsPerComponent :8};if _cbdd ,_fac :=_add .GetIntVal (_efg .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));
_fac {_caf .BitsPerComponent =_cbdd ;};if _dadd ,_fad :=_add .GetIntVal (_efg .Get ("\u0057\u0069\u0064t\u0068"));_fad {_caf .Width =_dadd ;};if _cffd ,_egf :=_add .GetIntVal (_efg .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_egf {_caf .Height =_cffd ;
};_fbcb ,_ceg :=_dc .NewPdfColorspaceFromPdfObject (_efg .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _ceg !=nil {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_ceg );continue ;};if _fbcb ==nil {_bdef ,_fcge :=_add .GetName (_efg .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));
if _fcge {switch _bdef .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_fbcb =_dc .NewPdfColorspaceDeviceGray ();_caf .BitsPerComponent =1;
};};};switch _dec :=_fbcb .(type ){case *_dc .PdfColorspaceDeviceRGB :_caf .ColorComponents =3;case *_dc .PdfColorspaceDeviceGray :_caf .ColorComponents =1;default:_d .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_dec );
continue ;};_cab =append (_cab ,_caf );};return _cab ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dgf *CombineDuplicateStreams )Optimize (objects []_add .PdfObject )(_ace []_add .PdfObject ,_cgd error ){_fead :=make (map[_add .PdfObject ]_add .PdfObject );_aebd :=make (map[_add .PdfObject ]struct{});_cee :=make (map[string ][]*_add .PdfObjectStream );
for _ ,_gfb :=range objects {if _gag ,_cde :=_gfb .(*_add .PdfObjectStream );_cde {_dgac :=_fg .New ();_dgac .Write (_gag .Stream );_dgac .Write ([]byte (_gag .PdfObjectDictionary .WriteString ()));_ced :=string (_dgac .Sum (nil ));_cee [_ced ]=append (_cee [_ced ],_gag );
};};for _ ,_fafd :=range _cee {if len (_fafd )< 2{continue ;};_ccd :=_fafd [0];for _fab :=1;_fab < len (_fafd );_fab ++{_eaa :=_fafd [_fab ];_fead [_eaa ]=_ccd ;_aebd [_eaa ]=struct{}{};};};_ace =make ([]_add .PdfObject ,0,len (objects )-len (_aebd ));
for _ ,_be :=range objects {if _ ,_bdeg :=_aebd [_be ];_bdeg {continue ;};_ace =append (_ace ,_be );};_bad (_ace ,_fead );return _ace ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_g *Chain )Optimize (objects []_add .PdfObject )(_da []_add .PdfObject ,_gd error ){_cb :=objects ;for _ ,_ba :=range _g ._fgd {_ec ,_cd :=_ba .Optimize (_cb );if _cd !=nil {_d .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_cd );
continue ;};_cb =_ec ;};return _cb ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_fgd []_dc .Optimizer };

// Optimize optimizes PDF objects to decrease PDF size.
func (_eca *CleanContentstream )Optimize (objects []_add .PdfObject )(_ee []_add .PdfObject ,_cg error ){_adb :=map[*_add .PdfObjectStream ]struct{}{};var _fd []*_add .PdfObjectStream ;_daf :=func (_eg *_add .PdfObjectStream ){if _ ,_bff :=_adb [_eg ];
!_bff {_adb [_eg ]=struct{}{};_fd =append (_fd ,_eg );};};_dce :=map[_add .PdfObject ]bool {};_faf :=map[_add .PdfObject ]bool {};for _ ,_feg :=range objects {switch _ea :=_feg .(type ){case *_add .PdfIndirectObject :switch _ga :=_ea .PdfObject .(type ){case *_add .PdfObjectDictionary :if _cdb ,_de :=_add .GetName (_ga .Get ("\u0054\u0079\u0070\u0065"));
!_de ||_cdb .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _ag ,_gdb :=_add .GetStream (_ga .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_gdb {_daf (_ag );}else if _afe ,_fca :=_add .GetArray (_ga .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_fca {var _aac []*_add .PdfObjectStream ;for _ ,_edf :=range _afe .Elements (){if _fcf ,_ege :=_add .GetStream (_edf );_ege {_aac =append (_aac ,_fcf );};};if len (_aac )> 0{var _bb _af .Buffer ;for _ ,_eb :=range _aac {if _dcea ,_cfg :=_add .DecodeStream (_eb );
_cfg ==nil {_bb .Write (_dcea );};_dce [_eb ]=true ;};_ef ,_db :=_add .MakeStream (_bb .Bytes (),_add .NewFlateEncoder ());if _db !=nil {return nil ,_db ;};_faf [_ef ]=true ;_ga .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_ef );_daf (_ef );
};};};case *_add .PdfObjectStream :if _fgda ,_cge :=_add .GetName (_ea .Get ("\u0054\u0079\u0070\u0065"));!_cge ||_fgda .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _gc ,_dab :=_add .GetName (_ea .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_dab ||_gc .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_daf (_ea );};};for _ ,_afc :=range _fd {_cg =_dfa (_afc );if _cg !=nil {return nil ,_cg ;};};_ee =nil ;for _ ,_cba :=range objects {if _dce [_cba ]{continue ;};_ee =append (_ee ,_cba );};for _eed :=range _faf {_ee =append (_ee ,_eed );
};return _ee ,nil ;};func _bad (_ffg []_add .PdfObject ,_fda map[_add .PdfObject ]_add .PdfObject ){if len (_fda )==0{return ;};for _gdce ,_gge :=range _ffg {if _aadaa ,_dcfg :=_fda [_gge ];_dcfg {_ffg [_gdce ]=_aadaa ;continue ;};_fda [_gge ]=_gge ;switch _cbfd :=_gge .(type ){case *_add .PdfObjectArray :_bbff :=make ([]_add .PdfObject ,_cbfd .Len ());
copy (_bbff ,_cbfd .Elements ());_bad (_bbff ,_fda );for _bcgg ,_afgd :=range _bbff {_cbfd .Set (_bcgg ,_afgd );};case *_add .PdfObjectStreams :_bad (_cbfd .Elements (),_fda );case *_add .PdfObjectStream :_abbag :=[]_add .PdfObject {_cbfd .PdfObjectDictionary };
_bad (_abbag ,_fda );_cbfd .PdfObjectDictionary =_abbag [0].(*_add .PdfObjectDictionary );case *_add .PdfObjectDictionary :_gce :=_cbfd .Keys ();_fgfe :=make ([]_add .PdfObject ,len (_gce ));for _efb ,_ggea :=range _gce {_fgfe [_efb ]=_cbfd .Get (_ggea );
};_bad (_fgfe ,_fda );for _effg ,_bbba :=range _gce {_cbfd .Set (_bbba ,_fgfe [_effg ]);};case *_add .PdfIndirectObject :_cecd :=[]_add .PdfObject {_cbfd .PdfObject };_bad (_cecd ,_fda );_cbfd .PdfObject =_cecd [0];};};};func _cbd (_cga *_add .PdfObjectStream ,_aeb []rune ,_gb []_df .GlyphIndex )error {_cga ,_cbb :=_add .GetStream (_cga );
if !_cbb {_d .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _c .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_dbd ,_fga :=_add .DecodeStream (_cga );if _fga !=nil {_d .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_fga );
return _fga ;};_bc ,_fga :=_df .Parse (_af .NewReader (_dbd ));if _fga !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_cga .Stream ));
return _fga ;};_dcf :=_gb ;if len (_aeb )> 0{_gedb :=_bc .LookupRunes (_aeb );_dcf =append (_dcf ,_gedb ...);};_bc ,_fga =_bc .SubsetKeepIndices (_dcf );if _fga !=nil {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_fga );
return _fga ;};var _cbfg _af .Buffer ;_fga =_bc .Write (&_cbfg );if _fga !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_fga );return _fga ;};if _cbfg .Len ()> len (_dbd ){_d .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_dcfe ,_fga :=_add .MakeStream (_cbfg .Bytes (),_add .NewFlateEncoder ());if _fga !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_fga );return _fga ;
};*_cga =*_dcfe ;_cga .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_add .MakeInteger (int64 (_cbfg .Len ())));return nil ;};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_add .PdfObjectStream ;PPI float64 ;
};func _cecda (_fcee []_add .PdfObject ){for _bcc ,_afgg :=range _fcee {switch _aabf :=_afgg .(type ){case *_add .PdfIndirectObject :_aabf .ObjectNumber =int64 (_bcc +1);_aabf .GenerationNumber =0;case *_add .PdfObjectStream :_aabf .ObjectNumber =int64 (_bcc +1);
_aabf .GenerationNumber =0;case *_add .PdfObjectStreams :_aabf .ObjectNumber =int64 (_bcc +1);_aabf .GenerationNumber =0;};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gacd *CombineIdenticalIndirectObjects )Optimize (objects []_add .PdfObject )(_gcde []_add .PdfObject ,_aag error ){_cecda (objects );_ede :=make (map[_add .PdfObject ]_add .PdfObject );_deg :=make (map[_add .PdfObject ]struct{});_adbf :=make (map[string ][]*_add .PdfIndirectObject );
for _ ,_gace :=range objects {_bgc ,_bgda :=_gace .(*_add .PdfIndirectObject );if !_bgda {continue ;};if _bbg ,_ffda :=_bgc .PdfObject .(*_add .PdfObjectDictionary );_ffda {if _gfbf ,_egcc :=_bbg .Get ("\u0054\u0079\u0070\u0065").(*_add .PdfObjectName );
_egcc &&*_gfbf =="\u0050\u0061\u0067\u0065"{continue ;};_afb :=_fg .New ();_afb .Write ([]byte (_bbg .WriteString ()));_bcb :=string (_afb .Sum (nil ));_adbf [_bcb ]=append (_adbf [_bcb ],_bgc );};};for _ ,_fdgc :=range _adbf {if len (_fdgc )< 2{continue ;
};_ebeg :=_fdgc [0];for _dcef :=1;_dcef < len (_fdgc );_dcef ++{_dddd :=_fdgc [_dcef ];_ede [_dddd ]=_ebeg ;_deg [_dddd ]=struct{}{};};};_gcde =make ([]_add .PdfObject ,0,len (objects )-len (_deg ));for _ ,_aea :=range objects {if _ ,_gdbe :=_deg [_aea ];
_gdbe {continue ;};_gcde =append (_gcde ,_aea );};_bad (_gcde ,_ede );return _gcde ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};func _fggc (_bbf *_dc .XObjectImage ,_bcg imageModifications )error {_geda ,_ecf :=_bbf .ToImage ();if _ecf !=nil {return _ecf ;};if _bcg .Scale !=0{_geda ,_ecf =_adg (_geda ,_bcg .Scale );if _ecf !=nil {return _ecf ;};};if _bcg .Encoding !=nil {_bbf .Filter =_bcg .Encoding ;
};_bbf .Decode =nil ;switch _dece :=_bbf .Filter .(type ){case *_add .FlateEncoder :if _dece .Predictor !=1&&_dece .Predictor !=11{_dece .Predictor =1;};};if _ecf =_bbf .SetImage (_geda ,nil );_ecf !=nil {_d .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_ecf );
return _ecf ;};_bbf .ToPdfObject ();return nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_afca *ImagePPI )Optimize (objects []_add .PdfObject )(_fff []_add .PdfObject ,_abb error ){if _afca .ImageUpperPPI <=0{return objects ,nil ;};_dcfd :=_ceb (objects );if len (_dcfd )==0{return objects ,nil ;};_gba :=make (map[_add .PdfObject ]struct{});
for _ ,_ecfe :=range _dcfd {_bcf :=_ecfe .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_gba [_bcf ]=struct{}{};};_bdgf :=make (map[*_add .PdfObjectStream ]*imageInfo );for _ ,_age :=range _dcfd {_bdgf [_age .Stream ]=_age ;};var _bec *_add .PdfObjectDictionary ;
for _ ,_ecg :=range objects {if _ffa ,_bdea :=_add .GetDict (_ecg );_bec ==nil &&_bdea {if _abg ,_afed :=_add .GetName (_ffa .Get ("\u0054\u0079\u0070\u0065"));_afed &&*_abg =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_bec =_ffa ;};};};if _bec ==nil {return objects ,nil ;
};_efga ,_dbb :=_add .GetDict (_bec .Get ("\u0050\u0061\u0067e\u0073"));if !_dbb {return objects ,nil ;};_cgg ,_bagc :=_add .GetArray (_efga .Get ("\u004b\u0069\u0064\u0073"));if !_bagc {return objects ,nil ;};for _ ,_dfg :=range _cgg .Elements (){_bdge :=make (map[string ]*imageInfo );
_ccg ,_fcggga :=_add .GetDict (_dfg );if !_fcggga {continue ;};_fcb ,_ :=_fabb (_ccg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_fcb )==0{continue ;};_ffdc ,_debc :=_add .GetDict (_ccg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_debc {continue ;};_afg ,_dgb :=_dc .NewPdfPageResourcesFromDict (_ffdc );if _dgb !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_dgb );
continue ;};_abda ,_ccgc :=_add .GetDict (_ffdc .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_ccgc {continue ;};_fag :=_abda .Keys ();for _ ,_dbef :=range _fag {if _agc ,_fcgc :=_add .GetStream (_abda .Get (_dbef ));_fcgc {if _ebbe ,_dfba :=_bdgf [_agc ];
_dfba {_bdge [string (_dbef )]=_ebbe ;};};};_bcfc :=_ff .NewContentStreamParser (_fcb );_ggd ,_dgb :=_bcfc .Parse ();if _dgb !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dgb );continue ;};_cdf :=_ff .NewContentStreamProcessor (*_ggd );
_cdf .AddHandler (_ff .HandlerConditionEnumAllOperands ,"",func (_bfb *_ff .ContentStreamOperation ,_befg _ff .GraphicsState ,_geg *_dc .PdfPageResources )error {switch _bfb .Operand {case "\u0044\u006f":if len (_bfb .Params )!=1{_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_fde ,_cgdf :=_add .GetName (_bfb .Params [0]);if !_cgdf {_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _cgf ,_fade :=_bdge [string (*_fde )];_fade {_gdd :=_befg .CTM .ScalingFactorX ();_aaee :=_befg .CTM .ScalingFactorY ();_gbg ,_abdc :=_gdd /72.0,_aaee /72.0;_ega ,_fcfg :=float64 (_cgf .Width )/_gbg ,float64 (_cgf .Height )/_abdc ;if _gbg ==0||_abdc ==0{_ega =72.0;
_fcfg =72.0;};_cgf .PPI =_a .Max (_cgf .PPI ,_ega );_cgf .PPI =_a .Max (_cgf .PPI ,_fcfg );};};return nil ;});_dgb =_cdf .Process (_afg );if _dgb !=nil {_d .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_dgb );
continue ;};};for _ ,_ebcf :=range _dcfd {if _ ,_abba :=_gba [_ebcf .Stream ];_abba {continue ;};if _ebcf .PPI <=_afca .ImageUpperPPI {continue ;};_defg ,_baff :=_dc .NewXObjectImageFromStream (_ebcf .Stream );if _baff !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_baff );
continue ;};var _ceff imageModifications ;_ceff .Scale =_afca .ImageUpperPPI /_ebcf .PPI ;if _ebcf .BitsPerComponent ==1&&_ebcf .ColorComponents ==1{_agb :=_a .Round (_ebcf .PPI /_afca .ImageUpperPPI );_gea :=_fc .NextPowerOf2 (uint (_agb ));if _fc .InDelta (float64 (_gea ),1/_ceff .Scale ,0.3){_ceff .Scale =float64 (1)/float64 (_gea );
};if _ ,_dfdg :=_defg .Filter .(*_add .JBIG2Encoder );!_dfdg {_ceff .Encoding =_add .NewJBIG2Encoder ();};};if _baff =_fggc (_defg ,_ceff );_baff !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_baff );
continue ;};_ceff .Encoding =nil ;if _egca ,_cbg :=_add .GetStream (_ebcf .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_cbg {_ggda ,_dfaa :=_dc .NewXObjectImageFromStream (_egca );if _dfaa !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dfaa );
continue ;};if _dfaa =_fggc (_ggda ,_ceff );_dfaa !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dfaa );continue ;};};};return objects ,nil ;};

// Append appends optimizers to the chain.
func (_ab *Chain )Append (optimizers ..._dc .Optimizer ){_ab ._fgd =append (_ab ._fgd ,optimizers ...)};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bce *Image )Optimize (objects []_add .PdfObject )(_dfe []_add .PdfObject ,_gcf error ){if _bce .ImageQuality <=0{return objects ,nil ;};_aeg :=_ceb (objects );if len (_aeg )==0{return objects ,nil ;};_fggd :=make (map[_add .PdfObject ]_add .PdfObject );
_ggge :=make (map[_add .PdfObject ]struct{});for _ ,_fbf :=range _aeg {_bef :=_fbf .Stream .Get ("\u0053\u004d\u0061s\u006b");_ggge [_bef ]=struct{}{};};for _cebb ,_fae :=range _aeg {_bdcc :=_fae .Stream ;if _ ,_cgae :=_ggge [_bdcc ];_cgae {continue ;};
_bbef ,_gaga :=_dc .NewXObjectImageFromStream (_bdcc );if _gaga !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gaga );continue ;};switch _bbef .Filter .(type ){case *_add .JBIG2Encoder :continue ;case *_add .CCITTFaxEncoder :continue ;
};_dbab ,_gaga :=_bbef .ToImage ();if _gaga !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gaga );continue ;};_ddg :=_add .NewDCTEncoder ();_ddg .ColorComponents =_dbab .ColorComponents ;_ddg .Quality =_bce .ImageQuality ;
_ddg .BitsPerComponent =_fae .BitsPerComponent ;_ddg .Width =_fae .Width ;_ddg .Height =_fae .Height ;_edd ,_gaga :=_ddg .EncodeBytes (_dbab .Data );if _gaga !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gaga );
continue ;};var _aab _add .StreamEncoder ;_aab =_ddg ;{_cedd :=_add .NewFlateEncoder ();_bbb :=_add .NewMultiEncoder ();_bbb .AddEncoder (_cedd );_bbb .AddEncoder (_ddg );_bdb ,_fcggg :=_bbb .EncodeBytes (_dbab .Data );if _fcggg !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_fcggg );
continue ;};if len (_bdb )< len (_edd ){_d .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_edd ),len (_bdb ),len (_bdcc .Stream ));
_edd =_bdb ;_aab =_bbb ;};};_aae :=len (_bdcc .Stream );if _aae < len (_edd ){continue ;};_cfe :=&_add .PdfObjectStream {Stream :_edd };_cfe .PdfObjectReference =_bdcc .PdfObjectReference ;_cfe .PdfObjectDictionary =_add .MakeDict ();_cfe .Merge (_bdcc .PdfObjectDictionary );
_cfe .Merge (_aab .MakeStreamDict ());_cfe .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_add .MakeInteger (int64 (len (_edd ))));_fggd [_bdcc ]=_cfe ;_aeg [_cebb ].Stream =_cfe ;};_dfe =make ([]_add .PdfObject ,len (objects ));copy (_dfe ,objects );_bad (_dfe ,_fggd );
return _dfe ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bddf *ObjectStreams )Optimize (objects []_add .PdfObject )(_cbge []_add .PdfObject ,_gdbdc error ){_baga :=&_add .PdfObjectStreams {};_bdfb :=make ([]_add .PdfObject ,0,len (objects ));for _ ,_gad :=range objects {if _cec ,_gedf :=_gad .(*_add .PdfIndirectObject );
_gedf &&_cec .GenerationNumber ==0{_baga .Append (_gad );}else {_bdfb =append (_bdfb ,_gad );};};if _baga .Len ()==0{return _bdfb ,nil ;};_cbge =make ([]_add .PdfObject ,0,len (_bdfb )+_baga .Len ()+1);if _baga .Len ()> 1{_cbge =append (_cbge ,_baga );
};_cbge =append (_cbge ,_baga .Elements ()...);_cbge =append (_cbge ,_bdfb ...);return _cbge ,nil ;};type objectStructure struct{_cfeb *_add .PdfObjectDictionary ;_efd *_add .PdfObjectDictionary ;_ecd []*_add .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aff *CombineDuplicateDirectObjects )Optimize (objects []_add .PdfObject )(_gda []_add .PdfObject ,_afec error ){_cecda (objects );_fgf :=make (map[string ][]*_add .PdfObjectDictionary );var _dge func (_aaa *_add .PdfObjectDictionary );_dge =func (_fgge *_add .PdfObjectDictionary ){for _ ,_cgaf :=range _fgge .Keys (){_cadb :=_fgge .Get (_cgaf );
if _bgf ,_dbc :=_cadb .(*_add .PdfObjectDictionary );_dbc {_bab :=_fg .New ();_bab .Write ([]byte (_bgf .WriteString ()));_fdb :=string (_bab .Sum (nil ));_fgf [_fdb ]=append (_fgf [_fdb ],_bgf );_dge (_bgf );};};};for _ ,_bafa :=range objects {_gggc ,_gac :=_bafa .(*_add .PdfIndirectObject );
if !_gac {continue ;};if _dgc ,_cfa :=_gggc .PdfObject .(*_add .PdfObjectDictionary );_cfa {_dge (_dgc );};};_gbc :=make ([]_add .PdfObject ,0,len (_fgf ));_bgd :=make (map[_add .PdfObject ]_add .PdfObject );for _ ,_afff :=range _fgf {if len (_afff )< 2{continue ;
};_deb :=_add .MakeDict ();_deb .Merge (_afff [0]);_eeff :=_add .MakeIndirectObject (_deb );_gbc =append (_gbc ,_eeff );for _afee :=0;_afee < len (_afff );_afee ++{_bdg :=_afff [_afee ];_bgd [_bdg ]=_eeff ;};};_gda =make ([]_add .PdfObject ,len (objects ));
copy (_gda ,objects );_gda =append (_gbc ,_gda ...);_bad (_gda ,_bgd );return _gda ,nil ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _dgg (_eba _add .PdfObject )[]content {if _eba ==nil {return nil ;};_bg ,_fegf :=_add .GetArray (_eba );if !_fegf {_d .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _aada []content ;for _ ,_cc :=range _bg .Elements (){_eafe ,_bac :=_add .GetDict (_cc );if !_bac {_d .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_ggg ,_bac :=_add .GetDict (_eafe .Get ("\u0041\u0050"));if !_bac {_d .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_agd :=_add .TraceToDirectObject (_ggg .Get ("\u004e"));
if _agd ==nil {_d .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _dad *_add .PdfObjectStream ;switch _dfd :=_agd .(type ){case *_add .PdfObjectDictionary :_edg ,_fcgg :=_add .GetName (_eafe .Get ("\u0041\u0053"));
if !_fcgg {_d .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_dad ,_fcgg =_add .GetStream (_dfd .Get (*_edg ));if !_fcgg {_d .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_add .PdfObjectStream :_dad =_dfd ;};if _dad ==nil {_d .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_dga ,_efc :=_dc .NewXObjectFormFromStream (_dad );if _efc !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_efc );
continue ;};_abd ,_efc :=_dga .GetContentStream ();if _efc !=nil {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_efc );continue ;};_aada =append (_aada ,content {_afcd :string (_abd ),_gef :_dga .Resources });
};return _aada ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _ed (_ac *_ff .ContentStreamOperations )*_ff .ContentStreamOperations {if _ac ==nil {return nil ;};_fea :=_ff .ContentStreamOperations {};for _ ,_cf :=range *_ac {switch _cf .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_cf .Params )==6{if _dcb ,_ge :=_add .GetNumbersAsFloat (_cf .Params );_ge ==nil {if _dcb [0]==1&&_dcb [1]==0&&_dcb [2]==0&&_dcb [3]==1{_cf =&_ff .ContentStreamOperation {Params :[]_add .PdfObject {_cf .Params [4],_cf .Params [5]},Operand :"\u0054\u0064"};
};};};};_fea =append (_fea ,_cf );};return &_fea ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_egccg :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_egccg .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_egccg .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_abga :=new (ImagePPI );
_abga .ImageUpperPPI =options .ImageUpperPPI ;_egccg .Append (_abga );};if options .ImageQuality > 0{_cae :=new (Image );_cae .ImageQuality =options .ImageQuality ;_egccg .Append (_cae );};if options .CombineDuplicateDirectObjects {_egccg .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_egccg .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_egccg .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_egccg .Append (new (ObjectStreams ));
};if options .CompressStreams {_egccg .Append (new (CompressStreams ));};return _egccg ;};func _bdf (_afa []_add .PdfObject )(_fbg map[*_add .PdfObjectStream ]struct{},_bag error ){_fbg =map[*_add .PdfObjectStream ]struct{}{};_ged :=map[*_dc .PdfFont ]struct{}{};
_dbe :=_gdde (_afa );for _ ,_gfa :=range _dbe ._ecd {_fef ,_acc :=_add .GetDict (_gfa .PdfObject );if !_acc {continue ;};_bde ,_acc :=_add .GetDict (_fef .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_acc {continue ;};_afd ,_ :=_fabb (_fef .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_accb ,_egg :=_dc .NewPdfPageResourcesFromDict (_bde );if _egg !=nil {return nil ,_egg ;};_eaf :=[]content {{_afcd :_afd ,_gef :_accb }};_fcga :=_dgg (_fef .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _fcga !=nil {_eaf =append (_eaf ,_fcga ...);};
for _ ,_fdg :=range _eaf {_eac ,_fdc :=_fe .NewFromContents (_fdg ._afcd ,_fdg ._gef );if _fdc !=nil {return nil ,_fdc ;};_bae ,_ ,_ ,_fdc :=_eac .ExtractPageText ();if _fdc !=nil {return nil ,_fdc ;};for _ ,_bbe :=range _bae .Marks ().Elements (){if _bbe .Font ==nil {continue ;
};if _ ,_ada :=_ged [_bbe .Font ];!_ada {_ged [_bbe .Font ]=struct{}{};};};};};_bfdf :=map[*_add .PdfObjectStream ][]*_dc .PdfFont {};for _ffd :=range _ged {_gfg :=_ffd .FontDescriptor ();if _gfg ==nil ||_gfg .FontFile2 ==nil {continue ;};_ce ,_fbb :=_add .GetStream (_gfg .FontFile2 );
if !_fbb {continue ;};_bfdf [_ce ]=append (_bfdf [_ce ],_ffd );};for _egd :=range _bfdf {var _adaa []rune ;var _gff []_df .GlyphIndex ;for _ ,_accg :=range _bfdf [_egd ]{switch _fgg :=_accg .Encoder ().(type ){case *_ad .IdentityEncoder :_agg :=_fgg .RegisteredRunes ();
_dee :=make ([]_df .GlyphIndex ,len (_agg ));for _geb ,_aca :=range _agg {_dee [_geb ]=_df .GlyphIndex (_aca );};_gff =append (_gff ,_dee ...);case *_ad .TrueTypeFontEncoder :_aga :=_fgg .RegisteredRunes ();_adaa =append (_adaa ,_aga ...);case _ad .SimpleEncoder :_gffg :=_fgg .Charcodes ();
for _ ,_gae :=range _gffg {_fgga ,_baf :=_fgg .CharcodeToRune (_gae );if !_baf {_d .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_gae );
continue ;};_adaa =append (_adaa ,_fgga );};};};_bag =_cbd (_egd ,_adaa ,_gff );if _bag !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_bag );
return nil ,_bag ;};_fbg [_egd ]=struct{}{};};return _fbg ,nil ;};type content struct{_afcd string ;_gef *_dc .PdfPageResources ;};func _fabb (_bgfc _add .PdfObject )(_dadf string ,_dcegg []_add .PdfObject ){var _fbge _af .Buffer ;switch _gbee :=_bgfc .(type ){case *_add .PdfIndirectObject :_dcegg =append (_dcegg ,_gbee );
_bgfc =_gbee .PdfObject ;};switch _bcd :=_bgfc .(type ){case *_add .PdfObjectStream :if _cefd ,_daa :=_add .DecodeStream (_bcd );_daa ==nil {_fbge .Write (_cefd );_dcegg =append (_dcegg ,_bcd );};case *_add .PdfObjectArray :for _ ,_dfc :=range _bcd .Elements (){switch _fgb :=_dfc .(type ){case *_add .PdfObjectStream :if _dea ,_abae :=_add .DecodeStream (_fgb );
_abae ==nil {_fbge .Write (_dea );_dcegg =append (_dcegg ,_fgb );};};};};return _fbge .String (),_dcegg ;};