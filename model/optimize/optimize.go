//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_gf "bytes";_gd "crypto/md5";_gee "errors";_c "github.com/unidoc/unipdf/v3/common";_bb "github.com/unidoc/unipdf/v3/contentstream";_ff "github.com/unidoc/unipdf/v3/core";_ge "github.com/unidoc/unipdf/v3/extractor";_b "github.com/unidoc/unipdf/v3/internal/imageutil";
_de "github.com/unidoc/unipdf/v3/internal/textencoding";_bf "github.com/unidoc/unipdf/v3/model";_ged "github.com/unidoc/unitype";_g "golang.org/x/image/draw";_d "math";);

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bgc *CleanContentstream )Optimize (objects []_ff .PdfObject )(_edd []_ff .PdfObject ,_bbf error ){_cca :=map[*_ff .PdfObjectStream ]struct{}{};var _gaf []*_ff .PdfObjectStream ;_cg :=func (_dad *_ff .PdfObjectStream ){if _ ,_afb :=_cca [_dad ];!_afb {_cca [_dad ]=struct{}{};
_gaf =append (_gaf ,_dad );};};_ca :=map[_ff .PdfObject ]bool {};_age :=map[_ff .PdfObject ]bool {};for _ ,_ec :=range objects {switch _bbfd :=_ec .(type ){case *_ff .PdfIndirectObject :switch _ac :=_bbfd .PdfObject .(type ){case *_ff .PdfObjectDictionary :if _faa ,_faag :=_ff .GetName (_ac .Get ("\u0054\u0079\u0070\u0065"));
!_faag ||_faa .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _feg ,_ddd :=_ff .GetStream (_ac .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ddd {_cg (_feg );}else if _ae ,_deg :=_ff .GetArray (_ac .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_deg {var _ede []*_ff .PdfObjectStream ;for _ ,_ea :=range _ae .Elements (){if _ab ,_gb :=_ff .GetStream (_ea );_gb {_ede =append (_ede ,_ab );};};if len (_ede )> 0{var _bdd _gf .Buffer ;for _ ,_eaf :=range _ede {if _cad ,_edb :=_ff .DecodeStream (_eaf );
_edb ==nil {_bdd .Write (_cad );};_ca [_eaf ]=true ;};_cd ,_fef :=_ff .MakeStream (_bdd .Bytes (),_ff .NewFlateEncoder ());if _fef !=nil {return nil ,_fef ;};_age [_cd ]=true ;_ac .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_cd );_cg (_cd );
};};};case *_ff .PdfObjectStream :if _agg ,_gad :=_ff .GetName (_bbfd .Get ("\u0054\u0079\u0070\u0065"));!_gad ||_agg .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _bec ,_fab :=_ff .GetName (_bbfd .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_fab ||_bec .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_cg (_bbfd );};};for _ ,_cgb :=range _gaf {_bbf =_ed (_cgb );if _bbf !=nil {return nil ,_bbf ;};};_edd =nil ;for _ ,_fc :=range objects {if _ca [_fc ]{continue ;};_edd =append (_edd ,_fc );
};for _abb :=range _age {_edd =append (_edd ,_abb );};return _edd ,nil ;};func _gfb (_feebf []_ff .PdfObject )[]*imageInfo {_gbf :=_ff .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_bda :=make (map[*_ff .PdfObjectStream ]struct{});var _fdf []*imageInfo ;
for _ ,_gefd :=range _feebf {_cfd ,_edc :=_ff .GetStream (_gefd );if !_edc {continue ;};if _ ,_dbga :=_bda [_cfd ];_dbga {continue ;};_bda [_cfd ]=struct{}{};_bade :=_cfd .PdfObjectDictionary .Get (_gbf );_efca ,_edc :=_ff .GetName (_bade );if !_edc ||string (*_efca )!="\u0049\u006d\u0061g\u0065"{continue ;
};_bggd :=&imageInfo {Stream :_cfd ,BitsPerComponent :8};if _ffgf ,_dgfd :=_ff .GetIntVal (_cfd .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_dgfd {_bggd .BitsPerComponent =_ffgf ;};if _dfb ,_cffd :=_ff .GetIntVal (_cfd .Get ("\u0057\u0069\u0064t\u0068"));
_cffd {_bggd .Width =_dfb ;};if _efcg ,_dbef :=_ff .GetIntVal (_cfd .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_dbef {_bggd .Height =_efcg ;};_eeee ,_gdaf :=_bf .NewPdfColorspaceFromPdfObject (_cfd .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));
if _gdaf !=nil {_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gdaf );continue ;};if _eeee ==nil {_eda ,_fbeb :=_ff .GetName (_cfd .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _fbeb {switch _eda .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_eeee =_bf .NewPdfColorspaceDeviceGray ();
_bggd .BitsPerComponent =1;};};};switch _bbb :=_eeee .(type ){case *_bf .PdfColorspaceDeviceRGB :_bggd .ColorComponents =3;case *_bf .PdfColorspaceDeviceGray :_bggd .ColorComponents =1;default:_c .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_bbb );
continue ;};_fdf =append (_fdf ,_bggd );};return _fdf ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};func _cdb (_abe []_ff .PdfObject )(_fee map[*_ff .PdfObjectStream ]struct{},_cb error ){_fee =map[*_ff .PdfObjectStream ]struct{}{};_gadc :=map[*_bf .PdfFont ]struct{}{};_eb :=_bdbe (_abe );for _ ,_ce :=range _eb ._bgeg {_cef ,_fgfa :=_ff .GetDict (_ce .PdfObject );
if !_fgfa {continue ;};_aee ,_fgfa :=_ff .GetDict (_cef .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_fgfa {continue ;};_feeb ,_ :=_deda (_cef .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ccc ,_dc :=_bf .NewPdfPageResourcesFromDict (_aee );
if _dc !=nil {return nil ,_dc ;};_bfe :=[]content {{_gce :_feeb ,_cbgf :_ccc }};_egc :=_efb (_cef .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _egc !=nil {_bfe =append (_bfe ,_egc ...);};for _ ,_gbg :=range _bfe {_eab ,_ced :=_ge .NewFromContents (_gbg ._gce ,_gbg ._cbgf );
if _ced !=nil {return nil ,_ced ;};_gca ,_ ,_ ,_ced :=_eab .ExtractPageText ();if _ced !=nil {return nil ,_ced ;};for _ ,_efc :=range _gca .Marks ().Elements (){if _efc .Font ==nil {continue ;};if _ ,_ba :=_gadc [_efc .Font ];!_ba {_gadc [_efc .Font ]=struct{}{};
};};};};_dae :=map[*_ff .PdfObjectStream ][]*_bf .PdfFont {};for _gcd :=range _gadc {_agef :=_gcd .FontDescriptor ();if _agef ==nil ||_agef .FontFile2 ==nil {continue ;};_dbcf ,_agf :=_ff .GetStream (_agef .FontFile2 );if !_agf {continue ;};_dae [_dbcf ]=append (_dae [_dbcf ],_gcd );
};for _gfa :=range _dae {var _abf []rune ;var _bag []_ged .GlyphIndex ;for _ ,_bac :=range _dae [_gfa ]{switch _eca :=_bac .Encoder ().(type ){case *_de .IdentityEncoder :_bdc :=_eca .RegisteredRunes ();_bbd :=make ([]_ged .GlyphIndex ,len (_bdc ));for _aag ,_aff :=range _bdc {_bbd [_aag ]=_ged .GlyphIndex (_aff );
};_bag =append (_bag ,_bbd ...);case *_de .TrueTypeFontEncoder :_cccc :=_eca .RegisteredRunes ();_abf =append (_abf ,_cccc ...);case _de .SimpleEncoder :_fgff :=_eca .Charcodes ();for _ ,_gg :=range _fgff {_fefb ,_dba :=_eca .CharcodeToRune (_gg );if !_dba {_c .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_gg );
continue ;};_abf =append (_abf ,_fefb );};};};_cb =_dec (_gfa ,_abf ,_bag );if _cb !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_cb );
return nil ,_cb ;};_fee [_gfa ]=struct{}{};};return _fee ,nil ;};func _bdcd (_ebbg *_bf .XObjectImage ,_abfa imageModifications )error {_bff ,_ffdd :=_ebbg .ToImage ();if _ffdd !=nil {return _ffdd ;};if _abfa .Scale !=0{_bff ,_ffdd =_agb (_bff ,_abfa .Scale );
if _ffdd !=nil {return _ffdd ;};};if _abfa .Encoding !=nil {_ebbg .Filter =_abfa .Encoding ;};_ebbg .Decode =nil ;switch _gefa :=_ebbg .Filter .(type ){case *_ff .FlateEncoder :if _gefa .Predictor !=1&&_gefa .Predictor !=11{_gefa .Predictor =1;};};if _ffdd =_ebbg .SetImage (_bff ,nil );
_ffdd !=nil {_c .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_ffdd );return _ffdd ;};_ebbg .ToPdfObject ();return nil ;};

// Append appends optimizers to the chain.
func (_bd *Chain )Append (optimizers ..._bf .Optimizer ){_bd ._a =append (_bd ._a ,optimizers ...)};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eddf *CombineDuplicateDirectObjects )Optimize (objects []_ff .PdfObject )(_bcef []_ff .PdfObject ,_fbc error ){_fdeb (objects );_fbgc :=make (map[string ][]*_ff .PdfObjectDictionary );var _bed func (_ega *_ff .PdfObjectDictionary );_bed =func (_bad *_ff .PdfObjectDictionary ){for _ ,_cge :=range _bad .Keys (){_cadd :=_bad .Get (_cge );
if _bdb ,_aedd :=_cadd .(*_ff .PdfObjectDictionary );_aedd {_bfa :=_gd .New ();_bfa .Write ([]byte (_bdb .WriteString ()));_geae :=string (_bfa .Sum (nil ));_fbgc [_geae ]=append (_fbgc [_geae ],_bdb );_bed (_bdb );};};};for _ ,_ffg :=range objects {_ggf ,_gcdb :=_ffg .(*_ff .PdfIndirectObject );
if !_gcdb {continue ;};if _fbfa ,_cdd :=_ggf .PdfObject .(*_ff .PdfObjectDictionary );_cdd {_bed (_fbfa );};};_efaf :=make ([]_ff .PdfObject ,0,len (_fbgc ));_bdda :=make (map[_ff .PdfObject ]_ff .PdfObject );for _ ,_gag :=range _fbgc {if len (_gag )< 2{continue ;
};_gagf :=_ff .MakeDict ();_gagf .Merge (_gag [0]);_fge :=_ff .MakeIndirectObject (_gagf );_efaf =append (_efaf ,_fge );for _cf :=0;_cf < len (_gag );_cf ++{_deb :=_gag [_cf ];_bdda [_deb ]=_fge ;};};_bcef =make ([]_ff .PdfObject ,len (objects ));copy (_bcef ,objects );
_bcef =append (_efaf ,_bcef ...);_fcfc (_bcef ,_bdda );return _bcef ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_da *Chain )Optimize (objects []_ff .PdfObject )(_fg []_ff .PdfObject ,_db error ){_dbg :=objects ;for _ ,_fa :=range _da ._a {_dd ,_fb :=_fa .Optimize (_dbg );if _fb !=nil {_c .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_fb );
continue ;};_dbg =_dd ;};return _dbg ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};func _efb (_egg _ff .PdfObject )[]content {if _egg ==nil {return nil ;};_gcee ,_efa :=_ff .GetArray (_egg );if !_efa {_c .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _fd []content ;for _ ,_bea :=range _gcee .Elements (){_feec ,_ffb :=_ff .GetDict (_bea );if !_ffb {_c .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_gcdf ,_ffb :=_ff .GetDict (_feec .Get ("\u0041\u0050"));if !_ffb {_c .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_cba :=_ff .TraceToDirectObject (_gcdf .Get ("\u004e"));
if _cba ==nil {_c .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _gade *_ff .PdfObjectStream ;switch _cefe :=_cba .(type ){case *_ff .PdfObjectDictionary :_fbg ,_ebb :=_ff .GetName (_feec .Get ("\u0041\u0053"));
if !_ebb {_c .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_gade ,_ebb =_ff .GetStream (_cefe .Get (*_fbg ));if !_ebb {_c .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_ff .PdfObjectStream :_gade =_cefe ;};if _gade ==nil {_c .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_dda ,_ad :=_bf .NewXObjectFormFromStream (_gade );if _ad !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ad );
continue ;};_gge ,_ad :=_dda .GetContentStream ();if _ad !=nil {_c .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_ad );continue ;};_fd =append (_fd ,content {_gce :string (_gge ),_cbgf :_dda .Resources });
};return _fd ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};type content struct{_gce string ;_cbgf *_bf .PdfPageResources ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gceg *CombineDuplicateStreams )Optimize (objects []_ff .PdfObject )(_ead []_ff .PdfObject ,_dfc error ){_cade :=make (map[_ff .PdfObject ]_ff .PdfObject );_fgeg :=make (map[_ff .PdfObject ]struct{});_dgf :=make (map[string ][]*_ff .PdfObjectStream );
for _ ,_gcf :=range objects {if _dfa ,_egcb :=_gcf .(*_ff .PdfObjectStream );_egcb {_cff :=_gd .New ();_cff .Write (_dfa .Stream );_cff .Write ([]byte (_dfa .PdfObjectDictionary .WriteString ()));_gda :=string (_cff .Sum (nil ));_dgf [_gda ]=append (_dgf [_gda ],_dfa );
};};for _ ,_dca :=range _dgf {if len (_dca )< 2{continue ;};_cdcd :=_dca [0];for _dfac :=1;_dfac < len (_dca );_dfac ++{_gcda :=_dca [_dfac ];_cade [_gcda ]=_cdcd ;_fgeg [_gcda ]=struct{}{};};};_ead =make ([]_ff .PdfObject ,0,len (objects )-len (_fgeg ));
for _ ,_fbe :=range objects {if _ ,_eege :=_fgeg [_fbe ];_eege {continue ;};_ead =append (_ead ,_fbe );};_fcfc (_ead ,_cade );return _ead ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_a []_bf .Optimizer };

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _fcfc (_cbc []_ff .PdfObject ,_geca map[_ff .PdfObject ]_ff .PdfObject ){if len (_geca )==0{return ;};for _bef ,_ebbgc :=range _cbc {if _gecf ,_cbgc :=_geca [_ebbgc ];_cbgc {_cbc [_bef ]=_gecf ;continue ;};_geca [_ebbgc ]=_ebbgc ;
switch _dafd :=_ebbgc .(type ){case *_ff .PdfObjectArray :_baa :=make ([]_ff .PdfObject ,_dafd .Len ());copy (_baa ,_dafd .Elements ());_fcfc (_baa ,_geca );for _gbfd ,_ddaf :=range _baa {_dafd .Set (_gbfd ,_ddaf );};case *_ff .PdfObjectStreams :_fcfc (_dafd .Elements (),_geca );
case *_ff .PdfObjectStream :_cgg :=[]_ff .PdfObject {_dafd .PdfObjectDictionary };_fcfc (_cgg ,_geca );_dafd .PdfObjectDictionary =_cgg [0].(*_ff .PdfObjectDictionary );case *_ff .PdfObjectDictionary :_gdc :=_dafd .Keys ();_edga :=make ([]_ff .PdfObject ,len (_gdc ));
for _fgeb ,_cbeb :=range _gdc {_edga [_fgeb ]=_dafd .Get (_cbeb );};_fcfc (_edga ,_geca );for _accb ,_ece :=range _gdc {_dafd .Set (_ece ,_edga [_accb ]);};case *_ff .PdfIndirectObject :_gadd :=[]_ff .PdfObject {_dafd .PdfObject };_fcfc (_gadd ,_geca );
_dafd .PdfObject =_gadd [0];};};};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_ff .PdfObjectStream ;PPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aec *Image )Optimize (objects []_ff .PdfObject )(_aggd []_ff .PdfObject ,_cgbb error ){if _aec .ImageQuality <=0{return objects ,nil ;};_ace :=_gfb (objects );if len (_ace )==0{return objects ,nil ;};_ddg :=make (map[_ff .PdfObject ]_ff .PdfObject );
_afbd :=make (map[_ff .PdfObject ]struct{});for _ ,_ccfg :=range _ace {_ffe :=_ccfg .Stream .Get ("\u0053\u004d\u0061s\u006b");_afbd [_ffe ]=struct{}{};};for _eff ,_debf :=range _ace {_gbe :=_debf .Stream ;if _ ,_fbfc :=_afbd [_gbe ];_fbfc {continue ;};
_aef ,_fdab :=_bf .NewXObjectImageFromStream (_gbe );if _fdab !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_fdab );continue ;};switch _aef .Filter .(type ){case *_ff .JBIG2Encoder :continue ;case *_ff .CCITTFaxEncoder :continue ;
};_egf ,_fdab :=_aef .ToImage ();if _fdab !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_fdab );continue ;};_dfcd :=_ff .NewDCTEncoder ();_dfcd .ColorComponents =_egf .ColorComponents ;_dfcd .Quality =_aec .ImageQuality ;
_dfcd .BitsPerComponent =_debf .BitsPerComponent ;_dfcd .Width =_debf .Width ;_dfcd .Height =_debf .Height ;_dcb ,_fdab :=_dfcd .EncodeBytes (_egf .Data );if _fdab !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_fdab );
continue ;};var _beb _ff .StreamEncoder ;_beb =_dfcd ;{_aad :=_ff .NewFlateEncoder ();_gecc :=_ff .NewMultiEncoder ();_gecc .AddEncoder (_aad );_gecc .AddEncoder (_dfcd );_ggd ,_dgff :=_gecc .EncodeBytes (_egf .Data );if _dgff !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dgff );
continue ;};if len (_ggd )< len (_dcb ){_c .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_dcb ),len (_ggd ),len (_gbe .Stream ));
_dcb =_ggd ;_beb =_gecc ;};};_edcc :=len (_gbe .Stream );if _edcc < len (_dcb ){continue ;};_bedf :=&_ff .PdfObjectStream {Stream :_dcb };_bedf .PdfObjectReference =_gbe .PdfObjectReference ;_bedf .PdfObjectDictionary =_ff .MakeDict ();_bedf .Merge (_gbe .PdfObjectDictionary );
_bedf .Merge (_beb .MakeStreamDict ());_bedf .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ff .MakeInteger (int64 (len (_dcb ))));_ddg [_gbe ]=_bedf ;_ace [_eff ].Stream =_bedf ;};_aggd =make ([]_ff .PdfObject ,len (objects ));copy (_aggd ,objects );_fcfc (_aggd ,_ddg );
return _aggd ,nil ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dbb *ObjectStreams )Optimize (objects []_ff .PdfObject )(_fgad []_ff .PdfObject ,_agbf error ){_bcaf :=&_ff .PdfObjectStreams {};_bga :=make ([]_ff .PdfObject ,0,len (objects ));for _ ,_dgfe :=range objects {if _bcd ,_bcbd :=_dgfe .(*_ff .PdfIndirectObject );
_bcbd &&_bcd .GenerationNumber ==0{_bcaf .Append (_dgfe );}else {_bga =append (_bga ,_dgfe );};};if _bcaf .Len ()==0{return _bga ,nil ;};_fgad =make ([]_ff .PdfObject ,0,len (_bga )+_bcaf .Len ()+1);if _bcaf .Len ()> 1{_fgad =append (_fgad ,_bcaf );};_fgad =append (_fgad ,_bcaf .Elements ()...);
_fgad =append (_fgad ,_bga ...);return _fgad ,nil ;};func _deda (_bbac _ff .PdfObject )(_eec string ,_gcfe []_ff .PdfObject ){var _fea _gf .Buffer ;switch _bbbf :=_bbac .(type ){case *_ff .PdfIndirectObject :_gcfe =append (_gcfe ,_bbbf );_bbac =_bbbf .PdfObject ;
};switch _cce :=_bbac .(type ){case *_ff .PdfObjectStream :if _dadb ,_bebd :=_ff .DecodeStream (_cce );_bebd ==nil {_fea .Write (_dadb );_gcfe =append (_gcfe ,_cce );};case *_ff .PdfObjectArray :for _ ,_efbcc :=range _cce .Elements (){switch _fdag :=_efbcc .(type ){case *_ff .PdfObjectStream :if _bab ,_geda :=_ff .DecodeStream (_fdag );
_geda ==nil {_fea .Write (_bab );_gcfe =append (_gcfe ,_fdag );};};};};return _fea .String (),_gcfe ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ageb *CompressStreams )Optimize (objects []_ff .PdfObject )(_eed []_ff .PdfObject ,_eddc error ){_eed =make ([]_ff .PdfObject ,len (objects ));copy (_eed ,objects );for _ ,_debc :=range objects {_bdfd ,_efe :=_ff .GetStream (_debc );if !_efe {continue ;
};if _gae :=_bdfd .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_gae !=nil {if _ ,_ccf :=_ff .GetName (_gae );_ccf {continue ;};if _fff ,_cfb :=_ff .GetArray (_gae );_cfb &&_fff .Len ()> 0{continue ;};};_fce :=_ff .NewFlateEncoder ();var _bfaf []byte ;
_bfaf ,_eddc =_fce .EncodeBytes (_bdfd .Stream );if _eddc !=nil {return _eed ,_eddc ;};_efcb :=_fce .MakeStreamDict ();if len (_bfaf )+len (_efcb .WriteString ())< len (_bdfd .Stream ){_bdfd .Stream =_bfaf ;_bdfd .PdfObjectDictionary .Merge (_efcb );_bdfd .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ff .MakeInteger (int64 (len (_bdfd .Stream ))));
};};return _eed ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gadb *CombineIdenticalIndirectObjects )Optimize (objects []_ff .PdfObject )(_cdbc []_ff .PdfObject ,_daf error ){_fdeb (objects );_dadf :=make (map[_ff .PdfObject ]_ff .PdfObject );_dag :=make (map[_ff .PdfObject ]struct{});_ffd :=make (map[string ][]*_ff .PdfIndirectObject );
for _ ,_afe :=range objects {_degg ,_gcfg :=_afe .(*_ff .PdfIndirectObject );if !_gcfg {continue ;};if _bae ,_gef :=_degg .PdfObject .(*_ff .PdfObjectDictionary );_gef {if _fcc ,_ebeg :=_bae .Get ("\u0054\u0079\u0070\u0065").(*_ff .PdfObjectName );_ebeg &&*_fcc =="\u0050\u0061\u0067\u0065"{continue ;
};_badf :=_gd .New ();_badf .Write ([]byte (_bae .WriteString ()));_fba :=string (_badf .Sum (nil ));_ffd [_fba ]=append (_ffd [_fba ],_degg );};};for _ ,_fgc :=range _ffd {if len (_fgc )< 2{continue ;};_dce :=_fgc [0];for _gec :=1;_gec < len (_fgc );_gec ++{_cgbe :=_fgc [_gec ];
_dadf [_cgbe ]=_dce ;_dag [_cgbe ]=struct{}{};};};_cdbc =make ([]_ff .PdfObject ,0,len (objects )-len (_dag ));for _ ,_fda :=range objects {if _ ,_feff :=_dag [_fda ];_feff {continue ;};_cdbc =append (_cdbc ,_fda );};_fcfc (_cdbc ,_dadf );return _cdbc ,nil ;
};func _agb (_ccce *_bf .Image ,_bdbg float64 )(*_bf .Image ,error ){_fde ,_ddge :=_ccce .ToGoImage ();if _ddge !=nil {return nil ,_ddge ;};var _ggfd _b .Image ;_cec ,_dcf :=_fde .(*_b .Monochrome );if _dcf {if _ddge =_cec .ResolveDecode ();_ddge !=nil {return nil ,_ddge ;
};_ggfd ,_ddge =_cec .Scale (_bdbg );if _ddge !=nil {return nil ,_ddge ;};}else {_acf :=int (_d .RoundToEven (float64 (_ccce .Width )*_bdbg ));_gagc :=int (_d .RoundToEven (float64 (_ccce .Height )*_bdbg ));_ggfd ,_ddge =_b .NewImage (_acf ,_gagc ,int (_ccce .BitsPerComponent ),_ccce .ColorComponents ,nil ,nil ,nil );
if _ddge !=nil {return nil ,_ddge ;};_g .CatmullRom .Scale (_ggfd ,_ggfd .Bounds (),_fde ,_fde .Bounds (),_g .Over ,&_g .Options {});};_ffeb :=_ggfd .Base ();_bdg :=&_bf .Image {Width :int64 (_ffeb .Width ),Height :int64 (_ffeb .Height ),BitsPerComponent :int64 (_ffeb .BitsPerComponent ),ColorComponents :_ffeb .ColorComponents ,Data :_ffeb .Data };
_bdg .SetDecode (_ffeb .Decode );_bdg .SetAlpha (_ffeb .Alpha );return _bdg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aeea *ImagePPI )Optimize (objects []_ff .PdfObject )(_caa []_ff .PdfObject ,_ded error ){if _aeea .ImageUpperPPI <=0{return objects ,nil ;};_bedc :=_gfb (objects );if len (_bedc )==0{return objects ,nil ;};_bbg :=make (map[_ff .PdfObject ]struct{});
for _ ,_geac :=range _bedc {_dfd :=_geac .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_bbg [_dfd ]=struct{}{};};_bgf :=make (map[*_ff .PdfObjectStream ]*imageInfo );for _ ,_acfd :=range _bedc {_bgf [_acfd .Stream ]=_acfd ;};var _aae *_ff .PdfObjectDictionary ;
for _ ,_dcfe :=range objects {if _dgd ,_agge :=_ff .GetDict (_dcfe );_aae ==nil &&_agge {if _bge ,_cbad :=_ff .GetName (_dgd .Get ("\u0054\u0079\u0070\u0065"));_cbad &&*_bge =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_aae =_dgd ;};};};if _aae ==nil {return objects ,nil ;
};_begf ,_eafa :=_ff .GetDict (_aae .Get ("\u0050\u0061\u0067e\u0073"));if !_eafa {return objects ,nil ;};_efg ,_fcg :=_ff .GetArray (_begf .Get ("\u004b\u0069\u0064\u0073"));if !_fcg {return objects ,nil ;};for _ ,_aca :=range _efg .Elements (){_edeg :=make (map[string ]*imageInfo );
_abd ,_fdd :=_ff .GetDict (_aca );if !_fdd {continue ;};_cfg ,_ :=_deda (_abd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_cfg )==0{continue ;};_gada ,_ceca :=_ff .GetDict (_abd .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_ceca {continue ;};_afa ,_eeeb :=_bf .NewPdfPageResourcesFromDict (_gada );if _eeeb !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_eeeb );
continue ;};_abdd ,_bcb :=_ff .GetDict (_gada .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_bcb {continue ;};_aaa :=_abdd .Keys ();for _ ,_cbgb :=range _aaa {if _edab ,_gfe :=_ff .GetStream (_abdd .Get (_cbgb ));_gfe {if _agff ,_faagd :=_bgf [_edab ];
_faagd {_edeg [string (_cbgb )]=_agff ;};};};_gcc :=_bb .NewContentStreamParser (_cfg );_cac ,_eeeb :=_gcc .Parse ();if _eeeb !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_eeeb );continue ;};_ceg :=_bb .NewContentStreamProcessor (*_cac );
_ceg .AddHandler (_bb .HandlerConditionEnumAllOperands ,"",func (_fbb *_bb .ContentStreamOperation ,_aaf _bb .GraphicsState ,_efge *_bf .PdfPageResources )error {switch _fbb .Operand {case "\u0044\u006f":if len (_fbb .Params )!=1{_c .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_dedc ,_bbcg :=_ff .GetName (_fbb .Params [0]);if !_bbcg {_c .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _bba ,_bebc :=_edeg [string (*_dedc )];_bebc {_cfa :=_aaf .CTM .ScalingFactorX ();_edaf :=_aaf .CTM .ScalingFactorY ();_ggbg ,_eac :=_cfa /72.0,_edaf /72.0;_bbce ,_fbbb :=float64 (_bba .Width )/_ggbg ,float64 (_bba .Height )/_eac ;if _ggbg ==0||_eac ==0{_bbce =72.0;
_fbbb =72.0;};_bba .PPI =_d .Max (_bba .PPI ,_bbce );_bba .PPI =_d .Max (_bba .PPI ,_fbbb );};};return nil ;});_eeeb =_ceg .Process (_afa );if _eeeb !=nil {_c .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_eeeb );
continue ;};};for _ ,_aab :=range _bedc {if _ ,_dadfg :=_bbg [_aab .Stream ];_dadfg {continue ;};if _aab .PPI <=_aeea .ImageUpperPPI {continue ;};_ccg ,_gced :=_bf .NewXObjectImageFromStream (_aab .Stream );if _gced !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gced );
continue ;};var _fae imageModifications ;_fae .Scale =_aeea .ImageUpperPPI /_aab .PPI ;if _aab .BitsPerComponent ==1&&_aab .ColorComponents ==1{_becd :=_d .Round (_aab .PPI /_aeea .ImageUpperPPI );_efag :=_b .NextPowerOf2 (uint (_becd ));if _b .InDelta (float64 (_efag ),1/_fae .Scale ,0.3){_fae .Scale =float64 (1)/float64 (_efag );
};if _ ,_acc :=_ccg .Filter .(*_ff .JBIG2Encoder );!_acc {_fae .Encoding =_ff .NewJBIG2Encoder ();};};if _gced =_bdcd (_ccg ,_fae );_gced !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_gced );
continue ;};_fae .Encoding =nil ;if _edg ,_aedb :=_ff .GetStream (_aab .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_aedb {_cea ,_bde :=_bf .NewXObjectImageFromStream (_edg );if _bde !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bde );
continue ;};if _bde =_bdcd (_cea ,_fae );_bde !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bde );continue ;};};};return objects ,nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};type objectStructure struct{_cfac *_ff .PdfObjectDictionary ;_aeg *_ff .PdfObjectDictionary ;_bgeg []*_ff .PdfIndirectObject ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_fbce :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_fbce .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_fbce .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_ffed :=new (ImagePPI );
_ffed .ImageUpperPPI =options .ImageUpperPPI ;_fbce .Append (_ffed );};if options .ImageQuality > 0{_cccb :=new (Image );_cccb .ImageQuality =options .ImageQuality ;_fbce .Append (_cccb );};if options .CombineDuplicateDirectObjects {_fbce .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_fbce .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_fbce .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_fbce .Append (new (ObjectStreams ));
};if options .CompressStreams {_fbce .Append (new (CompressStreams ));};return _fbce ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};type imageModifications struct{Scale float64 ;Encoding _ff .StreamEncoder ;};func _ed (_gc *_ff .PdfObjectStream )error {_ga ,_fed :=_ff .DecodeStream (_gc );if _fed !=nil {return _fed ;};_ag :=_bb .NewContentStreamParser (string (_ga ));
_af ,_fed :=_ag .Parse ();if _fed !=nil {return _fed ;};_af =_be (_af );_fgf :=_af .Bytes ();if len (_fgf )>=len (_ga ){return nil ;};_eg ,_fed :=_ff .MakeStream (_af .Bytes (),_ff .NewFlateEncoder ());if _fed !=nil {return _fed ;};_gc .Stream =_eg .Stream ;
_gc .Merge (_eg .PdfObjectDictionary );return nil ;};func _bdbe (_gcea []_ff .PdfObject )objectStructure {_beeg :=objectStructure {};_afbg :=false ;for _ ,_abdb :=range _gcea {switch _efbc :=_abdb .(type ){case *_ff .PdfIndirectObject :_gfef ,_ebf :=_ff .GetDict (_efbc );
if !_ebf {continue ;};_fbed ,_ebf :=_ff .GetName (_gfef .Get ("\u0054\u0079\u0070\u0065"));if !_ebf {continue ;};switch _fbed .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_beeg ._cfac =_gfef ;_afbg =true ;};};if _afbg {break ;};};if !_afbg {return _beeg ;
};_gcfb ,_dgbb :=_ff .GetDict (_beeg ._cfac .Get ("\u0050\u0061\u0067e\u0073"));if !_dgbb {return _beeg ;};_beeg ._aeg =_gcfb ;_decf ,_dgbb :=_ff .GetArray (_gcfb .Get ("\u004b\u0069\u0064\u0073"));if !_dgbb {return _beeg ;};for _ ,_fdc :=range _decf .Elements (){_fgb ,_dcef :=_ff .GetIndirect (_fdc );
if !_dcef {break ;};_beeg ._bgeg =append (_beeg ._bgeg ,_fgb );};return _beeg ;};func _be (_e *_bb .ContentStreamOperations )*_bb .ContentStreamOperations {if _e ==nil {return nil ;};_cc :=_bb .ContentStreamOperations {};for _ ,_dbc :=range *_e {switch _dbc .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_dbc .Params )==6{if _fe ,_bg :=_ff .GetNumbersAsFloat (_dbc .Params );_bg ==nil {if _fe [0]==1&&_fe [1]==0&&_fe [2]==0&&_fe [3]==1{_dbc =&_bb .ContentStreamOperation {Params :[]_ff .PdfObject {_dbc .Params [4],_dbc .Params [5]},Operand :"\u0054\u0064"};
};};};};_cc =append (_cc ,_dbc );};return &_cc ;};func _dec (_gfd *_ff .PdfObjectStream ,_gfab []rune ,_egb []_ged .GlyphIndex )error {_gfd ,_df :=_ff .GetStream (_gfd );if !_df {_c .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _gee .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cbg ,_cdg :=_ff .DecodeStream (_gfd );if _cdg !=nil {_c .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_cdg );
return _cdg ;};_dg ,_cdg :=_ged .Parse (_gf .NewReader (_cbg ));if _cdg !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_gfd .Stream ));
return _cdg ;};_ebc :=_egb ;if len (_gfab )> 0{_faae :=_dg .LookupRunes (_gfab );_ebc =append (_ebc ,_faae ...);};_dg ,_cdg =_dg .SubsetKeepIndices (_ebc );if _cdg !=nil {_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_cdg );
return _cdg ;};var _bbc _gf .Buffer ;_cdg =_dg .Write (&_bbc );if _cdg !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_cdg );return _cdg ;};if _bbc .Len ()> len (_cbg ){_c .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_bc ,_cdg :=_ff .MakeStream (_bbc .Bytes (),_ff .NewFlateEncoder ());if _cdg !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_cdg );return _cdg ;
};*_gfd =*_bc ;_gfd .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ff .MakeInteger (int64 (_bbc .Len ())));return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ebe *CleanFonts )Optimize (objects []_ff .PdfObject )(_cgd []_ff .PdfObject ,_ggg error ){var _ee map[*_ff .PdfObjectStream ]struct{};if _ebe .Subset {var _bce error ;_ee ,_bce =_cdb (objects );if _bce !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_bce );
return nil ,_bce ;};};for _ ,_ggb :=range objects {_fbf ,_gfc :=_ff .GetStream (_ggb );if !_gfc {continue ;};if _ ,_dea :=_ee [_fbf ];_dea {continue ;};_dde ,_beee :=_ff .NewEncoderFromStream (_fbf );if _beee !=nil {_c .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_beee );
continue ;};_eee ,_beee :=_dde .DecodeStream (_fbf );if _beee !=nil {_c .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_beee );
continue ;};if len (_eee )< 4{continue ;};_dgb :=string (_eee [:4]);if _dgb =="\u004f\u0054\u0054\u004f"{continue ;};if _dgb !="\u0000\u0001\u0000\u0000"&&_dgb !="\u0074\u0072\u0075\u0065"{continue ;};_cbe ,_beee :=_ged .Parse (_gf .NewReader (_eee ));
if _beee !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_beee );continue ;};_beee =_cbe .Optimize ();
if _beee !=nil {_c .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_beee );continue ;};var _beg _gf .Buffer ;_beee =_cbe .Write (&_beg );
if _beee !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_beee );continue ;};if _beg .Len ()> len (_eee ){_c .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_eeg ,_beee :=_ff .MakeStream (_beg .Bytes (),_ff .NewFlateEncoder ());if _beee !=nil {continue ;};*_fbf =*_eeg ;_fbf .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ff .MakeInteger (int64 (_beg .Len ())));};return objects ,nil ;};func _fdeb (_gcce []_ff .PdfObject ){for _bacf ,_cfag :=range _gcce {switch _cgde :=_cfag .(type ){case *_ff .PdfIndirectObject :_cgde .ObjectNumber =int64 (_bacf +1);
_cgde .GenerationNumber =0;case *_ff .PdfObjectStream :_cgde .ObjectNumber =int64 (_bacf +1);_cgde .GenerationNumber =0;case *_ff .PdfObjectStreams :_cgde .ObjectNumber =int64 (_bacf +1);_cgde .GenerationNumber =0;};};};