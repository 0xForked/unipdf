//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_fgd "bytes";_a "crypto/md5";_fa "errors";_df "fmt";_e "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/contentstream";_f "github.com/unidoc/unipdf/v3/core";_ab "github.com/unidoc/unipdf/v3/extractor";_dg "github.com/unidoc/unipdf/v3/internal/textencoding";_fb "github.com/unidoc/unipdf/v3/model";_abg "github.com/unidoc/unitype";_fg "golang.org/x/image/draw";_gg "image";_d "math";);func _feg (_fed []_f .PdfObject )(_gc map[*_f .PdfObjectStream ]struct{},_db error ){_gc =map[*_f .PdfObjectStream ]struct{}{};_aac :=map[*_fb .PdfFont ]struct{}{};_faab :=_effb (_fed );for _ ,_dfbg :=range _faab ._gdeb {_ccf ,_bae :=_f .GetDict (_dfbg .PdfObject );if !_bae {continue ;};_af ,_bae :=_f .GetDict (_ccf .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_bae {continue ;};_bda ,_ :=_ecab (_ccf .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_bcd ,_eff :=_fb .NewPdfPageResourcesFromDict (_af );if _eff !=nil {return nil ,_eff ;};_bbc :=[]content {{_fdg :_bda ,_ace :_bcd }};_cba :=_dbf (_ccf .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _cba !=nil {_bbc =append (_bbc ,_cba ...);};for _ ,_cbae :=range _bbc {_gd ,_gdc :=_ab .NewFromContents (_cbae ._fdg ,_cbae ._ace );if _gdc !=nil {return nil ,_gdc ;};_aae ,_ ,_ ,_gdc :=_gd .ExtractPageText ();if _gdc !=nil {return nil ,_gdc ;};for _ ,_bg :=range _aae .Marks ().Elements (){if _bg .Font ==nil {continue ;};if _ ,_cfb :=_aac [_bg .Font ];!_cfb {_aac [_bg .Font ]=struct{}{};};};};};_ad :=map[*_f .PdfObjectStream ][]*_fb .PdfFont {};for _gab :=range _aac {_cfe :=_gab .FontDescriptor ();if _cfe ==nil ||_cfe .FontFile2 ==nil {continue ;};_baeb ,_beb :=_f .GetStream (_cfe .FontFile2 );if !_beb {continue ;};_ad [_baeb ]=append (_ad [_baeb ],_gab );};for _fgee :=range _ad {var _gdf []rune ;var _baea []_abg .GlyphIndex ;for _ ,_gac :=range _ad [_fgee ]{switch _eba :=_gac .Encoder ().(type ){case *_dg .IdentityEncoder :_fege :=_eba .RegisteredRunes ();_efg :=make ([]_abg .GlyphIndex ,len (_fege ));for _fcb ,_fef :=range _fege {_efg [_fcb ]=_abg .GlyphIndex (_fef );};_baea =append (_baea ,_efg ...);case *_dg .TrueTypeFontEncoder :_eec :=_eba .RegisteredRunes ();_gdf =append (_gdf ,_eec ...);case _dg .SimpleEncoder :_gb :=_eba .Charcodes ();for _ ,_dgag :=range _gb {_ff ,_ada :=_eba .CharcodeToRune (_dgag );if !_ada {_e .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_dgag );continue ;};_gdf =append (_gdf ,_ff );};};};_db =_bba (_fgee ,_gdf ,_baea );if _db !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_db );return nil ,_db ;};_gc [_fgee ]=struct{}{};};return _gc ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gaa *ObjectStreams )Optimize (objects []_f .PdfObject )(_aecd []_f .PdfObject ,_aege error ){_adag :=&_f .PdfObjectStreams {};_affb :=make ([]_f .PdfObject ,0,len (objects ));for _ ,_bfef :=range objects {if _bce ,_gbbd :=_bfef .(*_f .PdfIndirectObject );_gbbd &&_bce .GenerationNumber ==0{_adag .Append (_bfef );}else {_affb =append (_affb ,_bfef );};};if _adag .Len ()==0{return _affb ,nil ;};_aecd =make ([]_f .PdfObject ,0,len (_affb )+_adag .Len ()+1);if _adag .Len ()> 1{_aecd =append (_aecd ,_adag );};_aecd =append (_aecd ,_adag .Elements ()...);_aecd =append (_aecd ,_affb ...);return _aecd ,nil ;};type content struct{_fdg string ;_ace *_fb .PdfPageResources ;};type objectStructure struct{_egg *_f .PdfObjectDictionary ;_gcgc *_f .PdfObjectDictionary ;_gdeb []*_f .PdfIndirectObject ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_abgg *ImagePPI )Optimize (objects []_f .PdfObject )(_efe []_f .PdfObject ,_daf error ){if _abgg .ImageUpperPPI <=0{return objects ,nil ;};_ggbc :=_beed (objects );if len (_ggbc )==0{return objects ,nil ;};_aaeg :=make (map[_f .PdfObject ]struct{});for _ ,_ecca :=range _ggbc {_fffa :=_ecca .Stream .PdfObjectDictionary .Get (_f .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_aaeg [_fffa ]=struct{}{};};_aceb :=make (map[*_f .PdfObjectStream ]*imageInfo );for _ ,_cfa :=range _ggbc {_aceb [_cfa .Stream ]=_cfa ;};var _geb *_f .PdfObjectDictionary ;for _ ,_afe :=range objects {if _fgb ,_aca :=_f .GetDict (_afe );_geb ==nil &&_aca {if _agdf ,_aedg :=_f .GetName (_fgb .Get (_f .PdfObjectName ("\u0054\u0079\u0070\u0065")));_aedg &&*_agdf =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_geb =_fgb ;};};};if _geb ==nil {return objects ,nil ;};_beff ,_cbc :=_f .GetDict (_geb .Get (_f .PdfObjectName ("\u0050\u0061\u0067e\u0073")));if !_cbc {return objects ,nil ;};_gebe ,_edgc :=_f .GetArray (_beff .Get (_f .PdfObjectName ("\u004b\u0069\u0064\u0073")));if !_edgc {return objects ,nil ;};_cbcg :=make (map[string ]*imageInfo );for _ ,_bca :=range _gebe .Elements (){_fdge ,_deb :=_f .GetDict (_bca );if !_deb {continue ;};_ccb ,_dbbc :=_f .GetArray (_fdge .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if !_dbbc {continue ;};_aebb ,_dafe :=_f .GetDict (_fdge .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_dafe {continue ;};_cgf ,_fcgb :=_f .GetDict (_aebb .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_fcgb {continue ;};_gfba :=_cgf .Keys ();for _ ,_eafb :=range _gfba {if _cfcb ,_cca :=_f .GetStream (_cgf .Get (_eafb ));_cca {if _eea ,_fbga :=_aceb [_cfcb ];_fbga {_cbcg [string (_eafb )]=_eea ;};};};for _ ,_abeb :=range _ccb .Elements (){if _agc ,_dcbe :=_f .GetStream (_abeb );_dcbe {_geg ,_gafe :=_f .NewEncoderFromStream (_agc );if _gafe !=nil {return nil ,_gafe ;};_fbce ,_gafe :=_geg .DecodeStream (_agc );if _gafe !=nil {return nil ,_gafe ;};_adcb :=_b .NewContentStreamParser (string (_fbce ));_fec ,_gafe :=_adcb .Parse ();if _gafe !=nil {return nil ,_gafe ;};_dgdd ,_aef :=1.0,1.0;for _ ,_ecgc :=range *_fec {if _ecgc .Operand =="\u0051"{_dgdd ,_aef =1.0,1.0;};if _ecgc .Operand =="\u0063\u006d"&&len (_ecgc .Params )==6{if _ecbg ,_acf :=_f .GetFloatVal (_ecgc .Params [0]);_acf {_dgdd =_dgdd *_ecbg ;};if _abdf ,_abf :=_f .GetFloatVal (_ecgc .Params [3]);_abf {_aef =_aef *_abdf ;};if _fgcg ,_egea :=_f .GetIntVal (_ecgc .Params [0]);_egea {_dgdd =_dgdd *float64 (_fgcg );};if _fecf ,_ebcb :=_f .GetIntVal (_ecgc .Params [3]);_ebcb {_aef =_aef *float64 (_fecf );};};if _ecgc .Operand =="\u0044\u006f"&&len (_ecgc .Params )==1{_ecac ,_bffc :=_f .GetName (_ecgc .Params [0]);if !_bffc {continue ;};if _edd ,_fga :=_cbcg [string (*_ecac )];_fga {_bffg ,_bfad :=_dgdd /72.0,_aef /72.0;_ccd ,_dee :=float64 (_edd .Width )/_bffg ,float64 (_edd .Height )/_bfad ;if _bffg ==0||_bfad ==0{_ccd =72.0;_dee =72.0;};_edd .PPI =_d .Max (_edd .PPI ,_ccd );_edd .PPI =_d .Max (_edd .PPI ,_dee );};};};};};};for _ ,_cdc :=range _ggbc {if _ ,_gdgc :=_aaeg [_cdc .Stream ];_gdgc {continue ;};if _cdc .PPI <=_abgg .ImageUpperPPI {continue ;};_cdedd :=_abgg .ImageUpperPPI /_cdc .PPI ;if _cbg :=_bbg (_cdc .Stream ,_cdedd );_cbg !=nil {_e .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_cbg );}else {if _acgf ,_agcg :=_f .GetStream (_cdc .Stream .PdfObjectDictionary .Get (_f .PdfObjectName ("\u0053\u004d\u0061s\u006b")));_agcg {if _gad :=_bbg (_acgf ,_cdedd );_gad !=nil {return nil ,_gad ;};};};};return objects ,nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fbc *Image )Optimize (objects []_f .PdfObject )(_ffb []_f .PdfObject ,_gcf error ){if _fbc .ImageQuality <=0{return objects ,nil ;};_bfa :=_beed (objects );if len (_bfa )==0{return objects ,nil ;};_cff :=make (map[_f .PdfObject ]_f .PdfObject );_daeb :=make (map[_f .PdfObject ]struct{});for _ ,_adeg :=range _bfa {_cee :=_adeg .Stream .PdfObjectDictionary .Get (_f .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_daeb [_cee ]=struct{}{};};for _bbfd ,_fad :=range _bfa {_fea :=_fad .Stream ;if _ ,_dfd :=_daeb [_fea ];_dfd {continue ;};_ddbb ,_ggb :=_f .NewEncoderFromStream (_fea );if _ggb !=nil {_e .Log .Warning ("\u0045\u0072\u0072\u006f\u0072 \u0067\u0065\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_aagc ,_ggb :=_ddbb .DecodeStream (_fea );if _ggb !=nil {_e .Log .Warning ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0074\u0068e\u0020i\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_dbbg :=_f .NewDCTEncoder ();_dbbg .ColorComponents =_fad .ColorComponents ;_dbbg .Quality =_fbc .ImageQuality ;_dbbg .BitsPerComponent =_fad .BitsPerComponent ;_dbbg .Width =_fad .Width ;_dbbg .Height =_fad .Height ;_cfc ,_ggb :=_dbbg .EncodeBytes (_aagc );if _ggb !=nil {_e .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_ggb );return nil ,_ggb ;};var _gfc _f .StreamEncoder ;_gfc =_dbbg ;{_eedb :=_f .NewFlateEncoder ();_bab :=_f .NewMultiEncoder ();_bab .AddEncoder (_eedb );_bab .AddEncoder (_dbbg );_ddagb ,_fgca :=_bab .EncodeBytes (_aagc );if _fgca !=nil {return nil ,_fgca ;};if len (_ddagb )< len (_cfc ){_e .Log .Debug ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_cfc ),len (_ddagb ),len (_fea .Stream ));_cfc =_ddagb ;_gfc =_bab ;};};_egcg :=len (_fea .Stream );if _egcg < len (_cfc ){continue ;};_ggdd :=&_f .PdfObjectStream {Stream :_cfc };_ggdd .PdfObjectReference =_fea .PdfObjectReference ;_ggdd .PdfObjectDictionary =_f .MakeDict ();_ggdd .Merge (_fea .PdfObjectDictionary );_ggdd .Merge (_gfc .MakeStreamDict ());_ggdd .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_f .MakeInteger (int64 (len (_cfc ))));_cff [_fea ]=_ggdd ;_bfa [_bbfd ].Stream =_ggdd ;};_ffb =make ([]_f .PdfObject ,len (objects ));copy (_ffb ,objects );_bga (_ffb ,_cff );return _ffb ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ebag *CleanFonts )Optimize (objects []_f .PdfObject )(_add []_f .PdfObject ,_ddb error ){var _aeb map[*_f .PdfObjectStream ]struct{};if _ebag .Subset {var _aff error ;_aeb ,_aff =_feg (objects );if _aff !=nil {return nil ,_aff ;};};for _ ,_ddd :=range objects {_bdag ,_ffc :=_f .GetStream (_ddd );if !_ffc {continue ;};if _ ,_faac :=_aeb [_bdag ];_faac {continue ;};_edf ,_dcdf :=_f .NewEncoderFromStream (_bdag );if _dcdf !=nil {_e .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_dcdf );continue ;};_dcb ,_dcdf :=_edf .DecodeStream (_bdag );if _dcdf !=nil {_e .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_dcdf );continue ;};if len (_dcb )< 4{continue ;};_cab :=string (_dcb [:4]);if _cab =="\u004f\u0054\u0054\u004f"{continue ;};if _cab !="\u0000\u0001\u0000\u0000"&&_cab !="\u0074\u0072\u0075\u0065"{continue ;};_dgga ,_dcdf :=_abg .Parse (_fgd .NewReader (_dcb ));if _dcdf !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dcdf );continue ;};_dcdf =_dgga .Optimize ();if _dcdf !=nil {continue ;};var _dggc _fgd .Buffer ;_dcdf =_dgga .Write (&_dggc );if _dcdf !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dcdf );continue ;};if _dggc .Len ()> len (_dcb ){_e .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");continue ;};_gbg ,_dcdf :=_f .MakeStream (_dggc .Bytes (),_f .NewFlateEncoder ());if _dcdf !=nil {continue ;};*_bdag =*_gbg ;_bdag .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_f .MakeInteger (int64 (_dggc .Len ())));};return objects ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};func _bbg (_gdg *_f .PdfObjectStream ,_afff float64 )error {_bbfa ,_ddaf :=_fb .NewXObjectImageFromStream (_gdg );if _ddaf !=nil {return _ddaf ;};_gbb ,_ddaf :=_bbfa .ToImage ();if _ddaf !=nil {return _ddaf ;};_dec ,_ddaf :=_gbb .ToGoImage ();if _ddaf !=nil {return _ddaf ;};_fcbd :=int (_d .RoundToEven (float64 (_gbb .Width )*_afff ));_gaf :=int (_d .RoundToEven (float64 (_gbb .Height )*_afff ));_edff :=_gg .Rect (0,0,_fcbd ,_gaf );var _fag _fg .Image ;var _ccff func (_gg .Image )(*_fb .Image ,error );switch _bbfa .ColorSpace .String (){case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_fag =_gg .NewRGBA (_edff );_ccff =_fb .ImageHandling .NewImageFromGoImage ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_fag =_gg .NewGray (_edff );_ccff =_fb .ImageHandling .NewGrayImageFromGoImage ;default:return _df .Errorf ("\u006f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_bbfa .ColorSpace .String ());};_fg .CatmullRom .Scale (_fag ,_fag .Bounds (),_dec ,_dec .Bounds (),_fg .Over ,&_fg .Options {});if _gbb ,_ddaf =_ccff (_fag );_ddaf !=nil {return _ddaf ;};_ccgb :=_f .MakeDict ();_ccgb .Set ("\u0051u\u0061\u006c\u0069\u0074\u0079",_f .MakeInteger (100));_ccgb .Set ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr",_f .MakeInteger (1));_bbfa .Filter .UpdateParams (_ccgb );if _ddaf =_bbfa .SetImage (_gbb ,nil );_ddaf !=nil {return _ddaf ;};_bbfa .ToPdfObject ();return nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};func _effb (_edc []_f .PdfObject )objectStructure {_deg :=objectStructure {};_cdg :=false ;for _ ,_cgfd :=range _edc {switch _cdda :=_cgfd .(type ){case *_f .PdfIndirectObject :_dbcb ,_ddgc :=_f .GetDict (_cdda );if !_ddgc {continue ;};_gdeg ,_ddgc :=_f .GetName (_dbcb .Get ("\u0054\u0079\u0070\u0065"));if !_ddgc {continue ;};switch _gdeg .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_deg ._egg =_dbcb ;_cdg =true ;};};if _cdg {break ;};};if !_cdg {return _deg ;};_cddc ,_gded :=_f .GetDict (_deg ._egg .Get ("\u0050\u0061\u0067e\u0073"));if !_gded {return _deg ;};_deg ._gcgc =_cddc ;_cda ,_gded :=_f .GetArray (_cddc .Get ("\u004b\u0069\u0064\u0073"));if !_gded {return _deg ;};for _ ,_cea :=range _cda .Elements (){_beea ,_agb :=_f .GetIndirect (_cea );if !_agb {break ;};_deg ._gdeb =append (_deg ._gdeb ,_beea );};return _deg ;};func _ecbca (_fda []_f .PdfObject ){for _ged ,_cagg :=range _fda {switch _ddgg :=_cagg .(type ){case *_f .PdfIndirectObject :_ddgg .ObjectNumber =int64 (_ged +1);_ddgg .GenerationNumber =0;case *_f .PdfObjectStream :_ddgg .ObjectNumber =int64 (_ged +1);_ddgg .GenerationNumber =0;case *_f .PdfObjectStreams :_ddgg .ObjectNumber =int64 (_ged +1);_ddgg .GenerationNumber =0;};};};func _eg (_fgdb *_f .PdfObjectStream )error {_ege ,_cc :=_f .DecodeStream (_fgdb );if _cc !=nil {return _cc ;};_eb :=_b .NewContentStreamParser (string (_ege ));_ca ,_cc :=_eb .Parse ();if _cc !=nil {return _cc ;};_ca =_ag (_ca );_caf :=_ca .Bytes ();if len (_caf )>=len (_ege ){return nil ;};_dda ,_cc :=_f .MakeStream (_ca .Bytes (),_f .NewFlateEncoder ());if _cc !=nil {return _cc ;};_fgdb .Stream =_dda .Stream ;_fgdb .Merge (_dda .PdfObjectDictionary );return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ade *CompressStreams )Optimize (objects []_f .PdfObject )(_eaf []_f .PdfObject ,_cgd error ){_eaf =make ([]_f .PdfObject ,len (objects ));copy (_eaf ,objects );for _ ,_eca :=range objects {_ffcb ,_ggd :=_f .GetStream (_eca );if !_ggd {continue ;};if _dae :=_ffcb .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_dae !=nil {if _ ,_ddac :=_f .GetName (_dae );_ddac {continue ;};if _cdd ,_bgd :=_f .GetArray (_dae );_bgd &&_cdd .Len ()> 0{continue ;};};_gabd :=_f .NewFlateEncoder ();var _fcf []byte ;_fcf ,_cgd =_gabd .EncodeBytes (_ffcb .Stream );if _cgd !=nil {return _eaf ,_cgd ;};_bff :=_gabd .MakeStreamDict ();if len (_fcf )+len (_bff .WriteString ())< len (_ffcb .Stream ){_ffcb .Stream =_fcf ;_ffcb .PdfObjectDictionary .Merge (_bff );_ffcb .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_f .MakeInteger (int64 (len (_ffcb .Stream ))));};};return _eaf ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gabf *CombineIdenticalIndirectObjects )Optimize (objects []_f .PdfObject )(_cbbe []_f .PdfObject ,_gcce error ){_ecbca (objects );_gfb :=make (map[_f .PdfObject ]_f .PdfObject );_bge :=make (map[_f .PdfObject ]struct{});_ecc :=make (map[string ][]*_f .PdfIndirectObject );for _ ,_fce :=range objects {_ccfa ,_cac :=_fce .(*_f .PdfIndirectObject );if !_cac {continue ;};if _adcd ,_gfe :=_ccfa .PdfObject .(*_f .PdfObjectDictionary );_gfe {if _bfgg ,_ggg :=_adcd .Get ("\u0054\u0079\u0070\u0065").(*_f .PdfObjectName );_ggg &&*_bfgg =="\u0050\u0061\u0067\u0065"{continue ;};_edg :=_a .New ();_edg .Write ([]byte (_adcd .WriteString ()));_ea :=string (_edg .Sum (nil ));_ecc [_ea ]=append (_ecc [_ea ],_ccfa );};};for _ ,_cbbg :=range _ecc {if len (_cbbg )< 2{continue ;};_dea :=_cbbg [0];for _cg :=1;_cg < len (_cbbg );_cg ++{_fceb :=_cbbg [_cg ];_gfb [_fceb ]=_dea ;_bge [_fceb ]=struct{}{};};};_cbbe =make ([]_f .PdfObject ,0,len (objects )-len (_bge ));for _ ,_bgc :=range objects {if _ ,_gbf :=_bge [_bgc ];_gbf {continue ;};_cbbe =append (_cbbe ,_bgc );};_bga (_cbbe ,_gfb );return _cbbe ,nil ;};func _ag (_gga *_b .ContentStreamOperations )*_b .ContentStreamOperations {if _gga ==nil {return nil ;};_ba :=_b .ContentStreamOperations {};for _ ,_bd :=range *_gga {switch _bd .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_bd .Params )==6{if _ga ,_aba :=_f .GetNumbersAsFloat (_bd .Params );_aba ==nil {if _ga [0]==1&&_ga [1]==0&&_ga [2]==0&&_ga [3]==1{_bd =&_b .ContentStreamOperation {Params :[]_f .PdfObject {_bd .Params [4],_bd .Params [5]},Operand :"\u0054\u0064"};};};};};_ba =append (_ba ,_bd );};return &_ba ;};

// Append appends optimizers to the chain.
func (_dd *Chain )Append (optimizers ..._fb .Optimizer ){_dd ._c =append (_dd ._c ,optimizers ...)};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aedc *CombineDuplicateStreams )Optimize (objects []_f .PdfObject )(_ceb []_f .PdfObject ,_cded error ){_dfc :=make (map[_f .PdfObject ]_f .PdfObject );_cag :=make (map[_f .PdfObject ]struct{});_efa :=make (map[string ][]*_f .PdfObjectStream );for _ ,_dcda :=range objects {if _fgf ,_gfg :=_dcda .(*_f .PdfObjectStream );_gfg {_fde :=_a .New ();_fde .Write ([]byte (_fgf .Stream ));_daa :=string (_fde .Sum (nil ));_efa [_daa ]=append (_efa [_daa ],_fgf );};};for _ ,_aacg :=range _efa {if len (_aacg )< 2{continue ;};_gcd :=_aacg [0];for _ecg :=1;_ecg < len (_aacg );_ecg ++{_ccc :=_aacg [_ecg ];_dfc [_ccc ]=_gcd ;_cag [_ccc ]=struct{}{};};};_ceb =make ([]_f .PdfObject ,0,len (objects )-len (_cag ));for _ ,_efd :=range objects {if _ ,_gbe :=_cag [_efd ];_gbe {continue ;};_ceb =append (_ceb ,_efd );};_bga (_ceb ,_dfc );return _ceb ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_c []_fb .Optimizer };func _beed (_cge []_f .PdfObject )[]*imageInfo {_ddag :=_f .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_gge :=make (map[*_f .PdfObjectStream ]struct{});var _bbf error ;var _def []*imageInfo ;for _ ,_aeg :=range _cge {_ecbc ,_bfe :=_f .GetStream (_aeg );if !_bfe {continue ;};if _ ,_fdb :=_gge [_ecbc ];_fdb {continue ;};_gge [_ecbc ]=struct{}{};_agd :=_ecbc .PdfObjectDictionary .Get (_ddag );_abd ,_bfe :=_f .GetName (_agd );if !_bfe ||string (*_abd )!="\u0049\u006d\u0061g\u0065"{continue ;};_bgcg :=&imageInfo {BitsPerComponent :8,Stream :_ecbc };if _bgcg .ColorSpace ,_bbf =_fb .DetermineColorspaceNameFromPdfObject (_ecbc .PdfObjectDictionary .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));_bbf !=nil {_e .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0073",_bbf );continue ;};if _gee ,_cdb :=_f .GetIntVal (_ecbc .PdfObjectDictionary .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_cdb {_bgcg .BitsPerComponent =_gee ;};if _ccg ,_cbaec :=_f .GetIntVal (_ecbc .PdfObjectDictionary .Get ("\u0057\u0069\u0064t\u0068"));_cbaec {_bgcg .Width =_ccg ;};if _dbgc ,_adcg :=_f .GetIntVal (_ecbc .PdfObjectDictionary .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_adcg {_bgcg .Height =_dbgc ;};switch _bgcg .ColorSpace {case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_bgcg .ColorComponents =3;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_bgcg .ColorComponents =1;default:_e .Log .Warning ("\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_bgcg .ColorSpace );continue ;};_def =append (_def ,_bgcg );};return _def ;};func _bga (_dgae []_f .PdfObject ,_fca map[_f .PdfObject ]_f .PdfObject ){if _fca ==nil ||len (_fca )==0{return ;};for _dac ,_agg :=range _dgae {if _abc ,_fbgfa :=_fca [_agg ];_fbgfa {_dgae [_dac ]=_abc ;continue ;};_fca [_agg ]=_agg ;switch _adbc :=_agg .(type ){case *_f .PdfObjectArray :_fffd :=make ([]_f .PdfObject ,_adbc .Len ());copy (_fffd ,_adbc .Elements ());_bga (_fffd ,_fca );for _ceed ,_bgag :=range _fffd {_adbc .Set (_ceed ,_bgag );};case *_f .PdfObjectStreams :_bga (_adbc .Elements (),_fca );case *_f .PdfObjectStream :_bfeb :=[]_f .PdfObject {_adbc .PdfObjectDictionary };_bga (_bfeb ,_fca );_adbc .PdfObjectDictionary =_bfeb [0].(*_f .PdfObjectDictionary );case *_f .PdfObjectDictionary :_gef :=_adbc .Keys ();_bdd :=make ([]_f .PdfObject ,len (_gef ));for _dbgb ,_ebcba :=range _gef {_bdd [_dbgb ]=_adbc .Get (_ebcba );};_bga (_bdd ,_fca );for _ecd ,_dbfe :=range _gef {_adbc .Set (_dbfe ,_bdd [_ecd ]);};case *_f .PdfIndirectObject :_gbag :=[]_f .PdfObject {_adbc .PdfObject };_bga (_gbag ,_fca );_adbc .PdfObject =_gbag [0];};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_be *Chain )Optimize (objects []_f .PdfObject )(_gf []_f .PdfObject ,_bf error ){_gf =objects ;for _ ,_fc :=range _be ._c {_gf ,_bf =_fc .Optimize (_gf );if _bf !=nil {return _gf ,_bf ;};};return _gf ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _dbf (_bdgc _f .PdfObject )[]content {if _bdgc ==nil {return nil ;};_aaca ,_ebc :=_f .GetArray (_bdgc );if !_ebc {_e .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _adc []content ;for _ ,_aec :=range _aaca .Elements (){_befa ,_fae :=_f .GetDict (_aec );if !_fae {_e .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_cce ,_fae :=_f .GetDict (_befa .Get ("\u0041\u0050"));if !_fae {_e .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_ce :=_f .TraceToDirectObject (_cce .Get ("\u004e"));if _ce ==nil {_e .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _aab *_f .PdfObjectStream ;switch _gcc :=_ce .(type ){case *_f .PdfObjectDictionary :_aad ,_fdfd :=_f .GetName (_befa .Get ("\u0041\u0053"));if !_fdfd {_e .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_aab ,_fdfd =_f .GetStream (_gcc .Get (*_aad ));if !_fdfd {_e .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_f .PdfObjectStream :_aab =_gcc ;};if _aab ==nil {_e .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_aaa ,_gce :=_fb .NewXObjectFormFromStream (_aab );if _gce !=nil {_e .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_gce );continue ;};_abee ,_gce :=_aaa .GetContentStream ();if _gce !=nil {_e .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_gce );continue ;};_adc =append (_adc ,content {_fdg :string (_abee ),_ace :_aaa .Resources });};return _adc ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_fgfd :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_fgfd .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_fgfd .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_cged :=new (ImagePPI );_cged .ImageUpperPPI =options .ImageUpperPPI ;_fgfd .Append (_cged );};if options .ImageQuality > 0{_dcbeb :=new (Image );_dcbeb .ImageQuality =options .ImageQuality ;_fgfd .Append (_dcbeb );};if options .CombineDuplicateDirectObjects {_fgfd .Append (new (CombineDuplicateDirectObjects ));};if options .CombineDuplicateStreams {_fgfd .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_fgfd .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_fgfd .Append (new (ObjectStreams ));};if options .CompressStreams {_fgfd .Append (new (CompressStreams ));};return _fgfd ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fgc *CleanContentstream )Optimize (objects []_f .PdfObject )(_bb []_f .PdfObject ,_fcg error ){_dc :=map[*_f .PdfObjectStream ]struct{}{};var _ebd []*_f .PdfObjectStream ;_dga :=func (_ef *_f .PdfObjectStream ){if _ ,_aa :=_dc [_ef ];!_aa {_dc [_ef ]=struct{}{};_ebd =append (_ebd ,_ef );};};for _ ,_ee :=range objects {switch _cd :=_ee .(type ){case *_f .PdfIndirectObject :switch _fd :=_cd .PdfObject .(type ){case *_f .PdfObjectDictionary :if _dcd ,_faa :=_f .GetName (_fd .Get ("\u0054\u0079\u0070\u0065"));!_faa ||_dcd .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _ae ,_egb :=_f .GetStream (_fd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_egb {_dga (_ae );}else if _dfb ,_ge :=_f .GetArray (_fd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ge {for _ ,_ed :=range _dfb .Elements (){if _fe ,_cbb :=_f .GetStream (_ed );_cbb {_dga (_fe );};};};};case *_f .PdfObjectStream :if _cf ,_bee :=_f .GetName (_cd .Get ("\u0054\u0079\u0070\u0065"));!_bee ||_cf .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _bc ,_aed :=_f .GetName (_cd .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));!_aed ||_bc .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_dga (_cd );};};for _ ,_aag :=range _ebd {_fcg =_eg (_aag );if _fcg !=nil {return nil ,_fcg ;};};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bdf *CombineDuplicateDirectObjects )Optimize (objects []_f .PdfObject )(_ggac []_f .PdfObject ,_bcg error ){_ecbca (objects );_gfa :=make (map[string ][]*_f .PdfObjectDictionary );var _ffa func (_cde *_f .PdfObjectDictionary );_ffa =func (_ddg *_f .PdfObjectDictionary ){for _ ,_fff :=range _ddg .Keys (){_dgad :=_ddg .Get (_fff );if _beg ,_dddg :=_dgad .(*_f .PdfObjectDictionary );_dddg {_ddec :=_a .New ();_ddec .Write ([]byte (_beg .WriteString ()));_fbd :=string (_ddec .Sum (nil ));_gfa [_fbd ]=append (_gfa [_fbd ],_beg );_ffa (_beg );};};};for _ ,_bbb :=range objects {_eeg ,_bde :=_bbb .(*_f .PdfIndirectObject );if !_bde {continue ;};if _fbgf ,_de :=_eeg .PdfObject .(*_f .PdfObjectDictionary );_de {_ffa (_fbgf );};};_fac :=make ([]_f .PdfObject ,0,len (_gfa ));_bfg :=make (map[_f .PdfObject ]_f .PdfObject );for _ ,_da :=range _gfa {if len (_da )< 2{continue ;};_fbf :=_f .MakeDict ();_fbf .Merge (_da [0]);_bbd :=_f .MakeIndirectObject (_fbf );_fac =append (_fac ,_bbd );for _ecb :=0;_ecb < len (_da );_ecb ++{_caa :=_da [_ecb ];_bfg [_caa ]=_bbd ;};};_ggac =make ([]_f .PdfObject ,len (objects ));copy (_ggac ,objects );_ggac =append (_fac ,_ggac ...);_bga (_ggac ,_bfg );return _ggac ,nil ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _bba (_gba *_f .PdfObjectStream ,_dbb []rune ,_ec []_abg .GlyphIndex )error {_gba ,_ecf :=_f .GetStream (_gba );if !_ecf {_e .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");return _fa .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_aee ,_cae :=_f .DecodeStream (_gba );if _cae !=nil {_e .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_cae );return _cae ;};_acc ,_cae :=_abg .Parse (_fgd .NewReader (_aee ));if _cae !=nil {_e .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_gba .Stream ));return _cae ;};_gde :=_ec ;if len (_dbb )> 0{_bdg :=_acc .LookupRunes (_dbb );_gde =append (_gde ,_bdg ...);};_acc ,_cae =_acc .SubsetKeepIndices (_gde );if _cae !=nil {_e .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_cae );return _cae ;};var _fegf _fgd .Buffer ;_cae =_acc .Write (&_fegf );if _cae !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_cae );return _cae ;};if _fegf .Len ()> len (_aee ){_e .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");return nil ;};_dgg ,_cae :=_f .MakeStream (_fegf .Bytes (),_f .NewFlateEncoder ());if _cae !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_cae );return _cae ;};*_gba =*_dgg ;_gba .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_f .MakeInteger (int64 (_fegf .Len ())));return nil ;};func _ecab (_effba _f .PdfObject )(_eab string ,_feaa []_f .PdfObject ){var _egf _fgd .Buffer ;switch _cfd :=_effba .(type ){case *_f .PdfIndirectObject :_feaa =append (_feaa ,_cfd );_effba =_cfd .PdfObject ;};switch _gadf :=_effba .(type ){case *_f .PdfObjectStream :if _bed ,_ded :=_f .DecodeStream (_gadf );_ded ==nil {_egf .Write (_bed );_feaa =append (_feaa ,_gadf );};case *_f .PdfObjectArray :for _ ,_fcd :=range _gadf .Elements (){switch _cfde :=_fcd .(type ){case *_f .PdfObjectStream :if _dge ,_ggeg :=_f .DecodeStream (_cfde );_ggeg ==nil {_egf .Write (_dge );_feaa =append (_feaa ,_cfde );};};};};return _egf .String (),_feaa ;};type imageInfo struct{ColorSpace _f .PdfObjectName ;BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_f .PdfObjectStream ;PPI float64 ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};