//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_gd "bytes";_b "crypto/md5";_ca "errors";_g "github.com/unidoc/unipdf/v3/common";_fe "github.com/unidoc/unipdf/v3/contentstream";_cb "github.com/unidoc/unipdf/v3/core";_ed "github.com/unidoc/unipdf/v3/extractor";_ee "github.com/unidoc/unipdf/v3/internal/imageutil";
_ae "github.com/unidoc/unipdf/v3/internal/textencoding";_eb "github.com/unidoc/unipdf/v3/model";_f "github.com/unidoc/unitype";_e "golang.org/x/image/draw";_a "math";);

// Optimize optimizes PDF objects to decrease PDF size.
func (_afb *CombineIdenticalIndirectObjects )Optimize (objects []_cb .PdfObject )(_cbb []_cb .PdfObject ,_eag error ){_edc (objects );_cbegf :=make (map[_cb .PdfObject ]_cb .PdfObject );_egce :=make (map[_cb .PdfObject ]struct{});_agd :=make (map[string ][]*_cb .PdfIndirectObject );
for _ ,_bfe :=range objects {_fdeg ,_gcf :=_bfe .(*_cb .PdfIndirectObject );if !_gcf {continue ;};if _bde ,_bad :=_fdeg .PdfObject .(*_cb .PdfObjectDictionary );_bad {if _debb ,_fae :=_bde .Get ("\u0054\u0079\u0070\u0065").(*_cb .PdfObjectName );_fae &&*_debb =="\u0050\u0061\u0067\u0065"{continue ;
};_gde :=_b .New ();_gde .Write ([]byte (_bde .WriteString ()));_gbf :=string (_gde .Sum (nil ));_agd [_gbf ]=append (_agd [_gbf ],_fdeg );};};for _ ,_faa :=range _agd {if len (_faa )< 2{continue ;};_fac :=_faa [0];for _gbag :=1;_gbag < len (_faa );_gbag ++{_dcc :=_faa [_gbag ];
_cbegf [_dcc ]=_fac ;_egce [_dcc ]=struct{}{};};};_cbb =make ([]_cb .PdfObject ,0,len (objects )-len (_egce ));for _ ,_fab :=range objects {if _ ,_gda :=_egce [_fab ];_gda {continue ;};_cbb =append (_cbb ,_fab );};_aeb (_cbb ,_cbegf );return _cbb ,nil ;
};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};func _ff (_cbe []_cb .PdfObject )(_dd map[*_cb .PdfObjectStream ]struct{},_edf error ){_dd =map[*_cb .PdfObjectStream ]struct{}{};_af :=map[*_eb .PdfFont ]struct{}{};_cce :=_adc (_cbe );for _ ,_cee :=range _cce ._cff {_dbb ,_ggg :=_cb .GetDict (_cee .PdfObject );
if !_ggg {continue ;};_ceed ,_ggg :=_cb .GetDict (_dbb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_ggg {continue ;};_acc ,_ :=_bbc (_dbb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_cf ,_fa :=_eb .NewPdfPageResourcesFromDict (_ceed );
if _fa !=nil {return nil ,_fa ;};_bca :=[]content {{_bfg :_acc ,_bgc :_cf }};_ddg :=_agb (_dbb .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _ddg !=nil {_bca =append (_bca ,_ddg ...);};for _ ,_cbdf :=range _bca {_afc ,_eab :=_ed .NewFromContents (_cbdf ._bfg ,_cbdf ._bgc );
if _eab !=nil {return nil ,_eab ;};_edfc ,_ ,_ ,_eab :=_afc .ExtractPageText ();if _eab !=nil {return nil ,_eab ;};for _ ,_eaf :=range _edfc .Marks ().Elements (){if _eaf .Font ==nil {continue ;};if _ ,_gggb :=_af [_eaf .Font ];!_gggb {_af [_eaf .Font ]=struct{}{};
};};};};_ffg :=map[*_cb .PdfObjectStream ][]*_eb .PdfFont {};for _fff :=range _af {_bae :=_fff .FontDescriptor ();if _bae ==nil ||_bae .FontFile2 ==nil {continue ;};_ffb ,_geb :=_cb .GetStream (_bae .FontFile2 );if !_geb {continue ;};_ffg [_ffb ]=append (_ffg [_ffb ],_fff );
};for _bef :=range _ffg {var _dgfa []rune ;var _eec []_f .GlyphIndex ;for _ ,_ad :=range _ffg [_bef ]{switch _gfdd :=_ad .Encoder ().(type ){case *_ae .IdentityEncoder :_gebe :=_gfdd .RegisteredRunes ();_ccb :=make ([]_f .GlyphIndex ,len (_gebe ));for _cgf ,_gdbe :=range _gebe {_ccb [_cgf ]=_f .GlyphIndex (_gdbe );
};_eec =append (_eec ,_ccb ...);case *_ae .TrueTypeFontEncoder :_eaa :=_gfdd .RegisteredRunes ();_dgfa =append (_dgfa ,_eaa ...);case _ae .SimpleEncoder :_fef :=_gfdd .Charcodes ();for _ ,_aee :=range _fef {_egf ,_eafe :=_gfdd .CharcodeToRune (_aee );if !_eafe {_g .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_aee );
continue ;};_dgfa =append (_dgfa ,_egf );};};};_edf =_fd (_bef ,_dgfa ,_eec );if _edf !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_edf );
return nil ,_edf ;};_dd [_bef ]=struct{}{};};return _dd ,nil ;};func _fd (_ggf *_cb .PdfObjectStream ,_bccd []rune ,_dde []_f .GlyphIndex )error {_ggf ,_feb :=_cb .GetStream (_ggf );if !_feb {_g .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _ca .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_fde ,_dcb :=_cb .DecodeStream (_ggf );if _dcb !=nil {_g .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_dcb );
return _dcb ;};_cbeg ,_dcb :=_f .Parse (_gd .NewReader (_fde ));if _dcb !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_ggf .Stream ));
return _dcb ;};_cbdg :=_dde ;if len (_bccd )> 0{_daea :=_cbeg .LookupRunes (_bccd );_cbdg =append (_cbdg ,_daea ...);};_cbeg ,_dcb =_cbeg .SubsetKeepIndices (_cbdg );if _dcb !=nil {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_dcb );
return _dcb ;};var _eda _gd .Buffer ;_dcb =_cbeg .Write (&_eda );if _dcb !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_dcb );return _dcb ;};if _eda .Len ()> len (_fde ){_g .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_egdc ,_dcb :=_cb .MakeStream (_eda .Bytes (),_cb .NewFlateEncoder ());if _dcb !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_dcb );return _dcb ;
};*_ggf =*_egdc ;_ggf .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_cb .MakeInteger (int64 (_eda .Len ())));return nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_agee *CleanFonts )Optimize (objects []_cb .PdfObject )(_dgg []_cb .PdfObject ,_dbc error ){var _cfd map[*_cb .PdfObjectStream ]struct{};if _agee .Subset {var _cfdd error ;_cfd ,_cfdd =_ff (objects );if _cfdd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_cfdd );
return nil ,_cfdd ;};};for _ ,_afa :=range objects {_aga ,_bgf :=_cb .GetStream (_afa );if !_bgf {continue ;};if _ ,_gge :=_cfd [_aga ];_gge {continue ;};_caa ,_dca :=_cb .NewEncoderFromStream (_aga );if _dca !=nil {_g .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_dca );
continue ;};_bgae ,_dca :=_caa .DecodeStream (_aga );if _dca !=nil {_g .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_dca );
continue ;};if len (_bgae )< 4{continue ;};_bfd :=string (_bgae [:4]);if _bfd =="\u004f\u0054\u0054\u004f"{continue ;};if _bfd !="\u0000\u0001\u0000\u0000"&&_bfd !="\u0074\u0072\u0075\u0065"{continue ;};_ec ,_dca :=_f .Parse (_gd .NewReader (_bgae ));if _dca !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dca );
continue ;};_dca =_ec .Optimize ();if _dca !=nil {_g .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_dca );continue ;};var _cgg _gd .Buffer ;
_dca =_ec .Write (&_cgg );if _dca !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dca );continue ;
};if _cgg .Len ()> len (_bgae ){_g .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_aff ,_dca :=_cb .MakeStream (_cgg .Bytes (),_cb .NewFlateEncoder ());if _dca !=nil {continue ;};*_aga =*_aff ;_aga .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_cb .MakeInteger (int64 (_cgg .Len ())));};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dc *CleanContentstream )Optimize (objects []_cb .PdfObject )(_gfd []_cb .PdfObject ,_ce error ){_gae :=map[*_cb .PdfObjectStream ]struct{}{};var _bg []*_cb .PdfObjectStream ;_eee :=func (_eae *_cb .PdfObjectStream ){if _ ,_gdc :=_gae [_eae ];!_gdc {_gae [_eae ]=struct{}{};
_bg =append (_bg ,_eae );};};_cbf :=map[_cb .PdfObject ]bool {};_dg :=map[_cb .PdfObject ]bool {};for _ ,_fec :=range objects {switch _age :=_fec .(type ){case *_cb .PdfIndirectObject :switch _eddb :=_age .PdfObject .(type ){case *_cb .PdfObjectDictionary :if _cc ,_bga :=_cb .GetName (_eddb .Get ("\u0054\u0079\u0070\u0065"));
!_bga ||_cc .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _bea ,_bc :=_cb .GetStream (_eddb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_bc {_eee (_bea );}else if _cd ,_cca :=_cb .GetArray (_eddb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_cca {var _gdb []*_cb .PdfObjectStream ;for _ ,_bf :=range _cd .Elements (){if _cdd ,_bff :=_cb .GetStream (_bf );_bff {_gdb =append (_gdb ,_cdd );};};if len (_gdb )> 0{var _ebg _gd .Buffer ;for _ ,_db :=range _gdb {if _gad ,_ccg :=_cb .DecodeStream (_db );
_ccg ==nil {_ebg .Write (_gad );};_cbf [_db ]=true ;};_ac ,_fbd :=_cb .MakeStream (_ebg .Bytes (),_cb .NewFlateEncoder ());if _fbd !=nil {return nil ,_fbd ;};_dg [_ac ]=true ;_eddb .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_ac );_eee (_ac );
};};};case *_cb .PdfObjectStream :if _fc ,_bffc :=_cb .GetName (_age .Get ("\u0054\u0079\u0070\u0065"));!_bffc ||_fc .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _gg ,_bcc :=_cb .GetName (_age .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_bcc ||_gg .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_eee (_age );};};for _ ,_gdgd :=range _bg {_ce =_bd (_gdgd );if _ce !=nil {return nil ,_ce ;};};_gfd =nil ;for _ ,_dbf :=range objects {if _cbf [_dbf ]{continue ;};_gfd =append (_gfd ,_dbf );
};for _agf :=range _dg {_gfd =append (_gfd ,_agf );};return _gfd ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cfc *ImagePPI )Optimize (objects []_cb .PdfObject )(_gcc []_cb .PdfObject ,_dbcb error ){if _cfc .ImageUpperPPI <=0{return objects ,nil ;};_gggg :=_bdag (objects );if len (_gggg )==0{return objects ,nil ;};_bfa :=make (map[_cb .PdfObject ]struct{});
for _ ,_dad :=range _gggg {_eba :=_dad .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_bfa [_eba ]=struct{}{};};_cab :=make (map[*_cb .PdfObjectStream ]*imageInfo );for _ ,_aed :=range _gggg {_cab [_aed .Stream ]=_aed ;};var _cgeb *_cb .PdfObjectDictionary ;
for _ ,_cged :=range objects {if _fgbg ,_ffcg :=_cb .GetDict (_cged );_cgeb ==nil &&_ffcg {if _afaa ,_gaa :=_cb .GetName (_fgbg .Get ("\u0054\u0079\u0070\u0065"));_gaa &&*_afaa =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_cgeb =_fgbg ;};};};if _cgeb ==nil {return objects ,nil ;
};_cgb ,_dcd :=_cb .GetDict (_cgeb .Get ("\u0050\u0061\u0067e\u0073"));if !_dcd {return objects ,nil ;};_baa ,_bege :=_cb .GetArray (_cgb .Get ("\u004b\u0069\u0064\u0073"));if !_bege {return objects ,nil ;};for _ ,_ada :=range _baa .Elements (){_aead :=make (map[string ]*imageInfo );
_cddc ,_addc :=_cb .GetDict (_ada );if !_addc {continue ;};_cgbd ,_ :=_bbc (_cddc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_cgbd )==0{continue ;};_agef ,_gaec :=_cb .GetDict (_cddc .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_gaec {continue ;};_fgd ,_gga :=_eb .NewPdfPageResourcesFromDict (_agef );if _gga !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_gga );
continue ;};_cddcd ,_bgaf :=_cb .GetDict (_agef .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_bgaf {continue ;};_daf :=_cddcd .Keys ();for _ ,_ebae :=range _daf {if _dcad ,_fba :=_cb .GetStream (_cddcd .Get (_ebae ));_fba {if _bce ,_fag :=_cab [_dcad ];
_fag {_aead [string (_ebae )]=_bce ;};};};_aag :=_fe .NewContentStreamParser (_cgbd );_gfb ,_gga :=_aag .Parse ();if _gga !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gga );continue ;};_ece :=_fe .NewContentStreamProcessor (*_gfb );
_ece .AddHandler (_fe .HandlerConditionEnumAllOperands ,"",func (_afbb *_fe .ContentStreamOperation ,_cgfb _fe .GraphicsState ,_eff *_eb .PdfPageResources )error {switch _afbb .Operand {case "\u0044\u006f":if len (_afbb .Params )!=1{_g .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_adb ,_effb :=_cb .GetName (_afbb .Params [0]);if !_effb {_g .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _cec ,_dcdf :=_aead [string (*_adb )];_dcdf {_gbfc :=_cgfb .CTM .ScalingFactorX ();_bcce :=_cgfb .CTM .ScalingFactorY ();_efd ,_eede :=_gbfc /72.0,_bcce /72.0;_fgdf ,_fad :=float64 (_cec .Width )/_efd ,float64 (_cec .Height )/_eede ;if _efd ==0||_eede ==0{_fgdf =72.0;
_fad =72.0;};_cec .PPI =_a .Max (_cec .PPI ,_fgdf );_cec .PPI =_a .Max (_cec .PPI ,_fad );};};return nil ;});_gga =_ece .Process (_fgd );if _gga !=nil {_g .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_gga );
continue ;};};for _ ,_gggge :=range _gggg {if _ ,_ggga :=_bfa [_gggge .Stream ];_ggga {continue ;};if _gggge .PPI <=_cfc .ImageUpperPPI {continue ;};_cded ,_bgba :=_eb .NewXObjectImageFromStream (_gggge .Stream );if _bgba !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bgba );
continue ;};var _cadfd imageModifications ;_cadfd .Scale =_cfc .ImageUpperPPI /_gggge .PPI ;if _gggge .BitsPerComponent ==1&&_gggge .ColorComponents ==1{_gdcb :=_a .Round (_gggge .PPI /_cfc .ImageUpperPPI );_eef :=_ee .NextPowerOf2 (uint (_gdcb ));if _ee .InDelta (float64 (_eef ),1/_cadfd .Scale ,0.3){_cadfd .Scale =float64 (1)/float64 (_eef );
};if _ ,_gabg :=_cded .Filter .(*_cb .JBIG2Encoder );!_gabg {_cadfd .Encoding =_cb .NewJBIG2Encoder ();};};if _bgba =_ggcb (_cded ,_cadfd );_bgba !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_bgba );
continue ;};_cadfd .Encoding =nil ;if _gbdg ,_ffe :=_cb .GetStream (_gggge .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_ffe {_eaec ,_dfd :=_eb .NewXObjectImageFromStream (_gbdg );if _dfd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dfd );
continue ;};if _dfd =_ggcb (_eaec ,_cadfd );_dfd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dfd );continue ;};};};return objects ,nil ;};func _bgag (_gfc *_eb .Image ,_abgb float64 )(*_eb .Image ,error ){_bge ,_ffd :=_gfc .ToGoImage ();
if _ffd !=nil {return nil ,_ffd ;};var _eaed _ee .Image ;_gada ,_egeb :=_bge .(*_ee .Monochrome );if _egeb {if _ffd =_gada .ResolveDecode ();_ffd !=nil {return nil ,_ffd ;};_eaed ,_ffd =_gada .Scale (_abgb );if _ffd !=nil {return nil ,_ffd ;};}else {_bgd :=int (_a .RoundToEven (float64 (_gfc .Width )*_abgb ));
_eged :=int (_a .RoundToEven (float64 (_gfc .Height )*_abgb ));_eaed ,_ffd =_ee .NewImage (_bgd ,_eged ,int (_gfc .BitsPerComponent ),_gfc .ColorComponents ,nil ,nil ,nil );if _ffd !=nil {return nil ,_ffd ;};_e .CatmullRom .Scale (_eaed ,_eaed .Bounds (),_bge ,_bge .Bounds (),_e .Over ,&_e .Options {});
};_bdbb :=_eaed .Base ();_egcb :=&_eb .Image {Width :int64 (_bdbb .Width ),Height :int64 (_bdbb .Height ),BitsPerComponent :int64 (_bdbb .BitsPerComponent ),ColorComponents :_bdbb .ColorComponents ,Data :_bdbb .Data };_egcb .SetDecode (_bdbb .Decode );
_egcb .SetAlpha (_bdbb .Alpha );return _egcb ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fcfa *ObjectStreams )Optimize (objects []_cb .PdfObject )(_fce []_cb .PdfObject ,_fbg error ){_gca :=&_cb .PdfObjectStreams {};_dbfe :=make ([]_cb .PdfObject ,0,len (objects ));for _ ,_ffab :=range objects {if _dce ,_cgff :=_ffab .(*_cb .PdfIndirectObject );
_cgff &&_dce .GenerationNumber ==0{_gca .Append (_ffab );}else {_dbfe =append (_dbfe ,_ffab );};};if _gca .Len ()==0{return _dbfe ,nil ;};_fce =make ([]_cb .PdfObject ,0,len (_dbfe )+_gca .Len ()+1);if _gca .Len ()> 1{_fce =append (_fce ,_gca );};_fce =append (_fce ,_gca .Elements ()...);
_fce =append (_fce ,_dbfe ...);return _fce ,nil ;};type imageModifications struct{Scale float64 ;Encoding _cb .StreamEncoder ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};type objectStructure struct{_adag *_cb .PdfObjectDictionary ;_gaea *_cb .PdfObjectDictionary ;_cff []*_cb .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ccbd *CombineDuplicateStreams )Optimize (objects []_cb .PdfObject )(_afcb []_cb .PdfObject ,_dbag error ){_dff :=make (map[_cb .PdfObject ]_cb .PdfObject );_abdg :=make (map[_cb .PdfObject ]struct{});_ebcc :=make (map[string ][]*_cb .PdfObjectStream );
for _ ,_ecc :=range objects {if _aef ,_ffc :=_ecc .(*_cb .PdfObjectStream );_ffc {_eeeg :=_b .New ();_eeeg .Write (_aef .Stream );_eeeg .Write ([]byte (_aef .PdfObjectDictionary .WriteString ()));_dfe :=string (_eeeg .Sum (nil ));_ebcc [_dfe ]=append (_ebcc [_dfe ],_aef );
};};for _ ,_cde :=range _ebcc {if len (_cde )< 2{continue ;};_efb :=_cde [0];for _fcf :=1;_fcf < len (_cde );_fcf ++{_gag :=_cde [_fcf ];_dff [_gag ]=_efb ;_abdg [_gag ]=struct{}{};};};_afcb =make ([]_cb .PdfObject ,0,len (objects )-len (_abdg ));for _ ,_edg :=range objects {if _ ,_bdad :=_abdg [_edg ];
_bdad {continue ;};_afcb =append (_afcb ,_edg );};_aeb (_afcb ,_dff );return _afcb ,nil ;};func _ggcb (_gbc *_eb .XObjectImage ,_add imageModifications )error {_eed ,_cgeg :=_gbc .ToImage ();if _cgeg !=nil {return _cgeg ;};if _add .Scale !=0{_eed ,_cgeg =_bgag (_eed ,_add .Scale );
if _cgeg !=nil {return _cgeg ;};};if _add .Encoding !=nil {_gbc .Filter =_add .Encoding ;};_gbc .Decode =nil ;switch _ccaa :=_gbc .Filter .(type ){case *_cb .FlateEncoder :if _ccaa .Predictor !=1&&_ccaa .Predictor !=11{_ccaa .Predictor =1;};};if _cgeg =_gbc .SetImage (_eed ,nil );
_cgeg !=nil {_g .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_cgeg );return _cgeg ;};_gbc .ToPdfObject ();return nil ;};func _bbc (_agfd _cb .PdfObject )(_bgcce string ,_feed []_cb .PdfObject ){var _ade _gd .Buffer ;
switch _dfc :=_agfd .(type ){case *_cb .PdfIndirectObject :_feed =append (_feed ,_dfc );_agfd =_dfc .PdfObject ;};switch _eadg :=_agfd .(type ){case *_cb .PdfObjectStream :if _fdf ,_abgeb :=_cb .DecodeStream (_eadg );_abgeb ==nil {_ade .Write (_fdf );_feed =append (_feed ,_eadg );
};case *_cb .PdfObjectArray :for _ ,_dfg :=range _eadg .Elements (){switch _bccc :=_dfg .(type ){case *_cb .PdfObjectStream :if _eecc ,_gee :=_cb .DecodeStream (_bccc );_gee ==nil {_ade .Write (_eecc );_feed =append (_feed ,_bccc );};};};};return _ade .String (),_feed ;
};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ceab *Image )Optimize (objects []_cb .PdfObject )(_ggd []_cb .PdfObject ,_dfff error ){if _ceab .ImageQuality <=0{return objects ,nil ;};_dgbd :=_bdag (objects );if len (_dgbd )==0{return objects ,nil ;};_edab :=make (map[_cb .PdfObject ]_cb .PdfObject );
_cgdd :=make (map[_cb .PdfObject ]struct{});for _ ,_eagb :=range _dgbd {_fea :=_eagb .Stream .Get ("\u0053\u004d\u0061s\u006b");_cgdd [_fea ]=struct{}{};};for _ggc ,_fdb :=range _dgbd {_ddgf :=_fdb .Stream ;if _ ,_efg :=_cgdd [_ddgf ];_efg {continue ;};
_afg ,_gfff :=_eb .NewXObjectImageFromStream (_ddgf );if _gfff !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gfff );continue ;};switch _afg .Filter .(type ){case *_cb .JBIG2Encoder :continue ;case *_cb .CCITTFaxEncoder :continue ;
};_cadd ,_gfff :=_afg .ToImage ();if _gfff !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gfff );continue ;};_gfac :=_cb .NewDCTEncoder ();_gfac .ColorComponents =_cadd .ColorComponents ;_gfac .Quality =_ceab .ImageQuality ;
_gfac .BitsPerComponent =_fdb .BitsPerComponent ;_gfac .Width =_fdb .Width ;_gfac .Height =_fdb .Height ;_gce ,_gfff :=_gfac .EncodeBytes (_cadd .Data );if _gfff !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gfff );
continue ;};var _cga _cb .StreamEncoder ;_cga =_gfac ;{_fgc :=_cb .NewFlateEncoder ();_edeb :=_cb .NewMultiEncoder ();_edeb .AddEncoder (_fgc );_edeb .AddEncoder (_gfac );_cbef ,_dgd :=_edeb .EncodeBytes (_cadd .Data );if _dgd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dgd );
continue ;};if len (_cbef )< len (_gce ){_g .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_gce ),len (_cbef ),len (_ddgf .Stream ));
_gce =_cbef ;_cga =_edeb ;};};_bbg :=len (_ddgf .Stream );if _bbg < len (_gce ){continue ;};_dag :=&_cb .PdfObjectStream {Stream :_gce };_dag .PdfObjectReference =_ddgf .PdfObjectReference ;_dag .PdfObjectDictionary =_cb .MakeDict ();_dag .Merge (_ddgf .PdfObjectDictionary );
_dag .Merge (_cga .MakeStreamDict ());_dag .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_cb .MakeInteger (int64 (len (_gce ))));_edab [_ddgf ]=_dag ;_dgbd [_ggc ].Stream =_dag ;};_ggd =make ([]_cb .PdfObject ,len (objects ));copy (_ggd ,objects );_aeb (_ggd ,_edab );
return _ggd ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_cg []_eb .Optimizer };

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gffb *CompressStreams )Optimize (objects []_cb .PdfObject )(_fcbb []_cb .PdfObject ,_gdgc error ){_fcbb =make ([]_cb .PdfObject ,len (objects ));copy (_fcbb ,objects );for _ ,_acbb :=range objects {_aeed ,_bdc :=_cb .GetStream (_acbb );if !_bdc {continue ;
};if _fbc :=_aeed .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_fbc !=nil {if _ ,_ebd :=_cb .GetName (_fbc );_ebd {continue ;};if _adf ,_ffbb :=_cb .GetArray (_fbc );_ffbb &&_adf .Len ()> 0{continue ;};};_aeg :=_cb .NewFlateEncoder ();var _bdcb []byte ;
_bdcb ,_gdgc =_aeg .EncodeBytes (_aeed .Stream );if _gdgc !=nil {return _fcbb ,_gdgc ;};_ffa :=_aeg .MakeStreamDict ();if len (_bdcb )+len (_ffa .WriteString ())< len (_aeed .Stream ){_aeed .Stream =_bdcb ;_aeed .PdfObjectDictionary .Merge (_ffa );_aeed .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_cb .MakeInteger (int64 (len (_aeed .Stream ))));
};};return _fcbb ,nil ;};type content struct{_bfg string ;_bgc *_eb .PdfPageResources ;};func _bd (_abg *_cb .PdfObjectStream )error {_gdg ,_gf :=_cb .DecodeStream (_abg );if _gf !=nil {return _gf ;};_da :=_fe .NewContentStreamParser (string (_gdg ));_ebe ,_gf :=_da .Parse ();
if _gf !=nil {return _gf ;};_ebe =_egc (_ebe );_fb :=_ebe .Bytes ();if len (_fb )>=len (_gdg ){return nil ;};_bb ,_gf :=_cb .MakeStream (_ebe .Bytes (),_cb .NewFlateEncoder ());if _gf !=nil {return _gf ;};_abg .Stream =_bb .Stream ;_abg .Merge (_bb .PdfObjectDictionary );
return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_caab *CombineDuplicateDirectObjects )Optimize (objects []_cb .PdfObject )(_cdc []_cb .PdfObject ,_df error ){_edc (objects );_dfa :=make (map[string ][]*_cb .PdfObjectDictionary );var _deb func (_eafd *_cb .PdfObjectDictionary );_deb =func (_gaee *_cb .PdfObjectDictionary ){for _ ,_fcb :=range _gaee .Keys (){_aeaa :=_gaee .Get (_fcb );
if _gc ,_gfa :=_aeaa .(*_cb .PdfObjectDictionary );_gfa {_dge :=_b .New ();_dge .Write ([]byte (_gc .WriteString ()));_ffgd :=string (_dge .Sum (nil ));_dfa [_ffgd ]=append (_dfa [_ffgd ],_gc );_deb (_gc );};};};for _ ,_ead :=range objects {_agea ,_fdd :=_ead .(*_cb .PdfIndirectObject );
if !_fdd {continue ;};if _fed ,_gaf :=_agea .PdfObject .(*_cb .PdfObjectDictionary );_gaf {_deb (_fed );};};_eeb :=make ([]_cb .PdfObject ,0,len (_dfa ));_ded :=make (map[_cb .PdfObject ]_cb .PdfObject );for _ ,_cdff :=range _dfa {if len (_cdff )< 2{continue ;
};_eebf :=_cb .MakeDict ();_eebf .Merge (_cdff [0]);_bccb :=_cb .MakeIndirectObject (_eebf );_eeb =append (_eeb ,_bccb );for _ef :=0;_ef < len (_cdff );_ef ++{_bcf :=_cdff [_ef ];_ded [_bcf ]=_bccb ;};};_cdc =make ([]_cb .PdfObject ,len (objects ));copy (_cdc ,objects );
_cdc =append (_eeb ,_cdc ...);_aeb (_cdc ,_ded );return _cdc ,nil ;};func _bdag (_cgd []_cb .PdfObject )[]*imageInfo {_eaab :=_cb .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_bgcc :=make (map[*_cb .PdfObjectStream ]struct{});var _fcg []*imageInfo ;
for _ ,_febd :=range _cgd {_ege ,_edge :=_cb .GetStream (_febd );if !_edge {continue ;};if _ ,_ecb :=_bgcc [_ege ];_ecb {continue ;};_bgcc [_ege ]=struct{}{};_cbg :=_ege .PdfObjectDictionary .Get (_eaab );_debe ,_edge :=_cb .GetName (_cbg );if !_edge ||string (*_debe )!="\u0049\u006d\u0061g\u0065"{continue ;
};_fffa :=&imageInfo {Stream :_ege ,BitsPerComponent :8};if _cgfa ,_fda :=_cb .GetIntVal (_ege .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_fda {_fffa .BitsPerComponent =_cgfa ;};if _caad ,_dfb :=_cb .GetIntVal (_ege .Get ("\u0057\u0069\u0064t\u0068"));
_dfb {_fffa .Width =_caad ;};if _bag ,_eeee :=_cb .GetIntVal (_ege .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_eeee {_fffa .Height =_bag ;};_dac ,_dgeb :=_eb .NewPdfColorspaceFromPdfObject (_ege .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));
if _dgeb !=nil {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_dgeb );continue ;};if _dac ==nil {_gbfg ,_cfdg :=_cb .GetName (_ege .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _cfdg {switch _gbfg .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_dac =_eb .NewPdfColorspaceDeviceGray ();
_fffa .BitsPerComponent =1;};};};switch _abge :=_dac .(type ){case *_eb .PdfColorspaceDeviceRGB :_fffa .ColorComponents =3;case *_eb .PdfColorspaceDeviceGray :_fffa .ColorComponents =1;default:_g .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_abge );
continue ;};_fcg =append (_fcg ,_fffa );};return _fcg ;};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_cb .PdfObjectStream ;PPI float64 ;};func _edc (_fdg []_cb .PdfObject ){for _fefe ,_febe :=range _fdg {switch _cgdf :=_febe .(type ){case *_cb .PdfIndirectObject :_cgdf .ObjectNumber =int64 (_fefe +1);
_cgdf .GenerationNumber =0;case *_cb .PdfObjectStream :_cgdf .ObjectNumber =int64 (_fefe +1);_cgdf .GenerationNumber =0;case *_cb .PdfObjectStreams :_cgdf .ObjectNumber =int64 (_fefe +1);_cgdf .GenerationNumber =0;};};};

// Append appends optimizers to the chain.
func (_ag *Chain )Append (optimizers ..._eb .Optimizer ){_ag ._cg =append (_ag ._cg ,optimizers ...)};func _adc (_ggef []_cb .PdfObject )objectStructure {_ccec :=objectStructure {};_gbcd :=false ;for _ ,_fga :=range _ggef {switch _cdfb :=_fga .(type ){case *_cb .PdfIndirectObject :_fcbg ,_bdcf :=_cb .GetDict (_cdfb );
if !_bdcf {continue ;};_dced ,_bdcf :=_cb .GetName (_fcbg .Get ("\u0054\u0079\u0070\u0065"));if !_bdcf {continue ;};switch _dced .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_ccec ._adag =_fcbg ;_gbcd =true ;};};if _gbcd {break ;};};if !_gbcd {return _ccec ;
};_dea ,_afgd :=_cb .GetDict (_ccec ._adag .Get ("\u0050\u0061\u0067e\u0073"));if !_afgd {return _ccec ;};_ccec ._gaea =_dea ;_cdfa ,_afgd :=_cb .GetArray (_dea .Get ("\u004b\u0069\u0064\u0073"));if !_afgd {return _ccec ;};for _ ,_ecg :=range _cdfa .Elements (){_fdae ,_fee :=_cb .GetIndirect (_ecg );
if !_fee {break ;};_ccec ._cff =append (_ccec ._cff ,_fdae );};return _ccec ;};func _egc (_aa *_fe .ContentStreamOperations )*_fe .ContentStreamOperations {if _aa ==nil {return nil ;};_ge :=_fe .ContentStreamOperations {};for _ ,_beg :=range *_aa {switch _beg .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_beg .Params )==6{if _d ,_cge :=_cb .GetNumbersAsFloat (_beg .Params );_cge ==nil {if _d [0]==1&&_d [1]==0&&_d [2]==0&&_d [3]==1{_beg =&_fe .ContentStreamOperation {Params :[]_cb .PdfObject {_beg .Params [4],_beg .Params [5]},Operand :"\u0054\u0064"};
};};};};_ge =append (_ge ,_beg );};return &_ge ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};func _agb (_bbf _cb .PdfObject )[]content {if _bbf ==nil {return nil ;};_ddb ,_beab :=_cb .GetArray (_bbf );if !_beab {_g .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _fca []content ;for _ ,_gba :=range _ddb .Elements (){_abd ,_egfb :=_cb .GetDict (_gba );if !_egfb {_g .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_ggb ,_egfb :=_cb .GetDict (_abd .Get ("\u0041\u0050"));if !_egfb {_g .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_cac :=_cb .TraceToDirectObject (_ggb .Get ("\u004e"));
if _cac ==nil {_g .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _bee *_cb .PdfObjectStream ;switch _dec :=_cac .(type ){case *_cb .PdfObjectDictionary :_bda ,_bbfa :=_cb .GetName (_abd .Get ("\u0041\u0053"));
if !_bbfa {_g .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_bee ,_bbfa =_cb .GetStream (_dec .Get (*_bda ));if !_bbfa {_g .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_cb .PdfObjectStream :_bee =_dec ;};if _bee ==nil {_g .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_fgb ,_gff :=_eb .NewXObjectFormFromStream (_bee );if _gff !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_gff );
continue ;};_abe ,_gff :=_fgb .GetContentStream ();if _gff !=nil {_g .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_gff );continue ;};_fca =append (_fca ,content {_bfg :string (_abe ),_bgc :_fgb .Resources });
};return _fca ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aea *Chain )Optimize (objects []_cb .PdfObject )(_ebc []_cb .PdfObject ,_ab error ){_ga :=objects ;for _ ,_be :=range _aea ._cg {_egd ,_gb :=_be .Optimize (_ga );if _gb !=nil {_g .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_gb );
continue ;};_ga =_egd ;};return _ga ,nil ;};func _aeb (_agbb []_cb .PdfObject ,_cgag map[_cb .PdfObject ]_cb .PdfObject ){if len (_cgag )==0{return ;};for _gggd ,_ccae :=range _agbb {if _edb ,_facc :=_cgag [_ccae ];_facc {_agbb [_gggd ]=_edb ;continue ;
};_cgag [_ccae ]=_ccae ;switch _aegf :=_ccae .(type ){case *_cb .PdfObjectArray :_gcd :=make ([]_cb .PdfObject ,_aegf .Len ());copy (_gcd ,_aegf .Elements ());_aeb (_gcd ,_cgag );for _gfcb ,_cfcf :=range _gcd {_aegf .Set (_gfcb ,_cfcf );};case *_cb .PdfObjectStreams :_aeb (_aegf .Elements (),_cgag );
case *_cb .PdfObjectStream :_dfeg :=[]_cb .PdfObject {_aegf .PdfObjectDictionary };_aeb (_dfeg ,_cgag );_aegf .PdfObjectDictionary =_dfeg [0].(*_cb .PdfObjectDictionary );case *_cb .PdfObjectDictionary :_ebf :=_aegf .Keys ();_bab :=make ([]_cb .PdfObject ,len (_ebf ));
for _fbce ,_cabd :=range _ebf {_bab [_fbce ]=_aegf .Get (_cabd );};_aeb (_bab ,_cgag );for _gadf ,_dcab :=range _ebf {_aegf .Set (_dcab ,_bab [_gadf ]);};case *_cb .PdfIndirectObject :_gface :=[]_cb .PdfObject {_aegf .PdfObject };_aeb (_gface ,_cgag );
_aegf .PdfObject =_gface [0];};};};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_cdffb :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_cdffb .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_cdffb .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_daa :=new (ImagePPI );
_daa .ImageUpperPPI =options .ImageUpperPPI ;_cdffb .Append (_daa );};if options .ImageQuality > 0{_bfba :=new (Image );_bfba .ImageQuality =options .ImageQuality ;_cdffb .Append (_bfba );};if options .CombineDuplicateDirectObjects {_cdffb .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_cdffb .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_cdffb .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_cdffb .Append (new (ObjectStreams ));
};if options .CompressStreams {_cdffb .Append (new (CompressStreams ));};return _cdffb ;};