//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_ed "bytes";_f "crypto/md5";_gb "errors";_g "fmt";_ebb "github.com/unidoc/unipdf/v3/common";_ga "github.com/unidoc/unipdf/v3/contentstream";_a "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/extractor";_ac "github.com/unidoc/unipdf/v3/internal/textencoding";_bf "github.com/unidoc/unipdf/v3/model";_ee "github.com/unidoc/unitype";_d "golang.org/x/image/draw";_c "image";_eb "math";);func _cfb (_afcb _a .PdfObject )[]content {if _afcb ==nil {return nil ;};_aaa ,_bdb :=_a .GetArray (_afcb );if !_bdb {_ebb .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _afcc []content ;for _ ,_aed :=range _aaa .Elements (){_daf ,_aaae :=_a .GetDict (_aed );if !_aaae {_ebb .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_dcgc ,_aaae :=_a .GetDict (_daf .Get ("\u0041\u0050"));if !_aaae {_ebb .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_dfab :=_a .TraceToDirectObject (_dcgc .Get ("\u004e"));if _dfab ==nil {_ebb .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _abg *_a .PdfObjectStream ;switch _fef :=_dfab .(type ){case *_a .PdfObjectDictionary :_bcbe ,_fg :=_a .GetName (_daf .Get ("\u0041\u0053"));if !_fg {_ebb .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_abg ,_fg =_a .GetStream (_fef .Get (*_bcbe ));if !_fg {_ebb .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_a .PdfObjectStream :_abg =_fef ;};if _abg ==nil {_ebb .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_aeb ,_bdba :=_bf .NewXObjectFormFromStream (_abg );if _bdba !=nil {_ebb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_bdba );continue ;};_deg ,_bdba :=_aeb .GetContentStream ();if _bdba !=nil {_ebb .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_bdba );continue ;};_afcc =append (_afcc ,content {_febe :string (_deg ),_cega :_aeb .Resources });};return _afcc ;};func _ebdc (_cf *_a .PdfObjectStream ,_eebb []rune ,_feg []_ee .GlyphIndex )error {_cf ,_eaa :=_a .GetStream (_cf );if !_eaa {_ebb .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");return _gb .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cfc ,_fad :=_a .DecodeStream (_cf );if _fad !=nil {_ebb .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_fad );return _fad ;};_acad ,_fad :=_ee .Parse (_ed .NewReader (_cfc ));if _fad !=nil {_ebb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_cf .Stream ));return _fad ;};_dagd :=_feg ;if len (_eebb )> 0{_bed :=_acad .LookupRunes (_eebb );_dagd =append (_dagd ,_bed ...);};_acad ,_fad =_acad .SubsetKeepIndices (_dagd );if _fad !=nil {_ebb .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_fad );return _fad ;};var _afc _ed .Buffer ;_fad =_acad .Write (&_afc );if _fad !=nil {_ebb .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_fad );return _fad ;};if _afc .Len ()> len (_cfc ){_ebb .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");return nil ;};_gfc ,_fad :=_a .MakeStream (_afc .Bytes (),_a .NewFlateEncoder ());if _fad !=nil {_ebb .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_fad );return _fad ;};*_cf =*_gfc ;_cf .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_a .MakeInteger (int64 (_afc .Len ())));return nil ;};type objectStructure struct{_egf *_a .PdfObjectDictionary ;_afge *_a .PdfObjectDictionary ;_ebdf []*_a .PdfIndirectObject ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_efc *Chain )Optimize (objects []_a .PdfObject )(_bd []_a .PdfObject ,_dd error ){_bd =objects ;for _ ,_cc :=range _efc ._ef {_bd ,_dd =_cc .Optimize (_bd );if _dd !=nil {return _bd ,_dd ;};};return _bd ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_edg *CleanFonts )Optimize (objects []_a .PdfObject )(_fed []_a .PdfObject ,_eead error ){var _bcg map[*_a .PdfObjectStream ]struct{};if _edg .Subset {var _feb error ;_bcg ,_feb =_bac (objects );if _feb !=nil {return nil ,_feb ;};};for _ ,_ffg :=range objects {_cab ,_eafd :=_a .GetStream (_ffg );if !_eafd {continue ;};if _ ,_cca :=_bcg [_cab ];_cca {continue ;};_bfg ,_bba :=_a .NewEncoderFromStream (_cab );if _bba !=nil {_ebb .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_bba );continue ;};_dfa ,_bba :=_bfg .DecodeStream (_cab );if _bba !=nil {_ebb .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_bba );continue ;};if len (_dfa )< 4{continue ;};_bcc :=string (_dfa [:4]);if _bcc =="\u004f\u0054\u0054\u004f"{continue ;};if _bcc !="\u0000\u0001\u0000\u0000"&&_bcc !="\u0074\u0072\u0075\u0065"{continue ;};_bfac ,_bba :=_ee .Parse (_ed .NewReader (_dfa ));if _bba !=nil {_ebb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_bba );continue ;};_bba =_bfac .Optimize ();if _bba !=nil {continue ;};var _abag _ed .Buffer ;_bba =_bfac .Write (&_abag );if _bba !=nil {_ebb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_bba );continue ;};if _abag .Len ()> len (_dfa ){_ebb .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");continue ;};_agg ,_bba :=_a .MakeStream (_abag .Bytes (),_a .NewFlateEncoder ());if _bba !=nil {continue ;};*_cab =*_agg ;_cab .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_a .MakeInteger (int64 (_abag .Len ())));};return objects ,nil ;};type content struct{_febe string ;_cega *_bf .PdfPageResources ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};func _bac (_aac []_a .PdfObject )(_fa map[*_a .PdfObjectStream ]struct{},_bc error ){_fa =map[*_a .PdfObjectStream ]struct{}{};_efb :=map[*_bf .PdfFont ]struct{}{};_db :=_dfdg (_aac );for _ ,_gfdd :=range _db ._ebdf {_bb ,_dbd :=_a .GetDict (_gfdd .PdfObject );if !_dbd {continue ;};_eeb ,_dbd :=_a .GetDict (_bb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_dbd {continue ;};_dcfc ,_ :=_dba (_bb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_aba ,_afe :=_bf .NewPdfPageResourcesFromDict (_eeb );if _afe !=nil {return nil ,_afe ;};_ebd :=[]content {{_febe :_dcfc ,_cega :_aba }};_bag :=_cfb (_bb .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _bag !=nil {_ebd =append (_ebd ,_bag ...);};for _ ,_egc :=range _ebd {_gda ,_gc :=_b .NewFromContents (_egc ._febe ,_egc ._cega );if _gc !=nil {return nil ,_gc ;};_ff ,_ ,_ ,_gc :=_gda .ExtractPageText ();if _gc !=nil {return nil ,_gc ;};for _ ,_be :=range _ff .Marks ().Elements (){if _be .Font ==nil {continue ;};if _ ,_ca :=_efb [_be .Font ];!_ca {_efb [_be .Font ]=struct{}{};};};};};_eeg :=map[*_a .PdfObjectStream ][]*_bf .PdfFont {};for _bgd :=range _efb {_dad :=_bgd .FontDescriptor ();if _dad ==nil ||_dad .FontFile2 ==nil {continue ;};_gdf ,_gde :=_a .GetStream (_dad .FontFile2 );if !_gde {continue ;};_eeg [_gdf ]=append (_eeg [_gdf ],_bgd );};for _fe :=range _eeg {var _gdd []rune ;var _fc []_ee .GlyphIndex ;for _ ,_eea :=range _eeg [_fe ]{switch _cgf :=_eea .Encoder ().(type ){case *_ac .IdentityEncoder :_eaf :=_cgf .RegisteredRunes ();_gee :=make ([]_ee .GlyphIndex ,len (_eaf ));for _bfa ,_fec :=range _eaf {_gee [_bfa ]=_ee .GlyphIndex (_fec );};_fc =append (_fc ,_gee ...);case *_ac .TrueTypeFontEncoder :_ceg :=_cgf .RegisteredRunes ();_gdd =append (_gdd ,_ceg ...);case _ac .SimpleEncoder :_bab :=_cgf .Charcodes ();for _ ,_bcb :=range _bab {_ggf ,_dda :=_cgf .CharcodeToRune (_bcb );if !_dda {_ebb .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_bcb );continue ;};_gdd =append (_gdd ,_ggf );};};};_bc =_ebdc (_fe ,_gdd ,_fc );if _bc !=nil {_ebb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_bc );return nil ,_bc ;};_fa [_fe ]=struct{}{};};return _fa ,nil ;};func _gf (_cce *_ga .ContentStreamOperations )*_ga .ContentStreamOperations {if _cce ==nil {return nil ;};_acc :=_ga .ContentStreamOperations {};for _ ,_gg :=range *_cce {switch _gg .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_gg .Params )==6{if _fd ,_af :=_a .GetNumbersAsFloat (_gg .Params );_af ==nil {if _fd [0]==1&&_fd [1]==0&&_fd [2]==0&&_fd [3]==1{_gg =&_ga .ContentStreamOperation {Params :[]_a .PdfObject {_gg .Params [4],_gg .Params [5]},Operand :"\u0054\u0064"};};};};};_acc =append (_acc ,_gg );};return &_acc ;};func _ffbf (_cga []_a .PdfObject )[]*imageInfo {_cafd :=_a .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_egd :=make (map[*_a .PdfObjectStream ]struct{});var _bca error ;var _gce []*imageInfo ;for _ ,_dac :=range _cga {_fea ,_ace :=_a .GetStream (_dac );if !_ace {continue ;};if _ ,_bea :=_egd [_fea ];_bea {continue ;};_egd [_fea ]=struct{}{};_gba :=_fea .PdfObjectDictionary .Get (_cafd );_aee ,_ace :=_a .GetName (_gba );if !_ace ||string (*_aee )!="\u0049\u006d\u0061g\u0065"{continue ;};_gca :=&imageInfo {BitsPerComponent :8,Stream :_fea };if _gca .ColorSpace ,_bca =_bf .DetermineColorspaceNameFromPdfObject (_fea .PdfObjectDictionary .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));_bca !=nil {_ebb .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0073",_bca );continue ;};if _fab ,_edgb :=_a .GetIntVal (_fea .PdfObjectDictionary .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_edgb {_gca .BitsPerComponent =_fab ;};if _fgf ,_gcf :=_a .GetIntVal (_fea .PdfObjectDictionary .Get ("\u0057\u0069\u0064t\u0068"));_gcf {_gca .Width =_fgf ;};if _dfabd ,_fde :=_a .GetIntVal (_fea .PdfObjectDictionary .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_fde {_gca .Height =_dfabd ;};switch _gca .ColorSpace {case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_gca .ColorComponents =3;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_gca .ColorComponents =1;default:_ebb .Log .Warning ("\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_gca .ColorSpace );continue ;};_gce =append (_gce ,_gca );};return _gce ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_efa *Image )Optimize (objects []_a .PdfObject )(_aga []_a .PdfObject ,_cef error ){if _efa .ImageQuality <=0{return objects ,nil ;};_fdb :=_ffbf (objects );if len (_fdb )==0{return objects ,nil ;};_cfca :=make (map[_a .PdfObject ]_a .PdfObject );_ebf :=make (map[_a .PdfObject ]struct{});for _ ,_bcba :=range _fdb {_ecg :=_bcba .Stream .PdfObjectDictionary .Get (_a .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_ebf [_ecg ]=struct{}{};};for _cggd ,_dde :=range _fdb {_adc :=_dde .Stream ;if _ ,_bde :=_ebf [_adc ];_bde {continue ;};_fgec ,_dfbf :=_a .NewEncoderFromStream (_adc );if _dfbf !=nil {_ebb .Log .Warning ("\u0045\u0072\u0072\u006f\u0072 \u0067\u0065\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_bfgc ,_dfbf :=_fgec .DecodeStream (_adc );if _dfbf !=nil {_ebb .Log .Warning ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0074\u0068e\u0020i\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_gbaf :=_a .NewDCTEncoder ();_gbaf .ColorComponents =_dde .ColorComponents ;_gbaf .Quality =_efa .ImageQuality ;_gbaf .BitsPerComponent =_dde .BitsPerComponent ;_gbaf .Width =_dde .Width ;_gbaf .Height =_dde .Height ;_acae ,_dfbf :=_gbaf .EncodeBytes (_bfgc );if _dfbf !=nil {_ebb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_dfbf );return nil ,_dfbf ;};var _efg _a .StreamEncoder ;_efg =_gbaf ;{_dbff :=_a .NewFlateEncoder ();_bcab :=_a .NewMultiEncoder ();_bcab .AddEncoder (_dbff );_bcab .AddEncoder (_gbaf );_add ,_ggaf :=_bcab .EncodeBytes (_bfgc );if _ggaf !=nil {return nil ,_ggaf ;};if len (_add )< len (_acae ){_ebb .Log .Debug ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_acae ),len (_add ),len (_adc .Stream ));_acae =_add ;_efg =_bcab ;};};_def :=len (_adc .Stream );if _def < len (_acae ){continue ;};_bbac :=&_a .PdfObjectStream {Stream :_acae };_bbac .PdfObjectReference =_adc .PdfObjectReference ;_bbac .PdfObjectDictionary =_a .MakeDict ();_bbac .Merge (_adc .PdfObjectDictionary );_bbac .Merge (_efg .MakeStreamDict ());_bbac .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_a .MakeInteger (int64 (len (_acae ))));_cfca [_adc ]=_bbac ;_fdb [_cggd ].Stream =_bbac ;};_aga =make ([]_a .PdfObject ,len (objects ));copy (_aga ,objects );_edfb (_aga ,_cfca );return _aga ,nil ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;};type imageInfo struct{ColorSpace _a .PdfObjectName ;BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_a .PdfObjectStream ;PPI float64 ;};func _dba (_ddaee _a .PdfObject )(_cffc string ,_eed []_a .PdfObject ){var _deaa _ed .Buffer ;switch _cefd :=_ddaee .(type ){case *_a .PdfIndirectObject :_eed =append (_eed ,_cefd );_ddaee =_cefd .PdfObject ;};switch _ceeb :=_ddaee .(type ){case *_a .PdfObjectStream :if _gdedf ,_bfe :=_a .DecodeStream (_ceeb );_bfe ==nil {_deaa .Write (_gdedf );_eed =append (_eed ,_ceeb );};case *_a .PdfObjectArray :for _ ,_dbad :=range _ceeb .Elements (){switch _ggae :=_dbad .(type ){case *_a .PdfObjectStream :if _egddf ,_ecgb :=_a .DecodeStream (_ggae );_ecgb ==nil {_deaa .Write (_egddf );_eed =append (_eed ,_ggae );};};};};return _deaa .String (),_eed ;};func _aadd (_bfc []_a .PdfObject ){for _dafd ,_dafdf :=range _bfc {switch _gfbe :=_dafdf .(type ){case *_a .PdfIndirectObject :_gfbe .ObjectNumber =int64 (_dafd +1);_gfbe .GenerationNumber =0;case *_a .PdfObjectStream :_gfbe .ObjectNumber =int64 (_dafd +1);_gfbe .GenerationNumber =0;case *_a .PdfObjectStreams :_gfbe .ObjectNumber =int64 (_dafd +1);_gfbe .GenerationNumber =0;};};};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_baf *CompressStreams )Optimize (objects []_a .PdfObject )(_acgg []_a .PdfObject ,_efbg error ){_acgg =make ([]_a .PdfObject ,len (objects ));copy (_acgg ,objects );for _ ,_bec :=range objects {_cggg ,_fbf :=_a .GetStream (_bec );if !_fbf {continue ;};if _eff :=_cggg .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_eff !=nil {if _ ,_cfcg :=_a .GetName (_eff );_cfcg {continue ;};if _dage ,_cgb :=_a .GetArray (_eff );_cgb &&_dage .Len ()> 0{continue ;};};_eegb :=_a .NewFlateEncoder ();var _geef []byte ;_geef ,_efbg =_eegb .EncodeBytes (_cggg .Stream );if _efbg !=nil {return _acgg ,_efbg ;};_fdc :=_eegb .MakeStreamDict ();if len (_geef )+len (_fdc .WriteString ())< len (_cggg .Stream ){_cggg .Stream =_geef ;_cggg .PdfObjectDictionary .Merge (_fdc );_cggg .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_a .MakeInteger (int64 (len (_cggg .Stream ))));};};return _acgg ,nil ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_ffbd :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_ffbd .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_ffbd .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_fbb :=new (ImagePPI );_fbb .ImageUpperPPI =options .ImageUpperPPI ;_ffbd .Append (_fbb );};if options .ImageQuality > 0{_dafe :=new (Image );_dafe .ImageQuality =options .ImageQuality ;_ffbd .Append (_dafe );};if options .CombineDuplicateDirectObjects {_ffbd .Append (new (CombineDuplicateDirectObjects ));};if options .CombineDuplicateStreams {_ffbd .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_ffbd .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_ffbd .Append (new (ObjectStreams ));};if options .CompressStreams {_ffbd .Append (new (CompressStreams ));};return _ffbd ;};func _dfdg (_adg []_a .PdfObject )objectStructure {_ecf :=objectStructure {};_aebg :=false ;for _ ,_gabg :=range _adg {switch _gddg :=_gabg .(type ){case *_a .PdfIndirectObject :_aeg ,_bdce :=_a .GetDict (_gddg );if !_bdce {continue ;};_cdgg ,_bdce :=_a .GetName (_aeg .Get ("\u0054\u0079\u0070\u0065"));if !_bdce {continue ;};switch _cdgg .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_ecf ._egf =_aeg ;_aebg =true ;};};if _aebg {break ;};};if !_aebg {return _ecf ;};_aedd ,_cee :=_a .GetDict (_ecf ._egf .Get ("\u0050\u0061\u0067e\u0073"));if !_cee {return _ecf ;};_ecf ._afge =_aedd ;_daab ,_cee :=_a .GetArray (_aedd .Get ("\u004b\u0069\u0064\u0073"));if !_cee {return _ecf ;};for _ ,_daag :=range _daab .Elements (){_afca ,_affe :=_a .GetIndirect (_daag );if !_affe {break ;};_ecf ._ebdf =append (_ecf ._ebdf ,_afca );};return _ecf ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ffb *CombineDuplicateDirectObjects )Optimize (objects []_a .PdfObject )(_eecd []_a .PdfObject ,_dcc error ){_aadd (objects );_gfe :=make (map[string ][]*_a .PdfObjectDictionary );var _dgg func (_fba *_a .PdfObjectDictionary );_dgg =func (_gga *_a .PdfObjectDictionary ){for _ ,_ggb :=range _gga .Keys (){_abf :=_gga .Get (_ggb );if _bcca ,_ddb :=_abf .(*_a .PdfObjectDictionary );_ddb {_gcg :=_f .New ();_gcg .Write ([]byte (_bcca .WriteString ()));_bbd :=string (_gcg .Sum (nil ));_gfe [_bbd ]=append (_gfe [_bbd ],_bcca );_dgg (_bcca );};};};for _ ,_ggac :=range objects {_bef ,_ced :=_ggac .(*_a .PdfIndirectObject );if !_ced {continue ;};if _cd ,_abe :=_bef .PdfObject .(*_a .PdfObjectDictionary );_abe {_dgg (_cd );};};_ggfd :=make ([]_a .PdfObject ,0,len (_gfe ));_fcg :=make (map[_a .PdfObject ]_a .PdfObject );for _ ,_fca :=range _gfe {if len (_fca )< 2{continue ;};_cabf :=_a .MakeDict ();_cabf .Merge (_fca [0]);_ec :=_a .MakeIndirectObject (_cabf );_ggfd =append (_ggfd ,_ec );for _bda :=0;_bda < len (_fca );_bda ++{_geg :=_fca [_bda ];_fcg [_geg ]=_ec ;};};_eecd =make ([]_a .PdfObject ,len (objects ));copy (_eecd ,objects );_eecd =append (_ggfd ,_eecd ...);_edfb (_eecd ,_fcg );return _eecd ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_ef []_bf .Optimizer };

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_geb *CleanContentstream )Optimize (objects []_a .PdfObject )(_bg []_a .PdfObject ,_cg error ){_ea :=map[*_a .PdfObjectStream ]struct{}{};var _cgg []*_a .PdfObjectStream ;_gef :=func (_daa *_a .PdfObjectStream ){if _ ,_dgd :=_ea [_daa ];!_dgd {_ea [_daa ]=struct{}{};_cgg =append (_cgg ,_daa );};};for _ ,_cb :=range objects {switch _gfb :=_cb .(type ){case *_a .PdfIndirectObject :switch _fb :=_gfb .PdfObject .(type ){case *_a .PdfObjectDictionary :if _de ,_eee :=_a .GetName (_fb .Get ("\u0054\u0079\u0070\u0065"));!_eee ||_de .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _aca ,_eg :=_a .GetStream (_fb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_eg {_gef (_aca );}else if _ega ,_eag :=_a .GetArray (_fb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_eag {for _ ,_gfa :=range _ega .Elements (){if _ebc ,_ag :=_a .GetStream (_gfa );_ag {_gef (_ebc );};};};};case *_a .PdfObjectStream :if _baa ,_dcf :=_a .GetName (_gfb .Get ("\u0054\u0079\u0070\u0065"));!_dcf ||_baa .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _bfd ,_gfd :=_a .GetName (_gfb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));!_gfd ||_bfd .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_gef (_gfb );};};for _ ,_afb :=range _cgg {_cg =_dg (_afb );if _cg !=nil {return nil ,_cg ;};};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fefc *CombineDuplicateStreams )Optimize (objects []_a .PdfObject )(_ddaa []_a .PdfObject ,_fbg error ){_bface :=make (map[_a .PdfObject ]_a .PdfObject );_gcc :=make (map[_a .PdfObject ]struct{});_gdeb :=make (map[string ][]*_a .PdfObjectStream );for _ ,_dfb :=range objects {if _eca ,_caf :=_dfb .(*_a .PdfObjectStream );_caf {_ggc :=_f .New ();_ggc .Write ([]byte (_eca .Stream ));_dbg :=string (_ggc .Sum (nil ));_gdeb [_dbg ]=append (_gdeb [_dbg ],_eca );};};for _ ,_accg :=range _gdeb {if len (_accg )< 2{continue ;};_dccf :=_accg [0];for _gab :=1;_gab < len (_accg );_gab ++{_fff :=_accg [_gab ];_bface [_fff ]=_dccf ;_gcc [_fff ]=struct{}{};};};_ddaa =make ([]_a .PdfObject ,0,len (objects )-len (_gcc ));for _ ,_abb :=range objects {if _ ,_aff :=_gcc [_abb ];_aff {continue ;};_ddaa =append (_ddaa ,_abb );};_edfb (_ddaa ,_bface );return _ddaa ,nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _ecga (_dee *_a .PdfObjectStream ,_gbc float64 )error {_bcgb ,_bdg :=_bf .NewXObjectImageFromStream (_dee );if _bdg !=nil {return _bdg ;};_abgb ,_bdg :=_bcgb .ToImage ();if _bdg !=nil {return _bdg ;};_abd ,_bdg :=_abgb .ToGoImage ();if _bdg !=nil {return _bdg ;};_caeb :=int (_eb .RoundToEven (float64 (_abgb .Width )*_gbc ));_bdc :=int (_eb .RoundToEven (float64 (_abgb .Height )*_gbc ));_dcfg :=_c .Rect (0,0,_caeb ,_bdc );var _aeeg _d .Image ;var _ffgg func (_c .Image )(*_bf .Image ,error );switch _bcgb .ColorSpace .String (){case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_aeeg =_c .NewRGBA (_dcfg );_ffgg =_bf .ImageHandling .NewImageFromGoImage ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_aeeg =_c .NewGray (_dcfg );_ffgg =_bf .ImageHandling .NewGrayImageFromGoImage ;default:return _g .Errorf ("\u006f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_bcgb .ColorSpace .String ());};_d .CatmullRom .Scale (_aeeg ,_aeeg .Bounds (),_abd ,_abd .Bounds (),_d .Over ,&_d .Options {});if _abgb ,_bdg =_ffgg (_aeeg );_bdg !=nil {return _bdg ;};_bfdb :=_a .MakeDict ();_bfdb .Set ("\u0051u\u0061\u006c\u0069\u0074\u0079",_a .MakeInteger (100));_bfdb .Set ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr",_a .MakeInteger (1));_bcgb .Filter .UpdateParams (_bfdb );if _bdg =_bcgb .SetImage (_abgb ,nil );_bdg !=nil {return _bdg ;};_bcgb .ToPdfObject ();return nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};func _dg (_acd *_a .PdfObjectStream )error {_ge ,_ab :=_a .DecodeStream (_acd );if _ab !=nil {return _ab ;};_eec :=_ga .NewContentStreamParser (string (_ge ));_aa ,_ab :=_eec .Parse ();if _ab !=nil {return _ab ;};_aa =_gf (_aa );_ce :=_aa .Bytes ();if len (_ce )>=len (_ge ){return nil ;};_edf ,_ab :=_a .MakeStream (_aa .Bytes (),_a .NewFlateEncoder ());if _ab !=nil {return _ab ;};_acd .Stream =_edf .Stream ;_acd .Merge (_edf .PdfObjectDictionary );return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ccg *ImagePPI )Optimize (objects []_a .PdfObject )(_ddc []_a .PdfObject ,_gac error ){if _ccg .ImageUpperPPI <=0{return objects ,nil ;};_cdg :=_ffbf (objects );if len (_cdg )==0{return objects ,nil ;};_bafc :=make (map[_a .PdfObject ]struct{});for _ ,_bccd :=range _cdg {_aadb :=_bccd .Stream .PdfObjectDictionary .Get (_a .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_bafc [_aadb ]=struct{}{};};_edb :=make (map[*_a .PdfObjectStream ]*imageInfo );for _ ,_afg :=range _cdg {_edb [_afg .Stream ]=_afg ;};var _gcd *_a .PdfObjectDictionary ;for _ ,_eegba :=range objects {if _eeef ,_aagb :=_a .GetDict (_eegba );_gcd ==nil &&_aagb {if _cgfd ,_acec :=_a .GetName (_eeef .Get (_a .PdfObjectName ("\u0054\u0079\u0070\u0065")));_acec &&*_cgfd =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_gcd =_eeef ;};};};if _gcd ==nil {return objects ,nil ;};_bdbf ,_gad :=_a .GetDict (_gcd .Get (_a .PdfObjectName ("\u0050\u0061\u0067e\u0073")));if !_gad {return objects ,nil ;};_bacb ,_egdd :=_a .GetArray (_bdbf .Get (_a .PdfObjectName ("\u004b\u0069\u0064\u0073")));if !_egdd {return objects ,nil ;};_agd :=make (map[string ]*imageInfo );for _ ,_eagg :=range _bacb .Elements (){_cafb ,_cbf :=_a .GetDict (_eagg );if !_cbf {continue ;};_adcf ,_agc :=_a .GetArray (_cafb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if !_agc {continue ;};_bcbc ,_fgfg :=_a .GetDict (_cafb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_fgfg {continue ;};_caa ,_fceg :=_a .GetDict (_bcbc .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_fceg {continue ;};_bee :=_caa .Keys ();for _ ,_bdcb :=range _bee {if _ded ,_fae :=_a .GetStream (_caa .Get (_bdcb ));_fae {if _ceb ,_efd :=_edb [_ded ];_efd {_agd [string (_bdcb )]=_ceb ;};};};for _ ,_beca :=range _adcf .Elements (){if _dcfa ,_daaf :=_a .GetStream (_beca );_daaf {_cff ,_dagc :=_a .NewEncoderFromStream (_dcfa );if _dagc !=nil {return nil ,_dagc ;};_cbc ,_dagc :=_cff .DecodeStream (_dcfa );if _dagc !=nil {return nil ,_dagc ;};_ddcc :=_ga .NewContentStreamParser (string (_cbc ));_ebg ,_dagc :=_ddcc .Parse ();if _dagc !=nil {return nil ,_dagc ;};_ead ,_bga :=1.0,1.0;for _ ,_cdf :=range *_ebg {if _cdf .Operand =="\u0051"{_ead ,_bga =1.0,1.0;};if _cdf .Operand =="\u0063\u006d"&&len (_cdf .Params )==6{if _cfbb ,_gccf :=_a .GetFloatVal (_cdf .Params [0]);_gccf {_ead =_ead *_cfbb ;};if _bbacc ,_cge :=_a .GetFloatVal (_cdf .Params [3]);_cge {_bga =_bga *_bbacc ;};if _dcgd ,_dfaa :=_a .GetIntVal (_cdf .Params [0]);_dfaa {_ead =_ead *float64 (_dcgd );};if _efad ,_cgbf :=_a .GetIntVal (_cdf .Params [3]);_cgbf {_bga =_bga *float64 (_efad );};};if _cdf .Operand =="\u0044\u006f"&&len (_cdf .Params )==1{_cfg ,_eab :=_a .GetName (_cdf .Params [0]);if !_eab {continue ;};if _eeba ,_adaa :=_agd [string (*_cfg )];_adaa {_dcb ,_fgeg :=_ead /72.0,_bga /72.0;_bagf ,_dea :=float64 (_eeba .Width )/_dcb ,float64 (_eeba .Height )/_fgeg ;if _dcb ==0||_fgeg ==0{_bagf =72.0;_dea =72.0;};_eeba .PPI =_eb .Max (_eeba .PPI ,_bagf );_eeba .PPI =_eb .Max (_eeba .PPI ,_dea );};};};};};};for _ ,_eabd :=range _cdg {if _ ,_dgcb :=_bafc [_eabd .Stream ];_dgcb {continue ;};if _eabd .PPI <=_ccg .ImageUpperPPI {continue ;};_ebbb :=_ccg .ImageUpperPPI /_eabd .PPI ;if _acf :=_ecga (_eabd .Stream ,_ebbb );_acf !=nil {_ebb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_acf );}else {if _cgac ,_afd :=_a .GetStream (_eabd .Stream .PdfObjectDictionary .Get (_a .PdfObjectName ("\u0053\u004d\u0061s\u006b")));_afd {if _bbde :=_ecga (_cgac ,_ebbb );_bbde !=nil {return nil ,_bbde ;};};};};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_adb *ObjectStreams )Optimize (objects []_a .PdfObject )(_agdc []_a .PdfObject ,_bgc error ){_daca :=&_a .PdfObjectStreams {};_agdg :=make ([]_a .PdfObject ,0,len (objects ));for _ ,_cbfd :=range objects {if _egb ,_degd :=_cbfd .(*_a .PdfIndirectObject );_degd &&_egb .GenerationNumber ==0{_daca .Append (_cbfd );}else {_agdg =append (_agdg ,_cbfd );};};if _daca .Len ()==0{return _agdg ,nil ;};_agdc =make ([]_a .PdfObject ,0,len (_agdg )+_daca .Len ()+1);if _daca .Len ()> 1{_agdc =append (_agdc ,_daca );};_agdc =append (_agdc ,_daca .Elements ()...);_agdc =append (_agdc ,_agdg ...);return _agdc ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gdfg *CombineIdenticalIndirectObjects )Optimize (objects []_a .PdfObject )(_cfe []_a .PdfObject ,_cedd error ){_aadd (objects );_eage :=make (map[_a .PdfObject ]_a .PdfObject );_acg :=make (map[_a .PdfObject ]struct{});_ggfa :=make (map[string ][]*_a .PdfIndirectObject );for _ ,_fdf :=range objects {_afec ,_dfe :=_fdf .(*_a .PdfIndirectObject );if !_dfe {continue ;};if _cea ,_ggg :=_afec .PdfObject .(*_a .PdfObjectDictionary );_ggg {if _fce ,_cbg :=_cea .Get ("\u0054\u0079\u0070\u0065").(*_a .PdfObjectName );_cbg &&*_fce =="\u0050\u0061\u0067\u0065"{continue ;};_cege :=_f .New ();_cege .Write ([]byte (_cea .WriteString ()));_cae :=string (_cege .Sum (nil ));_ggfa [_cae ]=append (_ggfa [_cae ],_afec );};};for _ ,_cac :=range _ggfa {if len (_cac )< 2{continue ;};_ddg :=_cac [0];for _fceb :=1;_fceb < len (_cac );_fceb ++{_bcf :=_cac [_fceb ];_eage [_bcf ]=_ddg ;_acg [_bcf ]=struct{}{};};};_cfe =make ([]_a .PdfObject ,0,len (objects )-len (_acg ));for _ ,_dbgc :=range objects {if _ ,_cgc :=_acg [_dbgc ];_cgc {continue ;};_cfe =append (_cfe ,_dbgc );};_edfb (_cfe ,_eage );return _cfe ,nil ;};

// Append appends optimizers to the chain.
func (_da *Chain )Append (optimizers ..._bf .Optimizer ){_da ._ef =append (_da ._ef ,optimizers ...)};func _edfb (_becb []_a .PdfObject ,_cfd map[_a .PdfObject ]_a .PdfObject ){if _cfd ==nil ||len (_cfd )==0{return ;};for _fgea ,_fdd :=range _becb {if _bad ,_abad :=_cfd [_fdd ];_abad {_becb [_fgea ]=_bad ;continue ;};_cfd [_fdd ]=_fdd ;switch _cad :=_fdd .(type ){case *_a .PdfObjectArray :_eeee :=make ([]_a .PdfObject ,_cad .Len ());copy (_eeee ,_cad .Elements ());_edfb (_eeee ,_cfd );for _eebg ,_aef :=range _eeee {_cad .Set (_eebg ,_aef );};case *_a .PdfObjectStreams :_edfb (_cad .Elements (),_cfd );case *_a .PdfObjectStream :_beb :=[]_a .PdfObject {_cad .PdfObjectDictionary };_edfb (_beb ,_cfd );_cad .PdfObjectDictionary =_beb [0].(*_a .PdfObjectDictionary );case *_a .PdfObjectDictionary :_bage :=_cad .Keys ();_ggbd :=make ([]_a .PdfObject ,len (_bage ));for _cbe ,_feab :=range _bage {_ggbd [_cbe ]=_cad .Get (_feab );};_edfb (_ggbd ,_cfd );for _gded ,_gada :=range _bage {_cad .Set (_gada ,_ggbd [_gded ]);};case *_a .PdfIndirectObject :_dbgb :=[]_a .PdfObject {_cad .PdfObject };_edfb (_dbgb ,_cfd );_cad .PdfObject =_dbgb [0];};};};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};