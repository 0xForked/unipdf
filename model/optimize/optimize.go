//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_cg "bytes";_fg "crypto/md5";_g "errors";_e "github.com/unidoc/unipdf/v3/common";_ec "github.com/unidoc/unipdf/v3/contentstream";_gb "github.com/unidoc/unipdf/v3/core";_cd "github.com/unidoc/unipdf/v3/extractor";_c "github.com/unidoc/unipdf/v3/internal/imageutil";
_dd "github.com/unidoc/unipdf/v3/internal/textencoding";_gg "github.com/unidoc/unipdf/v3/model";_b "github.com/unidoc/unitype";_f "golang.org/x/image/draw";_fa "math";);

// Optimize optimizes PDF objects to decrease PDF size.
func (_deae *ObjectStreams )Optimize (objects []_gb .PdfObject )(_dfab []_gb .PdfObject ,_dfg error ){_ggg :=&_gb .PdfObjectStreams {};_gaga :=make ([]_gb .PdfObject ,0,len (objects ));for _ ,_egd :=range objects {if _fad ,_eaba :=_egd .(*_gb .PdfIndirectObject );
_eaba &&_fad .GenerationNumber ==0{_ggg .Append (_egd );}else {_gaga =append (_gaga ,_egd );};};if _ggg .Len ()==0{return _gaga ,nil ;};_dfab =make ([]_gb .PdfObject ,0,len (_gaga )+_ggg .Len ()+1);if _ggg .Len ()> 1{_dfab =append (_dfab ,_ggg );};_dfab =append (_dfab ,_ggg .Elements ()...);
_dfab =append (_dfab ,_gaga ...);return _dfab ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gce *CombineDuplicateDirectObjects )Optimize (objects []_gb .PdfObject )(_fgb []_gb .PdfObject ,_ebf error ){_ebfc (objects );_cdbg :=make (map[string ][]*_gb .PdfObjectDictionary );var _dcaf func (_deeg *_gb .PdfObjectDictionary );_dcaf =func (_cfea *_gb .PdfObjectDictionary ){for _ ,_bac :=range _cfea .Keys (){_ddgg :=_cfea .Get (_bac );
if _eeg ,_cgd :=_ddgg .(*_gb .PdfObjectDictionary );_cgd {_dbfc :=_fg .New ();_dbfc .Write ([]byte (_eeg .WriteString ()));_bafc :=string (_dbfc .Sum (nil ));_cdbg [_bafc ]=append (_cdbg [_bafc ],_eeg );_dcaf (_eeg );};};};for _ ,_ccda :=range objects {_gec ,_gdcc :=_ccda .(*_gb .PdfIndirectObject );
if !_gdcc {continue ;};if _deea ,_dec :=_gec .PdfObject .(*_gb .PdfObjectDictionary );_dec {_dcaf (_deea );};};_ace :=make ([]_gb .PdfObject ,0,len (_cdbg ));_abc :=make (map[_gb .PdfObject ]_gb .PdfObject );for _ ,_cad :=range _cdbg {if len (_cad )< 2{continue ;
};_bga :=_gb .MakeDict ();_bga .Merge (_cad [0]);_aee :=_gb .MakeIndirectObject (_bga );_ace =append (_ace ,_aee );for _fda :=0;_fda < len (_cad );_fda ++{_fcga :=_cad [_fda ];_abc [_fcga ]=_aee ;};};_fgb =make ([]_gb .PdfObject ,len (objects ));copy (_fgb ,objects );
_fgb =append (_ace ,_fgb ...);_faaa (_fgb ,_abc );return _fgb ,nil ;};func _agbg (_beb _gb .PdfObject )[]content {if _beb ==nil {return nil ;};_eadg ,_adg :=_gb .GetArray (_beb );if !_adg {_e .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _ff []content ;for _ ,_dbge :=range _eadg .Elements (){_bab ,_gdbe :=_gb .GetDict (_dbge );if !_gdbe {_e .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_ega ,_gdbe :=_gb .GetDict (_bab .Get ("\u0041\u0050"));if !_gdbe {_e .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_fcg :=_gb .TraceToDirectObject (_ega .Get ("\u004e"));
if _fcg ==nil {_e .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _dabc *_gb .PdfObjectStream ;switch _ddff :=_fcg .(type ){case *_gb .PdfObjectDictionary :_bcce ,_cfe :=_gb .GetName (_bab .Get ("\u0041\u0053"));
if !_cfe {_e .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_dabc ,_cfe =_gb .GetStream (_ddff .Get (*_bcce ));if !_cfe {_e .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_gb .PdfObjectStream :_dabc =_ddff ;};if _dabc ==nil {_e .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_bdea ,_eadf :=_gg .NewXObjectFormFromStream (_dabc );if _eadf !=nil {_e .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_eadf );
continue ;};_abf ,_eadf :=_bdea .GetContentStream ();if _eadf !=nil {_e .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_eadf );continue ;};_ff =append (_ff ,content {_ddf :string (_abf ),_eaac :_bdea .Resources });
};return _ff ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_geb *CombineIdenticalIndirectObjects )Optimize (objects []_gb .PdfObject )(_dadf []_gb .PdfObject ,_acb error ){_ebfc (objects );_cfgc :=make (map[_gb .PdfObject ]_gb .PdfObject );_gedb :=make (map[_gb .PdfObject ]struct{});_ccfb :=make (map[string ][]*_gb .PdfIndirectObject );
for _ ,_efb :=range objects {_dgg ,_bcff :=_efb .(*_gb .PdfIndirectObject );if !_bcff {continue ;};if _fag ,_ccdc :=_dgg .PdfObject .(*_gb .PdfObjectDictionary );_ccdc {if _ceb ,_debf :=_fag .Get ("\u0054\u0079\u0070\u0065").(*_gb .PdfObjectName );_debf &&*_ceb =="\u0050\u0061\u0067\u0065"{continue ;
};_cdbge :=_fg .New ();_cdbge .Write ([]byte (_fag .WriteString ()));_dea :=string (_cdbge .Sum (nil ));_ccfb [_dea ]=append (_ccfb [_dea ],_dgg );};};for _ ,_eab :=range _ccfb {if len (_eab )< 2{continue ;};_gdg :=_eab [0];for _fbde :=1;_fbde < len (_eab );
_fbde ++{_bfe :=_eab [_fbde ];_cfgc [_bfe ]=_gdg ;_gedb [_bfe ]=struct{}{};};};_dadf =make ([]_gb .PdfObject ,0,len (objects )-len (_gedb ));for _ ,_cdg :=range objects {if _ ,_cdga :=_gedb [_cdg ];_cdga {continue ;};_dadf =append (_dadf ,_cdg );};_faaa (_dadf ,_cfgc );
return _dadf ,nil ;};func _faaa (_daa []_gb .PdfObject ,_egaa map[_gb .PdfObject ]_gb .PdfObject ){if len (_egaa )==0{return ;};for _dbb ,_cfcg :=range _daa {if _dcg ,_ggaf :=_egaa [_cfcg ];_ggaf {_daa [_dbb ]=_dcg ;continue ;};_egaa [_cfcg ]=_cfcg ;switch _eaf :=_cfcg .(type ){case *_gb .PdfObjectArray :_abcd :=make ([]_gb .PdfObject ,_eaf .Len ());
copy (_abcd ,_eaf .Elements ());_faaa (_abcd ,_egaa );for _bebdg ,_efgd :=range _abcd {_eaf .Set (_bebdg ,_efgd );};case *_gb .PdfObjectStreams :_faaa (_eaf .Elements (),_egaa );case *_gb .PdfObjectStream :_abcf :=[]_gb .PdfObject {_eaf .PdfObjectDictionary };
_faaa (_abcf ,_egaa );_eaf .PdfObjectDictionary =_abcf [0].(*_gb .PdfObjectDictionary );case *_gb .PdfObjectDictionary :_gggb :=_eaf .Keys ();_fca :=make ([]_gb .PdfObject ,len (_gggb ));for _dafa ,_dcd :=range _gggb {_fca [_dafa ]=_eaf .Get (_dcd );};
_faaa (_fca ,_egaa );for _aaac ,_cdcd :=range _gggb {_eaf .Set (_cdcd ,_fca [_aaac ]);};case *_gb .PdfIndirectObject :_ade :=[]_gb .PdfObject {_eaf .PdfObject };_faaa (_ade ,_egaa );_eaf .PdfObject =_ade [0];};};};type imageModifications struct{Scale float64 ;
Encoding _gb .StreamEncoder ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_aea :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_aea .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_aea .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_gfe :=new (ImagePPI );
_gfe .ImageUpperPPI =options .ImageUpperPPI ;_aea .Append (_gfe );};if options .ImageQuality > 0{_acc :=new (Image );_acc .ImageQuality =options .ImageQuality ;_aea .Append (_acc );};if options .CombineDuplicateDirectObjects {_aea .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_aea .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_aea .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_aea .Append (new (ObjectStreams ));
};if options .CompressStreams {_aea .Append (new (CompressStreams ));};return _aea ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fbf *CleanFonts )Optimize (objects []_gb .PdfObject )(_dbg []_gb .PdfObject ,_fcb error ){var _ccbb map[*_gb .PdfObjectStream ]struct{};if _fbf .Subset {var _acd error ;_ccbb ,_acd =_cgfc (objects );if _acd !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_acd );
return nil ,_acd ;};};for _ ,_fdc :=range objects {_ebe ,_fdd :=_gb .GetStream (_fdc );if !_fdd {continue ;};if _ ,_dbd :=_ccbb [_ebe ];_dbd {continue ;};_adae ,_fbd :=_gb .NewEncoderFromStream (_ebe );if _fbd !=nil {_e .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_fbd );
continue ;};_dacd ,_fbd :=_adae .DecodeStream (_ebe );if _fbd !=nil {_e .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_fbd );
continue ;};if len (_dacd )< 4{continue ;};_fba :=string (_dacd [:4]);if _fba =="\u004f\u0054\u0054\u004f"{continue ;};if _fba !="\u0000\u0001\u0000\u0000"&&_fba !="\u0074\u0072\u0075\u0065"{continue ;};_dfbf ,_fbd :=_b .Parse (_cg .NewReader (_dacd ));
if _fbd !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_fbd );continue ;};_fbd =_dfbf .Optimize ();
if _fbd !=nil {_e .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_fbd );continue ;};var _ggb _cg .Buffer ;_fbd =_dfbf .Write (&_ggb );
if _fbd !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_fbd );continue ;};if _ggb .Len ()> len (_dacd ){_e .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_ged ,_fbd :=_gb .MakeStream (_ggb .Bytes (),_gb .NewFlateEncoder ());if _fbd !=nil {continue ;};*_ebe =*_ged ;_ebe .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_gb .MakeInteger (int64 (_ggb .Len ())));};return objects ,nil ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cfead *CompressStreams )Optimize (objects []_gb .PdfObject )(_ccg []_gb .PdfObject ,_acee error ){_ccg =make ([]_gb .PdfObject ,len (objects ));copy (_ccg ,objects );for _ ,_fce :=range objects {_bdf ,_cdd :=_gb .GetStream (_fce );if !_cdd {continue ;
};if _ccef :=_bdf .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_ccef !=nil {if _ ,_bdag :=_gb .GetName (_ccef );_bdag {continue ;};if _eca ,_ecca :=_gb .GetArray (_ccef );_ecca &&_eca .Len ()> 0{continue ;};};_bccf :=_gb .NewFlateEncoder ();var _cdedd []byte ;
_cdedd ,_acee =_bccf .EncodeBytes (_bdf .Stream );if _acee !=nil {return _ccg ,_acee ;};_efdd :=_bccf .MakeStreamDict ();if len (_cdedd )+len (_efdd .WriteString ())< len (_bdf .Stream ){_bdf .Stream =_cdedd ;_bdf .PdfObjectDictionary .Merge (_efdd );_bdf .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_gb .MakeInteger (int64 (len (_bdf .Stream ))));
};};return _ccg ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};func _ebfc (_dddb []_gb .PdfObject ){for _cec ,_gdccc :=range _dddb {switch _ecce :=_gdccc .(type ){case *_gb .PdfIndirectObject :_ecce .ObjectNumber =int64 (_cec +1);_ecce .GenerationNumber =0;case *_gb .PdfObjectStream :_ecce .ObjectNumber =int64 (_cec +1);
_ecce .GenerationNumber =0;case *_gb .PdfObjectStreams :_ecce .ObjectNumber =int64 (_cec +1);_ecce .GenerationNumber =0;};};};type objectStructure struct{_fae *_gb .PdfObjectDictionary ;_bad *_gb .PdfObjectDictionary ;_ffg []*_gb .PdfIndirectObject ;};


// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// Append appends optimizers to the chain.
func (_bg *Chain )Append (optimizers ..._gg .Optimizer ){_bg ._be =append (_bg ._be ,optimizers ...)};func _cgfc (_agc []_gb .PdfObject )(_bcf map[*_gb .PdfObjectStream ]struct{},_dad error ){_bcf =map[*_gb .PdfObjectStream ]struct{}{};_dabb :=map[*_gg .PdfFont ]struct{}{};
_eg :=_fdac (_agc );for _ ,_fe :=range _eg ._ffg {_abb ,_ba :=_gb .GetDict (_fe .PdfObject );if !_ba {continue ;};_eef ,_ba :=_gb .GetDict (_abb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_ba {continue ;};_gf ,_ :=_daeb (_abb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_deg ,_ga :=_gg .NewPdfPageResourcesFromDict (_eef );if _ga !=nil {return nil ,_ga ;};_gfg :=[]content {{_ddf :_gf ,_eaac :_deg }};_gae :=_agbg (_abb .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _gae !=nil {_gfg =append (_gfg ,_gae ...);};for _ ,_ada :=range _gfg {_fc ,_fee :=_cd .NewFromContents (_ada ._ddf ,_ada ._eaac );
if _fee !=nil {return nil ,_fee ;};_ddg ,_ ,_ ,_fee :=_fc .ExtractPageText ();if _fee !=nil {return nil ,_fee ;};for _ ,_egc :=range _ddg .Marks ().Elements (){if _egc .Font ==nil {continue ;};if _ ,_bde :=_dabb [_egc .Font ];!_bde {_dabb [_egc .Font ]=struct{}{};
};};};};_ccb :=map[*_gb .PdfObjectStream ][]*_gg .PdfFont {};for _edd :=range _dabb {_ecc :=_edd .FontDescriptor ();if _ecc ==nil ||_ecc .FontFile2 ==nil {continue ;};_gfa ,_dbf :=_gb .GetStream (_ecc .FontFile2 );if !_dbf {continue ;};_ccb [_gfa ]=append (_ccb [_gfa ],_edd );
};for _fbb :=range _ccb {var _bda []rune ;var _ead []_b .GlyphIndex ;for _ ,_abd :=range _ccb [_fbb ]{switch _ggag :=_abd .Encoder ().(type ){case *_dd .IdentityEncoder :_dca :=_ggag .RegisteredRunes ();_cga :=make ([]_b .GlyphIndex ,len (_dca ));for _add ,_cae :=range _dca {_cga [_add ]=_b .GlyphIndex (_cae );
};_ead =append (_ead ,_cga ...);case *_dd .TrueTypeFontEncoder :_eee :=_ggag .RegisteredRunes ();_bda =append (_bda ,_eee ...);case _dd .SimpleEncoder :_aab :=_ggag .Charcodes ();for _ ,_cef :=range _aab {_caad ,_fec :=_ggag .CharcodeToRune (_cef );if !_fec {_e .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_cef );
continue ;};_bda =append (_bda ,_caad );};};};_dad =_cded (_fbb ,_bda ,_ead );if _dad !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_dad );
return nil ,_dad ;};_bcf [_fbb ]=struct{}{};};return _bcf ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ffd *CombineDuplicateStreams )Optimize (objects []_gb .PdfObject )(_ege []_gb .PdfObject ,_aff error ){_eaca :=make (map[_gb .PdfObject ]_gb .PdfObject );_abba :=make (map[_gb .PdfObject ]struct{});_cbb :=make (map[string ][]*_gb .PdfObjectStream );
for _ ,_gedf :=range objects {if _ccf ,_fff :=_gedf .(*_gb .PdfObjectStream );_fff {_eba :=_fg .New ();_eba .Write (_ccf .Stream );_eba .Write ([]byte (_ccf .PdfObjectDictionary .WriteString ()));_bf :=string (_eba .Sum (nil ));_cbb [_bf ]=append (_cbb [_bf ],_ccf );
};};for _ ,_feb :=range _cbb {if len (_feb )< 2{continue ;};_ddge :=_feb [0];for _gcdg :=1;_gcdg < len (_feb );_gcdg ++{_gff :=_feb [_gcdg ];_eaca [_gff ]=_ddge ;_abba [_gff ]=struct{}{};};};_ege =make ([]_gb .PdfObject ,0,len (objects )-len (_abba ));
for _ ,_cff :=range objects {if _ ,_debg :=_abba [_cff ];_debg {continue ;};_ege =append (_ege ,_cff );};_faaa (_ege ,_eaca );return _ege ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gbea *Image )Optimize (objects []_gb .PdfObject )(_aceg []_gb .PdfObject ,_efc error ){if _gbea .ImageQuality <=0{return objects ,nil ;};_age :=_acg (objects );if len (_age )==0{return objects ,nil ;};_dgd :=make (map[_gb .PdfObject ]_gb .PdfObject );
_gdgb :=make (map[_gb .PdfObject ]struct{});for _ ,_fdga :=range _age {_adc :=_fdga .Stream .Get ("\u0053\u004d\u0061s\u006b");_gdgb [_adc ]=struct{}{};};for _fbab ,_gfac :=range _age {_gagf :=_gfac .Stream ;if _ ,_begb :=_gdgb [_gagf ];_begb {continue ;
};_bfa ,_cdbf :=_gg .NewXObjectImageFromStream (_gagf );if _cdbf !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cdbf );continue ;};switch _bfa .Filter .(type ){case *_gb .JBIG2Encoder :continue ;case *_gb .CCITTFaxEncoder :continue ;
};_dbfb ,_cdbf :=_bfa .ToImage ();if _cdbf !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cdbf );continue ;};_aefg :=_gb .NewDCTEncoder ();_aefg .ColorComponents =_dbfb .ColorComponents ;_aefg .Quality =_gbea .ImageQuality ;
_aefg .BitsPerComponent =_gfac .BitsPerComponent ;_aefg .Width =_gfac .Width ;_aefg .Height =_gfac .Height ;_fga ,_cdbf :=_aefg .EncodeBytes (_dbfb .Data );if _cdbf !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cdbf );
continue ;};var _aede _gb .StreamEncoder ;_aede =_aefg ;{_gebf :=_gb .NewFlateEncoder ();_cbbf :=_gb .NewMultiEncoder ();_cbbf .AddEncoder (_gebf );_cbbf .AddEncoder (_aefg );_acf ,_baa :=_cbbf .EncodeBytes (_dbfb .Data );if _baa !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_baa );
continue ;};if len (_acf )< len (_fga ){_e .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_fga ),len (_acf ),len (_gagf .Stream ));
_fga =_acf ;_aede =_cbbf ;};};_bbb :=len (_gagf .Stream );if _bbb < len (_fga ){continue ;};_eae :=&_gb .PdfObjectStream {Stream :_fga };_eae .PdfObjectReference =_gagf .PdfObjectReference ;_eae .PdfObjectDictionary =_gb .MakeDict ();_eae .Merge (_gagf .PdfObjectDictionary );
_eae .Merge (_aede .MakeStreamDict ());_eae .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_gb .MakeInteger (int64 (len (_fga ))));_dgd [_gagf ]=_eae ;_age [_fbab ].Stream =_eae ;};_aceg =make ([]_gb .PdfObject ,len (objects ));copy (_aceg ,objects );_faaa (_aceg ,_dgd );
return _aceg ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_be []_gg .Optimizer };func _fdac (_ggd []_gb .PdfObject )objectStructure {_ffcd :=objectStructure {};_gca :=false ;for _ ,_aac :=range _ggd {switch _aagc :=_aac .(type ){case *_gb .PdfIndirectObject :_fagf ,_fef :=_gb .GetDict (_aagc );
if !_fef {continue ;};_dcdb ,_fef :=_gb .GetName (_fagf .Get ("\u0054\u0079\u0070\u0065"));if !_fef {continue ;};switch _dcdb .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_ffcd ._fae =_fagf ;_gca =true ;};};if _gca {break ;};};if !_gca {return _ffcd ;
};_aec ,_dadc :=_gb .GetDict (_ffcd ._fae .Get ("\u0050\u0061\u0067e\u0073"));if !_dadc {return _ffcd ;};_ffcd ._bad =_aec ;_adea ,_dadc :=_gb .GetArray (_aec .Get ("\u004b\u0069\u0064\u0073"));if !_dadc {return _ffcd ;};for _ ,_fdag :=range _adea .Elements (){_cgab ,_badd :=_gb .GetIndirect (_fdag );
if !_badd {break ;};_ffcd ._ffg =append (_ffcd ._ffg ,_cgab );};return _ffcd ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dc *Chain )Optimize (objects []_gb .PdfObject )(_cgf []_gb .PdfObject ,_de error ){_cb :=objects ;for _ ,_cc :=range _dc ._be {_bb ,_df :=_cc .Optimize (_cb );if _df !=nil {_e .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_df );
continue ;};_cb =_bb ;};return _cb ,nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_beg *CleanContentstream )Optimize (objects []_gb .PdfObject )(_aga []_gb .PdfObject ,_gd error ){_caa :=map[*_gb .PdfObjectStream ]struct{}{};var _dfb []*_gb .PdfObjectStream ;_ce :=func (_gbe *_gb .PdfObjectStream ){if _ ,_aa :=_caa [_gbe ];!_aa {_caa [_gbe ]=struct{}{};
_dfb =append (_dfb ,_gbe );};};_ea :=map[_gb .PdfObject ]bool {};_dac :=map[_gb .PdfObject ]bool {};for _ ,_dee :=range objects {switch _ef :=_dee .(type ){case *_gb .PdfIndirectObject :switch _aeb :=_ef .PdfObject .(type ){case *_gb .PdfObjectDictionary :if _cbg ,_cca :=_gb .GetName (_aeb .Get ("\u0054\u0079\u0070\u0065"));
!_cca ||_cbg .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _aef ,_bgb :=_gb .GetStream (_aeb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_bgb {_ce (_aef );}else if _gcdb ,_bd :=_gb .GetArray (_aeb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_bd {var _gee []*_gb .PdfObjectStream ;for _ ,_geef :=range _gcdb .Elements (){if _ab ,_cde :=_gb .GetStream (_geef );_cde {_gee =append (_gee ,_ab );};};if len (_gee )> 0{var _af _cg .Buffer ;for _ ,_gga :=range _gee {if _gge ,_ac :=_gb .DecodeStream (_gga );
_ac ==nil {_af .Write (_gge );};_ea [_gga ]=true ;};_db ,_edb :=_gb .MakeStream (_af .Bytes (),_gb .NewFlateEncoder ());if _edb !=nil {return nil ,_edb ;};_dac [_db ]=true ;_aeb .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_db );_ce (_db );
};};};case *_gb .PdfObjectStream :if _ecb ,_ee :=_gb .GetName (_ef .Get ("\u0054\u0079\u0070\u0065"));!_ee ||_ecb .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _dab ,_gdc :=_gb .GetName (_ef .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_gdc ||_dab .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_ce (_ef );};};for _ ,_bbg :=range _dfb {_gd =_ae (_bbg );if _gd !=nil {return nil ,_gd ;};};_aga =nil ;for _ ,_ad :=range objects {if _ea [_ad ]{continue ;};_aga =append (_aga ,_ad );};for _eaa :=range _dac {_aga =append (_aga ,_eaa );
};return _aga ,nil ;};func _cded (_gag *_gb .PdfObjectStream ,_baf []rune ,_edbg []_b .GlyphIndex )error {_gag ,_edf :=_gb .GetStream (_gag );if !_edf {_e .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _g .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gda ,_ccd :=_gb .DecodeStream (_gag );if _ccd !=nil {_e .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_ccd );
return _ccd ;};_fdg ,_ccd :=_b .Parse (_cg .NewReader (_gda ));if _ccd !=nil {_e .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_gag .Stream ));
return _ccd ;};_agd :=_edbg ;if len (_baf )> 0{_dcf :=_fdg .LookupRunes (_baf );_agd =append (_agd ,_dcf ...);};_fdg ,_ccd =_fdg .SubsetKeepIndices (_agd );if _ccd !=nil {_e .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_ccd );
return _ccd ;};var _cdc _cg .Buffer ;_ccd =_fdg .Write (&_cdc );if _ccd !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_ccd );return _ccd ;};if _cdc .Len ()> len (_gda ){_e .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_gaea ,_ccd :=_gb .MakeStream (_cdc .Bytes (),_gb .NewFlateEncoder ());if _ccd !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_ccd );return _ccd ;
};*_gag =*_gaea ;_gag .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_gb .MakeInteger (int64 (_cdc .Len ())));return nil ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};type content struct{_ddf string ;_eaac *_gg .PdfPageResources ;};func _gdf (_ecd *_gg .Image ,_gea float64 )(*_gg .Image ,error ){_fbbf ,_gdbc :=_ecd .ToGoImage ();if _gdbc !=nil {return nil ,_gdbc ;};var _acgg _c .Image ;
_cbba ,_eff :=_fbbf .(*_c .Monochrome );if _eff {if _gdbc =_cbba .ResolveDecode ();_gdbc !=nil {return nil ,_gdbc ;};_acgg ,_gdbc =_cbba .Scale (_gea );if _gdbc !=nil {return nil ,_gdbc ;};}else {_edadb :=int (_fa .RoundToEven (float64 (_ecd .Width )*_gea ));
_gab :=int (_fa .RoundToEven (float64 (_ecd .Height )*_gea ));_acgg ,_gdbc =_c .NewImage (_edadb ,_gab ,int (_ecd .BitsPerComponent ),_ecd .ColorComponents ,nil ,nil ,nil );if _gdbc !=nil {return nil ,_gdbc ;};_f .CatmullRom .Scale (_acgg ,_acgg .Bounds (),_fbbf ,_fbbf .Bounds (),_f .Over ,&_f .Options {});
};_fbdf :=_acgg .Base ();_eadgd :=&_gg .Image {Width :int64 (_fbdf .Width ),Height :int64 (_fbdf .Height ),BitsPerComponent :int64 (_fbdf .BitsPerComponent ),ColorComponents :_fbdf .ColorComponents ,Data :_fbdf .Data };_eadgd .SetDecode (_fbdf .Decode );
_eadgd .SetAlpha (_fbdf .Alpha );return _eadgd ,nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};func _ae (_cbe *_gb .PdfObjectStream )error {_cce ,_cdb :=_gb .DecodeStream (_cbe );if _cdb !=nil {return _cdb ;};_ed :=_ec .NewContentStreamParser (string (_cce ));_dff ,_cdb :=_ed .Parse ();if _cdb !=nil {return _cdb ;
};_dff =_gc (_dff );_eb :=_dff .Bytes ();if len (_eb )>=len (_cce ){return nil ;};_da ,_cdb :=_gb .MakeStream (_dff .Bytes (),_gb .NewFlateEncoder ());if _cdb !=nil {return _cdb ;};_cbe .Stream =_da .Stream ;_cbe .Merge (_da .PdfObjectDictionary );return nil ;
};func _gc (_dce *_ec .ContentStreamOperations )*_ec .ContentStreamOperations {if _dce ==nil {return nil ;};_ca :=_ec .ContentStreamOperations {};for _ ,_fd :=range *_dce {switch _fd .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_fd .Params )==6{if _ag ,_gcd :=_gb .GetNumbersAsFloat (_fd .Params );_gcd ==nil {if _ag [0]==1&&_ag [1]==0&&_ag [2]==0&&_ag [3]==1{_fd =&_ec .ContentStreamOperation {Params :[]_gb .PdfObject {_fd .Params [4],_fd .Params [5]},Operand :"\u0054\u0064"};
};};};};_ca =append (_ca ,_fd );};return &_ca ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dffa *ImagePPI )Optimize (objects []_gb .PdfObject )(_efg []_gb .PdfObject ,_adcc error ){if _dffa .ImageUpperPPI <=0{return objects ,nil ;};_gdcg :=_acg (objects );if len (_gdcg )==0{return objects ,nil ;};_fbfd :=make (map[_gb .PdfObject ]struct{});
for _ ,_faf :=range _gdcg {_dcee :=_faf .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_fbfd [_dcee ]=struct{}{};};_dcec :=make (map[*_gb .PdfObjectStream ]*imageInfo );for _ ,_gfff :=range _gdcg {_dcec [_gfff .Stream ]=_gfff ;};var _fea *_gb .PdfObjectDictionary ;
for _ ,_gbcb :=range objects {if _bdg ,_eged :=_gb .GetDict (_gbcb );_fea ==nil &&_eged {if _fbbg ,_bed :=_gb .GetName (_bdg .Get ("\u0054\u0079\u0070\u0065"));_bed &&*_fbbg =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_fea =_bdg ;};};};if _fea ==nil {return objects ,nil ;
};_efdc ,_cebg :=_gb .GetDict (_fea .Get ("\u0050\u0061\u0067e\u0073"));if !_cebg {return objects ,nil ;};_efcd ,_efbf :=_gb .GetArray (_efdc .Get ("\u004b\u0069\u0064\u0073"));if !_efbf {return objects ,nil ;};for _ ,_cebe :=range _efcd .Elements (){_bba :=make (map[string ]*imageInfo );
_dbgb ,_cfb :=_gb .GetDict (_cebe );if !_cfb {continue ;};_ceac ,_ :=_daeb (_dbgb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_ceac )==0{continue ;};_dag ,_afc :=_gb .GetDict (_dbgb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_afc {continue ;};_eabf ,_ccdcc :=_gg .NewPdfPageResourcesFromDict (_dag );if _ccdcc !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_ccdcc );
continue ;};_gcf ,_cac :=_gb .GetDict (_dag .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_cac {continue ;};_dgb :=_gcf .Keys ();for _ ,_faa :=range _dgb {if _gfab ,_aag :=_gb .GetStream (_gcf .Get (_faa ));_aag {if _faff ,_ffb :=_dcec [_gfab ];_ffb {_bba [string (_faa )]=_faff ;
};};};_fdcc :=_ec .NewContentStreamParser (_ceac );_fde ,_ccdcc :=_fdcc .Parse ();if _ccdcc !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ccdcc );continue ;};_ebed :=_ec .NewContentStreamProcessor (*_fde );_ebed .AddHandler (_ec .HandlerConditionEnumAllOperands ,"",func (_fgc *_ec .ContentStreamOperation ,_daed _ec .GraphicsState ,_ggcf *_gg .PdfPageResources )error {switch _fgc .Operand {case "\u0044\u006f":if len (_fgc .Params )!=1{_e .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_fbbgd ,_cfd :=_gb .GetName (_fgc .Params [0]);if !_cfd {_e .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _gfgc ,_agg :=_bba [string (*_fbbgd )];_agg {_def :=_daed .CTM .ScalingFactorX ();_dfaa :=_daed .CTM .ScalingFactorY ();_gdbf ,_afa :=_def /72.0,_dfaa /72.0;_bebd ,_gffg :=float64 (_gfgc .Width )/_gdbf ,float64 (_gfgc .Height )/_afa ;if _gdbf ==0||_afa ==0{_bebd =72.0;
_gffg =72.0;};_gfgc .PPI =_fa .Max (_gfgc .PPI ,_bebd );_gfgc .PPI =_fa .Max (_gfgc .PPI ,_gffg );};};return nil ;});_ccdcc =_ebed .Process (_eabf );if _ccdcc !=nil {_e .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_ccdcc );
continue ;};};for _ ,_edfe :=range _gdcg {if _ ,_acbb :=_fbfd [_edfe .Stream ];_acbb {continue ;};if _edfe .PPI <=_dffa .ImageUpperPPI {continue ;};_caf ,_gbb :=_gg .NewXObjectImageFromStream (_edfe .Stream );if _gbb !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gbb );
continue ;};var _fcec imageModifications ;_fcec .Scale =_dffa .ImageUpperPPI /_edfe .PPI ;if _edfe .BitsPerComponent ==1&&_edfe .ColorComponents ==1{_bag :=_fa .Round (_edfe .PPI /_dffa .ImageUpperPPI );_dfbd :=_c .NextPowerOf2 (uint (_bag ));if _c .InDelta (float64 (_dfbd ),1/_fcec .Scale ,0.3){_fcec .Scale =float64 (1)/float64 (_dfbd );
};if _ ,_agaa :=_caf .Filter .(*_gb .JBIG2Encoder );!_agaa {_fcec .Encoding =_gb .NewJBIG2Encoder ();};};if _gbb =_bbf (_caf ,_fcec );_gbb !=nil {_e .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_gbb );
continue ;};_fcec .Encoding =nil ;if _efgc ,_abg :=_gb .GetStream (_edfe .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_abg {_ddfc ,_dfc :=_gg .NewXObjectImageFromStream (_efgc );if _dfc !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dfc );
continue ;};if _dfc =_bbf (_ddfc ,_fcec );_dfc !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dfc );continue ;};};};return objects ,nil ;};func _acg (_abdc []_gb .PdfObject )[]*imageInfo {_gbc :=_gb .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");
_cdcc :=make (map[*_gb .PdfObjectStream ]struct{});var _gfgg []*imageInfo ;for _ ,_eda :=range _abdc {_abe ,_gac :=_gb .GetStream (_eda );if !_gac {continue ;};if _ ,_edae :=_cdcc [_abe ];_edae {continue ;};_cdcc [_abe ]=struct{}{};_abef :=_abe .PdfObjectDictionary .Get (_gbc );
_ffc ,_gac :=_gb .GetName (_abef );if !_gac ||string (*_ffc )!="\u0049\u006d\u0061g\u0065"{continue ;};_cab :=&imageInfo {Stream :_abe ,BitsPerComponent :8};if _aed ,_bea :=_gb .GetIntVal (_abe .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));
_bea {_cab .BitsPerComponent =_aed ;};if _fgd ,_aeg :=_gb .GetIntVal (_abe .Get ("\u0057\u0069\u0064t\u0068"));_aeg {_cab .Width =_fgd ;};if _feg ,_ggc :=_gb .GetIntVal (_abe .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_ggc {_cab .Height =_feg ;};_abefc ,_dfa :=_gg .NewPdfColorspaceFromPdfObject (_abe .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));
if _dfa !=nil {_e .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_dfa );continue ;};if _abefc ==nil {_dbff ,_gedc :=_gb .GetName (_abe .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _gedc {switch _dbff .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_abefc =_gg .NewPdfColorspaceDeviceGray ();
_cab .BitsPerComponent =1;};};};switch _dabf :=_abefc .(type ){case *_gg .PdfColorspaceDeviceRGB :_cab .ColorComponents =3;case *_gg .PdfColorspaceDeviceGray :_cab .ColorComponents =1;default:_e .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_dabf );
continue ;};_gfgg =append (_gfgg ,_cab );};return _gfgg ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_gb .PdfObjectStream ;PPI float64 ;};func _daeb (_bbgeb _gb .PdfObject )(_aad string ,_affa []_gb .PdfObject ){var _bgg _cg .Buffer ;
switch _afe :=_bbgeb .(type ){case *_gb .PdfIndirectObject :_affa =append (_affa ,_afe );_bbgeb =_afe .PdfObject ;};switch _aagcc :=_bbgeb .(type ){case *_gb .PdfObjectStream :if _ffbd ,_geae :=_gb .DecodeStream (_aagcc );_geae ==nil {_bgg .Write (_ffbd );
_affa =append (_affa ,_aagcc );};case *_gb .PdfObjectArray :for _ ,_dfag :=range _aagcc .Elements (){switch _eafa :=_dfag .(type ){case *_gb .PdfObjectStream :if _dbgbd ,_fffg :=_gb .DecodeStream (_eafa );_fffg ==nil {_bgg .Write (_dbgbd );_affa =append (_affa ,_eafa );
};};};};return _bgg .String (),_affa ;};func _bbf (_edad *_gg .XObjectImage ,_eefa imageModifications )error {_eddc ,_ecf :=_edad .ToImage ();if _ecf !=nil {return _ecf ;};if _eefa .Scale !=0{_eddc ,_ecf =_gdf (_eddc ,_eefa .Scale );if _ecf !=nil {return _ecf ;
};};if _eefa .Encoding !=nil {_edad .Filter =_eefa .Encoding ;};_edad .Decode =nil ;switch _abbg :=_edad .Filter .(type ){case *_gb .FlateEncoder :if _abbg .Predictor !=1&&_abbg .Predictor !=11{_abbg .Predictor =1;};};if _ecf =_edad .SetImage (_eddc ,nil );
_ecf !=nil {_e .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_ecf );return _ecf ;};_edad .ToPdfObject ();return nil ;};