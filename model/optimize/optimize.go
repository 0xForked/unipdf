//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_af "bytes";_ba "crypto/md5";_e "errors";_a "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/contentstream";_ec "github.com/unidoc/unipdf/v3/core";_gg "github.com/unidoc/unipdf/v3/extractor";_bc "github.com/unidoc/unipdf/v3/internal/imageutil";
_bf "github.com/unidoc/unipdf/v3/internal/textencoding";_d "github.com/unidoc/unipdf/v3/model";_gc "github.com/unidoc/unitype";_b "golang.org/x/image/draw";_gf "math";);

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _feg (_aga []_ec .PdfObject )[]*imageInfo {_fcd :=_ec .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_dcde :=make (map[*_ec .PdfObjectStream ]struct{});var _addg []*imageInfo ;for _ ,_gcef :=range _aga {_fdeb ,_fac :=_ec .GetStream (_gcef );
if !_fac {continue ;};if _ ,_afa :=_dcde [_fdeb ];_afa {continue ;};_dcde [_fdeb ]=struct{}{};_gcd :=_fdeb .PdfObjectDictionary .Get (_fcd );_baf ,_fac :=_ec .GetName (_gcd );if !_fac ||string (*_baf )!="\u0049\u006d\u0061g\u0065"{continue ;};_cfe :=&imageInfo {Stream :_fdeb ,BitsPerComponent :8};
if _fed ,_cee :=_ec .GetIntVal (_fdeb .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_cee {_cfe .BitsPerComponent =_fed ;};if _ead ,_aegf :=_ec .GetIntVal (_fdeb .Get ("\u0057\u0069\u0064t\u0068"));_aegf {_cfe .Width =_ead ;
};if _fgg ,_eec :=_ec .GetIntVal (_fdeb .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_eec {_cfe .Height =_fgg ;};_age ,_ddaa :=_d .NewPdfColorspaceFromPdfObject (_fdeb .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _ddaa !=nil {_a .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_ddaa );
continue ;};if _age ==nil {_dag ,_fcg :=_ec .GetName (_fdeb .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _fcg {switch _dag .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_age =_d .NewPdfColorspaceDeviceGray ();
_cfe .BitsPerComponent =1;};};};switch _aac :=_age .(type ){case *_d .PdfColorspaceDeviceRGB :_cfe .ColorComponents =3;case *_d .PdfColorspaceDeviceGray :_cfe .ColorComponents =1;default:_a .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_aac );
continue ;};_addg =append (_addg ,_cfe );};return _addg ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fbbf *CombineDuplicateDirectObjects )Optimize (objects []_ec .PdfObject )(_bbg []_ec .PdfObject ,_ab error ){_adef (objects );_gcc :=make (map[string ][]*_ec .PdfObjectDictionary );var _ddg func (_dgg *_ec .PdfObjectDictionary );_ddg =func (_eae *_ec .PdfObjectDictionary ){for _ ,_fbg :=range _eae .Keys (){_afb :=_eae .Get (_fbg );
if _cbd ,_efe :=_afb .(*_ec .PdfObjectDictionary );_efe {_ebdf :=_ba .New ();_ebdf .Write ([]byte (_cbd .WriteString ()));_deea :=string (_ebdf .Sum (nil ));_gcc [_deea ]=append (_gcc [_deea ],_cbd );_ddg (_cbd );};};};for _ ,_ebbd :=range objects {_dge ,_cgf :=_ebbd .(*_ec .PdfIndirectObject );
if !_cgf {continue ;};if _gee ,_egf :=_dge .PdfObject .(*_ec .PdfObjectDictionary );_egf {_ddg (_gee );};};_ade :=make ([]_ec .PdfObject ,0,len (_gcc ));_ebbc :=make (map[_ec .PdfObject ]_ec .PdfObject );for _ ,_dgc :=range _gcc {if len (_dgc )< 2{continue ;
};_bece :=_ec .MakeDict ();_bece .Merge (_dgc [0]);_cbbd :=_ec .MakeIndirectObject (_bece );_ade =append (_ade ,_cbbd );for _agd :=0;_agd < len (_dgc );_agd ++{_bfa :=_dgc [_agd ];_ebbc [_bfa ]=_cbbd ;};};_bbg =make ([]_ec .PdfObject ,len (objects ));copy (_bbg ,objects );
_bbg =append (_ade ,_bbg ...);_efeb (_bbg ,_ebbc );return _bbg ,nil ;};func _efeb (_abe []_ec .PdfObject ,_ffcf map[_ec .PdfObject ]_ec .PdfObject ){if len (_ffcf )==0{return ;};for _ceg ,_bea :=range _abe {if _gdc ,_bcbe :=_ffcf [_bea ];_bcbe {_abe [_ceg ]=_gdc ;
continue ;};_ffcf [_bea ]=_bea ;switch _ebgd :=_bea .(type ){case *_ec .PdfObjectArray :_dgeag :=make ([]_ec .PdfObject ,_ebgd .Len ());copy (_dgeag ,_ebgd .Elements ());_efeb (_dgeag ,_ffcf );for _gfc ,_fbbfc :=range _dgeag {_ebgd .Set (_gfc ,_fbbfc );
};case *_ec .PdfObjectStreams :_efeb (_ebgd .Elements (),_ffcf );case *_ec .PdfObjectStream :_bgac :=[]_ec .PdfObject {_ebgd .PdfObjectDictionary };_efeb (_bgac ,_ffcf );_ebgd .PdfObjectDictionary =_bgac [0].(*_ec .PdfObjectDictionary );case *_ec .PdfObjectDictionary :_eegd :=_ebgd .Keys ();
_efd :=make ([]_ec .PdfObject ,len (_eegd ));for _cfec ,_acg :=range _eegd {_efd [_cfec ]=_ebgd .Get (_acg );};_efeb (_efd ,_ffcf );for _bgf ,_bge :=range _eegd {_ebgd .Set (_bge ,_efd [_bgf ]);};case *_ec .PdfIndirectObject :_fafg :=[]_ec .PdfObject {_ebgd .PdfObject };
_efeb (_fafg ,_ffcf );_ebgd .PdfObject =_fafg [0];};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bfcc *CompressStreams )Optimize (objects []_ec .PdfObject )(_cabd []_ec .PdfObject ,_ace error ){_cabd =make ([]_ec .PdfObject ,len (objects ));copy (_cabd ,objects );for _ ,_bdg :=range objects {_edd ,_bef :=_ec .GetStream (_bdg );if !_bef {continue ;
};if _abfd :=_edd .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_abfd !=nil {if _ ,_fga :=_ec .GetName (_abfd );_fga {continue ;};if _fde ,_bbfg :=_ec .GetArray (_abfd );_bbfg &&_fde .Len ()> 0{continue ;};};_dcee :=_ec .NewFlateEncoder ();var _dabf []byte ;
_dabf ,_ace =_dcee .EncodeBytes (_edd .Stream );if _ace !=nil {return _cabd ,_ace ;};_ebg :=_dcee .MakeStreamDict ();if len (_dabf )+len (_ebg .WriteString ())< len (_edd .Stream ){_edd .Stream =_dabf ;_edd .PdfObjectDictionary .Merge (_ebg );_edd .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ec .MakeInteger (int64 (len (_edd .Stream ))));
};};return _cabd ,nil ;};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_ec .PdfObjectStream ;PPI float64 ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cdd *CombineIdenticalIndirectObjects )Optimize (objects []_ec .PdfObject )(_daa []_ec .PdfObject ,_ded error ){_adef (objects );_aff :=make (map[_ec .PdfObject ]_ec .PdfObject );_bcc :=make (map[_ec .PdfObject ]struct{});_bcd :=make (map[string ][]*_ec .PdfIndirectObject );
for _ ,_egb :=range objects {_bba ,_aec :=_egb .(*_ec .PdfIndirectObject );if !_aec {continue ;};if _fgf ,_fee :=_bba .PdfObject .(*_ec .PdfObjectDictionary );_fee {if _gfed ,_ffe :=_fgf .Get ("\u0054\u0079\u0070\u0065").(*_ec .PdfObjectName );_ffe &&*_gfed =="\u0050\u0061\u0067\u0065"{continue ;
};_bgg :=_ba .New ();_bgg .Write ([]byte (_fgf .WriteString ()));_dda :=string (_bgg .Sum (nil ));_bcd [_dda ]=append (_bcd [_dda ],_bba );};};for _ ,_beg :=range _bcd {if len (_beg )< 2{continue ;};_abfg :=_beg [0];for _ffc :=1;_ffc < len (_beg );_ffc ++{_ecea :=_beg [_ffc ];
_aff [_ecea ]=_abfg ;_bcc [_ecea ]=struct{}{};};};_daa =make ([]_ec .PdfObject ,0,len (objects )-len (_bcc ));for _ ,_ce :=range objects {if _ ,_dce :=_bcc [_ce ];_dce {continue ;};_daa =append (_daa ,_ce );};_efeb (_daa ,_aff );return _daa ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _gdee (_dgec *_d .XObjectImage ,_afab imageModifications )error {_afc ,_fagb :=_dgec .ToImage ();if _fagb !=nil {return _fagb ;};if _afab .Scale !=0{_afc ,_fagb =_bbab (_afc ,_afab .Scale );if _fagb !=nil {return _fagb ;};};if _afab .Encoding !=nil {_dgec .Filter =_afab .Encoding ;
};_dgec .Decode =nil ;switch _bbd :=_dgec .Filter .(type ){case *_ec .FlateEncoder :if _bbd .Predictor !=1&&_bbd .Predictor !=11{_bbd .Predictor =1;};};if _fagb =_dgec .SetImage (_afc ,nil );_fagb !=nil {_a .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_fagb );
return _fagb ;};_dgec .ToPdfObject ();return nil ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gaef *ObjectStreams )Optimize (objects []_ec .PdfObject )(_dcad []_ec .PdfObject ,_beef error ){_aaf :=&_ec .PdfObjectStreams {};_bdb :=make ([]_ec .PdfObject ,0,len (objects ));for _ ,_eceag :=range objects {if _daaf ,_gfec :=_eceag .(*_ec .PdfIndirectObject );
_gfec &&_daaf .GenerationNumber ==0{_aaf .Append (_eceag );}else {_bdb =append (_bdb ,_eceag );};};if _aaf .Len ()==0{return _bdb ,nil ;};_dcad =make ([]_ec .PdfObject ,0,len (_bdb )+_aaf .Len ()+1);if _aaf .Len ()> 1{_dcad =append (_dcad ,_aaf );};_dcad =append (_dcad ,_aaf .Elements ()...);
_dcad =append (_dcad ,_bdb ...);return _dcad ,nil ;};func _fag (_bab *_ec .PdfObjectStream ,_bfcg []rune ,_egcb []_gc .GlyphIndex )error {_bab ,_dbd :=_ec .GetStream (_bab );if !_dbd {_a .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _e .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_bcf ,_cdc :=_ec .DecodeStream (_bab );if _cdc !=nil {_a .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_cdc );
return _cdc ;};_dfca ,_cdc :=_gc .Parse (_af .NewReader (_bcf ));if _cdc !=nil {_a .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_bab .Stream ));
return _cdc ;};_ccda :=_egcb ;if len (_bfcg )> 0{_gfe :=_dfca .LookupRunes (_bfcg );_ccda =append (_ccda ,_gfe ...);};_dfca ,_cdc =_dfca .SubsetKeepIndices (_ccda );if _cdc !=nil {_a .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_cdc );
return _cdc ;};var _aeg _af .Buffer ;_cdc =_dfca .Write (&_aeg );if _cdc !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_cdc );return _cdc ;};if _aeg .Len ()> len (_bcf ){_a .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_dff ,_cdc :=_ec .MakeStream (_aeg .Bytes (),_ec .NewFlateEncoder ());if _cdc !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_cdc );return _cdc ;
};*_bab =*_dff ;_bab .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ec .MakeInteger (int64 (_aeg .Len ())));return nil ;};func _agb (_dfe []_ec .PdfObject )(_cbb map[*_ec .PdfObjectStream ]struct{},_gaa error ){_cbb =map[*_ec .PdfObjectStream ]struct{}{};
_ddb :=map[*_d .PdfFont ]struct{}{};_eg :=_aefd (_dfe );for _ ,_ea :=range _eg ._cbdd {_dcc ,_bbb :=_ec .GetDict (_ea .PdfObject );if !_bbb {continue ;};_cd ,_bbb :=_ec .GetDict (_dcc .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_bbb {continue ;
};_ecd ,_ :=_dgee (_dcc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_dcf ,_dea :=_d .NewPdfPageResourcesFromDict (_cd );if _dea !=nil {return nil ,_dea ;};_ac :=[]content {{_fbb :_ecd ,_bddg :_dcf }};_dad :=_bfce (_dcc .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _dad !=nil {_ac =append (_ac ,_dad ...);};for _ ,_acd :=range _ac {_cgb ,_cbe :=_gg .NewFromContents (_acd ._fbb ,_acd ._bddg );if _cbe !=nil {return nil ,_cbe ;};_fd ,_ ,_ ,_cbe :=_cgb .ExtractPageText ();if _cbe !=nil {return nil ,_cbe ;};for _ ,_aa :=range _fd .Marks ().Elements (){if _aa .Font ==nil {continue ;
};if _ ,_gce :=_ddb [_aa .Font ];!_gce {_ddb [_aa .Font ]=struct{}{};};};};};_ddf :=map[*_ec .PdfObjectStream ][]*_d .PdfFont {};for _gaf :=range _ddb {_gbc :=_gaf .FontDescriptor ();if _gbc ==nil ||_gbc .FontFile2 ==nil {continue ;};_eag ,_ccde :=_ec .GetStream (_gbc .FontFile2 );
if !_ccde {continue ;};_ddf [_eag ]=append (_ddf [_eag ],_gaf );};for _gbd :=range _ddf {var _agg []rune ;var _daec []_gc .GlyphIndex ;for _ ,_cf :=range _ddf [_gbd ]{switch _bddag :=_cf .Encoder ().(type ){case *_bf .IdentityEncoder :_cga :=_bddag .RegisteredRunes ();
_ecc :=make ([]_gc .GlyphIndex ,len (_cga ));for _eac ,_cba :=range _cga {_ecc [_eac ]=_gc .GlyphIndex (_cba );};_daec =append (_daec ,_ecc ...);case *_bf .TrueTypeFontEncoder :_bgd :=_bddag .RegisteredRunes ();_agg =append (_agg ,_bgd ...);case _bf .SimpleEncoder :_ggf :=_bddag .Charcodes ();
for _ ,_cfb :=range _ggf {_gfbc ,_deg :=_bddag .CharcodeToRune (_cfb );if !_deg {_a .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_cfb );
continue ;};_agg =append (_agg ,_gfbc );};};};_gaa =_fag (_gbd ,_agg ,_daec );if _gaa !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_gaa );
return nil ,_gaa ;};_cbb [_gbd ]=struct{}{};};return _cbb ,nil ;};

// Append appends optimizers to the chain.
func (_afd *Chain )Append (optimizers ..._d .Optimizer ){_afd ._f =append (_afd ._f ,optimizers ...)};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fdc *CombineDuplicateStreams )Optimize (objects []_ec .PdfObject )(_efc []_ec .PdfObject ,_caaf error ){_egfc :=make (map[_ec .PdfObject ]_ec .PdfObject );_dgcg :=make (map[_ec .PdfObject ]struct{});_gge :=make (map[string ][]*_ec .PdfObjectStream );
for _ ,_gcb :=range objects {if _aca ,_bad :=_gcb .(*_ec .PdfObjectStream );_bad {_def :=_ba .New ();_def .Write (_aca .Stream );_def .Write ([]byte (_aca .PdfObjectDictionary .WriteString ()));_eeg :=string (_def .Sum (nil ));_gge [_eeg ]=append (_gge [_eeg ],_aca );
};};for _ ,_cca :=range _gge {if len (_cca )< 2{continue ;};_faf :=_cca [0];for _bfe :=1;_bfe < len (_cca );_bfe ++{_dbe :=_cca [_bfe ];_egfc [_dbe ]=_faf ;_dgcg [_dbe ]=struct{}{};};};_efc =make ([]_ec .PdfObject ,0,len (objects )-len (_dgcg ));for _ ,_abf :=range objects {if _ ,_cff :=_dgcg [_abf ];
_cff {continue ;};_efc =append (_efc ,_abf );};_efeb (_efc ,_egfc );return _efc ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bdd *CleanContentstream )Optimize (objects []_ec .PdfObject )(_ebf []_ec .PdfObject ,_ca error ){_ge :=map[*_ec .PdfObjectStream ]struct{}{};var _fgc []*_ec .PdfObjectStream ;_add :=func (_gea *_ec .PdfObjectStream ){if _ ,_fef :=_ge [_gea ];!_fef {_ge [_gea ]=struct{}{};
_fgc =append (_fgc ,_gea );};};_bca :=map[_ec .PdfObject ]bool {};_ebfa :=map[_ec .PdfObject ]bool {};for _ ,_db :=range objects {switch _gca :=_db .(type ){case *_ec .PdfIndirectObject :switch _bag :=_gca .PdfObject .(type ){case *_ec .PdfObjectDictionary :if _fcb ,_fea :=_ec .GetName (_bag .Get ("\u0054\u0079\u0070\u0065"));
!_fea ||_fcb .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _ff ,_ddd :=_ec .GetStream (_bag .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ddd {_add (_ff );}else if _dfce ,_bfc :=_ec .GetArray (_bag .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_bfc {var _bg []*_ec .PdfObjectStream ;for _ ,_dae :=range _dfce .Elements (){if _bffb ,_bb :=_ec .GetStream (_dae );_bb {_bg =append (_bg ,_bffb );};};if len (_bg )> 0{var _de _af .Buffer ;for _ ,_fa :=range _bg {if _ddc ,_fgcc :=_ec .DecodeStream (_fa );
_fgcc ==nil {_de .Write (_ddc );};_bca [_fa ]=true ;};_dfd ,_dg :=_ec .MakeStream (_de .Bytes (),_ec .NewFlateEncoder ());if _dg !=nil {return nil ,_dg ;};_ebfa [_dfd ]=true ;_bag .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_dfd );_add (_dfd );
};};};case *_ec .PdfObjectStream :if _ga ,_ee :=_ec .GetName (_gca .Get ("\u0054\u0079\u0070\u0065"));!_ee ||_ga .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _ebd ,_ccd :=_ec .GetName (_gca .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_ccd ||_ebd .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_add (_gca );};};for _ ,_ffg :=range _fgc {_ca =_ece (_ffg );if _ca !=nil {return nil ,_ca ;};};_ebf =nil ;for _ ,_cg :=range objects {if _bca [_cg ]{continue ;};_ebf =append (_ebf ,_cg );
};for _dca :=range _ebfa {_ebf =append (_ebf ,_dca );};return _ebf ,nil ;};func _bfce (_gbca _ec .PdfObject )[]content {if _gbca ==nil {return nil ;};_gafd ,_bffd :=_ec .GetArray (_gbca );if !_bffd {_a .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _caa []content ;for _ ,_gcag :=range _gafd .Elements (){_bee ,_gaad :=_ec .GetDict (_gcag );if !_gaad {_a .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_dab ,_gaad :=_ec .GetDict (_bee .Get ("\u0041\u0050"));if !_gaad {_a .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_ggfg :=_ec .TraceToDirectObject (_dab .Get ("\u004e"));
if _ggfg ==nil {_a .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _cdf *_ec .PdfObjectStream ;switch _ed :=_ggfg .(type ){case *_ec .PdfObjectDictionary :_aef ,_cgac :=_ec .GetName (_bee .Get ("\u0041\u0053"));
if !_cgac {_a .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_cdf ,_cgac =_ec .GetStream (_ed .Get (*_aef ));if !_cgac {_a .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_ec .PdfObjectStream :_cdf =_ed ;};if _cdf ==nil {_a .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_bed ,_aeb :=_d .NewXObjectFormFromStream (_cdf );if _aeb !=nil {_a .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_aeb );
continue ;};_bcgd ,_aeb :=_bed .GetContentStream ();if _aeb !=nil {_a .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_aeb );continue ;};_caa =append (_caa ,content {_fbb :string (_bcgd ),_bddg :_bed .Resources });
};return _caa ;};func _gfg (_be *_c .ContentStreamOperations )*_c .ContentStreamOperations {if _be ==nil {return nil ;};_fc :=_c .ContentStreamOperations {};for _ ,_ag :=range *_be {switch _ag .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_ag .Params )==6{if _bfb ,_bcg :=_ec .GetNumbersAsFloat (_ag .Params );_bcg ==nil {if _bfb [0]==1&&_bfb [1]==0&&_bfb [2]==0&&_bfb [3]==1{_ag =&_c .ContentStreamOperation {Params :[]_ec .PdfObject {_ag .Params [4],_ag .Params [5]},Operand :"\u0054\u0064"};
};};};};_fc =append (_fc ,_ag );};return &_fc ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bcb *Image )Optimize (objects []_ec .PdfObject )(_bdc []_ec .PdfObject ,_bbbe error ){if _bcb .ImageQuality <=0{return objects ,nil ;};_ffgf :=_feg (objects );if len (_ffgf )==0{return objects ,nil ;};_fecc :=make (map[_ec .PdfObject ]_ec .PdfObject );
_bcgf :=make (map[_ec .PdfObject ]struct{});for _ ,_ebc :=range _ffgf {_gae :=_ebc .Stream .Get ("\u0053\u004d\u0061s\u006b");_bcgf [_gae ]=struct{}{};};for _fff ,_agf :=range _ffgf {_afdg :=_agf .Stream ;if _ ,_bacd :=_bcgf [_afdg ];_bacd {continue ;};
_aefc ,_gaae :=_d .NewXObjectImageFromStream (_afdg );if _gaae !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gaae );continue ;};switch _aefc .Filter .(type ){case *_ec .JBIG2Encoder :continue ;case *_ec .CCITTFaxEncoder :continue ;
};_fdd ,_gaae :=_aefc .ToImage ();if _gaae !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gaae );continue ;};_cgcb :=_ec .NewDCTEncoder ();_cgcb .ColorComponents =_fdd .ColorComponents ;_cgcb .Quality =_bcb .ImageQuality ;
_cgcb .BitsPerComponent =_agf .BitsPerComponent ;_cgcb .Width =_agf .Width ;_cgcb .Height =_agf .Height ;_dgea ,_gaae :=_cgcb .EncodeBytes (_fdd .Data );if _gaae !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gaae );
continue ;};var _fca _ec .StreamEncoder ;_fca =_cgcb ;{_acdg :=_ec .NewFlateEncoder ();_dabg :=_ec .NewMultiEncoder ();_dabg .AddEncoder (_acdg );_dabg .AddEncoder (_cgcb );_ebga ,_cdb :=_dabg .EncodeBytes (_fdd .Data );if _cdb !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cdb );
continue ;};if len (_ebga )< len (_dgea ){_a .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_dgea ),len (_ebga ),len (_afdg .Stream ));
_dgea =_ebga ;_fca =_dabg ;};};_gdb :=len (_afdg .Stream );if _gdb < len (_dgea ){continue ;};_fbe :=&_ec .PdfObjectStream {Stream :_dgea };_fbe .PdfObjectReference =_afdg .PdfObjectReference ;_fbe .PdfObjectDictionary =_ec .MakeDict ();_fbe .Merge (_afdg .PdfObjectDictionary );
_fbe .Merge (_fca .MakeStreamDict ());_fbe .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ec .MakeInteger (int64 (len (_dgea ))));_fecc [_afdg ]=_fbe ;_ffgf [_fff ].Stream =_fbe ;};_bdc =make ([]_ec .PdfObject ,len (objects ));copy (_bdc ,objects );_efeb (_bdc ,_fecc );
return _bdc ,nil ;};func _adef (_dcbd []_ec .PdfObject ){for _abea ,_fgfg :=range _dcbd {switch _cfd :=_fgfg .(type ){case *_ec .PdfIndirectObject :_cfd .ObjectNumber =int64 (_abea +1);_cfd .GenerationNumber =0;case *_ec .PdfObjectStream :_cfd .ObjectNumber =int64 (_abea +1);
_cfd .GenerationNumber =0;case *_ec .PdfObjectStreams :_cfd .ObjectNumber =int64 (_abea +1);_cfd .GenerationNumber =0;};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ege *CleanFonts )Optimize (objects []_ec .PdfObject )(_babe []_ec .PdfObject ,_gd error ){var _cgbc map[*_ec .PdfObjectStream ]struct{};if _ege .Subset {var _cae error ;_cgbc ,_cae =_agb (objects );if _cae !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_cae );
return nil ,_cae ;};};for _ ,_gde :=range objects {_dee ,_ddcf :=_ec .GetStream (_gde );if !_ddcf {continue ;};if _ ,_cfa :=_cgbc [_dee ];_cfa {continue ;};_fcf ,_bbf :=_ec .NewEncoderFromStream (_dee );if _bbf !=nil {_a .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_bbf );
continue ;};_bec ,_bbf :=_fcf .DecodeStream (_dee );if _bbf !=nil {_a .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_bbf );
continue ;};if len (_bec )< 4{continue ;};_fdb :=string (_bec [:4]);if _fdb =="\u004f\u0054\u0054\u004f"{continue ;};if _fdb !="\u0000\u0001\u0000\u0000"&&_fdb !="\u0074\u0072\u0075\u0065"{continue ;};_ebb ,_bbf :=_gc .Parse (_af .NewReader (_bec ));if _bbf !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_bbf );
continue ;};_bbf =_ebb .Optimize ();if _bbf !=nil {_a .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_bbf );continue ;};var _dgd _af .Buffer ;
_bbf =_ebb .Write (&_dgd );if _bbf !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_bbf );continue ;
};if _dgd .Len ()> len (_bec ){_a .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_bdfa ,_bbf :=_ec .MakeStream (_dgd .Bytes (),_ec .NewFlateEncoder ());if _bbf !=nil {continue ;};*_dee =*_bdfa ;_dee .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ec .MakeInteger (int64 (_dgd .Len ())));};return objects ,nil ;};type content struct{_fbb string ;
_bddg *_d .PdfPageResources ;};func _dgee (_adeg _ec .PdfObject )(_bbae string ,_ebge []_ec .PdfObject ){var _bbc _af .Buffer ;switch _eada :=_adeg .(type ){case *_ec .PdfIndirectObject :_ebge =append (_ebge ,_eada );_adeg =_eada .PdfObject ;};switch _fdbb :=_adeg .(type ){case *_ec .PdfObjectStream :if _dcg ,_acea :=_ec .DecodeStream (_fdbb );
_acea ==nil {_bbc .Write (_dcg );_ebge =append (_ebge ,_fdbb );};case *_ec .PdfObjectArray :for _ ,_fbc :=range _fdbb .Elements (){switch _bced :=_fbc .(type ){case *_ec .PdfObjectStream :if _bbfd ,_efebf :=_ec .DecodeStream (_bced );_efebf ==nil {_bbc .Write (_bbfd );
_ebge =append (_ebge ,_bced );};};};};return _bbc .String (),_ebge ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_df *Chain )Optimize (objects []_ec .PdfObject )(_da []_ec .PdfObject ,_dd error ){_ad :=objects ;for _ ,_ae :=range _df ._f {_eb ,_bff :=_ae .Optimize (_ad );if _bff !=nil {_a .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_bff );
continue ;};_ad =_eb ;};return _ad ,nil ;};type objectStructure struct{_ggeb *_ec .PdfObjectDictionary ;_daf *_ec .PdfObjectDictionary ;_cbdd []*_ec .PdfIndirectObject ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_agdd :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_agdd .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_agdd .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_gcba :=new (ImagePPI );
_gcba .ImageUpperPPI =options .ImageUpperPPI ;_agdd .Append (_gcba );};if options .ImageQuality > 0{_bdga :=new (Image );_bdga .ImageQuality =options .ImageQuality ;_agdd .Append (_bdga );};if options .CombineDuplicateDirectObjects {_agdd .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_agdd .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_agdd .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_agdd .Append (new (ObjectStreams ));
};if options .CompressStreams {_agdd .Append (new (CompressStreams ));};return _agdd ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};func _ece (_fe *_ec .PdfObjectStream )error {_bce ,_dfg :=_ec .DecodeStream (_fe );if _dfg !=nil {return _dfg ;};_bd :=_c .NewContentStreamParser (string (_bce ));_fg ,_dfg :=_bd .Parse ();if _dfg !=nil {return _dfg ;
};_fg =_gfg (_fg );_gfb :=_fg .Bytes ();if len (_gfb )>=len (_bce ){return nil ;};_cc ,_dfg :=_ec .MakeStream (_fg .Bytes (),_ec .NewFlateEncoder ());if _dfg !=nil {return _dfg ;};_fe .Stream =_cc .Stream ;_fe .Merge (_cc .PdfObjectDictionary );return nil ;
};type imageModifications struct{Scale float64 ;Encoding _ec .StreamEncoder ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_f []_d .Optimizer };func _aefd (_cgca []_ec .PdfObject )objectStructure {_afcg :=objectStructure {};_fefg :=false ;for _ ,_efca :=range _cgca {switch _cbf :=_efca .(type ){case *_ec .PdfIndirectObject :_gcca ,_acaa :=_ec .GetDict (_cbf );
if !_acaa {continue ;};_gbcb ,_acaa :=_ec .GetName (_gcca .Get ("\u0054\u0079\u0070\u0065"));if !_acaa {continue ;};switch _gbcb .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_afcg ._ggeb =_gcca ;_fefg =true ;};};if _fefg {break ;};};if !_fefg {return _afcg ;
};_ccbc ,_efce :=_ec .GetDict (_afcg ._ggeb .Get ("\u0050\u0061\u0067e\u0073"));if !_efce {return _afcg ;};_afcg ._daf =_ccbc ;_bccg ,_efce :=_ec .GetArray (_ccbc .Get ("\u004b\u0069\u0064\u0073"));if !_efce {return _afcg ;};for _ ,_ebe :=range _bccg .Elements (){_fefa ,_ccgb :=_ec .GetIndirect (_ebe );
if !_ccgb {break ;};_afcg ._cbdd =append (_afcg ._cbdd ,_fefa );};return _afcg ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _bbab (_gag *_d .Image ,_eadc float64 )(*_d .Image ,error ){_dac ,_gff :=_gag .ToGoImage ();if _gff !=nil {return nil ,_gff ;};var _gbf _bc .Image ;_deed ,_gcg :=_dac .(*_bc .Monochrome );if _gcg {if _gff =_deed .ResolveDecode ();
_gff !=nil {return nil ,_gff ;};_gbf ,_gff =_deed .Scale (_eadc );if _gff !=nil {return nil ,_gff ;};}else {_acb :=int (_gf .RoundToEven (float64 (_gag .Width )*_eadc ));_cad :=int (_gf .RoundToEven (float64 (_gag .Height )*_eadc ));_gbf ,_gff =_bc .NewImage (_acb ,_cad ,int (_gag .BitsPerComponent ),_gag .ColorComponents ,nil ,nil ,nil );
if _gff !=nil {return nil ,_gff ;};_b .CatmullRom .Scale (_gbf ,_gbf .Bounds (),_dac ,_dac .Bounds (),_b .Over ,&_b .Options {});};_bfd :=_gbf .Base ();_badd :=&_d .Image {Width :int64 (_bfd .Width ),Height :int64 (_bfd .Height ),BitsPerComponent :int64 (_bfd .BitsPerComponent ),ColorComponents :_bfd .ColorComponents ,Data :_bfd .Data };
_badd .SetDecode (_bfd .Decode );_badd .SetAlpha (_bfd .Alpha );return _badd ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dbg *ImagePPI )Optimize (objects []_ec .PdfObject )(_efa []_ec .PdfObject ,_edge error ){if _dbg .ImageUpperPPI <=0{return objects ,nil ;};_bcda :=_feg (objects );if len (_bcda )==0{return objects ,nil ;};_beb :=make (map[_ec .PdfObject ]struct{});
for _ ,_cfaf :=range _bcda {_acba :=_cfaf .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_beb [_acba ]=struct{}{};};_gef :=make (map[*_ec .PdfObjectStream ]*imageInfo );for _ ,_gffa :=range _bcda {_gef [_gffa .Stream ]=_gffa ;};var _gcf *_ec .PdfObjectDictionary ;
for _ ,_gcce :=range objects {if _eee ,_ffd :=_ec .GetDict (_gcce );_gcf ==nil &&_ffd {if _gffb ,_dcff :=_ec .GetName (_eee .Get ("\u0054\u0079\u0070\u0065"));_dcff &&*_gffb =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_gcf =_eee ;};};};if _gcf ==nil {return objects ,nil ;
};_gda ,_geaf :=_ec .GetDict (_gcf .Get ("\u0050\u0061\u0067e\u0073"));if !_geaf {return objects ,nil ;};_fbgf ,_bceb :=_ec .GetArray (_gda .Get ("\u004b\u0069\u0064\u0073"));if !_bceb {return objects ,nil ;};for _ ,_aee :=range _fbgf .Elements (){_ccdea :=make (map[string ]*imageInfo );
_dadd ,_afcc :=_ec .GetDict (_aee );if !_afcc {continue ;};_fad ,_ :=_dgee (_dadd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_fad )==0{continue ;};_bdfb ,_ebcb :=_ec .GetDict (_dadd .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_ebcb {continue ;};_bedc ,_eegg :=_d .NewPdfPageResourcesFromDict (_bdfb );if _eegg !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_eegg );
continue ;};_dcb ,_ede :=_ec .GetDict (_bdfb .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_ede {continue ;};_fab :=_dcb .Keys ();for _ ,_fba :=range _fab {if _edb ,_cgbd :=_ec .GetStream (_dcb .Get (_fba ));_cgbd {if _eaa ,_fae :=_gef [_edb ];_fae {_ccdea [string (_fba )]=_eaa ;
};};};_fcdb :=_c .NewContentStreamParser (_fad );_gbfd ,_eegg :=_fcdb .Parse ();if _eegg !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_eegg );continue ;};_gac :=_c .NewContentStreamProcessor (*_gbfd );_gac .AddHandler (_c .HandlerConditionEnumAllOperands ,"",func (_baeg *_c .ContentStreamOperation ,_ddcc _c .GraphicsState ,_fgd *_d .PdfPageResources )error {switch _baeg .Operand {case "\u0044\u006f":if len (_baeg .Params )!=1{_a .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_dfa ,_ccb :=_ec .GetName (_baeg .Params [0]);if !_ccb {_a .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _bcgdc ,_ccf :=_ccdea [string (*_dfa )];_ccf {_baeb :=_ddcc .CTM .ScalingFactorX ();_fcfa :=_ddcc .CTM .ScalingFactorY ();_eaf ,_cgad :=_baeb /72.0,_fcfa /72.0;_gdba ,_dagb :=float64 (_bcgdc .Width )/_eaf ,float64 (_bcgdc .Height )/_cgad ;
if _eaf ==0||_cgad ==0{_gdba =72.0;_dagb =72.0;};_bcgdc .PPI =_gf .Max (_bcgdc .PPI ,_gdba );_bcgdc .PPI =_gf .Max (_bcgdc .PPI ,_dagb );};};return nil ;});_eegg =_gac .Process (_bedc );if _eegg !=nil {_a .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_eegg );
continue ;};};for _ ,_dccf :=range _bcda {if _ ,_ccc :=_beb [_dccf .Stream ];_ccc {continue ;};if _dccf .PPI <=_dbg .ImageUpperPPI {continue ;};_eab ,_cdfb :=_d .NewXObjectImageFromStream (_dccf .Stream );if _cdfb !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cdfb );
continue ;};var _bebb imageModifications ;_bebb .Scale =_dbg .ImageUpperPPI /_dccf .PPI ;if _dccf .BitsPerComponent ==1&&_dccf .ColorComponents ==1{_cfaa :=_gf .Round (_dccf .PPI /_dbg .ImageUpperPPI );_bfde :=_bc .NextPowerOf2 (uint (_cfaa ));if _bc .InDelta (float64 (_bfde ),1/_bebb .Scale ,0.3){_bebb .Scale =float64 (1)/float64 (_bfde );
};if _ ,_edf :=_eab .Filter .(*_ec .JBIG2Encoder );!_edf {_bebb .Encoding =_ec .NewJBIG2Encoder ();};};if _cdfb =_gdee (_eab ,_bebb );_cdfb !=nil {_a .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_cdfb );
continue ;};_bebb .Encoding =nil ;if _bbdf ,_aecd :=_ec .GetStream (_dccf .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_aecd {_caag ,_cbec :=_d .NewXObjectImageFromStream (_bbdf );if _cbec !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cbec );
continue ;};if _cbec =_gdee (_caag ,_bebb );_cbec !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cbec );continue ;};};};return objects ,nil ;};