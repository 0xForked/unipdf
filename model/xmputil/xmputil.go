//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package xmputil provides abstraction used by the pdf document XMP Metadata.
package xmputil ;import (_e "errors";_de "fmt";_dd "github.com/trimmer-io/go-xmp/models/pdf";_gb "github.com/trimmer-io/go-xmp/models/xmp_mm";_a "github.com/trimmer-io/go-xmp/xmp";_cf "github.com/unidoc/unipdf/v3/core";_ga "github.com/unidoc/unipdf/v3/internal/timeutils";
_ec "github.com/unidoc/unipdf/v3/internal/uuid";_c "github.com/unidoc/unipdf/v3/model/xmputil/pdfaextension";_ge "github.com/unidoc/unipdf/v3/model/xmputil/pdfaid";_g "strconv";_d "time";);

// LoadDocument loads up the xmp document from provided input stream.
func LoadDocument (stream []byte )(*Document ,error ){_ecc :=_a .NewDocument ();if _f :=_a .Unmarshal (stream ,_ecc );_f !=nil {return nil ,_f ;};return &Document {_gd :_ecc },nil ;};

// SetPdfAExtension sets the pdfaExtension XMP metadata.
func (_dab *Document )SetPdfAExtension ()error {_ed ,_fg :=_c .MakeModel (_dab ._gd );if _fg !=nil {return _fg ;};if _fg =_c .FillModel (_dab ._gd ,_ed );_fg !=nil {return _fg ;};if _fg =_ed .SyncToXMP (_dab ._gd );_fg !=nil {return _fg ;};return nil ;
};

// GetPdfAID gets the pdfaid xmp metadata model.
func (_ega *Document )GetPdfAID ()(*PdfAID ,bool ){_bba ,_fdg :=_ega ._gd .FindModel (_ge .Namespace ).(*_ge .Model );if !_fdg {return nil ,false ;};return &PdfAID {Part :_bba .Part ,Conformance :_bba .Conformance },true ;};

// MediaManagementOptions are the options for the Media management xmp metadata.
type MediaManagementOptions struct{

// OriginalDocumentID  as media is imported and projects is started, an original-document ID
// must be created to identify a new document. This identifies a document as a conceptual entity.
// By default, this value is generated.
OriginalDocumentID string ;

// NewDocumentID is a flag which generates a new Document identifier while setting media management.
// This value should be set to true only if the document is stored and saved as new document.
// Otherwise, if the document is modified and overwrites previous file, it should be set to false.
NewDocumentID bool ;

// DocumentID when a document is copied to a new file path or converted to a new format with
// Save As, another new document ID should usually be assigned. This identifies a general version or
// branch of a document. You can use it to track different versions or extracted portions of a document
// with the same original-document ID.
// By default, this value is generated if NewDocumentID is true or previous doesn't exist.
DocumentID string ;

// InstanceID to track a document’s editing history, you must assign a new instance ID
// whenever a document is saved after any changes. This uniquely identifies an exact version of a
// document. It is used in resource references (to identify both the document or part itself and the
// referenced or referencing documents), and in document-history resource events (to identify the
// document instance that resulted from the change).
// By default, this value is generated.
InstanceID string ;

// DerivedFrom references the source document from which this one is derived,
// typically through a Save As operation that changes the file name or format. It is a minimal reference;
// missing components can be assumed to be unchanged. For example, a new version might only need
// to specify the instance ID and version number of the previous version, or a rendition might only need
// to specify the instance ID and rendition class of the original.
// By default, the derived from structure is filled from previous XMP metadata (if exists).
DerivedFrom string ;

// VersionID are meant to associate the document with a product version that is part of a release process. They can be useful in tracking the
// document history, but should not be used to identify a document uniquely in any context.
// Usually it simply works by incrementing integers 1,2,3...
// By default, this values is incremented or set to the next version number.
VersionID string ;

// ModifyComment is a comment to given modification
ModifyComment string ;

// ModifyDate is a custom modification date for the versions.
// By default, this would be set to time.Now().
ModifyDate _d .Time ;

// Modifier is a person who did the modification.
Modifier string ;};

// GetGoXmpDocument gets direct access to the go-xmp.Document.
// All changes done to specified document would result in change of this document 'd'.
func (_daa *Document )GetGoXmpDocument ()*_a .Document {return _daa ._gd };

// PdfInfo is the xmp document pdf info.
type PdfInfo struct{InfoDict _cf .PdfObject ;PdfVersion string ;Copyright string ;Marked bool ;};

// GUID is a string representing a globally unique identifier.
type GUID string ;

// NewDocument creates a new document without any previous xmp information.
func NewDocument ()*Document {_bd :=_a .NewDocument ();return &Document {_gd :_bd }};

// MediaManagement are the values from the document media management metadata.
type MediaManagement struct{

// OriginalDocumentID  as media is imported and projects is started, an original-document ID
// must be created to identify a new document. This identifies a document as a conceptual entity.
OriginalDocumentID GUID ;

// DocumentID when a document is copied to a new file path or converted to a new format with
// Save As, another new document ID should usually be assigned. This identifies a general version or
// branch of a document. You can use it to track different versions or extracted portions of a document
// with the same original-document ID.
DocumentID GUID ;

// InstanceID to track a document’s editing history, you must assign a new instance ID
// whenever a document is saved after any changes. This uniquely identifies an exact version of a
// document. It is used in resource references (to identify both the document or part itself and the
// referenced or referencing documents), and in document-history resource events (to identify the
// document instance that resulted from the change).
InstanceID GUID ;

// DerivedFrom references the source document from which this one is derived,
// typically through a Save As operation that changes the file name or format. It is a minimal reference;
// missing components can be assumed to be unchanged. For example, a new version might only need
// to specify the instance ID and version number of the previous version, or a rendition might only need
// to specify the instance ID and rendition class of the original.
DerivedFrom *MediaManagementDerivedFrom ;

// VersionID are meant to associate the document with a product version that is part of a release process. They can be useful in tracking the
// document history, but should not be used to identify a document uniquely in any context.
// Usually it simply works by incrementing integers 1,2,3...
VersionID string ;

// Versions is the history of the document versions along with the comments, timestamps and issuers.
Versions []MediaManagementVersion ;};

// SetPdfInfo sets the pdf info into selected document.
func (_fd *Document )SetPdfInfo (options *PdfInfoOptions )error {if options ==nil {return _e .New ("\u006ei\u006c\u0020\u0070\u0064\u0066\u0020\u006f\u0070\u0074\u0069\u006fn\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_fde ,_ede :=_dd .MakeModel (_fd ._gd );
if _ede !=nil {return _ede ;};if options .Overwrite {*_fde =_dd .PDFInfo {};};if options .InfoDict !=nil {_cfb ,_eg :=_cf .GetDict (options .InfoDict );if !_eg {return _de .Errorf ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0070\u0064\u0066\u0020\u006f\u0062\u006a\u0065\u0063t\u0020\u0074\u0079p\u0065:\u0020\u0025\u0054",options .InfoDict );
};var _adc *_cf .PdfObjectString ;for _ ,_ag :=range _cfb .Keys (){switch _ag {case "\u0054\u0069\u0074l\u0065":_adc ,_eg =_cf .GetString (_cfb .Get ("\u0054\u0069\u0074l\u0065"));if _eg {_fde .Title =_a .NewAltString (_adc );};case "\u0041\u0075\u0074\u0068\u006f\u0072":_adc ,_eg =_cf .GetString (_cfb .Get ("\u0041\u0075\u0074\u0068\u006f\u0072"));
if _eg {_fde .Author =_a .NewStringList (_adc .String ());};case "\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073":_adc ,_eg =_cf .GetString (_cfb .Get ("\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073"));if _eg {_fde .Keywords =_adc .String ();};case "\u0043r\u0065\u0061\u0074\u006f\u0072":_adc ,_eg =_cf .GetString (_cfb .Get ("\u0043r\u0065\u0061\u0074\u006f\u0072"));
if _eg {_fde .Creator =_a .AgentName (_adc .String ());};case "\u0053u\u0062\u006a\u0065\u0063\u0074":_adc ,_eg =_cf .GetString (_cfb .Get ("\u0053u\u0062\u006a\u0065\u0063\u0074"));if _eg {_fde .Subject =_a .NewAltString (_adc .String ());};case "\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072":_adc ,_eg =_cf .GetString (_cfb .Get ("\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072"));
if _eg {_fde .Producer =_a .AgentName (_adc .String ());};case "\u0054r\u0061\u0070\u0070\u0065\u0064":_eb ,_gdg :=_cf .GetName (_cfb .Get ("\u0054r\u0061\u0070\u0070\u0065\u0064"));if _gdg {switch _eb .String (){case "\u0054\u0072\u0075\u0065":_fde .Trapped =true ;
case "\u0046\u0061\u006cs\u0065":_fde .Trapped =false ;default:_fde .Trapped =true ;};};case "\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065":if _eee ,_eba :=_cf .GetString (_cfb .Get ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065"));
_eba &&_eee .String ()!=""{_aa ,_fa :=_ga .ParsePdfTime (_eee .String ());if _fa !=nil {return _de .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0072e\u0061\u0074\u0069\u006f\u006e\u0044\u0061t\u0065\u0020\u0066\u0069\u0065\u006c\u0064\u003a\u0020\u0025\u0077",_fa );
};_fde .CreationDate =_a .NewDate (_aa );};case "\u004do\u0064\u0044\u0061\u0074\u0065":if _gcc ,_df :=_cf .GetString (_cfb .Get ("\u004do\u0064\u0044\u0061\u0074\u0065"));_df &&_gcc .String ()!=""{_gdf ,_ba :=_ga .ParsePdfTime (_gcc .String ());if _ba !=nil {return _de .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u004d\u006f\u0064\u0044a\u0074e\u0020f\u0069\u0065\u006c\u0064\u003a\u0020\u0025w",_ba );
};_fde .ModifyDate =_a .NewDate (_gdf );};};};};if options .PdfVersion !=""{_fde .PDFVersion =options .PdfVersion ;};if options .Marked {_fde .Marked =_a .Bool (options .Marked );};if options .Copyright !=""{_fde .Copyright =options .Copyright ;};if _ede =_fde .SyncToXMP (_fd ._gd );
_ede !=nil {return _ede ;};return nil ;};

// PdfInfoOptions are the options used for setting pdf info.
type PdfInfoOptions struct{InfoDict _cf .PdfObject ;PdfVersion string ;Copyright string ;Marked bool ;

// Overwrite if set to true, overwrites all values found in the current pdf info xmp model to the ones provided.
Overwrite bool ;};

// MarshalIndent the document into xml byte stream with predefined prefix and indent.
func (_ce *Document )MarshalIndent (prefix ,indent string )([]byte ,error ){if _ce ._gd .IsDirty (){if _da :=_ce ._gd .SyncModels ();_da !=nil {return nil ,_da ;};};return _a .MarshalIndent (_ce ._gd ,prefix ,indent );};

// Marshal the document into xml byte stream.
func (_gg *Document )Marshal ()([]byte ,error ){if _gg ._gd .IsDirty (){if _ac :=_gg ._gd .SyncModels ();_ac !=nil {return nil ,_ac ;};};return _a .Marshal (_gg ._gd );};

// MediaManagementDerivedFrom is a structure that contains references of identifiers and versions
// from which given document was derived.
type MediaManagementDerivedFrom struct{OriginalDocumentID GUID ;DocumentID GUID ;InstanceID GUID ;VersionID string ;};

// SetPdfAID sets up pdfaid xmp metadata.
// In example: Part: '1' Conformance: 'B' states for PDF/A 1B.
func (_db *Document )SetPdfAID (part int ,conformance string )error {_gce ,_acb :=_ge .MakeModel (_db ._gd );if _acb !=nil {return _acb ;};_gce .Part =part ;_gce .Conformance =conformance ;if _aac :=_gce .SyncToXMP (_db ._gd );_aac !=nil {return _aac ;
};return nil ;};

// GetPdfInfo gets the document pdf info.
func (_cfa *Document )GetPdfInfo ()(*PdfInfo ,bool ){_cc ,_fb :=_cfa ._gd .FindModel (_dd .NsPDF ).(*_dd .PDFInfo );if !_fb {return nil ,false ;};_geb :=PdfInfo {};var _edb *_cf .PdfObjectDictionary ;_geb .Copyright =_cc .Copyright ;_geb .PdfVersion =_cc .PDFVersion ;
_geb .Marked =bool (_cc .Marked );_deg :=func (_age string ,_dee _cf .PdfObject ){if _edb ==nil {_edb =_cf .MakeDict ();};_edb .Set (_cf .PdfObjectName (_age ),_dee );};if len (_cc .Title )> 0{_deg ("\u0054\u0069\u0074l\u0065",_cf .MakeString (_cc .Title .Default ()));
};if len (_cc .Author )> 0{_deg ("\u0041\u0075\u0074\u0068\u006f\u0072",_cf .MakeString (_cc .Author [0]));};if _cc .Keywords !=""{_deg ("\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073",_cf .MakeString (_cc .Keywords ));};if len (_cc .Subject )> 0{_deg ("\u0053u\u0062\u006a\u0065\u0063\u0074",_cf .MakeString (_cc .Subject .Default ()));
};if _cc .Creator !=""{_deg ("\u0043r\u0065\u0061\u0074\u006f\u0072",_cf .MakeString (string (_cc .Creator )));};if _cc .Producer !=""{_deg ("\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072",_cf .MakeString (string (_cc .Producer )));};if _cc .Trapped {_deg ("\u0054r\u0061\u0070\u0070\u0065\u0064",_cf .MakeName ("\u0054\u0072\u0075\u0065"));
};if !_cc .CreationDate .IsZero (){_deg ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065",_cf .MakeString (_ga .FormatPdfTime (_cc .CreationDate .Value ())));};if !_cc .ModifyDate .IsZero (){_deg ("\u004do\u0064\u0044\u0061\u0074\u0065",_cf .MakeString (_ga .FormatPdfTime (_cc .ModifyDate .Value ())));
};_geb .InfoDict =_edb ;return &_geb ,true ;};

// PdfAID is the result of the XMP pdfaid metadata.
type PdfAID struct{Part int ;Conformance string ;};

// Document is an implementation of the xmp document.
// It is a wrapper over go-xmp/xmp.Document that provides some Pdf predefined functionality.
type Document struct{_gd *_a .Document };

// SetMediaManagement sets up XMP media management metadata: namespace xmpMM.
func (_ff *Document )SetMediaManagement (options *MediaManagementOptions )error {_fba ,_gccd :=_gb .MakeModel (_ff ._gd );if _gccd !=nil {return _gccd ;};if options ==nil {options =new (MediaManagementOptions );};_eec :=_gb .ResourceRef {};if _fba .OriginalDocumentID .IsZero (){if options .OriginalDocumentID !=""{_fba .OriginalDocumentID =_a .GUID (options .OriginalDocumentID );
}else {_agg ,_dc :=_ec .NewUUID ();if _dc !=nil {return _dc ;};_fba .OriginalDocumentID =_a .GUID (_agg .String ());};}else {_eec .OriginalDocumentID =_fba .OriginalDocumentID ;};switch {case options .DocumentID !="":_fba .DocumentID =_a .GUID (options .DocumentID );
case options .NewDocumentID ||_fba .DocumentID .IsZero ():if !_fba .DocumentID .IsZero (){_eec .DocumentID =_fba .DocumentID ;};_egf ,_gdfd :=_ec .NewUUID ();if _gdfd !=nil {return _gdfd ;};_fba .DocumentID =_a .GUID (_egf .String ());};if !_fba .InstanceID .IsZero (){_eec .InstanceID =_fba .InstanceID ;
};_fba .InstanceID =_a .GUID (options .InstanceID );if _fba .InstanceID ==""{_bac ,_eeb :=_ec .NewUUID ();if _eeb !=nil {return _eeb ;};_fba .InstanceID =_a .GUID (_bac .String ());};if !_eec .IsZero (){_fba .DerivedFrom =&_eec ;};_gag :=options .VersionID ;
if _fba .VersionID !=""{_ca ,_dg :=_g .Atoi (_fba .VersionID );if _dg !=nil {_gag =_g .Itoa (len (_fba .Versions )+1);}else {_gag =_g .Itoa (_ca +1);};};if _gag ==""{_gag ="\u0031";};_fba .VersionID =_gag ;if _gccd =_fba .SyncToXMP (_ff ._gd );_gccd !=nil {return _gccd ;
};return nil ;};

// GetMediaManagement gets the media management metadata from provided xmp document.
func (_ccf *Document )GetMediaManagement ()(*MediaManagement ,bool ){_dcc :=_gb .FindModel (_ccf ._gd );if _dcc ==nil {return nil ,false ;};_eecg :=make ([]MediaManagementVersion ,len (_dcc .Versions ));for _fgd ,_fgc :=range _dcc .Versions {_eecg [_fgd ]=MediaManagementVersion {VersionID :_fgc .Version ,ModifyDate :_fgc .ModifyDate .Value (),Comments :_fgc .Comments ,Modifier :_fgc .Modifier };
};_dce :=&MediaManagement {OriginalDocumentID :GUID (_dcc .OriginalDocumentID .Value ()),DocumentID :GUID (_dcc .DocumentID .Value ()),InstanceID :GUID (_dcc .InstanceID .Value ()),VersionID :_dcc .VersionID ,Versions :_eecg };if _dcc .DerivedFrom !=nil {_dce .DerivedFrom =&MediaManagementDerivedFrom {OriginalDocumentID :GUID (_dcc .DerivedFrom .OriginalDocumentID ),DocumentID :GUID (_dcc .DerivedFrom .DocumentID ),InstanceID :GUID (_dcc .DerivedFrom .InstanceID ),VersionID :_dcc .DerivedFrom .VersionID };
};return _dce ,true ;};

// MediaManagementVersion is the version of the media management xmp metadata.
type MediaManagementVersion struct{VersionID string ;ModifyDate _d .Time ;Comments string ;Modifier string ;};

// GetPdfaExtensionSchemas gets a pdfa extension schemas.
func (_ee *Document )GetPdfaExtensionSchemas ()([]_c .Schema ,error ){_fe :=_ee ._gd .FindModel (_c .Namespace );if _fe ==nil {return nil ,nil ;};_ad ,_bb :=_fe .(*_c .Model );if !_bb {return nil ,_de .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u006d\u006f\u0064\u0065l f\u006fr \u0070\u0064\u0066\u0061\u0045\u0078\u0074en\u0073\u0069\u006f\u006e\u0073\u003a\u0020%\u0054",_fe );
};return _ad .Schemas ,nil ;};