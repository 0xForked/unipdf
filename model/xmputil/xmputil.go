//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package xmputil provides abstraction used by the pdf document XMP Metadata.
package xmputil ;import (_fe "errors";_df "fmt";_f "github.com/trimmer-io/go-xmp/models/pdf";_b "github.com/trimmer-io/go-xmp/models/xmp_mm";_c "github.com/trimmer-io/go-xmp/xmp";_bc "github.com/unidoc/unipdf/v3/core";_ecb "github.com/unidoc/unipdf/v3/internal/timeutils";
_eg "github.com/unidoc/unipdf/v3/internal/uuid";_ec "github.com/unidoc/unipdf/v3/model/xmputil/pdfaextension";_d "github.com/unidoc/unipdf/v3/model/xmputil/pdfaid";_ca "strconv";_a "time";);

// MediaManagementOptions are the options for the Media management xmp metadata.
type MediaManagementOptions struct{

// OriginalDocumentID  as media is imported and projects is started, an original-document ID
// must be created to identify a new document. This identifies a document as a conceptual entity.
// By default, this value is generated.
OriginalDocumentID string ;

// NewDocumentID is a flag which generates a new Document identifier while setting media management.
// This value should be set to true only if the document is stored and saved as new document.
// Otherwise, if the document is modified and overwrites previous file, it should be set to false.
NewDocumentID bool ;

// DocumentID when a document is copied to a new file path or converted to a new format with
// Save As, another new document ID should usually be assigned. This identifies a general version or
// branch of a document. You can use it to track different versions or extracted portions of a document
// with the same original-document ID.
// By default, this value is generated if NewDocumentID is true or previous doesn't exist.
DocumentID string ;

// InstanceID to track a documentâ€™s editing history, you must assign a new instance ID
// whenever a document is saved after any changes. This uniquely identifies an exact version of a
// document. It is used in resource references (to identify both the document or part itself and the
// referenced or referencing documents), and in document-history resource events (to identify the
// document instance that resulted from the change).
// By default, this value is generated.
InstanceID string ;

// DerivedFrom references the source document from which this one is derived,
// typically through a Save As operation that changes the file name or format. It is a minimal reference;
// missing components can be assumed to be unchanged. For example, a new version might only need
// to specify the instance ID and version number of the previous version, or a rendition might only need
// to specify the instance ID and rendition class of the original.
// By default, the derived from structure is filled from previous XMP metadata (if exists).
DerivedFrom string ;

// VersionID are meant to associate the document with a product version that is part of a release process. They can be useful in tracking the
// document history, but should not be used to identify a document uniquely in any context.
// Usually it simply works by incrementing integers 1,2,3...
// By default, this values is incremented or set to the next version number.
VersionID string ;

// ModifyComment is a comment to given modification
ModifyComment string ;

// ModifyDate is a custom modification date for the versions.
// By default, this would be set to time.Now().
ModifyDate _a .Time ;

// Modifier is a person who did the modification.
Modifier string ;};

// SetPdfAExtension sets the pdfaExtension XMP metadata.
func (_ea *Document )SetPdfAExtension ()error {_da ,_gbc :=_ec .MakeModel (_ea ._ba );if _gbc !=nil {return _gbc ;};if _gbc =_ec .FillModel (_ea ._ba ,_da );_gbc !=nil {return _gbc ;};if _gbc =_da .SyncToXMP (_ea ._ba );_gbc !=nil {return _gbc ;};return nil ;
};

// Document is an implementation of the xmp document.
// It is a wrapper over go-xmp/xmp.Document that provides some Pdf predefined functionality.
type Document struct{_ba *_c .Document };

// GetGoXmpDocument gets direct access to the go-xmp.Document.
// All changes done to specified document would result in change of this document 'd'.
func (_bfg *Document )GetGoXmpDocument ()*_c .Document {return _bfg ._ba };

// GetPdfAID gets the pdfaid xmp metadata model.
func (_fdd *Document )GetPdfAID ()(*PdfAID ,bool ){_bcb ,_aea :=_fdd ._ba .FindModel (_d .Namespace ).(*_d .Model );if !_aea {return nil ,false ;};return &PdfAID {Part :_bcb .Part ,Conformance :_bcb .Conformance },true ;};

// Marshal the document into xml byte stream.
func (_bfa *Document )Marshal ()([]byte ,error ){if _bfa ._ba .IsDirty (){if _ed :=_bfa ._ba .SyncModels ();_ed !=nil {return nil ,_ed ;};};return _c .Marshal (_bfa ._ba );};

// PdfInfoOptions are the options used for setting pdf info.
type PdfInfoOptions struct{InfoDict _bc .PdfObject ;PdfVersion string ;Copyright string ;Marked bool ;

// Overwrite if set to true, overwrites all values found in the current pdf info xmp model to the ones provided.
Overwrite bool ;};

// PdfInfo is the xmp document pdf info.
type PdfInfo struct{InfoDict _bc .PdfObject ;PdfVersion string ;Copyright string ;Marked bool ;};

// SetPdfInfo sets the pdf info into selected document.
func (_dag *Document )SetPdfInfo (options *PdfInfoOptions )error {if options ==nil {return _fe .New ("\u006ei\u006c\u0020\u0070\u0064\u0066\u0020\u006f\u0070\u0074\u0069\u006fn\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_ge ,_ab :=_f .MakeModel (_dag ._ba );
if _ab !=nil {return _ab ;};if options .Overwrite {*_ge =_f .PDFInfo {};};if options .InfoDict !=nil {_ce ,_bd :=_bc .GetDict (options .InfoDict );if !_bd {return _df .Errorf ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0070\u0064\u0066\u0020\u006f\u0062\u006a\u0065\u0063t\u0020\u0074\u0079p\u0065:\u0020\u0025\u0054",options .InfoDict );
};var _edb *_bc .PdfObjectString ;for _ ,_gf :=range _ce .Keys (){switch _gf {case "\u0054\u0069\u0074l\u0065":_edb ,_bd =_bc .GetString (_ce .Get ("\u0054\u0069\u0074l\u0065"));if _bd {_ge .Title =_c .NewAltString (_edb );};case "\u0041\u0075\u0074\u0068\u006f\u0072":_edb ,_bd =_bc .GetString (_ce .Get ("\u0041\u0075\u0074\u0068\u006f\u0072"));
if _bd {_ge .Author =_c .NewStringList (_edb .String ());};case "\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073":_edb ,_bd =_bc .GetString (_ce .Get ("\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073"));if _bd {_ge .Keywords =_edb .String ();};case "\u0043r\u0065\u0061\u0074\u006f\u0072":_edb ,_bd =_bc .GetString (_ce .Get ("\u0043r\u0065\u0061\u0074\u006f\u0072"));
if _bd {_ge .Creator =_c .AgentName (_edb .String ());};case "\u0053u\u0062\u006a\u0065\u0063\u0074":_edb ,_bd =_bc .GetString (_ce .Get ("\u0053u\u0062\u006a\u0065\u0063\u0074"));if _bd {_ge .Subject =_c .NewAltString (_edb .String ());};case "\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072":_edb ,_bd =_bc .GetString (_ce .Get ("\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072"));
if _bd {_ge .Producer =_c .AgentName (_edb .String ());};case "\u0054r\u0061\u0070\u0070\u0065\u0064":_bb ,_daga :=_bc .GetName (_ce .Get ("\u0054r\u0061\u0070\u0070\u0065\u0064"));if _daga {switch _bb .String (){case "\u0054\u0072\u0075\u0065":_ge .Trapped =true ;
case "\u0046\u0061\u006cs\u0065":_ge .Trapped =false ;default:_ge .Trapped =true ;};};case "\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065":if _de ,_ceg :=_bc .GetString (_ce .Get ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065"));
_ceg &&_de .String ()!=""{_caa ,_fed :=_ecb .ParsePdfTime (_de .String ());if _fed !=nil {return _df .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0072e\u0061\u0074\u0069\u006f\u006e\u0044\u0061t\u0065\u0020\u0066\u0069\u0065\u006c\u0064\u003a\u0020\u0025\u0077",_fed );
};_ge .CreationDate =_c .NewDate (_caa );};case "\u004do\u0064\u0044\u0061\u0074\u0065":if _fg ,_gg :=_bc .GetString (_ce .Get ("\u004do\u0064\u0044\u0061\u0074\u0065"));_gg &&_fg .String ()!=""{_dff ,_ced :=_ecb .ParsePdfTime (_fg .String ());if _ced !=nil {return _df .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u004d\u006f\u0064\u0044a\u0074e\u0020f\u0069\u0065\u006c\u0064\u003a\u0020\u0025w",_ced );
};_ge .ModifyDate =_c .NewDate (_dff );};};};};if options .PdfVersion !=""{_ge .PDFVersion =options .PdfVersion ;};if options .Marked {_ge .Marked =_c .Bool (options .Marked );};if options .Copyright !=""{_ge .Copyright =options .Copyright ;};if _ab =_ge .SyncToXMP (_dag ._ba );
_ab !=nil {return _ab ;};return nil ;};

// MediaManagementVersion is the version of the media management xmp metadata.
type MediaManagementVersion struct{VersionID string ;ModifyDate _a .Time ;Comments string ;Modifier string ;};

// GUID is a string representing a globally unique identifier.
type GUID string ;

// SetPdfAID sets up pdfaid xmp metadata.
// In example: Part: '1' Conformance: 'B' states for PDF/A 1B.
func (_gfb *Document )SetPdfAID (part int ,conformance string )error {_cacg ,_gfc :=_d .MakeModel (_gfb ._ba );if _gfc !=nil {return _gfc ;};_cacg .Part =part ;_cacg .Conformance =conformance ;if _eaac :=_cacg .SyncToXMP (_gfb ._ba );_eaac !=nil {return _eaac ;
};return nil ;};

// GetPdfInfo gets the document pdf info.
func (_cef *Document )GetPdfInfo ()(*PdfInfo ,bool ){_cac ,_fd :=_cef ._ba .FindModel (_f .NsPDF ).(*_f .PDFInfo );if !_fd {return nil ,false ;};_cg :=PdfInfo {};var _gfe *_bc .PdfObjectDictionary ;_cg .Copyright =_cac .Copyright ;_cg .PdfVersion =_cac .PDFVersion ;
_cg .Marked =bool (_cac .Marked );_faa :=func (_aa string ,_cf _bc .PdfObject ){if _gfe ==nil {_gfe =_bc .MakeDict ();};_gfe .Set (_bc .PdfObjectName (_aa ),_cf );};if len (_cac .Title )> 0{_faa ("\u0054\u0069\u0074l\u0065",_bc .MakeString (_cac .Title .Default ()));
};if len (_cac .Author )> 0{_faa ("\u0041\u0075\u0074\u0068\u006f\u0072",_bc .MakeString (_cac .Author [0]));};if _cac .Keywords !=""{_faa ("\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073",_bc .MakeString (_cac .Keywords ));};if len (_cac .Subject )> 0{_faa ("\u0053u\u0062\u006a\u0065\u0063\u0074",_bc .MakeString (_cac .Subject .Default ()));
};if _cac .Creator !=""{_faa ("\u0043r\u0065\u0061\u0074\u006f\u0072",_bc .MakeString (string (_cac .Creator )));};if _cac .Producer !=""{_faa ("\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072",_bc .MakeString (string (_cac .Producer )));};if _cac .Trapped {_faa ("\u0054r\u0061\u0070\u0070\u0065\u0064",_bc .MakeName ("\u0054\u0072\u0075\u0065"));
};if !_cac .CreationDate .IsZero (){_faa ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065",_bc .MakeString (_ecb .FormatPdfTime (_cac .CreationDate .Value ())));};if !_cac .ModifyDate .IsZero (){_faa ("\u004do\u0064\u0044\u0061\u0074\u0065",_bc .MakeString (_ecb .FormatPdfTime (_cac .ModifyDate .Value ())));
};_cg .InfoDict =_gfe ;return &_cg ,true ;};

// MediaManagementDerivedFrom is a structure that contains references of identifiers and versions
// from which given document was derived.
type MediaManagementDerivedFrom struct{OriginalDocumentID GUID ;DocumentID GUID ;InstanceID GUID ;VersionID string ;};

// GetPdfaExtensionSchemas gets a pdfa extension schemas.
func (_cd *Document )GetPdfaExtensionSchemas ()([]_ec .Schema ,error ){_cb :=_cd ._ba .FindModel (_ec .Namespace );if _cb ==nil {return nil ,nil ;};_fa ,_eaa :=_cb .(*_ec .Model );if !_eaa {return nil ,_df .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u006d\u006f\u0064\u0065l f\u006fr \u0070\u0064\u0066\u0061\u0045\u0078\u0074en\u0073\u0069\u006f\u006e\u0073\u003a\u0020%\u0054",_cb );
};return _fa .Schemas ,nil ;};

// MarshalIndent the document into xml byte stream with predefined prefix and indent.
func (_gb *Document )MarshalIndent (prefix ,indent string )([]byte ,error ){if _gb ._ba .IsDirty (){if _egb :=_gb ._ba .SyncModels ();_egb !=nil {return nil ,_egb ;};};return _c .MarshalIndent (_gb ._ba ,prefix ,indent );};

// GetMediaManagement gets the media management metadata from provided xmp document.
func (_bda *Document )GetMediaManagement ()(*MediaManagement ,bool ){_ecd :=_b .FindModel (_bda ._ba );if _ecd ==nil {return nil ,false ;};_fcb :=make ([]MediaManagementVersion ,len (_ecd .Versions ));for _be ,_bba :=range _ecd .Versions {_fcb [_be ]=MediaManagementVersion {VersionID :_bba .Version ,ModifyDate :_bba .ModifyDate .Value (),Comments :_bba .Comments ,Modifier :_bba .Modifier };
};_eb :=&MediaManagement {OriginalDocumentID :GUID (_ecd .OriginalDocumentID .Value ()),DocumentID :GUID (_ecd .DocumentID .Value ()),InstanceID :GUID (_ecd .InstanceID .Value ()),VersionID :_ecd .VersionID ,Versions :_fcb };if _ecd .DerivedFrom !=nil {_eb .DerivedFrom =&MediaManagementDerivedFrom {OriginalDocumentID :GUID (_ecd .DerivedFrom .OriginalDocumentID ),DocumentID :GUID (_ecd .DerivedFrom .DocumentID ),InstanceID :GUID (_ecd .DerivedFrom .InstanceID ),VersionID :_ecd .DerivedFrom .VersionID };
};return _eb ,true ;};

// LoadDocument loads up the xmp document from provided input stream.
func LoadDocument (stream []byte )(*Document ,error ){_g :=_c .NewDocument ();if _bf :=_c .Unmarshal (stream ,_g );_bf !=nil {return nil ,_bf ;};return &Document {_ba :_g },nil ;};

// MediaManagement are the values from the document media management metadata.
type MediaManagement struct{

// OriginalDocumentID  as media is imported and projects is started, an original-document ID
// must be created to identify a new document. This identifies a document as a conceptual entity.
OriginalDocumentID GUID ;

// DocumentID when a document is copied to a new file path or converted to a new format with
// Save As, another new document ID should usually be assigned. This identifies a general version or
// branch of a document. You can use it to track different versions or extracted portions of a document
// with the same original-document ID.
DocumentID GUID ;

// InstanceID to track a documentâ€™s editing history, you must assign a new instance ID
// whenever a document is saved after any changes. This uniquely identifies an exact version of a
// document. It is used in resource references (to identify both the document or part itself and the
// referenced or referencing documents), and in document-history resource events (to identify the
// document instance that resulted from the change).
InstanceID GUID ;

// DerivedFrom references the source document from which this one is derived,
// typically through a Save As operation that changes the file name or format. It is a minimal reference;
// missing components can be assumed to be unchanged. For example, a new version might only need
// to specify the instance ID and version number of the previous version, or a rendition might only need
// to specify the instance ID and rendition class of the original.
DerivedFrom *MediaManagementDerivedFrom ;

// VersionID are meant to associate the document with a product version that is part of a release process. They can be useful in tracking the
// document history, but should not be used to identify a document uniquely in any context.
// Usually it simply works by incrementing integers 1,2,3...
VersionID string ;

// Versions is the history of the document versions along with the comments, timestamps and issuers.
Versions []MediaManagementVersion ;};

// NewDocument creates a new document without any previous xmp information.
func NewDocument ()*Document {_cc :=_c .NewDocument ();return &Document {_ba :_cc }};

// PdfAID is the result of the XMP pdfaid metadata.
type PdfAID struct{Part int ;Conformance string ;};

// SetMediaManagement sets up XMP media management metadata: namespace xmpMM.
func (_bfc *Document )SetMediaManagement (options *MediaManagementOptions )error {_bfd ,_ggc :=_b .MakeModel (_bfc ._ba );if _ggc !=nil {return _ggc ;};if options ==nil {options =new (MediaManagementOptions );};_dfg :=_b .ResourceRef {};if _bfd .OriginalDocumentID .IsZero (){if options .OriginalDocumentID !=""{_bfd .OriginalDocumentID =_c .GUID (options .OriginalDocumentID );
}else {_ef ,_feb :=_eg .NewUUID ();if _feb !=nil {return _feb ;};_bfd .OriginalDocumentID =_c .GUID (_ef .String ());};}else {_dfg .OriginalDocumentID =_bfd .OriginalDocumentID ;};switch {case options .DocumentID !="":_bfd .DocumentID =_c .GUID (options .DocumentID );
case options .NewDocumentID ||_bfd .DocumentID .IsZero ():if !_bfd .DocumentID .IsZero (){_dfg .DocumentID =_bfd .DocumentID ;};_fc ,_cab :=_eg .NewUUID ();if _cab !=nil {return _cab ;};_bfd .DocumentID =_c .GUID (_fc .String ());};if !_bfd .InstanceID .IsZero (){_dfg .InstanceID =_bfd .InstanceID ;
};_bfd .InstanceID =_c .GUID (options .InstanceID );if _bfd .InstanceID ==""{_fac ,_fad :=_eg .NewUUID ();if _fad !=nil {return _fad ;};_bfd .InstanceID =_c .GUID (_fac .String ());};if !_dfg .IsZero (){_bfd .DerivedFrom =&_dfg ;};_gbe :=options .VersionID ;
if _bfd .VersionID !=""{_ae ,_ff :=_ca .Atoi (_bfd .VersionID );if _ff !=nil {_gbe =_ca .Itoa (len (_bfd .Versions )+1);}else {_gbe =_ca .Itoa (_ae +1);};};if _gbe ==""{_gbe ="\u0031";};_bfd .VersionID =_gbe ;if _ggc =_bfd .SyncToXMP (_bfc ._ba );_ggc !=nil {return _ggc ;
};return nil ;};