//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_cb "errors";_cg "fmt";_f "github.com/unidoc/unipdf/v3/core";);

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_cf :nil ,_fc :&DiffResults {},_fa :0};};

// String returns the state of the warning.
func (_dcfd *DiffResult )String ()string {return _cg .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_dcfd .Description ,_dcfd .Revision );};func (_ab *defaultDiffPolicy )comparePages (_ade int ,_ecd ,_gba *_f .PdfIndirectObject )error {if _ ,_ffe :=_ab ._cf [_gba .ObjectNumber ];
_ffe {_ab ._fc .addErrorWithDescription (_ade ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");};_gf ,_gfe :=_f .GetDict (_gba .PdfObject );_bga ,_agf :=_f .GetDict (_ecd .PdfObject );if !_gfe ||!_agf {return _cb .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_ae ,_gfe :=_f .GetArray (_gf .Get ("\u004b\u0069\u0064\u0073"));_fgg ,_agf :=_f .GetArray (_bga .Get ("\u004b\u0069\u0064\u0073"));if !_gfe ||!_agf {return _cb .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_bee :=_ae .Len ();if _bee > _fgg .Len (){_bee =_fgg .Len ();};for _gbd :=0;_gbd < _bee ;_gbd ++{_ffd ,_abb :=_f .GetIndirect (_f .ResolveReference (_fgg .Get (_gbd )));_age ,_dfd :=_f .GetIndirect (_f .ResolveReference (_ae .Get (_gbd )));if !_abb ||!_dfd {return _cb .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _ffd .ObjectNumber !=_age .ObjectNumber {_ab ._fc .addErrorWithDescription (_ade ,_cg .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_gbd ));};_ddd ,_abb :=_f .GetDict (_age );_bcaa ,_dfd :=_f .GetDict (_ffd );
if !_abb ||!_dfd {return _cb .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_cebb ,_cdd :=_bgg (_ddd .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _cdd !=nil {return _cdd ;};_adef ,_cdd :=_bgg (_bcaa .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _cdd !=nil {return _cdd ;};if _fbb :=_ab .compareAnnots (_ade ,_adef ,_cebb );_fbb !=nil {return _fbb ;};};for _bgd :=_bee +1;_bgd <=_ae .Len ();_bgd ++{_ab ._fc .addErrorWithDescription (_ade ,_cg .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_bgd ));
};for _gca :=_bee +1;_gca <=_fgg .Len ();_gca ++{_ab ._fc .addErrorWithDescription (_ade ,_cg .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_gca ));};return nil ;};const (NoRestrictions DocMDPPermission =0;
NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);func (_ada *DiffResults )addErrorWithDescription (_gcg int ,_gcag string ){if _ada .Errors ==nil {_ada .Errors =make ([]*DiffResult ,0);};_ada .Errors =append (_ada .Errors ,&DiffResult {Revision :_gcg ,Description :_gcag });
};func (_d *defaultDiffPolicy )compareRevisions (_a *_f .PdfParser ,_df *_f .PdfParser )(*DiffResults ,error ){var _dd error ;_d ._cf ,_dd =_df .GetUpdatedObjects (_a );if _dd !=nil {return &DiffResults {},_dd ;};if len (_d ._cf )==0{return &DiffResults {},nil ;
};_dda :=_df .GetRevisionNumber ();_ga ,_dg :=_f .GetIndirect (_f .ResolveReference (_a .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_fe ,_bg :=_f .GetIndirect (_f .ResolveReference (_df .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));if !_dg ||!_bg {return &DiffResults {},_cb .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_cd ,_dg :=_f .GetDict (_f .ResolveReference (_ga .PdfObject ));_ac ,_bg :=_f .GetDict (_f .ResolveReference (_fe .PdfObject ));if !_dg ||!_bg {return &DiffResults {},_cb .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _bf ,_de :=_f .GetIndirect (_ac .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_de {_af ,_dc :=_f .GetDict (_bf );if !_dc {return &DiffResults {},_cb .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_ag :=make ([]_f .PdfObject ,0);if _ad ,_gad :=_f .GetIndirect (_cd .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_gad {if _bd ,_bc :=_f .GetDict (_ad );_bc {if _ea ,_fg :=_f .GetArray (_bd .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_fg {_ag =_ea .Elements ();};};};_gag ,_dc :=_f .GetArray (_af .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_dc {return &DiffResults {},_cb .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _dgf :=_d .compareFields (_dda ,_ag ,_gag .Elements ());_dgf !=nil {return &DiffResults {},_dgf ;};};_bdd ,_be :=_f .GetIndirect (_ac .Get ("\u0050\u0061\u0067e\u0073"));if !_be {return &DiffResults {},_cb .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_cbb ,_be :=_f .GetIndirect (_cd .Get ("\u0050\u0061\u0067e\u0073"));if !_be {return &DiffResults {},_cb .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _fb :=_d .comparePages (_dda ,_cbb ,_bdd );_fb !=nil {return &DiffResults {},_fb ;};return _d ._fc ,nil ;};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;func (_cbg *DiffResults )addWarning (_ffa *DiffResult ){if _cbg .Warnings ==nil {_cbg .Warnings =make ([]*DiffResult ,0);};_cbg .Warnings =append (_cbg .Warnings ,_ffa );};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_dbf *_f .PdfParser ,_eea *_f .PdfParser ,_cfd *MDPParameters )(*DiffResults ,error );};func (_bbf *defaultDiffPolicy )compareAnnots (_fd int ,_dcg ,_cc []_f .PdfObject )error {_cfe :=make (map[int64 ]*_f .PdfObjectDictionary );for _ ,_fbe :=range _dcg {_dca ,_bef :=_f .GetIndirect (_fbe );
if !_bef {return _cb .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fef ,_bef :=_f .GetDict (_dca .PdfObject );if !_bef {return _cb .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_cfe [_dca .ObjectNumber ]=_fef ;};for _ ,_fga :=range _cc {_bff ,_eg :=_f .GetIndirect (_fga );if !_eg {return _cb .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_aba ,_eg :=_f .GetDict (_bff .PdfObject );if !_eg {return _cb .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gbc ,_ :=_f .GetStringVal (_aba .Get ("\u0054"));
_dbg ,_ :=_f .GetNameVal (_aba .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_fgc :=_cfe [_bff .ObjectNumber ];!_fgc {switch _bbf ._fa {case NoRestrictions ,FillFormsAndAnnots :_bbf ._fc .addWarningWithDescription (_fd ,_cg .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_dbg ,_gbc ));
default:_bcg ,_abe :=_f .GetDict (_bff .PdfObject );if !_abe {return _cb .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_ddaf ,_abe :=_f .GetNameVal (_bcg .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_abe {return _cb .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _ddaf =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _bbf ._fa {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_bbf ._fc .addWarningWithDescription (_fd ,_cg .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_dbg ,_gbc ));
default:_bbf ._fc .addErrorWithDescription (_fd ,_cg .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_dbg ,_gbc ));};}else {_bbf ._fc .addErrorWithDescription (_fd ,_cg .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_dbg ,_gbc ));
};};}else {delete (_cfe ,_bff .ObjectNumber );if _dbge ,_gea :=_bbf ._cf [_bff .ObjectNumber ];_gea {switch _bbf ._fa {case NoRestrictions ,FillFormsAndAnnots :_bbf ._fc .addWarningWithDescription (_fd ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_dbg ,_gbc ));
default:_eeg ,_gd :=_f .GetIndirect (_dbge );if !_gd {return _cb .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_eaa ,_gd :=_f .GetDict (_eeg .PdfObject );if !_gd {return _cb .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_faf ,_gd :=_f .GetNameVal (_eaa .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_gd {return _cb .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _faf =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _bbf ._fa {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_bbf ._fc .addWarningWithDescription (_fd ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_dbg ,_gbc ));
default:_bbf ._fc .addErrorWithDescription (_fd ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_dbg ,_gbc ));};}else {_bbf ._fc .addErrorWithDescription (_fd ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_dbg ,_gbc ));
};};};};};for _ ,_cdde :=range _cfe {_egb ,_ :=_f .GetStringVal (_cdde .Get ("\u0054"));_fggg ,_ :=_f .GetNameVal (_cdde .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _bbf ._fa {case NoRestrictions ,FillFormsAndAnnots :_bbf ._fc .addWarningWithDescription (_fd ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_fggg ,_egb ));
default:_bbf ._fc .addErrorWithDescription (_fd ,_cg .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_fggg ,_egb ));};};return nil ;};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_ca *defaultDiffPolicy )ReviewFile (oldParser *_f .PdfParser ,newParser *_f .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_cb .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_cb .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_ca ._fa =NoRestrictions ;}else {_ca ._fa =params .DocMDPLevel ;};_b :=&DiffResults {};for _ce :=oldParser .GetRevisionNumber ()+1;_ce <=newParser .GetRevisionNumber ();_ce ++{_bb ,_ba :=newParser .GetRevision (_ce -1);
if _ba !=nil {return nil ,_ba ;};_g ,_ba :=newParser .GetRevision (_ce );if _ba !=nil {return nil ,_ba ;};_e ,_ba :=_ca .compareRevisions (_bb ,_g );if _ba !=nil {return nil ,_ba ;};_b .Warnings =append (_b .Warnings ,_e .Warnings ...);_b .Errors =append (_b .Errors ,_e .Errors ...);
};return _b ,nil ;};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};func _bgg (_eegc _f .PdfObject )([]_f .PdfObject ,error ){_adg :=make ([]_f .PdfObject ,0);if _eegc !=nil {_fab :=_eegc ;if _gg ,_dfg :=_f .GetIndirect (_eegc );_dfg {_fab =_gg .PdfObject ;};if _dab ,_bec :=_f .GetArray (_fab );
_bec {_adg =_dab .Elements ();}else {return nil ,_cb .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _adg ,nil ;};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};func (_ff *defaultDiffPolicy )compareFields (_fcg int ,_ge ,_db []_f .PdfObject )error {_ed :=make (map[int64 ]*_f .PdfObjectDictionary );for _ ,_afc :=range _ge {_cbba ,_da :=_f .GetIndirect (_afc );
if !_da {return _cb .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ddb ,_da :=_f .GetDict (_cbba .PdfObject );if !_da {return _cb .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ed [_cbba .ObjectNumber ]=_ddb ;};for _ ,_dfb :=range _db {_dcf ,_fba :=_f .GetIndirect (_dfb );if !_fba {return _cb .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ef ,_fba :=_f .GetDict (_dcf .PdfObject );if !_fba {return _cb .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};T :=_ef .Get ("\u0054");if _ ,_dcc :=_ff ._cf [_dcf .ObjectNumber ];
_dcc {switch _ff ._fa {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ff ._fc .addWarningWithDescription (_fcg ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));default:_ff ._fc .addErrorWithDescription (_fcg ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
};};if _ ,_bgb :=_ed [_dcf .ObjectNumber ];!_bgb {switch _ff ._fa {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ff ._fc .addWarningWithDescription (_fcg ,_cg .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ef .Get ("\u0054")));
default:_ff ._fc .addErrorWithDescription (_fcg ,_cg .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ef .Get ("\u0054")));};}else {delete (_ed ,_dcf .ObjectNumber );if _ ,_eed :=_ff ._cf [_dcf .ObjectNumber ];
_eed {switch _ff ._fa {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ff ._fc .addWarningWithDescription (_fcg ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ef .Get ("\u0054")));
default:_ff ._fc .addErrorWithDescription (_fcg ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ef .Get ("\u0054")));};};};if FT ,_dec :=_f .GetNameVal (_ef .Get ("\u0046\u0054"));_dec {if FT =="\u0053\u0069\u0067"{if _ec ,_dge :=_f .GetIndirect (_ef .Get ("\u0056"));
_dge {if _ ,_gb :=_ff ._cf [_ec .ObjectNumber ];_gb {switch _ff ._fa {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ff ._fc .addWarningWithDescription (_fcg ,_cg .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_ff ._fc .addErrorWithDescription (_fcg ,_cg .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};
};};for _ ,_acd :=range _ed {switch _ff ._fa {case NoRestrictions :_ff ._fc .addWarningWithDescription (_fcg ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_acd .Get ("\u0054")));default:_ff ._fc .addErrorWithDescription (_fcg ,_cg .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_acd .Get ("\u0054")));
};};return nil ;};

// IsPermitted returns true if changes permitted.
func (_bbe *DiffResults )IsPermitted ()bool {return len (_bbe .Errors )==0};type defaultDiffPolicy struct{_cf map[int64 ]_f .PdfObject ;_fc *DiffResults ;_fa DocMDPPermission ;};func (_baf *DiffResults )addWarningWithDescription (_dde int ,_faa string ){if _baf .Warnings ==nil {_baf .Warnings =make ([]*DiffResult ,0);
};_baf .Warnings =append (_baf .Warnings ,&DiffResult {Revision :_dde ,Description :_faa });};func (_fgae *DiffResults )addError (_ddde *DiffResult ){if _fgae .Errors ==nil {_fgae .Errors =make ([]*DiffResult ,0);};_fgae .Errors =append (_fgae .Errors ,_ddde );
};