//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_fg "errors";_c "fmt";_a "github.com/unidoc/unipdf/v3/core";);func (_ggg *defaultDiffPolicy )compareFields (_gec int ,_gf ,_eb []_a .PdfObject )error {_ca :=make (map[int64 ]*_a .PdfObjectDictionary );for _ ,_cecg :=range _gf {_aad ,_dad :=_a .GetIndirect (_cecg );
if !_dad {return _fg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ega ,_dad :=_a .GetDict (_aad .PdfObject );if !_dad {return _fg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ca [_aad .ObjectNumber ]=_ega ;};for _ ,_efe :=range _eb {_bb ,_ag :=_a .GetIndirect (_efe );if !_ag {return _fg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_aag ,_ag :=_a .GetDict (_bb .PdfObject );if !_ag {return _fg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};T :=_aag .Get ("\u0054");if _ ,_bg :=_ggg ._b [_bb .ObjectNumber ];
_bg {switch _ggg ._g {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ggg ._cb .addWarningWithDescription (_gec ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));default:_ggg ._cb .addErrorWithDescription (_gec ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
};};if _ ,_gga :=_ca [_bb .ObjectNumber ];!_gga {switch _ggg ._g {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ggg ._cb .addWarningWithDescription (_gec ,_c .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_aag .Get ("\u0054")));
default:_ggg ._cb .addErrorWithDescription (_gec ,_c .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_aag .Get ("\u0054")));};}else {delete (_ca ,_bb .ObjectNumber );if _ ,_de :=_ggg ._b [_bb .ObjectNumber ];
_de {switch _ggg ._g {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ggg ._cb .addWarningWithDescription (_gec ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_aag .Get ("\u0054")));
default:_ggg ._cb .addErrorWithDescription (_gec ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_aag .Get ("\u0054")));};};};if FT ,_ege :=_a .GetNameVal (_aag .Get ("\u0046\u0054"));_ege {if FT =="\u0053\u0069\u0067"{if _ddg ,_bee :=_a .GetIndirect (_aag .Get ("\u0056"));
_bee {if _ ,_ac :=_ggg ._b [_ddg .ObjectNumber ];_ac {switch _ggg ._g {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ggg ._cb .addWarningWithDescription (_gec ,_c .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_ggg ._cb .addErrorWithDescription (_gec ,_c .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};
};};for _ ,_edf :=range _ca {switch _ggg ._g {case NoRestrictions :_ggg ._cb .addWarningWithDescription (_gec ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_edf .Get ("\u0054")));default:_ggg ._cb .addErrorWithDescription (_gec ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_edf .Get ("\u0054")));
};};return nil ;};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;func (_efea *DiffResults )addWarningWithDescription (_ffgg int ,_gc string ){if _efea .Warnings ==nil {_efea .Warnings =make ([]*DiffResult ,0);};_efea .Warnings =append (_efea .Warnings ,&DiffResult {Revision :_ffgg ,Description :_gc });
};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};func (_ec *defaultDiffPolicy )compareRevisions (_da *_a .PdfParser ,_cf *_a .PdfParser )(*DiffResults ,error ){var _ge error ;_ec ._b ,_ge =_cf .GetUpdatedObjects (_da );if _ge !=nil {return &DiffResults {},_ge ;
};if len (_ec ._b )==0{return &DiffResults {},nil ;};_ae :=_cf .GetRevisionNumber ();_ecg ,_aa :=_a .GetIndirect (_a .ResolveReference (_da .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_dg ,_eg :=_a .GetIndirect (_a .ResolveReference (_cf .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
if !_aa ||!_eg {return &DiffResults {},_fg .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_ef ,_aa :=_a .GetDict (_a .ResolveReference (_ecg .PdfObject ));
_ce ,_eg :=_a .GetDict (_a .ResolveReference (_dg .PdfObject ));if !_aa ||!_eg {return &DiffResults {},_fg .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _ea ,_gg :=_a .GetIndirect (_ce .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_gg {_bfb ,_fge :=_a .GetDict (_ea );if !_fge {return &DiffResults {},_fg .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_cbb :=make ([]_a .PdfObject ,0);if _ff ,_fea :=_a .GetIndirect (_ef .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_fea {if _bc ,_ed :=_a .GetDict (_ff );_ed {if _fd ,_ffg :=_a .GetArray (_bc .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_ffg {_cbb =_fd .Elements ();};};};_aaf ,_fge :=_a .GetArray (_bfb .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_fge {return &DiffResults {},_fg .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _cec :=_ec .compareFields (_ae ,_cbb ,_aaf .Elements ());_cec !=nil {return &DiffResults {},_cec ;};};_edc ,_ab :=_a .GetIndirect (_ce .Get ("\u0050\u0061\u0067e\u0073"));if !_ab {return &DiffResults {},_fg .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_egd ,_ab :=_a .GetIndirect (_ef .Get ("\u0050\u0061\u0067e\u0073"));if !_ab {return &DiffResults {},_fg .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _af :=_ec .comparePages (_ae ,_egd ,_edc );_af !=nil {return &DiffResults {},_af ;};return _ec ._cb ,nil ;};func _ccb (_afg _a .PdfObject )([]_a .PdfObject ,error ){_aeb :=make ([]_a .PdfObject ,0);if _afg !=nil {_fb :=_afg ;if _edg ,_ffe :=_a .GetIndirect (_afg );
_ffe {_fb =_edg .PdfObject ;};if _bdag ,_afge :=_a .GetArray (_fb );_afge {_aeb =_bdag .Elements ();}else {return nil ,_fg .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");
};};return _aeb ,nil ;};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);type defaultDiffPolicy struct{_b map[int64 ]_a .PdfObject ;_cb *DiffResults ;_g DocMDPPermission ;
};func (_dgg *DiffResults )addErrorWithDescription (_eeg int ,_dee string ){if _dgg .Errors ==nil {_dgg .Errors =make ([]*DiffResult ,0);};_dgg .Errors =append (_dgg .Errors ,&DiffResult {Revision :_eeg ,Description :_dee });};

// IsPermitted returns true if changes permitted.
func (_fc *DiffResults )IsPermitted ()bool {return len (_fc .Errors )==0};func (_ad *DiffResults )addWarning (_ceb *DiffResult ){if _ad .Warnings ==nil {_ad .Warnings =make ([]*DiffResult ,0);};_ad .Warnings =append (_ad .Warnings ,_ceb );};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_bf *defaultDiffPolicy )ReviewFile (oldParser *_a .PdfParser ,newParser *_a .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_fg .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_fg .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_bf ._g =NoRestrictions ;}else {_bf ._g =params .DocMDPLevel ;};_gd :=&DiffResults {};for _d :=oldParser .GetRevisionNumber ()+1;_d <=newParser .GetRevisionNumber ();_d ++{_e ,_be :=newParser .GetRevision (_d -1);
if _be !=nil {return nil ,_be ;};_fe ,_be :=newParser .GetRevision (_d );if _be !=nil {return nil ,_be ;};_cc ,_be :=_bf .compareRevisions (_e ,_fe );if _be !=nil {return nil ,_be ;};_gd .Warnings =append (_gd .Warnings ,_cc .Warnings ...);_gd .Errors =append (_gd .Errors ,_cc .Errors ...);
};return _gd ,nil ;};func (_gfa *DiffResults )addError (_cgda *DiffResult ){if _gfa .Errors ==nil {_gfa .Errors =make ([]*DiffResult ,0);};_gfa .Errors =append (_gfa .Errors ,_cgda );};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_b :nil ,_cb :&DiffResults {},_g :0};};func (_cbd *defaultDiffPolicy )comparePages (_bfg int ,_ba ,_egf *_a .PdfIndirectObject )error {if _ ,_ecd :=_cbd ._b [_egf .ObjectNumber ];
_ecd {_cbd ._cb .addErrorWithDescription (_bfg ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");};_cfb ,_eca :=_a .GetDict (_egf .PdfObject );_eff ,_acb :=_a .GetDict (_ba .PdfObject );if !_eca ||!_acb {return _fg .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_gece ,_eca :=_a .GetArray (_cfb .Get ("\u004b\u0069\u0064\u0073"));_dec ,_acb :=_a .GetArray (_eff .Get ("\u004b\u0069\u0064\u0073"));if !_eca ||!_acb {return _fg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_agb :=_gece .Len ();if _agb > _dec .Len (){_agb =_dec .Len ();};for _ggae :=0;_ggae < _agb ;_ggae ++{_ecb ,_ccd :=_a .GetIndirect (_a .ResolveReference (_dec .Get (_ggae )));_dce ,_egb :=_a .GetIndirect (_a .ResolveReference (_gece .Get (_ggae )));if !_ccd ||!_egb {return _fg .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _ecb .ObjectNumber !=_dce .ObjectNumber {_cbd ._cb .addErrorWithDescription (_bfg ,_c .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_ggae ));};_ee ,_ccd :=_a .GetDict (_dce );_aeg ,_egb :=_a .GetDict (_ecb );
if !_ccd ||!_egb {return _fg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_cd ,_age :=_ccb (_ee .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _age !=nil {return _age ;};_gfb ,_age :=_ccb (_aeg .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _age !=nil {return _age ;};if _cgd :=_cbd .compareAnnots (_bfg ,_gfb ,_cd );_cgd !=nil {return _cgd ;};};for _cbc :=_agb +1;_cbc <=_gece .Len ();_cbc ++{_cbd ._cb .addErrorWithDescription (_bfg ,_c .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_cbc ));
};for _gfbb :=_agb +1;_gfbb <=_dec .Len ();_gfbb ++{_cbd ._cb .addErrorWithDescription (_bfg ,_c .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_gfbb ));};return nil ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_egc *_a .PdfParser ,_gbe *_a .PdfParser ,_daeg *MDPParameters )(*DiffResults ,error );};func (_fdc *defaultDiffPolicy )compareAnnots (_gfc int ,_ecc ,_fa []_a .PdfObject )error {_bd :=make (map[int64 ]*_a .PdfObjectDictionary );for _ ,_cfg :=range _ecc {_dde ,_dab :=_a .GetIndirect (_cfg );
if !_dab {return _fg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_cdf ,_dab :=_a .GetDict (_dde .PdfObject );if !_dab {return _fg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_bd [_dde .ObjectNumber ]=_cdf ;};for _ ,_ddb :=range _fa {_bfc ,_cdb :=_a .GetIndirect (_ddb );if !_cdb {return _fg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_cbde ,_cdb :=_a .GetDict (_bfc .PdfObject );if !_cdb {return _fg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ggc ,_ :=_a .GetStringVal (_cbde .Get ("\u0054"));
_afa ,_ :=_a .GetNameVal (_cbde .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_gbb :=_bd [_bfc .ObjectNumber ];!_gbb {switch _fdc ._g {case NoRestrictions ,FillFormsAndAnnots :_fdc ._cb .addWarningWithDescription (_gfc ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_afa ,_ggc ));
default:_eba ,_cac :=_a .GetDict (_bfc .PdfObject );if !_cac {return _fg .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_gbg ,_cac :=_a .GetNameVal (_eba .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_cac {return _fg .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _gbg =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _fdc ._g {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_fdc ._cb .addWarningWithDescription (_gfc ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_afa ,_ggc ));
default:_fdc ._cb .addErrorWithDescription (_gfc ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_afa ,_ggc ));};}else {_fdc ._cb .addErrorWithDescription (_gfc ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_afa ,_ggc ));
};};}else {delete (_bd ,_bfc .ObjectNumber );if _bda ,_ggb :=_fdc ._b [_bfc .ObjectNumber ];_ggb {switch _fdc ._g {case NoRestrictions ,FillFormsAndAnnots :_fdc ._cb .addWarningWithDescription (_gfc ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_afa ,_ggc ));
default:_ddbe ,_acg :=_a .GetIndirect (_bda );if !_acg {return _fg .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_gbc ,_acg :=_a .GetDict (_ddbe .PdfObject );if !_acg {return _fg .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_bac ,_acg :=_a .GetNameVal (_gbc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_acg {return _fg .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _bac =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _fdc ._g {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_fdc ._cb .addWarningWithDescription (_gfc ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_afa ,_ggc ));
default:_fdc ._cb .addErrorWithDescription (_gfc ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_afa ,_ggc ));};}else {_fdc ._cb .addErrorWithDescription (_gfc ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_afa ,_ggc ));
};};};};};for _ ,_bcc :=range _bd {_bba ,_ :=_a .GetStringVal (_bcc .Get ("\u0054"));_egfa ,_ :=_a .GetNameVal (_bcc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _fdc ._g {case NoRestrictions ,FillFormsAndAnnots :_fdc ._cb .addWarningWithDescription (_gfc ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_egfa ,_bba ));
default:_fdc ._cb .addErrorWithDescription (_gfc ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_egfa ,_bba ));};};return nil ;};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};

// String returns the state of the warning.
func (_abg *DiffResult )String ()string {return _c .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_abg .Description ,_abg .Revision );};