//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_gf "errors";_gd "fmt";_b "github.com/unidoc/unipdf/v3/core";);func (_eade *DiffResults )addWarningWithDescription (_aga int ,_ffc string ){if _eade .Warnings ==nil {_eade .Warnings =make ([]*DiffResult ,0);};_eade .Warnings =append (_eade .Warnings ,&DiffResult {Revision :_aga ,Description :_ffc });
};func (_gbbg *DiffResults )addError (_gaa *DiffResult ){if _gbbg .Errors ==nil {_gbbg .Errors =make ([]*DiffResult ,0);};_gbbg .Errors =append (_gbbg .Errors ,_gaa );};

// String returns the state of the warning.
func (_acaf *DiffResult )String ()string {return _gd .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_acaf .Description ,_acaf .Revision );};func (_bb *defaultDiffPolicy )compareRevisions (_ga *_b .PdfParser ,_gc *_b .PdfParser )(*DiffResults ,error ){var _ea error ;
_bb ._c ,_ea =_gc .GetUpdatedObjects (_ga );if _ea !=nil {return &DiffResults {},_ea ;};if len (_bb ._c )==0{return &DiffResults {},nil ;};_fb :=_gc .GetRevisionNumber ();_bc ,_ae :=_b .GetIndirect (_b .ResolveReference (_ga .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
_cb ,_af :=_b .GetIndirect (_b .ResolveReference (_gc .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));if !_ae ||!_af {return &DiffResults {},_gf .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_cba ,_ae :=_b .GetDict (_b .ResolveReference (_bc .PdfObject ));_ed ,_af :=_b .GetDict (_b .ResolveReference (_cb .PdfObject ));if !_ae ||!_af {return &DiffResults {},_gf .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _eg ,_ag :=_b .GetIndirect (_ed .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_ag {_fd ,_de :=_b .GetDict (_eg );if !_de {return &DiffResults {},_gf .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_deg :=make ([]_b .PdfObject ,0);if _dg ,_fe :=_b .GetIndirect (_cba .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_fe {if _afa ,_dc :=_b .GetDict (_dg );_dc {if _aef ,_ge :=_b .GetArray (_afa .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_ge {_deg =_aef .Elements ();};};};_aeg ,_de :=_b .GetArray (_fd .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_de {return &DiffResults {},_gf .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _fef :=_bb .compareFields (_fb ,_deg ,_aeg .Elements ());_fef !=nil {return &DiffResults {},_fef ;};};_fbe ,_dec :=_b .GetIndirect (_ed .Get ("\u0050\u0061\u0067e\u0073"));if !_dec {return &DiffResults {},_gf .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_gb ,_dec :=_b .GetIndirect (_cba .Get ("\u0050\u0061\u0067e\u0073"));if !_dec {return &DiffResults {},_gf .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _fefc :=_bb .comparePages (_fb ,_gb ,_fbe );_fefc !=nil {return &DiffResults {},_fefc ;};return _bb ._a ,nil ;};func (_add *defaultDiffPolicy )compareAnnots (_dfeb int ,_gfg ,_addb []_b .PdfObject )error {_fcc :=make (map[int64 ]*_b .PdfObjectDictionary );
for _ ,_cbb :=range _gfg {_aca ,_cbe :=_b .GetIndirect (_cbb );if !_cbe {return _gf .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gbf ,_cbe :=_b .GetDict (_aca .PdfObject );
if !_cbe {return _gf .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fcc [_aca .ObjectNumber ]=_gbf ;};for _ ,_gfa :=range _addb {_decg ,_fae :=_b .GetIndirect (_gfa );
if !_fae {return _gf .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_agf ,_fae :=_b .GetDict (_decg .PdfObject );if !_fae {return _gf .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_edd ,_ :=_b .GetStringVal (_agf .Get ("\u0054"));_faf ,_ :=_b .GetNameVal (_agf .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_cca :=_fcc [_decg .ObjectNumber ];!_cca {switch _add ._bf {case NoRestrictions ,FillFormsAndAnnots :_add ._a .addWarningWithDescription (_dfeb ,_gd .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_faf ,_edd ));
default:_fge ,_acef :=_b .GetDict (_decg .PdfObject );if !_acef {return _gf .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_gff ,_acef :=_b .GetNameVal (_fge .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_acef {return _gf .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _gff =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _add ._bf {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_add ._a .addWarningWithDescription (_dfeb ,_gd .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_faf ,_edd ));
default:_add ._a .addErrorWithDescription (_dfeb ,_gd .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_faf ,_edd ));};}else {_add ._a .addErrorWithDescription (_dfeb ,_gd .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_faf ,_edd ));
};};}else {delete (_fcc ,_decg .ObjectNumber );if _bg ,_gag :=_add ._c [_decg .ObjectNumber ];_gag {switch _add ._bf {case NoRestrictions ,FillFormsAndAnnots :_add ._a .addWarningWithDescription (_dfeb ,_gd .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_faf ,_edd ));
default:_cbd ,_dfg :=_b .GetIndirect (_bg );if !_dfg {return _gf .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_fba ,_dfg :=_b .GetDict (_cbd .PdfObject );if !_dfg {return _gf .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_eea ,_dfg :=_b .GetNameVal (_fba .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_dfg {return _gf .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _eea =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _add ._bf {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_add ._a .addWarningWithDescription (_dfeb ,_gd .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_faf ,_edd ));
default:_add ._a .addErrorWithDescription (_dfeb ,_gd .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_faf ,_edd ));};}else {_add ._a .addErrorWithDescription (_dfeb ,_gd .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_faf ,_edd ));
};};};};};for _ ,_ggb :=range _fcc {_dfcd ,_ :=_b .GetStringVal (_ggb .Get ("\u0054"));_da ,_ :=_b .GetNameVal (_ggb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _add ._bf {case NoRestrictions ,FillFormsAndAnnots :_add ._a .addWarningWithDescription (_dfeb ,_gd .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_da ,_dfcd ));
default:_add ._a .addErrorWithDescription (_dfeb ,_gd .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_da ,_dfcd ));};};return nil ;};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_c :nil ,_a :&DiffResults {},_bf :0};
};type defaultDiffPolicy struct{_c map[int64 ]_b .PdfObject ;_a *DiffResults ;_bf DocMDPPermission ;};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_f *defaultDiffPolicy )ReviewFile (oldParser *_b .PdfParser ,newParser *_b .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_gf .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_gf .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_f ._bf =NoRestrictions ;}else {_f ._bf =params .DocMDPLevel ;};_e :=&DiffResults {};for _aa :=oldParser .GetRevisionNumber ()+1;_aa <=newParser .GetRevisionNumber ();_aa ++{_ac ,_bfe :=newParser .GetRevision (_aa -1);
if _bfe !=nil {return nil ,_bfe ;};_bd ,_bfe :=newParser .GetRevision (_aa );if _bfe !=nil {return nil ,_bfe ;};_d ,_bfe :=_f .compareRevisions (_ac ,_bd );if _bfe !=nil {return nil ,_bfe ;};_e .Warnings =append (_e .Warnings ,_d .Warnings ...);_e .Errors =append (_e .Errors ,_d .Errors ...);
};return _e ,nil ;};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};

// IsPermitted returns true if changes permitted.
func (_eb *DiffResults )IsPermitted ()bool {return len (_eb .Errors )==0};func (_bdd *defaultDiffPolicy )compareFields (_bdda int ,_df ,_dd []_b .PdfObject )error {_dfd :=make (map[int64 ]*_b .PdfObjectDictionary );for _ ,_gfe :=range _df {_gcd ,_gbc :=_b .GetIndirect (_gfe );
if !_gbc {return _gf .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gg ,_gbc :=_b .GetDict (_gcd .PdfObject );if !_gbc {return _gf .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_dfd [_gcd .ObjectNumber ]=_gg ;};for _ ,_ba :=range _dd {_fbd ,_fbed :=_b .GetIndirect (_ba );if !_fbed {return _gf .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ded ,_fbed :=_b .GetDict (_fbd .PdfObject );if !_fbed {return _gf .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};T :=_ded .Get ("\u0054");
if _ ,_fbeb :=_bdd ._c [_fbd .ObjectNumber ];_fbeb {switch _bdd ._bf {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bdd ._a .addWarningWithDescription (_bdda ,_gd .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_bdd ._a .addErrorWithDescription (_bdda ,_gd .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_ace :=_dfd [_fbd .ObjectNumber ];!_ace {switch _bdd ._bf {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bdd ._a .addWarningWithDescription (_bdda ,_gd .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ded .Get ("\u0054")));
default:_bdd ._a .addErrorWithDescription (_bdda ,_gd .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ded .Get ("\u0054")));};}else {delete (_dfd ,_fbd .ObjectNumber );if _ ,_ce :=_bdd ._c [_fbd .ObjectNumber ];
_ce {switch _bdd ._bf {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bdd ._a .addWarningWithDescription (_bdda ,_gd .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ded .Get ("\u0054")));
default:_bdd ._a .addErrorWithDescription (_bdda ,_gd .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ded .Get ("\u0054")));};};};if FT ,_fa :=_b .GetNameVal (_ded .Get ("\u0046\u0054"));_fa {if FT =="\u0053\u0069\u0067"{if _dfc ,_gbd :=_b .GetIndirect (_ded .Get ("\u0056"));
_gbd {if _ ,_aab :=_bdd ._c [_dfc .ObjectNumber ];_aab {switch _bdd ._bf {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bdd ._a .addWarningWithDescription (_bdda ,_gd .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_bdd ._a .addErrorWithDescription (_bdda ,_gd .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};
};};};for _ ,_ceb :=range _dfd {switch _bdd ._bf {case NoRestrictions :_bdd ._a .addWarningWithDescription (_bdda ,_gd .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_ceb .Get ("\u0054")));default:_bdd ._a .addErrorWithDescription (_bdda ,_gd .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_ceb .Get ("\u0054")));
};};return nil ;};func _aac (_geb _b .PdfObject )([]_b .PdfObject ,error ){_gbb :=make ([]_b .PdfObject ,0);if _geb !=nil {_ceg :=_geb ;if _dfgg ,_gdf :=_b .GetIndirect (_geb );_gdf {_ceg =_dfgg .PdfObject ;};if _aee ,_fgb :=_b .GetArray (_ceg );_fgb {_gbb =_aee .Elements ();
}else {return nil ,_gf .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _gbb ,nil ;};func (_fbf *DiffResults )addWarning (_fcac *DiffResult ){if _fbf .Warnings ==nil {_fbf .Warnings =make ([]*DiffResult ,0);
};_fbf .Warnings =append (_fbf .Warnings ,_fcac );};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};func (_ff *DiffResults )addErrorWithDescription (_dfce int ,_ccdg string ){if _ff .Errors ==nil {_ff .Errors =make ([]*DiffResult ,0);};_ff .Errors =append (_ff .Errors ,&DiffResult {Revision :_dfce ,Description :_ccdg });
};func (_cg *defaultDiffPolicy )comparePages (_cgb int ,_edc ,_aaa *_b .PdfIndirectObject )error {if _ ,_fg :=_cg ._c [_aaa .ObjectNumber ];_fg {_cg ._a .addErrorWithDescription (_cgb ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");
};_cf ,_gea :=_b .GetDict (_aaa .PdfObject );_ee ,_gef :=_b .GetDict (_edc .PdfObject );if !_gea ||!_gef {return _gf .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_ead ,_gea :=_b .GetArray (_cf .Get ("\u004b\u0069\u0064\u0073"));_dfe ,_gef :=_b .GetArray (_ee .Get ("\u004b\u0069\u0064\u0073"));if !_gea ||!_gef {return _gf .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_fbdf :=_ead .Len ();if _fbdf > _dfe .Len (){_fbdf =_dfe .Len ();};for _bab :=0;_bab < _fbdf ;_bab ++{_eed ,_gdc :=_b .GetIndirect (_b .ResolveReference (_dfe .Get (_bab )));_gcb ,_fgc :=_b .GetIndirect (_b .ResolveReference (_ead .Get (_bab )));if !_gdc ||!_fgc {return _gf .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _eed .ObjectNumber !=_gcb .ObjectNumber {_cg ._a .addErrorWithDescription (_cgb ,_gd .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_bab ));};_eda ,_gdc :=_b .GetDict (_gcb );_db ,_fgc :=_b .GetDict (_eed );
if !_gdc ||!_fgc {return _gf .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_aefb ,_acee :=_aac (_eda .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _acee !=nil {return _acee ;};_ec ,_acee :=_aac (_db .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _acee !=nil {return _acee ;};if _gefa :=_cg .compareAnnots (_cgb ,_ec ,_aefb );_gefa !=nil {return _gefa ;};};for _cbc :=_fbdf +1;_cbc <=_ead .Len ();
_cbc ++{_cg ._a .addErrorWithDescription (_cgb ,_gd .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_cbc ));};for _cbg :=_fbdf +1;_cbg <=_dfe .Len ();_cbg ++{_cg ._a .addErrorWithDescription (_cgb ,_gd .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_cbg ));
};return nil ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_feg *_b .PdfParser ,_adg *_b .PdfParser ,_ffg *MDPParameters )(*DiffResults ,error );};