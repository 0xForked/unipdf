//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_g "errors";_fa "fmt";_gd "github.com/unidoc/unipdf/v3/core";);func (_ade *DiffResults )addWarning (_bba *DiffResult ){if _ade .Warnings ==nil {_ade .Warnings =make ([]*DiffResult ,0);};_ade .Warnings =append (_ade .Warnings ,_bba );
};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};func _acdb (_ded _gd .PdfObject )([]_gd .PdfObject ,error ){_fbg :=make ([]_gd .PdfObject ,0);if _ded !=nil {_bdb :=_ded ;if _ee ,_daa :=_gd .GetIndirect (_ded );_daa {_bdb =_ee .PdfObject ;};if _afgb ,_bgga :=_gd .GetArray (_bdb );
_bgga {_fbg =_afgb .Elements ();}else {return nil ,_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _fbg ,nil ;};type defaultDiffPolicy struct{_c map[int64 ]_gd .PdfObject ;
_b *DiffResults ;_a DocMDPPermission ;};func (_acb *DiffResults )addErrorWithDescription (_fac int ,_fgc string ){if _acb .Errors ==nil {_acb .Errors =make ([]*DiffResult ,0);};_acb .Errors =append (_acb .Errors ,&DiffResult {Revision :_fac ,Description :_fgc });
};

// IsPermitted returns true if changes permitted.
func (_cag *DiffResults )IsPermitted ()bool {return len (_cag .Errors )==0};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;func (_fc *defaultDiffPolicy )compareRevisions (_ge *_gd .PdfParser ,_ga *_gd .PdfParser )(*DiffResults ,error ){var _eaf error ;_fc ._c ,_eaf =_ga .GetUpdatedObjects (_ge );if _eaf !=nil {return &DiffResults {},_eaf ;};if len (_fc ._c )==0{return &DiffResults {},nil ;
};_aa :=_ga .GetRevisionNumber ();_bf ,_eb :=_gd .GetIndirect (_gd .ResolveReference (_ge .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_bb ,_db :=_gd .GetIndirect (_gd .ResolveReference (_ga .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));if !_eb ||!_db {return &DiffResults {},_g .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_ceg ,_eb :=_gd .GetDict (_gd .ResolveReference (_bf .PdfObject ));_bbf ,_db :=_gd .GetDict (_gd .ResolveReference (_bb .PdfObject ));if !_eb ||!_db {return &DiffResults {},_g .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _de ,_cc :=_gd .GetIndirect (_bbf .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_cc {_gc ,_ca :=_gd .GetDict (_de );if !_ca {return &DiffResults {},_g .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_cbc :=make ([]_gd .PdfObject ,0);if _ab ,_gcb :=_gd .GetIndirect (_ceg .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_gcb {if _cee ,_ae :=_gd .GetDict (_ab );_ae {if _ba ,_eg :=_gd .GetArray (_cee .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_eg {_cbc =_ba .Elements ();};};};_bae ,_ca :=_gd .GetArray (_gc .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_ca {return &DiffResults {},_g .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _ac :=_fc .compareFields (_aa ,_cbc ,_bae .Elements ());_ac !=nil {return &DiffResults {},_ac ;};};_fd ,_aed :=_gd .GetIndirect (_bbf .Get ("\u0050\u0061\u0067e\u0073"));if !_aed {return &DiffResults {},_g .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_gda ,_aed :=_gd .GetIndirect (_ceg .Get ("\u0050\u0061\u0067e\u0073"));if !_aed {return &DiffResults {},_g .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _bbc :=_fc .comparePages (_aa ,_gda ,_fd );_bbc !=nil {return &DiffResults {},_bbc ;};return _fc ._b ,nil ;};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};func (_af *defaultDiffPolicy )compareFields (_bc int ,_acd ,_dg []_gd .PdfObject )error {_bbfa :=make (map[int64 ]*_gd .PdfObjectDictionary );for _ ,_baee :=range _acd {_da ,_dc :=_gd .GetIndirect (_baee );
if !_dc {return _g .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ccc ,_dc :=_gd .GetDict (_da .PdfObject );if !_dc {return _g .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_bbfa [_da .ObjectNumber ]=_ccc ;};for _ ,_cf :=range _dg {_cae ,_ef :=_gd .GetIndirect (_cf );if !_ef {return _g .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ffg ,_ef :=_gd .GetDict (_cae .PdfObject );if !_ef {return _g .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};T :=_ffg .Get ("\u0054");if _ ,_gdc :=_af ._c [_cae .ObjectNumber ];
_gdc {switch _af ._a {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_af ._b .addWarningWithDescription (_bc ,_fa .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));default:_af ._b .addErrorWithDescription (_bc ,_fa .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
};};if _ ,_cad :=_bbfa [_cae .ObjectNumber ];!_cad {switch _af ._a {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_af ._b .addWarningWithDescription (_bc ,_fa .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ffg .Get ("\u0054")));
default:_af ._b .addErrorWithDescription (_bc ,_fa .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ffg .Get ("\u0054")));};}else {delete (_bbfa ,_cae .ObjectNumber );if _ ,_def :=_af ._c [_cae .ObjectNumber ];
_def {switch _af ._a {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_af ._b .addWarningWithDescription (_bc ,_fa .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ffg .Get ("\u0054")));default:_af ._b .addErrorWithDescription (_bc ,_fa .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ffg .Get ("\u0054")));
};};};if FT ,_cfd :=_gd .GetNameVal (_ffg .Get ("\u0046\u0054"));_cfd {if FT =="\u0053\u0069\u0067"{if _feb ,_gee :=_gd .GetIndirect (_ffg .Get ("\u0056"));_gee {if _ ,_gdb :=_af ._c [_feb .ObjectNumber ];_gdb {switch _af ._a {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_af ._b .addWarningWithDescription (_bc ,_fa .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_af ._b .addErrorWithDescription (_bc ,_fa .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};};
};for _ ,_gcd :=range _bbfa {switch _af ._a {case NoRestrictions :_af ._b .addWarningWithDescription (_bc ,_fa .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_gcd .Get ("\u0054")));default:_af ._b .addErrorWithDescription (_bc ,_fa .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_gcd .Get ("\u0054")));
};};return nil ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_ccg *_gd .PdfParser ,_eaaf *_gd .PdfParser ,_bbd *MDPParameters )(*DiffResults ,error );};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_e *defaultDiffPolicy )ReviewFile (oldParser *_gd .PdfParser ,newParser *_gd .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_g .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_g .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_e ._a =NoRestrictions ;}else {_e ._a =params .DocMDPLevel ;};_ce :=&DiffResults {};for _cb :=oldParser .GetRevisionNumber ()+1;_cb <=newParser .GetRevisionNumber ();_cb ++{_ea ,_ff :=newParser .GetRevision (_cb -1);
if _ff !=nil {return nil ,_ff ;};_faa ,_ff :=newParser .GetRevision (_cb );if _ff !=nil {return nil ,_ff ;};_d ,_ff :=_e .compareRevisions (_ea ,_faa );if _ff !=nil {return nil ,_ff ;};_ce .Warnings =append (_ce .Warnings ,_d .Warnings ...);_ce .Errors =append (_ce .Errors ,_d .Errors ...);
};return _ce ,nil ;};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);func (_bg *defaultDiffPolicy )compareAnnots (_gga int ,_aad ,_cg []_gd .PdfObject )error {_ag :=make (map[int64 ]*_gd .PdfObjectDictionary );
for _ ,_gbcc :=range _aad {_bgc ,_afab :=_gd .GetIndirect (_gbcc );if !_afab {return _g .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_dad ,_afab :=_gd .GetDict (_bgc .PdfObject );
if !_afab {return _g .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ag [_bgc .ObjectNumber ]=_dad ;};for _ ,_cef :=range _cg {_add ,_cea :=_gd .GetIndirect (_cef );
if !_cea {return _g .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fca ,_cea :=_gd .GetDict (_add .PdfObject );if !_cea {return _g .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_dbg ,_ :=_gd .GetStringVal (_fca .Get ("\u0054"));_fad ,_ :=_gd .GetNameVal (_fca .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_adc :=_ag [_add .ObjectNumber ];!_adc {switch _bg ._a {case NoRestrictions ,FillFormsAndAnnots :_bg ._b .addWarningWithDescription (_gga ,_fa .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_fad ,_dbg ));
default:_caea ,_egc :=_gd .GetDict (_add .PdfObject );if !_egc {return _g .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_gdf ,_egc :=_gd .GetNameVal (_caea .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_egc {return _g .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _gdf =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _bg ._a {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_bg ._b .addWarningWithDescription (_gga ,_fa .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_fad ,_dbg ));
default:_bg ._b .addErrorWithDescription (_gga ,_fa .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_fad ,_dbg ));};}else {_bg ._b .addErrorWithDescription (_gga ,_fa .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_fad ,_dbg ));
};};}else {delete (_ag ,_add .ObjectNumber );if _baf ,_cccf :=_bg ._c [_add .ObjectNumber ];_cccf {switch _bg ._a {case NoRestrictions ,FillFormsAndAnnots :_bg ._b .addWarningWithDescription (_gga ,_fa .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_fad ,_dbg ));
default:_bce ,_dga :=_gd .GetIndirect (_baf );if !_dga {return _g .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_gbce ,_dga :=_gd .GetDict (_bce .PdfObject );if !_dga {return _g .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_fb ,_dga :=_gd .GetNameVal (_gbce .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_dga {return _g .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _fb =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _bg ._a {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_bg ._b .addWarningWithDescription (_gga ,_fa .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_fad ,_dbg ));
default:_bg ._b .addErrorWithDescription (_gga ,_fa .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_fad ,_dbg ));};}else {_bg ._b .addErrorWithDescription (_gga ,_fa .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_fad ,_dbg ));
};};};};};for _ ,_bd :=range _ag {_cdb ,_ :=_gd .GetStringVal (_bd .Get ("\u0054"));_edd ,_ :=_gd .GetNameVal (_bd .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _bg ._a {case NoRestrictions ,FillFormsAndAnnots :_bg ._b .addWarningWithDescription (_gga ,_fa .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_edd ,_cdb ));
default:_bg ._b .addErrorWithDescription (_gga ,_fa .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_edd ,_cdb ));};};return nil ;};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_c :nil ,_b :&DiffResults {},_a :0}};


// String returns the state of the warning.
func (_eeg *DiffResult )String ()string {return _fa .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_eeg .Description ,_eeg .Revision );};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};func (_bfe *DiffResults )addWarningWithDescription (_ddd int ,_agf string ){if _bfe .Warnings ==nil {_bfe .Warnings =make ([]*DiffResult ,0);};_bfe .Warnings =append (_bfe .Warnings ,&DiffResult {Revision :_ddd ,Description :_agf });
};func (_abac *DiffResults )addError (_bee *DiffResult ){if _abac .Errors ==nil {_abac .Errors =make ([]*DiffResult ,0);};_abac .Errors =append (_abac .Errors ,_bee );};func (_gab *defaultDiffPolicy )comparePages (_ged int ,_gca ,_ec *_gd .PdfIndirectObject )error {if _ ,_gb :=_gab ._c [_ec .ObjectNumber ];
_gb {_gab ._b .addErrorWithDescription (_ged ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");};_bcc ,_cd :=_gd .GetDict (_ec .PdfObject );_dag ,_fg :=_gd .GetDict (_gca .PdfObject );if !_cd ||!_fg {return _g .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_ecf ,_cd :=_gd .GetArray (_bcc .Get ("\u004b\u0069\u0064\u0073"));_aedf ,_fg :=_gd .GetArray (_dag .Get ("\u004b\u0069\u0064\u0073"));if !_cd ||!_fg {return _g .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_dab :=_ecf .Len ();if _dab > _aedf .Len (){_dab =_aedf .Len ();};for _afg :=0;_afg < _dab ;_afg ++{_ccf ,_eaa :=_gd .GetIndirect (_gd .ResolveReference (_aedf .Get (_afg )));_df ,_ad :=_gd .GetIndirect (_gd .ResolveReference (_ecf .Get (_afg )));if !_eaa ||!_ad {return _g .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _ccf .ObjectNumber !=_df .ObjectNumber {_gab ._b .addErrorWithDescription (_ged ,_fa .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_afg ));};_gbc ,_eaa :=_gd .GetDict (_df );_cfg ,_ad :=_gd .GetDict (_ccf );
if !_eaa ||!_ad {return _g .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_be ,_gbf :=_acdb (_gbc .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _gbf !=nil {return _gbf ;};_fgd ,_gbf :=_acdb (_cfg .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _gbf !=nil {return _gbf ;};if _gcac :=_gab .compareAnnots (_ged ,_fgd ,_be );_gcac !=nil {return _gcac ;};};for _ddc :=_dab +1;_ddc <=_ecf .Len ();
_ddc ++{_gab ._b .addErrorWithDescription (_ged ,_fa .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ddc ));};for _ebf :=_dab +1;_ebf <=_aedf .Len ();_ebf ++{_gab ._b .addErrorWithDescription (_ged ,_fa .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_ebf ));
};return nil ;};